00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic026.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 26
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 40 8B A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 94 67 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 30 65 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 9C 55 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 10 58 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 74 53 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 74 C0 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 50 5F 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 E8 F1 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 98 19 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 50 17 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 28 29 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 9C 4C 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     7B 00 00 FF 
00818     13 E4 05 F1 | 	add	objptr, ##62995
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     7B 00 00 FF 
0082c     58 E4 85 F1 | 	sub	objptr, ##63064
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     F8 B8 B1 FD | 	call	#__system___waitms
0083c     7B 00 00 FF 
00840     58 E4 05 F1 | 	add	objptr, ##63064
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     7B 00 00 FF 
00854     58 E4 85 F1 | 	sub	objptr, ##63064
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     D0 B8 B1 FD | 	call	#__system___waitms
00864     7B 00 00 FF 
00868     58 E4 05 F1 | 	add	objptr, ##63064
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     7B 00 00 FF 
0087c     58 E4 85 F1 | 	sub	objptr, ##63064
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     A8 B8 B1 FD | 	call	#__system___waitms
0088c     7B 00 00 FF 
00890     58 E4 05 F1 | 	add	objptr, ##63064
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     7B 00 00 FF 
008a4     58 E4 85 F1 | 	sub	objptr, ##63064
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     7A 00 00 FF 
008d4     D0 E5 05 F1 | 	add	objptr, ##62928
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     7A 00 00 FF 
00914     D8 E5 85 F1 | 	sub	objptr, ##62936
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     3C AE B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     8C AE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     7C AE B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     7A 00 00 FF 
00980     E0 E5 05 F1 | 	add	objptr, ##62944
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     7A 00 00 FF 
009ac     FC E5 85 F1 | 	sub	objptr, ##62972
009b0     E0 AD B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     7A 00 00 FF 
009e0     E0 E5 05 F1 | 	add	objptr, ##62944
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     7A 00 00 FF 
00a08     FC E5 85 F1 | 	sub	objptr, ##62972
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     00 E4 05 F1 | 	add	objptr, ##44544
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     24 00 00 FF 
00a50     6C E4 05 F1 | 	add	objptr, ##18540
00a54     F2 00 68 FC | 	wrlong	#0, objptr
00a58     11 00 00 FF 
00a5c     14 E4 85 F1 | 	sub	objptr, ##8724
00a60     F2 00 68 FC | 	wrlong	#0, objptr
00a64     6A 00 00 FF 
00a68     60 E4 85 F1 | 	sub	objptr, ##54368
00a6c     00 20 06 F6 | 	mov	local02, #0
00a70                 | LR__0020
00a70                 | ' 
00a70                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a70                 | ' 
00a70                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a70                 | ' 
00a70                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a70     00 22 06 F6 | 	mov	local03, #0
00a74     20 4E 05 F1 | 	add	fp, #32
00a78     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a7c                 | LR__0021
00a7c     11 25 02 F6 | 	mov	local04, local03
00a80     02 24 66 F0 | 	shl	local04, #2
00a84     A7 24 02 F1 | 	add	local04, fp
00a88     12 01 68 FC | 	wrlong	#0, local04
00a8c     01 22 06 F1 | 	add	local03, #1
00a90     7E 22 56 F2 | 	cmps	local03, #126 wc
00a94     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a98                 | LR__0022
00a98     20 4E 85 F1 | 	sub	fp, #32
00a9c                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a9c     00 22 06 F6 | 	mov	local03, #0
00aa0     54 00 00 FF 
00aa4     F0 E5 05 F1 | 	add	objptr, ##43504
00aa8     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aac                 | LR__0023
00aac     11 1F 02 F6 | 	mov	local01, local03
00ab0     03 1E 66 F0 | 	shl	local01, #3
00ab4     F2 1E 02 F1 | 	add	local01, objptr
00ab8     5A 01 00 FF 
00abc     7E 16 06 F6 | 	mov	arg03, ##@LR__4547
00ac0     0F 17 62 FC | 	wrlong	arg03, local01
00ac4     11 1F 02 F6 | 	mov	local01, local03
00ac8     03 1E 66 F0 | 	shl	local01, #3
00acc     F2 26 02 F6 | 	mov	local05, objptr
00ad0     F2 1E 02 F1 | 	add	local01, objptr
00ad4     00 28 06 F6 | 	mov	local06, #0
00ad8     04 1E 06 F1 | 	add	local01, #4
00adc     0F 01 68 FC | 	wrlong	#0, local01
00ae0     01 22 06 F1 | 	add	local03, #1
00ae4     7E 22 56 F2 | 	cmps	local03, #126 wc
00ae8     C0 FF 9F CD |  if_b	jmp	#LR__0023
00aec                 | LR__0024
00aec     02 00 00 FF 
00af0     10 E4 05 F1 | 	add	objptr, ##1040
00af4     F2 12 02 FB | 	rdlong	arg01, objptr
00af8     57 00 00 FF 
00afc     00 E4 85 F1 | 	sub	objptr, ##44544
00b00     10 D8 B1 FD | 	call	#__system__RTrim_S
00b04     FD 12 02 F6 | 	mov	arg01, result1
00b08     48 D7 B1 FD | 	call	#__system__LTrim_S
00b0c     57 00 00 FF 
00b10     00 E4 05 F1 | 	add	objptr, ##44544
00b14     F2 FA 61 FC | 	wrlong	result1, objptr
00b18     5A 01 00 FF 
00b1c     7F 1E 06 F6 | 	mov	local01, ##@LR__4548
00b20     24 00 00 FF 
00b24     A4 E4 05 F1 | 	add	objptr, ##18596
00b28     F2 1E 62 FC | 	wrlong	local01, objptr
00b2c     24 00 00 FF 
00b30     A4 E4 85 F1 | 	sub	objptr, ##18596
00b34     F2 12 02 FB | 	rdlong	arg01, objptr
00b38     57 00 00 FF 
00b3c     00 E4 85 F1 | 	sub	objptr, ##44544
00b40     09 2B 02 F6 | 	mov	local07, arg01
00b44     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b48                 | LR__0025
00b48     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b4c     01 2A 06 51 |  if_ne	add	local07, #1
00b50     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b54                 | LR__0026
00b54     09 2B 8A F1 | 	sub	local07, arg01 wz
00b58     7B 00 00 FF 
00b5c     A8 E4 05 F1 | 	add	objptr, ##63144
00b60     F2 2A 62 FC | 	wrlong	local07, objptr
00b64                 | ' if l=0 then goto 101
00b64     7B 00 00 FF 
00b68     A8 E4 85 F1 | 	sub	objptr, ##63144
00b6c     C0 27 90 AD |  if_e	jmp	#LR__0149
00b70     7B 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##63148
00b78     F2 00 68 FC | 	wrlong	#0, objptr
00b7c                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b7c                 | ' for i=1 to len(line$)
00b7c     01 22 06 F6 | 	mov	local03, #1
00b80     24 00 00 FF 
00b84     AC E4 85 F1 | 	sub	objptr, ##18604
00b88     F2 12 02 FB | 	rdlong	arg01, objptr
00b8c     57 00 00 FF 
00b90     00 E4 85 F1 | 	sub	objptr, ##44544
00b94     09 2B 02 F6 | 	mov	local07, arg01
00b98     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b9c                 | LR__0027
00b9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
00ba0     01 2A 06 51 |  if_ne	add	local07, #1
00ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba8                 | LR__0028
00ba8     09 2B 82 F1 | 	sub	local07, arg01
00bac     15 2D 02 F6 | 	mov	local08, local07
00bb0     01 2C 06 F1 | 	add	local08, #1
00bb4                 | LR__0029
00bb4     16 23 52 F2 | 	cmps	local03, local08 wc
00bb8     00 01 90 3D |  if_ae	jmp	#LR__0032
00bbc                 | ' 
00bbc                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bbc     57 00 00 FF 
00bc0     00 E4 05 F1 | 	add	objptr, ##44544
00bc4     F2 12 02 FB | 	rdlong	arg01, objptr
00bc8     57 00 00 FF 
00bcc     00 E4 85 F1 | 	sub	objptr, ##44544
00bd0     11 15 02 F6 | 	mov	arg02, local03
00bd4     01 16 06 F6 | 	mov	arg03, #1
00bd8     C0 D3 B1 FD | 	call	#__system__Mid_S
00bdc     FD 12 02 F6 | 	mov	arg01, result1
00be0     5A 01 00 FF 
00be4     80 14 06 F6 | 	mov	arg02, ##@LR__4549
00be8     7C B2 B1 FD | 	call	#__system___string_cmp
00bec     00 FA 0D F2 | 	cmp	result1, #0 wz
00bf0     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bf4     7B 00 00 FF 
00bf8     AC E4 05 F1 | 	add	objptr, ##63148
00bfc     F2 24 0A FB | 	rdlong	local04, objptr wz
00c00     7B 00 00 FF 
00c04     AC E4 85 F1 | 	sub	objptr, ##63148
00c08     7B 00 00 AF 
00c0c     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c10     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c14     7B 00 00 AF 
00c18     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c1c     60 00 90 AD |  if_e	jmp	#LR__0031
00c20                 | LR__0030
00c20     57 00 00 FF 
00c24     00 E4 05 F1 | 	add	objptr, ##44544
00c28     F2 12 02 FB | 	rdlong	arg01, objptr
00c2c     57 00 00 FF 
00c30     00 E4 85 F1 | 	sub	objptr, ##44544
00c34     11 15 02 F6 | 	mov	arg02, local03
00c38     01 16 06 F6 | 	mov	arg03, #1
00c3c     5C D3 B1 FD | 	call	#__system__Mid_S
00c40     FD 12 02 F6 | 	mov	arg01, result1
00c44     5A 01 00 FF 
00c48     82 14 06 F6 | 	mov	arg02, ##@LR__4550
00c4c     18 B2 B1 FD | 	call	#__system___string_cmp
00c50     00 FA 0D F2 | 	cmp	result1, #0 wz
00c54     7B 00 00 AF 
00c58     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c5c     F2 24 02 AB |  if_e	rdlong	local04, objptr
00c60     7B 00 00 AF 
00c64     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c68     01 24 0E A2 |  if_e	cmp	local04, #1 wz
00c6c     7B 00 00 AF 
00c70     AC E4 05 A1 |  if_e	add	objptr, ##63148
00c74     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c78     7B 00 00 AF 
00c7c     AC E4 85 A1 |  if_e	sub	objptr, ##63148
00c80                 | LR__0031
00c80     11 1F 02 F6 | 	mov	local01, local03
00c84     03 1E 66 F0 | 	shl	local01, #3
00c88     54 00 00 FF 
00c8c     F0 E5 05 F1 | 	add	objptr, ##43504
00c90     F2 26 02 F6 | 	mov	local05, objptr
00c94     F2 1E 02 F1 | 	add	local01, objptr
00c98     26 00 00 FF 
00c9c     BC E4 05 F1 | 	add	objptr, ##19644
00ca0     F2 28 02 FB | 	rdlong	local06, objptr
00ca4     7B 00 00 FF 
00ca8     AC E4 85 F1 | 	sub	objptr, ##63148
00cac     04 1E 06 F1 | 	add	local01, #4
00cb0     0F 29 62 FC | 	wrlong	local06, local01
00cb4     01 22 06 F1 | 	add	local03, #1
00cb8     F8 FE 9F FD | 	jmp	#LR__0029
00cbc                 | LR__0032
00cbc     01 22 06 F6 | 	mov	local03, #1
00cc0                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cc0                 | LR__0033
00cc0     57 00 00 FF 
00cc4     00 E4 05 F1 | 	add	objptr, ##44544
00cc8     F2 12 02 FB | 	rdlong	arg01, objptr
00ccc     57 00 00 FF 
00cd0     00 E4 85 F1 | 	sub	objptr, ##44544
00cd4     11 15 02 F6 | 	mov	arg02, local03
00cd8     01 16 06 F6 | 	mov	arg03, #1
00cdc     BC D2 B1 FD | 	call	#__system__Mid_S
00ce0     FD 12 02 F6 | 	mov	arg01, result1
00ce4     5A 01 00 FF 
00ce8     84 2E 06 F6 | 	mov	local09, ##@LR__4551
00cec     17 15 02 F6 | 	mov	arg02, local09
00cf0     74 B1 B1 FD | 	call	#__system___string_cmp
00cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf8     34 00 90 5D |  if_ne	jmp	#LR__0034
00cfc     11 27 02 F6 | 	mov	local05, local03
00d00     03 26 66 F0 | 	shl	local05, #3
00d04     54 00 00 FF 
00d08     F0 E5 05 F1 | 	add	objptr, ##43504
00d0c     F2 28 02 F6 | 	mov	local06, objptr
00d10     F2 26 02 F1 | 	add	local05, objptr
00d14     04 26 06 F1 | 	add	local05, #4
00d18     13 31 02 FB | 	rdlong	local10, local05
00d1c     04 26 86 F1 | 	sub	local05, #4
00d20     18 33 0A F6 | 	mov	local11, local10 wz
00d24     54 00 00 FF 
00d28     F0 E5 85 F1 | 	sub	objptr, ##43504
00d2c     24 00 90 AD |  if_e	jmp	#LR__0035
00d30                 | LR__0034
00d30     7B 00 00 FF 
00d34     A8 E4 05 F1 | 	add	objptr, ##63144
00d38     F2 34 02 FB | 	rdlong	local12, objptr
00d3c     7B 00 00 FF 
00d40     A8 E4 85 F1 | 	sub	objptr, ##63144
00d44     1A 37 02 F6 | 	mov	local13, local12
00d48     1B 23 52 F2 | 	cmps	local03, local13 wc
00d4c     01 22 06 C1 |  if_b	add	local03, #1
00d50     6C FF 9F CD |  if_b	jmp	#LR__0033
00d54                 | LR__0035
00d54                 | ' 
00d54                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d54                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d54     7B 00 00 FF 
00d58     A8 E4 05 F1 | 	add	objptr, ##63144
00d5c     F2 1E 02 FB | 	rdlong	local01, objptr
00d60     7B 00 00 FF 
00d64     A8 E4 85 F1 | 	sub	objptr, ##63144
00d68     0F 23 52 F2 | 	cmps	local03, local01 wc
00d6c     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d70     57 00 00 FF 
00d74     00 E4 05 F1 | 	add	objptr, ##44544
00d78     F2 28 02 FB | 	rdlong	local06, objptr
00d7c     57 00 00 FF 
00d80     00 E4 85 F1 | 	sub	objptr, ##44544
00d84     14 13 02 F6 | 	mov	arg01, local06
00d88     09 2B 02 F6 | 	mov	local07, arg01
00d8c     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d90                 | LR__0036
00d90     15 FB C9 FA | 	rdbyte	result1, local07 wz
00d94     01 2A 06 51 |  if_ne	add	local07, #1
00d98     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d9c                 | LR__0037
00d9c     09 2B 82 F1 | 	sub	local07, arg01
00da0     15 15 02 F6 | 	mov	arg02, local07
00da4     11 15 82 F1 | 	sub	arg02, local03
00da8     14 13 02 F6 | 	mov	arg01, local06
00dac     5C D1 B1 FD | 	call	#__system__Right_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     5C D5 B1 FD | 	call	#__system__RTrim_S
00db8     FD 12 02 F6 | 	mov	arg01, result1
00dbc     94 D4 B1 FD | 	call	#__system__LTrim_S
00dc0     7B 00 00 FF 
00dc4     B0 E4 05 F1 | 	add	objptr, ##63152
00dc8     F2 FA 61 FC | 	wrlong	result1, objptr
00dcc     24 00 00 FF 
00dd0     B0 E4 85 F1 | 	sub	objptr, ##18608
00dd4     F2 12 02 FB | 	rdlong	arg01, objptr
00dd8     57 00 00 FF 
00ddc     00 E4 85 F1 | 	sub	objptr, ##44544
00de0     01 22 86 F1 | 	sub	local03, #1
00de4     11 15 02 F6 | 	mov	arg02, local03
00de8     98 D0 B1 FD | 	call	#__system__Left_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     20 D5 B1 FD | 	call	#__system__RTrim_S
00df4     FD 12 02 F6 | 	mov	arg01, result1
00df8     58 D4 B1 FD | 	call	#__system__LTrim_S
00dfc     57 00 00 FF 
00e00     00 E4 05 F1 | 	add	objptr, ##44544
00e04     F2 FA 61 FC | 	wrlong	result1, objptr
00e08     57 00 00 FF 
00e0c     00 E4 85 F1 | 	sub	objptr, ##44544
00e10     1C 00 90 FD | 	jmp	#LR__0039
00e14                 | LR__0038
00e14     5A 01 00 FF 
00e18     86 1E 06 F6 | 	mov	local01, ##@LR__4552
00e1c     7B 00 00 FF 
00e20     B0 E4 05 F1 | 	add	objptr, ##63152
00e24     F2 1E 62 FC | 	wrlong	local01, objptr
00e28     7B 00 00 FF 
00e2c     B0 E4 85 F1 | 	sub	objptr, ##63152
00e30                 | LR__0039
00e30                 | ' 'print "line$=";line$
00e30                 | ' 'print "rest$=";rest$
00e30                 | ' 
00e30                 | ' 
00e30                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e30     57 00 00 FF 
00e34     08 E4 05 F1 | 	add	objptr, ##44552
00e38     F2 1E 02 FB | 	rdlong	local01, objptr
00e3c     57 00 00 FF 
00e40     08 E4 85 F1 | 	sub	objptr, ##44552
00e44     FF FF 7F FF 
00e48     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e4c     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e50     7B 00 00 FF 
00e54     B0 E4 05 F1 | 	add	objptr, ##63152
00e58     F2 12 02 FB | 	rdlong	arg01, objptr
00e5c     7B 00 00 FF 
00e60     B0 E4 85 F1 | 	sub	objptr, ##63152
00e64     5A 01 00 FF 
00e68     87 14 06 F6 | 	mov	arg02, ##@LR__4553
00e6c     F8 AF B1 FD | 	call	#__system___string_cmp
00e70     00 FA 0D F2 | 	cmp	result1, #0 wz
00e74     57 00 00 5F 
00e78     08 E4 05 51 |  if_ne	add	objptr, ##44552
00e7c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e80     57 00 00 5F 
00e84     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00e88     08 01 90 5D |  if_ne	jmp	#LR__0044
00e8c                 | LR__0040
00e8c                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e8c     57 00 00 FF 
00e90     08 E4 05 F1 | 	add	objptr, ##44552
00e94     F2 1E 02 FB | 	rdlong	local01, objptr
00e98     57 00 00 FF 
00e9c     08 E4 85 F1 | 	sub	objptr, ##44552
00ea0     FF FF 7F FF 
00ea4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea8     3C 00 90 5D |  if_ne	jmp	#LR__0041
00eac     7B 00 00 FF 
00eb0     B0 E4 05 F1 | 	add	objptr, ##63152
00eb4     F2 12 02 FB | 	rdlong	arg01, objptr
00eb8     7B 00 00 FF 
00ebc     B0 E4 85 F1 | 	sub	objptr, ##63152
00ec0     5A 01 00 FF 
00ec4     88 14 06 F6 | 	mov	arg02, ##@LR__4554
00ec8     9C AF B1 FD | 	call	#__system___string_cmp
00ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
00ed0     57 00 00 AF 
00ed4     08 E4 05 A1 |  if_e	add	objptr, ##44552
00ed8     F2 06 68 AC |  if_e	wrlong	#3, objptr
00edc     57 00 00 AF 
00ee0     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00ee4     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee8                 | LR__0041
00ee8                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee8     57 00 00 FF 
00eec     08 E4 05 F1 | 	add	objptr, ##44552
00ef0     F2 1E 02 FB | 	rdlong	local01, objptr
00ef4     57 00 00 FF 
00ef8     08 E4 85 F1 | 	sub	objptr, ##44552
00efc     04 1E 0E F2 | 	cmp	local01, #4 wz
00f00     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f04     7B 00 00 FF 
00f08     B0 E4 05 F1 | 	add	objptr, ##63152
00f0c     F2 12 02 FB | 	rdlong	arg01, objptr
00f10     7B 00 00 FF 
00f14     B0 E4 85 F1 | 	sub	objptr, ##63152
00f18     5A 01 00 FF 
00f1c     89 14 06 F6 | 	mov	arg02, ##@LR__4555
00f20     44 AF B1 FD | 	call	#__system___string_cmp
00f24     00 FA 0D F2 | 	cmp	result1, #0 wz
00f28     57 00 00 5F 
00f2c     08 E4 05 51 |  if_ne	add	objptr, ##44552
00f30     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f34     57 00 00 5F 
00f38     08 E4 85 51 |  if_ne	sub	objptr, ##44552
00f3c     54 00 90 5D |  if_ne	jmp	#LR__0044
00f40                 | LR__0042
00f40                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f40     57 00 00 FF 
00f44     08 E4 05 F1 | 	add	objptr, ##44552
00f48     F2 1E 02 FB | 	rdlong	local01, objptr
00f4c     57 00 00 FF 
00f50     08 E4 85 F1 | 	sub	objptr, ##44552
00f54     04 1E 0E F2 | 	cmp	local01, #4 wz
00f58     38 00 90 5D |  if_ne	jmp	#LR__0043
00f5c     7B 00 00 FF 
00f60     B0 E4 05 F1 | 	add	objptr, ##63152
00f64     F2 12 02 FB | 	rdlong	arg01, objptr
00f68     7B 00 00 FF 
00f6c     B0 E4 85 F1 | 	sub	objptr, ##63152
00f70     5A 01 00 FF 
00f74     8A 14 06 F6 | 	mov	arg02, ##@LR__4556
00f78     EC AE B1 FD | 	call	#__system___string_cmp
00f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f80     57 00 00 AF 
00f84     08 E4 05 A1 |  if_e	add	objptr, ##44552
00f88     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f8c     57 00 00 AF 
00f90     08 E4 85 A1 |  if_e	sub	objptr, ##44552
00f94                 | LR__0043
00f94                 | LR__0044
00f94     20 4E 05 F1 | 	add	fp, #32
00f98     A7 00 68 FC | 	wrlong	#0, fp
00f9c     20 4E 85 F1 | 	sub	fp, #32
00fa0     00 22 06 F6 | 	mov	local03, #0
00fa4     01 38 06 F6 | 	mov	local14, #1
00fa8                 | ' 
00fa8                 | ' ' 1b: find separators
00fa8                 | ' 
00fa8                 | ' 107
00fa8                 | ' separators(0)=0
00fa8                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa8                 | LR__0045
00fa8     01 22 06 F1 | 	add	local03, #1
00fac     57 00 00 FF 
00fb0     00 E4 05 F1 | 	add	objptr, ##44544
00fb4     F2 12 02 FB | 	rdlong	arg01, objptr
00fb8     57 00 00 FF 
00fbc     00 E4 85 F1 | 	sub	objptr, ##44544
00fc0     11 15 02 F6 | 	mov	arg02, local03
00fc4     01 16 06 F6 | 	mov	arg03, #1
00fc8     D0 CF B1 FD | 	call	#__system__Mid_S
00fcc     7B 00 00 FF 
00fd0     B4 E4 05 F1 | 	add	objptr, ##63156
00fd4     F2 FA 61 FC | 	wrlong	result1, objptr
00fd8                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd8     FD 12 02 F6 | 	mov	arg01, result1
00fdc     7B 00 00 FF 
00fe0     B4 E4 85 F1 | 	sub	objptr, ##63156
00fe4     C0 29 B0 FD | 	call	#_isseparator
00fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
00fec     1C 00 90 AD |  if_e	jmp	#LR__0046
00ff0     1C 25 02 F6 | 	mov	local04, local14
00ff4     02 24 66 F0 | 	shl	local04, #2
00ff8     20 4E 05 F1 | 	add	fp, #32
00ffc     A7 24 02 F1 | 	add	local04, fp
01000     12 23 62 FC | 	wrlong	local03, local04
01004     01 38 06 F1 | 	add	local14, #1
01008     20 4E 85 F1 | 	sub	fp, #32
0100c                 | LR__0046
0100c     7B 00 00 FF 
01010     A8 E4 05 F1 | 	add	objptr, ##63144
01014     F2 1E 02 FB | 	rdlong	local01, objptr
01018     7B 00 00 FF 
0101c     A8 E4 85 F1 | 	sub	objptr, ##63144
01020     0F 23 5A F2 | 	cmps	local03, local01 wcz
01024     80 FF 9F ED |  if_be	jmp	#LR__0045
01028     1C 25 02 F6 | 	mov	local04, local14
0102c     02 24 66 F0 | 	shl	local04, #2
01030     20 4E 05 F1 | 	add	fp, #32
01034     A7 24 02 F1 | 	add	local04, fp
01038     12 23 62 FC | 	wrlong	local03, local04
0103c     00 3A 06 F6 | 	mov	local15, #0
01040                 | ' for i=0 to j-1 
01040     00 22 06 F6 | 	mov	local03, #0
01044     1C 3D 02 F6 | 	mov	local16, local14
01048     20 4E 85 F1 | 	sub	fp, #32
0104c                 | LR__0047
0104c     1E 23 52 F2 | 	cmps	local03, local16 wc
01050     88 01 90 3D |  if_ae	jmp	#LR__0051
01054     11 25 02 F6 | 	mov	local04, local03
01058     02 24 66 F0 | 	shl	local04, #2
0105c     20 4E 05 F1 | 	add	fp, #32
01060     A7 24 02 F1 | 	add	local04, fp
01064     12 27 02 FB | 	rdlong	local05, local04
01068     7B 00 00 FF 
0106c     BC E4 05 F1 | 	add	objptr, ##63164
01070     F2 26 62 FC | 	wrlong	local05, objptr
01074     11 25 02 F6 | 	mov	local04, local03
01078     01 24 06 F1 | 	add	local04, #1
0107c     02 24 66 F0 | 	shl	local04, #2
01080     A7 2E 02 F6 | 	mov	local09, fp
01084     A7 24 02 F1 | 	add	local04, fp
01088     12 27 02 FB | 	rdlong	local05, local04
0108c     04 E4 05 F1 | 	add	objptr, #4
01090     F2 26 62 FC | 	wrlong	local05, objptr
01094                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
01094     04 E4 85 F1 | 	sub	objptr, #4
01098     F2 1E 02 FB | 	rdlong	local01, objptr
0109c     7B 00 00 FF 
010a0     BC E4 85 F1 | 	sub	objptr, ##63164
010a4     01 1E 56 F2 | 	cmps	local01, #1 wc
010a8     20 4E 85 F1 | 	sub	fp, #32
010ac     84 00 90 CD |  if_b	jmp	#LR__0049
010b0     57 00 00 FF 
010b4     00 E4 05 F1 | 	add	objptr, ##44544
010b8     F2 12 02 FB | 	rdlong	arg01, objptr
010bc     24 00 00 FF 
010c0     BC E4 05 F1 | 	add	objptr, ##18620
010c4     F2 14 02 FB | 	rdlong	arg02, objptr
010c8     7B 00 00 FF 
010cc     BC E4 85 F1 | 	sub	objptr, ##63164
010d0     01 16 06 F6 | 	mov	arg03, #1
010d4     C4 CE B1 FD | 	call	#__system__Mid_S
010d8     7B 00 00 FF 
010dc     C4 E4 05 F1 | 	add	objptr, ##63172
010e0     F2 FA 61 FC | 	wrlong	result1, objptr
010e4     7B 00 00 FF 
010e8     C4 E4 85 F1 | 	sub	objptr, ##63172
010ec     FD 12 02 F6 | 	mov	arg01, result1
010f0     5A 01 00 FF 
010f4     8B 14 06 F6 | 	mov	arg02, ##@LR__4557
010f8     6C AD B1 FD | 	call	#__system___string_cmp
010fc     00 FA 0D F2 | 	cmp	result1, #0 wz
01100     30 00 90 AD |  if_e	jmp	#LR__0048
01104     1D 2F 02 F6 | 	mov	local09, local15
01108     03 2E 66 F0 | 	shl	local09, #3
0110c     54 00 00 FF 
01110     F0 E5 05 F1 | 	add	objptr, ##43504
01114     F2 2E 02 F1 | 	add	local09, objptr
01118     26 00 00 FF 
0111c     D4 E4 05 F1 | 	add	objptr, ##19668
01120     F2 28 02 FB | 	rdlong	local06, objptr
01124     7B 00 00 FF 
01128     C4 E4 85 F1 | 	sub	objptr, ##63172
0112c     17 29 62 FC | 	wrlong	local06, local09
01130     01 3A 06 F1 | 	add	local15, #1
01134                 | LR__0048
01134                 | LR__0049
01134     57 00 00 FF 
01138     00 E4 05 F1 | 	add	objptr, ##44544
0113c     F2 12 02 FB | 	rdlong	arg01, objptr
01140     24 00 00 FF 
01144     BC E4 05 F1 | 	add	objptr, ##18620
01148     F2 14 02 FB | 	rdlong	arg02, objptr
0114c     01 14 06 F1 | 	add	arg02, #1
01150     04 E4 05 F1 | 	add	objptr, #4
01154     F2 16 02 FB | 	rdlong	arg03, objptr
01158     04 E4 85 F1 | 	sub	objptr, #4
0115c     F2 30 02 FB | 	rdlong	local10, objptr
01160     7B 00 00 FF 
01164     BC E4 85 F1 | 	sub	objptr, ##63164
01168     18 33 02 F6 | 	mov	local11, local10
0116c     19 17 82 F1 | 	sub	arg03, local11
01170     01 16 86 F1 | 	sub	arg03, #1
01174     24 CE B1 FD | 	call	#__system__Mid_S
01178     7B 00 00 FF 
0117c     C4 E4 05 F1 | 	add	objptr, ##63172
01180     F2 FA 61 FC | 	wrlong	result1, objptr
01184     7B 00 00 FF 
01188     C4 E4 85 F1 | 	sub	objptr, ##63172
0118c     FD 12 02 F6 | 	mov	arg01, result1
01190     5A 01 00 FF 
01194     8C 14 06 F6 | 	mov	arg02, ##@LR__4558
01198     CC AC B1 FD | 	call	#__system___string_cmp
0119c     00 FA 0D F2 | 	cmp	result1, #0 wz
011a0     30 00 90 AD |  if_e	jmp	#LR__0050
011a4     1D 2F 02 F6 | 	mov	local09, local15
011a8     03 2E 66 F0 | 	shl	local09, #3
011ac     54 00 00 FF 
011b0     F0 E5 05 F1 | 	add	objptr, ##43504
011b4     F2 2E 02 F1 | 	add	local09, objptr
011b8     26 00 00 FF 
011bc     D4 E4 05 F1 | 	add	objptr, ##19668
011c0     F2 28 02 FB | 	rdlong	local06, objptr
011c4     7B 00 00 FF 
011c8     C4 E4 85 F1 | 	sub	objptr, ##63172
011cc     17 29 62 FC | 	wrlong	local06, local09
011d0     01 3A 06 F1 | 	add	local15, #1
011d4                 | LR__0050
011d4     01 22 06 F1 | 	add	local03, #1
011d8     70 FE 9F FD | 	jmp	#LR__0047
011dc                 | LR__0051
011dc     00 22 06 F6 | 	mov	local03, #0
011e0                 | ' 
011e0                 | ' ' 1d : find strings
011e0                 | ' 
011e0                 | ' i=0
011e0                 | ' do
011e0                 | LR__0052
011e0                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011e0     11 27 02 F6 | 	mov	local05, local03
011e4     03 26 66 F0 | 	shl	local05, #3
011e8     54 00 00 FF 
011ec     F0 E5 05 F1 | 	add	objptr, ##43504
011f0     F2 26 02 F1 | 	add	local05, objptr
011f4     13 13 02 FB | 	rdlong	arg01, local05
011f8     5A 01 00 FF 
011fc     8D 14 06 F6 | 	mov	arg02, ##@LR__4559
01200     54 00 00 FF 
01204     F0 E5 85 F1 | 	sub	objptr, ##43504
01208     5C AC B1 FD | 	call	#__system___string_cmp
0120c     00 FA 0D F2 | 	cmp	result1, #0 wz
01210     01 22 06 51 |  if_ne	add	local03, #1
01214     50 01 90 5D |  if_ne	jmp	#LR__0057
01218     11 3F 02 F6 | 	mov	local17, local03
0121c                 | LR__0053
0121c     11 2F 02 F6 | 	mov	local09, local03
01220     01 2E 06 F1 | 	add	local09, #1
01224     03 2E 66 F0 | 	shl	local09, #3
01228     54 00 00 FF 
0122c     F0 E5 05 F1 | 	add	objptr, ##43504
01230     F2 2E 02 F1 | 	add	local09, objptr
01234     17 31 02 FB | 	rdlong	local10, local09
01238     26 00 00 FF 
0123c     D4 E4 05 F1 | 	add	objptr, ##19668
01240     F2 30 62 FC | 	wrlong	local10, objptr
01244     1F 2F 02 F6 | 	mov	local09, local17
01248     03 2E 66 F0 | 	shl	local09, #3
0124c     26 00 00 FF 
01250     D4 E4 85 F1 | 	sub	objptr, ##19668
01254     F2 2E 02 F1 | 	add	local09, objptr
01258     1F 37 02 F6 | 	mov	local13, local17
0125c     03 36 66 F0 | 	shl	local13, #3
01260     F2 36 02 F1 | 	add	local13, objptr
01264     1B 13 02 FB | 	rdlong	arg01, local13
01268     54 00 00 FF 
0126c     F0 E5 85 F1 | 	sub	objptr, ##43504
01270     18 33 02 F6 | 	mov	local11, local10
01274     19 15 02 F6 | 	mov	arg02, local11
01278     20 AC B1 FD | 	call	#__system___string_concat
0127c     17 FB 61 FC | 	wrlong	result1, local09
01280     11 39 02 F6 | 	mov	local14, local03
01284     01 38 06 F1 | 	add	local14, #1
01288     1D 41 02 F6 | 	mov	local18, local15
0128c     01 40 06 F1 | 	add	local18, #1
01290     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01294                 | LR__0054
01294     20 39 52 F2 | 	cmps	local14, local18 wc
01298     70 00 90 3D |  if_ae	jmp	#LR__0056
0129c     1C 27 02 F6 | 	mov	local05, local14
012a0     01 26 06 F1 | 	add	local05, #1
012a4     03 26 66 F0 | 	shl	local05, #3
012a8     54 00 00 FF 
012ac     F0 E5 05 F1 | 	add	objptr, ##43504
012b0     F2 26 02 F1 | 	add	local05, objptr
012b4     13 1F 02 FB | 	rdlong	local01, local05
012b8     1C 29 02 F6 | 	mov	local06, local14
012bc     01 28 06 F1 | 	add	local06, #1
012c0     03 28 66 F0 | 	shl	local06, #3
012c4     F2 28 02 F1 | 	add	local06, objptr
012c8     04 28 06 F1 | 	add	local06, #4
012cc     14 25 02 FB | 	rdlong	local04, local06
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     03 28 66 F0 | 	shl	local06, #3
012d8     F2 32 02 F6 | 	mov	local11, objptr
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     14 1F 62 FC | 	wrlong	local01, local06
012e4     1C 31 02 F6 | 	mov	local10, local14
012e8     18 35 02 F6 | 	mov	local12, local10
012ec     03 34 66 F0 | 	shl	local12, #3
012f0     F2 34 02 F1 | 	add	local12, objptr
012f4     04 34 06 F1 | 	add	local12, #4
012f8     1A 25 62 FC | 	wrlong	local04, local12
012fc     01 38 06 F1 | 	add	local14, #1
01300     54 00 00 FF 
01304     F0 E5 85 F1 | 	sub	objptr, ##43504
01308     88 FF 9F FD | 	jmp	#LR__0054
0130c                 | LR__0055
0130c                 | LR__0056
0130c     01 3A 86 F1 | 	sub	local15, #1
01310     7B 00 00 FF 
01314     C4 E4 05 F1 | 	add	objptr, ##63172
01318     F2 12 02 FB | 	rdlong	arg01, objptr
0131c     7B 00 00 FF 
01320     C4 E4 85 F1 | 	sub	objptr, ##63172
01324     5A 01 00 FF 
01328     8F 14 06 F6 | 	mov	arg02, ##@LR__4560
0132c     38 AB B1 FD | 	call	#__system___string_cmp
01330     00 FA 0D F2 | 	cmp	result1, #0 wz
01334     1D 23 52 52 |  if_ne	cmps	local03, local15 wc
01338     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
0133c                 | '   if p$<>"""" then k+=1:i+=1
0133c     7B 00 00 FF 
01340     C4 E4 05 F1 | 	add	objptr, ##63172
01344     F2 12 02 FB | 	rdlong	arg01, objptr
01348     7B 00 00 FF 
0134c     C4 E4 85 F1 | 	sub	objptr, ##63172
01350     5A 01 00 FF 
01354     91 14 06 F6 | 	mov	arg02, ##@LR__4561
01358     0C AB B1 FD | 	call	#__system___string_cmp
0135c     00 FA 0D F2 | 	cmp	result1, #0 wz
01360     01 3A 06 51 |  if_ne	add	local15, #1
01364     01 22 06 51 |  if_ne	add	local03, #1
01368                 | LR__0057
01368     1D 23 52 F2 | 	cmps	local03, local15 wc
0136c     70 FE 9F CD |  if_b	jmp	#LR__0052
01370     00 22 06 F6 | 	mov	local03, #0
01374                 | ' 
01374                 | ' ' 1e : concatenate strings if "" detected between
01374                 | '  
01374                 | ' i=0 : do
01374                 | LR__0058
01374                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01374     11 27 02 F6 | 	mov	local05, local03
01378     03 26 66 F0 | 	shl	local05, #3
0137c     54 00 00 FF 
01380     F0 E5 05 F1 | 	add	objptr, ##43504
01384     F2 26 02 F1 | 	add	local05, objptr
01388     13 13 02 FB | 	rdlong	arg01, local05
0138c     01 14 06 F6 | 	mov	arg02, #1
01390     54 00 00 FF 
01394     F0 E5 85 F1 | 	sub	objptr, ##43504
01398     70 CB B1 FD | 	call	#__system__Right_S
0139c     FD 12 02 F6 | 	mov	arg01, result1
013a0     5A 01 00 FF 
013a4     93 14 06 F6 | 	mov	arg02, ##@LR__4562
013a8     BC AA B1 FD | 	call	#__system___string_cmp
013ac     00 FA 0D F2 | 	cmp	result1, #0 wz
013b0     78 01 90 5D |  if_ne	jmp	#LR__0064
013b4     11 29 02 F6 | 	mov	local06, local03
013b8     01 28 06 F1 | 	add	local06, #1
013bc     03 28 66 F0 | 	shl	local06, #3
013c0     54 00 00 FF 
013c4     F0 E5 05 F1 | 	add	objptr, ##43504
013c8     F2 32 02 F6 | 	mov	local11, objptr
013cc     F2 28 02 F1 | 	add	local06, objptr
013d0     14 13 02 FB | 	rdlong	arg01, local06
013d4     01 14 06 F6 | 	mov	arg02, #1
013d8     54 00 00 FF 
013dc     F0 E5 85 F1 | 	sub	objptr, ##43504
013e0     A0 CA B1 FD | 	call	#__system__Left_S
013e4     FD 12 02 F6 | 	mov	arg01, result1
013e8     5A 01 00 FF 
013ec     95 14 06 F6 | 	mov	arg02, ##@LR__4563
013f0     74 AA B1 FD | 	call	#__system___string_cmp
013f4     00 FA 0D F2 | 	cmp	result1, #0 wz
013f8     30 01 90 5D |  if_ne	jmp	#LR__0064
013fc     11 2F 02 F6 | 	mov	local09, local03
01400     03 2E 66 F0 | 	shl	local09, #3
01404     54 00 00 FF 
01408     F0 E5 05 F1 | 	add	objptr, ##43504
0140c     F2 2E 02 F1 | 	add	local09, objptr
01410     11 37 02 F6 | 	mov	local13, local03
01414     03 36 66 F0 | 	shl	local13, #3
01418     F2 36 02 F1 | 	add	local13, objptr
0141c     1B 29 02 FB | 	rdlong	local06, local13
01420     11 35 02 F6 | 	mov	local12, local03
01424     01 34 06 F1 | 	add	local12, #1
01428     03 34 66 F0 | 	shl	local12, #3
0142c     F2 34 02 F1 | 	add	local12, objptr
01430     1A 33 02 FB | 	rdlong	local11, local12
01434     11 43 02 F6 | 	mov	local19, local03
01438     01 42 06 F1 | 	add	local19, #1
0143c     21 45 02 F6 | 	mov	local20, local19
01440     03 44 66 F0 | 	shl	local20, #3
01444     F2 46 02 F6 | 	mov	local21, objptr
01448     F2 44 02 F1 | 	add	local20, objptr
0144c     22 13 02 FB | 	rdlong	arg01, local20
01450     54 00 00 FF 
01454     F0 E5 85 F1 | 	sub	objptr, ##43504
01458     09 2B 02 F6 | 	mov	local07, arg01
0145c     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01460                 | LR__0059
01460     15 FB C9 FA | 	rdbyte	result1, local07 wz
01464     01 2A 06 51 |  if_ne	add	local07, #1
01468     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
0146c                 | LR__0060
0146c     09 2B 82 F1 | 	sub	local07, arg01
01470     15 31 02 F6 | 	mov	local10, local07
01474     01 30 86 F1 | 	sub	local10, #1
01478     19 13 02 F6 | 	mov	arg01, local11
0147c     18 15 02 F6 | 	mov	arg02, local10
01480     88 CA B1 FD | 	call	#__system__Right_S
01484     FD 32 02 F6 | 	mov	local11, result1
01488     14 13 02 F6 | 	mov	arg01, local06
0148c     19 15 02 F6 | 	mov	arg02, local11
01490     08 AA B1 FD | 	call	#__system___string_concat
01494     17 FB 61 FC | 	wrlong	result1, local09
01498                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01498     11 39 02 F6 | 	mov	local14, local03
0149c     01 38 06 F1 | 	add	local14, #1
014a0     1D 49 02 F6 | 	mov	local22, local15
014a4     01 48 06 F1 | 	add	local22, #1
014a8     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014ac                 | LR__0061
014ac     24 39 52 F2 | 	cmps	local14, local22 wc
014b0     70 00 90 3D |  if_ae	jmp	#LR__0063
014b4     1C 27 02 F6 | 	mov	local05, local14
014b8     01 26 06 F1 | 	add	local05, #1
014bc     03 26 66 F0 | 	shl	local05, #3
014c0     54 00 00 FF 
014c4     F0 E5 05 F1 | 	add	objptr, ##43504
014c8     F2 26 02 F1 | 	add	local05, objptr
014cc     13 1F 02 FB | 	rdlong	local01, local05
014d0     1C 29 02 F6 | 	mov	local06, local14
014d4     01 28 06 F1 | 	add	local06, #1
014d8     03 28 66 F0 | 	shl	local06, #3
014dc     F2 28 02 F1 | 	add	local06, objptr
014e0     04 28 06 F1 | 	add	local06, #4
014e4     14 25 02 FB | 	rdlong	local04, local06
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     03 28 66 F0 | 	shl	local06, #3
014f0     F2 32 02 F6 | 	mov	local11, objptr
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     14 1F 62 FC | 	wrlong	local01, local06
014fc     1C 31 02 F6 | 	mov	local10, local14
01500     18 35 02 F6 | 	mov	local12, local10
01504     03 34 66 F0 | 	shl	local12, #3
01508     F2 34 02 F1 | 	add	local12, objptr
0150c     04 34 06 F1 | 	add	local12, #4
01510     1A 25 62 FC | 	wrlong	local04, local12
01514     01 38 06 F1 | 	add	local14, #1
01518     54 00 00 FF 
0151c     F0 E5 85 F1 | 	sub	objptr, ##43504
01520     88 FF 9F FD | 	jmp	#LR__0061
01524                 | LR__0062
01524                 | LR__0063
01524     01 22 86 F1 | 	sub	local03, #1
01528     01 3A 86 F1 | 	sub	local15, #1
0152c                 | LR__0064
0152c     01 22 06 F1 | 	add	local03, #1
01530     1D 23 52 F2 | 	cmps	local03, local15 wc
01534     3C FE 9F CD |  if_b	jmp	#LR__0058
01538     00 22 06 F6 | 	mov	local03, #0
0153c                 | '  
0153c                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
0153c                 | '  
0153c                 | ' i=0 : do
0153c                 | LR__0065
0153c     11 2F 02 F6 | 	mov	local09, local03
01540     03 2E 66 F0 | 	shl	local09, #3
01544     54 00 00 FF 
01548     F0 E5 05 F1 | 	add	objptr, ##43504
0154c     F2 2E 02 F1 | 	add	local09, objptr
01550     17 29 02 FB | 	rdlong	local06, local09
01554     26 00 00 FF 
01558     DC E4 05 F1 | 	add	objptr, ##19676
0155c     F2 28 62 FC | 	wrlong	local06, objptr
01560     11 2F 02 F6 | 	mov	local09, local03
01564     01 2E 06 F1 | 	add	local09, #1
01568     03 2E 66 F0 | 	shl	local09, #3
0156c     26 00 00 FF 
01570     DC E4 85 F1 | 	sub	objptr, ##19676
01574     F2 2E 02 F1 | 	add	local09, objptr
01578     17 29 02 FB | 	rdlong	local06, local09
0157c     26 00 00 FF 
01580     E0 E4 05 F1 | 	add	objptr, ##19680
01584     F2 28 62 FC | 	wrlong	local06, objptr
01588                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01588     04 E4 85 F1 | 	sub	objptr, #4
0158c     F2 12 02 FB | 	rdlong	arg01, objptr
01590     7B 00 00 FF 
01594     CC E4 85 F1 | 	sub	objptr, ##63180
01598     5A 01 00 FF 
0159c     97 14 06 F6 | 	mov	arg02, ##@LR__4564
015a0     C4 A8 B1 FD | 	call	#__system___string_cmp
015a4     00 FA 0D F2 | 	cmp	result1, #0 wz
015a8     04 01 90 AD |  if_e	jmp	#LR__0066
015ac     7B 00 00 FF 
015b0     CC E4 05 F1 | 	add	objptr, ##63180
015b4     F2 12 02 FB | 	rdlong	arg01, objptr
015b8     7B 00 00 FF 
015bc     CC E4 85 F1 | 	sub	objptr, ##63180
015c0     5A 01 00 FF 
015c4     99 14 06 F6 | 	mov	arg02, ##@LR__4565
015c8     9C A8 B1 FD | 	call	#__system___string_cmp
015cc     FD 24 0A F6 | 	mov	local04, result1 wz
015d0     DC 00 90 AD |  if_e	jmp	#LR__0066
015d4     7B 00 00 FF 
015d8     CC E4 05 F1 | 	add	objptr, ##63180
015dc     F2 12 02 FB | 	rdlong	arg01, objptr
015e0     7B 00 00 FF 
015e4     CC E4 85 F1 | 	sub	objptr, ##63180
015e8     5A 01 00 FF 
015ec     9B 14 06 F6 | 	mov	arg02, ##@LR__4566
015f0     74 A8 B1 FD | 	call	#__system___string_cmp
015f4     00 FA 0D F2 | 	cmp	result1, #0 wz
015f8     B4 00 90 AD |  if_e	jmp	#LR__0066
015fc     7B 00 00 FF 
01600     CC E4 05 F1 | 	add	objptr, ##63180
01604     F2 12 02 FB | 	rdlong	arg01, objptr
01608     7B 00 00 FF 
0160c     CC E4 85 F1 | 	sub	objptr, ##63180
01610     5A 01 00 FF 
01614     9D 32 06 F6 | 	mov	local11, ##@LR__4567
01618     19 15 02 F6 | 	mov	arg02, local11
0161c     48 A8 B1 FD | 	call	#__system___string_cmp
01620     00 FA 0D F2 | 	cmp	result1, #0 wz
01624     88 00 90 AD |  if_e	jmp	#LR__0066
01628     7B 00 00 FF 
0162c     CC E4 05 F1 | 	add	objptr, ##63180
01630     F2 12 02 FB | 	rdlong	arg01, objptr
01634     7B 00 00 FF 
01638     CC E4 85 F1 | 	sub	objptr, ##63180
0163c     5A 01 00 FF 
01640     9F 30 06 F6 | 	mov	local10, ##@LR__4568
01644     18 33 02 F6 | 	mov	local11, local10
01648     19 15 02 F6 | 	mov	arg02, local11
0164c     18 A8 B1 FD | 	call	#__system___string_cmp
01650     00 FA 0D F2 | 	cmp	result1, #0 wz
01654     58 00 90 AD |  if_e	jmp	#LR__0066
01658     7B 00 00 FF 
0165c     CC E4 05 F1 | 	add	objptr, ##63180
01660     F2 12 02 FB | 	rdlong	arg01, objptr
01664     7B 00 00 FF 
01668     CC E4 85 F1 | 	sub	objptr, ##63180
0166c     5A 01 00 FF 
01670     A1 30 06 F6 | 	mov	local10, ##@LR__4569
01674     18 15 02 F6 | 	mov	arg02, local10
01678     EC A7 B1 FD | 	call	#__system___string_cmp
0167c     FD 32 0A F6 | 	mov	local11, result1 wz
01680     2C 00 90 AD |  if_e	jmp	#LR__0066
01684     7B 00 00 FF 
01688     CC E4 05 F1 | 	add	objptr, ##63180
0168c     F2 12 02 FB | 	rdlong	arg01, objptr
01690     7B 00 00 FF 
01694     CC E4 85 F1 | 	sub	objptr, ##63180
01698     5A 01 00 FF 
0169c     A3 36 06 F6 | 	mov	local13, ##@LR__4570
016a0     1B 15 02 F6 | 	mov	arg02, local13
016a4     C0 A7 B1 FD | 	call	#__system___string_cmp
016a8     FD 30 0A F6 | 	mov	local10, result1 wz
016ac     30 00 90 5D |  if_ne	jmp	#LR__0067
016b0                 | LR__0066
016b0     7B 00 00 FF 
016b4     D0 E4 05 F1 | 	add	objptr, ##63184
016b8     F2 12 02 FB | 	rdlong	arg01, objptr
016bc     7B 00 00 FF 
016c0     D0 E4 85 F1 | 	sub	objptr, ##63184
016c4     5A 01 00 FF 
016c8     A5 4A 06 F6 | 	mov	local23, ##@LR__4571
016cc     25 35 02 F6 | 	mov	local12, local23
016d0     1A 15 02 F6 | 	mov	arg02, local12
016d4     90 A7 B1 FD | 	call	#__system___string_cmp
016d8     FD 36 0A F6 | 	mov	local13, result1 wz
016dc     18 01 90 AD |  if_e	jmp	#LR__0070
016e0                 | LR__0067
016e0     7B 00 00 FF 
016e4     CC E4 05 F1 | 	add	objptr, ##63180
016e8     F2 12 02 FB | 	rdlong	arg01, objptr
016ec     7B 00 00 FF 
016f0     CC E4 85 F1 | 	sub	objptr, ##63180
016f4     5A 01 00 FF 
016f8     A7 4A 06 F6 | 	mov	local23, ##@LR__4572
016fc     25 15 02 F6 | 	mov	arg02, local23
01700     64 A7 B1 FD | 	call	#__system___string_cmp
01704     FD 34 0A F6 | 	mov	local12, result1 wz
01708     30 00 90 5D |  if_ne	jmp	#LR__0068
0170c     7B 00 00 FF 
01710     D0 E4 05 F1 | 	add	objptr, ##63184
01714     F2 12 02 FB | 	rdlong	arg01, objptr
01718     7B 00 00 FF 
0171c     D0 E4 85 F1 | 	sub	objptr, ##63184
01720     5A 01 00 FF 
01724     A9 44 06 F6 | 	mov	local20, ##@LR__4573
01728     22 43 02 F6 | 	mov	local19, local20
0172c     21 15 02 F6 | 	mov	arg02, local19
01730     34 A7 B1 FD | 	call	#__system___string_cmp
01734     FD 4A 0A F6 | 	mov	local23, result1 wz
01738     BC 00 90 AD |  if_e	jmp	#LR__0070
0173c                 | LR__0068
0173c     7B 00 00 FF 
01740     CC E4 05 F1 | 	add	objptr, ##63180
01744     F2 12 02 FB | 	rdlong	arg01, objptr
01748     7B 00 00 FF 
0174c     CC E4 85 F1 | 	sub	objptr, ##63180
01750     5A 01 00 FF 
01754     AB 44 06 F6 | 	mov	local20, ##@LR__4574
01758     22 15 02 F6 | 	mov	arg02, local20
0175c     08 A7 B1 FD | 	call	#__system___string_cmp
01760     FD 42 0A F6 | 	mov	local19, result1 wz
01764     30 00 90 5D |  if_ne	jmp	#LR__0069
01768     7B 00 00 FF 
0176c     D0 E4 05 F1 | 	add	objptr, ##63184
01770     F2 12 02 FB | 	rdlong	arg01, objptr
01774     7B 00 00 FF 
01778     D0 E4 85 F1 | 	sub	objptr, ##63184
0177c     5A 01 00 FF 
01780     AD 4C 06 F6 | 	mov	local24, ##@LR__4575
01784     26 47 02 F6 | 	mov	local21, local24
01788     23 15 02 F6 | 	mov	arg02, local21
0178c     D8 A6 B1 FD | 	call	#__system___string_cmp
01790     FD 44 0A F6 | 	mov	local20, result1 wz
01794     60 00 90 AD |  if_e	jmp	#LR__0070
01798                 | LR__0069
01798     7B 00 00 FF 
0179c     CC E4 05 F1 | 	add	objptr, ##63180
017a0     F2 12 02 FB | 	rdlong	arg01, objptr
017a4     7B 00 00 FF 
017a8     CC E4 85 F1 | 	sub	objptr, ##63180
017ac     5A 01 00 FF 
017b0     AF 4E 06 F6 | 	mov	local25, ##@LR__4576
017b4     27 4D 02 F6 | 	mov	local24, local25
017b8     26 15 02 F6 | 	mov	arg02, local24
017bc     A8 A6 B1 FD | 	call	#__system___string_cmp
017c0     FD 46 0A F6 | 	mov	local21, result1 wz
017c4     10 01 90 5D |  if_ne	jmp	#LR__0074
017c8     7B 00 00 FF 
017cc     D0 E4 05 F1 | 	add	objptr, ##63184
017d0     F2 12 02 FB | 	rdlong	arg01, objptr
017d4     7B 00 00 FF 
017d8     D0 E4 85 F1 | 	sub	objptr, ##63184
017dc     5A 01 00 FF 
017e0     B1 50 06 F6 | 	mov	local26, ##@LR__4577
017e4     28 4F 02 F6 | 	mov	local25, local26
017e8     27 15 02 F6 | 	mov	arg02, local25
017ec     78 A6 B1 FD | 	call	#__system___string_cmp
017f0     FD 4C 0A F6 | 	mov	local24, result1 wz
017f4     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f8                 | LR__0070
017f8     11 2F 02 F6 | 	mov	local09, local03
017fc     03 2E 66 F0 | 	shl	local09, #3
01800     54 00 00 FF 
01804     F0 E5 05 F1 | 	add	objptr, ##43504
01808     F2 2E 02 F1 | 	add	local09, objptr
0180c     26 00 00 FF 
01810     DC E4 05 F1 | 	add	objptr, ##19676
01814     F2 12 02 FB | 	rdlong	arg01, objptr
01818     04 E4 05 F1 | 	add	objptr, #4
0181c     F2 30 02 FB | 	rdlong	local10, objptr
01820     7B 00 00 FF 
01824     D0 E4 85 F1 | 	sub	objptr, ##63184
01828     18 33 02 F6 | 	mov	local11, local10
0182c     19 15 02 F6 | 	mov	arg02, local11
01830     68 A6 B1 FD | 	call	#__system___string_concat
01834     17 FB 61 FC | 	wrlong	result1, local09
01838                 | '     lparts(i).part$=s1$+s2$
01838                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01838     11 39 02 F6 | 	mov	local14, local03
0183c     01 38 06 F1 | 	add	local14, #1
01840     1D 53 02 F6 | 	mov	local27, local15
01844     01 52 06 F1 | 	add	local27, #1
01848     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
0184c                 | LR__0071
0184c     29 39 52 F2 | 	cmps	local14, local27 wc
01850     7C 00 90 3D |  if_ae	jmp	#LR__0073
01854     1C 27 02 F6 | 	mov	local05, local14
01858     01 26 06 F1 | 	add	local05, #1
0185c     03 26 66 F0 | 	shl	local05, #3
01860     54 00 00 FF 
01864     F0 E5 05 F1 | 	add	objptr, ##43504
01868     F2 26 02 F1 | 	add	local05, objptr
0186c     13 1F 02 FB | 	rdlong	local01, local05
01870     1C 29 02 F6 | 	mov	local06, local14
01874     01 28 06 F1 | 	add	local06, #1
01878     03 28 66 F0 | 	shl	local06, #3
0187c     F2 28 02 F1 | 	add	local06, objptr
01880     04 28 06 F1 | 	add	local06, #4
01884     14 25 02 FB | 	rdlong	local04, local06
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     03 28 66 F0 | 	shl	local06, #3
01890     F2 32 02 F6 | 	mov	local11, objptr
01894     F2 28 02 F1 | 	add	local06, objptr
01898     14 1F 62 FC | 	wrlong	local01, local06
0189c     1C 31 02 F6 | 	mov	local10, local14
018a0     18 37 02 F6 | 	mov	local13, local10
018a4     1B 35 02 F6 | 	mov	local12, local13
018a8     03 34 66 F0 | 	shl	local12, #3
018ac     F2 4A 02 F6 | 	mov	local23, objptr
018b0     F2 34 02 F1 | 	add	local12, objptr
018b4     04 34 06 F1 | 	add	local12, #4
018b8     1A 25 62 FC | 	wrlong	local04, local12
018bc     04 34 86 F1 | 	sub	local12, #4
018c0     01 38 06 F1 | 	add	local14, #1
018c4     54 00 00 FF 
018c8     F0 E5 85 F1 | 	sub	objptr, ##43504
018cc     7C FF 9F FD | 	jmp	#LR__0071
018d0                 | LR__0072
018d0                 | LR__0073
018d0     01 22 86 F1 | 	sub	local03, #1
018d4     01 3A 86 F1 | 	sub	local15, #1
018d8                 | LR__0074
018d8     01 22 06 F1 | 	add	local03, #1
018dc     1D 23 52 F2 | 	cmps	local03, local15 wc
018e0     58 FC 9F CD |  if_b	jmp	#LR__0065
018e4                 | '  
018e4                 | ' ' 1f : now remove parts that are spaces
018e4                 | ' 
018e4                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018e4     00 22 06 F6 | 	mov	local03, #0
018e8     1D 55 02 F6 | 	mov	local28, local15
018ec     01 54 06 F1 | 	add	local28, #1
018f0                 | LR__0075
018f0     2A 23 52 F2 | 	cmps	local03, local28 wc
018f4     50 00 90 3D |  if_ae	jmp	#LR__0076
018f8     11 2F 02 F6 | 	mov	local09, local03
018fc     03 2E 66 F0 | 	shl	local09, #3
01900     54 00 00 FF 
01904     F0 E5 05 F1 | 	add	objptr, ##43504
01908     F2 2E 02 F1 | 	add	local09, objptr
0190c     11 33 02 F6 | 	mov	local11, local03
01910     19 31 02 F6 | 	mov	local10, local11
01914     18 37 02 F6 | 	mov	local13, local10
01918     03 36 66 F0 | 	shl	local13, #3
0191c     F2 34 02 F6 | 	mov	local12, objptr
01920     F2 36 02 F1 | 	add	local13, objptr
01924     1B 13 02 FB | 	rdlong	arg01, local13
01928     54 00 00 FF 
0192c     F0 E5 85 F1 | 	sub	objptr, ##43504
01930     E0 C9 B1 FD | 	call	#__system__RTrim_S
01934     FD 12 02 F6 | 	mov	arg01, result1
01938     18 C9 B1 FD | 	call	#__system__LTrim_S
0193c     17 FB 61 FC | 	wrlong	result1, local09
01940     01 22 06 F1 | 	add	local03, #1
01944     A8 FF 9F FD | 	jmp	#LR__0075
01948                 | LR__0076
01948     00 22 06 F6 | 	mov	local03, #0
0194c     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01950                 | ' 
01950                 | ' i=0
01950                 | ' do 
01950                 | LR__0077
01950                 | '   if len(lparts(i).part$)=0 then 
01950     11 2F 02 F6 | 	mov	local09, local03
01954     17 27 02 F6 | 	mov	local05, local09
01958     03 26 66 F0 | 	shl	local05, #3
0195c     54 00 00 FF 
01960     F0 E5 05 F1 | 	add	objptr, ##43504
01964     F2 26 02 F1 | 	add	local05, objptr
01968     13 13 02 FB | 	rdlong	arg01, local05
0196c     54 00 00 FF 
01970     F0 E5 85 F1 | 	sub	objptr, ##43504
01974     09 2B 02 F6 | 	mov	local07, arg01
01978                 | LR__0078
01978     15 FB C9 FA | 	rdbyte	result1, local07 wz
0197c     01 2A 06 51 |  if_ne	add	local07, #1
01980     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
01984     09 2B 8A F1 | 	sub	local07, arg01 wz
01988     C4 00 90 5D |  if_ne	jmp	#LR__0082
0198c                 | '     if i=k-1 then k-=1  :  exit
0198c     1D 1F 02 F6 | 	mov	local01, local15
01990     01 1E 86 F1 | 	sub	local01, #1
01994     0F 23 0A F2 | 	cmp	local03, local01 wz
01998     01 3A 86 A1 |  if_e	sub	local15, #1
0199c     C4 00 90 AD |  if_e	jmp	#LR__0084
019a0                 | '     if i<k-1 then 
019a0     1D 1F 02 F6 | 	mov	local01, local15
019a4     01 1E 86 F1 | 	sub	local01, #1
019a8     0F 23 52 F2 | 	cmps	local03, local01 wc
019ac     A0 00 90 3D |  if_ae	jmp	#LR__0081
019b0                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019b0     11 39 02 F6 | 	mov	local14, local03
019b4     1D 57 02 F6 | 	mov	local29, local15
019b8     01 56 86 F1 | 	sub	local29, #1
019bc                 | LR__0079
019bc     2B 39 52 F2 | 	cmps	local14, local29 wc
019c0     80 00 90 3D |  if_ae	jmp	#LR__0080
019c4     1C 27 02 F6 | 	mov	local05, local14
019c8     01 26 06 F1 | 	add	local05, #1
019cc     03 26 66 F0 | 	shl	local05, #3
019d0     54 00 00 FF 
019d4     F0 E5 05 F1 | 	add	objptr, ##43504
019d8     F2 26 02 F1 | 	add	local05, objptr
019dc     13 1F 02 FB | 	rdlong	local01, local05
019e0     1C 29 02 F6 | 	mov	local06, local14
019e4     01 28 06 F1 | 	add	local06, #1
019e8     03 28 66 F0 | 	shl	local06, #3
019ec     F2 28 02 F1 | 	add	local06, objptr
019f0     04 28 06 F1 | 	add	local06, #4
019f4     14 25 02 FB | 	rdlong	local04, local06
019f8     1C 2F 02 F6 | 	mov	local09, local14
019fc     17 29 02 F6 | 	mov	local06, local09
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 32 02 F6 | 	mov	local11, objptr
01a08     F2 28 02 F1 | 	add	local06, objptr
01a0c     14 1F 62 FC | 	wrlong	local01, local06
01a10     1C 31 02 F6 | 	mov	local10, local14
01a14     18 37 02 F6 | 	mov	local13, local10
01a18     1B 35 02 F6 | 	mov	local12, local13
01a1c     03 34 66 F0 | 	shl	local12, #3
01a20     F2 4A 02 F6 | 	mov	local23, objptr
01a24     F2 34 02 F1 | 	add	local12, objptr
01a28     04 34 06 F1 | 	add	local12, #4
01a2c     1A 25 62 FC | 	wrlong	local04, local12
01a30     04 34 86 F1 | 	sub	local12, #4
01a34     01 38 06 F1 | 	add	local14, #1
01a38     54 00 00 FF 
01a3c     F0 E5 85 F1 | 	sub	objptr, ##43504
01a40     78 FF 9F FD | 	jmp	#LR__0079
01a44                 | LR__0080
01a44     01 3A 86 F1 | 	sub	local15, #1
01a48                 | '       if i>0 then i-=1 
01a48     01 22 56 F2 | 	cmps	local03, #1 wc
01a4c     01 22 86 31 |  if_ae	sub	local03, #1
01a50                 | LR__0081
01a50                 | LR__0082
01a50     01 22 06 F1 | 	add	local03, #1
01a54     1D 1F 02 F6 | 	mov	local01, local15
01a58     01 1E 86 F1 | 	sub	local01, #1
01a5c     0F 23 5A F2 | 	cmps	local03, local01 wcz
01a60     EC FE 9F ED |  if_be	jmp	#LR__0077
01a64                 | LR__0083
01a64                 | LR__0084
01a64                 | ' 
01a64                 | ' ' 1g: lowercase all that is not a string
01a64                 | ' 
01a64                 | ' for j=0 to k-1
01a64     00 38 06 F6 | 	mov	local14, #0
01a68     1D 59 02 F6 | 	mov	local30, local15
01a6c                 | LR__0085
01a6c     2C 39 52 F2 | 	cmps	local14, local30 wc
01a70     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a74                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a74     1C 27 02 F6 | 	mov	local05, local14
01a78     03 26 66 F0 | 	shl	local05, #3
01a7c     54 00 00 FF 
01a80     F0 E5 05 F1 | 	add	objptr, ##43504
01a84     F2 26 02 F1 | 	add	local05, objptr
01a88     13 13 02 FB | 	rdlong	arg01, local05
01a8c     01 14 06 F6 | 	mov	arg02, #1
01a90     54 00 00 FF 
01a94     F0 E5 85 F1 | 	sub	objptr, ##43504
01a98     E8 C3 B1 FD | 	call	#__system__Left_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     5A 01 00 FF 
01aa4     B3 14 06 F6 | 	mov	arg02, ##@LR__4578
01aa8     BC A3 B1 FD | 	call	#__system___string_cmp
01aac     00 FA 0D F2 | 	cmp	result1, #0 wz
01ab0     40 00 90 5D |  if_ne	jmp	#LR__0086
01ab4     1C 29 02 F6 | 	mov	local06, local14
01ab8     03 28 66 F0 | 	shl	local06, #3
01abc     54 00 00 FF 
01ac0     F0 E5 05 F1 | 	add	objptr, ##43504
01ac4     F2 28 02 F1 | 	add	local06, objptr
01ac8     14 13 02 FB | 	rdlong	arg01, local06
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     54 00 00 FF 
01ad4     F0 E5 85 F1 | 	sub	objptr, ##43504
01ad8     30 C4 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     5A 01 00 FF 
01ae4     B5 14 06 F6 | 	mov	arg02, ##@LR__4579
01ae8     7C A3 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     38 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1C 2F 02 F6 | 	mov	local09, local14
01af8     03 2E 66 F0 | 	shl	local09, #3
01afc     54 00 00 FF 
01b00     F0 E5 05 F1 | 	add	objptr, ##43504
01b04     F2 2E 02 F1 | 	add	local09, objptr
01b08     1C 37 02 F6 | 	mov	local13, local14
01b0c     03 36 66 F0 | 	shl	local13, #3
01b10     F2 34 02 F6 | 	mov	local12, objptr
01b14     F2 36 02 F1 | 	add	local13, objptr
01b18     1B 13 02 FB | 	rdlong	arg01, local13
01b1c     54 00 00 FF 
01b20     F0 E5 85 F1 | 	sub	objptr, ##43504
01b24     6C C6 B1 FD | 	call	#__system__LCase_S
01b28     17 FB 61 FC | 	wrlong	result1, local09
01b2c                 | LR__0087
01b2c     01 38 06 F1 | 	add	local14, #1
01b30     38 FF 9F FD | 	jmp	#LR__0085
01b34                 | LR__0088
01b34                 | ' 
01b34                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b34                 | ' 
01b34                 | ' for i=0 to k: lparts(i).token=-1: next i
01b34     00 22 06 F6 | 	mov	local03, #0
01b38     1D 5B 02 F6 | 	mov	local31, local15
01b3c     01 5A 06 F1 | 	add	local31, #1
01b40     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b44                 | LR__0089
01b44     2D 23 52 F2 | 	cmps	local03, local31 wc
01b48     30 00 90 3D |  if_ae	jmp	#LR__0091
01b4c     11 2F 02 F6 | 	mov	local09, local03
01b50     03 2E 66 F0 | 	shl	local09, #3
01b54     54 00 00 FF 
01b58     F0 E5 05 F1 | 	add	objptr, ##43504
01b5c     F2 2E 02 F1 | 	add	local09, objptr
01b60     04 2E 06 F1 | 	add	local09, #4
01b64     FF FF FF FF 
01b68     17 FF 6B FC | 	wrlong	##-1, local09
01b6c     01 22 06 F1 | 	add	local03, #1
01b70     54 00 00 FF 
01b74     F0 E5 85 F1 | 	sub	objptr, ##43504
01b78     C8 FF 9F FD | 	jmp	#LR__0089
01b7c                 | LR__0090
01b7c                 | LR__0091
01b7c                 | ' 
01b7c                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b7c                 | ' 
01b7c                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b7c     54 00 00 FF 
01b80     F0 E5 05 F1 | 	add	objptr, ##43504
01b84     F2 12 02 FB | 	rdlong	arg01, objptr
01b88     54 00 00 FF 
01b8c     F0 E5 85 F1 | 	sub	objptr, ##43504
01b90     09 2B 02 F6 | 	mov	local07, arg01
01b94     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01b98                 | LR__0092
01b98     15 FB C9 FA | 	rdbyte	result1, local07 wz
01b9c     01 2A 06 51 |  if_ne	add	local07, #1
01ba0     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01ba4                 | LR__0093
01ba4     09 2B 8A F1 | 	sub	local07, arg01 wz
01ba8     84 17 90 AD |  if_e	jmp	#LR__0149
01bac                 | ' 
01bac                 | ' 
01bac                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bac     54 00 00 FF 
01bb0     F0 E5 05 F1 | 	add	objptr, ##43504
01bb4     F2 12 02 FB | 	rdlong	arg01, objptr
01bb8     54 00 00 FF 
01bbc     F0 E5 85 F1 | 	sub	objptr, ##43504
01bc0     C8 35 B0 FD | 	call	#_isdec
01bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc8     7B 00 00 5F 
01bcc     D4 E4 05 51 |  if_ne	add	objptr, ##63188
01bd0     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bd4     7B 00 00 FF 
01bd8     D4 E4 E5 F3 | 	sumnz	objptr, ##63188
01bdc     F2 00 68 AC |  if_e	wrlong	#0, objptr
01be0     7B 00 00 AF 
01be4     D4 E4 85 A1 |  if_e	sub	objptr, ##63188
01be8     7B 00 00 FF 
01bec     D4 E4 05 F1 | 	add	objptr, ##63188
01bf0     F2 26 02 FB | 	rdlong	local05, objptr
01bf4     03 26 66 F0 | 	shl	local05, #3
01bf8     26 00 00 FF 
01bfc     E4 E4 85 F1 | 	sub	objptr, ##19684
01c00     F2 26 02 F1 | 	add	local05, objptr
01c04     13 33 02 FB | 	rdlong	local11, local05
01c08     26 00 00 FF 
01c0c     E8 E4 05 F1 | 	add	objptr, ##19688
01c10     F2 32 62 FC | 	wrlong	local11, objptr
01c14     04 E4 85 F1 | 	sub	objptr, #4
01c18     F2 32 02 FB | 	rdlong	local11, objptr
01c1c     03 32 66 F0 | 	shl	local11, #3
01c20     26 00 00 FF 
01c24     E4 E4 85 F1 | 	sub	objptr, ##19684
01c28     F2 30 02 F6 | 	mov	local10, objptr
01c2c     F2 32 02 F1 | 	add	local11, objptr
01c30     19 15 02 FB | 	rdlong	arg02, local11
01c34     5A 01 00 FF 
01c38     B7 16 06 F6 | 	mov	arg03, ##@LR__4580
01c3c     01 12 06 F6 | 	mov	arg01, #1
01c40     54 00 00 FF 
01c44     F0 E5 85 F1 | 	sub	objptr, ##43504
01c48     80 C7 B1 FD | 	call	#__system__Instr
01c4c     7B 00 00 FF 
01c50     DC E4 05 F1 | 	add	objptr, ##63196
01c54     F2 FA 61 FC | 	wrlong	result1, objptr
01c58                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c58     FD 1E 02 F6 | 	mov	local01, result1
01c5c     7B 00 00 FF 
01c60     DC E4 85 F1 | 	sub	objptr, ##63196
01c64     01 1E 56 F2 | 	cmps	local01, #1 wc
01c68     DC 01 90 CD |  if_b	jmp	#LR__0100
01c6c     7B 00 00 FF 
01c70     D4 E4 05 F1 | 	add	objptr, ##63188
01c74     F2 30 02 FB | 	rdlong	local10, objptr
01c78     03 30 66 F0 | 	shl	local10, #3
01c7c     26 00 00 FF 
01c80     E4 E4 85 F1 | 	sub	objptr, ##19684
01c84     F2 36 02 F6 | 	mov	local13, objptr
01c88     F2 30 02 F1 | 	add	local10, objptr
01c8c     18 13 02 FB | 	rdlong	arg01, local10
01c90     54 00 00 FF 
01c94     F0 E5 85 F1 | 	sub	objptr, ##43504
01c98     09 2B 02 F6 | 	mov	local07, arg01
01c9c     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01ca0                 | LR__0094
01ca0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ca4     01 2A 06 51 |  if_ne	add	local07, #1
01ca8     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cac                 | LR__0095
01cac     09 2B 82 F1 | 	sub	local07, arg01
01cb0     15 2F 02 F6 | 	mov	local09, local07
01cb4     7B 00 00 FF 
01cb8     DC E4 05 F1 | 	add	objptr, ##63196
01cbc     F2 26 02 FB | 	rdlong	local05, objptr
01cc0     7B 00 00 FF 
01cc4     DC E4 85 F1 | 	sub	objptr, ##63196
01cc8     17 27 52 F2 | 	cmps	local05, local09 wc
01ccc     78 01 90 3D |  if_ae	jmp	#LR__0100
01cd0     01 3A 06 F1 | 	add	local15, #1
01cd4                 | '   k+=1
01cd4                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cd4     1D 23 02 F6 | 	mov	local03, local15
01cd8     7B 00 00 FF 
01cdc     D4 E4 05 F1 | 	add	objptr, ##63188
01ce0     F2 5C 02 FB | 	rdlong	local32, objptr
01ce4     01 5C 06 F1 | 	add	local32, #1
01ce8     26 00 00 FF 
01cec     E4 E4 85 F1 | 	sub	objptr, ##19684
01cf0     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01cf4                 | LR__0096
01cf4     11 29 02 F6 | 	mov	local06, local03
01cf8     01 28 86 F1 | 	sub	local06, #1
01cfc     03 28 66 F0 | 	shl	local06, #3
01d00     F2 28 02 F1 | 	add	local06, objptr
01d04     14 25 02 FB | 	rdlong	local04, local06
01d08     11 33 02 F6 | 	mov	local11, local03
01d0c     01 32 86 F1 | 	sub	local11, #1
01d10     03 32 66 F0 | 	shl	local11, #3
01d14     F2 32 02 F1 | 	add	local11, objptr
01d18     04 32 06 F1 | 	add	local11, #4
01d1c     19 2F 02 FB | 	rdlong	local09, local11
01d20     11 33 02 F6 | 	mov	local11, local03
01d24     03 32 66 F0 | 	shl	local11, #3
01d28     F2 32 02 F1 | 	add	local11, objptr
01d2c     19 25 62 FC | 	wrlong	local04, local11
01d30     11 4B 02 F6 | 	mov	local23, local03
01d34     03 4A 66 F0 | 	shl	local23, #3
01d38     F2 4A 02 F1 | 	add	local23, objptr
01d3c     04 4A 06 F1 | 	add	local23, #4
01d40     25 2F 62 FC | 	wrlong	local09, local23
01d44     01 22 86 F1 | 	sub	local03, #1
01d48     2E 23 52 F2 | 	cmps	local03, local32 wc
01d4c     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d50                 | LR__0097
01d50     26 00 00 FF 
01d54     E4 E4 05 F1 | 	add	objptr, ##19684
01d58     F2 4A 02 FB | 	rdlong	local23, objptr
01d5c     25 27 02 F6 | 	mov	local05, local23
01d60     01 26 06 F1 | 	add	local05, #1
01d64     03 26 66 F0 | 	shl	local05, #3
01d68     26 00 00 FF 
01d6c     E4 E4 85 F1 | 	sub	objptr, ##19684
01d70     F2 26 02 F1 | 	add	local05, objptr
01d74     03 4A 66 F0 | 	shl	local23, #3
01d78     F2 4A 02 F1 | 	add	local23, objptr
01d7c     25 33 02 FB | 	rdlong	local11, local23
01d80     26 00 00 FF 
01d84     E4 E4 05 F1 | 	add	objptr, ##19684
01d88     F2 44 02 FB | 	rdlong	local20, objptr
01d8c     22 47 02 F6 | 	mov	local21, local20
01d90     03 46 66 F0 | 	shl	local21, #3
01d94     26 00 00 FF 
01d98     E4 E4 85 F1 | 	sub	objptr, ##19684
01d9c     F2 4C 02 F6 | 	mov	local24, objptr
01da0     F2 46 02 F1 | 	add	local21, objptr
01da4     23 13 02 FB | 	rdlong	arg01, local21
01da8     54 00 00 FF 
01dac     F0 E5 85 F1 | 	sub	objptr, ##43504
01db0     09 2B 02 F6 | 	mov	local07, arg01
01db4     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01db8                 | LR__0098
01db8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dbc     01 2A 06 51 |  if_ne	add	local07, #1
01dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01dc4                 | LR__0099
01dc4     09 2B 82 F1 | 	sub	local07, arg01
01dc8     15 15 02 F6 | 	mov	arg02, local07
01dcc     7B 00 00 FF 
01dd0     DC E4 05 F1 | 	add	objptr, ##63196
01dd4     F2 4A 02 FB | 	rdlong	local23, objptr
01dd8     7B 00 00 FF 
01ddc     DC E4 85 F1 | 	sub	objptr, ##63196
01de0     25 15 82 F1 | 	sub	arg02, local23
01de4     19 13 02 F6 | 	mov	arg01, local11
01de8     20 C1 B1 FD | 	call	#__system__Right_S
01dec     13 FB 61 FC | 	wrlong	result1, local05
01df0     7B 00 00 FF 
01df4     D4 E4 05 F1 | 	add	objptr, ##63188
01df8     F2 34 02 FB | 	rdlong	local12, objptr
01dfc     1A 27 02 F6 | 	mov	local05, local12
01e00     03 26 66 F0 | 	shl	local05, #3
01e04     26 00 00 FF 
01e08     E4 E4 85 F1 | 	sub	objptr, ##19684
01e0c     F2 26 02 F1 | 	add	local05, objptr
01e10     1A 4B 02 F6 | 	mov	local23, local12
01e14     03 4A 66 F0 | 	shl	local23, #3
01e18     F2 42 02 F6 | 	mov	local19, objptr
01e1c     F2 4A 02 F1 | 	add	local23, objptr
01e20     25 13 02 FB | 	rdlong	arg01, local23
01e24     26 00 00 FF 
01e28     EC E4 05 F1 | 	add	objptr, ##19692
01e2c     F2 36 02 FB | 	rdlong	local13, objptr
01e30     7B 00 00 FF 
01e34     DC E4 85 F1 | 	sub	objptr, ##63196
01e38     1B 31 02 F6 | 	mov	local10, local13
01e3c     18 15 02 F6 | 	mov	arg02, local10
01e40     40 C0 B1 FD | 	call	#__system__Left_S
01e44     13 FB 61 FC | 	wrlong	result1, local05
01e48                 | LR__0100
01e48                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e48     7B 00 00 FF 
01e4c     D4 E4 05 F1 | 	add	objptr, ##63188
01e50     F2 28 02 FB | 	rdlong	local06, objptr
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     E4 E4 85 F1 | 	sub	objptr, ##19684
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     01 14 06 F6 | 	mov	arg02, #1
01e6c     54 00 00 FF 
01e70     F0 E5 85 F1 | 	sub	objptr, ##43504
01e74     0C C0 B1 FD | 	call	#__system__Left_S
01e78     FD 12 02 F6 | 	mov	arg01, result1
01e7c     5A 01 00 FF 
01e80     B9 14 06 F6 | 	mov	arg02, ##@LR__4581
01e84     E0 9F B1 FD | 	call	#__system___string_cmp
01e88     00 FA 0D F2 | 	cmp	result1, #0 wz
01e8c     9C 01 90 5D |  if_ne	jmp	#LR__0107
01e90     7B 00 00 FF 
01e94     D4 E4 05 F1 | 	add	objptr, ##63188
01e98     F2 32 02 FB | 	rdlong	local11, objptr
01e9c     03 32 66 F0 | 	shl	local11, #3
01ea0     26 00 00 FF 
01ea4     E4 E4 85 F1 | 	sub	objptr, ##19684
01ea8     F2 30 02 F6 | 	mov	local10, objptr
01eac     F2 32 02 F1 | 	add	local11, objptr
01eb0     19 13 02 FB | 	rdlong	arg01, local11
01eb4     54 00 00 FF 
01eb8     F0 E5 85 F1 | 	sub	objptr, ##43504
01ebc     09 2B 02 F6 | 	mov	local07, arg01
01ec0     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ec4                 | LR__0101
01ec4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ec8     01 2A 06 51 |  if_ne	add	local07, #1
01ecc     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ed0                 | LR__0102
01ed0     09 2B 82 F1 | 	sub	local07, arg01
01ed4     02 2A 56 F2 | 	cmps	local07, #2 wc
01ed8     50 01 90 CD |  if_b	jmp	#LR__0107
01edc     01 3A 06 F1 | 	add	local15, #1
01ee0                 | '   k+=1
01ee0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ee0     1D 23 02 F6 | 	mov	local03, local15
01ee4     7B 00 00 FF 
01ee8     D4 E4 05 F1 | 	add	objptr, ##63188
01eec     F2 5E 02 FB | 	rdlong	local33, objptr
01ef0     01 5E 06 F1 | 	add	local33, #1
01ef4     26 00 00 FF 
01ef8     E4 E4 85 F1 | 	sub	objptr, ##19684
01efc     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f00                 | LR__0103
01f00     11 29 02 F6 | 	mov	local06, local03
01f04     01 28 86 F1 | 	sub	local06, #1
01f08     03 28 66 F0 | 	shl	local06, #3
01f0c     F2 28 02 F1 | 	add	local06, objptr
01f10     14 25 02 FB | 	rdlong	local04, local06
01f14     11 33 02 F6 | 	mov	local11, local03
01f18     01 32 86 F1 | 	sub	local11, #1
01f1c     03 32 66 F0 | 	shl	local11, #3
01f20     F2 32 02 F1 | 	add	local11, objptr
01f24     04 32 06 F1 | 	add	local11, #4
01f28     19 2F 02 FB | 	rdlong	local09, local11
01f2c     11 33 02 F6 | 	mov	local11, local03
01f30     03 32 66 F0 | 	shl	local11, #3
01f34     F2 32 02 F1 | 	add	local11, objptr
01f38     19 25 62 FC | 	wrlong	local04, local11
01f3c     11 4B 02 F6 | 	mov	local23, local03
01f40     03 4A 66 F0 | 	shl	local23, #3
01f44     F2 4A 02 F1 | 	add	local23, objptr
01f48     04 4A 06 F1 | 	add	local23, #4
01f4c     25 2F 62 FC | 	wrlong	local09, local23
01f50     01 22 86 F1 | 	sub	local03, #1
01f54     2F 23 52 F2 | 	cmps	local03, local33 wc
01f58     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f5c                 | LR__0104
01f5c     26 00 00 FF 
01f60     E4 E4 05 F1 | 	add	objptr, ##19684
01f64     F2 4A 02 FB | 	rdlong	local23, objptr
01f68     25 27 02 F6 | 	mov	local05, local23
01f6c     01 26 06 F1 | 	add	local05, #1
01f70     03 26 66 F0 | 	shl	local05, #3
01f74     26 00 00 FF 
01f78     E4 E4 85 F1 | 	sub	objptr, ##19684
01f7c     F2 26 02 F1 | 	add	local05, objptr
01f80     03 4A 66 F0 | 	shl	local23, #3
01f84     F2 4A 02 F1 | 	add	local23, objptr
01f88     25 33 02 FB | 	rdlong	local11, local23
01f8c     26 00 00 FF 
01f90     E4 E4 05 F1 | 	add	objptr, ##19684
01f94     F2 42 02 FB | 	rdlong	local19, objptr
01f98     21 4B 02 F6 | 	mov	local23, local19
01f9c     25 45 02 F6 | 	mov	local20, local23
01fa0     22 47 02 F6 | 	mov	local21, local20
01fa4     03 46 66 F0 | 	shl	local21, #3
01fa8     26 00 00 FF 
01fac     E4 E4 85 F1 | 	sub	objptr, ##19684
01fb0     F2 4C 02 F6 | 	mov	local24, objptr
01fb4     F2 46 02 F1 | 	add	local21, objptr
01fb8     23 13 02 FB | 	rdlong	arg01, local21
01fbc     54 00 00 FF 
01fc0     F0 E5 85 F1 | 	sub	objptr, ##43504
01fc4     09 2B 02 F6 | 	mov	local07, arg01
01fc8     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fcc                 | LR__0105
01fcc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fd0     01 2A 06 51 |  if_ne	add	local07, #1
01fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01fd8                 | LR__0106
01fd8     09 2B 82 F1 | 	sub	local07, arg01
01fdc     15 35 02 F6 | 	mov	local12, local07
01fe0     1A 37 02 F6 | 	mov	local13, local12
01fe4     01 36 86 F1 | 	sub	local13, #1
01fe8     1B 31 02 F6 | 	mov	local10, local13
01fec     19 13 02 F6 | 	mov	arg01, local11
01ff0     18 15 02 F6 | 	mov	arg02, local10
01ff4     14 BF B1 FD | 	call	#__system__Right_S
01ff8     13 FB 61 FC | 	wrlong	result1, local05
01ffc     7B 00 00 FF 
02000     D4 E4 05 F1 | 	add	objptr, ##63188
02004     F2 26 02 FB | 	rdlong	local05, objptr
02008     03 26 66 F0 | 	shl	local05, #3
0200c     26 00 00 FF 
02010     E4 E4 85 F1 | 	sub	objptr, ##19684
02014     F2 26 02 F1 | 	add	local05, objptr
02018     5A 01 00 FF 
0201c     BB 32 06 F6 | 	mov	local11, ##@LR__4582
02020     13 33 62 FC | 	wrlong	local11, local05
02024     54 00 00 FF 
02028     F0 E5 85 F1 | 	sub	objptr, ##43504
0202c                 | LR__0107
0202c     7B 00 00 FF 
02030     D4 E4 05 F1 | 	add	objptr, ##63188
02034     F2 26 02 FB | 	rdlong	local05, objptr
02038     03 26 66 F0 | 	shl	local05, #3
0203c     26 00 00 FF 
02040     E4 E4 85 F1 | 	sub	objptr, ##19684
02044     F2 26 02 F1 | 	add	local05, objptr
02048     13 33 02 FB | 	rdlong	local11, local05
0204c     26 00 00 FF 
02050     E8 E4 05 F1 | 	add	objptr, ##19688
02054     F2 32 62 FC | 	wrlong	local11, objptr
02058                 | ' 
02058                 | ' ' process the case when simple load or save is called without ""
02058                 | ' 
02058                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") andalso lparts(addptr+1).token=token_name then 
02058     7B 00 00 FF 
0205c     D8 E4 85 F1 | 	sub	objptr, ##63192
02060     5A 01 00 FF 
02064     BD 14 06 F6 | 	mov	arg02, ##@LR__4583
02068     19 13 02 F6 | 	mov	arg01, local11
0206c     F8 9D B1 FD | 	call	#__system___string_cmp
02070     00 FA 0D F2 | 	cmp	result1, #0 wz
02074     50 00 90 AD |  if_e	jmp	#LR__0108
02078     7B 00 00 FF 
0207c     D8 E4 05 F1 | 	add	objptr, ##63192
02080     F2 12 02 FB | 	rdlong	arg01, objptr
02084     7B 00 00 FF 
02088     D8 E4 85 F1 | 	sub	objptr, ##63192
0208c     5A 01 00 FF 
02090     C3 14 06 F6 | 	mov	arg02, ##@LR__4584
02094     D0 9D B1 FD | 	call	#__system___string_cmp
02098     00 FA 0D F2 | 	cmp	result1, #0 wz
0209c     28 00 90 AD |  if_e	jmp	#LR__0108
020a0     7B 00 00 FF 
020a4     D8 E4 05 F1 | 	add	objptr, ##63192
020a8     F2 12 02 FB | 	rdlong	arg01, objptr
020ac     7B 00 00 FF 
020b0     D8 E4 85 F1 | 	sub	objptr, ##63192
020b4     5A 01 00 FF 
020b8     CA 14 06 F6 | 	mov	arg02, ##@LR__4585
020bc     A8 9D B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     94 01 90 5D |  if_ne	jmp	#LR__0111
020c8                 | LR__0108
020c8     7B 00 00 FF 
020cc     D4 E4 05 F1 | 	add	objptr, ##63188
020d0     F2 32 02 FB | 	rdlong	local11, objptr
020d4     01 32 06 F1 | 	add	local11, #1
020d8     19 31 02 F6 | 	mov	local10, local11
020dc     03 30 66 F0 | 	shl	local10, #3
020e0     26 00 00 FF 
020e4     E4 E4 85 F1 | 	sub	objptr, ##19684
020e8     F2 36 02 F6 | 	mov	local13, objptr
020ec     F2 30 02 F1 | 	add	local10, objptr
020f0     04 30 06 F1 | 	add	local10, #4
020f4     18 4B 02 FB | 	rdlong	local23, local10
020f8     04 30 86 F1 | 	sub	local10, #4
020fc     25 35 02 F6 | 	mov	local12, local23
02100     01 00 00 FF 
02104     04 34 0E F2 | 	cmp	local12, ##516 wz
02108     54 00 00 FF 
0210c     F0 E5 85 F1 | 	sub	objptr, ##43504
02110     48 01 90 5D |  if_ne	jmp	#LR__0111
02114                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
02114     7B 00 00 FF 
02118     D4 E4 05 F1 | 	add	objptr, ##63188
0211c     F2 28 02 FB | 	rdlong	local06, objptr
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     26 00 00 FF 
0212c     E4 E4 85 F1 | 	sub	objptr, ##19684
02130     F2 28 02 F1 | 	add	local06, objptr
02134     14 13 02 FB | 	rdlong	arg01, local06
02138     5A 01 00 FF 
0213c     D0 14 06 F6 | 	mov	arg02, ##@LR__4586
02140     54 00 00 FF 
02144     F0 E5 85 F1 | 	sub	objptr, ##43504
02148     1C 9D B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     60 00 90 5D |  if_ne	jmp	#LR__0109
02154     7B 00 00 FF 
02158     D4 E4 05 F1 | 	add	objptr, ##63188
0215c     F2 26 02 FB | 	rdlong	local05, objptr
02160     01 26 06 F1 | 	add	local05, #1
02164     03 26 66 F0 | 	shl	local05, #3
02168     26 00 00 FF 
0216c     E4 E4 85 F1 | 	sub	objptr, ##19684
02170     F2 26 02 F1 | 	add	local05, objptr
02174     5A 01 00 FF 
02178     D3 32 06 F6 | 	mov	local11, ##@LR__4587
0217c     13 33 62 FC | 	wrlong	local11, local05
02180     26 00 00 FF 
02184     E4 E4 05 F1 | 	add	objptr, ##19684
02188     F2 26 02 FB | 	rdlong	local05, objptr
0218c     01 26 06 F1 | 	add	local05, #1
02190     03 26 66 F0 | 	shl	local05, #3
02194     26 00 00 FF 
02198     E4 E4 85 F1 | 	sub	objptr, ##19684
0219c     F2 26 02 F1 | 	add	local05, objptr
021a0     04 26 06 F1 | 	add	local05, #4
021a4     01 00 80 FF 
021a8     13 01 68 FC | 	wrlong	##512, local05
021ac     54 00 00 FF 
021b0     F0 E5 85 F1 | 	sub	objptr, ##43504
021b4                 | LR__0109
021b4                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
021b4     7B 00 00 FF 
021b8     D4 E4 05 F1 | 	add	objptr, ##63188
021bc     F2 28 02 FB | 	rdlong	local06, objptr
021c0     01 28 06 F1 | 	add	local06, #1
021c4     03 28 66 F0 | 	shl	local06, #3
021c8     26 00 00 FF 
021cc     E4 E4 85 F1 | 	sub	objptr, ##19684
021d0     F2 32 02 F6 | 	mov	local11, objptr
021d4     F2 28 02 F1 | 	add	local06, objptr
021d8     14 13 02 FB | 	rdlong	arg01, local06
021dc     5A 01 00 FF 
021e0     D5 14 06 F6 | 	mov	arg02, ##@LR__4588
021e4     54 00 00 FF 
021e8     F0 E5 85 F1 | 	sub	objptr, ##43504
021ec     78 9C B1 FD | 	call	#__system___string_cmp
021f0     00 FA 0D F2 | 	cmp	result1, #0 wz
021f4     64 00 90 5D |  if_ne	jmp	#LR__0110
021f8     7B 00 00 FF 
021fc     D4 E4 05 F1 | 	add	objptr, ##63188
02200     F2 26 02 FB | 	rdlong	local05, objptr
02204     01 26 06 F1 | 	add	local05, #1
02208     03 26 66 F0 | 	shl	local05, #3
0220c     26 00 00 FF 
02210     E4 E4 85 F1 | 	sub	objptr, ##19684
02214     F2 26 02 F1 | 	add	local05, objptr
02218     5A 01 00 FF 
0221c     D9 32 06 F6 | 	mov	local11, ##@LR__4589
02220     13 33 62 FC | 	wrlong	local11, local05
02224     26 00 00 FF 
02228     E4 E4 05 F1 | 	add	objptr, ##19684
0222c     F2 26 02 FB | 	rdlong	local05, objptr
02230     01 26 06 F1 | 	add	local05, #1
02234     03 26 66 F0 | 	shl	local05, #3
02238     26 00 00 FF 
0223c     E4 E4 85 F1 | 	sub	objptr, ##19684
02240     F2 26 02 F1 | 	add	local05, objptr
02244     09 32 C6 F9 | 	decod	local11, #9
02248     04 26 06 F1 | 	add	local05, #4
0224c     01 00 80 FF 
02250     13 01 68 FC | 	wrlong	##512, local05
02254     54 00 00 FF 
02258     F0 E5 85 F1 | 	sub	objptr, ##43504
0225c                 | LR__0110
0225c                 | LR__0111
0225c                 | ' if (lp$="mode" orelse lp$="m.") then 
0225c     7B 00 00 FF 
02260     D8 E4 05 F1 | 	add	objptr, ##63192
02264     F2 12 02 FB | 	rdlong	arg01, objptr
02268     7B 00 00 FF 
0226c     D8 E4 85 F1 | 	sub	objptr, ##63192
02270     5A 01 00 FF 
02274     DB 14 06 F6 | 	mov	arg02, ##@LR__4590
02278     EC 9B B1 FD | 	call	#__system___string_cmp
0227c     00 FA 0D F2 | 	cmp	result1, #0 wz
02280     28 00 90 AD |  if_e	jmp	#LR__0112
02284     7B 00 00 FF 
02288     D8 E4 05 F1 | 	add	objptr, ##63192
0228c     F2 12 02 FB | 	rdlong	arg01, objptr
02290     7B 00 00 FF 
02294     D8 E4 85 F1 | 	sub	objptr, ##63192
02298     5A 01 00 FF 
0229c     E0 14 06 F6 | 	mov	arg02, ##@LR__4591
022a0     C4 9B B1 FD | 	call	#__system___string_cmp
022a4     00 FA 0D F2 | 	cmp	result1, #0 wz
022a8     48 02 90 5D |  if_ne	jmp	#LR__0118
022ac                 | LR__0112
022ac                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
022ac     7B 00 00 FF 
022b0     D4 E4 05 F1 | 	add	objptr, ##63188
022b4     F2 28 02 FB | 	rdlong	local06, objptr
022b8     01 28 06 F1 | 	add	local06, #1
022bc     03 28 66 F0 | 	shl	local06, #3
022c0     26 00 00 FF 
022c4     E4 E4 85 F1 | 	sub	objptr, ##19684
022c8     F2 28 02 F1 | 	add	local06, objptr
022cc     14 13 02 FB | 	rdlong	arg01, local06
022d0     5A 01 00 FF 
022d4     E3 14 06 F6 | 	mov	arg02, ##@LR__4592
022d8     54 00 00 FF 
022dc     F0 E5 85 F1 | 	sub	objptr, ##43504
022e0     84 9B B1 FD | 	call	#__system___string_cmp
022e4     00 FA 0D F2 | 	cmp	result1, #0 wz
022e8     34 00 90 5D |  if_ne	jmp	#LR__0113
022ec     7B 00 00 FF 
022f0     D4 E4 05 F1 | 	add	objptr, ##63188
022f4     F2 26 02 FB | 	rdlong	local05, objptr
022f8     01 26 06 F1 | 	add	local05, #1
022fc     03 26 66 F0 | 	shl	local05, #3
02300     26 00 00 FF 
02304     E4 E4 85 F1 | 	sub	objptr, ##19684
02308     F2 26 02 F1 | 	add	local05, objptr
0230c     5A 01 00 FF 
02310     E9 32 06 F6 | 	mov	local11, ##@LR__4593
02314     13 33 62 FC | 	wrlong	local11, local05
02318     54 00 00 FF 
0231c     F0 E5 85 F1 | 	sub	objptr, ##43504
02320                 | LR__0113
02320                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02320     7B 00 00 FF 
02324     D4 E4 05 F1 | 	add	objptr, ##63188
02328     F2 28 02 FB | 	rdlong	local06, objptr
0232c     01 28 06 F1 | 	add	local06, #1
02330     03 28 66 F0 | 	shl	local06, #3
02334     26 00 00 FF 
02338     E4 E4 85 F1 | 	sub	objptr, ##19684
0233c     F2 28 02 F1 | 	add	local06, objptr
02340     14 13 02 FB | 	rdlong	arg01, local06
02344     5A 01 00 FF 
02348     EB 14 06 F6 | 	mov	arg02, ##@LR__4594
0234c     54 00 00 FF 
02350     F0 E5 85 F1 | 	sub	objptr, ##43504
02354     10 9B B1 FD | 	call	#__system___string_cmp
02358     00 FA 0D F2 | 	cmp	result1, #0 wz
0235c     34 00 90 5D |  if_ne	jmp	#LR__0114
02360     7B 00 00 FF 
02364     D4 E4 05 F1 | 	add	objptr, ##63188
02368     F2 26 02 FB | 	rdlong	local05, objptr
0236c     01 26 06 F1 | 	add	local05, #1
02370     03 26 66 F0 | 	shl	local05, #3
02374     26 00 00 FF 
02378     E4 E4 85 F1 | 	sub	objptr, ##19684
0237c     F2 26 02 F1 | 	add	local05, objptr
02380     5A 01 00 FF 
02384     F4 32 06 F6 | 	mov	local11, ##@LR__4595
02388     13 33 62 FC | 	wrlong	local11, local05
0238c     54 00 00 FF 
02390     F0 E5 85 F1 | 	sub	objptr, ##43504
02394                 | LR__0114
02394                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02394     7B 00 00 FF 
02398     D4 E4 05 F1 | 	add	objptr, ##63188
0239c     F2 28 02 FB | 	rdlong	local06, objptr
023a0     01 28 06 F1 | 	add	local06, #1
023a4     03 28 66 F0 | 	shl	local06, #3
023a8     26 00 00 FF 
023ac     E4 E4 85 F1 | 	sub	objptr, ##19684
023b0     F2 28 02 F1 | 	add	local06, objptr
023b4     14 13 02 FB | 	rdlong	arg01, local06
023b8     5A 01 00 FF 
023bc     F6 14 06 F6 | 	mov	arg02, ##@LR__4596
023c0     54 00 00 FF 
023c4     F0 E5 85 F1 | 	sub	objptr, ##43504
023c8     9C 9A B1 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     34 00 90 5D |  if_ne	jmp	#LR__0115
023d4     7B 00 00 FF 
023d8     D4 E4 05 F1 | 	add	objptr, ##63188
023dc     F2 26 02 FB | 	rdlong	local05, objptr
023e0     01 26 06 F1 | 	add	local05, #1
023e4     03 26 66 F0 | 	shl	local05, #3
023e8     26 00 00 FF 
023ec     E4 E4 85 F1 | 	sub	objptr, ##19684
023f0     F2 26 02 F1 | 	add	local05, objptr
023f4     5A 01 00 FF 
023f8     FF 32 06 F6 | 	mov	local11, ##@LR__4597
023fc     13 33 62 FC | 	wrlong	local11, local05
02400     54 00 00 FF 
02404     F0 E5 85 F1 | 	sub	objptr, ##43504
02408                 | LR__0115
02408                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02408     7B 00 00 FF 
0240c     D4 E4 05 F1 | 	add	objptr, ##63188
02410     F2 28 02 FB | 	rdlong	local06, objptr
02414     01 28 06 F1 | 	add	local06, #1
02418     03 28 66 F0 | 	shl	local06, #3
0241c     26 00 00 FF 
02420     E4 E4 85 F1 | 	sub	objptr, ##19684
02424     F2 28 02 F1 | 	add	local06, objptr
02428     14 13 02 FB | 	rdlong	arg01, local06
0242c     5A 01 00 FF 
02430     01 15 06 F6 | 	mov	arg02, ##@LR__4598
02434     54 00 00 FF 
02438     F0 E5 85 F1 | 	sub	objptr, ##43504
0243c     28 9A B1 FD | 	call	#__system___string_cmp
02440     00 FA 0D F2 | 	cmp	result1, #0 wz
02444     34 00 90 5D |  if_ne	jmp	#LR__0116
02448     7B 00 00 FF 
0244c     D4 E4 05 F1 | 	add	objptr, ##63188
02450     F2 26 02 FB | 	rdlong	local05, objptr
02454     01 26 06 F1 | 	add	local05, #1
02458     03 26 66 F0 | 	shl	local05, #3
0245c     26 00 00 FF 
02460     E4 E4 85 F1 | 	sub	objptr, ##19684
02464     F2 26 02 F1 | 	add	local05, objptr
02468     5A 01 00 FF 
0246c     0A 33 06 F6 | 	mov	local11, ##@LR__4599
02470     13 33 62 FC | 	wrlong	local11, local05
02474     54 00 00 FF 
02478     F0 E5 85 F1 | 	sub	objptr, ##43504
0247c                 | LR__0116
0247c                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
0247c     7B 00 00 FF 
02480     D4 E4 05 F1 | 	add	objptr, ##63188
02484     F2 28 02 FB | 	rdlong	local06, objptr
02488     01 28 06 F1 | 	add	local06, #1
0248c     03 28 66 F0 | 	shl	local06, #3
02490     26 00 00 FF 
02494     E4 E4 85 F1 | 	sub	objptr, ##19684
02498     F2 32 02 F6 | 	mov	local11, objptr
0249c     F2 28 02 F1 | 	add	local06, objptr
024a0     14 13 02 FB | 	rdlong	arg01, local06
024a4     5A 01 00 FF 
024a8     0C 15 06 F6 | 	mov	arg02, ##@LR__4600
024ac     54 00 00 FF 
024b0     F0 E5 85 F1 | 	sub	objptr, ##43504
024b4     B0 99 B1 FD | 	call	#__system___string_cmp
024b8     00 FA 0D F2 | 	cmp	result1, #0 wz
024bc     34 00 90 5D |  if_ne	jmp	#LR__0117
024c0     7B 00 00 FF 
024c4     D4 E4 05 F1 | 	add	objptr, ##63188
024c8     F2 26 02 FB | 	rdlong	local05, objptr
024cc     01 26 06 F1 | 	add	local05, #1
024d0     03 26 66 F0 | 	shl	local05, #3
024d4     26 00 00 FF 
024d8     E4 E4 85 F1 | 	sub	objptr, ##19684
024dc     F2 26 02 F1 | 	add	local05, objptr
024e0     5A 01 00 FF 
024e4     0F 33 06 F6 | 	mov	local11, ##@LR__4601
024e8     13 33 62 FC | 	wrlong	local11, local05
024ec     54 00 00 FF 
024f0     F0 E5 85 F1 | 	sub	objptr, ##43504
024f4                 | LR__0117
024f4                 | LR__0118
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' 
024f4                 | ' ' 2a find part types 
024f4                 | ' 
024f4                 | ' for i=0 to k-1
024f4     00 22 06 F6 | 	mov	local03, #0
024f8     1D 61 02 F6 | 	mov	local34, local15
024fc                 | LR__0119
024fc     30 23 52 F2 | 	cmps	local03, local34 wc
02500     60 06 90 3D |  if_ae	jmp	#LR__0129
02504     11 2F 02 F6 | 	mov	local09, local03
02508     03 2E 66 F0 | 	shl	local09, #3
0250c     54 00 00 FF 
02510     F0 E5 05 F1 | 	add	objptr, ##43504
02514     F2 2E 02 F1 | 	add	local09, objptr
02518     11 35 02 F6 | 	mov	local12, local03
0251c     03 34 66 F0 | 	shl	local12, #3
02520     F2 4A 02 F6 | 	mov	local23, objptr
02524     F2 34 02 F1 | 	add	local12, objptr
02528     1A 13 02 FB | 	rdlong	arg01, local12
0252c     54 00 00 FF 
02530     F0 E5 85 F1 | 	sub	objptr, ##43504
02534     70 14 B0 FD | 	call	#_isseparator
02538     FD FA E1 F8 | 	getbyte	result1, result1, #0
0253c     04 2E 06 F1 | 	add	local09, #4
02540     17 FB 61 FC | 	wrlong	result1, local09
02544                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02544     11 2F 02 F6 | 	mov	local09, local03
02548     03 2E 66 F0 | 	shl	local09, #3
0254c     54 00 00 FF 
02550     F0 E5 05 F1 | 	add	objptr, ##43504
02554     F2 2E 02 F1 | 	add	local09, objptr
02558     04 2E 06 F1 | 	add	local09, #4
0255c     17 33 02 FB | 	rdlong	local11, local09
02560     01 32 56 F2 | 	cmps	local11, #1 wc
02564     54 00 00 FF 
02568     F0 E5 85 F1 | 	sub	objptr, ##43504
0256c     EC 05 90 3D |  if_ae	jmp	#LR__0128
02570     11 2F 02 F6 | 	mov	local09, local03
02574     03 2E 66 F0 | 	shl	local09, #3
02578     54 00 00 FF 
0257c     F0 E5 05 F1 | 	add	objptr, ##43504
02580     F2 2E 02 F1 | 	add	local09, objptr
02584     11 35 02 F6 | 	mov	local12, local03
02588     03 34 66 F0 | 	shl	local12, #3
0258c     F2 4A 02 F6 | 	mov	local23, objptr
02590     F2 34 02 F1 | 	add	local12, objptr
02594     1A 13 02 FB | 	rdlong	arg01, local12
02598     54 00 00 FF 
0259c     F0 E5 85 F1 | 	sub	objptr, ##43504
025a0     B8 0D B0 FD | 	call	#_isoperator
025a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
025a8     04 2E 06 F1 | 	add	local09, #4
025ac     17 FB 61 FC | 	wrlong	result1, local09
025b0                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
025b0     11 2F 02 F6 | 	mov	local09, local03
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     54 00 00 FF 
025bc     F0 E5 05 F1 | 	add	objptr, ##43504
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     04 2E 06 F1 | 	add	local09, #4
025c8     17 33 02 FB | 	rdlong	local11, local09
025cc     01 32 56 F2 | 	cmps	local11, #1 wc
025d0     54 00 00 FF 
025d4     F0 E5 85 F1 | 	sub	objptr, ##43504
025d8     80 05 90 3D |  if_ae	jmp	#LR__0128
025dc     11 2F 02 F6 | 	mov	local09, local03
025e0     03 2E 66 F0 | 	shl	local09, #3
025e4     54 00 00 FF 
025e8     F0 E5 05 F1 | 	add	objptr, ##43504
025ec     F2 2E 02 F1 | 	add	local09, objptr
025f0     11 35 02 F6 | 	mov	local12, local03
025f4     03 34 66 F0 | 	shl	local12, #3
025f8     F2 4A 02 F6 | 	mov	local23, objptr
025fc     F2 34 02 F1 | 	add	local12, objptr
02600     1A 13 02 FB | 	rdlong	arg01, local12
02604     54 00 00 FF 
02608     F0 E5 85 F1 | 	sub	objptr, ##43504
0260c                 | ' 
0260c                 | ' select case s
0260c     5A 01 00 FF 
02610     EC 15 06 F6 | 	mov	arg02, ##@LR__4671
02614     50 98 B1 FD | 	call	#__system___string_cmp
02618     00 FA 0D F2 | 	cmp	result1, #0 wz
0261c     1B FA 05 A6 |  if_e	mov	result1, #27
02620     00 FA 05 56 |  if_ne	mov	result1, #0
02624     FD FA E1 F8 | 	getbyte	result1, result1, #0
02628     04 2E 06 F1 | 	add	local09, #4
0262c     17 FB 61 FC | 	wrlong	result1, local09
02630                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02630     11 2F 02 F6 | 	mov	local09, local03
02634     03 2E 66 F0 | 	shl	local09, #3
02638     54 00 00 FF 
0263c     F0 E5 05 F1 | 	add	objptr, ##43504
02640     F2 2E 02 F1 | 	add	local09, objptr
02644     04 2E 06 F1 | 	add	local09, #4
02648     17 33 02 FB | 	rdlong	local11, local09
0264c     01 32 56 F2 | 	cmps	local11, #1 wc
02650     54 00 00 FF 
02654     F0 E5 85 F1 | 	sub	objptr, ##43504
02658     00 05 90 3D |  if_ae	jmp	#LR__0128
0265c     11 2F 02 F6 | 	mov	local09, local03
02660     03 2E 66 F0 | 	shl	local09, #3
02664     54 00 00 FF 
02668     F0 E5 05 F1 | 	add	objptr, ##43504
0266c     F2 2E 02 F1 | 	add	local09, objptr
02670     11 35 02 F6 | 	mov	local12, local03
02674     03 34 66 F0 | 	shl	local12, #3
02678     F2 4A 02 F6 | 	mov	local23, objptr
0267c     F2 34 02 F1 | 	add	local12, objptr
02680     1A 13 02 FB | 	rdlong	arg01, local12
02684     54 00 00 FF 
02688     F0 E5 85 F1 | 	sub	objptr, ##43504
0268c     18 15 B0 FD | 	call	#_iscommand
02690     FD FA E1 F8 | 	getbyte	result1, result1, #0
02694     04 2E 06 F1 | 	add	local09, #4
02698     17 FB 61 FC | 	wrlong	result1, local09
0269c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
0269c     11 2F 02 F6 | 	mov	local09, local03
026a0     03 2E 66 F0 | 	shl	local09, #3
026a4     54 00 00 FF 
026a8     F0 E5 05 F1 | 	add	objptr, ##43504
026ac     F2 2E 02 F1 | 	add	local09, objptr
026b0     04 2E 06 F1 | 	add	local09, #4
026b4     17 33 02 FB | 	rdlong	local11, local09
026b8     01 32 56 F2 | 	cmps	local11, #1 wc
026bc     54 00 00 FF 
026c0     F0 E5 85 F1 | 	sub	objptr, ##43504
026c4     94 04 90 3D |  if_ae	jmp	#LR__0128
026c8     11 2F 02 F6 | 	mov	local09, local03
026cc     03 2E 66 F0 | 	shl	local09, #3
026d0     54 00 00 FF 
026d4     F0 E5 05 F1 | 	add	objptr, ##43504
026d8     F2 2E 02 F1 | 	add	local09, objptr
026dc     11 35 02 F6 | 	mov	local12, local03
026e0     03 34 66 F0 | 	shl	local12, #3
026e4     F2 4A 02 F6 | 	mov	local23, objptr
026e8     F2 34 02 F1 | 	add	local12, objptr
026ec     1A 13 02 FB | 	rdlong	arg01, local12
026f0     54 00 00 FF 
026f4     F0 E5 85 F1 | 	sub	objptr, ##43504
026f8     2C 20 B0 FD | 	call	#_isfunction
026fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02700     04 2E 06 F1 | 	add	local09, #4
02704     17 FB 61 FC | 	wrlong	result1, local09
02708                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
02708     11 2F 02 F6 | 	mov	local09, local03
0270c     03 2E 66 F0 | 	shl	local09, #3
02710     54 00 00 FF 
02714     F0 E5 05 F1 | 	add	objptr, ##43504
02718     F2 2E 02 F1 | 	add	local09, objptr
0271c     04 2E 06 F1 | 	add	local09, #4
02720     17 33 02 FB | 	rdlong	local11, local09
02724     01 32 56 F2 | 	cmps	local11, #1 wc
02728     54 00 00 FF 
0272c     F0 E5 85 F1 | 	sub	objptr, ##43504
02730     28 04 90 3D |  if_ae	jmp	#LR__0128
02734     11 2F 02 F6 | 	mov	local09, local03
02738     03 2E 66 F0 | 	shl	local09, #3
0273c     54 00 00 FF 
02740     F0 E5 05 F1 | 	add	objptr, ##43504
02744     F2 2E 02 F1 | 	add	local09, objptr
02748     11 31 02 F6 | 	mov	local10, local03
0274c     18 37 02 F6 | 	mov	local13, local10
02750     03 36 66 F0 | 	shl	local13, #3
02754     F2 34 02 F6 | 	mov	local12, objptr
02758     F2 36 02 F1 | 	add	local13, objptr
0275c     1B 13 02 FB | 	rdlong	arg01, local13
02760     54 00 00 FF 
02764     F0 E5 85 F1 | 	sub	objptr, ##43504
02768     D0 0E B0 FD | 	call	#_isnotename
0276c     04 2E 06 F1 | 	add	local09, #4
02770     17 FB 61 FC | 	wrlong	result1, local09
02774                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02774                 | ' if lparts(i).token>0 then 
02774     11 2F 02 F6 | 	mov	local09, local03
02778     03 2E 66 F0 | 	shl	local09, #3
0277c     54 00 00 FF 
02780     F0 E5 05 F1 | 	add	objptr, ##43504
02784     F2 2E 02 F1 | 	add	local09, objptr
02788     04 2E 06 F1 | 	add	local09, #4
0278c     17 33 02 FB | 	rdlong	local11, local09
02790     01 32 56 F2 | 	cmps	local11, #1 wc
02794     54 00 00 FF 
02798     F0 E5 85 F1 | 	sub	objptr, ##43504
0279c     88 00 90 CD |  if_b	jmp	#LR__0120
027a0     11 27 02 F6 | 	mov	local05, local03
027a4     03 26 66 F0 | 	shl	local05, #3
027a8     54 00 00 FF 
027ac     F0 E5 05 F1 | 	add	objptr, ##43504
027b0     F2 26 02 F1 | 	add	local05, objptr
027b4     04 26 06 F1 | 	add	local05, #4
027b8     13 33 02 FB | 	rdlong	local11, local05
027bc     19 13 02 F6 | 	mov	arg01, local11
027c0     54 00 00 FF 
027c4     F0 E5 85 F1 | 	sub	objptr, ##43504
027c8     D4 5B B1 FD | 	call	#_getnoteval
027cc     FD 62 02 F6 | 	mov	local35, result1
027d0     11 2F 02 F6 | 	mov	local09, local03
027d4     03 2E 66 F0 | 	shl	local09, #3
027d8     54 00 00 FF 
027dc     F0 E5 05 F1 | 	add	objptr, ##43504
027e0     F2 2E 02 F1 | 	add	local09, objptr
027e4     31 13 02 F6 | 	mov	arg01, local35
027e8     54 00 00 FF 
027ec     F0 E5 85 F1 | 	sub	objptr, ##43504
027f0     88 B8 B1 FD | 	call	#__system__str_S
027f4     17 FB 61 FC | 	wrlong	result1, local09
027f8     11 25 02 F6 | 	mov	local04, local03
027fc     12 2F 02 F6 | 	mov	local09, local04
02800     03 2E 66 F0 | 	shl	local09, #3
02804     54 00 00 FF 
02808     F0 E5 05 F1 | 	add	objptr, ##43504
0280c     F2 2E 02 F1 | 	add	local09, objptr
02810     04 2E 06 F1 | 	add	local09, #4
02814     01 00 80 FF 
02818     17 05 68 FC | 	wrlong	##514, local09
0281c     54 00 00 FF 
02820     F0 E5 85 F1 | 	sub	objptr, ##43504
02824     34 03 90 FD | 	jmp	#LR__0128
02828                 | LR__0120
02828     11 27 02 F6 | 	mov	local05, local03
0282c     03 26 66 F0 | 	shl	local05, #3
02830     54 00 00 FF 
02834     F0 E5 05 F1 | 	add	objptr, ##43504
02838     F2 26 02 F1 | 	add	local05, objptr
0283c     13 13 02 FB | 	rdlong	arg01, local05
02840     54 00 00 FF 
02844     F0 E5 85 F1 | 	sub	objptr, ##43504
02848     10 25 B0 FD | 	call	#_isnum
0284c     FD 1E 02 F6 | 	mov	local01, result1
02850     7B 00 00 FF 
02854     E0 E4 05 F1 | 	add	objptr, ##63200
02858     F2 1E 62 FC | 	wrlong	local01, objptr
0285c     11 27 02 F6 | 	mov	local05, local03
02860     03 26 66 F0 | 	shl	local05, #3
02864     26 00 00 FF 
02868     F0 E4 85 F1 | 	sub	objptr, ##19696
0286c     F2 26 02 F1 | 	add	local05, objptr
02870     13 13 02 FB | 	rdlong	arg01, local05
02874     54 00 00 FF 
02878     F0 E5 85 F1 | 	sub	objptr, ##43504
0287c     B4 27 B0 FD | 	call	#_isint
02880     FD 1E 02 F6 | 	mov	local01, result1
02884     7B 00 00 FF 
02888     E4 E4 05 F1 | 	add	objptr, ##63204
0288c     F2 1E 62 FC | 	wrlong	local01, objptr
02890     11 27 02 F6 | 	mov	local05, local03
02894     03 26 66 F0 | 	shl	local05, #3
02898     26 00 00 FF 
0289c     F4 E4 85 F1 | 	sub	objptr, ##19700
028a0     F2 28 02 F6 | 	mov	local06, objptr
028a4     F2 26 02 F1 | 	add	local05, objptr
028a8     13 13 02 FB | 	rdlong	arg01, local05
028ac     54 00 00 FF 
028b0     F0 E5 85 F1 | 	sub	objptr, ##43504
028b4     D4 28 B0 FD | 	call	#_isdec
028b8     7B 00 00 FF 
028bc     E8 E4 05 F1 | 	add	objptr, ##63208
028c0     F2 FA 61 FC | 	wrlong	result1, objptr
028c4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028c4     08 E4 85 F1 | 	sub	objptr, #8
028c8     F2 1E 0A FB | 	rdlong	local01, objptr wz
028cc     7B 00 00 FF 
028d0     E0 E4 85 F1 | 	sub	objptr, ##63200
028d4     60 00 90 AD |  if_e	jmp	#LR__0121
028d8     7B 00 00 FF 
028dc     E4 E4 05 F1 | 	add	objptr, ##63204
028e0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028e4     7B 00 00 FF 
028e8     E4 E4 85 F1 | 	sub	objptr, ##63204
028ec     48 00 90 AD |  if_e	jmp	#LR__0121
028f0     7B 00 00 FF 
028f4     E8 E4 05 F1 | 	add	objptr, ##63208
028f8     F2 32 0A FB | 	rdlong	local11, objptr wz
028fc     7B 00 00 FF 
02900     E8 E4 85 F1 | 	sub	objptr, ##63208
02904     30 00 90 AD |  if_e	jmp	#LR__0121
02908     11 25 02 F6 | 	mov	local04, local03
0290c     12 2F 02 F6 | 	mov	local09, local04
02910     03 2E 66 F0 | 	shl	local09, #3
02914     54 00 00 FF 
02918     F0 E5 05 F1 | 	add	objptr, ##43504
0291c     F2 2E 02 F1 | 	add	local09, objptr
02920     04 2E 06 F1 | 	add	local09, #4
02924     01 00 80 FF 
02928     17 01 68 FC | 	wrlong	##512, local09
0292c     54 00 00 FF 
02930     F0 E5 85 F1 | 	sub	objptr, ##43504
02934     24 02 90 FD | 	jmp	#LR__0128
02938                 | LR__0121
02938                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02938     7B 00 00 FF 
0293c     E0 E4 05 F1 | 	add	objptr, ##63200
02940     F2 1E 0A FB | 	rdlong	local01, objptr wz
02944     7B 00 00 FF 
02948     E0 E4 85 F1 | 	sub	objptr, ##63200
0294c     64 00 90 AD |  if_e	jmp	#LR__0122
02950     7B 00 00 FF 
02954     E4 E4 05 F1 | 	add	objptr, ##63204
02958     F2 2E 0A FB | 	rdlong	local09, objptr wz
0295c     7B 00 00 FF 
02960     E4 E4 85 F1 | 	sub	objptr, ##63204
02964     7B 00 00 5F 
02968     E8 E4 05 51 |  if_ne	add	objptr, ##63208
0296c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02970     7B 00 00 5F 
02974     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
02978     19 29 22 56 |  if_ne	not	local06, local11
0297c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02980     30 00 90 AD |  if_e	jmp	#LR__0122
02984     11 25 02 F6 | 	mov	local04, local03
02988     12 2F 02 F6 | 	mov	local09, local04
0298c     03 2E 66 F0 | 	shl	local09, #3
02990     54 00 00 FF 
02994     F0 E5 05 F1 | 	add	objptr, ##43504
02998     F2 2E 02 F1 | 	add	local09, objptr
0299c     04 2E 06 F1 | 	add	local09, #4
029a0     01 00 80 FF 
029a4     17 03 68 FC | 	wrlong	##513, local09
029a8     54 00 00 FF 
029ac     F0 E5 85 F1 | 	sub	objptr, ##43504
029b0     A8 01 90 FD | 	jmp	#LR__0128
029b4                 | LR__0122
029b4                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
029b4     7B 00 00 FF 
029b8     E0 E4 05 F1 | 	add	objptr, ##63200
029bc     F2 1E 0A FB | 	rdlong	local01, objptr wz
029c0     7B 00 00 FF 
029c4     E0 E4 85 F1 | 	sub	objptr, ##63200
029c8     7B 00 00 5F 
029cc     E4 E4 05 51 |  if_ne	add	objptr, ##63204
029d0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029d4     7B 00 00 5F 
029d8     E4 E4 85 51 |  if_ne	sub	objptr, ##63204
029dc     17 2F 22 56 |  if_ne	not	local09, local09
029e0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029e4     7B 00 00 5F 
029e8     E8 E4 05 51 |  if_ne	add	objptr, ##63208
029ec     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029f0     7B 00 00 5F 
029f4     E8 E4 85 51 |  if_ne	sub	objptr, ##63208
029f8     19 29 22 56 |  if_ne	not	local06, local11
029fc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02a00     30 00 90 AD |  if_e	jmp	#LR__0123
02a04     11 25 02 F6 | 	mov	local04, local03
02a08     12 2F 02 F6 | 	mov	local09, local04
02a0c     03 2E 66 F0 | 	shl	local09, #3
02a10     54 00 00 FF 
02a14     F0 E5 05 F1 | 	add	objptr, ##43504
02a18     F2 2E 02 F1 | 	add	local09, objptr
02a1c     04 2E 06 F1 | 	add	local09, #4
02a20     01 00 80 FF 
02a24     17 05 68 FC | 	wrlong	##514, local09
02a28     54 00 00 FF 
02a2c     F0 E5 85 F1 | 	sub	objptr, ##43504
02a30     28 01 90 FD | 	jmp	#LR__0128
02a34                 | LR__0123
02a34                 | ' 
02a34                 | ' if isstring(lparts(i).part$) then 
02a34     11 27 02 F6 | 	mov	local05, local03
02a38     03 26 66 F0 | 	shl	local05, #3
02a3c     54 00 00 FF 
02a40     F0 E5 05 F1 | 	add	objptr, ##43504
02a44     F2 26 02 F1 | 	add	local05, objptr
02a48     13 13 02 FB | 	rdlong	arg01, local05
02a4c     54 00 00 FF 
02a50     F0 E5 85 F1 | 	sub	objptr, ##43504
02a54     F4 27 B0 FD | 	call	#_isstring
02a58     00 FA 0D F2 | 	cmp	result1, #0 wz
02a5c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a60     11 2F 02 F6 | 	mov	local09, local03
02a64     03 2E 66 F0 | 	shl	local09, #3
02a68     54 00 00 FF 
02a6c     F0 E5 05 F1 | 	add	objptr, ##43504
02a70     F2 2E 02 F1 | 	add	local09, objptr
02a74     04 2E 06 F1 | 	add	local09, #4
02a78     01 00 80 FF 
02a7c     17 07 68 FC | 	wrlong	##515, local09
02a80     11 25 02 F6 | 	mov	local04, local03
02a84     12 2F 02 F6 | 	mov	local09, local04
02a88     03 2E 66 F0 | 	shl	local09, #3
02a8c     F2 2E 02 F1 | 	add	local09, objptr
02a90     11 37 02 F6 | 	mov	local13, local03
02a94     03 36 66 F0 | 	shl	local13, #3
02a98     F2 36 02 F1 | 	add	local13, objptr
02a9c     1B 29 02 FB | 	rdlong	local06, local13
02aa0     02 32 06 F6 | 	mov	local11, #2
02aa4     11 4B 02 F6 | 	mov	local23, local03
02aa8     25 43 02 F6 | 	mov	local19, local23
02aac     21 45 02 F6 | 	mov	local20, local19
02ab0     03 44 66 F0 | 	shl	local20, #3
02ab4     F2 46 02 F6 | 	mov	local21, objptr
02ab8     F2 44 02 F1 | 	add	local20, objptr
02abc     22 13 02 FB | 	rdlong	arg01, local20
02ac0     54 00 00 FF 
02ac4     F0 E5 85 F1 | 	sub	objptr, ##43504
02ac8     09 2B 02 F6 | 	mov	local07, arg01
02acc     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ad0                 | LR__0124
02ad0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ad4     01 2A 06 51 |  if_ne	add	local07, #1
02ad8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02adc                 | LR__0125
02adc     09 2B 82 F1 | 	sub	local07, arg01
02ae0     15 35 02 F6 | 	mov	local12, local07
02ae4     1A 17 02 F6 | 	mov	arg03, local12
02ae8     02 16 86 F1 | 	sub	arg03, #2
02aec     14 13 02 F6 | 	mov	arg01, local06
02af0     19 15 02 F6 | 	mov	arg02, local11
02af4     A4 B4 B1 FD | 	call	#__system__Mid_S
02af8     17 FB 61 FC | 	wrlong	result1, local09
02afc     5C 00 90 FD | 	jmp	#LR__0128
02b00                 | LR__0126
02b00                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02b00     11 25 02 F6 | 	mov	local04, local03
02b04     12 27 02 F6 | 	mov	local05, local04
02b08     03 26 66 F0 | 	shl	local05, #3
02b0c     54 00 00 FF 
02b10     F0 E5 05 F1 | 	add	objptr, ##43504
02b14     F2 26 02 F1 | 	add	local05, objptr
02b18     13 13 02 FB | 	rdlong	arg01, local05
02b1c     54 00 00 FF 
02b20     F0 E5 85 F1 | 	sub	objptr, ##43504
02b24     C0 1F B0 FD | 	call	#_isname
02b28     00 FA 4D F2 | 	cmps	result1, #0 wz
02b2c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b30     11 25 02 F6 | 	mov	local04, local03
02b34     12 2F 02 F6 | 	mov	local09, local04
02b38     03 2E 66 F0 | 	shl	local09, #3
02b3c     54 00 00 FF 
02b40     F0 E5 05 F1 | 	add	objptr, ##43504
02b44     F2 2E 02 F1 | 	add	local09, objptr
02b48     04 2E 06 F1 | 	add	local09, #4
02b4c     01 00 80 FF 
02b50     17 09 68 FC | 	wrlong	##516, local09
02b54     54 00 00 FF 
02b58     F0 E5 85 F1 | 	sub	objptr, ##43504
02b5c                 | LR__0127
02b5c                 | LR__0128
02b5c     01 22 06 F1 | 	add	local03, #1
02b60     98 F9 9F FD | 	jmp	#LR__0119
02b64                 | LR__0129
02b64     1D 2F 02 F6 | 	mov	local09, local15
02b68     03 2E 66 F0 | 	shl	local09, #3
02b6c     54 00 00 FF 
02b70     F0 E5 05 F1 | 	add	objptr, ##43504
02b74     F2 2E 02 F1 | 	add	local09, objptr
02b78     04 2E 06 F1 | 	add	local09, #4
02b7c     17 FD 6B FC | 	wrlong	#510, local09
02b80     1D 2F 02 F6 | 	mov	local09, local15
02b84     03 2E 66 F0 | 	shl	local09, #3
02b88     F2 26 02 F6 | 	mov	local05, objptr
02b8c     F2 2E 02 F1 | 	add	local09, objptr
02b90     5A 01 00 FF 
02b94     11 29 06 F6 | 	mov	local06, ##@LR__4602
02b98     17 29 62 FC | 	wrlong	local06, local09
02b9c     10 00 00 FF 
02ba0     54 E4 05 F1 | 	add	objptr, ##8276
02ba4     F2 3A 62 FC | 	wrlong	local15, objptr
02ba8                 | ' 
02ba8                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02ba8                 | ' 
02ba8                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02ba8                 | '  
02ba8                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02ba8     16 00 00 FF 
02bac     94 E4 05 F1 | 	add	objptr, ##11412
02bb0     F2 12 02 FB | 	rdlong	arg01, objptr
02bb4     7B 00 00 FF 
02bb8     D8 E4 85 F1 | 	sub	objptr, ##63192
02bbc     5A 01 00 FF 
02bc0     12 2F 06 F6 | 	mov	local09, ##@LR__4603
02bc4     17 15 02 F6 | 	mov	arg02, local09
02bc8     9C 92 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     EC 00 90 AD |  if_e	jmp	#LR__0130
02bd4     7B 00 00 FF 
02bd8     D8 E4 05 F1 | 	add	objptr, ##63192
02bdc     F2 12 02 FB | 	rdlong	arg01, objptr
02be0     7B 00 00 FF 
02be4     D8 E4 85 F1 | 	sub	objptr, ##63192
02be8     5A 01 00 FF 
02bec     17 27 06 F6 | 	mov	local05, ##@LR__4604
02bf0     13 2F 02 F6 | 	mov	local09, local05
02bf4     17 15 02 F6 | 	mov	arg02, local09
02bf8     6C 92 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     BC 00 90 AD |  if_e	jmp	#LR__0130
02c04     7B 00 00 FF 
02c08     D8 E4 05 F1 | 	add	objptr, ##63192
02c0c     F2 12 02 FB | 	rdlong	arg01, objptr
02c10     7B 00 00 FF 
02c14     D8 E4 85 F1 | 	sub	objptr, ##63192
02c18     5A 01 00 FF 
02c1c     1C 29 06 F6 | 	mov	local06, ##@LR__4605
02c20     14 27 02 F6 | 	mov	local05, local06
02c24     13 15 02 F6 | 	mov	arg02, local05
02c28     3C 92 B1 FD | 	call	#__system___string_cmp
02c2c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c30     8C 00 90 AD |  if_e	jmp	#LR__0130
02c34     7B 00 00 FF 
02c38     D8 E4 05 F1 | 	add	objptr, ##63192
02c3c     F2 12 02 FB | 	rdlong	arg01, objptr
02c40     7B 00 00 FF 
02c44     D8 E4 85 F1 | 	sub	objptr, ##63192
02c48     5A 01 00 FF 
02c4c     21 33 06 F6 | 	mov	local11, ##@LR__4606
02c50     19 29 02 F6 | 	mov	local06, local11
02c54     14 15 02 F6 | 	mov	arg02, local06
02c58     0C 92 B1 FD | 	call	#__system___string_cmp
02c5c     FD 26 0A F6 | 	mov	local05, result1 wz
02c60     5C 00 90 AD |  if_e	jmp	#LR__0130
02c64     7B 00 00 FF 
02c68     D8 E4 05 F1 | 	add	objptr, ##63192
02c6c     F2 12 02 FB | 	rdlong	arg01, objptr
02c70     7B 00 00 FF 
02c74     D8 E4 85 F1 | 	sub	objptr, ##63192
02c78     5A 01 00 FF 
02c7c     25 33 06 F6 | 	mov	local11, ##@LR__4607
02c80     19 15 02 F6 | 	mov	arg02, local11
02c84     E0 91 B1 FD | 	call	#__system___string_cmp
02c88     FD 28 0A F6 | 	mov	local06, result1 wz
02c8c     30 00 90 AD |  if_e	jmp	#LR__0130
02c90     7B 00 00 FF 
02c94     D8 E4 05 F1 | 	add	objptr, ##63192
02c98     F2 12 02 FB | 	rdlong	arg01, objptr
02c9c     7B 00 00 FF 
02ca0     D8 E4 85 F1 | 	sub	objptr, ##63192
02ca4     5A 01 00 FF 
02ca8     28 37 06 F6 | 	mov	local13, ##@LR__4608
02cac     1B 31 02 F6 | 	mov	local10, local13
02cb0     18 15 02 F6 | 	mov	arg02, local10
02cb4     B0 91 B1 FD | 	call	#__system___string_cmp
02cb8     FD 32 0A F6 | 	mov	local11, result1 wz
02cbc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cc0                 | LR__0130
02cc0     7B 00 00 FF 
02cc4     D4 E4 05 F1 | 	add	objptr, ##63188
02cc8     F2 36 02 FB | 	rdlong	local13, objptr
02ccc     1B 31 02 F6 | 	mov	local10, local13
02cd0     01 30 06 F1 | 	add	local10, #1
02cd4     18 35 02 F6 | 	mov	local12, local10
02cd8     1A 4B 02 F6 | 	mov	local23, local12
02cdc     03 4A 66 F0 | 	shl	local23, #3
02ce0     26 00 00 FF 
02ce4     E4 E4 85 F1 | 	sub	objptr, ##19684
02ce8     F2 42 02 F6 | 	mov	local19, objptr
02cec     F2 4A 02 F1 | 	add	local23, objptr
02cf0     04 4A 06 F1 | 	add	local23, #4
02cf4     25 47 02 FB | 	rdlong	local21, local23
02cf8     04 4A 86 F1 | 	sub	local23, #4
02cfc     23 45 02 F6 | 	mov	local20, local21
02d00     01 00 00 FF 
02d04     04 44 0E F2 | 	cmp	local20, ##516 wz
02d08     54 00 00 FF 
02d0c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d10     48 00 90 5D |  if_ne	jmp	#LR__0131
02d14     7B 00 00 FF 
02d18     D4 E4 05 F1 | 	add	objptr, ##63188
02d1c     F2 2E 02 FB | 	rdlong	local09, objptr
02d20     01 2E 06 F1 | 	add	local09, #1
02d24     17 27 02 F6 | 	mov	local05, local09
02d28     03 26 66 F0 | 	shl	local05, #3
02d2c     26 00 00 FF 
02d30     E4 E4 85 F1 | 	sub	objptr, ##19684
02d34     F2 28 02 F6 | 	mov	local06, objptr
02d38     F2 26 02 F1 | 	add	local05, objptr
02d3c     01 00 00 FF 
02d40     03 32 06 F6 | 	mov	local11, ##515
02d44     04 26 06 F1 | 	add	local05, #4
02d48     01 00 80 FF 
02d4c     13 07 68 FC | 	wrlong	##515, local05
02d50     04 26 86 F1 | 	sub	local05, #4
02d54     54 00 00 FF 
02d58     F0 E5 85 F1 | 	sub	objptr, ##43504
02d5c                 | LR__0131
02d5c                 | ' 
02d5c                 | ' ' abbreviated command has to be at the position addptr
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' 
02d5c                 | ' '2b determine a type of the line
02d5c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d5c     54 00 00 FF 
02d60     F0 E5 05 F1 | 	add	objptr, ##43504
02d64     F2 12 02 FB | 	rdlong	arg01, objptr
02d68     54 00 00 FF 
02d6c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d70     18 24 B0 FD | 	call	#_isdec
02d74     00 FA 0D F2 | 	cmp	result1, #0 wz
02d78     30 00 90 AD |  if_e	jmp	#LR__0132
02d7c     54 00 00 FF 
02d80     F0 E5 05 F1 | 	add	objptr, ##43504
02d84     F2 12 02 FB | 	rdlong	arg01, objptr
02d88     54 00 00 FF 
02d8c     F0 E5 85 F1 | 	sub	objptr, ##43504
02d90     00 14 06 F6 | 	mov	arg02, #0
02d94     9C C2 B1 FD | 	call	#__system____builtin_atoi
02d98     7B 00 00 FF 
02d9c     74 E4 05 F1 | 	add	objptr, ##63092
02da0     F2 FA 61 FC | 	wrlong	result1, objptr
02da4     7B 00 00 FF 
02da8     74 E4 85 F1 | 	sub	objptr, ##63092
02dac                 | LR__0132
02dac                 | ' 
02dac                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dac     7B 00 00 FF 
02db0     74 E4 05 F1 | 	add	objptr, ##63092
02db4     F2 1E 02 FB | 	rdlong	local01, objptr
02db8     7B 00 00 FF 
02dbc     74 E4 85 F1 | 	sub	objptr, ##63092
02dc0     01 1E 16 F2 | 	cmp	local01, #1 wc
02dc4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dc8     01 3A 0E F2 | 	cmp	local15, #1 wz
02dcc     57 00 00 AF 
02dd0     08 E4 05 A1 |  if_e	add	objptr, ##44552
02dd4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02dd8     57 00 00 AF 
02ddc     08 E4 85 A1 |  if_e	sub	objptr, ##44552
02de0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02de4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02de8     7B 00 00 FF 
02dec     74 E4 05 F1 | 	add	objptr, ##63092
02df0     F2 12 02 FB | 	rdlong	arg01, objptr
02df4     7B 00 00 FF 
02df8     74 E4 85 F1 | 	sub	objptr, ##63092
02dfc     B0 24 B0 FD | 	call	#_deleteline
02e00     4C 05 90 FD | 	jmp	#LR__0150
02e04                 | LR__0133
02e04                 | ' 
02e04                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e04     7B 00 00 FF 
02e08     74 E4 05 F1 | 	add	objptr, ##63092
02e0c     F2 1E 02 FB | 	rdlong	local01, objptr
02e10     7B 00 00 FF 
02e14     74 E4 85 F1 | 	sub	objptr, ##63092
02e18     01 1E 16 F2 | 	cmp	local01, #1 wc
02e1c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e20     57 00 00 FF 
02e24     08 E4 05 F1 | 	add	objptr, ##44552
02e28     F2 26 02 FB | 	rdlong	local05, objptr
02e2c     57 00 00 FF 
02e30     08 E4 85 F1 | 	sub	objptr, ##44552
02e34     13 2F 0A F6 | 	mov	local09, local05 wz
02e38     20 00 90 AD |  if_e	jmp	#LR__0134
02e3c     57 00 00 FF 
02e40     08 E4 05 F1 | 	add	objptr, ##44552
02e44     F2 32 02 FB | 	rdlong	local11, objptr
02e48     57 00 00 FF 
02e4c     08 E4 85 F1 | 	sub	objptr, ##44552
02e50     19 29 02 F6 | 	mov	local06, local11
02e54     03 28 0E F2 | 	cmp	local06, #3 wz
02e58     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e5c                 | LR__0134
02e5c     55 00 00 FF 
02e60     04 E4 05 F1 | 	add	objptr, ##43524
02e64     F2 36 02 FB | 	rdlong	local13, objptr
02e68     55 00 00 FF 
02e6c     04 E4 85 F1 | 	sub	objptr, ##43524
02e70     1B 31 02 F6 | 	mov	local10, local13
02e74     1B 30 0E F2 | 	cmp	local10, #27 wz
02e78     90 00 90 AD |  if_e	jmp	#LR__0136
02e7c     7B 00 00 FF 
02e80     74 E4 05 F1 | 	add	objptr, ##63092
02e84     F2 12 02 FB | 	rdlong	arg01, objptr
02e88     24 00 00 FF 
02e8c     6C E4 85 F1 | 	sub	objptr, ##18540
02e90     F2 16 02 FB | 	rdlong	arg03, objptr
02e94     57 00 00 FF 
02e98     08 E4 85 F1 | 	sub	objptr, ##44552
02e9c     00 14 06 F6 | 	mov	arg02, #0
02ea0     40 38 B0 FD | 	call	#_compile
02ea4     FD 20 0A F6 | 	mov	local02, result1 wz
02ea8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ea8                 | '   if err<>0 then printerror(err): goto 104
02ea8     0C 00 90 AD |  if_e	jmp	#LR__0135
02eac     10 13 02 F6 | 	mov	arg01, local02
02eb0     A4 58 B1 FD | 	call	#_printerror
02eb4     98 04 90 FD | 	jmp	#LR__0150
02eb8                 | LR__0135
02eb8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02eb8     7B 00 00 FF 
02ebc     B0 E4 05 F1 | 	add	objptr, ##63152
02ec0     F2 12 02 FB | 	rdlong	arg01, objptr
02ec4     7B 00 00 FF 
02ec8     B0 E4 85 F1 | 	sub	objptr, ##63152
02ecc     5A 01 00 FF 
02ed0     2C 15 06 F6 | 	mov	arg02, ##@LR__4609
02ed4     90 8F B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     70 04 90 AD |  if_e	jmp	#LR__0150
02ee0     7B 00 00 FF 
02ee4     B0 E4 05 F1 | 	add	objptr, ##63152
02ee8     F2 1E 02 FB | 	rdlong	local01, objptr
02eec     24 00 00 FF 
02ef0     B0 E4 85 F1 | 	sub	objptr, ##18608
02ef4     F2 1E 62 FC | 	wrlong	local01, objptr
02ef8     08 E4 05 F1 | 	add	objptr, #8
02efc     F2 08 68 FC | 	wrlong	#4, objptr
02f00     57 00 00 FF 
02f04     08 E4 85 F1 | 	sub	objptr, ##44552
02f08     64 DB 9F FD | 	jmp	#LR__0020
02f0c                 | LR__0136
02f0c                 | '       							
02f0c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f0c     7B 00 00 FF 
02f10     74 E4 05 F1 | 	add	objptr, ##63092
02f14     F2 1E 02 FB | 	rdlong	local01, objptr
02f18     7B 00 00 FF 
02f1c     74 E4 85 F1 | 	sub	objptr, ##63092
02f20     01 1E 16 F2 | 	cmp	local01, #1 wc
02f24     EC 00 90 CD |  if_b	jmp	#LR__0139
02f28     57 00 00 FF 
02f2c     08 E4 05 F1 | 	add	objptr, ##44552
02f30     F2 26 02 FB | 	rdlong	local05, objptr
02f34     57 00 00 FF 
02f38     08 E4 85 F1 | 	sub	objptr, ##44552
02f3c     01 26 0E F2 | 	cmp	local05, #1 wz
02f40     20 00 90 AD |  if_e	jmp	#LR__0137
02f44     57 00 00 FF 
02f48     08 E4 05 F1 | 	add	objptr, ##44552
02f4c     F2 32 02 FB | 	rdlong	local11, objptr
02f50     57 00 00 FF 
02f54     08 E4 85 F1 | 	sub	objptr, ##44552
02f58     19 29 02 F6 | 	mov	local06, local11
02f5c     02 28 0E F2 | 	cmp	local06, #2 wz
02f60     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f64                 | LR__0137
02f64     54 00 00 FF 
02f68     FC E5 05 F1 | 	add	objptr, ##43516
02f6c     F2 36 02 FB | 	rdlong	local13, objptr
02f70     54 00 00 FF 
02f74     FC E5 85 F1 | 	sub	objptr, ##43516
02f78     1B 31 02 F6 | 	mov	local10, local13
02f7c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f80     90 00 90 AD |  if_e	jmp	#LR__0139
02f84     7B 00 00 FF 
02f88     74 E4 05 F1 | 	add	objptr, ##63092
02f8c     F2 12 02 FB | 	rdlong	arg01, objptr
02f90     24 00 00 FF 
02f94     6C E4 85 F1 | 	sub	objptr, ##18540
02f98     F2 16 02 FB | 	rdlong	arg03, objptr
02f9c     57 00 00 FF 
02fa0     08 E4 85 F1 | 	sub	objptr, ##44552
02fa4     00 14 06 F6 | 	mov	arg02, #0
02fa8     38 37 B0 FD | 	call	#_compile
02fac     FD 20 0A F6 | 	mov	local02, result1 wz
02fb0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fb0                 | '   if err<>0 then printerror(err): goto 104
02fb0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fb4     10 13 02 F6 | 	mov	arg01, local02
02fb8     9C 57 B1 FD | 	call	#_printerror
02fbc     90 03 90 FD | 	jmp	#LR__0150
02fc0                 | LR__0138
02fc0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fc0     7B 00 00 FF 
02fc4     B0 E4 05 F1 | 	add	objptr, ##63152
02fc8     F2 12 02 FB | 	rdlong	arg01, objptr
02fcc     7B 00 00 FF 
02fd0     B0 E4 85 F1 | 	sub	objptr, ##63152
02fd4     5A 01 00 FF 
02fd8     2D 15 06 F6 | 	mov	arg02, ##@LR__4610
02fdc     88 8E B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     68 03 90 AD |  if_e	jmp	#LR__0150
02fe8     7B 00 00 FF 
02fec     B0 E4 05 F1 | 	add	objptr, ##63152
02ff0     F2 1E 02 FB | 	rdlong	local01, objptr
02ff4     24 00 00 FF 
02ff8     B0 E4 85 F1 | 	sub	objptr, ##18608
02ffc     F2 1E 62 FC | 	wrlong	local01, objptr
03000     08 E4 05 F1 | 	add	objptr, #8
03004     F2 08 68 FC | 	wrlong	#4, objptr
03008     57 00 00 FF 
0300c     08 E4 85 F1 | 	sub	objptr, ##44552
03010     5C DA 9F FD | 	jmp	#LR__0020
03014                 | LR__0139
03014                 | ' 							 
03014                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03014     7B 00 00 FF 
03018     74 E4 05 F1 | 	add	objptr, ##63092
0301c     F2 1E 02 FB | 	rdlong	local01, objptr
03020     7B 00 00 FF 
03024     74 E4 85 F1 | 	sub	objptr, ##63092
03028     01 1E 16 F2 | 	cmp	local01, #1 wc
0302c     D4 00 90 CD |  if_b	jmp	#LR__0141
03030     57 00 00 FF 
03034     08 E4 05 F1 | 	add	objptr, ##44552
03038     F2 26 0A FB | 	rdlong	local05, objptr wz
0303c     57 00 00 FF 
03040     08 E4 85 F1 | 	sub	objptr, ##44552
03044     20 00 90 AD |  if_e	jmp	#LR__0140
03048     57 00 00 FF 
0304c     08 E4 05 F1 | 	add	objptr, ##44552
03050     F2 32 02 FB | 	rdlong	local11, objptr
03054     57 00 00 FF 
03058     08 E4 85 F1 | 	sub	objptr, ##44552
0305c     19 29 02 F6 | 	mov	local06, local11
03060     03 28 0E F2 | 	cmp	local06, #3 wz
03064     9C 00 90 5D |  if_ne	jmp	#LR__0141
03068                 | LR__0140
03068     55 00 00 FF 
0306c     04 E4 05 F1 | 	add	objptr, ##43524
03070     F2 36 02 FB | 	rdlong	local13, objptr
03074     55 00 00 FF 
03078     04 E4 85 F1 | 	sub	objptr, ##43524
0307c     1B 31 02 F6 | 	mov	local10, local13
03080     1B 30 0E F2 | 	cmp	local10, #27 wz
03084     7C 00 90 5D |  if_ne	jmp	#LR__0141
03088     7B 00 00 FF 
0308c     74 E4 05 F1 | 	add	objptr, ##63092
03090     F2 12 02 FB | 	rdlong	arg01, objptr
03094     24 00 00 FF 
03098     6C E4 85 F1 | 	sub	objptr, ##18540
0309c     F2 16 02 FB | 	rdlong	arg03, objptr
030a0     57 00 00 FF 
030a4     08 E4 85 F1 | 	sub	objptr, ##44552
030a8     00 14 06 F6 | 	mov	arg02, #0
030ac     04 37 B0 FD | 	call	#_compile_assign
030b0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030b0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030b0     7B 00 00 FF 
030b4     B0 E4 05 F1 | 	add	objptr, ##63152
030b8     F2 12 02 FB | 	rdlong	arg01, objptr
030bc     7B 00 00 FF 
030c0     B0 E4 85 F1 | 	sub	objptr, ##63152
030c4     5A 01 00 FF 
030c8     2E 15 06 F6 | 	mov	arg02, ##@LR__4611
030cc     98 8D B1 FD | 	call	#__system___string_cmp
030d0     00 FA 0D F2 | 	cmp	result1, #0 wz
030d4     78 02 90 AD |  if_e	jmp	#LR__0150
030d8     7B 00 00 FF 
030dc     B0 E4 05 F1 | 	add	objptr, ##63152
030e0     F2 1E 02 FB | 	rdlong	local01, objptr
030e4     24 00 00 FF 
030e8     B0 E4 85 F1 | 	sub	objptr, ##18608
030ec     F2 1E 62 FC | 	wrlong	local01, objptr
030f0     08 E4 05 F1 | 	add	objptr, #8
030f4     F2 08 68 FC | 	wrlong	#4, objptr
030f8     57 00 00 FF 
030fc     08 E4 85 F1 | 	sub	objptr, ##44552
03100     6C D9 9F FD | 	jmp	#LR__0020
03104                 | LR__0141
03104                 | '     							 
03104                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03104     7B 00 00 FF 
03108     74 E4 05 F1 | 	add	objptr, ##63092
0310c     F2 1E 02 FB | 	rdlong	local01, objptr
03110     7B 00 00 FF 
03114     74 E4 85 F1 | 	sub	objptr, ##63092
03118     01 1E 16 F2 | 	cmp	local01, #1 wc
0311c     CC 00 90 CD |  if_b	jmp	#LR__0142
03120     57 00 00 FF 
03124     08 E4 05 F1 | 	add	objptr, ##44552
03128     F2 26 02 FB | 	rdlong	local05, objptr
0312c     57 00 00 FF 
03130     08 E4 85 F1 | 	sub	objptr, ##44552
03134     01 26 0E F2 | 	cmp	local05, #1 wz
03138     57 00 00 5F 
0313c     08 E4 05 51 |  if_ne	add	objptr, ##44552
03140     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03144     57 00 00 5F 
03148     08 E4 85 51 |  if_ne	sub	objptr, ##44552
0314c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03150     54 00 00 AF 
03154     FC E5 05 A1 |  if_e	add	objptr, ##43516
03158     F2 36 02 AB |  if_e	rdlong	local13, objptr
0315c     54 00 00 AF 
03160     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03164     1B 31 02 A6 |  if_e	mov	local10, local13
03168     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0316c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03170     7B 00 00 FF 
03174     74 E4 05 F1 | 	add	objptr, ##63092
03178     F2 12 02 FB | 	rdlong	arg01, objptr
0317c     24 00 00 FF 
03180     6C E4 85 F1 | 	sub	objptr, ##18540
03184     F2 16 02 FB | 	rdlong	arg03, objptr
03188     57 00 00 FF 
0318c     08 E4 85 F1 | 	sub	objptr, ##44552
03190     00 14 06 F6 | 	mov	arg02, #0
03194     1C 36 B0 FD | 	call	#_compile_assign
03198                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
03198                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
03198     7B 00 00 FF 
0319c     B0 E4 05 F1 | 	add	objptr, ##63152
031a0     F2 12 02 FB | 	rdlong	arg01, objptr
031a4     7B 00 00 FF 
031a8     B0 E4 85 F1 | 	sub	objptr, ##63152
031ac     5A 01 00 FF 
031b0     2F 15 06 F6 | 	mov	arg02, ##@LR__4612
031b4     B0 8C B1 FD | 	call	#__system___string_cmp
031b8     00 FA 0D F2 | 	cmp	result1, #0 wz
031bc     90 01 90 AD |  if_e	jmp	#LR__0150
031c0     7B 00 00 FF 
031c4     B0 E4 05 F1 | 	add	objptr, ##63152
031c8     F2 1E 02 FB | 	rdlong	local01, objptr
031cc     24 00 00 FF 
031d0     B0 E4 85 F1 | 	sub	objptr, ##18608
031d4     F2 1E 62 FC | 	wrlong	local01, objptr
031d8     08 E4 05 F1 | 	add	objptr, #8
031dc     F2 08 68 FC | 	wrlong	#4, objptr
031e0     57 00 00 FF 
031e4     08 E4 85 F1 | 	sub	objptr, ##44552
031e8     84 D8 9F FD | 	jmp	#LR__0020
031ec                 | LR__0142
031ec                 | ' 
031ec                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031ec     54 00 00 FF 
031f0     F4 E5 05 F1 | 	add	objptr, ##43508
031f4     F2 1E 02 FB | 	rdlong	local01, objptr
031f8     54 00 00 FF 
031fc     F4 E5 85 F1 | 	sub	objptr, ##43508
03200     01 00 00 FF 
03204     04 1E 0E F2 | 	cmp	local01, ##516 wz
03208     54 00 00 AF 
0320c     FC E5 05 A1 |  if_e	add	objptr, ##43516
03210     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03214     54 00 00 AF 
03218     FC E5 85 A1 |  if_e	sub	objptr, ##43516
0321c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03220     14 00 90 5D |  if_ne	jmp	#LR__0143
03224     00 12 06 F6 | 	mov	arg01, #0
03228     00 14 06 F6 | 	mov	arg02, #0
0322c     00 16 06 F6 | 	mov	arg03, #0
03230     80 35 B0 FD | 	call	#_compile_assign
03234     90 00 90 FD | 	jmp	#LR__0145
03238                 | LR__0143
03238                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03238     54 00 00 FF 
0323c     F4 E5 05 F1 | 	add	objptr, ##43508
03240     F2 1E 02 FB | 	rdlong	local01, objptr
03244     54 00 00 FF 
03248     F4 E5 85 F1 | 	sub	objptr, ##43508
0324c     01 00 00 FF 
03250     04 1E 0E F2 | 	cmp	local01, ##516 wz
03254     54 00 00 AF 
03258     FC E5 05 A1 |  if_e	add	objptr, ##43516
0325c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03260     54 00 00 AF 
03264     FC E5 85 A1 |  if_e	sub	objptr, ##43516
03268     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0326c     44 00 90 5D |  if_ne	jmp	#LR__0144
03270     00 12 06 F6 | 	mov	arg01, #0
03274     58 E5 B1 FD | 	call	#__system___getiolock_0472
03278     FD 12 02 F6 | 	mov	arg01, result1
0327c     C0 8B B1 FD | 	call	#__system___lockmem
03280     5A 01 00 FF 
03284     30 15 06 F6 | 	mov	arg02, ##@LR__4613
03288     00 12 06 F6 | 	mov	arg01, #0
0328c     00 16 06 F6 | 	mov	arg03, #0
03290     B0 98 B1 FD | 	call	#__system___basic_print_string
03294     00 12 06 F6 | 	mov	arg01, #0
03298     0A 14 06 F6 | 	mov	arg02, #10
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     48 98 B1 FD | 	call	#__system___basic_print_char
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     24 E5 B1 FD | 	call	#__system___getiolock_0472
032ac     FD 00 68 FC | 	wrlong	#0, result1
032b0     7C 00 90 FD | 	jmp	#LR__0149
032b4                 | LR__0144
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     00 14 06 F6 | 	mov	arg02, #0
032bc     00 16 06 F6 | 	mov	arg03, #0
032c0     20 34 B0 FD | 	call	#_compile
032c4     FD 20 02 F6 | 	mov	local02, result1
032c8                 | LR__0145
032c8                 | ' 
032c8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032c8                 | ' 
032c8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032c8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032c8                 | ' if err=0 then execute_line() else printerror(err)
032c8     00 20 0E F2 | 	cmp	local02, #0 wz
032cc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032d0     00 12 06 F6 | 	mov	arg01, #0
032d4     AC 6C B0 FD | 	call	#_execute_line
032d8     08 00 90 FD | 	jmp	#LR__0147
032dc                 | LR__0146
032dc     10 13 02 F6 | 	mov	arg01, local02
032e0     74 54 B1 FD | 	call	#_printerror
032e4                 | LR__0147
032e4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032e4     7B 00 00 FF 
032e8     B0 E4 05 F1 | 	add	objptr, ##63152
032ec     F2 12 02 FB | 	rdlong	arg01, objptr
032f0     7B 00 00 FF 
032f4     B0 E4 85 F1 | 	sub	objptr, ##63152
032f8     5A 01 00 FF 
032fc     5F 15 06 F6 | 	mov	arg02, ##@LR__4614
03300     64 8B B1 FD | 	call	#__system___string_cmp
03304     00 FA 0D F2 | 	cmp	result1, #0 wz
03308     24 00 90 AD |  if_e	jmp	#LR__0148
0330c     7B 00 00 FF 
03310     B0 E4 05 F1 | 	add	objptr, ##63152
03314     F2 1E 02 FB | 	rdlong	local01, objptr
03318     24 00 00 FF 
0331c     B0 E4 85 F1 | 	sub	objptr, ##18608
03320     F2 1E 62 FC | 	wrlong	local01, objptr
03324     57 00 00 FF 
03328     00 E4 85 F1 | 	sub	objptr, ##44544
0332c     40 D7 9F FD | 	jmp	#LR__0020
03330                 | LR__0148
03330                 | LR__0149
03330     5A 01 00 FF 
03334     60 13 06 F6 | 	mov	arg01, ##@LR__4615
03338                 | ' 
03338                 | ' write(text)
03338     64 7A B1 FD | 	call	#_hg010b_spin2_write
0333c                 | ' crlf
0333c     C0 7B B1 FD | 	call	#_hg010b_spin2_crlf
03340     5A 01 00 FF 
03344     61 13 06 F6 | 	mov	arg01, ##@LR__4616
03348                 | ' 
03348                 | ' write(text)
03348     54 7A B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     B0 7B B1 FD | 	call	#_hg010b_spin2_crlf
03350                 | LR__0150
03350     A7 F0 03 F6 | 	mov	ptra, fp
03354     B2 00 A0 FD | 	call	#popregs_
03358                 | _interpret_ret
03358     2D 00 64 FD | 	ret
0335c                 | 
0335c                 | ' 
0335c                 | ' 
0335c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0335c                 | ' 
0335c                 | ' function isoperator(s as string) as ubyte
0335c                 | _isoperator
0335c     01 4A 05 F6 | 	mov	COUNT_, #1
03360     A8 00 A0 FD | 	call	#pushregs_
03364                 | ' 
03364                 | ' select case s
03364     09 1F 02 F6 | 	mov	local01, arg01
03368     5A 01 00 FF 
0336c     67 15 06 F6 | 	mov	arg02, ##@LR__4617
03370     0F 13 02 F6 | 	mov	arg01, local01
03374     F0 8A B1 FD | 	call	#__system___string_cmp
03378     00 FA 0D F2 | 	cmp	result1, #0 wz
0337c     FC 01 90 AD |  if_e	jmp	#LR__0160
03380     5A 01 00 FF 
03384     69 15 06 F6 | 	mov	arg02, ##@LR__4618
03388     0F 13 02 F6 | 	mov	arg01, local01
0338c     D8 8A B1 FD | 	call	#__system___string_cmp
03390     00 FA 0D F2 | 	cmp	result1, #0 wz
03394     EC 01 90 AD |  if_e	jmp	#LR__0161
03398     5A 01 00 FF 
0339c     6B 15 06 F6 | 	mov	arg02, ##@LR__4619
033a0     0F 13 02 F6 | 	mov	arg01, local01
033a4     C0 8A B1 FD | 	call	#__system___string_cmp
033a8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ac     DC 01 90 AD |  if_e	jmp	#LR__0162
033b0     5A 01 00 FF 
033b4     6E 15 06 F6 | 	mov	arg02, ##@LR__4620
033b8     0F 13 02 F6 | 	mov	arg01, local01
033bc     A8 8A B1 FD | 	call	#__system___string_cmp
033c0     00 FA 0D F2 | 	cmp	result1, #0 wz
033c4     CC 01 90 AD |  if_e	jmp	#LR__0163
033c8     5A 01 00 FF 
033cc     72 15 06 F6 | 	mov	arg02, ##@LR__4621
033d0     0F 13 02 F6 | 	mov	arg01, local01
033d4     90 8A B1 FD | 	call	#__system___string_cmp
033d8     00 FA 0D F2 | 	cmp	result1, #0 wz
033dc     BC 01 90 AD |  if_e	jmp	#LR__0164
033e0     5A 01 00 FF 
033e4     74 15 06 F6 | 	mov	arg02, ##@LR__4622
033e8     0F 13 02 F6 | 	mov	arg01, local01
033ec     78 8A B1 FD | 	call	#__system___string_cmp
033f0     00 FA 0D F2 | 	cmp	result1, #0 wz
033f4     AC 01 90 AD |  if_e	jmp	#LR__0165
033f8     5A 01 00 FF 
033fc     76 15 06 F6 | 	mov	arg02, ##@LR__4623
03400     0F 13 02 F6 | 	mov	arg01, local01
03404     60 8A B1 FD | 	call	#__system___string_cmp
03408     00 FA 0D F2 | 	cmp	result1, #0 wz
0340c     9C 01 90 AD |  if_e	jmp	#LR__0166
03410     5A 01 00 FF 
03414     7A 15 06 F6 | 	mov	arg02, ##@LR__4624
03418     0F 13 02 F6 | 	mov	arg01, local01
0341c     48 8A B1 FD | 	call	#__system___string_cmp
03420     00 FA 0D F2 | 	cmp	result1, #0 wz
03424     8C 01 90 AD |  if_e	jmp	#LR__0167
03428     5A 01 00 FF 
0342c     7E 15 06 F6 | 	mov	arg02, ##@LR__4625
03430     0F 13 02 F6 | 	mov	arg01, local01
03434     30 8A B1 FD | 	call	#__system___string_cmp
03438     00 FA 0D F2 | 	cmp	result1, #0 wz
0343c     7C 01 90 AD |  if_e	jmp	#LR__0168
03440     5A 01 00 FF 
03444     82 15 06 F6 | 	mov	arg02, ##@LR__4626
03448     0F 13 02 F6 | 	mov	arg01, local01
0344c     18 8A B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     6C 01 90 AD |  if_e	jmp	#LR__0169
03458     5A 01 00 FF 
0345c     86 15 06 F6 | 	mov	arg02, ##@LR__4627
03460     0F 13 02 F6 | 	mov	arg01, local01
03464     00 8A B1 FD | 	call	#__system___string_cmp
03468     00 FA 0D F2 | 	cmp	result1, #0 wz
0346c     5C 01 90 AD |  if_e	jmp	#LR__0170
03470     5A 01 00 FF 
03474     8A 15 06 F6 | 	mov	arg02, ##@LR__4628
03478     0F 13 02 F6 | 	mov	arg01, local01
0347c     E8 89 B1 FD | 	call	#__system___string_cmp
03480     00 FA 0D F2 | 	cmp	result1, #0 wz
03484     4C 01 90 AD |  if_e	jmp	#LR__0171
03488     5A 01 00 FF 
0348c     8C 15 06 F6 | 	mov	arg02, ##@LR__4629
03490     0F 13 02 F6 | 	mov	arg01, local01
03494     D0 89 B1 FD | 	call	#__system___string_cmp
03498     00 FA 0D F2 | 	cmp	result1, #0 wz
0349c     3C 01 90 AD |  if_e	jmp	#LR__0172
034a0     5A 01 00 FF 
034a4     90 15 06 F6 | 	mov	arg02, ##@LR__4630
034a8     0F 13 02 F6 | 	mov	arg01, local01
034ac     B8 89 B1 FD | 	call	#__system___string_cmp
034b0     00 FA 0D F2 | 	cmp	result1, #0 wz
034b4     2C 01 90 AD |  if_e	jmp	#LR__0173
034b8     5A 01 00 FF 
034bc     92 15 06 F6 | 	mov	arg02, ##@LR__4631
034c0     0F 13 02 F6 | 	mov	arg01, local01
034c4     A0 89 B1 FD | 	call	#__system___string_cmp
034c8     00 FA 0D F2 | 	cmp	result1, #0 wz
034cc     1C 01 90 AD |  if_e	jmp	#LR__0174
034d0     5A 01 00 FF 
034d4     94 15 06 F6 | 	mov	arg02, ##@LR__4632
034d8     0F 13 02 F6 | 	mov	arg01, local01
034dc     88 89 B1 FD | 	call	#__system___string_cmp
034e0     00 FA 0D F2 | 	cmp	result1, #0 wz
034e4     0C 01 90 AD |  if_e	jmp	#LR__0175
034e8     5A 01 00 FF 
034ec     97 15 06 F6 | 	mov	arg02, ##@LR__4633
034f0     0F 13 02 F6 | 	mov	arg01, local01
034f4     70 89 B1 FD | 	call	#__system___string_cmp
034f8     00 FA 0D F2 | 	cmp	result1, #0 wz
034fc     FC 00 90 AD |  if_e	jmp	#LR__0176
03500     5A 01 00 FF 
03504     9A 15 06 F6 | 	mov	arg02, ##@LR__4634
03508     0F 13 02 F6 | 	mov	arg01, local01
0350c     58 89 B1 FD | 	call	#__system___string_cmp
03510     00 FA 0D F2 | 	cmp	result1, #0 wz
03514     EC 00 90 AD |  if_e	jmp	#LR__0177
03518     5A 01 00 FF 
0351c     9C 15 06 F6 | 	mov	arg02, ##@LR__4635
03520     0F 13 02 F6 | 	mov	arg01, local01
03524     40 89 B1 FD | 	call	#__system___string_cmp
03528     00 FA 0D F2 | 	cmp	result1, #0 wz
0352c     DC 00 90 AD |  if_e	jmp	#LR__0178
03530     5A 01 00 FF 
03534     9E 15 06 F6 | 	mov	arg02, ##@LR__4636
03538     0F 13 02 F6 | 	mov	arg01, local01
0353c     28 89 B1 FD | 	call	#__system___string_cmp
03540     00 FA 0D F2 | 	cmp	result1, #0 wz
03544     CC 00 90 AD |  if_e	jmp	#LR__0179
03548     5A 01 00 FF 
0354c     A1 15 06 F6 | 	mov	arg02, ##@LR__4637
03550     0F 13 02 F6 | 	mov	arg01, local01
03554     10 89 B1 FD | 	call	#__system___string_cmp
03558     00 FA 0D F2 | 	cmp	result1, #0 wz
0355c     BC 00 90 AD |  if_e	jmp	#LR__0180
03560     5A 01 00 FF 
03564     A4 15 06 F6 | 	mov	arg02, ##@LR__4638
03568     0F 13 02 F6 | 	mov	arg01, local01
0356c     F8 88 B1 FD | 	call	#__system___string_cmp
03570     00 FA 0D F2 | 	cmp	result1, #0 wz
03574     AC 00 90 AD |  if_e	jmp	#LR__0181
03578     B0 00 90 FD | 	jmp	#LR__0182
0357c                 | LR__0160
0357c     01 FA 05 F6 | 	mov	result1, #1
03580     AC 00 90 FD | 	jmp	#LR__0183
03584                 | LR__0161
03584     02 FA 05 F6 | 	mov	result1, #2
03588     A4 00 90 FD | 	jmp	#LR__0183
0358c                 | LR__0162
0358c     03 FA 05 F6 | 	mov	result1, #3
03590     9C 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0163
03594     04 FA 05 F6 | 	mov	result1, #4
03598     94 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0164
0359c     05 FA 05 F6 | 	mov	result1, #5
035a0     8C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0165
035a4     06 FA 05 F6 | 	mov	result1, #6
035a8     84 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0166
035ac     07 FA 05 F6 | 	mov	result1, #7
035b0     7C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0167
035b4     08 FA 05 F6 | 	mov	result1, #8
035b8     74 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0168
035bc     09 FA 05 F6 | 	mov	result1, #9
035c0     6C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0169
035c4     0A FA 05 F6 | 	mov	result1, #10
035c8     64 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0170
035cc     0B FA 05 F6 | 	mov	result1, #11
035d0     5C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0171
035d4     0C FA 05 F6 | 	mov	result1, #12
035d8     54 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0172
035dc     0D FA 05 F6 | 	mov	result1, #13
035e0     4C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0173
035e4     0E FA 05 F6 | 	mov	result1, #14
035e8     44 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0174
035ec     1B FA 05 F6 | 	mov	result1, #27
035f0     3C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0175
035f4     27 FA 05 F6 | 	mov	result1, #39
035f8     34 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0176
035fc     26 FA 05 F6 | 	mov	result1, #38
03600     2C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0177
03604     10 FA 05 F6 | 	mov	result1, #16
03608     24 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0178
0360c     0F FA 05 F6 | 	mov	result1, #15
03610     1C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0179
03614     2A FA 05 F6 | 	mov	result1, #42
03618     14 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0180
0361c     28 FA 05 F6 | 	mov	result1, #40
03620     0C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0181
03624     29 FA 05 F6 | 	mov	result1, #41
03628     04 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0182
0362c     00 FA 05 F6 | 	mov	result1, #0
03630                 | LR__0183
03630     A7 F0 03 F6 | 	mov	ptra, fp
03634     B2 00 A0 FD | 	call	#popregs_
03638                 | _isoperator_ret
03638     2D 00 64 FD | 	ret
0363c                 | 
0363c                 | ' 
0363c                 | ' 
0363c                 | ' function isnotename(s as string) as ulong
0363c                 | _isnotename
0363c     07 4A 05 F6 | 	mov	COUNT_, #7
03640     A8 00 A0 FD | 	call	#pushregs_
03644                 | ' if left$(s,1)<>"#" then return 0
03644     09 1F 02 F6 | 	mov	local01, arg01
03648     01 14 06 F6 | 	mov	arg02, #1
0364c     34 A8 B1 FD | 	call	#__system__Left_S
03650     FD 12 02 F6 | 	mov	arg01, result1
03654     5A 01 00 FF 
03658     A7 15 06 F6 | 	mov	arg02, ##@LR__4639
0365c     08 88 B1 FD | 	call	#__system___string_cmp
03660     00 FA 0D F2 | 	cmp	result1, #0 wz
03664     00 FA 05 56 |  if_ne	mov	result1, #0
03668     30 03 90 5D |  if_ne	jmp	#LR__0213
0366c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0366c     0F 13 02 F6 | 	mov	arg01, local01
03670     03 14 06 F6 | 	mov	arg02, #3
03674     01 16 06 F6 | 	mov	arg03, #1
03678     20 A9 B1 FD | 	call	#__system__Mid_S
0367c     FD 12 02 F6 | 	mov	arg01, result1
03680     5A 01 00 FF 
03684     A9 15 06 F6 | 	mov	arg02, ##@LR__4640
03688     DC 87 B1 FD | 	call	#__system___string_cmp
0368c     00 FA 0D F2 | 	cmp	result1, #0 wz
03690     18 00 90 5D |  if_ne	jmp	#LR__0190
03694     0F 13 02 F6 | 	mov	arg01, local01
03698     02 14 06 F6 | 	mov	arg02, #2
0369c     02 16 06 F6 | 	mov	arg03, #2
036a0     F8 A8 B1 FD | 	call	#__system__Mid_S
036a4     FD 20 02 F6 | 	mov	local02, result1
036a8     14 00 90 FD | 	jmp	#LR__0191
036ac                 | LR__0190
036ac     0F 13 02 F6 | 	mov	arg01, local01
036b0     02 14 06 F6 | 	mov	arg02, #2
036b4     01 16 06 F6 | 	mov	arg03, #1
036b8     E0 A8 B1 FD | 	call	#__system__Mid_S
036bc     FD 20 02 F6 | 	mov	local02, result1
036c0                 | LR__0191
036c0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036c0     0F 13 02 F6 | 	mov	arg01, local01
036c4     09 23 02 F6 | 	mov	local03, arg01
036c8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036cc                 | LR__0192
036cc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036d0     01 22 06 51 |  if_ne	add	local03, #1
036d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036d8                 | LR__0193
036d8     09 23 82 F1 | 	sub	local03, arg01
036dc     11 15 02 F6 | 	mov	arg02, local03
036e0     01 14 86 F1 | 	sub	arg02, #1
036e4     0F 13 02 F6 | 	mov	arg01, local01
036e8     01 16 06 F6 | 	mov	arg03, #1
036ec     AC A8 B1 FD | 	call	#__system__Mid_S
036f0     FD 12 02 F6 | 	mov	arg01, result1
036f4     5A 01 00 FF 
036f8     AB 15 06 F6 | 	mov	arg02, ##@LR__4641
036fc     68 87 B1 FD | 	call	#__system___string_cmp
03700     00 FA 0D F2 | 	cmp	result1, #0 wz
03704     28 00 90 AD |  if_e	jmp	#LR__0194
03708     0F 13 02 F6 | 	mov	arg01, local01
0370c     01 14 06 F6 | 	mov	arg02, #1
03710     F8 A7 B1 FD | 	call	#__system__Right_S
03714     FD 12 02 F6 | 	mov	arg01, result1
03718     88 BA B1 FD | 	call	#__system____builtin_atof
0371c     FD 12 02 F6 | 	mov	arg01, result1
03720     00 14 06 F6 | 	mov	arg02, #0
03724     5C B7 B1 FD | 	call	#__system___float_tointeger
03728     FD 24 02 F6 | 	mov	local04, result1
0372c     34 00 90 FD | 	jmp	#LR__0195
03730                 | LR__0194
03730     0F 13 02 F6 | 	mov	arg01, local01
03734     01 14 06 F6 | 	mov	arg02, #1
03738     D0 A7 B1 FD | 	call	#__system__Right_S
0373c     FD 12 02 F6 | 	mov	arg01, result1
03740     60 BA B1 FD | 	call	#__system____builtin_atof
03744     FD 14 02 F6 | 	mov	arg02, result1
03748     00 C0 5F FF 
0374c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03750     68 B2 B1 FD | 	call	#__system___float_mul
03754     FD 12 02 F6 | 	mov	arg01, result1
03758     00 14 06 F6 | 	mov	arg02, #0
0375c     24 B7 B1 FD | 	call	#__system___float_tointeger
03760     FD 24 02 F6 | 	mov	local04, result1
03764                 | LR__0195
03764                 | ' 
03764                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03764     00 24 0E F2 | 	cmp	local04, #0 wz
03768     24 00 90 5D |  if_ne	jmp	#LR__0196
0376c     0F 13 02 F6 | 	mov	arg01, local01
03770     01 14 06 F6 | 	mov	arg02, #1
03774     94 A7 B1 FD | 	call	#__system__Right_S
03778     FD 12 02 F6 | 	mov	arg01, result1
0377c     5A 01 00 FF 
03780     AD 15 06 F6 | 	mov	arg02, ##@LR__4642
03784     E0 86 B1 FD | 	call	#__system___string_cmp
03788     00 FA 0D F2 | 	cmp	result1, #0 wz
0378c     04 24 06 56 |  if_ne	mov	local04, #4
03790                 | LR__0196
03790                 | ' 
03790                 | ' select case s1
03790     10 27 02 F6 | 	mov	local05, local02
03794     5A 01 00 FF 
03798     AF 15 06 F6 | 	mov	arg02, ##@LR__4643
0379c     13 13 02 F6 | 	mov	arg01, local05
037a0     C4 86 B1 FD | 	call	#__system___string_cmp
037a4     00 FA 0D F2 | 	cmp	result1, #0 wz
037a8     24 01 90 AD |  if_e	jmp	#LR__0197
037ac     5A 01 00 FF 
037b0     B1 15 06 F6 | 	mov	arg02, ##@LR__4644
037b4     13 13 02 F6 | 	mov	arg01, local05
037b8     AC 86 B1 FD | 	call	#__system___string_cmp
037bc     00 FA 0D F2 | 	cmp	result1, #0 wz
037c0     18 01 90 AD |  if_e	jmp	#LR__0198
037c4     5A 01 00 FF 
037c8     B4 15 06 F6 | 	mov	arg02, ##@LR__4645
037cc     13 13 02 F6 | 	mov	arg01, local05
037d0     94 86 B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     0C 01 90 AD |  if_e	jmp	#LR__0199
037dc     5A 01 00 FF 
037e0     B6 15 06 F6 | 	mov	arg02, ##@LR__4646
037e4     13 13 02 F6 | 	mov	arg01, local05
037e8     7C 86 B1 FD | 	call	#__system___string_cmp
037ec     00 FA 0D F2 | 	cmp	result1, #0 wz
037f0     00 01 90 AD |  if_e	jmp	#LR__0200
037f4     5A 01 00 FF 
037f8     B9 15 06 F6 | 	mov	arg02, ##@LR__4647
037fc     13 13 02 F6 | 	mov	arg01, local05
03800     64 86 B1 FD | 	call	#__system___string_cmp
03804     00 FA 0D F2 | 	cmp	result1, #0 wz
03808     F4 00 90 AD |  if_e	jmp	#LR__0201
0380c     5A 01 00 FF 
03810     BB 15 06 F6 | 	mov	arg02, ##@LR__4648
03814     13 13 02 F6 | 	mov	arg01, local05
03818     4C 86 B1 FD | 	call	#__system___string_cmp
0381c     00 FA 0D F2 | 	cmp	result1, #0 wz
03820     E8 00 90 AD |  if_e	jmp	#LR__0202
03824     5A 01 00 FF 
03828     BD 15 06 F6 | 	mov	arg02, ##@LR__4649
0382c     13 13 02 F6 | 	mov	arg01, local05
03830     34 86 B1 FD | 	call	#__system___string_cmp
03834     00 FA 0D F2 | 	cmp	result1, #0 wz
03838     DC 00 90 AD |  if_e	jmp	#LR__0203
0383c     5A 01 00 FF 
03840     C0 15 06 F6 | 	mov	arg02, ##@LR__4650
03844     13 13 02 F6 | 	mov	arg01, local05
03848     1C 86 B1 FD | 	call	#__system___string_cmp
0384c     00 FA 0D F2 | 	cmp	result1, #0 wz
03850     D0 00 90 AD |  if_e	jmp	#LR__0204
03854     5A 01 00 FF 
03858     C2 15 06 F6 | 	mov	arg02, ##@LR__4651
0385c     13 13 02 F6 | 	mov	arg01, local05
03860     04 86 B1 FD | 	call	#__system___string_cmp
03864     00 FA 0D F2 | 	cmp	result1, #0 wz
03868     C4 00 90 AD |  if_e	jmp	#LR__0205
0386c     5A 01 00 FF 
03870     C5 15 06 F6 | 	mov	arg02, ##@LR__4652
03874     13 13 02 F6 | 	mov	arg01, local05
03878     EC 85 B1 FD | 	call	#__system___string_cmp
0387c     00 FA 0D F2 | 	cmp	result1, #0 wz
03880     B8 00 90 AD |  if_e	jmp	#LR__0206
03884     5A 01 00 FF 
03888     C7 15 06 F6 | 	mov	arg02, ##@LR__4653
0388c     13 13 02 F6 | 	mov	arg01, local05
03890     D4 85 B1 FD | 	call	#__system___string_cmp
03894     00 FA 0D F2 | 	cmp	result1, #0 wz
03898     AC 00 90 AD |  if_e	jmp	#LR__0207
0389c     5A 01 00 FF 
038a0     CA 15 06 F6 | 	mov	arg02, ##@LR__4654
038a4     13 13 02 F6 | 	mov	arg01, local05
038a8     BC 85 B1 FD | 	call	#__system___string_cmp
038ac     00 FA 0D F2 | 	cmp	result1, #0 wz
038b0     A0 00 90 AD |  if_e	jmp	#LR__0208
038b4     5A 01 00 FF 
038b8     CC 15 06 F6 | 	mov	arg02, ##@LR__4655
038bc     13 13 02 F6 | 	mov	arg01, local05
038c0     A4 85 B1 FD | 	call	#__system___string_cmp
038c4     00 FA 0D F2 | 	cmp	result1, #0 wz
038c8     94 00 90 AD |  if_e	jmp	#LR__0209
038cc     9C 00 90 FD | 	jmp	#LR__0210
038d0                 | LR__0197
038d0     01 00 00 FF 
038d4     00 29 06 F6 | 	mov	local06, ##768
038d8     98 00 90 FD | 	jmp	#LR__0211
038dc                 | LR__0198
038dc     01 00 00 FF 
038e0     01 29 06 F6 | 	mov	local06, ##769
038e4     8C 00 90 FD | 	jmp	#LR__0211
038e8                 | LR__0199
038e8     01 00 00 FF 
038ec     02 29 06 F6 | 	mov	local06, ##770
038f0     80 00 90 FD | 	jmp	#LR__0211
038f4                 | LR__0200
038f4     01 00 00 FF 
038f8     03 29 06 F6 | 	mov	local06, ##771
038fc     74 00 90 FD | 	jmp	#LR__0211
03900                 | LR__0201
03900     01 00 00 FF 
03904     04 29 06 F6 | 	mov	local06, ##772
03908     68 00 90 FD | 	jmp	#LR__0211
0390c                 | LR__0202
0390c     01 00 00 FF 
03910     05 29 06 F6 | 	mov	local06, ##773
03914     5C 00 90 FD | 	jmp	#LR__0211
03918                 | LR__0203
03918     01 00 00 FF 
0391c     06 29 06 F6 | 	mov	local06, ##774
03920     50 00 90 FD | 	jmp	#LR__0211
03924                 | LR__0204
03924     01 00 00 FF 
03928     07 29 06 F6 | 	mov	local06, ##775
0392c     44 00 90 FD | 	jmp	#LR__0211
03930                 | LR__0205
03930     01 00 00 FF 
03934     08 29 06 F6 | 	mov	local06, ##776
03938     38 00 90 FD | 	jmp	#LR__0211
0393c                 | LR__0206
0393c     01 00 00 FF 
03940     09 29 06 F6 | 	mov	local06, ##777
03944     2C 00 90 FD | 	jmp	#LR__0211
03948                 | LR__0207
03948     01 00 00 FF 
0394c     0A 29 06 F6 | 	mov	local06, ##778
03950     20 00 90 FD | 	jmp	#LR__0211
03954                 | LR__0208
03954     01 00 00 FF 
03958     0B 29 06 F6 | 	mov	local06, ##779
0395c     14 00 90 FD | 	jmp	#LR__0211
03960                 | LR__0209
03960     01 00 00 FF 
03964     0B 29 06 F6 | 	mov	local06, ##779
03968     08 00 90 FD | 	jmp	#LR__0211
0396c                 | LR__0210
0396c     00 FA 05 F6 | 	mov	result1, #0
03970     28 00 90 FD | 	jmp	#LR__0213
03974                 | LR__0211
03974                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03974     FF FF 7F FF 
03978     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0397c     18 00 90 CD |  if_b	jmp	#LR__0212
03980     0A 24 56 F2 | 	cmps	local04, #10 wc
03984     12 2B 02 C6 |  if_b	mov	local07, local04
03988     01 2A 66 C0 |  if_b	shl	local07, #1
0398c     12 2B 02 C1 |  if_b	add	local07, local04
03990     02 2A 66 C0 |  if_b	shl	local07, #2
03994     15 29 02 C1 |  if_b	add	local06, local07
03998                 | LR__0212
03998                 | ' return token
03998     14 FB 01 F6 | 	mov	result1, local06
0399c                 | LR__0213
0399c     A7 F0 03 F6 | 	mov	ptra, fp
039a0     B2 00 A0 FD | 	call	#popregs_
039a4                 | _isnotename_ret
039a4     2D 00 64 FD | 	ret
039a8                 | 
039a8                 | ' 
039a8                 | ' 
039a8                 | ' function isseparator(s as string) as ubyte
039a8                 | _isseparator
039a8     01 4A 05 F6 | 	mov	COUNT_, #1
039ac     A8 00 A0 FD | 	call	#pushregs_
039b0                 | ' 
039b0                 | ' select case s
039b0     09 1F 02 F6 | 	mov	local01, arg01
039b4     5A 01 00 FF 
039b8     CE 15 06 F6 | 	mov	arg02, ##@LR__4656
039bc     0F 13 02 F6 | 	mov	arg01, local01
039c0     A4 84 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     54 01 90 AD |  if_e	jmp	#LR__0220
039cc     5A 01 00 FF 
039d0     D0 15 06 F6 | 	mov	arg02, ##@LR__4657
039d4     0F 13 02 F6 | 	mov	arg01, local01
039d8     8C 84 B1 FD | 	call	#__system___string_cmp
039dc     00 FA 0D F2 | 	cmp	result1, #0 wz
039e0     44 01 90 AD |  if_e	jmp	#LR__0221
039e4     5A 01 00 FF 
039e8     D2 15 06 F6 | 	mov	arg02, ##@LR__4658
039ec     0F 13 02 F6 | 	mov	arg01, local01
039f0     74 84 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     34 01 90 AD |  if_e	jmp	#LR__0222
039fc     5A 01 00 FF 
03a00     D4 15 06 F6 | 	mov	arg02, ##@LR__4659
03a04     0F 13 02 F6 | 	mov	arg01, local01
03a08     5C 84 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     24 01 90 AD |  if_e	jmp	#LR__0223
03a14     5A 01 00 FF 
03a18     D6 15 06 F6 | 	mov	arg02, ##@LR__4660
03a1c     0F 13 02 F6 | 	mov	arg01, local01
03a20     44 84 B1 FD | 	call	#__system___string_cmp
03a24     00 FA 0D F2 | 	cmp	result1, #0 wz
03a28     14 01 90 AD |  if_e	jmp	#LR__0224
03a2c     5A 01 00 FF 
03a30     D8 15 06 F6 | 	mov	arg02, ##@LR__4661
03a34     0F 13 02 F6 | 	mov	arg01, local01
03a38     2C 84 B1 FD | 	call	#__system___string_cmp
03a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a40     04 01 90 AD |  if_e	jmp	#LR__0225
03a44     5A 01 00 FF 
03a48     DA 15 06 F6 | 	mov	arg02, ##@LR__4662
03a4c     0F 13 02 F6 | 	mov	arg01, local01
03a50     14 84 B1 FD | 	call	#__system___string_cmp
03a54     00 FA 0D F2 | 	cmp	result1, #0 wz
03a58     F4 00 90 AD |  if_e	jmp	#LR__0226
03a5c     5A 01 00 FF 
03a60     DC 15 06 F6 | 	mov	arg02, ##@LR__4663
03a64     0F 13 02 F6 | 	mov	arg01, local01
03a68     FC 83 B1 FD | 	call	#__system___string_cmp
03a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a70     E4 00 90 AD |  if_e	jmp	#LR__0227
03a74     5A 01 00 FF 
03a78     DE 15 06 F6 | 	mov	arg02, ##@LR__4664
03a7c     0F 13 02 F6 | 	mov	arg01, local01
03a80     E4 83 B1 FD | 	call	#__system___string_cmp
03a84     00 FA 0D F2 | 	cmp	result1, #0 wz
03a88     D4 00 90 AD |  if_e	jmp	#LR__0228
03a8c     5A 01 00 FF 
03a90     E0 15 06 F6 | 	mov	arg02, ##@LR__4665
03a94     0F 13 02 F6 | 	mov	arg01, local01
03a98     CC 83 B1 FD | 	call	#__system___string_cmp
03a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa0     C4 00 90 AD |  if_e	jmp	#LR__0229
03aa4     5A 01 00 FF 
03aa8     E2 15 06 F6 | 	mov	arg02, ##@LR__4666
03aac     0F 13 02 F6 | 	mov	arg01, local01
03ab0     B4 83 B1 FD | 	call	#__system___string_cmp
03ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab8     B4 00 90 AD |  if_e	jmp	#LR__0230
03abc     5A 01 00 FF 
03ac0     E4 15 06 F6 | 	mov	arg02, ##@LR__4667
03ac4     0F 13 02 F6 | 	mov	arg01, local01
03ac8     9C 83 B1 FD | 	call	#__system___string_cmp
03acc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ad4     5A 01 00 FF 
03ad8     E6 15 06 F6 | 	mov	arg02, ##@LR__4668
03adc     0F 13 02 F6 | 	mov	arg01, local01
03ae0     84 83 B1 FD | 	call	#__system___string_cmp
03ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae8     94 00 90 AD |  if_e	jmp	#LR__0232
03aec     5A 01 00 FF 
03af0     E8 15 06 F6 | 	mov	arg02, ##@LR__4669
03af4     0F 13 02 F6 | 	mov	arg01, local01
03af8     6C 83 B1 FD | 	call	#__system___string_cmp
03afc     00 FA 0D F2 | 	cmp	result1, #0 wz
03b00     84 00 90 AD |  if_e	jmp	#LR__0233
03b04     5A 01 00 FF 
03b08     EA 15 06 F6 | 	mov	arg02, ##@LR__4670
03b0c     0F 13 02 F6 | 	mov	arg01, local01
03b10     54 83 B1 FD | 	call	#__system___string_cmp
03b14     00 FA 0D F2 | 	cmp	result1, #0 wz
03b18     74 00 90 AD |  if_e	jmp	#LR__0234
03b1c     78 00 90 FD | 	jmp	#LR__0235
03b20                 | LR__0220
03b20     01 FA 05 F6 | 	mov	result1, #1
03b24     74 00 90 FD | 	jmp	#LR__0236
03b28                 | LR__0221
03b28     02 FA 05 F6 | 	mov	result1, #2
03b2c     6C 00 90 FD | 	jmp	#LR__0236
03b30                 | LR__0222
03b30     1B FA 05 F6 | 	mov	result1, #27
03b34     64 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0223
03b38     11 FA 05 F6 | 	mov	result1, #17
03b3c     5C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0224
03b40     05 FA 05 F6 | 	mov	result1, #5
03b44     54 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0225
03b48     06 FA 05 F6 | 	mov	result1, #6
03b4c     4C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0226
03b50     12 FA 05 F6 | 	mov	result1, #18
03b54     44 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0227
03b58     13 FA 05 F6 | 	mov	result1, #19
03b5c     3C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0228
03b60     0C FA 05 F6 | 	mov	result1, #12
03b64     34 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0229
03b68     14 FA 05 F6 | 	mov	result1, #20
03b6c     2C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0230
03b70     15 FA 05 F6 | 	mov	result1, #21
03b74     24 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0231
03b78     16 FA 05 F6 | 	mov	result1, #22
03b7c     1C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0232
03b80     FF FB 05 F6 | 	mov	result1, #511
03b84     14 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0233
03b88     0F FA 05 F6 | 	mov	result1, #15
03b8c     0C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0234
03b90     10 FA 05 F6 | 	mov	result1, #16
03b94     04 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0235
03b98     00 FA 05 F6 | 	mov	result1, #0
03b9c                 | LR__0236
03b9c     A7 F0 03 F6 | 	mov	ptra, fp
03ba0     B2 00 A0 FD | 	call	#popregs_
03ba4                 | _isseparator_ret
03ba4     2D 00 64 FD | 	ret
03ba8                 | 
03ba8                 | ' 
03ba8                 | ' 
03ba8                 | ' function iscommand(s as string) as ubyte
03ba8                 | _iscommand
03ba8     01 4A 05 F6 | 	mov	COUNT_, #1
03bac     A8 00 A0 FD | 	call	#pushregs_
03bb0                 | ' 
03bb0                 | ' select case s
03bb0     09 1F 02 F6 | 	mov	local01, arg01
03bb4     5A 01 00 FF 
03bb8     EE 15 06 F6 | 	mov	arg02, ##@LR__4672
03bbc     0F 13 02 F6 | 	mov	arg01, local01
03bc0     A4 82 B1 FD | 	call	#__system___string_cmp
03bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bc8     74 08 90 AD |  if_e	jmp	#LR__0240
03bcc     5A 01 00 FF 
03bd0     F3 15 06 F6 | 	mov	arg02, ##@LR__4673
03bd4     0F 13 02 F6 | 	mov	arg01, local01
03bd8     8C 82 B1 FD | 	call	#__system___string_cmp
03bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03be0     64 08 90 AD |  if_e	jmp	#LR__0241
03be4     5A 01 00 FF 
03be8     F6 15 06 F6 | 	mov	arg02, ##@LR__4674
03bec     0F 13 02 F6 | 	mov	arg01, local01
03bf0     74 82 B1 FD | 	call	#__system___string_cmp
03bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf8     54 08 90 AD |  if_e	jmp	#LR__0242
03bfc     5A 01 00 FF 
03c00     FA 15 06 F6 | 	mov	arg02, ##@LR__4675
03c04     0F 13 02 F6 | 	mov	arg01, local01
03c08     5C 82 B1 FD | 	call	#__system___string_cmp
03c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c10     44 08 90 AD |  if_e	jmp	#LR__0243
03c14     5A 01 00 FF 
03c18     FF 15 06 F6 | 	mov	arg02, ##@LR__4676
03c1c     0F 13 02 F6 | 	mov	arg01, local01
03c20     44 82 B1 FD | 	call	#__system___string_cmp
03c24     00 FA 0D F2 | 	cmp	result1, #0 wz
03c28     34 08 90 AD |  if_e	jmp	#LR__0244
03c2c     5B 01 00 FF 
03c30     03 14 06 F6 | 	mov	arg02, ##@LR__4677
03c34     0F 13 02 F6 | 	mov	arg01, local01
03c38     2C 82 B1 FD | 	call	#__system___string_cmp
03c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c40     24 08 90 AD |  if_e	jmp	#LR__0245
03c44     5B 01 00 FF 
03c48     0A 14 06 F6 | 	mov	arg02, ##@LR__4678
03c4c     0F 13 02 F6 | 	mov	arg01, local01
03c50     14 82 B1 FD | 	call	#__system___string_cmp
03c54     00 FA 0D F2 | 	cmp	result1, #0 wz
03c58     14 08 90 AD |  if_e	jmp	#LR__0246
03c5c     5B 01 00 FF 
03c60     0E 14 06 F6 | 	mov	arg02, ##@LR__4679
03c64     0F 13 02 F6 | 	mov	arg01, local01
03c68     FC 81 B1 FD | 	call	#__system___string_cmp
03c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c70     04 08 90 AD |  if_e	jmp	#LR__0247
03c74     5B 01 00 FF 
03c78     14 14 06 F6 | 	mov	arg02, ##@LR__4680
03c7c     0F 13 02 F6 | 	mov	arg01, local01
03c80     E4 81 B1 FD | 	call	#__system___string_cmp
03c84     00 FA 0D F2 | 	cmp	result1, #0 wz
03c88     F4 07 90 AD |  if_e	jmp	#LR__0248
03c8c     5B 01 00 FF 
03c90     18 14 06 F6 | 	mov	arg02, ##@LR__4681
03c94     0F 13 02 F6 | 	mov	arg01, local01
03c98     CC 81 B1 FD | 	call	#__system___string_cmp
03c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03ca0     E4 07 90 AD |  if_e	jmp	#LR__0249
03ca4     5B 01 00 FF 
03ca8     1E 14 06 F6 | 	mov	arg02, ##@LR__4682
03cac     0F 13 02 F6 | 	mov	arg01, local01
03cb0     B4 81 B1 FD | 	call	#__system___string_cmp
03cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb8     D4 07 90 AD |  if_e	jmp	#LR__0250
03cbc     5B 01 00 FF 
03cc0     21 14 06 F6 | 	mov	arg02, ##@LR__4683
03cc4     0F 13 02 F6 | 	mov	arg01, local01
03cc8     9C 81 B1 FD | 	call	#__system___string_cmp
03ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
03cd0     C4 07 90 AD |  if_e	jmp	#LR__0251
03cd4     5B 01 00 FF 
03cd8     27 14 06 F6 | 	mov	arg02, ##@LR__4684
03cdc     0F 13 02 F6 | 	mov	arg01, local01
03ce0     84 81 B1 FD | 	call	#__system___string_cmp
03ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce8     B4 07 90 AD |  if_e	jmp	#LR__0252
03cec     5B 01 00 FF 
03cf0     2B 14 06 F6 | 	mov	arg02, ##@LR__4685
03cf4     0F 13 02 F6 | 	mov	arg01, local01
03cf8     6C 81 B1 FD | 	call	#__system___string_cmp
03cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03d00     A4 07 90 AD |  if_e	jmp	#LR__0253
03d04     5B 01 00 FF 
03d08     32 14 06 F6 | 	mov	arg02, ##@LR__4686
03d0c     0F 13 02 F6 | 	mov	arg01, local01
03d10     54 81 B1 FD | 	call	#__system___string_cmp
03d14     00 FA 0D F2 | 	cmp	result1, #0 wz
03d18     94 07 90 AD |  if_e	jmp	#LR__0254
03d1c     5B 01 00 FF 
03d20     39 14 06 F6 | 	mov	arg02, ##@LR__4687
03d24     0F 13 02 F6 | 	mov	arg01, local01
03d28     3C 81 B1 FD | 	call	#__system___string_cmp
03d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d30     84 07 90 AD |  if_e	jmp	#LR__0255
03d34     5B 01 00 FF 
03d38     40 14 06 F6 | 	mov	arg02, ##@LR__4688
03d3c     0F 13 02 F6 | 	mov	arg01, local01
03d40     24 81 B1 FD | 	call	#__system___string_cmp
03d44     00 FA 0D F2 | 	cmp	result1, #0 wz
03d48     74 07 90 AD |  if_e	jmp	#LR__0256
03d4c     5B 01 00 FF 
03d50     4A 14 06 F6 | 	mov	arg02, ##@LR__4689
03d54     0F 13 02 F6 | 	mov	arg01, local01
03d58     0C 81 B1 FD | 	call	#__system___string_cmp
03d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d60     64 07 90 AD |  if_e	jmp	#LR__0257
03d64     5B 01 00 FF 
03d68     4E 14 06 F6 | 	mov	arg02, ##@LR__4690
03d6c     0F 13 02 F6 | 	mov	arg01, local01
03d70     F4 80 B1 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     54 07 90 AD |  if_e	jmp	#LR__0258
03d7c     5B 01 00 FF 
03d80     52 14 06 F6 | 	mov	arg02, ##@LR__4691
03d84     0F 13 02 F6 | 	mov	arg01, local01
03d88     DC 80 B1 FD | 	call	#__system___string_cmp
03d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d90     44 07 90 AD |  if_e	jmp	#LR__0259
03d94     5B 01 00 FF 
03d98     56 14 06 F6 | 	mov	arg02, ##@LR__4692
03d9c     0F 13 02 F6 | 	mov	arg01, local01
03da0     C4 80 B1 FD | 	call	#__system___string_cmp
03da4     00 FA 0D F2 | 	cmp	result1, #0 wz
03da8     34 07 90 AD |  if_e	jmp	#LR__0260
03dac     5B 01 00 FF 
03db0     5A 14 06 F6 | 	mov	arg02, ##@LR__4693
03db4     0F 13 02 F6 | 	mov	arg01, local01
03db8     AC 80 B1 FD | 	call	#__system___string_cmp
03dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dc0     24 07 90 AD |  if_e	jmp	#LR__0261
03dc4     5B 01 00 FF 
03dc8     60 14 06 F6 | 	mov	arg02, ##@LR__4694
03dcc     0F 13 02 F6 | 	mov	arg01, local01
03dd0     94 80 B1 FD | 	call	#__system___string_cmp
03dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd8     14 07 90 AD |  if_e	jmp	#LR__0262
03ddc     5B 01 00 FF 
03de0     65 14 06 F6 | 	mov	arg02, ##@LR__4695
03de4     0F 13 02 F6 | 	mov	arg01, local01
03de8     7C 80 B1 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     04 07 90 AD |  if_e	jmp	#LR__0263
03df4     5B 01 00 FF 
03df8     69 14 06 F6 | 	mov	arg02, ##@LR__4696
03dfc     0F 13 02 F6 | 	mov	arg01, local01
03e00     64 80 B1 FD | 	call	#__system___string_cmp
03e04     00 FA 0D F2 | 	cmp	result1, #0 wz
03e08     F4 06 90 AD |  if_e	jmp	#LR__0264
03e0c     5B 01 00 FF 
03e10     6E 14 06 F6 | 	mov	arg02, ##@LR__4697
03e14     0F 13 02 F6 | 	mov	arg01, local01
03e18     4C 80 B1 FD | 	call	#__system___string_cmp
03e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e20     E4 06 90 AD |  if_e	jmp	#LR__0265
03e24     5B 01 00 FF 
03e28     76 14 06 F6 | 	mov	arg02, ##@LR__4698
03e2c     0F 13 02 F6 | 	mov	arg01, local01
03e30     34 80 B1 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     D4 06 90 AD |  if_e	jmp	#LR__0266
03e3c     5B 01 00 FF 
03e40     7A 14 06 F6 | 	mov	arg02, ##@LR__4699
03e44     0F 13 02 F6 | 	mov	arg01, local01
03e48     1C 80 B1 FD | 	call	#__system___string_cmp
03e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e50     C4 06 90 AD |  if_e	jmp	#LR__0267
03e54     5B 01 00 FF 
03e58     7F 14 06 F6 | 	mov	arg02, ##@LR__4700
03e5c     0F 13 02 F6 | 	mov	arg01, local01
03e60     04 80 B1 FD | 	call	#__system___string_cmp
03e64     00 FA 0D F2 | 	cmp	result1, #0 wz
03e68     B4 06 90 AD |  if_e	jmp	#LR__0268
03e6c     5B 01 00 FF 
03e70     83 14 06 F6 | 	mov	arg02, ##@LR__4701
03e74     0F 13 02 F6 | 	mov	arg01, local01
03e78     EC 7F B1 FD | 	call	#__system___string_cmp
03e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e80     A4 06 90 AD |  if_e	jmp	#LR__0269
03e84     5B 01 00 FF 
03e88     88 14 06 F6 | 	mov	arg02, ##@LR__4702
03e8c     0F 13 02 F6 | 	mov	arg01, local01
03e90     D4 7F B1 FD | 	call	#__system___string_cmp
03e94     00 FA 0D F2 | 	cmp	result1, #0 wz
03e98     94 06 90 AD |  if_e	jmp	#LR__0270
03e9c     5B 01 00 FF 
03ea0     8C 14 06 F6 | 	mov	arg02, ##@LR__4703
03ea4     0F 13 02 F6 | 	mov	arg01, local01
03ea8     BC 7F B1 FD | 	call	#__system___string_cmp
03eac     00 FA 0D F2 | 	cmp	result1, #0 wz
03eb0     84 06 90 AD |  if_e	jmp	#LR__0271
03eb4     5B 01 00 FF 
03eb8     8F 14 06 F6 | 	mov	arg02, ##@LR__4704
03ebc     0F 13 02 F6 | 	mov	arg01, local01
03ec0     A4 7F B1 FD | 	call	#__system___string_cmp
03ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec8     74 06 90 AD |  if_e	jmp	#LR__0272
03ecc     5B 01 00 FF 
03ed0     95 14 06 F6 | 	mov	arg02, ##@LR__4705
03ed4     0F 13 02 F6 | 	mov	arg01, local01
03ed8     8C 7F B1 FD | 	call	#__system___string_cmp
03edc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee0     64 06 90 AD |  if_e	jmp	#LR__0273
03ee4     5B 01 00 FF 
03ee8     99 14 06 F6 | 	mov	arg02, ##@LR__4706
03eec     0F 13 02 F6 | 	mov	arg01, local01
03ef0     74 7F B1 FD | 	call	#__system___string_cmp
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     54 06 90 AD |  if_e	jmp	#LR__0274
03efc     5B 01 00 FF 
03f00     9E 14 06 F6 | 	mov	arg02, ##@LR__4707
03f04     0F 13 02 F6 | 	mov	arg01, local01
03f08     5C 7F B1 FD | 	call	#__system___string_cmp
03f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f10     44 06 90 AD |  if_e	jmp	#LR__0275
03f14     5B 01 00 FF 
03f18     A1 14 06 F6 | 	mov	arg02, ##@LR__4708
03f1c     0F 13 02 F6 | 	mov	arg01, local01
03f20     44 7F B1 FD | 	call	#__system___string_cmp
03f24     00 FA 0D F2 | 	cmp	result1, #0 wz
03f28     34 06 90 AD |  if_e	jmp	#LR__0276
03f2c     5B 01 00 FF 
03f30     A4 14 06 F6 | 	mov	arg02, ##@LR__4709
03f34     0F 13 02 F6 | 	mov	arg01, local01
03f38     2C 7F B1 FD | 	call	#__system___string_cmp
03f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f40     24 06 90 AD |  if_e	jmp	#LR__0277
03f44     5B 01 00 FF 
03f48     A8 14 06 F6 | 	mov	arg02, ##@LR__4710
03f4c     0F 13 02 F6 | 	mov	arg01, local01
03f50     14 7F B1 FD | 	call	#__system___string_cmp
03f54     00 FA 0D F2 | 	cmp	result1, #0 wz
03f58     14 06 90 AD |  if_e	jmp	#LR__0278
03f5c     5B 01 00 FF 
03f60     AB 14 06 F6 | 	mov	arg02, ##@LR__4711
03f64     0F 13 02 F6 | 	mov	arg01, local01
03f68     FC 7E B1 FD | 	call	#__system___string_cmp
03f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f70     04 06 90 AD |  if_e	jmp	#LR__0279
03f74     5B 01 00 FF 
03f78     AF 14 06 F6 | 	mov	arg02, ##@LR__4712
03f7c     0F 13 02 F6 | 	mov	arg01, local01
03f80     E4 7E B1 FD | 	call	#__system___string_cmp
03f84     00 FA 0D F2 | 	cmp	result1, #0 wz
03f88     F4 05 90 AD |  if_e	jmp	#LR__0280
03f8c     5B 01 00 FF 
03f90     B4 14 06 F6 | 	mov	arg02, ##@LR__4713
03f94     0F 13 02 F6 | 	mov	arg01, local01
03f98     CC 7E B1 FD | 	call	#__system___string_cmp
03f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03fa0     E4 05 90 AD |  if_e	jmp	#LR__0281
03fa4     5B 01 00 FF 
03fa8     B7 14 06 F6 | 	mov	arg02, ##@LR__4714
03fac     0F 13 02 F6 | 	mov	arg01, local01
03fb0     B4 7E B1 FD | 	call	#__system___string_cmp
03fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb8     D4 05 90 AD |  if_e	jmp	#LR__0282
03fbc     5B 01 00 FF 
03fc0     BC 14 06 F6 | 	mov	arg02, ##@LR__4715
03fc4     0F 13 02 F6 | 	mov	arg01, local01
03fc8     9C 7E B1 FD | 	call	#__system___string_cmp
03fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fd0     C4 05 90 AD |  if_e	jmp	#LR__0283
03fd4     5B 01 00 FF 
03fd8     C0 14 06 F6 | 	mov	arg02, ##@LR__4716
03fdc     0F 13 02 F6 | 	mov	arg01, local01
03fe0     84 7E B1 FD | 	call	#__system___string_cmp
03fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe8     B4 05 90 AD |  if_e	jmp	#LR__0284
03fec     5B 01 00 FF 
03ff0     C6 14 06 F6 | 	mov	arg02, ##@LR__4717
03ff4     0F 13 02 F6 | 	mov	arg01, local01
03ff8     6C 7E B1 FD | 	call	#__system___string_cmp
03ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
04000     A4 05 90 AD |  if_e	jmp	#LR__0285
04004     5B 01 00 FF 
04008     CB 14 06 F6 | 	mov	arg02, ##@LR__4718
0400c     0F 13 02 F6 | 	mov	arg01, local01
04010     54 7E B1 FD | 	call	#__system___string_cmp
04014     00 FA 0D F2 | 	cmp	result1, #0 wz
04018     94 05 90 AD |  if_e	jmp	#LR__0286
0401c     5B 01 00 FF 
04020     CE 14 06 F6 | 	mov	arg02, ##@LR__4719
04024     0F 13 02 F6 | 	mov	arg01, local01
04028     3C 7E B1 FD | 	call	#__system___string_cmp
0402c     00 FA 0D F2 | 	cmp	result1, #0 wz
04030     84 05 90 AD |  if_e	jmp	#LR__0287
04034     5B 01 00 FF 
04038     D4 14 06 F6 | 	mov	arg02, ##@LR__4720
0403c     0F 13 02 F6 | 	mov	arg01, local01
04040     24 7E B1 FD | 	call	#__system___string_cmp
04044     00 FA 0D F2 | 	cmp	result1, #0 wz
04048     74 05 90 AD |  if_e	jmp	#LR__0288
0404c     5B 01 00 FF 
04050     D8 14 06 F6 | 	mov	arg02, ##@LR__4721
04054     0F 13 02 F6 | 	mov	arg01, local01
04058     0C 7E B1 FD | 	call	#__system___string_cmp
0405c     00 FA 0D F2 | 	cmp	result1, #0 wz
04060     64 05 90 AD |  if_e	jmp	#LR__0289
04064     5B 01 00 FF 
04068     DD 14 06 F6 | 	mov	arg02, ##@LR__4722
0406c     0F 13 02 F6 | 	mov	arg01, local01
04070     F4 7D B1 FD | 	call	#__system___string_cmp
04074     00 FA 0D F2 | 	cmp	result1, #0 wz
04078     54 05 90 AD |  if_e	jmp	#LR__0290
0407c     5B 01 00 FF 
04080     E0 14 06 F6 | 	mov	arg02, ##@LR__4723
04084     0F 13 02 F6 | 	mov	arg01, local01
04088     DC 7D B1 FD | 	call	#__system___string_cmp
0408c     00 FA 0D F2 | 	cmp	result1, #0 wz
04090     44 05 90 AD |  if_e	jmp	#LR__0291
04094     5B 01 00 FF 
04098     E6 14 06 F6 | 	mov	arg02, ##@LR__4724
0409c     0F 13 02 F6 | 	mov	arg01, local01
040a0     C4 7D B1 FD | 	call	#__system___string_cmp
040a4     00 FA 0D F2 | 	cmp	result1, #0 wz
040a8     34 05 90 AD |  if_e	jmp	#LR__0292
040ac     5B 01 00 FF 
040b0     E9 14 06 F6 | 	mov	arg02, ##@LR__4725
040b4     0F 13 02 F6 | 	mov	arg01, local01
040b8     AC 7D B1 FD | 	call	#__system___string_cmp
040bc     00 FA 0D F2 | 	cmp	result1, #0 wz
040c0     24 05 90 AD |  if_e	jmp	#LR__0293
040c4     5B 01 00 FF 
040c8     F2 14 06 F6 | 	mov	arg02, ##@LR__4726
040cc     0F 13 02 F6 | 	mov	arg01, local01
040d0     94 7D B1 FD | 	call	#__system___string_cmp
040d4     00 FA 0D F2 | 	cmp	result1, #0 wz
040d8     14 05 90 AD |  if_e	jmp	#LR__0294
040dc     5B 01 00 FF 
040e0     F8 14 06 F6 | 	mov	arg02, ##@LR__4727
040e4     0F 13 02 F6 | 	mov	arg01, local01
040e8     7C 7D B1 FD | 	call	#__system___string_cmp
040ec     00 FA 0D F2 | 	cmp	result1, #0 wz
040f0     04 05 90 AD |  if_e	jmp	#LR__0295
040f4     5B 01 00 FF 
040f8     FE 14 06 F6 | 	mov	arg02, ##@LR__4728
040fc     0F 13 02 F6 | 	mov	arg01, local01
04100     64 7D B1 FD | 	call	#__system___string_cmp
04104     00 FA 0D F2 | 	cmp	result1, #0 wz
04108     F4 04 90 AD |  if_e	jmp	#LR__0296
0410c     5B 01 00 FF 
04110     07 15 06 F6 | 	mov	arg02, ##@LR__4729
04114     0F 13 02 F6 | 	mov	arg01, local01
04118     4C 7D B1 FD | 	call	#__system___string_cmp
0411c     00 FA 0D F2 | 	cmp	result1, #0 wz
04120     E4 04 90 AD |  if_e	jmp	#LR__0297
04124     5B 01 00 FF 
04128     11 15 06 F6 | 	mov	arg02, ##@LR__4730
0412c     0F 13 02 F6 | 	mov	arg01, local01
04130     34 7D B1 FD | 	call	#__system___string_cmp
04134     00 FA 0D F2 | 	cmp	result1, #0 wz
04138     D4 04 90 AD |  if_e	jmp	#LR__0298
0413c     5B 01 00 FF 
04140     1A 15 06 F6 | 	mov	arg02, ##@LR__4731
04144     0F 13 02 F6 | 	mov	arg01, local01
04148     1C 7D B1 FD | 	call	#__system___string_cmp
0414c     00 FA 0D F2 | 	cmp	result1, #0 wz
04150     C4 04 90 AD |  if_e	jmp	#LR__0299
04154     5B 01 00 FF 
04158     1F 15 06 F6 | 	mov	arg02, ##@LR__4732
0415c     0F 13 02 F6 | 	mov	arg01, local01
04160     04 7D B1 FD | 	call	#__system___string_cmp
04164     00 FA 0D F2 | 	cmp	result1, #0 wz
04168     B4 04 90 AD |  if_e	jmp	#LR__0300
0416c     5B 01 00 FF 
04170     24 15 06 F6 | 	mov	arg02, ##@LR__4733
04174     0F 13 02 F6 | 	mov	arg01, local01
04178     EC 7C B1 FD | 	call	#__system___string_cmp
0417c     00 FA 0D F2 | 	cmp	result1, #0 wz
04180     A4 04 90 AD |  if_e	jmp	#LR__0301
04184     5B 01 00 FF 
04188     28 15 06 F6 | 	mov	arg02, ##@LR__4734
0418c     0F 13 02 F6 | 	mov	arg01, local01
04190     D4 7C B1 FD | 	call	#__system___string_cmp
04194     00 FA 0D F2 | 	cmp	result1, #0 wz
04198     94 04 90 AD |  if_e	jmp	#LR__0302
0419c     5B 01 00 FF 
041a0     2D 15 06 F6 | 	mov	arg02, ##@LR__4735
041a4     0F 13 02 F6 | 	mov	arg01, local01
041a8     BC 7C B1 FD | 	call	#__system___string_cmp
041ac     00 FA 0D F2 | 	cmp	result1, #0 wz
041b0     84 04 90 AD |  if_e	jmp	#LR__0303
041b4     5B 01 00 FF 
041b8     36 15 06 F6 | 	mov	arg02, ##@LR__4736
041bc     0F 13 02 F6 | 	mov	arg01, local01
041c0     A4 7C B1 FD | 	call	#__system___string_cmp
041c4     00 FA 0D F2 | 	cmp	result1, #0 wz
041c8     74 04 90 AD |  if_e	jmp	#LR__0304
041cc     5B 01 00 FF 
041d0     3B 15 06 F6 | 	mov	arg02, ##@LR__4737
041d4     0F 13 02 F6 | 	mov	arg01, local01
041d8     8C 7C B1 FD | 	call	#__system___string_cmp
041dc     00 FA 0D F2 | 	cmp	result1, #0 wz
041e0     64 04 90 AD |  if_e	jmp	#LR__0305
041e4     5B 01 00 FF 
041e8     41 15 06 F6 | 	mov	arg02, ##@LR__4738
041ec     0F 13 02 F6 | 	mov	arg01, local01
041f0     74 7C B1 FD | 	call	#__system___string_cmp
041f4     00 FA 0D F2 | 	cmp	result1, #0 wz
041f8     54 04 90 AD |  if_e	jmp	#LR__0306
041fc     5B 01 00 FF 
04200     43 15 06 F6 | 	mov	arg02, ##@LR__4739
04204     0F 13 02 F6 | 	mov	arg01, local01
04208     5C 7C B1 FD | 	call	#__system___string_cmp
0420c     00 FA 0D F2 | 	cmp	result1, #0 wz
04210     44 04 90 AD |  if_e	jmp	#LR__0307
04214     5B 01 00 FF 
04218     47 15 06 F6 | 	mov	arg02, ##@LR__4740
0421c     0F 13 02 F6 | 	mov	arg01, local01
04220     44 7C B1 FD | 	call	#__system___string_cmp
04224     00 FA 0D F2 | 	cmp	result1, #0 wz
04228     34 04 90 AD |  if_e	jmp	#LR__0308
0422c     5B 01 00 FF 
04230     4F 15 06 F6 | 	mov	arg02, ##@LR__4741
04234     0F 13 02 F6 | 	mov	arg01, local01
04238     2C 7C B1 FD | 	call	#__system___string_cmp
0423c     00 FA 0D F2 | 	cmp	result1, #0 wz
04240     24 04 90 AD |  if_e	jmp	#LR__0309
04244     5B 01 00 FF 
04248     53 15 06 F6 | 	mov	arg02, ##@LR__4742
0424c     0F 13 02 F6 | 	mov	arg01, local01
04250     14 7C B1 FD | 	call	#__system___string_cmp
04254     00 FA 0D F2 | 	cmp	result1, #0 wz
04258     14 04 90 AD |  if_e	jmp	#LR__0310
0425c     5B 01 00 FF 
04260     58 15 06 F6 | 	mov	arg02, ##@LR__4743
04264     0F 13 02 F6 | 	mov	arg01, local01
04268     FC 7B B1 FD | 	call	#__system___string_cmp
0426c     00 FA 0D F2 | 	cmp	result1, #0 wz
04270     04 04 90 AD |  if_e	jmp	#LR__0311
04274     5B 01 00 FF 
04278     5B 15 06 F6 | 	mov	arg02, ##@LR__4744
0427c     0F 13 02 F6 | 	mov	arg01, local01
04280     E4 7B B1 FD | 	call	#__system___string_cmp
04284     00 FA 0D F2 | 	cmp	result1, #0 wz
04288     F4 03 90 AD |  if_e	jmp	#LR__0312
0428c     5B 01 00 FF 
04290     64 15 06 F6 | 	mov	arg02, ##@LR__4745
04294     0F 13 02 F6 | 	mov	arg01, local01
04298     CC 7B B1 FD | 	call	#__system___string_cmp
0429c     00 FA 0D F2 | 	cmp	result1, #0 wz
042a0     E4 03 90 AD |  if_e	jmp	#LR__0313
042a4     5B 01 00 FF 
042a8     6B 15 06 F6 | 	mov	arg02, ##@LR__4746
042ac     0F 13 02 F6 | 	mov	arg01, local01
042b0     B4 7B B1 FD | 	call	#__system___string_cmp
042b4     00 FA 0D F2 | 	cmp	result1, #0 wz
042b8     D4 03 90 AD |  if_e	jmp	#LR__0314
042bc     5B 01 00 FF 
042c0     72 15 06 F6 | 	mov	arg02, ##@LR__4747
042c4     0F 13 02 F6 | 	mov	arg01, local01
042c8     9C 7B B1 FD | 	call	#__system___string_cmp
042cc     00 FA 0D F2 | 	cmp	result1, #0 wz
042d0     C4 03 90 AD |  if_e	jmp	#LR__0315
042d4     5B 01 00 FF 
042d8     79 15 06 F6 | 	mov	arg02, ##@LR__4748
042dc     0F 13 02 F6 | 	mov	arg01, local01
042e0     84 7B B1 FD | 	call	#__system___string_cmp
042e4     00 FA 0D F2 | 	cmp	result1, #0 wz
042e8     B4 03 90 AD |  if_e	jmp	#LR__0316
042ec     5B 01 00 FF 
042f0     84 15 06 F6 | 	mov	arg02, ##@LR__4749
042f4     0F 13 02 F6 | 	mov	arg01, local01
042f8     6C 7B B1 FD | 	call	#__system___string_cmp
042fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04300     A4 03 90 AD |  if_e	jmp	#LR__0317
04304     5B 01 00 FF 
04308     8B 15 06 F6 | 	mov	arg02, ##@LR__4750
0430c     0F 13 02 F6 | 	mov	arg01, local01
04310     54 7B B1 FD | 	call	#__system___string_cmp
04314     00 FA 0D F2 | 	cmp	result1, #0 wz
04318     94 03 90 AD |  if_e	jmp	#LR__0318
0431c     5B 01 00 FF 
04320     93 15 06 F6 | 	mov	arg02, ##@LR__4751
04324     0F 13 02 F6 | 	mov	arg01, local01
04328     3C 7B B1 FD | 	call	#__system___string_cmp
0432c     00 FA 0D F2 | 	cmp	result1, #0 wz
04330     84 03 90 AD |  if_e	jmp	#LR__0319
04334     5B 01 00 FF 
04338     99 15 06 F6 | 	mov	arg02, ##@LR__4752
0433c     0F 13 02 F6 | 	mov	arg01, local01
04340     24 7B B1 FD | 	call	#__system___string_cmp
04344     00 FA 0D F2 | 	cmp	result1, #0 wz
04348     74 03 90 AD |  if_e	jmp	#LR__0320
0434c     5B 01 00 FF 
04350     9D 15 06 F6 | 	mov	arg02, ##@LR__4753
04354     0F 13 02 F6 | 	mov	arg01, local01
04358     0C 7B B1 FD | 	call	#__system___string_cmp
0435c     00 FA 0D F2 | 	cmp	result1, #0 wz
04360     64 03 90 AD |  if_e	jmp	#LR__0321
04364     5B 01 00 FF 
04368     A4 15 06 F6 | 	mov	arg02, ##@LR__4754
0436c     0F 13 02 F6 | 	mov	arg01, local01
04370     F4 7A B1 FD | 	call	#__system___string_cmp
04374     00 FA 0D F2 | 	cmp	result1, #0 wz
04378     54 03 90 AD |  if_e	jmp	#LR__0322
0437c     5B 01 00 FF 
04380     A8 15 06 F6 | 	mov	arg02, ##@LR__4755
04384     0F 13 02 F6 | 	mov	arg01, local01
04388     DC 7A B1 FD | 	call	#__system___string_cmp
0438c     00 FA 0D F2 | 	cmp	result1, #0 wz
04390     44 03 90 AD |  if_e	jmp	#LR__0323
04394     5B 01 00 FF 
04398     AD 15 06 F6 | 	mov	arg02, ##@LR__4756
0439c     0F 13 02 F6 | 	mov	arg01, local01
043a0     C4 7A B1 FD | 	call	#__system___string_cmp
043a4     00 FA 0D F2 | 	cmp	result1, #0 wz
043a8     34 03 90 AD |  if_e	jmp	#LR__0324
043ac     5B 01 00 FF 
043b0     B4 15 06 F6 | 	mov	arg02, ##@LR__4757
043b4     0F 13 02 F6 | 	mov	arg01, local01
043b8     AC 7A B1 FD | 	call	#__system___string_cmp
043bc     00 FA 0D F2 | 	cmp	result1, #0 wz
043c0     24 03 90 AD |  if_e	jmp	#LR__0325
043c4     5B 01 00 FF 
043c8     BE 15 06 F6 | 	mov	arg02, ##@LR__4758
043cc     0F 13 02 F6 | 	mov	arg01, local01
043d0     94 7A B1 FD | 	call	#__system___string_cmp
043d4     00 FA 0D F2 | 	cmp	result1, #0 wz
043d8     14 03 90 AD |  if_e	jmp	#LR__0326
043dc     5B 01 00 FF 
043e0     C2 15 06 F6 | 	mov	arg02, ##@LR__4759
043e4     0F 13 02 F6 | 	mov	arg01, local01
043e8     7C 7A B1 FD | 	call	#__system___string_cmp
043ec     00 FA 0D F2 | 	cmp	result1, #0 wz
043f0     04 03 90 AD |  if_e	jmp	#LR__0327
043f4     5B 01 00 FF 
043f8     CA 15 06 F6 | 	mov	arg02, ##@LR__4760
043fc     0F 13 02 F6 | 	mov	arg01, local01
04400     64 7A B1 FD | 	call	#__system___string_cmp
04404     00 FA 0D F2 | 	cmp	result1, #0 wz
04408     F4 02 90 AD |  if_e	jmp	#LR__0328
0440c     5B 01 00 FF 
04410     CE 15 06 F6 | 	mov	arg02, ##@LR__4761
04414     0F 13 02 F6 | 	mov	arg01, local01
04418     4C 7A B1 FD | 	call	#__system___string_cmp
0441c     00 FA 0D F2 | 	cmp	result1, #0 wz
04420     E4 02 90 AD |  if_e	jmp	#LR__0329
04424     5B 01 00 FF 
04428     D4 15 06 F6 | 	mov	arg02, ##@LR__4762
0442c     0F 13 02 F6 | 	mov	arg01, local01
04430     34 7A B1 FD | 	call	#__system___string_cmp
04434     00 FA 0D F2 | 	cmp	result1, #0 wz
04438     D4 02 90 AD |  if_e	jmp	#LR__0330
0443c     D8 02 90 FD | 	jmp	#LR__0331
04440                 | LR__0240
04440     5C FA 05 F6 | 	mov	result1, #92
04444     D4 02 90 FD | 	jmp	#LR__0332
04448                 | LR__0241
04448     5C FA 05 F6 | 	mov	result1, #92
0444c     CC 02 90 FD | 	jmp	#LR__0332
04450                 | LR__0242
04450     47 FA 05 F6 | 	mov	result1, #71
04454     C4 02 90 FD | 	jmp	#LR__0332
04458                 | LR__0243
04458     59 FA 05 F6 | 	mov	result1, #89
0445c     BC 02 90 FD | 	jmp	#LR__0332
04460                 | LR__0244
04460     59 FA 05 F6 | 	mov	result1, #89
04464     B4 02 90 FD | 	jmp	#LR__0332
04468                 | LR__0245
04468     45 FA 05 F6 | 	mov	result1, #69
0446c     AC 02 90 FD | 	jmp	#LR__0332
04470                 | LR__0246
04470     45 FA 05 F6 | 	mov	result1, #69
04474     A4 02 90 FD | 	jmp	#LR__0332
04478                 | LR__0247
04478     69 FA 05 F6 | 	mov	result1, #105
0447c     9C 02 90 FD | 	jmp	#LR__0332
04480                 | LR__0248
04480     40 FA 05 F6 | 	mov	result1, #64
04484     94 02 90 FD | 	jmp	#LR__0332
04488                 | LR__0249
04488     49 FA 05 F6 | 	mov	result1, #73
0448c     8C 02 90 FD | 	jmp	#LR__0332
04490                 | LR__0250
04490     49 FA 05 F6 | 	mov	result1, #73
04494     84 02 90 FD | 	jmp	#LR__0332
04498                 | LR__0251
04498     50 FA 05 F6 | 	mov	result1, #80
0449c     7C 02 90 FD | 	jmp	#LR__0332
044a0                 | LR__0252
044a0     50 FA 05 F6 | 	mov	result1, #80
044a4     74 02 90 FD | 	jmp	#LR__0332
044a8                 | LR__0253
044a8     68 FA 05 F6 | 	mov	result1, #104
044ac     6C 02 90 FD | 	jmp	#LR__0332
044b0                 | LR__0254
044b0     73 FA 05 F6 | 	mov	result1, #115
044b4     64 02 90 FD | 	jmp	#LR__0332
044b8                 | LR__0255
044b8     74 FA 05 F6 | 	mov	result1, #116
044bc     5C 02 90 FD | 	jmp	#LR__0332
044c0                 | LR__0256
044c0     6C FA 05 F6 | 	mov	result1, #108
044c4     54 02 90 FD | 	jmp	#LR__0332
044c8                 | LR__0257
044c8     6C FA 05 F6 | 	mov	result1, #108
044cc     4C 02 90 FD | 	jmp	#LR__0332
044d0                 | LR__0258
044d0     89 FA 05 F6 | 	mov	result1, #137
044d4     44 02 90 FD | 	jmp	#LR__0332
044d8                 | LR__0259
044d8     72 FA 05 F6 | 	mov	result1, #114
044dc     3C 02 90 FD | 	jmp	#LR__0332
044e0                 | LR__0260
044e0     5D FA 05 F6 | 	mov	result1, #93
044e4     34 02 90 FD | 	jmp	#LR__0332
044e8                 | LR__0261
044e8     96 FA 05 F6 | 	mov	result1, #150
044ec     2C 02 90 FD | 	jmp	#LR__0332
044f0                 | LR__0262
044f0     43 FA 05 F6 | 	mov	result1, #67
044f4     24 02 90 FD | 	jmp	#LR__0332
044f8                 | LR__0263
044f8     43 FA 05 F6 | 	mov	result1, #67
044fc     1C 02 90 FD | 	jmp	#LR__0332
04500                 | LR__0264
04500     5A FA 05 F6 | 	mov	result1, #90
04504     14 02 90 FD | 	jmp	#LR__0332
04508                 | LR__0265
04508     46 FA 05 F6 | 	mov	result1, #70
0450c     0C 02 90 FD | 	jmp	#LR__0332
04510                 | LR__0266
04510     46 FA 05 F6 | 	mov	result1, #70
04514     04 02 90 FD | 	jmp	#LR__0332
04518                 | LR__0267
04518     71 FA 05 F6 | 	mov	result1, #113
0451c     FC 01 90 FD | 	jmp	#LR__0332
04520                 | LR__0268
04520     71 FA 05 F6 | 	mov	result1, #113
04524     F4 01 90 FD | 	jmp	#LR__0332
04528                 | LR__0269
04528     60 FA 05 F6 | 	mov	result1, #96
0452c     EC 01 90 FD | 	jmp	#LR__0332
04530                 | LR__0270
04530     4A FA 05 F6 | 	mov	result1, #74
04534     E4 01 90 FD | 	jmp	#LR__0332
04538                 | LR__0271
04538     4A FA 05 F6 | 	mov	result1, #74
0453c     DC 01 90 FD | 	jmp	#LR__0332
04540                 | LR__0272
04540     48 FA 05 F6 | 	mov	result1, #72
04544     D4 01 90 FD | 	jmp	#LR__0332
04548                 | LR__0273
04548     48 FA 05 F6 | 	mov	result1, #72
0454c     CC 01 90 FD | 	jmp	#LR__0332
04550                 | LR__0274
04550     4E FA 05 F6 | 	mov	result1, #78
04554     C4 01 90 FD | 	jmp	#LR__0332
04558                 | LR__0275
04558     4E FA 05 F6 | 	mov	result1, #78
0455c     BC 01 90 FD | 	jmp	#LR__0332
04560                 | LR__0276
04560     58 FA 05 F6 | 	mov	result1, #88
04564     B4 01 90 FD | 	jmp	#LR__0332
04568                 | LR__0277
04568     5F FA 05 F6 | 	mov	result1, #95
0456c     AC 01 90 FD | 	jmp	#LR__0332
04570                 | LR__0278
04570     5F FA 05 F6 | 	mov	result1, #95
04574     A4 01 90 FD | 	jmp	#LR__0332
04578                 | LR__0279
04578     8A FA 05 F6 | 	mov	result1, #138
0457c     9C 01 90 FD | 	jmp	#LR__0332
04580                 | LR__0280
04580     4C FA 05 F6 | 	mov	result1, #76
04584     94 01 90 FD | 	jmp	#LR__0332
04588                 | LR__0281
04588     4C FA 05 F6 | 	mov	result1, #76
0458c     8C 01 90 FD | 	jmp	#LR__0332
04590                 | LR__0282
04590     52 FA 05 F6 | 	mov	result1, #82
04594     84 01 90 FD | 	jmp	#LR__0332
04598                 | LR__0283
04598     52 FA 05 F6 | 	mov	result1, #82
0459c     7C 01 90 FD | 	jmp	#LR__0332
045a0                 | LR__0284
045a0     97 FA 05 F6 | 	mov	result1, #151
045a4     74 01 90 FD | 	jmp	#LR__0332
045a8                 | LR__0285
045a8     61 FA 05 F6 | 	mov	result1, #97
045ac     6C 01 90 FD | 	jmp	#LR__0332
045b0                 | LR__0286
045b0     61 FA 05 F6 | 	mov	result1, #97
045b4     64 01 90 FD | 	jmp	#LR__0332
045b8                 | LR__0287
045b8     63 FA 05 F6 | 	mov	result1, #99
045bc     5C 01 90 FD | 	jmp	#LR__0332
045c0                 | LR__0288
045c0     41 FA 05 F6 | 	mov	result1, #65
045c4     54 01 90 FD | 	jmp	#LR__0332
045c8                 | LR__0289
045c8     4B FA 05 F6 | 	mov	result1, #75
045cc     4C 01 90 FD | 	jmp	#LR__0332
045d0                 | LR__0290
045d0     4B FA 05 F6 | 	mov	result1, #75
045d4     44 01 90 FD | 	jmp	#LR__0332
045d8                 | LR__0291
045d8     5E FA 05 F6 | 	mov	result1, #94
045dc     3C 01 90 FD | 	jmp	#LR__0332
045e0                 | LR__0292
045e0     5E FA 05 F6 | 	mov	result1, #94
045e4     34 01 90 FD | 	jmp	#LR__0332
045e8                 | LR__0293
045e8     7C FA 05 F6 | 	mov	result1, #124
045ec     2C 01 90 FD | 	jmp	#LR__0332
045f0                 | LR__0294
045f0     7E FA 05 F6 | 	mov	result1, #126
045f4     24 01 90 FD | 	jmp	#LR__0332
045f8                 | LR__0295
045f8     7D FA 05 F6 | 	mov	result1, #125
045fc     1C 01 90 FD | 	jmp	#LR__0332
04600                 | LR__0296
04600     7F FA 05 F6 | 	mov	result1, #127
04604     14 01 90 FD | 	jmp	#LR__0332
04608                 | LR__0297
04608     80 FA 05 F6 | 	mov	result1, #128
0460c     0C 01 90 FD | 	jmp	#LR__0332
04610                 | LR__0298
04610     55 FA 05 F6 | 	mov	result1, #85
04614     04 01 90 FD | 	jmp	#LR__0332
04618                 | LR__0299
04618     75 FA 05 F6 | 	mov	result1, #117
0461c     FC 00 90 FD | 	jmp	#LR__0332
04620                 | LR__0300
04620     42 FA 05 F6 | 	mov	result1, #66
04624     F4 00 90 FD | 	jmp	#LR__0332
04628                 | LR__0301
04628     42 FA 05 F6 | 	mov	result1, #66
0462c     EC 00 90 FD | 	jmp	#LR__0332
04630                 | LR__0302
04630     95 FA 05 F6 | 	mov	result1, #149
04634     E4 00 90 FD | 	jmp	#LR__0332
04638                 | LR__0303
04638     81 FA 05 F6 | 	mov	result1, #129
0463c     DC 00 90 FD | 	jmp	#LR__0332
04640                 | LR__0304
04640     81 FA 05 F6 | 	mov	result1, #129
04644     D4 00 90 FD | 	jmp	#LR__0332
04648                 | LR__0305
04648     44 FA 05 F6 | 	mov	result1, #68
0464c     CC 00 90 FD | 	jmp	#LR__0332
04650                 | LR__0306
04650     44 FA 05 F6 | 	mov	result1, #68
04654     C4 00 90 FD | 	jmp	#LR__0332
04658                 | LR__0307
04658     88 FA 05 F6 | 	mov	result1, #136
0465c     BC 00 90 FD | 	jmp	#LR__0332
04660                 | LR__0308
04660     92 FA 05 F6 | 	mov	result1, #146
04664     B4 00 90 FD | 	jmp	#LR__0332
04668                 | LR__0309
04668     4D FA 05 F6 | 	mov	result1, #77
0466c     AC 00 90 FD | 	jmp	#LR__0332
04670                 | LR__0310
04670     51 FA 05 F6 | 	mov	result1, #81
04674     A4 00 90 FD | 	jmp	#LR__0332
04678                 | LR__0311
04678     51 FA 05 F6 | 	mov	result1, #81
0467c     9C 00 90 FD | 	jmp	#LR__0332
04680                 | LR__0312
04680     8E FA 05 F6 | 	mov	result1, #142
04684     94 00 90 FD | 	jmp	#LR__0332
04688                 | LR__0313
04688     90 FA 05 F6 | 	mov	result1, #144
0468c     8C 00 90 FD | 	jmp	#LR__0332
04690                 | LR__0314
04690     8D FA 05 F6 | 	mov	result1, #141
04694     84 00 90 FD | 	jmp	#LR__0332
04698                 | LR__0315
04698     8C FA 05 F6 | 	mov	result1, #140
0469c     7C 00 90 FD | 	jmp	#LR__0332
046a0                 | LR__0316
046a0     91 FA 05 F6 | 	mov	result1, #145
046a4     74 00 90 FD | 	jmp	#LR__0332
046a8                 | LR__0317
046a8     8B FA 05 F6 | 	mov	result1, #139
046ac     6C 00 90 FD | 	jmp	#LR__0332
046b0                 | LR__0318
046b0     8F FA 05 F6 | 	mov	result1, #143
046b4     64 00 90 FD | 	jmp	#LR__0332
046b8                 | LR__0319
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     5C 00 90 FD | 	jmp	#LR__0332
046c0                 | LR__0320
046c0     75 FA 05 F6 | 	mov	result1, #117
046c4     54 00 90 FD | 	jmp	#LR__0332
046c8                 | LR__0321
046c8     6D FA 05 F6 | 	mov	result1, #109
046cc     4C 00 90 FD | 	jmp	#LR__0332
046d0                 | LR__0322
046d0     6D FA 05 F6 | 	mov	result1, #109
046d4     44 00 90 FD | 	jmp	#LR__0332
046d8                 | LR__0323
046d8     5B FA 05 F6 | 	mov	result1, #91
046dc     3C 00 90 FD | 	jmp	#LR__0332
046e0                 | LR__0324
046e0     56 FA 05 F6 | 	mov	result1, #86
046e4     34 00 90 FD | 	jmp	#LR__0332
046e8                 | LR__0325
046e8     70 FA 05 F6 | 	mov	result1, #112
046ec     2C 00 90 FD | 	jmp	#LR__0332
046f0                 | LR__0326
046f0     70 FA 05 F6 | 	mov	result1, #112
046f4     24 00 90 FD | 	jmp	#LR__0332
046f8                 | LR__0327
046f8     57 FA 05 F6 | 	mov	result1, #87
046fc     1C 00 90 FD | 	jmp	#LR__0332
04700                 | LR__0328
04700     57 FA 05 F6 | 	mov	result1, #87
04704     14 00 90 FD | 	jmp	#LR__0332
04708                 | LR__0329
04708     77 FA 05 F6 | 	mov	result1, #119
0470c     0C 00 90 FD | 	jmp	#LR__0332
04710                 | LR__0330
04710     78 FA 05 F6 | 	mov	result1, #120
04714     04 00 90 FD | 	jmp	#LR__0332
04718                 | LR__0331
04718     00 FA 05 F6 | 	mov	result1, #0
0471c                 | LR__0332
0471c     A7 F0 03 F6 | 	mov	ptra, fp
04720     B2 00 A0 FD | 	call	#popregs_
04724                 | _iscommand_ret
04724     2D 00 64 FD | 	ret
04728                 | 
04728                 | ' 
04728                 | ' function isfunction(s as string) as ubyte
04728                 | _isfunction
04728     01 4A 05 F6 | 	mov	COUNT_, #1
0472c     A8 00 A0 FD | 	call	#pushregs_
04730                 | ' 
04730                 | ' select case s
04730     09 1F 02 F6 | 	mov	local01, arg01
04734     5B 01 00 FF 
04738     DA 15 06 F6 | 	mov	arg02, ##@LR__4763
0473c     0F 13 02 F6 | 	mov	arg01, local01
04740     24 77 B1 FD | 	call	#__system___string_cmp
04744     00 FA 0D F2 | 	cmp	result1, #0 wz
04748     A4 02 90 AD |  if_e	jmp	#LR__0340
0474c     5B 01 00 FF 
04750     DF 15 06 F6 | 	mov	arg02, ##@LR__4764
04754     0F 13 02 F6 | 	mov	arg01, local01
04758     0C 77 B1 FD | 	call	#__system___string_cmp
0475c     00 FA 0D F2 | 	cmp	result1, #0 wz
04760     94 02 90 AD |  if_e	jmp	#LR__0341
04764     5B 01 00 FF 
04768     E3 15 06 F6 | 	mov	arg02, ##@LR__4765
0476c     0F 13 02 F6 | 	mov	arg01, local01
04770     F4 76 B1 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     84 02 90 AD |  if_e	jmp	#LR__0342
0477c     5B 01 00 FF 
04780     E8 15 06 F6 | 	mov	arg02, ##@LR__4766
04784     0F 13 02 F6 | 	mov	arg01, local01
04788     DC 76 B1 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     74 02 90 AD |  if_e	jmp	#LR__0343
04794     5B 01 00 FF 
04798     EF 15 06 F6 | 	mov	arg02, ##@LR__4767
0479c     0F 13 02 F6 | 	mov	arg01, local01
047a0     C4 76 B1 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     64 02 90 AD |  if_e	jmp	#LR__0344
047ac     5B 01 00 FF 
047b0     F4 15 06 F6 | 	mov	arg02, ##@LR__4768
047b4     0F 13 02 F6 | 	mov	arg01, local01
047b8     AC 76 B1 FD | 	call	#__system___string_cmp
047bc     00 FA 0D F2 | 	cmp	result1, #0 wz
047c0     54 02 90 AD |  if_e	jmp	#LR__0345
047c4     5B 01 00 FF 
047c8     F8 15 06 F6 | 	mov	arg02, ##@LR__4769
047cc     0F 13 02 F6 | 	mov	arg01, local01
047d0     94 76 B1 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     44 02 90 AD |  if_e	jmp	#LR__0346
047dc     5B 01 00 FF 
047e0     FC 15 06 F6 | 	mov	arg02, ##@LR__4770
047e4     0F 13 02 F6 | 	mov	arg01, local01
047e8     7C 76 B1 FD | 	call	#__system___string_cmp
047ec     00 FA 0D F2 | 	cmp	result1, #0 wz
047f0     34 02 90 AD |  if_e	jmp	#LR__0347
047f4     5C 01 00 FF 
047f8     02 14 06 F6 | 	mov	arg02, ##@LR__4771
047fc     0F 13 02 F6 | 	mov	arg01, local01
04800     64 76 B1 FD | 	call	#__system___string_cmp
04804     00 FA 0D F2 | 	cmp	result1, #0 wz
04808     24 02 90 AD |  if_e	jmp	#LR__0348
0480c     5C 01 00 FF 
04810     06 14 06 F6 | 	mov	arg02, ##@LR__4772
04814     0F 13 02 F6 | 	mov	arg01, local01
04818     4C 76 B1 FD | 	call	#__system___string_cmp
0481c     00 FA 0D F2 | 	cmp	result1, #0 wz
04820     14 02 90 AD |  if_e	jmp	#LR__0349
04824     5C 01 00 FF 
04828     0F 14 06 F6 | 	mov	arg02, ##@LR__4773
0482c     0F 13 02 F6 | 	mov	arg01, local01
04830     34 76 B1 FD | 	call	#__system___string_cmp
04834     00 FA 0D F2 | 	cmp	result1, #0 wz
04838     04 02 90 AD |  if_e	jmp	#LR__0350
0483c     5C 01 00 FF 
04840     13 14 06 F6 | 	mov	arg02, ##@LR__4774
04844     0F 13 02 F6 | 	mov	arg01, local01
04848     1C 76 B1 FD | 	call	#__system___string_cmp
0484c     00 FA 0D F2 | 	cmp	result1, #0 wz
04850     F4 01 90 AD |  if_e	jmp	#LR__0351
04854     5C 01 00 FF 
04858     21 14 06 F6 | 	mov	arg02, ##@LR__4775
0485c     0F 13 02 F6 | 	mov	arg01, local01
04860     04 76 B1 FD | 	call	#__system___string_cmp
04864     00 FA 0D F2 | 	cmp	result1, #0 wz
04868     E4 01 90 AD |  if_e	jmp	#LR__0352
0486c     5C 01 00 FF 
04870     2E 14 06 F6 | 	mov	arg02, ##@LR__4776
04874     0F 13 02 F6 | 	mov	arg01, local01
04878     EC 75 B1 FD | 	call	#__system___string_cmp
0487c     00 FA 0D F2 | 	cmp	result1, #0 wz
04880     D4 01 90 AD |  if_e	jmp	#LR__0353
04884     5C 01 00 FF 
04888     36 14 06 F6 | 	mov	arg02, ##@LR__4777
0488c     0F 13 02 F6 | 	mov	arg01, local01
04890     D4 75 B1 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     C4 01 90 AD |  if_e	jmp	#LR__0354
0489c     5C 01 00 FF 
048a0     3C 14 06 F6 | 	mov	arg02, ##@LR__4778
048a4     0F 13 02 F6 | 	mov	arg01, local01
048a8     BC 75 B1 FD | 	call	#__system___string_cmp
048ac     00 FA 0D F2 | 	cmp	result1, #0 wz
048b0     B4 01 90 AD |  if_e	jmp	#LR__0355
048b4     5C 01 00 FF 
048b8     43 14 06 F6 | 	mov	arg02, ##@LR__4779
048bc     0F 13 02 F6 | 	mov	arg01, local01
048c0     A4 75 B1 FD | 	call	#__system___string_cmp
048c4     00 FA 0D F2 | 	cmp	result1, #0 wz
048c8     A4 01 90 AD |  if_e	jmp	#LR__0356
048cc     5C 01 00 FF 
048d0     4A 14 06 F6 | 	mov	arg02, ##@LR__4780
048d4     0F 13 02 F6 | 	mov	arg01, local01
048d8     8C 75 B1 FD | 	call	#__system___string_cmp
048dc     00 FA 0D F2 | 	cmp	result1, #0 wz
048e0     94 01 90 AD |  if_e	jmp	#LR__0357
048e4     5C 01 00 FF 
048e8     51 14 06 F6 | 	mov	arg02, ##@LR__4781
048ec     0F 13 02 F6 | 	mov	arg01, local01
048f0     74 75 B1 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     84 01 90 AD |  if_e	jmp	#LR__0358
048fc     5C 01 00 FF 
04900     58 14 06 F6 | 	mov	arg02, ##@LR__4782
04904     0F 13 02 F6 | 	mov	arg01, local01
04908     5C 75 B1 FD | 	call	#__system___string_cmp
0490c     00 FA 0D F2 | 	cmp	result1, #0 wz
04910     74 01 90 AD |  if_e	jmp	#LR__0359
04914     5C 01 00 FF 
04918     5D 14 06 F6 | 	mov	arg02, ##@LR__4783
0491c     0F 13 02 F6 | 	mov	arg01, local01
04920     44 75 B1 FD | 	call	#__system___string_cmp
04924     00 FA 0D F2 | 	cmp	result1, #0 wz
04928     64 01 90 AD |  if_e	jmp	#LR__0360
0492c     5C 01 00 FF 
04930     65 14 06 F6 | 	mov	arg02, ##@LR__4784
04934     0F 13 02 F6 | 	mov	arg01, local01
04938     2C 75 B1 FD | 	call	#__system___string_cmp
0493c     00 FA 0D F2 | 	cmp	result1, #0 wz
04940     54 01 90 AD |  if_e	jmp	#LR__0361
04944     5C 01 00 FF 
04948     6B 14 06 F6 | 	mov	arg02, ##@LR__4785
0494c     0F 13 02 F6 | 	mov	arg01, local01
04950     14 75 B1 FD | 	call	#__system___string_cmp
04954     00 FA 0D F2 | 	cmp	result1, #0 wz
04958     44 01 90 AD |  if_e	jmp	#LR__0362
0495c     5C 01 00 FF 
04960     71 14 06 F6 | 	mov	arg02, ##@LR__4786
04964     0F 13 02 F6 | 	mov	arg01, local01
04968     FC 74 B1 FD | 	call	#__system___string_cmp
0496c     00 FA 0D F2 | 	cmp	result1, #0 wz
04970     34 01 90 AD |  if_e	jmp	#LR__0363
04974     5C 01 00 FF 
04978     75 14 06 F6 | 	mov	arg02, ##@LR__4787
0497c     0F 13 02 F6 | 	mov	arg01, local01
04980     E4 74 B1 FD | 	call	#__system___string_cmp
04984     00 FA 0D F2 | 	cmp	result1, #0 wz
04988     24 01 90 AD |  if_e	jmp	#LR__0364
0498c     5C 01 00 FF 
04990     79 14 06 F6 | 	mov	arg02, ##@LR__4788
04994     0F 13 02 F6 | 	mov	arg01, local01
04998     CC 74 B1 FD | 	call	#__system___string_cmp
0499c     00 FA 0D F2 | 	cmp	result1, #0 wz
049a0     14 01 90 AD |  if_e	jmp	#LR__0365
049a4     5C 01 00 FF 
049a8     7D 14 06 F6 | 	mov	arg02, ##@LR__4789
049ac     0F 13 02 F6 | 	mov	arg01, local01
049b0     B4 74 B1 FD | 	call	#__system___string_cmp
049b4     00 FA 0D F2 | 	cmp	result1, #0 wz
049b8     04 01 90 AD |  if_e	jmp	#LR__0366
049bc     5C 01 00 FF 
049c0     83 14 06 F6 | 	mov	arg02, ##@LR__4790
049c4     0F 13 02 F6 | 	mov	arg01, local01
049c8     9C 74 B1 FD | 	call	#__system___string_cmp
049cc     00 FA 0D F2 | 	cmp	result1, #0 wz
049d0     F4 00 90 AD |  if_e	jmp	#LR__0367
049d4     5C 01 00 FF 
049d8     89 14 06 F6 | 	mov	arg02, ##@LR__4791
049dc     0F 13 02 F6 | 	mov	arg01, local01
049e0     84 74 B1 FD | 	call	#__system___string_cmp
049e4     00 FA 0D F2 | 	cmp	result1, #0 wz
049e8     E4 00 90 AD |  if_e	jmp	#LR__0368
049ec     E8 00 90 FD | 	jmp	#LR__0369
049f0                 | LR__0340
049f0     85 FA 05 F6 | 	mov	result1, #133
049f4     E4 00 90 FD | 	jmp	#LR__0370
049f8                 | LR__0341
049f8     9B FA 05 F6 | 	mov	result1, #155
049fc     DC 00 90 FD | 	jmp	#LR__0370
04a00                 | LR__0342
04a00     9B FA 05 F6 | 	mov	result1, #155
04a04     D4 00 90 FD | 	jmp	#LR__0370
04a08                 | LR__0343
04a08     9B FA 05 F6 | 	mov	result1, #155
04a0c     CC 00 90 FD | 	jmp	#LR__0370
04a10                 | LR__0344
04a10     84 FA 05 F6 | 	mov	result1, #132
04a14     C4 00 90 FD | 	jmp	#LR__0370
04a18                 | LR__0345
04a18     86 FA 05 F6 | 	mov	result1, #134
04a1c     BC 00 90 FD | 	jmp	#LR__0370
04a20                 | LR__0346
04a20     82 FA 05 F6 | 	mov	result1, #130
04a24     B4 00 90 FD | 	jmp	#LR__0370
04a28                 | LR__0347
04a28     99 FA 05 F6 | 	mov	result1, #153
04a2c     AC 00 90 FD | 	jmp	#LR__0370
04a30                 | LR__0348
04a30     9C FA 05 F6 | 	mov	result1, #156
04a34     A4 00 90 FD | 	jmp	#LR__0370
04a38                 | LR__0349
04a38     6F FA 05 F6 | 	mov	result1, #111
04a3c     9C 00 90 FD | 	jmp	#LR__0370
04a40                 | LR__0350
04a40     6F FA 05 F6 | 	mov	result1, #111
04a44     94 00 90 FD | 	jmp	#LR__0370
04a48                 | LR__0351
04a48     93 FA 05 F6 | 	mov	result1, #147
04a4c     8C 00 90 FD | 	jmp	#LR__0370
04a50                 | LR__0352
04a50     94 FA 05 F6 | 	mov	result1, #148
04a54     84 00 90 FD | 	jmp	#LR__0370
04a58                 | LR__0353
04a58     62 FA 05 F6 | 	mov	result1, #98
04a5c     7C 00 90 FD | 	jmp	#LR__0370
04a60                 | LR__0354
04a60     9A FA 05 F6 | 	mov	result1, #154
04a64     74 00 90 FD | 	jmp	#LR__0370
04a68                 | LR__0355
04a68     66 FA 05 F6 | 	mov	result1, #102
04a6c     6C 00 90 FD | 	jmp	#LR__0370
04a70                 | LR__0356
04a70     67 FA 05 F6 | 	mov	result1, #103
04a74     64 00 90 FD | 	jmp	#LR__0370
04a78                 | LR__0357
04a78     64 FA 05 F6 | 	mov	result1, #100
04a7c     5C 00 90 FD | 	jmp	#LR__0370
04a80                 | LR__0358
04a80     65 FA 05 F6 | 	mov	result1, #101
04a84     54 00 90 FD | 	jmp	#LR__0370
04a88                 | LR__0359
04a88     98 FA 05 F6 | 	mov	result1, #152
04a8c     4C 00 90 FD | 	jmp	#LR__0370
04a90                 | LR__0360
04a90     7B FA 05 F6 | 	mov	result1, #123
04a94     44 00 90 FD | 	jmp	#LR__0370
04a98                 | LR__0361
04a98     76 FA 05 F6 | 	mov	result1, #118
04a9c     3C 00 90 FD | 	jmp	#LR__0370
04aa0                 | LR__0362
04aa0     7A FA 05 F6 | 	mov	result1, #122
04aa4     34 00 90 FD | 	jmp	#LR__0370
04aa8                 | LR__0363
04aa8     54 FA 05 F6 | 	mov	result1, #84
04aac     2C 00 90 FD | 	jmp	#LR__0370
04ab0                 | LR__0364
04ab0     6B FA 05 F6 | 	mov	result1, #107
04ab4     24 00 90 FD | 	jmp	#LR__0370
04ab8                 | LR__0365
04ab8     87 FA 05 F6 | 	mov	result1, #135
04abc     1C 00 90 FD | 	jmp	#LR__0370
04ac0                 | LR__0366
04ac0     6A FA 05 F6 | 	mov	result1, #106
04ac4     14 00 90 FD | 	jmp	#LR__0370
04ac8                 | LR__0367
04ac8     6E FA 05 F6 | 	mov	result1, #110
04acc     0C 00 90 FD | 	jmp	#LR__0370
04ad0                 | LR__0368
04ad0     83 FA 05 F6 | 	mov	result1, #131
04ad4     04 00 90 FD | 	jmp	#LR__0370
04ad8                 | LR__0369
04ad8     00 FA 05 F6 | 	mov	result1, #0
04adc                 | LR__0370
04adc     A7 F0 03 F6 | 	mov	ptra, fp
04ae0     B2 00 A0 FD | 	call	#popregs_
04ae4                 | _isfunction_ret
04ae4     2D 00 64 FD | 	ret
04ae8                 | 
04ae8                 | ' 
04ae8                 | ' function isname(s as string) as boolean
04ae8                 | _isname
04ae8     0D 4A 05 F6 | 	mov	COUNT_, #13
04aec     A8 00 A0 FD | 	call	#pushregs_
04af0     09 1F 02 F6 | 	mov	local01, arg01
04af4     09 21 02 F6 | 	mov	local02, arg01
04af8     97 06 48 FB | 	callpa	#(@LR__0381-@LR__0380)>>2,fcache_load_ptr_
04afc                 | LR__0380
04afc     10 FB C9 FA | 	rdbyte	result1, local02 wz
04b00     01 20 06 51 |  if_ne	add	local02, #1
04b04     F4 FF 9F 5D |  if_ne	jmp	#LR__0380
04b08                 | LR__0381
04b08     09 21 82 F1 | 	sub	local02, arg01
04b0c     10 FB 01 F6 | 	mov	result1, local02
04b10     FD 22 0A F6 | 	mov	local03, result1 wz
04b14     00 FA 05 A6 |  if_e	mov	result1, #0
04b18     34 02 90 AD |  if_e	jmp	#LR__0393
04b1c     0F 13 02 F6 | 	mov	arg01, local01
04b20     01 14 06 F6 | 	mov	arg02, #1
04b24     01 16 06 F6 | 	mov	arg03, #1
04b28     70 94 B1 FD | 	call	#__system__Mid_S
04b2c     FD 24 02 F6 | 	mov	local04, result1
04b30                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04b30     5C 01 00 FF 
04b34     8D 14 06 F6 | 	mov	arg02, ##@LR__4792
04b38     12 13 02 F6 | 	mov	arg01, local04
04b3c     28 73 B1 FD | 	call	#__system___string_cmp
04b40     00 FA 55 F2 | 	cmps	result1, #0 wc
04b44     18 00 90 CD |  if_b	jmp	#LR__0382
04b48     5C 01 00 FF 
04b4c     8F 14 06 F6 | 	mov	arg02, ##@LR__4793
04b50     12 13 02 F6 | 	mov	arg01, local04
04b54     10 73 B1 FD | 	call	#__system___string_cmp
04b58     01 FA 55 F2 | 	cmps	result1, #1 wc
04b5c     1C 00 90 CD |  if_b	jmp	#LR__0383
04b60                 | LR__0382
04b60     5C 01 00 FF 
04b64     91 14 06 F6 | 	mov	arg02, ##@LR__4794
04b68     12 13 02 F6 | 	mov	arg01, local04
04b6c     F8 72 B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     00 FA 05 56 |  if_ne	mov	result1, #0
04b78     D4 01 90 5D |  if_ne	jmp	#LR__0393
04b7c                 | LR__0383
04b7c                 | ' if l>2 then 
04b7c     03 22 56 F2 | 	cmps	local03, #3 wc
04b80     C8 01 90 CD |  if_b	jmp	#LR__0392
04b84                 | '   for i=2 to l
04b84     02 26 06 F6 | 	mov	local05, #2
04b88     11 29 02 F6 | 	mov	local06, local03
04b8c     01 28 06 F1 | 	add	local06, #1
04b90                 | LR__0384
04b90     14 27 52 F2 | 	cmps	local05, local06 wc
04b94     B4 01 90 3D |  if_ae	jmp	#LR__0391
04b98     0F 13 02 F6 | 	mov	arg01, local01
04b9c     13 15 02 F6 | 	mov	arg02, local05
04ba0     01 16 06 F6 | 	mov	arg03, #1
04ba4     F4 93 B1 FD | 	call	#__system__Mid_S
04ba8     FD 24 02 F6 | 	mov	local04, result1
04bac                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04bac     11 27 52 F2 | 	cmps	local05, local03 wc
04bb0     9C 00 90 3D |  if_ae	jmp	#LR__0387
04bb4     5C 01 00 FF 
04bb8     93 14 06 F6 | 	mov	arg02, ##@LR__4795
04bbc     12 13 02 F6 | 	mov	arg01, local04
04bc0     A4 72 B1 FD | 	call	#__system___string_cmp
04bc4     00 FA 55 F2 | 	cmps	result1, #0 wc
04bc8     18 00 90 CD |  if_b	jmp	#LR__0385
04bcc     5C 01 00 FF 
04bd0     95 14 06 F6 | 	mov	arg02, ##@LR__4796
04bd4     12 13 02 F6 | 	mov	arg01, local04
04bd8     8C 72 B1 FD | 	call	#__system___string_cmp
04bdc     01 FA 55 F2 | 	cmps	result1, #1 wc
04be0     6C 00 90 CD |  if_b	jmp	#LR__0387
04be4                 | LR__0385
04be4     5C 01 00 FF 
04be8     97 14 06 F6 | 	mov	arg02, ##@LR__4797
04bec     12 13 02 F6 | 	mov	arg01, local04
04bf0     74 72 B1 FD | 	call	#__system___string_cmp
04bf4     00 FA 55 F2 | 	cmps	result1, #0 wc
04bf8     18 00 90 CD |  if_b	jmp	#LR__0386
04bfc     5C 01 00 FF 
04c00     99 14 06 F6 | 	mov	arg02, ##@LR__4798
04c04     12 13 02 F6 | 	mov	arg01, local04
04c08     5C 72 B1 FD | 	call	#__system___string_cmp
04c0c     01 FA 55 F2 | 	cmps	result1, #1 wc
04c10     3C 00 90 CD |  if_b	jmp	#LR__0387
04c14                 | LR__0386
04c14     5C 01 00 FF 
04c18     9B 2A 06 F6 | 	mov	local07, ##@LR__4799
04c1c     12 13 02 F6 | 	mov	arg01, local04
04c20     15 15 02 F6 | 	mov	arg02, local07
04c24     40 72 B1 FD | 	call	#__system___string_cmp
04c28     00 FA 0D F2 | 	cmp	result1, #0 wz
04c2c     20 00 90 AD |  if_e	jmp	#LR__0387
04c30     5C 01 00 FF 
04c34     9D 2C 06 F6 | 	mov	local08, ##@LR__4800
04c38     12 13 02 F6 | 	mov	arg01, local04
04c3c     16 15 02 F6 | 	mov	arg02, local08
04c40     24 72 B1 FD | 	call	#__system___string_cmp
04c44     FD 2E 0A F6 | 	mov	local09, result1 wz
04c48     00 FA 05 56 |  if_ne	mov	result1, #0
04c4c     00 01 90 5D |  if_ne	jmp	#LR__0393
04c50                 | LR__0387
04c50                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04c50     11 27 0A F2 | 	cmp	local05, local03 wz
04c54     EC 00 90 5D |  if_ne	jmp	#LR__0390
04c58     5C 01 00 FF 
04c5c     9F 30 06 F6 | 	mov	local10, ##@LR__4801
04c60     12 13 02 F6 | 	mov	arg01, local04
04c64     18 15 02 F6 | 	mov	arg02, local10
04c68     FC 71 B1 FD | 	call	#__system___string_cmp
04c6c     FD 32 02 F6 | 	mov	local11, result1
04c70     00 32 56 F2 | 	cmps	local11, #0 wc
04c74     1C 00 90 CD |  if_b	jmp	#LR__0388
04c78     5C 01 00 FF 
04c7c     A1 14 06 F6 | 	mov	arg02, ##@LR__4802
04c80     12 13 02 F6 | 	mov	arg01, local04
04c84     E0 71 B1 FD | 	call	#__system___string_cmp
04c88     FD 30 02 F6 | 	mov	local10, result1
04c8c     01 30 56 F2 | 	cmps	local10, #1 wc
04c90     B0 00 90 CD |  if_b	jmp	#LR__0390
04c94                 | LR__0388
04c94     5C 01 00 FF 
04c98     A3 14 06 F6 | 	mov	arg02, ##@LR__4803
04c9c     12 13 02 F6 | 	mov	arg01, local04
04ca0     C4 71 B1 FD | 	call	#__system___string_cmp
04ca4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ca8     1C 00 90 CD |  if_b	jmp	#LR__0389
04cac     5C 01 00 FF 
04cb0     A5 2E 06 F6 | 	mov	local09, ##@LR__4804
04cb4     12 13 02 F6 | 	mov	arg01, local04
04cb8     17 15 02 F6 | 	mov	arg02, local09
04cbc     A8 71 B1 FD | 	call	#__system___string_cmp
04cc0     01 FA 55 F2 | 	cmps	result1, #1 wc
04cc4     7C 00 90 CD |  if_b	jmp	#LR__0390
04cc8                 | LR__0389
04cc8     5C 01 00 FF 
04ccc     A7 2E 06 F6 | 	mov	local09, ##@LR__4805
04cd0     12 13 02 F6 | 	mov	arg01, local04
04cd4     17 15 02 F6 | 	mov	arg02, local09
04cd8     8C 71 B1 FD | 	call	#__system___string_cmp
04cdc     00 FA 4D F2 | 	cmps	result1, #0 wz
04ce0     60 00 90 AD |  if_e	jmp	#LR__0390
04ce4     5C 01 00 FF 
04ce8     A9 2C 06 F6 | 	mov	local08, ##@LR__4806
04cec     12 13 02 F6 | 	mov	arg01, local04
04cf0     16 15 02 F6 | 	mov	arg02, local08
04cf4     70 71 B1 FD | 	call	#__system___string_cmp
04cf8     FD 2E 0A F6 | 	mov	local09, result1 wz
04cfc     44 00 90 AD |  if_e	jmp	#LR__0390
04d00     5C 01 00 FF 
04d04     AB 34 06 F6 | 	mov	local12, ##@LR__4807
04d08     1A 2D 02 F6 | 	mov	local08, local12
04d0c     12 13 02 F6 | 	mov	arg01, local04
04d10     16 15 02 F6 | 	mov	arg02, local08
04d14     50 71 B1 FD | 	call	#__system___string_cmp
04d18     FD 2A 0A F6 | 	mov	local07, result1 wz
04d1c     24 00 90 AD |  if_e	jmp	#LR__0390
04d20     5C 01 00 FF 
04d24     AD 36 06 F6 | 	mov	local13, ##@LR__4808
04d28     1B 35 02 F6 | 	mov	local12, local13
04d2c     12 13 02 F6 | 	mov	arg01, local04
04d30     1A 15 02 F6 | 	mov	arg02, local12
04d34     30 71 B1 FD | 	call	#__system___string_cmp
04d38     FD 2C 0A F6 | 	mov	local08, result1 wz
04d3c     00 FA 05 56 |  if_ne	mov	result1, #0
04d40     0C 00 90 5D |  if_ne	jmp	#LR__0393
04d44                 | LR__0390
04d44     01 26 06 F1 | 	add	local05, #1
04d48     44 FE 9F FD | 	jmp	#LR__0384
04d4c                 | LR__0391
04d4c                 | LR__0392
04d4c                 | ' return true
04d4c     01 FA 65 F6 | 	neg	result1, #1
04d50                 | LR__0393
04d50     A7 F0 03 F6 | 	mov	ptra, fp
04d54     B2 00 A0 FD | 	call	#popregs_
04d58                 | _isname_ret
04d58     2D 00 64 FD | 	ret
04d5c                 | 
04d5c                 | ' 
04d5c                 | ' function isnum(s as string) as boolean
04d5c                 | _isnum
04d5c     0D 4A 05 F6 | 	mov	COUNT_, #13
04d60     A8 00 A0 FD | 	call	#pushregs_
04d64     09 1F 02 F6 | 	mov	local01, arg01
04d68     00 20 06 F6 | 	mov	local02, #0
04d6c     00 22 06 F6 | 	mov	local03, #0
04d70     0F 13 02 F6 | 	mov	arg01, local01
04d74     09 25 02 F6 | 	mov	local04, arg01
04d78     97 06 48 FB | 	callpa	#(@LR__0401-@LR__0400)>>2,fcache_load_ptr_
04d7c                 | LR__0400
04d7c     12 FB C9 FA | 	rdbyte	result1, local04 wz
04d80     01 24 06 51 |  if_ne	add	local04, #1
04d84     F4 FF 9F 5D |  if_ne	jmp	#LR__0400
04d88                 | LR__0401
04d88     09 25 82 F1 | 	sub	local04, arg01
04d8c     12 FB 01 F6 | 	mov	result1, local04
04d90     FD 26 0A F6 | 	mov	local05, result1 wz
04d94     00 FA 05 A6 |  if_e	mov	result1, #0
04d98     8C 02 90 AD |  if_e	jmp	#LR__0412
04d9c     0F 13 02 F6 | 	mov	arg01, local01
04da0     01 14 06 F6 | 	mov	arg02, #1
04da4     01 16 06 F6 | 	mov	arg03, #1
04da8     F0 91 B1 FD | 	call	#__system__Mid_S
04dac     FD 28 02 F6 | 	mov	local06, result1
04db0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04db0     5C 01 00 FF 
04db4     AF 14 06 F6 | 	mov	arg02, ##@LR__4809
04db8     14 13 02 F6 | 	mov	arg01, local06
04dbc     A8 70 B1 FD | 	call	#__system___string_cmp
04dc0     00 FA 55 F2 | 	cmps	result1, #0 wc
04dc4     18 00 90 CD |  if_b	jmp	#LR__0402
04dc8     5C 01 00 FF 
04dcc     B1 14 06 F6 | 	mov	arg02, ##@LR__4810
04dd0     14 13 02 F6 | 	mov	arg01, local06
04dd4     90 70 B1 FD | 	call	#__system___string_cmp
04dd8     01 FA 55 F2 | 	cmps	result1, #1 wc
04ddc     78 00 90 CD |  if_b	jmp	#LR__0403
04de0                 | LR__0402
04de0     5C 01 00 FF 
04de4     B3 14 06 F6 | 	mov	arg02, ##@LR__4811
04de8     14 13 02 F6 | 	mov	arg01, local06
04dec     78 70 B1 FD | 	call	#__system___string_cmp
04df0     00 FA 0D F2 | 	cmp	result1, #0 wz
04df4     60 00 90 AD |  if_e	jmp	#LR__0403
04df8     5C 01 00 FF 
04dfc     B5 2A 06 F6 | 	mov	local07, ##@LR__4812
04e00     14 13 02 F6 | 	mov	arg01, local06
04e04     15 15 02 F6 | 	mov	arg02, local07
04e08     5C 70 B1 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     44 00 90 AD |  if_e	jmp	#LR__0403
04e14     5C 01 00 FF 
04e18     B7 2C 06 F6 | 	mov	local08, ##@LR__4813
04e1c     16 2B 02 F6 | 	mov	local07, local08
04e20     14 13 02 F6 | 	mov	arg01, local06
04e24     15 15 02 F6 | 	mov	arg02, local07
04e28     3C 70 B1 FD | 	call	#__system___string_cmp
04e2c     00 FA 4D F2 | 	cmps	result1, #0 wz
04e30     24 00 90 AD |  if_e	jmp	#LR__0403
04e34     5C 01 00 FF 
04e38     B9 2E 06 F6 | 	mov	local09, ##@LR__4814
04e3c     17 2D 02 F6 | 	mov	local08, local09
04e40     14 13 02 F6 | 	mov	arg01, local06
04e44     16 15 02 F6 | 	mov	arg02, local08
04e48     1C 70 B1 FD | 	call	#__system___string_cmp
04e4c     FD 2A 0A F6 | 	mov	local07, result1 wz
04e50     00 FA 05 56 |  if_ne	mov	result1, #0
04e54     D0 01 90 5D |  if_ne	jmp	#LR__0412
04e58                 | LR__0403
04e58                 | ' if m$="." then ds=1
04e58     5C 01 00 FF 
04e5c     BB 14 06 F6 | 	mov	arg02, ##@LR__4815
04e60     14 13 02 F6 | 	mov	arg01, local06
04e64     00 70 B1 FD | 	call	#__system___string_cmp
04e68     00 FA 0D F2 | 	cmp	result1, #0 wz
04e6c     01 20 06 A6 |  if_e	mov	local02, #1
04e70                 | ' if l>1 then 
04e70     02 26 56 F2 | 	cmps	local05, #2 wc
04e74     AC 01 90 CD |  if_b	jmp	#LR__0411
04e78                 | '   for i=2 to l
04e78     02 30 06 F6 | 	mov	local10, #2
04e7c     13 33 02 F6 | 	mov	local11, local05
04e80     01 32 06 F1 | 	add	local11, #1
04e84                 | LR__0404
04e84     19 31 52 F2 | 	cmps	local10, local11 wc
04e88     98 01 90 3D |  if_ae	jmp	#LR__0410
04e8c     0F 13 02 F6 | 	mov	arg01, local01
04e90     18 15 02 F6 | 	mov	arg02, local10
04e94     01 16 06 F6 | 	mov	arg03, #1
04e98     00 91 B1 FD | 	call	#__system__Mid_S
04e9c     FD 28 02 F6 | 	mov	local06, result1
04ea0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
04ea0     5C 01 00 FF 
04ea4     BD 14 06 F6 | 	mov	arg02, ##@LR__4816
04ea8     14 13 02 F6 | 	mov	arg01, local06
04eac     B8 6F B1 FD | 	call	#__system___string_cmp
04eb0     00 FA 55 F2 | 	cmps	result1, #0 wc
04eb4     18 00 90 CD |  if_b	jmp	#LR__0405
04eb8     5C 01 00 FF 
04ebc     BF 14 06 F6 | 	mov	arg02, ##@LR__4817
04ec0     14 13 02 F6 | 	mov	arg01, local06
04ec4     A0 6F B1 FD | 	call	#__system___string_cmp
04ec8     01 FA 55 F2 | 	cmps	result1, #1 wc
04ecc     98 00 90 CD |  if_b	jmp	#LR__0406
04ed0                 | LR__0405
04ed0     5C 01 00 FF 
04ed4     C1 14 06 F6 | 	mov	arg02, ##@LR__4818
04ed8     14 13 02 F6 | 	mov	arg01, local06
04edc     88 6F B1 FD | 	call	#__system___string_cmp
04ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee4     80 00 90 AD |  if_e	jmp	#LR__0406
04ee8     5C 01 00 FF 
04eec     C3 2A 06 F6 | 	mov	local07, ##@LR__4819
04ef0     14 13 02 F6 | 	mov	arg01, local06
04ef4     15 15 02 F6 | 	mov	arg02, local07
04ef8     6C 6F B1 FD | 	call	#__system___string_cmp
04efc     00 FA 4D F2 | 	cmps	result1, #0 wz
04f00     64 00 90 AD |  if_e	jmp	#LR__0406
04f04     5C 01 00 FF 
04f08     C5 2C 06 F6 | 	mov	local08, ##@LR__4820
04f0c     16 2B 02 F6 | 	mov	local07, local08
04f10     14 13 02 F6 | 	mov	arg01, local06
04f14     15 15 02 F6 | 	mov	arg02, local07
04f18     4C 6F B1 FD | 	call	#__system___string_cmp
04f1c     FD 34 0A F6 | 	mov	local12, result1 wz
04f20     44 00 90 AD |  if_e	jmp	#LR__0406
04f24     5C 01 00 FF 
04f28     C7 2E 06 F6 | 	mov	local09, ##@LR__4821
04f2c     17 2D 02 F6 | 	mov	local08, local09
04f30     14 13 02 F6 | 	mov	arg01, local06
04f34     16 15 02 F6 | 	mov	arg02, local08
04f38     2C 6F B1 FD | 	call	#__system___string_cmp
04f3c     FD 2A 0A F6 | 	mov	local07, result1 wz
04f40     24 00 90 AD |  if_e	jmp	#LR__0406
04f44     5C 01 00 FF 
04f48     C9 36 06 F6 | 	mov	local13, ##@LR__4822
04f4c     1B 2F 02 F6 | 	mov	local09, local13
04f50     14 13 02 F6 | 	mov	arg01, local06
04f54     17 15 02 F6 | 	mov	arg02, local09
04f58     0C 6F B1 FD | 	call	#__system___string_cmp
04f5c     FD 2C 0A F6 | 	mov	local08, result1 wz
04f60     00 FA 05 56 |  if_ne	mov	result1, #0
04f64     C0 00 90 5D |  if_ne	jmp	#LR__0412
04f68                 | LR__0406
04f68                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
04f68     5C 01 00 FF 
04f6c     CB 14 06 F6 | 	mov	arg02, ##@LR__4823
04f70     14 13 02 F6 | 	mov	arg01, local06
04f74     F0 6E B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     38 00 90 5D |  if_ne	jmp	#LR__0407
04f80     18 15 02 F6 | 	mov	arg02, local10
04f84     01 14 86 F1 | 	sub	arg02, #1
04f88     0F 13 02 F6 | 	mov	arg01, local01
04f8c     01 16 06 F6 | 	mov	arg03, #1
04f90     08 90 B1 FD | 	call	#__system__Mid_S
04f94     FD 12 02 F6 | 	mov	arg01, result1
04f98     F8 91 B1 FD | 	call	#__system__LCase_S
04f9c     FD 12 02 F6 | 	mov	arg01, result1
04fa0     5C 01 00 FF 
04fa4     CD 14 06 F6 | 	mov	arg02, ##@LR__4824
04fa8     BC 6E B1 FD | 	call	#__system___string_cmp
04fac     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb0     00 FA 05 56 |  if_ne	mov	result1, #0
04fb4     70 00 90 5D |  if_ne	jmp	#LR__0412
04fb8                 | LR__0407
04fb8                 | '     if m$="." then ds+=1: if ds>1 then return false
04fb8     5C 01 00 FF 
04fbc     CF 14 06 F6 | 	mov	arg02, ##@LR__4825
04fc0     14 13 02 F6 | 	mov	arg01, local06
04fc4     A0 6E B1 FD | 	call	#__system___string_cmp
04fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fcc     01 20 06 A1 |  if_e	add	local02, #1
04fd0     02 20 56 A2 |  if_e	cmps	local02, #2 wc
04fd4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
04fd8     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0412
04fdc                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
04fdc     5C 01 00 FF 
04fe0     D1 14 06 F6 | 	mov	arg02, ##@LR__4826
04fe4     14 13 02 F6 | 	mov	arg01, local06
04fe8     7C 6E B1 FD | 	call	#__system___string_cmp
04fec     00 FA 4D F2 | 	cmps	result1, #0 wz
04ff0     18 00 90 AD |  if_e	jmp	#LR__0408
04ff4     5C 01 00 FF 
04ff8     D3 14 06 F6 | 	mov	arg02, ##@LR__4827
04ffc     14 13 02 F6 | 	mov	arg01, local06
05000     64 6E B1 FD | 	call	#__system___string_cmp
05004     00 FA 4D F2 | 	cmps	result1, #0 wz
05008     10 00 90 5D |  if_ne	jmp	#LR__0409
0500c                 | LR__0408
0500c     01 22 06 F1 | 	add	local03, #1
05010     02 22 56 F2 | 	cmps	local03, #2 wc
05014     00 FA 05 36 |  if_ae	mov	result1, #0
05018     0C 00 90 3D |  if_ae	jmp	#LR__0412
0501c                 | LR__0409
0501c     01 30 06 F1 | 	add	local10, #1
05020     60 FE 9F FD | 	jmp	#LR__0404
05024                 | LR__0410
05024                 | LR__0411
05024                 | ' return true
05024     01 FA 65 F6 | 	neg	result1, #1
05028                 | LR__0412
05028     A7 F0 03 F6 | 	mov	ptra, fp
0502c     B2 00 A0 FD | 	call	#popregs_
05030                 | _isnum_ret
05030     2D 00 64 FD | 	ret
05034                 | 
05034                 | '   
05034                 | ' function isint(s as string) as boolean
05034                 | _isint
05034     05 4A 05 F6 | 	mov	COUNT_, #5
05038     A8 00 A0 FD | 	call	#pushregs_
0503c     09 1F 02 F6 | 	mov	local01, arg01
05040     09 21 02 F6 | 	mov	local02, arg01
05044     97 06 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
05048                 | LR__0420
05048     10 FB C9 FA | 	rdbyte	result1, local02 wz
0504c     01 20 06 51 |  if_ne	add	local02, #1
05050     F4 FF 9F 5D |  if_ne	jmp	#LR__0420
05054                 | LR__0421
05054     09 21 82 F1 | 	sub	local02, arg01
05058     10 FB 01 F6 | 	mov	result1, local02
0505c     FD 20 0A F6 | 	mov	local02, result1 wz
05060     00 FA 05 A6 |  if_e	mov	result1, #0
05064     18 01 90 AD |  if_e	jmp	#LR__0429
05068     0F 13 02 F6 | 	mov	arg01, local01
0506c     01 14 06 F6 | 	mov	arg02, #1
05070     01 16 06 F6 | 	mov	arg03, #1
05074     24 8F B1 FD | 	call	#__system__Mid_S
05078     FD 22 02 F6 | 	mov	local03, result1
0507c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0507c     5C 01 00 FF 
05080     D5 14 06 F6 | 	mov	arg02, ##@LR__4828
05084     11 13 02 F6 | 	mov	arg01, local03
05088     DC 6D B1 FD | 	call	#__system___string_cmp
0508c     00 FA 55 F2 | 	cmps	result1, #0 wc
05090     18 00 90 CD |  if_b	jmp	#LR__0422
05094     5C 01 00 FF 
05098     D7 14 06 F6 | 	mov	arg02, ##@LR__4829
0509c     11 13 02 F6 | 	mov	arg01, local03
050a0     C4 6D B1 FD | 	call	#__system___string_cmp
050a4     01 FA 55 F2 | 	cmps	result1, #1 wc
050a8     4C 00 90 CD |  if_b	jmp	#LR__0423
050ac                 | LR__0422
050ac     5C 01 00 FF 
050b0     D9 14 06 F6 | 	mov	arg02, ##@LR__4830
050b4     11 13 02 F6 | 	mov	arg01, local03
050b8     AC 6D B1 FD | 	call	#__system___string_cmp
050bc     00 FA 0D F2 | 	cmp	result1, #0 wz
050c0     34 00 90 AD |  if_e	jmp	#LR__0423
050c4     5C 01 00 FF 
050c8     DB 14 06 F6 | 	mov	arg02, ##@LR__4831
050cc     11 13 02 F6 | 	mov	arg01, local03
050d0     94 6D B1 FD | 	call	#__system___string_cmp
050d4     00 FA 0D F2 | 	cmp	result1, #0 wz
050d8     1C 00 90 AD |  if_e	jmp	#LR__0423
050dc     5C 01 00 FF 
050e0     DD 14 06 F6 | 	mov	arg02, ##@LR__4832
050e4     11 13 02 F6 | 	mov	arg01, local03
050e8     7C 6D B1 FD | 	call	#__system___string_cmp
050ec     00 FA 0D F2 | 	cmp	result1, #0 wz
050f0     00 FA 05 56 |  if_ne	mov	result1, #0
050f4     88 00 90 5D |  if_ne	jmp	#LR__0429
050f8                 | LR__0423
050f8                 | ' 
050f8                 | ' if l>1 then 
050f8     02 20 56 F2 | 	cmps	local02, #2 wc
050fc     7C 00 90 CD |  if_b	jmp	#LR__0428
05100                 | '   for i=2 to l
05100     02 24 06 F6 | 	mov	local04, #2
05104     10 27 02 F6 | 	mov	local05, local02
05108     01 26 06 F1 | 	add	local05, #1
0510c                 | LR__0424
0510c     13 25 52 F2 | 	cmps	local04, local05 wc
05110     68 00 90 3D |  if_ae	jmp	#LR__0427
05114     0F 13 02 F6 | 	mov	arg01, local01
05118     12 15 02 F6 | 	mov	arg02, local04
0511c     01 16 06 F6 | 	mov	arg03, #1
05120     78 8E B1 FD | 	call	#__system__Mid_S
05124     FD 22 02 F6 | 	mov	local03, result1
05128                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05128     5C 01 00 FF 
0512c     DF 14 06 F6 | 	mov	arg02, ##@LR__4833
05130     11 13 02 F6 | 	mov	arg01, local03
05134     30 6D B1 FD | 	call	#__system___string_cmp
05138     00 FA 55 F2 | 	cmps	result1, #0 wc
0513c     18 00 90 CD |  if_b	jmp	#LR__0425
05140     5C 01 00 FF 
05144     E1 14 06 F6 | 	mov	arg02, ##@LR__4834
05148     11 13 02 F6 | 	mov	arg01, local03
0514c     18 6D B1 FD | 	call	#__system___string_cmp
05150     01 FA 55 F2 | 	cmps	result1, #1 wc
05154     1C 00 90 CD |  if_b	jmp	#LR__0426
05158                 | LR__0425
05158     5C 01 00 FF 
0515c     E3 14 06 F6 | 	mov	arg02, ##@LR__4835
05160     11 13 02 F6 | 	mov	arg01, local03
05164     00 6D B1 FD | 	call	#__system___string_cmp
05168     00 FA 0D F2 | 	cmp	result1, #0 wz
0516c     00 FA 05 56 |  if_ne	mov	result1, #0
05170     0C 00 90 5D |  if_ne	jmp	#LR__0429
05174                 | LR__0426
05174     01 24 06 F1 | 	add	local04, #1
05178     90 FF 9F FD | 	jmp	#LR__0424
0517c                 | LR__0427
0517c                 | LR__0428
0517c                 | ' return true
0517c     01 FA 65 F6 | 	neg	result1, #1
05180                 | LR__0429
05180     A7 F0 03 F6 | 	mov	ptra, fp
05184     B2 00 A0 FD | 	call	#popregs_
05188                 | _isint_ret
05188     2D 00 64 FD | 	ret
0518c                 | 
0518c                 | ' 
0518c                 | ' function isdec(s as string) as boolean
0518c                 | _isdec
0518c     05 4A 05 F6 | 	mov	COUNT_, #5
05190     A8 00 A0 FD | 	call	#pushregs_
05194     09 1F 02 F6 | 	mov	local01, arg01
05198     09 21 02 F6 | 	mov	local02, arg01
0519c     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
051a0                 | LR__0430
051a0     10 FB C9 FA | 	rdbyte	result1, local02 wz
051a4     01 20 06 51 |  if_ne	add	local02, #1
051a8     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
051ac                 | LR__0431
051ac     09 21 82 F1 | 	sub	local02, arg01
051b0     10 FB 01 F6 | 	mov	result1, local02
051b4     FD 20 0A F6 | 	mov	local02, result1 wz
051b8     00 FA 05 A6 |  if_e	mov	result1, #0
051bc     80 00 90 AD |  if_e	jmp	#LR__0436
051c0                 | ' for i=1 to l
051c0     01 22 06 F6 | 	mov	local03, #1
051c4     10 25 02 F6 | 	mov	local04, local02
051c8     01 24 06 F1 | 	add	local04, #1
051cc                 | LR__0432
051cc     12 23 52 F2 | 	cmps	local03, local04 wc
051d0     68 00 90 3D |  if_ae	jmp	#LR__0435
051d4     0F 13 02 F6 | 	mov	arg01, local01
051d8     11 15 02 F6 | 	mov	arg02, local03
051dc     01 16 06 F6 | 	mov	arg03, #1
051e0     B8 8D B1 FD | 	call	#__system__Mid_S
051e4     FD 26 02 F6 | 	mov	local05, result1
051e8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
051e8     5C 01 00 FF 
051ec     E5 14 06 F6 | 	mov	arg02, ##@LR__4836
051f0     13 13 02 F6 | 	mov	arg01, local05
051f4     70 6C B1 FD | 	call	#__system___string_cmp
051f8     00 FA 55 F2 | 	cmps	result1, #0 wc
051fc     18 00 90 CD |  if_b	jmp	#LR__0433
05200     5C 01 00 FF 
05204     E7 14 06 F6 | 	mov	arg02, ##@LR__4837
05208     13 13 02 F6 | 	mov	arg01, local05
0520c     58 6C B1 FD | 	call	#__system___string_cmp
05210     01 FA 55 F2 | 	cmps	result1, #1 wc
05214     1C 00 90 CD |  if_b	jmp	#LR__0434
05218                 | LR__0433
05218     5C 01 00 FF 
0521c     E9 14 06 F6 | 	mov	arg02, ##@LR__4838
05220     13 13 02 F6 | 	mov	arg01, local05
05224     40 6C B1 FD | 	call	#__system___string_cmp
05228     00 FA 0D F2 | 	cmp	result1, #0 wz
0522c     00 FA 05 56 |  if_ne	mov	result1, #0
05230     0C 00 90 5D |  if_ne	jmp	#LR__0436
05234                 | LR__0434
05234     01 22 06 F1 | 	add	local03, #1
05238     90 FF 9F FD | 	jmp	#LR__0432
0523c                 | LR__0435
0523c                 | ' return true
0523c     01 FA 65 F6 | 	neg	result1, #1
05240                 | LR__0436
05240     A7 F0 03 F6 | 	mov	ptra, fp
05244     B2 00 A0 FD | 	call	#popregs_
05248                 | _isdec_ret
05248     2D 00 64 FD | 	ret
0524c                 | 
0524c                 | ' 
0524c                 | ' function isstring(s as string) as boolean
0524c                 | _isstring
0524c     01 4A 05 F6 | 	mov	COUNT_, #1
05250     A8 00 A0 FD | 	call	#pushregs_
05254                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05254     09 1F 02 F6 | 	mov	local01, arg01
05258     01 14 06 F6 | 	mov	arg02, #1
0525c     24 8C B1 FD | 	call	#__system__Left_S
05260     FD 12 02 F6 | 	mov	arg01, result1
05264     5C 01 00 FF 
05268     EB 14 06 F6 | 	mov	arg02, ##@LR__4839
0526c     F8 6B B1 FD | 	call	#__system___string_cmp
05270     00 FA 4D F2 | 	cmps	result1, #0 wz
05274     28 00 90 5D |  if_ne	jmp	#LR__0440
05278     0F 13 02 F6 | 	mov	arg01, local01
0527c     01 14 06 F6 | 	mov	arg02, #1
05280     88 8C B1 FD | 	call	#__system__Right_S
05284     FD 12 02 F6 | 	mov	arg01, result1
05288     5C 01 00 FF 
0528c     ED 14 06 F6 | 	mov	arg02, ##@LR__4840
05290     D4 6B B1 FD | 	call	#__system___string_cmp
05294     00 FA 4D F2 | 	cmps	result1, #0 wz
05298     01 FA 65 A6 |  if_e	neg	result1, #1
0529c     04 00 90 AD |  if_e	jmp	#LR__0441
052a0                 | LR__0440
052a0     00 FA 05 F6 | 	mov	result1, #0
052a4                 | LR__0441
052a4     A7 F0 03 F6 | 	mov	ptra, fp
052a8     B2 00 A0 FD | 	call	#popregs_
052ac                 | _isstring_ret
052ac     2D 00 64 FD | 	ret
052b0                 | 
052b0                 | ' 
052b0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
052b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052b0                 | ' 
052b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052b0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
052b0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
052b0                 | ' 
052b0                 | ' '----- delete a line from a program
052b0                 | ' 
052b0                 | ' function deleteline(aline as ulong) as integer
052b0                 | _deleteline
052b0     03 4A 05 F6 | 	mov	COUNT_, #3
052b4     A8 00 A0 FD | 	call	#pushregs_
052b8     2C F0 07 F1 | 	add	ptra, #44
052bc     04 4E 05 F1 | 	add	fp, #4
052c0     A7 12 62 FC | 	wrlong	arg01, fp
052c4     6A 00 00 FF 
052c8     68 E4 05 F1 | 	add	objptr, ##54376
052cc     F2 1E 02 FB | 	rdlong	local01, objptr
052d0     0C 4E 05 F1 | 	add	fp, #12
052d4     A7 1E 62 FC | 	wrlong	local01, fp
052d8     10 4E 85 F1 | 	sub	fp, #16
052dc                 | ' 
052dc                 | ' 
052dc                 | ' searchptr=programstart
052dc                 | ' 
052dc                 | ' do
052dc     5E 00 00 FF 
052e0     A8 E5 85 F1 | 	sub	objptr, ##48552
052e4                 | LR__0450
052e4     14 4E 05 F1 | 	add	fp, #20
052e8     A7 12 02 F6 | 	mov	arg01, fp
052ec     04 4E 85 F1 | 	sub	fp, #4
052f0     A7 14 02 FB | 	rdlong	arg02, fp
052f4     10 4E 85 F1 | 	sub	fp, #16
052f8     18 16 06 F6 | 	mov	arg03, #24
052fc     D8 5F B1 FD | 	call	#_psram_spin2_read1
05300     10 4E 05 F1 | 	add	fp, #16
05304     A7 1E 02 FB | 	rdlong	local01, fp
05308     08 4E 85 F1 | 	sub	fp, #8
0530c     A7 1E 62 FC | 	wrlong	local01, fp
05310     20 4E 05 F1 | 	add	fp, #32
05314     A7 1E 02 FB | 	rdlong	local01, fp
05318     18 4E 85 F1 | 	sub	fp, #24
0531c     A7 1E 62 FC | 	wrlong	local01, fp
05320     04 4E 05 F1 | 	add	fp, #4
05324     A7 1E 02 FB | 	rdlong	local01, fp
05328     10 4E 85 F1 | 	sub	fp, #16
0532c     A7 16 02 FB | 	rdlong	arg03, fp
05330     04 4E 85 F1 | 	sub	fp, #4
05334     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05338     28 4E 05 C1 |  if_b	add	fp, #40
0533c     A7 20 02 CB |  if_b	rdlong	local02, fp
05340     28 4E 85 C1 |  if_b	sub	fp, #40
05344     FF FF 3F CF 
05348     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0534c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0450
05350     0B 00 00 FF 
05354     C0 E4 85 F1 | 	sub	objptr, ##5824
05358                 | ' 
05358                 | ' 
05358                 | ' if header(0)<>aline then return -1
05358     14 4E 05 F1 | 	add	fp, #20
0535c     A7 1E 02 FB | 	rdlong	local01, fp
05360     10 4E 85 F1 | 	sub	fp, #16
05364     A7 22 02 FB | 	rdlong	local03, fp
05368     04 4E 85 F1 | 	sub	fp, #4
0536c     11 1F 0A F2 | 	cmp	local01, local03 wz
05370     01 FA 65 56 |  if_ne	neg	result1, #1
05374     C8 02 90 5D |  if_ne	jmp	#LR__0456
05378     08 4E 05 F1 | 	add	fp, #8
0537c     A7 12 02 FB | 	rdlong	arg01, fp
05380     08 4E 85 F1 | 	sub	fp, #8
05384     01 14 66 F6 | 	neg	arg02, #1
05388     30 35 B1 FD | 	call	#_pslpoke
0538c                 | ' 
0538c                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
0538c                 | ' 
0538c                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
0538c     28 4E 05 F1 | 	add	fp, #40
05390     A7 1E 02 FB | 	rdlong	local01, fp
05394     28 4E 85 F1 | 	sub	fp, #40
05398     FF FF 3F FF 
0539c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
053a0     24 4E 05 A1 |  if_e	add	fp, #36
053a4     A7 22 02 AB |  if_e	rdlong	local03, fp
053a8     24 4E 85 A1 |  if_e	sub	fp, #36
053ac     FF FF 7F AF 
053b0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
053b4     78 00 90 5D |  if_ne	jmp	#LR__0451
053b8     6A 00 00 FF 
053bc     68 E4 05 F1 | 	add	objptr, ##54376
053c0     F2 00 68 FC | 	wrlong	#0, objptr
053c4     07 00 00 FF 
053c8     28 E4 85 F1 | 	sub	objptr, ##3624
053cc     F2 00 68 FC | 	wrlong	#0, objptr
053d0     07 00 00 FF 
053d4     2C E4 05 F1 | 	add	objptr, ##3628
053d8     F2 00 68 FC | 	wrlong	#0, objptr
053dc     04 E4 05 F1 | 	add	objptr, #4
053e0     FF FF FF FF 
053e4     F2 FE 6B FC | 	wrlong	##-1, objptr
053e8     6A 00 00 FF 
053ec     70 E4 85 F1 | 	sub	objptr, ##54384
053f0     00 12 06 F6 | 	mov	arg01, #0
053f4     01 14 66 F6 | 	neg	arg02, #1
053f8     C0 34 B1 FD | 	call	#_pslpoke
053fc     10 12 06 F6 | 	mov	arg01, #16
05400     01 14 66 F6 | 	neg	arg02, #1
05404     B4 34 B1 FD | 	call	#_pslpoke
05408     14 12 06 F6 | 	mov	arg01, #20
0540c     1E 14 CE F9 | 	bmask	arg02, #30
05410     A8 34 B1 FD | 	call	#_pslpoke
05414     79 00 00 FF 
05418     94 E5 05 F1 | 	add	objptr, ##62356
0541c     F2 00 68 FC | 	wrlong	#0, objptr
05420     04 E4 05 F1 | 	add	objptr, #4
05424     F2 00 68 FC | 	wrlong	#0, objptr
05428     79 00 00 FF 
0542c     98 E5 85 F1 | 	sub	objptr, ##62360
05430                 | LR__0451
05430                 | ' 
05430                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05430     28 4E 05 F1 | 	add	fp, #40
05434     A7 1E 02 FB | 	rdlong	local01, fp
05438     28 4E 85 F1 | 	sub	fp, #40
0543c     FF FF 3F FF 
05440     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05444     74 00 90 5D |  if_ne	jmp	#LR__0452
05448     24 4E 05 F1 | 	add	fp, #36
0544c     A7 22 02 FB | 	rdlong	local03, fp
05450     24 4E 85 F1 | 	sub	fp, #36
05454     FF FF 7F FF 
05458     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0545c     5C 00 90 AD |  if_e	jmp	#LR__0452
05460     24 4E 05 F1 | 	add	fp, #36
05464     A7 12 02 FB | 	rdlong	arg01, fp
05468     24 4E 85 F1 | 	sub	fp, #36
0546c     14 12 06 F1 | 	add	arg01, #20
05470     1E 14 CE F9 | 	bmask	arg02, #30
05474     44 34 B1 FD | 	call	#_pslpoke
05478     24 4E 05 F1 | 	add	fp, #36
0547c     A7 1E 02 FB | 	rdlong	local01, fp
05480     6A 00 00 FF 
05484     70 E4 05 F1 | 	add	objptr, ##54384
05488     F2 1E 62 FC | 	wrlong	local01, objptr
0548c     6A 00 00 FF 
05490     70 E4 85 F1 | 	sub	objptr, ##54384
05494     A7 12 02 FB | 	rdlong	arg01, fp
05498     24 4E 85 F1 | 	sub	fp, #36
0549c     4C 35 B1 FD | 	call	#_pslpeek
054a0     6A 00 00 FF 
054a4     6C E4 05 F1 | 	add	objptr, ##54380
054a8     F2 FA 61 FC | 	wrlong	result1, objptr
054ac     6A 00 00 FF 
054b0     6C E4 85 F1 | 	sub	objptr, ##54380
054b4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
054b4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
054b4                 | '   lastline=pslpeek(header(4))
054b4                 | '   return 0
054b4     00 FA 05 F6 | 	mov	result1, #0
054b8     84 01 90 FD | 	jmp	#LR__0456
054bc                 | LR__0452
054bc                 | ' 
054bc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
054bc     28 4E 05 F1 | 	add	fp, #40
054c0     A7 1E 02 FB | 	rdlong	local01, fp
054c4     28 4E 85 F1 | 	sub	fp, #40
054c8     FF FF 3F FF 
054cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
054d0     58 00 90 AD |  if_e	jmp	#LR__0453
054d4     24 4E 05 F1 | 	add	fp, #36
054d8     A7 22 02 FB | 	rdlong	local03, fp
054dc     24 4E 85 F1 | 	sub	fp, #36
054e0     FF FF 7F FF 
054e4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
054e8     40 00 90 5D |  if_ne	jmp	#LR__0453
054ec     28 4E 05 F1 | 	add	fp, #40
054f0     A7 12 02 FB | 	rdlong	arg01, fp
054f4     28 4E 85 F1 | 	sub	fp, #40
054f8     10 12 06 F1 | 	add	arg01, #16
054fc     01 14 66 F6 | 	neg	arg02, #1
05500     B8 33 B1 FD | 	call	#_pslpoke
05504     28 4E 05 F1 | 	add	fp, #40
05508     A7 1E 02 FB | 	rdlong	local01, fp
0550c     28 4E 85 F1 | 	sub	fp, #40
05510     6A 00 00 FF 
05514     68 E4 05 F1 | 	add	objptr, ##54376
05518     F2 1E 62 FC | 	wrlong	local01, objptr
0551c     6A 00 00 FF 
05520     68 E4 85 F1 | 	sub	objptr, ##54376
05524                 | ' '   print "deleted first line"
05524                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05524                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05524                 | '   return 0
05524     00 FA 05 F6 | 	mov	result1, #0
05528     14 01 90 FD | 	jmp	#LR__0456
0552c                 | LR__0453
0552c                 | ' 
0552c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0552c     28 4E 05 F1 | 	add	fp, #40
05530     A7 1E 02 FB | 	rdlong	local01, fp
05534     28 4E 85 F1 | 	sub	fp, #40
05538     FF FF 3F FF 
0553c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05540     24 4E 05 51 |  if_ne	add	fp, #36
05544     A7 22 02 5B |  if_ne	rdlong	local03, fp
05548     24 4E 85 51 |  if_ne	sub	fp, #36
0554c     FF FF 7F 5F 
05550     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05554     40 00 90 AD |  if_e	jmp	#LR__0454
05558     28 4E 05 F1 | 	add	fp, #40
0555c     A7 12 02 FB | 	rdlong	arg01, fp
05560     10 12 06 F1 | 	add	arg01, #16
05564     04 4E 85 F1 | 	sub	fp, #4
05568     A7 14 02 FB | 	rdlong	arg02, fp
0556c     24 4E 85 F1 | 	sub	fp, #36
05570     48 33 B1 FD | 	call	#_pslpoke
05574     24 4E 05 F1 | 	add	fp, #36
05578     A7 12 02 FB | 	rdlong	arg01, fp
0557c     14 12 06 F1 | 	add	arg01, #20
05580     04 4E 05 F1 | 	add	fp, #4
05584     A7 14 02 FB | 	rdlong	arg02, fp
05588     28 4E 85 F1 | 	sub	fp, #40
0558c     2C 33 B1 FD | 	call	#_pslpoke
05590                 | '    pslpoke(header(5)+16,header(4))  
05590                 | '    pslpoke(header(4)+20, header(5))
05590                 | '    return 0
05590     00 FA 05 F6 | 	mov	result1, #0
05594     A8 00 90 FD | 	jmp	#LR__0456
05598                 | LR__0454
05598     10 4E 05 F1 | 	add	fp, #16
0559c     A7 1E 02 FB | 	rdlong	local01, fp
055a0     08 4E 85 F1 | 	sub	fp, #8
055a4     A7 1E 62 FC | 	wrlong	local01, fp
055a8     6A 00 00 FF 
055ac     68 E4 05 F1 | 	add	objptr, ##54376
055b0     F2 1E 02 FB | 	rdlong	local01, objptr
055b4     08 4E 05 F1 | 	add	fp, #8
055b8     A7 1E 62 FC | 	wrlong	local01, fp
055bc     10 4E 85 F1 | 	sub	fp, #16
055c0                 | ' 
055c0                 | ' 
055c0                 | ' 
055c0                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
055c0                 | ' 
055c0                 | ' lineptr2=searchptr
055c0                 | ' searchptr=programstart
055c0                 | ' 
055c0                 | ' do
055c0     5E 00 00 FF 
055c4     A8 E5 85 F1 | 	sub	objptr, ##48552
055c8                 | LR__0455
055c8     14 4E 05 F1 | 	add	fp, #20
055cc     A7 12 02 F6 | 	mov	arg01, fp
055d0     04 4E 85 F1 | 	sub	fp, #4
055d4     A7 14 02 FB | 	rdlong	arg02, fp
055d8     10 4E 85 F1 | 	sub	fp, #16
055dc     18 16 06 F6 | 	mov	arg03, #24
055e0     F4 5C B1 FD | 	call	#_psram_spin2_read1
055e4     10 4E 05 F1 | 	add	fp, #16
055e8     A7 1E 02 FB | 	rdlong	local01, fp
055ec     08 4E 85 F1 | 	sub	fp, #8
055f0     A7 1E 62 FC | 	wrlong	local01, fp
055f4     20 4E 05 F1 | 	add	fp, #32
055f8     A7 1E 02 FB | 	rdlong	local01, fp
055fc     18 4E 85 F1 | 	sub	fp, #24
05600     A7 1E 62 FC | 	wrlong	local01, fp
05604     04 4E 05 F1 | 	add	fp, #4
05608     A7 1E 02 FB | 	rdlong	local01, fp
0560c     10 4E 85 F1 | 	sub	fp, #16
05610     A7 22 02 FB | 	rdlong	local03, fp
05614     04 4E 85 F1 | 	sub	fp, #4
05618     11 1F 12 F2 | 	cmp	local01, local03 wc
0561c     28 4E 05 C1 |  if_b	add	fp, #40
05620     A7 20 02 CB |  if_b	rdlong	local02, fp
05624     28 4E 85 C1 |  if_b	sub	fp, #40
05628     FF FF 3F CF 
0562c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05630     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0455
05634     0B 00 00 FF 
05638     C0 E4 85 F1 | 	sub	objptr, ##5824
0563c     00 FA 05 F6 | 	mov	result1, #0
05640                 | LR__0456
05640     A7 F0 03 F6 | 	mov	ptra, fp
05644     B2 00 A0 FD | 	call	#popregs_
05648                 | _deleteline_ret
05648     2D 00 64 FD | 	ret
0564c                 | 
0564c                 | ' 
0564c                 | ' sub save_line
0564c                 | _save_line
0564c     03 4A 05 F6 | 	mov	COUNT_, #3
05650     A8 00 A0 FD | 	call	#pushregs_
05654     6A 00 00 FF 
05658     60 E4 05 F1 | 	add	objptr, ##54368
0565c     F2 16 02 FB | 	rdlong	arg03, objptr
05660     01 16 06 F1 | 	add	arg03, #1
05664     05 00 00 FF 
05668     18 E4 85 F1 | 	sub	objptr, ##2584
0566c     F2 14 02 FB | 	rdlong	arg02, objptr
05670     0B 15 02 FD | 	qmul	arg02, arg03
05674     0E 00 00 FF 
05678     44 E4 85 F1 | 	sub	objptr, ##7236
0567c     F2 12 02 FB | 	rdlong	arg01, objptr
05680     57 00 00 FF 
05684     04 E4 85 F1 | 	sub	objptr, ##44548
05688     09 1F 02 F6 | 	mov	local01, arg01
0568c     18 20 62 FD | 	getqx	local02
05690     97 06 48 FB | 	callpa	#(@LR__0461-@LR__0460)>>2,fcache_load_ptr_
05694                 | LR__0460
05694     0F FB C9 FA | 	rdbyte	result1, local01 wz
05698     01 1E 06 51 |  if_ne	add	local01, #1
0569c     F4 FF 9F 5D |  if_ne	jmp	#LR__0460
056a0                 | LR__0461
056a0     09 1F 82 F1 | 	sub	local01, arg01
056a4     03 1E CE F7 | 	test	local01, #3 wz
056a8     02 1E 46 50 |  if_ne	shr	local01, #2
056ac     01 1E 06 51 |  if_ne	add	local01, #1
056b0     02 1E 66 50 |  if_ne	shl	local01, #2
056b4     10 23 02 F6 | 	mov	local03, local02
056b8     0F 23 02 F1 | 	add	local03, local01
056bc     63 00 00 FF 
056c0     40 E4 05 F1 | 	add	objptr, ##50752
056c4     F2 16 02 FB | 	rdlong	arg03, objptr
056c8     10 17 02 F1 | 	add	arg03, local02
056cc     04 00 00 FF 
056d0     28 E4 05 F1 | 	add	objptr, ##2088
056d4     F2 16 62 FC | 	wrlong	arg03, objptr
056d8     04 E4 05 F1 | 	add	objptr, #4
056dc     F2 1E 62 FC | 	wrlong	local01, objptr
056e0     0C E4 85 F1 | 	sub	objptr, #12
056e4     F2 12 02 F6 | 	mov	arg01, objptr
056e8     04 00 00 FF 
056ec     20 E4 85 F1 | 	sub	objptr, ##2080
056f0     F2 14 02 FB | 	rdlong	arg02, objptr
056f4     10 17 02 F6 | 	mov	arg03, local02
056f8     57 00 00 FF 
056fc     80 E5 85 F1 | 	sub	objptr, ##44928
05700     70 5C B1 FD | 	call	#_psram_spin2_write
05704     4B 00 00 FF 
05708     44 E5 05 F1 | 	add	objptr, ##38724
0570c     F2 12 02 FB | 	rdlong	arg01, objptr
05710     0C 00 00 FF 
05714     3C E4 05 F1 | 	add	objptr, ##6204
05718     F2 14 02 FB | 	rdlong	arg02, objptr
0571c     10 15 02 F1 | 	add	arg02, local02
05720     0F 17 02 F6 | 	mov	arg03, local01
05724     57 00 00 FF 
05728     80 E5 85 F1 | 	sub	objptr, ##44928
0572c     44 5C B1 FD | 	call	#_psram_spin2_write
05730     57 00 00 FF 
05734     80 E5 05 F1 | 	add	objptr, ##44928
05738     F2 1E 02 FB | 	rdlong	local01, objptr
0573c     11 1F 02 F1 | 	add	local01, local03
05740     F2 1E 62 FC | 	wrlong	local01, objptr
05744     63 00 00 FF 
05748     40 E4 85 F1 | 	sub	objptr, ##50752
0574c     A7 F0 03 F6 | 	mov	ptra, fp
05750     B2 00 A0 FD | 	call	#popregs_
05754                 | _save_line_ret
05754     2D 00 64 FD | 	ret
05758                 | 
05758                 | ' 
05758                 | ' 
05758                 | ' function insertline(aline as ulong) as integer
05758                 | _insertline
05758     02 4A 05 F6 | 	mov	COUNT_, #2
0575c     A8 00 A0 FD | 	call	#pushregs_
05760     28 F0 07 F1 | 	add	ptra, #40
05764     04 4E 05 F1 | 	add	fp, #4
05768     A7 12 62 FC | 	wrlong	arg01, fp
0576c     6A 00 00 FF 
05770     68 E4 05 F1 | 	add	objptr, ##54376
05774     F2 1E 02 FB | 	rdlong	local01, objptr
05778     04 4E 05 F1 | 	add	fp, #4
0577c     A7 1E 62 FC | 	wrlong	local01, fp
05780     08 4E 85 F1 | 	sub	fp, #8
05784                 | ' 
05784                 | ' do
05784     5E 00 00 FF 
05788     A8 E5 85 F1 | 	sub	objptr, ##48552
0578c                 | LR__0470
0578c     10 4E 05 F1 | 	add	fp, #16
05790     A7 12 02 F6 | 	mov	arg01, fp
05794     08 4E 85 F1 | 	sub	fp, #8
05798     A7 14 02 FB | 	rdlong	arg02, fp
0579c     08 4E 85 F1 | 	sub	fp, #8
057a0     18 16 06 F6 | 	mov	arg03, #24
057a4     30 5B B1 FD | 	call	#_psram_spin2_read1
057a8     08 4E 05 F1 | 	add	fp, #8
057ac     A7 1E 02 FB | 	rdlong	local01, fp
057b0     04 4E 05 F1 | 	add	fp, #4
057b4     A7 1E 62 FC | 	wrlong	local01, fp
057b8     18 4E 05 F1 | 	add	fp, #24
057bc     A7 1E 02 FB | 	rdlong	local01, fp
057c0     1C 4E 85 F1 | 	sub	fp, #28
057c4     A7 1E 62 FC | 	wrlong	local01, fp
057c8     08 4E 05 F1 | 	add	fp, #8
057cc     A7 1E 02 FB | 	rdlong	local01, fp
057d0     0C 4E 85 F1 | 	sub	fp, #12
057d4     A7 16 02 FB | 	rdlong	arg03, fp
057d8     04 4E 85 F1 | 	sub	fp, #4
057dc     0B 1F 12 F2 | 	cmp	local01, arg03 wc
057e0     24 4E 05 C1 |  if_b	add	fp, #36
057e4     A7 20 02 CB |  if_b	rdlong	local02, fp
057e8     24 4E 85 C1 |  if_b	sub	fp, #36
057ec     FF FF 3F CF 
057f0     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
057f4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0470
057f8     0B 00 00 FF 
057fc     C0 E4 85 F1 | 	sub	objptr, ##5824
05800                 | ' 
05800                 | ' if header(0)=aline then return -1 ' delete it first
05800     10 4E 05 F1 | 	add	fp, #16
05804     A7 1E 02 FB | 	rdlong	local01, fp
05808     0C 4E 85 F1 | 	sub	fp, #12
0580c     A7 20 02 FB | 	rdlong	local02, fp
05810     04 4E 85 F1 | 	sub	fp, #4
05814     10 1F 0A F2 | 	cmp	local01, local02 wz
05818     01 FA 65 A6 |  if_e	neg	result1, #1
0581c     48 01 90 AD |  if_e	jmp	#LR__0473
05820                 | ' if header(0)<aline then return -2 ' end of program reached
05820     10 4E 05 F1 | 	add	fp, #16
05824     A7 1E 02 FB | 	rdlong	local01, fp
05828     0C 4E 85 F1 | 	sub	fp, #12
0582c     A7 16 02 FB | 	rdlong	arg03, fp
05830     04 4E 85 F1 | 	sub	fp, #4
05834     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05838     02 FA 65 C6 |  if_b	neg	result1, #2
0583c     28 01 90 CD |  if_b	jmp	#LR__0473
05840                 | ' 
05840                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05840     20 4E 05 F1 | 	add	fp, #32
05844     A7 1E 02 FB | 	rdlong	local01, fp
05848     20 4E 85 F1 | 	sub	fp, #32
0584c     FF FF 7F FF 
05850     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05854     78 00 90 5D |  if_ne	jmp	#LR__0471
05858     63 00 00 FF 
0585c     40 E4 05 F1 | 	add	objptr, ##50752
05860     F2 1E 02 FB | 	rdlong	local01, objptr
05864     07 00 00 FF 
05868     28 E4 05 F1 | 	add	objptr, ##3624
0586c     F2 1E 62 FC | 	wrlong	local01, objptr
05870     0C 4E 05 F1 | 	add	fp, #12
05874     A7 12 02 FB | 	rdlong	arg01, fp
05878     0C 4E 85 F1 | 	sub	fp, #12
0587c     10 12 06 F1 | 	add	arg01, #16
05880     07 00 00 FF 
05884     28 E4 85 F1 | 	sub	objptr, ##3624
05888     F2 14 02 FB | 	rdlong	arg02, objptr
0588c     63 00 00 FF 
05890     40 E4 85 F1 | 	sub	objptr, ##50752
05894     24 30 B1 FD | 	call	#_pslpoke
05898     67 00 00 FF 
0589c     70 E4 05 F1 | 	add	objptr, ##52848
058a0     FF FF FF FF 
058a4     F2 FE 6B FC | 	wrlong	##-1, objptr
058a8     0C 4E 05 F1 | 	add	fp, #12
058ac     A7 1E 02 FB | 	rdlong	local01, fp
058b0     0C 4E 85 F1 | 	sub	fp, #12
058b4     04 E4 05 F1 | 	add	objptr, #4
058b8     F2 1E 62 FC | 	wrlong	local01, objptr
058bc     67 00 00 FF 
058c0     74 E4 85 F1 | 	sub	objptr, ##52852
058c4     84 FD BF FD | 	call	#_save_line
058c8                 | '   programstart=programptr
058c8                 | '   pslpoke(lineptr2+16,programptr)
058c8                 | '   ucompiledline(4)=$FFFF_FFFF
058c8                 | '   ucompiledline(5)=lineptr2
058c8                 | '   save_line
058c8                 | '   return 0
058c8     00 FA 05 F6 | 	mov	result1, #0
058cc     98 00 90 FD | 	jmp	#LR__0473
058d0                 | LR__0471
058d0                 | ' 
058d0                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
058d0     20 4E 05 F1 | 	add	fp, #32
058d4     A7 1E 02 FB | 	rdlong	local01, fp
058d8     20 4E 85 F1 | 	sub	fp, #32
058dc     FF FF 7F FF 
058e0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
058e4     7C 00 90 AD |  if_e	jmp	#LR__0472
058e8     20 4E 05 F1 | 	add	fp, #32
058ec     A7 1E 02 FB | 	rdlong	local01, fp
058f0     67 00 00 FF 
058f4     70 E4 05 F1 | 	add	objptr, ##52848
058f8     F2 1E 62 FC | 	wrlong	local01, objptr
058fc     14 4E 85 F1 | 	sub	fp, #20
05900     A7 1E 02 FB | 	rdlong	local01, fp
05904     04 E4 05 F1 | 	add	objptr, #4
05908     F2 1E 62 FC | 	wrlong	local01, objptr
0590c     A7 12 02 FB | 	rdlong	arg01, fp
05910     0C 4E 85 F1 | 	sub	fp, #12
05914     10 12 06 F1 | 	add	arg01, #16
05918     04 00 00 FF 
0591c     34 E4 85 F1 | 	sub	objptr, ##2100
05920     F2 14 02 FB | 	rdlong	arg02, objptr
05924     63 00 00 FF 
05928     40 E4 85 F1 | 	sub	objptr, ##50752
0592c     8C 2F B1 FD | 	call	#_pslpoke
05930     20 4E 05 F1 | 	add	fp, #32
05934     A7 12 02 FB | 	rdlong	arg01, fp
05938     20 4E 85 F1 | 	sub	fp, #32
0593c     14 12 06 F1 | 	add	arg01, #20
05940     63 00 00 FF 
05944     40 E4 05 F1 | 	add	objptr, ##50752
05948     F2 14 02 FB | 	rdlong	arg02, objptr
0594c     63 00 00 FF 
05950     40 E4 85 F1 | 	sub	objptr, ##50752
05954     64 2F B1 FD | 	call	#_pslpoke
05958     F0 FC BF FD | 	call	#_save_line
0595c                 | '   ucompiledline(4)=header(4)
0595c                 | '   ucompiledline(5)=lineptr2
0595c                 | '   pslpoke(lineptr2+16,programptr)
0595c                 | '   pslpoke(header(4)+20,programptr)
0595c                 | '   save_line
0595c                 | '   return 0
0595c     00 FA 05 F6 | 	mov	result1, #0
05960     04 00 90 FD | 	jmp	#LR__0473
05964                 | LR__0472
05964     00 FA 05 F6 | 	mov	result1, #0
05968                 | LR__0473
05968     A7 F0 03 F6 | 	mov	ptra, fp
0596c     B2 00 A0 FD | 	call	#popregs_
05970                 | _insertline_ret
05970     2D 00 64 FD | 	ret
05974                 | 
05974                 | ' 
05974                 | ' sub add_line_at_end(aline) 
05974                 | _add_line_at_end
05974     6A 00 00 FF 
05978     6C E4 05 F1 | 	add	objptr, ##54380
0597c     F2 12 62 FC | 	wrlong	arg01, objptr
05980     04 E4 05 F1 | 	add	objptr, #4
05984     F2 14 02 FB | 	rdlong	arg02, objptr
05988     03 00 00 FF 
0598c     00 E4 85 F1 | 	sub	objptr, ##1536
05990     F2 14 62 FC | 	wrlong	arg02, objptr
05994     03 00 00 FF 
05998     00 E4 05 F1 | 	add	objptr, ##1536
0599c     F2 12 02 FB | 	rdlong	arg01, objptr
059a0     14 12 06 F1 | 	add	arg01, #20
059a4     07 00 00 FF 
059a8     30 E4 85 F1 | 	sub	objptr, ##3632
059ac     F2 14 02 FB | 	rdlong	arg02, objptr
059b0     63 00 00 FF 
059b4     40 E4 85 F1 | 	sub	objptr, ##50752
059b8     00 2F B1 FD | 	call	#_pslpoke
059bc     63 00 00 FF 
059c0     40 E4 05 F1 | 	add	objptr, ##50752
059c4     F2 14 02 FB | 	rdlong	arg02, objptr
059c8     07 00 00 FF 
059cc     30 E4 05 F1 | 	add	objptr, ##3632
059d0     F2 14 62 FC | 	wrlong	arg02, objptr
059d4     02 00 00 FF 
059d8     FC E5 85 F1 | 	sub	objptr, ##1532
059dc     FF FF BF FF 
059e0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
059e4                 | ' 
059e4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
059e4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
059e4     04 00 00 FF 
059e8     34 E4 85 F1 | 	sub	objptr, ##2100
059ec     F2 14 0A FB | 	rdlong	arg02, objptr wz
059f0     63 00 00 FF 
059f4     40 E4 85 F1 | 	sub	objptr, ##50752
059f8     67 00 00 AF 
059fc     70 E4 05 A1 |  if_e	add	objptr, ##52848
05a00     FF FF FF AF 
05a04     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05a08     67 00 00 AF 
05a0c     70 E4 85 A1 |  if_e	sub	objptr, ##52848
05a10     38 FC BF FD | 	call	#_save_line
05a14     63 00 00 FF 
05a18     40 E4 05 F1 | 	add	objptr, ##50752
05a1c     F2 12 02 FB | 	rdlong	arg01, objptr
05a20     63 00 00 FF 
05a24     40 E4 85 F1 | 	sub	objptr, ##50752
05a28     01 14 66 F6 | 	neg	arg02, #1
05a2c     8C 2E B1 FD | 	call	#_pslpoke
05a30                 | _add_line_at_end_ret
05a30     2D 00 64 FD | 	ret
05a34                 | 
05a34                 | ' 
05a34                 | ' function compile_immediate(linetype as ulong) as integer
05a34                 | _compile_immediate
05a34     09 4A 05 F6 | 	mov	COUNT_, #9
05a38     A8 00 A0 FD | 	call	#pushregs_
05a3c                 | _compile_immediate_enter
05a3c     09 25 0A F6 | 	mov	local04, arg01 wz
05a40     00 26 06 F6 | 	mov	local05, #0
05a44     00 28 06 F6 | 	mov	local06, #0
05a48                 | ' 
05a48                 | ' ' linetype=cont+1, linetype=0 immediate
05a48                 | ' '  : 1: this is the first part of the line that will continue
05a48                 | ' ' 2 - this is the continuation of the line
05a48                 | ' ' 3 - this is the last continued line
05a48                 | ' ' 4 - this is the one and only part
05a48                 | ' 
05a48                 | ' err=0
05a48                 | ' cmd=0
05a48                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05a48     30 00 90 5D |  if_ne	jmp	#LR__0480
05a4c     54 00 00 FF 
05a50     F4 E5 05 F1 | 	add	objptr, ##43508
05a54     F2 28 02 FB | 	rdlong	local06, objptr
05a58     02 00 00 FF 
05a5c     34 E4 05 F1 | 	add	objptr, ##1076
05a60     F2 02 68 FC | 	wrlong	#1, objptr
05a64     00 2A 06 F6 | 	mov	local07, #0
05a68     13 00 00 FF 
05a6c     38 E4 05 F1 | 	add	objptr, ##9784
05a70     F2 00 68 FC | 	wrlong	#0, objptr
05a74     6A 00 00 FF 
05a78     60 E4 85 F1 | 	sub	objptr, ##54368
05a7c                 | LR__0480
05a7c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05a7c     02 24 0E F2 | 	cmp	local04, #2 wz
05a80     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05a84     24 00 90 5D |  if_ne	jmp	#LR__0481
05a88     54 00 00 FF 
05a8c     F4 E5 05 F1 | 	add	objptr, ##43508
05a90     F2 28 02 FB | 	rdlong	local06, objptr
05a94     01 2A 06 F6 | 	mov	local07, #1
05a98     02 00 00 FF 
05a9c     34 E4 05 F1 | 	add	objptr, ##1076
05aa0     F2 02 68 FC | 	wrlong	#1, objptr
05aa4     57 00 00 FF 
05aa8     28 E4 85 F1 | 	sub	objptr, ##44584
05aac                 | LR__0481
05aac                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05aac     04 24 0E F2 | 	cmp	local04, #4 wz
05ab0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05ab4     30 00 90 5D |  if_ne	jmp	#LR__0482
05ab8     54 00 00 FF 
05abc     FC E5 05 F1 | 	add	objptr, ##43516
05ac0     F2 28 02 FB | 	rdlong	local06, objptr
05ac4     02 2A 06 F6 | 	mov	local07, #2
05ac8     02 00 00 FF 
05acc     2C E4 05 F1 | 	add	objptr, ##1068
05ad0     F2 04 68 FC | 	wrlong	#2, objptr
05ad4     13 00 00 FF 
05ad8     38 E4 05 F1 | 	add	objptr, ##9784
05adc     F2 04 68 FC | 	wrlong	#2, objptr
05ae0     6A 00 00 FF 
05ae4     60 E4 85 F1 | 	sub	objptr, ##54368
05ae8                 | LR__0482
05ae8                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05ae8     05 24 0E F2 | 	cmp	local04, #5 wz
05aec     44 00 90 5D |  if_ne	jmp	#LR__0483
05af0     57 00 00 FF 
05af4     28 E4 05 F1 | 	add	objptr, ##44584
05af8     F2 FA 01 FB | 	rdlong	result1, objptr
05afc     FD 2A 02 F6 | 	mov	local07, result1
05b00     03 2A 66 F0 | 	shl	local07, #3
05b04     02 00 00 FF 
05b08     38 E4 85 F1 | 	sub	objptr, ##1080
05b0c     F2 2A 02 F1 | 	add	local07, objptr
05b10     04 2A 06 F1 | 	add	local07, #4
05b14     15 29 02 FB | 	rdlong	local06, local07
05b18     FD 2A 02 F6 | 	mov	local07, result1
05b1c     01 2A 06 F1 | 	add	local07, #1
05b20     02 00 00 FF 
05b24     38 E4 05 F1 | 	add	objptr, ##1080
05b28     F2 2A 62 FC | 	wrlong	local07, objptr
05b2c     57 00 00 FF 
05b30     28 E4 85 F1 | 	sub	objptr, ##44584
05b34                 | LR__0483
05b34     00 2C 06 F6 | 	mov	local08, #0
05b38                 | ' vars=0
05b38                 | ' 'print  "In compile_immediate cmd=:", cmd
05b38                 | ' 451 select case cmd
05b38     5C 28 0E F2 | 	cmp	local06, #92 wz
05b3c     08 02 90 AD |  if_e	jmp	#LR__0484
05b40     47 28 0E F2 | 	cmp	local06, #71 wz
05b44     0C 02 90 AD |  if_e	jmp	#LR__0485
05b48     59 28 0E F2 | 	cmp	local06, #89 wz
05b4c     10 02 90 AD |  if_e	jmp	#LR__0486
05b50     45 28 0E F2 | 	cmp	local06, #69 wz
05b54     14 02 90 AD |  if_e	jmp	#LR__0487
05b58     69 28 0E F2 | 	cmp	local06, #105 wz
05b5c     18 02 90 AD |  if_e	jmp	#LR__0488
05b60     40 28 0E F2 | 	cmp	local06, #64 wz
05b64     84 04 90 AD |  if_e	jmp	#LR__0543
05b68     49 28 0E F2 | 	cmp	local06, #73 wz
05b6c     14 02 90 AD |  if_e	jmp	#LR__0489
05b70     50 28 0E F2 | 	cmp	local06, #80 wz
05b74     18 02 90 AD |  if_e	jmp	#LR__0490
05b78     68 28 0E F2 | 	cmp	local06, #104 wz
05b7c     1C 02 90 AD |  if_e	jmp	#LR__0491
05b80     74 28 0E F2 | 	cmp	local06, #116 wz
05b84     20 02 90 AD |  if_e	jmp	#LR__0492
05b88     73 28 0E F2 | 	cmp	local06, #115 wz
05b8c     24 02 90 AD |  if_e	jmp	#LR__0493
05b90     6C 28 0E F2 | 	cmp	local06, #108 wz
05b94     28 02 90 AD |  if_e	jmp	#LR__0494
05b98     89 28 0E F2 | 	cmp	local06, #137 wz
05b9c     4C 04 90 AD |  if_e	jmp	#LR__0543
05ba0     72 28 0E F2 | 	cmp	local06, #114 wz
05ba4     24 02 90 AD |  if_e	jmp	#LR__0495
05ba8     5D 28 0E F2 | 	cmp	local06, #93 wz
05bac     3C 04 90 AD |  if_e	jmp	#LR__0543
05bb0     96 28 0E F2 | 	cmp	local06, #150 wz
05bb4     1C 02 90 AD |  if_e	jmp	#LR__0496
05bb8     43 28 0E F2 | 	cmp	local06, #67 wz
05bbc     1C 02 90 AD |  if_e	jmp	#LR__0497
05bc0     5A 28 0E F2 | 	cmp	local06, #90 wz
05bc4     20 02 90 AD |  if_e	jmp	#LR__0498
05bc8     4E 28 0E F2 | 	cmp	local06, #78 wz
05bcc     20 02 90 AD |  if_e	jmp	#LR__0499
05bd0     46 28 0E F2 | 	cmp	local06, #70 wz
05bd4     34 02 90 AD |  if_e	jmp	#LR__0501
05bd8     71 28 0E F2 | 	cmp	local06, #113 wz
05bdc     38 02 90 AD |  if_e	jmp	#LR__0502
05be0     60 28 0E F2 | 	cmp	local06, #96 wz
05be4     3C 02 90 AD |  if_e	jmp	#LR__0503
05be8     4A 28 0E F2 | 	cmp	local06, #74 wz
05bec     40 02 90 AD |  if_e	jmp	#LR__0504
05bf0     48 28 0E F2 | 	cmp	local06, #72 wz
05bf4     40 02 90 AD |  if_e	jmp	#LR__0505
05bf8     58 28 0E F2 | 	cmp	local06, #88 wz
05bfc     44 02 90 AD |  if_e	jmp	#LR__0506
05c00     5F 28 0E F2 | 	cmp	local06, #95 wz
05c04     44 02 90 AD |  if_e	jmp	#LR__0507
05c08     8A 28 0E F2 | 	cmp	local06, #138 wz
05c0c     48 02 90 AD |  if_e	jmp	#LR__0508
05c10     4C 28 0E F2 | 	cmp	local06, #76 wz
05c14     4C 02 90 AD |  if_e	jmp	#LR__0509
05c18     52 28 0E F2 | 	cmp	local06, #82 wz
05c1c     50 02 90 AD |  if_e	jmp	#LR__0510
05c20     97 28 0E F2 | 	cmp	local06, #151 wz
05c24     54 02 90 AD |  if_e	jmp	#LR__0511
05c28     61 28 0E F2 | 	cmp	local06, #97 wz
05c2c     58 02 90 AD |  if_e	jmp	#LR__0512
05c30     63 28 0E F2 | 	cmp	local06, #99 wz
05c34     5C 02 90 AD |  if_e	jmp	#LR__0513
05c38     41 28 0E F2 | 	cmp	local06, #65 wz
05c3c     AC 03 90 AD |  if_e	jmp	#LR__0543
05c40     4B 28 0E F2 | 	cmp	local06, #75 wz
05c44     58 02 90 AD |  if_e	jmp	#LR__0514
05c48     5E 28 0E F2 | 	cmp	local06, #94 wz
05c4c     58 02 90 AD |  if_e	jmp	#LR__0515
05c50     7C 28 0E F2 | 	cmp	local06, #124 wz
05c54     5C 02 90 AD |  if_e	jmp	#LR__0516
05c58     7D 28 0E F2 | 	cmp	local06, #125 wz
05c5c     60 02 90 AD |  if_e	jmp	#LR__0517
05c60     7E 28 0E F2 | 	cmp	local06, #126 wz
05c64     64 02 90 AD |  if_e	jmp	#LR__0518
05c68     7F 28 0E F2 | 	cmp	local06, #127 wz
05c6c     68 02 90 AD |  if_e	jmp	#LR__0519
05c70     80 28 0E F2 | 	cmp	local06, #128 wz
05c74     6C 02 90 AD |  if_e	jmp	#LR__0520
05c78     55 28 0E F2 | 	cmp	local06, #85 wz
05c7c     70 02 90 AD |  if_e	jmp	#LR__0521
05c80     75 28 0E F2 | 	cmp	local06, #117 wz
05c84     74 02 90 AD |  if_e	jmp	#LR__0522
05c88     42 28 0E F2 | 	cmp	local06, #66 wz
05c8c     78 02 90 AD |  if_e	jmp	#LR__0523
05c90     95 28 0E F2 | 	cmp	local06, #149 wz
05c94     7C 02 90 AD |  if_e	jmp	#LR__0524
05c98     81 28 0E F2 | 	cmp	local06, #129 wz
05c9c     80 02 90 AD |  if_e	jmp	#LR__0525
05ca0     44 28 0E F2 | 	cmp	local06, #68 wz
05ca4     84 02 90 AD |  if_e	jmp	#LR__0526
05ca8     88 28 0E F2 | 	cmp	local06, #136 wz
05cac     3C 03 90 AD |  if_e	jmp	#LR__0543
05cb0     92 28 0E F2 | 	cmp	local06, #146 wz
05cb4     80 02 90 AD |  if_e	jmp	#LR__0527
05cb8     4D 28 0E F2 | 	cmp	local06, #77 wz
05cbc     2C 03 90 AD |  if_e	jmp	#LR__0543
05cc0     51 28 0E F2 | 	cmp	local06, #81 wz
05cc4     78 02 90 AD |  if_e	jmp	#LR__0528
05cc8     8E 28 0E F2 | 	cmp	local06, #142 wz
05ccc     7C 02 90 AD |  if_e	jmp	#LR__0529
05cd0     90 28 0E F2 | 	cmp	local06, #144 wz
05cd4     80 02 90 AD |  if_e	jmp	#LR__0530
05cd8     8D 28 0E F2 | 	cmp	local06, #141 wz
05cdc     84 02 90 AD |  if_e	jmp	#LR__0531
05ce0     8C 28 0E F2 | 	cmp	local06, #140 wz
05ce4     88 02 90 AD |  if_e	jmp	#LR__0532
05ce8     91 28 0E F2 | 	cmp	local06, #145 wz
05cec     8C 02 90 AD |  if_e	jmp	#LR__0533
05cf0     8B 28 0E F2 | 	cmp	local06, #139 wz
05cf4     90 02 90 AD |  if_e	jmp	#LR__0534
05cf8     8F 28 0E F2 | 	cmp	local06, #143 wz
05cfc     94 02 90 AD |  if_e	jmp	#LR__0535
05d00     6D 28 0E F2 | 	cmp	local06, #109 wz
05d04     98 02 90 AD |  if_e	jmp	#LR__0536
05d08     70 28 0E F2 | 	cmp	local06, #112 wz
05d0c     DC 02 90 AD |  if_e	jmp	#LR__0543
05d10     56 28 0E F2 | 	cmp	local06, #86 wz
05d14     94 02 90 AD |  if_e	jmp	#LR__0537
05d18     57 28 0E F2 | 	cmp	local06, #87 wz
05d1c     CC 02 90 AD |  if_e	jmp	#LR__0543
05d20     79 28 0E F2 | 	cmp	local06, #121 wz
05d24     90 02 90 AD |  if_e	jmp	#LR__0538
05d28     77 28 0E F2 | 	cmp	local06, #119 wz
05d2c     94 02 90 AD |  if_e	jmp	#LR__0539
05d30     78 28 0E F2 | 	cmp	local06, #120 wz
05d34     98 02 90 AD |  if_e	jmp	#LR__0540
05d38     01 00 00 FF 
05d3c     04 28 0E F2 | 	cmp	local06, ##516 wz
05d40     98 02 90 AD |  if_e	jmp	#LR__0541
05d44     9C 02 90 FD | 	jmp	#LR__0542
05d48                 | LR__0484
05d48     A0 0C B0 FD | 	call	#_compile_fun_2p
05d4c     FD 26 02 F6 | 	mov	local05, result1
05d50     98 02 90 FD | 	jmp	#LR__0543
05d54                 | LR__0485
05d54     D4 0D B0 FD | 	call	#_compile_fun_4p
05d58     FD 26 02 F6 | 	mov	local05, result1
05d5c     8C 02 90 FD | 	jmp	#LR__0543
05d60                 | LR__0486
05d60     9C 2E B0 FD | 	call	#_expr
05d64                 | ' expr()
05d64                 | ' return 0
05d64     00 26 06 F6 | 	mov	local05, #0
05d68     80 02 90 FD | 	jmp	#LR__0543
05d6c                 | LR__0487
05d6c     F0 0C B0 FD | 	call	#_compile_fun_3p
05d70     FD 26 02 F6 | 	mov	local05, result1
05d74     74 02 90 FD | 	jmp	#LR__0543
05d78                 | LR__0488
05d78     84 2E B0 FD | 	call	#_expr
05d7c                 | ' expr()
05d7c                 | ' return 0
05d7c     00 26 06 F6 | 	mov	local05, #0
05d80     68 02 90 FD | 	jmp	#LR__0543
05d84                 | LR__0489
05d84     78 2E B0 FD | 	call	#_expr
05d88                 | ' expr()
05d88                 | ' return 0
05d88     00 26 06 F6 | 	mov	local05, #0
05d8c     5C 02 90 FD | 	jmp	#LR__0543
05d90                 | LR__0490
05d90     38 10 B0 FD | 	call	#_compile_fun_varp
05d94     FD 2C 02 F6 | 	mov	local08, result1
05d98     50 02 90 FD | 	jmp	#LR__0543
05d9c                 | LR__0491
05d9c     60 2E B0 FD | 	call	#_expr
05da0                 | ' expr()
05da0                 | ' return 0
05da0     00 26 06 F6 | 	mov	local05, #0
05da4     44 02 90 FD | 	jmp	#LR__0543
05da8                 | LR__0492
05da8     20 10 B0 FD | 	call	#_compile_fun_varp
05dac     FD 2C 02 F6 | 	mov	local08, result1
05db0     38 02 90 FD | 	jmp	#LR__0543
05db4                 | LR__0493
05db4     14 10 B0 FD | 	call	#_compile_fun_varp
05db8     FD 2C 02 F6 | 	mov	local08, result1
05dbc     2C 02 90 FD | 	jmp	#LR__0543
05dc0                 | LR__0494
05dc0     8C 0E B0 FD | 	call	#_compile_fun_5p
05dc4     FD 26 02 F6 | 	mov	local05, result1
05dc8     20 02 90 FD | 	jmp	#LR__0543
05dcc                 | LR__0495
05dcc     E8 19 B0 FD | 	call	#_compile_dim
05dd0     D4 02 90 FD | 	jmp	#LR__0544
05dd4                 | LR__0496
05dd4     14 0C B0 FD | 	call	#_compile_fun_2p
05dd8     10 02 90 FD | 	jmp	#LR__0543
05ddc                 | LR__0497
05ddc     0C 0C B0 FD | 	call	#_compile_fun_2p
05de0     FD 26 02 F6 | 	mov	local05, result1
05de4     04 02 90 FD | 	jmp	#LR__0543
05de8                 | LR__0498
05de8     A4 18 B0 FD | 	call	#_compile_else
05dec     B8 02 90 FD | 	jmp	#LR__0544
05df0                 | LR__0499
05df0     01 24 16 F2 | 	cmp	local04, #1 wc
05df4     08 00 90 CD |  if_b	jmp	#LR__0500
05df8     A4 2A B0 FD | 	call	#_compile_goto
05dfc     A8 02 90 FD | 	jmp	#LR__0544
05e00                 | LR__0500
05e00     19 12 06 F6 | 	mov	arg01, #25
05e04     50 29 B1 FD | 	call	#_printerror
05e08     9C 02 90 FD | 	jmp	#LR__0544
05e0c                 | LR__0501
05e0c     50 0C B0 FD | 	call	#_compile_fun_3p
05e10     FD 26 02 F6 | 	mov	local05, result1
05e14     D4 01 90 FD | 	jmp	#LR__0543
05e18                 | LR__0502
05e18     10 0D B0 FD | 	call	#_compile_fun_4p
05e1c     FD 26 02 F6 | 	mov	local05, result1
05e20     C8 01 90 FD | 	jmp	#LR__0543
05e24                 | LR__0503
05e24     D8 2D B0 FD | 	call	#_expr
05e28                 | ' expr()
05e28                 | ' return 0
05e28     00 26 06 F6 | 	mov	local05, #0
05e2c     BC 01 90 FD | 	jmp	#LR__0543
05e30                 | LR__0504
05e30     94 20 B0 FD | 	call	#_compile_for
05e34     70 02 90 FD | 	jmp	#LR__0544
05e38                 | LR__0505
05e38     F0 0C B0 FD | 	call	#_compile_fun_4p
05e3c     FD 26 02 F6 | 	mov	local05, result1
05e40     A8 01 90 FD | 	jmp	#LR__0543
05e44                 | LR__0506
05e44     08 17 B0 FD | 	call	#_compile_if
05e48     5C 02 90 FD | 	jmp	#LR__0544
05e4c                 | LR__0507
05e4c     B0 2D B0 FD | 	call	#_expr
05e50                 | ' expr()
05e50                 | ' return 0
05e50     00 26 06 F6 | 	mov	local05, #0
05e54     94 01 90 FD | 	jmp	#LR__0543
05e58                 | LR__0508
05e58     A4 2D B0 FD | 	call	#_expr
05e5c                 | ' expr()
05e5c                 | ' return 0
05e5c     00 26 06 F6 | 	mov	local05, #0
05e60     88 01 90 FD | 	jmp	#LR__0543
05e64                 | LR__0509
05e64     64 0F B0 FD | 	call	#_compile_fun_varp
05e68     FD 2C 02 F6 | 	mov	local08, result1
05e6c     7C 01 90 FD | 	jmp	#LR__0543
05e70                 | LR__0510
05e70     58 0F B0 FD | 	call	#_compile_fun_varp
05e74     FD 2C 02 F6 | 	mov	local08, result1
05e78     70 01 90 FD | 	jmp	#LR__0543
05e7c                 | LR__0511
05e7c     6C 0B B0 FD | 	call	#_compile_fun_2p
05e80     FD 26 02 F6 | 	mov	local05, result1
05e84     64 01 90 FD | 	jmp	#LR__0543
05e88                 | LR__0512
05e88     74 2D B0 FD | 	call	#_expr
05e8c                 | ' expr()
05e8c                 | ' return 0
05e8c     00 26 06 F6 | 	mov	local05, #0
05e90     58 01 90 FD | 	jmp	#LR__0543
05e94                 | LR__0513
05e94     68 2D B0 FD | 	call	#_expr
05e98                 | ' expr()
05e98                 | ' return 0
05e98     00 26 06 F6 | 	mov	local05, #0
05e9c     4C 01 90 FD | 	jmp	#LR__0543
05ea0                 | LR__0514
05ea0     4C 28 B0 FD | 	call	#_compile_next
05ea4     00 02 90 FD | 	jmp	#LR__0544
05ea8                 | LR__0515
05ea8     54 2D B0 FD | 	call	#_expr
05eac                 | ' expr()
05eac                 | ' return 0
05eac     00 26 06 F6 | 	mov	local05, #0
05eb0     38 01 90 FD | 	jmp	#LR__0543
05eb4                 | LR__0516
05eb4     48 2D B0 FD | 	call	#_expr
05eb8                 | ' expr()
05eb8                 | ' return 0
05eb8     00 26 06 F6 | 	mov	local05, #0
05ebc     2C 01 90 FD | 	jmp	#LR__0543
05ec0                 | LR__0517
05ec0     3C 2D B0 FD | 	call	#_expr
05ec4                 | ' expr()
05ec4                 | ' return 0
05ec4     00 26 06 F6 | 	mov	local05, #0
05ec8     20 01 90 FD | 	jmp	#LR__0543
05ecc                 | LR__0518
05ecc     30 2D B0 FD | 	call	#_expr
05ed0                 | ' expr()
05ed0                 | ' return 0
05ed0     00 26 06 F6 | 	mov	local05, #0
05ed4     14 01 90 FD | 	jmp	#LR__0543
05ed8                 | LR__0519
05ed8     50 0C B0 FD | 	call	#_compile_fun_4p
05edc     FD 26 02 F6 | 	mov	local05, result1
05ee0     08 01 90 FD | 	jmp	#LR__0543
05ee4                 | LR__0520
05ee4     18 2D B0 FD | 	call	#_expr
05ee8                 | ' expr()
05ee8                 | ' return 0
05ee8     00 26 06 F6 | 	mov	local05, #0
05eec     FC 00 90 FD | 	jmp	#LR__0543
05ef0                 | LR__0521
05ef0     F8 0A B0 FD | 	call	#_compile_fun_2p
05ef4     FD 26 02 F6 | 	mov	local05, result1
05ef8     F0 00 90 FD | 	jmp	#LR__0543
05efc                 | LR__0522
05efc     CC 0E B0 FD | 	call	#_compile_fun_varp
05f00     FD 2C 02 F6 | 	mov	local08, result1
05f04     E4 00 90 FD | 	jmp	#LR__0543
05f08                 | LR__0523
05f08     E0 0A B0 FD | 	call	#_compile_fun_2p
05f0c     FD 26 02 F6 | 	mov	local05, result1
05f10     D8 00 90 FD | 	jmp	#LR__0543
05f14                 | LR__0524
05f14     D4 0A B0 FD | 	call	#_compile_fun_2p
05f18     FD 26 02 F6 | 	mov	local05, result1
05f1c     CC 00 90 FD | 	jmp	#LR__0543
05f20                 | LR__0525
05f20     C8 0A B0 FD | 	call	#_compile_fun_2p
05f24     FD 26 02 F6 | 	mov	local05, result1
05f28     C0 00 90 FD | 	jmp	#LR__0543
05f2c                 | LR__0526
05f2c     48 0F B0 FD | 	call	#_compile_print
05f30     FD 26 02 F6 | 	mov	local05, result1
05f34     70 01 90 FD | 	jmp	#LR__0544
05f38                 | LR__0527
05f38     C4 2C B0 FD | 	call	#_expr
05f3c                 | ' expr()
05f3c                 | ' return 0
05f3c     AC 00 90 FD | 	jmp	#LR__0543
05f40                 | LR__0528
05f40     88 0E B0 FD | 	call	#_compile_fun_varp
05f44     FD 2C 02 F6 | 	mov	local08, result1
05f48     A0 00 90 FD | 	jmp	#LR__0543
05f4c                 | LR__0529
05f4c     9C 0A B0 FD | 	call	#_compile_fun_2p
05f50     FD 26 02 F6 | 	mov	local05, result1
05f54     94 00 90 FD | 	jmp	#LR__0543
05f58                 | LR__0530
05f58     90 0A B0 FD | 	call	#_compile_fun_2p
05f5c     FD 26 02 F6 | 	mov	local05, result1
05f60     88 00 90 FD | 	jmp	#LR__0543
05f64                 | LR__0531
05f64     84 0A B0 FD | 	call	#_compile_fun_2p
05f68     FD 26 02 F6 | 	mov	local05, result1
05f6c     7C 00 90 FD | 	jmp	#LR__0543
05f70                 | LR__0532
05f70     78 0A B0 FD | 	call	#_compile_fun_2p
05f74     FD 26 02 F6 | 	mov	local05, result1
05f78     70 00 90 FD | 	jmp	#LR__0543
05f7c                 | LR__0533
05f7c     6C 0A B0 FD | 	call	#_compile_fun_2p
05f80     FD 26 02 F6 | 	mov	local05, result1
05f84     64 00 90 FD | 	jmp	#LR__0543
05f88                 | LR__0534
05f88     60 0A B0 FD | 	call	#_compile_fun_2p
05f8c     FD 26 02 F6 | 	mov	local05, result1
05f90     58 00 90 FD | 	jmp	#LR__0543
05f94                 | LR__0535
05f94     54 0A B0 FD | 	call	#_compile_fun_2p
05f98     FD 26 02 F6 | 	mov	local05, result1
05f9c     4C 00 90 FD | 	jmp	#LR__0543
05fa0                 | LR__0536
05fa0     BC 0A B0 FD | 	call	#_compile_fun_3p
05fa4     FD 26 02 F6 | 	mov	local05, result1
05fa8     40 00 90 FD | 	jmp	#LR__0543
05fac                 | LR__0537
05fac     50 2C B0 FD | 	call	#_expr
05fb0                 | ' expr()
05fb0                 | ' return 0
05fb0     00 26 06 F6 | 	mov	local05, #0
05fb4     34 00 90 FD | 	jmp	#LR__0543
05fb8                 | LR__0538
05fb8     30 0A B0 FD | 	call	#_compile_fun_2p
05fbc     FD 26 02 F6 | 	mov	local05, result1
05fc0     28 00 90 FD | 	jmp	#LR__0543
05fc4                 | LR__0539
05fc4     24 0A B0 FD | 	call	#_compile_fun_2p
05fc8     FD 26 02 F6 | 	mov	local05, result1
05fcc     1C 00 90 FD | 	jmp	#LR__0543
05fd0                 | LR__0540
05fd0     18 0A B0 FD | 	call	#_compile_fun_2p
05fd4     FD 26 02 F6 | 	mov	local05, result1
05fd8     10 00 90 FD | 	jmp	#LR__0543
05fdc                 | LR__0541
05fdc     E8 01 B0 FD | 	call	#_compile_array_assign
05fe0     C4 00 90 FD | 	jmp	#LR__0544
05fe4                 | LR__0542
05fe4     48 09 B0 FD | 	call	#_compile_unknown
05fe8     BC 00 90 FD | 	jmp	#LR__0544
05fec                 | LR__0543
05fec     14 23 02 F6 | 	mov	local03, local06
05ff0     16 1F 02 F6 | 	mov	local01, local08
05ff4     0F 2B 02 F6 | 	mov	local07, local01
05ff8     10 2F 02 F6 | 	mov	local09, local02
05ffc     11 29 02 F6 | 	mov	local06, local03
06000     6A 00 00 FF 
06004     60 E4 05 F1 | 	add	objptr, ##54368
06008     F2 1E 02 FB | 	rdlong	local01, objptr
0600c     0F 2D 02 F6 | 	mov	local08, local01
06010     01 2C 66 F0 | 	shl	local08, #1
06014     0F 2D 02 F1 | 	add	local08, local01
06018     02 2C 66 F0 | 	shl	local08, #2
0601c     03 00 00 FF 
06020     00 E4 85 F1 | 	sub	objptr, ##1536
06024     F2 2C 02 F1 | 	add	local08, objptr
06028     16 2B 62 FC | 	wrlong	local07, local08
0602c     03 00 00 FF 
06030     00 E4 05 F1 | 	add	objptr, ##1536
06034     F2 1E 02 FB | 	rdlong	local01, objptr
06038     0F 2D 02 F6 | 	mov	local08, local01
0603c     01 2C 66 F0 | 	shl	local08, #1
06040     0F 2D 02 F1 | 	add	local08, local01
06044     02 2C 66 F0 | 	shl	local08, #2
06048     03 00 00 FF 
0604c     00 E4 85 F1 | 	sub	objptr, ##1536
06050     F2 2C 02 F1 | 	add	local08, objptr
06054     04 2C 06 F1 | 	add	local08, #4
06058     16 2F 62 FC | 	wrlong	local09, local08
0605c     03 00 00 FF 
06060     00 E4 05 F1 | 	add	objptr, ##1536
06064     F2 1E 02 FB | 	rdlong	local01, objptr
06068     0F 2D 02 F6 | 	mov	local08, local01
0606c     01 2C 66 F0 | 	shl	local08, #1
06070     0F 2D 02 F1 | 	add	local08, local01
06074     02 2C 66 F0 | 	shl	local08, #2
06078     03 00 00 FF 
0607c     00 E4 85 F1 | 	sub	objptr, ##1536
06080     F2 2C 02 F1 | 	add	local08, objptr
06084     08 2C 06 F1 | 	add	local08, #8
06088     16 29 62 FC | 	wrlong	local06, local08
0608c     03 00 00 FF 
06090     00 E4 05 F1 | 	add	objptr, ##1536
06094     F2 2A 02 FB | 	rdlong	local07, objptr
06098     01 2A 06 F1 | 	add	local07, #1
0609c     F2 2A 62 FC | 	wrlong	local07, objptr
060a0     6A 00 00 FF 
060a4     60 E4 85 F1 | 	sub	objptr, ##54368
060a8                 | LR__0544
060a8                 | ' 
060a8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
060a8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
060a8     00 24 0E F2 | 	cmp	local04, #0 wz
060ac     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
060b0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
060b4     38 00 90 5D |  if_ne	jmp	#LR__0545
060b8     6A 00 00 FF 
060bc     60 E4 05 F1 | 	add	objptr, ##54368
060c0     F2 2C 02 FB | 	rdlong	local08, objptr
060c4     16 1F 02 F6 | 	mov	local01, local08
060c8     01 1E 66 F0 | 	shl	local01, #1
060cc     16 1F 02 F1 | 	add	local01, local08
060d0     02 1E 66 F0 | 	shl	local01, #2
060d4     03 00 00 FF 
060d8     00 E4 85 F1 | 	sub	objptr, ##1536
060dc     F2 1E 02 F1 | 	add	local01, objptr
060e0     08 1E 06 F1 | 	add	local01, #8
060e4     0F FD 6B FC | 	wrlong	#510, local01
060e8     67 00 00 FF 
060ec     60 E4 85 F1 | 	sub	objptr, ##52832
060f0                 | LR__0545
060f0                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
060f0     6A 00 00 FF 
060f4     60 E4 05 F1 | 	add	objptr, ##54368
060f8     F2 1E 02 FB | 	rdlong	local01, objptr
060fc     6A 00 00 FF 
06100     60 E4 85 F1 | 	sub	objptr, ##54368
06104     97 58 48 FB | 	callpa	#(@LR__0548-@LR__0546)>>2,fcache_load_ptr_
06108                 | LR__0546
06108     0F 2D 02 F6 | 	mov	local08, local01
0610c     01 2C 66 F0 | 	shl	local08, #1
06110     0F 2D 02 F1 | 	add	local08, local01
06114     02 2C 66 F0 | 	shl	local08, #2
06118     67 00 00 FF 
0611c     60 E4 05 F1 | 	add	objptr, ##52832
06120     F2 2C 02 F1 | 	add	local08, objptr
06124     08 2C 06 F1 | 	add	local08, #8
06128     16 2D 02 FB | 	rdlong	local08, local08
0612c     9B 2C 0E F2 | 	cmp	local08, #155 wz
06130     67 00 00 FF 
06134     60 E4 85 F1 | 	sub	objptr, ##52832
06138     70 00 90 5D |  if_ne	jmp	#LR__0547
0613c     0F 2D 02 F6 | 	mov	local08, local01
06140     01 2C 86 F1 | 	sub	local08, #1
06144     16 2F 02 F6 | 	mov	local09, local08
06148     01 2E 66 F0 | 	shl	local09, #1
0614c     16 2F 02 F1 | 	add	local09, local08
06150     02 2E 66 F0 | 	shl	local09, #2
06154     67 00 00 FF 
06158     60 E4 05 F1 | 	add	objptr, ##52832
0615c     F2 2E 02 F1 | 	add	local09, objptr
06160     08 2E 06 F1 | 	add	local09, #8
06164     17 2D 02 FB | 	rdlong	local08, local09
06168     11 2C 0E F2 | 	cmp	local08, #17 wz
0616c     67 00 00 FF 
06170     60 E4 85 F1 | 	sub	objptr, ##52832
06174     34 00 90 5D |  if_ne	jmp	#LR__0547
06178     0F 2F 02 F6 | 	mov	local09, local01
0617c     01 2E 86 F1 | 	sub	local09, #1
06180     17 2D 02 F6 | 	mov	local08, local09
06184     01 2C 66 F0 | 	shl	local08, #1
06188     17 2D 02 F1 | 	add	local08, local09
0618c     02 2C 66 F0 | 	shl	local08, #2
06190     67 00 00 FF 
06194     60 E4 05 F1 | 	add	objptr, ##52832
06198     F2 2C 02 F1 | 	add	local08, objptr
0619c     08 2C 06 F1 | 	add	local08, #8
061a0     16 25 68 FC | 	wrlong	#18, local08
061a4     67 00 00 FF 
061a8     60 E4 85 F1 | 	sub	objptr, ##52832
061ac                 | LR__0547
061ac     01 1E 86 F1 | 	sub	local01, #1
061b0     01 1E 56 F2 | 	cmps	local01, #1 wc
061b4     50 FF 9F 3D |  if_ae	jmp	#LR__0546
061b8                 | LR__0548
061b8                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
061b8                 | ' return err
061b8     13 FB 01 F6 | 	mov	result1, local05
061bc     A7 F0 03 F6 | 	mov	ptra, fp
061c0     B2 00 A0 FD | 	call	#popregs_
061c4                 | _compile_immediate_ret
061c4     2D 00 64 FD | 	ret
061c8                 | 
061c8                 | ' 
061c8                 | ' sub compile_array_assign
061c8                 | _compile_array_assign
061c8     0A 4A 05 F6 | 	mov	COUNT_, #10
061cc     A8 00 A0 FD | 	call	#pushregs_
061d0     00 24 06 F6 | 	mov	local04, #0
061d4     57 00 00 FF 
061d8     28 E4 05 F1 | 	add	objptr, ##44584
061dc     F2 26 02 FB | 	rdlong	local05, objptr
061e0     13 FB 01 F6 | 	mov	result1, local05
061e4     01 FA 85 F1 | 	sub	result1, #1
061e8     03 FA 65 F0 | 	shl	result1, #3
061ec     02 00 00 FF 
061f0     38 E4 85 F1 | 	sub	objptr, ##1080
061f4     F2 FA 01 F1 | 	add	result1, objptr
061f8     FD 28 02 FB | 	rdlong	local06, result1
061fc                 | ' numpar=0
061fc                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
061fc                 | ' ' todo here: recognize params and t1.result.twowords=numpar
061fc                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
061fc                 | ' if lparts(ct).token=token_lpar then
061fc     03 26 66 F0 | 	shl	local05, #3
06200     F2 26 02 F1 | 	add	local05, objptr
06204     04 26 06 F1 | 	add	local05, #4
06208     13 27 02 FB | 	rdlong	local05, local05
0620c     15 26 0E F2 | 	cmp	local05, #21 wz
06210     54 00 00 FF 
06214     F0 E5 85 F1 | 	sub	objptr, ##43504
06218     D4 01 90 5D |  if_ne	jmp	#LR__0554
0621c     57 00 00 FF 
06220     28 E4 05 F1 | 	add	objptr, ##44584
06224     F2 2A 02 FB | 	rdlong	local07, objptr
06228     01 2A 06 F1 | 	add	local07, #1
0622c     F2 2A 62 FC | 	wrlong	local07, objptr
06230     57 00 00 FF 
06234     28 E4 85 F1 | 	sub	objptr, ##44584
06238                 | '   ct+=1 											' omit this lpar, this is for expr list
06238                 | '   do
06238                 | LR__0550
06238     C4 29 B0 FD | 	call	#_expr
0623c     57 00 00 FF 
06240     28 E4 05 F1 | 	add	objptr, ##44584
06244     F2 26 02 FB | 	rdlong	local05, objptr
06248     01 26 06 F1 | 	add	local05, #1
0624c     F2 26 62 FC | 	wrlong	local05, objptr
06250     01 24 06 F1 | 	add	local04, #1
06254     01 26 86 F1 | 	sub	local05, #1
06258     03 26 66 F0 | 	shl	local05, #3
0625c     02 00 00 FF 
06260     38 E4 85 F1 | 	sub	objptr, ##1080
06264     F2 26 02 F1 | 	add	local05, objptr
06268     04 26 06 F1 | 	add	local05, #4
0626c     13 2B 02 FB | 	rdlong	local07, local05
06270     14 2A 0E F2 | 	cmp	local07, #20 wz
06274     54 00 00 FF 
06278     F0 E5 85 F1 | 	sub	objptr, ##43504
0627c     34 00 90 AD |  if_e	jmp	#LR__0551
06280     57 00 00 FF 
06284     28 E4 05 F1 | 	add	objptr, ##44584
06288     F2 2A 02 FB | 	rdlong	local07, objptr
0628c     03 2A 66 F0 | 	shl	local07, #3
06290     02 00 00 FF 
06294     38 E4 85 F1 | 	sub	objptr, ##1080
06298     F2 2A 02 F1 | 	add	local07, objptr
0629c     04 2A 06 F1 | 	add	local07, #4
062a0     15 2B 02 FB | 	rdlong	local07, local07
062a4     FE 2B 0E F2 | 	cmp	local07, #510 wz
062a8     54 00 00 FF 
062ac     F0 E5 85 F1 | 	sub	objptr, ##43504
062b0     84 FF 9F 5D |  if_ne	jmp	#LR__0550
062b4                 | LR__0551
062b4     57 00 00 FF 
062b8     28 E4 05 F1 | 	add	objptr, ##44584
062bc     F2 2A 02 FB | 	rdlong	local07, objptr
062c0     01 2A 06 F1 | 	add	local07, #1
062c4     F2 2A 62 FC | 	wrlong	local07, objptr
062c8     57 00 00 FF 
062cc     28 E4 85 F1 | 	sub	objptr, ##44584
062d0     2C 29 B0 FD | 	call	#_expr
062d4     01 2C 66 F6 | 	neg	local08, #1
062d8     00 2E 06 F6 | 	mov	local09, #0
062dc                 | ' '   print "in array_assign, rpar found, numpar=",numpar
062dc                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
062dc                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
062dc                 | ' ct+=1 : expr()
062dc                 | ' ' now find the vae
062dc                 | ' 
062dc                 | ' j=-1 : i=0 : do : 
062dc                 | LR__0552
062dc                 | '   if variables(i).name=varname$ then j=i: exit loop
062dc     17 27 02 F6 | 	mov	local05, local09
062e0     04 26 66 F0 | 	shl	local05, #4
062e4     34 00 00 FF 
062e8     EC E5 05 F1 | 	add	objptr, ##27116
062ec     F2 26 02 F1 | 	add	local05, objptr
062f0     13 13 02 FB | 	rdlong	arg01, local05
062f4     14 15 02 F6 | 	mov	arg02, local06
062f8     34 00 00 FF 
062fc     EC E5 85 F1 | 	sub	objptr, ##27116
06300     64 5B B1 FD | 	call	#__system___string_cmp
06304     00 FA 0D F2 | 	cmp	result1, #0 wz
06308     17 2D 02 A6 |  if_e	mov	local08, local09
0630c     20 00 90 AD |  if_e	jmp	#LR__0553
06310     01 2E 06 F1 | 	add	local09, #1
06314     54 00 00 FF 
06318     EC E5 05 F1 | 	add	objptr, ##43500
0631c     F2 2A 02 FB | 	rdlong	local07, objptr
06320     54 00 00 FF 
06324     EC E5 85 F1 | 	sub	objptr, ##43500
06328     15 2F 5A F2 | 	cmps	local09, local07 wcz
0632c     AC FF 9F ED |  if_be	jmp	#LR__0552
06330                 | LR__0553
06330     16 1F 02 F6 | 	mov	local01, local08
06334     12 21 02 F6 | 	mov	local02, local04
06338     17 22 06 F6 | 	mov	local03, #23
0633c     0F 2B 02 F6 | 	mov	local07, local01
06340     10 31 02 F6 | 	mov	local10, local02
06344     11 2D 02 F6 | 	mov	local08, local03
06348     6A 00 00 FF 
0634c     60 E4 05 F1 | 	add	objptr, ##54368
06350     F2 1E 02 FB | 	rdlong	local01, objptr
06354     0F 2F 02 F6 | 	mov	local09, local01
06358     01 2E 66 F0 | 	shl	local09, #1
0635c     0F 2F 02 F1 | 	add	local09, local01
06360     02 2E 66 F0 | 	shl	local09, #2
06364     03 00 00 FF 
06368     00 E4 85 F1 | 	sub	objptr, ##1536
0636c     F2 2E 02 F1 | 	add	local09, objptr
06370     17 2B 62 FC | 	wrlong	local07, local09
06374     03 00 00 FF 
06378     00 E4 05 F1 | 	add	objptr, ##1536
0637c     F2 1E 02 FB | 	rdlong	local01, objptr
06380     0F 2F 02 F6 | 	mov	local09, local01
06384     01 2E 66 F0 | 	shl	local09, #1
06388     0F 2F 02 F1 | 	add	local09, local01
0638c     02 2E 66 F0 | 	shl	local09, #2
06390     03 00 00 FF 
06394     00 E4 85 F1 | 	sub	objptr, ##1536
06398     F2 2E 02 F1 | 	add	local09, objptr
0639c     04 2E 06 F1 | 	add	local09, #4
063a0     17 31 62 FC | 	wrlong	local10, local09
063a4     03 00 00 FF 
063a8     00 E4 05 F1 | 	add	objptr, ##1536
063ac     F2 30 02 FB | 	rdlong	local10, objptr
063b0     18 1F 02 F6 | 	mov	local01, local10
063b4     01 1E 66 F0 | 	shl	local01, #1
063b8     18 1F 02 F1 | 	add	local01, local10
063bc     02 1E 66 F0 | 	shl	local01, #2
063c0     03 00 00 FF 
063c4     00 E4 85 F1 | 	sub	objptr, ##1536
063c8     F2 1E 02 F1 | 	add	local01, objptr
063cc     08 1E 06 F1 | 	add	local01, #8
063d0     0F 2D 62 FC | 	wrlong	local08, local01
063d4     03 00 00 FF 
063d8     00 E4 05 F1 | 	add	objptr, ##1536
063dc     F2 2A 02 FB | 	rdlong	local07, objptr
063e0     01 2A 06 F1 | 	add	local07, #1
063e4     F2 2A 62 FC | 	wrlong	local07, objptr
063e8     6A 00 00 FF 
063ec     60 E4 85 F1 | 	sub	objptr, ##54368
063f0                 | LR__0554
063f0     A7 F0 03 F6 | 	mov	ptra, fp
063f4     B2 00 A0 FD | 	call	#popregs_
063f8                 | _compile_array_assign_ret
063f8     2D 00 64 FD | 	ret
063fc                 | 
063fc                 | ' 
063fc                 | ' 
063fc                 | ' sub compile_immediate_assign(linetype as ulong)
063fc                 | _compile_immediate_assign
063fc     09 4A 05 F6 | 	mov	COUNT_, #9
06400     A8 00 A0 FD | 	call	#pushregs_
06404     09 25 0A F6 | 	mov	local04, arg01 wz
06408     FF 22 06 F6 | 	mov	local03, #255
0640c     01 26 66 F6 | 	neg	local05, #1
06410                 | ' 
06410                 | ' t1.result_type=result_error : t1.result.uresult=0
06410                 | ' i=-1: j=-1
06410                 | ' 
06410                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06410     2C 00 90 5D |  if_ne	jmp	#LR__0560
06414     54 00 00 FF 
06418     F0 E5 05 F1 | 	add	objptr, ##43504
0641c     F2 28 02 FB | 	rdlong	local06, objptr
06420     02 00 00 FF 
06424     38 E4 05 F1 | 	add	objptr, ##1080
06428     F2 04 68 FC | 	wrlong	#2, objptr
0642c     13 00 00 FF 
06430     38 E4 05 F1 | 	add	objptr, ##9784
06434     F2 00 68 FC | 	wrlong	#0, objptr
06438     6A 00 00 FF 
0643c     60 E4 85 F1 | 	sub	objptr, ##54368
06440                 | LR__0560
06440                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
06440     02 24 0E F2 | 	cmp	local04, #2 wz
06444     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06448     54 00 00 AF 
0644c     F0 E5 05 A1 |  if_e	add	objptr, ##43504
06450     F2 28 02 AB |  if_e	rdlong	local06, objptr
06454     02 00 00 AF 
06458     38 E4 05 A1 |  if_e	add	objptr, ##1080
0645c     F2 04 68 AC |  if_e	wrlong	#2, objptr
06460     57 00 00 AF 
06464     28 E4 85 A1 |  if_e	sub	objptr, ##44584
06468                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
06468     04 24 0E F2 | 	cmp	local04, #4 wz
0646c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06470     2C 00 90 5D |  if_ne	jmp	#LR__0561
06474     54 00 00 FF 
06478     F8 E5 05 F1 | 	add	objptr, ##43512
0647c     F2 28 02 FB | 	rdlong	local06, objptr
06480     02 00 00 FF 
06484     30 E4 05 F1 | 	add	objptr, ##1072
06488     F2 06 68 FC | 	wrlong	#3, objptr
0648c     13 00 00 FF 
06490     38 E4 05 F1 | 	add	objptr, ##9784
06494     F2 04 68 FC | 	wrlong	#2, objptr
06498     6A 00 00 FF 
0649c     60 E4 85 F1 | 	sub	objptr, ##54368
064a0                 | LR__0561
064a0                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
064a0     05 24 0E F2 | 	cmp	local04, #5 wz
064a4     3C 00 90 5D |  if_ne	jmp	#LR__0562
064a8     57 00 00 FF 
064ac     28 E4 05 F1 | 	add	objptr, ##44584
064b0     F2 FA 01 FB | 	rdlong	result1, objptr
064b4     FD 28 02 F6 | 	mov	local06, result1
064b8     03 28 66 F0 | 	shl	local06, #3
064bc     02 00 00 FF 
064c0     38 E4 85 F1 | 	sub	objptr, ##1080
064c4     F2 28 02 F1 | 	add	local06, objptr
064c8     14 29 02 FB | 	rdlong	local06, local06
064cc     02 FA 05 F1 | 	add	result1, #2
064d0     02 00 00 FF 
064d4     38 E4 05 F1 | 	add	objptr, ##1080
064d8     F2 FA 61 FC | 	wrlong	result1, objptr
064dc     57 00 00 FF 
064e0     28 E4 85 F1 | 	sub	objptr, ##44584
064e4                 | LR__0562
064e4     14 13 02 F6 | 	mov	arg01, local06
064e8     01 14 06 F6 | 	mov	arg02, #1
064ec     1C 7A B1 FD | 	call	#__system__Right_S
064f0     0C 27 B0 FD | 	call	#_expr
064f4                 | '  
064f4                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
064f4                 | ' 
064f4                 | ' suffix2$=right$(varname2$,1)
064f4                 | ' expr()
064f4                 | ' 
064f4                 | ' 
064f4                 | ' if varnum>0 then
064f4     54 00 00 FF 
064f8     EC E5 05 F1 | 	add	objptr, ##43500
064fc     F2 2A 02 FB | 	rdlong	local07, objptr
06500     54 00 00 FF 
06504     EC E5 85 F1 | 	sub	objptr, ##43500
06508     01 2A 56 F2 | 	cmps	local07, #1 wc
0650c     58 00 90 CD |  if_b	jmp	#LR__0565
06510                 | '   for i=0 to varnum-1
06510     00 2C 06 F6 | 	mov	local08, #0
06514     54 00 00 FF 
06518     EC E5 05 F1 | 	add	objptr, ##43500
0651c     F2 2E 02 FB | 	rdlong	local09, objptr
06520     54 00 00 FF 
06524     EC E5 85 F1 | 	sub	objptr, ##43500
06528                 | LR__0563
06528     17 2D 52 F2 | 	cmps	local08, local09 wc
0652c     38 00 90 3D |  if_ae	jmp	#LR__0564
06530                 | '     if variables(i).name=varname2$ then j=i : exit
06530     16 2B 02 F6 | 	mov	local07, local08
06534     04 2A 66 F0 | 	shl	local07, #4
06538     34 00 00 FF 
0653c     EC E5 05 F1 | 	add	objptr, ##27116
06540     F2 2A 02 F1 | 	add	local07, objptr
06544     15 13 02 FB | 	rdlong	arg01, local07
06548     14 15 02 F6 | 	mov	arg02, local06
0654c     34 00 00 FF 
06550     EC E5 85 F1 | 	sub	objptr, ##27116
06554     10 59 B1 FD | 	call	#__system___string_cmp
06558     00 FA 0D F2 | 	cmp	result1, #0 wz
0655c     16 27 02 A6 |  if_e	mov	local05, local08
06560     01 2C 06 51 |  if_ne	add	local08, #1
06564     C0 FF 9F 5D |  if_ne	jmp	#LR__0563
06568                 | LR__0564
06568                 | LR__0565
06568                 | ' if  j=-1 andalso varnum<maxvars then   
06568     FF FF 7F FF 
0656c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
06570     60 00 90 5D |  if_ne	jmp	#LR__0566
06574     54 00 00 FF 
06578     EC E5 05 F1 | 	add	objptr, ##43500
0657c     F2 2A 02 FB | 	rdlong	local07, objptr
06580     54 00 00 FF 
06584     EC E5 85 F1 | 	sub	objptr, ##43500
06588     01 00 00 FF 
0658c     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
06590     40 00 90 3D |  if_ae	jmp	#LR__0566
06594     54 00 00 FF 
06598     EC E5 05 F1 | 	add	objptr, ##43500
0659c     F2 2E 02 FB | 	rdlong	local09, objptr
065a0     04 2E 66 F0 | 	shl	local09, #4
065a4     20 00 00 FF 
065a8     00 E4 85 F1 | 	sub	objptr, ##16384
065ac     F2 2E 02 F1 | 	add	local09, objptr
065b0     17 29 62 FC | 	wrlong	local06, local09
065b4     20 00 00 FF 
065b8     00 E4 05 F1 | 	add	objptr, ##16384
065bc     F2 2A 02 FB | 	rdlong	local07, objptr
065c0     15 27 02 F6 | 	mov	local05, local07
065c4     01 2A 06 F1 | 	add	local07, #1
065c8     F2 2A 62 FC | 	wrlong	local07, objptr
065cc     54 00 00 FF 
065d0     EC E5 85 F1 | 	sub	objptr, ##43500
065d4                 | LR__0566
065d4     13 1F 02 F6 | 	mov	local01, local05
065d8     17 22 06 F6 | 	mov	local03, #23
065dc     0F 2B 02 F6 | 	mov	local07, local01
065e0     10 2F 02 F6 | 	mov	local09, local02
065e4     11 1F 02 F6 | 	mov	local01, local03
065e8     6A 00 00 FF 
065ec     60 E4 05 F1 | 	add	objptr, ##54368
065f0     F2 2C 02 FB | 	rdlong	local08, objptr
065f4     16 29 02 F6 | 	mov	local06, local08
065f8     01 28 66 F0 | 	shl	local06, #1
065fc     16 29 02 F1 | 	add	local06, local08
06600     02 28 66 F0 | 	shl	local06, #2
06604     03 00 00 FF 
06608     00 E4 85 F1 | 	sub	objptr, ##1536
0660c     F2 28 02 F1 | 	add	local06, objptr
06610     14 2B 62 FC | 	wrlong	local07, local06
06614     03 00 00 FF 
06618     00 E4 05 F1 | 	add	objptr, ##1536
0661c     F2 2C 02 FB | 	rdlong	local08, objptr
06620     16 2B 02 F6 | 	mov	local07, local08
06624     01 2A 66 F0 | 	shl	local07, #1
06628     16 2B 02 F1 | 	add	local07, local08
0662c     02 2A 66 F0 | 	shl	local07, #2
06630     03 00 00 FF 
06634     00 E4 85 F1 | 	sub	objptr, ##1536
06638     F2 2A 02 F1 | 	add	local07, objptr
0663c     04 2A 06 F1 | 	add	local07, #4
06640     15 2F 62 FC | 	wrlong	local09, local07
06644     03 00 00 FF 
06648     00 E4 05 F1 | 	add	objptr, ##1536
0664c     F2 2E 02 FB | 	rdlong	local09, objptr
06650     17 2D 02 F6 | 	mov	local08, local09
06654     01 2C 66 F0 | 	shl	local08, #1
06658     17 2D 02 F1 | 	add	local08, local09
0665c     02 2C 66 F0 | 	shl	local08, #2
06660     03 00 00 FF 
06664     00 E4 85 F1 | 	sub	objptr, ##1536
06668     F2 2C 02 F1 | 	add	local08, objptr
0666c     08 2C 06 F1 | 	add	local08, #8
06670     16 1F 62 FC | 	wrlong	local01, local08
06674     03 00 00 FF 
06678     00 E4 05 F1 | 	add	objptr, ##1536
0667c     F2 2A 02 FB | 	rdlong	local07, objptr
06680     01 2A 06 F1 | 	add	local07, #1
06684     F2 2A 62 FC | 	wrlong	local07, objptr
06688     6A 00 00 FF 
0668c     60 E4 85 F1 | 	sub	objptr, ##54368
06690                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
06690                 | ' 
06690                 | ' 
06690                 | ' 
06690                 | ' 
06690                 | ' 
06690                 | ' 
06690                 | ' compiledline(lineptr)=t1:  lineptr+=1 
06690                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
06690     00 24 0E F2 | 	cmp	local04, #0 wz
06694     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06698     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
0669c     38 00 90 5D |  if_ne	jmp	#LR__0567
066a0     6A 00 00 FF 
066a4     60 E4 05 F1 | 	add	objptr, ##54368
066a8     F2 1E 02 FB | 	rdlong	local01, objptr
066ac     0F 2F 02 F6 | 	mov	local09, local01
066b0     01 2E 66 F0 | 	shl	local09, #1
066b4     0F 2F 02 F1 | 	add	local09, local01
066b8     02 2E 66 F0 | 	shl	local09, #2
066bc     03 00 00 FF 
066c0     00 E4 85 F1 | 	sub	objptr, ##1536
066c4     F2 2E 02 F1 | 	add	local09, objptr
066c8     08 2E 06 F1 | 	add	local09, #8
066cc     17 FD 6B FC | 	wrlong	#510, local09
066d0     67 00 00 FF 
066d4     60 E4 85 F1 | 	sub	objptr, ##52832
066d8                 | LR__0567
066d8     A7 F0 03 F6 | 	mov	ptra, fp
066dc     B2 00 A0 FD | 	call	#popregs_
066e0                 | _compile_immediate_assign_ret
066e0     2D 00 64 FD | 	ret
066e4                 | 
066e4                 | ' 
066e4                 | ' ' ------------------ compile the line that is calling a command 
066e4                 | ' 
066e4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
066e4                 | _compile
066e4     04 4A 05 F6 | 	mov	COUNT_, #4
066e8     A8 00 A0 FD | 	call	#pushregs_
066ec     09 1F 0A F6 | 	mov	local01, arg01 wz
066f0     0A 21 02 F6 | 	mov	local02, arg02
066f4     0B 23 02 F6 | 	mov	local03, arg03
066f8                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
066f8                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
066f8                 | '  
066f8                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
066f8                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
066f8     0C 00 90 5D |  if_ne	jmp	#LR__0570
066fc     00 12 06 F6 | 	mov	arg01, #0
06700     30 F3 BF FD | 	call	#_compile_immediate
06704     A0 00 90 FD | 	jmp	#LR__0577
06708                 | LR__0570
06708     67 00 00 FF 
0670c     60 E4 05 F1 | 	add	objptr, ##52832
06710     F2 1E 62 FC | 	wrlong	local01, objptr
06714     04 E4 05 F1 | 	add	objptr, #4
06718     F2 20 62 FC | 	wrlong	local02, objptr
0671c     67 00 00 FF 
06720     64 E4 85 F1 | 	sub	objptr, ##52836
06724     11 13 02 F6 | 	mov	arg01, local03
06728     01 12 06 F1 | 	add	arg01, #1
0672c     04 F3 BF FD | 	call	#_compile_immediate
06730     FD 24 0A F6 | 	mov	local04, result1 wz
06734                 | ' 
06734                 | ' ucompiledline(0)=alinemajor
06734                 | ' ucompiledline(1)=alineminor
06734                 | ' 
06734                 | ' 
06734                 | ' ' cont: 0: this is the first part of the line that will continue
06734                 | ' ' 1 - this is the continuation of the line
06734                 | ' ' 2 - this is the last continued line
06734                 | ' ' 3 - this is the ome and only part
06734                 | ' 
06734                 | ' err=compile_immediate(cont+1) 
06734                 | ' if err=0 then
06734     6C 00 90 5D |  if_ne	jmp	#LR__0576
06738                 | '   if cont=3 orelse cont=2 then 
06738     03 22 0E F2 | 	cmp	local03, #3 wz
0673c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06740     60 00 90 5D |  if_ne	jmp	#LR__0575
06744                 | '     if alinemajor >lastline then 
06744     6A 00 00 FF 
06748     6C E4 05 F1 | 	add	objptr, ##54380
0674c     F2 16 02 FB | 	rdlong	arg03, objptr
06750     6A 00 00 FF 
06754     6C E4 85 F1 | 	sub	objptr, ##54380
06758     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0675c     0C 00 90 ED |  if_be	jmp	#LR__0571
06760     0F 13 02 F6 | 	mov	arg01, local01
06764     0C F2 BF FD | 	call	#_add_line_at_end
06768     38 00 90 FD | 	jmp	#LR__0574
0676c                 | LR__0571
0676c     0F 13 02 F6 | 	mov	arg01, local01
06770     3C EB BF FD | 	call	#_deleteline
06774                 | '       deleteline(alinemajor)  
06774                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
06774     6A 00 00 FF 
06778     6C E4 05 F1 | 	add	objptr, ##54380
0677c     F2 16 02 FB | 	rdlong	arg03, objptr
06780     6A 00 00 FF 
06784     6C E4 85 F1 | 	sub	objptr, ##54380
06788     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0678c     0C 00 90 ED |  if_be	jmp	#LR__0572
06790     0F 13 02 F6 | 	mov	arg01, local01
06794     DC F1 BF FD | 	call	#_add_line_at_end
06798     08 00 90 FD | 	jmp	#LR__0573
0679c                 | LR__0572
0679c     0F 13 02 F6 | 	mov	arg01, local01
067a0     B4 EF BF FD | 	call	#_insertline
067a4                 | LR__0573
067a4                 | LR__0574
067a4                 | LR__0575
067a4                 | LR__0576
067a4                 | ' return err
067a4     12 FB 01 F6 | 	mov	result1, local04
067a8                 | LR__0577
067a8     A7 F0 03 F6 | 	mov	ptra, fp
067ac     B2 00 A0 FD | 	call	#popregs_
067b0                 | _compile_ret
067b0     2D 00 64 FD | 	ret
067b4                 | 
067b4                 | ' 
067b4                 | ' ' ------------------ compile the line that is assigning to a variable
067b4                 | ' 
067b4                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
067b4                 | _compile_assign
067b4     03 4A 05 F6 | 	mov	COUNT_, #3
067b8     A8 00 A0 FD | 	call	#pushregs_
067bc     09 1F 0A F6 | 	mov	local01, arg01 wz
067c0     0A 21 02 F6 | 	mov	local02, arg02
067c4     0B 23 02 F6 | 	mov	local03, arg03
067c8                 | ' 
067c8                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
067c8                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
067c8     0C 00 90 5D |  if_ne	jmp	#LR__0580
067cc     00 12 06 F6 | 	mov	arg01, #0
067d0     28 FC BF FD | 	call	#_compile_immediate_assign
067d4     94 00 90 FD | 	jmp	#LR__0586
067d8                 | LR__0580
067d8     67 00 00 FF 
067dc     60 E4 05 F1 | 	add	objptr, ##52832
067e0     F2 1E 62 FC | 	wrlong	local01, objptr
067e4     04 E4 05 F1 | 	add	objptr, #4
067e8     F2 20 62 FC | 	wrlong	local02, objptr
067ec     67 00 00 FF 
067f0     64 E4 85 F1 | 	sub	objptr, ##52836
067f4     11 13 02 F6 | 	mov	arg01, local03
067f8     01 12 06 F1 | 	add	arg01, #1
067fc     FC FB BF FD | 	call	#_compile_immediate_assign
06800                 | ' 
06800                 | ' ucompiledline(0)=alinemajor
06800                 | ' ucompiledline(1)=alineminor
06800                 | ' 
06800                 | ' compile_immediate_assign(cont+1) 
06800                 | ' 
06800                 | ' if cont=3 orelse cont=2 then 
06800     03 22 0E F2 | 	cmp	local03, #3 wz
06804     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06808     60 00 90 5D |  if_ne	jmp	#LR__0585
0680c                 | '   if alinemajor >lastline then 
0680c     6A 00 00 FF 
06810     6C E4 05 F1 | 	add	objptr, ##54380
06814     F2 16 02 FB | 	rdlong	arg03, objptr
06818     6A 00 00 FF 
0681c     6C E4 85 F1 | 	sub	objptr, ##54380
06820     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06824     0C 00 90 ED |  if_be	jmp	#LR__0581
06828     0F 13 02 F6 | 	mov	arg01, local01
0682c     44 F1 BF FD | 	call	#_add_line_at_end
06830     38 00 90 FD | 	jmp	#LR__0584
06834                 | LR__0581
06834     0F 13 02 F6 | 	mov	arg01, local01
06838     74 EA BF FD | 	call	#_deleteline
0683c                 | '     deleteline(alinemajor)  
0683c                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0683c     6A 00 00 FF 
06840     6C E4 05 F1 | 	add	objptr, ##54380
06844     F2 16 02 FB | 	rdlong	arg03, objptr
06848     6A 00 00 FF 
0684c     6C E4 85 F1 | 	sub	objptr, ##54380
06850     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06854     0C 00 90 ED |  if_be	jmp	#LR__0582
06858     0F 13 02 F6 | 	mov	arg01, local01
0685c     14 F1 BF FD | 	call	#_add_line_at_end
06860     08 00 90 FD | 	jmp	#LR__0583
06864                 | LR__0582
06864     0F 13 02 F6 | 	mov	arg01, local01
06868     EC EE BF FD | 	call	#_insertline
0686c                 | LR__0583
0686c                 | LR__0584
0686c                 | LR__0585
0686c                 | LR__0586
0686c     A7 F0 03 F6 | 	mov	ptra, fp
06870     B2 00 A0 FD | 	call	#popregs_
06874                 | _compile_assign_ret
06874     2D 00 64 FD | 	ret
06878                 | 
06878                 | ' 
06878                 | ' sub compile_error(errno)
06878                 | _compile_error
06878     FF 04 06 F6 | 	mov	_var03, #255
0687c     01 07 02 F6 | 	mov	_var04, _var02
06880     02 09 02 F6 | 	mov	_var05, _var03
06884     6A 00 00 FF 
06888     60 E4 05 F1 | 	add	objptr, ##54368
0688c     F2 0A 02 FB | 	rdlong	_var06, objptr
06890     05 0D 02 F6 | 	mov	_var07, _var06
06894     01 0C 66 F0 | 	shl	_var07, #1
06898     05 0D 02 F1 | 	add	_var07, _var06
0689c     02 0C 66 F0 | 	shl	_var07, #2
068a0     03 00 00 FF 
068a4     00 E4 85 F1 | 	sub	objptr, ##1536
068a8     F2 0C 02 F1 | 	add	_var07, objptr
068ac     06 13 62 FC | 	wrlong	arg01, _var07
068b0     03 00 00 FF 
068b4     00 E4 05 F1 | 	add	objptr, ##1536
068b8     F2 0C 02 FB | 	rdlong	_var07, objptr
068bc     06 0B 02 F6 | 	mov	_var06, _var07
068c0     01 0A 66 F0 | 	shl	_var06, #1
068c4     06 0B 02 F1 | 	add	_var06, _var07
068c8     02 0A 66 F0 | 	shl	_var06, #2
068cc     03 00 00 FF 
068d0     00 E4 85 F1 | 	sub	objptr, ##1536
068d4     F2 0A 02 F1 | 	add	_var06, objptr
068d8     04 0A 06 F1 | 	add	_var06, #4
068dc     05 07 62 FC | 	wrlong	_var04, _var06
068e0     03 00 00 FF 
068e4     00 E4 05 F1 | 	add	objptr, ##1536
068e8     F2 0C 02 FB | 	rdlong	_var07, objptr
068ec     06 0B 02 F6 | 	mov	_var06, _var07
068f0     01 0A 66 F0 | 	shl	_var06, #1
068f4     06 0B 02 F1 | 	add	_var06, _var07
068f8     02 0A 66 F0 | 	shl	_var06, #2
068fc     03 00 00 FF 
06900     00 E4 85 F1 | 	sub	objptr, ##1536
06904     F2 0A 02 F1 | 	add	_var06, objptr
06908     08 0A 06 F1 | 	add	_var06, #8
0690c     05 09 62 FC | 	wrlong	_var05, _var06
06910     03 00 00 FF 
06914     00 E4 05 F1 | 	add	objptr, ##1536
06918     F2 12 02 FB | 	rdlong	arg01, objptr
0691c     01 12 06 F1 | 	add	arg01, #1
06920     F2 12 62 FC | 	wrlong	arg01, objptr
06924     6A 00 00 FF 
06928     60 E4 85 F1 | 	sub	objptr, ##54368
0692c                 | _compile_error_ret
0692c     2D 00 64 FD | 	ret
06930                 | 
06930                 | ' 
06930                 | ' sub compile_unknown() 
06930                 | _compile_unknown
06930     FF 04 06 F6 | 	mov	_var03, #255
06934     17 00 06 F6 | 	mov	_var01, #23
06938     01 07 02 F6 | 	mov	_var04, _var02
0693c     02 01 02 F6 | 	mov	_var01, _var03
06940     6A 00 00 FF 
06944     60 E4 05 F1 | 	add	objptr, ##54368
06948     F2 08 02 FB | 	rdlong	_var05, objptr
0694c     04 0B 02 F6 | 	mov	_var06, _var05
06950     01 0A 66 F0 | 	shl	_var06, #1
06954     04 0B 02 F1 | 	add	_var06, _var05
06958     02 0A 66 F0 | 	shl	_var06, #2
0695c     03 00 00 FF 
06960     00 E4 85 F1 | 	sub	objptr, ##1536
06964     F2 0A 02 F1 | 	add	_var06, objptr
06968     05 2F 68 FC | 	wrlong	#23, _var06
0696c     03 00 00 FF 
06970     00 E4 05 F1 | 	add	objptr, ##1536
06974     F2 0A 02 FB | 	rdlong	_var06, objptr
06978     05 09 02 F6 | 	mov	_var05, _var06
0697c     01 08 66 F0 | 	shl	_var05, #1
06980     05 09 02 F1 | 	add	_var05, _var06
06984     02 08 66 F0 | 	shl	_var05, #2
06988     03 00 00 FF 
0698c     00 E4 85 F1 | 	sub	objptr, ##1536
06990     F2 08 02 F1 | 	add	_var05, objptr
06994     04 08 06 F1 | 	add	_var05, #4
06998     04 07 62 FC | 	wrlong	_var04, _var05
0699c     03 00 00 FF 
069a0     00 E4 05 F1 | 	add	objptr, ##1536
069a4     F2 0A 02 FB | 	rdlong	_var06, objptr
069a8     05 09 02 F6 | 	mov	_var05, _var06
069ac     01 08 66 F0 | 	shl	_var05, #1
069b0     05 09 02 F1 | 	add	_var05, _var06
069b4     02 08 66 F0 | 	shl	_var05, #2
069b8     03 00 00 FF 
069bc     00 E4 85 F1 | 	sub	objptr, ##1536
069c0     F2 08 02 F1 | 	add	_var05, objptr
069c4     08 08 06 F1 | 	add	_var05, #8
069c8     04 01 62 FC | 	wrlong	_var01, _var05
069cc     03 00 00 FF 
069d0     00 E4 05 F1 | 	add	objptr, ##1536
069d4     F2 0A 02 FB | 	rdlong	_var06, objptr
069d8     01 0A 06 F1 | 	add	_var06, #1
069dc     F2 0A 62 FC | 	wrlong	_var06, objptr
069e0     6A 00 00 FF 
069e4     60 E4 85 F1 | 	sub	objptr, ##54368
069e8                 | _compile_unknown_ret
069e8     2D 00 64 FD | 	ret
069ec                 | 
069ec                 | ' 
069ec                 | ' function compile_fun_2p() as ulong
069ec                 | _compile_fun_2p
069ec     01 4A 05 F6 | 	mov	COUNT_, #1
069f0     A8 00 A0 FD | 	call	#pushregs_
069f4     08 22 B0 FD | 	call	#_expr
069f8                 | ' 
069f8                 | ' expr()
069f8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
069f8     57 00 00 FF 
069fc     28 E4 05 F1 | 	add	objptr, ##44584
06a00     F2 1E 02 FB | 	rdlong	local01, objptr
06a04     03 1E 66 F0 | 	shl	local01, #3
06a08     02 00 00 FF 
06a0c     38 E4 85 F1 | 	sub	objptr, ##1080
06a10     F2 1E 02 F1 | 	add	local01, objptr
06a14     04 1E 06 F1 | 	add	local01, #4
06a18     0F 1F 02 FB | 	rdlong	local01, local01
06a1c     11 1E 0E F2 | 	cmp	local01, #17 wz
06a20     54 00 00 FF 
06a24     F0 E5 85 F1 | 	sub	objptr, ##43504
06a28     15 FA 05 56 |  if_ne	mov	result1, #21
06a2c     24 00 90 5D |  if_ne	jmp	#LR__0590
06a30     57 00 00 FF 
06a34     28 E4 05 F1 | 	add	objptr, ##44584
06a38     F2 1E 02 FB | 	rdlong	local01, objptr
06a3c     01 1E 06 F1 | 	add	local01, #1
06a40     F2 1E 62 FC | 	wrlong	local01, objptr
06a44     57 00 00 FF 
06a48     28 E4 85 F1 | 	sub	objptr, ##44584
06a4c     B0 21 B0 FD | 	call	#_expr
06a50     00 FA 05 F6 | 	mov	result1, #0
06a54                 | LR__0590
06a54     A7 F0 03 F6 | 	mov	ptra, fp
06a58     B2 00 A0 FD | 	call	#popregs_
06a5c                 | _compile_fun_2p_ret
06a5c     2D 00 64 FD | 	ret
06a60                 | 
06a60                 | ' 
06a60                 | ' function compile_fun_3p() as ulong
06a60                 | _compile_fun_3p
06a60     01 4A 05 F6 | 	mov	COUNT_, #1
06a64     A8 00 A0 FD | 	call	#pushregs_
06a68     94 21 B0 FD | 	call	#_expr
06a6c                 | ' 
06a6c                 | ' expr()
06a6c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06a6c     57 00 00 FF 
06a70     28 E4 05 F1 | 	add	objptr, ##44584
06a74     F2 1E 02 FB | 	rdlong	local01, objptr
06a78     03 1E 66 F0 | 	shl	local01, #3
06a7c     02 00 00 FF 
06a80     38 E4 85 F1 | 	sub	objptr, ##1080
06a84     F2 1E 02 F1 | 	add	local01, objptr
06a88     04 1E 06 F1 | 	add	local01, #4
06a8c     0F 1F 02 FB | 	rdlong	local01, local01
06a90     11 1E 0E F2 | 	cmp	local01, #17 wz
06a94     54 00 00 FF 
06a98     F0 E5 85 F1 | 	sub	objptr, ##43504
06a9c     15 FA 05 56 |  if_ne	mov	result1, #21
06aa0     7C 00 90 5D |  if_ne	jmp	#LR__0600
06aa4     57 00 00 FF 
06aa8     28 E4 05 F1 | 	add	objptr, ##44584
06aac     F2 1E 02 FB | 	rdlong	local01, objptr
06ab0     01 1E 06 F1 | 	add	local01, #1
06ab4     F2 1E 62 FC | 	wrlong	local01, objptr
06ab8     57 00 00 FF 
06abc     28 E4 85 F1 | 	sub	objptr, ##44584
06ac0     3C 21 B0 FD | 	call	#_expr
06ac4                 | ' expr()
06ac4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ac4     57 00 00 FF 
06ac8     28 E4 05 F1 | 	add	objptr, ##44584
06acc     F2 1E 02 FB | 	rdlong	local01, objptr
06ad0     03 1E 66 F0 | 	shl	local01, #3
06ad4     02 00 00 FF 
06ad8     38 E4 85 F1 | 	sub	objptr, ##1080
06adc     F2 1E 02 F1 | 	add	local01, objptr
06ae0     04 1E 06 F1 | 	add	local01, #4
06ae4     0F 1F 02 FB | 	rdlong	local01, local01
06ae8     11 1E 0E F2 | 	cmp	local01, #17 wz
06aec     54 00 00 FF 
06af0     F0 E5 85 F1 | 	sub	objptr, ##43504
06af4     15 FA 05 56 |  if_ne	mov	result1, #21
06af8     24 00 90 5D |  if_ne	jmp	#LR__0600
06afc     57 00 00 FF 
06b00     28 E4 05 F1 | 	add	objptr, ##44584
06b04     F2 1E 02 FB | 	rdlong	local01, objptr
06b08     01 1E 06 F1 | 	add	local01, #1
06b0c     F2 1E 62 FC | 	wrlong	local01, objptr
06b10     57 00 00 FF 
06b14     28 E4 85 F1 | 	sub	objptr, ##44584
06b18     E4 20 B0 FD | 	call	#_expr
06b1c     00 FA 05 F6 | 	mov	result1, #0
06b20                 | LR__0600
06b20     A7 F0 03 F6 | 	mov	ptra, fp
06b24     B2 00 A0 FD | 	call	#popregs_
06b28                 | _compile_fun_3p_ret
06b28     2D 00 64 FD | 	ret
06b2c                 | 
06b2c                 | ' 
06b2c                 | ' function compile_fun_4p() as ulong
06b2c                 | _compile_fun_4p
06b2c     01 4A 05 F6 | 	mov	COUNT_, #1
06b30     A8 00 A0 FD | 	call	#pushregs_
06b34     C8 20 B0 FD | 	call	#_expr
06b38                 | ' 
06b38                 | ' expr()
06b38                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b38     57 00 00 FF 
06b3c     28 E4 05 F1 | 	add	objptr, ##44584
06b40     F2 1E 02 FB | 	rdlong	local01, objptr
06b44     03 1E 66 F0 | 	shl	local01, #3
06b48     02 00 00 FF 
06b4c     38 E4 85 F1 | 	sub	objptr, ##1080
06b50     F2 1E 02 F1 | 	add	local01, objptr
06b54     04 1E 06 F1 | 	add	local01, #4
06b58     0F 1F 02 FB | 	rdlong	local01, local01
06b5c     11 1E 0E F2 | 	cmp	local01, #17 wz
06b60     54 00 00 FF 
06b64     F0 E5 85 F1 | 	sub	objptr, ##43504
06b68     15 FA 05 56 |  if_ne	mov	result1, #21
06b6c     D4 00 90 5D |  if_ne	jmp	#LR__0610
06b70     57 00 00 FF 
06b74     28 E4 05 F1 | 	add	objptr, ##44584
06b78     F2 1E 02 FB | 	rdlong	local01, objptr
06b7c     01 1E 06 F1 | 	add	local01, #1
06b80     F2 1E 62 FC | 	wrlong	local01, objptr
06b84     57 00 00 FF 
06b88     28 E4 85 F1 | 	sub	objptr, ##44584
06b8c     70 20 B0 FD | 	call	#_expr
06b90                 | ' expr()
06b90                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06b90     57 00 00 FF 
06b94     28 E4 05 F1 | 	add	objptr, ##44584
06b98     F2 1E 02 FB | 	rdlong	local01, objptr
06b9c     03 1E 66 F0 | 	shl	local01, #3
06ba0     02 00 00 FF 
06ba4     38 E4 85 F1 | 	sub	objptr, ##1080
06ba8     F2 1E 02 F1 | 	add	local01, objptr
06bac     04 1E 06 F1 | 	add	local01, #4
06bb0     0F 1F 02 FB | 	rdlong	local01, local01
06bb4     11 1E 0E F2 | 	cmp	local01, #17 wz
06bb8     54 00 00 FF 
06bbc     F0 E5 85 F1 | 	sub	objptr, ##43504
06bc0     15 FA 05 56 |  if_ne	mov	result1, #21
06bc4     7C 00 90 5D |  if_ne	jmp	#LR__0610
06bc8     57 00 00 FF 
06bcc     28 E4 05 F1 | 	add	objptr, ##44584
06bd0     F2 1E 02 FB | 	rdlong	local01, objptr
06bd4     01 1E 06 F1 | 	add	local01, #1
06bd8     F2 1E 62 FC | 	wrlong	local01, objptr
06bdc     57 00 00 FF 
06be0     28 E4 85 F1 | 	sub	objptr, ##44584
06be4     18 20 B0 FD | 	call	#_expr
06be8                 | ' expr()
06be8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06be8     57 00 00 FF 
06bec     28 E4 05 F1 | 	add	objptr, ##44584
06bf0     F2 1E 02 FB | 	rdlong	local01, objptr
06bf4     03 1E 66 F0 | 	shl	local01, #3
06bf8     02 00 00 FF 
06bfc     38 E4 85 F1 | 	sub	objptr, ##1080
06c00     F2 1E 02 F1 | 	add	local01, objptr
06c04     04 1E 06 F1 | 	add	local01, #4
06c08     0F 1F 02 FB | 	rdlong	local01, local01
06c0c     11 1E 0E F2 | 	cmp	local01, #17 wz
06c10     54 00 00 FF 
06c14     F0 E5 85 F1 | 	sub	objptr, ##43504
06c18     15 FA 05 56 |  if_ne	mov	result1, #21
06c1c     24 00 90 5D |  if_ne	jmp	#LR__0610
06c20     57 00 00 FF 
06c24     28 E4 05 F1 | 	add	objptr, ##44584
06c28     F2 1E 02 FB | 	rdlong	local01, objptr
06c2c     01 1E 06 F1 | 	add	local01, #1
06c30     F2 1E 62 FC | 	wrlong	local01, objptr
06c34     57 00 00 FF 
06c38     28 E4 85 F1 | 	sub	objptr, ##44584
06c3c     C0 1F B0 FD | 	call	#_expr
06c40     00 FA 05 F6 | 	mov	result1, #0
06c44                 | LR__0610
06c44     A7 F0 03 F6 | 	mov	ptra, fp
06c48     B2 00 A0 FD | 	call	#popregs_
06c4c                 | _compile_fun_4p_ret
06c4c     2D 00 64 FD | 	ret
06c50                 | 
06c50                 | ' 
06c50                 | ' 
06c50                 | ' function compile_fun_5p() as ulong
06c50                 | _compile_fun_5p
06c50     01 4A 05 F6 | 	mov	COUNT_, #1
06c54     A8 00 A0 FD | 	call	#pushregs_
06c58     A4 1F B0 FD | 	call	#_expr
06c5c                 | ' 
06c5c                 | ' expr()
06c5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c5c     57 00 00 FF 
06c60     28 E4 05 F1 | 	add	objptr, ##44584
06c64     F2 1E 02 FB | 	rdlong	local01, objptr
06c68     03 1E 66 F0 | 	shl	local01, #3
06c6c     02 00 00 FF 
06c70     38 E4 85 F1 | 	sub	objptr, ##1080
06c74     F2 1E 02 F1 | 	add	local01, objptr
06c78     04 1E 06 F1 | 	add	local01, #4
06c7c     0F 1F 02 FB | 	rdlong	local01, local01
06c80     11 1E 0E F2 | 	cmp	local01, #17 wz
06c84     54 00 00 FF 
06c88     F0 E5 85 F1 | 	sub	objptr, ##43504
06c8c     15 FA 05 56 |  if_ne	mov	result1, #21
06c90     2C 01 90 5D |  if_ne	jmp	#LR__0620
06c94     57 00 00 FF 
06c98     28 E4 05 F1 | 	add	objptr, ##44584
06c9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ca0     01 1E 06 F1 | 	add	local01, #1
06ca4     F2 1E 62 FC | 	wrlong	local01, objptr
06ca8     57 00 00 FF 
06cac     28 E4 85 F1 | 	sub	objptr, ##44584
06cb0     4C 1F B0 FD | 	call	#_expr
06cb4                 | ' expr()
06cb4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cb4     57 00 00 FF 
06cb8     28 E4 05 F1 | 	add	objptr, ##44584
06cbc     F2 1E 02 FB | 	rdlong	local01, objptr
06cc0     03 1E 66 F0 | 	shl	local01, #3
06cc4     02 00 00 FF 
06cc8     38 E4 85 F1 | 	sub	objptr, ##1080
06ccc     F2 1E 02 F1 | 	add	local01, objptr
06cd0     04 1E 06 F1 | 	add	local01, #4
06cd4     0F 1F 02 FB | 	rdlong	local01, local01
06cd8     11 1E 0E F2 | 	cmp	local01, #17 wz
06cdc     54 00 00 FF 
06ce0     F0 E5 85 F1 | 	sub	objptr, ##43504
06ce4     15 FA 05 56 |  if_ne	mov	result1, #21
06ce8     D4 00 90 5D |  if_ne	jmp	#LR__0620
06cec     57 00 00 FF 
06cf0     28 E4 05 F1 | 	add	objptr, ##44584
06cf4     F2 1E 02 FB | 	rdlong	local01, objptr
06cf8     01 1E 06 F1 | 	add	local01, #1
06cfc     F2 1E 62 FC | 	wrlong	local01, objptr
06d00     57 00 00 FF 
06d04     28 E4 85 F1 | 	sub	objptr, ##44584
06d08     F4 1E B0 FD | 	call	#_expr
06d0c                 | ' expr()
06d0c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d0c     57 00 00 FF 
06d10     28 E4 05 F1 | 	add	objptr, ##44584
06d14     F2 1E 02 FB | 	rdlong	local01, objptr
06d18     03 1E 66 F0 | 	shl	local01, #3
06d1c     02 00 00 FF 
06d20     38 E4 85 F1 | 	sub	objptr, ##1080
06d24     F2 1E 02 F1 | 	add	local01, objptr
06d28     04 1E 06 F1 | 	add	local01, #4
06d2c     0F 1F 02 FB | 	rdlong	local01, local01
06d30     11 1E 0E F2 | 	cmp	local01, #17 wz
06d34     54 00 00 FF 
06d38     F0 E5 85 F1 | 	sub	objptr, ##43504
06d3c     15 FA 05 56 |  if_ne	mov	result1, #21
06d40     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d44     57 00 00 FF 
06d48     28 E4 05 F1 | 	add	objptr, ##44584
06d4c     F2 1E 02 FB | 	rdlong	local01, objptr
06d50     01 1E 06 F1 | 	add	local01, #1
06d54     F2 1E 62 FC | 	wrlong	local01, objptr
06d58     57 00 00 FF 
06d5c     28 E4 85 F1 | 	sub	objptr, ##44584
06d60     9C 1E B0 FD | 	call	#_expr
06d64                 | ' expr()
06d64                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d64     57 00 00 FF 
06d68     28 E4 05 F1 | 	add	objptr, ##44584
06d6c     F2 1E 02 FB | 	rdlong	local01, objptr
06d70     03 1E 66 F0 | 	shl	local01, #3
06d74     02 00 00 FF 
06d78     38 E4 85 F1 | 	sub	objptr, ##1080
06d7c     F2 1E 02 F1 | 	add	local01, objptr
06d80     04 1E 06 F1 | 	add	local01, #4
06d84     0F 1F 02 FB | 	rdlong	local01, local01
06d88     11 1E 0E F2 | 	cmp	local01, #17 wz
06d8c     54 00 00 FF 
06d90     F0 E5 85 F1 | 	sub	objptr, ##43504
06d94     15 FA 05 56 |  if_ne	mov	result1, #21
06d98     24 00 90 5D |  if_ne	jmp	#LR__0620
06d9c     57 00 00 FF 
06da0     28 E4 05 F1 | 	add	objptr, ##44584
06da4     F2 1E 02 FB | 	rdlong	local01, objptr
06da8     01 1E 06 F1 | 	add	local01, #1
06dac     F2 1E 62 FC | 	wrlong	local01, objptr
06db0     57 00 00 FF 
06db4     28 E4 85 F1 | 	sub	objptr, ##44584
06db8     44 1E B0 FD | 	call	#_expr
06dbc     00 FA 05 F6 | 	mov	result1, #0
06dc0                 | LR__0620
06dc0     A7 F0 03 F6 | 	mov	ptra, fp
06dc4     B2 00 A0 FD | 	call	#popregs_
06dc8                 | _compile_fun_5p_ret
06dc8     2D 00 64 FD | 	ret
06dcc                 | 
06dcc                 | ' 
06dcc                 | ' function compile_fun_varp() as ulong 
06dcc                 | _compile_fun_varp
06dcc     02 4A 05 F6 | 	mov	COUNT_, #2
06dd0     A8 00 A0 FD | 	call	#pushregs_
06dd4     00 1E 06 F6 | 	mov	local01, #0
06dd8                 | ' i=0
06dd8                 | ' if lparts(ct).token<>token_end then
06dd8     57 00 00 FF 
06ddc     28 E4 05 F1 | 	add	objptr, ##44584
06de0     F2 20 02 FB | 	rdlong	local02, objptr
06de4     03 20 66 F0 | 	shl	local02, #3
06de8     02 00 00 FF 
06dec     38 E4 85 F1 | 	sub	objptr, ##1080
06df0     F2 20 02 F1 | 	add	local02, objptr
06df4     04 20 06 F1 | 	add	local02, #4
06df8     10 21 02 FB | 	rdlong	local02, local02
06dfc     FE 21 0E F2 | 	cmp	local02, #510 wz
06e00     54 00 00 FF 
06e04     F0 E5 85 F1 | 	sub	objptr, ##43504
06e08     5C 00 90 AD |  if_e	jmp	#LR__0632
06e0c                 | '   do
06e0c                 | LR__0630
06e0c     F0 1D B0 FD | 	call	#_expr
06e10     01 1E 06 F1 | 	add	local01, #1
06e14                 | '   expr()
06e14                 | '    i+=1
06e14                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
06e14     57 00 00 FF 
06e18     28 E4 05 F1 | 	add	objptr, ##44584
06e1c     F2 20 02 FB | 	rdlong	local02, objptr
06e20     03 20 66 F0 | 	shl	local02, #3
06e24     02 00 00 FF 
06e28     38 E4 85 F1 | 	sub	objptr, ##1080
06e2c     F2 20 02 F1 | 	add	local02, objptr
06e30     04 20 06 F1 | 	add	local02, #4
06e34     10 21 02 FB | 	rdlong	local02, local02
06e38     11 20 0E F2 | 	cmp	local02, #17 wz
06e3c     54 00 00 FF 
06e40     F0 E5 85 F1 | 	sub	objptr, ##43504
06e44     20 00 90 5D |  if_ne	jmp	#LR__0631
06e48     57 00 00 FF 
06e4c     28 E4 05 F1 | 	add	objptr, ##44584
06e50     F2 20 02 FB | 	rdlong	local02, objptr
06e54     01 20 06 F1 | 	add	local02, #1
06e58     F2 20 62 FC | 	wrlong	local02, objptr
06e5c     57 00 00 FF 
06e60     28 E4 85 F1 | 	sub	objptr, ##44584
06e64     A4 FF 9F FD | 	jmp	#LR__0630
06e68                 | LR__0631
06e68                 | LR__0632
06e68                 | ' return i
06e68     0F FB 01 F6 | 	mov	result1, local01
06e6c     A7 F0 03 F6 | 	mov	ptra, fp
06e70     B2 00 A0 FD | 	call	#popregs_
06e74                 | _compile_fun_varp_ret
06e74     2D 00 64 FD | 	ret
06e78                 | 
06e78                 | ' 
06e78                 | ' 
06e78                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
06e78                 | _compile_print
06e78     0B 4A 05 F6 | 	mov	COUNT_, #11
06e7c     A8 00 A0 FD | 	call	#pushregs_
06e80     00 1E 06 F6 | 	mov	local01, #0
06e84     1D 22 06 F6 | 	mov	local03, #29
06e88                 | ' t1.result.uresult=0 : t1.result_type=result_uint
06e88                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
06e88     57 00 00 FF 
06e8c     28 E4 05 F1 | 	add	objptr, ##44584
06e90     F2 24 02 FB | 	rdlong	local04, objptr
06e94     03 24 66 F0 | 	shl	local04, #3
06e98     02 00 00 FF 
06e9c     38 E4 85 F1 | 	sub	objptr, ##1080
06ea0     F2 24 02 F1 | 	add	local04, objptr
06ea4     04 24 06 F1 | 	add	local04, #4
06ea8     12 25 02 FB | 	rdlong	local04, local04
06eac     FE 25 0E F2 | 	cmp	local04, #510 wz
06eb0     54 00 00 FF 
06eb4     F0 E5 85 F1 | 	sub	objptr, ##43504
06eb8     68 01 90 5D |  if_ne	jmp	#LR__0640
06ebc     20 22 06 F6 | 	mov	local03, #32
06ec0     0F 27 02 F6 | 	mov	local05, local01
06ec4     10 29 02 F6 | 	mov	local06, local02
06ec8     11 2B 02 F6 | 	mov	local07, local03
06ecc     6A 00 00 FF 
06ed0     60 E4 05 F1 | 	add	objptr, ##54368
06ed4     F2 2C 02 FB | 	rdlong	local08, objptr
06ed8     16 2F 02 F6 | 	mov	local09, local08
06edc     01 2E 66 F0 | 	shl	local09, #1
06ee0     16 2F 02 F1 | 	add	local09, local08
06ee4     02 2E 66 F0 | 	shl	local09, #2
06ee8     03 00 00 FF 
06eec     00 E4 85 F1 | 	sub	objptr, ##1536
06ef0     F2 2E 02 F1 | 	add	local09, objptr
06ef4     17 27 62 FC | 	wrlong	local05, local09
06ef8     03 00 00 FF 
06efc     00 E4 05 F1 | 	add	objptr, ##1536
06f00     F2 26 02 FB | 	rdlong	local05, objptr
06f04     13 31 02 F6 | 	mov	local10, local05
06f08     01 30 66 F0 | 	shl	local10, #1
06f0c     13 31 02 F1 | 	add	local10, local05
06f10     02 30 66 F0 | 	shl	local10, #2
06f14     03 00 00 FF 
06f18     00 E4 85 F1 | 	sub	objptr, ##1536
06f1c     F2 30 02 F1 | 	add	local10, objptr
06f20     04 30 06 F1 | 	add	local10, #4
06f24     18 29 62 FC | 	wrlong	local06, local10
06f28     03 00 00 FF 
06f2c     00 E4 05 F1 | 	add	objptr, ##1536
06f30     F2 26 02 FB | 	rdlong	local05, objptr
06f34     13 33 02 F6 | 	mov	local11, local05
06f38     01 32 66 F0 | 	shl	local11, #1
06f3c     13 33 02 F1 | 	add	local11, local05
06f40     02 32 66 F0 | 	shl	local11, #2
06f44     03 00 00 FF 
06f48     00 E4 85 F1 | 	sub	objptr, ##1536
06f4c     F2 32 02 F1 | 	add	local11, objptr
06f50     08 32 06 F1 | 	add	local11, #8
06f54     19 2B 62 FC | 	wrlong	local07, local11
06f58     03 00 00 FF 
06f5c     00 E4 05 F1 | 	add	objptr, ##1536
06f60     F2 26 02 FB | 	rdlong	local05, objptr
06f64     01 26 06 F1 | 	add	local05, #1
06f68     F2 26 62 FC | 	wrlong	local05, objptr
06f6c     44 22 06 F6 | 	mov	local03, #68
06f70     0F 27 02 F6 | 	mov	local05, local01
06f74     10 29 02 F6 | 	mov	local06, local02
06f78     11 2B 02 F6 | 	mov	local07, local03
06f7c     F2 2C 02 FB | 	rdlong	local08, objptr
06f80     16 2F 02 F6 | 	mov	local09, local08
06f84     01 2E 66 F0 | 	shl	local09, #1
06f88     16 2F 02 F1 | 	add	local09, local08
06f8c     02 2E 66 F0 | 	shl	local09, #2
06f90     03 00 00 FF 
06f94     00 E4 85 F1 | 	sub	objptr, ##1536
06f98     F2 2E 02 F1 | 	add	local09, objptr
06f9c     17 27 62 FC | 	wrlong	local05, local09
06fa0     03 00 00 FF 
06fa4     00 E4 05 F1 | 	add	objptr, ##1536
06fa8     F2 32 02 FB | 	rdlong	local11, objptr
06fac     19 31 02 F6 | 	mov	local10, local11
06fb0     01 30 66 F0 | 	shl	local10, #1
06fb4     19 31 02 F1 | 	add	local10, local11
06fb8     02 30 66 F0 | 	shl	local10, #2
06fbc     03 00 00 FF 
06fc0     00 E4 85 F1 | 	sub	objptr, ##1536
06fc4     F2 30 02 F1 | 	add	local10, objptr
06fc8     04 30 06 F1 | 	add	local10, #4
06fcc     18 29 62 FC | 	wrlong	local06, local10
06fd0     03 00 00 FF 
06fd4     00 E4 05 F1 | 	add	objptr, ##1536
06fd8     F2 30 02 FB | 	rdlong	local10, objptr
06fdc     18 33 02 F6 | 	mov	local11, local10
06fe0     01 32 66 F0 | 	shl	local11, #1
06fe4     18 33 02 F1 | 	add	local11, local10
06fe8     02 32 66 F0 | 	shl	local11, #2
06fec     03 00 00 FF 
06ff0     00 E4 85 F1 | 	sub	objptr, ##1536
06ff4     F2 32 02 F1 | 	add	local11, objptr
06ff8     08 32 06 F1 | 	add	local11, #8
06ffc     19 2B 62 FC | 	wrlong	local07, local11
07000     03 00 00 FF 
07004     00 E4 05 F1 | 	add	objptr, ##1536
07008     F2 26 02 FB | 	rdlong	local05, objptr
0700c     01 26 06 F1 | 	add	local05, #1
07010     F2 26 62 FC | 	wrlong	local05, objptr
07014     6A 00 00 FF 
07018     60 E4 85 F1 | 	sub	objptr, ##54368
0701c     00 FA 05 F6 | 	mov	result1, #0
07020     20 05 90 FD | 	jmp	#LR__0647
07024                 | LR__0640
07024                 | ' do
07024                 | LR__0641
07024     D8 1B B0 FD | 	call	#_expr
07028                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
07028                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07028     57 00 00 FF 
0702c     28 E4 05 F1 | 	add	objptr, ##44584
07030     F2 24 02 FB | 	rdlong	local04, objptr
07034     03 24 66 F0 | 	shl	local04, #3
07038     02 00 00 FF 
0703c     38 E4 85 F1 | 	sub	objptr, ##1080
07040     F2 24 02 F1 | 	add	local04, objptr
07044     04 24 06 F1 | 	add	local04, #4
07048     12 2D 02 FB | 	rdlong	local08, local04
0704c     11 2C 0E F2 | 	cmp	local08, #17 wz
07050     54 00 00 FF 
07054     F0 E5 85 F1 | 	sub	objptr, ##43504
07058     60 01 90 5D |  if_ne	jmp	#LR__0642
0705c     21 22 06 F6 | 	mov	local03, #33
07060     0F 27 02 F6 | 	mov	local05, local01
07064     10 29 02 F6 | 	mov	local06, local02
07068     11 2B 02 F6 | 	mov	local07, local03
0706c     6A 00 00 FF 
07070     60 E4 05 F1 | 	add	objptr, ##54368
07074     F2 2C 02 FB | 	rdlong	local08, objptr
07078     16 2F 02 F6 | 	mov	local09, local08
0707c     01 2E 66 F0 | 	shl	local09, #1
07080     16 2F 02 F1 | 	add	local09, local08
07084     02 2E 66 F0 | 	shl	local09, #2
07088     03 00 00 FF 
0708c     00 E4 85 F1 | 	sub	objptr, ##1536
07090     F2 2E 02 F1 | 	add	local09, objptr
07094     17 27 62 FC | 	wrlong	local05, local09
07098     03 00 00 FF 
0709c     00 E4 05 F1 | 	add	objptr, ##1536
070a0     F2 32 02 FB | 	rdlong	local11, objptr
070a4     19 31 02 F6 | 	mov	local10, local11
070a8     01 30 66 F0 | 	shl	local10, #1
070ac     19 31 02 F1 | 	add	local10, local11
070b0     02 30 66 F0 | 	shl	local10, #2
070b4     03 00 00 FF 
070b8     00 E4 85 F1 | 	sub	objptr, ##1536
070bc     F2 30 02 F1 | 	add	local10, objptr
070c0     04 30 06 F1 | 	add	local10, #4
070c4     18 29 62 FC | 	wrlong	local06, local10
070c8     03 00 00 FF 
070cc     00 E4 05 F1 | 	add	objptr, ##1536
070d0     F2 26 02 FB | 	rdlong	local05, objptr
070d4     13 33 02 F6 | 	mov	local11, local05
070d8     01 32 66 F0 | 	shl	local11, #1
070dc     13 33 02 F1 | 	add	local11, local05
070e0     02 32 66 F0 | 	shl	local11, #2
070e4     03 00 00 FF 
070e8     00 E4 85 F1 | 	sub	objptr, ##1536
070ec     F2 32 02 F1 | 	add	local11, objptr
070f0     08 32 06 F1 | 	add	local11, #8
070f4     19 2B 62 FC | 	wrlong	local07, local11
070f8     03 00 00 FF 
070fc     00 E4 05 F1 | 	add	objptr, ##1536
07100     F2 26 02 FB | 	rdlong	local05, objptr
07104     01 26 06 F1 | 	add	local05, #1
07108     F2 26 62 FC | 	wrlong	local05, objptr
0710c     44 22 06 F6 | 	mov	local03, #68
07110     0F 27 02 F6 | 	mov	local05, local01
07114     10 29 02 F6 | 	mov	local06, local02
07118     11 2B 02 F6 | 	mov	local07, local03
0711c     F2 2C 02 FB | 	rdlong	local08, objptr
07120     16 2F 02 F6 | 	mov	local09, local08
07124     01 2E 66 F0 | 	shl	local09, #1
07128     16 2F 02 F1 | 	add	local09, local08
0712c     02 2E 66 F0 | 	shl	local09, #2
07130     03 00 00 FF 
07134     00 E4 85 F1 | 	sub	objptr, ##1536
07138     F2 2E 02 F1 | 	add	local09, objptr
0713c     17 27 62 FC | 	wrlong	local05, local09
07140     03 00 00 FF 
07144     00 E4 05 F1 | 	add	objptr, ##1536
07148     F2 32 02 FB | 	rdlong	local11, objptr
0714c     19 31 02 F6 | 	mov	local10, local11
07150     01 30 66 F0 | 	shl	local10, #1
07154     19 31 02 F1 | 	add	local10, local11
07158     02 30 66 F0 | 	shl	local10, #2
0715c     03 00 00 FF 
07160     00 E4 85 F1 | 	sub	objptr, ##1536
07164     F2 30 02 F1 | 	add	local10, objptr
07168     04 30 06 F1 | 	add	local10, #4
0716c     18 29 62 FC | 	wrlong	local06, local10
07170     03 00 00 FF 
07174     00 E4 05 F1 | 	add	objptr, ##1536
07178     F2 30 02 FB | 	rdlong	local10, objptr
0717c     18 33 02 F6 | 	mov	local11, local10
07180     01 32 66 F0 | 	shl	local11, #1
07184     18 33 02 F1 | 	add	local11, local10
07188     02 32 66 F0 | 	shl	local11, #2
0718c     03 00 00 FF 
07190     00 E4 85 F1 | 	sub	objptr, ##1536
07194     F2 32 02 F1 | 	add	local11, objptr
07198     08 32 06 F1 | 	add	local11, #8
0719c     19 2B 62 FC | 	wrlong	local07, local11
071a0     03 00 00 FF 
071a4     00 E4 05 F1 | 	add	objptr, ##1536
071a8     F2 26 02 FB | 	rdlong	local05, objptr
071ac     01 26 06 F1 | 	add	local05, #1
071b0     F2 26 62 FC | 	wrlong	local05, objptr
071b4     6A 00 00 FF 
071b8     60 E4 85 F1 | 	sub	objptr, ##54368
071bc                 | LR__0642
071bc                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
071bc     57 00 00 FF 
071c0     28 E4 05 F1 | 	add	objptr, ##44584
071c4     F2 24 02 FB | 	rdlong	local04, objptr
071c8     03 24 66 F0 | 	shl	local04, #3
071cc     02 00 00 FF 
071d0     38 E4 85 F1 | 	sub	objptr, ##1080
071d4     F2 24 02 F1 | 	add	local04, objptr
071d8     04 24 06 F1 | 	add	local04, #4
071dc     12 2D 02 FB | 	rdlong	local08, local04
071e0     12 2C 0E F2 | 	cmp	local08, #18 wz
071e4     54 00 00 FF 
071e8     F0 E5 85 F1 | 	sub	objptr, ##43504
071ec     60 01 90 5D |  if_ne	jmp	#LR__0643
071f0     22 22 06 F6 | 	mov	local03, #34
071f4     0F 27 02 F6 | 	mov	local05, local01
071f8     10 29 02 F6 | 	mov	local06, local02
071fc     11 2B 02 F6 | 	mov	local07, local03
07200     6A 00 00 FF 
07204     60 E4 05 F1 | 	add	objptr, ##54368
07208     F2 2C 02 FB | 	rdlong	local08, objptr
0720c     16 2F 02 F6 | 	mov	local09, local08
07210     01 2E 66 F0 | 	shl	local09, #1
07214     16 2F 02 F1 | 	add	local09, local08
07218     02 2E 66 F0 | 	shl	local09, #2
0721c     03 00 00 FF 
07220     00 E4 85 F1 | 	sub	objptr, ##1536
07224     F2 2E 02 F1 | 	add	local09, objptr
07228     17 27 62 FC | 	wrlong	local05, local09
0722c     03 00 00 FF 
07230     00 E4 05 F1 | 	add	objptr, ##1536
07234     F2 32 02 FB | 	rdlong	local11, objptr
07238     19 31 02 F6 | 	mov	local10, local11
0723c     01 30 66 F0 | 	shl	local10, #1
07240     19 31 02 F1 | 	add	local10, local11
07244     02 30 66 F0 | 	shl	local10, #2
07248     03 00 00 FF 
0724c     00 E4 85 F1 | 	sub	objptr, ##1536
07250     F2 30 02 F1 | 	add	local10, objptr
07254     04 30 06 F1 | 	add	local10, #4
07258     18 29 62 FC | 	wrlong	local06, local10
0725c     03 00 00 FF 
07260     00 E4 05 F1 | 	add	objptr, ##1536
07264     F2 26 02 FB | 	rdlong	local05, objptr
07268     13 33 02 F6 | 	mov	local11, local05
0726c     01 32 66 F0 | 	shl	local11, #1
07270     13 33 02 F1 | 	add	local11, local05
07274     02 32 66 F0 | 	shl	local11, #2
07278     03 00 00 FF 
0727c     00 E4 85 F1 | 	sub	objptr, ##1536
07280     F2 32 02 F1 | 	add	local11, objptr
07284     08 32 06 F1 | 	add	local11, #8
07288     19 2B 62 FC | 	wrlong	local07, local11
0728c     03 00 00 FF 
07290     00 E4 05 F1 | 	add	objptr, ##1536
07294     F2 26 02 FB | 	rdlong	local05, objptr
07298     01 26 06 F1 | 	add	local05, #1
0729c     F2 26 62 FC | 	wrlong	local05, objptr
072a0     44 22 06 F6 | 	mov	local03, #68
072a4     0F 27 02 F6 | 	mov	local05, local01
072a8     10 29 02 F6 | 	mov	local06, local02
072ac     11 2B 02 F6 | 	mov	local07, local03
072b0     F2 2C 02 FB | 	rdlong	local08, objptr
072b4     16 2F 02 F6 | 	mov	local09, local08
072b8     01 2E 66 F0 | 	shl	local09, #1
072bc     16 2F 02 F1 | 	add	local09, local08
072c0     02 2E 66 F0 | 	shl	local09, #2
072c4     03 00 00 FF 
072c8     00 E4 85 F1 | 	sub	objptr, ##1536
072cc     F2 2E 02 F1 | 	add	local09, objptr
072d0     17 27 62 FC | 	wrlong	local05, local09
072d4     03 00 00 FF 
072d8     00 E4 05 F1 | 	add	objptr, ##1536
072dc     F2 32 02 FB | 	rdlong	local11, objptr
072e0     19 31 02 F6 | 	mov	local10, local11
072e4     01 30 66 F0 | 	shl	local10, #1
072e8     19 31 02 F1 | 	add	local10, local11
072ec     02 30 66 F0 | 	shl	local10, #2
072f0     03 00 00 FF 
072f4     00 E4 85 F1 | 	sub	objptr, ##1536
072f8     F2 30 02 F1 | 	add	local10, objptr
072fc     04 30 06 F1 | 	add	local10, #4
07300     18 29 62 FC | 	wrlong	local06, local10
07304     03 00 00 FF 
07308     00 E4 05 F1 | 	add	objptr, ##1536
0730c     F2 30 02 FB | 	rdlong	local10, objptr
07310     18 33 02 F6 | 	mov	local11, local10
07314     01 32 66 F0 | 	shl	local11, #1
07318     18 33 02 F1 | 	add	local11, local10
0731c     02 32 66 F0 | 	shl	local11, #2
07320     03 00 00 FF 
07324     00 E4 85 F1 | 	sub	objptr, ##1536
07328     F2 32 02 F1 | 	add	local11, objptr
0732c     08 32 06 F1 | 	add	local11, #8
07330     19 2B 62 FC | 	wrlong	local07, local11
07334     03 00 00 FF 
07338     00 E4 05 F1 | 	add	objptr, ##1536
0733c     F2 26 02 FB | 	rdlong	local05, objptr
07340     01 26 06 F1 | 	add	local05, #1
07344     F2 26 62 FC | 	wrlong	local05, objptr
07348     6A 00 00 FF 
0734c     60 E4 85 F1 | 	sub	objptr, ##54368
07350                 | LR__0643
07350                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07350     57 00 00 FF 
07354     28 E4 05 F1 | 	add	objptr, ##44584
07358     F2 24 02 FB | 	rdlong	local04, objptr
0735c     03 24 66 F0 | 	shl	local04, #3
07360     02 00 00 FF 
07364     38 E4 85 F1 | 	sub	objptr, ##1080
07368     F2 24 02 F1 | 	add	local04, objptr
0736c     04 24 06 F1 | 	add	local04, #4
07370     12 2D 02 FB | 	rdlong	local08, local04
07374     FE 2D 0E F2 | 	cmp	local08, #510 wz
07378     54 00 00 FF 
0737c     F0 E5 85 F1 | 	sub	objptr, ##43504
07380     B8 00 90 5D |  if_ne	jmp	#LR__0644
07384     44 22 06 F6 | 	mov	local03, #68
07388     0F 27 02 F6 | 	mov	local05, local01
0738c     10 29 02 F6 | 	mov	local06, local02
07390     11 2B 02 F6 | 	mov	local07, local03
07394     6A 00 00 FF 
07398     60 E4 05 F1 | 	add	objptr, ##54368
0739c     F2 2C 02 FB | 	rdlong	local08, objptr
073a0     16 2F 02 F6 | 	mov	local09, local08
073a4     01 2E 66 F0 | 	shl	local09, #1
073a8     16 2F 02 F1 | 	add	local09, local08
073ac     02 2E 66 F0 | 	shl	local09, #2
073b0     03 00 00 FF 
073b4     00 E4 85 F1 | 	sub	objptr, ##1536
073b8     F2 2E 02 F1 | 	add	local09, objptr
073bc     17 27 62 FC | 	wrlong	local05, local09
073c0     03 00 00 FF 
073c4     00 E4 05 F1 | 	add	objptr, ##1536
073c8     F2 32 02 FB | 	rdlong	local11, objptr
073cc     19 31 02 F6 | 	mov	local10, local11
073d0     01 30 66 F0 | 	shl	local10, #1
073d4     19 31 02 F1 | 	add	local10, local11
073d8     02 30 66 F0 | 	shl	local10, #2
073dc     03 00 00 FF 
073e0     00 E4 85 F1 | 	sub	objptr, ##1536
073e4     F2 30 02 F1 | 	add	local10, objptr
073e8     04 30 06 F1 | 	add	local10, #4
073ec     18 29 62 FC | 	wrlong	local06, local10
073f0     03 00 00 FF 
073f4     00 E4 05 F1 | 	add	objptr, ##1536
073f8     F2 30 02 FB | 	rdlong	local10, objptr
073fc     18 33 02 F6 | 	mov	local11, local10
07400     01 32 66 F0 | 	shl	local11, #1
07404     18 33 02 F1 | 	add	local11, local10
07408     02 32 66 F0 | 	shl	local11, #2
0740c     03 00 00 FF 
07410     00 E4 85 F1 | 	sub	objptr, ##1536
07414     F2 32 02 F1 | 	add	local11, objptr
07418     08 32 06 F1 | 	add	local11, #8
0741c     19 2B 62 FC | 	wrlong	local07, local11
07420     03 00 00 FF 
07424     00 E4 05 F1 | 	add	objptr, ##1536
07428     F2 26 02 FB | 	rdlong	local05, objptr
0742c     01 26 06 F1 | 	add	local05, #1
07430     F2 26 62 FC | 	wrlong	local05, objptr
07434     6A 00 00 FF 
07438     60 E4 85 F1 | 	sub	objptr, ##54368
0743c                 | LR__0644
0743c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
0743c     57 00 00 FF 
07440     28 E4 05 F1 | 	add	objptr, ##44584
07444     F2 24 02 FB | 	rdlong	local04, objptr
07448     03 24 66 F0 | 	shl	local04, #3
0744c     02 00 00 FF 
07450     38 E4 85 F1 | 	sub	objptr, ##1080
07454     F2 24 02 F1 | 	add	local04, objptr
07458     04 24 06 F1 | 	add	local04, #4
0745c     12 2D 02 FB | 	rdlong	local08, local04
07460     11 2C 0E F2 | 	cmp	local08, #17 wz
07464     54 00 00 FF 
07468     F0 E5 85 F1 | 	sub	objptr, ##43504
0746c     6C 00 90 AD |  if_e	jmp	#LR__0645
07470     57 00 00 FF 
07474     28 E4 05 F1 | 	add	objptr, ##44584
07478     F2 2C 02 FB | 	rdlong	local08, objptr
0747c     03 2C 66 F0 | 	shl	local08, #3
07480     02 00 00 FF 
07484     38 E4 85 F1 | 	sub	objptr, ##1080
07488     F2 2C 02 F1 | 	add	local08, objptr
0748c     04 2C 06 F1 | 	add	local08, #4
07490     16 2D 02 FB | 	rdlong	local08, local08
07494     12 2C 0E F2 | 	cmp	local08, #18 wz
07498     54 00 00 FF 
0749c     F0 E5 85 F1 | 	sub	objptr, ##43504
074a0     38 00 90 AD |  if_e	jmp	#LR__0645
074a4     57 00 00 FF 
074a8     28 E4 05 F1 | 	add	objptr, ##44584
074ac     F2 32 02 FB | 	rdlong	local11, objptr
074b0     03 32 66 F0 | 	shl	local11, #3
074b4     02 00 00 FF 
074b8     38 E4 85 F1 | 	sub	objptr, ##1080
074bc     F2 32 02 F1 | 	add	local11, objptr
074c0     04 32 06 F1 | 	add	local11, #4
074c4     19 33 02 FB | 	rdlong	local11, local11
074c8     FE 33 0E F2 | 	cmp	local11, #510 wz
074cc     54 00 00 FF 
074d0     F0 E5 85 F1 | 	sub	objptr, ##43504
074d4     16 FA 05 56 |  if_ne	mov	result1, #22
074d8     68 00 90 5D |  if_ne	jmp	#LR__0647
074dc                 | LR__0645
074dc     57 00 00 FF 
074e0     28 E4 05 F1 | 	add	objptr, ##44584
074e4     F2 24 02 FB | 	rdlong	local04, objptr
074e8     01 24 06 F1 | 	add	local04, #1
074ec     F2 24 62 FC | 	wrlong	local04, objptr
074f0     03 24 66 F0 | 	shl	local04, #3
074f4     02 00 00 FF 
074f8     38 E4 85 F1 | 	sub	objptr, ##1080
074fc     F2 24 02 F1 | 	add	local04, objptr
07500     04 24 06 F1 | 	add	local04, #4
07504     12 2D 02 FB | 	rdlong	local08, local04
07508     FE 2D 0E F2 | 	cmp	local08, #510 wz
0750c     54 00 00 FF 
07510     F0 E5 85 F1 | 	sub	objptr, ##43504
07514     28 00 90 AD |  if_e	jmp	#LR__0646
07518     57 00 00 FF 
0751c     28 E4 05 F1 | 	add	objptr, ##44584
07520     F2 32 02 FB | 	rdlong	local11, objptr
07524     0E 00 00 FF 
07528     1C E4 05 F1 | 	add	objptr, ##7196
0752c     F2 30 02 FB | 	rdlong	local10, objptr
07530     65 00 00 FF 
07534     44 E4 85 F1 | 	sub	objptr, ##51780
07538     18 33 52 F2 | 	cmps	local11, local10 wc
0753c     E4 FA 9F CD |  if_b	jmp	#LR__0641
07540                 | LR__0646
07540                 | ' return 0
07540     00 FA 05 F6 | 	mov	result1, #0
07544                 | LR__0647
07544     A7 F0 03 F6 | 	mov	ptra, fp
07548     B2 00 A0 FD | 	call	#popregs_
0754c                 | _compile_print_ret
0754c     2D 00 64 FD | 	ret
07550                 | 
07550                 | ' 
07550                 | ' function compile_if() as ulong  
07550                 | _compile_if
07550     05 4A 05 F6 | 	mov	COUNT_, #5
07554     A8 00 A0 FD | 	call	#pushregs_
07558                 | _compile_if_enter
07558     A4 16 B0 FD | 	call	#_expr
0755c                 | ' expr()
0755c                 | ' return 0
0755c     57 00 00 FF 
07560     28 E4 05 F1 | 	add	objptr, ##44584
07564     F2 FA 01 FB | 	rdlong	result1, objptr
07568     01 FA 05 F1 | 	add	result1, #1
0756c     F2 FA 61 FC | 	wrlong	result1, objptr
07570     58 22 06 F6 | 	mov	local03, #88
07574     0F 25 02 F6 | 	mov	local04, local01
07578     10 27 02 F6 | 	mov	local05, local02
0757c     11 1F 02 F6 | 	mov	local01, local03
07580     13 00 00 FF 
07584     38 E4 05 F1 | 	add	objptr, ##9784
07588     F2 12 02 FB | 	rdlong	arg01, objptr
0758c     09 FB 01 F6 | 	mov	result1, arg01
07590     01 FA 65 F0 | 	shl	result1, #1
07594     09 FB 01 F1 | 	add	result1, arg01
07598     02 FA 65 F0 | 	shl	result1, #2
0759c     03 00 00 FF 
075a0     00 E4 85 F1 | 	sub	objptr, ##1536
075a4     F2 FA 01 F1 | 	add	result1, objptr
075a8     FD 24 62 FC | 	wrlong	local04, result1
075ac     03 00 00 FF 
075b0     00 E4 05 F1 | 	add	objptr, ##1536
075b4     F2 12 02 FB | 	rdlong	arg01, objptr
075b8     09 25 02 F6 | 	mov	local04, arg01
075bc     01 24 66 F0 | 	shl	local04, #1
075c0     09 25 02 F1 | 	add	local04, arg01
075c4     02 24 66 F0 | 	shl	local04, #2
075c8     03 00 00 FF 
075cc     00 E4 85 F1 | 	sub	objptr, ##1536
075d0     F2 24 02 F1 | 	add	local04, objptr
075d4     04 24 06 F1 | 	add	local04, #4
075d8     12 27 62 FC | 	wrlong	local05, local04
075dc     03 00 00 FF 
075e0     00 E4 05 F1 | 	add	objptr, ##1536
075e4     F2 24 02 FB | 	rdlong	local04, objptr
075e8     12 27 02 F6 | 	mov	local05, local04
075ec     01 26 66 F0 | 	shl	local05, #1
075f0     12 27 02 F1 | 	add	local05, local04
075f4     02 26 66 F0 | 	shl	local05, #2
075f8     03 00 00 FF 
075fc     00 E4 85 F1 | 	sub	objptr, ##1536
07600     F2 26 02 F1 | 	add	local05, objptr
07604     08 26 06 F1 | 	add	local05, #8
07608     13 1F 62 FC | 	wrlong	local01, local05
0760c     03 00 00 FF 
07610     00 E4 05 F1 | 	add	objptr, ##1536
07614     F2 24 02 FB | 	rdlong	local04, objptr
07618     01 24 06 F1 | 	add	local04, #1
0761c     F2 24 62 FC | 	wrlong	local04, objptr
07620                 | ' 
07620                 | ' 'print "In compile_if"
07620                 | ' compile_fun_1p()
07620                 | ' cmd=lparts(ct).token : ct+=1
07620                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07620                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07620                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07620     13 00 00 FF 
07624     38 E4 85 F1 | 	sub	objptr, ##9784
07628     F2 26 02 FB | 	rdlong	local05, objptr
0762c     01 26 06 F1 | 	add	local05, #1
07630     03 26 66 F0 | 	shl	local05, #3
07634     02 00 00 FF 
07638     38 E4 85 F1 | 	sub	objptr, ##1080
0763c     F2 26 02 F1 | 	add	local05, objptr
07640     13 13 02 FB | 	rdlong	arg01, local05
07644     54 00 00 FF 
07648     F0 E5 85 F1 | 	sub	objptr, ##43504
0764c                 | ' 
0764c                 | ' select case s
0764c     5A 01 00 FF 
07650     EC 15 06 F6 | 	mov	arg02, ##@LR__4671
07654     10 48 B1 FD | 	call	#__system___string_cmp
07658     00 FA 0D F2 | 	cmp	result1, #0 wz
0765c     1B FA 05 A6 |  if_e	mov	result1, #27
07660     00 FA 05 56 |  if_ne	mov	result1, #0
07664     00 FA 0D F2 | 	cmp	result1, #0 wz
07668     0C 00 90 AD |  if_e	jmp	#LR__0650
0766c     05 12 06 F6 | 	mov	arg01, #5
07670     88 ED BF FD | 	call	#_compile_immediate_assign
07674     08 00 90 FD | 	jmp	#LR__0651
07678                 | LR__0650
07678     05 12 06 F6 | 	mov	arg01, #5
0767c     B4 E3 BF FD | 	call	#_compile_immediate
07680                 | LR__0651
07680                 | ' 
07680                 | ' 
07680                 | ' return 0
07680     00 FA 05 F6 | 	mov	result1, #0
07684     A7 F0 03 F6 | 	mov	ptra, fp
07688     B2 00 A0 FD | 	call	#popregs_
0768c                 | _compile_if_ret
0768c     2D 00 64 FD | 	ret
07690                 | 
07690                 | ' 
07690                 | ' function compile_else() as ulong  
07690                 | _compile_else
07690     05 4A 05 F6 | 	mov	COUNT_, #5
07694     A8 00 A0 FD | 	call	#pushregs_
07698                 | _compile_else_enter
07698     5A 22 06 F6 | 	mov	local03, #90
0769c     0F 25 02 F6 | 	mov	local04, local01
076a0     10 27 02 F6 | 	mov	local05, local02
076a4     11 1F 02 F6 | 	mov	local01, local03
076a8     6A 00 00 FF 
076ac     60 E4 05 F1 | 	add	objptr, ##54368
076b0     F2 12 02 FB | 	rdlong	arg01, objptr
076b4     09 FB 01 F6 | 	mov	result1, arg01
076b8     01 FA 65 F0 | 	shl	result1, #1
076bc     09 FB 01 F1 | 	add	result1, arg01
076c0     02 FA 65 F0 | 	shl	result1, #2
076c4     03 00 00 FF 
076c8     00 E4 85 F1 | 	sub	objptr, ##1536
076cc     F2 FA 01 F1 | 	add	result1, objptr
076d0     FD 24 62 FC | 	wrlong	local04, result1
076d4     03 00 00 FF 
076d8     00 E4 05 F1 | 	add	objptr, ##1536
076dc     F2 FA 01 FB | 	rdlong	result1, objptr
076e0     FD 24 02 F6 | 	mov	local04, result1
076e4     01 24 66 F0 | 	shl	local04, #1
076e8     FD 24 02 F1 | 	add	local04, result1
076ec     02 24 66 F0 | 	shl	local04, #2
076f0     03 00 00 FF 
076f4     00 E4 85 F1 | 	sub	objptr, ##1536
076f8     F2 24 02 F1 | 	add	local04, objptr
076fc     04 24 06 F1 | 	add	local04, #4
07700     12 27 62 FC | 	wrlong	local05, local04
07704     03 00 00 FF 
07708     00 E4 05 F1 | 	add	objptr, ##1536
0770c     F2 24 02 FB | 	rdlong	local04, objptr
07710     12 27 02 F6 | 	mov	local05, local04
07714     01 26 66 F0 | 	shl	local05, #1
07718     12 27 02 F1 | 	add	local05, local04
0771c     02 26 66 F0 | 	shl	local05, #2
07720     03 00 00 FF 
07724     00 E4 85 F1 | 	sub	objptr, ##1536
07728     F2 26 02 F1 | 	add	local05, objptr
0772c     08 26 06 F1 | 	add	local05, #8
07730     13 1F 62 FC | 	wrlong	local01, local05
07734     03 00 00 FF 
07738     00 E4 05 F1 | 	add	objptr, ##1536
0773c     F2 24 02 FB | 	rdlong	local04, objptr
07740     01 24 06 F1 | 	add	local04, #1
07744     F2 24 62 FC | 	wrlong	local04, objptr
07748                 | ' 
07748                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
07748                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07748     13 00 00 FF 
0774c     38 E4 85 F1 | 	sub	objptr, ##9784
07750     F2 26 02 FB | 	rdlong	local05, objptr
07754     01 26 06 F1 | 	add	local05, #1
07758     03 26 66 F0 | 	shl	local05, #3
0775c     02 00 00 FF 
07760     38 E4 85 F1 | 	sub	objptr, ##1080
07764     F2 26 02 F1 | 	add	local05, objptr
07768     13 13 02 FB | 	rdlong	arg01, local05
0776c     54 00 00 FF 
07770     F0 E5 85 F1 | 	sub	objptr, ##43504
07774                 | ' 
07774                 | ' select case s
07774     5A 01 00 FF 
07778     EC 15 06 F6 | 	mov	arg02, ##@LR__4671
0777c     E8 46 B1 FD | 	call	#__system___string_cmp
07780     00 FA 0D F2 | 	cmp	result1, #0 wz
07784     1B FA 05 A6 |  if_e	mov	result1, #27
07788     00 FA 05 56 |  if_ne	mov	result1, #0
0778c     00 FA 0D F2 | 	cmp	result1, #0 wz
07790     0C 00 90 AD |  if_e	jmp	#LR__0660
07794     05 12 06 F6 | 	mov	arg01, #5
07798     60 EC BF FD | 	call	#_compile_immediate_assign
0779c     08 00 90 FD | 	jmp	#LR__0661
077a0                 | LR__0660
077a0     05 12 06 F6 | 	mov	arg01, #5
077a4     8C E2 BF FD | 	call	#_compile_immediate
077a8                 | LR__0661
077a8                 | ' 
077a8                 | ' 
077a8                 | ' return 0
077a8     00 FA 05 F6 | 	mov	result1, #0
077ac     A7 F0 03 F6 | 	mov	ptra, fp
077b0     B2 00 A0 FD | 	call	#popregs_
077b4                 | _compile_else_ret
077b4     2D 00 64 FD | 	ret
077b8                 | 
077b8                 | ' 
077b8                 | ' 
077b8                 | ' function compile_dim() as ulong  
077b8                 | _compile_dim
077b8     11 4A 05 F6 | 	mov	COUNT_, #17
077bc     A8 00 A0 FD | 	call	#pushregs_
077c0     01 1E 06 F6 | 	mov	local01, #1
077c4     01 20 06 F6 | 	mov	local02, #1
077c8     01 22 06 F6 | 	mov	local03, #1
077cc                 | ' 
077cc                 | ' dims(0)=1: dims(1)=1: dims(2)=1
077cc                 | ' 
077cc                 | ' if isname(lparts(ct).part$) then 
077cc     57 00 00 FF 
077d0     28 E4 05 F1 | 	add	objptr, ##44584
077d4     F2 18 02 FB | 	rdlong	arg04, objptr
077d8     03 18 66 F0 | 	shl	arg04, #3
077dc     02 00 00 FF 
077e0     38 E4 85 F1 | 	sub	objptr, ##1080
077e4     F2 18 02 F1 | 	add	arg04, objptr
077e8     0C 13 02 FB | 	rdlong	arg01, arg04
077ec     54 00 00 FF 
077f0     F0 E5 85 F1 | 	sub	objptr, ##43504
077f4     F0 D2 BF FD | 	call	#_isname
077f8     00 FA 0D F2 | 	cmp	result1, #0 wz
077fc     AC 05 90 AD |  if_e	jmp	#LR__0694
07800     57 00 00 FF 
07804     28 E4 05 F1 | 	add	objptr, ##44584
07808     F2 24 02 FB | 	rdlong	local04, objptr
0780c     03 24 66 F0 | 	shl	local04, #3
07810     02 00 00 FF 
07814     38 E4 85 F1 | 	sub	objptr, ##1080
07818     F2 24 02 F1 | 	add	local04, objptr
0781c     12 27 02 FB | 	rdlong	local05, local04
07820     01 28 66 F6 | 	neg	local06, #1
07824                 | '   varname2$=lparts(ct).part$ 
07824                 | '   j=-1
07824                 | '   if varnum>0 then
07824     04 E4 85 F1 | 	sub	objptr, #4
07828     F2 2A 02 FB | 	rdlong	local07, objptr
0782c     54 00 00 FF 
07830     EC E5 85 F1 | 	sub	objptr, ##43500
07834     01 2A 56 F2 | 	cmps	local07, #1 wc
07838     58 00 90 CD |  if_b	jmp	#LR__0672
0783c                 | '  '   print "in dim, varnum=";varnum
0783c                 | '     for i=0 to varnum-1
0783c     00 2C 06 F6 | 	mov	local08, #0
07840     54 00 00 FF 
07844     EC E5 05 F1 | 	add	objptr, ##43500
07848     F2 2E 02 FB | 	rdlong	local09, objptr
0784c     54 00 00 FF 
07850     EC E5 85 F1 | 	sub	objptr, ##43500
07854                 | LR__0670
07854     17 2D 52 F2 | 	cmps	local08, local09 wc
07858     38 00 90 3D |  if_ae	jmp	#LR__0671
0785c                 | '       if variables(i).name=varname2$ then j=i : exit
0785c     16 25 02 F6 | 	mov	local04, local08
07860     04 24 66 F0 | 	shl	local04, #4
07864     34 00 00 FF 
07868     EC E5 05 F1 | 	add	objptr, ##27116
0786c     F2 24 02 F1 | 	add	local04, objptr
07870     12 13 02 FB | 	rdlong	arg01, local04
07874     13 15 02 F6 | 	mov	arg02, local05
07878     34 00 00 FF 
0787c     EC E5 85 F1 | 	sub	objptr, ##27116
07880     E4 45 B1 FD | 	call	#__system___string_cmp
07884     00 FA 0D F2 | 	cmp	result1, #0 wz
07888     16 29 02 A6 |  if_e	mov	local06, local08
0788c     01 2C 06 51 |  if_ne	add	local08, #1
07890     C0 FF 9F 5D |  if_ne	jmp	#LR__0670
07894                 | LR__0671
07894                 | LR__0672
07894                 | ' '  if j<>-1 then printerror (42) : return 42
07894                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07894     FF FF 7F FF 
07898     FF 29 0E F2 | 	cmp	local06, ##-1 wz
0789c     54 00 00 AF 
078a0     EC E5 05 A1 |  if_e	add	objptr, ##43500
078a4     F2 28 02 AB |  if_e	rdlong	local06, objptr
078a8     54 00 00 AF 
078ac     EC E5 85 A1 |  if_e	sub	objptr, ##43500
078b0     78 00 90 AD |  if_e	jmp	#LR__0673
078b4     00 12 06 F6 | 	mov	arg01, #0
078b8     14 9F B1 FD | 	call	#__system___getiolock_0472
078bc     FD 12 02 F6 | 	mov	arg01, result1
078c0     7C 45 B1 FD | 	call	#__system___lockmem
078c4     5C 01 00 FF 
078c8     EF 14 06 F6 | 	mov	arg02, ##@LR__4841
078cc     00 12 06 F6 | 	mov	arg01, #0
078d0     00 16 06 F6 | 	mov	arg03, #0
078d4     6C 52 B1 FD | 	call	#__system___basic_print_string
078d8     7B 00 00 FF 
078dc     74 E4 05 F1 | 	add	objptr, ##63092
078e0     F2 14 02 FB | 	rdlong	arg02, objptr
078e4     7B 00 00 FF 
078e8     74 E4 85 F1 | 	sub	objptr, ##63092
078ec     00 12 06 F6 | 	mov	arg01, #0
078f0     00 16 06 F6 | 	mov	arg03, #0
078f4     0A 18 06 F6 | 	mov	arg04, #10
078f8     CC 52 B1 FD | 	call	#__system___basic_print_unsigned
078fc     5C 01 00 FF 
07900     FD 14 06 F6 | 	mov	arg02, ##@LR__4842
07904     00 12 06 F6 | 	mov	arg01, #0
07908     00 16 06 F6 | 	mov	arg03, #0
0790c     34 52 B1 FD | 	call	#__system___basic_print_string
07910     00 12 06 F6 | 	mov	arg01, #0
07914     0A 14 06 F6 | 	mov	arg02, #10
07918     00 16 06 F6 | 	mov	arg03, #0
0791c     CC 51 B1 FD | 	call	#__system___basic_print_char
07920     00 12 06 F6 | 	mov	arg01, #0
07924     A8 9E B1 FD | 	call	#__system___getiolock_0472
07928     FD 00 68 FC | 	wrlong	#0, result1
0792c                 | LR__0673
0792c                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
0792c     57 00 00 FF 
07930     28 E4 05 F1 | 	add	objptr, ##44584
07934     F2 18 02 FB | 	rdlong	arg04, objptr
07938     01 18 06 F1 | 	add	arg04, #1
0793c     03 18 66 F0 | 	shl	arg04, #3
07940     02 00 00 FF 
07944     38 E4 85 F1 | 	sub	objptr, ##1080
07948     F2 18 02 F1 | 	add	arg04, objptr
0794c     0C 13 02 FB | 	rdlong	arg01, arg04
07950     5C 01 00 FF 
07954     1E 15 06 F6 | 	mov	arg02, ##@LR__4843
07958     54 00 00 FF 
0795c     F0 E5 85 F1 | 	sub	objptr, ##43504
07960     04 45 B1 FD | 	call	#__system___string_cmp
07964     00 FA 0D F2 | 	cmp	result1, #0 wz
07968     50 00 90 AD |  if_e	jmp	#LR__0674
0796c     57 00 00 FF 
07970     28 E4 05 F1 | 	add	objptr, ##44584
07974     F2 2E 02 FB | 	rdlong	local09, objptr
07978     01 2E 06 F1 | 	add	local09, #1
0797c     03 2E 66 F0 | 	shl	local09, #3
07980     02 00 00 FF 
07984     38 E4 85 F1 | 	sub	objptr, ##1080
07988     F2 2E 02 F1 | 	add	local09, objptr
0798c     17 13 02 FB | 	rdlong	arg01, local09
07990     5C 01 00 FF 
07994     20 15 06 F6 | 	mov	arg02, ##@LR__4844
07998     54 00 00 FF 
0799c     F0 E5 85 F1 | 	sub	objptr, ##43504
079a0     C4 44 B1 FD | 	call	#__system___string_cmp
079a4     00 FA 0D F2 | 	cmp	result1, #0 wz
079a8     10 00 90 AD |  if_e	jmp	#LR__0674
079ac     2B 12 06 F6 | 	mov	arg01, #43
079b0     A4 0D B1 FD | 	call	#_printerror
079b4     2B FA 05 F6 | 	mov	result1, #43
079b8     00 05 90 FD | 	jmp	#LR__0696
079bc                 | LR__0674
079bc                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
079bc     57 00 00 FF 
079c0     28 E4 05 F1 | 	add	objptr, ##44584
079c4     F2 14 02 FB | 	rdlong	arg02, objptr
079c8     01 14 06 F1 | 	add	arg02, #1
079cc     03 14 66 F0 | 	shl	arg02, #3
079d0     02 00 00 FF 
079d4     38 E4 85 F1 | 	sub	objptr, ##1080
079d8     F2 14 02 F1 | 	add	arg02, objptr
079dc     0A 13 02 FB | 	rdlong	arg01, arg02
079e0     5C 01 00 FF 
079e4     23 15 06 F6 | 	mov	arg02, ##@LR__4845
079e8     54 00 00 FF 
079ec     F0 E5 85 F1 | 	sub	objptr, ##43504
079f0     74 44 B1 FD | 	call	#__system___string_cmp
079f4     00 FA 0D F2 | 	cmp	result1, #0 wz
079f8     57 00 00 AF 
079fc     28 E4 05 A1 |  if_e	add	objptr, ##44584
07a00     F2 30 02 AB |  if_e	rdlong	local10, objptr
07a04     57 00 00 AF 
07a08     28 E4 85 A1 |  if_e	sub	objptr, ##44584
07a0c     01 30 06 A1 |  if_e	add	local10, #1
07a10     7C 01 90 AD |  if_e	jmp	#LR__0680
07a14     57 00 00 FF 
07a18     28 E4 05 F1 | 	add	objptr, ##44584
07a1c     F2 30 02 FB | 	rdlong	local10, objptr
07a20     57 00 00 FF 
07a24     28 E4 85 F1 | 	sub	objptr, ##44584
07a28     02 30 06 F1 | 	add	local10, #2
07a2c     00 32 06 F6 | 	mov	local11, #0
07a30                 | '   l=ct+2 : m=0 : do
07a30                 | LR__0675
07a30                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07a30                 | '     if isdec(lparts(l).part$) then 
07a30     18 25 02 F6 | 	mov	local04, local10
07a34     03 24 66 F0 | 	shl	local04, #3
07a38     54 00 00 FF 
07a3c     F0 E5 05 F1 | 	add	objptr, ##43504
07a40     F2 24 02 F1 | 	add	local04, objptr
07a44     12 13 02 FB | 	rdlong	arg01, local04
07a48     54 00 00 FF 
07a4c     F0 E5 85 F1 | 	sub	objptr, ##43504
07a50     38 D7 BF FD | 	call	#_isdec
07a54     00 FA 0D F2 | 	cmp	result1, #0 wz
07a58     44 00 90 AD |  if_e	jmp	#LR__0676
07a5c     19 35 02 F6 | 	mov	local12, local11
07a60     0F 35 06 F1 | 	add	local12, #local01
07a64     18 2F 02 F6 | 	mov	local09, local10
07a68     03 2E 66 F0 | 	shl	local09, #3
07a6c     54 00 00 FF 
07a70     F0 E5 05 F1 | 	add	objptr, ##43504
07a74     F2 2E 02 F1 | 	add	local09, objptr
07a78     17 13 02 FB | 	rdlong	arg01, local09
07a7c     00 14 06 F6 | 	mov	arg02, #0
07a80     54 00 00 FF 
07a84     F0 E5 85 F1 | 	sub	objptr, ##43504
07a88     A8 75 B1 FD | 	call	#__system____builtin_atoi
07a8c     FD 36 02 F6 | 	mov	local13, result1
07a90                 | 	'.live	local13
07a90                 | 	'.live	local12
07a90     00 34 8E F9 | 	altd	local12, #0
07a94     1B 35 02 F6 | 	mov	local12, local13
07a98     01 32 06 F1 | 	add	local11, #1
07a9c     10 00 90 FD | 	jmp	#LR__0677
07aa0                 | LR__0676
07aa0     11 12 06 F6 | 	mov	arg01, #17
07aa4     B0 0C B1 FD | 	call	#_printerror
07aa8                 | '       printerror (17)  : return(17)
07aa8     11 FA 05 F6 | 	mov	result1, #17
07aac     0C 04 90 FD | 	jmp	#LR__0696
07ab0                 | LR__0677
07ab0                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07ab0     18 25 02 F6 | 	mov	local04, local10
07ab4     01 24 06 F1 | 	add	local04, #1
07ab8     03 24 66 F0 | 	shl	local04, #3
07abc     54 00 00 FF 
07ac0     F0 E5 05 F1 | 	add	objptr, ##43504
07ac4     F2 24 02 F1 | 	add	local04, objptr
07ac8     12 13 02 FB | 	rdlong	arg01, local04
07acc     5C 01 00 FF 
07ad0     26 15 06 F6 | 	mov	arg02, ##@LR__4846
07ad4     54 00 00 FF 
07ad8     F0 E5 85 F1 | 	sub	objptr, ##43504
07adc     88 43 B1 FD | 	call	#__system___string_cmp
07ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ae4     48 00 90 AD |  if_e	jmp	#LR__0678
07ae8     18 37 02 F6 | 	mov	local13, local10
07aec     01 36 06 F1 | 	add	local13, #1
07af0     03 36 66 F0 | 	shl	local13, #3
07af4     54 00 00 FF 
07af8     F0 E5 05 F1 | 	add	objptr, ##43504
07afc     F2 36 02 F1 | 	add	local13, objptr
07b00     1B 13 02 FB | 	rdlong	arg01, local13
07b04     5C 01 00 FF 
07b08     28 15 06 F6 | 	mov	arg02, ##@LR__4847
07b0c     54 00 00 FF 
07b10     F0 E5 85 F1 | 	sub	objptr, ##43504
07b14     50 43 B1 FD | 	call	#__system___string_cmp
07b18     00 FA 0D F2 | 	cmp	result1, #0 wz
07b1c     10 00 90 AD |  if_e	jmp	#LR__0678
07b20     2C 12 06 F6 | 	mov	arg01, #44
07b24     30 0C B1 FD | 	call	#_printerror
07b28     2C FA 05 F6 | 	mov	result1, #44
07b2c     8C 03 90 FD | 	jmp	#LR__0696
07b30                 | LR__0678
07b30     02 30 06 F1 | 	add	local10, #2
07b34     18 25 02 F6 | 	mov	local04, local10
07b38     01 24 86 F1 | 	sub	local04, #1
07b3c     03 24 66 F0 | 	shl	local04, #3
07b40     54 00 00 FF 
07b44     F0 E5 05 F1 | 	add	objptr, ##43504
07b48     F2 24 02 F1 | 	add	local04, objptr
07b4c     12 13 02 FB | 	rdlong	arg01, local04
07b50     5C 01 00 FF 
07b54     2A 15 06 F6 | 	mov	arg02, ##@LR__4848
07b58     54 00 00 FF 
07b5c     F0 E5 85 F1 | 	sub	objptr, ##43504
07b60     04 43 B1 FD | 	call	#__system___string_cmp
07b64     00 FA 0D F2 | 	cmp	result1, #0 wz
07b68     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07b6c     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0675
07b70                 | '   if m>3 then printerror(45): return(45)
07b70     04 32 56 F2 | 	cmps	local11, #4 wc
07b74     10 00 90 CD |  if_b	jmp	#LR__0679
07b78     2D 12 06 F6 | 	mov	arg01, #45
07b7c     D8 0B B1 FD | 	call	#_printerror
07b80     2D FA 05 F6 | 	mov	result1, #45
07b84     34 03 90 FD | 	jmp	#LR__0696
07b88                 | LR__0679
07b88     00 39 06 F6 | 	mov	local14, #256
07b8c     0C 3A 06 F6 | 	mov	local15, #12
07b90                 | LR__0680
07b90                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07b90                 | '   arraytype=array_no_type : esize=12
07b90                 | ' 1350 
07b90                 | '   if lparts(l).part$="as" then
07b90     18 25 02 F6 | 	mov	local04, local10
07b94     03 24 66 F0 | 	shl	local04, #3
07b98     54 00 00 FF 
07b9c     F0 E5 05 F1 | 	add	objptr, ##43504
07ba0     F2 24 02 F1 | 	add	local04, objptr
07ba4     12 13 02 FB | 	rdlong	arg01, local04
07ba8     5C 01 00 FF 
07bac     2C 15 06 F6 | 	mov	arg02, ##@LR__4849
07bb0     54 00 00 FF 
07bb4     F0 E5 85 F1 | 	sub	objptr, ##43504
07bb8     AC 42 B1 FD | 	call	#__system___string_cmp
07bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
07bc0     F8 01 90 5D |  if_ne	jmp	#LR__0695
07bc4                 | '     select case lparts(l+1).part$
07bc4     18 35 02 F6 | 	mov	local12, local10
07bc8     01 34 06 F1 | 	add	local12, #1
07bcc     03 34 66 F0 | 	shl	local12, #3
07bd0     54 00 00 FF 
07bd4     F0 E5 05 F1 | 	add	objptr, ##43504
07bd8     F2 34 02 F1 | 	add	local12, objptr
07bdc     1A 3D 02 FB | 	rdlong	local16, local12
07be0     5C 01 00 FF 
07be4     2F 15 06 F6 | 	mov	arg02, ##@LR__4850
07be8     1E 13 02 F6 | 	mov	arg01, local16
07bec     54 00 00 FF 
07bf0     F0 E5 85 F1 | 	sub	objptr, ##43504
07bf4     70 42 B1 FD | 	call	#__system___string_cmp
07bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
07bfc     0C 01 90 AD |  if_e	jmp	#LR__0681
07c00     5C 01 00 FF 
07c04     34 15 06 F6 | 	mov	arg02, ##@LR__4851
07c08     1E 13 02 F6 | 	mov	arg01, local16
07c0c     58 42 B1 FD | 	call	#__system___string_cmp
07c10     00 FA 0D F2 | 	cmp	result1, #0 wz
07c14     00 01 90 AD |  if_e	jmp	#LR__0682
07c18     5C 01 00 FF 
07c1c     3A 15 06 F6 | 	mov	arg02, ##@LR__4852
07c20     1E 13 02 F6 | 	mov	arg01, local16
07c24     40 42 B1 FD | 	call	#__system___string_cmp
07c28     00 FA 0D F2 | 	cmp	result1, #0 wz
07c2c     F4 00 90 AD |  if_e	jmp	#LR__0683
07c30     5C 01 00 FF 
07c34     40 15 06 F6 | 	mov	arg02, ##@LR__4853
07c38     1E 13 02 F6 | 	mov	arg01, local16
07c3c     28 42 B1 FD | 	call	#__system___string_cmp
07c40     00 FA 0D F2 | 	cmp	result1, #0 wz
07c44     E8 00 90 AD |  if_e	jmp	#LR__0684
07c48     5C 01 00 FF 
07c4c     47 15 06 F6 | 	mov	arg02, ##@LR__4854
07c50     1E 13 02 F6 | 	mov	arg01, local16
07c54     10 42 B1 FD | 	call	#__system___string_cmp
07c58     00 FA 0D F2 | 	cmp	result1, #0 wz
07c5c     DC 00 90 AD |  if_e	jmp	#LR__0685
07c60     5C 01 00 FF 
07c64     4C 15 06 F6 | 	mov	arg02, ##@LR__4855
07c68     1E 13 02 F6 | 	mov	arg01, local16
07c6c     F8 41 B1 FD | 	call	#__system___string_cmp
07c70     00 FA 0D F2 | 	cmp	result1, #0 wz
07c74     D0 00 90 AD |  if_e	jmp	#LR__0686
07c78     5C 01 00 FF 
07c7c     54 15 06 F6 | 	mov	arg02, ##@LR__4856
07c80     1E 13 02 F6 | 	mov	arg01, local16
07c84     E0 41 B1 FD | 	call	#__system___string_cmp
07c88     00 FA 0D F2 | 	cmp	result1, #0 wz
07c8c     C4 00 90 AD |  if_e	jmp	#LR__0687
07c90     5C 01 00 FF 
07c94     5A 15 06 F6 | 	mov	arg02, ##@LR__4857
07c98     1E 13 02 F6 | 	mov	arg01, local16
07c9c     C8 41 B1 FD | 	call	#__system___string_cmp
07ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
07ca4     B8 00 90 AD |  if_e	jmp	#LR__0688
07ca8     5C 01 00 FF 
07cac     60 15 06 F6 | 	mov	arg02, ##@LR__4858
07cb0     1E 13 02 F6 | 	mov	arg01, local16
07cb4     B0 41 B1 FD | 	call	#__system___string_cmp
07cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cbc     AC 00 90 AD |  if_e	jmp	#LR__0689
07cc0     5C 01 00 FF 
07cc4     67 15 06 F6 | 	mov	arg02, ##@LR__4859
07cc8     1E 13 02 F6 | 	mov	arg01, local16
07ccc     98 41 B1 FD | 	call	#__system___string_cmp
07cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd4     A0 00 90 AD |  if_e	jmp	#LR__0690
07cd8     5C 01 00 FF 
07cdc     6E 15 06 F6 | 	mov	arg02, ##@LR__4860
07ce0     1E 13 02 F6 | 	mov	arg01, local16
07ce4     80 41 B1 FD | 	call	#__system___string_cmp
07ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cec     94 00 90 AD |  if_e	jmp	#LR__0691
07cf0     5C 01 00 FF 
07cf4     75 15 06 F6 | 	mov	arg02, ##@LR__4861
07cf8     1E 13 02 F6 | 	mov	arg01, local16
07cfc     68 41 B1 FD | 	call	#__system___string_cmp
07d00     00 FA 0D F2 | 	cmp	result1, #0 wz
07d04     88 00 90 AD |  if_e	jmp	#LR__0692
07d08     90 00 90 FD | 	jmp	#LR__0693
07d0c                 | LR__0681
07d0c     01 39 06 F6 | 	mov	local14, #257
07d10     01 3A 06 F6 | 	mov	local15, #1
07d14     A4 00 90 FD | 	jmp	#LR__0695
07d18                 | LR__0682
07d18     02 39 06 F6 | 	mov	local14, #258
07d1c     01 3A 06 F6 | 	mov	local15, #1
07d20     98 00 90 FD | 	jmp	#LR__0695
07d24                 | LR__0683
07d24     03 39 06 F6 | 	mov	local14, #259
07d28     02 3A 06 F6 | 	mov	local15, #2
07d2c     8C 00 90 FD | 	jmp	#LR__0695
07d30                 | LR__0684
07d30     04 39 06 F6 | 	mov	local14, #260
07d34     02 3A 06 F6 | 	mov	local15, #2
07d38     80 00 90 FD | 	jmp	#LR__0695
07d3c                 | LR__0685
07d3c     05 39 06 F6 | 	mov	local14, #261
07d40     04 3A 06 F6 | 	mov	local15, #4
07d44     74 00 90 FD | 	jmp	#LR__0695
07d48                 | LR__0686
07d48     05 39 06 F6 | 	mov	local14, #261
07d4c     04 3A 06 F6 | 	mov	local15, #4
07d50     68 00 90 FD | 	jmp	#LR__0695
07d54                 | LR__0687
07d54     06 39 06 F6 | 	mov	local14, #262
07d58     04 3A 06 F6 | 	mov	local15, #4
07d5c     5C 00 90 FD | 	jmp	#LR__0695
07d60                 | LR__0688
07d60     07 39 06 F6 | 	mov	local14, #263
07d64     08 3A 06 F6 | 	mov	local15, #8
07d68     50 00 90 FD | 	jmp	#LR__0695
07d6c                 | LR__0689
07d6c     08 39 06 F6 | 	mov	local14, #264
07d70     08 3A 06 F6 | 	mov	local15, #8
07d74     44 00 90 FD | 	jmp	#LR__0695
07d78                 | LR__0690
07d78     09 39 06 F6 | 	mov	local14, #265
07d7c     04 3A 06 F6 | 	mov	local15, #4
07d80     38 00 90 FD | 	jmp	#LR__0695
07d84                 | LR__0691
07d84     0A 39 06 F6 | 	mov	local14, #266
07d88     08 3A 06 F6 | 	mov	local15, #8
07d8c     2C 00 90 FD | 	jmp	#LR__0695
07d90                 | LR__0692
07d90     0B 39 06 F6 | 	mov	local14, #267
07d94     04 3A 06 F6 | 	mov	local15, #4
07d98     20 00 90 FD | 	jmp	#LR__0695
07d9c                 | LR__0693
07d9c     2F 12 06 F6 | 	mov	arg01, #47
07da0     B4 09 B1 FD | 	call	#_printerror
07da4     2F FA 05 F6 | 	mov	result1, #47
07da8     10 01 90 FD | 	jmp	#LR__0696
07dac                 | LR__0694
07dac     2E 12 06 F6 | 	mov	arg01, #46
07db0     A4 09 B1 FD | 	call	#_printerror
07db4                 | '   printerror(46): return 46
07db4     2E FA 05 F6 | 	mov	result1, #46
07db8     00 01 90 FD | 	jmp	#LR__0696
07dbc                 | LR__0695
07dbc     0F 3B 02 FD | 	qmul	local15, local01
07dc0     18 2A 62 FD | 	getqx	local07
07dc4     10 2B 02 FD | 	qmul	local07, local02
07dc8     18 3C 62 FD | 	getqx	local16
07dcc     11 3D 02 FD | 	qmul	local16, local03
07dd0     7B 00 00 FF 
07dd4     5C E4 05 F1 | 	add	objptr, ##63068
07dd8     F2 3E 02 FB | 	rdlong	local17, objptr
07ddc     1C 15 02 F6 | 	mov	arg02, local14
07de0     18 3C 62 FD | 	getqx	local16
07de4     1E 3F 82 F1 | 	sub	local17, local16
07de8     10 3E 86 F1 | 	sub	local17, #16
07dec     0F 3E 26 F5 | 	andn	local17, #15
07df0     F2 3E 62 FC | 	wrlong	local17, objptr
07df4     7B 00 00 FF 
07df8     5C E4 85 F1 | 	sub	objptr, ##63068
07dfc     1F 13 02 F6 | 	mov	arg01, local17
07e00     00 0B B1 FD | 	call	#_psdpoke
07e04     1F 13 02 F6 | 	mov	arg01, local17
07e08     02 12 06 F1 | 	add	arg01, #2
07e0c     1D 15 02 F6 | 	mov	arg02, local15
07e10     F0 0A B1 FD | 	call	#_psdpoke
07e14     1F 13 02 F6 | 	mov	arg01, local17
07e18     04 12 06 F1 | 	add	arg01, #4
07e1c     0F 15 02 F6 | 	mov	arg02, local01
07e20     98 0A B1 FD | 	call	#_pslpoke
07e24     1F 13 02 F6 | 	mov	arg01, local17
07e28     08 12 06 F1 | 	add	arg01, #8
07e2c     10 15 02 F6 | 	mov	arg02, local02
07e30     88 0A B1 FD | 	call	#_pslpoke
07e34     1F 13 02 F6 | 	mov	arg01, local17
07e38     0C 12 06 F1 | 	add	arg01, #12
07e3c     11 15 02 F6 | 	mov	arg02, local03
07e40     78 0A B1 FD | 	call	#_pslpoke
07e44     14 35 02 F6 | 	mov	local12, local06
07e48     04 34 66 F0 | 	shl	local12, #4
07e4c     34 00 00 FF 
07e50     EC E5 05 F1 | 	add	objptr, ##27116
07e54     F2 34 02 F1 | 	add	local12, objptr
07e58     1A 27 62 FC | 	wrlong	local05, local12
07e5c     14 35 02 F6 | 	mov	local12, local06
07e60     04 34 66 F0 | 	shl	local12, #4
07e64     F2 34 02 F1 | 	add	local12, objptr
07e68     04 34 06 F1 | 	add	local12, #4
07e6c     1A 3F 62 FC | 	wrlong	local17, local12
07e70     14 35 02 F6 | 	mov	local12, local06
07e74     04 34 66 F0 | 	shl	local12, #4
07e78     F2 34 02 F1 | 	add	local12, objptr
07e7c     0C 34 06 F1 | 	add	local12, #12
07e80     1A 39 62 FC | 	wrlong	local14, local12
07e84                 | ' memtop=arrayptr
07e84                 | ' 
07e84                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
07e84                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
07e84                 | ' pslpoke arrayptr+4,dims(0)
07e84                 | ' pslpoke arrayptr+8,dims(1)
07e84                 | ' pslpoke arrayptr+12,dims(2)
07e84                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
07e84                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
07e84                 | ' 
07e84                 | ' 
07e84                 | ' variables(j).name=varname2$
07e84                 | ' variables(j).value.uresult=arrayptr
07e84                 | ' variables(j).vartype=arraytype
07e84                 | ' if j=varnum then varnum+=1
07e84     20 00 00 FF 
07e88     00 E4 05 F1 | 	add	objptr, ##16384
07e8c     F2 2A 02 FB | 	rdlong	local07, objptr
07e90     54 00 00 FF 
07e94     EC E5 85 F1 | 	sub	objptr, ##43500
07e98     15 29 0A F2 | 	cmp	local06, local07 wz
07e9c     54 00 00 AF 
07ea0     EC E5 05 A1 |  if_e	add	objptr, ##43500
07ea4     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07ea8     01 2A 06 A1 |  if_e	add	local07, #1
07eac     F2 2A 62 AC |  if_e	wrlong	local07, objptr
07eb0     54 00 00 AF 
07eb4     EC E5 85 A1 |  if_e	sub	objptr, ##43500
07eb8                 | ' 
07eb8                 | ' return 0
07eb8     00 FA 05 F6 | 	mov	result1, #0
07ebc                 | LR__0696
07ebc     A7 F0 03 F6 | 	mov	ptra, fp
07ec0     B2 00 A0 FD | 	call	#popregs_
07ec4                 | _compile_dim_ret
07ec4     2D 00 64 FD | 	ret
07ec8                 | 
07ec8                 | ' 
07ec8                 | ' 
07ec8                 | ' function compile_for() as ulong  
07ec8                 | _compile_for
07ec8     07 4A 05 F6 | 	mov	COUNT_, #7
07ecc     A8 00 A0 FD | 	call	#pushregs_
07ed0                 | ' 
07ed0                 | ' 
07ed0                 | ' 
07ed0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
07ed0     57 00 00 FF 
07ed4     28 E4 05 F1 | 	add	objptr, ##44584
07ed8     F2 14 02 FB | 	rdlong	arg02, objptr
07edc     01 14 06 F1 | 	add	arg02, #1
07ee0     03 14 66 F0 | 	shl	arg02, #3
07ee4     02 00 00 FF 
07ee8     38 E4 85 F1 | 	sub	objptr, ##1080
07eec     F2 14 02 F1 | 	add	arg02, objptr
07ef0     0A 13 02 FB | 	rdlong	arg01, arg02
07ef4     54 00 00 FF 
07ef8     F0 E5 85 F1 | 	sub	objptr, ##43504
07efc                 | ' 
07efc                 | ' select case s
07efc     5A 01 00 FF 
07f00     EC 15 06 F6 | 	mov	arg02, ##@LR__4671
07f04     60 3F B1 FD | 	call	#__system___string_cmp
07f08     00 FA 0D F2 | 	cmp	result1, #0 wz
07f0c     1B FA 05 A6 |  if_e	mov	result1, #27
07f10     00 FA 05 56 |  if_ne	mov	result1, #0
07f14     00 FA 0D F2 | 	cmp	result1, #0 wz
07f18     0C 00 90 AD |  if_e	jmp	#LR__0700
07f1c     05 12 06 F6 | 	mov	arg01, #5
07f20     D8 E4 BF FD | 	call	#_compile_immediate_assign
07f24     10 00 90 FD | 	jmp	#LR__0701
07f28                 | LR__0700
07f28     20 12 06 F6 | 	mov	arg01, #32
07f2c     48 E9 BF FD | 	call	#_compile_error
07f30     20 FA 05 F6 | 	mov	result1, #32
07f34     E8 02 90 FD | 	jmp	#LR__0707
07f38                 | LR__0701
07f38     6A 00 00 FF 
07f3c     60 E4 05 F1 | 	add	objptr, ##54368
07f40     F2 12 02 FB | 	rdlong	arg01, objptr
07f44     09 25 02 F6 | 	mov	local04, arg01
07f48     01 24 86 F1 | 	sub	local04, #1
07f4c     12 15 02 F6 | 	mov	arg02, local04
07f50     01 14 66 F0 | 	shl	arg02, #1
07f54     12 15 02 F1 | 	add	arg02, local04
07f58     02 14 66 F0 | 	shl	arg02, #2
07f5c     03 00 00 FF 
07f60     00 E4 85 F1 | 	sub	objptr, ##1536
07f64     F2 14 02 F1 | 	add	arg02, objptr
07f68     0A 1F 02 FB | 	rdlong	local01, arg02
07f6c     04 14 06 F1 | 	add	arg02, #4
07f70     0A 27 02 FB | 	rdlong	local05, arg02
07f74     01 12 86 F1 | 	sub	arg01, #1
07f78     09 29 02 F6 | 	mov	local06, arg01
07f7c     01 28 66 F0 | 	shl	local06, #1
07f80     09 29 02 F1 | 	add	local06, arg01
07f84     02 28 66 F0 | 	shl	local06, #2
07f88     F2 28 02 F1 | 	add	local06, objptr
07f8c     08 28 06 F1 | 	add	local06, #8
07f90     14 13 02 FB | 	rdlong	arg01, local06
07f94     13 21 02 F6 | 	mov	local02, local05
07f98     09 23 02 F6 | 	mov	local03, arg01
07f9c                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
07f9c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
07f9c     17 22 0E F2 | 	cmp	local03, #23 wz
07fa0     67 00 00 FF 
07fa4     60 E4 85 F1 | 	sub	objptr, ##52832
07fa8     10 00 90 AD |  if_e	jmp	#LR__0702
07fac     22 12 06 F6 | 	mov	arg01, #34
07fb0     C4 E8 BF FD | 	call	#_compile_error
07fb4     22 FA 05 F6 | 	mov	result1, #34
07fb8     64 02 90 FD | 	jmp	#LR__0707
07fbc                 | LR__0702
07fbc     0F 2B 02 F6 | 	mov	local07, local01
07fc0                 | ' varnum=t1.result.uresult
07fc0                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
07fc0     57 00 00 FF 
07fc4     28 E4 05 F1 | 	add	objptr, ##44584
07fc8     F2 24 02 FB | 	rdlong	local04, objptr
07fcc     03 24 66 F0 | 	shl	local04, #3
07fd0     02 00 00 FF 
07fd4     38 E4 85 F1 | 	sub	objptr, ##1080
07fd8     F2 24 02 F1 | 	add	local04, objptr
07fdc     12 13 02 FB | 	rdlong	arg01, local04
07fe0     5C 01 00 FF 
07fe4     7C 15 06 F6 | 	mov	arg02, ##@LR__4862
07fe8     54 00 00 FF 
07fec     F0 E5 85 F1 | 	sub	objptr, ##43504
07ff0     74 3E B1 FD | 	call	#__system___string_cmp
07ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ff8     10 00 90 AD |  if_e	jmp	#LR__0703
07ffc     21 12 06 F6 | 	mov	arg01, #33
08000     74 E8 BF FD | 	call	#_compile_error
08004     21 FA 05 F6 | 	mov	result1, #33
08008     14 02 90 FD | 	jmp	#LR__0707
0800c                 | LR__0703
0800c     57 00 00 FF 
08010     28 E4 05 F1 | 	add	objptr, ##44584
08014     F2 24 02 FB | 	rdlong	local04, objptr
08018     01 24 06 F1 | 	add	local04, #1
0801c     F2 24 62 FC | 	wrlong	local04, objptr
08020     57 00 00 FF 
08024     28 E4 85 F1 | 	sub	objptr, ##44584
08028     D4 0B B0 FD | 	call	#_expr
0802c                 | ' ct+=1
0802c                 | ' expr()  ' there is "to" value pushed on the stack
0802c                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
0802c     57 00 00 FF 
08030     28 E4 05 F1 | 	add	objptr, ##44584
08034     F2 24 02 FB | 	rdlong	local04, objptr
08038     03 24 66 F0 | 	shl	local04, #3
0803c     02 00 00 FF 
08040     38 E4 85 F1 | 	sub	objptr, ##1080
08044     F2 24 02 F1 | 	add	local04, objptr
08048     12 13 02 FB | 	rdlong	arg01, local04
0804c     5C 01 00 FF 
08050     7F 15 06 F6 | 	mov	arg02, ##@LR__4863
08054     54 00 00 FF 
08058     F0 E5 85 F1 | 	sub	objptr, ##43504
0805c     08 3E B1 FD | 	call	#__system___string_cmp
08060     00 FA 0D F2 | 	cmp	result1, #0 wz
08064     3C 00 90 AD |  if_e	jmp	#LR__0704
08068     57 00 00 FF 
0806c     28 E4 05 F1 | 	add	objptr, ##44584
08070     F2 28 02 FB | 	rdlong	local06, objptr
08074     03 28 66 F0 | 	shl	local06, #3
08078     02 00 00 FF 
0807c     38 E4 85 F1 | 	sub	objptr, ##1080
08080     F2 28 02 F1 | 	add	local06, objptr
08084     14 13 02 FB | 	rdlong	arg01, local06
08088     5C 01 00 FF 
0808c     84 15 06 F6 | 	mov	arg02, ##@LR__4864
08090     54 00 00 FF 
08094     F0 E5 85 F1 | 	sub	objptr, ##43504
08098     CC 3D B1 FD | 	call	#__system___string_cmp
0809c     00 FA 0D F2 | 	cmp	result1, #0 wz
080a0     24 00 90 5D |  if_ne	jmp	#LR__0705
080a4                 | LR__0704
080a4     57 00 00 FF 
080a8     28 E4 05 F1 | 	add	objptr, ##44584
080ac     F2 28 02 FB | 	rdlong	local06, objptr
080b0     01 28 06 F1 | 	add	local06, #1
080b4     F2 28 62 FC | 	wrlong	local06, objptr
080b8     57 00 00 FF 
080bc     28 E4 85 F1 | 	sub	objptr, ##44584
080c0     3C 0B B0 FD | 	call	#_expr
080c4     78 00 90 FD | 	jmp	#LR__0706
080c8                 | LR__0705
080c8     6A 00 00 FF 
080cc     60 E4 05 F1 | 	add	objptr, ##54368
080d0     F2 28 02 FB | 	rdlong	local06, objptr
080d4     14 27 02 F6 | 	mov	local05, local06
080d8     01 26 66 F0 | 	shl	local05, #1
080dc     14 27 02 F1 | 	add	local05, local06
080e0     02 26 66 F0 | 	shl	local05, #2
080e4     03 00 00 FF 
080e8     00 E4 85 F1 | 	sub	objptr, ##1536
080ec     F2 26 02 F1 | 	add	local05, objptr
080f0     08 26 06 F1 | 	add	local05, #8
080f4     13 39 68 FC | 	wrlong	#28, local05
080f8     03 00 00 FF 
080fc     00 E4 05 F1 | 	add	objptr, ##1536
08100     F2 28 02 FB | 	rdlong	local06, objptr
08104     14 27 02 F6 | 	mov	local05, local06
08108     01 26 66 F0 | 	shl	local05, #1
0810c     14 27 02 F1 | 	add	local05, local06
08110     02 26 66 F0 | 	shl	local05, #2
08114     03 00 00 FF 
08118     00 E4 85 F1 | 	sub	objptr, ##1536
0811c     F2 26 02 F1 | 	add	local05, objptr
08120     13 03 68 FC | 	wrlong	#1, local05
08124     03 00 00 FF 
08128     00 E4 05 F1 | 	add	objptr, ##1536
0812c     F2 28 02 FB | 	rdlong	local06, objptr
08130     01 28 06 F1 | 	add	local06, #1
08134     F2 28 62 FC | 	wrlong	local06, objptr
08138     6A 00 00 FF 
0813c     60 E4 85 F1 | 	sub	objptr, ##54368
08140                 | LR__0706
08140     6A 00 00 FF 
08144     60 E4 05 F1 | 	add	objptr, ##54368
08148     F2 28 02 FB | 	rdlong	local06, objptr
0814c     14 27 02 F6 | 	mov	local05, local06
08150     01 26 66 F0 | 	shl	local05, #1
08154     14 27 02 F1 | 	add	local05, local06
08158     02 26 66 F0 | 	shl	local05, #2
0815c     03 00 00 FF 
08160     00 E4 85 F1 | 	sub	objptr, ##1536
08164     F2 26 02 F1 | 	add	local05, objptr
08168     08 26 06 F1 | 	add	local05, #8
0816c     13 39 68 FC | 	wrlong	#28, local05
08170     03 00 00 FF 
08174     00 E4 05 F1 | 	add	objptr, ##1536
08178     F2 28 02 FB | 	rdlong	local06, objptr
0817c     14 27 02 F6 | 	mov	local05, local06
08180     01 26 66 F0 | 	shl	local05, #1
08184     14 27 02 F1 | 	add	local05, local06
08188     02 26 66 F0 | 	shl	local05, #2
0818c     03 00 00 FF 
08190     00 E4 85 F1 | 	sub	objptr, ##1536
08194     F2 26 02 F1 | 	add	local05, objptr
08198     13 2B 62 FC | 	wrlong	local07, local05
0819c     03 00 00 FF 
081a0     00 E4 05 F1 | 	add	objptr, ##1536
081a4     F2 2A 02 FB | 	rdlong	local07, objptr
081a8     01 2A 06 F1 | 	add	local07, #1
081ac     F2 2A 62 FC | 	wrlong	local07, objptr
081b0     15 29 02 F6 | 	mov	local06, local07
081b4     01 28 66 F0 | 	shl	local06, #1
081b8     15 29 02 F1 | 	add	local06, local07
081bc     02 28 66 F0 | 	shl	local06, #2
081c0     03 00 00 FF 
081c4     00 E4 85 F1 | 	sub	objptr, ##1536
081c8     F2 28 02 F1 | 	add	local06, objptr
081cc     08 28 06 F1 | 	add	local06, #8
081d0     14 95 68 FC | 	wrlong	#74, local06
081d4     03 00 00 FF 
081d8     00 E4 05 F1 | 	add	objptr, ##1536
081dc     F2 2A 02 FB | 	rdlong	local07, objptr
081e0     15 29 02 F6 | 	mov	local06, local07
081e4     01 28 66 F0 | 	shl	local06, #1
081e8     15 29 02 F1 | 	add	local06, local07
081ec     02 28 66 F0 | 	shl	local06, #2
081f0     03 00 00 FF 
081f4     00 E4 85 F1 | 	sub	objptr, ##1536
081f8     F2 28 02 F1 | 	add	local06, objptr
081fc     14 01 68 FC | 	wrlong	#0, local06
08200     03 00 00 FF 
08204     00 E4 05 F1 | 	add	objptr, ##1536
08208     F2 2A 02 FB | 	rdlong	local07, objptr
0820c     01 2A 06 F1 | 	add	local07, #1
08210     F2 2A 62 FC | 	wrlong	local07, objptr
08214     6A 00 00 FF 
08218     60 E4 85 F1 | 	sub	objptr, ##54368
0821c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0821c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0821c                 | ' 
0821c                 | ' 
0821c                 | ' return 0
0821c     00 FA 05 F6 | 	mov	result1, #0
08220                 | LR__0707
08220     A7 F0 03 F6 | 	mov	ptra, fp
08224     B2 00 A0 FD | 	call	#popregs_
08228                 | _compile_for_ret
08228     2D 00 64 FD | 	ret
0822c                 | 
0822c                 | ' 
0822c                 | ' 
0822c                 | ' sub do_for()
0822c                 | _do_for
0822c     05 4A 05 F6 | 	mov	COUNT_, #5
08230     A8 00 A0 FD | 	call	#pushregs_
08234     79 00 00 FF 
08238     BC E5 05 F1 | 	add	objptr, ##62396
0823c     F2 24 02 FB | 	rdlong	local04, objptr
08240     01 24 06 F1 | 	add	local04, #1
08244     F2 24 62 FC | 	wrlong	local04, objptr
08248     79 00 00 FF 
0824c     BC E5 85 F1 | 	sub	objptr, ##62396
08250     34 1E B0 FD | 	call	#_pop
08254     FD 1E 02 F6 | 	mov	local01, result1
08258     FE 20 02 F6 | 	mov	local02, result2
0825c     FF 22 02 F6 | 	mov	local03, result3
08260     79 00 00 FF 
08264     BC E5 05 F1 | 	add	objptr, ##62396
08268     F2 24 02 FB | 	rdlong	local04, objptr
0826c     12 27 02 F6 | 	mov	local05, local04
08270     02 26 66 F0 | 	shl	local05, #2
08274     12 27 02 F1 | 	add	local05, local04
08278     02 26 66 F0 | 	shl	local05, #2
0827c     07 00 00 FF 
08280     40 E5 85 F1 | 	sub	objptr, ##3904
08284     F2 26 02 F1 | 	add	local05, objptr
08288     08 26 06 F1 | 	add	local05, #8
0828c     13 1F 62 FC | 	wrlong	local01, local05
08290     72 00 00 FF 
08294     7C E4 85 F1 | 	sub	objptr, ##58492
08298     EC 1D B0 FD | 	call	#_pop
0829c     FD 1E 02 F6 | 	mov	local01, result1
082a0     FE 20 02 F6 | 	mov	local02, result2
082a4     FF 22 02 F6 | 	mov	local03, result3
082a8     79 00 00 FF 
082ac     BC E5 05 F1 | 	add	objptr, ##62396
082b0     F2 24 02 FB | 	rdlong	local04, objptr
082b4     12 27 02 F6 | 	mov	local05, local04
082b8     02 26 66 F0 | 	shl	local05, #2
082bc     12 27 02 F1 | 	add	local05, local04
082c0     02 26 66 F0 | 	shl	local05, #2
082c4     07 00 00 FF 
082c8     40 E5 85 F1 | 	sub	objptr, ##3904
082cc     F2 26 02 F1 | 	add	local05, objptr
082d0     0C 26 06 F1 | 	add	local05, #12
082d4     13 1F 62 FC | 	wrlong	local01, local05
082d8     72 00 00 FF 
082dc     7C E4 85 F1 | 	sub	objptr, ##58492
082e0     A4 1D B0 FD | 	call	#_pop
082e4     FD 1E 02 F6 | 	mov	local01, result1
082e8     FE 20 02 F6 | 	mov	local02, result2
082ec     FF 22 02 F6 | 	mov	local03, result3
082f0     79 00 00 FF 
082f4     BC E5 05 F1 | 	add	objptr, ##62396
082f8     F2 24 02 FB | 	rdlong	local04, objptr
082fc     12 27 02 F6 | 	mov	local05, local04
08300     02 26 66 F0 | 	shl	local05, #2
08304     12 27 02 F1 | 	add	local05, local04
08308     02 26 66 F0 | 	shl	local05, #2
0830c     07 00 00 FF 
08310     40 E5 85 F1 | 	sub	objptr, ##3904
08314     F2 26 02 F1 | 	add	local05, objptr
08318     10 26 06 F1 | 	add	local05, #16
0831c     13 1F 62 FC | 	wrlong	local01, local05
08320                 | ' fortop+=1
08320                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
08320                 | ' 'if i> maxfor then printerror(36) : return
08320                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
08320                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
08320                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
08320                 | ' if compiledline(lineptr_e).result_type=token_end then
08320     08 00 00 FF 
08324     18 E4 85 F1 | 	sub	objptr, ##4120
08328     F2 1E 02 FB | 	rdlong	local01, objptr
0832c     0F 27 02 F6 | 	mov	local05, local01
08330     01 26 66 F0 | 	shl	local05, #1
08334     0F 27 02 F1 | 	add	local05, local01
08338     02 26 66 F0 | 	shl	local05, #2
0833c     03 00 00 FF 
08340     04 E4 85 F1 | 	sub	objptr, ##1540
08344     F2 26 02 F1 | 	add	local05, objptr
08348     08 26 06 F1 | 	add	local05, #8
0834c     13 27 02 FB | 	rdlong	local05, local05
08350     FE 27 0E F2 | 	cmp	local05, #510 wz
08354     67 00 00 FF 
08358     60 E4 85 F1 | 	sub	objptr, ##52832
0835c     70 00 90 5D |  if_ne	jmp	#LR__0710
08360     79 00 00 FF 
08364     BC E5 05 F1 | 	add	objptr, ##62396
08368     F2 1E 02 FB | 	rdlong	local01, objptr
0836c     0F 27 02 F6 | 	mov	local05, local01
08370     02 26 66 F0 | 	shl	local05, #2
08374     0F 27 02 F1 | 	add	local05, local01
08378     02 26 66 F0 | 	shl	local05, #2
0837c     07 00 00 FF 
08380     40 E5 85 F1 | 	sub	objptr, ##3904
08384     F2 26 02 F1 | 	add	local05, objptr
08388     07 00 00 FF 
0838c     18 E5 05 F1 | 	add	objptr, ##3864
08390     F2 1E 02 FB | 	rdlong	local01, objptr
08394     13 1F 62 FC | 	wrlong	local01, local05
08398     28 E4 05 F1 | 	add	objptr, #40
0839c     F2 1E 02 FB | 	rdlong	local01, objptr
083a0     0F 27 02 F6 | 	mov	local05, local01
083a4     02 26 66 F0 | 	shl	local05, #2
083a8     0F 27 02 F1 | 	add	local05, local01
083ac     02 26 66 F0 | 	shl	local05, #2
083b0     07 00 00 FF 
083b4     40 E5 85 F1 | 	sub	objptr, ##3904
083b8     F2 26 02 F1 | 	add	local05, objptr
083bc     04 26 06 F1 | 	add	local05, #4
083c0     13 01 68 FC | 	wrlong	#0, local05
083c4     72 00 00 FF 
083c8     7C E4 85 F1 | 	sub	objptr, ##58492
083cc     7C 00 90 FD | 	jmp	#LR__0711
083d0                 | LR__0710
083d0     79 00 00 FF 
083d4     BC E5 05 F1 | 	add	objptr, ##62396
083d8     F2 1E 02 FB | 	rdlong	local01, objptr
083dc     0F 27 02 F6 | 	mov	local05, local01
083e0     02 26 66 F0 | 	shl	local05, #2
083e4     0F 27 02 F1 | 	add	local05, local01
083e8     02 26 66 F0 | 	shl	local05, #2
083ec     07 00 00 FF 
083f0     40 E5 85 F1 | 	sub	objptr, ##3904
083f4     F2 26 02 F1 | 	add	local05, objptr
083f8     07 00 00 FF 
083fc     20 E5 05 F1 | 	add	objptr, ##3872
08400     F2 1E 02 FB | 	rdlong	local01, objptr
08404     13 1F 62 FC | 	wrlong	local01, local05
08408     20 E4 05 F1 | 	add	objptr, #32
0840c     F2 1E 02 FB | 	rdlong	local01, objptr
08410     0F 27 02 F6 | 	mov	local05, local01
08414     02 26 66 F0 | 	shl	local05, #2
08418     0F 27 02 F1 | 	add	local05, local01
0841c     02 26 66 F0 | 	shl	local05, #2
08420     07 00 00 FF 
08424     40 E5 85 F1 | 	sub	objptr, ##3904
08428     F2 26 02 F1 | 	add	local05, objptr
0842c     08 00 00 FF 
08430     18 E4 85 F1 | 	sub	objptr, ##4120
08434     F2 1E 02 FB | 	rdlong	local01, objptr
08438     6A 00 00 FF 
0843c     64 E4 85 F1 | 	sub	objptr, ##54372
08440     01 1E 06 F1 | 	add	local01, #1
08444     04 26 06 F1 | 	add	local05, #4
08448     13 1F 62 FC | 	wrlong	local01, local05
0844c                 | LR__0711
0844c     A7 F0 03 F6 | 	mov	ptra, fp
08450     B2 00 A0 FD | 	call	#popregs_
08454                 | _do_for_ret
08454     2D 00 64 FD | 	ret
08458                 | 
08458                 | ' 
08458                 | ' ' now do_next todo
08458                 | ' 
08458                 | ' sub do_next()
08458                 | _do_next
08458     04 4A 05 F6 | 	mov	COUNT_, #4
0845c     A8 00 A0 FD | 	call	#pushregs_
08460     24 1C B0 FD | 	call	#_pop
08464     FD 1E 02 F6 | 	mov	local01, result1
08468     FE 20 02 F6 | 	mov	local02, result2
0846c     FF 22 02 F6 | 	mov	local03, result3
08470                 | ' 
08470                 | ' t1=pop() :varnum=t1.result.uresult
08470                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08470     79 00 00 FF 
08474     BC E5 05 F1 | 	add	objptr, ##62396
08478     F2 12 02 FB | 	rdlong	arg01, objptr
0847c     09 25 02 F6 | 	mov	local04, arg01
08480     02 24 66 F0 | 	shl	local04, #2
08484     09 25 02 F1 | 	add	local04, arg01
08488     02 24 66 F0 | 	shl	local04, #2
0848c     07 00 00 FF 
08490     40 E5 85 F1 | 	sub	objptr, ##3904
08494     F2 24 02 F1 | 	add	local04, objptr
08498     08 24 06 F1 | 	add	local04, #8
0849c     12 25 02 FB | 	rdlong	local04, local04
084a0     0F 25 0A F2 | 	cmp	local04, local01 wz
084a4     72 00 00 FF 
084a8     7C E4 85 F1 | 	sub	objptr, ##58492
084ac     0C 00 90 AD |  if_e	jmp	#LR__0720
084b0     25 12 06 F6 | 	mov	arg01, #37
084b4     A0 02 B1 FD | 	call	#_printerror
084b8     28 02 90 FD | 	jmp	#LR__0724
084bc                 | LR__0720
084bc     79 00 00 FF 
084c0     BC E5 05 F1 | 	add	objptr, ##62396
084c4     F2 12 02 FB | 	rdlong	arg01, objptr
084c8     09 25 02 F6 | 	mov	local04, arg01
084cc     02 24 66 F0 | 	shl	local04, #2
084d0     09 25 02 F1 | 	add	local04, arg01
084d4     02 24 66 F0 | 	shl	local04, #2
084d8     07 00 00 FF 
084dc     40 E5 85 F1 | 	sub	objptr, ##3904
084e0     F2 24 02 F1 | 	add	local04, objptr
084e4     0C 24 06 F1 | 	add	local04, #12
084e8     12 25 02 FB | 	rdlong	local04, local04
084ec     0F 13 02 F6 | 	mov	arg01, local01
084f0     04 12 66 F0 | 	shl	arg01, #4
084f4     3D 00 00 FF 
084f8     90 E4 85 F1 | 	sub	objptr, ##31376
084fc     F2 12 02 F1 | 	add	arg01, objptr
08500     0F FF 01 F6 | 	mov	result3, local01
08504     04 FE 65 F0 | 	shl	result3, #4
08508     F2 FE 01 F1 | 	add	result3, objptr
0850c     04 FE 05 F1 | 	add	result3, #4
08510     FF FE 01 FB | 	rdlong	result3, result3
08514     12 FF 01 F1 | 	add	result3, local04
08518     04 12 06 F1 | 	add	arg01, #4
0851c     09 FF 61 FC | 	wrlong	result3, arg01
08520                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08520                 | ' if fortable(fortop).stepval>=0 then
08520     44 00 00 FF 
08524     D0 E5 05 F1 | 	add	objptr, ##35280
08528     F2 12 02 FB | 	rdlong	arg01, objptr
0852c     09 25 02 F6 | 	mov	local04, arg01
08530     02 24 66 F0 | 	shl	local04, #2
08534     09 25 02 F1 | 	add	local04, arg01
08538     02 24 66 F0 | 	shl	local04, #2
0853c     07 00 00 FF 
08540     40 E5 85 F1 | 	sub	objptr, ##3904
08544     F2 24 02 F1 | 	add	local04, objptr
08548     0C 24 06 F1 | 	add	local04, #12
0854c     12 25 02 FB | 	rdlong	local04, local04
08550     00 24 56 F2 | 	cmps	local04, #0 wc
08554     72 00 00 FF 
08558     7C E4 85 F1 | 	sub	objptr, ##58492
0855c     78 00 90 CD |  if_b	jmp	#LR__0721
08560                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08560     04 1E 66 F0 | 	shl	local01, #4
08564     34 00 00 FF 
08568     EC E5 05 F1 | 	add	objptr, ##27116
0856c     F2 1E 02 F1 | 	add	local01, objptr
08570     44 00 00 FF 
08574     D0 E5 05 F1 | 	add	objptr, ##35280
08578     F2 24 02 FB | 	rdlong	local04, objptr
0857c     12 13 02 F6 | 	mov	arg01, local04
08580     02 12 66 F0 | 	shl	arg01, #2
08584     12 13 02 F1 | 	add	arg01, local04
08588     02 12 66 F0 | 	shl	arg01, #2
0858c     07 00 00 FF 
08590     40 E5 85 F1 | 	sub	objptr, ##3904
08594     F2 12 02 F1 | 	add	arg01, objptr
08598     04 1E 06 F1 | 	add	local01, #4
0859c     0F 25 02 FB | 	rdlong	local04, local01
085a0     10 12 06 F1 | 	add	arg01, #16
085a4     09 13 02 FB | 	rdlong	arg01, arg01
085a8     09 25 5A F2 | 	cmps	local04, arg01 wcz
085ac     72 00 00 FF 
085b0     7C E4 85 F1 | 	sub	objptr, ##58492
085b4     9C 00 90 ED |  if_be	jmp	#LR__0723
085b8     79 00 00 FF 
085bc     BC E5 05 F1 | 	add	objptr, ##62396
085c0     F2 24 02 FB | 	rdlong	local04, objptr
085c4     01 24 86 F1 | 	sub	local04, #1
085c8     F2 24 62 FC | 	wrlong	local04, objptr
085cc     79 00 00 FF 
085d0     BC E5 85 F1 | 	sub	objptr, ##62396
085d4     0C 01 90 FD | 	jmp	#LR__0724
085d8                 | LR__0721
085d8                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
085d8     0F 13 02 F6 | 	mov	arg01, local01
085dc     04 12 66 F0 | 	shl	arg01, #4
085e0     34 00 00 FF 
085e4     EC E5 05 F1 | 	add	objptr, ##27116
085e8     F2 12 02 F1 | 	add	arg01, objptr
085ec     44 00 00 FF 
085f0     D0 E5 05 F1 | 	add	objptr, ##35280
085f4     F2 24 02 FB | 	rdlong	local04, objptr
085f8     12 1F 02 F6 | 	mov	local01, local04
085fc     02 1E 66 F0 | 	shl	local01, #2
08600     12 1F 02 F1 | 	add	local01, local04
08604     02 1E 66 F0 | 	shl	local01, #2
08608     07 00 00 FF 
0860c     40 E5 85 F1 | 	sub	objptr, ##3904
08610     F2 1E 02 F1 | 	add	local01, objptr
08614     04 12 06 F1 | 	add	arg01, #4
08618     09 13 02 FB | 	rdlong	arg01, arg01
0861c     10 1E 06 F1 | 	add	local01, #16
08620     0F 1F 02 FB | 	rdlong	local01, local01
08624     0F 13 52 F2 | 	cmps	arg01, local01 wc
08628     72 00 00 FF 
0862c     7C E4 85 F1 | 	sub	objptr, ##58492
08630     20 00 90 3D |  if_ae	jmp	#LR__0722
08634     79 00 00 FF 
08638     BC E5 05 F1 | 	add	objptr, ##62396
0863c     F2 24 02 FB | 	rdlong	local04, objptr
08640     01 24 86 F1 | 	sub	local04, #1
08644     F2 24 62 FC | 	wrlong	local04, objptr
08648     79 00 00 FF 
0864c     BC E5 85 F1 | 	sub	objptr, ##62396
08650     90 00 90 FD | 	jmp	#LR__0724
08654                 | LR__0722
08654                 | LR__0723
08654     79 00 00 FF 
08658     BC E5 05 F1 | 	add	objptr, ##62396
0865c     F2 1E 02 FB | 	rdlong	local01, objptr
08660     0F 25 02 F6 | 	mov	local04, local01
08664     02 24 66 F0 | 	shl	local04, #2
08668     0F 25 02 F1 | 	add	local04, local01
0866c     02 24 66 F0 | 	shl	local04, #2
08670     07 00 00 FF 
08674     40 E5 85 F1 | 	sub	objptr, ##3904
08678     F2 24 02 F1 | 	add	local04, objptr
0867c     12 25 02 FB | 	rdlong	local04, local04
08680     07 00 00 FF 
08684     18 E5 05 F1 | 	add	objptr, ##3864
08688     F2 24 62 FC | 	wrlong	local04, objptr
0868c     28 E4 05 F1 | 	add	objptr, #40
08690     F2 1E 02 FB | 	rdlong	local01, objptr
08694     0F 25 02 F6 | 	mov	local04, local01
08698     02 24 66 F0 | 	shl	local04, #2
0869c     0F 25 02 F1 | 	add	local04, local01
086a0     02 24 66 F0 | 	shl	local04, #2
086a4     07 00 00 FF 
086a8     40 E5 85 F1 | 	sub	objptr, ##3904
086ac     F2 24 02 F1 | 	add	local04, objptr
086b0     04 24 06 F1 | 	add	local04, #4
086b4     12 25 02 FB | 	rdlong	local04, local04
086b8     07 00 00 FF 
086bc     1C E5 05 F1 | 	add	objptr, ##3868
086c0     F2 24 62 FC | 	wrlong	local04, objptr
086c4     0F 00 00 FF 
086c8     38 E5 85 F1 | 	sub	objptr, ##7992
086cc     F2 24 02 FB | 	rdlong	local04, objptr
086d0     01 24 86 F1 | 	sub	local04, #1
086d4     04 E4 05 F1 | 	add	objptr, #4
086d8     F2 24 62 FC | 	wrlong	local04, objptr
086dc     6A 00 00 FF 
086e0     64 E4 85 F1 | 	sub	objptr, ##54372
086e4                 | LR__0724
086e4     A7 F0 03 F6 | 	mov	ptra, fp
086e8     B2 00 A0 FD | 	call	#popregs_
086ec                 | _do_next_ret
086ec     2D 00 64 FD | 	ret
086f0                 | 
086f0                 | ' 
086f0                 | ' 
086f0                 | ' function compile_next() as ulong
086f0                 | _compile_next
086f0     04 4A 05 F6 | 	mov	COUNT_, #4
086f4     A8 00 A0 FD | 	call	#pushregs_
086f8     57 00 00 FF 
086fc     28 E4 05 F1 | 	add	objptr, ##44584
08700     F2 12 02 FB | 	rdlong	arg01, objptr
08704     03 12 66 F0 | 	shl	arg01, #3
08708     02 00 00 FF 
0870c     38 E4 85 F1 | 	sub	objptr, ##1080
08710     F2 12 02 F1 | 	add	arg01, objptr
08714     09 1F 02 FB | 	rdlong	local01, arg01
08718                 | ' 
08718                 | ' varname$=lparts(ct).part$ 
08718                 | ' 'suffix$=right$(varname$,1)
08718                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08718                 | ' if varnum=0 then compile_error(35)  : return 35
08718     04 E4 85 F1 | 	sub	objptr, #4
0871c     F2 14 0A FB | 	rdlong	arg02, objptr wz
08720     54 00 00 FF 
08724     EC E5 85 F1 | 	sub	objptr, ##43500
08728     10 00 90 5D |  if_ne	jmp	#LR__0730
0872c     23 12 06 F6 | 	mov	arg01, #35
08730     44 E1 BF FD | 	call	#_compile_error
08734     23 FA 05 F6 | 	mov	result1, #35
08738     58 01 90 FD | 	jmp	#LR__0734
0873c                 | LR__0730
0873c     01 20 66 F6 | 	neg	local02, #1
08740                 | ' j=-1
08740                 | ' for i=0 to varnum-1
08740     00 22 06 F6 | 	mov	local03, #0
08744     54 00 00 FF 
08748     EC E5 05 F1 | 	add	objptr, ##43500
0874c     F2 24 02 FB | 	rdlong	local04, objptr
08750     54 00 00 FF 
08754     EC E5 85 F1 | 	sub	objptr, ##43500
08758                 | LR__0731
08758     12 23 12 F2 | 	cmp	local03, local04 wc
0875c     38 00 90 3D |  if_ae	jmp	#LR__0732
08760                 | '   if variables(i).name=varname$ then j=i : exit
08760     11 15 02 F6 | 	mov	arg02, local03
08764     04 14 66 F0 | 	shl	arg02, #4
08768     34 00 00 FF 
0876c     EC E5 05 F1 | 	add	objptr, ##27116
08770     F2 14 02 F1 | 	add	arg02, objptr
08774     0A 13 02 FB | 	rdlong	arg01, arg02
08778     0F 15 02 F6 | 	mov	arg02, local01
0877c     34 00 00 FF 
08780     EC E5 85 F1 | 	sub	objptr, ##27116
08784     E0 36 B1 FD | 	call	#__system___string_cmp
08788     00 FA 0D F2 | 	cmp	result1, #0 wz
0878c     11 21 02 A6 |  if_e	mov	local02, local03
08790     01 22 06 51 |  if_ne	add	local03, #1
08794     C0 FF 9F 5D |  if_ne	jmp	#LR__0731
08798                 | LR__0732
08798                 | ' if j=-1 then compile_error(35) : return 35
08798     FF FF 7F FF 
0879c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
087a0     10 00 90 5D |  if_ne	jmp	#LR__0733
087a4     23 12 06 F6 | 	mov	arg01, #35
087a8     CC E0 BF FD | 	call	#_compile_error
087ac     23 FA 05 F6 | 	mov	result1, #35
087b0     E0 00 90 FD | 	jmp	#LR__0734
087b4                 | LR__0733
087b4     6A 00 00 FF 
087b8     60 E4 05 F1 | 	add	objptr, ##54368
087bc     F2 24 02 FB | 	rdlong	local04, objptr
087c0     12 23 02 F6 | 	mov	local03, local04
087c4     01 22 66 F0 | 	shl	local03, #1
087c8     12 23 02 F1 | 	add	local03, local04
087cc     02 22 66 F0 | 	shl	local03, #2
087d0     03 00 00 FF 
087d4     00 E4 85 F1 | 	sub	objptr, ##1536
087d8     F2 22 02 F1 | 	add	local03, objptr
087dc     08 22 06 F1 | 	add	local03, #8
087e0     11 39 68 FC | 	wrlong	#28, local03
087e4     03 00 00 FF 
087e8     00 E4 05 F1 | 	add	objptr, ##1536
087ec     F2 24 02 FB | 	rdlong	local04, objptr
087f0     12 23 02 F6 | 	mov	local03, local04
087f4     01 22 66 F0 | 	shl	local03, #1
087f8     12 23 02 F1 | 	add	local03, local04
087fc     02 22 66 F0 | 	shl	local03, #2
08800     03 00 00 FF 
08804     00 E4 85 F1 | 	sub	objptr, ##1536
08808     F2 22 02 F1 | 	add	local03, objptr
0880c     11 21 62 FC | 	wrlong	local02, local03
08810     03 00 00 FF 
08814     00 E4 05 F1 | 	add	objptr, ##1536
08818     F2 24 02 FB | 	rdlong	local04, objptr
0881c     01 24 06 F1 | 	add	local04, #1
08820     F2 24 62 FC | 	wrlong	local04, objptr
08824     12 23 02 F6 | 	mov	local03, local04
08828     01 22 66 F0 | 	shl	local03, #1
0882c     12 23 02 F1 | 	add	local03, local04
08830     02 22 66 F0 | 	shl	local03, #2
08834     03 00 00 FF 
08838     00 E4 85 F1 | 	sub	objptr, ##1536
0883c     F2 22 02 F1 | 	add	local03, objptr
08840     08 22 06 F1 | 	add	local03, #8
08844     11 97 68 FC | 	wrlong	#75, local03
08848     03 00 00 FF 
0884c     00 E4 05 F1 | 	add	objptr, ##1536
08850     F2 24 02 FB | 	rdlong	local04, objptr
08854     12 23 02 F6 | 	mov	local03, local04
08858     01 22 66 F0 | 	shl	local03, #1
0885c     12 23 02 F1 | 	add	local03, local04
08860     02 22 66 F0 | 	shl	local03, #2
08864     03 00 00 FF 
08868     00 E4 85 F1 | 	sub	objptr, ##1536
0886c     F2 22 02 F1 | 	add	local03, objptr
08870     11 01 68 FC | 	wrlong	#0, local03
08874     03 00 00 FF 
08878     00 E4 05 F1 | 	add	objptr, ##1536
0887c     F2 24 02 FB | 	rdlong	local04, objptr
08880     01 24 06 F1 | 	add	local04, #1
08884     F2 24 62 FC | 	wrlong	local04, objptr
08888     6A 00 00 FF 
0888c     60 E4 85 F1 | 	sub	objptr, ##54368
08890                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08890                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08890                 | ' return 0
08890     00 FA 05 F6 | 	mov	result1, #0
08894                 | LR__0734
08894     A7 F0 03 F6 | 	mov	ptra, fp
08898     B2 00 A0 FD | 	call	#popregs_
0889c                 | _compile_next_ret
0889c     2D 00 64 FD | 	ret
088a0                 | 
088a0                 | ' 
088a0                 | ' 
088a0                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
088a0                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
088a0                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
088a0                 | ' 
088a0                 | ' 
088a0                 | ' function compile_goto( ) as ulong
088a0                 | _compile_goto
088a0     03 4A 05 F6 | 	mov	COUNT_, #3
088a4     A8 00 A0 FD | 	call	#pushregs_
088a8     28 F0 07 F1 | 	add	ptra, #40
088ac                 | ' 
088ac                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
088ac     57 00 00 FF 
088b0     28 E4 05 F1 | 	add	objptr, ##44584
088b4     F2 16 02 FB | 	rdlong	arg03, objptr
088b8     03 16 66 F0 | 	shl	arg03, #3
088bc     02 00 00 FF 
088c0     38 E4 85 F1 | 	sub	objptr, ##1080
088c4     F2 16 02 F1 | 	add	arg03, objptr
088c8     04 16 06 F1 | 	add	arg03, #4
088cc     0B 17 02 FB | 	rdlong	arg03, arg03
088d0     01 00 00 FF 
088d4     00 16 0E F2 | 	cmp	arg03, ##512 wz
088d8     54 00 00 FF 
088dc     F0 E5 85 F1 | 	sub	objptr, ##43504
088e0     CC 02 90 5D |  if_ne	jmp	#LR__0745
088e4     57 00 00 FF 
088e8     28 E4 05 F1 | 	add	objptr, ##44584
088ec     F2 16 02 FB | 	rdlong	arg03, objptr
088f0     01 16 06 F1 | 	add	arg03, #1
088f4     03 16 66 F0 | 	shl	arg03, #3
088f8     02 00 00 FF 
088fc     38 E4 85 F1 | 	sub	objptr, ##1080
08900     F2 16 02 F1 | 	add	arg03, objptr
08904     04 16 06 F1 | 	add	arg03, #4
08908     0B 17 02 FB | 	rdlong	arg03, arg03
0890c     FE 17 0E F2 | 	cmp	arg03, #510 wz
08910     54 00 00 FF 
08914     F0 E5 85 F1 | 	sub	objptr, ##43504
08918     94 02 90 5D |  if_ne	jmp	#LR__0745
0891c     57 00 00 FF 
08920     28 E4 05 F1 | 	add	objptr, ##44584
08924     F2 16 02 FB | 	rdlong	arg03, objptr
08928     03 16 66 F0 | 	shl	arg03, #3
0892c     02 00 00 FF 
08930     38 E4 85 F1 | 	sub	objptr, ##1080
08934     F2 16 02 F1 | 	add	arg03, objptr
08938     0B 13 02 FB | 	rdlong	arg01, arg03
0893c     00 14 06 F6 | 	mov	arg02, #0
08940     54 00 00 FF 
08944     F0 E5 85 F1 | 	sub	objptr, ##43504
08948     E8 66 B1 FD | 	call	#__system____builtin_atoi
0894c     04 4E 05 F1 | 	add	fp, #4
08950     A7 FA 61 FC | 	wrlong	result1, fp
08954     6A 00 00 FF 
08958     60 E4 05 F1 | 	add	objptr, ##54368
0895c     F2 1E 02 FB | 	rdlong	local01, objptr
08960     0F 21 02 F6 | 	mov	local02, local01
08964     01 20 66 F0 | 	shl	local02, #1
08968     0F 21 02 F1 | 	add	local02, local01
0896c     02 20 66 F0 | 	shl	local02, #2
08970     03 00 00 FF 
08974     00 E4 85 F1 | 	sub	objptr, ##1536
08978     F2 20 02 F1 | 	add	local02, objptr
0897c     08 20 06 F1 | 	add	local02, #8
08980     10 9D 68 FC | 	wrlong	#78, local02
08984     03 00 00 FF 
08988     08 E4 05 F1 | 	add	objptr, ##1544
0898c     F2 22 02 FB | 	rdlong	local03, objptr
08990     6A 00 00 FF 
08994     68 E4 85 F1 | 	sub	objptr, ##54376
08998     04 4E 05 F1 | 	add	fp, #4
0899c     A7 22 62 FC | 	wrlong	local03, fp
089a0     08 4E 85 F1 | 	sub	fp, #8
089a4                 | ' 
089a4                 | '   gotoline=val%(lparts(ct).part$) 
089a4                 | '   compiledline(lineptr).result_type=token_fast_goto
089a4                 | ' ' now find a pointer to goto
089a4                 | '   gotoptr=programstart
089a4                 | '   do
089a4                 | LR__0740
089a4     10 4E 05 F1 | 	add	fp, #16
089a8     A7 12 02 F6 | 	mov	arg01, fp
089ac     08 4E 85 F1 | 	sub	fp, #8
089b0     A7 14 02 FB | 	rdlong	arg02, fp
089b4     08 4E 85 F1 | 	sub	fp, #8
089b8     18 16 06 F6 | 	mov	arg03, #24
089bc     0B 00 00 FF 
089c0     C0 E4 05 F1 | 	add	objptr, ##5824
089c4     10 29 B1 FD | 	call	#_psram_spin2_read1
089c8     0B 00 00 FF 
089cc     C0 E4 85 F1 | 	sub	objptr, ##5824
089d0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
089d0                 | '     if gotoheader(0)<>$FFFFFFFF then
089d0     10 4E 05 F1 | 	add	fp, #16
089d4     A7 22 02 FB | 	rdlong	local03, fp
089d8     10 4E 85 F1 | 	sub	fp, #16
089dc     FF FF 7F FF 
089e0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
089e4     24 00 90 AD |  if_e	jmp	#LR__0741
089e8     08 4E 05 F1 | 	add	fp, #8
089ec     A7 22 02 FB | 	rdlong	local03, fp
089f0     04 4E 05 F1 | 	add	fp, #4
089f4     A7 22 62 FC | 	wrlong	local03, fp
089f8     18 4E 05 F1 | 	add	fp, #24
089fc     A7 22 02 FB | 	rdlong	local03, fp
08a00     1C 4E 85 F1 | 	sub	fp, #28
08a04     A7 22 62 FC | 	wrlong	local03, fp
08a08     08 4E 85 F1 | 	sub	fp, #8
08a0c                 | LR__0741
08a0c     24 4E 05 F1 | 	add	fp, #36
08a10     A7 22 02 FB | 	rdlong	local03, fp
08a14     24 4E 85 F1 | 	sub	fp, #36
08a18     FF FF 3F FF 
08a1c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08a20     10 4E 05 51 |  if_ne	add	fp, #16
08a24     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08a28     10 4E 85 51 |  if_ne	sub	fp, #16
08a2c     FF FF 7F 5F 
08a30     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08a34     1C 00 90 AD |  if_e	jmp	#LR__0742
08a38     10 4E 05 F1 | 	add	fp, #16
08a3c     A7 22 02 FB | 	rdlong	local03, fp
08a40     0C 4E 85 F1 | 	sub	fp, #12
08a44     A7 20 02 FB | 	rdlong	local02, fp
08a48     04 4E 85 F1 | 	sub	fp, #4
08a4c     10 23 0A F2 | 	cmp	local03, local02 wz
08a50     50 FF 9F 5D |  if_ne	jmp	#LR__0740
08a54                 | LR__0742
08a54                 | '   if gotoheader(0)=gotoline then
08a54     10 4E 05 F1 | 	add	fp, #16
08a58     A7 22 02 FB | 	rdlong	local03, fp
08a5c     0C 4E 85 F1 | 	sub	fp, #12
08a60     A7 1E 02 FB | 	rdlong	local01, fp
08a64     04 4E 85 F1 | 	sub	fp, #4
08a68     0F 23 0A F2 | 	cmp	local03, local01 wz
08a6c     7C 00 90 5D |  if_ne	jmp	#LR__0743
08a70     6A 00 00 FF 
08a74     60 E4 05 F1 | 	add	objptr, ##54368
08a78     F2 1E 02 FB | 	rdlong	local01, objptr
08a7c     0F 21 02 F6 | 	mov	local02, local01
08a80     01 20 66 F0 | 	shl	local02, #1
08a84     0F 21 02 F1 | 	add	local02, local01
08a88     02 20 66 F0 | 	shl	local02, #2
08a8c     03 00 00 FF 
08a90     00 E4 85 F1 | 	sub	objptr, ##1536
08a94     F2 20 02 F1 | 	add	local02, objptr
08a98     0C 4E 05 F1 | 	add	fp, #12
08a9c     A7 22 02 FB | 	rdlong	local03, fp
08aa0     10 23 62 FC | 	wrlong	local03, local02
08aa4     03 00 00 FF 
08aa8     00 E4 05 F1 | 	add	objptr, ##1536
08aac     F2 1E 02 FB | 	rdlong	local01, objptr
08ab0     0F 21 02 F6 | 	mov	local02, local01
08ab4     01 20 66 F0 | 	shl	local02, #1
08ab8     0F 21 02 F1 | 	add	local02, local01
08abc     02 20 66 F0 | 	shl	local02, #2
08ac0     03 00 00 FF 
08ac4     00 E4 85 F1 | 	sub	objptr, ##1536
08ac8     F2 20 02 F1 | 	add	local02, objptr
08acc     08 4E 85 F1 | 	sub	fp, #8
08ad0     A7 22 02 FB | 	rdlong	local03, fp
08ad4     04 4E 85 F1 | 	sub	fp, #4
08ad8     04 20 06 F1 | 	add	local02, #4
08adc     10 23 62 FC | 	wrlong	local03, local02
08ae0     67 00 00 FF 
08ae4     60 E4 85 F1 | 	sub	objptr, ##52832
08ae8     A4 00 90 FD | 	jmp	#LR__0744
08aec                 | LR__0743
08aec     6A 00 00 FF 
08af0     60 E4 05 F1 | 	add	objptr, ##54368
08af4     F2 1E 02 FB | 	rdlong	local01, objptr
08af8     0F 21 02 F6 | 	mov	local02, local01
08afc     01 20 66 F0 | 	shl	local02, #1
08b00     0F 21 02 F1 | 	add	local02, local01
08b04     02 20 66 F0 | 	shl	local02, #2
08b08     03 00 00 FF 
08b0c     00 E4 85 F1 | 	sub	objptr, ##1536
08b10     F2 20 02 F1 | 	add	local02, objptr
08b14     00 00 C0 FF 
08b18     10 01 68 FC | 	wrlong	##-2147483648, local02
08b1c     03 00 00 FF 
08b20     00 E4 05 F1 | 	add	objptr, ##1536
08b24     F2 1E 02 FB | 	rdlong	local01, objptr
08b28     0F 21 02 F6 | 	mov	local02, local01
08b2c     01 20 66 F0 | 	shl	local02, #1
08b30     0F 21 02 F1 | 	add	local02, local01
08b34     02 20 66 F0 | 	shl	local02, #2
08b38     03 00 00 FF 
08b3c     00 E4 85 F1 | 	sub	objptr, ##1536
08b40     F2 20 02 F1 | 	add	local02, objptr
08b44     04 4E 05 F1 | 	add	fp, #4
08b48     A7 22 02 FB | 	rdlong	local03, fp
08b4c     04 4E 85 F1 | 	sub	fp, #4
08b50     04 20 06 F1 | 	add	local02, #4
08b54     10 23 62 FC | 	wrlong	local03, local02
08b58     03 00 00 FF 
08b5c     00 E4 05 F1 | 	add	objptr, ##1536
08b60     F2 1E 02 FB | 	rdlong	local01, objptr
08b64     0F 21 02 F6 | 	mov	local02, local01
08b68     01 20 66 F0 | 	shl	local02, #1
08b6c     0F 21 02 F1 | 	add	local02, local01
08b70     02 20 66 F0 | 	shl	local02, #2
08b74     03 00 00 FF 
08b78     00 E4 85 F1 | 	sub	objptr, ##1536
08b7c     F2 20 02 F1 | 	add	local02, objptr
08b80     08 20 06 F1 | 	add	local02, #8
08b84     10 A7 68 FC | 	wrlong	#83, local02
08b88     67 00 00 FF 
08b8c     60 E4 85 F1 | 	sub	objptr, ##52832
08b90                 | LR__0744
08b90     6A 00 00 FF 
08b94     60 E4 05 F1 | 	add	objptr, ##54368
08b98     F2 22 02 FB | 	rdlong	local03, objptr
08b9c     01 22 06 F1 | 	add	local03, #1
08ba0     F2 22 62 FC | 	wrlong	local03, objptr
08ba4     6A 00 00 FF 
08ba8     60 E4 85 F1 | 	sub	objptr, ##54368
08bac     40 00 90 FD | 	jmp	#LR__0746
08bb0                 | LR__0745
08bb0                 | '    print "We have a slow goto, todo  "
08bb0     00 12 06 F6 | 	mov	arg01, #0
08bb4     18 8C B1 FD | 	call	#__system___getiolock_0472
08bb8     FD 12 02 F6 | 	mov	arg01, result1
08bbc     80 32 B1 FD | 	call	#__system___lockmem
08bc0     5C 01 00 FF 
08bc4     87 15 06 F6 | 	mov	arg02, ##@LR__4865
08bc8     00 12 06 F6 | 	mov	arg01, #0
08bcc     00 16 06 F6 | 	mov	arg03, #0
08bd0     70 3F B1 FD | 	call	#__system___basic_print_string
08bd4     00 12 06 F6 | 	mov	arg01, #0
08bd8     0A 14 06 F6 | 	mov	arg02, #10
08bdc     00 16 06 F6 | 	mov	arg03, #0
08be0     08 3F B1 FD | 	call	#__system___basic_print_char
08be4     00 12 06 F6 | 	mov	arg01, #0
08be8     E4 8B B1 FD | 	call	#__system___getiolock_0472
08bec     FD 00 68 FC | 	wrlong	#0, result1
08bf0                 | LR__0746
08bf0                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
08bf0                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
08bf0                 | ' return 0
08bf0     00 FA 05 F6 | 	mov	result1, #0
08bf4     A7 F0 03 F6 | 	mov	ptra, fp
08bf8     B2 00 A0 FD | 	call	#popregs_
08bfc                 | _compile_goto_ret
08bfc     2D 00 64 FD | 	ret
08c00                 | 
08c00                 | ' 
08c00                 | ' 
08c00                 | ' 
08c00                 | ' 
08c00                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c00                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
08c00                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c00                 | ' 
08c00                 | ' 
08c00                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c00                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
08c00                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
08c00                 | ' 
08c00                 | ' 
08c00                 | ' function expr() as integer 
08c00                 | _expr
08c00     07 4A 05 F6 | 	mov	COUNT_, #7
08c04     A8 00 A0 FD | 	call	#pushregs_
08c08                 | _expr_enter
08c08     57 00 00 FF 
08c0c     28 E4 05 F1 | 	add	objptr, ##44584
08c10     F2 24 02 FB | 	rdlong	local04, objptr
08c14     03 24 66 F0 | 	shl	local04, #3
08c18     02 00 00 FF 
08c1c     38 E4 85 F1 | 	sub	objptr, ##1080
08c20     F2 24 02 F1 | 	add	local04, objptr
08c24     04 24 06 F1 | 	add	local04, #4
08c28     12 27 02 FB | 	rdlong	local05, local04
08c2c                 | ' 
08c2c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
08c2c     FE 27 0E F2 | 	cmp	local05, #510 wz
08c30     54 00 00 FF 
08c34     F0 E5 85 F1 | 	sub	objptr, ##43504
08c38     C4 00 90 5D |  if_ne	jmp	#LR__0750
08c3c     1D 1E 06 F6 | 	mov	local01, #29
08c40     FF 22 06 F6 | 	mov	local03, #255
08c44     0F 29 02 F6 | 	mov	local06, local01
08c48     10 2B 02 F6 | 	mov	local07, local02
08c4c     11 1F 02 F6 | 	mov	local01, local03
08c50     6A 00 00 FF 
08c54     60 E4 05 F1 | 	add	objptr, ##54368
08c58     F2 26 02 FB | 	rdlong	local05, objptr
08c5c     13 25 02 F6 | 	mov	local04, local05
08c60     01 24 66 F0 | 	shl	local04, #1
08c64     13 25 02 F1 | 	add	local04, local05
08c68     02 24 66 F0 | 	shl	local04, #2
08c6c     03 00 00 FF 
08c70     00 E4 85 F1 | 	sub	objptr, ##1536
08c74     F2 24 02 F1 | 	add	local04, objptr
08c78     12 29 62 FC | 	wrlong	local06, local04
08c7c     03 00 00 FF 
08c80     00 E4 05 F1 | 	add	objptr, ##1536
08c84     F2 28 02 FB | 	rdlong	local06, objptr
08c88     14 27 02 F6 | 	mov	local05, local06
08c8c     01 26 66 F0 | 	shl	local05, #1
08c90     14 27 02 F1 | 	add	local05, local06
08c94     02 26 66 F0 | 	shl	local05, #2
08c98     03 00 00 FF 
08c9c     00 E4 85 F1 | 	sub	objptr, ##1536
08ca0     F2 26 02 F1 | 	add	local05, objptr
08ca4     04 26 06 F1 | 	add	local05, #4
08ca8     13 2B 62 FC | 	wrlong	local07, local05
08cac     03 00 00 FF 
08cb0     00 E4 05 F1 | 	add	objptr, ##1536
08cb4     F2 2A 02 FB | 	rdlong	local07, objptr
08cb8     15 29 02 F6 | 	mov	local06, local07
08cbc     01 28 66 F0 | 	shl	local06, #1
08cc0     15 29 02 F1 | 	add	local06, local07
08cc4     02 28 66 F0 | 	shl	local06, #2
08cc8     03 00 00 FF 
08ccc     00 E4 85 F1 | 	sub	objptr, ##1536
08cd0     F2 28 02 F1 | 	add	local06, objptr
08cd4     08 28 06 F1 | 	add	local06, #8
08cd8     14 1F 62 FC | 	wrlong	local01, local06
08cdc     03 00 00 FF 
08ce0     00 E4 05 F1 | 	add	objptr, ##1536
08ce4     F2 28 02 FB | 	rdlong	local06, objptr
08ce8     01 28 06 F1 | 	add	local06, #1
08cec     F2 28 62 FC | 	wrlong	local06, objptr
08cf0     6A 00 00 FF 
08cf4     60 E4 85 F1 | 	sub	objptr, ##54368
08cf8     1D FA 05 F6 | 	mov	result1, #29
08cfc     54 01 90 FD | 	jmp	#LR__0753
08d00                 | LR__0750
08d00     00 1E 06 F6 | 	mov	local01, #0
08d04     58 01 B0 FD | 	call	#_addsub
08d08     57 00 00 FF 
08d0c     28 E4 05 F1 | 	add	objptr, ##44584
08d10     F2 24 02 FB | 	rdlong	local04, objptr
08d14     03 24 66 F0 | 	shl	local04, #3
08d18     02 00 00 FF 
08d1c     38 E4 85 F1 | 	sub	objptr, ##1080
08d20     F2 24 02 F1 | 	add	local04, objptr
08d24     04 24 06 F1 | 	add	local04, #4
08d28     12 27 02 FB | 	rdlong	local05, local04
08d2c                 | ' t3.result.uresult=0
08d2c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08d2c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08d2c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
08d2c     54 00 00 FF 
08d30     F0 E5 85 F1 | 	sub	objptr, ##43504
08d34                 | LR__0751
08d34     1B 26 0E F2 | 	cmp	local05, #27 wz
08d38     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
08d3c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
08d40     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
08d44     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
08d48     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
08d4c     00 01 90 5D |  if_ne	jmp	#LR__0752
08d50     57 00 00 FF 
08d54     28 E4 05 F1 | 	add	objptr, ##44584
08d58     F2 28 02 FB | 	rdlong	local06, objptr
08d5c     01 28 06 F1 | 	add	local06, #1
08d60     F2 28 62 FC | 	wrlong	local06, objptr
08d64     57 00 00 FF 
08d68     28 E4 85 F1 | 	sub	objptr, ##44584
08d6c     F0 00 B0 FD | 	call	#_addsub
08d70     13 23 02 F6 | 	mov	local03, local05
08d74     0F 29 02 F6 | 	mov	local06, local01
08d78     10 2B 02 F6 | 	mov	local07, local02
08d7c     11 27 02 F6 | 	mov	local05, local03
08d80     6A 00 00 FF 
08d84     60 E4 05 F1 | 	add	objptr, ##54368
08d88     F2 24 02 FB | 	rdlong	local04, objptr
08d8c     12 FB 01 F6 | 	mov	result1, local04
08d90     01 FA 65 F0 | 	shl	result1, #1
08d94     12 FB 01 F1 | 	add	result1, local04
08d98     02 FA 65 F0 | 	shl	result1, #2
08d9c     03 00 00 FF 
08da0     00 E4 85 F1 | 	sub	objptr, ##1536
08da4     F2 FA 01 F1 | 	add	result1, objptr
08da8     FD 28 62 FC | 	wrlong	local06, result1
08dac     03 00 00 FF 
08db0     00 E4 05 F1 | 	add	objptr, ##1536
08db4     F2 28 02 FB | 	rdlong	local06, objptr
08db8     14 25 02 F6 | 	mov	local04, local06
08dbc     01 24 66 F0 | 	shl	local04, #1
08dc0     14 25 02 F1 | 	add	local04, local06
08dc4     02 24 66 F0 | 	shl	local04, #2
08dc8     03 00 00 FF 
08dcc     00 E4 85 F1 | 	sub	objptr, ##1536
08dd0     F2 24 02 F1 | 	add	local04, objptr
08dd4     04 24 06 F1 | 	add	local04, #4
08dd8     12 2B 62 FC | 	wrlong	local07, local04
08ddc     03 00 00 FF 
08de0     00 E4 05 F1 | 	add	objptr, ##1536
08de4     F2 2A 02 FB | 	rdlong	local07, objptr
08de8     15 29 02 F6 | 	mov	local06, local07
08dec     01 28 66 F0 | 	shl	local06, #1
08df0     15 29 02 F1 | 	add	local06, local07
08df4     02 28 66 F0 | 	shl	local06, #2
08df8     03 00 00 FF 
08dfc     00 E4 85 F1 | 	sub	objptr, ##1536
08e00     F2 28 02 F1 | 	add	local06, objptr
08e04     08 28 06 F1 | 	add	local06, #8
08e08     14 27 62 FC | 	wrlong	local05, local06
08e0c     03 00 00 FF 
08e10     00 E4 05 F1 | 	add	objptr, ##1536
08e14     F2 28 02 FB | 	rdlong	local06, objptr
08e18     01 28 06 F1 | 	add	local06, #1
08e1c     F2 28 62 FC | 	wrlong	local06, objptr
08e20     13 00 00 FF 
08e24     38 E4 85 F1 | 	sub	objptr, ##9784
08e28     F2 24 02 FB | 	rdlong	local04, objptr
08e2c     03 24 66 F0 | 	shl	local04, #3
08e30     02 00 00 FF 
08e34     38 E4 85 F1 | 	sub	objptr, ##1080
08e38     F2 24 02 F1 | 	add	local04, objptr
08e3c     04 24 06 F1 | 	add	local04, #4
08e40     12 27 02 FB | 	rdlong	local05, local04
08e44     54 00 00 FF 
08e48     F0 E5 85 F1 | 	sub	objptr, ##43504
08e4c     E4 FE 9F FD | 	jmp	#LR__0751
08e50                 | LR__0752
08e50                 | ' return 0  
08e50     00 FA 05 F6 | 	mov	result1, #0
08e54                 | LR__0753
08e54     A7 F0 03 F6 | 	mov	ptra, fp
08e58     B2 00 A0 FD | 	call	#popregs_
08e5c                 | _expr_ret
08e5c     2D 00 64 FD | 	ret
08e60                 | 
08e60                 | ' 
08e60                 | ' 
08e60                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
08e60                 | ' 
08e60                 | ' function addsub() as integer 
08e60                 | _addsub
08e60     07 4A 05 F6 | 	mov	COUNT_, #7
08e64     A8 00 A0 FD | 	call	#pushregs_
08e68                 | _addsub_enter
08e68     00 1E 06 F6 | 	mov	local01, #0
08e6c     50 01 B0 FD | 	call	#_muldiv
08e70     57 00 00 FF 
08e74     28 E4 05 F1 | 	add	objptr, ##44584
08e78     F2 24 02 FB | 	rdlong	local04, objptr
08e7c     03 24 66 F0 | 	shl	local04, #3
08e80     02 00 00 FF 
08e84     38 E4 85 F1 | 	sub	objptr, ##1080
08e88     F2 24 02 F1 | 	add	local04, objptr
08e8c     04 24 06 F1 | 	add	local04, #4
08e90     12 27 02 FB | 	rdlong	local05, local04
08e94                 | ' t3.result.uresult=0
08e94                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
08e94                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
08e94                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
08e94     54 00 00 FF 
08e98     F0 E5 85 F1 | 	sub	objptr, ##43504
08e9c                 | LR__0760
08e9c     01 26 0E F2 | 	cmp	local05, #1 wz
08ea0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
08ea4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
08ea8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
08eac     00 01 90 5D |  if_ne	jmp	#LR__0761
08eb0     57 00 00 FF 
08eb4     28 E4 05 F1 | 	add	objptr, ##44584
08eb8     F2 24 02 FB | 	rdlong	local04, objptr
08ebc     01 24 06 F1 | 	add	local04, #1
08ec0     F2 24 62 FC | 	wrlong	local04, objptr
08ec4     57 00 00 FF 
08ec8     28 E4 85 F1 | 	sub	objptr, ##44584
08ecc     F0 00 B0 FD | 	call	#_muldiv
08ed0     13 23 02 F6 | 	mov	local03, local05
08ed4     0F 29 02 F6 | 	mov	local06, local01
08ed8     10 2B 02 F6 | 	mov	local07, local02
08edc     11 27 02 F6 | 	mov	local05, local03
08ee0     6A 00 00 FF 
08ee4     60 E4 05 F1 | 	add	objptr, ##54368
08ee8     F2 24 02 FB | 	rdlong	local04, objptr
08eec     12 FB 01 F6 | 	mov	result1, local04
08ef0     01 FA 65 F0 | 	shl	result1, #1
08ef4     12 FB 01 F1 | 	add	result1, local04
08ef8     02 FA 65 F0 | 	shl	result1, #2
08efc     03 00 00 FF 
08f00     00 E4 85 F1 | 	sub	objptr, ##1536
08f04     F2 FA 01 F1 | 	add	result1, objptr
08f08     FD 28 62 FC | 	wrlong	local06, result1
08f0c     03 00 00 FF 
08f10     00 E4 05 F1 | 	add	objptr, ##1536
08f14     F2 28 02 FB | 	rdlong	local06, objptr
08f18     14 25 02 F6 | 	mov	local04, local06
08f1c     01 24 66 F0 | 	shl	local04, #1
08f20     14 25 02 F1 | 	add	local04, local06
08f24     02 24 66 F0 | 	shl	local04, #2
08f28     03 00 00 FF 
08f2c     00 E4 85 F1 | 	sub	objptr, ##1536
08f30     F2 24 02 F1 | 	add	local04, objptr
08f34     04 24 06 F1 | 	add	local04, #4
08f38     12 2B 62 FC | 	wrlong	local07, local04
08f3c     03 00 00 FF 
08f40     00 E4 05 F1 | 	add	objptr, ##1536
08f44     F2 2A 02 FB | 	rdlong	local07, objptr
08f48     15 29 02 F6 | 	mov	local06, local07
08f4c     01 28 66 F0 | 	shl	local06, #1
08f50     15 29 02 F1 | 	add	local06, local07
08f54     02 28 66 F0 | 	shl	local06, #2
08f58     03 00 00 FF 
08f5c     00 E4 85 F1 | 	sub	objptr, ##1536
08f60     F2 28 02 F1 | 	add	local06, objptr
08f64     08 28 06 F1 | 	add	local06, #8
08f68     14 27 62 FC | 	wrlong	local05, local06
08f6c     03 00 00 FF 
08f70     00 E4 05 F1 | 	add	objptr, ##1536
08f74     F2 28 02 FB | 	rdlong	local06, objptr
08f78     01 28 06 F1 | 	add	local06, #1
08f7c     F2 28 62 FC | 	wrlong	local06, objptr
08f80     13 00 00 FF 
08f84     38 E4 85 F1 | 	sub	objptr, ##9784
08f88     F2 24 02 FB | 	rdlong	local04, objptr
08f8c     03 24 66 F0 | 	shl	local04, #3
08f90     02 00 00 FF 
08f94     38 E4 85 F1 | 	sub	objptr, ##1080
08f98     F2 24 02 F1 | 	add	local04, objptr
08f9c     04 24 06 F1 | 	add	local04, #4
08fa0     12 27 02 FB | 	rdlong	local05, local04
08fa4     54 00 00 FF 
08fa8     F0 E5 85 F1 | 	sub	objptr, ##43504
08fac     EC FE 9F FD | 	jmp	#LR__0760
08fb0                 | LR__0761
08fb0                 | '   return 0
08fb0     00 FA 05 F6 | 	mov	result1, #0
08fb4     A7 F0 03 F6 | 	mov	ptra, fp
08fb8     B2 00 A0 FD | 	call	#popregs_
08fbc                 | _addsub_ret
08fbc     2D 00 64 FD | 	ret
08fc0                 | 
08fc0                 | ' 
08fc0                 | ' sub muldiv()
08fc0                 | _muldiv
08fc0     08 4A 05 F6 | 	mov	COUNT_, #8
08fc4     A8 00 A0 FD | 	call	#pushregs_
08fc8                 | _muldiv_enter
08fc8     00 1E 06 F6 | 	mov	local01, #0
08fcc     58 01 B0 FD | 	call	#_getvalue
08fd0     57 00 00 FF 
08fd4     28 E4 05 F1 | 	add	objptr, ##44584
08fd8     F2 24 02 FB | 	rdlong	local04, objptr
08fdc     03 24 66 F0 | 	shl	local04, #3
08fe0     02 00 00 FF 
08fe4     38 E4 85 F1 | 	sub	objptr, ##1080
08fe8     F2 24 02 F1 | 	add	local04, objptr
08fec     04 24 06 F1 | 	add	local04, #4
08ff0     12 27 02 FB | 	rdlong	local05, local04
08ff4                 | ' t3.result.uresult=0
08ff4                 | ' getvalue()    
08ff4                 | ' op = lparts(ct).token
08ff4                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
08ff4     54 00 00 FF 
08ff8     F0 E5 85 F1 | 	sub	objptr, ##43504
08ffc                 | LR__0770
08ffc     05 26 0E F2 | 	cmp	local05, #5 wz
09000     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09004     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09008     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0900c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09010     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09014     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09018     00 01 90 5D |  if_ne	jmp	#LR__0771
0901c     57 00 00 FF 
09020     28 E4 05 F1 | 	add	objptr, ##44584
09024     F2 24 02 FB | 	rdlong	local04, objptr
09028     01 24 06 F1 | 	add	local04, #1
0902c     F2 24 62 FC | 	wrlong	local04, objptr
09030     57 00 00 FF 
09034     28 E4 85 F1 | 	sub	objptr, ##44584
09038     EC 00 B0 FD | 	call	#_getvalue
0903c     13 23 02 F6 | 	mov	local03, local05
09040     0F 29 02 F6 | 	mov	local06, local01
09044     10 2B 02 F6 | 	mov	local07, local02
09048     11 27 02 F6 | 	mov	local05, local03
0904c     6A 00 00 FF 
09050     60 E4 05 F1 | 	add	objptr, ##54368
09054     F2 24 02 FB | 	rdlong	local04, objptr
09058     12 2D 02 F6 | 	mov	local08, local04
0905c     01 2C 66 F0 | 	shl	local08, #1
09060     12 2D 02 F1 | 	add	local08, local04
09064     02 2C 66 F0 | 	shl	local08, #2
09068     03 00 00 FF 
0906c     00 E4 85 F1 | 	sub	objptr, ##1536
09070     F2 2C 02 F1 | 	add	local08, objptr
09074     16 29 62 FC | 	wrlong	local06, local08
09078     03 00 00 FF 
0907c     00 E4 05 F1 | 	add	objptr, ##1536
09080     F2 2C 02 FB | 	rdlong	local08, objptr
09084     16 29 02 F6 | 	mov	local06, local08
09088     01 28 66 F0 | 	shl	local06, #1
0908c     16 29 02 F1 | 	add	local06, local08
09090     02 28 66 F0 | 	shl	local06, #2
09094     03 00 00 FF 
09098     00 E4 85 F1 | 	sub	objptr, ##1536
0909c     F2 28 02 F1 | 	add	local06, objptr
090a0     04 28 06 F1 | 	add	local06, #4
090a4     14 2B 62 FC | 	wrlong	local07, local06
090a8     03 00 00 FF 
090ac     00 E4 05 F1 | 	add	objptr, ##1536
090b0     F2 2C 02 FB | 	rdlong	local08, objptr
090b4     16 2B 02 F6 | 	mov	local07, local08
090b8     01 2A 66 F0 | 	shl	local07, #1
090bc     16 2B 02 F1 | 	add	local07, local08
090c0     02 2A 66 F0 | 	shl	local07, #2
090c4     03 00 00 FF 
090c8     00 E4 85 F1 | 	sub	objptr, ##1536
090cc     F2 2A 02 F1 | 	add	local07, objptr
090d0     08 2A 06 F1 | 	add	local07, #8
090d4     15 27 62 FC | 	wrlong	local05, local07
090d8     03 00 00 FF 
090dc     00 E4 05 F1 | 	add	objptr, ##1536
090e0     F2 28 02 FB | 	rdlong	local06, objptr
090e4     01 28 06 F1 | 	add	local06, #1
090e8     F2 28 62 FC | 	wrlong	local06, objptr
090ec     13 00 00 FF 
090f0     38 E4 85 F1 | 	sub	objptr, ##9784
090f4     F2 24 02 FB | 	rdlong	local04, objptr
090f8     03 24 66 F0 | 	shl	local04, #3
090fc     02 00 00 FF 
09100     38 E4 85 F1 | 	sub	objptr, ##1080
09104     F2 24 02 F1 | 	add	local04, objptr
09108     04 24 06 F1 | 	add	local04, #4
0910c     12 27 02 FB | 	rdlong	local05, local04
09110     54 00 00 FF 
09114     F0 E5 85 F1 | 	sub	objptr, ##43504
09118     E0 FE 9F FD | 	jmp	#LR__0770
0911c                 | LR__0771
0911c     A7 F0 03 F6 | 	mov	ptra, fp
09120     B2 00 A0 FD | 	call	#popregs_
09124                 | _muldiv_ret
09124     2D 00 64 FD | 	ret
09128                 | 
09128                 | ' 
09128                 | ' sub getvalue() 
09128                 | _getvalue
09128     0B 4A 05 F6 | 	mov	COUNT_, #11
0912c     A8 00 A0 FD | 	call	#pushregs_
09130                 | _getvalue_enter
09130     01 24 06 F6 | 	mov	local04, #1
09134     00 1E 06 F6 | 	mov	local01, #0
09138     1D 22 06 F6 | 	mov	local03, #29
0913c     57 00 00 FF 
09140     28 E4 05 F1 | 	add	objptr, ##44584
09144     F2 16 02 FB | 	rdlong	arg03, objptr
09148     03 16 66 F0 | 	shl	arg03, #3
0914c     02 00 00 FF 
09150     38 E4 85 F1 | 	sub	objptr, ##1080
09154     F2 16 02 F1 | 	add	arg03, objptr
09158     04 16 06 F1 | 	add	arg03, #4
0915c     0B 27 02 FB | 	rdlong	local05, arg03
09160                 | ' m=1
09160                 | ' t1.result.uresult=0: t1.result_type=result_uint
09160                 | ' op=lparts(ct).token
09160                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09160     02 26 0E F2 | 	cmp	local05, #2 wz
09164     54 00 00 FF 
09168     F0 E5 85 F1 | 	sub	objptr, ##43504
0916c     38 00 90 5D |  if_ne	jmp	#LR__0780
09170     01 24 66 F6 | 	neg	local04, #1
09174     57 00 00 FF 
09178     28 E4 05 F1 | 	add	objptr, ##44584
0917c     F2 26 02 FB | 	rdlong	local05, objptr
09180     01 26 06 F1 | 	add	local05, #1
09184     F2 26 62 FC | 	wrlong	local05, objptr
09188     03 26 66 F0 | 	shl	local05, #3
0918c     02 00 00 FF 
09190     38 E4 85 F1 | 	sub	objptr, ##1080
09194     F2 26 02 F1 | 	add	local05, objptr
09198     04 26 06 F1 | 	add	local05, #4
0919c     13 27 02 FB | 	rdlong	local05, local05
091a0     54 00 00 FF 
091a4     F0 E5 85 F1 | 	sub	objptr, ##43504
091a8                 | LR__0780
091a8                 | ' select case op
091a8     01 00 00 FF 
091ac     00 26 0E F2 | 	cmp	local05, ##512 wz
091b0     3C 00 90 AD |  if_e	jmp	#LR__0781
091b4     01 00 00 FF 
091b8     01 26 0E F2 | 	cmp	local05, ##513 wz
091bc     88 01 90 AD |  if_e	jmp	#LR__0784
091c0     01 00 00 FF 
091c4     02 26 0E F2 | 	cmp	local05, ##514 wz
091c8     84 02 90 AD |  if_e	jmp	#LR__0785
091cc     01 00 00 FF 
091d0     03 26 0E F2 | 	cmp	local05, ##515 wz
091d4     E8 03 90 AD |  if_e	jmp	#LR__0788
091d8     01 00 00 FF 
091dc     04 26 0E F2 | 	cmp	local05, ##516 wz
091e0     B8 05 90 AD |  if_e	jmp	#LR__0793
091e4     15 26 0E F2 | 	cmp	local05, #21 wz
091e8     D8 05 90 AD |  if_e	jmp	#LR__0794
091ec     48 06 90 FD | 	jmp	#LR__0795
091f0                 | LR__0781
091f0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
091f0     01 24 0E F2 | 	cmp	local04, #1 wz
091f4     3C 00 90 5D |  if_ne	jmp	#LR__0782
091f8     57 00 00 FF 
091fc     28 E4 05 F1 | 	add	objptr, ##44584
09200     F2 26 02 FB | 	rdlong	local05, objptr
09204     03 26 66 F0 | 	shl	local05, #3
09208     02 00 00 FF 
0920c     38 E4 85 F1 | 	sub	objptr, ##1080
09210     F2 26 02 F1 | 	add	local05, objptr
09214     13 13 02 FB | 	rdlong	arg01, local05
09218     00 14 06 F6 | 	mov	arg02, #0
0921c     54 00 00 FF 
09220     F0 E5 85 F1 | 	sub	objptr, ##43504
09224     0C 5E B1 FD | 	call	#__system____builtin_atoi
09228     FD 24 02 FD | 	qmul	local04, result1
0922c     18 1E 62 FD | 	getqx	local01
09230     1C 22 06 F6 | 	mov	local03, #28
09234                 | LR__0782
09234                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09234     FF FF 7F FF 
09238     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0923c     3C 00 90 5D |  if_ne	jmp	#LR__0783
09240     57 00 00 FF 
09244     28 E4 05 F1 | 	add	objptr, ##44584
09248     F2 26 02 FB | 	rdlong	local05, objptr
0924c     03 26 66 F0 | 	shl	local05, #3
09250     02 00 00 FF 
09254     38 E4 85 F1 | 	sub	objptr, ##1080
09258     F2 26 02 F1 | 	add	local05, objptr
0925c     13 13 02 FB | 	rdlong	arg01, local05
09260     00 14 06 F6 | 	mov	arg02, #0
09264     54 00 00 FF 
09268     F0 E5 85 F1 | 	sub	objptr, ##43504
0926c     C4 5D B1 FD | 	call	#__system____builtin_atoi
09270     FD 24 02 FD | 	qmul	local04, result1
09274     18 1E 62 FD | 	getqx	local01
09278     1C 22 06 F6 | 	mov	local03, #28
0927c                 | LR__0783
0927c     0F 29 02 F6 | 	mov	local06, local01
09280     10 2B 02 F6 | 	mov	local07, local02
09284     11 27 02 F6 | 	mov	local05, local03
09288     6A 00 00 FF 
0928c     60 E4 05 F1 | 	add	objptr, ##54368
09290     F2 1E 02 FB | 	rdlong	local01, objptr
09294     0F 25 02 F6 | 	mov	local04, local01
09298     01 24 66 F0 | 	shl	local04, #1
0929c     0F 25 02 F1 | 	add	local04, local01
092a0     02 24 66 F0 | 	shl	local04, #2
092a4     03 00 00 FF 
092a8     00 E4 85 F1 | 	sub	objptr, ##1536
092ac     F2 24 02 F1 | 	add	local04, objptr
092b0     12 29 62 FC | 	wrlong	local06, local04
092b4     03 00 00 FF 
092b8     00 E4 05 F1 | 	add	objptr, ##1536
092bc     F2 28 02 FB | 	rdlong	local06, objptr
092c0     14 1F 02 F6 | 	mov	local01, local06
092c4     01 1E 66 F0 | 	shl	local01, #1
092c8     14 1F 02 F1 | 	add	local01, local06
092cc     02 1E 66 F0 | 	shl	local01, #2
092d0     03 00 00 FF 
092d4     00 E4 85 F1 | 	sub	objptr, ##1536
092d8     F2 1E 02 F1 | 	add	local01, objptr
092dc     04 1E 06 F1 | 	add	local01, #4
092e0     0F 2B 62 FC | 	wrlong	local07, local01
092e4     03 00 00 FF 
092e8     00 E4 05 F1 | 	add	objptr, ##1536
092ec     F2 2A 02 FB | 	rdlong	local07, objptr
092f0     15 29 02 F6 | 	mov	local06, local07
092f4     01 28 66 F0 | 	shl	local06, #1
092f8     15 29 02 F1 | 	add	local06, local07
092fc     02 28 66 F0 | 	shl	local06, #2
09300     03 00 00 FF 
09304     00 E4 85 F1 | 	sub	objptr, ##1536
09308     F2 28 02 F1 | 	add	local06, objptr
0930c     08 28 06 F1 | 	add	local06, #8
09310     14 27 62 FC | 	wrlong	local05, local06
09314     03 00 00 FF 
09318     00 E4 05 F1 | 	add	objptr, ##1536
0931c     F2 28 02 FB | 	rdlong	local06, objptr
09320     01 28 06 F1 | 	add	local06, #1
09324     F2 28 62 FC | 	wrlong	local06, objptr
09328     13 00 00 FF 
0932c     38 E4 85 F1 | 	sub	objptr, ##9784
09330     F2 28 02 FB | 	rdlong	local06, objptr
09334     01 28 06 F1 | 	add	local06, #1
09338     F2 28 62 FC | 	wrlong	local06, objptr
0933c     57 00 00 FF 
09340     28 E4 85 F1 | 	sub	objptr, ##44584
09344     14 05 90 FD | 	jmp	#LR__0796
09348                 | LR__0784
09348     57 00 00 FF 
0934c     28 E4 05 F1 | 	add	objptr, ##44584
09350     F2 28 02 FB | 	rdlong	local06, objptr
09354     03 28 66 F0 | 	shl	local06, #3
09358     02 00 00 FF 
0935c     38 E4 85 F1 | 	sub	objptr, ##1080
09360     F2 28 02 F1 | 	add	local06, objptr
09364     14 13 02 FB | 	rdlong	arg01, local06
09368     00 14 06 F6 | 	mov	arg02, #0
0936c     54 00 00 FF 
09370     F0 E5 85 F1 | 	sub	objptr, ##43504
09374     BC 5C B1 FD | 	call	#__system____builtin_atoi
09378     FD 24 02 FD | 	qmul	local04, result1
0937c     6A 00 00 FF 
09380     60 E4 05 F1 | 	add	objptr, ##54368
09384     F2 28 02 FB | 	rdlong	local06, objptr
09388     14 2D 02 F6 | 	mov	local08, local06
0938c     01 2C 66 F0 | 	shl	local08, #1
09390     14 2D 02 F1 | 	add	local08, local06
09394     02 2C 66 F0 | 	shl	local08, #2
09398     03 00 00 FF 
0939c     00 E4 85 F1 | 	sub	objptr, ##1536
093a0     F2 2C 02 F1 | 	add	local08, objptr
093a4     03 00 00 FF 
093a8     00 E4 05 F1 | 	add	objptr, ##1536
093ac     18 1E 62 FD | 	getqx	local01
093b0     1C 22 06 F6 | 	mov	local03, #28
093b4     0F 29 02 F6 | 	mov	local06, local01
093b8     10 2B 02 F6 | 	mov	local07, local02
093bc     16 29 62 FC | 	wrlong	local06, local08
093c0     11 2D 02 F6 | 	mov	local08, local03
093c4     F2 28 02 FB | 	rdlong	local06, objptr
093c8     14 27 02 F6 | 	mov	local05, local06
093cc     01 26 66 F0 | 	shl	local05, #1
093d0     14 27 02 F1 | 	add	local05, local06
093d4     02 26 66 F0 | 	shl	local05, #2
093d8     03 00 00 FF 
093dc     00 E4 85 F1 | 	sub	objptr, ##1536
093e0     F2 26 02 F1 | 	add	local05, objptr
093e4     04 26 06 F1 | 	add	local05, #4
093e8     13 2B 62 FC | 	wrlong	local07, local05
093ec     03 00 00 FF 
093f0     00 E4 05 F1 | 	add	objptr, ##1536
093f4     F2 2A 02 FB | 	rdlong	local07, objptr
093f8     15 29 02 F6 | 	mov	local06, local07
093fc     01 28 66 F0 | 	shl	local06, #1
09400     15 29 02 F1 | 	add	local06, local07
09404     02 28 66 F0 | 	shl	local06, #2
09408     03 00 00 FF 
0940c     00 E4 85 F1 | 	sub	objptr, ##1536
09410     F2 28 02 F1 | 	add	local06, objptr
09414     08 28 06 F1 | 	add	local06, #8
09418     14 2D 62 FC | 	wrlong	local08, local06
0941c     03 00 00 FF 
09420     00 E4 05 F1 | 	add	objptr, ##1536
09424     F2 28 02 FB | 	rdlong	local06, objptr
09428     01 28 06 F1 | 	add	local06, #1
0942c     F2 28 62 FC | 	wrlong	local06, objptr
09430     13 00 00 FF 
09434     38 E4 85 F1 | 	sub	objptr, ##9784
09438     F2 28 02 FB | 	rdlong	local06, objptr
0943c     01 28 06 F1 | 	add	local06, #1
09440     F2 28 62 FC | 	wrlong	local06, objptr
09444     57 00 00 FF 
09448     28 E4 85 F1 | 	sub	objptr, ##44584
0944c     0C 04 90 FD | 	jmp	#LR__0796
09450                 | LR__0785
09450                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09450     01 24 0E F2 | 	cmp	local04, #1 wz
09454     48 00 90 5D |  if_ne	jmp	#LR__0786
09458     00 C0 1F FF 
0945c     00 28 06 F6 | 	mov	local06, ##1065353216
09460     57 00 00 FF 
09464     28 E4 05 F1 | 	add	objptr, ##44584
09468     F2 2C 02 FB | 	rdlong	local08, objptr
0946c     03 2C 66 F0 | 	shl	local08, #3
09470     02 00 00 FF 
09474     38 E4 85 F1 | 	sub	objptr, ##1080
09478     F2 2C 02 F1 | 	add	local08, objptr
0947c     16 13 02 FB | 	rdlong	arg01, local08
09480     54 00 00 FF 
09484     F0 E5 85 F1 | 	sub	objptr, ##43504
09488     18 5D B1 FD | 	call	#__system____builtin_atof
0948c     FD 14 02 F6 | 	mov	arg02, result1
09490     14 13 02 F6 | 	mov	arg01, local06
09494     24 55 B1 FD | 	call	#__system___float_mul
09498     FD 1E 02 F6 | 	mov	local01, result1
0949c     1E 22 06 F6 | 	mov	local03, #30
094a0                 | LR__0786
094a0                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
094a0     FF FF 7F FF 
094a4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
094a8     48 00 90 5D |  if_ne	jmp	#LR__0787
094ac     00 C0 5F FF 
094b0     00 28 06 F6 | 	mov	local06, ##-1082130432
094b4     57 00 00 FF 
094b8     28 E4 05 F1 | 	add	objptr, ##44584
094bc     F2 2C 02 FB | 	rdlong	local08, objptr
094c0     03 2C 66 F0 | 	shl	local08, #3
094c4     02 00 00 FF 
094c8     38 E4 85 F1 | 	sub	objptr, ##1080
094cc     F2 2C 02 F1 | 	add	local08, objptr
094d0     16 13 02 FB | 	rdlong	arg01, local08
094d4     54 00 00 FF 
094d8     F0 E5 85 F1 | 	sub	objptr, ##43504
094dc     C4 5C B1 FD | 	call	#__system____builtin_atof
094e0     FD 14 02 F6 | 	mov	arg02, result1
094e4     14 13 02 F6 | 	mov	arg01, local06
094e8     D0 54 B1 FD | 	call	#__system___float_mul
094ec     FD 1E 02 F6 | 	mov	local01, result1
094f0     1E 22 06 F6 | 	mov	local03, #30
094f4                 | LR__0787
094f4     0F 29 02 F6 | 	mov	local06, local01
094f8     10 2B 02 F6 | 	mov	local07, local02
094fc     11 27 02 F6 | 	mov	local05, local03
09500     6A 00 00 FF 
09504     60 E4 05 F1 | 	add	objptr, ##54368
09508     F2 1E 02 FB | 	rdlong	local01, objptr
0950c     0F 2D 02 F6 | 	mov	local08, local01
09510     01 2C 66 F0 | 	shl	local08, #1
09514     0F 2D 02 F1 | 	add	local08, local01
09518     02 2C 66 F0 | 	shl	local08, #2
0951c     03 00 00 FF 
09520     00 E4 85 F1 | 	sub	objptr, ##1536
09524     F2 2C 02 F1 | 	add	local08, objptr
09528     16 29 62 FC | 	wrlong	local06, local08
0952c     03 00 00 FF 
09530     00 E4 05 F1 | 	add	objptr, ##1536
09534     F2 2C 02 FB | 	rdlong	local08, objptr
09538     16 29 02 F6 | 	mov	local06, local08
0953c     01 28 66 F0 | 	shl	local06, #1
09540     16 29 02 F1 | 	add	local06, local08
09544     02 28 66 F0 | 	shl	local06, #2
09548     03 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1536
09550     F2 28 02 F1 | 	add	local06, objptr
09554     04 28 06 F1 | 	add	local06, #4
09558     14 2B 62 FC | 	wrlong	local07, local06
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 2C 02 FB | 	rdlong	local08, objptr
09568     16 2B 02 F6 | 	mov	local07, local08
0956c     01 2A 66 F0 | 	shl	local07, #1
09570     16 2B 02 F1 | 	add	local07, local08
09574     02 2A 66 F0 | 	shl	local07, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 2A 02 F1 | 	add	local07, objptr
09584     08 2A 06 F1 | 	add	local07, #8
09588     15 27 62 FC | 	wrlong	local05, local07
0958c     03 00 00 FF 
09590     00 E4 05 F1 | 	add	objptr, ##1536
09594     F2 28 02 FB | 	rdlong	local06, objptr
09598     01 28 06 F1 | 	add	local06, #1
0959c     F2 28 62 FC | 	wrlong	local06, objptr
095a0     13 00 00 FF 
095a4     38 E4 85 F1 | 	sub	objptr, ##9784
095a8     F2 28 02 FB | 	rdlong	local06, objptr
095ac     01 28 06 F1 | 	add	local06, #1
095b0     F2 28 62 FC | 	wrlong	local06, objptr
095b4     57 00 00 FF 
095b8     28 E4 85 F1 | 	sub	objptr, ##44584
095bc     9C 02 90 FD | 	jmp	#LR__0796
095c0                 | LR__0788
095c0     1F 22 06 F6 | 	mov	local03, #31
095c4     57 00 00 FF 
095c8     28 E4 05 F1 | 	add	objptr, ##44584
095cc     F2 16 02 FB | 	rdlong	arg03, objptr
095d0     03 16 66 F0 | 	shl	arg03, #3
095d4     02 00 00 FF 
095d8     38 E4 85 F1 | 	sub	objptr, ##1080
095dc     F2 16 02 F1 | 	add	arg03, objptr
095e0     0B 13 02 FB | 	rdlong	arg01, arg03
095e4     54 00 00 FF 
095e8     F0 E5 85 F1 | 	sub	objptr, ##43504
095ec     09 2F 02 F6 | 	mov	local09, arg01
095f0     97 06 48 FB | 	callpa	#(@LR__0790-@LR__0789)>>2,fcache_load_ptr_
095f4                 | LR__0789
095f4     17 FB C9 FA | 	rdbyte	result1, local09 wz
095f8     01 2E 06 51 |  if_ne	add	local09, #1
095fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0789
09600                 | LR__0790
09600     09 2F 82 F1 | 	sub	local09, arg01
09604     17 FB 01 F6 | 	mov	result1, local09
09608     7B 00 00 FF 
0960c     A8 E4 05 F1 | 	add	objptr, ##63144
09610     F2 FA 61 FC | 	wrlong	result1, objptr
09614     4C E4 85 F1 | 	sub	objptr, #76
09618     F2 12 02 FB | 	rdlong	arg01, objptr
0961c     FD 12 82 F1 | 	sub	arg01, result1
09620     04 12 86 F1 | 	sub	arg01, #4
09624     03 12 26 F5 | 	andn	arg01, #3
09628     F2 12 62 FC | 	wrlong	arg01, objptr
0962c     4C E4 05 F1 | 	add	objptr, #76
09630     F2 14 02 FB | 	rdlong	arg02, objptr
09634     7B 00 00 FF 
09638     A8 E4 85 F1 | 	sub	objptr, ##63144
0963c     7C F2 B0 FD | 	call	#_pslpoke
09640                 | '     pslpoke memtop,l
09640                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09640     01 30 06 F6 | 	mov	local10, #1
09644     7B 00 00 FF 
09648     A8 E4 05 F1 | 	add	objptr, ##63144
0964c     F2 32 02 FB | 	rdlong	local11, objptr
09650     7B 00 00 FF 
09654     A8 E4 85 F1 | 	sub	objptr, ##63144
09658     01 32 06 F1 | 	add	local11, #1
0965c                 | LR__0791
0965c     19 31 52 F2 | 	cmps	local10, local11 wc
09660     5C 00 90 3D |  if_ae	jmp	#LR__0792
09664     7B 00 00 FF 
09668     5C E4 05 F1 | 	add	objptr, ##63068
0966c     F2 2A 02 FB | 	rdlong	local07, objptr
09670     03 2A 06 F1 | 	add	local07, #3
09674     18 2B 02 F1 | 	add	local07, local10
09678     24 00 00 FF 
0967c     34 E4 85 F1 | 	sub	objptr, ##18484
09680     F2 2C 02 FB | 	rdlong	local08, objptr
09684     03 2C 66 F0 | 	shl	local08, #3
09688     02 00 00 FF 
0968c     38 E4 85 F1 | 	sub	objptr, ##1080
09690     F2 2C 02 F1 | 	add	local08, objptr
09694     16 13 02 FB | 	rdlong	arg01, local08
09698     18 15 02 F6 | 	mov	arg02, local10
0969c     01 16 06 F6 | 	mov	arg03, #1
096a0     54 00 00 FF 
096a4     F0 E5 85 F1 | 	sub	objptr, ##43504
096a8     F0 48 B1 FD | 	call	#__system__Mid_S
096ac     FD 14 C2 FA | 	rdbyte	arg02, result1
096b0     15 13 02 F6 | 	mov	arg01, local07
096b4     94 F2 B0 FD | 	call	#_pspoke
096b8     01 30 06 F1 | 	add	local10, #1
096bc     9C FF 9F FD | 	jmp	#LR__0791
096c0                 | LR__0792
096c0     7B 00 00 FF 
096c4     5C E4 05 F1 | 	add	objptr, ##63068
096c8     F2 1E 02 FB | 	rdlong	local01, objptr
096cc     2B 22 06 F6 | 	mov	local03, #43
096d0     0F 29 02 F6 | 	mov	local06, local01
096d4     10 2B 02 F6 | 	mov	local07, local02
096d8     11 33 02 F6 | 	mov	local11, local03
096dc     10 00 00 FF 
096e0     FC E5 85 F1 | 	sub	objptr, ##8700
096e4     F2 30 02 FB | 	rdlong	local10, objptr
096e8     18 2D 02 F6 | 	mov	local08, local10
096ec     01 2C 66 F0 | 	shl	local08, #1
096f0     18 2D 02 F1 | 	add	local08, local10
096f4     02 2C 66 F0 | 	shl	local08, #2
096f8     03 00 00 FF 
096fc     00 E4 85 F1 | 	sub	objptr, ##1536
09700     F2 2C 02 F1 | 	add	local08, objptr
09704     16 29 62 FC | 	wrlong	local06, local08
09708     03 00 00 FF 
0970c     00 E4 05 F1 | 	add	objptr, ##1536
09710     F2 30 02 FB | 	rdlong	local10, objptr
09714     18 2D 02 F6 | 	mov	local08, local10
09718     01 2C 66 F0 | 	shl	local08, #1
0971c     18 2D 02 F1 | 	add	local08, local10
09720     02 2C 66 F0 | 	shl	local08, #2
09724     03 00 00 FF 
09728     00 E4 85 F1 | 	sub	objptr, ##1536
0972c     F2 2C 02 F1 | 	add	local08, objptr
09730     04 2C 06 F1 | 	add	local08, #4
09734     16 2B 62 FC | 	wrlong	local07, local08
09738     03 00 00 FF 
0973c     00 E4 05 F1 | 	add	objptr, ##1536
09740     F2 30 02 FB | 	rdlong	local10, objptr
09744     18 2D 02 F6 | 	mov	local08, local10
09748     01 2C 66 F0 | 	shl	local08, #1
0974c     18 2D 02 F1 | 	add	local08, local10
09750     02 2C 66 F0 | 	shl	local08, #2
09754     03 00 00 FF 
09758     00 E4 85 F1 | 	sub	objptr, ##1536
0975c     F2 2C 02 F1 | 	add	local08, objptr
09760     08 2C 06 F1 | 	add	local08, #8
09764     16 33 62 FC | 	wrlong	local11, local08
09768     03 00 00 FF 
0976c     00 E4 05 F1 | 	add	objptr, ##1536
09770     F2 28 02 FB | 	rdlong	local06, objptr
09774     01 28 06 F1 | 	add	local06, #1
09778     F2 28 62 FC | 	wrlong	local06, objptr
0977c     13 00 00 FF 
09780     38 E4 85 F1 | 	sub	objptr, ##9784
09784     F2 28 02 FB | 	rdlong	local06, objptr
09788     01 28 06 F1 | 	add	local06, #1
0978c     F2 28 62 FC | 	wrlong	local06, objptr
09790     57 00 00 FF 
09794     28 E4 85 F1 | 	sub	objptr, ##44584
09798     C0 00 90 FD | 	jmp	#LR__0796
0979c                 | LR__0793
0979c     12 13 02 F6 | 	mov	arg01, local04
097a0     B8 03 B0 FD | 	call	#_getvar
097a4     57 00 00 FF 
097a8     28 E4 05 F1 | 	add	objptr, ##44584
097ac     F2 28 02 FB | 	rdlong	local06, objptr
097b0     01 28 06 F1 | 	add	local06, #1
097b4     F2 28 62 FC | 	wrlong	local06, objptr
097b8     57 00 00 FF 
097bc     28 E4 85 F1 | 	sub	objptr, ##44584
097c0     98 00 90 FD | 	jmp	#LR__0796
097c4                 | LR__0794
097c4     57 00 00 FF 
097c8     28 E4 05 F1 | 	add	objptr, ##44584
097cc     F2 28 02 FB | 	rdlong	local06, objptr
097d0     01 28 06 F1 | 	add	local06, #1
097d4     F2 28 62 FC | 	wrlong	local06, objptr
097d8     57 00 00 FF 
097dc     28 E4 85 F1 | 	sub	objptr, ##44584
097e0     1C F4 BF FD | 	call	#_expr
097e4                 | '     ct+=1
097e4                 | '     expr() 
097e4                 | '     if lparts(ct).token=token_rpar then ct+=1
097e4     57 00 00 FF 
097e8     28 E4 05 F1 | 	add	objptr, ##44584
097ec     F2 32 02 FB | 	rdlong	local11, objptr
097f0     03 32 66 F0 | 	shl	local11, #3
097f4     02 00 00 FF 
097f8     38 E4 85 F1 | 	sub	objptr, ##1080
097fc     F2 32 02 F1 | 	add	local11, objptr
09800     04 32 06 F1 | 	add	local11, #4
09804     19 33 02 FB | 	rdlong	local11, local11
09808     14 32 0E F2 | 	cmp	local11, #20 wz
0980c     54 00 00 FF 
09810     F0 E5 85 F1 | 	sub	objptr, ##43504
09814     44 00 90 5D |  if_ne	jmp	#LR__0796
09818     57 00 00 FF 
0981c     28 E4 05 F1 | 	add	objptr, ##44584
09820     F2 28 02 FB | 	rdlong	local06, objptr
09824     01 28 06 F1 | 	add	local06, #1
09828     F2 28 62 FC | 	wrlong	local06, objptr
0982c     57 00 00 FF 
09830     28 E4 85 F1 | 	sub	objptr, ##44584
09834     24 00 90 FD | 	jmp	#LR__0796
09838                 | LR__0795
09838     12 13 02 F6 | 	mov	arg01, local04
0983c     28 00 B0 FD | 	call	#_getfun
09840     57 00 00 FF 
09844     28 E4 05 F1 | 	add	objptr, ##44584
09848     F2 28 02 FB | 	rdlong	local06, objptr
0984c     01 28 06 F1 | 	add	local06, #1
09850     F2 28 62 FC | 	wrlong	local06, objptr
09854     57 00 00 FF 
09858     28 E4 85 F1 | 	sub	objptr, ##44584
0985c                 | LR__0796
0985c     A7 F0 03 F6 | 	mov	ptra, fp
09860     B2 00 A0 FD | 	call	#popregs_
09864                 | _getvalue_ret
09864     2D 00 64 FD | 	ret
09868                 | 
09868                 | ' 
09868                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
09868                 | _getfun
09868     0A 4A 05 F6 | 	mov	COUNT_, #10
0986c     A8 00 A0 FD | 	call	#pushregs_
09870                 | _getfun_enter
09870     09 25 02 F6 | 	mov	local04, arg01
09874     57 00 00 FF 
09878     28 E4 05 F1 | 	add	objptr, ##44584
0987c     F2 26 02 FB | 	rdlong	local05, objptr
09880     13 29 02 F6 | 	mov	local06, local05
09884     00 2A 06 F6 | 	mov	local07, #0
09888                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
09888                 | ' oldct=ct
09888                 | ' numpar=0
09888                 | '   
09888                 | ' if lparts(ct+1).token=token_lpar then
09888     01 26 06 F1 | 	add	local05, #1
0988c     03 26 66 F0 | 	shl	local05, #3
09890     02 00 00 FF 
09894     38 E4 85 F1 | 	sub	objptr, ##1080
09898     F2 26 02 F1 | 	add	local05, objptr
0989c     04 26 06 F1 | 	add	local05, #4
098a0     13 27 02 FB | 	rdlong	local05, local05
098a4     15 26 0E F2 | 	cmp	local05, #21 wz
098a8     54 00 00 FF 
098ac     F0 E5 85 F1 | 	sub	objptr, ##43504
098b0     08 01 90 5D |  if_ne	jmp	#LR__0804
098b4     57 00 00 FF 
098b8     28 E4 05 F1 | 	add	objptr, ##44584
098bc     F2 2C 02 FB | 	rdlong	local08, objptr
098c0     01 2C 06 F1 | 	add	local08, #1
098c4     F2 2C 62 FC | 	wrlong	local08, objptr
098c8     57 00 00 FF 
098cc     28 E4 85 F1 | 	sub	objptr, ##44584
098d0                 | '   ct+=1 											' omit this lpar, this is for expr list
098d0                 | '   do
098d0                 | LR__0800
098d0     57 00 00 FF 
098d4     28 E4 05 F1 | 	add	objptr, ##44584
098d8     F2 26 02 FB | 	rdlong	local05, objptr
098dc     01 26 06 F1 | 	add	local05, #1
098e0     F2 26 62 FC | 	wrlong	local05, objptr
098e4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
098e4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
098e4     03 26 66 F0 | 	shl	local05, #3
098e8     02 00 00 FF 
098ec     38 E4 85 F1 | 	sub	objptr, ##1080
098f0     F2 26 02 F1 | 	add	local05, objptr
098f4     04 26 06 F1 | 	add	local05, #4
098f8     13 2D 02 FB | 	rdlong	local08, local05
098fc     15 2C 0E F2 | 	cmp	local08, #21 wz
09900     54 00 00 FF 
09904     F0 E5 85 F1 | 	sub	objptr, ##43504
09908     40 00 90 5D |  if_ne	jmp	#LR__0801
0990c     57 00 00 FF 
09910     28 E4 05 F1 | 	add	objptr, ##44584
09914     F2 2C 02 FB | 	rdlong	local08, objptr
09918     01 2C 06 F1 | 	add	local08, #1
0991c     F2 2C 62 FC | 	wrlong	local08, objptr
09920     57 00 00 FF 
09924     28 E4 85 F1 | 	sub	objptr, ##44584
09928     D4 F2 BF FD | 	call	#_expr
0992c     57 00 00 FF 
09930     28 E4 05 F1 | 	add	objptr, ##44584
09934     F2 2C 02 FB | 	rdlong	local08, objptr
09938     01 2C 06 F1 | 	add	local08, #1
0993c     F2 2C 62 FC | 	wrlong	local08, objptr
09940     57 00 00 FF 
09944     28 E4 85 F1 | 	sub	objptr, ##44584
09948     04 00 90 FD | 	jmp	#LR__0802
0994c                 | LR__0801
0994c     B0 F2 BF FD | 	call	#_expr
09950                 | LR__0802
09950     01 2A 06 F1 | 	add	local07, #1
09954     57 00 00 FF 
09958     28 E4 05 F1 | 	add	objptr, ##44584
0995c     F2 26 02 FB | 	rdlong	local05, objptr
09960     03 26 66 F0 | 	shl	local05, #3
09964     02 00 00 FF 
09968     38 E4 85 F1 | 	sub	objptr, ##1080
0996c     F2 26 02 F1 | 	add	local05, objptr
09970     04 26 06 F1 | 	add	local05, #4
09974     13 2D 02 FB | 	rdlong	local08, local05
09978     14 2C 0E F2 | 	cmp	local08, #20 wz
0997c     54 00 00 FF 
09980     F0 E5 85 F1 | 	sub	objptr, ##43504
09984     34 00 90 AD |  if_e	jmp	#LR__0803
09988     57 00 00 FF 
0998c     28 E4 05 F1 | 	add	objptr, ##44584
09990     F2 2C 02 FB | 	rdlong	local08, objptr
09994     03 2C 66 F0 | 	shl	local08, #3
09998     02 00 00 FF 
0999c     38 E4 85 F1 | 	sub	objptr, ##1080
099a0     F2 2C 02 F1 | 	add	local08, objptr
099a4     04 2C 06 F1 | 	add	local08, #4
099a8     16 2D 02 FB | 	rdlong	local08, local08
099ac     FE 2D 0E F2 | 	cmp	local08, #510 wz
099b0     54 00 00 FF 
099b4     F0 E5 85 F1 | 	sub	objptr, ##43504
099b8     14 FF 9F 5D |  if_ne	jmp	#LR__0800
099bc                 | LR__0803
099bc                 | LR__0804
099bc     15 1F 02 F6 | 	mov	local01, local07
099c0     03 28 66 F0 | 	shl	local06, #3
099c4     54 00 00 FF 
099c8     F0 E5 05 F1 | 	add	objptr, ##43504
099cc     F2 28 02 F1 | 	add	local06, objptr
099d0     04 28 06 F1 | 	add	local06, #4
099d4     14 23 02 FB | 	rdlong	local03, local06
099d8     0F 2D 02 F6 | 	mov	local08, local01
099dc     10 2B 02 F6 | 	mov	local07, local02
099e0     11 29 02 F6 | 	mov	local06, local03
099e4     15 00 00 FF 
099e8     70 E4 05 F1 | 	add	objptr, ##10864
099ec     F2 26 02 FB | 	rdlong	local05, objptr
099f0     13 13 02 F6 | 	mov	arg01, local05
099f4     01 12 66 F0 | 	shl	arg01, #1
099f8     13 13 02 F1 | 	add	arg01, local05
099fc     02 12 66 F0 | 	shl	arg01, #2
09a00     03 00 00 FF 
09a04     00 E4 85 F1 | 	sub	objptr, ##1536
09a08     F2 12 02 F1 | 	add	arg01, objptr
09a0c     09 2D 62 FC | 	wrlong	local08, arg01
09a10     03 00 00 FF 
09a14     00 E4 05 F1 | 	add	objptr, ##1536
09a18     F2 2C 02 FB | 	rdlong	local08, objptr
09a1c     16 2F 02 F6 | 	mov	local09, local08
09a20     01 2E 66 F0 | 	shl	local09, #1
09a24     16 2F 02 F1 | 	add	local09, local08
09a28     02 2E 66 F0 | 	shl	local09, #2
09a2c     03 00 00 FF 
09a30     00 E4 85 F1 | 	sub	objptr, ##1536
09a34     F2 2E 02 F1 | 	add	local09, objptr
09a38     04 2E 06 F1 | 	add	local09, #4
09a3c     17 2B 62 FC | 	wrlong	local07, local09
09a40     03 00 00 FF 
09a44     00 E4 05 F1 | 	add	objptr, ##1536
09a48     F2 2C 02 FB | 	rdlong	local08, objptr
09a4c     16 31 02 F6 | 	mov	local10, local08
09a50     01 30 66 F0 | 	shl	local10, #1
09a54     16 31 02 F1 | 	add	local10, local08
09a58     02 30 66 F0 | 	shl	local10, #2
09a5c     03 00 00 FF 
09a60     00 E4 85 F1 | 	sub	objptr, ##1536
09a64     F2 30 02 F1 | 	add	local10, objptr
09a68     08 30 06 F1 | 	add	local10, #8
09a6c     18 29 62 FC | 	wrlong	local06, local10
09a70     03 00 00 FF 
09a74     00 E4 05 F1 | 	add	objptr, ##1536
09a78     F2 2C 02 FB | 	rdlong	local08, objptr
09a7c     01 2C 06 F1 | 	add	local08, #1
09a80     F2 2C 62 FC | 	wrlong	local08, objptr
09a84     6A 00 00 FF 
09a88     60 E4 85 F1 | 	sub	objptr, ##54368
09a8c                 | ' 
09a8c                 | ' t2.result.uresult=numpar
09a8c                 | ' 
09a8c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
09a8c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09a8c                 | ' 
09a8c                 | '   
09a8c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09a8c     FF FF 7F FF 
09a90     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09a94     B8 00 90 5D |  if_ne	jmp	#LR__0805
09a98     15 22 06 F6 | 	mov	local03, #21
09a9c     0F 2D 02 F6 | 	mov	local08, local01
09aa0     10 2B 02 F6 | 	mov	local07, local02
09aa4     11 29 02 F6 | 	mov	local06, local03
09aa8     6A 00 00 FF 
09aac     60 E4 05 F1 | 	add	objptr, ##54368
09ab0     F2 26 02 FB | 	rdlong	local05, objptr
09ab4     13 13 02 F6 | 	mov	arg01, local05
09ab8     01 12 66 F0 | 	shl	arg01, #1
09abc     13 13 02 F1 | 	add	arg01, local05
09ac0     02 12 66 F0 | 	shl	arg01, #2
09ac4     03 00 00 FF 
09ac8     00 E4 85 F1 | 	sub	objptr, ##1536
09acc     F2 12 02 F1 | 	add	arg01, objptr
09ad0     09 2D 62 FC | 	wrlong	local08, arg01
09ad4     03 00 00 FF 
09ad8     00 E4 05 F1 | 	add	objptr, ##1536
09adc     F2 30 02 FB | 	rdlong	local10, objptr
09ae0     18 2F 02 F6 | 	mov	local09, local10
09ae4     01 2E 66 F0 | 	shl	local09, #1
09ae8     18 2F 02 F1 | 	add	local09, local10
09aec     02 2E 66 F0 | 	shl	local09, #2
09af0     03 00 00 FF 
09af4     00 E4 85 F1 | 	sub	objptr, ##1536
09af8     F2 2E 02 F1 | 	add	local09, objptr
09afc     04 2E 06 F1 | 	add	local09, #4
09b00     17 2B 62 FC | 	wrlong	local07, local09
09b04     03 00 00 FF 
09b08     00 E4 05 F1 | 	add	objptr, ##1536
09b0c     F2 2E 02 FB | 	rdlong	local09, objptr
09b10     17 31 02 F6 | 	mov	local10, local09
09b14     01 30 66 F0 | 	shl	local10, #1
09b18     17 31 02 F1 | 	add	local10, local09
09b1c     02 30 66 F0 | 	shl	local10, #2
09b20     03 00 00 FF 
09b24     00 E4 85 F1 | 	sub	objptr, ##1536
09b28     F2 30 02 F1 | 	add	local10, objptr
09b2c     08 30 06 F1 | 	add	local10, #8
09b30     18 29 62 FC | 	wrlong	local06, local10
09b34     03 00 00 FF 
09b38     00 E4 05 F1 | 	add	objptr, ##1536
09b3c     F2 2C 02 FB | 	rdlong	local08, objptr
09b40     01 2C 06 F1 | 	add	local08, #1
09b44     F2 2C 62 FC | 	wrlong	local08, objptr
09b48     6A 00 00 FF 
09b4c     60 E4 85 F1 | 	sub	objptr, ##54368
09b50                 | LR__0805
09b50     A7 F0 03 F6 | 	mov	ptra, fp
09b54     B2 00 A0 FD | 	call	#popregs_
09b58                 | _getfun_ret
09b58     2D 00 64 FD | 	ret
09b5c                 | 
09b5c                 | '   
09b5c                 | '   
09b5c                 | ' sub getvar(m as integer) 
09b5c                 | _getvar
09b5c     0A 4A 05 F6 | 	mov	COUNT_, #10
09b60     A8 00 A0 FD | 	call	#pushregs_
09b64                 | _getvar_enter
09b64     09 25 02 F6 | 	mov	local04, arg01
09b68     57 00 00 FF 
09b6c     28 E4 05 F1 | 	add	objptr, ##44584
09b70     F2 14 02 FB | 	rdlong	arg02, objptr
09b74     03 14 66 F0 | 	shl	arg02, #3
09b78     02 00 00 FF 
09b7c     38 E4 85 F1 | 	sub	objptr, ##1080
09b80     F2 14 02 F1 | 	add	arg02, objptr
09b84     0A 27 02 FB | 	rdlong	local05, arg02
09b88     13 13 02 F6 | 	mov	arg01, local05
09b8c     01 14 06 F6 | 	mov	arg02, #1
09b90     54 00 00 FF 
09b94     F0 E5 85 F1 | 	sub	objptr, ##43504
09b98     70 43 B1 FD | 	call	#__system__Right_S
09b9c     FD 28 02 F6 | 	mov	local06, result1
09ba0     01 2A 66 F6 | 	neg	local07, #1
09ba4                 | ' 
09ba4                 | ' varname$=lparts(ct).part$
09ba4                 | ' suffix$=right$(varname$,1)
09ba4                 | ' j=-1
09ba4                 | ' 
09ba4                 | ' for i=0 to varnum-1
09ba4     00 2C 06 F6 | 	mov	local08, #0
09ba8     54 00 00 FF 
09bac     EC E5 05 F1 | 	add	objptr, ##43500
09bb0     F2 2E 02 FB | 	rdlong	local09, objptr
09bb4     54 00 00 FF 
09bb8     EC E5 85 F1 | 	sub	objptr, ##43500
09bbc                 | LR__0810
09bbc     17 2D 52 F2 | 	cmps	local08, local09 wc
09bc0     38 00 90 3D |  if_ae	jmp	#LR__0811
09bc4                 | '   if variables(i).name=varname$ then j=i : exit
09bc4     16 15 02 F6 | 	mov	arg02, local08
09bc8     04 14 66 F0 | 	shl	arg02, #4
09bcc     34 00 00 FF 
09bd0     EC E5 05 F1 | 	add	objptr, ##27116
09bd4     F2 14 02 F1 | 	add	arg02, objptr
09bd8     0A 13 02 FB | 	rdlong	arg01, arg02
09bdc     13 15 02 F6 | 	mov	arg02, local05
09be0     34 00 00 FF 
09be4     EC E5 85 F1 | 	sub	objptr, ##27116
09be8     7C 22 B1 FD | 	call	#__system___string_cmp
09bec     00 FA 0D F2 | 	cmp	result1, #0 wz
09bf0     16 2B 02 A6 |  if_e	mov	local07, local08
09bf4     01 2C 06 51 |  if_ne	add	local08, #1
09bf8     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
09bfc                 | LR__0811
09bfc                 | ' if  j=-1 andalso varnum<maxvars then   
09bfc     FF FF 7F FF 
09c00     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
09c04     A8 00 90 5D |  if_ne	jmp	#LR__0812
09c08     54 00 00 FF 
09c0c     EC E5 05 F1 | 	add	objptr, ##43500
09c10     F2 2E 02 FB | 	rdlong	local09, objptr
09c14     54 00 00 FF 
09c18     EC E5 85 F1 | 	sub	objptr, ##43500
09c1c     01 00 00 FF 
09c20     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
09c24     88 00 90 3D |  if_ae	jmp	#LR__0812
09c28     54 00 00 FF 
09c2c     EC E5 05 F1 | 	add	objptr, ##43500
09c30     F2 2E 02 FB | 	rdlong	local09, objptr
09c34     04 2E 66 F0 | 	shl	local09, #4
09c38     20 00 00 FF 
09c3c     00 E4 85 F1 | 	sub	objptr, ##16384
09c40     F2 2E 02 F1 | 	add	local09, objptr
09c44     17 27 62 FC | 	wrlong	local05, local09
09c48     20 00 00 FF 
09c4c     00 E4 05 F1 | 	add	objptr, ##16384
09c50     F2 2E 02 FB | 	rdlong	local09, objptr
09c54     04 2E 66 F0 | 	shl	local09, #4
09c58     20 00 00 FF 
09c5c     00 E4 85 F1 | 	sub	objptr, ##16384
09c60     F2 2E 02 F1 | 	add	local09, objptr
09c64     04 2E 06 F1 | 	add	local09, #4
09c68     17 01 68 FC | 	wrlong	#0, local09
09c6c     20 00 00 FF 
09c70     00 E4 05 F1 | 	add	objptr, ##16384
09c74     F2 2E 02 FB | 	rdlong	local09, objptr
09c78     04 2E 66 F0 | 	shl	local09, #4
09c7c     20 00 00 FF 
09c80     00 E4 85 F1 | 	sub	objptr, ##16384
09c84     F2 2E 02 F1 | 	add	local09, objptr
09c88     0C 2E 06 F1 | 	add	local09, #12
09c8c     17 39 68 FC | 	wrlong	#28, local09
09c90     20 00 00 FF 
09c94     00 E4 05 F1 | 	add	objptr, ##16384
09c98     F2 2E 02 FB | 	rdlong	local09, objptr
09c9c     17 2B 02 F6 | 	mov	local07, local09
09ca0     01 2E 06 F1 | 	add	local09, #1
09ca4     F2 2E 62 FC | 	wrlong	local09, objptr
09ca8     54 00 00 FF 
09cac     EC E5 85 F1 | 	sub	objptr, ##43500
09cb0                 | LR__0812
09cb0     00 2E 06 F6 | 	mov	local09, #0
09cb4                 | ' numpar=0
09cb4                 | ' ' check if it is an array
09cb4                 | ' 
09cb4                 | ' if lparts(ct+1).token=token_lpar then
09cb4     57 00 00 FF 
09cb8     28 E4 05 F1 | 	add	objptr, ##44584
09cbc     F2 2C 02 FB | 	rdlong	local08, objptr
09cc0     01 2C 06 F1 | 	add	local08, #1
09cc4     03 2C 66 F0 | 	shl	local08, #3
09cc8     02 00 00 FF 
09ccc     38 E4 85 F1 | 	sub	objptr, ##1080
09cd0     F2 2C 02 F1 | 	add	local08, objptr
09cd4     04 2C 06 F1 | 	add	local08, #4
09cd8     16 2D 02 FB | 	rdlong	local08, local08
09cdc     15 2C 0E F2 | 	cmp	local08, #21 wz
09ce0     54 00 00 FF 
09ce4     F0 E5 85 F1 | 	sub	objptr, ##43504
09ce8     08 01 90 5D |  if_ne	jmp	#LR__0817
09cec     57 00 00 FF 
09cf0     28 E4 05 F1 | 	add	objptr, ##44584
09cf4     F2 30 02 FB | 	rdlong	local10, objptr
09cf8     01 30 06 F1 | 	add	local10, #1
09cfc     F2 30 62 FC | 	wrlong	local10, objptr
09d00     57 00 00 FF 
09d04     28 E4 85 F1 | 	sub	objptr, ##44584
09d08                 | '   ct+=1 											' omit this lpar, this is for expr list
09d08                 | '   do
09d08                 | LR__0813
09d08     57 00 00 FF 
09d0c     28 E4 05 F1 | 	add	objptr, ##44584
09d10     F2 2C 02 FB | 	rdlong	local08, objptr
09d14     01 2C 06 F1 | 	add	local08, #1
09d18     F2 2C 62 FC | 	wrlong	local08, objptr
09d1c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
09d1c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
09d1c     03 2C 66 F0 | 	shl	local08, #3
09d20     02 00 00 FF 
09d24     38 E4 85 F1 | 	sub	objptr, ##1080
09d28     F2 2C 02 F1 | 	add	local08, objptr
09d2c     04 2C 06 F1 | 	add	local08, #4
09d30     16 31 02 FB | 	rdlong	local10, local08
09d34     15 30 0E F2 | 	cmp	local10, #21 wz
09d38     54 00 00 FF 
09d3c     F0 E5 85 F1 | 	sub	objptr, ##43504
09d40     40 00 90 5D |  if_ne	jmp	#LR__0814
09d44     57 00 00 FF 
09d48     28 E4 05 F1 | 	add	objptr, ##44584
09d4c     F2 30 02 FB | 	rdlong	local10, objptr
09d50     01 30 06 F1 | 	add	local10, #1
09d54     F2 30 62 FC | 	wrlong	local10, objptr
09d58     57 00 00 FF 
09d5c     28 E4 85 F1 | 	sub	objptr, ##44584
09d60     9C EE BF FD | 	call	#_expr
09d64     57 00 00 FF 
09d68     28 E4 05 F1 | 	add	objptr, ##44584
09d6c     F2 30 02 FB | 	rdlong	local10, objptr
09d70     01 30 06 F1 | 	add	local10, #1
09d74     F2 30 62 FC | 	wrlong	local10, objptr
09d78     57 00 00 FF 
09d7c     28 E4 85 F1 | 	sub	objptr, ##44584
09d80     04 00 90 FD | 	jmp	#LR__0815
09d84                 | LR__0814
09d84     78 EE BF FD | 	call	#_expr
09d88                 | LR__0815
09d88     01 2E 06 F1 | 	add	local09, #1
09d8c     57 00 00 FF 
09d90     28 E4 05 F1 | 	add	objptr, ##44584
09d94     F2 2C 02 FB | 	rdlong	local08, objptr
09d98     03 2C 66 F0 | 	shl	local08, #3
09d9c     02 00 00 FF 
09da0     38 E4 85 F1 | 	sub	objptr, ##1080
09da4     F2 2C 02 F1 | 	add	local08, objptr
09da8     04 2C 06 F1 | 	add	local08, #4
09dac     16 31 02 FB | 	rdlong	local10, local08
09db0     14 30 0E F2 | 	cmp	local10, #20 wz
09db4     54 00 00 FF 
09db8     F0 E5 85 F1 | 	sub	objptr, ##43504
09dbc     34 00 90 AD |  if_e	jmp	#LR__0816
09dc0     57 00 00 FF 
09dc4     28 E4 05 F1 | 	add	objptr, ##44584
09dc8     F2 30 02 FB | 	rdlong	local10, objptr
09dcc     03 30 66 F0 | 	shl	local10, #3
09dd0     02 00 00 FF 
09dd4     38 E4 85 F1 | 	sub	objptr, ##1080
09dd8     F2 30 02 F1 | 	add	local10, objptr
09ddc     04 30 06 F1 | 	add	local10, #4
09de0     18 31 02 FB | 	rdlong	local10, local10
09de4     FE 31 0E F2 | 	cmp	local10, #510 wz
09de8     54 00 00 FF 
09dec     F0 E5 85 F1 | 	sub	objptr, ##43504
09df0     14 FF 9F 5D |  if_ne	jmp	#LR__0813
09df4                 | LR__0816
09df4                 | LR__0817
09df4     17 21 02 F6 | 	mov	local02, local09
09df8     11 22 06 F6 | 	mov	local03, #17
09dfc     15 1F 02 F6 | 	mov	local01, local07
09e00     0F 31 02 F6 | 	mov	local10, local01
09e04     10 2F 02 F6 | 	mov	local09, local02
09e08     11 2D 02 F6 | 	mov	local08, local03
09e0c     6A 00 00 FF 
09e10     60 E4 05 F1 | 	add	objptr, ##54368
09e14     F2 2A 02 FB | 	rdlong	local07, objptr
09e18     15 29 02 F6 | 	mov	local06, local07
09e1c     01 28 66 F0 | 	shl	local06, #1
09e20     15 29 02 F1 | 	add	local06, local07
09e24     02 28 66 F0 | 	shl	local06, #2
09e28     03 00 00 FF 
09e2c     00 E4 85 F1 | 	sub	objptr, ##1536
09e30     F2 28 02 F1 | 	add	local06, objptr
09e34     14 31 62 FC | 	wrlong	local10, local06
09e38     03 00 00 FF 
09e3c     00 E4 05 F1 | 	add	objptr, ##1536
09e40     F2 30 02 FB | 	rdlong	local10, objptr
09e44     18 27 02 F6 | 	mov	local05, local10
09e48     01 26 66 F0 | 	shl	local05, #1
09e4c     18 27 02 F1 | 	add	local05, local10
09e50     02 26 66 F0 | 	shl	local05, #2
09e54     03 00 00 FF 
09e58     00 E4 85 F1 | 	sub	objptr, ##1536
09e5c     F2 26 02 F1 | 	add	local05, objptr
09e60     04 26 06 F1 | 	add	local05, #4
09e64     13 2F 62 FC | 	wrlong	local09, local05
09e68     03 00 00 FF 
09e6c     00 E4 05 F1 | 	add	objptr, ##1536
09e70     F2 30 02 FB | 	rdlong	local10, objptr
09e74     18 FB 01 F6 | 	mov	result1, local10
09e78     01 FA 65 F0 | 	shl	result1, #1
09e7c     18 FB 01 F1 | 	add	result1, local10
09e80     02 FA 65 F0 | 	shl	result1, #2
09e84     03 00 00 FF 
09e88     00 E4 85 F1 | 	sub	objptr, ##1536
09e8c     F2 FA 01 F1 | 	add	result1, objptr
09e90     08 FA 05 F1 | 	add	result1, #8
09e94     FD 2C 62 FC | 	wrlong	local08, result1
09e98     03 00 00 FF 
09e9c     00 E4 05 F1 | 	add	objptr, ##1536
09ea0     F2 30 02 FB | 	rdlong	local10, objptr
09ea4     01 30 06 F1 | 	add	local10, #1
09ea8     F2 30 62 FC | 	wrlong	local10, objptr
09eac     6A 00 00 FF 
09eb0     60 E4 85 F1 | 	sub	objptr, ##54368
09eb4                 | ' 
09eb4                 | ' t2.result.twowords(1)=numpar
09eb4                 | ' 
09eb4                 | ' 
09eb4                 | ' 
09eb4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
09eb4                 | ' 
09eb4                 | ' 
09eb4                 | '  
09eb4                 | ' 
09eb4                 | ' 701 
09eb4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
09eb4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
09eb4     FF FF 7F FF 
09eb8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09ebc     B8 00 90 5D |  if_ne	jmp	#LR__0818
09ec0     15 22 06 F6 | 	mov	local03, #21
09ec4     0F 31 02 F6 | 	mov	local10, local01
09ec8     10 2F 02 F6 | 	mov	local09, local02
09ecc     11 2D 02 F6 | 	mov	local08, local03
09ed0     6A 00 00 FF 
09ed4     60 E4 05 F1 | 	add	objptr, ##54368
09ed8     F2 2A 02 FB | 	rdlong	local07, objptr
09edc     15 29 02 F6 | 	mov	local06, local07
09ee0     01 28 66 F0 | 	shl	local06, #1
09ee4     15 29 02 F1 | 	add	local06, local07
09ee8     02 28 66 F0 | 	shl	local06, #2
09eec     03 00 00 FF 
09ef0     00 E4 85 F1 | 	sub	objptr, ##1536
09ef4     F2 28 02 F1 | 	add	local06, objptr
09ef8     14 31 62 FC | 	wrlong	local10, local06
09efc     03 00 00 FF 
09f00     00 E4 05 F1 | 	add	objptr, ##1536
09f04     F2 1E 02 FB | 	rdlong	local01, objptr
09f08     0F 27 02 F6 | 	mov	local05, local01
09f0c     01 26 66 F0 | 	shl	local05, #1
09f10     0F 27 02 F1 | 	add	local05, local01
09f14     02 26 66 F0 | 	shl	local05, #2
09f18     03 00 00 FF 
09f1c     00 E4 85 F1 | 	sub	objptr, ##1536
09f20     F2 26 02 F1 | 	add	local05, objptr
09f24     04 26 06 F1 | 	add	local05, #4
09f28     13 2F 62 FC | 	wrlong	local09, local05
09f2c     03 00 00 FF 
09f30     00 E4 05 F1 | 	add	objptr, ##1536
09f34     F2 1E 02 FB | 	rdlong	local01, objptr
09f38     0F FB 01 F6 | 	mov	result1, local01
09f3c     01 FA 65 F0 | 	shl	result1, #1
09f40     0F FB 01 F1 | 	add	result1, local01
09f44     02 FA 65 F0 | 	shl	result1, #2
09f48     03 00 00 FF 
09f4c     00 E4 85 F1 | 	sub	objptr, ##1536
09f50     F2 FA 01 F1 | 	add	result1, objptr
09f54     08 FA 05 F1 | 	add	result1, #8
09f58     FD 2C 62 FC | 	wrlong	local08, result1
09f5c     03 00 00 FF 
09f60     00 E4 05 F1 | 	add	objptr, ##1536
09f64     F2 30 02 FB | 	rdlong	local10, objptr
09f68     01 30 06 F1 | 	add	local10, #1
09f6c     F2 30 62 FC | 	wrlong	local10, objptr
09f70     6A 00 00 FF 
09f74     60 E4 85 F1 | 	sub	objptr, ##54368
09f78                 | LR__0818
09f78     A7 F0 03 F6 | 	mov	ptra, fp
09f7c     B2 00 A0 FD | 	call	#popregs_
09f80                 | _getvar_ret
09f80     2D 00 64 FD | 	ret
09f84                 | 
09f84                 | ' 
09f84                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09f84                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
09f84                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09f84                 | ' 
09f84                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09f84                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
09f84                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
09f84                 | ' 
09f84                 | ' function execute_line (astart=0 as integer) as integer
09f84                 | _execute_line
09f84     04 4A 05 F6 | 	mov	COUNT_, #4
09f88     A8 00 A0 FD | 	call	#pushregs_
09f8c     79 00 00 FF 
09f90     98 E5 05 F1 | 	add	objptr, ##62360
09f94     F2 00 68 FC | 	wrlong	#0, objptr
09f98                 | ' runptr2=0
09f98                 | ' for lineptr_e=astart to lineptr-1
09f98     0F 00 00 FF 
09f9c     34 E5 85 F1 | 	sub	objptr, ##7988
09fa0     F2 12 62 FC | 	wrlong	arg01, objptr
09fa4     04 E4 85 F1 | 	sub	objptr, #4
09fa8     F2 1E 02 FB | 	rdlong	local01, objptr
09fac     6A 00 00 FF 
09fb0     60 E4 85 F1 | 	sub	objptr, ##54368
09fb4                 | LR__0820
09fb4     6A 00 00 FF 
09fb8     64 E4 05 F1 | 	add	objptr, ##54372
09fbc     F2 FA 01 FB | 	rdlong	result1, objptr
09fc0     6A 00 00 FF 
09fc4     64 E4 85 F1 | 	sub	objptr, ##54372
09fc8     0F FB 51 F2 | 	cmps	result1, local01 wc
09fcc     98 00 90 3D |  if_ae	jmp	#LR__0821
09fd0     6A 00 00 FF 
09fd4     64 E4 05 F1 | 	add	objptr, ##54372
09fd8     F2 FA 01 FB | 	rdlong	result1, objptr
09fdc     FD 20 02 F6 | 	mov	local02, result1
09fe0     01 20 66 F0 | 	shl	local02, #1
09fe4     FD 20 02 F1 | 	add	local02, result1
09fe8     02 20 66 F0 | 	shl	local02, #2
09fec     03 00 00 FF 
09ff0     04 E4 85 F1 | 	sub	objptr, ##1540
09ff4     F2 20 02 F1 | 	add	local02, objptr
09ff8     08 20 06 F1 | 	add	local02, #8
09ffc     10 21 02 FB | 	rdlong	local02, local02
0a000     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a004     02 20 66 F0 | 	shl	local02, #2
0a008     04 00 00 FF 
0a00c     1C E4 85 F1 | 	sub	objptr, ##2076
0a010     F2 20 02 F1 | 	add	local02, objptr
0a014     10 21 02 FB | 	rdlong	local02, local02
0a018     10 23 02 F6 | 	mov	local03, local02
0a01c     13 20 46 F7 | 	zerox	local02, #19
0a020     14 22 46 F0 | 	shr	local03, #20
0a024     02 22 66 F0 | 	shl	local03, #2
0a028     ED 22 02 F1 | 	add	local03, __methods__
0a02c     11 23 02 FB | 	rdlong	local03, local03
0a030     63 00 00 FF 
0a034     44 E4 85 F1 | 	sub	objptr, ##50756
0a038     F2 24 02 F6 | 	mov	local04, objptr
0a03c     10 E5 01 F6 | 	mov	objptr, local02
0a040     2D 22 62 FD | 	call	local03
0a044     12 E5 01 F6 | 	mov	objptr, local04
0a048     6A 00 00 FF 
0a04c     64 E4 05 F1 | 	add	objptr, ##54372
0a050     F2 24 02 FB | 	rdlong	local04, objptr
0a054     01 24 06 F1 | 	add	local04, #1
0a058     F2 24 62 FC | 	wrlong	local04, objptr
0a05c     6A 00 00 FF 
0a060     64 E4 85 F1 | 	sub	objptr, ##54372
0a064     4C FF 9F FD | 	jmp	#LR__0820
0a068                 | LR__0821
0a068                 | ' return runptr2
0a068     79 00 00 FF 
0a06c     98 E5 05 F1 | 	add	objptr, ##62360
0a070     F2 FA 01 FB | 	rdlong	result1, objptr
0a074     79 00 00 FF 
0a078     98 E5 85 F1 | 	sub	objptr, ##62360
0a07c     A7 F0 03 F6 | 	mov	ptra, fp
0a080     B2 00 A0 FD | 	call	#popregs_
0a084                 | _execute_line_ret
0a084     2D 00 64 FD | 	ret
0a088                 | 
0a088                 | ' 
0a088                 | ' 
0a088                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a088                 | ' 
0a088                 | ' function pop() as expr_result
0a088                 | _pop
0a088                 | ' 
0a088                 | ' if stackpointer=0 then
0a088     63 00 00 FF 
0a08c     3C E4 05 F1 | 	add	objptr, ##50748
0a090     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a094     63 00 00 FF 
0a098     3C E4 85 F1 | 	sub	objptr, ##50748
0a09c     FF 04 06 A6 |  if_e	mov	_var03, #255
0a0a0     18 00 06 A6 |  if_e	mov	_var01, #24
0a0a4     68 00 90 AD |  if_e	jmp	#LR__0830
0a0a8     63 00 00 FF 
0a0ac     3C E4 05 F1 | 	add	objptr, ##50748
0a0b0     F2 FA 01 FB | 	rdlong	result1, objptr
0a0b4     01 FA 85 F1 | 	sub	result1, #1
0a0b8     F2 FA 61 FC | 	wrlong	result1, objptr
0a0bc     FD FE 01 F6 | 	mov	result3, result1
0a0c0     01 FE 65 F0 | 	shl	result3, #1
0a0c4     FD FE 01 F1 | 	add	result3, result1
0a0c8     02 FE 65 F0 | 	shl	result3, #2
0a0cc     0C 00 00 FF 
0a0d0     0C E4 85 F1 | 	sub	objptr, ##6156
0a0d4     F2 FE 01 F1 | 	add	result3, objptr
0a0d8     FF 00 02 FB | 	rdlong	_var01, result3
0a0dc     04 FE 05 F1 | 	add	result3, #4
0a0e0     FF FE 01 FB | 	rdlong	result3, result3
0a0e4     FD FC 01 F6 | 	mov	result2, result1
0a0e8     01 FC 65 F0 | 	shl	result2, #1
0a0ec     FD FC 01 F1 | 	add	result2, result1
0a0f0     02 FC 65 F0 | 	shl	result2, #2
0a0f4     F2 FC 01 F1 | 	add	result2, objptr
0a0f8     08 FC 05 F1 | 	add	result2, #8
0a0fc     FE FA 01 FB | 	rdlong	result1, result2
0a100     FF 02 02 F6 | 	mov	_var02, result3
0a104     FD 04 02 F6 | 	mov	_var03, result1
0a108     57 00 00 FF 
0a10c     30 E4 85 F1 | 	sub	objptr, ##44592
0a110                 | LR__0830
0a110                 | ' return t1
0a110     01 FD 01 F6 | 	mov	result2, _var02
0a114     02 FF 01 F6 | 	mov	result3, _var03
0a118     00 FB 01 F6 | 	mov	result1, _var01
0a11c                 | _pop_ret
0a11c     2D 00 64 FD | 	ret
0a120                 | 
0a120                 | ' 
0a120                 | ' sub push(t1 as expr_result )
0a120                 | _push
0a120                 | ' 
0a120                 | ' 'print "In push: "; t1.result_type
0a120                 | ' 'print "In push: "; t1.result.uresult
0a120                 | ' 
0a120                 | ' if stackpointer<maxstack then 
0a120     63 00 00 FF 
0a124     3C E4 05 F1 | 	add	objptr, ##50748
0a128     F2 00 02 FB | 	rdlong	_var01, objptr
0a12c     63 00 00 FF 
0a130     3C E4 85 F1 | 	sub	objptr, ##50748
0a134     01 00 00 FF 
0a138     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a13c     BC 00 90 3D |  if_ae	jmp	#LR__0840
0a140     09 01 02 FB | 	rdlong	_var01, arg01
0a144     04 12 06 F1 | 	add	arg01, #4
0a148     09 03 02 FB | 	rdlong	_var02, arg01
0a14c     04 12 06 F1 | 	add	arg01, #4
0a150     09 13 02 FB | 	rdlong	arg01, arg01
0a154     63 00 00 FF 
0a158     3C E4 05 F1 | 	add	objptr, ##50748
0a15c     F2 04 02 FB | 	rdlong	_var03, objptr
0a160     02 07 02 F6 | 	mov	_var04, _var03
0a164     01 06 66 F0 | 	shl	_var04, #1
0a168     02 07 02 F1 | 	add	_var04, _var03
0a16c     02 06 66 F0 | 	shl	_var04, #2
0a170     0C 00 00 FF 
0a174     0C E4 85 F1 | 	sub	objptr, ##6156
0a178     F2 06 02 F1 | 	add	_var04, objptr
0a17c     03 01 62 FC | 	wrlong	_var01, _var04
0a180     0C 00 00 FF 
0a184     0C E4 05 F1 | 	add	objptr, ##6156
0a188     F2 06 02 FB | 	rdlong	_var04, objptr
0a18c     03 05 02 F6 | 	mov	_var03, _var04
0a190     01 04 66 F0 | 	shl	_var03, #1
0a194     03 05 02 F1 | 	add	_var03, _var04
0a198     02 04 66 F0 | 	shl	_var03, #2
0a19c     0C 00 00 FF 
0a1a0     0C E4 85 F1 | 	sub	objptr, ##6156
0a1a4     F2 04 02 F1 | 	add	_var03, objptr
0a1a8     04 04 06 F1 | 	add	_var03, #4
0a1ac     02 03 62 FC | 	wrlong	_var02, _var03
0a1b0     0C 00 00 FF 
0a1b4     0C E4 05 F1 | 	add	objptr, ##6156
0a1b8     F2 06 02 FB | 	rdlong	_var04, objptr
0a1bc     03 05 02 F6 | 	mov	_var03, _var04
0a1c0     01 04 66 F0 | 	shl	_var03, #1
0a1c4     03 05 02 F1 | 	add	_var03, _var04
0a1c8     02 04 66 F0 | 	shl	_var03, #2
0a1cc     0C 00 00 FF 
0a1d0     0C E4 85 F1 | 	sub	objptr, ##6156
0a1d4     F2 04 02 F1 | 	add	_var03, objptr
0a1d8     08 04 06 F1 | 	add	_var03, #8
0a1dc     02 13 62 FC | 	wrlong	arg01, _var03
0a1e0     0C 00 00 FF 
0a1e4     0C E4 05 F1 | 	add	objptr, ##6156
0a1e8     F2 00 02 FB | 	rdlong	_var01, objptr
0a1ec     01 00 06 F1 | 	add	_var01, #1
0a1f0     F2 00 62 FC | 	wrlong	_var01, objptr
0a1f4     63 00 00 FF 
0a1f8     3C E4 85 F1 | 	sub	objptr, ##50748
0a1fc                 | LR__0840
0a1fc                 | _push_ret
0a1fc     2D 00 64 FD | 	ret
0a200                 | 
0a200                 | ' 
0a200                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a200                 | ' 
0a200                 | ' sub do_push
0a200                 | _do_push
0a200                 | ' if stackpointer<maxstack then 
0a200     63 00 00 FF 
0a204     3C E4 05 F1 | 	add	objptr, ##50748
0a208     F2 00 02 FB | 	rdlong	_var01, objptr
0a20c     63 00 00 FF 
0a210     3C E4 85 F1 | 	sub	objptr, ##50748
0a214     01 00 00 FF 
0a218     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a21c     F8 00 90 3D |  if_ae	jmp	#LR__0850
0a220     6A 00 00 FF 
0a224     64 E4 05 F1 | 	add	objptr, ##54372
0a228     F2 02 02 FB | 	rdlong	_var02, objptr
0a22c     01 05 02 F6 | 	mov	_var03, _var02
0a230     01 04 66 F0 | 	shl	_var03, #1
0a234     01 05 02 F1 | 	add	_var03, _var02
0a238     02 04 66 F0 | 	shl	_var03, #2
0a23c     03 00 00 FF 
0a240     04 E4 85 F1 | 	sub	objptr, ##1540
0a244     F2 04 02 F1 | 	add	_var03, objptr
0a248     02 01 02 FB | 	rdlong	_var01, _var03
0a24c     04 04 06 F1 | 	add	_var03, #4
0a250     02 07 02 FB | 	rdlong	_var04, _var03
0a254     01 05 02 F6 | 	mov	_var03, _var02
0a258     01 04 66 F0 | 	shl	_var03, #1
0a25c     01 05 02 F1 | 	add	_var03, _var02
0a260     02 04 66 F0 | 	shl	_var03, #2
0a264     F2 04 02 F1 | 	add	_var03, objptr
0a268     08 04 06 F1 | 	add	_var03, #8
0a26c     02 03 02 FB | 	rdlong	_var02, _var03
0a270     04 00 00 FF 
0a274     24 E4 85 F1 | 	sub	objptr, ##2084
0a278     F2 04 02 FB | 	rdlong	_var03, objptr
0a27c     02 09 02 F6 | 	mov	_var05, _var03
0a280     01 08 66 F0 | 	shl	_var05, #1
0a284     02 09 02 F1 | 	add	_var05, _var03
0a288     02 08 66 F0 | 	shl	_var05, #2
0a28c     0C 00 00 FF 
0a290     0C E4 85 F1 | 	sub	objptr, ##6156
0a294     F2 08 02 F1 | 	add	_var05, objptr
0a298     04 01 62 FC | 	wrlong	_var01, _var05
0a29c     0C 00 00 FF 
0a2a0     0C E4 05 F1 | 	add	objptr, ##6156
0a2a4     F2 08 02 FB | 	rdlong	_var05, objptr
0a2a8     04 05 02 F6 | 	mov	_var03, _var05
0a2ac     01 04 66 F0 | 	shl	_var03, #1
0a2b0     04 05 02 F1 | 	add	_var03, _var05
0a2b4     02 04 66 F0 | 	shl	_var03, #2
0a2b8     0C 00 00 FF 
0a2bc     0C E4 85 F1 | 	sub	objptr, ##6156
0a2c0     F2 04 02 F1 | 	add	_var03, objptr
0a2c4     04 04 06 F1 | 	add	_var03, #4
0a2c8     02 07 62 FC | 	wrlong	_var04, _var03
0a2cc     0C 00 00 FF 
0a2d0     0C E4 05 F1 | 	add	objptr, ##6156
0a2d4     F2 08 02 FB | 	rdlong	_var05, objptr
0a2d8     04 07 02 F6 | 	mov	_var04, _var05
0a2dc     01 06 66 F0 | 	shl	_var04, #1
0a2e0     04 07 02 F1 | 	add	_var04, _var05
0a2e4     02 06 66 F0 | 	shl	_var04, #2
0a2e8     0C 00 00 FF 
0a2ec     0C E4 85 F1 | 	sub	objptr, ##6156
0a2f0     F2 06 02 F1 | 	add	_var04, objptr
0a2f4     08 06 06 F1 | 	add	_var04, #8
0a2f8     03 03 62 FC | 	wrlong	_var02, _var04
0a2fc     0C 00 00 FF 
0a300     0C E4 05 F1 | 	add	objptr, ##6156
0a304     F2 00 02 FB | 	rdlong	_var01, objptr
0a308     01 00 06 F1 | 	add	_var01, #1
0a30c     F2 00 62 FC | 	wrlong	_var01, objptr
0a310     63 00 00 FF 
0a314     3C E4 85 F1 | 	sub	objptr, ##50748
0a318                 | LR__0850
0a318                 | _do_push_ret
0a318     2D 00 64 FD | 	ret
0a31c                 | 
0a31c                 | ' 
0a31c                 | '   
0a31c                 | ' sub csave_block(address as ulong)
0a31c                 | _csave_block
0a31c     09 01 02 F6 | 	mov	_var01, arg01
0a320                 | ' 
0a320                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0a320                 | ' ' we enter it at the state of playing 1 kHz header tone
0a320                 | ' 
0a320                 | ' for i=0 to 63 step 2
0a320     00 02 06 F6 | 	mov	_var02, #0
0a324                 | LR__0860
0a324                 | '   do: loop until lpeek(base+32*7)>32768
0a324     56 00 00 FF 
0a328     F4 E5 05 F1 | 	add	objptr, ##44532
0a32c     97 0C 48 FB | 	callpa	#(@LR__0862-@LR__0861)>>2,fcache_load_ptr_
0a330                 | LR__0861
0a330     F2 12 02 FB | 	rdlong	arg01, objptr
0a334     E0 12 06 F1 | 	add	arg01, #224
0a338     09 FB 01 FB | 	rdlong	result1, arg01
0a33c     40 00 00 FF 
0a340     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a344     E8 FF 9F CD |  if_b	jmp	#LR__0861
0a348                 | LR__0862
0a348     00 13 02 F6 | 	mov	arg01, _var01
0a34c     01 05 02 F6 | 	mov	_var03, _var02
0a350     02 04 66 F0 | 	shl	_var03, #2
0a354     02 13 02 F1 | 	add	arg01, _var03
0a358     09 07 02 FB | 	rdlong	_var04, arg01
0a35c     24 00 00 FF 
0a360     D4 E4 05 F1 | 	add	objptr, ##18644
0a364     F2 06 62 FC | 	wrlong	_var04, objptr
0a368     7B 00 00 FF 
0a36c     C8 E4 85 F1 | 	sub	objptr, ##63176
0a370                 | '   q=lpeek(address+4*i)
0a370                 | '      for bit=0 to 31
0a370     00 08 06 F6 | 	mov	_var05, #0
0a374     97 84 48 FB | 	callpa	#(@LR__0867-@LR__0863)>>2,fcache_load_ptr_
0a378                 | LR__0863
0a378                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0a378     7B 00 00 FF 
0a37c     C8 E4 05 F1 | 	add	objptr, ##63176
0a380     F2 06 02 FB | 	rdlong	_var04, objptr
0a384     7B 00 00 FF 
0a388     C8 E4 85 F1 | 	sub	objptr, ##63176
0a38c     04 05 C2 F9 | 	decod	_var03, _var05
0a390     02 07 CA F7 | 	test	_var04, _var03 wz
0a394     60 00 90 AD |  if_e	jmp	#LR__0864
0a398     04 05 02 F6 | 	mov	_var03, _var05
0a39c     02 04 66 F0 | 	shl	_var03, #2
0a3a0     77 00 00 FF 
0a3a4     90 E4 05 F1 | 	add	objptr, ##61072
0a3a8     F2 04 02 F1 | 	add	_var03, objptr
0a3ac     02 FF 48 FC | 	wrbyte	#127, _var03
0a3b0     04 05 02 F6 | 	mov	_var03, _var05
0a3b4     02 04 66 F0 | 	shl	_var03, #2
0a3b8     01 04 06 F1 | 	add	_var03, #1
0a3bc     F2 04 02 F1 | 	add	_var03, objptr
0a3c0     02 01 49 FC | 	wrbyte	#128, _var03
0a3c4     04 05 02 F6 | 	mov	_var03, _var05
0a3c8     02 04 66 F0 | 	shl	_var03, #2
0a3cc     02 04 06 F1 | 	add	_var03, #2
0a3d0     F2 04 02 F1 | 	add	_var03, objptr
0a3d4     02 FF 48 FC | 	wrbyte	#127, _var03
0a3d8     04 05 02 F6 | 	mov	_var03, _var05
0a3dc     02 04 66 F0 | 	shl	_var03, #2
0a3e0     03 04 06 F1 | 	add	_var03, #3
0a3e4     F2 04 02 F1 | 	add	_var03, objptr
0a3e8     02 01 49 FC | 	wrbyte	#128, _var03
0a3ec     77 00 00 FF 
0a3f0     90 E4 85 F1 | 	sub	objptr, ##61072
0a3f4     5C 00 90 FD | 	jmp	#LR__0865
0a3f8                 | LR__0864
0a3f8     04 05 02 F6 | 	mov	_var03, _var05
0a3fc     02 04 66 F0 | 	shl	_var03, #2
0a400     77 00 00 FF 
0a404     90 E4 05 F1 | 	add	objptr, ##61072
0a408     F2 04 02 F1 | 	add	_var03, objptr
0a40c     02 01 49 FC | 	wrbyte	#128, _var03
0a410     04 05 02 F6 | 	mov	_var03, _var05
0a414     02 04 66 F0 | 	shl	_var03, #2
0a418     01 04 06 F1 | 	add	_var03, #1
0a41c     F2 04 02 F1 | 	add	_var03, objptr
0a420     02 01 49 FC | 	wrbyte	#128, _var03
0a424     04 05 02 F6 | 	mov	_var03, _var05
0a428     02 04 66 F0 | 	shl	_var03, #2
0a42c     02 04 06 F1 | 	add	_var03, #2
0a430     F2 04 02 F1 | 	add	_var03, objptr
0a434     02 FF 48 FC | 	wrbyte	#127, _var03
0a438     04 05 02 F6 | 	mov	_var03, _var05
0a43c     02 04 66 F0 | 	shl	_var03, #2
0a440     03 04 06 F1 | 	add	_var03, #3
0a444     F2 04 02 F1 | 	add	_var03, objptr
0a448     02 FF 48 FC | 	wrbyte	#127, _var03
0a44c     77 00 00 FF 
0a450     90 E4 85 F1 | 	sub	objptr, ##61072
0a454                 | LR__0865
0a454     01 08 06 F1 | 	add	_var05, #1
0a458     20 08 56 F2 | 	cmps	_var05, #32 wc
0a45c     18 FF 9F CD |  if_b	jmp	#LR__0863
0a460                 | '   do: loop until lpeek(base+32*7)<32768
0a460     56 00 00 FF 
0a464     F4 E5 05 F1 | 	add	objptr, ##44532
0a468                 | LR__0866
0a468     F2 12 02 FB | 	rdlong	arg01, objptr
0a46c     E0 12 06 F1 | 	add	arg01, #224
0a470     09 FB 01 FB | 	rdlong	result1, arg01
0a474     40 00 00 FF 
0a478     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a47c     E8 FF 9F 3D |  if_ae	jmp	#LR__0866
0a480                 | LR__0867
0a480     00 13 02 F6 | 	mov	arg01, _var01
0a484     04 12 06 F1 | 	add	arg01, #4
0a488     01 05 02 F6 | 	mov	_var03, _var02
0a48c     02 04 66 F0 | 	shl	_var03, #2
0a490     02 13 02 F1 | 	add	arg01, _var03
0a494     09 07 02 FB | 	rdlong	_var04, arg01
0a498     24 00 00 FF 
0a49c     D4 E4 05 F1 | 	add	objptr, ##18644
0a4a0     F2 06 62 FC | 	wrlong	_var04, objptr
0a4a4     7B 00 00 FF 
0a4a8     C8 E4 85 F1 | 	sub	objptr, ##63176
0a4ac                 | '   q=lpeek(address+4+4*i)
0a4ac                 | '      for bit=0 to 31
0a4ac     00 08 06 F6 | 	mov	_var05, #0
0a4b0     97 94 48 FB | 	callpa	#(@LR__0871-@LR__0868)>>2,fcache_load_ptr_
0a4b4                 | LR__0868
0a4b4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0a4b4     7B 00 00 FF 
0a4b8     C8 E4 05 F1 | 	add	objptr, ##63176
0a4bc     F2 06 02 FB | 	rdlong	_var04, objptr
0a4c0     7B 00 00 FF 
0a4c4     C8 E4 85 F1 | 	sub	objptr, ##63176
0a4c8     04 05 C2 F9 | 	decod	_var03, _var05
0a4cc     02 07 CA F7 | 	test	_var04, _var03 wz
0a4d0     80 00 90 AD |  if_e	jmp	#LR__0869
0a4d4     04 0B 02 F6 | 	mov	_var06, _var05
0a4d8     02 0A 66 F0 | 	shl	_var06, #2
0a4dc     80 04 06 F6 | 	mov	_var03, #128
0a4e0     05 05 02 F1 | 	add	_var03, _var06
0a4e4     77 00 00 FF 
0a4e8     90 E4 05 F1 | 	add	objptr, ##61072
0a4ec     F2 04 02 F1 | 	add	_var03, objptr
0a4f0     02 FF 48 FC | 	wrbyte	#127, _var03
0a4f4     04 0B 02 F6 | 	mov	_var06, _var05
0a4f8     02 0A 66 F0 | 	shl	_var06, #2
0a4fc     80 04 06 F6 | 	mov	_var03, #128
0a500     05 05 02 F1 | 	add	_var03, _var06
0a504     01 04 06 F1 | 	add	_var03, #1
0a508     F2 04 02 F1 | 	add	_var03, objptr
0a50c     02 01 49 FC | 	wrbyte	#128, _var03
0a510     04 0B 02 F6 | 	mov	_var06, _var05
0a514     02 0A 66 F0 | 	shl	_var06, #2
0a518     80 04 06 F6 | 	mov	_var03, #128
0a51c     05 05 02 F1 | 	add	_var03, _var06
0a520     02 04 06 F1 | 	add	_var03, #2
0a524     F2 04 02 F1 | 	add	_var03, objptr
0a528     02 FF 48 FC | 	wrbyte	#127, _var03
0a52c     04 0B 02 F6 | 	mov	_var06, _var05
0a530     02 0A 66 F0 | 	shl	_var06, #2
0a534     80 04 06 F6 | 	mov	_var03, #128
0a538     05 05 02 F1 | 	add	_var03, _var06
0a53c     03 04 06 F1 | 	add	_var03, #3
0a540     F2 04 02 F1 | 	add	_var03, objptr
0a544     02 01 49 FC | 	wrbyte	#128, _var03
0a548     77 00 00 FF 
0a54c     90 E4 85 F1 | 	sub	objptr, ##61072
0a550     7C 00 90 FD | 	jmp	#LR__0870
0a554                 | LR__0869
0a554     04 0B 02 F6 | 	mov	_var06, _var05
0a558     02 0A 66 F0 | 	shl	_var06, #2
0a55c     80 04 06 F6 | 	mov	_var03, #128
0a560     05 05 02 F1 | 	add	_var03, _var06
0a564     77 00 00 FF 
0a568     90 E4 05 F1 | 	add	objptr, ##61072
0a56c     F2 04 02 F1 | 	add	_var03, objptr
0a570     02 01 49 FC | 	wrbyte	#128, _var03
0a574     04 0B 02 F6 | 	mov	_var06, _var05
0a578     02 0A 66 F0 | 	shl	_var06, #2
0a57c     80 04 06 F6 | 	mov	_var03, #128
0a580     05 05 02 F1 | 	add	_var03, _var06
0a584     01 04 06 F1 | 	add	_var03, #1
0a588     F2 04 02 F1 | 	add	_var03, objptr
0a58c     02 01 49 FC | 	wrbyte	#128, _var03
0a590     04 0B 02 F6 | 	mov	_var06, _var05
0a594     02 0A 66 F0 | 	shl	_var06, #2
0a598     80 04 06 F6 | 	mov	_var03, #128
0a59c     05 05 02 F1 | 	add	_var03, _var06
0a5a0     02 04 06 F1 | 	add	_var03, #2
0a5a4     F2 04 02 F1 | 	add	_var03, objptr
0a5a8     02 FF 48 FC | 	wrbyte	#127, _var03
0a5ac     04 0B 02 F6 | 	mov	_var06, _var05
0a5b0     02 0A 66 F0 | 	shl	_var06, #2
0a5b4     80 04 06 F6 | 	mov	_var03, #128
0a5b8     05 05 02 F1 | 	add	_var03, _var06
0a5bc     03 04 06 F1 | 	add	_var03, #3
0a5c0     F2 04 02 F1 | 	add	_var03, objptr
0a5c4     02 FF 48 FC | 	wrbyte	#127, _var03
0a5c8     77 00 00 FF 
0a5cc     90 E4 85 F1 | 	sub	objptr, ##61072
0a5d0                 | LR__0870
0a5d0     01 08 06 F1 | 	add	_var05, #1
0a5d4     20 08 56 F2 | 	cmps	_var05, #32 wc
0a5d8     D8 FE 9F CD |  if_b	jmp	#LR__0868
0a5dc                 | LR__0871
0a5dc     02 02 06 F1 | 	add	_var02, #2
0a5e0     40 02 56 F2 | 	cmps	_var02, #64 wc
0a5e4     3C FD 9F CD |  if_b	jmp	#LR__0860
0a5e8                 | ' do: loop until lpeek(base+32*7)>32768
0a5e8     56 00 00 FF 
0a5ec     F4 E5 05 F1 | 	add	objptr, ##44532
0a5f0     97 84 48 FB | 	callpa	#(@LR__0880-@LR__0872)>>2,fcache_load_ptr_
0a5f4                 | LR__0872
0a5f4     F2 12 02 FB | 	rdlong	arg01, objptr
0a5f8     E0 12 06 F1 | 	add	arg01, #224
0a5fc     09 FB 01 FB | 	rdlong	result1, arg01
0a600     40 00 00 FF 
0a604     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0a608     E8 FF 9F CD |  if_b	jmp	#LR__0872
0a60c     56 00 00 FF 
0a610     F4 E5 85 F1 | 	sub	objptr, ##44532
0a614                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a614     00 02 06 F6 | 	mov	_var02, #0
0a618                 | LR__0873
0a618     01 07 52 F6 | 	abs	_var04, _var02 wc
0a61c     07 06 06 F5 | 	and	_var04, #7
0a620     03 07 82 F6 | 	negc	_var04, _var04
0a624     04 06 56 F2 | 	cmps	_var04, #4 wc
0a628     20 00 90 3D |  if_ae	jmp	#LR__0874
0a62c     01 0B 02 F6 | 	mov	_var06, _var02
0a630     77 00 00 FF 
0a634     90 E4 05 F1 | 	add	objptr, ##61072
0a638     F2 0A 02 F1 | 	add	_var06, objptr
0a63c     05 FF 48 FC | 	wrbyte	#127, _var06
0a640     77 00 00 FF 
0a644     90 E4 85 F1 | 	sub	objptr, ##61072
0a648     1C 00 90 FD | 	jmp	#LR__0875
0a64c                 | LR__0874
0a64c     01 0B 02 F6 | 	mov	_var06, _var02
0a650     77 00 00 FF 
0a654     90 E4 05 F1 | 	add	objptr, ##61072
0a658     F2 0A 02 F1 | 	add	_var06, objptr
0a65c     05 01 49 FC | 	wrbyte	#128, _var06
0a660     77 00 00 FF 
0a664     90 E4 85 F1 | 	sub	objptr, ##61072
0a668                 | LR__0875
0a668     01 02 06 F1 | 	add	_var02, #1
0a66c     80 02 56 F2 | 	cmps	_var02, #128 wc
0a670     A4 FF 9F CD |  if_b	jmp	#LR__0873
0a674                 | ' 
0a674                 | ' do: loop until lpeek(base+32*7)<32768
0a674     56 00 00 FF 
0a678     F4 E5 05 F1 | 	add	objptr, ##44532
0a67c                 | LR__0876
0a67c     F2 12 02 FB | 	rdlong	arg01, objptr
0a680     E0 12 06 F1 | 	add	arg01, #224
0a684     09 FB 01 FB | 	rdlong	result1, arg01
0a688     40 00 00 FF 
0a68c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0a690     E8 FF 9F 3D |  if_ae	jmp	#LR__0876
0a694     56 00 00 FF 
0a698     F4 E5 85 F1 | 	sub	objptr, ##44532
0a69c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a69c     80 02 06 F6 | 	mov	_var02, #128
0a6a0                 | LR__0877
0a6a0     01 07 52 F6 | 	abs	_var04, _var02 wc
0a6a4     07 06 06 F5 | 	and	_var04, #7
0a6a8     03 07 82 F6 | 	negc	_var04, _var04
0a6ac     04 06 56 F2 | 	cmps	_var04, #4 wc
0a6b0     20 00 90 3D |  if_ae	jmp	#LR__0878
0a6b4     01 0B 02 F6 | 	mov	_var06, _var02
0a6b8     77 00 00 FF 
0a6bc     90 E4 05 F1 | 	add	objptr, ##61072
0a6c0     F2 0A 02 F1 | 	add	_var06, objptr
0a6c4     05 FF 48 FC | 	wrbyte	#127, _var06
0a6c8     77 00 00 FF 
0a6cc     90 E4 85 F1 | 	sub	objptr, ##61072
0a6d0     1C 00 90 FD | 	jmp	#LR__0879
0a6d4                 | LR__0878
0a6d4     01 0B 02 F6 | 	mov	_var06, _var02
0a6d8     77 00 00 FF 
0a6dc     90 E4 05 F1 | 	add	objptr, ##61072
0a6e0     F2 0A 02 F1 | 	add	_var06, objptr
0a6e4     05 01 49 FC | 	wrbyte	#128, _var06
0a6e8     77 00 00 FF 
0a6ec     90 E4 85 F1 | 	sub	objptr, ##61072
0a6f0                 | LR__0879
0a6f0     01 02 06 F1 | 	add	_var02, #1
0a6f4     00 03 16 F2 | 	cmp	_var02, #256 wc
0a6f8     A4 FF 9F CD |  if_b	jmp	#LR__0877
0a6fc                 | LR__0880
0a6fc                 | _csave_block_ret
0a6fc     2D 00 64 FD | 	ret
0a700                 | 
0a700                 | ' 
0a700                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0a700                 | _csave_addtoblock
0a700     04 4A 05 F6 | 	mov	COUNT_, #4
0a704     A8 00 A0 FD | 	call	#pushregs_
0a708     09 1F 02 F6 | 	mov	local01, arg01
0a70c                 | ' 
0a70c                 | ' 
0a70c                 | ' if force=0 then
0a70c     07 14 4E F7 | 	zerox	arg02, #7 wz
0a710     78 00 90 5D |  if_ne	jmp	#LR__0890
0a714     79 00 00 FF 
0a718     90 E5 05 F1 | 	add	objptr, ##62352
0a71c     F2 14 02 FB | 	rdlong	arg02, objptr
0a720     02 00 00 FF 
0a724     00 E4 85 F1 | 	sub	objptr, ##1024
0a728     F2 14 02 F1 | 	add	arg02, objptr
0a72c     0A 1F 42 FC | 	wrbyte	local01, arg02
0a730     02 00 00 FF 
0a734     00 E4 05 F1 | 	add	objptr, ##1024
0a738     F2 1E 02 FB | 	rdlong	local01, objptr
0a73c     01 1E 06 F1 | 	add	local01, #1
0a740     F2 1E 62 FC | 	wrlong	local01, objptr
0a744                 | '   block(blockptr)=d
0a744                 | '   blockptr+=1
0a744                 | '   if blockptr>=255 then
0a744     79 00 00 FF 
0a748     90 E5 85 F1 | 	sub	objptr, ##62352
0a74c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0a750     E4 00 90 CD |  if_b	jmp	#LR__0894
0a754     77 00 00 FF 
0a758     90 E5 05 F1 | 	add	objptr, ##61328
0a75c     F2 12 02 F6 | 	mov	arg01, objptr
0a760     77 00 00 FF 
0a764     90 E5 85 F1 | 	sub	objptr, ##61328
0a768     B0 FB BF FD | 	call	#_csave_block
0a76c     79 00 00 FF 
0a770     90 E5 05 F1 | 	add	objptr, ##62352
0a774     F2 00 68 FC | 	wrlong	#0, objptr
0a778     79 00 00 FF 
0a77c     90 E5 85 F1 | 	sub	objptr, ##62352
0a780     2C 13 06 F6 | 	mov	arg01, #300
0a784     AC 19 B1 FD | 	call	#__system___waitms
0a788     AC 00 90 FD | 	jmp	#LR__0894
0a78c                 | LR__0890
0a78c     79 00 00 FF 
0a790     90 E5 05 F1 | 	add	objptr, ##62352
0a794     F2 20 02 FB | 	rdlong	local02, objptr
0a798     02 00 00 FF 
0a79c     00 E4 85 F1 | 	sub	objptr, ##1024
0a7a0     F2 20 02 F1 | 	add	local02, objptr
0a7a4     10 1F 42 FC | 	wrbyte	local01, local02
0a7a8                 | '   block(blockptr)=d
0a7a8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0a7a8     02 00 00 FF 
0a7ac     00 E4 05 F1 | 	add	objptr, ##1024
0a7b0     F2 22 02 FB | 	rdlong	local03, objptr
0a7b4     79 00 00 FF 
0a7b8     90 E5 85 F1 | 	sub	objptr, ##62352
0a7bc     FF 22 16 F2 | 	cmp	local03, #255 wc
0a7c0     40 00 90 3D |  if_ae	jmp	#LR__0893
0a7c4     79 00 00 FF 
0a7c8     90 E5 05 F1 | 	add	objptr, ##62352
0a7cc     F2 24 02 FB | 	rdlong	local04, objptr
0a7d0     79 00 00 FF 
0a7d4     90 E5 85 F1 | 	sub	objptr, ##62352
0a7d8                 | LR__0891
0a7d8     00 25 56 F2 | 	cmps	local04, #256 wc
0a7dc     24 00 90 3D |  if_ae	jmp	#LR__0892
0a7e0     12 21 02 F6 | 	mov	local02, local04
0a7e4     77 00 00 FF 
0a7e8     90 E5 05 F1 | 	add	objptr, ##61328
0a7ec     F2 20 02 F1 | 	add	local02, objptr
0a7f0     10 01 48 FC | 	wrbyte	#0, local02
0a7f4     01 24 06 F1 | 	add	local04, #1
0a7f8     77 00 00 FF 
0a7fc     90 E5 85 F1 | 	sub	objptr, ##61328
0a800     D4 FF 9F FD | 	jmp	#LR__0891
0a804                 | LR__0892
0a804                 | LR__0893
0a804     77 00 00 FF 
0a808     90 E5 05 F1 | 	add	objptr, ##61328
0a80c     F2 12 02 F6 | 	mov	arg01, objptr
0a810     77 00 00 FF 
0a814     90 E5 85 F1 | 	sub	objptr, ##61328
0a818     00 FB BF FD | 	call	#_csave_block
0a81c     79 00 00 FF 
0a820     90 E5 05 F1 | 	add	objptr, ##62352
0a824     F2 00 68 FC | 	wrlong	#0, objptr
0a828     79 00 00 FF 
0a82c     90 E5 85 F1 | 	sub	objptr, ##62352
0a830     2C 13 06 F6 | 	mov	arg01, #300
0a834     FC 18 B1 FD | 	call	#__system___waitms
0a838                 | LR__0894
0a838     A7 F0 03 F6 | 	mov	ptra, fp
0a83c     B2 00 A0 FD | 	call	#popregs_
0a840                 | _csave_addtoblock_ret
0a840     2D 00 64 FD | 	ret
0a844                 | 
0a844                 | ' 
0a844                 | ' sub test_csave
0a844                 | _test_csave
0a844     04 4A 05 F6 | 	mov	COUNT_, #4
0a848     A8 00 A0 FD | 	call	#pushregs_
0a84c     C0 F0 07 F1 | 	add	ptra, #192
0a850                 | ' 'dim fileheader,savestart, saveptr as ulong
0a850                 | ' 
0a850                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0a850     6A 00 00 FF 
0a854     68 E4 05 F1 | 	add	objptr, ##54376
0a858     F2 12 02 FB | 	rdlong	arg01, objptr
0a85c     6A 00 00 FF 
0a860     68 E4 85 F1 | 	sub	objptr, ##54376
0a864     84 E1 B0 FD | 	call	#_pslpeek
0a868     FF FF 7F FF 
0a86c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0a870     0C 00 90 5D |  if_ne	jmp	#LR__0900
0a874     1B 12 06 F6 | 	mov	arg01, #27
0a878     DC DE B0 FD | 	call	#_printerror
0a87c     0C 03 90 FD | 	jmp	#LR__0912
0a880                 | LR__0900
0a880     04 F8 BF FD | 	call	#_pop
0a884     FF 1E 02 F6 | 	mov	local01, result3
0a888     90 4E 05 F1 | 	add	fp, #144
0a88c     A7 FA 61 FC | 	wrlong	result1, fp
0a890     04 4E 05 F1 | 	add	fp, #4
0a894     A7 FC 61 FC | 	wrlong	result2, fp
0a898     04 4E 05 F1 | 	add	fp, #4
0a89c     A7 1E 62 FC | 	wrlong	local01, fp
0a8a0                 | ' t1=pop()
0a8a0                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
0a8a0     98 4E 85 F1 | 	sub	fp, #152
0a8a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0a8a8     5C 01 00 5F 
0a8ac     A3 1F 06 56 |  if_ne	mov	local01, ##@LR__4866
0a8b0     8C 4E 05 51 |  if_ne	add	fp, #140
0a8b4     A7 1E 62 5C |  if_ne	wrlong	local01, fp
0a8b8     8C 4E 85 51 |  if_ne	sub	fp, #140
0a8bc     90 4E 05 A1 |  if_e	add	fp, #144
0a8c0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0a8c4     04 4E 85 A1 |  if_e	sub	fp, #4
0a8c8     A7 1E 62 AC |  if_e	wrlong	local01, fp
0a8cc     8C 4E 85 A1 |  if_e	sub	fp, #140
0a8d0                 | ' 
0a8d0                 | ' ' prepare 1 kHz header wave
0a8d0                 | ' 
0a8d0                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0a8d0     A7 00 68 FC | 	wrlong	#0, fp
0a8d4     97 34 48 FB | 	callpa	#(@LR__0904-@LR__0901)>>2,fcache_load_ptr_
0a8d8                 | LR__0901
0a8d8     A7 1E 02 FB | 	rdlong	local01, fp
0a8dc     0F 1F 52 F6 | 	abs	local01, local01 wc
0a8e0     07 1E 06 F5 | 	and	local01, #7
0a8e4     0F 1F 82 F6 | 	negc	local01, local01
0a8e8     04 1E 56 F2 | 	cmps	local01, #4 wc
0a8ec     20 00 90 3D |  if_ae	jmp	#LR__0902
0a8f0     A7 1E 02 FB | 	rdlong	local01, fp
0a8f4     77 00 00 FF 
0a8f8     90 E4 05 F1 | 	add	objptr, ##61072
0a8fc     F2 1E 02 F1 | 	add	local01, objptr
0a900     0F FF 48 FC | 	wrbyte	#127, local01
0a904     77 00 00 FF 
0a908     90 E4 85 F1 | 	sub	objptr, ##61072
0a90c     1C 00 90 FD | 	jmp	#LR__0903
0a910                 | LR__0902
0a910     A7 1E 02 FB | 	rdlong	local01, fp
0a914     77 00 00 FF 
0a918     90 E4 05 F1 | 	add	objptr, ##61072
0a91c     F2 1E 02 F1 | 	add	local01, objptr
0a920     0F 01 49 FC | 	wrbyte	#128, local01
0a924     77 00 00 FF 
0a928     90 E4 85 F1 | 	sub	objptr, ##61072
0a92c                 | LR__0903
0a92c     A7 1E 02 FB | 	rdlong	local01, fp
0a930     01 1E 06 F1 | 	add	local01, #1
0a934     A7 1E 62 FC | 	wrlong	local01, fp
0a938     00 1F 56 F2 | 	cmps	local01, #256 wc
0a93c     98 FF 9F CD |  if_b	jmp	#LR__0901
0a940                 | LR__0904
0a940     77 00 00 FF 
0a944     90 E4 05 F1 | 	add	objptr, ##61072
0a948     F2 14 02 F6 | 	mov	arg02, objptr
0a94c     07 12 06 F6 | 	mov	arg01, #7
0a950     0F 00 00 FF 
0a954     40 17 06 F6 | 	mov	arg03, ##8000
0a958     0E 18 C6 F9 | 	decod	arg04, #14
0a95c     00 1B 06 F6 | 	mov	arg05, #256
0a960     00 1C 06 F6 | 	mov	arg06, #0
0a964     6B 00 00 FF 
0a968     D0 E5 85 F1 | 	sub	objptr, ##55248
0a96c     1C 11 B1 FD | 	call	#_audio096_spin2_play8
0a970     0B 00 00 FF 
0a974     C0 E4 85 F1 | 	sub	objptr, ##5824
0a978     05 00 00 FF 
0a97c     B8 13 06 F6 | 	mov	arg01, ##3000
0a980     B0 17 B1 FD | 	call	#__system___waitms
0a984     79 00 00 FF 
0a988     90 E5 05 F1 | 	add	objptr, ##62352
0a98c     F2 00 68 FC | 	wrlong	#0, objptr
0a990     79 00 00 FF 
0a994     90 E5 85 F1 | 	sub	objptr, ##62352
0a998     72 12 06 F6 | 	mov	arg01, #114
0a99c     00 14 06 F6 | 	mov	arg02, #0
0a9a0     5C FD BF FD | 	call	#_csave_addtoblock
0a9a4     62 12 06 F6 | 	mov	arg01, #98
0a9a8     00 14 06 F6 | 	mov	arg02, #0
0a9ac     50 FD BF FD | 	call	#_csave_addtoblock
0a9b0     61 12 06 F6 | 	mov	arg01, #97
0a9b4     00 14 06 F6 | 	mov	arg02, #0
0a9b8     44 FD BF FD | 	call	#_csave_addtoblock
0a9bc     0D 12 06 F6 | 	mov	arg01, #13
0a9c0     00 14 06 F6 | 	mov	arg02, #0
0a9c4     38 FD BF FD | 	call	#_csave_addtoblock
0a9c8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0a9c8                 | ' waitms 3000 
0a9c8                 | ' 
0a9c8                 | ' blockptr=0
0a9c8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0a9c8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0a9c8     A7 02 68 FC | 	wrlong	#1, fp
0a9cc     8C 4E 05 F1 | 	add	fp, #140
0a9d0     A7 12 02 FB | 	rdlong	arg01, fp
0a9d4     8C 4E 85 F1 | 	sub	fp, #140
0a9d8     09 21 02 F6 | 	mov	local02, arg01
0a9dc     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a9e0                 | LR__0905
0a9e0     10 FB C9 FA | 	rdbyte	result1, local02 wz
0a9e4     01 20 06 51 |  if_ne	add	local02, #1
0a9e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a9ec                 | LR__0906
0a9ec     09 21 82 F1 | 	sub	local02, arg01
0a9f0     10 23 02 F6 | 	mov	local03, local02
0a9f4     01 22 06 F1 | 	add	local03, #1
0a9f8                 | LR__0907
0a9f8     A7 1E 02 FB | 	rdlong	local01, fp
0a9fc     11 1F 52 F2 | 	cmps	local01, local03 wc
0aa00     34 00 90 3D |  if_ae	jmp	#LR__0908
0aa04     8C 4E 05 F1 | 	add	fp, #140
0aa08     A7 12 02 FB | 	rdlong	arg01, fp
0aa0c     8C 4E 85 F1 | 	sub	fp, #140
0aa10     A7 14 02 FB | 	rdlong	arg02, fp
0aa14     01 16 06 F6 | 	mov	arg03, #1
0aa18     80 35 B1 FD | 	call	#__system__Mid_S
0aa1c     FD 12 C2 FA | 	rdbyte	arg01, result1
0aa20     00 14 06 F6 | 	mov	arg02, #0
0aa24     D8 FC BF FD | 	call	#_csave_addtoblock
0aa28     A7 1E 02 FB | 	rdlong	local01, fp
0aa2c     01 1E 06 F1 | 	add	local01, #1
0aa30     A7 1E 62 FC | 	wrlong	local01, fp
0aa34     C0 FF 9F FD | 	jmp	#LR__0907
0aa38                 | LR__0908
0aa38     00 12 06 F6 | 	mov	arg01, #0
0aa3c     00 14 06 F6 | 	mov	arg02, #0
0aa40     BC FC BF FD | 	call	#_csave_addtoblock
0aa44     72 12 06 F6 | 	mov	arg01, #114
0aa48     00 14 06 F6 | 	mov	arg02, #0
0aa4c     B0 FC BF FD | 	call	#_csave_addtoblock
0aa50     62 12 06 F6 | 	mov	arg01, #98
0aa54     00 14 06 F6 | 	mov	arg02, #0
0aa58     A4 FC BF FD | 	call	#_csave_addtoblock
0aa5c     73 12 06 F6 | 	mov	arg01, #115
0aa60     00 14 06 F6 | 	mov	arg02, #0
0aa64     98 FC BF FD | 	call	#_csave_addtoblock
0aa68     0D 12 06 F6 | 	mov	arg01, #13
0aa6c     00 14 06 F6 | 	mov	arg02, #0
0aa70     8C FC BF FD | 	call	#_csave_addtoblock
0aa74     6A 00 00 FF 
0aa78     68 E4 05 F1 | 	add	objptr, ##54376
0aa7c     F2 1E 02 FB | 	rdlong	local01, objptr
0aa80     6A 00 00 FF 
0aa84     68 E4 85 F1 | 	sub	objptr, ##54376
0aa88     9C 4E 05 F1 | 	add	fp, #156
0aa8c     A7 1E 62 FC | 	wrlong	local01, fp
0aa90     9C 4E 85 F1 | 	sub	fp, #156
0aa94                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0aa94                 | ' 
0aa94                 | ' saveptr=programstart
0aa94                 | ' do
0aa94                 | LR__0909
0aa94     A0 4E 05 F1 | 	add	fp, #160
0aa98     A7 12 02 F6 | 	mov	arg01, fp
0aa9c     04 4E 85 F1 | 	sub	fp, #4
0aaa0     A7 14 02 FB | 	rdlong	arg02, fp
0aaa4     9C 4E 85 F1 | 	sub	fp, #156
0aaa8     18 16 06 F6 | 	mov	arg03, #24
0aaac     0B 00 00 FF 
0aab0     C0 E4 05 F1 | 	add	objptr, ##5824
0aab4     20 08 B1 FD | 	call	#_psram_spin2_read1
0aab8     0C 4E 05 F1 | 	add	fp, #12
0aabc     A7 12 02 F6 | 	mov	arg01, fp
0aac0     9C 4E 05 F1 | 	add	fp, #156
0aac4     A7 14 02 FB | 	rdlong	arg02, fp
0aac8     04 4E 05 F1 | 	add	fp, #4
0aacc     A7 16 02 FB | 	rdlong	arg03, fp
0aad0     AC 4E 85 F1 | 	sub	fp, #172
0aad4     00 08 B1 FD | 	call	#_psram_spin2_read1
0aad8     0B 00 00 FF 
0aadc     C0 E4 85 F1 | 	sub	objptr, ##5824
0aae0     AC 4E 05 F1 | 	add	fp, #172
0aae4     A7 12 02 FB | 	rdlong	arg01, fp
0aae8     AC 4E 85 F1 | 	sub	fp, #172
0aaec     00 14 06 F6 | 	mov	arg02, #0
0aaf0     0C FC BF FD | 	call	#_csave_addtoblock
0aaf4                 | '   psram.read1(varptr(header(0)),saveptr,24)
0aaf4                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0aaf4                 | '   csave_addtoblock(header(3),0) ' that's always <255
0aaf4                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0aaf4     A7 00 68 FC | 	wrlong	#0, fp
0aaf8     AC 4E 05 F1 | 	add	fp, #172
0aafc     A7 24 02 FB | 	rdlong	local04, fp
0ab00     AC 4E 85 F1 | 	sub	fp, #172
0ab04                 | LR__0910
0ab04     A7 1E 02 FB | 	rdlong	local01, fp
0ab08     12 1F 52 F2 | 	cmps	local01, local04 wc
0ab0c     2C 00 90 3D |  if_ae	jmp	#LR__0911
0ab10     A7 22 02 FB | 	rdlong	local03, fp
0ab14     0C 4E 05 F1 | 	add	fp, #12
0ab18     A7 22 02 F1 | 	add	local03, fp
0ab1c     11 13 C2 FA | 	rdbyte	arg01, local03
0ab20     00 14 06 F6 | 	mov	arg02, #0
0ab24     0C 4E 85 F1 | 	sub	fp, #12
0ab28     D4 FB BF FD | 	call	#_csave_addtoblock
0ab2c     A7 22 02 FB | 	rdlong	local03, fp
0ab30     01 22 06 F1 | 	add	local03, #1
0ab34     A7 22 62 FC | 	wrlong	local03, fp
0ab38     C8 FF 9F FD | 	jmp	#LR__0910
0ab3c                 | LR__0911
0ab3c     B4 4E 05 F1 | 	add	fp, #180
0ab40     A7 1E 02 FB | 	rdlong	local01, fp
0ab44     18 4E 85 F1 | 	sub	fp, #24
0ab48     A7 1E 62 FC | 	wrlong	local01, fp
0ab4c     18 4E 05 F1 | 	add	fp, #24
0ab50     A7 1E 02 FB | 	rdlong	local01, fp
0ab54     B4 4E 85 F1 | 	sub	fp, #180
0ab58     FF FF 3F FF 
0ab5c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ab60     30 FF 9F 5D |  if_ne	jmp	#LR__0909
0ab64     00 12 06 F6 | 	mov	arg01, #0
0ab68     01 14 06 F6 | 	mov	arg02, #1
0ab6c     90 FB BF FD | 	call	#_csave_addtoblock
0ab70     56 00 00 FF 
0ab74     F4 E5 05 F1 | 	add	objptr, ##44532
0ab78     F2 12 02 FB | 	rdlong	arg01, objptr
0ab7c     56 00 00 FF 
0ab80     F4 E5 85 F1 | 	sub	objptr, ##44532
0ab84     F4 12 06 F1 | 	add	arg01, #244
0ab88     09 01 58 FC | 	wrword	#0, arg01
0ab8c                 | LR__0912
0ab8c     A7 F0 03 F6 | 	mov	ptra, fp
0ab90     B2 00 A0 FD | 	call	#popregs_
0ab94                 | _test_csave_ret
0ab94     2D 00 64 FD | 	ret
0ab98                 | 
0ab98                 | ' 
0ab98                 | ' ' ----------------- Save the program
0ab98                 | ' 
0ab98                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0ab98                 | _do_save
0ab98     02 4A 05 F6 | 	mov	COUNT_, #2
0ab9c     A8 00 A0 FD | 	call	#pushregs_
0aba0     01 00 00 FF 
0aba4     BC F0 07 F1 | 	add	ptra, ##700
0aba8     01 00 00 FF 
0abac     10 4E 05 F1 | 	add	fp, ##528
0abb0     B1 B0 86 FF 
0abb4     A7 E4 68 FC | 	wrlong	##224486002, fp
0abb8     01 00 00 FF 
0abbc     10 4E 85 F1 | 	sub	fp, ##528
0abc0     C4 F4 BF FD | 	call	#_pop
0abc4     FF 16 02 F6 | 	mov	arg03, result3
0abc8     A7 FA 61 FC | 	wrlong	result1, fp
0abcc     04 4E 05 F1 | 	add	fp, #4
0abd0     A7 FC 61 FC | 	wrlong	result2, fp
0abd4     04 4E 05 F1 | 	add	fp, #4
0abd8     A7 16 62 FC | 	wrlong	arg03, fp
0abdc     08 4E 85 F1 | 	sub	fp, #8
0abe0                 | ' 
0abe0                 | ' fileheader=$0D616272' rba+ver'
0abe0                 | ' 
0abe0                 | ' t1=pop() 
0abe0                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0abe0     6A 00 00 FF 
0abe4     68 E4 05 F1 | 	add	objptr, ##54376
0abe8     F2 12 02 FB | 	rdlong	arg01, objptr
0abec     6A 00 00 FF 
0abf0     68 E4 85 F1 | 	sub	objptr, ##54376
0abf4     F4 DD B0 FD | 	call	#_pslpeek
0abf8     FF FF 7F FF 
0abfc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0ac00     0C 00 90 5D |  if_ne	jmp	#LR__0920
0ac04     1B 12 06 F6 | 	mov	arg01, #27
0ac08     4C DB B0 FD | 	call	#_printerror
0ac0c     68 02 90 FD | 	jmp	#LR__0926
0ac10                 | LR__0920
0ac10                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0ac10     08 4E 05 F1 | 	add	fp, #8
0ac14     A7 16 02 FB | 	rdlong	arg03, fp
0ac18     08 4E 85 F1 | 	sub	fp, #8
0ac1c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ac20     18 00 90 5D |  if_ne	jmp	#LR__0921
0ac24     A7 12 02 FB | 	rdlong	arg01, fp
0ac28     D8 33 B0 FD | 	call	#_convertstring
0ac2c     A7 FA 61 FC | 	wrlong	result1, fp
0ac30     08 4E 05 F1 | 	add	fp, #8
0ac34     A7 3E 68 FC | 	wrlong	#31, fp
0ac38     08 4E 85 F1 | 	sub	fp, #8
0ac3c                 | LR__0921
0ac3c                 | ' if t1.result_type=result_string then
0ac3c     08 4E 05 F1 | 	add	fp, #8
0ac40     A7 1E 02 FB | 	rdlong	local01, fp
0ac44     08 4E 85 F1 | 	sub	fp, #8
0ac48     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ac4c     28 02 90 5D |  if_ne	jmp	#LR__0925
0ac50                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0ac50     A7 12 02 FB | 	rdlong	arg01, fp
0ac54     5C 01 00 FF 
0ac58     AE 15 06 F6 | 	mov	arg02, ##@LR__4867
0ac5c     08 12 B1 FD | 	call	#__system___string_cmp
0ac60     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac64     5C 01 00 AF 
0ac68     AF 1F 06 A6 |  if_e	mov	local01, ##@LR__4868
0ac6c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0ac70                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0ac70     09 12 06 F6 | 	mov	arg01, #9
0ac74     88 61 B1 FD | 	call	#__system__close
0ac78     09 1E 06 F6 | 	mov	local01, #9
0ac7c     72 00 00 FF 
0ac80     78 E4 05 F1 | 	add	objptr, ##58488
0ac84     F2 12 02 FB | 	rdlong	arg01, objptr
0ac88     72 00 00 FF 
0ac8c     78 E4 85 F1 | 	sub	objptr, ##58488
0ac90     5C 01 00 FF 
0ac94     BA 15 06 F6 | 	mov	arg02, ##@LR__4869
0ac98     00 12 B1 FD | 	call	#__system___string_concat
0ac9c     FD 12 02 F6 | 	mov	arg01, result1
0aca0     A7 14 02 FB | 	rdlong	arg02, fp
0aca4     F4 11 B1 FD | 	call	#__system___string_concat
0aca8     FD 14 02 F6 | 	mov	arg02, result1
0acac     0F 13 02 F6 | 	mov	arg01, local01
0acb0     0D 16 06 F6 | 	mov	arg03, #13
0acb4     88 1D B1 FD | 	call	#__system___basic_open_string
0acb8     01 00 00 FF 
0acbc     0C 4E 05 F1 | 	add	fp, ##524
0acc0     A7 0A 68 FC | 	wrlong	#5, fp
0acc4     6A 00 00 FF 
0acc8     68 E4 05 F1 | 	add	objptr, ##54376
0accc     F2 1E 02 FB | 	rdlong	local01, objptr
0acd0     6A 00 00 FF 
0acd4     68 E4 85 F1 | 	sub	objptr, ##54376
0acd8     0C 4E 05 F1 | 	add	fp, #12
0acdc     A7 1E 62 FC | 	wrlong	local01, fp
0ace0     01 00 00 FF 
0ace4     18 4E 85 F1 | 	sub	fp, ##536
0ace8                 | ' '  put #9,1,fileheader,1
0ace8                 | '   i=5
0ace8                 | '   saveptr=programstart
0ace8                 | '   do
0ace8                 | LR__0922
0ace8     01 00 00 FF 
0acec     1C 4E 05 F1 | 	add	fp, ##540
0acf0     A7 12 02 F6 | 	mov	arg01, fp
0acf4     04 4E 85 F1 | 	sub	fp, #4
0acf8     A7 14 02 FB | 	rdlong	arg02, fp
0acfc     01 00 00 FF 
0ad00     18 4E 85 F1 | 	sub	fp, ##536
0ad04     18 16 06 F6 | 	mov	arg03, #24
0ad08     0B 00 00 FF 
0ad0c     C0 E4 05 F1 | 	add	objptr, ##5824
0ad10     C4 05 B1 FD | 	call	#_psram_spin2_read1
0ad14     01 00 00 FF 
0ad18     34 4E 05 F1 | 	add	fp, ##564
0ad1c     A7 12 02 F6 | 	mov	arg01, fp
0ad20     10 4E 85 F1 | 	sub	fp, #16
0ad24     A7 14 02 FB | 	rdlong	arg02, fp
0ad28     04 4E 05 F1 | 	add	fp, #4
0ad2c     A7 16 02 FB | 	rdlong	arg03, fp
0ad30     01 00 00 FF 
0ad34     28 4E 85 F1 | 	sub	fp, ##552
0ad38     9C 05 B1 FD | 	call	#_psram_spin2_read1
0ad3c     0B 00 00 FF 
0ad40     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad44     5C 01 00 FF 
0ad48     BC 1F 06 F6 | 	mov	local01, ##@LR__4870
0ad4c     01 00 00 FF 
0ad50     B4 4E 05 F1 | 	add	fp, ##692
0ad54     A7 1E 62 FC | 	wrlong	local01, fp
0ad58                 | '     psram.read1(varptr(header(0)),saveptr,24)
0ad58                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0ad58                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0ad58     A8 4E 85 F1 | 	sub	fp, #168
0ad5c     A7 02 68 FC | 	wrlong	#1, fp
0ad60     1C 4E 05 F1 | 	add	fp, #28
0ad64     A7 20 02 FB | 	rdlong	local02, fp
0ad68     01 00 00 FF 
0ad6c     28 4E 85 F1 | 	sub	fp, ##552
0ad70     01 20 06 F1 | 	add	local02, #1
0ad74                 | LR__0923
0ad74     01 00 00 FF 
0ad78     0C 4E 05 F1 | 	add	fp, ##524
0ad7c     A7 1E 02 FB | 	rdlong	local01, fp
0ad80     01 00 00 FF 
0ad84     0C 4E 85 F1 | 	sub	fp, ##524
0ad88     10 1F 52 F2 | 	cmps	local01, local02 wc
0ad8c     64 00 90 3D |  if_ae	jmp	#LR__0924
0ad90     01 00 00 FF 
0ad94     B4 4E 05 F1 | 	add	fp, ##692
0ad98     A7 1E 02 FB | 	rdlong	local01, fp
0ad9c     A8 4E 85 F1 | 	sub	fp, #168
0ada0     A7 16 02 FB | 	rdlong	arg03, fp
0ada4     01 16 86 F1 | 	sub	arg03, #1
0ada8     28 4E 05 F1 | 	add	fp, #40
0adac     A7 16 02 F1 | 	add	arg03, fp
0adb0     0B 13 C2 FA | 	rdbyte	arg01, arg03
0adb4     01 00 00 FF 
0adb8     34 4E 85 F1 | 	sub	fp, ##564
0adbc     88 32 B1 FD | 	call	#__system__Chr_S
0adc0     FD 14 02 F6 | 	mov	arg02, result1
0adc4     0F 13 02 F6 | 	mov	arg01, local01
0adc8     D0 10 B1 FD | 	call	#__system___string_concat
0adcc     01 00 00 FF 
0add0     B4 4E 05 F1 | 	add	fp, ##692
0add4     A7 FA 61 FC | 	wrlong	result1, fp
0add8     A8 4E 85 F1 | 	sub	fp, #168
0addc     A7 1E 02 FB | 	rdlong	local01, fp
0ade0     01 1E 06 F1 | 	add	local01, #1
0ade4     A7 1E 62 FC | 	wrlong	local01, fp
0ade8     01 00 00 FF 
0adec     0C 4E 85 F1 | 	sub	fp, ##524
0adf0     80 FF 9F FD | 	jmp	#LR__0923
0adf4                 | LR__0924
0adf4                 | '  '   put #9,i,header(3),1 : i+=4
0adf4                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0adf4                 | '      print #9, saveline$
0adf4     09 12 06 F6 | 	mov	arg01, #9
0adf8     D4 69 B1 FD | 	call	#__system___getiolock_0472
0adfc     FD 12 02 F6 | 	mov	arg01, result1
0ae00     3C 10 B1 FD | 	call	#__system___lockmem
0ae04     01 00 00 FF 
0ae08     B4 4E 05 F1 | 	add	fp, ##692
0ae0c     A7 14 02 FB | 	rdlong	arg02, fp
0ae10     01 00 00 FF 
0ae14     B4 4E 85 F1 | 	sub	fp, ##692
0ae18     09 12 06 F6 | 	mov	arg01, #9
0ae1c     00 16 06 F6 | 	mov	arg03, #0
0ae20     20 1D B1 FD | 	call	#__system___basic_print_string
0ae24     09 12 06 F6 | 	mov	arg01, #9
0ae28     0A 14 06 F6 | 	mov	arg02, #10
0ae2c     00 16 06 F6 | 	mov	arg03, #0
0ae30     B8 1C B1 FD | 	call	#__system___basic_print_char
0ae34     09 12 06 F6 | 	mov	arg01, #9
0ae38     94 69 B1 FD | 	call	#__system___getiolock_0472
0ae3c     FD 00 68 FC | 	wrlong	#0, result1
0ae40     01 00 00 FF 
0ae44     30 4E 05 F1 | 	add	fp, ##560
0ae48     A7 1E 02 FB | 	rdlong	local01, fp
0ae4c     18 4E 85 F1 | 	sub	fp, #24
0ae50     A7 1E 62 FC | 	wrlong	local01, fp
0ae54     18 4E 05 F1 | 	add	fp, #24
0ae58     A7 1E 02 FB | 	rdlong	local01, fp
0ae5c     01 00 00 FF 
0ae60     30 4E 85 F1 | 	sub	fp, ##560
0ae64     FF FF 3F FF 
0ae68     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0ae6c     78 FE 9F 5D |  if_ne	jmp	#LR__0922
0ae70                 | '   close #9  
0ae70     09 12 06 F6 | 	mov	arg01, #9
0ae74     88 5F B1 FD | 	call	#__system__close
0ae78                 | LR__0925
0ae78                 | LR__0926
0ae78     A7 F0 03 F6 | 	mov	ptra, fp
0ae7c     B2 00 A0 FD | 	call	#popregs_
0ae80                 | _do_save_ret
0ae80     2D 00 64 FD | 	ret
0ae84                 | 
0ae84                 | ' 
0ae84                 | ' '----------------- Load the program
0ae84                 | ' 'lo todo: errors while loading
0ae84                 | ' sub do_load
0ae84                 | _do_load
0ae84     01 4A 05 F6 | 	mov	COUNT_, #1
0ae88     A8 00 A0 FD | 	call	#pushregs_
0ae8c     A4 F0 07 F1 | 	add	ptra, #164
0ae90     A0 4E 05 F1 | 	add	fp, #160
0ae94     A7 12 02 F6 | 	mov	arg01, fp
0ae98     80 4E 85 F1 | 	sub	fp, #128
0ae9c     A7 14 02 F6 | 	mov	arg02, fp
0aea0     20 4E 85 F1 | 	sub	fp, #32
0aea4     09 15 62 FC | 	wrlong	arg02, arg01
0aea8     DC F1 BF FD | 	call	#_pop
0aeac     FF 1A 02 F6 | 	mov	arg05, result3
0aeb0     A7 FA 61 FC | 	wrlong	result1, fp
0aeb4     04 4E 05 F1 | 	add	fp, #4
0aeb8     A7 FC 61 FC | 	wrlong	result2, fp
0aebc     04 4E 05 F1 | 	add	fp, #4
0aec0     A7 1A 62 FC | 	wrlong	arg05, fp
0aec4                 | ' 
0aec4                 | ' lpoke varptr(line2$),varptr(line2)
0aec4                 | ' t1=pop() 
0aec4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0aec4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0aec4     08 4E 85 F1 | 	sub	fp, #8
0aec8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0aecc     18 00 90 5D |  if_ne	jmp	#LR__0930
0aed0     A7 12 02 FB | 	rdlong	arg01, fp
0aed4     2C 31 B0 FD | 	call	#_convertstring
0aed8     A7 FA 61 FC | 	wrlong	result1, fp
0aedc     08 4E 05 F1 | 	add	fp, #8
0aee0     A7 3E 68 FC | 	wrlong	#31, fp
0aee4     08 4E 85 F1 | 	sub	fp, #8
0aee8                 | LR__0930
0aee8                 | ' if t1.result_type=result_string then
0aee8     08 4E 05 F1 | 	add	fp, #8
0aeec     A7 1E 02 FB | 	rdlong	local01, fp
0aef0     08 4E 85 F1 | 	sub	fp, #8
0aef4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0aef8     40 03 90 5D |  if_ne	jmp	#LR__0937
0aefc     7C 2B B0 FD | 	call	#_do_new
0af00                 | '   do_new
0af00                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0af00     A7 12 02 FB | 	rdlong	arg01, fp
0af04     5C 01 00 FF 
0af08     BD 15 06 F6 | 	mov	arg02, ##@LR__4871
0af0c     58 0F B1 FD | 	call	#__system___string_cmp
0af10     00 FA 0D F2 | 	cmp	result1, #0 wz
0af14     5C 01 00 AF 
0af18     BE 1F 06 A6 |  if_e	mov	local01, ##@LR__4872
0af1c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0af20                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0af20     09 12 06 F6 | 	mov	arg01, #9
0af24     D8 5E B1 FD | 	call	#__system__close
0af28     09 1E 06 F6 | 	mov	local01, #9
0af2c     72 00 00 FF 
0af30     78 E4 05 F1 | 	add	objptr, ##58488
0af34     F2 12 02 FB | 	rdlong	arg01, objptr
0af38     72 00 00 FF 
0af3c     78 E4 85 F1 | 	sub	objptr, ##58488
0af40     5C 01 00 FF 
0af44     C9 15 06 F6 | 	mov	arg02, ##@LR__4873
0af48     50 0F B1 FD | 	call	#__system___string_concat
0af4c     FD 12 02 F6 | 	mov	arg01, result1
0af50     A7 14 02 FB | 	rdlong	arg02, fp
0af54     44 0F B1 FD | 	call	#__system___string_concat
0af58     FD 14 02 F6 | 	mov	arg02, result1
0af5c     0F 13 02 F6 | 	mov	arg01, local01
0af60     00 16 06 F6 | 	mov	arg03, #0
0af64     D8 1A B1 FD | 	call	#__system___basic_open_string
0af68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0af6c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0af70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0af74     10 4E 05 F1 | 	add	fp, #16
0af78     A7 FA 61 FC | 	wrlong	result1, fp
0af7c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0af7c     10 4E 85 F1 | 	sub	fp, #16
0af80     9C 00 90 AD |  if_e	jmp	#LR__0931
0af84     00 12 06 F6 | 	mov	arg01, #0
0af88     44 68 B1 FD | 	call	#__system___getiolock_0472
0af8c     FD 12 02 F6 | 	mov	arg01, result1
0af90     AC 0E B1 FD | 	call	#__system___lockmem
0af94     5C 01 00 FF 
0af98     CB 15 06 F6 | 	mov	arg02, ##@LR__4874
0af9c     00 12 06 F6 | 	mov	arg01, #0
0afa0     00 16 06 F6 | 	mov	arg03, #0
0afa4     9C 1B B1 FD | 	call	#__system___basic_print_string
0afa8     10 4E 05 F1 | 	add	fp, #16
0afac     A7 14 02 FB | 	rdlong	arg02, fp
0afb0     10 4E 85 F1 | 	sub	fp, #16
0afb4     00 12 06 F6 | 	mov	arg01, #0
0afb8     00 16 06 F6 | 	mov	arg03, #0
0afbc     0A 18 06 F6 | 	mov	arg04, #10
0afc0     C4 1B B1 FD | 	call	#__system___basic_print_integer
0afc4     5C 01 00 FF 
0afc8     D9 15 06 F6 | 	mov	arg02, ##@LR__4875
0afcc     00 12 06 F6 | 	mov	arg01, #0
0afd0     00 16 06 F6 | 	mov	arg03, #0
0afd4     6C 1B B1 FD | 	call	#__system___basic_print_string
0afd8     10 4E 05 F1 | 	add	fp, #16
0afdc     A7 12 02 FB | 	rdlong	arg01, fp
0afe0     10 4E 85 F1 | 	sub	fp, #16
0afe4     E8 34 B1 FD | 	call	#__system___strerror
0afe8     FD 14 02 F6 | 	mov	arg02, result1
0afec     00 12 06 F6 | 	mov	arg01, #0
0aff0     00 16 06 F6 | 	mov	arg03, #0
0aff4     4C 1B B1 FD | 	call	#__system___basic_print_string
0aff8     00 12 06 F6 | 	mov	arg01, #0
0affc     0A 14 06 F6 | 	mov	arg02, #10
0b000     00 16 06 F6 | 	mov	arg03, #0
0b004     E4 1A B1 FD | 	call	#__system___basic_print_char
0b008     00 12 06 F6 | 	mov	arg01, #0
0b00c     C0 67 B1 FD | 	call	#__system___getiolock_0472
0b010     FD 00 68 FC | 	wrlong	#0, result1
0b014     09 12 06 F6 | 	mov	arg01, #9
0b018     E4 5D B1 FD | 	call	#__system__close
0b01c     24 02 90 FD | 	jmp	#LR__0939
0b020                 | LR__0931
0b020     0C 4E 05 F1 | 	add	fp, #12
0b024     A7 0A 68 FC | 	wrlong	#5, fp
0b028                 | '   i=5
0b028                 | '   get #9,1,header,1
0b028     0C 4E 05 F1 | 	add	fp, #12
0b02c     A7 16 02 F6 | 	mov	arg03, fp
0b030     18 4E 85 F1 | 	sub	fp, #24
0b034     09 12 06 F6 | 	mov	arg01, #9
0b038     01 14 06 F6 | 	mov	arg02, #1
0b03c     01 18 06 F6 | 	mov	arg04, #1
0b040     04 1A 06 F6 | 	mov	arg05, #4
0b044     0C 1C B1 FD | 	call	#__system___basic_get
0b048                 | '   
0b048                 | '   if header<>$0D616272 then 
0b048     18 4E 05 F1 | 	add	fp, #24
0b04c     A7 1E 02 FB | 	rdlong	local01, fp
0b050     18 4E 85 F1 | 	sub	fp, #24
0b054     B1 B0 06 FF 
0b058     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0b05c     F0 00 90 AD |  if_e	jmp	#LR__0934
0b060                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b060     09 12 06 F6 | 	mov	arg01, #9
0b064     98 5D B1 FD | 	call	#__system__close
0b068     09 1E 06 F6 | 	mov	local01, #9
0b06c     72 00 00 FF 
0b070     78 E4 05 F1 | 	add	objptr, ##58488
0b074     F2 12 02 FB | 	rdlong	arg01, objptr
0b078     72 00 00 FF 
0b07c     78 E4 85 F1 | 	sub	objptr, ##58488
0b080     5C 01 00 FF 
0b084     DC 15 06 F6 | 	mov	arg02, ##@LR__4876
0b088     10 0E B1 FD | 	call	#__system___string_concat
0b08c     FD 12 02 F6 | 	mov	arg01, result1
0b090     A7 14 02 FB | 	rdlong	arg02, fp
0b094     04 0E B1 FD | 	call	#__system___string_concat
0b098     FD 14 02 F6 | 	mov	arg02, result1
0b09c     0F 13 02 F6 | 	mov	arg01, local01
0b0a0     00 16 06 F6 | 	mov	arg03, #0
0b0a4     98 19 B1 FD | 	call	#__system___basic_open_string
0b0a8                 | '     do
0b0a8                 | LR__0932
0b0a8     09 12 06 F6 | 	mov	arg01, #9
0b0ac     9C 0F B1 FD | 	call	#__system___basic_read_line
0b0b0     57 00 00 FF 
0b0b4     00 E4 05 F1 | 	add	objptr, ##44544
0b0b8     F2 FA 61 FC | 	wrlong	result1, objptr
0b0bc                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0b0bc     57 00 00 FF 
0b0c0     00 E4 85 F1 | 	sub	objptr, ##44544
0b0c4     FD 12 02 F6 | 	mov	arg01, result1
0b0c8     01 14 06 F6 | 	mov	arg02, #1
0b0cc     B4 2D B1 FD | 	call	#__system__Left_S
0b0d0     FD 12 02 F6 | 	mov	arg01, result1
0b0d4     5C 01 00 FF 
0b0d8     DE 15 06 F6 | 	mov	arg02, ##@LR__4877
0b0dc     88 0D B1 FD | 	call	#__system___string_cmp
0b0e0     00 FA 55 F2 | 	cmps	result1, #0 wc
0b0e4     34 00 90 CD |  if_b	jmp	#LR__0933
0b0e8     57 00 00 FF 
0b0ec     00 E4 05 F1 | 	add	objptr, ##44544
0b0f0     F2 12 02 FB | 	rdlong	arg01, objptr
0b0f4     57 00 00 FF 
0b0f8     00 E4 85 F1 | 	sub	objptr, ##44544
0b0fc     01 14 06 F6 | 	mov	arg02, #1
0b100     80 2D B1 FD | 	call	#__system__Left_S
0b104     FD 12 02 F6 | 	mov	arg01, result1
0b108     5C 01 00 FF 
0b10c     E0 15 06 F6 | 	mov	arg02, ##@LR__4878
0b110     54 0D B1 FD | 	call	#__system___string_cmp
0b114     01 FA 55 F2 | 	cmps	result1, #1 wc
0b118     00 59 BF CD |  if_b	call	#_interpret
0b11c                 | LR__0933
0b11c     57 00 00 FF 
0b120     00 E4 05 F1 | 	add	objptr, ##44544
0b124     F2 12 02 FB | 	rdlong	arg01, objptr
0b128     57 00 00 FF 
0b12c     00 E4 85 F1 | 	sub	objptr, ##44544
0b130     5C 01 00 FF 
0b134     E2 15 06 F6 | 	mov	arg02, ##@LR__4879
0b138     2C 0D B1 FD | 	call	#__system___string_cmp
0b13c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b140     64 FF 9F 5D |  if_ne	jmp	#LR__0932
0b144                 | '     close #9
0b144     09 12 06 F6 | 	mov	arg01, #9
0b148     B4 5C B1 FD | 	call	#__system__close
0b14c     F4 00 90 FD | 	jmp	#LR__0938
0b150                 | LR__0934
0b150                 | '   'printerror(26) : close #9 : return
0b150                 | '     do
0b150                 | LR__0935
0b150                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0b150     0C 4E 05 F1 | 	add	fp, #12
0b154     A7 14 02 FB | 	rdlong	arg02, fp
0b158     10 4E 05 F1 | 	add	fp, #16
0b15c     A7 16 02 F6 | 	mov	arg03, fp
0b160     1C 4E 85 F1 | 	sub	fp, #28
0b164     09 12 06 F6 | 	mov	arg01, #9
0b168     01 18 06 F6 | 	mov	arg04, #1
0b16c     04 1A 06 F6 | 	mov	arg05, #4
0b170     E0 1A B1 FD | 	call	#__system___basic_get
0b174     14 4E 05 F1 | 	add	fp, #20
0b178     A7 FA 61 FC | 	wrlong	result1, fp
0b17c     08 4E 85 F1 | 	sub	fp, #8
0b180     A7 1E 02 FB | 	rdlong	local01, fp
0b184     04 1E 06 F1 | 	add	local01, #4
0b188     A7 1E 62 FC | 	wrlong	local01, fp
0b18c     10 4E 05 F1 | 	add	fp, #16
0b190     A7 1E 02 FB | 	rdlong	local01, fp
0b194     04 4E 05 F1 | 	add	fp, #4
0b198     A7 1E 02 F1 | 	add	local01, fp
0b19c     0F 01 48 FC | 	wrbyte	#0, local01
0b1a0                 | '       if amount=1 then  
0b1a0     0C 4E 85 F1 | 	sub	fp, #12
0b1a4     A7 1E 02 FB | 	rdlong	local01, fp
0b1a8     14 4E 85 F1 | 	sub	fp, #20
0b1ac     01 1E 0E F2 | 	cmp	local01, #1 wz
0b1b0     68 00 90 5D |  if_ne	jmp	#LR__0936
0b1b4                 | '         get #9,i,line2(0),linelength : i+=linelength
0b1b4     0C 4E 05 F1 | 	add	fp, #12
0b1b8     A7 14 02 FB | 	rdlong	arg02, fp
0b1bc     14 4E 05 F1 | 	add	fp, #20
0b1c0     A7 16 02 F6 | 	mov	arg03, fp
0b1c4     04 4E 85 F1 | 	sub	fp, #4
0b1c8     A7 18 02 FB | 	rdlong	arg04, fp
0b1cc     1C 4E 85 F1 | 	sub	fp, #28
0b1d0     09 12 06 F6 | 	mov	arg01, #9
0b1d4     01 1A 06 F6 | 	mov	arg05, #1
0b1d8     78 1A B1 FD | 	call	#__system___basic_get
0b1dc     0C 4E 05 F1 | 	add	fp, #12
0b1e0     A7 1E 02 FB | 	rdlong	local01, fp
0b1e4     10 4E 05 F1 | 	add	fp, #16
0b1e8     A7 1A 02 FB | 	rdlong	arg05, fp
0b1ec     0D 1F 02 F1 | 	add	local01, arg05
0b1f0     10 4E 85 F1 | 	sub	fp, #16
0b1f4     A7 1E 62 FC | 	wrlong	local01, fp
0b1f8     94 4E 05 F1 | 	add	fp, #148
0b1fc     A7 1E 02 FB | 	rdlong	local01, fp
0b200     A0 4E 85 F1 | 	sub	fp, #160
0b204     57 00 00 FF 
0b208     00 E4 05 F1 | 	add	objptr, ##44544
0b20c     F2 1E 62 FC | 	wrlong	local01, objptr
0b210     57 00 00 FF 
0b214     00 E4 85 F1 | 	sub	objptr, ##44544
0b218     00 58 BF FD | 	call	#_interpret
0b21c                 | LR__0936
0b21c     14 4E 05 F1 | 	add	fp, #20
0b220     A7 1E 02 FB | 	rdlong	local01, fp
0b224     14 4E 85 F1 | 	sub	fp, #20
0b228     01 1E 56 F2 | 	cmps	local01, #1 wc
0b22c     20 FF 9F 3D |  if_ae	jmp	#LR__0935
0b230                 | '     close #9 
0b230     09 12 06 F6 | 	mov	arg01, #9
0b234     C8 5B B1 FD | 	call	#__system__close
0b238     08 00 90 FD | 	jmp	#LR__0938
0b23c                 | LR__0937
0b23c     1E 12 06 F6 | 	mov	arg01, #30
0b240     14 D5 B0 FD | 	call	#_printerror
0b244                 | LR__0938
0b244                 | LR__0939
0b244     A7 F0 03 F6 | 	mov	ptra, fp
0b248     B2 00 A0 FD | 	call	#popregs_
0b24c                 | _do_load_ret
0b24c     2D 00 64 FD | 	ret
0b250                 | 
0b250                 | ' 
0b250                 | ' '----------------- Run the program 
0b250                 | ' 
0b250                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0b250                 | ' 
0b250                 | ' sub do_run
0b250                 | _do_run
0b250     01 4A 05 F6 | 	mov	COUNT_, #1
0b254     A8 00 A0 FD | 	call	#pushregs_
0b258     6A 00 00 FF 
0b25c     68 E4 05 F1 | 	add	objptr, ##54376
0b260     F2 1C 02 FB | 	rdlong	arg06, objptr
0b264     0F 00 00 FF 
0b268     2C E5 05 F1 | 	add	objptr, ##7980
0b26c     F2 1C 62 FC | 	wrlong	arg06, objptr
0b270     04 E4 05 F1 | 	add	objptr, #4
0b274     F2 00 68 FC | 	wrlong	#0, objptr
0b278     04 E4 05 F1 | 	add	objptr, #4
0b27c     FF FF FF FF 
0b280     F2 FE 6B FC | 	wrlong	##-1, objptr
0b284                 | ' if inrun>0 then 
0b284     04 E4 05 F1 | 	add	objptr, #4
0b288     F2 1C 02 FB | 	rdlong	arg06, objptr
0b28c     79 00 00 FF 
0b290     A0 E5 85 F1 | 	sub	objptr, ##62368
0b294     01 1C 16 F2 | 	cmp	arg06, #1 wc
0b298     30 00 90 CD |  if_b	jmp	#LR__0940
0b29c     79 00 00 FF 
0b2a0     A4 E5 05 F1 | 	add	objptr, ##62372
0b2a4     F2 12 02 F6 | 	mov	arg01, objptr
0b2a8     10 E4 85 F1 | 	sub	objptr, #16
0b2ac     F2 14 02 FB | 	rdlong	arg02, objptr
0b2b0     18 16 06 F6 | 	mov	arg03, #24
0b2b4     6E 00 00 FF 
0b2b8     D4 E4 85 F1 | 	sub	objptr, ##56532
0b2bc     18 00 B1 FD | 	call	#_psram_spin2_read1
0b2c0     0B 00 00 FF 
0b2c4     C0 E4 85 F1 | 	sub	objptr, ##5824
0b2c8                 | '   psram.read1(varptr(runheader),runptr,24)  
0b2c8                 | '   return
0b2c8     9C 02 90 FD | 	jmp	#LR__0946
0b2cc                 | LR__0940
0b2cc     79 00 00 FF 
0b2d0     A0 E5 05 F1 | 	add	objptr, ##62368
0b2d4     F2 02 68 FC | 	wrlong	#1, objptr
0b2d8     04 E4 05 F1 | 	add	objptr, #4
0b2dc     F2 12 02 F6 | 	mov	arg01, objptr
0b2e0     10 E4 85 F1 | 	sub	objptr, #16
0b2e4     F2 14 02 FB | 	rdlong	arg02, objptr
0b2e8     18 16 06 F6 | 	mov	arg03, #24
0b2ec     6E 00 00 FF 
0b2f0     D4 E4 85 F1 | 	sub	objptr, ##56532
0b2f4     E0 FF B0 FD | 	call	#_psram_spin2_read1
0b2f8                 | ' inrun=1
0b2f8                 | ' psram.read1(varptr(runheader),runptr,24) 
0b2f8                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0b2f8     6E 00 00 FF 
0b2fc     E4 E4 05 F1 | 	add	objptr, ##56548
0b300     F2 1E 02 FB | 	rdlong	local01, objptr
0b304     79 00 00 FF 
0b308     A4 E5 85 F1 | 	sub	objptr, ##62372
0b30c     FF FF 7F FF 
0b310     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0b314     79 00 00 AF 
0b318     A0 E5 05 A1 |  if_e	add	objptr, ##62368
0b31c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0b320     79 00 00 AF 
0b324     A0 E5 85 A1 |  if_e	sub	objptr, ##62368
0b328     3C 02 90 AD |  if_e	jmp	#LR__0946
0b32c                 | ' do 
0b32c                 | LR__0941
0b32c                 | '   if runptr<>oldrunptr then
0b32c     79 00 00 FF 
0b330     94 E5 05 F1 | 	add	objptr, ##62356
0b334     F2 1E 02 FB | 	rdlong	local01, objptr
0b338     08 E4 05 F1 | 	add	objptr, #8
0b33c     F2 1C 02 FB | 	rdlong	arg06, objptr
0b340     79 00 00 FF 
0b344     9C E5 85 F1 | 	sub	objptr, ##62364
0b348     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0b34c     CC 00 90 AD |  if_e	jmp	#LR__0942
0b350     79 00 00 FF 
0b354     A4 E5 05 F1 | 	add	objptr, ##62372
0b358     F2 12 02 F6 | 	mov	arg01, objptr
0b35c     10 E4 85 F1 | 	sub	objptr, #16
0b360     F2 14 02 FB | 	rdlong	arg02, objptr
0b364     18 16 06 F6 | 	mov	arg03, #24
0b368     6E 00 00 FF 
0b36c     D4 E4 85 F1 | 	sub	objptr, ##56532
0b370     64 FF B0 FD | 	call	#_psram_spin2_read1
0b374     5B 00 00 FF 
0b378     A0 E5 05 F1 | 	add	objptr, ##47008
0b37c     F2 12 02 F6 | 	mov	arg01, objptr
0b380     12 00 00 FF 
0b384     34 E5 05 F1 | 	add	objptr, ##9524
0b388     F2 14 02 FB | 	rdlong	arg02, objptr
0b38c     14 00 00 FF 
0b390     4C E5 85 F1 | 	sub	objptr, ##10572
0b394     F2 1E 02 FB | 	rdlong	local01, objptr
0b398     01 1E 66 F0 | 	shl	local01, #1
0b39c     0F 15 02 F1 | 	add	arg02, local01
0b3a0     14 00 00 FF 
0b3a4     64 E5 05 F1 | 	add	objptr, ##10596
0b3a8     F2 16 02 FB | 	rdlong	arg03, objptr
0b3ac     18 E4 85 F1 | 	sub	objptr, #24
0b3b0     F2 1E 02 FB | 	rdlong	local01, objptr
0b3b4     0F 17 82 F1 | 	sub	arg03, local01
0b3b8     6E 00 00 FF 
0b3bc     D4 E4 85 F1 | 	sub	objptr, ##56532
0b3c0     14 FF B0 FD | 	call	#_psram_spin2_read1
0b3c4     6E 00 00 FF 
0b3c8     EC E4 05 F1 | 	add	objptr, ##56556
0b3cc     F2 1E 02 FB | 	rdlong	local01, objptr
0b3d0     18 E4 85 F1 | 	sub	objptr, #24
0b3d4     F2 1C 02 FB | 	rdlong	arg06, objptr
0b3d8     0E 1F 82 F1 | 	sub	local01, arg06
0b3dc     14 00 00 FF 
0b3e0     4C E5 85 F1 | 	sub	objptr, ##10572
0b3e4     F2 1C 02 FB | 	rdlong	arg06, objptr
0b3e8     0E 1F 12 FD | 	qdiv	local01, arg06
0b3ec     05 00 00 FF 
0b3f0     18 E4 05 F1 | 	add	objptr, ##2584
0b3f4     18 1E 62 FD | 	getqx	local01
0b3f8     03 1E 86 F1 | 	sub	local01, #3
0b3fc     F2 1E 62 FC | 	wrlong	local01, objptr
0b400     0F 00 00 FF 
0b404     34 E5 05 F1 | 	add	objptr, ##7988
0b408     F2 1E 02 FB | 	rdlong	local01, objptr
0b40c     08 E4 05 F1 | 	add	objptr, #8
0b410     F2 1E 62 FC | 	wrlong	local01, objptr
0b414     79 00 00 FF 
0b418     9C E5 85 F1 | 	sub	objptr, ##62364
0b41c                 | LR__0942
0b41c     79 00 00 FF 
0b420     B8 E5 05 F1 | 	add	objptr, ##62392
0b424     F2 1E 02 FB | 	rdlong	local01, objptr
0b428     24 E4 85 F1 | 	sub	objptr, #36
0b42c     F2 1E 62 FC | 	wrlong	local01, objptr
0b430     04 E4 05 F1 | 	add	objptr, #4
0b434     F2 12 02 FB | 	rdlong	arg01, objptr
0b438     79 00 00 FF 
0b43c     98 E5 85 F1 | 	sub	objptr, ##62360
0b440     40 EB BF FD | 	call	#_execute_line
0b444     79 00 00 FF 
0b448     98 E5 05 F1 | 	add	objptr, ##62360
0b44c     F2 FA 61 FC | 	wrlong	result1, objptr
0b450     04 E4 85 F1 | 	sub	objptr, #4
0b454     F2 1E 02 FB | 	rdlong	local01, objptr
0b458     79 00 00 FF 
0b45c     94 E5 85 F1 | 	sub	objptr, ##62356
0b460     FF FF 3F FF 
0b464     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b468     0C 00 90 AD |  if_e	jmp	#LR__0943
0b46c     F8 01 B1 FD | 	call	#_usbnew_spin2_get_key
0b470     06 FB 0D F2 | 	cmp	result1, #262 wz
0b474     B4 FE 9F 5D |  if_ne	jmp	#LR__0941
0b478                 | LR__0943
0b478                 | ' if runheader(5)<>$7FFF_FFFF then 
0b478     79 00 00 FF 
0b47c     B8 E5 05 F1 | 	add	objptr, ##62392
0b480     F2 1E 02 FB | 	rdlong	local01, objptr
0b484     79 00 00 FF 
0b488     B8 E5 85 F1 | 	sub	objptr, ##62392
0b48c     FF FF 3F FF 
0b490     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0b494     BC 00 90 AD |  if_e	jmp	#LR__0945
0b498                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
0b498     79 00 00 FF 
0b49c     C4 E5 05 F1 | 	add	objptr, ##62404
0b4a0     F2 1E 02 FB | 	rdlong	local01, objptr
0b4a4     79 00 00 FF 
0b4a8     C4 E5 85 F1 | 	sub	objptr, ##62404
0b4ac     01 1E 0E F2 | 	cmp	local01, #1 wz
0b4b0     3C 00 90 5D |  if_ne	jmp	#LR__0944
0b4b4     7B 00 00 FF 
0b4b8     68 E4 05 F1 | 	add	objptr, ##63080
0b4bc     F2 14 02 FB | 	rdlong	arg02, objptr
0b4c0     04 E4 85 F1 | 	sub	objptr, #4
0b4c4     F2 1A 02 FB | 	rdlong	arg05, objptr
0b4c8     07 12 06 F6 | 	mov	arg01, #7
0b4cc     56 00 00 FF 
0b4d0     44 16 06 F6 | 	mov	arg03, ##44100
0b4d4     0E 18 C6 F9 | 	decod	arg04, #14
0b4d8     01 1C 66 F6 | 	neg	arg06, #1
0b4dc     6F 00 00 FF 
0b4e0     A4 E5 85 F1 | 	sub	objptr, ##57252
0b4e4     08 05 B1 FD | 	call	#_audio096_spin2_play
0b4e8     0B 00 00 FF 
0b4ec     C0 E4 85 F1 | 	sub	objptr, ##5824
0b4f0                 | LR__0944
0b4f0                 | '   print "Stopped at line ";runheader(0)
0b4f0     00 12 06 F6 | 	mov	arg01, #0
0b4f4     D8 62 B1 FD | 	call	#__system___getiolock_0472
0b4f8     FD 12 02 F6 | 	mov	arg01, result1
0b4fc     40 09 B1 FD | 	call	#__system___lockmem
0b500     5C 01 00 FF 
0b504     E3 15 06 F6 | 	mov	arg02, ##@LR__4880
0b508     00 12 06 F6 | 	mov	arg01, #0
0b50c     00 16 06 F6 | 	mov	arg03, #0
0b510     30 16 B1 FD | 	call	#__system___basic_print_string
0b514     79 00 00 FF 
0b518     A4 E5 05 F1 | 	add	objptr, ##62372
0b51c     F2 14 02 FB | 	rdlong	arg02, objptr
0b520     79 00 00 FF 
0b524     A4 E5 85 F1 | 	sub	objptr, ##62372
0b528     00 12 06 F6 | 	mov	arg01, #0
0b52c     00 16 06 F6 | 	mov	arg03, #0
0b530     0A 18 06 F6 | 	mov	arg04, #10
0b534     90 16 B1 FD | 	call	#__system___basic_print_unsigned
0b538     00 12 06 F6 | 	mov	arg01, #0
0b53c     0A 14 06 F6 | 	mov	arg02, #10
0b540     00 16 06 F6 | 	mov	arg03, #0
0b544     A4 15 B1 FD | 	call	#__system___basic_print_char
0b548     00 12 06 F6 | 	mov	arg01, #0
0b54c     80 62 B1 FD | 	call	#__system___getiolock_0472
0b550     FD 00 68 FC | 	wrlong	#0, result1
0b554                 | LR__0945
0b554     79 00 00 FF 
0b558     A0 E5 05 F1 | 	add	objptr, ##62368
0b55c     F2 00 68 FC | 	wrlong	#0, objptr
0b560     79 00 00 FF 
0b564     A0 E5 85 F1 | 	sub	objptr, ##62368
0b568                 | LR__0946
0b568     A7 F0 03 F6 | 	mov	ptra, fp
0b56c     B2 00 A0 FD | 	call	#popregs_
0b570                 | _do_run_ret
0b570     2D 00 64 FD | 	ret
0b574                 | 
0b574                 | ' 
0b574                 | ' sub do_defenv
0b574                 | _do_defenv
0b574     09 4A 05 F6 | 	mov	COUNT_, #9
0b578     A8 00 A0 FD | 	call	#pushregs_
0b57c     B4 F0 07 F1 | 	add	ptra, #180
0b580     6A 00 00 FF 
0b584     64 E4 05 F1 | 	add	objptr, ##54372
0b588     F2 1E 02 FB | 	rdlong	local01, objptr
0b58c     0F 1B 02 F6 | 	mov	arg05, local01
0b590     01 1A 66 F0 | 	shl	arg05, #1
0b594     0F 1B 02 F1 | 	add	arg05, local01
0b598     02 1A 66 F0 | 	shl	arg05, #2
0b59c     03 00 00 FF 
0b5a0     04 E4 85 F1 | 	sub	objptr, ##1540
0b5a4     F2 20 02 F6 | 	mov	local02, objptr
0b5a8     F2 1A 02 F1 | 	add	arg05, objptr
0b5ac     0D 1B 02 FB | 	rdlong	arg05, arg05
0b5b0     10 4E 05 F1 | 	add	fp, #16
0b5b4     A7 1A 62 FC | 	wrlong	arg05, fp
0b5b8                 | ' 
0b5b8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b5b8                 | ' 
0b5b8                 | ' 
0b5b8                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0b5b8                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0b5b8                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0b5b8                 | ' 
0b5b8                 | ' 
0b5b8                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0b5b8     10 4E 85 F1 | 	sub	fp, #16
0b5bc     02 1A 0E F2 | 	cmp	arg05, #2 wz
0b5c0     67 00 00 FF 
0b5c4     60 E4 85 F1 | 	sub	objptr, ##52832
0b5c8     10 4E 05 51 |  if_ne	add	fp, #16
0b5cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b5d0     10 4E 85 51 |  if_ne	sub	fp, #16
0b5d4     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0b5d8     10 4E 05 51 |  if_ne	add	fp, #16
0b5dc     0F 21 02 56 |  if_ne	mov	local02, local01
0b5e0     10 4E 85 51 |  if_ne	sub	fp, #16
0b5e4     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0b5e8     24 0C 90 5D |  if_ne	jmp	#LR__0971
0b5ec                 | ' 
0b5ec                 | '  
0b5ec                 | ' if numpar=2 then
0b5ec     10 4E 05 F1 | 	add	fp, #16
0b5f0     A7 20 02 FB | 	rdlong	local02, fp
0b5f4     10 4E 85 F1 | 	sub	fp, #16
0b5f8     02 20 0E F2 | 	cmp	local02, #2 wz
0b5fc     CC 03 90 5D |  if_ne	jmp	#LR__0962
0b600     84 EA BF FD | 	call	#_pop
0b604     FF 1A 02 F6 | 	mov	arg05, result3
0b608     5C 4E 05 F1 | 	add	fp, #92
0b60c     A7 FA 61 FC | 	wrlong	result1, fp
0b610     04 4E 05 F1 | 	add	fp, #4
0b614     A7 FC 61 FC | 	wrlong	result2, fp
0b618     04 4E 05 F1 | 	add	fp, #4
0b61c     A7 1A 62 FC | 	wrlong	arg05, fp
0b620                 | '   t1=pop()
0b620                 | '   if t1.result_type=result_string2 then 
0b620     64 4E 85 F1 | 	sub	fp, #100
0b624     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0b628     20 00 90 5D |  if_ne	jmp	#LR__0950
0b62c     5C 4E 05 F1 | 	add	fp, #92
0b630     A7 12 02 FB | 	rdlong	arg01, fp
0b634     5C 4E 85 F1 | 	sub	fp, #92
0b638     C8 29 B0 FD | 	call	#_convertstring
0b63c     68 4E 05 F1 | 	add	fp, #104
0b640     A7 FA 61 FC | 	wrlong	result1, fp
0b644     68 4E 85 F1 | 	sub	fp, #104
0b648     58 00 90 FD | 	jmp	#LR__0953
0b64c                 | LR__0950
0b64c     64 4E 05 F1 | 	add	fp, #100
0b650     A7 20 02 FB | 	rdlong	local02, fp
0b654     64 4E 85 F1 | 	sub	fp, #100
0b658     1F 20 0E F2 | 	cmp	local02, #31 wz
0b65c     18 00 90 5D |  if_ne	jmp	#LR__0951
0b660     5C 4E 05 F1 | 	add	fp, #92
0b664     A7 20 02 FB | 	rdlong	local02, fp
0b668     0C 4E 05 F1 | 	add	fp, #12
0b66c     A7 20 62 FC | 	wrlong	local02, fp
0b670     68 4E 85 F1 | 	sub	fp, #104
0b674     2C 00 90 FD | 	jmp	#LR__0952
0b678                 | LR__0951
0b678     5C 01 00 FF 
0b67c     F4 21 06 F6 | 	mov	local02, ##@LR__4881
0b680     68 4E 05 F1 | 	add	fp, #104
0b684     A7 20 62 FC | 	wrlong	local02, fp
0b688     0C 4E 85 F1 | 	sub	fp, #12
0b68c     A7 12 02 F6 | 	mov	arg01, fp
0b690     5C 4E 85 F1 | 	sub	fp, #92
0b694     44 70 B0 FD | 	call	#_converttoint
0b698     24 4E 05 F1 | 	add	fp, #36
0b69c     A7 FA 61 FC | 	wrlong	result1, fp
0b6a0     24 4E 85 F1 | 	sub	fp, #36
0b6a4                 | LR__0952
0b6a4                 | LR__0953
0b6a4                 | ' 
0b6a4                 | '     
0b6a4                 | '   if s1<>"" then 
0b6a4     68 4E 05 F1 | 	add	fp, #104
0b6a8     A7 12 02 FB | 	rdlong	arg01, fp
0b6ac     68 4E 85 F1 | 	sub	fp, #104
0b6b0     5C 01 00 FF 
0b6b4     F5 15 06 F6 | 	mov	arg02, ##@LR__4882
0b6b8     AC 07 B1 FD | 	call	#__system___string_cmp
0b6bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b6c0     F8 01 90 AD |  if_e	jmp	#LR__0957
0b6c4     C0 E9 BF FD | 	call	#_pop
0b6c8     FF 1E 02 F6 | 	mov	local01, result3
0b6cc     5C 4E 05 F1 | 	add	fp, #92
0b6d0     A7 FA 61 FC | 	wrlong	result1, fp
0b6d4     04 4E 05 F1 | 	add	fp, #4
0b6d8     A7 FC 61 FC | 	wrlong	result2, fp
0b6dc     04 4E 05 F1 | 	add	fp, #4
0b6e0     A7 1E 62 FC | 	wrlong	local01, fp
0b6e4     08 4E 85 F1 | 	sub	fp, #8
0b6e8     A7 12 02 F6 | 	mov	arg01, fp
0b6ec     5C 4E 85 F1 | 	sub	fp, #92
0b6f0     E8 6F B0 FD | 	call	#_converttoint
0b6f4     20 4E 05 F1 | 	add	fp, #32
0b6f8     A7 FA 61 FC | 	wrlong	result1, fp
0b6fc     20 4E 85 F1 | 	sub	fp, #32
0b700                 | '     t1=pop()
0b700                 | '     channel=converttoint(t1) 
0b700                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0b700     09 12 06 F6 | 	mov	arg01, #9
0b704     F8 56 B1 FD | 	call	#__system__close
0b708     09 20 06 F6 | 	mov	local02, #9
0b70c     5C 01 00 FF 
0b710     F6 13 06 F6 | 	mov	arg01, ##@LR__4883
0b714     68 4E 05 F1 | 	add	fp, #104
0b718     A7 14 02 FB | 	rdlong	arg02, fp
0b71c     68 4E 85 F1 | 	sub	fp, #104
0b720     78 07 B1 FD | 	call	#__system___string_concat
0b724     FD 14 02 F6 | 	mov	arg02, result1
0b728     10 13 02 F6 | 	mov	arg01, local02
0b72c     00 16 06 F6 | 	mov	arg03, #0
0b730     0C 13 B1 FD | 	call	#__system___basic_open_string
0b734     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b738     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b73c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b740     0C 4E 05 F1 | 	add	fp, #12
0b744     A7 FA 61 FC | 	wrlong	result1, fp
0b748                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0b748     0C 4E 85 F1 | 	sub	fp, #12
0b74c     A0 00 90 AD |  if_e	jmp	#LR__0954
0b750     00 12 06 F6 | 	mov	arg01, #0
0b754     78 60 B1 FD | 	call	#__system___getiolock_0472
0b758     FD 12 02 F6 | 	mov	arg01, result1
0b75c     E0 06 B1 FD | 	call	#__system___lockmem
0b760     5D 01 00 FF 
0b764     03 14 06 F6 | 	mov	arg02, ##@LR__4884
0b768     00 12 06 F6 | 	mov	arg01, #0
0b76c     00 16 06 F6 | 	mov	arg03, #0
0b770     D0 13 B1 FD | 	call	#__system___basic_print_string
0b774     0C 4E 05 F1 | 	add	fp, #12
0b778     A7 14 02 FB | 	rdlong	arg02, fp
0b77c     0C 4E 85 F1 | 	sub	fp, #12
0b780     00 12 06 F6 | 	mov	arg01, #0
0b784     00 16 06 F6 | 	mov	arg03, #0
0b788     0A 18 06 F6 | 	mov	arg04, #10
0b78c     F8 13 B1 FD | 	call	#__system___basic_print_integer
0b790     5D 01 00 FF 
0b794     11 14 06 F6 | 	mov	arg02, ##@LR__4885
0b798     00 12 06 F6 | 	mov	arg01, #0
0b79c     00 16 06 F6 | 	mov	arg03, #0
0b7a0     A0 13 B1 FD | 	call	#__system___basic_print_string
0b7a4     00 20 06 F6 | 	mov	local02, #0
0b7a8     0C 4E 05 F1 | 	add	fp, #12
0b7ac     A7 12 02 FB | 	rdlong	arg01, fp
0b7b0     0C 4E 85 F1 | 	sub	fp, #12
0b7b4     18 2D B1 FD | 	call	#__system___strerror
0b7b8     FD 14 02 F6 | 	mov	arg02, result1
0b7bc     10 13 02 F6 | 	mov	arg01, local02
0b7c0     00 16 06 F6 | 	mov	arg03, #0
0b7c4     7C 13 B1 FD | 	call	#__system___basic_print_string
0b7c8     00 12 06 F6 | 	mov	arg01, #0
0b7cc     0A 14 06 F6 | 	mov	arg02, #10
0b7d0     00 16 06 F6 | 	mov	arg03, #0
0b7d4     14 13 B1 FD | 	call	#__system___basic_print_char
0b7d8     00 12 06 F6 | 	mov	arg01, #0
0b7dc     F0 5F B1 FD | 	call	#__system___getiolock_0472
0b7e0     FD 00 68 FC | 	wrlong	#0, result1
0b7e4     09 12 06 F6 | 	mov	arg01, #9
0b7e8     14 56 B1 FD | 	call	#__system__close
0b7ec     20 0A 90 FD | 	jmp	#LR__0971
0b7f0                 | LR__0954
0b7f0                 | '     get #9,17,envbuf8(channel,0),256
0b7f0     20 4E 05 F1 | 	add	fp, #32
0b7f4     A7 1A 02 FB | 	rdlong	arg05, fp
0b7f8     20 4E 85 F1 | 	sub	fp, #32
0b7fc     0D 17 02 F6 | 	mov	arg03, arg05
0b800     09 16 66 F0 | 	shl	arg03, #9
0b804     0D 17 02 F1 | 	add	arg03, arg05
0b808     2C 00 00 FF 
0b80c     CC E4 05 F1 | 	add	objptr, ##22732
0b810     F2 16 02 F1 | 	add	arg03, objptr
0b814     09 12 06 F6 | 	mov	arg01, #9
0b818     11 14 06 F6 | 	mov	arg02, #17
0b81c     00 19 06 F6 | 	mov	arg04, #256
0b820     01 1A 06 F6 | 	mov	arg05, #1
0b824     2C 00 00 FF 
0b828     CC E4 85 F1 | 	sub	objptr, ##22732
0b82c     24 14 B1 FD | 	call	#__system___basic_get
0b830                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0b830     14 4E 05 F1 | 	add	fp, #20
0b834     A7 FE 69 FC | 	wrlong	#255, fp
0b838     14 4E 85 F1 | 	sub	fp, #20
0b83c     2C 00 00 FF 
0b840     CC E4 05 F1 | 	add	objptr, ##22732
0b844     97 30 48 FB | 	callpa	#(@LR__0956-@LR__0955)>>2,fcache_load_ptr_
0b848                 | LR__0955
0b848     20 4E 05 F1 | 	add	fp, #32
0b84c     A7 18 02 FB | 	rdlong	arg04, fp
0b850     0C 21 02 F6 | 	mov	local02, arg04
0b854     09 20 66 F0 | 	shl	local02, #9
0b858     F2 20 02 F1 | 	add	local02, objptr
0b85c     0C 4E 85 F1 | 	sub	fp, #12
0b860     A7 1E 02 FB | 	rdlong	local01, fp
0b864     0F 1B 02 F6 | 	mov	arg05, local01
0b868     01 1A 66 F0 | 	shl	arg05, #1
0b86c     10 1B 02 F1 | 	add	arg05, local02
0b870     0C 21 02 F6 | 	mov	local02, arg04
0b874     09 20 66 F0 | 	shl	local02, #9
0b878     0C 21 02 F1 | 	add	local02, arg04
0b87c     F2 20 02 F1 | 	add	local02, objptr
0b880     10 1F 02 F1 | 	add	local01, local02
0b884     0F 21 C2 FA | 	rdbyte	local02, local01
0b888     00 21 06 FA | 	mul	local02, #256
0b88c     0D 21 52 FC | 	wrword	local02, arg05
0b890     A7 20 02 FB | 	rdlong	local02, fp
0b894     01 20 86 F1 | 	sub	local02, #1
0b898     A7 20 62 FC | 	wrlong	local02, fp
0b89c     14 4E 85 F1 | 	sub	fp, #20
0b8a0     00 20 56 F2 | 	cmps	local02, #0 wc
0b8a4     A0 FF 9F 3D |  if_ae	jmp	#LR__0955
0b8a8                 | LR__0956
0b8a8     2C 00 00 FF 
0b8ac     CC E4 85 F1 | 	sub	objptr, ##22732
0b8b0                 | '     close #9
0b8b0     09 12 06 F6 | 	mov	arg01, #9
0b8b4     48 55 B1 FD | 	call	#__system__close
0b8b8                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0b8b8                 | '     return
0b8b8     54 09 90 FD | 	jmp	#LR__0971
0b8bc                 | LR__0957
0b8bc                 | '     if wptr < ($80000 - 2048) then 
0b8bc     24 4E 05 F1 | 	add	fp, #36
0b8c0     A7 22 02 FB | 	rdlong	local03, fp
0b8c4     24 4E 85 F1 | 	sub	fp, #36
0b8c8     FC 03 00 FF 
0b8cc     00 22 56 F2 | 	cmps	local03, ##522240 wc
0b8d0     7C 00 90 3D |  if_ae	jmp	#LR__0960
0b8d4                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0b8d4     14 4E 05 F1 | 	add	fp, #20
0b8d8     A7 00 68 FC | 	wrlong	#0, fp
0b8dc     14 4E 85 F1 | 	sub	fp, #20
0b8e0     2C 00 00 FF 
0b8e4     CC E4 05 F1 | 	add	objptr, ##22732
0b8e8     97 2C 48 FB | 	callpa	#(@LR__0959-@LR__0958)>>2,fcache_load_ptr_
0b8ec                 | LR__0958
0b8ec     20 4E 05 F1 | 	add	fp, #32
0b8f0     A7 22 02 FB | 	rdlong	local03, fp
0b8f4     09 22 66 F0 | 	shl	local03, #9
0b8f8     F2 22 02 F1 | 	add	local03, objptr
0b8fc     0C 4E 85 F1 | 	sub	fp, #12
0b900     A7 20 02 FB | 	rdlong	local02, fp
0b904     10 1F 02 F6 | 	mov	local01, local02
0b908     01 1E 66 F0 | 	shl	local01, #1
0b90c     11 1F 02 F1 | 	add	local01, local03
0b910     10 4E 05 F1 | 	add	fp, #16
0b914     A7 12 02 FB | 	rdlong	arg01, fp
0b918     01 20 66 F0 | 	shl	local02, #1
0b91c     10 13 02 F1 | 	add	arg01, local02
0b920     09 FB E1 FA | 	rdword	result1, arg01
0b924     0F FB 51 FC | 	wrword	result1, local01
0b928     10 4E 85 F1 | 	sub	fp, #16
0b92c     A7 22 02 FB | 	rdlong	local03, fp
0b930     01 22 06 F1 | 	add	local03, #1
0b934     A7 22 62 FC | 	wrlong	local03, fp
0b938     14 4E 85 F1 | 	sub	fp, #20
0b93c     00 23 56 F2 | 	cmps	local03, #256 wc
0b940     A8 FF 9F CD |  if_b	jmp	#LR__0958
0b944                 | LR__0959
0b944     2C 00 00 FF 
0b948     CC E4 85 F1 | 	sub	objptr, ##22732
0b94c     C0 08 90 FD | 	jmp	#LR__0971
0b950                 | LR__0960
0b950                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0b950     14 4E 05 F1 | 	add	fp, #20
0b954     A7 00 68 FC | 	wrlong	#0, fp
0b958     14 4E 85 F1 | 	sub	fp, #20
0b95c                 | LR__0961
0b95c     20 4E 05 F1 | 	add	fp, #32
0b960     A7 22 02 FB | 	rdlong	local03, fp
0b964     09 22 66 F0 | 	shl	local03, #9
0b968     2C 00 00 FF 
0b96c     CC E4 05 F1 | 	add	objptr, ##22732
0b970     F2 22 02 F1 | 	add	local03, objptr
0b974     0C 4E 85 F1 | 	sub	fp, #12
0b978     A7 20 02 FB | 	rdlong	local02, fp
0b97c     10 1F 02 F6 | 	mov	local01, local02
0b980     01 1E 66 F0 | 	shl	local01, #1
0b984     11 1F 02 F1 | 	add	local01, local03
0b988     10 4E 05 F1 | 	add	fp, #16
0b98c     A7 12 02 FB | 	rdlong	arg01, fp
0b990     24 4E 85 F1 | 	sub	fp, #36
0b994     01 20 66 F0 | 	shl	local02, #1
0b998     10 13 02 F1 | 	add	arg01, local02
0b99c     2C 00 00 FF 
0b9a0     CC E4 85 F1 | 	sub	objptr, ##22732
0b9a4     9C D0 B0 FD | 	call	#_psdpeek
0b9a8     0F FB 51 FC | 	wrword	result1, local01
0b9ac     14 4E 05 F1 | 	add	fp, #20
0b9b0     A7 24 02 FB | 	rdlong	local04, fp
0b9b4     01 24 06 F1 | 	add	local04, #1
0b9b8     A7 24 62 FC | 	wrlong	local04, fp
0b9bc     14 4E 85 F1 | 	sub	fp, #20
0b9c0     00 25 56 F2 | 	cmps	local04, #256 wc
0b9c4     94 FF 9F CD |  if_b	jmp	#LR__0961
0b9c8                 | '     return   
0b9c8     44 08 90 FD | 	jmp	#LR__0971
0b9cc                 | LR__0962
0b9cc                 | ' 
0b9cc                 | ' if numpar=5 then    'simple adsr
0b9cc     10 4E 05 F1 | 	add	fp, #16
0b9d0     A7 22 02 FB | 	rdlong	local03, fp
0b9d4     10 4E 85 F1 | 	sub	fp, #16
0b9d8     05 22 0E F2 | 	cmp	local03, #5 wz
0b9dc     30 08 90 5D |  if_ne	jmp	#LR__0970
0b9e0     A4 E6 BF FD | 	call	#_pop
0b9e4     FF 1E 02 F6 | 	mov	local01, result3
0b9e8     5C 4E 05 F1 | 	add	fp, #92
0b9ec     A7 FA 61 FC | 	wrlong	result1, fp
0b9f0     04 4E 05 F1 | 	add	fp, #4
0b9f4     A7 FC 61 FC | 	wrlong	result2, fp
0b9f8     04 4E 05 F1 | 	add	fp, #4
0b9fc     A7 1E 62 FC | 	wrlong	local01, fp
0ba00     08 4E 85 F1 | 	sub	fp, #8
0ba04     A7 12 02 F6 | 	mov	arg01, fp
0ba08     5C 4E 85 F1 | 	sub	fp, #92
0ba0c     78 6D B0 FD | 	call	#_converttofloat
0ba10     FD 22 02 F6 | 	mov	local03, result1
0ba14     34 4E 05 F1 | 	add	fp, #52
0ba18     A7 22 62 FC | 	wrlong	local03, fp
0ba1c     34 4E 85 F1 | 	sub	fp, #52
0ba20     64 E6 BF FD | 	call	#_pop
0ba24     FF 1E 02 F6 | 	mov	local01, result3
0ba28     5C 4E 05 F1 | 	add	fp, #92
0ba2c     A7 FA 61 FC | 	wrlong	result1, fp
0ba30     04 4E 05 F1 | 	add	fp, #4
0ba34     A7 FC 61 FC | 	wrlong	result2, fp
0ba38     04 4E 05 F1 | 	add	fp, #4
0ba3c     A7 1E 62 FC | 	wrlong	local01, fp
0ba40     08 4E 85 F1 | 	sub	fp, #8
0ba44     A7 12 02 F6 | 	mov	arg01, fp
0ba48     5C 4E 85 F1 | 	sub	fp, #92
0ba4c     38 6D B0 FD | 	call	#_converttofloat
0ba50     FD 22 02 F6 | 	mov	local03, result1
0ba54     30 4E 05 F1 | 	add	fp, #48
0ba58     A7 22 62 FC | 	wrlong	local03, fp
0ba5c     30 4E 85 F1 | 	sub	fp, #48
0ba60     24 E6 BF FD | 	call	#_pop
0ba64     FF 1E 02 F6 | 	mov	local01, result3
0ba68     5C 4E 05 F1 | 	add	fp, #92
0ba6c     A7 FA 61 FC | 	wrlong	result1, fp
0ba70     04 4E 05 F1 | 	add	fp, #4
0ba74     A7 FC 61 FC | 	wrlong	result2, fp
0ba78     04 4E 05 F1 | 	add	fp, #4
0ba7c     A7 1E 62 FC | 	wrlong	local01, fp
0ba80     08 4E 85 F1 | 	sub	fp, #8
0ba84     A7 12 02 F6 | 	mov	arg01, fp
0ba88     5C 4E 85 F1 | 	sub	fp, #92
0ba8c     F8 6C B0 FD | 	call	#_converttofloat
0ba90     FD 22 02 F6 | 	mov	local03, result1
0ba94     2C 4E 05 F1 | 	add	fp, #44
0ba98     A7 22 62 FC | 	wrlong	local03, fp
0ba9c     2C 4E 85 F1 | 	sub	fp, #44
0baa0     E4 E5 BF FD | 	call	#_pop
0baa4     FF 1E 02 F6 | 	mov	local01, result3
0baa8     5C 4E 05 F1 | 	add	fp, #92
0baac     A7 FA 61 FC | 	wrlong	result1, fp
0bab0     04 4E 05 F1 | 	add	fp, #4
0bab4     A7 FC 61 FC | 	wrlong	result2, fp
0bab8     04 4E 05 F1 | 	add	fp, #4
0babc     A7 1E 62 FC | 	wrlong	local01, fp
0bac0     08 4E 85 F1 | 	sub	fp, #8
0bac4     A7 12 02 F6 | 	mov	arg01, fp
0bac8     5C 4E 85 F1 | 	sub	fp, #92
0bacc     B8 6C B0 FD | 	call	#_converttofloat
0bad0     FD 22 02 F6 | 	mov	local03, result1
0bad4     28 4E 05 F1 | 	add	fp, #40
0bad8     A7 22 62 FC | 	wrlong	local03, fp
0badc     28 4E 85 F1 | 	sub	fp, #40
0bae0     A4 E5 BF FD | 	call	#_pop
0bae4     FF 1E 02 F6 | 	mov	local01, result3
0bae8     5C 4E 05 F1 | 	add	fp, #92
0baec     A7 FA 61 FC | 	wrlong	result1, fp
0baf0     04 4E 05 F1 | 	add	fp, #4
0baf4     A7 FC 61 FC | 	wrlong	result2, fp
0baf8     04 4E 05 F1 | 	add	fp, #4
0bafc     A7 1E 62 FC | 	wrlong	local01, fp
0bb00     08 4E 85 F1 | 	sub	fp, #8
0bb04     A7 12 02 F6 | 	mov	arg01, fp
0bb08     5C 4E 85 F1 | 	sub	fp, #92
0bb0c     CC 6B B0 FD | 	call	#_converttoint
0bb10     20 4E 05 F1 | 	add	fp, #32
0bb14     A7 FA 61 FC | 	wrlong	result1, fp
0bb18                 | ' 
0bb18                 | '   t1=pop() : rr=converttofloat(t1)
0bb18                 | '   t1=pop() : ss=converttofloat(t1) 
0bb18                 | '   t1=pop() : dd=converttofloat(t1)
0bb18                 | '   t1=pop() : aa=converttofloat(t1)
0bb18                 | '   t1=pop() : channel=converttoint(t1)
0bb18                 | '   if ss<0.0 then ss=0.0 
0bb18     10 4E 05 F1 | 	add	fp, #16
0bb1c     A7 12 02 FB | 	rdlong	arg01, fp
0bb20     30 4E 85 F1 | 	sub	fp, #48
0bb24     00 14 06 F6 | 	mov	arg02, #0
0bb28     01 16 06 F6 | 	mov	arg03, #1
0bb2c     C0 32 B1 FD | 	call	#__system___float_cmp
0bb30     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb34     30 4E 05 C1 |  if_b	add	fp, #48
0bb38     A7 00 68 CC |  if_b	wrlong	#0, fp
0bb3c     30 4E 85 C1 |  if_b	sub	fp, #48
0bb40                 | '   if ss>1.0 then ss=1.0
0bb40     30 4E 05 F1 | 	add	fp, #48
0bb44     A7 12 02 FB | 	rdlong	arg01, fp
0bb48     30 4E 85 F1 | 	sub	fp, #48
0bb4c     00 C0 1F FF 
0bb50     00 14 06 F6 | 	mov	arg02, ##1065353216
0bb54     01 16 66 F6 | 	neg	arg03, #1
0bb58     94 32 B1 FD | 	call	#__system___float_cmp
0bb5c     01 FA 55 F2 | 	cmps	result1, #1 wc
0bb60     30 4E 05 31 |  if_ae	add	fp, #48
0bb64     00 C0 9F 3F 
0bb68     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0bb6c     30 4E 85 31 |  if_ae	sub	fp, #48
0bb70     28 4E 05 F1 | 	add	fp, #40
0bb74     A7 12 02 FB | 	rdlong	arg01, fp
0bb78     04 4E 05 F1 | 	add	fp, #4
0bb7c     A7 14 02 FB | 	rdlong	arg02, fp
0bb80     2C 4E 85 F1 | 	sub	fp, #44
0bb84     64 2A B1 FD | 	call	#__system___float_add
0bb88     FD 12 02 F6 | 	mov	arg01, result1
0bb8c     34 4E 05 F1 | 	add	fp, #52
0bb90     A7 14 02 FB | 	rdlong	arg02, fp
0bb94     34 4E 85 F1 | 	sub	fp, #52
0bb98     50 2A B1 FD | 	call	#__system___float_add
0bb9c     4C 4E 05 F1 | 	add	fp, #76
0bba0     A7 FA 61 FC | 	wrlong	result1, fp
0bba4     FD 14 02 F6 | 	mov	arg02, result1
0bba8     4C 4E 85 F1 | 	sub	fp, #76
0bbac     00 C0 21 FF 
0bbb0     00 12 06 F6 | 	mov	arg01, ##1132462080
0bbb4     08 30 B1 FD | 	call	#__system___float_div
0bbb8     50 4E 05 F1 | 	add	fp, #80
0bbbc     A7 FA 61 FC | 	wrlong	result1, fp
0bbc0     28 4E 85 F1 | 	sub	fp, #40
0bbc4     A7 12 02 FB | 	rdlong	arg01, fp
0bbc8     FD 14 02 F6 | 	mov	arg02, result1
0bbcc     28 4E 85 F1 | 	sub	fp, #40
0bbd0     E8 2D B1 FD | 	call	#__system___float_mul
0bbd4     FD 12 02 F6 | 	mov	arg01, result1
0bbd8     01 14 06 F6 | 	mov	arg02, #1
0bbdc     A4 32 B1 FD | 	call	#__system___float_tointeger
0bbe0     A7 FA 61 FC | 	wrlong	result1, fp
0bbe4     2C 4E 05 F1 | 	add	fp, #44
0bbe8     A7 12 02 FB | 	rdlong	arg01, fp
0bbec     24 4E 05 F1 | 	add	fp, #36
0bbf0     A7 14 02 FB | 	rdlong	arg02, fp
0bbf4     50 4E 85 F1 | 	sub	fp, #80
0bbf8     C0 2D B1 FD | 	call	#__system___float_mul
0bbfc     FD 12 02 F6 | 	mov	arg01, result1
0bc00     01 14 06 F6 | 	mov	arg02, #1
0bc04     7C 32 B1 FD | 	call	#__system___float_tointeger
0bc08     04 4E 05 F1 | 	add	fp, #4
0bc0c     A7 FA 61 FC | 	wrlong	result1, fp
0bc10     30 4E 05 F1 | 	add	fp, #48
0bc14     A7 12 02 FB | 	rdlong	arg01, fp
0bc18     1C 4E 05 F1 | 	add	fp, #28
0bc1c     A7 14 02 FB | 	rdlong	arg02, fp
0bc20     50 4E 85 F1 | 	sub	fp, #80
0bc24     94 2D B1 FD | 	call	#__system___float_mul
0bc28     FD 12 02 F6 | 	mov	arg01, result1
0bc2c     01 14 06 F6 | 	mov	arg02, #1
0bc30     50 32 B1 FD | 	call	#__system___float_tointeger
0bc34     FD 22 02 F6 | 	mov	local03, result1
0bc38     0C 4E 05 F1 | 	add	fp, #12
0bc3c     A7 22 62 FC | 	wrlong	local03, fp
0bc40     0C 4E 85 F1 | 	sub	fp, #12
0bc44                 | '   fulltime=aa+dd+rr
0bc44                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0bc44     00 12 06 F6 | 	mov	arg01, #0
0bc48     84 5B B1 FD | 	call	#__system___getiolock_0472
0bc4c     FD 12 02 F6 | 	mov	arg01, result1
0bc50     EC 01 B1 FD | 	call	#__system___lockmem
0bc54     A7 14 02 FB | 	rdlong	arg02, fp
0bc58     00 12 06 F6 | 	mov	arg01, #0
0bc5c     00 16 06 F6 | 	mov	arg03, #0
0bc60     0A 18 06 F6 | 	mov	arg04, #10
0bc64     20 0F B1 FD | 	call	#__system___basic_print_integer
0bc68     00 12 06 F6 | 	mov	arg01, #0
0bc6c     09 14 06 F6 | 	mov	arg02, #9
0bc70     00 16 06 F6 | 	mov	arg03, #0
0bc74     74 0E B1 FD | 	call	#__system___basic_print_char
0bc78     04 4E 05 F1 | 	add	fp, #4
0bc7c     A7 14 02 FB | 	rdlong	arg02, fp
0bc80     04 4E 85 F1 | 	sub	fp, #4
0bc84     00 12 06 F6 | 	mov	arg01, #0
0bc88     00 16 06 F6 | 	mov	arg03, #0
0bc8c     0A 18 06 F6 | 	mov	arg04, #10
0bc90     F4 0E B1 FD | 	call	#__system___basic_print_integer
0bc94     00 12 06 F6 | 	mov	arg01, #0
0bc98     09 14 06 F6 | 	mov	arg02, #9
0bc9c     00 16 06 F6 | 	mov	arg03, #0
0bca0     48 0E B1 FD | 	call	#__system___basic_print_char
0bca4     0C 4E 05 F1 | 	add	fp, #12
0bca8     A7 14 02 FB | 	rdlong	arg02, fp
0bcac     0C 4E 85 F1 | 	sub	fp, #12
0bcb0     00 12 06 F6 | 	mov	arg01, #0
0bcb4     00 16 06 F6 | 	mov	arg03, #0
0bcb8     0A 18 06 F6 | 	mov	arg04, #10
0bcbc     C8 0E B1 FD | 	call	#__system___basic_print_integer
0bcc0     00 12 06 F6 | 	mov	arg01, #0
0bcc4     09 14 06 F6 | 	mov	arg02, #9
0bcc8     00 16 06 F6 | 	mov	arg03, #0
0bccc     1C 0E B1 FD | 	call	#__system___basic_print_char
0bcd0     A7 14 02 FB | 	rdlong	arg02, fp
0bcd4     04 4E 05 F1 | 	add	fp, #4
0bcd8     A7 22 02 FB | 	rdlong	local03, fp
0bcdc     11 15 02 F1 | 	add	arg02, local03
0bce0     08 4E 05 F1 | 	add	fp, #8
0bce4     A7 22 02 FB | 	rdlong	local03, fp
0bce8     0C 4E 85 F1 | 	sub	fp, #12
0bcec     11 15 02 F1 | 	add	arg02, local03
0bcf0     00 12 06 F6 | 	mov	arg01, #0
0bcf4     00 16 06 F6 | 	mov	arg03, #0
0bcf8     0A 18 06 F6 | 	mov	arg04, #10
0bcfc     88 0E B1 FD | 	call	#__system___basic_print_integer
0bd00     00 12 06 F6 | 	mov	arg01, #0
0bd04     0A 14 06 F6 | 	mov	arg02, #10
0bd08     00 16 06 F6 | 	mov	arg03, #0
0bd0c     DC 0D B1 FD | 	call	#__system___basic_print_char
0bd10     00 12 06 F6 | 	mov	arg01, #0
0bd14     B8 5A B1 FD | 	call	#__system___getiolock_0472
0bd18     FD 00 68 FC | 	wrlong	#0, result1
0bd1c     F8 BF 23 FF 
0bd20     00 22 06 F6 | 	mov	local03, ##1199566848
0bd24     A7 12 02 FB | 	rdlong	arg01, fp
0bd28     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd2c     1F 26 C6 C9 |  if_b	decod	local05, #31
0bd30     00 26 06 36 |  if_ae	mov	local05, #0
0bd34     80 28 B1 FD | 	call	#__system___float_fromuns
0bd38     13 FB 61 F5 | 	xor	result1, local05
0bd3c     FD 14 02 F6 | 	mov	arg02, result1
0bd40     11 13 02 F6 | 	mov	arg01, local03
0bd44     78 2E B1 FD | 	call	#__system___float_div
0bd48     54 4E 05 F1 | 	add	fp, #84
0bd4c     A7 FA 61 FC | 	wrlong	result1, fp
0bd50     F8 BF 23 FF 
0bd54     00 22 06 F6 | 	mov	local03, ##1199566848
0bd58     24 4E 85 F1 | 	sub	fp, #36
0bd5c     A7 14 02 FB | 	rdlong	arg02, fp
0bd60     30 4E 85 F1 | 	sub	fp, #48
0bd64     F8 BF 23 FF 
0bd68     00 12 06 F6 | 	mov	arg01, ##1199566848
0bd6c     4C 2C B1 FD | 	call	#__system___float_mul
0bd70     FD 14 02 F6 | 	mov	arg02, result1
0bd74     11 13 02 F6 | 	mov	arg01, local03
0bd78     1F 14 E6 F4 | 	bitnot	arg02, #31
0bd7c     6C 28 B1 FD | 	call	#__system___float_add
0bd80     FD 22 02 F6 | 	mov	local03, result1
0bd84     04 4E 05 F1 | 	add	fp, #4
0bd88     A7 12 02 FB | 	rdlong	arg01, fp
0bd8c     04 4E 85 F1 | 	sub	fp, #4
0bd90     09 13 52 F6 | 	abs	arg01, arg01 wc
0bd94     1F 26 C6 C9 |  if_b	decod	local05, #31
0bd98     00 26 06 36 |  if_ae	mov	local05, #0
0bd9c     18 28 B1 FD | 	call	#__system___float_fromuns
0bda0     13 FB 61 F5 | 	xor	result1, local05
0bda4     FD 14 02 F6 | 	mov	arg02, result1
0bda8     11 13 02 F6 | 	mov	arg01, local03
0bdac     10 2E B1 FD | 	call	#__system___float_div
0bdb0     2C 4E 05 F1 | 	add	fp, #44
0bdb4     A7 FA 61 FC | 	wrlong	result1, fp
0bdb8     04 4E 05 F1 | 	add	fp, #4
0bdbc     A7 14 02 FB | 	rdlong	arg02, fp
0bdc0     30 4E 85 F1 | 	sub	fp, #48
0bdc4     F8 BF 23 FF 
0bdc8     00 12 06 F6 | 	mov	arg01, ##1199566848
0bdcc     EC 2B B1 FD | 	call	#__system___float_mul
0bdd0     FD 22 02 F6 | 	mov	local03, result1
0bdd4     0C 4E 05 F1 | 	add	fp, #12
0bdd8     A7 12 02 FB | 	rdlong	arg01, fp
0bddc     0C 4E 85 F1 | 	sub	fp, #12
0bde0     09 13 52 F6 | 	abs	arg01, arg01 wc
0bde4     1F 26 C6 C9 |  if_b	decod	local05, #31
0bde8     00 26 06 36 |  if_ae	mov	local05, #0
0bdec     C8 27 B1 FD | 	call	#__system___float_fromuns
0bdf0     13 FB 61 F5 | 	xor	result1, local05
0bdf4     FD 14 02 F6 | 	mov	arg02, result1
0bdf8     11 13 02 F6 | 	mov	arg01, local03
0bdfc     C0 2D B1 FD | 	call	#__system___float_div
0be00     FD 22 02 F6 | 	mov	local03, result1
0be04     58 4E 05 F1 | 	add	fp, #88
0be08     A7 22 62 FC | 	wrlong	local03, fp
0be0c     58 4E 85 F1 | 	sub	fp, #88
0be10                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0be10     00 12 06 F6 | 	mov	arg01, #0
0be14     B8 59 B1 FD | 	call	#__system___getiolock_0472
0be18     FD 12 02 F6 | 	mov	arg01, result1
0be1c     20 00 B1 FD | 	call	#__system___lockmem
0be20     54 4E 05 F1 | 	add	fp, #84
0be24     A7 14 02 FB | 	rdlong	arg02, fp
0be28     54 4E 85 F1 | 	sub	fp, #84
0be2c     00 12 06 F6 | 	mov	arg01, #0
0be30     00 16 06 F6 | 	mov	arg03, #0
0be34     23 18 06 F6 | 	mov	arg04, #35
0be38     98 31 B1 FD | 	call	#__system___basic_print_float
0be3c     00 12 06 F6 | 	mov	arg01, #0
0be40     09 14 06 F6 | 	mov	arg02, #9
0be44     00 16 06 F6 | 	mov	arg03, #0
0be48     A0 0C B1 FD | 	call	#__system___basic_print_char
0be4c     2C 4E 05 F1 | 	add	fp, #44
0be50     A7 14 02 FB | 	rdlong	arg02, fp
0be54     2C 4E 85 F1 | 	sub	fp, #44
0be58     00 12 06 F6 | 	mov	arg01, #0
0be5c     00 16 06 F6 | 	mov	arg03, #0
0be60     23 18 06 F6 | 	mov	arg04, #35
0be64     6C 31 B1 FD | 	call	#__system___basic_print_float
0be68     00 12 06 F6 | 	mov	arg01, #0
0be6c     09 14 06 F6 | 	mov	arg02, #9
0be70     00 16 06 F6 | 	mov	arg03, #0
0be74     74 0C B1 FD | 	call	#__system___basic_print_char
0be78     58 4E 05 F1 | 	add	fp, #88
0be7c     A7 14 02 FB | 	rdlong	arg02, fp
0be80     58 4E 85 F1 | 	sub	fp, #88
0be84     00 12 06 F6 | 	mov	arg01, #0
0be88     00 16 06 F6 | 	mov	arg03, #0
0be8c     23 18 06 F6 | 	mov	arg04, #35
0be90     40 31 B1 FD | 	call	#__system___basic_print_float
0be94     00 12 06 F6 | 	mov	arg01, #0
0be98     0A 14 06 F6 | 	mov	arg02, #10
0be9c     00 16 06 F6 | 	mov	arg03, #0
0bea0     48 0C B1 FD | 	call	#__system___basic_print_char
0bea4     00 12 06 F6 | 	mov	arg01, #0
0bea8     24 59 B1 FD | 	call	#__system___getiolock_0472
0beac     FD 00 68 FC | 	wrlong	#0, result1
0beb0     20 4E 05 F1 | 	add	fp, #32
0beb4     A7 28 02 FB | 	rdlong	local06, fp
0beb8     20 4E 85 F1 | 	sub	fp, #32
0bebc     01 28 66 F0 | 	shl	local06, #1
0bec0     7B 00 00 FF 
0bec4     78 E4 05 F1 | 	add	objptr, ##63096
0bec8     F2 28 02 F1 | 	add	local06, objptr
0becc     A7 2A 02 FB | 	rdlong	local07, fp
0bed0     04 4E 05 F1 | 	add	fp, #4
0bed4     A7 22 02 FB | 	rdlong	local03, fp
0bed8     11 2B 02 F1 | 	add	local07, local03
0bedc     14 2B 52 FC | 	wrword	local07, local06
0bee0     24 4E 05 F1 | 	add	fp, #36
0bee4     A7 00 68 FC | 	wrlong	#0, fp
0bee8                 | '   suspoints(channel)=a+d
0bee8                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0bee8     14 4E 85 F1 | 	sub	fp, #20
0beec     A7 00 68 FC | 	wrlong	#0, fp
0bef0     14 4E 85 F1 | 	sub	fp, #20
0bef4     A7 2C 02 FB | 	rdlong	local08, fp
0bef8     7B 00 00 FF 
0befc     78 E4 85 F1 | 	sub	objptr, ##63096
0bf00                 | LR__0963
0bf00     14 4E 05 F1 | 	add	fp, #20
0bf04     A7 22 02 FB | 	rdlong	local03, fp
0bf08     14 4E 85 F1 | 	sub	fp, #20
0bf0c     16 23 52 F2 | 	cmps	local03, local08 wc
0bf10     80 00 90 3D |  if_ae	jmp	#LR__0964
0bf14     20 4E 05 F1 | 	add	fp, #32
0bf18     A7 28 02 FB | 	rdlong	local06, fp
0bf1c     09 28 66 F0 | 	shl	local06, #9
0bf20     2C 00 00 FF 
0bf24     CC E4 05 F1 | 	add	objptr, ##22732
0bf28     F2 28 02 F1 | 	add	local06, objptr
0bf2c     0C 4E 85 F1 | 	sub	fp, #12
0bf30     A7 22 02 FB | 	rdlong	local03, fp
0bf34     01 22 66 F0 | 	shl	local03, #1
0bf38     14 23 02 F1 | 	add	local03, local06
0bf3c     14 4E 05 F1 | 	add	fp, #20
0bf40     A7 12 02 FB | 	rdlong	arg01, fp
0bf44     28 4E 85 F1 | 	sub	fp, #40
0bf48     2C 00 00 FF 
0bf4c     CC E4 85 F1 | 	sub	objptr, ##22732
0bf50     01 14 06 F6 | 	mov	arg02, #1
0bf54     2C 2F B1 FD | 	call	#__system___float_tointeger
0bf58     11 FB 51 FC | 	wrword	result1, local03
0bf5c     28 4E 05 F1 | 	add	fp, #40
0bf60     A7 12 02 FB | 	rdlong	arg01, fp
0bf64     2C 4E 05 F1 | 	add	fp, #44
0bf68     A7 14 02 FB | 	rdlong	arg02, fp
0bf6c     54 4E 85 F1 | 	sub	fp, #84
0bf70     78 26 B1 FD | 	call	#__system___float_add
0bf74     28 4E 05 F1 | 	add	fp, #40
0bf78     A7 FA 61 FC | 	wrlong	result1, fp
0bf7c     14 4E 85 F1 | 	sub	fp, #20
0bf80     A7 20 02 FB | 	rdlong	local02, fp
0bf84     01 20 06 F1 | 	add	local02, #1
0bf88     A7 20 62 FC | 	wrlong	local02, fp
0bf8c     14 4E 85 F1 | 	sub	fp, #20
0bf90     6C FF 9F FD | 	jmp	#LR__0963
0bf94                 | LR__0964
0bf94                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0bf94     A7 22 02 FB | 	rdlong	local03, fp
0bf98     14 4E 05 F1 | 	add	fp, #20
0bf9c     A7 22 62 FC | 	wrlong	local03, fp
0bfa0     14 4E 85 F1 | 	sub	fp, #20
0bfa4     A7 2E 02 FB | 	rdlong	local09, fp
0bfa8     04 4E 05 F1 | 	add	fp, #4
0bfac     A7 22 02 FB | 	rdlong	local03, fp
0bfb0     04 4E 85 F1 | 	sub	fp, #4
0bfb4     11 2F 02 F1 | 	add	local09, local03
0bfb8                 | LR__0965
0bfb8     14 4E 05 F1 | 	add	fp, #20
0bfbc     A7 22 02 FB | 	rdlong	local03, fp
0bfc0     14 4E 85 F1 | 	sub	fp, #20
0bfc4     17 23 52 F2 | 	cmps	local03, local09 wc
0bfc8     A8 00 90 3D |  if_ae	jmp	#LR__0966
0bfcc     20 4E 05 F1 | 	add	fp, #32
0bfd0     A7 2C 02 FB | 	rdlong	local08, fp
0bfd4     09 2C 66 F0 | 	shl	local08, #9
0bfd8     2C 00 00 FF 
0bfdc     CC E4 05 F1 | 	add	objptr, ##22732
0bfe0     F2 2C 02 F1 | 	add	local08, objptr
0bfe4     0C 4E 85 F1 | 	sub	fp, #12
0bfe8     A7 2A 02 FB | 	rdlong	local07, fp
0bfec     01 2A 66 F0 | 	shl	local07, #1
0bff0     16 2B 02 F1 | 	add	local07, local08
0bff4     14 4E 05 F1 | 	add	fp, #20
0bff8     A7 12 02 FB | 	rdlong	arg01, fp
0bffc     28 4E 85 F1 | 	sub	fp, #40
0c000     2C 00 00 FF 
0c004     CC E4 85 F1 | 	sub	objptr, ##22732
0c008     01 14 06 F6 | 	mov	arg02, #1
0c00c     74 2E B1 FD | 	call	#__system___float_tointeger
0c010     15 FB 51 FC | 	wrword	result1, local07
0c014     28 4E 05 F1 | 	add	fp, #40
0c018     A7 12 02 FB | 	rdlong	arg01, fp
0c01c     04 4E 05 F1 | 	add	fp, #4
0c020     A7 14 02 FB | 	rdlong	arg02, fp
0c024     2C 4E 85 F1 | 	sub	fp, #44
0c028     1F 14 E6 F4 | 	bitnot	arg02, #31
0c02c     BC 25 B1 FD | 	call	#__system___float_add
0c030     28 4E 05 F1 | 	add	fp, #40
0c034     A7 FA 61 FC | 	wrlong	result1, fp
0c038     28 4E 85 F1 | 	sub	fp, #40
0c03c     FD 12 02 F6 | 	mov	arg01, result1
0c040     00 14 06 F6 | 	mov	arg02, #0
0c044     01 16 06 F6 | 	mov	arg03, #1
0c048     A4 2D B1 FD | 	call	#__system___float_cmp
0c04c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c050     28 4E 05 C1 |  if_b	add	fp, #40
0c054     A7 00 68 CC |  if_b	wrlong	#0, fp
0c058     28 4E 85 C1 |  if_b	sub	fp, #40
0c05c     14 4E 05 F1 | 	add	fp, #20
0c060     A7 20 02 FB | 	rdlong	local02, fp
0c064     01 20 06 F1 | 	add	local02, #1
0c068     A7 20 62 FC | 	wrlong	local02, fp
0c06c     14 4E 85 F1 | 	sub	fp, #20
0c070     44 FF 9F FD | 	jmp	#LR__0965
0c074                 | LR__0966
0c074                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0c074     A7 22 02 FB | 	rdlong	local03, fp
0c078     04 4E 05 F1 | 	add	fp, #4
0c07c     A7 2E 02 FB | 	rdlong	local09, fp
0c080     17 23 02 F1 | 	add	local03, local09
0c084     10 4E 05 F1 | 	add	fp, #16
0c088     A7 22 62 FC | 	wrlong	local03, fp
0c08c     14 4E 85 F1 | 	sub	fp, #20
0c090                 | LR__0967
0c090     14 4E 05 F1 | 	add	fp, #20
0c094     A7 28 02 FB | 	rdlong	local06, fp
0c098     14 4E 85 F1 | 	sub	fp, #20
0c09c     00 29 56 F2 | 	cmps	local06, #256 wc
0c0a0     A8 00 90 3D |  if_ae	jmp	#LR__0968
0c0a4     20 4E 05 F1 | 	add	fp, #32
0c0a8     A7 2E 02 FB | 	rdlong	local09, fp
0c0ac     09 2E 66 F0 | 	shl	local09, #9
0c0b0     2C 00 00 FF 
0c0b4     CC E4 05 F1 | 	add	objptr, ##22732
0c0b8     F2 2E 02 F1 | 	add	local09, objptr
0c0bc     0C 4E 85 F1 | 	sub	fp, #12
0c0c0     A7 2C 02 FB | 	rdlong	local08, fp
0c0c4     01 2C 66 F0 | 	shl	local08, #1
0c0c8     17 2D 02 F1 | 	add	local08, local09
0c0cc     14 4E 05 F1 | 	add	fp, #20
0c0d0     A7 12 02 FB | 	rdlong	arg01, fp
0c0d4     28 4E 85 F1 | 	sub	fp, #40
0c0d8     2C 00 00 FF 
0c0dc     CC E4 85 F1 | 	sub	objptr, ##22732
0c0e0     01 14 06 F6 | 	mov	arg02, #1
0c0e4     9C 2D B1 FD | 	call	#__system___float_tointeger
0c0e8     16 FB 51 FC | 	wrword	result1, local08
0c0ec     28 4E 05 F1 | 	add	fp, #40
0c0f0     A7 12 02 FB | 	rdlong	arg01, fp
0c0f4     30 4E 05 F1 | 	add	fp, #48
0c0f8     A7 14 02 FB | 	rdlong	arg02, fp
0c0fc     58 4E 85 F1 | 	sub	fp, #88
0c100     1F 14 E6 F4 | 	bitnot	arg02, #31
0c104     E4 24 B1 FD | 	call	#__system___float_add
0c108     28 4E 05 F1 | 	add	fp, #40
0c10c     A7 FA 61 FC | 	wrlong	result1, fp
0c110     28 4E 85 F1 | 	sub	fp, #40
0c114     FD 12 02 F6 | 	mov	arg01, result1
0c118     00 14 06 F6 | 	mov	arg02, #0
0c11c     01 16 06 F6 | 	mov	arg03, #1
0c120     CC 2C B1 FD | 	call	#__system___float_cmp
0c124     00 FA 55 F2 | 	cmps	result1, #0 wc
0c128     28 4E 05 C1 |  if_b	add	fp, #40
0c12c     A7 00 68 CC |  if_b	wrlong	#0, fp
0c130     28 4E 85 C1 |  if_b	sub	fp, #40
0c134     14 4E 05 F1 | 	add	fp, #20
0c138     A7 2E 02 FB | 	rdlong	local09, fp
0c13c     01 2E 06 F1 | 	add	local09, #1
0c140     A7 2E 62 FC | 	wrlong	local09, fp
0c144     14 4E 85 F1 | 	sub	fp, #20
0c148     44 FF 9F FD | 	jmp	#LR__0967
0c14c                 | LR__0968
0c14c     20 4E 05 F1 | 	add	fp, #32
0c150     A7 28 02 FB | 	rdlong	local06, fp
0c154     09 28 66 F0 | 	shl	local06, #9
0c158     2C 00 00 FF 
0c15c     CC E4 05 F1 | 	add	objptr, ##22732
0c160     F2 28 02 F1 | 	add	local06, objptr
0c164     FE 29 06 F1 | 	add	local06, #510
0c168     14 01 58 FC | 	wrword	#0, local06
0c16c                 | '   envbuf(channel,255)=0
0c16c                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0c16c     0C 4E 85 F1 | 	sub	fp, #12
0c170     A7 00 68 FC | 	wrlong	#0, fp
0c174     14 4E 85 F1 | 	sub	fp, #20
0c178     2C 00 00 FF 
0c17c     CC E4 85 F1 | 	sub	objptr, ##22732
0c180                 | LR__0969
0c180     00 12 06 F6 | 	mov	arg01, #0
0c184     48 56 B1 FD | 	call	#__system___getiolock_0472
0c188     FD 12 02 F6 | 	mov	arg01, result1
0c18c     B0 FC B0 FD | 	call	#__system___lockmem
0c190     20 4E 05 F1 | 	add	fp, #32
0c194     A7 2E 02 FB | 	rdlong	local09, fp
0c198     09 2E 66 F0 | 	shl	local09, #9
0c19c     2C 00 00 FF 
0c1a0     CC E4 05 F1 | 	add	objptr, ##22732
0c1a4     F2 2E 02 F1 | 	add	local09, objptr
0c1a8     0C 4E 85 F1 | 	sub	fp, #12
0c1ac     A7 2C 02 FB | 	rdlong	local08, fp
0c1b0     14 4E 85 F1 | 	sub	fp, #20
0c1b4     01 2C 66 F0 | 	shl	local08, #1
0c1b8     17 2D 02 F1 | 	add	local08, local09
0c1bc     16 15 E2 FA | 	rdword	arg02, local08
0c1c0     00 12 06 F6 | 	mov	arg01, #0
0c1c4     00 16 06 F6 | 	mov	arg03, #0
0c1c8     0A 18 06 F6 | 	mov	arg04, #10
0c1cc     2C 00 00 FF 
0c1d0     CC E4 85 F1 | 	sub	objptr, ##22732
0c1d4     F0 09 B1 FD | 	call	#__system___basic_print_unsigned
0c1d8     00 12 06 F6 | 	mov	arg01, #0
0c1dc     09 14 06 F6 | 	mov	arg02, #9
0c1e0     00 16 06 F6 | 	mov	arg03, #0
0c1e4     04 09 B1 FD | 	call	#__system___basic_print_char
0c1e8     00 12 06 F6 | 	mov	arg01, #0
0c1ec     E0 55 B1 FD | 	call	#__system___getiolock_0472
0c1f0     FD 00 68 FC | 	wrlong	#0, result1
0c1f4     14 4E 05 F1 | 	add	fp, #20
0c1f8     A7 2E 02 FB | 	rdlong	local09, fp
0c1fc     01 2E 06 F1 | 	add	local09, #1
0c200     A7 2E 62 FC | 	wrlong	local09, fp
0c204     14 4E 85 F1 | 	sub	fp, #20
0c208     00 2F 56 F2 | 	cmps	local09, #256 wc
0c20c     70 FF 9F CD |  if_b	jmp	#LR__0969
0c210                 | LR__0970
0c210                 | LR__0971
0c210     A7 F0 03 F6 | 	mov	ptra, fp
0c214     B2 00 A0 FD | 	call	#popregs_
0c218                 | _do_defenv_ret
0c218     2D 00 64 FD | 	ret
0c21c                 | 
0c21c                 | ' 
0c21c                 | ' 
0c21c                 | ' sub do_play
0c21c                 | _do_play
0c21c     05 4A 05 F6 | 	mov	COUNT_, #5
0c220     A8 00 A0 FD | 	call	#pushregs_
0c224     74 F0 07 F1 | 	add	ptra, #116
0c228     60 4E 05 F1 | 	add	fp, #96
0c22c     F5 25 A2 FF 
0c230     A7 AA 68 FC | 	wrlong	##1145825877, fp
0c234                 | ' speed_coeff=815.6614449376854599406528189911
0c234                 | ' 
0c234                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0c234     5C 4E 85 F1 | 	sub	fp, #92
0c238     A7 00 68 FC | 	wrlong	#0, fp
0c23c     97 18 48 FB | 	callpa	#(@LR__0981-@LR__0980)>>2,fcache_load_ptr_
0c240                 | LR__0980
0c240     A7 18 02 FB | 	rdlong	arg04, fp
0c244     02 18 66 F0 | 	shl	arg04, #2
0c248     2C 4E 05 F1 | 	add	fp, #44
0c24c     A7 18 02 F1 | 	add	arg04, fp
0c250     00 00 E0 FF 
0c254     0C 01 68 FC | 	wrlong	##-1073741824, arg04
0c258     2C 4E 85 F1 | 	sub	fp, #44
0c25c     A7 1E 02 FB | 	rdlong	local01, fp
0c260     01 1E 06 F1 | 	add	local01, #1
0c264     A7 1E 62 FC | 	wrlong	local01, fp
0c268     09 1E 56 F2 | 	cmps	local01, #9 wc
0c26c     D0 FF 9F CD |  if_b	jmp	#LR__0980
0c270                 | LR__0981
0c270     04 4E 85 F1 | 	sub	fp, #4
0c274     6A 00 00 FF 
0c278     64 E4 05 F1 | 	add	objptr, ##54372
0c27c     F2 20 02 FB | 	rdlong	local02, objptr
0c280     10 23 02 F6 | 	mov	local03, local02
0c284     01 22 66 F0 | 	shl	local03, #1
0c288     10 23 02 F1 | 	add	local03, local02
0c28c     02 22 66 F0 | 	shl	local03, #2
0c290     03 00 00 FF 
0c294     04 E4 85 F1 | 	sub	objptr, ##1540
0c298     F2 22 02 F1 | 	add	local03, objptr
0c29c     11 25 02 FB | 	rdlong	local04, local03
0c2a0     A7 24 62 FC | 	wrlong	local04, fp
0c2a4                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0c2a4                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0c2a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c2a4                 | ' for i=numpar to 1 step -1 
0c2a4     04 4E 05 F1 | 	add	fp, #4
0c2a8     A7 24 62 FC | 	wrlong	local04, fp
0c2ac     04 4E 85 F1 | 	sub	fp, #4
0c2b0     67 00 00 FF 
0c2b4     60 E4 85 F1 | 	sub	objptr, ##52832
0c2b8                 | LR__0982
0c2b8     CC DD BF FD | 	call	#_pop
0c2bc     54 4E 05 F1 | 	add	fp, #84
0c2c0     A7 FA 61 FC | 	wrlong	result1, fp
0c2c4     04 4E 05 F1 | 	add	fp, #4
0c2c8     A7 FC 61 FC | 	wrlong	result2, fp
0c2cc     04 4E 05 F1 | 	add	fp, #4
0c2d0     A7 FE 61 FC | 	wrlong	result3, fp
0c2d4     58 4E 85 F1 | 	sub	fp, #88
0c2d8     A7 22 02 FB | 	rdlong	local03, fp
0c2dc     01 22 86 F1 | 	sub	local03, #1
0c2e0     02 22 66 F0 | 	shl	local03, #2
0c2e4     2C 4E 05 F1 | 	add	fp, #44
0c2e8     A7 22 02 F1 | 	add	local03, fp
0c2ec     24 4E 05 F1 | 	add	fp, #36
0c2f0     A7 26 02 F6 | 	mov	local05, fp
0c2f4     13 13 02 F6 | 	mov	arg01, local05
0c2f8     54 4E 85 F1 | 	sub	fp, #84
0c2fc     88 64 B0 FD | 	call	#_converttofloat
0c300     11 FB 61 FC | 	wrlong	result1, local03
0c304     04 4E 05 F1 | 	add	fp, #4
0c308     A7 1E 02 FB | 	rdlong	local01, fp
0c30c     01 1E 86 F1 | 	sub	local01, #1
0c310     A7 1E 62 FC | 	wrlong	local01, fp
0c314     04 4E 85 F1 | 	sub	fp, #4
0c318     01 1E 56 F2 | 	cmps	local01, #1 wc
0c31c     98 FF 9F 3D |  if_ae	jmp	#LR__0982
0c320                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0c320     30 4E 05 F1 | 	add	fp, #48
0c324     A7 12 02 FB | 	rdlong	arg01, fp
0c328     30 4E 85 F1 | 	sub	fp, #48
0c32c     00 14 06 F6 | 	mov	arg02, #0
0c330     01 16 06 F6 | 	mov	arg03, #1
0c334     B8 2A B1 FD | 	call	#__system___float_cmp
0c338     00 FA 55 F2 | 	cmps	result1, #0 wc
0c33c     0C 4E 05 C1 |  if_b	add	fp, #12
0c340     A7 00 68 CC |  if_b	wrlong	#0, fp
0c344     0C 4E 85 C1 |  if_b	sub	fp, #12
0c348     20 00 90 CD |  if_b	jmp	#LR__0983
0c34c     30 4E 05 F1 | 	add	fp, #48
0c350     A7 12 02 FB | 	rdlong	arg01, fp
0c354     30 4E 85 F1 | 	sub	fp, #48
0c358     01 14 06 F6 | 	mov	arg02, #1
0c35c     24 2B B1 FD | 	call	#__system___float_tointeger
0c360     0C 4E 05 F1 | 	add	fp, #12
0c364     A7 FA 61 FC | 	wrlong	result1, fp
0c368     0C 4E 85 F1 | 	sub	fp, #12
0c36c                 | LR__0983
0c36c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0c36c     34 4E 05 F1 | 	add	fp, #52
0c370     A7 12 02 FB | 	rdlong	arg01, fp
0c374     34 4E 85 F1 | 	sub	fp, #52
0c378     00 14 06 F6 | 	mov	arg02, #0
0c37c     01 16 06 F6 | 	mov	arg03, #1
0c380     6C 2A B1 FD | 	call	#__system___float_cmp
0c384     00 FA 55 F2 | 	cmps	result1, #0 wc
0c388     40 00 90 3D |  if_ae	jmp	#LR__0984
0c38c     0C 4E 05 F1 | 	add	fp, #12
0c390     A7 20 02 FB | 	rdlong	local02, fp
0c394     10 23 02 F6 | 	mov	local03, local02
0c398     01 22 66 F0 | 	shl	local03, #1
0c39c     10 23 02 F1 | 	add	local03, local02
0c3a0     03 22 66 F0 | 	shl	local03, #3
0c3a4     34 00 00 FF 
0c3a8     2C E5 05 F1 | 	add	objptr, ##26924
0c3ac     F2 22 02 F1 | 	add	local03, objptr
0c3b0     11 23 02 FB | 	rdlong	local03, local03
0c3b4     58 4E 05 F1 | 	add	fp, #88
0c3b8     A7 22 62 FC | 	wrlong	local03, fp
0c3bc     64 4E 85 F1 | 	sub	fp, #100
0c3c0     34 00 00 FF 
0c3c4     2C E5 85 F1 | 	sub	objptr, ##26924
0c3c8     44 00 90 FD | 	jmp	#LR__0985
0c3cc                 | LR__0984
0c3cc     34 4E 05 F1 | 	add	fp, #52
0c3d0     A7 24 02 FB | 	rdlong	local04, fp
0c3d4     30 4E 05 F1 | 	add	fp, #48
0c3d8     A7 24 62 FC | 	wrlong	local04, fp
0c3dc     58 4E 85 F1 | 	sub	fp, #88
0c3e0     A7 20 02 FB | 	rdlong	local02, fp
0c3e4     10 23 02 F6 | 	mov	local03, local02
0c3e8     01 22 66 F0 | 	shl	local03, #1
0c3ec     10 23 02 F1 | 	add	local03, local02
0c3f0     03 22 66 F0 | 	shl	local03, #3
0c3f4     34 00 00 FF 
0c3f8     2C E5 05 F1 | 	add	objptr, ##26924
0c3fc     F2 22 02 F1 | 	add	local03, objptr
0c400     0C 4E 85 F1 | 	sub	fp, #12
0c404     11 25 62 FC | 	wrlong	local04, local03
0c408     34 00 00 FF 
0c40c     2C E5 85 F1 | 	sub	objptr, ##26924
0c410                 | LR__0985
0c410                 | ' if params(2)<0 orelse params(2)>16.384 then vol=channels(channel).vol else vol=params(2) : channels(channel).vol=vol
0c410     38 4E 05 F1 | 	add	fp, #56
0c414     A7 12 02 FB | 	rdlong	arg01, fp
0c418     38 4E 85 F1 | 	sub	fp, #56
0c41c     00 14 06 F6 | 	mov	arg02, #0
0c420     01 16 06 F6 | 	mov	arg03, #1
0c424     C8 29 B1 FD | 	call	#__system___float_cmp
0c428     00 FA 55 F2 | 	cmps	result1, #0 wc
0c42c     24 00 90 CD |  if_b	jmp	#LR__0986
0c430     38 4E 05 F1 | 	add	fp, #56
0c434     A7 12 02 FB | 	rdlong	arg01, fp
0c438     38 4E 85 F1 | 	sub	fp, #56
0c43c     89 C1 20 FF 
0c440     6F 14 06 F6 | 	mov	arg02, ##1099108975
0c444     01 16 66 F6 | 	neg	arg03, #1
0c448     A4 29 B1 FD | 	call	#__system___float_cmp
0c44c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c450     44 00 90 CD |  if_b	jmp	#LR__0987
0c454                 | LR__0986
0c454     0C 4E 05 F1 | 	add	fp, #12
0c458     A7 20 02 FB | 	rdlong	local02, fp
0c45c     10 23 02 F6 | 	mov	local03, local02
0c460     01 22 66 F0 | 	shl	local03, #1
0c464     10 23 02 F1 | 	add	local03, local02
0c468     03 22 66 F0 | 	shl	local03, #3
0c46c     34 00 00 FF 
0c470     2C E5 05 F1 | 	add	objptr, ##26924
0c474     F2 22 02 F1 | 	add	local03, objptr
0c478     0C 22 06 F1 | 	add	local03, #12
0c47c     11 23 02 FB | 	rdlong	local03, local03
0c480     60 4E 05 F1 | 	add	fp, #96
0c484     A7 22 62 FC | 	wrlong	local03, fp
0c488     6C 4E 85 F1 | 	sub	fp, #108
0c48c     34 00 00 FF 
0c490     2C E5 85 F1 | 	sub	objptr, ##26924
0c494     48 00 90 FD | 	jmp	#LR__0988
0c498                 | LR__0987
0c498     38 4E 05 F1 | 	add	fp, #56
0c49c     A7 24 02 FB | 	rdlong	local04, fp
0c4a0     34 4E 05 F1 | 	add	fp, #52
0c4a4     A7 24 62 FC | 	wrlong	local04, fp
0c4a8     60 4E 85 F1 | 	sub	fp, #96
0c4ac     A7 20 02 FB | 	rdlong	local02, fp
0c4b0     10 23 02 F6 | 	mov	local03, local02
0c4b4     01 22 66 F0 | 	shl	local03, #1
0c4b8     10 23 02 F1 | 	add	local03, local02
0c4bc     03 22 66 F0 | 	shl	local03, #3
0c4c0     34 00 00 FF 
0c4c4     2C E5 05 F1 | 	add	objptr, ##26924
0c4c8     F2 22 02 F1 | 	add	local03, objptr
0c4cc     0C 4E 85 F1 | 	sub	fp, #12
0c4d0     0C 22 06 F1 | 	add	local03, #12
0c4d4     11 25 62 FC | 	wrlong	local04, local03
0c4d8     34 00 00 FF 
0c4dc     2C E5 85 F1 | 	sub	objptr, ##26924
0c4e0                 | LR__0988
0c4e0                 | ' if params(3)<0 orelse params(3)>8.0 then wave=channels(channel).wave else wave=round(params(3)) : channels(channel).wave=wave
0c4e0     3C 4E 05 F1 | 	add	fp, #60
0c4e4     A7 12 02 FB | 	rdlong	arg01, fp
0c4e8     3C 4E 85 F1 | 	sub	fp, #60
0c4ec     00 14 06 F6 | 	mov	arg02, #0
0c4f0     01 16 06 F6 | 	mov	arg03, #1
0c4f4     F8 28 B1 FD | 	call	#__system___float_cmp
0c4f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c4fc     24 00 90 CD |  if_b	jmp	#LR__0989
0c500     3C 4E 05 F1 | 	add	fp, #60
0c504     A7 12 02 FB | 	rdlong	arg01, fp
0c508     3C 4E 85 F1 | 	sub	fp, #60
0c50c     00 80 20 FF 
0c510     00 14 06 F6 | 	mov	arg02, ##1090519040
0c514     01 16 66 F6 | 	neg	arg03, #1
0c518     D4 28 B1 FD | 	call	#__system___float_cmp
0c51c     01 FA 55 F2 | 	cmps	result1, #1 wc
0c520     48 00 90 CD |  if_b	jmp	#LR__0990
0c524                 | LR__0989
0c524     0C 4E 05 F1 | 	add	fp, #12
0c528     A7 22 02 FB | 	rdlong	local03, fp
0c52c     11 27 02 F6 | 	mov	local05, local03
0c530     01 26 66 F0 | 	shl	local05, #1
0c534     11 27 02 F1 | 	add	local05, local03
0c538     03 26 66 F0 | 	shl	local05, #3
0c53c     34 00 00 FF 
0c540     2C E5 05 F1 | 	add	objptr, ##26924
0c544     F2 26 02 F1 | 	add	local05, objptr
0c548     04 26 06 F1 | 	add	local05, #4
0c54c     13 27 C2 FA | 	rdbyte	local05, local05
0c550     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c554     14 4E 05 F1 | 	add	fp, #20
0c558     A7 24 62 FC | 	wrlong	local04, fp
0c55c     20 4E 85 F1 | 	sub	fp, #32
0c560     34 00 00 FF 
0c564     2C E5 85 F1 | 	sub	objptr, ##26924
0c568     54 00 90 FD | 	jmp	#LR__0991
0c56c                 | LR__0990
0c56c     3C 4E 05 F1 | 	add	fp, #60
0c570     A7 12 02 FB | 	rdlong	arg01, fp
0c574     3C 4E 85 F1 | 	sub	fp, #60
0c578     01 14 06 F6 | 	mov	arg02, #1
0c57c     04 29 B1 FD | 	call	#__system___float_tointeger
0c580     20 4E 05 F1 | 	add	fp, #32
0c584     A7 FA 61 FC | 	wrlong	result1, fp
0c588     14 4E 85 F1 | 	sub	fp, #20
0c58c     A7 20 02 FB | 	rdlong	local02, fp
0c590     10 23 02 F6 | 	mov	local03, local02
0c594     01 22 66 F0 | 	shl	local03, #1
0c598     10 23 02 F1 | 	add	local03, local02
0c59c     03 22 66 F0 | 	shl	local03, #3
0c5a0     34 00 00 FF 
0c5a4     2C E5 05 F1 | 	add	objptr, ##26924
0c5a8     F2 22 02 F1 | 	add	local03, objptr
0c5ac     0C 4E 85 F1 | 	sub	fp, #12
0c5b0     04 22 06 F1 | 	add	local03, #4
0c5b4     11 FB 41 FC | 	wrbyte	result1, local03
0c5b8     34 00 00 FF 
0c5bc     2C E5 85 F1 | 	sub	objptr, ##26924
0c5c0                 | LR__0991
0c5c0                 | ' if params(4)<0 orelse params(4)>8.0 then env=channels(channel).env else env=round(params(4)) : channels(channel).env=env
0c5c0     40 4E 05 F1 | 	add	fp, #64
0c5c4     A7 12 02 FB | 	rdlong	arg01, fp
0c5c8     40 4E 85 F1 | 	sub	fp, #64
0c5cc     00 14 06 F6 | 	mov	arg02, #0
0c5d0     01 16 06 F6 | 	mov	arg03, #1
0c5d4     18 28 B1 FD | 	call	#__system___float_cmp
0c5d8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c5dc     24 00 90 CD |  if_b	jmp	#LR__0992
0c5e0     40 4E 05 F1 | 	add	fp, #64
0c5e4     A7 12 02 FB | 	rdlong	arg01, fp
0c5e8     40 4E 85 F1 | 	sub	fp, #64
0c5ec     00 80 20 FF 
0c5f0     00 14 06 F6 | 	mov	arg02, ##1090519040
0c5f4     01 16 66 F6 | 	neg	arg03, #1
0c5f8     F4 27 B1 FD | 	call	#__system___float_cmp
0c5fc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c600     48 00 90 CD |  if_b	jmp	#LR__0993
0c604                 | LR__0992
0c604     0C 4E 05 F1 | 	add	fp, #12
0c608     A7 22 02 FB | 	rdlong	local03, fp
0c60c     11 27 02 F6 | 	mov	local05, local03
0c610     01 26 66 F0 | 	shl	local05, #1
0c614     11 27 02 F1 | 	add	local05, local03
0c618     03 26 66 F0 | 	shl	local05, #3
0c61c     34 00 00 FF 
0c620     2C E5 05 F1 | 	add	objptr, ##26924
0c624     F2 26 02 F1 | 	add	local05, objptr
0c628     05 26 06 F1 | 	add	local05, #5
0c62c     13 27 C2 FA | 	rdbyte	local05, local05
0c630     13 25 E2 F8 | 	getbyte	local04, local05, #0
0c634     18 4E 05 F1 | 	add	fp, #24
0c638     A7 24 62 FC | 	wrlong	local04, fp
0c63c     24 4E 85 F1 | 	sub	fp, #36
0c640     34 00 00 FF 
0c644     2C E5 85 F1 | 	sub	objptr, ##26924
0c648     54 00 90 FD | 	jmp	#LR__0994
0c64c                 | LR__0993
0c64c     40 4E 05 F1 | 	add	fp, #64
0c650     A7 12 02 FB | 	rdlong	arg01, fp
0c654     40 4E 85 F1 | 	sub	fp, #64
0c658     01 14 06 F6 | 	mov	arg02, #1
0c65c     24 28 B1 FD | 	call	#__system___float_tointeger
0c660     24 4E 05 F1 | 	add	fp, #36
0c664     A7 FA 61 FC | 	wrlong	result1, fp
0c668     18 4E 85 F1 | 	sub	fp, #24
0c66c     A7 20 02 FB | 	rdlong	local02, fp
0c670     10 23 02 F6 | 	mov	local03, local02
0c674     01 22 66 F0 | 	shl	local03, #1
0c678     10 23 02 F1 | 	add	local03, local02
0c67c     03 22 66 F0 | 	shl	local03, #3
0c680     34 00 00 FF 
0c684     2C E5 05 F1 | 	add	objptr, ##26924
0c688     F2 22 02 F1 | 	add	local03, objptr
0c68c     0C 4E 85 F1 | 	sub	fp, #12
0c690     05 22 06 F1 | 	add	local03, #5
0c694     11 FB 41 FC | 	wrbyte	result1, local03
0c698     34 00 00 FF 
0c69c     2C E5 85 F1 | 	sub	objptr, ##26924
0c6a0                 | LR__0994
0c6a0                 | ' if params(5)<0 orelse params(5)>1000.0 then slen=channels(channel).length else slen=params(5) : channels(channel).length=slen
0c6a0     44 4E 05 F1 | 	add	fp, #68
0c6a4     A7 12 02 FB | 	rdlong	arg01, fp
0c6a8     44 4E 85 F1 | 	sub	fp, #68
0c6ac     00 14 06 F6 | 	mov	arg02, #0
0c6b0     01 16 06 F6 | 	mov	arg03, #1
0c6b4     38 27 B1 FD | 	call	#__system___float_cmp
0c6b8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c6bc     24 00 90 CD |  if_b	jmp	#LR__0995
0c6c0     44 4E 05 F1 | 	add	fp, #68
0c6c4     A7 12 02 FB | 	rdlong	arg01, fp
0c6c8     44 4E 85 F1 | 	sub	fp, #68
0c6cc     00 3D 22 FF 
0c6d0     00 14 06 F6 | 	mov	arg02, ##1148846080
0c6d4     01 16 66 F6 | 	neg	arg03, #1
0c6d8     14 27 B1 FD | 	call	#__system___float_cmp
0c6dc     01 FA 55 F2 | 	cmps	result1, #1 wc
0c6e0     44 00 90 CD |  if_b	jmp	#LR__0996
0c6e4                 | LR__0995
0c6e4     0C 4E 05 F1 | 	add	fp, #12
0c6e8     A7 20 02 FB | 	rdlong	local02, fp
0c6ec     10 23 02 F6 | 	mov	local03, local02
0c6f0     01 22 66 F0 | 	shl	local03, #1
0c6f4     10 23 02 F1 | 	add	local03, local02
0c6f8     03 22 66 F0 | 	shl	local03, #3
0c6fc     34 00 00 FF 
0c700     2C E5 05 F1 | 	add	objptr, ##26924
0c704     F2 22 02 F1 | 	add	local03, objptr
0c708     08 22 06 F1 | 	add	local03, #8
0c70c     11 25 02 FB | 	rdlong	local04, local03
0c710     64 4E 05 F1 | 	add	fp, #100
0c714     A7 24 62 FC | 	wrlong	local04, fp
0c718     70 4E 85 F1 | 	sub	fp, #112
0c71c     34 00 00 FF 
0c720     2C E5 85 F1 | 	sub	objptr, ##26924
0c724     48 00 90 FD | 	jmp	#LR__0997
0c728                 | LR__0996
0c728     44 4E 05 F1 | 	add	fp, #68
0c72c     A7 24 02 FB | 	rdlong	local04, fp
0c730     2C 4E 05 F1 | 	add	fp, #44
0c734     A7 24 62 FC | 	wrlong	local04, fp
0c738     64 4E 85 F1 | 	sub	fp, #100
0c73c     A7 20 02 FB | 	rdlong	local02, fp
0c740     10 23 02 F6 | 	mov	local03, local02
0c744     01 22 66 F0 | 	shl	local03, #1
0c748     10 23 02 F1 | 	add	local03, local02
0c74c     03 22 66 F0 | 	shl	local03, #3
0c750     34 00 00 FF 
0c754     2C E5 05 F1 | 	add	objptr, ##26924
0c758     F2 22 02 F1 | 	add	local03, objptr
0c75c     0C 4E 85 F1 | 	sub	fp, #12
0c760     08 22 06 F1 | 	add	local03, #8
0c764     11 25 62 FC | 	wrlong	local04, local03
0c768     34 00 00 FF 
0c76c     2C E5 85 F1 | 	sub	objptr, ##26924
0c770                 | LR__0997
0c770                 | ' if params(6)<0 orelse params(6)>10000.0 then delay=channels(channel).delay else delay=round(params(6)) : channels(channel).delay=delay
0c770     48 4E 05 F1 | 	add	fp, #72
0c774     A7 12 02 FB | 	rdlong	arg01, fp
0c778     48 4E 85 F1 | 	sub	fp, #72
0c77c     00 14 06 F6 | 	mov	arg02, #0
0c780     01 16 06 F6 | 	mov	arg03, #1
0c784     68 26 B1 FD | 	call	#__system___float_cmp
0c788     00 FA 55 F2 | 	cmps	result1, #0 wc
0c78c     24 00 90 CD |  if_b	jmp	#LR__0998
0c790     48 4E 05 F1 | 	add	fp, #72
0c794     A7 12 02 FB | 	rdlong	arg01, fp
0c798     48 4E 85 F1 | 	sub	fp, #72
0c79c     20 0E 23 FF 
0c7a0     00 14 06 F6 | 	mov	arg02, ##1176256512
0c7a4     01 16 66 F6 | 	neg	arg03, #1
0c7a8     44 26 B1 FD | 	call	#__system___float_cmp
0c7ac     01 FA 55 F2 | 	cmps	result1, #1 wc
0c7b0     48 00 90 CD |  if_b	jmp	#LR__0999
0c7b4                 | LR__0998
0c7b4     0C 4E 05 F1 | 	add	fp, #12
0c7b8     A7 22 02 FB | 	rdlong	local03, fp
0c7bc     11 27 02 F6 | 	mov	local05, local03
0c7c0     01 26 66 F0 | 	shl	local05, #1
0c7c4     11 27 02 F1 | 	add	local05, local03
0c7c8     03 26 66 F0 | 	shl	local05, #3
0c7cc     34 00 00 FF 
0c7d0     2C E5 05 F1 | 	add	objptr, ##26924
0c7d4     F2 26 02 F1 | 	add	local05, objptr
0c7d8     06 26 06 F1 | 	add	local05, #6
0c7dc     13 27 E2 FA | 	rdword	local05, local05
0c7e0     13 25 32 F9 | 	getword	local04, local05, #0
0c7e4     1C 4E 05 F1 | 	add	fp, #28
0c7e8     A7 24 62 FC | 	wrlong	local04, fp
0c7ec     28 4E 85 F1 | 	sub	fp, #40
0c7f0     34 00 00 FF 
0c7f4     2C E5 85 F1 | 	sub	objptr, ##26924
0c7f8     54 00 90 FD | 	jmp	#LR__1000
0c7fc                 | LR__0999
0c7fc     48 4E 05 F1 | 	add	fp, #72
0c800     A7 12 02 FB | 	rdlong	arg01, fp
0c804     48 4E 85 F1 | 	sub	fp, #72
0c808     01 14 06 F6 | 	mov	arg02, #1
0c80c     74 26 B1 FD | 	call	#__system___float_tointeger
0c810     28 4E 05 F1 | 	add	fp, #40
0c814     A7 FA 61 FC | 	wrlong	result1, fp
0c818     1C 4E 85 F1 | 	sub	fp, #28
0c81c     A7 20 02 FB | 	rdlong	local02, fp
0c820     10 23 02 F6 | 	mov	local03, local02
0c824     01 22 66 F0 | 	shl	local03, #1
0c828     10 23 02 F1 | 	add	local03, local02
0c82c     03 22 66 F0 | 	shl	local03, #3
0c830     34 00 00 FF 
0c834     2C E5 05 F1 | 	add	objptr, ##26924
0c838     F2 22 02 F1 | 	add	local03, objptr
0c83c     0C 4E 85 F1 | 	sub	fp, #12
0c840     06 22 06 F1 | 	add	local03, #6
0c844     11 FB 51 FC | 	wrword	result1, local03
0c848     34 00 00 FF 
0c84c     2C E5 85 F1 | 	sub	objptr, ##26924
0c850                 | LR__1000
0c850                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0c850     4C 4E 05 F1 | 	add	fp, #76
0c854     A7 12 02 FB | 	rdlong	arg01, fp
0c858     4C 4E 85 F1 | 	sub	fp, #76
0c85c     00 C0 5F FF 
0c860     00 14 06 F6 | 	mov	arg02, ##-1082130432
0c864     01 16 06 F6 | 	mov	arg03, #1
0c868     84 25 B1 FD | 	call	#__system___float_cmp
0c86c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c870     24 00 90 CD |  if_b	jmp	#LR__1001
0c874     4C 4E 05 F1 | 	add	fp, #76
0c878     A7 12 02 FB | 	rdlong	arg01, fp
0c87c     4C 4E 85 F1 | 	sub	fp, #76
0c880     00 C0 1F FF 
0c884     00 14 06 F6 | 	mov	arg02, ##1065353216
0c888     01 16 66 F6 | 	neg	arg03, #1
0c88c     60 25 B1 FD | 	call	#__system___float_cmp
0c890     01 FA 55 F2 | 	cmps	result1, #1 wc
0c894     44 00 90 CD |  if_b	jmp	#LR__1002
0c898                 | LR__1001
0c898     0C 4E 05 F1 | 	add	fp, #12
0c89c     A7 20 02 FB | 	rdlong	local02, fp
0c8a0     10 23 02 F6 | 	mov	local03, local02
0c8a4     01 22 66 F0 | 	shl	local03, #1
0c8a8     10 23 02 F1 | 	add	local03, local02
0c8ac     03 22 66 F0 | 	shl	local03, #3
0c8b0     34 00 00 FF 
0c8b4     2C E5 05 F1 | 	add	objptr, ##26924
0c8b8     F2 22 02 F1 | 	add	local03, objptr
0c8bc     10 22 06 F1 | 	add	local03, #16
0c8c0     11 27 02 FB | 	rdlong	local05, local03
0c8c4     5C 4E 05 F1 | 	add	fp, #92
0c8c8     A7 26 62 FC | 	wrlong	local05, fp
0c8cc     68 4E 85 F1 | 	sub	fp, #104
0c8d0     34 00 00 FF 
0c8d4     2C E5 85 F1 | 	sub	objptr, ##26924
0c8d8     48 00 90 FD | 	jmp	#LR__1003
0c8dc                 | LR__1002
0c8dc     4C 4E 05 F1 | 	add	fp, #76
0c8e0     A7 26 02 FB | 	rdlong	local05, fp
0c8e4     1C 4E 05 F1 | 	add	fp, #28
0c8e8     A7 26 62 FC | 	wrlong	local05, fp
0c8ec     5C 4E 85 F1 | 	sub	fp, #92
0c8f0     A7 20 02 FB | 	rdlong	local02, fp
0c8f4     10 23 02 F6 | 	mov	local03, local02
0c8f8     01 22 66 F0 | 	shl	local03, #1
0c8fc     10 23 02 F1 | 	add	local03, local02
0c900     03 22 66 F0 | 	shl	local03, #3
0c904     34 00 00 FF 
0c908     2C E5 05 F1 | 	add	objptr, ##26924
0c90c     F2 22 02 F1 | 	add	local03, objptr
0c910     0C 4E 85 F1 | 	sub	fp, #12
0c914     10 22 06 F1 | 	add	local03, #16
0c918     11 27 62 FC | 	wrlong	local05, local03
0c91c     34 00 00 FF 
0c920     2C E5 85 F1 | 	sub	objptr, ##26924
0c924                 | LR__1003
0c924                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0c924     50 4E 05 F1 | 	add	fp, #80
0c928     A7 12 02 FB | 	rdlong	arg01, fp
0c92c     50 4E 85 F1 | 	sub	fp, #80
0c930     00 14 06 F6 | 	mov	arg02, #0
0c934     01 16 06 F6 | 	mov	arg03, #1
0c938     B4 24 B1 FD | 	call	#__system___float_cmp
0c93c     00 FA 55 F2 | 	cmps	result1, #0 wc
0c940     24 00 90 CD |  if_b	jmp	#LR__1004
0c944     50 4E 05 F1 | 	add	fp, #80
0c948     A7 12 02 FB | 	rdlong	arg01, fp
0c94c     50 4E 85 F1 | 	sub	fp, #80
0c950     80 BF 21 FF 
0c954     00 14 06 F6 | 	mov	arg02, ##1132396544
0c958     01 16 66 F6 | 	neg	arg03, #1
0c95c     90 24 B1 FD | 	call	#__system___float_cmp
0c960     01 FA 55 F2 | 	cmps	result1, #1 wc
0c964     44 00 90 CD |  if_b	jmp	#LR__1005
0c968                 | LR__1004
0c968     0C 4E 05 F1 | 	add	fp, #12
0c96c     A7 22 02 FB | 	rdlong	local03, fp
0c970     11 27 02 F6 | 	mov	local05, local03
0c974     01 26 66 F0 | 	shl	local05, #1
0c978     11 27 02 F1 | 	add	local05, local03
0c97c     03 26 66 F0 | 	shl	local05, #3
0c980     34 00 00 FF 
0c984     2C E5 05 F1 | 	add	objptr, ##26924
0c988     F2 26 02 F1 | 	add	local05, objptr
0c98c     14 26 06 F1 | 	add	local05, #20
0c990     13 25 E2 FA | 	rdword	local04, local05
0c994     20 4E 05 F1 | 	add	fp, #32
0c998     A7 24 62 FC | 	wrlong	local04, fp
0c99c     2C 4E 85 F1 | 	sub	fp, #44
0c9a0     34 00 00 FF 
0c9a4     2C E5 85 F1 | 	sub	objptr, ##26924
0c9a8     54 00 90 FD | 	jmp	#LR__1006
0c9ac                 | LR__1005
0c9ac     50 4E 05 F1 | 	add	fp, #80
0c9b0     A7 12 02 FB | 	rdlong	arg01, fp
0c9b4     50 4E 85 F1 | 	sub	fp, #80
0c9b8     01 14 06 F6 | 	mov	arg02, #1
0c9bc     C4 24 B1 FD | 	call	#__system___float_tointeger
0c9c0     2C 4E 05 F1 | 	add	fp, #44
0c9c4     A7 FA 61 FC | 	wrlong	result1, fp
0c9c8     20 4E 85 F1 | 	sub	fp, #32
0c9cc     A7 20 02 FB | 	rdlong	local02, fp
0c9d0     10 23 02 F6 | 	mov	local03, local02
0c9d4     01 22 66 F0 | 	shl	local03, #1
0c9d8     10 23 02 F1 | 	add	local03, local02
0c9dc     03 22 66 F0 | 	shl	local03, #3
0c9e0     34 00 00 FF 
0c9e4     2C E5 05 F1 | 	add	objptr, ##26924
0c9e8     F2 22 02 F1 | 	add	local03, objptr
0c9ec     0C 4E 85 F1 | 	sub	fp, #12
0c9f0     14 22 06 F1 | 	add	local03, #20
0c9f4     11 FB 51 FC | 	wrword	result1, local03
0c9f8     34 00 00 FF 
0c9fc     2C E5 85 F1 | 	sub	objptr, ##26924
0ca00                 | LR__1006
0ca00     60 4E 05 F1 | 	add	fp, #96
0ca04     A7 12 02 FB | 	rdlong	arg01, fp
0ca08     10 4E 05 F1 | 	add	fp, #16
0ca0c     A7 14 02 FB | 	rdlong	arg02, fp
0ca10     70 4E 85 F1 | 	sub	fp, #112
0ca14     A8 21 B1 FD | 	call	#__system___float_div
0ca18     FD 12 02 F6 | 	mov	arg01, result1
0ca1c     01 14 06 F6 | 	mov	arg02, #1
0ca20     60 24 B1 FD | 	call	#__system___float_tointeger
0ca24     FD 24 02 F6 | 	mov	local04, result1
0ca28     14 4E 05 F1 | 	add	fp, #20
0ca2c     A7 24 62 FC | 	wrlong	local04, fp
0ca30     54 4E 05 F1 | 	add	fp, #84
0ca34     A7 14 02 FB | 	rdlong	arg02, fp
0ca38     68 4E 85 F1 | 	sub	fp, #104
0ca3c     00 00 23 FF 
0ca40     00 12 06 F6 | 	mov	arg01, ##1174405120
0ca44     74 1F B1 FD | 	call	#__system___float_mul
0ca48     FD 12 02 F6 | 	mov	arg01, result1
0ca4c     01 14 06 F6 | 	mov	arg02, #1
0ca50     30 24 B1 FD | 	call	#__system___float_tointeger
0ca54     0D 24 C6 F9 | 	decod	local04, #13
0ca58     FD 24 02 F1 | 	add	local04, result1
0ca5c     18 4E 05 F1 | 	add	fp, #24
0ca60     A7 24 62 FC | 	wrlong	local04, fp
0ca64     54 4E 05 F1 | 	add	fp, #84
0ca68     A7 14 02 FB | 	rdlong	arg02, fp
0ca6c     6C 4E 85 F1 | 	sub	fp, #108
0ca70     00 3D 22 FF 
0ca74     00 12 06 F6 | 	mov	arg01, ##1148846080
0ca78     40 1F B1 FD | 	call	#__system___float_mul
0ca7c     FD 12 02 F6 | 	mov	arg01, result1
0ca80     01 14 06 F6 | 	mov	arg02, #1
0ca84     FC 23 B1 FD | 	call	#__system___float_tointeger
0ca88     1C 4E 05 F1 | 	add	fp, #28
0ca8c     A7 FA 61 FC | 	wrlong	result1, fp
0ca90     56 00 00 FF 
0ca94     F4 E5 05 F1 | 	add	objptr, ##44532
0ca98     F2 24 02 FB | 	rdlong	local04, objptr
0ca9c     56 00 00 FF 
0caa0     F4 E5 85 F1 | 	sub	objptr, ##44532
0caa4     10 4E 85 F1 | 	sub	fp, #16
0caa8     A7 20 02 FB | 	rdlong	local02, fp
0caac     06 20 66 F0 | 	shl	local02, #6
0cab0     10 25 02 F1 | 	add	local04, local02
0cab4     04 4E 85 F1 | 	sub	fp, #4
0cab8     A7 24 62 FC | 	wrlong	local04, fp
0cabc     5C 4E 05 F1 | 	add	fp, #92
0cac0     A7 12 02 FB | 	rdlong	arg01, fp
0cac4     64 4E 85 F1 | 	sub	fp, #100
0cac8     72 3F 20 FF 
0cacc     EA 14 06 F6 | 	mov	arg02, ##1082057962
0cad0     E8 1E B1 FD | 	call	#__system___float_mul
0cad4     FD 12 02 F6 | 	mov	arg01, result1
0cad8     01 14 06 F6 | 	mov	arg02, #1
0cadc     A4 23 B1 FD | 	call	#__system___float_tointeger
0cae0     10 4E 05 F1 | 	add	fp, #16
0cae4     A7 FA 61 FC | 	wrlong	result1, fp
0cae8                 | ' 
0cae8                 | ' speed=round(speed_coeff/slen)
0cae8                 | ' ipan=8192+round(8192*pan)
0cae8                 | ' ivol=round(1000.0*vol)
0cae8                 | ' base2=base+64*channel
0cae8                 | ' skip=round(freq*3.9827219) 
0cae8                 | ' if wave <8 then 
0cae8     10 4E 05 F1 | 	add	fp, #16
0caec     A7 24 02 FB | 	rdlong	local04, fp
0caf0     20 4E 85 F1 | 	sub	fp, #32
0caf4     08 24 56 F2 | 	cmps	local04, #8 wc
0caf8     40 00 90 3D |  if_ae	jmp	#LR__1007
0cafc     08 4E 05 F1 | 	add	fp, #8
0cb00     A7 12 02 FB | 	rdlong	arg01, fp
0cb04     08 12 06 F1 | 	add	arg01, #8
0cb08     18 4E 05 F1 | 	add	fp, #24
0cb0c     A7 14 02 FB | 	rdlong	arg02, fp
0cb10     20 4E 85 F1 | 	sub	fp, #32
0cb14     0B 14 66 F0 | 	shl	arg02, #11
0cb18     0C 00 00 FF 
0cb1c     CC E4 05 F1 | 	add	objptr, ##6348
0cb20     F2 14 02 F1 | 	add	arg02, objptr
0cb24     0C 00 00 FF 
0cb28     CC E4 85 F1 | 	sub	objptr, ##6348
0cb2c     00 00 60 FF 
0cb30     00 14 06 F1 | 	add	arg02, ##-1073741824
0cb34     09 15 62 FC | 	wrlong	arg02, arg01
0cb38     18 00 90 FD | 	jmp	#LR__1008
0cb3c                 | LR__1007
0cb3c     08 4E 05 F1 | 	add	fp, #8
0cb40     A7 12 02 FB | 	rdlong	arg01, fp
0cb44     08 4E 85 F1 | 	sub	fp, #8
0cb48     08 12 06 F1 | 	add	arg01, #8
0cb4c     00 00 E4 FF 
0cb50     09 01 68 FC | 	wrlong	##-939524096, arg01
0cb54                 | LR__1008
0cb54     08 4E 05 F1 | 	add	fp, #8
0cb58     A7 12 02 FB | 	rdlong	arg01, fp
0cb5c     10 12 06 F1 | 	add	arg01, #16
0cb60     04 00 80 FF 
0cb64     09 01 68 FC | 	wrlong	##2048, arg01
0cb68     A7 12 02 FB | 	rdlong	arg01, fp
0cb6c     0C 12 06 F1 | 	add	arg01, #12
0cb70     09 01 68 FC | 	wrlong	#0, arg01
0cb74     A7 12 02 FB | 	rdlong	arg01, fp
0cb78     14 12 06 F1 | 	add	arg01, #20
0cb7c     14 4E 05 F1 | 	add	fp, #20
0cb80     A7 14 02 FB | 	rdlong	arg02, fp
0cb84     09 15 52 FC | 	wrword	arg02, arg01
0cb88     14 4E 85 F1 | 	sub	fp, #20
0cb8c     A7 12 02 FB | 	rdlong	arg01, fp
0cb90     16 12 06 F1 | 	add	arg01, #22
0cb94     10 4E 05 F1 | 	add	fp, #16
0cb98     A7 14 02 FB | 	rdlong	arg02, fp
0cb9c     09 15 52 FC | 	wrword	arg02, arg01
0cba0                 | '   
0cba0                 | ' lpoke base2+16,2048
0cba0                 | ' lpoke base2+12,0
0cba0                 | ' dpoke base2+20,ivol 
0cba0                 | ' dpoke base2+22,ipan 
0cba0                 | ' if wave<8 then
0cba0     08 4E 05 F1 | 	add	fp, #8
0cba4     A7 24 02 FB | 	rdlong	local04, fp
0cba8     20 4E 85 F1 | 	sub	fp, #32
0cbac     08 24 56 F2 | 	cmps	local04, #8 wc
0cbb0     2C 00 90 3D |  if_ae	jmp	#LR__1009
0cbb4     08 4E 05 F1 | 	add	fp, #8
0cbb8     A7 12 02 FB | 	rdlong	arg01, fp
0cbbc     18 12 06 F1 | 	add	arg01, #24
0cbc0     09 29 58 FC | 	wrword	#20, arg01
0cbc4     A7 12 02 FB | 	rdlong	arg01, fp
0cbc8     1A 12 06 F1 | 	add	arg01, #26
0cbcc     08 4E 05 F1 | 	add	fp, #8
0cbd0     A7 14 02 FB | 	rdlong	arg02, fp
0cbd4     10 4E 85 F1 | 	sub	fp, #16
0cbd8     09 15 52 FC | 	wrword	arg02, arg01
0cbdc     A4 00 90 FD | 	jmp	#LR__1010
0cbe0                 | LR__1009
0cbe0     08 4E 05 F1 | 	add	fp, #8
0cbe4     A7 24 02 FB | 	rdlong	local04, fp
0cbe8     18 24 06 F1 | 	add	local04, #24
0cbec     5C 4E 05 F1 | 	add	fp, #92
0cbf0     A7 14 02 FB | 	rdlong	arg02, fp
0cbf4     64 4E 85 F1 | 	sub	fp, #100
0cbf8     58 D0 24 FF 
0cbfc     B0 13 06 F6 | 	mov	arg01, ##1235268016
0cc00     BC 1F B1 FD | 	call	#__system___float_div
0cc04     FD 12 02 F6 | 	mov	arg01, result1
0cc08     01 14 06 F6 | 	mov	arg02, #1
0cc0c     74 22 B1 FD | 	call	#__system___float_tointeger
0cc10     12 FB 51 FC | 	wrword	result1, local04
0cc14                 | '   dpoke base2+24,round(1316406/freq)  : print 1316406/freq
0cc14     00 12 06 F6 | 	mov	arg01, #0
0cc18     B4 4B B1 FD | 	call	#__system___getiolock_0472
0cc1c     FD 12 02 F6 | 	mov	arg01, result1
0cc20     1C F2 B0 FD | 	call	#__system___lockmem
0cc24     00 20 06 F6 | 	mov	local02, #0
0cc28     64 4E 05 F1 | 	add	fp, #100
0cc2c     A7 14 02 FB | 	rdlong	arg02, fp
0cc30     64 4E 85 F1 | 	sub	fp, #100
0cc34     58 D0 24 FF 
0cc38     B0 13 06 F6 | 	mov	arg01, ##1235268016
0cc3c     80 1F B1 FD | 	call	#__system___float_div
0cc40     FD 14 02 F6 | 	mov	arg02, result1
0cc44     10 13 02 F6 | 	mov	arg01, local02
0cc48     00 16 06 F6 | 	mov	arg03, #0
0cc4c     23 18 06 F6 | 	mov	arg04, #35
0cc50     80 23 B1 FD | 	call	#__system___basic_print_float
0cc54     00 12 06 F6 | 	mov	arg01, #0
0cc58     0A 14 06 F6 | 	mov	arg02, #10
0cc5c     00 16 06 F6 | 	mov	arg03, #0
0cc60     88 FE B0 FD | 	call	#__system___basic_print_char
0cc64     00 12 06 F6 | 	mov	arg01, #0
0cc68     64 4B B1 FD | 	call	#__system___getiolock_0472
0cc6c     FD 00 68 FC | 	wrlong	#0, result1
0cc70     08 4E 05 F1 | 	add	fp, #8
0cc74     A7 12 02 FB | 	rdlong	arg01, fp
0cc78     08 4E 85 F1 | 	sub	fp, #8
0cc7c     1A 12 06 F1 | 	add	arg01, #26
0cc80     09 01 5A FC | 	wrword	#256, arg01
0cc84                 | LR__1010
0cc84     08 4E 05 F1 | 	add	fp, #8
0cc88     A7 12 02 FB | 	rdlong	arg01, fp
0cc8c     20 12 06 F1 | 	add	arg01, #32
0cc90     09 01 68 FC | 	wrlong	#0, arg01
0cc94                 | ' 'dpoke base2+28,$4000_0000
0cc94                 | ' lpoke base2+32,0 
0cc94                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0cc94     1C 4E 05 F1 | 	add	fp, #28
0cc98     A7 24 02 FB | 	rdlong	local04, fp
0cc9c     24 4E 85 F1 | 	sub	fp, #36
0cca0     08 24 0E F2 | 	cmp	local04, #8 wz
0cca4     18 00 90 5D |  if_ne	jmp	#LR__1011
0cca8     08 4E 05 F1 | 	add	fp, #8
0ccac     A7 12 02 FB | 	rdlong	arg01, fp
0ccb0     08 4E 85 F1 | 	sub	fp, #8
0ccb4     24 12 06 F1 | 	add	arg01, #36
0ccb8     09 01 68 FC | 	wrlong	#0, arg01
0ccbc     34 00 90 FD | 	jmp	#LR__1012
0ccc0                 | LR__1011
0ccc0     08 4E 05 F1 | 	add	fp, #8
0ccc4     A7 12 02 FB | 	rdlong	arg01, fp
0ccc8     24 12 06 F1 | 	add	arg01, #36
0cccc     1C 4E 05 F1 | 	add	fp, #28
0ccd0     A7 14 02 FB | 	rdlong	arg02, fp
0ccd4     24 4E 85 F1 | 	sub	fp, #36
0ccd8     09 14 66 F0 | 	shl	arg02, #9
0ccdc     2C 00 00 FF 
0cce0     CC E4 05 F1 | 	add	objptr, ##22732
0cce4     F2 14 02 F1 | 	add	arg02, objptr
0cce8     2C 00 00 FF 
0ccec     CC E4 85 F1 | 	sub	objptr, ##22732
0ccf0     09 15 62 FC | 	wrlong	arg02, arg01
0ccf4                 | LR__1012
0ccf4     08 4E 05 F1 | 	add	fp, #8
0ccf8     A7 12 02 FB | 	rdlong	arg01, fp
0ccfc     28 12 06 F1 | 	add	arg01, #40
0cd00     0C 4E 05 F1 | 	add	fp, #12
0cd04     A7 14 02 FB | 	rdlong	arg02, fp
0cd08     09 15 62 FC | 	wrlong	arg02, arg01
0cd0c     0C 4E 85 F1 | 	sub	fp, #12
0cd10     A7 12 02 FB | 	rdlong	arg01, fp
0cd14     2C 12 06 F1 | 	add	arg01, #44
0cd18     24 4E 05 F1 | 	add	fp, #36
0cd1c     A7 14 02 FB | 	rdlong	arg02, fp
0cd20     09 15 62 FC | 	wrlong	arg02, arg01
0cd24                 | ' lpoke base2+40,speed' speed
0cd24                 | ' lpoke base2+44,sus 'len
0cd24                 | ' 
0cd24                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0cd24     04 4E 85 F1 | 	sub	fp, #4
0cd28     A7 24 02 FB | 	rdlong	local04, fp
0cd2c     28 4E 85 F1 | 	sub	fp, #40
0cd30     01 24 56 F2 | 	cmps	local04, #1 wc
0cd34     28 4E 05 31 |  if_ae	add	fp, #40
0cd38     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0cd3c     28 4E 85 31 |  if_ae	sub	fp, #40
0cd40     F0 F3 B0 3D |  if_ae	call	#__system___waitms
0cd44     A7 F0 03 F6 | 	mov	ptra, fp
0cd48     B2 00 A0 FD | 	call	#popregs_
0cd4c                 | _do_play_ret
0cd4c     2D 00 64 FD | 	ret
0cd50                 | 
0cd50                 | ' 
0cd50                 | ' sub do_release
0cd50                 | _do_release
0cd50     00 4A 05 F6 | 	mov	COUNT_, #0
0cd54     A8 00 A0 FD | 	call	#pushregs_
0cd58     10 F0 07 F1 | 	add	ptra, #16
0cd5c     28 D3 BF FD | 	call	#_pop
0cd60     FF 14 02 F6 | 	mov	arg02, result3
0cd64     A7 FA 61 FC | 	wrlong	result1, fp
0cd68     04 4E 05 F1 | 	add	fp, #4
0cd6c     A7 FC 61 FC | 	wrlong	result2, fp
0cd70     04 4E 05 F1 | 	add	fp, #4
0cd74     A7 14 62 FC | 	wrlong	arg02, fp
0cd78     08 4E 85 F1 | 	sub	fp, #8
0cd7c     A7 12 02 F6 | 	mov	arg01, fp
0cd80     58 59 B0 FD | 	call	#_converttoint
0cd84     0C 4E 05 F1 | 	add	fp, #12
0cd88     A7 FA 61 FC | 	wrlong	result1, fp
0cd8c                 | ' t1=pop()
0cd8c                 | ' channel=converttoint(t1)
0cd8c                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0cd8c     0C 4E 85 F1 | 	sub	fp, #12
0cd90     00 FA 55 F2 | 	cmps	result1, #0 wc
0cd94     44 00 90 CD |  if_b	jmp	#LR__1020
0cd98     0C 4E 05 F1 | 	add	fp, #12
0cd9c     A7 14 02 FB | 	rdlong	arg02, fp
0cda0     0C 4E 85 F1 | 	sub	fp, #12
0cda4     08 14 56 F2 | 	cmps	arg02, #8 wc
0cda8     30 00 90 3D |  if_ae	jmp	#LR__1020
0cdac     56 00 00 FF 
0cdb0     F4 E5 05 F1 | 	add	objptr, ##44532
0cdb4     F2 12 02 FB | 	rdlong	arg01, objptr
0cdb8     56 00 00 FF 
0cdbc     F4 E5 85 F1 | 	sub	objptr, ##44532
0cdc0     0C 4E 05 F1 | 	add	fp, #12
0cdc4     A7 14 02 FB | 	rdlong	arg02, fp
0cdc8     0C 4E 85 F1 | 	sub	fp, #12
0cdcc     06 14 66 F0 | 	shl	arg02, #6
0cdd0     0A 13 02 F1 | 	add	arg01, arg02
0cdd4     2C 12 06 F1 | 	add	arg01, #44
0cdd8     09 FF 69 FC | 	wrlong	#255, arg01
0cddc                 | LR__1020
0cddc     A7 F0 03 F6 | 	mov	ptra, fp
0cde0     B2 00 A0 FD | 	call	#popregs_
0cde4                 | _do_release_ret
0cde4     2D 00 64 FD | 	ret
0cde8                 | 
0cde8                 | ' 
0cde8                 | ' 
0cde8                 | ' sub do_defsnd
0cde8                 | _do_defsnd
0cde8     05 4A 05 F6 | 	mov	COUNT_, #5
0cdec     A8 00 A0 FD | 	call	#pushregs_
0cdf0     88 F0 07 F1 | 	add	ptra, #136
0cdf4     6A 00 00 FF 
0cdf8     64 E4 05 F1 | 	add	objptr, ##54372
0cdfc     F2 1A 02 FB | 	rdlong	arg05, objptr
0ce00     0D 19 02 F6 | 	mov	arg04, arg05
0ce04     01 18 66 F0 | 	shl	arg04, #1
0ce08     0D 19 02 F1 | 	add	arg04, arg05
0ce0c     02 18 66 F0 | 	shl	arg04, #2
0ce10     03 00 00 FF 
0ce14     04 E4 85 F1 | 	sub	objptr, ##1540
0ce18     F2 18 02 F1 | 	add	arg04, objptr
0ce1c     0C 1B 02 FB | 	rdlong	arg05, arg04
0ce20     A7 1A 62 FC | 	wrlong	arg05, fp
0ce24                 | ' 
0ce24                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce24                 | ' 
0ce24                 | ' 
0ce24                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ce24                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ce24                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ce24                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ce24                 | ' 
0ce24                 | ' if numpar<2 then return
0ce24     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ce28     67 00 00 FF 
0ce2c     60 E4 85 F1 | 	sub	objptr, ##52832
0ce30     A0 09 90 CD |  if_b	jmp	#LR__1058
0ce34                 | ' 
0ce34                 | '   
0ce34                 | ' if numpar=2 then
0ce34     A7 1A 02 FB | 	rdlong	arg05, fp
0ce38     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ce3c     0C 04 90 5D |  if_ne	jmp	#LR__1041
0ce40     44 D2 BF FD | 	call	#_pop
0ce44     FF 1A 02 F6 | 	mov	arg05, result3
0ce48     2C 4E 05 F1 | 	add	fp, #44
0ce4c     A7 FA 61 FC | 	wrlong	result1, fp
0ce50     04 4E 05 F1 | 	add	fp, #4
0ce54     A7 FC 61 FC | 	wrlong	result2, fp
0ce58     04 4E 05 F1 | 	add	fp, #4
0ce5c     A7 1A 62 FC | 	wrlong	arg05, fp
0ce60                 | '   t1=pop()
0ce60                 | '   if t1.result_type=result_string2 then 
0ce60     34 4E 85 F1 | 	sub	fp, #52
0ce64     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ce68     20 00 90 5D |  if_ne	jmp	#LR__1030
0ce6c     2C 4E 05 F1 | 	add	fp, #44
0ce70     A7 12 02 FB | 	rdlong	arg01, fp
0ce74     2C 4E 85 F1 | 	sub	fp, #44
0ce78     88 11 B0 FD | 	call	#_convertstring
0ce7c     38 4E 05 F1 | 	add	fp, #56
0ce80     A7 FA 61 FC | 	wrlong	result1, fp
0ce84     38 4E 85 F1 | 	sub	fp, #56
0ce88     58 00 90 FD | 	jmp	#LR__1033
0ce8c                 | LR__1030
0ce8c     34 4E 05 F1 | 	add	fp, #52
0ce90     A7 1A 02 FB | 	rdlong	arg05, fp
0ce94     34 4E 85 F1 | 	sub	fp, #52
0ce98     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0ce9c     18 00 90 5D |  if_ne	jmp	#LR__1031
0cea0     2C 4E 05 F1 | 	add	fp, #44
0cea4     A7 1A 02 FB | 	rdlong	arg05, fp
0cea8     0C 4E 05 F1 | 	add	fp, #12
0ceac     A7 1A 62 FC | 	wrlong	arg05, fp
0ceb0     38 4E 85 F1 | 	sub	fp, #56
0ceb4     2C 00 90 FD | 	jmp	#LR__1032
0ceb8                 | LR__1031
0ceb8     5D 01 00 FF 
0cebc     14 1A 06 F6 | 	mov	arg05, ##@LR__4886
0cec0     38 4E 05 F1 | 	add	fp, #56
0cec4     A7 1A 62 FC | 	wrlong	arg05, fp
0cec8     0C 4E 85 F1 | 	sub	fp, #12
0cecc     A7 12 02 F6 | 	mov	arg01, fp
0ced0     2C 4E 85 F1 | 	sub	fp, #44
0ced4     04 58 B0 FD | 	call	#_converttoint
0ced8     14 4E 05 F1 | 	add	fp, #20
0cedc     A7 FA 61 FC | 	wrlong	result1, fp
0cee0     14 4E 85 F1 | 	sub	fp, #20
0cee4                 | LR__1032
0cee4                 | LR__1033
0cee4                 | ' 
0cee4                 | '     
0cee4                 | '   if s<>"" then 
0cee4     38 4E 05 F1 | 	add	fp, #56
0cee8     A7 12 02 FB | 	rdlong	arg01, fp
0ceec     38 4E 85 F1 | 	sub	fp, #56
0cef0     5D 01 00 FF 
0cef4     15 14 06 F6 | 	mov	arg02, ##@LR__4887
0cef8     6C EF B0 FD | 	call	#__system___string_cmp
0cefc     00 FA 0D F2 | 	cmp	result1, #0 wz
0cf00     88 01 90 AD |  if_e	jmp	#LR__1035
0cf04     80 D1 BF FD | 	call	#_pop
0cf08     FF 1A 02 F6 | 	mov	arg05, result3
0cf0c     2C 4E 05 F1 | 	add	fp, #44
0cf10     A7 FA 61 FC | 	wrlong	result1, fp
0cf14     04 4E 05 F1 | 	add	fp, #4
0cf18     A7 FC 61 FC | 	wrlong	result2, fp
0cf1c     04 4E 05 F1 | 	add	fp, #4
0cf20     A7 1A 62 FC | 	wrlong	arg05, fp
0cf24     08 4E 85 F1 | 	sub	fp, #8
0cf28     A7 12 02 F6 | 	mov	arg01, fp
0cf2c     2C 4E 85 F1 | 	sub	fp, #44
0cf30     A8 57 B0 FD | 	call	#_converttoint
0cf34     10 4E 05 F1 | 	add	fp, #16
0cf38     A7 FA 61 FC | 	wrlong	result1, fp
0cf3c     10 4E 85 F1 | 	sub	fp, #16
0cf40                 | '     t1=pop()
0cf40                 | '     channel=converttoint(t1) 
0cf40                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0cf40     09 12 06 F6 | 	mov	arg01, #9
0cf44     B8 3E B1 FD | 	call	#__system__close
0cf48     09 1E 06 F6 | 	mov	local01, #9
0cf4c     5D 01 00 FF 
0cf50     16 12 06 F6 | 	mov	arg01, ##@LR__4888
0cf54     38 4E 05 F1 | 	add	fp, #56
0cf58     A7 14 02 FB | 	rdlong	arg02, fp
0cf5c     38 4E 85 F1 | 	sub	fp, #56
0cf60     38 EF B0 FD | 	call	#__system___string_concat
0cf64     FD 14 02 F6 | 	mov	arg02, result1
0cf68     0F 13 02 F6 | 	mov	arg01, local01
0cf6c     00 16 06 F6 | 	mov	arg03, #0
0cf70     CC FA B0 FD | 	call	#__system___basic_open_string
0cf74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cf78     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0cf7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cf80     7B 00 00 FF 
0cf84     F4 E4 05 F1 | 	add	objptr, ##63220
0cf88     F2 FA 61 FC | 	wrlong	result1, objptr
0cf8c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0cf8c     7B 00 00 FF 
0cf90     F4 E4 85 F1 | 	sub	objptr, ##63220
0cf94     B0 00 90 AD |  if_e	jmp	#LR__1034
0cf98     00 12 06 F6 | 	mov	arg01, #0
0cf9c     30 48 B1 FD | 	call	#__system___getiolock_0472
0cfa0     FD 12 02 F6 | 	mov	arg01, result1
0cfa4     98 EE B0 FD | 	call	#__system___lockmem
0cfa8     5D 01 00 FF 
0cfac     23 14 06 F6 | 	mov	arg02, ##@LR__4889
0cfb0     00 12 06 F6 | 	mov	arg01, #0
0cfb4     00 16 06 F6 | 	mov	arg03, #0
0cfb8     88 FB B0 FD | 	call	#__system___basic_print_string
0cfbc     7B 00 00 FF 
0cfc0     F4 E4 05 F1 | 	add	objptr, ##63220
0cfc4     F2 14 02 FB | 	rdlong	arg02, objptr
0cfc8     7B 00 00 FF 
0cfcc     F4 E4 85 F1 | 	sub	objptr, ##63220
0cfd0     00 12 06 F6 | 	mov	arg01, #0
0cfd4     00 16 06 F6 | 	mov	arg03, #0
0cfd8     0A 18 06 F6 | 	mov	arg04, #10
0cfdc     A8 FB B0 FD | 	call	#__system___basic_print_integer
0cfe0     5D 01 00 FF 
0cfe4     31 14 06 F6 | 	mov	arg02, ##@LR__4890
0cfe8     00 12 06 F6 | 	mov	arg01, #0
0cfec     00 16 06 F6 | 	mov	arg03, #0
0cff0     50 FB B0 FD | 	call	#__system___basic_print_string
0cff4     00 1E 06 F6 | 	mov	local01, #0
0cff8     7B 00 00 FF 
0cffc     F4 E4 05 F1 | 	add	objptr, ##63220
0d000     F2 12 02 FB | 	rdlong	arg01, objptr
0d004     7B 00 00 FF 
0d008     F4 E4 85 F1 | 	sub	objptr, ##63220
0d00c     C0 14 B1 FD | 	call	#__system___strerror
0d010     FD 14 02 F6 | 	mov	arg02, result1
0d014     0F 13 02 F6 | 	mov	arg01, local01
0d018     00 16 06 F6 | 	mov	arg03, #0
0d01c     24 FB B0 FD | 	call	#__system___basic_print_string
0d020     00 12 06 F6 | 	mov	arg01, #0
0d024     0A 14 06 F6 | 	mov	arg02, #10
0d028     00 16 06 F6 | 	mov	arg03, #0
0d02c     BC FA B0 FD | 	call	#__system___basic_print_char
0d030     00 12 06 F6 | 	mov	arg01, #0
0d034     98 47 B1 FD | 	call	#__system___getiolock_0472
0d038     FD 00 68 FC | 	wrlong	#0, result1
0d03c     09 12 06 F6 | 	mov	arg01, #9
0d040     BC 3D B1 FD | 	call	#__system__close
0d044     8C 07 90 FD | 	jmp	#LR__1058
0d048                 | LR__1034
0d048                 | '     get #9,17,samplebuf(channel,0),1024
0d048     10 4E 05 F1 | 	add	fp, #16
0d04c     A7 16 02 FB | 	rdlong	arg03, fp
0d050     10 4E 85 F1 | 	sub	fp, #16
0d054     0B 16 66 F0 | 	shl	arg03, #11
0d058     0C 00 00 FF 
0d05c     CC E4 05 F1 | 	add	objptr, ##6348
0d060     F2 16 02 F1 | 	add	arg03, objptr
0d064     09 12 06 F6 | 	mov	arg01, #9
0d068     11 14 06 F6 | 	mov	arg02, #17
0d06c     0A 18 C6 F9 | 	decod	arg04, #10
0d070     02 1A 06 F6 | 	mov	arg05, #2
0d074     0C 00 00 FF 
0d078     CC E4 85 F1 | 	sub	objptr, ##6348
0d07c     D4 FB B0 FD | 	call	#__system___basic_get
0d080                 | '     close #9
0d080     09 12 06 F6 | 	mov	arg01, #9
0d084     78 3D B1 FD | 	call	#__system__close
0d088                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d088                 | '     return
0d088     48 07 90 FD | 	jmp	#LR__1058
0d08c                 | LR__1035
0d08c                 | '     if wptr < ($80000 - 2048) then 
0d08c     14 4E 05 F1 | 	add	fp, #20
0d090     A7 1E 02 FB | 	rdlong	local01, fp
0d094     14 4E 85 F1 | 	sub	fp, #20
0d098     FC 03 00 FF 
0d09c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0d0a0     80 00 90 3D |  if_ae	jmp	#LR__1038
0d0a4                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0d0a4     04 4E 05 F1 | 	add	fp, #4
0d0a8     A7 00 68 FC | 	wrlong	#0, fp
0d0ac     04 4E 85 F1 | 	sub	fp, #4
0d0b0     0C 00 00 FF 
0d0b4     CC E4 05 F1 | 	add	objptr, ##6348
0d0b8     97 2E 48 FB | 	callpa	#(@LR__1037-@LR__1036)>>2,fcache_load_ptr_
0d0bc                 | LR__1036
0d0bc     10 4E 05 F1 | 	add	fp, #16
0d0c0     A7 1E 02 FB | 	rdlong	local01, fp
0d0c4     0B 1E 66 F0 | 	shl	local01, #11
0d0c8     F2 1E 02 F1 | 	add	local01, objptr
0d0cc     0C 4E 85 F1 | 	sub	fp, #12
0d0d0     A7 1A 02 FB | 	rdlong	arg05, fp
0d0d4     0D 19 02 F6 | 	mov	arg04, arg05
0d0d8     01 18 66 F0 | 	shl	arg04, #1
0d0dc     0F 19 02 F1 | 	add	arg04, local01
0d0e0     10 4E 05 F1 | 	add	fp, #16
0d0e4     A7 12 02 FB | 	rdlong	arg01, fp
0d0e8     01 1A 66 F0 | 	shl	arg05, #1
0d0ec     0D 13 02 F1 | 	add	arg01, arg05
0d0f0     09 FB E1 FA | 	rdword	result1, arg01
0d0f4     0C FB 51 FC | 	wrword	result1, arg04
0d0f8     10 4E 85 F1 | 	sub	fp, #16
0d0fc     A7 1E 02 FB | 	rdlong	local01, fp
0d100     01 1E 06 F1 | 	add	local01, #1
0d104     A7 1E 62 FC | 	wrlong	local01, fp
0d108     04 4E 85 F1 | 	sub	fp, #4
0d10c     02 00 00 FF 
0d110     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0d114     A4 FF 9F CD |  if_b	jmp	#LR__1036
0d118                 | LR__1037
0d118     0C 00 00 FF 
0d11c     CC E4 85 F1 | 	sub	objptr, ##6348
0d120     B0 06 90 FD | 	jmp	#LR__1058
0d124                 | LR__1038
0d124                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0d124     04 4E 05 F1 | 	add	fp, #4
0d128     A7 00 68 FC | 	wrlong	#0, fp
0d12c     04 4E 85 F1 | 	sub	fp, #4
0d130                 | LR__1039
0d130     10 4E 05 F1 | 	add	fp, #16
0d134     A7 1A 02 FB | 	rdlong	arg05, fp
0d138     0B 1A 66 F0 | 	shl	arg05, #11
0d13c     0C 00 00 FF 
0d140     CC E4 05 F1 | 	add	objptr, ##6348
0d144     F2 1A 02 F1 | 	add	arg05, objptr
0d148     0C 4E 85 F1 | 	sub	fp, #12
0d14c     A7 18 02 FB | 	rdlong	arg04, fp
0d150     0C 21 02 F6 | 	mov	local02, arg04
0d154     01 20 66 F0 | 	shl	local02, #1
0d158     0D 21 02 F1 | 	add	local02, arg05
0d15c     10 4E 05 F1 | 	add	fp, #16
0d160     A7 12 02 FB | 	rdlong	arg01, fp
0d164     14 4E 85 F1 | 	sub	fp, #20
0d168     01 18 66 F0 | 	shl	arg04, #1
0d16c     0C 13 02 F1 | 	add	arg01, arg04
0d170     0C 00 00 FF 
0d174     CC E4 85 F1 | 	sub	objptr, ##6348
0d178     C8 B8 B0 FD | 	call	#_psdpeek
0d17c     10 FB 51 FC | 	wrword	result1, local02
0d180     04 4E 05 F1 | 	add	fp, #4
0d184     A7 22 02 FB | 	rdlong	local03, fp
0d188     01 22 06 F1 | 	add	local03, #1
0d18c     A7 22 62 FC | 	wrlong	local03, fp
0d190     04 4E 85 F1 | 	sub	fp, #4
0d194     02 00 00 FF 
0d198     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d19c     90 FF 9F CD |  if_b	jmp	#LR__1039
0d1a0                 | '     return 
0d1a0     30 06 90 FD | 	jmp	#LR__1058
0d1a4                 | '   
0d1a4                 | '   par=converttoint(t1)  : print par
0d1a4                 | '   t1=pop()
0d1a4                 | '   channel=converttoint(t1)  
0d1a4                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0d1a4                 | LR__1040
0d1a4     10 4E 05 F1 | 	add	fp, #16
0d1a8     A7 22 02 FB | 	rdlong	local03, fp
0d1ac     0B 22 66 F0 | 	shl	local03, #11
0d1b0     0C 00 00 FF 
0d1b4     CC E4 05 F1 | 	add	objptr, ##6348
0d1b8     F2 22 02 F1 | 	add	local03, objptr
0d1bc     0C 4E 85 F1 | 	sub	fp, #12
0d1c0     A7 12 02 FB | 	rdlong	arg01, fp
0d1c4     09 21 02 F6 | 	mov	local02, arg01
0d1c8     01 20 66 F0 | 	shl	local02, #1
0d1cc     11 21 02 F1 | 	add	local02, local03
0d1d0     04 4E 85 F1 | 	sub	fp, #4
0d1d4     0C 00 00 FF 
0d1d8     CC E4 85 F1 | 	sub	objptr, ##6348
0d1dc     09 13 52 F6 | 	abs	arg01, arg01 wc
0d1e0     1F 24 C6 C9 |  if_b	decod	local04, #31
0d1e4     00 24 06 36 |  if_ae	mov	local04, #0
0d1e8     CC 13 B1 FD | 	call	#__system___float_fromuns
0d1ec     12 FB 61 F5 | 	xor	result1, local04
0d1f0     FD 14 02 F6 | 	mov	arg02, result1
0d1f4     87 E4 1D FF 
0d1f8     DB 13 06 F6 | 	mov	arg01, ##1003032539
0d1fc     BC 17 B1 FD | 	call	#__system___float_mul
0d200     FD 12 02 F6 | 	mov	arg01, result1
0d204     F0 20 B1 FD | 	call	#__system____builtin_sinf
0d208     FD 14 02 F6 | 	mov	arg02, result1
0d20c     58 7F 23 FF 
0d210     00 12 06 F6 | 	mov	arg01, ##1191096320
0d214     A4 17 B1 FD | 	call	#__system___float_mul
0d218     FD 12 02 F6 | 	mov	arg01, result1
0d21c     01 14 06 F6 | 	mov	arg02, #1
0d220     60 1C B1 FD | 	call	#__system___float_tointeger
0d224     10 FB 51 FC | 	wrword	result1, local02
0d228     04 4E 05 F1 | 	add	fp, #4
0d22c     A7 22 02 FB | 	rdlong	local03, fp
0d230     01 22 06 F1 | 	add	local03, #1
0d234     A7 22 62 FC | 	wrlong	local03, fp
0d238     04 4E 85 F1 | 	sub	fp, #4
0d23c     02 00 00 FF 
0d240     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d244     5C FF 9F CD |  if_b	jmp	#LR__1040
0d248                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0d248                 | '   return
0d248     88 05 90 FD | 	jmp	#LR__1058
0d24c                 | LR__1041
0d24c                 | ' for i=0 to 15 : harm(i)=0: next i  
0d24c     04 4E 05 F1 | 	add	fp, #4
0d250     A7 00 68 FC | 	wrlong	#0, fp
0d254     97 16 48 FB | 	callpa	#(@LR__1043-@LR__1042)>>2,fcache_load_ptr_
0d258                 | LR__1042
0d258     A7 22 02 FB | 	rdlong	local03, fp
0d25c     02 22 66 F0 | 	shl	local03, #2
0d260     38 4E 05 F1 | 	add	fp, #56
0d264     A7 22 02 F1 | 	add	local03, fp
0d268     11 01 68 FC | 	wrlong	#0, local03
0d26c     38 4E 85 F1 | 	sub	fp, #56
0d270     A7 22 02 FB | 	rdlong	local03, fp
0d274     01 22 06 F1 | 	add	local03, #1
0d278     A7 22 62 FC | 	wrlong	local03, fp
0d27c     10 22 56 F2 | 	cmps	local03, #16 wc
0d280     D4 FF 9F CD |  if_b	jmp	#LR__1042
0d284                 | LR__1043
0d284     04 4E 85 F1 | 	sub	fp, #4
0d288                 | ' for i=numpar to 2 step -1 
0d288     A7 1E 02 FB | 	rdlong	local01, fp
0d28c     04 4E 05 F1 | 	add	fp, #4
0d290     A7 1E 62 FC | 	wrlong	local01, fp
0d294     04 4E 85 F1 | 	sub	fp, #4
0d298                 | LR__1044
0d298     EC CD BF FD | 	call	#_pop
0d29c     2C 4E 05 F1 | 	add	fp, #44
0d2a0     A7 FA 61 FC | 	wrlong	result1, fp
0d2a4     04 4E 05 F1 | 	add	fp, #4
0d2a8     A7 FC 61 FC | 	wrlong	result2, fp
0d2ac     04 4E 05 F1 | 	add	fp, #4
0d2b0     A7 FE 61 FC | 	wrlong	result3, fp
0d2b4     30 4E 85 F1 | 	sub	fp, #48
0d2b8     A7 22 02 FB | 	rdlong	local03, fp
0d2bc     02 22 86 F1 | 	sub	local03, #2
0d2c0     02 22 66 F0 | 	shl	local03, #2
0d2c4     38 4E 05 F1 | 	add	fp, #56
0d2c8     A7 22 02 F1 | 	add	local03, fp
0d2cc     10 4E 85 F1 | 	sub	fp, #16
0d2d0     A7 12 02 F6 | 	mov	arg01, fp
0d2d4     2C 4E 85 F1 | 	sub	fp, #44
0d2d8     AC 54 B0 FD | 	call	#_converttofloat
0d2dc     11 FB 61 FC | 	wrlong	result1, local03
0d2e0     04 4E 05 F1 | 	add	fp, #4
0d2e4     A7 22 02 FB | 	rdlong	local03, fp
0d2e8     01 22 86 F1 | 	sub	local03, #1
0d2ec     A7 22 62 FC | 	wrlong	local03, fp
0d2f0     04 4E 85 F1 | 	sub	fp, #4
0d2f4     02 22 56 F2 | 	cmps	local03, #2 wc
0d2f8     9C FF 9F 3D |  if_ae	jmp	#LR__1044
0d2fc     88 CD BF FD | 	call	#_pop
0d300     FF 1E 02 F6 | 	mov	local01, result3
0d304     2C 4E 05 F1 | 	add	fp, #44
0d308     A7 FA 61 FC | 	wrlong	result1, fp
0d30c     04 4E 05 F1 | 	add	fp, #4
0d310     A7 FC 61 FC | 	wrlong	result2, fp
0d314     04 4E 05 F1 | 	add	fp, #4
0d318     A7 1E 62 FC | 	wrlong	local01, fp
0d31c     08 4E 85 F1 | 	sub	fp, #8
0d320     A7 12 02 F6 | 	mov	arg01, fp
0d324     2C 4E 85 F1 | 	sub	fp, #44
0d328     B0 53 B0 FD | 	call	#_converttoint
0d32c     FD 1E 02 F6 | 	mov	local01, result1
0d330     10 4E 05 F1 | 	add	fp, #16
0d334     A7 1E 62 FC | 	wrlong	local01, fp
0d338     10 4E 85 F1 | 	sub	fp, #16
0d33c                 | ' t1=pop()
0d33c                 | ' channel=converttoint(t1) : print channel
0d33c     00 12 06 F6 | 	mov	arg01, #0
0d340     8C 44 B1 FD | 	call	#__system___getiolock_0472
0d344     FD 12 02 F6 | 	mov	arg01, result1
0d348     F4 EA B0 FD | 	call	#__system___lockmem
0d34c     10 4E 05 F1 | 	add	fp, #16
0d350     A7 14 02 FB | 	rdlong	arg02, fp
0d354     10 4E 85 F1 | 	sub	fp, #16
0d358     00 12 06 F6 | 	mov	arg01, #0
0d35c     00 16 06 F6 | 	mov	arg03, #0
0d360     0A 18 06 F6 | 	mov	arg04, #10
0d364     20 F8 B0 FD | 	call	#__system___basic_print_integer
0d368     00 12 06 F6 | 	mov	arg01, #0
0d36c     0A 14 06 F6 | 	mov	arg02, #10
0d370     00 16 06 F6 | 	mov	arg03, #0
0d374     74 F7 B0 FD | 	call	#__system___basic_print_char
0d378     00 12 06 F6 | 	mov	arg01, #0
0d37c     50 44 B1 FD | 	call	#__system___getiolock_0472
0d380     FD 00 68 FC | 	wrlong	#0, result1
0d384                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0d384     08 4E 05 F1 | 	add	fp, #8
0d388     02 00 80 FF 
0d38c     A7 00 68 FC | 	wrlong	##1024, fp
0d390     08 4E 85 F1 | 	sub	fp, #8
0d394     0C 00 00 FF 
0d398     CC E4 05 F1 | 	add	objptr, ##6348
0d39c     97 18 48 FB | 	callpa	#(@LR__1047-@LR__1045)>>2,fcache_load_ptr_
0d3a0                 | LR__1045
0d3a0     02 00 00 FF 
0d3a4     00 14 DC FC | 	rep	@LR__1048, ##1024
0d3a8                 | LR__1046
0d3a8     10 4E 05 F1 | 	add	fp, #16
0d3ac     A7 20 02 FB | 	rdlong	local02, fp
0d3b0     0B 20 66 F0 | 	shl	local02, #11
0d3b4     F2 20 02 F1 | 	add	local02, objptr
0d3b8     0C 4E 85 F1 | 	sub	fp, #12
0d3bc     A7 22 02 FB | 	rdlong	local03, fp
0d3c0     04 4E 85 F1 | 	sub	fp, #4
0d3c4     01 22 66 F0 | 	shl	local03, #1
0d3c8     10 23 02 F1 | 	add	local03, local02
0d3cc     11 01 58 FC | 	wrword	#0, local03
0d3d0                 | LR__1047
0d3d0                 | LR__1048
0d3d0     0C 00 00 FF 
0d3d4     CC E4 85 F1 | 	sub	objptr, ##6348
0d3d8     20 4E 05 F1 | 	add	fp, #32
0d3dc     A7 00 68 FC | 	wrlong	#0, fp
0d3e0                 | ' max=0
0d3e0                 | ' if harm(0)<0 then
0d3e0     1C 4E 05 F1 | 	add	fp, #28
0d3e4     A7 12 02 FB | 	rdlong	arg01, fp
0d3e8     3C 4E 85 F1 | 	sub	fp, #60
0d3ec     00 14 06 F6 | 	mov	arg02, #0
0d3f0     01 16 06 F6 | 	mov	arg03, #1
0d3f4     F8 19 B1 FD | 	call	#__system___float_cmp
0d3f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3fc     04 01 90 3D |  if_ae	jmp	#LR__1051
0d400     3C 4E 05 F1 | 	add	fp, #60
0d404     A7 FA 01 FB | 	rdlong	result1, fp
0d408     1F FA 05 F4 | 	bitl	result1, #31
0d40c     24 4E 85 F1 | 	sub	fp, #36
0d410     A7 FA 61 FC | 	wrlong	result1, fp
0d414     28 4E 05 F1 | 	add	fp, #40
0d418     A7 FA 01 FB | 	rdlong	result1, fp
0d41c     1F FA 05 F4 | 	bitl	result1, #31
0d420     24 4E 85 F1 | 	sub	fp, #36
0d424     A7 FA 61 FC | 	wrlong	result1, fp
0d428     20 4E 05 F1 | 	add	fp, #32
0d42c     00 C0 9F FF 
0d430     A7 00 68 FC | 	wrlong	##1065353216, fp
0d434     24 4E 85 F1 | 	sub	fp, #36
0d438     A7 1E 02 FB | 	rdlong	local01, fp
0d43c     28 4E 05 F1 | 	add	fp, #40
0d440     A7 1E 62 FC | 	wrlong	local01, fp
0d444     24 4E 85 F1 | 	sub	fp, #36
0d448     A7 1E 02 FB | 	rdlong	local01, fp
0d44c     28 4E 05 F1 | 	add	fp, #40
0d450     A7 1E 62 FC | 	wrlong	local01, fp
0d454                 | '   harm(0)=1
0d454                 | '   harm(1)=even
0d454                 | '   harm(2)=odd
0d454                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0d454     40 4E 85 F1 | 	sub	fp, #64
0d458     A7 06 68 FC | 	wrlong	#3, fp
0d45c                 | LR__1049
0d45c     A7 22 02 FB | 	rdlong	local03, fp
0d460     11 27 02 F6 | 	mov	local05, local03
0d464     02 26 66 F0 | 	shl	local05, #2
0d468     38 4E 05 F1 | 	add	fp, #56
0d46c     A7 26 02 F1 | 	add	local05, fp
0d470     02 22 86 F1 | 	sub	local03, #2
0d474     02 22 66 F0 | 	shl	local03, #2
0d478     A7 22 02 F1 | 	add	local03, fp
0d47c     11 13 02 FB | 	rdlong	arg01, local03
0d480     24 4E 85 F1 | 	sub	fp, #36
0d484     A7 14 02 FB | 	rdlong	arg02, fp
0d488     18 4E 85 F1 | 	sub	fp, #24
0d48c     2C 15 B1 FD | 	call	#__system___float_mul
0d490     13 FB 61 FC | 	wrlong	result1, local05
0d494     04 4E 05 F1 | 	add	fp, #4
0d498     A7 22 02 FB | 	rdlong	local03, fp
0d49c     02 22 06 F1 | 	add	local03, #2
0d4a0     A7 22 62 FC | 	wrlong	local03, fp
0d4a4     10 22 56 F2 | 	cmps	local03, #16 wc
0d4a8     B0 FF 9F CD |  if_b	jmp	#LR__1049
0d4ac                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0d4ac     A7 08 68 FC | 	wrlong	#4, fp
0d4b0                 | LR__1050
0d4b0     A7 22 02 FB | 	rdlong	local03, fp
0d4b4     11 27 02 F6 | 	mov	local05, local03
0d4b8     02 26 66 F0 | 	shl	local05, #2
0d4bc     38 4E 05 F1 | 	add	fp, #56
0d4c0     A7 26 02 F1 | 	add	local05, fp
0d4c4     02 22 86 F1 | 	sub	local03, #2
0d4c8     02 22 66 F0 | 	shl	local03, #2
0d4cc     A7 22 02 F1 | 	add	local03, fp
0d4d0     11 13 02 FB | 	rdlong	arg01, local03
0d4d4     20 4E 85 F1 | 	sub	fp, #32
0d4d8     A7 14 02 FB | 	rdlong	arg02, fp
0d4dc     1C 4E 85 F1 | 	sub	fp, #28
0d4e0     D8 14 B1 FD | 	call	#__system___float_mul
0d4e4     13 FB 61 FC | 	wrlong	result1, local05
0d4e8     04 4E 05 F1 | 	add	fp, #4
0d4ec     A7 22 02 FB | 	rdlong	local03, fp
0d4f0     02 22 06 F1 | 	add	local03, #2
0d4f4     A7 22 62 FC | 	wrlong	local03, fp
0d4f8     0F 22 56 F2 | 	cmps	local03, #15 wc
0d4fc     B0 FF 9F CD |  if_b	jmp	#LR__1050
0d500     04 4E 85 F1 | 	sub	fp, #4
0d504                 | LR__1051
0d504                 | ' if harm(0)>=0 then ' synthesize with harmonics
0d504     3C 4E 05 F1 | 	add	fp, #60
0d508     A7 12 02 FB | 	rdlong	arg01, fp
0d50c     3C 4E 85 F1 | 	sub	fp, #60
0d510     00 14 06 F6 | 	mov	arg02, #0
0d514     01 16 66 F6 | 	neg	arg03, #1
0d518     D4 18 B1 FD | 	call	#__system___float_cmp
0d51c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d520     B0 02 90 CD |  if_b	jmp	#LR__1057
0d524                 | '   for i=0 to 1023
0d524     04 4E 05 F1 | 	add	fp, #4
0d528     A7 00 68 FC | 	wrlong	#0, fp
0d52c     04 4E 85 F1 | 	sub	fp, #4
0d530                 | LR__1052
0d530     24 4E 05 F1 | 	add	fp, #36
0d534     A7 00 68 FC | 	wrlong	#0, fp
0d538                 | '     spl=0
0d538                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0d538     1C 4E 85 F1 | 	sub	fp, #28
0d53c     A7 00 68 FC | 	wrlong	#0, fp
0d540                 | LR__1053
0d540     A7 26 02 FB | 	rdlong	local05, fp
0d544     02 26 66 F0 | 	shl	local05, #2
0d548     34 4E 05 F1 | 	add	fp, #52
0d54c     A7 26 02 F1 | 	add	local05, fp
0d550     13 23 02 FB | 	rdlong	local03, local05
0d554     87 E4 1D FF 
0d558     DB 27 06 F6 | 	mov	local05, ##1003032539
0d55c     38 4E 85 F1 | 	sub	fp, #56
0d560     A7 12 02 FB | 	rdlong	arg01, fp
0d564     04 4E 85 F1 | 	sub	fp, #4
0d568     09 13 52 F6 | 	abs	arg01, arg01 wc
0d56c     1F 24 C6 C9 |  if_b	decod	local04, #31
0d570     00 24 06 36 |  if_ae	mov	local04, #0
0d574     40 10 B1 FD | 	call	#__system___float_fromuns
0d578     12 FB 61 F5 | 	xor	result1, local04
0d57c     FD 14 02 F6 | 	mov	arg02, result1
0d580     13 13 02 F6 | 	mov	arg01, local05
0d584     34 14 B1 FD | 	call	#__system___float_mul
0d588     FD 26 02 F6 | 	mov	local05, result1
0d58c     08 4E 05 F1 | 	add	fp, #8
0d590     A7 12 02 FB | 	rdlong	arg01, fp
0d594     08 4E 85 F1 | 	sub	fp, #8
0d598     01 12 06 F1 | 	add	arg01, #1
0d59c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5a0     1F 24 C6 C9 |  if_b	decod	local04, #31
0d5a4     00 24 06 36 |  if_ae	mov	local04, #0
0d5a8     0C 10 B1 FD | 	call	#__system___float_fromuns
0d5ac     12 FB 61 F5 | 	xor	result1, local04
0d5b0     FD 14 02 F6 | 	mov	arg02, result1
0d5b4     13 13 02 F6 | 	mov	arg01, local05
0d5b8     00 14 B1 FD | 	call	#__system___float_mul
0d5bc     FD 12 02 F6 | 	mov	arg01, result1
0d5c0     34 1D B1 FD | 	call	#__system____builtin_sinf
0d5c4     FD 14 02 F6 | 	mov	arg02, result1
0d5c8     11 13 02 F6 | 	mov	arg01, local03
0d5cc     EC 13 B1 FD | 	call	#__system___float_mul
0d5d0     FD 14 02 F6 | 	mov	arg02, result1
0d5d4     24 4E 05 F1 | 	add	fp, #36
0d5d8     A7 12 02 FB | 	rdlong	arg01, fp
0d5dc     24 4E 85 F1 | 	sub	fp, #36
0d5e0     08 10 B1 FD | 	call	#__system___float_add
0d5e4     24 4E 05 F1 | 	add	fp, #36
0d5e8     A7 FA 61 FC | 	wrlong	result1, fp
0d5ec     1C 4E 85 F1 | 	sub	fp, #28
0d5f0     A7 16 02 FB | 	rdlong	arg03, fp
0d5f4     01 16 06 F1 | 	add	arg03, #1
0d5f8     A7 16 62 FC | 	wrlong	arg03, fp
0d5fc     10 16 56 F2 | 	cmps	arg03, #16 wc
0d600     3C FF 9F CD |  if_b	jmp	#LR__1053
0d604                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0d604     1C 4E 05 F1 | 	add	fp, #28
0d608     A7 12 02 FB | 	rdlong	arg01, fp
0d60c     1F 12 06 F4 | 	bitl	arg01, #31
0d610     04 4E 85 F1 | 	sub	fp, #4
0d614     A7 14 02 FB | 	rdlong	arg02, fp
0d618     20 4E 85 F1 | 	sub	fp, #32
0d61c     01 16 66 F6 | 	neg	arg03, #1
0d620     CC 17 B1 FD | 	call	#__system___float_cmp
0d624     01 FA 55 F2 | 	cmps	result1, #1 wc
0d628     18 00 90 CD |  if_b	jmp	#LR__1054
0d62c     24 4E 05 F1 | 	add	fp, #36
0d630     A7 FA 01 FB | 	rdlong	result1, fp
0d634     1F FA 05 F4 | 	bitl	result1, #31
0d638     04 4E 85 F1 | 	sub	fp, #4
0d63c     A7 FA 61 FC | 	wrlong	result1, fp
0d640     20 4E 85 F1 | 	sub	fp, #32
0d644                 | LR__1054
0d644     04 4E 05 F1 | 	add	fp, #4
0d648     A7 22 02 FB | 	rdlong	local03, fp
0d64c     01 22 06 F1 | 	add	local03, #1
0d650     A7 22 62 FC | 	wrlong	local03, fp
0d654     04 4E 85 F1 | 	sub	fp, #4
0d658     02 00 00 FF 
0d65c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d660     CC FE 9F CD |  if_b	jmp	#LR__1052
0d664                 | '   for i=0 to 1023
0d664     04 4E 05 F1 | 	add	fp, #4
0d668     A7 00 68 FC | 	wrlong	#0, fp
0d66c     04 4E 85 F1 | 	sub	fp, #4
0d670                 | LR__1055
0d670     24 4E 05 F1 | 	add	fp, #36
0d674     A7 00 68 FC | 	wrlong	#0, fp
0d678                 | '     spl=0
0d678                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0d678     1C 4E 85 F1 | 	sub	fp, #28
0d67c     A7 00 68 FC | 	wrlong	#0, fp
0d680                 | LR__1056
0d680     A7 26 02 FB | 	rdlong	local05, fp
0d684     02 26 66 F0 | 	shl	local05, #2
0d688     34 4E 05 F1 | 	add	fp, #52
0d68c     A7 26 02 F1 | 	add	local05, fp
0d690     13 27 02 FB | 	rdlong	local05, local05
0d694     1C 4E 85 F1 | 	sub	fp, #28
0d698     A7 14 02 FB | 	rdlong	arg02, fp
0d69c     20 4E 85 F1 | 	sub	fp, #32
0d6a0     58 7F 23 FF 
0d6a4     00 12 06 F6 | 	mov	arg01, ##1191096320
0d6a8     14 15 B1 FD | 	call	#__system___float_div
0d6ac     FD 14 02 F6 | 	mov	arg02, result1
0d6b0     13 13 02 F6 | 	mov	arg01, local05
0d6b4     04 13 B1 FD | 	call	#__system___float_mul
0d6b8     FD 22 02 F6 | 	mov	local03, result1
0d6bc     87 E4 1D FF 
0d6c0     DB 27 06 F6 | 	mov	local05, ##1003032539
0d6c4     04 4E 05 F1 | 	add	fp, #4
0d6c8     A7 12 02 FB | 	rdlong	arg01, fp
0d6cc     04 4E 85 F1 | 	sub	fp, #4
0d6d0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d6d4     1F 24 C6 C9 |  if_b	decod	local04, #31
0d6d8     00 24 06 36 |  if_ae	mov	local04, #0
0d6dc     D8 0E B1 FD | 	call	#__system___float_fromuns
0d6e0     12 FB 61 F5 | 	xor	result1, local04
0d6e4     FD 14 02 F6 | 	mov	arg02, result1
0d6e8     13 13 02 F6 | 	mov	arg01, local05
0d6ec     CC 12 B1 FD | 	call	#__system___float_mul
0d6f0     FD 26 02 F6 | 	mov	local05, result1
0d6f4     08 4E 05 F1 | 	add	fp, #8
0d6f8     A7 12 02 FB | 	rdlong	arg01, fp
0d6fc     08 4E 85 F1 | 	sub	fp, #8
0d700     01 12 06 F1 | 	add	arg01, #1
0d704     09 13 52 F6 | 	abs	arg01, arg01 wc
0d708     1F 24 C6 C9 |  if_b	decod	local04, #31
0d70c     00 24 06 36 |  if_ae	mov	local04, #0
0d710     A4 0E B1 FD | 	call	#__system___float_fromuns
0d714     12 FB 61 F5 | 	xor	result1, local04
0d718     FD 14 02 F6 | 	mov	arg02, result1
0d71c     13 13 02 F6 | 	mov	arg01, local05
0d720     98 12 B1 FD | 	call	#__system___float_mul
0d724     FD 12 02 F6 | 	mov	arg01, result1
0d728     CC 1B B1 FD | 	call	#__system____builtin_sinf
0d72c     FD 14 02 F6 | 	mov	arg02, result1
0d730     11 13 02 F6 | 	mov	arg01, local03
0d734     84 12 B1 FD | 	call	#__system___float_mul
0d738     FD 14 02 F6 | 	mov	arg02, result1
0d73c     24 4E 05 F1 | 	add	fp, #36
0d740     A7 12 02 FB | 	rdlong	arg01, fp
0d744     24 4E 85 F1 | 	sub	fp, #36
0d748     A0 0E B1 FD | 	call	#__system___float_add
0d74c     24 4E 05 F1 | 	add	fp, #36
0d750     A7 FA 61 FC | 	wrlong	result1, fp
0d754     1C 4E 85 F1 | 	sub	fp, #28
0d758     A7 26 02 FB | 	rdlong	local05, fp
0d75c     01 26 06 F1 | 	add	local05, #1
0d760     A7 26 62 FC | 	wrlong	local05, fp
0d764     10 26 56 F2 | 	cmps	local05, #16 wc
0d768     14 FF 9F CD |  if_b	jmp	#LR__1056
0d76c     08 4E 05 F1 | 	add	fp, #8
0d770     A7 26 02 FB | 	rdlong	local05, fp
0d774     0B 26 66 F0 | 	shl	local05, #11
0d778     0C 00 00 FF 
0d77c     CC E4 05 F1 | 	add	objptr, ##6348
0d780     F2 26 02 F1 | 	add	local05, objptr
0d784     0C 4E 85 F1 | 	sub	fp, #12
0d788     A7 20 02 FB | 	rdlong	local02, fp
0d78c     01 20 66 F0 | 	shl	local02, #1
0d790     13 21 02 F1 | 	add	local02, local05
0d794     20 4E 05 F1 | 	add	fp, #32
0d798     A7 12 02 FB | 	rdlong	arg01, fp
0d79c     24 4E 85 F1 | 	sub	fp, #36
0d7a0     0C 00 00 FF 
0d7a4     CC E4 85 F1 | 	sub	objptr, ##6348
0d7a8     01 14 06 F6 | 	mov	arg02, #1
0d7ac     D4 16 B1 FD | 	call	#__system___float_tointeger
0d7b0     10 FB 51 FC | 	wrword	result1, local02
0d7b4     04 4E 05 F1 | 	add	fp, #4
0d7b8     A7 22 02 FB | 	rdlong	local03, fp
0d7bc     01 22 06 F1 | 	add	local03, #1
0d7c0     A7 22 62 FC | 	wrlong	local03, fp
0d7c4     04 4E 85 F1 | 	sub	fp, #4
0d7c8     02 00 00 FF 
0d7cc     00 22 56 F2 | 	cmps	local03, ##1024 wc
0d7d0     9C FE 9F CD |  if_b	jmp	#LR__1055
0d7d4                 | LR__1057
0d7d4                 | LR__1058
0d7d4     A7 F0 03 F6 | 	mov	ptra, fp
0d7d8     B2 00 A0 FD | 	call	#popregs_
0d7dc                 | _do_defsnd_ret
0d7dc     2D 00 64 FD | 	ret
0d7e0                 | 
0d7e0                 | ' 
0d7e0                 | ' ' ---------------  List the program. 
0d7e0                 | ' 
0d7e0                 | ' sub do_list
0d7e0                 | _do_list
0d7e0     02 4A 05 F6 | 	mov	COUNT_, #2
0d7e4     A8 00 A0 FD | 	call	#pushregs_
0d7e8     B8 F0 07 F1 | 	add	ptra, #184
0d7ec     04 4E 05 F1 | 	add	fp, #4
0d7f0     A7 00 68 FC | 	wrlong	#0, fp
0d7f4     04 4E 05 F1 | 	add	fp, #4
0d7f8     FF FF BF FF 
0d7fc     A7 FE 6B FC | 	wrlong	##2147483647, fp
0d800     08 4E 85 F1 | 	sub	fp, #8
0d804     6A 00 00 FF 
0d808     64 E4 05 F1 | 	add	objptr, ##54372
0d80c     F2 1E 02 FB | 	rdlong	local01, objptr
0d810     0F 17 02 F6 | 	mov	arg03, local01
0d814     01 16 66 F0 | 	shl	arg03, #1
0d818     0F 17 02 F1 | 	add	arg03, local01
0d81c     02 16 66 F0 | 	shl	arg03, #2
0d820     03 00 00 FF 
0d824     04 E4 85 F1 | 	sub	objptr, ##1540
0d828     F2 16 02 F1 | 	add	arg03, objptr
0d82c     0B 17 02 FB | 	rdlong	arg03, arg03
0d830     A7 16 62 FC | 	wrlong	arg03, fp
0d834                 | ' 
0d834                 | ' startline=0 : endline=$7FFFFFFF
0d834                 | ' numpar=compiledline(lineptr_e).result.uresult
0d834                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0d834     01 16 0E F2 | 	cmp	arg03, #1 wz
0d838     67 00 00 FF 
0d83c     60 E4 85 F1 | 	sub	objptr, ##52832
0d840     3C 00 90 5D |  if_ne	jmp	#LR__1060
0d844     40 C8 BF FD | 	call	#_pop
0d848     FF 1E 02 F6 | 	mov	local01, result3
0d84c     0C 4E 05 F1 | 	add	fp, #12
0d850     A7 FA 61 FC | 	wrlong	result1, fp
0d854     04 4E 05 F1 | 	add	fp, #4
0d858     A7 FC 61 FC | 	wrlong	result2, fp
0d85c     04 4E 05 F1 | 	add	fp, #4
0d860     A7 1E 62 FC | 	wrlong	local01, fp
0d864     08 4E 85 F1 | 	sub	fp, #8
0d868     A7 12 02 F6 | 	mov	arg01, fp
0d86c     0C 4E 85 F1 | 	sub	fp, #12
0d870     68 4E B0 FD | 	call	#_converttoint
0d874     04 4E 05 F1 | 	add	fp, #4
0d878     A7 FA 61 FC | 	wrlong	result1, fp
0d87c     04 4E 85 F1 | 	sub	fp, #4
0d880                 | LR__1060
0d880                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0d880     A7 16 02 FB | 	rdlong	arg03, fp
0d884     02 16 0E F2 | 	cmp	arg03, #2 wz
0d888     7C 00 90 5D |  if_ne	jmp	#LR__1061
0d88c     F8 C7 BF FD | 	call	#_pop
0d890     FF 1E 02 F6 | 	mov	local01, result3
0d894     0C 4E 05 F1 | 	add	fp, #12
0d898     A7 FA 61 FC | 	wrlong	result1, fp
0d89c     04 4E 05 F1 | 	add	fp, #4
0d8a0     A7 FC 61 FC | 	wrlong	result2, fp
0d8a4     04 4E 05 F1 | 	add	fp, #4
0d8a8     A7 1E 62 FC | 	wrlong	local01, fp
0d8ac     08 4E 85 F1 | 	sub	fp, #8
0d8b0     A7 12 02 F6 | 	mov	arg01, fp
0d8b4     0C 4E 85 F1 | 	sub	fp, #12
0d8b8     20 4E B0 FD | 	call	#_converttoint
0d8bc     FD 1E 02 F6 | 	mov	local01, result1
0d8c0     08 4E 05 F1 | 	add	fp, #8
0d8c4     A7 1E 62 FC | 	wrlong	local01, fp
0d8c8     08 4E 85 F1 | 	sub	fp, #8
0d8cc     B8 C7 BF FD | 	call	#_pop
0d8d0     FF 1E 02 F6 | 	mov	local01, result3
0d8d4     0C 4E 05 F1 | 	add	fp, #12
0d8d8     A7 FA 61 FC | 	wrlong	result1, fp
0d8dc     04 4E 05 F1 | 	add	fp, #4
0d8e0     A7 FC 61 FC | 	wrlong	result2, fp
0d8e4     04 4E 05 F1 | 	add	fp, #4
0d8e8     A7 1E 62 FC | 	wrlong	local01, fp
0d8ec     08 4E 85 F1 | 	sub	fp, #8
0d8f0     A7 12 02 F6 | 	mov	arg01, fp
0d8f4     0C 4E 85 F1 | 	sub	fp, #12
0d8f8     E0 4D B0 FD | 	call	#_converttoint
0d8fc     04 4E 05 F1 | 	add	fp, #4
0d900     A7 FA 61 FC | 	wrlong	result1, fp
0d904     04 4E 85 F1 | 	sub	fp, #4
0d908                 | LR__1061
0d908                 | ' 
0d908                 | ' 
0d908                 | ' print
0d908     00 12 06 F6 | 	mov	arg01, #0
0d90c     C0 3E B1 FD | 	call	#__system___getiolock_0472
0d910     FD 12 02 F6 | 	mov	arg01, result1
0d914     28 E5 B0 FD | 	call	#__system___lockmem
0d918     00 12 06 F6 | 	mov	arg01, #0
0d91c     0A 14 06 F6 | 	mov	arg02, #10
0d920     00 16 06 F6 | 	mov	arg03, #0
0d924     C4 F1 B0 FD | 	call	#__system___basic_print_char
0d928     00 12 06 F6 | 	mov	arg01, #0
0d92c     A0 3E B1 FD | 	call	#__system___getiolock_0472
0d930     FD 00 68 FC | 	wrlong	#0, result1
0d934     6A 00 00 FF 
0d938     68 E4 05 F1 | 	add	objptr, ##54376
0d93c     F2 20 02 FB | 	rdlong	local02, objptr
0d940     11 00 00 FF 
0d944     84 E4 05 F1 | 	add	objptr, ##8836
0d948     F2 20 62 FC | 	wrlong	local02, objptr
0d94c     7B 00 00 FF 
0d950     EC E4 85 F1 | 	sub	objptr, ##63212
0d954                 | ' do 
0d954                 | LR__1062
0d954     20 4E 05 F1 | 	add	fp, #32
0d958     A7 12 02 F6 | 	mov	arg01, fp
0d95c     20 4E 85 F1 | 	sub	fp, #32
0d960     7B 00 00 FF 
0d964     EC E4 05 F1 | 	add	objptr, ##63212
0d968     F2 14 02 FB | 	rdlong	arg02, objptr
0d96c     18 16 06 F6 | 	mov	arg03, #24
0d970     70 00 00 FF 
0d974     2C E4 85 F1 | 	sub	objptr, ##57388
0d978     5C D9 B0 FD | 	call	#_psram_spin2_read1
0d97c     0B 00 00 FF 
0d980     C0 E4 85 F1 | 	sub	objptr, ##5824
0d984                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0d984                 | '   
0d984                 | '   if header(0)<> $FFFFFFFF then
0d984     20 4E 05 F1 | 	add	fp, #32
0d988     A7 20 02 FB | 	rdlong	local02, fp
0d98c     20 4E 85 F1 | 	sub	fp, #32
0d990     FF FF 7F FF 
0d994     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0d998     A8 00 90 AD |  if_e	jmp	#LR__1064
0d99c     38 4E 05 F1 | 	add	fp, #56
0d9a0     3F 16 06 F6 | 	mov	arg03, #63
0d9a4     28 16 62 FD | 	setq	arg03
0d9a8     A7 00 68 FC | 	wrlong	#0, fp
0d9ac     A7 12 02 F6 | 	mov	arg01, fp
0d9b0     10 4E 85 F1 | 	sub	fp, #16
0d9b4     A7 14 02 FB | 	rdlong	arg02, fp
0d9b8     04 4E 05 F1 | 	add	fp, #4
0d9bc     A7 16 02 FB | 	rdlong	arg03, fp
0d9c0     2C 4E 85 F1 | 	sub	fp, #44
0d9c4     0B 00 00 FF 
0d9c8     C0 E4 05 F1 | 	add	objptr, ##5824
0d9cc     08 D9 B0 FD | 	call	#_psram_spin2_read1
0d9d0     0B 00 00 FF 
0d9d4     C0 E4 85 F1 | 	sub	objptr, ##5824
0d9d8                 | '     longfill(linebuf,0,64)
0d9d8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0d9d8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0d9d8     20 4E 05 F1 | 	add	fp, #32
0d9dc     A7 20 02 FB | 	rdlong	local02, fp
0d9e0     1C 4E 85 F1 | 	sub	fp, #28
0d9e4     A7 1E 02 FB | 	rdlong	local01, fp
0d9e8     04 4E 85 F1 | 	sub	fp, #4
0d9ec     0F 21 52 F2 | 	cmps	local02, local01 wc
0d9f0     30 00 90 CD |  if_b	jmp	#LR__1063
0d9f4     20 4E 05 F1 | 	add	fp, #32
0d9f8     A7 20 02 FB | 	rdlong	local02, fp
0d9fc     18 4E 85 F1 | 	sub	fp, #24
0da00     A7 16 02 FB | 	rdlong	arg03, fp
0da04     08 4E 85 F1 | 	sub	fp, #8
0da08     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0da0c     14 00 90 1D |  if_a	jmp	#LR__1063
0da10     38 4E 05 F1 | 	add	fp, #56
0da14     A7 12 02 F6 | 	mov	arg01, fp
0da18     38 4E 85 F1 | 	sub	fp, #56
0da1c                 | ' 
0da1c                 | ' write(text)
0da1c     80 D3 B0 FD | 	call	#_hg010b_spin2_write
0da20                 | ' crlf
0da20     DC D4 B0 FD | 	call	#_hg010b_spin2_crlf
0da24                 | LR__1063
0da24     34 4E 05 F1 | 	add	fp, #52
0da28     A7 20 02 FB | 	rdlong	local02, fp
0da2c     34 4E 85 F1 | 	sub	fp, #52
0da30     7B 00 00 FF 
0da34     EC E4 05 F1 | 	add	objptr, ##63212
0da38     F2 20 62 FC | 	wrlong	local02, objptr
0da3c     7B 00 00 FF 
0da40     EC E4 85 F1 | 	sub	objptr, ##63212
0da44                 | LR__1064
0da44     34 4E 05 F1 | 	add	fp, #52
0da48     A7 20 02 FB | 	rdlong	local02, fp
0da4c     34 4E 85 F1 | 	sub	fp, #52
0da50     FF FF 3F FF 
0da54     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0da58     20 4E 05 51 |  if_ne	add	fp, #32
0da5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0da60     20 4E 85 51 |  if_ne	sub	fp, #32
0da64     FF FF 7F 5F 
0da68     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0da6c     E4 FE 9F 5D |  if_ne	jmp	#LR__1062
0da70     A7 F0 03 F6 | 	mov	ptra, fp
0da74     B2 00 A0 FD | 	call	#popregs_
0da78                 | _do_list_ret
0da78     2D 00 64 FD | 	ret
0da7c                 | 
0da7c                 | ' 
0da7c                 | ' '---------------- Clear the program
0da7c                 | ' 
0da7c                 | ' sub do_new
0da7c                 | _do_new
0da7c     03 4A 05 F6 | 	mov	COUNT_, #3
0da80     A8 00 A0 FD | 	call	#pushregs_
0da84     00 12 06 F6 | 	mov	arg01, #0
0da88     01 14 66 F6 | 	neg	arg02, #1
0da8c     2C AE B0 FD | 	call	#_pslpoke
0da90     54 00 00 FF 
0da94     EC E5 05 F1 | 	add	objptr, ##43500
0da98     F2 00 68 FC | 	wrlong	#0, objptr
0da9c     15 00 00 FF 
0daa0     7C E4 05 F1 | 	add	objptr, ##10876
0daa4     F2 00 68 FC | 	wrlong	#0, objptr
0daa8     0F 00 00 FF 
0daac     2C E5 05 F1 | 	add	objptr, ##7980
0dab0     F2 00 68 FC | 	wrlong	#0, objptr
0dab4     04 E4 05 F1 | 	add	objptr, #4
0dab8     F2 00 68 FC | 	wrlong	#0, objptr
0dabc     16 00 00 FF 
0dac0     5C E5 85 F1 | 	sub	objptr, ##11612
0dac4     F2 00 68 FC | 	wrlong	#0, objptr
0dac8     07 00 00 FF 
0dacc     24 E4 05 F1 | 	add	objptr, ##3620
0dad0     F2 00 68 FC | 	wrlong	#0, objptr
0dad4     07 00 00 FF 
0dad8     20 E4 85 F1 | 	sub	objptr, ##3616
0dadc     F2 00 68 FC | 	wrlong	#0, objptr
0dae0     0F 00 00 FF 
0dae4     34 E4 05 F1 | 	add	objptr, ##7732
0dae8     F2 00 68 FC | 	wrlong	#0, objptr
0daec     08 00 00 FF 
0daf0     08 E4 85 F1 | 	sub	objptr, ##4104
0daf4     F2 00 68 FC | 	wrlong	#0, objptr
0daf8     04 E4 05 F1 | 	add	objptr, #4
0dafc     FF FF FF FF 
0db00     F2 FE 6B FC | 	wrlong	##-1, objptr
0db04     0F 00 00 FF 
0db08     4C E5 05 F1 | 	add	objptr, ##8012
0db0c     F2 00 68 FC | 	wrlong	#0, objptr
0db10                 | ' 
0db10                 | ' pslpoke(0,$FFFFFFFF)
0db10                 | ' varnum=0
0db10                 | ' programstart=0 :runptr=0 : runptr2=0
0db10                 | ' stackpointer=0
0db10                 | ' lineptr=0 
0db10                 | ' programptr=0 : stringptr=0
0db10                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0db10                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0db10     00 1E 06 F6 | 	mov	local01, #0
0db14     07 00 00 FF 
0db18     40 E5 85 F1 | 	sub	objptr, ##3904
0db1c     97 16 48 FB | 	callpa	#(@LR__1071-@LR__1070)>>2,fcache_load_ptr_
0db20                 | LR__1070
0db20     0F 21 02 F6 | 	mov	local02, local01
0db24     02 20 66 F0 | 	shl	local02, #2
0db28     0F 21 02 F1 | 	add	local02, local01
0db2c     02 20 66 F0 | 	shl	local02, #2
0db30     F2 20 02 F1 | 	add	local02, objptr
0db34     08 20 06 F1 | 	add	local02, #8
0db38     FF FF FF FF 
0db3c     10 FF 6B FC | 	wrlong	##-1, local02
0db40     01 1E 06 F1 | 	add	local01, #1
0db44     81 1E 56 F2 | 	cmps	local01, #129 wc
0db48     D4 FF 9F CD |  if_b	jmp	#LR__1070
0db4c                 | LR__1071
0db4c     72 00 00 FF 
0db50     7C E4 85 F1 | 	sub	objptr, ##58492
0db54                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0db54     00 1E 06 F6 | 	mov	local01, #0
0db58                 | LR__1072
0db58     0F 21 02 F6 | 	mov	local02, local01
0db5c     02 20 66 F0 | 	shl	local02, #2
0db60     7B 00 00 FF 
0db64     18 E4 05 F1 | 	add	objptr, ##63000
0db68     F2 20 02 F1 | 	add	local02, objptr
0db6c     10 21 0A FB | 	rdlong	local02, local02 wz
0db70     7B 00 00 FF 
0db74     18 E4 85 F1 | 	sub	objptr, ##63000
0db78     34 00 90 AD |  if_e	jmp	#LR__1073
0db7c     0F 13 02 F6 | 	mov	arg01, local01
0db80     00 14 06 F6 | 	mov	arg02, #0
0db84     00 16 06 F6 | 	mov	arg03, #0
0db88     A0 C2 B0 FD | 	call	#_hg010b_spin2_setspritesize
0db8c     0F 21 02 F6 | 	mov	local02, local01
0db90     02 20 66 F0 | 	shl	local02, #2
0db94     7B 00 00 FF 
0db98     18 E4 05 F1 | 	add	objptr, ##63000
0db9c     F2 20 02 F1 | 	add	local02, objptr
0dba0     10 13 02 FB | 	rdlong	arg01, local02
0dba4     7B 00 00 FF 
0dba8     18 E4 85 F1 | 	sub	objptr, ##63000
0dbac     14 22 B1 FD | 	call	#__system___gc_free
0dbb0                 | LR__1073
0dbb0     7B 00 00 FF 
0dbb4     6C E4 05 F1 | 	add	objptr, ##63084
0dbb8     00 C0 9F FF 
0dbbc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dbc0     04 E4 05 F1 | 	add	objptr, #4
0dbc4     00 C0 9F FF 
0dbc8     F2 00 68 FC | 	wrlong	##1065353216, objptr
0dbcc     7B 00 00 FF 
0dbd0     70 E4 85 F1 | 	sub	objptr, ##63088
0dbd4     F2 22 02 FB | 	rdlong	local03, objptr
0dbd8     7B 00 00 FF 
0dbdc     5C E4 05 F1 | 	add	objptr, ##63068
0dbe0     F2 22 62 FC | 	wrlong	local03, objptr
0dbe4     7B 00 00 FF 
0dbe8     5C E4 85 F1 | 	sub	objptr, ##63068
0dbec     11 12 06 F6 | 	mov	arg01, #17
0dbf0     08 14 06 F6 | 	mov	arg02, #8
0dbf4     10 16 06 F6 | 	mov	arg03, #16
0dbf8     30 C2 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dbfc     10 12 06 F6 | 	mov	arg01, #16
0dc00     20 14 06 F6 | 	mov	arg02, #32
0dc04     20 16 06 F6 | 	mov	arg03, #32
0dc08     20 C2 B0 FD | 	call	#_hg010b_spin2_setspritesize
0dc0c     B8 9F B0 FD | 	call	#_init_audio
0dc10     01 1E 06 F1 | 	add	local01, #1
0dc14     10 1E 56 F2 | 	cmps	local01, #16 wc
0dc18     3C FF 9F CD |  if_b	jmp	#LR__1072
0dc1c     A7 F0 03 F6 | 	mov	ptra, fp
0dc20     B2 00 A0 FD | 	call	#popregs_
0dc24                 | _do_new_ret
0dc24     2D 00 64 FD | 	ret
0dc28                 | 
0dc28                 | ' 
0dc28                 | ' '----------------------- goto
0dc28                 | ' sub do_fast_goto
0dc28                 | _do_fast_goto
0dc28     02 4A 05 F6 | 	mov	COUNT_, #2
0dc2c     A8 00 A0 FD | 	call	#pushregs_
0dc30                 | _do_fast_goto_enter
0dc30     6A 00 00 FF 
0dc34     64 E4 05 F1 | 	add	objptr, ##54372
0dc38     F2 12 02 FB | 	rdlong	arg01, objptr
0dc3c     09 1F 02 F6 | 	mov	local01, arg01
0dc40     01 1E 66 F0 | 	shl	local01, #1
0dc44     09 1F 02 F1 | 	add	local01, arg01
0dc48     02 1E 66 F0 | 	shl	local01, #2
0dc4c     03 00 00 FF 
0dc50     04 E4 85 F1 | 	sub	objptr, ##1540
0dc54     F2 1E 02 F1 | 	add	local01, objptr
0dc58     0F 21 02 FB | 	rdlong	local02, local01
0dc5c     10 13 02 F6 | 	mov	arg01, local02
0dc60     67 00 00 FF 
0dc64     60 E4 85 F1 | 	sub	objptr, ##52832
0dc68     80 AD B0 FD | 	call	#_pslpeek
0dc6c     FD 12 02 F6 | 	mov	arg01, result1
0dc70                 | ' 
0dc70                 | ' testptr=compiledline(lineptr_e).result.uresult
0dc70                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0dc70                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0dc70     6A 00 00 FF 
0dc74     64 E4 05 F1 | 	add	objptr, ##54372
0dc78     F2 FA 01 FB | 	rdlong	result1, objptr
0dc7c     FD 1E 02 F6 | 	mov	local01, result1
0dc80     01 1E 66 F0 | 	shl	local01, #1
0dc84     FD 1E 02 F1 | 	add	local01, result1
0dc88     02 1E 66 F0 | 	shl	local01, #2
0dc8c     03 00 00 FF 
0dc90     04 E4 85 F1 | 	sub	objptr, ##1540
0dc94     F2 1E 02 F1 | 	add	local01, objptr
0dc98     04 1E 06 F1 | 	add	local01, #4
0dc9c     0F 1F 02 FB | 	rdlong	local01, local01
0dca0     0F 13 0A F2 | 	cmp	arg01, local01 wz
0dca4     67 00 00 FF 
0dca8     60 E4 85 F1 | 	sub	objptr, ##52832
0dcac     58 00 90 5D |  if_ne	jmp	#LR__1080
0dcb0     79 00 00 FF 
0dcb4     94 E5 05 F1 | 	add	objptr, ##62356
0dcb8     F2 20 62 FC | 	wrlong	local02, objptr
0dcbc     0F 00 00 FF 
0dcc0     34 E5 85 F1 | 	sub	objptr, ##7988
0dcc4     F2 20 02 FB | 	rdlong	local02, objptr
0dcc8     01 20 86 F1 | 	sub	local02, #1
0dccc     04 E4 05 F1 | 	add	objptr, #4
0dcd0     F2 20 62 FC | 	wrlong	local02, objptr
0dcd4                 | '   runptr=testptr
0dcd4                 | '   lineptr_e=lineptr-1
0dcd4                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0dcd4     0F 00 00 FF 
0dcd8     54 E5 05 F1 | 	add	objptr, ##8020
0dcdc     F2 20 02 FB | 	rdlong	local02, objptr
0dce0     79 00 00 FF 
0dce4     B8 E5 85 F1 | 	sub	objptr, ##62392
0dce8     FF FF 3F FF 
0dcec     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0dcf0     79 00 00 AF 
0dcf4     B8 E5 05 A1 |  if_e	add	objptr, ##62392
0dcf8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0dcfc     79 00 00 AF 
0dd00     B8 E5 85 A1 |  if_e	sub	objptr, ##62392
0dd04     04 00 90 FD | 	jmp	#LR__1081
0dd08                 | LR__1080
0dd08     0C 00 B0 FD | 	call	#_do_find_goto
0dd0c                 | LR__1081
0dd0c     A7 F0 03 F6 | 	mov	ptra, fp
0dd10     B2 00 A0 FD | 	call	#popregs_
0dd14                 | _do_fast_goto_ret
0dd14     2D 00 64 FD | 	ret
0dd18                 | 
0dd18                 | ' 
0dd18                 | ' 
0dd18                 | ' 
0dd18                 | ' 
0dd18                 | ' sub do_find_goto
0dd18                 | _do_find_goto
0dd18     03 4A 05 F6 | 	mov	COUNT_, #3
0dd1c     A8 00 A0 FD | 	call	#pushregs_
0dd20     24 F0 07 F1 | 	add	ptra, #36
0dd24                 | _do_find_goto_enter
0dd24     6A 00 00 FF 
0dd28     64 E4 05 F1 | 	add	objptr, ##54372
0dd2c     F2 1E 02 FB | 	rdlong	local01, objptr
0dd30     0F 21 02 F6 | 	mov	local02, local01
0dd34     01 20 66 F0 | 	shl	local02, #1
0dd38     0F 21 02 F1 | 	add	local02, local01
0dd3c     02 20 66 F0 | 	shl	local02, #2
0dd40     03 00 00 FF 
0dd44     04 E4 85 F1 | 	sub	objptr, ##1540
0dd48     F2 20 02 F1 | 	add	local02, objptr
0dd4c     04 20 06 F1 | 	add	local02, #4
0dd50     10 21 02 FB | 	rdlong	local02, local02
0dd54     A7 20 62 FC | 	wrlong	local02, fp
0dd58     03 00 00 FF 
0dd5c     08 E4 05 F1 | 	add	objptr, ##1544
0dd60     F2 22 02 FB | 	rdlong	local03, objptr
0dd64     6A 00 00 FF 
0dd68     68 E4 85 F1 | 	sub	objptr, ##54376
0dd6c     04 4E 05 F1 | 	add	fp, #4
0dd70     A7 22 62 FC | 	wrlong	local03, fp
0dd74     04 4E 85 F1 | 	sub	fp, #4
0dd78                 | ' 
0dd78                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0dd78                 | '  ' print "find goto"                                                                     'print gotoline 
0dd78                 | ' gotoptr=programstart
0dd78                 | ' do
0dd78                 | LR__1090
0dd78     0C 4E 05 F1 | 	add	fp, #12
0dd7c     A7 12 02 F6 | 	mov	arg01, fp
0dd80     08 4E 85 F1 | 	sub	fp, #8
0dd84     A7 14 02 FB | 	rdlong	arg02, fp
0dd88     04 4E 85 F1 | 	sub	fp, #4
0dd8c     18 16 06 F6 | 	mov	arg03, #24
0dd90     0B 00 00 FF 
0dd94     C0 E4 05 F1 | 	add	objptr, ##5824
0dd98     3C D5 B0 FD | 	call	#_psram_spin2_read1
0dd9c     0B 00 00 FF 
0dda0     C0 E4 85 F1 | 	sub	objptr, ##5824
0dda4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0dda4                 | '   if gotoheader(0)<>$FFFFFFFF then
0dda4     0C 4E 05 F1 | 	add	fp, #12
0dda8     A7 22 02 FB | 	rdlong	local03, fp
0ddac     0C 4E 85 F1 | 	sub	fp, #12
0ddb0     FF FF 7F FF 
0ddb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0ddb8     24 00 90 AD |  if_e	jmp	#LR__1091
0ddbc     04 4E 05 F1 | 	add	fp, #4
0ddc0     A7 22 02 FB | 	rdlong	local03, fp
0ddc4     04 4E 05 F1 | 	add	fp, #4
0ddc8     A7 22 62 FC | 	wrlong	local03, fp
0ddcc     18 4E 05 F1 | 	add	fp, #24
0ddd0     A7 22 02 FB | 	rdlong	local03, fp
0ddd4     1C 4E 85 F1 | 	sub	fp, #28
0ddd8     A7 22 62 FC | 	wrlong	local03, fp
0dddc     04 4E 85 F1 | 	sub	fp, #4
0dde0                 | LR__1091
0dde0     20 4E 05 F1 | 	add	fp, #32
0dde4     A7 22 02 FB | 	rdlong	local03, fp
0dde8     20 4E 85 F1 | 	sub	fp, #32
0ddec     FF FF 3F FF 
0ddf0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0ddf4     0C 4E 05 51 |  if_ne	add	fp, #12
0ddf8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ddfc     0C 4E 85 51 |  if_ne	sub	fp, #12
0de00     FF FF 7F 5F 
0de04     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0de08     18 00 90 AD |  if_e	jmp	#LR__1092
0de0c     0C 4E 05 F1 | 	add	fp, #12
0de10     A7 22 02 FB | 	rdlong	local03, fp
0de14     0C 4E 85 F1 | 	sub	fp, #12
0de18     A7 20 02 FB | 	rdlong	local02, fp
0de1c     10 23 0A F2 | 	cmp	local03, local02 wz
0de20     54 FF 9F 5D |  if_ne	jmp	#LR__1090
0de24                 | LR__1092
0de24                 | ' 
0de24                 | ' if gotoheader(0)=gotoline then
0de24     0C 4E 05 F1 | 	add	fp, #12
0de28     A7 22 02 FB | 	rdlong	local03, fp
0de2c     0C 4E 85 F1 | 	sub	fp, #12
0de30     A7 1E 02 FB | 	rdlong	local01, fp
0de34     0F 23 0A F2 | 	cmp	local03, local01 wz
0de38     D8 00 90 5D |  if_ne	jmp	#LR__1093
0de3c     6A 00 00 FF 
0de40     64 E4 05 F1 | 	add	objptr, ##54372
0de44     F2 1E 02 FB | 	rdlong	local01, objptr
0de48     0F 21 02 F6 | 	mov	local02, local01
0de4c     01 20 66 F0 | 	shl	local02, #1
0de50     0F 21 02 F1 | 	add	local02, local01
0de54     02 20 66 F0 | 	shl	local02, #2
0de58     03 00 00 FF 
0de5c     04 E4 85 F1 | 	sub	objptr, ##1540
0de60     F2 20 02 F1 | 	add	local02, objptr
0de64     08 4E 05 F1 | 	add	fp, #8
0de68     A7 22 02 FB | 	rdlong	local03, fp
0de6c     10 23 62 FC | 	wrlong	local03, local02
0de70     03 00 00 FF 
0de74     04 E4 05 F1 | 	add	objptr, ##1540
0de78     F2 1E 02 FB | 	rdlong	local01, objptr
0de7c     0F 21 02 F6 | 	mov	local02, local01
0de80     01 20 66 F0 | 	shl	local02, #1
0de84     0F 21 02 F1 | 	add	local02, local01
0de88     02 20 66 F0 | 	shl	local02, #2
0de8c     03 00 00 FF 
0de90     04 E4 85 F1 | 	sub	objptr, ##1540
0de94     F2 20 02 F1 | 	add	local02, objptr
0de98     08 20 06 F1 | 	add	local02, #8
0de9c     10 9D 68 FC | 	wrlong	#78, local02
0dea0     03 00 00 FF 
0dea4     04 E4 05 F1 | 	add	objptr, ##1540
0dea8     F2 20 02 FB | 	rdlong	local02, objptr
0deac     10 13 02 F6 | 	mov	arg01, local02
0deb0     01 12 66 F0 | 	shl	arg01, #1
0deb4     10 13 02 F1 | 	add	arg01, local02
0deb8     02 12 66 F0 | 	shl	arg01, #2
0debc     03 00 00 FF 
0dec0     04 E4 85 F1 | 	sub	objptr, ##1540
0dec4     F2 12 02 F1 | 	add	arg01, objptr
0dec8     12 00 00 FF 
0decc     3C E5 05 F1 | 	add	objptr, ##9532
0ded0     F2 14 02 FB | 	rdlong	arg02, objptr
0ded4     02 22 06 F6 | 	mov	local03, #2
0ded8     10 23 02 F1 | 	add	local03, local02
0dedc     14 00 00 FF 
0dee0     54 E5 85 F1 | 	sub	objptr, ##10580
0dee4     F2 16 02 FB | 	rdlong	arg03, objptr
0dee8     0B 23 02 FD | 	qmul	local03, arg03
0deec     08 4E 85 F1 | 	sub	fp, #8
0def0     59 00 00 FF 
0def4     88 E5 85 F1 | 	sub	objptr, ##45960
0def8     18 22 62 FD | 	getqx	local03
0defc     11 15 02 F1 | 	add	arg02, local03
0df00     70 D4 B0 FD | 	call	#_psram_spin2_write
0df04     0B 00 00 FF 
0df08     C0 E4 85 F1 | 	sub	objptr, ##5824
0df0c     18 FD BF FD | 	call	#_do_fast_goto
0df10     08 00 90 FD | 	jmp	#LR__1094
0df14                 | LR__1093
0df14     26 12 06 F6 | 	mov	arg01, #38
0df18     3C A8 B0 FD | 	call	#_printerror
0df1c                 | LR__1094
0df1c     A7 F0 03 F6 | 	mov	ptra, fp
0df20     B2 00 A0 FD | 	call	#popregs_
0df24                 | _do_find_goto_ret
0df24     2D 00 64 FD | 	ret
0df28                 | 
0df28                 | ' 
0df28                 | ' sub do_slow_goto
0df28                 | _do_slow_goto
0df28                 | _do_slow_goto_ret
0df28     2D 00 64 FD | 	ret
0df2c                 | 
0df2c                 | ' 
0df2c                 | ' '----------------------- Error processing
0df2c                 | ' 
0df2c                 | ' sub do_error
0df2c                 | _do_error
0df2c     01 4A 05 F6 | 	mov	COUNT_, #1
0df30     A8 00 A0 FD | 	call	#pushregs_
0df34     6A 00 00 FF 
0df38     64 E4 05 F1 | 	add	objptr, ##54372
0df3c     F2 18 02 FB | 	rdlong	arg04, objptr
0df40     0C 17 02 F6 | 	mov	arg03, arg04
0df44     01 16 66 F0 | 	shl	arg03, #1
0df48     0C 17 02 F1 | 	add	arg03, arg04
0df4c     02 16 66 F0 | 	shl	arg03, #2
0df50     03 00 00 FF 
0df54     04 E4 85 F1 | 	sub	objptr, ##1540
0df58     F2 16 02 F1 | 	add	arg03, objptr
0df5c     0B 1F 02 FB | 	rdlong	local01, arg03
0df60                 | ' r=compiledline(lineptr_e).result.uresult
0df60                 | ' print "Error ";r;": ";errors$(r)
0df60     00 12 06 F6 | 	mov	arg01, #0
0df64     67 00 00 FF 
0df68     60 E4 85 F1 | 	sub	objptr, ##52832
0df6c     60 38 B1 FD | 	call	#__system___getiolock_0472
0df70     FD 12 02 F6 | 	mov	arg01, result1
0df74     C8 DE B0 FD | 	call	#__system___lockmem
0df78     5D 01 00 FF 
0df7c     34 14 06 F6 | 	mov	arg02, ##@LR__4891
0df80     00 12 06 F6 | 	mov	arg01, #0
0df84     00 16 06 F6 | 	mov	arg03, #0
0df88     B8 EB B0 FD | 	call	#__system___basic_print_string
0df8c     00 12 06 F6 | 	mov	arg01, #0
0df90     0F 15 02 F6 | 	mov	arg02, local01
0df94     00 16 06 F6 | 	mov	arg03, #0
0df98     0A 18 06 F6 | 	mov	arg04, #10
0df9c     28 EC B0 FD | 	call	#__system___basic_print_unsigned
0dfa0     5D 01 00 FF 
0dfa4     3B 14 06 F6 | 	mov	arg02, ##@LR__4892
0dfa8     00 12 06 F6 | 	mov	arg01, #0
0dfac     00 16 06 F6 | 	mov	arg03, #0
0dfb0     90 EB B0 FD | 	call	#__system___basic_print_string
0dfb4     02 1E 66 F0 | 	shl	local01, #2
0dfb8     65 00 00 FF 
0dfbc     60 E4 05 F1 | 	add	objptr, ##51808
0dfc0     F2 1E 02 F1 | 	add	local01, objptr
0dfc4     0F 15 02 FB | 	rdlong	arg02, local01
0dfc8     00 12 06 F6 | 	mov	arg01, #0
0dfcc     00 16 06 F6 | 	mov	arg03, #0
0dfd0     65 00 00 FF 
0dfd4     60 E4 85 F1 | 	sub	objptr, ##51808
0dfd8     68 EB B0 FD | 	call	#__system___basic_print_string
0dfdc     00 12 06 F6 | 	mov	arg01, #0
0dfe0     0A 14 06 F6 | 	mov	arg02, #10
0dfe4     00 16 06 F6 | 	mov	arg03, #0
0dfe8     00 EB B0 FD | 	call	#__system___basic_print_char
0dfec     00 12 06 F6 | 	mov	arg01, #0
0dff0     DC 37 B1 FD | 	call	#__system___getiolock_0472
0dff4     FD 00 68 FC | 	wrlong	#0, result1
0dff8     A7 F0 03 F6 | 	mov	ptra, fp
0dffc     B2 00 A0 FD | 	call	#popregs_
0e000                 | _do_error_ret
0e000     2D 00 64 FD | 	ret
0e004                 | 
0e004                 | ' 
0e004                 | ' 
0e004                 | ' '------------------ Assigning to a variable  
0e004                 | ' 
0e004                 | ' function  convertstring(psaddr as ulong) as string
0e004                 | _convertstring
0e004     04 4A 05 F6 | 	mov	COUNT_, #4
0e008     A8 00 A0 FD | 	call	#pushregs_
0e00c     09 1F 02 F6 | 	mov	local01, arg01
0e010     D8 A9 B0 FD | 	call	#_pslpeek
0e014     FD 20 02 F6 | 	mov	local02, result1
0e018     5D 01 00 FF 
0e01c     3E 22 06 F6 | 	mov	local03, ##@LR__4893
0e020                 | ' 'print "in convertstring: psaddr=";psaddr
0e020                 | ' l=pslpeek(psaddr)
0e020                 | ' 'print "in convertstring: len=";l
0e020                 | ' s="" 
0e020                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0e020     01 24 06 F6 | 	mov	local04, #1
0e024     01 20 06 F1 | 	add	local02, #1
0e028                 | LR__1100
0e028     10 25 52 F2 | 	cmps	local04, local02 wc
0e02c     30 00 90 3D |  if_ae	jmp	#LR__1101
0e030     0F 13 02 F6 | 	mov	arg01, local01
0e034     03 12 06 F1 | 	add	arg01, #3
0e038     12 13 02 F1 | 	add	arg01, local04
0e03c     54 A9 B0 FD | 	call	#_pspeek
0e040     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0e044     00 00 B1 FD | 	call	#__system__Chr_S
0e048     FD 14 02 F6 | 	mov	arg02, result1
0e04c     11 13 02 F6 | 	mov	arg01, local03
0e050     48 DE B0 FD | 	call	#__system___string_concat
0e054     FD 22 02 F6 | 	mov	local03, result1
0e058     01 24 06 F1 | 	add	local04, #1
0e05c     C8 FF 9F FD | 	jmp	#LR__1100
0e060                 | LR__1101
0e060                 | ' 'print "in convertstring: str=";s
0e060                 | ' return s
0e060     11 FB 01 F6 | 	mov	result1, local03
0e064     A7 F0 03 F6 | 	mov	ptra, fp
0e068     B2 00 A0 FD | 	call	#popregs_
0e06c                 | _convertstring_ret
0e06c     2D 00 64 FD | 	ret
0e070                 | 
0e070                 | ' 
0e070                 | ' sub do_assign
0e070                 | _do_assign
0e070     05 4A 05 F6 | 	mov	COUNT_, #5
0e074     A8 00 A0 FD | 	call	#pushregs_
0e078     44 F0 07 F1 | 	add	ptra, #68
0e07c     6A 00 00 FF 
0e080     64 E4 05 F1 | 	add	objptr, ##54372
0e084     F2 16 02 FB | 	rdlong	arg03, objptr
0e088     0B 15 02 F6 | 	mov	arg02, arg03
0e08c     01 14 66 F0 | 	shl	arg02, #1
0e090     0B 15 02 F1 | 	add	arg02, arg03
0e094     02 14 66 F0 | 	shl	arg02, #2
0e098     03 00 00 FF 
0e09c     04 E4 85 F1 | 	sub	objptr, ##1540
0e0a0     F2 14 02 F1 | 	add	arg02, objptr
0e0a4     0A 15 02 FB | 	rdlong	arg02, arg02
0e0a8     18 4E 05 F1 | 	add	fp, #24
0e0ac     A7 14 62 FC | 	wrlong	arg02, fp
0e0b0                 | ' 
0e0b0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0e0b0                 | ' 
0e0b0                 | ' if variables(varnum).vartype<array_no_type then 
0e0b0     18 4E 85 F1 | 	sub	fp, #24
0e0b4     04 14 66 F0 | 	shl	arg02, #4
0e0b8     32 00 00 FF 
0e0bc     74 E4 85 F1 | 	sub	objptr, ##25716
0e0c0     F2 14 02 F1 | 	add	arg02, objptr
0e0c4     0C 14 06 F1 | 	add	arg02, #12
0e0c8     0A 17 02 FB | 	rdlong	arg03, arg02
0e0cc     00 17 16 F2 | 	cmp	arg03, #256 wc
0e0d0     34 00 00 FF 
0e0d4     EC E5 85 F1 | 	sub	objptr, ##27116
0e0d8     18 01 90 3D |  if_ae	jmp	#LR__1110
0e0dc     A8 BF BF FD | 	call	#_pop
0e0e0     A7 FA 61 FC | 	wrlong	result1, fp
0e0e4     04 4E 05 F1 | 	add	fp, #4
0e0e8     A7 FC 61 FC | 	wrlong	result2, fp
0e0ec     04 4E 05 F1 | 	add	fp, #4
0e0f0     A7 FE 61 FC | 	wrlong	result3, fp
0e0f4     08 4E 85 F1 | 	sub	fp, #8
0e0f8     A7 16 02 FB | 	rdlong	arg03, fp
0e0fc     04 4E 05 F1 | 	add	fp, #4
0e100     A7 14 02 FB | 	rdlong	arg02, fp
0e104     14 4E 05 F1 | 	add	fp, #20
0e108     A7 12 02 FB | 	rdlong	arg01, fp
0e10c     04 12 66 F0 | 	shl	arg01, #4
0e110     34 00 00 FF 
0e114     EC E5 05 F1 | 	add	objptr, ##27116
0e118     F2 12 02 F1 | 	add	arg01, objptr
0e11c     04 12 06 F1 | 	add	arg01, #4
0e120     09 17 62 FC | 	wrlong	arg03, arg01
0e124     A7 16 02 FB | 	rdlong	arg03, fp
0e128     04 16 66 F0 | 	shl	arg03, #4
0e12c     F2 16 02 F1 | 	add	arg03, objptr
0e130     08 16 06 F1 | 	add	arg03, #8
0e134     0B 15 62 FC | 	wrlong	arg02, arg03
0e138     A7 16 02 FB | 	rdlong	arg03, fp
0e13c     04 16 66 F0 | 	shl	arg03, #4
0e140     F2 16 02 F1 | 	add	arg03, objptr
0e144     10 4E 85 F1 | 	sub	fp, #16
0e148     A7 14 02 FB | 	rdlong	arg02, fp
0e14c     0C 16 06 F1 | 	add	arg03, #12
0e150     0B 15 62 FC | 	wrlong	arg02, arg03
0e154                 | '   t1=pop() 
0e154                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0e154                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0e154                 | '   if variables(varnum).vartype<>result_string2 then return
0e154     10 4E 05 F1 | 	add	fp, #16
0e158     A7 16 02 FB | 	rdlong	arg03, fp
0e15c     18 4E 85 F1 | 	sub	fp, #24
0e160     04 16 66 F0 | 	shl	arg03, #4
0e164     F2 16 02 F1 | 	add	arg03, objptr
0e168     0C 16 06 F1 | 	add	arg03, #12
0e16c     0B 17 02 FB | 	rdlong	arg03, arg03
0e170     2B 16 0E F2 | 	cmp	arg03, #43 wz
0e174     34 00 00 FF 
0e178     EC E5 85 F1 | 	sub	objptr, ##27116
0e17c     E4 04 90 5D |  if_ne	jmp	#LR__1133
0e180     18 4E 05 F1 | 	add	fp, #24
0e184     A7 16 02 FB | 	rdlong	arg03, fp
0e188     0B 1F 02 F6 | 	mov	local01, arg03
0e18c     04 1E 66 F0 | 	shl	local01, #4
0e190     34 00 00 FF 
0e194     EC E5 05 F1 | 	add	objptr, ##27116
0e198     F2 1E 02 F1 | 	add	local01, objptr
0e19c     18 4E 85 F1 | 	sub	fp, #24
0e1a0     04 16 66 F0 | 	shl	arg03, #4
0e1a4     F2 16 02 F1 | 	add	arg03, objptr
0e1a8     04 16 06 F1 | 	add	arg03, #4
0e1ac     0B 13 02 FB | 	rdlong	arg01, arg03
0e1b0     34 00 00 FF 
0e1b4     EC E5 85 F1 | 	sub	objptr, ##27116
0e1b8     48 FE BF FD | 	call	#_convertstring
0e1bc     04 1E 06 F1 | 	add	local01, #4
0e1c0     0F FB 61 FC | 	wrlong	result1, local01
0e1c4     18 4E 05 F1 | 	add	fp, #24
0e1c8     A7 1E 02 FB | 	rdlong	local01, fp
0e1cc     18 4E 85 F1 | 	sub	fp, #24
0e1d0     04 1E 66 F0 | 	shl	local01, #4
0e1d4     34 00 00 FF 
0e1d8     EC E5 05 F1 | 	add	objptr, ##27116
0e1dc     F2 1E 02 F1 | 	add	local01, objptr
0e1e0     0C 1E 06 F1 | 	add	local01, #12
0e1e4     0F 3F 68 FC | 	wrlong	#31, local01
0e1e8                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0e1e8                 | '   variables(varnum).vartype=result_string
0e1e8                 | '   return
0e1e8     34 00 00 FF 
0e1ec     EC E5 85 F1 | 	sub	objptr, ##27116
0e1f0     70 04 90 FD | 	jmp	#LR__1133
0e1f4                 | LR__1110
0e1f4                 | ' for i=0 to 2 : arrid(i)=0 : next i
0e1f4     1C 4E 05 F1 | 	add	fp, #28
0e1f8     A7 00 68 FC | 	wrlong	#0, fp
0e1fc     97 16 48 FB | 	callpa	#(@LR__1112-@LR__1111)>>2,fcache_load_ptr_
0e200                 | LR__1111
0e200     A7 1E 02 FB | 	rdlong	local01, fp
0e204     02 1E 66 F0 | 	shl	local01, #2
0e208     18 4E 05 F1 | 	add	fp, #24
0e20c     A7 1E 02 F1 | 	add	local01, fp
0e210     0F 01 68 FC | 	wrlong	#0, local01
0e214     18 4E 85 F1 | 	sub	fp, #24
0e218     A7 1E 02 FB | 	rdlong	local01, fp
0e21c     01 1E 06 F1 | 	add	local01, #1
0e220     A7 1E 62 FC | 	wrlong	local01, fp
0e224     03 1E 16 F2 | 	cmp	local01, #3 wc
0e228     D4 FF 9F CD |  if_b	jmp	#LR__1111
0e22c                 | LR__1112
0e22c     6A 00 00 FF 
0e230     64 E4 05 F1 | 	add	objptr, ##54372
0e234     F2 16 02 FB | 	rdlong	arg03, objptr
0e238     0B 1F 02 F6 | 	mov	local01, arg03
0e23c     01 1E 66 F0 | 	shl	local01, #1
0e240     0B 1F 02 F1 | 	add	local01, arg03
0e244     02 1E 66 F0 | 	shl	local01, #2
0e248     03 00 00 FF 
0e24c     04 E4 85 F1 | 	sub	objptr, ##1540
0e250     F2 1E 02 F1 | 	add	local01, objptr
0e254     04 1E 06 F1 | 	add	local01, #4
0e258     0F 21 02 FB | 	rdlong	local02, local01
0e25c     04 4E 05 F1 | 	add	fp, #4
0e260     A7 20 62 FC | 	wrlong	local02, fp
0e264     20 4E 85 F1 | 	sub	fp, #32
0e268     67 00 00 FF 
0e26c     60 E4 85 F1 | 	sub	objptr, ##52832
0e270     14 BE BF FD | 	call	#_pop
0e274     A7 FA 61 FC | 	wrlong	result1, fp
0e278     04 4E 05 F1 | 	add	fp, #4
0e27c     A7 FC 61 FC | 	wrlong	result2, fp
0e280     04 4E 05 F1 | 	add	fp, #4
0e284     A7 FE 61 FC | 	wrlong	result3, fp
0e288                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0e288                 | ' t1=pop() ' var value
0e288                 | ' if numpar>0 then
0e288     18 4E 05 F1 | 	add	fp, #24
0e28c     A7 22 02 FB | 	rdlong	local03, fp
0e290     20 4E 85 F1 | 	sub	fp, #32
0e294     01 22 16 F2 | 	cmp	local03, #1 wc
0e298     78 00 90 CD |  if_b	jmp	#LR__1115
0e29c                 | '   for i=numpar to 1 step -1
0e29c     20 4E 05 F1 | 	add	fp, #32
0e2a0     A7 24 0A FB | 	rdlong	local04, fp wz
0e2a4     04 4E 85 F1 | 	sub	fp, #4
0e2a8     A7 24 62 FC | 	wrlong	local04, fp
0e2ac     1C 4E 85 F1 | 	sub	fp, #28
0e2b0     60 00 90 AD |  if_e	jmp	#LR__1114
0e2b4                 | LR__1113
0e2b4     D0 BD BF FD | 	call	#_pop
0e2b8     0C 4E 05 F1 | 	add	fp, #12
0e2bc     A7 FA 61 FC | 	wrlong	result1, fp
0e2c0     04 4E 05 F1 | 	add	fp, #4
0e2c4     A7 FC 61 FC | 	wrlong	result2, fp
0e2c8     04 4E 05 F1 | 	add	fp, #4
0e2cc     A7 FE 61 FC | 	wrlong	result3, fp
0e2d0     08 4E 05 F1 | 	add	fp, #8
0e2d4     A7 22 02 FB | 	rdlong	local03, fp
0e2d8     01 22 86 F1 | 	sub	local03, #1
0e2dc     02 22 66 F0 | 	shl	local03, #2
0e2e0     18 4E 05 F1 | 	add	fp, #24
0e2e4     A7 22 02 F1 | 	add	local03, fp
0e2e8     28 4E 85 F1 | 	sub	fp, #40
0e2ec     A7 12 02 F6 | 	mov	arg01, fp
0e2f0     0C 4E 85 F1 | 	sub	fp, #12
0e2f4     E4 43 B0 FD | 	call	#_converttoint
0e2f8     11 FB 61 FC | 	wrlong	result1, local03
0e2fc     1C 4E 05 F1 | 	add	fp, #28
0e300     A7 24 02 FB | 	rdlong	local04, fp
0e304     01 24 8E F1 | 	sub	local04, #1 wz
0e308     A7 24 62 FC | 	wrlong	local04, fp
0e30c     1C 4E 85 F1 | 	sub	fp, #28
0e310     A0 FF 9F 5D |  if_ne	jmp	#LR__1113
0e314                 | LR__1114
0e314                 | LR__1115
0e314     18 4E 05 F1 | 	add	fp, #24
0e318     A7 1E 02 FB | 	rdlong	local01, fp
0e31c     04 1E 66 F0 | 	shl	local01, #4
0e320     34 00 00 FF 
0e324     EC E5 05 F1 | 	add	objptr, ##27116
0e328     F2 1E 02 F1 | 	add	local01, objptr
0e32c     04 1E 06 F1 | 	add	local01, #4
0e330     0F 13 02 FB | 	rdlong	arg01, local01
0e334     0C 4E 05 F1 | 	add	fp, #12
0e338     A7 12 62 FC | 	wrlong	arg01, fp
0e33c     24 4E 85 F1 | 	sub	fp, #36
0e340     34 00 00 FF 
0e344     EC E5 85 F1 | 	sub	objptr, ##27116
0e348     A0 A6 B0 FD | 	call	#_pslpeek
0e34c     FD 24 32 F9 | 	getword	local04, result1, #0
0e350     28 4E 05 F1 | 	add	fp, #40
0e354     A7 24 62 FC | 	wrlong	local04, fp
0e358     04 4E 85 F1 | 	sub	fp, #4
0e35c     A7 12 02 FB | 	rdlong	arg01, fp
0e360     24 4E 85 F1 | 	sub	fp, #36
0e364     02 12 06 F1 | 	add	arg01, #2
0e368     28 A6 B0 FD | 	call	#_pspeek
0e36c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e370     2C 4E 05 F1 | 	add	fp, #44
0e374     A7 FA 61 FC | 	wrlong	result1, fp
0e378                 | ' esize=pspeek(arrptr+2)
0e378                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0e378     08 4E 85 F1 | 	sub	fp, #8
0e37c     A7 12 02 FB | 	rdlong	arg01, fp
0e380     24 4E 85 F1 | 	sub	fp, #36
0e384     04 12 06 F1 | 	add	arg01, #4
0e388     60 A6 B0 FD | 	call	#_pslpeek
0e38c     FD 24 02 F6 | 	mov	local04, result1
0e390     34 4E 05 F1 | 	add	fp, #52
0e394     A7 1E 02 FB | 	rdlong	local01, fp
0e398     34 4E 85 F1 | 	sub	fp, #52
0e39c     12 1F 12 F2 | 	cmp	local01, local04 wc
0e3a0     54 00 90 3D |  if_ae	jmp	#LR__1116
0e3a4     24 4E 05 F1 | 	add	fp, #36
0e3a8     A7 12 02 FB | 	rdlong	arg01, fp
0e3ac     24 4E 85 F1 | 	sub	fp, #36
0e3b0     08 12 06 F1 | 	add	arg01, #8
0e3b4     34 A6 B0 FD | 	call	#_pslpeek
0e3b8     FD 1E 02 F6 | 	mov	local01, result1
0e3bc     38 4E 05 F1 | 	add	fp, #56
0e3c0     A7 24 02 FB | 	rdlong	local04, fp
0e3c4     38 4E 85 F1 | 	sub	fp, #56
0e3c8     0F 25 12 F2 | 	cmp	local04, local01 wc
0e3cc     28 00 90 3D |  if_ae	jmp	#LR__1116
0e3d0     24 4E 05 F1 | 	add	fp, #36
0e3d4     A7 12 02 FB | 	rdlong	arg01, fp
0e3d8     24 4E 85 F1 | 	sub	fp, #36
0e3dc     0C 12 06 F1 | 	add	arg01, #12
0e3e0     08 A6 B0 FD | 	call	#_pslpeek
0e3e4     3C 4E 05 F1 | 	add	fp, #60
0e3e8     A7 24 02 FB | 	rdlong	local04, fp
0e3ec     3C 4E 85 F1 | 	sub	fp, #60
0e3f0     FD 24 12 F2 | 	cmp	local04, result1 wc
0e3f4     0C 00 90 CD |  if_b	jmp	#LR__1117
0e3f8                 | LR__1116
0e3f8     31 12 06 F6 | 	mov	arg01, #49
0e3fc     58 A3 B0 FD | 	call	#_printerror
0e400     60 02 90 FD | 	jmp	#LR__1133
0e404                 | LR__1117
0e404     24 4E 05 F1 | 	add	fp, #36
0e408     A7 12 02 FB | 	rdlong	arg01, fp
0e40c     09 25 02 F6 | 	mov	local04, arg01
0e410     10 24 06 F1 | 	add	local04, #16
0e414     24 4E 85 F1 | 	sub	fp, #36
0e418     04 12 06 F1 | 	add	arg01, #4
0e41c     CC A5 B0 FD | 	call	#_pslpeek
0e420     FD 1E 02 F6 | 	mov	local01, result1
0e424     38 4E 05 F1 | 	add	fp, #56
0e428     A7 20 02 FB | 	rdlong	local02, fp
0e42c     10 1F 02 FD | 	qmul	local01, local02
0e430     04 4E 85 F1 | 	sub	fp, #4
0e434     A7 22 02 FB | 	rdlong	local03, fp
0e438     10 4E 85 F1 | 	sub	fp, #16
0e43c     A7 12 02 FB | 	rdlong	arg01, fp
0e440     24 4E 85 F1 | 	sub	fp, #36
0e444     08 12 06 F1 | 	add	arg01, #8
0e448     18 20 62 FD | 	getqx	local02
0e44c     10 23 02 F1 | 	add	local03, local02
0e450     98 A5 B0 FD | 	call	#_pslpeek
0e454     FD 20 02 F6 | 	mov	local02, result1
0e458     24 4E 05 F1 | 	add	fp, #36
0e45c     A7 12 02 FB | 	rdlong	arg01, fp
0e460     24 4E 85 F1 | 	sub	fp, #36
0e464     04 12 06 F1 | 	add	arg01, #4
0e468     80 A5 B0 FD | 	call	#_pslpeek
0e46c     FD 20 02 FD | 	qmul	local02, result1
0e470     3C 4E 05 F1 | 	add	fp, #60
0e474     A7 20 02 FB | 	rdlong	local02, fp
0e478     18 1E 62 FD | 	getqx	local01
0e47c     10 1F 02 FD | 	qmul	local01, local02
0e480     10 4E 85 F1 | 	sub	fp, #16
0e484     A7 20 02 FB | 	rdlong	local02, fp
0e488     18 1E 62 FD | 	getqx	local01
0e48c     0F 23 02 F1 | 	add	local03, local01
0e490     11 21 02 FD | 	qmul	local02, local03
0e494     04 4E 05 F1 | 	add	fp, #4
0e498                 | ' 
0e498                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0e498                 | ' select case arrtype
0e498     18 22 62 FD | 	getqx	local03
0e49c     11 25 02 F1 | 	add	local04, local03
0e4a0     A7 24 62 FC | 	wrlong	local04, fp
0e4a4     08 4E 85 F1 | 	sub	fp, #8
0e4a8     A7 26 02 FB | 	rdlong	local05, fp
0e4ac     28 4E 85 F1 | 	sub	fp, #40
0e4b0     00 27 86 F1 | 	sub	local05, #256
0e4b4     0C 26 26 F3 | 	fle	local05, #12
0e4b8     30 26 62 FD | 	jmprel	local05
0e4bc                 | LR__1118
0e4bc     30 00 90 FD | 	jmp	#LR__1119
0e4c0     58 00 90 FD | 	jmp	#LR__1120
0e4c4     6C 00 90 FD | 	jmp	#LR__1121
0e4c8     80 00 90 FD | 	jmp	#LR__1122
0e4cc     B0 00 90 FD | 	jmp	#LR__1123
0e4d0     E0 00 90 FD | 	jmp	#LR__1124
0e4d4     F4 00 90 FD | 	jmp	#LR__1125
0e4d8     08 01 90 FD | 	jmp	#LR__1126
0e4dc     1C 01 90 FD | 	jmp	#LR__1127
0e4e0     30 01 90 FD | 	jmp	#LR__1128
0e4e4     44 01 90 FD | 	jmp	#LR__1129
0e4e8     58 01 90 FD | 	jmp	#LR__1130
0e4ec     6C 01 90 FD | 	jmp	#LR__1131
0e4f0                 | LR__1119
0e4f0     A7 12 02 F6 | 	mov	arg01, fp
0e4f4     30 4E 05 F1 | 	add	fp, #48
0e4f8     A7 14 02 FB | 	rdlong	arg02, fp
0e4fc     30 4E 85 F1 | 	sub	fp, #48
0e500     0C 16 06 F6 | 	mov	arg03, #12
0e504     0B 00 00 FF 
0e508     C0 E4 05 F1 | 	add	objptr, ##5824
0e50c     64 CE B0 FD | 	call	#_psram_spin2_write
0e510     0B 00 00 FF 
0e514     C0 E4 85 F1 | 	sub	objptr, ##5824
0e518     48 01 90 FD | 	jmp	#LR__1132
0e51c                 | LR__1120
0e51c     30 4E 05 F1 | 	add	fp, #48
0e520     A7 12 02 FB | 	rdlong	arg01, fp
0e524     30 4E 85 F1 | 	sub	fp, #48
0e528     A7 14 02 FB | 	rdlong	arg02, fp
0e52c     1C A4 B0 FD | 	call	#_pspoke
0e530     30 01 90 FD | 	jmp	#LR__1132
0e534                 | LR__1121
0e534     30 4E 05 F1 | 	add	fp, #48
0e538     A7 12 02 FB | 	rdlong	arg01, fp
0e53c     30 4E 85 F1 | 	sub	fp, #48
0e540     A7 14 02 FB | 	rdlong	arg02, fp
0e544     04 A4 B0 FD | 	call	#_pspoke
0e548     18 01 90 FD | 	jmp	#LR__1132
0e54c                 | LR__1122
0e54c     30 4E 05 F1 | 	add	fp, #48
0e550     A7 12 02 FB | 	rdlong	arg01, fp
0e554     30 4E 85 F1 | 	sub	fp, #48
0e558     A7 14 02 FB | 	rdlong	arg02, fp
0e55c     EC A3 B0 FD | 	call	#_pspoke
0e560     30 4E 05 F1 | 	add	fp, #48
0e564     A7 12 02 FB | 	rdlong	arg01, fp
0e568     30 4E 85 F1 | 	sub	fp, #48
0e56c     01 12 06 F1 | 	add	arg01, #1
0e570     A7 14 02 FB | 	rdlong	arg02, fp
0e574     08 14 46 F0 | 	shr	arg02, #8
0e578     D0 A3 B0 FD | 	call	#_pspoke
0e57c     E4 00 90 FD | 	jmp	#LR__1132
0e580                 | LR__1123
0e580     30 4E 05 F1 | 	add	fp, #48
0e584     A7 12 02 FB | 	rdlong	arg01, fp
0e588     30 4E 85 F1 | 	sub	fp, #48
0e58c     A7 14 02 FB | 	rdlong	arg02, fp
0e590     B8 A3 B0 FD | 	call	#_pspoke
0e594     30 4E 05 F1 | 	add	fp, #48
0e598     A7 12 02 FB | 	rdlong	arg01, fp
0e59c     30 4E 85 F1 | 	sub	fp, #48
0e5a0     01 12 06 F1 | 	add	arg01, #1
0e5a4     A7 14 02 FB | 	rdlong	arg02, fp
0e5a8     08 14 46 F0 | 	shr	arg02, #8
0e5ac     9C A3 B0 FD | 	call	#_pspoke
0e5b0     B0 00 90 FD | 	jmp	#LR__1132
0e5b4                 | LR__1124
0e5b4     30 4E 05 F1 | 	add	fp, #48
0e5b8     A7 12 02 FB | 	rdlong	arg01, fp
0e5bc     30 4E 85 F1 | 	sub	fp, #48
0e5c0     A7 14 02 FB | 	rdlong	arg02, fp
0e5c4     F4 A2 B0 FD | 	call	#_pslpoke
0e5c8     98 00 90 FD | 	jmp	#LR__1132
0e5cc                 | LR__1125
0e5cc     30 4E 05 F1 | 	add	fp, #48
0e5d0     A7 12 02 FB | 	rdlong	arg01, fp
0e5d4     30 4E 85 F1 | 	sub	fp, #48
0e5d8     A7 14 02 FB | 	rdlong	arg02, fp
0e5dc     DC A2 B0 FD | 	call	#_pslpoke
0e5e0     80 00 90 FD | 	jmp	#LR__1132
0e5e4                 | LR__1126
0e5e4     30 4E 05 F1 | 	add	fp, #48
0e5e8     A7 12 02 FB | 	rdlong	arg01, fp
0e5ec     30 4E 85 F1 | 	sub	fp, #48
0e5f0     A7 14 02 FB | 	rdlong	arg02, fp
0e5f4     C4 A2 B0 FD | 	call	#_pslpoke
0e5f8     68 00 90 FD | 	jmp	#LR__1132
0e5fc                 | LR__1127
0e5fc     30 4E 05 F1 | 	add	fp, #48
0e600     A7 12 02 FB | 	rdlong	arg01, fp
0e604     30 4E 85 F1 | 	sub	fp, #48
0e608     A7 14 02 FB | 	rdlong	arg02, fp
0e60c     AC A2 B0 FD | 	call	#_pslpoke
0e610     50 00 90 FD | 	jmp	#LR__1132
0e614                 | LR__1128
0e614     30 4E 05 F1 | 	add	fp, #48
0e618     A7 12 02 FB | 	rdlong	arg01, fp
0e61c     30 4E 85 F1 | 	sub	fp, #48
0e620     A7 14 02 FB | 	rdlong	arg02, fp
0e624     94 A2 B0 FD | 	call	#_pslpoke
0e628     38 00 90 FD | 	jmp	#LR__1132
0e62c                 | LR__1129
0e62c     30 4E 05 F1 | 	add	fp, #48
0e630     A7 12 02 FB | 	rdlong	arg01, fp
0e634     30 4E 85 F1 | 	sub	fp, #48
0e638     A7 14 02 FB | 	rdlong	arg02, fp
0e63c     7C A2 B0 FD | 	call	#_pslpoke
0e640     20 00 90 FD | 	jmp	#LR__1132
0e644                 | LR__1130
0e644     30 4E 05 F1 | 	add	fp, #48
0e648     A7 12 02 FB | 	rdlong	arg01, fp
0e64c     30 4E 85 F1 | 	sub	fp, #48
0e650     A7 14 02 FB | 	rdlong	arg02, fp
0e654     64 A2 B0 FD | 	call	#_pslpoke
0e658     08 00 90 FD | 	jmp	#LR__1132
0e65c                 | LR__1131
0e65c     2F 12 06 F6 | 	mov	arg01, #47
0e660     F4 A0 B0 FD | 	call	#_printerror
0e664                 | LR__1132
0e664                 | LR__1133
0e664     A7 F0 03 F6 | 	mov	ptra, fp
0e668     B2 00 A0 FD | 	call	#popregs_
0e66c                 | _do_assign_ret
0e66c     2D 00 64 FD | 	ret
0e670                 | 
0e670                 | ' 
0e670                 | ' 
0e670                 | ' ' --------------------- Read a variable and push to the stack
0e670                 | ' 
0e670                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0e670                 | ' 
0e670                 | ' sub do_getvar
0e670                 | _do_getvar
0e670     04 4A 05 F6 | 	mov	COUNT_, #4
0e674     A8 00 A0 FD | 	call	#pushregs_
0e678     3C F0 07 F1 | 	add	ptra, #60
0e67c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0e67c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0e67c     6A 00 00 FF 
0e680     64 E4 05 F1 | 	add	objptr, ##54372
0e684     F2 1E 02 FB | 	rdlong	local01, objptr
0e688     0F 17 02 F6 | 	mov	arg03, local01
0e68c     01 16 66 F0 | 	shl	arg03, #1
0e690     0F 17 02 F1 | 	add	arg03, local01
0e694     02 16 66 F0 | 	shl	arg03, #2
0e698     03 00 00 FF 
0e69c     04 E4 85 F1 | 	sub	objptr, ##1540
0e6a0     F2 16 02 F1 | 	add	arg03, objptr
0e6a4     04 16 06 F1 | 	add	arg03, #4
0e6a8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0e6ac     67 00 00 FF 
0e6b0     60 E4 85 F1 | 	sub	objptr, ##52832
0e6b4     C4 00 90 5D |  if_ne	jmp	#LR__1141
0e6b8     6A 00 00 FF 
0e6bc     64 E4 05 F1 | 	add	objptr, ##54372
0e6c0     F2 1E 02 FB | 	rdlong	local01, objptr
0e6c4     0F 13 02 F6 | 	mov	arg01, local01
0e6c8     01 12 66 F0 | 	shl	arg01, #1
0e6cc     0F 13 02 F1 | 	add	arg01, local01
0e6d0     02 12 66 F0 | 	shl	arg01, #2
0e6d4     03 00 00 FF 
0e6d8     04 E4 85 F1 | 	sub	objptr, ##1540
0e6dc     F2 12 02 F1 | 	add	arg01, objptr
0e6e0     09 1F 02 FB | 	rdlong	local01, arg01
0e6e4     04 1E 66 F0 | 	shl	local01, #4
0e6e8     32 00 00 FF 
0e6ec     74 E4 85 F1 | 	sub	objptr, ##25716
0e6f0     F2 1E 02 F1 | 	add	local01, objptr
0e6f4     04 1E 06 F1 | 	add	local01, #4
0e6f8     0F 13 02 FB | 	rdlong	arg01, local01
0e6fc     04 1E 06 F1 | 	add	local01, #4
0e700     0F 1F 02 FB | 	rdlong	local01, local01
0e704     A7 12 62 FC | 	wrlong	arg01, fp
0e708     04 4E 05 F1 | 	add	fp, #4
0e70c     A7 1E 62 FC | 	wrlong	local01, fp
0e710     35 00 00 FF 
0e714     78 E4 05 F1 | 	add	objptr, ##27256
0e718     F2 1E 02 FB | 	rdlong	local01, objptr
0e71c     0F 13 02 F6 | 	mov	arg01, local01
0e720     01 12 66 F0 | 	shl	arg01, #1
0e724     0F 13 02 F1 | 	add	arg01, local01
0e728     02 12 66 F0 | 	shl	arg01, #2
0e72c     03 00 00 FF 
0e730     04 E4 85 F1 | 	sub	objptr, ##1540
0e734     F2 12 02 F1 | 	add	arg01, objptr
0e738     09 1F 02 FB | 	rdlong	local01, arg01
0e73c     04 1E 66 F0 | 	shl	local01, #4
0e740     32 00 00 FF 
0e744     74 E4 85 F1 | 	sub	objptr, ##25716
0e748     F2 1E 02 F1 | 	add	local01, objptr
0e74c     0C 1E 06 F1 | 	add	local01, #12
0e750     0F 1F 02 FB | 	rdlong	local01, local01
0e754     04 4E 05 F1 | 	add	fp, #4
0e758     A7 1E 62 FC | 	wrlong	local01, fp
0e75c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0e75c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0e75c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0e75c     08 4E 85 F1 | 	sub	fp, #8
0e760     00 1F 16 F2 | 	cmp	local01, #256 wc
0e764     34 00 00 FF 
0e768     EC E5 85 F1 | 	sub	objptr, ##27116
0e76c     0C 00 90 3D |  if_ae	jmp	#LR__1140
0e770     A7 12 02 F6 | 	mov	arg01, fp
0e774     A8 B9 BF FD | 	call	#_push
0e778     A0 04 90 FD | 	jmp	#LR__1162
0e77c                 | LR__1140
0e77c                 | LR__1141
0e77c     6A 00 00 FF 
0e780     64 E4 05 F1 | 	add	objptr, ##54372
0e784     F2 16 02 FB | 	rdlong	arg03, objptr
0e788     0B 15 02 F6 | 	mov	arg02, arg03
0e78c     01 14 66 F0 | 	shl	arg02, #1
0e790     0B 15 02 F1 | 	add	arg02, arg03
0e794     02 14 66 F0 | 	shl	arg02, #2
0e798     03 00 00 FF 
0e79c     04 E4 85 F1 | 	sub	objptr, ##1540
0e7a0     F2 14 02 F1 | 	add	arg02, objptr
0e7a4     0A 17 02 FB | 	rdlong	arg03, arg02
0e7a8     04 16 66 F0 | 	shl	arg03, #4
0e7ac     32 00 00 FF 
0e7b0     74 E4 85 F1 | 	sub	objptr, ##25716
0e7b4     F2 16 02 F1 | 	add	arg03, objptr
0e7b8     04 16 06 F1 | 	add	arg03, #4
0e7bc     0B 13 02 FB | 	rdlong	arg01, arg03
0e7c0     0C 4E 05 F1 | 	add	fp, #12
0e7c4     A7 12 62 FC | 	wrlong	arg01, fp
0e7c8     0C 4E 85 F1 | 	sub	fp, #12
0e7cc     34 00 00 FF 
0e7d0     EC E5 85 F1 | 	sub	objptr, ##27116
0e7d4     14 A2 B0 FD | 	call	#_pslpeek
0e7d8     FD FA 31 F9 | 	getword	result1, result1, #0
0e7dc     10 4E 05 F1 | 	add	fp, #16
0e7e0     A7 FA 61 FC | 	wrlong	result1, fp
0e7e4     6A 00 00 FF 
0e7e8     64 E4 05 F1 | 	add	objptr, ##54372
0e7ec     F2 16 02 FB | 	rdlong	arg03, objptr
0e7f0     0B 15 02 F6 | 	mov	arg02, arg03
0e7f4     01 14 66 F0 | 	shl	arg02, #1
0e7f8     0B 15 02 F1 | 	add	arg02, arg03
0e7fc     02 14 66 F0 | 	shl	arg02, #2
0e800     03 00 00 FF 
0e804     04 E4 85 F1 | 	sub	objptr, ##1540
0e808     F2 14 02 F1 | 	add	arg02, objptr
0e80c     04 14 06 F1 | 	add	arg02, #4
0e810     0A 17 02 FB | 	rdlong	arg03, arg02
0e814     04 4E 05 F1 | 	add	fp, #4
0e818     A7 16 62 FC | 	wrlong	arg03, fp
0e81c     08 4E 85 F1 | 	sub	fp, #8
0e820     A7 12 02 FB | 	rdlong	arg01, fp
0e824     0C 4E 85 F1 | 	sub	fp, #12
0e828     02 12 06 F1 | 	add	arg01, #2
0e82c     67 00 00 FF 
0e830     60 E4 85 F1 | 	sub	objptr, ##52832
0e834     5C A1 B0 FD | 	call	#_pspeek
0e838     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e83c     18 4E 05 F1 | 	add	fp, #24
0e840     A7 FA 61 FC | 	wrlong	result1, fp
0e844     0C 4E 85 F1 | 	sub	fp, #12
0e848     A7 12 02 FB | 	rdlong	arg01, fp
0e84c     0C 4E 85 F1 | 	sub	fp, #12
0e850     04 12 06 F1 | 	add	arg01, #4
0e854     94 A1 B0 FD | 	call	#_pslpeek
0e858     1C 4E 05 F1 | 	add	fp, #28
0e85c     A7 FA 61 FC | 	wrlong	result1, fp
0e860     10 4E 85 F1 | 	sub	fp, #16
0e864     A7 12 02 FB | 	rdlong	arg01, fp
0e868     0C 4E 85 F1 | 	sub	fp, #12
0e86c     08 12 06 F1 | 	add	arg01, #8
0e870     78 A1 B0 FD | 	call	#_pslpeek
0e874     20 4E 05 F1 | 	add	fp, #32
0e878     A7 FA 61 FC | 	wrlong	result1, fp
0e87c     14 4E 85 F1 | 	sub	fp, #20
0e880     A7 12 02 FB | 	rdlong	arg01, fp
0e884     0C 4E 85 F1 | 	sub	fp, #12
0e888     0C 12 06 F1 | 	add	arg01, #12
0e88c     5C A1 B0 FD | 	call	#_pslpeek
0e890     24 4E 05 F1 | 	add	fp, #36
0e894     A7 FA 61 FC | 	wrlong	result1, fp
0e898                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0e898                 | ' esize=pspeek(arrptr+2)
0e898                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0e898                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0e898                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0e898                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0e898     10 4E 85 F1 | 	sub	fp, #16
0e89c     A7 16 02 FB | 	rdlong	arg03, fp
0e8a0     14 4E 85 F1 | 	sub	fp, #20
0e8a4     03 16 16 F2 | 	cmp	arg03, #3 wc
0e8a8     38 00 90 CD |  if_b	jmp	#LR__1142
0e8ac     D8 B7 BF FD | 	call	#_pop
0e8b0     FF 16 02 F6 | 	mov	arg03, result3
0e8b4     A7 FA 61 FC | 	wrlong	result1, fp
0e8b8     04 4E 05 F1 | 	add	fp, #4
0e8bc     A7 FC 61 FC | 	wrlong	result2, fp
0e8c0     04 4E 05 F1 | 	add	fp, #4
0e8c4     A7 16 62 FC | 	wrlong	arg03, fp
0e8c8     08 4E 85 F1 | 	sub	fp, #8
0e8cc     A7 12 02 F6 | 	mov	arg01, fp
0e8d0     08 3E B0 FD | 	call	#_converttoint
0e8d4     30 4E 05 F1 | 	add	fp, #48
0e8d8     A7 FA 61 FC | 	wrlong	result1, fp
0e8dc     30 4E 85 F1 | 	sub	fp, #48
0e8e0     0C 00 90 FD | 	jmp	#LR__1143
0e8e4                 | LR__1142
0e8e4     30 4E 05 F1 | 	add	fp, #48
0e8e8     A7 00 68 FC | 	wrlong	#0, fp
0e8ec     30 4E 85 F1 | 	sub	fp, #48
0e8f0                 | LR__1143
0e8f0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0e8f0     14 4E 05 F1 | 	add	fp, #20
0e8f4     A7 16 02 FB | 	rdlong	arg03, fp
0e8f8     14 4E 85 F1 | 	sub	fp, #20
0e8fc     02 16 16 F2 | 	cmp	arg03, #2 wc
0e900     38 00 90 CD |  if_b	jmp	#LR__1144
0e904     80 B7 BF FD | 	call	#_pop
0e908     FF 16 02 F6 | 	mov	arg03, result3
0e90c     A7 FA 61 FC | 	wrlong	result1, fp
0e910     04 4E 05 F1 | 	add	fp, #4
0e914     A7 FC 61 FC | 	wrlong	result2, fp
0e918     04 4E 05 F1 | 	add	fp, #4
0e91c     A7 16 62 FC | 	wrlong	arg03, fp
0e920     08 4E 85 F1 | 	sub	fp, #8
0e924     A7 12 02 F6 | 	mov	arg01, fp
0e928     B0 3D B0 FD | 	call	#_converttoint
0e92c     2C 4E 05 F1 | 	add	fp, #44
0e930     A7 FA 61 FC | 	wrlong	result1, fp
0e934     2C 4E 85 F1 | 	sub	fp, #44
0e938     0C 00 90 FD | 	jmp	#LR__1145
0e93c                 | LR__1144
0e93c     2C 4E 05 F1 | 	add	fp, #44
0e940     A7 00 68 FC | 	wrlong	#0, fp
0e944     2C 4E 85 F1 | 	sub	fp, #44
0e948                 | LR__1145
0e948                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0e948     14 4E 05 F1 | 	add	fp, #20
0e94c     A7 16 02 FB | 	rdlong	arg03, fp
0e950     14 4E 85 F1 | 	sub	fp, #20
0e954     01 16 16 F2 | 	cmp	arg03, #1 wc
0e958     38 00 90 CD |  if_b	jmp	#LR__1146
0e95c     28 B7 BF FD | 	call	#_pop
0e960     FF 16 02 F6 | 	mov	arg03, result3
0e964     A7 FA 61 FC | 	wrlong	result1, fp
0e968     04 4E 05 F1 | 	add	fp, #4
0e96c     A7 FC 61 FC | 	wrlong	result2, fp
0e970     04 4E 05 F1 | 	add	fp, #4
0e974     A7 16 62 FC | 	wrlong	arg03, fp
0e978     08 4E 85 F1 | 	sub	fp, #8
0e97c     A7 12 02 F6 | 	mov	arg01, fp
0e980     58 3D B0 FD | 	call	#_converttoint
0e984     28 4E 05 F1 | 	add	fp, #40
0e988     A7 FA 61 FC | 	wrlong	result1, fp
0e98c     28 4E 85 F1 | 	sub	fp, #40
0e990     0C 00 90 FD | 	jmp	#LR__1147
0e994                 | LR__1146
0e994     28 4E 05 F1 | 	add	fp, #40
0e998     A7 00 68 FC | 	wrlong	#0, fp
0e99c     28 4E 85 F1 | 	sub	fp, #40
0e9a0                 | LR__1147
0e9a0     0C 4E 05 F1 | 	add	fp, #12
0e9a4     A7 20 02 FB | 	rdlong	local02, fp
0e9a8     1C 4E 05 F1 | 	add	fp, #28
0e9ac     A7 22 02 FB | 	rdlong	local03, fp
0e9b0     04 4E 05 F1 | 	add	fp, #4
0e9b4     A7 FC 01 FB | 	rdlong	result2, fp
0e9b8     10 4E 85 F1 | 	sub	fp, #16
0e9bc     A7 FE 01 FB | 	rdlong	result3, fp
0e9c0     FF FC 01 FD | 	qmul	result2, result3
0e9c4     10 20 06 F1 | 	add	local02, #16
0e9c8     14 4E 05 F1 | 	add	fp, #20
0e9cc     A7 FC 01 FB | 	rdlong	result2, fp
0e9d0     18 FA 61 FD | 	getqx	result1
0e9d4     FF FC 01 FD | 	qmul	result2, result3
0e9d8     FD 22 02 F1 | 	add	local03, result1
0e9dc     10 4E 85 F1 | 	sub	fp, #16
0e9e0     A7 FE 01 FB | 	rdlong	result3, fp
0e9e4     18 FC 61 FD | 	getqx	result2
0e9e8     FF FC 01 FD | 	qmul	result2, result3
0e9ec     08 4E 85 F1 | 	sub	fp, #8
0e9f0     A7 FE 01 FB | 	rdlong	result3, fp
0e9f4     18 FC 61 FD | 	getqx	result2
0e9f8     FE 22 02 F1 | 	add	local03, result2
0e9fc     FF 22 02 FD | 	qmul	local03, result3
0ea00     1C 4E 05 F1 | 	add	fp, #28
0ea04                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ea04                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0ea04                 | ' 
0ea04                 | ' select case vartype
0ea04     18 FC 61 FD | 	getqx	result2
0ea08     FE 20 02 F1 | 	add	local02, result2
0ea0c     A7 20 62 FC | 	wrlong	local02, fp
0ea10     24 4E 85 F1 | 	sub	fp, #36
0ea14     A7 24 02 FB | 	rdlong	local04, fp
0ea18     10 4E 85 F1 | 	sub	fp, #16
0ea1c     00 25 86 F1 | 	sub	local04, #256
0ea20     0C 24 26 F3 | 	fle	local04, #12
0ea24     30 24 62 FD | 	jmprel	local04
0ea28                 | LR__1148
0ea28     30 00 90 FD | 	jmp	#LR__1149
0ea2c     58 00 90 FD | 	jmp	#LR__1150
0ea30     8C 00 90 FD | 	jmp	#LR__1151
0ea34     AC 00 90 FD | 	jmp	#LR__1152
0ea38     E8 00 90 FD | 	jmp	#LR__1153
0ea3c     08 01 90 FD | 	jmp	#LR__1154
0ea40     24 01 90 FD | 	jmp	#LR__1155
0ea44     40 01 90 FD | 	jmp	#LR__1156
0ea48     50 01 90 FD | 	jmp	#LR__1157
0ea4c     60 01 90 FD | 	jmp	#LR__1158
0ea50     7C 01 90 FD | 	jmp	#LR__1159
0ea54     8C 01 90 FD | 	jmp	#LR__1160
0ea58     B8 01 90 FD | 	jmp	#LR__1161
0ea5c                 | LR__1149
0ea5c     A7 12 02 F6 | 	mov	arg01, fp
0ea60     34 4E 05 F1 | 	add	fp, #52
0ea64     A7 14 02 FB | 	rdlong	arg02, fp
0ea68     34 4E 85 F1 | 	sub	fp, #52
0ea6c     0C 16 06 F6 | 	mov	arg03, #12
0ea70     0B 00 00 FF 
0ea74     C0 E4 05 F1 | 	add	objptr, ##5824
0ea78     5C C8 B0 FD | 	call	#_psram_spin2_read1
0ea7c     0B 00 00 FF 
0ea80     C0 E4 85 F1 | 	sub	objptr, ##5824
0ea84     8C 01 90 FD | 	jmp	#LR__1161
0ea88                 | LR__1150
0ea88     08 4E 05 F1 | 	add	fp, #8
0ea8c     A7 38 68 FC | 	wrlong	#28, fp
0ea90     2C 4E 05 F1 | 	add	fp, #44
0ea94     A7 12 02 FB | 	rdlong	arg01, fp
0ea98     34 4E 85 F1 | 	sub	fp, #52
0ea9c     F4 9E B0 FD | 	call	#_pspeek
0eaa0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eaa4     A7 FA 61 FC | 	wrlong	result1, fp
0eaa8     80 FA 15 F2 | 	cmp	result1, #128 wc
0eaac     00 1F 66 36 |  if_ae	neg	local01, #256
0eab0     A7 22 02 3B |  if_ae	rdlong	local03, fp
0eab4     11 1F 42 35 |  if_ae	or	local01, local03
0eab8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0eabc     54 01 90 FD | 	jmp	#LR__1161
0eac0                 | LR__1151
0eac0     08 4E 05 F1 | 	add	fp, #8
0eac4     A7 3A 68 FC | 	wrlong	#29, fp
0eac8     2C 4E 05 F1 | 	add	fp, #44
0eacc     A7 12 02 FB | 	rdlong	arg01, fp
0ead0     34 4E 85 F1 | 	sub	fp, #52
0ead4     BC 9E B0 FD | 	call	#_pspeek
0ead8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0eadc     A7 FA 61 FC | 	wrlong	result1, fp
0eae0     30 01 90 FD | 	jmp	#LR__1161
0eae4                 | LR__1152
0eae4     08 4E 05 F1 | 	add	fp, #8
0eae8     A7 38 68 FC | 	wrlong	#28, fp
0eaec     2C 4E 05 F1 | 	add	fp, #44
0eaf0     A7 12 02 FB | 	rdlong	arg01, fp
0eaf4     34 4E 85 F1 | 	sub	fp, #52
0eaf8     F0 9E B0 FD | 	call	#_pslpeek
0eafc     FD FA 31 F9 | 	getword	result1, result1, #0
0eb00     A7 FA 61 FC | 	wrlong	result1, fp
0eb04     40 00 00 FF 
0eb08     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0eb0c     FF 7F 00 3F 
0eb10     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0eb14     A7 22 02 3B |  if_ae	rdlong	local03, fp
0eb18     11 1F 42 35 |  if_ae	or	local01, local03
0eb1c     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0eb20     F0 00 90 FD | 	jmp	#LR__1161
0eb24                 | LR__1153
0eb24     08 4E 05 F1 | 	add	fp, #8
0eb28     A7 3A 68 FC | 	wrlong	#29, fp
0eb2c     2C 4E 05 F1 | 	add	fp, #44
0eb30     A7 12 02 FB | 	rdlong	arg01, fp
0eb34     34 4E 85 F1 | 	sub	fp, #52
0eb38     B0 9E B0 FD | 	call	#_pslpeek
0eb3c     FD FA 31 F9 | 	getword	result1, result1, #0
0eb40     A7 FA 61 FC | 	wrlong	result1, fp
0eb44     CC 00 90 FD | 	jmp	#LR__1161
0eb48                 | LR__1154
0eb48     08 4E 05 F1 | 	add	fp, #8
0eb4c     A7 38 68 FC | 	wrlong	#28, fp
0eb50     2C 4E 05 F1 | 	add	fp, #44
0eb54     A7 12 02 FB | 	rdlong	arg01, fp
0eb58     34 4E 85 F1 | 	sub	fp, #52
0eb5c     8C 9E B0 FD | 	call	#_pslpeek
0eb60     A7 FA 61 FC | 	wrlong	result1, fp
0eb64     AC 00 90 FD | 	jmp	#LR__1161
0eb68                 | LR__1155
0eb68     08 4E 05 F1 | 	add	fp, #8
0eb6c     A7 3A 68 FC | 	wrlong	#29, fp
0eb70     2C 4E 05 F1 | 	add	fp, #44
0eb74     A7 12 02 FB | 	rdlong	arg01, fp
0eb78     34 4E 85 F1 | 	sub	fp, #52
0eb7c     6C 9E B0 FD | 	call	#_pslpeek
0eb80     A7 FA 61 FC | 	wrlong	result1, fp
0eb84     8C 00 90 FD | 	jmp	#LR__1161
0eb88                 | LR__1156
0eb88     08 4E 05 F1 | 	add	fp, #8
0eb8c     A7 FE 69 FC | 	wrlong	#255, fp
0eb90     08 4E 85 F1 | 	sub	fp, #8
0eb94     A7 60 68 FC | 	wrlong	#48, fp
0eb98     78 00 90 FD | 	jmp	#LR__1161
0eb9c                 | LR__1157
0eb9c     08 4E 05 F1 | 	add	fp, #8
0eba0     A7 FE 69 FC | 	wrlong	#255, fp
0eba4     08 4E 85 F1 | 	sub	fp, #8
0eba8     A7 60 68 FC | 	wrlong	#48, fp
0ebac     64 00 90 FD | 	jmp	#LR__1161
0ebb0                 | LR__1158
0ebb0     08 4E 05 F1 | 	add	fp, #8
0ebb4     A7 3C 68 FC | 	wrlong	#30, fp
0ebb8     2C 4E 05 F1 | 	add	fp, #44
0ebbc     A7 12 02 FB | 	rdlong	arg01, fp
0ebc0     34 4E 85 F1 | 	sub	fp, #52
0ebc4     24 9E B0 FD | 	call	#_pslpeek
0ebc8     A7 FA 61 FC | 	wrlong	result1, fp
0ebcc     44 00 90 FD | 	jmp	#LR__1161
0ebd0                 | LR__1159
0ebd0     08 4E 05 F1 | 	add	fp, #8
0ebd4     A7 FE 69 FC | 	wrlong	#255, fp
0ebd8     08 4E 85 F1 | 	sub	fp, #8
0ebdc     A7 60 68 FC | 	wrlong	#48, fp
0ebe0     30 00 90 FD | 	jmp	#LR__1161
0ebe4                 | LR__1160
0ebe4     08 4E 05 F1 | 	add	fp, #8
0ebe8     A7 3E 68 FC | 	wrlong	#31, fp
0ebec     2C 4E 05 F1 | 	add	fp, #44
0ebf0     A7 12 02 FB | 	rdlong	arg01, fp
0ebf4     34 4E 85 F1 | 	sub	fp, #52
0ebf8     F0 9D B0 FD | 	call	#_pslpeek
0ebfc     A7 FA 61 FC | 	wrlong	result1, fp
0ec00     00 04 00 FF 
0ec04     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0ec08     08 4E 05 31 |  if_ae	add	fp, #8
0ec0c     A7 56 68 3C |  if_ae	wrlong	#43, fp
0ec10     08 4E 85 31 |  if_ae	sub	fp, #8
0ec14                 | LR__1161
0ec14     A7 12 02 F6 | 	mov	arg01, fp
0ec18     04 B5 BF FD | 	call	#_push
0ec1c                 | LR__1162
0ec1c     A7 F0 03 F6 | 	mov	ptra, fp
0ec20     B2 00 A0 FD | 	call	#popregs_
0ec24                 | _do_getvar_ret
0ec24     2D 00 64 FD | 	ret
0ec28                 | 
0ec28                 | ' 
0ec28                 | ' 
0ec28                 | ' sub do_getaddr
0ec28                 | _do_getaddr
0ec28     01 4A 05 F6 | 	mov	COUNT_, #1
0ec2c     A8 00 A0 FD | 	call	#pushregs_
0ec30     38 F0 07 F1 | 	add	ptra, #56
0ec34                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0ec34                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0ec34     6A 00 00 FF 
0ec38     64 E4 05 F1 | 	add	objptr, ##54372
0ec3c     F2 12 02 FB | 	rdlong	arg01, objptr
0ec40     09 FD 01 F6 | 	mov	result2, arg01
0ec44     01 FC 65 F0 | 	shl	result2, #1
0ec48     09 FD 01 F1 | 	add	result2, arg01
0ec4c     02 FC 65 F0 | 	shl	result2, #2
0ec50     03 00 00 FF 
0ec54     04 E4 85 F1 | 	sub	objptr, ##1540
0ec58     F2 FC 01 F1 | 	add	result2, objptr
0ec5c     04 FC 05 F1 | 	add	result2, #4
0ec60     FE FC 09 FB | 	rdlong	result2, result2 wz
0ec64     67 00 00 FF 
0ec68     60 E4 85 F1 | 	sub	objptr, ##52832
0ec6c     C4 00 90 5D |  if_ne	jmp	#LR__1170
0ec70     6A 00 00 FF 
0ec74     64 E4 05 F1 | 	add	objptr, ##54372
0ec78     F2 12 02 FB | 	rdlong	arg01, objptr
0ec7c     09 FD 01 F6 | 	mov	result2, arg01
0ec80     01 FC 65 F0 | 	shl	result2, #1
0ec84     09 FD 01 F1 | 	add	result2, arg01
0ec88     02 FC 65 F0 | 	shl	result2, #2
0ec8c     03 00 00 FF 
0ec90     04 E4 85 F1 | 	sub	objptr, ##1540
0ec94     F2 FC 01 F1 | 	add	result2, objptr
0ec98     FE 12 02 FB | 	rdlong	arg01, result2
0ec9c     04 12 66 F0 | 	shl	arg01, #4
0eca0     32 00 00 FF 
0eca4     74 E4 85 F1 | 	sub	objptr, ##25716
0eca8     F2 12 02 F1 | 	add	arg01, objptr
0ecac     0C 12 06 F1 | 	add	arg01, #12
0ecb0     09 13 02 FB | 	rdlong	arg01, arg01
0ecb4     08 4E 05 F1 | 	add	fp, #8
0ecb8     A7 12 62 FC | 	wrlong	arg01, fp
0ecbc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ecbc                 | '    if t1.result_type>=array_no_type then goto 2200
0ecbc     08 4E 85 F1 | 	sub	fp, #8
0ecc0     00 13 16 F2 | 	cmp	arg01, #256 wc
0ecc4     34 00 00 FF 
0ecc8     EC E5 85 F1 | 	sub	objptr, ##27116
0eccc     64 00 90 3D |  if_ae	jmp	#LR__1171
0ecd0     6A 00 00 FF 
0ecd4     64 E4 05 F1 | 	add	objptr, ##54372
0ecd8     F2 12 02 FB | 	rdlong	arg01, objptr
0ecdc     09 FB 01 F6 | 	mov	result1, arg01
0ece0     01 FA 65 F0 | 	shl	result1, #1
0ece4     09 FB 01 F1 | 	add	result1, arg01
0ece8     02 FA 65 F0 | 	shl	result1, #2
0ecec     03 00 00 FF 
0ecf0     04 E4 85 F1 | 	sub	objptr, ##1540
0ecf4     F2 FA 01 F1 | 	add	result1, objptr
0ecf8     FD FA 01 FB | 	rdlong	result1, result1
0ecfc     04 FA 65 F0 | 	shl	result1, #4
0ed00     32 00 00 FF 
0ed04     74 E4 85 F1 | 	sub	objptr, ##25716
0ed08     F2 FA 01 F1 | 	add	result1, objptr
0ed0c     04 FA 05 F1 | 	add	result1, #4
0ed10     34 00 00 FF 
0ed14     EC E5 85 F1 | 	sub	objptr, ##27116
0ed18     A7 FA 61 FC | 	wrlong	result1, fp
0ed1c     08 4E 05 F1 | 	add	fp, #8
0ed20     A7 3A 68 FC | 	wrlong	#29, fp
0ed24     08 4E 85 F1 | 	sub	fp, #8
0ed28     A7 12 02 F6 | 	mov	arg01, fp
0ed2c     F0 B3 BF FD | 	call	#_push
0ed30                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0ed30                 | '   t1.result_type=result_uint
0ed30                 | '   push t1 : return
0ed30     D8 02 90 FD | 	jmp	#LR__1180
0ed34                 | LR__1170
0ed34                 | LR__1171
0ed34     6A 00 00 FF 
0ed38     64 E4 05 F1 | 	add	objptr, ##54372
0ed3c     F2 FE 01 FB | 	rdlong	result3, objptr
0ed40     FF 12 02 F6 | 	mov	arg01, result3
0ed44     01 12 66 F0 | 	shl	arg01, #1
0ed48     FF 12 02 F1 | 	add	arg01, result3
0ed4c     02 12 66 F0 | 	shl	arg01, #2
0ed50     03 00 00 FF 
0ed54     04 E4 85 F1 | 	sub	objptr, ##1540
0ed58     F2 12 02 F1 | 	add	arg01, objptr
0ed5c     09 13 02 FB | 	rdlong	arg01, arg01
0ed60     04 12 66 F0 | 	shl	arg01, #4
0ed64     32 00 00 FF 
0ed68     74 E4 85 F1 | 	sub	objptr, ##25716
0ed6c     F2 12 02 F1 | 	add	arg01, objptr
0ed70     04 12 06 F1 | 	add	arg01, #4
0ed74     09 13 02 FB | 	rdlong	arg01, arg01
0ed78     0C 4E 05 F1 | 	add	fp, #12
0ed7c     A7 12 62 FC | 	wrlong	arg01, fp
0ed80     0C 4E 85 F1 | 	sub	fp, #12
0ed84     34 00 00 FF 
0ed88     EC E5 85 F1 | 	sub	objptr, ##27116
0ed8c     5C 9C B0 FD | 	call	#_pslpeek
0ed90     FD FA 31 F9 | 	getword	result1, result1, #0
0ed94     10 4E 05 F1 | 	add	fp, #16
0ed98     A7 FA 61 FC | 	wrlong	result1, fp
0ed9c     6A 00 00 FF 
0eda0     64 E4 05 F1 | 	add	objptr, ##54372
0eda4     F2 FE 01 FB | 	rdlong	result3, objptr
0eda8     FF 12 02 F6 | 	mov	arg01, result3
0edac     01 12 66 F0 | 	shl	arg01, #1
0edb0     FF 12 02 F1 | 	add	arg01, result3
0edb4     02 12 66 F0 | 	shl	arg01, #2
0edb8     03 00 00 FF 
0edbc     04 E4 85 F1 | 	sub	objptr, ##1540
0edc0     F2 12 02 F1 | 	add	arg01, objptr
0edc4     04 12 06 F1 | 	add	arg01, #4
0edc8     09 13 02 FB | 	rdlong	arg01, arg01
0edcc     04 4E 05 F1 | 	add	fp, #4
0edd0     A7 12 62 FC | 	wrlong	arg01, fp
0edd4     08 4E 85 F1 | 	sub	fp, #8
0edd8     A7 12 02 FB | 	rdlong	arg01, fp
0eddc     0C 4E 85 F1 | 	sub	fp, #12
0ede0     02 12 06 F1 | 	add	arg01, #2
0ede4     67 00 00 FF 
0ede8     60 E4 85 F1 | 	sub	objptr, ##52832
0edec     A4 9B B0 FD | 	call	#_pspeek
0edf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
0edf4     18 4E 05 F1 | 	add	fp, #24
0edf8     A7 FA 61 FC | 	wrlong	result1, fp
0edfc     0C 4E 85 F1 | 	sub	fp, #12
0ee00     A7 12 02 FB | 	rdlong	arg01, fp
0ee04     0C 4E 85 F1 | 	sub	fp, #12
0ee08     04 12 06 F1 | 	add	arg01, #4
0ee0c     DC 9B B0 FD | 	call	#_pslpeek
0ee10     1C 4E 05 F1 | 	add	fp, #28
0ee14     A7 FA 61 FC | 	wrlong	result1, fp
0ee18     10 4E 85 F1 | 	sub	fp, #16
0ee1c     A7 12 02 FB | 	rdlong	arg01, fp
0ee20     0C 4E 85 F1 | 	sub	fp, #12
0ee24     08 12 06 F1 | 	add	arg01, #8
0ee28     C0 9B B0 FD | 	call	#_pslpeek
0ee2c     20 4E 05 F1 | 	add	fp, #32
0ee30     A7 FA 61 FC | 	wrlong	result1, fp
0ee34     14 4E 85 F1 | 	sub	fp, #20
0ee38     A7 12 02 FB | 	rdlong	arg01, fp
0ee3c     0C 4E 85 F1 | 	sub	fp, #12
0ee40     0C 12 06 F1 | 	add	arg01, #12
0ee44     A4 9B B0 FD | 	call	#_pslpeek
0ee48     24 4E 05 F1 | 	add	fp, #36
0ee4c     A7 FA 61 FC | 	wrlong	result1, fp
0ee50                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0ee50                 | ' esize=pspeek(arrptr+2)
0ee50                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0ee50                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0ee50                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0ee50                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0ee50     10 4E 85 F1 | 	sub	fp, #16
0ee54     A7 12 02 FB | 	rdlong	arg01, fp
0ee58     14 4E 85 F1 | 	sub	fp, #20
0ee5c     03 12 16 F2 | 	cmp	arg01, #3 wc
0ee60     34 00 90 CD |  if_b	jmp	#LR__1172
0ee64     20 B2 BF FD | 	call	#_pop
0ee68     A7 FA 61 FC | 	wrlong	result1, fp
0ee6c     04 4E 05 F1 | 	add	fp, #4
0ee70     A7 FC 61 FC | 	wrlong	result2, fp
0ee74     04 4E 05 F1 | 	add	fp, #4
0ee78     A7 FE 61 FC | 	wrlong	result3, fp
0ee7c     08 4E 85 F1 | 	sub	fp, #8
0ee80     A7 12 02 F6 | 	mov	arg01, fp
0ee84     54 38 B0 FD | 	call	#_converttoint
0ee88     30 4E 05 F1 | 	add	fp, #48
0ee8c     A7 FA 61 FC | 	wrlong	result1, fp
0ee90     30 4E 85 F1 | 	sub	fp, #48
0ee94     0C 00 90 FD | 	jmp	#LR__1173
0ee98                 | LR__1172
0ee98     30 4E 05 F1 | 	add	fp, #48
0ee9c     A7 00 68 FC | 	wrlong	#0, fp
0eea0     30 4E 85 F1 | 	sub	fp, #48
0eea4                 | LR__1173
0eea4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0eea4     14 4E 05 F1 | 	add	fp, #20
0eea8     A7 12 02 FB | 	rdlong	arg01, fp
0eeac     14 4E 85 F1 | 	sub	fp, #20
0eeb0     02 12 16 F2 | 	cmp	arg01, #2 wc
0eeb4     34 00 90 CD |  if_b	jmp	#LR__1174
0eeb8     CC B1 BF FD | 	call	#_pop
0eebc     A7 FA 61 FC | 	wrlong	result1, fp
0eec0     04 4E 05 F1 | 	add	fp, #4
0eec4     A7 FC 61 FC | 	wrlong	result2, fp
0eec8     04 4E 05 F1 | 	add	fp, #4
0eecc     A7 FE 61 FC | 	wrlong	result3, fp
0eed0     08 4E 85 F1 | 	sub	fp, #8
0eed4     A7 12 02 F6 | 	mov	arg01, fp
0eed8     00 38 B0 FD | 	call	#_converttoint
0eedc     2C 4E 05 F1 | 	add	fp, #44
0eee0     A7 FA 61 FC | 	wrlong	result1, fp
0eee4     2C 4E 85 F1 | 	sub	fp, #44
0eee8     0C 00 90 FD | 	jmp	#LR__1175
0eeec                 | LR__1174
0eeec     2C 4E 05 F1 | 	add	fp, #44
0eef0     A7 00 68 FC | 	wrlong	#0, fp
0eef4     2C 4E 85 F1 | 	sub	fp, #44
0eef8                 | LR__1175
0eef8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0eef8     14 4E 05 F1 | 	add	fp, #20
0eefc     A7 12 02 FB | 	rdlong	arg01, fp
0ef00     14 4E 85 F1 | 	sub	fp, #20
0ef04     01 12 16 F2 | 	cmp	arg01, #1 wc
0ef08     34 00 90 CD |  if_b	jmp	#LR__1176
0ef0c     78 B1 BF FD | 	call	#_pop
0ef10     A7 FA 61 FC | 	wrlong	result1, fp
0ef14     04 4E 05 F1 | 	add	fp, #4
0ef18     A7 FC 61 FC | 	wrlong	result2, fp
0ef1c     04 4E 05 F1 | 	add	fp, #4
0ef20     A7 FE 61 FC | 	wrlong	result3, fp
0ef24     08 4E 85 F1 | 	sub	fp, #8
0ef28     A7 12 02 F6 | 	mov	arg01, fp
0ef2c     AC 37 B0 FD | 	call	#_converttoint
0ef30     28 4E 05 F1 | 	add	fp, #40
0ef34     A7 FA 61 FC | 	wrlong	result1, fp
0ef38     28 4E 85 F1 | 	sub	fp, #40
0ef3c     0C 00 90 FD | 	jmp	#LR__1177
0ef40                 | LR__1176
0ef40     28 4E 05 F1 | 	add	fp, #40
0ef44     A7 00 68 FC | 	wrlong	#0, fp
0ef48     28 4E 85 F1 | 	sub	fp, #40
0ef4c                 | LR__1177
0ef4c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0ef4c                 | ' if numpar>0 then
0ef4c     14 4E 05 F1 | 	add	fp, #20
0ef50     A7 FE 01 FB | 	rdlong	result3, fp
0ef54     14 4E 85 F1 | 	sub	fp, #20
0ef58     01 FE 15 F2 | 	cmp	result3, #1 wc
0ef5c     8C 00 90 CD |  if_b	jmp	#LR__1178
0ef60     0C 4E 05 F1 | 	add	fp, #12
0ef64     A7 FC 01 FB | 	rdlong	result2, fp
0ef68     1C 4E 05 F1 | 	add	fp, #28
0ef6c     A7 FE 01 FB | 	rdlong	result3, fp
0ef70     04 4E 05 F1 | 	add	fp, #4
0ef74     A7 12 02 FB | 	rdlong	arg01, fp
0ef78     10 4E 85 F1 | 	sub	fp, #16
0ef7c     A7 FA 01 FB | 	rdlong	result1, fp
0ef80     FD 12 02 FD | 	qmul	arg01, result1
0ef84     10 FC 05 F1 | 	add	result2, #16
0ef88     14 4E 05 F1 | 	add	fp, #20
0ef8c     A7 1E 02 FB | 	rdlong	local01, fp
0ef90     18 12 62 FD | 	getqx	arg01
0ef94     FD 1E 02 FD | 	qmul	local01, result1
0ef98     09 FF 01 F1 | 	add	result3, arg01
0ef9c     10 4E 85 F1 | 	sub	fp, #16
0efa0     A7 1E 02 FB | 	rdlong	local01, fp
0efa4     18 FA 61 FD | 	getqx	result1
0efa8     0F FB 01 FD | 	qmul	result1, local01
0efac     08 4E 85 F1 | 	sub	fp, #8
0efb0     A7 1E 02 FB | 	rdlong	local01, fp
0efb4     18 FA 61 FD | 	getqx	result1
0efb8     FD FE 01 F1 | 	add	result3, result1
0efbc     0F FF 01 FD | 	qmul	result3, local01
0efc0     1C 4E 05 F1 | 	add	fp, #28
0efc4     18 1E 62 FD | 	getqx	local01
0efc8     0F FD 01 F1 | 	add	result2, local01
0efcc     A7 FC 61 FC | 	wrlong	result2, fp
0efd0     2C 4E 85 F1 | 	sub	fp, #44
0efd4     A7 3A 68 FC | 	wrlong	#29, fp
0efd8     2C 4E 05 F1 | 	add	fp, #44
0efdc     A7 1E 02 FB | 	rdlong	local01, fp
0efe0     34 4E 85 F1 | 	sub	fp, #52
0efe4     A7 1E 62 FC | 	wrlong	local01, fp
0efe8     18 00 90 FD | 	jmp	#LR__1179
0efec                 | LR__1178
0efec     08 4E 05 F1 | 	add	fp, #8
0eff0     A7 3A 68 FC | 	wrlong	#29, fp
0eff4     04 4E 05 F1 | 	add	fp, #4
0eff8     A7 1E 02 FB | 	rdlong	local01, fp
0effc     0C 4E 85 F1 | 	sub	fp, #12
0f000     A7 1E 62 FC | 	wrlong	local01, fp
0f004                 | LR__1179
0f004     A7 12 02 F6 | 	mov	arg01, fp
0f008     14 B1 BF FD | 	call	#_push
0f00c                 | LR__1180
0f00c     A7 F0 03 F6 | 	mov	ptra, fp
0f010     B2 00 A0 FD | 	call	#popregs_
0f014                 | _do_getaddr_ret
0f014     2D 00 64 FD | 	ret
0f018                 | 
0f018                 | ' 
0f018                 | ' 
0f018                 | ' 
0f018                 | ' 
0f018                 | ' '------------------------ Operators 
0f018                 | ' 
0f018                 | ' sub do_plus 
0f018                 | _do_plus
0f018     05 4A 05 F6 | 	mov	COUNT_, #5
0f01c     A8 00 A0 FD | 	call	#pushregs_
0f020     18 F0 07 F1 | 	add	ptra, #24
0f024     60 B0 BF FD | 	call	#_pop
0f028     FD 1E 02 F6 | 	mov	local01, result1
0f02c     FE 20 02 F6 | 	mov	local02, result2
0f030     FF 22 02 F6 | 	mov	local03, result3
0f034     0C 4E 05 F1 | 	add	fp, #12
0f038     A7 1E 62 FC | 	wrlong	local01, fp
0f03c     04 4E 05 F1 | 	add	fp, #4
0f040     A7 20 62 FC | 	wrlong	local02, fp
0f044     04 4E 05 F1 | 	add	fp, #4
0f048     A7 22 62 FC | 	wrlong	local03, fp
0f04c     14 4E 85 F1 | 	sub	fp, #20
0f050     34 B0 BF FD | 	call	#_pop
0f054     FF 22 02 F6 | 	mov	local03, result3
0f058     A7 FA 61 FC | 	wrlong	result1, fp
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 FC 61 FC | 	wrlong	result2, fp
0f064     04 4E 05 F1 | 	add	fp, #4
0f068     A7 22 62 FC | 	wrlong	local03, fp
0f06c                 | ' 
0f06c                 | ' t2=pop()
0f06c                 | ' t1=pop()
0f06c                 | ' 
0f06c                 | ' 
0f06c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0f06c     08 4E 85 F1 | 	sub	fp, #8
0f070     1D 22 0E F2 | 	cmp	local03, #29 wz
0f074     14 4E 05 A1 |  if_e	add	fp, #20
0f078     A7 24 02 AB |  if_e	rdlong	local04, fp
0f07c     14 4E 85 A1 |  if_e	sub	fp, #20
0f080     12 23 02 A6 |  if_e	mov	local03, local04
0f084     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f088     1C 00 90 5D |  if_ne	jmp	#LR__1190
0f08c     A7 1E 02 FB | 	rdlong	local01, fp
0f090     0C 4E 05 F1 | 	add	fp, #12
0f094     A7 20 02 FB | 	rdlong	local02, fp
0f098     0C 4E 85 F1 | 	sub	fp, #12
0f09c     10 1F 02 F1 | 	add	local01, local02
0f0a0     A7 1E 62 FC | 	wrlong	local01, fp
0f0a4     48 04 90 FD | 	jmp	#LR__1205
0f0a8                 | LR__1190
0f0a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0f0a8     08 4E 05 F1 | 	add	fp, #8
0f0ac     A7 1E 02 FB | 	rdlong	local01, fp
0f0b0     08 4E 85 F1 | 	sub	fp, #8
0f0b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f0b8     14 4E 05 A1 |  if_e	add	fp, #20
0f0bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0f0c0     14 4E 85 A1 |  if_e	sub	fp, #20
0f0c4     12 23 02 A6 |  if_e	mov	local03, local04
0f0c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f0cc     28 00 90 5D |  if_ne	jmp	#LR__1191
0f0d0     A7 1E 02 FB | 	rdlong	local01, fp
0f0d4     0C 4E 05 F1 | 	add	fp, #12
0f0d8     A7 20 02 FB | 	rdlong	local02, fp
0f0dc     0C 4E 85 F1 | 	sub	fp, #12
0f0e0     10 1F 02 F1 | 	add	local01, local02
0f0e4     A7 1E 62 FC | 	wrlong	local01, fp
0f0e8     08 4E 05 F1 | 	add	fp, #8
0f0ec     A7 38 68 FC | 	wrlong	#28, fp
0f0f0     08 4E 85 F1 | 	sub	fp, #8
0f0f4     F8 03 90 FD | 	jmp	#LR__1205
0f0f8                 | LR__1191
0f0f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f0f8     08 4E 05 F1 | 	add	fp, #8
0f0fc     A7 1E 02 FB | 	rdlong	local01, fp
0f100     08 4E 85 F1 | 	sub	fp, #8
0f104     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f108     14 4E 05 A1 |  if_e	add	fp, #20
0f10c     A7 24 02 AB |  if_e	rdlong	local04, fp
0f110     14 4E 85 A1 |  if_e	sub	fp, #20
0f114     12 23 02 A6 |  if_e	mov	local03, local04
0f118     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f11c     30 00 90 5D |  if_ne	jmp	#LR__1192
0f120     A7 12 02 FB | 	rdlong	arg01, fp
0f124     90 F4 B0 FD | 	call	#__system___float_fromuns
0f128     FD 12 02 F6 | 	mov	arg01, result1
0f12c     0C 4E 05 F1 | 	add	fp, #12
0f130     A7 14 02 FB | 	rdlong	arg02, fp
0f134     0C 4E 85 F1 | 	sub	fp, #12
0f138     B0 F4 B0 FD | 	call	#__system___float_add
0f13c     A7 FA 61 FC | 	wrlong	result1, fp
0f140     08 4E 05 F1 | 	add	fp, #8
0f144     A7 3C 68 FC | 	wrlong	#30, fp
0f148     08 4E 85 F1 | 	sub	fp, #8
0f14c     A0 03 90 FD | 	jmp	#LR__1205
0f150                 | LR__1192
0f150                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0f150     08 4E 05 F1 | 	add	fp, #8
0f154     A7 1E 02 FB | 	rdlong	local01, fp
0f158     08 4E 85 F1 | 	sub	fp, #8
0f15c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f160     14 4E 05 A1 |  if_e	add	fp, #20
0f164     A7 24 02 AB |  if_e	rdlong	local04, fp
0f168     14 4E 85 A1 |  if_e	sub	fp, #20
0f16c     12 23 02 A6 |  if_e	mov	local03, local04
0f170     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f174     1C 00 90 5D |  if_ne	jmp	#LR__1193
0f178     A7 1E 02 FB | 	rdlong	local01, fp
0f17c     0C 4E 05 F1 | 	add	fp, #12
0f180     A7 20 02 FB | 	rdlong	local02, fp
0f184     0C 4E 85 F1 | 	sub	fp, #12
0f188     10 1F 02 F1 | 	add	local01, local02
0f18c     A7 1E 62 FC | 	wrlong	local01, fp
0f190     5C 03 90 FD | 	jmp	#LR__1205
0f194                 | LR__1193
0f194                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0f194     08 4E 05 F1 | 	add	fp, #8
0f198     A7 1E 02 FB | 	rdlong	local01, fp
0f19c     08 4E 85 F1 | 	sub	fp, #8
0f1a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f1a4     14 4E 05 A1 |  if_e	add	fp, #20
0f1a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1ac     14 4E 85 A1 |  if_e	sub	fp, #20
0f1b0     12 23 02 A6 |  if_e	mov	local03, local04
0f1b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f1b8     1C 00 90 5D |  if_ne	jmp	#LR__1194
0f1bc     A7 1E 02 FB | 	rdlong	local01, fp
0f1c0     0C 4E 05 F1 | 	add	fp, #12
0f1c4     A7 20 02 FB | 	rdlong	local02, fp
0f1c8     0C 4E 85 F1 | 	sub	fp, #12
0f1cc     10 1F 02 F1 | 	add	local01, local02
0f1d0     A7 1E 62 FC | 	wrlong	local01, fp
0f1d4     18 03 90 FD | 	jmp	#LR__1205
0f1d8                 | LR__1194
0f1d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0f1d8     08 4E 05 F1 | 	add	fp, #8
0f1dc     A7 1E 02 FB | 	rdlong	local01, fp
0f1e0     08 4E 85 F1 | 	sub	fp, #8
0f1e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f1e8     14 4E 05 A1 |  if_e	add	fp, #20
0f1ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0f1f0     14 4E 85 A1 |  if_e	sub	fp, #20
0f1f4     12 23 02 A6 |  if_e	mov	local03, local04
0f1f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f1fc     40 00 90 5D |  if_ne	jmp	#LR__1195
0f200     A7 12 02 FB | 	rdlong	arg01, fp
0f204     09 13 52 F6 | 	abs	arg01, arg01 wc
0f208     1F 26 C6 C9 |  if_b	decod	local05, #31
0f20c     00 26 06 36 |  if_ae	mov	local05, #0
0f210     A4 F3 B0 FD | 	call	#__system___float_fromuns
0f214     13 FB 61 F5 | 	xor	result1, local05
0f218     FD 12 02 F6 | 	mov	arg01, result1
0f21c     0C 4E 05 F1 | 	add	fp, #12
0f220     A7 14 02 FB | 	rdlong	arg02, fp
0f224     0C 4E 85 F1 | 	sub	fp, #12
0f228     C0 F3 B0 FD | 	call	#__system___float_add
0f22c     A7 FA 61 FC | 	wrlong	result1, fp
0f230     08 4E 05 F1 | 	add	fp, #8
0f234     A7 3C 68 FC | 	wrlong	#30, fp
0f238     08 4E 85 F1 | 	sub	fp, #8
0f23c     B0 02 90 FD | 	jmp	#LR__1205
0f240                 | LR__1195
0f240                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0f240     08 4E 05 F1 | 	add	fp, #8
0f244     A7 1E 02 FB | 	rdlong	local01, fp
0f248     08 4E 85 F1 | 	sub	fp, #8
0f24c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f250     14 4E 05 A1 |  if_e	add	fp, #20
0f254     A7 24 02 AB |  if_e	rdlong	local04, fp
0f258     14 4E 85 A1 |  if_e	sub	fp, #20
0f25c     12 23 02 A6 |  if_e	mov	local03, local04
0f260     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f264     28 00 90 5D |  if_ne	jmp	#LR__1196
0f268     A7 1E 02 FB | 	rdlong	local01, fp
0f26c     0C 4E 05 F1 | 	add	fp, #12
0f270     A7 12 02 FB | 	rdlong	arg01, fp
0f274     0C 4E 85 F1 | 	sub	fp, #12
0f278     3C F3 B0 FD | 	call	#__system___float_fromuns
0f27c     FD 14 02 F6 | 	mov	arg02, result1
0f280     0F 13 02 F6 | 	mov	arg01, local01
0f284     64 F3 B0 FD | 	call	#__system___float_add
0f288     A7 FA 61 FC | 	wrlong	result1, fp
0f28c     60 02 90 FD | 	jmp	#LR__1205
0f290                 | LR__1196
0f290                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0f290     08 4E 05 F1 | 	add	fp, #8
0f294     A7 1E 02 FB | 	rdlong	local01, fp
0f298     08 4E 85 F1 | 	sub	fp, #8
0f29c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f2a0     14 4E 05 A1 |  if_e	add	fp, #20
0f2a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0f2a8     14 4E 85 A1 |  if_e	sub	fp, #20
0f2ac     12 23 02 A6 |  if_e	mov	local03, local04
0f2b0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f2b4     38 00 90 5D |  if_ne	jmp	#LR__1197
0f2b8     A7 1E 02 FB | 	rdlong	local01, fp
0f2bc     0C 4E 05 F1 | 	add	fp, #12
0f2c0     A7 12 02 FB | 	rdlong	arg01, fp
0f2c4     0C 4E 85 F1 | 	sub	fp, #12
0f2c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f2cc     1F 26 C6 C9 |  if_b	decod	local05, #31
0f2d0     00 26 06 36 |  if_ae	mov	local05, #0
0f2d4     E0 F2 B0 FD | 	call	#__system___float_fromuns
0f2d8     13 FB 61 F5 | 	xor	result1, local05
0f2dc     FD 14 02 F6 | 	mov	arg02, result1
0f2e0     0F 13 02 F6 | 	mov	arg01, local01
0f2e4     04 F3 B0 FD | 	call	#__system___float_add
0f2e8     A7 FA 61 FC | 	wrlong	result1, fp
0f2ec     00 02 90 FD | 	jmp	#LR__1205
0f2f0                 | LR__1197
0f2f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0f2f0     08 4E 05 F1 | 	add	fp, #8
0f2f4     A7 1E 02 FB | 	rdlong	local01, fp
0f2f8     08 4E 85 F1 | 	sub	fp, #8
0f2fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f300     14 4E 05 A1 |  if_e	add	fp, #20
0f304     A7 24 02 AB |  if_e	rdlong	local04, fp
0f308     14 4E 85 A1 |  if_e	sub	fp, #20
0f30c     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0f310     1C 00 90 5D |  if_ne	jmp	#LR__1198
0f314     A7 12 02 FB | 	rdlong	arg01, fp
0f318     0C 4E 05 F1 | 	add	fp, #12
0f31c     A7 14 02 FB | 	rdlong	arg02, fp
0f320     0C 4E 85 F1 | 	sub	fp, #12
0f324     C4 F2 B0 FD | 	call	#__system___float_add
0f328     A7 FA 61 FC | 	wrlong	result1, fp
0f32c     C0 01 90 FD | 	jmp	#LR__1205
0f330                 | LR__1198
0f330                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f330     08 4E 05 F1 | 	add	fp, #8
0f334     A7 1E 02 FB | 	rdlong	local01, fp
0f338     08 4E 85 F1 | 	sub	fp, #8
0f33c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f340     24 00 90 5D |  if_ne	jmp	#LR__1199
0f344     14 4E 05 F1 | 	add	fp, #20
0f348     A7 22 02 FB | 	rdlong	local03, fp
0f34c     14 4E 85 F1 | 	sub	fp, #20
0f350     1F 22 0E F2 | 	cmp	local03, #31 wz
0f354     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f358     08 4E 05 51 |  if_ne	add	fp, #8
0f35c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f360     08 4E 85 51 |  if_ne	sub	fp, #8
0f364     88 01 90 5D |  if_ne	jmp	#LR__1205
0f368                 | LR__1199
0f368                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0f368     14 4E 05 F1 | 	add	fp, #20
0f36c     A7 1E 02 FB | 	rdlong	local01, fp
0f370     14 4E 85 F1 | 	sub	fp, #20
0f374     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f378     24 00 90 5D |  if_ne	jmp	#LR__1200
0f37c     08 4E 05 F1 | 	add	fp, #8
0f380     A7 22 02 FB | 	rdlong	local03, fp
0f384     08 4E 85 F1 | 	sub	fp, #8
0f388     1F 22 0E F2 | 	cmp	local03, #31 wz
0f38c     A7 04 68 5C |  if_ne	wrlong	#2, fp
0f390     08 4E 05 51 |  if_ne	add	fp, #8
0f394     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f398     08 4E 85 51 |  if_ne	sub	fp, #8
0f39c     50 01 90 5D |  if_ne	jmp	#LR__1205
0f3a0                 | LR__1200
0f3a0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0f3a0     08 4E 05 F1 | 	add	fp, #8
0f3a4     A7 1E 02 FB | 	rdlong	local01, fp
0f3a8     08 4E 85 F1 | 	sub	fp, #8
0f3ac     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f3b0     14 4E 05 A1 |  if_e	add	fp, #20
0f3b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f3b8     14 4E 85 A1 |  if_e	sub	fp, #20
0f3bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f3c0     1C 00 90 5D |  if_ne	jmp	#LR__1201
0f3c4     A7 12 02 FB | 	rdlong	arg01, fp
0f3c8     0C 4E 05 F1 | 	add	fp, #12
0f3cc     A7 14 02 FB | 	rdlong	arg02, fp
0f3d0     0C 4E 85 F1 | 	sub	fp, #12
0f3d4     C4 CA B0 FD | 	call	#__system___string_concat
0f3d8     A7 FA 61 FC | 	wrlong	result1, fp
0f3dc     10 01 90 FD | 	jmp	#LR__1205
0f3e0                 | LR__1201
0f3e0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0f3e0     08 4E 05 F1 | 	add	fp, #8
0f3e4     A7 1E 02 FB | 	rdlong	local01, fp
0f3e8     08 4E 85 F1 | 	sub	fp, #8
0f3ec     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f3f0     14 4E 05 A1 |  if_e	add	fp, #20
0f3f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0f3f8     14 4E 85 A1 |  if_e	sub	fp, #20
0f3fc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0f400     30 00 90 5D |  if_ne	jmp	#LR__1202
0f404     A7 12 02 FB | 	rdlong	arg01, fp
0f408     F8 EB BF FD | 	call	#_convertstring
0f40c     FD 12 02 F6 | 	mov	arg01, result1
0f410     0C 4E 05 F1 | 	add	fp, #12
0f414     A7 14 02 FB | 	rdlong	arg02, fp
0f418     0C 4E 85 F1 | 	sub	fp, #12
0f41c     7C CA B0 FD | 	call	#__system___string_concat
0f420     A7 FA 61 FC | 	wrlong	result1, fp
0f424     08 4E 05 F1 | 	add	fp, #8
0f428     A7 3E 68 FC | 	wrlong	#31, fp
0f42c     08 4E 85 F1 | 	sub	fp, #8
0f430     BC 00 90 FD | 	jmp	#LR__1205
0f434                 | LR__1202
0f434                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0f434     08 4E 05 F1 | 	add	fp, #8
0f438     A7 1E 02 FB | 	rdlong	local01, fp
0f43c     08 4E 85 F1 | 	sub	fp, #8
0f440     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f444     14 4E 05 A1 |  if_e	add	fp, #20
0f448     A7 22 02 AB |  if_e	rdlong	local03, fp
0f44c     14 4E 85 A1 |  if_e	sub	fp, #20
0f450     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f454     28 00 90 5D |  if_ne	jmp	#LR__1203
0f458     A7 1E 02 FB | 	rdlong	local01, fp
0f45c     0C 4E 05 F1 | 	add	fp, #12
0f460     A7 12 02 FB | 	rdlong	arg01, fp
0f464     0C 4E 85 F1 | 	sub	fp, #12
0f468     98 EB BF FD | 	call	#_convertstring
0f46c     FD 14 02 F6 | 	mov	arg02, result1
0f470     0F 13 02 F6 | 	mov	arg01, local01
0f474     24 CA B0 FD | 	call	#__system___string_concat
0f478     A7 FA 61 FC | 	wrlong	result1, fp
0f47c     70 00 90 FD | 	jmp	#LR__1205
0f480                 | LR__1203
0f480                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0f480     08 4E 05 F1 | 	add	fp, #8
0f484     A7 1E 02 FB | 	rdlong	local01, fp
0f488     08 4E 85 F1 | 	sub	fp, #8
0f48c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0f490     14 4E 05 A1 |  if_e	add	fp, #20
0f494     A7 22 02 AB |  if_e	rdlong	local03, fp
0f498     14 4E 85 A1 |  if_e	sub	fp, #20
0f49c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0f4a0     3C 00 90 5D |  if_ne	jmp	#LR__1204
0f4a4     A7 12 02 FB | 	rdlong	arg01, fp
0f4a8     58 EB BF FD | 	call	#_convertstring
0f4ac     FD 1E 02 F6 | 	mov	local01, result1
0f4b0     0C 4E 05 F1 | 	add	fp, #12
0f4b4     A7 12 02 FB | 	rdlong	arg01, fp
0f4b8     0C 4E 85 F1 | 	sub	fp, #12
0f4bc     44 EB BF FD | 	call	#_convertstring
0f4c0     FD 14 02 F6 | 	mov	arg02, result1
0f4c4     0F 13 02 F6 | 	mov	arg01, local01
0f4c8     D0 C9 B0 FD | 	call	#__system___string_concat
0f4cc     A7 FA 61 FC | 	wrlong	result1, fp
0f4d0     08 4E 05 F1 | 	add	fp, #8
0f4d4     A7 3E 68 FC | 	wrlong	#31, fp
0f4d8     08 4E 85 F1 | 	sub	fp, #8
0f4dc     10 00 90 FD | 	jmp	#LR__1205
0f4e0                 | LR__1204
0f4e0     A7 08 68 FC | 	wrlong	#4, fp
0f4e4     08 4E 05 F1 | 	add	fp, #8
0f4e8     A7 FE 69 FC | 	wrlong	#255, fp
0f4ec     08 4E 85 F1 | 	sub	fp, #8
0f4f0                 | LR__1205
0f4f0     A7 12 02 F6 | 	mov	arg01, fp
0f4f4     28 AC BF FD | 	call	#_push
0f4f8     A7 F0 03 F6 | 	mov	ptra, fp
0f4fc     B2 00 A0 FD | 	call	#popregs_
0f500                 | _do_plus_ret
0f500     2D 00 64 FD | 	ret
0f504                 | 
0f504                 | ' 
0f504                 | ' sub do_minus
0f504                 | _do_minus
0f504     05 4A 05 F6 | 	mov	COUNT_, #5
0f508     A8 00 A0 FD | 	call	#pushregs_
0f50c     18 F0 07 F1 | 	add	ptra, #24
0f510     74 AB BF FD | 	call	#_pop
0f514     FD 1E 02 F6 | 	mov	local01, result1
0f518     FE 20 02 F6 | 	mov	local02, result2
0f51c     FF 22 02 F6 | 	mov	local03, result3
0f520     0C 4E 05 F1 | 	add	fp, #12
0f524     A7 1E 62 FC | 	wrlong	local01, fp
0f528     04 4E 05 F1 | 	add	fp, #4
0f52c     A7 20 62 FC | 	wrlong	local02, fp
0f530     04 4E 05 F1 | 	add	fp, #4
0f534     A7 22 62 FC | 	wrlong	local03, fp
0f538     14 4E 85 F1 | 	sub	fp, #20
0f53c     48 AB BF FD | 	call	#_pop
0f540     FF 22 02 F6 | 	mov	local03, result3
0f544     A7 FA 61 FC | 	wrlong	result1, fp
0f548     04 4E 05 F1 | 	add	fp, #4
0f54c     A7 FC 61 FC | 	wrlong	result2, fp
0f550     04 4E 05 F1 | 	add	fp, #4
0f554     A7 22 62 FC | 	wrlong	local03, fp
0f558                 | ' 
0f558                 | ' t2=pop()
0f558                 | ' t1=pop()
0f558                 | ' 
0f558                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0f558     08 4E 85 F1 | 	sub	fp, #8
0f55c     1D 22 0E F2 | 	cmp	local03, #29 wz
0f560     14 4E 05 A1 |  if_e	add	fp, #20
0f564     A7 24 02 AB |  if_e	rdlong	local04, fp
0f568     14 4E 85 A1 |  if_e	sub	fp, #20
0f56c     12 23 02 A6 |  if_e	mov	local03, local04
0f570     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f574     5C 00 90 5D |  if_ne	jmp	#LR__1211
0f578                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0f578     0C 4E 05 F1 | 	add	fp, #12
0f57c     A7 1E 02 FB | 	rdlong	local01, fp
0f580     0C 4E 85 F1 | 	sub	fp, #12
0f584     A7 22 02 FB | 	rdlong	local03, fp
0f588     11 1F 12 F2 | 	cmp	local01, local03 wc
0f58c     1C 00 90 3D |  if_ae	jmp	#LR__1210
0f590     A7 1E 02 FB | 	rdlong	local01, fp
0f594     0C 4E 05 F1 | 	add	fp, #12
0f598     A7 20 02 FB | 	rdlong	local02, fp
0f59c     0C 4E 85 F1 | 	sub	fp, #12
0f5a0     10 1F 82 F1 | 	sub	local01, local02
0f5a4     A7 1E 62 FC | 	wrlong	local01, fp
0f5a8     F4 02 90 FD | 	jmp	#LR__1220
0f5ac                 | LR__1210
0f5ac     A7 1E 02 FB | 	rdlong	local01, fp
0f5b0     0C 4E 05 F1 | 	add	fp, #12
0f5b4     A7 20 02 FB | 	rdlong	local02, fp
0f5b8     0C 4E 85 F1 | 	sub	fp, #12
0f5bc     10 1F 82 F1 | 	sub	local01, local02
0f5c0     A7 1E 62 FC | 	wrlong	local01, fp
0f5c4     08 4E 05 F1 | 	add	fp, #8
0f5c8     A7 38 68 FC | 	wrlong	#28, fp
0f5cc     08 4E 85 F1 | 	sub	fp, #8
0f5d0     CC 02 90 FD | 	jmp	#LR__1220
0f5d4                 | LR__1211
0f5d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0f5d4     08 4E 05 F1 | 	add	fp, #8
0f5d8     A7 1E 02 FB | 	rdlong	local01, fp
0f5dc     08 4E 85 F1 | 	sub	fp, #8
0f5e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f5e4     14 4E 05 A1 |  if_e	add	fp, #20
0f5e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f5ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f5f0     12 23 02 A6 |  if_e	mov	local03, local04
0f5f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f5f8     28 00 90 5D |  if_ne	jmp	#LR__1212
0f5fc     A7 1E 02 FB | 	rdlong	local01, fp
0f600     0C 4E 05 F1 | 	add	fp, #12
0f604     A7 20 02 FB | 	rdlong	local02, fp
0f608     0C 4E 85 F1 | 	sub	fp, #12
0f60c     10 1F 82 F1 | 	sub	local01, local02
0f610     A7 1E 62 FC | 	wrlong	local01, fp
0f614     08 4E 05 F1 | 	add	fp, #8
0f618     A7 38 68 FC | 	wrlong	#28, fp
0f61c     08 4E 85 F1 | 	sub	fp, #8
0f620     7C 02 90 FD | 	jmp	#LR__1220
0f624                 | LR__1212
0f624                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0f624     08 4E 05 F1 | 	add	fp, #8
0f628     A7 1E 02 FB | 	rdlong	local01, fp
0f62c     08 4E 85 F1 | 	sub	fp, #8
0f630     1D 1E 0E F2 | 	cmp	local01, #29 wz
0f634     14 4E 05 A1 |  if_e	add	fp, #20
0f638     A7 24 02 AB |  if_e	rdlong	local04, fp
0f63c     14 4E 85 A1 |  if_e	sub	fp, #20
0f640     12 23 02 A6 |  if_e	mov	local03, local04
0f644     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f648     34 00 90 5D |  if_ne	jmp	#LR__1213
0f64c     A7 12 02 FB | 	rdlong	arg01, fp
0f650     64 EF B0 FD | 	call	#__system___float_fromuns
0f654     FD 12 02 F6 | 	mov	arg01, result1
0f658     0C 4E 05 F1 | 	add	fp, #12
0f65c     A7 14 02 FB | 	rdlong	arg02, fp
0f660     0C 4E 85 F1 | 	sub	fp, #12
0f664     1F 14 E6 F4 | 	bitnot	arg02, #31
0f668     80 EF B0 FD | 	call	#__system___float_add
0f66c     A7 FA 61 FC | 	wrlong	result1, fp
0f670     08 4E 05 F1 | 	add	fp, #8
0f674     A7 3C 68 FC | 	wrlong	#30, fp
0f678     08 4E 85 F1 | 	sub	fp, #8
0f67c     20 02 90 FD | 	jmp	#LR__1220
0f680                 | LR__1213
0f680                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0f680     08 4E 05 F1 | 	add	fp, #8
0f684     A7 1E 02 FB | 	rdlong	local01, fp
0f688     08 4E 85 F1 | 	sub	fp, #8
0f68c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f690     14 4E 05 A1 |  if_e	add	fp, #20
0f694     A7 24 02 AB |  if_e	rdlong	local04, fp
0f698     14 4E 85 A1 |  if_e	sub	fp, #20
0f69c     12 23 02 A6 |  if_e	mov	local03, local04
0f6a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f6a4     1C 00 90 5D |  if_ne	jmp	#LR__1214
0f6a8     A7 1E 02 FB | 	rdlong	local01, fp
0f6ac     0C 4E 05 F1 | 	add	fp, #12
0f6b0     A7 20 02 FB | 	rdlong	local02, fp
0f6b4     0C 4E 85 F1 | 	sub	fp, #12
0f6b8     10 1F 82 F1 | 	sub	local01, local02
0f6bc     A7 1E 62 FC | 	wrlong	local01, fp
0f6c0     DC 01 90 FD | 	jmp	#LR__1220
0f6c4                 | LR__1214
0f6c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0f6c4     08 4E 05 F1 | 	add	fp, #8
0f6c8     A7 1E 02 FB | 	rdlong	local01, fp
0f6cc     08 4E 85 F1 | 	sub	fp, #8
0f6d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f6d4     14 4E 05 A1 |  if_e	add	fp, #20
0f6d8     A7 24 02 AB |  if_e	rdlong	local04, fp
0f6dc     14 4E 85 A1 |  if_e	sub	fp, #20
0f6e0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0f6e4     1C 00 90 5D |  if_ne	jmp	#LR__1215
0f6e8     A7 1E 02 FB | 	rdlong	local01, fp
0f6ec     0C 4E 05 F1 | 	add	fp, #12
0f6f0     A7 20 02 FB | 	rdlong	local02, fp
0f6f4     0C 4E 85 F1 | 	sub	fp, #12
0f6f8     10 1F 82 F1 | 	sub	local01, local02
0f6fc     A7 1E 62 FC | 	wrlong	local01, fp
0f700     9C 01 90 FD | 	jmp	#LR__1220
0f704                 | LR__1215
0f704                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0f704     08 4E 05 F1 | 	add	fp, #8
0f708     A7 1E 02 FB | 	rdlong	local01, fp
0f70c     08 4E 85 F1 | 	sub	fp, #8
0f710     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f714     14 4E 05 A1 |  if_e	add	fp, #20
0f718     A7 22 02 AB |  if_e	rdlong	local03, fp
0f71c     14 4E 85 A1 |  if_e	sub	fp, #20
0f720     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f724     44 00 90 5D |  if_ne	jmp	#LR__1216
0f728     A7 12 02 FB | 	rdlong	arg01, fp
0f72c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f730     1F 26 C6 C9 |  if_b	decod	local05, #31
0f734     00 26 06 36 |  if_ae	mov	local05, #0
0f738     7C EE B0 FD | 	call	#__system___float_fromuns
0f73c     13 FB 61 F5 | 	xor	result1, local05
0f740     FD 12 02 F6 | 	mov	arg01, result1
0f744     0C 4E 05 F1 | 	add	fp, #12
0f748     A7 14 02 FB | 	rdlong	arg02, fp
0f74c     0C 4E 85 F1 | 	sub	fp, #12
0f750     1F 14 E6 F4 | 	bitnot	arg02, #31
0f754     94 EE B0 FD | 	call	#__system___float_add
0f758     A7 FA 61 FC | 	wrlong	result1, fp
0f75c     08 4E 05 F1 | 	add	fp, #8
0f760     A7 3C 68 FC | 	wrlong	#30, fp
0f764     08 4E 85 F1 | 	sub	fp, #8
0f768     34 01 90 FD | 	jmp	#LR__1220
0f76c                 | LR__1216
0f76c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0f76c     08 4E 05 F1 | 	add	fp, #8
0f770     A7 1E 02 FB | 	rdlong	local01, fp
0f774     08 4E 85 F1 | 	sub	fp, #8
0f778     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f77c     14 4E 05 A1 |  if_e	add	fp, #20
0f780     A7 22 02 AB |  if_e	rdlong	local03, fp
0f784     14 4E 85 A1 |  if_e	sub	fp, #20
0f788     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0f78c     2C 00 90 5D |  if_ne	jmp	#LR__1217
0f790     A7 1E 02 FB | 	rdlong	local01, fp
0f794     0C 4E 05 F1 | 	add	fp, #12
0f798     A7 12 02 FB | 	rdlong	arg01, fp
0f79c     0C 4E 85 F1 | 	sub	fp, #12
0f7a0     14 EE B0 FD | 	call	#__system___float_fromuns
0f7a4     FD 14 02 F6 | 	mov	arg02, result1
0f7a8     0F 13 02 F6 | 	mov	arg01, local01
0f7ac     1F 14 E6 F4 | 	bitnot	arg02, #31
0f7b0     38 EE B0 FD | 	call	#__system___float_add
0f7b4     A7 FA 61 FC | 	wrlong	result1, fp
0f7b8     E4 00 90 FD | 	jmp	#LR__1220
0f7bc                 | LR__1217
0f7bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0f7bc     08 4E 05 F1 | 	add	fp, #8
0f7c0     A7 1E 02 FB | 	rdlong	local01, fp
0f7c4     08 4E 85 F1 | 	sub	fp, #8
0f7c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f7cc     14 4E 05 A1 |  if_e	add	fp, #20
0f7d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0f7d4     14 4E 85 A1 |  if_e	sub	fp, #20
0f7d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0f7dc     3C 00 90 5D |  if_ne	jmp	#LR__1218
0f7e0     A7 1E 02 FB | 	rdlong	local01, fp
0f7e4     0C 4E 05 F1 | 	add	fp, #12
0f7e8     A7 12 02 FB | 	rdlong	arg01, fp
0f7ec     0C 4E 85 F1 | 	sub	fp, #12
0f7f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0f7f4     1F 26 C6 C9 |  if_b	decod	local05, #31
0f7f8     00 26 06 36 |  if_ae	mov	local05, #0
0f7fc     B8 ED B0 FD | 	call	#__system___float_fromuns
0f800     13 FB 61 F5 | 	xor	result1, local05
0f804     FD 14 02 F6 | 	mov	arg02, result1
0f808     0F 13 02 F6 | 	mov	arg01, local01
0f80c     1F 14 E6 F4 | 	bitnot	arg02, #31
0f810     D8 ED B0 FD | 	call	#__system___float_add
0f814     A7 FA 61 FC | 	wrlong	result1, fp
0f818     84 00 90 FD | 	jmp	#LR__1220
0f81c                 | LR__1218
0f81c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0f81c     08 4E 05 F1 | 	add	fp, #8
0f820     A7 1E 02 FB | 	rdlong	local01, fp
0f824     08 4E 85 F1 | 	sub	fp, #8
0f828     1E 1E 0E F2 | 	cmp	local01, #30 wz
0f82c     14 4E 05 A1 |  if_e	add	fp, #20
0f830     A7 22 02 AB |  if_e	rdlong	local03, fp
0f834     14 4E 85 A1 |  if_e	sub	fp, #20
0f838     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0f83c     20 00 90 5D |  if_ne	jmp	#LR__1219
0f840     A7 12 02 FB | 	rdlong	arg01, fp
0f844     0C 4E 05 F1 | 	add	fp, #12
0f848     A7 14 02 FB | 	rdlong	arg02, fp
0f84c     0C 4E 85 F1 | 	sub	fp, #12
0f850     1F 14 E6 F4 | 	bitnot	arg02, #31
0f854     94 ED B0 FD | 	call	#__system___float_add
0f858     A7 FA 61 FC | 	wrlong	result1, fp
0f85c     40 00 90 FD | 	jmp	#LR__1220
0f860                 | LR__1219
0f860                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0f860     08 4E 05 F1 | 	add	fp, #8
0f864     A7 1E 02 FB | 	rdlong	local01, fp
0f868     08 4E 85 F1 | 	sub	fp, #8
0f86c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0f870     14 4E 05 51 |  if_ne	add	fp, #20
0f874     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f878     14 4E 85 51 |  if_ne	sub	fp, #20
0f87c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0f880     A7 06 68 AC |  if_e	wrlong	#3, fp
0f884     08 4E 05 A1 |  if_e	add	fp, #8
0f888     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f88c     08 4E 85 A1 |  if_e	sub	fp, #8
0f890     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0f894     08 4E 05 51 |  if_ne	add	fp, #8
0f898     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0f89c     08 4E 85 51 |  if_ne	sub	fp, #8
0f8a0                 | LR__1220
0f8a0     A7 12 02 F6 | 	mov	arg01, fp
0f8a4     78 A8 BF FD | 	call	#_push
0f8a8     A7 F0 03 F6 | 	mov	ptra, fp
0f8ac     B2 00 A0 FD | 	call	#popregs_
0f8b0                 | _do_minus_ret
0f8b0     2D 00 64 FD | 	ret
0f8b4                 | 
0f8b4                 | ' 
0f8b4                 | ' sub do_and 
0f8b4                 | _do_and
0f8b4     03 4A 05 F6 | 	mov	COUNT_, #3
0f8b8     A8 00 A0 FD | 	call	#pushregs_
0f8bc     18 F0 07 F1 | 	add	ptra, #24
0f8c0     C4 A7 BF FD | 	call	#_pop
0f8c4     FD 12 02 F6 | 	mov	arg01, result1
0f8c8     FE 1E 02 F6 | 	mov	local01, result2
0f8cc     FF 20 02 F6 | 	mov	local02, result3
0f8d0     0C 4E 05 F1 | 	add	fp, #12
0f8d4     A7 12 62 FC | 	wrlong	arg01, fp
0f8d8     04 4E 05 F1 | 	add	fp, #4
0f8dc     A7 1E 62 FC | 	wrlong	local01, fp
0f8e0     04 4E 05 F1 | 	add	fp, #4
0f8e4     A7 20 62 FC | 	wrlong	local02, fp
0f8e8     14 4E 85 F1 | 	sub	fp, #20
0f8ec     98 A7 BF FD | 	call	#_pop
0f8f0     FF 22 02 F6 | 	mov	local03, result3
0f8f4     A7 FA 61 FC | 	wrlong	result1, fp
0f8f8     04 4E 05 F1 | 	add	fp, #4
0f8fc     A7 FC 61 FC | 	wrlong	result2, fp
0f900     04 4E 05 F1 | 	add	fp, #4
0f904     A7 22 62 FC | 	wrlong	local03, fp
0f908                 | ' 
0f908                 | ' t2=pop()
0f908                 | ' t1=pop()
0f908                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0f908     08 4E 85 F1 | 	sub	fp, #8
0f90c     1C 22 0E F2 | 	cmp	local03, #28 wz
0f910     A7 22 02 AB |  if_e	rdlong	local03, fp
0f914     A7 22 62 AC |  if_e	wrlong	local03, fp
0f918     08 4E 05 A1 |  if_e	add	fp, #8
0f91c     A7 3A 68 AC |  if_e	wrlong	#29, fp
0f920     08 4E 85 A1 |  if_e	sub	fp, #8
0f924                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0f924     14 4E 05 F1 | 	add	fp, #20
0f928     A7 22 02 FB | 	rdlong	local03, fp
0f92c     14 4E 85 F1 | 	sub	fp, #20
0f930     1C 22 0E F2 | 	cmp	local03, #28 wz
0f934     18 00 90 5D |  if_ne	jmp	#LR__1230
0f938     0C 4E 05 F1 | 	add	fp, #12
0f93c     A7 22 02 FB | 	rdlong	local03, fp
0f940     A7 22 62 FC | 	wrlong	local03, fp
0f944     08 4E 05 F1 | 	add	fp, #8
0f948     A7 3A 68 FC | 	wrlong	#29, fp
0f94c     14 4E 85 F1 | 	sub	fp, #20
0f950                 | LR__1230
0f950                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0f950     08 4E 05 F1 | 	add	fp, #8
0f954     A7 22 02 FB | 	rdlong	local03, fp
0f958     08 4E 85 F1 | 	sub	fp, #8
0f95c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f960     14 4E 05 51 |  if_ne	add	fp, #20
0f964     A7 20 02 5B |  if_ne	rdlong	local02, fp
0f968     14 4E 85 51 |  if_ne	sub	fp, #20
0f96c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0f970     08 4E 05 51 |  if_ne	add	fp, #8
0f974     A7 22 02 5B |  if_ne	rdlong	local03, fp
0f978     08 4E 85 51 |  if_ne	sub	fp, #8
0f97c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0f980     14 4E 05 51 |  if_ne	add	fp, #20
0f984     14 4E 85 51 |  if_ne	sub	fp, #20
0f988     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0f98c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0f990     08 4E 05 A1 |  if_e	add	fp, #8
0f994     A7 FE 69 AC |  if_e	wrlong	#255, fp
0f998     08 4E 85 A1 |  if_e	sub	fp, #8
0f99c     18 00 90 AD |  if_e	jmp	#LR__1231
0f9a0     A7 22 02 FB | 	rdlong	local03, fp
0f9a4     0C 4E 05 F1 | 	add	fp, #12
0f9a8     A7 1E 02 FB | 	rdlong	local01, fp
0f9ac     0C 4E 85 F1 | 	sub	fp, #12
0f9b0     0F 23 02 F5 | 	and	local03, local01
0f9b4     A7 22 62 FC | 	wrlong	local03, fp
0f9b8                 | LR__1231
0f9b8     A7 12 02 F6 | 	mov	arg01, fp
0f9bc     60 A7 BF FD | 	call	#_push
0f9c0     A7 F0 03 F6 | 	mov	ptra, fp
0f9c4     B2 00 A0 FD | 	call	#popregs_
0f9c8                 | _do_and_ret
0f9c8     2D 00 64 FD | 	ret
0f9cc                 | 
0f9cc                 | ' 
0f9cc                 | ' sub do_or 
0f9cc                 | _do_or
0f9cc     03 4A 05 F6 | 	mov	COUNT_, #3
0f9d0     A8 00 A0 FD | 	call	#pushregs_
0f9d4     18 F0 07 F1 | 	add	ptra, #24
0f9d8     AC A6 BF FD | 	call	#_pop
0f9dc     FD 12 02 F6 | 	mov	arg01, result1
0f9e0     FE 1E 02 F6 | 	mov	local01, result2
0f9e4     FF 20 02 F6 | 	mov	local02, result3
0f9e8     0C 4E 05 F1 | 	add	fp, #12
0f9ec     A7 12 62 FC | 	wrlong	arg01, fp
0f9f0     04 4E 05 F1 | 	add	fp, #4
0f9f4     A7 1E 62 FC | 	wrlong	local01, fp
0f9f8     04 4E 05 F1 | 	add	fp, #4
0f9fc     A7 20 62 FC | 	wrlong	local02, fp
0fa00     14 4E 85 F1 | 	sub	fp, #20
0fa04     80 A6 BF FD | 	call	#_pop
0fa08     FF 22 02 F6 | 	mov	local03, result3
0fa0c     A7 FA 61 FC | 	wrlong	result1, fp
0fa10     04 4E 05 F1 | 	add	fp, #4
0fa14     A7 FC 61 FC | 	wrlong	result2, fp
0fa18     04 4E 05 F1 | 	add	fp, #4
0fa1c     A7 22 62 FC | 	wrlong	local03, fp
0fa20                 | ' 
0fa20                 | ' t2=pop()
0fa20                 | ' t1=pop()
0fa20                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0fa20     08 4E 85 F1 | 	sub	fp, #8
0fa24     1C 22 0E F2 | 	cmp	local03, #28 wz
0fa28     A7 22 02 AB |  if_e	rdlong	local03, fp
0fa2c     A7 22 62 AC |  if_e	wrlong	local03, fp
0fa30     08 4E 05 A1 |  if_e	add	fp, #8
0fa34     A7 3A 68 AC |  if_e	wrlong	#29, fp
0fa38     08 4E 85 A1 |  if_e	sub	fp, #8
0fa3c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0fa3c     14 4E 05 F1 | 	add	fp, #20
0fa40     A7 22 02 FB | 	rdlong	local03, fp
0fa44     14 4E 85 F1 | 	sub	fp, #20
0fa48     1C 22 0E F2 | 	cmp	local03, #28 wz
0fa4c     18 00 90 5D |  if_ne	jmp	#LR__1240
0fa50     0C 4E 05 F1 | 	add	fp, #12
0fa54     A7 22 02 FB | 	rdlong	local03, fp
0fa58     A7 22 62 FC | 	wrlong	local03, fp
0fa5c     08 4E 05 F1 | 	add	fp, #8
0fa60     A7 3A 68 FC | 	wrlong	#29, fp
0fa64     14 4E 85 F1 | 	sub	fp, #20
0fa68                 | LR__1240
0fa68                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0fa68     08 4E 05 F1 | 	add	fp, #8
0fa6c     A7 22 02 FB | 	rdlong	local03, fp
0fa70     08 4E 85 F1 | 	sub	fp, #8
0fa74     1F 22 0E F2 | 	cmp	local03, #31 wz
0fa78     14 4E 05 51 |  if_ne	add	fp, #20
0fa7c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0fa80     14 4E 85 51 |  if_ne	sub	fp, #20
0fa84     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0fa88     08 4E 05 51 |  if_ne	add	fp, #8
0fa8c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fa90     08 4E 85 51 |  if_ne	sub	fp, #8
0fa94     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0fa98     14 4E 05 51 |  if_ne	add	fp, #20
0fa9c     14 4E 85 51 |  if_ne	sub	fp, #20
0faa0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0faa4     A7 0C 68 AC |  if_e	wrlong	#6, fp
0faa8     08 4E 05 A1 |  if_e	add	fp, #8
0faac     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fab0     08 4E 85 A1 |  if_e	sub	fp, #8
0fab4     18 00 90 AD |  if_e	jmp	#LR__1241
0fab8     A7 22 02 FB | 	rdlong	local03, fp
0fabc     0C 4E 05 F1 | 	add	fp, #12
0fac0     A7 1E 02 FB | 	rdlong	local01, fp
0fac4     0C 4E 85 F1 | 	sub	fp, #12
0fac8     0F 23 42 F5 | 	or	local03, local01
0facc     A7 22 62 FC | 	wrlong	local03, fp
0fad0                 | LR__1241
0fad0     A7 12 02 F6 | 	mov	arg01, fp
0fad4     48 A6 BF FD | 	call	#_push
0fad8     A7 F0 03 F6 | 	mov	ptra, fp
0fadc     B2 00 A0 FD | 	call	#popregs_
0fae0                 | _do_or_ret
0fae0     2D 00 64 FD | 	ret
0fae4                 | 
0fae4                 | ' 
0fae4                 | ' sub do_mul
0fae4                 | _do_mul
0fae4     05 4A 05 F6 | 	mov	COUNT_, #5
0fae8     A8 00 A0 FD | 	call	#pushregs_
0faec     18 F0 07 F1 | 	add	ptra, #24
0faf0     94 A5 BF FD | 	call	#_pop
0faf4     FD 1E 02 F6 | 	mov	local01, result1
0faf8     FE 20 02 F6 | 	mov	local02, result2
0fafc     FF 22 02 F6 | 	mov	local03, result3
0fb00     0C 4E 05 F1 | 	add	fp, #12
0fb04     A7 1E 62 FC | 	wrlong	local01, fp
0fb08     04 4E 05 F1 | 	add	fp, #4
0fb0c     A7 20 62 FC | 	wrlong	local02, fp
0fb10     04 4E 05 F1 | 	add	fp, #4
0fb14     A7 22 62 FC | 	wrlong	local03, fp
0fb18     14 4E 85 F1 | 	sub	fp, #20
0fb1c     68 A5 BF FD | 	call	#_pop
0fb20     FF 22 02 F6 | 	mov	local03, result3
0fb24     A7 FA 61 FC | 	wrlong	result1, fp
0fb28     04 4E 05 F1 | 	add	fp, #4
0fb2c     A7 FC 61 FC | 	wrlong	result2, fp
0fb30     04 4E 05 F1 | 	add	fp, #4
0fb34     A7 22 62 FC | 	wrlong	local03, fp
0fb38                 | ' 
0fb38                 | ' t2=pop()
0fb38                 | ' t1=pop()
0fb38                 | ' 
0fb38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0fb38     08 4E 85 F1 | 	sub	fp, #8
0fb3c     1D 22 0E F2 | 	cmp	local03, #29 wz
0fb40     14 4E 05 A1 |  if_e	add	fp, #20
0fb44     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb48     14 4E 85 A1 |  if_e	sub	fp, #20
0fb4c     12 23 02 A6 |  if_e	mov	local03, local04
0fb50     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fb54     20 00 90 5D |  if_ne	jmp	#LR__1250
0fb58     A7 20 02 FB | 	rdlong	local02, fp
0fb5c     0C 4E 05 F1 | 	add	fp, #12
0fb60     A7 22 02 FB | 	rdlong	local03, fp
0fb64     11 21 02 FD | 	qmul	local02, local03
0fb68     0C 4E 85 F1 | 	sub	fp, #12
0fb6c     18 1E 62 FD | 	getqx	local01
0fb70     A7 1E 62 FC | 	wrlong	local01, fp
0fb74     C4 02 90 FD | 	jmp	#LR__1259
0fb78                 | LR__1250
0fb78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0fb78     08 4E 05 F1 | 	add	fp, #8
0fb7c     A7 1E 02 FB | 	rdlong	local01, fp
0fb80     08 4E 85 F1 | 	sub	fp, #8
0fb84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fb88     14 4E 05 A1 |  if_e	add	fp, #20
0fb8c     A7 24 02 AB |  if_e	rdlong	local04, fp
0fb90     14 4E 85 A1 |  if_e	sub	fp, #20
0fb94     12 23 02 A6 |  if_e	mov	local03, local04
0fb98     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fb9c     2C 00 90 5D |  if_ne	jmp	#LR__1251
0fba0     A7 20 02 FB | 	rdlong	local02, fp
0fba4     0C 4E 05 F1 | 	add	fp, #12
0fba8     A7 22 02 FB | 	rdlong	local03, fp
0fbac     11 21 02 FD | 	qmul	local02, local03
0fbb0     0C 4E 85 F1 | 	sub	fp, #12
0fbb4     18 1E 62 FD | 	getqx	local01
0fbb8     A7 1E 62 FC | 	wrlong	local01, fp
0fbbc     08 4E 05 F1 | 	add	fp, #8
0fbc0     A7 38 68 FC | 	wrlong	#28, fp
0fbc4     08 4E 85 F1 | 	sub	fp, #8
0fbc8     70 02 90 FD | 	jmp	#LR__1259
0fbcc                 | LR__1251
0fbcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0fbcc     08 4E 05 F1 | 	add	fp, #8
0fbd0     A7 1E 02 FB | 	rdlong	local01, fp
0fbd4     08 4E 85 F1 | 	sub	fp, #8
0fbd8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0fbdc     14 4E 05 A1 |  if_e	add	fp, #20
0fbe0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fbe4     14 4E 85 A1 |  if_e	sub	fp, #20
0fbe8     12 23 02 A6 |  if_e	mov	local03, local04
0fbec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fbf0     30 00 90 5D |  if_ne	jmp	#LR__1252
0fbf4     A7 12 02 FB | 	rdlong	arg01, fp
0fbf8     BC E9 B0 FD | 	call	#__system___float_fromuns
0fbfc     FD 12 02 F6 | 	mov	arg01, result1
0fc00     0C 4E 05 F1 | 	add	fp, #12
0fc04     A7 14 02 FB | 	rdlong	arg02, fp
0fc08     0C 4E 85 F1 | 	sub	fp, #12
0fc0c     AC ED B0 FD | 	call	#__system___float_mul
0fc10     A7 FA 61 FC | 	wrlong	result1, fp
0fc14     08 4E 05 F1 | 	add	fp, #8
0fc18     A7 3C 68 FC | 	wrlong	#30, fp
0fc1c     08 4E 85 F1 | 	sub	fp, #8
0fc20     18 02 90 FD | 	jmp	#LR__1259
0fc24                 | LR__1252
0fc24                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0fc24     08 4E 05 F1 | 	add	fp, #8
0fc28     A7 1E 02 FB | 	rdlong	local01, fp
0fc2c     08 4E 85 F1 | 	sub	fp, #8
0fc30     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc34     14 4E 05 A1 |  if_e	add	fp, #20
0fc38     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc3c     14 4E 85 A1 |  if_e	sub	fp, #20
0fc40     12 23 02 A6 |  if_e	mov	local03, local04
0fc44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fc48     20 00 90 5D |  if_ne	jmp	#LR__1253
0fc4c     A7 20 02 FB | 	rdlong	local02, fp
0fc50     0C 4E 05 F1 | 	add	fp, #12
0fc54     A7 22 02 FB | 	rdlong	local03, fp
0fc58     11 21 02 FD | 	qmul	local02, local03
0fc5c     0C 4E 85 F1 | 	sub	fp, #12
0fc60     18 1E 62 FD | 	getqx	local01
0fc64     A7 1E 62 FC | 	wrlong	local01, fp
0fc68     D0 01 90 FD | 	jmp	#LR__1259
0fc6c                 | LR__1253
0fc6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0fc6c     08 4E 05 F1 | 	add	fp, #8
0fc70     A7 1E 02 FB | 	rdlong	local01, fp
0fc74     08 4E 85 F1 | 	sub	fp, #8
0fc78     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fc7c     14 4E 05 A1 |  if_e	add	fp, #20
0fc80     A7 24 02 AB |  if_e	rdlong	local04, fp
0fc84     14 4E 85 A1 |  if_e	sub	fp, #20
0fc88     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0fc8c     20 00 90 5D |  if_ne	jmp	#LR__1254
0fc90     A7 20 02 FB | 	rdlong	local02, fp
0fc94     0C 4E 05 F1 | 	add	fp, #12
0fc98     A7 22 02 FB | 	rdlong	local03, fp
0fc9c     11 21 02 FD | 	qmul	local02, local03
0fca0     0C 4E 85 F1 | 	sub	fp, #12
0fca4     18 1E 62 FD | 	getqx	local01
0fca8     A7 1E 62 FC | 	wrlong	local01, fp
0fcac     8C 01 90 FD | 	jmp	#LR__1259
0fcb0                 | LR__1254
0fcb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0fcb0     08 4E 05 F1 | 	add	fp, #8
0fcb4     A7 1E 02 FB | 	rdlong	local01, fp
0fcb8     08 4E 85 F1 | 	sub	fp, #8
0fcbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0fcc0     14 4E 05 A1 |  if_e	add	fp, #20
0fcc4     A7 22 02 AB |  if_e	rdlong	local03, fp
0fcc8     14 4E 85 A1 |  if_e	sub	fp, #20
0fccc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fcd0     40 00 90 5D |  if_ne	jmp	#LR__1255
0fcd4     A7 12 02 FB | 	rdlong	arg01, fp
0fcd8     09 13 52 F6 | 	abs	arg01, arg01 wc
0fcdc     1F 26 C6 C9 |  if_b	decod	local05, #31
0fce0     00 26 06 36 |  if_ae	mov	local05, #0
0fce4     D0 E8 B0 FD | 	call	#__system___float_fromuns
0fce8     13 FB 61 F5 | 	xor	result1, local05
0fcec     FD 12 02 F6 | 	mov	arg01, result1
0fcf0     0C 4E 05 F1 | 	add	fp, #12
0fcf4     A7 14 02 FB | 	rdlong	arg02, fp
0fcf8     0C 4E 85 F1 | 	sub	fp, #12
0fcfc     BC EC B0 FD | 	call	#__system___float_mul
0fd00     A7 FA 61 FC | 	wrlong	result1, fp
0fd04     08 4E 05 F1 | 	add	fp, #8
0fd08     A7 3C 68 FC | 	wrlong	#30, fp
0fd0c     08 4E 85 F1 | 	sub	fp, #8
0fd10     28 01 90 FD | 	jmp	#LR__1259
0fd14                 | LR__1255
0fd14                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0fd14     08 4E 05 F1 | 	add	fp, #8
0fd18     A7 1E 02 FB | 	rdlong	local01, fp
0fd1c     08 4E 85 F1 | 	sub	fp, #8
0fd20     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fd24     14 4E 05 A1 |  if_e	add	fp, #20
0fd28     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd2c     14 4E 85 A1 |  if_e	sub	fp, #20
0fd30     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fd34     28 00 90 5D |  if_ne	jmp	#LR__1256
0fd38     A7 1E 02 FB | 	rdlong	local01, fp
0fd3c     0C 4E 05 F1 | 	add	fp, #12
0fd40     A7 12 02 FB | 	rdlong	arg01, fp
0fd44     0C 4E 85 F1 | 	sub	fp, #12
0fd48     6C E8 B0 FD | 	call	#__system___float_fromuns
0fd4c     FD 14 02 F6 | 	mov	arg02, result1
0fd50     0F 13 02 F6 | 	mov	arg01, local01
0fd54     64 EC B0 FD | 	call	#__system___float_mul
0fd58     A7 FA 61 FC | 	wrlong	result1, fp
0fd5c     DC 00 90 FD | 	jmp	#LR__1259
0fd60                 | LR__1256
0fd60                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0fd60     08 4E 05 F1 | 	add	fp, #8
0fd64     A7 1E 02 FB | 	rdlong	local01, fp
0fd68     08 4E 85 F1 | 	sub	fp, #8
0fd6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fd70     14 4E 05 A1 |  if_e	add	fp, #20
0fd74     A7 22 02 AB |  if_e	rdlong	local03, fp
0fd78     14 4E 85 A1 |  if_e	sub	fp, #20
0fd7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0fd80     38 00 90 5D |  if_ne	jmp	#LR__1257
0fd84     A7 1E 02 FB | 	rdlong	local01, fp
0fd88     0C 4E 05 F1 | 	add	fp, #12
0fd8c     A7 12 02 FB | 	rdlong	arg01, fp
0fd90     0C 4E 85 F1 | 	sub	fp, #12
0fd94     09 13 52 F6 | 	abs	arg01, arg01 wc
0fd98     1F 26 C6 C9 |  if_b	decod	local05, #31
0fd9c     00 26 06 36 |  if_ae	mov	local05, #0
0fda0     14 E8 B0 FD | 	call	#__system___float_fromuns
0fda4     13 FB 61 F5 | 	xor	result1, local05
0fda8     FD 14 02 F6 | 	mov	arg02, result1
0fdac     0F 13 02 F6 | 	mov	arg01, local01
0fdb0     08 EC B0 FD | 	call	#__system___float_mul
0fdb4     A7 FA 61 FC | 	wrlong	result1, fp
0fdb8     80 00 90 FD | 	jmp	#LR__1259
0fdbc                 | LR__1257
0fdbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0fdbc     08 4E 05 F1 | 	add	fp, #8
0fdc0     A7 1E 02 FB | 	rdlong	local01, fp
0fdc4     08 4E 85 F1 | 	sub	fp, #8
0fdc8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0fdcc     14 4E 05 A1 |  if_e	add	fp, #20
0fdd0     A7 22 02 AB |  if_e	rdlong	local03, fp
0fdd4     14 4E 85 A1 |  if_e	sub	fp, #20
0fdd8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0fddc     1C 00 90 5D |  if_ne	jmp	#LR__1258
0fde0     A7 12 02 FB | 	rdlong	arg01, fp
0fde4     0C 4E 05 F1 | 	add	fp, #12
0fde8     A7 14 02 FB | 	rdlong	arg02, fp
0fdec     0C 4E 85 F1 | 	sub	fp, #12
0fdf0     C8 EB B0 FD | 	call	#__system___float_mul
0fdf4     A7 FA 61 FC | 	wrlong	result1, fp
0fdf8     40 00 90 FD | 	jmp	#LR__1259
0fdfc                 | LR__1258
0fdfc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0fdfc     08 4E 05 F1 | 	add	fp, #8
0fe00     A7 1E 02 FB | 	rdlong	local01, fp
0fe04     08 4E 85 F1 | 	sub	fp, #8
0fe08     1F 1E 0E F2 | 	cmp	local01, #31 wz
0fe0c     14 4E 05 51 |  if_ne	add	fp, #20
0fe10     A7 22 02 5B |  if_ne	rdlong	local03, fp
0fe14     14 4E 85 51 |  if_ne	sub	fp, #20
0fe18     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0fe1c     A7 10 68 AC |  if_e	wrlong	#8, fp
0fe20     08 4E 05 A1 |  if_e	add	fp, #8
0fe24     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fe28     08 4E 85 A1 |  if_e	sub	fp, #8
0fe2c     A7 12 68 5C |  if_ne	wrlong	#9, fp
0fe30     08 4E 05 51 |  if_ne	add	fp, #8
0fe34     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0fe38     08 4E 85 51 |  if_ne	sub	fp, #8
0fe3c                 | LR__1259
0fe3c     A7 12 02 F6 | 	mov	arg01, fp
0fe40     DC A2 BF FD | 	call	#_push
0fe44     A7 F0 03 F6 | 	mov	ptra, fp
0fe48     B2 00 A0 FD | 	call	#popregs_
0fe4c                 | _do_mul_ret
0fe4c     2D 00 64 FD | 	ret
0fe50                 | 
0fe50                 | ' 
0fe50                 | ' sub do_div 
0fe50                 | _do_div
0fe50     01 4A 05 F6 | 	mov	COUNT_, #1
0fe54     A8 00 A0 FD | 	call	#pushregs_
0fe58     18 F0 07 F1 | 	add	ptra, #24
0fe5c     28 A2 BF FD | 	call	#_pop
0fe60     FD 66 02 F6 | 	mov	muldivb_, result1
0fe64     FE 64 02 F6 | 	mov	muldiva_, result2
0fe68     FF 1E 02 F6 | 	mov	local01, result3
0fe6c     0C 4E 05 F1 | 	add	fp, #12
0fe70     A7 66 62 FC | 	wrlong	muldivb_, fp
0fe74     04 4E 05 F1 | 	add	fp, #4
0fe78     A7 64 62 FC | 	wrlong	muldiva_, fp
0fe7c     04 4E 05 F1 | 	add	fp, #4
0fe80     A7 1E 62 FC | 	wrlong	local01, fp
0fe84     14 4E 85 F1 | 	sub	fp, #20
0fe88     FC A1 BF FD | 	call	#_pop
0fe8c     A7 FA 61 FC | 	wrlong	result1, fp
0fe90     04 4E 05 F1 | 	add	fp, #4
0fe94     A7 FC 61 FC | 	wrlong	result2, fp
0fe98     04 4E 05 F1 | 	add	fp, #4
0fe9c     A7 FE 61 FC | 	wrlong	result3, fp
0fea0                 | ' 
0fea0                 | ' t2=pop()
0fea0                 | ' t1=pop()
0fea0                 | ' 
0fea0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0fea0     08 4E 85 F1 | 	sub	fp, #8
0fea4     1F FE 0D F2 | 	cmp	result3, #31 wz
0fea8     14 4E 05 51 |  if_ne	add	fp, #20
0feac     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0feb0     14 4E 85 51 |  if_ne	sub	fp, #20
0feb4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0feb8     A7 14 68 AC |  if_e	wrlong	#10, fp
0febc     08 4E 05 A1 |  if_e	add	fp, #8
0fec0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0fec4     08 4E 85 A1 |  if_e	sub	fp, #8
0fec8     90 01 90 AD |  if_e	jmp	#LR__1266
0fecc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0fecc     08 4E 05 F1 | 	add	fp, #8
0fed0     A7 66 02 FB | 	rdlong	muldivb_, fp
0fed4     08 4E 85 F1 | 	sub	fp, #8
0fed8     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0fedc     1C 00 90 5D |  if_ne	jmp	#LR__1260
0fee0     08 4E 05 F1 | 	add	fp, #8
0fee4     A7 38 68 FC | 	wrlong	#28, fp
0fee8     08 4E 85 F1 | 	sub	fp, #8
0feec     A7 12 02 FB | 	rdlong	arg01, fp
0fef0     00 14 06 F6 | 	mov	arg02, #0
0fef4     8C EF B0 FD | 	call	#__system___float_tointeger
0fef8     A7 FA 61 FC | 	wrlong	result1, fp
0fefc                 | LR__1260
0fefc                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0fefc     14 4E 05 F1 | 	add	fp, #20
0ff00     A7 66 02 FB | 	rdlong	muldivb_, fp
0ff04     14 4E 85 F1 | 	sub	fp, #20
0ff08     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
0ff0c     28 00 90 5D |  if_ne	jmp	#LR__1261
0ff10     14 4E 05 F1 | 	add	fp, #20
0ff14     A7 38 68 FC | 	wrlong	#28, fp
0ff18     08 4E 85 F1 | 	sub	fp, #8
0ff1c     A7 12 02 FB | 	rdlong	arg01, fp
0ff20     0C 4E 85 F1 | 	sub	fp, #12
0ff24     00 14 06 F6 | 	mov	arg02, #0
0ff28     58 EF B0 FD | 	call	#__system___float_tointeger
0ff2c     0C 4E 05 F1 | 	add	fp, #12
0ff30     A7 FA 61 FC | 	wrlong	result1, fp
0ff34     0C 4E 85 F1 | 	sub	fp, #12
0ff38                 | LR__1261
0ff38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0ff38     08 4E 05 F1 | 	add	fp, #8
0ff3c     A7 66 02 FB | 	rdlong	muldivb_, fp
0ff40     08 4E 85 F1 | 	sub	fp, #8
0ff44     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0ff48     14 4E 05 A1 |  if_e	add	fp, #20
0ff4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ff50     14 4E 85 A1 |  if_e	sub	fp, #20
0ff54     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ff58     20 00 90 5D |  if_ne	jmp	#LR__1262
0ff5c     0C 4E 05 F1 | 	add	fp, #12
0ff60     A7 1E 02 FB | 	rdlong	local01, fp
0ff64     0C 4E 85 F1 | 	sub	fp, #12
0ff68     A7 66 02 FB | 	rdlong	muldivb_, fp
0ff6c     0F 67 12 FD | 	qdiv	muldivb_, local01
0ff70     18 1E 62 FD | 	getqx	local01
0ff74     A7 1E 62 FC | 	wrlong	local01, fp
0ff78     E0 00 90 FD | 	jmp	#LR__1266
0ff7c                 | LR__1262
0ff7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0ff7c     08 4E 05 F1 | 	add	fp, #8
0ff80     A7 66 02 FB | 	rdlong	muldivb_, fp
0ff84     08 4E 85 F1 | 	sub	fp, #8
0ff88     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
0ff8c     14 4E 05 A1 |  if_e	add	fp, #20
0ff90     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ff94     14 4E 85 A1 |  if_e	sub	fp, #20
0ff98     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0ff9c     2C 00 90 5D |  if_ne	jmp	#LR__1263
0ffa0     0C 4E 05 F1 | 	add	fp, #12
0ffa4     A7 1E 02 FB | 	rdlong	local01, fp
0ffa8     0C 4E 85 F1 | 	sub	fp, #12
0ffac     A7 66 02 FB | 	rdlong	muldivb_, fp
0ffb0     0F 67 12 FD | 	qdiv	muldivb_, local01
0ffb4     18 1E 62 FD | 	getqx	local01
0ffb8     A7 1E 62 FC | 	wrlong	local01, fp
0ffbc     08 4E 05 F1 | 	add	fp, #8
0ffc0     A7 38 68 FC | 	wrlong	#28, fp
0ffc4     08 4E 85 F1 | 	sub	fp, #8
0ffc8     90 00 90 FD | 	jmp	#LR__1266
0ffcc                 | LR__1263
0ffcc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0ffcc     08 4E 05 F1 | 	add	fp, #8
0ffd0     A7 66 02 FB | 	rdlong	muldivb_, fp
0ffd4     08 4E 85 F1 | 	sub	fp, #8
0ffd8     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
0ffdc     14 4E 05 A1 |  if_e	add	fp, #20
0ffe0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ffe4     14 4E 85 A1 |  if_e	sub	fp, #20
0ffe8     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0ffec     1C 00 90 5D |  if_ne	jmp	#LR__1264
0fff0     A7 64 02 FB | 	rdlong	muldiva_, fp
0fff4     0C 4E 05 F1 | 	add	fp, #12
0fff8     A7 66 02 FB | 	rdlong	muldivb_, fp
0fffc     0C 4E 85 F1 | 	sub	fp, #12
10000     BA 00 A0 FD | 	call	#divide_
10004     A7 66 62 FC | 	wrlong	muldivb_, fp
10008     50 00 90 FD | 	jmp	#LR__1266
1000c                 | LR__1264
1000c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1000c     08 4E 05 F1 | 	add	fp, #8
10010     A7 66 02 FB | 	rdlong	muldivb_, fp
10014     08 4E 85 F1 | 	sub	fp, #8
10018     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1001c     14 4E 05 A1 |  if_e	add	fp, #20
10020     A7 1E 02 AB |  if_e	rdlong	local01, fp
10024     14 4E 85 A1 |  if_e	sub	fp, #20
10028     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1002c     1C 00 90 5D |  if_ne	jmp	#LR__1265
10030     A7 64 02 FB | 	rdlong	muldiva_, fp
10034     0C 4E 05 F1 | 	add	fp, #12
10038     A7 66 02 FB | 	rdlong	muldivb_, fp
1003c     0C 4E 85 F1 | 	sub	fp, #12
10040     BA 00 A0 FD | 	call	#divide_
10044     A7 66 62 FC | 	wrlong	muldivb_, fp
10048     10 00 90 FD | 	jmp	#LR__1266
1004c                 | LR__1265
1004c     A7 16 68 FC | 	wrlong	#11, fp
10050     08 4E 05 F1 | 	add	fp, #8
10054     A7 FE 69 FC | 	wrlong	#255, fp
10058     08 4E 85 F1 | 	sub	fp, #8
1005c                 | LR__1266
1005c     A7 12 02 F6 | 	mov	arg01, fp
10060     BC A0 BF FD | 	call	#_push
10064     A7 F0 03 F6 | 	mov	ptra, fp
10068     B2 00 A0 FD | 	call	#popregs_
1006c                 | _do_div_ret
1006c     2D 00 64 FD | 	ret
10070                 | 
10070                 | ' 
10070                 | ' sub do_fdiv 
10070                 | _do_fdiv
10070     02 4A 05 F6 | 	mov	COUNT_, #2
10074     A8 00 A0 FD | 	call	#pushregs_
10078     18 F0 07 F1 | 	add	ptra, #24
1007c     08 A0 BF FD | 	call	#_pop
10080     FD 14 02 F6 | 	mov	arg02, result1
10084     FE 12 02 F6 | 	mov	arg01, result2
10088     FF 1E 02 F6 | 	mov	local01, result3
1008c     0C 4E 05 F1 | 	add	fp, #12
10090     A7 14 62 FC | 	wrlong	arg02, fp
10094     04 4E 05 F1 | 	add	fp, #4
10098     A7 12 62 FC | 	wrlong	arg01, fp
1009c     04 4E 05 F1 | 	add	fp, #4
100a0     A7 1E 62 FC | 	wrlong	local01, fp
100a4     14 4E 85 F1 | 	sub	fp, #20
100a8     DC 9F BF FD | 	call	#_pop
100ac     A7 FA 61 FC | 	wrlong	result1, fp
100b0     04 4E 05 F1 | 	add	fp, #4
100b4     A7 FC 61 FC | 	wrlong	result2, fp
100b8     04 4E 05 F1 | 	add	fp, #4
100bc     A7 FE 61 FC | 	wrlong	result3, fp
100c0                 | ' 
100c0                 | ' t2=pop()
100c0                 | ' t1=pop()
100c0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
100c0     08 4E 85 F1 | 	sub	fp, #8
100c4     1F FE 0D F2 | 	cmp	result3, #31 wz
100c8     14 4E 05 51 |  if_ne	add	fp, #20
100cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
100d0     14 4E 85 51 |  if_ne	sub	fp, #20
100d4     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
100d8     A7 14 68 AC |  if_e	wrlong	#10, fp
100dc     08 4E 05 A1 |  if_e	add	fp, #8
100e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
100e4     08 4E 85 A1 |  if_e	sub	fp, #8
100e8     38 01 90 AD |  if_e	jmp	#LR__1275
100ec                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
100ec     08 4E 05 F1 | 	add	fp, #8
100f0     A7 14 02 FB | 	rdlong	arg02, fp
100f4     08 4E 85 F1 | 	sub	fp, #8
100f8     1C 14 0E F2 | 	cmp	arg02, #28 wz
100fc     28 00 90 5D |  if_ne	jmp	#LR__1270
10100     08 4E 05 F1 | 	add	fp, #8
10104     A7 3C 68 FC | 	wrlong	#30, fp
10108     08 4E 85 F1 | 	sub	fp, #8
1010c     A7 12 02 FB | 	rdlong	arg01, fp
10110     09 13 52 F6 | 	abs	arg01, arg01 wc
10114     1F 20 C6 C9 |  if_b	decod	local02, #31
10118     00 20 06 36 |  if_ae	mov	local02, #0
1011c     98 E4 B0 FD | 	call	#__system___float_fromuns
10120     10 FB 61 F5 | 	xor	result1, local02
10124     A7 FA 61 FC | 	wrlong	result1, fp
10128                 | LR__1270
10128                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10128     08 4E 05 F1 | 	add	fp, #8
1012c     A7 14 02 FB | 	rdlong	arg02, fp
10130     08 4E 85 F1 | 	sub	fp, #8
10134     1D 14 0E F2 | 	cmp	arg02, #29 wz
10138     18 00 90 5D |  if_ne	jmp	#LR__1271
1013c     08 4E 05 F1 | 	add	fp, #8
10140     A7 3C 68 FC | 	wrlong	#30, fp
10144     08 4E 85 F1 | 	sub	fp, #8
10148     A7 12 02 FB | 	rdlong	arg01, fp
1014c     68 E4 B0 FD | 	call	#__system___float_fromuns
10150     A7 FA 61 FC | 	wrlong	result1, fp
10154                 | LR__1271
10154                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10154     14 4E 05 F1 | 	add	fp, #20
10158     A7 14 02 FB | 	rdlong	arg02, fp
1015c     14 4E 85 F1 | 	sub	fp, #20
10160     1C 14 0E F2 | 	cmp	arg02, #28 wz
10164     34 00 90 5D |  if_ne	jmp	#LR__1272
10168     14 4E 05 F1 | 	add	fp, #20
1016c     A7 3C 68 FC | 	wrlong	#30, fp
10170     08 4E 85 F1 | 	sub	fp, #8
10174     A7 12 02 FB | 	rdlong	arg01, fp
10178     0C 4E 85 F1 | 	sub	fp, #12
1017c     09 13 52 F6 | 	abs	arg01, arg01 wc
10180     1F 20 C6 C9 |  if_b	decod	local02, #31
10184     00 20 06 36 |  if_ae	mov	local02, #0
10188     2C E4 B0 FD | 	call	#__system___float_fromuns
1018c     10 FB 61 F5 | 	xor	result1, local02
10190     0C 4E 05 F1 | 	add	fp, #12
10194     A7 FA 61 FC | 	wrlong	result1, fp
10198     0C 4E 85 F1 | 	sub	fp, #12
1019c                 | LR__1272
1019c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1019c     14 4E 05 F1 | 	add	fp, #20
101a0     A7 14 02 FB | 	rdlong	arg02, fp
101a4     14 4E 85 F1 | 	sub	fp, #20
101a8     1D 14 0E F2 | 	cmp	arg02, #29 wz
101ac     24 00 90 5D |  if_ne	jmp	#LR__1273
101b0     14 4E 05 F1 | 	add	fp, #20
101b4     A7 3C 68 FC | 	wrlong	#30, fp
101b8     08 4E 85 F1 | 	sub	fp, #8
101bc     A7 12 02 FB | 	rdlong	arg01, fp
101c0     0C 4E 85 F1 | 	sub	fp, #12
101c4     F0 E3 B0 FD | 	call	#__system___float_fromuns
101c8     0C 4E 05 F1 | 	add	fp, #12
101cc     A7 FA 61 FC | 	wrlong	result1, fp
101d0     0C 4E 85 F1 | 	sub	fp, #12
101d4                 | LR__1273
101d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
101d4     08 4E 05 F1 | 	add	fp, #8
101d8     A7 14 02 FB | 	rdlong	arg02, fp
101dc     08 4E 85 F1 | 	sub	fp, #8
101e0     1E 14 0E F2 | 	cmp	arg02, #30 wz
101e4     14 4E 05 A1 |  if_e	add	fp, #20
101e8     A7 1E 02 AB |  if_e	rdlong	local01, fp
101ec     14 4E 85 A1 |  if_e	sub	fp, #20
101f0     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
101f4     1C 00 90 5D |  if_ne	jmp	#LR__1274
101f8     A7 12 02 FB | 	rdlong	arg01, fp
101fc     0C 4E 05 F1 | 	add	fp, #12
10200     A7 14 02 FB | 	rdlong	arg02, fp
10204     0C 4E 85 F1 | 	sub	fp, #12
10208     B4 E9 B0 FD | 	call	#__system___float_div
1020c     A7 FA 61 FC | 	wrlong	result1, fp
10210     10 00 90 FD | 	jmp	#LR__1275
10214                 | LR__1274
10214     A7 16 68 FC | 	wrlong	#11, fp
10218     08 4E 05 F1 | 	add	fp, #8
1021c     A7 FE 69 FC | 	wrlong	#255, fp
10220     08 4E 85 F1 | 	sub	fp, #8
10224                 | LR__1275
10224     A7 12 02 F6 | 	mov	arg01, fp
10228     F4 9E BF FD | 	call	#_push
1022c     A7 F0 03 F6 | 	mov	ptra, fp
10230     B2 00 A0 FD | 	call	#popregs_
10234                 | _do_fdiv_ret
10234     2D 00 64 FD | 	ret
10238                 | 
10238                 | ' 
10238                 | ' 
10238                 | ' sub do_mod 
10238                 | _do_mod
10238     01 4A 05 F6 | 	mov	COUNT_, #1
1023c     A8 00 A0 FD | 	call	#pushregs_
10240     18 F0 07 F1 | 	add	ptra, #24
10244     40 9E BF FD | 	call	#_pop
10248     FD 66 02 F6 | 	mov	muldivb_, result1
1024c     FE 64 02 F6 | 	mov	muldiva_, result2
10250     FF 1E 02 F6 | 	mov	local01, result3
10254     0C 4E 05 F1 | 	add	fp, #12
10258     A7 66 62 FC | 	wrlong	muldivb_, fp
1025c     04 4E 05 F1 | 	add	fp, #4
10260     A7 64 62 FC | 	wrlong	muldiva_, fp
10264     04 4E 05 F1 | 	add	fp, #4
10268     A7 1E 62 FC | 	wrlong	local01, fp
1026c     14 4E 85 F1 | 	sub	fp, #20
10270     14 9E BF FD | 	call	#_pop
10274     A7 FA 61 FC | 	wrlong	result1, fp
10278     04 4E 05 F1 | 	add	fp, #4
1027c     A7 FC 61 FC | 	wrlong	result2, fp
10280     04 4E 05 F1 | 	add	fp, #4
10284     A7 FE 61 FC | 	wrlong	result3, fp
10288                 | ' 
10288                 | ' t2=pop()
10288                 | ' t1=pop()
10288                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
10288     08 4E 85 F1 | 	sub	fp, #8
1028c     1F FE 0D F2 | 	cmp	result3, #31 wz
10290     14 4E 05 51 |  if_ne	add	fp, #20
10294     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10298     14 4E 85 51 |  if_ne	sub	fp, #20
1029c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
102a0     A7 14 68 AC |  if_e	wrlong	#10, fp
102a4     08 4E 05 A1 |  if_e	add	fp, #8
102a8     A7 FE 69 AC |  if_e	wrlong	#255, fp
102ac     08 4E 85 A1 |  if_e	sub	fp, #8
102b0     90 01 90 AD |  if_e	jmp	#LR__1286
102b4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
102b4     08 4E 05 F1 | 	add	fp, #8
102b8     A7 66 02 FB | 	rdlong	muldivb_, fp
102bc     08 4E 85 F1 | 	sub	fp, #8
102c0     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
102c4     1C 00 90 5D |  if_ne	jmp	#LR__1280
102c8     08 4E 05 F1 | 	add	fp, #8
102cc     A7 38 68 FC | 	wrlong	#28, fp
102d0     08 4E 85 F1 | 	sub	fp, #8
102d4     A7 12 02 FB | 	rdlong	arg01, fp
102d8     00 14 06 F6 | 	mov	arg02, #0
102dc     A4 EB B0 FD | 	call	#__system___float_tointeger
102e0     A7 FA 61 FC | 	wrlong	result1, fp
102e4                 | LR__1280
102e4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
102e4     14 4E 05 F1 | 	add	fp, #20
102e8     A7 66 02 FB | 	rdlong	muldivb_, fp
102ec     14 4E 85 F1 | 	sub	fp, #20
102f0     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
102f4     28 00 90 5D |  if_ne	jmp	#LR__1281
102f8     14 4E 05 F1 | 	add	fp, #20
102fc     A7 38 68 FC | 	wrlong	#28, fp
10300     08 4E 85 F1 | 	sub	fp, #8
10304     A7 12 02 FB | 	rdlong	arg01, fp
10308     0C 4E 85 F1 | 	sub	fp, #12
1030c     00 14 06 F6 | 	mov	arg02, #0
10310     70 EB B0 FD | 	call	#__system___float_tointeger
10314     0C 4E 05 F1 | 	add	fp, #12
10318     A7 FA 61 FC | 	wrlong	result1, fp
1031c     0C 4E 85 F1 | 	sub	fp, #12
10320                 | LR__1281
10320                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
10320     08 4E 05 F1 | 	add	fp, #8
10324     A7 66 02 FB | 	rdlong	muldivb_, fp
10328     08 4E 85 F1 | 	sub	fp, #8
1032c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10330     14 4E 05 A1 |  if_e	add	fp, #20
10334     A7 1E 02 AB |  if_e	rdlong	local01, fp
10338     14 4E 85 A1 |  if_e	sub	fp, #20
1033c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10340     20 00 90 5D |  if_ne	jmp	#LR__1282
10344     0C 4E 05 F1 | 	add	fp, #12
10348     A7 1E 02 FB | 	rdlong	local01, fp
1034c     0C 4E 85 F1 | 	sub	fp, #12
10350     A7 66 02 FB | 	rdlong	muldivb_, fp
10354     0F 67 12 FD | 	qdiv	muldivb_, local01
10358     19 1E 62 FD | 	getqy	local01
1035c     A7 1E 62 FC | 	wrlong	local01, fp
10360     E0 00 90 FD | 	jmp	#LR__1286
10364                 | LR__1282
10364                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
10364     08 4E 05 F1 | 	add	fp, #8
10368     A7 66 02 FB | 	rdlong	muldivb_, fp
1036c     08 4E 85 F1 | 	sub	fp, #8
10370     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10374     14 4E 05 A1 |  if_e	add	fp, #20
10378     A7 1E 02 AB |  if_e	rdlong	local01, fp
1037c     14 4E 85 A1 |  if_e	sub	fp, #20
10380     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10384     2C 00 90 5D |  if_ne	jmp	#LR__1283
10388     0C 4E 05 F1 | 	add	fp, #12
1038c     A7 1E 02 FB | 	rdlong	local01, fp
10390     0C 4E 85 F1 | 	sub	fp, #12
10394     A7 66 02 FB | 	rdlong	muldivb_, fp
10398     0F 67 12 FD | 	qdiv	muldivb_, local01
1039c     19 1E 62 FD | 	getqy	local01
103a0     A7 1E 62 FC | 	wrlong	local01, fp
103a4     08 4E 05 F1 | 	add	fp, #8
103a8     A7 38 68 FC | 	wrlong	#28, fp
103ac     08 4E 85 F1 | 	sub	fp, #8
103b0     90 00 90 FD | 	jmp	#LR__1286
103b4                 | LR__1283
103b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
103b4     08 4E 05 F1 | 	add	fp, #8
103b8     A7 66 02 FB | 	rdlong	muldivb_, fp
103bc     08 4E 85 F1 | 	sub	fp, #8
103c0     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
103c4     14 4E 05 A1 |  if_e	add	fp, #20
103c8     A7 1E 02 AB |  if_e	rdlong	local01, fp
103cc     14 4E 85 A1 |  if_e	sub	fp, #20
103d0     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
103d4     1C 00 90 5D |  if_ne	jmp	#LR__1284
103d8     A7 64 02 FB | 	rdlong	muldiva_, fp
103dc     0C 4E 05 F1 | 	add	fp, #12
103e0     A7 66 02 FB | 	rdlong	muldivb_, fp
103e4     0C 4E 85 F1 | 	sub	fp, #12
103e8     BA 00 A0 FD | 	call	#divide_
103ec     A7 64 62 FC | 	wrlong	muldiva_, fp
103f0     50 00 90 FD | 	jmp	#LR__1286
103f4                 | LR__1284
103f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
103f4     08 4E 05 F1 | 	add	fp, #8
103f8     A7 66 02 FB | 	rdlong	muldivb_, fp
103fc     08 4E 85 F1 | 	sub	fp, #8
10400     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10404     14 4E 05 A1 |  if_e	add	fp, #20
10408     A7 1E 02 AB |  if_e	rdlong	local01, fp
1040c     14 4E 85 A1 |  if_e	sub	fp, #20
10410     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10414     1C 00 90 5D |  if_ne	jmp	#LR__1285
10418     A7 64 02 FB | 	rdlong	muldiva_, fp
1041c     0C 4E 05 F1 | 	add	fp, #12
10420     A7 66 02 FB | 	rdlong	muldivb_, fp
10424     0C 4E 85 F1 | 	sub	fp, #12
10428     BA 00 A0 FD | 	call	#divide_
1042c     A7 64 62 FC | 	wrlong	muldiva_, fp
10430     10 00 90 FD | 	jmp	#LR__1286
10434                 | LR__1285
10434     A7 16 68 FC | 	wrlong	#11, fp
10438     08 4E 05 F1 | 	add	fp, #8
1043c     A7 FE 69 FC | 	wrlong	#255, fp
10440     08 4E 85 F1 | 	sub	fp, #8
10444                 | LR__1286
10444     A7 12 02 F6 | 	mov	arg01, fp
10448     D4 9C BF FD | 	call	#_push
1044c     A7 F0 03 F6 | 	mov	ptra, fp
10450     B2 00 A0 FD | 	call	#popregs_
10454                 | _do_mod_ret
10454     2D 00 64 FD | 	ret
10458                 | 
10458                 | ' 
10458                 | ' sub do_shl 
10458                 | _do_shl
10458     03 4A 05 F6 | 	mov	COUNT_, #3
1045c     A8 00 A0 FD | 	call	#pushregs_
10460     18 F0 07 F1 | 	add	ptra, #24
10464     20 9C BF FD | 	call	#_pop
10468     FD 12 02 F6 | 	mov	arg01, result1
1046c     FE 1E 02 F6 | 	mov	local01, result2
10470     FF 20 02 F6 | 	mov	local02, result3
10474     0C 4E 05 F1 | 	add	fp, #12
10478     A7 12 62 FC | 	wrlong	arg01, fp
1047c     04 4E 05 F1 | 	add	fp, #4
10480     A7 1E 62 FC | 	wrlong	local01, fp
10484     04 4E 05 F1 | 	add	fp, #4
10488     A7 20 62 FC | 	wrlong	local02, fp
1048c     14 4E 85 F1 | 	sub	fp, #20
10490     F4 9B BF FD | 	call	#_pop
10494     FF 22 02 F6 | 	mov	local03, result3
10498     A7 FA 61 FC | 	wrlong	result1, fp
1049c     04 4E 05 F1 | 	add	fp, #4
104a0     A7 FC 61 FC | 	wrlong	result2, fp
104a4     04 4E 05 F1 | 	add	fp, #4
104a8     A7 22 62 FC | 	wrlong	local03, fp
104ac                 | ' 
104ac                 | ' t2=pop()
104ac                 | ' t1=pop()
104ac                 | ' 
104ac                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
104ac     08 4E 85 F1 | 	sub	fp, #8
104b0     1C 22 0E F2 | 	cmp	local03, #28 wz
104b4     A7 22 02 AB |  if_e	rdlong	local03, fp
104b8     A7 22 62 AC |  if_e	wrlong	local03, fp
104bc     08 4E 05 A1 |  if_e	add	fp, #8
104c0     A7 3A 68 AC |  if_e	wrlong	#29, fp
104c4     08 4E 85 A1 |  if_e	sub	fp, #8
104c8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
104c8     14 4E 05 F1 | 	add	fp, #20
104cc     A7 22 02 FB | 	rdlong	local03, fp
104d0     14 4E 85 F1 | 	sub	fp, #20
104d4     1C 22 0E F2 | 	cmp	local03, #28 wz
104d8     18 00 90 5D |  if_ne	jmp	#LR__1290
104dc     0C 4E 05 F1 | 	add	fp, #12
104e0     A7 22 02 FB | 	rdlong	local03, fp
104e4     A7 22 62 FC | 	wrlong	local03, fp
104e8     08 4E 05 F1 | 	add	fp, #8
104ec     A7 3A 68 FC | 	wrlong	#29, fp
104f0     14 4E 85 F1 | 	sub	fp, #20
104f4                 | LR__1290
104f4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
104f4     08 4E 05 F1 | 	add	fp, #8
104f8     A7 22 02 FB | 	rdlong	local03, fp
104fc     08 4E 85 F1 | 	sub	fp, #8
10500     1F 22 0E F2 | 	cmp	local03, #31 wz
10504     14 4E 05 51 |  if_ne	add	fp, #20
10508     A7 20 02 5B |  if_ne	rdlong	local02, fp
1050c     14 4E 85 51 |  if_ne	sub	fp, #20
10510     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10514     08 4E 05 51 |  if_ne	add	fp, #8
10518     A7 22 02 5B |  if_ne	rdlong	local03, fp
1051c     08 4E 85 51 |  if_ne	sub	fp, #8
10520     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10524     14 4E 05 51 |  if_ne	add	fp, #20
10528     14 4E 85 51 |  if_ne	sub	fp, #20
1052c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10530     A7 0C 68 AC |  if_e	wrlong	#6, fp
10534     08 4E 05 A1 |  if_e	add	fp, #8
10538     A7 FE 69 AC |  if_e	wrlong	#255, fp
1053c     08 4E 85 A1 |  if_e	sub	fp, #8
10540     18 00 90 AD |  if_e	jmp	#LR__1291
10544     A7 22 02 FB | 	rdlong	local03, fp
10548     0C 4E 05 F1 | 	add	fp, #12
1054c     A7 1E 02 FB | 	rdlong	local01, fp
10550     0C 4E 85 F1 | 	sub	fp, #12
10554     0F 23 62 F0 | 	shl	local03, local01
10558     A7 22 62 FC | 	wrlong	local03, fp
1055c                 | LR__1291
1055c     A7 12 02 F6 | 	mov	arg01, fp
10560     BC 9B BF FD | 	call	#_push
10564     A7 F0 03 F6 | 	mov	ptra, fp
10568     B2 00 A0 FD | 	call	#popregs_
1056c                 | _do_shl_ret
1056c     2D 00 64 FD | 	ret
10570                 | 
10570                 | ' 
10570                 | ' sub do_shr 
10570                 | _do_shr
10570     03 4A 05 F6 | 	mov	COUNT_, #3
10574     A8 00 A0 FD | 	call	#pushregs_
10578     18 F0 07 F1 | 	add	ptra, #24
1057c     08 9B BF FD | 	call	#_pop
10580     FD 12 02 F6 | 	mov	arg01, result1
10584     FE 1E 02 F6 | 	mov	local01, result2
10588     FF 20 02 F6 | 	mov	local02, result3
1058c     0C 4E 05 F1 | 	add	fp, #12
10590     A7 12 62 FC | 	wrlong	arg01, fp
10594     04 4E 05 F1 | 	add	fp, #4
10598     A7 1E 62 FC | 	wrlong	local01, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 20 62 FC | 	wrlong	local02, fp
105a4     14 4E 85 F1 | 	sub	fp, #20
105a8     DC 9A BF FD | 	call	#_pop
105ac     FF 22 02 F6 | 	mov	local03, result3
105b0     A7 FA 61 FC | 	wrlong	result1, fp
105b4     04 4E 05 F1 | 	add	fp, #4
105b8     A7 FC 61 FC | 	wrlong	result2, fp
105bc     04 4E 05 F1 | 	add	fp, #4
105c0     A7 22 62 FC | 	wrlong	local03, fp
105c4                 | ' t2=pop()
105c4                 | ' t1=pop()
105c4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
105c4     08 4E 85 F1 | 	sub	fp, #8
105c8     1C 22 0E F2 | 	cmp	local03, #28 wz
105cc     A7 22 02 AB |  if_e	rdlong	local03, fp
105d0     A7 22 62 AC |  if_e	wrlong	local03, fp
105d4     08 4E 05 A1 |  if_e	add	fp, #8
105d8     A7 3A 68 AC |  if_e	wrlong	#29, fp
105dc     08 4E 85 A1 |  if_e	sub	fp, #8
105e0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
105e0     14 4E 05 F1 | 	add	fp, #20
105e4     A7 22 02 FB | 	rdlong	local03, fp
105e8     14 4E 85 F1 | 	sub	fp, #20
105ec     1C 22 0E F2 | 	cmp	local03, #28 wz
105f0     18 00 90 5D |  if_ne	jmp	#LR__1300
105f4     0C 4E 05 F1 | 	add	fp, #12
105f8     A7 22 02 FB | 	rdlong	local03, fp
105fc     A7 22 62 FC | 	wrlong	local03, fp
10600     08 4E 05 F1 | 	add	fp, #8
10604     A7 3A 68 FC | 	wrlong	#29, fp
10608     14 4E 85 F1 | 	sub	fp, #20
1060c                 | LR__1300
1060c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1060c     08 4E 05 F1 | 	add	fp, #8
10610     A7 22 02 FB | 	rdlong	local03, fp
10614     08 4E 85 F1 | 	sub	fp, #8
10618     1F 22 0E F2 | 	cmp	local03, #31 wz
1061c     14 4E 05 51 |  if_ne	add	fp, #20
10620     A7 20 02 5B |  if_ne	rdlong	local02, fp
10624     14 4E 85 51 |  if_ne	sub	fp, #20
10628     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1062c     08 4E 05 51 |  if_ne	add	fp, #8
10630     A7 22 02 5B |  if_ne	rdlong	local03, fp
10634     08 4E 85 51 |  if_ne	sub	fp, #8
10638     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1063c     14 4E 05 51 |  if_ne	add	fp, #20
10640     14 4E 85 51 |  if_ne	sub	fp, #20
10644     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10648     A7 0C 68 AC |  if_e	wrlong	#6, fp
1064c     08 4E 05 A1 |  if_e	add	fp, #8
10650     A7 FE 69 AC |  if_e	wrlong	#255, fp
10654     08 4E 85 A1 |  if_e	sub	fp, #8
10658     18 00 90 AD |  if_e	jmp	#LR__1301
1065c     A7 22 02 FB | 	rdlong	local03, fp
10660     0C 4E 05 F1 | 	add	fp, #12
10664     A7 1E 02 FB | 	rdlong	local01, fp
10668     0C 4E 85 F1 | 	sub	fp, #12
1066c     0F 23 42 F0 | 	shr	local03, local01
10670     A7 22 62 FC | 	wrlong	local03, fp
10674                 | LR__1301
10674     A7 12 02 F6 | 	mov	arg01, fp
10678     A4 9A BF FD | 	call	#_push
1067c     A7 F0 03 F6 | 	mov	ptra, fp
10680     B2 00 A0 FD | 	call	#popregs_
10684                 | _do_shr_ret
10684     2D 00 64 FD | 	ret
10688                 | 
10688                 | ' 
10688                 | ' sub do_power 
10688                 | _do_power
10688     02 4A 05 F6 | 	mov	COUNT_, #2
1068c     A8 00 A0 FD | 	call	#pushregs_
10690     18 F0 07 F1 | 	add	ptra, #24
10694     F0 99 BF FD | 	call	#_pop
10698     FD 14 02 F6 | 	mov	arg02, result1
1069c     FE 12 02 F6 | 	mov	arg01, result2
106a0     FF 1E 02 F6 | 	mov	local01, result3
106a4     0C 4E 05 F1 | 	add	fp, #12
106a8     A7 14 62 FC | 	wrlong	arg02, fp
106ac     04 4E 05 F1 | 	add	fp, #4
106b0     A7 12 62 FC | 	wrlong	arg01, fp
106b4     04 4E 05 F1 | 	add	fp, #4
106b8     A7 1E 62 FC | 	wrlong	local01, fp
106bc     14 4E 85 F1 | 	sub	fp, #20
106c0     C4 99 BF FD | 	call	#_pop
106c4     A7 FA 61 FC | 	wrlong	result1, fp
106c8     04 4E 05 F1 | 	add	fp, #4
106cc     A7 FC 61 FC | 	wrlong	result2, fp
106d0     04 4E 05 F1 | 	add	fp, #4
106d4     A7 FE 61 FC | 	wrlong	result3, fp
106d8                 | ' t2=pop()
106d8                 | ' t1=pop()
106d8                 | ' 
106d8                 | ' 
106d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
106d8     08 4E 85 F1 | 	sub	fp, #8
106dc     1F FE 0D F2 | 	cmp	result3, #31 wz
106e0     14 4E 05 51 |  if_ne	add	fp, #20
106e4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
106e8     14 4E 85 51 |  if_ne	sub	fp, #20
106ec     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
106f0     A7 18 68 AC |  if_e	wrlong	#12, fp
106f4     08 4E 05 A1 |  if_e	add	fp, #8
106f8     A7 FE 69 AC |  if_e	wrlong	#255, fp
106fc     08 4E 85 A1 |  if_e	sub	fp, #8
10700     38 01 90 AD |  if_e	jmp	#LR__1315
10704                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10704     08 4E 05 F1 | 	add	fp, #8
10708     A7 14 02 FB | 	rdlong	arg02, fp
1070c     08 4E 85 F1 | 	sub	fp, #8
10710     1C 14 0E F2 | 	cmp	arg02, #28 wz
10714     28 00 90 5D |  if_ne	jmp	#LR__1310
10718     08 4E 05 F1 | 	add	fp, #8
1071c     A7 3C 68 FC | 	wrlong	#30, fp
10720     08 4E 85 F1 | 	sub	fp, #8
10724     A7 12 02 FB | 	rdlong	arg01, fp
10728     09 13 52 F6 | 	abs	arg01, arg01 wc
1072c     1F 20 C6 C9 |  if_b	decod	local02, #31
10730     00 20 06 36 |  if_ae	mov	local02, #0
10734     80 DE B0 FD | 	call	#__system___float_fromuns
10738     10 FB 61 F5 | 	xor	result1, local02
1073c     A7 FA 61 FC | 	wrlong	result1, fp
10740                 | LR__1310
10740                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
10740     08 4E 05 F1 | 	add	fp, #8
10744     A7 14 02 FB | 	rdlong	arg02, fp
10748     08 4E 85 F1 | 	sub	fp, #8
1074c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10750     18 00 90 5D |  if_ne	jmp	#LR__1311
10754     08 4E 05 F1 | 	add	fp, #8
10758     A7 3C 68 FC | 	wrlong	#30, fp
1075c     08 4E 85 F1 | 	sub	fp, #8
10760     A7 12 02 FB | 	rdlong	arg01, fp
10764     50 DE B0 FD | 	call	#__system___float_fromuns
10768     A7 FA 61 FC | 	wrlong	result1, fp
1076c                 | LR__1311
1076c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1076c     14 4E 05 F1 | 	add	fp, #20
10770     A7 14 02 FB | 	rdlong	arg02, fp
10774     14 4E 85 F1 | 	sub	fp, #20
10778     1C 14 0E F2 | 	cmp	arg02, #28 wz
1077c     34 00 90 5D |  if_ne	jmp	#LR__1312
10780     14 4E 05 F1 | 	add	fp, #20
10784     A7 3C 68 FC | 	wrlong	#30, fp
10788     08 4E 85 F1 | 	sub	fp, #8
1078c     A7 12 02 FB | 	rdlong	arg01, fp
10790     0C 4E 85 F1 | 	sub	fp, #12
10794     09 13 52 F6 | 	abs	arg01, arg01 wc
10798     1F 20 C6 C9 |  if_b	decod	local02, #31
1079c     00 20 06 36 |  if_ae	mov	local02, #0
107a0     14 DE B0 FD | 	call	#__system___float_fromuns
107a4     10 FB 61 F5 | 	xor	result1, local02
107a8     0C 4E 05 F1 | 	add	fp, #12
107ac     A7 FA 61 FC | 	wrlong	result1, fp
107b0     0C 4E 85 F1 | 	sub	fp, #12
107b4                 | LR__1312
107b4                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
107b4     14 4E 05 F1 | 	add	fp, #20
107b8     A7 14 02 FB | 	rdlong	arg02, fp
107bc     14 4E 85 F1 | 	sub	fp, #20
107c0     1D 14 0E F2 | 	cmp	arg02, #29 wz
107c4     24 00 90 5D |  if_ne	jmp	#LR__1313
107c8     14 4E 05 F1 | 	add	fp, #20
107cc     A7 3C 68 FC | 	wrlong	#30, fp
107d0     08 4E 85 F1 | 	sub	fp, #8
107d4     A7 12 02 FB | 	rdlong	arg01, fp
107d8     0C 4E 85 F1 | 	sub	fp, #12
107dc     D8 DD B0 FD | 	call	#__system___float_fromuns
107e0     0C 4E 05 F1 | 	add	fp, #12
107e4     A7 FA 61 FC | 	wrlong	result1, fp
107e8     0C 4E 85 F1 | 	sub	fp, #12
107ec                 | LR__1313
107ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
107ec     08 4E 05 F1 | 	add	fp, #8
107f0     A7 14 02 FB | 	rdlong	arg02, fp
107f4     08 4E 85 F1 | 	sub	fp, #8
107f8     1E 14 0E F2 | 	cmp	arg02, #30 wz
107fc     14 4E 05 A1 |  if_e	add	fp, #20
10800     A7 1E 02 AB |  if_e	rdlong	local01, fp
10804     14 4E 85 A1 |  if_e	sub	fp, #20
10808     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1080c     1C 00 90 5D |  if_ne	jmp	#LR__1314
10810     A7 12 02 FB | 	rdlong	arg01, fp
10814     0C 4E 05 F1 | 	add	fp, #12
10818     A7 14 02 FB | 	rdlong	arg02, fp
1081c     0C 4E 85 F1 | 	sub	fp, #12
10820     7C F0 B0 FD | 	call	#__system____builtin_powf
10824     A7 FA 61 FC | 	wrlong	result1, fp
10828     10 00 90 FD | 	jmp	#LR__1315
1082c                 | LR__1314
1082c     A7 1A 68 FC | 	wrlong	#13, fp
10830     08 4E 05 F1 | 	add	fp, #8
10834     A7 FE 69 FC | 	wrlong	#255, fp
10838     08 4E 85 F1 | 	sub	fp, #8
1083c                 | LR__1315
1083c     A7 12 02 F6 | 	mov	arg01, fp
10840     DC 98 BF FD | 	call	#_push
10844     A7 F0 03 F6 | 	mov	ptra, fp
10848     B2 00 A0 FD | 	call	#popregs_
1084c                 | _do_power_ret
1084c     2D 00 64 FD | 	ret
10850                 | 
10850                 | ' 
10850                 | ' 
10850                 | ' sub do_eq
10850                 | _do_eq
10850     05 4A 05 F6 | 	mov	COUNT_, #5
10854     A8 00 A0 FD | 	call	#pushregs_
10858     18 F0 07 F1 | 	add	ptra, #24
1085c     28 98 BF FD | 	call	#_pop
10860     FD 1E 02 F6 | 	mov	local01, result1
10864     FE 20 02 F6 | 	mov	local02, result2
10868     FF 22 02 F6 | 	mov	local03, result3
1086c     0C 4E 05 F1 | 	add	fp, #12
10870     A7 1E 62 FC | 	wrlong	local01, fp
10874     04 4E 05 F1 | 	add	fp, #4
10878     A7 20 62 FC | 	wrlong	local02, fp
1087c     04 4E 05 F1 | 	add	fp, #4
10880     A7 22 62 FC | 	wrlong	local03, fp
10884     14 4E 85 F1 | 	sub	fp, #20
10888     FC 97 BF FD | 	call	#_pop
1088c     FF 22 02 F6 | 	mov	local03, result3
10890     A7 FA 61 FC | 	wrlong	result1, fp
10894     04 4E 05 F1 | 	add	fp, #4
10898     A7 FC 61 FC | 	wrlong	result2, fp
1089c     04 4E 05 F1 | 	add	fp, #4
108a0     A7 22 62 FC | 	wrlong	local03, fp
108a4                 | ' t2=pop()
108a4                 | ' t1=pop()
108a4                 | ' 
108a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
108a4     08 4E 85 F1 | 	sub	fp, #8
108a8     1F 22 0E F2 | 	cmp	local03, #31 wz
108ac     14 4E 05 A1 |  if_e	add	fp, #20
108b0     A7 24 02 AB |  if_e	rdlong	local04, fp
108b4     14 4E 85 A1 |  if_e	sub	fp, #20
108b8     12 23 02 A6 |  if_e	mov	local03, local04
108bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
108c0     28 00 90 5D |  if_ne	jmp	#LR__1320
108c4     00 1E 06 F6 | 	mov	local01, #0
108c8     A7 12 02 FB | 	rdlong	arg01, fp
108cc     0C 4E 05 F1 | 	add	fp, #12
108d0     A7 14 02 FB | 	rdlong	arg02, fp
108d4     0C 4E 85 F1 | 	sub	fp, #12
108d8     8C B5 B0 FD | 	call	#__system___string_cmp
108dc     00 FA 0D F2 | 	cmp	result1, #0 wz
108e0     00 1E 26 A6 |  if_e	not	local01, #0
108e4     A7 1E 62 FC | 	wrlong	local01, fp
108e8     1C 04 90 FD | 	jmp	#LR__1333
108ec                 | LR__1320
108ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
108ec     08 4E 05 F1 | 	add	fp, #8
108f0     A7 1E 02 FB | 	rdlong	local01, fp
108f4     08 4E 85 F1 | 	sub	fp, #8
108f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
108fc     14 4E 05 A1 |  if_e	add	fp, #20
10900     A7 24 02 AB |  if_e	rdlong	local04, fp
10904     14 4E 85 A1 |  if_e	sub	fp, #20
10908     12 23 02 A6 |  if_e	mov	local03, local04
1090c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10910     2C 00 90 5D |  if_ne	jmp	#LR__1321
10914     00 1E 06 F6 | 	mov	local01, #0
10918     A7 12 02 FB | 	rdlong	arg01, fp
1091c     0C 4E 05 F1 | 	add	fp, #12
10920     A7 14 02 FB | 	rdlong	arg02, fp
10924     0C 4E 85 F1 | 	sub	fp, #12
10928     01 16 06 F6 | 	mov	arg03, #1
1092c     C0 E4 B0 FD | 	call	#__system___float_cmp
10930     00 FA 0D F2 | 	cmp	result1, #0 wz
10934     00 1E 26 A6 |  if_e	not	local01, #0
10938     A7 1E 62 FC | 	wrlong	local01, fp
1093c     C8 03 90 FD | 	jmp	#LR__1333
10940                 | LR__1321
10940                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
10940     08 4E 05 F1 | 	add	fp, #8
10944     A7 1E 02 FB | 	rdlong	local01, fp
10948     08 4E 85 F1 | 	sub	fp, #8
1094c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10950     14 4E 05 A1 |  if_e	add	fp, #20
10954     A7 24 02 AB |  if_e	rdlong	local04, fp
10958     14 4E 85 A1 |  if_e	sub	fp, #20
1095c     12 23 02 A6 |  if_e	mov	local03, local04
10960     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10964     48 00 90 5D |  if_ne	jmp	#LR__1322
10968     00 1E 06 F6 | 	mov	local01, #0
1096c     A7 20 02 FB | 	rdlong	local02, fp
10970     0C 4E 05 F1 | 	add	fp, #12
10974     A7 12 02 FB | 	rdlong	arg01, fp
10978     0C 4E 85 F1 | 	sub	fp, #12
1097c     09 13 52 F6 | 	abs	arg01, arg01 wc
10980     1F 26 C6 C9 |  if_b	decod	local05, #31
10984     00 26 06 36 |  if_ae	mov	local05, #0
10988     2C DC B0 FD | 	call	#__system___float_fromuns
1098c     13 FB 61 F5 | 	xor	result1, local05
10990     FD 14 02 F6 | 	mov	arg02, result1
10994     10 13 02 F6 | 	mov	arg01, local02
10998     01 16 06 F6 | 	mov	arg03, #1
1099c     50 E4 B0 FD | 	call	#__system___float_cmp
109a0     00 FA 0D F2 | 	cmp	result1, #0 wz
109a4     00 1E 26 A6 |  if_e	not	local01, #0
109a8     A7 1E 62 FC | 	wrlong	local01, fp
109ac     58 03 90 FD | 	jmp	#LR__1333
109b0                 | LR__1322
109b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
109b0     08 4E 05 F1 | 	add	fp, #8
109b4     A7 1E 02 FB | 	rdlong	local01, fp
109b8     08 4E 85 F1 | 	sub	fp, #8
109bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
109c0     14 4E 05 A1 |  if_e	add	fp, #20
109c4     A7 24 02 AB |  if_e	rdlong	local04, fp
109c8     14 4E 85 A1 |  if_e	sub	fp, #20
109cc     12 23 02 A6 |  if_e	mov	local03, local04
109d0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
109d4     38 00 90 5D |  if_ne	jmp	#LR__1323
109d8     00 1E 06 F6 | 	mov	local01, #0
109dc     A7 20 02 FB | 	rdlong	local02, fp
109e0     0C 4E 05 F1 | 	add	fp, #12
109e4     A7 12 02 FB | 	rdlong	arg01, fp
109e8     0C 4E 85 F1 | 	sub	fp, #12
109ec     C8 DB B0 FD | 	call	#__system___float_fromuns
109f0     FD 14 02 F6 | 	mov	arg02, result1
109f4     10 13 02 F6 | 	mov	arg01, local02
109f8     01 16 06 F6 | 	mov	arg03, #1
109fc     F0 E3 B0 FD | 	call	#__system___float_cmp
10a00     00 FA 0D F2 | 	cmp	result1, #0 wz
10a04     00 1E 26 A6 |  if_e	not	local01, #0
10a08     A7 1E 62 FC | 	wrlong	local01, fp
10a0c     F8 02 90 FD | 	jmp	#LR__1333
10a10                 | LR__1323
10a10                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
10a10     08 4E 05 F1 | 	add	fp, #8
10a14     A7 1E 02 FB | 	rdlong	local01, fp
10a18     08 4E 85 F1 | 	sub	fp, #8
10a1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a20     14 4E 05 A1 |  if_e	add	fp, #20
10a24     A7 24 02 AB |  if_e	rdlong	local04, fp
10a28     14 4E 85 A1 |  if_e	sub	fp, #20
10a2c     12 23 02 A6 |  if_e	mov	local03, local04
10a30     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10a34     44 00 90 5D |  if_ne	jmp	#LR__1324
10a38     00 1E 06 F6 | 	mov	local01, #0
10a3c     A7 12 02 FB | 	rdlong	arg01, fp
10a40     09 13 52 F6 | 	abs	arg01, arg01 wc
10a44     1F 26 C6 C9 |  if_b	decod	local05, #31
10a48     00 26 06 36 |  if_ae	mov	local05, #0
10a4c     68 DB B0 FD | 	call	#__system___float_fromuns
10a50     13 FB 61 F5 | 	xor	result1, local05
10a54     FD 12 02 F6 | 	mov	arg01, result1
10a58     0C 4E 05 F1 | 	add	fp, #12
10a5c     A7 14 02 FB | 	rdlong	arg02, fp
10a60     0C 4E 85 F1 | 	sub	fp, #12
10a64     01 16 06 F6 | 	mov	arg03, #1
10a68     84 E3 B0 FD | 	call	#__system___float_cmp
10a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
10a70     00 1E 26 A6 |  if_e	not	local01, #0
10a74     A7 1E 62 FC | 	wrlong	local01, fp
10a78     8C 02 90 FD | 	jmp	#LR__1333
10a7c                 | LR__1324
10a7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
10a7c     08 4E 05 F1 | 	add	fp, #8
10a80     A7 1E 02 FB | 	rdlong	local01, fp
10a84     08 4E 85 F1 | 	sub	fp, #8
10a88     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a8c     14 4E 05 A1 |  if_e	add	fp, #20
10a90     A7 24 02 AB |  if_e	rdlong	local04, fp
10a94     14 4E 85 A1 |  if_e	sub	fp, #20
10a98     12 23 02 A6 |  if_e	mov	local03, local04
10a9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10aa0     24 00 90 5D |  if_ne	jmp	#LR__1325
10aa4     00 1E 06 F6 | 	mov	local01, #0
10aa8     A7 20 02 FB | 	rdlong	local02, fp
10aac     0C 4E 05 F1 | 	add	fp, #12
10ab0     A7 22 02 FB | 	rdlong	local03, fp
10ab4     0C 4E 85 F1 | 	sub	fp, #12
10ab8     11 21 0A F2 | 	cmp	local02, local03 wz
10abc     01 1E 66 A6 |  if_e	neg	local01, #1
10ac0     A7 1E 62 FC | 	wrlong	local01, fp
10ac4     40 02 90 FD | 	jmp	#LR__1333
10ac8                 | LR__1325
10ac8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
10ac8     08 4E 05 F1 | 	add	fp, #8
10acc     A7 1E 02 FB | 	rdlong	local01, fp
10ad0     08 4E 85 F1 | 	sub	fp, #8
10ad4     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ad8     14 4E 05 A1 |  if_e	add	fp, #20
10adc     A7 24 02 AB |  if_e	rdlong	local04, fp
10ae0     14 4E 85 A1 |  if_e	sub	fp, #20
10ae4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10ae8     24 00 90 5D |  if_ne	jmp	#LR__1326
10aec     00 1E 06 F6 | 	mov	local01, #0
10af0     A7 20 02 FB | 	rdlong	local02, fp
10af4     0C 4E 05 F1 | 	add	fp, #12
10af8     A7 22 02 FB | 	rdlong	local03, fp
10afc     0C 4E 85 F1 | 	sub	fp, #12
10b00     11 21 0A F2 | 	cmp	local02, local03 wz
10b04     01 1E 66 A6 |  if_e	neg	local01, #1
10b08     A7 1E 62 FC | 	wrlong	local01, fp
10b0c     F8 01 90 FD | 	jmp	#LR__1333
10b10                 | LR__1326
10b10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
10b10     08 4E 05 F1 | 	add	fp, #8
10b14     A7 1E 02 FB | 	rdlong	local01, fp
10b18     08 4E 85 F1 | 	sub	fp, #8
10b1c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b20     14 4E 05 A1 |  if_e	add	fp, #20
10b24     A7 22 02 AB |  if_e	rdlong	local03, fp
10b28     14 4E 85 A1 |  if_e	sub	fp, #20
10b2c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10b30     34 00 90 5D |  if_ne	jmp	#LR__1327
10b34     00 1E 06 F6 | 	mov	local01, #0
10b38     A7 12 02 FB | 	rdlong	arg01, fp
10b3c     78 DA B0 FD | 	call	#__system___float_fromuns
10b40     FD 12 02 F6 | 	mov	arg01, result1
10b44     0C 4E 05 F1 | 	add	fp, #12
10b48     A7 14 02 FB | 	rdlong	arg02, fp
10b4c     0C 4E 85 F1 | 	sub	fp, #12
10b50     01 16 06 F6 | 	mov	arg03, #1
10b54     98 E2 B0 FD | 	call	#__system___float_cmp
10b58     00 FA 0D F2 | 	cmp	result1, #0 wz
10b5c     00 1E 26 A6 |  if_e	not	local01, #0
10b60     A7 1E 62 FC | 	wrlong	local01, fp
10b64     A0 01 90 FD | 	jmp	#LR__1333
10b68                 | LR__1327
10b68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
10b68     08 4E 05 F1 | 	add	fp, #8
10b6c     A7 1E 02 FB | 	rdlong	local01, fp
10b70     08 4E 85 F1 | 	sub	fp, #8
10b74     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b78     14 4E 05 A1 |  if_e	add	fp, #20
10b7c     A7 22 02 AB |  if_e	rdlong	local03, fp
10b80     14 4E 85 A1 |  if_e	sub	fp, #20
10b84     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b88     24 00 90 5D |  if_ne	jmp	#LR__1328
10b8c     00 1E 06 F6 | 	mov	local01, #0
10b90     A7 20 02 FB | 	rdlong	local02, fp
10b94     0C 4E 05 F1 | 	add	fp, #12
10b98     A7 22 02 FB | 	rdlong	local03, fp
10b9c     0C 4E 85 F1 | 	sub	fp, #12
10ba0     11 21 0A F2 | 	cmp	local02, local03 wz
10ba4     01 1E 66 A6 |  if_e	neg	local01, #1
10ba8     A7 1E 62 FC | 	wrlong	local01, fp
10bac     58 01 90 FD | 	jmp	#LR__1333
10bb0                 | LR__1328
10bb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
10bb0     08 4E 05 F1 | 	add	fp, #8
10bb4     A7 1E 02 FB | 	rdlong	local01, fp
10bb8     08 4E 85 F1 | 	sub	fp, #8
10bbc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10bc0     14 4E 05 A1 |  if_e	add	fp, #20
10bc4     A7 22 02 AB |  if_e	rdlong	local03, fp
10bc8     14 4E 85 A1 |  if_e	sub	fp, #20
10bcc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10bd0     24 00 90 5D |  if_ne	jmp	#LR__1329
10bd4     00 1E 06 F6 | 	mov	local01, #0
10bd8     A7 20 02 FB | 	rdlong	local02, fp
10bdc     0C 4E 05 F1 | 	add	fp, #12
10be0     A7 22 02 FB | 	rdlong	local03, fp
10be4     0C 4E 85 F1 | 	sub	fp, #12
10be8     11 21 0A F2 | 	cmp	local02, local03 wz
10bec     01 1E 66 A6 |  if_e	neg	local01, #1
10bf0     A7 1E 62 FC | 	wrlong	local01, fp
10bf4     10 01 90 FD | 	jmp	#LR__1333
10bf8                 | LR__1329
10bf8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
10bf8     08 4E 05 F1 | 	add	fp, #8
10bfc     A7 1E 02 FB | 	rdlong	local01, fp
10c00     08 4E 85 F1 | 	sub	fp, #8
10c04     2B 1E 0E F2 | 	cmp	local01, #43 wz
10c08     14 4E 05 A1 |  if_e	add	fp, #20
10c0c     A7 22 02 AB |  if_e	rdlong	local03, fp
10c10     14 4E 85 A1 |  if_e	sub	fp, #20
10c14     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10c18     30 00 90 5D |  if_ne	jmp	#LR__1330
10c1c     00 1E 06 F6 | 	mov	local01, #0
10c20     A7 12 02 FB | 	rdlong	arg01, fp
10c24     DC D3 BF FD | 	call	#_convertstring
10c28     FD 12 02 F6 | 	mov	arg01, result1
10c2c     0C 4E 05 F1 | 	add	fp, #12
10c30     A7 14 02 FB | 	rdlong	arg02, fp
10c34     0C 4E 85 F1 | 	sub	fp, #12
10c38     2C B2 B0 FD | 	call	#__system___string_cmp
10c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
10c40     00 1E 26 A6 |  if_e	not	local01, #0
10c44     A7 1E 62 FC | 	wrlong	local01, fp
10c48     BC 00 90 FD | 	jmp	#LR__1333
10c4c                 | LR__1330
10c4c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
10c4c     08 4E 05 F1 | 	add	fp, #8
10c50     A7 1E 02 FB | 	rdlong	local01, fp
10c54     08 4E 85 F1 | 	sub	fp, #8
10c58     1F 1E 0E F2 | 	cmp	local01, #31 wz
10c5c     14 4E 05 A1 |  if_e	add	fp, #20
10c60     A7 22 02 AB |  if_e	rdlong	local03, fp
10c64     14 4E 85 A1 |  if_e	sub	fp, #20
10c68     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10c6c     34 00 90 5D |  if_ne	jmp	#LR__1331
10c70     00 1E 06 F6 | 	mov	local01, #0
10c74     A7 20 02 FB | 	rdlong	local02, fp
10c78     0C 4E 05 F1 | 	add	fp, #12
10c7c     A7 12 02 FB | 	rdlong	arg01, fp
10c80     0C 4E 85 F1 | 	sub	fp, #12
10c84     7C D3 BF FD | 	call	#_convertstring
10c88     FD 14 02 F6 | 	mov	arg02, result1
10c8c     10 13 02 F6 | 	mov	arg01, local02
10c90     D4 B1 B0 FD | 	call	#__system___string_cmp
10c94     00 FA 0D F2 | 	cmp	result1, #0 wz
10c98     00 1E 26 A6 |  if_e	not	local01, #0
10c9c     A7 1E 62 FC | 	wrlong	local01, fp
10ca0     64 00 90 FD | 	jmp	#LR__1333
10ca4                 | LR__1331
10ca4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
10ca4     08 4E 05 F1 | 	add	fp, #8
10ca8     A7 1E 02 FB | 	rdlong	local01, fp
10cac     08 4E 85 F1 | 	sub	fp, #8
10cb0     2B 1E 0E F2 | 	cmp	local01, #43 wz
10cb4     14 4E 05 A1 |  if_e	add	fp, #20
10cb8     A7 22 02 AB |  if_e	rdlong	local03, fp
10cbc     14 4E 85 A1 |  if_e	sub	fp, #20
10cc0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10cc4     3C 00 90 5D |  if_ne	jmp	#LR__1332
10cc8     00 1E 06 F6 | 	mov	local01, #0
10ccc     A7 12 02 FB | 	rdlong	arg01, fp
10cd0     30 D3 BF FD | 	call	#_convertstring
10cd4     FD 20 02 F6 | 	mov	local02, result1
10cd8     0C 4E 05 F1 | 	add	fp, #12
10cdc     A7 12 02 FB | 	rdlong	arg01, fp
10ce0     0C 4E 85 F1 | 	sub	fp, #12
10ce4     1C D3 BF FD | 	call	#_convertstring
10ce8     FD 14 02 F6 | 	mov	arg02, result1
10cec     10 13 02 F6 | 	mov	arg01, local02
10cf0     74 B1 B0 FD | 	call	#__system___string_cmp
10cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
10cf8     00 1E 26 A6 |  if_e	not	local01, #0
10cfc     A7 1E 62 FC | 	wrlong	local01, fp
10d00     04 00 90 FD | 	jmp	#LR__1333
10d04                 | LR__1332
10d04     A7 00 68 FC | 	wrlong	#0, fp
10d08                 | LR__1333
10d08     08 4E 05 F1 | 	add	fp, #8
10d0c     A7 38 68 FC | 	wrlong	#28, fp
10d10     08 4E 85 F1 | 	sub	fp, #8
10d14     A7 12 02 F6 | 	mov	arg01, fp
10d18     04 94 BF FD | 	call	#_push
10d1c     A7 F0 03 F6 | 	mov	ptra, fp
10d20     B2 00 A0 FD | 	call	#popregs_
10d24                 | _do_eq_ret
10d24     2D 00 64 FD | 	ret
10d28                 | 
10d28                 | ' 
10d28                 | ' sub do_gt
10d28                 | _do_gt
10d28     05 4A 05 F6 | 	mov	COUNT_, #5
10d2c     A8 00 A0 FD | 	call	#pushregs_
10d30     18 F0 07 F1 | 	add	ptra, #24
10d34     50 93 BF FD | 	call	#_pop
10d38     FD 1E 02 F6 | 	mov	local01, result1
10d3c     FE 20 02 F6 | 	mov	local02, result2
10d40     FF 22 02 F6 | 	mov	local03, result3
10d44     0C 4E 05 F1 | 	add	fp, #12
10d48     A7 1E 62 FC | 	wrlong	local01, fp
10d4c     04 4E 05 F1 | 	add	fp, #4
10d50     A7 20 62 FC | 	wrlong	local02, fp
10d54     04 4E 05 F1 | 	add	fp, #4
10d58     A7 22 62 FC | 	wrlong	local03, fp
10d5c     14 4E 85 F1 | 	sub	fp, #20
10d60     24 93 BF FD | 	call	#_pop
10d64     FF 22 02 F6 | 	mov	local03, result3
10d68     A7 FA 61 FC | 	wrlong	result1, fp
10d6c     04 4E 05 F1 | 	add	fp, #4
10d70     A7 FC 61 FC | 	wrlong	result2, fp
10d74     04 4E 05 F1 | 	add	fp, #4
10d78     A7 22 62 FC | 	wrlong	local03, fp
10d7c                 | ' t2=pop()
10d7c                 | ' t1=pop()
10d7c                 | ' 
10d7c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
10d7c     08 4E 85 F1 | 	sub	fp, #8
10d80     1F 22 0E F2 | 	cmp	local03, #31 wz
10d84     14 4E 05 A1 |  if_e	add	fp, #20
10d88     A7 24 02 AB |  if_e	rdlong	local04, fp
10d8c     14 4E 85 A1 |  if_e	sub	fp, #20
10d90     12 23 02 A6 |  if_e	mov	local03, local04
10d94     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10d98     28 00 90 5D |  if_ne	jmp	#LR__1340
10d9c     00 1E 06 F6 | 	mov	local01, #0
10da0     A7 12 02 FB | 	rdlong	arg01, fp
10da4     0C 4E 05 F1 | 	add	fp, #12
10da8     A7 14 02 FB | 	rdlong	arg02, fp
10dac     0C 4E 85 F1 | 	sub	fp, #12
10db0     B4 B0 B0 FD | 	call	#__system___string_cmp
10db4     01 FA 55 F2 | 	cmps	result1, #1 wc
10db8     00 1E 26 36 |  if_ae	not	local01, #0
10dbc     A7 1E 62 FC | 	wrlong	local01, fp
10dc0     1C 04 90 FD | 	jmp	#LR__1353
10dc4                 | LR__1340
10dc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
10dc4     08 4E 05 F1 | 	add	fp, #8
10dc8     A7 1E 02 FB | 	rdlong	local01, fp
10dcc     08 4E 85 F1 | 	sub	fp, #8
10dd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
10dd4     14 4E 05 A1 |  if_e	add	fp, #20
10dd8     A7 24 02 AB |  if_e	rdlong	local04, fp
10ddc     14 4E 85 A1 |  if_e	sub	fp, #20
10de0     12 23 02 A6 |  if_e	mov	local03, local04
10de4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10de8     2C 00 90 5D |  if_ne	jmp	#LR__1341
10dec     00 1E 06 F6 | 	mov	local01, #0
10df0     A7 12 02 FB | 	rdlong	arg01, fp
10df4     0C 4E 05 F1 | 	add	fp, #12
10df8     A7 14 02 FB | 	rdlong	arg02, fp
10dfc     0C 4E 85 F1 | 	sub	fp, #12
10e00     01 16 66 F6 | 	neg	arg03, #1
10e04     E8 DF B0 FD | 	call	#__system___float_cmp
10e08     01 FA 55 F2 | 	cmps	result1, #1 wc
10e0c     00 1E 26 36 |  if_ae	not	local01, #0
10e10     A7 1E 62 FC | 	wrlong	local01, fp
10e14     C8 03 90 FD | 	jmp	#LR__1353
10e18                 | LR__1341
10e18                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
10e18     08 4E 05 F1 | 	add	fp, #8
10e1c     A7 1E 02 FB | 	rdlong	local01, fp
10e20     08 4E 85 F1 | 	sub	fp, #8
10e24     1E 1E 0E F2 | 	cmp	local01, #30 wz
10e28     14 4E 05 A1 |  if_e	add	fp, #20
10e2c     A7 24 02 AB |  if_e	rdlong	local04, fp
10e30     14 4E 85 A1 |  if_e	sub	fp, #20
10e34     12 23 02 A6 |  if_e	mov	local03, local04
10e38     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10e3c     48 00 90 5D |  if_ne	jmp	#LR__1342
10e40     00 1E 06 F6 | 	mov	local01, #0
10e44     A7 20 02 FB | 	rdlong	local02, fp
10e48     0C 4E 05 F1 | 	add	fp, #12
10e4c     A7 12 02 FB | 	rdlong	arg01, fp
10e50     0C 4E 85 F1 | 	sub	fp, #12
10e54     09 13 52 F6 | 	abs	arg01, arg01 wc
10e58     1F 26 C6 C9 |  if_b	decod	local05, #31
10e5c     00 26 06 36 |  if_ae	mov	local05, #0
10e60     54 D7 B0 FD | 	call	#__system___float_fromuns
10e64     13 FB 61 F5 | 	xor	result1, local05
10e68     FD 14 02 F6 | 	mov	arg02, result1
10e6c     10 13 02 F6 | 	mov	arg01, local02
10e70     01 16 66 F6 | 	neg	arg03, #1
10e74     78 DF B0 FD | 	call	#__system___float_cmp
10e78     01 FA 55 F2 | 	cmps	result1, #1 wc
10e7c     00 1E 26 36 |  if_ae	not	local01, #0
10e80     A7 1E 62 FC | 	wrlong	local01, fp
10e84     58 03 90 FD | 	jmp	#LR__1353
10e88                 | LR__1342
10e88                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
10e88     08 4E 05 F1 | 	add	fp, #8
10e8c     A7 1E 02 FB | 	rdlong	local01, fp
10e90     08 4E 85 F1 | 	sub	fp, #8
10e94     1E 1E 0E F2 | 	cmp	local01, #30 wz
10e98     14 4E 05 A1 |  if_e	add	fp, #20
10e9c     A7 24 02 AB |  if_e	rdlong	local04, fp
10ea0     14 4E 85 A1 |  if_e	sub	fp, #20
10ea4     12 23 02 A6 |  if_e	mov	local03, local04
10ea8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10eac     38 00 90 5D |  if_ne	jmp	#LR__1343
10eb0     00 1E 06 F6 | 	mov	local01, #0
10eb4     A7 20 02 FB | 	rdlong	local02, fp
10eb8     0C 4E 05 F1 | 	add	fp, #12
10ebc     A7 12 02 FB | 	rdlong	arg01, fp
10ec0     0C 4E 85 F1 | 	sub	fp, #12
10ec4     F0 D6 B0 FD | 	call	#__system___float_fromuns
10ec8     FD 14 02 F6 | 	mov	arg02, result1
10ecc     10 13 02 F6 | 	mov	arg01, local02
10ed0     01 16 66 F6 | 	neg	arg03, #1
10ed4     18 DF B0 FD | 	call	#__system___float_cmp
10ed8     01 FA 55 F2 | 	cmps	result1, #1 wc
10edc     00 1E 26 36 |  if_ae	not	local01, #0
10ee0     A7 1E 62 FC | 	wrlong	local01, fp
10ee4     F8 02 90 FD | 	jmp	#LR__1353
10ee8                 | LR__1343
10ee8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
10ee8     08 4E 05 F1 | 	add	fp, #8
10eec     A7 1E 02 FB | 	rdlong	local01, fp
10ef0     08 4E 85 F1 | 	sub	fp, #8
10ef4     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ef8     14 4E 05 A1 |  if_e	add	fp, #20
10efc     A7 24 02 AB |  if_e	rdlong	local04, fp
10f00     14 4E 85 A1 |  if_e	sub	fp, #20
10f04     12 23 02 A6 |  if_e	mov	local03, local04
10f08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10f0c     44 00 90 5D |  if_ne	jmp	#LR__1344
10f10     00 1E 06 F6 | 	mov	local01, #0
10f14     A7 12 02 FB | 	rdlong	arg01, fp
10f18     09 13 52 F6 | 	abs	arg01, arg01 wc
10f1c     1F 26 C6 C9 |  if_b	decod	local05, #31
10f20     00 26 06 36 |  if_ae	mov	local05, #0
10f24     90 D6 B0 FD | 	call	#__system___float_fromuns
10f28     13 FB 61 F5 | 	xor	result1, local05
10f2c     FD 12 02 F6 | 	mov	arg01, result1
10f30     0C 4E 05 F1 | 	add	fp, #12
10f34     A7 14 02 FB | 	rdlong	arg02, fp
10f38     0C 4E 85 F1 | 	sub	fp, #12
10f3c     01 16 66 F6 | 	neg	arg03, #1
10f40     AC DE B0 FD | 	call	#__system___float_cmp
10f44     01 FA 55 F2 | 	cmps	result1, #1 wc
10f48     00 1E 26 36 |  if_ae	not	local01, #0
10f4c     A7 1E 62 FC | 	wrlong	local01, fp
10f50     8C 02 90 FD | 	jmp	#LR__1353
10f54                 | LR__1344
10f54                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
10f54     08 4E 05 F1 | 	add	fp, #8
10f58     A7 1E 02 FB | 	rdlong	local01, fp
10f5c     08 4E 85 F1 | 	sub	fp, #8
10f60     1C 1E 0E F2 | 	cmp	local01, #28 wz
10f64     14 4E 05 A1 |  if_e	add	fp, #20
10f68     A7 24 02 AB |  if_e	rdlong	local04, fp
10f6c     14 4E 85 A1 |  if_e	sub	fp, #20
10f70     12 23 02 A6 |  if_e	mov	local03, local04
10f74     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10f78     24 00 90 5D |  if_ne	jmp	#LR__1345
10f7c     00 1E 06 F6 | 	mov	local01, #0
10f80     A7 20 02 FB | 	rdlong	local02, fp
10f84     0C 4E 05 F1 | 	add	fp, #12
10f88     A7 22 02 FB | 	rdlong	local03, fp
10f8c     0C 4E 85 F1 | 	sub	fp, #12
10f90     11 21 5A F2 | 	cmps	local02, local03 wcz
10f94     01 1E 66 16 |  if_a	neg	local01, #1
10f98     A7 1E 62 FC | 	wrlong	local01, fp
10f9c     40 02 90 FD | 	jmp	#LR__1353
10fa0                 | LR__1345
10fa0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
10fa0     08 4E 05 F1 | 	add	fp, #8
10fa4     A7 1E 02 FB | 	rdlong	local01, fp
10fa8     08 4E 85 F1 | 	sub	fp, #8
10fac     1C 1E 0E F2 | 	cmp	local01, #28 wz
10fb0     14 4E 05 A1 |  if_e	add	fp, #20
10fb4     A7 24 02 AB |  if_e	rdlong	local04, fp
10fb8     14 4E 85 A1 |  if_e	sub	fp, #20
10fbc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
10fc0     24 00 90 5D |  if_ne	jmp	#LR__1346
10fc4     00 1E 06 F6 | 	mov	local01, #0
10fc8     A7 20 02 FB | 	rdlong	local02, fp
10fcc     0C 4E 05 F1 | 	add	fp, #12
10fd0     A7 22 02 FB | 	rdlong	local03, fp
10fd4     0C 4E 85 F1 | 	sub	fp, #12
10fd8     11 21 5A F2 | 	cmps	local02, local03 wcz
10fdc     01 1E 66 16 |  if_a	neg	local01, #1
10fe0     A7 1E 62 FC | 	wrlong	local01, fp
10fe4     F8 01 90 FD | 	jmp	#LR__1353
10fe8                 | LR__1346
10fe8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
10fe8     08 4E 05 F1 | 	add	fp, #8
10fec     A7 1E 02 FB | 	rdlong	local01, fp
10ff0     08 4E 85 F1 | 	sub	fp, #8
10ff4     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ff8     14 4E 05 A1 |  if_e	add	fp, #20
10ffc     A7 22 02 AB |  if_e	rdlong	local03, fp
11000     14 4E 85 A1 |  if_e	sub	fp, #20
11004     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11008     34 00 90 5D |  if_ne	jmp	#LR__1347
1100c     00 1E 06 F6 | 	mov	local01, #0
11010     A7 12 02 FB | 	rdlong	arg01, fp
11014     A0 D5 B0 FD | 	call	#__system___float_fromuns
11018     FD 12 02 F6 | 	mov	arg01, result1
1101c     0C 4E 05 F1 | 	add	fp, #12
11020     A7 14 02 FB | 	rdlong	arg02, fp
11024     0C 4E 85 F1 | 	sub	fp, #12
11028     01 16 66 F6 | 	neg	arg03, #1
1102c     C0 DD B0 FD | 	call	#__system___float_cmp
11030     01 FA 55 F2 | 	cmps	result1, #1 wc
11034     00 1E 26 36 |  if_ae	not	local01, #0
11038     A7 1E 62 FC | 	wrlong	local01, fp
1103c     A0 01 90 FD | 	jmp	#LR__1353
11040                 | LR__1347
11040                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11040     08 4E 05 F1 | 	add	fp, #8
11044     A7 1E 02 FB | 	rdlong	local01, fp
11048     08 4E 85 F1 | 	sub	fp, #8
1104c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11050     14 4E 05 A1 |  if_e	add	fp, #20
11054     A7 22 02 AB |  if_e	rdlong	local03, fp
11058     14 4E 85 A1 |  if_e	sub	fp, #20
1105c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11060     24 00 90 5D |  if_ne	jmp	#LR__1348
11064     00 1E 06 F6 | 	mov	local01, #0
11068     A7 20 02 FB | 	rdlong	local02, fp
1106c     0C 4E 05 F1 | 	add	fp, #12
11070     A7 22 02 FB | 	rdlong	local03, fp
11074     0C 4E 85 F1 | 	sub	fp, #12
11078     11 21 5A F2 | 	cmps	local02, local03 wcz
1107c     01 1E 66 16 |  if_a	neg	local01, #1
11080     A7 1E 62 FC | 	wrlong	local01, fp
11084     58 01 90 FD | 	jmp	#LR__1353
11088                 | LR__1348
11088                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
11088     08 4E 05 F1 | 	add	fp, #8
1108c     A7 1E 02 FB | 	rdlong	local01, fp
11090     08 4E 85 F1 | 	sub	fp, #8
11094     1D 1E 0E F2 | 	cmp	local01, #29 wz
11098     14 4E 05 A1 |  if_e	add	fp, #20
1109c     A7 22 02 AB |  if_e	rdlong	local03, fp
110a0     14 4E 85 A1 |  if_e	sub	fp, #20
110a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
110a8     24 00 90 5D |  if_ne	jmp	#LR__1349
110ac     00 1E 06 F6 | 	mov	local01, #0
110b0     A7 20 02 FB | 	rdlong	local02, fp
110b4     0C 4E 05 F1 | 	add	fp, #12
110b8     A7 22 02 FB | 	rdlong	local03, fp
110bc     0C 4E 85 F1 | 	sub	fp, #12
110c0     11 21 1A F2 | 	cmp	local02, local03 wcz
110c4     01 1E 66 16 |  if_a	neg	local01, #1
110c8     A7 1E 62 FC | 	wrlong	local01, fp
110cc     10 01 90 FD | 	jmp	#LR__1353
110d0                 | LR__1349
110d0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
110d0     08 4E 05 F1 | 	add	fp, #8
110d4     A7 1E 02 FB | 	rdlong	local01, fp
110d8     08 4E 85 F1 | 	sub	fp, #8
110dc     2B 1E 0E F2 | 	cmp	local01, #43 wz
110e0     14 4E 05 A1 |  if_e	add	fp, #20
110e4     A7 22 02 AB |  if_e	rdlong	local03, fp
110e8     14 4E 85 A1 |  if_e	sub	fp, #20
110ec     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
110f0     30 00 90 5D |  if_ne	jmp	#LR__1350
110f4     00 1E 06 F6 | 	mov	local01, #0
110f8     A7 12 02 FB | 	rdlong	arg01, fp
110fc     04 CF BF FD | 	call	#_convertstring
11100     FD 12 02 F6 | 	mov	arg01, result1
11104     0C 4E 05 F1 | 	add	fp, #12
11108     A7 14 02 FB | 	rdlong	arg02, fp
1110c     0C 4E 85 F1 | 	sub	fp, #12
11110     54 AD B0 FD | 	call	#__system___string_cmp
11114     01 FA 55 F2 | 	cmps	result1, #1 wc
11118     00 1E 26 36 |  if_ae	not	local01, #0
1111c     A7 1E 62 FC | 	wrlong	local01, fp
11120     BC 00 90 FD | 	jmp	#LR__1353
11124                 | LR__1350
11124                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
11124     08 4E 05 F1 | 	add	fp, #8
11128     A7 1E 02 FB | 	rdlong	local01, fp
1112c     08 4E 85 F1 | 	sub	fp, #8
11130     1F 1E 0E F2 | 	cmp	local01, #31 wz
11134     14 4E 05 A1 |  if_e	add	fp, #20
11138     A7 22 02 AB |  if_e	rdlong	local03, fp
1113c     14 4E 85 A1 |  if_e	sub	fp, #20
11140     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11144     34 00 90 5D |  if_ne	jmp	#LR__1351
11148     00 1E 06 F6 | 	mov	local01, #0
1114c     A7 20 02 FB | 	rdlong	local02, fp
11150     0C 4E 05 F1 | 	add	fp, #12
11154     A7 12 02 FB | 	rdlong	arg01, fp
11158     0C 4E 85 F1 | 	sub	fp, #12
1115c     A4 CE BF FD | 	call	#_convertstring
11160     FD 14 02 F6 | 	mov	arg02, result1
11164     10 13 02 F6 | 	mov	arg01, local02
11168     FC AC B0 FD | 	call	#__system___string_cmp
1116c     01 FA 55 F2 | 	cmps	result1, #1 wc
11170     00 1E 26 36 |  if_ae	not	local01, #0
11174     A7 1E 62 FC | 	wrlong	local01, fp
11178     64 00 90 FD | 	jmp	#LR__1353
1117c                 | LR__1351
1117c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1117c     08 4E 05 F1 | 	add	fp, #8
11180     A7 1E 02 FB | 	rdlong	local01, fp
11184     08 4E 85 F1 | 	sub	fp, #8
11188     2B 1E 0E F2 | 	cmp	local01, #43 wz
1118c     14 4E 05 A1 |  if_e	add	fp, #20
11190     A7 22 02 AB |  if_e	rdlong	local03, fp
11194     14 4E 85 A1 |  if_e	sub	fp, #20
11198     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1119c     3C 00 90 5D |  if_ne	jmp	#LR__1352
111a0     00 1E 06 F6 | 	mov	local01, #0
111a4     A7 12 02 FB | 	rdlong	arg01, fp
111a8     58 CE BF FD | 	call	#_convertstring
111ac     FD 20 02 F6 | 	mov	local02, result1
111b0     0C 4E 05 F1 | 	add	fp, #12
111b4     A7 12 02 FB | 	rdlong	arg01, fp
111b8     0C 4E 85 F1 | 	sub	fp, #12
111bc     44 CE BF FD | 	call	#_convertstring
111c0     FD 14 02 F6 | 	mov	arg02, result1
111c4     10 13 02 F6 | 	mov	arg01, local02
111c8     9C AC B0 FD | 	call	#__system___string_cmp
111cc     01 FA 55 F2 | 	cmps	result1, #1 wc
111d0     00 1E 26 36 |  if_ae	not	local01, #0
111d4     A7 1E 62 FC | 	wrlong	local01, fp
111d8     04 00 90 FD | 	jmp	#LR__1353
111dc                 | LR__1352
111dc     A7 00 68 FC | 	wrlong	#0, fp
111e0                 | LR__1353
111e0     08 4E 05 F1 | 	add	fp, #8
111e4     A7 38 68 FC | 	wrlong	#28, fp
111e8     08 4E 85 F1 | 	sub	fp, #8
111ec     A7 12 02 F6 | 	mov	arg01, fp
111f0     2C 8F BF FD | 	call	#_push
111f4     A7 F0 03 F6 | 	mov	ptra, fp
111f8     B2 00 A0 FD | 	call	#popregs_
111fc                 | _do_gt_ret
111fc     2D 00 64 FD | 	ret
11200                 | 
11200                 | ' 
11200                 | ' sub do_lt
11200                 | _do_lt
11200     05 4A 05 F6 | 	mov	COUNT_, #5
11204     A8 00 A0 FD | 	call	#pushregs_
11208     18 F0 07 F1 | 	add	ptra, #24
1120c     78 8E BF FD | 	call	#_pop
11210     FD 1E 02 F6 | 	mov	local01, result1
11214     FE 20 02 F6 | 	mov	local02, result2
11218     FF 22 02 F6 | 	mov	local03, result3
1121c     0C 4E 05 F1 | 	add	fp, #12
11220     A7 1E 62 FC | 	wrlong	local01, fp
11224     04 4E 05 F1 | 	add	fp, #4
11228     A7 20 62 FC | 	wrlong	local02, fp
1122c     04 4E 05 F1 | 	add	fp, #4
11230     A7 22 62 FC | 	wrlong	local03, fp
11234     14 4E 85 F1 | 	sub	fp, #20
11238     4C 8E BF FD | 	call	#_pop
1123c     FF 22 02 F6 | 	mov	local03, result3
11240     A7 FA 61 FC | 	wrlong	result1, fp
11244     04 4E 05 F1 | 	add	fp, #4
11248     A7 FC 61 FC | 	wrlong	result2, fp
1124c     04 4E 05 F1 | 	add	fp, #4
11250     A7 22 62 FC | 	wrlong	local03, fp
11254                 | ' t2=pop()
11254                 | ' t1=pop()
11254                 | ' 
11254                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
11254     08 4E 85 F1 | 	sub	fp, #8
11258     1F 22 0E F2 | 	cmp	local03, #31 wz
1125c     14 4E 05 A1 |  if_e	add	fp, #20
11260     A7 24 02 AB |  if_e	rdlong	local04, fp
11264     14 4E 85 A1 |  if_e	sub	fp, #20
11268     12 23 02 A6 |  if_e	mov	local03, local04
1126c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11270     28 00 90 5D |  if_ne	jmp	#LR__1360
11274     00 1E 06 F6 | 	mov	local01, #0
11278     A7 12 02 FB | 	rdlong	arg01, fp
1127c     0C 4E 05 F1 | 	add	fp, #12
11280     A7 14 02 FB | 	rdlong	arg02, fp
11284     0C 4E 85 F1 | 	sub	fp, #12
11288     DC AB B0 FD | 	call	#__system___string_cmp
1128c     00 FA 55 F2 | 	cmps	result1, #0 wc
11290     00 1E 26 C6 |  if_b	not	local01, #0
11294     A7 1E 62 FC | 	wrlong	local01, fp
11298     0C 04 90 FD | 	jmp	#LR__1373
1129c                 | LR__1360
1129c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1129c     08 4E 05 F1 | 	add	fp, #8
112a0     A7 1E 02 FB | 	rdlong	local01, fp
112a4     08 4E 85 F1 | 	sub	fp, #8
112a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
112ac     14 4E 05 A1 |  if_e	add	fp, #20
112b0     A7 24 02 AB |  if_e	rdlong	local04, fp
112b4     14 4E 85 A1 |  if_e	sub	fp, #20
112b8     12 23 02 A6 |  if_e	mov	local03, local04
112bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
112c0     2C 00 90 5D |  if_ne	jmp	#LR__1361
112c4     00 1E 06 F6 | 	mov	local01, #0
112c8     A7 12 02 FB | 	rdlong	arg01, fp
112cc     0C 4E 05 F1 | 	add	fp, #12
112d0     A7 14 02 FB | 	rdlong	arg02, fp
112d4     0C 4E 85 F1 | 	sub	fp, #12
112d8     01 16 06 F6 | 	mov	arg03, #1
112dc     10 DB B0 FD | 	call	#__system___float_cmp
112e0     00 FA 55 F2 | 	cmps	result1, #0 wc
112e4     00 1E 26 C6 |  if_b	not	local01, #0
112e8     A7 1E 62 FC | 	wrlong	local01, fp
112ec     B8 03 90 FD | 	jmp	#LR__1373
112f0                 | LR__1361
112f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
112f0     08 4E 05 F1 | 	add	fp, #8
112f4     A7 1E 02 FB | 	rdlong	local01, fp
112f8     08 4E 85 F1 | 	sub	fp, #8
112fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
11300     14 4E 05 A1 |  if_e	add	fp, #20
11304     A7 24 02 AB |  if_e	rdlong	local04, fp
11308     14 4E 85 A1 |  if_e	sub	fp, #20
1130c     12 23 02 A6 |  if_e	mov	local03, local04
11310     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11314     48 00 90 5D |  if_ne	jmp	#LR__1362
11318     00 1E 06 F6 | 	mov	local01, #0
1131c     A7 20 02 FB | 	rdlong	local02, fp
11320     0C 4E 05 F1 | 	add	fp, #12
11324     A7 12 02 FB | 	rdlong	arg01, fp
11328     0C 4E 85 F1 | 	sub	fp, #12
1132c     09 13 52 F6 | 	abs	arg01, arg01 wc
11330     1F 26 C6 C9 |  if_b	decod	local05, #31
11334     00 26 06 36 |  if_ae	mov	local05, #0
11338     7C D2 B0 FD | 	call	#__system___float_fromuns
1133c     13 FB 61 F5 | 	xor	result1, local05
11340     FD 14 02 F6 | 	mov	arg02, result1
11344     10 13 02 F6 | 	mov	arg01, local02
11348     01 16 06 F6 | 	mov	arg03, #1
1134c     A0 DA B0 FD | 	call	#__system___float_cmp
11350     00 FA 55 F2 | 	cmps	result1, #0 wc
11354     00 1E 26 C6 |  if_b	not	local01, #0
11358     A7 1E 62 FC | 	wrlong	local01, fp
1135c     48 03 90 FD | 	jmp	#LR__1373
11360                 | LR__1362
11360                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
11360     08 4E 05 F1 | 	add	fp, #8
11364     A7 1E 02 FB | 	rdlong	local01, fp
11368     08 4E 85 F1 | 	sub	fp, #8
1136c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11370     14 4E 05 A1 |  if_e	add	fp, #20
11374     A7 24 02 AB |  if_e	rdlong	local04, fp
11378     14 4E 85 A1 |  if_e	sub	fp, #20
1137c     12 23 02 A6 |  if_e	mov	local03, local04
11380     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11384     38 00 90 5D |  if_ne	jmp	#LR__1363
11388     00 1E 06 F6 | 	mov	local01, #0
1138c     A7 20 02 FB | 	rdlong	local02, fp
11390     0C 4E 05 F1 | 	add	fp, #12
11394     A7 12 02 FB | 	rdlong	arg01, fp
11398     0C 4E 85 F1 | 	sub	fp, #12
1139c     18 D2 B0 FD | 	call	#__system___float_fromuns
113a0     FD 14 02 F6 | 	mov	arg02, result1
113a4     10 13 02 F6 | 	mov	arg01, local02
113a8     01 16 06 F6 | 	mov	arg03, #1
113ac     40 DA B0 FD | 	call	#__system___float_cmp
113b0     00 FA 55 F2 | 	cmps	result1, #0 wc
113b4     00 1E 26 C6 |  if_b	not	local01, #0
113b8     A7 1E 62 FC | 	wrlong	local01, fp
113bc     E8 02 90 FD | 	jmp	#LR__1373
113c0                 | LR__1363
113c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
113c0     08 4E 05 F1 | 	add	fp, #8
113c4     A7 1E 02 FB | 	rdlong	local01, fp
113c8     08 4E 85 F1 | 	sub	fp, #8
113cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
113d0     14 4E 05 A1 |  if_e	add	fp, #20
113d4     A7 24 02 AB |  if_e	rdlong	local04, fp
113d8     14 4E 85 A1 |  if_e	sub	fp, #20
113dc     12 23 02 A6 |  if_e	mov	local03, local04
113e0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
113e4     44 00 90 5D |  if_ne	jmp	#LR__1364
113e8     00 1E 06 F6 | 	mov	local01, #0
113ec     A7 12 02 FB | 	rdlong	arg01, fp
113f0     09 13 52 F6 | 	abs	arg01, arg01 wc
113f4     1F 26 C6 C9 |  if_b	decod	local05, #31
113f8     00 26 06 36 |  if_ae	mov	local05, #0
113fc     B8 D1 B0 FD | 	call	#__system___float_fromuns
11400     13 FB 61 F5 | 	xor	result1, local05
11404     FD 12 02 F6 | 	mov	arg01, result1
11408     0C 4E 05 F1 | 	add	fp, #12
1140c     A7 14 02 FB | 	rdlong	arg02, fp
11410     0C 4E 85 F1 | 	sub	fp, #12
11414     01 16 06 F6 | 	mov	arg03, #1
11418     D4 D9 B0 FD | 	call	#__system___float_cmp
1141c     00 FA 55 F2 | 	cmps	result1, #0 wc
11420     00 1E 26 C6 |  if_b	not	local01, #0
11424     A7 1E 62 FC | 	wrlong	local01, fp
11428     7C 02 90 FD | 	jmp	#LR__1373
1142c                 | LR__1364
1142c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1142c     08 4E 05 F1 | 	add	fp, #8
11430     A7 1E 02 FB | 	rdlong	local01, fp
11434     08 4E 85 F1 | 	sub	fp, #8
11438     1C 1E 0E F2 | 	cmp	local01, #28 wz
1143c     14 4E 05 A1 |  if_e	add	fp, #20
11440     A7 24 02 AB |  if_e	rdlong	local04, fp
11444     14 4E 85 A1 |  if_e	sub	fp, #20
11448     12 23 02 A6 |  if_e	mov	local03, local04
1144c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11450     20 00 90 5D |  if_ne	jmp	#LR__1365
11454     A7 20 02 FB | 	rdlong	local02, fp
11458     0C 4E 05 F1 | 	add	fp, #12
1145c     A7 22 02 FB | 	rdlong	local03, fp
11460     0C 4E 85 F1 | 	sub	fp, #12
11464     11 21 52 F2 | 	cmps	local02, local03 wc
11468     0F 1F A2 F1 | 	subx	local01, local01
1146c     A7 1E 62 FC | 	wrlong	local01, fp
11470     34 02 90 FD | 	jmp	#LR__1373
11474                 | LR__1365
11474                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
11474     08 4E 05 F1 | 	add	fp, #8
11478     A7 1E 02 FB | 	rdlong	local01, fp
1147c     08 4E 85 F1 | 	sub	fp, #8
11480     1C 1E 0E F2 | 	cmp	local01, #28 wz
11484     14 4E 05 A1 |  if_e	add	fp, #20
11488     A7 24 02 AB |  if_e	rdlong	local04, fp
1148c     14 4E 85 A1 |  if_e	sub	fp, #20
11490     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11494     20 00 90 5D |  if_ne	jmp	#LR__1366
11498     A7 20 02 FB | 	rdlong	local02, fp
1149c     0C 4E 05 F1 | 	add	fp, #12
114a0     A7 22 02 FB | 	rdlong	local03, fp
114a4     0C 4E 85 F1 | 	sub	fp, #12
114a8     11 21 52 F2 | 	cmps	local02, local03 wc
114ac     0F 1F A2 F1 | 	subx	local01, local01
114b0     A7 1E 62 FC | 	wrlong	local01, fp
114b4     F0 01 90 FD | 	jmp	#LR__1373
114b8                 | LR__1366
114b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
114b8     08 4E 05 F1 | 	add	fp, #8
114bc     A7 1E 02 FB | 	rdlong	local01, fp
114c0     08 4E 85 F1 | 	sub	fp, #8
114c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
114c8     14 4E 05 A1 |  if_e	add	fp, #20
114cc     A7 22 02 AB |  if_e	rdlong	local03, fp
114d0     14 4E 85 A1 |  if_e	sub	fp, #20
114d4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
114d8     34 00 90 5D |  if_ne	jmp	#LR__1367
114dc     00 1E 06 F6 | 	mov	local01, #0
114e0     A7 12 02 FB | 	rdlong	arg01, fp
114e4     D0 D0 B0 FD | 	call	#__system___float_fromuns
114e8     FD 12 02 F6 | 	mov	arg01, result1
114ec     0C 4E 05 F1 | 	add	fp, #12
114f0     A7 14 02 FB | 	rdlong	arg02, fp
114f4     0C 4E 85 F1 | 	sub	fp, #12
114f8     01 16 06 F6 | 	mov	arg03, #1
114fc     F0 D8 B0 FD | 	call	#__system___float_cmp
11500     00 FA 55 F2 | 	cmps	result1, #0 wc
11504     00 1E 26 C6 |  if_b	not	local01, #0
11508     A7 1E 62 FC | 	wrlong	local01, fp
1150c     98 01 90 FD | 	jmp	#LR__1373
11510                 | LR__1367
11510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
11510     08 4E 05 F1 | 	add	fp, #8
11514     A7 1E 02 FB | 	rdlong	local01, fp
11518     08 4E 85 F1 | 	sub	fp, #8
1151c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11520     14 4E 05 A1 |  if_e	add	fp, #20
11524     A7 22 02 AB |  if_e	rdlong	local03, fp
11528     14 4E 85 A1 |  if_e	sub	fp, #20
1152c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11530     20 00 90 5D |  if_ne	jmp	#LR__1368
11534     A7 20 02 FB | 	rdlong	local02, fp
11538     0C 4E 05 F1 | 	add	fp, #12
1153c     A7 22 02 FB | 	rdlong	local03, fp
11540     0C 4E 85 F1 | 	sub	fp, #12
11544     11 21 52 F2 | 	cmps	local02, local03 wc
11548     0F 1F A2 F1 | 	subx	local01, local01
1154c     A7 1E 62 FC | 	wrlong	local01, fp
11550     54 01 90 FD | 	jmp	#LR__1373
11554                 | LR__1368
11554                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
11554     08 4E 05 F1 | 	add	fp, #8
11558     A7 1E 02 FB | 	rdlong	local01, fp
1155c     08 4E 85 F1 | 	sub	fp, #8
11560     1D 1E 0E F2 | 	cmp	local01, #29 wz
11564     14 4E 05 A1 |  if_e	add	fp, #20
11568     A7 22 02 AB |  if_e	rdlong	local03, fp
1156c     14 4E 85 A1 |  if_e	sub	fp, #20
11570     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11574     20 00 90 5D |  if_ne	jmp	#LR__1369
11578     A7 20 02 FB | 	rdlong	local02, fp
1157c     0C 4E 05 F1 | 	add	fp, #12
11580     A7 22 02 FB | 	rdlong	local03, fp
11584     0C 4E 85 F1 | 	sub	fp, #12
11588     11 21 12 F2 | 	cmp	local02, local03 wc
1158c     0F 1F A2 F1 | 	subx	local01, local01
11590     A7 1E 62 FC | 	wrlong	local01, fp
11594     10 01 90 FD | 	jmp	#LR__1373
11598                 | LR__1369
11598                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
11598     08 4E 05 F1 | 	add	fp, #8
1159c     A7 1E 02 FB | 	rdlong	local01, fp
115a0     08 4E 85 F1 | 	sub	fp, #8
115a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
115a8     14 4E 05 A1 |  if_e	add	fp, #20
115ac     A7 22 02 AB |  if_e	rdlong	local03, fp
115b0     14 4E 85 A1 |  if_e	sub	fp, #20
115b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
115b8     30 00 90 5D |  if_ne	jmp	#LR__1370
115bc     00 1E 06 F6 | 	mov	local01, #0
115c0     A7 12 02 FB | 	rdlong	arg01, fp
115c4     3C CA BF FD | 	call	#_convertstring
115c8     FD 12 02 F6 | 	mov	arg01, result1
115cc     0C 4E 05 F1 | 	add	fp, #12
115d0     A7 14 02 FB | 	rdlong	arg02, fp
115d4     0C 4E 85 F1 | 	sub	fp, #12
115d8     8C A8 B0 FD | 	call	#__system___string_cmp
115dc     00 FA 55 F2 | 	cmps	result1, #0 wc
115e0     00 1E 26 C6 |  if_b	not	local01, #0
115e4     A7 1E 62 FC | 	wrlong	local01, fp
115e8     BC 00 90 FD | 	jmp	#LR__1373
115ec                 | LR__1370
115ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
115ec     08 4E 05 F1 | 	add	fp, #8
115f0     A7 1E 02 FB | 	rdlong	local01, fp
115f4     08 4E 85 F1 | 	sub	fp, #8
115f8     1F 1E 0E F2 | 	cmp	local01, #31 wz
115fc     14 4E 05 A1 |  if_e	add	fp, #20
11600     A7 22 02 AB |  if_e	rdlong	local03, fp
11604     14 4E 85 A1 |  if_e	sub	fp, #20
11608     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1160c     34 00 90 5D |  if_ne	jmp	#LR__1371
11610     00 1E 06 F6 | 	mov	local01, #0
11614     A7 20 02 FB | 	rdlong	local02, fp
11618     0C 4E 05 F1 | 	add	fp, #12
1161c     A7 12 02 FB | 	rdlong	arg01, fp
11620     0C 4E 85 F1 | 	sub	fp, #12
11624     DC C9 BF FD | 	call	#_convertstring
11628     FD 14 02 F6 | 	mov	arg02, result1
1162c     10 13 02 F6 | 	mov	arg01, local02
11630     34 A8 B0 FD | 	call	#__system___string_cmp
11634     00 FA 55 F2 | 	cmps	result1, #0 wc
11638     00 1E 26 C6 |  if_b	not	local01, #0
1163c     A7 1E 62 FC | 	wrlong	local01, fp
11640     64 00 90 FD | 	jmp	#LR__1373
11644                 | LR__1371
11644                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
11644     08 4E 05 F1 | 	add	fp, #8
11648     A7 1E 02 FB | 	rdlong	local01, fp
1164c     08 4E 85 F1 | 	sub	fp, #8
11650     2B 1E 0E F2 | 	cmp	local01, #43 wz
11654     14 4E 05 A1 |  if_e	add	fp, #20
11658     A7 22 02 AB |  if_e	rdlong	local03, fp
1165c     14 4E 85 A1 |  if_e	sub	fp, #20
11660     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11664     3C 00 90 5D |  if_ne	jmp	#LR__1372
11668     00 1E 06 F6 | 	mov	local01, #0
1166c     A7 12 02 FB | 	rdlong	arg01, fp
11670     90 C9 BF FD | 	call	#_convertstring
11674     FD 20 02 F6 | 	mov	local02, result1
11678     0C 4E 05 F1 | 	add	fp, #12
1167c     A7 12 02 FB | 	rdlong	arg01, fp
11680     0C 4E 85 F1 | 	sub	fp, #12
11684     7C C9 BF FD | 	call	#_convertstring
11688     FD 14 02 F6 | 	mov	arg02, result1
1168c     10 13 02 F6 | 	mov	arg01, local02
11690     D4 A7 B0 FD | 	call	#__system___string_cmp
11694     00 FA 55 F2 | 	cmps	result1, #0 wc
11698     00 1E 26 C6 |  if_b	not	local01, #0
1169c     A7 1E 62 FC | 	wrlong	local01, fp
116a0     04 00 90 FD | 	jmp	#LR__1373
116a4                 | LR__1372
116a4     A7 00 68 FC | 	wrlong	#0, fp
116a8                 | LR__1373
116a8     08 4E 05 F1 | 	add	fp, #8
116ac     A7 38 68 FC | 	wrlong	#28, fp
116b0     08 4E 85 F1 | 	sub	fp, #8
116b4     A7 12 02 F6 | 	mov	arg01, fp
116b8     64 8A BF FD | 	call	#_push
116bc     A7 F0 03 F6 | 	mov	ptra, fp
116c0     B2 00 A0 FD | 	call	#popregs_
116c4                 | _do_lt_ret
116c4     2D 00 64 FD | 	ret
116c8                 | 
116c8                 | ' 
116c8                 | ' sub do_ge
116c8                 | _do_ge
116c8     05 4A 05 F6 | 	mov	COUNT_, #5
116cc     A8 00 A0 FD | 	call	#pushregs_
116d0     18 F0 07 F1 | 	add	ptra, #24
116d4     B0 89 BF FD | 	call	#_pop
116d8     FD 1E 02 F6 | 	mov	local01, result1
116dc     FE 20 02 F6 | 	mov	local02, result2
116e0     FF 22 02 F6 | 	mov	local03, result3
116e4     0C 4E 05 F1 | 	add	fp, #12
116e8     A7 1E 62 FC | 	wrlong	local01, fp
116ec     04 4E 05 F1 | 	add	fp, #4
116f0     A7 20 62 FC | 	wrlong	local02, fp
116f4     04 4E 05 F1 | 	add	fp, #4
116f8     A7 22 62 FC | 	wrlong	local03, fp
116fc     14 4E 85 F1 | 	sub	fp, #20
11700     84 89 BF FD | 	call	#_pop
11704     FF 22 02 F6 | 	mov	local03, result3
11708     A7 FA 61 FC | 	wrlong	result1, fp
1170c     04 4E 05 F1 | 	add	fp, #4
11710     A7 FC 61 FC | 	wrlong	result2, fp
11714     04 4E 05 F1 | 	add	fp, #4
11718     A7 22 62 FC | 	wrlong	local03, fp
1171c                 | ' t2=pop()
1171c                 | ' t1=pop()
1171c                 | ' 
1171c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1171c     08 4E 85 F1 | 	sub	fp, #8
11720     1F 22 0E F2 | 	cmp	local03, #31 wz
11724     14 4E 05 A1 |  if_e	add	fp, #20
11728     A7 24 02 AB |  if_e	rdlong	local04, fp
1172c     14 4E 85 A1 |  if_e	sub	fp, #20
11730     12 23 02 A6 |  if_e	mov	local03, local04
11734     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11738     28 00 90 5D |  if_ne	jmp	#LR__1380
1173c     00 1E 06 F6 | 	mov	local01, #0
11740     A7 12 02 FB | 	rdlong	arg01, fp
11744     0C 4E 05 F1 | 	add	fp, #12
11748     A7 14 02 FB | 	rdlong	arg02, fp
1174c     0C 4E 85 F1 | 	sub	fp, #12
11750     14 A7 B0 FD | 	call	#__system___string_cmp
11754     00 FA 55 F2 | 	cmps	result1, #0 wc
11758     00 1E 26 36 |  if_ae	not	local01, #0
1175c     A7 1E 62 FC | 	wrlong	local01, fp
11760     1C 04 90 FD | 	jmp	#LR__1393
11764                 | LR__1380
11764                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
11764     08 4E 05 F1 | 	add	fp, #8
11768     A7 1E 02 FB | 	rdlong	local01, fp
1176c     08 4E 85 F1 | 	sub	fp, #8
11770     1E 1E 0E F2 | 	cmp	local01, #30 wz
11774     14 4E 05 A1 |  if_e	add	fp, #20
11778     A7 24 02 AB |  if_e	rdlong	local04, fp
1177c     14 4E 85 A1 |  if_e	sub	fp, #20
11780     12 23 02 A6 |  if_e	mov	local03, local04
11784     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11788     2C 00 90 5D |  if_ne	jmp	#LR__1381
1178c     00 1E 06 F6 | 	mov	local01, #0
11790     A7 12 02 FB | 	rdlong	arg01, fp
11794     0C 4E 05 F1 | 	add	fp, #12
11798     A7 14 02 FB | 	rdlong	arg02, fp
1179c     0C 4E 85 F1 | 	sub	fp, #12
117a0     01 16 66 F6 | 	neg	arg03, #1
117a4     48 D6 B0 FD | 	call	#__system___float_cmp
117a8     00 FA 55 F2 | 	cmps	result1, #0 wc
117ac     00 1E 26 36 |  if_ae	not	local01, #0
117b0     A7 1E 62 FC | 	wrlong	local01, fp
117b4     C8 03 90 FD | 	jmp	#LR__1393
117b8                 | LR__1381
117b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
117b8     08 4E 05 F1 | 	add	fp, #8
117bc     A7 1E 02 FB | 	rdlong	local01, fp
117c0     08 4E 85 F1 | 	sub	fp, #8
117c4     1E 1E 0E F2 | 	cmp	local01, #30 wz
117c8     14 4E 05 A1 |  if_e	add	fp, #20
117cc     A7 24 02 AB |  if_e	rdlong	local04, fp
117d0     14 4E 85 A1 |  if_e	sub	fp, #20
117d4     12 23 02 A6 |  if_e	mov	local03, local04
117d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
117dc     48 00 90 5D |  if_ne	jmp	#LR__1382
117e0     00 1E 06 F6 | 	mov	local01, #0
117e4     A7 20 02 FB | 	rdlong	local02, fp
117e8     0C 4E 05 F1 | 	add	fp, #12
117ec     A7 12 02 FB | 	rdlong	arg01, fp
117f0     0C 4E 85 F1 | 	sub	fp, #12
117f4     09 13 52 F6 | 	abs	arg01, arg01 wc
117f8     1F 26 C6 C9 |  if_b	decod	local05, #31
117fc     00 26 06 36 |  if_ae	mov	local05, #0
11800     B4 CD B0 FD | 	call	#__system___float_fromuns
11804     13 FB 61 F5 | 	xor	result1, local05
11808     FD 14 02 F6 | 	mov	arg02, result1
1180c     10 13 02 F6 | 	mov	arg01, local02
11810     01 16 66 F6 | 	neg	arg03, #1
11814     D8 D5 B0 FD | 	call	#__system___float_cmp
11818     00 FA 55 F2 | 	cmps	result1, #0 wc
1181c     00 1E 26 36 |  if_ae	not	local01, #0
11820     A7 1E 62 FC | 	wrlong	local01, fp
11824     58 03 90 FD | 	jmp	#LR__1393
11828                 | LR__1382
11828                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
11828     08 4E 05 F1 | 	add	fp, #8
1182c     A7 1E 02 FB | 	rdlong	local01, fp
11830     08 4E 85 F1 | 	sub	fp, #8
11834     1E 1E 0E F2 | 	cmp	local01, #30 wz
11838     14 4E 05 A1 |  if_e	add	fp, #20
1183c     A7 24 02 AB |  if_e	rdlong	local04, fp
11840     14 4E 85 A1 |  if_e	sub	fp, #20
11844     12 23 02 A6 |  if_e	mov	local03, local04
11848     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1184c     38 00 90 5D |  if_ne	jmp	#LR__1383
11850     00 1E 06 F6 | 	mov	local01, #0
11854     A7 20 02 FB | 	rdlong	local02, fp
11858     0C 4E 05 F1 | 	add	fp, #12
1185c     A7 12 02 FB | 	rdlong	arg01, fp
11860     0C 4E 85 F1 | 	sub	fp, #12
11864     50 CD B0 FD | 	call	#__system___float_fromuns
11868     FD 14 02 F6 | 	mov	arg02, result1
1186c     10 13 02 F6 | 	mov	arg01, local02
11870     01 16 66 F6 | 	neg	arg03, #1
11874     78 D5 B0 FD | 	call	#__system___float_cmp
11878     00 FA 55 F2 | 	cmps	result1, #0 wc
1187c     00 1E 26 36 |  if_ae	not	local01, #0
11880     A7 1E 62 FC | 	wrlong	local01, fp
11884     F8 02 90 FD | 	jmp	#LR__1393
11888                 | LR__1383
11888                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
11888     08 4E 05 F1 | 	add	fp, #8
1188c     A7 1E 02 FB | 	rdlong	local01, fp
11890     08 4E 85 F1 | 	sub	fp, #8
11894     1C 1E 0E F2 | 	cmp	local01, #28 wz
11898     14 4E 05 A1 |  if_e	add	fp, #20
1189c     A7 24 02 AB |  if_e	rdlong	local04, fp
118a0     14 4E 85 A1 |  if_e	sub	fp, #20
118a4     12 23 02 A6 |  if_e	mov	local03, local04
118a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
118ac     44 00 90 5D |  if_ne	jmp	#LR__1384
118b0     00 1E 06 F6 | 	mov	local01, #0
118b4     A7 12 02 FB | 	rdlong	arg01, fp
118b8     09 13 52 F6 | 	abs	arg01, arg01 wc
118bc     1F 26 C6 C9 |  if_b	decod	local05, #31
118c0     00 26 06 36 |  if_ae	mov	local05, #0
118c4     F0 CC B0 FD | 	call	#__system___float_fromuns
118c8     13 FB 61 F5 | 	xor	result1, local05
118cc     FD 12 02 F6 | 	mov	arg01, result1
118d0     0C 4E 05 F1 | 	add	fp, #12
118d4     A7 14 02 FB | 	rdlong	arg02, fp
118d8     0C 4E 85 F1 | 	sub	fp, #12
118dc     01 16 66 F6 | 	neg	arg03, #1
118e0     0C D5 B0 FD | 	call	#__system___float_cmp
118e4     00 FA 55 F2 | 	cmps	result1, #0 wc
118e8     00 1E 26 36 |  if_ae	not	local01, #0
118ec     A7 1E 62 FC | 	wrlong	local01, fp
118f0     8C 02 90 FD | 	jmp	#LR__1393
118f4                 | LR__1384
118f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
118f4     08 4E 05 F1 | 	add	fp, #8
118f8     A7 1E 02 FB | 	rdlong	local01, fp
118fc     08 4E 85 F1 | 	sub	fp, #8
11900     1C 1E 0E F2 | 	cmp	local01, #28 wz
11904     14 4E 05 A1 |  if_e	add	fp, #20
11908     A7 24 02 AB |  if_e	rdlong	local04, fp
1190c     14 4E 85 A1 |  if_e	sub	fp, #20
11910     12 23 02 A6 |  if_e	mov	local03, local04
11914     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11918     24 00 90 5D |  if_ne	jmp	#LR__1385
1191c     00 1E 06 F6 | 	mov	local01, #0
11920     A7 20 02 FB | 	rdlong	local02, fp
11924     0C 4E 05 F1 | 	add	fp, #12
11928     A7 22 02 FB | 	rdlong	local03, fp
1192c     0C 4E 85 F1 | 	sub	fp, #12
11930     11 21 52 F2 | 	cmps	local02, local03 wc
11934     01 1E 66 36 |  if_ae	neg	local01, #1
11938     A7 1E 62 FC | 	wrlong	local01, fp
1193c     40 02 90 FD | 	jmp	#LR__1393
11940                 | LR__1385
11940                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
11940     08 4E 05 F1 | 	add	fp, #8
11944     A7 1E 02 FB | 	rdlong	local01, fp
11948     08 4E 85 F1 | 	sub	fp, #8
1194c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11950     14 4E 05 A1 |  if_e	add	fp, #20
11954     A7 24 02 AB |  if_e	rdlong	local04, fp
11958     14 4E 85 A1 |  if_e	sub	fp, #20
1195c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11960     24 00 90 5D |  if_ne	jmp	#LR__1386
11964     00 1E 06 F6 | 	mov	local01, #0
11968     A7 20 02 FB | 	rdlong	local02, fp
1196c     0C 4E 05 F1 | 	add	fp, #12
11970     A7 22 02 FB | 	rdlong	local03, fp
11974     0C 4E 85 F1 | 	sub	fp, #12
11978     11 21 52 F2 | 	cmps	local02, local03 wc
1197c     01 1E 66 36 |  if_ae	neg	local01, #1
11980     A7 1E 62 FC | 	wrlong	local01, fp
11984     F8 01 90 FD | 	jmp	#LR__1393
11988                 | LR__1386
11988                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
11988     08 4E 05 F1 | 	add	fp, #8
1198c     A7 1E 02 FB | 	rdlong	local01, fp
11990     08 4E 85 F1 | 	sub	fp, #8
11994     1D 1E 0E F2 | 	cmp	local01, #29 wz
11998     14 4E 05 A1 |  if_e	add	fp, #20
1199c     A7 22 02 AB |  if_e	rdlong	local03, fp
119a0     14 4E 85 A1 |  if_e	sub	fp, #20
119a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
119a8     34 00 90 5D |  if_ne	jmp	#LR__1387
119ac     00 1E 06 F6 | 	mov	local01, #0
119b0     A7 12 02 FB | 	rdlong	arg01, fp
119b4     00 CC B0 FD | 	call	#__system___float_fromuns
119b8     FD 12 02 F6 | 	mov	arg01, result1
119bc     0C 4E 05 F1 | 	add	fp, #12
119c0     A7 14 02 FB | 	rdlong	arg02, fp
119c4     0C 4E 85 F1 | 	sub	fp, #12
119c8     01 16 66 F6 | 	neg	arg03, #1
119cc     20 D4 B0 FD | 	call	#__system___float_cmp
119d0     00 FA 55 F2 | 	cmps	result1, #0 wc
119d4     00 1E 26 36 |  if_ae	not	local01, #0
119d8     A7 1E 62 FC | 	wrlong	local01, fp
119dc     A0 01 90 FD | 	jmp	#LR__1393
119e0                 | LR__1387
119e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
119e0     08 4E 05 F1 | 	add	fp, #8
119e4     A7 1E 02 FB | 	rdlong	local01, fp
119e8     08 4E 85 F1 | 	sub	fp, #8
119ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
119f0     14 4E 05 A1 |  if_e	add	fp, #20
119f4     A7 22 02 AB |  if_e	rdlong	local03, fp
119f8     14 4E 85 A1 |  if_e	sub	fp, #20
119fc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a00     24 00 90 5D |  if_ne	jmp	#LR__1388
11a04     00 1E 06 F6 | 	mov	local01, #0
11a08     A7 20 02 FB | 	rdlong	local02, fp
11a0c     0C 4E 05 F1 | 	add	fp, #12
11a10     A7 22 02 FB | 	rdlong	local03, fp
11a14     0C 4E 85 F1 | 	sub	fp, #12
11a18     11 21 52 F2 | 	cmps	local02, local03 wc
11a1c     01 1E 66 36 |  if_ae	neg	local01, #1
11a20     A7 1E 62 FC | 	wrlong	local01, fp
11a24     58 01 90 FD | 	jmp	#LR__1393
11a28                 | LR__1388
11a28                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
11a28     08 4E 05 F1 | 	add	fp, #8
11a2c     A7 1E 02 FB | 	rdlong	local01, fp
11a30     08 4E 85 F1 | 	sub	fp, #8
11a34     1D 1E 0E F2 | 	cmp	local01, #29 wz
11a38     14 4E 05 A1 |  if_e	add	fp, #20
11a3c     A7 22 02 AB |  if_e	rdlong	local03, fp
11a40     14 4E 85 A1 |  if_e	sub	fp, #20
11a44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11a48     24 00 90 5D |  if_ne	jmp	#LR__1389
11a4c     00 1E 06 F6 | 	mov	local01, #0
11a50     A7 20 02 FB | 	rdlong	local02, fp
11a54     0C 4E 05 F1 | 	add	fp, #12
11a58     A7 22 02 FB | 	rdlong	local03, fp
11a5c     0C 4E 85 F1 | 	sub	fp, #12
11a60     11 21 12 F2 | 	cmp	local02, local03 wc
11a64     01 1E 66 36 |  if_ae	neg	local01, #1
11a68     A7 1E 62 FC | 	wrlong	local01, fp
11a6c     10 01 90 FD | 	jmp	#LR__1393
11a70                 | LR__1389
11a70                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
11a70     08 4E 05 F1 | 	add	fp, #8
11a74     A7 1E 02 FB | 	rdlong	local01, fp
11a78     08 4E 85 F1 | 	sub	fp, #8
11a7c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11a80     14 4E 05 A1 |  if_e	add	fp, #20
11a84     A7 22 02 AB |  if_e	rdlong	local03, fp
11a88     14 4E 85 A1 |  if_e	sub	fp, #20
11a8c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11a90     30 00 90 5D |  if_ne	jmp	#LR__1390
11a94     00 1E 06 F6 | 	mov	local01, #0
11a98     A7 12 02 FB | 	rdlong	arg01, fp
11a9c     64 C5 BF FD | 	call	#_convertstring
11aa0     FD 12 02 F6 | 	mov	arg01, result1
11aa4     0C 4E 05 F1 | 	add	fp, #12
11aa8     A7 14 02 FB | 	rdlong	arg02, fp
11aac     0C 4E 85 F1 | 	sub	fp, #12
11ab0     B4 A3 B0 FD | 	call	#__system___string_cmp
11ab4     00 FA 55 F2 | 	cmps	result1, #0 wc
11ab8     00 1E 26 36 |  if_ae	not	local01, #0
11abc     A7 1E 62 FC | 	wrlong	local01, fp
11ac0     BC 00 90 FD | 	jmp	#LR__1393
11ac4                 | LR__1390
11ac4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
11ac4     08 4E 05 F1 | 	add	fp, #8
11ac8     A7 1E 02 FB | 	rdlong	local01, fp
11acc     08 4E 85 F1 | 	sub	fp, #8
11ad0     1F 1E 0E F2 | 	cmp	local01, #31 wz
11ad4     14 4E 05 A1 |  if_e	add	fp, #20
11ad8     A7 22 02 AB |  if_e	rdlong	local03, fp
11adc     14 4E 85 A1 |  if_e	sub	fp, #20
11ae0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11ae4     34 00 90 5D |  if_ne	jmp	#LR__1391
11ae8     00 1E 06 F6 | 	mov	local01, #0
11aec     A7 20 02 FB | 	rdlong	local02, fp
11af0     0C 4E 05 F1 | 	add	fp, #12
11af4     A7 12 02 FB | 	rdlong	arg01, fp
11af8     0C 4E 85 F1 | 	sub	fp, #12
11afc     04 C5 BF FD | 	call	#_convertstring
11b00     FD 14 02 F6 | 	mov	arg02, result1
11b04     10 13 02 F6 | 	mov	arg01, local02
11b08     5C A3 B0 FD | 	call	#__system___string_cmp
11b0c     00 FA 55 F2 | 	cmps	result1, #0 wc
11b10     00 1E 26 36 |  if_ae	not	local01, #0
11b14     A7 1E 62 FC | 	wrlong	local01, fp
11b18     64 00 90 FD | 	jmp	#LR__1393
11b1c                 | LR__1391
11b1c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
11b1c     08 4E 05 F1 | 	add	fp, #8
11b20     A7 1E 02 FB | 	rdlong	local01, fp
11b24     08 4E 85 F1 | 	sub	fp, #8
11b28     2B 1E 0E F2 | 	cmp	local01, #43 wz
11b2c     14 4E 05 A1 |  if_e	add	fp, #20
11b30     A7 22 02 AB |  if_e	rdlong	local03, fp
11b34     14 4E 85 A1 |  if_e	sub	fp, #20
11b38     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11b3c     3C 00 90 5D |  if_ne	jmp	#LR__1392
11b40     00 1E 06 F6 | 	mov	local01, #0
11b44     A7 12 02 FB | 	rdlong	arg01, fp
11b48     B8 C4 BF FD | 	call	#_convertstring
11b4c     FD 20 02 F6 | 	mov	local02, result1
11b50     0C 4E 05 F1 | 	add	fp, #12
11b54     A7 12 02 FB | 	rdlong	arg01, fp
11b58     0C 4E 85 F1 | 	sub	fp, #12
11b5c     A4 C4 BF FD | 	call	#_convertstring
11b60     FD 14 02 F6 | 	mov	arg02, result1
11b64     10 13 02 F6 | 	mov	arg01, local02
11b68     FC A2 B0 FD | 	call	#__system___string_cmp
11b6c     00 FA 55 F2 | 	cmps	result1, #0 wc
11b70     00 1E 26 36 |  if_ae	not	local01, #0
11b74     A7 1E 62 FC | 	wrlong	local01, fp
11b78     04 00 90 FD | 	jmp	#LR__1393
11b7c                 | LR__1392
11b7c     A7 00 68 FC | 	wrlong	#0, fp
11b80                 | LR__1393
11b80     08 4E 05 F1 | 	add	fp, #8
11b84     A7 38 68 FC | 	wrlong	#28, fp
11b88     08 4E 85 F1 | 	sub	fp, #8
11b8c     A7 12 02 F6 | 	mov	arg01, fp
11b90     8C 85 BF FD | 	call	#_push
11b94     A7 F0 03 F6 | 	mov	ptra, fp
11b98     B2 00 A0 FD | 	call	#popregs_
11b9c                 | _do_ge_ret
11b9c     2D 00 64 FD | 	ret
11ba0                 | 
11ba0                 | ' 
11ba0                 | ' sub do_le
11ba0                 | _do_le
11ba0     05 4A 05 F6 | 	mov	COUNT_, #5
11ba4     A8 00 A0 FD | 	call	#pushregs_
11ba8     18 F0 07 F1 | 	add	ptra, #24
11bac     D8 84 BF FD | 	call	#_pop
11bb0     FD 1E 02 F6 | 	mov	local01, result1
11bb4     FE 20 02 F6 | 	mov	local02, result2
11bb8     FF 22 02 F6 | 	mov	local03, result3
11bbc     0C 4E 05 F1 | 	add	fp, #12
11bc0     A7 1E 62 FC | 	wrlong	local01, fp
11bc4     04 4E 05 F1 | 	add	fp, #4
11bc8     A7 20 62 FC | 	wrlong	local02, fp
11bcc     04 4E 05 F1 | 	add	fp, #4
11bd0     A7 22 62 FC | 	wrlong	local03, fp
11bd4     14 4E 85 F1 | 	sub	fp, #20
11bd8     AC 84 BF FD | 	call	#_pop
11bdc     FF 22 02 F6 | 	mov	local03, result3
11be0     A7 FA 61 FC | 	wrlong	result1, fp
11be4     04 4E 05 F1 | 	add	fp, #4
11be8     A7 FC 61 FC | 	wrlong	result2, fp
11bec     04 4E 05 F1 | 	add	fp, #4
11bf0     A7 22 62 FC | 	wrlong	local03, fp
11bf4                 | ' t2=pop()
11bf4                 | ' t1=pop()
11bf4                 | ' 
11bf4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
11bf4     08 4E 85 F1 | 	sub	fp, #8
11bf8     1F 22 0E F2 | 	cmp	local03, #31 wz
11bfc     14 4E 05 A1 |  if_e	add	fp, #20
11c00     A7 24 02 AB |  if_e	rdlong	local04, fp
11c04     14 4E 85 A1 |  if_e	sub	fp, #20
11c08     12 23 02 A6 |  if_e	mov	local03, local04
11c0c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11c10     28 00 90 5D |  if_ne	jmp	#LR__1400
11c14     00 1E 06 F6 | 	mov	local01, #0
11c18     A7 12 02 FB | 	rdlong	arg01, fp
11c1c     0C 4E 05 F1 | 	add	fp, #12
11c20     A7 14 02 FB | 	rdlong	arg02, fp
11c24     0C 4E 85 F1 | 	sub	fp, #12
11c28     3C A2 B0 FD | 	call	#__system___string_cmp
11c2c     01 FA 55 F2 | 	cmps	result1, #1 wc
11c30     00 1E 26 C6 |  if_b	not	local01, #0
11c34     A7 1E 62 FC | 	wrlong	local01, fp
11c38     1C 04 90 FD | 	jmp	#LR__1413
11c3c                 | LR__1400
11c3c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
11c3c     08 4E 05 F1 | 	add	fp, #8
11c40     A7 1E 02 FB | 	rdlong	local01, fp
11c44     08 4E 85 F1 | 	sub	fp, #8
11c48     1E 1E 0E F2 | 	cmp	local01, #30 wz
11c4c     14 4E 05 A1 |  if_e	add	fp, #20
11c50     A7 24 02 AB |  if_e	rdlong	local04, fp
11c54     14 4E 85 A1 |  if_e	sub	fp, #20
11c58     12 23 02 A6 |  if_e	mov	local03, local04
11c5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11c60     2C 00 90 5D |  if_ne	jmp	#LR__1401
11c64     00 1E 06 F6 | 	mov	local01, #0
11c68     A7 12 02 FB | 	rdlong	arg01, fp
11c6c     0C 4E 05 F1 | 	add	fp, #12
11c70     A7 14 02 FB | 	rdlong	arg02, fp
11c74     0C 4E 85 F1 | 	sub	fp, #12
11c78     01 16 06 F6 | 	mov	arg03, #1
11c7c     70 D1 B0 FD | 	call	#__system___float_cmp
11c80     01 FA 55 F2 | 	cmps	result1, #1 wc
11c84     00 1E 26 C6 |  if_b	not	local01, #0
11c88     A7 1E 62 FC | 	wrlong	local01, fp
11c8c     C8 03 90 FD | 	jmp	#LR__1413
11c90                 | LR__1401
11c90                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
11c90     08 4E 05 F1 | 	add	fp, #8
11c94     A7 1E 02 FB | 	rdlong	local01, fp
11c98     08 4E 85 F1 | 	sub	fp, #8
11c9c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ca0     14 4E 05 A1 |  if_e	add	fp, #20
11ca4     A7 24 02 AB |  if_e	rdlong	local04, fp
11ca8     14 4E 85 A1 |  if_e	sub	fp, #20
11cac     12 23 02 A6 |  if_e	mov	local03, local04
11cb0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11cb4     48 00 90 5D |  if_ne	jmp	#LR__1402
11cb8     00 1E 06 F6 | 	mov	local01, #0
11cbc     A7 20 02 FB | 	rdlong	local02, fp
11cc0     0C 4E 05 F1 | 	add	fp, #12
11cc4     A7 12 02 FB | 	rdlong	arg01, fp
11cc8     0C 4E 85 F1 | 	sub	fp, #12
11ccc     09 13 52 F6 | 	abs	arg01, arg01 wc
11cd0     1F 26 C6 C9 |  if_b	decod	local05, #31
11cd4     00 26 06 36 |  if_ae	mov	local05, #0
11cd8     DC C8 B0 FD | 	call	#__system___float_fromuns
11cdc     13 FB 61 F5 | 	xor	result1, local05
11ce0     FD 14 02 F6 | 	mov	arg02, result1
11ce4     10 13 02 F6 | 	mov	arg01, local02
11ce8     01 16 06 F6 | 	mov	arg03, #1
11cec     00 D1 B0 FD | 	call	#__system___float_cmp
11cf0     01 FA 55 F2 | 	cmps	result1, #1 wc
11cf4     00 1E 26 C6 |  if_b	not	local01, #0
11cf8     A7 1E 62 FC | 	wrlong	local01, fp
11cfc     58 03 90 FD | 	jmp	#LR__1413
11d00                 | LR__1402
11d00                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
11d00     08 4E 05 F1 | 	add	fp, #8
11d04     A7 1E 02 FB | 	rdlong	local01, fp
11d08     08 4E 85 F1 | 	sub	fp, #8
11d0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d10     14 4E 05 A1 |  if_e	add	fp, #20
11d14     A7 24 02 AB |  if_e	rdlong	local04, fp
11d18     14 4E 85 A1 |  if_e	sub	fp, #20
11d1c     12 23 02 A6 |  if_e	mov	local03, local04
11d20     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11d24     38 00 90 5D |  if_ne	jmp	#LR__1403
11d28     00 1E 06 F6 | 	mov	local01, #0
11d2c     A7 20 02 FB | 	rdlong	local02, fp
11d30     0C 4E 05 F1 | 	add	fp, #12
11d34     A7 12 02 FB | 	rdlong	arg01, fp
11d38     0C 4E 85 F1 | 	sub	fp, #12
11d3c     78 C8 B0 FD | 	call	#__system___float_fromuns
11d40     FD 14 02 F6 | 	mov	arg02, result1
11d44     10 13 02 F6 | 	mov	arg01, local02
11d48     01 16 06 F6 | 	mov	arg03, #1
11d4c     A0 D0 B0 FD | 	call	#__system___float_cmp
11d50     01 FA 55 F2 | 	cmps	result1, #1 wc
11d54     00 1E 26 C6 |  if_b	not	local01, #0
11d58     A7 1E 62 FC | 	wrlong	local01, fp
11d5c     F8 02 90 FD | 	jmp	#LR__1413
11d60                 | LR__1403
11d60                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
11d60     08 4E 05 F1 | 	add	fp, #8
11d64     A7 1E 02 FB | 	rdlong	local01, fp
11d68     08 4E 85 F1 | 	sub	fp, #8
11d6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11d70     14 4E 05 A1 |  if_e	add	fp, #20
11d74     A7 24 02 AB |  if_e	rdlong	local04, fp
11d78     14 4E 85 A1 |  if_e	sub	fp, #20
11d7c     12 23 02 A6 |  if_e	mov	local03, local04
11d80     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11d84     44 00 90 5D |  if_ne	jmp	#LR__1404
11d88     00 1E 06 F6 | 	mov	local01, #0
11d8c     A7 12 02 FB | 	rdlong	arg01, fp
11d90     09 13 52 F6 | 	abs	arg01, arg01 wc
11d94     1F 26 C6 C9 |  if_b	decod	local05, #31
11d98     00 26 06 36 |  if_ae	mov	local05, #0
11d9c     18 C8 B0 FD | 	call	#__system___float_fromuns
11da0     13 FB 61 F5 | 	xor	result1, local05
11da4     FD 12 02 F6 | 	mov	arg01, result1
11da8     0C 4E 05 F1 | 	add	fp, #12
11dac     A7 14 02 FB | 	rdlong	arg02, fp
11db0     0C 4E 85 F1 | 	sub	fp, #12
11db4     01 16 06 F6 | 	mov	arg03, #1
11db8     34 D0 B0 FD | 	call	#__system___float_cmp
11dbc     01 FA 55 F2 | 	cmps	result1, #1 wc
11dc0     00 1E 26 C6 |  if_b	not	local01, #0
11dc4     A7 1E 62 FC | 	wrlong	local01, fp
11dc8     8C 02 90 FD | 	jmp	#LR__1413
11dcc                 | LR__1404
11dcc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
11dcc     08 4E 05 F1 | 	add	fp, #8
11dd0     A7 1E 02 FB | 	rdlong	local01, fp
11dd4     08 4E 85 F1 | 	sub	fp, #8
11dd8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11ddc     14 4E 05 A1 |  if_e	add	fp, #20
11de0     A7 24 02 AB |  if_e	rdlong	local04, fp
11de4     14 4E 85 A1 |  if_e	sub	fp, #20
11de8     12 23 02 A6 |  if_e	mov	local03, local04
11dec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11df0     24 00 90 5D |  if_ne	jmp	#LR__1405
11df4     00 1E 06 F6 | 	mov	local01, #0
11df8     A7 20 02 FB | 	rdlong	local02, fp
11dfc     0C 4E 05 F1 | 	add	fp, #12
11e00     A7 22 02 FB | 	rdlong	local03, fp
11e04     0C 4E 85 F1 | 	sub	fp, #12
11e08     11 21 5A F2 | 	cmps	local02, local03 wcz
11e0c     01 1E 66 E6 |  if_be	neg	local01, #1
11e10     A7 1E 62 FC | 	wrlong	local01, fp
11e14     40 02 90 FD | 	jmp	#LR__1413
11e18                 | LR__1405
11e18                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
11e18     08 4E 05 F1 | 	add	fp, #8
11e1c     A7 1E 02 FB | 	rdlong	local01, fp
11e20     08 4E 85 F1 | 	sub	fp, #8
11e24     1C 1E 0E F2 | 	cmp	local01, #28 wz
11e28     14 4E 05 A1 |  if_e	add	fp, #20
11e2c     A7 24 02 AB |  if_e	rdlong	local04, fp
11e30     14 4E 85 A1 |  if_e	sub	fp, #20
11e34     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11e38     24 00 90 5D |  if_ne	jmp	#LR__1406
11e3c     00 1E 06 F6 | 	mov	local01, #0
11e40     A7 20 02 FB | 	rdlong	local02, fp
11e44     0C 4E 05 F1 | 	add	fp, #12
11e48     A7 22 02 FB | 	rdlong	local03, fp
11e4c     0C 4E 85 F1 | 	sub	fp, #12
11e50     11 21 5A F2 | 	cmps	local02, local03 wcz
11e54     01 1E 66 E6 |  if_be	neg	local01, #1
11e58     A7 1E 62 FC | 	wrlong	local01, fp
11e5c     F8 01 90 FD | 	jmp	#LR__1413
11e60                 | LR__1406
11e60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
11e60     08 4E 05 F1 | 	add	fp, #8
11e64     A7 1E 02 FB | 	rdlong	local01, fp
11e68     08 4E 85 F1 | 	sub	fp, #8
11e6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11e70     14 4E 05 A1 |  if_e	add	fp, #20
11e74     A7 22 02 AB |  if_e	rdlong	local03, fp
11e78     14 4E 85 A1 |  if_e	sub	fp, #20
11e7c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11e80     34 00 90 5D |  if_ne	jmp	#LR__1407
11e84     00 1E 06 F6 | 	mov	local01, #0
11e88     A7 12 02 FB | 	rdlong	arg01, fp
11e8c     28 C7 B0 FD | 	call	#__system___float_fromuns
11e90     FD 12 02 F6 | 	mov	arg01, result1
11e94     0C 4E 05 F1 | 	add	fp, #12
11e98     A7 14 02 FB | 	rdlong	arg02, fp
11e9c     0C 4E 85 F1 | 	sub	fp, #12
11ea0     01 16 06 F6 | 	mov	arg03, #1
11ea4     48 CF B0 FD | 	call	#__system___float_cmp
11ea8     01 FA 55 F2 | 	cmps	result1, #1 wc
11eac     00 1E 26 C6 |  if_b	not	local01, #0
11eb0     A7 1E 62 FC | 	wrlong	local01, fp
11eb4     A0 01 90 FD | 	jmp	#LR__1413
11eb8                 | LR__1407
11eb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
11eb8     08 4E 05 F1 | 	add	fp, #8
11ebc     A7 1E 02 FB | 	rdlong	local01, fp
11ec0     08 4E 85 F1 | 	sub	fp, #8
11ec4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ec8     14 4E 05 A1 |  if_e	add	fp, #20
11ecc     A7 22 02 AB |  if_e	rdlong	local03, fp
11ed0     14 4E 85 A1 |  if_e	sub	fp, #20
11ed4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11ed8     24 00 90 5D |  if_ne	jmp	#LR__1408
11edc     00 1E 06 F6 | 	mov	local01, #0
11ee0     A7 20 02 FB | 	rdlong	local02, fp
11ee4     0C 4E 05 F1 | 	add	fp, #12
11ee8     A7 22 02 FB | 	rdlong	local03, fp
11eec     0C 4E 85 F1 | 	sub	fp, #12
11ef0     11 21 5A F2 | 	cmps	local02, local03 wcz
11ef4     01 1E 66 E6 |  if_be	neg	local01, #1
11ef8     A7 1E 62 FC | 	wrlong	local01, fp
11efc     58 01 90 FD | 	jmp	#LR__1413
11f00                 | LR__1408
11f00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
11f00     08 4E 05 F1 | 	add	fp, #8
11f04     A7 1E 02 FB | 	rdlong	local01, fp
11f08     08 4E 85 F1 | 	sub	fp, #8
11f0c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11f10     14 4E 05 A1 |  if_e	add	fp, #20
11f14     A7 22 02 AB |  if_e	rdlong	local03, fp
11f18     14 4E 85 A1 |  if_e	sub	fp, #20
11f1c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11f20     24 00 90 5D |  if_ne	jmp	#LR__1409
11f24     00 1E 06 F6 | 	mov	local01, #0
11f28     A7 20 02 FB | 	rdlong	local02, fp
11f2c     0C 4E 05 F1 | 	add	fp, #12
11f30     A7 22 02 FB | 	rdlong	local03, fp
11f34     0C 4E 85 F1 | 	sub	fp, #12
11f38     11 21 1A F2 | 	cmp	local02, local03 wcz
11f3c     01 1E 66 E6 |  if_be	neg	local01, #1
11f40     A7 1E 62 FC | 	wrlong	local01, fp
11f44     10 01 90 FD | 	jmp	#LR__1413
11f48                 | LR__1409
11f48                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
11f48     08 4E 05 F1 | 	add	fp, #8
11f4c     A7 1E 02 FB | 	rdlong	local01, fp
11f50     08 4E 85 F1 | 	sub	fp, #8
11f54     2B 1E 0E F2 | 	cmp	local01, #43 wz
11f58     14 4E 05 A1 |  if_e	add	fp, #20
11f5c     A7 22 02 AB |  if_e	rdlong	local03, fp
11f60     14 4E 85 A1 |  if_e	sub	fp, #20
11f64     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11f68     30 00 90 5D |  if_ne	jmp	#LR__1410
11f6c     00 1E 06 F6 | 	mov	local01, #0
11f70     A7 12 02 FB | 	rdlong	arg01, fp
11f74     8C C0 BF FD | 	call	#_convertstring
11f78     FD 12 02 F6 | 	mov	arg01, result1
11f7c     0C 4E 05 F1 | 	add	fp, #12
11f80     A7 14 02 FB | 	rdlong	arg02, fp
11f84     0C 4E 85 F1 | 	sub	fp, #12
11f88     DC 9E B0 FD | 	call	#__system___string_cmp
11f8c     01 FA 55 F2 | 	cmps	result1, #1 wc
11f90     00 1E 26 C6 |  if_b	not	local01, #0
11f94     A7 1E 62 FC | 	wrlong	local01, fp
11f98     BC 00 90 FD | 	jmp	#LR__1413
11f9c                 | LR__1410
11f9c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
11f9c     08 4E 05 F1 | 	add	fp, #8
11fa0     A7 1E 02 FB | 	rdlong	local01, fp
11fa4     08 4E 85 F1 | 	sub	fp, #8
11fa8     1F 1E 0E F2 | 	cmp	local01, #31 wz
11fac     14 4E 05 A1 |  if_e	add	fp, #20
11fb0     A7 22 02 AB |  if_e	rdlong	local03, fp
11fb4     14 4E 85 A1 |  if_e	sub	fp, #20
11fb8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11fbc     34 00 90 5D |  if_ne	jmp	#LR__1411
11fc0     00 1E 06 F6 | 	mov	local01, #0
11fc4     A7 20 02 FB | 	rdlong	local02, fp
11fc8     0C 4E 05 F1 | 	add	fp, #12
11fcc     A7 12 02 FB | 	rdlong	arg01, fp
11fd0     0C 4E 85 F1 | 	sub	fp, #12
11fd4     2C C0 BF FD | 	call	#_convertstring
11fd8     FD 14 02 F6 | 	mov	arg02, result1
11fdc     10 13 02 F6 | 	mov	arg01, local02
11fe0     84 9E B0 FD | 	call	#__system___string_cmp
11fe4     01 FA 55 F2 | 	cmps	result1, #1 wc
11fe8     00 1E 26 C6 |  if_b	not	local01, #0
11fec     A7 1E 62 FC | 	wrlong	local01, fp
11ff0     64 00 90 FD | 	jmp	#LR__1413
11ff4                 | LR__1411
11ff4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
11ff4     08 4E 05 F1 | 	add	fp, #8
11ff8     A7 1E 02 FB | 	rdlong	local01, fp
11ffc     08 4E 85 F1 | 	sub	fp, #8
12000     2B 1E 0E F2 | 	cmp	local01, #43 wz
12004     14 4E 05 A1 |  if_e	add	fp, #20
12008     A7 22 02 AB |  if_e	rdlong	local03, fp
1200c     14 4E 85 A1 |  if_e	sub	fp, #20
12010     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12014     3C 00 90 5D |  if_ne	jmp	#LR__1412
12018     00 1E 06 F6 | 	mov	local01, #0
1201c     A7 12 02 FB | 	rdlong	arg01, fp
12020     E0 BF BF FD | 	call	#_convertstring
12024     FD 20 02 F6 | 	mov	local02, result1
12028     0C 4E 05 F1 | 	add	fp, #12
1202c     A7 12 02 FB | 	rdlong	arg01, fp
12030     0C 4E 85 F1 | 	sub	fp, #12
12034     CC BF BF FD | 	call	#_convertstring
12038     FD 14 02 F6 | 	mov	arg02, result1
1203c     10 13 02 F6 | 	mov	arg01, local02
12040     24 9E B0 FD | 	call	#__system___string_cmp
12044     01 FA 55 F2 | 	cmps	result1, #1 wc
12048     00 1E 26 C6 |  if_b	not	local01, #0
1204c     A7 1E 62 FC | 	wrlong	local01, fp
12050     04 00 90 FD | 	jmp	#LR__1413
12054                 | LR__1412
12054     A7 00 68 FC | 	wrlong	#0, fp
12058                 | LR__1413
12058     08 4E 05 F1 | 	add	fp, #8
1205c     A7 38 68 FC | 	wrlong	#28, fp
12060     08 4E 85 F1 | 	sub	fp, #8
12064     A7 12 02 F6 | 	mov	arg01, fp
12068     B4 80 BF FD | 	call	#_push
1206c     A7 F0 03 F6 | 	mov	ptra, fp
12070     B2 00 A0 FD | 	call	#popregs_
12074                 | _do_le_ret
12074     2D 00 64 FD | 	ret
12078                 | 
12078                 | ' 
12078                 | ' 
12078                 | ' sub do_ne
12078                 | _do_ne
12078     05 4A 05 F6 | 	mov	COUNT_, #5
1207c     A8 00 A0 FD | 	call	#pushregs_
12080     18 F0 07 F1 | 	add	ptra, #24
12084     00 80 BF FD | 	call	#_pop
12088     FD 1E 02 F6 | 	mov	local01, result1
1208c     FE 20 02 F6 | 	mov	local02, result2
12090     FF 22 02 F6 | 	mov	local03, result3
12094     0C 4E 05 F1 | 	add	fp, #12
12098     A7 1E 62 FC | 	wrlong	local01, fp
1209c     04 4E 05 F1 | 	add	fp, #4
120a0     A7 20 62 FC | 	wrlong	local02, fp
120a4     04 4E 05 F1 | 	add	fp, #4
120a8     A7 22 62 FC | 	wrlong	local03, fp
120ac     14 4E 85 F1 | 	sub	fp, #20
120b0     D4 7F BF FD | 	call	#_pop
120b4     FF 22 02 F6 | 	mov	local03, result3
120b8     A7 FA 61 FC | 	wrlong	result1, fp
120bc     04 4E 05 F1 | 	add	fp, #4
120c0     A7 FC 61 FC | 	wrlong	result2, fp
120c4     04 4E 05 F1 | 	add	fp, #4
120c8     A7 22 62 FC | 	wrlong	local03, fp
120cc                 | ' t2=pop()
120cc                 | ' t1=pop()
120cc                 | ' 
120cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
120cc     08 4E 85 F1 | 	sub	fp, #8
120d0     1F 22 0E F2 | 	cmp	local03, #31 wz
120d4     14 4E 05 A1 |  if_e	add	fp, #20
120d8     A7 24 02 AB |  if_e	rdlong	local04, fp
120dc     14 4E 85 A1 |  if_e	sub	fp, #20
120e0     12 23 02 A6 |  if_e	mov	local03, local04
120e4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
120e8     28 00 90 5D |  if_ne	jmp	#LR__1420
120ec     00 1E 06 F6 | 	mov	local01, #0
120f0     A7 12 02 FB | 	rdlong	arg01, fp
120f4     0C 4E 05 F1 | 	add	fp, #12
120f8     A7 14 02 FB | 	rdlong	arg02, fp
120fc     0C 4E 85 F1 | 	sub	fp, #12
12100     64 9D B0 FD | 	call	#__system___string_cmp
12104     00 FA 0D F2 | 	cmp	result1, #0 wz
12108     00 1E 26 56 |  if_ne	not	local01, #0
1210c     A7 1E 62 FC | 	wrlong	local01, fp
12110     1C 04 90 FD | 	jmp	#LR__1433
12114                 | LR__1420
12114                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
12114     08 4E 05 F1 | 	add	fp, #8
12118     A7 1E 02 FB | 	rdlong	local01, fp
1211c     08 4E 85 F1 | 	sub	fp, #8
12120     1E 1E 0E F2 | 	cmp	local01, #30 wz
12124     14 4E 05 A1 |  if_e	add	fp, #20
12128     A7 24 02 AB |  if_e	rdlong	local04, fp
1212c     14 4E 85 A1 |  if_e	sub	fp, #20
12130     12 23 02 A6 |  if_e	mov	local03, local04
12134     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12138     2C 00 90 5D |  if_ne	jmp	#LR__1421
1213c     00 1E 06 F6 | 	mov	local01, #0
12140     A7 12 02 FB | 	rdlong	arg01, fp
12144     0C 4E 05 F1 | 	add	fp, #12
12148     A7 14 02 FB | 	rdlong	arg02, fp
1214c     0C 4E 85 F1 | 	sub	fp, #12
12150     01 16 06 F6 | 	mov	arg03, #1
12154     98 CC B0 FD | 	call	#__system___float_cmp
12158     00 FA 0D F2 | 	cmp	result1, #0 wz
1215c     00 1E 26 56 |  if_ne	not	local01, #0
12160     A7 1E 62 FC | 	wrlong	local01, fp
12164     C8 03 90 FD | 	jmp	#LR__1433
12168                 | LR__1421
12168                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
12168     08 4E 05 F1 | 	add	fp, #8
1216c     A7 1E 02 FB | 	rdlong	local01, fp
12170     08 4E 85 F1 | 	sub	fp, #8
12174     1E 1E 0E F2 | 	cmp	local01, #30 wz
12178     14 4E 05 A1 |  if_e	add	fp, #20
1217c     A7 24 02 AB |  if_e	rdlong	local04, fp
12180     14 4E 85 A1 |  if_e	sub	fp, #20
12184     12 23 02 A6 |  if_e	mov	local03, local04
12188     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1218c     48 00 90 5D |  if_ne	jmp	#LR__1422
12190     00 1E 06 F6 | 	mov	local01, #0
12194     A7 20 02 FB | 	rdlong	local02, fp
12198     0C 4E 05 F1 | 	add	fp, #12
1219c     A7 12 02 FB | 	rdlong	arg01, fp
121a0     0C 4E 85 F1 | 	sub	fp, #12
121a4     09 13 52 F6 | 	abs	arg01, arg01 wc
121a8     1F 26 C6 C9 |  if_b	decod	local05, #31
121ac     00 26 06 36 |  if_ae	mov	local05, #0
121b0     04 C4 B0 FD | 	call	#__system___float_fromuns
121b4     13 FB 61 F5 | 	xor	result1, local05
121b8     FD 14 02 F6 | 	mov	arg02, result1
121bc     10 13 02 F6 | 	mov	arg01, local02
121c0     01 16 06 F6 | 	mov	arg03, #1
121c4     28 CC B0 FD | 	call	#__system___float_cmp
121c8     00 FA 0D F2 | 	cmp	result1, #0 wz
121cc     00 1E 26 56 |  if_ne	not	local01, #0
121d0     A7 1E 62 FC | 	wrlong	local01, fp
121d4     58 03 90 FD | 	jmp	#LR__1433
121d8                 | LR__1422
121d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
121d8     08 4E 05 F1 | 	add	fp, #8
121dc     A7 1E 02 FB | 	rdlong	local01, fp
121e0     08 4E 85 F1 | 	sub	fp, #8
121e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
121e8     14 4E 05 A1 |  if_e	add	fp, #20
121ec     A7 24 02 AB |  if_e	rdlong	local04, fp
121f0     14 4E 85 A1 |  if_e	sub	fp, #20
121f4     12 23 02 A6 |  if_e	mov	local03, local04
121f8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
121fc     38 00 90 5D |  if_ne	jmp	#LR__1423
12200     00 1E 06 F6 | 	mov	local01, #0
12204     A7 20 02 FB | 	rdlong	local02, fp
12208     0C 4E 05 F1 | 	add	fp, #12
1220c     A7 12 02 FB | 	rdlong	arg01, fp
12210     0C 4E 85 F1 | 	sub	fp, #12
12214     A0 C3 B0 FD | 	call	#__system___float_fromuns
12218     FD 14 02 F6 | 	mov	arg02, result1
1221c     10 13 02 F6 | 	mov	arg01, local02
12220     01 16 06 F6 | 	mov	arg03, #1
12224     C8 CB B0 FD | 	call	#__system___float_cmp
12228     00 FA 0D F2 | 	cmp	result1, #0 wz
1222c     00 1E 26 56 |  if_ne	not	local01, #0
12230     A7 1E 62 FC | 	wrlong	local01, fp
12234     F8 02 90 FD | 	jmp	#LR__1433
12238                 | LR__1423
12238                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
12238     08 4E 05 F1 | 	add	fp, #8
1223c     A7 1E 02 FB | 	rdlong	local01, fp
12240     08 4E 85 F1 | 	sub	fp, #8
12244     1C 1E 0E F2 | 	cmp	local01, #28 wz
12248     14 4E 05 A1 |  if_e	add	fp, #20
1224c     A7 24 02 AB |  if_e	rdlong	local04, fp
12250     14 4E 85 A1 |  if_e	sub	fp, #20
12254     12 23 02 A6 |  if_e	mov	local03, local04
12258     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1225c     44 00 90 5D |  if_ne	jmp	#LR__1424
12260     00 1E 06 F6 | 	mov	local01, #0
12264     A7 12 02 FB | 	rdlong	arg01, fp
12268     09 13 52 F6 | 	abs	arg01, arg01 wc
1226c     1F 26 C6 C9 |  if_b	decod	local05, #31
12270     00 26 06 36 |  if_ae	mov	local05, #0
12274     40 C3 B0 FD | 	call	#__system___float_fromuns
12278     13 FB 61 F5 | 	xor	result1, local05
1227c     FD 12 02 F6 | 	mov	arg01, result1
12280     0C 4E 05 F1 | 	add	fp, #12
12284     A7 14 02 FB | 	rdlong	arg02, fp
12288     0C 4E 85 F1 | 	sub	fp, #12
1228c     01 16 06 F6 | 	mov	arg03, #1
12290     5C CB B0 FD | 	call	#__system___float_cmp
12294     00 FA 0D F2 | 	cmp	result1, #0 wz
12298     00 1E 26 56 |  if_ne	not	local01, #0
1229c     A7 1E 62 FC | 	wrlong	local01, fp
122a0     8C 02 90 FD | 	jmp	#LR__1433
122a4                 | LR__1424
122a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
122a4     08 4E 05 F1 | 	add	fp, #8
122a8     A7 1E 02 FB | 	rdlong	local01, fp
122ac     08 4E 85 F1 | 	sub	fp, #8
122b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
122b4     14 4E 05 A1 |  if_e	add	fp, #20
122b8     A7 24 02 AB |  if_e	rdlong	local04, fp
122bc     14 4E 85 A1 |  if_e	sub	fp, #20
122c0     12 23 02 A6 |  if_e	mov	local03, local04
122c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
122c8     24 00 90 5D |  if_ne	jmp	#LR__1425
122cc     00 1E 06 F6 | 	mov	local01, #0
122d0     A7 20 02 FB | 	rdlong	local02, fp
122d4     0C 4E 05 F1 | 	add	fp, #12
122d8     A7 22 02 FB | 	rdlong	local03, fp
122dc     0C 4E 85 F1 | 	sub	fp, #12
122e0     11 21 0A F2 | 	cmp	local02, local03 wz
122e4     01 1E 66 56 |  if_ne	neg	local01, #1
122e8     A7 1E 62 FC | 	wrlong	local01, fp
122ec     40 02 90 FD | 	jmp	#LR__1433
122f0                 | LR__1425
122f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
122f0     08 4E 05 F1 | 	add	fp, #8
122f4     A7 1E 02 FB | 	rdlong	local01, fp
122f8     08 4E 85 F1 | 	sub	fp, #8
122fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12300     14 4E 05 A1 |  if_e	add	fp, #20
12304     A7 24 02 AB |  if_e	rdlong	local04, fp
12308     14 4E 85 A1 |  if_e	sub	fp, #20
1230c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12310     24 00 90 5D |  if_ne	jmp	#LR__1426
12314     00 1E 06 F6 | 	mov	local01, #0
12318     A7 20 02 FB | 	rdlong	local02, fp
1231c     0C 4E 05 F1 | 	add	fp, #12
12320     A7 22 02 FB | 	rdlong	local03, fp
12324     0C 4E 85 F1 | 	sub	fp, #12
12328     11 21 0A F2 | 	cmp	local02, local03 wz
1232c     01 1E 66 56 |  if_ne	neg	local01, #1
12330     A7 1E 62 FC | 	wrlong	local01, fp
12334     F8 01 90 FD | 	jmp	#LR__1433
12338                 | LR__1426
12338                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
12338     08 4E 05 F1 | 	add	fp, #8
1233c     A7 1E 02 FB | 	rdlong	local01, fp
12340     08 4E 85 F1 | 	sub	fp, #8
12344     1D 1E 0E F2 | 	cmp	local01, #29 wz
12348     14 4E 05 A1 |  if_e	add	fp, #20
1234c     A7 22 02 AB |  if_e	rdlong	local03, fp
12350     14 4E 85 A1 |  if_e	sub	fp, #20
12354     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12358     34 00 90 5D |  if_ne	jmp	#LR__1427
1235c     00 1E 06 F6 | 	mov	local01, #0
12360     A7 12 02 FB | 	rdlong	arg01, fp
12364     50 C2 B0 FD | 	call	#__system___float_fromuns
12368     FD 12 02 F6 | 	mov	arg01, result1
1236c     0C 4E 05 F1 | 	add	fp, #12
12370     A7 14 02 FB | 	rdlong	arg02, fp
12374     0C 4E 85 F1 | 	sub	fp, #12
12378     01 16 06 F6 | 	mov	arg03, #1
1237c     70 CA B0 FD | 	call	#__system___float_cmp
12380     00 FA 0D F2 | 	cmp	result1, #0 wz
12384     00 1E 26 56 |  if_ne	not	local01, #0
12388     A7 1E 62 FC | 	wrlong	local01, fp
1238c     A0 01 90 FD | 	jmp	#LR__1433
12390                 | LR__1427
12390                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
12390     08 4E 05 F1 | 	add	fp, #8
12394     A7 1E 02 FB | 	rdlong	local01, fp
12398     08 4E 85 F1 | 	sub	fp, #8
1239c     1D 1E 0E F2 | 	cmp	local01, #29 wz
123a0     14 4E 05 A1 |  if_e	add	fp, #20
123a4     A7 22 02 AB |  if_e	rdlong	local03, fp
123a8     14 4E 85 A1 |  if_e	sub	fp, #20
123ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
123b0     24 00 90 5D |  if_ne	jmp	#LR__1428
123b4     00 1E 06 F6 | 	mov	local01, #0
123b8     A7 20 02 FB | 	rdlong	local02, fp
123bc     0C 4E 05 F1 | 	add	fp, #12
123c0     A7 22 02 FB | 	rdlong	local03, fp
123c4     0C 4E 85 F1 | 	sub	fp, #12
123c8     11 21 0A F2 | 	cmp	local02, local03 wz
123cc     01 1E 66 56 |  if_ne	neg	local01, #1
123d0     A7 1E 62 FC | 	wrlong	local01, fp
123d4     58 01 90 FD | 	jmp	#LR__1433
123d8                 | LR__1428
123d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
123d8     08 4E 05 F1 | 	add	fp, #8
123dc     A7 1E 02 FB | 	rdlong	local01, fp
123e0     08 4E 85 F1 | 	sub	fp, #8
123e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
123e8     14 4E 05 A1 |  if_e	add	fp, #20
123ec     A7 22 02 AB |  if_e	rdlong	local03, fp
123f0     14 4E 85 A1 |  if_e	sub	fp, #20
123f4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
123f8     24 00 90 5D |  if_ne	jmp	#LR__1429
123fc     00 1E 06 F6 | 	mov	local01, #0
12400     A7 20 02 FB | 	rdlong	local02, fp
12404     0C 4E 05 F1 | 	add	fp, #12
12408     A7 22 02 FB | 	rdlong	local03, fp
1240c     0C 4E 85 F1 | 	sub	fp, #12
12410     11 21 0A F2 | 	cmp	local02, local03 wz
12414     01 1E 66 56 |  if_ne	neg	local01, #1
12418     A7 1E 62 FC | 	wrlong	local01, fp
1241c     10 01 90 FD | 	jmp	#LR__1433
12420                 | LR__1429
12420                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
12420     08 4E 05 F1 | 	add	fp, #8
12424     A7 1E 02 FB | 	rdlong	local01, fp
12428     08 4E 85 F1 | 	sub	fp, #8
1242c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12430     14 4E 05 A1 |  if_e	add	fp, #20
12434     A7 22 02 AB |  if_e	rdlong	local03, fp
12438     14 4E 85 A1 |  if_e	sub	fp, #20
1243c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12440     30 00 90 5D |  if_ne	jmp	#LR__1430
12444     00 1E 06 F6 | 	mov	local01, #0
12448     A7 12 02 FB | 	rdlong	arg01, fp
1244c     B4 BB BF FD | 	call	#_convertstring
12450     FD 12 02 F6 | 	mov	arg01, result1
12454     0C 4E 05 F1 | 	add	fp, #12
12458     A7 14 02 FB | 	rdlong	arg02, fp
1245c     0C 4E 85 F1 | 	sub	fp, #12
12460     04 9A B0 FD | 	call	#__system___string_cmp
12464     00 FA 0D F2 | 	cmp	result1, #0 wz
12468     00 1E 26 56 |  if_ne	not	local01, #0
1246c     A7 1E 62 FC | 	wrlong	local01, fp
12470     BC 00 90 FD | 	jmp	#LR__1433
12474                 | LR__1430
12474                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
12474     08 4E 05 F1 | 	add	fp, #8
12478     A7 1E 02 FB | 	rdlong	local01, fp
1247c     08 4E 85 F1 | 	sub	fp, #8
12480     1F 1E 0E F2 | 	cmp	local01, #31 wz
12484     14 4E 05 A1 |  if_e	add	fp, #20
12488     A7 22 02 AB |  if_e	rdlong	local03, fp
1248c     14 4E 85 A1 |  if_e	sub	fp, #20
12490     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12494     34 00 90 5D |  if_ne	jmp	#LR__1431
12498     00 1E 06 F6 | 	mov	local01, #0
1249c     A7 20 02 FB | 	rdlong	local02, fp
124a0     0C 4E 05 F1 | 	add	fp, #12
124a4     A7 12 02 FB | 	rdlong	arg01, fp
124a8     0C 4E 85 F1 | 	sub	fp, #12
124ac     54 BB BF FD | 	call	#_convertstring
124b0     FD 14 02 F6 | 	mov	arg02, result1
124b4     10 13 02 F6 | 	mov	arg01, local02
124b8     AC 99 B0 FD | 	call	#__system___string_cmp
124bc     00 FA 0D F2 | 	cmp	result1, #0 wz
124c0     00 1E 26 56 |  if_ne	not	local01, #0
124c4     A7 1E 62 FC | 	wrlong	local01, fp
124c8     64 00 90 FD | 	jmp	#LR__1433
124cc                 | LR__1431
124cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
124cc     08 4E 05 F1 | 	add	fp, #8
124d0     A7 1E 02 FB | 	rdlong	local01, fp
124d4     08 4E 85 F1 | 	sub	fp, #8
124d8     2B 1E 0E F2 | 	cmp	local01, #43 wz
124dc     14 4E 05 A1 |  if_e	add	fp, #20
124e0     A7 22 02 AB |  if_e	rdlong	local03, fp
124e4     14 4E 85 A1 |  if_e	sub	fp, #20
124e8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
124ec     3C 00 90 5D |  if_ne	jmp	#LR__1432
124f0     00 1E 06 F6 | 	mov	local01, #0
124f4     A7 12 02 FB | 	rdlong	arg01, fp
124f8     08 BB BF FD | 	call	#_convertstring
124fc     FD 20 02 F6 | 	mov	local02, result1
12500     0C 4E 05 F1 | 	add	fp, #12
12504     A7 12 02 FB | 	rdlong	arg01, fp
12508     0C 4E 85 F1 | 	sub	fp, #12
1250c     F4 BA BF FD | 	call	#_convertstring
12510     FD 14 02 F6 | 	mov	arg02, result1
12514     10 13 02 F6 | 	mov	arg01, local02
12518     4C 99 B0 FD | 	call	#__system___string_cmp
1251c     00 FA 0D F2 | 	cmp	result1, #0 wz
12520     00 1E 26 56 |  if_ne	not	local01, #0
12524     A7 1E 62 FC | 	wrlong	local01, fp
12528     04 00 90 FD | 	jmp	#LR__1433
1252c                 | LR__1432
1252c     A7 00 68 FC | 	wrlong	#0, fp
12530                 | LR__1433
12530     08 4E 05 F1 | 	add	fp, #8
12534     A7 38 68 FC | 	wrlong	#28, fp
12538     08 4E 85 F1 | 	sub	fp, #8
1253c     A7 12 02 F6 | 	mov	arg01, fp
12540     DC 7B BF FD | 	call	#_push
12544     A7 F0 03 F6 | 	mov	ptra, fp
12548     B2 00 A0 FD | 	call	#popregs_
1254c                 | _do_ne_ret
1254c     2D 00 64 FD | 	ret
12550                 | 
12550                 | ' 
12550                 | ' 
12550                 | ' 
12550                 | ' ' -------------------   convert a variable on the top of stack to integer
12550                 | ' 
12550                 | ' sub do_converttoint
12550                 | _do_converttoint
12550     02 4A 05 F6 | 	mov	COUNT_, #2
12554     A8 00 A0 FD | 	call	#pushregs_
12558     18 F0 07 F1 | 	add	ptra, #24
1255c     28 7B BF FD | 	call	#_pop
12560     FE 1E 02 F6 | 	mov	local01, result2
12564     FF 20 02 F6 | 	mov	local02, result3
12568     A7 FA 61 FC | 	wrlong	result1, fp
1256c     04 4E 05 F1 | 	add	fp, #4
12570     A7 1E 62 FC | 	wrlong	local01, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 20 62 FC | 	wrlong	local02, fp
1257c                 | ' t1=pop() 
1257c                 | ' select case t1.result_type
1257c     08 4E 85 F1 | 	sub	fp, #8
12580     1C 20 0E F2 | 	cmp	local02, #28 wz
12584     2C 00 90 AD |  if_e	jmp	#LR__1440
12588     1D 20 0E F2 | 	cmp	local02, #29 wz
1258c     40 00 90 AD |  if_e	jmp	#LR__1441
12590     1E 20 0E F2 | 	cmp	local02, #30 wz
12594     54 00 90 AD |  if_e	jmp	#LR__1442
12598     1F 20 0E F2 | 	cmp	local02, #31 wz
1259c     70 00 90 AD |  if_e	jmp	#LR__1443
125a0     2B 20 0E F2 | 	cmp	local02, #43 wz
125a4     94 00 90 AD |  if_e	jmp	#LR__1444
125a8     FF 20 0E F2 | 	cmp	local02, #255 wz
125ac     C0 00 90 AD |  if_e	jmp	#LR__1445
125b0     DC 00 90 FD | 	jmp	#LR__1446
125b4                 | LR__1440
125b4     A7 20 02 FB | 	rdlong	local02, fp
125b8     0C 4E 05 F1 | 	add	fp, #12
125bc     A7 20 62 FC | 	wrlong	local02, fp
125c0     04 4E 05 F1 | 	add	fp, #4
125c4     A7 38 68 FC | 	wrlong	#28, fp
125c8     10 4E 85 F1 | 	sub	fp, #16
125cc     D4 00 90 FD | 	jmp	#LR__1447
125d0                 | LR__1441
125d0     A7 20 02 FB | 	rdlong	local02, fp
125d4     0C 4E 05 F1 | 	add	fp, #12
125d8     A7 20 62 FC | 	wrlong	local02, fp
125dc     04 4E 05 F1 | 	add	fp, #4
125e0     A7 38 68 FC | 	wrlong	#28, fp
125e4     10 4E 85 F1 | 	sub	fp, #16
125e8     B8 00 90 FD | 	jmp	#LR__1447
125ec                 | LR__1442
125ec     A7 12 02 FB | 	rdlong	arg01, fp
125f0     01 14 06 F6 | 	mov	arg02, #1
125f4     8C C8 B0 FD | 	call	#__system___float_tointeger
125f8     0C 4E 05 F1 | 	add	fp, #12
125fc     A7 FA 61 FC | 	wrlong	result1, fp
12600     04 4E 05 F1 | 	add	fp, #4
12604     A7 38 68 FC | 	wrlong	#28, fp
12608     10 4E 85 F1 | 	sub	fp, #16
1260c     94 00 90 FD | 	jmp	#LR__1447
12610                 | LR__1443
12610     A7 12 02 FB | 	rdlong	arg01, fp
12614     8C CB B0 FD | 	call	#__system____builtin_atof
12618     FD 12 02 F6 | 	mov	arg01, result1
1261c     00 14 06 F6 | 	mov	arg02, #0
12620     60 C8 B0 FD | 	call	#__system___float_tointeger
12624     0C 4E 05 F1 | 	add	fp, #12
12628     A7 FA 61 FC | 	wrlong	result1, fp
1262c     04 4E 05 F1 | 	add	fp, #4
12630     A7 38 68 FC | 	wrlong	#28, fp
12634     10 4E 85 F1 | 	sub	fp, #16
12638     68 00 90 FD | 	jmp	#LR__1447
1263c                 | LR__1444
1263c     A7 12 02 FB | 	rdlong	arg01, fp
12640     C0 B9 BF FD | 	call	#_convertstring
12644     FD 12 02 F6 | 	mov	arg01, result1
12648     58 CB B0 FD | 	call	#__system____builtin_atof
1264c     FD 12 02 F6 | 	mov	arg01, result1
12650     00 14 06 F6 | 	mov	arg02, #0
12654     2C C8 B0 FD | 	call	#__system___float_tointeger
12658     0C 4E 05 F1 | 	add	fp, #12
1265c     A7 FA 61 FC | 	wrlong	result1, fp
12660     04 4E 05 F1 | 	add	fp, #4
12664     A7 38 68 FC | 	wrlong	#28, fp
12668     10 4E 85 F1 | 	sub	fp, #16
1266c     34 00 90 FD | 	jmp	#LR__1447
12670                 | LR__1445
12670     0C 4E 05 F1 | 	add	fp, #12
12674     A7 00 68 FC | 	wrlong	#0, fp
12678     0C 4E 85 F1 | 	sub	fp, #12
1267c     A7 20 02 FB | 	rdlong	local02, fp
12680     10 4E 05 F1 | 	add	fp, #16
12684     A7 20 62 FC | 	wrlong	local02, fp
12688     10 4E 85 F1 | 	sub	fp, #16
1268c     14 00 90 FD | 	jmp	#LR__1447
12690                 | LR__1446
12690     0C 4E 05 F1 | 	add	fp, #12
12694     A7 00 68 FC | 	wrlong	#0, fp
12698     04 4E 05 F1 | 	add	fp, #4
1269c     A7 02 68 FC | 	wrlong	#1, fp
126a0     10 4E 85 F1 | 	sub	fp, #16
126a4                 | LR__1447
126a4     0C 4E 05 F1 | 	add	fp, #12
126a8     A7 20 02 FB | 	rdlong	local02, fp
126ac     0C 4E 85 F1 | 	sub	fp, #12
126b0     A7 20 62 FC | 	wrlong	local02, fp
126b4     10 4E 05 F1 | 	add	fp, #16
126b8     A7 20 02 FB | 	rdlong	local02, fp
126bc     08 4E 85 F1 | 	sub	fp, #8
126c0     A7 20 62 FC | 	wrlong	local02, fp
126c4     08 4E 85 F1 | 	sub	fp, #8
126c8     A7 12 02 F6 | 	mov	arg01, fp
126cc     50 7A BF FD | 	call	#_push
126d0     A7 F0 03 F6 | 	mov	ptra, fp
126d4     B2 00 A0 FD | 	call	#popregs_
126d8                 | _do_converttoint_ret
126d8     2D 00 64 FD | 	ret
126dc                 | 
126dc                 | ' 
126dc                 | ' function converttoint (t1 as expr_result) as integer
126dc                 | _converttoint
126dc     02 4A 05 F6 | 	mov	COUNT_, #2
126e0     A8 00 A0 FD | 	call	#pushregs_
126e4     09 1F 02 F6 | 	mov	local01, arg01
126e8                 | ' 
126e8                 | ' select case t1.result_type
126e8     08 1E 06 F1 | 	add	local01, #8
126ec     0F 21 02 FB | 	rdlong	local02, local01
126f0     08 1E 86 F1 | 	sub	local01, #8
126f4     1C 20 0E F2 | 	cmp	local02, #28 wz
126f8     24 00 90 AD |  if_e	jmp	#LR__1450
126fc     1D 20 0E F2 | 	cmp	local02, #29 wz
12700     24 00 90 AD |  if_e	jmp	#LR__1451
12704     1E 20 0E F2 | 	cmp	local02, #30 wz
12708     24 00 90 AD |  if_e	jmp	#LR__1452
1270c     1F 20 0E F2 | 	cmp	local02, #31 wz
12710     2C 00 90 AD |  if_e	jmp	#LR__1453
12714     2B 20 0E F2 | 	cmp	local02, #43 wz
12718     3C 00 90 AD |  if_e	jmp	#LR__1454
1271c     58 00 90 FD | 	jmp	#LR__1455
12720                 | LR__1450
12720     0F FB 01 FB | 	rdlong	result1, local01
12724     54 00 90 FD | 	jmp	#LR__1456
12728                 | LR__1451
12728     0F FB 01 FB | 	rdlong	result1, local01
1272c     4C 00 90 FD | 	jmp	#LR__1456
12730                 | LR__1452
12730     0F 13 02 FB | 	rdlong	arg01, local01
12734     01 14 06 F6 | 	mov	arg02, #1
12738     48 C7 B0 FD | 	call	#__system___float_tointeger
1273c     3C 00 90 FD | 	jmp	#LR__1456
12740                 | LR__1453
12740     0F 13 02 FB | 	rdlong	arg01, local01
12744     5C CA B0 FD | 	call	#__system____builtin_atof
12748     FD 12 02 F6 | 	mov	arg01, result1
1274c     00 14 06 F6 | 	mov	arg02, #0
12750     30 C7 B0 FD | 	call	#__system___float_tointeger
12754     24 00 90 FD | 	jmp	#LR__1456
12758                 | LR__1454
12758     0F 13 02 FB | 	rdlong	arg01, local01
1275c     A4 B8 BF FD | 	call	#_convertstring
12760     FD 12 02 F6 | 	mov	arg01, result1
12764     3C CA B0 FD | 	call	#__system____builtin_atof
12768     FD 12 02 F6 | 	mov	arg01, result1
1276c     00 14 06 F6 | 	mov	arg02, #0
12770     10 C7 B0 FD | 	call	#__system___float_tointeger
12774     04 00 90 FD | 	jmp	#LR__1456
12778                 | LR__1455
12778     00 FA 05 F6 | 	mov	result1, #0
1277c                 | LR__1456
1277c     A7 F0 03 F6 | 	mov	ptra, fp
12780     B2 00 A0 FD | 	call	#popregs_
12784                 | _converttoint_ret
12784     2D 00 64 FD | 	ret
12788                 | 
12788                 | ' 
12788                 | ' function converttofloat (t1 as expr_result) as single
12788                 | _converttofloat
12788     03 4A 05 F6 | 	mov	COUNT_, #3
1278c     A8 00 A0 FD | 	call	#pushregs_
12790     09 1F 02 F6 | 	mov	local01, arg01
12794                 | ' 
12794                 | ' select case t1.result_type
12794     08 1E 06 F1 | 	add	local01, #8
12798     0F 21 02 FB | 	rdlong	local02, local01
1279c     08 1E 86 F1 | 	sub	local01, #8
127a0     1C 20 0E F2 | 	cmp	local02, #28 wz
127a4     24 00 90 AD |  if_e	jmp	#LR__1460
127a8     1D 20 0E F2 | 	cmp	local02, #29 wz
127ac     38 00 90 AD |  if_e	jmp	#LR__1461
127b0     1E 20 0E F2 | 	cmp	local02, #30 wz
127b4     3C 00 90 AD |  if_e	jmp	#LR__1462
127b8     1F 20 0E F2 | 	cmp	local02, #31 wz
127bc     3C 00 90 AD |  if_e	jmp	#LR__1463
127c0     2B 20 0E F2 | 	cmp	local02, #43 wz
127c4     40 00 90 AD |  if_e	jmp	#LR__1464
127c8     50 00 90 FD | 	jmp	#LR__1465
127cc                 | LR__1460
127cc     0F 13 02 FB | 	rdlong	arg01, local01
127d0     09 13 52 F6 | 	abs	arg01, arg01 wc
127d4     1F 22 C6 C9 |  if_b	decod	local03, #31
127d8     00 22 06 36 |  if_ae	mov	local03, #0
127dc     D8 BD B0 FD | 	call	#__system___float_fromuns
127e0     11 FB 61 F5 | 	xor	result1, local03
127e4     38 00 90 FD | 	jmp	#LR__1466
127e8                 | LR__1461
127e8     0F 13 02 FB | 	rdlong	arg01, local01
127ec     C8 BD B0 FD | 	call	#__system___float_fromuns
127f0     2C 00 90 FD | 	jmp	#LR__1466
127f4                 | LR__1462
127f4     0F FB 01 FB | 	rdlong	result1, local01
127f8     24 00 90 FD | 	jmp	#LR__1466
127fc                 | LR__1463
127fc     0F 13 02 FB | 	rdlong	arg01, local01
12800     A0 C9 B0 FD | 	call	#__system____builtin_atof
12804     18 00 90 FD | 	jmp	#LR__1466
12808                 | LR__1464
12808     0F 13 02 FB | 	rdlong	arg01, local01
1280c     F4 B7 BF FD | 	call	#_convertstring
12810     FD 12 02 F6 | 	mov	arg01, result1
12814     8C C9 B0 FD | 	call	#__system____builtin_atof
12818     04 00 90 FD | 	jmp	#LR__1466
1281c                 | LR__1465
1281c     00 FA 05 F6 | 	mov	result1, #0
12820                 | LR__1466
12820     A7 F0 03 F6 | 	mov	ptra, fp
12824     B2 00 A0 FD | 	call	#popregs_
12828                 | _converttofloat_ret
12828     2D 00 64 FD | 	ret
1282c                 | 
1282c                 | ' 
1282c                 | ' sub do_rnd
1282c                 | _do_rnd
1282c     01 4A 05 F6 | 	mov	COUNT_, #1
12830     A8 00 A0 FD | 	call	#pushregs_
12834     10 F0 07 F1 | 	add	ptra, #16
12838     6A 00 00 FF 
1283c     64 E4 05 F1 | 	add	objptr, ##54372
12840     F2 1E 02 FB | 	rdlong	local01, objptr
12844     0F 17 02 F6 | 	mov	arg03, local01
12848     01 16 66 F0 | 	shl	arg03, #1
1284c     0F 17 02 F1 | 	add	arg03, local01
12850     02 16 66 F0 | 	shl	arg03, #2
12854     03 00 00 FF 
12858     04 E4 85 F1 | 	sub	objptr, ##1540
1285c     F2 16 02 F1 | 	add	arg03, objptr
12860     0B 17 02 FB | 	rdlong	arg03, arg03
12864     0C 4E 05 F1 | 	add	fp, #12
12868     A7 16 62 FC | 	wrlong	arg03, fp
1286c                 | ' 
1286c                 | ' numpar=compiledline(lineptr_e).result.uresult
1286c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1286c     0C 4E 85 F1 | 	sub	fp, #12
12870     02 16 16 F2 | 	cmp	arg03, #2 wc
12874     67 00 00 FF 
12878     60 E4 85 F1 | 	sub	objptr, ##52832
1287c     3C 00 90 CD |  if_b	jmp	#LR__1470
12880     00 12 06 F6 | 	mov	arg01, #0
12884     48 EF B0 FD | 	call	#__system___getiolock_0472
12888     FD 12 02 F6 | 	mov	arg01, result1
1288c     B0 95 B0 FD | 	call	#__system___lockmem
12890     5D 01 00 FF 
12894     3F 14 06 F6 | 	mov	arg02, ##@LR__4894
12898     00 12 06 F6 | 	mov	arg01, #0
1289c     00 16 06 F6 | 	mov	arg03, #0
128a0     A0 A2 B0 FD | 	call	#__system___basic_print_string
128a4     00 12 06 F6 | 	mov	arg01, #0
128a8     24 EF B0 FD | 	call	#__system___getiolock_0472
128ac     FD 00 68 FC | 	wrlong	#0, result1
128b0     27 12 06 F6 | 	mov	arg01, #39
128b4     A0 5E B0 FD | 	call	#_printerror
128b8     2C 01 90 FD | 	jmp	#LR__1477
128bc                 | LR__1470
128bc                 | ' if numpar=0 then
128bc     0C 4E 05 F1 | 	add	fp, #12
128c0     A7 FE 09 FB | 	rdlong	result3, fp wz
128c4     0C 4E 85 F1 | 	sub	fp, #12
128c8     20 00 90 5D |  if_ne	jmp	#LR__1471
128cc     08 4E 05 F1 | 	add	fp, #8
128d0     A7 3A 68 FC | 	wrlong	#29, fp
128d4     08 4E 85 F1 | 	sub	fp, #8
128d8     1B FA 61 FD | 	getrnd	result1
128dc     A7 FA 61 FC | 	wrlong	result1, fp
128e0     A7 12 02 F6 | 	mov	arg01, fp
128e4     38 78 BF FD | 	call	#_push
128e8     FC 00 90 FD | 	jmp	#LR__1476
128ec                 | LR__1471
128ec     98 77 BF FD | 	call	#_pop
128f0     A7 FA 61 FC | 	wrlong	result1, fp
128f4     04 4E 05 F1 | 	add	fp, #4
128f8     A7 FC 61 FC | 	wrlong	result2, fp
128fc     04 4E 05 F1 | 	add	fp, #4
12900     A7 FE 61 FC | 	wrlong	result3, fp
12904                 | '   t1=pop()
12904                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
12904     08 4E 85 F1 | 	sub	fp, #8
12908     1C FE 0D F2 | 	cmp	result3, #28 wz
1290c     08 4E 05 51 |  if_ne	add	fp, #8
12910     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12914     08 4E 85 51 |  if_ne	sub	fp, #8
12918     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1291c     2C 00 90 5D |  if_ne	jmp	#LR__1472
12920     1B FA 61 FD | 	getrnd	result1
12924     A7 1E 02 FB | 	rdlong	local01, fp
12928     0F FB 11 FD | 	qdiv	result1, local01
1292c     A7 12 02 F6 | 	mov	arg01, fp
12930     19 1E 62 FD | 	getqy	local01
12934     A7 1E 62 FC | 	wrlong	local01, fp
12938     08 4E 05 F1 | 	add	fp, #8
1293c     A7 3A 68 FC | 	wrlong	#29, fp
12940     08 4E 85 F1 | 	sub	fp, #8
12944     D8 77 BF FD | 	call	#_push
12948     9C 00 90 FD | 	jmp	#LR__1475
1294c                 | LR__1472
1294c     08 4E 05 F1 | 	add	fp, #8
12950     A7 1E 02 FB | 	rdlong	local01, fp
12954     08 4E 85 F1 | 	sub	fp, #8
12958     1E 1E 0E F2 | 	cmp	local01, #30 wz
1295c     48 00 90 5D |  if_ne	jmp	#LR__1473
12960     A7 12 02 FB | 	rdlong	arg01, fp
12964     00 C0 24 FF 
12968     00 14 06 F6 | 	mov	arg02, ##1233125376
1296c     50 C2 B0 FD | 	call	#__system___float_div
12970     FD 1E 02 F6 | 	mov	local01, result1
12974     1B 12 62 FD | 	getrnd	arg01
12978     74 13 06 F4 | 	bitl	arg01, #372
1297c     38 BC B0 FD | 	call	#__system___float_fromuns
12980     FD 14 02 F6 | 	mov	arg02, result1
12984     0F 13 02 F6 | 	mov	arg01, local01
12988     30 C0 B0 FD | 	call	#__system___float_mul
1298c     A7 FA 61 FC | 	wrlong	result1, fp
12990     08 4E 05 F1 | 	add	fp, #8
12994     A7 3C 68 FC | 	wrlong	#30, fp
12998     08 4E 85 F1 | 	sub	fp, #8
1299c     A7 12 02 F6 | 	mov	arg01, fp
129a0     7C 77 BF FD | 	call	#_push
129a4     40 00 90 FD | 	jmp	#LR__1474
129a8                 | LR__1473
129a8                 | '     print "rnd: "; : printerror(40) 
129a8     00 12 06 F6 | 	mov	arg01, #0
129ac     20 EE B0 FD | 	call	#__system___getiolock_0472
129b0     FD 12 02 F6 | 	mov	arg01, result1
129b4     88 94 B0 FD | 	call	#__system___lockmem
129b8     5D 01 00 FF 
129bc     45 14 06 F6 | 	mov	arg02, ##@LR__4895
129c0     00 12 06 F6 | 	mov	arg01, #0
129c4     00 16 06 F6 | 	mov	arg03, #0
129c8     78 A1 B0 FD | 	call	#__system___basic_print_string
129cc     00 12 06 F6 | 	mov	arg01, #0
129d0     FC ED B0 FD | 	call	#__system___getiolock_0472
129d4     FD 00 68 FC | 	wrlong	#0, result1
129d8     28 12 06 F6 | 	mov	arg01, #40
129dc     78 5D B0 FD | 	call	#_printerror
129e0     A7 12 02 F6 | 	mov	arg01, fp
129e4     38 77 BF FD | 	call	#_push
129e8                 | LR__1474
129e8                 | LR__1475
129e8                 | LR__1476
129e8                 | LR__1477
129e8     A7 F0 03 F6 | 	mov	ptra, fp
129ec     B2 00 A0 FD | 	call	#popregs_
129f0                 | _do_rnd_ret
129f0     2D 00 64 FD | 	ret
129f4                 | 
129f4                 | ' 
129f4                 | ' sub do_getenvsustain
129f4                 | _do_getenvsustain
129f4     01 4A 05 F6 | 	mov	COUNT_, #1
129f8     A8 00 A0 FD | 	call	#pushregs_
129fc     10 F0 07 F1 | 	add	ptra, #16
12a00     6A 00 00 FF 
12a04     64 E4 05 F1 | 	add	objptr, ##54372
12a08     F2 1E 02 FB | 	rdlong	local01, objptr
12a0c     0F 17 02 F6 | 	mov	arg03, local01
12a10     01 16 66 F0 | 	shl	arg03, #1
12a14     0F 17 02 F1 | 	add	arg03, local01
12a18     02 16 66 F0 | 	shl	arg03, #2
12a1c     03 00 00 FF 
12a20     04 E4 85 F1 | 	sub	objptr, ##1540
12a24     F2 16 02 F1 | 	add	arg03, objptr
12a28     0B 17 02 FB | 	rdlong	arg03, arg03
12a2c     0C 4E 05 F1 | 	add	fp, #12
12a30     A7 16 62 FC | 	wrlong	arg03, fp
12a34                 | ' 
12a34                 | ' numpar=compiledline(lineptr_e).result.uresult
12a34                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12a34     0C 4E 85 F1 | 	sub	fp, #12
12a38     02 16 16 F2 | 	cmp	arg03, #2 wc
12a3c     67 00 00 FF 
12a40     60 E4 85 F1 | 	sub	objptr, ##52832
12a44     0C 4E 05 C1 |  if_b	add	fp, #12
12a48     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12a4c     0C 4E 85 C1 |  if_b	sub	fp, #12
12a50     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1480
12a54     00 12 06 F6 | 	mov	arg01, #0
12a58     74 ED B0 FD | 	call	#__system___getiolock_0472
12a5c     FD 12 02 F6 | 	mov	arg01, result1
12a60     DC 93 B0 FD | 	call	#__system___lockmem
12a64     5D 01 00 FF 
12a68     4B 14 06 F6 | 	mov	arg02, ##@LR__4896
12a6c     00 12 06 F6 | 	mov	arg01, #0
12a70     00 16 06 F6 | 	mov	arg03, #0
12a74     CC A0 B0 FD | 	call	#__system___basic_print_string
12a78     00 12 06 F6 | 	mov	arg01, #0
12a7c     50 ED B0 FD | 	call	#__system___getiolock_0472
12a80     FD 00 68 FC | 	wrlong	#0, result1
12a84     27 12 06 F6 | 	mov	arg01, #39
12a88     CC 5C B0 FD | 	call	#_printerror
12a8c     64 00 90 FD | 	jmp	#LR__1481
12a90                 | LR__1480
12a90     F4 75 BF FD | 	call	#_pop
12a94     FD 1E 02 F6 | 	mov	local01, result1
12a98     FE 16 02 F6 | 	mov	arg03, result2
12a9c     A7 1E 62 FC | 	wrlong	local01, fp
12aa0     04 4E 05 F1 | 	add	fp, #4
12aa4     A7 16 62 FC | 	wrlong	arg03, fp
12aa8     04 4E 05 F1 | 	add	fp, #4
12aac     A7 FE 61 FC | 	wrlong	result3, fp
12ab0     08 4E 85 F1 | 	sub	fp, #8
12ab4     A7 12 02 F6 | 	mov	arg01, fp
12ab8     20 FC BF FD | 	call	#_converttoint
12abc     FD 1E 02 F6 | 	mov	local01, result1
12ac0     01 1E 66 F0 | 	shl	local01, #1
12ac4     7B 00 00 FF 
12ac8     78 E4 05 F1 | 	add	objptr, ##63096
12acc     F2 1E 02 F1 | 	add	local01, objptr
12ad0     0F 1F E2 FA | 	rdword	local01, local01
12ad4     A7 1E 62 FC | 	wrlong	local01, fp
12ad8     08 4E 05 F1 | 	add	fp, #8
12adc     A7 38 68 FC | 	wrlong	#28, fp
12ae0     08 4E 85 F1 | 	sub	fp, #8
12ae4     A7 12 02 F6 | 	mov	arg01, fp
12ae8     7B 00 00 FF 
12aec     78 E4 85 F1 | 	sub	objptr, ##63096
12af0     2C 76 BF FD | 	call	#_push
12af4                 | LR__1481
12af4     A7 F0 03 F6 | 	mov	ptra, fp
12af8     B2 00 A0 FD | 	call	#popregs_
12afc                 | _do_getenvsustain_ret
12afc     2D 00 64 FD | 	ret
12b00                 | 
12b00                 | ' 
12b00                 | ' sub do_sin
12b00                 | _do_sin
12b00     01 4A 05 F6 | 	mov	COUNT_, #1
12b04     A8 00 A0 FD | 	call	#pushregs_
12b08     10 F0 07 F1 | 	add	ptra, #16
12b0c     6A 00 00 FF 
12b10     64 E4 05 F1 | 	add	objptr, ##54372
12b14     F2 1E 02 FB | 	rdlong	local01, objptr
12b18     0F 17 02 F6 | 	mov	arg03, local01
12b1c     01 16 66 F0 | 	shl	arg03, #1
12b20     0F 17 02 F1 | 	add	arg03, local01
12b24     02 16 66 F0 | 	shl	arg03, #2
12b28     03 00 00 FF 
12b2c     04 E4 85 F1 | 	sub	objptr, ##1540
12b30     F2 16 02 F1 | 	add	arg03, objptr
12b34     0B 17 02 FB | 	rdlong	arg03, arg03
12b38     0C 4E 05 F1 | 	add	fp, #12
12b3c     A7 16 62 FC | 	wrlong	arg03, fp
12b40                 | ' 
12b40                 | ' numpar=compiledline(lineptr_e).result.uresult
12b40                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
12b40     0C 4E 85 F1 | 	sub	fp, #12
12b44     02 16 16 F2 | 	cmp	arg03, #2 wc
12b48     67 00 00 FF 
12b4c     60 E4 85 F1 | 	sub	objptr, ##52832
12b50     0C 4E 05 C1 |  if_b	add	fp, #12
12b54     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12b58     0C 4E 85 C1 |  if_b	sub	fp, #12
12b5c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1490
12b60     00 12 06 F6 | 	mov	arg01, #0
12b64     68 EC B0 FD | 	call	#__system___getiolock_0472
12b68     FD 12 02 F6 | 	mov	arg01, result1
12b6c     D0 92 B0 FD | 	call	#__system___lockmem
12b70     5D 01 00 FF 
12b74     5B 14 06 F6 | 	mov	arg02, ##@LR__4897
12b78     00 12 06 F6 | 	mov	arg01, #0
12b7c     00 16 06 F6 | 	mov	arg03, #0
12b80     C0 9F B0 FD | 	call	#__system___basic_print_string
12b84     00 12 06 F6 | 	mov	arg01, #0
12b88     44 EC B0 FD | 	call	#__system___getiolock_0472
12b8c     FD 00 68 FC | 	wrlong	#0, result1
12b90     27 12 06 F6 | 	mov	arg01, #39
12b94     C0 5B B0 FD | 	call	#_printerror
12b98     64 00 90 FD | 	jmp	#LR__1491
12b9c                 | LR__1490
12b9c     E8 74 BF FD | 	call	#_pop
12ba0     A7 FA 61 FC | 	wrlong	result1, fp
12ba4     04 4E 05 F1 | 	add	fp, #4
12ba8     A7 FC 61 FC | 	wrlong	result2, fp
12bac     04 4E 05 F1 | 	add	fp, #4
12bb0     A7 FE 61 FC | 	wrlong	result3, fp
12bb4     08 4E 85 F1 | 	sub	fp, #8
12bb8     7B 00 00 FF 
12bbc     6C E4 05 F1 | 	add	objptr, ##63084
12bc0     F2 1E 02 FB | 	rdlong	local01, objptr
12bc4     7B 00 00 FF 
12bc8     6C E4 85 F1 | 	sub	objptr, ##63084
12bcc     A7 12 02 F6 | 	mov	arg01, fp
12bd0     B4 FB BF FD | 	call	#_converttofloat
12bd4     FD 14 02 F6 | 	mov	arg02, result1
12bd8     0F 13 02 F6 | 	mov	arg01, local01
12bdc     DC BD B0 FD | 	call	#__system___float_mul
12be0     FD 12 02 F6 | 	mov	arg01, result1
12be4     10 C7 B0 FD | 	call	#__system____builtin_sinf
12be8     A7 FA 61 FC | 	wrlong	result1, fp
12bec     08 4E 05 F1 | 	add	fp, #8
12bf0     A7 3C 68 FC | 	wrlong	#30, fp
12bf4     08 4E 85 F1 | 	sub	fp, #8
12bf8     A7 12 02 F6 | 	mov	arg01, fp
12bfc     20 75 BF FD | 	call	#_push
12c00                 | LR__1491
12c00     A7 F0 03 F6 | 	mov	ptra, fp
12c04     B2 00 A0 FD | 	call	#popregs_
12c08                 | _do_sin_ret
12c08     2D 00 64 FD | 	ret
12c0c                 | 
12c0c                 | ' 
12c0c                 | ' sub do_cos
12c0c                 | _do_cos
12c0c     01 4A 05 F6 | 	mov	COUNT_, #1
12c10     A8 00 A0 FD | 	call	#pushregs_
12c14     10 F0 07 F1 | 	add	ptra, #16
12c18     6A 00 00 FF 
12c1c     64 E4 05 F1 | 	add	objptr, ##54372
12c20     F2 1E 02 FB | 	rdlong	local01, objptr
12c24     0F 17 02 F6 | 	mov	arg03, local01
12c28     01 16 66 F0 | 	shl	arg03, #1
12c2c     0F 17 02 F1 | 	add	arg03, local01
12c30     02 16 66 F0 | 	shl	arg03, #2
12c34     03 00 00 FF 
12c38     04 E4 85 F1 | 	sub	objptr, ##1540
12c3c     F2 16 02 F1 | 	add	arg03, objptr
12c40     0B 17 02 FB | 	rdlong	arg03, arg03
12c44     0C 4E 05 F1 | 	add	fp, #12
12c48     A7 16 62 FC | 	wrlong	arg03, fp
12c4c                 | ' 
12c4c                 | ' numpar=compiledline(lineptr_e).result.uresult
12c4c                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
12c4c     0C 4E 85 F1 | 	sub	fp, #12
12c50     02 16 16 F2 | 	cmp	arg03, #2 wc
12c54     67 00 00 FF 
12c58     60 E4 85 F1 | 	sub	objptr, ##52832
12c5c     0C 4E 05 C1 |  if_b	add	fp, #12
12c60     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12c64     0C 4E 85 C1 |  if_b	sub	fp, #12
12c68     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12c6c     00 12 06 F6 | 	mov	arg01, #0
12c70     5C EB B0 FD | 	call	#__system___getiolock_0472
12c74     FD 12 02 F6 | 	mov	arg01, result1
12c78     C4 91 B0 FD | 	call	#__system___lockmem
12c7c     5D 01 00 FF 
12c80     61 14 06 F6 | 	mov	arg02, ##@LR__4898
12c84     00 12 06 F6 | 	mov	arg01, #0
12c88     00 16 06 F6 | 	mov	arg03, #0
12c8c     B4 9E B0 FD | 	call	#__system___basic_print_string
12c90     00 12 06 F6 | 	mov	arg01, #0
12c94     38 EB B0 FD | 	call	#__system___getiolock_0472
12c98     FD 00 68 FC | 	wrlong	#0, result1
12c9c     27 12 06 F6 | 	mov	arg01, #39
12ca0     B4 5A B0 FD | 	call	#_printerror
12ca4     78 00 90 FD | 	jmp	#LR__1501
12ca8                 | LR__1500
12ca8     DC 73 BF FD | 	call	#_pop
12cac     A7 FA 61 FC | 	wrlong	result1, fp
12cb0     04 4E 05 F1 | 	add	fp, #4
12cb4     A7 FC 61 FC | 	wrlong	result2, fp
12cb8     04 4E 05 F1 | 	add	fp, #4
12cbc     A7 FE 61 FC | 	wrlong	result3, fp
12cc0     08 4E 85 F1 | 	sub	fp, #8
12cc4     7B 00 00 FF 
12cc8     6C E4 05 F1 | 	add	objptr, ##63084
12ccc     F2 1E 02 FB | 	rdlong	local01, objptr
12cd0     7B 00 00 FF 
12cd4     6C E4 85 F1 | 	sub	objptr, ##63084
12cd8     A7 12 02 F6 | 	mov	arg01, fp
12cdc     A8 FA BF FD | 	call	#_converttofloat
12ce0     FD 14 02 F6 | 	mov	arg02, result1
12ce4     0F 13 02 F6 | 	mov	arg01, local01
12ce8     D0 BC B0 FD | 	call	#__system___float_mul
12cec     FD 14 02 F6 | 	mov	arg02, result1
12cf0     87 E4 1F FF 
12cf4     DB 13 06 F6 | 	mov	arg01, ##1070141403
12cf8     1F 14 E6 F4 | 	bitnot	arg02, #31
12cfc     EC B8 B0 FD | 	call	#__system___float_add
12d00     FD 12 02 F6 | 	mov	arg01, result1
12d04     F0 C5 B0 FD | 	call	#__system____builtin_sinf
12d08     A7 FA 61 FC | 	wrlong	result1, fp
12d0c     08 4E 05 F1 | 	add	fp, #8
12d10     A7 3C 68 FC | 	wrlong	#30, fp
12d14     08 4E 85 F1 | 	sub	fp, #8
12d18     A7 12 02 F6 | 	mov	arg01, fp
12d1c     00 74 BF FD | 	call	#_push
12d20                 | LR__1501
12d20     A7 F0 03 F6 | 	mov	ptra, fp
12d24     B2 00 A0 FD | 	call	#popregs_
12d28                 | _do_cos_ret
12d28     2D 00 64 FD | 	ret
12d2c                 | 
12d2c                 | ' 
12d2c                 | ' sub do_tan
12d2c                 | _do_tan
12d2c     01 4A 05 F6 | 	mov	COUNT_, #1
12d30     A8 00 A0 FD | 	call	#pushregs_
12d34     10 F0 07 F1 | 	add	ptra, #16
12d38     6A 00 00 FF 
12d3c     64 E4 05 F1 | 	add	objptr, ##54372
12d40     F2 1E 02 FB | 	rdlong	local01, objptr
12d44     0F 17 02 F6 | 	mov	arg03, local01
12d48     01 16 66 F0 | 	shl	arg03, #1
12d4c     0F 17 02 F1 | 	add	arg03, local01
12d50     02 16 66 F0 | 	shl	arg03, #2
12d54     03 00 00 FF 
12d58     04 E4 85 F1 | 	sub	objptr, ##1540
12d5c     F2 16 02 F1 | 	add	arg03, objptr
12d60     0B 17 02 FB | 	rdlong	arg03, arg03
12d64     0C 4E 05 F1 | 	add	fp, #12
12d68     A7 16 62 FC | 	wrlong	arg03, fp
12d6c                 | ' 
12d6c                 | ' numpar=compiledline(lineptr_e).result.uresult
12d6c                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
12d6c     0C 4E 85 F1 | 	sub	fp, #12
12d70     02 16 16 F2 | 	cmp	arg03, #2 wc
12d74     67 00 00 FF 
12d78     60 E4 85 F1 | 	sub	objptr, ##52832
12d7c     0C 4E 05 C1 |  if_b	add	fp, #12
12d80     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12d84     0C 4E 85 C1 |  if_b	sub	fp, #12
12d88     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1510
12d8c     00 12 06 F6 | 	mov	arg01, #0
12d90     3C EA B0 FD | 	call	#__system___getiolock_0472
12d94     FD 12 02 F6 | 	mov	arg01, result1
12d98     A4 90 B0 FD | 	call	#__system___lockmem
12d9c     5D 01 00 FF 
12da0     67 14 06 F6 | 	mov	arg02, ##@LR__4899
12da4     00 12 06 F6 | 	mov	arg01, #0
12da8     00 16 06 F6 | 	mov	arg03, #0
12dac     94 9D B0 FD | 	call	#__system___basic_print_string
12db0     00 12 06 F6 | 	mov	arg01, #0
12db4     18 EA B0 FD | 	call	#__system___getiolock_0472
12db8     FD 00 68 FC | 	wrlong	#0, result1
12dbc     27 12 06 F6 | 	mov	arg01, #39
12dc0     94 59 B0 FD | 	call	#_printerror
12dc4     64 00 90 FD | 	jmp	#LR__1511
12dc8                 | LR__1510
12dc8     BC 72 BF FD | 	call	#_pop
12dcc     A7 FA 61 FC | 	wrlong	result1, fp
12dd0     04 4E 05 F1 | 	add	fp, #4
12dd4     A7 FC 61 FC | 	wrlong	result2, fp
12dd8     04 4E 05 F1 | 	add	fp, #4
12ddc     A7 FE 61 FC | 	wrlong	result3, fp
12de0     08 4E 85 F1 | 	sub	fp, #8
12de4     7B 00 00 FF 
12de8     6C E4 05 F1 | 	add	objptr, ##63084
12dec     F2 1E 02 FB | 	rdlong	local01, objptr
12df0     7B 00 00 FF 
12df4     6C E4 85 F1 | 	sub	objptr, ##63084
12df8     A7 12 02 F6 | 	mov	arg01, fp
12dfc     88 F9 BF FD | 	call	#_converttofloat
12e00     FD 14 02 F6 | 	mov	arg02, result1
12e04     0F 13 02 F6 | 	mov	arg01, local01
12e08     B0 BB B0 FD | 	call	#__system___float_mul
12e0c     FD 12 02 F6 | 	mov	arg01, result1
12e10     30 C6 B0 FD | 	call	#__system____builtin_tanf
12e14     A7 FA 61 FC | 	wrlong	result1, fp
12e18     08 4E 05 F1 | 	add	fp, #8
12e1c     A7 3C 68 FC | 	wrlong	#30, fp
12e20     08 4E 85 F1 | 	sub	fp, #8
12e24     A7 12 02 F6 | 	mov	arg01, fp
12e28     F4 72 BF FD | 	call	#_push
12e2c                 | LR__1511
12e2c     A7 F0 03 F6 | 	mov	ptra, fp
12e30     B2 00 A0 FD | 	call	#popregs_
12e34                 | _do_tan_ret
12e34     2D 00 64 FD | 	ret
12e38                 | 
12e38                 | ' 
12e38                 | ' sub do_asin
12e38                 | _do_asin
12e38     01 4A 05 F6 | 	mov	COUNT_, #1
12e3c     A8 00 A0 FD | 	call	#pushregs_
12e40     10 F0 07 F1 | 	add	ptra, #16
12e44     6A 00 00 FF 
12e48     64 E4 05 F1 | 	add	objptr, ##54372
12e4c     F2 1E 02 FB | 	rdlong	local01, objptr
12e50     0F 17 02 F6 | 	mov	arg03, local01
12e54     01 16 66 F0 | 	shl	arg03, #1
12e58     0F 17 02 F1 | 	add	arg03, local01
12e5c     02 16 66 F0 | 	shl	arg03, #2
12e60     03 00 00 FF 
12e64     04 E4 85 F1 | 	sub	objptr, ##1540
12e68     F2 16 02 F1 | 	add	arg03, objptr
12e6c     0B 17 02 FB | 	rdlong	arg03, arg03
12e70     0C 4E 05 F1 | 	add	fp, #12
12e74     A7 16 62 FC | 	wrlong	arg03, fp
12e78                 | ' 
12e78                 | ' numpar=compiledline(lineptr_e).result.uresult
12e78                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
12e78     0C 4E 85 F1 | 	sub	fp, #12
12e7c     02 16 16 F2 | 	cmp	arg03, #2 wc
12e80     67 00 00 FF 
12e84     60 E4 85 F1 | 	sub	objptr, ##52832
12e88     0C 4E 05 C1 |  if_b	add	fp, #12
12e8c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12e90     0C 4E 85 C1 |  if_b	sub	fp, #12
12e94     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1520
12e98     00 12 06 F6 | 	mov	arg01, #0
12e9c     30 E9 B0 FD | 	call	#__system___getiolock_0472
12ea0     FD 12 02 F6 | 	mov	arg01, result1
12ea4     98 8F B0 FD | 	call	#__system___lockmem
12ea8     5D 01 00 FF 
12eac     6D 14 06 F6 | 	mov	arg02, ##@LR__4900
12eb0     00 12 06 F6 | 	mov	arg01, #0
12eb4     00 16 06 F6 | 	mov	arg03, #0
12eb8     88 9C B0 FD | 	call	#__system___basic_print_string
12ebc     00 12 06 F6 | 	mov	arg01, #0
12ec0     0C E9 B0 FD | 	call	#__system___getiolock_0472
12ec4     FD 00 68 FC | 	wrlong	#0, result1
12ec8     27 12 06 F6 | 	mov	arg01, #39
12ecc     88 58 B0 FD | 	call	#_printerror
12ed0     64 00 90 FD | 	jmp	#LR__1521
12ed4                 | LR__1520
12ed4     B0 71 BF FD | 	call	#_pop
12ed8     FF 1E 02 F6 | 	mov	local01, result3
12edc     A7 FA 61 FC | 	wrlong	result1, fp
12ee0     04 4E 05 F1 | 	add	fp, #4
12ee4     A7 FC 61 FC | 	wrlong	result2, fp
12ee8     04 4E 05 F1 | 	add	fp, #4
12eec     A7 1E 62 FC | 	wrlong	local01, fp
12ef0     08 4E 85 F1 | 	sub	fp, #8
12ef4     A7 12 02 F6 | 	mov	arg01, fp
12ef8     8C F8 BF FD | 	call	#_converttofloat
12efc     FD 12 02 F6 | 	mov	arg01, result1
12f00     88 C5 B0 FD | 	call	#__system____builtin_asinf
12f04     FD 12 02 F6 | 	mov	arg01, result1
12f08     7B 00 00 FF 
12f0c     70 E4 05 F1 | 	add	objptr, ##63088
12f10     F2 14 02 FB | 	rdlong	arg02, objptr
12f14     7B 00 00 FF 
12f18     70 E4 85 F1 | 	sub	objptr, ##63088
12f1c     9C BA B0 FD | 	call	#__system___float_mul
12f20     A7 FA 61 FC | 	wrlong	result1, fp
12f24     08 4E 05 F1 | 	add	fp, #8
12f28     A7 3C 68 FC | 	wrlong	#30, fp
12f2c     08 4E 85 F1 | 	sub	fp, #8
12f30     A7 12 02 F6 | 	mov	arg01, fp
12f34     E8 71 BF FD | 	call	#_push
12f38                 | LR__1521
12f38     A7 F0 03 F6 | 	mov	ptra, fp
12f3c     B2 00 A0 FD | 	call	#popregs_
12f40                 | _do_asin_ret
12f40     2D 00 64 FD | 	ret
12f44                 | 
12f44                 | ' 
12f44                 | ' sub do_acos
12f44                 | _do_acos
12f44     01 4A 05 F6 | 	mov	COUNT_, #1
12f48     A8 00 A0 FD | 	call	#pushregs_
12f4c     10 F0 07 F1 | 	add	ptra, #16
12f50     6A 00 00 FF 
12f54     64 E4 05 F1 | 	add	objptr, ##54372
12f58     F2 1E 02 FB | 	rdlong	local01, objptr
12f5c     0F 17 02 F6 | 	mov	arg03, local01
12f60     01 16 66 F0 | 	shl	arg03, #1
12f64     0F 17 02 F1 | 	add	arg03, local01
12f68     02 16 66 F0 | 	shl	arg03, #2
12f6c     03 00 00 FF 
12f70     04 E4 85 F1 | 	sub	objptr, ##1540
12f74     F2 16 02 F1 | 	add	arg03, objptr
12f78     0B 17 02 FB | 	rdlong	arg03, arg03
12f7c     0C 4E 05 F1 | 	add	fp, #12
12f80     A7 16 62 FC | 	wrlong	arg03, fp
12f84                 | ' 
12f84                 | ' numpar=compiledline(lineptr_e).result.uresult
12f84                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
12f84     0C 4E 85 F1 | 	sub	fp, #12
12f88     02 16 16 F2 | 	cmp	arg03, #2 wc
12f8c     67 00 00 FF 
12f90     60 E4 85 F1 | 	sub	objptr, ##52832
12f94     0C 4E 05 C1 |  if_b	add	fp, #12
12f98     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
12f9c     0C 4E 85 C1 |  if_b	sub	fp, #12
12fa0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1530
12fa4     00 12 06 F6 | 	mov	arg01, #0
12fa8     24 E8 B0 FD | 	call	#__system___getiolock_0472
12fac     FD 12 02 F6 | 	mov	arg01, result1
12fb0     8C 8E B0 FD | 	call	#__system___lockmem
12fb4     5D 01 00 FF 
12fb8     74 14 06 F6 | 	mov	arg02, ##@LR__4901
12fbc     00 12 06 F6 | 	mov	arg01, #0
12fc0     00 16 06 F6 | 	mov	arg03, #0
12fc4     7C 9B B0 FD | 	call	#__system___basic_print_string
12fc8     00 12 06 F6 | 	mov	arg01, #0
12fcc     00 E8 B0 FD | 	call	#__system___getiolock_0472
12fd0     FD 00 68 FC | 	wrlong	#0, result1
12fd4     27 12 06 F6 | 	mov	arg01, #39
12fd8     7C 57 B0 FD | 	call	#_printerror
12fdc     64 00 90 FD | 	jmp	#LR__1531
12fe0                 | LR__1530
12fe0     A4 70 BF FD | 	call	#_pop
12fe4     FF 1E 02 F6 | 	mov	local01, result3
12fe8     A7 FA 61 FC | 	wrlong	result1, fp
12fec     04 4E 05 F1 | 	add	fp, #4
12ff0     A7 FC 61 FC | 	wrlong	result2, fp
12ff4     04 4E 05 F1 | 	add	fp, #4
12ff8     A7 1E 62 FC | 	wrlong	local01, fp
12ffc     08 4E 85 F1 | 	sub	fp, #8
13000     A7 12 02 F6 | 	mov	arg01, fp
13004     80 F7 BF FD | 	call	#_converttofloat
13008     FD 12 02 F6 | 	mov	arg01, result1
1300c     C8 C4 B0 FD | 	call	#__system____builtin_acosf
13010     FD 12 02 F6 | 	mov	arg01, result1
13014     7B 00 00 FF 
13018     70 E4 05 F1 | 	add	objptr, ##63088
1301c     F2 14 02 FB | 	rdlong	arg02, objptr
13020     7B 00 00 FF 
13024     70 E4 85 F1 | 	sub	objptr, ##63088
13028     90 B9 B0 FD | 	call	#__system___float_mul
1302c     A7 FA 61 FC | 	wrlong	result1, fp
13030     08 4E 05 F1 | 	add	fp, #8
13034     A7 3C 68 FC | 	wrlong	#30, fp
13038     08 4E 85 F1 | 	sub	fp, #8
1303c     A7 12 02 F6 | 	mov	arg01, fp
13040     DC 70 BF FD | 	call	#_push
13044                 | LR__1531
13044     A7 F0 03 F6 | 	mov	ptra, fp
13048     B2 00 A0 FD | 	call	#popregs_
1304c                 | _do_acos_ret
1304c     2D 00 64 FD | 	ret
13050                 | 
13050                 | ' 
13050                 | ' sub do_atn
13050                 | _do_atn
13050     01 4A 05 F6 | 	mov	COUNT_, #1
13054     A8 00 A0 FD | 	call	#pushregs_
13058     10 F0 07 F1 | 	add	ptra, #16
1305c     6A 00 00 FF 
13060     64 E4 05 F1 | 	add	objptr, ##54372
13064     F2 1E 02 FB | 	rdlong	local01, objptr
13068     0F 17 02 F6 | 	mov	arg03, local01
1306c     01 16 66 F0 | 	shl	arg03, #1
13070     0F 17 02 F1 | 	add	arg03, local01
13074     02 16 66 F0 | 	shl	arg03, #2
13078     03 00 00 FF 
1307c     04 E4 85 F1 | 	sub	objptr, ##1540
13080     F2 16 02 F1 | 	add	arg03, objptr
13084     0B 17 02 FB | 	rdlong	arg03, arg03
13088     0C 4E 05 F1 | 	add	fp, #12
1308c     A7 16 62 FC | 	wrlong	arg03, fp
13090                 | ' 
13090                 | ' numpar=compiledline(lineptr_e).result.uresult
13090                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
13090     0C 4E 85 F1 | 	sub	fp, #12
13094     02 16 16 F2 | 	cmp	arg03, #2 wc
13098     67 00 00 FF 
1309c     60 E4 85 F1 | 	sub	objptr, ##52832
130a0     0C 4E 05 C1 |  if_b	add	fp, #12
130a4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
130a8     0C 4E 85 C1 |  if_b	sub	fp, #12
130ac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
130b0     00 12 06 F6 | 	mov	arg01, #0
130b4     18 E7 B0 FD | 	call	#__system___getiolock_0472
130b8     FD 12 02 F6 | 	mov	arg01, result1
130bc     80 8D B0 FD | 	call	#__system___lockmem
130c0     5D 01 00 FF 
130c4     7B 14 06 F6 | 	mov	arg02, ##@LR__4902
130c8     00 12 06 F6 | 	mov	arg01, #0
130cc     00 16 06 F6 | 	mov	arg03, #0
130d0     70 9A B0 FD | 	call	#__system___basic_print_string
130d4     00 12 06 F6 | 	mov	arg01, #0
130d8     F4 E6 B0 FD | 	call	#__system___getiolock_0472
130dc     FD 00 68 FC | 	wrlong	#0, result1
130e0     27 12 06 F6 | 	mov	arg01, #39
130e4     70 56 B0 FD | 	call	#_printerror
130e8     6C 00 90 FD | 	jmp	#LR__1541
130ec                 | LR__1540
130ec     98 6F BF FD | 	call	#_pop
130f0     FF 1E 02 F6 | 	mov	local01, result3
130f4     A7 FA 61 FC | 	wrlong	result1, fp
130f8     04 4E 05 F1 | 	add	fp, #4
130fc     A7 FC 61 FC | 	wrlong	result2, fp
13100     04 4E 05 F1 | 	add	fp, #4
13104     A7 1E 62 FC | 	wrlong	local01, fp
13108     08 4E 85 F1 | 	sub	fp, #8
1310c     A7 12 02 F6 | 	mov	arg01, fp
13110     74 F6 BF FD | 	call	#_converttofloat
13114     FD 12 02 F6 | 	mov	arg01, result1
13118     00 C0 1F FF 
1311c     00 14 06 F6 | 	mov	arg02, ##1065353216
13120     00 C4 B0 FD | 	call	#__system____builtin_atan2f
13124     FD 12 02 F6 | 	mov	arg01, result1
13128     7B 00 00 FF 
1312c     70 E4 05 F1 | 	add	objptr, ##63088
13130     F2 14 02 FB | 	rdlong	arg02, objptr
13134     7B 00 00 FF 
13138     70 E4 85 F1 | 	sub	objptr, ##63088
1313c     7C B8 B0 FD | 	call	#__system___float_mul
13140     A7 FA 61 FC | 	wrlong	result1, fp
13144     08 4E 05 F1 | 	add	fp, #8
13148     A7 3C 68 FC | 	wrlong	#30, fp
1314c     08 4E 85 F1 | 	sub	fp, #8
13150     A7 12 02 F6 | 	mov	arg01, fp
13154     C8 6F BF FD | 	call	#_push
13158                 | LR__1541
13158     A7 F0 03 F6 | 	mov	ptra, fp
1315c     B2 00 A0 FD | 	call	#popregs_
13160                 | _do_atn_ret
13160     2D 00 64 FD | 	ret
13164                 | 
13164                 | ' 
13164                 | ' sub do_sqr
13164                 | _do_sqr
13164     01 4A 05 F6 | 	mov	COUNT_, #1
13168     A8 00 A0 FD | 	call	#pushregs_
1316c     10 F0 07 F1 | 	add	ptra, #16
13170     6A 00 00 FF 
13174     64 E4 05 F1 | 	add	objptr, ##54372
13178     F2 1E 02 FB | 	rdlong	local01, objptr
1317c     0F 17 02 F6 | 	mov	arg03, local01
13180     01 16 66 F0 | 	shl	arg03, #1
13184     0F 17 02 F1 | 	add	arg03, local01
13188     02 16 66 F0 | 	shl	arg03, #2
1318c     03 00 00 FF 
13190     04 E4 85 F1 | 	sub	objptr, ##1540
13194     F2 16 02 F1 | 	add	arg03, objptr
13198     0B 17 02 FB | 	rdlong	arg03, arg03
1319c     0C 4E 05 F1 | 	add	fp, #12
131a0     A7 16 62 FC | 	wrlong	arg03, fp
131a4                 | ' 
131a4                 | ' numpar=compiledline(lineptr_e).result.uresult
131a4                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
131a4     0C 4E 85 F1 | 	sub	fp, #12
131a8     02 16 16 F2 | 	cmp	arg03, #2 wc
131ac     67 00 00 FF 
131b0     60 E4 85 F1 | 	sub	objptr, ##52832
131b4     0C 4E 05 C1 |  if_b	add	fp, #12
131b8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
131bc     0C 4E 85 C1 |  if_b	sub	fp, #12
131c0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1550
131c4     00 12 06 F6 | 	mov	arg01, #0
131c8     04 E6 B0 FD | 	call	#__system___getiolock_0472
131cc     FD 12 02 F6 | 	mov	arg01, result1
131d0     6C 8C B0 FD | 	call	#__system___lockmem
131d4     5D 01 00 FF 
131d8     81 14 06 F6 | 	mov	arg02, ##@LR__4903
131dc     00 12 06 F6 | 	mov	arg01, #0
131e0     00 16 06 F6 | 	mov	arg03, #0
131e4     5C 99 B0 FD | 	call	#__system___basic_print_string
131e8     00 12 06 F6 | 	mov	arg01, #0
131ec     E0 E5 B0 FD | 	call	#__system___getiolock_0472
131f0     FD 00 68 FC | 	wrlong	#0, result1
131f4     27 12 06 F6 | 	mov	arg01, #39
131f8     5C 55 B0 FD | 	call	#_printerror
131fc     48 00 90 FD | 	jmp	#LR__1551
13200                 | LR__1550
13200     84 6E BF FD | 	call	#_pop
13204     FF 1E 02 F6 | 	mov	local01, result3
13208     A7 FA 61 FC | 	wrlong	result1, fp
1320c     04 4E 05 F1 | 	add	fp, #4
13210     A7 FC 61 FC | 	wrlong	result2, fp
13214     04 4E 05 F1 | 	add	fp, #4
13218     A7 1E 62 FC | 	wrlong	local01, fp
1321c     08 4E 85 F1 | 	sub	fp, #8
13220     A7 12 02 F6 | 	mov	arg01, fp
13224     60 F5 BF FD | 	call	#_converttofloat
13228     FD 12 02 F6 | 	mov	arg01, result1
1322c     B4 B6 B0 FD | 	call	#__system___float_sqrt
13230     A7 FA 61 FC | 	wrlong	result1, fp
13234     08 4E 05 F1 | 	add	fp, #8
13238     A7 3C 68 FC | 	wrlong	#30, fp
1323c     08 4E 85 F1 | 	sub	fp, #8
13240     A7 12 02 F6 | 	mov	arg01, fp
13244     D8 6E BF FD | 	call	#_push
13248                 | LR__1551
13248     A7 F0 03 F6 | 	mov	ptra, fp
1324c     B2 00 A0 FD | 	call	#popregs_
13250                 | _do_sqr_ret
13250     2D 00 64 FD | 	ret
13254                 | 
13254                 | ' 
13254                 | ' sub do_stick
13254                 | _do_stick
13254     01 4A 05 F6 | 	mov	COUNT_, #1
13258     A8 00 A0 FD | 	call	#pushregs_
1325c     10 F0 07 F1 | 	add	ptra, #16
13260     6A 00 00 FF 
13264     64 E4 05 F1 | 	add	objptr, ##54372
13268     F2 1E 02 FB | 	rdlong	local01, objptr
1326c     0F 17 02 F6 | 	mov	arg03, local01
13270     01 16 66 F0 | 	shl	arg03, #1
13274     0F 17 02 F1 | 	add	arg03, local01
13278     02 16 66 F0 | 	shl	arg03, #2
1327c     03 00 00 FF 
13280     04 E4 85 F1 | 	sub	objptr, ##1540
13284     F2 16 02 F1 | 	add	arg03, objptr
13288     0B 17 02 FB | 	rdlong	arg03, arg03
1328c     0C 4E 05 F1 | 	add	fp, #12
13290     A7 16 62 FC | 	wrlong	arg03, fp
13294                 | ' 
13294                 | ' numpar=compiledline(lineptr_e).result.uresult
13294                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
13294     0C 4E 85 F1 | 	sub	fp, #12
13298     02 16 16 F2 | 	cmp	arg03, #2 wc
1329c     67 00 00 FF 
132a0     60 E4 85 F1 | 	sub	objptr, ##52832
132a4     3C 00 90 CD |  if_b	jmp	#LR__1560
132a8     00 12 06 F6 | 	mov	arg01, #0
132ac     20 E5 B0 FD | 	call	#__system___getiolock_0472
132b0     FD 12 02 F6 | 	mov	arg01, result1
132b4     88 8B B0 FD | 	call	#__system___lockmem
132b8     5D 01 00 FF 
132bc     87 14 06 F6 | 	mov	arg02, ##@LR__4904
132c0     00 12 06 F6 | 	mov	arg01, #0
132c4     00 16 06 F6 | 	mov	arg03, #0
132c8     78 98 B0 FD | 	call	#__system___basic_print_string
132cc     00 12 06 F6 | 	mov	arg01, #0
132d0     FC E4 B0 FD | 	call	#__system___getiolock_0472
132d4     FD 00 68 FC | 	wrlong	#0, result1
132d8     27 12 06 F6 | 	mov	arg01, #39
132dc     78 54 B0 FD | 	call	#_printerror
132e0     E8 00 90 FD | 	jmp	#LR__1564
132e4                 | LR__1560
132e4                 | ' 
132e4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
132e4     0C 4E 05 F1 | 	add	fp, #12
132e8     A7 FE 09 FB | 	rdlong	result3, fp wz
132ec     0C 4E 85 F1 | 	sub	fp, #12
132f0     30 00 90 5D |  if_ne	jmp	#LR__1561
132f4     7A 00 00 FF 
132f8     E0 E5 05 F1 | 	add	objptr, ##62944
132fc     F2 1E 02 FB | 	rdlong	local01, objptr
13300     7A 00 00 FF 
13304     E0 E5 85 F1 | 	sub	objptr, ##62944
13308     A7 1E 62 FC | 	wrlong	local01, fp
1330c     08 4E 05 F1 | 	add	fp, #8
13310     A7 3A 68 FC | 	wrlong	#29, fp
13314     08 4E 85 F1 | 	sub	fp, #8
13318     A7 12 02 F6 | 	mov	arg01, fp
1331c     00 6E BF FD | 	call	#_push
13320     A8 00 90 FD | 	jmp	#LR__1564
13324                 | LR__1561
13324     60 6D BF FD | 	call	#_pop
13328     A7 FA 61 FC | 	wrlong	result1, fp
1332c     04 4E 05 F1 | 	add	fp, #4
13330     A7 FC 61 FC | 	wrlong	result2, fp
13334     04 4E 05 F1 | 	add	fp, #4
13338     A7 FE 61 FC | 	wrlong	result3, fp
1333c                 | ' 
1333c                 | ' t1=pop()
1333c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1333c     08 4E 85 F1 | 	sub	fp, #8
13340     1C FE 0D F2 | 	cmp	result3, #28 wz
13344     08 4E 05 51 |  if_ne	add	fp, #8
13348     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1334c     08 4E 85 51 |  if_ne	sub	fp, #8
13350     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13354     6C 00 90 5D |  if_ne	jmp	#LR__1563
13358     A7 1E 02 FB | 	rdlong	local01, fp
1335c     7B 00 00 FF 
13360     C8 E4 05 F1 | 	add	objptr, ##63176
13364     F2 1E 62 FC | 	wrlong	local01, objptr
13368                 | '   q=t1.result.uresult
13368                 | '   if q<7 then 
13368     7B 00 00 FF 
1336c     C8 E4 85 F1 | 	sub	objptr, ##63176
13370     07 1E 56 F2 | 	cmps	local01, #7 wc
13374     40 00 90 3D |  if_ae	jmp	#LR__1562
13378     7B 00 00 FF 
1337c     C8 E4 05 F1 | 	add	objptr, ##63176
13380     F2 1E 02 FB | 	rdlong	local01, objptr
13384     02 1E 66 F0 | 	shl	local01, #2
13388     E8 E4 85 F1 | 	sub	objptr, #232
1338c     F2 1E 02 F1 | 	add	local01, objptr
13390     0F 1F 02 FB | 	rdlong	local01, local01
13394     A7 1E 62 FC | 	wrlong	local01, fp
13398     08 4E 05 F1 | 	add	fp, #8
1339c     A7 3A 68 FC | 	wrlong	#29, fp
133a0     08 4E 85 F1 | 	sub	fp, #8
133a4     A7 12 02 F6 | 	mov	arg01, fp
133a8     7A 00 00 FF 
133ac     E0 E5 85 F1 | 	sub	objptr, ##62944
133b0     6C 6D BF FD | 	call	#_push
133b4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
133b4     14 00 90 FD | 	jmp	#LR__1564
133b8                 | LR__1562
133b8     29 12 06 F6 | 	mov	arg01, #41
133bc     98 53 B0 FD | 	call	#_printerror
133c0                 | '      printerror(41) : return
133c0     08 00 90 FD | 	jmp	#LR__1564
133c4                 | LR__1563
133c4     29 12 06 F6 | 	mov	arg01, #41
133c8     8C 53 B0 FD | 	call	#_printerror
133cc                 | LR__1564
133cc     A7 F0 03 F6 | 	mov	ptra, fp
133d0     B2 00 A0 FD | 	call	#popregs_
133d4                 | _do_stick_ret
133d4     2D 00 64 FD | 	ret
133d8                 | 
133d8                 | ' 
133d8                 | ' sub do_strig
133d8                 | _do_strig
133d8     01 4A 05 F6 | 	mov	COUNT_, #1
133dc     A8 00 A0 FD | 	call	#pushregs_
133e0     10 F0 07 F1 | 	add	ptra, #16
133e4     6A 00 00 FF 
133e8     64 E4 05 F1 | 	add	objptr, ##54372
133ec     F2 1E 02 FB | 	rdlong	local01, objptr
133f0     0F 17 02 F6 | 	mov	arg03, local01
133f4     01 16 66 F0 | 	shl	arg03, #1
133f8     0F 17 02 F1 | 	add	arg03, local01
133fc     02 16 66 F0 | 	shl	arg03, #2
13400     03 00 00 FF 
13404     04 E4 85 F1 | 	sub	objptr, ##1540
13408     F2 16 02 F1 | 	add	arg03, objptr
1340c     0B 17 02 FB | 	rdlong	arg03, arg03
13410     0C 4E 05 F1 | 	add	fp, #12
13414     A7 16 62 FC | 	wrlong	arg03, fp
13418                 | ' 
13418                 | ' numpar=compiledline(lineptr_e).result.uresult
13418                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
13418     0C 4E 85 F1 | 	sub	fp, #12
1341c     02 16 16 F2 | 	cmp	arg03, #2 wc
13420     67 00 00 FF 
13424     60 E4 85 F1 | 	sub	objptr, ##52832
13428     3C 00 90 CD |  if_b	jmp	#LR__1570
1342c     00 12 06 F6 | 	mov	arg01, #0
13430     9C E3 B0 FD | 	call	#__system___getiolock_0472
13434     FD 12 02 F6 | 	mov	arg01, result1
13438     04 8A B0 FD | 	call	#__system___lockmem
1343c     5D 01 00 FF 
13440     8F 14 06 F6 | 	mov	arg02, ##@LR__4905
13444     00 12 06 F6 | 	mov	arg01, #0
13448     00 16 06 F6 | 	mov	arg03, #0
1344c     F4 96 B0 FD | 	call	#__system___basic_print_string
13450     00 12 06 F6 | 	mov	arg01, #0
13454     78 E3 B0 FD | 	call	#__system___getiolock_0472
13458     FD 00 68 FC | 	wrlong	#0, result1
1345c     27 12 06 F6 | 	mov	arg01, #39
13460     F4 52 B0 FD | 	call	#_printerror
13464     E8 00 90 FD | 	jmp	#LR__1574
13468                 | LR__1570
13468                 | ' 
13468                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
13468     0C 4E 05 F1 | 	add	fp, #12
1346c     A7 FE 09 FB | 	rdlong	result3, fp wz
13470     0C 4E 85 F1 | 	sub	fp, #12
13474     30 00 90 5D |  if_ne	jmp	#LR__1571
13478     7A 00 00 FF 
1347c     FC E5 05 F1 | 	add	objptr, ##62972
13480     F2 1E 02 FB | 	rdlong	local01, objptr
13484     7A 00 00 FF 
13488     FC E5 85 F1 | 	sub	objptr, ##62972
1348c     A7 1E 62 FC | 	wrlong	local01, fp
13490     08 4E 05 F1 | 	add	fp, #8
13494     A7 3A 68 FC | 	wrlong	#29, fp
13498     08 4E 85 F1 | 	sub	fp, #8
1349c     A7 12 02 F6 | 	mov	arg01, fp
134a0     7C 6C BF FD | 	call	#_push
134a4     A8 00 90 FD | 	jmp	#LR__1574
134a8                 | LR__1571
134a8     DC 6B BF FD | 	call	#_pop
134ac     A7 FA 61 FC | 	wrlong	result1, fp
134b0     04 4E 05 F1 | 	add	fp, #4
134b4     A7 FC 61 FC | 	wrlong	result2, fp
134b8     04 4E 05 F1 | 	add	fp, #4
134bc     A7 FE 61 FC | 	wrlong	result3, fp
134c0                 | ' 
134c0                 | ' t1=pop()
134c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
134c0     08 4E 85 F1 | 	sub	fp, #8
134c4     1C FE 0D F2 | 	cmp	result3, #28 wz
134c8     08 4E 05 51 |  if_ne	add	fp, #8
134cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
134d0     08 4E 85 51 |  if_ne	sub	fp, #8
134d4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
134d8     6C 00 90 5D |  if_ne	jmp	#LR__1573
134dc     A7 1E 02 FB | 	rdlong	local01, fp
134e0     7B 00 00 FF 
134e4     C8 E4 05 F1 | 	add	objptr, ##63176
134e8     F2 1E 62 FC | 	wrlong	local01, objptr
134ec                 | '   q=t1.result.uresult
134ec                 | '   if q<7 then 
134ec     7B 00 00 FF 
134f0     C8 E4 85 F1 | 	sub	objptr, ##63176
134f4     07 1E 56 F2 | 	cmps	local01, #7 wc
134f8     40 00 90 3D |  if_ae	jmp	#LR__1572
134fc     7B 00 00 FF 
13500     C8 E4 05 F1 | 	add	objptr, ##63176
13504     F2 1E 02 FB | 	rdlong	local01, objptr
13508     02 1E 66 F0 | 	shl	local01, #2
1350c     CC E4 85 F1 | 	sub	objptr, #204
13510     F2 1E 02 F1 | 	add	local01, objptr
13514     0F 1F 02 FB | 	rdlong	local01, local01
13518     A7 1E 62 FC | 	wrlong	local01, fp
1351c     08 4E 05 F1 | 	add	fp, #8
13520     A7 3A 68 FC | 	wrlong	#29, fp
13524     08 4E 85 F1 | 	sub	fp, #8
13528     A7 12 02 F6 | 	mov	arg01, fp
1352c     7A 00 00 FF 
13530     FC E5 85 F1 | 	sub	objptr, ##62972
13534     E8 6B BF FD | 	call	#_push
13538                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
13538     14 00 90 FD | 	jmp	#LR__1574
1353c                 | LR__1572
1353c     29 12 06 F6 | 	mov	arg01, #41
13540     14 52 B0 FD | 	call	#_printerror
13544                 | '      printerror(41) : return
13544     08 00 90 FD | 	jmp	#LR__1574
13548                 | LR__1573
13548     29 12 06 F6 | 	mov	arg01, #41
1354c     08 52 B0 FD | 	call	#_printerror
13550                 | LR__1574
13550     A7 F0 03 F6 | 	mov	ptra, fp
13554     B2 00 A0 FD | 	call	#popregs_
13558                 | _do_strig_ret
13558     2D 00 64 FD | 	ret
1355c                 | 
1355c                 | ' 
1355c                 | ' sub do_getpixel
1355c                 | _do_getpixel
1355c     00 4A 05 F6 | 	mov	COUNT_, #0
13560     A8 00 A0 FD | 	call	#pushregs_
13564     24 F0 07 F1 | 	add	ptra, #36
13568     6A 00 00 FF 
1356c     64 E4 05 F1 | 	add	objptr, ##54372
13570     F2 16 02 FB | 	rdlong	arg03, objptr
13574     0B 15 02 F6 | 	mov	arg02, arg03
13578     01 14 66 F0 | 	shl	arg02, #1
1357c     0B 15 02 F1 | 	add	arg02, arg03
13580     02 14 66 F0 | 	shl	arg02, #2
13584     03 00 00 FF 
13588     04 E4 85 F1 | 	sub	objptr, ##1540
1358c     F2 14 02 F1 | 	add	arg02, objptr
13590     0A 17 02 FB | 	rdlong	arg03, arg02
13594     18 4E 05 F1 | 	add	fp, #24
13598     A7 16 62 FC | 	wrlong	arg03, fp
1359c                 | ' 
1359c                 | ' numpar=compiledline(lineptr_e).result.uresult
1359c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
1359c     18 4E 85 F1 | 	sub	fp, #24
135a0     02 16 0E F2 | 	cmp	arg03, #2 wz
135a4     67 00 00 FF 
135a8     60 E4 85 F1 | 	sub	objptr, ##52832
135ac     3C 00 90 AD |  if_e	jmp	#LR__1580
135b0     00 12 06 F6 | 	mov	arg01, #0
135b4     18 E2 B0 FD | 	call	#__system___getiolock_0472
135b8     FD 12 02 F6 | 	mov	arg01, result1
135bc     80 88 B0 FD | 	call	#__system___lockmem
135c0     5D 01 00 FF 
135c4     97 14 06 F6 | 	mov	arg02, ##@LR__4906
135c8     00 12 06 F6 | 	mov	arg01, #0
135cc     00 16 06 F6 | 	mov	arg03, #0
135d0     70 95 B0 FD | 	call	#__system___basic_print_string
135d4     00 12 06 F6 | 	mov	arg01, #0
135d8     F4 E1 B0 FD | 	call	#__system___getiolock_0472
135dc     FD 00 68 FC | 	wrlong	#0, result1
135e0     27 12 06 F6 | 	mov	arg01, #39
135e4     70 51 B0 FD | 	call	#_printerror
135e8     B4 00 90 FD | 	jmp	#LR__1581
135ec                 | LR__1580
135ec     98 6A BF FD | 	call	#_pop
135f0     FD 16 02 F6 | 	mov	arg03, result1
135f4     FE 14 02 F6 | 	mov	arg02, result2
135f8     FF 12 02 F6 | 	mov	arg01, result3
135fc     0C 4E 05 F1 | 	add	fp, #12
13600     A7 16 62 FC | 	wrlong	arg03, fp
13604     04 4E 05 F1 | 	add	fp, #4
13608     A7 14 62 FC | 	wrlong	arg02, fp
1360c     04 4E 05 F1 | 	add	fp, #4
13610     A7 12 62 FC | 	wrlong	arg01, fp
13614     14 4E 85 F1 | 	sub	fp, #20
13618     6C 6A BF FD | 	call	#_pop
1361c     FF 16 02 F6 | 	mov	arg03, result3
13620     A7 FA 61 FC | 	wrlong	result1, fp
13624     04 4E 05 F1 | 	add	fp, #4
13628     A7 FC 61 FC | 	wrlong	result2, fp
1362c     04 4E 05 F1 | 	add	fp, #4
13630     A7 16 62 FC | 	wrlong	arg03, fp
13634     08 4E 85 F1 | 	sub	fp, #8
13638     A7 12 02 F6 | 	mov	arg01, fp
1363c     9C F0 BF FD | 	call	#_converttoint
13640     1C 4E 05 F1 | 	add	fp, #28
13644     A7 FA 61 FC | 	wrlong	result1, fp
13648     10 4E 85 F1 | 	sub	fp, #16
1364c     A7 12 02 F6 | 	mov	arg01, fp
13650     0C 4E 85 F1 | 	sub	fp, #12
13654     84 F0 BF FD | 	call	#_converttoint
13658     FD 16 02 F6 | 	mov	arg03, result1
1365c     20 4E 05 F1 | 	add	fp, #32
13660     A7 16 62 FC | 	wrlong	arg03, fp
13664     F2 12 02 FB | 	rdlong	arg01, objptr
13668     04 4E 85 F1 | 	sub	fp, #4
1366c     A7 FE 01 FB | 	rdlong	result3, fp
13670     FF 12 02 F1 | 	add	arg01, result3
13674     1C 4E 85 F1 | 	sub	fp, #28
13678     0A 16 66 F0 | 	shl	arg03, #10
1367c     0B 13 02 F1 | 	add	arg01, arg03
13680     10 53 B0 FD | 	call	#_pspeek
13684     FD FA E1 F8 | 	getbyte	result1, result1, #0
13688     A7 FA 61 FC | 	wrlong	result1, fp
1368c     08 4E 05 F1 | 	add	fp, #8
13690     A7 3A 68 FC | 	wrlong	#29, fp
13694     08 4E 85 F1 | 	sub	fp, #8
13698     A7 12 02 F6 | 	mov	arg01, fp
1369c     80 6A BF FD | 	call	#_push
136a0                 | LR__1581
136a0     A7 F0 03 F6 | 	mov	ptra, fp
136a4     B2 00 A0 FD | 	call	#popregs_
136a8                 | _do_getpixel_ret
136a8     2D 00 64 FD | 	ret
136ac                 | 
136ac                 | ' 
136ac                 | ' 
136ac                 | ' 
136ac                 | ' sub do_defsprite
136ac                 | _do_defsprite
136ac     07 4A 05 F6 | 	mov	COUNT_, #7
136b0     A8 00 A0 FD | 	call	#pushregs_
136b4     5C F0 07 F1 | 	add	ptra, #92
136b8     CC 69 BF FD | 	call	#_pop
136bc     FD 16 02 F6 | 	mov	arg03, result1
136c0     FE 14 02 F6 | 	mov	arg02, result2
136c4     FF 12 02 F6 | 	mov	arg01, result3
136c8     30 4E 05 F1 | 	add	fp, #48
136cc     A7 16 62 FC | 	wrlong	arg03, fp
136d0     04 4E 05 F1 | 	add	fp, #4
136d4     A7 14 62 FC | 	wrlong	arg02, fp
136d8     04 4E 05 F1 | 	add	fp, #4
136dc     A7 12 62 FC | 	wrlong	arg01, fp
136e0     38 4E 85 F1 | 	sub	fp, #56
136e4     A0 69 BF FD | 	call	#_pop
136e8     FD 16 02 F6 | 	mov	arg03, result1
136ec     FE 14 02 F6 | 	mov	arg02, result2
136f0     FF 12 02 F6 | 	mov	arg01, result3
136f4     24 4E 05 F1 | 	add	fp, #36
136f8     A7 16 62 FC | 	wrlong	arg03, fp
136fc     04 4E 05 F1 | 	add	fp, #4
13700     A7 14 62 FC | 	wrlong	arg02, fp
13704     04 4E 05 F1 | 	add	fp, #4
13708     A7 12 62 FC | 	wrlong	arg01, fp
1370c     2C 4E 85 F1 | 	sub	fp, #44
13710     74 69 BF FD | 	call	#_pop
13714     FD 16 02 F6 | 	mov	arg03, result1
13718     FE 14 02 F6 | 	mov	arg02, result2
1371c     FF 12 02 F6 | 	mov	arg01, result3
13720     18 4E 05 F1 | 	add	fp, #24
13724     A7 16 62 FC | 	wrlong	arg03, fp
13728     04 4E 05 F1 | 	add	fp, #4
1372c     A7 14 62 FC | 	wrlong	arg02, fp
13730     04 4E 05 F1 | 	add	fp, #4
13734     A7 12 62 FC | 	wrlong	arg01, fp
13738     20 4E 85 F1 | 	sub	fp, #32
1373c     48 69 BF FD | 	call	#_pop
13740     FD 16 02 F6 | 	mov	arg03, result1
13744     FE 14 02 F6 | 	mov	arg02, result2
13748     FF 12 02 F6 | 	mov	arg01, result3
1374c     0C 4E 05 F1 | 	add	fp, #12
13750     A7 16 62 FC | 	wrlong	arg03, fp
13754     04 4E 05 F1 | 	add	fp, #4
13758     A7 14 62 FC | 	wrlong	arg02, fp
1375c     04 4E 05 F1 | 	add	fp, #4
13760     A7 12 62 FC | 	wrlong	arg01, fp
13764     14 4E 85 F1 | 	sub	fp, #20
13768     1C 69 BF FD | 	call	#_pop
1376c     FF 16 02 F6 | 	mov	arg03, result3
13770     A7 FA 61 FC | 	wrlong	result1, fp
13774     04 4E 05 F1 | 	add	fp, #4
13778     A7 FC 61 FC | 	wrlong	result2, fp
1377c     04 4E 05 F1 | 	add	fp, #4
13780     A7 16 62 FC | 	wrlong	arg03, fp
13784     08 4E 85 F1 | 	sub	fp, #8
13788     A7 12 02 F6 | 	mov	arg01, fp
1378c     4C EF BF FD | 	call	#_converttoint
13790     3C 4E 05 F1 | 	add	fp, #60
13794     A7 FA 61 FC | 	wrlong	result1, fp
13798     30 4E 85 F1 | 	sub	fp, #48
1379c     A7 12 02 F6 | 	mov	arg01, fp
137a0     0C 4E 85 F1 | 	sub	fp, #12
137a4     34 EF BF FD | 	call	#_converttoint
137a8     40 4E 05 F1 | 	add	fp, #64
137ac     A7 FA 61 FC | 	wrlong	result1, fp
137b0     28 4E 85 F1 | 	sub	fp, #40
137b4     A7 12 02 F6 | 	mov	arg01, fp
137b8     18 4E 85 F1 | 	sub	fp, #24
137bc     1C EF BF FD | 	call	#_converttoint
137c0     44 4E 05 F1 | 	add	fp, #68
137c4     A7 FA 61 FC | 	wrlong	result1, fp
137c8     20 4E 85 F1 | 	sub	fp, #32
137cc     A7 12 02 F6 | 	mov	arg01, fp
137d0     24 4E 85 F1 | 	sub	fp, #36
137d4     04 EF BF FD | 	call	#_converttoint
137d8     48 4E 05 F1 | 	add	fp, #72
137dc     A7 FA 61 FC | 	wrlong	result1, fp
137e0     18 4E 85 F1 | 	sub	fp, #24
137e4     A7 12 02 F6 | 	mov	arg01, fp
137e8     30 4E 85 F1 | 	sub	fp, #48
137ec     EC EE BF FD | 	call	#_converttoint
137f0     4C 4E 05 F1 | 	add	fp, #76
137f4     A7 FA 61 FC | 	wrlong	result1, fp
137f8                 | ' 
137f8                 | ' t5=pop()
137f8                 | ' t4=pop()
137f8                 | ' t3=pop()
137f8                 | ' t2=pop()
137f8                 | ' t1=pop()
137f8                 | ' 
137f8                 | ' ' do convert, defsprite is not a racing command
137f8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
137f8                 | '  
137f8                 | ' ' todo: check parameters for linits
137f8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
137f8     10 4E 85 F1 | 	sub	fp, #16
137fc     A7 16 02 FB | 	rdlong	arg03, fp
13800     3C 4E 85 F1 | 	sub	fp, #60
13804     02 16 66 F0 | 	shl	arg03, #2
13808     7B 00 00 FF 
1380c     18 E4 05 F1 | 	add	objptr, ##63000
13810     F2 16 02 F1 | 	add	arg03, objptr
13814     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13818     7B 00 00 FF 
1381c     18 E4 85 F1 | 	sub	objptr, ##63000
13820     2C 00 90 AD |  if_e	jmp	#LR__1590
13824     3C 4E 05 F1 | 	add	fp, #60
13828     A7 16 02 FB | 	rdlong	arg03, fp
1382c     3C 4E 85 F1 | 	sub	fp, #60
13830     02 16 66 F0 | 	shl	arg03, #2
13834     7B 00 00 FF 
13838     18 E4 05 F1 | 	add	objptr, ##63000
1383c     F2 16 02 F1 | 	add	arg03, objptr
13840     0B 13 02 FB | 	rdlong	arg01, arg03
13844     7B 00 00 FF 
13848     18 E4 85 F1 | 	sub	objptr, ##63000
1384c     74 C5 B0 FD | 	call	#__system___gc_free
13850                 | LR__1590
13850     3C 4E 05 F1 | 	add	fp, #60
13854     A7 1E 02 FB | 	rdlong	local01, fp
13858     0C 4E 05 F1 | 	add	fp, #12
1385c     A7 16 02 FB | 	rdlong	arg03, fp
13860     04 4E 05 F1 | 	add	fp, #4
13864     A7 14 02 FB | 	rdlong	arg02, fp
13868     0A 17 02 FD | 	qmul	arg03, arg02
1386c     02 1E 66 F0 | 	shl	local01, #2
13870     7B 00 00 FF 
13874     18 E4 05 F1 | 	add	objptr, ##63000
13878     F2 1E 02 F1 | 	add	local01, objptr
1387c     4C 4E 85 F1 | 	sub	fp, #76
13880     7B 00 00 FF 
13884     18 E4 85 F1 | 	sub	objptr, ##63000
13888     18 12 62 FD | 	getqx	arg01
1388c     F8 C3 B0 FD | 	call	#__system___gc_alloc_managed
13890     0F FB 61 FC | 	wrlong	result1, local01
13894                 | ' for y=a3 to a3+a5-1
13894     44 4E 05 F1 | 	add	fp, #68
13898     A7 20 02 FB | 	rdlong	local02, fp
1389c     0C 4E 05 F1 | 	add	fp, #12
138a0     A7 20 62 FC | 	wrlong	local02, fp
138a4     0C 4E 85 F1 | 	sub	fp, #12
138a8     A7 22 02 FB | 	rdlong	local03, fp
138ac     08 4E 05 F1 | 	add	fp, #8
138b0     A7 24 02 FB | 	rdlong	local04, fp
138b4     4C 4E 85 F1 | 	sub	fp, #76
138b8     12 23 02 F1 | 	add	local03, local04
138bc                 | LR__1591
138bc     50 4E 05 F1 | 	add	fp, #80
138c0     A7 20 02 FB | 	rdlong	local02, fp
138c4     50 4E 85 F1 | 	sub	fp, #80
138c8     11 21 52 F2 | 	cmps	local02, local03 wc
138cc     10 01 90 3D |  if_ae	jmp	#LR__1594
138d0                 | '   for x=a2 to a4+a2-1
138d0     40 4E 05 F1 | 	add	fp, #64
138d4     A7 1E 02 FB | 	rdlong	local01, fp
138d8     7B 00 00 FF 
138dc     9C E4 05 F1 | 	add	objptr, ##63132
138e0     F2 1E 62 FC | 	wrlong	local01, objptr
138e4     7B 00 00 FF 
138e8     9C E4 85 F1 | 	sub	objptr, ##63132
138ec     08 4E 05 F1 | 	add	fp, #8
138f0     A7 26 02 FB | 	rdlong	local05, fp
138f4     08 4E 85 F1 | 	sub	fp, #8
138f8     A7 28 02 FB | 	rdlong	local06, fp
138fc     40 4E 85 F1 | 	sub	fp, #64
13900     14 27 02 F1 | 	add	local05, local06
13904                 | LR__1592
13904     7B 00 00 FF 
13908     9C E4 05 F1 | 	add	objptr, ##63132
1390c     F2 1E 02 FB | 	rdlong	local01, objptr
13910     7B 00 00 FF 
13914     9C E4 85 F1 | 	sub	objptr, ##63132
13918     13 1F 52 F2 | 	cmps	local01, local05 wc
1391c     A8 00 90 3D |  if_ae	jmp	#LR__1593
13920     3C 4E 05 F1 | 	add	fp, #60
13924     A7 28 02 FB | 	rdlong	local06, fp
13928     04 4E 05 F1 | 	add	fp, #4
1392c     A7 24 02 FB | 	rdlong	local04, fp
13930     10 4E 05 F1 | 	add	fp, #16
13934     A7 20 02 FB | 	rdlong	local02, fp
13938     10 1F 02 F6 | 	mov	local01, local02
1393c     0C 4E 85 F1 | 	sub	fp, #12
13940     A7 16 02 FB | 	rdlong	arg03, fp
13944     0B 1F 82 F1 | 	sub	local01, arg03
13948     04 4E 05 F1 | 	add	fp, #4
1394c     A7 16 02 FB | 	rdlong	arg03, fp
13950     0B 1F 02 FD | 	qmul	local01, arg03
13954     02 28 66 F0 | 	shl	local06, #2
13958     7B 00 00 FF 
1395c     18 E4 05 F1 | 	add	objptr, ##63000
13960     F2 28 02 F1 | 	add	local06, objptr
13964     14 29 02 FB | 	rdlong	local06, local06
13968     84 E4 05 F1 | 	add	objptr, #132
1396c     F2 1E 02 FB | 	rdlong	local01, objptr
13970     7B 00 00 FF 
13974     9C E4 85 F1 | 	sub	objptr, ##63132
13978     0F 2B 02 F6 | 	mov	local07, local01
1397c     12 2B 82 F1 | 	sub	local07, local04
13980     F2 12 02 FB | 	rdlong	arg01, objptr
13984     0F 13 02 F1 | 	add	arg01, local01
13988     48 4E 85 F1 | 	sub	fp, #72
1398c     0A 20 66 F0 | 	shl	local02, #10
13990     10 13 02 F1 | 	add	arg01, local02
13994     18 24 62 FD | 	getqx	local04
13998     12 2B 02 F1 | 	add	local07, local04
1399c     14 2B 02 F1 | 	add	local07, local06
139a0     F0 4F B0 FD | 	call	#_pspeek
139a4     15 FB 41 FC | 	wrbyte	result1, local07
139a8     7B 00 00 FF 
139ac     9C E4 05 F1 | 	add	objptr, ##63132
139b0     F2 2A 02 FB | 	rdlong	local07, objptr
139b4     01 2A 06 F1 | 	add	local07, #1
139b8     F2 2A 62 FC | 	wrlong	local07, objptr
139bc     7B 00 00 FF 
139c0     9C E4 85 F1 | 	sub	objptr, ##63132
139c4     3C FF 9F FD | 	jmp	#LR__1592
139c8                 | LR__1593
139c8     50 4E 05 F1 | 	add	fp, #80
139cc     A7 2A 02 FB | 	rdlong	local07, fp
139d0     01 2A 06 F1 | 	add	local07, #1
139d4     A7 2A 62 FC | 	wrlong	local07, fp
139d8     50 4E 85 F1 | 	sub	fp, #80
139dc     DC FE 9F FD | 	jmp	#LR__1591
139e0                 | LR__1594
139e0     3C 4E 05 F1 | 	add	fp, #60
139e4     A7 2A 02 FB | 	rdlong	local07, fp
139e8     15 13 02 F6 | 	mov	arg01, local07
139ec     3C 4E 85 F1 | 	sub	fp, #60
139f0     02 2A 66 F0 | 	shl	local07, #2
139f4     7B 00 00 FF 
139f8     18 E4 05 F1 | 	add	objptr, ##63000
139fc     F2 2A 02 F1 | 	add	local07, objptr
13a00     15 15 02 FB | 	rdlong	arg02, local07
13a04     7B 00 00 FF 
13a08     18 E4 85 F1 | 	sub	objptr, ##63000
13a0c     A8 63 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13a10     3C 4E 05 F1 | 	add	fp, #60
13a14     A7 12 02 FB | 	rdlong	arg01, fp
13a18     0C 4E 05 F1 | 	add	fp, #12
13a1c     A7 14 02 FB | 	rdlong	arg02, fp
13a20     04 4E 05 F1 | 	add	fp, #4
13a24     A7 16 02 FB | 	rdlong	arg03, fp
13a28     4C 4E 85 F1 | 	sub	fp, #76
13a2c     FC 63 B0 FD | 	call	#_hg010b_spin2_setspritesize
13a30     A7 F0 03 F6 | 	mov	ptra, fp
13a34     B2 00 A0 FD | 	call	#popregs_
13a38                 | _do_defsprite_ret
13a38     2D 00 64 FD | 	ret
13a3c                 | 
13a3c                 | ' 
13a3c                 | ' sub do_sprite
13a3c                 | _do_sprite
13a3c     00 4A 05 F6 | 	mov	COUNT_, #0
13a40     A8 00 A0 FD | 	call	#pushregs_
13a44     30 F0 07 F1 | 	add	ptra, #48
13a48     3C 66 BF FD | 	call	#_pop
13a4c     FD 16 02 F6 | 	mov	arg03, result1
13a50     FE 14 02 F6 | 	mov	arg02, result2
13a54     FF 12 02 F6 | 	mov	arg01, result3
13a58     18 4E 05 F1 | 	add	fp, #24
13a5c     A7 16 62 FC | 	wrlong	arg03, fp
13a60     04 4E 05 F1 | 	add	fp, #4
13a64     A7 14 62 FC | 	wrlong	arg02, fp
13a68     04 4E 05 F1 | 	add	fp, #4
13a6c     A7 12 62 FC | 	wrlong	arg01, fp
13a70     20 4E 85 F1 | 	sub	fp, #32
13a74     10 66 BF FD | 	call	#_pop
13a78     FD 16 02 F6 | 	mov	arg03, result1
13a7c     FE 14 02 F6 | 	mov	arg02, result2
13a80     FF 12 02 F6 | 	mov	arg01, result3
13a84     0C 4E 05 F1 | 	add	fp, #12
13a88     A7 16 62 FC | 	wrlong	arg03, fp
13a8c     04 4E 05 F1 | 	add	fp, #4
13a90     A7 14 62 FC | 	wrlong	arg02, fp
13a94     04 4E 05 F1 | 	add	fp, #4
13a98     A7 12 62 FC | 	wrlong	arg01, fp
13a9c     14 4E 85 F1 | 	sub	fp, #20
13aa0     E4 65 BF FD | 	call	#_pop
13aa4     FF 16 02 F6 | 	mov	arg03, result3
13aa8     A7 FA 61 FC | 	wrlong	result1, fp
13aac     04 4E 05 F1 | 	add	fp, #4
13ab0     A7 FC 61 FC | 	wrlong	result2, fp
13ab4     04 4E 05 F1 | 	add	fp, #4
13ab8     A7 16 62 FC | 	wrlong	arg03, fp
13abc     08 4E 85 F1 | 	sub	fp, #8
13ac0     A7 12 02 F6 | 	mov	arg01, fp
13ac4     14 EC BF FD | 	call	#_converttoint
13ac8     24 4E 05 F1 | 	add	fp, #36
13acc     A7 FA 61 FC | 	wrlong	result1, fp
13ad0     18 4E 85 F1 | 	sub	fp, #24
13ad4     A7 12 02 F6 | 	mov	arg01, fp
13ad8     0C 4E 85 F1 | 	sub	fp, #12
13adc     FC EB BF FD | 	call	#_converttoint
13ae0     28 4E 05 F1 | 	add	fp, #40
13ae4     A7 FA 61 FC | 	wrlong	result1, fp
13ae8     10 4E 85 F1 | 	sub	fp, #16
13aec     A7 12 02 F6 | 	mov	arg01, fp
13af0     18 4E 85 F1 | 	sub	fp, #24
13af4     E4 EB BF FD | 	call	#_converttoint
13af8     2C 4E 05 F1 | 	add	fp, #44
13afc     A7 FA 61 FC | 	wrlong	result1, fp
13b00     08 4E 85 F1 | 	sub	fp, #8
13b04     A7 12 02 FB | 	rdlong	arg01, fp
13b08     04 4E 05 F1 | 	add	fp, #4
13b0c     A7 14 02 FB | 	rdlong	arg02, fp
13b10     FD 16 02 F6 | 	mov	arg03, result1
13b14     28 4E 85 F1 | 	sub	fp, #40
13b18     C4 62 B0 FD | 	call	#_hg010b_spin2_setspritepos
13b1c     A7 F0 03 F6 | 	mov	ptra, fp
13b20     B2 00 A0 FD | 	call	#popregs_
13b24                 | _do_sprite_ret
13b24     2D 00 64 FD | 	ret
13b28                 | 
13b28                 | ' 
13b28                 | ' sub do_mousex
13b28                 | _do_mousex
13b28     00 4A 05 F6 | 	mov	COUNT_, #0
13b2c     A8 00 A0 FD | 	call	#pushregs_
13b30     0C F0 07 F1 | 	add	ptra, #12
13b34     08 4E 05 F1 | 	add	fp, #8
13b38     A7 3A 68 FC | 	wrlong	#29, fp
13b3c     08 4E 85 F1 | 	sub	fp, #8
13b40     7A 00 00 FF 
13b44     D0 E5 05 F1 | 	add	objptr, ##62928
13b48     F2 12 02 FB | 	rdlong	arg01, objptr
13b4c     7A 00 00 FF 
13b50     D0 E5 85 F1 | 	sub	objptr, ##62928
13b54     A7 12 62 FC | 	wrlong	arg01, fp
13b58     A7 12 02 F6 | 	mov	arg01, fp
13b5c     C0 65 BF FD | 	call	#_push
13b60     A7 F0 03 F6 | 	mov	ptra, fp
13b64     B2 00 A0 FD | 	call	#popregs_
13b68                 | _do_mousex_ret
13b68     2D 00 64 FD | 	ret
13b6c                 | 
13b6c                 | ' 
13b6c                 | ' sub do_mousey
13b6c                 | _do_mousey
13b6c     00 4A 05 F6 | 	mov	COUNT_, #0
13b70     A8 00 A0 FD | 	call	#pushregs_
13b74     0C F0 07 F1 | 	add	ptra, #12
13b78     08 4E 05 F1 | 	add	fp, #8
13b7c     A7 3A 68 FC | 	wrlong	#29, fp
13b80     08 4E 85 F1 | 	sub	fp, #8
13b84     7A 00 00 FF 
13b88     D4 E5 05 F1 | 	add	objptr, ##62932
13b8c     F2 12 02 FB | 	rdlong	arg01, objptr
13b90     7A 00 00 FF 
13b94     D4 E5 85 F1 | 	sub	objptr, ##62932
13b98     A7 12 62 FC | 	wrlong	arg01, fp
13b9c     A7 12 02 F6 | 	mov	arg01, fp
13ba0     7C 65 BF FD | 	call	#_push
13ba4     A7 F0 03 F6 | 	mov	ptra, fp
13ba8     B2 00 A0 FD | 	call	#popregs_
13bac                 | _do_mousey_ret
13bac     2D 00 64 FD | 	ret
13bb0                 | 
13bb0                 | ' 
13bb0                 | ' sub do_mousew
13bb0                 | _do_mousew
13bb0     00 4A 05 F6 | 	mov	COUNT_, #0
13bb4     A8 00 A0 FD | 	call	#pushregs_
13bb8     0C F0 07 F1 | 	add	ptra, #12
13bbc     08 4E 05 F1 | 	add	fp, #8
13bc0     A7 38 68 FC | 	wrlong	#28, fp
13bc4     08 4E 85 F1 | 	sub	fp, #8
13bc8     7A 00 00 FF 
13bcc     DC E5 05 F1 | 	add	objptr, ##62940
13bd0     F2 12 02 FB | 	rdlong	arg01, objptr
13bd4     7A 00 00 FF 
13bd8     DC E5 85 F1 | 	sub	objptr, ##62940
13bdc     A7 12 62 FC | 	wrlong	arg01, fp
13be0     A7 12 02 F6 | 	mov	arg01, fp
13be4     38 65 BF FD | 	call	#_push
13be8     A7 F0 03 F6 | 	mov	ptra, fp
13bec     B2 00 A0 FD | 	call	#popregs_
13bf0                 | _do_mousew_ret
13bf0     2D 00 64 FD | 	ret
13bf4                 | 
13bf4                 | ' 
13bf4                 | ' sub do_mousek
13bf4                 | _do_mousek
13bf4     00 4A 05 F6 | 	mov	COUNT_, #0
13bf8     A8 00 A0 FD | 	call	#pushregs_
13bfc     0C F0 07 F1 | 	add	ptra, #12
13c00     08 4E 05 F1 | 	add	fp, #8
13c04     A7 3A 68 FC | 	wrlong	#29, fp
13c08     08 4E 85 F1 | 	sub	fp, #8
13c0c     7A 00 00 FF 
13c10     D8 E5 05 F1 | 	add	objptr, ##62936
13c14     F2 12 02 FB | 	rdlong	arg01, objptr
13c18     7A 00 00 FF 
13c1c     D8 E5 85 F1 | 	sub	objptr, ##62936
13c20     A7 12 62 FC | 	wrlong	arg01, fp
13c24     A7 12 02 F6 | 	mov	arg01, fp
13c28     F4 64 BF FD | 	call	#_push
13c2c     A7 F0 03 F6 | 	mov	ptra, fp
13c30     B2 00 A0 FD | 	call	#popregs_
13c34                 | _do_mousek_ret
13c34     2D 00 64 FD | 	ret
13c38                 | 
13c38                 | ' 
13c38                 | ' 
13c38                 | ' sub do_rdpin
13c38                 | _do_rdpin
13c38     00 4A 05 F6 | 	mov	COUNT_, #0
13c3c     A8 00 A0 FD | 	call	#pushregs_
13c40     0C F0 07 F1 | 	add	ptra, #12
13c44     40 64 BF FD | 	call	#_pop
13c48     A7 FA 61 FC | 	wrlong	result1, fp
13c4c     04 4E 05 F1 | 	add	fp, #4
13c50     A7 FC 61 FC | 	wrlong	result2, fp
13c54     04 4E 05 F1 | 	add	fp, #4
13c58     A7 FE 61 FC | 	wrlong	result3, fp
13c5c     08 4E 85 F1 | 	sub	fp, #8
13c60     A7 12 02 F6 | 	mov	arg01, fp
13c64     74 EA BF FD | 	call	#_converttoint
13c68     FD FA 89 FA | 	rdpin	result1, result1
13c6c     7B 00 00 FF 
13c70     F4 E4 05 F1 | 	add	objptr, ##63220
13c74     F2 FA 61 FC | 	wrlong	result1, objptr
13c78     7B 00 00 FF 
13c7c     F4 E4 85 F1 | 	sub	objptr, ##63220
13c80     08 4E 05 F1 | 	add	fp, #8
13c84     A7 3A 68 FC | 	wrlong	#29, fp
13c88     08 4E 85 F1 | 	sub	fp, #8
13c8c     A7 08 68 FC | 	wrlong	#4, fp
13c90     A7 12 02 F6 | 	mov	arg01, fp
13c94     88 64 BF FD | 	call	#_push
13c98     A7 F0 03 F6 | 	mov	ptra, fp
13c9c     B2 00 A0 FD | 	call	#popregs_
13ca0                 | _do_rdpin_ret
13ca0     2D 00 64 FD | 	ret
13ca4                 | 
13ca4                 | ' 
13ca4                 | ' sub do_rqpin
13ca4                 | _do_rqpin
13ca4     00 4A 05 F6 | 	mov	COUNT_, #0
13ca8     A8 00 A0 FD | 	call	#pushregs_
13cac     0C F0 07 F1 | 	add	ptra, #12
13cb0     D4 63 BF FD | 	call	#_pop
13cb4     A7 FA 61 FC | 	wrlong	result1, fp
13cb8     04 4E 05 F1 | 	add	fp, #4
13cbc     A7 FC 61 FC | 	wrlong	result2, fp
13cc0     04 4E 05 F1 | 	add	fp, #4
13cc4     A7 FE 61 FC | 	wrlong	result3, fp
13cc8     08 4E 85 F1 | 	sub	fp, #8
13ccc     A7 12 02 F6 | 	mov	arg01, fp
13cd0     08 EA BF FD | 	call	#_converttoint
13cd4     FD 12 02 F6 | 	mov	arg01, result1
13cd8     00 FA 05 F6 | 	mov	result1, #0
13cdc     09 FB 81 FA | 	rqpin	result1, arg01
13ce0     7B 00 00 FF 
13ce4     F4 E4 05 F1 | 	add	objptr, ##63220
13ce8     F2 FA 61 FC | 	wrlong	result1, objptr
13cec     7B 00 00 FF 
13cf0     F4 E4 85 F1 | 	sub	objptr, ##63220
13cf4     08 4E 05 F1 | 	add	fp, #8
13cf8     A7 3A 68 FC | 	wrlong	#29, fp
13cfc     08 4E 85 F1 | 	sub	fp, #8
13d00     A7 08 68 FC | 	wrlong	#4, fp
13d04     A7 12 02 F6 | 	mov	arg01, fp
13d08     14 64 BF FD | 	call	#_push
13d0c     A7 F0 03 F6 | 	mov	ptra, fp
13d10     B2 00 A0 FD | 	call	#popregs_
13d14                 | _do_rqpin_ret
13d14     2D 00 64 FD | 	ret
13d18                 | 
13d18                 | ' 
13d18                 | ' sub do_pinread
13d18                 | _do_pinread
13d18     00 4A 05 F6 | 	mov	COUNT_, #0
13d1c     A8 00 A0 FD | 	call	#pushregs_
13d20     0C F0 07 F1 | 	add	ptra, #12
13d24     60 63 BF FD | 	call	#_pop
13d28     A7 FA 61 FC | 	wrlong	result1, fp
13d2c     04 4E 05 F1 | 	add	fp, #4
13d30     A7 FC 61 FC | 	wrlong	result2, fp
13d34     04 4E 05 F1 | 	add	fp, #4
13d38     A7 FE 61 FC | 	wrlong	result3, fp
13d3c     08 4E 85 F1 | 	sub	fp, #8
13d40     A7 12 02 F6 | 	mov	arg01, fp
13d44     94 E9 BF FD | 	call	#_converttoint
13d48     FD 12 02 F6 | 	mov	arg01, result1
13d4c     20 12 CE F7 | 	test	arg01, #32 wz
13d50     FF FB 01 56 |  if_ne	mov	result1, inb
13d54     FE FB 01 A6 |  if_e	mov	result1, ina
13d58     09 FB 41 F0 | 	shr	result1, arg01
13d5c     06 12 46 F0 | 	shr	arg01, #6
13d60     09 FB 41 F7 | 	zerox	result1, arg01
13d64     7B 00 00 FF 
13d68     F4 E4 05 F1 | 	add	objptr, ##63220
13d6c     F2 FA 61 FC | 	wrlong	result1, objptr
13d70     7B 00 00 FF 
13d74     F4 E4 85 F1 | 	sub	objptr, ##63220
13d78     08 4E 05 F1 | 	add	fp, #8
13d7c     A7 3A 68 FC | 	wrlong	#29, fp
13d80     08 4E 85 F1 | 	sub	fp, #8
13d84     A7 08 68 FC | 	wrlong	#4, fp
13d88     A7 12 02 F6 | 	mov	arg01, fp
13d8c     90 63 BF FD | 	call	#_push
13d90     A7 F0 03 F6 | 	mov	ptra, fp
13d94     B2 00 A0 FD | 	call	#popregs_
13d98                 | _do_pinread_ret
13d98     2D 00 64 FD | 	ret
13d9c                 | 
13d9c                 | ' 
13d9c                 | ' sub do_gettime
13d9c                 | _do_gettime
13d9c     02 4A 05 F6 | 	mov	COUNT_, #2
13da0     A8 00 A0 FD | 	call	#pushregs_
13da4     14 F0 07 F1 | 	add	ptra, #20
13da8                 | ' 
13da8                 | ' const asm 
13da8     1A 1E 72 FD | 	getct	local01 wc
13dac     1A 20 62 FD | 	getct	local02
13db0                 | ' 
13db0                 | ' return hi1, lo1
13db0     10 FD 01 F6 | 	mov	result2, local02
13db4     A7 1E 62 FC | 	wrlong	local01, fp
13db8     04 4E 05 F1 | 	add	fp, #4
13dbc     A7 FC 61 FC | 	wrlong	result2, fp
13dc0     0C 4E 05 F1 | 	add	fp, #12
13dc4     A7 3A 68 FC | 	wrlong	#29, fp
13dc8     0C 4E 85 F1 | 	sub	fp, #12
13dcc     A7 12 02 FB | 	rdlong	arg01, fp
13dd0     04 4E 05 F1 | 	add	fp, #4
13dd4     A7 12 62 FC | 	wrlong	arg01, fp
13dd8     08 4E 85 F1 | 	sub	fp, #8
13ddc     A7 12 02 FB | 	rdlong	arg01, fp
13de0     0C 4E 05 F1 | 	add	fp, #12
13de4     A7 12 62 FC | 	wrlong	arg01, fp
13de8     04 4E 85 F1 | 	sub	fp, #4
13dec     A7 12 02 F6 | 	mov	arg01, fp
13df0     08 4E 85 F1 | 	sub	fp, #8
13df4     28 63 BF FD | 	call	#_push
13df8     A7 F0 03 F6 | 	mov	ptra, fp
13dfc     B2 00 A0 FD | 	call	#popregs_
13e00                 | _do_gettime_ret
13e00     2D 00 64 FD | 	ret
13e04                 | 
13e04                 | '    
13e04                 | ' 
13e04                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
13e04                 | ' 
13e04                 | ' '' ----------------------------- Clear the screen
13e04                 | ' 
13e04                 | ' sub do_cls
13e04                 | _do_cls
13e04     57 00 00 FF 
13e08     20 E4 05 F1 | 	add	objptr, ##44576
13e0c     F2 12 02 FB | 	rdlong	arg01, objptr
13e10     04 E4 85 F1 | 	sub	objptr, #4
13e14     F2 14 02 FB | 	rdlong	arg02, objptr
13e18     57 00 00 FF 
13e1c     1C E4 85 F1 | 	sub	objptr, ##44572
13e20     C0 6C B0 FD | 	call	#_hg010b_spin2_cls
13e24     57 00 00 FF 
13e28     20 E4 05 F1 | 	add	objptr, ##44576
13e2c     F2 14 02 FB | 	rdlong	arg02, objptr
13e30     14 E4 85 F1 | 	sub	objptr, #20
13e34     F2 14 62 FC | 	wrlong	arg02, objptr
13e38     57 00 00 FF 
13e3c     0C E4 85 F1 | 	sub	objptr, ##44556
13e40                 | ' cls(ink,paper): plot_color=ink: print
13e40     00 12 06 F6 | 	mov	arg01, #0
13e44     88 D9 B0 FD | 	call	#__system___getiolock_0472
13e48     FD 12 02 F6 | 	mov	arg01, result1
13e4c     F0 7F B0 FD | 	call	#__system___lockmem
13e50     00 12 06 F6 | 	mov	arg01, #0
13e54     0A 14 06 F6 | 	mov	arg02, #10
13e58     00 16 06 F6 | 	mov	arg03, #0
13e5c     8C 8C B0 FD | 	call	#__system___basic_print_char
13e60     00 12 06 F6 | 	mov	arg01, #0
13e64     68 D9 B0 FD | 	call	#__system___getiolock_0472
13e68     FD 00 68 FC | 	wrlong	#0, result1
13e6c                 | _do_cls_ret
13e6c     2D 00 64 FD | 	ret
13e70                 | 
13e70                 | ' 
13e70                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
13e70                 | ' 
13e70                 | ' sub do_color
13e70                 | _do_color
13e70     03 4A 05 F6 | 	mov	COUNT_, #3
13e74     A8 00 A0 FD | 	call	#pushregs_
13e78     0C 62 BF FD | 	call	#_pop
13e7c     FD 1E 02 F6 | 	mov	local01, result1
13e80     FE 20 02 F6 | 	mov	local02, result2
13e84     FF 22 02 F6 | 	mov	local03, result3
13e88     57 00 00 FF 
13e8c     0C E4 05 F1 | 	add	objptr, ##44556
13e90     F2 1E 62 FC | 	wrlong	local01, objptr
13e94     57 00 00 FF 
13e98     0C E4 85 F1 | 	sub	objptr, ##44556
13e9c     A7 F0 03 F6 | 	mov	ptra, fp
13ea0     B2 00 A0 FD | 	call	#popregs_
13ea4                 | _do_color_ret
13ea4     2D 00 64 FD | 	ret
13ea8                 | 
13ea8                 | ' 
13ea8                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
13ea8                 | ' 
13ea8                 | ' sub do_plot
13ea8                 | _do_plot
13ea8     00 4A 05 F6 | 	mov	COUNT_, #0
13eac     A8 00 A0 FD | 	call	#pushregs_
13eb0     20 F0 07 F1 | 	add	ptra, #32
13eb4     D0 61 BF FD | 	call	#_pop
13eb8     FD 16 02 F6 | 	mov	arg03, result1
13ebc     FE 14 02 F6 | 	mov	arg02, result2
13ec0     FF 12 02 F6 | 	mov	arg01, result3
13ec4     0C 4E 05 F1 | 	add	fp, #12
13ec8     A7 16 62 FC | 	wrlong	arg03, fp
13ecc     04 4E 05 F1 | 	add	fp, #4
13ed0     A7 14 62 FC | 	wrlong	arg02, fp
13ed4     04 4E 05 F1 | 	add	fp, #4
13ed8     A7 12 62 FC | 	wrlong	arg01, fp
13edc     14 4E 85 F1 | 	sub	fp, #20
13ee0     A4 61 BF FD | 	call	#_pop
13ee4     FF 16 02 F6 | 	mov	arg03, result3
13ee8     A7 FA 61 FC | 	wrlong	result1, fp
13eec     04 4E 05 F1 | 	add	fp, #4
13ef0     A7 FC 61 FC | 	wrlong	result2, fp
13ef4     04 4E 05 F1 | 	add	fp, #4
13ef8     A7 16 62 FC | 	wrlong	arg03, fp
13efc     08 4E 85 F1 | 	sub	fp, #8
13f00     A7 12 02 F6 | 	mov	arg01, fp
13f04     D4 E7 BF FD | 	call	#_converttoint
13f08     18 4E 05 F1 | 	add	fp, #24
13f0c     A7 FA 61 FC | 	wrlong	result1, fp
13f10     0C 4E 85 F1 | 	sub	fp, #12
13f14     A7 12 02 F6 | 	mov	arg01, fp
13f18     0C 4E 85 F1 | 	sub	fp, #12
13f1c     BC E7 BF FD | 	call	#_converttoint
13f20     1C 4E 05 F1 | 	add	fp, #28
13f24     A7 FA 61 FC | 	wrlong	result1, fp
13f28     04 4E 85 F1 | 	sub	fp, #4
13f2c     A7 16 02 FB | 	rdlong	arg03, fp
13f30     57 00 00 FF 
13f34     10 E4 05 F1 | 	add	objptr, ##44560
13f38     F2 16 62 FC | 	wrlong	arg03, objptr
13f3c     04 4E 05 F1 | 	add	fp, #4
13f40     A7 14 02 FB | 	rdlong	arg02, fp
13f44     1C 4E 85 F1 | 	sub	fp, #28
13f48     04 E4 05 F1 | 	add	objptr, #4
13f4c     F2 14 62 FC | 	wrlong	arg02, objptr
13f50     04 E4 85 F1 | 	sub	objptr, #4
13f54     F2 12 02 FB | 	rdlong	arg01, objptr
13f58     04 E4 85 F1 | 	sub	objptr, #4
13f5c     F2 16 02 FB | 	rdlong	arg03, objptr
13f60     57 00 00 FF 
13f64     0C E4 85 F1 | 	sub	objptr, ##44556
13f68     0C 5F B0 FD | 	call	#_hg010b_spin2_putpixel
13f6c     A7 F0 03 F6 | 	mov	ptra, fp
13f70     B2 00 A0 FD | 	call	#popregs_
13f74                 | _do_plot_ret
13f74     2D 00 64 FD | 	ret
13f78                 | 
13f78                 | ' 
13f78                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
13f78                 | ' 
13f78                 | ' sub do_draw
13f78                 | _do_draw
13f78     00 4A 05 F6 | 	mov	COUNT_, #0
13f7c     A8 00 A0 FD | 	call	#pushregs_
13f80     20 F0 07 F1 | 	add	ptra, #32
13f84     00 61 BF FD | 	call	#_pop
13f88     FD 1A 02 F6 | 	mov	arg05, result1
13f8c     FE 18 02 F6 | 	mov	arg04, result2
13f90     FF 16 02 F6 | 	mov	arg03, result3
13f94     0C 4E 05 F1 | 	add	fp, #12
13f98     A7 1A 62 FC | 	wrlong	arg05, fp
13f9c     04 4E 05 F1 | 	add	fp, #4
13fa0     A7 18 62 FC | 	wrlong	arg04, fp
13fa4     04 4E 05 F1 | 	add	fp, #4
13fa8     A7 16 62 FC | 	wrlong	arg03, fp
13fac     14 4E 85 F1 | 	sub	fp, #20
13fb0     D4 60 BF FD | 	call	#_pop
13fb4     FF 1A 02 F6 | 	mov	arg05, result3
13fb8     A7 FA 61 FC | 	wrlong	result1, fp
13fbc     04 4E 05 F1 | 	add	fp, #4
13fc0     A7 FC 61 FC | 	wrlong	result2, fp
13fc4     04 4E 05 F1 | 	add	fp, #4
13fc8     A7 1A 62 FC | 	wrlong	arg05, fp
13fcc     08 4E 85 F1 | 	sub	fp, #8
13fd0     A7 12 02 F6 | 	mov	arg01, fp
13fd4     04 E7 BF FD | 	call	#_converttoint
13fd8     18 4E 05 F1 | 	add	fp, #24
13fdc     A7 FA 61 FC | 	wrlong	result1, fp
13fe0     0C 4E 85 F1 | 	sub	fp, #12
13fe4     A7 12 02 F6 | 	mov	arg01, fp
13fe8     0C 4E 85 F1 | 	sub	fp, #12
13fec     EC E6 BF FD | 	call	#_converttoint
13ff0     1C 4E 05 F1 | 	add	fp, #28
13ff4     A7 FA 61 FC | 	wrlong	result1, fp
13ff8     57 00 00 FF 
13ffc     10 E4 05 F1 | 	add	objptr, ##44560
14000     F2 12 02 FB | 	rdlong	arg01, objptr
14004     04 E4 05 F1 | 	add	objptr, #4
14008     F2 14 02 FB | 	rdlong	arg02, objptr
1400c     04 4E 85 F1 | 	sub	fp, #4
14010     A7 16 02 FB | 	rdlong	arg03, fp
14014     FD 18 02 F6 | 	mov	arg04, result1
14018     18 4E 85 F1 | 	sub	fp, #24
1401c     08 E4 85 F1 | 	sub	objptr, #8
14020     F2 1A 02 FB | 	rdlong	arg05, objptr
14024     57 00 00 FF 
14028     0C E4 85 F1 | 	sub	objptr, ##44556
1402c     F8 60 B0 FD | 	call	#_hg010b_spin2_draw
14030     18 4E 05 F1 | 	add	fp, #24
14034     A7 1A 02 FB | 	rdlong	arg05, fp
14038     57 00 00 FF 
1403c     10 E4 05 F1 | 	add	objptr, ##44560
14040     F2 1A 62 FC | 	wrlong	arg05, objptr
14044     04 4E 05 F1 | 	add	fp, #4
14048     A7 1A 02 FB | 	rdlong	arg05, fp
1404c     1C 4E 85 F1 | 	sub	fp, #28
14050     04 E4 05 F1 | 	add	objptr, #4
14054     F2 1A 62 FC | 	wrlong	arg05, objptr
14058     57 00 00 FF 
1405c     14 E4 85 F1 | 	sub	objptr, ##44564
14060     A7 F0 03 F6 | 	mov	ptra, fp
14064     B2 00 A0 FD | 	call	#popregs_
14068                 | _do_draw_ret
14068     2D 00 64 FD | 	ret
1406c                 | 
1406c                 | ' 
1406c                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
1406c                 | ' 
1406c                 | ' sub do_fcircle
1406c                 | _do_fcircle
1406c     02 4A 05 F6 | 	mov	COUNT_, #2
14070     A8 00 A0 FD | 	call	#pushregs_
14074     24 F0 07 F1 | 	add	ptra, #36
14078     0C 60 BF FD | 	call	#_pop
1407c     FD 18 02 F6 | 	mov	arg04, result1
14080     FE 16 02 F6 | 	mov	arg03, result2
14084     FF 14 02 F6 | 	mov	arg02, result3
14088     18 4E 05 F1 | 	add	fp, #24
1408c     A7 18 62 FC | 	wrlong	arg04, fp
14090     04 4E 05 F1 | 	add	fp, #4
14094     A7 16 62 FC | 	wrlong	arg03, fp
14098     04 4E 05 F1 | 	add	fp, #4
1409c     A7 14 62 FC | 	wrlong	arg02, fp
140a0     20 4E 85 F1 | 	sub	fp, #32
140a4     E0 5F BF FD | 	call	#_pop
140a8     FD 18 02 F6 | 	mov	arg04, result1
140ac     FE 16 02 F6 | 	mov	arg03, result2
140b0     FF 1E 02 F6 | 	mov	local01, result3
140b4     0C 4E 05 F1 | 	add	fp, #12
140b8     A7 18 62 FC | 	wrlong	arg04, fp
140bc     04 4E 05 F1 | 	add	fp, #4
140c0     A7 16 62 FC | 	wrlong	arg03, fp
140c4     04 4E 05 F1 | 	add	fp, #4
140c8     A7 1E 62 FC | 	wrlong	local01, fp
140cc     14 4E 85 F1 | 	sub	fp, #20
140d0     B4 5F BF FD | 	call	#_pop
140d4     A7 FA 61 FC | 	wrlong	result1, fp
140d8     04 4E 05 F1 | 	add	fp, #4
140dc     A7 FC 61 FC | 	wrlong	result2, fp
140e0     04 4E 05 F1 | 	add	fp, #4
140e4     A7 FE 61 FC | 	wrlong	result3, fp
140e8                 | ' 
140e8                 | ' t3=pop()
140e8                 | ' t2=pop()
140e8                 | ' t1=pop()
140e8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
140e8     FF 18 02 F6 | 	mov	arg04, result3
140ec     08 4E 85 F1 | 	sub	fp, #8
140f0     1C 18 0E F2 | 	cmp	arg04, #28 wz
140f4     08 4E 05 51 |  if_ne	add	fp, #8
140f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
140fc     08 4E 85 51 |  if_ne	sub	fp, #8
14100     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14104     7C 00 90 5D |  if_ne	jmp	#LR__1600
14108     14 4E 05 F1 | 	add	fp, #20
1410c     A7 1E 02 FB | 	rdlong	local01, fp
14110     14 4E 85 F1 | 	sub	fp, #20
14114     1C 1E 0E F2 | 	cmp	local01, #28 wz
14118     14 4E 05 51 |  if_ne	add	fp, #20
1411c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14120     14 4E 85 51 |  if_ne	sub	fp, #20
14124     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14128     58 00 90 5D |  if_ne	jmp	#LR__1600
1412c     20 4E 05 F1 | 	add	fp, #32
14130     A7 1E 02 FB | 	rdlong	local01, fp
14134     20 4E 85 F1 | 	sub	fp, #32
14138     1C 1E 0E F2 | 	cmp	local01, #28 wz
1413c     20 4E 05 51 |  if_ne	add	fp, #32
14140     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14144     20 4E 85 51 |  if_ne	sub	fp, #32
14148     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1414c     34 00 90 5D |  if_ne	jmp	#LR__1600
14150     A7 12 02 FB | 	rdlong	arg01, fp
14154     0C 4E 05 F1 | 	add	fp, #12
14158     A7 14 02 FB | 	rdlong	arg02, fp
1415c     0C 4E 05 F1 | 	add	fp, #12
14160     A7 16 02 FB | 	rdlong	arg03, fp
14164     18 4E 85 F1 | 	sub	fp, #24
14168     57 00 00 FF 
1416c     0C E4 05 F1 | 	add	objptr, ##44556
14170     F2 18 02 FB | 	rdlong	arg04, objptr
14174     57 00 00 FF 
14178     0C E4 85 F1 | 	sub	objptr, ##44556
1417c     2C 64 B0 FD | 	call	#_hg010b_spin2_fcircle
14180                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
14180     54 00 90 FD | 	jmp	#LR__1601
14184                 | LR__1600
14184     A7 12 02 F6 | 	mov	arg01, fp
14188     50 E5 BF FD | 	call	#_converttoint
1418c     FD 1E 02 F6 | 	mov	local01, result1
14190     0C 4E 05 F1 | 	add	fp, #12
14194     A7 12 02 F6 | 	mov	arg01, fp
14198     0C 4E 85 F1 | 	sub	fp, #12
1419c     3C E5 BF FD | 	call	#_converttoint
141a0     FD 20 02 F6 | 	mov	local02, result1
141a4     18 4E 05 F1 | 	add	fp, #24
141a8     A7 12 02 F6 | 	mov	arg01, fp
141ac     18 4E 85 F1 | 	sub	fp, #24
141b0     28 E5 BF FD | 	call	#_converttoint
141b4     FD 16 02 F6 | 	mov	arg03, result1
141b8     57 00 00 FF 
141bc     0C E4 05 F1 | 	add	objptr, ##44556
141c0     F2 18 02 FB | 	rdlong	arg04, objptr
141c4     57 00 00 FF 
141c8     0C E4 85 F1 | 	sub	objptr, ##44556
141cc     0F 13 02 F6 | 	mov	arg01, local01
141d0     10 15 02 F6 | 	mov	arg02, local02
141d4     D4 63 B0 FD | 	call	#_hg010b_spin2_fcircle
141d8                 | LR__1601
141d8     A7 F0 03 F6 | 	mov	ptra, fp
141dc     B2 00 A0 FD | 	call	#popregs_
141e0                 | _do_fcircle_ret
141e0     2D 00 64 FD | 	ret
141e4                 | 
141e4                 | ' 
141e4                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
141e4                 | ' 
141e4                 | ' sub do_circle
141e4                 | _do_circle
141e4     02 4A 05 F6 | 	mov	COUNT_, #2
141e8     A8 00 A0 FD | 	call	#pushregs_
141ec     24 F0 07 F1 | 	add	ptra, #36
141f0     94 5E BF FD | 	call	#_pop
141f4     FD 18 02 F6 | 	mov	arg04, result1
141f8     FE 16 02 F6 | 	mov	arg03, result2
141fc     FF 14 02 F6 | 	mov	arg02, result3
14200     18 4E 05 F1 | 	add	fp, #24
14204     A7 18 62 FC | 	wrlong	arg04, fp
14208     04 4E 05 F1 | 	add	fp, #4
1420c     A7 16 62 FC | 	wrlong	arg03, fp
14210     04 4E 05 F1 | 	add	fp, #4
14214     A7 14 62 FC | 	wrlong	arg02, fp
14218     20 4E 85 F1 | 	sub	fp, #32
1421c     68 5E BF FD | 	call	#_pop
14220     FD 18 02 F6 | 	mov	arg04, result1
14224     FE 16 02 F6 | 	mov	arg03, result2
14228     FF 1E 02 F6 | 	mov	local01, result3
1422c     0C 4E 05 F1 | 	add	fp, #12
14230     A7 18 62 FC | 	wrlong	arg04, fp
14234     04 4E 05 F1 | 	add	fp, #4
14238     A7 16 62 FC | 	wrlong	arg03, fp
1423c     04 4E 05 F1 | 	add	fp, #4
14240     A7 1E 62 FC | 	wrlong	local01, fp
14244     14 4E 85 F1 | 	sub	fp, #20
14248     3C 5E BF FD | 	call	#_pop
1424c     A7 FA 61 FC | 	wrlong	result1, fp
14250     04 4E 05 F1 | 	add	fp, #4
14254     A7 FC 61 FC | 	wrlong	result2, fp
14258     04 4E 05 F1 | 	add	fp, #4
1425c     A7 FE 61 FC | 	wrlong	result3, fp
14260                 | ' 
14260                 | ' t3=pop()
14260                 | ' t2=pop()
14260                 | ' t1=pop()
14260                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
14260     FF 18 02 F6 | 	mov	arg04, result3
14264     08 4E 85 F1 | 	sub	fp, #8
14268     1C 18 0E F2 | 	cmp	arg04, #28 wz
1426c     08 4E 05 51 |  if_ne	add	fp, #8
14270     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14274     08 4E 85 51 |  if_ne	sub	fp, #8
14278     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1427c     7C 00 90 5D |  if_ne	jmp	#LR__1610
14280     14 4E 05 F1 | 	add	fp, #20
14284     A7 1E 02 FB | 	rdlong	local01, fp
14288     14 4E 85 F1 | 	sub	fp, #20
1428c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14290     14 4E 05 51 |  if_ne	add	fp, #20
14294     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14298     14 4E 85 51 |  if_ne	sub	fp, #20
1429c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
142a0     58 00 90 5D |  if_ne	jmp	#LR__1610
142a4     20 4E 05 F1 | 	add	fp, #32
142a8     A7 1E 02 FB | 	rdlong	local01, fp
142ac     20 4E 85 F1 | 	sub	fp, #32
142b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
142b4     20 4E 05 51 |  if_ne	add	fp, #32
142b8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
142bc     20 4E 85 51 |  if_ne	sub	fp, #32
142c0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
142c4     34 00 90 5D |  if_ne	jmp	#LR__1610
142c8     A7 12 02 FB | 	rdlong	arg01, fp
142cc     0C 4E 05 F1 | 	add	fp, #12
142d0     A7 14 02 FB | 	rdlong	arg02, fp
142d4     0C 4E 05 F1 | 	add	fp, #12
142d8     A7 16 02 FB | 	rdlong	arg03, fp
142dc     18 4E 85 F1 | 	sub	fp, #24
142e0     57 00 00 FF 
142e4     0C E4 05 F1 | 	add	objptr, ##44556
142e8     F2 18 02 FB | 	rdlong	arg04, objptr
142ec     57 00 00 FF 
142f0     0C E4 85 F1 | 	sub	objptr, ##44556
142f4     C0 63 B0 FD | 	call	#_hg010b_spin2_circle
142f8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
142f8     54 00 90 FD | 	jmp	#LR__1611
142fc                 | LR__1610
142fc     A7 12 02 F6 | 	mov	arg01, fp
14300     D8 E3 BF FD | 	call	#_converttoint
14304     FD 1E 02 F6 | 	mov	local01, result1
14308     0C 4E 05 F1 | 	add	fp, #12
1430c     A7 12 02 F6 | 	mov	arg01, fp
14310     0C 4E 85 F1 | 	sub	fp, #12
14314     C4 E3 BF FD | 	call	#_converttoint
14318     FD 20 02 F6 | 	mov	local02, result1
1431c     18 4E 05 F1 | 	add	fp, #24
14320     A7 12 02 F6 | 	mov	arg01, fp
14324     18 4E 85 F1 | 	sub	fp, #24
14328     B0 E3 BF FD | 	call	#_converttoint
1432c     FD 16 02 F6 | 	mov	arg03, result1
14330     57 00 00 FF 
14334     0C E4 05 F1 | 	add	objptr, ##44556
14338     F2 18 02 FB | 	rdlong	arg04, objptr
1433c     57 00 00 FF 
14340     0C E4 85 F1 | 	sub	objptr, ##44556
14344     0F 13 02 F6 | 	mov	arg01, local01
14348     10 15 02 F6 | 	mov	arg02, local02
1434c     68 63 B0 FD | 	call	#_hg010b_spin2_circle
14350                 | LR__1611
14350     A7 F0 03 F6 | 	mov	ptra, fp
14354     B2 00 A0 FD | 	call	#popregs_
14358                 | _do_circle_ret
14358     2D 00 64 FD | 	ret
1435c                 | 
1435c                 | ' 
1435c                 | ' ' -------------------------- Draw a rectangle
1435c                 | ' 
1435c                 | ' sub do_box
1435c                 | _do_box
1435c     03 4A 05 F6 | 	mov	COUNT_, #3
14360     A8 00 A0 FD | 	call	#pushregs_
14364     30 F0 07 F1 | 	add	ptra, #48
14368     1C 5D BF FD | 	call	#_pop
1436c     FD 1A 02 F6 | 	mov	arg05, result1
14370     FE 18 02 F6 | 	mov	arg04, result2
14374     FF 16 02 F6 | 	mov	arg03, result3
14378     24 4E 05 F1 | 	add	fp, #36
1437c     A7 1A 62 FC | 	wrlong	arg05, fp
14380     04 4E 05 F1 | 	add	fp, #4
14384     A7 18 62 FC | 	wrlong	arg04, fp
14388     04 4E 05 F1 | 	add	fp, #4
1438c     A7 16 62 FC | 	wrlong	arg03, fp
14390     2C 4E 85 F1 | 	sub	fp, #44
14394     F0 5C BF FD | 	call	#_pop
14398     FD 1A 02 F6 | 	mov	arg05, result1
1439c     FE 18 02 F6 | 	mov	arg04, result2
143a0     FF 16 02 F6 | 	mov	arg03, result3
143a4     18 4E 05 F1 | 	add	fp, #24
143a8     A7 1A 62 FC | 	wrlong	arg05, fp
143ac     04 4E 05 F1 | 	add	fp, #4
143b0     A7 18 62 FC | 	wrlong	arg04, fp
143b4     04 4E 05 F1 | 	add	fp, #4
143b8     A7 16 62 FC | 	wrlong	arg03, fp
143bc     20 4E 85 F1 | 	sub	fp, #32
143c0     C4 5C BF FD | 	call	#_pop
143c4     FD 1A 02 F6 | 	mov	arg05, result1
143c8     FE 18 02 F6 | 	mov	arg04, result2
143cc     FF 1E 02 F6 | 	mov	local01, result3
143d0     0C 4E 05 F1 | 	add	fp, #12
143d4     A7 1A 62 FC | 	wrlong	arg05, fp
143d8     04 4E 05 F1 | 	add	fp, #4
143dc     A7 18 62 FC | 	wrlong	arg04, fp
143e0     04 4E 05 F1 | 	add	fp, #4
143e4     A7 1E 62 FC | 	wrlong	local01, fp
143e8     14 4E 85 F1 | 	sub	fp, #20
143ec     98 5C BF FD | 	call	#_pop
143f0     A7 FA 61 FC | 	wrlong	result1, fp
143f4     04 4E 05 F1 | 	add	fp, #4
143f8     A7 FC 61 FC | 	wrlong	result2, fp
143fc     04 4E 05 F1 | 	add	fp, #4
14400     A7 FE 61 FC | 	wrlong	result3, fp
14404                 | ' 
14404                 | ' t4=pop()
14404                 | ' t3=pop()
14404                 | ' t2=pop()
14404                 | ' t1=pop()
14404                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
14404     FF 1A 02 F6 | 	mov	arg05, result3
14408     08 4E 85 F1 | 	sub	fp, #8
1440c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
14410     08 4E 05 51 |  if_ne	add	fp, #8
14414     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14418     08 4E 85 51 |  if_ne	sub	fp, #8
1441c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14420     A8 00 90 5D |  if_ne	jmp	#LR__1620
14424     14 4E 05 F1 | 	add	fp, #20
14428     A7 1E 02 FB | 	rdlong	local01, fp
1442c     14 4E 85 F1 | 	sub	fp, #20
14430     1C 1E 0E F2 | 	cmp	local01, #28 wz
14434     14 4E 05 51 |  if_ne	add	fp, #20
14438     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1443c     14 4E 85 51 |  if_ne	sub	fp, #20
14440     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14444     84 00 90 5D |  if_ne	jmp	#LR__1620
14448     20 4E 05 F1 | 	add	fp, #32
1444c     A7 1E 02 FB | 	rdlong	local01, fp
14450     20 4E 85 F1 | 	sub	fp, #32
14454     1C 1E 0E F2 | 	cmp	local01, #28 wz
14458     20 4E 05 51 |  if_ne	add	fp, #32
1445c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14460     20 4E 85 51 |  if_ne	sub	fp, #32
14464     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14468     60 00 90 5D |  if_ne	jmp	#LR__1620
1446c     2C 4E 05 F1 | 	add	fp, #44
14470     A7 1E 02 FB | 	rdlong	local01, fp
14474     2C 4E 85 F1 | 	sub	fp, #44
14478     1C 1E 0E F2 | 	cmp	local01, #28 wz
1447c     2C 4E 05 51 |  if_ne	add	fp, #44
14480     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14484     2C 4E 85 51 |  if_ne	sub	fp, #44
14488     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1448c     3C 00 90 5D |  if_ne	jmp	#LR__1620
14490     A7 12 02 FB | 	rdlong	arg01, fp
14494     0C 4E 05 F1 | 	add	fp, #12
14498     A7 14 02 FB | 	rdlong	arg02, fp
1449c     0C 4E 05 F1 | 	add	fp, #12
144a0     A7 16 02 FB | 	rdlong	arg03, fp
144a4     0C 4E 05 F1 | 	add	fp, #12
144a8     A7 18 02 FB | 	rdlong	arg04, fp
144ac     24 4E 85 F1 | 	sub	fp, #36
144b0     57 00 00 FF 
144b4     0C E4 05 F1 | 	add	objptr, ##44556
144b8     F2 1A 02 FB | 	rdlong	arg05, objptr
144bc     57 00 00 FF 
144c0     0C E4 85 F1 | 	sub	objptr, ##44556
144c4     BC 63 B0 FD | 	call	#_hg010b_spin2_box
144c8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
144c8     6C 00 90 FD | 	jmp	#LR__1621
144cc                 | LR__1620
144cc     A7 12 02 F6 | 	mov	arg01, fp
144d0     08 E2 BF FD | 	call	#_converttoint
144d4     FD 20 02 F6 | 	mov	local02, result1
144d8     0C 4E 05 F1 | 	add	fp, #12
144dc     A7 12 02 F6 | 	mov	arg01, fp
144e0     0C 4E 85 F1 | 	sub	fp, #12
144e4     F4 E1 BF FD | 	call	#_converttoint
144e8     FD 22 02 F6 | 	mov	local03, result1
144ec     18 4E 05 F1 | 	add	fp, #24
144f0     A7 12 02 F6 | 	mov	arg01, fp
144f4     18 4E 85 F1 | 	sub	fp, #24
144f8     E0 E1 BF FD | 	call	#_converttoint
144fc     FD 1E 02 F6 | 	mov	local01, result1
14500     24 4E 05 F1 | 	add	fp, #36
14504     A7 12 02 F6 | 	mov	arg01, fp
14508     24 4E 85 F1 | 	sub	fp, #36
1450c     CC E1 BF FD | 	call	#_converttoint
14510     FD 18 02 F6 | 	mov	arg04, result1
14514     57 00 00 FF 
14518     0C E4 05 F1 | 	add	objptr, ##44556
1451c     F2 1A 02 FB | 	rdlong	arg05, objptr
14520     57 00 00 FF 
14524     0C E4 85 F1 | 	sub	objptr, ##44556
14528     10 13 02 F6 | 	mov	arg01, local02
1452c     11 15 02 F6 | 	mov	arg02, local03
14530     0F 17 02 F6 | 	mov	arg03, local01
14534     4C 63 B0 FD | 	call	#_hg010b_spin2_box
14538                 | LR__1621
14538     A7 F0 03 F6 | 	mov	ptra, fp
1453c     B2 00 A0 FD | 	call	#popregs_
14540                 | _do_box_ret
14540     2D 00 64 FD | 	ret
14544                 | 
14544                 | ' 
14544                 | ' sub do_fill
14544                 | _do_fill
14544     03 4A 05 F6 | 	mov	COUNT_, #3
14548     A8 00 A0 FD | 	call	#pushregs_
1454c     30 F0 07 F1 | 	add	ptra, #48
14550     34 5B BF FD | 	call	#_pop
14554     FD 18 02 F6 | 	mov	arg04, result1
14558     FE 16 02 F6 | 	mov	arg03, result2
1455c     FF 14 02 F6 | 	mov	arg02, result3
14560     24 4E 05 F1 | 	add	fp, #36
14564     A7 18 62 FC | 	wrlong	arg04, fp
14568     04 4E 05 F1 | 	add	fp, #4
1456c     A7 16 62 FC | 	wrlong	arg03, fp
14570     04 4E 05 F1 | 	add	fp, #4
14574     A7 14 62 FC | 	wrlong	arg02, fp
14578     2C 4E 85 F1 | 	sub	fp, #44
1457c     08 5B BF FD | 	call	#_pop
14580     FD 18 02 F6 | 	mov	arg04, result1
14584     FE 16 02 F6 | 	mov	arg03, result2
14588     FF 14 02 F6 | 	mov	arg02, result3
1458c     18 4E 05 F1 | 	add	fp, #24
14590     A7 18 62 FC | 	wrlong	arg04, fp
14594     04 4E 05 F1 | 	add	fp, #4
14598     A7 16 62 FC | 	wrlong	arg03, fp
1459c     04 4E 05 F1 | 	add	fp, #4
145a0     A7 14 62 FC | 	wrlong	arg02, fp
145a4     20 4E 85 F1 | 	sub	fp, #32
145a8     DC 5A BF FD | 	call	#_pop
145ac     FD 18 02 F6 | 	mov	arg04, result1
145b0     FE 16 02 F6 | 	mov	arg03, result2
145b4     FF 1E 02 F6 | 	mov	local01, result3
145b8     0C 4E 05 F1 | 	add	fp, #12
145bc     A7 18 62 FC | 	wrlong	arg04, fp
145c0     04 4E 05 F1 | 	add	fp, #4
145c4     A7 16 62 FC | 	wrlong	arg03, fp
145c8     04 4E 05 F1 | 	add	fp, #4
145cc     A7 1E 62 FC | 	wrlong	local01, fp
145d0     14 4E 85 F1 | 	sub	fp, #20
145d4     B0 5A BF FD | 	call	#_pop
145d8     A7 FA 61 FC | 	wrlong	result1, fp
145dc     04 4E 05 F1 | 	add	fp, #4
145e0     A7 FC 61 FC | 	wrlong	result2, fp
145e4     04 4E 05 F1 | 	add	fp, #4
145e8     A7 FE 61 FC | 	wrlong	result3, fp
145ec                 | ' 
145ec                 | ' t4=pop()
145ec                 | ' t3=pop()
145ec                 | ' t2=pop()
145ec                 | ' t1=pop()
145ec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
145ec     FF 18 02 F6 | 	mov	arg04, result3
145f0     08 4E 85 F1 | 	sub	fp, #8
145f4     1C 18 0E F2 | 	cmp	arg04, #28 wz
145f8     08 4E 05 51 |  if_ne	add	fp, #8
145fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14600     08 4E 85 51 |  if_ne	sub	fp, #8
14604     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14608     94 00 90 5D |  if_ne	jmp	#LR__1630
1460c     14 4E 05 F1 | 	add	fp, #20
14610     A7 1E 02 FB | 	rdlong	local01, fp
14614     14 4E 85 F1 | 	sub	fp, #20
14618     1C 1E 0E F2 | 	cmp	local01, #28 wz
1461c     14 4E 05 51 |  if_ne	add	fp, #20
14620     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14624     14 4E 85 51 |  if_ne	sub	fp, #20
14628     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1462c     70 00 90 5D |  if_ne	jmp	#LR__1630
14630     20 4E 05 F1 | 	add	fp, #32
14634     A7 1E 02 FB | 	rdlong	local01, fp
14638     20 4E 85 F1 | 	sub	fp, #32
1463c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14640     20 4E 05 51 |  if_ne	add	fp, #32
14644     A7 18 02 5B |  if_ne	rdlong	arg04, fp
14648     20 4E 85 51 |  if_ne	sub	fp, #32
1464c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14650     4C 00 90 5D |  if_ne	jmp	#LR__1630
14654     2C 4E 05 F1 | 	add	fp, #44
14658     A7 1E 02 FB | 	rdlong	local01, fp
1465c     2C 4E 85 F1 | 	sub	fp, #44
14660     1C 1E 0E F2 | 	cmp	local01, #28 wz
14664     2C 4E 05 51 |  if_ne	add	fp, #44
14668     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1466c     2C 4E 85 51 |  if_ne	sub	fp, #44
14670     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
14674     28 00 90 5D |  if_ne	jmp	#LR__1630
14678     A7 12 02 FB | 	rdlong	arg01, fp
1467c     0C 4E 05 F1 | 	add	fp, #12
14680     A7 14 02 FB | 	rdlong	arg02, fp
14684     0C 4E 05 F1 | 	add	fp, #12
14688     A7 16 02 FB | 	rdlong	arg03, fp
1468c     0C 4E 05 F1 | 	add	fp, #12
14690     A7 18 02 FB | 	rdlong	arg04, fp
14694     24 4E 85 F1 | 	sub	fp, #36
14698     7C 5C B0 FD | 	call	#_hg010b_spin2_fill
1469c                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
1469c     58 00 90 FD | 	jmp	#LR__1631
146a0                 | LR__1630
146a0     A7 12 02 F6 | 	mov	arg01, fp
146a4     34 E0 BF FD | 	call	#_converttoint
146a8     FD 20 02 F6 | 	mov	local02, result1
146ac     0C 4E 05 F1 | 	add	fp, #12
146b0     A7 12 02 F6 | 	mov	arg01, fp
146b4     0C 4E 85 F1 | 	sub	fp, #12
146b8     20 E0 BF FD | 	call	#_converttoint
146bc     FD 22 02 F6 | 	mov	local03, result1
146c0     18 4E 05 F1 | 	add	fp, #24
146c4     A7 12 02 F6 | 	mov	arg01, fp
146c8     18 4E 85 F1 | 	sub	fp, #24
146cc     0C E0 BF FD | 	call	#_converttoint
146d0     FD 1E 02 F6 | 	mov	local01, result1
146d4     24 4E 05 F1 | 	add	fp, #36
146d8     A7 12 02 F6 | 	mov	arg01, fp
146dc     24 4E 85 F1 | 	sub	fp, #36
146e0     F8 DF BF FD | 	call	#_converttoint
146e4     FD 18 02 F6 | 	mov	arg04, result1
146e8     10 13 02 F6 | 	mov	arg01, local02
146ec     11 15 02 F6 | 	mov	arg02, local03
146f0     0F 17 02 F6 | 	mov	arg03, local01
146f4     20 5C B0 FD | 	call	#_hg010b_spin2_fill
146f8                 | LR__1631
146f8     A7 F0 03 F6 | 	mov	ptra, fp
146fc     B2 00 A0 FD | 	call	#popregs_
14700                 | _do_fill_ret
14700     2D 00 64 FD | 	ret
14704                 | 
14704                 | ' 
14704                 | ' ' -------------------------- Draw a frane
14704                 | ' 
14704                 | ' sub do_frame
14704                 | _do_frame
14704     03 4A 05 F6 | 	mov	COUNT_, #3
14708     A8 00 A0 FD | 	call	#pushregs_
1470c     30 F0 07 F1 | 	add	ptra, #48
14710     74 59 BF FD | 	call	#_pop
14714     FD 1A 02 F6 | 	mov	arg05, result1
14718     FE 18 02 F6 | 	mov	arg04, result2
1471c     FF 16 02 F6 | 	mov	arg03, result3
14720     24 4E 05 F1 | 	add	fp, #36
14724     A7 1A 62 FC | 	wrlong	arg05, fp
14728     04 4E 05 F1 | 	add	fp, #4
1472c     A7 18 62 FC | 	wrlong	arg04, fp
14730     04 4E 05 F1 | 	add	fp, #4
14734     A7 16 62 FC | 	wrlong	arg03, fp
14738     2C 4E 85 F1 | 	sub	fp, #44
1473c     48 59 BF FD | 	call	#_pop
14740     FD 1A 02 F6 | 	mov	arg05, result1
14744     FE 18 02 F6 | 	mov	arg04, result2
14748     FF 16 02 F6 | 	mov	arg03, result3
1474c     18 4E 05 F1 | 	add	fp, #24
14750     A7 1A 62 FC | 	wrlong	arg05, fp
14754     04 4E 05 F1 | 	add	fp, #4
14758     A7 18 62 FC | 	wrlong	arg04, fp
1475c     04 4E 05 F1 | 	add	fp, #4
14760     A7 16 62 FC | 	wrlong	arg03, fp
14764     20 4E 85 F1 | 	sub	fp, #32
14768     1C 59 BF FD | 	call	#_pop
1476c     FD 1A 02 F6 | 	mov	arg05, result1
14770     FE 18 02 F6 | 	mov	arg04, result2
14774     FF 1E 02 F6 | 	mov	local01, result3
14778     0C 4E 05 F1 | 	add	fp, #12
1477c     A7 1A 62 FC | 	wrlong	arg05, fp
14780     04 4E 05 F1 | 	add	fp, #4
14784     A7 18 62 FC | 	wrlong	arg04, fp
14788     04 4E 05 F1 | 	add	fp, #4
1478c     A7 1E 62 FC | 	wrlong	local01, fp
14790     14 4E 85 F1 | 	sub	fp, #20
14794     F0 58 BF FD | 	call	#_pop
14798     A7 FA 61 FC | 	wrlong	result1, fp
1479c     04 4E 05 F1 | 	add	fp, #4
147a0     A7 FC 61 FC | 	wrlong	result2, fp
147a4     04 4E 05 F1 | 	add	fp, #4
147a8     A7 FE 61 FC | 	wrlong	result3, fp
147ac                 | ' 
147ac                 | ' t4=pop()
147ac                 | ' t3=pop()
147ac                 | ' t2=pop()
147ac                 | ' t1=pop()
147ac                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
147ac     FF 1A 02 F6 | 	mov	arg05, result3
147b0     08 4E 85 F1 | 	sub	fp, #8
147b4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
147b8     08 4E 05 51 |  if_ne	add	fp, #8
147bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
147c0     08 4E 85 51 |  if_ne	sub	fp, #8
147c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
147c8     A8 00 90 5D |  if_ne	jmp	#LR__1640
147cc     14 4E 05 F1 | 	add	fp, #20
147d0     A7 1E 02 FB | 	rdlong	local01, fp
147d4     14 4E 85 F1 | 	sub	fp, #20
147d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
147dc     14 4E 05 51 |  if_ne	add	fp, #20
147e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
147e4     14 4E 85 51 |  if_ne	sub	fp, #20
147e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
147ec     84 00 90 5D |  if_ne	jmp	#LR__1640
147f0     20 4E 05 F1 | 	add	fp, #32
147f4     A7 1E 02 FB | 	rdlong	local01, fp
147f8     20 4E 85 F1 | 	sub	fp, #32
147fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
14800     20 4E 05 51 |  if_ne	add	fp, #32
14804     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
14808     20 4E 85 51 |  if_ne	sub	fp, #32
1480c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14810     60 00 90 5D |  if_ne	jmp	#LR__1640
14814     2C 4E 05 F1 | 	add	fp, #44
14818     A7 1E 02 FB | 	rdlong	local01, fp
1481c     2C 4E 85 F1 | 	sub	fp, #44
14820     1C 1E 0E F2 | 	cmp	local01, #28 wz
14824     2C 4E 05 51 |  if_ne	add	fp, #44
14828     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1482c     2C 4E 85 51 |  if_ne	sub	fp, #44
14830     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
14834     3C 00 90 5D |  if_ne	jmp	#LR__1640
14838     A7 12 02 FB | 	rdlong	arg01, fp
1483c     0C 4E 05 F1 | 	add	fp, #12
14840     A7 14 02 FB | 	rdlong	arg02, fp
14844     0C 4E 05 F1 | 	add	fp, #12
14848     A7 16 02 FB | 	rdlong	arg03, fp
1484c     0C 4E 05 F1 | 	add	fp, #12
14850     A7 18 02 FB | 	rdlong	arg04, fp
14854     24 4E 85 F1 | 	sub	fp, #36
14858     57 00 00 FF 
1485c     0C E4 05 F1 | 	add	objptr, ##44556
14860     F2 1A 02 FB | 	rdlong	arg05, objptr
14864     57 00 00 FF 
14868     0C E4 85 F1 | 	sub	objptr, ##44556
1486c     94 5F B0 FD | 	call	#_hg010b_spin2_frame
14870                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
14870     6C 00 90 FD | 	jmp	#LR__1641
14874                 | LR__1640
14874     A7 12 02 F6 | 	mov	arg01, fp
14878     60 DE BF FD | 	call	#_converttoint
1487c     FD 20 02 F6 | 	mov	local02, result1
14880     0C 4E 05 F1 | 	add	fp, #12
14884     A7 12 02 F6 | 	mov	arg01, fp
14888     0C 4E 85 F1 | 	sub	fp, #12
1488c     4C DE BF FD | 	call	#_converttoint
14890     FD 22 02 F6 | 	mov	local03, result1
14894     18 4E 05 F1 | 	add	fp, #24
14898     A7 12 02 F6 | 	mov	arg01, fp
1489c     18 4E 85 F1 | 	sub	fp, #24
148a0     38 DE BF FD | 	call	#_converttoint
148a4     FD 1E 02 F6 | 	mov	local01, result1
148a8     24 4E 05 F1 | 	add	fp, #36
148ac     A7 12 02 F6 | 	mov	arg01, fp
148b0     24 4E 85 F1 | 	sub	fp, #36
148b4     24 DE BF FD | 	call	#_converttoint
148b8     FD 18 02 F6 | 	mov	arg04, result1
148bc     57 00 00 FF 
148c0     0C E4 05 F1 | 	add	objptr, ##44556
148c4     F2 1A 02 FB | 	rdlong	arg05, objptr
148c8     57 00 00 FF 
148cc     0C E4 85 F1 | 	sub	objptr, ##44556
148d0     10 13 02 F6 | 	mov	arg01, local02
148d4     11 15 02 F6 | 	mov	arg02, local03
148d8     0F 17 02 F6 | 	mov	arg03, local01
148dc     24 5F B0 FD | 	call	#_hg010b_spin2_frame
148e0                 | LR__1641
148e0     A7 F0 03 F6 | 	mov	ptra, fp
148e4     B2 00 A0 FD | 	call	#popregs_
148e8                 | _do_frame_ret
148e8     2D 00 64 FD | 	ret
148ec                 | 
148ec                 | ' 
148ec                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
148ec                 | ' 
148ec                 | ' ' ------------------------- Print to the screem
148ec                 | ' 
148ec                 | ' sub do_print  
148ec                 | _do_print
148ec     0A 4A 05 F6 | 	mov	COUNT_, #10
148f0     A8 00 A0 FD | 	call	#pushregs_
148f4     00 24 06 F6 | 	mov	local04, #0
148f8     8C 57 BF FD | 	call	#_pop
148fc     FD 26 02 F6 | 	mov	local05, result1
14900     FE 28 02 F6 | 	mov	local06, result2
14904     FF 2A 02 F6 | 	mov	local07, result3
14908     13 1F 02 F6 | 	mov	local01, local05
1490c     14 21 02 F6 | 	mov	local02, local06
14910     15 23 02 F6 | 	mov	local03, local07
14914                 | '  
14914                 | ' r=0
14914                 | ' t1=pop() 
14914                 | ' 'print t1.result_type,t1.result.uresult
14914                 | ' 
14914                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14914     21 22 0E F2 | 	cmp	local03, #33 wz
14918     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
1491c     20 00 90 5D |  if_ne	jmp	#LR__1650
14920     11 25 02 F6 | 	mov	local04, local03
14924     60 57 BF FD | 	call	#_pop
14928     FD 26 02 F6 | 	mov	local05, result1
1492c     FE 28 02 F6 | 	mov	local06, result2
14930     FF 2A 02 F6 | 	mov	local07, result3
14934     13 1F 02 F6 | 	mov	local01, local05
14938     14 21 02 F6 | 	mov	local02, local06
1493c     15 23 02 F6 | 	mov	local03, local07
14940                 | LR__1650
14940                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14940     20 22 0E F2 | 	cmp	local03, #32 wz
14944     11 25 02 A6 |  if_e	mov	local04, local03
14948                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14948     FF 22 0E F2 | 	cmp	local03, #255 wz
1494c     0C 00 90 5D |  if_ne	jmp	#LR__1651
14950     0F 13 02 F6 | 	mov	arg01, local01
14954     00 3E B0 FD | 	call	#_printerror
14958     4C 04 90 FD | 	jmp	#LR__1669
1495c                 | LR__1651
1495c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
1495c     2B 22 0E F2 | 	cmp	local03, #43 wz
14960     14 00 90 5D |  if_ne	jmp	#LR__1652
14964     0F 13 02 F6 | 	mov	arg01, local01
14968     98 96 BF FD | 	call	#_convertstring
1496c     FD 26 02 F6 | 	mov	local05, result1
14970     13 1F 02 F6 | 	mov	local01, local05
14974     1F 22 06 F6 | 	mov	local03, #31
14978                 | LR__1652
14978                 | ' 
14978                 | ' if r=print_mod_comma  then
14978     21 24 0E F2 | 	cmp	local04, #33 wz
1497c     AC 01 90 5D |  if_ne	jmp	#LR__1657
14980                 | '   if t1.result_type=result_int then print t1.result.iresult,
14980     1C 22 0E F2 | 	cmp	local03, #28 wz
14984     64 00 90 5D |  if_ne	jmp	#LR__1653
14988     00 12 06 F6 | 	mov	arg01, #0
1498c     40 CE B0 FD | 	call	#__system___getiolock_0472
14990     FD 12 02 F6 | 	mov	arg01, result1
14994     A8 74 B0 FD | 	call	#__system___lockmem
14998     00 28 06 F6 | 	mov	local06, #0
1499c     00 12 06 F6 | 	mov	arg01, #0
149a0     0F 15 02 F6 | 	mov	arg02, local01
149a4     00 16 06 F6 | 	mov	arg03, #0
149a8     0A 18 06 F6 | 	mov	arg04, #10
149ac     D8 81 B0 FD | 	call	#__system___basic_print_integer
149b0     FD 2A 02 F6 | 	mov	local07, result1
149b4     14 27 02 F6 | 	mov	local05, local06
149b8     15 27 02 F1 | 	add	local05, local07
149bc     00 2C 06 F6 | 	mov	local08, #0
149c0     00 12 06 F6 | 	mov	arg01, #0
149c4     09 14 06 F6 | 	mov	arg02, #9
149c8     00 16 06 F6 | 	mov	arg03, #0
149cc     1C 81 B0 FD | 	call	#__system___basic_print_char
149d0     FD 2E 02 F6 | 	mov	local09, result1
149d4     FD 26 02 F1 | 	add	local05, result1
149d8     00 12 06 F6 | 	mov	arg01, #0
149dc     F0 CD B0 FD | 	call	#__system___getiolock_0472
149e0     FD 00 68 FC | 	wrlong	#0, result1
149e4     00 FA 05 F6 | 	mov	result1, #0
149e8     00 30 06 F6 | 	mov	local10, #0
149ec                 | LR__1653
149ec                 | '   if t1.result_type=result_uint then print t1.result.uresult,
149ec     1D 22 0E F2 | 	cmp	local03, #29 wz
149f0     64 00 90 5D |  if_ne	jmp	#LR__1654
149f4     00 12 06 F6 | 	mov	arg01, #0
149f8     D4 CD B0 FD | 	call	#__system___getiolock_0472
149fc     FD 12 02 F6 | 	mov	arg01, result1
14a00     3C 74 B0 FD | 	call	#__system___lockmem
14a04     00 28 06 F6 | 	mov	local06, #0
14a08     00 12 06 F6 | 	mov	arg01, #0
14a0c     0F 15 02 F6 | 	mov	arg02, local01
14a10     00 16 06 F6 | 	mov	arg03, #0
14a14     0A 18 06 F6 | 	mov	arg04, #10
14a18     AC 81 B0 FD | 	call	#__system___basic_print_unsigned
14a1c     FD 2A 02 F6 | 	mov	local07, result1
14a20     14 27 02 F6 | 	mov	local05, local06
14a24     15 27 02 F1 | 	add	local05, local07
14a28     00 2C 06 F6 | 	mov	local08, #0
14a2c     00 12 06 F6 | 	mov	arg01, #0
14a30     09 14 06 F6 | 	mov	arg02, #9
14a34     00 16 06 F6 | 	mov	arg03, #0
14a38     B0 80 B0 FD | 	call	#__system___basic_print_char
14a3c     FD 2E 02 F6 | 	mov	local09, result1
14a40     FD 26 02 F1 | 	add	local05, result1
14a44     00 12 06 F6 | 	mov	arg01, #0
14a48     84 CD B0 FD | 	call	#__system___getiolock_0472
14a4c     FD 00 68 FC | 	wrlong	#0, result1
14a50     00 FA 05 F6 | 	mov	result1, #0
14a54     00 30 06 F6 | 	mov	local10, #0
14a58                 | LR__1654
14a58                 | '   if t1.result_type=result_float then print t1.result.fresult,
14a58     1E 22 0E F2 | 	cmp	local03, #30 wz
14a5c     64 00 90 5D |  if_ne	jmp	#LR__1655
14a60     00 12 06 F6 | 	mov	arg01, #0
14a64     68 CD B0 FD | 	call	#__system___getiolock_0472
14a68     FD 12 02 F6 | 	mov	arg01, result1
14a6c     D0 73 B0 FD | 	call	#__system___lockmem
14a70     00 28 06 F6 | 	mov	local06, #0
14a74     00 12 06 F6 | 	mov	arg01, #0
14a78     0F 15 02 F6 | 	mov	arg02, local01
14a7c     00 16 06 F6 | 	mov	arg03, #0
14a80     23 18 06 F6 | 	mov	arg04, #35
14a84     4C A5 B0 FD | 	call	#__system___basic_print_float
14a88     FD 2A 02 F6 | 	mov	local07, result1
14a8c     14 27 02 F6 | 	mov	local05, local06
14a90     15 27 02 F1 | 	add	local05, local07
14a94     00 2C 06 F6 | 	mov	local08, #0
14a98     00 12 06 F6 | 	mov	arg01, #0
14a9c     09 14 06 F6 | 	mov	arg02, #9
14aa0     00 16 06 F6 | 	mov	arg03, #0
14aa4     44 80 B0 FD | 	call	#__system___basic_print_char
14aa8     FD 2E 02 F6 | 	mov	local09, result1
14aac     FD 26 02 F1 | 	add	local05, result1
14ab0     00 12 06 F6 | 	mov	arg01, #0
14ab4     18 CD B0 FD | 	call	#__system___getiolock_0472
14ab8     FD 00 68 FC | 	wrlong	#0, result1
14abc     00 FA 05 F6 | 	mov	result1, #0
14ac0     00 30 06 F6 | 	mov	local10, #0
14ac4                 | LR__1655
14ac4                 | '   if t1.result_type=result_string then print t1.result.sresult,
14ac4     1F 22 0E F2 | 	cmp	local03, #31 wz
14ac8     60 00 90 5D |  if_ne	jmp	#LR__1656
14acc     00 12 06 F6 | 	mov	arg01, #0
14ad0     FC CC B0 FD | 	call	#__system___getiolock_0472
14ad4     FD 12 02 F6 | 	mov	arg01, result1
14ad8     64 73 B0 FD | 	call	#__system___lockmem
14adc     00 28 06 F6 | 	mov	local06, #0
14ae0     00 12 06 F6 | 	mov	arg01, #0
14ae4     0F 15 02 F6 | 	mov	arg02, local01
14ae8     00 16 06 F6 | 	mov	arg03, #0
14aec     54 80 B0 FD | 	call	#__system___basic_print_string
14af0     FD 2A 02 F6 | 	mov	local07, result1
14af4     14 27 02 F6 | 	mov	local05, local06
14af8     15 27 02 F1 | 	add	local05, local07
14afc     00 2C 06 F6 | 	mov	local08, #0
14b00     00 12 06 F6 | 	mov	arg01, #0
14b04     09 14 06 F6 | 	mov	arg02, #9
14b08     00 16 06 F6 | 	mov	arg03, #0
14b0c     DC 7F B0 FD | 	call	#__system___basic_print_char
14b10     FD 2E 02 F6 | 	mov	local09, result1
14b14     FD 26 02 F1 | 	add	local05, result1
14b18     00 12 06 F6 | 	mov	arg01, #0
14b1c     B0 CC B0 FD | 	call	#__system___getiolock_0472
14b20     FD 00 68 FC | 	wrlong	#0, result1
14b24     00 FA 05 F6 | 	mov	result1, #0
14b28     00 30 06 F6 | 	mov	local10, #0
14b2c                 | LR__1656
14b2c                 | LR__1657
14b2c                 | ' if r=print_mod_semicolon then 
14b2c     22 24 0E F2 | 	cmp	local04, #34 wz
14b30     1C 01 90 5D |  if_ne	jmp	#LR__1662
14b34                 | '   if t1.result_type=result_int then print t1.result.iresult;
14b34     1C 22 0E F2 | 	cmp	local03, #28 wz
14b38     50 00 90 5D |  if_ne	jmp	#LR__1658
14b3c     00 12 06 F6 | 	mov	arg01, #0
14b40     8C CC B0 FD | 	call	#__system___getiolock_0472
14b44     FD 12 02 F6 | 	mov	arg01, result1
14b48     F4 72 B0 FD | 	call	#__system___lockmem
14b4c     00 28 06 F6 | 	mov	local06, #0
14b50     00 30 06 F6 | 	mov	local10, #0
14b54     0A 2C 06 F6 | 	mov	local08, #10
14b58     00 12 06 F6 | 	mov	arg01, #0
14b5c     0F 15 02 F6 | 	mov	arg02, local01
14b60     00 16 06 F6 | 	mov	arg03, #0
14b64     0A 18 06 F6 | 	mov	arg04, #10
14b68     1C 80 B0 FD | 	call	#__system___basic_print_integer
14b6c     FD 2A 02 F6 | 	mov	local07, result1
14b70     14 27 02 F6 | 	mov	local05, local06
14b74     15 27 02 F1 | 	add	local05, local07
14b78     00 12 06 F6 | 	mov	arg01, #0
14b7c     50 CC B0 FD | 	call	#__system___getiolock_0472
14b80     FD 00 68 FC | 	wrlong	#0, result1
14b84     00 FA 05 F6 | 	mov	result1, #0
14b88     00 2E 06 F6 | 	mov	local09, #0
14b8c                 | LR__1658
14b8c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
14b8c     1D 22 0E F2 | 	cmp	local03, #29 wz
14b90     50 00 90 5D |  if_ne	jmp	#LR__1659
14b94     00 12 06 F6 | 	mov	arg01, #0
14b98     34 CC B0 FD | 	call	#__system___getiolock_0472
14b9c     FD 12 02 F6 | 	mov	arg01, result1
14ba0     9C 72 B0 FD | 	call	#__system___lockmem
14ba4     00 28 06 F6 | 	mov	local06, #0
14ba8     00 30 06 F6 | 	mov	local10, #0
14bac     0A 2C 06 F6 | 	mov	local08, #10
14bb0     00 12 06 F6 | 	mov	arg01, #0
14bb4     0F 15 02 F6 | 	mov	arg02, local01
14bb8     00 16 06 F6 | 	mov	arg03, #0
14bbc     0A 18 06 F6 | 	mov	arg04, #10
14bc0     04 80 B0 FD | 	call	#__system___basic_print_unsigned
14bc4     FD 2A 02 F6 | 	mov	local07, result1
14bc8     14 27 02 F6 | 	mov	local05, local06
14bcc     15 27 02 F1 | 	add	local05, local07
14bd0     00 12 06 F6 | 	mov	arg01, #0
14bd4     F8 CB B0 FD | 	call	#__system___getiolock_0472
14bd8     FD 00 68 FC | 	wrlong	#0, result1
14bdc     00 FA 05 F6 | 	mov	result1, #0
14be0     00 2E 06 F6 | 	mov	local09, #0
14be4                 | LR__1659
14be4                 | '   if t1.result_type=result_float then print t1.result.fresult;
14be4     1E 22 0E F2 | 	cmp	local03, #30 wz
14be8     30 00 90 5D |  if_ne	jmp	#LR__1660
14bec     00 12 06 F6 | 	mov	arg01, #0
14bf0     DC CB B0 FD | 	call	#__system___getiolock_0472
14bf4     FD 12 02 F6 | 	mov	arg01, result1
14bf8     44 72 B0 FD | 	call	#__system___lockmem
14bfc     00 12 06 F6 | 	mov	arg01, #0
14c00     0F 15 02 F6 | 	mov	arg02, local01
14c04     00 16 06 F6 | 	mov	arg03, #0
14c08     23 18 06 F6 | 	mov	arg04, #35
14c0c     C4 A3 B0 FD | 	call	#__system___basic_print_float
14c10     00 12 06 F6 | 	mov	arg01, #0
14c14     B8 CB B0 FD | 	call	#__system___getiolock_0472
14c18     FD 00 68 FC | 	wrlong	#0, result1
14c1c                 | LR__1660
14c1c                 | '   if t1.result_type=result_string then print t1.result.sresult;
14c1c     1F 22 0E F2 | 	cmp	local03, #31 wz
14c20     2C 00 90 5D |  if_ne	jmp	#LR__1661
14c24     00 12 06 F6 | 	mov	arg01, #0
14c28     A4 CB B0 FD | 	call	#__system___getiolock_0472
14c2c     FD 12 02 F6 | 	mov	arg01, result1
14c30     0C 72 B0 FD | 	call	#__system___lockmem
14c34     00 12 06 F6 | 	mov	arg01, #0
14c38     0F 15 02 F6 | 	mov	arg02, local01
14c3c     00 16 06 F6 | 	mov	arg03, #0
14c40     00 7F B0 FD | 	call	#__system___basic_print_string
14c44     00 12 06 F6 | 	mov	arg01, #0
14c48     84 CB B0 FD | 	call	#__system___getiolock_0472
14c4c     FD 00 68 FC | 	wrlong	#0, result1
14c50                 | LR__1661
14c50                 | LR__1662
14c50                 | ' if r=0 then 
14c50     00 24 0E F2 | 	cmp	local04, #0 wz
14c54     1C 01 90 5D |  if_ne	jmp	#LR__1667
14c58                 | '   if t1.result_type=result_int then print t1.result.iresult
14c58     1C 22 0E F2 | 	cmp	local03, #28 wz
14c5c     40 00 90 5D |  if_ne	jmp	#LR__1663
14c60     00 12 06 F6 | 	mov	arg01, #0
14c64     68 CB B0 FD | 	call	#__system___getiolock_0472
14c68     FD 12 02 F6 | 	mov	arg01, result1
14c6c     D0 71 B0 FD | 	call	#__system___lockmem
14c70     00 12 06 F6 | 	mov	arg01, #0
14c74     0F 15 02 F6 | 	mov	arg02, local01
14c78     00 16 06 F6 | 	mov	arg03, #0
14c7c     0A 18 06 F6 | 	mov	arg04, #10
14c80     04 7F B0 FD | 	call	#__system___basic_print_integer
14c84     00 12 06 F6 | 	mov	arg01, #0
14c88     0A 14 06 F6 | 	mov	arg02, #10
14c8c     00 16 06 F6 | 	mov	arg03, #0
14c90     58 7E B0 FD | 	call	#__system___basic_print_char
14c94     00 12 06 F6 | 	mov	arg01, #0
14c98     34 CB B0 FD | 	call	#__system___getiolock_0472
14c9c     FD 00 68 FC | 	wrlong	#0, result1
14ca0                 | LR__1663
14ca0                 | '   if t1.result_type=result_uint then print t1.result.uresult
14ca0     1D 22 0E F2 | 	cmp	local03, #29 wz
14ca4     40 00 90 5D |  if_ne	jmp	#LR__1664
14ca8     00 12 06 F6 | 	mov	arg01, #0
14cac     20 CB B0 FD | 	call	#__system___getiolock_0472
14cb0     FD 12 02 F6 | 	mov	arg01, result1
14cb4     88 71 B0 FD | 	call	#__system___lockmem
14cb8     00 12 06 F6 | 	mov	arg01, #0
14cbc     0F 15 02 F6 | 	mov	arg02, local01
14cc0     00 16 06 F6 | 	mov	arg03, #0
14cc4     0A 18 06 F6 | 	mov	arg04, #10
14cc8     FC 7E B0 FD | 	call	#__system___basic_print_unsigned
14ccc     00 12 06 F6 | 	mov	arg01, #0
14cd0     0A 14 06 F6 | 	mov	arg02, #10
14cd4     00 16 06 F6 | 	mov	arg03, #0
14cd8     10 7E B0 FD | 	call	#__system___basic_print_char
14cdc     00 12 06 F6 | 	mov	arg01, #0
14ce0     EC CA B0 FD | 	call	#__system___getiolock_0472
14ce4     FD 00 68 FC | 	wrlong	#0, result1
14ce8                 | LR__1664
14ce8                 | '   if t1.result_type=result_float then print t1.result.fresult
14ce8     1E 22 0E F2 | 	cmp	local03, #30 wz
14cec     40 00 90 5D |  if_ne	jmp	#LR__1665
14cf0     00 12 06 F6 | 	mov	arg01, #0
14cf4     D8 CA B0 FD | 	call	#__system___getiolock_0472
14cf8     FD 12 02 F6 | 	mov	arg01, result1
14cfc     40 71 B0 FD | 	call	#__system___lockmem
14d00     00 12 06 F6 | 	mov	arg01, #0
14d04     0F 15 02 F6 | 	mov	arg02, local01
14d08     00 16 06 F6 | 	mov	arg03, #0
14d0c     23 18 06 F6 | 	mov	arg04, #35
14d10     C0 A2 B0 FD | 	call	#__system___basic_print_float
14d14     00 12 06 F6 | 	mov	arg01, #0
14d18     0A 14 06 F6 | 	mov	arg02, #10
14d1c     00 16 06 F6 | 	mov	arg03, #0
14d20     C8 7D B0 FD | 	call	#__system___basic_print_char
14d24     00 12 06 F6 | 	mov	arg01, #0
14d28     A4 CA B0 FD | 	call	#__system___getiolock_0472
14d2c     FD 00 68 FC | 	wrlong	#0, result1
14d30                 | LR__1665
14d30                 | '   if t1.result_type=result_string then print t1.result.sresult
14d30     1F 22 0E F2 | 	cmp	local03, #31 wz
14d34     3C 00 90 5D |  if_ne	jmp	#LR__1666
14d38     00 12 06 F6 | 	mov	arg01, #0
14d3c     90 CA B0 FD | 	call	#__system___getiolock_0472
14d40     FD 12 02 F6 | 	mov	arg01, result1
14d44     F8 70 B0 FD | 	call	#__system___lockmem
14d48     00 12 06 F6 | 	mov	arg01, #0
14d4c     0F 15 02 F6 | 	mov	arg02, local01
14d50     00 16 06 F6 | 	mov	arg03, #0
14d54     EC 7D B0 FD | 	call	#__system___basic_print_string
14d58     00 12 06 F6 | 	mov	arg01, #0
14d5c     0A 14 06 F6 | 	mov	arg02, #10
14d60     00 16 06 F6 | 	mov	arg03, #0
14d64     84 7D B0 FD | 	call	#__system___basic_print_char
14d68     00 12 06 F6 | 	mov	arg01, #0
14d6c     60 CA B0 FD | 	call	#__system___getiolock_0472
14d70     FD 00 68 FC | 	wrlong	#0, result1
14d74                 | LR__1666
14d74                 | LR__1667
14d74                 | ' if r=print_mod_empty then print
14d74     20 24 0E F2 | 	cmp	local04, #32 wz
14d78     2C 00 90 5D |  if_ne	jmp	#LR__1668
14d7c     00 12 06 F6 | 	mov	arg01, #0
14d80     4C CA B0 FD | 	call	#__system___getiolock_0472
14d84     FD 12 02 F6 | 	mov	arg01, result1
14d88     B4 70 B0 FD | 	call	#__system___lockmem
14d8c     00 12 06 F6 | 	mov	arg01, #0
14d90     0A 14 06 F6 | 	mov	arg02, #10
14d94     00 16 06 F6 | 	mov	arg03, #0
14d98     50 7D B0 FD | 	call	#__system___basic_print_char
14d9c     00 12 06 F6 | 	mov	arg01, #0
14da0     2C CA B0 FD | 	call	#__system___getiolock_0472
14da4     FD 00 68 FC | 	wrlong	#0, result1
14da8                 | LR__1668
14da8                 | LR__1669
14da8     A7 F0 03 F6 | 	mov	ptra, fp
14dac     B2 00 A0 FD | 	call	#popregs_
14db0                 | _do_print_ret
14db0     2D 00 64 FD | 	ret
14db4                 | 
14db4                 | ' 
14db4                 | ' 
14db4                 | ' sub do_paper
14db4                 | _do_paper
14db4     03 4A 05 F6 | 	mov	COUNT_, #3
14db8     A8 00 A0 FD | 	call	#pushregs_
14dbc     C8 52 BF FD | 	call	#_pop
14dc0     FD 1E 02 F6 | 	mov	local01, result1
14dc4     FE 20 02 F6 | 	mov	local02, result2
14dc8     FF 22 02 F6 | 	mov	local03, result3
14dcc                 | ' t1=pop() 
14dcc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14dcc     1E 22 0E F2 | 	cmp	local03, #30 wz
14dd0     10 00 90 5D |  if_ne	jmp	#LR__1670
14dd4     0F 13 02 F6 | 	mov	arg01, local01
14dd8     00 14 06 F6 | 	mov	arg02, #0
14ddc     A4 A0 B0 FD | 	call	#__system___float_tointeger
14de0     FD 1E 02 F6 | 	mov	local01, result1
14de4                 | LR__1670
14de4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14de4     1F 22 0E F2 | 	cmp	local03, #31 wz
14de8     18 00 90 5D |  if_ne	jmp	#LR__1671
14dec     0F 13 02 F6 | 	mov	arg01, local01
14df0     B0 A3 B0 FD | 	call	#__system____builtin_atof
14df4     FD 12 02 F6 | 	mov	arg01, result1
14df8     00 14 06 F6 | 	mov	arg02, #0
14dfc     84 A0 B0 FD | 	call	#__system___float_tointeger
14e00     FD 1E 02 F6 | 	mov	local01, result1
14e04                 | LR__1671
14e04     57 00 00 FF 
14e08     1C E4 05 F1 | 	add	objptr, ##44572
14e0c     F2 1E 62 FC | 	wrlong	local01, objptr
14e10     04 E4 05 F1 | 	add	objptr, #4
14e14     F2 12 02 FB | 	rdlong	arg01, objptr
14e18                 | ' 
14e18                 | ' write_color:=ff
14e18     56 00 00 FF 
14e1c     E3 E5 85 F1 | 	sub	objptr, ##44515
14e20     F2 12 62 FC | 	wrlong	arg01, objptr
14e24                 | ' write_background:=bb
14e24     04 E4 05 F1 | 	add	objptr, #4
14e28     F2 1E 62 FC | 	wrlong	local01, objptr
14e2c     41 E4 85 F1 | 	sub	objptr, #65
14e30     A7 F0 03 F6 | 	mov	ptra, fp
14e34     B2 00 A0 FD | 	call	#popregs_
14e38                 | _do_paper_ret
14e38     2D 00 64 FD | 	ret
14e3c                 | 
14e3c                 | ' 
14e3c                 | ' sub do_ink
14e3c                 | _do_ink
14e3c     03 4A 05 F6 | 	mov	COUNT_, #3
14e40     A8 00 A0 FD | 	call	#pushregs_
14e44     40 52 BF FD | 	call	#_pop
14e48     FD 1E 02 F6 | 	mov	local01, result1
14e4c     FE 20 02 F6 | 	mov	local02, result2
14e50     FF 22 02 F6 | 	mov	local03, result3
14e54                 | ' t1=pop() 
14e54                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14e54     1E 22 0E F2 | 	cmp	local03, #30 wz
14e58     10 00 90 5D |  if_ne	jmp	#LR__1680
14e5c     0F 13 02 F6 | 	mov	arg01, local01
14e60     00 14 06 F6 | 	mov	arg02, #0
14e64     1C A0 B0 FD | 	call	#__system___float_tointeger
14e68     FD 1E 02 F6 | 	mov	local01, result1
14e6c                 | LR__1680
14e6c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14e6c     1F 22 0E F2 | 	cmp	local03, #31 wz
14e70     18 00 90 5D |  if_ne	jmp	#LR__1681
14e74     0F 13 02 F6 | 	mov	arg01, local01
14e78     28 A3 B0 FD | 	call	#__system____builtin_atof
14e7c     FD 12 02 F6 | 	mov	arg01, result1
14e80     00 14 06 F6 | 	mov	arg02, #0
14e84     FC 9F B0 FD | 	call	#__system___float_tointeger
14e88     FD 1E 02 F6 | 	mov	local01, result1
14e8c                 | LR__1681
14e8c     57 00 00 FF 
14e90     20 E4 05 F1 | 	add	objptr, ##44576
14e94     F2 1E 62 FC | 	wrlong	local01, objptr
14e98     04 E4 85 F1 | 	sub	objptr, #4
14e9c     F2 14 02 FB | 	rdlong	arg02, objptr
14ea0                 | ' 
14ea0                 | ' write_color:=ff
14ea0     56 00 00 FF 
14ea4     DF E5 85 F1 | 	sub	objptr, ##44511
14ea8     F2 1E 62 FC | 	wrlong	local01, objptr
14eac                 | ' write_background:=bb
14eac     04 E4 05 F1 | 	add	objptr, #4
14eb0     F2 14 62 FC | 	wrlong	arg02, objptr
14eb4     56 00 00 FF 
14eb8     DF E5 05 F1 | 	add	objptr, ##44511
14ebc     F2 12 02 FB | 	rdlong	arg01, objptr
14ec0     57 00 00 FF 
14ec4     20 E4 85 F1 | 	sub	objptr, ##44576
14ec8     D0 4B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
14ecc     A7 F0 03 F6 | 	mov	ptra, fp
14ed0     B2 00 A0 FD | 	call	#popregs_
14ed4                 | _do_ink_ret
14ed4     2D 00 64 FD | 	ret
14ed8                 | 
14ed8                 | ' 
14ed8                 | ' 
14ed8                 | ' sub do_font
14ed8                 | _do_font
14ed8     03 4A 05 F6 | 	mov	COUNT_, #3
14edc     A8 00 A0 FD | 	call	#pushregs_
14ee0     A4 51 BF FD | 	call	#_pop
14ee4     FD 1E 02 F6 | 	mov	local01, result1
14ee8     FE 20 02 F6 | 	mov	local02, result2
14eec     FF 22 02 F6 | 	mov	local03, result3
14ef0                 | ' t1=pop() 
14ef0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14ef0     1E 22 0E F2 | 	cmp	local03, #30 wz
14ef4     10 00 90 5D |  if_ne	jmp	#LR__1690
14ef8     0F 13 02 F6 | 	mov	arg01, local01
14efc     00 14 06 F6 | 	mov	arg02, #0
14f00     80 9F B0 FD | 	call	#__system___float_tointeger
14f04     FD 1E 02 F6 | 	mov	local01, result1
14f08                 | LR__1690
14f08                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f08     1F 22 0E F2 | 	cmp	local03, #31 wz
14f0c     18 00 90 5D |  if_ne	jmp	#LR__1691
14f10     0F 13 02 F6 | 	mov	arg01, local01
14f14     8C A2 B0 FD | 	call	#__system____builtin_atof
14f18     FD 12 02 F6 | 	mov	arg01, result1
14f1c     00 14 06 F6 | 	mov	arg02, #0
14f20     60 9F B0 FD | 	call	#__system___float_tointeger
14f24     FD 1E 02 F6 | 	mov	local01, result1
14f28                 | LR__1691
14f28     57 00 00 FF 
14f2c     24 E4 05 F1 | 	add	objptr, ##44580
14f30     F2 1E 62 FC | 	wrlong	local01, objptr
14f34     57 00 00 FF 
14f38     24 E4 85 F1 | 	sub	objptr, ##44580
14f3c     02 1E 66 F0 | 	shl	local01, #2
14f40     0F 13 02 F6 | 	mov	arg01, local01
14f44     B4 5A B0 FD | 	call	#_hg010b_spin2_setfontfamily
14f48     A7 F0 03 F6 | 	mov	ptra, fp
14f4c     B2 00 A0 FD | 	call	#popregs_
14f50                 | _do_font_ret
14f50     2D 00 64 FD | 	ret
14f54                 | 
14f54                 | ' 
14f54                 | ' sub do_mode
14f54                 | _do_mode
14f54     04 4A 05 F6 | 	mov	COUNT_, #4
14f58     A8 00 A0 FD | 	call	#pushregs_
14f5c     28 51 BF FD | 	call	#_pop
14f60     FD 1E 02 F6 | 	mov	local01, result1
14f64     FE 20 02 F6 | 	mov	local02, result2
14f68     FF 22 02 F6 | 	mov	local03, result3
14f6c                 | ' t1=pop() 
14f6c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f6c     1E 22 0E F2 | 	cmp	local03, #30 wz
14f70     10 00 90 5D |  if_ne	jmp	#LR__1700
14f74     0F 13 02 F6 | 	mov	arg01, local01
14f78     00 14 06 F6 | 	mov	arg02, #0
14f7c     04 9F B0 FD | 	call	#__system___float_tointeger
14f80     FD 1E 02 F6 | 	mov	local01, result1
14f84                 | LR__1700
14f84                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f84     1F 22 0E F2 | 	cmp	local03, #31 wz
14f88     18 00 90 5D |  if_ne	jmp	#LR__1701
14f8c     0F 13 02 F6 | 	mov	arg01, local01
14f90     10 A2 B0 FD | 	call	#__system____builtin_atof
14f94     FD 12 02 F6 | 	mov	arg01, result1
14f98     00 14 06 F6 | 	mov	arg02, #0
14f9c     E4 9E B0 FD | 	call	#__system___float_tointeger
14fa0     FD 1E 02 F6 | 	mov	local01, result1
14fa4                 | LR__1701
14fa4                 | ' select case t1.result.iresult
14fa4     0F 25 02 F6 | 	mov	local04, local01
14fa8     05 24 26 F3 | 	fle	local04, #5
14fac     30 24 62 FD | 	jmprel	local04
14fb0                 | LR__1702
14fb0     14 00 90 FD | 	jmp	#LR__1703
14fb4     A8 00 90 FD | 	jmp	#LR__1704
14fb8     10 01 90 FD | 	jmp	#LR__1705
14fbc     78 01 90 FD | 	jmp	#LR__1706
14fc0     E0 01 90 FD | 	jmp	#LR__1707
14fc4     70 02 90 FD | 	jmp	#LR__1708
14fc8                 | LR__1703
14fc8     57 00 00 FF 
14fcc     24 E4 05 F1 | 	add	objptr, ##44580
14fd0     F2 02 68 FC | 	wrlong	#1, objptr
14fd4     04 E4 85 F1 | 	sub	objptr, #4
14fd8     F2 34 69 FC | 	wrlong	#154, objptr
14fdc     22 00 00 FF 
14fe0     A4 E5 05 F1 | 	add	objptr, ##17828
14fe4     F2 02 68 FC | 	wrlong	#1, objptr
14fe8     22 00 00 FF 
14fec     A8 E5 85 F1 | 	sub	objptr, ##17832
14ff0     F2 26 69 FC | 	wrlong	#147, objptr
14ff4     57 00 00 FF 
14ff8     1C E4 85 F1 | 	sub	objptr, ##44572
14ffc     04 12 06 F6 | 	mov	arg01, #4
15000     F8 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15004     57 00 00 FF 
15008     20 E4 05 F1 | 	add	objptr, ##44576
1500c     F2 12 02 FB | 	rdlong	arg01, objptr
15010     04 E4 85 F1 | 	sub	objptr, #4
15014     F2 14 02 FB | 	rdlong	arg02, objptr
15018                 | ' 
15018                 | ' write_color:=ff
15018     56 00 00 FF 
1501c     DF E5 85 F1 | 	sub	objptr, ##44511
15020     F2 12 62 FC | 	wrlong	arg01, objptr
15024                 | ' write_background:=bb
15024     04 E4 05 F1 | 	add	objptr, #4
15028     F2 14 62 FC | 	wrlong	arg02, objptr
1502c     01 00 00 FF 
15030     00 EA 05 F1 | 	add	ptr__dat__, ##512
15034     7B 00 00 FF 
15038     27 E4 05 F1 | 	add	objptr, ##63015
1503c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15040     04 E4 85 F1 | 	sub	objptr, #4
15044     03 00 80 FF 
15048     F2 30 69 FC | 	wrlong	##1688, objptr
1504c     7B 00 00 FF 
15050     64 E4 85 F1 | 	sub	objptr, ##63076
15054     01 00 00 FF 
15058     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1505c     D8 01 90 FD | 	jmp	#LR__1708
15060                 | LR__1704
15060     57 00 00 FF 
15064     24 E4 05 F1 | 	add	objptr, ##44580
15068     F2 00 68 FC | 	wrlong	#0, objptr
1506c     04 E4 85 F1 | 	sub	objptr, #4
15070     F2 2E 68 FC | 	wrlong	#23, objptr
15074     22 00 00 FF 
15078     A4 E5 05 F1 | 	add	objptr, ##17828
1507c     F2 00 68 FC | 	wrlong	#0, objptr
15080     22 00 00 FF 
15084     A8 E5 85 F1 | 	sub	objptr, ##17832
15088     F2 00 68 FC | 	wrlong	#0, objptr
1508c     57 00 00 FF 
15090     1C E4 85 F1 | 	sub	objptr, ##44572
15094     00 12 06 F6 | 	mov	arg01, #0
15098     60 59 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1509c     57 00 00 FF 
150a0     20 E4 05 F1 | 	add	objptr, ##44576
150a4     F2 12 02 FB | 	rdlong	arg01, objptr
150a8     04 E4 85 F1 | 	sub	objptr, #4
150ac     F2 14 02 FB | 	rdlong	arg02, objptr
150b0                 | ' 
150b0                 | ' write_color:=ff
150b0     56 00 00 FF 
150b4     DF E5 85 F1 | 	sub	objptr, ##44511
150b8     F2 12 62 FC | 	wrlong	arg01, objptr
150bc                 | ' write_background:=bb
150bc     04 E4 05 F1 | 	add	objptr, #4
150c0     F2 14 62 FC | 	wrlong	arg02, objptr
150c4     41 E4 85 F1 | 	sub	objptr, #65
150c8     6C 01 90 FD | 	jmp	#LR__1708
150cc                 | LR__1705
150cc     57 00 00 FF 
150d0     24 E4 05 F1 | 	add	objptr, ##44580
150d4     F2 00 68 FC | 	wrlong	#0, objptr
150d8     04 E4 85 F1 | 	sub	objptr, #4
150dc     F2 6A 69 FC | 	wrlong	#181, objptr
150e0     22 00 00 FF 
150e4     A4 E5 05 F1 | 	add	objptr, ##17828
150e8     F2 00 68 FC | 	wrlong	#0, objptr
150ec     22 00 00 FF 
150f0     A8 E5 85 F1 | 	sub	objptr, ##17832
150f4     F2 00 68 FC | 	wrlong	#0, objptr
150f8     57 00 00 FF 
150fc     1C E4 85 F1 | 	sub	objptr, ##44572
15100     00 12 06 F6 | 	mov	arg01, #0
15104     F4 58 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15108     57 00 00 FF 
1510c     20 E4 05 F1 | 	add	objptr, ##44576
15110     F2 12 02 FB | 	rdlong	arg01, objptr
15114     04 E4 85 F1 | 	sub	objptr, #4
15118     F2 14 02 FB | 	rdlong	arg02, objptr
1511c                 | ' 
1511c                 | ' write_color:=ff
1511c     56 00 00 FF 
15120     DF E5 85 F1 | 	sub	objptr, ##44511
15124     F2 12 62 FC | 	wrlong	arg01, objptr
15128                 | ' write_background:=bb
15128     04 E4 05 F1 | 	add	objptr, #4
1512c     F2 14 62 FC | 	wrlong	arg02, objptr
15130     41 E4 85 F1 | 	sub	objptr, #65
15134     00 01 90 FD | 	jmp	#LR__1708
15138                 | LR__1706
15138     57 00 00 FF 
1513c     24 E4 05 F1 | 	add	objptr, ##44580
15140     F2 00 68 FC | 	wrlong	#0, objptr
15144     04 E4 85 F1 | 	sub	objptr, #4
15148     F2 1E 68 FC | 	wrlong	#15, objptr
1514c     22 00 00 FF 
15150     A4 E5 05 F1 | 	add	objptr, ##17828
15154     F2 00 68 FC | 	wrlong	#0, objptr
15158     22 00 00 FF 
1515c     A8 E5 85 F1 | 	sub	objptr, ##17832
15160     F2 00 68 FC | 	wrlong	#0, objptr
15164     57 00 00 FF 
15168     1C E4 85 F1 | 	sub	objptr, ##44572
1516c     00 12 06 F6 | 	mov	arg01, #0
15170     88 58 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15174     57 00 00 FF 
15178     20 E4 05 F1 | 	add	objptr, ##44576
1517c     F2 12 02 FB | 	rdlong	arg01, objptr
15180     04 E4 85 F1 | 	sub	objptr, #4
15184     F2 14 02 FB | 	rdlong	arg02, objptr
15188                 | ' 
15188                 | ' write_color:=ff
15188     56 00 00 FF 
1518c     DF E5 85 F1 | 	sub	objptr, ##44511
15190     F2 12 62 FC | 	wrlong	arg01, objptr
15194                 | ' write_background:=bb
15194     04 E4 05 F1 | 	add	objptr, #4
15198     F2 14 62 FC | 	wrlong	arg02, objptr
1519c     41 E4 85 F1 | 	sub	objptr, #65
151a0     94 00 90 FD | 	jmp	#LR__1708
151a4                 | LR__1707
151a4     57 00 00 FF 
151a8     24 E4 05 F1 | 	add	objptr, ##44580
151ac     F2 02 68 FC | 	wrlong	#1, objptr
151b0     04 E4 85 F1 | 	sub	objptr, #4
151b4     F2 02 68 FC | 	wrlong	#1, objptr
151b8     22 00 00 FF 
151bc     A4 E5 05 F1 | 	add	objptr, ##17828
151c0     F2 02 68 FC | 	wrlong	#1, objptr
151c4     22 00 00 FF 
151c8     A8 E5 85 F1 | 	sub	objptr, ##17832
151cc     F2 1C 68 FC | 	wrlong	#14, objptr
151d0     57 00 00 FF 
151d4     1C E4 85 F1 | 	sub	objptr, ##44572
151d8     04 12 06 F6 | 	mov	arg01, #4
151dc     1C 58 B0 FD | 	call	#_hg010b_spin2_setfontfamily
151e0     57 00 00 FF 
151e4     20 E4 05 F1 | 	add	objptr, ##44576
151e8     F2 12 02 FB | 	rdlong	arg01, objptr
151ec     04 E4 85 F1 | 	sub	objptr, #4
151f0     F2 14 02 FB | 	rdlong	arg02, objptr
151f4                 | ' 
151f4                 | ' write_color:=ff
151f4     56 00 00 FF 
151f8     DF E5 85 F1 | 	sub	objptr, ##44511
151fc     F2 12 62 FC | 	wrlong	arg01, objptr
15200                 | ' write_background:=bb
15200     04 E4 05 F1 | 	add	objptr, #4
15204     F2 14 62 FC | 	wrlong	arg02, objptr
15208     07 00 00 FF 
1520c     8A EB 05 F1 | 	add	ptr__dat__, ##3978
15210     7B 00 00 FF 
15214     27 E4 05 F1 | 	add	objptr, ##63015
15218     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1521c     04 E4 85 F1 | 	sub	objptr, #4
15220     03 00 80 FF 
15224     F2 30 69 FC | 	wrlong	##1688, objptr
15228     7B 00 00 FF 
1522c     64 E4 85 F1 | 	sub	objptr, ##63076
15230     07 00 00 FF 
15234     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
15238                 | LR__1708
15238     7B 00 00 FF 
1523c     60 E4 05 F1 | 	add	objptr, ##63072
15240     F2 1E 62 FC | 	wrlong	local01, objptr
15244     24 00 00 FF 
15248     40 E4 85 F1 | 	sub	objptr, ##18496
1524c     F2 12 02 FB | 	rdlong	arg01, objptr
15250     04 E4 85 F1 | 	sub	objptr, #4
15254     F2 14 02 FB | 	rdlong	arg02, objptr
15258     57 00 00 FF 
1525c     1C E4 85 F1 | 	sub	objptr, ##44572
15260     80 58 B0 FD | 	call	#_hg010b_spin2_cls
15264     5D 01 00 FF 
15268     A2 12 06 F6 | 	mov	arg01, ##@LR__4907
1526c                 | ' 
1526c                 | ' write(text)
1526c     30 5B B0 FD | 	call	#_hg010b_spin2_write
15270                 | ' crlf
15270     8C 5C B0 FD | 	call	#_hg010b_spin2_crlf
15274     18 00 00 FF 
15278     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1527c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15280     18 00 00 FF 
15284     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
15288                 | ' 
15288                 | ' write(text)
15288     14 5B B0 FD | 	call	#_hg010b_spin2_write
1528c                 | ' crlf
1528c     70 5C B0 FD | 	call	#_hg010b_spin2_crlf
15290     79 00 00 FF 
15294     C0 E5 05 F1 | 	add	objptr, ##62400
15298     F2 12 02 FB | 	rdlong	arg01, objptr
1529c     79 00 00 FF 
152a0     C0 E5 85 F1 | 	sub	objptr, ##62400
152a4                 | ' 
152a4                 | ' write(text)
152a4     F8 5A B0 FD | 	call	#_hg010b_spin2_write
152a8                 | ' crlf
152a8     54 5C B0 FD | 	call	#_hg010b_spin2_crlf
152ac     A7 F0 03 F6 | 	mov	ptra, fp
152b0     B2 00 A0 FD | 	call	#popregs_
152b4                 | _do_mode_ret
152b4     2D 00 64 FD | 	ret
152b8                 | 
152b8                 | ' 
152b8                 | ' sub do_setwave
152b8                 | _do_setwave
152b8     02 4A 05 F6 | 	mov	COUNT_, #2
152bc     A8 00 A0 FD | 	call	#pushregs_
152c0     18 F0 07 F1 | 	add	ptra, #24
152c4     C0 4D BF FD | 	call	#_pop
152c8     FD 12 02 F6 | 	mov	arg01, result1
152cc     FE 1E 02 F6 | 	mov	local01, result2
152d0     FF 20 02 F6 | 	mov	local02, result3
152d4     A7 12 62 FC | 	wrlong	arg01, fp
152d8     04 4E 05 F1 | 	add	fp, #4
152dc     A7 1E 62 FC | 	wrlong	local01, fp
152e0     04 4E 05 F1 | 	add	fp, #4
152e4     A7 20 62 FC | 	wrlong	local02, fp
152e8     08 4E 85 F1 | 	sub	fp, #8
152ec     98 4D BF FD | 	call	#_pop
152f0     FD 20 02 F6 | 	mov	local02, result1
152f4     0C 4E 05 F1 | 	add	fp, #12
152f8     A7 20 62 FC | 	wrlong	local02, fp
152fc     04 4E 05 F1 | 	add	fp, #4
15300     A7 FC 61 FC | 	wrlong	result2, fp
15304     04 4E 05 F1 | 	add	fp, #4
15308     A7 FE 61 FC | 	wrlong	result3, fp
1530c     08 4E 85 F1 | 	sub	fp, #8
15310     A7 12 02 F6 | 	mov	arg01, fp
15314     0C 4E 85 F1 | 	sub	fp, #12
15318     C0 D3 BF FD | 	call	#_converttoint
1531c     FD 20 02 F6 | 	mov	local02, result1
15320     10 1F 02 F6 | 	mov	local01, local02
15324     01 1E 66 F0 | 	shl	local01, #1
15328     10 1F 02 F1 | 	add	local01, local02
1532c     03 1E 66 F0 | 	shl	local01, #3
15330     34 00 00 FF 
15334     2C E5 05 F1 | 	add	objptr, ##26924
15338     F2 1E 02 F1 | 	add	local01, objptr
1533c     A7 12 02 F6 | 	mov	arg01, fp
15340     34 00 00 FF 
15344     2C E5 85 F1 | 	sub	objptr, ##26924
15348     90 D3 BF FD | 	call	#_converttoint
1534c     04 1E 06 F1 | 	add	local01, #4
15350     0F FB 41 FC | 	wrbyte	result1, local01
15354     A7 F0 03 F6 | 	mov	ptra, fp
15358     B2 00 A0 FD | 	call	#popregs_
1535c                 | _do_setwave_ret
1535c     2D 00 64 FD | 	ret
15360                 | 
15360                 | ' 
15360                 | ' sub do_setsustain
15360                 | _do_setsustain
15360     02 4A 05 F6 | 	mov	COUNT_, #2
15364     A8 00 A0 FD | 	call	#pushregs_
15368     18 F0 07 F1 | 	add	ptra, #24
1536c     18 4D BF FD | 	call	#_pop
15370     FD 12 02 F6 | 	mov	arg01, result1
15374     FE 1E 02 F6 | 	mov	local01, result2
15378     FF 20 02 F6 | 	mov	local02, result3
1537c     A7 12 62 FC | 	wrlong	arg01, fp
15380     04 4E 05 F1 | 	add	fp, #4
15384     A7 1E 62 FC | 	wrlong	local01, fp
15388     04 4E 05 F1 | 	add	fp, #4
1538c     A7 20 62 FC | 	wrlong	local02, fp
15390     08 4E 85 F1 | 	sub	fp, #8
15394     F0 4C BF FD | 	call	#_pop
15398     FD 20 02 F6 | 	mov	local02, result1
1539c     0C 4E 05 F1 | 	add	fp, #12
153a0     A7 20 62 FC | 	wrlong	local02, fp
153a4     04 4E 05 F1 | 	add	fp, #4
153a8     A7 FC 61 FC | 	wrlong	result2, fp
153ac     04 4E 05 F1 | 	add	fp, #4
153b0     A7 FE 61 FC | 	wrlong	result3, fp
153b4     08 4E 85 F1 | 	sub	fp, #8
153b8     A7 12 02 F6 | 	mov	arg01, fp
153bc     0C 4E 85 F1 | 	sub	fp, #12
153c0     18 D3 BF FD | 	call	#_converttoint
153c4     FD 20 02 F6 | 	mov	local02, result1
153c8     10 1F 02 F6 | 	mov	local01, local02
153cc     01 1E 66 F0 | 	shl	local01, #1
153d0     10 1F 02 F1 | 	add	local01, local02
153d4     03 1E 66 F0 | 	shl	local01, #3
153d8     34 00 00 FF 
153dc     2C E5 05 F1 | 	add	objptr, ##26924
153e0     F2 1E 02 F1 | 	add	local01, objptr
153e4     A7 12 02 F6 | 	mov	arg01, fp
153e8     34 00 00 FF 
153ec     2C E5 85 F1 | 	sub	objptr, ##26924
153f0     E8 D2 BF FD | 	call	#_converttoint
153f4     14 1E 06 F1 | 	add	local01, #20
153f8     0F FB 51 FC | 	wrword	result1, local01
153fc     A7 F0 03 F6 | 	mov	ptra, fp
15400     B2 00 A0 FD | 	call	#popregs_
15404                 | _do_setsustain_ret
15404     2D 00 64 FD | 	ret
15408                 | 
15408                 | ' 
15408                 | ' sub do_setenv
15408                 | _do_setenv
15408     02 4A 05 F6 | 	mov	COUNT_, #2
1540c     A8 00 A0 FD | 	call	#pushregs_
15410     18 F0 07 F1 | 	add	ptra, #24
15414     70 4C BF FD | 	call	#_pop
15418     FD 12 02 F6 | 	mov	arg01, result1
1541c     FE 1E 02 F6 | 	mov	local01, result2
15420     FF 20 02 F6 | 	mov	local02, result3
15424     A7 12 62 FC | 	wrlong	arg01, fp
15428     04 4E 05 F1 | 	add	fp, #4
1542c     A7 1E 62 FC | 	wrlong	local01, fp
15430     04 4E 05 F1 | 	add	fp, #4
15434     A7 20 62 FC | 	wrlong	local02, fp
15438     08 4E 85 F1 | 	sub	fp, #8
1543c     48 4C BF FD | 	call	#_pop
15440     FD 20 02 F6 | 	mov	local02, result1
15444     0C 4E 05 F1 | 	add	fp, #12
15448     A7 20 62 FC | 	wrlong	local02, fp
1544c     04 4E 05 F1 | 	add	fp, #4
15450     A7 FC 61 FC | 	wrlong	result2, fp
15454     04 4E 05 F1 | 	add	fp, #4
15458     A7 FE 61 FC | 	wrlong	result3, fp
1545c     08 4E 85 F1 | 	sub	fp, #8
15460     A7 12 02 F6 | 	mov	arg01, fp
15464     0C 4E 85 F1 | 	sub	fp, #12
15468     70 D2 BF FD | 	call	#_converttoint
1546c     FD 20 02 F6 | 	mov	local02, result1
15470     10 1F 02 F6 | 	mov	local01, local02
15474     01 1E 66 F0 | 	shl	local01, #1
15478     10 1F 02 F1 | 	add	local01, local02
1547c     03 1E 66 F0 | 	shl	local01, #3
15480     34 00 00 FF 
15484     2C E5 05 F1 | 	add	objptr, ##26924
15488     F2 1E 02 F1 | 	add	local01, objptr
1548c     A7 12 02 F6 | 	mov	arg01, fp
15490     34 00 00 FF 
15494     2C E5 85 F1 | 	sub	objptr, ##26924
15498     40 D2 BF FD | 	call	#_converttoint
1549c     05 1E 06 F1 | 	add	local01, #5
154a0     0F FB 41 FC | 	wrbyte	result1, local01
154a4     A7 F0 03 F6 | 	mov	ptra, fp
154a8     B2 00 A0 FD | 	call	#popregs_
154ac                 | _do_setenv_ret
154ac     2D 00 64 FD | 	ret
154b0                 | 
154b0                 | ' 
154b0                 | ' sub do_setdelay
154b0                 | _do_setdelay
154b0     02 4A 05 F6 | 	mov	COUNT_, #2
154b4     A8 00 A0 FD | 	call	#pushregs_
154b8     18 F0 07 F1 | 	add	ptra, #24
154bc     C8 4B BF FD | 	call	#_pop
154c0     FD 12 02 F6 | 	mov	arg01, result1
154c4     FE 1E 02 F6 | 	mov	local01, result2
154c8     FF 20 02 F6 | 	mov	local02, result3
154cc     A7 12 62 FC | 	wrlong	arg01, fp
154d0     04 4E 05 F1 | 	add	fp, #4
154d4     A7 1E 62 FC | 	wrlong	local01, fp
154d8     04 4E 05 F1 | 	add	fp, #4
154dc     A7 20 62 FC | 	wrlong	local02, fp
154e0     08 4E 85 F1 | 	sub	fp, #8
154e4     A0 4B BF FD | 	call	#_pop
154e8     FD 20 02 F6 | 	mov	local02, result1
154ec     0C 4E 05 F1 | 	add	fp, #12
154f0     A7 20 62 FC | 	wrlong	local02, fp
154f4     04 4E 05 F1 | 	add	fp, #4
154f8     A7 FC 61 FC | 	wrlong	result2, fp
154fc     04 4E 05 F1 | 	add	fp, #4
15500     A7 FE 61 FC | 	wrlong	result3, fp
15504     08 4E 85 F1 | 	sub	fp, #8
15508     A7 12 02 F6 | 	mov	arg01, fp
1550c     0C 4E 85 F1 | 	sub	fp, #12
15510     C8 D1 BF FD | 	call	#_converttoint
15514     FD 20 02 F6 | 	mov	local02, result1
15518     10 1F 02 F6 | 	mov	local01, local02
1551c     01 1E 66 F0 | 	shl	local01, #1
15520     10 1F 02 F1 | 	add	local01, local02
15524     03 1E 66 F0 | 	shl	local01, #3
15528     34 00 00 FF 
1552c     2C E5 05 F1 | 	add	objptr, ##26924
15530     F2 1E 02 F1 | 	add	local01, objptr
15534     A7 12 02 F6 | 	mov	arg01, fp
15538     34 00 00 FF 
1553c     2C E5 85 F1 | 	sub	objptr, ##26924
15540     98 D1 BF FD | 	call	#_converttoint
15544     06 1E 06 F1 | 	add	local01, #6
15548     0F FB 51 FC | 	wrword	result1, local01
1554c     A7 F0 03 F6 | 	mov	ptra, fp
15550     B2 00 A0 FD | 	call	#popregs_
15554                 | _do_setdelay_ret
15554     2D 00 64 FD | 	ret
15558                 | 
15558                 | ' 
15558                 | ' sub do_setlen
15558                 | _do_setlen
15558     02 4A 05 F6 | 	mov	COUNT_, #2
1555c     A8 00 A0 FD | 	call	#pushregs_
15560     18 F0 07 F1 | 	add	ptra, #24
15564     20 4B BF FD | 	call	#_pop
15568     FD 12 02 F6 | 	mov	arg01, result1
1556c     FE 1E 02 F6 | 	mov	local01, result2
15570     FF 20 02 F6 | 	mov	local02, result3
15574     A7 12 62 FC | 	wrlong	arg01, fp
15578     04 4E 05 F1 | 	add	fp, #4
1557c     A7 1E 62 FC | 	wrlong	local01, fp
15580     04 4E 05 F1 | 	add	fp, #4
15584     A7 20 62 FC | 	wrlong	local02, fp
15588     08 4E 85 F1 | 	sub	fp, #8
1558c     F8 4A BF FD | 	call	#_pop
15590     FD 20 02 F6 | 	mov	local02, result1
15594     0C 4E 05 F1 | 	add	fp, #12
15598     A7 20 62 FC | 	wrlong	local02, fp
1559c     04 4E 05 F1 | 	add	fp, #4
155a0     A7 FC 61 FC | 	wrlong	result2, fp
155a4     04 4E 05 F1 | 	add	fp, #4
155a8     A7 FE 61 FC | 	wrlong	result3, fp
155ac     08 4E 85 F1 | 	sub	fp, #8
155b0     A7 12 02 F6 | 	mov	arg01, fp
155b4     0C 4E 85 F1 | 	sub	fp, #12
155b8     20 D1 BF FD | 	call	#_converttoint
155bc     FD 20 02 F6 | 	mov	local02, result1
155c0     10 1F 02 F6 | 	mov	local01, local02
155c4     01 1E 66 F0 | 	shl	local01, #1
155c8     10 1F 02 F1 | 	add	local01, local02
155cc     03 1E 66 F0 | 	shl	local01, #3
155d0     34 00 00 FF 
155d4     2C E5 05 F1 | 	add	objptr, ##26924
155d8     F2 1E 02 F1 | 	add	local01, objptr
155dc     A7 12 02 F6 | 	mov	arg01, fp
155e0     34 00 00 FF 
155e4     2C E5 85 F1 | 	sub	objptr, ##26924
155e8     9C D1 BF FD | 	call	#_converttofloat
155ec     08 1E 06 F1 | 	add	local01, #8
155f0     0F FB 61 FC | 	wrlong	result1, local01
155f4     A7 F0 03 F6 | 	mov	ptra, fp
155f8     B2 00 A0 FD | 	call	#popregs_
155fc                 | _do_setlen_ret
155fc     2D 00 64 FD | 	ret
15600                 | 
15600                 | ' 
15600                 | ' sub do_setvol
15600                 | _do_setvol
15600     02 4A 05 F6 | 	mov	COUNT_, #2
15604     A8 00 A0 FD | 	call	#pushregs_
15608     18 F0 07 F1 | 	add	ptra, #24
1560c     78 4A BF FD | 	call	#_pop
15610     FD 12 02 F6 | 	mov	arg01, result1
15614     FE 1E 02 F6 | 	mov	local01, result2
15618     FF 20 02 F6 | 	mov	local02, result3
1561c     A7 12 62 FC | 	wrlong	arg01, fp
15620     04 4E 05 F1 | 	add	fp, #4
15624     A7 1E 62 FC | 	wrlong	local01, fp
15628     04 4E 05 F1 | 	add	fp, #4
1562c     A7 20 62 FC | 	wrlong	local02, fp
15630     08 4E 85 F1 | 	sub	fp, #8
15634     50 4A BF FD | 	call	#_pop
15638     FD 20 02 F6 | 	mov	local02, result1
1563c     0C 4E 05 F1 | 	add	fp, #12
15640     A7 20 62 FC | 	wrlong	local02, fp
15644     04 4E 05 F1 | 	add	fp, #4
15648     A7 FC 61 FC | 	wrlong	result2, fp
1564c     04 4E 05 F1 | 	add	fp, #4
15650     A7 FE 61 FC | 	wrlong	result3, fp
15654     08 4E 85 F1 | 	sub	fp, #8
15658     A7 12 02 F6 | 	mov	arg01, fp
1565c     0C 4E 85 F1 | 	sub	fp, #12
15660     78 D0 BF FD | 	call	#_converttoint
15664     FD 20 02 F6 | 	mov	local02, result1
15668     10 1F 02 F6 | 	mov	local01, local02
1566c     01 1E 66 F0 | 	shl	local01, #1
15670     10 1F 02 F1 | 	add	local01, local02
15674     03 1E 66 F0 | 	shl	local01, #3
15678     34 00 00 FF 
1567c     2C E5 05 F1 | 	add	objptr, ##26924
15680     F2 1E 02 F1 | 	add	local01, objptr
15684     A7 12 02 F6 | 	mov	arg01, fp
15688     34 00 00 FF 
1568c     2C E5 85 F1 | 	sub	objptr, ##26924
15690     F4 D0 BF FD | 	call	#_converttofloat
15694     0C 1E 06 F1 | 	add	local01, #12
15698     0F FB 61 FC | 	wrlong	result1, local01
1569c     A7 F0 03 F6 | 	mov	ptra, fp
156a0     B2 00 A0 FD | 	call	#popregs_
156a4                 | _do_setvol_ret
156a4     2D 00 64 FD | 	ret
156a8                 | 
156a8                 | ' 
156a8                 | ' sub do_setpan
156a8                 | _do_setpan
156a8     02 4A 05 F6 | 	mov	COUNT_, #2
156ac     A8 00 A0 FD | 	call	#pushregs_
156b0     18 F0 07 F1 | 	add	ptra, #24
156b4     D0 49 BF FD | 	call	#_pop
156b8     FD 12 02 F6 | 	mov	arg01, result1
156bc     FE 1E 02 F6 | 	mov	local01, result2
156c0     FF 20 02 F6 | 	mov	local02, result3
156c4     A7 12 62 FC | 	wrlong	arg01, fp
156c8     04 4E 05 F1 | 	add	fp, #4
156cc     A7 1E 62 FC | 	wrlong	local01, fp
156d0     04 4E 05 F1 | 	add	fp, #4
156d4     A7 20 62 FC | 	wrlong	local02, fp
156d8     08 4E 85 F1 | 	sub	fp, #8
156dc     A8 49 BF FD | 	call	#_pop
156e0     FD 20 02 F6 | 	mov	local02, result1
156e4     0C 4E 05 F1 | 	add	fp, #12
156e8     A7 20 62 FC | 	wrlong	local02, fp
156ec     04 4E 05 F1 | 	add	fp, #4
156f0     A7 FC 61 FC | 	wrlong	result2, fp
156f4     04 4E 05 F1 | 	add	fp, #4
156f8     A7 FE 61 FC | 	wrlong	result3, fp
156fc     08 4E 85 F1 | 	sub	fp, #8
15700     A7 12 02 F6 | 	mov	arg01, fp
15704     0C 4E 85 F1 | 	sub	fp, #12
15708     D0 CF BF FD | 	call	#_converttoint
1570c     FD 20 02 F6 | 	mov	local02, result1
15710     10 1F 02 F6 | 	mov	local01, local02
15714     01 1E 66 F0 | 	shl	local01, #1
15718     10 1F 02 F1 | 	add	local01, local02
1571c     03 1E 66 F0 | 	shl	local01, #3
15720     34 00 00 FF 
15724     2C E5 05 F1 | 	add	objptr, ##26924
15728     F2 1E 02 F1 | 	add	local01, objptr
1572c     A7 12 02 F6 | 	mov	arg01, fp
15730     34 00 00 FF 
15734     2C E5 85 F1 | 	sub	objptr, ##26924
15738     4C D0 BF FD | 	call	#_converttofloat
1573c     10 1E 06 F1 | 	add	local01, #16
15740     0F FB 61 FC | 	wrlong	result1, local01
15744     A7 F0 03 F6 | 	mov	ptra, fp
15748     B2 00 A0 FD | 	call	#popregs_
1574c                 | _do_setpan_ret
1574c     2D 00 64 FD | 	ret
15750                 | 
15750                 | ' 
15750                 | ' 
15750                 | ' sub do_pinwrite
15750                 | _do_pinwrite
15750     01 4A 05 F6 | 	mov	COUNT_, #1
15754     A8 00 A0 FD | 	call	#pushregs_
15758     18 F0 07 F1 | 	add	ptra, #24
1575c     28 49 BF FD | 	call	#_pop
15760     FD 14 02 F6 | 	mov	arg02, result1
15764     FE 12 02 F6 | 	mov	arg01, result2
15768     FF 1E 02 F6 | 	mov	local01, result3
1576c     A7 14 62 FC | 	wrlong	arg02, fp
15770     04 4E 05 F1 | 	add	fp, #4
15774     A7 12 62 FC | 	wrlong	arg01, fp
15778     04 4E 05 F1 | 	add	fp, #4
1577c     A7 1E 62 FC | 	wrlong	local01, fp
15780     08 4E 85 F1 | 	sub	fp, #8
15784     00 49 BF FD | 	call	#_pop
15788     FF 1E 02 F6 | 	mov	local01, result3
1578c     0C 4E 05 F1 | 	add	fp, #12
15790     A7 FA 61 FC | 	wrlong	result1, fp
15794     04 4E 05 F1 | 	add	fp, #4
15798     A7 FC 61 FC | 	wrlong	result2, fp
1579c     04 4E 05 F1 | 	add	fp, #4
157a0     A7 1E 62 FC | 	wrlong	local01, fp
157a4     08 4E 85 F1 | 	sub	fp, #8
157a8     A7 12 02 F6 | 	mov	arg01, fp
157ac     0C 4E 85 F1 | 	sub	fp, #12
157b0     28 CF BF FD | 	call	#_converttoint
157b4     FD 1E 02 F6 | 	mov	local01, result1
157b8     A7 12 02 F6 | 	mov	arg01, fp
157bc     1C CF BF FD | 	call	#_converttoint
157c0     FD 14 02 F6 | 	mov	arg02, result1
157c4     0F 13 02 F6 | 	mov	arg01, local01
157c8     28 68 B0 FD | 	call	#__system___pinwrite
157cc     A7 F0 03 F6 | 	mov	ptra, fp
157d0     B2 00 A0 FD | 	call	#popregs_
157d4                 | _do_pinwrite_ret
157d4     2D 00 64 FD | 	ret
157d8                 | 
157d8                 | ' 
157d8                 | ' sub do_pinfloat
157d8                 | _do_pinfloat
157d8     00 4A 05 F6 | 	mov	COUNT_, #0
157dc     A8 00 A0 FD | 	call	#pushregs_
157e0     0C F0 07 F1 | 	add	ptra, #12
157e4     A0 48 BF FD | 	call	#_pop
157e8     A7 FA 61 FC | 	wrlong	result1, fp
157ec     04 4E 05 F1 | 	add	fp, #4
157f0     A7 FC 61 FC | 	wrlong	result2, fp
157f4     04 4E 05 F1 | 	add	fp, #4
157f8     A7 FE 61 FC | 	wrlong	result3, fp
157fc     08 4E 85 F1 | 	sub	fp, #8
15800     A7 12 02 F6 | 	mov	arg01, fp
15804     D4 CE BF FD | 	call	#_converttoint
15808     50 FA 61 FD | 	fltl	result1
1580c     A7 F0 03 F6 | 	mov	ptra, fp
15810     B2 00 A0 FD | 	call	#popregs_
15814                 | _do_pinfloat_ret
15814     2D 00 64 FD | 	ret
15818                 | 
15818                 | ' 
15818                 | ' sub do_pinlo
15818                 | _do_pinlo
15818     00 4A 05 F6 | 	mov	COUNT_, #0
1581c     A8 00 A0 FD | 	call	#pushregs_
15820     0C F0 07 F1 | 	add	ptra, #12
15824     60 48 BF FD | 	call	#_pop
15828     A7 FA 61 FC | 	wrlong	result1, fp
1582c     04 4E 05 F1 | 	add	fp, #4
15830     A7 FC 61 FC | 	wrlong	result2, fp
15834     04 4E 05 F1 | 	add	fp, #4
15838     A7 FE 61 FC | 	wrlong	result3, fp
1583c     08 4E 85 F1 | 	sub	fp, #8
15840     A7 12 02 F6 | 	mov	arg01, fp
15844     94 CE BF FD | 	call	#_converttoint
15848     58 FA 61 FD | 	drvl	result1
1584c     A7 F0 03 F6 | 	mov	ptra, fp
15850     B2 00 A0 FD | 	call	#popregs_
15854                 | _do_pinlo_ret
15854     2D 00 64 FD | 	ret
15858                 | 
15858                 | ' 
15858                 | ' sub do_pinhi
15858                 | _do_pinhi
15858     00 4A 05 F6 | 	mov	COUNT_, #0
1585c     A8 00 A0 FD | 	call	#pushregs_
15860     0C F0 07 F1 | 	add	ptra, #12
15864     20 48 BF FD | 	call	#_pop
15868     A7 FA 61 FC | 	wrlong	result1, fp
1586c     04 4E 05 F1 | 	add	fp, #4
15870     A7 FC 61 FC | 	wrlong	result2, fp
15874     04 4E 05 F1 | 	add	fp, #4
15878     A7 FE 61 FC | 	wrlong	result3, fp
1587c     08 4E 85 F1 | 	sub	fp, #8
15880     A7 12 02 F6 | 	mov	arg01, fp
15884     54 CE BF FD | 	call	#_converttoint
15888     59 FA 61 FD | 	drvh	result1
1588c     A7 F0 03 F6 | 	mov	ptra, fp
15890     B2 00 A0 FD | 	call	#popregs_
15894                 | _do_pinhi_ret
15894     2D 00 64 FD | 	ret
15898                 | 
15898                 | ' 
15898                 | ' sub do_pintoggle
15898                 | _do_pintoggle
15898     00 4A 05 F6 | 	mov	COUNT_, #0
1589c     A8 00 A0 FD | 	call	#pushregs_
158a0     0C F0 07 F1 | 	add	ptra, #12
158a4     E0 47 BF FD | 	call	#_pop
158a8     A7 FA 61 FC | 	wrlong	result1, fp
158ac     04 4E 05 F1 | 	add	fp, #4
158b0     A7 FC 61 FC | 	wrlong	result2, fp
158b4     04 4E 05 F1 | 	add	fp, #4
158b8     A7 FE 61 FC | 	wrlong	result3, fp
158bc     08 4E 85 F1 | 	sub	fp, #8
158c0     A7 12 02 F6 | 	mov	arg01, fp
158c4     14 CE BF FD | 	call	#_converttoint
158c8     5F FA 61 FD | 	drvnot	result1
158cc     A7 F0 03 F6 | 	mov	ptra, fp
158d0     B2 00 A0 FD | 	call	#popregs_
158d4                 | _do_pintoggle_ret
158d4     2D 00 64 FD | 	ret
158d8                 | 
158d8                 | ' 
158d8                 | ' 
158d8                 | ' sub do_pinstart
158d8                 | _do_pinstart
158d8     03 4A 05 F6 | 	mov	COUNT_, #3
158dc     A8 00 A0 FD | 	call	#pushregs_
158e0     30 F0 07 F1 | 	add	ptra, #48
158e4     A0 47 BF FD | 	call	#_pop
158e8     FD 16 02 F6 | 	mov	arg03, result1
158ec     FE 14 02 F6 | 	mov	arg02, result2
158f0     FF 18 02 F6 | 	mov	arg04, result3
158f4     A7 16 62 FC | 	wrlong	arg03, fp
158f8     04 4E 05 F1 | 	add	fp, #4
158fc     A7 14 62 FC | 	wrlong	arg02, fp
15900     04 4E 05 F1 | 	add	fp, #4
15904     A7 18 62 FC | 	wrlong	arg04, fp
15908     08 4E 85 F1 | 	sub	fp, #8
1590c     78 47 BF FD | 	call	#_pop
15910     FD 16 02 F6 | 	mov	arg03, result1
15914     FE 14 02 F6 | 	mov	arg02, result2
15918     FF 18 02 F6 | 	mov	arg04, result3
1591c     0C 4E 05 F1 | 	add	fp, #12
15920     A7 16 62 FC | 	wrlong	arg03, fp
15924     04 4E 05 F1 | 	add	fp, #4
15928     A7 14 62 FC | 	wrlong	arg02, fp
1592c     04 4E 05 F1 | 	add	fp, #4
15930     A7 18 62 FC | 	wrlong	arg04, fp
15934     14 4E 85 F1 | 	sub	fp, #20
15938     4C 47 BF FD | 	call	#_pop
1593c     FD 16 02 F6 | 	mov	arg03, result1
15940     FE 14 02 F6 | 	mov	arg02, result2
15944     FF 18 02 F6 | 	mov	arg04, result3
15948     18 4E 05 F1 | 	add	fp, #24
1594c     A7 16 62 FC | 	wrlong	arg03, fp
15950     04 4E 05 F1 | 	add	fp, #4
15954     A7 14 62 FC | 	wrlong	arg02, fp
15958     04 4E 05 F1 | 	add	fp, #4
1595c     A7 18 62 FC | 	wrlong	arg04, fp
15960     20 4E 85 F1 | 	sub	fp, #32
15964     20 47 BF FD | 	call	#_pop
15968     FF 16 02 F6 | 	mov	arg03, result3
1596c     24 4E 05 F1 | 	add	fp, #36
15970     A7 FA 61 FC | 	wrlong	result1, fp
15974     04 4E 05 F1 | 	add	fp, #4
15978     A7 FC 61 FC | 	wrlong	result2, fp
1597c     04 4E 05 F1 | 	add	fp, #4
15980     A7 16 62 FC | 	wrlong	arg03, fp
15984     08 4E 85 F1 | 	sub	fp, #8
15988     A7 12 02 F6 | 	mov	arg01, fp
1598c     24 4E 85 F1 | 	sub	fp, #36
15990     48 CD BF FD | 	call	#_converttoint
15994     FD 1E 02 F6 | 	mov	local01, result1
15998     18 4E 05 F1 | 	add	fp, #24
1599c     A7 12 02 F6 | 	mov	arg01, fp
159a0     18 4E 85 F1 | 	sub	fp, #24
159a4     34 CD BF FD | 	call	#_converttoint
159a8     FD 20 02 F6 | 	mov	local02, result1
159ac     0C 4E 05 F1 | 	add	fp, #12
159b0     A7 12 02 F6 | 	mov	arg01, fp
159b4     0C 4E 85 F1 | 	sub	fp, #12
159b8     20 CD BF FD | 	call	#_converttoint
159bc     FD 22 02 F6 | 	mov	local03, result1
159c0     A7 12 02 F6 | 	mov	arg01, fp
159c4     14 CD BF FD | 	call	#_converttoint
159c8     40 1E 62 FD | 	dirl	local01
159cc     0F 21 02 FC | 	wrpin	local02, local01
159d0     0F 23 12 FC | 	wxpin	local03, local01
159d4     0F FB 21 FC | 	wypin	result1, local01
159d8     41 1E 62 FD | 	dirh	local01
159dc     A7 F0 03 F6 | 	mov	ptra, fp
159e0     B2 00 A0 FD | 	call	#popregs_
159e4                 | _do_pinstart_ret
159e4     2D 00 64 FD | 	ret
159e8                 | 
159e8                 | ' 
159e8                 | ' 
159e8                 | ' sub do_wrpin
159e8                 | _do_wrpin
159e8     01 4A 05 F6 | 	mov	COUNT_, #1
159ec     A8 00 A0 FD | 	call	#pushregs_
159f0     18 F0 07 F1 | 	add	ptra, #24
159f4     90 46 BF FD | 	call	#_pop
159f8     FD 14 02 F6 | 	mov	arg02, result1
159fc     FE 12 02 F6 | 	mov	arg01, result2
15a00     FF 1E 02 F6 | 	mov	local01, result3
15a04     A7 14 62 FC | 	wrlong	arg02, fp
15a08     04 4E 05 F1 | 	add	fp, #4
15a0c     A7 12 62 FC | 	wrlong	arg01, fp
15a10     04 4E 05 F1 | 	add	fp, #4
15a14     A7 1E 62 FC | 	wrlong	local01, fp
15a18     08 4E 85 F1 | 	sub	fp, #8
15a1c     68 46 BF FD | 	call	#_pop
15a20     FF 1E 02 F6 | 	mov	local01, result3
15a24     0C 4E 05 F1 | 	add	fp, #12
15a28     A7 FA 61 FC | 	wrlong	result1, fp
15a2c     04 4E 05 F1 | 	add	fp, #4
15a30     A7 FC 61 FC | 	wrlong	result2, fp
15a34     04 4E 05 F1 | 	add	fp, #4
15a38     A7 1E 62 FC | 	wrlong	local01, fp
15a3c     08 4E 85 F1 | 	sub	fp, #8
15a40     A7 12 02 F6 | 	mov	arg01, fp
15a44     0C 4E 85 F1 | 	sub	fp, #12
15a48     90 CC BF FD | 	call	#_converttoint
15a4c     FD 1E 02 F6 | 	mov	local01, result1
15a50     A7 12 02 F6 | 	mov	arg01, fp
15a54     84 CC BF FD | 	call	#_converttoint
15a58     0F FB 01 FC | 	wrpin	result1, local01
15a5c     A7 F0 03 F6 | 	mov	ptra, fp
15a60     B2 00 A0 FD | 	call	#popregs_
15a64                 | _do_wrpin_ret
15a64     2D 00 64 FD | 	ret
15a68                 | 
15a68                 | ' 
15a68                 | ' sub do_wxpin
15a68                 | _do_wxpin
15a68     01 4A 05 F6 | 	mov	COUNT_, #1
15a6c     A8 00 A0 FD | 	call	#pushregs_
15a70     18 F0 07 F1 | 	add	ptra, #24
15a74     10 46 BF FD | 	call	#_pop
15a78     FD 14 02 F6 | 	mov	arg02, result1
15a7c     FE 12 02 F6 | 	mov	arg01, result2
15a80     FF 1E 02 F6 | 	mov	local01, result3
15a84     A7 14 62 FC | 	wrlong	arg02, fp
15a88     04 4E 05 F1 | 	add	fp, #4
15a8c     A7 12 62 FC | 	wrlong	arg01, fp
15a90     04 4E 05 F1 | 	add	fp, #4
15a94     A7 1E 62 FC | 	wrlong	local01, fp
15a98     08 4E 85 F1 | 	sub	fp, #8
15a9c     E8 45 BF FD | 	call	#_pop
15aa0     FF 1E 02 F6 | 	mov	local01, result3
15aa4     0C 4E 05 F1 | 	add	fp, #12
15aa8     A7 FA 61 FC | 	wrlong	result1, fp
15aac     04 4E 05 F1 | 	add	fp, #4
15ab0     A7 FC 61 FC | 	wrlong	result2, fp
15ab4     04 4E 05 F1 | 	add	fp, #4
15ab8     A7 1E 62 FC | 	wrlong	local01, fp
15abc     08 4E 85 F1 | 	sub	fp, #8
15ac0     A7 12 02 F6 | 	mov	arg01, fp
15ac4     0C 4E 85 F1 | 	sub	fp, #12
15ac8     10 CC BF FD | 	call	#_converttoint
15acc     FD 1E 02 F6 | 	mov	local01, result1
15ad0     A7 12 02 F6 | 	mov	arg01, fp
15ad4     04 CC BF FD | 	call	#_converttoint
15ad8     0F FB 11 FC | 	wxpin	result1, local01
15adc     A7 F0 03 F6 | 	mov	ptra, fp
15ae0     B2 00 A0 FD | 	call	#popregs_
15ae4                 | _do_wxpin_ret
15ae4     2D 00 64 FD | 	ret
15ae8                 | 
15ae8                 | ' 
15ae8                 | ' sub do_wypin
15ae8                 | _do_wypin
15ae8     01 4A 05 F6 | 	mov	COUNT_, #1
15aec     A8 00 A0 FD | 	call	#pushregs_
15af0     18 F0 07 F1 | 	add	ptra, #24
15af4     90 45 BF FD | 	call	#_pop
15af8     FD 14 02 F6 | 	mov	arg02, result1
15afc     FE 12 02 F6 | 	mov	arg01, result2
15b00     FF 1E 02 F6 | 	mov	local01, result3
15b04     A7 14 62 FC | 	wrlong	arg02, fp
15b08     04 4E 05 F1 | 	add	fp, #4
15b0c     A7 12 62 FC | 	wrlong	arg01, fp
15b10     04 4E 05 F1 | 	add	fp, #4
15b14     A7 1E 62 FC | 	wrlong	local01, fp
15b18     08 4E 85 F1 | 	sub	fp, #8
15b1c     68 45 BF FD | 	call	#_pop
15b20     FF 1E 02 F6 | 	mov	local01, result3
15b24     0C 4E 05 F1 | 	add	fp, #12
15b28     A7 FA 61 FC | 	wrlong	result1, fp
15b2c     04 4E 05 F1 | 	add	fp, #4
15b30     A7 FC 61 FC | 	wrlong	result2, fp
15b34     04 4E 05 F1 | 	add	fp, #4
15b38     A7 1E 62 FC | 	wrlong	local01, fp
15b3c     08 4E 85 F1 | 	sub	fp, #8
15b40     A7 12 02 F6 | 	mov	arg01, fp
15b44     0C 4E 85 F1 | 	sub	fp, #12
15b48     90 CB BF FD | 	call	#_converttoint
15b4c     FD 1E 02 F6 | 	mov	local01, result1
15b50     A7 12 02 F6 | 	mov	arg01, fp
15b54     84 CB BF FD | 	call	#_converttoint
15b58     0F FB 21 FC | 	wypin	result1, local01
15b5c     A7 F0 03 F6 | 	mov	ptra, fp
15b60     B2 00 A0 FD | 	call	#popregs_
15b64                 | _do_wypin_ret
15b64     2D 00 64 FD | 	ret
15b68                 | 
15b68                 | ' 
15b68                 | ' sub do_position
15b68                 | _do_position
15b68     01 4A 05 F6 | 	mov	COUNT_, #1
15b6c     A8 00 A0 FD | 	call	#pushregs_
15b70     18 F0 07 F1 | 	add	ptra, #24
15b74     10 45 BF FD | 	call	#_pop
15b78     FD 14 02 F6 | 	mov	arg02, result1
15b7c     FE 12 02 F6 | 	mov	arg01, result2
15b80     FF 1E 02 F6 | 	mov	local01, result3
15b84     A7 14 62 FC | 	wrlong	arg02, fp
15b88     04 4E 05 F1 | 	add	fp, #4
15b8c     A7 12 62 FC | 	wrlong	arg01, fp
15b90     04 4E 05 F1 | 	add	fp, #4
15b94     A7 1E 62 FC | 	wrlong	local01, fp
15b98     08 4E 85 F1 | 	sub	fp, #8
15b9c     E8 44 BF FD | 	call	#_pop
15ba0     FF 1E 02 F6 | 	mov	local01, result3
15ba4     0C 4E 05 F1 | 	add	fp, #12
15ba8     A7 FA 61 FC | 	wrlong	result1, fp
15bac     04 4E 05 F1 | 	add	fp, #4
15bb0     A7 FC 61 FC | 	wrlong	result2, fp
15bb4     04 4E 05 F1 | 	add	fp, #4
15bb8     A7 1E 62 FC | 	wrlong	local01, fp
15bbc     08 4E 85 F1 | 	sub	fp, #8
15bc0     A7 12 02 F6 | 	mov	arg01, fp
15bc4     0C 4E 85 F1 | 	sub	fp, #12
15bc8     10 CB BF FD | 	call	#_converttoint
15bcc     FD 1E 02 F6 | 	mov	local01, result1
15bd0     A7 12 02 F6 | 	mov	arg01, fp
15bd4     04 CB BF FD | 	call	#_converttoint
15bd8     FD 14 02 F6 | 	mov	arg02, result1
15bdc     0F 13 02 F6 | 	mov	arg01, local01
15be0     58 4E B0 FD | 	call	#_hg010b_spin2_setcursorpos
15be4     A7 F0 03 F6 | 	mov	ptra, fp
15be8     B2 00 A0 FD | 	call	#popregs_
15bec                 | _do_position_ret
15bec     2D 00 64 FD | 	ret
15bf0                 | 
15bf0                 | ' 
15bf0                 | ' sub do_poke
15bf0                 | _do_poke
15bf0     01 4A 05 F6 | 	mov	COUNT_, #1
15bf4     A8 00 A0 FD | 	call	#pushregs_
15bf8     20 F0 07 F1 | 	add	ptra, #32
15bfc     88 44 BF FD | 	call	#_pop
15c00     FD 14 02 F6 | 	mov	arg02, result1
15c04     FE 12 02 F6 | 	mov	arg01, result2
15c08     FF 1E 02 F6 | 	mov	local01, result3
15c0c     A7 14 62 FC | 	wrlong	arg02, fp
15c10     04 4E 05 F1 | 	add	fp, #4
15c14     A7 12 62 FC | 	wrlong	arg01, fp
15c18     04 4E 05 F1 | 	add	fp, #4
15c1c     A7 1E 62 FC | 	wrlong	local01, fp
15c20     08 4E 85 F1 | 	sub	fp, #8
15c24     60 44 BF FD | 	call	#_pop
15c28     FF 1E 02 F6 | 	mov	local01, result3
15c2c     0C 4E 05 F1 | 	add	fp, #12
15c30     A7 FA 61 FC | 	wrlong	result1, fp
15c34     04 4E 05 F1 | 	add	fp, #4
15c38     A7 FC 61 FC | 	wrlong	result2, fp
15c3c     04 4E 05 F1 | 	add	fp, #4
15c40     A7 1E 62 FC | 	wrlong	local01, fp
15c44     08 4E 85 F1 | 	sub	fp, #8
15c48     A7 12 02 F6 | 	mov	arg01, fp
15c4c     0C 4E 85 F1 | 	sub	fp, #12
15c50     88 CA BF FD | 	call	#_converttoint
15c54     18 4E 05 F1 | 	add	fp, #24
15c58     A7 FA 61 FC | 	wrlong	result1, fp
15c5c     18 4E 85 F1 | 	sub	fp, #24
15c60     A7 12 02 F6 | 	mov	arg01, fp
15c64     74 CA BF FD | 	call	#_converttoint
15c68     1C 4E 05 F1 | 	add	fp, #28
15c6c     A7 FA 61 FC | 	wrlong	result1, fp
15c70                 | ' t1=pop() 'value
15c70                 | ' t2=pop() 
15c70                 | ' a=converttoint(t2) : v=converttoint(t1)
15c70                 | ' if a<$80000 then poke a,v else pspoke a,v
15c70     04 4E 85 F1 | 	sub	fp, #4
15c74     A7 1E 02 FB | 	rdlong	local01, fp
15c78     18 4E 85 F1 | 	sub	fp, #24
15c7c     00 04 00 FF 
15c80     00 1E 16 F2 | 	cmp	local01, ##524288 wc
15c84     1C 00 90 3D |  if_ae	jmp	#LR__1710
15c88     18 4E 05 F1 | 	add	fp, #24
15c8c     A7 12 02 FB | 	rdlong	arg01, fp
15c90     04 4E 05 F1 | 	add	fp, #4
15c94     A7 14 02 FB | 	rdlong	arg02, fp
15c98     1C 4E 85 F1 | 	sub	fp, #28
15c9c     09 15 42 FC | 	wrbyte	arg02, arg01
15ca0     18 00 90 FD | 	jmp	#LR__1711
15ca4                 | LR__1710
15ca4     18 4E 05 F1 | 	add	fp, #24
15ca8     A7 12 02 FB | 	rdlong	arg01, fp
15cac     04 4E 05 F1 | 	add	fp, #4
15cb0     A7 14 02 FB | 	rdlong	arg02, fp
15cb4     1C 4E 85 F1 | 	sub	fp, #28
15cb8     90 2C B0 FD | 	call	#_pspoke
15cbc                 | LR__1711
15cbc     A7 F0 03 F6 | 	mov	ptra, fp
15cc0     B2 00 A0 FD | 	call	#popregs_
15cc4                 | _do_poke_ret
15cc4     2D 00 64 FD | 	ret
15cc8                 | 
15cc8                 | ' 
15cc8                 | ' sub do_dpoke
15cc8                 | _do_dpoke
15cc8     01 4A 05 F6 | 	mov	COUNT_, #1
15ccc     A8 00 A0 FD | 	call	#pushregs_
15cd0     20 F0 07 F1 | 	add	ptra, #32
15cd4     B0 43 BF FD | 	call	#_pop
15cd8     FD 14 02 F6 | 	mov	arg02, result1
15cdc     FE 12 02 F6 | 	mov	arg01, result2
15ce0     FF 1E 02 F6 | 	mov	local01, result3
15ce4     A7 14 62 FC | 	wrlong	arg02, fp
15ce8     04 4E 05 F1 | 	add	fp, #4
15cec     A7 12 62 FC | 	wrlong	arg01, fp
15cf0     04 4E 05 F1 | 	add	fp, #4
15cf4     A7 1E 62 FC | 	wrlong	local01, fp
15cf8     08 4E 85 F1 | 	sub	fp, #8
15cfc     88 43 BF FD | 	call	#_pop
15d00     FF 1E 02 F6 | 	mov	local01, result3
15d04     0C 4E 05 F1 | 	add	fp, #12
15d08     A7 FA 61 FC | 	wrlong	result1, fp
15d0c     04 4E 05 F1 | 	add	fp, #4
15d10     A7 FC 61 FC | 	wrlong	result2, fp
15d14     04 4E 05 F1 | 	add	fp, #4
15d18     A7 1E 62 FC | 	wrlong	local01, fp
15d1c     08 4E 85 F1 | 	sub	fp, #8
15d20     A7 12 02 F6 | 	mov	arg01, fp
15d24     0C 4E 85 F1 | 	sub	fp, #12
15d28     B0 C9 BF FD | 	call	#_converttoint
15d2c     18 4E 05 F1 | 	add	fp, #24
15d30     A7 FA 61 FC | 	wrlong	result1, fp
15d34     18 4E 85 F1 | 	sub	fp, #24
15d38     A7 12 02 F6 | 	mov	arg01, fp
15d3c     9C C9 BF FD | 	call	#_converttoint
15d40     1C 4E 05 F1 | 	add	fp, #28
15d44     A7 FA 61 FC | 	wrlong	result1, fp
15d48                 | ' t1=pop() 'value
15d48                 | ' t2=pop() 
15d48                 | ' a=converttoint(t2) : v=converttoint(t1)
15d48                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
15d48     04 4E 85 F1 | 	sub	fp, #4
15d4c     A7 1E 02 FB | 	rdlong	local01, fp
15d50     18 4E 85 F1 | 	sub	fp, #24
15d54     00 04 00 FF 
15d58     00 1E 16 F2 | 	cmp	local01, ##524288 wc
15d5c     1C 00 90 3D |  if_ae	jmp	#LR__1720
15d60     18 4E 05 F1 | 	add	fp, #24
15d64     A7 12 02 FB | 	rdlong	arg01, fp
15d68     04 4E 05 F1 | 	add	fp, #4
15d6c     A7 14 02 FB | 	rdlong	arg02, fp
15d70     1C 4E 85 F1 | 	sub	fp, #28
15d74     09 15 52 FC | 	wrword	arg02, arg01
15d78     18 00 90 FD | 	jmp	#LR__1721
15d7c                 | LR__1720
15d7c     18 4E 05 F1 | 	add	fp, #24
15d80     A7 12 02 FB | 	rdlong	arg01, fp
15d84     04 4E 05 F1 | 	add	fp, #4
15d88     A7 14 02 FB | 	rdlong	arg02, fp
15d8c     1C 4E 85 F1 | 	sub	fp, #28
15d90     70 2B B0 FD | 	call	#_psdpoke
15d94                 | LR__1721
15d94     A7 F0 03 F6 | 	mov	ptra, fp
15d98     B2 00 A0 FD | 	call	#popregs_
15d9c                 | _do_dpoke_ret
15d9c     2D 00 64 FD | 	ret
15da0                 | 
15da0                 | ' 
15da0                 | ' sub do_lpoke
15da0                 | _do_lpoke
15da0     01 4A 05 F6 | 	mov	COUNT_, #1
15da4     A8 00 A0 FD | 	call	#pushregs_
15da8     20 F0 07 F1 | 	add	ptra, #32
15dac     D8 42 BF FD | 	call	#_pop
15db0     FD 14 02 F6 | 	mov	arg02, result1
15db4     FE 12 02 F6 | 	mov	arg01, result2
15db8     FF 1E 02 F6 | 	mov	local01, result3
15dbc     A7 14 62 FC | 	wrlong	arg02, fp
15dc0     04 4E 05 F1 | 	add	fp, #4
15dc4     A7 12 62 FC | 	wrlong	arg01, fp
15dc8     04 4E 05 F1 | 	add	fp, #4
15dcc     A7 1E 62 FC | 	wrlong	local01, fp
15dd0     08 4E 85 F1 | 	sub	fp, #8
15dd4     B0 42 BF FD | 	call	#_pop
15dd8     FF 1E 02 F6 | 	mov	local01, result3
15ddc     0C 4E 05 F1 | 	add	fp, #12
15de0     A7 FA 61 FC | 	wrlong	result1, fp
15de4     04 4E 05 F1 | 	add	fp, #4
15de8     A7 FC 61 FC | 	wrlong	result2, fp
15dec     04 4E 05 F1 | 	add	fp, #4
15df0     A7 1E 62 FC | 	wrlong	local01, fp
15df4     08 4E 85 F1 | 	sub	fp, #8
15df8     A7 12 02 F6 | 	mov	arg01, fp
15dfc     0C 4E 85 F1 | 	sub	fp, #12
15e00     D8 C8 BF FD | 	call	#_converttoint
15e04     18 4E 05 F1 | 	add	fp, #24
15e08     A7 FA 61 FC | 	wrlong	result1, fp
15e0c     18 4E 85 F1 | 	sub	fp, #24
15e10     A7 12 02 F6 | 	mov	arg01, fp
15e14     C4 C8 BF FD | 	call	#_converttoint
15e18     1C 4E 05 F1 | 	add	fp, #28
15e1c     A7 FA 61 FC | 	wrlong	result1, fp
15e20                 | ' t1=pop() 'value
15e20                 | ' t2=pop() 
15e20                 | ' a=converttoint(t2) : v=converttoint(t1)
15e20                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
15e20     04 4E 85 F1 | 	sub	fp, #4
15e24     A7 1E 02 FB | 	rdlong	local01, fp
15e28     18 4E 85 F1 | 	sub	fp, #24
15e2c     00 04 00 FF 
15e30     00 1E 16 F2 | 	cmp	local01, ##524288 wc
15e34     1C 00 90 3D |  if_ae	jmp	#LR__1730
15e38     18 4E 05 F1 | 	add	fp, #24
15e3c     A7 12 02 FB | 	rdlong	arg01, fp
15e40     04 4E 05 F1 | 	add	fp, #4
15e44     A7 14 02 FB | 	rdlong	arg02, fp
15e48     1C 4E 85 F1 | 	sub	fp, #28
15e4c     09 15 62 FC | 	wrlong	arg02, arg01
15e50     18 00 90 FD | 	jmp	#LR__1731
15e54                 | LR__1730
15e54     18 4E 05 F1 | 	add	fp, #24
15e58     A7 12 02 FB | 	rdlong	arg01, fp
15e5c     04 4E 05 F1 | 	add	fp, #4
15e60     A7 14 02 FB | 	rdlong	arg02, fp
15e64     1C 4E 85 F1 | 	sub	fp, #28
15e68     50 2A B0 FD | 	call	#_pslpoke
15e6c                 | LR__1731
15e6c     A7 F0 03 F6 | 	mov	ptra, fp
15e70     B2 00 A0 FD | 	call	#popregs_
15e74                 | _do_lpoke_ret
15e74     2D 00 64 FD | 	ret
15e78                 | 
15e78                 | ' 
15e78                 | ' sub do_peek
15e78                 | _do_peek
15e78     00 4A 05 F6 | 	mov	COUNT_, #0
15e7c     A8 00 A0 FD | 	call	#pushregs_
15e80     14 F0 07 F1 | 	add	ptra, #20
15e84     00 42 BF FD | 	call	#_pop
15e88     A7 FA 61 FC | 	wrlong	result1, fp
15e8c     04 4E 05 F1 | 	add	fp, #4
15e90     A7 FC 61 FC | 	wrlong	result2, fp
15e94     04 4E 05 F1 | 	add	fp, #4
15e98     A7 FE 61 FC | 	wrlong	result3, fp
15e9c     08 4E 85 F1 | 	sub	fp, #8
15ea0     A7 12 02 F6 | 	mov	arg01, fp
15ea4     34 C8 BF FD | 	call	#_converttoint
15ea8     0C 4E 05 F1 | 	add	fp, #12
15eac     A7 FA 61 FC | 	wrlong	result1, fp
15eb0                 | ' t1=pop()
15eb0                 | ' a=converttoint(t1)
15eb0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
15eb0     0C 4E 85 F1 | 	sub	fp, #12
15eb4     00 04 00 FF 
15eb8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15ebc     1C 00 90 3D |  if_ae	jmp	#LR__1740
15ec0     0C 4E 05 F1 | 	add	fp, #12
15ec4     A7 12 02 FB | 	rdlong	arg01, fp
15ec8     09 FB C1 FA | 	rdbyte	result1, arg01
15ecc     04 4E 05 F1 | 	add	fp, #4
15ed0     A7 FA 61 FC | 	wrlong	result1, fp
15ed4     10 4E 85 F1 | 	sub	fp, #16
15ed8     20 00 90 FD | 	jmp	#LR__1741
15edc                 | LR__1740
15edc     0C 4E 05 F1 | 	add	fp, #12
15ee0     A7 12 02 FB | 	rdlong	arg01, fp
15ee4     0C 4E 85 F1 | 	sub	fp, #12
15ee8     A8 2A B0 FD | 	call	#_pspeek
15eec     FD FA E1 F8 | 	getbyte	result1, result1, #0
15ef0     10 4E 05 F1 | 	add	fp, #16
15ef4     A7 FA 61 FC | 	wrlong	result1, fp
15ef8     10 4E 85 F1 | 	sub	fp, #16
15efc                 | LR__1741
15efc     08 4E 05 F1 | 	add	fp, #8
15f00     A7 3A 68 FC | 	wrlong	#29, fp
15f04     08 4E 05 F1 | 	add	fp, #8
15f08     A7 12 02 FB | 	rdlong	arg01, fp
15f0c     10 4E 85 F1 | 	sub	fp, #16
15f10     A7 12 62 FC | 	wrlong	arg01, fp
15f14     A7 12 02 F6 | 	mov	arg01, fp
15f18     04 42 BF FD | 	call	#_push
15f1c     A7 F0 03 F6 | 	mov	ptra, fp
15f20     B2 00 A0 FD | 	call	#popregs_
15f24                 | _do_peek_ret
15f24     2D 00 64 FD | 	ret
15f28                 | 
15f28                 | ' 
15f28                 | ' sub do_dpeek
15f28                 | _do_dpeek
15f28     00 4A 05 F6 | 	mov	COUNT_, #0
15f2c     A8 00 A0 FD | 	call	#pushregs_
15f30     14 F0 07 F1 | 	add	ptra, #20
15f34     50 41 BF FD | 	call	#_pop
15f38     A7 FA 61 FC | 	wrlong	result1, fp
15f3c     04 4E 05 F1 | 	add	fp, #4
15f40     A7 FC 61 FC | 	wrlong	result2, fp
15f44     04 4E 05 F1 | 	add	fp, #4
15f48     A7 FE 61 FC | 	wrlong	result3, fp
15f4c     08 4E 85 F1 | 	sub	fp, #8
15f50     A7 12 02 F6 | 	mov	arg01, fp
15f54     84 C7 BF FD | 	call	#_converttoint
15f58     0C 4E 05 F1 | 	add	fp, #12
15f5c     A7 FA 61 FC | 	wrlong	result1, fp
15f60                 | ' t1=pop()
15f60                 | ' a=converttoint(t1)
15f60                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
15f60     0C 4E 85 F1 | 	sub	fp, #12
15f64     00 04 00 FF 
15f68     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15f6c     1C 00 90 3D |  if_ae	jmp	#LR__1750
15f70     0C 4E 05 F1 | 	add	fp, #12
15f74     A7 12 02 FB | 	rdlong	arg01, fp
15f78     09 FB E1 FA | 	rdword	result1, arg01
15f7c     04 4E 05 F1 | 	add	fp, #4
15f80     A7 FA 61 FC | 	wrlong	result1, fp
15f84     10 4E 85 F1 | 	sub	fp, #16
15f88     1C 00 90 FD | 	jmp	#LR__1751
15f8c                 | LR__1750
15f8c     0C 4E 05 F1 | 	add	fp, #12
15f90     A7 12 02 FB | 	rdlong	arg01, fp
15f94     0C 4E 85 F1 | 	sub	fp, #12
15f98     A8 2A B0 FD | 	call	#_psdpeek
15f9c     10 4E 05 F1 | 	add	fp, #16
15fa0     A7 FA 61 FC | 	wrlong	result1, fp
15fa4     10 4E 85 F1 | 	sub	fp, #16
15fa8                 | LR__1751
15fa8     08 4E 05 F1 | 	add	fp, #8
15fac     A7 3A 68 FC | 	wrlong	#29, fp
15fb0     08 4E 05 F1 | 	add	fp, #8
15fb4     A7 12 02 FB | 	rdlong	arg01, fp
15fb8     10 4E 85 F1 | 	sub	fp, #16
15fbc     A7 12 62 FC | 	wrlong	arg01, fp
15fc0     A7 12 02 F6 | 	mov	arg01, fp
15fc4     58 41 BF FD | 	call	#_push
15fc8     A7 F0 03 F6 | 	mov	ptra, fp
15fcc     B2 00 A0 FD | 	call	#popregs_
15fd0                 | _do_dpeek_ret
15fd0     2D 00 64 FD | 	ret
15fd4                 | 
15fd4                 | ' 
15fd4                 | ' 
15fd4                 | ' sub do_lpeek
15fd4                 | _do_lpeek
15fd4     00 4A 05 F6 | 	mov	COUNT_, #0
15fd8     A8 00 A0 FD | 	call	#pushregs_
15fdc     14 F0 07 F1 | 	add	ptra, #20
15fe0     A4 40 BF FD | 	call	#_pop
15fe4     A7 FA 61 FC | 	wrlong	result1, fp
15fe8     04 4E 05 F1 | 	add	fp, #4
15fec     A7 FC 61 FC | 	wrlong	result2, fp
15ff0     04 4E 05 F1 | 	add	fp, #4
15ff4     A7 FE 61 FC | 	wrlong	result3, fp
15ff8     08 4E 85 F1 | 	sub	fp, #8
15ffc     A7 12 02 F6 | 	mov	arg01, fp
16000     D8 C6 BF FD | 	call	#_converttoint
16004     0C 4E 05 F1 | 	add	fp, #12
16008     A7 FA 61 FC | 	wrlong	result1, fp
1600c                 | ' t1=pop()
1600c                 | ' a=converttoint(t1)
1600c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
1600c     0C 4E 85 F1 | 	sub	fp, #12
16010     00 04 00 FF 
16014     00 FA 15 F2 | 	cmp	result1, ##524288 wc
16018     1C 00 90 3D |  if_ae	jmp	#LR__1760
1601c     0C 4E 05 F1 | 	add	fp, #12
16020     A7 12 02 FB | 	rdlong	arg01, fp
16024     09 FB 01 FB | 	rdlong	result1, arg01
16028     04 4E 05 F1 | 	add	fp, #4
1602c     A7 FA 61 FC | 	wrlong	result1, fp
16030     10 4E 85 F1 | 	sub	fp, #16
16034     1C 00 90 FD | 	jmp	#LR__1761
16038                 | LR__1760
16038     0C 4E 05 F1 | 	add	fp, #12
1603c     A7 12 02 FB | 	rdlong	arg01, fp
16040     0C 4E 85 F1 | 	sub	fp, #12
16044     A4 29 B0 FD | 	call	#_pslpeek
16048     10 4E 05 F1 | 	add	fp, #16
1604c     A7 FA 61 FC | 	wrlong	result1, fp
16050     10 4E 85 F1 | 	sub	fp, #16
16054                 | LR__1761
16054     08 4E 05 F1 | 	add	fp, #8
16058     A7 3A 68 FC | 	wrlong	#29, fp
1605c     08 4E 05 F1 | 	add	fp, #8
16060     A7 12 02 FB | 	rdlong	arg01, fp
16064     10 4E 85 F1 | 	sub	fp, #16
16068     A7 12 62 FC | 	wrlong	arg01, fp
1606c     A7 12 02 F6 | 	mov	arg01, fp
16070     AC 40 BF FD | 	call	#_push
16074     A7 F0 03 F6 | 	mov	ptra, fp
16078     B2 00 A0 FD | 	call	#popregs_
1607c                 | _do_lpeek_ret
1607c     2D 00 64 FD | 	ret
16080                 | 
16080                 | ' 
16080                 | ' sub do_fre
16080                 | _do_fre
16080     01 4A 05 F6 | 	mov	COUNT_, #1
16084     A8 00 A0 FD | 	call	#pushregs_
16088     0C F0 07 F1 | 	add	ptra, #12
1608c     7B 00 00 FF 
16090     5C E4 05 F1 | 	add	objptr, ##63068
16094     F2 12 02 FB | 	rdlong	arg01, objptr
16098     18 00 00 FF 
1609c     1C E4 85 F1 | 	sub	objptr, ##12316
160a0     F2 1E 02 FB | 	rdlong	local01, objptr
160a4     0F 13 82 F1 | 	sub	arg01, local01
160a8     18 00 00 FF 
160ac     B4 E4 05 F1 | 	add	objptr, ##12468
160b0     F2 12 62 FC | 	wrlong	arg01, objptr
160b4     08 4E 05 F1 | 	add	fp, #8
160b8     A7 3A 68 FC | 	wrlong	#29, fp
160bc     08 4E 85 F1 | 	sub	fp, #8
160c0     F2 1E 02 FB | 	rdlong	local01, objptr
160c4     7B 00 00 FF 
160c8     F4 E4 85 F1 | 	sub	objptr, ##63220
160cc     A7 1E 62 FC | 	wrlong	local01, fp
160d0     A7 12 02 F6 | 	mov	arg01, fp
160d4     48 40 BF FD | 	call	#_push
160d8     A7 F0 03 F6 | 	mov	ptra, fp
160dc     B2 00 A0 FD | 	call	#popregs_
160e0                 | _do_fre_ret
160e0     2D 00 64 FD | 	ret
160e4                 | 
160e4                 | ' 
160e4                 | ' sub do_adr
160e4                 | _do_adr
160e4                 | _do_adr_ret
160e4     2D 00 64 FD | 	ret
160e8                 | 
160e8                 | ' 
160e8                 | ' sub do_getnotevalue
160e8                 | _do_getnotevalue
160e8     01 4A 05 F6 | 	mov	COUNT_, #1
160ec     A8 00 A0 FD | 	call	#pushregs_
160f0     1C F0 07 F1 | 	add	ptra, #28
160f4     90 3F BF FD | 	call	#_pop
160f8     FF 14 02 F6 | 	mov	arg02, result3
160fc     10 4E 05 F1 | 	add	fp, #16
16100     A7 FA 61 FC | 	wrlong	result1, fp
16104     04 4E 05 F1 | 	add	fp, #4
16108     A7 FC 61 FC | 	wrlong	result2, fp
1610c     04 4E 05 F1 | 	add	fp, #4
16110     A7 14 62 FC | 	wrlong	arg02, fp
16114     08 4E 85 F1 | 	sub	fp, #8
16118     A7 12 02 F6 | 	mov	arg01, fp
1611c     10 4E 85 F1 | 	sub	fp, #16
16120     B8 C5 BF FD | 	call	#_converttoint
16124     FD 14 52 F6 | 	abs	arg02, result1 wc
16128     0C 14 16 FD | 	qdiv	arg02, #12
1612c     0C 4E 05 F1 | 	add	fp, #12
16130     A7 FA 61 FC | 	wrlong	result1, fp
16134     34 00 00 FF 
16138     CC E4 05 F1 | 	add	objptr, ##26828
1613c     08 4E 85 F1 | 	sub	fp, #8
16140     19 14 62 FD | 	getqy	arg02
16144     0A 15 82 F6 | 	negc	arg02, arg02
16148     02 14 66 F0 | 	shl	arg02, #2
1614c     F2 14 02 F1 | 	add	arg02, objptr
16150     0A 15 02 FB | 	rdlong	arg02, arg02
16154     A7 14 62 FC | 	wrlong	arg02, fp
16158     08 4E 05 F1 | 	add	fp, #8
1615c     A7 14 02 FB | 	rdlong	arg02, fp
16160     0A 15 52 F6 | 	abs	arg02, arg02 wc
16164     0C 14 16 FD | 	qdiv	arg02, #12
16168     0C 4E 85 F1 | 	sub	fp, #12
1616c     34 00 00 FF 
16170     CC E4 85 F1 | 	sub	objptr, ##26828
16174     18 14 62 FD | 	getqx	arg02
16178     0A 13 82 F6 | 	negc	arg01, arg02
1617c     09 13 52 F6 | 	abs	arg01, arg01 wc
16180     1F 1E C6 C9 |  if_b	decod	local01, #31
16184     00 1E 06 36 |  if_ae	mov	local01, #0
16188     2C 84 B0 FD | 	call	#__system___float_fromuns
1618c     0F FB 61 F5 | 	xor	result1, local01
16190     08 4E 05 F1 | 	add	fp, #8
16194     A7 FA 61 FC | 	wrlong	result1, fp
16198     FD 14 02 F6 | 	mov	arg02, result1
1619c     08 4E 85 F1 | 	sub	fp, #8
161a0     1E 12 C6 F9 | 	decod	arg01, #30
161a4     F8 96 B0 FD | 	call	#__system____builtin_powf
161a8     FD 12 02 F6 | 	mov	arg01, result1
161ac     04 4E 05 F1 | 	add	fp, #4
161b0     A7 14 02 FB | 	rdlong	arg02, fp
161b4     04 4E 85 F1 | 	sub	fp, #4
161b8     00 88 B0 FD | 	call	#__system___float_mul
161bc     A7 FA 61 FC | 	wrlong	result1, fp
161c0     10 4E 05 F1 | 	add	fp, #16
161c4     A7 FA 61 FC | 	wrlong	result1, fp
161c8     08 4E 05 F1 | 	add	fp, #8
161cc     A7 3C 68 FC | 	wrlong	#30, fp
161d0     08 4E 85 F1 | 	sub	fp, #8
161d4     A7 12 02 F6 | 	mov	arg01, fp
161d8     10 4E 85 F1 | 	sub	fp, #16
161dc     40 3F BF FD | 	call	#_push
161e0     A7 F0 03 F6 | 	mov	ptra, fp
161e4     B2 00 A0 FD | 	call	#popregs_
161e8                 | _do_getnotevalue_ret
161e8     2D 00 64 FD | 	ret
161ec                 | 
161ec                 | ' 
161ec                 | ' 
161ec                 | ' sub do_waitms
161ec                 | _do_waitms
161ec     01 4A 05 F6 | 	mov	COUNT_, #1
161f0     A8 00 A0 FD | 	call	#pushregs_
161f4     18 F0 07 F1 | 	add	ptra, #24
161f8     8C 3E BF FD | 	call	#_pop
161fc     A7 FA 61 FC | 	wrlong	result1, fp
16200     04 4E 05 F1 | 	add	fp, #4
16204     A7 FC 61 FC | 	wrlong	result2, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 FE 61 FC | 	wrlong	result3, fp
16210                 | ' 
16210                 | ' t1=pop() 'value
16210                 | ' 
16210                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
16210     08 4E 85 F1 | 	sub	fp, #8
16214     1C FE 0D F2 | 	cmp	result3, #28 wz
16218     08 4E 05 51 |  if_ne	add	fp, #8
1621c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
16220     08 4E 85 51 |  if_ne	sub	fp, #8
16224     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
16228     A7 12 02 AB |  if_e	rdlong	arg01, fp
1622c     0C 4E 05 A1 |  if_e	add	fp, #12
16230     A7 12 62 AC |  if_e	wrlong	arg01, fp
16234     0C 4E 85 A1 |  if_e	sub	fp, #12
16238     14 00 90 AD |  if_e	jmp	#LR__1770
1623c     A7 12 02 F6 | 	mov	arg01, fp
16240     98 C4 BF FD | 	call	#_converttoint
16244     0C 4E 05 F1 | 	add	fp, #12
16248     A7 FA 61 FC | 	wrlong	result1, fp
1624c     0C 4E 85 F1 | 	sub	fp, #12
16250                 | LR__1770
16250                 | ' if t<0 then return
16250     0C 4E 05 F1 | 	add	fp, #12
16254     A7 12 02 FB | 	rdlong	arg01, fp
16258     0C 4E 85 F1 | 	sub	fp, #12
1625c     00 12 56 F2 | 	cmps	arg01, #0 wc
16260     B8 00 90 CD |  if_b	jmp	#LR__1775
16264                 | ' if t < 5000 then 
16264     0C 4E 05 F1 | 	add	fp, #12
16268     A7 12 02 FB | 	rdlong	arg01, fp
1626c     0C 4E 85 F1 | 	sub	fp, #12
16270     09 00 00 FF 
16274     88 13 56 F2 | 	cmps	arg01, ##5000 wc
16278     14 00 90 3D |  if_ae	jmp	#LR__1771
1627c     0C 4E 05 F1 | 	add	fp, #12
16280     A7 12 02 FB | 	rdlong	arg01, fp
16284     0C 4E 85 F1 | 	sub	fp, #12
16288     A8 5E B0 FD | 	call	#__system___waitms
1628c     8C 00 90 FD | 	jmp	#LR__1774
16290                 | LR__1771
16290     10 4E 05 F1 | 	add	fp, #16
16294     A7 02 68 FC | 	wrlong	#1, fp
16298     04 4E 85 F1 | 	sub	fp, #4
1629c     A7 12 02 FB | 	rdlong	arg01, fp
162a0     09 13 52 F6 | 	abs	arg01, arg01 wc
162a4     09 00 00 FF 
162a8     88 13 16 FD | 	qdiv	arg01, ##5000
162ac                 | '   for i=1 to t/5000
162ac     0C 4E 85 F1 | 	sub	fp, #12
162b0     18 1E 62 FD | 	getqx	local01
162b4     0F 1F 82 F6 | 	negc	local01, local01
162b8     01 1E 06 F1 | 	add	local01, #1
162bc                 | LR__1772
162bc     10 4E 05 F1 | 	add	fp, #16
162c0     A7 12 02 FB | 	rdlong	arg01, fp
162c4     10 4E 85 F1 | 	sub	fp, #16
162c8     0F 13 52 F2 | 	cmps	arg01, local01 wc
162cc     28 00 90 3D |  if_ae	jmp	#LR__1773
162d0     0C 4E 05 F1 | 	add	fp, #12
162d4     A7 12 02 FB | 	rdlong	arg01, fp
162d8     0C 4E 85 F1 | 	sub	fp, #12
162dc     54 5E B0 FD | 	call	#__system___waitms
162e0     10 4E 05 F1 | 	add	fp, #16
162e4     A7 12 02 FB | 	rdlong	arg01, fp
162e8     01 12 06 F1 | 	add	arg01, #1
162ec     A7 12 62 FC | 	wrlong	arg01, fp
162f0     10 4E 85 F1 | 	sub	fp, #16
162f4     C4 FF 9F FD | 	jmp	#LR__1772
162f8                 | LR__1773
162f8     0C 4E 05 F1 | 	add	fp, #12
162fc     A7 1E 02 FB | 	rdlong	local01, fp
16300     0F 1F 52 F6 | 	abs	local01, local01 wc
16304     09 00 00 FF 
16308     88 1F 16 FD | 	qdiv	local01, ##5000
1630c     0C 4E 85 F1 | 	sub	fp, #12
16310     19 1E 62 FD | 	getqy	local01
16314     0F 13 82 F6 | 	negc	arg01, local01
16318     18 5E B0 FD | 	call	#__system___waitms
1631c                 | LR__1774
1631c                 | LR__1775
1631c     A7 F0 03 F6 | 	mov	ptra, fp
16320     B2 00 A0 FD | 	call	#popregs_
16324                 | _do_waitms_ret
16324     2D 00 64 FD | 	ret
16328                 | 
16328                 | ' 
16328                 | ' sub do_waitvbl
16328                 | _do_waitvbl
16328     01 12 06 F6 | 	mov	arg01, #1
1632c     44 47 B0 FD | 	call	#_hg010b_spin2_waitvbl
16330                 | _do_waitvbl_ret
16330     2D 00 64 FD | 	ret
16334                 | 
16334                 | ' 
16334                 | ' sub do_waitclock
16334                 | _do_waitclock
16334     7B 00 00 FF 
16338     58 E4 05 F1 | 	add	objptr, ##63064
1633c     F2 00 02 FB | 	rdlong	_var01, objptr
16340                 | ' c=hkcnt
16340                 | ' do: loop until hkcnt<>c
16340                 | LR__1780
16340     F2 02 02 FB | 	rdlong	_var02, objptr
16344     00 03 0A F2 | 	cmp	_var02, _var01 wz
16348     F4 FF 9F AD |  if_e	jmp	#LR__1780
1634c     7B 00 00 FF 
16350     58 E4 85 F1 | 	sub	objptr, ##63064
16354                 | _do_waitclock_ret
16354     2D 00 64 FD | 	ret
16358                 | 
16358                 | ' 
16358                 | ' sub do_dir
16358                 | _do_dir
16358     03 4A 05 F6 | 	mov	COUNT_, #3
1635c     A8 00 A0 FD | 	call	#pushregs_
16360     5D 01 00 FF 
16364     A3 12 06 F6 | 	mov	arg01, ##@LR__4908
16368     60 61 B0 FD | 	call	#__system___chdir
1636c                 | ' chdir("/sd/bas")       ' set working directory
1636c                 | ' print "Working directory: "; currentdir$ 
1636c     00 12 06 F6 | 	mov	arg01, #0
16370     5C B4 B0 FD | 	call	#__system___getiolock_0472
16374     FD 12 02 F6 | 	mov	arg01, result1
16378     C4 5A B0 FD | 	call	#__system___lockmem
1637c     5D 01 00 FF 
16380     AB 14 06 F6 | 	mov	arg02, ##@LR__4909
16384     00 12 06 F6 | 	mov	arg01, #0
16388     00 16 06 F6 | 	mov	arg03, #0
1638c     B4 67 B0 FD | 	call	#__system___basic_print_string
16390     72 00 00 FF 
16394     78 E4 05 F1 | 	add	objptr, ##58488
16398     F2 14 02 FB | 	rdlong	arg02, objptr
1639c     72 00 00 FF 
163a0     78 E4 85 F1 | 	sub	objptr, ##58488
163a4     00 12 06 F6 | 	mov	arg01, #0
163a8     00 16 06 F6 | 	mov	arg03, #0
163ac     94 67 B0 FD | 	call	#__system___basic_print_string
163b0     00 12 06 F6 | 	mov	arg01, #0
163b4     0A 14 06 F6 | 	mov	arg02, #10
163b8     00 16 06 F6 | 	mov	arg03, #0
163bc     2C 67 B0 FD | 	call	#__system___basic_print_char
163c0     00 12 06 F6 | 	mov	arg01, #0
163c4     08 B4 B0 FD | 	call	#__system___getiolock_0472
163c8     FD 00 68 FC | 	wrlong	#0, result1
163cc     5D 01 00 FF 
163d0     BF 12 06 F6 | 	mov	arg01, ##@LR__4910
163d4     10 14 06 F6 | 	mov	arg02, #16
163d8     2C B5 B0 FD | 	call	#__system___basic_dir
163dc     FD 1E 02 F6 | 	mov	local01, result1
163e0                 | ' 
163e0                 | ' filename=dir$("*", fbDirectory)
163e0                 | ' while filename <> "" and filename <> nil
163e0                 | LR__1790
163e0     00 20 06 F6 | 	mov	local02, #0
163e4     5D 01 00 FF 
163e8     C1 14 06 F6 | 	mov	arg02, ##@LR__4911
163ec     0F 13 02 F6 | 	mov	arg01, local01
163f0     74 5A B0 FD | 	call	#__system___string_cmp
163f4     00 FA 0D F2 | 	cmp	result1, #0 wz
163f8     00 20 26 56 |  if_ne	not	local02, #0
163fc     00 22 06 F6 | 	mov	local03, #0
16400     0F 13 02 F6 | 	mov	arg01, local01
16404     00 14 06 F6 | 	mov	arg02, #0
16408     5C 5A B0 FD | 	call	#__system___string_cmp
1640c     00 FA 0D F2 | 	cmp	result1, #0 wz
16410     00 22 26 56 |  if_ne	not	local03, #0
16414     11 21 CA F7 | 	test	local02, local03 wz
16418     64 00 90 AD |  if_e	jmp	#LR__1791
1641c                 | '   print "[dir] ";filename
1641c     00 12 06 F6 | 	mov	arg01, #0
16420     AC B3 B0 FD | 	call	#__system___getiolock_0472
16424     FD 12 02 F6 | 	mov	arg01, result1
16428     14 5A B0 FD | 	call	#__system___lockmem
1642c     5D 01 00 FF 
16430     C2 14 06 F6 | 	mov	arg02, ##@LR__4912
16434     00 12 06 F6 | 	mov	arg01, #0
16438     00 16 06 F6 | 	mov	arg03, #0
1643c     04 67 B0 FD | 	call	#__system___basic_print_string
16440     00 12 06 F6 | 	mov	arg01, #0
16444     0F 15 02 F6 | 	mov	arg02, local01
16448     00 16 06 F6 | 	mov	arg03, #0
1644c     F4 66 B0 FD | 	call	#__system___basic_print_string
16450     00 12 06 F6 | 	mov	arg01, #0
16454     0A 14 06 F6 | 	mov	arg02, #10
16458     00 16 06 F6 | 	mov	arg03, #0
1645c     8C 66 B0 FD | 	call	#__system___basic_print_char
16460     00 12 06 F6 | 	mov	arg01, #0
16464     68 B3 B0 FD | 	call	#__system___getiolock_0472
16468     FD 00 68 FC | 	wrlong	#0, result1
1646c     00 12 06 F6 | 	mov	arg01, #0
16470     00 14 06 F6 | 	mov	arg02, #0
16474     90 B4 B0 FD | 	call	#__system___basic_dir
16478     FD 1E 02 F6 | 	mov	local01, result1
1647c     60 FF 9F FD | 	jmp	#LR__1790
16480                 | LR__1791
16480     5D 01 00 FF 
16484     C9 12 06 F6 | 	mov	arg01, ##@LR__4913
16488     21 14 06 F6 | 	mov	arg02, #33
1648c     78 B4 B0 FD | 	call	#__system___basic_dir
16490     FD 1E 02 F6 | 	mov	local01, result1
16494                 | ' 
16494                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
16494                 | ' do while filename <> "" and filename <> nil
16494                 | LR__1792
16494     00 20 06 F6 | 	mov	local02, #0
16498     5D 01 00 FF 
1649c     CB 14 06 F6 | 	mov	arg02, ##@LR__4914
164a0     0F 13 02 F6 | 	mov	arg01, local01
164a4     C0 59 B0 FD | 	call	#__system___string_cmp
164a8     00 FA 0D F2 | 	cmp	result1, #0 wz
164ac     00 20 26 56 |  if_ne	not	local02, #0
164b0     00 22 06 F6 | 	mov	local03, #0
164b4     0F 13 02 F6 | 	mov	arg01, local01
164b8     00 14 06 F6 | 	mov	arg02, #0
164bc     A8 59 B0 FD | 	call	#__system___string_cmp
164c0     00 FA 0D F2 | 	cmp	result1, #0 wz
164c4     00 22 26 56 |  if_ne	not	local03, #0
164c8     11 21 CA F7 | 	test	local02, local03 wz
164cc     4C 01 90 AD |  if_e	jmp	#LR__1796
164d0                 | '   print filename
164d0     00 12 06 F6 | 	mov	arg01, #0
164d4     F8 B2 B0 FD | 	call	#__system___getiolock_0472
164d8     FD 12 02 F6 | 	mov	arg01, result1
164dc     60 59 B0 FD | 	call	#__system___lockmem
164e0     00 12 06 F6 | 	mov	arg01, #0
164e4     0F 15 02 F6 | 	mov	arg02, local01
164e8     00 16 06 F6 | 	mov	arg03, #0
164ec     54 66 B0 FD | 	call	#__system___basic_print_string
164f0     00 12 06 F6 | 	mov	arg01, #0
164f4     0A 14 06 F6 | 	mov	arg02, #10
164f8     00 16 06 F6 | 	mov	arg03, #0
164fc     EC 65 B0 FD | 	call	#__system___basic_print_char
16500     00 12 06 F6 | 	mov	arg01, #0
16504     C8 B2 B0 FD | 	call	#__system___getiolock_0472
16508     FD 00 68 FC | 	wrlong	#0, result1
1650c     00 12 06 F6 | 	mov	arg01, #0
16510     00 14 06 F6 | 	mov	arg02, #0
16514     F0 B3 B0 FD | 	call	#__system___basic_dir
16518     FD 1E 02 F6 | 	mov	local01, result1
1651c                 | '   filename = dir$()      ' continue scan
1651c                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
1651c                 | ' return cursor_y
1651c     3A E4 05 F1 | 	add	objptr, #58
16520     F2 FA C1 FA | 	rdbyte	result1, objptr
16524     3A E4 85 F1 | 	sub	objptr, #58
16528     22 FA 0D F2 | 	cmp	result1, #34 wz
1652c     64 FF 9F 5D |  if_ne	jmp	#LR__1792
16530                 | '     print "-----more, press any key";
16530     00 12 06 F6 | 	mov	arg01, #0
16534     98 B2 B0 FD | 	call	#__system___getiolock_0472
16538     FD 12 02 F6 | 	mov	arg01, result1
1653c     00 59 B0 FD | 	call	#__system___lockmem
16540     5D 01 00 FF 
16544     CC 14 06 F6 | 	mov	arg02, ##@LR__4915
16548     00 12 06 F6 | 	mov	arg01, #0
1654c     00 16 06 F6 | 	mov	arg03, #0
16550     F0 65 B0 FD | 	call	#__system___basic_print_string
16554     00 12 06 F6 | 	mov	arg01, #0
16558     74 B2 B0 FD | 	call	#__system___getiolock_0472
1655c     FD 00 68 FC | 	wrlong	#0, result1
16560                 | '     do 
16560                 | LR__1793
16560     04 51 B0 FD | 	call	#_usbnew_spin2_get_key
16564     00 FA 0D F2 | 	cmp	result1, #0 wz
16568     F4 FF 9F 5D |  if_ne	jmp	#LR__1793
1656c                 | '     do
1656c                 | LR__1794
1656c     F8 50 B0 FD | 	call	#_usbnew_spin2_get_key
16570     00 FA 0D F2 | 	cmp	result1, #0 wz
16574     F4 FF 9F AD |  if_e	jmp	#LR__1794
16578                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
16578     79 00 00 FF 
1657c     C4 E5 05 F1 | 	add	objptr, ##62404
16580     F2 20 02 FB | 	rdlong	local02, objptr
16584     79 00 00 FF 
16588     C4 E5 85 F1 | 	sub	objptr, ##62404
1658c     01 20 0E F2 | 	cmp	local02, #1 wz
16590     3C 00 90 5D |  if_ne	jmp	#LR__1795
16594     7B 00 00 FF 
16598     68 E4 05 F1 | 	add	objptr, ##63080
1659c     F2 14 02 FB | 	rdlong	arg02, objptr
165a0     04 E4 85 F1 | 	sub	objptr, #4
165a4     F2 1A 02 FB | 	rdlong	arg05, objptr
165a8     07 12 06 F6 | 	mov	arg01, #7
165ac     56 00 00 FF 
165b0     44 16 06 F6 | 	mov	arg03, ##44100
165b4     0E 18 C6 F9 | 	decod	arg04, #14
165b8     01 1C 66 F6 | 	neg	arg06, #1
165bc     6F 00 00 FF 
165c0     A4 E5 85 F1 | 	sub	objptr, ##57252
165c4     28 54 B0 FD | 	call	#_audio096_spin2_play
165c8     0B 00 00 FF 
165cc     C0 E4 85 F1 | 	sub	objptr, ##5824
165d0                 | LR__1795
165d0     00 12 06 F6 | 	mov	arg01, #0
165d4     23 14 06 F6 | 	mov	arg02, #35
165d8     60 44 B0 FD | 	call	#_hg010b_spin2_setcursorpos
165dc                 | '     position 0,35: print "                             ";: position 4,35  
165dc     00 12 06 F6 | 	mov	arg01, #0
165e0     EC B1 B0 FD | 	call	#__system___getiolock_0472
165e4     FD 12 02 F6 | 	mov	arg01, result1
165e8     54 58 B0 FD | 	call	#__system___lockmem
165ec     5D 01 00 FF 
165f0     E5 14 06 F6 | 	mov	arg02, ##@LR__4916
165f4     00 12 06 F6 | 	mov	arg01, #0
165f8     00 16 06 F6 | 	mov	arg03, #0
165fc     44 65 B0 FD | 	call	#__system___basic_print_string
16600     00 12 06 F6 | 	mov	arg01, #0
16604     C8 B1 B0 FD | 	call	#__system___getiolock_0472
16608     FD 00 68 FC | 	wrlong	#0, result1
1660c     04 12 06 F6 | 	mov	arg01, #4
16610     23 14 06 F6 | 	mov	arg02, #35
16614     24 44 B0 FD | 	call	#_hg010b_spin2_setcursorpos
16618     78 FE 9F FD | 	jmp	#LR__1792
1661c                 | LR__1796
1661c     A7 F0 03 F6 | 	mov	ptra, fp
16620     B2 00 A0 FD | 	call	#popregs_
16624                 | _do_dir_ret
16624     2D 00 64 FD | 	ret
16628                 | 
16628                 | ' 
16628                 | ' sub do_if
16628                 | _do_if
16628     05 4A 05 F6 | 	mov	COUNT_, #5
1662c     A8 00 A0 FD | 	call	#pushregs_
16630     54 3A BF FD | 	call	#_pop
16634     FD 1E 0A F6 | 	mov	local01, result1 wz
16638     FE 20 02 F6 | 	mov	local02, result2
1663c     FF 22 02 F6 | 	mov	local03, result3
16640                 | ' t1=pop()
16640                 | ' ' if uresult=0, jump over else
16640                 | ' if t1.result.uresult = 0 then 
16640     BC 00 90 5D |  if_ne	jmp	#LR__1802
16644                 | '   for i=lineptr_e to lineptr-1
16644     6A 00 00 FF 
16648     64 E4 05 F1 | 	add	objptr, ##54372
1664c     F2 24 02 FB | 	rdlong	local04, objptr
16650     04 E4 85 F1 | 	sub	objptr, #4
16654     F2 26 02 FB | 	rdlong	local05, objptr
16658     6A 00 00 FF 
1665c     60 E4 85 F1 | 	sub	objptr, ##54368
16660                 | LR__1800
16660     13 25 52 F2 | 	cmps	local04, local05 wc
16664     78 00 90 3D |  if_ae	jmp	#LR__1801
16668     12 FF 01 F6 | 	mov	result3, local04
1666c     01 FE 65 F0 | 	shl	result3, #1
16670     12 FF 01 F1 | 	add	result3, local04
16674     02 FE 65 F0 | 	shl	result3, #2
16678     67 00 00 FF 
1667c     60 E4 05 F1 | 	add	objptr, ##52832
16680     F2 FE 01 F1 | 	add	result3, objptr
16684     FF 1E 02 FB | 	rdlong	local01, result3
16688     04 FE 05 F1 | 	add	result3, #4
1668c     FF FC 01 FB | 	rdlong	result2, result3
16690     12 FF 01 F6 | 	mov	result3, local04
16694     01 FE 65 F0 | 	shl	result3, #1
16698     12 FF 01 F1 | 	add	result3, local04
1669c     02 FE 65 F0 | 	shl	result3, #2
166a0     F2 FE 01 F1 | 	add	result3, objptr
166a4     08 FE 05 F1 | 	add	result3, #8
166a8     FF FE 01 FB | 	rdlong	result3, result3
166ac     FE 20 02 F6 | 	mov	local02, result2
166b0     FF 22 02 F6 | 	mov	local03, result3
166b4                 | '     t1=compiledline(i)
166b4                 | '     if t1.result_type=token_else then lineptr_e=i : return
166b4     5A 22 0E F2 | 	cmp	local03, #90 wz
166b8     67 00 00 FF 
166bc     60 E4 85 F1 | 	sub	objptr, ##52832
166c0     6A 00 00 AF 
166c4     64 E4 05 A1 |  if_e	add	objptr, ##54372
166c8     F2 24 62 AC |  if_e	wrlong	local04, objptr
166cc     6A 00 00 AF 
166d0     64 E4 85 A1 |  if_e	sub	objptr, ##54372
166d4     28 00 90 AD |  if_e	jmp	#LR__1803
166d8     01 24 06 F1 | 	add	local04, #1
166dc     80 FF 9F FD | 	jmp	#LR__1800
166e0                 | LR__1801
166e0     6A 00 00 FF 
166e4     60 E4 05 F1 | 	add	objptr, ##54368
166e8     F2 26 02 FB | 	rdlong	local05, objptr
166ec     01 26 86 F1 | 	sub	local05, #1
166f0     04 E4 05 F1 | 	add	objptr, #4
166f4     F2 26 62 FC | 	wrlong	local05, objptr
166f8     6A 00 00 FF 
166fc     64 E4 85 F1 | 	sub	objptr, ##54372
16700                 | LR__1802
16700                 | LR__1803
16700     A7 F0 03 F6 | 	mov	ptra, fp
16704     B2 00 A0 FD | 	call	#popregs_
16708                 | _do_if_ret
16708     2D 00 64 FD | 	ret
1670c                 | 
1670c                 | ' 
1670c                 | ' sub do_else
1670c                 | _do_else
1670c     6A 00 00 FF 
16710     60 E4 05 F1 | 	add	objptr, ##54368
16714     F2 00 02 FB | 	rdlong	_var01, objptr
16718     01 00 86 F1 | 	sub	_var01, #1
1671c     04 E4 05 F1 | 	add	objptr, #4
16720     F2 00 62 FC | 	wrlong	_var01, objptr
16724     6A 00 00 FF 
16728     64 E4 85 F1 | 	sub	objptr, ##54372
1672c                 | _do_else_ret
1672c     2D 00 64 FD | 	ret
16730                 | 
16730                 | ' 
16730                 | ' sub do_rad
16730                 | _do_rad
16730     7B 00 00 FF 
16734     6C E4 05 F1 | 	add	objptr, ##63084
16738     00 C0 9F FF 
1673c     F2 00 68 FC | 	wrlong	##1065353216, objptr
16740     04 E4 05 F1 | 	add	objptr, #4
16744     00 C0 9F FF 
16748     F2 00 68 FC | 	wrlong	##1065353216, objptr
1674c     7B 00 00 FF 
16750     70 E4 85 F1 | 	sub	objptr, ##63088
16754                 | _do_rad_ret
16754     2D 00 64 FD | 	ret
16758                 | 
16758                 | ' 
16758                 | ' sub do_deg
16758                 | _do_deg
16758     7B 00 00 FF 
1675c     6C E4 05 F1 | 	add	objptr, ##63084
16760     7D 47 9E FF 
16764     F2 6A 68 FC | 	wrlong	##1016003125, objptr
16768     04 E4 05 F1 | 	add	objptr, #4
1676c     97 32 A1 FF 
16770     F2 C2 69 FC | 	wrlong	##1113927393, objptr
16774     7B 00 00 FF 
16778     70 E4 85 F1 | 	sub	objptr, ##63088
1677c                 | _do_deg_ret
1677c     2D 00 64 FD | 	ret
16780                 | 
16780                 | ' 
16780                 | ' sub do_int
16780                 | _do_int
16780     00 4A 05 F6 | 	mov	COUNT_, #0
16784     A8 00 A0 FD | 	call	#pushregs_
16788     0C F0 07 F1 | 	add	ptra, #12
1678c     F8 38 BF FD | 	call	#_pop
16790     A7 FA 61 FC | 	wrlong	result1, fp
16794     04 4E 05 F1 | 	add	fp, #4
16798     A7 FC 61 FC | 	wrlong	result2, fp
1679c     04 4E 05 F1 | 	add	fp, #4
167a0     A7 FE 61 FC | 	wrlong	result3, fp
167a4     08 4E 85 F1 | 	sub	fp, #8
167a8     A7 12 02 F6 | 	mov	arg01, fp
167ac     2C BF BF FD | 	call	#_converttoint
167b0     A7 FA 61 FC | 	wrlong	result1, fp
167b4     08 4E 05 F1 | 	add	fp, #8
167b8     A7 38 68 FC | 	wrlong	#28, fp
167bc     08 4E 85 F1 | 	sub	fp, #8
167c0     A7 12 02 F6 | 	mov	arg01, fp
167c4     58 39 BF FD | 	call	#_push
167c8     A7 F0 03 F6 | 	mov	ptra, fp
167cc     B2 00 A0 FD | 	call	#popregs_
167d0                 | _do_int_ret
167d0     2D 00 64 FD | 	ret
167d4                 | 
167d4                 | ' 
167d4                 | ' sub do_nothing
167d4                 | _do_nothing
167d4                 | _do_nothing_ret
167d4     2D 00 64 FD | 	ret
167d8                 | 
167d8                 | ' 
167d8                 | ' sub do_brun
167d8                 | _do_brun
167d8     08 4A 05 F6 | 	mov	COUNT_, #8
167dc     A8 00 A0 FD | 	call	#pushregs_
167e0     A4 38 BF FD | 	call	#_pop
167e4     FE 1A 02 F6 | 	mov	arg05, result2
167e8     FF 18 02 F6 | 	mov	arg04, result3
167ec     FD 1E 02 F6 | 	mov	local01, result1
167f0     0D 21 02 F6 | 	mov	local02, arg05
167f4     0C 23 02 F6 | 	mov	local03, arg04
167f8                 | ' 
167f8                 | ' t1=pop() 
167f8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
167f8     2B 22 0E F2 | 	cmp	local03, #43 wz
167fc     10 00 90 5D |  if_ne	jmp	#LR__1810
16800     0F 13 02 F6 | 	mov	arg01, local01
16804     FC 77 BF FD | 	call	#_convertstring
16808     FD 1E 02 F6 | 	mov	local01, result1
1680c     1F 22 06 F6 | 	mov	local03, #31
16810                 | LR__1810
16810                 | ' if t1.result_type=result_string then
16810     1F 22 0E F2 | 	cmp	local03, #31 wz
16814     EC 01 90 5D |  if_ne	jmp	#LR__1814
16818     0F 25 02 F6 | 	mov	local04, local01
1681c                 | '   filename=t1.result.sresult
1681c                 | '   if left$(filename,1)="/" then 
1681c     12 13 02 F6 | 	mov	arg01, local04
16820     01 14 06 F6 | 	mov	arg02, #1
16824     5C 76 B0 FD | 	call	#__system__Left_S
16828     FD 12 02 F6 | 	mov	arg01, result1
1682c     5D 01 00 FF 
16830     03 15 06 F6 | 	mov	arg02, ##@LR__4917
16834     30 56 B0 FD | 	call	#__system___string_cmp
16838     00 FA 0D F2 | 	cmp	result1, #0 wz
1683c     12 27 02 A6 |  if_e	mov	local05, local04
16840     14 00 90 AD |  if_e	jmp	#LR__1811
16844     5D 01 00 FF 
16848     05 13 06 F6 | 	mov	arg01, ##@LR__4918
1684c     12 15 02 F6 | 	mov	arg02, local04
16850     48 56 B0 FD | 	call	#__system___string_concat
16854     FD 26 02 F6 | 	mov	local05, result1
16858                 | LR__1811
16858                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
16858                 | '   open fullfilename for input as #9
16858     09 12 06 F6 | 	mov	arg01, #9
1685c     13 15 02 F6 | 	mov	arg02, local05
16860     00 16 06 F6 | 	mov	arg03, #0
16864     D8 61 B0 FD | 	call	#__system___basic_open_string
16868     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1686c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16870     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
16874     FD 28 0A F6 | 	mov	local06, result1 wz
16878                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
16878     8C 00 90 AD |  if_e	jmp	#LR__1812
1687c     00 12 06 F6 | 	mov	arg01, #0
16880     4C AF B0 FD | 	call	#__system___getiolock_0472
16884     FD 12 02 F6 | 	mov	arg01, result1
16888     B4 55 B0 FD | 	call	#__system___lockmem
1688c     5D 01 00 FF 
16890     0E 15 06 F6 | 	mov	arg02, ##@LR__4919
16894     00 12 06 F6 | 	mov	arg01, #0
16898     00 16 06 F6 | 	mov	arg03, #0
1689c     A4 62 B0 FD | 	call	#__system___basic_print_string
168a0     00 12 06 F6 | 	mov	arg01, #0
168a4     14 15 02 F6 | 	mov	arg02, local06
168a8     00 16 06 F6 | 	mov	arg03, #0
168ac     0A 18 06 F6 | 	mov	arg04, #10
168b0     D4 62 B0 FD | 	call	#__system___basic_print_integer
168b4     5D 01 00 FF 
168b8     1C 15 06 F6 | 	mov	arg02, ##@LR__4920
168bc     00 12 06 F6 | 	mov	arg01, #0
168c0     00 16 06 F6 | 	mov	arg03, #0
168c4     7C 62 B0 FD | 	call	#__system___basic_print_string
168c8     14 13 02 F6 | 	mov	arg01, local06
168cc     00 7C B0 FD | 	call	#__system___strerror
168d0     FD 14 02 F6 | 	mov	arg02, result1
168d4     00 12 06 F6 | 	mov	arg01, #0
168d8     00 16 06 F6 | 	mov	arg03, #0
168dc     64 62 B0 FD | 	call	#__system___basic_print_string
168e0     00 12 06 F6 | 	mov	arg01, #0
168e4     0A 14 06 F6 | 	mov	arg02, #10
168e8     00 16 06 F6 | 	mov	arg03, #0
168ec     FC 61 B0 FD | 	call	#__system___basic_print_char
168f0     00 12 06 F6 | 	mov	arg01, #0
168f4     D8 AE B0 FD | 	call	#__system___getiolock_0472
168f8     FD 00 68 FC | 	wrlong	#0, result1
168fc     09 12 06 F6 | 	mov	arg01, #9
16900     FC A4 B0 FD | 	call	#__system__close
16904     FC 00 90 FD | 	jmp	#LR__1815
16908                 | LR__1812
16908     01 2A 06 F6 | 	mov	local07, #1
1690c     00 2C 06 F6 | 	mov	local08, #0
16910                 | '   do
16910                 | LR__1813
16910                 | '     get #9,pos,block(0),1024,r : pos+=r	
16910     77 00 00 FF 
16914     90 E5 05 F1 | 	add	objptr, ##61328
16918     F2 16 02 F6 | 	mov	arg03, objptr
1691c     77 00 00 FF 
16920     90 E5 85 F1 | 	sub	objptr, ##61328
16924     09 12 06 F6 | 	mov	arg01, #9
16928     15 15 02 F6 | 	mov	arg02, local07
1692c     0A 18 C6 F9 | 	decod	arg04, #10
16930     01 1A 06 F6 | 	mov	arg05, #1
16934     1C 63 B0 FD | 	call	#__system___basic_get
16938     FD 28 02 F6 | 	mov	local06, result1
1693c     FD 2A 02 F1 | 	add	local07, result1
16940     77 00 00 FF 
16944     90 E5 05 F1 | 	add	objptr, ##61328
16948     F2 12 02 F6 | 	mov	arg01, objptr
1694c     16 15 02 F6 | 	mov	arg02, local08
16950     0A 16 C6 F9 | 	decod	arg03, #10
16954     6C 00 00 FF 
16958     D0 E4 85 F1 | 	sub	objptr, ##55504
1695c     14 4A B0 FD | 	call	#_psram_spin2_write
16960     0B 00 00 FF 
16964     C0 E4 85 F1 | 	sub	objptr, ##5824
16968     14 2D 02 F1 | 	add	local08, local06
1696c     02 00 00 FF 
16970     00 28 0E F2 | 	cmp	local06, ##1024 wz
16974     E0 03 00 AF 
16978     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1697c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1813
16980     56 00 00 FF 
16984     E0 E5 05 F1 | 	add	objptr, ##44512
16988     F2 12 02 FB | 	rdlong	arg01, objptr
1698c     03 12 62 FD | 	cogstop	arg01
16990     04 E4 05 F1 | 	add	objptr, #4
16994     F2 12 02 FB | 	rdlong	arg01, objptr
16998     03 12 62 FD | 	cogstop	arg01
1699c     04 E4 05 F1 | 	add	objptr, #4
169a0     F2 12 02 FB | 	rdlong	arg01, objptr
169a4     03 12 62 FD | 	cogstop	arg01
169a8     22 00 00 FF 
169ac     E0 E5 05 F1 | 	add	objptr, ##17888
169b0     F2 12 02 FB | 	rdlong	arg01, objptr
169b4     03 12 62 FD | 	cogstop	arg01
169b8     18 00 00 FF 
169bc     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
169c0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
169c4     18 00 00 FF 
169c8     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
169cc     22 00 00 FF 
169d0     D8 E5 85 F1 | 	sub	objptr, ##17880
169d4     1E 2C 06 F6 | 	mov	local08, #30
169d8     28 E4 61 FD | 	setq	objptr
169dc     0A 2D F2 FC | 	coginit	local08, arg02 wc
169e0     01 2C 66 C6 |  if_b	neg	local08, #1
169e4     24 00 00 FF 
169e8     0C E5 05 F1 | 	add	objptr, ##18700
169ec     F2 2C 62 FC | 	wrlong	local08, objptr
169f0     7B 00 00 FF 
169f4     FC E4 85 F1 | 	sub	objptr, ##63228
169f8     00 12 06 F6 | 	mov	arg01, #0
169fc     01 12 62 FD | 	cogid	arg01
16a00     03 12 62 FD | 	cogstop	arg01
16a04                 | LR__1814
16a04                 | LR__1815
16a04     A7 F0 03 F6 | 	mov	ptra, fp
16a08     B2 00 A0 FD | 	call	#popregs_
16a0c                 | _do_brun_ret
16a0c     2D 00 64 FD | 	ret
16a10                 | 
16a10                 | ' 
16a10                 | ' 
16a10                 | ' sub do_mouse
16a10                 | _do_mouse
16a10     74 36 BF FD | 	call	#_pop
16a14     00 FA 4D F2 | 	cmps	result1, #0 wz
16a18                 | ' t1=pop()
16a18                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
16a18     14 00 90 5D |  if_ne	jmp	#LR__1820
16a1c     10 12 06 F6 | 	mov	arg01, #16
16a20     00 14 06 F6 | 	mov	arg02, #0
16a24     00 16 06 F6 | 	mov	arg03, #0
16a28     00 34 B0 FD | 	call	#_hg010b_spin2_setspritesize
16a2c     10 00 90 FD | 	jmp	#LR__1821
16a30                 | LR__1820
16a30     10 12 06 F6 | 	mov	arg01, #16
16a34     20 14 06 F6 | 	mov	arg02, #32
16a38     20 16 06 F6 | 	mov	arg03, #32
16a3c     EC 33 B0 FD | 	call	#_hg010b_spin2_setspritesize
16a40                 | LR__1821
16a40                 | _do_mouse_ret
16a40     2D 00 64 FD | 	ret
16a44                 | 
16a44                 | ' 
16a44                 | ' sub do_cursor
16a44                 | _do_cursor
16a44     40 36 BF FD | 	call	#_pop
16a48     00 FA 4D F2 | 	cmps	result1, #0 wz
16a4c                 | ' t1=pop()
16a4c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
16a4c     14 00 90 5D |  if_ne	jmp	#LR__1830
16a50     11 12 06 F6 | 	mov	arg01, #17
16a54     00 14 06 F6 | 	mov	arg02, #0
16a58     00 16 06 F6 | 	mov	arg03, #0
16a5c     CC 33 B0 FD | 	call	#_hg010b_spin2_setspritesize
16a60     10 00 90 FD | 	jmp	#LR__1831
16a64                 | LR__1830
16a64     11 12 06 F6 | 	mov	arg01, #17
16a68     08 14 06 F6 | 	mov	arg02, #8
16a6c     10 16 06 F6 | 	mov	arg03, #16
16a70     B8 33 B0 FD | 	call	#_hg010b_spin2_setspritesize
16a74                 | LR__1831
16a74                 | _do_cursor_ret
16a74     2D 00 64 FD | 	ret
16a78                 | 
16a78                 | ' 
16a78                 | ' 
16a78                 | ' sub do_click
16a78                 | _do_click
16a78     0C 36 BF FD | 	call	#_pop
16a7c     00 FA 4D F2 | 	cmps	result1, #0 wz
16a80                 | ' t1=pop()
16a80                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
16a80     79 00 00 AF 
16a84     C4 E5 05 A1 |  if_e	add	objptr, ##62404
16a88     F2 00 68 AC |  if_e	wrlong	#0, objptr
16a8c     79 00 00 FF 
16a90     C4 E5 C5 F3 | 	sumz	objptr, ##62404
16a94     F2 02 68 5C |  if_ne	wrlong	#1, objptr
16a98     79 00 00 5F 
16a9c     C4 E5 85 51 |  if_ne	sub	objptr, ##62404
16aa0                 | _do_click_ret
16aa0     2D 00 64 FD | 	ret
16aa4                 | 
16aa4                 | ' 
16aa4                 | ' 
16aa4                 | ' sub do_beep
16aa4                 | _do_beep
16aa4     02 4A 05 F6 | 	mov	COUNT_, #2
16aa8     A8 00 A0 FD | 	call	#pushregs_
16aac     20 F0 07 F1 | 	add	ptra, #32
16ab0     D4 35 BF FD | 	call	#_pop
16ab4     FD 1E 02 F6 | 	mov	local01, result1
16ab8     FE 1C 02 F6 | 	mov	arg06, result2
16abc     FF 20 02 F6 | 	mov	local02, result3
16ac0     0C 4E 05 F1 | 	add	fp, #12
16ac4     A7 1E 62 FC | 	wrlong	local01, fp
16ac8     04 4E 05 F1 | 	add	fp, #4
16acc     A7 1C 62 FC | 	wrlong	arg06, fp
16ad0     04 4E 05 F1 | 	add	fp, #4
16ad4     A7 20 62 FC | 	wrlong	local02, fp
16ad8     14 4E 85 F1 | 	sub	fp, #20
16adc     A8 35 BF FD | 	call	#_pop
16ae0     A7 FA 61 FC | 	wrlong	result1, fp
16ae4     04 4E 05 F1 | 	add	fp, #4
16ae8     A7 FC 61 FC | 	wrlong	result2, fp
16aec     04 4E 05 F1 | 	add	fp, #4
16af0     A7 FE 61 FC | 	wrlong	result3, fp
16af4                 | ' 
16af4                 | ' t2=pop()
16af4                 | ' t1=pop()
16af4                 | ' 
16af4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
16af4     08 4E 85 F1 | 	sub	fp, #8
16af8     1C FE 0D F2 | 	cmp	result3, #28 wz
16afc     08 4E 05 51 |  if_ne	add	fp, #8
16b00     A7 20 02 5B |  if_ne	rdlong	local02, fp
16b04     08 4E 85 51 |  if_ne	sub	fp, #8
16b08     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
16b0c     A7 1E 02 AB |  if_e	rdlong	local01, fp
16b10     18 4E 05 A1 |  if_e	add	fp, #24
16b14     A7 1E 62 AC |  if_e	wrlong	local01, fp
16b18     18 4E 85 A1 |  if_e	sub	fp, #24
16b1c     14 00 90 AD |  if_e	jmp	#LR__1840
16b20     A7 12 02 F6 | 	mov	arg01, fp
16b24     B4 BB BF FD | 	call	#_converttoint
16b28     18 4E 05 F1 | 	add	fp, #24
16b2c     A7 FA 61 FC | 	wrlong	result1, fp
16b30     18 4E 85 F1 | 	sub	fp, #24
16b34                 | LR__1840
16b34     1C 4E 05 F1 | 	add	fp, #28
16b38     A7 FE 48 FC | 	wrbyte	#127, fp
16b3c     01 4E 05 F1 | 	add	fp, #1
16b40     A7 00 49 FC | 	wrbyte	#128, fp
16b44     01 4E 85 F1 | 	sub	fp, #1
16b48     A7 14 02 F6 | 	mov	arg02, fp
16b4c     04 4E 85 F1 | 	sub	fp, #4
16b50     A7 16 02 FB | 	rdlong	arg03, fp
16b54     18 4E 85 F1 | 	sub	fp, #24
16b58     01 16 66 F0 | 	shl	arg03, #1
16b5c     07 12 06 F6 | 	mov	arg01, #7
16b60     0E 18 C6 F9 | 	decod	arg04, #14
16b64     02 1A 06 F6 | 	mov	arg05, #2
16b68     00 1C 06 F6 | 	mov	arg06, #0
16b6c     0B 00 00 FF 
16b70     C0 E4 05 F1 | 	add	objptr, ##5824
16b74     14 4F B0 FD | 	call	#_audio096_spin2_play8
16b78     0B 00 00 FF 
16b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
16b80     0C 4E 05 F1 | 	add	fp, #12
16b84     A7 12 02 F6 | 	mov	arg01, fp
16b88     0C 4E 85 F1 | 	sub	fp, #12
16b8c     90 35 BF FD | 	call	#_push
16b90     58 F6 BF FD | 	call	#_do_waitms
16b94     07 12 06 F6 | 	mov	arg01, #7
16b98     0B 00 00 FF 
16b9c     C0 E4 05 F1 | 	add	objptr, ##5824
16ba0     9C 4F B0 FD | 	call	#_audio096_spin2_stop
16ba4     0B 00 00 FF 
16ba8     C0 E4 85 F1 | 	sub	objptr, ##5824
16bac     A7 F0 03 F6 | 	mov	ptra, fp
16bb0     B2 00 A0 FD | 	call	#popregs_
16bb4                 | _do_beep_ret
16bb4     2D 00 64 FD | 	ret
16bb8                 | 
16bb8                 | ' 
16bb8                 | ' sub do_no_command
16bb8                 | _do_no_command
16bb8     17 12 06 F6 | 	mov	arg01, #23
16bbc     98 1B B0 FD | 	call	#_printerror
16bc0                 | _do_no_command_ret
16bc0     2D 00 64 FD | 	ret
16bc4                 | 
16bc4                 | ' 
16bc4                 | ' sub do_negative
16bc4                 | _do_negative
16bc4     02 4A 05 F6 | 	mov	COUNT_, #2
16bc8     A8 00 A0 FD | 	call	#pushregs_
16bcc     0C F0 07 F1 | 	add	ptra, #12
16bd0     B4 34 BF FD | 	call	#_pop
16bd4     FF 1E 02 F6 | 	mov	local01, result3
16bd8     A7 FA 61 FC | 	wrlong	result1, fp
16bdc     04 4E 05 F1 | 	add	fp, #4
16be0     A7 FC 61 FC | 	wrlong	result2, fp
16be4     04 4E 05 F1 | 	add	fp, #4
16be8     A7 1E 62 FC | 	wrlong	local01, fp
16bec                 | ' t1=pop()
16bec                 | ' if t1.result_type=result_int then 
16bec     08 4E 85 F1 | 	sub	fp, #8
16bf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
16bf4     A7 20 02 AB |  if_e	rdlong	local02, fp
16bf8     10 1F 62 A6 |  if_e	neg	local01, local02
16bfc     A7 1E 62 AC |  if_e	wrlong	local01, fp
16c00     5C 00 90 AD |  if_e	jmp	#LR__1852
16c04     08 4E 05 F1 | 	add	fp, #8
16c08     A7 1E 02 FB | 	rdlong	local01, fp
16c0c     08 4E 85 F1 | 	sub	fp, #8
16c10     1D 1E 0E F2 | 	cmp	local01, #29 wz
16c14     1C 00 90 5D |  if_ne	jmp	#LR__1850
16c18     A7 20 02 FB | 	rdlong	local02, fp
16c1c     10 1F 62 F6 | 	neg	local01, local02
16c20     A7 1E 62 FC | 	wrlong	local01, fp
16c24     08 4E 05 F1 | 	add	fp, #8
16c28     A7 38 68 FC | 	wrlong	#28, fp
16c2c     08 4E 85 F1 | 	sub	fp, #8
16c30     2C 00 90 FD | 	jmp	#LR__1851
16c34                 | LR__1850
16c34     08 4E 05 F1 | 	add	fp, #8
16c38     A7 1E 02 FB | 	rdlong	local01, fp
16c3c     08 4E 85 F1 | 	sub	fp, #8
16c40     1E 1E 0E F2 | 	cmp	local01, #30 wz
16c44     A7 FA 01 AB |  if_e	rdlong	result1, fp
16c48     1F FA E5 A4 |  if_e	bitnot	result1, #31
16c4c     A7 FA 61 AC |  if_e	wrlong	result1, fp
16c50     08 4E 05 51 |  if_ne	add	fp, #8
16c54     A7 FE 69 5C |  if_ne	wrlong	#255, fp
16c58     08 4E 85 51 |  if_ne	sub	fp, #8
16c5c     A7 50 68 5C |  if_ne	wrlong	#40, fp
16c60                 | LR__1851
16c60                 | LR__1852
16c60     A7 12 02 F6 | 	mov	arg01, fp
16c64     B8 34 BF FD | 	call	#_push
16c68     A7 F0 03 F6 | 	mov	ptra, fp
16c6c     B2 00 A0 FD | 	call	#popregs_
16c70                 | _do_negative_ret
16c70     2D 00 64 FD | 	ret
16c74                 | 
16c74                 | ' 
16c74                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
16c74                 | ' 
16c74                 | ' ''----------------------------------------------------------------------------------------------------
16c74                 | ' ''------------------ Initialization procedures -------------------------------------------------------
16c74                 | ' ''----------------------------------------------------------------------------------------------------
16c74                 | ' 
16c74                 | ' ''--------------------------- Command function pointers
16c74                 | ' 
16c74                 | ' sub init_commands
16c74                 | _init_commands
16c74                 | ' 
16c74                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
16c74     00 00 06 F6 | 	mov	_var01, #0
16c78     97 16 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
16c7c                 | LR__1860
16c7c     00 FB 01 F6 | 	mov	result1, _var01
16c80     02 FA 65 F0 | 	shl	result1, #2
16c84     63 00 00 FF 
16c88     44 E4 05 F1 | 	add	objptr, ##50756
16c8c     F2 FA 01 F1 | 	add	result1, objptr
16c90     63 00 00 FF 
16c94     44 E4 85 F1 | 	sub	objptr, ##50756
16c98     FD E4 61 FC | 	wrlong	objptr, result1
16c9c     01 00 06 F1 | 	add	_var01, #1
16ca0     00 01 56 F2 | 	cmps	_var01, #256 wc
16ca4     D4 FF 9F CD |  if_b	jmp	#LR__1860
16ca8                 | LR__1861
16ca8     F2 FA 01 F6 | 	mov	result1, objptr
16cac     14 FA 25 F4 | 	bith	result1, #20
16cb0     63 00 00 FF 
16cb4     48 E4 05 F1 | 	add	objptr, ##50760
16cb8     F2 FA 61 FC | 	wrlong	result1, objptr
16cbc     63 00 00 FF 
16cc0     48 E4 85 F1 | 	sub	objptr, ##50760
16cc4     F2 FA 01 F6 | 	mov	result1, objptr
16cc8     15 FA 25 F4 | 	bith	result1, #21
16ccc     63 00 00 FF 
16cd0     4C E4 05 F1 | 	add	objptr, ##50764
16cd4     F2 FA 61 FC | 	wrlong	result1, objptr
16cd8     63 00 00 FF 
16cdc     4C E4 85 F1 | 	sub	objptr, ##50764
16ce0     F2 FA 01 F6 | 	mov	result1, objptr
16ce4     34 FA 25 F4 | 	bith	result1, #52
16ce8     63 00 00 FF 
16cec     50 E4 05 F1 | 	add	objptr, ##50768
16cf0     F2 FA 61 FC | 	wrlong	result1, objptr
16cf4     63 00 00 FF 
16cf8     50 E4 85 F1 | 	sub	objptr, ##50768
16cfc     F2 FA 01 F6 | 	mov	result1, objptr
16d00     16 FA 25 F4 | 	bith	result1, #22
16d04     63 00 00 FF 
16d08     58 E4 05 F1 | 	add	objptr, ##50776
16d0c     F2 FA 61 FC | 	wrlong	result1, objptr
16d10     63 00 00 FF 
16d14     58 E4 85 F1 | 	sub	objptr, ##50776
16d18     F2 FA 01 F6 | 	mov	result1, objptr
16d1c     00 28 00 FF 
16d20     00 FA 45 F5 | 	or	result1, ##5242880
16d24     63 00 00 FF 
16d28     5C E4 05 F1 | 	add	objptr, ##50780
16d2c     F2 FA 61 FC | 	wrlong	result1, objptr
16d30     63 00 00 FF 
16d34     5C E4 85 F1 | 	sub	objptr, ##50780
16d38     F2 FA 01 F6 | 	mov	result1, objptr
16d3c     35 FA 25 F4 | 	bith	result1, #53
16d40     63 00 00 FF 
16d44     60 E4 05 F1 | 	add	objptr, ##50784
16d48     F2 FA 61 FC | 	wrlong	result1, objptr
16d4c     63 00 00 FF 
16d50     60 E4 85 F1 | 	sub	objptr, ##50784
16d54     F2 FA 01 F6 | 	mov	result1, objptr
16d58     54 FA 25 F4 | 	bith	result1, #84
16d5c     63 00 00 FF 
16d60     64 E4 05 F1 | 	add	objptr, ##50788
16d64     F2 FA 61 FC | 	wrlong	result1, objptr
16d68     63 00 00 FF 
16d6c     64 E4 85 F1 | 	sub	objptr, ##50788
16d70     F2 FA 01 F6 | 	mov	result1, objptr
16d74     17 FA 25 F4 | 	bith	result1, #23
16d78     63 00 00 FF 
16d7c     68 E4 05 F1 | 	add	objptr, ##50792
16d80     F2 FA 61 FC | 	wrlong	result1, objptr
16d84     63 00 00 FF 
16d88     68 E4 85 F1 | 	sub	objptr, ##50792
16d8c     F2 FA 01 F6 | 	mov	result1, objptr
16d90     00 48 00 FF 
16d94     00 FA 45 F5 | 	or	result1, ##9437184
16d98     63 00 00 FF 
16d9c     6C E4 05 F1 | 	add	objptr, ##50796
16da0     F2 FA 61 FC | 	wrlong	result1, objptr
16da4     63 00 00 FF 
16da8     6C E4 85 F1 | 	sub	objptr, ##50796
16dac     F2 FA 01 F6 | 	mov	result1, objptr
16db0     00 50 00 FF 
16db4     00 FA 45 F5 | 	or	result1, ##10485760
16db8     63 00 00 FF 
16dbc     70 E4 05 F1 | 	add	objptr, ##50800
16dc0     F2 FA 61 FC | 	wrlong	result1, objptr
16dc4     63 00 00 FF 
16dc8     70 E4 85 F1 | 	sub	objptr, ##50800
16dcc     F2 FA 01 F6 | 	mov	result1, objptr
16dd0     00 58 00 FF 
16dd4     00 FA 45 F5 | 	or	result1, ##11534336
16dd8     63 00 00 FF 
16ddc     74 E4 05 F1 | 	add	objptr, ##50804
16de0     F2 FA 61 FC | 	wrlong	result1, objptr
16de4     63 00 00 FF 
16de8     74 E4 85 F1 | 	sub	objptr, ##50804
16dec     F2 FA 01 F6 | 	mov	result1, objptr
16df0     36 FA 25 F4 | 	bith	result1, #54
16df4     63 00 00 FF 
16df8     88 E4 05 F1 | 	add	objptr, ##50824
16dfc     F2 FA 61 FC | 	wrlong	result1, objptr
16e00     63 00 00 FF 
16e04     88 E4 85 F1 | 	sub	objptr, ##50824
16e08     F2 FA 01 F6 | 	mov	result1, objptr
16e0c     00 68 00 FF 
16e10     00 FA 45 F5 | 	or	result1, ##13631488
16e14     63 00 00 FF 
16e18     B8 E4 05 F1 | 	add	objptr, ##50872
16e1c     F2 FA 61 FC | 	wrlong	result1, objptr
16e20     63 00 00 FF 
16e24     B8 E4 85 F1 | 	sub	objptr, ##50872
16e28     F2 FA 01 F6 | 	mov	result1, objptr
16e2c     00 68 00 FF 
16e30     00 FA 45 F5 | 	or	result1, ##13631488
16e34     63 00 00 FF 
16e38     B4 E4 05 F1 | 	add	objptr, ##50868
16e3c     F2 FA 61 FC | 	wrlong	result1, objptr
16e40     63 00 00 FF 
16e44     B4 E4 85 F1 | 	sub	objptr, ##50868
16e48     F2 FA 01 F6 | 	mov	result1, objptr
16e4c     00 68 00 FF 
16e50     00 FA 45 F5 | 	or	result1, ##13631488
16e54     63 00 00 FF 
16e58     BC E4 05 F1 | 	add	objptr, ##50876
16e5c     F2 FA 61 FC | 	wrlong	result1, objptr
16e60     63 00 00 FF 
16e64     BC E4 85 F1 | 	sub	objptr, ##50876
16e68     F2 FA 01 F6 | 	mov	result1, objptr
16e6c     00 68 00 FF 
16e70     00 FA 45 F5 | 	or	result1, ##13631488
16e74     63 00 00 FF 
16e78     C0 E4 05 F1 | 	add	objptr, ##50880
16e7c     F2 FA 61 FC | 	wrlong	result1, objptr
16e80     63 00 00 FF 
16e84     C0 E4 85 F1 | 	sub	objptr, ##50880
16e88     F2 FA 01 F6 | 	mov	result1, objptr
16e8c     00 68 00 FF 
16e90     00 FA 45 F5 | 	or	result1, ##13631488
16e94     63 00 00 FF 
16e98     F0 E4 05 F1 | 	add	objptr, ##50928
16e9c     F2 FA 61 FC | 	wrlong	result1, objptr
16ea0     63 00 00 FF 
16ea4     F0 E4 85 F1 | 	sub	objptr, ##50928
16ea8     F2 FA 01 F6 | 	mov	result1, objptr
16eac     55 FA 25 F4 | 	bith	result1, #85
16eb0     63 00 00 FF 
16eb4     A0 E4 05 F1 | 	add	objptr, ##50848
16eb8     F2 FA 61 FC | 	wrlong	result1, objptr
16ebc     63 00 00 FF 
16ec0     A0 E4 85 F1 | 	sub	objptr, ##50848
16ec4     F2 FA 01 F6 | 	mov	result1, objptr
16ec8     00 68 00 FF 
16ecc     00 FA 45 F5 | 	or	result1, ##13631488
16ed0     63 00 00 FF 
16ed4     C4 E4 05 F1 | 	add	objptr, ##50884
16ed8     F2 FA 61 FC | 	wrlong	result1, objptr
16edc     63 00 00 FF 
16ee0     C4 E4 85 F1 | 	sub	objptr, ##50884
16ee4     F2 FA 01 F6 | 	mov	result1, objptr
16ee8     00 68 00 FF 
16eec     00 FA 45 F5 | 	or	result1, ##13631488
16ef0     63 00 00 FF 
16ef4     C8 E4 05 F1 | 	add	objptr, ##50888
16ef8     F2 FA 61 FC | 	wrlong	result1, objptr
16efc     63 00 00 FF 
16f00     C8 E4 85 F1 | 	sub	objptr, ##50888
16f04     F2 FA 01 F6 | 	mov	result1, objptr
16f08     00 68 00 FF 
16f0c     00 FA 45 F5 | 	or	result1, ##13631488
16f10     63 00 00 FF 
16f14     CC E4 05 F1 | 	add	objptr, ##50892
16f18     F2 FA 61 FC | 	wrlong	result1, objptr
16f1c     63 00 00 FF 
16f20     CC E4 85 F1 | 	sub	objptr, ##50892
16f24     F2 FA 01 F6 | 	mov	result1, objptr
16f28     74 FA 25 F4 | 	bith	result1, #116
16f2c     63 00 00 FF 
16f30     44 E5 05 F1 | 	add	objptr, ##51012
16f34     F2 FA 61 FC | 	wrlong	result1, objptr
16f38     63 00 00 FF 
16f3c     44 E5 85 F1 | 	sub	objptr, ##51012
16f40     F2 FA 01 F6 | 	mov	result1, objptr
16f44     18 FA 25 F4 | 	bith	result1, #24
16f48     63 00 00 FF 
16f4c     48 E5 05 F1 | 	add	objptr, ##51016
16f50     F2 FA 61 FC | 	wrlong	result1, objptr
16f54     63 00 00 FF 
16f58     48 E5 85 F1 | 	sub	objptr, ##51016
16f5c     F2 FA 01 F6 | 	mov	result1, objptr
16f60     00 88 00 FF 
16f64     00 FA 45 F5 | 	or	result1, ##17825792
16f68     63 00 00 FF 
16f6c     4C E5 05 F1 | 	add	objptr, ##51020
16f70     F2 FA 61 FC | 	wrlong	result1, objptr
16f74     63 00 00 FF 
16f78     4C E5 85 F1 | 	sub	objptr, ##51020
16f7c     F2 FA 01 F6 | 	mov	result1, objptr
16f80     00 90 00 FF 
16f84     00 FA 45 F5 | 	or	result1, ##18874368
16f88     63 00 00 FF 
16f8c     50 E5 05 F1 | 	add	objptr, ##51024
16f90     F2 FA 61 FC | 	wrlong	result1, objptr
16f94     63 00 00 FF 
16f98     50 E5 85 F1 | 	sub	objptr, ##51024
16f9c     F2 FA 01 F6 | 	mov	result1, objptr
16fa0     00 98 00 FF 
16fa4     00 FA 45 F5 | 	or	result1, ##19922944
16fa8     63 00 00 FF 
16fac     54 E5 05 F1 | 	add	objptr, ##51028
16fb0     F2 FA 61 FC | 	wrlong	result1, objptr
16fb4     63 00 00 FF 
16fb8     54 E5 85 F1 | 	sub	objptr, ##51028
16fbc     F2 FA 01 F6 | 	mov	result1, objptr
16fc0     00 A0 00 FF 
16fc4     00 FA 45 F5 | 	or	result1, ##20971520
16fc8     63 00 00 FF 
16fcc     58 E5 05 F1 | 	add	objptr, ##51032
16fd0     F2 FA 61 FC | 	wrlong	result1, objptr
16fd4     63 00 00 FF 
16fd8     58 E5 85 F1 | 	sub	objptr, ##51032
16fdc     F2 FA 01 F6 | 	mov	result1, objptr
16fe0     00 A8 00 FF 
16fe4     00 FA 45 F5 | 	or	result1, ##22020096
16fe8     63 00 00 FF 
16fec     5C E5 05 F1 | 	add	objptr, ##51036
16ff0     F2 FA 61 FC | 	wrlong	result1, objptr
16ff4     63 00 00 FF 
16ff8     5C E5 85 F1 | 	sub	objptr, ##51036
16ffc     F2 FA 01 F6 | 	mov	result1, objptr
17000     00 B0 00 FF 
17004     00 FA 45 F5 | 	or	result1, ##23068672
17008     63 00 00 FF 
1700c     60 E5 05 F1 | 	add	objptr, ##51040
17010     F2 FA 61 FC | 	wrlong	result1, objptr
17014     63 00 00 FF 
17018     60 E5 85 F1 | 	sub	objptr, ##51040
1701c     F2 FA 01 F6 | 	mov	result1, objptr
17020     00 B8 00 FF 
17024     00 FA 45 F5 | 	or	result1, ##24117248
17028     63 00 00 FF 
1702c     64 E5 05 F1 | 	add	objptr, ##51044
17030     F2 FA 61 FC | 	wrlong	result1, objptr
17034     63 00 00 FF 
17038     64 E5 85 F1 | 	sub	objptr, ##51044
1703c     F2 FA 01 F6 | 	mov	result1, objptr
17040     37 FA 25 F4 | 	bith	result1, #55
17044     63 00 00 FF 
17048     68 E5 05 F1 | 	add	objptr, ##51048
1704c     F2 FA 61 FC | 	wrlong	result1, objptr
17050     63 00 00 FF 
17054     68 E5 85 F1 | 	sub	objptr, ##51048
17058     F2 FA 01 F6 | 	mov	result1, objptr
1705c     00 C8 00 FF 
17060     00 FA 45 F5 | 	or	result1, ##26214400
17064     63 00 00 FF 
17068     6C E5 05 F1 | 	add	objptr, ##51052
1706c     F2 FA 61 FC | 	wrlong	result1, objptr
17070     63 00 00 FF 
17074     6C E5 85 F1 | 	sub	objptr, ##51052
17078     F2 FA 01 F6 | 	mov	result1, objptr
1707c     00 D0 00 FF 
17080     00 FA 45 F5 | 	or	result1, ##27262976
17084     63 00 00 FF 
17088     70 E5 05 F1 | 	add	objptr, ##51056
1708c     F2 FA 61 FC | 	wrlong	result1, objptr
17090     63 00 00 FF 
17094     70 E5 85 F1 | 	sub	objptr, ##51056
17098     F2 FA 01 F6 | 	mov	result1, objptr
1709c     00 D8 00 FF 
170a0     00 FA 45 F5 | 	or	result1, ##28311552
170a4     63 00 00 FF 
170a8     74 E5 05 F1 | 	add	objptr, ##51060
170ac     F2 FA 61 FC | 	wrlong	result1, objptr
170b0     63 00 00 FF 
170b4     74 E5 85 F1 | 	sub	objptr, ##51060
170b8     F2 FA 01 F6 | 	mov	result1, objptr
170bc     56 FA 25 F4 | 	bith	result1, #86
170c0     63 00 00 FF 
170c4     78 E5 05 F1 | 	add	objptr, ##51064
170c8     F2 FA 61 FC | 	wrlong	result1, objptr
170cc     63 00 00 FF 
170d0     78 E5 85 F1 | 	sub	objptr, ##51064
170d4     F2 FA 01 F6 | 	mov	result1, objptr
170d8     00 E8 00 FF 
170dc     00 FA 45 F5 | 	or	result1, ##30408704
170e0     65 00 00 FF 
170e4     40 E4 05 F1 | 	add	objptr, ##51776
170e8     F2 FA 61 FC | 	wrlong	result1, objptr
170ec     65 00 00 FF 
170f0     40 E4 85 F1 | 	sub	objptr, ##51776
170f4     F2 FA 01 F6 | 	mov	result1, objptr
170f8     75 FA 25 F4 | 	bith	result1, #117
170fc     63 00 00 FF 
17100     7C E5 05 F1 | 	add	objptr, ##51068
17104     F2 FA 61 FC | 	wrlong	result1, objptr
17108     63 00 00 FF 
1710c     7C E5 85 F1 | 	sub	objptr, ##51068
17110     F2 FA 01 F6 | 	mov	result1, objptr
17114     94 FA 25 F4 | 	bith	result1, #148
17118     63 00 00 FF 
1711c     90 E5 05 F1 | 	add	objptr, ##51088
17120     F2 FA 61 FC | 	wrlong	result1, objptr
17124     63 00 00 FF 
17128     90 E5 85 F1 | 	sub	objptr, ##51088
1712c     F2 FA 01 F6 | 	mov	result1, objptr
17130     19 FA 25 F4 | 	bith	result1, #25
17134     63 00 00 FF 
17138     80 E5 05 F1 | 	add	objptr, ##51072
1713c     F2 FA 61 FC | 	wrlong	result1, objptr
17140     63 00 00 FF 
17144     80 E5 85 F1 | 	sub	objptr, ##51072
17148     F2 FA 01 F6 | 	mov	result1, objptr
1714c     00 08 01 FF 
17150     00 FA 45 F5 | 	or	result1, ##34603008
17154     63 00 00 FF 
17158     9C E4 05 F1 | 	add	objptr, ##50844
1715c     F2 FA 61 FC | 	wrlong	result1, objptr
17160     63 00 00 FF 
17164     9C E4 85 F1 | 	sub	objptr, ##50844
17168     F2 FA 01 F6 | 	mov	result1, objptr
1716c     00 10 01 FF 
17170     00 FA 45 F5 | 	or	result1, ##35651584
17174     63 00 00 FF 
17178     84 E5 05 F1 | 	add	objptr, ##51076
1717c     F2 FA 61 FC | 	wrlong	result1, objptr
17180     63 00 00 FF 
17184     84 E5 85 F1 | 	sub	objptr, ##51076
17188     F2 FA 01 F6 | 	mov	result1, objptr
1718c     00 18 01 FF 
17190     00 FA 45 F5 | 	or	result1, ##36700160
17194     63 00 00 FF 
17198     88 E5 05 F1 | 	add	objptr, ##51080
1719c     F2 FA 61 FC | 	wrlong	result1, objptr
171a0     63 00 00 FF 
171a4     88 E5 85 F1 | 	sub	objptr, ##51080
171a8     F2 FA 01 F6 | 	mov	result1, objptr
171ac     00 20 01 FF 
171b0     00 FA 45 F5 | 	or	result1, ##37748736
171b4     63 00 00 FF 
171b8     8C E5 05 F1 | 	add	objptr, ##51084
171bc     F2 FA 61 FC | 	wrlong	result1, objptr
171c0     63 00 00 FF 
171c4     8C E5 85 F1 | 	sub	objptr, ##51084
171c8     F2 FA 01 F6 | 	mov	result1, objptr
171cc     00 28 01 FF 
171d0     00 FA 45 F5 | 	or	result1, ##38797312
171d4     63 00 00 FF 
171d8     98 E5 05 F1 | 	add	objptr, ##51096
171dc     F2 FA 61 FC | 	wrlong	result1, objptr
171e0     63 00 00 FF 
171e4     98 E5 85 F1 | 	sub	objptr, ##51096
171e8     F2 FA 01 F6 | 	mov	result1, objptr
171ec     00 30 01 FF 
171f0     00 FA 45 F5 | 	or	result1, ##39845888
171f4     63 00 00 FF 
171f8     9C E5 05 F1 | 	add	objptr, ##51100
171fc     F2 FA 61 FC | 	wrlong	result1, objptr
17200     63 00 00 FF 
17204     9C E5 85 F1 | 	sub	objptr, ##51100
17208     F2 FA 01 F6 | 	mov	result1, objptr
1720c     00 38 01 FF 
17210     00 FA 45 F5 | 	or	result1, ##40894464
17214     63 00 00 FF 
17218     A0 E5 05 F1 | 	add	objptr, ##51104
1721c     F2 FA 61 FC | 	wrlong	result1, objptr
17220     63 00 00 FF 
17224     A0 E5 85 F1 | 	sub	objptr, ##51104
17228     F2 FA 01 F6 | 	mov	result1, objptr
1722c     00 40 01 FF 
17230     00 FA 45 F5 | 	or	result1, ##41943040
17234     63 00 00 FF 
17238     A4 E5 05 F1 | 	add	objptr, ##51108
1723c     F2 FA 61 FC | 	wrlong	result1, objptr
17240     63 00 00 FF 
17244     A4 E5 85 F1 | 	sub	objptr, ##51108
17248     F2 FA 01 F6 | 	mov	result1, objptr
1724c     00 48 01 FF 
17250     00 FA 45 F5 | 	or	result1, ##42991616
17254     63 00 00 FF 
17258     AC E5 05 F1 | 	add	objptr, ##51116
1725c     F2 FA 61 FC | 	wrlong	result1, objptr
17260     63 00 00 FF 
17264     AC E5 85 F1 | 	sub	objptr, ##51116
17268     F2 FA 01 F6 | 	mov	result1, objptr
1726c     00 50 01 FF 
17270     00 FA 45 F5 | 	or	result1, ##44040192
17274     63 00 00 FF 
17278     B0 E5 05 F1 | 	add	objptr, ##51120
1727c     F2 FA 61 FC | 	wrlong	result1, objptr
17280     63 00 00 FF 
17284     B0 E5 85 F1 | 	sub	objptr, ##51120
17288     F2 FA 01 F6 | 	mov	result1, objptr
1728c     00 58 01 FF 
17290     00 FA 45 F5 | 	or	result1, ##45088768
17294     63 00 00 FF 
17298     B0 E4 05 F1 | 	add	objptr, ##50864
1729c     F2 FA 61 FC | 	wrlong	result1, objptr
172a0     63 00 00 FF 
172a4     B0 E4 85 F1 | 	sub	objptr, ##50864
172a8     F2 FA 01 F6 | 	mov	result1, objptr
172ac     00 60 01 FF 
172b0     00 FA 45 F5 | 	or	result1, ##46137344
172b4     63 00 00 FF 
172b8     E0 E4 05 F1 | 	add	objptr, ##50912
172bc     F2 FA 61 FC | 	wrlong	result1, objptr
172c0     63 00 00 FF 
172c4     E0 E4 85 F1 | 	sub	objptr, ##50912
172c8     F2 FA 01 F6 | 	mov	result1, objptr
172cc     00 68 01 FF 
172d0     00 FA 45 F5 | 	or	result1, ##47185920
172d4     63 00 00 FF 
172d8     DC E4 05 F1 | 	add	objptr, ##50908
172dc     F2 FA 61 FC | 	wrlong	result1, objptr
172e0     63 00 00 FF 
172e4     DC E4 85 F1 | 	sub	objptr, ##50908
172e8     F2 FA 01 F6 | 	mov	result1, objptr
172ec     00 70 01 FF 
172f0     00 FA 45 F5 | 	or	result1, ##48234496
172f4     63 00 00 FF 
172f8     80 E4 05 F1 | 	add	objptr, ##50816
172fc     F2 FA 61 FC | 	wrlong	result1, objptr
17300     63 00 00 FF 
17304     80 E4 85 F1 | 	sub	objptr, ##50816
17308     F2 FA 01 F6 | 	mov	result1, objptr
1730c     00 78 01 FF 
17310     00 FA 45 F5 | 	or	result1, ##49283072
17314     63 00 00 FF 
17318     84 E4 05 F1 | 	add	objptr, ##50820
1731c     F2 FA 61 FC | 	wrlong	result1, objptr
17320     63 00 00 FF 
17324     84 E4 85 F1 | 	sub	objptr, ##50820
17328     F2 FA 01 F6 | 	mov	result1, objptr
1732c     38 FA 25 F4 | 	bith	result1, #56
17330     63 00 00 FF 
17334     EC E4 05 F1 | 	add	objptr, ##50924
17338     F2 FA 61 FC | 	wrlong	result1, objptr
1733c     63 00 00 FF 
17340     EC E4 85 F1 | 	sub	objptr, ##50924
17344     F2 FA 01 F6 | 	mov	result1, objptr
17348     00 88 01 FF 
1734c     00 FA 45 F5 | 	or	result1, ##51380224
17350     63 00 00 FF 
17354     94 E5 05 F1 | 	add	objptr, ##51092
17358     F2 FA 61 FC | 	wrlong	result1, objptr
1735c     63 00 00 FF 
17360     94 E5 85 F1 | 	sub	objptr, ##51092
17364     F2 FA 01 F6 | 	mov	result1, objptr
17368     00 90 01 FF 
1736c     00 FA 45 F5 | 	or	result1, ##52428800
17370     63 00 00 FF 
17374     A8 E5 05 F1 | 	add	objptr, ##51112
17378     F2 FA 61 FC | 	wrlong	result1, objptr
1737c     63 00 00 FF 
17380     A8 E5 85 F1 | 	sub	objptr, ##51112
17384     F2 FA 01 F6 | 	mov	result1, objptr
17388     00 98 01 FF 
1738c     00 FA 45 F5 | 	or	result1, ##53477376
17390     63 00 00 FF 
17394     B4 E5 05 F1 | 	add	objptr, ##51124
17398     F2 FA 61 FC | 	wrlong	result1, objptr
1739c     63 00 00 FF 
173a0     B4 E5 85 F1 | 	sub	objptr, ##51124
173a4     F2 FA 01 F6 | 	mov	result1, objptr
173a8     00 A0 01 FF 
173ac     00 FA 45 F5 | 	or	result1, ##54525952
173b0     63 00 00 FF 
173b4     B8 E5 05 F1 | 	add	objptr, ##51128
173b8     F2 FA 61 FC | 	wrlong	result1, objptr
173bc     63 00 00 FF 
173c0     B8 E5 85 F1 | 	sub	objptr, ##51128
173c4     F2 FA 01 F6 | 	mov	result1, objptr
173c8     00 A8 01 FF 
173cc     00 FA 45 F5 | 	or	result1, ##55574528
173d0     63 00 00 FF 
173d4     BC E5 05 F1 | 	add	objptr, ##51132
173d8     F2 FA 61 FC | 	wrlong	result1, objptr
173dc     63 00 00 FF 
173e0     BC E5 85 F1 | 	sub	objptr, ##51132
173e4     F2 FA 01 F6 | 	mov	result1, objptr
173e8     00 B0 01 FF 
173ec     00 FA 45 F5 | 	or	result1, ##56623104
173f0     63 00 00 FF 
173f4     C0 E5 05 F1 | 	add	objptr, ##51136
173f8     F2 FA 61 FC | 	wrlong	result1, objptr
173fc     63 00 00 FF 
17400     C0 E5 85 F1 | 	sub	objptr, ##51136
17404     F2 FA 01 F6 | 	mov	result1, objptr
17408     00 B8 01 FF 
1740c     00 FA 45 F5 | 	or	result1, ##57671680
17410     63 00 00 FF 
17414     C4 E5 05 F1 | 	add	objptr, ##51140
17418     F2 FA 61 FC | 	wrlong	result1, objptr
1741c     63 00 00 FF 
17420     C4 E5 85 F1 | 	sub	objptr, ##51140
17424     F2 FA 01 F6 | 	mov	result1, objptr
17428     57 FA 25 F4 | 	bith	result1, #87
1742c     63 00 00 FF 
17430     C8 E5 05 F1 | 	add	objptr, ##51144
17434     F2 FA 61 FC | 	wrlong	result1, objptr
17438     63 00 00 FF 
1743c     C8 E5 85 F1 | 	sub	objptr, ##51144
17440     F2 FA 01 F6 | 	mov	result1, objptr
17444     94 FA 25 F4 | 	bith	result1, #148
17448     63 00 00 FF 
1744c     90 E5 05 F1 | 	add	objptr, ##51088
17450     F2 FA 61 FC | 	wrlong	result1, objptr
17454     63 00 00 FF 
17458     90 E5 85 F1 | 	sub	objptr, ##51088
1745c     F2 FA 01 F6 | 	mov	result1, objptr
17460     00 C8 01 FF 
17464     00 FA 45 F5 | 	or	result1, ##59768832
17468     63 00 00 FF 
1746c     D0 E5 05 F1 | 	add	objptr, ##51152
17470     F2 FA 61 FC | 	wrlong	result1, objptr
17474     63 00 00 FF 
17478     D0 E5 85 F1 | 	sub	objptr, ##51152
1747c     F2 FA 01 F6 | 	mov	result1, objptr
17480     00 D0 01 FF 
17484     00 FA 45 F5 | 	or	result1, ##60817408
17488     63 00 00 FF 
1748c     CC E5 05 F1 | 	add	objptr, ##51148
17490     F2 FA 61 FC | 	wrlong	result1, objptr
17494     63 00 00 FF 
17498     CC E5 85 F1 | 	sub	objptr, ##51148
1749c     F2 FA 01 F6 | 	mov	result1, objptr
174a0     00 D8 01 FF 
174a4     00 FA 45 F5 | 	or	result1, ##61865984
174a8     63 00 00 FF 
174ac     E4 E5 05 F1 | 	add	objptr, ##51172
174b0     F2 FA 61 FC | 	wrlong	result1, objptr
174b4     63 00 00 FF 
174b8     E4 E5 85 F1 | 	sub	objptr, ##51172
174bc     F2 FA 01 F6 | 	mov	result1, objptr
174c0     76 FA 25 F4 | 	bith	result1, #118
174c4     63 00 00 FF 
174c8     E8 E5 05 F1 | 	add	objptr, ##51176
174cc     F2 FA 61 FC | 	wrlong	result1, objptr
174d0     63 00 00 FF 
174d4     E8 E5 85 F1 | 	sub	objptr, ##51176
174d8     F2 FA 01 F6 | 	mov	result1, objptr
174dc     00 E8 01 FF 
174e0     00 FA 45 F5 | 	or	result1, ##63963136
174e4     63 00 00 FF 
174e8     D4 E5 05 F1 | 	add	objptr, ##51156
174ec     F2 FA 61 FC | 	wrlong	result1, objptr
174f0     63 00 00 FF 
174f4     D4 E5 85 F1 | 	sub	objptr, ##51156
174f8     F2 FA 01 F6 | 	mov	result1, objptr
174fc     95 FA 25 F4 | 	bith	result1, #149
17500     63 00 00 FF 
17504     D8 E5 05 F1 | 	add	objptr, ##51160
17508     F2 FA 61 FC | 	wrlong	result1, objptr
1750c     63 00 00 FF 
17510     D8 E5 85 F1 | 	sub	objptr, ##51160
17514     F2 FA 01 F6 | 	mov	result1, objptr
17518     B4 FA 25 F4 | 	bith	result1, #180
1751c     63 00 00 FF 
17520     DC E5 05 F1 | 	add	objptr, ##51164
17524     F2 FA 61 FC | 	wrlong	result1, objptr
17528     63 00 00 FF 
1752c     DC E5 85 F1 | 	sub	objptr, ##51164
17530     F2 FA 01 F6 | 	mov	result1, objptr
17534     1A FA 25 F4 | 	bith	result1, #26
17538     63 00 00 FF 
1753c     E0 E5 05 F1 | 	add	objptr, ##51168
17540     F2 FA 61 FC | 	wrlong	result1, objptr
17544     63 00 00 FF 
17548     E0 E5 85 F1 | 	sub	objptr, ##51168
1754c     F2 FA 01 F6 | 	mov	result1, objptr
17550     00 08 02 FF 
17554     00 FA 45 F5 | 	or	result1, ##68157440
17558     63 00 00 FF 
1755c     F0 E5 05 F1 | 	add	objptr, ##51184
17560     F2 FA 61 FC | 	wrlong	result1, objptr
17564     63 00 00 FF 
17568     F0 E5 85 F1 | 	sub	objptr, ##51184
1756c     F2 FA 01 F6 | 	mov	result1, objptr
17570     00 10 02 FF 
17574     00 FA 45 F5 | 	or	result1, ##69206016
17578     63 00 00 FF 
1757c     EC E5 05 F1 | 	add	objptr, ##51180
17580     F2 FA 61 FC | 	wrlong	result1, objptr
17584     63 00 00 FF 
17588     EC E5 85 F1 | 	sub	objptr, ##51180
1758c     F2 FA 01 F6 | 	mov	result1, objptr
17590     00 18 02 FF 
17594     00 FA 45 F5 | 	or	result1, ##70254592
17598     63 00 00 FF 
1759c     FC E5 05 F1 | 	add	objptr, ##51196
175a0     F2 FA 61 FC | 	wrlong	result1, objptr
175a4     63 00 00 FF 
175a8     FC E5 85 F1 | 	sub	objptr, ##51196
175ac     F2 FA 01 F6 | 	mov	result1, objptr
175b0     00 20 02 FF 
175b4     00 FA 45 F5 | 	or	result1, ##71303168
175b8     63 00 00 FF 
175bc     F8 E5 05 F1 | 	add	objptr, ##51192
175c0     F2 FA 61 FC | 	wrlong	result1, objptr
175c4     63 00 00 FF 
175c8     F8 E5 85 F1 | 	sub	objptr, ##51192
175cc     F2 FA 01 F6 | 	mov	result1, objptr
175d0     00 28 02 FF 
175d4     00 FA 45 F5 | 	or	result1, ##72351744
175d8     63 00 00 FF 
175dc     F4 E5 05 F1 | 	add	objptr, ##51188
175e0     F2 FA 61 FC | 	wrlong	result1, objptr
175e4     63 00 00 FF 
175e8     F4 E5 85 F1 | 	sub	objptr, ##51188
175ec     F2 FA 01 F6 | 	mov	result1, objptr
175f0     00 30 02 FF 
175f4     00 FA 45 F5 | 	or	result1, ##73400320
175f8     64 00 00 FF 
175fc     00 E4 05 F1 | 	add	objptr, ##51200
17600     F2 FA 61 FC | 	wrlong	result1, objptr
17604     64 00 00 FF 
17608     00 E4 85 F1 | 	sub	objptr, ##51200
1760c     F2 FA 01 F6 | 	mov	result1, objptr
17610     00 38 02 FF 
17614     00 FA 45 F5 | 	or	result1, ##74448896
17618     64 00 00 FF 
1761c     04 E4 05 F1 | 	add	objptr, ##51204
17620     F2 FA 61 FC | 	wrlong	result1, objptr
17624     64 00 00 FF 
17628     04 E4 85 F1 | 	sub	objptr, ##51204
1762c     F2 FA 01 F6 | 	mov	result1, objptr
17630     00 40 02 FF 
17634     00 FA 45 F5 | 	or	result1, ##75497472
17638     63 00 00 FF 
1763c     98 E4 05 F1 | 	add	objptr, ##50840
17640     F2 FA 61 FC | 	wrlong	result1, objptr
17644     63 00 00 FF 
17648     98 E4 85 F1 | 	sub	objptr, ##50840
1764c     F2 FA 01 F6 | 	mov	result1, objptr
17650     00 48 02 FF 
17654     00 FA 45 F5 | 	or	result1, ##76546048
17658     64 00 00 FF 
1765c     1C E4 05 F1 | 	add	objptr, ##51228
17660     F2 FA 61 FC | 	wrlong	result1, objptr
17664     64 00 00 FF 
17668     1C E4 85 F1 | 	sub	objptr, ##51228
1766c     F2 FA 01 F6 | 	mov	result1, objptr
17670     00 50 02 FF 
17674     00 FA 45 F5 | 	or	result1, ##77594624
17678     64 00 00 FF 
1767c     2C E4 05 F1 | 	add	objptr, ##51244
17680     F2 FA 61 FC | 	wrlong	result1, objptr
17684     64 00 00 FF 
17688     2C E4 85 F1 | 	sub	objptr, ##51244
1768c     F2 FA 01 F6 | 	mov	result1, objptr
17690     00 58 02 FF 
17694     00 FA 45 F5 | 	or	result1, ##78643200
17698     64 00 00 FF 
1769c     30 E4 05 F1 | 	add	objptr, ##51248
176a0     F2 FA 61 FC | 	wrlong	result1, objptr
176a4     64 00 00 FF 
176a8     30 E4 85 F1 | 	sub	objptr, ##51248
176ac     F2 FA 01 F6 | 	mov	result1, objptr
176b0     00 60 02 FF 
176b4     00 FA 45 F5 | 	or	result1, ##79691776
176b8     64 00 00 FF 
176bc     28 E4 05 F1 | 	add	objptr, ##51240
176c0     F2 FA 61 FC | 	wrlong	result1, objptr
176c4     64 00 00 FF 
176c8     28 E4 85 F1 | 	sub	objptr, ##51240
176cc     F2 FA 01 F6 | 	mov	result1, objptr
176d0     00 68 02 FF 
176d4     00 FA 45 F5 | 	or	result1, ##80740352
176d8     64 00 00 FF 
176dc     20 E4 05 F1 | 	add	objptr, ##51232
176e0     F2 FA 61 FC | 	wrlong	result1, objptr
176e4     64 00 00 FF 
176e8     20 E4 85 F1 | 	sub	objptr, ##51232
176ec     F2 FA 01 F6 | 	mov	result1, objptr
176f0     00 70 02 FF 
176f4     00 FA 45 F5 | 	or	result1, ##81788928
176f8     64 00 00 FF 
176fc     24 E4 05 F1 | 	add	objptr, ##51236
17700     F2 FA 61 FC | 	wrlong	result1, objptr
17704     64 00 00 FF 
17708     24 E4 85 F1 | 	sub	objptr, ##51236
1770c     F2 FA 01 F6 | 	mov	result1, objptr
17710     00 78 02 FF 
17714     00 FA 45 F5 | 	or	result1, ##82837504
17718     64 00 00 FF 
1771c     34 E4 05 F1 | 	add	objptr, ##51252
17720     F2 FA 61 FC | 	wrlong	result1, objptr
17724     64 00 00 FF 
17728     34 E4 85 F1 | 	sub	objptr, ##51252
1772c     F2 FA 01 F6 | 	mov	result1, objptr
17730     00 80 02 FF 
17734     00 FA 45 F5 | 	or	result1, ##83886080
17738     64 00 00 FF 
1773c     38 E4 05 F1 | 	add	objptr, ##51256
17740     F2 FA 61 FC | 	wrlong	result1, objptr
17744     64 00 00 FF 
17748     38 E4 85 F1 | 	sub	objptr, ##51256
1774c     F2 FA 01 F6 | 	mov	result1, objptr
17750     00 88 02 FF 
17754     00 FA 45 F5 | 	or	result1, ##84934656
17758     64 00 00 FF 
1775c     3C E4 05 F1 | 	add	objptr, ##51260
17760     F2 FA 61 FC | 	wrlong	result1, objptr
17764     64 00 00 FF 
17768     3C E4 85 F1 | 	sub	objptr, ##51260
1776c     F2 FA 01 F6 | 	mov	result1, objptr
17770     00 90 02 FF 
17774     00 FA 45 F5 | 	or	result1, ##85983232
17778     64 00 00 FF 
1777c     40 E4 05 F1 | 	add	objptr, ##51264
17780     F2 FA 61 FC | 	wrlong	result1, objptr
17784     64 00 00 FF 
17788     40 E4 85 F1 | 	sub	objptr, ##51264
1778c     F2 FA 01 F6 | 	mov	result1, objptr
17790     00 98 02 FF 
17794     00 FA 45 F5 | 	or	result1, ##87031808
17798     64 00 00 FF 
1779c     44 E4 05 F1 | 	add	objptr, ##51268
177a0     F2 FA 61 FC | 	wrlong	result1, objptr
177a4     64 00 00 FF 
177a8     44 E4 85 F1 | 	sub	objptr, ##51268
177ac     F2 FA 01 F6 | 	mov	result1, objptr
177b0     00 A0 02 FF 
177b4     00 FA 45 F5 | 	or	result1, ##88080384
177b8     64 00 00 FF 
177bc     48 E4 05 F1 | 	add	objptr, ##51272
177c0     F2 FA 61 FC | 	wrlong	result1, objptr
177c4     64 00 00 FF 
177c8     48 E4 85 F1 | 	sub	objptr, ##51272
177cc     F2 FA 01 F6 | 	mov	result1, objptr
177d0     00 A8 02 FF 
177d4     00 FA 45 F5 | 	or	result1, ##89128960
177d8     64 00 00 FF 
177dc     4C E4 05 F1 | 	add	objptr, ##51276
177e0     F2 FA 61 FC | 	wrlong	result1, objptr
177e4     64 00 00 FF 
177e8     4C E4 85 F1 | 	sub	objptr, ##51276
177ec     F2 FA 01 F6 | 	mov	result1, objptr
177f0     00 B0 02 FF 
177f4     00 FA 45 F5 | 	or	result1, ##90177536
177f8     64 00 00 FF 
177fc     50 E4 05 F1 | 	add	objptr, ##51280
17800     F2 FA 61 FC | 	wrlong	result1, objptr
17804     64 00 00 FF 
17808     50 E4 85 F1 | 	sub	objptr, ##51280
1780c     F2 FA 01 F6 | 	mov	result1, objptr
17810     00 B8 02 FF 
17814     00 FA 45 F5 | 	or	result1, ##91226112
17818     64 00 00 FF 
1781c     5C E4 05 F1 | 	add	objptr, ##51292
17820     F2 FA 61 FC | 	wrlong	result1, objptr
17824     64 00 00 FF 
17828     5C E4 85 F1 | 	sub	objptr, ##51292
1782c     F2 FA 01 F6 | 	mov	result1, objptr
17830     00 C0 02 FF 
17834     00 FA 45 F5 | 	or	result1, ##92274688
17838     64 00 00 FF 
1783c     54 E4 05 F1 | 	add	objptr, ##51284
17840     F2 FA 61 FC | 	wrlong	result1, objptr
17844     64 00 00 FF 
17848     54 E4 85 F1 | 	sub	objptr, ##51284
1784c     F2 FA 01 F6 | 	mov	result1, objptr
17850     00 C8 02 FF 
17854     00 FA 45 F5 | 	or	result1, ##93323264
17858     64 00 00 FF 
1785c     58 E4 05 F1 | 	add	objptr, ##51288
17860     F2 FA 61 FC | 	wrlong	result1, objptr
17864     64 00 00 FF 
17868     58 E4 85 F1 | 	sub	objptr, ##51288
1786c     F2 FA 01 F6 | 	mov	result1, objptr
17870     00 D0 02 FF 
17874     00 FA 45 F5 | 	or	result1, ##94371840
17878     64 00 00 FF 
1787c     60 E4 05 F1 | 	add	objptr, ##51296
17880     F2 FA 61 FC | 	wrlong	result1, objptr
17884     64 00 00 FF 
17888     60 E4 85 F1 | 	sub	objptr, ##51296
1788c     F2 FA 01 F6 | 	mov	result1, objptr
17890     00 D8 02 FF 
17894     00 FA 45 F5 | 	or	result1, ##95420416
17898     64 00 00 FF 
1789c     08 E4 05 F1 | 	add	objptr, ##51208
178a0     F2 FA 61 FC | 	wrlong	result1, objptr
178a4     64 00 00 FF 
178a8     08 E4 85 F1 | 	sub	objptr, ##51208
178ac     F2 FA 01 F6 | 	mov	result1, objptr
178b0     00 E0 02 FF 
178b4     00 FA 45 F5 | 	or	result1, ##96468992
178b8     64 00 00 FF 
178bc     10 E4 05 F1 | 	add	objptr, ##51216
178c0     F2 FA 61 FC | 	wrlong	result1, objptr
178c4     64 00 00 FF 
178c8     10 E4 85 F1 | 	sub	objptr, ##51216
178cc     F2 FA 01 F6 | 	mov	result1, objptr
178d0     00 E8 02 FF 
178d4     00 FA 45 F5 | 	or	result1, ##97517568
178d8     64 00 00 FF 
178dc     14 E4 05 F1 | 	add	objptr, ##51220
178e0     F2 FA 61 FC | 	wrlong	result1, objptr
178e4     64 00 00 FF 
178e8     14 E4 85 F1 | 	sub	objptr, ##51220
178ec     F2 FA 01 F6 | 	mov	result1, objptr
178f0     00 F0 02 FF 
178f4     00 FA 45 F5 | 	or	result1, ##98566144
178f8     64 00 00 FF 
178fc     64 E4 05 F1 | 	add	objptr, ##51300
17900     F2 FA 61 FC | 	wrlong	result1, objptr
17904     64 00 00 FF 
17908     64 E4 85 F1 | 	sub	objptr, ##51300
1790c     F2 FA 01 F6 | 	mov	result1, objptr
17910     00 F8 02 FF 
17914     00 FA 45 F5 | 	or	result1, ##99614720
17918     64 00 00 FF 
1791c     68 E4 05 F1 | 	add	objptr, ##51304
17920     F2 FA 61 FC | 	wrlong	result1, objptr
17924     64 00 00 FF 
17928     68 E4 85 F1 | 	sub	objptr, ##51304
1792c     F2 FA 01 F6 | 	mov	result1, objptr
17930     39 FA 25 F4 | 	bith	result1, #57
17934     64 00 00 FF 
17938     6C E4 05 F1 | 	add	objptr, ##51308
1793c     F2 FA 61 FC | 	wrlong	result1, objptr
17940     64 00 00 FF 
17944     6C E4 85 F1 | 	sub	objptr, ##51308
17948     F2 FA 01 F6 | 	mov	result1, objptr
1794c     00 08 03 FF 
17950     00 FA 45 F5 | 	or	result1, ##101711872
17954     64 00 00 FF 
17958     18 E4 05 F1 | 	add	objptr, ##51224
1795c     F2 FA 61 FC | 	wrlong	result1, objptr
17960     64 00 00 FF 
17964     18 E4 85 F1 | 	sub	objptr, ##51224
17968     F2 FA 01 F6 | 	mov	result1, objptr
1796c     00 10 03 FF 
17970     00 FA 45 F5 | 	or	result1, ##102760448
17974     64 00 00 FF 
17978     7C E4 05 F1 | 	add	objptr, ##51324
1797c     F2 FA 61 FC | 	wrlong	result1, objptr
17980     64 00 00 FF 
17984     7C E4 85 F1 | 	sub	objptr, ##51324
17988     F2 FA 01 F6 | 	mov	result1, objptr
1798c     00 18 03 FF 
17990     00 FA 45 F5 | 	or	result1, ##103809024
17994     64 00 00 FF 
17998     84 E4 05 F1 | 	add	objptr, ##51332
1799c     F2 FA 61 FC | 	wrlong	result1, objptr
179a0     64 00 00 FF 
179a4     84 E4 85 F1 | 	sub	objptr, ##51332
179a8     F2 FA 01 F6 | 	mov	result1, objptr
179ac     00 20 03 FF 
179b0     00 FA 45 F5 | 	or	result1, ##104857600
179b4     64 00 00 FF 
179b8     78 E4 05 F1 | 	add	objptr, ##51320
179bc     F2 FA 61 FC | 	wrlong	result1, objptr
179c0     64 00 00 FF 
179c4     78 E4 85 F1 | 	sub	objptr, ##51320
179c8     F2 FA 01 F6 | 	mov	result1, objptr
179cc     00 28 03 FF 
179d0     00 FA 45 F5 | 	or	result1, ##105906176
179d4     64 00 00 FF 
179d8     74 E4 05 F1 | 	add	objptr, ##51316
179dc     F2 FA 61 FC | 	wrlong	result1, objptr
179e0     64 00 00 FF 
179e4     74 E4 85 F1 | 	sub	objptr, ##51316
179e8     F2 FA 01 F6 | 	mov	result1, objptr
179ec     00 30 03 FF 
179f0     00 FA 45 F5 | 	or	result1, ##106954752
179f4     64 00 00 FF 
179f8     70 E4 05 F1 | 	add	objptr, ##51312
179fc     F2 FA 61 FC | 	wrlong	result1, objptr
17a00     64 00 00 FF 
17a04     70 E4 85 F1 | 	sub	objptr, ##51312
17a08     F2 FA 01 F6 | 	mov	result1, objptr
17a0c     00 38 03 FF 
17a10     00 FA 45 F5 | 	or	result1, ##108003328
17a14     64 00 00 FF 
17a18     80 E4 05 F1 | 	add	objptr, ##51328
17a1c     F2 FA 61 FC | 	wrlong	result1, objptr
17a20     64 00 00 FF 
17a24     80 E4 85 F1 | 	sub	objptr, ##51328
17a28     F2 FA 01 F6 | 	mov	result1, objptr
17a2c     00 40 03 FF 
17a30     00 FA 45 F5 | 	or	result1, ##109051904
17a34     64 00 00 FF 
17a38     88 E4 05 F1 | 	add	objptr, ##51336
17a3c     F2 FA 61 FC | 	wrlong	result1, objptr
17a40     64 00 00 FF 
17a44     88 E4 85 F1 | 	sub	objptr, ##51336
17a48     F2 FA 01 F6 | 	mov	result1, objptr
17a4c     00 48 03 FF 
17a50     00 FA 45 F5 | 	or	result1, ##110100480
17a54     64 00 00 FF 
17a58     8C E4 05 F1 | 	add	objptr, ##51340
17a5c     F2 FA 61 FC | 	wrlong	result1, objptr
17a60     64 00 00 FF 
17a64     8C E4 85 F1 | 	sub	objptr, ##51340
17a68     F2 FA 01 F6 | 	mov	result1, objptr
17a6c     00 50 03 FF 
17a70     00 FA 45 F5 | 	or	result1, ##111149056
17a74     64 00 00 FF 
17a78     90 E4 05 F1 | 	add	objptr, ##51344
17a7c     F2 FA 61 FC | 	wrlong	result1, objptr
17a80     64 00 00 FF 
17a84     90 E4 85 F1 | 	sub	objptr, ##51344
17a88     F2 FA 01 F6 | 	mov	result1, objptr
17a8c     00 58 03 FF 
17a90     00 FA 45 F5 | 	or	result1, ##112197632
17a94     64 00 00 FF 
17a98     98 E4 05 F1 | 	add	objptr, ##51352
17a9c     F2 FA 61 FC | 	wrlong	result1, objptr
17aa0     64 00 00 FF 
17aa4     98 E4 85 F1 | 	sub	objptr, ##51352
17aa8     F2 FA 01 F6 | 	mov	result1, objptr
17aac     00 60 03 FF 
17ab0     00 FA 45 F5 | 	or	result1, ##113246208
17ab4     64 00 00 FF 
17ab8     9C E4 05 F1 | 	add	objptr, ##51356
17abc     F2 FA 61 FC | 	wrlong	result1, objptr
17ac0     64 00 00 FF 
17ac4     9C E4 85 F1 | 	sub	objptr, ##51356
17ac8     F2 FA 01 F6 | 	mov	result1, objptr
17acc     00 68 03 FF 
17ad0     00 FA 45 F5 | 	or	result1, ##114294784
17ad4     64 00 00 FF 
17ad8     A0 E4 05 F1 | 	add	objptr, ##51360
17adc     F2 FA 61 FC | 	wrlong	result1, objptr
17ae0     64 00 00 FF 
17ae4     A0 E4 85 F1 | 	sub	objptr, ##51360
17ae8     F2 FA 01 F6 | 	mov	result1, objptr
17aec     00 70 03 FF 
17af0     00 FA 45 F5 | 	or	result1, ##115343360
17af4     64 00 00 FF 
17af8     A4 E4 05 F1 | 	add	objptr, ##51364
17afc     F2 FA 61 FC | 	wrlong	result1, objptr
17b00     64 00 00 FF 
17b04     A4 E4 85 F1 | 	sub	objptr, ##51364
17b08     F2 FA 01 F6 | 	mov	result1, objptr
17b0c     00 78 03 FF 
17b10     00 FA 45 F5 | 	or	result1, ##116391936
17b14     64 00 00 FF 
17b18     A8 E4 05 F1 | 	add	objptr, ##51368
17b1c     F2 FA 61 FC | 	wrlong	result1, objptr
17b20     64 00 00 FF 
17b24     A8 E4 85 F1 | 	sub	objptr, ##51368
17b28     F2 FA 01 F6 | 	mov	result1, objptr
17b2c     58 FA 25 F4 | 	bith	result1, #88
17b30     64 00 00 FF 
17b34     AC E4 05 F1 | 	add	objptr, ##51372
17b38     F2 FA 61 FC | 	wrlong	result1, objptr
17b3c     64 00 00 FF 
17b40     AC E4 85 F1 | 	sub	objptr, ##51372
17b44     F2 FA 01 F6 | 	mov	result1, objptr
17b48     00 88 03 FF 
17b4c     00 FA 45 F5 | 	or	result1, ##118489088
17b50     64 00 00 FF 
17b54     B0 E4 05 F1 | 	add	objptr, ##51376
17b58     F2 FA 61 FC | 	wrlong	result1, objptr
17b5c     64 00 00 FF 
17b60     B0 E4 85 F1 | 	sub	objptr, ##51376
17b64     F2 FA 01 F6 | 	mov	result1, objptr
17b68     00 90 03 FF 
17b6c     00 FA 45 F5 | 	or	result1, ##119537664
17b70     64 00 00 FF 
17b74     B4 E4 05 F1 | 	add	objptr, ##51380
17b78     F2 FA 61 FC | 	wrlong	result1, objptr
17b7c     64 00 00 FF 
17b80     B4 E4 85 F1 | 	sub	objptr, ##51380
17b84     F2 FA 01 F6 | 	mov	result1, objptr
17b88     00 98 03 FF 
17b8c     00 FA 45 F5 | 	or	result1, ##120586240
17b90     64 00 00 FF 
17b94     94 E4 05 F1 | 	add	objptr, ##51348
17b98     F2 FA 61 FC | 	wrlong	result1, objptr
17b9c     64 00 00 FF 
17ba0     94 E4 85 F1 | 	sub	objptr, ##51348
17ba4     F2 FA 01 F6 | 	mov	result1, objptr
17ba8     00 A0 03 FF 
17bac     00 FA 45 F5 | 	or	result1, ##121634816
17bb0     63 00 00 FF 
17bb4     8C E4 05 F1 | 	add	objptr, ##50828
17bb8     F2 FA 61 FC | 	wrlong	result1, objptr
17bbc     63 00 00 FF 
17bc0     8C E4 85 F1 | 	sub	objptr, ##50828
17bc4                 | _init_commands_ret
17bc4     2D 00 64 FD | 	ret
17bc8                 | 
17bc8                 | ' 
17bc8                 | ' ''--------------------------------Error strings -------------------------------------
17bc8                 | ' sub init_audio
17bc8                 | _init_audio
17bc8     05 4A 05 F6 | 	mov	COUNT_, #5
17bcc     A8 00 A0 FD | 	call	#pushregs_
17bd0     00 C0 1F FF 
17bd4     00 1E 06 F6 | 	mov	local01, ##1065353216
17bd8                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
17bd8     00 20 06 F6 | 	mov	local02, #0
17bdc                 | LR__1870
17bdc     10 23 02 F6 | 	mov	local03, local02
17be0     01 22 66 F0 | 	shl	local03, #1
17be4     0C 00 00 FF 
17be8     CC E4 05 F1 | 	add	objptr, ##6348
17bec     F2 22 02 F1 | 	add	local03, objptr
17bf0     58 7F 23 FF 
17bf4     00 24 06 F6 | 	mov	local04, ##1191096320
17bf8     0C 00 00 FF 
17bfc     CC E4 85 F1 | 	sub	objptr, ##6348
17c00     10 13 52 F6 | 	abs	arg01, local02 wc
17c04     1F 26 C6 C9 |  if_b	decod	local05, #31
17c08     00 26 06 36 |  if_ae	mov	local05, #0
17c0c     A8 69 B0 FD | 	call	#__system___float_fromuns
17c10     13 FB 61 F5 | 	xor	result1, local05
17c14     FD 12 02 F6 | 	mov	arg01, result1
17c18     87 24 20 FF 
17c1c     DB 15 06 F6 | 	mov	arg02, ##1078530011
17c20     98 6D B0 FD | 	call	#__system___float_mul
17c24     FD 12 02 F6 | 	mov	arg01, result1
17c28     00 00 22 FF 
17c2c     00 14 06 F6 | 	mov	arg02, ##1140850688
17c30     8C 6F B0 FD | 	call	#__system___float_div
17c34     FD 12 02 F6 | 	mov	arg01, result1
17c38     BC 76 B0 FD | 	call	#__system____builtin_sinf
17c3c     FD 14 02 F6 | 	mov	arg02, result1
17c40     12 13 02 F6 | 	mov	arg01, local04
17c44     74 6D B0 FD | 	call	#__system___float_mul
17c48     FD 12 02 F6 | 	mov	arg01, result1
17c4c     01 14 06 F6 | 	mov	arg02, #1
17c50     30 72 B0 FD | 	call	#__system___float_tointeger
17c54     11 FB 51 FC | 	wrword	result1, local03
17c58     01 20 06 F1 | 	add	local02, #1
17c5c     02 00 00 FF 
17c60     00 20 56 F2 | 	cmps	local02, ##1024 wc
17c64     74 FF 9F CD |  if_b	jmp	#LR__1870
17c68                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
17c68     00 20 06 F6 | 	mov	local02, #0
17c6c     10 00 00 FF 
17c70     CC E4 05 F1 | 	add	objptr, ##8396
17c74     97 6A 48 FB | 	callpa	#(@LR__1874-@LR__1871)>>2,fcache_load_ptr_
17c78                 | LR__1871
17c78     10 23 02 F6 | 	mov	local03, local02
17c7c     01 22 66 F0 | 	shl	local03, #1
17c80     F2 22 02 F1 | 	add	local03, objptr
17c84     10 27 02 F6 | 	mov	local05, local02
17c88     07 26 66 F0 | 	shl	local05, #7
17c8c     10 27 82 F1 | 	sub	local05, local02
17c90     C0 FF 7F FF 
17c94     00 25 06 F6 | 	mov	local04, ##-32512
17c98     13 25 02 F1 | 	add	local04, local05
17c9c     11 25 52 FC | 	wrword	local04, local03
17ca0     09 22 C6 F9 | 	decod	local03, #9
17ca4     10 23 02 F1 | 	add	local03, local02
17ca8     01 22 66 F0 | 	shl	local03, #1
17cac     F2 22 02 F1 | 	add	local03, objptr
17cb0     10 25 02 F6 | 	mov	local04, local02
17cb4     01 24 66 F0 | 	shl	local04, #1
17cb8     F2 24 02 F1 | 	add	local04, objptr
17cbc     12 25 E2 FA | 	rdword	local04, local04
17cc0     0F 24 66 F7 | 	signx	local04, #15
17cc4     12 25 62 F6 | 	neg	local04, local04
17cc8     11 25 52 FC | 	wrword	local04, local03
17ccc     01 20 06 F1 | 	add	local02, #1
17cd0     01 00 00 FF 
17cd4     00 20 56 F2 | 	cmps	local02, ##512 wc
17cd8     9C FF 9F CD |  if_b	jmp	#LR__1871
17cdc                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
17cdc     00 20 06 F6 | 	mov	local02, #0
17ce0     04 00 00 FF 
17ce4     00 E4 05 F1 | 	add	objptr, ##2048
17ce8                 | LR__1872
17ce8     10 23 02 F6 | 	mov	local03, local02
17cec     01 22 66 F0 | 	shl	local03, #1
17cf0     F2 22 02 F1 | 	add	local03, objptr
17cf4     10 27 02 F6 | 	mov	local05, local02
17cf8     06 26 66 F0 | 	shl	local05, #6
17cfc     10 27 82 F1 | 	sub	local05, local02
17d00     C1 FF 7F FF 
17d04     00 24 06 F6 | 	mov	local04, ##-32256
17d08     13 25 02 F1 | 	add	local04, local05
17d0c     11 25 52 FC | 	wrword	local04, local03
17d10     01 20 06 F1 | 	add	local02, #1
17d14     02 00 00 FF 
17d18     00 20 56 F2 | 	cmps	local02, ##1024 wc
17d1c     C8 FF 9F CD |  if_b	jmp	#LR__1872
17d20                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
17d20     00 20 06 F6 | 	mov	local02, #0
17d24     04 00 00 FF 
17d28     00 E4 05 F1 | 	add	objptr, ##2048
17d2c                 | LR__1873
17d2c     10 23 02 F6 | 	mov	local03, local02
17d30     01 22 66 F0 | 	shl	local03, #1
17d34     F2 22 02 F1 | 	add	local03, objptr
17d38     40 00 80 FF 
17d3c     11 51 59 FC | 	wrword	##32936, local03
17d40     01 20 06 F1 | 	add	local02, #1
17d44     80 20 56 F2 | 	cmps	local02, #128 wc
17d48     E0 FF 9F CD |  if_b	jmp	#LR__1873
17d4c                 | LR__1874
17d4c     80 20 06 F6 | 	mov	local02, #128
17d50     97 68 48 FB | 	callpa	#(@LR__1880-@LR__1875)>>2,fcache_load_ptr_
17d54                 | LR__1875
17d54     10 23 02 F6 | 	mov	local03, local02
17d58     01 22 66 F0 | 	shl	local03, #1
17d5c     F2 22 02 F1 | 	add	local03, objptr
17d60     3F 00 80 FF 
17d64     11 B1 5A FC | 	wrword	##32600, local03
17d68     01 20 06 F1 | 	add	local02, #1
17d6c     02 00 00 FF 
17d70     00 20 16 F2 | 	cmp	local02, ##1024 wc
17d74     DC FF 9F CD |  if_b	jmp	#LR__1875
17d78                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
17d78     00 20 06 F6 | 	mov	local02, #0
17d7c     04 00 00 FF 
17d80     00 E4 05 F1 | 	add	objptr, ##2048
17d84                 | LR__1876
17d84     10 23 02 F6 | 	mov	local03, local02
17d88     01 22 66 F0 | 	shl	local03, #1
17d8c     F2 22 02 F1 | 	add	local03, objptr
17d90     40 00 80 FF 
17d94     11 51 59 FC | 	wrword	##32936, local03
17d98     01 20 06 F1 | 	add	local02, #1
17d9c     01 00 00 FF 
17da0     00 20 56 F2 | 	cmps	local02, ##512 wc
17da4     DC FF 9F CD |  if_b	jmp	#LR__1876
17da8     09 20 C6 F9 | 	decod	local02, #9
17dac                 | LR__1877
17dac     10 23 02 F6 | 	mov	local03, local02
17db0     01 22 66 F0 | 	shl	local03, #1
17db4     F2 22 02 F1 | 	add	local03, objptr
17db8     3F 00 80 FF 
17dbc     11 B1 5A FC | 	wrword	##32600, local03
17dc0     01 20 06 F1 | 	add	local02, #1
17dc4     02 00 00 FF 
17dc8     00 20 16 F2 | 	cmp	local02, ##1024 wc
17dcc     DC FF 9F CD |  if_b	jmp	#LR__1877
17dd0                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
17dd0     00 20 06 F6 | 	mov	local02, #0
17dd4     04 00 00 FF 
17dd8     00 E4 05 F1 | 	add	objptr, ##2048
17ddc                 | LR__1878
17ddc     10 23 02 F6 | 	mov	local03, local02
17de0     01 22 66 F0 | 	shl	local03, #1
17de4     F2 22 02 F1 | 	add	local03, objptr
17de8     40 00 80 FF 
17dec     11 51 59 FC | 	wrword	##32936, local03
17df0     01 20 06 F1 | 	add	local02, #1
17df4     00 21 56 F2 | 	cmps	local02, #256 wc
17df8     E0 FF 9F CD |  if_b	jmp	#LR__1878
17dfc     00 21 06 F6 | 	mov	local02, #256
17e00                 | LR__1879
17e00     10 23 02 F6 | 	mov	local03, local02
17e04     01 22 66 F0 | 	shl	local03, #1
17e08     F2 22 02 F1 | 	add	local03, objptr
17e0c     3F 00 80 FF 
17e10     11 B1 5A FC | 	wrword	##32600, local03
17e14     01 20 06 F1 | 	add	local02, #1
17e18     02 00 00 FF 
17e1c     00 20 16 F2 | 	cmp	local02, ##1024 wc
17e20     DC FF 9F CD |  if_b	jmp	#LR__1879
17e24                 | LR__1880
17e24                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
17e24     00 20 06 F6 | 	mov	local02, #0
17e28     04 00 00 FF 
17e2c     00 E4 05 F1 | 	add	objptr, ##2048
17e30     14 00 00 FF 
17e34     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
17e38     97 1C 48 FB | 	callpa	#(@LR__1882-@LR__1881)>>2,fcache_load_ptr_
17e3c                 | LR__1881
17e3c     10 23 02 F6 | 	mov	local03, local02
17e40     01 22 66 F0 | 	shl	local03, #1
17e44     F2 22 02 F1 | 	add	local03, objptr
17e48     F5 12 02 F6 | 	mov	arg01, ptr__dat__
17e4c     10 12 06 F1 | 	add	arg01, #16
17e50     10 FB 01 F6 | 	mov	result1, local02
17e54     01 FA 65 F0 | 	shl	result1, #1
17e58     FD 12 02 F1 | 	add	arg01, result1
17e5c     09 FB E1 FA | 	rdword	result1, arg01
17e60     11 FB 51 FC | 	wrword	result1, local03
17e64     01 20 06 F1 | 	add	local02, #1
17e68     02 00 00 FF 
17e6c     00 20 56 F2 | 	cmps	local02, ##1024 wc
17e70     C8 FF 9F CD |  if_b	jmp	#LR__1881
17e74                 | LR__1882
17e74                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
17e74     00 20 06 F6 | 	mov	local02, #0
17e78     04 00 00 FF 
17e7c     00 E4 05 F1 | 	add	objptr, ##2048
17e80     04 00 00 FF 
17e84     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
17e88     97 1C 48 FB | 	callpa	#(@LR__1884-@LR__1883)>>2,fcache_load_ptr_
17e8c                 | LR__1883
17e8c     10 23 02 F6 | 	mov	local03, local02
17e90     01 22 66 F0 | 	shl	local03, #1
17e94     F2 22 02 F1 | 	add	local03, objptr
17e98     F5 12 02 F6 | 	mov	arg01, ptr__dat__
17e9c     10 12 06 F1 | 	add	arg01, #16
17ea0     10 FB 01 F6 | 	mov	result1, local02
17ea4     01 FA 65 F0 | 	shl	result1, #1
17ea8     FD 12 02 F1 | 	add	arg01, result1
17eac     09 FB E1 FA | 	rdword	result1, arg01
17eb0     11 FB 51 FC | 	wrword	result1, local03
17eb4     01 20 06 F1 | 	add	local02, #1
17eb8     02 00 00 FF 
17ebc     00 20 56 F2 | 	cmps	local02, ##1024 wc
17ec0     C8 FF 9F CD |  if_b	jmp	#LR__1883
17ec4                 | LR__1884
17ec4     10 00 00 FF 
17ec8     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
17ecc                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
17ecc     00 20 06 F6 | 	mov	local02, #0
17ed0     04 00 00 FF 
17ed4     00 E4 05 F1 | 	add	objptr, ##2048
17ed8     97 18 48 FB | 	callpa	#(@LR__1886-@LR__1885)>>2,fcache_load_ptr_
17edc                 | LR__1885
17edc     10 23 02 F6 | 	mov	local03, local02
17ee0     01 22 66 F0 | 	shl	local03, #1
17ee4     F2 22 02 F1 | 	add	local03, objptr
17ee8     10 27 02 F6 | 	mov	local05, local02
17eec     08 26 66 F0 | 	shl	local05, #8
17ef0     7F 00 00 FF 
17ef4     00 25 06 F6 | 	mov	local04, ##65280
17ef8     13 25 82 F1 | 	sub	local04, local05
17efc     11 25 52 FC | 	wrword	local04, local03
17f00     01 20 06 F1 | 	add	local02, #1
17f04     00 21 56 F2 | 	cmps	local02, #256 wc
17f08     D0 FF 9F CD |  if_b	jmp	#LR__1885
17f0c                 | LR__1886
17f0c     2C 00 00 FF 
17f10     CC E4 85 F1 | 	sub	objptr, ##22732
17f14                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
17f14     00 20 06 F6 | 	mov	local02, #0
17f18                 | LR__1887
17f18     10 23 02 F6 | 	mov	local03, local02
17f1c     01 22 66 F0 | 	shl	local03, #1
17f20     2D 00 00 FF 
17f24     CC E4 05 F1 | 	add	objptr, ##23244
17f28     F2 22 02 F1 | 	add	local03, objptr
17f2c     80 BF 23 FF 
17f30     00 12 06 F6 | 	mov	arg01, ##1199505408
17f34     0F 15 02 F6 | 	mov	arg02, local01
17f38     2D 00 00 FF 
17f3c     CC E4 85 F1 | 	sub	objptr, ##23244
17f40     78 6A B0 FD | 	call	#__system___float_mul
17f44     FD 12 02 F6 | 	mov	arg01, result1
17f48     01 14 06 F6 | 	mov	arg02, #1
17f4c     34 6F B0 FD | 	call	#__system___float_tointeger
17f50     11 FB 51 FC | 	wrword	result1, local03
17f54     0F 13 02 F6 | 	mov	arg01, local01
17f58     CC BC 1F FF 
17f5c     9A 15 06 F6 | 	mov	arg02, ##1064933786
17f60     58 6A B0 FD | 	call	#__system___float_mul
17f64     FD 1E 02 F6 | 	mov	local01, result1
17f68     01 20 06 F1 | 	add	local02, #1
17f6c     00 21 56 F2 | 	cmps	local02, #256 wc
17f70     A4 FF 9F CD |  if_b	jmp	#LR__1887
17f74     2E 00 00 FF 
17f78     CA E4 05 F1 | 	add	objptr, ##23754
17f7c     F2 00 58 FC | 	wrword	#0, objptr
17f80                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
17f80     00 20 06 F6 | 	mov	local02, #0
17f84     02 E4 05 F1 | 	add	objptr, #2
17f88     97 10 48 FB | 	callpa	#(@LR__1889-@LR__1888)>>2,fcache_load_ptr_
17f8c                 | LR__1888
17f8c     10 23 02 F6 | 	mov	local03, local02
17f90     01 22 66 F0 | 	shl	local03, #1
17f94     F2 22 02 F1 | 	add	local03, objptr
17f98     7F 00 80 FF 
17f9c     11 01 5A FC | 	wrword	##65280, local03
17fa0     01 20 06 F1 | 	add	local02, #1
17fa4     FF 20 56 F2 | 	cmps	local02, #255 wc
17fa8     E0 FF 9F CD |  if_b	jmp	#LR__1888
17fac                 | LR__1889
17fac     FE E5 05 F1 | 	add	objptr, #510
17fb0     F2 00 58 FC | 	wrword	#0, objptr
17fb4                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
17fb4     00 20 06 F6 | 	mov	local02, #0
17fb8     02 E4 05 F1 | 	add	objptr, #2
17fbc     97 52 48 FB | 	callpa	#(@LR__1894-@LR__1890)>>2,fcache_load_ptr_
17fc0                 | LR__1890
17fc0     10 23 02 F6 | 	mov	local03, local02
17fc4     01 22 66 F0 | 	shl	local03, #1
17fc8     F2 22 02 F1 | 	add	local03, objptr
17fcc     10 25 02 F6 | 	mov	local04, local02
17fd0     0C 24 66 F0 | 	shl	local04, #12
17fd4     11 25 52 FC | 	wrword	local04, local03
17fd8     01 20 06 F1 | 	add	local02, #1
17fdc     10 20 56 F2 | 	cmps	local02, #16 wc
17fe0     DC FF 9F CD |  if_b	jmp	#LR__1890
17fe4                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
17fe4     10 20 06 F6 | 	mov	local02, #16
17fe8                 | LR__1891
17fe8     10 23 02 F6 | 	mov	local03, local02
17fec     01 22 66 F0 | 	shl	local03, #1
17ff0     F2 22 02 F1 | 	add	local03, objptr
17ff4     7F 00 80 FF 
17ff8     11 01 5A FC | 	wrword	##65280, local03
17ffc     01 20 06 F1 | 	add	local02, #1
18000     F0 20 16 F2 | 	cmp	local02, #240 wc
18004     E0 FF 9F CD |  if_b	jmp	#LR__1891
18008                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
18008     F0 20 06 F6 | 	mov	local02, #240
1800c                 | LR__1892
1800c     10 23 02 F6 | 	mov	local03, local02
18010     01 22 66 F0 | 	shl	local03, #1
18014     F2 22 02 F1 | 	add	local03, objptr
18018     FF 26 06 F6 | 	mov	local05, #255
1801c     10 27 82 F1 | 	sub	local05, local02
18020     0C 26 66 F0 | 	shl	local05, #12
18024     11 27 52 FC | 	wrword	local05, local03
18028     01 20 06 F1 | 	add	local02, #1
1802c     00 21 16 F2 | 	cmp	local02, #256 wc
18030     D8 FF 9F CD |  if_b	jmp	#LR__1892
18034                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
18034     00 20 06 F6 | 	mov	local02, #0
18038     01 00 00 FF 
1803c     00 E4 05 F1 | 	add	objptr, ##512
18040                 | LR__1893
18040     10 23 02 F6 | 	mov	local03, local02
18044     01 22 66 F0 | 	shl	local03, #1
18048     F2 22 02 F1 | 	add	local03, objptr
1804c     10 25 02 F6 | 	mov	local04, local02
18050     08 24 66 F0 | 	shl	local04, #8
18054     11 25 52 FC | 	wrword	local04, local03
18058     01 20 06 F1 | 	add	local02, #1
1805c     00 21 56 F2 | 	cmps	local02, #256 wc
18060     DC FF 9F CD |  if_b	jmp	#LR__1893
18064                 | LR__1894
18064     FE E5 05 F1 | 	add	objptr, #510
18068     F2 00 58 FC | 	wrword	#0, objptr
1806c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1806c     00 20 06 F6 | 	mov	local02, #0
18070     02 E4 05 F1 | 	add	objptr, #2
18074     97 6A 48 FB | 	callpa	#(@LR__1899-@LR__1895)>>2,fcache_load_ptr_
18078                 | LR__1895
18078     10 23 02 F6 | 	mov	local03, local02
1807c     01 22 66 F0 | 	shl	local03, #1
18080     F2 22 02 F1 | 	add	local03, objptr
18084     10 25 02 F6 | 	mov	local04, local02
18088     04 24 66 F0 | 	shl	local04, #4
1808c     10 25 02 F1 | 	add	local04, local02
18090     04 24 66 F0 | 	shl	local04, #4
18094     11 25 52 FC | 	wrword	local04, local03
18098     01 20 06 F1 | 	add	local02, #1
1809c     F0 20 56 F2 | 	cmps	local02, #240 wc
180a0     D4 FF 9F CD |  if_b	jmp	#LR__1895
180a4     F0 20 06 F6 | 	mov	local02, #240
180a8                 | LR__1896
180a8     10 23 02 F6 | 	mov	local03, local02
180ac     01 22 66 F0 | 	shl	local03, #1
180b0     F2 22 02 F1 | 	add	local03, objptr
180b4     FF 26 06 F6 | 	mov	local05, #255
180b8     10 27 82 F1 | 	sub	local05, local02
180bc     0C 26 66 F0 | 	shl	local05, #12
180c0     11 27 52 FC | 	wrword	local05, local03
180c4     01 20 06 F1 | 	add	local02, #1
180c8     00 21 16 F2 | 	cmp	local02, #256 wc
180cc     D8 FF 9F CD |  if_b	jmp	#LR__1896
180d0                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
180d0     00 20 06 F6 | 	mov	local02, #0
180d4     01 00 00 FF 
180d8     00 E4 05 F1 | 	add	objptr, ##512
180dc                 | LR__1897
180dc     10 23 02 F6 | 	mov	local03, local02
180e0     01 22 66 F0 | 	shl	local03, #1
180e4     F2 22 02 F1 | 	add	local03, objptr
180e8     10 25 02 F6 | 	mov	local04, local02
180ec     09 24 66 F0 | 	shl	local04, #9
180f0     11 25 52 FC | 	wrword	local04, local03
180f4     FF 22 06 F6 | 	mov	local03, #255
180f8     10 23 82 F1 | 	sub	local03, local02
180fc     01 22 66 F0 | 	shl	local03, #1
18100     F2 22 02 F1 | 	add	local03, objptr
18104     10 25 02 F6 | 	mov	local04, local02
18108     09 24 66 F0 | 	shl	local04, #9
1810c     11 25 52 FC | 	wrword	local04, local03
18110     01 20 06 F1 | 	add	local02, #1
18114     80 20 56 F2 | 	cmps	local02, #128 wc
18118     C0 FF 9F CD |  if_b	jmp	#LR__1897
1811c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1811c     00 20 06 F6 | 	mov	local02, #0
18120     01 00 00 FF 
18124     00 E4 05 F1 | 	add	objptr, ##512
18128                 | LR__1898
18128     10 23 02 F6 | 	mov	local03, local02
1812c     01 22 66 F0 | 	shl	local03, #1
18130     F2 22 02 F1 | 	add	local03, objptr
18134     10 25 02 F6 | 	mov	local04, local02
18138     0D 24 66 F0 | 	shl	local04, #13
1813c     11 25 52 FC | 	wrword	local04, local03
18140     01 20 06 F1 | 	add	local02, #1
18144     08 20 56 F2 | 	cmps	local02, #8 wc
18148     DC FF 9F CD |  if_b	jmp	#LR__1898
1814c                 | LR__1899
1814c                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1814c     08 20 06 F6 | 	mov	local02, #8
18150     97 42 48 FB | 	callpa	#(@LR__1903-@LR__1900)>>2,fcache_load_ptr_
18154                 | LR__1900
18154     10 23 02 F6 | 	mov	local03, local02
18158     01 22 66 F0 | 	shl	local03, #1
1815c     F2 22 02 F1 | 	add	local03, objptr
18160     10 1F 02 F6 | 	mov	local01, local02
18164     08 1E 86 F1 | 	sub	local01, #8
18168     0B 1E 66 F0 | 	shl	local01, #11
1816c     7F 00 00 FF 
18170     00 25 06 F6 | 	mov	local04, ##65280
18174     0F 25 82 F1 | 	sub	local04, local01
18178     11 25 52 FC | 	wrword	local04, local03
1817c     01 20 06 F1 | 	add	local02, #1
18180     18 20 16 F2 | 	cmp	local02, #24 wc
18184     CC FF 9F CD |  if_b	jmp	#LR__1900
18188                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
18188     18 20 06 F6 | 	mov	local02, #24
1818c                 | LR__1901
1818c     10 23 02 F6 | 	mov	local03, local02
18190     01 22 66 F0 | 	shl	local03, #1
18194     F2 22 02 F1 | 	add	local03, objptr
18198     40 00 80 FF 
1819c     11 01 58 FC | 	wrword	##32768, local03
181a0     01 20 06 F1 | 	add	local02, #1
181a4     81 20 16 F2 | 	cmp	local02, #129 wc
181a8     E0 FF 9F CD |  if_b	jmp	#LR__1901
181ac                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
181ac     81 20 06 F6 | 	mov	local02, #129
181b0                 | LR__1902
181b0     10 23 02 F6 | 	mov	local03, local02
181b4     01 22 66 F0 | 	shl	local03, #1
181b8     F2 22 02 F1 | 	add	local03, objptr
181bc     FF 26 06 F6 | 	mov	local05, #255
181c0     10 27 82 F1 | 	sub	local05, local02
181c4     08 26 66 F0 | 	shl	local05, #8
181c8     11 27 52 FC | 	wrword	local05, local03
181cc     01 20 06 F1 | 	add	local02, #1
181d0     00 21 16 F2 | 	cmp	local02, #256 wc
181d4     D8 FF 9F CD |  if_b	jmp	#LR__1902
181d8                 | LR__1903
181d8     47 00 00 FF 
181dc     BA E5 05 F1 | 	add	objptr, ##36794
181e0     F2 00 59 FC | 	wrword	#128, objptr
181e4     7B 00 00 FF 
181e8     86 E4 85 F1 | 	sub	objptr, ##63110
181ec                 | ' for i=0 to 7
181ec     00 20 06 F6 | 	mov	local02, #0
181f0     97 8E 48 FB | 	callpa	#(@LR__1905-@LR__1904)>>2,fcache_load_ptr_
181f4                 | LR__1904
181f4     10 23 02 F6 | 	mov	local03, local02
181f8     01 22 66 F0 | 	shl	local03, #1
181fc     10 23 02 F1 | 	add	local03, local02
18200     03 22 66 F0 | 	shl	local03, #3
18204     34 00 00 FF 
18208     2C E5 05 F1 | 	add	objptr, ##26924
1820c     F2 22 02 F1 | 	add	local03, objptr
18210     00 EE A1 FF 
18214     11 01 68 FC | 	wrlong	##1138491392, local03
18218     10 23 02 F6 | 	mov	local03, local02
1821c     01 22 66 F0 | 	shl	local03, #1
18220     10 23 02 F1 | 	add	local03, local02
18224     03 22 66 F0 | 	shl	local03, #3
18228     F2 22 02 F1 | 	add	local03, objptr
1822c     04 22 06 F1 | 	add	local03, #4
18230     11 21 42 FC | 	wrbyte	local02, local03
18234     10 23 02 F6 | 	mov	local03, local02
18238     01 22 66 F0 | 	shl	local03, #1
1823c     10 23 02 F1 | 	add	local03, local02
18240     03 22 66 F0 | 	shl	local03, #3
18244     F2 22 02 F1 | 	add	local03, objptr
18248     05 22 06 F1 | 	add	local03, #5
1824c     11 21 42 FC | 	wrbyte	local02, local03
18250     10 23 02 F6 | 	mov	local03, local02
18254     01 22 66 F0 | 	shl	local03, #1
18258     10 23 02 F1 | 	add	local03, local02
1825c     03 22 66 F0 | 	shl	local03, #3
18260     F2 22 02 F1 | 	add	local03, objptr
18264     06 22 06 F1 | 	add	local03, #6
18268     11 01 58 FC | 	wrword	#0, local03
1826c     10 23 02 F6 | 	mov	local03, local02
18270     01 22 66 F0 | 	shl	local03, #1
18274     10 23 02 F1 | 	add	local03, local02
18278     03 22 66 F0 | 	shl	local03, #3
1827c     F2 22 02 F1 | 	add	local03, objptr
18280     08 22 06 F1 | 	add	local03, #8
18284     00 C0 9F FF 
18288     11 01 68 FC | 	wrlong	##1065353216, local03
1828c     10 23 02 F6 | 	mov	local03, local02
18290     01 22 66 F0 | 	shl	local03, #1
18294     10 23 02 F1 | 	add	local03, local02
18298     03 22 66 F0 | 	shl	local03, #3
1829c     F2 22 02 F1 | 	add	local03, objptr
182a0     0C 22 06 F1 | 	add	local03, #12
182a4     00 40 A0 FF 
182a8     11 01 68 FC | 	wrlong	##1082130432, local03
182ac     10 23 02 F6 | 	mov	local03, local02
182b0     01 22 66 F0 | 	shl	local03, #1
182b4     10 23 02 F1 | 	add	local03, local02
182b8     03 22 66 F0 | 	shl	local03, #3
182bc     F2 22 02 F1 | 	add	local03, objptr
182c0     10 22 06 F1 | 	add	local03, #16
182c4     11 01 68 FC | 	wrlong	#0, local03
182c8     10 23 02 F6 | 	mov	local03, local02
182cc     01 22 66 F0 | 	shl	local03, #1
182d0     10 23 02 F1 | 	add	local03, local02
182d4     03 22 66 F0 | 	shl	local03, #3
182d8     F2 22 02 F1 | 	add	local03, objptr
182dc     14 22 06 F1 | 	add	local03, #20
182e0     11 FF 59 FC | 	wrword	#255, local03
182e4     10 23 02 F6 | 	mov	local03, local02
182e8     01 22 66 F0 | 	shl	local03, #1
182ec     46 00 00 FF 
182f0     4C E5 05 F1 | 	add	objptr, ##36172
182f4     F2 22 02 F1 | 	add	local03, objptr
182f8     11 FF 59 FC | 	wrword	#255, local03
182fc     01 20 06 F1 | 	add	local02, #1
18300     08 20 56 F2 | 	cmps	local02, #8 wc
18304     7B 00 00 FF 
18308     78 E4 85 F1 | 	sub	objptr, ##63096
1830c     E4 FE 9F CD |  if_b	jmp	#LR__1904
18310                 | LR__1905
18310     00 6E 20 FF 
18314     00 1E 06 F6 | 	mov	local01, ##1088159744
18318                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
18318     03 26 06 F6 | 	mov	local05, #3
1831c                 | LR__1906
1831c     0F 13 02 F6 | 	mov	arg01, local01
18320     CE C3 1F FF 
18324     7D 14 06 F6 | 	mov	arg02, ##1065852029
18328     90 66 B0 FD | 	call	#__system___float_mul
1832c     FD 1E 02 F6 | 	mov	local01, result1
18330     FA 27 6E FB | 	djnz	local05, #LR__1906
18334     00 20 06 F6 | 	mov	local02, #0
18338                 | LR__1907
18338     10 27 02 F6 | 	mov	local05, local02
1833c     02 26 66 F0 | 	shl	local05, #2
18340     34 00 00 FF 
18344     CC E4 05 F1 | 	add	objptr, ##26828
18348     F2 26 02 F1 | 	add	local05, objptr
1834c     13 1F 62 FC | 	wrlong	local01, local05
18350     0F 13 02 F6 | 	mov	arg01, local01
18354     CE C3 1F FF 
18358     7D 14 06 F6 | 	mov	arg02, ##1065852029
1835c     34 00 00 FF 
18360     CC E4 85 F1 | 	sub	objptr, ##26828
18364     54 66 B0 FD | 	call	#__system___float_mul
18368     FD 1E 02 F6 | 	mov	local01, result1
1836c     01 20 06 F1 | 	add	local02, #1
18370     0C 20 56 F2 | 	cmps	local02, #12 wc
18374     C0 FF 9F CD |  if_b	jmp	#LR__1907
18378     7B 00 00 FF 
1837c     86 E4 05 F1 | 	add	objptr, ##63110
18380     F2 00 59 FC | 	wrword	#128, objptr
18384     02 E4 85 F1 | 	sub	objptr, #2
18388     F2 00 59 FC | 	wrword	#128, objptr
1838c     7B 00 00 FF 
18390     84 E4 85 F1 | 	sub	objptr, ##63108
18394     A7 F0 03 F6 | 	mov	ptra, fp
18398     B2 00 A0 FD | 	call	#popregs_
1839c                 | _init_audio_ret
1839c     2D 00 64 FD | 	ret
183a0                 | 
183a0                 | ' 
183a0                 | ' 
183a0                 | ' function getnoteval(token) as single
183a0                 | _getnoteval
183a0     02 4A 05 F6 | 	mov	COUNT_, #2
183a4     A8 00 A0 FD | 	call	#pushregs_
183a8     01 00 00 FF 
183ac     00 13 86 F1 | 	sub	arg01, ##768
183b0     09 15 52 F6 | 	abs	arg02, arg01 wc
183b4     0C 14 16 FD | 	qdiv	arg02, #12
183b8     34 00 00 FF 
183bc     CC E4 05 F1 | 	add	objptr, ##26828
183c0     19 14 62 FD | 	getqy	arg02
183c4     0A 15 82 F6 | 	negc	arg02, arg02
183c8     02 14 66 F0 | 	shl	arg02, #2
183cc     F2 14 02 F1 | 	add	arg02, objptr
183d0     0A 1F 02 FB | 	rdlong	local01, arg02
183d4     09 15 52 F6 | 	abs	arg02, arg01 wc
183d8     0C 14 16 FD | 	qdiv	arg02, #12
183dc     34 00 00 FF 
183e0     CC E4 85 F1 | 	sub	objptr, ##26828
183e4     01 12 06 F6 | 	mov	arg01, #1
183e8                 | ' noteexp=1+(note/12) 
183e8                 | ' return (2.0^noteexp)*notebase
183e8     18 14 62 FD | 	getqx	arg02
183ec     0A 13 82 F3 | 	sumc	arg01, arg02
183f0     09 13 52 F6 | 	abs	arg01, arg01 wc
183f4     1F 20 C6 C9 |  if_b	decod	local02, #31
183f8     00 20 06 36 |  if_ae	mov	local02, #0
183fc     B8 61 B0 FD | 	call	#__system___float_fromuns
18400     10 FB 61 F5 | 	xor	result1, local02
18404     FD 14 02 F6 | 	mov	arg02, result1
18408     1E 12 C6 F9 | 	decod	arg01, #30
1840c     90 74 B0 FD | 	call	#__system____builtin_powf
18410     FD 12 02 F6 | 	mov	arg01, result1
18414     0F 15 02 F6 | 	mov	arg02, local01
18418     A0 65 B0 FD | 	call	#__system___float_mul
1841c     A7 F0 03 F6 | 	mov	ptra, fp
18420     B2 00 A0 FD | 	call	#popregs_
18424                 | _getnoteval_ret
18424     2D 00 64 FD | 	ret
18428                 | 
18428                 | ' 
18428                 | ' 
18428                 | ' 
18428                 | ' sub init_error_strings
18428                 | _init_error_strings
18428     5D 01 00 FF 
1842c     1F 01 06 F6 | 	mov	_var01, ##@LR__4921
18430     65 00 00 FF 
18434     60 E4 05 F1 | 	add	objptr, ##51808
18438     F2 00 62 FC | 	wrlong	_var01, objptr
1843c     5D 01 00 FF 
18440     20 01 06 F6 | 	mov	_var01, ##@LR__4922
18444     04 E4 05 F1 | 	add	objptr, #4
18448     F2 00 62 FC | 	wrlong	_var01, objptr
1844c     5D 01 00 FF 
18450     45 01 06 F6 | 	mov	_var01, ##@LR__4923
18454     04 E4 05 F1 | 	add	objptr, #4
18458     F2 00 62 FC | 	wrlong	_var01, objptr
1845c     5D 01 00 FF 
18460     66 01 06 F6 | 	mov	_var01, ##@LR__4924
18464     04 E4 05 F1 | 	add	objptr, #4
18468     F2 00 62 FC | 	wrlong	_var01, objptr
1846c     5D 01 00 FF 
18470     80 01 06 F6 | 	mov	_var01, ##@LR__4925
18474     04 E4 05 F1 | 	add	objptr, #4
18478     F2 00 62 FC | 	wrlong	_var01, objptr
1847c     5D 01 00 FF 
18480     9C 01 06 F6 | 	mov	_var01, ##@LR__4926
18484     04 E4 05 F1 | 	add	objptr, #4
18488     F2 00 62 FC | 	wrlong	_var01, objptr
1848c     5D 01 00 FF 
18490     BE 01 06 F6 | 	mov	_var01, ##@LR__4927
18494     04 E4 05 F1 | 	add	objptr, #4
18498     F2 00 62 FC | 	wrlong	_var01, objptr
1849c     5D 01 00 FF 
184a0     EC 01 06 F6 | 	mov	_var01, ##@LR__4928
184a4     04 E4 05 F1 | 	add	objptr, #4
184a8     F2 00 62 FC | 	wrlong	_var01, objptr
184ac     5E 01 00 FF 
184b0     17 00 06 F6 | 	mov	_var01, ##@LR__4929
184b4     04 E4 05 F1 | 	add	objptr, #4
184b8     F2 00 62 FC | 	wrlong	_var01, objptr
184bc     5E 01 00 FF 
184c0     30 00 06 F6 | 	mov	_var01, ##@LR__4930
184c4     04 E4 05 F1 | 	add	objptr, #4
184c8     F2 00 62 FC | 	wrlong	_var01, objptr
184cc     5E 01 00 FF 
184d0     51 00 06 F6 | 	mov	_var01, ##@LR__4931
184d4     04 E4 05 F1 | 	add	objptr, #4
184d8     F2 00 62 FC | 	wrlong	_var01, objptr
184dc     5E 01 00 FF 
184e0     68 00 06 F6 | 	mov	_var01, ##@LR__4932
184e4     04 E4 05 F1 | 	add	objptr, #4
184e8     F2 00 62 FC | 	wrlong	_var01, objptr
184ec     5E 01 00 FF 
184f0     86 00 06 F6 | 	mov	_var01, ##@LR__4933
184f4     04 E4 05 F1 | 	add	objptr, #4
184f8     F2 00 62 FC | 	wrlong	_var01, objptr
184fc     5E 01 00 FF 
18500     AA 00 06 F6 | 	mov	_var01, ##@LR__4934
18504     04 E4 05 F1 | 	add	objptr, #4
18508     F2 00 62 FC | 	wrlong	_var01, objptr
1850c     5E 01 00 FF 
18510     D1 00 06 F6 | 	mov	_var01, ##@LR__4935
18514     04 E4 05 F1 | 	add	objptr, #4
18518     F2 00 62 FC | 	wrlong	_var01, objptr
1851c     5E 01 00 FF 
18520     ED 00 06 F6 | 	mov	_var01, ##@LR__4936
18524     04 E4 05 F1 | 	add	objptr, #4
18528     F2 00 62 FC | 	wrlong	_var01, objptr
1852c     5E 01 00 FF 
18530     FE 00 06 F6 | 	mov	_var01, ##@LR__4937
18534     04 E4 05 F1 | 	add	objptr, #4
18538     F2 00 62 FC | 	wrlong	_var01, objptr
1853c     5E 01 00 FF 
18540     0E 01 06 F6 | 	mov	_var01, ##@LR__4938
18544     04 E4 05 F1 | 	add	objptr, #4
18548     F2 00 62 FC | 	wrlong	_var01, objptr
1854c     5E 01 00 FF 
18550     29 01 06 F6 | 	mov	_var01, ##@LR__4939
18554     04 E4 05 F1 | 	add	objptr, #4
18558     F2 00 62 FC | 	wrlong	_var01, objptr
1855c     5E 01 00 FF 
18560     3B 01 06 F6 | 	mov	_var01, ##@LR__4940
18564     04 E4 05 F1 | 	add	objptr, #4
18568     F2 00 62 FC | 	wrlong	_var01, objptr
1856c     5E 01 00 FF 
18570     53 01 06 F6 | 	mov	_var01, ##@LR__4941
18574     04 E4 05 F1 | 	add	objptr, #4
18578     F2 00 62 FC | 	wrlong	_var01, objptr
1857c     5E 01 00 FF 
18580     67 01 06 F6 | 	mov	_var01, ##@LR__4942
18584     04 E4 05 F1 | 	add	objptr, #4
18588     F2 00 62 FC | 	wrlong	_var01, objptr
1858c     5E 01 00 FF 
18590     77 01 06 F6 | 	mov	_var01, ##@LR__4943
18594     04 E4 05 F1 | 	add	objptr, #4
18598     F2 00 62 FC | 	wrlong	_var01, objptr
1859c     5E 01 00 FF 
185a0     94 01 06 F6 | 	mov	_var01, ##@LR__4944
185a4     04 E4 05 F1 | 	add	objptr, #4
185a8     F2 00 62 FC | 	wrlong	_var01, objptr
185ac     5E 01 00 FF 
185b0     A5 01 06 F6 | 	mov	_var01, ##@LR__4945
185b4     04 E4 05 F1 | 	add	objptr, #4
185b8     F2 00 62 FC | 	wrlong	_var01, objptr
185bc     5E 01 00 FF 
185c0     B6 01 06 F6 | 	mov	_var01, ##@LR__4946
185c4     04 E4 05 F1 | 	add	objptr, #4
185c8     F2 00 62 FC | 	wrlong	_var01, objptr
185cc     5E 01 00 FF 
185d0     E1 01 06 F6 | 	mov	_var01, ##@LR__4947
185d4     04 E4 05 F1 | 	add	objptr, #4
185d8     F2 00 62 FC | 	wrlong	_var01, objptr
185dc     5E 01 00 FF 
185e0     FD 01 06 F6 | 	mov	_var01, ##@LR__4948
185e4     04 E4 05 F1 | 	add	objptr, #4
185e8     F2 00 62 FC | 	wrlong	_var01, objptr
185ec     5F 01 00 FF 
185f0     13 00 06 F6 | 	mov	_var01, ##@LR__4949
185f4     04 E4 05 F1 | 	add	objptr, #4
185f8     F2 00 62 FC | 	wrlong	_var01, objptr
185fc     5F 01 00 FF 
18600     20 00 06 F6 | 	mov	_var01, ##@LR__4950
18604     04 E4 05 F1 | 	add	objptr, #4
18608     F2 00 62 FC | 	wrlong	_var01, objptr
1860c     5F 01 00 FF 
18610     32 00 06 F6 | 	mov	_var01, ##@LR__4951
18614     04 E4 05 F1 | 	add	objptr, #4
18618     F2 00 62 FC | 	wrlong	_var01, objptr
1861c     5F 01 00 FF 
18620     43 00 06 F6 | 	mov	_var01, ##@LR__4952
18624     04 E4 05 F1 | 	add	objptr, #4
18628     F2 00 62 FC | 	wrlong	_var01, objptr
1862c     5F 01 00 FF 
18630     5F 00 06 F6 | 	mov	_var01, ##@LR__4953
18634     04 E4 05 F1 | 	add	objptr, #4
18638     F2 00 62 FC | 	wrlong	_var01, objptr
1863c     5F 01 00 FF 
18640     70 00 06 F6 | 	mov	_var01, ##@LR__4954
18644     04 E4 05 F1 | 	add	objptr, #4
18648     F2 00 62 FC | 	wrlong	_var01, objptr
1864c     5F 01 00 FF 
18650     7F 00 06 F6 | 	mov	_var01, ##@LR__4955
18654     04 E4 05 F1 | 	add	objptr, #4
18658     F2 00 62 FC | 	wrlong	_var01, objptr
1865c     5F 01 00 FF 
18660     9A 00 06 F6 | 	mov	_var01, ##@LR__4956
18664     04 E4 05 F1 | 	add	objptr, #4
18668     F2 00 62 FC | 	wrlong	_var01, objptr
1866c     5F 01 00 FF 
18670     CE 00 06 F6 | 	mov	_var01, ##@LR__4957
18674     04 E4 05 F1 | 	add	objptr, #4
18678     F2 00 62 FC | 	wrlong	_var01, objptr
1867c     5F 01 00 FF 
18680     E7 00 06 F6 | 	mov	_var01, ##@LR__4958
18684     04 E4 05 F1 | 	add	objptr, #4
18688     F2 00 62 FC | 	wrlong	_var01, objptr
1868c     5F 01 00 FF 
18690     03 01 06 F6 | 	mov	_var01, ##@LR__4959
18694     04 E4 05 F1 | 	add	objptr, #4
18698     F2 00 62 FC | 	wrlong	_var01, objptr
1869c     5F 01 00 FF 
186a0     21 01 06 F6 | 	mov	_var01, ##@LR__4960
186a4     04 E4 05 F1 | 	add	objptr, #4
186a8     F2 00 62 FC | 	wrlong	_var01, objptr
186ac     5F 01 00 FF 
186b0     3A 01 06 F6 | 	mov	_var01, ##@LR__4961
186b4     04 E4 05 F1 | 	add	objptr, #4
186b8     F2 00 62 FC | 	wrlong	_var01, objptr
186bc     5F 01 00 FF 
186c0     59 01 06 F6 | 	mov	_var01, ##@LR__4962
186c4     04 E4 05 F1 | 	add	objptr, #4
186c8     F2 00 62 FC | 	wrlong	_var01, objptr
186cc     5F 01 00 FF 
186d0     68 01 06 F6 | 	mov	_var01, ##@LR__4963
186d4     04 E4 05 F1 | 	add	objptr, #4
186d8     F2 00 62 FC | 	wrlong	_var01, objptr
186dc     5F 01 00 FF 
186e0     96 01 06 F6 | 	mov	_var01, ##@LR__4964
186e4     04 E4 05 F1 | 	add	objptr, #4
186e8     F2 00 62 FC | 	wrlong	_var01, objptr
186ec     5F 01 00 FF 
186f0     A4 01 06 F6 | 	mov	_var01, ##@LR__4965
186f4     04 E4 05 F1 | 	add	objptr, #4
186f8     F2 00 62 FC | 	wrlong	_var01, objptr
186fc     5F 01 00 FF 
18700     B9 01 06 F6 | 	mov	_var01, ##@LR__4966
18704     04 E4 05 F1 | 	add	objptr, #4
18708     F2 00 62 FC | 	wrlong	_var01, objptr
1870c     5F 01 00 FF 
18710     DD 01 06 F6 | 	mov	_var01, ##@LR__4967
18714     04 E4 05 F1 | 	add	objptr, #4
18718     F2 00 62 FC | 	wrlong	_var01, objptr
1871c     5F 01 00 FF 
18720     F4 01 06 F6 | 	mov	_var01, ##@LR__4968
18724     04 E4 05 F1 | 	add	objptr, #4
18728     F2 00 62 FC | 	wrlong	_var01, objptr
1872c     60 01 00 FF 
18730     07 00 06 F6 | 	mov	_var01, ##@LR__4969
18734     04 E4 05 F1 | 	add	objptr, #4
18738     F2 00 62 FC | 	wrlong	_var01, objptr
1873c     60 01 00 FF 
18740     1E 00 06 F6 | 	mov	_var01, ##@LR__4970
18744     04 E4 05 F1 | 	add	objptr, #4
18748     F2 00 62 FC | 	wrlong	_var01, objptr
1874c     65 00 00 FF 
18750     24 E5 85 F1 | 	sub	objptr, ##52004
18754                 | _init_error_strings_ret
18754     2D 00 64 FD | 	ret
18758                 | 
18758                 | '         
18758                 | ' sub printerror(err as integer)
18758                 | _printerror
18758     01 4A 05 F6 | 	mov	COUNT_, #1
1875c     A8 00 A0 FD | 	call	#pushregs_
18760     09 1F 02 F6 | 	mov	local01, arg01
18764     60 01 00 FF 
18768     37 12 06 F6 | 	mov	arg01, ##@LR__4971
1876c     30 26 B0 FD | 	call	#_hg010b_spin2_write
18770     0F 13 02 F6 | 	mov	arg01, local01
18774     28 28 B0 FD | 	call	#_hg010b_spin2_inttostr
18778     FD 12 02 F6 | 	mov	arg01, result1
1877c     20 26 B0 FD | 	call	#_hg010b_spin2_write
18780     60 01 00 FF 
18784     3E 12 06 F6 | 	mov	arg01, ##@LR__4972
18788     14 26 B0 FD | 	call	#_hg010b_spin2_write
1878c     02 1E 66 F0 | 	shl	local01, #2
18790     65 00 00 FF 
18794     60 E4 05 F1 | 	add	objptr, ##51808
18798     F2 1E 02 F1 | 	add	local01, objptr
1879c     0F 13 02 FB | 	rdlong	arg01, local01
187a0     65 00 00 FF 
187a4     60 E4 85 F1 | 	sub	objptr, ##51808
187a8                 | ' 
187a8                 | ' write(text)
187a8     F4 25 B0 FD | 	call	#_hg010b_spin2_write
187ac                 | ' crlf
187ac     50 27 B0 FD | 	call	#_hg010b_spin2_crlf
187b0     A7 F0 03 F6 | 	mov	ptra, fp
187b4     B2 00 A0 FD | 	call	#popregs_
187b8                 | _printerror_ret
187b8     2D 00 64 FD | 	ret
187bc                 | 
187bc                 | ' 
187bc                 | ' '' ------------------------------- Hardware start/stop/initialization 
187bc                 | ' 
187bc                 | ' sub startpsram
187bc                 | _startpsram
187bc     00 12 06 F6 | 	mov	arg01, #0
187c0     0A 14 C6 F9 | 	decod	arg02, #10
187c4     0B 16 06 F6 | 	mov	arg03, #11
187c8     07 18 06 F6 | 	mov	arg04, #7
187cc     0B 00 00 FF 
187d0     C0 E4 05 F1 | 	add	objptr, ##5824
187d4     D4 28 B0 FD | 	call	#_psram_spin2_startx
187d8     4B 00 00 FF 
187dc     2C E5 05 F1 | 	add	objptr, ##38700
187e0     F2 FA 61 FC | 	wrlong	result1, objptr
187e4                 | '     return $7FF00 + cog*12
187e4     0C E4 05 F1 | 	add	objptr, #12
187e8     FF 03 80 FF 
187ec     F2 00 6A FC | 	wrlong	##524032, objptr
187f0     56 00 00 FF 
187f4     F8 E5 85 F1 | 	sub	objptr, ##44536
187f8                 | _startpsram_ret
187f8     2D 00 64 FD | 	ret
187fc                 | 
187fc                 | ' 
187fc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
187fc                 | _startvideo
187fc     01 4A 05 F6 | 	mov	COUNT_, #1
18800     A8 00 A0 FD | 	call	#pushregs_
18804     56 00 00 FF 
18808     F8 E5 05 F1 | 	add	objptr, ##44536
1880c     F2 18 02 FB | 	rdlong	arg04, objptr
18810     56 00 00 FF 
18814     F8 E5 85 F1 | 	sub	objptr, ##44536
18818     0A 13 02 F6 | 	mov	arg01, arg02
1881c     0C 15 02 F6 | 	mov	arg02, arg04
18820     9C 10 B0 FD | 	call	#_hg010b_spin2_start
18824     56 00 00 FF 
18828     E4 E5 05 F1 | 	add	objptr, ##44516
1882c     F2 FA 61 FC | 	wrlong	result1, objptr
18830                 | ' 
18830                 | ' videocog=v.start(pin,mbox)
18830                 | ' 
18830                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
18830     00 1E 06 F6 | 	mov	local01, #0
18834     4B 00 00 FF 
18838     24 E5 85 F1 | 	sub	objptr, ##38692
1883c                 | LR__1910
1883c     0F 13 02 F6 | 	mov	arg01, local01
18840     00 28 00 FF 
18844     00 14 06 F6 | 	mov	arg02, ##5242880
18848     B8 2C B0 FD | 	call	#_psram_spin2_setQos
1884c     01 1E 06 F1 | 	add	local01, #1
18850     08 1E 56 F2 | 	cmps	local01, #8 wc
18854     E4 FF 9F CD |  if_b	jmp	#LR__1910
18858     4B 00 00 FF 
1885c     24 E5 05 F1 | 	add	objptr, ##38692
18860     F2 12 02 FB | 	rdlong	arg01, objptr
18864     7A 00 02 FF 
18868     00 14 06 F6 | 	mov	arg02, ##67171328
1886c     4B 00 00 FF 
18870     24 E5 85 F1 | 	sub	objptr, ##38692
18874     8C 2C B0 FD | 	call	#_psram_spin2_setQos
18878     0B 00 00 FF 
1887c     C0 E4 85 F1 | 	sub	objptr, ##5824
18880                 | ' psram.setQoS(videocog, $0400f400) 
18880                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
18880     F2 14 02 F6 | 	mov	arg02, objptr
18884     00 A8 03 FF 
18888     00 14 46 F5 | 	or	arg02, ##122683392
1888c     00 16 06 F6 | 	mov	arg03, #0
18890     00 18 06 F6 | 	mov	arg04, #0
18894     00 12 06 F6 | 	mov	arg01, #0
18898     4C 40 B0 FD | 	call	#__system___basic_open
1889c                 | ' return videocog
1889c     56 00 00 FF 
188a0     E4 E5 05 F1 | 	add	objptr, ##44516
188a4     F2 FA 01 FB | 	rdlong	result1, objptr
188a8     56 00 00 FF 
188ac     E4 E5 85 F1 | 	sub	objptr, ##44516
188b0     A7 F0 03 F6 | 	mov	ptra, fp
188b4     B2 00 A0 FD | 	call	#popregs_
188b8                 | _startvideo_ret
188b8     2D 00 64 FD | 	ret
188bc                 | 
188bc                 | ' 
188bc                 | ' 
188bc                 | ' 
188bc                 | ' 
188bc                 | ' '' ------------------------------- Convenient psram peek/poke
188bc                 | ' 
188bc                 | ' sub pslpoke(addr as ulong,value as ulong)
188bc                 | _pslpoke
188bc     00 4A 05 F6 | 	mov	COUNT_, #0
188c0     A8 00 A0 FD | 	call	#pushregs_
188c4     08 F0 07 F1 | 	add	ptra, #8
188c8     A7 12 62 FC | 	wrlong	arg01, fp
188cc     04 4E 05 F1 | 	add	fp, #4
188d0     A7 14 62 FC | 	wrlong	arg02, fp
188d4     A7 12 02 F6 | 	mov	arg01, fp
188d8     04 4E 85 F1 | 	sub	fp, #4
188dc     A7 14 02 FB | 	rdlong	arg02, fp
188e0     04 16 06 F6 | 	mov	arg03, #4
188e4     0B 00 00 FF 
188e8     C0 E4 05 F1 | 	add	objptr, ##5824
188ec     84 2A B0 FD | 	call	#_psram_spin2_write
188f0     0B 00 00 FF 
188f4     C0 E4 85 F1 | 	sub	objptr, ##5824
188f8     A7 F0 03 F6 | 	mov	ptra, fp
188fc     B2 00 A0 FD | 	call	#popregs_
18900                 | _pslpoke_ret
18900     2D 00 64 FD | 	ret
18904                 | 
18904                 | ' 
18904                 | ' sub psdpoke(addr as ulong,value as ulong)
18904                 | _psdpoke
18904     00 4A 05 F6 | 	mov	COUNT_, #0
18908     A8 00 A0 FD | 	call	#pushregs_
1890c     08 F0 07 F1 | 	add	ptra, #8
18910     A7 12 62 FC | 	wrlong	arg01, fp
18914     04 4E 05 F1 | 	add	fp, #4
18918     A7 14 62 FC | 	wrlong	arg02, fp
1891c     A7 12 02 F6 | 	mov	arg01, fp
18920     04 4E 85 F1 | 	sub	fp, #4
18924     A7 14 02 FB | 	rdlong	arg02, fp
18928     02 16 06 F6 | 	mov	arg03, #2
1892c     0B 00 00 FF 
18930     C0 E4 05 F1 | 	add	objptr, ##5824
18934     3C 2A B0 FD | 	call	#_psram_spin2_write
18938     0B 00 00 FF 
1893c     C0 E4 85 F1 | 	sub	objptr, ##5824
18940     A7 F0 03 F6 | 	mov	ptra, fp
18944     B2 00 A0 FD | 	call	#popregs_
18948                 | _psdpoke_ret
18948     2D 00 64 FD | 	ret
1894c                 | 
1894c                 | ' 
1894c                 | ' sub pspoke(addr as ulong,value as ulong)
1894c                 | _pspoke
1894c     00 4A 05 F6 | 	mov	COUNT_, #0
18950     A8 00 A0 FD | 	call	#pushregs_
18954     08 F0 07 F1 | 	add	ptra, #8
18958     A7 12 62 FC | 	wrlong	arg01, fp
1895c     04 4E 05 F1 | 	add	fp, #4
18960     A7 14 62 FC | 	wrlong	arg02, fp
18964     A7 12 02 F6 | 	mov	arg01, fp
18968     04 4E 85 F1 | 	sub	fp, #4
1896c     A7 14 02 FB | 	rdlong	arg02, fp
18970     01 16 06 F6 | 	mov	arg03, #1
18974     0B 00 00 FF 
18978     C0 E4 05 F1 | 	add	objptr, ##5824
1897c     F4 29 B0 FD | 	call	#_psram_spin2_write
18980     0B 00 00 FF 
18984     C0 E4 85 F1 | 	sub	objptr, ##5824
18988     A7 F0 03 F6 | 	mov	ptra, fp
1898c     B2 00 A0 FD | 	call	#popregs_
18990                 | _pspoke_ret
18990     2D 00 64 FD | 	ret
18994                 | 
18994                 | ' 
18994                 | ' function pspeek(adr as ulong) as ubyte
18994                 | _pspeek
18994     00 4A 05 F6 | 	mov	COUNT_, #0
18998     A8 00 A0 FD | 	call	#pushregs_
1899c     0C F0 07 F1 | 	add	ptra, #12
189a0     04 4E 05 F1 | 	add	fp, #4
189a4     A7 12 62 FC | 	wrlong	arg01, fp
189a8     04 4E 05 F1 | 	add	fp, #4
189ac     A7 12 02 F6 | 	mov	arg01, fp
189b0     04 4E 85 F1 | 	sub	fp, #4
189b4     A7 14 02 FB | 	rdlong	arg02, fp
189b8     04 4E 85 F1 | 	sub	fp, #4
189bc     01 16 06 F6 | 	mov	arg03, #1
189c0     0B 00 00 FF 
189c4     C0 E4 05 F1 | 	add	objptr, ##5824
189c8     0C 29 B0 FD | 	call	#_psram_spin2_read1
189cc     0B 00 00 FF 
189d0     C0 E4 85 F1 | 	sub	objptr, ##5824
189d4                 | ' psram.read1(varptr(res),adr,1)
189d4                 | ' return res
189d4     08 4E 05 F1 | 	add	fp, #8
189d8     A7 FA C1 FA | 	rdbyte	result1, fp
189dc     08 4E 85 F1 | 	sub	fp, #8
189e0     A7 F0 03 F6 | 	mov	ptra, fp
189e4     B2 00 A0 FD | 	call	#popregs_
189e8                 | _pspeek_ret
189e8     2D 00 64 FD | 	ret
189ec                 | 
189ec                 | ' 
189ec                 | ' function pslpeek(adr as ulong) as ulong
189ec                 | _pslpeek
189ec     00 4A 05 F6 | 	mov	COUNT_, #0
189f0     A8 00 A0 FD | 	call	#pushregs_
189f4     0C F0 07 F1 | 	add	ptra, #12
189f8     04 4E 05 F1 | 	add	fp, #4
189fc     A7 12 62 FC | 	wrlong	arg01, fp
18a00     04 4E 05 F1 | 	add	fp, #4
18a04     A7 12 02 F6 | 	mov	arg01, fp
18a08     04 4E 85 F1 | 	sub	fp, #4
18a0c     A7 14 02 FB | 	rdlong	arg02, fp
18a10     04 4E 85 F1 | 	sub	fp, #4
18a14     04 16 06 F6 | 	mov	arg03, #4
18a18     0B 00 00 FF 
18a1c     C0 E4 05 F1 | 	add	objptr, ##5824
18a20     B4 28 B0 FD | 	call	#_psram_spin2_read1
18a24     0B 00 00 FF 
18a28     C0 E4 85 F1 | 	sub	objptr, ##5824
18a2c                 | ' psram.read1(varptr(res),adr,4)
18a2c                 | ' return res
18a2c     08 4E 05 F1 | 	add	fp, #8
18a30     A7 FA 01 FB | 	rdlong	result1, fp
18a34     08 4E 85 F1 | 	sub	fp, #8
18a38     A7 F0 03 F6 | 	mov	ptra, fp
18a3c     B2 00 A0 FD | 	call	#popregs_
18a40                 | _pslpeek_ret
18a40     2D 00 64 FD | 	ret
18a44                 | 
18a44                 | ' 
18a44                 | ' function psdpeek(adr as ulong) as ulong
18a44                 | _psdpeek
18a44     00 4A 05 F6 | 	mov	COUNT_, #0
18a48     A8 00 A0 FD | 	call	#pushregs_
18a4c     0C F0 07 F1 | 	add	ptra, #12
18a50     04 4E 05 F1 | 	add	fp, #4
18a54     A7 12 62 FC | 	wrlong	arg01, fp
18a58     04 4E 05 F1 | 	add	fp, #4
18a5c     A7 12 02 F6 | 	mov	arg01, fp
18a60     04 4E 85 F1 | 	sub	fp, #4
18a64     A7 14 02 FB | 	rdlong	arg02, fp
18a68     04 4E 85 F1 | 	sub	fp, #4
18a6c     02 16 06 F6 | 	mov	arg03, #2
18a70     0B 00 00 FF 
18a74     C0 E4 05 F1 | 	add	objptr, ##5824
18a78     5C 28 B0 FD | 	call	#_psram_spin2_read1
18a7c     0B 00 00 FF 
18a80     C0 E4 85 F1 | 	sub	objptr, ##5824
18a84                 | ' psram.read1(varptr(res),adr,2)
18a84                 | ' return res
18a84     08 4E 05 F1 | 	add	fp, #8
18a88     A7 FA E1 FA | 	rdword	result1, fp
18a8c     08 4E 85 F1 | 	sub	fp, #8
18a90     A7 F0 03 F6 | 	mov	ptra, fp
18a94     B2 00 A0 FD | 	call	#popregs_
18a98                 | _psdpeek_ret
18a98     2D 00 64 FD | 	ret
18a9c                 | 
18a9c                 | ' 
18a9c                 | ' '' ------------------------------- USB keyboard scan to char translator
18a9c                 | ' 
18a9c                 | ' function scantochar(key)
18a9c                 | _scantochar
18a9c                 | ' 
18a9c                 | ' select case (key shr 8) and 255
18a9c     09 01 02 F6 | 	mov	_var01, arg01
18aa0     08 00 C6 F0 | 	sar	_var01, #8
18aa4     FF 00 0E F5 | 	and	_var01, #255 wz
18aa8     24 00 90 AD |  if_e	jmp	#LR__1920
18aac     02 00 0E F2 | 	cmp	_var01, #2 wz
18ab0     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
18ab4     30 00 90 AD |  if_e	jmp	#LR__1921
18ab8     40 00 0E F2 | 	cmp	_var01, #64 wz
18abc     44 00 90 AD |  if_e	jmp	#LR__1922
18ac0     42 00 0E F2 | 	cmp	_var01, #66 wz
18ac4     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
18ac8     70 00 90 5D |  if_ne	jmp	#LR__1924
18acc     50 00 90 FD | 	jmp	#LR__1923
18ad0                 | LR__1920
18ad0     09 FB 01 F6 | 	mov	result1, arg01
18ad4     7F FA 05 F5 | 	and	result1, #127
18ad8     02 FA 65 F0 | 	shl	result1, #2
18adc     F5 FA 01 F1 | 	add	result1, ptr__dat__
18ae0     FD FA C1 FA | 	rdbyte	result1, result1
18ae4     54 00 90 FD | 	jmp	#_scantochar_ret
18ae8                 | LR__1921
18ae8     09 FB 01 F6 | 	mov	result1, arg01
18aec     7F FA 05 F5 | 	and	result1, #127
18af0     02 FA 65 F0 | 	shl	result1, #2
18af4     01 FA 05 F1 | 	add	result1, #1
18af8     F5 FA 01 F1 | 	add	result1, ptr__dat__
18afc     FD FA C1 FA | 	rdbyte	result1, result1
18b00     38 00 90 FD | 	jmp	#_scantochar_ret
18b04                 | LR__1922
18b04     09 FB 01 F6 | 	mov	result1, arg01
18b08     7F FA 05 F5 | 	and	result1, #127
18b0c     02 FA 65 F0 | 	shl	result1, #2
18b10     02 FA 05 F1 | 	add	result1, #2
18b14     F5 FA 01 F1 | 	add	result1, ptr__dat__
18b18     FD FA C1 FA | 	rdbyte	result1, result1
18b1c     1C 00 90 FD | 	jmp	#_scantochar_ret
18b20                 | LR__1923
18b20     09 FB 01 F6 | 	mov	result1, arg01
18b24     7F FA 05 F5 | 	and	result1, #127
18b28     02 FA 65 F0 | 	shl	result1, #2
18b2c     03 FA 05 F1 | 	add	result1, #3
18b30     F5 FA 01 F1 | 	add	result1, ptr__dat__
18b34     FD FA C1 FA | 	rdbyte	result1, result1
18b38     00 00 90 FD | 	jmp	#_scantochar_ret
18b3c                 | LR__1924
18b3c                 | _scantochar_ret
18b3c     2D 00 64 FD | 	ret
18b40                 | 
18b40                 | _program
18b40     0B 4A 05 F6 | 	mov	COUNT_, #11
18b44     A8 00 A0 FD | 	call	#pushregs_
18b48     70 FC BF FD | 	call	#_startpsram
18b4c     40 12 06 F6 | 	mov	arg01, #64
18b50     00 14 06 F6 | 	mov	arg02, #0
18b54     00 16 06 F6 | 	mov	arg03, #0
18b58     A0 FC BF FD | 	call	#_startvideo
18b5c     00 12 06 F6 | 	mov	arg01, #0
18b60     00 14 06 F6 | 	mov	arg02, #0
18b64     00 16 06 F6 | 	mov	arg03, #0
18b68     0B 00 00 FF 
18b6c     C0 E4 05 F1 | 	add	objptr, ##5824
18b70     A4 2C B0 FD | 	call	#_audio096_spin2_start
18b74     FE 1C 02 F6 | 	mov	arg06, result2
18b78     4B 00 00 FF 
18b7c     20 E5 05 F1 | 	add	objptr, ##38688
18b80     F2 FA 61 FC | 	wrlong	result1, objptr
18b84     14 E4 05 F1 | 	add	objptr, #20
18b88     F2 1C 62 FC | 	wrlong	arg06, objptr
18b8c     56 00 00 FF 
18b90     F4 E5 85 F1 | 	sub	objptr, ##44532
18b94     32 12 06 F6 | 	mov	arg01, #50
18b98     98 35 B0 FD | 	call	#__system___waitms
18b9c     56 00 00 FF 
18ba0     F4 E5 05 F1 | 	add	objptr, ##44532
18ba4     F2 12 02 FB | 	rdlong	arg01, objptr
18ba8     56 00 00 FF 
18bac     F4 E5 85 F1 | 	sub	objptr, ##44532
18bb0     14 12 06 F1 | 	add	arg01, #20
18bb4     20 00 80 FF 
18bb8     09 01 58 FC | 	wrword	##16384, arg01
18bbc     4C 2A B0 FD | 	call	#_usbnew_spin2_start
18bc0     56 00 00 FF 
18bc4     E8 E5 05 F1 | 	add	objptr, ##44520
18bc8     F2 FA 61 FC | 	wrlong	result1, objptr
18bcc                 | '   mouse_limits[0] := xlim
18bcc     0F 00 00 FF 
18bd0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
18bd4     01 00 80 FF 
18bd8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
18bdc                 | '   mouse_limits[1] := ylim
18bdc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18be0     01 00 80 FF 
18be4     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
18be8     56 00 00 FF 
18bec     DB E4 85 F1 | 	sub	objptr, ##44251
18bf0     F2 12 02 F6 | 	mov	arg01, objptr
18bf4     0D E5 85 F1 | 	sub	objptr, #269
18bf8     C4 12 06 F1 | 	add	arg01, #196
18bfc                 | '   mouse_outptr := ptr
18bfc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
18c00     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
18c04     0F 00 00 FF 
18c08     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
18c0c     0E 00 00 FF 
18c10     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
18c14     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18c18     0E 00 00 FF 
18c1c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
18c20     10 12 06 F6 | 	mov	arg01, #16
18c24     90 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
18c28     10 12 06 F6 | 	mov	arg01, #16
18c2c     20 14 06 F6 | 	mov	arg02, #32
18c30     20 16 06 F6 | 	mov	arg03, #32
18c34     F4 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
18c38     09 12 C6 F9 | 	decod	arg01, #9
18c3c     20 15 06 F6 | 	mov	arg02, #288
18c40     84 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
18c44     F2 1C 02 F6 | 	mov	arg06, objptr
18c48     79 00 00 FF 
18c4c     CC E5 05 F1 | 	add	objptr, ##62412
18c50     F2 1A 02 F6 | 	mov	arg05, objptr
18c54     0D 1D 62 FC | 	wrlong	arg06, arg05
18c58     04 1A 06 F1 | 	add	arg05, #4
18c5c     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
18c60     EF 14 02 F6 | 	mov	arg02, entryptr__
18c64     F2 1E 02 F6 | 	mov	local01, objptr
18c68     1E FA 05 F6 | 	mov	result1, #30
18c6c     28 1E 62 FD | 	setq	local01
18c70     0A FB F1 FC | 	coginit	result1, arg02 wc
18c74     01 FA 65 C6 |  if_b	neg	result1, #1
18c78     04 E4 85 F1 | 	sub	objptr, #4
18c7c     F2 FA 61 FC | 	wrlong	result1, objptr
18c80     01 00 00 FF 
18c84     90 E4 05 F1 | 	add	objptr, ##656
18c88     F2 00 68 FC | 	wrlong	#0, objptr
18c8c     24 00 00 FF 
18c90     40 E4 85 F1 | 	sub	objptr, ##18496
18c94     F2 04 68 FC | 	wrlong	#2, objptr
18c98     04 E4 05 F1 | 	add	objptr, #4
18c9c     F2 26 69 FC | 	wrlong	#147, objptr
18ca0     04 E4 05 F1 | 	add	objptr, #4
18ca4     F2 34 69 FC | 	wrlong	#154, objptr
18ca8     04 E4 05 F1 | 	add	objptr, #4
18cac     F2 08 68 FC | 	wrlong	#4, objptr
18cb0     04 E4 85 F1 | 	sub	objptr, #4
18cb4     F2 1C 02 FB | 	rdlong	arg06, objptr
18cb8     14 E4 85 F1 | 	sub	objptr, #20
18cbc     F2 1C 62 FC | 	wrlong	arg06, objptr
18cc0     04 E4 05 F1 | 	add	objptr, #4
18cc4     F2 00 68 FC | 	wrlong	#0, objptr
18cc8     04 E4 05 F1 | 	add	objptr, #4
18ccc     F2 00 68 FC | 	wrlong	#0, objptr
18cd0     22 00 00 FF 
18cd4     B0 E5 05 F1 | 	add	objptr, ##17840
18cd8     F2 02 68 FC | 	wrlong	#1, objptr
18cdc     01 00 00 FF 
18ce0     9C E4 05 F1 | 	add	objptr, ##668
18ce4     F2 00 68 FC | 	wrlong	#0, objptr
18ce8     01 00 00 FF 
18cec     00 EA 05 F1 | 	add	ptr__dat__, ##512
18cf0     08 E4 05 F1 | 	add	objptr, #8
18cf4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
18cf8     04 E4 85 F1 | 	sub	objptr, #4
18cfc     03 00 80 FF 
18d00     F2 3C 69 FC | 	wrlong	##1694, objptr
18d04     16 00 00 FF 
18d08     1C E4 85 F1 | 	sub	objptr, ##11292
18d0c     F2 18 68 FC | 	wrlong	#12, objptr
18d10     65 00 00 FF 
18d14     48 E4 85 F1 | 	sub	objptr, ##51784
18d18     01 00 00 FF 
18d1c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
18d20     50 DF BF FD | 	call	#_init_commands
18d24     00 F7 BF FD | 	call	#_init_error_strings
18d28     9C EE BF FD | 	call	#_init_audio
18d2c     4C 4D BF FD | 	call	#_do_new
18d30     57 00 00 FF 
18d34     20 E4 05 F1 | 	add	objptr, ##44576
18d38     F2 12 02 FB | 	rdlong	arg01, objptr
18d3c     04 E4 85 F1 | 	sub	objptr, #4
18d40     F2 14 02 FB | 	rdlong	arg02, objptr
18d44     57 00 00 FF 
18d48     1C E4 85 F1 | 	sub	objptr, ##44572
18d4c     94 1D B0 FD | 	call	#_hg010b_spin2_cls
18d50     57 00 00 FF 
18d54     24 E4 05 F1 | 	add	objptr, ##44580
18d58     F2 12 02 FB | 	rdlong	arg01, objptr
18d5c     57 00 00 FF 
18d60     24 E4 85 F1 | 	sub	objptr, ##44580
18d64     94 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
18d68                 | ' 
18d68                 | ' leading_spaces:=amount
18d68     01 00 00 FF 
18d6c     B2 E4 05 F1 | 	add	objptr, ##690
18d70     F2 04 68 FC | 	wrlong	#2, objptr
18d74     01 00 00 FF 
18d78     B2 E4 85 F1 | 	sub	objptr, ##690
18d7c     60 01 00 FF 
18d80     41 20 06 F6 | 	mov	local02, ##@LR__4973
18d84     3D 12 06 F6 | 	mov	arg01, #61
18d88     3C 14 06 F6 | 	mov	arg02, #60
18d8c     3B 16 06 F6 | 	mov	arg03, #59
18d90     3A 18 06 F6 | 	mov	arg04, #58
18d94     D0 7A B0 FD | 	call	#__system___vfs_open_sdcardx
18d98     FD 14 02 F6 | 	mov	arg02, result1
18d9c     10 13 02 F6 | 	mov	arg01, local02
18da0     68 34 B0 FD | 	call	#__system___mount
18da4     60 01 00 FF 
18da8     45 12 06 F6 | 	mov	arg01, ##@LR__4974
18dac     1C 37 B0 FD | 	call	#__system___chdir
18db0     60 01 00 FF 
18db4     4D 20 06 F6 | 	mov	local02, ##@LR__4975
18db8     72 00 00 FF 
18dbc     78 E4 05 F1 | 	add	objptr, ##58488
18dc0     F2 20 62 FC | 	wrlong	local02, objptr
18dc4     1B 00 00 FF 
18dc8     60 E4 85 F1 | 	sub	objptr, ##13920
18dcc     F2 12 02 FB | 	rdlong	arg01, objptr
18dd0     57 00 00 FF 
18dd4     18 E4 85 F1 | 	sub	objptr, ##44568
18dd8     01 12 66 F0 | 	shl	arg01, #1
18ddc     01 14 06 F6 | 	mov	arg02, #1
18de0     58 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
18de4                 | ' 
18de4                 | ' init_commands
18de4                 | ' init_error_strings
18de4                 | ' init_audio
18de4                 | ' do_new
18de4                 | ' 
18de4                 | ' 
18de4                 | ' cls(ink, paper)
18de4                 | ' v.setfontfamily(font) 				' use ST Mono font
18de4                 | ' v.setleadingspaces(2)
18de4                 | ' mount "/sd", _vfs_open_sdcard()
18de4                 | ' chdir "/sd/bas"
18de4                 | ' 
18de4                 | ' currentdir$="/sd/bas"
18de4                 | ' 
18de4                 | ' position 2*editor_spaces,1 : print ver$
18de4     00 12 06 F6 | 	mov	arg01, #0
18de8     E4 89 B0 FD | 	call	#__system___getiolock_0472
18dec     FD 12 02 F6 | 	mov	arg01, result1
18df0     4C 30 B0 FD | 	call	#__system___lockmem
18df4     18 00 00 FF 
18df8     4C EB 05 F1 | 	add	ptr__dat__, ##12620
18dfc     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
18e00     18 00 00 FF 
18e04     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
18e08     00 12 06 F6 | 	mov	arg01, #0
18e0c     00 16 06 F6 | 	mov	arg03, #0
18e10     30 3D B0 FD | 	call	#__system___basic_print_string
18e14     00 12 06 F6 | 	mov	arg01, #0
18e18     0A 14 06 F6 | 	mov	arg02, #10
18e1c     00 16 06 F6 | 	mov	arg03, #0
18e20     C8 3C B0 FD | 	call	#__system___basic_print_char
18e24     00 12 06 F6 | 	mov	arg01, #0
18e28     A4 89 B0 FD | 	call	#__system___getiolock_0472
18e2c     FD 00 68 FC | 	wrlong	#0, result1
18e30     F2 12 02 FB | 	rdlong	arg01, objptr
18e34     00 14 06 F6 | 	mov	arg02, #0
18e38     0A 16 06 F6 | 	mov	arg03, #10
18e3c     98 52 B0 FD | 	call	#__system__Number_S
18e40     FD 12 02 F6 | 	mov	arg01, result1
18e44     60 01 00 FF 
18e48     55 14 06 F6 | 	mov	arg02, ##@LR__4976
18e4c     4C 30 B0 FD | 	call	#__system___string_concat
18e50     FD 20 02 F6 | 	mov	local02, result1
18e54     79 00 00 FF 
18e58     C0 E5 05 F1 | 	add	objptr, ##62400
18e5c     F2 20 62 FC | 	wrlong	local02, objptr
18e60     79 00 00 FF 
18e64     C0 E5 85 F1 | 	sub	objptr, ##62400
18e68                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
18e68     00 12 06 F6 | 	mov	arg01, #0
18e6c     60 89 B0 FD | 	call	#__system___getiolock_0472
18e70     FD 12 02 F6 | 	mov	arg01, result1
18e74     C8 2F B0 FD | 	call	#__system___lockmem
18e78     79 00 00 FF 
18e7c     C0 E5 05 F1 | 	add	objptr, ##62400
18e80     F2 14 02 FB | 	rdlong	arg02, objptr
18e84     79 00 00 FF 
18e88     C0 E5 85 F1 | 	sub	objptr, ##62400
18e8c     00 12 06 F6 | 	mov	arg01, #0
18e90     00 16 06 F6 | 	mov	arg03, #0
18e94     AC 3C B0 FD | 	call	#__system___basic_print_string
18e98     00 12 06 F6 | 	mov	arg01, #0
18e9c     0A 14 06 F6 | 	mov	arg02, #10
18ea0     00 16 06 F6 | 	mov	arg03, #0
18ea4     44 3C B0 FD | 	call	#__system___basic_print_char
18ea8     00 12 06 F6 | 	mov	arg01, #0
18eac     20 89 B0 FD | 	call	#__system___getiolock_0472
18eb0     FD 00 68 FC | 	wrlong	#0, result1
18eb4     57 00 00 FF 
18eb8     18 E4 05 F1 | 	add	objptr, ##44568
18ebc     F2 12 02 FB | 	rdlong	arg01, objptr
18ec0     57 00 00 FF 
18ec4     18 E4 85 F1 | 	sub	objptr, ##44568
18ec8     01 12 66 F0 | 	shl	arg01, #1
18ecc     04 14 06 F6 | 	mov	arg02, #4
18ed0     68 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
18ed4                 | ' position 2*editor_spaces,4 : print "Ready"
18ed4     00 12 06 F6 | 	mov	arg01, #0
18ed8     F4 88 B0 FD | 	call	#__system___getiolock_0472
18edc     FD 12 02 F6 | 	mov	arg01, result1
18ee0     5C 2F B0 FD | 	call	#__system___lockmem
18ee4     60 01 00 FF 
18ee8     67 14 06 F6 | 	mov	arg02, ##@LR__4977
18eec     00 12 06 F6 | 	mov	arg01, #0
18ef0     00 16 06 F6 | 	mov	arg03, #0
18ef4     4C 3C B0 FD | 	call	#__system___basic_print_string
18ef8     FD 22 02 F6 | 	mov	local03, result1
18efc     00 12 06 F6 | 	mov	arg01, #0
18f00     0A 14 06 F6 | 	mov	arg02, #10
18f04     00 16 06 F6 | 	mov	arg03, #0
18f08     E0 3B B0 FD | 	call	#__system___basic_print_char
18f0c     01 24 06 F6 | 	mov	local04, #1
18f10     00 12 06 F6 | 	mov	arg01, #0
18f14     B8 88 B0 FD | 	call	#__system___getiolock_0472
18f18     FD 00 68 FC | 	wrlong	#0, result1
18f1c     00 26 06 F6 | 	mov	local05, #0
18f20     00 14 06 F6 | 	mov	arg02, #0
18f24     01 14 D6 F7 | 	test	arg02, #1 wc
18f28     5A 4C 64 FD | 	drvc	#38
18f2c     01 14 D6 F7 | 	test	arg02, #1 wc
18f30     5A 4E 64 FD | 	drvc	#39
18f34                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
18f34                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
18f34                 | ' 
18f34                 | ' 'paula.play(0,@samplebuf(0,0),88200,16484,0,2048)
18f34                 | ' 
18f34                 | ' 'base2:=@channel1[0]+64*channel
18f34                 | ' 'long[base2+8]:=sample+$C0000000 
18f34                 | ' 'long[base2+12]:= len
18f34                 | ' 'if loop >=0 
18f34                 | ' '  long[base2+16]:= loop
18f34                 | ' 'else
18f34                 | ' '  long[base2+16]:= len+2
18f34                 | ' 'word[base2+20]:=vol
18f34                 | ' 'word[base2+24]:= 3546911/splfreq 
18f34                 | ' 'word[base2+26]:=256 ' todo: use skip to make accurate sample rate
18f34                 | ' 'long[base2+28]:=$40000000
18f34                 | ' 
18f34                 | ' 'lpoke base+8,varptr(samplebuf(0,0))+$C000_0000 
18f34                 | ' 'lpoke base+16,2048
18f34                 | ' 'lpoke base+12,0
18f34                 | ' 'dpoke base+20,16383
18f34                 | ' 'dpoke base+22,8192
18f34                 | ' 'dpoke base+24,60
18f34                 | ' 'dpoke base+26,256 ' todo: use skip to make accurate sample rate
18f34                 | ' 'dpoke base+28,$4000_0000
18f34                 | ' 'lpoke base+32,0 
18f34                 | ' 'lpoke base+36, 0
18f34                 | ' 'lpoke base+40,25600' speed
18f34                 | ' 'lpoke base+44,1023 'len
18f34                 | ' 
18f34                 | ' 'do: position 0,0 : print lpeek(base+32): loop 
18f34                 | ' 
18f34                 | ' '-------------------------------------------------------------------------------------------------------- 
18f34                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
18f34                 | ' '--------------------------------------------------------------------------------------------------------
18f34                 | ' 
18f34                 | ' do
18f34                 | LR__1930
18f34     01 12 06 F6 | 	mov	arg01, #1
18f38     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
18f3c     06 12 06 F6 | 	mov	arg01, #6
18f40     0B 00 00 FF 
18f44     C0 E4 05 F1 | 	add	objptr, ##5824
18f48     F4 2B B0 FD | 	call	#_audio096_spin2_stop
18f4c     0B 00 00 FF 
18f50     C0 E4 85 F1 | 	sub	objptr, ##5824
18f54     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
18f58     65 00 00 FF 
18f5c     58 E4 05 F1 | 	add	objptr, ##51800
18f60     F2 FA 61 FC | 	wrlong	result1, objptr
18f64                 | '   return hkbd_led_rep
18f64     13 00 00 FF 
18f68     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
18f6c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
18f70     13 00 00 FF 
18f74     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
18f78     16 00 00 FF 
18f7c     30 E4 05 F1 | 	add	objptr, ##11312
18f80     F2 FA 61 FC | 	wrlong	result1, objptr
18f84                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
18f84     16 00 00 FF 
18f88     30 E4 85 F1 | 	sub	objptr, ##11312
18f8c     F2 20 02 FB | 	rdlong	local02, objptr
18f90     65 00 00 FF 
18f94     58 E4 85 F1 | 	sub	objptr, ##51800
18f98     01 20 16 F2 | 	cmp	local02, #1 wc
18f9c     BC 00 90 CD |  if_b	jmp	#LR__1931
18fa0     65 00 00 FF 
18fa4     58 E4 05 F1 | 	add	objptr, ##51800
18fa8     F2 24 02 FB | 	rdlong	local04, objptr
18fac     65 00 00 FF 
18fb0     58 E4 85 F1 | 	sub	objptr, ##51800
18fb4     12 23 02 F6 | 	mov	local03, local04
18fb8     04 22 16 F2 | 	cmp	local03, #4 wc
18fbc     9C 00 90 3D |  if_ae	jmp	#LR__1931
18fc0     79 00 00 FF 
18fc4     C4 E5 05 F1 | 	add	objptr, ##62404
18fc8     F2 1E 02 FB | 	rdlong	local01, objptr
18fcc     79 00 00 FF 
18fd0     C4 E5 85 F1 | 	sub	objptr, ##62404
18fd4     0F 27 02 F6 | 	mov	local05, local01
18fd8     01 26 0E F2 | 	cmp	local05, #1 wz
18fdc     7C 00 90 5D |  if_ne	jmp	#LR__1931
18fe0     04 00 00 FF 
18fe4     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
18fe8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18fec     04 00 00 FF 
18ff0     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
18ff4     56 00 00 FF 
18ff8     44 22 06 F6 | 	mov	local03, ##44100
18ffc     0C 24 C6 F9 | 	decod	local04, #12
19000     00 26 06 F6 | 	mov	local05, #0
19004     03 00 00 FF 
19008     DE 1E 06 F6 | 	mov	local01, ##1758
1900c     07 12 06 F6 | 	mov	arg01, #7
19010     56 00 00 FF 
19014     44 16 06 F6 | 	mov	arg03, ##44100
19018     0C 18 C6 F9 | 	decod	arg04, #12
1901c     00 1A 06 F6 | 	mov	arg05, #0
19020     03 00 00 FF 
19024     DE 1C 06 F6 | 	mov	arg06, ##1758
19028     0B 00 00 FF 
1902c     C0 E4 05 F1 | 	add	objptr, ##5824
19030     BC 29 B0 FD | 	call	#_audio096_spin2_play
19034     0B 00 00 FF 
19038     C0 E4 85 F1 | 	sub	objptr, ##5824
1903c     0A 12 06 F6 | 	mov	arg01, #10
19040     F0 30 B0 FD | 	call	#__system___waitms
19044     07 12 06 F6 | 	mov	arg01, #7
19048     0B 00 00 FF 
1904c     C0 E4 05 F1 | 	add	objptr, ##5824
19050     EC 2A B0 FD | 	call	#_audio096_spin2_stop
19054     0B 00 00 FF 
19058     C0 E4 85 F1 | 	sub	objptr, ##5824
1905c                 | LR__1931
1905c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1905c     65 00 00 FF 
19060     58 E4 05 F1 | 	add	objptr, ##51800
19064     F2 20 02 FB | 	rdlong	local02, objptr
19068     65 00 00 FF 
1906c     58 E4 85 F1 | 	sub	objptr, ##51800
19070     04 20 16 F2 | 	cmp	local02, #4 wc
19074     80 00 90 CD |  if_b	jmp	#LR__1932
19078     65 00 00 FF 
1907c     58 E4 05 F1 | 	add	objptr, ##51800
19080     F2 24 02 FB | 	rdlong	local04, objptr
19084     65 00 00 FF 
19088     58 E4 85 F1 | 	sub	objptr, ##51800
1908c     12 23 02 F6 | 	mov	local03, local04
19090     00 00 40 FF 
19094     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
19098     65 00 00 CF 
1909c     58 E4 05 C1 |  if_b	add	objptr, ##51800
190a0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
190a4     65 00 00 CF 
190a8     58 E4 85 C1 |  if_b	sub	objptr, ##51800
190ac     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
190b0     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
190b4     40 00 90 3D |  if_ae	jmp	#LR__1932
190b8     65 00 00 FF 
190bc     58 E4 05 F1 | 	add	objptr, ##51800
190c0     F2 20 02 FB | 	rdlong	local02, objptr
190c4     04 E4 05 F1 | 	add	objptr, #4
190c8     F2 20 62 FC | 	wrlong	local02, objptr
190cc     16 00 00 FF 
190d0     30 E4 05 F1 | 	add	objptr, ##11312
190d4     F2 02 68 FC | 	wrlong	#1, objptr
190d8     16 00 00 FF 
190dc     30 E4 85 F1 | 	sub	objptr, ##11312
190e0     F2 20 02 FB | 	rdlong	local02, objptr
190e4     16 00 00 FF 
190e8     34 E4 05 F1 | 	add	objptr, ##11316
190ec     F2 20 62 FC | 	wrlong	local02, objptr
190f0     7B 00 00 FF 
190f4     90 E4 85 F1 | 	sub	objptr, ##63120
190f8                 | LR__1932
190f8                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
190f8     65 00 00 FF 
190fc     58 E4 05 F1 | 	add	objptr, ##51800
19100     F2 20 02 FB | 	rdlong	local02, objptr
19104     65 00 00 FF 
19108     58 E4 85 F1 | 	sub	objptr, ##51800
1910c     00 00 40 FF 
19110     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
19114     7B 00 00 3F 
19118     94 E4 05 31 |  if_ae	add	objptr, ##63124
1911c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19120     08 E4 85 31 |  if_ae	sub	objptr, #8
19124     F2 00 68 3C |  if_ae	wrlong	#0, objptr
19128     7B 00 00 3F 
1912c     8C E4 85 31 |  if_ae	sub	objptr, ##63116
19130                 | ' if key=0 andalso rpt=1 then rptcnt+=1
19130     65 00 00 FF 
19134     58 E4 05 F1 | 	add	objptr, ##51800
19138     F2 20 0A FB | 	rdlong	local02, objptr wz
1913c     65 00 00 FF 
19140     58 E4 85 F1 | 	sub	objptr, ##51800
19144     7B 00 00 AF 
19148     8C E4 05 A1 |  if_e	add	objptr, ##63116
1914c     F2 24 02 AB |  if_e	rdlong	local04, objptr
19150     7B 00 00 AF 
19154     8C E4 85 A1 |  if_e	sub	objptr, ##63116
19158     12 23 02 A6 |  if_e	mov	local03, local04
1915c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
19160     7B 00 00 AF 
19164     94 E4 05 A1 |  if_e	add	objptr, ##63124
19168     F2 20 02 AB |  if_e	rdlong	local02, objptr
1916c     01 20 06 A1 |  if_e	add	local02, #1
19170     F2 20 62 AC |  if_e	wrlong	local02, objptr
19174     7B 00 00 AF 
19178     94 E4 85 A1 |  if_e	sub	objptr, ##63124
1917c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1917c     65 00 00 FF 
19180     58 E4 05 F1 | 	add	objptr, ##51800
19184     F2 20 02 FB | 	rdlong	local02, objptr
19188     65 00 00 FF 
1918c     58 E4 85 F1 | 	sub	objptr, ##51800
19190     00 00 40 FF 
19194     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
19198     44 00 90 3D |  if_ae	jmp	#LR__1934
1919c     7B 00 00 FF 
191a0     94 E4 05 F1 | 	add	objptr, ##63124
191a4     F2 20 02 FB | 	rdlong	local02, objptr
191a8     7B 00 00 FF 
191ac     94 E4 85 F1 | 	sub	objptr, ##63124
191b0     19 20 0E F2 | 	cmp	local02, #25 wz
191b4     28 00 90 5D |  if_ne	jmp	#LR__1933
191b8     65 00 00 FF 
191bc     5C E4 05 F1 | 	add	objptr, ##51804
191c0     F2 20 02 FB | 	rdlong	local02, objptr
191c4     16 00 00 FF 
191c8     34 E4 05 F1 | 	add	objptr, ##11316
191cc     F2 20 62 FC | 	wrlong	local02, objptr
191d0     04 E4 05 F1 | 	add	objptr, #4
191d4     F2 2A 68 FC | 	wrlong	#21, objptr
191d8     7B 00 00 FF 
191dc     94 E4 85 F1 | 	sub	objptr, ##63124
191e0                 | LR__1933
191e0                 | LR__1934
191e0                 | ' 
191e0                 | ' 
191e0                 | ' if key3<>0 then
191e0     7B 00 00 FF 
191e4     90 E4 05 F1 | 	add	objptr, ##63120
191e8     F2 28 0A FB | 	rdlong	local06, objptr wz
191ec     7B 00 00 FF 
191f0     90 E4 85 F1 | 	sub	objptr, ##63120
191f4     3C FD 9F AD |  if_e	jmp	#LR__1930
191f8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
191f8     79 00 00 FF 
191fc     C4 E5 05 F1 | 	add	objptr, ##62404
19200     F2 20 02 FB | 	rdlong	local02, objptr
19204     79 00 00 FF 
19208     C4 E5 85 F1 | 	sub	objptr, ##62404
1920c     01 20 0E F2 | 	cmp	local02, #1 wz
19210     50 00 90 5D |  if_ne	jmp	#LR__1935
19214     7B 00 00 FF 
19218     68 E4 05 F1 | 	add	objptr, ##63080
1921c     F2 14 02 FB | 	rdlong	arg02, objptr
19220     56 00 00 FF 
19224     44 22 06 F6 | 	mov	local03, ##44100
19228     0C 24 C6 F9 | 	decod	local04, #12
1922c     04 E4 85 F1 | 	sub	objptr, #4
19230     F2 26 02 FB | 	rdlong	local05, objptr
19234     01 1E 66 F6 | 	neg	local01, #1
19238     07 12 06 F6 | 	mov	arg01, #7
1923c     56 00 00 FF 
19240     44 16 06 F6 | 	mov	arg03, ##44100
19244     0C 18 C6 F9 | 	decod	arg04, #12
19248     13 1B 02 F6 | 	mov	arg05, local05
1924c     01 1C 66 F6 | 	neg	arg06, #1
19250     6F 00 00 FF 
19254     A4 E5 85 F1 | 	sub	objptr, ##57252
19258     94 27 B0 FD | 	call	#_audio096_spin2_play
1925c     0B 00 00 FF 
19260     C0 E4 85 F1 | 	sub	objptr, ##5824
19264                 | LR__1935
19264     7B 00 00 FF 
19268     90 E4 05 F1 | 	add	objptr, ##63120
1926c     F2 12 02 FB | 	rdlong	arg01, objptr
19270     7B 00 00 FF 
19274     90 E4 85 F1 | 	sub	objptr, ##63120
19278     20 F8 BF FD | 	call	#_scantochar
1927c     7B 00 00 FF 
19280     98 E4 05 F1 | 	add	objptr, ##63128
19284     F2 FA 61 FC | 	wrlong	result1, objptr
19288                 | '   if leds and 2 = 2 then 
19288     10 E4 85 F1 | 	sub	objptr, #16
1928c     F2 20 0A FB | 	rdlong	local02, objptr wz
19290     7B 00 00 FF 
19294     88 E4 85 F1 | 	sub	objptr, ##63112
19298     68 01 90 AD |  if_e	jmp	#LR__1943
1929c                 | '     if key4>96 andalso key4<123 then
1929c     7B 00 00 FF 
192a0     98 E4 05 F1 | 	add	objptr, ##63128
192a4     F2 20 02 FB | 	rdlong	local02, objptr
192a8     7B 00 00 FF 
192ac     98 E4 85 F1 | 	sub	objptr, ##63128
192b0     61 20 56 F2 | 	cmps	local02, #97 wc
192b4     40 00 90 CD |  if_b	jmp	#LR__1936
192b8     7B 00 00 FF 
192bc     98 E4 05 F1 | 	add	objptr, ##63128
192c0     F2 24 02 FB | 	rdlong	local04, objptr
192c4     7B 00 00 FF 
192c8     98 E4 85 F1 | 	sub	objptr, ##63128
192cc     12 23 02 F6 | 	mov	local03, local04
192d0     7B 22 56 F2 | 	cmps	local03, #123 wc
192d4     20 00 90 3D |  if_ae	jmp	#LR__1936
192d8     7B 00 00 FF 
192dc     98 E4 05 F1 | 	add	objptr, ##63128
192e0     F2 20 02 FB | 	rdlong	local02, objptr
192e4     20 20 86 F1 | 	sub	local02, #32
192e8     F2 20 62 FC | 	wrlong	local02, objptr
192ec     7B 00 00 FF 
192f0     98 E4 85 F1 | 	sub	objptr, ##63128
192f4     0C 01 90 FD | 	jmp	#LR__1942
192f8                 | LR__1936
192f8     7B 00 00 FF 
192fc     98 E4 05 F1 | 	add	objptr, ##63128
19300     F2 20 02 FB | 	rdlong	local02, objptr
19304     7B 00 00 FF 
19308     98 E4 85 F1 | 	sub	objptr, ##63128
1930c     41 20 56 F2 | 	cmps	local02, #65 wc
19310     40 00 90 CD |  if_b	jmp	#LR__1937
19314     7B 00 00 FF 
19318     98 E4 05 F1 | 	add	objptr, ##63128
1931c     F2 24 02 FB | 	rdlong	local04, objptr
19320     7B 00 00 FF 
19324     98 E4 85 F1 | 	sub	objptr, ##63128
19328     12 23 02 F6 | 	mov	local03, local04
1932c     5B 22 56 F2 | 	cmps	local03, #91 wc
19330     20 00 90 3D |  if_ae	jmp	#LR__1937
19334     7B 00 00 FF 
19338     98 E4 05 F1 | 	add	objptr, ##63128
1933c     F2 20 02 FB | 	rdlong	local02, objptr
19340     20 20 06 F1 | 	add	local02, #32
19344     F2 20 62 FC | 	wrlong	local02, objptr
19348     7B 00 00 FF 
1934c     98 E4 85 F1 | 	sub	objptr, ##63128
19350     B0 00 90 FD | 	jmp	#LR__1941
19354                 | LR__1937
19354     7B 00 00 FF 
19358     98 E4 05 F1 | 	add	objptr, ##63128
1935c     F2 20 02 FB | 	rdlong	local02, objptr
19360     7B 00 00 FF 
19364     98 E4 85 F1 | 	sub	objptr, ##63128
19368     17 20 56 F2 | 	cmps	local02, #23 wc
1936c     40 00 90 CD |  if_b	jmp	#LR__1938
19370     7B 00 00 FF 
19374     98 E4 05 F1 | 	add	objptr, ##63128
19378     F2 24 02 FB | 	rdlong	local04, objptr
1937c     7B 00 00 FF 
19380     98 E4 85 F1 | 	sub	objptr, ##63128
19384     12 23 02 F6 | 	mov	local03, local04
19388     20 22 56 F2 | 	cmps	local03, #32 wc
1938c     20 00 90 3D |  if_ae	jmp	#LR__1938
19390     7B 00 00 FF 
19394     98 E4 05 F1 | 	add	objptr, ##63128
19398     F2 20 02 FB | 	rdlong	local02, objptr
1939c     09 20 86 F1 | 	sub	local02, #9
193a0     F2 20 62 FC | 	wrlong	local02, objptr
193a4     7B 00 00 FF 
193a8     98 E4 85 F1 | 	sub	objptr, ##63128
193ac     54 00 90 FD | 	jmp	#LR__1940
193b0                 | LR__1938
193b0     7B 00 00 FF 
193b4     98 E4 05 F1 | 	add	objptr, ##63128
193b8     F2 20 02 FB | 	rdlong	local02, objptr
193bc     7B 00 00 FF 
193c0     98 E4 85 F1 | 	sub	objptr, ##63128
193c4     0E 20 56 F2 | 	cmps	local02, #14 wc
193c8     38 00 90 CD |  if_b	jmp	#LR__1939
193cc     7B 00 00 FF 
193d0     98 E4 05 F1 | 	add	objptr, ##63128
193d4     F2 24 02 FB | 	rdlong	local04, objptr
193d8     7B 00 00 FF 
193dc     98 E4 85 F1 | 	sub	objptr, ##63128
193e0     12 23 02 F6 | 	mov	local03, local04
193e4     17 22 56 F2 | 	cmps	local03, #23 wc
193e8     7B 00 00 CF 
193ec     98 E4 05 C1 |  if_b	add	objptr, ##63128
193f0     F2 20 02 CB |  if_b	rdlong	local02, objptr
193f4     27 20 06 C1 |  if_b	add	local02, #39
193f8     F2 20 62 CC |  if_b	wrlong	local02, objptr
193fc     7B 00 00 CF 
19400     98 E4 85 C1 |  if_b	sub	objptr, ##63128
19404                 | LR__1939
19404                 | LR__1940
19404                 | LR__1941
19404                 | LR__1942
19404                 | LR__1943
19404                 | '  
19404                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
19404     7B 00 00 FF 
19408     98 E4 05 F1 | 	add	objptr, ##63128
1940c     F2 20 02 FB | 	rdlong	local02, objptr
19410     7B 00 00 FF 
19414     98 E4 85 F1 | 	sub	objptr, ##63128
19418     01 20 56 F2 | 	cmps	local02, #1 wc
1941c     90 00 90 CD |  if_b	jmp	#LR__1944
19420     7B 00 00 FF 
19424     98 E4 05 F1 | 	add	objptr, ##63128
19428     F2 24 02 FB | 	rdlong	local04, objptr
1942c     7B 00 00 FF 
19430     98 E4 85 F1 | 	sub	objptr, ##63128
19434     12 23 02 F6 | 	mov	local03, local04
19438     7F 22 56 F2 | 	cmps	local03, #127 wc
1943c     38 E4 05 C1 |  if_b	add	objptr, #56
19440     F2 1E E2 CA |  if_b	rdword	local01, objptr
19444     38 E4 85 C1 |  if_b	sub	objptr, #56
19448     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1944c     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
19450     5C 00 90 3D |  if_ae	jmp	#LR__1944
19454     7B 00 00 FF 
19458     98 E4 05 F1 | 	add	objptr, ##63128
1945c     F2 12 02 FB | 	rdlong	arg01, objptr
19460     7B 00 00 FF 
19464     98 E4 85 F1 | 	sub	objptr, ##63128
19468     DC 4B B0 FD | 	call	#__system__Chr_S
1946c     FD 2A 02 F6 | 	mov	local07, result1
19470     57 00 00 FF 
19474     00 E4 05 F1 | 	add	objptr, ##44544
19478     F2 12 02 FB | 	rdlong	arg01, objptr
1947c     57 00 00 FF 
19480     00 E4 85 F1 | 	sub	objptr, ##44544
19484     15 15 02 F6 | 	mov	arg02, local07
19488     10 2A B0 FD | 	call	#__system___string_concat
1948c     57 00 00 FF 
19490     00 E4 05 F1 | 	add	objptr, ##44544
19494     F2 FA 61 FC | 	wrlong	result1, objptr
19498     24 00 00 FF 
1949c     98 E4 05 F1 | 	add	objptr, ##18584
194a0     F2 12 02 FB | 	rdlong	arg01, objptr
194a4     7B 00 00 FF 
194a8     98 E4 85 F1 | 	sub	objptr, ##63128
194ac     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
194b0                 | LR__1944
194b0                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
194b0     7B 00 00 FF 
194b4     98 E4 05 F1 | 	add	objptr, ##63128
194b8     F2 20 02 FB | 	rdlong	local02, objptr
194bc     7B 00 00 FF 
194c0     98 E4 85 F1 | 	sub	objptr, ##63128
194c4     01 20 56 F2 | 	cmps	local02, #1 wc
194c8     D0 00 90 CD |  if_b	jmp	#LR__1945
194cc     7B 00 00 FF 
194d0     98 E4 05 F1 | 	add	objptr, ##63128
194d4     F2 24 02 FB | 	rdlong	local04, objptr
194d8     7B 00 00 FF 
194dc     98 E4 85 F1 | 	sub	objptr, ##63128
194e0     12 23 02 F6 | 	mov	local03, local04
194e4     7F 22 56 F2 | 	cmps	local03, #127 wc
194e8     B0 00 90 3D |  if_ae	jmp	#LR__1945
194ec     38 E4 05 F1 | 	add	objptr, #56
194f0     F2 1E E2 FA | 	rdword	local01, objptr
194f4     38 E4 85 F1 | 	sub	objptr, #56
194f8     0F 27 32 F9 | 	getword	local05, local01, #0
194fc     FE 26 0E F2 | 	cmp	local05, #254 wz
19500     79 00 00 AF 
19504     C4 E5 05 A1 |  if_e	add	objptr, ##62404
19508     F2 2C 02 AB |  if_e	rdlong	local08, objptr
1950c     79 00 00 AF 
19510     C4 E5 85 A1 |  if_e	sub	objptr, ##62404
19514     16 2F 02 A6 |  if_e	mov	local09, local08
19518     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1951c     7C 00 90 5D |  if_ne	jmp	#LR__1945
19520     04 00 00 FF 
19524     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
19528     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1952c     04 00 00 FF 
19530     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19534     56 00 00 FF 
19538     44 22 06 F6 | 	mov	local03, ##44100
1953c     0C 24 C6 F9 | 	decod	local04, #12
19540     00 26 06 F6 | 	mov	local05, #0
19544     03 00 00 FF 
19548     DE 1E 06 F6 | 	mov	local01, ##1758
1954c     07 12 06 F6 | 	mov	arg01, #7
19550     56 00 00 FF 
19554     44 16 06 F6 | 	mov	arg03, ##44100
19558     0C 18 C6 F9 | 	decod	arg04, #12
1955c     00 1A 06 F6 | 	mov	arg05, #0
19560     03 00 00 FF 
19564     DE 1C 06 F6 | 	mov	arg06, ##1758
19568     0B 00 00 FF 
1956c     C0 E4 05 F1 | 	add	objptr, ##5824
19570     7C 24 B0 FD | 	call	#_audio096_spin2_play
19574     0B 00 00 FF 
19578     C0 E4 85 F1 | 	sub	objptr, ##5824
1957c     2C 13 06 F6 | 	mov	arg01, #300
19580     B0 2B B0 FD | 	call	#__system___waitms
19584     07 12 06 F6 | 	mov	arg01, #7
19588     0B 00 00 FF 
1958c     C0 E4 05 F1 | 	add	objptr, ##5824
19590     AC 25 B0 FD | 	call	#_audio096_spin2_stop
19594     0B 00 00 FF 
19598     C0 E4 85 F1 | 	sub	objptr, ##5824
1959c                 | LR__1945
1959c                 | '  
1959c                 | '   'tab
1959c                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1959c     7B 00 00 FF 
195a0     90 E4 05 F1 | 	add	objptr, ##63120
195a4     F2 20 02 FB | 	rdlong	local02, objptr
195a8     7B 00 00 FF 
195ac     90 E4 85 F1 | 	sub	objptr, ##63120
195b0     10 21 E2 F8 | 	getbyte	local02, local02, #0
195b4     2B 20 0E F2 | 	cmp	local02, #43 wz
195b8     B4 00 90 5D |  if_ne	jmp	#LR__1946
195bc     38 E4 05 F1 | 	add	objptr, #56
195c0     F2 24 E2 FA | 	rdword	local04, objptr
195c4     38 E4 85 F1 | 	sub	objptr, #56
195c8     12 23 32 F9 | 	getword	local03, local04, #0
195cc     F0 22 16 F2 | 	cmp	local03, #240 wc
195d0     9C 00 90 CD |  if_b	jmp	#LR__1946
195d4     79 00 00 FF 
195d8     C4 E5 05 F1 | 	add	objptr, ##62404
195dc     F2 1E 02 FB | 	rdlong	local01, objptr
195e0     79 00 00 FF 
195e4     C4 E5 85 F1 | 	sub	objptr, ##62404
195e8     0F 27 02 F6 | 	mov	local05, local01
195ec     01 26 0E F2 | 	cmp	local05, #1 wz
195f0     7C 00 90 5D |  if_ne	jmp	#LR__1946
195f4     04 00 00 FF 
195f8     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
195fc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
19600     04 00 00 FF 
19604     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
19608     56 00 00 FF 
1960c     44 22 06 F6 | 	mov	local03, ##44100
19610     0E 24 C6 F9 | 	decod	local04, #14
19614     00 26 06 F6 | 	mov	local05, #0
19618     03 00 00 FF 
1961c     DE 1E 06 F6 | 	mov	local01, ##1758
19620     00 12 06 F6 | 	mov	arg01, #0
19624     56 00 00 FF 
19628     44 16 06 F6 | 	mov	arg03, ##44100
1962c     0E 18 C6 F9 | 	decod	arg04, #14
19630     00 1A 06 F6 | 	mov	arg05, #0
19634     03 00 00 FF 
19638     DE 1C 06 F6 | 	mov	arg06, ##1758
1963c     0B 00 00 FF 
19640     C0 E4 05 F1 | 	add	objptr, ##5824
19644     A8 23 B0 FD | 	call	#_audio096_spin2_play
19648     0B 00 00 FF 
1964c     C0 E4 85 F1 | 	sub	objptr, ##5824
19650     2C 13 06 F6 | 	mov	arg01, #300
19654     DC 2A B0 FD | 	call	#__system___waitms
19658     00 12 06 F6 | 	mov	arg01, #0
1965c     0B 00 00 FF 
19660     C0 E4 05 F1 | 	add	objptr, ##5824
19664     D8 24 B0 FD | 	call	#_audio096_spin2_stop
19668     0B 00 00 FF 
1966c     C0 E4 85 F1 | 	sub	objptr, ##5824
19670                 | LR__1946
19670                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
19670     7B 00 00 FF 
19674     90 E4 05 F1 | 	add	objptr, ##63120
19678     F2 20 02 FB | 	rdlong	local02, objptr
1967c     7B 00 00 FF 
19680     90 E4 85 F1 | 	sub	objptr, ##63120
19684     10 21 E2 F8 | 	getbyte	local02, local02, #0
19688     2B 20 0E F2 | 	cmp	local02, #43 wz
1968c     AC 00 90 5D |  if_ne	jmp	#LR__1949
19690     38 E4 05 F1 | 	add	objptr, #56
19694     F2 24 E2 FA | 	rdword	local04, objptr
19698     38 E4 85 F1 | 	sub	objptr, #56
1969c     12 23 32 F9 | 	getword	local03, local04, #0
196a0     F0 22 16 F2 | 	cmp	local03, #240 wc
196a4     94 00 90 3D |  if_ae	jmp	#LR__1949
196a8     38 E4 05 F1 | 	add	objptr, #56
196ac     F2 20 E2 FA | 	rdword	local02, objptr
196b0     10 23 52 F6 | 	abs	local03, local02 wc
196b4     11 23 42 F8 | 	getnib	local03, local03, #0
196b8     11 23 82 F6 | 	negc	local03, local03
196bc     11 25 52 F6 | 	abs	local04, local03 wc
196c0     01 24 46 F0 | 	shr	local04, #1
196c4     12 25 82 F6 | 	negc	local04, local04
196c8     7B 00 00 FF 
196cc     64 E4 05 F1 | 	add	objptr, ##63076
196d0     F2 24 62 FC | 	wrlong	local04, objptr
196d4     12 31 02 F6 | 	mov	local10, local04
196d8     7B 00 00 FF 
196dc     9C E4 85 F1 | 	sub	objptr, ##63132
196e0                 | LR__1947
196e0     08 30 56 F2 | 	cmps	local10, #8 wc
196e4     54 00 90 3D |  if_ae	jmp	#LR__1948
196e8     57 00 00 FF 
196ec     00 E4 05 F1 | 	add	objptr, ##44544
196f0     F2 12 02 FB | 	rdlong	arg01, objptr
196f4     57 00 00 FF 
196f8     00 E4 85 F1 | 	sub	objptr, ##44544
196fc     60 01 00 FF 
19700     6D 24 06 F6 | 	mov	local04, ##@LR__4978
19704     12 15 02 F6 | 	mov	arg02, local04
19708     90 27 B0 FD | 	call	#__system___string_concat
1970c     57 00 00 FF 
19710     00 E4 05 F1 | 	add	objptr, ##44544
19714     F2 FA 61 FC | 	wrlong	result1, objptr
19718     57 00 00 FF 
1971c     00 E4 85 F1 | 	sub	objptr, ##44544
19720     60 01 00 FF 
19724     6F 12 06 F6 | 	mov	arg01, ##@LR__4979
19728     74 16 B0 FD | 	call	#_hg010b_spin2_write
1972c     18 23 02 F6 | 	mov	local03, local10
19730     01 22 06 F1 | 	add	local03, #1
19734     11 31 02 F6 | 	mov	local10, local03
19738     A4 FF 9F FD | 	jmp	#LR__1947
1973c                 | LR__1948
1973c                 | LR__1949
1973c                 | '  
1973c                 | '   'backspace
1973c                 | '   if (key3 and 255) = 42 then 
1973c     7B 00 00 FF 
19740     90 E4 05 F1 | 	add	objptr, ##63120
19744     F2 20 02 FB | 	rdlong	local02, objptr
19748     7B 00 00 FF 
1974c     90 E4 85 F1 | 	sub	objptr, ##63120
19750     10 21 E2 F8 | 	getbyte	local02, local02, #0
19754     2A 20 0E F2 | 	cmp	local02, #42 wz
19758     D4 00 90 5D |  if_ne	jmp	#LR__1954
1975c                 | '       if v.cursor_x>4 then 
1975c     38 E4 05 F1 | 	add	objptr, #56
19760     F2 20 E2 FA | 	rdword	local02, objptr
19764     38 E4 85 F1 | 	sub	objptr, #56
19768     05 20 16 F2 | 	cmp	local02, #5 wc
1976c     9C 00 90 CD |  if_b	jmp	#LR__1952
19770     57 00 00 FF 
19774     00 E4 05 F1 | 	add	objptr, ##44544
19778     F2 26 02 FB | 	rdlong	local05, objptr
1977c     57 00 00 FF 
19780     00 E4 85 F1 | 	sub	objptr, ##44544
19784     13 13 02 F6 | 	mov	arg01, local05
19788     09 33 02 F6 | 	mov	local11, arg01
1978c     97 06 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
19790                 | LR__1950
19790     19 FB C9 FA | 	rdbyte	result1, local11 wz
19794     01 32 06 51 |  if_ne	add	local11, #1
19798     F4 FF 9F 5D |  if_ne	jmp	#LR__1950
1979c                 | LR__1951
1979c     09 33 82 F1 | 	sub	local11, arg01
197a0     19 15 02 F6 | 	mov	arg02, local11
197a4     01 14 86 F1 | 	sub	arg02, #1
197a8     13 13 02 F6 | 	mov	arg01, local05
197ac     D4 46 B0 FD | 	call	#__system__Left_S
197b0     57 00 00 FF 
197b4     00 E4 05 F1 | 	add	objptr, ##44544
197b8     F2 FA 61 FC | 	wrlong	result1, objptr
197bc     56 00 00 FF 
197c0     C8 E5 85 F1 | 	sub	objptr, ##44488
197c4     F2 12 E2 FA | 	rdword	arg01, objptr
197c8     02 12 86 F1 | 	sub	arg01, #2
197cc     02 E4 05 F1 | 	add	objptr, #2
197d0     F2 14 C2 FA | 	rdbyte	arg02, objptr
197d4     3A E4 85 F1 | 	sub	objptr, #58
197d8     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
197dc     20 12 06 F6 | 	mov	arg01, #32
197e0     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
197e4     38 E4 05 F1 | 	add	objptr, #56
197e8     F2 12 E2 FA | 	rdword	arg01, objptr
197ec     02 12 86 F1 | 	sub	arg01, #2
197f0     02 E4 05 F1 | 	add	objptr, #2
197f4     F2 24 C2 FA | 	rdbyte	local04, objptr
197f8     3A E4 85 F1 | 	sub	objptr, #58
197fc     12 23 E2 F8 | 	getbyte	local03, local04, #0
19800     11 15 02 F6 | 	mov	arg02, local03
19804     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
19808     24 00 90 FD | 	jmp	#LR__1953
1980c                 | LR__1952
1980c     60 01 00 FF 
19810     71 20 06 F6 | 	mov	local02, ##@LR__4980
19814     57 00 00 FF 
19818     00 E4 05 F1 | 	add	objptr, ##44544
1981c     F2 20 62 FC | 	wrlong	local02, objptr
19820     56 00 00 FF 
19824     C8 E5 85 F1 | 	sub	objptr, ##44488
19828     F2 08 58 FC | 	wrword	#4, objptr
1982c     38 E4 85 F1 | 	sub	objptr, #56
19830                 | LR__1953
19830                 | LR__1954
19830                 | '    
19830                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
19830                 | '  
19830                 | '   if key4=key_enter then 
19830     7B 00 00 FF 
19834     98 E4 05 F1 | 	add	objptr, ##63128
19838     F2 28 02 FB | 	rdlong	local06, objptr
1983c     7B 00 00 FF 
19840     98 E4 85 F1 | 	sub	objptr, ##63128
19844     8D 28 0E F2 | 	cmp	local06, #141 wz
19848     50 00 90 5D |  if_ne	jmp	#LR__1955
1984c     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
19850     C8 71 BE FD | 	call	#_interpret
19854     60 01 00 FF 
19858     72 20 06 F6 | 	mov	local02, ##@LR__4981
1985c     57 00 00 FF 
19860     00 E4 05 F1 | 	add	objptr, ##44544
19864     F2 20 62 FC | 	wrlong	local02, objptr
19868     1A FA 61 FD | 	getct	result1
1986c     24 00 00 FF 
19870     A0 E4 05 F1 | 	add	objptr, ##18592
19874     F2 24 02 FB | 	rdlong	local04, objptr
19878     12 23 02 F6 | 	mov	local03, local04
1987c     11 FB 81 F1 | 	sub	result1, local03
19880     F2 FA 61 FC | 	wrlong	result1, objptr
19884     14 E4 85 F1 | 	sub	objptr, #20
19888     F2 00 68 FC | 	wrlong	#0, objptr
1988c     08 E4 05 F1 | 	add	objptr, #8
19890     F2 00 68 FC | 	wrlong	#0, objptr
19894     7B 00 00 FF 
19898     94 E4 85 F1 | 	sub	objptr, ##63124
1989c                 | LR__1955
1989c     7B 00 00 FF 
198a0     90 E4 05 F1 | 	add	objptr, ##63120
198a4     F2 00 68 FC | 	wrlong	#0, objptr
198a8     7B 00 00 FF 
198ac     90 E4 85 F1 | 	sub	objptr, ##63120
198b0     80 F6 9F FD | 	jmp	#LR__1930
198b4     A7 F0 03 F6 | 	mov	ptra, fp
198b8     B2 00 A0 FD | 	call	#popregs_
198bc                 | _program_ret
198bc     2D 00 64 FD | 	ret
198c0                 | 
198c0                 | ' '' this is not a main program.
198c0                 | ' 
198c0                 | ' '****************************************************************************************************************
198c0                 | ' '                                                                                                             	*
198c0                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
198c0                 | ' '                                                                                                            	*
198c0                 | ' ' mode - mode #, see below											*
198c0                 | ' ' base - HDMI base pin												*
198c0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
198c0                 | ' '														*
198c0                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
198c0                 | ' '' set bit #15 for custom timings														*
198c0                 | ' '' p - 1 - psram, 0 - hub											*
198c0                 | ' '' t - 1 - graphics, 0 - text											*
198c0                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
198c0                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
198c0                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
198c0                 | ' '														*
198c0                 | ' '****************************************************************************************************************
198c0                 | ' 
198c0                 | ' pub start(base,mb):result |i
198c0                 | _hg010b_spin2_start
198c0                 | ' 
198c0                 | ' '--------------------------- initialize pointers and variables
198c0                 | ' 
198c0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
198c0     30 E4 05 F1 | 	add	objptr, #48
198c4     F2 FA 01 F6 | 	mov	result1, objptr
198c8     28 E4 85 F1 | 	sub	objptr, #40
198cc     F2 FA 61 FC | 	wrlong	result1, objptr
198d0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
198d0                 | ' hdmibase:=base							' HDMI base pin, 8*n
198d0     18 E4 05 F1 | 	add	objptr, #24
198d4     F2 12 62 FC | 	wrlong	arg01, objptr
198d8                 | ' mailbox_ptr:=mb		
198d8     04 E4 05 F1 | 	add	objptr, #4
198dc     F2 14 62 FC | 	wrlong	arg02, objptr
198e0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
198e0     C1 E5 05 F1 | 	add	objptr, #449
198e4     F2 14 62 FC | 	wrlong	arg02, objptr
198e8                 | ' sprite_ptr:=@spr1ptr
198e8     D8 E4 85 F1 | 	sub	objptr, #216
198ec     F2 FA 01 F6 | 	mov	result1, objptr
198f0     E5 E4 85 F1 | 	sub	objptr, #229
198f4     F2 FA 61 FC | 	wrlong	result1, objptr
198f8                 | ' 
198f8                 | ' 		'
198f8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
198f8     E5 E4 05 F1 | 	add	objptr, #229
198fc     F2 FA 01 FB | 	rdlong	result1, objptr
19900     D0 FA 05 F1 | 	add	result1, #208
19904     FD 10 58 FC | 	wrword	#8, result1
19908                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
19908     F2 16 02 FB | 	rdlong	arg03, objptr
1990c     D2 16 06 F1 | 	add	arg03, #210
19910     0B 21 58 FC | 	wrword	#16, arg03
19914                 | ' leading_spaces:=0				'
19914     A5 E5 05 F1 | 	add	objptr, #421
19918     F2 00 68 FC | 	wrlong	#0, objptr
1991c                 | ' 
1991c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1991c     99 E4 85 F1 | 	sub	objptr, #153
19920     00 00 A0 FF 
19924     F2 0E 68 FC | 	wrlong	##1073741831, objptr
19928                 | ' emptydl[1]:=0
19928     04 E4 05 F1 | 	add	objptr, #4
1992c     F2 00 68 FC | 	wrlong	#0, objptr
19930                 | ' 
19930                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
19930                 | ' 
19930                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
19930     28 E5 85 F1 | 	sub	objptr, #296
19934     F2 02 68 FC | 	wrlong	#1, objptr
19938                 | ' if s_debug<>0
19938                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
19938     20 00 80 FF 
1993c     F2 00 68 FC | 	wrlong	##16384, objptr
19940     F5 E4 85 F1 | 	sub	objptr, #245
19944                 | ' setmode()							' set the mode, see below
19944     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
19948                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
19948     45 E4 05 F1 | 	add	objptr, #69
1994c     F2 FA 01 F6 | 	mov	result1, objptr
19950     35 E4 85 F1 | 	sub	objptr, #53
19954     F2 FA 61 FC | 	wrlong	result1, objptr
19958                 | ' cursor_ptr:=@cursor_x						
19958     28 E4 05 F1 | 	add	objptr, #40
1995c     F2 16 02 F6 | 	mov	arg03, objptr
19960     2C E4 85 F1 | 	sub	objptr, #44
19964     F2 16 62 FC | 	wrlong	arg03, objptr
19968                 | ' fontnum:=0  							' start with a PC type font 
19968     55 E4 05 F1 | 	add	objptr, #85
1996c     F2 00 68 FC | 	wrlong	#0, objptr
19970                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
19970     1C E4 05 F1 | 	add	objptr, #28
19974     F2 12 02 F6 | 	mov	arg01, objptr
19978     7D E4 85 F1 | 	sub	objptr, #125
1997c     10 00 00 FF 
19980     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
19984     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
19988     10 00 00 FF 
1998c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
19990     10 16 06 F6 | 	mov	arg03, #16
19994     C8 23 B0 FD | 	call	#__system____builtin_memmove
19998                 | ' leading_spaces:=0
19998     01 00 00 FF 
1999c     B2 E4 05 F1 | 	add	objptr, ##690
199a0     F2 00 68 FC | 	wrlong	#0, objptr
199a4     01 00 00 FF 
199a8     B2 E4 85 F1 | 	sub	objptr, ##690
199ac                 | ' '---------------------------- initialize a cursor (MSDOS type)
199ac                 | ' 
199ac                 | ' initcursor(154)
199ac     9A 12 06 F6 | 	mov	arg01, #154
199b0     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
199b4                 | ' 
199b4                 | ' '---------------------------- start the cog
199b4                 | ' 
199b4                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
199b4     10 00 00 FF 
199b8     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
199bc     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
199c0     10 00 00 FF 
199c4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
199c8     10 E4 05 F1 | 	add	objptr, #16
199cc     10 FA 05 F6 | 	mov	result1, #16
199d0     28 E4 61 FD | 	setq	objptr
199d4     0A FB F1 FC | 	coginit	result1, arg02 wc
199d8     01 FA 65 C6 |  if_b	neg	result1, #1
199dc     1C E4 05 F1 | 	add	objptr, #28
199e0     F2 FA 61 FC | 	wrlong	result1, objptr
199e4     2C E4 85 F1 | 	sub	objptr, #44
199e8                 | ' waitms(40)							' wait for stabilize
199e8     28 12 06 F6 | 	mov	arg01, #40
199ec     44 27 B0 FD | 	call	#__system___waitms
199f0                 | ' return cog							' return the driver's cog #
199f0     2C E4 05 F1 | 	add	objptr, #44
199f4     F2 FA 01 FB | 	rdlong	result1, objptr
199f8     2C E4 85 F1 | 	sub	objptr, #44
199fc                 | _hg010b_spin2_start_ret
199fc     2D 00 64 FD | 	ret
19a00                 | 
19a00                 | ' 
19a00                 | ' 
19a00                 | ' '**************************************************************************************************************** 
19a00                 | ' '                                                                                                             	*
19a00                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
19a00                 | ' '  Mode number - see start() above or bits below								*
19a00                 | ' '                                                                                                             	*
19a00                 | ' '****************************************************************************************************************
19a00                 | ' 
19a00                 | ' '---------------------------- initialize a cursor (MSDOS type)
19a00                 | ' pub initcursor(color) |i
19a00                 | _hg010b_spin2_initcursor
19a00     03 4A 05 F6 | 	mov	COUNT_, #3
19a04     A8 00 A0 FD | 	call	#pushregs_
19a08     09 1F 02 F6 | 	mov	local01, arg01
19a0c                 | ' 
19a0c                 | ' cursor_x:=0							' place the cursor at 0:0
19a0c     38 E4 05 F1 | 	add	objptr, #56
19a10     F2 00 58 FC | 	wrword	#0, objptr
19a14                 | ' cursor_y:=0
19a14     02 E4 05 F1 | 	add	objptr, #2
19a18     F2 00 48 FC | 	wrbyte	#0, objptr
19a1c                 | ' repeat i from 0 to 111
19a1c     00 20 06 F6 | 	mov	local02, #0
19a20     F8 E5 05 F1 | 	add	objptr, #504
19a24     97 1A 48 FB | 	callpa	#(@LR__1962-@LR__1960)>>2,fcache_load_ptr_
19a28                 | LR__1960
19a28                 | '   cursor[i]:=0
19a28     10 23 02 F6 | 	mov	local03, local02
19a2c     F2 22 02 F1 | 	add	local03, objptr
19a30     11 01 48 FC | 	wrbyte	#0, local03
19a34     01 20 06 F1 | 	add	local02, #1
19a38     70 20 56 F2 | 	cmps	local02, #112 wc
19a3c     E8 FF 9F CD |  if_b	jmp	#LR__1960
19a40                 | ' repeat i from 112 to 127
19a40     70 20 06 F6 | 	mov	local02, #112
19a44                 | LR__1961
19a44                 | '   cursor[i]:=color  
19a44     10 23 02 F6 | 	mov	local03, local02
19a48     F2 22 02 F1 | 	add	local03, objptr
19a4c     11 1F 42 FC | 	wrbyte	local01, local03
19a50     01 20 06 F1 | 	add	local02, #1
19a54     80 20 16 F2 | 	cmp	local02, #128 wc
19a58     E8 FF 9F CD |  if_b	jmp	#LR__1961
19a5c                 | LR__1962
19a5c                 | ' 'repeat i from 0 to 127
19a5c                 | ' '  if ((i/8)//2)
19a5c                 | ' '    cursor[i]:=15
19a5c                 | ' '  else
19a5c                 | ' '    cursor[i]:=0
19a5c                 | ' '  if i>=120    
19a5c                 | ' '    cursor[i]:=40
19a5c                 | ' setspriteptr(17,@cursor)
19a5c     F2 14 02 F6 | 	mov	arg02, objptr
19a60     01 00 00 FF 
19a64     32 E4 85 F1 | 	sub	objptr, ##562
19a68     11 12 06 F6 | 	mov	arg01, #17
19a6c     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
19a70                 | ' setspritesize(17,8,16)
19a70     11 12 06 F6 | 	mov	arg01, #17
19a74     08 14 06 F6 | 	mov	arg02, #8
19a78     10 16 06 F6 | 	mov	arg03, #16
19a7c     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
19a80                 | ' setspritepos(17,0,0)
19a80     11 12 06 F6 | 	mov	arg01, #17
19a84     00 14 06 F6 | 	mov	arg02, #0
19a88     00 16 06 F6 | 	mov	arg03, #0
19a8c     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
19a90     A7 F0 03 F6 | 	mov	ptra, fp
19a94     B2 00 A0 FD | 	call	#popregs_
19a98                 | _hg010b_spin2_initcursor_ret
19a98     2D 00 64 FD | 	ret
19a9c                 | 
19a9c                 | ' 
19a9c                 | '  
19a9c                 | ' pub setcursorcolor(color) |i
19a9c                 | _hg010b_spin2_setcursorcolor
19a9c                 | ' 
19a9c                 | ' 
19a9c                 | ' repeat i from 0 to 111
19a9c     00 00 06 F6 | 	mov	_var01, #0
19aa0     01 00 00 FF 
19aa4     32 E4 05 F1 | 	add	objptr, ##562
19aa8     97 1A 48 FB | 	callpa	#(@LR__1972-@LR__1970)>>2,fcache_load_ptr_
19aac                 | LR__1970
19aac                 | '   cursor[i]:=0
19aac     00 03 02 F6 | 	mov	_var02, _var01
19ab0     F2 02 02 F1 | 	add	_var02, objptr
19ab4     01 01 48 FC | 	wrbyte	#0, _var02
19ab8     01 00 06 F1 | 	add	_var01, #1
19abc     70 00 56 F2 | 	cmps	_var01, #112 wc
19ac0     E8 FF 9F CD |  if_b	jmp	#LR__1970
19ac4                 | ' repeat i from 112 to 127
19ac4     70 00 06 F6 | 	mov	_var01, #112
19ac8                 | LR__1971
19ac8                 | '   cursor[i]:=color  
19ac8     00 03 02 F6 | 	mov	_var02, _var01
19acc     F2 02 02 F1 | 	add	_var02, objptr
19ad0     01 13 42 FC | 	wrbyte	arg01, _var02
19ad4     01 00 06 F1 | 	add	_var01, #1
19ad8     80 00 16 F2 | 	cmp	_var01, #128 wc
19adc     E8 FF 9F CD |  if_b	jmp	#LR__1971
19ae0                 | LR__1972
19ae0     01 00 00 FF 
19ae4     32 E4 85 F1 | 	sub	objptr, ##562
19ae8                 | _hg010b_spin2_setcursorcolor_ret
19ae8     2D 00 64 FD | 	ret
19aec                 | 
19aec                 | '  
19aec                 | ' 
19aec                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
19aec                 | _hg010b_spin2_setmode
19aec     02 4A 05 F6 | 	mov	COUNT_, #2
19af0     A8 00 A0 FD | 	call	#pushregs_
19af4                 | ' 
19af4                 | ' 
19af4                 | ' dl_ptr:=@emptydl[0]
19af4     01 00 00 FF 
19af8     19 E4 05 F1 | 	add	objptr, ##537
19afc     F2 66 02 F6 | 	mov	muldivb_, objptr
19b00     FD E5 85 F1 | 	sub	objptr, #509
19b04     F2 66 62 FC | 	wrlong	muldivb_, objptr
19b08                 | ' 
19b08                 | ' if cog>0 
19b08     10 E4 05 F1 | 	add	objptr, #16
19b0c     F2 66 02 FB | 	rdlong	muldivb_, objptr
19b10     2C E4 85 F1 | 	sub	objptr, #44
19b14     01 66 56 F2 | 	cmps	muldivb_, #1 wc
19b18                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
19b18     01 12 06 36 |  if_ae	mov	arg01, #1
19b1c     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
19b20                 | ' xres:=1024
19b20     01 00 00 FF 
19b24     22 E4 05 F1 | 	add	objptr, ##546
19b28     02 00 80 FF 
19b2c     F2 00 68 FC | 	wrlong	##1024, objptr
19b30                 | ' yres:=576  
19b30     04 E4 05 F1 | 	add	objptr, #4
19b34     01 00 80 FF 
19b38     F2 80 68 FC | 	wrlong	##576, objptr
19b3c                 | ' ppl:=(timings[3])
19b3c     10 00 00 FF 
19b40     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
19b44     F7 66 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
19b48     51 E5 85 F1 | 	sub	objptr, #337
19b4c     F2 66 62 FC | 	wrlong	muldivb_, objptr
19b50                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
19b50     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
19b54     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
19b58     01 1E 66 F0 | 	shl	local01, #1
19b5c     80 E4 85 F1 | 	sub	objptr, #128
19b60     F2 1E 62 FC | 	wrlong	local01, objptr
19b64                 | ' cpl1:=cpl '' todo remove
19b64     04 E4 05 F1 | 	add	objptr, #4
19b68     F2 1E 62 FC | 	wrlong	local01, objptr
19b6c                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
19b6c     02 00 00 FF 
19b70     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
19b74     41 E4 85 F1 | 	sub	objptr, #65
19b78     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
19b7c                 | ' repeat i from 0 to 3
19b7c     00 20 06 F6 | 	mov	local02, #0
19b80     02 00 00 FF 
19b84     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
19b88     08 E4 05 F1 | 	add	objptr, #8
19b8c     97 20 48 FB | 	callpa	#(@LR__1981-@LR__1980)>>2,fcache_load_ptr_
19b90                 | LR__1980
19b90                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
19b90     10 1F 02 F6 | 	mov	local01, local02
19b94     02 1E 66 F0 | 	shl	local01, #2
19b98     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
19b9c     F2 66 02 FB | 	rdlong	muldivb_, objptr
19ba0     11 66 66 F0 | 	shl	muldivb_, #17
19ba4     0F 1F 02 FB | 	rdlong	local01, local01
19ba8     33 1F 02 F1 | 	add	local01, muldivb_
19bac     80 40 38 FF 
19bb0     00 1E 06 F1 | 	add	local01, ##1887502336
19bb4     10 67 02 F6 | 	mov	muldivb_, local02
19bb8     02 66 66 F0 | 	shl	muldivb_, #2
19bbc     F7 66 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
19bc0     33 1F 62 FC | 	wrlong	local01, muldivb_
19bc4     01 20 06 F1 | 	add	local02, #1
19bc8     04 20 56 F2 | 	cmps	local02, #4 wc
19bcc     C0 FF 9F CD |  if_b	jmp	#LR__1980
19bd0                 | LR__1981
19bd0     20 E4 85 F1 | 	sub	objptr, #32
19bd4                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
19bd4     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
19bd8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
19bdc     14 1E 66 FC | 	wrlong	local01, #20
19be0                 | ' hubset(timings[10])
19be0     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
19be4     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
19be8     10 00 00 FF 
19bec     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
19bf0     00 12 62 FD | 	hubset	arg01
19bf4                 | ' waitms(1)                                                   	' wait for stabilization
19bf4     01 12 06 F6 | 	mov	arg01, #1
19bf8     38 25 B0 FD | 	call	#__system___waitms
19bfc     10 00 00 FF 
19c00     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
19c04     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
19c08     5D E4 05 F1 | 	add	objptr, #93
19c0c     F2 20 62 FC | 	wrlong	local02, objptr
19c10     10 1F 52 F6 | 	abs	local01, local02 wc
19c14     04 1E 46 F0 | 	shr	local01, #4
19c18     0F 1F 82 F6 | 	negc	local01, local01
19c1c     9C E4 05 F1 | 	add	objptr, #156
19c20     F2 1E 62 FC | 	wrlong	local01, objptr
19c24     A4 E4 85 F1 | 	sub	objptr, #164
19c28     F2 20 02 FB | 	rdlong	local02, objptr
19c2c     08 E4 05 F1 | 	add	objptr, #8
19c30     F2 1E 02 FB | 	rdlong	local01, objptr
19c34     0F 21 02 FD | 	qmul	local02, local01
19c38                 | ' lines:=timings[11]
19c38                 | ' t_lines:=lines/16
19c38                 | ' buflen:=cpl*lines						' framebuffer length in longs
19c38     29 E4 85 F1 | 	sub	objptr, #41
19c3c                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
19c3c     19 1E C6 F9 | 	decod	local01, #25
19c40                 | ' mode_ptr:=@timings						' set pointers to timings
19c40     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
19c44                 | ' graphmode:=1024+512+192+48							' det global variable
19c44                 | ' makedl(graphmode)							' make a DL for the mode
19c44     03 00 00 FF 
19c48     F0 12 06 F6 | 	mov	arg01, ##1776
19c4c     18 20 62 FD | 	getqx	local02
19c50     F2 20 62 FC | 	wrlong	local02, objptr
19c54     34 E4 85 F1 | 	sub	objptr, #52
19c58     02 20 66 F0 | 	shl	local02, #2
19c5c     10 1F 82 F1 | 	sub	local01, local02
19c60     F2 1E 62 FC | 	wrlong	local01, objptr
19c64     14 E4 05 F1 | 	add	objptr, #20
19c68     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
19c6c     79 E4 05 F1 | 	add	objptr, #121
19c70     03 00 80 FF 
19c74     F2 E0 69 FC | 	wrlong	##1776, objptr
19c78     8D E4 85 F1 | 	sub	objptr, #141
19c7c     10 00 00 FF 
19c80     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
19c84     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
19c88                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
19c88     F2 1E 02 FB | 	rdlong	local01, objptr
19c8c     D9 E4 05 F1 | 	add	objptr, #217
19c90     F2 1E 62 FC | 	wrlong	local01, objptr
19c94                 | ' s_font_ptr:=font_ptr
19c94     D5 E4 85 F1 | 	sub	objptr, #213
19c98     F2 1E 02 FB | 	rdlong	local01, objptr
19c9c     D9 E4 05 F1 | 	add	objptr, #217
19ca0     F2 1E 62 FC | 	wrlong	local01, objptr
19ca4                 | ' s_lines:=lines
19ca4     80 E4 85 F1 | 	sub	objptr, #128
19ca8     F2 1E 02 FB | 	rdlong	local01, objptr
19cac     84 E4 05 F1 | 	add	objptr, #132
19cb0     F2 1E 62 FC | 	wrlong	local01, objptr
19cb4                 | ' s_buflen:=buflen
19cb4     AD E4 85 F1 | 	sub	objptr, #173
19cb8     F2 1E 02 FB | 	rdlong	local01, objptr
19cbc     B5 E4 05 F1 | 	add	objptr, #181
19cc0     F2 1E 62 FC | 	wrlong	local01, objptr
19cc4                 | ' s_cpl:=cpl
19cc4     94 E4 85 F1 | 	sub	objptr, #148
19cc8     F2 1E 02 FB | 	rdlong	local01, objptr
19ccc     90 E4 05 F1 | 	add	objptr, #144
19cd0     F2 1E 62 FC | 	wrlong	local01, objptr
19cd4                 | ' s_cpl1:=cpl
19cd4     90 E4 85 F1 | 	sub	objptr, #144
19cd8     F2 1E 02 FB | 	rdlong	local01, objptr
19cdc     98 E4 05 F1 | 	add	objptr, #152
19ce0     F2 1E 62 FC | 	wrlong	local01, objptr
19ce4                 | ' st_lines:=t_lines
19ce4     0C E4 05 F1 | 	add	objptr, #12
19ce8     F2 1E 02 FB | 	rdlong	local01, objptr
19cec     04 E4 05 F1 | 	add	objptr, #4
19cf0     F2 1E 62 FC | 	wrlong	local01, objptr
19cf4                 | ' ppl:=ppl/xzoom  
19cf4     28 E4 85 F1 | 	sub	objptr, #40
19cf8     F2 64 02 FB | 	rdlong	muldiva_, objptr
19cfc     2C E4 05 F1 | 	add	objptr, #44
19d00     F2 66 02 FB | 	rdlong	muldivb_, objptr
19d04     01 E5 85 F1 | 	sub	objptr, #257
19d08     BA 00 A0 FD | 	call	#divide_
19d0c     D5 E4 05 F1 | 	add	objptr, #213
19d10     F2 66 62 FC | 	wrlong	muldivb_, objptr
19d14                 | ' s_ppl:=ppl
19d14     1C E4 05 F1 | 	add	objptr, #28
19d18     F2 66 62 FC | 	wrlong	muldivb_, objptr
19d1c     F1 E4 85 F1 | 	sub	objptr, #241
19d20                 | ' waitms(20)							' wait 
19d20     14 12 06 F6 | 	mov	arg01, #20
19d24     0C 24 B0 FD | 	call	#__system___waitms
19d28     A7 F0 03 F6 | 	mov	ptra, fp
19d2c     B2 00 A0 FD | 	call	#popregs_
19d30                 | _hg010b_spin2_setmode_ret
19d30     2D 00 64 FD | 	ret
19d34                 | 
19d34                 | ' 
19d34                 | ' 
19d34                 | ' '****************************************************************************************************************
19d34                 | ' '                                                                                                             	*
19d34                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
19d34                 | ' '                                                                                                             	*
19d34                 | ' '****************************************************************************************************************
19d34                 | ' 
19d34                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
19d34                 | _hg010b_spin2_makedl
19d34                 | ' 
19d34                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
19d34                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
19d34                 | ' repeat i from 0 to 11                                                           ' clear DL
19d34     00 00 06 F6 | 	mov	_var01, #0
19d38     E9 E5 05 F1 | 	add	objptr, #489
19d3c     97 0E 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
19d40                 | LR__1990
19d40                 | '   displaylist[i]:=0 
19d40     00 03 02 F6 | 	mov	_var02, _var01
19d44     02 02 66 F0 | 	shl	_var02, #2
19d48     F2 02 02 F1 | 	add	_var02, objptr
19d4c     01 01 68 FC | 	wrlong	#0, _var02
19d50     01 00 06 F1 | 	add	_var01, #1
19d54     0C 00 56 F2 | 	cmps	_var01, #12 wc
19d58     E4 FF 9F CD |  if_b	jmp	#LR__1990
19d5c                 | LR__1991
19d5c                 | '                         ' 
19d5c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
19d5c     8C E5 85 F1 | 	sub	objptr, #396
19d60     F2 02 02 FB | 	rdlong	_var02, objptr
19d64     14 02 66 F0 | 	shl	_var02, #20
19d68     01 02 06 F1 | 	add	_var02, #1
19d6c     04 E4 85 F1 | 	sub	objptr, #4
19d70     F2 00 02 FB | 	rdlong	_var01, objptr
19d74     02 00 66 F0 | 	shl	_var01, #2
19d78     04 00 66 F0 | 	shl	_var01, #4
19d7c     00 03 02 F1 | 	add	_var02, _var01
19d80     90 E5 05 F1 | 	add	objptr, #400
19d84     F2 02 62 FC | 	wrlong	_var02, objptr
19d88     E9 E5 85 F1 | 	sub	objptr, #489
19d8c                 | ' displaylist[1]:=buf_ptr<<4+%10  
19d8c     F2 02 02 FB | 	rdlong	_var02, objptr
19d90     04 02 66 F0 | 	shl	_var02, #4
19d94     02 02 06 F1 | 	add	_var02, #2
19d98     ED E5 05 F1 | 	add	objptr, #493
19d9c     F2 02 62 FC | 	wrlong	_var02, objptr
19da0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
19da0     04 E4 85 F1 | 	sub	objptr, #4
19da4     F2 02 02 F6 | 	mov	_var02, objptr
19da8     CD E5 85 F1 | 	sub	objptr, #461
19dac     F2 02 62 FC | 	wrlong	_var02, objptr
19db0     1C E4 85 F1 | 	sub	objptr, #28
19db4                 | _hg010b_spin2_makedl_ret
19db4     2D 00 64 FD | 	ret
19db8                 | 
19db8                 | ' 
19db8                 | ' 
19db8                 | ' '****************************************************************************************************************
19db8                 | ' '                                                                        					*
19db8                 | ' '  Graphic primitives                                                    					*
19db8                 | ' '                                                                        					*
19db8                 | ' '****************************************************************************************************************
19db8                 | ' 
19db8                 | ' pub setspriteptr(num,ptr)
19db8                 | _hg010b_spin2_setspriteptr
19db8                 | ' long[@spr1ptr+12*num]:=ptr
19db8     0D E5 05 F1 | 	add	objptr, #269
19dbc     F2 00 02 F6 | 	mov	_var01, objptr
19dc0     09 03 02 F6 | 	mov	_var02, arg01
19dc4     01 02 66 F0 | 	shl	_var02, #1
19dc8     09 03 02 F1 | 	add	_var02, arg01
19dcc     02 02 66 F0 | 	shl	_var02, #2
19dd0     01 01 02 F1 | 	add	_var01, _var02
19dd4     00 15 62 FC | 	wrlong	arg02, _var01
19dd8     0D E5 85 F1 | 	sub	objptr, #269
19ddc                 | _hg010b_spin2_setspriteptr_ret
19ddc     2D 00 64 FD | 	ret
19de0                 | 
19de0                 | ' 
19de0                 | ' pub setspritepos(num,x,y)
19de0                 | _hg010b_spin2_setspritepos
19de0                 | ' word[@spr1ptr+12*num+4]:=x
19de0     0D E5 05 F1 | 	add	objptr, #269
19de4     F2 00 02 F6 | 	mov	_var01, objptr
19de8     09 03 02 F6 | 	mov	_var02, arg01
19dec     01 02 66 F0 | 	shl	_var02, #1
19df0     09 03 02 F1 | 	add	_var02, arg01
19df4     02 02 66 F0 | 	shl	_var02, #2
19df8     01 01 02 F1 | 	add	_var01, _var02
19dfc     04 00 06 F1 | 	add	_var01, #4
19e00     00 15 52 FC | 	wrword	arg02, _var01
19e04                 | ' word[@spr1ptr+12*num+6]:=y
19e04     F2 00 02 F6 | 	mov	_var01, objptr
19e08     09 03 02 F6 | 	mov	_var02, arg01
19e0c     01 02 66 F0 | 	shl	_var02, #1
19e10     09 03 02 F1 | 	add	_var02, arg01
19e14     02 02 66 F0 | 	shl	_var02, #2
19e18     01 01 02 F1 | 	add	_var01, _var02
19e1c     06 00 06 F1 | 	add	_var01, #6
19e20     00 17 52 FC | 	wrword	arg03, _var01
19e24     0D E5 85 F1 | 	sub	objptr, #269
19e28                 | _hg010b_spin2_setspritepos_ret
19e28     2D 00 64 FD | 	ret
19e2c                 | 
19e2c                 | ' 
19e2c                 | ' pub setspritesize(num,w,h)
19e2c                 | _hg010b_spin2_setspritesize
19e2c                 | ' word[@spr1ptr+12*num+8]:=w
19e2c     0D E5 05 F1 | 	add	objptr, #269
19e30     F2 00 02 F6 | 	mov	_var01, objptr
19e34     09 03 02 F6 | 	mov	_var02, arg01
19e38     01 02 66 F0 | 	shl	_var02, #1
19e3c     09 03 02 F1 | 	add	_var02, arg01
19e40     02 02 66 F0 | 	shl	_var02, #2
19e44     01 01 02 F1 | 	add	_var01, _var02
19e48     08 00 06 F1 | 	add	_var01, #8
19e4c     00 15 52 FC | 	wrword	arg02, _var01
19e50                 | ' word[@spr1ptr+12*num+10]:=h
19e50     F2 00 02 F6 | 	mov	_var01, objptr
19e54     09 03 02 F6 | 	mov	_var02, arg01
19e58     01 02 66 F0 | 	shl	_var02, #1
19e5c     09 03 02 F1 | 	add	_var02, arg01
19e60     02 02 66 F0 | 	shl	_var02, #2
19e64     01 01 02 F1 | 	add	_var01, _var02
19e68     0A 00 06 F1 | 	add	_var01, #10
19e6c     00 17 52 FC | 	wrword	arg03, _var01
19e70     0D E5 85 F1 | 	sub	objptr, #269
19e74                 | _hg010b_spin2_setspritesize_ret
19e74     2D 00 64 FD | 	ret
19e78                 | 
19e78                 | ' 
19e78                 | ' 
19e78                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
19e78                 | ' 
19e78                 | ' 
19e78                 | ' pub putpixel(x,y,c)
19e78                 | _hg010b_spin2_putpixel
19e78     04 4A 05 F6 | 	mov	COUNT_, #4
19e7c     A8 00 A0 FD | 	call	#pushregs_
19e80     09 1F 02 F6 | 	mov	local01, arg01
19e84                 | ' 
19e84                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
19e84     00 20 06 F6 | 	mov	local02, #0
19e88     00 1E 56 F2 | 	cmps	local01, #0 wc
19e8c     01 20 66 36 |  if_ae	neg	local02, #1
19e90     E5 E4 05 F1 | 	add	objptr, #229
19e94     F2 1A 02 FB | 	rdlong	arg05, objptr
19e98     02 1A 66 F0 | 	shl	arg05, #2
19e9c     0D 1F 52 F2 | 	cmps	local01, arg05 wc
19ea0     11 23 A2 F1 | 	subx	local03, local03
19ea4     11 21 02 F5 | 	and	local02, local03
19ea8     00 22 06 F6 | 	mov	local03, #0
19eac     00 14 56 F2 | 	cmps	arg02, #0 wc
19eb0     01 22 66 36 |  if_ae	neg	local03, #1
19eb4     11 21 02 F5 | 	and	local02, local03
19eb8     04 E4 85 F1 | 	sub	objptr, #4
19ebc     F2 22 02 FB | 	rdlong	local03, objptr
19ec0     E1 E4 85 F1 | 	sub	objptr, #225
19ec4     11 15 52 F2 | 	cmps	arg02, local03 wc
19ec8     12 25 A2 F1 | 	subx	local04, local04
19ecc     12 21 CA F7 | 	test	local02, local04 wz
19ed0     48 00 90 AD |  if_e	jmp	#LR__2000
19ed4     D9 E4 05 F1 | 	add	objptr, #217
19ed8     F2 12 02 FB | 	rdlong	arg01, objptr
19edc     14 E4 05 F1 | 	add	objptr, #20
19ee0     F2 24 02 FB | 	rdlong	local04, objptr
19ee4     02 24 66 F0 | 	shl	local04, #2
19ee8     0A 25 02 FD | 	qmul	local04, arg02
19eec                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
19eec     0B 15 02 F6 | 	mov	arg02, arg03
19ef0     01 16 06 F6 | 	mov	arg03, #1
19ef4     00 18 06 F6 | 	mov	arg04, #0
19ef8     01 1A 06 F6 | 	mov	arg05, #1
19efc     0A 00 00 FF 
19f00     D3 E5 05 F1 | 	add	objptr, ##5587
19f04     18 24 62 FD | 	getqx	local04
19f08     0F 25 02 F1 | 	add	local04, local01
19f0c     12 13 02 F1 | 	add	arg01, local04
19f10     FC 14 B0 FD | 	call	#_psram_spin2_fill
19f14     0B 00 00 FF 
19f18     C0 E4 85 F1 | 	sub	objptr, ##5824
19f1c                 | LR__2000
19f1c     A7 F0 03 F6 | 	mov	ptra, fp
19f20     B2 00 A0 FD | 	call	#popregs_
19f24                 | _hg010b_spin2_putpixel_ret
19f24     2D 00 64 FD | 	ret
19f28                 | 
19f28                 | ' 
19f28                 | ' pub putpixel2(x,y,c)
19f28                 | _hg010b_spin2_putpixel2
19f28     02 4A 05 F6 | 	mov	COUNT_, #2
19f2c     A8 00 A0 FD | 	call	#pushregs_
19f30     D9 E4 05 F1 | 	add	objptr, #217
19f34     F2 1E 02 FB | 	rdlong	local01, objptr
19f38     14 E4 05 F1 | 	add	objptr, #20
19f3c     F2 1A 02 FB | 	rdlong	arg05, objptr
19f40     02 1A 66 F0 | 	shl	arg05, #2
19f44     0A 1B 02 FD | 	qmul	arg05, arg02
19f48                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
19f48     0B 15 02 F6 | 	mov	arg02, arg03
19f4c     01 16 06 F6 | 	mov	arg03, #1
19f50     00 18 06 F6 | 	mov	arg04, #0
19f54     01 1A 06 F6 | 	mov	arg05, #1
19f58     0A 00 00 FF 
19f5c     D3 E5 05 F1 | 	add	objptr, ##5587
19f60     18 20 62 FD | 	getqx	local02
19f64     09 21 02 F1 | 	add	local02, arg01
19f68     10 1F 02 F1 | 	add	local01, local02
19f6c     0F 13 02 F6 | 	mov	arg01, local01
19f70     9C 14 B0 FD | 	call	#_psram_spin2_fill
19f74     0B 00 00 FF 
19f78     C0 E4 85 F1 | 	sub	objptr, ##5824
19f7c     A7 F0 03 F6 | 	mov	ptra, fp
19f80     B2 00 A0 FD | 	call	#popregs_
19f84                 | _hg010b_spin2_putpixel2_ret
19f84     2D 00 64 FD | 	ret
19f88                 | 
19f88                 | ' 
19f88                 | ' pub getpixel2(x,y): c 
19f88                 | _hg010b_spin2_getpixel2
19f88     02 4A 05 F6 | 	mov	COUNT_, #2
19f8c     A8 00 A0 FD | 	call	#pushregs_
19f90     0C F0 07 F1 | 	add	ptra, #12
19f94     04 4E 05 F1 | 	add	fp, #4
19f98     A7 12 62 FC | 	wrlong	arg01, fp
19f9c     04 4E 05 F1 | 	add	fp, #4
19fa0     A7 14 62 FC | 	wrlong	arg02, fp
19fa4     08 4E 85 F1 | 	sub	fp, #8
19fa8     A7 00 68 FC | 	wrlong	#0, fp
19fac     A7 12 02 F6 | 	mov	arg01, fp
19fb0     D9 E4 05 F1 | 	add	objptr, #217
19fb4     F2 14 02 FB | 	rdlong	arg02, objptr
19fb8     14 E4 05 F1 | 	add	objptr, #20
19fbc     F2 16 02 FB | 	rdlong	arg03, objptr
19fc0     02 16 66 F0 | 	shl	arg03, #2
19fc4     08 4E 05 F1 | 	add	fp, #8
19fc8     A7 FA 01 FB | 	rdlong	result1, fp
19fcc     FD 16 02 FD | 	qmul	arg03, result1
19fd0                 | ' 
19fd0                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
19fd0     04 4E 85 F1 | 	sub	fp, #4
19fd4     A7 1E 02 FB | 	rdlong	local01, fp
19fd8     04 4E 85 F1 | 	sub	fp, #4
19fdc     01 16 06 F6 | 	mov	arg03, #1
19fe0     0A 00 00 FF 
19fe4     D3 E5 05 F1 | 	add	objptr, ##5587
19fe8     18 20 62 FD | 	getqx	local02
19fec     0F 21 02 F1 | 	add	local02, local01
19ff0     10 15 02 F1 | 	add	arg02, local02
19ff4     E0 12 B0 FD | 	call	#_psram_spin2_read1
19ff8     0B 00 00 FF 
19ffc     C0 E4 85 F1 | 	sub	objptr, ##5824
1a000                 | ' return c
1a000     A7 FA 01 FB | 	rdlong	result1, fp
1a004     A7 F0 03 F6 | 	mov	ptra, fp
1a008     B2 00 A0 FD | 	call	#popregs_
1a00c                 | _hg010b_spin2_getpixel2_ret
1a00c     2D 00 64 FD | 	ret
1a010                 | 
1a010                 | '   
1a010                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1a010                 | ' 
1a010                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1a010                 | _hg010b_spin2_fastline
1a010     02 4A 05 F6 | 	mov	COUNT_, #2
1a014     A8 00 A0 FD | 	call	#pushregs_
1a018     09 1F 02 F6 | 	mov	local01, arg01
1a01c     0A 21 02 F6 | 	mov	local02, arg02
1a020                 | ' 
1a020                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1a020     00 16 56 F2 | 	cmps	arg03, #0 wc
1a024     F4 00 90 CD |  if_b	jmp	#LR__2010
1a028     01 00 00 FF 
1a02c     26 E4 05 F1 | 	add	objptr, ##550
1a030     F2 1A 02 FB | 	rdlong	arg05, objptr
1a034     01 00 00 FF 
1a038     26 E4 85 F1 | 	sub	objptr, ##550
1a03c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1a040     D8 00 90 3D |  if_ae	jmp	#LR__2010
1a044     00 1E 56 F2 | 	cmps	local01, #0 wc
1a048     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1a04c     CC 00 90 CD |  if_b	jmp	#LR__2010
1a050     01 00 00 FF 
1a054     22 E4 05 F1 | 	add	objptr, ##546
1a058     F2 1A 02 FB | 	rdlong	arg05, objptr
1a05c     01 00 00 FF 
1a060     22 E4 85 F1 | 	sub	objptr, ##546
1a064     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1a068     01 00 00 1F 
1a06c     22 E4 05 11 |  if_a	add	objptr, ##546
1a070     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1a074     01 00 00 1F 
1a078     22 E4 85 11 |  if_a	sub	objptr, ##546
1a07c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1a080                 | '   return
1a080     98 00 90 1D |  if_a	jmp	#LR__2010
1a084     10 1F 5A F2 | 	cmps	local01, local02 wcz
1a088     0F 1B 02 16 |  if_a	mov	arg05, local01
1a08c     10 1F 02 16 |  if_a	mov	local01, local02
1a090     0D 21 02 16 |  if_a	mov	local02, arg05
1a094     00 1E 56 F2 | 	cmps	local01, #0 wc
1a098     00 1E 06 C6 |  if_b	mov	local01, #0
1a09c     01 00 00 FF 
1a0a0     22 E4 05 F1 | 	add	objptr, ##546
1a0a4     F2 1A 02 FB | 	rdlong	arg05, objptr
1a0a8     01 00 00 FF 
1a0ac     22 E4 85 F1 | 	sub	objptr, ##546
1a0b0     0D 21 52 F2 | 	cmps	local02, arg05 wc
1a0b4     01 00 00 3F 
1a0b8     22 E4 05 31 |  if_ae	add	objptr, ##546
1a0bc     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1a0c0     01 00 00 3F 
1a0c4     22 E4 85 31 |  if_ae	sub	objptr, ##546
1a0c8     D9 E4 05 F1 | 	add	objptr, #217
1a0cc     F2 12 02 FB | 	rdlong	arg01, objptr
1a0d0     14 E4 05 F1 | 	add	objptr, #20
1a0d4     F2 1A 02 FB | 	rdlong	arg05, objptr
1a0d8     02 1A 66 F0 | 	shl	arg05, #2
1a0dc     0B 1B 02 FD | 	qmul	arg05, arg03
1a0e0                 | ' if x1>x2
1a0e0                 | '   x1,x2:=x2,x1
1a0e0                 | ' if x1<0 
1a0e0                 | '   x1:=0
1a0e0                 | ' if x2>=xres
1a0e0                 | '   x2:=xres-1  
1a0e0     01 20 86 31 |  if_ae	sub	local02, #1
1a0e4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1a0e4     01 16 06 F6 | 	mov	arg03, #1
1a0e8     10 17 02 F1 | 	add	arg03, local02
1a0ec     0F 17 82 F1 | 	sub	arg03, local01
1a0f0     0C 15 02 F6 | 	mov	arg02, arg04
1a0f4     00 18 06 F6 | 	mov	arg04, #0
1a0f8     01 1A 06 F6 | 	mov	arg05, #1
1a0fc     0A 00 00 FF 
1a100     D3 E5 05 F1 | 	add	objptr, ##5587
1a104     18 20 62 FD | 	getqx	local02
1a108     0F 21 02 F1 | 	add	local02, local01
1a10c     10 13 02 F1 | 	add	arg01, local02
1a110     FC 12 B0 FD | 	call	#_psram_spin2_fill
1a114     0B 00 00 FF 
1a118     C0 E4 85 F1 | 	sub	objptr, ##5824
1a11c                 | LR__2010
1a11c     A7 F0 03 F6 | 	mov	ptra, fp
1a120     B2 00 A0 FD | 	call	#popregs_
1a124                 | _hg010b_spin2_fastline_ret
1a124     2D 00 64 FD | 	ret
1a128                 | 
1a128                 | ' 
1a128                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1a128                 | _hg010b_spin2_draw
1a128     0E 4A 05 F6 | 	mov	COUNT_, #14
1a12c     A8 00 A0 FD | 	call	#pushregs_
1a130     09 1F 02 F6 | 	mov	local01, arg01
1a134     0A 21 02 F6 | 	mov	local02, arg02
1a138     0B 23 02 F6 | 	mov	local03, arg03
1a13c     0C 25 02 F6 | 	mov	local04, arg04
1a140     0D 27 02 F6 | 	mov	local05, arg05
1a144                 | ' 
1a144                 | ' if (y1==y2)
1a144     12 21 0A F2 | 	cmp	local02, local04 wz
1a148     18 00 90 5D |  if_ne	jmp	#LR__2020
1a14c                 | '   fastline(x1,x2,y1,c)
1a14c     0F 13 02 F6 | 	mov	arg01, local01
1a150     11 15 02 F6 | 	mov	arg02, local03
1a154     10 17 02 F6 | 	mov	arg03, local02
1a158     13 19 02 F6 | 	mov	arg04, local05
1a15c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1a160     F8 00 90 FD | 	jmp	#LR__2026
1a164                 | LR__2020
1a164                 | ' else  
1a164                 | '   x:=x1
1a164     0F 29 02 F6 | 	mov	local06, local01
1a168                 | '   y:=y1
1a168     10 2B 02 F6 | 	mov	local07, local02
1a16c                 | ' 
1a16c                 | '   if (x1<x2) 
1a16c     11 1F 52 F2 | 	cmps	local01, local03 wc
1a170                 | '     xi:=1
1a170     01 2C 06 C6 |  if_b	mov	local08, #1
1a174                 | '     dx:=x2-x1
1a174     11 2F 02 C6 |  if_b	mov	local09, local03
1a178     0F 2F 82 C1 |  if_b	sub	local09, local01
1a17c                 | '   else
1a17c                 | '     xi:=-1
1a17c     01 2C 66 36 |  if_ae	neg	local08, #1
1a180                 | '     dx:=x1-x2
1a180     11 1F 82 31 |  if_ae	sub	local01, local03
1a184     0F 2F 02 36 |  if_ae	mov	local09, local01
1a188                 | '   
1a188                 | '   if (y1<y2) 
1a188     12 21 52 F2 | 	cmps	local02, local04 wc
1a18c                 | '     yi:=1
1a18c     01 30 06 C6 |  if_b	mov	local10, #1
1a190                 | '     dy:=y2-y1
1a190     12 33 02 C6 |  if_b	mov	local11, local04
1a194     10 33 82 C1 |  if_b	sub	local11, local02
1a198                 | '   else
1a198                 | '     yi:=-1
1a198     01 30 66 36 |  if_ae	neg	local10, #1
1a19c                 | '     dy:=y1-y2
1a19c     12 21 82 31 |  if_ae	sub	local02, local04
1a1a0     10 33 02 36 |  if_ae	mov	local11, local02
1a1a4                 | ' 
1a1a4                 | '   putpixel(x,y,c)
1a1a4     13 17 02 F6 | 	mov	arg03, local05
1a1a8     14 13 02 F6 | 	mov	arg01, local06
1a1ac     15 15 02 F6 | 	mov	arg02, local07
1a1b0     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a1b4                 | ' 
1a1b4                 | '   if (dx>dy)
1a1b4     19 2F 5A F2 | 	cmps	local09, local11 wcz
1a1b8     50 00 90 ED |  if_be	jmp	#LR__2022
1a1bc                 | '     ai:=(dy-dx)*2
1a1bc     19 35 02 F6 | 	mov	local12, local11
1a1c0     17 35 82 F1 | 	sub	local12, local09
1a1c4     01 34 66 F0 | 	shl	local12, #1
1a1c8                 | '     bi:=dy*2
1a1c8     01 32 66 F0 | 	shl	local11, #1
1a1cc     19 37 02 F6 | 	mov	local13, local11
1a1d0                 | '     d:= bi-dx
1a1d0     1B 39 02 F6 | 	mov	local14, local13
1a1d4     17 39 82 F1 | 	sub	local14, local09
1a1d8                 | '     repeat while (x<>x2) 
1a1d8                 | LR__2021
1a1d8     11 29 0A F2 | 	cmp	local06, local03 wz
1a1dc     7C 00 90 AD |  if_e	jmp	#LR__2025
1a1e0                 | '       if (d>=0) 
1a1e0     00 38 56 F2 | 	cmps	local14, #0 wc
1a1e4                 | '         x+=xi
1a1e4     16 29 02 31 |  if_ae	add	local06, local08
1a1e8                 | '         y+=yi
1a1e8     18 2B 02 31 |  if_ae	add	local07, local10
1a1ec                 | '         d+=ai
1a1ec     1A 39 02 31 |  if_ae	add	local14, local12
1a1f0                 | '       else
1a1f0                 | '         d+=bi
1a1f0     1B 39 02 C1 |  if_b	add	local14, local13
1a1f4                 | '         x+=xi
1a1f4     16 29 02 C1 |  if_b	add	local06, local08
1a1f8                 | '       putpixel(x,y,c)
1a1f8     14 13 02 F6 | 	mov	arg01, local06
1a1fc     15 15 02 F6 | 	mov	arg02, local07
1a200     13 17 02 F6 | 	mov	arg03, local05
1a204     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a208     CC FF 9F FD | 	jmp	#LR__2021
1a20c                 | LR__2022
1a20c                 | '   else
1a20c                 | '     ai:=(dx-dy)*2
1a20c     17 35 02 F6 | 	mov	local12, local09
1a210     19 35 82 F1 | 	sub	local12, local11
1a214     01 34 66 F0 | 	shl	local12, #1
1a218                 | '     bi:=dx*2
1a218     01 2E 66 F0 | 	shl	local09, #1
1a21c     17 37 02 F6 | 	mov	local13, local09
1a220                 | '     d:=bi-dy
1a220     1B 39 02 F6 | 	mov	local14, local13
1a224     19 39 82 F1 | 	sub	local14, local11
1a228                 | '     repeat while (y<>y2)
1a228                 | LR__2023
1a228     12 2B 0A F2 | 	cmp	local07, local04 wz
1a22c     2C 00 90 AD |  if_e	jmp	#LR__2024
1a230                 | '       if (d>=0)
1a230     00 38 56 F2 | 	cmps	local14, #0 wc
1a234                 | '         x+=xi
1a234     16 29 02 31 |  if_ae	add	local06, local08
1a238                 | '         y+=yi
1a238     18 2B 02 31 |  if_ae	add	local07, local10
1a23c                 | '         d+=ai
1a23c     1A 39 02 31 |  if_ae	add	local14, local12
1a240                 | '       else
1a240                 | '         d+=bi
1a240     1B 39 02 C1 |  if_b	add	local14, local13
1a244                 | '         y+=yi
1a244     18 2B 02 C1 |  if_b	add	local07, local10
1a248                 | '       putpixel(x, y,c)
1a248     14 13 02 F6 | 	mov	arg01, local06
1a24c     15 15 02 F6 | 	mov	arg02, local07
1a250     13 17 02 F6 | 	mov	arg03, local05
1a254     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1a258     CC FF 9F FD | 	jmp	#LR__2023
1a25c                 | LR__2024
1a25c                 | LR__2025
1a25c                 | LR__2026
1a25c     A7 F0 03 F6 | 	mov	ptra, fp
1a260     B2 00 A0 FD | 	call	#popregs_
1a264                 | _hg010b_spin2_draw_ret
1a264     2D 00 64 FD | 	ret
1a268                 | 
1a268                 | '  
1a268                 | ' pub fillpush(val) 
1a268                 | _hg010b_spin2_fillpush
1a268                 | ' fillstack[fillptr]:=val
1a268     0B 00 00 FF 
1a26c     B6 E4 05 F1 | 	add	objptr, ##5814
1a270     F2 00 02 FB | 	rdlong	_var01, objptr
1a274     02 00 66 F0 | 	shl	_var01, #2
1a278     0A 00 00 FF 
1a27c     00 E4 85 F1 | 	sub	objptr, ##5120
1a280     F2 00 02 F1 | 	add	_var01, objptr
1a284     00 13 62 FC | 	wrlong	arg01, _var01
1a288                 | ' fillptr+=1   
1a288     0A 00 00 FF 
1a28c     00 E4 05 F1 | 	add	objptr, ##5120
1a290     F2 00 02 FB | 	rdlong	_var01, objptr
1a294     01 00 06 F1 | 	add	_var01, #1
1a298     F2 00 62 FC | 	wrlong	_var01, objptr
1a29c     0B 00 00 FF 
1a2a0     B6 E4 85 F1 | 	sub	objptr, ##5814
1a2a4                 | _hg010b_spin2_fillpush_ret
1a2a4     2D 00 64 FD | 	ret
1a2a8                 | 
1a2a8                 | ' 
1a2a8                 | '     
1a2a8                 | ' pub fillpop() : val
1a2a8                 | _hg010b_spin2_fillpop
1a2a8                 | ' 
1a2a8                 | ' fillptr-=1
1a2a8     0B 00 00 FF 
1a2ac     B6 E4 05 F1 | 	add	objptr, ##5814
1a2b0     F2 FA 01 FB | 	rdlong	result1, objptr
1a2b4     01 FA 85 F1 | 	sub	result1, #1
1a2b8     F2 FA 61 FC | 	wrlong	result1, objptr
1a2bc                 | ' if fillptr<0
1a2bc     0B 00 00 FF 
1a2c0     B6 E4 85 F1 | 	sub	objptr, ##5814
1a2c4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a2c8                 | '   fillptr:=0
1a2c8     0B 00 00 CF 
1a2cc     B6 E4 05 C1 |  if_b	add	objptr, ##5814
1a2d0     F2 00 68 CC |  if_b	wrlong	#0, objptr
1a2d4     0B 00 00 CF 
1a2d8     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
1a2dc                 | '   val:=-12345
1a2dc     E7 FF 7F CF 
1a2e0     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1a2e4     28 00 90 CD |  if_b	jmp	#LR__2030
1a2e8                 | ' else 
1a2e8                 | '   val:=fillstack[fillptr]
1a2e8     0B 00 00 FF 
1a2ec     B6 E4 05 F1 | 	add	objptr, ##5814
1a2f0     F2 00 02 FB | 	rdlong	_var01, objptr
1a2f4     02 00 66 F0 | 	shl	_var01, #2
1a2f8     0A 00 00 FF 
1a2fc     00 E4 85 F1 | 	sub	objptr, ##5120
1a300     F2 00 02 F1 | 	add	_var01, objptr
1a304     00 01 02 FB | 	rdlong	_var01, _var01
1a308     01 00 00 FF 
1a30c     B6 E4 85 F1 | 	sub	objptr, ##694
1a310                 | LR__2030
1a310                 | ' return val
1a310     00 FB 01 F6 | 	mov	result1, _var01
1a314                 | _hg010b_spin2_fillpop_ret
1a314     2D 00 64 FD | 	ret
1a318                 | 
1a318                 | ' 
1a318                 | '       
1a318                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1a318                 | _hg010b_spin2_fill
1a318     0B 4A 05 F6 | 	mov	COUNT_, #11
1a31c     A8 00 A0 FD | 	call	#pushregs_
1a320                 | ' 
1a320                 | ' newcolor:=newcolor & 255
1a320     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1a324                 | ' oldcolor:=oldcolor & 255
1a324     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1a328                 | ' 
1a328                 | ' if (oldcolor == newcolor) 
1a328     0F 21 0A F2 | 	cmp	local02, local01 wz
1a32c                 | '   return
1a32c     70 02 90 AD |  if_e	jmp	#LR__2049
1a330                 | ' 
1a330                 | ' fillptr:=0
1a330     0B 00 00 FF 
1a334     B6 E4 05 F1 | 	add	objptr, ##5814
1a338     F2 00 68 FC | 	wrlong	#0, objptr
1a33c                 | ' fillmax:=0
1a33c     04 E4 05 F1 | 	add	objptr, #4
1a340     F2 00 68 FC | 	wrlong	#0, objptr
1a344     0B 00 00 FF 
1a348     BA E4 85 F1 | 	sub	objptr, ##5818
1a34c                 | ' fillpush(x)
1a34c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a350                 | ' fillpush(y)
1a350     0A 13 02 F6 | 	mov	arg01, arg02
1a354     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1a358                 | ' y:=fillpop()
1a358     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1a35c     FD 22 02 F6 | 	mov	local03, result1
1a360                 | ' x:=fillpop()
1a360     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1a364     FD 24 02 F6 | 	mov	local04, result1
1a368                 | ' 'pinhigh(38)
1a368                 | ' repeat while (x>-1)       
1a368                 | LR__2040
1a368     00 24 56 F2 | 	cmps	local04, #0 wc
1a36c     30 02 90 CD |  if_b	jmp	#LR__2048
1a370                 | '  ' pintoggle(39)
1a370                 | '   x1 := x
1a370     12 27 02 F6 | 	mov	local05, local04
1a374                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1a374                 | LR__2041
1a374     00 28 06 F6 | 	mov	local06, #0
1a378     00 2A 06 F6 | 	mov	local07, #0
1a37c     00 26 56 F2 | 	cmps	local05, #0 wc
1a380     01 2A 66 36 |  if_ae	neg	local07, #1
1a384     00 2A 0E F2 | 	cmp	local07, #0 wz
1a388     00 28 26 56 |  if_ne	not	local06, #0
1a38c     00 2C 06 F6 | 	mov	local08, #0
1a390     00 2E 06 F6 | 	mov	local09, #0
1a394     11 15 02 F6 | 	mov	arg02, local03
1a398     13 13 02 F6 | 	mov	arg01, local05
1a39c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a3a0     10 FB 09 F2 | 	cmp	result1, local02 wz
1a3a4     00 2E 26 A6 |  if_e	not	local09, #0
1a3a8     00 2E 0E F2 | 	cmp	local09, #0 wz
1a3ac     00 2C 26 56 |  if_ne	not	local08, #0
1a3b0     16 29 CA F7 | 	test	local06, local08 wz
1a3b4                 | '     x1--
1a3b4     01 26 86 51 |  if_ne	sub	local05, #1
1a3b8     B8 FF 9F 5D |  if_ne	jmp	#LR__2041
1a3bc                 | '   x1++
1a3bc     01 26 06 F1 | 	add	local05, #1
1a3c0                 | '   spanabove := 0
1a3c0     00 30 06 F6 | 	mov	local10, #0
1a3c4                 | '   spanbelow := 0
1a3c4     00 32 06 F6 | 	mov	local11, #0
1a3c8                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1a3c8                 | LR__2042
1a3c8     00 28 06 F6 | 	mov	local06, #0
1a3cc     02 00 00 FF 
1a3d0     00 26 56 F2 | 	cmps	local05, ##1024 wc
1a3d4     00 28 26 C6 |  if_b	not	local06, #0
1a3d8     00 2C 06 F6 | 	mov	local08, #0
1a3dc     00 2E 06 F6 | 	mov	local09, #0
1a3e0     11 15 02 F6 | 	mov	arg02, local03
1a3e4     13 13 02 F6 | 	mov	arg01, local05
1a3e8     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a3ec     10 FB 09 F2 | 	cmp	result1, local02 wz
1a3f0     00 2E 26 A6 |  if_e	not	local09, #0
1a3f4     00 2E 0E F2 | 	cmp	local09, #0 wz
1a3f8     00 2C 26 56 |  if_ne	not	local08, #0
1a3fc     16 29 CA F7 | 	test	local06, local08 wz
1a400     88 01 90 AD |  if_e	jmp	#LR__2047
1a404                 | '     putpixel2 (x1,y, newcolor & 255)
1a404     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1a408     13 13 02 F6 | 	mov	arg01, local05
1a40c     11 15 02 F6 | 	mov	arg02, local03
1a410     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1a414                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1a414     00 28 06 F6 | 	mov	local06, #0
1a418     00 2A 06 F6 | 	mov	local07, #0
1a41c     00 30 0E F2 | 	cmp	local10, #0 wz
1a420     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1a424     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1a428     00 2A 0E F2 | 	cmp	local07, #0 wz
1a42c     00 28 26 56 |  if_ne	not	local06, #0
1a430     00 2C 06 F6 | 	mov	local08, #0
1a434     00 2E 06 F6 | 	mov	local09, #0
1a438     11 15 02 F6 | 	mov	arg02, local03
1a43c     01 14 86 F1 | 	sub	arg02, #1
1a440     13 13 02 F6 | 	mov	arg01, local05
1a444     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1a448     10 FB 09 F2 | 	cmp	result1, local02 wz
1a44c     00 2E 26 A6 |  if_e	not	local09, #0
1a450     00 2E 0E F2 | 	cmp	local09, #0 wz
1a454     00 2C 26 56 |  if_ne	not	local08, #0
1a458     16 29 CA F7 | 	test	local06, local08 wz
1a45c     1C 00 90 AD |  if_e	jmp	#LR__2043
1a460                 | '       fillpush(x1)
1a460     13 13 02 F6 | 	mov	arg01, local05
1a464     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1a468                 | '       fillpush(y-1)
1a468     11 13 02 F6 | 	mov	arg01, local03
1a46c     01 12 86 F1 | 	sub	arg01, #1
1a470     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1a474                 | '       spanabove := 1 
1a474     01 30 06 F6 | 	mov	local10, #1
1a478     4C 00 90 FD | 	jmp	#LR__2044
1a47c                 | LR__2043
1a47c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1a47c     00 28 06 F6 | 	mov	local06, #0
1a480     00 2A 06 F6 | 	mov	local07, #0
1a484     00 30 0E F2 | 	cmp	local10, #0 wz
1a488     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1a48c     01 2A 66 16 |  if_a	neg	local07, #1
1a490     00 2A 0E F2 | 	cmp	local07, #0 wz
1a494     00 28 26 56 |  if_ne	not	local06, #0
1a498     00 2C 06 F6 | 	mov	local08, #0
1a49c     00 2E 06 F6 | 	mov	local09, #0
1a4a0     11 15 02 F6 | 	mov	arg02, local03
1a4a4     01 14 86 F1 | 	sub	arg02, #1
1a4a8     13 13 02 F6 | 	mov	arg01, local05
1a4ac     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a4b0     10 FB 09 F2 | 	cmp	result1, local02 wz
1a4b4     00 2E 26 56 |  if_ne	not	local09, #0
1a4b8     00 2E 0E F2 | 	cmp	local09, #0 wz
1a4bc     00 2C 26 56 |  if_ne	not	local08, #0
1a4c0     16 29 CA F7 | 	test	local06, local08 wz
1a4c4                 | '       spanabove := 0 
1a4c4     00 30 06 56 |  if_ne	mov	local10, #0
1a4c8                 | LR__2044
1a4c8                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1a4c8     00 28 06 F6 | 	mov	local06, #0
1a4cc     00 2A 06 F6 | 	mov	local07, #0
1a4d0     00 32 0E F2 | 	cmp	local11, #0 wz
1a4d4     01 00 00 AF 
1a4d8     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1a4dc     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1a4e0     00 2A 0E F2 | 	cmp	local07, #0 wz
1a4e4     00 28 26 56 |  if_ne	not	local06, #0
1a4e8     00 2C 06 F6 | 	mov	local08, #0
1a4ec     00 2E 06 F6 | 	mov	local09, #0
1a4f0     11 15 02 F6 | 	mov	arg02, local03
1a4f4     01 14 06 F1 | 	add	arg02, #1
1a4f8     13 13 02 F6 | 	mov	arg01, local05
1a4fc     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a500     10 FB 09 F2 | 	cmp	result1, local02 wz
1a504     00 2E 26 A6 |  if_e	not	local09, #0
1a508     00 2E 0E F2 | 	cmp	local09, #0 wz
1a50c     00 2C 26 56 |  if_ne	not	local08, #0
1a510     16 29 CA F7 | 	test	local06, local08 wz
1a514     1C 00 90 AD |  if_e	jmp	#LR__2045
1a518                 | '       fillpush(x1)
1a518     13 13 02 F6 | 	mov	arg01, local05
1a51c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1a520                 | '       fillpush(y + 1)
1a520     11 13 02 F6 | 	mov	arg01, local03
1a524     01 12 06 F1 | 	add	arg01, #1
1a528     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1a52c                 | '       spanBelow := 1
1a52c     01 32 06 F6 | 	mov	local11, #1
1a530     50 00 90 FD | 	jmp	#LR__2046
1a534                 | LR__2045
1a534                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1a534     00 28 06 F6 | 	mov	local06, #0
1a538     00 2A 06 F6 | 	mov	local07, #0
1a53c     00 32 0E F2 | 	cmp	local11, #0 wz
1a540     01 00 00 5F 
1a544     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1a548     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1a54c     00 2A 0E F2 | 	cmp	local07, #0 wz
1a550     00 28 26 56 |  if_ne	not	local06, #0
1a554     00 2C 06 F6 | 	mov	local08, #0
1a558     00 2E 06 F6 | 	mov	local09, #0
1a55c     11 15 02 F6 | 	mov	arg02, local03
1a560     01 14 06 F1 | 	add	arg02, #1
1a564     13 13 02 F6 | 	mov	arg01, local05
1a568     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1a56c     10 FB 09 F2 | 	cmp	result1, local02 wz
1a570     00 2E 26 56 |  if_ne	not	local09, #0
1a574     00 2E 0E F2 | 	cmp	local09, #0 wz
1a578     00 2C 26 56 |  if_ne	not	local08, #0
1a57c     16 29 CA F7 | 	test	local06, local08 wz
1a580                 | '       spanbelow := 0
1a580     00 32 06 56 |  if_ne	mov	local11, #0
1a584                 | LR__2046
1a584                 | '     x1++
1a584     01 26 06 F1 | 	add	local05, #1
1a588     3C FE 9F FD | 	jmp	#LR__2042
1a58c                 | LR__2047
1a58c                 | '   y:=fillpop()
1a58c     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1a590     FD 22 02 F6 | 	mov	local03, result1
1a594                 | '   x:=fillpop()
1a594     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1a598     FD 24 02 F6 | 	mov	local04, result1
1a59c     C8 FD 9F FD | 	jmp	#LR__2040
1a5a0                 | LR__2048
1a5a0                 | LR__2049
1a5a0     A7 F0 03 F6 | 	mov	ptra, fp
1a5a4     B2 00 A0 FD | 	call	#popregs_
1a5a8                 | _hg010b_spin2_fill_ret
1a5a8     2D 00 64 FD | 	ret
1a5ac                 | 
1a5ac                 | ' 'pinlow(38)    
1a5ac                 | ' 
1a5ac                 | ' '-- A filled circle -----------------------------------------------------
1a5ac                 | ' 
1a5ac                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1a5ac                 | _hg010b_spin2_fcircle
1a5ac     08 4A 05 F6 | 	mov	COUNT_, #8
1a5b0     A8 00 A0 FD | 	call	#pushregs_
1a5b4     0B 1F 02 F6 | 	mov	local01, arg03
1a5b8     FF FF 7F FF 
1a5bc     FE 1F 06 FD | 	qmul	local01, ##-2
1a5c0     09 21 02 F6 | 	mov	local02, arg01
1a5c4     0A 23 02 F6 | 	mov	local03, arg02
1a5c8     0C 25 02 F6 | 	mov	local04, arg04
1a5cc                 | ' 
1a5cc                 | ' d:=5-4*r
1a5cc     0F 19 02 F6 | 	mov	arg04, local01
1a5d0     02 18 66 F0 | 	shl	arg04, #2
1a5d4     05 26 06 F6 | 	mov	local05, #5
1a5d8     0C 27 82 F1 | 	sub	local05, arg04
1a5dc                 | ' x:=0
1a5dc     00 28 06 F6 | 	mov	local06, #0
1a5e0                 | ' y:=r
1a5e0                 | ' da:=(-2*r+5)*4
1a5e0                 | ' db:=3*4
1a5e0     0C 2A 06 F6 | 	mov	local07, #12
1a5e4                 | ' repeat while (x<=y) 
1a5e4     18 2C 62 FD | 	getqx	local08
1a5e8     05 2C 06 F1 | 	add	local08, #5
1a5ec     02 2C 66 F0 | 	shl	local08, #2
1a5f0                 | LR__2050
1a5f0     0F 29 5A F2 | 	cmps	local06, local01 wcz
1a5f4     B4 00 90 1D |  if_a	jmp	#LR__2052
1a5f8                 | '   fastline(x0-x,x0+x,y0-y,c)
1a5f8     10 13 02 F6 | 	mov	arg01, local02
1a5fc     14 13 82 F1 | 	sub	arg01, local06
1a600     10 15 02 F6 | 	mov	arg02, local02
1a604     14 15 02 F1 | 	add	arg02, local06
1a608     11 17 02 F6 | 	mov	arg03, local03
1a60c     0F 17 82 F1 | 	sub	arg03, local01
1a610     12 19 02 F6 | 	mov	arg04, local04
1a614     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1a618                 | '   fastline(x0-x,x0+x,y0+y,c)
1a618     10 13 02 F6 | 	mov	arg01, local02
1a61c     14 13 82 F1 | 	sub	arg01, local06
1a620     10 15 02 F6 | 	mov	arg02, local02
1a624     14 15 02 F1 | 	add	arg02, local06
1a628     11 17 02 F6 | 	mov	arg03, local03
1a62c     0F 17 02 F1 | 	add	arg03, local01
1a630     12 19 02 F6 | 	mov	arg04, local04
1a634     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1a638                 | '   fastline(x0-y,x0+y,y0-x,c)
1a638     10 13 02 F6 | 	mov	arg01, local02
1a63c     0F 13 82 F1 | 	sub	arg01, local01
1a640     10 15 02 F6 | 	mov	arg02, local02
1a644     0F 15 02 F1 | 	add	arg02, local01
1a648     11 17 02 F6 | 	mov	arg03, local03
1a64c     14 17 82 F1 | 	sub	arg03, local06
1a650     12 19 02 F6 | 	mov	arg04, local04
1a654     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1a658                 | '   fastline(x0-y,x0+y,y0+x,c)
1a658     10 13 02 F6 | 	mov	arg01, local02
1a65c     0F 13 82 F1 | 	sub	arg01, local01
1a660     10 15 02 F6 | 	mov	arg02, local02
1a664     0F 15 02 F1 | 	add	arg02, local01
1a668     11 17 02 F6 | 	mov	arg03, local03
1a66c     14 17 02 F1 | 	add	arg03, local06
1a670     12 19 02 F6 | 	mov	arg04, local04
1a674     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1a678                 | '   if d>0 
1a678     01 26 56 F2 | 	cmps	local05, #1 wc
1a67c     18 00 90 CD |  if_b	jmp	#LR__2051
1a680                 | '     d+=da
1a680     16 27 02 F1 | 	add	local05, local08
1a684                 | '     y-=1
1a684     01 1E 86 F1 | 	sub	local01, #1
1a688                 | '     x+=1
1a688     01 28 06 F1 | 	add	local06, #1
1a68c                 | '     da+=4*4
1a68c     10 2C 06 F1 | 	add	local08, #16
1a690                 | '     db+=2*4
1a690     08 2A 06 F1 | 	add	local07, #8
1a694     58 FF 9F FD | 	jmp	#LR__2050
1a698                 | LR__2051
1a698                 | '   else
1a698                 | '     d+=db
1a698     15 27 02 F1 | 	add	local05, local07
1a69c                 | '     x+=1
1a69c     01 28 06 F1 | 	add	local06, #1
1a6a0                 | '     da+=2*4
1a6a0     08 2C 06 F1 | 	add	local08, #8
1a6a4                 | '     db+=2*4
1a6a4     08 2A 06 F1 | 	add	local07, #8
1a6a8     44 FF 9F FD | 	jmp	#LR__2050
1a6ac                 | LR__2052
1a6ac     A7 F0 03 F6 | 	mov	ptra, fp
1a6b0     B2 00 A0 FD | 	call	#popregs_
1a6b4                 | _hg010b_spin2_fcircle_ret
1a6b4     2D 00 64 FD | 	ret
1a6b8                 | 
1a6b8                 | '  
1a6b8                 | ' '-- A circle ------------------------------------------------------------ 
1a6b8                 | '  
1a6b8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1a6b8                 | _hg010b_spin2_circle
1a6b8     08 4A 05 F6 | 	mov	COUNT_, #8
1a6bc     A8 00 A0 FD | 	call	#pushregs_
1a6c0     0B 1F 02 F6 | 	mov	local01, arg03
1a6c4     FF FF 7F FF 
1a6c8     FE 1F 06 FD | 	qmul	local01, ##-2
1a6cc     09 21 02 F6 | 	mov	local02, arg01
1a6d0     0A 23 02 F6 | 	mov	local03, arg02
1a6d4     0C 25 02 F6 | 	mov	local04, arg04
1a6d8                 | ' 
1a6d8                 | '  
1a6d8                 | ' d:=5-4*r
1a6d8     0F 19 02 F6 | 	mov	arg04, local01
1a6dc     02 18 66 F0 | 	shl	arg04, #2
1a6e0     05 26 06 F6 | 	mov	local05, #5
1a6e4     0C 27 82 F1 | 	sub	local05, arg04
1a6e8                 | ' x:=0
1a6e8     00 28 06 F6 | 	mov	local06, #0
1a6ec                 | ' y:=r
1a6ec                 | ' da:=(-2*r+5)*4
1a6ec                 | ' db:=3*4
1a6ec     0C 2A 06 F6 | 	mov	local07, #12
1a6f0                 | ' repeat while (x<=y) 
1a6f0     18 2C 62 FD | 	getqx	local08
1a6f4     05 2C 06 F1 | 	add	local08, #5
1a6f8     02 2C 66 F0 | 	shl	local08, #2
1a6fc                 | LR__2060
1a6fc     0F 29 5A F2 | 	cmps	local06, local01 wcz
1a700     F4 00 90 1D |  if_a	jmp	#LR__2062
1a704                 | '   putpixel(x0-x,y0-y,c)
1a704     10 13 02 F6 | 	mov	arg01, local02
1a708     14 13 82 F1 | 	sub	arg01, local06
1a70c     11 15 02 F6 | 	mov	arg02, local03
1a710     0F 15 82 F1 | 	sub	arg02, local01
1a714     12 17 02 F6 | 	mov	arg03, local04
1a718     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1a71c                 | '   putpixel(x0-x,y0+y,c)
1a71c     10 13 02 F6 | 	mov	arg01, local02
1a720     14 13 82 F1 | 	sub	arg01, local06
1a724     11 15 02 F6 | 	mov	arg02, local03
1a728     0F 15 02 F1 | 	add	arg02, local01
1a72c     12 17 02 F6 | 	mov	arg03, local04
1a730     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1a734                 | '   putpixel(x0+x,y0-y,c)
1a734     10 13 02 F6 | 	mov	arg01, local02
1a738     14 13 02 F1 | 	add	arg01, local06
1a73c     11 15 02 F6 | 	mov	arg02, local03
1a740     0F 15 82 F1 | 	sub	arg02, local01
1a744     12 17 02 F6 | 	mov	arg03, local04
1a748     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1a74c                 | '   putpixel(x0+x,y0+y,c)
1a74c     10 13 02 F6 | 	mov	arg01, local02
1a750     14 13 02 F1 | 	add	arg01, local06
1a754     11 15 02 F6 | 	mov	arg02, local03
1a758     0F 15 02 F1 | 	add	arg02, local01
1a75c     12 17 02 F6 | 	mov	arg03, local04
1a760     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1a764                 | '   putpixel(x0-y,y0-x,c)
1a764     10 13 02 F6 | 	mov	arg01, local02
1a768     0F 13 82 F1 | 	sub	arg01, local01
1a76c     11 15 02 F6 | 	mov	arg02, local03
1a770     14 15 82 F1 | 	sub	arg02, local06
1a774     12 17 02 F6 | 	mov	arg03, local04
1a778     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1a77c                 | '   putpixel(x0-y,y0+x,c)
1a77c     10 13 02 F6 | 	mov	arg01, local02
1a780     0F 13 82 F1 | 	sub	arg01, local01
1a784     11 15 02 F6 | 	mov	arg02, local03
1a788     14 15 02 F1 | 	add	arg02, local06
1a78c     12 17 02 F6 | 	mov	arg03, local04
1a790     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1a794                 | '   putpixel(x0+y,y0-x,c)
1a794     10 13 02 F6 | 	mov	arg01, local02
1a798     0F 13 02 F1 | 	add	arg01, local01
1a79c     11 15 02 F6 | 	mov	arg02, local03
1a7a0     14 15 82 F1 | 	sub	arg02, local06
1a7a4     12 17 02 F6 | 	mov	arg03, local04
1a7a8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1a7ac                 | '   putpixel(x0+y,y0+x,c)
1a7ac     10 13 02 F6 | 	mov	arg01, local02
1a7b0     0F 13 02 F1 | 	add	arg01, local01
1a7b4     11 15 02 F6 | 	mov	arg02, local03
1a7b8     14 15 02 F1 | 	add	arg02, local06
1a7bc     12 17 02 F6 | 	mov	arg03, local04
1a7c0     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1a7c4                 | '   if d>0 
1a7c4     01 26 56 F2 | 	cmps	local05, #1 wc
1a7c8     18 00 90 CD |  if_b	jmp	#LR__2061
1a7cc                 | '     d+=da
1a7cc     16 27 02 F1 | 	add	local05, local08
1a7d0                 | '     y-=1
1a7d0     01 1E 86 F1 | 	sub	local01, #1
1a7d4                 | '     x+=1
1a7d4     01 28 06 F1 | 	add	local06, #1
1a7d8                 | '     da+=4*4
1a7d8     10 2C 06 F1 | 	add	local08, #16
1a7dc                 | '     db+=2*4
1a7dc     08 2A 06 F1 | 	add	local07, #8
1a7e0     18 FF 9F FD | 	jmp	#LR__2060
1a7e4                 | LR__2061
1a7e4                 | '   else
1a7e4                 | '     d+=db
1a7e4     15 27 02 F1 | 	add	local05, local07
1a7e8                 | '     x+=1
1a7e8     01 28 06 F1 | 	add	local06, #1
1a7ec                 | '     da+=2*4
1a7ec     08 2C 06 F1 | 	add	local08, #8
1a7f0                 | '     db+=2*4
1a7f0     08 2A 06 F1 | 	add	local07, #8
1a7f4     04 FF 9F FD | 	jmp	#LR__2060
1a7f8                 | LR__2062
1a7f8     A7 F0 03 F6 | 	mov	ptra, fp
1a7fc     B2 00 A0 FD | 	call	#popregs_
1a800                 | _hg010b_spin2_circle_ret
1a800     2D 00 64 FD | 	ret
1a804                 | 
1a804                 | '     
1a804                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1a804                 | ' 
1a804                 | ' pub frame(x1,y1,x2,y2,c)
1a804                 | _hg010b_spin2_frame
1a804     05 4A 05 F6 | 	mov	COUNT_, #5
1a808     A8 00 A0 FD | 	call	#pushregs_
1a80c     09 1F 02 F6 | 	mov	local01, arg01
1a810     0A 21 02 F6 | 	mov	local02, arg02
1a814     0B 23 02 F6 | 	mov	local03, arg03
1a818     0C 25 02 F6 | 	mov	local04, arg04
1a81c     0D 27 02 F6 | 	mov	local05, arg05
1a820                 | ' 
1a820                 | ' fastline(x1,x2,y1,c)
1a820     0F 13 02 F6 | 	mov	arg01, local01
1a824     11 15 02 F6 | 	mov	arg02, local03
1a828     10 17 02 F6 | 	mov	arg03, local02
1a82c     13 19 02 F6 | 	mov	arg04, local05
1a830     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1a834                 | ' fastline(x1,x2,y2,c)
1a834     0F 13 02 F6 | 	mov	arg01, local01
1a838     11 15 02 F6 | 	mov	arg02, local03
1a83c     12 17 02 F6 | 	mov	arg03, local04
1a840     13 19 02 F6 | 	mov	arg04, local05
1a844     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1a848                 | ' line(x1,y1,x1,y2,c)
1a848     0F 13 02 F6 | 	mov	arg01, local01
1a84c     10 15 02 F6 | 	mov	arg02, local02
1a850     0F 17 02 F6 | 	mov	arg03, local01
1a854     12 19 02 F6 | 	mov	arg04, local04
1a858     13 1B 02 F6 | 	mov	arg05, local05
1a85c                 | ' draw(x1,y1,x2,y2,c)
1a85c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1a860                 | ' line(x2,y1,x2,y2,c)
1a860     11 13 02 F6 | 	mov	arg01, local03
1a864     10 15 02 F6 | 	mov	arg02, local02
1a868     11 17 02 F6 | 	mov	arg03, local03
1a86c     12 19 02 F6 | 	mov	arg04, local04
1a870     13 1B 02 F6 | 	mov	arg05, local05
1a874                 | ' draw(x1,y1,x2,y2,c)
1a874     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1a878     A7 F0 03 F6 | 	mov	ptra, fp
1a87c     B2 00 A0 FD | 	call	#popregs_
1a880                 | _hg010b_spin2_frame_ret
1a880     2D 00 64 FD | 	ret
1a884                 | 
1a884                 | ' 
1a884                 | ' '-- A box (a filled rectangle) ----------------------------------------
1a884                 | ' 
1a884                 | ' pub box(x1,y1,x2,y2,c) |yy
1a884                 | _hg010b_spin2_box
1a884     06 4A 05 F6 | 	mov	COUNT_, #6
1a888     A8 00 A0 FD | 	call	#pushregs_
1a88c     09 1F 02 F6 | 	mov	local01, arg01
1a890     0A 21 02 F6 | 	mov	local02, arg02
1a894     0B 23 02 F6 | 	mov	local03, arg03
1a898     0C 25 02 F6 | 	mov	local04, arg04
1a89c     0D 27 02 F6 | 	mov	local05, arg05
1a8a0                 | ' 
1a8a0                 | ' repeat yy from y1 to y2
1a8a0     10 25 52 F2 | 	cmps	local04, local02 wc
1a8a4     01 28 86 F6 | 	negc	local06, #1
1a8a8     14 25 02 F1 | 	add	local04, local06
1a8ac                 | LR__2070
1a8ac                 | '   fastline(x1,x2,yy,c)
1a8ac     0F 13 02 F6 | 	mov	arg01, local01
1a8b0     11 15 02 F6 | 	mov	arg02, local03
1a8b4     13 19 02 F6 | 	mov	arg04, local05
1a8b8     10 17 02 F6 | 	mov	arg03, local02
1a8bc     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1a8c0     14 21 02 F1 | 	add	local02, local06
1a8c4     12 21 0A F2 | 	cmp	local02, local04 wz
1a8c8     E0 FF 9F 5D |  if_ne	jmp	#LR__2070
1a8cc     A7 F0 03 F6 | 	mov	ptra, fp
1a8d0     B2 00 A0 FD | 	call	#popregs_
1a8d4                 | _hg010b_spin2_box_ret
1a8d4     2D 00 64 FD | 	ret
1a8d8                 | 
1a8d8                 | '       
1a8d8                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1a8d8                 | _hg010b_spin2_putcharxycgf
1a8d8                 | ' 
1a8d8                 | '  
1a8d8                 | ' repeat yy from 0 to 15
1a8d8     00 00 06 F6 | 	mov	_var01, #0
1a8dc     97 8C 48 FB | 	callpa	#(@LR__2082-@LR__2080)>>2,fcache_load_ptr_
1a8e0                 | LR__2080
1a8e0                 | ' 
1a8e0                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1a8e0     91 E4 05 F1 | 	add	objptr, #145
1a8e4     F2 02 02 FB | 	rdlong	_var02, objptr
1a8e8     0A 02 66 F0 | 	shl	_var02, #10
1a8ec     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1a8f0     01 05 02 F1 | 	add	_var03, _var02
1a8f4     0B 03 02 F6 | 	mov	_var02, arg03
1a8f8     04 02 66 F0 | 	shl	_var02, #4
1a8fc     01 05 02 F1 | 	add	_var03, _var02
1a900     00 05 02 F1 | 	add	_var03, _var01
1a904     02 05 C2 FA | 	rdbyte	_var03, _var03
1a908                 | '   asm
1a908     00 04 0E F4 | 	testb	_var03, #0 wz
1a90c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1a910     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1a914     01 04 0E F4 | 	testb	_var03, #1 wz
1a918     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1a91c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1a920     02 04 0E F4 | 	testb	_var03, #2 wz
1a924     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1a928     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1a92c     03 04 0E F4 | 	testb	_var03, #3 wz
1a930     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1a934     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1a938     04 04 0E F4 | 	testb	_var03, #4 wz
1a93c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1a940     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1a944     05 04 0E F4 | 	testb	_var03, #5 wz
1a948     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1a94c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1a950     06 04 0E F4 | 	testb	_var03, #6 wz
1a954     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1a958     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1a95c     07 04 0E F4 | 	testb	_var03, #7 wz
1a960     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1a964     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1a968                 | '   
1a968                 | '   ccc[0]:=c1
1a968     99 E5 05 F1 | 	add	objptr, #409
1a96c     F2 06 62 FC | 	wrlong	_var04, objptr
1a970                 | '   ccc[1]:=c2 
1a970     04 E4 05 F1 | 	add	objptr, #4
1a974     F2 08 62 FC | 	wrlong	_var05, objptr
1a978                 | '   long[mailbox0][2]:=8
1a978     49 E4 85 F1 | 	sub	objptr, #73
1a97c     F2 04 02 FB | 	rdlong	_var03, objptr
1a980     08 04 06 F1 | 	add	_var03, #8
1a984     02 11 68 FC | 	wrlong	#8, _var03
1a988                 | '   long[mailbox0][1]:=@ccc
1a988     45 E4 05 F1 | 	add	objptr, #69
1a98c     F2 04 02 F6 | 	mov	_var03, objptr
1a990     45 E4 85 F1 | 	sub	objptr, #69
1a994     F2 02 02 FB | 	rdlong	_var02, objptr
1a998     04 02 06 F1 | 	add	_var02, #4
1a99c     01 05 62 FC | 	wrlong	_var03, _var02
1a9a0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1a9a0     0C E5 85 F1 | 	sub	objptr, #268
1a9a4     F2 04 02 FB | 	rdlong	_var03, objptr
1a9a8     0A 03 02 F6 | 	mov	_var02, arg02
1a9ac     00 03 02 F1 | 	add	_var02, _var01
1a9b0     0A 02 66 F0 | 	shl	_var02, #10
1a9b4     09 0B 02 F6 | 	mov	_var06, arg01
1a9b8     02 0A 66 F0 | 	shl	_var06, #2
1a9bc     05 03 02 F1 | 	add	_var02, _var06
1a9c0     01 05 02 F1 | 	add	_var03, _var02
1a9c4     00 00 78 FF 
1a9c8     00 04 06 F1 | 	add	_var03, ##-268435456
1a9cc     0C E5 05 F1 | 	add	objptr, #268
1a9d0     F2 0A 02 FB | 	rdlong	_var06, objptr
1a9d4     05 05 62 FC | 	wrlong	_var03, _var06
1a9d8                 | '   repeat
1a9d8                 | LR__2081
1a9d8     F2 04 02 FB | 	rdlong	_var03, objptr
1a9dc     02 03 02 FB | 	rdlong	_var02, _var03
1a9e0     00 02 56 F2 | 	cmps	_var02, #0 wc
1a9e4     F0 FF 9F CD |  if_b	jmp	#LR__2081
1a9e8     E5 E5 85 F1 | 	sub	objptr, #485
1a9ec     01 00 06 F1 | 	add	_var01, #1
1a9f0     10 00 56 F2 | 	cmps	_var01, #16 wc
1a9f4     E8 FE 9F CD |  if_b	jmp	#LR__2080
1a9f8                 | LR__2082
1a9f8                 | _hg010b_spin2_putcharxycgf_ret
1a9f8     2D 00 64 FD | 	ret
1a9fc                 | 
1a9fc                 | ' 
1a9fc                 | ' 
1a9fc                 | ' '**********************************************************************r***
1a9fc                 | ' '                                                                        *
1a9fc                 | ' ' Font related functions                                                 *
1a9fc                 | ' '                                                                        *
1a9fc                 | ' '*************************************************************************
1a9fc                 | ' 
1a9fc                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1a9fc                 | ' 
1a9fc                 | ' pub setfontfamily(afontnum)
1a9fc                 | _hg010b_spin2_setfontfamily
1a9fc                 | ' 
1a9fc                 | ' font_family:=afontnum
1a9fc     91 E4 05 F1 | 	add	objptr, #145
1aa00     F2 12 62 FC | 	wrlong	arg01, objptr
1aa04     91 E4 85 F1 | 	sub	objptr, #145
1aa08                 | ' 'if afontnum==8
1aa08                 | ' '  font_ptr:=@amiga_font
1aa08                 | ' 
1aa08                 | ' if afontnum==4
1aa08     04 12 0E F2 | 	cmp	arg01, #4 wz
1aa0c                 | '   font_ptr:=@st_font
1aa0c     08 00 00 AF 
1aa10     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1aa14     04 E4 05 A1 |  if_e	add	objptr, #4
1aa18     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1aa1c     04 E4 85 A1 |  if_e	sub	objptr, #4
1aa20     08 00 00 AF 
1aa24     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1aa28                 | ' if afontnum==0
1aa28     00 12 0E F2 | 	cmp	arg01, #0 wz
1aa2c                 | '   font_ptr:=@vga_font
1aa2c     04 E4 05 A1 |  if_e	add	objptr, #4
1aa30     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1aa34     04 E4 85 A1 |  if_e	sub	objptr, #4
1aa38                 | _hg010b_spin2_setfontfamily_ret
1aa38     2D 00 64 FD | 	ret
1aa3c                 | 
1aa3c                 | ' 
1aa3c                 | ' '*************************************************************************
1aa3c                 | ' '                                                                        *
1aa3c                 | ' '  Cursor functions                                                      *
1aa3c                 | ' '                                                                        *
1aa3c                 | ' '*************************************************************************
1aa3c                 | ' 
1aa3c                 | ' 
1aa3c                 | ' pub setcursorpos(x,y)
1aa3c                 | _hg010b_spin2_setcursorpos
1aa3c                 | ' 
1aa3c                 | ' ''---------- Set the (x,y) position of cursor
1aa3c                 | ' 
1aa3c                 | ' cursor_x:=x
1aa3c     38 E4 05 F1 | 	add	objptr, #56
1aa40     F2 12 52 FC | 	wrword	arg01, objptr
1aa44                 | ' cursor_y:=y
1aa44     02 E4 05 F1 | 	add	objptr, #2
1aa48     F2 14 42 FC | 	wrbyte	arg02, objptr
1aa4c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1aa4c     02 E4 85 F1 | 	sub	objptr, #2
1aa50     F2 14 E2 FA | 	rdword	arg02, objptr
1aa54     02 14 66 F0 | 	shl	arg02, #2
1aa58     02 E4 05 F1 | 	add	objptr, #2
1aa5c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1aa60     3A E4 85 F1 | 	sub	objptr, #58
1aa64     04 16 66 F0 | 	shl	arg03, #4
1aa68     11 12 06 F6 | 	mov	arg01, #17
1aa6c     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1aa70                 | _hg010b_spin2_setcursorpos_ret
1aa70     2D 00 64 FD | 	ret
1aa74                 | 
1aa74                 | ' 
1aa74                 | ' '*************************************************************************
1aa74                 | ' '                                                                        *
1aa74                 | ' '  VBlank functions                                                      *
1aa74                 | ' '                                                                        *
1aa74                 | ' '*************************************************************************
1aa74                 | ' 
1aa74                 | ' pub waitvbl(amount) | i
1aa74                 | _hg010b_spin2_waitvbl
1aa74     03 4A 05 F6 | 	mov	COUNT_, #3
1aa78     A8 00 A0 FD | 	call	#pushregs_
1aa7c     09 1F 02 F6 | 	mov	local01, arg01
1aa80                 | ' 
1aa80                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1aa80                 | ' 
1aa80                 | ' repeat i from 1 to amount
1aa80     01 20 06 F6 | 	mov	local02, #1
1aa84     01 1E 56 F2 | 	cmps	local01, #1 wc
1aa88     01 22 86 F6 | 	negc	local03, #1
1aa8c     11 1F 02 F1 | 	add	local01, local03
1aa90                 | LR__2090
1aa90                 | '   repeat until vblank==0
1aa90                 | LR__2091
1aa90     45 E4 05 F1 | 	add	objptr, #69
1aa94     F2 12 0A FB | 	rdlong	arg01, objptr wz
1aa98     45 E4 85 F1 | 	sub	objptr, #69
1aa9c     0C 00 90 AD |  if_e	jmp	#LR__2092
1aaa0                 | '     waitus(100)
1aaa0     64 12 06 F6 | 	mov	arg01, #100
1aaa4     F8 16 B0 FD | 	call	#__system___waitus
1aaa8     E4 FF 9F FD | 	jmp	#LR__2091
1aaac                 | LR__2092
1aaac                 | '   repeat until vblank==1
1aaac                 | LR__2093
1aaac     45 E4 05 F1 | 	add	objptr, #69
1aab0     F2 12 02 FB | 	rdlong	arg01, objptr
1aab4     45 E4 85 F1 | 	sub	objptr, #69
1aab8     01 12 0E F2 | 	cmp	arg01, #1 wz
1aabc     0C 00 90 AD |  if_e	jmp	#LR__2094
1aac0                 | '     waitus(100)
1aac0     64 12 06 F6 | 	mov	arg01, #100
1aac4     D8 16 B0 FD | 	call	#__system___waitus
1aac8     E0 FF 9F FD | 	jmp	#LR__2093
1aacc                 | LR__2094
1aacc     11 21 02 F1 | 	add	local02, local03
1aad0     0F 21 0A F2 | 	cmp	local02, local01 wz
1aad4     B8 FF 9F 5D |  if_ne	jmp	#LR__2090
1aad8     A7 F0 03 F6 | 	mov	ptra, fp
1aadc     B2 00 A0 FD | 	call	#popregs_
1aae0                 | _hg010b_spin2_waitvbl_ret
1aae0     2D 00 64 FD | 	ret
1aae4                 | 
1aae4                 | ' 
1aae4                 | ' 
1aae4                 | ' pub cls(fc,bc)   :c,i
1aae4                 | _hg010b_spin2_cls
1aae4     02 4A 05 F6 | 	mov	COUNT_, #2
1aae8     A8 00 A0 FD | 	call	#pushregs_
1aaec     09 1F 02 F6 | 	mov	local01, arg01
1aaf0     0A 21 02 F6 | 	mov	local02, arg02
1aaf4                 | ' 
1aaf4                 | ' c:=bc
1aaf4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1aaf4     D9 E4 05 F1 | 	add	objptr, #217
1aaf8     F2 12 02 FB | 	rdlong	arg01, objptr
1aafc     A5 E4 85 F1 | 	sub	objptr, #165
1ab00     F2 16 02 FB | 	rdlong	arg03, objptr
1ab04     02 16 66 F0 | 	shl	arg03, #2
1ab08     10 15 02 F6 | 	mov	arg02, local02
1ab0c     00 18 06 F6 | 	mov	arg04, #0
1ab10     01 1A 06 F6 | 	mov	arg05, #1
1ab14     0B 00 00 FF 
1ab18     8C E4 05 F1 | 	add	objptr, ##5772
1ab1c     F0 08 B0 FD | 	call	#_psram_spin2_fill
1ab20                 | ' setwritecolors(fc,bc)
1ab20                 | ' 
1ab20                 | ' write_color:=ff
1ab20     0B 00 00 FF 
1ab24     83 E4 85 F1 | 	sub	objptr, ##5763
1ab28     F2 1E 62 FC | 	wrlong	local01, objptr
1ab2c                 | ' write_background:=bb
1ab2c     04 E4 05 F1 | 	add	objptr, #4
1ab30     F2 20 62 FC | 	wrlong	local02, objptr
1ab34                 | ' cursor_x:=0
1ab34     09 E4 85 F1 | 	sub	objptr, #9
1ab38     F2 00 58 FC | 	wrword	#0, objptr
1ab3c                 | ' cursor_y:=0
1ab3c     02 E4 05 F1 | 	add	objptr, #2
1ab40     F2 00 48 FC | 	wrbyte	#0, objptr
1ab44                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1ab44     02 E4 85 F1 | 	sub	objptr, #2
1ab48     F2 14 E2 FA | 	rdword	arg02, objptr
1ab4c     02 14 66 F0 | 	shl	arg02, #2
1ab50     02 E4 05 F1 | 	add	objptr, #2
1ab54     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ab58     3A E4 85 F1 | 	sub	objptr, #58
1ab5c     04 16 66 F0 | 	shl	arg03, #4
1ab60     11 12 06 F6 | 	mov	arg01, #17
1ab64     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1ab68                 | ' setcursorcolor(fc)
1ab68     0F 13 02 F6 | 	mov	arg01, local01
1ab6c     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
1ab70     10 FB 01 F6 | 	mov	result1, local02
1ab74     00 FC 05 F6 | 	mov	result2, #0
1ab78     A7 F0 03 F6 | 	mov	ptra, fp
1ab7c     B2 00 A0 FD | 	call	#popregs_
1ab80                 | _hg010b_spin2_cls_ret
1ab80     2D 00 64 FD | 	ret
1ab84                 | 
1ab84                 | ' 
1ab84                 | ' ''---------- Output a char at the cursor position, move the cursor 
1ab84                 | ' 
1ab84                 | ' pub putchar(achar) | c,x,y,l,newcpl
1ab84                 | _hg010b_spin2_putchar
1ab84     01 4A 05 F6 | 	mov	COUNT_, #1
1ab88     A8 00 A0 FD | 	call	#pushregs_
1ab8c     09 1F 02 F6 | 	mov	local01, arg01
1ab90                 | ' 
1ab90                 | ' if achar==10
1ab90     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ab94                 | '   crlf()
1ab94     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1ab98                 | ' if achar==9
1ab98     09 1E 0E F2 | 	cmp	local01, #9 wz
1ab9c     18 00 90 5D |  if_ne	jmp	#LR__2100
1aba0                 | '   cursor_x:=(cursor_x& %11110000)+16
1aba0     38 E4 05 F1 | 	add	objptr, #56
1aba4     F2 16 E2 FA | 	rdword	arg03, objptr
1aba8     F0 16 06 F5 | 	and	arg03, #240
1abac     10 16 06 F1 | 	add	arg03, #16
1abb0     F2 16 52 FC | 	wrword	arg03, objptr
1abb4     38 E4 85 F1 | 	sub	objptr, #56
1abb8                 | LR__2100
1abb8                 | '   
1abb8                 | ' if (achar<>9) && (achar<>10) 
1abb8     09 1E 0E F2 | 	cmp	local01, #9 wz
1abbc     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1abc0     44 00 90 AD |  if_e	jmp	#LR__2101
1abc4                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1abc4     38 E4 05 F1 | 	add	objptr, #56
1abc8     F2 12 E2 FA | 	rdword	arg01, objptr
1abcc     02 E4 05 F1 | 	add	objptr, #2
1abd0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1abd4     04 14 66 F0 | 	shl	arg02, #4
1abd8     03 E4 05 F1 | 	add	objptr, #3
1abdc     F2 18 02 FB | 	rdlong	arg04, objptr
1abe0     04 E4 05 F1 | 	add	objptr, #4
1abe4     F2 1A 02 FB | 	rdlong	arg05, objptr
1abe8     41 E4 85 F1 | 	sub	objptr, #65
1abec     0F 17 02 F6 | 	mov	arg03, local01
1abf0     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1abf4                 | '   cursor_x+=2
1abf4     38 E4 05 F1 | 	add	objptr, #56
1abf8     F2 1E E2 FA | 	rdword	local01, objptr
1abfc     02 1E 06 F1 | 	add	local01, #2
1ac00     F2 1E 52 FC | 	wrword	local01, objptr
1ac04     38 E4 85 F1 | 	sub	objptr, #56
1ac08                 | LR__2101
1ac08                 | ' 
1ac08                 | ' if cursor_x>=256
1ac08     38 E4 05 F1 | 	add	objptr, #56
1ac0c     F2 1E E2 FA | 	rdword	local01, objptr
1ac10     38 E4 85 F1 | 	sub	objptr, #56
1ac14     00 1F 56 F2 | 	cmps	local01, #256 wc
1ac18     64 00 90 CD |  if_b	jmp	#LR__2103
1ac1c                 | '   cursor_x:=0
1ac1c     38 E4 05 F1 | 	add	objptr, #56
1ac20     F2 00 58 FC | 	wrword	#0, objptr
1ac24                 | '   cursor_y+=1
1ac24     02 E4 05 F1 | 	add	objptr, #2
1ac28     F2 1E C2 FA | 	rdbyte	local01, objptr
1ac2c     01 1E 06 F1 | 	add	local01, #1
1ac30     F2 1E 42 FC | 	wrbyte	local01, objptr
1ac34                 | '   if cursor_y>st_lines-1
1ac34     C3 E4 05 F1 | 	add	objptr, #195
1ac38     F2 1E 02 FB | 	rdlong	local01, objptr
1ac3c     01 1E 86 F1 | 	sub	local01, #1
1ac40     C3 E4 85 F1 | 	sub	objptr, #195
1ac44     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ac48     3A E4 85 F1 | 	sub	objptr, #58
1ac4c     0F 17 5A F2 | 	cmps	arg03, local01 wcz
1ac50     2C 00 90 ED |  if_be	jmp	#LR__2102
1ac54                 | '     scrollup()
1ac54     00 12 06 F6 | 	mov	arg01, #0
1ac58     01 00 00 FF 
1ac5c     40 14 06 F6 | 	mov	arg02, ##576
1ac60     10 16 06 F6 | 	mov	arg03, #16
1ac64     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1ac68                 | '     cursor_y:=st_lines-1
1ac68     FD E4 05 F1 | 	add	objptr, #253
1ac6c     F2 1E 02 FB | 	rdlong	local01, objptr
1ac70     01 1E 86 F1 | 	sub	local01, #1
1ac74     C3 E4 85 F1 | 	sub	objptr, #195
1ac78     F2 1E 42 FC | 	wrbyte	local01, objptr
1ac7c     3A E4 85 F1 | 	sub	objptr, #58
1ac80                 | LR__2102
1ac80                 | LR__2103
1ac80                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
1ac80     38 E4 05 F1 | 	add	objptr, #56
1ac84     F2 14 E2 FA | 	rdword	arg02, objptr
1ac88     02 14 66 F0 | 	shl	arg02, #2
1ac8c     02 E4 05 F1 | 	add	objptr, #2
1ac90     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ac94     3A E4 85 F1 | 	sub	objptr, #58
1ac98     04 16 66 F0 | 	shl	arg03, #4
1ac9c     11 12 06 F6 | 	mov	arg01, #17
1aca0     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1aca4     A7 F0 03 F6 | 	mov	ptra, fp
1aca8     B2 00 A0 FD | 	call	#popregs_
1acac                 | _hg010b_spin2_putchar_ret
1acac     2D 00 64 FD | 	ret
1acb0                 | 
1acb0                 | '     
1acb0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1acb0                 | ' 
1acb0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1acb0                 | _hg010b_spin2_putchar2
1acb0     01 4A 05 F6 | 	mov	COUNT_, #1
1acb4     A8 00 A0 FD | 	call	#pushregs_
1acb8                 | ' 
1acb8                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
1acb8     38 E4 05 F1 | 	add	objptr, #56
1acbc     F2 1E E2 FA | 	rdword	local01, objptr
1acc0     02 E4 05 F1 | 	add	objptr, #2
1acc4     F2 14 C2 FA | 	rdbyte	arg02, objptr
1acc8     04 14 66 F0 | 	shl	arg02, #4
1accc     09 17 02 F6 | 	mov	arg03, arg01
1acd0     03 E4 05 F1 | 	add	objptr, #3
1acd4     F2 18 02 FB | 	rdlong	arg04, objptr
1acd8     04 E4 05 F1 | 	add	objptr, #4
1acdc     F2 1A 02 FB | 	rdlong	arg05, objptr
1ace0     41 E4 85 F1 | 	sub	objptr, #65
1ace4     0F 13 02 F6 | 	mov	arg01, local01
1ace8     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
1acec                 | ' cursor_x+=2
1acec     38 E4 05 F1 | 	add	objptr, #56
1acf0     F2 1E E2 FA | 	rdword	local01, objptr
1acf4     02 1E 06 F1 | 	add	local01, #2
1acf8     F2 1E 52 FC | 	wrword	local01, objptr
1acfc                 | ' if cursor_x>=256
1acfc     F2 1E E2 FA | 	rdword	local01, objptr
1ad00     38 E4 85 F1 | 	sub	objptr, #56
1ad04     00 1F 56 F2 | 	cmps	local01, #256 wc
1ad08     64 00 90 CD |  if_b	jmp	#LR__2111
1ad0c                 | '   cursor_x:=0
1ad0c     38 E4 05 F1 | 	add	objptr, #56
1ad10     F2 00 58 FC | 	wrword	#0, objptr
1ad14                 | '   cursor_y+=1
1ad14     02 E4 05 F1 | 	add	objptr, #2
1ad18     F2 1E C2 FA | 	rdbyte	local01, objptr
1ad1c     01 1E 06 F1 | 	add	local01, #1
1ad20     F2 1E 42 FC | 	wrbyte	local01, objptr
1ad24                 | '   if cursor_y>st_lines-1
1ad24     C3 E4 05 F1 | 	add	objptr, #195
1ad28     F2 1E 02 FB | 	rdlong	local01, objptr
1ad2c     01 1E 86 F1 | 	sub	local01, #1
1ad30     C3 E4 85 F1 | 	sub	objptr, #195
1ad34     F2 1A C2 FA | 	rdbyte	arg05, objptr
1ad38     3A E4 85 F1 | 	sub	objptr, #58
1ad3c     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
1ad40     2C 00 90 ED |  if_be	jmp	#LR__2110
1ad44                 | '     scrollup()
1ad44     00 12 06 F6 | 	mov	arg01, #0
1ad48     01 00 00 FF 
1ad4c     40 14 06 F6 | 	mov	arg02, ##576
1ad50     10 16 06 F6 | 	mov	arg03, #16
1ad54     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
1ad58                 | '     cursor_y:=st_lines-1
1ad58     FD E4 05 F1 | 	add	objptr, #253
1ad5c     F2 1E 02 FB | 	rdlong	local01, objptr
1ad60     01 1E 86 F1 | 	sub	local01, #1
1ad64     C3 E4 85 F1 | 	sub	objptr, #195
1ad68     F2 1E 42 FC | 	wrbyte	local01, objptr
1ad6c     3A E4 85 F1 | 	sub	objptr, #58
1ad70                 | LR__2110
1ad70                 | LR__2111
1ad70                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
1ad70     38 E4 05 F1 | 	add	objptr, #56
1ad74     F2 14 E2 FA | 	rdword	arg02, objptr
1ad78     02 14 66 F0 | 	shl	arg02, #2
1ad7c     02 E4 05 F1 | 	add	objptr, #2
1ad80     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ad84     3A E4 85 F1 | 	sub	objptr, #58
1ad88     04 16 66 F0 | 	shl	arg03, #4
1ad8c     11 12 06 F6 | 	mov	arg01, #17
1ad90     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1ad94     A7 F0 03 F6 | 	mov	ptra, fp
1ad98     B2 00 A0 FD | 	call	#popregs_
1ad9c                 | _hg010b_spin2_putchar2_ret
1ad9c     2D 00 64 FD | 	ret
1ada0                 | 
1ada0                 | ' ''--------- Output a string at the cursor position, move the cursor  
1ada0                 | ' 
1ada0                 | ' pub write(text) | iii,c,ncx,ncy
1ada0                 | _hg010b_spin2_write
1ada0     04 4A 05 F6 | 	mov	COUNT_, #4
1ada4     A8 00 A0 FD | 	call	#pushregs_
1ada8     09 1F 02 F6 | 	mov	local01, arg01
1adac                 | ' 
1adac                 | ' repeat iii from 0 to strsize(text)-1
1adac     00 20 06 F6 | 	mov	local02, #0
1adb0     0F 13 02 F6 | 	mov	arg01, local01
1adb4     09 23 02 F6 | 	mov	local03, arg01
1adb8     97 06 48 FB | 	callpa	#(@LR__2121-@LR__2120)>>2,fcache_load_ptr_
1adbc                 | LR__2120
1adbc     11 FB C9 FA | 	rdbyte	result1, local03 wz
1adc0     01 22 06 51 |  if_ne	add	local03, #1
1adc4     F4 FF 9F 5D |  if_ne	jmp	#LR__2120
1adc8                 | LR__2121
1adc8     09 23 82 F1 | 	sub	local03, arg01
1adcc     01 22 86 F1 | 	sub	local03, #1
1add0     00 22 56 F2 | 	cmps	local03, #0 wc
1add4     01 24 86 F6 | 	negc	local04, #1
1add8     12 23 02 F1 | 	add	local03, local04
1addc                 | LR__2122
1addc                 | '   putchar2(byte[text+iii])
1addc     0F 13 02 F6 | 	mov	arg01, local01
1ade0     10 13 02 F1 | 	add	arg01, local02
1ade4     09 13 C2 FA | 	rdbyte	arg01, arg01
1ade8     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
1adec     12 21 02 F1 | 	add	local02, local04
1adf0     11 21 0A F2 | 	cmp	local02, local03 wz
1adf4     E4 FF 9F 5D |  if_ne	jmp	#LR__2122
1adf8     A7 F0 03 F6 | 	mov	ptra, fp
1adfc     B2 00 A0 FD | 	call	#popregs_
1ae00                 | _hg010b_spin2_write_ret
1ae00     2D 00 64 FD | 	ret
1ae04                 | 
1ae04                 | ' 
1ae04                 | ' ''-----------  Scroll the screen one line up
1ae04                 | ' 
1ae04                 | ' pub scrollup(start=0, end=576 , amount=16) | i
1ae04                 | _hg010b_spin2_scrollup
1ae04     01 4A 05 F6 | 	mov	COUNT_, #1
1ae08     A8 00 A0 FD | 	call	#pushregs_
1ae0c                 | ' 	
1ae0c                 | ' repeat i from 0 to 559 
1ae0c     00 1E 06 F6 | 	mov	local01, #0
1ae10                 | LR__2130
1ae10     F5 E4 05 F1 | 	add	objptr, #245
1ae14     F2 18 02 FB | 	rdlong	arg04, objptr
1ae18     1C E4 85 F1 | 	sub	objptr, #28
1ae1c     F2 14 02 FB | 	rdlong	arg02, objptr
1ae20     0F 13 02 F6 | 	mov	arg01, local01
1ae24     10 12 06 F1 | 	add	arg01, #16
1ae28     02 12 66 F0 | 	shl	arg01, #2
1ae2c     14 E4 05 F1 | 	add	objptr, #20
1ae30     F2 16 02 FB | 	rdlong	arg03, objptr
1ae34     0B 13 02 FD | 	qmul	arg01, arg03
1ae38                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1ae38     F6 03 00 FF 
1ae3c     00 12 06 F6 | 	mov	arg01, ##519168
1ae40     0C 13 82 F1 | 	sub	arg01, arg04
1ae44     02 16 66 F0 | 	shl	arg03, #2
1ae48     0A 00 00 FF 
1ae4c     D3 E5 05 F1 | 	add	objptr, ##5587
1ae50     18 18 62 FD | 	getqx	arg04
1ae54     0C 15 02 F1 | 	add	arg02, arg04
1ae58     7C 04 B0 FD | 	call	#_psram_spin2_read1
1ae5c     0A 00 00 FF 
1ae60     CB E5 85 F1 | 	sub	objptr, ##5579
1ae64     F2 18 02 FB | 	rdlong	arg04, objptr
1ae68     1C E4 85 F1 | 	sub	objptr, #28
1ae6c     F2 14 02 FB | 	rdlong	arg02, objptr
1ae70     0F 13 02 F6 | 	mov	arg01, local01
1ae74     02 12 66 F0 | 	shl	arg01, #2
1ae78     14 E4 05 F1 | 	add	objptr, #20
1ae7c     F2 16 02 FB | 	rdlong	arg03, objptr
1ae80     0B 13 02 FD | 	qmul	arg01, arg03
1ae84                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1ae84     F6 03 00 FF 
1ae88     00 12 06 F6 | 	mov	arg01, ##519168
1ae8c     0C 13 82 F1 | 	sub	arg01, arg04
1ae90     02 16 66 F0 | 	shl	arg03, #2
1ae94     0A 00 00 FF 
1ae98     D3 E5 05 F1 | 	add	objptr, ##5587
1ae9c     18 18 62 FD | 	getqx	arg04
1aea0     0C 15 02 F1 | 	add	arg02, arg04
1aea4     CC 04 B0 FD | 	call	#_psram_spin2_write
1aea8     0B 00 00 FF 
1aeac     C0 E4 85 F1 | 	sub	objptr, ##5824
1aeb0     01 1E 06 F1 | 	add	local01, #1
1aeb4     01 00 00 FF 
1aeb8     30 1E 56 F2 | 	cmps	local01, ##560 wc
1aebc     50 FF 9F CD |  if_b	jmp	#LR__2130
1aec0                 | ' 
1aec0                 | ' repeat i from 560 to 575
1aec0     01 00 00 FF 
1aec4     30 1E 06 F6 | 	mov	local01, ##560
1aec8                 | LR__2131
1aec8                 | '    fastline(0,1023,i,write_background)   
1aec8     41 E4 05 F1 | 	add	objptr, #65
1aecc     F2 18 02 FB | 	rdlong	arg04, objptr
1aed0     41 E4 85 F1 | 	sub	objptr, #65
1aed4     00 12 06 F6 | 	mov	arg01, #0
1aed8     09 14 CE F9 | 	bmask	arg02, #9
1aedc     0F 17 02 F6 | 	mov	arg03, local01
1aee0     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
1aee4     01 1E 06 F1 | 	add	local01, #1
1aee8     01 00 00 FF 
1aeec     40 1E 16 F2 | 	cmp	local01, ##576 wc
1aef0     D4 FF 9F CD |  if_b	jmp	#LR__2131
1aef4     A7 F0 03 F6 | 	mov	ptra, fp
1aef8     B2 00 A0 FD | 	call	#popregs_
1aefc                 | _hg010b_spin2_scrollup_ret
1aefc     2D 00 64 FD | 	ret
1af00                 | 
1af00                 | ' 
1af00                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1af00                 | ' 
1af00                 | ' pub crlf()
1af00                 | _hg010b_spin2_crlf
1af00                 | ' 
1af00                 | ' cursor_x:=leading_spaces*2
1af00     01 00 00 FF 
1af04     B2 E4 05 F1 | 	add	objptr, ##690
1af08     F2 16 02 FB | 	rdlong	arg03, objptr
1af0c     01 16 66 F0 | 	shl	arg03, #1
1af10     01 00 00 FF 
1af14     7A E4 85 F1 | 	sub	objptr, ##634
1af18     F2 16 52 FC | 	wrword	arg03, objptr
1af1c                 | ' cursor_y+=1
1af1c     02 E4 05 F1 | 	add	objptr, #2
1af20     F2 16 C2 FA | 	rdbyte	arg03, objptr
1af24     01 16 06 F1 | 	add	arg03, #1
1af28     F2 16 42 FC | 	wrbyte	arg03, objptr
1af2c                 | ' if cursor_y>st_lines-1
1af2c     C3 E4 05 F1 | 	add	objptr, #195
1af30     F2 16 02 FB | 	rdlong	arg03, objptr
1af34     01 16 86 F1 | 	sub	arg03, #1
1af38     C3 E4 85 F1 | 	sub	objptr, #195
1af3c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1af40     3A E4 85 F1 | 	sub	objptr, #58
1af44     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1af48     2C 00 90 ED |  if_be	jmp	#LR__2140
1af4c                 | '   scrollup()
1af4c     00 12 06 F6 | 	mov	arg01, #0
1af50     01 00 00 FF 
1af54     40 14 06 F6 | 	mov	arg02, ##576
1af58     10 16 06 F6 | 	mov	arg03, #16
1af5c     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
1af60                 | '   cursor_y:=st_lines-1
1af60     FD E4 05 F1 | 	add	objptr, #253
1af64     F2 16 02 FB | 	rdlong	arg03, objptr
1af68     01 16 86 F1 | 	sub	arg03, #1
1af6c     C3 E4 85 F1 | 	sub	objptr, #195
1af70     F2 16 42 FC | 	wrbyte	arg03, objptr
1af74     3A E4 85 F1 | 	sub	objptr, #58
1af78                 | LR__2140
1af78                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
1af78     38 E4 05 F1 | 	add	objptr, #56
1af7c     F2 14 E2 FA | 	rdword	arg02, objptr
1af80     02 14 66 F0 | 	shl	arg02, #2
1af84     02 E4 05 F1 | 	add	objptr, #2
1af88     F2 16 C2 FA | 	rdbyte	arg03, objptr
1af8c     3A E4 85 F1 | 	sub	objptr, #58
1af90     04 16 66 F0 | 	shl	arg03, #4
1af94     11 12 06 F6 | 	mov	arg01, #17
1af98     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1af9c                 | _hg010b_spin2_crlf_ret
1af9c     2D 00 64 FD | 	ret
1afa0                 | 
1afa0                 | ' 
1afa0                 | ' 
1afa0                 | ' '*************************************************************************
1afa0                 | ' '                                                                        *
1afa0                 | ' '  Conversions                                                           *
1afa0                 | ' '                                                                        *
1afa0                 | ' '*************************************************************************
1afa0                 | ' 
1afa0                 | ' ''---------- Convert a integer to dec string, return a pointer
1afa0                 | ' 
1afa0                 | ' pub inttostr(i):result |q,pos,k,j
1afa0                 | _hg010b_spin2_inttostr
1afa0     03 4A 05 F6 | 	mov	COUNT_, #3
1afa4     A8 00 A0 FD | 	call	#pushregs_
1afa8     09 1F 0A F6 | 	mov	local01, arg01 wz
1afac                 | ' 
1afac                 | ' j:=i
1afac                 | ' pos:=10
1afac     0A 20 06 F6 | 	mov	local02, #10
1afb0                 | ' k:=0
1afb0     00 22 06 F6 | 	mov	local03, #0
1afb4                 | ' 
1afb4                 | ' if (j==0)
1afb4     18 00 90 5D |  if_ne	jmp	#LR__2150
1afb8                 | '   n_string[0]:=48
1afb8     49 E4 05 F1 | 	add	objptr, #73
1afbc     F2 60 48 FC | 	wrbyte	#48, objptr
1afc0                 | '   n_string[1]:=0
1afc0     01 E4 05 F1 | 	add	objptr, #1
1afc4     F2 00 48 FC | 	wrbyte	#0, objptr
1afc8     4A E4 85 F1 | 	sub	objptr, #74
1afcc     C4 00 90 FD | 	jmp	#LR__2157
1afd0                 | LR__2150
1afd0                 | ' 
1afd0                 | ' else
1afd0                 | '   if (j<0)
1afd0     0F 1F 52 F6 | 	abs	local01, local01 wc
1afd4                 | '     j:=0-j
1afd4                 | '     k:=45
1afd4     2D 22 06 C6 |  if_b	mov	local03, #45
1afd8                 | ' 
1afd8                 | '   n_string[11]:=0
1afd8     54 E4 05 F1 | 	add	objptr, #84
1afdc     F2 00 48 FC | 	wrbyte	#0, objptr
1afe0     54 E4 85 F1 | 	sub	objptr, #84
1afe4     97 24 48 FB | 	callpa	#(@LR__2152-@LR__2151)>>2,fcache_load_ptr_
1afe8                 | '   repeat while (pos>-1)
1afe8                 | LR__2151
1afe8     00 20 56 F2 | 	cmps	local02, #0 wc
1afec     40 00 90 CD |  if_b	jmp	#LR__2153
1aff0     0F FB 51 F6 | 	abs	result1, local01 wc
1aff4     0A FA 15 FD | 	qdiv	result1, #10
1aff8                 | '     q:=j//10
1aff8     19 FA 61 FD | 	getqy	result1
1affc     FD FA 81 F6 | 	negc	result1, result1
1b000     0F 1F 52 F6 | 	abs	local01, local01 wc
1b004     0A 1E 16 FD | 	qdiv	local01, #10
1b008                 | '     q:=48+q
1b008     30 FA 05 F1 | 	add	result1, #48
1b00c                 | '     n_string[pos]:=q
1b00c     10 1F 02 F6 | 	mov	local01, local02
1b010     49 E4 05 F1 | 	add	objptr, #73
1b014     F2 1E 02 F1 | 	add	local01, objptr
1b018     0F FB 41 FC | 	wrbyte	result1, local01
1b01c                 | '     j:=j/10
1b01c     49 E4 85 F1 | 	sub	objptr, #73
1b020                 | '     pos-=1
1b020     01 20 86 F1 | 	sub	local02, #1
1b024     18 1E 62 FD | 	getqx	local01
1b028     0F 1F 82 F6 | 	negc	local01, local01
1b02c     B8 FF 9F FD | 	jmp	#LR__2151
1b030                 | LR__2152
1b030                 | LR__2153
1b030                 | '   repeat while n_string[0]==48
1b030                 | LR__2154
1b030     49 E4 05 F1 | 	add	objptr, #73
1b034     F2 16 C2 FA | 	rdbyte	arg03, objptr
1b038     49 E4 85 F1 | 	sub	objptr, #73
1b03c     30 16 0E F2 | 	cmp	arg03, #48 wz
1b040     20 00 90 5D |  if_ne	jmp	#LR__2155
1b044                 | '     bytemove(@n_string,@n_string+1,12)
1b044     49 E4 05 F1 | 	add	objptr, #73
1b048     F2 12 02 F6 | 	mov	arg01, objptr
1b04c     F2 14 02 F6 | 	mov	arg02, objptr
1b050     49 E4 85 F1 | 	sub	objptr, #73
1b054     01 14 06 F1 | 	add	arg02, #1
1b058     0C 16 06 F6 | 	mov	arg03, #12
1b05c     00 0D B0 FD | 	call	#__system____builtin_memmove
1b060     CC FF 9F FD | 	jmp	#LR__2154
1b064                 | LR__2155
1b064                 | ' 
1b064                 | '   if k==45
1b064     2D 22 0E F2 | 	cmp	local03, #45 wz
1b068     28 00 90 5D |  if_ne	jmp	#LR__2156
1b06c                 | '      bytemove(@n_string+1,@n_string,12)
1b06c     49 E4 05 F1 | 	add	objptr, #73
1b070     F2 12 02 F6 | 	mov	arg01, objptr
1b074     01 12 06 F1 | 	add	arg01, #1
1b078     F2 14 02 F6 | 	mov	arg02, objptr
1b07c     49 E4 85 F1 | 	sub	objptr, #73
1b080     0C 16 06 F6 | 	mov	arg03, #12
1b084     D8 0C B0 FD | 	call	#__system____builtin_memmove
1b088                 | '      n_string[0]:=k
1b088     49 E4 05 F1 | 	add	objptr, #73
1b08c     F2 22 42 FC | 	wrbyte	local03, objptr
1b090     49 E4 85 F1 | 	sub	objptr, #73
1b094                 | LR__2156
1b094                 | LR__2157
1b094                 | ' 
1b094                 | ' q:=@n_string
1b094     49 E4 05 F1 | 	add	objptr, #73
1b098     F2 FA 01 F6 | 	mov	result1, objptr
1b09c     49 E4 85 F1 | 	sub	objptr, #73
1b0a0                 | ' return q
1b0a0     A7 F0 03 F6 | 	mov	ptra, fp
1b0a4     B2 00 A0 FD | 	call	#popregs_
1b0a8                 | _hg010b_spin2_inttostr_ret
1b0a8     2D 00 64 FD | 	ret
1b0ac                 | 
1b0ac                 | ' 
1b0ac                 | ' '..............................................................................
1b0ac                 | ' 
1b0ac                 | ' {{
1b0ac                 | ' }}
1b0ac                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1b0ac                 | _psram_spin2_startx
1b0ac     04 4A 05 F6 | 	mov	COUNT_, #4
1b0b0     A8 00 A0 FD | 	call	#pushregs_
1b0b4     09 1F 02 F6 | 	mov	local01, arg01
1b0b8     0B 21 02 F6 | 	mov	local02, arg03
1b0bc     0C 23 02 F6 | 	mov	local03, arg04
1b0c0                 | '     stop() ' restart driver if required
1b0c0     54 01 B0 FD | 	call	#_psram_spin2_stop
1b0c4     00 1E 0E F2 | 	cmp	local01, #0 wz
1b0c8     14 1E 06 AB |  if_e	rdlong	local01, #20
1b0cc     0F 15 52 F6 | 	abs	arg02, local01 wc
1b0d0     A1 07 00 FF 
1b0d4     40 14 16 FD | 	qdiv	arg02, ##1000000
1b0d8                 | ' 
1b0d8                 | '     ' use current frequency if none specified
1b0d8                 | ' 
1b0d8                 | '     if freq == 0 
1b0d8                 | '         freq := clkfreq 
1b0d8                 | ' 
1b0d8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1b0d8                 | ' 
1b0d8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1b0d8                 | '     if burst < 0
1b0d8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1b0d8     18 14 62 FD | 	getqx	arg02
1b0dc     0A 19 82 F6 | 	negc	arg04, arg02
1b0e0     03 18 66 F0 | 	shl	arg04, #3
1b0e4     84 18 86 F1 | 	sub	arg04, #132
1b0e8     04 18 46 F0 | 	shr	arg04, #4
1b0ec     04 18 66 F0 | 	shl	arg04, #4
1b0f0     00 18 56 F2 | 	cmps	arg04, #0 wc
1b0f4     0E FA 65 C6 |  if_b	neg	result1, #14
1b0f8     10 01 90 CD |  if_b	jmp	#LR__2163
1b0fc                 | ' 
1b0fc                 | '     ' compute the input delay
1b0fc                 | ' 
1b0fc                 | '     if delay <= 0
1b0fc     01 20 56 F2 | 	cmps	local02, #1 wc
1b100     10 00 90 3D |  if_ae	jmp	#LR__2160
1b104                 | '         delay := lookupDelay(freq)
1b104     0F 13 02 F6 | 	mov	arg01, local01
1b108     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1b10c     FD 20 02 F6 | 	mov	local02, result1
1b110     04 00 90 FD | 	jmp	#LR__2161
1b114                 | LR__2160
1b114                 | '     else
1b114                 | '         delay <#= $f ' limit to 15
1b114     0F 20 66 F3 | 	fles	local02, #15
1b118                 | LR__2161
1b118                 | ' 
1b118                 | '     ' create our lock
1b118                 | ' 
1b118                 | '     driverlock := LOCKNEW()  
1b118     00 FA 05 F6 | 	mov	result1, #0
1b11c     04 FA 61 FD | 	locknew	result1
1b120     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b124     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1b128                 | '     if driverlock == -1
1b128     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b12c     FF FF 7F FF 
1b130     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b134                 | '         return ERR_NO_LOCK
1b134     1A FA 65 A6 |  if_e	neg	result1, #26
1b138     D0 00 90 AD |  if_e	jmp	#LR__2163
1b13c                 | ' 
1b13c                 | '     ' patch in the proper data and HUB addresses to the startup structure
1b13c                 | ' 
1b13c                 | '     long[@startupData][0]:=clkfreq
1b13c     14 1E 06 FB | 	rdlong	local01, #20
1b140     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1b144     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1b148                 | ' '    long[@startupData][1]:=$1000_0000
1b148                 | '     long[@startupData][5]:=@deviceData
1b148     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b14c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b150     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1b154     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b158     14 14 06 F1 | 	add	arg02, #20
1b15c     0A 1F 62 FC | 	wrlong	local01, arg02
1b160                 | '     long[@startupData][6]:=@qosData
1b160     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1b164     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b168     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b16c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1b170     18 14 06 F1 | 	add	arg02, #24
1b174     0A 1F 62 FC | 	wrlong	local01, arg02
1b178                 | '     long[@startupData][7]:=$7FF00
1b178     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1b17c     1C 1E 06 F1 | 	add	local01, #28
1b180     FF 03 80 FF 
1b184     0F 01 6A FC | 	wrlong	##524032, local01
1b188                 | ' 
1b188                 | '     ' setup some default bank and QoS parameter values
1b188                 | ' 
1b188                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1b188     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1b18c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1b190     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1b194     10 18 66 F0 | 	shl	arg04, #16
1b198     0C 20 66 F0 | 	shl	local02, #12
1b19c     10 19 42 F5 | 	or	arg04, local02
1b1a0     18 18 46 F5 | 	or	arg04, #24
1b1a4     0C 15 02 F6 | 	mov	arg02, arg04
1b1a8     02 16 06 F6 | 	mov	arg03, #2
1b1ac     A0 00 A0 FD | 	call	#\builtin_longfill_
1b1b0                 | '     longfill(@qosData, $FFFF0000, 8)
1b1b0     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1b1b4     07 16 06 F6 | 	mov	arg03, #7
1b1b8     28 16 62 FD | 	setq	arg03
1b1bc     80 FF FF FF 
1b1c0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1b1c4                 | ' 
1b1c4                 | '     ' get the address of the PSRAM memory driver so we can start it
1b1c4                 | ' 
1b1c4                 | '     driverAddr:= driver.getDriverAddr()
1b1c4                 | '     return @driver_start
1b1c4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1b1c8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1b1cc     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1b1d0                 | ' 
1b1d0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1b1d0                 | ' 
1b1d0                 | '     if desiredcog < 0
1b1d0     00 22 56 F2 | 	cmps	local03, #0 wc
1b1d4                 | '         desiredcog := NEWCOG
1b1d4     10 22 06 C6 |  if_b	mov	local03, #16
1b1d8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1b1d8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1b1dc     11 25 02 F6 | 	mov	local04, local03
1b1e0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1b1e4     0A 25 F2 FC | 	coginit	local04, arg02 wc
1b1e8     01 24 66 C6 |  if_b	neg	local04, #1
1b1ec     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b1f0     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1b1f4                 | '     repeat until long[@startupData] == 0 
1b1f4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1b1f8                 | LR__2162
1b1f8     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1b1fc     F8 FF 9F 5D |  if_ne	jmp	#LR__2162
1b200                 | ' 
1b200                 | '     return drivercog
1b200     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1b204     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1b208     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b20c                 | LR__2163
1b20c     A7 F0 03 F6 | 	mov	ptra, fp
1b210     B2 00 A0 FD | 	call	#popregs_
1b214                 | _psram_spin2_startx_ret
1b214     2D 00 64 FD | 	ret
1b218                 | 
1b218                 | ' 
1b218                 | ' '..............................................................................
1b218                 | ' 
1b218                 | ' {{
1b218                 | ' }}
1b218                 | ' PUB stop() : i
1b218                 | _psram_spin2_stop
1b218     00 00 06 F6 | 	mov	_var01, #0
1b21c                 | '     if drivercog <> -1
1b21c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b220     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b224     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b228     FF FF 7F FF 
1b22c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1b230     70 00 90 AD |  if_e	jmp	#LR__2173
1b234                 | '         cogstop(drivercog) ' a rather brutal stop
1b234     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b238     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b23c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b240     03 12 62 FD | 	cogstop	arg01
1b244     97 26 48 FB | 	callpa	#(@LR__2172-@LR__2170)>>2,fcache_load_ptr_
1b248                 | '         repeat i from 0 to 7
1b248                 | LR__2170
1b248                 | '             if long[$7FF00][i*3] < 0
1b248     00 FB 01 F6 | 	mov	result1, _var01
1b24c     01 FA 65 F0 | 	shl	result1, #1
1b250     00 FB 01 F1 | 	add	result1, _var01
1b254     02 FA 65 F0 | 	shl	result1, #2
1b258     FF 03 00 FF 
1b25c     00 FB 05 F1 | 	add	result1, ##524032
1b260     FD FA 01 FB | 	rdlong	result1, result1
1b264     00 FA 55 F2 | 	cmps	result1, #0 wc
1b268     1C 00 90 3D |  if_ae	jmp	#LR__2171
1b26c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1b26c     00 FB 01 F6 | 	mov	result1, _var01
1b270     01 FA 65 F0 | 	shl	result1, #1
1b274     00 FB 01 F1 | 	add	result1, _var01
1b278     02 FA 65 F0 | 	shl	result1, #2
1b27c     FF 03 00 FF 
1b280     00 FB 05 F1 | 	add	result1, ##524032
1b284     FD 20 68 FC | 	wrlong	#16, result1
1b288                 | LR__2171
1b288     01 00 06 F1 | 	add	_var01, #1
1b28c     08 00 56 F2 | 	cmps	_var01, #8 wc
1b290     B4 FF 9F CD |  if_b	jmp	#LR__2170
1b294                 | LR__2172
1b294                 | '         drivercog := -1
1b294     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b298     FF FF FF FF 
1b29c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1b2a0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b2a4                 | LR__2173
1b2a4                 | '     if driverlock <> -1
1b2a4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b2a8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1b2ac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b2b0     FF FF 7F FF 
1b2b4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1b2b8                 | '         LOCKRET(driverlock)
1b2b8     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1b2bc     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1b2c0     05 12 62 5D |  if_ne	lockret	arg01
1b2c4                 | '         driverlock := -1
1b2c4     FF FF FF 5F 
1b2c8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1b2cc     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1b2d0     00 FB 01 F6 | 	mov	result1, _var01
1b2d4                 | _psram_spin2_stop_ret
1b2d4     2D 00 64 FD | 	ret
1b2d8                 | 
1b2d8                 | ' 
1b2d8                 | ' '..............................................................................
1b2d8                 | ' 
1b2d8                 | ' {{
1b2d8                 | ' }}
1b2d8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1b2d8                 | _psram_spin2_read1
1b2d8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b2d8                 | '     if drivercog == -1 ' driver must be running
1b2d8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b2dc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b2e0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b2e4     FF FF 7F FF 
1b2e8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b2ec                 | '         return ERR_INACTIVE
1b2ec     0F FA 65 A6 |  if_e	neg	result1, #15
1b2f0     7C 00 90 AD |  if_e	jmp	#LR__2181
1b2f4                 | '     if count == 0 ' don't even bother reading
1b2f4     00 16 0E F2 | 	cmp	arg03, #0 wz
1b2f8                 | '         return 0
1b2f8     00 FA 05 A6 |  if_e	mov	result1, #0
1b2fc     70 00 90 AD |  if_e	jmp	#LR__2181
1b300                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b300     00 FA 05 F6 | 	mov	result1, #0
1b304     01 FA 61 FD | 	cogid	result1
1b308     FD 00 02 F6 | 	mov	_var01, result1
1b30c     01 00 66 F0 | 	shl	_var01, #1
1b310     FD 00 02 F1 | 	add	_var01, result1
1b314     02 00 66 F0 | 	shl	_var01, #2
1b318     FF 03 00 FF 
1b31c     00 03 06 F6 | 	mov	_var02, ##524032
1b320     00 03 02 F1 | 	add	_var02, _var01
1b324                 | '     if long[mailbox] < 0
1b324     01 01 02 FB | 	rdlong	_var01, _var02
1b328     00 00 56 F2 | 	cmps	_var01, #0 wc
1b32c                 | '         return ERR_MAILBOX_BUSY
1b32c     1C FA 65 C6 |  if_b	neg	result1, #28
1b330     3C 00 90 CD |  if_b	jmp	#LR__2181
1b334                 | '     long[mailbox][2] := count
1b334     08 02 06 F1 | 	add	_var02, #8
1b338     01 17 62 FC | 	wrlong	arg03, _var02
1b33c                 | '     long[mailbox][1] := dstHubAddr
1b33c     04 02 86 F1 | 	sub	_var02, #4
1b340     01 13 62 FC | 	wrlong	arg01, _var02
1b344     04 02 86 F1 | 	sub	_var02, #4
1b348                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1b348     0A 05 02 F6 | 	mov	_var03, arg02
1b34c     D9 04 06 F4 | 	bitl	_var03, #217
1b350     00 00 58 FF 
1b354     00 00 06 F6 | 	mov	_var01, ##-1342177280
1b358     02 01 02 F1 | 	add	_var01, _var03
1b35c     01 01 62 FC | 	wrlong	_var01, _var02
1b360                 | '     repeat
1b360                 | LR__2180
1b360                 | '         result := long[mailbox]    
1b360     01 05 02 FB | 	rdlong	_var03, _var02
1b364     00 04 56 F2 | 	cmps	_var03, #0 wc
1b368     F4 FF 9F CD |  if_b	jmp	#LR__2180
1b36c                 | '     while result < 0   
1b36c                 | '     return -result                       'return success or error
1b36c     02 FB 61 F6 | 	neg	result1, _var03
1b370                 | LR__2181
1b370                 | _psram_spin2_read1_ret
1b370     2D 00 64 FD | 	ret
1b374                 | 
1b374                 | ' 
1b374                 | ' '..............................................................................
1b374                 | ' 
1b374                 | ' {{
1b374                 | ' }}
1b374                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1b374                 | _psram_spin2_write
1b374                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1b374                 | '     if drivercog == -1 ' driver must be running
1b374     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b378     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1b37c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b380     FF FF 7F FF 
1b384     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1b388                 | '         return ERR_INACTIVE
1b388     0F FA 65 A6 |  if_e	neg	result1, #15
1b38c     7C 00 90 AD |  if_e	jmp	#LR__2191
1b390                 | '     if count == 0 ' don't even bother writing
1b390     00 16 0E F2 | 	cmp	arg03, #0 wz
1b394                 | '         return 0
1b394     00 FA 05 A6 |  if_e	mov	result1, #0
1b398     70 00 90 AD |  if_e	jmp	#LR__2191
1b39c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1b39c     00 FA 05 F6 | 	mov	result1, #0
1b3a0     01 FA 61 FD | 	cogid	result1
1b3a4     FD 00 02 F6 | 	mov	_var01, result1
1b3a8     01 00 66 F0 | 	shl	_var01, #1
1b3ac     FD 00 02 F1 | 	add	_var01, result1
1b3b0     02 00 66 F0 | 	shl	_var01, #2
1b3b4     FF 03 00 FF 
1b3b8     00 03 06 F6 | 	mov	_var02, ##524032
1b3bc     00 03 02 F1 | 	add	_var02, _var01
1b3c0                 | '     if long[mailbox] < 0
1b3c0     01 01 02 FB | 	rdlong	_var01, _var02
1b3c4     00 00 56 F2 | 	cmps	_var01, #0 wc
1b3c8                 | '         return ERR_MAILBOX_BUSY
1b3c8     1C FA 65 C6 |  if_b	neg	result1, #28
1b3cc     3C 00 90 CD |  if_b	jmp	#LR__2191
1b3d0                 | '     long[mailbox][2] := count
1b3d0     08 02 06 F1 | 	add	_var02, #8
1b3d4     01 17 62 FC | 	wrlong	arg03, _var02
1b3d8                 | '     long[mailbox][1] := srcHubAddr
1b3d8     04 02 86 F1 | 	sub	_var02, #4
1b3dc     01 13 62 FC | 	wrlong	arg01, _var02
1b3e0     04 02 86 F1 | 	sub	_var02, #4
1b3e4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1b3e4     0A 05 02 F6 | 	mov	_var03, arg02
1b3e8     D9 04 06 F4 | 	bitl	_var03, #217
1b3ec     00 00 78 FF 
1b3f0     00 00 06 F6 | 	mov	_var01, ##-268435456
1b3f4     02 01 02 F1 | 	add	_var01, _var03
1b3f8     01 01 62 FC | 	wrlong	_var01, _var02
1b3fc                 | '     repeat
1b3fc                 | LR__2190
1b3fc                 | '         result := long[mailbox]    
1b3fc     01 05 02 FB | 	rdlong	_var03, _var02
1b400     00 04 56 F2 | 	cmps	_var03, #0 wc
1b404     F4 FF 9F CD |  if_b	jmp	#LR__2190
1b408                 | '     while result < 0   
1b408                 | '     return -result                       'return success or error
1b408     02 FB 61 F6 | 	neg	result1, _var03
1b40c                 | LR__2191
1b40c                 | _psram_spin2_write_ret
1b40c     2D 00 64 FD | 	ret
1b410                 | 
1b410                 | ' 
1b410                 | ' ' generalized fill
1b410                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1b410                 | _psram_spin2_fill
1b410     09 01 02 F6 | 	mov	_var01, arg01
1b414     0A 03 02 F6 | 	mov	_var02, arg02
1b418     0B 05 02 F6 | 	mov	_var03, arg03
1b41c     0D 07 02 F6 | 	mov	_var04, arg05
1b420                 | '     case datasize 
1b420     01 06 86 F1 | 	sub	_var04, #1
1b424     04 06 26 F3 | 	fle	_var04, #4
1b428     30 06 62 FD | 	jmprel	_var04
1b42c                 | LR__2200
1b42c     10 00 90 FD | 	jmp	#LR__2201
1b430     18 00 90 FD | 	jmp	#LR__2202
1b434     2C 00 90 FD | 	jmp	#LR__2204
1b438     1C 00 90 FD | 	jmp	#LR__2203
1b43c     24 00 90 FD | 	jmp	#LR__2204
1b440                 | LR__2201
1b440                 | '         1: req := driver.R_WRITEBYTE
1b440     00 00 60 FF 
1b444     00 08 06 F6 | 	mov	_var05, ##-1073741824
1b448     20 00 90 FD | 	jmp	#LR__2205
1b44c                 | LR__2202
1b44c                 | '         2: req := driver.R_WRITEWORD
1b44c     00 00 68 FF 
1b450     00 08 06 F6 | 	mov	_var05, ##-805306368
1b454     14 00 90 FD | 	jmp	#LR__2205
1b458                 | LR__2203
1b458                 | '         4: req := driver.R_WRITELONG
1b458     00 00 70 FF 
1b45c     00 08 06 F6 | 	mov	_var05, ##-536870912
1b460     08 00 90 FD | 	jmp	#LR__2205
1b464                 | LR__2204
1b464                 | '         other : return ERR_INVALID
1b464     06 FA 65 F6 | 	neg	result1, #6
1b468     94 00 90 FD | 	jmp	#LR__2207
1b46c                 | LR__2205
1b46c                 | '     if count == 0   ' nothing to do
1b46c     00 04 0E F2 | 	cmp	_var03, #0 wz
1b470                 | '         return 0
1b470     00 FA 05 A6 |  if_e	mov	result1, #0
1b474     88 00 90 AD |  if_e	jmp	#LR__2207
1b478                 | '     if drivercog == -1
1b478     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b47c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1b480     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b484     FF FF 7F FF 
1b488     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1b48c                 | '         return ERR_INACTIVE
1b48c     0F FA 65 A6 |  if_e	neg	result1, #15
1b490     6C 00 90 AD |  if_e	jmp	#LR__2207
1b494                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1b494     00 FA 05 F6 | 	mov	result1, #0
1b498     01 FA 61 FD | 	cogid	result1
1b49c     FD 06 02 F6 | 	mov	_var04, result1
1b4a0     01 06 66 F0 | 	shl	_var04, #1
1b4a4     FD 06 02 F1 | 	add	_var04, result1
1b4a8     02 06 66 F0 | 	shl	_var04, #2
1b4ac     FF 03 00 FF 
1b4b0     00 0B 06 F6 | 	mov	_var06, ##524032
1b4b4     03 0B 02 F1 | 	add	_var06, _var04
1b4b8                 | '     if long[mailbox] < 0
1b4b8     05 07 02 FB | 	rdlong	_var04, _var06
1b4bc     00 06 56 F2 | 	cmps	_var04, #0 wc
1b4c0                 | '         return ERR_MAILBOX_BUSY
1b4c0     1C FA 65 C6 |  if_b	neg	result1, #28
1b4c4     38 00 90 CD |  if_b	jmp	#LR__2207
1b4c8                 | '     long[mailbox][2] := count
1b4c8     08 0A 06 F1 | 	add	_var06, #8
1b4cc     05 05 62 FC | 	wrlong	_var03, _var06
1b4d0                 | '     long[mailbox][1] := pattern
1b4d0     04 0A 86 F1 | 	sub	_var06, #4
1b4d4     05 03 62 FC | 	wrlong	_var02, _var06
1b4d8     04 0A 86 F1 | 	sub	_var06, #4
1b4dc                 | '     long[mailbox] := req + (addr & $1ffffff)
1b4dc     04 0D 02 F6 | 	mov	_var07, _var05
1b4e0     00 0F 02 F6 | 	mov	_var08, _var01
1b4e4     D9 0E 06 F4 | 	bitl	_var08, #217
1b4e8     07 0D 02 F1 | 	add	_var07, _var08
1b4ec     05 0D 62 FC | 	wrlong	_var07, _var06
1b4f0                 | '     repeat
1b4f0                 | LR__2206
1b4f0                 | '         r := long[mailbox]
1b4f0     05 0F 02 FB | 	rdlong	_var08, _var06
1b4f4     00 0E 56 F2 | 	cmps	_var08, #0 wc
1b4f8     F4 FF 9F CD |  if_b	jmp	#LR__2206
1b4fc                 | '     while r < 0
1b4fc                 | '     return -r                  ' return 0 for success or negated error code
1b4fc     07 FB 61 F6 | 	neg	result1, _var08
1b500                 | LR__2207
1b500                 | _psram_spin2_fill_ret
1b500     2D 00 64 FD | 	ret
1b504                 | 
1b504                 | ' 
1b504                 | ' '..............................................................................
1b504                 | ' 
1b504                 | ' {{
1b504                 | ' }}
1b504                 | ' PUB setQos(cog, qos) : result | mailbox
1b504                 | _psram_spin2_setQos
1b504     09 01 02 F6 | 	mov	_var01, arg01
1b508                 | '     if drivercog == -1 ' driver must be running
1b508     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1b50c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1b510     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1b514     FF FF 7F FF 
1b518     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1b51c                 | '         return ERR_INACTIVE
1b51c     0F FA 65 A6 |  if_e	neg	result1, #15
1b520     9C 00 90 AD |  if_e	jmp	#LR__2214
1b524                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1b524     00 00 56 F2 | 	cmps	_var01, #0 wc
1b528     08 00 90 CD |  if_b	jmp	#LR__2210
1b52c     08 00 56 F2 | 	cmps	_var01, #8 wc
1b530     08 00 90 CD |  if_b	jmp	#LR__2211
1b534                 | LR__2210
1b534                 | '         return ERR_INVALID
1b534     06 FA 65 F6 | 	neg	result1, #6
1b538     84 00 90 FD | 	jmp	#LR__2214
1b53c                 | LR__2211
1b53c                 | '     long[@qosData][cog] := qos & !$1ff
1b53c     FF 15 26 F5 | 	andn	arg02, #511
1b540     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1b544     02 00 66 F0 | 	shl	_var01, #2
1b548     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1b54c     00 15 62 FC | 	wrlong	arg02, _var01
1b550                 | '     mailbox := $7FF00 + drivercog*12
1b550     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1b554     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1b558     02 07 02 F6 | 	mov	_var04, _var03
1b55c     01 06 66 F0 | 	shl	_var04, #1
1b560     02 07 02 F1 | 	add	_var04, _var03
1b564     02 06 66 F0 | 	shl	_var04, #2
1b568     FF 03 00 FF 
1b56c     00 09 06 F6 | 	mov	_var05, ##524032
1b570     03 09 02 F1 | 	add	_var05, _var04
1b574                 | '     repeat until LOCKTRY(driverlock)
1b574     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1b578                 | LR__2212
1b578     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b57c     06 12 72 FD | 	locktry	arg01 wc
1b580     F4 FF 9F 3D |  if_ae	jmp	#LR__2212
1b584     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b588                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1b588     00 06 06 F6 | 	mov	_var04, #0
1b58c     01 06 62 FD | 	cogid	_var04
1b590     00 00 78 FF 
1b594     00 02 06 F6 | 	mov	_var02, ##-268435456
1b598     03 03 02 F1 | 	add	_var02, _var04
1b59c     04 03 62 FC | 	wrlong	_var02, _var05
1b5a0                 | '     repeat while long[mailbox] < 0
1b5a0                 | LR__2213
1b5a0     04 03 02 FB | 	rdlong	_var02, _var05
1b5a4     00 02 56 F2 | 	cmps	_var02, #0 wc
1b5a8     F4 FF 9F CD |  if_b	jmp	#LR__2213
1b5ac                 | '     LOCKREL(driverlock)
1b5ac     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1b5b0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1b5b4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1b5b8     07 12 72 FD | 	lockrel	arg01 wc
1b5bc     00 FA 05 F6 | 	mov	result1, #0
1b5c0                 | LR__2214
1b5c0                 | _psram_spin2_setQos_ret
1b5c0     2D 00 64 FD | 	ret
1b5c4                 | 
1b5c4                 | ' 
1b5c4                 | ' '..............................................................................
1b5c4                 | ' 
1b5c4                 | ' {{
1b5c4                 | ' }}
1b5c4                 | ' PRI lookupDelay(freq) : delay | profile
1b5c4                 | _psram_spin2_lookupDelay
1b5c4                 | '     profile := @delayTable
1b5c4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1b5c8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1b5cc                 | '     delay := long[profile][0]
1b5cc     00 03 02 FB | 	rdlong	_var02, _var01
1b5d0                 | '     repeat while long[profile][1] 
1b5d0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1b5d4     97 16 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
1b5d8                 | LR__2220
1b5d8     04 00 06 F1 | 	add	_var01, #4
1b5dc     00 FB 09 FB | 	rdlong	result1, _var01 wz
1b5e0     04 00 86 F1 | 	sub	_var01, #4
1b5e4     1C 00 90 AD |  if_e	jmp	#LR__2222
1b5e8                 | '         if freq +< long[profile][1] 
1b5e8     04 00 06 F1 | 	add	_var01, #4
1b5ec     00 FB 01 FB | 	rdlong	result1, _var01
1b5f0     04 00 86 F1 | 	sub	_var01, #4
1b5f4     FD 12 12 F2 | 	cmp	arg01, result1 wc
1b5f8                 | '             quit
1b5f8                 | '         profile += 4
1b5f8     04 00 06 31 |  if_ae	add	_var01, #4
1b5fc                 | '         delay++
1b5fc     01 02 06 31 |  if_ae	add	_var02, #1
1b600     D4 FF 9F 3D |  if_ae	jmp	#LR__2220
1b604                 | LR__2221
1b604                 | LR__2222
1b604     01 FB 01 F6 | 	mov	result1, _var02
1b608                 | _psram_spin2_lookupDelay_ret
1b608     2D 00 64 FD | 	ret
1b60c                 | 
1b60c                 | ' 
1b60c                 | ' PUB start() : r
1b60c                 | _usbnew_spin2_start
1b60c     00 00 06 F6 | 	mov	_var01, #0
1b610                 | '   ifnot driver_cog
1b610     15 00 00 FF 
1b614     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1b618     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1b61c     15 00 00 FF 
1b620     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1b624     38 00 90 5D |  if_ne	jmp	#LR__2230
1b628                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1b628     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1b62c     10 00 06 F6 | 	mov	_var01, #16
1b630     00 16 06 F6 | 	mov	arg03, #0
1b634     28 16 62 FD | 	setq	arg03
1b638     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1b63c     01 00 66 C6 |  if_b	neg	_var01, #1
1b640                 | '     if r >= 0
1b640     00 00 56 F2 | 	cmps	_var01, #0 wc
1b644                 | '       driver_cog := r+1
1b644     00 03 02 36 |  if_ae	mov	_var02, _var01
1b648     01 02 06 31 |  if_ae	add	_var02, #1
1b64c     15 00 00 3F 
1b650     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1b654     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1b658     15 00 00 3F 
1b65c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1b660                 | LR__2230
1b660     00 FB 01 F6 | 	mov	result1, _var01
1b664                 | _usbnew_spin2_start_ret
1b664     2D 00 64 FD | 	ret
1b668                 | 
1b668                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1b668                 | ' 
1b668                 | ' '' Return key event from buffer if there is one
1b668                 | ' PUB get_key() : r | tail
1b668                 | _usbnew_spin2_get_key
1b668                 | '   tail := keyq_tail
1b668     0F 00 00 FF 
1b66c     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1b670     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1b674                 | '   if keyq_head == tail
1b674     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1b678     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1b67c     0F 00 00 FF 
1b680     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1b684     00 03 0A F2 | 	cmp	_var02, _var01 wz
1b688                 | '     return 0 ' No event
1b688     00 FA 05 A6 |  if_e	mov	result1, #0
1b68c     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1b690                 | '   r := keyq_data[tail]
1b690     00 03 02 F6 | 	mov	_var02, _var01
1b694     02 02 66 F0 | 	shl	_var02, #2
1b698     0F 00 00 FF 
1b69c     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1b6a0     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1b6a4     01 FB 01 FB | 	rdlong	result1, _var02
1b6a8                 | '   if ++tail == KEYQUEUE_SIZE
1b6a8     01 00 06 F1 | 	add	_var01, #1
1b6ac     80 00 0E F2 | 	cmp	_var01, #128 wz
1b6b0                 | '     tail := 0
1b6b0     00 00 06 A6 |  if_e	mov	_var01, #0
1b6b4                 | '   keyq_tail := tail
1b6b4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1b6b8     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1b6bc     0F 00 00 FF 
1b6c0     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1b6c4                 | _usbnew_spin2_get_key_ret
1b6c4     2D 00 64 FD | 	ret
1b6c8                 | 
1b6c8                 | ' 
1b6c8                 | ' '' Emulate mouse movement
1b6c8                 | ' PUB mouse_move(x,y)
1b6c8                 | _usbnew_spin2_mouse_move
1b6c8     02 4A 05 F6 | 	mov	COUNT_, #2
1b6cc     A8 00 A0 FD | 	call	#pushregs_
1b6d0     09 1F 02 F6 | 	mov	local01, arg01
1b6d4     0A 21 02 F6 | 	mov	local02, arg02
1b6d8                 | '   mouse_lock := 1
1b6d8     14 00 00 FF 
1b6dc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1b6e0     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1b6e4     14 00 00 FF 
1b6e8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1b6ec                 | '   waitus(2) ' hope driver is now done
1b6ec     02 12 06 F6 | 	mov	arg01, #2
1b6f0     AC 0A B0 FD | 	call	#__system___waitus
1b6f4                 | '   mouse_xacc := x
1b6f4     14 00 00 FF 
1b6f8     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1b6fc     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1b700                 | '   mouse_yacc := y
1b700     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1b704     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1b708                 | '   if mouse_outptr
1b708     04 00 00 FF 
1b70c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1b710     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1b714     0F 00 00 FF 
1b718     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1b71c     24 00 90 AD |  if_e	jmp	#LR__2240
1b720                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1b720     10 20 66 F0 | 	shl	local02, #16
1b724     0F 1F 32 F9 | 	getword	local01, local01, #0
1b728     0F 21 42 F5 | 	or	local02, local01
1b72c     0F 00 00 FF 
1b730     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1b734     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1b738     0F 00 00 FF 
1b73c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1b740     0F 21 62 FC | 	wrlong	local02, local01
1b744                 | LR__2240
1b744                 | '   mouse_lock := 0
1b744     14 00 00 FF 
1b748     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1b74c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1b750     14 00 00 FF 
1b754     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1b758     A7 F0 03 F6 | 	mov	ptra, fp
1b75c     B2 00 A0 FD | 	call	#popregs_
1b760                 | _usbnew_spin2_mouse_move_ret
1b760     2D 00 64 FD | 	ret
1b764                 | 
1b764                 | '     '' Set HAVE_HIDPAD to enable.
1b764                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1b764                 | ' 
1b764                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1b764                 | ' PUB hidpad_id(dev) : r
1b764                 | _usbnew_spin2_hidpad_id
1b764                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1b764     13 00 00 FF 
1b768     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1b76c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1b770     09 01 02 F6 | 	mov	_var01, arg01
1b774     03 00 66 F0 | 	shl	_var01, #3
1b778     09 01 82 F1 | 	sub	_var01, arg01
1b77c     02 00 66 F0 | 	shl	_var01, #2
1b780     00 FB 01 F1 | 	add	result1, _var01
1b784     FD FA 01 FB | 	rdlong	result1, result1
1b788     13 00 00 FF 
1b78c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1b790                 | _usbnew_spin2_hidpad_id_ret
1b790     2D 00 64 FD | 	ret
1b794                 | 
1b794                 | ' 
1b794                 | ' '' Get all button states for a device
1b794                 | ' PUB hidpad_buttons(dev) : r 
1b794                 | _usbnew_spin2_hidpad_buttons
1b794                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1b794     13 00 00 FF 
1b798     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1b79c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1b7a0     09 01 02 F6 | 	mov	_var01, arg01
1b7a4     03 00 66 F0 | 	shl	_var01, #3
1b7a8     09 01 82 F1 | 	sub	_var01, arg01
1b7ac     02 00 66 F0 | 	shl	_var01, #2
1b7b0     00 FB 01 F1 | 	add	result1, _var01
1b7b4     14 FA 05 F1 | 	add	result1, #20
1b7b8     FD FA 01 FB | 	rdlong	result1, result1
1b7bc     13 00 00 FF 
1b7c0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1b7c4                 | _usbnew_spin2_hidpad_buttons_ret
1b7c4     2D 00 64 FD | 	ret
1b7c8                 | 
1b7c8                 | ' 
1b7c8                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1b7c8                 | ' PUB hidpad_axis(dev,axnum) : r
1b7c8                 | _usbnew_spin2_hidpad_axis
1b7c8                 | '   if axnum +>= 6
1b7c8     06 14 16 F2 | 	cmp	arg02, #6 wc
1b7cc                 | '     return 0
1b7cc     00 FA 05 36 |  if_ae	mov	result1, #0
1b7d0     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1b7d4                 | '   else 
1b7d4                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1b7d4     13 00 00 FF 
1b7d8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1b7dc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1b7e0     09 01 02 F6 | 	mov	_var01, arg01
1b7e4     03 00 66 F0 | 	shl	_var01, #3
1b7e8     09 01 82 F1 | 	sub	_var01, arg01
1b7ec     02 00 66 F0 | 	shl	_var01, #2
1b7f0     00 FB 01 F1 | 	add	result1, _var01
1b7f4     04 00 06 F6 | 	mov	_var01, #4
1b7f8     0A 01 02 F1 | 	add	_var01, arg02
1b7fc     01 00 66 F0 | 	shl	_var01, #1
1b800     FD 00 02 F1 | 	add	_var01, result1
1b804     00 FB E1 FA | 	rdword	result1, _var01
1b808     0F FA 65 F7 | 	signx	result1, #15
1b80c     13 00 00 FF 
1b810     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1b814                 | _usbnew_spin2_hidpad_axis_ret
1b814     2D 00 64 FD | 	ret
1b818                 | 
1b818                 | ' 
1b818                 | ' 
1b818                 | ' '--------------------------------------------------------------
1b818                 | ' '---------- Init the variables, start the cog. ----------------
1b818                 | ' '--------------------------------------------------------------
1b818                 | ' 
1b818                 | ' pub start(mbox,scope,cache) :cog,base | iii
1b818                 | _audio096_spin2_start
1b818     04 4A 05 F6 | 	mov	COUNT_, #4
1b81c     A8 00 A0 FD | 	call	#pushregs_
1b820     09 1F 02 F6 | 	mov	local01, arg01
1b824                 | ' 
1b824                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1b824                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1b824                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1b824                 | ' 
1b824                 | ' mailboxaddr:=mbox 
1b824     F2 1E 62 FC | 	wrlong	local01, objptr
1b828                 | ' scope_ptr:=scope
1b828     04 E4 05 F1 | 	add	objptr, #4
1b82c     F2 14 62 FC | 	wrlong	arg02, objptr
1b830                 | ' cache_ptr:=cache
1b830     04 E4 05 F1 | 	add	objptr, #4
1b834     F2 16 62 FC | 	wrlong	arg03, objptr
1b838                 | ' base:=@channel1[0]
1b838     04 E4 05 F1 | 	add	objptr, #4
1b83c     F2 20 02 F6 | 	mov	local02, objptr
1b840                 | ' 
1b840                 | ' repeat iii from 0 to 7
1b840     00 22 06 F6 | 	mov	local03, #0
1b844     02 00 00 FF 
1b848     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1b84c     0C E4 85 F1 | 	sub	objptr, #12
1b850     97 B0 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
1b854                 | LR__2250
1b854                 | '   long[base+64*iii]:=0
1b854     10 1F 02 F6 | 	mov	local01, local02
1b858     11 FD 01 F6 | 	mov	result2, local03
1b85c     06 FC 65 F0 | 	shl	result2, #6
1b860     FE 1E 02 F1 | 	add	local01, result2
1b864     0F 01 68 FC | 	wrlong	#0, local01
1b868                 | '   long[base+64*iii+4]:=0
1b868     10 1F 02 F6 | 	mov	local01, local02
1b86c     11 FD 01 F6 | 	mov	result2, local03
1b870     06 FC 65 F0 | 	shl	result2, #6
1b874     FE 1E 02 F1 | 	add	local01, result2
1b878     04 1E 06 F1 | 	add	local01, #4
1b87c     0F 01 68 FC | 	wrlong	#0, local01
1b880                 | '   long[base+64*iii+12]:=0
1b880     10 25 02 F6 | 	mov	local04, local02
1b884     11 1F 02 F6 | 	mov	local01, local03
1b888     06 1E 66 F0 | 	shl	local01, #6
1b88c     0F 25 02 F1 | 	add	local04, local01
1b890     0C 24 06 F1 | 	add	local04, #12
1b894     12 01 68 FC | 	wrlong	#0, local04
1b898                 | '   long[base+64*iii+16]:=2 
1b898     10 25 02 F6 | 	mov	local04, local02
1b89c     11 1F 02 F6 | 	mov	local01, local03
1b8a0     06 1E 66 F0 | 	shl	local01, #6
1b8a4     0F 25 02 F1 | 	add	local04, local01
1b8a8     10 24 06 F1 | 	add	local04, #16
1b8ac     12 05 68 FC | 	wrlong	#2, local04
1b8b0                 | '   word[base+64*iii+20]:=0
1b8b0     10 25 02 F6 | 	mov	local04, local02
1b8b4     11 1F 02 F6 | 	mov	local01, local03
1b8b8     06 1E 66 F0 | 	shl	local01, #6
1b8bc     0F 25 02 F1 | 	add	local04, local01
1b8c0     14 24 06 F1 | 	add	local04, #20
1b8c4     12 01 58 FC | 	wrword	#0, local04
1b8c8                 | '   word[base+64*iii+22]:=8192
1b8c8     10 25 02 F6 | 	mov	local04, local02
1b8cc     11 1F 02 F6 | 	mov	local01, local03
1b8d0     06 1E 66 F0 | 	shl	local01, #6
1b8d4     0F 25 02 F1 | 	add	local04, local01
1b8d8     16 24 06 F1 | 	add	local04, #22
1b8dc     10 00 80 FF 
1b8e0     12 01 58 FC | 	wrword	##8192, local04
1b8e4                 | '   word[base+64*iii+24]:=4000+2*iii
1b8e4     11 25 02 F6 | 	mov	local04, local03
1b8e8     01 24 66 F0 | 	shl	local04, #1
1b8ec     07 00 00 FF 
1b8f0     A0 1F 06 F6 | 	mov	local01, ##4000
1b8f4     12 1F 02 F1 | 	add	local01, local04
1b8f8     10 25 02 F6 | 	mov	local04, local02
1b8fc     11 FD 01 F6 | 	mov	result2, local03
1b900     06 FC 65 F0 | 	shl	result2, #6
1b904     FE 24 02 F1 | 	add	local04, result2
1b908     18 24 06 F1 | 	add	local04, #24
1b90c     12 1F 52 FC | 	wrword	local01, local04
1b910                 | '   word[base+64*iii+26]:=2
1b910     10 25 02 F6 | 	mov	local04, local02
1b914     11 1F 02 F6 | 	mov	local01, local03
1b918     06 1E 66 F0 | 	shl	local01, #6
1b91c     0F 25 02 F1 | 	add	local04, local01
1b920     1A 24 06 F1 | 	add	local04, #26
1b924     12 05 58 FC | 	wrword	#2, local04
1b928                 | '   long [base+64*iii+8]:=@null | $C0000000
1b928     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1b92c     3E 1E 26 F4 | 	bith	local01, #62
1b930     10 25 02 F6 | 	mov	local04, local02
1b934     11 17 02 F6 | 	mov	arg03, local03
1b938     06 16 66 F0 | 	shl	arg03, #6
1b93c     0B 25 02 F1 | 	add	local04, arg03
1b940     08 24 06 F1 | 	add	local04, #8
1b944     12 1F 62 FC | 	wrlong	local01, local04
1b948                 | '   long[base+64*iii+32]:=0
1b948     10 25 02 F6 | 	mov	local04, local02
1b94c     11 1F 02 F6 | 	mov	local01, local03
1b950     06 1E 66 F0 | 	shl	local01, #6
1b954     0F 25 02 F1 | 	add	local04, local01
1b958     20 24 06 F1 | 	add	local04, #32
1b95c     12 01 68 FC | 	wrlong	#0, local04
1b960                 | '   long[base+64*iii+36]:=0
1b960     10 25 02 F6 | 	mov	local04, local02
1b964     11 1F 02 F6 | 	mov	local01, local03
1b968     06 1E 66 F0 | 	shl	local01, #6
1b96c     0F 25 02 F1 | 	add	local04, local01
1b970     24 24 06 F1 | 	add	local04, #36
1b974     12 01 68 FC | 	wrlong	#0, local04
1b978                 | '   long[base+64*iii+40]:=0
1b978     10 25 02 F6 | 	mov	local04, local02
1b97c     11 1F 02 F6 | 	mov	local01, local03
1b980     06 1E 66 F0 | 	shl	local01, #6
1b984     0F 25 02 F1 | 	add	local04, local01
1b988     28 24 06 F1 | 	add	local04, #40
1b98c     12 01 68 FC | 	wrlong	#0, local04
1b990                 | '   long[base+64*iii+44]:=0
1b990     10 25 02 F6 | 	mov	local04, local02
1b994     11 1F 02 F6 | 	mov	local01, local03
1b998     06 1E 66 F0 | 	shl	local01, #6
1b99c     0F 25 02 F1 | 	add	local04, local01
1b9a0     2C 24 06 F1 | 	add	local04, #44
1b9a4     12 01 68 FC | 	wrlong	#0, local04
1b9a8     01 22 06 F1 | 	add	local03, #1
1b9ac     08 22 56 F2 | 	cmps	local03, #8 wc
1b9b0     A0 FE 9F CD |  if_b	jmp	#LR__2250
1b9b4                 | LR__2251
1b9b4     02 00 00 FF 
1b9b8     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1b9bc                 | '   
1b9bc                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1b9bc     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1b9c0     F2 16 02 F6 | 	mov	arg03, objptr
1b9c4     10 24 06 F6 | 	mov	local04, #16
1b9c8     28 16 62 FD | 	setq	arg03
1b9cc     0A 25 F2 FC | 	coginit	local04, arg02 wc
1b9d0     01 24 66 C6 |  if_b	neg	local04, #1
1b9d4                 | ' waitms(100)
1b9d4     64 12 06 F6 | 	mov	arg01, #100
1b9d8     58 07 B0 FD | 	call	#__system___waitms
1b9dc                 | ' return cog,base
1b9dc     10 FD 01 F6 | 	mov	result2, local02
1b9e0     12 FB 01 F6 | 	mov	result1, local04
1b9e4     A7 F0 03 F6 | 	mov	ptra, fp
1b9e8     B2 00 A0 FD | 	call	#popregs_
1b9ec                 | _audio096_spin2_start_ret
1b9ec     2D 00 64 FD | 	ret
1b9f0                 | 
1b9f0                 | ' 
1b9f0                 | ' ' a simple play procedure to not poke everything. 
1b9f0                 | ' 
1b9f0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1b9f0                 | _audio096_spin2_play
1b9f0     0C E4 05 F1 | 	add	objptr, #12
1b9f4     F2 00 02 F6 | 	mov	_var01, objptr
1b9f8     06 12 66 F0 | 	shl	arg01, #6
1b9fc     09 01 02 F1 | 	add	_var01, arg01
1ba00     00 13 02 F6 | 	mov	arg01, _var01
1ba04     0C 12 06 F1 | 	add	arg01, #12
1ba08     09 1B 62 FC | 	wrlong	arg05, arg01
1ba0c     00 1C 56 F2 | 	cmps	arg06, #0 wc
1ba10     00 13 02 36 |  if_ae	mov	arg01, _var01
1ba14     10 12 06 31 |  if_ae	add	arg01, #16
1ba18     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1ba1c     02 1A 06 C1 |  if_b	add	arg05, #2
1ba20     00 13 02 C6 |  if_b	mov	arg01, _var01
1ba24     10 12 06 C1 |  if_b	add	arg01, #16
1ba28     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1ba2c     0B 13 52 F6 | 	abs	arg01, arg03 wc
1ba30     0B 0A 80 FF 
1ba34     09 6D 18 FD | 	qdiv	##1316406, arg01
1ba38                 | ' 
1ba38                 | ' base2:=@channel1[0]+64*channel
1ba38                 | ' 
1ba38                 | ' 
1ba38                 | ' long[base2+12]:= len
1ba38                 | ' if loop >=0 
1ba38                 | '   long[base2+16]:= loop
1ba38     0C E4 85 F1 | 	sub	objptr, #12
1ba3c                 | ' else
1ba3c                 | '   long[base2+16]:= len+2
1ba3c                 | ' word[base2+20]:=vol
1ba3c     00 13 02 F6 | 	mov	arg01, _var01
1ba40     14 12 06 F1 | 	add	arg01, #20
1ba44     09 19 52 FC | 	wrword	arg04, arg01
1ba48                 | ' word[base2+24]:= 1316406/splfreq 
1ba48     00 19 02 F6 | 	mov	arg04, _var01
1ba4c     18 18 06 F1 | 	add	arg04, #24
1ba50                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1ba50                 | ' long[base2+28]:=$40000000
1ba50                 | ' long[base2+8]:=sample+$C0000000 
1ba50     00 00 60 FF 
1ba54     00 14 06 F1 | 	add	arg02, ##-1073741824
1ba58     18 12 62 FD | 	getqx	arg01
1ba5c     09 13 82 F6 | 	negc	arg01, arg01
1ba60     0C 13 52 FC | 	wrword	arg01, arg04
1ba64     00 13 02 F6 | 	mov	arg01, _var01
1ba68     1A 12 06 F1 | 	add	arg01, #26
1ba6c     09 01 5A FC | 	wrword	#256, arg01
1ba70     00 13 02 F6 | 	mov	arg01, _var01
1ba74     1C 12 06 F1 | 	add	arg01, #28
1ba78     00 00 A0 FF 
1ba7c     09 01 68 FC | 	wrlong	##1073741824, arg01
1ba80     08 00 06 F1 | 	add	_var01, #8
1ba84     00 15 62 FC | 	wrlong	arg02, _var01
1ba88                 | _audio096_spin2_play_ret
1ba88     2D 00 64 FD | 	ret
1ba8c                 | 
1ba8c                 | ' 
1ba8c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1ba8c                 | _audio096_spin2_play8
1ba8c                 | ' 
1ba8c                 | ' base2:=@channel1[0]+64*channel
1ba8c     0C E4 05 F1 | 	add	objptr, #12
1ba90     F2 00 02 F6 | 	mov	_var01, objptr
1ba94     06 12 66 F0 | 	shl	arg01, #6
1ba98     09 01 02 F1 | 	add	_var01, arg01
1ba9c                 | ' long[base2]:=0
1ba9c     00 01 68 FC | 	wrlong	#0, _var01
1baa0                 | ' long[base2+8]:=sample+$40000000 
1baa0     00 00 20 FF 
1baa4     00 14 06 F1 | 	add	arg02, ##1073741824
1baa8     00 13 02 F6 | 	mov	arg01, _var01
1baac     08 12 06 F1 | 	add	arg01, #8
1bab0     09 15 62 FC | 	wrlong	arg02, arg01
1bab4                 | ' if loop>=0
1bab4     00 1C 56 F2 | 	cmps	arg06, #0 wc
1bab8     0C E4 85 F1 | 	sub	objptr, #12
1babc     1C 00 90 CD |  if_b	jmp	#LR__2260
1bac0                 | '   long[base2+12]:=loop
1bac0     00 15 02 F6 | 	mov	arg02, _var01
1bac4     0C 14 06 F1 | 	add	arg02, #12
1bac8     0A 1D 62 FC | 	wrlong	arg06, arg02
1bacc                 | '   long[base2+16]:= len
1bacc     00 1D 02 F6 | 	mov	arg06, _var01
1bad0     10 1C 06 F1 | 	add	arg06, #16
1bad4     0E 1B 62 FC | 	wrlong	arg05, arg06
1bad8     1C 00 90 FD | 	jmp	#LR__2261
1badc                 | LR__2260
1badc                 | ' else
1badc                 | '   long[base2+12]:= len
1badc     00 1D 02 F6 | 	mov	arg06, _var01
1bae0     0C 1C 06 F1 | 	add	arg06, #12
1bae4     0E 1B 62 FC | 	wrlong	arg05, arg06
1bae8                 | '   long[base2+16]:= len+1
1bae8     01 1A 06 F1 | 	add	arg05, #1
1baec     00 13 02 F6 | 	mov	arg01, _var01
1baf0     10 12 06 F1 | 	add	arg01, #16
1baf4     09 1B 62 FC | 	wrlong	arg05, arg01
1baf8                 | LR__2261
1baf8     0B 17 52 F6 | 	abs	arg03, arg03 wc
1bafc     0B 0A 80 FF 
1bb00     0B 6D 18 FD | 	qdiv	##1316406, arg03
1bb04                 | ' word[base2+20]:=vol
1bb04     00 17 02 F6 | 	mov	arg03, _var01
1bb08     14 16 06 F1 | 	add	arg03, #20
1bb0c     0B 19 52 FC | 	wrword	arg04, arg03
1bb10                 | ' word[base2+24]:= 1316406 /splfreq 
1bb10     00 13 02 F6 | 	mov	arg01, _var01
1bb14     18 12 06 F1 | 	add	arg01, #24
1bb18                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1bb18                 | ' long[base2+28]:=$40000000
1bb18     18 18 62 FD | 	getqx	arg04
1bb1c     0C 19 82 F6 | 	negc	arg04, arg04
1bb20     09 19 52 FC | 	wrword	arg04, arg01
1bb24     00 19 02 F6 | 	mov	arg04, _var01
1bb28     1A 18 06 F1 | 	add	arg04, #26
1bb2c     0C 01 5A FC | 	wrword	#256, arg04
1bb30     1C 00 06 F1 | 	add	_var01, #28
1bb34     00 00 A0 FF 
1bb38     00 01 68 FC | 	wrlong	##1073741824, _var01
1bb3c                 | _audio096_spin2_play8_ret
1bb3c     2D 00 64 FD | 	ret
1bb40                 | 
1bb40                 | ' 
1bb40                 | '     
1bb40                 | ' pub stop(channel) 'silence it
1bb40                 | _audio096_spin2_stop
1bb40                 | ' 
1bb40                 | ' word[@channel1[0]+64*channel+20]:=0
1bb40     0C E4 05 F1 | 	add	objptr, #12
1bb44     F2 00 02 F6 | 	mov	_var01, objptr
1bb48     09 03 02 F6 | 	mov	_var02, arg01
1bb4c     06 02 66 F0 | 	shl	_var02, #6
1bb50     01 01 02 F1 | 	add	_var01, _var02
1bb54     14 00 06 F1 | 	add	_var01, #20
1bb58     00 01 58 FC | 	wrword	#0, _var01
1bb5c                 | ' word[@channel1[0]+64*channel+20]:=0
1bb5c     F2 00 02 F6 | 	mov	_var01, objptr
1bb60     06 12 66 F0 | 	shl	arg01, #6
1bb64     09 01 02 F1 | 	add	_var01, arg01
1bb68     14 00 06 F1 | 	add	_var01, #20
1bb6c     00 01 58 FC | 	wrword	#0, _var01
1bb70     0C E4 85 F1 | 	sub	objptr, #12
1bb74                 | _audio096_spin2_stop_ret
1bb74     2D 00 64 FD | 	ret
1bb78                 | hubexit
1bb78     81 00 80 FD | 	jmp	#cogexit
1bb7c                 | 
1bb7c                 | __system___setbaud
1bb7c     14 64 06 FB | 	rdlong	muldiva_, #20
1bb80     09 67 02 F6 | 	mov	muldivb_, arg01
1bb84     BA 00 A0 FD | 	call	#divide_
1bb88     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
1bb8c                 | LR__2270
1bb8c     3E FA 9D FA | 	rdpin	result1, #62 wc
1bb90     FE FC A1 F1 | 	subx	result2, result2
1bb94     F4 FF 9F CD |  if_b	jmp	#LR__2270
1bb98                 | LR__2271
1bb98     40 7C 64 FD | 	dirl	#62
1bb9c     40 7E 64 FD | 	dirl	#63
1bba0     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1bba4     10 66 66 F0 | 	shl	muldivb_, #16
1bba8     07 14 06 F6 | 	mov	arg02, #7
1bbac     33 15 02 F1 | 	add	arg02, muldivb_
1bbb0     3E F8 0C FC | 	wrpin	#124, #62
1bbb4     3E 14 16 FC | 	wxpin	arg02, #62
1bbb8     3F 7C 0C FC | 	wrpin	#62, #63
1bbbc     14 14 06 F1 | 	add	arg02, #20
1bbc0     3F 14 16 FC | 	wxpin	arg02, #63
1bbc4     41 7C 64 FD | 	dirh	#62
1bbc8     41 7E 64 FD | 	dirh	#63
1bbcc                 | __system___setbaud_ret
1bbcc     2D 00 64 FD | 	ret
1bbd0                 | 
1bbd0                 | __system___txraw
1bbd0     01 4A 05 F6 | 	mov	COUNT_, #1
1bbd4     A8 00 A0 FD | 	call	#pushregs_
1bbd8     09 1F 02 F6 | 	mov	local01, arg01
1bbdc     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
1bbe0                 | LR__2280
1bbe0     3E FA 9D FA | 	rdpin	result1, #62 wc
1bbe4     FE FC A1 F1 | 	subx	result2, result2
1bbe8     F4 FF 9F CD |  if_b	jmp	#LR__2280
1bbec                 | LR__2281
1bbec     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1bbf0     C2 01 00 AF 
1bbf4     00 12 06 A6 |  if_e	mov	arg01, ##230400
1bbf8     80 FF BF AD |  if_e	call	#__system___setbaud
1bbfc     58 7C 64 FD | 	drvl	#62
1bc00     3E 1E 26 FC | 	wypin	local01, #62
1bc04     01 FA 05 F6 | 	mov	result1, #1
1bc08     A7 F0 03 F6 | 	mov	ptra, fp
1bc0c     B2 00 A0 FD | 	call	#popregs_
1bc10                 | __system___txraw_ret
1bc10     2D 00 64 FD | 	ret
1bc14                 | 
1bc14                 | __system___rxraw
1bc14     0D 4A 05 F6 | 	mov	COUNT_, #13
1bc18     A8 00 A0 FD | 	call	#pushregs_
1bc1c     09 1F 02 F6 | 	mov	local01, arg01
1bc20     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1bc24     C2 01 00 AF 
1bc28     00 12 06 A6 |  if_e	mov	arg01, ##230400
1bc2c     4C FF BF AD |  if_e	call	#__system___setbaud
1bc30     00 1E 0E F2 | 	cmp	local01, #0 wz
1bc34     20 00 90 AD |  if_e	jmp	#LR__2290
1bc38     14 22 06 FB | 	rdlong	local03, #20
1bc3c     0A 22 46 F0 | 	shr	local03, #10
1bc40     11 1F 02 FD | 	qmul	local01, local03
1bc44     1A FA 61 FD | 	getct	result1
1bc48     18 24 62 FD | 	getqx	local04
1bc4c     12 FB 01 F1 | 	add	result1, local04
1bc50     FD 26 02 F6 | 	mov	local05, result1
1bc54     04 00 90 FD | 	jmp	#LR__2291
1bc58                 | LR__2290
1bc58     00 26 06 F6 | 	mov	local05, #0
1bc5c                 | LR__2291
1bc5c     01 28 66 F6 | 	neg	local06, #1
1bc60     3F 2A 06 F6 | 	mov	local07, #63
1bc64     00 2C 06 F6 | 	mov	local08, #0
1bc68     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1bc6c     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1bc70     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1bc74                 | LR__2292
1bc74     08 2E 16 F4 | 	testb	local09, #8 wc
1bc78     09 2E 76 F4 | 	testbn	local09, #9 andc
1bc7c     0A 2E 46 F0 | 	shr	local09, #10
1bc80     01 2C 06 C6 |  if_b	mov	local08, #1
1bc84     40 7E 6C 3D |  if_ae	testp	#63 wz
1bc88     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1bc8c     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1bc90     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1bc94                 | LR__2293
1bc94     00 20 06 F6 | 	mov	local02, #0
1bc98     00 2C 0E F2 | 	cmp	local08, #0 wz
1bc9c     01 20 66 56 |  if_ne	neg	local02, #1
1bca0     00 30 06 F6 | 	mov	local10, #0
1bca4     00 22 06 F6 | 	mov	local03, #0
1bca8     00 1E 0E F2 | 	cmp	local01, #0 wz
1bcac     01 22 66 56 |  if_ne	neg	local03, #1
1bcb0     00 24 06 F6 | 	mov	local04, #0
1bcb4     00 32 06 F6 | 	mov	local11, #0
1bcb8     1A FA 61 FD | 	getct	result1
1bcbc     FD 34 02 F6 | 	mov	local12, result1
1bcc0     1A 37 02 F6 | 	mov	local13, local12
1bcc4     13 37 82 F1 | 	sub	local13, local05
1bcc8     00 36 56 F2 | 	cmps	local13, #0 wc
1bccc     00 32 26 C6 |  if_b	not	local11, #0
1bcd0     00 32 0E F2 | 	cmp	local11, #0 wz
1bcd4     00 24 26 56 |  if_ne	not	local04, #0
1bcd8     12 23 CA F7 | 	test	local03, local04 wz
1bcdc     00 30 26 56 |  if_ne	not	local10, #0
1bce0     18 21 4A F5 | 	or	local02, local10 wz
1bce4     8C FF 9F AD |  if_e	jmp	#LR__2292
1bce8     00 2C 0E F2 | 	cmp	local08, #0 wz
1bcec     17 29 02 56 |  if_ne	mov	local06, local09
1bcf0     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1bcf4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1bcf8     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1bcfc     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1bd00     14 FB 01 F6 | 	mov	result1, local06
1bd04     A7 F0 03 F6 | 	mov	ptra, fp
1bd08     B2 00 A0 FD | 	call	#popregs_
1bd0c                 | __system___rxraw_ret
1bd0c     2D 00 64 FD | 	ret
1bd10                 | 
1bd10                 | __system___getus
1bd10     1A FC 71 FD | 	getct	result2 wc
1bd14     1A 00 62 FD | 	getct	_var01
1bd18     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1bd1c     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1bd20     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1bd24     20 00 90 5D |  if_ne	jmp	#LR__2300
1bd28     14 02 06 FB | 	rdlong	_var02, #20
1bd2c     A1 07 00 FF 
1bd30     40 02 16 FD | 	qdiv	_var02, ##1000000
1bd34     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1bd38     18 FA 61 FD | 	getqx	result1
1bd3c     FD 02 02 F6 | 	mov	_var02, result1
1bd40     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1bd44     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1bd48                 | LR__2300
1bd48     01 FD 11 FD | 	qdiv	result2, _var02
1bd4c     19 FC 61 FD | 	getqy	result2
1bd50     28 FC 61 FD | 	setq	result2
1bd54     01 01 12 FD | 	qdiv	_var01, _var02
1bd58     18 FA 61 FD | 	getqx	result1
1bd5c                 | __system___getus_ret
1bd5c     2D 00 64 FD | 	ret
1bd60                 | 
1bd60                 | __system____builtin_memmove
1bd60     09 01 02 F6 | 	mov	_var01, arg01
1bd64     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1bd68     10 00 90 CD |  if_b	jmp	#LR__2310
1bd6c     0A 03 02 F6 | 	mov	_var02, arg02
1bd70     0B 03 02 F1 | 	add	_var02, arg03
1bd74     01 13 52 F2 | 	cmps	arg01, _var02 wc
1bd78     48 00 90 CD |  if_b	jmp	#LR__2316
1bd7c                 | LR__2310
1bd7c     0B 05 02 F6 | 	mov	_var03, arg03
1bd80     02 04 4E F0 | 	shr	_var03, #2 wz
1bd84     18 00 90 AD |  if_e	jmp	#LR__2315
1bd88     97 0A 48 FB | 	callpa	#(@LR__2313-@LR__2311)>>2,fcache_load_ptr_
1bd8c                 | LR__2311
1bd8c     02 09 D8 FC | 	rep	@LR__2314, _var03
1bd90                 | LR__2312
1bd90     0A 05 02 FB | 	rdlong	_var03, arg02
1bd94     09 05 62 FC | 	wrlong	_var03, arg01
1bd98     04 12 06 F1 | 	add	arg01, #4
1bd9c     04 14 06 F1 | 	add	arg02, #4
1bda0                 | LR__2313
1bda0                 | LR__2314
1bda0                 | LR__2315
1bda0     02 16 CE F7 | 	test	arg03, #2 wz
1bda4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1bda8     09 03 52 5C |  if_ne	wrword	_var02, arg01
1bdac     02 12 06 51 |  if_ne	add	arg01, #2
1bdb0     02 14 06 51 |  if_ne	add	arg02, #2
1bdb4     01 16 CE F7 | 	test	arg03, #1 wz
1bdb8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1bdbc     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1bdc0     28 00 90 FD | 	jmp	#LR__2322
1bdc4                 | LR__2316
1bdc4     0B 13 02 F1 | 	add	arg01, arg03
1bdc8     0B 15 02 F1 | 	add	arg02, arg03
1bdcc     0B 07 0A F6 | 	mov	_var04, arg03 wz
1bdd0     18 00 90 AD |  if_e	jmp	#LR__2321
1bdd4     97 0A 48 FB | 	callpa	#(@LR__2319-@LR__2317)>>2,fcache_load_ptr_
1bdd8                 | LR__2317
1bdd8     03 09 D8 FC | 	rep	@LR__2320, _var04
1bddc                 | LR__2318
1bddc     01 12 86 F1 | 	sub	arg01, #1
1bde0     01 14 86 F1 | 	sub	arg02, #1
1bde4     0A 03 C2 FA | 	rdbyte	_var02, arg02
1bde8     09 03 42 FC | 	wrbyte	_var02, arg01
1bdec                 | LR__2319
1bdec                 | LR__2320
1bdec                 | LR__2321
1bdec                 | LR__2322
1bdec     00 FB 01 F6 | 	mov	result1, _var01
1bdf0                 | __system____builtin_memmove_ret
1bdf0     2D 00 64 FD | 	ret
1bdf4                 | 
1bdf4                 | __system____builtin_strcpy
1bdf4     09 01 02 F6 | 	mov	_var01, arg01
1bdf8     97 0A 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
1bdfc                 | LR__2330
1bdfc     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1be00     09 FB 41 FC | 	wrbyte	result1, arg01
1be04     01 14 06 F1 | 	add	arg02, #1
1be08     01 12 06 F1 | 	add	arg01, #1
1be0c     EC FF 9F 5D |  if_ne	jmp	#LR__2330
1be10                 | LR__2331
1be10     00 FB 01 F6 | 	mov	result1, _var01
1be14                 | __system____builtin_strcpy_ret
1be14     2D 00 64 FD | 	ret
1be18                 | 
1be18                 | __system____topofstack
1be18     00 4A 05 F6 | 	mov	COUNT_, #0
1be1c     A8 00 A0 FD | 	call	#pushregs_
1be20     08 F0 07 F1 | 	add	ptra, #8
1be24     04 4E 05 F1 | 	add	fp, #4
1be28     A7 12 62 FC | 	wrlong	arg01, fp
1be2c     A7 FA 01 F6 | 	mov	result1, fp
1be30     04 4E 85 F1 | 	sub	fp, #4
1be34     A7 F0 03 F6 | 	mov	ptra, fp
1be38     B2 00 A0 FD | 	call	#popregs_
1be3c                 | __system____topofstack_ret
1be3c     2D 00 64 FD | 	ret
1be40                 | 
1be40                 | __system___lockmem
1be40     00 FA 05 F6 | 	mov	result1, #0
1be44     01 FA 61 FD | 	cogid	result1
1be48     00 FB 05 F1 | 	add	result1, #256
1be4c                 | LR__2340
1be4c     09 01 0A FB | 	rdlong	_var01, arg01 wz
1be50     09 FB 61 AC |  if_e	wrlong	result1, arg01
1be54     09 01 02 AB |  if_e	rdlong	_var01, arg01
1be58     09 01 02 AB |  if_e	rdlong	_var01, arg01
1be5c     FD 00 0A F2 | 	cmp	_var01, result1 wz
1be60     E8 FF 9F 5D |  if_ne	jmp	#LR__2340
1be64                 | __system___lockmem_ret
1be64     2D 00 64 FD | 	ret
1be68                 | 
1be68                 | __system___string_cmp
1be68     97 14 48 FB | 	callpa	#(@LR__2351-@LR__2350)>>2,fcache_load_ptr_
1be6c                 | LR__2350
1be6c     09 01 C2 FA | 	rdbyte	_var01, arg01
1be70     0A 03 C2 FA | 	rdbyte	_var02, arg02
1be74     00 05 02 F6 | 	mov	_var03, _var01
1be78     01 05 8A F1 | 	sub	_var03, _var02 wz
1be7c     01 12 06 F1 | 	add	arg01, #1
1be80     01 14 06 F1 | 	add	arg02, #1
1be84     0C 00 90 5D |  if_ne	jmp	#LR__2352
1be88     00 00 0E F2 | 	cmp	_var01, #0 wz
1be8c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1be90     D8 FF 9F 5D |  if_ne	jmp	#LR__2350
1be94                 | LR__2351
1be94                 | LR__2352
1be94     02 FB 01 F6 | 	mov	result1, _var03
1be98                 | __system___string_cmp_ret
1be98     2D 00 64 FD | 	ret
1be9c                 | 
1be9c                 | __system___string_concat
1be9c     05 4A 05 F6 | 	mov	COUNT_, #5
1bea0     A8 00 A0 FD | 	call	#pushregs_
1bea4     09 1F 02 F6 | 	mov	local01, arg01
1bea8     0A 21 02 F6 | 	mov	local02, arg02
1beac     0F 13 02 F6 | 	mov	arg01, local01
1beb0     09 23 02 F6 | 	mov	local03, arg01
1beb4     97 06 48 FB | 	callpa	#(@LR__2361-@LR__2360)>>2,fcache_load_ptr_
1beb8                 | LR__2360
1beb8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1bebc     01 22 06 51 |  if_ne	add	local03, #1
1bec0     F4 FF 9F 5D |  if_ne	jmp	#LR__2360
1bec4                 | LR__2361
1bec4     09 23 82 F1 | 	sub	local03, arg01
1bec8     11 25 02 F6 | 	mov	local04, local03
1becc     10 13 02 F6 | 	mov	arg01, local02
1bed0     09 23 02 F6 | 	mov	local03, arg01
1bed4     97 06 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1bed8                 | LR__2362
1bed8     11 FB C9 FA | 	rdbyte	result1, local03 wz
1bedc     01 22 06 51 |  if_ne	add	local03, #1
1bee0     F4 FF 9F 5D |  if_ne	jmp	#LR__2362
1bee4                 | LR__2363
1bee4     09 23 82 F1 | 	sub	local03, arg01
1bee8     12 13 02 F6 | 	mov	arg01, local04
1beec     11 13 02 F1 | 	add	arg01, local03
1bef0     01 12 06 F1 | 	add	arg01, #1
1bef4     90 3D B0 FD | 	call	#__system___gc_alloc_managed
1bef8     FD 26 0A F6 | 	mov	local05, result1 wz
1befc     28 00 90 AD |  if_e	jmp	#LR__2364
1bf00     13 13 02 F6 | 	mov	arg01, local05
1bf04     0F 15 02 F6 | 	mov	arg02, local01
1bf08     12 17 02 F6 | 	mov	arg03, local04
1bf0c     50 FE BF FD | 	call	#__system____builtin_memmove
1bf10     13 13 02 F6 | 	mov	arg01, local05
1bf14     12 13 02 F1 | 	add	arg01, local04
1bf18     01 22 06 F1 | 	add	local03, #1
1bf1c     10 15 02 F6 | 	mov	arg02, local02
1bf20     11 17 02 F6 | 	mov	arg03, local03
1bf24     38 FE BF FD | 	call	#__system____builtin_memmove
1bf28                 | LR__2364
1bf28     13 FB 01 F6 | 	mov	result1, local05
1bf2c     A7 F0 03 F6 | 	mov	ptra, fp
1bf30     B2 00 A0 FD | 	call	#popregs_
1bf34                 | __system___string_concat_ret
1bf34     2D 00 64 FD | 	ret
1bf38                 | 
1bf38                 | __system___tx
1bf38     02 4A 05 F6 | 	mov	COUNT_, #2
1bf3c     A8 00 A0 FD | 	call	#pushregs_
1bf40     09 1F 02 F6 | 	mov	local01, arg01
1bf44     0A 1E 0E F2 | 	cmp	local01, #10 wz
1bf48     18 00 90 5D |  if_ne	jmp	#LR__2370
1bf4c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1bf50     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1bf54     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1bf58     02 20 CE F7 | 	test	local02, #2 wz
1bf5c     0D 12 06 56 |  if_ne	mov	arg01, #13
1bf60     6C FC BF 5D |  if_ne	call	#__system___txraw
1bf64                 | LR__2370
1bf64     0F 13 02 F6 | 	mov	arg01, local01
1bf68     64 FC BF FD | 	call	#__system___txraw
1bf6c     A7 F0 03 F6 | 	mov	ptra, fp
1bf70     B2 00 A0 FD | 	call	#popregs_
1bf74                 | __system___tx_ret
1bf74     2D 00 64 FD | 	ret
1bf78                 | 
1bf78                 | __system___rx
1bf78     01 4A 05 F6 | 	mov	COUNT_, #1
1bf7c     A8 00 A0 FD | 	call	#pushregs_
1bf80                 | LR__2380
1bf80     00 12 06 F6 | 	mov	arg01, #0
1bf84     8C FC BF FD | 	call	#__system___rxraw
1bf88     FD 1E 02 F6 | 	mov	local01, result1
1bf8c     FF FF 7F FF 
1bf90     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1bf94     E8 FF 9F AD |  if_e	jmp	#LR__2380
1bf98     0D 1E 0E F2 | 	cmp	local01, #13 wz
1bf9c     14 00 90 5D |  if_ne	jmp	#LR__2381
1bfa0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1bfa4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1bfa8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1bfac     02 FA CD F7 | 	test	result1, #2 wz
1bfb0     0A 1E 06 56 |  if_ne	mov	local01, #10
1bfb4                 | LR__2381
1bfb4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1bfb8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1bfbc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1bfc0     01 12 CE F7 | 	test	arg01, #1 wz
1bfc4     1C 00 90 AD |  if_e	jmp	#LR__2384
1bfc8     7F 1E 0E F2 | 	cmp	local01, #127 wz
1bfcc     0C 00 90 5D |  if_ne	jmp	#LR__2382
1bfd0     08 12 06 F6 | 	mov	arg01, #8
1bfd4     60 FF BF FD | 	call	#__system___tx
1bfd8     08 00 90 FD | 	jmp	#LR__2383
1bfdc                 | LR__2382
1bfdc     0F 13 02 F6 | 	mov	arg01, local01
1bfe0     54 FF BF FD | 	call	#__system___tx
1bfe4                 | LR__2383
1bfe4                 | LR__2384
1bfe4     0F FB 01 F6 | 	mov	result1, local01
1bfe8     A7 F0 03 F6 | 	mov	ptra, fp
1bfec     B2 00 A0 FD | 	call	#popregs_
1bff0                 | __system___rx_ret
1bff0     2D 00 64 FD | 	ret
1bff4                 | 
1bff4                 | __system___pinwrite
1bff4     09 01 02 F6 | 	mov	_var01, arg01
1bff8     1F 00 06 F5 | 	and	_var01, #31
1bffc     20 12 CE F7 | 	test	arg01, #32 wz
1c000     06 12 46 F0 | 	shr	arg01, #6
1c004     09 13 CA F9 | 	bmask	arg01, arg01
1c008     00 13 62 F0 | 	shl	arg01, _var01
1c00c     00 15 62 F0 | 	shl	arg02, _var01
1c010     1C 00 90 AD |  if_e	jmp	#LR__2390
1c014     09 F7 43 F5 | 	or	dirb, arg01
1c018     FD 01 02 F6 | 	mov	_var01, outb
1c01c     09 01 22 F5 | 	andn	_var01, arg01
1c020     09 15 02 F5 | 	and	arg02, arg01
1c024     0A 01 42 F5 | 	or	_var01, arg02
1c028     00 FB 03 F6 | 	mov	outb, _var01
1c02c     18 00 90 FD | 	jmp	#LR__2391
1c030                 | LR__2390
1c030     09 F5 43 F5 | 	or	dira, arg01
1c034     FC 01 02 F6 | 	mov	_var01, outa
1c038     09 01 22 F5 | 	andn	_var01, arg01
1c03c     09 15 02 F5 | 	and	arg02, arg01
1c040     0A 01 42 F5 | 	or	_var01, arg02
1c044     00 F9 03 F6 | 	mov	outa, _var01
1c048                 | LR__2391
1c048                 | __system___pinwrite_ret
1c048     2D 00 64 FD | 	ret
1c04c                 | 
1c04c                 | __system___basic_read_line
1c04c     06 4A 05 F6 | 	mov	COUNT_, #6
1c050     A8 00 A0 FD | 	call	#pushregs_
1c054     09 1F 02 F6 | 	mov	local01, arg01
1c058     00 20 06 F6 | 	mov	local02, #0
1c05c     18 22 06 F6 | 	mov	local03, #24
1c060     00 24 06 F6 | 	mov	local04, #0
1c064     18 12 06 F6 | 	mov	arg01, #24
1c068     1C 3C B0 FD | 	call	#__system___gc_alloc_managed
1c06c     FD 26 0A F6 | 	mov	local05, result1 wz
1c070     13 FB 01 A6 |  if_e	mov	result1, local05
1c074     B0 00 90 AD |  if_e	jmp	#LR__2403
1c078                 | LR__2400
1c078     0F 13 02 F6 | 	mov	arg01, local01
1c07c     88 0B B0 FD | 	call	#__system___basic_get_char
1c080     FD 28 02 F6 | 	mov	local06, result1
1c084     01 28 56 F2 | 	cmps	local06, #1 wc
1c088     8C 00 90 CD |  if_b	jmp	#LR__2402
1c08c     0A 28 0E F2 | 	cmp	local06, #10 wz
1c090     10 00 90 5D |  if_ne	jmp	#LR__2401
1c094     00 24 0E F2 | 	cmp	local04, #0 wz
1c098     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1c09c     01 20 86 11 |  if_a	sub	local02, #1
1c0a0     74 00 90 FD | 	jmp	#LR__2402
1c0a4                 | LR__2401
1c0a4     0D 28 0E F2 | 	cmp	local06, #13 wz
1c0a8     01 24 06 A6 |  if_e	mov	local04, #1
1c0ac     00 24 06 56 |  if_ne	mov	local04, #0
1c0b0     08 28 0E F2 | 	cmp	local06, #8 wz
1c0b4     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1c0b8     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1c0bc     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1c0c0     B4 FF 9F AD |  if_e	jmp	#LR__2400
1c0c4     13 17 02 F6 | 	mov	arg03, local05
1c0c8     10 17 02 F1 | 	add	arg03, local02
1c0cc     0B 29 42 FC | 	wrbyte	local06, arg03
1c0d0     01 20 06 F1 | 	add	local02, #1
1c0d4     11 21 0A F2 | 	cmp	local02, local03 wz
1c0d8     9C FF 9F 5D |  if_ne	jmp	#LR__2400
1c0dc     11 13 02 F6 | 	mov	arg01, local03
1c0e0     20 12 06 F1 | 	add	arg01, #32
1c0e4     A0 3B B0 FD | 	call	#__system___gc_alloc_managed
1c0e8     FD 28 0A F6 | 	mov	local06, result1 wz
1c0ec     14 FB 01 A6 |  if_e	mov	result1, local06
1c0f0     34 00 90 AD |  if_e	jmp	#LR__2403
1c0f4     14 13 02 F6 | 	mov	arg01, local06
1c0f8     13 15 02 F6 | 	mov	arg02, local05
1c0fc     11 17 02 F6 | 	mov	arg03, local03
1c100     5C FC BF FD | 	call	#__system____builtin_memmove
1c104     20 22 06 F1 | 	add	local03, #32
1c108     13 13 02 F6 | 	mov	arg01, local05
1c10c     B4 3C B0 FD | 	call	#__system___gc_free
1c110     14 27 02 F6 | 	mov	local05, local06
1c114     60 FF 9F FD | 	jmp	#LR__2400
1c118                 | LR__2402
1c118     13 29 02 F6 | 	mov	local06, local05
1c11c     10 29 02 F1 | 	add	local06, local02
1c120     14 01 48 FC | 	wrbyte	#0, local06
1c124     13 FB 01 F6 | 	mov	result1, local05
1c128                 | LR__2403
1c128     A7 F0 03 F6 | 	mov	ptra, fp
1c12c     B2 00 A0 FD | 	call	#popregs_
1c130                 | __system___basic_read_line_ret
1c130     2D 00 64 FD | 	ret
1c134                 | 
1c134                 | __system___waitms
1c134     09 01 02 F6 | 	mov	_var01, arg01
1c138     1A 02 62 FD | 	getct	_var02
1c13c     14 04 06 FB | 	rdlong	_var03, #20
1c140     97 14 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1c144                 | LR__2410
1c144     01 00 00 FF 
1c148     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1c14c     1C 00 90 CD |  if_b	jmp	#LR__2412
1c150     02 03 02 F1 | 	add	_var02, _var03
1c154     01 13 02 F6 | 	mov	arg01, _var02
1c158     00 12 66 FA | 	addct1	arg01, #0
1c15c     24 22 60 FD | 	waitct1
1c160     01 00 00 FF 
1c164     E8 01 86 F1 | 	sub	_var01, ##1000
1c168     D8 FF 9F FD | 	jmp	#LR__2410
1c16c                 | LR__2411
1c16c                 | LR__2412
1c16c     01 00 56 F2 | 	cmps	_var01, #1 wc
1c170     28 00 90 CD |  if_b	jmp	#LR__2413
1c174     02 01 02 FD | 	qmul	_var01, _var03
1c178     01 00 00 FF 
1c17c     E8 17 06 F6 | 	mov	arg03, ##1000
1c180     19 FA 61 FD | 	getqy	result1
1c184     18 12 62 FD | 	getqx	arg01
1c188     28 FA 61 FD | 	setq	result1
1c18c     0B 13 12 FD | 	qdiv	arg01, arg03
1c190     18 12 62 FD | 	getqx	arg01
1c194     01 13 62 FA | 	addct1	arg01, _var02
1c198     24 22 60 FD | 	waitct1
1c19c                 | LR__2413
1c19c                 | __system___waitms_ret
1c19c     2D 00 64 FD | 	ret
1c1a0                 | 
1c1a0                 | __system___waitus
1c1a0     09 01 02 F6 | 	mov	_var01, arg01
1c1a4     1A 02 62 FD | 	getct	_var02
1c1a8     14 04 06 FB | 	rdlong	_var03, #20
1c1ac     97 14 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1c1b0                 | LR__2420
1c1b0     A1 07 00 FF 
1c1b4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1c1b8     1C 00 90 CD |  if_b	jmp	#LR__2422
1c1bc     02 03 02 F1 | 	add	_var02, _var03
1c1c0     01 13 02 F6 | 	mov	arg01, _var02
1c1c4     00 12 66 FA | 	addct1	arg01, #0
1c1c8     24 22 60 FD | 	waitct1
1c1cc     A1 07 00 FF 
1c1d0     40 00 86 F1 | 	sub	_var01, ##1000000
1c1d4     D8 FF 9F FD | 	jmp	#LR__2420
1c1d8                 | LR__2421
1c1d8                 | LR__2422
1c1d8     01 00 56 F2 | 	cmps	_var01, #1 wc
1c1dc     28 00 90 CD |  if_b	jmp	#LR__2423
1c1e0     02 01 02 FD | 	qmul	_var01, _var03
1c1e4     A1 07 00 FF 
1c1e8     40 16 06 F6 | 	mov	arg03, ##1000000
1c1ec     19 FA 61 FD | 	getqy	result1
1c1f0     18 12 62 FD | 	getqx	arg01
1c1f4     28 FA 61 FD | 	setq	result1
1c1f8     0B 13 12 FD | 	qdiv	arg01, arg03
1c1fc     18 FA 61 FD | 	getqx	result1
1c200     FD 02 62 FA | 	addct1	_var02, result1
1c204     24 22 60 FD | 	waitct1
1c208                 | LR__2423
1c208                 | __system___waitus_ret
1c208     2D 00 64 FD | 	ret
1c20c                 | 
1c20c                 | __system___mount
1c20c     0B 4A 05 F6 | 	mov	COUNT_, #11
1c210     A8 00 A0 FD | 	call	#pushregs_
1c214     09 1F 02 F6 | 	mov	local01, arg01
1c218     0A 21 0A F6 | 	mov	local02, arg02 wz
1c21c     01 22 66 F6 | 	neg	local03, #1
1c220     01 FA 65 A6 |  if_e	neg	result1, #1
1c224     98 02 90 AD |  if_e	jmp	#LR__2445
1c228     0F FB C1 FA | 	rdbyte	result1, local01
1c22c     2F FA 0D F2 | 	cmp	result1, #47 wz
1c230     28 00 90 5D |  if_ne	jmp	#LR__2432
1c234     0F 13 02 F6 | 	mov	arg01, local01
1c238     09 25 02 F6 | 	mov	local04, arg01
1c23c     97 06 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1c240                 | LR__2430
1c240     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c244     01 24 06 51 |  if_ne	add	local04, #1
1c248     F4 FF 9F 5D |  if_ne	jmp	#LR__2430
1c24c                 | LR__2431
1c24c     09 25 82 F1 | 	sub	local04, arg01
1c250     12 FB 01 F6 | 	mov	result1, local04
1c254     10 FA 55 F2 | 	cmps	result1, #16 wc
1c258     14 00 90 CD |  if_b	jmp	#LR__2433
1c25c                 | LR__2432
1c25c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1c260     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1c264     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1c268     01 FA 65 F6 | 	neg	result1, #1
1c26c     50 02 90 FD | 	jmp	#LR__2445
1c270                 | LR__2433
1c270     00 26 06 F6 | 	mov	local05, #0
1c274                 | LR__2434
1c274     04 26 56 F2 | 	cmps	local05, #4 wc
1c278     B0 00 90 3D |  if_ae	jmp	#LR__2439
1c27c     13 13 02 F6 | 	mov	arg01, local05
1c280     02 12 66 F0 | 	shl	arg01, #2
1c284     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c288     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c28c     09 FB 09 FB | 	rdlong	result1, arg01 wz
1c290     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c294     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1c298     13 23 02 86 |  if_c_and_z	mov	local03, local05
1c29c     84 00 90 8D |  if_c_and_z	jmp	#LR__2438
1c2a0     13 13 02 F6 | 	mov	arg01, local05
1c2a4     02 12 66 F0 | 	shl	arg01, #2
1c2a8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c2ac     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1c2b0     09 13 02 FB | 	rdlong	arg01, arg01
1c2b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c2b8     09 25 02 F6 | 	mov	local04, arg01
1c2bc     97 06 48 FB | 	callpa	#(@LR__2436-@LR__2435)>>2,fcache_load_ptr_
1c2c0                 | LR__2435
1c2c0     12 FB C9 FA | 	rdbyte	result1, local04 wz
1c2c4     01 24 06 51 |  if_ne	add	local04, #1
1c2c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2435
1c2cc                 | LR__2436
1c2cc     09 25 82 F1 | 	sub	local04, arg01
1c2d0     12 29 02 F6 | 	mov	local06, local04
1c2d4     14 13 02 F6 | 	mov	arg01, local06
1c2d8     0F 13 02 F1 | 	add	arg01, local01
1c2dc     09 FB C1 FA | 	rdbyte	result1, arg01
1c2e0     2F FA 0D F2 | 	cmp	result1, #47 wz
1c2e4     14 2B 02 56 |  if_ne	mov	local07, local06
1c2e8     0F 2B 02 51 |  if_ne	add	local07, local01
1c2ec     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1c2f0     30 00 90 5D |  if_ne	jmp	#LR__2437
1c2f4     13 17 02 F6 | 	mov	arg03, local05
1c2f8     02 16 66 F0 | 	shl	arg03, #2
1c2fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c300     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1c304     0B 15 02 FB | 	rdlong	arg02, arg03
1c308     0F 13 02 F6 | 	mov	arg01, local01
1c30c     14 17 02 F6 | 	mov	arg03, local06
1c310     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c314     B0 4D B0 FD | 	call	#__system__strncmp
1c318     00 FA 0D F2 | 	cmp	result1, #0 wz
1c31c     13 23 02 A6 |  if_e	mov	local03, local05
1c320     08 00 90 AD |  if_e	jmp	#LR__2439
1c324                 | LR__2437
1c324                 | LR__2438
1c324     01 26 06 F1 | 	add	local05, #1
1c328     48 FF 9F FD | 	jmp	#LR__2434
1c32c                 | LR__2439
1c32c     FF FF 7F FF 
1c330     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1c334     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1c338     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1c33c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1c340     01 FA 65 A6 |  if_e	neg	result1, #1
1c344     78 01 90 AD |  if_e	jmp	#LR__2445
1c348     11 27 02 F6 | 	mov	local05, local03
1c34c     13 2B 02 F6 | 	mov	local07, local05
1c350     02 2A 66 F0 | 	shl	local07, #2
1c354     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c358     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1c35c     15 29 0A FB | 	rdlong	local06, local07 wz
1c360     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c364     58 00 90 AD |  if_e	jmp	#LR__2440
1c368     4C 28 06 F1 | 	add	local06, #76
1c36c     14 2B 0A FB | 	rdlong	local07, local06 wz
1c370     4C 28 86 F1 | 	sub	local06, #76
1c374     48 00 90 AD |  if_e	jmp	#LR__2440
1c378     4C 28 06 F1 | 	add	local06, #76
1c37c     14 2B 02 FB | 	rdlong	local07, local06
1c380     15 23 02 F6 | 	mov	local03, local07
1c384     13 2A 46 F7 | 	zerox	local07, #19
1c388     14 22 46 F0 | 	shr	local03, #20
1c38c     02 22 66 F0 | 	shl	local03, #2
1c390     ED 22 02 F1 | 	add	local03, __methods__
1c394     11 23 02 FB | 	rdlong	local03, local03
1c398     13 29 02 F6 | 	mov	local06, local05
1c39c     02 28 66 F0 | 	shl	local06, #2
1c3a0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c3a4     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1c3a8     14 13 02 FB | 	rdlong	arg01, local06
1c3ac     F2 28 02 F6 | 	mov	local06, objptr
1c3b0     15 E5 01 F6 | 	mov	objptr, local07
1c3b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c3b8     2D 22 62 FD | 	call	local03
1c3bc     14 E5 01 F6 | 	mov	objptr, local06
1c3c0                 | LR__2440
1c3c0     13 2D 02 F6 | 	mov	local08, local05
1c3c4     02 2C 66 F0 | 	shl	local08, #2
1c3c8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c3cc     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1c3d0     16 21 62 FC | 	wrlong	local02, local08
1c3d4     00 20 0E F2 | 	cmp	local02, #0 wz
1c3d8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c3dc     18 00 90 5D |  if_ne	jmp	#LR__2441
1c3e0     02 26 66 F0 | 	shl	local05, #2
1c3e4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c3e8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c3ec     13 01 68 FC | 	wrlong	#0, local05
1c3f0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c3f4     C4 00 90 FD | 	jmp	#LR__2444
1c3f8                 | LR__2441
1c3f8     13 2F 02 F6 | 	mov	local09, local05
1c3fc     04 2E 66 F0 | 	shl	local09, #4
1c400     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1c404     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1c408     17 13 02 F6 | 	mov	arg01, local09
1c40c     0F 15 02 F6 | 	mov	arg02, local01
1c410     10 16 06 F6 | 	mov	arg03, #16
1c414     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1c418     00 4C B0 FD | 	call	#__system__strncpy
1c41c     48 20 06 F1 | 	add	local02, #72
1c420     10 2D 0A FB | 	rdlong	local08, local02 wz
1c424     48 20 86 F1 | 	sub	local02, #72
1c428     7C 00 90 AD |  if_e	jmp	#LR__2443
1c42c     48 20 06 F1 | 	add	local02, #72
1c430     10 2D 02 FB | 	rdlong	local08, local02
1c434     16 31 02 F6 | 	mov	local10, local08
1c438     13 2C 46 F7 | 	zerox	local08, #19
1c43c     14 30 46 F0 | 	shr	local10, #20
1c440     02 30 66 F0 | 	shl	local10, #2
1c444     ED 30 02 F1 | 	add	local10, __methods__
1c448     18 31 02 FB | 	rdlong	local10, local10
1c44c     17 13 02 F6 | 	mov	arg01, local09
1c450     F2 32 02 F6 | 	mov	local11, objptr
1c454     16 E5 01 F6 | 	mov	objptr, local08
1c458     2D 30 62 FD | 	call	local10
1c45c     19 E5 01 F6 | 	mov	objptr, local11
1c460     FD 12 0A F6 | 	mov	arg01, result1 wz
1c464     40 00 90 AD |  if_e	jmp	#LR__2442
1c468     13 2D 02 F6 | 	mov	local08, local05
1c46c     02 2C 66 F0 | 	shl	local08, #2
1c470     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c474     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1c478     16 01 68 FC | 	wrlong	#0, local08
1c47c     02 26 66 F0 | 	shl	local05, #2
1c480     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1c484     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c488     13 01 68 FC | 	wrlong	#0, local05
1c48c     09 13 6A F6 | 	neg	arg01, arg01 wz
1c490     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1c494     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1c498     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1c49c     01 FA 65 56 |  if_ne	neg	result1, #1
1c4a0     00 FA 05 A6 |  if_e	mov	result1, #0
1c4a4     18 00 90 FD | 	jmp	#LR__2445
1c4a8                 | LR__2442
1c4a8                 | LR__2443
1c4a8     02 26 66 F0 | 	shl	local05, #2
1c4ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c4b0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1c4b4     13 2F 62 FC | 	wrlong	local09, local05
1c4b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c4bc                 | LR__2444
1c4bc     00 FA 05 F6 | 	mov	result1, #0
1c4c0                 | LR__2445
1c4c0     A7 F0 03 F6 | 	mov	ptra, fp
1c4c4     B2 00 A0 FD | 	call	#popregs_
1c4c8                 | __system___mount_ret
1c4c8     2D 00 64 FD | 	ret
1c4cc                 | 
1c4cc                 | __system___chdir
1c4cc     00 4A 05 F6 | 	mov	COUNT_, #0
1c4d0     A8 00 A0 FD | 	call	#pushregs_
1c4d4     40 F0 07 F1 | 	add	ptra, #64
1c4d8     04 4E 05 F1 | 	add	fp, #4
1c4dc     A7 12 62 FC | 	wrlong	arg01, fp
1c4e0     04 4E 05 F1 | 	add	fp, #4
1c4e4     A7 14 02 F6 | 	mov	arg02, fp
1c4e8     08 4E 85 F1 | 	sub	fp, #8
1c4ec     0C 48 B0 FD | 	call	#__system__stat
1c4f0     3C 4E 05 F1 | 	add	fp, #60
1c4f4     A7 FA 61 FC | 	wrlong	result1, fp
1c4f8     3C 4E 85 F1 | 	sub	fp, #60
1c4fc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c500     3C 4E 05 51 |  if_ne	add	fp, #60
1c504     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1c508     3C 4E 85 51 |  if_ne	sub	fp, #60
1c50c     BC 00 90 5D |  if_ne	jmp	#LR__2452
1c510     10 4E 05 F1 | 	add	fp, #16
1c514     A7 12 02 FB | 	rdlong	arg01, fp
1c518     10 4E 85 F1 | 	sub	fp, #16
1c51c     78 00 00 FF 
1c520     00 12 06 F5 | 	and	arg01, ##61440
1c524     08 00 00 FF 
1c528     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1c52c     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1c530     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1c534     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1c538     01 FA 65 56 |  if_ne	neg	result1, #1
1c53c     8C 00 90 5D |  if_ne	jmp	#LR__2452
1c540     04 4E 05 F1 | 	add	fp, #4
1c544     A7 16 02 FB | 	rdlong	arg03, fp
1c548     04 4E 85 F1 | 	sub	fp, #4
1c54c     0B 17 C2 FA | 	rdbyte	arg03, arg03
1c550     2F 16 0E F2 | 	cmp	arg03, #47 wz
1c554     24 00 90 5D |  if_ne	jmp	#LR__2450
1c558     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1c55c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c560     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1c564     04 4E 05 F1 | 	add	fp, #4
1c568     A7 14 02 FB | 	rdlong	arg02, fp
1c56c     04 4E 85 F1 | 	sub	fp, #4
1c570     00 17 06 F6 | 	mov	arg03, #256
1c574     A4 4A B0 FD | 	call	#__system__strncpy
1c578     4C 00 90 FD | 	jmp	#LR__2451
1c57c                 | LR__2450
1c57c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1c580     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1c584     38 4E 05 F1 | 	add	fp, #56
1c588     A7 12 62 FC | 	wrlong	arg01, fp
1c58c     38 4E 85 F1 | 	sub	fp, #56
1c590     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1c594     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1c598     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1c59c     00 17 06 F6 | 	mov	arg03, #256
1c5a0     78 4A B0 FD | 	call	#__system__strncpy
1c5a4     38 4E 05 F1 | 	add	fp, #56
1c5a8     A7 12 02 FB | 	rdlong	arg01, fp
1c5ac     34 4E 85 F1 | 	sub	fp, #52
1c5b0     A7 14 02 FB | 	rdlong	arg02, fp
1c5b4     04 4E 85 F1 | 	sub	fp, #4
1c5b8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1c5bc     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1c5c0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1c5c4     10 00 B0 FD | 	call	#__system____getvfsforfile
1c5c8                 | LR__2451
1c5c8     00 FA 05 F6 | 	mov	result1, #0
1c5cc                 | LR__2452
1c5cc     A7 F0 03 F6 | 	mov	ptra, fp
1c5d0     B2 00 A0 FD | 	call	#popregs_
1c5d4                 | __system___chdir_ret
1c5d4     2D 00 64 FD | 	ret
1c5d8                 | 
1c5d8                 | __system____getvfsforfile
1c5d8     0E 4A 05 F6 | 	mov	COUNT_, #14
1c5dc     A8 00 A0 FD | 	call	#pushregs_
1c5e0     09 1F 02 F6 | 	mov	local01, arg01
1c5e4     0A 21 02 F6 | 	mov	local02, arg02
1c5e8     0B 23 02 F6 | 	mov	local03, arg03
1c5ec     97 10 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1c5f0                 | LR__2460
1c5f0     10 FB C1 FA | 	rdbyte	result1, local02
1c5f4     2F FA 0D F2 | 	cmp	result1, #47 wz
1c5f8     01 20 06 A1 |  if_e	add	local02, #1
1c5fc     10 25 C2 AA |  if_e	rdbyte	local04, local02
1c600     01 20 86 A1 |  if_e	sub	local02, #1
1c604     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1c608     01 20 06 A1 |  if_e	add	local02, #1
1c60c     E0 FF 9F AD |  if_e	jmp	#LR__2460
1c610                 | LR__2461
1c610     10 25 C2 FA | 	rdbyte	local04, local02
1c614     2F 24 0E F2 | 	cmp	local04, #47 wz
1c618     14 00 90 5D |  if_ne	jmp	#LR__2462
1c61c     0F 13 02 F6 | 	mov	arg01, local01
1c620     10 15 02 F6 | 	mov	arg02, local02
1c624     00 17 06 F6 | 	mov	arg03, #256
1c628     F0 49 B0 FD | 	call	#__system__strncpy
1c62c     7C 00 90 FD | 	jmp	#LR__2464
1c630                 | LR__2462
1c630     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1c634     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1c638     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1c63c     0F 13 02 F6 | 	mov	arg01, local01
1c640     00 17 06 F6 | 	mov	arg03, #256
1c644     D4 49 B0 FD | 	call	#__system__strncpy
1c648     10 25 CA FA | 	rdbyte	local04, local02 wz
1c64c     5C 00 90 AD |  if_e	jmp	#LR__2463
1c650     10 25 C2 FA | 	rdbyte	local04, local02
1c654     2E 24 0E F2 | 	cmp	local04, #46 wz
1c658     01 20 06 A1 |  if_e	add	local02, #1
1c65c     10 27 C2 AA |  if_e	rdbyte	local05, local02
1c660     01 20 86 A1 |  if_e	sub	local02, #1
1c664     13 29 02 A6 |  if_e	mov	local06, local05
1c668     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1c66c     3C 00 90 AD |  if_e	jmp	#LR__2463
1c670     0F 27 C2 FA | 	rdbyte	local05, local01
1c674     2F 26 0E F2 | 	cmp	local05, #47 wz
1c678     01 1E 06 A1 |  if_e	add	local01, #1
1c67c     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1c680     01 1E 86 A1 |  if_e	sub	local01, #1
1c684     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1c688     59 01 00 5F 
1c68c     EC 15 06 56 |  if_ne	mov	arg02, ##@LR__4520
1c690     0F 13 02 56 |  if_ne	mov	arg01, local01
1c694     00 17 06 56 |  if_ne	mov	arg03, #256
1c698     CC 49 B0 5D |  if_ne	call	#__system__strncat
1c69c     0F 13 02 F6 | 	mov	arg01, local01
1c6a0     10 15 02 F6 | 	mov	arg02, local02
1c6a4     00 17 06 F6 | 	mov	arg03, #256
1c6a8     BC 49 B0 FD | 	call	#__system__strncat
1c6ac                 | LR__2463
1c6ac                 | LR__2464
1c6ac     0F 13 02 F6 | 	mov	arg01, local01
1c6b0     74 4B B0 FD | 	call	#__system___normalizeName
1c6b4     0F 25 CA FA | 	rdbyte	local04, local01 wz
1c6b8     1C 00 90 AD |  if_e	jmp	#LR__2465
1c6bc     0F 25 C2 FA | 	rdbyte	local04, local01
1c6c0     2F 24 0E F2 | 	cmp	local04, #47 wz
1c6c4     01 1E 06 A1 |  if_e	add	local01, #1
1c6c8     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1c6cc     01 1E 86 A1 |  if_e	sub	local01, #1
1c6d0     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1c6d4     18 00 90 5D |  if_ne	jmp	#LR__2466
1c6d8                 | LR__2465
1c6d8     01 00 00 FF 
1c6dc     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1c6e0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1c6e4     01 00 00 FF 
1c6e8     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1c6ec     EC 01 90 FD | 	jmp	#LR__2480
1c6f0                 | LR__2466
1c6f0     00 2A 06 F6 | 	mov	local07, #0
1c6f4                 | LR__2467
1c6f4     04 2A 56 F2 | 	cmps	local07, #4 wc
1c6f8     CC 01 90 3D |  if_ae	jmp	#LR__2479
1c6fc     15 29 02 F6 | 	mov	local06, local07
1c700     02 28 66 F0 | 	shl	local06, #2
1c704     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c708     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1c70c     14 29 0A FB | 	rdlong	local06, local06 wz
1c710     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c714     A8 01 90 AD |  if_e	jmp	#LR__2478
1c718     15 25 02 F6 | 	mov	local04, local07
1c71c     02 24 66 F0 | 	shl	local04, #2
1c720     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c724     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1c728     12 13 02 FB | 	rdlong	arg01, local04
1c72c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c730     09 2D 02 F6 | 	mov	local08, arg01
1c734     97 06 48 FB | 	callpa	#(@LR__2469-@LR__2468)>>2,fcache_load_ptr_
1c738                 | LR__2468
1c738     16 FB C9 FA | 	rdbyte	result1, local08 wz
1c73c     01 2C 06 51 |  if_ne	add	local08, #1
1c740     F4 FF 9F 5D |  if_ne	jmp	#LR__2468
1c744                 | LR__2469
1c744     09 2D 82 F1 | 	sub	local08, arg01
1c748     16 2F 02 F6 | 	mov	local09, local08
1c74c     17 25 02 F6 | 	mov	local04, local09
1c750     0F 25 02 F1 | 	add	local04, local01
1c754     12 29 C2 FA | 	rdbyte	local06, local04
1c758     2F 28 0E F2 | 	cmp	local06, #47 wz
1c75c     17 31 02 56 |  if_ne	mov	local10, local09
1c760     0F 31 02 51 |  if_ne	add	local10, local01
1c764     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1c768     54 01 90 5D |  if_ne	jmp	#LR__2477
1c76c     15 17 02 F6 | 	mov	arg03, local07
1c770     02 16 66 F0 | 	shl	arg03, #2
1c774     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1c778     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1c77c     0B 15 02 FB | 	rdlong	arg02, arg03
1c780     17 17 02 F6 | 	mov	arg03, local09
1c784     0F 13 02 F6 | 	mov	arg01, local01
1c788     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1c78c     38 49 B0 FD | 	call	#__system__strncmp
1c790     00 FA 4D F2 | 	cmps	result1, #0 wz
1c794     28 01 90 5D |  if_ne	jmp	#LR__2477
1c798     15 33 02 F6 | 	mov	local11, local07
1c79c     02 32 66 F0 | 	shl	local11, #2
1c7a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1c7a4     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1c7a8     19 35 02 FB | 	rdlong	local12, local11
1c7ac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1c7b0     97 22 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1c7b4                 | LR__2470
1c7b4     17 29 02 F6 | 	mov	local06, local09
1c7b8     01 28 06 F1 | 	add	local06, #1
1c7bc     0F 29 02 F1 | 	add	local06, local01
1c7c0     14 33 C2 FA | 	rdbyte	local11, local06
1c7c4     2E 32 0E F2 | 	cmp	local11, #46 wz
1c7c8     2C 00 90 5D |  if_ne	jmp	#LR__2472
1c7cc     17 33 02 F6 | 	mov	local11, local09
1c7d0     02 32 06 F1 | 	add	local11, #2
1c7d4     0F 33 02 F1 | 	add	local11, local01
1c7d8     19 31 C2 FA | 	rdbyte	local10, local11
1c7dc     2F 30 0E F2 | 	cmp	local10, #47 wz
1c7e0     17 37 02 56 |  if_ne	mov	local13, local09
1c7e4     02 36 06 51 |  if_ne	add	local13, #2
1c7e8     0F 37 02 51 |  if_ne	add	local13, local01
1c7ec     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1c7f0     01 2E 06 A1 |  if_e	add	local09, #1
1c7f4     BC FF 9F AD |  if_e	jmp	#LR__2470
1c7f8                 | LR__2471
1c7f8                 | LR__2472
1c7f8     00 22 0E F2 | 	cmp	local03, #0 wz
1c7fc     11 13 02 56 |  if_ne	mov	arg01, local03
1c800     0F 15 02 56 |  if_ne	mov	arg02, local01
1c804     00 17 06 56 |  if_ne	mov	arg03, #256
1c808     10 48 B0 5D |  if_ne	call	#__system__strncpy
1c80c     0F 15 02 F6 | 	mov	arg02, local01
1c810     17 15 02 F1 | 	add	arg02, local09
1c814     01 14 06 F1 | 	add	arg02, #1
1c818     0F 13 02 F6 | 	mov	arg01, local01
1c81c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1c820     0F 13 02 F6 | 	mov	arg01, local01
1c824     09 2D 02 F6 | 	mov	local08, arg01
1c828     97 06 48 FB | 	callpa	#(@LR__2474-@LR__2473)>>2,fcache_load_ptr_
1c82c                 | LR__2473
1c82c     16 FB C9 FA | 	rdbyte	result1, local08 wz
1c830     01 2C 06 51 |  if_ne	add	local08, #1
1c834     F4 FF 9F 5D |  if_ne	jmp	#LR__2473
1c838                 | LR__2474
1c838     09 2D 82 F1 | 	sub	local08, arg01
1c83c     16 2F 02 F6 | 	mov	local09, local08
1c840                 | LR__2475
1c840     01 2E 56 F2 | 	cmps	local09, #1 wc
1c844     70 00 90 CD |  if_b	jmp	#LR__2476
1c848     17 25 02 F6 | 	mov	local04, local09
1c84c     0F 25 02 F1 | 	add	local04, local01
1c850     12 33 C2 FA | 	rdbyte	local11, local04
1c854     2F 32 0E F2 | 	cmp	local11, #47 wz
1c858     17 33 02 A6 |  if_e	mov	local11, local09
1c85c     0F 33 02 A1 |  if_e	add	local11, local01
1c860     19 01 48 AC |  if_e	wrbyte	#0, local11
1c864     01 2E 86 A1 |  if_e	sub	local09, #1
1c868     D4 FF 9F AD |  if_e	jmp	#LR__2475
1c86c     17 25 02 F6 | 	mov	local04, local09
1c870     0F 25 02 F1 | 	add	local04, local01
1c874     12 33 C2 FA | 	rdbyte	local11, local04
1c878     2E 32 0E F2 | 	cmp	local11, #46 wz
1c87c     38 00 90 5D |  if_ne	jmp	#LR__2476
1c880     02 2E 56 F2 | 	cmps	local09, #2 wc
1c884     30 00 90 CD |  if_b	jmp	#LR__2476
1c888     17 39 02 F6 | 	mov	local14, local09
1c88c     01 38 86 F1 | 	sub	local14, #1
1c890     0F 39 02 F1 | 	add	local14, local01
1c894     1C 27 C2 FA | 	rdbyte	local05, local14
1c898     2F 26 0E F2 | 	cmp	local05, #47 wz
1c89c     18 00 90 5D |  if_ne	jmp	#LR__2476
1c8a0     17 25 02 F6 | 	mov	local04, local09
1c8a4     01 24 86 F1 | 	sub	local04, #1
1c8a8     0F 25 02 F1 | 	add	local04, local01
1c8ac     12 01 48 FC | 	wrbyte	#0, local04
1c8b0     02 2E 86 F1 | 	sub	local09, #2
1c8b4     88 FF 9F FD | 	jmp	#LR__2475
1c8b8                 | LR__2476
1c8b8     1A FB 01 F6 | 	mov	result1, local12
1c8bc     1C 00 90 FD | 	jmp	#LR__2480
1c8c0                 | LR__2477
1c8c0                 | LR__2478
1c8c0     01 2A 06 F1 | 	add	local07, #1
1c8c4     2C FE 9F FD | 	jmp	#LR__2467
1c8c8                 | LR__2479
1c8c8     03 00 00 FF 
1c8cc     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1c8d0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1c8d4     03 00 00 FF 
1c8d8     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1c8dc                 | LR__2480
1c8dc     A7 F0 03 F6 | 	mov	ptra, fp
1c8e0     B2 00 A0 FD | 	call	#popregs_
1c8e4                 | __system____getvfsforfile_ret
1c8e4     2D 00 64 FD | 	ret
1c8e8                 | 
1c8e8                 | __system___basic_open
1c8e8     05 4A 05 F6 | 	mov	COUNT_, #5
1c8ec     A8 00 A0 FD | 	call	#pushregs_
1c8f0     0A 1F 02 F6 | 	mov	local01, arg02
1c8f4     0B 21 02 F6 | 	mov	local02, arg03
1c8f8     0C 23 02 F6 | 	mov	local03, arg04
1c8fc     00 24 06 F6 | 	mov	local04, #0
1c900     F0 46 B0 FD | 	call	#__system____getftab
1c904     FD 26 0A F6 | 	mov	local05, result1 wz
1c908     18 00 90 5D |  if_ne	jmp	#LR__2490
1c90c     EE 12 02 F6 | 	mov	arg01, abortchain
1c910     0C 14 06 F6 | 	mov	arg02, #12
1c914     01 16 06 F6 | 	mov	arg03, #1
1c918     DA 00 A0 FD | 	call	#__longjmp
1c91c     01 FA 65 F6 | 	neg	result1, #1
1c920     10 01 90 FD | 	jmp	#LR__2499
1c924                 | LR__2490
1c924     08 26 06 F1 | 	add	local05, #8
1c928     13 FB 09 FB | 	rdlong	result1, local05 wz
1c92c     08 26 86 F1 | 	sub	local05, #8
1c930     13 13 02 56 |  if_ne	mov	arg01, local05
1c934     4C 3E B0 5D |  if_ne	call	#__system___closeraw
1c938     00 1E 0E F2 | 	cmp	local01, #0 wz
1c93c     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1c940     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1c944     3C 00 90 AD |  if_e	jmp	#LR__2492
1c948     0C 12 06 F6 | 	mov	arg01, #12
1c94c     38 33 B0 FD | 	call	#__system___gc_alloc_managed
1c950     FD 24 0A F6 | 	mov	local04, result1 wz
1c954     18 00 90 5D |  if_ne	jmp	#LR__2491
1c958     EE 12 02 F6 | 	mov	arg01, abortchain
1c95c     07 14 06 F6 | 	mov	arg02, #7
1c960     01 16 06 F6 | 	mov	arg03, #1
1c964     DA 00 A0 FD | 	call	#__longjmp
1c968     01 FA 65 F6 | 	neg	result1, #1
1c96c     C4 00 90 FD | 	jmp	#LR__2499
1c970                 | LR__2491
1c970     12 01 68 FC | 	wrlong	#0, local04
1c974     04 24 06 F1 | 	add	local04, #4
1c978     12 01 68 FC | 	wrlong	#0, local04
1c97c     04 24 86 F1 | 	sub	local04, #4
1c980     13 25 62 FC | 	wrlong	local04, local05
1c984                 | LR__2492
1c984     00 1E 0E F2 | 	cmp	local01, #0 wz
1c988     20 00 90 AD |  if_e	jmp	#LR__2493
1c98c     12 1F 62 FC | 	wrlong	local01, local04
1c990     12 FB 01 F6 | 	mov	result1, local04
1c994     00 B0 03 FF 
1c998     00 FA 45 F5 | 	or	result1, ##123731968
1c99c     1C 26 06 F1 | 	add	local05, #28
1c9a0     13 FB 61 FC | 	wrlong	result1, local05
1c9a4     1C 26 86 F1 | 	sub	local05, #28
1c9a8     0C 00 90 FD | 	jmp	#LR__2494
1c9ac                 | LR__2493
1c9ac     1C 26 06 F1 | 	add	local05, #28
1c9b0     13 01 68 FC | 	wrlong	#0, local05
1c9b4     1C 26 86 F1 | 	sub	local05, #28
1c9b8                 | LR__2494
1c9b8     00 20 0E F2 | 	cmp	local02, #0 wz
1c9bc     28 00 90 AD |  if_e	jmp	#LR__2495
1c9c0     04 24 06 F1 | 	add	local04, #4
1c9c4     12 21 62 FC | 	wrlong	local02, local04
1c9c8     04 24 86 F1 | 	sub	local04, #4
1c9cc     12 FB 01 F6 | 	mov	result1, local04
1c9d0     00 B8 03 FF 
1c9d4     00 FA 45 F5 | 	or	result1, ##124780544
1c9d8     20 26 06 F1 | 	add	local05, #32
1c9dc     13 FB 61 FC | 	wrlong	result1, local05
1c9e0     20 26 86 F1 | 	sub	local05, #32
1c9e4     0C 00 90 FD | 	jmp	#LR__2496
1c9e8                 | LR__2495
1c9e8     20 26 06 F1 | 	add	local05, #32
1c9ec     13 01 68 FC | 	wrlong	#0, local05
1c9f0     20 26 86 F1 | 	sub	local05, #32
1c9f4                 | LR__2496
1c9f4     00 22 0E F2 | 	cmp	local03, #0 wz
1c9f8     20 00 90 AD |  if_e	jmp	#LR__2497
1c9fc     08 24 06 F1 | 	add	local04, #8
1ca00     12 23 62 FC | 	wrlong	local03, local04
1ca04     08 24 86 F1 | 	sub	local04, #8
1ca08     77 24 26 F4 | 	bith	local04, #119
1ca0c     24 26 06 F1 | 	add	local05, #36
1ca10     13 25 62 FC | 	wrlong	local04, local05
1ca14     24 26 86 F1 | 	sub	local05, #36
1ca18     0C 00 90 FD | 	jmp	#LR__2498
1ca1c                 | LR__2497
1ca1c     24 26 06 F1 | 	add	local05, #36
1ca20     13 01 68 FC | 	wrlong	#0, local05
1ca24     24 26 86 F1 | 	sub	local05, #36
1ca28                 | LR__2498
1ca28     08 26 06 F1 | 	add	local05, #8
1ca2c     13 0F 68 FC | 	wrlong	#7, local05
1ca30     00 FA 05 F6 | 	mov	result1, #0
1ca34                 | LR__2499
1ca34     A7 F0 03 F6 | 	mov	ptra, fp
1ca38     B2 00 A0 FD | 	call	#popregs_
1ca3c                 | __system___basic_open_ret
1ca3c     2D 00 64 FD | 	ret
1ca40                 | 
1ca40                 | __system___basic_open_string
1ca40     04 4A 05 F6 | 	mov	COUNT_, #4
1ca44     A8 00 A0 FD | 	call	#pushregs_
1ca48     0A 1F 02 F6 | 	mov	local01, arg02
1ca4c     0B 21 02 F6 | 	mov	local02, arg03
1ca50     A0 45 B0 FD | 	call	#__system____getftab
1ca54     FD 22 0A F6 | 	mov	local03, result1 wz
1ca58     18 00 90 5D |  if_ne	jmp	#LR__2500
1ca5c     EE 12 02 F6 | 	mov	arg01, abortchain
1ca60     0C 14 06 F6 | 	mov	arg02, #12
1ca64     01 16 06 F6 | 	mov	arg03, #1
1ca68     DA 00 A0 FD | 	call	#__longjmp
1ca6c     01 FA 65 F6 | 	neg	result1, #1
1ca70     58 00 90 FD | 	jmp	#LR__2502
1ca74                 | LR__2500
1ca74     08 22 06 F1 | 	add	local03, #8
1ca78     11 19 0A FB | 	rdlong	arg04, local03 wz
1ca7c     08 22 86 F1 | 	sub	local03, #8
1ca80     11 13 02 56 |  if_ne	mov	arg01, local03
1ca84     FC 3C B0 5D |  if_ne	call	#__system___closeraw
1ca88     0F 15 02 F6 | 	mov	arg02, local01
1ca8c     10 17 02 F6 | 	mov	arg03, local02
1ca90     11 13 02 F6 | 	mov	arg01, local03
1ca94     B6 19 06 F6 | 	mov	arg04, #438
1ca98     E8 39 B0 FD | 	call	#__system___openraw
1ca9c     FD 24 02 F6 | 	mov	local04, result1
1caa0     00 24 56 F2 | 	cmps	local04, #0 wc
1caa4     20 00 90 3D |  if_ae	jmp	#LR__2501
1caa8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1caac     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1cab0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1cab4     EE 12 02 F6 | 	mov	arg01, abortchain
1cab8     01 16 06 F6 | 	mov	arg03, #1
1cabc     DA 00 A0 FD | 	call	#__longjmp
1cac0     01 FA 65 F6 | 	neg	result1, #1
1cac4     04 00 90 FD | 	jmp	#LR__2502
1cac8                 | LR__2501
1cac8     12 FB 01 F6 | 	mov	result1, local04
1cacc                 | LR__2502
1cacc     A7 F0 03 F6 | 	mov	ptra, fp
1cad0     B2 00 A0 FD | 	call	#popregs_
1cad4                 | __system___basic_open_string_ret
1cad4     2D 00 64 FD | 	ret
1cad8                 | 
1cad8                 | __system___basic_print_nl
1cad8     0A 14 06 F6 | 	mov	arg02, #10
1cadc     00 16 06 F6 | 	mov	arg03, #0
1cae0     08 00 B0 FD | 	call	#__system___basic_print_char
1cae4     01 FA 05 F6 | 	mov	result1, #1
1cae8                 | __system___basic_print_nl_ret
1cae8     2D 00 64 FD | 	ret
1caec                 | 
1caec                 | __system___basic_print_char
1caec     03 4A 05 F6 | 	mov	COUNT_, #3
1caf0     A8 00 A0 FD | 	call	#pushregs_
1caf4     0A 1F 02 F6 | 	mov	local01, arg02
1caf8     4C 4C B0 FD | 	call	#__system___gettxfunc
1cafc     FD 20 0A F6 | 	mov	local02, result1 wz
1cb00     00 FA 05 A6 |  if_e	mov	result1, #0
1cb04     30 00 90 AD |  if_e	jmp	#LR__2510
1cb08     10 23 02 F6 | 	mov	local03, local02
1cb0c     13 20 46 F7 | 	zerox	local02, #19
1cb10     14 22 46 F0 | 	shr	local03, #20
1cb14     02 22 66 F0 | 	shl	local03, #2
1cb18     ED 22 02 F1 | 	add	local03, __methods__
1cb1c     11 23 02 FB | 	rdlong	local03, local03
1cb20     0F 13 02 F6 | 	mov	arg01, local01
1cb24     F2 1E 02 F6 | 	mov	local01, objptr
1cb28     10 E5 01 F6 | 	mov	objptr, local02
1cb2c     2D 22 62 FD | 	call	local03
1cb30     0F E5 01 F6 | 	mov	objptr, local01
1cb34     01 FA 05 F6 | 	mov	result1, #1
1cb38                 | LR__2510
1cb38     A7 F0 03 F6 | 	mov	ptra, fp
1cb3c     B2 00 A0 FD | 	call	#popregs_
1cb40                 | __system___basic_print_char_ret
1cb40     2D 00 64 FD | 	ret
1cb44                 | 
1cb44                 | __system___basic_print_string
1cb44     03 4A 05 F6 | 	mov	COUNT_, #3
1cb48     A8 00 A0 FD | 	call	#pushregs_
1cb4c     0A 1F 02 F6 | 	mov	local01, arg02
1cb50     0B 21 02 F6 | 	mov	local02, arg03
1cb54     F0 4B B0 FD | 	call	#__system___gettxfunc
1cb58     FD 22 0A F6 | 	mov	local03, result1 wz
1cb5c     00 FA 05 A6 |  if_e	mov	result1, #0
1cb60     18 00 90 AD |  if_e	jmp	#LR__2520
1cb64     00 1E 0E F2 | 	cmp	local01, #0 wz
1cb68     00 FA 05 A6 |  if_e	mov	result1, #0
1cb6c     11 13 02 56 |  if_ne	mov	arg01, local03
1cb70     10 15 02 56 |  if_ne	mov	arg02, local02
1cb74     0F 17 02 56 |  if_ne	mov	arg03, local01
1cb78     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1cb7c                 | LR__2520
1cb7c     A7 F0 03 F6 | 	mov	ptra, fp
1cb80     B2 00 A0 FD | 	call	#popregs_
1cb84                 | __system___basic_print_string_ret
1cb84     2D 00 64 FD | 	ret
1cb88                 | 
1cb88                 | __system___basic_print_integer
1cb88     04 4A 05 F6 | 	mov	COUNT_, #4
1cb8c     A8 00 A0 FD | 	call	#pushregs_
1cb90     0A 1F 02 F6 | 	mov	local01, arg02
1cb94     0B 21 02 F6 | 	mov	local02, arg03
1cb98     0C 23 02 F6 | 	mov	local03, arg04
1cb9c     A8 4B B0 FD | 	call	#__system___gettxfunc
1cba0     FD 24 0A F6 | 	mov	local04, result1 wz
1cba4     00 FA 05 A6 |  if_e	mov	result1, #0
1cba8     12 13 02 56 |  if_ne	mov	arg01, local04
1cbac     10 15 02 56 |  if_ne	mov	arg02, local02
1cbb0     0F 17 02 56 |  if_ne	mov	arg03, local01
1cbb4     11 19 02 56 |  if_ne	mov	arg04, local03
1cbb8     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1cbbc     A7 F0 03 F6 | 	mov	ptra, fp
1cbc0     B2 00 A0 FD | 	call	#popregs_
1cbc4                 | __system___basic_print_integer_ret
1cbc4     2D 00 64 FD | 	ret
1cbc8                 | 
1cbc8                 | __system___basic_print_unsigned
1cbc8     03 4A 05 F6 | 	mov	COUNT_, #3
1cbcc     A8 00 A0 FD | 	call	#pushregs_
1cbd0     0A 1F 02 F6 | 	mov	local01, arg02
1cbd4     0B 21 02 F6 | 	mov	local02, arg03
1cbd8     0C 23 02 F6 | 	mov	local03, arg04
1cbdc     68 4B B0 FD | 	call	#__system___gettxfunc
1cbe0     FD 12 0A F6 | 	mov	arg01, result1 wz
1cbe4     00 FA 05 A6 |  if_e	mov	result1, #0
1cbe8     3A 20 26 54 |  if_ne	bith	local02, #58
1cbec     10 15 02 56 |  if_ne	mov	arg02, local02
1cbf0     0F 17 02 56 |  if_ne	mov	arg03, local01
1cbf4     11 19 02 56 |  if_ne	mov	arg04, local03
1cbf8     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1cbfc     A7 F0 03 F6 | 	mov	ptra, fp
1cc00     B2 00 A0 FD | 	call	#popregs_
1cc04                 | __system___basic_print_unsigned_ret
1cc04     2D 00 64 FD | 	ret
1cc08                 | 
1cc08                 | __system___basic_get_char
1cc08     03 4A 05 F6 | 	mov	COUNT_, #3
1cc0c     A8 00 A0 FD | 	call	#pushregs_
1cc10     78 4B B0 FD | 	call	#__system___getrxfunc
1cc14     FD 1E 0A F6 | 	mov	local01, result1 wz
1cc18     01 FA 65 A6 |  if_e	neg	result1, #1
1cc1c     28 00 90 AD |  if_e	jmp	#LR__2530
1cc20     0F 21 02 F6 | 	mov	local02, local01
1cc24     13 1E 46 F7 | 	zerox	local01, #19
1cc28     14 20 46 F0 | 	shr	local02, #20
1cc2c     02 20 66 F0 | 	shl	local02, #2
1cc30     ED 20 02 F1 | 	add	local02, __methods__
1cc34     10 21 02 FB | 	rdlong	local02, local02
1cc38     F2 22 02 F6 | 	mov	local03, objptr
1cc3c     0F E5 01 F6 | 	mov	objptr, local01
1cc40     2D 20 62 FD | 	call	local02
1cc44     11 E5 01 F6 | 	mov	objptr, local03
1cc48                 | LR__2530
1cc48     A7 F0 03 F6 | 	mov	ptra, fp
1cc4c     B2 00 A0 FD | 	call	#popregs_
1cc50                 | __system___basic_get_char_ret
1cc50     2D 00 64 FD | 	ret
1cc54                 | 
1cc54                 | __system___basic_get
1cc54     04 4A 05 F6 | 	mov	COUNT_, #4
1cc58     A8 00 A0 FD | 	call	#pushregs_
1cc5c     0D 1F 02 F6 | 	mov	local01, arg05
1cc60     0F 19 02 FD | 	qmul	arg04, local01
1cc64     09 21 02 F6 | 	mov	local02, arg01
1cc68     0B 23 02 F6 | 	mov	local03, arg03
1cc6c     00 14 0E F2 | 	cmp	arg02, #0 wz
1cc70     01 14 86 51 |  if_ne	sub	arg02, #1
1cc74     10 13 02 56 |  if_ne	mov	arg01, local02
1cc78     00 16 06 56 |  if_ne	mov	arg03, #0
1cc7c     18 24 62 FD | 	getqx	local04
1cc80     B8 41 B0 5D |  if_ne	call	#__system__lseek
1cc84     11 15 02 F6 | 	mov	arg02, local03
1cc88     12 17 02 F6 | 	mov	arg03, local04
1cc8c     10 13 02 F6 | 	mov	arg01, local02
1cc90     30 41 B0 FD | 	call	#__system__read
1cc94     FD 24 02 F6 | 	mov	local04, result1
1cc98     01 24 56 F2 | 	cmps	local04, #1 wc
1cc9c     10 00 90 CD |  if_b	jmp	#LR__2540
1cca0     12 65 02 F6 | 	mov	muldiva_, local04
1cca4     0F 67 02 F6 | 	mov	muldivb_, local01
1cca8     BA 00 A0 FD | 	call	#divide_
1ccac     33 25 02 F6 | 	mov	local04, muldivb_
1ccb0                 | LR__2540
1ccb0     12 FB 01 F6 | 	mov	result1, local04
1ccb4     A7 F0 03 F6 | 	mov	ptra, fp
1ccb8     B2 00 A0 FD | 	call	#popregs_
1ccbc                 | __system___basic_get_ret
1ccbc     2D 00 64 FD | 	ret
1ccc0                 | 
1ccc0                 | __system____lockio
1ccc0     0C 4B B0 FD | 	call	#__system___getiolock_0472
1ccc4     FD 12 02 F6 | 	mov	arg01, result1
1ccc8     74 F1 BF FD | 	call	#__system___lockmem
1cccc     00 FA 05 F6 | 	mov	result1, #0
1ccd0                 | __system____lockio_ret
1ccd0     2D 00 64 FD | 	ret
1ccd4                 | 
1ccd4                 | __system____unlockio
1ccd4     F8 4A B0 FD | 	call	#__system___getiolock_0472
1ccd8     FD 00 68 FC | 	wrlong	#0, result1
1ccdc     00 FA 05 F6 | 	mov	result1, #0
1cce0                 | __system____unlockio_ret
1cce0     2D 00 64 FD | 	ret
1cce4                 | 
1cce4                 | __system___fmtchar
1cce4     00 4A 05 F6 | 	mov	COUNT_, #0
1cce8     A8 00 A0 FD | 	call	#pushregs_
1ccec     10 F0 07 F1 | 	add	ptra, #16
1ccf0     04 4E 05 F1 | 	add	fp, #4
1ccf4     A7 12 62 FC | 	wrlong	arg01, fp
1ccf8     04 4E 05 F1 | 	add	fp, #4
1ccfc     A7 14 62 FC | 	wrlong	arg02, fp
1cd00     04 4E 05 F1 | 	add	fp, #4
1cd04     A7 16 62 FC | 	wrlong	arg03, fp
1cd08     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1cd0c     A7 16 62 FC | 	wrlong	arg03, fp
1cd10     08 4E 85 F1 | 	sub	fp, #8
1cd14     A7 12 02 FB | 	rdlong	arg01, fp
1cd18     04 4E 05 F1 | 	add	fp, #4
1cd1c     A7 14 02 FB | 	rdlong	arg02, fp
1cd20     04 4E 05 F1 | 	add	fp, #4
1cd24     A7 16 02 F6 | 	mov	arg03, fp
1cd28     0C 4E 85 F1 | 	sub	fp, #12
1cd2c     0C 00 B0 FD | 	call	#__system___fmtstr
1cd30     A7 F0 03 F6 | 	mov	ptra, fp
1cd34     B2 00 A0 FD | 	call	#popregs_
1cd38                 | __system___fmtchar_ret
1cd38     2D 00 64 FD | 	ret
1cd3c                 | 
1cd3c                 | __system___fmtstr
1cd3c     09 4A 05 F6 | 	mov	COUNT_, #9
1cd40     A8 00 A0 FD | 	call	#pushregs_
1cd44     09 1F 02 F6 | 	mov	local01, arg01
1cd48     0A 21 02 F6 | 	mov	local02, arg02
1cd4c     0B 23 02 F6 | 	mov	local03, arg03
1cd50     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1cd54     11 13 02 F6 | 	mov	arg01, local03
1cd58     09 25 02 F6 | 	mov	local04, arg01
1cd5c     97 06 48 FB | 	callpa	#(@LR__2551-@LR__2550)>>2,fcache_load_ptr_
1cd60                 | LR__2550
1cd60     12 FB C9 FA | 	rdbyte	result1, local04 wz
1cd64     01 24 06 51 |  if_ne	add	local04, #1
1cd68     F4 FF 9F 5D |  if_ne	jmp	#LR__2550
1cd6c                 | LR__2551
1cd6c     09 25 82 F1 | 	sub	local04, arg01
1cd70     00 18 0E F2 | 	cmp	arg04, #0 wz
1cd74     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1cd78     10 15 02 F6 | 	mov	arg02, local02
1cd7c     12 17 02 F6 | 	mov	arg03, local04
1cd80     0F 13 02 F6 | 	mov	arg01, local01
1cd84     02 18 06 F6 | 	mov	arg04, #2
1cd88     5C 46 B0 FD | 	call	#__system___fmtpad
1cd8c     FD 26 02 F6 | 	mov	local05, result1
1cd90     00 26 56 F2 | 	cmps	local05, #0 wc
1cd94     13 FB 01 C6 |  if_b	mov	result1, local05
1cd98     80 00 90 CD |  if_b	jmp	#LR__2554
1cd9c     01 24 56 F2 | 	cmps	local04, #1 wc
1cda0     50 00 90 CD |  if_b	jmp	#LR__2553
1cda4     12 29 02 F6 | 	mov	local06, local04
1cda8                 | LR__2552
1cda8     0F 2B 02 F6 | 	mov	local07, local01
1cdac     0F 2D 02 F6 | 	mov	local08, local01
1cdb0     13 2A 46 F7 | 	zerox	local07, #19
1cdb4     14 2C 46 F0 | 	shr	local08, #20
1cdb8     02 2C 66 F0 | 	shl	local08, #2
1cdbc     ED 2C 02 F1 | 	add	local08, __methods__
1cdc0     16 2D 02 FB | 	rdlong	local08, local08
1cdc4     11 13 C2 FA | 	rdbyte	arg01, local03
1cdc8     F2 2E 02 F6 | 	mov	local09, objptr
1cdcc     15 E5 01 F6 | 	mov	objptr, local07
1cdd0     01 22 06 F1 | 	add	local03, #1
1cdd4     2D 2C 62 FD | 	call	local08
1cdd8     17 E5 01 F6 | 	mov	objptr, local09
1cddc     FD 2E 02 F6 | 	mov	local09, result1
1cde0     00 2E 56 F2 | 	cmps	local09, #0 wc
1cde4     17 FB 01 C6 |  if_b	mov	result1, local09
1cde8     30 00 90 CD |  if_b	jmp	#LR__2554
1cdec     17 27 02 F1 | 	add	local05, local09
1cdf0     ED 29 6E FB | 	djnz	local06, #LR__2552
1cdf4                 | LR__2553
1cdf4     10 15 02 F6 | 	mov	arg02, local02
1cdf8     12 17 02 F6 | 	mov	arg03, local04
1cdfc     0F 13 02 F6 | 	mov	arg01, local01
1ce00     01 18 06 F6 | 	mov	arg04, #1
1ce04     E0 45 B0 FD | 	call	#__system___fmtpad
1ce08     FD 2E 02 F6 | 	mov	local09, result1
1ce0c     00 2E 56 F2 | 	cmps	local09, #0 wc
1ce10     17 FB 01 C6 |  if_b	mov	result1, local09
1ce14     17 27 02 31 |  if_ae	add	local05, local09
1ce18     13 FB 01 36 |  if_ae	mov	result1, local05
1ce1c                 | LR__2554
1ce1c     A7 F0 03 F6 | 	mov	ptra, fp
1ce20     B2 00 A0 FD | 	call	#popregs_
1ce24                 | __system___fmtstr_ret
1ce24     2D 00 64 FD | 	ret
1ce28                 | 
1ce28                 | __system___fmtnum
1ce28     0B 4A 05 F6 | 	mov	COUNT_, #11
1ce2c     A8 00 A0 FD | 	call	#pushregs_
1ce30     09 1F 02 F6 | 	mov	local01, arg01
1ce34     0A 21 02 F6 | 	mov	local02, arg02
1ce38     0B 23 02 F6 | 	mov	local03, arg03
1ce3c     0C 25 02 F6 | 	mov	local04, arg04
1ce40     F8 27 02 F6 | 	mov	local05, ptra
1ce44     13 29 02 F6 | 	mov	local06, local05
1ce48     00 2A 06 F6 | 	mov	local07, #0
1ce4c     10 2D 02 F6 | 	mov	local08, local02
1ce50     10 2C 46 F0 | 	shr	local08, #16
1ce54     3F 2C 06 F5 | 	and	local08, #63
1ce58     10 2F E2 F8 | 	getbyte	local09, local02, #0
1ce5c     10 31 02 F6 | 	mov	local10, local02
1ce60     1A 30 46 F0 | 	shr	local10, #26
1ce64     03 30 06 F5 | 	and	local10, #3
1ce68     18 33 02 F6 | 	mov	local11, local10
1ce6c     01 2C 56 F2 | 	cmps	local08, #1 wc
1ce70     44 F0 07 F1 | 	add	ptra, #68
1ce74     01 2C 86 31 |  if_ae	sub	local08, #1
1ce78     41 2E 56 F2 | 	cmps	local09, #65 wc
1ce7c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1ce80     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1ce84     03 32 0E F2 | 	cmp	local11, #3 wz
1ce88     00 32 06 A6 |  if_e	mov	local11, #0
1ce8c     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1ce90     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1ce94     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1ce98     00 32 0E F2 | 	cmp	local11, #0 wz
1ce9c     4C 00 90 AD |  if_e	jmp	#LR__2563
1cea0     01 2A 06 F6 | 	mov	local07, #1
1cea4     17 2D 0A F2 | 	cmp	local08, local09 wz
1cea8     18 00 90 5D |  if_ne	jmp	#LR__2561
1ceac     05 2C 6E FB | 	djnz	local08, #LR__2560
1ceb0     0F 13 02 F6 | 	mov	arg01, local01
1ceb4     10 15 02 F6 | 	mov	arg02, local02
1ceb8     23 16 06 F6 | 	mov	arg03, #35
1cebc     24 FE BF FD | 	call	#__system___fmtchar
1cec0     88 00 90 FD | 	jmp	#LR__2567
1cec4                 | LR__2560
1cec4                 | LR__2561
1cec4     02 32 0E F2 | 	cmp	local11, #2 wz
1cec8     14 31 02 A6 |  if_e	mov	local10, local06
1cecc     01 28 06 A1 |  if_e	add	local06, #1
1ced0     18 41 48 AC |  if_e	wrbyte	#32, local10
1ced4     14 00 90 AD |  if_e	jmp	#LR__2562
1ced8     04 32 0E F2 | 	cmp	local11, #4 wz
1cedc     14 5B 48 AC |  if_e	wrbyte	#45, local06
1cee0     01 28 06 A1 |  if_e	add	local06, #1
1cee4     14 57 48 5C |  if_ne	wrbyte	#43, local06
1cee8     01 28 06 51 |  if_ne	add	local06, #1
1ceec                 | LR__2562
1ceec                 | LR__2563
1ceec     14 13 02 F6 | 	mov	arg01, local06
1cef0     11 15 02 F6 | 	mov	arg02, local03
1cef4     12 17 02 F6 | 	mov	arg03, local04
1cef8     16 19 02 F6 | 	mov	arg04, local08
1cefc     00 1A 06 F6 | 	mov	arg05, #0
1cf00     1D 20 2E F4 | 	testbn	local02, #29 wz
1cf04     01 1A 06 56 |  if_ne	mov	arg05, #1
1cf08     A4 45 B0 FD | 	call	#__system___uitoa
1cf0c     FD 2A 02 F1 | 	add	local07, result1
1cf10     17 2B 5A F2 | 	cmps	local07, local09 wcz
1cf14     24 00 90 ED |  if_be	jmp	#LR__2566
1cf18     97 0E 48 FB | 	callpa	#(@LR__2565-@LR__2564)>>2,fcache_load_ptr_
1cf1c                 | LR__2564
1cf1c     17 31 02 F6 | 	mov	local10, local09
1cf20     01 30 56 F2 | 	cmps	local10, #1 wc
1cf24     01 2E 86 F1 | 	sub	local09, #1
1cf28     14 31 02 36 |  if_ae	mov	local10, local06
1cf2c     01 28 06 31 |  if_ae	add	local06, #1
1cf30     18 47 48 3C |  if_ae	wrbyte	#35, local10
1cf34     E4 FF 9F 3D |  if_ae	jmp	#LR__2564
1cf38                 | LR__2565
1cf38     14 01 48 FC | 	wrbyte	#0, local06
1cf3c                 | LR__2566
1cf3c     0F 13 02 F6 | 	mov	arg01, local01
1cf40     10 15 02 F6 | 	mov	arg02, local02
1cf44     13 17 02 F6 | 	mov	arg03, local05
1cf48     F0 FD BF FD | 	call	#__system___fmtstr
1cf4c                 | LR__2567
1cf4c     A7 F0 03 F6 | 	mov	ptra, fp
1cf50     B2 00 A0 FD | 	call	#popregs_
1cf54                 | __system___fmtnum_ret
1cf54     2D 00 64 FD | 	ret
1cf58                 | 
1cf58                 | __system___fmtfloat
1cf58     10 4A 05 F6 | 	mov	COUNT_, #16
1cf5c     A8 00 A0 FD | 	call	#pushregs_
1cf60     24 F1 07 F1 | 	add	ptra, #292
1cf64     04 4E 05 F1 | 	add	fp, #4
1cf68     A7 12 62 FC | 	wrlong	arg01, fp
1cf6c     04 4E 05 F1 | 	add	fp, #4
1cf70     A7 14 62 FC | 	wrlong	arg02, fp
1cf74     04 4E 05 F1 | 	add	fp, #4
1cf78     A7 16 62 FC | 	wrlong	arg03, fp
1cf7c     04 4E 05 F1 | 	add	fp, #4
1cf80     A7 18 62 FC | 	wrlong	arg04, fp
1cf84     0C 4E 05 F1 | 	add	fp, #12
1cf88     A7 14 68 FC | 	wrlong	#10, fp
1cf8c     08 4E 05 F1 | 	add	fp, #8
1cf90     A7 00 68 FC | 	wrlong	#0, fp
1cf94     08 4E 05 F1 | 	add	fp, #8
1cf98     A7 00 68 FC | 	wrlong	#0, fp
1cf9c     08 4E 05 F1 | 	add	fp, #8
1cfa0     A7 00 68 FC | 	wrlong	#0, fp
1cfa4     04 4E 05 F1 | 	add	fp, #4
1cfa8     A7 04 68 FC | 	wrlong	#2, fp
1cfac     04 4E 05 F1 | 	add	fp, #4
1cfb0     A7 00 68 FC | 	wrlong	#0, fp
1cfb4     04 4E 05 F1 | 	add	fp, #4
1cfb8     A7 00 68 FC | 	wrlong	#0, fp
1cfbc     04 4E 05 F1 | 	add	fp, #4
1cfc0     A7 00 68 FC | 	wrlong	#0, fp
1cfc4     04 4E 05 F1 | 	add	fp, #4
1cfc8     A7 00 68 FC | 	wrlong	#0, fp
1cfcc     18 4E 05 F1 | 	add	fp, #24
1cfd0     A7 00 68 FC | 	wrlong	#0, fp
1cfd4     68 4E 05 F1 | 	add	fp, #104
1cfd8     A7 1E 02 F6 | 	mov	local01, fp
1cfdc     08 4E 85 F1 | 	sub	fp, #8
1cfe0     A7 1E 62 FC | 	wrlong	local01, fp
1cfe4     04 4E 05 F1 | 	add	fp, #4
1cfe8     A7 1E 62 FC | 	wrlong	local01, fp
1cfec     BC 4E 85 F1 | 	sub	fp, #188
1cff0     A7 1E 02 FB | 	rdlong	local01, fp
1cff4     10 1E 46 F0 | 	shr	local01, #16
1cff8     3F 1E 06 F5 | 	and	local01, #63
1cffc     B0 4E 05 F1 | 	add	fp, #176
1d000     A7 1E 62 FC | 	wrlong	local01, fp
1d004     B0 4E 85 F1 | 	sub	fp, #176
1d008     A7 1E 02 FB | 	rdlong	local01, fp
1d00c     1C 1E 46 F0 | 	shr	local01, #28
1d010     01 1E 06 F5 | 	and	local01, #1
1d014     08 4F 05 F1 | 	add	fp, #264
1d018     A7 1E 62 FC | 	wrlong	local01, fp
1d01c     58 4E 85 F1 | 	sub	fp, #88
1d020     A7 1E 0A FB | 	rdlong	local01, fp wz
1d024     B8 4E 85 F1 | 	sub	fp, #184
1d028     3C 00 90 5D |  if_ne	jmp	#LR__2571
1d02c     10 4E 05 F1 | 	add	fp, #16
1d030     A7 1E 02 FB | 	rdlong	local01, fp
1d034     10 4E 85 F1 | 	sub	fp, #16
1d038     61 1E 0E F2 | 	cmp	local01, #97 wz
1d03c     18 00 90 5D |  if_ne	jmp	#LR__2570
1d040     B8 4E 05 F1 | 	add	fp, #184
1d044     A7 1A 68 FC | 	wrlong	#13, fp
1d048     84 4E 85 F1 | 	sub	fp, #132
1d04c     A7 02 68 FC | 	wrlong	#1, fp
1d050     34 4E 85 F1 | 	sub	fp, #52
1d054     24 00 90 FD | 	jmp	#LR__2572
1d058                 | LR__2570
1d058     B8 4E 05 F1 | 	add	fp, #184
1d05c     A7 0C 68 FC | 	wrlong	#6, fp
1d060     B8 4E 85 F1 | 	sub	fp, #184
1d064     14 00 90 FD | 	jmp	#LR__2572
1d068                 | LR__2571
1d068     B8 4E 05 F1 | 	add	fp, #184
1d06c     A7 1E 02 FB | 	rdlong	local01, fp
1d070     01 1E 86 F1 | 	sub	local01, #1
1d074     A7 1E 62 FC | 	wrlong	local01, fp
1d078     B8 4E 85 F1 | 	sub	fp, #184
1d07c                 | LR__2572
1d07c     08 4E 05 F1 | 	add	fp, #8
1d080     A7 1E 02 FB | 	rdlong	local01, fp
1d084     16 1E 46 F0 | 	shr	local01, #22
1d088     03 1E 06 F5 | 	and	local01, #3
1d08c     04 4F 05 F1 | 	add	fp, #260
1d090     A7 1E 62 FC | 	wrlong	local01, fp
1d094     04 4F 85 F1 | 	sub	fp, #260
1d098     A7 1E 02 FB | 	rdlong	local01, fp
1d09c     1D 1E 46 F0 | 	shr	local01, #29
1d0a0     01 1E 06 F5 | 	and	local01, #1
1d0a4     B4 4E 05 F1 | 	add	fp, #180
1d0a8     A7 1E 62 FC | 	wrlong	local01, fp
1d0ac     B4 4E 85 F1 | 	sub	fp, #180
1d0b0     A7 1E 02 FB | 	rdlong	local01, fp
1d0b4     0F 1F EA F8 | 	getbyte	local01, local01, #1
1d0b8     60 4E 05 F1 | 	add	fp, #96
1d0bc     A7 1E 62 FC | 	wrlong	local01, fp
1d0c0     60 4E 85 F1 | 	sub	fp, #96
1d0c4     A7 1E 02 FB | 	rdlong	local01, fp
1d0c8     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1d0cc     64 4E 05 F1 | 	add	fp, #100
1d0d0     A7 1E 62 FC | 	wrlong	local01, fp
1d0d4     00 1E 06 F6 | 	mov	local01, #0
1d0d8     5C 4E 85 F1 | 	sub	fp, #92
1d0dc     A7 1A 02 FB | 	rdlong	arg05, fp
1d0e0     65 1A 0E F2 | 	cmp	arg05, #101 wz
1d0e4     01 1E 06 A6 |  if_e	mov	local01, #1
1d0e8     14 4E 05 F1 | 	add	fp, #20
1d0ec     A7 1E 62 FC | 	wrlong	local01, fp
1d0f0     98 4E 05 F1 | 	add	fp, #152
1d0f4     A7 20 0A FB | 	rdlong	local02, fp wz
1d0f8     45 1E 06 56 |  if_ne	mov	local01, #69
1d0fc     65 1E 06 A6 |  if_e	mov	local01, #101
1d100     8C 4E 85 F1 | 	sub	fp, #140
1d104     A7 1E 62 FC | 	wrlong	local01, fp
1d108     20 4E 85 F1 | 	sub	fp, #32
1d10c     A7 1E 02 FB | 	rdlong	local01, fp
1d110     10 4E 85 F1 | 	sub	fp, #16
1d114     61 1E 0E F2 | 	cmp	local01, #97 wz
1d118     4C 00 90 5D |  if_ne	jmp	#LR__2573
1d11c     24 4E 05 F1 | 	add	fp, #36
1d120     A7 02 68 FC | 	wrlong	#1, fp
1d124     98 4E 05 F1 | 	add	fp, #152
1d128     A7 20 0A FB | 	rdlong	local02, fp wz
1d12c     50 1E 06 56 |  if_ne	mov	local01, #80
1d130     70 1E 06 A6 |  if_e	mov	local01, #112
1d134     8C 4E 85 F1 | 	sub	fp, #140
1d138     A7 1E 62 FC | 	wrlong	local01, fp
1d13c     14 4E 85 F1 | 	sub	fp, #20
1d140     A7 04 68 FC | 	wrlong	#2, fp
1d144     1C 4E 05 F1 | 	add	fp, #28
1d148     A7 02 68 FC | 	wrlong	#1, fp
1d14c     84 4E 05 F1 | 	add	fp, #132
1d150     A7 20 0A FB | 	rdlong	local02, fp wz
1d154     58 1E 06 56 |  if_ne	mov	local01, #88
1d158     78 1E 06 A6 |  if_e	mov	local01, #120
1d15c     7C 4E 85 F1 | 	sub	fp, #124
1d160     A7 1E 62 FC | 	wrlong	local01, fp
1d164     40 4E 85 F1 | 	sub	fp, #64
1d168                 | LR__2573
1d168     10 4E 05 F1 | 	add	fp, #16
1d16c     A7 1E 02 FB | 	rdlong	local01, fp
1d170     10 4E 85 F1 | 	sub	fp, #16
1d174     23 1E 0E F2 | 	cmp	local01, #35 wz
1d178     3C 00 90 5D |  if_ne	jmp	#LR__2576
1d17c     48 4E 05 F1 | 	add	fp, #72
1d180     A7 02 68 FC | 	wrlong	#1, fp
1d184     C8 4E 05 F1 | 	add	fp, #200
1d188     A7 1E 0A FB | 	rdlong	local01, fp wz
1d18c     10 4F 85 F1 | 	sub	fp, #272
1d190     18 00 90 AD |  if_e	jmp	#LR__2574
1d194     10 4E 05 F1 | 	add	fp, #16
1d198     A7 CC 68 FC | 	wrlong	#102, fp
1d19c     00 4F 05 F1 | 	add	fp, #256
1d1a0     A7 00 68 FC | 	wrlong	#0, fp
1d1a4     10 4F 85 F1 | 	sub	fp, #272
1d1a8     0C 00 90 FD | 	jmp	#LR__2575
1d1ac                 | LR__2574
1d1ac     10 4F 05 F1 | 	add	fp, #272
1d1b0     A7 02 68 FC | 	wrlong	#1, fp
1d1b4     10 4F 85 F1 | 	sub	fp, #272
1d1b8                 | LR__2575
1d1b8                 | LR__2576
1d1b8     08 4E 05 F1 | 	add	fp, #8
1d1bc     A7 1E 02 FB | 	rdlong	local01, fp
1d1c0     1A 1E 46 F0 | 	shr	local01, #26
1d1c4     03 1E 06 F5 | 	and	local01, #3
1d1c8     5C 4E 05 F1 | 	add	fp, #92
1d1cc     A7 1E 62 FC | 	wrlong	local01, fp
1d1d0     58 4E 85 F1 | 	sub	fp, #88
1d1d4     A7 FA 01 FB | 	rdlong	result1, fp
1d1d8     0C 4E 85 F1 | 	sub	fp, #12
1d1dc     1F FA 4D F0 | 	shr	result1, #31 wz
1d1e0     20 00 90 AD |  if_e	jmp	#LR__2577
1d1e4     2C 4E 05 F1 | 	add	fp, #44
1d1e8     A7 5A 68 FC | 	wrlong	#45, fp
1d1ec     20 4E 85 F1 | 	sub	fp, #32
1d1f0     A7 FA 01 FB | 	rdlong	result1, fp
1d1f4     1F FA E5 F4 | 	bitnot	result1, #31
1d1f8     A7 FA 61 FC | 	wrlong	result1, fp
1d1fc     0C 4E 85 F1 | 	sub	fp, #12
1d200     3C 00 90 FD | 	jmp	#LR__2579
1d204                 | LR__2577
1d204     64 4E 05 F1 | 	add	fp, #100
1d208     A7 1E 02 FB | 	rdlong	local01, fp
1d20c     64 4E 85 F1 | 	sub	fp, #100
1d210     01 1E 0E F2 | 	cmp	local01, #1 wz
1d214     2C 4E 05 A1 |  if_e	add	fp, #44
1d218     A7 56 68 AC |  if_e	wrlong	#43, fp
1d21c     2C 4E 85 A1 |  if_e	sub	fp, #44
1d220     1C 00 90 AD |  if_e	jmp	#LR__2578
1d224     64 4E 05 F1 | 	add	fp, #100
1d228     A7 1E 02 FB | 	rdlong	local01, fp
1d22c     64 4E 85 F1 | 	sub	fp, #100
1d230     02 1E 0E F2 | 	cmp	local01, #2 wz
1d234     2C 4E 05 A1 |  if_e	add	fp, #44
1d238     A7 40 68 AC |  if_e	wrlong	#32, fp
1d23c     2C 4E 85 A1 |  if_e	sub	fp, #44
1d240                 | LR__2578
1d240                 | LR__2579
1d240     08 4E 05 F1 | 	add	fp, #8
1d244     A7 1E 02 FB | 	rdlong	local01, fp
1d248     18 1E 46 F0 | 	shr	local01, #24
1d24c     03 1E 06 F5 | 	and	local01, #3
1d250     3C 4E 05 F1 | 	add	fp, #60
1d254     A7 1E 62 FC | 	wrlong	local01, fp
1d258     00 1E 06 F6 | 	mov	local01, #0
1d25c     18 4E 85 F1 | 	sub	fp, #24
1d260     A7 22 0A FB | 	rdlong	local03, fp wz
1d264     2C 4E 85 F1 | 	sub	fp, #44
1d268     18 00 90 5D |  if_ne	jmp	#LR__2580
1d26c     1C 4E 05 F1 | 	add	fp, #28
1d270     A7 24 02 FB | 	rdlong	local04, fp
1d274     1C 4E 85 F1 | 	sub	fp, #28
1d278     12 27 02 F6 | 	mov	local05, local04
1d27c     0A 26 0E F2 | 	cmp	local05, #10 wz
1d280     04 00 90 AD |  if_e	jmp	#LR__2581
1d284                 | LR__2580
1d284     01 1E 66 F5 | 	xor	local01, #1
1d288                 | LR__2581
1d288     3C 4E 05 F1 | 	add	fp, #60
1d28c     A7 1E 62 FC | 	wrlong	local01, fp
1d290     3C 4E 85 F1 | 	sub	fp, #60
1d294     00 1E 0E F2 | 	cmp	local01, #0 wz
1d298     0C 01 90 AD |  if_e	jmp	#LR__2583
1d29c     44 4E 05 F1 | 	add	fp, #68
1d2a0     A7 26 02 FB | 	rdlong	local05, fp
1d2a4     44 4E 85 F1 | 	sub	fp, #68
1d2a8     13 23 02 F6 | 	mov	local03, local05
1d2ac     02 22 0E F2 | 	cmp	local03, #2 wz
1d2b0     F4 00 90 5D |  if_ne	jmp	#LR__2583
1d2b4     0C 4F 05 F1 | 	add	fp, #268
1d2b8     A7 28 02 FB | 	rdlong	local06, fp
1d2bc     0C 4F 85 F1 | 	sub	fp, #268
1d2c0     14 25 02 F6 | 	mov	local04, local06
1d2c4     02 24 0E F2 | 	cmp	local04, #2 wz
1d2c8     DC 00 90 AD |  if_e	jmp	#LR__2583
1d2cc     C0 4E 05 F1 | 	add	fp, #192
1d2d0     A7 12 02 FB | 	rdlong	arg01, fp
1d2d4     94 4E 85 F1 | 	sub	fp, #148
1d2d8     A7 14 02 FB | 	rdlong	arg02, fp
1d2dc     14 4E 05 F1 | 	add	fp, #20
1d2e0     A7 16 02 FB | 	rdlong	arg03, fp
1d2e4     40 4E 85 F1 | 	sub	fp, #64
1d2e8     2C 44 B0 FD | 	call	#__system__emitsign_0432
1d2ec     14 4F 05 F1 | 	add	fp, #276
1d2f0     A7 FA 61 FC | 	wrlong	result1, fp
1d2f4     14 4F 85 F1 | 	sub	fp, #276
1d2f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1d2fc     14 4F 05 C1 |  if_b	add	fp, #276
1d300     A7 FA 01 CB |  if_b	rdlong	result1, fp
1d304     14 4F 85 C1 |  if_b	sub	fp, #276
1d308     6C 0B 90 CD |  if_b	jmp	#LR__2633
1d30c     C0 4E 05 F1 | 	add	fp, #192
1d310     A7 1E 02 FB | 	rdlong	local01, fp
1d314     54 4E 05 F1 | 	add	fp, #84
1d318     A7 26 02 FB | 	rdlong	local05, fp
1d31c     13 23 02 F6 | 	mov	local03, local05
1d320     13 1F 02 F1 | 	add	local01, local05
1d324     54 4E 85 F1 | 	sub	fp, #84
1d328     A7 1E 62 FC | 	wrlong	local01, fp
1d32c     58 4E 85 F1 | 	sub	fp, #88
1d330     A7 1E 0A FB | 	rdlong	local01, fp wz
1d334     68 4E 85 F1 | 	sub	fp, #104
1d338     60 00 90 AD |  if_e	jmp	#LR__2582
1d33c     68 4E 05 F1 | 	add	fp, #104
1d340     A7 1E 02 FB | 	rdlong	local01, fp
1d344     AC 4E 05 F1 | 	add	fp, #172
1d348     A7 22 02 FB | 	rdlong	local03, fp
1d34c     11 1F 82 F1 | 	sub	local01, local03
1d350     AC 4E 85 F1 | 	sub	fp, #172
1d354     A7 1E 62 FC | 	wrlong	local01, fp
1d358     68 4E 85 F1 | 	sub	fp, #104
1d35c     00 1E 56 F2 | 	cmps	local01, #0 wc
1d360     68 4E 05 C1 |  if_b	add	fp, #104
1d364     A7 00 68 CC |  if_b	wrlong	#0, fp
1d368     68 4E 85 C1 |  if_b	sub	fp, #104
1d36c     08 4E 05 F1 | 	add	fp, #8
1d370     A7 1E 02 FB | 	rdlong	local01, fp
1d374     E8 1E 06 F4 | 	bitl	local01, #232
1d378     A7 1E 62 FC | 	wrlong	local01, fp
1d37c     60 4E 05 F1 | 	add	fp, #96
1d380     A7 26 02 FB | 	rdlong	local05, fp
1d384     13 23 02 F6 | 	mov	local03, local05
1d388     08 22 66 F0 | 	shl	local03, #8
1d38c     11 1F 42 F5 | 	or	local01, local03
1d390     60 4E 85 F1 | 	sub	fp, #96
1d394     A7 1E 62 FC | 	wrlong	local01, fp
1d398     08 4E 85 F1 | 	sub	fp, #8
1d39c                 | LR__2582
1d39c     3C 4E 05 F1 | 	add	fp, #60
1d3a0     A7 00 68 FC | 	wrlong	#0, fp
1d3a4     3C 4E 85 F1 | 	sub	fp, #60
1d3a8                 | LR__2583
1d3a8     0C 4E 05 F1 | 	add	fp, #12
1d3ac     A7 12 02 FB | 	rdlong	arg01, fp
1d3b0     0C 4E 85 F1 | 	sub	fp, #12
1d3b4     04 1F B0 FD | 	call	#__system____builtin_ilogb
1d3b8     FF FF 3F FF 
1d3bc     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
1d3c0     50 00 90 5D |  if_ne	jmp	#LR__2585
1d3c4     2C 4E 05 F1 | 	add	fp, #44
1d3c8     A7 1E 0A FB | 	rdlong	local01, fp wz
1d3cc     2C 4E 85 F1 | 	sub	fp, #44
1d3d0     24 00 90 AD |  if_e	jmp	#LR__2584
1d3d4     C0 4E 05 F1 | 	add	fp, #192
1d3d8     A7 20 02 FB | 	rdlong	local02, fp
1d3dc     10 23 02 F6 | 	mov	local03, local02
1d3e0     01 22 06 F1 | 	add	local03, #1
1d3e4     A7 22 62 FC | 	wrlong	local03, fp
1d3e8     94 4E 85 F1 | 	sub	fp, #148
1d3ec     A7 24 02 FB | 	rdlong	local04, fp
1d3f0     2C 4E 85 F1 | 	sub	fp, #44
1d3f4     10 25 42 FC | 	wrbyte	local04, local02
1d3f8                 | LR__2584
1d3f8     C0 4E 05 F1 | 	add	fp, #192
1d3fc     A7 12 02 FB | 	rdlong	arg01, fp
1d400     C0 4E 85 F1 | 	sub	fp, #192
1d404     59 01 00 FF 
1d408     EE 15 06 F6 | 	mov	arg02, ##@LR__4521
1d40c     E4 E9 BF FD | 	call	#__system____builtin_strcpy
1d410     A4 08 90 FD | 	jmp	#LR__2621
1d414                 | LR__2585
1d414     0C 4E 05 F1 | 	add	fp, #12
1d418     A7 20 02 FB | 	rdlong	local02, fp
1d41c     0C 4E 85 F1 | 	sub	fp, #12
1d420     10 13 02 F6 | 	mov	arg01, local02
1d424     94 1E B0 FD | 	call	#__system____builtin_ilogb
1d428     00 00 40 FF 
1d42c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
1d430     50 00 90 5D |  if_ne	jmp	#LR__2587
1d434     2C 4E 05 F1 | 	add	fp, #44
1d438     A7 1E 0A FB | 	rdlong	local01, fp wz
1d43c     2C 4E 85 F1 | 	sub	fp, #44
1d440     24 00 90 AD |  if_e	jmp	#LR__2586
1d444     C0 4E 05 F1 | 	add	fp, #192
1d448     A7 20 02 FB | 	rdlong	local02, fp
1d44c     10 23 02 F6 | 	mov	local03, local02
1d450     01 22 06 F1 | 	add	local03, #1
1d454     A7 22 62 FC | 	wrlong	local03, fp
1d458     94 4E 85 F1 | 	sub	fp, #148
1d45c     A7 24 02 FB | 	rdlong	local04, fp
1d460     2C 4E 85 F1 | 	sub	fp, #44
1d464     10 25 42 FC | 	wrbyte	local04, local02
1d468                 | LR__2586
1d468     C0 4E 05 F1 | 	add	fp, #192
1d46c     A7 12 02 FB | 	rdlong	arg01, fp
1d470     C0 4E 85 F1 | 	sub	fp, #192
1d474     59 01 00 FF 
1d478     F2 15 06 F6 | 	mov	arg02, ##@LR__4522
1d47c     74 E9 BF FD | 	call	#__system____builtin_strcpy
1d480     34 08 90 FD | 	jmp	#LR__2621
1d484                 | LR__2587
1d484     10 4E 05 F1 | 	add	fp, #16
1d488     A7 1E 02 FB | 	rdlong	local01, fp
1d48c     10 4E 85 F1 | 	sub	fp, #16
1d490     67 1E 0E F2 | 	cmp	local01, #103 wz
1d494     10 4E 05 51 |  if_ne	add	fp, #16
1d498     A7 22 02 5B |  if_ne	rdlong	local03, fp
1d49c     10 4E 85 51 |  if_ne	sub	fp, #16
1d4a0     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
1d4a4     94 01 90 5D |  if_ne	jmp	#LR__2592
1d4a8     0C 4E 05 F1 | 	add	fp, #12
1d4ac     A7 12 02 FB | 	rdlong	arg01, fp
1d4b0     08 4E 05 F1 | 	add	fp, #8
1d4b4     A7 14 02 F6 | 	mov	arg02, fp
1d4b8     0C 4E 05 F1 | 	add	fp, #12
1d4bc     A7 16 02 F6 | 	mov	arg03, fp
1d4c0     98 4E 05 F1 | 	add	fp, #152
1d4c4     A7 18 02 FB | 	rdlong	arg04, fp
1d4c8     9C 4E 85 F1 | 	sub	fp, #156
1d4cc     A7 1A 02 FB | 	rdlong	arg05, fp
1d4d0     1C 4E 85 F1 | 	sub	fp, #28
1d4d4     4C 40 B0 FD | 	call	#__system__disassemble_0430
1d4d8     10 4E 05 F1 | 	add	fp, #16
1d4dc     A7 1E 02 FB | 	rdlong	local01, fp
1d4e0     10 4E 85 F1 | 	sub	fp, #16
1d4e4     23 1E 0E F2 | 	cmp	local01, #35 wz
1d4e8     A0 00 90 5D |  if_ne	jmp	#LR__2589
1d4ec     20 4E 05 F1 | 	add	fp, #32
1d4f0     A7 1E 02 FB | 	rdlong	local01, fp
1d4f4     98 4E 05 F1 | 	add	fp, #152
1d4f8     A7 22 02 FB | 	rdlong	local03, fp
1d4fc     B8 4E 85 F1 | 	sub	fp, #184
1d500     11 1F 5A F2 | 	cmps	local01, local03 wcz
1d504     24 4E 05 11 |  if_a	add	fp, #36
1d508     A7 02 68 1C |  if_a	wrlong	#1, fp
1d50c     24 4E 85 11 |  if_a	sub	fp, #36
1d510     A4 01 90 1D |  if_a	jmp	#LR__2595
1d514     20 4E 05 F1 | 	add	fp, #32
1d518     A7 1E 02 FB | 	rdlong	local01, fp
1d51c     20 4E 85 F1 | 	sub	fp, #32
1d520     00 1E 56 F2 | 	cmps	local01, #0 wc
1d524     2C 00 90 3D |  if_ae	jmp	#LR__2588
1d528     B8 4E 05 F1 | 	add	fp, #184
1d52c     A7 1E 02 FB | 	rdlong	local01, fp
1d530     0F 1F 62 F6 | 	neg	local01, local01
1d534     98 4E 85 F1 | 	sub	fp, #152
1d538     A7 22 02 FB | 	rdlong	local03, fp
1d53c     20 4E 85 F1 | 	sub	fp, #32
1d540     0F 23 5A F2 | 	cmps	local03, local01 wcz
1d544     24 4E 05 E1 |  if_be	add	fp, #36
1d548     A7 02 68 EC |  if_be	wrlong	#1, fp
1d54c     24 4E 85 E1 |  if_be	sub	fp, #36
1d550     64 01 90 FD | 	jmp	#LR__2595
1d554                 | LR__2588
1d554     20 4E 05 F1 | 	add	fp, #32
1d558     A7 1E 02 FB | 	rdlong	local01, fp
1d55c     20 4E 85 F1 | 	sub	fp, #32
1d560     01 1E 56 F2 | 	cmps	local01, #1 wc
1d564     50 01 90 CD |  if_b	jmp	#LR__2595
1d568     B8 4E 05 F1 | 	add	fp, #184
1d56c     A7 1E 02 FB | 	rdlong	local01, fp
1d570     98 4E 85 F1 | 	sub	fp, #152
1d574     A7 22 02 FB | 	rdlong	local03, fp
1d578     11 1F 82 F1 | 	sub	local01, local03
1d57c     98 4E 05 F1 | 	add	fp, #152
1d580     A7 1E 62 FC | 	wrlong	local01, fp
1d584     B8 4E 85 F1 | 	sub	fp, #184
1d588     2C 01 90 FD | 	jmp	#LR__2595
1d58c                 | LR__2589
1d58c     00 1E 06 F6 | 	mov	local01, #0
1d590     08 4E 05 F1 | 	add	fp, #8
1d594     A7 20 02 FB | 	rdlong	local02, fp
1d598     1C 20 46 F0 | 	shr	local02, #28
1d59c     01 20 0E F5 | 	and	local02, #1 wz
1d5a0     01 1E 06 A6 |  if_e	mov	local01, #1
1d5a4     2C 4E 05 F1 | 	add	fp, #44
1d5a8     A7 1E 62 FC | 	wrlong	local01, fp
1d5ac     14 4E 85 F1 | 	sub	fp, #20
1d5b0     A7 1E 02 FB | 	rdlong	local01, fp
1d5b4     98 4E 05 F1 | 	add	fp, #152
1d5b8     A7 22 02 FB | 	rdlong	local03, fp
1d5bc     B8 4E 85 F1 | 	sub	fp, #184
1d5c0     11 1F 52 F2 | 	cmps	local01, local03 wc
1d5c4     18 00 90 3D |  if_ae	jmp	#LR__2590
1d5c8     20 4E 05 F1 | 	add	fp, #32
1d5cc     A7 24 02 FB | 	rdlong	local04, fp
1d5d0     20 4E 85 F1 | 	sub	fp, #32
1d5d4     FF FF 7F FF 
1d5d8     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1d5dc     10 00 90 3D |  if_ae	jmp	#LR__2591
1d5e0                 | LR__2590
1d5e0     24 4E 05 F1 | 	add	fp, #36
1d5e4     A7 02 68 FC | 	wrlong	#1, fp
1d5e8     24 4E 85 F1 | 	sub	fp, #36
1d5ec     C8 00 90 FD | 	jmp	#LR__2595
1d5f0                 | LR__2591
1d5f0     B8 4E 05 F1 | 	add	fp, #184
1d5f4     A7 24 02 FB | 	rdlong	local04, fp
1d5f8     98 4E 85 F1 | 	sub	fp, #152
1d5fc     A7 22 02 FB | 	rdlong	local03, fp
1d600     11 25 82 F1 | 	sub	local04, local03
1d604     98 4E 05 F1 | 	add	fp, #152
1d608     A7 24 62 FC | 	wrlong	local04, fp
1d60c     AC 4E 85 F1 | 	sub	fp, #172
1d610     A7 12 02 FB | 	rdlong	arg01, fp
1d614     08 4E 05 F1 | 	add	fp, #8
1d618     A7 14 02 F6 | 	mov	arg02, fp
1d61c     0C 4E 05 F1 | 	add	fp, #12
1d620     A7 16 02 F6 | 	mov	arg03, fp
1d624     12 19 62 F6 | 	neg	arg04, local04
1d628     04 4E 85 F1 | 	sub	fp, #4
1d62c     A7 1A 02 FB | 	rdlong	arg05, fp
1d630     1C 4E 85 F1 | 	sub	fp, #28
1d634     EC 3E B0 FD | 	call	#__system__disassemble_0430
1d638     7C 00 90 FD | 	jmp	#LR__2595
1d63c                 | LR__2592
1d63c     24 4E 05 F1 | 	add	fp, #36
1d640     A7 1E 0A FB | 	rdlong	local01, fp wz
1d644     24 4E 85 F1 | 	sub	fp, #36
1d648     34 00 90 AD |  if_e	jmp	#LR__2593
1d64c     0C 4E 05 F1 | 	add	fp, #12
1d650     A7 12 02 FB | 	rdlong	arg01, fp
1d654     08 4E 05 F1 | 	add	fp, #8
1d658     A7 14 02 F6 | 	mov	arg02, fp
1d65c     0C 4E 05 F1 | 	add	fp, #12
1d660     A7 16 02 F6 | 	mov	arg03, fp
1d664     98 4E 05 F1 | 	add	fp, #152
1d668     A7 18 02 FB | 	rdlong	arg04, fp
1d66c     9C 4E 85 F1 | 	sub	fp, #156
1d670     A7 1A 02 FB | 	rdlong	arg05, fp
1d674     1C 4E 85 F1 | 	sub	fp, #28
1d678     A8 3E B0 FD | 	call	#__system__disassemble_0430
1d67c     38 00 90 FD | 	jmp	#LR__2594
1d680                 | LR__2593
1d680     0C 4E 05 F1 | 	add	fp, #12
1d684     A7 12 02 FB | 	rdlong	arg01, fp
1d688     08 4E 05 F1 | 	add	fp, #8
1d68c     A7 14 02 F6 | 	mov	arg02, fp
1d690     0C 4E 05 F1 | 	add	fp, #12
1d694     A7 16 02 F6 | 	mov	arg03, fp
1d698     98 4E 05 F1 | 	add	fp, #152
1d69c     A7 24 02 FB | 	rdlong	local04, fp
1d6a0     01 24 06 F1 | 	add	local04, #1
1d6a4     12 19 62 F6 | 	neg	arg04, local04
1d6a8     9C 4E 85 F1 | 	sub	fp, #156
1d6ac     A7 1A 02 FB | 	rdlong	arg05, fp
1d6b0     1C 4E 85 F1 | 	sub	fp, #28
1d6b4     6C 3E B0 FD | 	call	#__system__disassemble_0430
1d6b8                 | LR__2594
1d6b8                 | LR__2595
1d6b8     1C 4E 05 F1 | 	add	fp, #28
1d6bc     A7 1E 02 FB | 	rdlong	local01, fp
1d6c0     1C 4E 85 F1 | 	sub	fp, #28
1d6c4     02 1E 0E F2 | 	cmp	local01, #2 wz
1d6c8     4C 00 90 5D |  if_ne	jmp	#LR__2598
1d6cc     1C 4E 05 F1 | 	add	fp, #28
1d6d0     A7 20 68 FC | 	wrlong	#16, fp
1d6d4     1C 4E 85 F1 | 	sub	fp, #28
1d6d8                 | LR__2596
1d6d8     14 4E 05 F1 | 	add	fp, #20
1d6dc     A7 1E 0A FB | 	rdlong	local01, fp wz
1d6e0     14 4E 85 F1 | 	sub	fp, #20
1d6e4     30 00 90 AD |  if_e	jmp	#LR__2597
1d6e8     14 4E 05 F1 | 	add	fp, #20
1d6ec     A7 22 02 FB | 	rdlong	local03, fp
1d6f0     14 4E 85 F1 | 	sub	fp, #20
1d6f4     00 80 00 FF 
1d6f8     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1d6fc     18 00 90 3D |  if_ae	jmp	#LR__2597
1d700     14 4E 05 F1 | 	add	fp, #20
1d704     A7 1E 02 FB | 	rdlong	local01, fp
1d708     01 1E 66 F0 | 	shl	local01, #1
1d70c     A7 1E 62 FC | 	wrlong	local01, fp
1d710     14 4E 85 F1 | 	sub	fp, #20
1d714     C0 FF 9F FD | 	jmp	#LR__2596
1d718                 | LR__2597
1d718                 | LR__2598
1d718     70 4E 05 F1 | 	add	fp, #112
1d71c     A7 12 02 F6 | 	mov	arg01, fp
1d720     5C 4E 85 F1 | 	sub	fp, #92
1d724     A7 14 02 FB | 	rdlong	arg02, fp
1d728     08 4E 05 F1 | 	add	fp, #8
1d72c     A7 16 02 FB | 	rdlong	arg03, fp
1d730     A0 4E 05 F1 | 	add	fp, #160
1d734     A7 1A 02 FB | 	rdlong	arg05, fp
1d738     BC 4E 85 F1 | 	sub	fp, #188
1d73c     01 18 06 F6 | 	mov	arg04, #1
1d740     6C 3D B0 FD | 	call	#__system___uitoa
1d744     58 4E 05 F1 | 	add	fp, #88
1d748     A7 FA 61 FC | 	wrlong	result1, fp
1d74c     38 4E 85 F1 | 	sub	fp, #56
1d750     A7 1E 02 FB | 	rdlong	local01, fp
1d754     20 4E 85 F1 | 	sub	fp, #32
1d758     00 1E 56 F2 | 	cmps	local01, #0 wc
1d75c     50 00 90 3D |  if_ae	jmp	#LR__2599
1d760     60 4E 05 F1 | 	add	fp, #96
1d764     A7 5A 68 FC | 	wrlong	#45, fp
1d768     50 4E 05 F1 | 	add	fp, #80
1d76c     A7 12 02 F6 | 	mov	arg01, fp
1d770     90 4E 85 F1 | 	sub	fp, #144
1d774     A7 22 02 FB | 	rdlong	local03, fp
1d778     11 15 62 F6 | 	neg	arg02, local03
1d77c     18 4E 05 F1 | 	add	fp, #24
1d780     A7 18 02 FB | 	rdlong	arg04, fp
1d784     84 4E 05 F1 | 	add	fp, #132
1d788     A7 28 02 FB | 	rdlong	local06, fp
1d78c     BC 4E 85 F1 | 	sub	fp, #188
1d790     14 25 02 F6 | 	mov	local04, local06
1d794     0A 16 06 F6 | 	mov	arg03, #10
1d798     12 1B 02 F6 | 	mov	arg05, local04
1d79c     10 3D B0 FD | 	call	#__system___uitoa
1d7a0     5C 4E 05 F1 | 	add	fp, #92
1d7a4     A7 FA 61 FC | 	wrlong	result1, fp
1d7a8     5C 4E 85 F1 | 	sub	fp, #92
1d7ac     48 00 90 FD | 	jmp	#LR__2600
1d7b0                 | LR__2599
1d7b0     60 4E 05 F1 | 	add	fp, #96
1d7b4     A7 56 68 FC | 	wrlong	#43, fp
1d7b8     50 4E 05 F1 | 	add	fp, #80
1d7bc     A7 12 02 F6 | 	mov	arg01, fp
1d7c0     90 4E 85 F1 | 	sub	fp, #144
1d7c4     A7 14 02 FB | 	rdlong	arg02, fp
1d7c8     18 4E 05 F1 | 	add	fp, #24
1d7cc     A7 18 02 FB | 	rdlong	arg04, fp
1d7d0     84 4E 05 F1 | 	add	fp, #132
1d7d4     A7 28 02 FB | 	rdlong	local06, fp
1d7d8     BC 4E 85 F1 | 	sub	fp, #188
1d7dc     14 25 02 F6 | 	mov	local04, local06
1d7e0     0A 16 06 F6 | 	mov	arg03, #10
1d7e4     12 1B 02 F6 | 	mov	arg05, local04
1d7e8     C4 3C B0 FD | 	call	#__system___uitoa
1d7ec     5C 4E 05 F1 | 	add	fp, #92
1d7f0     A7 FA 61 FC | 	wrlong	result1, fp
1d7f4     5C 4E 85 F1 | 	sub	fp, #92
1d7f8                 | LR__2600
1d7f8     24 4E 05 F1 | 	add	fp, #36
1d7fc     A7 1E 0A FB | 	rdlong	local01, fp wz
1d800     24 4E 85 F1 | 	sub	fp, #36
1d804     2C 00 90 AD |  if_e	jmp	#LR__2601
1d808     50 4E 05 F1 | 	add	fp, #80
1d80c     A7 00 68 FC | 	wrlong	#0, fp
1d810     04 4E 85 F1 | 	sub	fp, #4
1d814     A7 00 68 FC | 	wrlong	#0, fp
1d818     6C 4E 05 F1 | 	add	fp, #108
1d81c     A7 1E 02 FB | 	rdlong	local01, fp
1d820     01 1E 06 F1 | 	add	local01, #1
1d824     64 4E 85 F1 | 	sub	fp, #100
1d828     A7 1E 62 FC | 	wrlong	local01, fp
1d82c     54 4E 85 F1 | 	sub	fp, #84
1d830     88 00 90 FD | 	jmp	#LR__2604
1d834                 | LR__2601
1d834     20 4E 05 F1 | 	add	fp, #32
1d838     A7 1E 02 FB | 	rdlong	local01, fp
1d83c     20 4E 85 F1 | 	sub	fp, #32
1d840     00 1E 56 F2 | 	cmps	local01, #0 wc
1d844     40 00 90 3D |  if_ae	jmp	#LR__2602
1d848     20 4E 05 F1 | 	add	fp, #32
1d84c     A7 20 02 FB | 	rdlong	local02, fp
1d850     30 4E 05 F1 | 	add	fp, #48
1d854     A7 20 62 FC | 	wrlong	local02, fp
1d858     04 4E 85 F1 | 	sub	fp, #4
1d85c     A7 20 62 FC | 	wrlong	local02, fp
1d860     2C 4E 85 F1 | 	sub	fp, #44
1d864     A7 1E 02 FB | 	rdlong	local01, fp
1d868     98 4E 05 F1 | 	add	fp, #152
1d86c     A7 22 02 FB | 	rdlong	local03, fp
1d870     11 1F 02 F1 | 	add	local01, local03
1d874     01 1E 06 F1 | 	add	local01, #1
1d878     64 4E 85 F1 | 	sub	fp, #100
1d87c     A7 1E 62 FC | 	wrlong	local01, fp
1d880     54 4E 85 F1 | 	sub	fp, #84
1d884     34 00 90 FD | 	jmp	#LR__2603
1d888                 | LR__2602
1d888     4C 4E 05 F1 | 	add	fp, #76
1d88c     A7 00 68 FC | 	wrlong	#0, fp
1d890     2C 4E 85 F1 | 	sub	fp, #44
1d894     A7 1E 02 FB | 	rdlong	local01, fp
1d898     30 4E 05 F1 | 	add	fp, #48
1d89c     A7 1E 62 FC | 	wrlong	local01, fp
1d8a0     68 4E 05 F1 | 	add	fp, #104
1d8a4     A7 22 02 FB | 	rdlong	local03, fp
1d8a8     11 1F 02 F1 | 	add	local01, local03
1d8ac     01 1E 06 F1 | 	add	local01, #1
1d8b0     64 4E 85 F1 | 	sub	fp, #100
1d8b4     A7 1E 62 FC | 	wrlong	local01, fp
1d8b8     54 4E 85 F1 | 	sub	fp, #84
1d8bc                 | LR__2603
1d8bc                 | LR__2604
1d8bc     54 4E 05 F1 | 	add	fp, #84
1d8c0     A7 1E 02 FB | 	rdlong	local01, fp
1d8c4     08 4E 85 F1 | 	sub	fp, #8
1d8c8     A7 22 02 FB | 	rdlong	local03, fp
1d8cc     11 1F 82 F1 | 	sub	local01, local03
1d8d0     01 1E 06 F1 | 	add	local01, #1
1d8d4     24 4E 85 F1 | 	sub	fp, #36
1d8d8     A7 1E 62 FC | 	wrlong	local01, fp
1d8dc     04 4E 05 F1 | 	add	fp, #4
1d8e0     A7 1E 0A FB | 	rdlong	local01, fp wz
1d8e4     2C 4E 85 F1 | 	sub	fp, #44
1d8e8     28 4E 05 51 |  if_ne	add	fp, #40
1d8ec     A7 22 02 5B |  if_ne	rdlong	local03, fp
1d8f0     01 22 06 51 |  if_ne	add	local03, #1
1d8f4     A7 22 62 5C |  if_ne	wrlong	local03, fp
1d8f8     28 4E 85 51 |  if_ne	sub	fp, #40
1d8fc     1C 4E 05 F1 | 	add	fp, #28
1d900     A7 1E 02 FB | 	rdlong	local01, fp
1d904     1C 4E 85 F1 | 	sub	fp, #28
1d908     10 1E 0E F2 | 	cmp	local01, #16 wz
1d90c     28 4E 05 A1 |  if_e	add	fp, #40
1d910     A7 1E 02 AB |  if_e	rdlong	local01, fp
1d914     02 1E 06 A1 |  if_e	add	local01, #2
1d918     A7 1E 62 AC |  if_e	wrlong	local01, fp
1d91c     28 4E 85 A1 |  if_e	sub	fp, #40
1d920     24 4E 05 F1 | 	add	fp, #36
1d924     A7 1E 0A FB | 	rdlong	local01, fp wz
1d928     24 4E 85 F1 | 	sub	fp, #36
1d92c     28 00 90 AD |  if_e	jmp	#LR__2605
1d930     28 4E 05 F1 | 	add	fp, #40
1d934     A7 1E 02 FB | 	rdlong	local01, fp
1d938     02 22 06 F6 | 	mov	local03, #2
1d93c     34 4E 05 F1 | 	add	fp, #52
1d940     A7 26 02 FB | 	rdlong	local05, fp
1d944     13 23 02 F1 | 	add	local03, local05
1d948     11 1F 02 F1 | 	add	local01, local03
1d94c     34 4E 85 F1 | 	sub	fp, #52
1d950     A7 1E 62 FC | 	wrlong	local01, fp
1d954     28 4E 85 F1 | 	sub	fp, #40
1d958                 | LR__2605
1d958     28 4E 05 F1 | 	add	fp, #40
1d95c     A7 1E 02 FB | 	rdlong	local01, fp
1d960     28 4E 85 F1 | 	sub	fp, #40
1d964     41 1E 56 F2 | 	cmps	local01, #65 wc
1d968     01 FA 65 36 |  if_ae	neg	result1, #1
1d96c     08 05 90 3D |  if_ae	jmp	#LR__2633
1d970     3C 4E 05 F1 | 	add	fp, #60
1d974     A7 1E 0A FB | 	rdlong	local01, fp wz
1d978     3C 4E 85 F1 | 	sub	fp, #60
1d97c     60 00 90 AD |  if_e	jmp	#LR__2606
1d980     C0 4E 05 F1 | 	add	fp, #192
1d984     A7 12 02 FB | 	rdlong	arg01, fp
1d988     94 4E 85 F1 | 	sub	fp, #148
1d98c     A7 14 02 FB | 	rdlong	arg02, fp
1d990     14 4E 05 F1 | 	add	fp, #20
1d994     A7 16 02 FB | 	rdlong	arg03, fp
1d998     40 4E 85 F1 | 	sub	fp, #64
1d99c     78 3D B0 FD | 	call	#__system__emitsign_0432
1d9a0     18 4F 05 F1 | 	add	fp, #280
1d9a4     A7 FA 61 FC | 	wrlong	result1, fp
1d9a8     18 4F 85 F1 | 	sub	fp, #280
1d9ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1d9b0     18 4F 05 C1 |  if_b	add	fp, #280
1d9b4     A7 FA 01 CB |  if_b	rdlong	result1, fp
1d9b8     18 4F 85 C1 |  if_b	sub	fp, #280
1d9bc     B8 04 90 CD |  if_b	jmp	#LR__2633
1d9c0     C0 4E 05 F1 | 	add	fp, #192
1d9c4     A7 1E 02 FB | 	rdlong	local01, fp
1d9c8     58 4E 05 F1 | 	add	fp, #88
1d9cc     A7 22 02 FB | 	rdlong	local03, fp
1d9d0     11 1F 02 F1 | 	add	local01, local03
1d9d4     58 4E 85 F1 | 	sub	fp, #88
1d9d8     A7 1E 62 FC | 	wrlong	local01, fp
1d9dc     C0 4E 85 F1 | 	sub	fp, #192
1d9e0                 | LR__2606
1d9e0     4C 4E 05 F1 | 	add	fp, #76
1d9e4     A7 1E 02 FB | 	rdlong	local01, fp
1d9e8     34 4E 85 F1 | 	sub	fp, #52
1d9ec     A7 1E 62 FC | 	wrlong	local01, fp
1d9f0     18 4E 85 F1 | 	sub	fp, #24
1d9f4     97 9E 48 FB | 	callpa	#(@LR__2612-@LR__2607)>>2,fcache_load_ptr_
1d9f8                 | LR__2607
1d9f8     18 4E 05 F1 | 	add	fp, #24
1d9fc     A7 20 02 FB | 	rdlong	local02, fp
1da00     3C 4E 05 F1 | 	add	fp, #60
1da04     A7 26 02 FB | 	rdlong	local05, fp
1da08     54 4E 85 F1 | 	sub	fp, #84
1da0c     13 21 52 F2 | 	cmps	local02, local05 wc
1da10     20 01 90 3D |  if_ae	jmp	#LR__2613
1da14     18 4E 05 F1 | 	add	fp, #24
1da18     A7 28 02 FB | 	rdlong	local06, fp
1da1c     18 4E 85 F1 | 	sub	fp, #24
1da20     00 28 56 F2 | 	cmps	local06, #0 wc
1da24     58 00 90 CD |  if_b	jmp	#LR__2608
1da28     18 4E 05 F1 | 	add	fp, #24
1da2c     A7 28 02 FB | 	rdlong	local06, fp
1da30     40 4E 05 F1 | 	add	fp, #64
1da34     A7 2A 02 FB | 	rdlong	local07, fp
1da38     58 4E 85 F1 | 	sub	fp, #88
1da3c     15 29 52 F2 | 	cmps	local06, local07 wc
1da40     3C 00 90 3D |  if_ae	jmp	#LR__2608
1da44     C0 4E 05 F1 | 	add	fp, #192
1da48     A7 2C 02 FB | 	rdlong	local08, fp
1da4c     16 2B 02 F6 | 	mov	local07, local08
1da50     01 2A 06 F1 | 	add	local07, #1
1da54     A7 2A 62 FC | 	wrlong	local07, fp
1da58     A8 4E 85 F1 | 	sub	fp, #168
1da5c     A7 2A 02 FB | 	rdlong	local07, fp
1da60     15 2F 02 F6 | 	mov	local09, local07
1da64     58 4E 05 F1 | 	add	fp, #88
1da68     A7 30 02 F6 | 	mov	local10, fp
1da6c     A7 2E 02 F1 | 	add	local09, fp
1da70     17 33 C2 FA | 	rdbyte	local11, local09
1da74     16 33 42 FC | 	wrbyte	local11, local08
1da78     70 4E 85 F1 | 	sub	fp, #112
1da7c     20 00 90 FD | 	jmp	#LR__2609
1da80                 | LR__2608
1da80     C0 4E 05 F1 | 	add	fp, #192
1da84     A7 2C 02 FB | 	rdlong	local08, fp
1da88     16 2F 02 F6 | 	mov	local09, local08
1da8c     01 2E 06 F1 | 	add	local09, #1
1da90     A7 2E 62 FC | 	wrlong	local09, fp
1da94     C0 4E 85 F1 | 	sub	fp, #192
1da98     30 2E 06 F6 | 	mov	local09, #48
1da9c     16 61 48 FC | 	wrbyte	#48, local08
1daa0                 | LR__2609
1daa0     18 4E 05 F1 | 	add	fp, #24
1daa4     A7 28 02 FB | 	rdlong	local06, fp
1daa8     38 4E 05 F1 | 	add	fp, #56
1daac     A7 34 02 FB | 	rdlong	local12, fp
1dab0     50 4E 85 F1 | 	sub	fp, #80
1dab4     1A 29 0A F2 | 	cmp	local06, local12 wz
1dab8     5C 00 90 5D |  if_ne	jmp	#LR__2611
1dabc     10 4F 05 F1 | 	add	fp, #272
1dac0     A7 2A 02 FB | 	rdlong	local07, fp
1dac4     10 4F 85 F1 | 	sub	fp, #272
1dac8     15 2F 0A F6 | 	mov	local09, local07 wz
1dacc     28 00 90 5D |  if_ne	jmp	#LR__2610
1dad0     54 4E 05 F1 | 	add	fp, #84
1dad4     A7 32 02 FB | 	rdlong	local11, fp
1dad8     19 31 02 F6 | 	mov	local10, local11
1dadc     01 30 86 F1 | 	sub	local10, #1
1dae0     3C 4E 85 F1 | 	sub	fp, #60
1dae4     A7 36 02 FB | 	rdlong	local13, fp
1dae8     18 4E 85 F1 | 	sub	fp, #24
1daec     1B 39 02 F6 | 	mov	local14, local13
1daf0     18 39 52 F2 | 	cmps	local14, local10 wc
1daf4     20 00 90 3D |  if_ae	jmp	#LR__2611
1daf8                 | LR__2610
1daf8     C0 4E 05 F1 | 	add	fp, #192
1dafc     A7 2C 02 FB | 	rdlong	local08, fp
1db00     16 35 02 F6 | 	mov	local12, local08
1db04     01 34 06 F1 | 	add	local12, #1
1db08     A7 34 62 FC | 	wrlong	local12, fp
1db0c     C0 4E 85 F1 | 	sub	fp, #192
1db10     2E 2E 06 F6 | 	mov	local09, #46
1db14     16 5D 48 FC | 	wrbyte	#46, local08
1db18                 | LR__2611
1db18     18 4E 05 F1 | 	add	fp, #24
1db1c     A7 3A 02 FB | 	rdlong	local15, fp
1db20     1D 35 02 F6 | 	mov	local12, local15
1db24     01 34 06 F1 | 	add	local12, #1
1db28     A7 34 62 FC | 	wrlong	local12, fp
1db2c     18 4E 85 F1 | 	sub	fp, #24
1db30     C4 FE 9F FD | 	jmp	#LR__2607
1db34                 | LR__2612
1db34                 | LR__2613
1db34     34 4E 05 F1 | 	add	fp, #52
1db38     A7 1E 0A FB | 	rdlong	local01, fp wz
1db3c     34 4E 85 F1 | 	sub	fp, #52
1db40     A0 00 90 AD |  if_e	jmp	#LR__2617
1db44     C0 4E 05 F1 | 	add	fp, #192
1db48     A7 1E 02 FB | 	rdlong	local01, fp
1db4c     01 1E 86 F1 | 	sub	local01, #1
1db50     A7 1E 62 FC | 	wrlong	local01, fp
1db54     C0 4E 85 F1 | 	sub	fp, #192
1db58     97 26 48 FB | 	callpa	#(@LR__2615-@LR__2614)>>2,fcache_load_ptr_
1db5c                 | LR__2614
1db5c     C0 4E 05 F1 | 	add	fp, #192
1db60     A7 1E 02 FB | 	rdlong	local01, fp
1db64     04 4E 05 F1 | 	add	fp, #4
1db68     A7 22 02 FB | 	rdlong	local03, fp
1db6c     C4 4E 85 F1 | 	sub	fp, #196
1db70     11 1F 5A F2 | 	cmps	local01, local03 wcz
1db74     30 00 90 ED |  if_be	jmp	#LR__2616
1db78     C0 4E 05 F1 | 	add	fp, #192
1db7c     A7 28 02 FB | 	rdlong	local06, fp
1db80     C0 4E 85 F1 | 	sub	fp, #192
1db84     14 25 C2 FA | 	rdbyte	local04, local06
1db88     30 24 0E F2 | 	cmp	local04, #48 wz
1db8c     18 00 90 5D |  if_ne	jmp	#LR__2616
1db90     C0 4E 05 F1 | 	add	fp, #192
1db94     A7 1E 02 FB | 	rdlong	local01, fp
1db98     01 1E 86 F1 | 	sub	local01, #1
1db9c     A7 1E 62 FC | 	wrlong	local01, fp
1dba0     C0 4E 85 F1 | 	sub	fp, #192
1dba4     B4 FF 9F FD | 	jmp	#LR__2614
1dba8                 | LR__2615
1dba8                 | LR__2616
1dba8     C0 4E 05 F1 | 	add	fp, #192
1dbac     A7 20 02 FB | 	rdlong	local02, fp
1dbb0     C0 4E 85 F1 | 	sub	fp, #192
1dbb4     10 1F C2 FA | 	rdbyte	local01, local02
1dbb8     2E 1E 0E F2 | 	cmp	local01, #46 wz
1dbbc     C0 4E 05 A1 |  if_e	add	fp, #192
1dbc0     A7 1E 02 AB |  if_e	rdlong	local01, fp
1dbc4     01 1E 86 A1 |  if_e	sub	local01, #1
1dbc8     A7 1E 62 AC |  if_e	wrlong	local01, fp
1dbcc     C0 4E 85 A1 |  if_e	sub	fp, #192
1dbd0     C0 4E 05 F1 | 	add	fp, #192
1dbd4     A7 22 02 FB | 	rdlong	local03, fp
1dbd8     01 22 06 F1 | 	add	local03, #1
1dbdc     A7 22 62 FC | 	wrlong	local03, fp
1dbe0     C0 4E 85 F1 | 	sub	fp, #192
1dbe4                 | LR__2617
1dbe4     24 4E 05 F1 | 	add	fp, #36
1dbe8     A7 1E 0A FB | 	rdlong	local01, fp wz
1dbec     24 4E 85 F1 | 	sub	fp, #36
1dbf0     B4 00 90 AD |  if_e	jmp	#LR__2620
1dbf4     C0 4E 05 F1 | 	add	fp, #192
1dbf8     A7 20 02 FB | 	rdlong	local02, fp
1dbfc     10 23 02 F6 | 	mov	local03, local02
1dc00     01 22 06 F1 | 	add	local03, #1
1dc04     A7 22 62 FC | 	wrlong	local03, fp
1dc08     90 4E 85 F1 | 	sub	fp, #144
1dc0c     A7 24 02 FB | 	rdlong	local04, fp
1dc10     10 25 42 FC | 	wrbyte	local04, local02
1dc14     90 4E 05 F1 | 	add	fp, #144
1dc18     A7 20 02 FB | 	rdlong	local02, fp
1dc1c     10 23 02 F6 | 	mov	local03, local02
1dc20     01 22 06 F1 | 	add	local03, #1
1dc24     A7 22 62 FC | 	wrlong	local03, fp
1dc28     60 4E 85 F1 | 	sub	fp, #96
1dc2c     A7 24 02 FB | 	rdlong	local04, fp
1dc30     10 25 42 FC | 	wrbyte	local04, local02
1dc34     48 4E 85 F1 | 	sub	fp, #72
1dc38     A7 00 68 FC | 	wrlong	#0, fp
1dc3c     18 4E 85 F1 | 	sub	fp, #24
1dc40                 | LR__2618
1dc40     18 4E 05 F1 | 	add	fp, #24
1dc44     A7 20 02 FB | 	rdlong	local02, fp
1dc48     44 4E 05 F1 | 	add	fp, #68
1dc4c     A7 26 02 FB | 	rdlong	local05, fp
1dc50     5C 4E 85 F1 | 	sub	fp, #92
1dc54     13 21 52 F2 | 	cmps	local02, local05 wc
1dc58     4C 00 90 3D |  if_ae	jmp	#LR__2619
1dc5c     C0 4E 05 F1 | 	add	fp, #192
1dc60     A7 2C 02 FB | 	rdlong	local08, fp
1dc64     16 35 02 F6 | 	mov	local12, local08
1dc68     01 34 06 F1 | 	add	local12, #1
1dc6c     A7 34 62 FC | 	wrlong	local12, fp
1dc70     A8 4E 85 F1 | 	sub	fp, #168
1dc74     A7 2A 02 FB | 	rdlong	local07, fp
1dc78     15 2F 02 F6 | 	mov	local09, local07
1dc7c     98 4E 05 F1 | 	add	fp, #152
1dc80     A7 30 02 F6 | 	mov	local10, fp
1dc84     A7 2E 02 F1 | 	add	local09, fp
1dc88     17 33 C2 FA | 	rdbyte	local11, local09
1dc8c     16 33 42 FC | 	wrbyte	local11, local08
1dc90     98 4E 85 F1 | 	sub	fp, #152
1dc94     A7 34 02 FB | 	rdlong	local12, fp
1dc98     01 34 06 F1 | 	add	local12, #1
1dc9c     A7 34 62 FC | 	wrlong	local12, fp
1dca0     18 4E 85 F1 | 	sub	fp, #24
1dca4     98 FF 9F FD | 	jmp	#LR__2618
1dca8                 | LR__2619
1dca8                 | LR__2620
1dca8     C0 4E 05 F1 | 	add	fp, #192
1dcac     A7 1E 02 FB | 	rdlong	local01, fp
1dcb0     C0 4E 85 F1 | 	sub	fp, #192
1dcb4     0F 01 48 FC | 	wrbyte	#0, local01
1dcb8                 | LR__2621
1dcb8     6C 4E 05 F1 | 	add	fp, #108
1dcbc     A7 1E 0A FB | 	rdlong	local01, fp wz
1dcc0     6C 4E 85 F1 | 	sub	fp, #108
1dcc4     90 01 90 AD |  if_e	jmp	#LR__2632
1dcc8     48 4E 05 F1 | 	add	fp, #72
1dccc     A7 22 0A FB | 	rdlong	local03, fp wz
1dcd0     48 4E 85 F1 | 	sub	fp, #72
1dcd4     80 01 90 AD |  if_e	jmp	#LR__2632
1dcd8     C4 4E 05 F1 | 	add	fp, #196
1dcdc     A7 12 02 FB | 	rdlong	arg01, fp
1dce0     C4 4E 85 F1 | 	sub	fp, #196
1dce4     09 3D 02 F6 | 	mov	local16, arg01
1dce8     97 06 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
1dcec                 | LR__2622
1dcec     1E FB C9 FA | 	rdbyte	result1, local16 wz
1dcf0     01 3C 06 51 |  if_ne	add	local16, #1
1dcf4     F4 FF 9F 5D |  if_ne	jmp	#LR__2622
1dcf8                 | LR__2623
1dcf8     09 3D 82 F1 | 	sub	local16, arg01
1dcfc     1E 25 02 F6 | 	mov	local04, local16
1dd00     6C 4E 05 F1 | 	add	fp, #108
1dd04     A7 28 02 FB | 	rdlong	local06, fp
1dd08     6C 4E 85 F1 | 	sub	fp, #108
1dd0c     14 25 5A F2 | 	cmps	local04, local06 wcz
1dd10     44 01 90 ED |  if_be	jmp	#LR__2632
1dd14     C4 4E 05 F1 | 	add	fp, #196
1dd18     A7 1E 02 FB | 	rdlong	local01, fp
1dd1c     5C 4E 05 F1 | 	add	fp, #92
1dd20     A7 1E 62 FC | 	wrlong	local01, fp
1dd24     FC 4E 85 F1 | 	sub	fp, #252
1dd28     A7 1E 0A FB | 	rdlong	local01, fp wz
1dd2c     24 4E 85 F1 | 	sub	fp, #36
1dd30     20 00 90 AD |  if_e	jmp	#LR__2624
1dd34     B8 4E 05 F1 | 	add	fp, #184
1dd38     A7 00 68 FC | 	wrlong	#0, fp
1dd3c     4C 4E 85 F1 | 	sub	fp, #76
1dd40     A7 1E 02 FB | 	rdlong	local01, fp
1dd44     B0 4E 05 F1 | 	add	fp, #176
1dd48     A7 1E 62 FC | 	wrlong	local01, fp
1dd4c     1C 4F 85 F1 | 	sub	fp, #284
1dd50     24 00 90 FD | 	jmp	#LR__2625
1dd54                 | LR__2624
1dd54     6C 4E 05 F1 | 	add	fp, #108
1dd58     A7 1E 02 FB | 	rdlong	local01, fp
1dd5c     01 1E 86 F1 | 	sub	local01, #1
1dd60     4C 4E 05 F1 | 	add	fp, #76
1dd64     A7 22 02 FB | 	rdlong	local03, fp
1dd68     11 1F 82 F1 | 	sub	local01, local03
1dd6c     64 4E 05 F1 | 	add	fp, #100
1dd70     A7 1E 62 FC | 	wrlong	local01, fp
1dd74     1C 4F 85 F1 | 	sub	fp, #284
1dd78                 | LR__2625
1dd78     97 20 48 FB | 	callpa	#(@LR__2627-@LR__2626)>>2,fcache_load_ptr_
1dd7c                 | LR__2626
1dd7c     1C 4F 05 F1 | 	add	fp, #284
1dd80     A7 1E 0A FB | 	rdlong	local01, fp wz
1dd84     1C 4F 85 F1 | 	sub	fp, #284
1dd88     30 00 90 AD |  if_e	jmp	#LR__2628
1dd8c     20 4F 05 F1 | 	add	fp, #288
1dd90     A7 20 02 FB | 	rdlong	local02, fp
1dd94     10 23 02 F6 | 	mov	local03, local02
1dd98     01 22 06 F1 | 	add	local03, #1
1dd9c     A7 22 62 FC | 	wrlong	local03, fp
1dda0     10 55 48 FC | 	wrbyte	#42, local02
1dda4     04 4E 85 F1 | 	sub	fp, #4
1dda8     A7 1E 02 FB | 	rdlong	local01, fp
1ddac     01 1E 86 F1 | 	sub	local01, #1
1ddb0     A7 1E 62 FC | 	wrlong	local01, fp
1ddb4     1C 4F 85 F1 | 	sub	fp, #284
1ddb8     C0 FF 9F FD | 	jmp	#LR__2626
1ddbc                 | LR__2627
1ddbc                 | LR__2628
1ddbc     B8 4E 05 F1 | 	add	fp, #184
1ddc0     A7 1E 0A FB | 	rdlong	local01, fp wz
1ddc4     B8 4E 85 F1 | 	sub	fp, #184
1ddc8     70 00 90 AD |  if_e	jmp	#LR__2631
1ddcc     20 4F 05 F1 | 	add	fp, #288
1ddd0     A7 20 02 FB | 	rdlong	local02, fp
1ddd4     10 23 02 F6 | 	mov	local03, local02
1ddd8     01 22 06 F1 | 	add	local03, #1
1dddc     A7 22 62 FC | 	wrlong	local03, fp
1dde0     10 5D 48 FC | 	wrbyte	#46, local02
1dde4     04 4E 85 F1 | 	sub	fp, #4
1dde8     A7 00 68 FC | 	wrlong	#0, fp
1ddec     1C 4F 85 F1 | 	sub	fp, #284
1ddf0                 | LR__2629
1ddf0     1C 4F 05 F1 | 	add	fp, #284
1ddf4     A7 20 02 FB | 	rdlong	local02, fp
1ddf8     64 4E 85 F1 | 	sub	fp, #100
1ddfc     A7 26 02 FB | 	rdlong	local05, fp
1de00     B8 4E 85 F1 | 	sub	fp, #184
1de04     13 21 52 F2 | 	cmps	local02, local05 wc
1de08     30 00 90 3D |  if_ae	jmp	#LR__2630
1de0c     20 4F 05 F1 | 	add	fp, #288
1de10     A7 2C 02 FB | 	rdlong	local08, fp
1de14     16 35 02 F6 | 	mov	local12, local08
1de18     01 34 06 F1 | 	add	local12, #1
1de1c     A7 34 62 FC | 	wrlong	local12, fp
1de20     16 55 48 FC | 	wrbyte	#42, local08
1de24     04 4E 85 F1 | 	sub	fp, #4
1de28     A7 34 02 FB | 	rdlong	local12, fp
1de2c     01 34 06 F1 | 	add	local12, #1
1de30     A7 34 62 FC | 	wrlong	local12, fp
1de34     1C 4F 85 F1 | 	sub	fp, #284
1de38     B4 FF 9F FD | 	jmp	#LR__2629
1de3c                 | LR__2630
1de3c                 | LR__2631
1de3c     20 4F 05 F1 | 	add	fp, #288
1de40     A7 20 02 FB | 	rdlong	local02, fp
1de44     10 23 02 F6 | 	mov	local03, local02
1de48     01 22 06 F1 | 	add	local03, #1
1de4c     A7 22 62 FC | 	wrlong	local03, fp
1de50     20 4F 85 F1 | 	sub	fp, #288
1de54     10 01 48 FC | 	wrbyte	#0, local02
1de58                 | LR__2632
1de58     04 4E 05 F1 | 	add	fp, #4
1de5c     A7 12 02 FB | 	rdlong	arg01, fp
1de60     04 4E 05 F1 | 	add	fp, #4
1de64     A7 14 02 FB | 	rdlong	arg02, fp
1de68     BC 4E 05 F1 | 	add	fp, #188
1de6c     A7 16 02 FB | 	rdlong	arg03, fp
1de70     C4 4E 85 F1 | 	sub	fp, #196
1de74     C4 EE BF FD | 	call	#__system___fmtstr
1de78                 | LR__2633
1de78     A7 F0 03 F6 | 	mov	ptra, fp
1de7c     B2 00 A0 FD | 	call	#popregs_
1de80                 | __system___fmtfloat_ret
1de80     2D 00 64 FD | 	ret
1de84                 | 
1de84                 | __system__Left_S
1de84     04 4A 05 F6 | 	mov	COUNT_, #4
1de88     A8 00 A0 FD | 	call	#pushregs_
1de8c     09 1F 02 F6 | 	mov	local01, arg01
1de90     0A 21 02 F6 | 	mov	local02, arg02
1de94     01 20 56 F2 | 	cmps	local02, #1 wc
1de98     59 01 00 CF 
1de9c     F6 FB 05 C6 |  if_b	mov	result1, ##@LR__4523
1dea0     5C 00 90 CD |  if_b	jmp	#LR__2643
1dea4     0F 13 02 F6 | 	mov	arg01, local01
1dea8     09 23 02 F6 | 	mov	local03, arg01
1deac     97 06 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1deb0                 | LR__2640
1deb0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1deb4     01 22 06 51 |  if_ne	add	local03, #1
1deb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2640
1debc                 | LR__2641
1debc     09 23 82 F1 | 	sub	local03, arg01
1dec0     11 FB 01 F6 | 	mov	result1, local03
1dec4     10 FB 59 F2 | 	cmps	result1, local02 wcz
1dec8     0F FB 01 E6 |  if_be	mov	result1, local01
1decc     30 00 90 ED |  if_be	jmp	#LR__2643
1ded0     10 13 02 F6 | 	mov	arg01, local02
1ded4     02 12 06 F1 | 	add	arg01, #2
1ded8     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
1dedc     FD 24 0A F6 | 	mov	local04, result1 wz
1dee0     18 00 90 AD |  if_e	jmp	#LR__2642
1dee4     12 13 02 F6 | 	mov	arg01, local04
1dee8     0F 15 02 F6 | 	mov	arg02, local01
1deec     10 17 02 F6 | 	mov	arg03, local02
1def0     6C DE BF FD | 	call	#__system____builtin_memmove
1def4     12 21 02 F1 | 	add	local02, local04
1def8     10 01 48 FC | 	wrbyte	#0, local02
1defc                 | LR__2642
1defc     12 FB 01 F6 | 	mov	result1, local04
1df00                 | LR__2643
1df00     A7 F0 03 F6 | 	mov	ptra, fp
1df04     B2 00 A0 FD | 	call	#popregs_
1df08                 | __system__Left_S_ret
1df08     2D 00 64 FD | 	ret
1df0c                 | 
1df0c                 | __system__Right_S
1df0c     05 4A 05 F6 | 	mov	COUNT_, #5
1df10     A8 00 A0 FD | 	call	#pushregs_
1df14     09 1F 02 F6 | 	mov	local01, arg01
1df18     0A 21 02 F6 | 	mov	local02, arg02
1df1c     01 20 56 F2 | 	cmps	local02, #1 wc
1df20     59 01 00 CF 
1df24     F7 FB 05 C6 |  if_b	mov	result1, ##@LR__4524
1df28     64 00 90 CD |  if_b	jmp	#LR__2653
1df2c     0F 13 02 F6 | 	mov	arg01, local01
1df30     09 23 02 F6 | 	mov	local03, arg01
1df34     97 06 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1df38                 | LR__2650
1df38     11 FB C9 FA | 	rdbyte	result1, local03 wz
1df3c     01 22 06 51 |  if_ne	add	local03, #1
1df40     F4 FF 9F 5D |  if_ne	jmp	#LR__2650
1df44                 | LR__2651
1df44     09 23 82 F1 | 	sub	local03, arg01
1df48     11 FB 01 F6 | 	mov	result1, local03
1df4c     FD 24 02 F6 | 	mov	local04, result1
1df50     10 25 5A F2 | 	cmps	local04, local02 wcz
1df54     0F FB 01 E6 |  if_be	mov	result1, local01
1df58     34 00 90 ED |  if_be	jmp	#LR__2653
1df5c     10 13 02 F6 | 	mov	arg01, local02
1df60     02 12 06 F1 | 	add	arg01, #2
1df64     20 1D B0 FD | 	call	#__system___gc_alloc_managed
1df68     FD 26 0A F6 | 	mov	local05, result1 wz
1df6c     1C 00 90 AD |  if_e	jmp	#LR__2652
1df70     10 25 82 F1 | 	sub	local04, local02
1df74     0F 25 02 F1 | 	add	local04, local01
1df78     01 20 06 F1 | 	add	local02, #1
1df7c     13 13 02 F6 | 	mov	arg01, local05
1df80     12 15 02 F6 | 	mov	arg02, local04
1df84     10 17 02 F6 | 	mov	arg03, local02
1df88     D4 DD BF FD | 	call	#__system____builtin_memmove
1df8c                 | LR__2652
1df8c     13 FB 01 F6 | 	mov	result1, local05
1df90                 | LR__2653
1df90     A7 F0 03 F6 | 	mov	ptra, fp
1df94     B2 00 A0 FD | 	call	#popregs_
1df98                 | __system__Right_S_ret
1df98     2D 00 64 FD | 	ret
1df9c                 | 
1df9c                 | __system__Mid_S
1df9c     05 4A 05 F6 | 	mov	COUNT_, #5
1dfa0     A8 00 A0 FD | 	call	#pushregs_
1dfa4     09 1F 02 F6 | 	mov	local01, arg01
1dfa8     0A 21 02 F6 | 	mov	local02, arg02
1dfac     01 16 56 F2 | 	cmps	arg03, #1 wc
1dfb0     59 01 00 CF 
1dfb4     F8 FB 05 C6 |  if_b	mov	result1, ##@LR__4525
1dfb8     80 00 90 CD |  if_b	jmp	#LR__2663
1dfbc     01 20 86 F1 | 	sub	local02, #1
1dfc0     00 20 56 F3 | 	fges	local02, #0 wc
1dfc4     0F 13 02 F6 | 	mov	arg01, local01
1dfc8     09 23 02 F6 | 	mov	local03, arg01
1dfcc     97 06 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1dfd0                 | LR__2660
1dfd0     11 FB C9 FA | 	rdbyte	result1, local03 wz
1dfd4     01 22 06 51 |  if_ne	add	local03, #1
1dfd8     F4 FF 9F 5D |  if_ne	jmp	#LR__2660
1dfdc                 | LR__2661
1dfdc     09 23 82 F1 | 	sub	local03, arg01
1dfe0     11 FB 01 F6 | 	mov	result1, local03
1dfe4     FD 14 02 F6 | 	mov	arg02, result1
1dfe8     10 15 52 F2 | 	cmps	arg02, local02 wc
1dfec     59 01 00 CF 
1dff0     F9 FB 05 C6 |  if_b	mov	result1, ##@LR__4526
1dff4     44 00 90 CD |  if_b	jmp	#LR__2663
1dff8     0A 25 02 F6 | 	mov	local04, arg02
1dffc     10 25 82 F1 | 	sub	local04, local02
1e000     0B 25 5A F2 | 	cmps	local04, arg03 wcz
1e004     0B 25 02 16 |  if_a	mov	local04, arg03
1e008     12 13 02 F6 | 	mov	arg01, local04
1e00c     02 12 06 F1 | 	add	arg01, #2
1e010     74 1C B0 FD | 	call	#__system___gc_alloc_managed
1e014     FD 26 0A F6 | 	mov	local05, result1 wz
1e018     1C 00 90 AD |  if_e	jmp	#LR__2662
1e01c     0F 21 02 F1 | 	add	local02, local01
1e020     13 13 02 F6 | 	mov	arg01, local05
1e024     10 15 02 F6 | 	mov	arg02, local02
1e028     12 17 02 F6 | 	mov	arg03, local04
1e02c     30 DD BF FD | 	call	#__system____builtin_memmove
1e030     13 25 02 F1 | 	add	local04, local05
1e034     12 01 48 FC | 	wrbyte	#0, local04
1e038                 | LR__2662
1e038     13 FB 01 F6 | 	mov	result1, local05
1e03c                 | LR__2663
1e03c     A7 F0 03 F6 | 	mov	ptra, fp
1e040     B2 00 A0 FD | 	call	#popregs_
1e044                 | __system__Mid_S_ret
1e044     2D 00 64 FD | 	ret
1e048                 | 
1e048                 | __system__Chr_S
1e048     01 4A 05 F6 | 	mov	COUNT_, #1
1e04c     A8 00 A0 FD | 	call	#pushregs_
1e050     09 1F 02 F6 | 	mov	local01, arg01
1e054     03 12 06 F6 | 	mov	arg01, #3
1e058     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
1e05c     00 FA 4D F2 | 	cmps	result1, #0 wz
1e060     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
1e064     01 FA 05 51 |  if_ne	add	result1, #1
1e068     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1e06c     01 FA 85 51 |  if_ne	sub	result1, #1
1e070     A7 F0 03 F6 | 	mov	ptra, fp
1e074     B2 00 A0 FD | 	call	#popregs_
1e078                 | __system__Chr_S_ret
1e078     2D 00 64 FD | 	ret
1e07c                 | 
1e07c                 | __system__str_S
1e07c     02 4A 05 F6 | 	mov	COUNT_, #2
1e080     A8 00 A0 FD | 	call	#pushregs_
1e084     09 1F 02 F6 | 	mov	local01, arg01
1e088     10 12 06 F6 | 	mov	arg01, #16
1e08c     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
1e090     FD 20 0A F6 | 	mov	local02, result1 wz
1e094     30 00 90 AD |  if_e	jmp	#LR__2670
1e098     F8 13 02 F6 | 	mov	arg01, ptra
1e09c     08 F0 07 F1 | 	add	ptra, #8
1e0a0     09 21 62 FC | 	wrlong	local02, arg01
1e0a4     04 12 06 F1 | 	add	arg01, #4
1e0a8     09 01 68 FC | 	wrlong	#0, arg01
1e0ac     04 12 86 F1 | 	sub	arg01, #4
1e0b0     00 D8 03 FF 
1e0b4     00 12 46 F5 | 	or	arg01, ##128974848
1e0b8     00 14 06 F6 | 	mov	arg02, #0
1e0bc     0F 17 02 F6 | 	mov	arg03, local01
1e0c0     67 18 06 F6 | 	mov	arg04, #103
1e0c4     90 EE BF FD | 	call	#__system___fmtfloat
1e0c8                 | LR__2670
1e0c8     10 FB 01 F6 | 	mov	result1, local02
1e0cc     A7 F0 03 F6 | 	mov	ptra, fp
1e0d0     B2 00 A0 FD | 	call	#popregs_
1e0d4                 | __system__str_S_ret
1e0d4     2D 00 64 FD | 	ret
1e0d8                 | 
1e0d8                 | __system__Number_S
1e0d8     08 4A 05 F6 | 	mov	COUNT_, #8
1e0dc     A8 00 A0 FD | 	call	#pushregs_
1e0e0     09 1F 02 F6 | 	mov	local01, arg01
1e0e4     0A 21 0A F6 | 	mov	local02, arg02 wz
1e0e8     0B 23 02 F6 | 	mov	local03, arg03
1e0ec     3C 00 90 5D |  if_ne	jmp	#LR__2682
1e0f0     01 20 06 F6 | 	mov	local02, #1
1e0f4     11 25 02 F6 | 	mov	local04, local03
1e0f8     01 26 06 F6 | 	mov	local05, #1
1e0fc     97 16 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
1e100                 | LR__2680
1e100     00 28 06 F6 | 	mov	local06, #0
1e104     0F 25 1A F2 | 	cmp	local04, local01 wcz
1e108     01 28 66 E6 |  if_be	neg	local06, #1
1e10c     12 27 12 F2 | 	cmp	local05, local04 wc
1e110     15 2B A2 F1 | 	subx	local07, local07
1e114     15 29 CA F7 | 	test	local06, local07 wz
1e118     11 25 02 5D |  if_ne	qmul	local04, local03
1e11c     12 27 02 56 |  if_ne	mov	local05, local04
1e120     01 20 06 51 |  if_ne	add	local02, #1
1e124     18 24 62 5D |  if_ne	getqx	local04
1e128     D4 FF 9F 5D |  if_ne	jmp	#LR__2680
1e12c                 | LR__2681
1e12c                 | LR__2682
1e12c     20 20 36 F3 | 	fle	local02, #32 wc
1e130     10 13 02 F6 | 	mov	arg01, local02
1e134     02 12 06 F1 | 	add	arg01, #2
1e138     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
1e13c     FD 28 02 F6 | 	mov	local06, result1
1e140     10 2B 02 F6 | 	mov	local07, local02
1e144     14 2B 02 F1 | 	add	local07, local06
1e148     15 01 48 FC | 	wrbyte	#0, local07
1e14c     97 1A 48 FB | 	callpa	#(@LR__2684-@LR__2683)>>2,fcache_load_ptr_
1e150                 | LR__2683
1e150     01 20 16 F2 | 	cmp	local02, #1 wc
1e154     2C 00 90 CD |  if_b	jmp	#LR__2685
1e158     11 1F 12 FD | 	qdiv	local01, local03
1e15c     01 20 86 F1 | 	sub	local02, #1
1e160     10 2B 02 F6 | 	mov	local07, local02
1e164     14 2B 02 F1 | 	add	local07, local06
1e168     19 2C 62 FD | 	getqy	local08
1e16c     0A 2C 16 F2 | 	cmp	local08, #10 wc
1e170     30 2C 06 C1 |  if_b	add	local08, #48
1e174     37 2C 06 31 |  if_ae	add	local08, #55
1e178     15 2D 42 FC | 	wrbyte	local08, local07
1e17c     18 1E 62 FD | 	getqx	local01
1e180     CC FF 9F FD | 	jmp	#LR__2683
1e184                 | LR__2684
1e184                 | LR__2685
1e184     14 FB 01 F6 | 	mov	result1, local06
1e188     A7 F0 03 F6 | 	mov	ptra, fp
1e18c     B2 00 A0 FD | 	call	#popregs_
1e190                 | __system__Number_S_ret
1e190     2D 00 64 FD | 	ret
1e194                 | 
1e194                 | __system__LCase_S
1e194     07 4A 05 F6 | 	mov	COUNT_, #7
1e198     A8 00 A0 FD | 	call	#pushregs_
1e19c     09 1F 02 F6 | 	mov	local01, arg01
1e1a0     09 21 02 F6 | 	mov	local02, arg01
1e1a4     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1e1a8                 | LR__2690
1e1a8     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e1ac     01 20 06 51 |  if_ne	add	local02, #1
1e1b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2690
1e1b4                 | LR__2691
1e1b4     09 21 82 F1 | 	sub	local02, arg01
1e1b8     10 FB 01 F6 | 	mov	result1, local02
1e1bc     FD 20 0A F6 | 	mov	local02, result1 wz
1e1c0     59 01 00 AF 
1e1c4     FA FB 05 A6 |  if_e	mov	result1, ##@LR__4527
1e1c8     7C 00 90 AD |  if_e	jmp	#LR__2697
1e1cc     10 13 02 F6 | 	mov	arg01, local02
1e1d0     02 12 06 F1 | 	add	arg01, #2
1e1d4     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
1e1d8     FD 22 0A F6 | 	mov	local03, result1 wz
1e1dc     64 00 90 AD |  if_e	jmp	#LR__2696
1e1e0     01 24 66 F6 | 	neg	local04, #1
1e1e4     97 26 48 FB | 	callpa	#(@LR__2695-@LR__2692)>>2,fcache_load_ptr_
1e1e8                 | LR__2692
1e1e8     01 24 06 F1 | 	add	local04, #1
1e1ec     12 27 02 F6 | 	mov	local05, local04
1e1f0     0F 27 02 F1 | 	add	local05, local01
1e1f4     13 29 C2 FA | 	rdbyte	local06, local05
1e1f8     41 28 56 F2 | 	cmps	local06, #65 wc
1e1fc     18 00 90 CD |  if_b	jmp	#LR__2693
1e200     5B 28 56 F2 | 	cmps	local06, #91 wc
1e204     12 2B 02 C6 |  if_b	mov	local07, local04
1e208     11 2B 02 C1 |  if_b	add	local07, local03
1e20c     20 28 06 C1 |  if_b	add	local06, #32
1e210     15 29 42 CC |  if_b	wrbyte	local06, local07
1e214     0C 00 90 CD |  if_b	jmp	#LR__2694
1e218                 | LR__2693
1e218     12 2B 02 F6 | 	mov	local07, local04
1e21c     11 2B 02 F1 | 	add	local07, local03
1e220     15 29 42 FC | 	wrbyte	local06, local07
1e224                 | LR__2694
1e224     10 29 02 F6 | 	mov	local06, local02
1e228     01 28 86 F1 | 	sub	local06, #1
1e22c     14 25 0A F2 | 	cmp	local04, local06 wz
1e230     B4 FF 9F 5D |  if_ne	jmp	#LR__2692
1e234                 | LR__2695
1e234     11 21 02 F1 | 	add	local02, local03
1e238     10 01 48 FC | 	wrbyte	#0, local02
1e23c     11 FB 01 F6 | 	mov	result1, local03
1e240     04 00 90 FD | 	jmp	#LR__2697
1e244                 | LR__2696
1e244     11 FB 01 F6 | 	mov	result1, local03
1e248                 | LR__2697
1e248     A7 F0 03 F6 | 	mov	ptra, fp
1e24c     B2 00 A0 FD | 	call	#popregs_
1e250                 | __system__LCase_S_ret
1e250     2D 00 64 FD | 	ret
1e254                 | 
1e254                 | __system__LTrim_S
1e254     05 4A 05 F6 | 	mov	COUNT_, #5
1e258     A8 00 A0 FD | 	call	#pushregs_
1e25c     09 1F 02 F6 | 	mov	local01, arg01
1e260     09 21 02 F6 | 	mov	local02, arg01
1e264     97 06 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1e268                 | LR__2700
1e268     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e26c     01 20 06 51 |  if_ne	add	local02, #1
1e270     F4 FF 9F 5D |  if_ne	jmp	#LR__2700
1e274                 | LR__2701
1e274     09 21 82 F1 | 	sub	local02, arg01
1e278     10 FB 01 F6 | 	mov	result1, local02
1e27c     FD 20 0A F6 | 	mov	local02, result1 wz
1e280     59 01 00 AF 
1e284     FB FB 05 A6 |  if_e	mov	result1, ##@LR__4528
1e288     7C 00 90 AD |  if_e	jmp	#LR__2706
1e28c     00 22 06 F6 | 	mov	local03, #0
1e290     10 25 02 F6 | 	mov	local04, local02
1e294                 | LR__2702
1e294     12 23 52 F2 | 	cmps	local03, local04 wc
1e298     68 00 90 3D |  if_ae	jmp	#LR__2705
1e29c     11 17 02 F6 | 	mov	arg03, local03
1e2a0     0F 17 02 F1 | 	add	arg03, local01
1e2a4     0B 17 C2 FA | 	rdbyte	arg03, arg03
1e2a8     20 16 0E F2 | 	cmp	arg03, #32 wz
1e2ac     4C 00 90 AD |  if_e	jmp	#LR__2704
1e2b0     10 13 02 F6 | 	mov	arg01, local02
1e2b4     11 13 82 F1 | 	sub	arg01, local03
1e2b8     02 12 06 F1 | 	add	arg01, #2
1e2bc     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
1e2c0     FD 26 0A F6 | 	mov	local05, result1 wz
1e2c4     2C 00 90 AD |  if_e	jmp	#LR__2703
1e2c8     11 15 02 F6 | 	mov	arg02, local03
1e2cc     0F 15 02 F1 | 	add	arg02, local01
1e2d0     10 17 02 F6 | 	mov	arg03, local02
1e2d4     11 17 82 F1 | 	sub	arg03, local03
1e2d8     13 13 02 F6 | 	mov	arg01, local05
1e2dc     80 DA BF FD | 	call	#__system____builtin_memmove
1e2e0     11 21 82 F1 | 	sub	local02, local03
1e2e4     13 21 02 F1 | 	add	local02, local05
1e2e8     10 01 48 FC | 	wrbyte	#0, local02
1e2ec     13 FB 01 F6 | 	mov	result1, local05
1e2f0     14 00 90 FD | 	jmp	#LR__2706
1e2f4                 | LR__2703
1e2f4     13 FB 01 F6 | 	mov	result1, local05
1e2f8     0C 00 90 FD | 	jmp	#LR__2706
1e2fc                 | LR__2704
1e2fc     01 22 06 F1 | 	add	local03, #1
1e300     90 FF 9F FD | 	jmp	#LR__2702
1e304                 | LR__2705
1e304     0F FB 01 F6 | 	mov	result1, local01
1e308                 | LR__2706
1e308     A7 F0 03 F6 | 	mov	ptra, fp
1e30c     B2 00 A0 FD | 	call	#popregs_
1e310                 | __system__LTrim_S_ret
1e310     2D 00 64 FD | 	ret
1e314                 | 
1e314                 | __system__RTrim_S
1e314     04 4A 05 F6 | 	mov	COUNT_, #4
1e318     A8 00 A0 FD | 	call	#pushregs_
1e31c     09 1F 02 F6 | 	mov	local01, arg01
1e320     09 21 02 F6 | 	mov	local02, arg01
1e324     97 06 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
1e328                 | LR__2710
1e328     10 FB C9 FA | 	rdbyte	result1, local02 wz
1e32c     01 20 06 51 |  if_ne	add	local02, #1
1e330     F4 FF 9F 5D |  if_ne	jmp	#LR__2710
1e334                 | LR__2711
1e334     09 21 82 F1 | 	sub	local02, arg01
1e338     10 FB 01 F6 | 	mov	result1, local02
1e33c     FD 20 0A F6 | 	mov	local02, result1 wz
1e340     59 01 00 AF 
1e344     FC FB 05 A6 |  if_e	mov	result1, ##@LR__4529
1e348     74 00 90 AD |  if_e	jmp	#LR__2715
1e34c     10 23 02 F6 | 	mov	local03, local02
1e350     01 22 86 F1 | 	sub	local03, #1
1e354                 | LR__2712
1e354     11 15 02 F6 | 	mov	arg02, local03
1e358     0F 15 02 F1 | 	add	arg02, local01
1e35c     0A 21 C2 FA | 	rdbyte	local02, arg02
1e360     20 20 0E F2 | 	cmp	local02, #32 wz
1e364     44 00 90 AD |  if_e	jmp	#LR__2714
1e368     11 13 02 F6 | 	mov	arg01, local03
1e36c     02 12 06 F1 | 	add	arg01, #2
1e370     14 19 B0 FD | 	call	#__system___gc_alloc_managed
1e374     FD 24 0A F6 | 	mov	local04, result1 wz
1e378     28 00 90 AD |  if_e	jmp	#LR__2713
1e37c     11 17 02 F6 | 	mov	arg03, local03
1e380     01 16 06 F1 | 	add	arg03, #1
1e384     12 13 02 F6 | 	mov	arg01, local04
1e388     0F 15 02 F6 | 	mov	arg02, local01
1e38c     D0 D9 BF FD | 	call	#__system____builtin_memmove
1e390     01 22 06 F1 | 	add	local03, #1
1e394     12 23 02 F1 | 	add	local03, local04
1e398     11 01 48 FC | 	wrbyte	#0, local03
1e39c     12 FB 01 F6 | 	mov	result1, local04
1e3a0     1C 00 90 FD | 	jmp	#LR__2715
1e3a4                 | LR__2713
1e3a4     12 FB 01 F6 | 	mov	result1, local04
1e3a8     14 00 90 FD | 	jmp	#LR__2715
1e3ac                 | LR__2714
1e3ac     01 22 86 F1 | 	sub	local03, #1
1e3b0     00 22 56 F2 | 	cmps	local03, #0 wc
1e3b4     9C FF 9F 3D |  if_ae	jmp	#LR__2712
1e3b8     59 01 00 FF 
1e3bc     FD FB 05 F6 | 	mov	result1, ##@LR__4530
1e3c0                 | LR__2715
1e3c0     A7 F0 03 F6 | 	mov	ptra, fp
1e3c4     B2 00 A0 FD | 	call	#popregs_
1e3c8                 | __system__RTrim_S_ret
1e3c8     2D 00 64 FD | 	ret
1e3cc                 | 
1e3cc                 | __system__Instr
1e3cc     07 4A 05 F6 | 	mov	COUNT_, #7
1e3d0     A8 00 A0 FD | 	call	#pushregs_
1e3d4     09 1F 02 F6 | 	mov	local01, arg01
1e3d8     0A 21 02 F6 | 	mov	local02, arg02
1e3dc     0B 23 02 F6 | 	mov	local03, arg03
1e3e0     11 13 02 F6 | 	mov	arg01, local03
1e3e4     09 25 02 F6 | 	mov	local04, arg01
1e3e8     97 06 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
1e3ec                 | LR__2720
1e3ec     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e3f0     01 24 06 51 |  if_ne	add	local04, #1
1e3f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2720
1e3f8                 | LR__2721
1e3f8     09 25 82 F1 | 	sub	local04, arg01
1e3fc     12 27 02 F6 | 	mov	local05, local04
1e400     10 13 02 F6 | 	mov	arg01, local02
1e404     09 25 02 F6 | 	mov	local04, arg01
1e408     97 06 48 FB | 	callpa	#(@LR__2723-@LR__2722)>>2,fcache_load_ptr_
1e40c                 | LR__2722
1e40c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1e410     01 24 06 51 |  if_ne	add	local04, #1
1e414     F4 FF 9F 5D |  if_ne	jmp	#LR__2722
1e418                 | LR__2723
1e418     09 25 82 F1 | 	sub	local04, arg01
1e41c     12 FB 01 F6 | 	mov	result1, local04
1e420     FD 18 0A F6 | 	mov	arg04, result1 wz
1e424     00 FA 05 A6 |  if_e	mov	result1, #0
1e428     98 00 90 AD |  if_e	jmp	#LR__2727
1e42c     00 26 0E F2 | 	cmp	local05, #0 wz
1e430     00 FA 05 A6 |  if_e	mov	result1, #0
1e434     8C 00 90 AD |  if_e	jmp	#LR__2727
1e438     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
1e43c     00 FA 05 16 |  if_a	mov	result1, #0
1e440     80 00 90 1D |  if_a	jmp	#LR__2727
1e444     01 1E 56 F2 | 	cmps	local01, #1 wc
1e448     01 1E 06 C6 |  if_b	mov	local01, #1
1e44c     11 29 C2 FA | 	rdbyte	local06, local03
1e450     01 26 0E F2 | 	cmp	local05, #1 wz
1e454     18 00 90 5D |  if_ne	jmp	#LR__2724
1e458     10 13 02 F6 | 	mov	arg01, local02
1e45c     14 15 02 F6 | 	mov	arg02, local06
1e460     0F 17 02 F6 | 	mov	arg03, local01
1e464     00 18 06 F6 | 	mov	arg04, #0
1e468     B4 33 B0 FD | 	call	#__system____ScanForChar
1e46c     54 00 90 FD | 	jmp	#LR__2727
1e470                 | LR__2724
1e470     0F 2B 02 F6 | 	mov	local07, local01
1e474                 | LR__2725
1e474     10 13 02 F6 | 	mov	arg01, local02
1e478     14 15 02 F6 | 	mov	arg02, local06
1e47c     15 17 02 F6 | 	mov	arg03, local07
1e480     00 18 06 F6 | 	mov	arg04, #0
1e484     98 33 B0 FD | 	call	#__system____ScanForChar
1e488     FD 2A 0A F6 | 	mov	local07, result1 wz
1e48c     30 00 90 AD |  if_e	jmp	#LR__2726
1e490     13 17 02 F6 | 	mov	arg03, local05
1e494     10 13 02 F6 | 	mov	arg01, local02
1e498     15 15 02 F6 | 	mov	arg02, local07
1e49c     FC FA BF FD | 	call	#__system__Mid_S
1e4a0     FD 12 02 F6 | 	mov	arg01, result1
1e4a4     11 15 02 F6 | 	mov	arg02, local03
1e4a8     BC D9 BF FD | 	call	#__system___string_cmp
1e4ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1e4b0     15 FB 01 A6 |  if_e	mov	result1, local07
1e4b4     0C 00 90 AD |  if_e	jmp	#LR__2727
1e4b8     13 2B 02 F1 | 	add	local07, local05
1e4bc     B4 FF 9F FD | 	jmp	#LR__2725
1e4c0                 | LR__2726
1e4c0     00 FA 05 F6 | 	mov	result1, #0
1e4c4                 | LR__2727
1e4c4     A7 F0 03 F6 | 	mov	ptra, fp
1e4c8     B2 00 A0 FD | 	call	#popregs_
1e4cc                 | __system__Instr_ret
1e4cc     2D 00 64 FD | 	ret
1e4d0                 | 
1e4d0                 | __system___strerror
1e4d0     00 12 56 F2 | 	cmps	arg01, #0 wc
1e4d4     08 00 90 CD |  if_b	jmp	#LR__2730
1e4d8     1A 12 56 F2 | 	cmps	arg01, #26 wc
1e4dc     04 00 90 CD |  if_b	jmp	#LR__2731
1e4e0                 | LR__2730
1e4e0     19 12 06 F6 | 	mov	arg01, #25
1e4e4                 | LR__2731
1e4e4     02 12 66 F0 | 	shl	arg01, #2
1e4e8     01 00 00 FF 
1e4ec     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
1e4f0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1e4f4     09 FB 01 FB | 	rdlong	result1, arg01
1e4f8     01 00 00 FF 
1e4fc     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
1e500                 | __system___strerror_ret
1e500     2D 00 64 FD | 	ret
1e504                 | 
1e504                 | __system___int64_shl
1e504     20 16 CE F7 | 	test	arg03, #32 wz
1e508     09 15 02 56 |  if_ne	mov	arg02, arg01
1e50c     00 12 06 56 |  if_ne	mov	arg01, #0
1e510     1F 16 CE F7 | 	test	arg03, #31 wz
1e514     18 00 90 AD |  if_e	jmp	#LR__2740
1e518     0B 15 62 F0 | 	shl	arg02, arg03
1e51c     09 FB 01 F6 | 	mov	result1, arg01
1e520     0B FD 61 F6 | 	neg	result2, arg03
1e524     FE FA 41 F0 | 	shr	result1, result2
1e528     FD 14 42 F5 | 	or	arg02, result1
1e52c     0B 13 62 F0 | 	shl	arg01, arg03
1e530                 | LR__2740
1e530     0A FD 01 F6 | 	mov	result2, arg02
1e534     09 FB 01 F6 | 	mov	result1, arg01
1e538                 | __system___int64_shl_ret
1e538     2D 00 64 FD | 	ret
1e53c                 | 
1e53c                 | __system___usepins
1e53c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1e540     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1e544     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
1e548     00 13 CA F7 | 	test	arg01, _var01 wz
1e54c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
1e550     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
1e554     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
1e558     01 15 CA A7 |  if_e	test	arg02, _var02 wz
1e55c     00 FA 05 56 |  if_ne	mov	result1, #0
1e560     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
1e564     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1e568     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1e56c     09 03 42 F5 | 	or	_var02, arg01
1e570     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1e574     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e578     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
1e57c     0A 03 42 F5 | 	or	_var02, arg02
1e580     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
1e584     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1e588     01 FA 65 F6 | 	neg	result1, #1
1e58c                 | __system___usepins_ret
1e58c     2D 00 64 FD | 	ret
1e590                 | 
1e590                 | __system___freepins
1e590     14 E6 05 F1 | 	add	ptr___system__dat__, #20
1e594     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1e598     09 01 22 F5 | 	andn	_var01, arg01
1e59c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1e5a0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e5a4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
1e5a8     0A 01 22 F5 | 	andn	_var01, arg02
1e5ac     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
1e5b0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
1e5b4                 | __system___freepins_ret
1e5b4     2D 00 64 FD | 	ret
1e5b8                 | 
1e5b8                 | __system___float_fromuns
1e5b8     09 17 0A F6 | 	mov	arg03, arg01 wz
1e5bc     0B FB 01 A6 |  if_e	mov	result1, arg03
1e5c0     24 00 90 AD |  if_e	jmp	#LR__2750
1e5c4     0B 15 92 F7 | 	encod	arg02, arg03 wc
1e5c8     01 14 06 C1 |  if_b	add	arg02, #1
1e5cc     01 14 86 F1 | 	sub	arg02, #1
1e5d0     1F 12 06 F6 | 	mov	arg01, #31
1e5d4     0A 13 82 F1 | 	sub	arg01, arg02
1e5d8     09 17 62 F0 | 	shl	arg03, arg01
1e5dc     02 16 46 F0 | 	shr	arg03, #2
1e5e0     00 12 06 F6 | 	mov	arg01, #0
1e5e4     4C 09 B0 FD | 	call	#__system___float_Pack
1e5e8                 | LR__2750
1e5e8                 | __system___float_fromuns_ret
1e5e8     2D 00 64 FD | 	ret
1e5ec                 | 
1e5ec                 | __system___float_add
1e5ec     0F 4A 05 F6 | 	mov	COUNT_, #15
1e5f0     A8 00 A0 FD | 	call	#pushregs_
1e5f4     09 1F 02 F6 | 	mov	local01, arg01
1e5f8     0A 21 02 F6 | 	mov	local02, arg02
1e5fc     00 22 06 F6 | 	mov	local03, #0
1e600     0F 25 02 F6 | 	mov	local04, local01
1e604     12 27 02 F6 | 	mov	local05, local04
1e608     16 26 46 F7 | 	zerox	local05, #22
1e60c     12 29 02 F6 | 	mov	local06, local04
1e610     01 28 66 F0 | 	shl	local06, #1
1e614     18 28 46 F0 | 	shr	local06, #24
1e618     1F 24 46 F0 | 	shr	local04, #31
1e61c     10 13 02 F6 | 	mov	arg01, local02
1e620     09 FB 01 F6 | 	mov	result1, arg01
1e624     FD 2A 02 F6 | 	mov	local07, result1
1e628     15 2D 02 F6 | 	mov	local08, local07
1e62c     16 2C 46 F7 | 	zerox	local08, #22
1e630     15 2F 02 F6 | 	mov	local09, local07
1e634     01 2E 66 F0 | 	shl	local09, #1
1e638     18 2E 46 F0 | 	shr	local09, #24
1e63c     17 31 02 F6 | 	mov	local10, local09
1e640     1F 2A 46 F0 | 	shr	local07, #31
1e644     00 32 06 F6 | 	mov	local11, #0
1e648     00 34 06 F6 | 	mov	local12, #0
1e64c     18 29 12 F2 | 	cmp	local06, local10 wc
1e650     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
1e654     2C 00 90 1D |  if_a	jmp	#LR__2760
1e658     16 27 12 32 |  if_ae	cmp	local05, local08 wc
1e65c     24 00 90 3D |  if_ae	jmp	#LR__2760
1e660     13 37 02 F6 | 	mov	local13, local05
1e664     16 27 02 F6 | 	mov	local05, local08
1e668     1B 2D 02 F6 | 	mov	local08, local13
1e66c     14 37 02 F6 | 	mov	local13, local06
1e670     18 29 02 F6 | 	mov	local06, local10
1e674     1B 31 02 F6 | 	mov	local10, local13
1e678     12 37 02 F6 | 	mov	local13, local04
1e67c     15 25 02 F6 | 	mov	local04, local07
1e680     1B 2B 02 F6 | 	mov	local07, local13
1e684                 | LR__2760
1e684     FF 28 0E F2 | 	cmp	local06, #255 wz
1e688     70 01 90 AD |  if_e	jmp	#LR__2775
1e68c     00 28 0E F2 | 	cmp	local06, #0 wz
1e690     AC 01 90 AD |  if_e	jmp	#LR__2777
1e694     17 26 26 F4 | 	bith	local05, #23
1e698                 | LR__2761
1e698     00 30 0E F2 | 	cmp	local10, #0 wz
1e69c     F0 01 90 AD |  if_e	jmp	#LR__2781
1e6a0     17 2C 26 F4 | 	bith	local08, #23
1e6a4                 | LR__2762
1e6a4     7F 28 86 F1 | 	sub	local06, #127
1e6a8     7F 30 86 F1 | 	sub	local10, #127
1e6ac     14 39 02 F6 | 	mov	local14, local06
1e6b0     18 39 82 F1 | 	sub	local14, local10
1e6b4     97 14 48 FB | 	callpa	#(@LR__2764-@LR__2763)>>2,fcache_load_ptr_
1e6b8                 | LR__2763
1e6b8     20 38 56 F2 | 	cmps	local14, #32 wc
1e6bc     20 00 90 CD |  if_b	jmp	#LR__2765
1e6c0     16 2F 02 F6 | 	mov	local09, local08
1e6c4     00 32 0E F2 | 	cmp	local11, #0 wz
1e6c8     6F 32 62 FD | 	wrnz	local11
1e6cc     19 2F 42 F5 | 	or	local09, local11
1e6d0     17 33 02 F6 | 	mov	local11, local09
1e6d4     00 2C 06 F6 | 	mov	local08, #0
1e6d8     20 38 86 F1 | 	sub	local14, #32
1e6dc     D8 FF 9F FD | 	jmp	#LR__2763
1e6e0                 | LR__2764
1e6e0                 | LR__2765
1e6e0     00 38 0E F2 | 	cmp	local14, #0 wz
1e6e4     38 00 90 AD |  if_e	jmp	#LR__2766
1e6e8     16 37 02 F6 | 	mov	local13, local08
1e6ec     20 30 06 F6 | 	mov	local10, #32
1e6f0     1C 31 82 F1 | 	sub	local10, local14
1e6f4     18 37 62 F0 | 	shl	local13, local10
1e6f8     19 31 02 F6 | 	mov	local10, local11
1e6fc     20 2E 06 F6 | 	mov	local09, #32
1e700     1C 2F 82 F1 | 	sub	local09, local14
1e704     17 31 6A F0 | 	shl	local10, local09 wz
1e708     1C 33 42 F0 | 	shr	local11, local14
1e70c     1C 2D 42 F0 | 	shr	local08, local14
1e710     1B 33 42 F5 | 	or	local11, local13
1e714     00 3A 06 F6 | 	mov	local15, #0
1e718     01 3A 06 56 |  if_ne	mov	local15, #1
1e71c     1D 33 42 F5 | 	or	local11, local15
1e720                 | LR__2766
1e720     12 3B 02 F6 | 	mov	local15, local04
1e724     15 3B 62 F5 | 	xor	local15, local07
1e728     01 3A CE F7 | 	test	local15, #1 wz
1e72c     18 00 90 AD |  if_e	jmp	#LR__2767
1e730     16 2D 22 F6 | 	not	local08, local08
1e734     19 33 22 F6 | 	not	local11, local11
1e738     01 32 0E F1 | 	add	local11, #1 wz
1e73c     00 3A 06 F6 | 	mov	local15, #0
1e740     01 3A 06 A6 |  if_e	mov	local15, #1
1e744     1D 2D 02 F1 | 	add	local08, local15
1e748                 | LR__2767
1e748     19 35 12 F1 | 	add	local12, local11 wc
1e74c     16 27 22 F1 | 	addx	local05, local08
1e750     00 26 56 F2 | 	cmps	local05, #0 wc
1e754     1C 00 90 3D |  if_ae	jmp	#LR__2768
1e758     01 24 66 F5 | 	xor	local04, #1
1e75c     13 27 22 F6 | 	not	local05, local05
1e760     1A 35 22 F6 | 	not	local12, local12
1e764     01 34 0E F1 | 	add	local12, #1 wz
1e768     00 3A 06 F6 | 	mov	local15, #0
1e76c     01 3A 06 A6 |  if_e	mov	local15, #1
1e770     1D 27 02 F1 | 	add	local05, local15
1e774                 | LR__2768
1e774     00 80 00 FF 
1e778     00 26 16 F2 | 	cmp	local05, ##16777216 wc
1e77c     28 00 90 CD |  if_b	jmp	#LR__2769
1e780     01 28 06 F1 | 	add	local06, #1
1e784     1A 39 02 F6 | 	mov	local14, local12
1e788     01 38 06 F5 | 	and	local14, #1
1e78c     01 34 46 F0 | 	shr	local12, #1
1e790     13 3B 02 F6 | 	mov	local15, local05
1e794     1F 3A 66 F0 | 	shl	local15, #31
1e798     1D 35 42 F5 | 	or	local12, local15
1e79c     1C 35 42 F5 | 	or	local12, local14
1e7a0     01 26 46 F0 | 	shr	local05, #1
1e7a4     3C 00 90 FD | 	jmp	#LR__2774
1e7a8                 | LR__2769
1e7a8     00 40 00 FF 
1e7ac     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1e7b0     30 00 90 3D |  if_ae	jmp	#LR__2773
1e7b4     00 26 0E F2 | 	cmp	local05, #0 wz
1e7b8     00 34 0E A2 |  if_e	cmp	local12, #0 wz
1e7bc     08 24 46 A5 |  if_e	or	local04, #8
1e7c0     01 24 26 A5 |  if_e	andn	local04, #1
1e7c4     1C 00 90 AD |  if_e	jmp	#LR__2772
1e7c8                 | LR__2770
1e7c8     00 40 00 FF 
1e7cc     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1e7d0     10 00 90 3D |  if_ae	jmp	#LR__2771
1e7d4     1A 35 12 F1 | 	add	local12, local12 wc
1e7d8     13 27 22 F1 | 	addx	local05, local05
1e7dc     01 28 86 F1 | 	sub	local06, #1
1e7e0     E4 FF 9F FD | 	jmp	#LR__2770
1e7e4                 | LR__2771
1e7e4                 | LR__2772
1e7e4                 | LR__2773
1e7e4                 | LR__2774
1e7e4     13 13 02 F6 | 	mov	arg01, local05
1e7e8     1A 15 02 F6 | 	mov	arg02, local12
1e7ec     14 17 02 F6 | 	mov	arg03, local06
1e7f0     12 19 02 F6 | 	mov	arg04, local04
1e7f4     6C 34 B0 FD | 	call	#__system__pack_0538
1e7f8     DC 00 90 FD | 	jmp	#LR__2785
1e7fc                 | LR__2775
1e7fc     FF 30 0E F2 | 	cmp	local10, #255 wz
1e800     10 00 90 5D |  if_ne	jmp	#LR__2776
1e804     12 2B 0A F2 | 	cmp	local07, local04 wz
1e808     00 F8 3F 5F 
1e80c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1e810     C4 00 90 5D |  if_ne	jmp	#LR__2785
1e814                 | LR__2776
1e814     00 26 0E F2 | 	cmp	local05, #0 wz
1e818     00 F8 3F 5F 
1e81c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1e820     B4 00 90 5D |  if_ne	jmp	#LR__2785
1e824     1A 15 02 F6 | 	mov	arg02, local12
1e828     14 17 02 F6 | 	mov	arg03, local06
1e82c     12 19 02 F6 | 	mov	arg04, local04
1e830     02 18 46 F5 | 	or	arg04, #2
1e834     13 13 02 F6 | 	mov	arg01, local05
1e838     28 34 B0 FD | 	call	#__system__pack_0538
1e83c     98 00 90 FD | 	jmp	#LR__2785
1e840                 | LR__2777
1e840     00 26 0E F2 | 	cmp	local05, #0 wz
1e844     28 00 90 AD |  if_e	jmp	#LR__2780
1e848     01 26 66 F0 | 	shl	local05, #1
1e84c     97 0E 48 FB | 	callpa	#(@LR__2779-@LR__2778)>>2,fcache_load_ptr_
1e850                 | LR__2778
1e850     00 40 00 FF 
1e854     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1e858     14 3B 02 C6 |  if_b	mov	local15, local06
1e85c     01 3A 86 C1 |  if_b	sub	local15, #1
1e860     1D 29 02 C6 |  if_b	mov	local06, local15
1e864     01 26 66 C0 |  if_b	shl	local05, #1
1e868     E4 FF 9F CD |  if_b	jmp	#LR__2778
1e86c                 | LR__2779
1e86c     28 FE 9F FD | 	jmp	#LR__2761
1e870                 | LR__2780
1e870     15 25 02 F5 | 	and	local04, local07
1e874     12 19 02 F6 | 	mov	arg04, local04
1e878     08 18 46 F5 | 	or	arg04, #8
1e87c     00 12 06 F6 | 	mov	arg01, #0
1e880     00 14 06 F6 | 	mov	arg02, #0
1e884     00 16 06 F6 | 	mov	arg03, #0
1e888     D8 33 B0 FD | 	call	#__system__pack_0538
1e88c     48 00 90 FD | 	jmp	#LR__2785
1e890                 | LR__2781
1e890     00 2C 0E F2 | 	cmp	local08, #0 wz
1e894     28 00 90 AD |  if_e	jmp	#LR__2784
1e898     01 2C 66 F0 | 	shl	local08, #1
1e89c     97 0E 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
1e8a0                 | LR__2782
1e8a0     00 40 00 FF 
1e8a4     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
1e8a8     18 3B 02 C6 |  if_b	mov	local15, local10
1e8ac     01 3A 86 C1 |  if_b	sub	local15, #1
1e8b0     1D 31 02 C6 |  if_b	mov	local10, local15
1e8b4     01 2C 66 C0 |  if_b	shl	local08, #1
1e8b8     E4 FF 9F CD |  if_b	jmp	#LR__2782
1e8bc                 | LR__2783
1e8bc     E4 FD 9F FD | 	jmp	#LR__2762
1e8c0                 | LR__2784
1e8c0     7F 28 86 F1 | 	sub	local06, #127
1e8c4     13 13 02 F6 | 	mov	arg01, local05
1e8c8     1A 15 02 F6 | 	mov	arg02, local12
1e8cc     14 17 02 F6 | 	mov	arg03, local06
1e8d0     12 19 02 F6 | 	mov	arg04, local04
1e8d4     8C 33 B0 FD | 	call	#__system__pack_0538
1e8d8                 | LR__2785
1e8d8     A7 F0 03 F6 | 	mov	ptra, fp
1e8dc     B2 00 A0 FD | 	call	#popregs_
1e8e0                 | __system___float_add_ret
1e8e0     2D 00 64 FD | 	ret
1e8e4                 | 
1e8e4                 | __system___float_sqrt
1e8e4     04 4A 05 F6 | 	mov	COUNT_, #4
1e8e8     A8 00 A0 FD | 	call	#pushregs_
1e8ec     09 1F 02 F6 | 	mov	local01, arg01
1e8f0     09 FB 01 F6 | 	mov	result1, arg01
1e8f4     FD 20 02 F6 | 	mov	local02, result1
1e8f8     10 23 02 F6 | 	mov	local03, local02
1e8fc     16 22 46 F7 | 	zerox	local03, #22
1e900     10 25 02 F6 | 	mov	local04, local02
1e904     01 24 66 F0 | 	shl	local04, #1
1e908     18 24 4E F0 | 	shr	local04, #24 wz
1e90c     1F 20 46 F0 | 	shr	local02, #31
1e910     70 00 90 AD |  if_e	jmp	#LR__2791
1e914     17 22 26 F4 | 	bith	local03, #23
1e918                 | LR__2790
1e918     00 20 0E F2 | 	cmp	local02, #0 wz
1e91c     00 F8 3F 5F 
1e920     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
1e924     88 00 90 5D |  if_ne	jmp	#LR__2794
1e928     FF 24 0E F2 | 	cmp	local04, #255 wz
1e92c     0F FB 01 A6 |  if_e	mov	result1, local01
1e930     7C 00 90 AD |  if_e	jmp	#LR__2794
1e934     7F 24 86 F1 | 	sub	local04, #127
1e938     01 24 CE F7 | 	test	local04, #1 wz
1e93c     01 22 66 50 |  if_ne	shl	local03, #1
1e940     05 22 66 F0 | 	shl	local03, #5
1e944     11 01 38 FD | 	qsqrt	#0, local03
1e948     01 24 86 51 |  if_ne	sub	local04, #1
1e94c     12 25 52 F6 | 	abs	local04, local04 wc
1e950     01 24 46 F0 | 	shr	local04, #1
1e954     12 17 82 F6 | 	negc	arg03, local04
1e958     10 19 02 F6 | 	mov	arg04, local02
1e95c     18 12 62 FD | 	getqx	arg01
1e960     09 15 02 F6 | 	mov	arg02, arg01
1e964     19 14 66 F0 | 	shl	arg02, #25
1e968     07 12 46 F0 | 	shr	arg01, #7
1e96c     00 80 00 FF 
1e970     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
1e974     01 16 06 31 |  if_ae	add	arg03, #1
1e978     01 12 46 30 |  if_ae	shr	arg01, #1
1e97c     E4 32 B0 FD | 	call	#__system__pack_0538
1e980     2C 00 90 FD | 	jmp	#LR__2794
1e984                 | LR__2791
1e984     00 22 0E F2 | 	cmp	local03, #0 wz
1e988     0F FB 01 A6 |  if_e	mov	result1, local01
1e98c     20 00 90 AD |  if_e	jmp	#LR__2794
1e990     01 22 66 F0 | 	shl	local03, #1
1e994     97 0A 48 FB | 	callpa	#(@LR__2793-@LR__2792)>>2,fcache_load_ptr_
1e998                 | LR__2792
1e998     00 40 00 FF 
1e99c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
1e9a0     01 24 86 C1 |  if_b	sub	local04, #1
1e9a4     01 22 66 C0 |  if_b	shl	local03, #1
1e9a8     EC FF 9F CD |  if_b	jmp	#LR__2792
1e9ac                 | LR__2793
1e9ac     68 FF 9F FD | 	jmp	#LR__2790
1e9b0                 | LR__2794
1e9b0     A7 F0 03 F6 | 	mov	ptra, fp
1e9b4     B2 00 A0 FD | 	call	#popregs_
1e9b8                 | __system___float_sqrt_ret
1e9b8     2D 00 64 FD | 	ret
1e9bc                 | 
1e9bc                 | __system___float_mul
1e9bc     0B 4A 05 F6 | 	mov	COUNT_, #11
1e9c0     A8 00 A0 FD | 	call	#pushregs_
1e9c4     09 1F 02 F6 | 	mov	local01, arg01
1e9c8     0A 21 02 F6 | 	mov	local02, arg02
1e9cc     0F 23 02 F6 | 	mov	local03, local01
1e9d0     11 25 02 F6 | 	mov	local04, local03
1e9d4     16 24 46 F7 | 	zerox	local04, #22
1e9d8     11 27 02 F6 | 	mov	local05, local03
1e9dc     01 26 66 F0 | 	shl	local05, #1
1e9e0     18 26 46 F0 | 	shr	local05, #24
1e9e4     1F 22 46 F0 | 	shr	local03, #31
1e9e8     10 FB 01 F6 | 	mov	result1, local02
1e9ec     FD 28 02 F6 | 	mov	local06, result1
1e9f0     14 2B 02 F6 | 	mov	local07, local06
1e9f4     16 2A 46 F7 | 	zerox	local07, #22
1e9f8     14 2D 02 F6 | 	mov	local08, local06
1e9fc     01 2C 66 F0 | 	shl	local08, #1
1ea00     18 2C 46 F0 | 	shr	local08, #24
1ea04     1F 28 46 F0 | 	shr	local06, #31
1ea08     14 23 62 F5 | 	xor	local03, local06
1ea0c     FF 26 0E F2 | 	cmp	local05, #255 wz
1ea10     90 00 90 AD |  if_e	jmp	#LR__2803
1ea14     FF 2C 0E F2 | 	cmp	local08, #255 wz
1ea18     D8 00 90 AD |  if_e	jmp	#LR__2805
1ea1c     00 26 0E F2 | 	cmp	local05, #0 wz
1ea20     0C 01 90 AD |  if_e	jmp	#LR__2806
1ea24     17 24 26 F4 | 	bith	local04, #23
1ea28                 | LR__2800
1ea28     00 2C 0E F2 | 	cmp	local08, #0 wz
1ea2c     44 01 90 AD |  if_e	jmp	#LR__2810
1ea30     17 2A 26 F4 | 	bith	local07, #23
1ea34                 | LR__2801
1ea34     12 21 02 F6 | 	mov	local02, local04
1ea38     04 20 66 F0 | 	shl	local02, #4
1ea3c     15 29 02 F6 | 	mov	local06, local07
1ea40     05 28 66 F0 | 	shl	local06, #5
1ea44     14 21 02 FD | 	qmul	local02, local06
1ea48     16 27 02 F1 | 	add	local05, local08
1ea4c     FE 26 86 F1 | 	sub	local05, #254
1ea50     13 2F 02 F6 | 	mov	local09, local05
1ea54     04 24 66 F0 | 	shl	local04, #4
1ea58     05 2A 66 F0 | 	shl	local07, #5
1ea5c     18 30 62 FD | 	getqx	local10
1ea60     15 25 02 FD | 	qmul	local04, local07
1ea64     19 32 62 FD | 	getqy	local11
1ea68     00 80 00 FF 
1ea6c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
1ea70     18 00 90 CD |  if_b	jmp	#LR__2802
1ea74     01 2E 06 F1 | 	add	local09, #1
1ea78     01 30 46 F0 | 	shr	local10, #1
1ea7c     19 2D 02 F6 | 	mov	local08, local11
1ea80     1F 2C 66 F0 | 	shl	local08, #31
1ea84     16 31 42 F5 | 	or	local10, local08
1ea88     01 32 46 F0 | 	shr	local11, #1
1ea8c                 | LR__2802
1ea8c     19 13 02 F6 | 	mov	arg01, local11
1ea90     18 15 02 F6 | 	mov	arg02, local10
1ea94     17 17 02 F6 | 	mov	arg03, local09
1ea98     11 19 02 F6 | 	mov	arg04, local03
1ea9c     C4 31 B0 FD | 	call	#__system__pack_0538
1eaa0     10 01 90 FD | 	jmp	#LR__2814
1eaa4                 | LR__2803
1eaa4     00 24 0E F2 | 	cmp	local04, #0 wz
1eaa8     0F FB 01 56 |  if_ne	mov	result1, local01
1eaac     04 01 90 5D |  if_ne	jmp	#LR__2814
1eab0     FF 2C 56 F2 | 	cmps	local08, #255 wc
1eab4     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
1eab8     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
1eabc     18 00 90 4D |  if_c_and_nz	jmp	#LR__2804
1eac0     00 F8 3F CF 
1eac4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
1eac8     E8 00 90 CD |  if_b	jmp	#LR__2814
1eacc     00 2A 0E F2 | 	cmp	local07, #0 wz
1ead0     10 FB 01 56 |  if_ne	mov	result1, local02
1ead4     DC 00 90 5D |  if_ne	jmp	#LR__2814
1ead8                 | LR__2804
1ead8     02 22 46 F5 | 	or	local03, #2
1eadc     00 12 06 F6 | 	mov	arg01, #0
1eae0     00 14 06 F6 | 	mov	arg02, #0
1eae4     13 17 02 F6 | 	mov	arg03, local05
1eae8     11 19 02 F6 | 	mov	arg04, local03
1eaec     74 31 B0 FD | 	call	#__system__pack_0538
1eaf0     C0 00 90 FD | 	jmp	#LR__2814
1eaf4                 | LR__2805
1eaf4     00 26 0E F2 | 	cmp	local05, #0 wz
1eaf8     00 24 0E A2 |  if_e	cmp	local04, #0 wz
1eafc     00 F8 3F AF 
1eb00     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1eb04     AC 00 90 AD |  if_e	jmp	#LR__2814
1eb08     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb0c     10 FB 01 56 |  if_ne	mov	result1, local02
1eb10     A0 00 90 5D |  if_ne	jmp	#LR__2814
1eb14     16 17 02 F6 | 	mov	arg03, local08
1eb18     11 19 02 F6 | 	mov	arg04, local03
1eb1c     02 18 46 F5 | 	or	arg04, #2
1eb20     00 12 06 F6 | 	mov	arg01, #0
1eb24     00 14 06 F6 | 	mov	arg02, #0
1eb28     38 31 B0 FD | 	call	#__system__pack_0538
1eb2c     84 00 90 FD | 	jmp	#LR__2814
1eb30                 | LR__2806
1eb30     00 24 0E F2 | 	cmp	local04, #0 wz
1eb34     20 00 90 AD |  if_e	jmp	#LR__2809
1eb38     01 24 66 F0 | 	shl	local04, #1
1eb3c     97 0A 48 FB | 	callpa	#(@LR__2808-@LR__2807)>>2,fcache_load_ptr_
1eb40                 | LR__2807
1eb40     00 40 00 FF 
1eb44     00 24 16 F2 | 	cmp	local04, ##8388608 wc
1eb48     01 26 86 C1 |  if_b	sub	local05, #1
1eb4c     01 24 66 C0 |  if_b	shl	local04, #1
1eb50     EC FF 9F CD |  if_b	jmp	#LR__2807
1eb54                 | LR__2808
1eb54     D0 FE 9F FD | 	jmp	#LR__2800
1eb58                 | LR__2809
1eb58     08 22 46 F5 | 	or	local03, #8
1eb5c     00 12 06 F6 | 	mov	arg01, #0
1eb60     00 14 06 F6 | 	mov	arg02, #0
1eb64     00 16 06 F6 | 	mov	arg03, #0
1eb68     11 19 02 F6 | 	mov	arg04, local03
1eb6c     F4 30 B0 FD | 	call	#__system__pack_0538
1eb70     40 00 90 FD | 	jmp	#LR__2814
1eb74                 | LR__2810
1eb74     00 2A 0E F2 | 	cmp	local07, #0 wz
1eb78     20 00 90 AD |  if_e	jmp	#LR__2813
1eb7c     01 2A 66 F0 | 	shl	local07, #1
1eb80     97 0A 48 FB | 	callpa	#(@LR__2812-@LR__2811)>>2,fcache_load_ptr_
1eb84                 | LR__2811
1eb84     00 40 00 FF 
1eb88     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
1eb8c     01 2C 86 C1 |  if_b	sub	local08, #1
1eb90     01 2A 66 C0 |  if_b	shl	local07, #1
1eb94     EC FF 9F CD |  if_b	jmp	#LR__2811
1eb98                 | LR__2812
1eb98     98 FE 9F FD | 	jmp	#LR__2801
1eb9c                 | LR__2813
1eb9c     08 22 46 F5 | 	or	local03, #8
1eba0     00 12 06 F6 | 	mov	arg01, #0
1eba4     00 14 06 F6 | 	mov	arg02, #0
1eba8     00 16 06 F6 | 	mov	arg03, #0
1ebac     11 19 02 F6 | 	mov	arg04, local03
1ebb0     B0 30 B0 FD | 	call	#__system__pack_0538
1ebb4                 | LR__2814
1ebb4     A7 F0 03 F6 | 	mov	ptra, fp
1ebb8     B2 00 A0 FD | 	call	#popregs_
1ebbc                 | __system___float_mul_ret
1ebbc     2D 00 64 FD | 	ret
1ebc0                 | 
1ebc0                 | __system___float_div
1ebc0     0E 4A 05 F6 | 	mov	COUNT_, #14
1ebc4     A8 00 A0 FD | 	call	#pushregs_
1ebc8     09 23 02 F6 | 	mov	local03, arg01
1ebcc     0A 25 02 F6 | 	mov	local04, arg02
1ebd0     11 27 02 F6 | 	mov	local05, local03
1ebd4     13 29 02 F6 | 	mov	local06, local05
1ebd8     16 28 46 F7 | 	zerox	local06, #22
1ebdc     13 2B 02 F6 | 	mov	local07, local05
1ebe0     01 2A 66 F0 | 	shl	local07, #1
1ebe4     18 2A 46 F0 | 	shr	local07, #24
1ebe8     1F 26 46 F0 | 	shr	local05, #31
1ebec     12 FB 01 F6 | 	mov	result1, local04
1ebf0     FD 2C 02 F6 | 	mov	local08, result1
1ebf4     16 2F 02 F6 | 	mov	local09, local08
1ebf8     16 2E 46 F7 | 	zerox	local09, #22
1ebfc     16 31 02 F6 | 	mov	local10, local08
1ec00     01 30 66 F0 | 	shl	local10, #1
1ec04     18 30 46 F0 | 	shr	local10, #24
1ec08     1F 2C 46 F0 | 	shr	local08, #31
1ec0c     16 27 62 F5 | 	xor	local05, local08
1ec10     FF 2A 0E F2 | 	cmp	local07, #255 wz
1ec14     D4 00 90 AD |  if_e	jmp	#LR__2825
1ec18     FF 30 0E F2 | 	cmp	local10, #255 wz
1ec1c     04 01 90 AD |  if_e	jmp	#LR__2826
1ec20     00 2A 0E F2 | 	cmp	local07, #0 wz
1ec24     24 01 90 AD |  if_e	jmp	#LR__2827
1ec28     17 28 26 F4 | 	bith	local06, #23
1ec2c                 | LR__2820
1ec2c     00 30 0E F2 | 	cmp	local10, #0 wz
1ec30     70 01 90 AD |  if_e	jmp	#LR__2831
1ec34     17 2E 26 F4 | 	bith	local09, #23
1ec38                 | LR__2821
1ec38     18 2B 82 F1 | 	sub	local07, local10
1ec3c     15 33 02 F6 | 	mov	local11, local07
1ec40     14 13 02 F6 | 	mov	arg01, local06
1ec44     02 12 46 F0 | 	shr	arg01, #2
1ec48     1E 28 66 F0 | 	shl	local06, #30
1ec4c     14 15 02 F6 | 	mov	arg02, local06
1ec50     17 17 02 F6 | 	mov	arg03, local09
1ec54     28 12 62 FD | 	setq	arg01
1ec58     0B 15 12 FD | 	qdiv	arg02, arg03
1ec5c     00 34 06 F6 | 	mov	local12, #0
1ec60     18 1E 62 FD | 	getqx	local01
1ec64     19 FC 61 FD | 	getqy	result2
1ec68     FE 20 02 F6 | 	mov	local02, result2
1ec6c     0F 37 02 F6 | 	mov	local13, local01
1ec70     00 20 4E F2 | 	cmps	local02, #0 wz
1ec74     1B 39 02 F6 | 	mov	local14, local13
1ec78     19 38 66 F0 | 	shl	local14, #25
1ec7c     01 34 06 56 |  if_ne	mov	local12, #1
1ec80     1A 39 42 F5 | 	or	local14, local12
1ec84     07 36 46 F0 | 	shr	local13, #7
1ec88     00 80 00 FF 
1ec8c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
1ec90     1C 00 90 CD |  if_b	jmp	#LR__2822
1ec94     01 32 06 F1 | 	add	local11, #1
1ec98     01 38 46 F0 | 	shr	local14, #1
1ec9c     1B 35 02 F6 | 	mov	local12, local13
1eca0     1F 34 66 F0 | 	shl	local12, #31
1eca4     1A 39 42 F5 | 	or	local14, local12
1eca8     01 36 46 F0 | 	shr	local13, #1
1ecac     24 00 90 FD | 	jmp	#LR__2824
1ecb0                 | LR__2822
1ecb0     00 40 00 FF 
1ecb4     00 36 16 F2 | 	cmp	local13, ##8388608 wc
1ecb8     18 00 90 3D |  if_ae	jmp	#LR__2823
1ecbc     01 32 86 F1 | 	sub	local11, #1
1ecc0     01 36 66 F0 | 	shl	local13, #1
1ecc4     1C 35 02 F6 | 	mov	local12, local14
1ecc8     1F 34 46 F0 | 	shr	local12, #31
1eccc     1A 37 42 F5 | 	or	local13, local12
1ecd0     01 38 66 F0 | 	shl	local14, #1
1ecd4                 | LR__2823
1ecd4                 | LR__2824
1ecd4     1B 13 02 F6 | 	mov	arg01, local13
1ecd8     1C 15 02 F6 | 	mov	arg02, local14
1ecdc     19 17 02 F6 | 	mov	arg03, local11
1ece0     13 19 02 F6 | 	mov	arg04, local05
1ece4     7C 2F B0 FD | 	call	#__system__pack_0538
1ece8     F8 00 90 FD | 	jmp	#LR__2835
1ecec                 | LR__2825
1ecec     00 28 0E F2 | 	cmp	local06, #0 wz
1ecf0     11 FB 01 56 |  if_ne	mov	result1, local03
1ecf4     EC 00 90 5D |  if_ne	jmp	#LR__2835
1ecf8     FF 30 0E F2 | 	cmp	local10, #255 wz
1ecfc     00 F8 3F AF 
1ed00     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ed04     DC 00 90 AD |  if_e	jmp	#LR__2835
1ed08     02 26 46 F5 | 	or	local05, #2
1ed0c     00 12 06 F6 | 	mov	arg01, #0
1ed10     00 14 06 F6 | 	mov	arg02, #0
1ed14     15 17 02 F6 | 	mov	arg03, local07
1ed18     13 19 02 F6 | 	mov	arg04, local05
1ed1c     44 2F B0 FD | 	call	#__system__pack_0538
1ed20     C0 00 90 FD | 	jmp	#LR__2835
1ed24                 | LR__2826
1ed24     00 2E 0E F2 | 	cmp	local09, #0 wz
1ed28     12 FB 01 56 |  if_ne	mov	result1, local04
1ed2c     B4 00 90 5D |  if_ne	jmp	#LR__2835
1ed30     13 19 02 F6 | 	mov	arg04, local05
1ed34     08 18 46 F5 | 	or	arg04, #8
1ed38     00 12 06 F6 | 	mov	arg01, #0
1ed3c     00 14 06 F6 | 	mov	arg02, #0
1ed40     00 16 06 F6 | 	mov	arg03, #0
1ed44     1C 2F B0 FD | 	call	#__system__pack_0538
1ed48     98 00 90 FD | 	jmp	#LR__2835
1ed4c                 | LR__2827
1ed4c     00 28 0E F2 | 	cmp	local06, #0 wz
1ed50     20 00 90 AD |  if_e	jmp	#LR__2830
1ed54     01 28 66 F0 | 	shl	local06, #1
1ed58     97 0A 48 FB | 	callpa	#(@LR__2829-@LR__2828)>>2,fcache_load_ptr_
1ed5c                 | LR__2828
1ed5c     00 40 00 FF 
1ed60     00 28 16 F2 | 	cmp	local06, ##8388608 wc
1ed64     01 2A 86 C1 |  if_b	sub	local07, #1
1ed68     01 28 66 C0 |  if_b	shl	local06, #1
1ed6c     EC FF 9F CD |  if_b	jmp	#LR__2828
1ed70                 | LR__2829
1ed70     B8 FE 9F FD | 	jmp	#LR__2820
1ed74                 | LR__2830
1ed74     00 30 0E F2 | 	cmp	local10, #0 wz
1ed78     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
1ed7c     00 F8 3F AF 
1ed80     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
1ed84     5C 00 90 AD |  if_e	jmp	#LR__2835
1ed88     13 19 02 F6 | 	mov	arg04, local05
1ed8c     08 18 46 F5 | 	or	arg04, #8
1ed90     00 12 06 F6 | 	mov	arg01, #0
1ed94     00 14 06 F6 | 	mov	arg02, #0
1ed98     00 16 06 F6 | 	mov	arg03, #0
1ed9c     C4 2E B0 FD | 	call	#__system__pack_0538
1eda0     40 00 90 FD | 	jmp	#LR__2835
1eda4                 | LR__2831
1eda4     00 2E 0E F2 | 	cmp	local09, #0 wz
1eda8     20 00 90 AD |  if_e	jmp	#LR__2834
1edac     01 2E 66 F0 | 	shl	local09, #1
1edb0     97 0A 48 FB | 	callpa	#(@LR__2833-@LR__2832)>>2,fcache_load_ptr_
1edb4                 | LR__2832
1edb4     00 40 00 FF 
1edb8     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
1edbc     01 30 86 C1 |  if_b	sub	local10, #1
1edc0     01 2E 66 C0 |  if_b	shl	local09, #1
1edc4     EC FF 9F CD |  if_b	jmp	#LR__2832
1edc8                 | LR__2833
1edc8     6C FE 9F FD | 	jmp	#LR__2821
1edcc                 | LR__2834
1edcc     02 26 46 F5 | 	or	local05, #2
1edd0     00 12 06 F6 | 	mov	arg01, #0
1edd4     00 14 06 F6 | 	mov	arg02, #0
1edd8     00 16 06 F6 | 	mov	arg03, #0
1eddc     13 19 02 F6 | 	mov	arg04, local05
1ede0     80 2E B0 FD | 	call	#__system__pack_0538
1ede4                 | LR__2835
1ede4     A7 F0 03 F6 | 	mov	ptra, fp
1ede8     B2 00 A0 FD | 	call	#popregs_
1edec                 | __system___float_div_ret
1edec     2D 00 64 FD | 	ret
1edf0                 | 
1edf0                 | __system___float_cmp
1edf0     00 C0 3F FF 
1edf4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
1edf8     00 C0 3F CF 
1edfc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1ee00     0B FB 01 36 |  if_ae	mov	result1, arg03
1ee04     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1ee08     00 C0 7F FF 
1ee0c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1ee10     00 C0 7F CF 
1ee14     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
1ee18     0B FB 01 36 |  if_ae	mov	result1, arg03
1ee1c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1ee20     00 12 56 F2 | 	cmps	arg01, #0 wc
1ee24     2C 00 90 3D |  if_ae	jmp	#LR__2840
1ee28     00 14 56 F2 | 	cmps	arg02, #0 wc
1ee2c     0A FB 01 C6 |  if_b	mov	result1, arg02
1ee30     09 FB 81 C1 |  if_b	sub	result1, arg01
1ee34     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
1ee38     00 14 0E F2 | 	cmp	arg02, #0 wz
1ee3c     00 00 40 AF 
1ee40     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
1ee44     00 FA 05 A6 |  if_e	mov	result1, #0
1ee48     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1ee4c     01 FA 65 F6 | 	neg	result1, #1
1ee50     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
1ee54                 | LR__2840
1ee54     00 14 56 F2 | 	cmps	arg02, #0 wc
1ee58     1C 00 90 3D |  if_ae	jmp	#LR__2841
1ee5c     00 12 0E F2 | 	cmp	arg01, #0 wz
1ee60     00 00 40 AF 
1ee64     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
1ee68     00 FA 05 A6 |  if_e	mov	result1, #0
1ee6c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
1ee70     01 FA 05 F6 | 	mov	result1, #1
1ee74     08 00 90 FD | 	jmp	#__system___float_cmp_ret
1ee78                 | LR__2841
1ee78     0A 13 82 F1 | 	sub	arg01, arg02
1ee7c     09 FB 01 F6 | 	mov	result1, arg01
1ee80                 | __system___float_cmp_ret
1ee80     2D 00 64 FD | 	ret
1ee84                 | 
1ee84                 | __system___float_tointeger
1ee84     02 4A 05 F6 | 	mov	COUNT_, #2
1ee88     A8 00 A0 FD | 	call	#pushregs_
1ee8c     50 00 B0 FD | 	call	#__system___float_Unpack
1ee90     FF FF 7F FF 
1ee94     FF FD 55 F2 | 	cmps	result2, ##-1 wc
1ee98     34 00 90 CD |  if_b	jmp	#LR__2850
1ee9c     1F FC 55 F2 | 	cmps	result2, #31 wc
1eea0     2C 00 90 3D |  if_ae	jmp	#LR__2850
1eea4     02 FE 65 F0 | 	shl	result3, #2
1eea8     1E 1E 06 F6 | 	mov	local01, #30
1eeac     FE 1E 82 F1 | 	sub	local01, result2
1eeb0     0F FF 41 F0 | 	shr	result3, local01
1eeb4     FF 20 02 F6 | 	mov	local02, result3
1eeb8     0A 21 02 F1 | 	add	local02, arg02
1eebc     01 20 46 F0 | 	shr	local02, #1
1eec0     00 FA 0D F2 | 	cmp	result1, #0 wz
1eec4     10 21 62 56 |  if_ne	neg	local02, local02
1eec8     10 FB 01 F6 | 	mov	result1, local02
1eecc     04 00 90 FD | 	jmp	#LR__2851
1eed0                 | LR__2850
1eed0     00 FA 05 F6 | 	mov	result1, #0
1eed4                 | LR__2851
1eed4     A7 F0 03 F6 | 	mov	ptra, fp
1eed8     B2 00 A0 FD | 	call	#popregs_
1eedc                 | __system___float_tointeger_ret
1eedc     2D 00 64 FD | 	ret
1eee0                 | 
1eee0                 | __system___float_Unpack
1eee0     09 01 02 F6 | 	mov	_var01, arg01
1eee4     1F 00 46 F0 | 	shr	_var01, #31
1eee8     09 03 02 F6 | 	mov	_var02, arg01
1eeec     01 02 66 F0 | 	shl	_var02, #1
1eef0     18 02 4E F0 | 	shr	_var02, #24 wz
1eef4     17 13 06 F4 | 	bitl	arg01, #279
1eef8     06 12 66 50 |  if_ne	shl	arg01, #6
1eefc     1D 12 26 54 |  if_ne	bith	arg01, #29
1ef00     1C 00 90 5D |  if_ne	jmp	#LR__2860
1ef04     09 05 92 F7 | 	encod	_var03, arg01 wc
1ef08     01 04 06 C1 |  if_b	add	_var03, #1
1ef0c     17 04 86 F1 | 	sub	_var03, #23
1ef10     02 03 02 F6 | 	mov	_var02, _var03
1ef14     07 FC 05 F6 | 	mov	result2, #7
1ef18     02 FD 81 F1 | 	sub	result2, _var03
1ef1c     FE 12 62 F0 | 	shl	arg01, result2
1ef20                 | LR__2860
1ef20     7F 02 86 F1 | 	sub	_var02, #127
1ef24     09 FF 01 F6 | 	mov	result3, arg01
1ef28     00 FB 01 F6 | 	mov	result1, _var01
1ef2c     01 FD 01 F6 | 	mov	result2, _var02
1ef30                 | __system___float_Unpack_ret
1ef30     2D 00 64 FD | 	ret
1ef34                 | 
1ef34                 | __system___float_Pack
1ef34     00 00 06 F6 | 	mov	_var01, #0
1ef38     00 16 0E F2 | 	cmp	arg03, #0 wz
1ef3c     8C 00 90 AD |  if_e	jmp	#LR__2871
1ef40     0B 03 92 F7 | 	encod	_var02, arg03 wc
1ef44     01 02 06 C1 |  if_b	add	_var02, #1
1ef48     21 00 06 F6 | 	mov	_var01, #33
1ef4c     01 01 82 F1 | 	sub	_var01, _var02
1ef50     00 17 62 F0 | 	shl	arg03, _var01
1ef54     03 02 06 F6 | 	mov	_var02, #3
1ef58     00 03 82 F1 | 	sub	_var02, _var01
1ef5c     01 15 02 F1 | 	add	arg02, _var02
1ef60     0A 05 02 F6 | 	mov	_var03, arg02
1ef64     00 17 06 F1 | 	add	arg03, #256
1ef68     0B 03 02 F6 | 	mov	_var02, arg03
1ef6c     FF 02 2E F5 | 	andn	_var02, #255 wz
1ef70     01 04 06 A1 |  if_e	add	_var03, #1
1ef74     7F 04 06 F1 | 	add	_var03, #127
1ef78     FF FF 7F FF 
1ef7c     E9 05 46 F3 | 	fges	_var03, ##-23
1ef80     FF 04 66 F3 | 	fles	_var03, #255
1ef84     01 04 56 F2 | 	cmps	_var03, #1 wc
1ef88     1C 00 90 3D |  if_ae	jmp	#LR__2870
1ef8c     01 16 46 F0 | 	shr	arg03, #1
1ef90     1F 02 C6 F9 | 	decod	_var02, #31
1ef94     0B 03 02 F1 | 	add	_var02, arg03
1ef98     02 05 62 F6 | 	neg	_var03, _var03
1ef9c     02 03 42 F0 | 	shr	_var02, _var03
1efa0     01 17 02 F6 | 	mov	arg03, _var02
1efa4     00 04 06 F6 | 	mov	_var03, #0
1efa8                 | LR__2870
1efa8     09 FB 01 F6 | 	mov	result1, arg01
1efac     1F FA 65 F0 | 	shl	result1, #31
1efb0     02 03 02 F6 | 	mov	_var02, _var03
1efb4     17 02 66 F0 | 	shl	_var02, #23
1efb8     01 FB 41 F5 | 	or	result1, _var02
1efbc     0B 07 02 F6 | 	mov	_var04, arg03
1efc0     09 06 46 F0 | 	shr	_var04, #9
1efc4     03 FB 41 F5 | 	or	result1, _var04
1efc8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
1efcc                 | LR__2871
1efcc     00 FB 01 F6 | 	mov	result1, _var01
1efd0                 | __system___float_Pack_ret
1efd0     2D 00 64 FD | 	ret
1efd4                 | 
1efd4                 | __system___basic_print_float
1efd4     05 4A 05 F6 | 	mov	COUNT_, #5
1efd8     A8 00 A0 FD | 	call	#pushregs_
1efdc     09 1F 02 F6 | 	mov	local01, arg01
1efe0     0A 21 02 F6 | 	mov	local02, arg02
1efe4     0B 23 0A F6 | 	mov	local03, arg03 wz
1efe8     0C 25 02 F6 | 	mov	local04, arg04
1efec     14 00 90 5D |  if_ne	jmp	#LR__2880
1eff0     23 24 0E F2 | 	cmp	local04, #35 wz
1eff4     80 02 10 AF 
1eff8     00 26 06 A6 |  if_e	mov	local05, ##537198592
1effc     1D 26 C6 59 |  if_ne	decod	local05, #29
1f000     13 23 02 F6 | 	mov	local03, local05
1f004                 | LR__2880
1f004     0F 13 02 F6 | 	mov	arg01, local01
1f008     3C 27 B0 FD | 	call	#__system___gettxfunc
1f00c     FD 26 0A F6 | 	mov	local05, result1 wz
1f010     00 FA 05 A6 |  if_e	mov	result1, #0
1f014     13 13 02 56 |  if_ne	mov	arg01, local05
1f018     11 15 02 56 |  if_ne	mov	arg02, local03
1f01c     10 17 02 56 |  if_ne	mov	arg03, local02
1f020     12 19 02 56 |  if_ne	mov	arg04, local04
1f024     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
1f028     A7 F0 03 F6 | 	mov	ptra, fp
1f02c     B2 00 A0 FD | 	call	#popregs_
1f030                 | __system___basic_print_float_ret
1f030     2D 00 64 FD | 	ret
1f034                 | 
1f034                 | __system____builtin_atoi
1f034     07 4A 05 F6 | 	mov	COUNT_, #7
1f038     A8 00 A0 FD | 	call	#pushregs_
1f03c                 | __system____builtin_atoi_enter
1f03c     09 1F 02 F6 | 	mov	local01, arg01
1f040     0A 21 02 F6 | 	mov	local02, arg02
1f044     00 22 06 F6 | 	mov	local03, #0
1f048     00 24 06 F6 | 	mov	local04, #0
1f04c     00 26 06 F6 | 	mov	local05, #0
1f050     97 08 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
1f054                 | LR__2890
1f054     0F 29 C2 FA | 	rdbyte	local06, local01
1f058     20 28 0E F2 | 	cmp	local06, #32 wz
1f05c     01 1E 06 A1 |  if_e	add	local01, #1
1f060     F0 FF 9F AD |  if_e	jmp	#LR__2890
1f064                 | LR__2891
1f064     0F 2B C2 FA | 	rdbyte	local07, local01
1f068                 | LR__2892
1f068     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f06c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
1f070     18 00 90 5D |  if_ne	jmp	#LR__2893
1f074     01 1E 06 F1 | 	add	local01, #1
1f078     2D 2A 0E F2 | 	cmp	local07, #45 wz
1f07c     01 28 06 A6 |  if_e	mov	local06, #1
1f080     14 27 C2 A2 |  if_e	subr	local05, local06
1f084     0F 2B C2 FA | 	rdbyte	local07, local01
1f088     DC FF 9F FD | 	jmp	#LR__2892
1f08c                 | LR__2893
1f08c     97 48 48 FB | 	callpa	#(@LR__2901-@LR__2894)>>2,fcache_load_ptr_
1f090                 | LR__2894
1f090                 | LR__2895
1f090     0F 2B C2 FA | 	rdbyte	local07, local01
1f094     5F 2A 0E F2 | 	cmp	local07, #95 wz
1f098     01 1E 06 F1 | 	add	local01, #1
1f09c     F0 FF 9F AD |  if_e	jmp	#LR__2895
1f0a0     30 2A 0E F2 | 	cmp	local07, #48 wz
1f0a4     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
1f0a8     00 24 06 A6 |  if_e	mov	local04, #0
1f0ac     60 00 90 AD |  if_e	jmp	#LR__2900
1f0b0     31 2A 56 F2 | 	cmps	local07, #49 wc
1f0b4     18 00 90 CD |  if_b	jmp	#LR__2896
1f0b8     3A 2A 56 F2 | 	cmps	local07, #58 wc
1f0bc     15 25 02 C6 |  if_b	mov	local04, local07
1f0c0     30 24 86 C1 |  if_b	sub	local04, #48
1f0c4     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1f0c8     0A 20 06 86 |  if_c_and_z	mov	local02, #10
1f0cc     40 00 90 CD |  if_b	jmp	#LR__2899
1f0d0                 | LR__2896
1f0d0     0B 20 56 F2 | 	cmps	local02, #11 wc
1f0d4     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
1f0d8     14 00 90 CD |  if_b	jmp	#LR__2897
1f0dc     67 2A 56 F2 | 	cmps	local07, #103 wc
1f0e0     61 2A 86 C1 |  if_b	sub	local07, #97
1f0e4     0A 24 06 C6 |  if_b	mov	local04, #10
1f0e8     15 25 02 C1 |  if_b	add	local04, local07
1f0ec     20 00 90 CD |  if_b	jmp	#LR__2898
1f0f0                 | LR__2897
1f0f0     0B 20 56 F2 | 	cmps	local02, #11 wc
1f0f4     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
1f0f8     24 00 90 CD |  if_b	jmp	#LR__2902
1f0fc     47 2A 56 F2 | 	cmps	local07, #71 wc
1f100     41 2A 86 C1 |  if_b	sub	local07, #65
1f104     0A 24 06 C6 |  if_b	mov	local04, #10
1f108     15 25 02 C1 |  if_b	add	local04, local07
1f10c     10 00 90 3D |  if_ae	jmp	#LR__2902
1f110                 | LR__2898
1f110                 | LR__2899
1f110                 | LR__2900
1f110     11 21 02 FD | 	qmul	local02, local03
1f114     18 22 62 FD | 	getqx	local03
1f118     12 23 02 F1 | 	add	local03, local04
1f11c     70 FF 9F FD | 	jmp	#LR__2894
1f120                 | LR__2901
1f120                 | LR__2902
1f120     00 20 0E F2 | 	cmp	local02, #0 wz
1f124     64 00 90 5D |  if_ne	jmp	#LR__2908
1f128     78 2A 0E F2 | 	cmp	local07, #120 wz
1f12c     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1f130     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
1f134     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
1f138     14 00 90 5D |  if_ne	jmp	#LR__2903
1f13c     0F 13 02 F6 | 	mov	arg01, local01
1f140     10 14 06 F6 | 	mov	arg02, #16
1f144     EC FE BF FD | 	call	#__system____builtin_atoi
1f148     FD 22 02 F6 | 	mov	local03, result1
1f14c     3C 00 90 FD | 	jmp	#LR__2907
1f150                 | LR__2903
1f150     62 2A 0E F2 | 	cmp	local07, #98 wz
1f154     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
1f158     14 00 90 5D |  if_ne	jmp	#LR__2904
1f15c     0F 13 02 F6 | 	mov	arg01, local01
1f160     02 14 06 F6 | 	mov	arg02, #2
1f164     CC FE BF FD | 	call	#__system____builtin_atoi
1f168     FD 22 02 F6 | 	mov	local03, result1
1f16c     1C 00 90 FD | 	jmp	#LR__2906
1f170                 | LR__2904
1f170     6F 2A 0E F2 | 	cmp	local07, #111 wz
1f174     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
1f178     10 00 90 5D |  if_ne	jmp	#LR__2905
1f17c     0F 13 02 F6 | 	mov	arg01, local01
1f180     08 14 06 F6 | 	mov	arg02, #8
1f184     AC FE BF FD | 	call	#__system____builtin_atoi
1f188     FD 22 02 F6 | 	mov	local03, result1
1f18c                 | LR__2905
1f18c                 | LR__2906
1f18c                 | LR__2907
1f18c                 | LR__2908
1f18c     00 26 0E F2 | 	cmp	local05, #0 wz
1f190     11 23 62 56 |  if_ne	neg	local03, local03
1f194     11 FB 01 F6 | 	mov	result1, local03
1f198     A7 F0 03 F6 | 	mov	ptra, fp
1f19c     B2 00 A0 FD | 	call	#popregs_
1f1a0                 | __system____builtin_atoi_ret
1f1a0     2D 00 64 FD | 	ret
1f1a4                 | 
1f1a4                 | __system____builtin_atof
1f1a4     07 4A 05 F6 | 	mov	COUNT_, #7
1f1a8     A8 00 A0 FD | 	call	#pushregs_
1f1ac     09 1F 02 F6 | 	mov	local01, arg01
1f1b0     00 20 06 F6 | 	mov	local02, #0
1f1b4     00 22 06 F6 | 	mov	local03, #0
1f1b8     00 24 06 F6 | 	mov	local04, #0
1f1bc     00 26 06 F6 | 	mov	local05, #0
1f1c0     97 08 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
1f1c4                 | LR__2910
1f1c4     0F 17 C2 FA | 	rdbyte	arg03, local01
1f1c8     20 16 0E F2 | 	cmp	arg03, #32 wz
1f1cc     01 1E 06 A1 |  if_e	add	local01, #1
1f1d0     F0 FF 9F AD |  if_e	jmp	#LR__2910
1f1d4                 | LR__2911
1f1d4     0F 29 C2 FA | 	rdbyte	local06, local01
1f1d8                 | LR__2912
1f1d8     2B 28 0E F2 | 	cmp	local06, #43 wz
1f1dc     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1f1e0     14 00 90 5D |  if_ne	jmp	#LR__2913
1f1e4     2D 28 0E F2 | 	cmp	local06, #45 wz
1f1e8     1F 24 E6 A4 |  if_e	bitnot	local04, #31
1f1ec     01 1E 06 F1 | 	add	local01, #1
1f1f0     0F 29 C2 FA | 	rdbyte	local06, local01
1f1f4     E0 FF 9F FD | 	jmp	#LR__2912
1f1f8                 | LR__2913
1f1f8                 | LR__2914
1f1f8     97 08 48 FB | 	callpa	#(@LR__2916-@LR__2915)>>2,fcache_load_ptr_
1f1fc                 | LR__2915
1f1fc     0F 29 C2 FA | 	rdbyte	local06, local01
1f200     5F 28 0E F2 | 	cmp	local06, #95 wz
1f204     01 1E 06 F1 | 	add	local01, #1
1f208     F0 FF 9F AD |  if_e	jmp	#LR__2915
1f20c                 | LR__2916
1f20c     00 28 0E F2 | 	cmp	local06, #0 wz
1f210     5C 00 90 AD |  if_e	jmp	#LR__2918
1f214     30 28 56 F2 | 	cmps	local06, #48 wc
1f218     44 00 90 CD |  if_b	jmp	#LR__2917
1f21c     3A 28 56 F2 | 	cmps	local06, #58 wc
1f220     3C 00 90 3D |  if_ae	jmp	#LR__2917
1f224     10 13 02 F6 | 	mov	arg01, local02
1f228     00 90 20 FF 
1f22c     00 14 06 F6 | 	mov	arg02, ##1092616192
1f230     88 F7 BF FD | 	call	#__system___float_mul
1f234     FD 20 02 F6 | 	mov	local02, result1
1f238     30 28 86 F1 | 	sub	local06, #48
1f23c     14 13 02 F6 | 	mov	arg01, local06
1f240     74 F3 BF FD | 	call	#__system___float_fromuns
1f244     FD 14 02 F6 | 	mov	arg02, result1
1f248     10 13 02 F6 | 	mov	arg01, local02
1f24c     9C F3 BF FD | 	call	#__system___float_add
1f250     FD 20 02 F6 | 	mov	local02, result1
1f254     00 26 0E F2 | 	cmp	local05, #0 wz
1f258     01 22 86 51 |  if_ne	sub	local03, #1
1f25c     98 FF 9F FD | 	jmp	#LR__2914
1f260                 | LR__2917
1f260     2E 28 0E F2 | 	cmp	local06, #46 wz
1f264     00 26 0E A2 |  if_e	cmp	local05, #0 wz
1f268     01 26 06 A6 |  if_e	mov	local05, #1
1f26c     88 FF 9F AD |  if_e	jmp	#LR__2914
1f270                 | LR__2918
1f270     45 28 0E F2 | 	cmp	local06, #69 wz
1f274     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
1f278     18 00 90 5D |  if_ne	jmp	#LR__2919
1f27c     0F 13 02 F6 | 	mov	arg01, local01
1f280     00 14 06 F6 | 	mov	arg02, #0
1f284     AC FD BF FD | 	call	#__system____builtin_atoi
1f288     11 FB 01 F1 | 	add	result1, local03
1f28c     FD 2A 02 F6 | 	mov	local07, result1
1f290     04 00 90 FD | 	jmp	#LR__2920
1f294                 | LR__2919
1f294     11 2B 02 F6 | 	mov	local07, local03
1f298                 | LR__2920
1f298     15 17 02 F6 | 	mov	arg03, local07
1f29c     10 13 02 F6 | 	mov	arg01, local02
1f2a0     00 90 20 FF 
1f2a4     00 14 06 F6 | 	mov	arg02, ##1092616192
1f2a8     BC 06 B0 FD | 	call	#__system___float_pow_n
1f2ac     12 FB 61 F5 | 	xor	result1, local04
1f2b0     A7 F0 03 F6 | 	mov	ptra, fp
1f2b4     B2 00 A0 FD | 	call	#popregs_
1f2b8                 | __system____builtin_atof_ret
1f2b8     2D 00 64 FD | 	ret
1f2bc                 | 
1f2bc                 | __system____builtin_ilogb
1f2bc     20 FC BF FD | 	call	#__system___float_Unpack
1f2c0     00 FE 0D F2 | 	cmp	result3, #0 wz
1f2c4     00 00 40 AF 
1f2c8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
1f2cc     24 00 90 AD |  if_e	jmp	#LR__2931
1f2d0     80 FC 0D F2 | 	cmp	result2, #128 wz
1f2d4     18 00 90 5D |  if_ne	jmp	#LR__2930
1f2d8     00 00 10 FF 
1f2dc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1f2e0     1E FA CD A9 |  if_e	bmask	result1, #30
1f2e4     0C 00 90 AD |  if_e	jmp	#LR__2931
1f2e8     1F FA C5 F9 | 	decod	result1, #31
1f2ec     04 00 90 FD | 	jmp	#LR__2931
1f2f0                 | LR__2930
1f2f0     FE FA 01 F6 | 	mov	result1, result2
1f2f4                 | LR__2931
1f2f4                 | __system____builtin_ilogb_ret
1f2f4     2D 00 64 FD | 	ret
1f2f8                 | 
1f2f8                 | __system____builtin_sinf
1f2f8     03 4A 05 F6 | 	mov	COUNT_, #3
1f2fc     A8 00 A0 FD | 	call	#pushregs_
1f300     09 1F 02 F6 | 	mov	local01, arg01
1f304     87 64 20 FF 
1f308     DB 15 06 F6 | 	mov	arg02, ##1086918619
1f30c     B0 F8 BF FD | 	call	#__system___float_div
1f310     FD 12 02 F6 | 	mov	arg01, result1
1f314     00 14 06 F6 | 	mov	arg02, #0
1f318     68 FB BF FD | 	call	#__system___float_tointeger
1f31c     FD 16 0A F6 | 	mov	arg03, result1 wz
1f320     44 00 90 AD |  if_e	jmp	#LR__2940
1f324     0B 13 52 F6 | 	abs	arg01, arg03 wc
1f328     1F 20 C6 C9 |  if_b	decod	local02, #31
1f32c     00 20 06 36 |  if_ae	mov	local02, #0
1f330     84 F2 BF FD | 	call	#__system___float_fromuns
1f334     10 FB 61 F5 | 	xor	result1, local02
1f338     FD 12 02 F6 | 	mov	arg01, result1
1f33c     1E 14 C6 F9 | 	decod	arg02, #30
1f340     78 F6 BF FD | 	call	#__system___float_mul
1f344     FD 12 02 F6 | 	mov	arg01, result1
1f348     87 24 20 FF 
1f34c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1f350     68 F6 BF FD | 	call	#__system___float_mul
1f354     FD 14 02 F6 | 	mov	arg02, result1
1f358     0F 13 02 F6 | 	mov	arg01, local01
1f35c     1F 14 E6 F4 | 	bitnot	arg02, #31
1f360     88 F2 BF FD | 	call	#__system___float_add
1f364     FD 1E 02 F6 | 	mov	local01, result1
1f368                 | LR__2940
1f368     0F 13 02 F6 | 	mov	arg01, local01
1f36c     66 E6 1E FF 
1f370     CD 14 06 F6 | 	mov	arg02, ##1036831949
1f374     01 16 06 F6 | 	mov	arg03, #1
1f378     74 FA BF FD | 	call	#__system___float_cmp
1f37c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f380     5C 00 90 3D |  if_ae	jmp	#LR__2941
1f384     0F 13 02 F6 | 	mov	arg01, local01
1f388     66 E6 5E FF 
1f38c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
1f390     01 16 66 F6 | 	neg	arg03, #1
1f394     58 FA BF FD | 	call	#__system___float_cmp
1f398     01 FA 55 F2 | 	cmps	result1, #1 wc
1f39c     40 00 90 CD |  if_b	jmp	#LR__2941
1f3a0     0F 13 02 F6 | 	mov	arg01, local01
1f3a4     0F 15 02 F6 | 	mov	arg02, local01
1f3a8     10 F6 BF FD | 	call	#__system___float_mul
1f3ac     FD 12 02 F6 | 	mov	arg01, result1
1f3b0     0F 15 02 F6 | 	mov	arg02, local01
1f3b4     04 F6 BF FD | 	call	#__system___float_mul
1f3b8     FD 12 02 F6 | 	mov	arg01, result1
1f3bc     00 60 20 FF 
1f3c0     00 14 06 F6 | 	mov	arg02, ##1086324736
1f3c4     F8 F7 BF FD | 	call	#__system___float_div
1f3c8     FD 14 02 F6 | 	mov	arg02, result1
1f3cc     0F 13 02 F6 | 	mov	arg01, local01
1f3d0     1F 14 E6 F4 | 	bitnot	arg02, #31
1f3d4     14 F2 BF FD | 	call	#__system___float_add
1f3d8     FD 22 02 F6 | 	mov	local03, result1
1f3dc     54 00 90 FD | 	jmp	#LR__2942
1f3e0                 | LR__2941
1f3e0     0F 13 02 F6 | 	mov	arg01, local01
1f3e4     7C 91 26 FF 
1f3e8     83 15 06 F6 | 	mov	arg02, ##1294137731
1f3ec     CC F5 BF FD | 	call	#__system___float_mul
1f3f0     FD 12 02 F6 | 	mov	arg01, result1
1f3f4     00 14 06 F6 | 	mov	arg02, #0
1f3f8     88 FA BF FD | 	call	#__system___float_tointeger
1f3fc     02 FA 65 F0 | 	shl	result1, #2
1f400     00 00 A0 FF 
1f404     FD 00 48 FD | 	qrotate	##1073741824, result1
1f408     19 12 62 FD | 	getqy	arg01
1f40c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f410     1F 20 C6 C9 |  if_b	decod	local02, #31
1f414     00 20 06 36 |  if_ae	mov	local02, #0
1f418     9C F1 BF FD | 	call	#__system___float_fromuns
1f41c     10 FB 61 F5 | 	xor	result1, local02
1f420     FD 12 02 F6 | 	mov	arg01, result1
1f424     00 40 27 FF 
1f428     00 14 06 F6 | 	mov	arg02, ##1317011456
1f42c     90 F7 BF FD | 	call	#__system___float_div
1f430     FD 22 02 F6 | 	mov	local03, result1
1f434                 | LR__2942
1f434     11 FB 01 F6 | 	mov	result1, local03
1f438     A7 F0 03 F6 | 	mov	ptra, fp
1f43c     B2 00 A0 FD | 	call	#popregs_
1f440                 | __system____builtin_sinf_ret
1f440     2D 00 64 FD | 	ret
1f444                 | 
1f444                 | __system____builtin_tanf
1f444     02 4A 05 F6 | 	mov	COUNT_, #2
1f448     A8 00 A0 FD | 	call	#pushregs_
1f44c     09 1F 02 F6 | 	mov	local01, arg01
1f450     A4 FE BF FD | 	call	#__system____builtin_sinf
1f454     FD 20 02 F6 | 	mov	local02, result1
1f458     0F 15 02 F6 | 	mov	arg02, local01
1f45c     87 E4 1F FF 
1f460     DB 13 06 F6 | 	mov	arg01, ##1070141403
1f464     1F 14 E6 F4 | 	bitnot	arg02, #31
1f468     80 F1 BF FD | 	call	#__system___float_add
1f46c     FD 12 02 F6 | 	mov	arg01, result1
1f470     84 FE BF FD | 	call	#__system____builtin_sinf
1f474     FD 14 02 F6 | 	mov	arg02, result1
1f478     10 13 02 F6 | 	mov	arg01, local02
1f47c     40 F7 BF FD | 	call	#__system___float_div
1f480     A7 F0 03 F6 | 	mov	ptra, fp
1f484     B2 00 A0 FD | 	call	#popregs_
1f488                 | __system____builtin_tanf_ret
1f488     2D 00 64 FD | 	ret
1f48c                 | 
1f48c                 | __system____builtin_asinf
1f48c     01 4A 05 F6 | 	mov	COUNT_, #1
1f490     A8 00 A0 FD | 	call	#pushregs_
1f494     09 1F 02 F6 | 	mov	local01, arg01
1f498     0F 15 02 F6 | 	mov	arg02, local01
1f49c     0F 13 02 F6 | 	mov	arg01, local01
1f4a0     18 F5 BF FD | 	call	#__system___float_mul
1f4a4     FD 14 02 F6 | 	mov	arg02, result1
1f4a8     00 C0 1F FF 
1f4ac     00 12 06 F6 | 	mov	arg01, ##1065353216
1f4b0     1F 14 E6 F4 | 	bitnot	arg02, #31
1f4b4     34 F1 BF FD | 	call	#__system___float_add
1f4b8     FD 12 02 F6 | 	mov	arg01, result1
1f4bc     24 F4 BF FD | 	call	#__system___float_sqrt
1f4c0     FD 14 02 F6 | 	mov	arg02, result1
1f4c4     0F 13 02 F6 | 	mov	arg01, local01
1f4c8     58 00 B0 FD | 	call	#__system____builtin_atan2f
1f4cc     A7 F0 03 F6 | 	mov	ptra, fp
1f4d0     B2 00 A0 FD | 	call	#popregs_
1f4d4                 | __system____builtin_asinf_ret
1f4d4     2D 00 64 FD | 	ret
1f4d8                 | 
1f4d8                 | __system____builtin_acosf
1f4d8     01 4A 05 F6 | 	mov	COUNT_, #1
1f4dc     A8 00 A0 FD | 	call	#pushregs_
1f4e0     09 1F 02 F6 | 	mov	local01, arg01
1f4e4     0F 15 02 F6 | 	mov	arg02, local01
1f4e8     0F 13 02 F6 | 	mov	arg01, local01
1f4ec     CC F4 BF FD | 	call	#__system___float_mul
1f4f0     FD 14 02 F6 | 	mov	arg02, result1
1f4f4     00 C0 1F FF 
1f4f8     00 12 06 F6 | 	mov	arg01, ##1065353216
1f4fc     1F 14 E6 F4 | 	bitnot	arg02, #31
1f500     E8 F0 BF FD | 	call	#__system___float_add
1f504     FD 12 02 F6 | 	mov	arg01, result1
1f508     D8 F3 BF FD | 	call	#__system___float_sqrt
1f50c     FD 12 02 F6 | 	mov	arg01, result1
1f510     0F 15 02 F6 | 	mov	arg02, local01
1f514     0C 00 B0 FD | 	call	#__system____builtin_atan2f
1f518     A7 F0 03 F6 | 	mov	ptra, fp
1f51c     B2 00 A0 FD | 	call	#popregs_
1f520                 | __system____builtin_acosf_ret
1f520     2D 00 64 FD | 	ret
1f524                 | 
1f524                 | __system____builtin_atan2f
1f524     04 4A 05 F6 | 	mov	COUNT_, #4
1f528     A8 00 A0 FD | 	call	#pushregs_
1f52c     09 1F 02 F6 | 	mov	local01, arg01
1f530     0A 21 02 F6 | 	mov	local02, arg02
1f534     0F 13 02 F6 | 	mov	arg01, local01
1f538     00 14 06 F6 | 	mov	arg02, #0
1f53c     01 16 06 F6 | 	mov	arg03, #1
1f540     AC F8 BF FD | 	call	#__system___float_cmp
1f544     00 FA 0D F2 | 	cmp	result1, #0 wz
1f548     28 00 90 5D |  if_ne	jmp	#LR__2950
1f54c     10 13 02 F6 | 	mov	arg01, local02
1f550     00 14 06 F6 | 	mov	arg02, #0
1f554     01 16 06 F6 | 	mov	arg03, #1
1f558     94 F8 BF FD | 	call	#__system___float_cmp
1f55c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f560     87 24 60 CF 
1f564     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
1f568     DC 00 90 CD |  if_b	jmp	#LR__2951
1f56c     00 FA 05 F6 | 	mov	result1, #0
1f570     D4 00 90 FD | 	jmp	#LR__2951
1f574                 | LR__2950
1f574     10 13 02 F6 | 	mov	arg01, local02
1f578     10 15 02 F6 | 	mov	arg02, local02
1f57c     3C F4 BF FD | 	call	#__system___float_mul
1f580     FD 22 02 F6 | 	mov	local03, result1
1f584     0F 13 02 F6 | 	mov	arg01, local01
1f588     0F 15 02 F6 | 	mov	arg02, local01
1f58c     2C F4 BF FD | 	call	#__system___float_mul
1f590     FD 14 02 F6 | 	mov	arg02, result1
1f594     11 13 02 F6 | 	mov	arg01, local03
1f598     50 F0 BF FD | 	call	#__system___float_add
1f59c     FD 12 02 F6 | 	mov	arg01, result1
1f5a0     40 F3 BF FD | 	call	#__system___float_sqrt
1f5a4     FD 22 02 F6 | 	mov	local03, result1
1f5a8     10 13 02 F6 | 	mov	arg01, local02
1f5ac     11 15 02 F6 | 	mov	arg02, local03
1f5b0     0C F6 BF FD | 	call	#__system___float_div
1f5b4     FD 20 02 F6 | 	mov	local02, result1
1f5b8     0F 13 02 F6 | 	mov	arg01, local01
1f5bc     11 15 02 F6 | 	mov	arg02, local03
1f5c0     FC F5 BF FD | 	call	#__system___float_div
1f5c4     FD 1E 02 F6 | 	mov	local01, result1
1f5c8     00 40 27 FF 
1f5cc     00 12 06 F6 | 	mov	arg01, ##1317011456
1f5d0     10 15 02 F6 | 	mov	arg02, local02
1f5d4     E4 F3 BF FD | 	call	#__system___float_mul
1f5d8     FD 12 02 F6 | 	mov	arg01, result1
1f5dc     00 14 06 F6 | 	mov	arg02, #0
1f5e0     A0 F8 BF FD | 	call	#__system___float_tointeger
1f5e4     FD 22 02 F6 | 	mov	local03, result1
1f5e8     00 40 27 FF 
1f5ec     00 12 06 F6 | 	mov	arg01, ##1317011456
1f5f0     0F 15 02 F6 | 	mov	arg02, local01
1f5f4     C4 F3 BF FD | 	call	#__system___float_mul
1f5f8     FD 12 02 F6 | 	mov	arg01, result1
1f5fc     00 14 06 F6 | 	mov	arg02, #0
1f600     80 F8 BF FD | 	call	#__system___float_tointeger
1f604     FD 22 52 FD | 	qvector	local03, result1
1f608     87 24 20 FF 
1f60c     DB 23 06 F6 | 	mov	local03, ##1078530011
1f610     19 12 62 FD | 	getqy	arg01
1f614     01 12 C6 F0 | 	sar	arg01, #1
1f618     09 13 52 F6 | 	abs	arg01, arg01 wc
1f61c     1F 24 C6 C9 |  if_b	decod	local04, #31
1f620     00 24 06 36 |  if_ae	mov	local04, #0
1f624     90 EF BF FD | 	call	#__system___float_fromuns
1f628     12 FB 61 F5 | 	xor	result1, local04
1f62c     FD 12 02 F6 | 	mov	arg01, result1
1f630     00 40 27 FF 
1f634     00 14 06 F6 | 	mov	arg02, ##1317011456
1f638     84 F5 BF FD | 	call	#__system___float_div
1f63c     FD 14 02 F6 | 	mov	arg02, result1
1f640     11 13 02 F6 | 	mov	arg01, local03
1f644     74 F3 BF FD | 	call	#__system___float_mul
1f648                 | LR__2951
1f648     A7 F0 03 F6 | 	mov	ptra, fp
1f64c     B2 00 A0 FD | 	call	#popregs_
1f650                 | __system____builtin_atan2f_ret
1f650     2D 00 64 FD | 	ret
1f654                 | 
1f654                 | __system____builtin_exp2f
1f654     04 4A 05 F6 | 	mov	COUNT_, #4
1f658     A8 00 A0 FD | 	call	#pushregs_
1f65c     09 1F 02 F6 | 	mov	local01, arg01
1f660     00 7F 21 FF 
1f664     00 14 06 F6 | 	mov	arg02, ##1123942400
1f668     01 16 66 F6 | 	neg	arg03, #1
1f66c     80 F7 BF FD | 	call	#__system___float_cmp
1f670     00 FA 55 F2 | 	cmps	result1, #0 wc
1f674     00 C0 3F 3F 
1f678     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
1f67c     DC 00 90 3D |  if_ae	jmp	#LR__2961
1f680     0F 13 02 F6 | 	mov	arg01, local01
1f684     00 7F 61 FF 
1f688     00 14 06 F6 | 	mov	arg02, ##-1023541248
1f68c     01 16 06 F6 | 	mov	arg03, #1
1f690     5C F7 BF FD | 	call	#__system___float_cmp
1f694     00 FA 55 F2 | 	cmps	result1, #0 wc
1f698     00 FA 05 C6 |  if_b	mov	result1, #0
1f69c     BC 00 90 CD |  if_b	jmp	#LR__2961
1f6a0     0F 13 02 F6 | 	mov	arg01, local01
1f6a4     00 14 06 F6 | 	mov	arg02, #0
1f6a8     D8 F7 BF FD | 	call	#__system___float_tointeger
1f6ac     FD 20 02 F6 | 	mov	local02, result1
1f6b0     10 13 52 F6 | 	abs	arg01, local02 wc
1f6b4     1F 22 C6 C9 |  if_b	decod	local03, #31
1f6b8     00 22 06 36 |  if_ae	mov	local03, #0
1f6bc     F8 EE BF FD | 	call	#__system___float_fromuns
1f6c0     11 FB 61 F5 | 	xor	result1, local03
1f6c4     FD 14 02 F6 | 	mov	arg02, result1
1f6c8     0F 13 02 F6 | 	mov	arg01, local01
1f6cc     1F 14 E6 F4 | 	bitnot	arg02, #31
1f6d0     18 EF BF FD | 	call	#__system___float_add
1f6d4     FD 24 02 F6 | 	mov	local04, result1
1f6d8     12 13 02 F6 | 	mov	arg01, local04
1f6dc     00 14 06 F6 | 	mov	arg02, #0
1f6e0     01 16 06 F6 | 	mov	arg03, #1
1f6e4     08 F7 BF FD | 	call	#__system___float_cmp
1f6e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f6ec     18 00 90 3D |  if_ae	jmp	#LR__2960
1f6f0     12 13 02 F6 | 	mov	arg01, local04
1f6f4     00 C0 1F FF 
1f6f8     00 14 06 F6 | 	mov	arg02, ##1065353216
1f6fc     EC EE BF FD | 	call	#__system___float_add
1f700     FD 24 02 F6 | 	mov	local04, result1
1f704     01 20 86 F1 | 	sub	local02, #1
1f708                 | LR__2960
1f708     7F 20 06 F1 | 	add	local02, #127
1f70c     17 20 66 F0 | 	shl	local02, #23
1f710     12 13 02 F6 | 	mov	arg01, local04
1f714     00 80 26 FF 
1f718     00 14 06 F6 | 	mov	arg02, ##1291845632
1f71c     9C F2 BF FD | 	call	#__system___float_mul
1f720     FD 12 02 F6 | 	mov	arg01, result1
1f724     00 14 06 F6 | 	mov	arg02, #0
1f728     58 F7 BF FD | 	call	#__system___float_tointeger
1f72c     FD 24 0A F6 | 	mov	local04, result1 wz
1f730     10 FB 01 A6 |  if_e	mov	result1, local02
1f734     24 00 90 AD |  if_e	jmp	#LR__2961
1f738     3E 24 26 F4 | 	bith	local04, #62
1f73c     0F 24 62 FD | 	qexp	local04
1f740     10 13 02 F6 | 	mov	arg01, local02
1f744     18 14 62 FD | 	getqx	arg02
1f748     01 14 06 F1 | 	add	arg02, #1
1f74c     01 14 46 F0 | 	shr	arg02, #1
1f750     00 80 1F FF 
1f754     00 14 06 F1 | 	add	arg02, ##1056964608
1f758     60 F2 BF FD | 	call	#__system___float_mul
1f75c                 | LR__2961
1f75c     A7 F0 03 F6 | 	mov	ptra, fp
1f760     B2 00 A0 FD | 	call	#popregs_
1f764                 | __system____builtin_exp2f_ret
1f764     2D 00 64 FD | 	ret
1f768                 | 
1f768                 | __system____builtin_log2f
1f768     06 4A 05 F6 | 	mov	COUNT_, #6
1f76c     A8 00 A0 FD | 	call	#pushregs_
1f770     09 1F 02 F6 | 	mov	local01, arg01
1f774     09 21 0A F6 | 	mov	local02, arg01 wz
1f778     00 00 40 5F 
1f77c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
1f780     00 40 00 AF 
1f784     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1f788     08 01 90 AD |  if_e	jmp	#LR__2974
1f78c     00 20 56 F2 | 	cmps	local02, #0 wc
1f790     00 E0 3F CF 
1f794     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1f798     F8 00 90 CD |  if_b	jmp	#LR__2974
1f79c     0F 13 02 F6 | 	mov	arg01, local01
1f7a0     00 90 20 FF 
1f7a4     00 14 06 F6 | 	mov	arg02, ##1092616192
1f7a8     01 16 06 F6 | 	mov	arg03, #1
1f7ac     40 F6 BF FD | 	call	#__system___float_cmp
1f7b0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f7b4     4D 2A 20 AF 
1f7b8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
1f7bc     D4 00 90 AD |  if_e	jmp	#LR__2974
1f7c0     0F 13 02 F6 | 	mov	arg01, local01
1f7c4     FC 16 20 FF 
1f7c8     54 14 06 F6 | 	mov	arg02, ##1076754516
1f7cc     01 16 06 F6 | 	mov	arg03, #1
1f7d0     1C F6 BF FD | 	call	#__system___float_cmp
1f7d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f7d8     55 DC 1F AF 
1f7dc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
1f7e0     B0 00 90 AD |  if_e	jmp	#LR__2974
1f7e4     10 23 02 F6 | 	mov	local03, local02
1f7e8     17 22 46 F0 | 	shr	local03, #23
1f7ec     11 23 E2 F8 | 	getbyte	local03, local03, #0
1f7f0     17 21 06 F4 | 	bitl	local02, #279
1f7f4     10 25 02 F6 | 	mov	local04, local02
1f7f8     FF 22 0E F2 | 	cmp	local03, #255 wz
1f7fc     1C 00 90 5D |  if_ne	jmp	#LR__2970
1f800     00 24 0E F2 | 	cmp	local04, #0 wz
1f804     00 C0 3F 5F 
1f808     00 26 06 56 |  if_ne	mov	local05, ##2139095040
1f80c     00 E0 3F AF 
1f810     00 26 06 A6 |  if_e	mov	local05, ##2143289344
1f814     13 FB 01 F6 | 	mov	result1, local05
1f818     78 00 90 FD | 	jmp	#LR__2974
1f81c                 | LR__2970
1f81c     00 22 0E F2 | 	cmp	local03, #0 wz
1f820     17 24 26 54 |  if_ne	bith	local04, #23
1f824     7F 22 86 51 |  if_ne	sub	local03, #127
1f828     28 00 90 5D |  if_ne	jmp	#LR__2973
1f82c     00 24 0E F2 | 	cmp	local04, #0 wz
1f830     00 40 00 AF 
1f834     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1f838     58 00 90 AD |  if_e	jmp	#LR__2974
1f83c     7E 22 66 F6 | 	neg	local03, #126
1f840     97 08 48 FB | 	callpa	#(@LR__2972-@LR__2971)>>2,fcache_load_ptr_
1f844                 | LR__2971
1f844     17 24 2E F4 | 	testbn	local04, #23 wz
1f848     01 24 66 A0 |  if_e	shl	local04, #1
1f84c     01 22 06 A1 |  if_e	add	local03, #1
1f850     F0 FF 9F AD |  if_e	jmp	#LR__2971
1f854                 | LR__2972
1f854                 | LR__2973
1f854     0E 24 62 FD | 	qlog	local04
1f858     01 22 86 F1 | 	sub	local03, #1
1f85c     11 13 52 F6 | 	abs	arg01, local03 wc
1f860     1F 28 C6 C9 |  if_b	decod	local06, #31
1f864     00 28 06 36 |  if_ae	mov	local06, #0
1f868     18 26 62 FD | 	getqx	local05
1f86c     9B 26 06 F4 | 	bitl	local05, #155
1f870     08 26 06 F1 | 	add	local05, #8
1f874     04 26 46 F0 | 	shr	local05, #4
1f878     00 C0 1F FF 
1f87c     00 26 06 F1 | 	add	local05, ##1065353216
1f880     34 ED BF FD | 	call	#__system___float_fromuns
1f884     14 FB 61 F5 | 	xor	result1, local06
1f888     FD 14 02 F6 | 	mov	arg02, result1
1f88c     13 13 02 F6 | 	mov	arg01, local05
1f890     58 ED BF FD | 	call	#__system___float_add
1f894                 | LR__2974
1f894     A7 F0 03 F6 | 	mov	ptra, fp
1f898     B2 00 A0 FD | 	call	#popregs_
1f89c                 | __system____builtin_log2f_ret
1f89c     2D 00 64 FD | 	ret
1f8a0                 | 
1f8a0                 | __system____builtin_powf
1f8a0     04 4A 05 F6 | 	mov	COUNT_, #4
1f8a4     A8 00 A0 FD | 	call	#pushregs_
1f8a8     09 1F 02 F6 | 	mov	local01, arg01
1f8ac     0A 21 02 F6 | 	mov	local02, arg02
1f8b0     10 13 02 F6 | 	mov	arg01, local02
1f8b4     00 14 06 F6 | 	mov	arg02, #0
1f8b8     C8 F5 BF FD | 	call	#__system___float_tointeger
1f8bc     FD 22 02 F6 | 	mov	local03, result1
1f8c0     11 13 52 F6 | 	abs	arg01, local03 wc
1f8c4     1F 24 C6 C9 |  if_b	decod	local04, #31
1f8c8     00 24 06 36 |  if_ae	mov	local04, #0
1f8cc     E8 EC BF FD | 	call	#__system___float_fromuns
1f8d0     12 FB 61 F5 | 	xor	result1, local04
1f8d4     FD 12 02 F6 | 	mov	arg01, result1
1f8d8     10 15 02 F6 | 	mov	arg02, local02
1f8dc     01 16 06 F6 | 	mov	arg03, #1
1f8e0     0C F5 BF FD | 	call	#__system___float_cmp
1f8e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f8e8     18 00 90 5D |  if_ne	jmp	#LR__2980
1f8ec     00 C0 1F FF 
1f8f0     00 12 06 F6 | 	mov	arg01, ##1065353216
1f8f4     0F 15 02 F6 | 	mov	arg02, local01
1f8f8     11 17 02 F6 | 	mov	arg03, local03
1f8fc     68 00 B0 FD | 	call	#__system___float_pow_n
1f900     58 00 90 FD | 	jmp	#LR__2981
1f904                 | LR__2980
1f904     0F 13 02 F6 | 	mov	arg01, local01
1f908     00 14 06 F6 | 	mov	arg02, #0
1f90c     01 16 06 F6 | 	mov	arg03, #1
1f910     DC F4 BF FD | 	call	#__system___float_cmp
1f914     00 FA 55 F2 | 	cmps	result1, #0 wc
1f918     00 E0 3F CF 
1f91c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1f920     38 00 90 CD |  if_b	jmp	#LR__2981
1f924     0F 13 02 F6 | 	mov	arg01, local01
1f928     00 14 06 F6 | 	mov	arg02, #0
1f92c     01 16 06 F6 | 	mov	arg03, #1
1f930     BC F4 BF FD | 	call	#__system___float_cmp
1f934     00 FA 0D F2 | 	cmp	result1, #0 wz
1f938     00 FA 05 A6 |  if_e	mov	result1, #0
1f93c     1C 00 90 AD |  if_e	jmp	#LR__2981
1f940     0F 13 02 F6 | 	mov	arg01, local01
1f944     20 FE BF FD | 	call	#__system____builtin_log2f
1f948     FD 12 02 F6 | 	mov	arg01, result1
1f94c     10 15 02 F6 | 	mov	arg02, local02
1f950     68 F0 BF FD | 	call	#__system___float_mul
1f954     FD 12 02 F6 | 	mov	arg01, result1
1f958     F8 FC BF FD | 	call	#__system____builtin_exp2f
1f95c                 | LR__2981
1f95c     A7 F0 03 F6 | 	mov	ptra, fp
1f960     B2 00 A0 FD | 	call	#popregs_
1f964                 | __system____builtin_powf_ret
1f964     2D 00 64 FD | 	ret
1f968                 | 
1f968                 | __system___float_pow_n
1f968     05 4A 05 F6 | 	mov	COUNT_, #5
1f96c     A8 00 A0 FD | 	call	#pushregs_
1f970     09 1F 02 F6 | 	mov	local01, arg01
1f974     0A 21 02 F6 | 	mov	local02, arg02
1f978     0B 23 02 F6 | 	mov	local03, arg03
1f97c     00 22 56 F2 | 	cmps	local03, #0 wc
1f980     18 00 90 3D |  if_ae	jmp	#LR__2990
1f984     01 24 06 F6 | 	mov	local04, #1
1f988     11 23 62 F6 | 	neg	local03, local03
1f98c     00 22 56 F2 | 	cmps	local03, #0 wc
1f990     00 FA 05 C6 |  if_b	mov	result1, #0
1f994     94 00 90 CD |  if_b	jmp	#LR__2998
1f998     04 00 90 FD | 	jmp	#LR__2991
1f99c                 | LR__2990
1f99c     00 24 06 F6 | 	mov	local04, #0
1f9a0                 | LR__2991
1f9a0     00 C0 1F FF 
1f9a4     00 26 06 F6 | 	mov	local05, ##1065353216
1f9a8                 | LR__2992
1f9a8     01 22 56 F2 | 	cmps	local03, #1 wc
1f9ac     30 00 90 CD |  if_b	jmp	#LR__2994
1f9b0     01 22 CE F7 | 	test	local03, #1 wz
1f9b4     10 00 90 AD |  if_e	jmp	#LR__2993
1f9b8     13 13 02 F6 | 	mov	arg01, local05
1f9bc     10 15 02 F6 | 	mov	arg02, local02
1f9c0     F8 EF BF FD | 	call	#__system___float_mul
1f9c4     FD 26 02 F6 | 	mov	local05, result1
1f9c8                 | LR__2993
1f9c8     01 22 C6 F0 | 	sar	local03, #1
1f9cc     10 13 02 F6 | 	mov	arg01, local02
1f9d0     10 15 02 F6 | 	mov	arg02, local02
1f9d4     E4 EF BF FD | 	call	#__system___float_mul
1f9d8     FD 20 02 F6 | 	mov	local02, result1
1f9dc     C8 FF 9F FD | 	jmp	#LR__2992
1f9e0                 | LR__2994
1f9e0     00 24 0E F2 | 	cmp	local04, #0 wz
1f9e4     14 00 90 AD |  if_e	jmp	#LR__2995
1f9e8     0F 13 02 F6 | 	mov	arg01, local01
1f9ec     13 15 02 F6 | 	mov	arg02, local05
1f9f0     CC F1 BF FD | 	call	#__system___float_div
1f9f4     FD 26 02 F6 | 	mov	local05, result1
1f9f8     2C 00 90 FD | 	jmp	#LR__2997
1f9fc                 | LR__2995
1f9fc     0F 13 02 F6 | 	mov	arg01, local01
1fa00     00 C0 1F FF 
1fa04     00 14 06 F6 | 	mov	arg02, ##1065353216
1fa08     01 16 06 F6 | 	mov	arg03, #1
1fa0c     E0 F3 BF FD | 	call	#__system___float_cmp
1fa10     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa14     10 00 90 AD |  if_e	jmp	#LR__2996
1fa18     0F 13 02 F6 | 	mov	arg01, local01
1fa1c     13 15 02 F6 | 	mov	arg02, local05
1fa20     98 EF BF FD | 	call	#__system___float_mul
1fa24     FD 26 02 F6 | 	mov	local05, result1
1fa28                 | LR__2996
1fa28                 | LR__2997
1fa28     13 FB 01 F6 | 	mov	result1, local05
1fa2c                 | LR__2998
1fa2c     A7 F0 03 F6 | 	mov	ptra, fp
1fa30     B2 00 A0 FD | 	call	#popregs_
1fa34                 | __system___float_pow_n_ret
1fa34     2D 00 64 FD | 	ret
1fa38                 | 
1fa38                 | __system___gc_ptrs
1fa38     EC 00 02 F6 | 	mov	_var01, __heap_ptr
1fa3c     00 03 02 F6 | 	mov	_var02, _var01
1fa40     76 01 00 FF 
1fa44     F8 03 06 F1 | 	add	_var02, ##191992
1fa48     00 FD 09 FB | 	rdlong	result2, _var01 wz
1fa4c     74 00 90 5D |  if_ne	jmp	#LR__3000
1fa50     01 FD 01 F6 | 	mov	result2, _var02
1fa54     00 FD 81 F1 | 	sub	result2, _var01
1fa58     00 03 58 FC | 	wrword	#1, _var01
1fa5c     00 FB 01 F6 | 	mov	result1, _var01
1fa60     02 FA 05 F1 | 	add	result1, #2
1fa64     36 00 80 FF 
1fa68     FD 20 59 FC | 	wrword	##27792, result1
1fa6c     00 FB 01 F6 | 	mov	result1, _var01
1fa70     04 FA 05 F1 | 	add	result1, #4
1fa74     FD 00 58 FC | 	wrword	#0, result1
1fa78     00 FB 01 F6 | 	mov	result1, _var01
1fa7c     06 FA 05 F1 | 	add	result1, #6
1fa80     FD 02 58 FC | 	wrword	#1, result1
1fa84     10 00 06 F1 | 	add	_var01, #16
1fa88     FE FC 51 F6 | 	abs	result2, result2 wc
1fa8c     04 FC 45 F0 | 	shr	result2, #4
1fa90     FE FC 81 F6 | 	negc	result2, result2
1fa94     00 FD 51 FC | 	wrword	result2, _var01
1fa98     00 FD 01 F6 | 	mov	result2, _var01
1fa9c     02 FC 05 F1 | 	add	result2, #2
1faa0     36 00 80 FF 
1faa4     FE 1E 59 FC | 	wrword	##27791, result2
1faa8     00 FD 01 F6 | 	mov	result2, _var01
1faac     04 FC 05 F1 | 	add	result2, #4
1fab0     FE 00 58 FC | 	wrword	#0, result2
1fab4     00 FD 01 F6 | 	mov	result2, _var01
1fab8     06 FC 05 F1 | 	add	result2, #6
1fabc     FE 00 58 FC | 	wrword	#0, result2
1fac0     10 00 86 F1 | 	sub	_var01, #16
1fac4                 | LR__3000
1fac4     00 FB 01 F6 | 	mov	result1, _var01
1fac8     01 FD 01 F6 | 	mov	result2, _var02
1facc                 | __system___gc_ptrs_ret
1facc     2D 00 64 FD | 	ret
1fad0                 | 
1fad0                 | __system___gc_tryalloc
1fad0     0B 4A 05 F6 | 	mov	COUNT_, #11
1fad4     A8 00 A0 FD | 	call	#pushregs_
1fad8     09 1F 02 F6 | 	mov	local01, arg01
1fadc     0A 21 02 F6 | 	mov	local02, arg02
1fae0     54 FF BF FD | 	call	#__system___gc_ptrs
1fae4     FD 22 02 F6 | 	mov	local03, result1
1fae8     FE 24 02 F6 | 	mov	local04, result2
1faec     11 27 02 F6 | 	mov	local05, local03
1faf0     00 28 06 F6 | 	mov	local06, #0
1faf4     97 1E 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
1faf8                 | LR__3010
1faf8     13 2B 02 F6 | 	mov	local07, local05
1fafc     06 26 06 F1 | 	add	local05, #6
1fb00     13 15 EA FA | 	rdword	arg02, local05 wz
1fb04     11 13 02 F6 | 	mov	arg01, local03
1fb08     00 FA 05 A6 |  if_e	mov	result1, #0
1fb0c     04 14 66 50 |  if_ne	shl	arg02, #4
1fb10     0A 13 02 51 |  if_ne	add	arg01, arg02
1fb14     09 FB 01 56 |  if_ne	mov	result1, arg01
1fb18     FD 26 0A F6 | 	mov	local05, result1 wz
1fb1c     13 29 E2 5A |  if_ne	rdword	local06, local05
1fb20     00 26 0E F2 | 	cmp	local05, #0 wz
1fb24     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1fb28     08 00 90 1D |  if_a	jmp	#LR__3012
1fb2c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
1fb30     C4 FF 9F 1D |  if_a	jmp	#LR__3010
1fb34                 | LR__3011
1fb34                 | LR__3012
1fb34     00 26 0E F2 | 	cmp	local05, #0 wz
1fb38     13 FB 01 A6 |  if_e	mov	result1, local05
1fb3c     3C 01 90 AD |  if_e	jmp	#LR__3015
1fb40     13 FD 01 F6 | 	mov	result2, local05
1fb44     06 FC 05 F1 | 	add	result2, #6
1fb48     FE 2C E2 FA | 	rdword	local08, result2
1fb4c     14 1F 52 F2 | 	cmps	local01, local06 wc
1fb50     C0 00 90 3D |  if_ae	jmp	#LR__3014
1fb54     13 1F 52 FC | 	wrword	local01, local05
1fb58     13 13 02 F6 | 	mov	arg01, local05
1fb5c     0F 2D 02 F6 | 	mov	local08, local01
1fb60     04 2C 66 F0 | 	shl	local08, #4
1fb64     16 13 02 F1 | 	add	arg01, local08
1fb68     0F 29 82 F1 | 	sub	local06, local01
1fb6c     09 29 52 FC | 	wrword	local06, arg01
1fb70     09 2D 02 F6 | 	mov	local08, arg01
1fb74     02 2C 06 F1 | 	add	local08, #2
1fb78     36 00 80 FF 
1fb7c     16 1F 59 FC | 	wrword	##27791, local08
1fb80     13 15 0A F6 | 	mov	arg02, local05 wz
1fb84     00 FA 05 A6 |  if_e	mov	result1, #0
1fb88     11 15 82 51 |  if_ne	sub	arg02, local03
1fb8c     04 14 46 50 |  if_ne	shr	arg02, #4
1fb90     0A FB 01 56 |  if_ne	mov	result1, arg02
1fb94     09 2D 02 F6 | 	mov	local08, arg01
1fb98     04 2C 06 F1 | 	add	local08, #4
1fb9c     16 FB 51 FC | 	wrword	result1, local08
1fba0     13 2D 02 F6 | 	mov	local08, local05
1fba4     06 2C 06 F1 | 	add	local08, #6
1fba8     09 15 02 F6 | 	mov	arg02, arg01
1fbac     16 2D E2 FA | 	rdword	local08, local08
1fbb0     06 14 06 F1 | 	add	arg02, #6
1fbb4     0A 2D 52 FC | 	wrword	local08, arg02
1fbb8     09 2F 02 F6 | 	mov	local09, arg01
1fbbc     17 15 0A F6 | 	mov	arg02, local09 wz
1fbc0     00 FA 05 A6 |  if_e	mov	result1, #0
1fbc4     11 15 82 51 |  if_ne	sub	arg02, local03
1fbc8     04 14 46 50 |  if_ne	shr	arg02, #4
1fbcc     0A FB 01 56 |  if_ne	mov	result1, arg02
1fbd0     FD 2C 02 F6 | 	mov	local08, result1
1fbd4     09 31 EA FA | 	rdword	local10, arg01 wz
1fbd8     00 FA 05 A6 |  if_e	mov	result1, #0
1fbdc     04 30 66 50 |  if_ne	shl	local10, #4
1fbe0     18 13 02 51 |  if_ne	add	arg01, local10
1fbe4     09 FB 01 56 |  if_ne	mov	result1, arg01
1fbe8     FD 32 0A F6 | 	mov	local11, result1 wz
1fbec     24 00 90 AD |  if_e	jmp	#LR__3013
1fbf0     12 33 52 F2 | 	cmps	local11, local04 wc
1fbf4     1C 00 90 3D |  if_ae	jmp	#LR__3013
1fbf8     17 15 0A F6 | 	mov	arg02, local09 wz
1fbfc     00 FA 05 A6 |  if_e	mov	result1, #0
1fc00     11 15 82 51 |  if_ne	sub	arg02, local03
1fc04     04 14 46 50 |  if_ne	shr	arg02, #4
1fc08     0A FB 01 56 |  if_ne	mov	result1, arg02
1fc0c     04 32 06 F1 | 	add	local11, #4
1fc10     19 FB 51 FC | 	wrword	result1, local11
1fc14                 | LR__3013
1fc14                 | LR__3014
1fc14     06 2A 06 F1 | 	add	local07, #6
1fc18     15 2D 52 FC | 	wrword	local08, local07
1fc1c     36 00 00 FF 
1fc20     80 2E 06 F6 | 	mov	local09, ##27776
1fc24     10 2F 42 F5 | 	or	local09, local02
1fc28     00 FA 05 F6 | 	mov	result1, #0
1fc2c     01 FA 61 FD | 	cogid	result1
1fc30     FD 2E 42 F5 | 	or	local09, result1
1fc34     13 33 02 F6 | 	mov	local11, local05
1fc38     02 32 06 F1 | 	add	local11, #2
1fc3c     19 2F 52 FC | 	wrword	local09, local11
1fc40     11 2F 02 F6 | 	mov	local09, local03
1fc44     08 2E 06 F1 | 	add	local09, #8
1fc48     13 33 02 F6 | 	mov	local11, local05
1fc4c     17 2F E2 FA | 	rdword	local09, local09
1fc50     06 32 06 F1 | 	add	local11, #6
1fc54     19 2F 52 FC | 	wrword	local09, local11
1fc58     13 15 0A F6 | 	mov	arg02, local05 wz
1fc5c     00 FA 05 A6 |  if_e	mov	result1, #0
1fc60     11 15 82 51 |  if_ne	sub	arg02, local03
1fc64     04 14 46 50 |  if_ne	shr	arg02, #4
1fc68     0A FB 01 56 |  if_ne	mov	result1, arg02
1fc6c     08 22 06 F1 | 	add	local03, #8
1fc70     11 FB 51 FC | 	wrword	result1, local03
1fc74     08 26 06 F1 | 	add	local05, #8
1fc78     13 FB 01 F6 | 	mov	result1, local05
1fc7c                 | LR__3015
1fc7c     A7 F0 03 F6 | 	mov	ptra, fp
1fc80     B2 00 A0 FD | 	call	#popregs_
1fc84                 | __system___gc_tryalloc_ret
1fc84     2D 00 64 FD | 	ret
1fc88                 | 
1fc88                 | __system___gc_alloc_managed
1fc88     01 4A 05 F6 | 	mov	COUNT_, #1
1fc8c     A8 00 A0 FD | 	call	#pushregs_
1fc90     09 1F 02 F6 | 	mov	local01, arg01
1fc94     00 14 06 F6 | 	mov	arg02, #0
1fc98     1C 00 B0 FD | 	call	#__system___gc_doalloc
1fc9c     FD 14 0A F6 | 	mov	arg02, result1 wz
1fca0     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
1fca4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1fca8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
1fcac     A7 F0 03 F6 | 	mov	ptra, fp
1fcb0     B2 00 A0 FD | 	call	#popregs_
1fcb4                 | __system___gc_alloc_managed_ret
1fcb4     2D 00 64 FD | 	ret
1fcb8                 | 
1fcb8                 | __system___gc_doalloc
1fcb8     06 4A 05 F6 | 	mov	COUNT_, #6
1fcbc     A8 00 A0 FD | 	call	#pushregs_
1fcc0     09 1F 0A F6 | 	mov	local01, arg01 wz
1fcc4     0A 21 02 F6 | 	mov	local02, arg02
1fcc8     00 FA 05 A6 |  if_e	mov	result1, #0
1fccc     8C 00 90 AD |  if_e	jmp	#LR__3027
1fcd0     17 1E 06 F1 | 	add	local01, #23
1fcd4     0F 1E 26 F5 | 	andn	local01, #15
1fcd8     04 1E 46 F0 | 	shr	local01, #4
1fcdc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1fce0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1fce4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1fce8     54 C1 BF FD | 	call	#__system___lockmem
1fcec     0F 13 02 F6 | 	mov	arg01, local01
1fcf0     10 15 02 F6 | 	mov	arg02, local02
1fcf4     D8 FD BF FD | 	call	#__system___gc_tryalloc
1fcf8     FD 22 0A F6 | 	mov	local03, result1 wz
1fcfc     14 00 90 5D |  if_ne	jmp	#LR__3020
1fd00     70 03 B0 FD | 	call	#__system___gc_docollect
1fd04     0F 13 02 F6 | 	mov	arg01, local01
1fd08     10 15 02 F6 | 	mov	arg02, local02
1fd0c     C0 FD BF FD | 	call	#__system___gc_tryalloc
1fd10     FD 22 02 F6 | 	mov	local03, result1
1fd14                 | LR__3020
1fd14     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1fd18     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1fd1c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1fd20     09 01 68 FC | 	wrlong	#0, arg01
1fd24     00 22 0E F2 | 	cmp	local03, #0 wz
1fd28     2C 00 90 AD |  if_e	jmp	#LR__3026
1fd2c     04 1E 66 F0 | 	shl	local01, #4
1fd30     08 1E 86 F1 | 	sub	local01, #8
1fd34     0F 25 52 F6 | 	abs	local04, local01 wc
1fd38     02 24 46 F0 | 	shr	local04, #2
1fd3c     12 27 8A F6 | 	negc	local05, local04 wz
1fd40     11 29 02 F6 | 	mov	local06, local03
1fd44     10 00 90 AD |  if_e	jmp	#LR__3025
1fd48     97 06 48 FB | 	callpa	#(@LR__3023-@LR__3021)>>2,fcache_load_ptr_
1fd4c                 | LR__3021
1fd4c     13 05 D8 FC | 	rep	@LR__3024, local05
1fd50                 | LR__3022
1fd50     14 01 68 FC | 	wrlong	#0, local06
1fd54     04 28 06 F1 | 	add	local06, #4
1fd58                 | LR__3023
1fd58                 | LR__3024
1fd58                 | LR__3025
1fd58                 | LR__3026
1fd58     11 FB 01 F6 | 	mov	result1, local03
1fd5c                 | LR__3027
1fd5c     A7 F0 03 F6 | 	mov	ptra, fp
1fd60     B2 00 A0 FD | 	call	#popregs_
1fd64                 | __system___gc_doalloc_ret
1fd64     2D 00 64 FD | 	ret
1fd68                 | 
1fd68                 | __system___gc_isvalidptr
1fd68     F8 16 06 F4 | 	bitl	arg03, #248
1fd6c     08 16 86 F1 | 	sub	arg03, #8
1fd70     09 17 52 F2 | 	cmps	arg03, arg01 wc
1fd74     08 00 90 CD |  if_b	jmp	#LR__3030
1fd78     0A 17 52 F2 | 	cmps	arg03, arg02 wc
1fd7c     08 00 90 CD |  if_b	jmp	#LR__3031
1fd80                 | LR__3030
1fd80     00 FA 05 F6 | 	mov	result1, #0
1fd84     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
1fd88                 | LR__3031
1fd88     0B 01 02 F6 | 	mov	_var01, arg03
1fd8c     09 01 62 F5 | 	xor	_var01, arg01
1fd90     0F 00 CE F7 | 	test	_var01, #15 wz
1fd94     00 FA 05 56 |  if_ne	mov	result1, #0
1fd98     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
1fd9c     0B 01 02 F6 | 	mov	_var01, arg03
1fda0     02 00 06 F1 | 	add	_var01, #2
1fda4     00 01 E2 FA | 	rdword	_var01, _var01
1fda8     7F 00 00 FF 
1fdac     C0 01 06 F5 | 	and	_var01, ##65472
1fdb0     36 00 00 FF 
1fdb4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
1fdb8     00 FA 05 56 |  if_ne	mov	result1, #0
1fdbc     0B FB 01 A6 |  if_e	mov	result1, arg03
1fdc0                 | __system___gc_isvalidptr_ret
1fdc0     2D 00 64 FD | 	ret
1fdc4                 | 
1fdc4                 | __system___gc_free
1fdc4     09 17 02 F6 | 	mov	arg03, arg01
1fdc8     6C FC BF FD | 	call	#__system___gc_ptrs
1fdcc     FD 12 02 F6 | 	mov	arg01, result1
1fdd0     FE 14 02 F6 | 	mov	arg02, result2
1fdd4     90 FF BF FD | 	call	#__system___gc_isvalidptr
1fdd8     FD 14 0A F6 | 	mov	arg02, result1 wz
1fddc     28 00 90 AD |  if_e	jmp	#LR__3040
1fde0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1fde4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1fde8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1fdec     50 C0 BF FD | 	call	#__system___lockmem
1fdf0     0A 13 02 F6 | 	mov	arg01, arg02
1fdf4     14 00 B0 FD | 	call	#__system___gc_dofree
1fdf8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
1fdfc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1fe00     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
1fe04     09 01 68 FC | 	wrlong	#0, arg01
1fe08                 | LR__3040
1fe08                 | __system___gc_free_ret
1fe08     2D 00 64 FD | 	ret
1fe0c                 | 
1fe0c                 | __system___gc_dofree
1fe0c     06 4A 05 F6 | 	mov	COUNT_, #6
1fe10     A8 00 A0 FD | 	call	#pushregs_
1fe14     09 1F 02 F6 | 	mov	local01, arg01
1fe18     1C FC BF FD | 	call	#__system___gc_ptrs
1fe1c     FD 20 02 F6 | 	mov	local02, result1
1fe20     FE 22 02 F6 | 	mov	local03, result2
1fe24     0F 15 02 F6 | 	mov	arg02, local01
1fe28     02 14 06 F1 | 	add	arg02, #2
1fe2c     36 00 80 FF 
1fe30     0A 1F 59 FC | 	wrword	##27791, arg02
1fe34     0F 25 02 F6 | 	mov	local04, local01
1fe38     0F 13 02 F6 | 	mov	arg01, local01
1fe3c     09 27 EA FA | 	rdword	local05, arg01 wz
1fe40     00 FA 05 A6 |  if_e	mov	result1, #0
1fe44     04 26 66 50 |  if_ne	shl	local05, #4
1fe48     13 13 02 51 |  if_ne	add	arg01, local05
1fe4c     09 FB 01 56 |  if_ne	mov	result1, arg01
1fe50     FD 28 02 F6 | 	mov	local06, result1
1fe54     97 24 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
1fe58                 | LR__3050
1fe58     04 24 06 F1 | 	add	local04, #4
1fe5c     12 15 EA FA | 	rdword	arg02, local04 wz
1fe60     10 13 02 F6 | 	mov	arg01, local02
1fe64     00 FA 05 A6 |  if_e	mov	result1, #0
1fe68     04 14 66 50 |  if_ne	shl	arg02, #4
1fe6c     0A 13 02 51 |  if_ne	add	arg01, arg02
1fe70     09 FB 01 56 |  if_ne	mov	result1, arg01
1fe74     FD 24 0A F6 | 	mov	local04, result1 wz
1fe78     24 00 90 AD |  if_e	jmp	#LR__3052
1fe7c     12 13 02 F6 | 	mov	arg01, local04
1fe80     00 FA 05 F6 | 	mov	result1, #0
1fe84     02 12 06 F1 | 	add	arg01, #2
1fe88     09 13 E2 FA | 	rdword	arg01, arg01
1fe8c     36 00 00 FF 
1fe90     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1fe94     01 FA 65 A6 |  if_e	neg	result1, #1
1fe98     00 FA 0D F2 | 	cmp	result1, #0 wz
1fe9c     B8 FF 9F AD |  if_e	jmp	#LR__3050
1fea0                 | LR__3051
1fea0                 | LR__3052
1fea0     00 24 0E F2 | 	cmp	local04, #0 wz
1fea4     10 25 02 A6 |  if_e	mov	local04, local02
1fea8     12 15 02 F6 | 	mov	arg02, local04
1feac     06 14 06 F1 | 	add	arg02, #6
1feb0     0F 13 02 F6 | 	mov	arg01, local01
1feb4     0A 15 E2 FA | 	rdword	arg02, arg02
1feb8     06 12 06 F1 | 	add	arg01, #6
1febc     09 15 52 FC | 	wrword	arg02, arg01
1fec0     0F 15 0A F6 | 	mov	arg02, local01 wz
1fec4     00 FA 05 A6 |  if_e	mov	result1, #0
1fec8     10 15 82 51 |  if_ne	sub	arg02, local02
1fecc     04 14 46 50 |  if_ne	shr	arg02, #4
1fed0     0A FB 01 56 |  if_ne	mov	result1, arg02
1fed4     12 15 02 F6 | 	mov	arg02, local04
1fed8     06 14 06 F1 | 	add	arg02, #6
1fedc     0A FB 51 FC | 	wrword	result1, arg02
1fee0     10 25 0A F2 | 	cmp	local04, local02 wz
1fee4     A4 00 90 AD |  if_e	jmp	#LR__3055
1fee8     12 13 02 F6 | 	mov	arg01, local04
1feec     09 27 EA FA | 	rdword	local05, arg01 wz
1fef0     00 FA 05 A6 |  if_e	mov	result1, #0
1fef4     04 26 66 50 |  if_ne	shl	local05, #4
1fef8     13 13 02 51 |  if_ne	add	arg01, local05
1fefc     09 FB 01 56 |  if_ne	mov	result1, arg01
1ff00     0F FB 09 F2 | 	cmp	result1, local01 wz
1ff04     84 00 90 5D |  if_ne	jmp	#LR__3054
1ff08     12 29 E2 FA | 	rdword	local06, local04
1ff0c     0F 15 E2 FA | 	rdword	arg02, local01
1ff10     0A 29 02 F1 | 	add	local06, arg02
1ff14     12 29 52 FC | 	wrword	local06, local04
1ff18     0F 29 02 F6 | 	mov	local06, local01
1ff1c     02 28 06 F1 | 	add	local06, #2
1ff20     14 01 58 FC | 	wrword	#0, local06
1ff24     0F 13 02 F6 | 	mov	arg01, local01
1ff28     09 27 EA FA | 	rdword	local05, arg01 wz
1ff2c     00 FA 05 A6 |  if_e	mov	result1, #0
1ff30     04 26 66 50 |  if_ne	shl	local05, #4
1ff34     13 13 02 51 |  if_ne	add	arg01, local05
1ff38     09 FB 01 56 |  if_ne	mov	result1, arg01
1ff3c     FD 28 02 F6 | 	mov	local06, result1
1ff40     11 29 52 F2 | 	cmps	local06, local03 wc
1ff44     20 00 90 3D |  if_ae	jmp	#LR__3053
1ff48     12 15 0A F6 | 	mov	arg02, local04 wz
1ff4c     00 FA 05 A6 |  if_e	mov	result1, #0
1ff50     10 15 82 51 |  if_ne	sub	arg02, local02
1ff54     04 14 46 50 |  if_ne	shr	arg02, #4
1ff58     0A FB 01 56 |  if_ne	mov	result1, arg02
1ff5c     14 15 02 F6 | 	mov	arg02, local06
1ff60     04 14 06 F1 | 	add	arg02, #4
1ff64     0A FB 51 FC | 	wrword	result1, arg02
1ff68                 | LR__3053
1ff68     0F 15 02 F6 | 	mov	arg02, local01
1ff6c     06 14 06 F1 | 	add	arg02, #6
1ff70     12 FD 01 F6 | 	mov	result2, local04
1ff74     0A 15 E2 FA | 	rdword	arg02, arg02
1ff78     06 FC 05 F1 | 	add	result2, #6
1ff7c     FE 14 52 FC | 	wrword	arg02, result2
1ff80     06 1E 06 F1 | 	add	local01, #6
1ff84     0F 01 58 FC | 	wrword	#0, local01
1ff88     12 1F 02 F6 | 	mov	local01, local04
1ff8c                 | LR__3054
1ff8c                 | LR__3055
1ff8c     0F 13 02 F6 | 	mov	arg01, local01
1ff90     09 27 EA FA | 	rdword	local05, arg01 wz
1ff94     00 FA 05 A6 |  if_e	mov	result1, #0
1ff98     04 26 66 50 |  if_ne	shl	local05, #4
1ff9c     13 13 02 51 |  if_ne	add	arg01, local05
1ffa0     09 FB 01 56 |  if_ne	mov	result1, arg01
1ffa4     FD 14 0A F6 | 	mov	arg02, result1 wz
1ffa8     B8 00 90 AD |  if_e	jmp	#LR__3057
1ffac     11 15 52 F2 | 	cmps	arg02, local03 wc
1ffb0     B0 00 90 3D |  if_ae	jmp	#LR__3057
1ffb4     0A 13 02 F6 | 	mov	arg01, arg02
1ffb8     00 FA 05 F6 | 	mov	result1, #0
1ffbc     02 12 06 F1 | 	add	arg01, #2
1ffc0     09 13 E2 FA | 	rdword	arg01, arg01
1ffc4     36 00 00 FF 
1ffc8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1ffcc     01 FA 65 A6 |  if_e	neg	result1, #1
1ffd0     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffd4     8C 00 90 AD |  if_e	jmp	#LR__3057
1ffd8     0F 25 02 F6 | 	mov	local04, local01
1ffdc     12 29 E2 FA | 	rdword	local06, local04
1ffe0     0A 13 02 F6 | 	mov	arg01, arg02
1ffe4     09 1F E2 FA | 	rdword	local01, arg01
1ffe8     0F 29 02 F1 | 	add	local06, local01
1ffec     12 29 52 FC | 	wrword	local06, local04
1fff0     09 29 02 F6 | 	mov	local06, arg01
1fff4     06 28 06 F1 | 	add	local06, #6
1fff8     12 1F 02 F6 | 	mov	local01, local04
1fffc     14 29 E2 FA | 	rdword	local06, local06
20000     06 1E 06 F1 | 	add	local01, #6
20004     0F 29 52 FC | 	wrword	local06, local01
20008     09 29 02 F6 | 	mov	local06, arg01
2000c     02 28 06 F1 | 	add	local06, #2
20010     14 55 59 FC | 	wrword	#170, local06
20014     09 29 02 F6 | 	mov	local06, arg01
20018     06 28 06 F1 | 	add	local06, #6
2001c     14 01 58 FC | 	wrword	#0, local06
20020     09 27 EA FA | 	rdword	local05, arg01 wz
20024     00 FA 05 A6 |  if_e	mov	result1, #0
20028     04 26 66 50 |  if_ne	shl	local05, #4
2002c     13 13 02 51 |  if_ne	add	arg01, local05
20030     09 FB 01 56 |  if_ne	mov	result1, arg01
20034     FD 28 0A F6 | 	mov	local06, result1 wz
20038     28 00 90 AD |  if_e	jmp	#LR__3056
2003c     11 29 52 F2 | 	cmps	local06, local03 wc
20040     20 00 90 3D |  if_ae	jmp	#LR__3056
20044     12 15 0A F6 | 	mov	arg02, local04 wz
20048     00 FA 05 A6 |  if_e	mov	result1, #0
2004c     10 15 82 51 |  if_ne	sub	arg02, local02
20050     04 14 46 50 |  if_ne	shr	arg02, #4
20054     0A FB 01 56 |  if_ne	mov	result1, arg02
20058     14 25 02 F6 | 	mov	local04, local06
2005c     04 24 06 F1 | 	add	local04, #4
20060     12 FB 51 FC | 	wrword	result1, local04
20064                 | LR__3056
20064                 | LR__3057
20064     14 FB 01 F6 | 	mov	result1, local06
20068     A7 F0 03 F6 | 	mov	ptra, fp
2006c     B2 00 A0 FD | 	call	#popregs_
20070                 | __system___gc_dofree_ret
20070     2D 00 64 FD | 	ret
20074                 | 
20074                 | __system___gc_docollect
20074     05 4A 05 F6 | 	mov	COUNT_, #5
20078     A8 00 A0 FD | 	call	#pushregs_
2007c     B8 F9 BF FD | 	call	#__system___gc_ptrs
20080     FE 1E 02 F6 | 	mov	local01, result2
20084     FD 20 02 F6 | 	mov	local02, result1
20088     10 13 02 F6 | 	mov	arg01, local02
2008c     09 23 EA FA | 	rdword	local03, arg01 wz
20090     00 FA 05 A6 |  if_e	mov	result1, #0
20094     04 22 66 50 |  if_ne	shl	local03, #4
20098     11 13 02 51 |  if_ne	add	arg01, local03
2009c     09 FB 01 56 |  if_ne	mov	result1, arg01
200a0     FD 24 0A F6 | 	mov	local04, result1 wz
200a4     00 FA 05 F6 | 	mov	result1, #0
200a8     01 FA 61 FD | 	cogid	result1
200ac     FD 26 02 F6 | 	mov	local05, result1
200b0     48 00 90 AD |  if_e	jmp	#LR__3062
200b4     97 22 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
200b8                 | LR__3060
200b8     0F 25 52 F2 | 	cmps	local04, local01 wc
200bc     3C 00 90 3D |  if_ae	jmp	#LR__3062
200c0     12 15 02 F6 | 	mov	arg02, local04
200c4     02 14 06 F1 | 	add	arg02, #2
200c8     0A 15 E2 FA | 	rdword	arg02, arg02
200cc     20 14 26 F5 | 	andn	arg02, #32
200d0     12 13 02 F6 | 	mov	arg01, local04
200d4     02 12 06 F1 | 	add	arg01, #2
200d8     09 15 52 FC | 	wrword	arg02, arg01
200dc     12 13 02 F6 | 	mov	arg01, local04
200e0     09 23 EA FA | 	rdword	local03, arg01 wz
200e4     00 FA 05 A6 |  if_e	mov	result1, #0
200e8     04 22 66 50 |  if_ne	shl	local03, #4
200ec     11 13 02 51 |  if_ne	add	arg01, local03
200f0     09 FB 01 56 |  if_ne	mov	result1, arg01
200f4     FD 24 0A F6 | 	mov	local04, result1 wz
200f8     BC FF 9F 5D |  if_ne	jmp	#LR__3060
200fc                 | LR__3061
200fc                 | LR__3062
200fc     00 22 06 F6 | 	mov	local03, #0
20100     00 12 06 F6 | 	mov	arg01, #0
20104     10 BD BF FD | 	call	#__system____topofstack
20108     FD 14 02 F6 | 	mov	arg02, result1
2010c     11 13 02 F6 | 	mov	arg01, local03
20110     90 00 B0 FD | 	call	#__system___gc_markhub
20114     1C 01 B0 FD | 	call	#__system___gc_markcog
20118     10 13 02 F6 | 	mov	arg01, local02
2011c     09 23 EA FA | 	rdword	local03, arg01 wz
20120     00 FA 05 A6 |  if_e	mov	result1, #0
20124     04 22 66 50 |  if_ne	shl	local03, #4
20128     11 13 02 51 |  if_ne	add	arg01, local03
2012c     09 FB 01 56 |  if_ne	mov	result1, arg01
20130     FD 20 0A F6 | 	mov	local02, result1 wz
20134     60 00 90 AD |  if_e	jmp	#LR__3066
20138                 | LR__3063
20138     10 25 02 F6 | 	mov	local04, local02
2013c     12 13 02 F6 | 	mov	arg01, local04
20140     09 23 EA FA | 	rdword	local03, arg01 wz
20144     00 FA 05 A6 |  if_e	mov	result1, #0
20148     04 22 66 50 |  if_ne	shl	local03, #4
2014c     11 13 02 51 |  if_ne	add	arg01, local03
20150     09 FB 01 56 |  if_ne	mov	result1, arg01
20154     FD 20 02 F6 | 	mov	local02, result1
20158     12 15 02 F6 | 	mov	arg02, local04
2015c     02 14 06 F1 | 	add	arg02, #2
20160     0A 15 E2 FA | 	rdword	arg02, arg02
20164     20 14 CE F7 | 	test	arg02, #32 wz
20168     10 14 CE A7 |  if_e	test	arg02, #16 wz
2016c     1C 00 90 5D |  if_ne	jmp	#LR__3065
20170     0A 15 42 F8 | 	getnib	arg02, arg02, #0
20174     13 15 0A F2 | 	cmp	arg02, local05 wz
20178     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2017c     0C 00 90 5D |  if_ne	jmp	#LR__3064
20180     12 13 02 F6 | 	mov	arg01, local04
20184     84 FC BF FD | 	call	#__system___gc_dofree
20188     FD 20 02 F6 | 	mov	local02, result1
2018c                 | LR__3064
2018c                 | LR__3065
2018c     00 20 0E F2 | 	cmp	local02, #0 wz
20190     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
20194     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3063
20198                 | LR__3066
20198     A7 F0 03 F6 | 	mov	ptra, fp
2019c     B2 00 A0 FD | 	call	#popregs_
201a0                 | __system___gc_docollect_ret
201a0     2D 00 64 FD | 	ret
201a4                 | 
201a4                 | __system___gc_markhub
201a4     04 4A 05 F6 | 	mov	COUNT_, #4
201a8     A8 00 A0 FD | 	call	#pushregs_
201ac     09 1F 02 F6 | 	mov	local01, arg01
201b0     0A 21 02 F6 | 	mov	local02, arg02
201b4     80 F8 BF FD | 	call	#__system___gc_ptrs
201b8     FD 22 02 F6 | 	mov	local03, result1
201bc     FE 24 02 F6 | 	mov	local04, result2
201c0                 | LR__3070
201c0     10 1F 52 F2 | 	cmps	local01, local02 wc
201c4     60 00 90 3D |  if_ae	jmp	#LR__3071
201c8     0F 17 02 FB | 	rdlong	arg03, local01
201cc     04 1E 06 F1 | 	add	local01, #4
201d0     12 15 02 F6 | 	mov	arg02, local04
201d4     11 13 02 F6 | 	mov	arg01, local03
201d8     8C FB BF FD | 	call	#__system___gc_isvalidptr
201dc     FD 16 0A F6 | 	mov	arg03, result1 wz
201e0     DC FF 9F AD |  if_e	jmp	#LR__3070
201e4     0B 13 02 F6 | 	mov	arg01, arg03
201e8     00 FA 05 F6 | 	mov	result1, #0
201ec     02 12 06 F1 | 	add	arg01, #2
201f0     09 13 E2 FA | 	rdword	arg01, arg01
201f4     36 00 00 FF 
201f8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
201fc     01 FA 65 A6 |  if_e	neg	result1, #1
20200     00 FA 0D F2 | 	cmp	result1, #0 wz
20204     B8 FF 9F 5D |  if_ne	jmp	#LR__3070
20208     0B FD 01 F6 | 	mov	result2, arg03
2020c     02 FC 05 F1 | 	add	result2, #2
20210     FE FC E1 FA | 	rdword	result2, result2
20214     0F FC 25 F5 | 	andn	result2, #15
20218     2E FC 45 F5 | 	or	result2, #46
2021c     02 16 06 F1 | 	add	arg03, #2
20220     0B FD 51 FC | 	wrword	result2, arg03
20224     98 FF 9F FD | 	jmp	#LR__3070
20228                 | LR__3071
20228     A7 F0 03 F6 | 	mov	ptra, fp
2022c     B2 00 A0 FD | 	call	#popregs_
20230                 | __system___gc_markhub_ret
20230     2D 00 64 FD | 	ret
20234                 | 
20234                 | __system___gc_markcog
20234     04 4A 05 F6 | 	mov	COUNT_, #4
20238     A8 00 A0 FD | 	call	#pushregs_
2023c     F8 F7 BF FD | 	call	#__system___gc_ptrs
20240     FD 1E 02 F6 | 	mov	local01, result1
20244     FE 20 02 F6 | 	mov	local02, result2
20248     EF 23 06 F6 | 	mov	local03, #495
2024c                 | LR__3080
2024c                 | 	'.live	local03
2024c     00 22 96 F9 | 	alts	local03, #0
20250     11 25 02 F6 | 	mov	local04, local03
20254     0F 13 02 F6 | 	mov	arg01, local01
20258     10 15 02 F6 | 	mov	arg02, local02
2025c     12 17 02 F6 | 	mov	arg03, local04
20260     04 FB BF FD | 	call	#__system___gc_isvalidptr
20264     00 FA 0D F2 | 	cmp	result1, #0 wz
20268     18 00 90 AD |  if_e	jmp	#LR__3081
2026c     FD 24 02 F6 | 	mov	local04, result1
20270     02 24 06 F1 | 	add	local04, #2
20274     12 25 E2 FA | 	rdword	local04, local04
20278     20 24 46 F5 | 	or	local04, #32
2027c     02 FA 05 F1 | 	add	result1, #2
20280     FD 24 52 FC | 	wrword	local04, result1
20284                 | LR__3081
20284     01 22 86 F1 | 	sub	local03, #1
20288     00 22 56 F2 | 	cmps	local03, #0 wc
2028c     BC FF 9F 3D |  if_ae	jmp	#LR__3080
20290     A7 F0 03 F6 | 	mov	ptra, fp
20294     B2 00 A0 FD | 	call	#popregs_
20298                 | __system___gc_markcog_ret
20298     2D 00 64 FD | 	ret
2029c                 | 
2029c                 | __system__opendir
2029c     06 4A 05 F6 | 	mov	COUNT_, #6
202a0     A8 00 A0 FD | 	call	#pushregs_
202a4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
202a8     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
202ac     09 15 02 F6 | 	mov	arg02, arg01
202b0     0F 13 02 F6 | 	mov	arg01, local01
202b4     00 16 06 F6 | 	mov	arg03, #0
202b8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
202bc     18 C3 BF FD | 	call	#__system____getvfsforfile
202c0     FD 20 0A F6 | 	mov	local02, result1 wz
202c4     10 00 90 AD |  if_e	jmp	#LR__3090
202c8     28 20 06 F1 | 	add	local02, #40
202cc     10 17 0A FB | 	rdlong	arg03, local02 wz
202d0     28 20 86 F1 | 	sub	local02, #40
202d4     14 00 90 5D |  if_ne	jmp	#LR__3091
202d8                 | LR__3090
202d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
202dc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
202e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
202e4     00 FA 05 F6 | 	mov	result1, #0
202e8     90 00 90 FD | 	jmp	#LR__3093
202ec                 | LR__3091
202ec     5C 12 06 F6 | 	mov	arg01, #92
202f0     10 14 06 F6 | 	mov	arg02, #16
202f4     C0 F9 BF FD | 	call	#__system___gc_doalloc
202f8     FD 22 0A F6 | 	mov	local03, result1 wz
202fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20300     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
20304     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20308     00 FA 05 A6 |  if_e	mov	result1, #0
2030c     6C 00 90 AD |  if_e	jmp	#LR__3093
20310     28 20 06 F1 | 	add	local02, #40
20314     10 25 02 FB | 	rdlong	local04, local02
20318     12 27 02 F6 | 	mov	local05, local04
2031c     28 20 86 F1 | 	sub	local02, #40
20320     13 26 46 F7 | 	zerox	local05, #19
20324     14 24 46 F0 | 	shr	local04, #20
20328     02 24 66 F0 | 	shl	local04, #2
2032c     ED 24 02 F1 | 	add	local04, __methods__
20330     12 25 02 FB | 	rdlong	local04, local04
20334     11 13 02 F6 | 	mov	arg01, local03
20338     0F 15 02 F6 | 	mov	arg02, local01
2033c     F2 28 02 F6 | 	mov	local06, objptr
20340     13 E5 01 F6 | 	mov	objptr, local05
20344     2D 24 62 FD | 	call	local04
20348     14 E5 01 F6 | 	mov	objptr, local06
2034c     FD 16 0A F6 | 	mov	arg03, result1 wz
20350     20 00 90 AD |  if_e	jmp	#LR__3092
20354     00 16 4E F2 | 	cmps	arg03, #0 wz
20358     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2035c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
20360     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20364     11 13 02 F6 | 	mov	arg01, local03
20368     58 FA BF FD | 	call	#__system___gc_free
2036c     00 FA 05 F6 | 	mov	result1, #0
20370     08 00 90 FD | 	jmp	#LR__3093
20374                 | LR__3092
20374     11 21 62 FC | 	wrlong	local02, local03
20378     11 FB 01 F6 | 	mov	result1, local03
2037c                 | LR__3093
2037c     A7 F0 03 F6 | 	mov	ptra, fp
20380     B2 00 A0 FD | 	call	#popregs_
20384                 | __system__opendir_ret
20384     2D 00 64 FD | 	ret
20388                 | 
20388                 | __system__closedir
20388     04 4A 05 F6 | 	mov	COUNT_, #4
2038c     A8 00 A0 FD | 	call	#pushregs_
20390     09 1F 02 F6 | 	mov	local01, arg01
20394     0F 13 02 FB | 	rdlong	arg01, local01
20398     2C 12 06 F1 | 	add	arg01, #44
2039c     09 21 02 FB | 	rdlong	local02, arg01
203a0     10 23 02 F6 | 	mov	local03, local02
203a4     13 22 46 F7 | 	zerox	local03, #19
203a8     14 20 46 F0 | 	shr	local02, #20
203ac     02 20 66 F0 | 	shl	local02, #2
203b0     ED 20 02 F1 | 	add	local02, __methods__
203b4     10 21 02 FB | 	rdlong	local02, local02
203b8     0F 13 02 F6 | 	mov	arg01, local01
203bc     F2 24 02 F6 | 	mov	local04, objptr
203c0     11 E5 01 F6 | 	mov	objptr, local03
203c4     2D 20 62 FD | 	call	local02
203c8     12 E5 01 F6 | 	mov	objptr, local04
203cc     FD 24 02 F6 | 	mov	local04, result1
203d0     0F 13 02 F6 | 	mov	arg01, local01
203d4     EC F9 BF FD | 	call	#__system___gc_free
203d8     00 24 4E F2 | 	cmps	local04, #0 wz
203dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
203e0     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
203e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
203e8     01 FA 65 56 |  if_ne	neg	result1, #1
203ec     00 FA 05 A6 |  if_e	mov	result1, #0
203f0     A7 F0 03 F6 | 	mov	ptra, fp
203f4     B2 00 A0 FD | 	call	#popregs_
203f8                 | __system__closedir_ret
203f8     2D 00 64 FD | 	ret
203fc                 | 
203fc                 | __system__readdir
203fc     04 4A 05 F6 | 	mov	COUNT_, #4
20400     A8 00 A0 FD | 	call	#pushregs_
20404     09 15 0A FB | 	rdlong	arg02, arg01 wz
20408     08 12 06 F1 | 	add	arg01, #8
2040c     09 1F 02 F6 | 	mov	local01, arg01
20410     08 12 86 F1 | 	sub	arg01, #8
20414     00 FA 05 A6 |  if_e	mov	result1, #0
20418     5C 00 90 AD |  if_e	jmp	#LR__3101
2041c     30 14 06 F1 | 	add	arg02, #48
20420     0A 21 02 FB | 	rdlong	local02, arg02
20424     10 23 02 F6 | 	mov	local03, local02
20428     13 22 46 F7 | 	zerox	local03, #19
2042c     14 20 46 F0 | 	shr	local02, #20
20430     02 20 66 F0 | 	shl	local02, #2
20434     ED 20 02 F1 | 	add	local02, __methods__
20438     10 21 02 FB | 	rdlong	local02, local02
2043c     0F 15 02 F6 | 	mov	arg02, local01
20440     F2 24 02 F6 | 	mov	local04, objptr
20444     11 E5 01 F6 | 	mov	objptr, local03
20448     2D 20 62 FD | 	call	local02
2044c     12 E5 01 F6 | 	mov	objptr, local04
20450     00 FA 4D F2 | 	cmps	result1, #0 wz
20454     1C 00 90 AD |  if_e	jmp	#LR__3100
20458     01 FA 55 F2 | 	cmps	result1, #1 wc
2045c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
20460     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
20464     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
20468     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2046c     00 FA 05 F6 | 	mov	result1, #0
20470     04 00 90 FD | 	jmp	#LR__3101
20474                 | LR__3100
20474     0F FB 01 F6 | 	mov	result1, local01
20478                 | LR__3101
20478     A7 F0 03 F6 | 	mov	ptra, fp
2047c     B2 00 A0 FD | 	call	#popregs_
20480                 | __system__readdir_ret
20480     2D 00 64 FD | 	ret
20484                 | 
20484                 | __system___openraw
20484     15 4A 05 F6 | 	mov	COUNT_, #21
20488     A8 00 A0 FD | 	call	#pushregs_
2048c     09 1F 02 F6 | 	mov	local01, arg01
20490     0A 21 02 F6 | 	mov	local02, arg02
20494     0B 23 02 F6 | 	mov	local03, arg03
20498     0C 25 02 F6 | 	mov	local04, arg04
2049c     04 26 06 F6 | 	mov	local05, #4
204a0     0F 29 02 F6 | 	mov	local06, local01
204a4     00 2A 06 F6 | 	mov	local07, #0
204a8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
204ac     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
204b0     16 13 02 F6 | 	mov	arg01, local08
204b4     10 15 02 F6 | 	mov	arg02, local02
204b8     00 16 06 F6 | 	mov	arg03, #0
204bc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
204c0     14 C1 BF FD | 	call	#__system____getvfsforfile
204c4     FD 2E 0A F6 | 	mov	local09, result1 wz
204c8     10 00 90 AD |  if_e	jmp	#LR__3110
204cc     20 2E 06 F1 | 	add	local09, #32
204d0     17 FB 09 FB | 	rdlong	result1, local09 wz
204d4     20 2E 86 F1 | 	sub	local09, #32
204d8     14 00 90 5D |  if_ne	jmp	#LR__3111
204dc                 | LR__3110
204dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
204e0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
204e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
204e8     01 FA 65 F6 | 	neg	result1, #1
204ec     88 02 90 FD | 	jmp	#LR__3124
204f0                 | LR__3111
204f0     14 13 02 F6 | 	mov	arg01, local06
204f4     00 14 06 F6 | 	mov	arg02, #0
204f8     34 16 06 F6 | 	mov	arg03, #52
204fc     09 31 02 F6 | 	mov	local10, arg01
20500     98 00 A0 FD | 	call	#\builtin_bytefill_
20504     20 2E 06 F1 | 	add	local09, #32
20508     17 33 02 FB | 	rdlong	local11, local09
2050c     19 35 02 F6 | 	mov	local12, local11
20510     19 37 02 F6 | 	mov	local13, local11
20514     20 2E 86 F1 | 	sub	local09, #32
20518     1B 39 02 F6 | 	mov	local14, local13
2051c     13 34 46 F7 | 	zerox	local12, #19
20520     14 38 46 F0 | 	shr	local14, #20
20524     02 38 66 F0 | 	shl	local14, #2
20528     ED 38 02 F1 | 	add	local14, __methods__
2052c     1C 39 02 FB | 	rdlong	local14, local14
20530     14 3B 02 F6 | 	mov	local15, local06
20534     16 3D 02 F6 | 	mov	local16, local08
20538     11 3F 02 F6 | 	mov	local17, local03
2053c     1D 13 02 F6 | 	mov	arg01, local15
20540     1E 15 02 F6 | 	mov	arg02, local16
20544     1F 17 02 F6 | 	mov	arg03, local17
20548     F2 40 02 F6 | 	mov	local18, objptr
2054c     1A E5 01 F6 | 	mov	objptr, local12
20550     2D 38 62 FD | 	call	local14
20554     20 E5 01 F6 | 	mov	objptr, local18
20558     FD 42 0A F6 | 	mov	local19, result1 wz
2055c     04 22 CE 57 |  if_ne	test	local03, #4 wz
20560     58 00 90 AD |  if_e	jmp	#LR__3112
20564     24 2E 06 F1 | 	add	local09, #36
20568     17 33 02 FB | 	rdlong	local11, local09
2056c     19 35 02 F6 | 	mov	local12, local11
20570     19 37 02 F6 | 	mov	local13, local11
20574     24 2E 86 F1 | 	sub	local09, #36
20578     1B 39 02 F6 | 	mov	local14, local13
2057c     13 34 46 F7 | 	zerox	local12, #19
20580     14 38 46 F0 | 	shr	local14, #20
20584     02 38 66 F0 | 	shl	local14, #2
20588     ED 38 02 F1 | 	add	local14, __methods__
2058c     1C 39 02 FB | 	rdlong	local14, local14
20590     14 3B 02 F6 | 	mov	local15, local06
20594     16 3D 02 F6 | 	mov	local16, local08
20598     12 3F 02 F6 | 	mov	local17, local04
2059c     1D 13 02 F6 | 	mov	arg01, local15
205a0     1E 15 02 F6 | 	mov	arg02, local16
205a4     1F 17 02 F6 | 	mov	arg03, local17
205a8     F2 40 02 F6 | 	mov	local18, objptr
205ac     1A E5 01 F6 | 	mov	objptr, local12
205b0     2D 38 62 FD | 	call	local14
205b4     20 E5 01 F6 | 	mov	objptr, local18
205b8     FD 42 02 F6 | 	mov	local19, result1
205bc                 | LR__3112
205bc     00 42 0E F2 | 	cmp	local19, #0 wz
205c0     88 01 90 5D |  if_ne	jmp	#LR__3122
205c4     11 45 02 F6 | 	mov	local20, local03
205c8     03 44 0E F5 | 	and	local20, #3 wz
205cc     02 26 46 55 |  if_ne	or	local05, #2
205d0     01 44 0E F2 | 	cmp	local20, #1 wz
205d4     01 26 46 55 |  if_ne	or	local05, #1
205d8     20 22 CE F7 | 	test	local03, #32 wz
205dc     C0 26 46 55 |  if_ne	or	local05, #192
205e0     08 28 06 F1 | 	add	local06, #8
205e4     14 27 62 FC | 	wrlong	local05, local06
205e8     0C 28 06 F1 | 	add	local06, #12
205ec     14 47 0A FB | 	rdlong	local21, local06 wz
205f0     14 28 86 F1 | 	sub	local06, #20
205f4     18 00 90 5D |  if_ne	jmp	#LR__3113
205f8     04 2E 06 F1 | 	add	local09, #4
205fc     17 47 02 FB | 	rdlong	local21, local09
20600     04 2E 86 F1 | 	sub	local09, #4
20604     14 28 06 F1 | 	add	local06, #20
20608     14 47 62 FC | 	wrlong	local21, local06
2060c     14 28 86 F1 | 	sub	local06, #20
20610                 | LR__3113
20610     18 28 06 F1 | 	add	local06, #24
20614     14 47 0A FB | 	rdlong	local21, local06 wz
20618     18 28 86 F1 | 	sub	local06, #24
2061c     18 00 90 5D |  if_ne	jmp	#LR__3114
20620     08 2E 06 F1 | 	add	local09, #8
20624     17 47 02 FB | 	rdlong	local21, local09
20628     08 2E 86 F1 | 	sub	local09, #8
2062c     18 28 06 F1 | 	add	local06, #24
20630     14 47 62 FC | 	wrlong	local21, local06
20634     18 28 86 F1 | 	sub	local06, #24
20638                 | LR__3114
20638     24 28 06 F1 | 	add	local06, #36
2063c     14 47 0A FB | 	rdlong	local21, local06 wz
20640     24 28 86 F1 | 	sub	local06, #36
20644     17 47 02 AB |  if_e	rdlong	local21, local09
20648     24 28 06 A1 |  if_e	add	local06, #36
2064c     14 47 62 AC |  if_e	wrlong	local21, local06
20650     24 28 86 A1 |  if_e	sub	local06, #36
20654     28 28 06 F1 | 	add	local06, #40
20658     14 47 0A FB | 	rdlong	local21, local06 wz
2065c     28 28 86 F1 | 	sub	local06, #40
20660     18 00 90 5D |  if_ne	jmp	#LR__3115
20664     10 2E 06 F1 | 	add	local09, #16
20668     17 47 02 FB | 	rdlong	local21, local09
2066c     10 2E 86 F1 | 	sub	local09, #16
20670     28 28 06 F1 | 	add	local06, #40
20674     14 47 62 FC | 	wrlong	local21, local06
20678     28 28 86 F1 | 	sub	local06, #40
2067c                 | LR__3115
2067c     30 28 06 F1 | 	add	local06, #48
20680     14 47 0A FB | 	rdlong	local21, local06 wz
20684     30 28 86 F1 | 	sub	local06, #48
20688     18 00 90 5D |  if_ne	jmp	#LR__3116
2068c     0C 2E 06 F1 | 	add	local09, #12
20690     17 47 02 FB | 	rdlong	local21, local09
20694     0C 2E 86 F1 | 	sub	local09, #12
20698     30 28 06 F1 | 	add	local06, #48
2069c     14 47 62 FC | 	wrlong	local21, local06
206a0     30 28 86 F1 | 	sub	local06, #48
206a4                 | LR__3116
206a4     1C 28 06 F1 | 	add	local06, #28
206a8     14 47 0A FB | 	rdlong	local21, local06 wz
206ac     1C 28 86 F1 | 	sub	local06, #28
206b0     18 00 90 5D |  if_ne	jmp	#LR__3117
206b4     01 2A 06 F6 | 	mov	local07, #1
206b8     F2 12 02 F6 | 	mov	arg01, objptr
206bc     1B 12 26 F4 | 	bith	arg01, #27
206c0     1C 28 06 F1 | 	add	local06, #28
206c4     14 13 62 FC | 	wrlong	arg01, local06
206c8     1C 28 86 F1 | 	sub	local06, #28
206cc                 | LR__3117
206cc     20 28 06 F1 | 	add	local06, #32
206d0     14 47 0A FB | 	rdlong	local21, local06 wz
206d4     20 28 86 F1 | 	sub	local06, #32
206d8     1C 00 90 5D |  if_ne	jmp	#LR__3118
206dc     01 2A 06 F6 | 	mov	local07, #1
206e0     F2 12 02 F6 | 	mov	arg01, objptr
206e4     00 08 04 FF 
206e8     00 12 46 F5 | 	or	arg01, ##135266304
206ec     20 28 06 F1 | 	add	local06, #32
206f0     14 13 62 FC | 	wrlong	arg01, local06
206f4     20 28 86 F1 | 	sub	local06, #32
206f8                 | LR__3118
206f8     2C 28 06 F1 | 	add	local06, #44
206fc     14 47 0A FB | 	rdlong	local21, local06 wz
20700     2C 28 86 F1 | 	sub	local06, #44
20704     44 00 90 5D |  if_ne	jmp	#LR__3121
20708     14 2E 06 F1 | 	add	local09, #20
2070c     17 47 0A FB | 	rdlong	local21, local09 wz
20710     14 2E 86 F1 | 	sub	local09, #20
20714     18 00 90 AD |  if_e	jmp	#LR__3119
20718     14 2E 06 F1 | 	add	local09, #20
2071c     17 47 02 FB | 	rdlong	local21, local09
20720     2C 28 06 F1 | 	add	local06, #44
20724     14 47 62 FC | 	wrlong	local21, local06
20728     2C 28 86 F1 | 	sub	local06, #44
2072c     1C 00 90 FD | 	jmp	#LR__3120
20730                 | LR__3119
20730     01 2A 06 F6 | 	mov	local07, #1
20734     F2 12 02 F6 | 	mov	arg01, objptr
20738     00 10 04 FF 
2073c     00 12 46 F5 | 	or	arg01, ##136314880
20740     2C 28 06 F1 | 	add	local06, #44
20744     14 13 62 FC | 	wrlong	arg01, local06
20748     2C 28 86 F1 | 	sub	local06, #44
2074c                 | LR__3120
2074c                 | LR__3121
2074c                 | LR__3122
2074c     00 2A 0E F2 | 	cmp	local07, #0 wz
20750     14 13 02 56 |  if_ne	mov	arg01, local06
20754     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
20758     00 42 0E F2 | 	cmp	local19, #0 wz
2075c     00 12 06 A6 |  if_e	mov	arg01, #0
20760     10 00 90 5D |  if_ne	jmp	#LR__3123
20764     00 12 4E F2 | 	cmps	arg01, #0 wz
20768     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2076c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20770     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20774                 | LR__3123
20774     21 FB 01 F6 | 	mov	result1, local19
20778                 | LR__3124
20778     A7 F0 03 F6 | 	mov	ptra, fp
2077c     B2 00 A0 FD | 	call	#popregs_
20780                 | __system___openraw_ret
20780     2D 00 64 FD | 	ret
20784                 | 
20784                 | __system___closeraw
20784     05 4A 05 F6 | 	mov	COUNT_, #5
20788     A8 00 A0 FD | 	call	#pushregs_
2078c     09 1F 02 F6 | 	mov	local01, arg01
20790     00 20 06 F6 | 	mov	local02, #0
20794     08 1E 06 F1 | 	add	local01, #8
20798     0F FB 09 FB | 	rdlong	result1, local01 wz
2079c     08 1E 86 F1 | 	sub	local01, #8
207a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
207a4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
207a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
207ac     01 FA 65 A6 |  if_e	neg	result1, #1
207b0     A8 00 90 AD |  if_e	jmp	#LR__3132
207b4     2C 1E 06 F1 | 	add	local01, #44
207b8     0F FB 09 FB | 	rdlong	result1, local01 wz
207bc     2C 1E 86 F1 | 	sub	local01, #44
207c0     38 00 90 AD |  if_e	jmp	#LR__3130
207c4     2C 1E 06 F1 | 	add	local01, #44
207c8     0F 23 02 FB | 	rdlong	local03, local01
207cc     11 25 02 F6 | 	mov	local04, local03
207d0     2C 1E 86 F1 | 	sub	local01, #44
207d4     13 24 46 F7 | 	zerox	local04, #19
207d8     14 22 46 F0 | 	shr	local03, #20
207dc     02 22 66 F0 | 	shl	local03, #2
207e0     ED 22 02 F1 | 	add	local03, __methods__
207e4     11 23 02 FB | 	rdlong	local03, local03
207e8     0F 13 02 F6 | 	mov	arg01, local01
207ec     F2 26 02 F6 | 	mov	local05, objptr
207f0     12 E5 01 F6 | 	mov	objptr, local04
207f4     2D 22 62 FD | 	call	local03
207f8     13 E5 01 F6 | 	mov	objptr, local05
207fc                 | LR__3130
207fc     24 1E 06 F1 | 	add	local01, #36
20800     0F 27 0A FB | 	rdlong	local05, local01 wz
20804     24 1E 86 F1 | 	sub	local01, #36
20808     3C 00 90 AD |  if_e	jmp	#LR__3131
2080c     24 1E 06 F1 | 	add	local01, #36
20810     0F 23 02 FB | 	rdlong	local03, local01
20814     11 25 02 F6 | 	mov	local04, local03
20818     24 1E 86 F1 | 	sub	local01, #36
2081c     13 24 46 F7 | 	zerox	local04, #19
20820     14 22 46 F0 | 	shr	local03, #20
20824     02 22 66 F0 | 	shl	local03, #2
20828     ED 22 02 F1 | 	add	local03, __methods__
2082c     11 23 02 FB | 	rdlong	local03, local03
20830     0F 13 02 F6 | 	mov	arg01, local01
20834     F2 26 02 F6 | 	mov	local05, objptr
20838     12 E5 01 F6 | 	mov	objptr, local04
2083c     2D 22 62 FD | 	call	local03
20840     13 E5 01 F6 | 	mov	objptr, local05
20844     FD 20 02 F6 | 	mov	local02, result1
20848                 | LR__3131
20848     0F 13 02 F6 | 	mov	arg01, local01
2084c     00 14 06 F6 | 	mov	arg02, #0
20850     34 16 06 F6 | 	mov	arg03, #52
20854     98 00 A0 FD | 	call	#\builtin_bytefill_
20858     10 FB 01 F6 | 	mov	result1, local02
2085c                 | LR__3132
2085c     A7 F0 03 F6 | 	mov	ptra, fp
20860     B2 00 A0 FD | 	call	#popregs_
20864                 | __system___closeraw_ret
20864     2D 00 64 FD | 	ret
20868                 | 
20868                 | __system___vfs_open_sdcardx
20868     0B 4A 05 F6 | 	mov	COUNT_, #11
2086c     A8 00 A0 FD | 	call	#pushregs_
20870     09 23 02 F6 | 	mov	local03, arg01
20874     0A 25 02 F6 | 	mov	local04, arg02
20878     0B 27 02 F6 | 	mov	local05, arg03
2087c     0C 29 02 F6 | 	mov	local06, arg04
20880     01 00 00 FF 
20884     24 12 06 F6 | 	mov	arg01, ##548
20888     FC F3 BF FD | 	call	#__system___gc_alloc_managed
2088c     FD 2A 02 F6 | 	mov	local07, result1
20890     01 00 00 FF 
20894     34 12 06 F6 | 	mov	arg01, ##564
20898     EC F3 BF FD | 	call	#__system___gc_alloc_managed
2089c     FD 2C 02 F6 | 	mov	local08, result1
208a0     11 19 02 F6 | 	mov	arg04, local03
208a4     1F 18 C6 F0 | 	sar	arg04, #31
208a8     11 17 02 F6 | 	mov	arg03, local03
208ac     01 12 06 F6 | 	mov	arg01, #1
208b0     00 14 06 F6 | 	mov	arg02, #0
208b4     4C DC BF FD | 	call	#__system___int64_shl
208b8     FD 1E 02 F6 | 	mov	local01, result1
208bc     FE 2E 02 F6 | 	mov	local09, result2
208c0     12 19 02 F6 | 	mov	arg04, local04
208c4     1F 18 C6 F0 | 	sar	arg04, #31
208c8     12 17 02 F6 | 	mov	arg03, local04
208cc     01 12 06 F6 | 	mov	arg01, #1
208d0     00 14 06 F6 | 	mov	arg02, #0
208d4     2C DC BF FD | 	call	#__system___int64_shl
208d8     FD 1E 42 F5 | 	or	local01, result1
208dc     FE 2E 42 F5 | 	or	local09, result2
208e0     13 19 02 F6 | 	mov	arg04, local05
208e4     1F 18 C6 F0 | 	sar	arg04, #31
208e8     13 17 02 F6 | 	mov	arg03, local05
208ec     01 12 06 F6 | 	mov	arg01, #1
208f0     00 14 06 F6 | 	mov	arg02, #0
208f4     0C DC BF FD | 	call	#__system___int64_shl
208f8     FD 1E 42 F5 | 	or	local01, result1
208fc     FE 2E 42 F5 | 	or	local09, result2
20900     14 19 02 F6 | 	mov	arg04, local06
20904     1F 18 C6 F0 | 	sar	arg04, #31
20908     14 17 02 F6 | 	mov	arg03, local06
2090c     01 12 06 F6 | 	mov	arg01, #1
20910     00 14 06 F6 | 	mov	arg02, #0
20914     EC DB BF FD | 	call	#__system___int64_shl
20918     17 15 02 F6 | 	mov	arg02, local09
2091c     FD 1E 42 F5 | 	or	local01, result1
20920     0A FD 41 F5 | 	or	result2, arg02
20924     FE 20 02 F6 | 	mov	local02, result2
20928     0F 13 02 F6 | 	mov	arg01, local01
2092c     10 15 02 F6 | 	mov	arg02, local02
20930     08 DC BF FD | 	call	#__system___usepins
20934     00 FA 0D F2 | 	cmp	result1, #0 wz
20938     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2093c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
20940     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20944     00 FA 05 A6 |  if_e	mov	result1, #0
20948     B4 00 90 AD |  if_e	jmp	#LR__3142
2094c     0F 31 02 F6 | 	mov	local10, local01
20950     10 2F 02 F6 | 	mov	local09, local02
20954     01 00 00 FF 
20958     08 2A 06 F1 | 	add	local07, ##520
2095c     15 31 62 FC | 	wrlong	local10, local07
20960     04 2A 06 F1 | 	add	local07, #4
20964     15 2F 62 FC | 	wrlong	local09, local07
20968     01 00 00 FF 
2096c     0C 2A 86 F1 | 	sub	local07, ##524
20970     14 1B 02 F6 | 	mov	arg05, local06
20974     00 12 06 F6 | 	mov	arg01, #0
20978     11 15 02 F6 | 	mov	arg02, local03
2097c     12 17 02 F6 | 	mov	arg03, local04
20980     13 19 02 F6 | 	mov	arg04, local05
20984     F2 30 02 F6 | 	mov	local10, objptr
20988     15 E5 01 F6 | 	mov	objptr, local07
2098c     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
20990     18 E5 01 F6 | 	mov	objptr, local10
20994     FD 32 0A F6 | 	mov	local11, result1 wz
20998     24 00 90 5D |  if_ne	jmp	#LR__3140
2099c     5A 01 00 FF 
209a0     56 14 06 F6 | 	mov	arg02, ##@LR__4537
209a4     16 13 02 F6 | 	mov	arg01, local08
209a8     00 16 06 F6 | 	mov	arg03, #0
209ac     F2 32 02 F6 | 	mov	local11, objptr
209b0     15 E5 01 F6 | 	mov	objptr, local07
209b4     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
209b8     19 E5 01 F6 | 	mov	objptr, local11
209bc     FD 32 02 F6 | 	mov	local11, result1
209c0                 | LR__3140
209c0     00 32 0E F2 | 	cmp	local11, #0 wz
209c4     24 00 90 AD |  if_e	jmp	#LR__3141
209c8     0F 13 02 F6 | 	mov	arg01, local01
209cc     10 15 02 F6 | 	mov	arg02, local02
209d0     BC DB BF FD | 	call	#__system___freepins
209d4     19 13 6A F6 | 	neg	arg01, local11 wz
209d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
209dc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
209e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
209e4     00 FA 05 F6 | 	mov	result1, #0
209e8     14 00 90 FD | 	jmp	#LR__3142
209ec                 | LR__3141
209ec     15 13 02 F6 | 	mov	arg01, local07
209f0     F2 32 02 F6 | 	mov	local11, objptr
209f4     15 E5 01 F6 | 	mov	objptr, local07
209f8     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
209fc     19 E5 01 F6 | 	mov	objptr, local11
20a00                 | LR__3142
20a00     A7 F0 03 F6 | 	mov	ptra, fp
20a04     B2 00 A0 FD | 	call	#popregs_
20a08                 | __system___vfs_open_sdcardx_ret
20a08     2D 00 64 FD | 	ret
20a0c                 | 
20a0c                 | __system____default_getc
20a0c     03 4A 05 F6 | 	mov	COUNT_, #3
20a10     A8 00 A0 FD | 	call	#pushregs_
20a14     09 1F 02 F6 | 	mov	local01, arg01
20a18     0F 21 02 FB | 	rdlong	local02, local01
20a1c     08 20 06 F1 | 	add	local02, #8
20a20     10 23 02 FB | 	rdlong	local03, local02
20a24     02 22 CE F7 | 	test	local03, #2 wz
20a28     0F 13 02 56 |  if_ne	mov	arg01, local01
20a2c     00 01 B0 5D |  if_ne	call	#__system____default_flush
20a30     10 23 02 FB | 	rdlong	local03, local02
20a34     01 22 46 F5 | 	or	local03, #1
20a38     10 23 62 FC | 	wrlong	local03, local02
20a3c     08 20 86 F1 | 	sub	local02, #8
20a40     10 23 0A FB | 	rdlong	local03, local02 wz
20a44     0C 00 90 5D |  if_ne	jmp	#LR__3150
20a48     0F 13 02 F6 | 	mov	arg01, local01
20a4c     64 16 B0 FD | 	call	#__system____default_filbuf
20a50     FD 22 02 F6 | 	mov	local03, result1
20a54                 | LR__3150
20a54     01 22 56 F2 | 	cmps	local03, #1 wc
20a58     01 FA 65 C6 |  if_b	neg	result1, #1
20a5c     1C 00 90 CD |  if_b	jmp	#LR__3151
20a60     01 22 86 F1 | 	sub	local03, #1
20a64     10 23 62 FC | 	wrlong	local03, local02
20a68     04 20 06 F1 | 	add	local02, #4
20a6c     10 23 02 FB | 	rdlong	local03, local02
20a70     11 FB C1 FA | 	rdbyte	result1, local03
20a74     01 22 06 F1 | 	add	local03, #1
20a78     10 23 62 FC | 	wrlong	local03, local02
20a7c                 | LR__3151
20a7c     A7 F0 03 F6 | 	mov	ptra, fp
20a80     B2 00 A0 FD | 	call	#popregs_
20a84                 | __system____default_getc_ret
20a84     2D 00 64 FD | 	ret
20a88                 | 
20a88                 | __system____default_putc
20a88     06 4A 05 F6 | 	mov	COUNT_, #6
20a8c     A8 00 A0 FD | 	call	#pushregs_
20a90     09 1F 02 F6 | 	mov	local01, arg01
20a94     0A 21 02 F6 | 	mov	local02, arg02
20a98     10 23 02 FB | 	rdlong	local03, local02
20a9c     08 22 06 F1 | 	add	local03, #8
20aa0     11 FB 01 FB | 	rdlong	result1, local03
20aa4     01 FA CD F7 | 	test	result1, #1 wz
20aa8     10 13 02 56 |  if_ne	mov	arg01, local02
20aac     80 00 B0 5D |  if_ne	call	#__system____default_flush
20ab0     11 25 02 FB | 	rdlong	local04, local03
20ab4     02 24 46 F5 | 	or	local04, #2
20ab8     11 25 62 FC | 	wrlong	local04, local03
20abc     08 22 86 F1 | 	sub	local03, #8
20ac0     11 27 02 FB | 	rdlong	local05, local03
20ac4     10 22 06 F1 | 	add	local03, #16
20ac8     11 15 02 FB | 	rdlong	arg02, local03
20acc     10 22 86 F1 | 	sub	local03, #16
20ad0     13 FB 01 F6 | 	mov	result1, local05
20ad4     0A FB 01 F1 | 	add	result1, arg02
20ad8     FD 1E 42 FC | 	wrbyte	local01, result1
20adc     0F 1F E2 F8 | 	getbyte	local01, local01, #0
20ae0     01 26 06 F1 | 	add	local05, #1
20ae4     11 27 62 FC | 	wrlong	local05, local03
20ae8     06 20 06 F1 | 	add	local02, #6
20aec     10 29 EA FA | 	rdword	local06, local02 wz
20af0     06 20 86 F1 | 	sub	local02, #6
20af4     0C 22 06 51 |  if_ne	add	local03, #12
20af8     11 25 02 5B |  if_ne	rdlong	local04, local03
20afc     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
20b00     0C 00 90 AD |  if_e	jmp	#LR__3160
20b04     0A 1E 0E F2 | 	cmp	local01, #10 wz
20b08     01 28 0E A2 |  if_e	cmp	local06, #1 wz
20b0c     10 00 90 5D |  if_ne	jmp	#LR__3161
20b10                 | LR__3160
20b10     10 13 02 F6 | 	mov	arg01, local02
20b14     18 00 B0 FD | 	call	#__system____default_flush
20b18     00 FA 0D F2 | 	cmp	result1, #0 wz
20b1c     01 1E 66 56 |  if_ne	neg	local01, #1
20b20                 | LR__3161
20b20     0F FB 01 F6 | 	mov	result1, local01
20b24     A7 F0 03 F6 | 	mov	ptra, fp
20b28     B2 00 A0 FD | 	call	#popregs_
20b2c                 | __system____default_putc_ret
20b2c     2D 00 64 FD | 	ret
20b30                 | 
20b30                 | __system____default_flush
20b30     06 4A 05 F6 | 	mov	COUNT_, #6
20b34     A8 00 A0 FD | 	call	#pushregs_
20b38     09 1F 02 F6 | 	mov	local01, arg01
20b3c     0F 21 02 FB | 	rdlong	local02, local01
20b40     10 23 02 FB | 	rdlong	local03, local02
20b44     08 20 06 F1 | 	add	local02, #8
20b48     10 FB 01 FB | 	rdlong	result1, local02
20b4c     08 20 86 F1 | 	sub	local02, #8
20b50     02 FA CD F7 | 	test	result1, #2 wz
20b54     D0 00 90 AD |  if_e	jmp	#LR__3172
20b58     01 22 56 F2 | 	cmps	local03, #1 wc
20b5c     20 01 90 CD |  if_b	jmp	#LR__3174
20b60     08 1E 06 F1 | 	add	local01, #8
20b64     0F FB 01 FB | 	rdlong	result1, local01
20b68     08 1E 86 F1 | 	sub	local01, #8
20b6c     40 FA CD F7 | 	test	result1, #64 wz
20b70     68 00 90 AD |  if_e	jmp	#LR__3171
20b74     08 1E 06 F1 | 	add	local01, #8
20b78     0F 17 02 FB | 	rdlong	arg03, local01
20b7c     08 1E 86 F1 | 	sub	local01, #8
20b80     80 16 CE F7 | 	test	arg03, #128 wz
20b84     54 00 90 AD |  if_e	jmp	#LR__3170
20b88     30 1E 06 F1 | 	add	local01, #48
20b8c     0F 25 02 FB | 	rdlong	local04, local01
20b90     12 27 02 F6 | 	mov	local05, local04
20b94     30 1E 86 F1 | 	sub	local01, #48
20b98     13 26 46 F7 | 	zerox	local05, #19
20b9c     14 24 46 F0 | 	shr	local04, #20
20ba0     02 24 66 F0 | 	shl	local04, #2
20ba4     ED 24 02 F1 | 	add	local04, __methods__
20ba8     12 25 02 FB | 	rdlong	local04, local04
20bac     0F 13 02 F6 | 	mov	arg01, local01
20bb0     00 14 06 F6 | 	mov	arg02, #0
20bb4     02 16 06 F6 | 	mov	arg03, #2
20bb8     F2 28 02 F6 | 	mov	local06, objptr
20bbc     13 E5 01 F6 | 	mov	objptr, local05
20bc0     2D 24 62 FD | 	call	local04
20bc4     14 E5 01 F6 | 	mov	objptr, local06
20bc8     08 1E 06 F1 | 	add	local01, #8
20bcc     0F 29 02 FB | 	rdlong	local06, local01
20bd0     80 28 26 F5 | 	andn	local06, #128
20bd4     0F 29 62 FC | 	wrlong	local06, local01
20bd8     08 1E 86 F1 | 	sub	local01, #8
20bdc                 | LR__3170
20bdc                 | LR__3171
20bdc     18 1E 06 F1 | 	add	local01, #24
20be0     0F 25 02 FB | 	rdlong	local04, local01
20be4     12 27 02 F6 | 	mov	local05, local04
20be8     18 1E 86 F1 | 	sub	local01, #24
20bec     13 26 46 F7 | 	zerox	local05, #19
20bf0     14 24 46 F0 | 	shr	local04, #20
20bf4     02 24 66 F0 | 	shl	local04, #2
20bf8     ED 24 02 F1 | 	add	local04, __methods__
20bfc     12 25 02 FB | 	rdlong	local04, local04
20c00     10 20 06 F1 | 	add	local02, #16
20c04     10 15 02 FB | 	rdlong	arg02, local02
20c08     10 20 86 F1 | 	sub	local02, #16
20c0c     0F 13 02 F6 | 	mov	arg01, local01
20c10     11 17 02 F6 | 	mov	arg03, local03
20c14     F2 28 02 F6 | 	mov	local06, objptr
20c18     13 E5 01 F6 | 	mov	objptr, local05
20c1c     2D 24 62 FD | 	call	local04
20c20     14 E5 01 F6 | 	mov	objptr, local06
20c24     58 00 90 FD | 	jmp	#LR__3174
20c28                 | LR__3172
20c28     08 20 06 F1 | 	add	local02, #8
20c2c     10 29 02 FB | 	rdlong	local06, local02
20c30     08 20 86 F1 | 	sub	local02, #8
20c34     01 28 CE F7 | 	test	local06, #1 wz
20c38     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
20c3c     40 00 90 AD |  if_e	jmp	#LR__3173
20c40     30 1E 06 F1 | 	add	local01, #48
20c44     0F 25 02 FB | 	rdlong	local04, local01
20c48     12 27 02 F6 | 	mov	local05, local04
20c4c     30 1E 86 F1 | 	sub	local01, #48
20c50     13 26 46 F7 | 	zerox	local05, #19
20c54     14 24 46 F0 | 	shr	local04, #20
20c58     02 24 66 F0 | 	shl	local04, #2
20c5c     ED 24 02 F1 | 	add	local04, __methods__
20c60     12 25 02 FB | 	rdlong	local04, local04
20c64     0F 13 02 F6 | 	mov	arg01, local01
20c68     11 15 62 F6 | 	neg	arg02, local03
20c6c     01 16 06 F6 | 	mov	arg03, #1
20c70     F2 28 02 F6 | 	mov	local06, objptr
20c74     13 E5 01 F6 | 	mov	objptr, local05
20c78     2D 24 62 FD | 	call	local04
20c7c     14 E5 01 F6 | 	mov	objptr, local06
20c80                 | LR__3173
20c80                 | LR__3174
20c80     10 01 68 FC | 	wrlong	#0, local02
20c84     04 20 06 F1 | 	add	local02, #4
20c88     10 01 68 FC | 	wrlong	#0, local02
20c8c     04 20 06 F1 | 	add	local02, #4
20c90     10 01 68 FC | 	wrlong	#0, local02
20c94     00 FA 05 F6 | 	mov	result1, #0
20c98     A7 F0 03 F6 | 	mov	ptra, fp
20c9c     B2 00 A0 FD | 	call	#popregs_
20ca0                 | __system____default_flush_ret
20ca0     2D 00 64 FD | 	ret
20ca4                 | 
20ca4                 | __system____default_buffer_init
20ca4     02 4A 05 F6 | 	mov	COUNT_, #2
20ca8     A8 00 A0 FD | 	call	#pushregs_
20cac     09 1F 02 F6 | 	mov	local01, arg01
20cb0     0F 21 02 FB | 	rdlong	local02, local01
20cb4     0F 13 02 F6 | 	mov	arg01, local01
20cb8     F8 02 B0 FD | 	call	#__system___isatty
20cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
20cc0     06 1E 06 51 |  if_ne	add	local01, #6
20cc4     0F 0B 58 5C |  if_ne	wrword	#5, local01
20cc8     06 1E 06 A1 |  if_e	add	local01, #6
20ccc     0F 0D 58 AC |  if_e	wrword	#6, local01
20cd0     14 20 06 F1 | 	add	local02, #20
20cd4     10 1F 02 F6 | 	mov	local01, local02
20cd8     04 20 86 F1 | 	sub	local02, #4
20cdc     10 1F 62 FC | 	wrlong	local01, local02
20ce0     04 20 86 F1 | 	sub	local02, #4
20ce4     02 00 80 FF 
20ce8     10 01 68 FC | 	wrlong	##1024, local02
20cec     00 FA 05 F6 | 	mov	result1, #0
20cf0     A7 F0 03 F6 | 	mov	ptra, fp
20cf4     B2 00 A0 FD | 	call	#popregs_
20cf8                 | __system____default_buffer_init_ret
20cf8     2D 00 64 FD | 	ret
20cfc                 | 
20cfc                 | __system__stat
20cfc     04 4A 05 F6 | 	mov	COUNT_, #4
20d00     A8 00 A0 FD | 	call	#pushregs_
20d04     0A 1F 02 F6 | 	mov	local01, arg02
20d08     84 E7 05 F1 | 	add	ptr___system__dat__, #388
20d0c     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
20d10     09 15 02 F6 | 	mov	arg02, arg01
20d14     10 13 02 F6 | 	mov	arg01, local02
20d18     00 16 06 F6 | 	mov	arg03, #0
20d1c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
20d20     B4 B8 BF FD | 	call	#__system____getvfsforfile
20d24     FD 22 0A F6 | 	mov	local03, result1 wz
20d28     10 00 90 AD |  if_e	jmp	#LR__3180
20d2c     34 22 06 F1 | 	add	local03, #52
20d30     11 17 0A FB | 	rdlong	arg03, local03 wz
20d34     34 22 86 F1 | 	sub	local03, #52
20d38     14 00 90 5D |  if_ne	jmp	#LR__3181
20d3c                 | LR__3180
20d3c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20d40     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
20d44     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20d48     01 FA 65 F6 | 	neg	result1, #1
20d4c     68 00 90 FD | 	jmp	#LR__3182
20d50                 | LR__3181
20d50     0F 13 02 F6 | 	mov	arg01, local01
20d54     00 14 06 F6 | 	mov	arg02, #0
20d58     30 16 06 F6 | 	mov	arg03, #48
20d5c     09 25 02 F6 | 	mov	local04, arg01
20d60     98 00 A0 FD | 	call	#\builtin_bytefill_
20d64     12 FB 01 F6 | 	mov	result1, local04
20d68     10 13 CA FA | 	rdbyte	arg01, local02 wz
20d6c     08 1E 06 A1 |  if_e	add	local01, #8
20d70     08 00 80 AF 
20d74     0F FF 6B AC |  if_e	wrlong	##4607, local01
20d78     00 FA 05 A6 |  if_e	mov	result1, #0
20d7c     38 00 90 AD |  if_e	jmp	#LR__3182
20d80     34 22 06 F1 | 	add	local03, #52
20d84     11 23 02 FB | 	rdlong	local03, local03
20d88     11 25 02 F6 | 	mov	local04, local03
20d8c     13 22 46 F7 | 	zerox	local03, #19
20d90     14 24 46 F0 | 	shr	local04, #20
20d94     02 24 66 F0 | 	shl	local04, #2
20d98     ED 24 02 F1 | 	add	local04, __methods__
20d9c     12 25 02 FB | 	rdlong	local04, local04
20da0     10 13 02 F6 | 	mov	arg01, local02
20da4     0F 15 02 F6 | 	mov	arg02, local01
20da8     F2 20 02 F6 | 	mov	local02, objptr
20dac     11 E5 01 F6 | 	mov	objptr, local03
20db0     2D 24 62 FD | 	call	local04
20db4     10 E5 01 F6 | 	mov	objptr, local02
20db8                 | LR__3182
20db8     A7 F0 03 F6 | 	mov	ptra, fp
20dbc     B2 00 A0 FD | 	call	#popregs_
20dc0                 | __system__stat_ret
20dc0     2D 00 64 FD | 	ret
20dc4                 | 
20dc4                 | __system__read
20dc4     0A 12 16 F2 | 	cmp	arg01, #10 wc
20dc8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
20dcc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
20dd0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
20dd4     01 FA 65 36 |  if_ae	neg	result1, #1
20dd8     20 00 90 3D |  if_ae	jmp	#LR__3190
20ddc     34 12 06 FD | 	qmul	arg01, #52
20de0     02 00 00 FF 
20de4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
20de8     18 12 62 FD | 	getqx	arg01
20dec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20df0     02 00 00 FF 
20df4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
20df8     D0 0F B0 FD | 	call	#__system___vfsread
20dfc                 | LR__3190
20dfc                 | __system__read_ret
20dfc     2D 00 64 FD | 	ret
20e00                 | 
20e00                 | __system__close
20e00     0A 12 16 F2 | 	cmp	arg01, #10 wc
20e04     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
20e08     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
20e0c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
20e10     01 FA 65 36 |  if_ae	neg	result1, #1
20e14     20 00 90 3D |  if_ae	jmp	#LR__3200
20e18     34 12 06 FD | 	qmul	arg01, #52
20e1c     02 00 00 FF 
20e20     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
20e24     18 12 62 FD | 	getqx	arg01
20e28     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
20e2c     02 00 00 FF 
20e30     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
20e34     4C F9 BF FD | 	call	#__system___closeraw
20e38                 | LR__3200
20e38                 | __system__close_ret
20e38     2D 00 64 FD | 	ret
20e3c                 | 
20e3c                 | __system__lseek
20e3c     06 4A 05 F6 | 	mov	COUNT_, #6
20e40     A8 00 A0 FD | 	call	#pushregs_
20e44     0A 12 16 F2 | 	cmp	arg01, #10 wc
20e48     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
20e4c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
20e50     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
20e54     01 FA 65 36 |  if_ae	neg	result1, #1
20e58     C4 00 90 3D |  if_ae	jmp	#LR__3211
20e5c     34 12 06 FD | 	qmul	arg01, #52
20e60     02 00 00 FF 
20e64     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
20e68     18 1E 62 FD | 	getqx	local01
20e6c     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
20e70     30 1E 06 F1 | 	add	local01, #48
20e74     0F 13 0A FB | 	rdlong	arg01, local01 wz
20e78     30 1E 86 F1 | 	sub	local01, #48
20e7c     02 00 00 FF 
20e80     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
20e84     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20e88     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
20e8c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20e90     01 FA 65 A6 |  if_e	neg	result1, #1
20e94     88 00 90 AD |  if_e	jmp	#LR__3211
20e98     08 1E 06 F1 | 	add	local01, #8
20e9c     0F 21 02 FB | 	rdlong	local02, local01
20ea0     08 1E 86 F1 | 	sub	local01, #8
20ea4     40 20 CE F7 | 	test	local02, #64 wz
20ea8     08 1E 06 51 |  if_ne	add	local01, #8
20eac     0F 21 02 5B |  if_ne	rdlong	local02, local01
20eb0     80 20 46 55 |  if_ne	or	local02, #128
20eb4     0F 21 62 5C |  if_ne	wrlong	local02, local01
20eb8     08 1E 86 51 |  if_ne	sub	local01, #8
20ebc     30 1E 06 F1 | 	add	local01, #48
20ec0     0F 23 02 FB | 	rdlong	local03, local01
20ec4     11 25 02 F6 | 	mov	local04, local03
20ec8     30 1E 86 F1 | 	sub	local01, #48
20ecc     13 24 46 F7 | 	zerox	local04, #19
20ed0     14 22 46 F0 | 	shr	local03, #20
20ed4     02 22 66 F0 | 	shl	local03, #2
20ed8     ED 22 02 F1 | 	add	local03, __methods__
20edc     11 23 02 FB | 	rdlong	local03, local03
20ee0     0F 13 02 F6 | 	mov	arg01, local01
20ee4     F2 26 02 F6 | 	mov	local05, objptr
20ee8     12 E5 01 F6 | 	mov	objptr, local04
20eec     2D 22 62 FD | 	call	local03
20ef0     13 E5 01 F6 | 	mov	objptr, local05
20ef4     FD 28 02 F6 | 	mov	local06, result1
20ef8     00 28 56 F2 | 	cmps	local06, #0 wc
20efc     1C 00 90 3D |  if_ae	jmp	#LR__3210
20f00     14 13 6A F6 | 	neg	arg01, local06 wz
20f04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20f08     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20f0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20f10     01 FA 65 56 |  if_ne	neg	result1, #1
20f14     00 FA 05 A6 |  if_e	mov	result1, #0
20f18     04 00 90 FD | 	jmp	#LR__3211
20f1c                 | LR__3210
20f1c     14 FB 01 F6 | 	mov	result1, local06
20f20                 | LR__3211
20f20     A7 F0 03 F6 | 	mov	ptra, fp
20f24     B2 00 A0 FD | 	call	#popregs_
20f28                 | __system__lseek_ret
20f28     2D 00 64 FD | 	ret
20f2c                 | 
20f2c                 | __system___ioctl
20f2c     03 4A 05 F6 | 	mov	COUNT_, #3
20f30     A8 00 A0 FD | 	call	#pushregs_
20f34     00 12 4E F2 | 	cmps	arg01, #0 wz
20f38     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
20f3c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
20f40     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
20f44     01 FA 65 A6 |  if_e	neg	result1, #1
20f48     5C 00 90 AD |  if_e	jmp	#LR__3221
20f4c     28 12 06 F1 | 	add	arg01, #40
20f50     09 1F 02 FB | 	rdlong	local01, arg01
20f54     0F 21 02 F6 | 	mov	local02, local01
20f58     28 12 86 F1 | 	sub	arg01, #40
20f5c     13 20 46 F7 | 	zerox	local02, #19
20f60     14 1E 46 F0 | 	shr	local01, #20
20f64     02 1E 66 F0 | 	shl	local01, #2
20f68     ED 1E 02 F1 | 	add	local01, __methods__
20f6c     0F 1F 02 FB | 	rdlong	local01, local01
20f70     F2 22 02 F6 | 	mov	local03, objptr
20f74     10 E5 01 F6 | 	mov	objptr, local02
20f78     2D 1E 62 FD | 	call	local01
20f7c     11 E5 01 F6 | 	mov	objptr, local03
20f80     FD 12 0A F6 | 	mov	arg01, result1 wz
20f84     1C 00 90 AD |  if_e	jmp	#LR__3220
20f88     00 12 4E F2 | 	cmps	arg01, #0 wz
20f8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
20f90     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
20f94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
20f98     01 FA 65 56 |  if_ne	neg	result1, #1
20f9c     00 FA 05 A6 |  if_e	mov	result1, #0
20fa0     04 00 90 FD | 	jmp	#LR__3221
20fa4                 | LR__3220
20fa4     00 FA 05 F6 | 	mov	result1, #0
20fa8                 | LR__3221
20fa8     A7 F0 03 F6 | 	mov	ptra, fp
20fac     B2 00 A0 FD | 	call	#popregs_
20fb0                 | __system___ioctl_ret
20fb0     2D 00 64 FD | 	ret
20fb4                 | 
20fb4                 | __system___isatty
20fb4     00 4A 05 F6 | 	mov	COUNT_, #0
20fb8     A8 00 A0 FD | 	call	#pushregs_
20fbc     0C F0 07 F1 | 	add	ptra, #12
20fc0     04 4E 05 F1 | 	add	fp, #4
20fc4     A7 12 62 FC | 	wrlong	arg01, fp
20fc8     04 4E 05 F1 | 	add	fp, #4
20fcc     A7 16 02 F6 | 	mov	arg03, fp
20fd0     08 4E 85 F1 | 	sub	fp, #8
20fd4     00 15 06 F6 | 	mov	arg02, #256
20fd8     50 FF BF FD | 	call	#__system___ioctl
20fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
20fe0     01 FA 05 A6 |  if_e	mov	result1, #1
20fe4     00 FA 05 56 |  if_ne	mov	result1, #0
20fe8     A7 F0 03 F6 | 	mov	ptra, fp
20fec     B2 00 A0 FD | 	call	#popregs_
20ff0                 | __system___isatty_ret
20ff0     2D 00 64 FD | 	ret
20ff4                 | 
20ff4                 | __system____getftab
20ff4     0A 12 16 F2 | 	cmp	arg01, #10 wc
20ff8     34 12 06 CD |  if_b	qmul	arg01, #52
20ffc     00 FA 05 36 |  if_ae	mov	result1, #0
21000     02 00 00 CF 
21004     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
21008     18 FA 61 CD |  if_b	getqx	result1
2100c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
21010     02 00 00 CF 
21014     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
21018                 | __system____getftab_ret
21018     2D 00 64 FD | 	ret
2101c                 | 
2101c                 | __system__strncpy
2101c     09 01 02 F6 | 	mov	_var01, arg01
21020                 | LR__3230
21020     01 16 86 F1 | 	sub	arg03, #1
21024     00 16 56 F2 | 	cmps	arg03, #0 wc
21028     18 00 90 CD |  if_b	jmp	#LR__3231
2102c     0A FB C1 FA | 	rdbyte	result1, arg02
21030     00 FB 41 FC | 	wrbyte	result1, _var01
21034     01 14 06 F1 | 	add	arg02, #1
21038     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2103c     01 00 06 F1 | 	add	_var01, #1
21040     DC FF 9F 5D |  if_ne	jmp	#LR__3230
21044                 | LR__3231
21044     97 0C 48 FB | 	callpa	#(@LR__3233-@LR__3232)>>2,fcache_load_ptr_
21048                 | LR__3232
21048     01 16 86 F1 | 	sub	arg03, #1
2104c     00 16 56 F2 | 	cmps	arg03, #0 wc
21050     00 03 02 36 |  if_ae	mov	_var02, _var01
21054     01 00 06 31 |  if_ae	add	_var01, #1
21058     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2105c     E8 FF 9F 3D |  if_ae	jmp	#LR__3232
21060                 | LR__3233
21060     09 FB 01 F6 | 	mov	result1, arg01
21064                 | __system__strncpy_ret
21064     2D 00 64 FD | 	ret
21068                 | 
21068                 | __system__strncat
21068     00 14 4E F2 | 	cmps	arg02, #0 wz
2106c     50 00 90 AD |  if_e	jmp	#LR__3244
21070     01 16 16 F2 | 	cmp	arg03, #1 wc
21074     48 00 90 CD |  if_b	jmp	#LR__3244
21078     09 01 02 F6 | 	mov	_var01, arg01
2107c     97 1E 48 FB | 	callpa	#(@LR__3242-@LR__3240)>>2,fcache_load_ptr_
21080                 | LR__3240
21080     00 FB C9 FA | 	rdbyte	result1, _var01 wz
21084     01 00 06 51 |  if_ne	add	_var01, #1
21088     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
2108c     0B 03 02 F6 | 	mov	_var02, arg03
21090                 | LR__3241
21090     0A 05 C2 FA | 	rdbyte	_var03, arg02
21094     02 07 02 F6 | 	mov	_var04, _var03
21098     07 06 4E F7 | 	zerox	_var04, #7 wz
2109c     01 14 06 F1 | 	add	arg02, #1
210a0     18 00 90 AD |  if_e	jmp	#LR__3243
210a4     01 02 86 F1 | 	sub	_var02, #1
210a8     00 02 56 F2 | 	cmps	_var02, #0 wc
210ac     00 07 02 36 |  if_ae	mov	_var04, _var01
210b0     01 00 06 31 |  if_ae	add	_var01, #1
210b4     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
210b8     D4 FF 9F 3D |  if_ae	jmp	#LR__3241
210bc                 | LR__3242
210bc                 | LR__3243
210bc     00 01 48 FC | 	wrbyte	#0, _var01
210c0                 | LR__3244
210c0     09 FB 01 F6 | 	mov	result1, arg01
210c4                 | __system__strncat_ret
210c4     2D 00 64 FD | 	ret
210c8                 | 
210c8                 | __system__strncmp
210c8     09 01 0A F6 | 	mov	_var01, arg01 wz
210cc     14 00 90 5D |  if_ne	jmp	#LR__3250
210d0     00 14 0E F2 | 	cmp	arg02, #0 wz
210d4     01 02 66 56 |  if_ne	neg	_var02, #1
210d8     00 02 06 A6 |  if_e	mov	_var02, #0
210dc     01 FB 01 F6 | 	mov	result1, _var02
210e0     74 00 90 FD | 	jmp	#__system__strncmp_ret
210e4                 | LR__3250
210e4     00 14 0E F2 | 	cmp	arg02, #0 wz
210e8     01 FA 05 A6 |  if_e	mov	result1, #1
210ec     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
210f0     0B 05 02 F6 | 	mov	_var03, arg03
210f4     97 16 48 FB | 	callpa	#(@LR__3252-@LR__3251)>>2,fcache_load_ptr_
210f8                 | LR__3251
210f8     00 07 C2 FA | 	rdbyte	_var04, _var01
210fc     0A 09 02 F6 | 	mov	_var05, arg02
21100     04 0B C2 FA | 	rdbyte	_var06, _var05
21104     01 04 86 F1 | 	sub	_var03, #1
21108     00 04 56 F2 | 	cmps	_var03, #0 wc
2110c     01 00 06 F1 | 	add	_var01, #1
21110     01 14 06 F1 | 	add	arg02, #1
21114     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
21118     08 00 90 2D |  if_nc_and_z	jmp	#LR__3253
2111c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
21120     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3251
21124                 | LR__3252
21124                 | LR__3253
21124     00 04 56 F2 | 	cmps	_var03, #0 wc
21128     00 FA 05 C6 |  if_b	mov	result1, #0
2112c     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
21130     05 07 0A F2 | 	cmp	_var04, _var06 wz
21134     00 FA 05 A6 |  if_e	mov	result1, #0
21138     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2113c     00 06 0E F2 | 	cmp	_var04, #0 wz
21140     01 FA 65 A6 |  if_e	neg	result1, #1
21144     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
21148     00 0A 0E F2 | 	cmp	_var06, #0 wz
2114c     01 FA 05 A6 |  if_e	mov	result1, #1
21150     03 FB 01 56 |  if_ne	mov	result1, _var04
21154     05 FB 81 51 |  if_ne	sub	result1, _var06
21158                 | __system__strncmp_ret
21158     2D 00 64 FD | 	ret
2115c                 | 
2115c                 | __system____root_opendir
2115c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21160     04 12 06 F1 | 	add	arg01, #4
21164     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
21168     00 FA 05 F6 | 	mov	result1, #0
2116c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21170                 | __system____root_opendir_ret
21170     2D 00 64 FD | 	ret
21174                 | 
21174                 | __system____root_readdir
21174     03 4A 05 F6 | 	mov	COUNT_, #3
21178     A8 00 A0 FD | 	call	#pushregs_
2117c     09 1F 02 F6 | 	mov	local01, arg01
21180     0A 21 02 F6 | 	mov	local02, arg02
21184     04 1E 06 F1 | 	add	local01, #4
21188     0F 23 02 FB | 	rdlong	local03, local01
2118c     04 1E 86 F1 | 	sub	local01, #4
21190                 | LR__3260
21190     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21194     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
21198     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2119c     01 FA 65 A6 |  if_e	neg	result1, #1
211a0     48 00 90 AD |  if_e	jmp	#LR__3261
211a4     11 17 0A FB | 	rdlong	arg03, local03 wz
211a8     04 22 06 A1 |  if_e	add	local03, #4
211ac     E0 FF 9F AD |  if_e	jmp	#LR__3260
211b0     11 15 02 FB | 	rdlong	arg02, local03
211b4     01 14 06 F1 | 	add	arg02, #1
211b8     10 13 02 F6 | 	mov	arg01, local02
211bc     40 16 06 F6 | 	mov	arg03, #64
211c0     58 FE BF FD | 	call	#__system__strncpy
211c4     50 20 06 F1 | 	add	local02, #80
211c8     10 03 48 FC | 	wrbyte	#1, local02
211cc     08 20 86 F1 | 	sub	local02, #8
211d0     10 01 68 FC | 	wrlong	#0, local02
211d4     04 20 06 F1 | 	add	local02, #4
211d8     10 01 68 FC | 	wrlong	#0, local02
211dc     04 22 06 F1 | 	add	local03, #4
211e0     04 1E 06 F1 | 	add	local01, #4
211e4     0F 23 62 FC | 	wrlong	local03, local01
211e8     00 FA 05 F6 | 	mov	result1, #0
211ec                 | LR__3261
211ec     A7 F0 03 F6 | 	mov	ptra, fp
211f0     B2 00 A0 FD | 	call	#popregs_
211f4                 | __system____root_readdir_ret
211f4     2D 00 64 FD | 	ret
211f8                 | 
211f8                 | __system____root_closedir
211f8     00 FA 05 F6 | 	mov	result1, #0
211fc                 | __system____root_closedir_ret
211fc     2D 00 64 FD | 	ret
21200                 | 
21200                 | __system____root_stat
21200     0A 01 02 F6 | 	mov	_var01, arg02
21204     00 13 02 F6 | 	mov	arg01, _var01
21208     00 14 06 F6 | 	mov	arg02, #0
2120c     30 16 06 F6 | 	mov	arg03, #48
21210     98 00 A0 FD | 	call	#\builtin_bytefill_
21214     08 00 06 F1 | 	add	_var01, #8
21218     08 00 80 FF 
2121c     00 FF 6B FC | 	wrlong	##4607, _var01
21220     00 FA 05 F6 | 	mov	result1, #0
21224                 | __system____root_stat_ret
21224     2D 00 64 FD | 	ret
21228                 | 
21228                 | __system___normalizeName
21228     00 00 06 F6 | 	mov	_var01, #0
2122c     09 03 02 F6 | 	mov	_var02, arg01
21230     01 05 02 F6 | 	mov	_var03, _var02
21234                 | LR__3270
21234     01 07 CA FA | 	rdbyte	_var04, _var02 wz
21238     5C 01 90 AD |  if_e	jmp	#LR__3289
2123c     00 00 0E F2 | 	cmp	_var01, #0 wz
21240     02 07 02 56 |  if_ne	mov	_var04, _var03
21244     01 04 06 51 |  if_ne	add	_var03, #1
21248     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2124c     00 00 06 56 |  if_ne	mov	_var01, #0
21250     01 07 C2 FA | 	rdbyte	_var04, _var02
21254     2E 06 0E F2 | 	cmp	_var04, #46 wz
21258     D8 00 90 5D |  if_ne	jmp	#LR__3282
2125c     01 02 06 F1 | 	add	_var02, #1
21260     01 07 C2 FA | 	rdbyte	_var04, _var02
21264     01 02 86 F1 | 	sub	_var02, #1
21268     2F 06 0E F2 | 	cmp	_var04, #47 wz
2126c     18 00 90 AD |  if_e	jmp	#LR__3271
21270     01 02 06 F1 | 	add	_var02, #1
21274     01 09 C2 FA | 	rdbyte	_var05, _var02
21278     01 02 86 F1 | 	sub	_var02, #1
2127c     04 0B 02 F6 | 	mov	_var06, _var05
21280     07 0A 4E F7 | 	zerox	_var06, #7 wz
21284     10 00 90 5D |  if_ne	jmp	#LR__3272
21288                 | LR__3271
21288     01 0D 02 F6 | 	mov	_var07, _var02
2128c     01 0C 06 F1 | 	add	_var07, #1
21290     06 03 02 F6 | 	mov	_var02, _var07
21294     E0 00 90 FD | 	jmp	#LR__3286
21298                 | LR__3272
21298     01 02 06 F1 | 	add	_var02, #1
2129c     01 0D C2 FA | 	rdbyte	_var07, _var02
212a0     01 02 86 F1 | 	sub	_var02, #1
212a4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
212a8     2E 06 0E F2 | 	cmp	_var04, #46 wz
212ac     84 00 90 5D |  if_ne	jmp	#LR__3281
212b0     02 02 06 F1 | 	add	_var02, #2
212b4     01 0D C2 FA | 	rdbyte	_var07, _var02
212b8     02 02 86 F1 | 	sub	_var02, #2
212bc     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
212c0     2F 06 0E F2 | 	cmp	_var04, #47 wz
212c4     18 00 90 AD |  if_e	jmp	#LR__3273
212c8     02 02 06 F1 | 	add	_var02, #2
212cc     01 09 C2 FA | 	rdbyte	_var05, _var02
212d0     02 02 86 F1 | 	sub	_var02, #2
212d4     04 0B 02 F6 | 	mov	_var06, _var05
212d8     07 0A 4E F7 | 	zerox	_var06, #7 wz
212dc     54 00 90 5D |  if_ne	jmp	#LR__3280
212e0                 | LR__3273
212e0     02 02 06 F1 | 	add	_var02, #2
212e4     09 05 5A F2 | 	cmps	_var03, arg01 wcz
212e8     40 00 90 ED |  if_be	jmp	#LR__3279
212ec     02 0F 02 F6 | 	mov	_var08, _var03
212f0     01 0E 86 F1 | 	sub	_var08, #1
212f4                 | LR__3274
212f4     07 07 C2 FA | 	rdbyte	_var04, _var08
212f8     2F 06 0E F2 | 	cmp	_var04, #47 wz
212fc     0C 00 90 5D |  if_ne	jmp	#LR__3275
21300     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
21304     01 0E 86 11 |  if_a	sub	_var08, #1
21308     E8 FF 9F 1D |  if_a	jmp	#LR__3274
2130c                 | LR__3275
2130c     97 0C 48 FB | 	callpa	#(@LR__3277-@LR__3276)>>2,fcache_load_ptr_
21310                 | LR__3276
21310     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
21314     10 00 90 ED |  if_be	jmp	#LR__3278
21318     07 07 C2 FA | 	rdbyte	_var04, _var08
2131c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21320     01 0E 86 51 |  if_ne	sub	_var08, #1
21324     E8 FF 9F 5D |  if_ne	jmp	#LR__3276
21328                 | LR__3277
21328                 | LR__3278
21328     07 05 02 F6 | 	mov	_var03, _var08
2132c                 | LR__3279
2132c     01 00 06 F6 | 	mov	_var01, #1
21330     44 00 90 FD | 	jmp	#LR__3286
21334                 | LR__3280
21334                 | LR__3281
21334                 | LR__3282
21334     97 18 48 FB | 	callpa	#(@LR__3284-@LR__3283)>>2,fcache_load_ptr_
21338                 | LR__3283
21338     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2133c     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
21340     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
21344     20 00 90 AD |  if_e	jmp	#LR__3285
21348     01 0B 02 F6 | 	mov	_var06, _var02
2134c     01 09 02 F6 | 	mov	_var05, _var02
21350     01 08 06 F1 | 	add	_var05, #1
21354     05 11 C2 FA | 	rdbyte	_var09, _var06
21358     04 03 02 F6 | 	mov	_var02, _var05
2135c     02 11 42 FC | 	wrbyte	_var09, _var03
21360     01 04 06 F1 | 	add	_var03, #1
21364     D0 FF 9F FD | 	jmp	#LR__3283
21368                 | LR__3284
21368                 | LR__3285
21368     01 07 C2 FA | 	rdbyte	_var04, _var02
2136c     2F 06 0E F2 | 	cmp	_var04, #47 wz
21370     C0 FE 9F 5D |  if_ne	jmp	#LR__3270
21374     01 00 06 F6 | 	mov	_var01, #1
21378                 | LR__3286
21378     97 0C 48 FB | 	callpa	#(@LR__3288-@LR__3287)>>2,fcache_load_ptr_
2137c                 | LR__3287
2137c     01 07 C2 FA | 	rdbyte	_var04, _var02
21380     2F 06 0E F2 | 	cmp	_var04, #47 wz
21384     01 0D 02 A6 |  if_e	mov	_var07, _var02
21388     01 0C 06 A1 |  if_e	add	_var07, #1
2138c     06 03 02 A6 |  if_e	mov	_var02, _var07
21390     E8 FF 9F AD |  if_e	jmp	#LR__3287
21394                 | LR__3288
21394     9C FE 9F FD | 	jmp	#LR__3270
21398                 | LR__3289
21398     02 01 48 FC | 	wrbyte	#0, _var03
2139c                 | __system___normalizeName_ret
2139c     2D 00 64 FD | 	ret
213a0                 | 
213a0                 | __system___strrev
213a0     09 01 CA FA | 	rdbyte	_var01, arg01 wz
213a4     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
213a8     09 03 02 F6 | 	mov	_var02, arg01
213ac     97 1A 48 FB | 	callpa	#(@LR__3292-@LR__3290)>>2,fcache_load_ptr_
213b0                 | LR__3290
213b0     01 01 CA FA | 	rdbyte	_var01, _var02 wz
213b4     01 02 06 51 |  if_ne	add	_var02, #1
213b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3290
213bc     01 02 86 F1 | 	sub	_var02, #1
213c0                 | LR__3291
213c0     09 03 5A F2 | 	cmps	_var02, arg01 wcz
213c4     1C 00 90 ED |  if_be	jmp	#LR__3293
213c8     09 01 C2 FA | 	rdbyte	_var01, arg01
213cc     01 05 C2 FA | 	rdbyte	_var03, _var02
213d0     09 05 42 FC | 	wrbyte	_var03, arg01
213d4     01 01 42 FC | 	wrbyte	_var01, _var02
213d8     01 12 06 F1 | 	add	arg01, #1
213dc     01 02 86 F1 | 	sub	_var02, #1
213e0     DC FF 9F FD | 	jmp	#LR__3291
213e4                 | LR__3292
213e4                 | LR__3293
213e4                 | __system___strrev_ret
213e4     2D 00 64 FD | 	ret
213e8                 | 
213e8                 | __system___fmtpad
213e8     06 4A 05 F6 | 	mov	COUNT_, #6
213ec     A8 00 A0 FD | 	call	#pushregs_
213f0     09 1F 02 F6 | 	mov	local01, arg01
213f4     0A 21 02 F6 | 	mov	local02, arg02
213f8     0B 23 02 F6 | 	mov	local03, arg03
213fc     10 13 EA F8 | 	getbyte	arg01, local02, #1
21400     16 20 46 F0 | 	shr	local02, #22
21404     03 20 0E F5 | 	and	local02, #3 wz
21408     00 24 06 F6 | 	mov	local04, #0
2140c     01 20 06 A6 |  if_e	mov	local02, #1
21410     0C 21 CA F7 | 	test	local02, arg04 wz
21414     00 FA 05 A6 |  if_e	mov	result1, #0
21418     88 00 90 AD |  if_e	jmp	#LR__3303
2141c     09 23 C2 F2 | 	subr	local03, arg01
21420     01 22 56 F2 | 	cmps	local03, #1 wc
21424     00 FA 05 C6 |  if_b	mov	result1, #0
21428     78 00 90 CD |  if_b	jmp	#LR__3303
2142c     03 20 0E F2 | 	cmp	local02, #3 wz
21430     18 00 90 5D |  if_ne	jmp	#LR__3300
21434     01 18 0E F2 | 	cmp	arg04, #1 wz
21438     6E 20 62 FD | 	wrz	local02
2143c     10 23 02 F1 | 	add	local03, local02
21440     11 23 52 F6 | 	abs	local03, local03 wc
21444     01 22 46 F0 | 	shr	local03, #1
21448     11 23 82 F6 | 	negc	local03, local03
2144c                 | LR__3300
2144c     01 22 56 F2 | 	cmps	local03, #1 wc
21450     4C 00 90 CD |  if_b	jmp	#LR__3302
21454     11 27 02 F6 | 	mov	local05, local03
21458                 | LR__3301
21458     0F 21 02 F6 | 	mov	local02, local01
2145c     0F 29 02 F6 | 	mov	local06, local01
21460     13 20 46 F7 | 	zerox	local02, #19
21464     14 28 46 F0 | 	shr	local06, #20
21468     02 28 66 F0 | 	shl	local06, #2
2146c     ED 28 02 F1 | 	add	local06, __methods__
21470     14 29 02 FB | 	rdlong	local06, local06
21474     20 12 06 F6 | 	mov	arg01, #32
21478     F2 22 02 F6 | 	mov	local03, objptr
2147c     10 E5 01 F6 | 	mov	objptr, local02
21480     2D 28 62 FD | 	call	local06
21484     11 E5 01 F6 | 	mov	objptr, local03
21488     FD 28 02 F6 | 	mov	local06, result1
2148c     00 28 56 F2 | 	cmps	local06, #0 wc
21490     14 FB 01 C6 |  if_b	mov	result1, local06
21494     0C 00 90 CD |  if_b	jmp	#LR__3303
21498     14 25 02 F1 | 	add	local04, local06
2149c     EE 27 6E FB | 	djnz	local05, #LR__3301
214a0                 | LR__3302
214a0     12 FB 01 F6 | 	mov	result1, local04
214a4                 | LR__3303
214a4     A7 F0 03 F6 | 	mov	ptra, fp
214a8     B2 00 A0 FD | 	call	#popregs_
214ac                 | __system___fmtpad_ret
214ac     2D 00 64 FD | 	ret
214b0                 | 
214b0                 | __system___uitoa
214b0     04 4A 05 F6 | 	mov	COUNT_, #4
214b4     A8 00 A0 FD | 	call	#pushregs_
214b8     09 1F 02 F6 | 	mov	local01, arg01
214bc     00 1A 4E F2 | 	cmps	arg05, #0 wz
214c0     0F 1B 02 F6 | 	mov	arg05, local01
214c4     00 20 06 F6 | 	mov	local02, #0
214c8     37 22 06 56 |  if_ne	mov	local03, #55
214cc     57 22 06 A6 |  if_e	mov	local03, #87
214d0                 | LR__3310
214d0     0B 15 12 FD | 	qdiv	arg02, arg03
214d4     19 24 62 FD | 	getqy	local04
214d8     0B 15 12 FD | 	qdiv	arg02, arg03
214dc     0A 24 16 F2 | 	cmp	local04, #10 wc
214e0     30 24 06 C1 |  if_b	add	local04, #48
214e4     11 25 02 31 |  if_ae	add	local04, local03
214e8     0D 25 42 FC | 	wrbyte	local04, arg05
214ec     01 1A 06 F1 | 	add	arg05, #1
214f0     01 20 06 F1 | 	add	local02, #1
214f4     18 14 62 FD | 	getqx	arg02
214f8     00 14 0E F2 | 	cmp	arg02, #0 wz
214fc     D0 FF 9F 5D |  if_ne	jmp	#LR__3310
21500     0C 21 12 F2 | 	cmp	local02, arg04 wc
21504     C8 FF 9F CD |  if_b	jmp	#LR__3310
21508     0D 01 48 FC | 	wrbyte	#0, arg05
2150c     0F 13 02 F6 | 	mov	arg01, local01
21510     8C FE BF FD | 	call	#__system___strrev
21514     10 FB 01 F6 | 	mov	result1, local02
21518     A7 F0 03 F6 | 	mov	ptra, fp
2151c     B2 00 A0 FD | 	call	#popregs_
21520                 | __system___uitoa_ret
21520     2D 00 64 FD | 	ret
21524                 | 
21524                 | __system__disassemble_0430
21524     10 4A 05 F6 | 	mov	COUNT_, #16
21528     A8 00 A0 FD | 	call	#pushregs_
2152c     09 1F 02 F6 | 	mov	local01, arg01
21530     0A 21 02 F6 | 	mov	local02, arg02
21534     0B 23 02 F6 | 	mov	local03, arg03
21538     0C 25 02 F6 | 	mov	local04, arg04
2153c     0D 27 02 F6 | 	mov	local05, arg05
21540     13 13 52 F6 | 	abs	arg01, local05 wc
21544     1F 28 C6 C9 |  if_b	decod	local06, #31
21548     00 28 06 36 |  if_ae	mov	local06, #0
2154c     68 D0 BF FD | 	call	#__system___float_fromuns
21550     14 FB 61 F5 | 	xor	result1, local06
21554     FD 2A 02 F6 | 	mov	local07, result1
21558     00 2C 06 F6 | 	mov	local08, #0
2155c     0F 13 02 F6 | 	mov	arg01, local01
21560     00 14 06 F6 | 	mov	arg02, #0
21564     01 16 06 F6 | 	mov	arg03, #1
21568     84 D8 BF FD | 	call	#__system___float_cmp
2156c     00 FA 0D F2 | 	cmp	result1, #0 wz
21570     00 2E 06 A6 |  if_e	mov	local09, #0
21574     10 01 68 AC |  if_e	wrlong	#0, local02
21578     11 2F 62 AC |  if_e	wrlong	local09, local03
2157c     8C 01 90 AD |  if_e	jmp	#LR__3332
21580     0F 13 02 F6 | 	mov	arg01, local01
21584     34 DD BF FD | 	call	#__system____builtin_ilogb
21588     FD 30 02 F6 | 	mov	local10, result1
2158c     0A 26 0E F2 | 	cmp	local05, #10 wz
21590     24 00 90 5D |  if_ne	jmp	#LR__3320
21594     18 2F 02 F6 | 	mov	local09, local10
21598     01 2E 66 F0 | 	shl	local09, #1
2159c     18 2F 02 F1 | 	add	local09, local10
215a0     17 31 52 F6 | 	abs	local10, local09 wc
215a4     0A 30 16 FD | 	qdiv	local10, #10
215a8     09 32 06 F6 | 	mov	local11, #9
215ac     18 30 62 FD | 	getqx	local10
215b0     18 31 82 F6 | 	negc	local10, local10
215b4     04 00 90 FD | 	jmp	#LR__3321
215b8                 | LR__3320
215b8     18 32 06 F6 | 	mov	local11, #24
215bc                 | LR__3321
215bc                 | LR__3322
215bc     08 2C 56 F2 | 	cmps	local08, #8 wc
215c0     01 2C 06 F1 | 	add	local08, #1
215c4     60 00 90 3D |  if_ae	jmp	#LR__3323
215c8     00 C0 1F FF 
215cc     00 12 06 F6 | 	mov	arg01, ##1065353216
215d0     15 15 02 F6 | 	mov	arg02, local07
215d4     18 17 02 F6 | 	mov	arg03, local10
215d8     8C E3 BF FD | 	call	#__system___float_pow_n
215dc     FD 14 02 F6 | 	mov	arg02, result1
215e0     0F 13 02 F6 | 	mov	arg01, local01
215e4     D8 D5 BF FD | 	call	#__system___float_div
215e8     FD 34 02 F6 | 	mov	local12, result1
215ec     1A 13 02 F6 | 	mov	arg01, local12
215f0     00 C0 1F FF 
215f4     00 14 06 F6 | 	mov	arg02, ##1065353216
215f8     01 16 06 F6 | 	mov	arg03, #1
215fc     F0 D7 BF FD | 	call	#__system___float_cmp
21600     00 FA 55 F2 | 	cmps	result1, #0 wc
21604     01 30 86 C1 |  if_b	sub	local10, #1
21608     B0 FF 9F CD |  if_b	jmp	#LR__3322
2160c     15 15 02 F6 | 	mov	arg02, local07
21610     1A 13 02 F6 | 	mov	arg01, local12
21614     01 16 66 F6 | 	neg	arg03, #1
21618     D4 D7 BF FD | 	call	#__system___float_cmp
2161c     00 FA 55 F2 | 	cmps	result1, #0 wc
21620     01 30 06 31 |  if_ae	add	local10, #1
21624     94 FF 9F 3D |  if_ae	jmp	#LR__3322
21628                 | LR__3323
21628     1A 13 02 F6 | 	mov	arg01, local12
2162c     8C DC BF FD | 	call	#__system____builtin_ilogb
21630     FD 36 02 F6 | 	mov	local13, result1
21634     1A 39 02 F6 | 	mov	local14, local12
21638     17 39 06 F4 | 	bitl	local14, #279
2163c     17 38 26 F4 | 	bith	local14, #23
21640     1B 39 62 F0 | 	shl	local14, local13
21644     02 26 0E F2 | 	cmp	local05, #2 wz
21648     02 24 66 A0 |  if_e	shl	local04, #2
2164c     00 3A 06 F6 | 	mov	local15, #0
21650     00 24 56 F2 | 	cmps	local04, #0 wc
21654     10 00 90 3D |  if_ae	jmp	#LR__3324
21658     18 25 C2 F2 | 	subr	local04, local10
2165c     00 24 56 F2 | 	cmps	local04, #0 wc
21660     A0 00 90 CD |  if_b	jmp	#LR__3331
21664     04 00 90 FD | 	jmp	#LR__3325
21668                 | LR__3324
21668     01 24 06 F1 | 	add	local04, #1
2166c                 | LR__3325
2166c     19 25 7A F3 | 	fles	local04, local11 wcz
21670     01 3C 06 F6 | 	mov	local16, #1
21674     97 22 48 FB | 	callpa	#(@LR__3327-@LR__3326)>>2,fcache_load_ptr_
21678                 | LR__3326
21678     00 40 00 FF 
2167c     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
21680     38 00 90 3D |  if_ae	jmp	#LR__3328
21684     01 24 56 F2 | 	cmps	local04, #1 wc
21688     01 24 86 F1 | 	sub	local04, #1
2168c     2C 00 90 CD |  if_b	jmp	#LR__3328
21690     13 3B 02 FD | 	qmul	local15, local05
21694     1C 37 02 F6 | 	mov	local13, local14
21698     17 36 46 F0 | 	shr	local13, #23
2169c     17 39 06 F4 | 	bitl	local14, #279
216a0     18 3A 62 FD | 	getqx	local15
216a4     13 3D 02 FD | 	qmul	local16, local05
216a8     18 3C 62 FD | 	getqx	local16
216ac     13 39 02 FD | 	qmul	local14, local05
216b0     1B 3B 02 F1 | 	add	local15, local13
216b4     18 38 62 FD | 	getqx	local14
216b8     BC FF 9F FD | 	jmp	#LR__3326
216bc                 | LR__3327
216bc                 | LR__3328
216bc     13 2F 02 F6 | 	mov	local09, local05
216c0     17 2E 66 F0 | 	shl	local09, #23
216c4     17 37 52 F6 | 	abs	local13, local09 wc
216c8     01 36 46 F0 | 	shr	local13, #1
216cc     1B 37 82 F6 | 	negc	local13, local13
216d0     1B 39 1A F2 | 	cmp	local14, local13 wcz
216d4     20 00 90 1D |  if_a	jmp	#LR__3329
216d8     17 26 66 F0 | 	shl	local05, #23
216dc     13 37 52 F6 | 	abs	local13, local05 wc
216e0     01 36 46 F0 | 	shr	local13, #1
216e4     1B 37 82 F6 | 	negc	local13, local13
216e8     1B 39 0A F2 | 	cmp	local14, local13 wz
216ec     14 00 90 5D |  if_ne	jmp	#LR__3330
216f0     01 3A CE F7 | 	test	local15, #1 wz
216f4     0C 00 90 AD |  if_e	jmp	#LR__3330
216f8                 | LR__3329
216f8     01 3A 06 F1 | 	add	local15, #1
216fc     1E 3B 0A F2 | 	cmp	local15, local16 wz
21700     01 30 06 A1 |  if_e	add	local10, #1
21704                 | LR__3330
21704                 | LR__3331
21704     10 3B 62 FC | 	wrlong	local15, local02
21708     11 31 62 FC | 	wrlong	local10, local03
2170c                 | LR__3332
2170c     A7 F0 03 F6 | 	mov	ptra, fp
21710     B2 00 A0 FD | 	call	#popregs_
21714                 | __system__disassemble_0430_ret
21714     2D 00 64 FD | 	ret
21718                 | 
21718                 | __system__emitsign_0432
21718     00 FA 05 F6 | 	mov	result1, #0
2171c     00 14 0E F2 | 	cmp	arg02, #0 wz
21720     09 01 02 56 |  if_ne	mov	_var01, arg01
21724     01 12 06 51 |  if_ne	add	arg01, #1
21728     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2172c     01 FA 05 56 |  if_ne	mov	result1, #1
21730     00 16 0E F2 | 	cmp	arg03, #0 wz
21734     09 61 48 5C |  if_ne	wrbyte	#48, arg01
21738     01 12 06 51 |  if_ne	add	arg01, #1
2173c     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
21740     02 FA 05 51 |  if_ne	add	result1, #2
21744                 | __system__emitsign_0432_ret
21744     2D 00 64 FD | 	ret
21748                 | 
21748                 | __system___gettxfunc
21748     01 4A 05 F6 | 	mov	COUNT_, #1
2174c     A8 00 A0 FD | 	call	#pushregs_
21750     A0 F8 BF FD | 	call	#__system____getftab
21754     FD 1E 0A F6 | 	mov	local01, result1 wz
21758     10 00 90 AD |  if_e	jmp	#LR__3340
2175c     08 1E 06 F1 | 	add	local01, #8
21760     0F 15 0A FB | 	rdlong	arg02, local01 wz
21764     08 1E 86 F1 | 	sub	local01, #8
21768     08 00 90 5D |  if_ne	jmp	#LR__3341
2176c                 | LR__3340
2176c     00 FA 05 F6 | 	mov	result1, #0
21770     0C 00 90 FD | 	jmp	#LR__3342
21774                 | LR__3341
21774     00 C8 03 FF 
21778     00 1E 46 F5 | 	or	local01, ##126877696
2177c     0F FB 01 F6 | 	mov	result1, local01
21780                 | LR__3342
21780     A7 F0 03 F6 | 	mov	ptra, fp
21784     B2 00 A0 FD | 	call	#popregs_
21788                 | __system___gettxfunc_ret
21788     2D 00 64 FD | 	ret
2178c                 | 
2178c                 | __system___getrxfunc
2178c     01 4A 05 F6 | 	mov	COUNT_, #1
21790     A8 00 A0 FD | 	call	#pushregs_
21794     5C F8 BF FD | 	call	#__system____getftab
21798     FD 1E 0A F6 | 	mov	local01, result1 wz
2179c     10 00 90 AD |  if_e	jmp	#LR__3350
217a0     08 1E 06 F1 | 	add	local01, #8
217a4     0F 15 0A FB | 	rdlong	arg02, local01 wz
217a8     08 1E 86 F1 | 	sub	local01, #8
217ac     08 00 90 5D |  if_ne	jmp	#LR__3351
217b0                 | LR__3350
217b0     00 FA 05 F6 | 	mov	result1, #0
217b4     0C 00 90 FD | 	jmp	#LR__3352
217b8                 | LR__3351
217b8     00 D0 03 FF 
217bc     00 1E 46 F5 | 	or	local01, ##127926272
217c0     0F FB 01 F6 | 	mov	result1, local01
217c4                 | LR__3352
217c4     A7 F0 03 F6 | 	mov	ptra, fp
217c8     B2 00 A0 FD | 	call	#popregs_
217cc                 | __system___getrxfunc_ret
217cc     2D 00 64 FD | 	ret
217d0                 | 
217d0                 | __system___getiolock_0472
217d0     01 4A 05 F6 | 	mov	COUNT_, #1
217d4     A8 00 A0 FD | 	call	#pushregs_
217d8     18 F8 BF FD | 	call	#__system____getftab
217dc     FD 1E 0A F6 | 	mov	local01, result1 wz
217e0     10 00 90 AD |  if_e	jmp	#LR__3360
217e4     08 1E 06 F1 | 	add	local01, #8
217e8     0F FB 09 FB | 	rdlong	result1, local01 wz
217ec     08 1E 86 F1 | 	sub	local01, #8
217f0     18 00 90 5D |  if_ne	jmp	#LR__3361
217f4                 | LR__3360
217f4     01 00 00 FF 
217f8     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
217fc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21800     01 00 00 FF 
21804     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
21808     08 00 90 FD | 	jmp	#LR__3362
2180c                 | LR__3361
2180c     0C 1E 06 F1 | 	add	local01, #12
21810     0F FB 01 F6 | 	mov	result1, local01
21814                 | LR__3362
21814     A7 F0 03 F6 | 	mov	ptra, fp
21818     B2 00 A0 FD | 	call	#popregs_
2181c                 | __system___getiolock_0472_ret
2181c     2D 00 64 FD | 	ret
21820                 | 
21820                 | __system____ScanForChar
21820     09 01 02 F6 | 	mov	_var01, arg01
21824     09 03 02 F6 | 	mov	_var02, arg01
21828     97 06 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
2182c                 | LR__3370
2182c     01 FB C9 FA | 	rdbyte	result1, _var02 wz
21830     01 02 06 51 |  if_ne	add	_var02, #1
21834     F4 FF 9F 5D |  if_ne	jmp	#LR__3370
21838                 | LR__3371
21838     09 03 82 F1 | 	sub	_var02, arg01
2183c     01 FB 01 F6 | 	mov	result1, _var02
21840     FD 12 0A F6 | 	mov	arg01, result1 wz
21844     00 FA 05 A6 |  if_e	mov	result1, #0
21848     B8 00 90 AD |  if_e	jmp	#LR__3378
2184c     0A 05 02 F6 | 	mov	_var03, arg02
21850     07 04 4E F7 | 	zerox	_var03, #7 wz
21854     00 FA 05 A6 |  if_e	mov	result1, #0
21858     A8 00 90 AD |  if_e	jmp	#LR__3378
2185c     01 16 16 F2 | 	cmp	arg03, #1 wc
21860     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
21864     01 16 06 86 |  if_c_and_z	mov	arg03, #1
21868     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2186c     94 00 90 4D |  if_c_and_nz	jmp	#LR__3378
21870     09 17 1A F2 | 	cmp	arg03, arg01 wcz
21874     10 00 90 ED |  if_be	jmp	#LR__3372
21878     00 18 0E F2 | 	cmp	arg04, #0 wz
2187c     00 FA 05 A6 |  if_e	mov	result1, #0
21880     80 00 90 AD |  if_e	jmp	#LR__3378
21884     09 17 02 F6 | 	mov	arg03, arg01
21888                 | LR__3372
21888     01 16 86 F1 | 	sub	arg03, #1
2188c     00 18 0E F2 | 	cmp	arg04, #0 wz
21890     38 00 90 5D |  if_ne	jmp	#LR__3374
21894     0B 07 02 F6 | 	mov	_var04, arg03
21898     09 09 02 F6 | 	mov	_var05, arg01
2189c                 | LR__3373
2189c     04 07 12 F2 | 	cmp	_var04, _var05 wc
218a0     5C 00 90 3D |  if_ae	jmp	#LR__3377
218a4     03 05 02 F6 | 	mov	_var03, _var04
218a8     00 05 02 F1 | 	add	_var03, _var01
218ac     02 05 C2 FA | 	rdbyte	_var03, _var03
218b0     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
218b4     0C 05 0A F2 | 	cmp	_var03, arg04 wz
218b8     01 06 06 A1 |  if_e	add	_var04, #1
218bc     03 FB 01 A6 |  if_e	mov	result1, _var04
218c0     40 00 90 AD |  if_e	jmp	#LR__3378
218c4     01 06 06 F1 | 	add	_var04, #1
218c8     D0 FF 9F FD | 	jmp	#LR__3373
218cc                 | LR__3374
218cc     0B 07 02 F6 | 	mov	_var04, arg03
218d0                 | LR__3375
218d0     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
218d4     28 00 90 1D |  if_a	jmp	#LR__3376
218d8     03 09 02 F6 | 	mov	_var05, _var04
218dc     00 09 02 F1 | 	add	_var05, _var01
218e0     04 05 C2 FA | 	rdbyte	_var03, _var05
218e4     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
218e8     04 05 0A F2 | 	cmp	_var03, _var05 wz
218ec     01 06 06 A1 |  if_e	add	_var04, #1
218f0     03 FB 01 A6 |  if_e	mov	result1, _var04
218f4     0C 00 90 AD |  if_e	jmp	#LR__3378
218f8     01 06 86 F1 | 	sub	_var04, #1
218fc     D0 FF 9F FD | 	jmp	#LR__3375
21900                 | LR__3376
21900                 | LR__3377
21900     00 FA 05 F6 | 	mov	result1, #0
21904                 | LR__3378
21904                 | __system____ScanForChar_ret
21904     2D 00 64 FD | 	ret
21908                 | 
21908                 | __system___basic_dir
21908     05 4A 05 F6 | 	mov	COUNT_, #5
2190c     A8 00 A0 FD | 	call	#pushregs_
21910     4C F0 07 F1 | 	add	ptra, #76
21914     04 4E 05 F1 | 	add	fp, #4
21918     A7 12 62 FC | 	wrlong	arg01, fp
2191c     04 4E 05 F1 | 	add	fp, #4
21920     A7 14 62 FC | 	wrlong	arg02, fp
21924     04 4E 85 F1 | 	sub	fp, #4
21928     A7 14 0A FB | 	rdlong	arg02, fp wz
2192c     04 4E 85 F1 | 	sub	fp, #4
21930     04 4E 05 51 |  if_ne	add	fp, #4
21934     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21938     04 4E 85 51 |  if_ne	sub	fp, #4
2193c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
21940     70 00 90 AD |  if_e	jmp	#LR__3380
21944     03 00 00 FF 
21948     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2194c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21950     03 00 00 FF 
21954     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21958     03 00 00 5F 
2195c     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
21960     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
21964     03 00 00 5F 
21968     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
2196c     18 EA BF 5D |  if_ne	call	#__system__closedir
21970     5A 01 00 FF 
21974     58 12 06 F6 | 	mov	arg01, ##@LR__4538
21978     20 E9 BF FD | 	call	#__system__opendir
2197c     03 00 00 FF 
21980     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21984     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21988     08 4E 05 F1 | 	add	fp, #8
2198c     A7 20 02 FB | 	rdlong	local02, fp
21990     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21994     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
21998     04 4E 85 F1 | 	sub	fp, #4
2199c     A7 20 02 FB | 	rdlong	local02, fp
219a0     04 4E 85 F1 | 	sub	fp, #4
219a4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
219a8     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
219ac     03 00 00 FF 
219b0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
219b4                 | LR__3380
219b4     03 00 00 FF 
219b8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
219bc     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
219c0     03 00 00 FF 
219c4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
219c8     5A 01 00 AF 
219cc     5A FA 05 A6 |  if_e	mov	result1, ##@LR__4539
219d0     84 02 90 AD |  if_e	jmp	#LR__3393
219d4                 | LR__3381
219d4     03 00 00 FF 
219d8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
219dc     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
219e0     03 00 00 FF 
219e4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
219e8     10 EA BF FD | 	call	#__system__readdir
219ec     0C 4E 05 F1 | 	add	fp, #12
219f0     A7 FA 61 FC | 	wrlong	result1, fp
219f4     0C 4E 85 F1 | 	sub	fp, #12
219f8     00 FA 0D F2 | 	cmp	result1, #0 wz
219fc     38 00 90 5D |  if_ne	jmp	#LR__3382
21a00     03 00 00 FF 
21a04     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21a08     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21a0c     03 00 00 FF 
21a10     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21a14     70 E9 BF FD | 	call	#__system__closedir
21a18     03 00 00 FF 
21a1c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
21a20     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
21a24     03 00 00 FF 
21a28     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
21a2c     5A 01 00 FF 
21a30     5C FA 05 F6 | 	mov	result1, ##@LR__4540
21a34     20 02 90 FD | 	jmp	#LR__3393
21a38                 | LR__3382
21a38     0C 4E 05 F1 | 	add	fp, #12
21a3c     A7 12 02 FB | 	rdlong	arg01, fp
21a40     0C 4E 85 F1 | 	sub	fp, #12
21a44     03 00 00 FF 
21a48     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
21a4c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21a50     03 00 00 FF 
21a54     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
21a58     48 07 B0 FD | 	call	#__system___pat_match
21a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
21a60     70 FF 9F AD |  if_e	jmp	#LR__3381
21a64     03 00 00 FF 
21a68     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
21a6c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21a70     03 00 00 FF 
21a74     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
21a78     78 01 90 AD |  if_e	jmp	#LR__3389
21a7c     0C 4E 05 F1 | 	add	fp, #12
21a80     A7 12 02 FB | 	rdlong	arg01, fp
21a84     04 4E 05 F1 | 	add	fp, #4
21a88     A7 14 02 F6 | 	mov	arg02, fp
21a8c     10 4E 85 F1 | 	sub	fp, #16
21a90     68 F2 BF FD | 	call	#__system__stat
21a94     40 4E 05 F1 | 	add	fp, #64
21a98     A7 FA 61 FC | 	wrlong	result1, fp
21a9c     40 4E 85 F1 | 	sub	fp, #64
21aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
21aa4     5A 01 00 5F 
21aa8     5E FA 05 56 |  if_ne	mov	result1, ##@LR__4541
21aac     A8 01 90 5D |  if_ne	jmp	#LR__3393
21ab0     18 4E 05 F1 | 	add	fp, #24
21ab4     A7 20 02 FB | 	rdlong	local02, fp
21ab8     78 00 00 FF 
21abc     00 20 06 F5 | 	and	local02, ##61440
21ac0     2C 4E 05 F1 | 	add	fp, #44
21ac4     A7 20 62 FC | 	wrlong	local02, fp
21ac8     38 4E 85 F1 | 	sub	fp, #56
21acc     A7 20 02 FB | 	rdlong	local02, fp
21ad0     0C 4E 85 F1 | 	sub	fp, #12
21ad4     10 21 C2 FA | 	rdbyte	local02, local02
21ad8     2E 20 0E F2 | 	cmp	local02, #46 wz
21adc     08 4E 05 A1 |  if_e	add	fp, #8
21ae0     A7 04 68 AC |  if_e	wrlong	#2, fp
21ae4     08 4E C5 F3 | 	sumz	fp, #8
21ae8     A7 00 68 5C |  if_ne	wrlong	#0, fp
21aec     08 4E 85 51 |  if_ne	sub	fp, #8
21af0     44 4E 05 F1 | 	add	fp, #68
21af4     A7 20 02 FB | 	rdlong	local02, fp
21af8     44 4E 85 F1 | 	sub	fp, #68
21afc     08 00 00 FF 
21b00     00 20 0E F2 | 	cmp	local02, ##4096 wz
21b04     18 00 90 5D |  if_ne	jmp	#LR__3383
21b08     08 4E 05 F1 | 	add	fp, #8
21b0c     A7 20 02 FB | 	rdlong	local02, fp
21b10     10 20 46 F5 | 	or	local02, #16
21b14     A7 20 62 FC | 	wrlong	local02, fp
21b18     08 4E 85 F1 | 	sub	fp, #8
21b1c     AC 00 90 FD | 	jmp	#LR__3388
21b20                 | LR__3383
21b20     44 4E 05 F1 | 	add	fp, #68
21b24     A7 20 02 FB | 	rdlong	local02, fp
21b28     44 4E 85 F1 | 	sub	fp, #68
21b2c     10 00 00 FF 
21b30     00 20 0E F2 | 	cmp	local02, ##8192 wz
21b34     44 4E 05 51 |  if_ne	add	fp, #68
21b38     A7 1E 02 5B |  if_ne	rdlong	local01, fp
21b3c     44 4E 85 51 |  if_ne	sub	fp, #68
21b40     18 00 00 5F 
21b44     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
21b48     44 4E 05 51 |  if_ne	add	fp, #68
21b4c     0F 23 02 56 |  if_ne	mov	local03, local01
21b50     44 4E 85 51 |  if_ne	sub	fp, #68
21b54     20 00 00 5F 
21b58     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
21b5c     18 00 90 5D |  if_ne	jmp	#LR__3384
21b60     08 4E 05 F1 | 	add	fp, #8
21b64     A7 20 02 FB | 	rdlong	local02, fp
21b68     04 20 46 F5 | 	or	local02, #4
21b6c     A7 20 62 FC | 	wrlong	local02, fp
21b70     08 4E 85 F1 | 	sub	fp, #8
21b74     54 00 90 FD | 	jmp	#LR__3387
21b78                 | LR__3384
21b78     18 4E 05 F1 | 	add	fp, #24
21b7c     A7 20 02 FB | 	rdlong	local02, fp
21b80     18 4E 85 F1 | 	sub	fp, #24
21b84     92 20 CE F7 | 	test	local02, #146 wz
21b88     18 00 90 5D |  if_ne	jmp	#LR__3385
21b8c     08 4E 05 F1 | 	add	fp, #8
21b90     A7 20 02 FB | 	rdlong	local02, fp
21b94     01 20 46 F5 | 	or	local02, #1
21b98     A7 20 62 FC | 	wrlong	local02, fp
21b9c     08 4E 85 F1 | 	sub	fp, #8
21ba0     28 00 90 FD | 	jmp	#LR__3386
21ba4                 | LR__3385
21ba4     44 4E 05 F1 | 	add	fp, #68
21ba8     A7 24 02 FB | 	rdlong	local04, fp
21bac     44 4E 85 F1 | 	sub	fp, #68
21bb0     08 00 00 FF 
21bb4     00 24 0E F2 | 	cmp	local04, ##4096 wz
21bb8     08 4E 05 51 |  if_ne	add	fp, #8
21bbc     A7 24 02 5B |  if_ne	rdlong	local04, fp
21bc0     20 24 46 55 |  if_ne	or	local04, #32
21bc4     A7 24 62 5C |  if_ne	wrlong	local04, fp
21bc8     08 4E 85 51 |  if_ne	sub	fp, #8
21bcc                 | LR__3386
21bcc                 | LR__3387
21bcc                 | LR__3388
21bcc     08 4E 05 F1 | 	add	fp, #8
21bd0     A7 24 02 FB | 	rdlong	local04, fp
21bd4     08 4E 85 F1 | 	sub	fp, #8
21bd8     03 00 00 FF 
21bdc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
21be0     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
21be4     03 00 00 FF 
21be8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
21bec     0F 25 CA F7 | 	test	local04, local01 wz
21bf0     E0 FD 9F AD |  if_e	jmp	#LR__3381
21bf4                 | LR__3389
21bf4     0C 4E 05 F1 | 	add	fp, #12
21bf8     A7 12 02 FB | 	rdlong	arg01, fp
21bfc     0C 4E 85 F1 | 	sub	fp, #12
21c00     09 27 02 F6 | 	mov	local05, arg01
21c04     97 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
21c08                 | LR__3390
21c08     13 FB C9 FA | 	rdbyte	result1, local05 wz
21c0c     01 26 06 51 |  if_ne	add	local05, #1
21c10     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
21c14                 | LR__3391
21c14     13 13 C2 F2 | 	subr	arg01, local05
21c18     01 12 06 F1 | 	add	arg01, #1
21c1c     68 E0 BF FD | 	call	#__system___gc_alloc_managed
21c20     48 4E 05 F1 | 	add	fp, #72
21c24     A7 FA 61 FC | 	wrlong	result1, fp
21c28     48 4E 85 F1 | 	sub	fp, #72
21c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
21c30     18 00 90 AD |  if_e	jmp	#LR__3392
21c34     48 4E 05 F1 | 	add	fp, #72
21c38     A7 12 02 FB | 	rdlong	arg01, fp
21c3c     3C 4E 85 F1 | 	sub	fp, #60
21c40     A7 14 02 FB | 	rdlong	arg02, fp
21c44     0C 4E 85 F1 | 	sub	fp, #12
21c48     A8 A1 BF FD | 	call	#__system____builtin_strcpy
21c4c                 | LR__3392
21c4c     48 4E 05 F1 | 	add	fp, #72
21c50     A7 FA 01 FB | 	rdlong	result1, fp
21c54     48 4E 85 F1 | 	sub	fp, #72
21c58                 | LR__3393
21c58     A7 F0 03 F6 | 	mov	ptra, fp
21c5c     B2 00 A0 FD | 	call	#popregs_
21c60                 | __system___basic_dir_ret
21c60     2D 00 64 FD | 	ret
21c64                 | 
21c64                 | __system__pack_0538
21c64     09 01 02 F6 | 	mov	_var01, arg01
21c68     7F 16 06 F1 | 	add	arg03, #127
21c6c     04 18 CE F7 | 	test	arg04, #4 wz
21c70     10 00 90 AD |  if_e	jmp	#LR__3400
21c74     00 00 0E F2 | 	cmp	_var01, #0 wz
21c78     16 00 C6 A9 |  if_e	decod	_var01, #22
21c7c     F7 00 26 F4 | 	bith	_var01, #247
21c80     B4 00 90 FD | 	jmp	#LR__3409
21c84                 | LR__3400
21c84     02 18 CE F7 | 	test	arg04, #2 wz
21c88     00 C0 3F 5F 
21c8c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
21c90     00 14 06 56 |  if_ne	mov	arg02, #0
21c94     A0 00 90 5D |  if_ne	jmp	#LR__3408
21c98     08 18 CE F7 | 	test	arg04, #8 wz
21c9c     00 00 06 56 |  if_ne	mov	_var01, #0
21ca0     94 00 90 5D |  if_ne	jmp	#LR__3407
21ca4     FF 16 56 F2 | 	cmps	arg03, #255 wc
21ca8     00 C0 3F 3F 
21cac     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
21cb0     00 14 06 36 |  if_ae	mov	arg02, #0
21cb4     80 00 90 3D |  if_ae	jmp	#LR__3406
21cb8     01 16 56 F2 | 	cmps	arg03, #1 wc
21cbc     6C 00 90 3D |  if_ae	jmp	#LR__3404
21cc0     01 14 46 F0 | 	shr	arg02, #1
21cc4     00 03 02 F6 | 	mov	_var02, _var01
21cc8     01 02 06 F5 | 	and	_var02, #1
21ccc     1F 02 66 F0 | 	shl	_var02, #31
21cd0     01 15 42 F5 | 	or	arg02, _var02
21cd4     01 00 46 F0 | 	shr	_var01, #1
21cd8     97 1E 48 FB | 	callpa	#(@LR__3402-@LR__3401)>>2,fcache_load_ptr_
21cdc                 | LR__3401
21cdc     00 16 56 F2 | 	cmps	arg03, #0 wc
21ce0     34 00 90 3D |  if_ae	jmp	#LR__3403
21ce4     00 00 0E F2 | 	cmp	_var01, #0 wz
21ce8     2C 00 90 AD |  if_e	jmp	#LR__3403
21cec     0A 13 02 F6 | 	mov	arg01, arg02
21cf0     01 12 06 F5 | 	and	arg01, #1
21cf4     01 16 06 F1 | 	add	arg03, #1
21cf8     01 14 46 F0 | 	shr	arg02, #1
21cfc     00 03 02 F6 | 	mov	_var02, _var01
21d00     01 02 06 F5 | 	and	_var02, #1
21d04     1F 02 66 F0 | 	shl	_var02, #31
21d08     01 15 42 F5 | 	or	arg02, _var02
21d0c     09 15 42 F5 | 	or	arg02, arg01
21d10     01 00 46 F0 | 	shr	_var01, #1
21d14     C4 FF 9F FD | 	jmp	#LR__3401
21d18                 | LR__3402
21d18                 | LR__3403
21d18     00 16 56 F2 | 	cmps	arg03, #0 wc
21d1c     18 00 90 3D |  if_ae	jmp	#LR__3405
21d20     00 14 0E F2 | 	cmp	arg02, #0 wz
21d24     6F 14 62 FD | 	wrnz	arg02
21d28     0C 00 90 FD | 	jmp	#LR__3405
21d2c                 | LR__3404
21d2c     17 01 06 F4 | 	bitl	_var01, #279
21d30     17 16 66 F0 | 	shl	arg03, #23
21d34     0B 01 42 F5 | 	or	_var01, arg03
21d38                 | LR__3405
21d38                 | LR__3406
21d38                 | LR__3407
21d38                 | LR__3408
21d38                 | LR__3409
21d38     01 00 CE F7 | 	test	_var01, #1 wz
21d3c     01 14 46 55 |  if_ne	or	arg02, #1
21d40     0A 17 02 F6 | 	mov	arg03, arg02
21d44     00 02 06 F6 | 	mov	_var02, #0
21d48     FF FF 3F FF 
21d4c     FF 15 06 F1 | 	add	arg02, ##2147483647
21d50     0B 15 12 F2 | 	cmp	arg02, arg03 wc
21d54     01 02 06 C6 |  if_b	mov	_var02, #1
21d58     01 01 02 F1 | 	add	_var01, _var02
21d5c     01 18 CE F7 | 	test	arg04, #1 wz
21d60     1F 00 26 54 |  if_ne	bith	_var01, #31
21d64     00 FB 01 F6 | 	mov	result1, _var01
21d68                 | __system__pack_0538_ret
21d68     2D 00 64 FD | 	ret
21d6c                 | 
21d6c                 | __system___rxtxioctl_0628
21d6c     00 15 0E F2 | 	cmp	arg02, #256 wz
21d70     0C 00 90 AD |  if_e	jmp	#LR__3410
21d74     01 15 0E F2 | 	cmp	arg02, #257 wz
21d78     1C 00 90 AD |  if_e	jmp	#LR__3411
21d7c     30 00 90 FD | 	jmp	#LR__3412
21d80                 | LR__3410
21d80     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21d84     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21d88     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21d8c     0B FB 61 FC | 	wrlong	result1, arg03
21d90     00 FA 05 F6 | 	mov	result1, #0
21d94     28 00 90 FD | 	jmp	#LR__3413
21d98                 | LR__3411
21d98     0B 13 02 FB | 	rdlong	arg01, arg03
21d9c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21da0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21da4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21da8     00 FA 05 F6 | 	mov	result1, #0
21dac     10 00 90 FD | 	jmp	#LR__3413
21db0                 | LR__3412
21db0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21db4     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
21db8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21dbc     01 FA 65 F6 | 	neg	result1, #1
21dc0                 | LR__3413
21dc0                 | __system___rxtxioctl_0628_ret
21dc0     2D 00 64 FD | 	ret
21dc4                 | 
21dc4                 | __system____dummy_flush_0629
21dc4     00 FA 05 F6 | 	mov	result1, #0
21dc8                 | __system____dummy_flush_0629_ret
21dc8     2D 00 64 FD | 	ret
21dcc                 | 
21dcc                 | __system___vfsread
21dcc     03 4A 05 F6 | 	mov	COUNT_, #3
21dd0     A8 00 A0 FD | 	call	#pushregs_
21dd4     28 F0 07 F1 | 	add	ptra, #40
21dd8     04 4E 05 F1 | 	add	fp, #4
21ddc     A7 12 62 FC | 	wrlong	arg01, fp
21de0     04 4E 05 F1 | 	add	fp, #4
21de4     A7 14 62 FC | 	wrlong	arg02, fp
21de8     04 4E 05 F1 | 	add	fp, #4
21dec     A7 16 62 FC | 	wrlong	arg03, fp
21df0     04 4E 85 F1 | 	sub	fp, #4
21df4     A7 FA 01 FB | 	rdlong	result1, fp
21df8     14 4E 05 F1 | 	add	fp, #20
21dfc     A7 FA 61 FC | 	wrlong	result1, fp
21e00     04 4E 05 F1 | 	add	fp, #4
21e04     A7 00 68 FC | 	wrlong	#0, fp
21e08     1C 4E 85 F1 | 	sub	fp, #28
21e0c     A7 12 02 FB | 	rdlong	arg01, fp
21e10     04 4E 85 F1 | 	sub	fp, #4
21e14     08 12 06 F1 | 	add	arg01, #8
21e18     09 FB 01 FB | 	rdlong	result1, arg01
21e1c     01 FA CD F7 | 	test	result1, #1 wz
21e20     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21e24     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
21e28     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21e2c     01 FA 65 A6 |  if_e	neg	result1, #1
21e30     74 02 90 AD |  if_e	jmp	#LR__3426
21e34     04 4E 05 F1 | 	add	fp, #4
21e38     A7 12 02 FB | 	rdlong	arg01, fp
21e3c     04 4E 85 F1 | 	sub	fp, #4
21e40     14 12 06 F1 | 	add	arg01, #20
21e44     09 FB 09 FB | 	rdlong	result1, arg01 wz
21e48     B8 00 90 AD |  if_e	jmp	#LR__3421
21e4c     04 4E 05 F1 | 	add	fp, #4
21e50     A7 12 02 FB | 	rdlong	arg01, fp
21e54     09 17 02 F6 | 	mov	arg03, arg01
21e58     14 16 06 F1 | 	add	arg03, #20
21e5c     0B 1F 02 FB | 	rdlong	local01, arg03
21e60     0F 21 02 F6 | 	mov	local02, local01
21e64     13 1E 46 F7 | 	zerox	local01, #19
21e68     14 20 46 F0 | 	shr	local02, #20
21e6c     02 20 66 F0 | 	shl	local02, #2
21e70     ED 20 02 F1 | 	add	local02, __methods__
21e74     10 21 02 FB | 	rdlong	local02, local02
21e78     04 4E 05 F1 | 	add	fp, #4
21e7c     A7 14 02 FB | 	rdlong	arg02, fp
21e80     04 4E 05 F1 | 	add	fp, #4
21e84     A7 16 02 FB | 	rdlong	arg03, fp
21e88     0C 4E 85 F1 | 	sub	fp, #12
21e8c     F2 22 02 F6 | 	mov	local03, objptr
21e90     0F E5 01 F6 | 	mov	objptr, local01
21e94     2D 20 62 FD | 	call	local02
21e98     11 E5 01 F6 | 	mov	objptr, local03
21e9c     10 4E 05 F1 | 	add	fp, #16
21ea0     A7 FA 61 FC | 	wrlong	result1, fp
21ea4     10 4E 85 F1 | 	sub	fp, #16
21ea8     00 FA 55 F2 | 	cmps	result1, #0 wc
21eac     44 00 90 3D |  if_ae	jmp	#LR__3420
21eb0     04 4E 05 F1 | 	add	fp, #4
21eb4     A7 22 02 FB | 	rdlong	local03, fp
21eb8     11 1F 02 F6 | 	mov	local01, local03
21ebc     08 22 06 F1 | 	add	local03, #8
21ec0     11 21 02 FB | 	rdlong	local02, local03
21ec4     20 20 46 F5 | 	or	local02, #32
21ec8     08 1E 06 F1 | 	add	local01, #8
21ecc     0F 21 62 FC | 	wrlong	local02, local01
21ed0     0C 4E 05 F1 | 	add	fp, #12
21ed4     A7 12 0A FB | 	rdlong	arg01, fp wz
21ed8     10 4E 85 F1 | 	sub	fp, #16
21edc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21ee0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21ee4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21ee8     01 FA 65 56 |  if_ne	neg	result1, #1
21eec     00 FA 05 A6 |  if_e	mov	result1, #0
21ef0     B4 01 90 FD | 	jmp	#LR__3426
21ef4                 | LR__3420
21ef4     10 4E 05 F1 | 	add	fp, #16
21ef8     A7 FA 01 FB | 	rdlong	result1, fp
21efc     10 4E 85 F1 | 	sub	fp, #16
21f00     A4 01 90 FD | 	jmp	#LR__3426
21f04                 | LR__3421
21f04     04 4E 05 F1 | 	add	fp, #4
21f08     A7 12 02 FB | 	rdlong	arg01, fp
21f0c     20 12 06 F1 | 	add	arg01, #32
21f10     09 13 0A FB | 	rdlong	arg01, arg01 wz
21f14     14 4E 05 F1 | 	add	fp, #20
21f18     A7 12 62 FC | 	wrlong	arg01, fp
21f1c     18 4E 85 F1 | 	sub	fp, #24
21f20     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21f24     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
21f28     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21f2c     01 FA 65 A6 |  if_e	neg	result1, #1
21f30     74 01 90 AD |  if_e	jmp	#LR__3426
21f34     04 4E 05 F1 | 	add	fp, #4
21f38     A7 22 02 FB | 	rdlong	local03, fp
21f3c     04 4E 85 F1 | 	sub	fp, #4
21f40     28 22 06 F1 | 	add	local03, #40
21f44     11 21 0A FB | 	rdlong	local02, local03 wz
21f48     7C 00 90 AD |  if_e	jmp	#LR__3423
21f4c     04 4E 05 F1 | 	add	fp, #4
21f50     A7 12 02 FB | 	rdlong	arg01, fp
21f54     09 23 02 F6 | 	mov	local03, arg01
21f58     28 22 06 F1 | 	add	local03, #40
21f5c     11 1F 02 FB | 	rdlong	local01, local03
21f60     0F 21 02 F6 | 	mov	local02, local01
21f64     13 1E 46 F7 | 	zerox	local01, #19
21f68     14 20 46 F0 | 	shr	local02, #20
21f6c     02 20 66 F0 | 	shl	local02, #2
21f70     ED 20 02 F1 | 	add	local02, __methods__
21f74     10 21 02 FB | 	rdlong	local02, local02
21f78     20 4E 05 F1 | 	add	fp, #32
21f7c     A7 16 02 F6 | 	mov	arg03, fp
21f80     24 4E 85 F1 | 	sub	fp, #36
21f84     00 15 06 F6 | 	mov	arg02, #256
21f88     F2 22 02 F6 | 	mov	local03, objptr
21f8c     0F E5 01 F6 | 	mov	objptr, local01
21f90     2D 20 62 FD | 	call	local02
21f94     11 E5 01 F6 | 	mov	objptr, local03
21f98     10 4E 05 F1 | 	add	fp, #16
21f9c     A7 FA 61 FC | 	wrlong	result1, fp
21fa0     00 FA 4D F2 | 	cmps	result1, #0 wz
21fa4     10 4E 85 F1 | 	sub	fp, #16
21fa8     1C 00 90 5D |  if_ne	jmp	#LR__3422
21fac     24 4E 05 F1 | 	add	fp, #36
21fb0     A7 20 02 FB | 	rdlong	local02, fp
21fb4     24 4E 85 F1 | 	sub	fp, #36
21fb8     02 20 CE F7 | 	test	local02, #2 wz
21fbc     20 4E 05 51 |  if_ne	add	fp, #32
21fc0     A7 02 68 5C |  if_ne	wrlong	#1, fp
21fc4     20 4E 85 51 |  if_ne	sub	fp, #32
21fc8                 | LR__3422
21fc8                 | LR__3423
21fc8     10 4E 05 F1 | 	add	fp, #16
21fcc     A7 00 68 FC | 	wrlong	#0, fp
21fd0     10 4E 85 F1 | 	sub	fp, #16
21fd4                 | LR__3424
21fd4     0C 4E 05 F1 | 	add	fp, #12
21fd8     A7 22 02 FB | 	rdlong	local03, fp
21fdc     0C 4E 85 F1 | 	sub	fp, #12
21fe0     01 22 16 F2 | 	cmp	local03, #1 wc
21fe4     B4 00 90 CD |  if_b	jmp	#LR__3425
21fe8     18 4E 05 F1 | 	add	fp, #24
21fec     A7 20 02 FB | 	rdlong	local02, fp
21ff0     10 23 02 F6 | 	mov	local03, local02
21ff4     13 22 46 F7 | 	zerox	local03, #19
21ff8     14 20 46 F0 | 	shr	local02, #20
21ffc     02 20 66 F0 | 	shl	local02, #2
22000     ED 20 02 F1 | 	add	local02, __methods__
22004     10 21 02 FB | 	rdlong	local02, local02
22008     14 4E 85 F1 | 	sub	fp, #20
2200c     A7 12 02 FB | 	rdlong	arg01, fp
22010     04 4E 85 F1 | 	sub	fp, #4
22014     F2 1E 02 F6 | 	mov	local01, objptr
22018     11 E5 01 F6 | 	mov	objptr, local03
2201c     2D 20 62 FD | 	call	local02
22020     0F E5 01 F6 | 	mov	objptr, local01
22024     14 4E 05 F1 | 	add	fp, #20
22028     A7 FA 61 FC | 	wrlong	result1, fp
2202c     14 4E 85 F1 | 	sub	fp, #20
22030     00 FA 55 F2 | 	cmps	result1, #0 wc
22034     64 00 90 CD |  if_b	jmp	#LR__3425
22038     1C 4E 05 F1 | 	add	fp, #28
2203c     A7 22 02 FB | 	rdlong	local03, fp
22040     11 21 02 F6 | 	mov	local02, local03
22044     01 20 06 F1 | 	add	local02, #1
22048     A7 20 62 FC | 	wrlong	local02, fp
2204c     08 4E 85 F1 | 	sub	fp, #8
22050     A7 20 02 FB | 	rdlong	local02, fp
22054     11 21 42 FC | 	wrbyte	local02, local03
22058     04 4E 85 F1 | 	sub	fp, #4
2205c     A7 22 02 FB | 	rdlong	local03, fp
22060     01 22 06 F1 | 	add	local03, #1
22064     A7 22 62 FC | 	wrlong	local03, fp
22068     04 4E 85 F1 | 	sub	fp, #4
2206c     A7 22 02 FB | 	rdlong	local03, fp
22070     01 22 86 F1 | 	sub	local03, #1
22074     A7 22 62 FC | 	wrlong	local03, fp
22078     14 4E 05 F1 | 	add	fp, #20
2207c     A7 22 0A FB | 	rdlong	local03, fp wz
22080     20 4E 85 F1 | 	sub	fp, #32
22084     4C FF 9F AD |  if_e	jmp	#LR__3424
22088     14 4E 05 F1 | 	add	fp, #20
2208c     A7 20 02 FB | 	rdlong	local02, fp
22090     14 4E 85 F1 | 	sub	fp, #20
22094     0A 20 0E F2 | 	cmp	local02, #10 wz
22098     38 FF 9F 5D |  if_ne	jmp	#LR__3424
2209c                 | LR__3425
2209c     10 4E 05 F1 | 	add	fp, #16
220a0     A7 FA 01 FB | 	rdlong	result1, fp
220a4     10 4E 85 F1 | 	sub	fp, #16
220a8                 | LR__3426
220a8     A7 F0 03 F6 | 	mov	ptra, fp
220ac     B2 00 A0 FD | 	call	#popregs_
220b0                 | __system___vfsread_ret
220b0     2D 00 64 FD | 	ret
220b4                 | 
220b4                 | __system____default_filbuf
220b4     04 4A 05 F6 | 	mov	COUNT_, #4
220b8     A8 00 A0 FD | 	call	#pushregs_
220bc     09 1F 02 F6 | 	mov	local01, arg01
220c0     0F 21 02 FB | 	rdlong	local02, local01
220c4     0C 20 06 F1 | 	add	local02, #12
220c8     10 FB 09 FB | 	rdlong	result1, local02 wz
220cc     0C 20 86 F1 | 	sub	local02, #12
220d0     20 00 90 5D |  if_ne	jmp	#LR__3430
220d4     14 20 06 F1 | 	add	local02, #20
220d8     10 FB 01 F6 | 	mov	result1, local02
220dc     04 20 86 F1 | 	sub	local02, #4
220e0     10 FB 61 FC | 	wrlong	result1, local02
220e4     04 20 86 F1 | 	sub	local02, #4
220e8     02 00 80 FF 
220ec     10 01 68 FC | 	wrlong	##1024, local02
220f0     0C 20 86 F1 | 	sub	local02, #12
220f4                 | LR__3430
220f4     14 1E 06 F1 | 	add	local01, #20
220f8     0F 23 02 FB | 	rdlong	local03, local01
220fc     11 25 02 F6 | 	mov	local04, local03
22100     14 1E 86 F1 | 	sub	local01, #20
22104     13 24 46 F7 | 	zerox	local04, #19
22108     14 22 46 F0 | 	shr	local03, #20
2210c     02 22 66 F0 | 	shl	local03, #2
22110     ED 22 02 F1 | 	add	local03, __methods__
22114     11 23 02 FB | 	rdlong	local03, local03
22118     10 20 06 F1 | 	add	local02, #16
2211c     10 15 02 FB | 	rdlong	arg02, local02
22120     04 20 86 F1 | 	sub	local02, #4
22124     10 17 02 FB | 	rdlong	arg03, local02
22128     0C 20 86 F1 | 	sub	local02, #12
2212c     0F 13 02 F6 | 	mov	arg01, local01
22130     F2 1E 02 F6 | 	mov	local01, objptr
22134     12 E5 01 F6 | 	mov	objptr, local04
22138     2D 22 62 FD | 	call	local03
2213c     0F E5 01 F6 | 	mov	objptr, local01
22140     FD 24 02 F6 | 	mov	local04, result1
22144     00 24 56 F2 | 	cmps	local04, #0 wc
22148     01 FA 65 C6 |  if_b	neg	result1, #1
2214c     28 00 90 CD |  if_b	jmp	#LR__3431
22150     10 25 62 FC | 	wrlong	local04, local02
22154     10 20 06 F1 | 	add	local02, #16
22158     10 23 02 FB | 	rdlong	local03, local02
2215c     0C 20 86 F1 | 	sub	local02, #12
22160     10 23 62 FC | 	wrlong	local03, local02
22164     04 20 06 F1 | 	add	local02, #4
22168     10 23 02 FB | 	rdlong	local03, local02
2216c     01 22 46 F5 | 	or	local03, #1
22170     10 23 62 FC | 	wrlong	local03, local02
22174     12 FB 01 F6 | 	mov	result1, local04
22178                 | LR__3431
22178     A7 F0 03 F6 | 	mov	ptra, fp
2217c     B2 00 A0 FD | 	call	#popregs_
22180                 | __system____default_filbuf_ret
22180     2D 00 64 FD | 	ret
22184                 | 
22184                 | __system__getlower_1014
22184     41 12 56 F2 | 	cmps	arg01, #65 wc
22188     10 00 90 CD |  if_b	jmp	#LR__3440
2218c     5B 12 56 F2 | 	cmps	arg01, #91 wc
22190     09 FB 01 C6 |  if_b	mov	result1, arg01
22194     20 FA 05 C1 |  if_b	add	result1, #32
22198     04 00 90 CD |  if_b	jmp	#__system__getlower_1014_ret
2219c                 | LR__3440
2219c     09 FB 01 F6 | 	mov	result1, arg01
221a0                 | __system__getlower_1014_ret
221a0     2D 00 64 FD | 	ret
221a4                 | 
221a4                 | __system___pat_match
221a4     08 4A 05 F6 | 	mov	COUNT_, #8
221a8     A8 00 A0 FD | 	call	#pushregs_
221ac     09 1F 02 F6 | 	mov	local01, arg01
221b0                 | LR__3450
221b0     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
221b4     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
221b8     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
221bc     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
221c0     2C 00 90 AD |  if_e	jmp	#LR__3451
221c4     0A 13 C2 FA | 	rdbyte	arg01, arg02
221c8     B8 FF BF FD | 	call	#__system__getlower_1014
221cc     FD 22 02 F6 | 	mov	local03, result1
221d0     0F 13 C2 FA | 	rdbyte	arg01, local01
221d4     AC FF BF FD | 	call	#__system__getlower_1014
221d8     11 FB 09 F2 | 	cmp	result1, local03 wz
221dc     00 FA 05 56 |  if_ne	mov	result1, #0
221e0     FC 00 90 5D |  if_ne	jmp	#LR__3459
221e4     01 1E 06 F1 | 	add	local01, #1
221e8     01 14 06 F1 | 	add	arg02, #1
221ec     C0 FF 9F FD | 	jmp	#LR__3450
221f0                 | LR__3451
221f0     0A 23 C2 FA | 	rdbyte	local03, arg02
221f4     2A 22 0E F2 | 	cmp	local03, #42 wz
221f8     D4 00 90 5D |  if_ne	jmp	#LR__3458
221fc     01 14 06 F1 | 	add	arg02, #1
22200     0A 21 C2 FA | 	rdbyte	local02, arg02
22204     01 14 86 F1 | 	sub	arg02, #1
22208     2E 20 0E F2 | 	cmp	local02, #46 wz
2220c     28 00 90 5D |  if_ne	jmp	#LR__3452
22210     02 14 06 F1 | 	add	arg02, #2
22214     0A 21 C2 FA | 	rdbyte	local02, arg02
22218     02 14 86 F1 | 	sub	arg02, #2
2221c     2A 20 0E F2 | 	cmp	local02, #42 wz
22220     03 14 06 A1 |  if_e	add	arg02, #3
22224     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
22228     03 14 86 A1 |  if_e	sub	arg02, #3
2222c     12 27 0A A6 |  if_e	mov	local05, local04 wz
22230     01 FA 05 A6 |  if_e	mov	result1, #1
22234     A8 00 90 AD |  if_e	jmp	#LR__3459
22238                 | LR__3452
22238     01 14 06 F1 | 	add	arg02, #1
2223c     00 28 06 F6 | 	mov	local06, #0
22240     97 1E 48 FB | 	callpa	#(@LR__3455-@LR__3453)>>2,fcache_load_ptr_
22244                 | LR__3453
22244     14 2B 02 F6 | 	mov	local07, local06
22248     0A 2B 02 F1 | 	add	local07, arg02
2224c     15 2B CA FA | 	rdbyte	local07, local07 wz
22250     14 27 02 56 |  if_ne	mov	local05, local06
22254     01 26 06 51 |  if_ne	add	local05, #1
22258     13 29 02 56 |  if_ne	mov	local06, local05
2225c     E4 FF 9F 5D |  if_ne	jmp	#LR__3453
22260     00 2C 06 F6 | 	mov	local08, #0
22264                 | LR__3454
22264     16 2B 02 F6 | 	mov	local07, local08
22268     0F 2B 02 F1 | 	add	local07, local01
2226c     15 2B CA FA | 	rdbyte	local07, local07 wz
22270     16 27 02 56 |  if_ne	mov	local05, local08
22274     01 26 06 51 |  if_ne	add	local05, #1
22278     13 2D 02 56 |  if_ne	mov	local08, local05
2227c     E4 FF 9F 5D |  if_ne	jmp	#LR__3454
22280                 | LR__3455
22280     14 2D 52 F2 | 	cmps	local08, local06 wc
22284     00 FA 05 C6 |  if_b	mov	result1, #0
22288     54 00 90 CD |  if_b	jmp	#LR__3459
2228c     16 21 02 F6 | 	mov	local02, local08
22290     14 21 82 F1 | 	sub	local02, local06
22294     10 1F 02 F1 | 	add	local01, local02
22298                 | LR__3456
22298     01 28 56 F2 | 	cmps	local06, #1 wc
2229c     30 00 90 CD |  if_b	jmp	#LR__3457
222a0     0F 13 C2 FA | 	rdbyte	arg01, local01
222a4     DC FE BF FD | 	call	#__system__getlower_1014
222a8     FD 2C 02 F6 | 	mov	local08, result1
222ac     0A 13 C2 FA | 	rdbyte	arg01, arg02
222b0     D0 FE BF FD | 	call	#__system__getlower_1014
222b4     FD 2C 0A F2 | 	cmp	local08, result1 wz
222b8     00 FA 05 56 |  if_ne	mov	result1, #0
222bc     20 00 90 5D |  if_ne	jmp	#LR__3459
222c0     01 1E 06 F1 | 	add	local01, #1
222c4     01 14 06 F1 | 	add	arg02, #1
222c8     01 28 86 F1 | 	sub	local06, #1
222cc     C8 FF 9F FD | 	jmp	#LR__3456
222d0                 | LR__3457
222d0                 | LR__3458
222d0     0A 2D CA FA | 	rdbyte	local08, arg02 wz
222d4     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
222d8     01 FA 05 A6 |  if_e	mov	result1, #1
222dc     00 FA 05 56 |  if_ne	mov	result1, #0
222e0                 | LR__3459
222e0     A7 F0 03 F6 | 	mov	ptra, fp
222e4     B2 00 A0 FD | 	call	#popregs_
222e8                 | __system___pat_match_ret
222e8     2D 00 64 FD | 	ret
222ec                 | 
222ec                 | _fatfs_cc_ff_uni2oem
222ec     00 00 06 F6 | 	mov	_var01, #0
222f0     80 12 16 F2 | 	cmp	arg01, #128 wc
222f4     09 01 02 C6 |  if_b	mov	_var01, arg01
222f8     58 00 90 CD |  if_b	jmp	#LR__3464
222fc     80 00 00 FF 
22300     00 12 16 F2 | 	cmp	arg01, ##65536 wc
22304     4C 00 90 3D |  if_ae	jmp	#LR__3463
22308     0A FB 31 F9 | 	getword	result1, arg02, #0
2230c     01 00 00 FF 
22310     52 FB 0D F2 | 	cmp	result1, ##850 wz
22314     3C 00 90 5D |  if_ne	jmp	#LR__3463
22318                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
22318     00 00 06 F6 | 	mov	_var01, #0
2231c     97 14 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
22320                 | LR__3460
22320     00 FB 31 F9 | 	getword	result1, _var01, #0
22324     80 FA 15 F2 | 	cmp	result1, #128 wc
22328     1C 00 90 3D |  if_ae	jmp	#LR__3462
2232c     00 FB 31 F9 | 	getword	result1, _var01, #0
22330     01 FA 65 F0 | 	shl	result1, #1
22334     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
22338     FD FA E1 FA | 	rdword	result1, result1
2233c     FD 12 0A F2 | 	cmp	arg01, result1 wz
22340     01 00 06 51 |  if_ne	add	_var01, #1
22344     D8 FF 9F 5D |  if_ne	jmp	#LR__3460
22348                 | LR__3461
22348                 | LR__3462
22348     00 01 32 F9 | 	getword	_var01, _var01, #0
2234c     80 00 06 F1 | 	add	_var01, #128
22350     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
22354                 | LR__3463
22354                 | LR__3464
22354                 | ' 			c = (c + 0x80) & 0xFF;
22354                 | ' 		}
22354                 | ' 	}
22354                 | ' 
22354                 | ' 	return c;
22354     00 FB 01 F6 | 	mov	result1, _var01
22358                 | _fatfs_cc_ff_uni2oem_ret
22358     2D 00 64 FD | 	ret
2235c                 | 
2235c                 | _fatfs_cc_ff_oem2uni
2235c     00 00 06 F6 | 	mov	_var01, #0
22360     09 FB 31 F9 | 	getword	result1, arg01, #0
22364     80 FA 15 F2 | 	cmp	result1, #128 wc
22368     09 01 02 C6 |  if_b	mov	_var01, arg01
2236c     2C 00 90 CD |  if_b	jmp	#LR__3471
22370     0A 15 32 F9 | 	getword	arg02, arg02, #0
22374     01 00 00 FF 
22378     52 15 0E F2 | 	cmp	arg02, ##850 wz
2237c     1C 00 90 5D |  if_ne	jmp	#LR__3470
22380     09 FB 31 F9 | 	getword	result1, arg01, #0
22384     00 FB 15 F2 | 	cmp	result1, #256 wc
22388     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2238c     80 12 86 C1 |  if_b	sub	arg01, #128
22390     01 12 66 C0 |  if_b	shl	arg01, #1
22394     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
22398     09 01 E2 CA |  if_b	rdword	_var01, arg01
2239c                 | LR__3470
2239c                 | LR__3471
2239c                 | ' 		}
2239c                 | ' 	}
2239c                 | ' 
2239c                 | ' 	return c;
2239c     00 FB 01 F6 | 	mov	result1, _var01
223a0                 | _fatfs_cc_ff_oem2uni_ret
223a0     2D 00 64 FD | 	ret
223a4                 | 
223a4                 | _fatfs_cc_ff_wtoupper
223a4     09 01 02 F6 | 	mov	_var01, arg01
223a8     80 00 00 FF 
223ac     00 00 16 F2 | 	cmp	_var01, ##65536 wc
223b0     60 01 90 3D |  if_ae	jmp	#LR__3493
223b4     00 03 02 F6 | 	mov	_var02, _var01
223b8     01 01 32 F9 | 	getword	_var01, _var02, #0
223bc     08 00 00 FF 
223c0     00 00 16 F2 | 	cmp	_var01, ##4096 wc
223c4     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
223c8     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
223cc     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
223d0     01 00 00 3F 
223d4     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
223d8     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
223dc     01 00 00 3F 
223e0     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
223e4     02 07 02 F6 | 	mov	_var04, _var03
223e8                 | ' 		uc = (WORD)uni;
223e8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
223e8                 | ' 		for (;;) {
223e8                 | LR__3480
223e8     03 09 E2 FA | 	rdword	_var05, _var04
223ec     04 05 02 F6 | 	mov	_var03, _var05
223f0     0F 04 4E F7 | 	zerox	_var03, #15 wz
223f4     02 06 06 F1 | 	add	_var04, #2
223f8     14 01 90 AD |  if_e	jmp	#LR__3492
223fc     01 05 32 F9 | 	getword	_var03, _var02, #0
22400     04 01 32 F9 | 	getword	_var01, _var05, #0
22404     00 05 12 F2 | 	cmp	_var03, _var01 wc
22408     04 01 90 CD |  if_b	jmp	#LR__3492
2240c     03 0B E2 FA | 	rdword	_var06, _var04
22410     05 0D 32 F9 | 	getword	_var07, _var06, #0
22414     08 0C 46 F0 | 	shr	_var07, #8
22418     05 0B 32 F9 | 	getword	_var06, _var06, #0
2241c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
22420     01 05 32 F9 | 	getword	_var03, _var02, #0
22424     04 0F 32 F9 | 	getword	_var08, _var05, #0
22428     05 01 32 F9 | 	getword	_var01, _var06, #0
2242c     00 0F 02 F1 | 	add	_var08, _var01
22430     07 05 52 F2 | 	cmps	_var03, _var08 wc
22434     02 06 06 F1 | 	add	_var04, #2
22438     C4 00 90 3D |  if_ae	jmp	#LR__3491
2243c                 | ' 				switch (cmd) {
2243c     06 11 32 F9 | 	getword	_var09, _var07, #0
22440     09 10 26 F3 | 	fle	_var09, #9
22444     30 10 62 FD | 	jmprel	_var09
22448                 | LR__3481
22448     24 00 90 FD | 	jmp	#LR__3482
2244c     3C 00 90 FD | 	jmp	#LR__3483
22450     54 00 90 FD | 	jmp	#LR__3484
22454     5C 00 90 FD | 	jmp	#LR__3485
22458     64 00 90 FD | 	jmp	#LR__3486
2245c     6C 00 90 FD | 	jmp	#LR__3487
22460     74 00 90 FD | 	jmp	#LR__3488
22464     7C 00 90 FD | 	jmp	#LR__3489
22468     84 00 90 FD | 	jmp	#LR__3490
2246c     A0 00 90 FD | 	jmp	#LR__3492
22470                 | LR__3482
22470     01 03 32 F9 | 	getword	_var02, _var02, #0
22474     04 09 32 F9 | 	getword	_var05, _var05, #0
22478     04 03 82 F1 | 	sub	_var02, _var05
2247c     01 02 66 F0 | 	shl	_var02, #1
22480     03 03 02 F1 | 	add	_var02, _var04
22484     01 03 E2 FA | 	rdword	_var02, _var02
22488     84 00 90 FD | 	jmp	#LR__3492
2248c                 | LR__3483
2248c     01 05 32 F9 | 	getword	_var03, _var02, #0
22490     01 03 32 F9 | 	getword	_var02, _var02, #0
22494     04 09 32 F9 | 	getword	_var05, _var05, #0
22498     04 03 82 F1 | 	sub	_var02, _var05
2249c     01 02 06 F5 | 	and	_var02, #1
224a0     02 03 C2 F2 | 	subr	_var02, _var03
224a4     68 00 90 FD | 	jmp	#LR__3492
224a8                 | LR__3484
224a8     01 03 32 F9 | 	getword	_var02, _var02, #0
224ac     10 02 86 F1 | 	sub	_var02, #16
224b0     5C 00 90 FD | 	jmp	#LR__3492
224b4                 | LR__3485
224b4     01 03 32 F9 | 	getword	_var02, _var02, #0
224b8     20 02 86 F1 | 	sub	_var02, #32
224bc     50 00 90 FD | 	jmp	#LR__3492
224c0                 | LR__3486
224c0     01 03 32 F9 | 	getword	_var02, _var02, #0
224c4     30 02 86 F1 | 	sub	_var02, #48
224c8     44 00 90 FD | 	jmp	#LR__3492
224cc                 | LR__3487
224cc     01 03 32 F9 | 	getword	_var02, _var02, #0
224d0     1A 02 86 F1 | 	sub	_var02, #26
224d4     38 00 90 FD | 	jmp	#LR__3492
224d8                 | LR__3488
224d8     01 03 32 F9 | 	getword	_var02, _var02, #0
224dc     08 02 06 F1 | 	add	_var02, #8
224e0     2C 00 90 FD | 	jmp	#LR__3492
224e4                 | LR__3489
224e4     01 03 32 F9 | 	getword	_var02, _var02, #0
224e8     50 02 86 F1 | 	sub	_var02, #80
224ec     20 00 90 FD | 	jmp	#LR__3492
224f0                 | LR__3490
224f0     01 03 32 F9 | 	getword	_var02, _var02, #0
224f4     0E 00 00 FF 
224f8     60 02 86 F1 | 	sub	_var02, ##7264
224fc                 | ' 				}
224fc                 | ' 				break;
224fc     10 00 90 FD | 	jmp	#LR__3492
22500                 | LR__3491
22500     0F 0C 4E F7 | 	zerox	_var07, #15 wz
22504     02 0A 06 AA |  if_e	mul	_var06, #2
22508     05 07 02 A1 |  if_e	add	_var04, _var06
2250c     D8 FE 9F FD | 	jmp	#LR__3480
22510                 | LR__3492
22510     01 01 32 F9 | 	getword	_var01, _var02, #0
22514                 | LR__3493
22514                 | ' 		}
22514                 | ' 		uni = uc;
22514                 | ' 	}
22514                 | ' 
22514                 | ' 	return uni;
22514     00 FB 01 F6 | 	mov	result1, _var01
22518                 | _fatfs_cc_ff_wtoupper_ret
22518     2D 00 64 FD | 	ret
2251c                 | 
2251c                 | _fatfs_cc_strncpy
2251c     09 01 02 F6 | 	mov	_var01, arg01
22520     97 12 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
22524                 | ' 
22524                 | ' 	dscan = dst;
22524                 | ' 	sscan = src;
22524                 | ' 	count = n;
22524                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
22524                 | LR__3500
22524     01 16 86 F1 | 	sub	arg03, #1
22528     00 16 56 F2 | 	cmps	arg03, #0 wc
2252c     18 00 90 CD |  if_b	jmp	#LR__3502
22530     0A FB C1 FA | 	rdbyte	result1, arg02
22534     00 FB 41 FC | 	wrbyte	result1, _var01
22538     01 14 06 F1 | 	add	arg02, #1
2253c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
22540                 | ' 		continue;
22540     01 00 06 F1 | 	add	_var01, #1
22544     DC FF 9F 5D |  if_ne	jmp	#LR__3500
22548                 | LR__3501
22548                 | LR__3502
22548     97 0C 48 FB | 	callpa	#(@LR__3504-@LR__3503)>>2,fcache_load_ptr_
2254c                 | ' 	while (--count >= 0)
2254c                 | LR__3503
2254c     01 16 86 F1 | 	sub	arg03, #1
22550     00 16 56 F2 | 	cmps	arg03, #0 wc
22554     00 03 02 36 |  if_ae	mov	_var02, _var01
22558     01 00 06 31 |  if_ae	add	_var01, #1
2255c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
22560     E8 FF 9F 3D |  if_ae	jmp	#LR__3503
22564                 | LR__3504
22564                 | ' 		*dscan++ = '\0';
22564                 | ' 	return(dst);
22564     09 FB 01 F6 | 	mov	result1, arg01
22568                 | _fatfs_cc_strncpy_ret
22568     2D 00 64 FD | 	ret
2256c                 | 
2256c                 | _fatfs_cc_memcmp
2256c                 | ' 	for (n = size; n > 0; n--)
2256c     00 16 0E F2 | 	cmp	arg03, #0 wz
22570     28 00 90 AD |  if_e	jmp	#LR__3511
22574                 | LR__3510
22574     09 01 C2 FA | 	rdbyte	_var01, arg01
22578     0A 03 C2 FA | 	rdbyte	_var02, arg02
2257c     01 01 0A F2 | 	cmp	_var01, _var02 wz
22580     01 12 06 A1 |  if_e	add	arg01, #1
22584     01 14 06 A1 |  if_e	add	arg02, #1
22588                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
22588     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2258c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
22590     01 FB 81 51 |  if_ne	sub	result1, _var02
22594     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
22598     F6 17 6E FB | 	djnz	arg03, #LR__3510
2259c                 | LR__3511
2259c                 | ' 
2259c                 | ' 	return(0);
2259c     00 FA 05 F6 | 	mov	result1, #0
225a0                 | _fatfs_cc_memcmp_ret
225a0     2D 00 64 FD | 	ret
225a4                 | 
225a4                 | _fatfs_cc_strncmp
225a4     09 01 0A F6 | 	mov	_var01, arg01 wz
225a8     14 00 90 5D |  if_ne	jmp	#LR__3520
225ac                 | ' 		return scan2 ? -1 : 0;
225ac     00 14 0E F2 | 	cmp	arg02, #0 wz
225b0     01 02 66 56 |  if_ne	neg	_var02, #1
225b4     00 02 06 A6 |  if_e	mov	_var02, #0
225b8     01 FB 01 F6 | 	mov	result1, _var02
225bc     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
225c0                 | LR__3520
225c0     00 14 0E F2 | 	cmp	arg02, #0 wz
225c4     01 FA 05 A6 |  if_e	mov	result1, #1
225c8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
225cc     0B 05 02 F6 | 	mov	_var03, arg03
225d0     97 16 48 FB | 	callpa	#(@LR__3522-@LR__3521)>>2,fcache_load_ptr_
225d4                 | ' 	count = n;
225d4                 | ' 	do {
225d4                 | LR__3521
225d4     00 07 C2 FA | 	rdbyte	_var04, _var01
225d8     0A 09 02 F6 | 	mov	_var05, arg02
225dc     04 0B C2 FA | 	rdbyte	_var06, _var05
225e0     01 04 86 F1 | 	sub	_var03, #1
225e4     00 04 56 F2 | 	cmps	_var03, #0 wc
225e8     01 00 06 F1 | 	add	_var01, #1
225ec     01 14 06 F1 | 	add	arg02, #1
225f0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
225f4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3523
225f8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
225fc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3521
22600                 | LR__3522
22600                 | LR__3523
22600     00 04 56 F2 | 	cmps	_var03, #0 wc
22604                 | ' 		return(0);
22604     00 FA 05 C6 |  if_b	mov	result1, #0
22608     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2260c     05 07 0A F2 | 	cmp	_var04, _var06 wz
22610                 | ' 		return(0);
22610     00 FA 05 A6 |  if_e	mov	result1, #0
22614     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22618     00 06 0E F2 | 	cmp	_var04, #0 wz
2261c                 | ' 		return(-1);
2261c     01 FA 65 A6 |  if_e	neg	result1, #1
22620     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
22624     00 0A 0E F2 | 	cmp	_var06, #0 wz
22628                 | ' 		return(1);
22628     01 FA 05 A6 |  if_e	mov	result1, #1
2262c                 | ' 		return(c1 - c2);
2262c     03 FB 01 56 |  if_ne	mov	result1, _var04
22630     05 FB 81 51 |  if_ne	sub	result1, _var06
22634                 | _fatfs_cc_strncmp_ret
22634     2D 00 64 FD | 	ret
22638                 | 
22638                 | _fatfs_cc_strchr
22638                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
22638                 | ' 	while ((c = *s++) != (char) charwanted)
22638                 | LR__3530
22638     09 01 02 F6 | 	mov	_var01, arg01
2263c     00 03 C2 FA | 	rdbyte	_var02, _var01
22640     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
22644     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
22648     03 05 0A F2 | 	cmp	_var03, _var04 wz
2264c     01 12 06 F1 | 	add	arg01, #1
22650     14 00 90 AD |  if_e	jmp	#LR__3531
22654     01 05 02 F6 | 	mov	_var03, _var02
22658     07 04 4E F7 | 	zerox	_var03, #7 wz
2265c     00 FA 05 A6 |  if_e	mov	result1, #0
22660     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
22664     D0 FF 9F FD | 	jmp	#LR__3530
22668                 | LR__3531
22668                 | ' 	return((char *)--s);
22668     01 12 86 F1 | 	sub	arg01, #1
2266c     09 FB 01 F6 | 	mov	result1, arg01
22670                 | _fatfs_cc_strchr_ret
22670     2D 00 64 FD | 	ret
22674                 | 
22674                 | _fatfs_cc_disk_initialize
22674     04 4A 05 F6 | 	mov	COUNT_, #4
22678     A8 00 A0 FD | 	call	#pushregs_
2267c     40 F0 07 F1 | 	add	ptra, #64
22680     04 4E 05 F1 | 	add	fp, #4
22684     A7 12 42 FC | 	wrbyte	arg01, fp
22688     01 00 00 FF 
2268c     14 E4 05 F1 | 	add	objptr, ##532
22690     F2 18 02 FB | 	rdlong	arg04, objptr
22694     2C 4E 05 F1 | 	add	fp, #44
22698     A7 18 62 FC | 	wrlong	arg04, fp
2269c     04 E4 85 F1 | 	sub	objptr, #4
226a0     F2 18 02 FB | 	rdlong	arg04, objptr
226a4     04 4E 05 F1 | 	add	fp, #4
226a8     A7 18 62 FC | 	wrlong	arg04, fp
226ac     08 E4 05 F1 | 	add	objptr, #8
226b0     F2 18 02 FB | 	rdlong	arg04, objptr
226b4     04 4E 05 F1 | 	add	fp, #4
226b8     A7 18 62 FC | 	wrlong	arg04, fp
226bc     04 E4 05 F1 | 	add	objptr, #4
226c0     F2 18 02 FB | 	rdlong	arg04, objptr
226c4     04 4E 05 F1 | 	add	fp, #4
226c8     A7 18 62 FC | 	wrlong	arg04, fp
226cc     04 E4 05 F1 | 	add	objptr, #4
226d0     F2 02 48 FC | 	wrbyte	#1, objptr
226d4     01 00 00 FF 
226d8     20 E4 85 F1 | 	sub	objptr, ##544
226dc     38 4E 85 F1 | 	sub	fp, #56
226e0     A7 18 CA FA | 	rdbyte	arg04, fp wz
226e4     04 4E 85 F1 | 	sub	fp, #4
226e8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
226e8                 | '             return RES_NOTRDY;
226e8     03 FA 05 56 |  if_ne	mov	result1, #3
226ec     D8 05 90 5D |  if_ne	jmp	#LR__3558
226f0     13 00 00 FF 
226f4     10 13 06 F6 | 	mov	arg01, ##10000
226f8     A4 9A BF FD | 	call	#__system___waitus
226fc     30 4E 05 F1 | 	add	fp, #48
22700     A7 12 02 FB | 	rdlong	arg01, fp
22704     09 01 08 FC | 	wrpin	#0, arg01
22708     04 4E 05 F1 | 	add	fp, #4
2270c     A7 12 02 FB | 	rdlong	arg01, fp
22710     09 01 08 FC | 	wrpin	#0, arg01
22714     04 4E 05 F1 | 	add	fp, #4
22718     A7 12 02 FB | 	rdlong	arg01, fp
2271c     09 01 08 FC | 	wrpin	#0, arg01
22720     04 4E 05 F1 | 	add	fp, #4
22724     A7 12 02 FB | 	rdlong	arg01, fp
22728     09 00 80 FF 
2272c     09 01 08 FC | 	wrpin	##4608, arg01
22730     0C 4E 85 F1 | 	sub	fp, #12
22734     A7 12 02 FB | 	rdlong	arg01, fp
22738     59 12 62 FD | 	drvh	arg01
2273c     04 4E 05 F1 | 	add	fp, #4
22740     A7 12 02 FB | 	rdlong	arg01, fp
22744     59 12 62 FD | 	drvh	arg01
22748     04 4E 05 F1 | 	add	fp, #4
2274c     A7 12 02 FB | 	rdlong	arg01, fp
22750     59 12 62 FD | 	drvh	arg01
22754     04 4E 05 F1 | 	add	fp, #4
22758     A7 12 02 FB | 	rdlong	arg01, fp
2275c     59 12 62 FD | 	drvh	arg01
22760     20 4E 85 F1 | 	sub	fp, #32
22764     00 04 80 FF 
22768     A7 20 68 FC | 	wrlong	##524304, fp
2276c     04 4E 05 F1 | 	add	fp, #4
22770     20 03 80 FF 
22774     A7 90 68 FC | 	wrlong	##409672, fp
22778     14 4E 05 F1 | 	add	fp, #20
2277c     A7 1E 02 FB | 	rdlong	local01, fp
22780     18 4E 85 F1 | 	sub	fp, #24
22784     A7 16 02 FB | 	rdlong	arg03, fp
22788     40 1E 62 FD | 	dirl	local01
2278c     A0 03 80 FF 
22790     0F 91 08 FC | 	wrpin	##475208, local01
22794     0F 17 12 FC | 	wxpin	arg03, local01
22798     0F 01 28 FC | 	wypin	#0, local01
2279c     41 1E 62 FD | 	dirh	local01
227a0     1C 4E 05 F1 | 	add	fp, #28
227a4     A7 20 02 FB | 	rdlong	local02, fp
227a8     10 1F 82 F1 | 	sub	local01, local02
227ac     07 1E 06 F5 | 	and	local01, #7
227b0     18 1E 66 F0 | 	shl	local01, #24
227b4     78 14 06 F6 | 	mov	arg02, #120
227b8     0F 15 42 F5 | 	or	arg02, local01
227bc     14 4E 85 F1 | 	sub	fp, #20
227c0     A7 14 62 FC | 	wrlong	arg02, fp
227c4     14 4E 05 F1 | 	add	fp, #20
227c8     A7 12 02 FB | 	rdlong	arg01, fp
227cc     10 14 26 F4 | 	bith	arg02, #16
227d0     40 12 62 FD | 	dirl	arg01
227d4     09 15 02 FC | 	wrpin	arg02, arg01
227d8     09 3F 18 FC | 	wxpin	#31, arg01
227dc     FF FF FF FF 
227e0     09 FF 2B FC | 	wypin	##-1, arg01
227e4     41 12 62 FD | 	dirh	arg01
227e8     04 4E 85 F1 | 	sub	fp, #4
227ec     A7 14 02 FB | 	rdlong	arg02, fp
227f0     08 4E 05 F1 | 	add	fp, #8
227f4     A7 22 02 FB | 	rdlong	local03, fp
227f8     11 15 82 F1 | 	sub	arg02, local03
227fc     07 14 06 F5 | 	and	arg02, #7
22800     18 14 66 F0 | 	shl	arg02, #24
22804     14 4E 85 F1 | 	sub	fp, #20
22808     A7 14 62 FC | 	wrlong	arg02, fp
2280c     29 00 00 FF 
22810     7A 14 46 F5 | 	or	arg02, ##21114
22814     A7 14 62 FC | 	wrlong	arg02, fp
22818     14 4E 05 F1 | 	add	fp, #20
2281c     A7 12 02 FB | 	rdlong	arg01, fp
22820     40 12 62 FD | 	dirl	arg01
22824     09 15 02 FC | 	wrpin	arg02, arg01
22828     09 4F 18 FC | 	wxpin	#39, arg01
2282c     09 01 28 FC | 	wypin	#0, arg01
22830     41 12 62 FD | 	dirh	arg01
22834     28 4E 85 F1 | 	sub	fp, #40
22838     A7 12 02 F6 | 	mov	arg01, fp
2283c     14 4E 85 F1 | 	sub	fp, #20
22840     0A 14 06 F6 | 	mov	arg02, #10
22844     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1048
22848     00 12 06 F6 | 	mov	arg01, #0
2284c     00 14 06 F6 | 	mov	arg02, #0
22850     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22854     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1058
22858     64 12 06 F6 | 	mov	arg01, #100
2285c     40 99 BF FD | 	call	#__system___waitus
22860     14 4E 05 F1 | 	add	fp, #20
22864     A7 12 02 F6 | 	mov	arg01, fp
22868     14 4E 85 F1 | 	sub	fp, #20
2286c     0A 14 06 F6 | 	mov	arg02, #10
22870     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1048
22874     0C 4E 05 F1 | 	add	fp, #12
22878     A7 00 48 FC | 	wrbyte	#0, fp
2287c     0C 4E 85 F1 | 	sub	fp, #12
22880     00 12 06 F6 | 	mov	arg01, #0
22884     00 14 06 F6 | 	mov	arg02, #0
22888     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
2288c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
22890     01 18 0E F2 | 	cmp	arg04, #1 wz
22894     B8 03 90 5D |  if_ne	jmp	#LR__3557
22898     08 12 06 F6 | 	mov	arg01, #8
2289c     AA 15 06 F6 | 	mov	arg02, #426
228a0     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
228a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
228a8     01 FA 0D F2 | 	cmp	result1, #1 wz
228ac     98 01 90 5D |  if_ne	jmp	#LR__3543
228b0     14 4E 05 F1 | 	add	fp, #20
228b4     A7 12 02 F6 | 	mov	arg01, fp
228b8     14 4E 85 F1 | 	sub	fp, #20
228bc     04 14 06 F6 | 	mov	arg02, #4
228c0     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1048
228c4     16 4E 05 F1 | 	add	fp, #22
228c8     A7 24 C2 FA | 	rdbyte	local04, fp
228cc     16 4E 85 F1 | 	sub	fp, #22
228d0     01 24 0E F2 | 	cmp	local04, #1 wz
228d4     17 4E 05 A1 |  if_e	add	fp, #23
228d8     A7 22 C2 AA |  if_e	rdbyte	local03, fp
228dc     17 4E 85 A1 |  if_e	sub	fp, #23
228e0     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
228e4     68 03 90 5D |  if_ne	jmp	#LR__3556
228e8                 | ' 				for (tmr = 1000; tmr; tmr--) {
228e8     18 4E 05 F1 | 	add	fp, #24
228ec     01 00 80 FF 
228f0     A7 D0 6B FC | 	wrlong	##1000, fp
228f4     18 4E 85 F1 | 	sub	fp, #24
228f8                 | LR__3540
228f8     18 4E 05 F1 | 	add	fp, #24
228fc     A7 1E 0A FB | 	rdlong	local01, fp wz
22900     18 4E 85 F1 | 	sub	fp, #24
22904     3C 00 90 AD |  if_e	jmp	#LR__3541
22908     A9 12 06 F6 | 	mov	arg01, #169
2290c     1E 14 C6 F9 | 	decod	arg02, #30
22910     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22914     FD 24 02 F6 | 	mov	local04, result1
22918     07 24 4E F7 | 	zerox	local04, #7 wz
2291c     24 00 90 AD |  if_e	jmp	#LR__3541
22920     01 00 00 FF 
22924     E8 13 06 F6 | 	mov	arg01, ##1000
22928     74 98 BF FD | 	call	#__system___waitus
2292c     18 4E 05 F1 | 	add	fp, #24
22930     A7 24 02 FB | 	rdlong	local04, fp
22934     01 24 86 F1 | 	sub	local04, #1
22938     A7 24 62 FC | 	wrlong	local04, fp
2293c     18 4E 85 F1 | 	sub	fp, #24
22940     B4 FF 9F FD | 	jmp	#LR__3540
22944                 | LR__3541
22944     18 4E 05 F1 | 	add	fp, #24
22948     A7 24 0A FB | 	rdlong	local04, fp wz
2294c     18 4E 85 F1 | 	sub	fp, #24
22950     4C 00 90 AD |  if_e	jmp	#LR__3542
22954     3A 12 06 F6 | 	mov	arg01, #58
22958     00 14 06 F6 | 	mov	arg02, #0
2295c     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22960     FD 22 02 F6 | 	mov	local03, result1
22964     07 22 4E F7 | 	zerox	local03, #7 wz
22968     34 00 90 5D |  if_ne	jmp	#LR__3542
2296c     14 4E 05 F1 | 	add	fp, #20
22970     A7 12 02 F6 | 	mov	arg01, fp
22974     14 4E 85 F1 | 	sub	fp, #20
22978     04 14 06 F6 | 	mov	arg02, #4
2297c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1048
22980     14 4E 05 F1 | 	add	fp, #20
22984     A7 1E C2 FA | 	rdbyte	local01, fp
22988     40 1E CE F7 | 	test	local01, #64 wz
2298c     0C 24 06 56 |  if_ne	mov	local04, #12
22990     04 24 06 A6 |  if_e	mov	local04, #4
22994     08 4E 85 F1 | 	sub	fp, #8
22998     A7 24 42 FC | 	wrbyte	local04, fp
2299c     0C 4E 85 F1 | 	sub	fp, #12
229a0                 | LR__3542
229a0     14 24 06 FB | 	rdlong	local04, #20
229a4     18 4E 05 F1 | 	add	fp, #24
229a8     A7 24 62 FC | 	wrlong	local04, fp
229ac     0C 4E 05 F1 | 	add	fp, #12
229b0     A7 24 02 FB | 	rdlong	local04, fp
229b4     1B 24 26 F4 | 	bith	local04, #27
229b8     A7 24 62 FC | 	wrlong	local04, fp
229bc     0C 4E 85 F1 | 	sub	fp, #12
229c0     A7 24 02 FB | 	rdlong	local04, fp
229c4     18 4E 85 F1 | 	sub	fp, #24
229c8     68 78 04 FF 
229cc     81 25 16 F2 | 	cmp	local04, ##150000001 wc
229d0     1C 4E 05 C1 |  if_b	add	fp, #28
229d4     00 01 80 CF 
229d8     A7 08 68 CC |  if_b	wrlong	##131076, fp
229dc     1C 4E 85 C1 |  if_b	sub	fp, #28
229e0     6C 02 90 CD |  if_b	jmp	#LR__3556
229e4     18 4E 05 F1 | 	add	fp, #24
229e8     A7 24 02 FB | 	rdlong	local04, fp
229ec     18 4E 85 F1 | 	sub	fp, #24
229f0     E1 F5 05 FF 
229f4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
229f8     1C 4E 05 C1 |  if_b	add	fp, #28
229fc     00 01 80 CF 
22a00     A7 0A 68 CC |  if_b	wrlong	##131077, fp
22a04     1C 4E 85 C1 |  if_b	sub	fp, #28
22a08     44 02 90 CD |  if_b	jmp	#LR__3556
22a0c     18 4E 05 F1 | 	add	fp, #24
22a10     A7 24 02 FB | 	rdlong	local04, fp
22a14     18 4E 85 F1 | 	sub	fp, #24
22a18     3B 58 08 FF 
22a1c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
22a20     1C 4E 05 C1 |  if_b	add	fp, #28
22a24     00 01 80 CF 
22a28     A7 0C 68 CC |  if_b	wrlong	##131078, fp
22a2c     1C 4E 85 C1 |  if_b	sub	fp, #28
22a30     1C 02 90 CD |  if_b	jmp	#LR__3556
22a34     1C 4E 05 F1 | 	add	fp, #28
22a38     80 01 80 FF 
22a3c     A7 10 68 FC | 	wrlong	##196616, fp
22a40     1C 4E 85 F1 | 	sub	fp, #28
22a44     08 02 90 FD | 	jmp	#LR__3556
22a48                 | LR__3543
22a48     A9 12 06 F6 | 	mov	arg01, #169
22a4c     00 14 06 F6 | 	mov	arg02, #0
22a50     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22a54     FD 24 E2 F8 | 	getbyte	local04, result1, #0
22a58     02 24 16 F2 | 	cmp	local04, #2 wc
22a5c     18 00 90 3D |  if_ae	jmp	#LR__3544
22a60     0C 4E 05 F1 | 	add	fp, #12
22a64     A7 04 48 FC | 	wrbyte	#2, fp
22a68     04 4E 05 F1 | 	add	fp, #4
22a6c     A7 52 49 FC | 	wrbyte	#169, fp
22a70     10 4E 85 F1 | 	sub	fp, #16
22a74     14 00 90 FD | 	jmp	#LR__3545
22a78                 | LR__3544
22a78     0C 4E 05 F1 | 	add	fp, #12
22a7c     A7 02 48 FC | 	wrbyte	#1, fp
22a80     04 4E 05 F1 | 	add	fp, #4
22a84     A7 02 48 FC | 	wrbyte	#1, fp
22a88     10 4E 85 F1 | 	sub	fp, #16
22a8c                 | LR__3545
22a8c                 | ' 				ty =  0x01 ; cmd =  (1) ;
22a8c                 | ' 			}
22a8c                 | ' 			for (tmr = 1000; tmr; tmr--) {
22a8c     18 4E 05 F1 | 	add	fp, #24
22a90     01 00 80 FF 
22a94     A7 D0 6B FC | 	wrlong	##1000, fp
22a98     18 4E 85 F1 | 	sub	fp, #24
22a9c                 | LR__3546
22a9c     18 4E 05 F1 | 	add	fp, #24
22aa0     A7 22 0A FB | 	rdlong	local03, fp wz
22aa4     18 4E 85 F1 | 	sub	fp, #24
22aa8     44 00 90 AD |  if_e	jmp	#LR__3547
22aac     10 4E 05 F1 | 	add	fp, #16
22ab0     A7 12 C2 FA | 	rdbyte	arg01, fp
22ab4     10 4E 85 F1 | 	sub	fp, #16
22ab8     00 14 06 F6 | 	mov	arg02, #0
22abc     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22ac0     FD 24 02 F6 | 	mov	local04, result1
22ac4     07 24 4E F7 | 	zerox	local04, #7 wz
22ac8     24 00 90 AD |  if_e	jmp	#LR__3547
22acc     01 00 00 FF 
22ad0     E8 13 06 F6 | 	mov	arg01, ##1000
22ad4     C8 96 BF FD | 	call	#__system___waitus
22ad8     18 4E 05 F1 | 	add	fp, #24
22adc     A7 24 02 FB | 	rdlong	local04, fp
22ae0     01 24 86 F1 | 	sub	local04, #1
22ae4     A7 24 62 FC | 	wrlong	local04, fp
22ae8     18 4E 85 F1 | 	sub	fp, #24
22aec     AC FF 9F FD | 	jmp	#LR__3546
22af0                 | LR__3547
22af0     18 4E 05 F1 | 	add	fp, #24
22af4     A7 24 0A FB | 	rdlong	local04, fp wz
22af8     18 4E 85 F1 | 	sub	fp, #24
22afc     14 00 90 AD |  if_e	jmp	#LR__3548
22b00     10 12 06 F6 | 	mov	arg01, #16
22b04     09 14 C6 F9 | 	decod	arg02, #9
22b08     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22b0c     07 FA 4D F7 | 	zerox	result1, #7 wz
22b10     0C 00 90 AD |  if_e	jmp	#LR__3549
22b14                 | LR__3548
22b14     0C 4E 05 F1 | 	add	fp, #12
22b18     A7 00 48 FC | 	wrbyte	#0, fp
22b1c     0C 4E 85 F1 | 	sub	fp, #12
22b20                 | LR__3549
22b20     14 24 06 FB | 	rdlong	local04, #20
22b24     18 4E 05 F1 | 	add	fp, #24
22b28     A7 24 62 FC | 	wrlong	local04, fp
22b2c     18 4E 85 F1 | 	sub	fp, #24
22b30     F0 FA 02 FF 
22b34     01 25 16 F2 | 	cmp	local04, ##100000001 wc
22b38     18 00 90 3D |  if_ae	jmp	#LR__3550
22b3c     24 4E 05 F1 | 	add	fp, #36
22b40     A7 24 02 FB | 	rdlong	local04, fp
22b44     1B 24 26 F4 | 	bith	local04, #27
22b48     A7 24 62 FC | 	wrlong	local04, fp
22b4c     24 4E 85 F1 | 	sub	fp, #36
22b50     2C 00 90 FD | 	jmp	#LR__3551
22b54                 | LR__3550
22b54     18 4E 05 F1 | 	add	fp, #24
22b58     A7 24 02 FB | 	rdlong	local04, fp
22b5c     18 4E 85 F1 | 	sub	fp, #24
22b60     E1 F5 05 FF 
22b64     01 24 16 F2 | 	cmp	local04, ##200000001 wc
22b68     24 4E 05 C1 |  if_b	add	fp, #36
22b6c     A7 24 02 CB |  if_b	rdlong	local04, fp
22b70     80 00 04 CF 
22b74     00 24 46 C5 |  if_b	or	local04, ##134283264
22b78     A7 24 62 CC |  if_b	wrlong	local04, fp
22b7c     24 4E 85 C1 |  if_b	sub	fp, #36
22b80                 | LR__3551
22b80     18 4E 05 F1 | 	add	fp, #24
22b84     A7 24 02 FB | 	rdlong	local04, fp
22b88     18 4E 85 F1 | 	sub	fp, #24
22b8c     F0 FA 02 FF 
22b90     01 25 16 F2 | 	cmp	local04, ##100000001 wc
22b94     1C 4E 05 C1 |  if_b	add	fp, #28
22b98     00 01 80 CF 
22b9c     A7 08 68 CC |  if_b	wrlong	##131076, fp
22ba0     1C 4E 85 C1 |  if_b	sub	fp, #28
22ba4     A8 00 90 CD |  if_b	jmp	#LR__3555
22ba8     18 4E 05 F1 | 	add	fp, #24
22bac     A7 24 02 FB | 	rdlong	local04, fp
22bb0     18 4E 85 F1 | 	sub	fp, #24
22bb4     68 78 04 FF 
22bb8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
22bbc     1C 4E 05 C1 |  if_b	add	fp, #28
22bc0     80 01 80 CF 
22bc4     A7 0C 68 CC |  if_b	wrlong	##196614, fp
22bc8     1C 4E 85 C1 |  if_b	sub	fp, #28
22bcc     80 00 90 CD |  if_b	jmp	#LR__3554
22bd0     18 4E 05 F1 | 	add	fp, #24
22bd4     A7 24 02 FB | 	rdlong	local04, fp
22bd8     18 4E 85 F1 | 	sub	fp, #24
22bdc     E1 F5 05 FF 
22be0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
22be4     1C 4E 05 C1 |  if_b	add	fp, #28
22be8     00 02 80 CF 
22bec     A7 10 68 CC |  if_b	wrlong	##262152, fp
22bf0     1C 4E 85 C1 |  if_b	sub	fp, #28
22bf4     58 00 90 CD |  if_b	jmp	#LR__3553
22bf8     18 4E 05 F1 | 	add	fp, #24
22bfc     A7 24 02 FB | 	rdlong	local04, fp
22c00     18 4E 85 F1 | 	sub	fp, #24
22c04     59 73 07 FF 
22c08     81 24 16 F2 | 	cmp	local04, ##250000001 wc
22c0c     1C 4E 05 C1 |  if_b	add	fp, #28
22c10     80 02 80 CF 
22c14     A7 14 68 CC |  if_b	wrlong	##327690, fp
22c18     1C 4E 85 C1 |  if_b	sub	fp, #28
22c1c     30 00 90 CD |  if_b	jmp	#LR__3552
22c20     18 4E 05 F1 | 	add	fp, #24
22c24     A7 24 02 FB | 	rdlong	local04, fp
22c28     18 4E 85 F1 | 	sub	fp, #24
22c2c     D1 F0 08 FF 
22c30     01 25 16 F2 | 	cmp	local04, ##300000001 wc
22c34     1C 4E 05 C1 |  if_b	add	fp, #28
22c38     00 03 80 CF 
22c3c     A7 18 68 CC |  if_b	wrlong	##393228, fp
22c40     1C 4E 85 F3 | 	sumc	fp, #28
22c44     80 03 80 3F 
22c48     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
22c4c     1C 4E 85 31 |  if_ae	sub	fp, #28
22c50                 | LR__3552
22c50                 | LR__3553
22c50                 | LR__3554
22c50                 | LR__3555
22c50                 | LR__3556
22c50                 | LR__3557
22c50     0C 4E 05 F1 | 	add	fp, #12
22c54     A7 24 C2 FA | 	rdbyte	local04, fp
22c58     01 00 00 FF 
22c5c     21 E4 05 F1 | 	add	objptr, ##545
22c60     F2 24 42 FC | 	wrbyte	local04, objptr
22c64     A7 1E CA FA | 	rdbyte	local01, fp wz
22c68     00 24 06 56 |  if_ne	mov	local04, #0
22c6c     01 24 06 A6 |  if_e	mov	local04, #1
22c70     20 4E 05 F1 | 	add	fp, #32
22c74     A7 24 42 FC | 	wrbyte	local04, fp
22c78     A7 24 C2 FA | 	rdbyte	local04, fp
22c7c     2C 4E 85 F1 | 	sub	fp, #44
22c80     01 E4 85 F1 | 	sub	objptr, #1
22c84     F2 24 42 FC | 	wrbyte	local04, objptr
22c88     01 00 00 FF 
22c8c     20 E4 85 F1 | 	sub	objptr, ##544
22c90     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1058
22c94     34 4E 05 F1 | 	add	fp, #52
22c98     A7 12 02 FB | 	rdlong	arg01, fp
22c9c     18 4E 85 F1 | 	sub	fp, #24
22ca0     A7 14 02 FB | 	rdlong	arg02, fp
22ca4     09 15 12 FC | 	wxpin	arg02, arg01
22ca8     1C 4E 05 F1 | 	add	fp, #28
22cac     A7 12 02 FB | 	rdlong	arg01, fp
22cb0     14 4E 85 F1 | 	sub	fp, #20
22cb4     A7 14 02 FB | 	rdlong	arg02, fp
22cb8     09 15 02 FC | 	wrpin	arg02, arg01
22cbc                 | ' 
22cbc                 | ' 		}
22cbc                 | ' 	}
22cbc                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
22cbc                 | ' 	CardType = ty;
22cbc                 | ' 	s = ty ? 0 :  0x01 ;
22cbc                 | ' 	Stat = s;
22cbc                 | ' 
22cbc                 | ' 	deselect();
22cbc                 | ' 
22cbc                 | ' 
22cbc                 | ' 	_wxpin( PIN_CLK, ck_div );
22cbc                 | ' 	_wrpin( PIN_DI, spm_tx );
22cbc                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
22cbc                 | ' 	return s;
22cbc     08 4E 05 F1 | 	add	fp, #8
22cc0     A7 FA C1 FA | 	rdbyte	result1, fp
22cc4     2C 4E 85 F1 | 	sub	fp, #44
22cc8                 | LR__3558
22cc8     A7 F0 03 F6 | 	mov	ptra, fp
22ccc     B2 00 A0 FD | 	call	#popregs_
22cd0                 | _fatfs_cc_disk_initialize_ret
22cd0     2D 00 64 FD | 	ret
22cd4                 | 
22cd4                 | _fatfs_cc_disk_read
22cd4     05 4A 05 F6 | 	mov	COUNT_, #5
22cd8     A8 00 A0 FD | 	call	#pushregs_
22cdc     0A 1F 02 F6 | 	mov	local01, arg02
22ce0     0B 21 02 F6 | 	mov	local02, arg03
22ce4     0C 23 02 F6 | 	mov	local03, arg04
22ce8     00 12 0E F2 | 	cmp	arg01, #0 wz
22cec     01 FA 05 56 |  if_ne	mov	result1, #1
22cf0                 | ' 
22cf0                 | ' 	return Stat;
22cf0     01 00 00 AF 
22cf4     20 E4 05 A1 |  if_e	add	objptr, ##544
22cf8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22cfc     01 00 00 AF 
22d00     20 E4 85 A1 |  if_e	sub	objptr, ##544
22d04     FD FA E1 F8 | 	getbyte	result1, result1, #0
22d08     01 FA CD F7 | 	test	result1, #1 wz
22d0c     03 FA 05 56 |  if_ne	mov	result1, #3
22d10     84 00 90 5D |  if_ne	jmp	#LR__3562
22d14     01 00 00 FF 
22d18     21 E4 05 F1 | 	add	objptr, ##545
22d1c     F2 24 C2 FA | 	rdbyte	local04, objptr
22d20     01 00 00 FF 
22d24     21 E4 85 F1 | 	sub	objptr, ##545
22d28     08 24 CE F7 | 	test	local04, #8 wz
22d2c     09 20 66 A0 |  if_e	shl	local02, #9
22d30     02 22 16 F2 | 	cmp	local03, #2 wc
22d34     12 24 06 36 |  if_ae	mov	local04, #18
22d38     11 24 06 C6 |  if_b	mov	local04, #17
22d3c     10 15 02 F6 | 	mov	arg02, local02
22d40     12 13 02 F6 | 	mov	arg01, local04
22d44     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22d48     FD 26 02 F6 | 	mov	local05, result1
22d4c     07 26 4E F7 | 	zerox	local05, #7 wz
22d50     30 00 90 5D |  if_ne	jmp	#LR__3561
22d54                 | ' 		do {
22d54                 | LR__3560
22d54     0F 13 02 F6 | 	mov	arg01, local01
22d58     09 14 C6 F9 | 	decod	arg02, #9
22d5c     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1066
22d60     00 FA 0D F2 | 	cmp	result1, #0 wz
22d64     01 00 00 5F 
22d68     00 1E 06 51 |  if_ne	add	local01, ##512
22d6c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3560
22d70     12 25 E2 F8 | 	getbyte	local04, local04, #0
22d74     12 24 0E F2 | 	cmp	local04, #18 wz
22d78     0C 12 06 A6 |  if_e	mov	arg01, #12
22d7c     00 14 06 A6 |  if_e	mov	arg02, #0
22d80     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1072
22d84                 | LR__3561
22d84     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1058
22d88                 | ' 	}
22d88                 | ' 	deselect();
22d88                 | ' 
22d88                 | ' 	return count ? RES_ERROR : RES_OK;
22d88     00 22 0E F2 | 	cmp	local03, #0 wz
22d8c     01 26 06 56 |  if_ne	mov	local05, #1
22d90     00 26 06 A6 |  if_e	mov	local05, #0
22d94     13 FB 01 F6 | 	mov	result1, local05
22d98                 | LR__3562
22d98     A7 F0 03 F6 | 	mov	ptra, fp
22d9c     B2 00 A0 FD | 	call	#popregs_
22da0                 | _fatfs_cc_disk_read_ret
22da0     2D 00 64 FD | 	ret
22da4                 | 
22da4                 | _fatfs_cc_disk_write
22da4     04 4A 05 F6 | 	mov	COUNT_, #4
22da8     A8 00 A0 FD | 	call	#pushregs_
22dac     0A 1F 02 F6 | 	mov	local01, arg02
22db0     0C 21 02 F6 | 	mov	local02, arg04
22db4     0B 23 02 F6 | 	mov	local03, arg03
22db8     00 12 0E F2 | 	cmp	arg01, #0 wz
22dbc     01 FA 05 56 |  if_ne	mov	result1, #1
22dc0                 | ' 
22dc0                 | ' 	return Stat;
22dc0     01 00 00 AF 
22dc4     20 E4 05 A1 |  if_e	add	objptr, ##544
22dc8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22dcc     01 00 00 AF 
22dd0     20 E4 85 A1 |  if_e	sub	objptr, ##544
22dd4     FD FA E1 F8 | 	getbyte	result1, result1, #0
22dd8     01 FA CD F7 | 	test	result1, #1 wz
22ddc     03 FA 05 56 |  if_ne	mov	result1, #3
22de0     D4 00 90 5D |  if_ne	jmp	#LR__3574
22de4     01 00 00 FF 
22de8     21 E4 05 F1 | 	add	objptr, ##545
22dec     F2 16 C2 FA | 	rdbyte	arg03, objptr
22df0     01 00 00 FF 
22df4     21 E4 85 F1 | 	sub	objptr, ##545
22df8     08 16 CE F7 | 	test	arg03, #8 wz
22dfc     09 22 66 A0 |  if_e	shl	local03, #9
22e00     01 20 0E F2 | 	cmp	local02, #1 wz
22e04     30 00 90 5D |  if_ne	jmp	#LR__3570
22e08     18 12 06 F6 | 	mov	arg01, #24
22e0c     11 15 02 F6 | 	mov	arg02, local03
22e10     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22e14     FD 24 02 F6 | 	mov	local04, result1
22e18     07 24 4E F7 | 	zerox	local04, #7 wz
22e1c     84 00 90 5D |  if_ne	jmp	#LR__3573
22e20     0F 13 02 F6 | 	mov	arg01, local01
22e24     FE 14 06 F6 | 	mov	arg02, #254
22e28     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1068
22e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
22e30     00 20 06 56 |  if_ne	mov	local02, #0
22e34     6C 00 90 FD | 	jmp	#LR__3573
22e38                 | LR__3570
22e38     01 00 00 FF 
22e3c     21 E4 05 F1 | 	add	objptr, ##545
22e40     F2 24 C2 FA | 	rdbyte	local04, objptr
22e44     01 00 00 FF 
22e48     21 E4 85 F1 | 	sub	objptr, ##545
22e4c     06 24 CE F7 | 	test	local04, #6 wz
22e50     97 12 06 56 |  if_ne	mov	arg01, #151
22e54     10 15 02 56 |  if_ne	mov	arg02, local02
22e58     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1072
22e5c     11 15 02 F6 | 	mov	arg02, local03
22e60     19 12 06 F6 | 	mov	arg01, #25
22e64     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22e68     FD 24 02 F6 | 	mov	local04, result1
22e6c     07 24 4E F7 | 	zerox	local04, #7 wz
22e70     30 00 90 5D |  if_ne	jmp	#LR__3572
22e74                 | ' 			do {
22e74                 | LR__3571
22e74     0F 13 02 F6 | 	mov	arg01, local01
22e78     FC 14 06 F6 | 	mov	arg02, #252
22e7c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1068
22e80     00 FA 0D F2 | 	cmp	result1, #0 wz
22e84     01 00 00 5F 
22e88     00 1E 06 51 |  if_ne	add	local01, ##512
22e8c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3571
22e90     00 12 06 F6 | 	mov	arg01, #0
22e94     FD 14 06 F6 | 	mov	arg02, #253
22e98     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1068
22e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
22ea0     01 20 06 A6 |  if_e	mov	local02, #1
22ea4                 | LR__3572
22ea4                 | LR__3573
22ea4     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1058
22ea8                 | ' 				count = 1;
22ea8                 | ' 		}
22ea8                 | ' 	}
22ea8                 | ' 	deselect();
22ea8                 | ' 
22ea8                 | ' 	return count ? RES_ERROR : RES_OK;
22ea8     00 20 0E F2 | 	cmp	local02, #0 wz
22eac     01 24 06 56 |  if_ne	mov	local04, #1
22eb0     00 24 06 A6 |  if_e	mov	local04, #0
22eb4     12 FB 01 F6 | 	mov	result1, local04
22eb8                 | LR__3574
22eb8     A7 F0 03 F6 | 	mov	ptra, fp
22ebc     B2 00 A0 FD | 	call	#popregs_
22ec0                 | _fatfs_cc_disk_write_ret
22ec0     2D 00 64 FD | 	ret
22ec4                 | 
22ec4                 | _fatfs_cc_disk_ioctl
22ec4     01 4A 05 F6 | 	mov	COUNT_, #1
22ec8     A8 00 A0 FD | 	call	#pushregs_
22ecc     30 F0 07 F1 | 	add	ptra, #48
22ed0     04 4E 05 F1 | 	add	fp, #4
22ed4     A7 12 42 FC | 	wrbyte	arg01, fp
22ed8     04 4E 05 F1 | 	add	fp, #4
22edc     A7 14 42 FC | 	wrbyte	arg02, fp
22ee0     04 4E 05 F1 | 	add	fp, #4
22ee4     A7 16 62 FC | 	wrlong	arg03, fp
22ee8     08 4E 85 F1 | 	sub	fp, #8
22eec     A7 12 CA FA | 	rdbyte	arg01, fp wz
22ef0     04 4E 85 F1 | 	sub	fp, #4
22ef4     01 FA 05 56 |  if_ne	mov	result1, #1
22ef8                 | ' 
22ef8                 | ' 	return Stat;
22ef8     01 00 00 AF 
22efc     20 E4 05 A1 |  if_e	add	objptr, ##544
22f00     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
22f04     01 00 00 AF 
22f08     20 E4 85 A1 |  if_e	sub	objptr, ##544
22f0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
22f10     01 FA CD F7 | 	test	result1, #1 wz
22f14     03 FA 05 56 |  if_ne	mov	result1, #3
22f18     E4 01 90 5D |  if_ne	jmp	#LR__3588
22f1c     10 4E 05 F1 | 	add	fp, #16
22f20     A7 02 68 FC | 	wrlong	#1, fp
22f24                 | ' 
22f24                 | ' 	res = RES_ERROR;
22f24                 | ' 	switch (ctrl) {
22f24     08 4E 85 F1 | 	sub	fp, #8
22f28     A7 1E C2 FA | 	rdbyte	local01, fp
22f2c     08 4E 85 F1 | 	sub	fp, #8
22f30     04 1E 26 F3 | 	fle	local01, #4
22f34     30 1E 62 FD | 	jmprel	local01
22f38                 | LR__3580
22f38     10 00 90 FD | 	jmp	#LR__3581
22f3c     24 00 90 FD | 	jmp	#LR__3582
22f40     A0 01 90 FD | 	jmp	#LR__3586
22f44     80 01 90 FD | 	jmp	#LR__3585
22f48     98 01 90 FD | 	jmp	#LR__3586
22f4c                 | LR__3581
22f4c     B4 79 B0 FD | 	call	#_fatfs_cc_select_1062
22f50     00 FA 0D F2 | 	cmp	result1, #0 wz
22f54     10 4E 05 51 |  if_ne	add	fp, #16
22f58     A7 00 68 5C |  if_ne	wrlong	#0, fp
22f5c     10 4E 85 51 |  if_ne	sub	fp, #16
22f60                 | ' 			break;
22f60     8C 01 90 FD | 	jmp	#LR__3587
22f64                 | LR__3582
22f64     09 12 06 F6 | 	mov	arg01, #9
22f68     00 14 06 F6 | 	mov	arg02, #0
22f6c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1072
22f70     FD 1E 02 F6 | 	mov	local01, result1
22f74     07 1E 4E F7 | 	zerox	local01, #7 wz
22f78     74 01 90 5D |  if_ne	jmp	#LR__3587
22f7c     18 4E 05 F1 | 	add	fp, #24
22f80     A7 12 02 F6 | 	mov	arg01, fp
22f84     18 4E 85 F1 | 	sub	fp, #24
22f88     10 14 06 F6 | 	mov	arg02, #16
22f8c     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1066
22f90     00 FA 0D F2 | 	cmp	result1, #0 wz
22f94     58 01 90 AD |  if_e	jmp	#LR__3587
22f98     18 4E 05 F1 | 	add	fp, #24
22f9c     A7 1E C2 FA | 	rdbyte	local01, fp
22fa0     18 4E 85 F1 | 	sub	fp, #24
22fa4     06 1E 46 F0 | 	shr	local01, #6
22fa8     01 1E 0E F2 | 	cmp	local01, #1 wz
22fac     5C 00 90 5D |  if_ne	jmp	#LR__3583
22fb0     21 4E 05 F1 | 	add	fp, #33
22fb4     A7 1E C2 FA | 	rdbyte	local01, fp
22fb8     01 4E 85 F1 | 	sub	fp, #1
22fbc     A7 FA C1 FA | 	rdbyte	result1, fp
22fc0     FD FA 31 F9 | 	getword	result1, result1, #0
22fc4     08 FA 65 F0 | 	shl	result1, #8
22fc8     FD 1E 02 F1 | 	add	local01, result1
22fcc     01 4E 85 F1 | 	sub	fp, #1
22fd0     A7 FA C1 FA | 	rdbyte	result1, fp
22fd4     3F FA 05 F5 | 	and	result1, #63
22fd8     10 FA 65 F0 | 	shl	result1, #16
22fdc     FD 1E 02 F1 | 	add	local01, result1
22fe0     01 1E 06 F1 | 	add	local01, #1
22fe4     09 4E 05 F1 | 	add	fp, #9
22fe8     A7 1E 62 FC | 	wrlong	local01, fp
22fec     1C 4E 85 F1 | 	sub	fp, #28
22ff0     A7 1E 02 FB | 	rdlong	local01, fp
22ff4     1C 4E 05 F1 | 	add	fp, #28
22ff8     A7 FA 01 FB | 	rdlong	result1, fp
22ffc     28 4E 85 F1 | 	sub	fp, #40
23000     0A FA 65 F0 | 	shl	result1, #10
23004     0F FB 61 FC | 	wrlong	result1, local01
23008     AC 00 90 FD | 	jmp	#LR__3584
2300c                 | LR__3583
2300c     1D 4E 05 F1 | 	add	fp, #29
23010     A7 1E C2 FA | 	rdbyte	local01, fp
23014     0F 1F 42 F8 | 	getnib	local01, local01, #0
23018     05 4E 05 F1 | 	add	fp, #5
2301c     A7 FA C1 FA | 	rdbyte	result1, fp
23020     80 FA 05 F5 | 	and	result1, #128
23024     07 FA C5 F0 | 	sar	result1, #7
23028     FD 1E 02 F1 | 	add	local01, result1
2302c     01 4E 85 F1 | 	sub	fp, #1
23030     A7 FA C1 FA | 	rdbyte	result1, fp
23034     03 FA 05 F5 | 	and	result1, #3
23038     01 FA 65 F0 | 	shl	result1, #1
2303c     FD 1E 02 F1 | 	add	local01, result1
23040     02 1E 06 F1 | 	add	local01, #2
23044     0D 4E 85 F1 | 	sub	fp, #13
23048     A7 1E 42 FC | 	wrbyte	local01, fp
2304c     0C 4E 05 F1 | 	add	fp, #12
23050     A7 1E C2 FA | 	rdbyte	local01, fp
23054     06 1E 46 F0 | 	shr	local01, #6
23058     01 4E 85 F1 | 	sub	fp, #1
2305c     A7 FA C1 FA | 	rdbyte	result1, fp
23060     FD FA 31 F9 | 	getword	result1, result1, #0
23064     02 FA 65 F0 | 	shl	result1, #2
23068     FD 1E 02 F1 | 	add	local01, result1
2306c     01 4E 85 F1 | 	sub	fp, #1
23070     A7 FA C1 FA | 	rdbyte	result1, fp
23074     03 FA 05 F5 | 	and	result1, #3
23078     FD FA 31 F9 | 	getword	result1, result1, #0
2307c     0A FA 65 F0 | 	shl	result1, #10
23080     FD 1E 02 F1 | 	add	local01, result1
23084     01 1E 06 F1 | 	add	local01, #1
23088     0A 4E 05 F1 | 	add	fp, #10
2308c     A7 1E 62 FC | 	wrlong	local01, fp
23090     1C 4E 85 F1 | 	sub	fp, #28
23094     A7 1E 02 FB | 	rdlong	local01, fp
23098     1C 4E 05 F1 | 	add	fp, #28
2309c     A7 FA 01 FB | 	rdlong	result1, fp
230a0     14 4E 85 F1 | 	sub	fp, #20
230a4     A7 16 C2 FA | 	rdbyte	arg03, fp
230a8     14 4E 85 F1 | 	sub	fp, #20
230ac     09 16 86 F1 | 	sub	arg03, #9
230b0     0B FB 61 F0 | 	shl	result1, arg03
230b4     0F FB 61 FC | 	wrlong	result1, local01
230b8                 | LR__3584
230b8     10 4E 05 F1 | 	add	fp, #16
230bc     A7 00 68 FC | 	wrlong	#0, fp
230c0     10 4E 85 F1 | 	sub	fp, #16
230c4                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
230c4                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
230c4                 | ' 					*(LBA_t*)buff = cs << (n - 9);
230c4                 | ' 				}
230c4                 | ' 				res = RES_OK;
230c4                 | ' 			}
230c4                 | ' 			break;
230c4     28 00 90 FD | 	jmp	#LR__3587
230c8                 | LR__3585
230c8     0C 4E 05 F1 | 	add	fp, #12
230cc     A7 1E 02 FB | 	rdlong	local01, fp
230d0     0F 01 69 FC | 	wrlong	#128, local01
230d4     04 4E 05 F1 | 	add	fp, #4
230d8     A7 00 68 FC | 	wrlong	#0, fp
230dc     10 4E 85 F1 | 	sub	fp, #16
230e0                 | ' 			*(DWORD*)buff = 128;
230e0                 | ' 			res = RES_OK;
230e0                 | ' 			break;
230e0     0C 00 90 FD | 	jmp	#LR__3587
230e4                 | LR__3586
230e4     10 4E 05 F1 | 	add	fp, #16
230e8     A7 08 68 FC | 	wrlong	#4, fp
230ec     10 4E 85 F1 | 	sub	fp, #16
230f0                 | LR__3587
230f0     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1058
230f4                 | ' 			res = RES_PARERR;
230f4                 | ' 	}
230f4                 | ' 
230f4                 | ' 	deselect();
230f4                 | ' 
230f4                 | ' 	return res;
230f4     10 4E 05 F1 | 	add	fp, #16
230f8     A7 FA 01 FB | 	rdlong	result1, fp
230fc     10 4E 85 F1 | 	sub	fp, #16
23100                 | LR__3588
23100     A7 F0 03 F6 | 	mov	ptra, fp
23104     B2 00 A0 FD | 	call	#popregs_
23108                 | _fatfs_cc_disk_ioctl_ret
23108     2D 00 64 FD | 	ret
2310c                 | 
2310c                 | _fatfs_cc_disk_setpins
2310c     00 12 0E F2 | 	cmp	arg01, #0 wz
23110     01 FA 65 56 |  if_ne	neg	result1, #1
23114     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
23118     01 00 00 FF 
2311c     10 E4 05 F1 | 	add	objptr, ##528
23120     F2 14 62 FC | 	wrlong	arg02, objptr
23124     04 E4 05 F1 | 	add	objptr, #4
23128     F2 16 62 FC | 	wrlong	arg03, objptr
2312c     04 E4 05 F1 | 	add	objptr, #4
23130     F2 18 62 FC | 	wrlong	arg04, objptr
23134     04 E4 05 F1 | 	add	objptr, #4
23138     F2 1A 62 FC | 	wrlong	arg05, objptr
2313c     01 00 00 FF 
23140     1C E4 85 F1 | 	sub	objptr, ##540
23144     00 FA 05 F6 | 	mov	result1, #0
23148                 | _fatfs_cc_disk_setpins_ret
23148     2D 00 64 FD | 	ret
2314c                 | 
2314c                 | _fatfs_cc_tchar2uni
2314c     09 01 02 FB | 	rdlong	_var01, arg01
23150     00 03 02 F6 | 	mov	_var02, _var01
23154     01 00 06 F1 | 	add	_var01, #1
23158     00 05 02 F6 | 	mov	_var03, _var01
2315c     01 07 C2 FA | 	rdbyte	_var04, _var02
23160     80 06 CE F7 | 	test	_var04, #128 wz
23164     E8 00 90 AD |  if_e	jmp	#LR__3597
23168     03 09 02 F6 | 	mov	_var05, _var04
2316c     E0 08 06 F5 | 	and	_var05, #224
23170     C0 08 0E F2 | 	cmp	_var05, #192 wz
23174     1F 06 06 A5 |  if_e	and	_var04, #31
23178     01 0A 06 A6 |  if_e	mov	_var06, #1
2317c     34 00 90 AD |  if_e	jmp	#LR__3591
23180     03 09 02 F6 | 	mov	_var05, _var04
23184     F0 08 06 F5 | 	and	_var05, #240
23188     E0 08 0E F2 | 	cmp	_var05, #224 wz
2318c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
23190     02 0A 06 A6 |  if_e	mov	_var06, #2
23194     1C 00 90 AD |  if_e	jmp	#LR__3590
23198     03 09 02 F6 | 	mov	_var05, _var04
2319c     F8 08 06 F5 | 	and	_var05, #248
231a0     F0 08 0E F2 | 	cmp	_var05, #240 wz
231a4     07 06 06 A5 |  if_e	and	_var04, #7
231a8     03 0A 06 A6 |  if_e	mov	_var06, #3
231ac                 | ' 			return 0xFFFFFFFF;
231ac     01 FA 65 56 |  if_ne	neg	result1, #1
231b0     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
231b4                 | LR__3590
231b4                 | LR__3591
231b4                 | ' 		}
231b4                 | ' 		do {
231b4                 | LR__3592
231b4     02 0D C2 FA | 	rdbyte	_var07, _var03
231b8     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
231bc     C0 08 06 F5 | 	and	_var05, #192
231c0     80 08 0E F2 | 	cmp	_var05, #128 wz
231c4     01 04 06 F1 | 	add	_var03, #1
231c8     01 FA 65 56 |  if_ne	neg	result1, #1
231cc     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
231d0     06 06 66 F0 | 	shl	_var04, #6
231d4     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
231d8     3F 02 06 F5 | 	and	_var02, #63
231dc     01 07 42 F5 | 	or	_var04, _var02
231e0     F4 0B 6E FB | 	djnz	_var06, #LR__3592
231e4     80 06 16 F2 | 	cmp	_var04, #128 wc
231e8     24 00 90 CD |  if_b	jmp	#LR__3594
231ec     6C 00 00 FF 
231f0     00 06 16 F2 | 	cmp	_var04, ##55296 wc
231f4     0C 00 90 CD |  if_b	jmp	#LR__3593
231f8     70 00 00 FF 
231fc     00 06 16 F2 | 	cmp	_var04, ##57344 wc
23200     0C 00 90 CD |  if_b	jmp	#LR__3594
23204                 | LR__3593
23204     80 08 00 FF 
23208     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2320c     08 00 90 CD |  if_b	jmp	#LR__3595
23210                 | LR__3594
23210     01 FA 65 F6 | 	neg	result1, #1
23214     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
23218                 | LR__3595
23218     80 00 00 FF 
2321c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
23220     2C 00 90 CD |  if_b	jmp	#LR__3596
23224     03 03 02 F6 | 	mov	_var02, _var04
23228     80 00 00 FF 
2322c     00 02 86 F1 | 	sub	_var02, ##65536
23230     06 02 66 F0 | 	shl	_var02, #6
23234     80 FF 01 FF 
23238     00 02 06 F5 | 	and	_var02, ##67043328
2323c     6E 00 6C FF 
23240     00 08 06 F6 | 	mov	_var05, ##-671032320
23244     01 09 42 F5 | 	or	_var05, _var02
23248     09 06 46 F7 | 	zerox	_var04, #9
2324c     04 07 42 F5 | 	or	_var04, _var05
23250                 | LR__3596
23250                 | LR__3597
23250     09 05 62 FC | 	wrlong	_var03, arg01
23254                 | ' 	}
23254                 | ' #line 811 "ff.c"
23254                 | ' 	*str = p;
23254                 | ' 	return uc;
23254     03 FB 01 F6 | 	mov	result1, _var04
23258                 | _fatfs_cc_tchar2uni_ret
23258     2D 00 64 FD | 	ret
2325c                 | 
2325c                 | _fatfs_cc_put_utf
2325c     80 12 16 F2 | 	cmp	arg01, #128 wc
23260     18 00 90 3D |  if_ae	jmp	#LR__3600
23264     01 16 16 F2 | 	cmp	arg03, #1 wc
23268     00 FA 05 C6 |  if_b	mov	result1, #0
2326c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23270     0A 13 42 FC | 	wrbyte	arg01, arg02
23274                 | ' 		*buf = (TCHAR)chr;
23274                 | ' 		return 1;
23274     01 FA 05 F6 | 	mov	result1, #1
23278     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2327c                 | LR__3600
2327c     04 00 00 FF 
23280     00 12 16 F2 | 	cmp	arg01, ##2048 wc
23284     40 00 90 3D |  if_ae	jmp	#LR__3601
23288     02 16 16 F2 | 	cmp	arg03, #2 wc
2328c     00 FA 05 C6 |  if_b	mov	result1, #0
23290     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23294     09 FB 01 F6 | 	mov	result1, arg01
23298     06 FA 45 F0 | 	shr	result1, #6
2329c     1F FA 05 F5 | 	and	result1, #31
232a0     C0 16 06 F6 | 	mov	arg03, #192
232a4     FD 16 42 F5 | 	or	arg03, result1
232a8     0A 17 42 FC | 	wrbyte	arg03, arg02
232ac     01 14 06 F1 | 	add	arg02, #1
232b0     3F 12 06 F5 | 	and	arg01, #63
232b4     80 FA 05 F6 | 	mov	result1, #128
232b8     09 FB 41 F5 | 	or	result1, arg01
232bc     0A FB 41 FC | 	wrbyte	result1, arg02
232c0                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
232c0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
232c0                 | ' 		return 2;
232c0     02 FA 05 F6 | 	mov	result1, #2
232c4     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
232c8                 | LR__3601
232c8     80 00 00 FF 
232cc     00 12 16 F2 | 	cmp	arg01, ##65536 wc
232d0     70 00 90 3D |  if_ae	jmp	#LR__3604
232d4     03 16 16 F2 | 	cmp	arg03, #3 wc
232d8     18 00 90 CD |  if_b	jmp	#LR__3602
232dc     6C 00 00 FF 
232e0     00 12 16 F2 | 	cmp	arg01, ##55296 wc
232e4     14 00 90 CD |  if_b	jmp	#LR__3603
232e8     70 00 00 FF 
232ec     00 12 16 F2 | 	cmp	arg01, ##57344 wc
232f0     08 00 90 3D |  if_ae	jmp	#LR__3603
232f4                 | LR__3602
232f4     00 FA 05 F6 | 	mov	result1, #0
232f8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
232fc                 | LR__3603
232fc     09 FB 59 F8 | 	getnib	result1, arg01, #3
23300     E0 16 06 F6 | 	mov	arg03, #224
23304     FD 16 42 F5 | 	or	arg03, result1
23308     0A 17 42 FC | 	wrbyte	arg03, arg02
2330c     01 14 06 F1 | 	add	arg02, #1
23310     09 FB 01 F6 | 	mov	result1, arg01
23314     06 FA 45 F0 | 	shr	result1, #6
23318     3F FA 05 F5 | 	and	result1, #63
2331c     80 16 06 F6 | 	mov	arg03, #128
23320     FD 16 42 F5 | 	or	arg03, result1
23324     0A 17 42 FC | 	wrbyte	arg03, arg02
23328     01 14 06 F1 | 	add	arg02, #1
2332c     3F 12 06 F5 | 	and	arg01, #63
23330     80 FA 05 F6 | 	mov	result1, #128
23334     09 FB 41 F5 | 	or	result1, arg01
23338     0A FB 41 FC | 	wrbyte	result1, arg02
2333c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2333c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2333c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2333c                 | ' 		return 3;
2333c     03 FA 05 F6 | 	mov	result1, #3
23340     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
23344                 | LR__3604
23344     04 16 16 F2 | 	cmp	arg03, #4 wc
23348     00 FA 05 C6 |  if_b	mov	result1, #0
2334c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
23350     09 01 02 F6 | 	mov	_var01, arg01
23354     E0 01 06 F4 | 	bitl	_var01, #480
23358     00 00 6C FF 
2335c     00 00 86 F1 | 	sub	_var01, ##-671088640
23360     06 00 46 F0 | 	shr	_var01, #6
23364     09 13 32 F9 | 	getword	arg01, arg01, #0
23368     6E 00 00 FF 
2336c     00 12 86 F1 | 	sub	arg01, ##56320
23370     00 08 00 FF 
23374     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
23378     02 00 00 CF 
2337c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
23380     00 FA 05 36 |  if_ae	mov	result1, #0
23384     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
23388     09 01 42 F5 | 	or	_var01, arg01
2338c     80 00 00 FF 
23390     00 00 06 F1 | 	add	_var01, ##65536
23394     00 FB 01 F6 | 	mov	result1, _var01
23398     12 FA 45 F0 | 	shr	result1, #18
2339c     07 FA 05 F5 | 	and	result1, #7
233a0     F0 16 06 F6 | 	mov	arg03, #240
233a4     FD 16 42 F5 | 	or	arg03, result1
233a8     0A 17 42 FC | 	wrbyte	arg03, arg02
233ac     01 14 06 F1 | 	add	arg02, #1
233b0     00 FB 01 F6 | 	mov	result1, _var01
233b4     0C FA 45 F0 | 	shr	result1, #12
233b8     3F FA 05 F5 | 	and	result1, #63
233bc     80 16 06 F6 | 	mov	arg03, #128
233c0     FD 16 42 F5 | 	or	arg03, result1
233c4     0A 17 42 FC | 	wrbyte	arg03, arg02
233c8     01 14 06 F1 | 	add	arg02, #1
233cc     00 FB 01 F6 | 	mov	result1, _var01
233d0     06 FA 45 F0 | 	shr	result1, #6
233d4     3F FA 05 F5 | 	and	result1, #63
233d8     80 16 06 F6 | 	mov	arg03, #128
233dc     FD 16 42 F5 | 	or	arg03, result1
233e0     0A 17 42 FC | 	wrbyte	arg03, arg02
233e4     01 14 06 F1 | 	add	arg02, #1
233e8     3F 00 06 F5 | 	and	_var01, #63
233ec     80 FA 05 F6 | 	mov	result1, #128
233f0     00 FB 41 F5 | 	or	result1, _var01
233f4     0A FB 41 FC | 	wrbyte	result1, arg02
233f8                 | ' 	chr = (hc | chr) + 0x10000;
233f8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
233f8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
233f8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
233f8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
233f8                 | ' 	return 4;
233f8     04 FA 05 F6 | 	mov	result1, #4
233fc                 | _fatfs_cc_put_utf_ret
233fc     2D 00 64 FD | 	ret
23400                 | 
23400                 | _fatfs_cc_sync_window
23400     02 4A 05 F6 | 	mov	COUNT_, #2
23404     A8 00 A0 FD | 	call	#pushregs_
23408     09 1F 02 F6 | 	mov	local01, arg01
2340c     00 20 06 F6 | 	mov	local02, #0
23410     03 1E 06 F1 | 	add	local01, #3
23414     0F FB C9 FA | 	rdbyte	result1, local01 wz
23418     03 1E 86 F1 | 	sub	local01, #3
2341c     A4 00 90 AD |  if_e	jmp	#LR__3612
23420     01 1E 06 F1 | 	add	local01, #1
23424     0F 13 C2 FA | 	rdbyte	arg01, local01
23428     33 1E 06 F1 | 	add	local01, #51
2342c     0F 15 02 F6 | 	mov	arg02, local01
23430     04 1E 86 F1 | 	sub	local01, #4
23434     0F 17 02 FB | 	rdlong	arg03, local01
23438     30 1E 86 F1 | 	sub	local01, #48
2343c     01 18 06 F6 | 	mov	arg04, #1
23440     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
23444     00 FA 0D F2 | 	cmp	result1, #0 wz
23448     74 00 90 5D |  if_ne	jmp	#LR__3610
2344c     03 1E 06 F1 | 	add	local01, #3
23450     0F 01 48 FC | 	wrbyte	#0, local01
23454     2D 1E 06 F1 | 	add	local01, #45
23458     0F FB 01 FB | 	rdlong	result1, local01
2345c     0C 1E 86 F1 | 	sub	local01, #12
23460     0F 19 02 FB | 	rdlong	arg04, local01
23464     0C FB 81 F1 | 	sub	result1, arg04
23468     08 1E 86 F1 | 	sub	local01, #8
2346c     0F 19 02 FB | 	rdlong	arg04, local01
23470     1C 1E 86 F1 | 	sub	local01, #28
23474     0C FB 11 F2 | 	cmp	result1, arg04 wc
23478     48 00 90 3D |  if_ae	jmp	#LR__3611
2347c     02 1E 06 F1 | 	add	local01, #2
23480     0F 19 C2 FA | 	rdbyte	arg04, local01
23484     02 1E 86 F1 | 	sub	local01, #2
23488     02 18 0E F2 | 	cmp	arg04, #2 wz
2348c     34 00 90 5D |  if_ne	jmp	#LR__3611
23490     01 1E 06 F1 | 	add	local01, #1
23494     0F 13 C2 FA | 	rdbyte	arg01, local01
23498     33 1E 06 F1 | 	add	local01, #51
2349c     0F 15 02 F6 | 	mov	arg02, local01
234a0     04 1E 86 F1 | 	sub	local01, #4
234a4     0F 17 02 FB | 	rdlong	arg03, local01
234a8     14 1E 86 F1 | 	sub	local01, #20
234ac     0F 1F 02 FB | 	rdlong	local01, local01
234b0     0F 17 02 F1 | 	add	arg03, local01
234b4     01 18 06 F6 | 	mov	arg04, #1
234b8     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
234bc     04 00 90 FD | 	jmp	#LR__3611
234c0                 | LR__3610
234c0     01 20 06 F6 | 	mov	local02, #1
234c4                 | LR__3611
234c4                 | LR__3612
234c4                 | ' 			res = FR_DISK_ERR;
234c4                 | ' 		}
234c4                 | ' 	}
234c4                 | ' 	return res;
234c4     10 FB 01 F6 | 	mov	result1, local02
234c8     A7 F0 03 F6 | 	mov	ptra, fp
234cc     B2 00 A0 FD | 	call	#popregs_
234d0                 | _fatfs_cc_sync_window_ret
234d0     2D 00 64 FD | 	ret
234d4                 | 
234d4                 | _fatfs_cc_move_window
234d4     03 4A 05 F6 | 	mov	COUNT_, #3
234d8     A8 00 A0 FD | 	call	#pushregs_
234dc     09 1F 02 F6 | 	mov	local01, arg01
234e0     0A 21 02 F6 | 	mov	local02, arg02
234e4     00 22 06 F6 | 	mov	local03, #0
234e8     30 1E 06 F1 | 	add	local01, #48
234ec     0F 19 02 FB | 	rdlong	arg04, local01
234f0     30 1E 86 F1 | 	sub	local01, #48
234f4     0C 21 0A F2 | 	cmp	local02, arg04 wz
234f8     40 00 90 AD |  if_e	jmp	#LR__3621
234fc     0F 13 02 F6 | 	mov	arg01, local01
23500     FC FE BF FD | 	call	#_fatfs_cc_sync_window
23504     FD 22 0A F6 | 	mov	local03, result1 wz
23508     30 00 90 5D |  if_ne	jmp	#LR__3620
2350c     01 1E 06 F1 | 	add	local01, #1
23510     0F 13 C2 FA | 	rdbyte	arg01, local01
23514     33 1E 06 F1 | 	add	local01, #51
23518     0F 15 02 F6 | 	mov	arg02, local01
2351c     10 17 02 F6 | 	mov	arg03, local02
23520     01 18 06 F6 | 	mov	arg04, #1
23524     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
23528     00 FA 0D F2 | 	cmp	result1, #0 wz
2352c     01 20 66 56 |  if_ne	neg	local02, #1
23530     01 22 06 56 |  if_ne	mov	local03, #1
23534     04 1E 86 F1 | 	sub	local01, #4
23538     0F 21 62 FC | 	wrlong	local02, local01
2353c                 | LR__3620
2353c                 | LR__3621
2353c                 | ' 				sect = (LBA_t)0 - 1;
2353c                 | ' 				res = FR_DISK_ERR;
2353c                 | ' 			}
2353c                 | ' 			fs->winsect = sect;
2353c                 | ' 		}
2353c                 | ' 	}
2353c                 | ' 	return res;
2353c     11 FB 01 F6 | 	mov	result1, local03
23540     A7 F0 03 F6 | 	mov	ptra, fp
23544     B2 00 A0 FD | 	call	#popregs_
23548                 | _fatfs_cc_move_window_ret
23548     2D 00 64 FD | 	ret
2354c                 | 
2354c                 | _fatfs_cc_sync_fs
2354c     02 4A 05 F6 | 	mov	COUNT_, #2
23550     A8 00 A0 FD | 	call	#pushregs_
23554     09 1F 02 F6 | 	mov	local01, arg01
23558     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2355c     FD 20 0A F6 | 	mov	local02, result1 wz
23560     D8 00 90 5D |  if_ne	jmp	#LR__3631
23564     0F 19 C2 FA | 	rdbyte	arg04, local01
23568     03 18 0E F2 | 	cmp	arg04, #3 wz
2356c     04 1E 06 A1 |  if_e	add	local01, #4
23570     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
23574     04 1E 86 A1 |  if_e	sub	local01, #4
23578     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2357c     A0 00 90 5D |  if_ne	jmp	#LR__3630
23580     34 1E 06 F1 | 	add	local01, #52
23584     0F 13 02 F6 | 	mov	arg01, local01
23588     00 14 06 F6 | 	mov	arg02, #0
2358c     09 16 C6 F9 | 	decod	arg03, #9
23590     98 00 A0 FD | 	call	#\builtin_bytefill_
23594     0F 13 02 F6 | 	mov	arg01, local01
23598     FE 13 06 F1 | 	add	arg01, #510
2359c     55 00 80 FF 
235a0     09 AB 58 FC | 	wrword	##43605, arg01
235a4     A9 B0 A0 FF 
235a8     0F A5 68 FC | 	wrlong	##1096897106, local01
235ac     0F 13 02 F6 | 	mov	arg01, local01
235b0     E4 13 06 F1 | 	add	arg01, #484
235b4     B9 A0 B0 FF 
235b8     09 E5 68 FC | 	wrlong	##1631679090, arg01
235bc     0F 13 02 F6 | 	mov	arg01, local01
235c0     E8 13 06 F1 | 	add	arg01, #488
235c4     20 1E 86 F1 | 	sub	local01, #32
235c8     0F 15 02 FB | 	rdlong	arg02, local01
235cc     09 15 62 FC | 	wrlong	arg02, arg01
235d0     20 1E 06 F1 | 	add	local01, #32
235d4     0F 13 02 F6 | 	mov	arg01, local01
235d8     EC 13 06 F1 | 	add	arg01, #492
235dc     24 1E 86 F1 | 	sub	local01, #36
235e0     0F 15 02 FB | 	rdlong	arg02, local01
235e4     09 15 62 FC | 	wrlong	arg02, arg01
235e8     10 1E 06 F1 | 	add	local01, #16
235ec     0F 17 02 FB | 	rdlong	arg03, local01
235f0     01 16 06 F1 | 	add	arg03, #1
235f4     10 1E 06 F1 | 	add	local01, #16
235f8     0F 17 62 FC | 	wrlong	arg03, local01
235fc     2F 1E 86 F1 | 	sub	local01, #47
23600     0F 13 C2 FA | 	rdbyte	arg01, local01
23604     33 1E 06 F1 | 	add	local01, #51
23608     0F 15 02 F6 | 	mov	arg02, local01
2360c     01 18 06 F6 | 	mov	arg04, #1
23610     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
23614     30 1E 86 F1 | 	sub	local01, #48
23618     0F 01 48 FC | 	wrbyte	#0, local01
2361c     04 1E 86 F1 | 	sub	local01, #4
23620                 | LR__3630
23620     01 1E 06 F1 | 	add	local01, #1
23624     0F 13 C2 FA | 	rdbyte	arg01, local01
23628     00 14 06 F6 | 	mov	arg02, #0
2362c     00 16 06 F6 | 	mov	arg03, #0
23630     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
23634     00 FA 0D F2 | 	cmp	result1, #0 wz
23638     01 20 06 56 |  if_ne	mov	local02, #1
2363c                 | LR__3631
2363c                 | ' 	}
2363c                 | ' 
2363c                 | ' 	return res;
2363c     10 FB 01 F6 | 	mov	result1, local02
23640     A7 F0 03 F6 | 	mov	ptra, fp
23644     B2 00 A0 FD | 	call	#popregs_
23648                 | _fatfs_cc_sync_fs_ret
23648     2D 00 64 FD | 	ret
2364c                 | 
2364c                 | _fatfs_cc_clst2sect
2364c     02 14 86 F1 | 	sub	arg02, #2
23650     18 12 06 F1 | 	add	arg01, #24
23654     09 01 02 FB | 	rdlong	_var01, arg01
23658     18 12 86 F1 | 	sub	arg01, #24
2365c     02 00 86 F1 | 	sub	_var01, #2
23660     00 15 12 F2 | 	cmp	arg02, _var01 wc
23664     00 FA 05 36 |  if_ae	mov	result1, #0
23668     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2366c     0A 12 06 F1 | 	add	arg01, #10
23670     09 01 E2 FA | 	rdword	_var01, arg01
23674     0A 01 02 FD | 	qmul	_var01, arg02
23678                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
23678     22 12 06 F1 | 	add	arg01, #34
2367c     09 FB 01 FB | 	rdlong	result1, arg01
23680     18 00 62 FD | 	getqx	_var01
23684     00 FB 01 F1 | 	add	result1, _var01
23688                 | _fatfs_cc_clst2sect_ret
23688     2D 00 64 FD | 	ret
2368c                 | 
2368c                 | _fatfs_cc_get_fat
2368c     07 4A 05 F6 | 	mov	COUNT_, #7
23690     A8 00 A0 FD | 	call	#pushregs_
23694     0A 1F 02 F6 | 	mov	local01, arg02
23698     09 21 02 FB | 	rdlong	local02, arg01
2369c     02 1E 16 F2 | 	cmp	local01, #2 wc
236a0     14 00 90 CD |  if_b	jmp	#LR__3640
236a4     18 20 06 F1 | 	add	local02, #24
236a8     10 23 02 FB | 	rdlong	local03, local02
236ac     18 20 86 F1 | 	sub	local02, #24
236b0     11 1F 12 F2 | 	cmp	local01, local03 wc
236b4     08 00 90 CD |  if_b	jmp	#LR__3641
236b8                 | LR__3640
236b8     01 24 06 F6 | 	mov	local04, #1
236bc     60 01 90 FD | 	jmp	#LR__3648
236c0                 | LR__3641
236c0     01 24 66 F6 | 	neg	local04, #1
236c4                 | ' 		val = 0xFFFFFFFF;
236c4                 | ' 
236c4                 | ' 		switch (fs->fs_type) {
236c4     10 27 C2 FA | 	rdbyte	local05, local02
236c8     01 26 86 F1 | 	sub	local05, #1
236cc     03 26 26 F3 | 	fle	local05, #3
236d0     30 26 62 FD | 	jmprel	local05
236d4                 | LR__3642
236d4     0C 00 90 FD | 	jmp	#LR__3643
236d8     B8 00 90 FD | 	jmp	#LR__3644
236dc     F8 00 90 FD | 	jmp	#LR__3645
236e0     38 01 90 FD | 	jmp	#LR__3646
236e4                 | LR__3643
236e4     0F 27 02 F6 | 	mov	local05, local01
236e8     0F 13 02 F6 | 	mov	arg01, local01
236ec     01 12 46 F0 | 	shr	arg01, #1
236f0     09 27 02 F1 | 	add	local05, arg01
236f4     10 13 02 F6 | 	mov	arg01, local02
236f8     13 29 02 F6 | 	mov	local06, local05
236fc     09 28 46 F0 | 	shr	local06, #9
23700     24 20 06 F1 | 	add	local02, #36
23704     10 15 02 FB | 	rdlong	arg02, local02
23708     24 20 86 F1 | 	sub	local02, #36
2370c     14 15 02 F1 | 	add	arg02, local06
23710     C0 FD BF FD | 	call	#_fatfs_cc_move_window
23714     00 FA 0D F2 | 	cmp	result1, #0 wz
23718     04 01 90 5D |  if_ne	jmp	#LR__3647
2371c     13 29 02 F6 | 	mov	local06, local05
23720     FF 29 06 F5 | 	and	local06, #511
23724     34 20 06 F1 | 	add	local02, #52
23728     10 29 02 F1 | 	add	local06, local02
2372c     14 2B C2 FA | 	rdbyte	local07, local06
23730     34 20 86 F1 | 	sub	local02, #52
23734     10 13 02 F6 | 	mov	arg01, local02
23738     01 26 06 F1 | 	add	local05, #1
2373c     13 29 02 F6 | 	mov	local06, local05
23740     09 28 46 F0 | 	shr	local06, #9
23744     24 20 06 F1 | 	add	local02, #36
23748     10 15 02 FB | 	rdlong	arg02, local02
2374c     24 20 86 F1 | 	sub	local02, #36
23750     14 15 02 F1 | 	add	arg02, local06
23754     7C FD BF FD | 	call	#_fatfs_cc_move_window
23758     00 FA 0D F2 | 	cmp	result1, #0 wz
2375c     C0 00 90 5D |  if_ne	jmp	#LR__3647
23760     FF 27 06 F5 | 	and	local05, #511
23764     34 20 06 F1 | 	add	local02, #52
23768     10 27 02 F1 | 	add	local05, local02
2376c     13 29 C2 FA | 	rdbyte	local06, local05
23770     08 28 66 F0 | 	shl	local06, #8
23774     14 2B 42 F5 | 	or	local07, local06
23778     01 1E CE F7 | 	test	local01, #1 wz
2377c     04 2A 46 50 |  if_ne	shr	local07, #4
23780     15 23 02 56 |  if_ne	mov	local03, local07
23784     0B 2A 46 A7 |  if_e	zerox	local07, #11
23788     15 23 02 A6 |  if_e	mov	local03, local07
2378c     11 25 02 F6 | 	mov	local04, local03
23790                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
23790                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
23790                 | ' 			break;
23790     8C 00 90 FD | 	jmp	#LR__3647
23794                 | LR__3644
23794     10 13 02 F6 | 	mov	arg01, local02
23798     0F 29 02 F6 | 	mov	local06, local01
2379c     08 28 46 F0 | 	shr	local06, #8
237a0     24 20 06 F1 | 	add	local02, #36
237a4     10 15 02 FB | 	rdlong	arg02, local02
237a8     24 20 86 F1 | 	sub	local02, #36
237ac     14 15 02 F1 | 	add	arg02, local06
237b0     20 FD BF FD | 	call	#_fatfs_cc_move_window
237b4     00 FA 0D F2 | 	cmp	result1, #0 wz
237b8     64 00 90 5D |  if_ne	jmp	#LR__3647
237bc     34 20 06 F1 | 	add	local02, #52
237c0     01 1E 66 F0 | 	shl	local01, #1
237c4     FF 1F 06 F5 | 	and	local01, #511
237c8     0F 21 02 F1 | 	add	local02, local01
237cc                 | ' {
237cc                 | ' 
237cc                 | ' 	return *((WORD*)ptr);
237cc     10 FB E1 FA | 	rdword	result1, local02
237d0     FD 24 32 F9 | 	getword	local04, result1, #0
237d4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
237d4                 | ' 			break;
237d4     48 00 90 FD | 	jmp	#LR__3647
237d8                 | LR__3645
237d8     10 13 02 F6 | 	mov	arg01, local02
237dc     0F 29 02 F6 | 	mov	local06, local01
237e0     07 28 46 F0 | 	shr	local06, #7
237e4     24 20 06 F1 | 	add	local02, #36
237e8     10 15 02 FB | 	rdlong	arg02, local02
237ec     24 20 86 F1 | 	sub	local02, #36
237f0     14 15 02 F1 | 	add	arg02, local06
237f4     DC FC BF FD | 	call	#_fatfs_cc_move_window
237f8     00 FA 0D F2 | 	cmp	result1, #0 wz
237fc     20 00 90 5D |  if_ne	jmp	#LR__3647
23800     34 20 06 F1 | 	add	local02, #52
23804     02 1E 66 F0 | 	shl	local01, #2
23808     FF 1F 06 F5 | 	and	local01, #511
2380c     0F 21 02 F1 | 	add	local02, local01
23810                 | ' {
23810                 | ' 
23810                 | ' 	return *((DWORD*)ptr);
23810     10 25 02 FB | 	rdlong	local04, local02
23814     7C 24 06 F4 | 	bitl	local04, #124
23818                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
23818                 | ' 			break;
23818     04 00 90 FD | 	jmp	#LR__3647
2381c                 | LR__3646
2381c     01 24 06 F6 | 	mov	local04, #1
23820                 | LR__3647
23820                 | LR__3648
23820                 | ' 			val = 1;
23820                 | ' 		}
23820                 | ' 	}
23820                 | ' 
23820                 | ' 	return val;
23820     12 FB 01 F6 | 	mov	result1, local04
23824     A7 F0 03 F6 | 	mov	ptra, fp
23828     B2 00 A0 FD | 	call	#popregs_
2382c                 | _fatfs_cc_get_fat_ret
2382c     2D 00 64 FD | 	ret
23830                 | 
23830                 | _fatfs_cc_put_fat
23830     08 4A 05 F6 | 	mov	COUNT_, #8
23834     A8 00 A0 FD | 	call	#pushregs_
23838     09 1F 02 F6 | 	mov	local01, arg01
2383c     0A 21 02 F6 | 	mov	local02, arg02
23840     0B 23 02 F6 | 	mov	local03, arg03
23844     02 24 06 F6 | 	mov	local04, #2
23848     02 20 16 F2 | 	cmp	local02, #2 wc
2384c     E0 01 90 CD |  if_b	jmp	#LR__3657
23850     18 1E 06 F1 | 	add	local01, #24
23854     0F 27 02 FB | 	rdlong	local05, local01
23858     18 1E 86 F1 | 	sub	local01, #24
2385c     13 21 12 F2 | 	cmp	local02, local05 wc
23860     CC 01 90 3D |  if_ae	jmp	#LR__3657
23864                 | ' 		switch (fs->fs_type) {
23864     0F 29 C2 FA | 	rdbyte	local06, local01
23868     01 28 86 F1 | 	sub	local06, #1
2386c     03 28 26 F3 | 	fle	local06, #3
23870     30 28 62 FD | 	jmprel	local06
23874                 | LR__3650
23874     0C 00 90 FD | 	jmp	#LR__3651
23878     F8 00 90 FD | 	jmp	#LR__3654
2387c     40 01 90 FD | 	jmp	#LR__3655
23880     AC 01 90 FD | 	jmp	#LR__3656
23884                 | LR__3651
23884     10 2B 02 F6 | 	mov	local07, local02
23888     10 27 02 F6 | 	mov	local05, local02
2388c     01 26 46 F0 | 	shr	local05, #1
23890     13 2B 02 F1 | 	add	local07, local05
23894     0F 13 02 F6 | 	mov	arg01, local01
23898     15 29 02 F6 | 	mov	local06, local07
2389c     09 28 46 F0 | 	shr	local06, #9
238a0     24 1E 06 F1 | 	add	local01, #36
238a4     0F 15 02 FB | 	rdlong	arg02, local01
238a8     24 1E 86 F1 | 	sub	local01, #36
238ac     14 15 02 F1 | 	add	arg02, local06
238b0     20 FC BF FD | 	call	#_fatfs_cc_move_window
238b4     FD 24 0A F6 | 	mov	local04, result1 wz
238b8     74 01 90 5D |  if_ne	jmp	#LR__3656
238bc     34 1E 06 F1 | 	add	local01, #52
238c0     0F 2D 02 F6 | 	mov	local08, local01
238c4     15 27 02 F6 | 	mov	local05, local07
238c8     FF 27 06 F5 | 	and	local05, #511
238cc     13 2D 02 F1 | 	add	local08, local05
238d0     01 20 CE F7 | 	test	local02, #1 wz
238d4     34 1E 86 F1 | 	sub	local01, #52
238d8     01 2A 06 F1 | 	add	local07, #1
238dc     18 00 90 AD |  if_e	jmp	#LR__3652
238e0     16 27 C2 FA | 	rdbyte	local05, local08
238e4     13 27 42 F8 | 	getnib	local05, local05, #0
238e8     11 29 E2 F8 | 	getbyte	local06, local03, #0
238ec     04 28 66 F0 | 	shl	local06, #4
238f0     14 27 42 F5 | 	or	local05, local06
238f4     04 00 90 FD | 	jmp	#LR__3653
238f8                 | LR__3652
238f8     11 27 02 F6 | 	mov	local05, local03
238fc                 | LR__3653
238fc     16 27 42 FC | 	wrbyte	local05, local08
23900     03 1E 06 F1 | 	add	local01, #3
23904     0F 03 48 FC | 	wrbyte	#1, local01
23908     03 1E 86 F1 | 	sub	local01, #3
2390c     0F 13 02 F6 | 	mov	arg01, local01
23910     15 2D 02 F6 | 	mov	local08, local07
23914     09 2C 46 F0 | 	shr	local08, #9
23918     24 1E 06 F1 | 	add	local01, #36
2391c     0F 15 02 FB | 	rdlong	arg02, local01
23920     24 1E 86 F1 | 	sub	local01, #36
23924     16 15 02 F1 | 	add	arg02, local08
23928     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2392c     FD 24 0A F6 | 	mov	local04, result1 wz
23930     FC 00 90 5D |  if_ne	jmp	#LR__3656
23934     34 1E 06 F1 | 	add	local01, #52
23938     0F 2D 02 F6 | 	mov	local08, local01
2393c     FF 2B 06 F5 | 	and	local07, #511
23940     15 2D 02 F1 | 	add	local08, local07
23944     01 20 CE F7 | 	test	local02, #1 wz
23948     04 22 46 50 |  if_ne	shr	local03, #4
2394c     11 27 02 56 |  if_ne	mov	local05, local03
23950     16 27 C2 AA |  if_e	rdbyte	local05, local08
23954     F0 26 06 A5 |  if_e	and	local05, #240
23958     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
2395c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
23960     11 27 42 A5 |  if_e	or	local05, local03
23964     16 27 42 FC | 	wrbyte	local05, local08
23968     31 1E 86 F1 | 	sub	local01, #49
2396c     0F 03 48 FC | 	wrbyte	#1, local01
23970                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
23970                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
23970                 | ' 			fs->wflag = 1;
23970                 | ' 			break;
23970     BC 00 90 FD | 	jmp	#LR__3656
23974                 | LR__3654
23974     0F 13 02 F6 | 	mov	arg01, local01
23978     10 2D 02 F6 | 	mov	local08, local02
2397c     08 2C 46 F0 | 	shr	local08, #8
23980     24 1E 06 F1 | 	add	local01, #36
23984     0F 15 02 FB | 	rdlong	arg02, local01
23988     24 1E 86 F1 | 	sub	local01, #36
2398c     16 15 02 F1 | 	add	arg02, local08
23990     40 FB BF FD | 	call	#_fatfs_cc_move_window
23994     FD 24 0A F6 | 	mov	local04, result1 wz
23998     94 00 90 5D |  if_ne	jmp	#LR__3656
2399c     34 1E 06 F1 | 	add	local01, #52
239a0     0F 13 02 F6 | 	mov	arg01, local01
239a4     01 20 66 F0 | 	shl	local02, #1
239a8     FF 21 06 F5 | 	and	local02, #511
239ac     10 13 02 F1 | 	add	arg01, local02
239b0     09 23 52 FC | 	wrword	local03, arg01
239b4     31 1E 86 F1 | 	sub	local01, #49
239b8     0F 03 48 FC | 	wrbyte	#1, local01
239bc                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
239bc                 | ' 			fs->wflag = 1;
239bc                 | ' 			break;
239bc     70 00 90 FD | 	jmp	#LR__3656
239c0                 | LR__3655
239c0     0F 13 02 F6 | 	mov	arg01, local01
239c4     10 2D 02 F6 | 	mov	local08, local02
239c8     07 2C 46 F0 | 	shr	local08, #7
239cc     24 1E 06 F1 | 	add	local01, #36
239d0     0F 15 02 FB | 	rdlong	arg02, local01
239d4     24 1E 86 F1 | 	sub	local01, #36
239d8     16 15 02 F1 | 	add	arg02, local08
239dc     F4 FA BF FD | 	call	#_fatfs_cc_move_window
239e0     FD 24 0A F6 | 	mov	local04, result1 wz
239e4     48 00 90 5D |  if_ne	jmp	#LR__3656
239e8     7C 22 06 F4 | 	bitl	local03, #124
239ec     34 1E 06 F1 | 	add	local01, #52
239f0     10 2D 02 F6 | 	mov	local08, local02
239f4     02 2C 66 F0 | 	shl	local08, #2
239f8     FF 2D 06 F5 | 	and	local08, #511
239fc     0F 13 02 F6 | 	mov	arg01, local01
23a00     16 13 02 F1 | 	add	arg01, local08
23a04                 | ' {
23a04                 | ' 
23a04                 | ' 	return *((DWORD*)ptr);
23a04     09 2D 02 FB | 	rdlong	local08, arg01
23a08     00 00 78 FF 
23a0c     00 2C 06 F5 | 	and	local08, ##-268435456
23a10     16 23 42 F5 | 	or	local03, local08
23a14     0F 13 02 F6 | 	mov	arg01, local01
23a18     02 20 66 F0 | 	shl	local02, #2
23a1c     FF 21 06 F5 | 	and	local02, #511
23a20     10 13 02 F1 | 	add	arg01, local02
23a24     09 23 62 FC | 	wrlong	local03, arg01
23a28     31 1E 86 F1 | 	sub	local01, #49
23a2c     0F 03 48 FC | 	wrbyte	#1, local01
23a30                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
23a30                 | ' 			}
23a30                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
23a30                 | ' 			fs->wflag = 1;
23a30                 | ' 			break;
23a30                 | LR__3656
23a30                 | LR__3657
23a30                 | ' 		}
23a30                 | ' 	}
23a30                 | ' 	return res;
23a30     12 FB 01 F6 | 	mov	result1, local04
23a34     A7 F0 03 F6 | 	mov	ptra, fp
23a38     B2 00 A0 FD | 	call	#popregs_
23a3c                 | _fatfs_cc_put_fat_ret
23a3c     2D 00 64 FD | 	ret
23a40                 | 
23a40                 | _fatfs_cc_remove_chain
23a40     05 4A 05 F6 | 	mov	COUNT_, #5
23a44     A8 00 A0 FD | 	call	#pushregs_
23a48     09 1F 02 F6 | 	mov	local01, arg01
23a4c     0A 21 02 F6 | 	mov	local02, arg02
23a50     0B 23 02 F6 | 	mov	local03, arg03
23a54     0F 25 02 FB | 	rdlong	local04, local01
23a58     02 20 16 F2 | 	cmp	local02, #2 wc
23a5c     14 00 90 CD |  if_b	jmp	#LR__3660
23a60     18 24 06 F1 | 	add	local04, #24
23a64     12 FB 01 FB | 	rdlong	result1, local04
23a68     18 24 86 F1 | 	sub	local04, #24
23a6c     FD 20 12 F2 | 	cmp	local02, result1 wc
23a70     08 00 90 CD |  if_b	jmp	#LR__3661
23a74                 | LR__3660
23a74     02 FA 05 F6 | 	mov	result1, #2
23a78     CC 00 90 FD | 	jmp	#LR__3666
23a7c                 | LR__3661
23a7c     00 22 0E F2 | 	cmp	local03, #0 wz
23a80     18 00 90 AD |  if_e	jmp	#LR__3662
23a84     11 15 02 F6 | 	mov	arg02, local03
23a88     12 13 02 F6 | 	mov	arg01, local04
23a8c     01 16 66 F6 | 	neg	arg03, #1
23a90     9C FD BF FD | 	call	#_fatfs_cc_put_fat
23a94     00 FA 0D F2 | 	cmp	result1, #0 wz
23a98     AC 00 90 5D |  if_ne	jmp	#LR__3666
23a9c                 | LR__3662
23a9c                 | ' 	}
23a9c                 | ' 
23a9c                 | ' 
23a9c                 | ' 	do {
23a9c                 | LR__3663
23a9c     10 15 02 F6 | 	mov	arg02, local02
23aa0     0F 13 02 F6 | 	mov	arg01, local01
23aa4     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
23aa8     FD 26 0A F6 | 	mov	local05, result1 wz
23aac     94 00 90 AD |  if_e	jmp	#LR__3665
23ab0     01 26 0E F2 | 	cmp	local05, #1 wz
23ab4     02 FA 05 A6 |  if_e	mov	result1, #2
23ab8     8C 00 90 AD |  if_e	jmp	#LR__3666
23abc     FF FF 7F FF 
23ac0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
23ac4     01 FA 05 A6 |  if_e	mov	result1, #1
23ac8     7C 00 90 AD |  if_e	jmp	#LR__3666
23acc     10 15 02 F6 | 	mov	arg02, local02
23ad0     12 13 02 F6 | 	mov	arg01, local04
23ad4     00 16 06 F6 | 	mov	arg03, #0
23ad8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
23adc     FD 22 0A F6 | 	mov	local03, result1 wz
23ae0     11 FB 01 56 |  if_ne	mov	result1, local03
23ae4     60 00 90 5D |  if_ne	jmp	#LR__3666
23ae8     18 24 06 F1 | 	add	local04, #24
23aec     12 23 02 FB | 	rdlong	local03, local04
23af0     02 22 86 F1 | 	sub	local03, #2
23af4     04 24 86 F1 | 	sub	local04, #4
23af8     12 21 02 FB | 	rdlong	local02, local04
23afc     14 24 86 F1 | 	sub	local04, #20
23b00     11 21 12 F2 | 	cmp	local02, local03 wc
23b04     24 00 90 3D |  if_ae	jmp	#LR__3664
23b08     14 24 06 F1 | 	add	local04, #20
23b0c     12 23 02 FB | 	rdlong	local03, local04
23b10     01 22 06 F1 | 	add	local03, #1
23b14     12 23 62 FC | 	wrlong	local03, local04
23b18     10 24 86 F1 | 	sub	local04, #16
23b1c     12 23 C2 FA | 	rdbyte	local03, local04
23b20     01 22 46 F5 | 	or	local03, #1
23b24     12 23 42 FC | 	wrbyte	local03, local04
23b28     04 24 86 F1 | 	sub	local04, #4
23b2c                 | LR__3664
23b2c     13 21 02 F6 | 	mov	local02, local05
23b30     18 24 06 F1 | 	add	local04, #24
23b34     12 27 02 FB | 	rdlong	local05, local04
23b38     18 24 86 F1 | 	sub	local04, #24
23b3c     13 21 12 F2 | 	cmp	local02, local05 wc
23b40     58 FF 9F CD |  if_b	jmp	#LR__3663
23b44                 | LR__3665
23b44                 | ' #line 1500 "ff.c"
23b44                 | ' 	return FR_OK;
23b44     00 FA 05 F6 | 	mov	result1, #0
23b48                 | LR__3666
23b48     A7 F0 03 F6 | 	mov	ptra, fp
23b4c     B2 00 A0 FD | 	call	#popregs_
23b50                 | _fatfs_cc_remove_chain_ret
23b50     2D 00 64 FD | 	ret
23b54                 | 
23b54                 | _fatfs_cc_create_chain
23b54     09 4A 05 F6 | 	mov	COUNT_, #9
23b58     A8 00 A0 FD | 	call	#pushregs_
23b5c     09 1F 02 F6 | 	mov	local01, arg01
23b60     0A 21 0A F6 | 	mov	local02, arg02 wz
23b64     0F 23 02 FB | 	rdlong	local03, local01
23b68     28 00 90 5D |  if_ne	jmp	#LR__3670
23b6c     10 22 06 F1 | 	add	local03, #16
23b70     11 25 0A FB | 	rdlong	local04, local03 wz
23b74     10 22 86 F1 | 	sub	local03, #16
23b78     18 22 06 51 |  if_ne	add	local03, #24
23b7c     11 27 02 5B |  if_ne	rdlong	local05, local03
23b80     18 22 86 51 |  if_ne	sub	local03, #24
23b84     13 25 12 52 |  if_ne	cmp	local04, local05 wc
23b88     50 00 90 4D |  if_c_and_nz	jmp	#LR__3671
23b8c     01 24 06 F6 | 	mov	local04, #1
23b90     48 00 90 FD | 	jmp	#LR__3671
23b94                 | LR__3670
23b94     10 15 02 F6 | 	mov	arg02, local02
23b98     0F 13 02 F6 | 	mov	arg01, local01
23b9c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
23ba0     FD 24 02 F6 | 	mov	local04, result1
23ba4     02 24 16 F2 | 	cmp	local04, #2 wc
23ba8     01 FA 05 C6 |  if_b	mov	result1, #1
23bac     BC 01 90 CD |  if_b	jmp	#LR__3681
23bb0     FF FF 7F FF 
23bb4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
23bb8     12 FB 01 A6 |  if_e	mov	result1, local04
23bbc     AC 01 90 AD |  if_e	jmp	#LR__3681
23bc0     18 22 06 F1 | 	add	local03, #24
23bc4     11 27 02 FB | 	rdlong	local05, local03
23bc8     18 22 86 F1 | 	sub	local03, #24
23bcc     13 25 12 F2 | 	cmp	local04, local05 wc
23bd0     12 FB 01 C6 |  if_b	mov	result1, local04
23bd4     94 01 90 CD |  if_b	jmp	#LR__3681
23bd8     10 25 02 F6 | 	mov	local04, local02
23bdc                 | LR__3671
23bdc     14 22 06 F1 | 	add	local03, #20
23be0     11 27 0A FB | 	rdlong	local05, local03 wz
23be4     14 22 86 F1 | 	sub	local03, #20
23be8     00 FA 05 A6 |  if_e	mov	result1, #0
23bec     7C 01 90 AD |  if_e	jmp	#LR__3681
23bf0     00 28 06 F6 | 	mov	local06, #0
23bf4     10 25 0A F2 | 	cmp	local04, local02 wz
23bf8     74 00 90 5D |  if_ne	jmp	#LR__3674
23bfc     12 29 02 F6 | 	mov	local06, local04
23c00     01 28 06 F1 | 	add	local06, #1
23c04     18 22 06 F1 | 	add	local03, #24
23c08     11 27 02 FB | 	rdlong	local05, local03
23c0c     18 22 86 F1 | 	sub	local03, #24
23c10     13 29 12 F2 | 	cmp	local06, local05 wc
23c14     02 28 06 36 |  if_ae	mov	local06, #2
23c18     14 15 02 F6 | 	mov	arg02, local06
23c1c     0F 13 02 F6 | 	mov	arg01, local01
23c20     68 FA BF FD | 	call	#_fatfs_cc_get_fat
23c24     FD 26 02 F6 | 	mov	local05, result1
23c28     01 26 0E F2 | 	cmp	local05, #1 wz
23c2c     FF FF 7F 5F 
23c30     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
23c34     13 FB 01 A6 |  if_e	mov	result1, local05
23c38     30 01 90 AD |  if_e	jmp	#LR__3681
23c3c     00 26 0E F2 | 	cmp	local05, #0 wz
23c40     2C 00 90 AD |  if_e	jmp	#LR__3673
23c44     10 22 06 F1 | 	add	local03, #16
23c48     11 2B 02 FB | 	rdlong	local07, local03
23c4c     10 22 86 F1 | 	sub	local03, #16
23c50     02 2A 16 F2 | 	cmp	local07, #2 wc
23c54     14 00 90 CD |  if_b	jmp	#LR__3672
23c58     18 22 06 F1 | 	add	local03, #24
23c5c     11 27 02 FB | 	rdlong	local05, local03
23c60     18 22 86 F1 | 	sub	local03, #24
23c64     13 2B 12 F2 | 	cmp	local07, local05 wc
23c68     15 25 02 C6 |  if_b	mov	local04, local07
23c6c                 | LR__3672
23c6c     00 28 06 F6 | 	mov	local06, #0
23c70                 | LR__3673
23c70                 | LR__3674
23c70     00 28 0E F2 | 	cmp	local06, #0 wz
23c74     60 00 90 5D |  if_ne	jmp	#LR__3677
23c78     12 29 02 F6 | 	mov	local06, local04
23c7c                 | ' 			ncl = scl;
23c7c                 | ' 			for (;;) {
23c7c                 | LR__3675
23c7c     01 28 06 F1 | 	add	local06, #1
23c80     18 22 06 F1 | 	add	local03, #24
23c84     11 27 02 FB | 	rdlong	local05, local03
23c88     18 22 86 F1 | 	sub	local03, #24
23c8c     13 29 12 F2 | 	cmp	local06, local05 wc
23c90     02 28 06 36 |  if_ae	mov	local06, #2
23c94     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
23c98     00 FA 05 16 |  if_a	mov	result1, #0
23c9c     CC 00 90 1D |  if_a	jmp	#LR__3681
23ca0     14 15 02 F6 | 	mov	arg02, local06
23ca4     0F 13 02 F6 | 	mov	arg01, local01
23ca8     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
23cac     FD 2A 0A F6 | 	mov	local07, result1 wz
23cb0     24 00 90 AD |  if_e	jmp	#LR__3676
23cb4     01 2A 0E F2 | 	cmp	local07, #1 wz
23cb8     FF FF 7F 5F 
23cbc     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
23cc0     15 FB 01 A6 |  if_e	mov	result1, local07
23cc4     A4 00 90 AD |  if_e	jmp	#LR__3681
23cc8     12 29 0A F2 | 	cmp	local06, local04 wz
23ccc     00 FA 05 A6 |  if_e	mov	result1, #0
23cd0     98 00 90 AD |  if_e	jmp	#LR__3681
23cd4     A4 FF 9F FD | 	jmp	#LR__3675
23cd8                 | LR__3676
23cd8                 | LR__3677
23cd8     11 13 02 F6 | 	mov	arg01, local03
23cdc     14 15 02 F6 | 	mov	arg02, local06
23ce0     01 16 66 F6 | 	neg	arg03, #1
23ce4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
23ce8     FD 2C 0A F6 | 	mov	local08, result1 wz
23cec     1C 00 90 5D |  if_ne	jmp	#LR__3678
23cf0     00 20 0E F2 | 	cmp	local02, #0 wz
23cf4     14 00 90 AD |  if_e	jmp	#LR__3678
23cf8     11 13 02 F6 | 	mov	arg01, local03
23cfc     10 15 02 F6 | 	mov	arg02, local02
23d00     14 17 02 F6 | 	mov	arg03, local06
23d04     28 FB BF FD | 	call	#_fatfs_cc_put_fat
23d08     FD 2C 02 F6 | 	mov	local08, result1
23d0c                 | LR__3678
23d0c     00 2C 0E F2 | 	cmp	local08, #0 wz
23d10     4C 00 90 5D |  if_ne	jmp	#LR__3679
23d14     10 22 06 F1 | 	add	local03, #16
23d18     11 29 62 FC | 	wrlong	local06, local03
23d1c     08 22 06 F1 | 	add	local03, #8
23d20     11 27 02 FB | 	rdlong	local05, local03
23d24     02 26 86 F1 | 	sub	local05, #2
23d28     04 22 86 F1 | 	sub	local03, #4
23d2c     11 2F 02 FB | 	rdlong	local09, local03
23d30     14 22 86 F1 | 	sub	local03, #20
23d34     13 2F 1A F2 | 	cmp	local09, local05 wcz
23d38     14 22 06 E1 |  if_be	add	local03, #20
23d3c     11 2F 02 EB |  if_be	rdlong	local09, local03
23d40     01 2E 86 E1 |  if_be	sub	local09, #1
23d44     11 2F 62 EC |  if_be	wrlong	local09, local03
23d48     14 22 86 E1 |  if_be	sub	local03, #20
23d4c     04 22 06 F1 | 	add	local03, #4
23d50     11 27 C2 FA | 	rdbyte	local05, local03
23d54     01 26 46 F5 | 	or	local05, #1
23d58     11 27 42 FC | 	wrbyte	local05, local03
23d5c     08 00 90 FD | 	jmp	#LR__3680
23d60                 | LR__3679
23d60     01 2C 0E F2 | 	cmp	local08, #1 wz
23d64     01 28 C6 F6 | 	negz	local06, #1
23d68                 | LR__3680
23d68                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
23d68                 | ' 	}
23d68                 | ' 
23d68                 | ' 	return ncl;
23d68     14 FB 01 F6 | 	mov	result1, local06
23d6c                 | LR__3681
23d6c     A7 F0 03 F6 | 	mov	ptra, fp
23d70     B2 00 A0 FD | 	call	#popregs_
23d74                 | _fatfs_cc_create_chain_ret
23d74     2D 00 64 FD | 	ret
23d78                 | 
23d78                 | _fatfs_cc_dir_clear
23d78     06 4A 05 F6 | 	mov	COUNT_, #6
23d7c     A8 00 A0 FD | 	call	#pushregs_
23d80     09 1F 02 F6 | 	mov	local01, arg01
23d84     0A 21 02 F6 | 	mov	local02, arg02
23d88     0F 13 02 F6 | 	mov	arg01, local01
23d8c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
23d90     00 FA 0D F2 | 	cmp	result1, #0 wz
23d94     01 FA 05 56 |  if_ne	mov	result1, #1
23d98     90 00 90 5D |  if_ne	jmp	#LR__3692
23d9c     0F 13 02 F6 | 	mov	arg01, local01
23da0     10 15 02 F6 | 	mov	arg02, local02
23da4     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
23da8     FD 22 02 F6 | 	mov	local03, result1
23dac     30 1E 06 F1 | 	add	local01, #48
23db0     0F 23 62 FC | 	wrlong	local03, local01
23db4     04 1E 06 F1 | 	add	local01, #4
23db8     0F 13 02 F6 | 	mov	arg01, local01
23dbc     00 14 06 F6 | 	mov	arg02, #0
23dc0     09 16 C6 F9 | 	decod	arg03, #9
23dc4     98 00 A0 FD | 	call	#\builtin_bytefill_
23dc8     0F 25 02 F6 | 	mov	local04, local01
23dcc                 | ' #line 1667 "ff.c"
23dcc                 | ' 	{
23dcc                 | ' 		ibuf = fs->win; szb = 1;
23dcc                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
23dcc     00 26 06 F6 | 	mov	local05, #0
23dd0     34 1E 86 F1 | 	sub	local01, #52
23dd4                 | LR__3690
23dd4     0A 1E 06 F1 | 	add	local01, #10
23dd8     0F 29 E2 FA | 	rdword	local06, local01
23ddc     0A 1E 86 F1 | 	sub	local01, #10
23de0     14 27 12 F2 | 	cmp	local05, local06 wc
23de4     2C 00 90 3D |  if_ae	jmp	#LR__3691
23de8     01 1E 06 F1 | 	add	local01, #1
23dec     0F 13 C2 FA | 	rdbyte	arg01, local01
23df0     01 1E 86 F1 | 	sub	local01, #1
23df4     12 15 02 F6 | 	mov	arg02, local04
23df8     11 17 02 F6 | 	mov	arg03, local03
23dfc     13 17 02 F1 | 	add	arg03, local05
23e00     01 18 06 F6 | 	mov	arg04, #1
23e04     9C EF BF FD | 	call	#_fatfs_cc_disk_write
23e08     00 FA 0D F2 | 	cmp	result1, #0 wz
23e0c     01 26 06 A1 |  if_e	add	local05, #1
23e10     C0 FF 9F AD |  if_e	jmp	#LR__3690
23e14                 | LR__3691
23e14                 | ' 	}
23e14                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
23e14     0A 1E 06 F1 | 	add	local01, #10
23e18     0F 25 E2 FA | 	rdword	local04, local01
23e1c     12 27 0A F2 | 	cmp	local05, local04 wz
23e20     00 28 06 A6 |  if_e	mov	local06, #0
23e24     01 28 06 56 |  if_ne	mov	local06, #1
23e28     14 FB 01 F6 | 	mov	result1, local06
23e2c                 | LR__3692
23e2c     A7 F0 03 F6 | 	mov	ptra, fp
23e30     B2 00 A0 FD | 	call	#popregs_
23e34                 | _fatfs_cc_dir_clear_ret
23e34     2D 00 64 FD | 	ret
23e38                 | 
23e38                 | _fatfs_cc_dir_sdi
23e38     06 4A 05 F6 | 	mov	COUNT_, #6
23e3c     A8 00 A0 FD | 	call	#pushregs_
23e40     09 1F 02 F6 | 	mov	local01, arg01
23e44     0A 21 02 F6 | 	mov	local02, arg02
23e48     0F 23 02 FB | 	rdlong	local03, local01
23e4c     00 10 00 FF 
23e50     00 20 16 F2 | 	cmp	local02, ##2097152 wc
23e54     1F 20 CE C7 |  if_b	test	local02, #31 wz
23e58                 | ' 		return FR_INT_ERR;
23e58     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
23e5c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3706
23e60     10 1E 06 F1 | 	add	local01, #16
23e64     0F 21 62 FC | 	wrlong	local02, local01
23e68     08 1E 86 F1 | 	sub	local01, #8
23e6c     0F 25 0A FB | 	rdlong	local04, local01 wz
23e70     08 1E 86 F1 | 	sub	local01, #8
23e74     11 27 C2 AA |  if_e	rdbyte	local05, local03
23e78     03 26 16 A2 |  if_e	cmp	local05, #3 wc
23e7c     28 22 06 21 |  if_nc_and_z	add	local03, #40
23e80     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
23e84     28 22 86 21 |  if_nc_and_z	sub	local03, #40
23e88     00 24 0E F2 | 	cmp	local04, #0 wz
23e8c     3C 00 90 5D |  if_ne	jmp	#LR__3700
23e90     10 27 02 F6 | 	mov	local05, local02
23e94     05 26 46 F0 | 	shr	local05, #5
23e98     08 22 06 F1 | 	add	local03, #8
23e9c     11 15 E2 FA | 	rdword	arg02, local03
23ea0     08 22 86 F1 | 	sub	local03, #8
23ea4     0A 27 12 F2 | 	cmp	local05, arg02 wc
23ea8     02 FA 05 36 |  if_ae	mov	result1, #2
23eac     E4 00 90 3D |  if_ae	jmp	#LR__3706
23eb0     28 22 06 F1 | 	add	local03, #40
23eb4     11 27 02 FB | 	rdlong	local05, local03
23eb8     28 22 86 F1 | 	sub	local03, #40
23ebc     18 1E 06 F1 | 	add	local01, #24
23ec0     0F 27 62 FC | 	wrlong	local05, local01
23ec4     18 1E 86 F1 | 	sub	local01, #24
23ec8     7C 00 90 FD | 	jmp	#LR__3705
23ecc                 | LR__3700
23ecc     0A 22 06 F1 | 	add	local03, #10
23ed0     11 29 E2 FA | 	rdword	local06, local03
23ed4     0A 22 86 F1 | 	sub	local03, #10
23ed8     09 28 66 F0 | 	shl	local06, #9
23edc                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
23edc                 | ' 		while (ofs >= csz) {
23edc                 | LR__3701
23edc     14 21 12 F2 | 	cmp	local02, local06 wc
23ee0     4C 00 90 CD |  if_b	jmp	#LR__3704
23ee4     0F 13 02 F6 | 	mov	arg01, local01
23ee8     12 15 02 F6 | 	mov	arg02, local04
23eec     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
23ef0     FD 24 02 F6 | 	mov	local04, result1
23ef4     FF FF 7F FF 
23ef8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
23efc     01 FA 05 A6 |  if_e	mov	result1, #1
23f00     90 00 90 AD |  if_e	jmp	#LR__3706
23f04     02 24 16 F2 | 	cmp	local04, #2 wc
23f08     14 00 90 CD |  if_b	jmp	#LR__3702
23f0c     18 22 06 F1 | 	add	local03, #24
23f10     11 27 02 FB | 	rdlong	local05, local03
23f14     18 22 86 F1 | 	sub	local03, #24
23f18     13 25 12 F2 | 	cmp	local04, local05 wc
23f1c     08 00 90 CD |  if_b	jmp	#LR__3703
23f20                 | LR__3702
23f20     02 FA 05 F6 | 	mov	result1, #2
23f24     6C 00 90 FD | 	jmp	#LR__3706
23f28                 | LR__3703
23f28     14 21 82 F1 | 	sub	local02, local06
23f2c     AC FF 9F FD | 	jmp	#LR__3701
23f30                 | LR__3704
23f30     11 13 02 F6 | 	mov	arg01, local03
23f34     12 15 02 F6 | 	mov	arg02, local04
23f38     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
23f3c     18 1E 06 F1 | 	add	local01, #24
23f40     0F FB 61 FC | 	wrlong	result1, local01
23f44     18 1E 86 F1 | 	sub	local01, #24
23f48                 | LR__3705
23f48     14 1E 06 F1 | 	add	local01, #20
23f4c     0F 25 62 FC | 	wrlong	local04, local01
23f50     04 1E 06 F1 | 	add	local01, #4
23f54     0F 27 0A FB | 	rdlong	local05, local01 wz
23f58     18 1E 86 F1 | 	sub	local01, #24
23f5c     02 FA 05 A6 |  if_e	mov	result1, #2
23f60     30 00 90 AD |  if_e	jmp	#LR__3706
23f64     10 29 02 F6 | 	mov	local06, local02
23f68     09 28 46 F0 | 	shr	local06, #9
23f6c     18 1E 06 F1 | 	add	local01, #24
23f70     0F 27 02 FB | 	rdlong	local05, local01
23f74     14 27 02 F1 | 	add	local05, local06
23f78     0F 27 62 FC | 	wrlong	local05, local01
23f7c     34 22 06 F1 | 	add	local03, #52
23f80     FF 21 06 F5 | 	and	local02, #511
23f84     10 23 02 F1 | 	add	local03, local02
23f88     04 1E 06 F1 | 	add	local01, #4
23f8c     0F 23 62 FC | 	wrlong	local03, local01
23f90                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
23f90                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
23f90                 | ' 
23f90                 | ' 	return FR_OK;
23f90     00 FA 05 F6 | 	mov	result1, #0
23f94                 | LR__3706
23f94     A7 F0 03 F6 | 	mov	ptra, fp
23f98     B2 00 A0 FD | 	call	#popregs_
23f9c                 | _fatfs_cc_dir_sdi_ret
23f9c     2D 00 64 FD | 	ret
23fa0                 | 
23fa0                 | _fatfs_cc_dir_next
23fa0     05 4A 05 F6 | 	mov	COUNT_, #5
23fa4     A8 00 A0 FD | 	call	#pushregs_
23fa8     09 1F 02 F6 | 	mov	local01, arg01
23fac     0A 21 02 F6 | 	mov	local02, arg02
23fb0     0F 23 02 FB | 	rdlong	local03, local01
23fb4     10 1E 06 F1 | 	add	local01, #16
23fb8     0F 25 02 FB | 	rdlong	local04, local01
23fbc     10 1E 86 F1 | 	sub	local01, #16
23fc0     20 24 06 F1 | 	add	local04, #32
23fc4     00 10 00 FF 
23fc8     00 24 16 F2 | 	cmp	local04, ##2097152 wc
23fcc     18 1E 06 31 |  if_ae	add	local01, #24
23fd0     0F 01 68 3C |  if_ae	wrlong	#0, local01
23fd4     18 1E 86 31 |  if_ae	sub	local01, #24
23fd8     18 1E 06 F1 | 	add	local01, #24
23fdc     0F 15 0A FB | 	rdlong	arg02, local01 wz
23fe0     18 1E 86 F1 | 	sub	local01, #24
23fe4     04 FA 05 A6 |  if_e	mov	result1, #4
23fe8     64 01 90 AD |  if_e	jmp	#LR__3715
23fec     FF 25 CE F7 | 	test	local04, #511 wz
23ff0     3C 01 90 5D |  if_ne	jmp	#LR__3714
23ff4     18 1E 06 F1 | 	add	local01, #24
23ff8     0F 15 02 FB | 	rdlong	arg02, local01
23ffc     01 14 06 F1 | 	add	arg02, #1
24000     0F 15 62 FC | 	wrlong	arg02, local01
24004     04 1E 86 F1 | 	sub	local01, #4
24008     0F 15 0A FB | 	rdlong	arg02, local01 wz
2400c     14 1E 86 F1 | 	sub	local01, #20
24010     2C 00 90 5D |  if_ne	jmp	#LR__3710
24014     12 15 02 F6 | 	mov	arg02, local04
24018     05 14 46 F0 | 	shr	arg02, #5
2401c     08 22 06 F1 | 	add	local03, #8
24020     11 21 E2 FA | 	rdword	local02, local03
24024     08 22 86 F1 | 	sub	local03, #8
24028     10 15 12 F2 | 	cmp	arg02, local02 wc
2402c     18 1E 06 31 |  if_ae	add	local01, #24
24030     0F 01 68 3C |  if_ae	wrlong	#0, local01
24034                 | ' 				dp->sect = 0; return FR_NO_FILE;
24034     04 FA 05 36 |  if_ae	mov	result1, #4
24038     14 01 90 3D |  if_ae	jmp	#LR__3715
2403c     F0 00 90 FD | 	jmp	#LR__3713
24040                 | LR__3710
24040     12 13 02 F6 | 	mov	arg01, local04
24044     09 12 46 F0 | 	shr	arg01, #9
24048     0A 22 06 F1 | 	add	local03, #10
2404c     11 15 E2 FA | 	rdword	arg02, local03
24050     0A 22 86 F1 | 	sub	local03, #10
24054     01 14 86 F1 | 	sub	arg02, #1
24058     0A 13 CA F7 | 	test	arg01, arg02 wz
2405c     D0 00 90 5D |  if_ne	jmp	#LR__3712
24060     0F 13 02 F6 | 	mov	arg01, local01
24064     14 1E 06 F1 | 	add	local01, #20
24068     0F 15 02 FB | 	rdlong	arg02, local01
2406c     14 1E 86 F1 | 	sub	local01, #20
24070     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
24074     FD 26 02 F6 | 	mov	local05, result1
24078     02 26 16 F2 | 	cmp	local05, #2 wc
2407c     02 FA 05 C6 |  if_b	mov	result1, #2
24080     CC 00 90 CD |  if_b	jmp	#LR__3715
24084     FF FF 7F FF 
24088     FF 27 0E F2 | 	cmp	local05, ##-1 wz
2408c     01 FA 05 A6 |  if_e	mov	result1, #1
24090     BC 00 90 AD |  if_e	jmp	#LR__3715
24094     18 22 06 F1 | 	add	local03, #24
24098     11 15 02 FB | 	rdlong	arg02, local03
2409c     18 22 86 F1 | 	sub	local03, #24
240a0     0A 27 12 F2 | 	cmp	local05, arg02 wc
240a4     68 00 90 CD |  if_b	jmp	#LR__3711
240a8     00 20 0E F2 | 	cmp	local02, #0 wz
240ac     18 1E 06 A1 |  if_e	add	local01, #24
240b0     0F 01 68 AC |  if_e	wrlong	#0, local01
240b4                 | ' 						dp->sect = 0; return FR_NO_FILE;
240b4     04 FA 05 A6 |  if_e	mov	result1, #4
240b8     94 00 90 AD |  if_e	jmp	#LR__3715
240bc     0F 13 02 F6 | 	mov	arg01, local01
240c0     14 1E 06 F1 | 	add	local01, #20
240c4     0F 15 02 FB | 	rdlong	arg02, local01
240c8     14 1E 86 F1 | 	sub	local01, #20
240cc     84 FA BF FD | 	call	#_fatfs_cc_create_chain
240d0     FD 26 0A F6 | 	mov	local05, result1 wz
240d4     07 FA 05 A6 |  if_e	mov	result1, #7
240d8     74 00 90 AD |  if_e	jmp	#LR__3715
240dc     01 26 0E F2 | 	cmp	local05, #1 wz
240e0     02 FA 05 A6 |  if_e	mov	result1, #2
240e4     68 00 90 AD |  if_e	jmp	#LR__3715
240e8     FF FF 7F FF 
240ec     FF 27 0E F2 | 	cmp	local05, ##-1 wz
240f0     01 FA 05 A6 |  if_e	mov	result1, #1
240f4     58 00 90 AD |  if_e	jmp	#LR__3715
240f8     13 15 02 F6 | 	mov	arg02, local05
240fc     11 13 02 F6 | 	mov	arg01, local03
24100     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
24104     00 FA 0D F2 | 	cmp	result1, #0 wz
24108     01 FA 05 56 |  if_ne	mov	result1, #1
2410c     40 00 90 5D |  if_ne	jmp	#LR__3715
24110                 | LR__3711
24110     14 1E 06 F1 | 	add	local01, #20
24114     0F 27 62 FC | 	wrlong	local05, local01
24118     11 13 02 F6 | 	mov	arg01, local03
2411c     13 15 02 F6 | 	mov	arg02, local05
24120     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
24124     04 1E 06 F1 | 	add	local01, #4
24128     0F FB 61 FC | 	wrlong	result1, local01
2412c     18 1E 86 F1 | 	sub	local01, #24
24130                 | LR__3712
24130                 | LR__3713
24130                 | LR__3714
24130     10 1E 06 F1 | 	add	local01, #16
24134     0F 25 62 FC | 	wrlong	local04, local01
24138     34 22 06 F1 | 	add	local03, #52
2413c     FF 25 06 F5 | 	and	local04, #511
24140     12 23 02 F1 | 	add	local03, local04
24144     0C 1E 06 F1 | 	add	local01, #12
24148     0F 23 62 FC | 	wrlong	local03, local01
2414c                 | ' #line 1771 "ff.c"
2414c                 | ' 				}
2414c                 | ' 				dp->clust = clst;
2414c                 | ' 				dp->sect = clst2sect(fs, clst);
2414c                 | ' 			}
2414c                 | ' 		}
2414c                 | ' 	}
2414c                 | ' 	dp->dptr = ofs;
2414c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2414c                 | ' 
2414c                 | ' 	return FR_OK;
2414c     00 FA 05 F6 | 	mov	result1, #0
24150                 | LR__3715
24150     A7 F0 03 F6 | 	mov	ptra, fp
24154     B2 00 A0 FD | 	call	#popregs_
24158                 | _fatfs_cc_dir_next_ret
24158     2D 00 64 FD | 	ret
2415c                 | 
2415c                 | _fatfs_cc_dir_alloc
2415c     08 4A 05 F6 | 	mov	COUNT_, #8
24160     A8 00 A0 FD | 	call	#pushregs_
24164     09 1F 02 F6 | 	mov	local01, arg01
24168     0A 21 02 F6 | 	mov	local02, arg02
2416c     0F 23 02 FB | 	rdlong	local03, local01
24170     0F 13 02 F6 | 	mov	arg01, local01
24174     00 14 06 F6 | 	mov	arg02, #0
24178     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2417c     FD 24 0A F6 | 	mov	local04, result1 wz
24180     70 00 90 5D |  if_ne	jmp	#LR__3724
24184     00 26 06 F6 | 	mov	local05, #0
24188                 | ' 		n = 0;
24188                 | ' 		do {
24188                 | LR__3720
24188     18 1E 06 F1 | 	add	local01, #24
2418c     0F 15 02 FB | 	rdlong	arg02, local01
24190     18 1E 86 F1 | 	sub	local01, #24
24194     11 13 02 F6 | 	mov	arg01, local03
24198     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2419c     FD 24 0A F6 | 	mov	local04, result1 wz
241a0     50 00 90 5D |  if_ne	jmp	#LR__3723
241a4     1C 1E 06 F1 | 	add	local01, #28
241a8     0F 29 02 FB | 	rdlong	local06, local01
241ac     1C 1E 86 F1 | 	sub	local01, #28
241b0     14 29 C2 FA | 	rdbyte	local06, local06
241b4     E5 28 0E F2 | 	cmp	local06, #229 wz
241b8     1C 1E 06 51 |  if_ne	add	local01, #28
241bc     0F 2B 02 5B |  if_ne	rdlong	local07, local01
241c0     1C 1E 86 51 |  if_ne	sub	local01, #28
241c4     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
241c8     10 00 90 5D |  if_ne	jmp	#LR__3721
241cc     01 26 06 F1 | 	add	local05, #1
241d0     10 27 0A F2 | 	cmp	local05, local02 wz
241d4     1C 00 90 AD |  if_e	jmp	#LR__3723
241d8     04 00 90 FD | 	jmp	#LR__3722
241dc                 | LR__3721
241dc     00 26 06 F6 | 	mov	local05, #0
241e0                 | LR__3722
241e0     0F 13 02 F6 | 	mov	arg01, local01
241e4     01 14 06 F6 | 	mov	arg02, #1
241e8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
241ec     FD 24 0A F6 | 	mov	local04, result1 wz
241f0     94 FF 9F AD |  if_e	jmp	#LR__3720
241f4                 | LR__3723
241f4                 | LR__3724
241f4     04 24 0E F2 | 	cmp	local04, #4 wz
241f8     07 24 06 A6 |  if_e	mov	local04, #7
241fc                 | ' 	return res;
241fc     12 FB 01 F6 | 	mov	result1, local04
24200     A7 F0 03 F6 | 	mov	ptra, fp
24204     B2 00 A0 FD | 	call	#popregs_
24208                 | _fatfs_cc_dir_alloc_ret
24208     2D 00 64 FD | 	ret
2420c                 | 
2420c                 | _fatfs_cc_ld_clust
2420c     09 01 02 F6 | 	mov	_var01, arg01
24210     0A 13 02 F6 | 	mov	arg01, arg02
24214     1A 12 06 F1 | 	add	arg01, #26
24218                 | ' {
24218                 | ' 
24218                 | ' 	return *((WORD*)ptr);
24218     09 FB E1 FA | 	rdword	result1, arg01
2421c     FD 12 32 F9 | 	getword	arg01, result1, #0
24220     00 01 C2 FA | 	rdbyte	_var01, _var01
24224     03 00 0E F2 | 	cmp	_var01, #3 wz
24228     14 14 06 A1 |  if_e	add	arg02, #20
2422c                 | ' {
2422c                 | ' 
2422c                 | ' 	return *((WORD*)ptr);
2422c     0A FB E1 AA |  if_e	rdword	result1, arg02
24230     10 FA 65 A0 |  if_e	shl	result1, #16
24234     FD 12 42 A5 |  if_e	or	arg01, result1
24238                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
24238                 | ' 	}
24238                 | ' 
24238                 | ' 	return cl;
24238     09 FB 01 F6 | 	mov	result1, arg01
2423c                 | _fatfs_cc_ld_clust_ret
2423c     2D 00 64 FD | 	ret
24240                 | 
24240                 | _fatfs_cc_st_clust
24240     09 01 02 F6 | 	mov	_var01, arg01
24244     0A 13 02 F6 | 	mov	arg01, arg02
24248     1A 12 06 F1 | 	add	arg01, #26
2424c     09 17 52 FC | 	wrword	arg03, arg01
24250     00 01 C2 FA | 	rdbyte	_var01, _var01
24254     03 00 0E F2 | 	cmp	_var01, #3 wz
24258     14 14 06 A1 |  if_e	add	arg02, #20
2425c     10 16 46 A0 |  if_e	shr	arg03, #16
24260     0A 17 52 AC |  if_e	wrword	arg03, arg02
24264                 | _fatfs_cc_st_clust_ret
24264     2D 00 64 FD | 	ret
24268                 | 
24268                 | _fatfs_cc_cmp_lfn
24268     07 4A 05 F6 | 	mov	COUNT_, #7
2426c     A8 00 A0 FD | 	call	#pushregs_
24270     09 1F 02 F6 | 	mov	local01, arg01
24274     0A 13 02 F6 | 	mov	arg01, arg02
24278     1A 12 06 F1 | 	add	arg01, #26
2427c                 | ' {
2427c                 | ' 
2427c                 | ' 	return *((WORD*)ptr);
2427c     09 FB E9 FA | 	rdword	result1, arg01 wz
24280     00 FA 05 56 |  if_ne	mov	result1, #0
24284     E0 00 90 5D |  if_ne	jmp	#LR__3736
24288     0A 21 C2 FA | 	rdbyte	local02, arg02
2428c     3F 20 06 F5 | 	and	local02, #63
24290     01 20 86 F1 | 	sub	local02, #1
24294     0D 20 06 FD | 	qmul	local02, #13
24298                 | ' 
24298                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
24298                 | ' 
24298                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
24298     01 22 06 F6 | 	mov	local03, #1
2429c     00 24 06 F6 | 	mov	local04, #0
242a0     18 26 62 FD | 	getqx	local05
242a4                 | LR__3730
242a4     0D 24 16 F2 | 	cmp	local04, #13 wc
242a8     9C 00 90 3D |  if_ae	jmp	#LR__3735
242ac     0A 13 02 F6 | 	mov	arg01, arg02
242b0     12 21 02 F6 | 	mov	local02, local04
242b4     01 00 00 FF 
242b8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
242bc     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
242c0     10 21 C2 FA | 	rdbyte	local02, local02
242c4     01 20 06 FA | 	mul	local02, #1
242c8     10 13 02 F1 | 	add	arg01, local02
242cc     01 00 00 FF 
242d0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
242d4                 | ' {
242d4                 | ' 
242d4                 | ' 	return *((WORD*)ptr);
242d4     09 FB E1 FA | 	rdword	result1, arg01
242d8     FD 28 02 F6 | 	mov	local06, result1
242dc     11 21 02 F6 | 	mov	local02, local03
242e0     0F 20 4E F7 | 	zerox	local02, #15 wz
242e4     44 00 90 AD |  if_e	jmp	#LR__3733
242e8     00 27 16 F2 | 	cmp	local05, #256 wc
242ec     2C 00 90 3D |  if_ae	jmp	#LR__3731
242f0     14 13 32 F9 | 	getword	arg01, local06, #0
242f4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
242f8     FD 20 02 F6 | 	mov	local02, result1
242fc     13 23 02 F6 | 	mov	local03, local05
24300     01 22 66 F0 | 	shl	local03, #1
24304     0F 23 02 F1 | 	add	local03, local01
24308     11 13 E2 FA | 	rdword	arg01, local03
2430c     01 26 06 F1 | 	add	local05, #1
24310     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
24314     FD 20 0A F2 | 	cmp	local02, result1 wz
24318     08 00 90 AD |  if_e	jmp	#LR__3732
2431c                 | LR__3731
2431c                 | ' 				return 0;
2431c     00 FA 05 F6 | 	mov	result1, #0
24320     44 00 90 FD | 	jmp	#LR__3736
24324                 | LR__3732
24324     14 23 02 F6 | 	mov	local03, local06
24328     14 00 90 FD | 	jmp	#LR__3734
2432c                 | LR__3733
2432c     14 29 32 F9 | 	getword	local06, local06, #0
24330     7F 00 00 FF 
24334     FF 29 0E F2 | 	cmp	local06, ##65535 wz
24338     00 FA 05 56 |  if_ne	mov	result1, #0
2433c     28 00 90 5D |  if_ne	jmp	#LR__3736
24340                 | LR__3734
24340     01 24 06 F1 | 	add	local04, #1
24344     5C FF 9F FD | 	jmp	#LR__3730
24348                 | LR__3735
24348     0A 21 C2 FA | 	rdbyte	local02, arg02
2434c     40 20 CE F7 | 	test	local02, #64 wz
24350     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
24354     01 26 66 50 |  if_ne	shl	local05, #1
24358     0F 27 02 51 |  if_ne	add	local05, local01
2435c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
24360     00 FA 05 56 |  if_ne	mov	result1, #0
24364                 | ' 
24364                 | ' 	return 1;
24364     01 FA 05 A6 |  if_e	mov	result1, #1
24368                 | LR__3736
24368     A7 F0 03 F6 | 	mov	ptra, fp
2436c     B2 00 A0 FD | 	call	#popregs_
24370                 | _fatfs_cc_cmp_lfn_ret
24370     2D 00 64 FD | 	ret
24374                 | 
24374                 | _fatfs_cc_pick_lfn
24374     09 01 02 F6 | 	mov	_var01, arg01
24378     0A 13 02 F6 | 	mov	arg01, arg02
2437c     1A 12 06 F1 | 	add	arg01, #26
24380                 | ' {
24380                 | ' 
24380                 | ' 	return *((WORD*)ptr);
24380     09 FB E9 FA | 	rdword	result1, arg01 wz
24384     00 FA 05 56 |  if_ne	mov	result1, #0
24388     D4 00 90 5D |  if_ne	jmp	#LR__3745
2438c     0A 03 C2 FA | 	rdbyte	_var02, arg02
24390     40 02 26 F5 | 	andn	_var02, #64
24394     01 02 86 F1 | 	sub	_var02, #1
24398     0D 02 06 FD | 	qmul	_var02, #13
2439c                 | ' 
2439c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2439c                 | ' 
2439c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2439c     01 04 06 F6 | 	mov	_var03, #1
243a0     00 06 06 F6 | 	mov	_var04, #0
243a4     18 08 62 FD | 	getqx	_var05
243a8                 | LR__3740
243a8     0D 06 16 F2 | 	cmp	_var04, #13 wc
243ac     80 00 90 3D |  if_ae	jmp	#LR__3743
243b0     0A 13 02 F6 | 	mov	arg01, arg02
243b4     03 03 02 F6 | 	mov	_var02, _var04
243b8     01 00 00 FF 
243bc     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
243c0     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
243c4     01 03 C2 FA | 	rdbyte	_var02, _var02
243c8     01 02 06 FA | 	mul	_var02, #1
243cc     01 13 02 F1 | 	add	arg01, _var02
243d0     01 00 00 FF 
243d4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
243d8                 | ' {
243d8                 | ' 
243d8                 | ' 	return *((WORD*)ptr);
243d8     09 FB E1 FA | 	rdword	result1, arg01
243dc     FD 0A 02 F6 | 	mov	_var06, result1
243e0     02 03 02 F6 | 	mov	_var02, _var03
243e4     0F 02 4E F7 | 	zerox	_var02, #15 wz
243e8     28 00 90 AD |  if_e	jmp	#LR__3741
243ec     00 09 16 F2 | 	cmp	_var05, #256 wc
243f0     00 FA 05 36 |  if_ae	mov	result1, #0
243f4     68 00 90 3D |  if_ae	jmp	#LR__3745
243f8     04 03 02 F6 | 	mov	_var02, _var05
243fc     01 02 66 F0 | 	shl	_var02, #1
24400     00 03 02 F1 | 	add	_var02, _var01
24404     05 05 02 F6 | 	mov	_var03, _var06
24408     01 05 52 FC | 	wrword	_var03, _var02
2440c     01 08 06 F1 | 	add	_var05, #1
24410     14 00 90 FD | 	jmp	#LR__3742
24414                 | LR__3741
24414     05 0B 32 F9 | 	getword	_var06, _var06, #0
24418     7F 00 00 FF 
2441c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
24420     00 FA 05 56 |  if_ne	mov	result1, #0
24424     38 00 90 5D |  if_ne	jmp	#LR__3745
24428                 | LR__3742
24428     01 06 06 F1 | 	add	_var04, #1
2442c     78 FF 9F FD | 	jmp	#LR__3740
24430                 | LR__3743
24430     0A 03 C2 FA | 	rdbyte	_var02, arg02
24434     40 02 CE F7 | 	test	_var02, #64 wz
24438     02 0D 02 56 |  if_ne	mov	_var07, _var03
2443c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
24440     18 00 90 AD |  if_e	jmp	#LR__3744
24444     00 09 16 F2 | 	cmp	_var05, #256 wc
24448     00 FA 05 36 |  if_ae	mov	result1, #0
2444c     10 00 90 3D |  if_ae	jmp	#LR__3745
24450     01 08 66 F0 | 	shl	_var05, #1
24454     00 09 02 F1 | 	add	_var05, _var01
24458     04 01 58 FC | 	wrword	#0, _var05
2445c                 | LR__3744
2445c                 | ' 		lfnbuf[i] = 0;
2445c                 | ' 	}
2445c                 | ' 
2445c                 | ' 	return 1;
2445c     01 FA 05 F6 | 	mov	result1, #1
24460                 | LR__3745
24460                 | _fatfs_cc_pick_lfn_ret
24460     2D 00 64 FD | 	ret
24464                 | 
24464                 | _fatfs_cc_put_lfn
24464     0D 14 06 F1 | 	add	arg02, #13
24468     0A 19 42 FC | 	wrbyte	arg04, arg02
2446c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
24470     01 18 86 F1 | 	sub	arg04, #1
24474     0D 18 06 FD | 	qmul	arg04, #13
24478     09 01 02 F6 | 	mov	_var01, arg01
2447c     02 14 86 F1 | 	sub	arg02, #2
24480     0A 1F 48 FC | 	wrbyte	#15, arg02
24484     01 14 06 F1 | 	add	arg02, #1
24488     0A 01 48 FC | 	wrbyte	#0, arg02
2448c     0C 14 86 F1 | 	sub	arg02, #12
24490     0A 13 02 F6 | 	mov	arg01, arg02
24494     1A 12 06 F1 | 	add	arg01, #26
24498     09 01 58 FC | 	wrword	#0, arg01
2449c     00 02 06 F6 | 	mov	_var02, #0
244a0     00 04 06 F6 | 	mov	_var03, #0
244a4                 | ' 	BYTE* dir,
244a4                 | ' 	BYTE ord,
244a4                 | ' 	BYTE sum
244a4                 | ' )
244a4                 | ' {
244a4                 | ' 	UINT i, s;
244a4                 | ' 	WCHAR wc;
244a4                 | ' 
244a4                 | ' 
244a4                 | ' 	dir[ 13 ] = sum;
244a4                 | ' 	dir[ 11 ] =  0x0F ;
244a4                 | ' 	dir[ 12 ] = 0;
244a4                 | ' 	st_word(dir +  26 , 0);
244a4                 | ' 
244a4                 | ' 	i = (ord - 1) * 13;
244a4                 | ' 	s = wc = 0;
244a4                 | ' 	do {
244a4     01 00 00 FF 
244a8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
244ac     18 06 62 FD | 	getqx	_var04
244b0     97 2A 48 FB | 	callpa	#(@LR__3751-@LR__3750)>>2,fcache_load_ptr_
244b4                 | LR__3750
244b4     01 19 32 F9 | 	getword	arg04, _var02, #0
244b8     7F 00 00 FF 
244bc     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
244c0     03 13 02 56 |  if_ne	mov	arg01, _var04
244c4     01 06 06 51 |  if_ne	add	_var04, #1
244c8     01 12 66 50 |  if_ne	shl	arg01, #1
244cc     00 13 02 51 |  if_ne	add	arg01, _var01
244d0     09 03 E2 5A |  if_ne	rdword	_var02, arg01
244d4     0A 13 02 F6 | 	mov	arg01, arg02
244d8     02 19 02 F6 | 	mov	arg04, _var03
244dc     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
244e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
244e4     01 18 06 FA | 	mul	arg04, #1
244e8     0C 13 02 F1 | 	add	arg01, arg04
244ec     09 03 52 FC | 	wrword	_var02, arg01
244f0     01 19 02 F6 | 	mov	arg04, _var02
244f4     0F 18 4E F7 | 	zerox	arg04, #15 wz
244f8     0F 02 CE A9 |  if_e	bmask	_var02, #15
244fc     01 04 06 F1 | 	add	_var03, #1
24500     0D 04 16 F2 | 	cmp	_var03, #13 wc
24504     AC FF 9F CD |  if_b	jmp	#LR__3750
24508                 | LR__3751
24508     01 00 00 FF 
2450c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
24510     01 03 32 F9 | 	getword	_var02, _var02, #0
24514     7F 00 00 FF 
24518     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2451c     01 06 66 50 |  if_ne	shl	_var04, #1
24520     00 07 02 51 |  if_ne	add	_var04, _var01
24524     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
24528     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2452c     40 16 46 A5 |  if_e	or	arg03, #64
24530     0A 17 42 FC | 	wrbyte	arg03, arg02
24534                 | _fatfs_cc_put_lfn_ret
24534     2D 00 64 FD | 	ret
24538                 | 
24538                 | _fatfs_cc_gen_numname
24538     08 4A 05 F6 | 	mov	COUNT_, #8
2453c     A8 00 A0 FD | 	call	#pushregs_
24540     2C F0 07 F1 | 	add	ptra, #44
24544     09 1F 02 F6 | 	mov	local01, arg01
24548     0A 21 02 F6 | 	mov	local02, arg02
2454c     0B 23 02 F6 | 	mov	local03, arg03
24550     0C 25 02 F6 | 	mov	local04, arg04
24554     0F 13 02 F6 | 	mov	arg01, local01
24558     10 15 02 F6 | 	mov	arg02, local02
2455c     0B 16 06 F6 | 	mov	arg03, #11
24560     FC 77 BF FD | 	call	#__system____builtin_memmove
24564     06 24 16 F2 | 	cmp	local04, #6 wc
24568     48 00 90 CD |  if_b	jmp	#LR__3765
2456c     12 27 02 F6 | 	mov	local05, local04
24570     97 1E 48 FB | 	callpa	#(@LR__3763-@LR__3760)>>2,fcache_load_ptr_
24574                 | ' 		sreg = seq;
24574                 | ' 		while (*lfn) {
24574                 | LR__3760
24574     11 29 EA FA | 	rdword	local06, local03 wz
24578     34 00 90 AD |  if_e	jmp	#LR__3764
2457c     11 2B E2 FA | 	rdword	local07, local03
24580                 | ' 			wc = *lfn++;
24580                 | ' 			for (i = 0; i < 16; i++) {
24580     02 22 06 F1 | 	add	local03, #2
24584     10 12 DC FC | 	rep	@LR__3762, #16
24588                 | LR__3761
24588     01 26 66 F0 | 	shl	local05, #1
2458c     15 29 32 F9 | 	getword	local06, local07, #0
24590     01 28 06 F5 | 	and	local06, #1
24594     14 27 02 F1 | 	add	local05, local06
24598     15 2B 32 F9 | 	getword	local07, local07, #0
2459c     01 2A 46 F0 | 	shr	local07, #1
245a0     10 26 2E F4 | 	testbn	local05, #16 wz
245a4     88 00 00 5F 
245a8     21 26 66 55 |  if_ne	xor	local05, ##69665
245ac                 | LR__3762
245ac     C4 FF 9F FD | 	jmp	#LR__3760
245b0                 | LR__3763
245b0                 | LR__3764
245b0     13 25 02 F6 | 	mov	local04, local05
245b4                 | LR__3765
245b4     07 2A 06 F6 | 	mov	local07, #7
245b8                 | ' 			}
245b8                 | ' 		}
245b8                 | ' 		seq = (UINT)sreg;
245b8                 | ' 	}
245b8                 | ' 
245b8                 | ' 
245b8                 | ' 	i = 7;
245b8                 | ' 	do {
245b8     10 4E 05 F1 | 	add	fp, #16
245bc     97 1A 48 FB | 	callpa	#(@LR__3767-@LR__3766)>>2,fcache_load_ptr_
245c0                 | LR__3766
245c0     12 27 42 F8 | 	getnib	local05, local04, #0
245c4     30 26 06 F1 | 	add	local05, #48
245c8     04 24 46 F0 | 	shr	local04, #4
245cc     13 29 E2 F8 | 	getbyte	local06, local05, #0
245d0     3A 28 16 F2 | 	cmp	local06, #58 wc
245d4     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
245d8     07 26 06 31 |  if_ae	add	local05, #7
245dc     15 29 02 F6 | 	mov	local06, local07
245e0     01 2A 8E F1 | 	sub	local07, #1 wz
245e4     A7 28 02 F1 | 	add	local06, fp
245e8     14 27 42 FC | 	wrbyte	local05, local06
245ec     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
245f0     CC FF 9F 5D |  if_ne	jmp	#LR__3766
245f4                 | LR__3767
245f4     15 29 02 F6 | 	mov	local06, local07
245f8     A7 28 02 F1 | 	add	local06, fp
245fc     14 FD 48 FC | 	wrbyte	#126, local06
24600                 | ' 	ns[i] = '~';
24600                 | ' 
24600                 | ' 
24600                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
24600     00 26 06 F6 | 	mov	local05, #0
24604     10 4E 85 F1 | 	sub	fp, #16
24608     97 2A 48 FB | 	callpa	#(@LR__3770-@LR__3768)>>2,fcache_load_ptr_
2460c                 | LR__3768
2460c     15 27 12 F2 | 	cmp	local05, local07 wc
24610     4C 00 90 3D |  if_ae	jmp	#LR__3771
24614     13 29 02 F6 | 	mov	local06, local05
24618     0F 29 02 F1 | 	add	local06, local01
2461c     14 29 C2 FA | 	rdbyte	local06, local06
24620     20 28 0E F2 | 	cmp	local06, #32 wz
24624     38 00 90 AD |  if_e	jmp	#LR__3771
24628     13 13 02 F6 | 	mov	arg01, local05
2462c     0F 13 02 F1 | 	add	arg01, local01
24630     09 13 CA FA | 	rdbyte	arg01, arg01 wz
24634     00 FA 05 56 |  if_ne	mov	result1, #0
24638                 | ' 
24638                 | ' 	return 0;
24638     00 FA 05 A6 |  if_e	mov	result1, #0
2463c     00 FA 0D F2 | 	cmp	result1, #0 wz
24640     14 00 90 AD |  if_e	jmp	#LR__3769
24644     15 29 02 F6 | 	mov	local06, local07
24648     01 28 86 F1 | 	sub	local06, #1
2464c     14 27 0A F2 | 	cmp	local05, local06 wz
24650     0C 00 90 AD |  if_e	jmp	#LR__3771
24654     01 26 06 F1 | 	add	local05, #1
24658                 | LR__3769
24658     01 26 06 F1 | 	add	local05, #1
2465c     AC FF 9F FD | 	jmp	#LR__3768
24660                 | LR__3770
24660                 | LR__3771
24660     97 20 48 FB | 	callpa	#(@LR__3775-@LR__3772)>>2,fcache_load_ptr_
24664                 | ' 			j++;
24664                 | ' 		}
24664                 | ' 	}
24664                 | ' 	do {
24664                 | LR__3772
24664     13 29 02 F6 | 	mov	local06, local05
24668     0F 29 02 F1 | 	add	local06, local01
2466c     08 2A 16 F2 | 	cmp	local07, #8 wc
24670     01 26 06 F1 | 	add	local05, #1
24674     1C 00 90 3D |  if_ae	jmp	#LR__3773
24678     15 25 02 F6 | 	mov	local04, local07
2467c     10 4E 05 F1 | 	add	fp, #16
24680     A7 24 02 F1 | 	add	local04, fp
24684     12 2D C2 FA | 	rdbyte	local08, local04
24688     01 2A 06 F1 | 	add	local07, #1
2468c     10 4E 85 F1 | 	sub	fp, #16
24690     04 00 90 FD | 	jmp	#LR__3774
24694                 | LR__3773
24694     20 2C 06 F6 | 	mov	local08, #32
24698                 | LR__3774
24698     14 2D 42 FC | 	wrbyte	local08, local06
2469c     08 26 16 F2 | 	cmp	local05, #8 wc
246a0     C0 FF 9F CD |  if_b	jmp	#LR__3772
246a4                 | LR__3775
246a4     A7 F0 03 F6 | 	mov	ptra, fp
246a8     B2 00 A0 FD | 	call	#popregs_
246ac                 | _fatfs_cc_gen_numname_ret
246ac     2D 00 64 FD | 	ret
246b0                 | 
246b0                 | _fatfs_cc_sum_sfn
246b0     00 00 06 F6 | 	mov	_var01, #0
246b4                 | ' )
246b4                 | ' {
246b4                 | ' 	BYTE sum = 0;
246b4                 | ' 	UINT n = 11;
246b4                 | ' 
246b4                 | ' 	do {
246b4     97 12 48 FB | 	callpa	#(@LR__3782-@LR__3780)>>2,fcache_load_ptr_
246b8                 | LR__3780
246b8     0B 10 DC FC | 	rep	@LR__3783, #11
246bc                 | LR__3781
246bc     00 FB E1 F8 | 	getbyte	result1, _var01, #0
246c0     01 FA 45 F0 | 	shr	result1, #1
246c4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
246c8     07 00 66 F0 | 	shl	_var01, #7
246cc     00 FB 01 F1 | 	add	result1, _var01
246d0     09 01 C2 FA | 	rdbyte	_var01, arg01
246d4     FD 00 02 F1 | 	add	_var01, result1
246d8     01 12 06 F1 | 	add	arg01, #1
246dc                 | LR__3782
246dc                 | LR__3783
246dc                 | ' 	return sum;
246dc     00 FB 01 F6 | 	mov	result1, _var01
246e0                 | _fatfs_cc_sum_sfn_ret
246e0     2D 00 64 FD | 	ret
246e4                 | 
246e4                 | _fatfs_cc_dir_read
246e4     0C 4A 05 F6 | 	mov	COUNT_, #12
246e8     A8 00 A0 FD | 	call	#pushregs_
246ec     09 1F 02 F6 | 	mov	local01, arg01
246f0     0A 21 02 F6 | 	mov	local02, arg02
246f4     04 22 06 F6 | 	mov	local03, #4
246f8     0F 25 02 FB | 	rdlong	local04, local01
246fc     FF 26 06 F6 | 	mov	local05, #255
24700     FF 28 06 F6 | 	mov	local06, #255
24704                 | ' )
24704                 | ' {
24704                 | ' 	FRESULT res = FR_NO_FILE;
24704                 | ' 	FATFS *fs = dp->obj.fs;
24704                 | ' 	BYTE attr, b;
24704                 | ' 
24704                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
24704                 | ' 
24704                 | ' 
24704                 | ' 	while (dp->sect) {
24704                 | LR__3790
24704     18 1E 06 F1 | 	add	local01, #24
24708     0F FB 09 FB | 	rdlong	result1, local01 wz
2470c     18 1E 86 F1 | 	sub	local01, #24
24710     AC 01 90 AD |  if_e	jmp	#LR__3800
24714     18 1E 06 F1 | 	add	local01, #24
24718     0F 15 02 FB | 	rdlong	arg02, local01
2471c     18 1E 86 F1 | 	sub	local01, #24
24720     12 13 02 F6 | 	mov	arg01, local04
24724     AC ED BF FD | 	call	#_fatfs_cc_move_window
24728     FD 22 0A F6 | 	mov	local03, result1 wz
2472c     90 01 90 5D |  if_ne	jmp	#LR__3800
24730     1C 1E 06 F1 | 	add	local01, #28
24734     0F FB 01 FB | 	rdlong	result1, local01
24738     1C 1E 86 F1 | 	sub	local01, #28
2473c     FD 2A C2 FA | 	rdbyte	local07, result1
24740     15 FB 01 F6 | 	mov	result1, local07
24744     07 FA 4D F7 | 	zerox	result1, #7 wz
24748     04 22 06 A6 |  if_e	mov	local03, #4
2474c                 | ' 			res = FR_NO_FILE; break;
2474c     70 01 90 AD |  if_e	jmp	#LR__3800
24750     1C 1E 06 F1 | 	add	local01, #28
24754     0F 2D 02 FB | 	rdlong	local08, local01
24758     0B 2C 06 F1 | 	add	local08, #11
2475c     16 2F C2 FA | 	rdbyte	local09, local08
24760     3F 2E 06 F5 | 	and	local09, #63
24764     16 1E 86 F1 | 	sub	local01, #22
24768     0F 2F 42 FC | 	wrbyte	local09, local01
2476c     06 1E 86 F1 | 	sub	local01, #6
24770     15 FB E1 F8 | 	getbyte	result1, local07, #0
24774     E5 FA 0D F2 | 	cmp	result1, #229 wz
24778     15 2D 02 56 |  if_ne	mov	local08, local07
2477c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
24780     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
24784     1C 00 90 AD |  if_e	jmp	#LR__3791
24788     00 30 06 F6 | 	mov	local10, #0
2478c     17 2D E2 F8 | 	getbyte	local08, local09, #0
24790     20 2C 26 F5 | 	andn	local08, #32
24794     08 2C 0E F2 | 	cmp	local08, #8 wz
24798     01 30 06 A6 |  if_e	mov	local10, #1
2479c     10 31 0A F2 | 	cmp	local10, local02 wz
247a0     08 00 90 AD |  if_e	jmp	#LR__3792
247a4                 | LR__3791
247a4     FF 26 06 F6 | 	mov	local05, #255
247a8     00 01 90 FD | 	jmp	#LR__3799
247ac                 | LR__3792
247ac     17 2F E2 F8 | 	getbyte	local09, local09, #0
247b0     0F 2E 0E F2 | 	cmp	local09, #15 wz
247b4     B4 00 90 5D |  if_ne	jmp	#LR__3796
247b8     15 33 E2 F8 | 	getbyte	local11, local07, #0
247bc     40 32 CE F7 | 	test	local11, #64 wz
247c0     30 00 90 AD |  if_e	jmp	#LR__3793
247c4     1C 1E 06 F1 | 	add	local01, #28
247c8     0F 33 02 FB | 	rdlong	local11, local01
247cc     0D 32 06 F1 | 	add	local11, #13
247d0     19 29 C2 FA | 	rdbyte	local06, local11
247d4     15 2B E2 F8 | 	getbyte	local07, local07, #0
247d8     BF 2A 06 F5 | 	and	local07, #191
247dc     15 27 02 F6 | 	mov	local05, local07
247e0     0C 1E 86 F1 | 	sub	local01, #12
247e4     0F 33 02 FB | 	rdlong	local11, local01
247e8     1C 1E 06 F1 | 	add	local01, #28
247ec     0F 33 62 FC | 	wrlong	local11, local01
247f0     2C 1E 86 F1 | 	sub	local01, #44
247f4                 | LR__3793
247f4     15 2D E2 F8 | 	getbyte	local08, local07, #0
247f8     13 31 E2 F8 | 	getbyte	local10, local05, #0
247fc     18 2D 0A F2 | 	cmp	local08, local10 wz
24800     5C 00 90 5D |  if_ne	jmp	#LR__3794
24804     14 31 E2 F8 | 	getbyte	local10, local06, #0
24808     1C 1E 06 F1 | 	add	local01, #28
2480c     0F 2F 02 FB | 	rdlong	local09, local01
24810     1C 1E 86 F1 | 	sub	local01, #28
24814     0D 2E 06 F1 | 	add	local09, #13
24818     17 2D C2 FA | 	rdbyte	local08, local09
2481c     16 2F E2 F8 | 	getbyte	local09, local08, #0
24820     17 31 0A F2 | 	cmp	local10, local09 wz
24824     38 00 90 5D |  if_ne	jmp	#LR__3794
24828     0C 24 06 F1 | 	add	local04, #12
2482c     12 13 02 FB | 	rdlong	arg01, local04
24830     0C 24 86 F1 | 	sub	local04, #12
24834     1C 1E 06 F1 | 	add	local01, #28
24838     0F 35 02 FB | 	rdlong	local12, local01
2483c     1C 1E 86 F1 | 	sub	local01, #28
24840     1A 15 02 F6 | 	mov	arg02, local12
24844     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
24848     00 FA 4D F2 | 	cmps	result1, #0 wz
2484c     13 35 02 56 |  if_ne	mov	local12, local05
24850     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
24854     01 34 86 51 |  if_ne	sub	local12, #1
24858     1A 33 02 56 |  if_ne	mov	local11, local12
2485c     04 00 90 5D |  if_ne	jmp	#LR__3795
24860                 | LR__3794
24860     FF 32 06 F6 | 	mov	local11, #255
24864                 | LR__3795
24864     19 27 02 F6 | 	mov	local05, local11
24868     40 00 90 FD | 	jmp	#LR__3798
2486c                 | LR__3796
2486c     13 33 02 F6 | 	mov	local11, local05
24870     07 32 4E F7 | 	zerox	local11, #7 wz
24874     20 00 90 5D |  if_ne	jmp	#LR__3797
24878     14 29 E2 F8 | 	getbyte	local06, local06, #0
2487c     1C 1E 06 F1 | 	add	local01, #28
24880     0F 13 02 FB | 	rdlong	arg01, local01
24884     1C 1E 86 F1 | 	sub	local01, #28
24888     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2488c     FD FA E1 F8 | 	getbyte	result1, result1, #0
24890     FD 28 0A F2 | 	cmp	local06, result1 wz
24894     28 00 90 AD |  if_e	jmp	#LR__3800
24898                 | LR__3797
24898     2C 1E 06 F1 | 	add	local01, #44
2489c     FF FF FF FF 
248a0     0F FF 6B FC | 	wrlong	##-1, local01
248a4     2C 1E 86 F1 | 	sub	local01, #44
248a8                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
248a8                 | ' 					}
248a8                 | ' 					break;
248a8     14 00 90 FD | 	jmp	#LR__3800
248ac                 | LR__3798
248ac                 | LR__3799
248ac     0F 13 02 F6 | 	mov	arg01, local01
248b0     00 14 06 F6 | 	mov	arg02, #0
248b4     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
248b8     FD 22 0A F6 | 	mov	local03, result1 wz
248bc     44 FE 9F AD |  if_e	jmp	#LR__3790
248c0                 | LR__3800
248c0     00 22 0E F2 | 	cmp	local03, #0 wz
248c4     18 1E 06 51 |  if_ne	add	local01, #24
248c8     0F 01 68 5C |  if_ne	wrlong	#0, local01
248cc                 | ' 	return res;
248cc     11 FB 01 F6 | 	mov	result1, local03
248d0     A7 F0 03 F6 | 	mov	ptra, fp
248d4     B2 00 A0 FD | 	call	#popregs_
248d8                 | _fatfs_cc_dir_read_ret
248d8     2D 00 64 FD | 	ret
248dc                 | 
248dc                 | _fatfs_cc_dir_find
248dc     0B 4A 05 F6 | 	mov	COUNT_, #11
248e0     A8 00 A0 FD | 	call	#pushregs_
248e4     09 1F 02 F6 | 	mov	local01, arg01
248e8     0F 21 02 FB | 	rdlong	local02, local01
248ec     0F 13 02 F6 | 	mov	arg01, local01
248f0     00 14 06 F6 | 	mov	arg02, #0
248f4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
248f8     00 FA 0D F2 | 	cmp	result1, #0 wz
248fc     18 02 90 5D |  if_ne	jmp	#LR__3822
24900     FF 22 06 F6 | 	mov	local03, #255
24904     FF 24 06 F6 | 	mov	local04, #255
24908     2C 1E 06 F1 | 	add	local01, #44
2490c     FF FF FF FF 
24910     0F FF 6B FC | 	wrlong	##-1, local01
24914     2C 1E 86 F1 | 	sub	local01, #44
24918                 | ' #line 2404 "ff.c"
24918                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
24918                 | ' 
24918                 | ' 	do {
24918                 | LR__3810
24918     18 1E 06 F1 | 	add	local01, #24
2491c     0F 15 02 FB | 	rdlong	arg02, local01
24920     18 1E 86 F1 | 	sub	local01, #24
24924     10 13 02 F6 | 	mov	arg01, local02
24928     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2492c     FD 26 0A F6 | 	mov	local05, result1 wz
24930     E0 01 90 5D |  if_ne	jmp	#LR__3821
24934     1C 1E 06 F1 | 	add	local01, #28
24938     0F 17 02 FB | 	rdlong	arg03, local01
2493c     1C 1E 86 F1 | 	sub	local01, #28
24940     0B 29 C2 FA | 	rdbyte	local06, arg03
24944     14 17 02 F6 | 	mov	arg03, local06
24948     07 16 4E F7 | 	zerox	arg03, #7 wz
2494c     04 26 06 A6 |  if_e	mov	local05, #4
24950     C0 01 90 AD |  if_e	jmp	#LR__3821
24954     1C 1E 06 F1 | 	add	local01, #28
24958     0F 2B 02 FB | 	rdlong	local07, local01
2495c     15 17 02 F6 | 	mov	arg03, local07
24960     0B 16 06 F1 | 	add	arg03, #11
24964     0B 2D C2 FA | 	rdbyte	local08, arg03
24968     3F 2C 06 F5 | 	and	local08, #63
2496c     16 1E 86 F1 | 	sub	local01, #22
24970     0F 2D 42 FC | 	wrbyte	local08, local01
24974     06 1E 86 F1 | 	sub	local01, #6
24978     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2497c     E5 16 0E F2 | 	cmp	arg03, #229 wz
24980     18 00 90 AD |  if_e	jmp	#LR__3811
24984     16 17 E2 F8 | 	getbyte	arg03, local08, #0
24988     08 16 CE F7 | 	test	arg03, #8 wz
2498c     16 2B 02 56 |  if_ne	mov	local07, local08
24990     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
24994     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
24998     18 00 90 AD |  if_e	jmp	#LR__3812
2499c                 | LR__3811
2499c     FF 24 06 F6 | 	mov	local04, #255
249a0     2C 1E 06 F1 | 	add	local01, #44
249a4     FF FF FF FF 
249a8     0F FF 6B FC | 	wrlong	##-1, local01
249ac     2C 1E 86 F1 | 	sub	local01, #44
249b0     4C 01 90 FD | 	jmp	#LR__3820
249b4                 | LR__3812
249b4     16 2D E2 F8 | 	getbyte	local08, local08, #0
249b8     0F 2C 0E F2 | 	cmp	local08, #15 wz
249bc     C8 00 90 5D |  if_ne	jmp	#LR__3816
249c0     2B 1E 06 F1 | 	add	local01, #43
249c4     0F 2D C2 FA | 	rdbyte	local08, local01
249c8     2B 1E 86 F1 | 	sub	local01, #43
249cc     40 2C CE F7 | 	test	local08, #64 wz
249d0     2C 01 90 5D |  if_ne	jmp	#LR__3819
249d4     14 2F E2 F8 | 	getbyte	local09, local06, #0
249d8     40 2E CE F7 | 	test	local09, #64 wz
249dc     30 00 90 AD |  if_e	jmp	#LR__3813
249e0     1C 1E 06 F1 | 	add	local01, #28
249e4     0F 2F 02 FB | 	rdlong	local09, local01
249e8     0D 2E 06 F1 | 	add	local09, #13
249ec     17 23 C2 FA | 	rdbyte	local03, local09
249f0     14 29 E2 F8 | 	getbyte	local06, local06, #0
249f4     BF 28 06 F5 | 	and	local06, #191
249f8     14 25 02 F6 | 	mov	local04, local06
249fc     0C 1E 86 F1 | 	sub	local01, #12
24a00     0F 2F 02 FB | 	rdlong	local09, local01
24a04     1C 1E 06 F1 | 	add	local01, #28
24a08     0F 2F 62 FC | 	wrlong	local09, local01
24a0c     2C 1E 86 F1 | 	sub	local01, #44
24a10                 | LR__3813
24a10     14 31 E2 F8 | 	getbyte	local10, local06, #0
24a14     12 2B E2 F8 | 	getbyte	local07, local04, #0
24a18     15 31 0A F2 | 	cmp	local10, local07 wz
24a1c     5C 00 90 5D |  if_ne	jmp	#LR__3814
24a20     11 2D E2 F8 | 	getbyte	local08, local03, #0
24a24     1C 1E 06 F1 | 	add	local01, #28
24a28     0F 2B 02 FB | 	rdlong	local07, local01
24a2c     1C 1E 86 F1 | 	sub	local01, #28
24a30     0D 2A 06 F1 | 	add	local07, #13
24a34     15 29 C2 FA | 	rdbyte	local06, local07
24a38     14 2B E2 F8 | 	getbyte	local07, local06, #0
24a3c     15 2D 0A F2 | 	cmp	local08, local07 wz
24a40     38 00 90 5D |  if_ne	jmp	#LR__3814
24a44     0C 20 06 F1 | 	add	local02, #12
24a48     10 13 02 FB | 	rdlong	arg01, local02
24a4c     0C 20 86 F1 | 	sub	local02, #12
24a50     1C 1E 06 F1 | 	add	local01, #28
24a54     0F 33 02 FB | 	rdlong	local11, local01
24a58     1C 1E 86 F1 | 	sub	local01, #28
24a5c     19 15 02 F6 | 	mov	arg02, local11
24a60     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
24a64     00 FA 4D F2 | 	cmps	result1, #0 wz
24a68     12 33 02 56 |  if_ne	mov	local11, local04
24a6c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
24a70     01 32 86 51 |  if_ne	sub	local11, #1
24a74     19 2F 02 56 |  if_ne	mov	local09, local11
24a78     04 00 90 5D |  if_ne	jmp	#LR__3815
24a7c                 | LR__3814
24a7c     FF 2E 06 F6 | 	mov	local09, #255
24a80                 | LR__3815
24a80     17 25 02 F6 | 	mov	local04, local09
24a84     78 00 90 FD | 	jmp	#LR__3819
24a88                 | LR__3816
24a88     12 2F 02 F6 | 	mov	local09, local04
24a8c     07 2E 4E F7 | 	zerox	local09, #7 wz
24a90     20 00 90 5D |  if_ne	jmp	#LR__3817
24a94     11 31 E2 F8 | 	getbyte	local10, local03, #0
24a98     1C 1E 06 F1 | 	add	local01, #28
24a9c     0F 13 02 FB | 	rdlong	arg01, local01
24aa0     1C 1E 86 F1 | 	sub	local01, #28
24aa4     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
24aa8     FD FA E1 F8 | 	getbyte	result1, result1, #0
24aac     FD 30 0A F2 | 	cmp	local10, result1 wz
24ab0     60 00 90 AD |  if_e	jmp	#LR__3821
24ab4                 | LR__3817
24ab4     2B 1E 06 F1 | 	add	local01, #43
24ab8     0F 2F C2 FA | 	rdbyte	local09, local01
24abc     2B 1E 86 F1 | 	sub	local01, #43
24ac0     01 2E CE F7 | 	test	local09, #1 wz
24ac4     24 00 90 5D |  if_ne	jmp	#LR__3818
24ac8     1C 1E 06 F1 | 	add	local01, #28
24acc     0F 13 02 FB | 	rdlong	arg01, local01
24ad0     04 1E 06 F1 | 	add	local01, #4
24ad4     0F 15 02 F6 | 	mov	arg02, local01
24ad8     20 1E 86 F1 | 	sub	local01, #32
24adc     0B 16 06 F6 | 	mov	arg03, #11
24ae0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
24ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
24ae8     28 00 90 AD |  if_e	jmp	#LR__3821
24aec                 | LR__3818
24aec     FF 24 06 F6 | 	mov	local04, #255
24af0     2C 1E 06 F1 | 	add	local01, #44
24af4     FF FF FF FF 
24af8     0F FF 6B FC | 	wrlong	##-1, local01
24afc     2C 1E 86 F1 | 	sub	local01, #44
24b00                 | LR__3819
24b00                 | LR__3820
24b00     0F 13 02 F6 | 	mov	arg01, local01
24b04     00 14 06 F6 | 	mov	arg02, #0
24b08     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
24b0c     FD 26 0A F6 | 	mov	local05, result1 wz
24b10     04 FE 9F AD |  if_e	jmp	#LR__3810
24b14                 | LR__3821
24b14                 | ' 
24b14                 | ' 	return res;
24b14     13 FB 01 F6 | 	mov	result1, local05
24b18                 | LR__3822
24b18     A7 F0 03 F6 | 	mov	ptra, fp
24b1c     B2 00 A0 FD | 	call	#popregs_
24b20                 | _fatfs_cc_dir_find_ret
24b20     2D 00 64 FD | 	ret
24b24                 | 
24b24                 | _fatfs_cc_dir_register
24b24     0A 4A 05 F6 | 	mov	COUNT_, #10
24b28     A8 00 A0 FD | 	call	#pushregs_
24b2c     2C F0 07 F1 | 	add	ptra, #44
24b30     04 4E 05 F1 | 	add	fp, #4
24b34     A7 12 62 FC | 	wrlong	arg01, fp
24b38     09 1F 02 FB | 	rdlong	local01, arg01
24b3c     08 4E 05 F1 | 	add	fp, #8
24b40     A7 1E 62 FC | 	wrlong	local01, fp
24b44     08 4E 85 F1 | 	sub	fp, #8
24b48     A7 20 02 FB | 	rdlong	local02, fp
24b4c     04 4E 85 F1 | 	sub	fp, #4
24b50     2B 20 06 F1 | 	add	local02, #43
24b54     10 21 C2 FA | 	rdbyte	local02, local02
24b58     A0 20 CE F7 | 	test	local02, #160 wz
24b5c     06 FA 05 56 |  if_ne	mov	result1, #6
24b60     F8 03 90 5D |  if_ne	jmp	#LR__3845
24b64                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
24b64     14 4E 05 F1 | 	add	fp, #20
24b68     A7 00 68 FC | 	wrlong	#0, fp
24b6c     14 4E 85 F1 | 	sub	fp, #20
24b70     97 28 48 FB | 	callpa	#(@LR__3831-@LR__3830)>>2,fcache_load_ptr_
24b74                 | LR__3830
24b74     0C 4E 05 F1 | 	add	fp, #12
24b78     A7 20 02 FB | 	rdlong	local02, fp
24b7c     0C 20 06 F1 | 	add	local02, #12
24b80     10 23 02 FB | 	rdlong	local03, local02
24b84     08 4E 05 F1 | 	add	fp, #8
24b88     A7 24 02 FB | 	rdlong	local04, fp
24b8c     14 4E 85 F1 | 	sub	fp, #20
24b90     01 24 66 F0 | 	shl	local04, #1
24b94     11 25 02 F1 | 	add	local04, local03
24b98     12 21 EA FA | 	rdword	local02, local04 wz
24b9c     24 00 90 AD |  if_e	jmp	#LR__3832
24ba0     14 4E 05 F1 | 	add	fp, #20
24ba4     A7 26 02 FB | 	rdlong	local05, fp
24ba8     13 29 02 F6 | 	mov	local06, local05
24bac     13 2B 02 F6 | 	mov	local07, local05
24bb0     15 2D 02 F6 | 	mov	local08, local07
24bb4     01 2C 06 F1 | 	add	local08, #1
24bb8     A7 2C 62 FC | 	wrlong	local08, fp
24bbc     14 4E 85 F1 | 	sub	fp, #20
24bc0     B0 FF 9F FD | 	jmp	#LR__3830
24bc4                 | LR__3831
24bc4                 | LR__3832
24bc4     1C 4E 05 F1 | 	add	fp, #28
24bc8     A7 12 02 F6 | 	mov	arg01, fp
24bcc     18 4E 85 F1 | 	sub	fp, #24
24bd0     A7 14 02 FB | 	rdlong	arg02, fp
24bd4     04 4E 85 F1 | 	sub	fp, #4
24bd8     20 14 06 F1 | 	add	arg02, #32
24bdc     0C 16 06 F6 | 	mov	arg03, #12
24be0     7C 71 BF FD | 	call	#__system____builtin_memmove
24be4     27 4E 05 F1 | 	add	fp, #39
24be8     A7 2E C2 FA | 	rdbyte	local09, fp
24bec     27 4E 85 F1 | 	sub	fp, #39
24bf0     01 2E CE F7 | 	test	local09, #1 wz
24bf4     F4 00 90 AD |  if_e	jmp	#LR__3835
24bf8     04 4E 05 F1 | 	add	fp, #4
24bfc     A7 30 02 FB | 	rdlong	local10, fp
24c00     2B 30 06 F1 | 	add	local10, #43
24c04     18 81 48 FC | 	wrbyte	#64, local10
24c08                 | ' 		dp->fn[ 11 ] =  0x40 ;
24c08                 | ' 		for (n = 1; n < 100; n++) {
24c08     0C 4E 05 F1 | 	add	fp, #12
24c0c     A7 02 68 FC | 	wrlong	#1, fp
24c10     10 4E 85 F1 | 	sub	fp, #16
24c14                 | LR__3833
24c14     10 4E 05 F1 | 	add	fp, #16
24c18     A7 20 02 FB | 	rdlong	local02, fp
24c1c     10 4E 85 F1 | 	sub	fp, #16
24c20     64 20 16 F2 | 	cmp	local02, #100 wc
24c24     70 00 90 3D |  if_ae	jmp	#LR__3834
24c28     04 4E 05 F1 | 	add	fp, #4
24c2c     A7 12 02 FB | 	rdlong	arg01, fp
24c30     20 12 06 F1 | 	add	arg01, #32
24c34     18 4E 05 F1 | 	add	fp, #24
24c38     A7 14 02 F6 | 	mov	arg02, fp
24c3c     10 4E 85 F1 | 	sub	fp, #16
24c40     A7 30 02 FB | 	rdlong	local10, fp
24c44     0C 30 06 F1 | 	add	local10, #12
24c48     18 17 02 FB | 	rdlong	arg03, local10
24c4c     04 4E 05 F1 | 	add	fp, #4
24c50     A7 18 02 FB | 	rdlong	arg04, fp
24c54     10 4E 85 F1 | 	sub	fp, #16
24c58     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
24c5c     04 4E 05 F1 | 	add	fp, #4
24c60     A7 12 02 FB | 	rdlong	arg01, fp
24c64     04 4E 85 F1 | 	sub	fp, #4
24c68     70 FC BF FD | 	call	#_fatfs_cc_dir_find
24c6c     08 4E 05 F1 | 	add	fp, #8
24c70     A7 FA 61 FC | 	wrlong	result1, fp
24c74     00 FA 4D F2 | 	cmps	result1, #0 wz
24c78     08 4E 85 F1 | 	sub	fp, #8
24c7c     18 00 90 5D |  if_ne	jmp	#LR__3834
24c80     10 4E 05 F1 | 	add	fp, #16
24c84     A7 30 02 FB | 	rdlong	local10, fp
24c88     01 30 06 F1 | 	add	local10, #1
24c8c     A7 30 62 FC | 	wrlong	local10, fp
24c90     10 4E 85 F1 | 	sub	fp, #16
24c94     7C FF 9F FD | 	jmp	#LR__3833
24c98                 | LR__3834
24c98     10 4E 05 F1 | 	add	fp, #16
24c9c     A7 30 02 FB | 	rdlong	local10, fp
24ca0     10 4E 85 F1 | 	sub	fp, #16
24ca4     64 30 0E F2 | 	cmp	local10, #100 wz
24ca8     07 FA 05 A6 |  if_e	mov	result1, #7
24cac     AC 02 90 AD |  if_e	jmp	#LR__3845
24cb0     08 4E 05 F1 | 	add	fp, #8
24cb4     A7 30 02 FB | 	rdlong	local10, fp
24cb8     08 4E 85 F1 | 	sub	fp, #8
24cbc     04 30 0E F2 | 	cmp	local10, #4 wz
24cc0     08 4E 05 51 |  if_ne	add	fp, #8
24cc4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
24cc8     08 4E 85 51 |  if_ne	sub	fp, #8
24ccc     8C 02 90 5D |  if_ne	jmp	#LR__3845
24cd0     04 4E 05 F1 | 	add	fp, #4
24cd4     A7 30 02 FB | 	rdlong	local10, fp
24cd8     23 4E 05 F1 | 	add	fp, #35
24cdc     A7 1E C2 FA | 	rdbyte	local01, fp
24ce0     27 4E 85 F1 | 	sub	fp, #39
24ce4     2B 30 06 F1 | 	add	local10, #43
24ce8     18 1F 42 FC | 	wrbyte	local01, local10
24cec                 | LR__3835
24cec     27 4E 05 F1 | 	add	fp, #39
24cf0     A7 20 C2 FA | 	rdbyte	local02, fp
24cf4     27 4E 85 F1 | 	sub	fp, #39
24cf8     02 20 CE F7 | 	test	local02, #2 wz
24cfc     20 00 90 AD |  if_e	jmp	#LR__3836
24d00     14 4E 05 F1 | 	add	fp, #20
24d04     A7 30 02 FB | 	rdlong	local10, fp
24d08     0C 30 06 F1 | 	add	local10, #12
24d0c     0D 30 16 FD | 	qdiv	local10, #13
24d10     14 4E 85 F1 | 	sub	fp, #20
24d14     18 30 62 FD | 	getqx	local10
24d18     01 30 06 F1 | 	add	local10, #1
24d1c     04 00 90 FD | 	jmp	#LR__3837
24d20                 | LR__3836
24d20     01 30 06 F6 | 	mov	local10, #1
24d24                 | LR__3837
24d24     18 4E 05 F1 | 	add	fp, #24
24d28     A7 30 62 FC | 	wrlong	local10, fp
24d2c     14 4E 85 F1 | 	sub	fp, #20
24d30     A7 12 02 FB | 	rdlong	arg01, fp
24d34     18 15 02 F6 | 	mov	arg02, local10
24d38     04 4E 85 F1 | 	sub	fp, #4
24d3c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
24d40     08 4E 05 F1 | 	add	fp, #8
24d44     A7 FA 61 FC | 	wrlong	result1, fp
24d48     08 4E 85 F1 | 	sub	fp, #8
24d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
24d50     38 01 90 5D |  if_ne	jmp	#LR__3842
24d54     18 4E 05 F1 | 	add	fp, #24
24d58     A7 30 02 FB | 	rdlong	local10, fp
24d5c     01 30 8E F1 | 	sub	local10, #1 wz
24d60     A7 30 62 FC | 	wrlong	local10, fp
24d64     18 4E 85 F1 | 	sub	fp, #24
24d68     20 01 90 AD |  if_e	jmp	#LR__3842
24d6c     04 4E 05 F1 | 	add	fp, #4
24d70     A7 30 02 FB | 	rdlong	local10, fp
24d74     18 13 02 F6 | 	mov	arg01, local10
24d78     14 4E 05 F1 | 	add	fp, #20
24d7c     A7 18 02 FB | 	rdlong	arg04, fp
24d80     18 4E 85 F1 | 	sub	fp, #24
24d84     05 18 66 F0 | 	shl	arg04, #5
24d88     10 30 06 F1 | 	add	local10, #16
24d8c     18 15 02 FB | 	rdlong	arg02, local10
24d90     0C 15 82 F1 | 	sub	arg02, arg04
24d94     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
24d98     08 4E 05 F1 | 	add	fp, #8
24d9c     A7 FA 61 FC | 	wrlong	result1, fp
24da0     08 4E 85 F1 | 	sub	fp, #8
24da4     00 FA 0D F2 | 	cmp	result1, #0 wz
24da8     E0 00 90 5D |  if_ne	jmp	#LR__3841
24dac     04 4E 05 F1 | 	add	fp, #4
24db0     A7 12 02 FB | 	rdlong	arg01, fp
24db4     04 4E 85 F1 | 	sub	fp, #4
24db8     20 12 06 F1 | 	add	arg01, #32
24dbc     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
24dc0     FD 30 02 F6 | 	mov	local10, result1
24dc4     28 4E 05 F1 | 	add	fp, #40
24dc8     A7 30 42 FC | 	wrbyte	local10, fp
24dcc     28 4E 85 F1 | 	sub	fp, #40
24dd0                 | ' 			sum = sum_sfn(dp->fn);
24dd0                 | ' 			do {
24dd0                 | LR__3838
24dd0     0C 4E 05 F1 | 	add	fp, #12
24dd4     A7 12 02 FB | 	rdlong	arg01, fp
24dd8     08 4E 85 F1 | 	sub	fp, #8
24ddc     A7 1E 02 FB | 	rdlong	local01, fp
24de0     04 4E 85 F1 | 	sub	fp, #4
24de4     18 1E 06 F1 | 	add	local01, #24
24de8     0F 15 02 FB | 	rdlong	arg02, local01
24dec     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
24df0     08 4E 05 F1 | 	add	fp, #8
24df4     A7 FA 61 FC | 	wrlong	result1, fp
24df8     00 FA 4D F2 | 	cmps	result1, #0 wz
24dfc     08 4E 85 F1 | 	sub	fp, #8
24e00     88 00 90 5D |  if_ne	jmp	#LR__3840
24e04     0C 4E 05 F1 | 	add	fp, #12
24e08     A7 20 02 FB | 	rdlong	local02, fp
24e0c     0C 20 06 F1 | 	add	local02, #12
24e10     10 13 02 FB | 	rdlong	arg01, local02
24e14     08 4E 85 F1 | 	sub	fp, #8
24e18     A7 1E 02 FB | 	rdlong	local01, fp
24e1c     1C 1E 06 F1 | 	add	local01, #28
24e20     0F 15 02 FB | 	rdlong	arg02, local01
24e24     14 4E 05 F1 | 	add	fp, #20
24e28     A7 16 02 FB | 	rdlong	arg03, fp
24e2c     10 4E 05 F1 | 	add	fp, #16
24e30     A7 18 C2 FA | 	rdbyte	arg04, fp
24e34     28 4E 85 F1 | 	sub	fp, #40
24e38     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
24e3c     0C 4E 05 F1 | 	add	fp, #12
24e40     A7 30 02 FB | 	rdlong	local10, fp
24e44     03 30 06 F1 | 	add	local10, #3
24e48     18 03 48 FC | 	wrbyte	#1, local10
24e4c     08 4E 85 F1 | 	sub	fp, #8
24e50     A7 12 02 FB | 	rdlong	arg01, fp
24e54     04 4E 85 F1 | 	sub	fp, #4
24e58     00 14 06 F6 | 	mov	arg02, #0
24e5c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
24e60     08 4E 05 F1 | 	add	fp, #8
24e64     A7 FA 61 FC | 	wrlong	result1, fp
24e68     00 FA 4D F2 | 	cmps	result1, #0 wz
24e6c     08 4E 85 F1 | 	sub	fp, #8
24e70     18 00 90 5D |  if_ne	jmp	#LR__3839
24e74     18 4E 05 F1 | 	add	fp, #24
24e78     A7 30 02 FB | 	rdlong	local10, fp
24e7c     01 30 8E F1 | 	sub	local10, #1 wz
24e80     A7 30 62 FC | 	wrlong	local10, fp
24e84     18 4E 85 F1 | 	sub	fp, #24
24e88     44 FF 9F 5D |  if_ne	jmp	#LR__3838
24e8c                 | LR__3839
24e8c                 | LR__3840
24e8c                 | LR__3841
24e8c                 | LR__3842
24e8c     08 4E 05 F1 | 	add	fp, #8
24e90     A7 30 0A FB | 	rdlong	local10, fp wz
24e94     08 4E 85 F1 | 	sub	fp, #8
24e98     B4 00 90 5D |  if_ne	jmp	#LR__3844
24e9c     0C 4E 05 F1 | 	add	fp, #12
24ea0     A7 12 02 FB | 	rdlong	arg01, fp
24ea4     08 4E 85 F1 | 	sub	fp, #8
24ea8     A7 1E 02 FB | 	rdlong	local01, fp
24eac     04 4E 85 F1 | 	sub	fp, #4
24eb0     18 1E 06 F1 | 	add	local01, #24
24eb4     0F 15 02 FB | 	rdlong	arg02, local01
24eb8     18 E6 BF FD | 	call	#_fatfs_cc_move_window
24ebc     08 4E 05 F1 | 	add	fp, #8
24ec0     A7 FA 61 FC | 	wrlong	result1, fp
24ec4     08 4E 85 F1 | 	sub	fp, #8
24ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
24ecc     80 00 90 5D |  if_ne	jmp	#LR__3843
24ed0     04 4E 05 F1 | 	add	fp, #4
24ed4     A7 20 02 FB | 	rdlong	local02, fp
24ed8     04 4E 85 F1 | 	sub	fp, #4
24edc     1C 20 06 F1 | 	add	local02, #28
24ee0     10 13 02 FB | 	rdlong	arg01, local02
24ee4     00 14 06 F6 | 	mov	arg02, #0
24ee8     20 16 06 F6 | 	mov	arg03, #32
24eec     98 00 A0 FD | 	call	#\builtin_bytefill_
24ef0     04 4E 05 F1 | 	add	fp, #4
24ef4     A7 14 02 FB | 	rdlong	arg02, fp
24ef8     0A 1F 02 F6 | 	mov	local01, arg02
24efc     1C 1E 06 F1 | 	add	local01, #28
24f00     0F 13 02 FB | 	rdlong	arg01, local01
24f04     04 4E 85 F1 | 	sub	fp, #4
24f08     20 14 06 F1 | 	add	arg02, #32
24f0c     0B 16 06 F6 | 	mov	arg03, #11
24f10     4C 6E BF FD | 	call	#__system____builtin_memmove
24f14     04 4E 05 F1 | 	add	fp, #4
24f18     A7 2E 02 FB | 	rdlong	local09, fp
24f1c     17 31 02 F6 | 	mov	local10, local09
24f20     1C 30 06 F1 | 	add	local10, #28
24f24     18 1F 02 FB | 	rdlong	local01, local10
24f28     2B 2E 06 F1 | 	add	local09, #43
24f2c     17 31 C2 FA | 	rdbyte	local10, local09
24f30     18 30 06 F5 | 	and	local10, #24
24f34     0C 1E 06 F1 | 	add	local01, #12
24f38     0F 31 42 FC | 	wrbyte	local10, local01
24f3c     08 4E 05 F1 | 	add	fp, #8
24f40     A7 30 02 FB | 	rdlong	local10, fp
24f44     0C 4E 85 F1 | 	sub	fp, #12
24f48     03 30 06 F1 | 	add	local10, #3
24f4c     18 03 48 FC | 	wrbyte	#1, local10
24f50                 | LR__3843
24f50                 | LR__3844
24f50                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
24f50                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
24f50                 | ' 
24f50                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
24f50                 | ' 
24f50                 | ' 			fs->wflag = 1;
24f50                 | ' 		}
24f50                 | ' 	}
24f50                 | ' 
24f50                 | ' 	return res;
24f50     08 4E 05 F1 | 	add	fp, #8
24f54     A7 FA 01 FB | 	rdlong	result1, fp
24f58     08 4E 85 F1 | 	sub	fp, #8
24f5c                 | LR__3845
24f5c     A7 F0 03 F6 | 	mov	ptra, fp
24f60     B2 00 A0 FD | 	call	#popregs_
24f64                 | _fatfs_cc_dir_register_ret
24f64     2D 00 64 FD | 	ret
24f68                 | 
24f68                 | _fatfs_cc_dir_remove
24f68     05 4A 05 F6 | 	mov	COUNT_, #5
24f6c     A8 00 A0 FD | 	call	#pushregs_
24f70     09 1F 02 F6 | 	mov	local01, arg01
24f74     0F 21 02 FB | 	rdlong	local02, local01
24f78     10 1E 06 F1 | 	add	local01, #16
24f7c     0F 23 02 FB | 	rdlong	local03, local01
24f80     1C 1E 06 F1 | 	add	local01, #28
24f84     0F 15 02 FB | 	rdlong	arg02, local01
24f88     2C 1E 86 F1 | 	sub	local01, #44
24f8c     FF FF 7F FF 
24f90     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
24f94     00 24 06 A6 |  if_e	mov	local04, #0
24f98     18 00 90 AD |  if_e	jmp	#LR__3850
24f9c     0F 13 02 F6 | 	mov	arg01, local01
24fa0     2C 1E 06 F1 | 	add	local01, #44
24fa4     0F 15 02 FB | 	rdlong	arg02, local01
24fa8     2C 1E 86 F1 | 	sub	local01, #44
24fac     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
24fb0     FD 24 02 F6 | 	mov	local04, result1
24fb4                 | LR__3850
24fb4     12 27 0A F6 | 	mov	local05, local04 wz
24fb8     64 00 90 5D |  if_ne	jmp	#LR__3853
24fbc                 | ' 		do {
24fbc                 | LR__3851
24fbc     18 1E 06 F1 | 	add	local01, #24
24fc0     0F 15 02 FB | 	rdlong	arg02, local01
24fc4     18 1E 86 F1 | 	sub	local01, #24
24fc8     10 13 02 F6 | 	mov	arg01, local02
24fcc     04 E5 BF FD | 	call	#_fatfs_cc_move_window
24fd0     FD 26 0A F6 | 	mov	local05, result1 wz
24fd4     40 00 90 5D |  if_ne	jmp	#LR__3852
24fd8     1C 1E 06 F1 | 	add	local01, #28
24fdc     0F 25 02 FB | 	rdlong	local04, local01
24fe0     12 CB 49 FC | 	wrbyte	#229, local04
24fe4     03 20 06 F1 | 	add	local02, #3
24fe8     10 03 48 FC | 	wrbyte	#1, local02
24fec     03 20 86 F1 | 	sub	local02, #3
24ff0     0C 1E 86 F1 | 	sub	local01, #12
24ff4     0F 25 02 FB | 	rdlong	local04, local01
24ff8     10 1E 86 F1 | 	sub	local01, #16
24ffc     11 25 12 F2 | 	cmp	local04, local03 wc
25000     14 00 90 3D |  if_ae	jmp	#LR__3852
25004     0F 13 02 F6 | 	mov	arg01, local01
25008     00 14 06 F6 | 	mov	arg02, #0
2500c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
25010     FD 26 0A F6 | 	mov	local05, result1 wz
25014     A4 FF 9F AD |  if_e	jmp	#LR__3851
25018                 | LR__3852
25018     04 26 0E F2 | 	cmp	local05, #4 wz
2501c     02 26 06 A6 |  if_e	mov	local05, #2
25020                 | LR__3853
25020                 | ' 	}
25020                 | ' #line 2590 "ff.c"
25020                 | ' 	return res;
25020     13 FB 01 F6 | 	mov	result1, local05
25024     A7 F0 03 F6 | 	mov	ptra, fp
25028     B2 00 A0 FD | 	call	#popregs_
2502c                 | _fatfs_cc_dir_remove_ret
2502c     2D 00 64 FD | 	ret
25030                 | 
25030                 | _fatfs_cc_get_fileinfo
25030     0F 4A 05 F6 | 	mov	COUNT_, #15
25034     A8 00 A0 FD | 	call	#pushregs_
25038     09 1F 02 F6 | 	mov	local01, arg01
2503c     0A 21 02 F6 | 	mov	local02, arg02
25040     0F 23 02 FB | 	rdlong	local03, local01
25044     1C 20 06 F1 | 	add	local02, #28
25048     10 01 48 FC | 	wrbyte	#0, local02
2504c     1C 20 86 F1 | 	sub	local02, #28
25050     18 1E 06 F1 | 	add	local01, #24
25054     0F 25 0A FB | 	rdlong	local04, local01 wz
25058     18 1E 86 F1 | 	sub	local01, #24
2505c     90 03 90 AD |  if_e	jmp	#LR__3874
25060     2C 1E 06 F1 | 	add	local01, #44
25064     0F 25 02 FB | 	rdlong	local04, local01
25068     2C 1E 86 F1 | 	sub	local01, #44
2506c     FF FF 7F FF 
25070     FF 25 0E F2 | 	cmp	local04, ##-1 wz
25074     D8 00 90 AD |  if_e	jmp	#LR__3863
25078     00 26 06 F6 | 	mov	local05, #0
2507c     00 28 06 F6 | 	mov	local06, #0
25080     00 2A 06 F6 | 	mov	local07, #0
25084                 | ' 			si = di = 0;
25084                 | ' 			hs = 0;
25084                 | ' 			while (fs->lfnbuf[si] != 0) {
25084                 | LR__3860
25084     0C 22 06 F1 | 	add	local03, #12
25088     11 25 02 FB | 	rdlong	local04, local03
2508c     0C 22 86 F1 | 	sub	local03, #12
25090     14 2D 02 F6 | 	mov	local08, local06
25094     01 2C 66 F0 | 	shl	local08, #1
25098     12 2D 02 F1 | 	add	local08, local04
2509c     16 25 EA FA | 	rdword	local04, local08 wz
250a0     90 00 90 AD |  if_e	jmp	#LR__3862
250a4     0C 22 06 F1 | 	add	local03, #12
250a8     11 2F 02 FB | 	rdlong	local09, local03
250ac     0C 22 86 F1 | 	sub	local03, #12
250b0     14 31 02 F6 | 	mov	local10, local06
250b4     01 30 66 F0 | 	shl	local10, #1
250b8     17 31 02 F1 | 	add	local10, local09
250bc     18 33 E2 FA | 	rdword	local11, local10
250c0     15 25 02 F6 | 	mov	local04, local07
250c4     0F 24 4E F7 | 	zerox	local04, #15 wz
250c8     01 28 06 F1 | 	add	local06, #1
250cc     24 00 90 5D |  if_ne	jmp	#LR__3861
250d0     19 35 32 F9 | 	getword	local12, local11, #0
250d4     6C 00 00 FF 
250d8     00 34 16 F2 | 	cmp	local12, ##55296 wc
250dc     14 00 90 CD |  if_b	jmp	#LR__3861
250e0     19 37 32 F9 | 	getword	local13, local11, #0
250e4     70 00 00 FF 
250e8     00 36 16 F2 | 	cmp	local13, ##57344 wc
250ec     19 2B 02 C6 |  if_b	mov	local07, local11
250f0                 | ' 					hs = wc; continue;
250f0     90 FF 9F CD |  if_b	jmp	#LR__3860
250f4                 | LR__3861
250f4     15 13 32 F9 | 	getword	arg01, local07, #0
250f8     10 12 66 F0 | 	shl	arg01, #16
250fc     19 33 32 F9 | 	getword	local11, local11, #0
25100     19 13 42 F5 | 	or	arg01, local11
25104     13 15 02 F6 | 	mov	arg02, local05
25108     1C 20 06 F1 | 	add	local02, #28
2510c     10 15 02 F1 | 	add	arg02, local02
25110     FF 16 06 F6 | 	mov	arg03, #255
25114     13 17 82 F1 | 	sub	arg03, local05
25118     1C 20 86 F1 | 	sub	local02, #28
2511c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
25120     FD 38 0A F6 | 	mov	local14, result1 wz
25124     00 26 06 A6 |  if_e	mov	local05, #0
25128     1C 27 02 51 |  if_ne	add	local05, local14
2512c     00 2A 06 56 |  if_ne	mov	local07, #0
25130     50 FF 9F 5D |  if_ne	jmp	#LR__3860
25134                 | LR__3862
25134     15 25 02 F6 | 	mov	local04, local07
25138     0F 24 4E F7 | 	zerox	local04, #15 wz
2513c     00 26 06 56 |  if_ne	mov	local05, #0
25140     1C 20 06 F1 | 	add	local02, #28
25144     10 27 02 F1 | 	add	local05, local02
25148     13 01 48 FC | 	wrbyte	#0, local05
2514c     1C 20 86 F1 | 	sub	local02, #28
25150                 | LR__3863
25150     00 26 06 F6 | 	mov	local05, #0
25154     00 28 06 F6 | 	mov	local06, #0
25158                 | ' 			fno->fname[di] = 0;
25158                 | ' 		}
25158                 | ' 	}
25158                 | ' 
25158                 | ' 	si = di = 0;
25158                 | ' 	while (si < 11) {
25158                 | LR__3864
25158     0B 28 16 F2 | 	cmp	local06, #11 wc
2515c     20 01 90 3D |  if_ae	jmp	#LR__3867
25160     1C 1E 06 F1 | 	add	local01, #28
25164     0F 2F 02 FB | 	rdlong	local09, local01
25168     1C 1E 86 F1 | 	sub	local01, #28
2516c     14 31 02 F6 | 	mov	local10, local06
25170     17 31 02 F1 | 	add	local10, local09
25174     18 33 C2 FA | 	rdbyte	local11, local10
25178     19 25 32 F9 | 	getword	local04, local11, #0
2517c     20 24 0E F2 | 	cmp	local04, #32 wz
25180     01 28 06 F1 | 	add	local06, #1
25184     D0 FF 9F AD |  if_e	jmp	#LR__3864
25188     19 25 32 F9 | 	getword	local04, local11, #0
2518c     05 24 0E F2 | 	cmp	local04, #5 wz
25190     E5 32 06 A6 |  if_e	mov	local11, #229
25194     09 28 0E F2 | 	cmp	local06, #9 wz
25198     20 00 90 5D |  if_ne	jmp	#LR__3865
2519c     0C 26 16 F2 | 	cmp	local05, #12 wc
251a0     18 00 90 3D |  if_ae	jmp	#LR__3865
251a4     13 37 02 F6 | 	mov	local13, local05
251a8     0C 20 06 F1 | 	add	local02, #12
251ac     10 37 02 F1 | 	add	local13, local02
251b0     1B 5D 48 FC | 	wrbyte	#46, local13
251b4     01 26 06 F1 | 	add	local05, #1
251b8     0C 20 86 F1 | 	sub	local02, #12
251bc                 | LR__3865
251bc     19 13 32 F9 | 	getword	arg01, local11, #0
251c0     07 12 4E F7 | 	zerox	arg01, #7 wz
251c4     00 FA 05 56 |  if_ne	mov	result1, #0
251c8                 | ' 
251c8                 | ' 	return 0;
251c8     00 FA 05 A6 |  if_e	mov	result1, #0
251cc     00 FA 0D F2 | 	cmp	result1, #0 wz
251d0     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
251d4     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
251d8     50 00 90 AD |  if_e	jmp	#LR__3866
251dc     1C 1E 06 F1 | 	add	local01, #28
251e0     0F 31 02 FB | 	rdlong	local10, local01
251e4     1C 1E 86 F1 | 	sub	local01, #28
251e8     14 2D 02 F6 | 	mov	local08, local06
251ec     18 2D 02 F1 | 	add	local08, local10
251f0     16 13 CA FA | 	rdbyte	arg01, local08 wz
251f4     00 FA 05 56 |  if_ne	mov	result1, #0
251f8                 | ' 
251f8                 | ' 	return 0;
251f8     00 FA 05 A6 |  if_e	mov	result1, #0
251fc     00 FA 0D F2 | 	cmp	result1, #0 wz
25200     28 00 90 AD |  if_e	jmp	#LR__3866
25204     19 33 32 F9 | 	getword	local11, local11, #0
25208     08 32 66 F0 | 	shl	local11, #8
2520c     1C 1E 06 F1 | 	add	local01, #28
25210     0F 39 02 FB | 	rdlong	local14, local01
25214     1C 1E 86 F1 | 	sub	local01, #28
25218     14 2F 02 F6 | 	mov	local09, local06
2521c     1C 2F 02 F1 | 	add	local09, local14
25220     17 35 C2 FA | 	rdbyte	local12, local09
25224     1A 33 42 F5 | 	or	local11, local12
25228     01 28 06 F1 | 	add	local06, #1
2522c                 | LR__3866
2522c     19 13 02 F6 | 	mov	arg01, local11
25230     01 00 00 FF 
25234     52 15 06 F6 | 	mov	arg02, ##850
25238     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2523c     FD 32 02 F6 | 	mov	local11, result1
25240     19 25 02 F6 | 	mov	local04, local11
25244     0F 24 4E F7 | 	zerox	local04, #15 wz
25248     00 26 06 A6 |  if_e	mov	local05, #0
2524c     30 00 90 AD |  if_e	jmp	#LR__3867
25250     19 13 32 F9 | 	getword	arg01, local11, #0
25254     13 15 02 F6 | 	mov	arg02, local05
25258     0C 20 06 F1 | 	add	local02, #12
2525c     10 15 02 F1 | 	add	arg02, local02
25260     0C 16 06 F6 | 	mov	arg03, #12
25264     13 17 82 F1 | 	sub	arg03, local05
25268     0C 20 86 F1 | 	sub	local02, #12
2526c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
25270     FD 38 0A F6 | 	mov	local14, result1 wz
25274     00 26 06 A6 |  if_e	mov	local05, #0
25278     1C 27 02 51 |  if_ne	add	local05, local14
2527c     D8 FE 9F 5D |  if_ne	jmp	#LR__3864
25280                 | LR__3867
25280     13 25 02 F6 | 	mov	local04, local05
25284     0C 20 06 F1 | 	add	local02, #12
25288     10 25 02 F1 | 	add	local04, local02
2528c     12 01 48 FC | 	wrbyte	#0, local04
25290     10 20 06 F1 | 	add	local02, #16
25294     10 25 CA FA | 	rdbyte	local04, local02 wz
25298     1C 20 86 F1 | 	sub	local02, #28
2529c     F8 00 90 5D |  if_ne	jmp	#LR__3873
252a0     00 26 0E F2 | 	cmp	local05, #0 wz
252a4     1C 00 90 5D |  if_ne	jmp	#LR__3868
252a8     13 37 02 F6 | 	mov	local13, local05
252ac     1C 20 06 F1 | 	add	local02, #28
252b0     10 37 02 F1 | 	add	local13, local02
252b4     1B 7F 48 FC | 	wrbyte	#63, local13
252b8     01 26 06 F1 | 	add	local05, #1
252bc     1C 20 86 F1 | 	sub	local02, #28
252c0     A4 00 90 FD | 	jmp	#LR__3872
252c4                 | LR__3868
252c4                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
252c4     00 26 06 F6 | 	mov	local05, #0
252c8     00 28 06 F6 | 	mov	local06, #0
252cc     08 3A 06 F6 | 	mov	local15, #8
252d0                 | LR__3869
252d0     14 25 02 F6 | 	mov	local04, local06
252d4     0C 20 06 F1 | 	add	local02, #12
252d8     10 25 02 F1 | 	add	local04, local02
252dc     12 37 CA FA | 	rdbyte	local13, local04 wz
252e0     0C 20 86 F1 | 	sub	local02, #12
252e4     80 00 90 AD |  if_e	jmp	#LR__3871
252e8     14 2D 02 F6 | 	mov	local08, local06
252ec     0C 20 06 F1 | 	add	local02, #12
252f0     10 2D 02 F1 | 	add	local08, local02
252f4     16 33 C2 FA | 	rdbyte	local11, local08
252f8     19 39 32 F9 | 	getword	local14, local11, #0
252fc     2E 38 0E F2 | 	cmp	local14, #46 wz
25300     0C 20 86 F1 | 	sub	local02, #12
25304     10 3A 06 A6 |  if_e	mov	local15, #16
25308     19 39 32 F9 | 	getword	local14, local11, #0
2530c     41 38 16 F2 | 	cmp	local14, #65 wc
25310     30 00 90 CD |  if_b	jmp	#LR__3870
25314     19 2D 32 F9 | 	getword	local08, local11, #0
25318     5B 2C 16 F2 | 	cmp	local08, #91 wc
2531c     24 00 90 3D |  if_ae	jmp	#LR__3870
25320     1C 1E 06 F1 | 	add	local01, #28
25324     0F 2F 02 FB | 	rdlong	local09, local01
25328     1C 1E 86 F1 | 	sub	local01, #28
2532c     0C 2E 06 F1 | 	add	local09, #12
25330     17 31 C2 FA | 	rdbyte	local10, local09
25334     1D 39 E2 F8 | 	getbyte	local14, local15, #0
25338     1C 31 CA F7 | 	test	local10, local14 wz
2533c     19 33 32 59 |  if_ne	getword	local11, local11, #0
25340     20 32 06 51 |  if_ne	add	local11, #32
25344                 | LR__3870
25344     13 39 02 F6 | 	mov	local14, local05
25348     1C 20 06 F1 | 	add	local02, #28
2534c     10 39 02 F1 | 	add	local14, local02
25350     19 33 32 F9 | 	getword	local11, local11, #0
25354     1C 33 42 FC | 	wrbyte	local11, local14
25358     01 28 06 F1 | 	add	local06, #1
2535c     01 26 06 F1 | 	add	local05, #1
25360     1C 20 86 F1 | 	sub	local02, #28
25364     68 FF 9F FD | 	jmp	#LR__3869
25368                 | LR__3871
25368                 | LR__3872
25368     1C 20 06 F1 | 	add	local02, #28
2536c     10 27 02 F1 | 	add	local05, local02
25370     13 01 48 FC | 	wrbyte	#0, local05
25374     1C 1E 06 F1 | 	add	local01, #28
25378     0F 25 02 FB | 	rdlong	local04, local01
2537c     1C 1E 86 F1 | 	sub	local01, #28
25380     0C 24 06 F1 | 	add	local04, #12
25384     12 37 CA FA | 	rdbyte	local13, local04 wz
25388     1C 20 86 F1 | 	sub	local02, #28
2538c     0C 20 06 A1 |  if_e	add	local02, #12
25390     10 01 48 AC |  if_e	wrbyte	#0, local02
25394     0C 20 86 A1 |  if_e	sub	local02, #12
25398                 | LR__3873
25398     1C 1E 06 F1 | 	add	local01, #28
2539c     0F 35 02 FB | 	rdlong	local12, local01
253a0     0B 34 06 F1 | 	add	local12, #11
253a4     1A 25 C2 FA | 	rdbyte	local04, local12
253a8     3F 24 06 F5 | 	and	local04, #63
253ac     08 20 06 F1 | 	add	local02, #8
253b0     10 25 42 FC | 	wrbyte	local04, local02
253b4     08 20 86 F1 | 	sub	local02, #8
253b8     0F 13 02 FB | 	rdlong	arg01, local01
253bc     1C 12 06 F1 | 	add	arg01, #28
253c0                 | ' {
253c0                 | ' 
253c0                 | ' 	return *((DWORD*)ptr);
253c0     09 FB 01 FB | 	rdlong	result1, arg01
253c4     10 FB 61 FC | 	wrlong	result1, local02
253c8     0F 13 02 FB | 	rdlong	arg01, local01
253cc     16 12 06 F1 | 	add	arg01, #22
253d0                 | ' {
253d0                 | ' 
253d0                 | ' 	return *((WORD*)ptr);
253d0     09 FB E1 FA | 	rdword	result1, arg01
253d4     06 20 06 F1 | 	add	local02, #6
253d8     10 FB 51 FC | 	wrword	result1, local02
253dc     0F 13 02 FB | 	rdlong	arg01, local01
253e0     18 12 06 F1 | 	add	arg01, #24
253e4                 | ' {
253e4                 | ' 
253e4                 | ' 	return *((WORD*)ptr);
253e4     09 FB E1 FA | 	rdword	result1, arg01
253e8     02 20 86 F1 | 	sub	local02, #2
253ec     10 FB 51 FC | 	wrword	result1, local02
253f0                 | LR__3874
253f0     A7 F0 03 F6 | 	mov	ptra, fp
253f4     B2 00 A0 FD | 	call	#popregs_
253f8                 | _fatfs_cc_get_fileinfo_ret
253f8     2D 00 64 FD | 	ret
253fc                 | 
253fc                 | _fatfs_cc_create_name
253fc     0D 4A 05 F6 | 	mov	COUNT_, #13
25400     A8 00 A0 FD | 	call	#pushregs_
25404     34 F0 07 F1 | 	add	ptra, #52
25408     04 4E 05 F1 | 	add	fp, #4
2540c     A7 12 62 FC | 	wrlong	arg01, fp
25410     04 4E 05 F1 | 	add	fp, #4
25414     A7 14 62 FC | 	wrlong	arg02, fp
25418     0A FB 01 FB | 	rdlong	result1, arg02
2541c     28 4E 05 F1 | 	add	fp, #40
25420     A7 FA 61 FC | 	wrlong	result1, fp
25424     2C 4E 85 F1 | 	sub	fp, #44
25428     A7 FA 01 FB | 	rdlong	result1, fp
2542c     FD 1E 02 FB | 	rdlong	local01, result1
25430     0C 1E 06 F1 | 	add	local01, #12
25434     0F 21 02 FB | 	rdlong	local02, local01
25438     14 4E 05 F1 | 	add	fp, #20
2543c     A7 20 62 FC | 	wrlong	local02, fp
25440     14 4E 05 F1 | 	add	fp, #20
25444     A7 00 68 FC | 	wrlong	#0, fp
25448     2C 4E 85 F1 | 	sub	fp, #44
2544c                 | ' 
2544c                 | ' 
2544c                 | ' 
2544c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2544c                 | ' 	for (;;) {
2544c                 | LR__3880
2544c     30 4E 05 F1 | 	add	fp, #48
25450     A7 12 02 F6 | 	mov	arg01, fp
25454     30 4E 85 F1 | 	sub	fp, #48
25458     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2545c     1C 4E 05 F1 | 	add	fp, #28
25460     A7 FA 61 FC | 	wrlong	result1, fp
25464     1C 4E 85 F1 | 	sub	fp, #28
25468     FF FF 7F FF 
2546c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25470     06 FA 05 A6 |  if_e	mov	result1, #6
25474     74 08 90 AD |  if_e	jmp	#LR__3920
25478     1C 4E 05 F1 | 	add	fp, #28
2547c     A7 1E 02 FB | 	rdlong	local01, fp
25480     1C 4E 85 F1 | 	sub	fp, #28
25484     80 00 00 FF 
25488     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2548c     3C 00 90 CD |  if_b	jmp	#LR__3881
25490     18 4E 05 F1 | 	add	fp, #24
25494     A7 22 02 FB | 	rdlong	local03, fp
25498     14 4E 05 F1 | 	add	fp, #20
2549c     A7 1E 02 FB | 	rdlong	local01, fp
254a0     0F 25 02 F6 | 	mov	local04, local01
254a4     01 24 06 F1 | 	add	local04, #1
254a8     A7 24 62 FC | 	wrlong	local04, fp
254ac     01 1E 66 F0 | 	shl	local01, #1
254b0     11 1F 02 F1 | 	add	local01, local03
254b4     10 4E 85 F1 | 	sub	fp, #16
254b8     A7 26 02 FB | 	rdlong	local05, fp
254bc     1C 4E 85 F1 | 	sub	fp, #28
254c0     13 29 02 F6 | 	mov	local06, local05
254c4     10 28 46 F0 | 	shr	local06, #16
254c8     0F 29 52 FC | 	wrword	local06, local01
254cc                 | LR__3881
254cc     1C 4E 05 F1 | 	add	fp, #28
254d0     A7 1E 02 FB | 	rdlong	local01, fp
254d4     08 4E 85 F1 | 	sub	fp, #8
254d8     A7 1E 52 FC | 	wrword	local01, fp
254dc     A7 1E E2 FA | 	rdword	local01, fp
254e0     14 4E 85 F1 | 	sub	fp, #20
254e4     20 1E 16 F2 | 	cmp	local01, #32 wc
254e8     B0 00 90 CD |  if_b	jmp	#LR__3883
254ec     14 4E 05 F1 | 	add	fp, #20
254f0     A7 1E E2 FA | 	rdword	local01, fp
254f4     14 4E 85 F1 | 	sub	fp, #20
254f8     2F 1E 0E F2 | 	cmp	local01, #47 wz
254fc     14 4E 05 51 |  if_ne	add	fp, #20
25500     A7 24 E2 5A |  if_ne	rdword	local04, fp
25504     14 4E 85 51 |  if_ne	sub	fp, #20
25508     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2550c     8C 00 90 AD |  if_e	jmp	#LR__3883
25510     14 4E 05 F1 | 	add	fp, #20
25514     A7 12 E2 FA | 	rdword	arg01, fp
25518     14 4E 85 F1 | 	sub	fp, #20
2551c     80 12 16 F2 | 	cmp	arg01, #128 wc
25520     24 00 90 3D |  if_ae	jmp	#LR__3882
25524     5A 01 00 FF 
25528     60 12 06 F6 | 	mov	arg01, ##@LR__4542
2552c     14 4E 05 F1 | 	add	fp, #20
25530     A7 14 E2 FA | 	rdword	arg02, fp
25534     14 4E 85 F1 | 	sub	fp, #20
25538     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2553c     00 FA 0D F2 | 	cmp	result1, #0 wz
25540     06 FA 05 56 |  if_ne	mov	result1, #6
25544     A4 07 90 5D |  if_ne	jmp	#LR__3920
25548                 | LR__3882
25548     2C 4E 05 F1 | 	add	fp, #44
2554c     A7 28 02 FB | 	rdlong	local06, fp
25550     2C 4E 85 F1 | 	sub	fp, #44
25554     FF 28 16 F2 | 	cmp	local06, #255 wc
25558     06 FA 05 36 |  if_ae	mov	result1, #6
2555c     8C 07 90 3D |  if_ae	jmp	#LR__3920
25560     18 4E 05 F1 | 	add	fp, #24
25564     A7 22 02 FB | 	rdlong	local03, fp
25568     14 4E 05 F1 | 	add	fp, #20
2556c     A7 20 02 FB | 	rdlong	local02, fp
25570     10 25 02 F6 | 	mov	local04, local02
25574     01 24 06 F1 | 	add	local04, #1
25578     A7 24 62 FC | 	wrlong	local04, fp
2557c     10 1F 02 F6 | 	mov	local01, local02
25580     01 1E 66 F0 | 	shl	local01, #1
25584     11 1F 02 F1 | 	add	local01, local03
25588     18 4E 85 F1 | 	sub	fp, #24
2558c     A7 28 E2 FA | 	rdword	local06, fp
25590     14 4E 85 F1 | 	sub	fp, #20
25594     0F 29 52 FC | 	wrword	local06, local01
25598     B0 FE 9F FD | 	jmp	#LR__3880
2559c                 | LR__3883
2559c     14 4E 05 F1 | 	add	fp, #20
255a0     A7 2A E2 FA | 	rdword	local07, fp
255a4     14 4E 85 F1 | 	sub	fp, #20
255a8     20 2A 16 F2 | 	cmp	local07, #32 wc
255ac     10 4E 05 C1 |  if_b	add	fp, #16
255b0     A7 08 48 CC |  if_b	wrbyte	#4, fp
255b4     10 4E 85 C1 |  if_b	sub	fp, #16
255b8     74 00 90 CD |  if_b	jmp	#LR__3888
255bc     97 24 48 FB | 	callpa	#(@LR__3886-@LR__3884)>>2,fcache_load_ptr_
255c0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
255c0                 | LR__3884
255c0     30 4E 05 F1 | 	add	fp, #48
255c4     A7 24 02 FB | 	rdlong	local04, fp
255c8     30 4E 85 F1 | 	sub	fp, #48
255cc     12 2B C2 FA | 	rdbyte	local07, local04
255d0     2F 2A 0E F2 | 	cmp	local07, #47 wz
255d4     18 00 90 AD |  if_e	jmp	#LR__3885
255d8     30 4E 05 F1 | 	add	fp, #48
255dc     A7 24 02 FB | 	rdlong	local04, fp
255e0     30 4E 85 F1 | 	sub	fp, #48
255e4     12 21 C2 FA | 	rdbyte	local02, local04
255e8     5C 20 0E F2 | 	cmp	local02, #92 wz
255ec     18 00 90 5D |  if_ne	jmp	#LR__3887
255f0                 | LR__3885
255f0     30 4E 05 F1 | 	add	fp, #48
255f4     A7 1E 02 FB | 	rdlong	local01, fp
255f8     01 1E 06 F1 | 	add	local01, #1
255fc     A7 1E 62 FC | 	wrlong	local01, fp
25600     30 4E 85 F1 | 	sub	fp, #48
25604     B8 FF 9F FD | 	jmp	#LR__3884
25608                 | LR__3886
25608                 | LR__3887
25608     10 4E 05 F1 | 	add	fp, #16
2560c     A7 00 48 FC | 	wrbyte	#0, fp
25610     20 4E 05 F1 | 	add	fp, #32
25614     A7 28 02 FB | 	rdlong	local06, fp
25618     30 4E 85 F1 | 	sub	fp, #48
2561c     14 2B C2 FA | 	rdbyte	local07, local06
25620     20 2A 16 F2 | 	cmp	local07, #32 wc
25624     10 4E 05 C1 |  if_b	add	fp, #16
25628     A7 08 48 CC |  if_b	wrbyte	#4, fp
2562c     10 4E 85 C1 |  if_b	sub	fp, #16
25630                 | LR__3888
25630     08 4E 05 F1 | 	add	fp, #8
25634     A7 2A 02 FB | 	rdlong	local07, fp
25638     28 4E 05 F1 | 	add	fp, #40
2563c     A7 1E 02 FB | 	rdlong	local01, fp
25640     30 4E 85 F1 | 	sub	fp, #48
25644     15 1F 62 FC | 	wrlong	local01, local07
25648     97 38 48 FB | 	callpa	#(@LR__3890-@LR__3889)>>2,fcache_load_ptr_
2564c                 | ' 	}
2564c                 | ' 	*path = p;
2564c                 | ' #line 2862 "ff.c"
2564c                 | ' 	while (di) {
2564c                 | LR__3889
2564c     2C 4E 05 F1 | 	add	fp, #44
25650     A7 2A 0A FB | 	rdlong	local07, fp wz
25654     2C 4E 85 F1 | 	sub	fp, #44
25658     60 00 90 AD |  if_e	jmp	#LR__3891
2565c     18 4E 05 F1 | 	add	fp, #24
25660     A7 28 02 FB | 	rdlong	local06, fp
25664     14 4E 05 F1 | 	add	fp, #20
25668     A7 24 02 FB | 	rdlong	local04, fp
2566c     01 24 86 F1 | 	sub	local04, #1
25670     01 24 66 F0 | 	shl	local04, #1
25674     14 25 02 F1 | 	add	local04, local06
25678     12 29 E2 FA | 	rdword	local06, local04
2567c     18 4E 85 F1 | 	sub	fp, #24
25680     A7 28 52 FC | 	wrword	local06, fp
25684     A7 2A E2 FA | 	rdword	local07, fp
25688     14 4E 85 F1 | 	sub	fp, #20
2568c     20 2A 0E F2 | 	cmp	local07, #32 wz
25690     14 4E 05 51 |  if_ne	add	fp, #20
25694     A7 1E E2 5A |  if_ne	rdword	local01, fp
25698     14 4E 85 51 |  if_ne	sub	fp, #20
2569c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
256a0     18 00 90 5D |  if_ne	jmp	#LR__3891
256a4     2C 4E 05 F1 | 	add	fp, #44
256a8     A7 1E 02 FB | 	rdlong	local01, fp
256ac     01 1E 86 F1 | 	sub	local01, #1
256b0     A7 1E 62 FC | 	wrlong	local01, fp
256b4     2C 4E 85 F1 | 	sub	fp, #44
256b8     90 FF 9F FD | 	jmp	#LR__3889
256bc                 | LR__3890
256bc                 | LR__3891
256bc     18 4E 05 F1 | 	add	fp, #24
256c0     A7 2C 02 FB | 	rdlong	local08, fp
256c4     14 4E 05 F1 | 	add	fp, #20
256c8     A7 24 02 FB | 	rdlong	local04, fp
256cc     01 24 66 F0 | 	shl	local04, #1
256d0     16 25 02 F1 | 	add	local04, local08
256d4     12 01 58 FC | 	wrword	#0, local04
256d8     A7 2A 0A FB | 	rdlong	local07, fp wz
256dc     2C 4E 85 F1 | 	sub	fp, #44
256e0     06 FA 05 A6 |  if_e	mov	result1, #6
256e4     04 06 90 AD |  if_e	jmp	#LR__3920
256e8                 | ' 
256e8                 | ' 
256e8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
256e8     28 4E 05 F1 | 	add	fp, #40
256ec     A7 00 68 FC | 	wrlong	#0, fp
256f0     28 4E 85 F1 | 	sub	fp, #40
256f4     97 22 48 FB | 	callpa	#(@LR__3893-@LR__3892)>>2,fcache_load_ptr_
256f8                 | LR__3892
256f8     18 4E 05 F1 | 	add	fp, #24
256fc     A7 2E 02 FB | 	rdlong	local09, fp
25700     10 4E 05 F1 | 	add	fp, #16
25704     A7 30 02 FB | 	rdlong	local10, fp
25708     28 4E 85 F1 | 	sub	fp, #40
2570c     01 30 66 F0 | 	shl	local10, #1
25710     17 31 02 F1 | 	add	local10, local09
25714     18 33 E2 FA | 	rdword	local11, local10
25718     20 32 0E F2 | 	cmp	local11, #32 wz
2571c     1C 00 90 5D |  if_ne	jmp	#LR__3894
25720     28 4E 05 F1 | 	add	fp, #40
25724     A7 34 02 FB | 	rdlong	local12, fp
25728     1A 27 02 F6 | 	mov	local05, local12
2572c     01 26 06 F1 | 	add	local05, #1
25730     A7 26 62 FC | 	wrlong	local05, fp
25734     28 4E 85 F1 | 	sub	fp, #40
25738     BC FF 9F FD | 	jmp	#LR__3892
2573c                 | LR__3893
2573c                 | LR__3894
2573c     28 4E 05 F1 | 	add	fp, #40
25740     A7 2A 02 FB | 	rdlong	local07, fp
25744     28 4E 85 F1 | 	sub	fp, #40
25748     01 2A 16 F2 | 	cmp	local07, #1 wc
2574c     28 00 90 3D |  if_ae	jmp	#LR__3895
25750     18 4E 05 F1 | 	add	fp, #24
25754     A7 22 02 FB | 	rdlong	local03, fp
25758     10 4E 05 F1 | 	add	fp, #16
2575c     A7 2E 02 FB | 	rdlong	local09, fp
25760     28 4E 85 F1 | 	sub	fp, #40
25764     01 2E 66 F0 | 	shl	local09, #1
25768     11 2F 02 F1 | 	add	local09, local03
2576c     17 1F E2 FA | 	rdword	local01, local09
25770     2E 1E 0E F2 | 	cmp	local01, #46 wz
25774     14 00 90 5D |  if_ne	jmp	#LR__3896
25778                 | LR__3895
25778     10 4E 05 F1 | 	add	fp, #16
2577c     A7 2A C2 FA | 	rdbyte	local07, fp
25780     03 2A 46 F5 | 	or	local07, #3
25784     A7 2A 42 FC | 	wrbyte	local07, fp
25788     10 4E 85 F1 | 	sub	fp, #16
2578c                 | LR__3896
2578c     97 2C 48 FB | 	callpa	#(@LR__3898-@LR__3897)>>2,fcache_load_ptr_
25790                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
25790                 | LR__3897
25790     2C 4E 05 F1 | 	add	fp, #44
25794     A7 2A 02 FB | 	rdlong	local07, fp
25798     2C 4E 85 F1 | 	sub	fp, #44
2579c     01 2A 16 F2 | 	cmp	local07, #1 wc
257a0     44 00 90 CD |  if_b	jmp	#LR__3899
257a4     18 4E 05 F1 | 	add	fp, #24
257a8     A7 28 02 FB | 	rdlong	local06, fp
257ac     14 4E 05 F1 | 	add	fp, #20
257b0     A7 22 02 FB | 	rdlong	local03, fp
257b4     2C 4E 85 F1 | 	sub	fp, #44
257b8     01 22 86 F1 | 	sub	local03, #1
257bc     01 22 66 F0 | 	shl	local03, #1
257c0     14 23 02 F1 | 	add	local03, local06
257c4     11 1F E2 FA | 	rdword	local01, local03
257c8     2E 1E 0E F2 | 	cmp	local01, #46 wz
257cc     18 00 90 AD |  if_e	jmp	#LR__3899
257d0     2C 4E 05 F1 | 	add	fp, #44
257d4     A7 1E 02 FB | 	rdlong	local01, fp
257d8     01 1E 86 F1 | 	sub	local01, #1
257dc     A7 1E 62 FC | 	wrlong	local01, fp
257e0     2C 4E 85 F1 | 	sub	fp, #44
257e4     A8 FF 9F FD | 	jmp	#LR__3897
257e8                 | LR__3898
257e8                 | LR__3899
257e8     04 4E 05 F1 | 	add	fp, #4
257ec     A7 12 02 FB | 	rdlong	arg01, fp
257f0     04 4E 85 F1 | 	sub	fp, #4
257f4     20 12 06 F1 | 	add	arg01, #32
257f8     20 14 06 F6 | 	mov	arg02, #32
257fc     0B 16 06 F6 | 	mov	arg03, #11
25800     09 37 02 F6 | 	mov	local13, arg01
25804     98 00 A0 FD | 	call	#\builtin_bytefill_
25808     1B FB 01 F6 | 	mov	result1, local13
2580c     0C 4E 05 F1 | 	add	fp, #12
25810     A7 00 48 FC | 	wrbyte	#0, fp
25814     A7 2A C2 FA | 	rdbyte	local07, fp
25818     14 4E 05 F1 | 	add	fp, #20
2581c     A7 2A 62 FC | 	wrlong	local07, fp
25820     04 4E 05 F1 | 	add	fp, #4
25824     A7 10 68 FC | 	wrlong	#8, fp
25828     24 4E 85 F1 | 	sub	fp, #36
2582c                 | ' 
2582c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2582c                 | ' 	i = b = 0; ni = 8;
2582c                 | ' 	for (;;) {
2582c                 | LR__3900
2582c     18 4E 05 F1 | 	add	fp, #24
25830     A7 22 02 FB | 	rdlong	local03, fp
25834     10 4E 05 F1 | 	add	fp, #16
25838     A7 2E 02 FB | 	rdlong	local09, fp
2583c     17 25 02 F6 | 	mov	local04, local09
25840     01 24 06 F1 | 	add	local04, #1
25844     A7 24 62 FC | 	wrlong	local04, fp
25848     01 2E 66 F0 | 	shl	local09, #1
2584c     11 2F 02 F1 | 	add	local09, local03
25850     17 29 E2 FA | 	rdword	local06, local09
25854     14 4E 85 F1 | 	sub	fp, #20
25858     A7 28 52 FC | 	wrword	local06, fp
2585c     A7 2A EA FA | 	rdword	local07, fp wz
25860     14 4E 85 F1 | 	sub	fp, #20
25864     74 03 90 AD |  if_e	jmp	#LR__3916
25868     14 4E 05 F1 | 	add	fp, #20
2586c     A7 2A E2 FA | 	rdword	local07, fp
25870     14 4E 85 F1 | 	sub	fp, #20
25874     20 2A 0E F2 | 	cmp	local07, #32 wz
25878     30 00 90 AD |  if_e	jmp	#LR__3901
2587c     14 4E 05 F1 | 	add	fp, #20
25880     A7 1E E2 FA | 	rdword	local01, fp
25884     14 4E 85 F1 | 	sub	fp, #20
25888     2E 1E 0E F2 | 	cmp	local01, #46 wz
2588c     34 00 90 5D |  if_ne	jmp	#LR__3902
25890     28 4E 05 F1 | 	add	fp, #40
25894     A7 24 02 FB | 	rdlong	local04, fp
25898     04 4E 05 F1 | 	add	fp, #4
2589c     A7 30 02 FB | 	rdlong	local10, fp
258a0     2C 4E 85 F1 | 	sub	fp, #44
258a4     18 25 0A F2 | 	cmp	local04, local10 wz
258a8     18 00 90 AD |  if_e	jmp	#LR__3902
258ac                 | LR__3901
258ac     10 4E 05 F1 | 	add	fp, #16
258b0     A7 2A C2 FA | 	rdbyte	local07, fp
258b4     03 2A 46 F5 | 	or	local07, #3
258b8     A7 2A 42 FC | 	wrbyte	local07, fp
258bc     10 4E 85 F1 | 	sub	fp, #16
258c0                 | ' 			cf |=  0x01  |  0x02 ;
258c0                 | ' 			continue;
258c0     68 FF 9F FD | 	jmp	#LR__3900
258c4                 | LR__3902
258c4     20 4E 05 F1 | 	add	fp, #32
258c8     A7 2A 02 FB | 	rdlong	local07, fp
258cc     04 4E 05 F1 | 	add	fp, #4
258d0     A7 1E 02 FB | 	rdlong	local01, fp
258d4     24 4E 85 F1 | 	sub	fp, #36
258d8     0F 2B 12 F2 | 	cmp	local07, local01 wc
258dc     1C 00 90 3D |  if_ae	jmp	#LR__3903
258e0     28 4E 05 F1 | 	add	fp, #40
258e4     A7 2C 02 FB | 	rdlong	local08, fp
258e8     04 4E 05 F1 | 	add	fp, #4
258ec     A7 30 02 FB | 	rdlong	local10, fp
258f0     2C 4E 85 F1 | 	sub	fp, #44
258f4     18 2D 0A F2 | 	cmp	local08, local10 wz
258f8     B0 00 90 5D |  if_ne	jmp	#LR__3905
258fc                 | LR__3903
258fc     24 4E 05 F1 | 	add	fp, #36
25900     A7 2A 02 FB | 	rdlong	local07, fp
25904     24 4E 85 F1 | 	sub	fp, #36
25908     0B 2A 0E F2 | 	cmp	local07, #11 wz
2590c     18 00 90 5D |  if_ne	jmp	#LR__3904
25910     10 4E 05 F1 | 	add	fp, #16
25914     A7 2A C2 FA | 	rdbyte	local07, fp
25918     03 2A 46 F5 | 	or	local07, #3
2591c     A7 2A 42 FC | 	wrbyte	local07, fp
25920     10 4E 85 F1 | 	sub	fp, #16
25924                 | ' 				cf |=  0x01  |  0x02 ;
25924                 | ' 				break;
25924     B4 02 90 FD | 	jmp	#LR__3916
25928                 | LR__3904
25928     28 4E 05 F1 | 	add	fp, #40
2592c     A7 2A 02 FB | 	rdlong	local07, fp
25930     04 4E 05 F1 | 	add	fp, #4
25934     A7 1E 02 FB | 	rdlong	local01, fp
25938     2C 4E 85 F1 | 	sub	fp, #44
2593c     0F 2B 0A F2 | 	cmp	local07, local01 wz
25940     10 4E 05 51 |  if_ne	add	fp, #16
25944     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
25948     03 2A 46 55 |  if_ne	or	local07, #3
2594c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
25950     10 4E 85 51 |  if_ne	sub	fp, #16
25954     28 4E 05 F1 | 	add	fp, #40
25958     A7 2A 02 FB | 	rdlong	local07, fp
2595c     04 4E 05 F1 | 	add	fp, #4
25960     A7 20 02 FB | 	rdlong	local02, fp
25964     2C 4E 85 F1 | 	sub	fp, #44
25968     10 2B 1A F2 | 	cmp	local07, local02 wcz
2596c     6C 02 90 1D |  if_a	jmp	#LR__3916
25970     2C 4E 05 F1 | 	add	fp, #44
25974     A7 2A 02 FB | 	rdlong	local07, fp
25978     04 4E 85 F1 | 	sub	fp, #4
2597c     A7 2A 62 FC | 	wrlong	local07, fp
25980     08 4E 85 F1 | 	sub	fp, #8
25984     A7 10 68 FC | 	wrlong	#8, fp
25988     04 4E 05 F1 | 	add	fp, #4
2598c     A7 16 68 FC | 	wrlong	#11, fp
25990     18 4E 85 F1 | 	sub	fp, #24
25994     A7 32 C2 FA | 	rdbyte	local11, fp
25998     19 2B E2 F8 | 	getbyte	local07, local11, #0
2599c     02 2A 66 F0 | 	shl	local07, #2
259a0     A7 2A 42 FC | 	wrbyte	local07, fp
259a4     0C 4E 85 F1 | 	sub	fp, #12
259a8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
259a8                 | ' 			continue;
259a8     80 FE 9F FD | 	jmp	#LR__3900
259ac                 | LR__3905
259ac     14 4E 05 F1 | 	add	fp, #20
259b0     A7 2A E2 FA | 	rdword	local07, fp
259b4     14 4E 85 F1 | 	sub	fp, #20
259b8     80 2A 16 F2 | 	cmp	local07, #128 wc
259bc     6C 00 90 CD |  if_b	jmp	#LR__3907
259c0     10 4E 05 F1 | 	add	fp, #16
259c4     A7 2A C2 FA | 	rdbyte	local07, fp
259c8     02 2A 46 F5 | 	or	local07, #2
259cc     A7 2A 42 FC | 	wrbyte	local07, fp
259d0     04 4E 05 F1 | 	add	fp, #4
259d4     A7 12 E2 FA | 	rdword	arg01, fp
259d8     14 4E 85 F1 | 	sub	fp, #20
259dc     01 00 00 FF 
259e0     52 15 06 F6 | 	mov	arg02, ##850
259e4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
259e8     14 4E 05 F1 | 	add	fp, #20
259ec     A7 FA 51 FC | 	wrword	result1, fp
259f0     A7 2A E2 FA | 	rdword	local07, fp
259f4     14 4E 85 F1 | 	sub	fp, #20
259f8     80 2A CE F7 | 	test	local07, #128 wz
259fc     2C 00 90 AD |  if_e	jmp	#LR__3906
25a00     14 4E 05 F1 | 	add	fp, #20
25a04     A7 20 E2 FA | 	rdword	local02, fp
25a08     7F 20 06 F5 | 	and	local02, #127
25a0c     01 00 00 FF 
25a10     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
25a14     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
25a18     10 2B C2 FA | 	rdbyte	local07, local02
25a1c     A7 2A 52 FC | 	wrword	local07, fp
25a20     14 4E 85 F1 | 	sub	fp, #20
25a24     01 00 00 FF 
25a28     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
25a2c                 | LR__3906
25a2c                 | LR__3907
25a2c     14 4E 05 F1 | 	add	fp, #20
25a30     A7 2A E2 FA | 	rdword	local07, fp
25a34     14 4E 85 F1 | 	sub	fp, #20
25a38     00 2B 16 F2 | 	cmp	local07, #256 wc
25a3c     88 00 90 CD |  if_b	jmp	#LR__3909
25a40     24 4E 05 F1 | 	add	fp, #36
25a44     A7 2A 02 FB | 	rdlong	local07, fp
25a48     01 2A 86 F1 | 	sub	local07, #1
25a4c     04 4E 85 F1 | 	sub	fp, #4
25a50     A7 20 02 FB | 	rdlong	local02, fp
25a54     20 4E 85 F1 | 	sub	fp, #32
25a58     15 21 12 F2 | 	cmp	local02, local07 wc
25a5c     2C 00 90 CD |  if_b	jmp	#LR__3908
25a60     10 4E 05 F1 | 	add	fp, #16
25a64     A7 32 C2 FA | 	rdbyte	local11, fp
25a68     19 2B E2 F8 | 	getbyte	local07, local11, #0
25a6c     03 2A 46 F5 | 	or	local07, #3
25a70     A7 2A 42 FC | 	wrbyte	local07, fp
25a74     14 4E 05 F1 | 	add	fp, #20
25a78     A7 2A 02 FB | 	rdlong	local07, fp
25a7c     04 4E 85 F1 | 	sub	fp, #4
25a80     A7 2A 62 FC | 	wrlong	local07, fp
25a84     20 4E 85 F1 | 	sub	fp, #32
25a88                 | ' 				cf |=  0x01  |  0x02 ;
25a88                 | ' 				i = ni; continue;
25a88     A0 FD 9F FD | 	jmp	#LR__3900
25a8c                 | LR__3908
25a8c     04 4E 05 F1 | 	add	fp, #4
25a90     A7 2E 02 FB | 	rdlong	local09, fp
25a94     1C 4E 05 F1 | 	add	fp, #28
25a98     A7 30 02 FB | 	rdlong	local10, fp
25a9c     18 25 02 F6 | 	mov	local04, local10
25aa0     01 24 06 F1 | 	add	local04, #1
25aa4     A7 24 62 FC | 	wrlong	local04, fp
25aa8     20 2E 06 F1 | 	add	local09, #32
25aac     17 31 02 F1 | 	add	local10, local09
25ab0     0C 4E 85 F1 | 	sub	fp, #12
25ab4     A7 22 E2 FA | 	rdword	local03, fp
25ab8     14 4E 85 F1 | 	sub	fp, #20
25abc     08 22 46 F0 | 	shr	local03, #8
25ac0     18 23 42 FC | 	wrbyte	local03, local10
25ac4     D4 00 90 FD | 	jmp	#LR__3915
25ac8                 | LR__3909
25ac8     14 4E 05 F1 | 	add	fp, #20
25acc     A7 2A EA FA | 	rdword	local07, fp wz
25ad0     14 4E 85 F1 | 	sub	fp, #20
25ad4     20 00 90 AD |  if_e	jmp	#LR__3910
25ad8     5A 01 00 FF 
25adc     69 12 06 F6 | 	mov	arg01, ##@LR__4543
25ae0     14 4E 05 F1 | 	add	fp, #20
25ae4     A7 14 E2 FA | 	rdword	arg02, fp
25ae8     14 4E 85 F1 | 	sub	fp, #20
25aec     48 CB BF FD | 	call	#_fatfs_cc_strchr
25af0     00 FA 0D F2 | 	cmp	result1, #0 wz
25af4     20 00 90 AD |  if_e	jmp	#LR__3911
25af8                 | LR__3910
25af8     14 4E 05 F1 | 	add	fp, #20
25afc     A7 BE 58 FC | 	wrword	#95, fp
25b00     04 4E 85 F1 | 	sub	fp, #4
25b04     A7 2A C2 FA | 	rdbyte	local07, fp
25b08     03 2A 46 F5 | 	or	local07, #3
25b0c     A7 2A 42 FC | 	wrbyte	local07, fp
25b10     10 4E 85 F1 | 	sub	fp, #16
25b14     84 00 90 FD | 	jmp	#LR__3914
25b18                 | LR__3911
25b18     14 4E 05 F1 | 	add	fp, #20
25b1c     A7 2A E2 FA | 	rdword	local07, fp
25b20     14 4E 85 F1 | 	sub	fp, #20
25b24     41 2A 16 F2 | 	cmp	local07, #65 wc
25b28     24 00 90 CD |  if_b	jmp	#LR__3912
25b2c     14 4E 05 F1 | 	add	fp, #20
25b30     A7 1E E2 FA | 	rdword	local01, fp
25b34     14 4E 85 F1 | 	sub	fp, #20
25b38     5B 1E 16 F2 | 	cmp	local01, #91 wc
25b3c     0C 4E 05 C1 |  if_b	add	fp, #12
25b40     A7 2A C2 CA |  if_b	rdbyte	local07, fp
25b44     02 2A 46 C5 |  if_b	or	local07, #2
25b48     A7 2A 42 CC |  if_b	wrbyte	local07, fp
25b4c     0C 4E 85 C1 |  if_b	sub	fp, #12
25b50                 | LR__3912
25b50     14 4E 05 F1 | 	add	fp, #20
25b54     A7 2A E2 FA | 	rdword	local07, fp
25b58     14 4E 85 F1 | 	sub	fp, #20
25b5c     61 2A 16 F2 | 	cmp	local07, #97 wc
25b60     38 00 90 CD |  if_b	jmp	#LR__3913
25b64     14 4E 05 F1 | 	add	fp, #20
25b68     A7 1E E2 FA | 	rdword	local01, fp
25b6c     14 4E 85 F1 | 	sub	fp, #20
25b70     7B 1E 16 F2 | 	cmp	local01, #123 wc
25b74     24 00 90 3D |  if_ae	jmp	#LR__3913
25b78     0C 4E 05 F1 | 	add	fp, #12
25b7c     A7 2A C2 FA | 	rdbyte	local07, fp
25b80     01 2A 46 F5 | 	or	local07, #1
25b84     A7 2A 42 FC | 	wrbyte	local07, fp
25b88     08 4E 05 F1 | 	add	fp, #8
25b8c     A7 2A E2 FA | 	rdword	local07, fp
25b90     20 2A 86 F1 | 	sub	local07, #32
25b94     A7 2A 52 FC | 	wrword	local07, fp
25b98     14 4E 85 F1 | 	sub	fp, #20
25b9c                 | LR__3913
25b9c                 | LR__3914
25b9c                 | LR__3915
25b9c     04 4E 05 F1 | 	add	fp, #4
25ba0     A7 32 02 FB | 	rdlong	local11, fp
25ba4     19 2F 02 F6 | 	mov	local09, local11
25ba8     1C 4E 05 F1 | 	add	fp, #28
25bac     A7 20 02 FB | 	rdlong	local02, fp
25bb0     10 25 02 F6 | 	mov	local04, local02
25bb4     01 24 06 F1 | 	add	local04, #1
25bb8     A7 24 62 FC | 	wrlong	local04, fp
25bbc     10 31 02 F6 | 	mov	local10, local02
25bc0     20 2E 06 F1 | 	add	local09, #32
25bc4     17 31 02 F1 | 	add	local10, local09
25bc8     0C 4E 85 F1 | 	sub	fp, #12
25bcc     A7 22 E2 FA | 	rdword	local03, fp
25bd0     14 4E 85 F1 | 	sub	fp, #20
25bd4     18 23 42 FC | 	wrbyte	local03, local10
25bd8     50 FC 9F FD | 	jmp	#LR__3900
25bdc                 | LR__3916
25bdc     04 4E 05 F1 | 	add	fp, #4
25be0     A7 32 02 FB | 	rdlong	local11, fp
25be4     04 4E 85 F1 | 	sub	fp, #4
25be8     20 32 06 F1 | 	add	local11, #32
25bec     19 2B C2 FA | 	rdbyte	local07, local11
25bf0     E5 2A 0E F2 | 	cmp	local07, #229 wz
25bf4     04 4E 05 A1 |  if_e	add	fp, #4
25bf8     A7 2A 02 AB |  if_e	rdlong	local07, fp
25bfc     04 4E 85 A1 |  if_e	sub	fp, #4
25c00     20 2A 06 A1 |  if_e	add	local07, #32
25c04     15 0B 48 AC |  if_e	wrbyte	#5, local07
25c08     24 4E 05 F1 | 	add	fp, #36
25c0c     A7 2A 02 FB | 	rdlong	local07, fp
25c10     24 4E 85 F1 | 	sub	fp, #36
25c14     08 2A 0E F2 | 	cmp	local07, #8 wz
25c18     0C 4E 05 A1 |  if_e	add	fp, #12
25c1c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
25c20     02 2A 66 A0 |  if_e	shl	local07, #2
25c24     A7 2A 42 AC |  if_e	wrbyte	local07, fp
25c28     0C 4E 85 A1 |  if_e	sub	fp, #12
25c2c     0C 4E 05 F1 | 	add	fp, #12
25c30     A7 2A C2 FA | 	rdbyte	local07, fp
25c34     0C 4E 85 F1 | 	sub	fp, #12
25c38     0C 2A 06 F5 | 	and	local07, #12
25c3c     0C 2A 0E F2 | 	cmp	local07, #12 wz
25c40     18 00 90 AD |  if_e	jmp	#LR__3917
25c44     0C 4E 05 F1 | 	add	fp, #12
25c48     A7 1E C2 FA | 	rdbyte	local01, fp
25c4c     0C 4E 85 F1 | 	sub	fp, #12
25c50     03 1E 06 F5 | 	and	local01, #3
25c54     03 1E 0E F2 | 	cmp	local01, #3 wz
25c58     14 00 90 5D |  if_ne	jmp	#LR__3918
25c5c                 | LR__3917
25c5c     10 4E 05 F1 | 	add	fp, #16
25c60     A7 2A C2 FA | 	rdbyte	local07, fp
25c64     02 2A 46 F5 | 	or	local07, #2
25c68     A7 2A 42 FC | 	wrbyte	local07, fp
25c6c     10 4E 85 F1 | 	sub	fp, #16
25c70                 | LR__3918
25c70     10 4E 05 F1 | 	add	fp, #16
25c74     A7 2A C2 FA | 	rdbyte	local07, fp
25c78     10 4E 85 F1 | 	sub	fp, #16
25c7c     02 2A CE F7 | 	test	local07, #2 wz
25c80     48 00 90 5D |  if_ne	jmp	#LR__3919
25c84     0C 4E 05 F1 | 	add	fp, #12
25c88     A7 2A C2 FA | 	rdbyte	local07, fp
25c8c     0C 4E 85 F1 | 	sub	fp, #12
25c90     01 2A CE F7 | 	test	local07, #1 wz
25c94     10 4E 05 51 |  if_ne	add	fp, #16
25c98     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
25c9c     10 2A 46 55 |  if_ne	or	local07, #16
25ca0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
25ca4     10 4E 85 51 |  if_ne	sub	fp, #16
25ca8     0C 4E 05 F1 | 	add	fp, #12
25cac     A7 2A C2 FA | 	rdbyte	local07, fp
25cb0     0C 4E 85 F1 | 	sub	fp, #12
25cb4     04 2A CE F7 | 	test	local07, #4 wz
25cb8     10 4E 05 51 |  if_ne	add	fp, #16
25cbc     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
25cc0     08 2A 46 55 |  if_ne	or	local07, #8
25cc4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
25cc8     10 4E 85 51 |  if_ne	sub	fp, #16
25ccc                 | LR__3919
25ccc     04 4E 05 F1 | 	add	fp, #4
25cd0     A7 2A 02 FB | 	rdlong	local07, fp
25cd4     0C 4E 05 F1 | 	add	fp, #12
25cd8     A7 1E C2 FA | 	rdbyte	local01, fp
25cdc     10 4E 85 F1 | 	sub	fp, #16
25ce0     2B 2A 06 F1 | 	add	local07, #43
25ce4     15 1F 42 FC | 	wrbyte	local01, local07
25ce8                 | ' 	}
25ce8                 | ' 
25ce8                 | ' 	dp->fn[ 11 ] = cf;
25ce8                 | ' 
25ce8                 | ' 	return FR_OK;
25ce8     00 FA 05 F6 | 	mov	result1, #0
25cec                 | LR__3920
25cec     A7 F0 03 F6 | 	mov	ptra, fp
25cf0     B2 00 A0 FD | 	call	#popregs_
25cf4                 | _fatfs_cc_create_name_ret
25cf4     2D 00 64 FD | 	ret
25cf8                 | 
25cf8                 | _fatfs_cc_follow_path
25cf8     02 4A 05 F6 | 	mov	COUNT_, #2
25cfc     A8 00 A0 FD | 	call	#pushregs_
25d00     18 F0 07 F1 | 	add	ptra, #24
25d04     04 4E 05 F1 | 	add	fp, #4
25d08     A7 12 62 FC | 	wrlong	arg01, fp
25d0c     04 4E 05 F1 | 	add	fp, #4
25d10     A7 14 62 FC | 	wrlong	arg02, fp
25d14     04 4E 85 F1 | 	sub	fp, #4
25d18     A7 FA 01 FB | 	rdlong	result1, fp
25d1c     FD 1E 02 FB | 	rdlong	local01, result1
25d20     10 4E 05 F1 | 	add	fp, #16
25d24     A7 1E 62 FC | 	wrlong	local01, fp
25d28     14 4E 85 F1 | 	sub	fp, #20
25d2c     97 24 48 FB | 	callpa	#(@LR__3932-@LR__3930)>>2,fcache_load_ptr_
25d30                 | ' )
25d30                 | ' {
25d30                 | ' 	FRESULT res;
25d30                 | ' 	BYTE ns;
25d30                 | ' 	FATFS *fs = dp->obj.fs;
25d30                 | ' #line 3034 "ff.c"
25d30                 | ' 	{
25d30                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
25d30                 | LR__3930
25d30     08 4E 05 F1 | 	add	fp, #8
25d34     A7 1E 02 FB | 	rdlong	local01, fp
25d38     08 4E 85 F1 | 	sub	fp, #8
25d3c     0F 1F C2 FA | 	rdbyte	local01, local01
25d40     2F 1E 0E F2 | 	cmp	local01, #47 wz
25d44     18 00 90 AD |  if_e	jmp	#LR__3931
25d48     08 4E 05 F1 | 	add	fp, #8
25d4c     A7 1E 02 FB | 	rdlong	local01, fp
25d50     08 4E 85 F1 | 	sub	fp, #8
25d54     0F 1F C2 FA | 	rdbyte	local01, local01
25d58     5C 1E 0E F2 | 	cmp	local01, #92 wz
25d5c     18 00 90 5D |  if_ne	jmp	#LR__3933
25d60                 | LR__3931
25d60     08 4E 05 F1 | 	add	fp, #8
25d64     A7 1E 02 FB | 	rdlong	local01, fp
25d68     01 1E 06 F1 | 	add	local01, #1
25d6c     A7 1E 62 FC | 	wrlong	local01, fp
25d70     08 4E 85 F1 | 	sub	fp, #8
25d74     B8 FF 9F FD | 	jmp	#LR__3930
25d78                 | LR__3932
25d78                 | LR__3933
25d78     04 4E 05 F1 | 	add	fp, #4
25d7c     A7 1E 02 FB | 	rdlong	local01, fp
25d80     08 1E 06 F1 | 	add	local01, #8
25d84     0F 01 68 FC | 	wrlong	#0, local01
25d88     04 4E 05 F1 | 	add	fp, #4
25d8c     A7 1E 02 FB | 	rdlong	local01, fp
25d90     08 4E 85 F1 | 	sub	fp, #8
25d94     0F 1F C2 FA | 	rdbyte	local01, local01
25d98     20 1E 16 F2 | 	cmp	local01, #32 wc
25d9c     30 00 90 3D |  if_ae	jmp	#LR__3934
25da0     04 4E 05 F1 | 	add	fp, #4
25da4     A7 1E 02 FB | 	rdlong	local01, fp
25da8     2B 1E 06 F1 | 	add	local01, #43
25dac     0F 01 49 FC | 	wrbyte	#128, local01
25db0     A7 12 02 FB | 	rdlong	arg01, fp
25db4     04 4E 85 F1 | 	sub	fp, #4
25db8     00 14 06 F6 | 	mov	arg02, #0
25dbc     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
25dc0     0C 4E 05 F1 | 	add	fp, #12
25dc4     A7 FA 61 FC | 	wrlong	result1, fp
25dc8     0C 4E 85 F1 | 	sub	fp, #12
25dcc     1C 01 90 FD | 	jmp	#LR__3938
25dd0                 | LR__3934
25dd0                 | ' 		for (;;) {
25dd0                 | LR__3935
25dd0     04 4E 05 F1 | 	add	fp, #4
25dd4     A7 12 02 FB | 	rdlong	arg01, fp
25dd8     04 4E 05 F1 | 	add	fp, #4
25ddc     A7 14 02 F6 | 	mov	arg02, fp
25de0     08 4E 85 F1 | 	sub	fp, #8
25de4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
25de8     0C 4E 05 F1 | 	add	fp, #12
25dec     A7 FA 61 FC | 	wrlong	result1, fp
25df0     00 FA 4D F2 | 	cmps	result1, #0 wz
25df4     0C 4E 85 F1 | 	sub	fp, #12
25df8     F0 00 90 5D |  if_ne	jmp	#LR__3937
25dfc     04 4E 05 F1 | 	add	fp, #4
25e00     A7 12 02 FB | 	rdlong	arg01, fp
25e04     04 4E 85 F1 | 	sub	fp, #4
25e08     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
25e0c     0C 4E 05 F1 | 	add	fp, #12
25e10     A7 FA 61 FC | 	wrlong	result1, fp
25e14     08 4E 85 F1 | 	sub	fp, #8
25e18     A7 1E 02 FB | 	rdlong	local01, fp
25e1c     2B 1E 06 F1 | 	add	local01, #43
25e20     0F 1F C2 FA | 	rdbyte	local01, local01
25e24     0C 4E 05 F1 | 	add	fp, #12
25e28     A7 1E 42 FC | 	wrbyte	local01, fp
25e2c     04 4E 85 F1 | 	sub	fp, #4
25e30     A7 1E 0A FB | 	rdlong	local01, fp wz
25e34     0C 4E 85 F1 | 	sub	fp, #12
25e38     34 00 90 AD |  if_e	jmp	#LR__3936
25e3c     0C 4E 05 F1 | 	add	fp, #12
25e40     A7 1E 02 FB | 	rdlong	local01, fp
25e44     0C 4E 85 F1 | 	sub	fp, #12
25e48     04 1E 0E F2 | 	cmp	local01, #4 wz
25e4c     9C 00 90 5D |  if_ne	jmp	#LR__3937
25e50     10 4E 05 F1 | 	add	fp, #16
25e54     A7 1E C2 FA | 	rdbyte	local01, fp
25e58     10 4E 85 F1 | 	sub	fp, #16
25e5c     04 1E CE F7 | 	test	local01, #4 wz
25e60     0C 4E 05 A1 |  if_e	add	fp, #12
25e64     A7 0A 68 AC |  if_e	wrlong	#5, fp
25e68     0C 4E 85 A1 |  if_e	sub	fp, #12
25e6c                 | ' 					}
25e6c                 | ' 				}
25e6c                 | ' 				break;
25e6c     7C 00 90 FD | 	jmp	#LR__3937
25e70                 | LR__3936
25e70     10 4E 05 F1 | 	add	fp, #16
25e74     A7 1E C2 FA | 	rdbyte	local01, fp
25e78     10 4E 85 F1 | 	sub	fp, #16
25e7c     04 1E CE F7 | 	test	local01, #4 wz
25e80     68 00 90 5D |  if_ne	jmp	#LR__3937
25e84     04 4E 05 F1 | 	add	fp, #4
25e88     A7 1E 02 FB | 	rdlong	local01, fp
25e8c     04 4E 85 F1 | 	sub	fp, #4
25e90     06 1E 06 F1 | 	add	local01, #6
25e94     0F 1F C2 FA | 	rdbyte	local01, local01
25e98     10 1E CE F7 | 	test	local01, #16 wz
25e9c     0C 4E 05 A1 |  if_e	add	fp, #12
25ea0     A7 0A 68 AC |  if_e	wrlong	#5, fp
25ea4     0C 4E 85 A1 |  if_e	sub	fp, #12
25ea8                 | ' 				res = FR_NO_PATH; break;
25ea8     40 00 90 AD |  if_e	jmp	#LR__3937
25eac     04 4E 05 F1 | 	add	fp, #4
25eb0     A7 20 02 FB | 	rdlong	local02, fp
25eb4     10 1F 02 F6 | 	mov	local01, local02
25eb8     10 4E 05 F1 | 	add	fp, #16
25ebc     A7 14 02 FB | 	rdlong	arg02, fp
25ec0     0A 13 02 F6 | 	mov	arg01, arg02
25ec4     34 14 06 F1 | 	add	arg02, #52
25ec8     14 4E 85 F1 | 	sub	fp, #20
25ecc     10 20 06 F1 | 	add	local02, #16
25ed0     10 21 02 FB | 	rdlong	local02, local02
25ed4     FF 21 06 F5 | 	and	local02, #511
25ed8     10 15 02 F1 | 	add	arg02, local02
25edc     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
25ee0     08 1E 06 F1 | 	add	local01, #8
25ee4     0F FB 61 FC | 	wrlong	result1, local01
25ee8     E4 FE 9F FD | 	jmp	#LR__3935
25eec                 | LR__3937
25eec                 | LR__3938
25eec                 | ' 			}
25eec                 | ' #line 3090 "ff.c"
25eec                 | ' 			{
25eec                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
25eec                 | ' 			}
25eec                 | ' 		}
25eec                 | ' 	}
25eec                 | ' 
25eec                 | ' 	return res;
25eec     0C 4E 05 F1 | 	add	fp, #12
25ef0     A7 FA 01 FB | 	rdlong	result1, fp
25ef4     0C 4E 85 F1 | 	sub	fp, #12
25ef8     A7 F0 03 F6 | 	mov	ptra, fp
25efc     B2 00 A0 FD | 	call	#popregs_
25f00                 | _fatfs_cc_follow_path_ret
25f00     2D 00 64 FD | 	ret
25f04                 | 
25f04                 | _fatfs_cc_get_ldnumber
25f04     01 00 66 F6 | 	neg	_var01, #1
25f08     09 03 0A FB | 	rdlong	_var02, arg01 wz
25f0c     01 05 02 F6 | 	mov	_var03, _var02
25f10     01 FA 65 A6 |  if_e	neg	result1, #1
25f14     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
25f18     97 10 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
25f1c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
25f1c                 | LR__3940
25f1c     02 07 C2 FA | 	rdbyte	_var04, _var03
25f20     03 FB E1 F8 | 	getbyte	result1, _var04, #0
25f24     20 FA 15 F2 | 	cmp	result1, #32 wc
25f28     01 04 06 F1 | 	add	_var03, #1
25f2c     03 09 02 36 |  if_ae	mov	_var05, _var04
25f30     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
25f34     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
25f38     E0 FF 9F 1D |  if_a	jmp	#LR__3940
25f3c                 | LR__3941
25f3c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
25f40     3A 06 0E F2 | 	cmp	_var04, #58 wz
25f44     40 00 90 5D |  if_ne	jmp	#LR__3943
25f48     01 0A 06 F6 | 	mov	_var06, #1
25f4c     01 09 C2 FA | 	rdbyte	_var05, _var02
25f50     30 08 16 F2 | 	cmp	_var05, #48 wc
25f54     1C 00 90 CD |  if_b	jmp	#LR__3942
25f58     01 09 C2 FA | 	rdbyte	_var05, _var02
25f5c     3A 08 16 F2 | 	cmp	_var05, #58 wc
25f60     01 0D 02 C6 |  if_b	mov	_var07, _var02
25f64     02 0C 06 C1 |  if_b	add	_var07, #2
25f68     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
25f6c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
25f70     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
25f74                 | LR__3942
25f74     01 0A 56 F2 | 	cmps	_var06, #1 wc
25f78     05 01 02 C6 |  if_b	mov	_var01, _var06
25f7c     09 05 62 CC |  if_b	wrlong	_var03, arg01
25f80                 | ' 			vol = i;
25f80                 | ' 			*path = tt;
25f80                 | ' 		}
25f80                 | ' 		return vol;
25f80     00 FB 01 F6 | 	mov	result1, _var01
25f84     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
25f88                 | LR__3943
25f88                 | ' 	}
25f88                 | ' #line 3170 "ff.c"
25f88                 | ' 	vol = 0;
25f88                 | ' 
25f88                 | ' 	return vol;
25f88     00 FA 05 F6 | 	mov	result1, #0
25f8c                 | _fatfs_cc_get_ldnumber_ret
25f8c     2D 00 64 FD | 	ret
25f90                 | 
25f90                 | _fatfs_cc_check_fs
25f90     04 4A 05 F6 | 	mov	COUNT_, #4
25f94     A8 00 A0 FD | 	call	#pushregs_
25f98     09 1F 02 F6 | 	mov	local01, arg01
25f9c     03 1E 06 F1 | 	add	local01, #3
25fa0     0F 01 48 FC | 	wrbyte	#0, local01
25fa4     2D 1E 06 F1 | 	add	local01, #45
25fa8     FF FF FF FF 
25fac     0F FF 6B FC | 	wrlong	##-1, local01
25fb0     30 1E 86 F1 | 	sub	local01, #48
25fb4     0F 13 02 F6 | 	mov	arg01, local01
25fb8     18 D5 BF FD | 	call	#_fatfs_cc_move_window
25fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
25fc0     04 FA 05 56 |  if_ne	mov	result1, #4
25fc4     94 01 90 5D |  if_ne	jmp	#LR__3954
25fc8     34 1E 06 F1 | 	add	local01, #52
25fcc     0F 13 02 F6 | 	mov	arg01, local01
25fd0     FE 13 06 F1 | 	add	arg01, #510
25fd4                 | ' {
25fd4                 | ' 
25fd4                 | ' 	return *((WORD*)ptr);
25fd4     09 21 E2 FA | 	rdword	local02, arg01
25fd8     0F 23 C2 FA | 	rdbyte	local03, local01
25fdc     34 1E 86 F1 | 	sub	local01, #52
25fe0     11 25 E2 F8 | 	getbyte	local04, local03, #0
25fe4     EB 24 0E F2 | 	cmp	local04, #235 wz
25fe8     11 17 02 56 |  if_ne	mov	arg03, local03
25fec     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
25ff0     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
25ff4     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
25ff8     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
25ffc     44 01 90 5D |  if_ne	jmp	#LR__3953
26000     10 25 32 F9 | 	getword	local04, local02, #0
26004     55 00 00 FF 
26008     55 24 0E F2 | 	cmp	local04, ##43605 wz
2600c     2C 00 90 5D |  if_ne	jmp	#LR__3950
26010     34 1E 06 F1 | 	add	local01, #52
26014     0F 13 02 F6 | 	mov	arg01, local01
26018     34 1E 86 F1 | 	sub	local01, #52
2601c     52 12 06 F1 | 	add	arg01, #82
26020     5A 01 00 FF 
26024     70 14 06 F6 | 	mov	arg02, ##@LR__4544
26028     08 16 06 F6 | 	mov	arg03, #8
2602c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
26030     00 FA 0D F2 | 	cmp	result1, #0 wz
26034                 | ' 			return 0;
26034     00 FA 05 A6 |  if_e	mov	result1, #0
26038     20 01 90 AD |  if_e	jmp	#LR__3954
2603c                 | LR__3950
2603c     34 1E 06 F1 | 	add	local01, #52
26040     0F 13 02 F6 | 	mov	arg01, local01
26044     0B 12 06 F1 | 	add	arg01, #11
26048                 | ' {
26048                 | ' 
26048                 | ' 	return *((WORD*)ptr);
26048     09 FB E1 FA | 	rdword	result1, arg01
2604c     0D 1E 06 F1 | 	add	local01, #13
26050     0F 23 C2 FA | 	rdbyte	local03, local01
26054     41 1E 86 F1 | 	sub	local01, #65
26058     FD 24 32 F9 | 	getword	local04, result1, #0
2605c     FD 14 32 F9 | 	getword	arg02, result1, #0
26060     01 14 86 F1 | 	sub	arg02, #1
26064     0A 25 CA F7 | 	test	local04, arg02 wz
26068     D8 00 90 5D |  if_ne	jmp	#LR__3952
2606c     FD 14 32 F9 | 	getword	arg02, result1, #0
26070     01 00 00 FF 
26074     00 14 16 F2 | 	cmp	arg02, ##512 wc
26078     C8 00 90 CD |  if_b	jmp	#LR__3952
2607c     FD 14 32 F9 | 	getword	arg02, result1, #0
26080     01 00 00 FF 
26084     01 14 16 F2 | 	cmp	arg02, ##513 wc
26088     B8 00 90 3D |  if_ae	jmp	#LR__3952
2608c     11 13 02 F6 | 	mov	arg01, local03
26090     07 12 4E F7 | 	zerox	arg01, #7 wz
26094     AC 00 90 AD |  if_e	jmp	#LR__3952
26098     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2609c     11 23 E2 F8 | 	getbyte	local03, local03, #0
260a0     01 22 86 F1 | 	sub	local03, #1
260a4     11 13 CA F7 | 	test	arg01, local03 wz
260a8     98 00 90 5D |  if_ne	jmp	#LR__3952
260ac     34 1E 06 F1 | 	add	local01, #52
260b0     0F 13 02 F6 | 	mov	arg01, local01
260b4     34 1E 86 F1 | 	sub	local01, #52
260b8     0E 12 06 F1 | 	add	arg01, #14
260bc                 | ' {
260bc                 | ' 
260bc                 | ' 	return *((WORD*)ptr);
260bc     09 FB E9 FA | 	rdword	result1, arg01 wz
260c0     80 00 90 AD |  if_e	jmp	#LR__3952
260c4     44 1E 06 F1 | 	add	local01, #68
260c8     0F 13 C2 FA | 	rdbyte	arg01, local01
260cc     44 1E 86 F1 | 	sub	local01, #68
260d0     01 12 86 F1 | 	sub	arg01, #1
260d4     02 12 16 F2 | 	cmp	arg01, #2 wc
260d8     68 00 90 3D |  if_ae	jmp	#LR__3952
260dc     34 1E 06 F1 | 	add	local01, #52
260e0     0F 13 02 F6 | 	mov	arg01, local01
260e4     34 1E 86 F1 | 	sub	local01, #52
260e8     11 12 06 F1 | 	add	arg01, #17
260ec                 | ' {
260ec                 | ' 
260ec                 | ' 	return *((WORD*)ptr);
260ec     09 FB E9 FA | 	rdword	result1, arg01 wz
260f0     50 00 90 AD |  if_e	jmp	#LR__3952
260f4     34 1E 06 F1 | 	add	local01, #52
260f8     0F 13 02 F6 | 	mov	arg01, local01
260fc     34 1E 86 F1 | 	sub	local01, #52
26100     13 12 06 F1 | 	add	arg01, #19
26104                 | ' {
26104                 | ' 
26104                 | ' 	return *((WORD*)ptr);
26104     09 FB E1 FA | 	rdword	result1, arg01
26108     FD 22 32 F9 | 	getword	local03, result1, #0
2610c     80 22 16 F2 | 	cmp	local03, #128 wc
26110     20 00 90 3D |  if_ae	jmp	#LR__3951
26114     34 1E 06 F1 | 	add	local01, #52
26118     0F 13 02 F6 | 	mov	arg01, local01
2611c     34 1E 86 F1 | 	sub	local01, #52
26120     20 12 06 F1 | 	add	arg01, #32
26124                 | ' {
26124                 | ' 
26124                 | ' 	return *((DWORD*)ptr);
26124     09 FB 01 FB | 	rdlong	result1, arg01
26128     80 00 00 FF 
2612c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
26130     10 00 90 CD |  if_b	jmp	#LR__3952
26134                 | LR__3951
26134     4A 1E 06 F1 | 	add	local01, #74
26138                 | ' {
26138                 | ' 
26138                 | ' 	return *((WORD*)ptr);
26138     0F FB E9 FA | 	rdword	result1, local01 wz
2613c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2613c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2613c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2613c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2613c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2613c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2613c                 | ' 				return 0;
2613c     00 FA 05 56 |  if_ne	mov	result1, #0
26140     18 00 90 5D |  if_ne	jmp	#LR__3954
26144                 | LR__3952
26144                 | LR__3953
26144                 | ' 		}
26144                 | ' 	}
26144                 | ' 	return sign == 0xAA55 ? 2 : 3;
26144     10 23 32 F9 | 	getword	local03, local02, #0
26148     55 00 00 FF 
2614c     55 22 0E F2 | 	cmp	local03, ##43605 wz
26150     02 24 06 A6 |  if_e	mov	local04, #2
26154     03 24 06 56 |  if_ne	mov	local04, #3
26158     12 FB 01 F6 | 	mov	result1, local04
2615c                 | LR__3954
2615c     A7 F0 03 F6 | 	mov	ptra, fp
26160     B2 00 A0 FD | 	call	#popregs_
26164                 | _fatfs_cc_check_fs_ret
26164     2D 00 64 FD | 	ret
26168                 | 
26168                 | _fatfs_cc_find_volume
26168     05 4A 05 F6 | 	mov	COUNT_, #5
2616c     A8 00 A0 FD | 	call	#pushregs_
26170     24 F0 07 F1 | 	add	ptra, #36
26174     09 1F 02 F6 | 	mov	local01, arg01
26178     0A 21 02 F6 | 	mov	local02, arg02
2617c     0F 13 02 F6 | 	mov	arg01, local01
26180     00 14 06 F6 | 	mov	arg02, #0
26184     08 FE BF FD | 	call	#_fatfs_cc_check_fs
26188     02 FA 0D F2 | 	cmp	result1, #2 wz
2618c     0C 00 90 AD |  if_e	jmp	#LR__3960
26190     03 FA 15 F2 | 	cmp	result1, #3 wc
26194     00 20 0E C2 |  if_b	cmp	local02, #0 wz
26198     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3968
2619c                 | LR__3960
2619c                 | ' 	for (i = 0; i < 4; i++) {
2619c     00 22 06 F6 | 	mov	local03, #0
261a0     97 26 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
261a4                 | LR__3961
261a4     04 22 16 F2 | 	cmp	local03, #4 wc
261a8     44 00 90 3D |  if_ae	jmp	#LR__3963
261ac     11 25 02 F6 | 	mov	local04, local03
261b0     02 24 66 F0 | 	shl	local04, #2
261b4     14 4E 05 F1 | 	add	fp, #20
261b8     A7 24 02 F1 | 	add	local04, fp
261bc     34 1E 06 F1 | 	add	local01, #52
261c0     0F 13 02 F6 | 	mov	arg01, local01
261c4     34 1E 86 F1 | 	sub	local01, #52
261c8     BE 13 06 F1 | 	add	arg01, #446
261cc     11 15 02 F6 | 	mov	arg02, local03
261d0     04 14 66 F0 | 	shl	arg02, #4
261d4     0A 13 02 F1 | 	add	arg01, arg02
261d8     08 12 06 F1 | 	add	arg01, #8
261dc                 | ' {
261dc                 | ' 
261dc                 | ' 	return *((DWORD*)ptr);
261dc     09 FB 01 FB | 	rdlong	result1, arg01
261e0     14 4E 85 F1 | 	sub	fp, #20
261e4     12 FB 61 FC | 	wrlong	result1, local04
261e8     01 22 06 F1 | 	add	local03, #1
261ec     B4 FF 9F FD | 	jmp	#LR__3961
261f0                 | LR__3962
261f0                 | LR__3963
261f0     00 20 0E F2 | 	cmp	local02, #0 wz
261f4     10 25 02 56 |  if_ne	mov	local04, local02
261f8     01 24 86 51 |  if_ne	sub	local04, #1
261fc     00 24 06 A6 |  if_e	mov	local04, #0
26200     12 23 02 F6 | 	mov	local03, local04
26204                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
26204                 | ' 	}
26204                 | ' 	i = part ? part - 1 : 0;
26204                 | ' 	do {
26204                 | LR__3964
26204     11 25 02 F6 | 	mov	local04, local03
26208     02 24 66 F0 | 	shl	local04, #2
2620c     14 4E 05 F1 | 	add	fp, #20
26210     A7 24 02 F1 | 	add	local04, fp
26214     12 25 0A FB | 	rdlong	local04, local04 wz
26218     14 4E 85 F1 | 	sub	fp, #20
2621c     28 00 90 AD |  if_e	jmp	#LR__3965
26220     11 25 02 F6 | 	mov	local04, local03
26224     02 24 66 F0 | 	shl	local04, #2
26228     14 4E 05 F1 | 	add	fp, #20
2622c     A7 24 02 F1 | 	add	local04, fp
26230     12 15 02 FB | 	rdlong	arg02, local04
26234     0F 13 02 F6 | 	mov	arg01, local01
26238     14 4E 85 F1 | 	sub	fp, #20
2623c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
26240     FD 24 02 F6 | 	mov	local04, result1
26244     04 00 90 FD | 	jmp	#LR__3966
26248                 | LR__3965
26248     03 24 06 F6 | 	mov	local04, #3
2624c                 | LR__3966
2624c     12 27 02 F6 | 	mov	local05, local04
26250     00 20 0E F2 | 	cmp	local02, #0 wz
26254     02 26 16 A2 |  if_e	cmp	local05, #2 wc
26258     0C 00 90 8D |  if_c_and_z	jmp	#LR__3967
2625c     01 22 06 A1 |  if_e	add	local03, #1
26260     04 22 16 A2 |  if_e	cmp	local03, #4 wc
26264     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3964
26268                 | LR__3967
26268                 | ' 	return fmt;
26268     13 FB 01 F6 | 	mov	result1, local05
2626c                 | LR__3968
2626c     A7 F0 03 F6 | 	mov	ptra, fp
26270     B2 00 A0 FD | 	call	#popregs_
26274                 | _fatfs_cc_find_volume_ret
26274     2D 00 64 FD | 	ret
26278                 | 
26278                 | _fatfs_cc_mount_volume
26278     0B 4A 05 F6 | 	mov	COUNT_, #11
2627c     A8 00 A0 FD | 	call	#pushregs_
26280     0A 1F 02 F6 | 	mov	local01, arg02
26284     0B 21 02 F6 | 	mov	local02, arg03
26288     0F 01 68 FC | 	wrlong	#0, local01
2628c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
26290     FD 22 02 F6 | 	mov	local03, result1
26294     00 22 56 F2 | 	cmps	local03, #0 wc
26298     0B FA 05 C6 |  if_b	mov	result1, #11
2629c     3C 05 90 CD |  if_b	jmp	#LR__3980
262a0     11 17 02 F6 | 	mov	arg03, local03
262a4     02 16 66 F0 | 	shl	arg03, #2
262a8     F2 16 02 F1 | 	add	arg03, objptr
262ac     0B 25 0A FB | 	rdlong	local04, arg03 wz
262b0     0C FA 05 A6 |  if_e	mov	result1, #12
262b4     24 05 90 AD |  if_e	jmp	#LR__3980
262b8     0F 25 62 FC | 	wrlong	local04, local01
262bc     10 21 E2 F8 | 	getbyte	local02, local02, #0
262c0     FE 20 06 F5 | 	and	local02, #254
262c4     12 17 CA FA | 	rdbyte	arg03, local04 wz
262c8     4C 00 90 AD |  if_e	jmp	#LR__3971
262cc     01 24 06 F1 | 	add	local04, #1
262d0     12 13 CA FA | 	rdbyte	arg01, local04 wz
262d4     01 24 86 F1 | 	sub	local04, #1
262d8     01 FA 05 56 |  if_ne	mov	result1, #1
262dc                 | ' 
262dc                 | ' 	return Stat;
262dc     01 00 00 AF 
262e0     20 E4 05 A1 |  if_e	add	objptr, ##544
262e4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
262e8     01 00 00 AF 
262ec     20 E4 85 A1 |  if_e	sub	objptr, ##544
262f0     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
262f4     01 16 CE F7 | 	test	arg03, #1 wz
262f8     1C 00 90 5D |  if_ne	jmp	#LR__3970
262fc     00 20 0E F2 | 	cmp	local02, #0 wz
26300     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
26304     04 FA CD 57 |  if_ne	test	result1, #4 wz
26308                 | ' 				return FR_WRITE_PROTECTED;
26308     0A FA 05 56 |  if_ne	mov	result1, #10
2630c     CC 04 90 5D |  if_ne	jmp	#LR__3980
26310                 | ' 			}
26310                 | ' 			return FR_OK;
26310     00 FA 05 F6 | 	mov	result1, #0
26314     C4 04 90 FD | 	jmp	#LR__3980
26318                 | LR__3970
26318                 | LR__3971
26318     12 01 48 FC | 	wrbyte	#0, local04
2631c     01 24 06 F1 | 	add	local04, #1
26320     12 23 42 FC | 	wrbyte	local03, local04
26324     12 13 C2 FA | 	rdbyte	arg01, local04
26328     01 24 86 F1 | 	sub	local04, #1
2632c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
26330     FD 16 02 F6 | 	mov	arg03, result1
26334     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
26338     01 26 CE F7 | 	test	local05, #1 wz
2633c                 | ' 		return FR_NOT_READY;
2633c     03 FA 05 56 |  if_ne	mov	result1, #3
26340     98 04 90 5D |  if_ne	jmp	#LR__3980
26344     00 20 0E F2 | 	cmp	local02, #0 wz
26348     0B 27 02 56 |  if_ne	mov	local05, arg03
2634c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
26350     04 26 CE 57 |  if_ne	test	local05, #4 wz
26354                 | ' 		return FR_WRITE_PROTECTED;
26354     0A FA 05 56 |  if_ne	mov	result1, #10
26358     80 04 90 5D |  if_ne	jmp	#LR__3980
2635c     12 13 02 F6 | 	mov	arg01, local04
26360     00 14 06 F6 | 	mov	arg02, #0
26364     00 FE BF FD | 	call	#_fatfs_cc_find_volume
26368     FD 12 02 F6 | 	mov	arg01, result1
2636c     04 12 0E F2 | 	cmp	arg01, #4 wz
26370     01 FA 05 A6 |  if_e	mov	result1, #1
26374     64 04 90 AD |  if_e	jmp	#LR__3980
26378     02 12 16 F2 | 	cmp	arg01, #2 wc
2637c     0D FA 05 36 |  if_ae	mov	result1, #13
26380     58 04 90 3D |  if_ae	jmp	#LR__3980
26384     30 24 06 F1 | 	add	local04, #48
26388     12 29 02 FB | 	rdlong	local06, local04
2638c     04 24 06 F1 | 	add	local04, #4
26390     12 13 02 F6 | 	mov	arg01, local04
26394     34 24 86 F1 | 	sub	local04, #52
26398     0B 12 06 F1 | 	add	arg01, #11
2639c                 | ' {
2639c                 | ' 
2639c                 | ' 	return *((WORD*)ptr);
2639c     09 FB E1 FA | 	rdword	result1, arg01
263a0     01 00 00 FF 
263a4     00 FA 0D F2 | 	cmp	result1, ##512 wz
263a8     0D FA 05 56 |  if_ne	mov	result1, #13
263ac     2C 04 90 5D |  if_ne	jmp	#LR__3980
263b0     34 24 06 F1 | 	add	local04, #52
263b4     12 13 02 F6 | 	mov	arg01, local04
263b8     34 24 86 F1 | 	sub	local04, #52
263bc     16 12 06 F1 | 	add	arg01, #22
263c0                 | ' {
263c0                 | ' 
263c0                 | ' 	return *((WORD*)ptr);
263c0     09 FB E1 FA | 	rdword	result1, arg01
263c4     FD 2A 0A F6 | 	mov	local07, result1 wz
263c8     18 00 90 5D |  if_ne	jmp	#LR__3972
263cc     34 24 06 F1 | 	add	local04, #52
263d0     12 13 02 F6 | 	mov	arg01, local04
263d4     34 24 86 F1 | 	sub	local04, #52
263d8     24 12 06 F1 | 	add	arg01, #36
263dc                 | ' {
263dc                 | ' 
263dc                 | ' 	return *((DWORD*)ptr);
263dc     09 FB 01 FB | 	rdlong	result1, arg01
263e0     FD 2A 02 F6 | 	mov	local07, result1
263e4                 | LR__3972
263e4     1C 24 06 F1 | 	add	local04, #28
263e8     12 2B 62 FC | 	wrlong	local07, local04
263ec     28 24 06 F1 | 	add	local04, #40
263f0     12 27 C2 FA | 	rdbyte	local05, local04
263f4     42 24 86 F1 | 	sub	local04, #66
263f8     12 27 42 FC | 	wrbyte	local05, local04
263fc     12 27 C2 FA | 	rdbyte	local05, local04
26400     02 24 86 F1 | 	sub	local04, #2
26404     01 26 0E F2 | 	cmp	local05, #1 wz
26408     02 24 06 51 |  if_ne	add	local04, #2
2640c     12 27 C2 5A |  if_ne	rdbyte	local05, local04
26410     02 24 86 51 |  if_ne	sub	local04, #2
26414     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
26418     0D FA 05 56 |  if_ne	mov	result1, #13
2641c     BC 03 90 5D |  if_ne	jmp	#LR__3980
26420     02 24 06 F1 | 	add	local04, #2
26424     12 27 C2 FA | 	rdbyte	local05, local04
26428     13 2B 02 FD | 	qmul	local07, local05
2642c     3F 24 06 F1 | 	add	local04, #63
26430     12 27 C2 FA | 	rdbyte	local05, local04
26434     37 24 86 F1 | 	sub	local04, #55
26438     12 27 52 FC | 	wrword	local05, local04
2643c     12 27 EA FA | 	rdword	local05, local04 wz
26440     0A 24 86 F1 | 	sub	local04, #10
26444     18 2A 62 FD | 	getqx	local07
26448     20 00 90 AD |  if_e	jmp	#LR__3973
2644c     0A 24 06 F1 | 	add	local04, #10
26450     12 27 E2 FA | 	rdword	local05, local04
26454     13 23 32 F9 | 	getword	local03, local05, #0
26458     0A 24 86 F1 | 	sub	local04, #10
2645c     13 27 32 F9 | 	getword	local05, local05, #0
26460     01 26 86 F1 | 	sub	local05, #1
26464     13 23 CA F7 | 	test	local03, local05 wz
26468     08 00 90 AD |  if_e	jmp	#LR__3974
2646c                 | LR__3973
2646c     0D FA 05 F6 | 	mov	result1, #13
26470     68 03 90 FD | 	jmp	#LR__3980
26474                 | LR__3974
26474     34 24 06 F1 | 	add	local04, #52
26478     12 13 02 F6 | 	mov	arg01, local04
2647c     11 12 06 F1 | 	add	arg01, #17
26480                 | ' {
26480                 | ' 
26480                 | ' 	return *((WORD*)ptr);
26480     09 FB E1 FA | 	rdword	result1, arg01
26484     2C 24 86 F1 | 	sub	local04, #44
26488     12 FB 51 FC | 	wrword	result1, local04
2648c     12 27 E2 FA | 	rdword	local05, local04
26490     08 24 86 F1 | 	sub	local04, #8
26494     13 13 52 F6 | 	abs	arg01, local05 wc
26498     09 13 42 F8 | 	getnib	arg01, arg01, #0
2649c     09 13 8A F6 | 	negc	arg01, arg01 wz
264a0     0D FA 05 56 |  if_ne	mov	result1, #13
264a4     34 03 90 5D |  if_ne	jmp	#LR__3980
264a8     34 24 06 F1 | 	add	local04, #52
264ac     12 13 02 F6 | 	mov	arg01, local04
264b0     34 24 86 F1 | 	sub	local04, #52
264b4     13 12 06 F1 | 	add	arg01, #19
264b8                 | ' {
264b8                 | ' 
264b8                 | ' 	return *((WORD*)ptr);
264b8     09 FB E1 FA | 	rdword	result1, arg01
264bc     FD 2C 0A F6 | 	mov	local08, result1 wz
264c0     34 24 06 A1 |  if_e	add	local04, #52
264c4     12 13 02 A6 |  if_e	mov	arg01, local04
264c8     34 24 86 A1 |  if_e	sub	local04, #52
264cc     20 12 06 A1 |  if_e	add	arg01, #32
264d0                 | ' {
264d0                 | ' 
264d0                 | ' 	return *((DWORD*)ptr);
264d0     09 2D 02 AB |  if_e	rdlong	local08, arg01
264d4     34 24 06 F1 | 	add	local04, #52
264d8     12 13 02 F6 | 	mov	arg01, local04
264dc     34 24 86 F1 | 	sub	local04, #52
264e0     0E 12 06 F1 | 	add	arg01, #14
264e4                 | ' {
264e4                 | ' 
264e4                 | ' 	return *((WORD*)ptr);
264e4     09 FB E1 FA | 	rdword	result1, arg01
264e8     FD 12 02 F6 | 	mov	arg01, result1
264ec     09 27 02 F6 | 	mov	local05, arg01
264f0     0F 26 4E F7 | 	zerox	local05, #15 wz
264f4     0D FA 05 A6 |  if_e	mov	result1, #13
264f8     E0 02 90 AD |  if_e	jmp	#LR__3980
264fc     09 2F 32 F9 | 	getword	local09, arg01, #0
26500     15 2F 02 F1 | 	add	local09, local07
26504     08 24 06 F1 | 	add	local04, #8
26508     12 27 E2 FA | 	rdword	local05, local04
2650c     08 24 86 F1 | 	sub	local04, #8
26510     13 27 52 F6 | 	abs	local05, local05 wc
26514     04 26 46 F0 | 	shr	local05, #4
26518     13 2F 82 F3 | 	sumc	local09, local05
2651c     17 2D 12 F2 | 	cmp	local08, local09 wc
26520     0D FA 05 C6 |  if_b	mov	result1, #13
26524     B4 02 90 CD |  if_b	jmp	#LR__3980
26528     17 2D 82 F1 | 	sub	local08, local09
2652c     0A 24 06 F1 | 	add	local04, #10
26530     12 27 E2 FA | 	rdword	local05, local04
26534     13 2D 12 FD | 	qdiv	local08, local05
26538     0A 24 86 F1 | 	sub	local04, #10
2653c     18 26 62 FD | 	getqx	local05
26540     00 26 0E F2 | 	cmp	local05, #0 wz
26544     0D FA 05 A6 |  if_e	mov	result1, #13
26548     90 02 90 AD |  if_e	jmp	#LR__3980
2654c     00 30 06 F6 | 	mov	local10, #0
26550     FF FF 07 FF 
26554     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
26558     03 30 06 C6 |  if_b	mov	local10, #3
2655c     7F 00 00 FF 
26560     F6 27 16 F2 | 	cmp	local05, ##65526 wc
26564     02 30 06 C6 |  if_b	mov	local10, #2
26568     07 00 00 FF 
2656c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
26570     01 30 06 C6 |  if_b	mov	local10, #1
26574     00 30 0E F2 | 	cmp	local10, #0 wz
26578     0D FA 05 A6 |  if_e	mov	result1, #13
2657c     5C 02 90 AD |  if_e	jmp	#LR__3980
26580     02 26 06 F1 | 	add	local05, #2
26584     18 24 06 F1 | 	add	local04, #24
26588     12 27 62 FC | 	wrlong	local05, local04
2658c     08 24 06 F1 | 	add	local04, #8
26590     12 29 62 FC | 	wrlong	local06, local04
26594     14 27 02 F6 | 	mov	local05, local06
26598     09 13 32 F9 | 	getword	arg01, arg01, #0
2659c     09 27 02 F1 | 	add	local05, arg01
265a0     04 24 06 F1 | 	add	local04, #4
265a4     12 27 62 FC | 	wrlong	local05, local04
265a8     14 27 02 F6 | 	mov	local05, local06
265ac     17 27 02 F1 | 	add	local05, local09
265b0     08 24 06 F1 | 	add	local04, #8
265b4     12 27 62 FC | 	wrlong	local05, local04
265b8     2C 24 86 F1 | 	sub	local04, #44
265bc     03 30 0E F2 | 	cmp	local10, #3 wz
265c0     5C 00 90 5D |  if_ne	jmp	#LR__3975
265c4     34 24 06 F1 | 	add	local04, #52
265c8     12 13 02 F6 | 	mov	arg01, local04
265cc     34 24 86 F1 | 	sub	local04, #52
265d0     2A 12 06 F1 | 	add	arg01, #42
265d4                 | ' {
265d4                 | ' 
265d4                 | ' 	return *((WORD*)ptr);
265d4     09 FB E9 FA | 	rdword	result1, arg01 wz
265d8     0D FA 05 56 |  if_ne	mov	result1, #13
265dc     FC 01 90 5D |  if_ne	jmp	#LR__3980
265e0     08 24 06 F1 | 	add	local04, #8
265e4     12 27 EA FA | 	rdword	local05, local04 wz
265e8     08 24 86 F1 | 	sub	local04, #8
265ec     0D FA 05 56 |  if_ne	mov	result1, #13
265f0     E8 01 90 5D |  if_ne	jmp	#LR__3980
265f4     34 24 06 F1 | 	add	local04, #52
265f8     12 13 02 F6 | 	mov	arg01, local04
265fc     2C 12 06 F1 | 	add	arg01, #44
26600                 | ' {
26600                 | ' 
26600                 | ' 	return *((DWORD*)ptr);
26600     09 FB 01 FB | 	rdlong	result1, arg01
26604     0C 24 86 F1 | 	sub	local04, #12
26608     12 FB 61 FC | 	wrlong	result1, local04
2660c     10 24 86 F1 | 	sub	local04, #16
26610     12 33 02 FB | 	rdlong	local11, local04
26614     18 24 86 F1 | 	sub	local04, #24
26618     02 32 66 F0 | 	shl	local11, #2
2661c     6C 00 90 FD | 	jmp	#LR__3977
26620                 | LR__3975
26620     08 24 06 F1 | 	add	local04, #8
26624     12 27 EA FA | 	rdword	local05, local04 wz
26628     08 24 86 F1 | 	sub	local04, #8
2662c     0D FA 05 A6 |  if_e	mov	result1, #13
26630     A8 01 90 AD |  if_e	jmp	#LR__3980
26634     24 24 06 F1 | 	add	local04, #36
26638     12 27 02 FB | 	rdlong	local05, local04
2663c     15 27 02 F1 | 	add	local05, local07
26640     04 24 06 F1 | 	add	local04, #4
26644     12 27 62 FC | 	wrlong	local05, local04
26648     28 24 86 F1 | 	sub	local04, #40
2664c     02 30 0E F2 | 	cmp	local10, #2 wz
26650     18 24 06 A1 |  if_e	add	local04, #24
26654     12 27 02 AB |  if_e	rdlong	local05, local04
26658     18 24 86 A1 |  if_e	sub	local04, #24
2665c     01 26 66 A0 |  if_e	shl	local05, #1
26660     24 00 90 AD |  if_e	jmp	#LR__3976
26664     18 24 06 F1 | 	add	local04, #24
26668     12 33 02 FB | 	rdlong	local11, local04
2666c     19 27 02 F6 | 	mov	local05, local11
26670     01 26 66 F0 | 	shl	local05, #1
26674     19 27 02 F1 | 	add	local05, local11
26678     01 26 46 F0 | 	shr	local05, #1
2667c     18 24 86 F1 | 	sub	local04, #24
26680     01 32 06 F5 | 	and	local11, #1
26684     19 27 02 F1 | 	add	local05, local11
26688                 | LR__3976
26688     13 33 02 F6 | 	mov	local11, local05
2668c                 | LR__3977
2668c     FF 33 06 F1 | 	add	local11, #511
26690     09 32 46 F0 | 	shr	local11, #9
26694     1C 24 06 F1 | 	add	local04, #28
26698     12 17 02 FB | 	rdlong	arg03, local04
2669c     1C 24 86 F1 | 	sub	local04, #28
266a0     19 17 12 F2 | 	cmp	arg03, local11 wc
266a4     0D FA 05 C6 |  if_b	mov	result1, #13
266a8     30 01 90 CD |  if_b	jmp	#LR__3980
266ac     14 24 06 F1 | 	add	local04, #20
266b0     FF FF FF FF 
266b4     12 FF 6B FC | 	wrlong	##-1, local04
266b8     04 24 86 F1 | 	sub	local04, #4
266bc     FF FF FF FF 
266c0     12 FF 6B FC | 	wrlong	##-1, local04
266c4     0C 24 86 F1 | 	sub	local04, #12
266c8     12 01 49 FC | 	wrbyte	#128, local04
266cc     04 24 86 F1 | 	sub	local04, #4
266d0     03 30 0E F2 | 	cmp	local10, #3 wz
266d4     D0 00 90 5D |  if_ne	jmp	#LR__3979
266d8     34 24 06 F1 | 	add	local04, #52
266dc     12 13 02 F6 | 	mov	arg01, local04
266e0     34 24 86 F1 | 	sub	local04, #52
266e4     30 12 06 F1 | 	add	arg01, #48
266e8                 | ' {
266e8                 | ' 
266e8                 | ' 	return *((WORD*)ptr);
266e8     09 FB E1 FA | 	rdword	result1, arg01
266ec     FD 26 32 F9 | 	getword	local05, result1, #0
266f0     01 26 0E F2 | 	cmp	local05, #1 wz
266f4     B0 00 90 5D |  if_ne	jmp	#LR__3979
266f8     01 28 06 F1 | 	add	local06, #1
266fc     12 13 02 F6 | 	mov	arg01, local04
26700     14 15 02 F6 | 	mov	arg02, local06
26704     CC CD BF FD | 	call	#_fatfs_cc_move_window
26708     00 FA 0D F2 | 	cmp	result1, #0 wz
2670c     98 00 90 5D |  if_ne	jmp	#LR__3979
26710     04 24 06 F1 | 	add	local04, #4
26714     12 01 48 FC | 	wrbyte	#0, local04
26718     30 24 06 F1 | 	add	local04, #48
2671c     12 13 02 F6 | 	mov	arg01, local04
26720     34 24 86 F1 | 	sub	local04, #52
26724     FE 13 06 F1 | 	add	arg01, #510
26728                 | ' {
26728                 | ' 
26728                 | ' 	return *((WORD*)ptr);
26728     09 FB E1 FA | 	rdword	result1, arg01
2672c     FD 26 32 F9 | 	getword	local05, result1, #0
26730     55 00 00 FF 
26734     55 26 0E F2 | 	cmp	local05, ##43605 wz
26738     34 24 06 A1 |  if_e	add	local04, #52
2673c     12 13 02 A6 |  if_e	mov	arg01, local04
26740     34 24 86 A1 |  if_e	sub	local04, #52
26744                 | ' {
26744                 | ' 
26744                 | ' 	return *((DWORD*)ptr);
26744     09 FB 01 AB |  if_e	rdlong	result1, arg01
26748     A9 B0 20 AF 
2674c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
26750     54 00 90 5D |  if_ne	jmp	#LR__3978
26754     34 24 06 F1 | 	add	local04, #52
26758     12 13 02 F6 | 	mov	arg01, local04
2675c     34 24 86 F1 | 	sub	local04, #52
26760     E4 13 06 F1 | 	add	arg01, #484
26764                 | ' {
26764                 | ' 
26764                 | ' 	return *((DWORD*)ptr);
26764     09 FB 01 FB | 	rdlong	result1, arg01
26768     B9 A0 30 FF 
2676c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
26770     34 00 90 5D |  if_ne	jmp	#LR__3978
26774     34 24 06 F1 | 	add	local04, #52
26778     12 13 02 F6 | 	mov	arg01, local04
2677c     E8 13 06 F1 | 	add	arg01, #488
26780                 | ' {
26780                 | ' 
26780                 | ' 	return *((DWORD*)ptr);
26780     09 FB 01 FB | 	rdlong	result1, arg01
26784     20 24 86 F1 | 	sub	local04, #32
26788     12 FB 61 FC | 	wrlong	result1, local04
2678c     20 24 06 F1 | 	add	local04, #32
26790     12 13 02 F6 | 	mov	arg01, local04
26794     EC 13 06 F1 | 	add	arg01, #492
26798                 | ' {
26798                 | ' 
26798                 | ' 	return *((DWORD*)ptr);
26798     09 FB 01 FB | 	rdlong	result1, arg01
2679c     24 24 86 F1 | 	sub	local04, #36
267a0     12 FB 61 FC | 	wrlong	result1, local04
267a4     10 24 86 F1 | 	sub	local04, #16
267a8                 | LR__3978
267a8                 | LR__3979
267a8     12 31 42 FC | 	wrbyte	local10, local04
267ac     04 E4 05 F1 | 	add	objptr, #4
267b0     F2 26 E2 FA | 	rdword	local05, objptr
267b4     01 26 06 F1 | 	add	local05, #1
267b8     F2 26 52 FC | 	wrword	local05, objptr
267bc     F2 32 E2 FA | 	rdword	local11, objptr
267c0     06 24 06 F1 | 	add	local04, #6
267c4     12 33 52 FC | 	wrword	local11, local04
267c8     04 E4 05 F1 | 	add	objptr, #4
267cc     06 24 06 F1 | 	add	local04, #6
267d0     12 E5 61 FC | 	wrlong	objptr, local04
267d4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
267d4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
267d4                 | ' 			{
267d4                 | ' 
267d4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
267d4                 | ' 
267d4                 | ' 
267d4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
267d4                 | ' 
267d4                 | ' 			}
267d4                 | ' 		}
267d4                 | ' 
267d4                 | ' 
267d4                 | ' 	}
267d4                 | ' 
267d4                 | ' 	fs->fs_type = (BYTE)fmt;
267d4                 | ' 	fs->id = ++Fsid;
267d4                 | ' 
267d4                 | ' 	fs->lfnbuf = LfnBuf;
267d4                 | ' #line 3567 "ff.c"
267d4                 | ' 	return FR_OK;
267d4     00 FA 05 F6 | 	mov	result1, #0
267d8     08 E4 85 F1 | 	sub	objptr, #8
267dc                 | LR__3980
267dc     A7 F0 03 F6 | 	mov	ptra, fp
267e0     B2 00 A0 FD | 	call	#popregs_
267e4                 | _fatfs_cc_mount_volume_ret
267e4     2D 00 64 FD | 	ret
267e8                 | 
267e8                 | _fatfs_cc_validate
267e8     09 01 0A F6 | 	mov	_var01, arg01 wz
267ec     09 02 06 F6 | 	mov	_var02, #9
267f0     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
267f4     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
267f8     50 00 90 AD |  if_e	jmp	#LR__3990
267fc     04 00 06 F1 | 	add	_var01, #4
26800     00 07 E2 FA | 	rdword	_var04, _var01
26804     04 00 86 F1 | 	sub	_var01, #4
26808     00 13 02 FB | 	rdlong	arg01, _var01
2680c     06 12 06 F1 | 	add	arg01, #6
26810     09 FB E1 FA | 	rdword	result1, arg01
26814     FD 06 0A F2 | 	cmp	_var04, result1 wz
26818     30 00 90 5D |  if_ne	jmp	#LR__3990
2681c     00 07 02 FB | 	rdlong	_var04, _var01
26820     01 06 06 F1 | 	add	_var04, #1
26824     03 13 CA FA | 	rdbyte	arg01, _var04 wz
26828     01 FA 05 56 |  if_ne	mov	result1, #1
2682c                 | ' 
2682c                 | ' 	return Stat;
2682c     01 00 00 AF 
26830     20 E4 05 A1 |  if_e	add	objptr, ##544
26834     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
26838     01 00 00 AF 
2683c     20 E4 85 A1 |  if_e	sub	objptr, ##544
26840     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
26844     01 04 CE F7 | 	test	_var03, #1 wz
26848     00 02 06 A6 |  if_e	mov	_var02, #0
2684c                 | LR__3990
2684c     00 02 0E F2 | 	cmp	_var02, #0 wz
26850     00 05 02 AB |  if_e	rdlong	_var03, _var01
26854     00 04 06 56 |  if_ne	mov	_var03, #0
26858     0A 05 62 FC | 	wrlong	_var03, arg02
2685c                 | ' 			res = FR_OK;
2685c                 | ' 		}
2685c                 | ' 
2685c                 | ' 	}
2685c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2685c                 | ' 	return res;
2685c     01 FB 01 F6 | 	mov	result1, _var02
26860                 | _fatfs_cc_validate_ret
26860     2D 00 64 FD | 	ret
26864                 | 
26864                 | _fatfs_cc_f_mount
26864     01 4A 05 F6 | 	mov	COUNT_, #1
26868     A8 00 A0 FD | 	call	#pushregs_
2686c     20 F0 07 F1 | 	add	ptra, #32
26870     04 4E 05 F1 | 	add	fp, #4
26874     A7 12 62 FC | 	wrlong	arg01, fp
26878     04 4E 05 F1 | 	add	fp, #4
2687c     A7 14 62 FC | 	wrlong	arg02, fp
26880     04 4E 05 F1 | 	add	fp, #4
26884     A7 16 42 FC | 	wrbyte	arg03, fp
26888     04 4E 85 F1 | 	sub	fp, #4
2688c     A7 16 02 FB | 	rdlong	arg03, fp
26890     14 4E 05 F1 | 	add	fp, #20
26894     A7 16 62 FC | 	wrlong	arg03, fp
26898     A7 12 02 F6 | 	mov	arg01, fp
2689c     1C 4E 85 F1 | 	sub	fp, #28
268a0     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
268a4     14 4E 05 F1 | 	add	fp, #20
268a8     A7 FA 61 FC | 	wrlong	result1, fp
268ac     14 4E 85 F1 | 	sub	fp, #20
268b0     00 FA 55 F2 | 	cmps	result1, #0 wc
268b4     0B FA 05 C6 |  if_b	mov	result1, #11
268b8     C0 00 90 CD |  if_b	jmp	#LR__4001
268bc     14 4E 05 F1 | 	add	fp, #20
268c0     A7 16 02 FB | 	rdlong	arg03, fp
268c4     02 16 66 F0 | 	shl	arg03, #2
268c8     F2 16 02 F1 | 	add	arg03, objptr
268cc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
268d0     04 4E 85 F1 | 	sub	fp, #4
268d4     A7 16 62 FC | 	wrlong	arg03, fp
268d8     10 4E 85 F1 | 	sub	fp, #16
268dc     28 00 90 AD |  if_e	jmp	#LR__4000
268e0     10 4E 05 F1 | 	add	fp, #16
268e4     A7 16 02 FB | 	rdlong	arg03, fp
268e8     10 4E 85 F1 | 	sub	fp, #16
268ec     01 16 06 F1 | 	add	arg03, #1
268f0     0B 13 C2 FA | 	rdbyte	arg01, arg03
268f4     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
268f8     10 4E 05 F1 | 	add	fp, #16
268fc     A7 16 02 FB | 	rdlong	arg03, fp
26900     10 4E 85 F1 | 	sub	fp, #16
26904     0B 01 48 FC | 	wrbyte	#0, arg03
26908                 | LR__4000
26908     04 4E 05 F1 | 	add	fp, #4
2690c     A7 1E 0A FB | 	rdlong	local01, fp wz
26910     04 4E 85 F1 | 	sub	fp, #4
26914     04 4E 05 51 |  if_ne	add	fp, #4
26918     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2691c     04 4E 85 51 |  if_ne	sub	fp, #4
26920     0F 01 48 5C |  if_ne	wrbyte	#0, local01
26924     14 4E 05 F1 | 	add	fp, #20
26928     A7 1E 02 FB | 	rdlong	local01, fp
2692c     02 1E 66 F0 | 	shl	local01, #2
26930     F2 1E 02 F1 | 	add	local01, objptr
26934     10 4E 85 F1 | 	sub	fp, #16
26938     A7 16 02 FB | 	rdlong	arg03, fp
2693c     0F 17 62 FC | 	wrlong	arg03, local01
26940     08 4E 05 F1 | 	add	fp, #8
26944     A7 1E CA FA | 	rdbyte	local01, fp wz
26948     0C 4E 85 F1 | 	sub	fp, #12
2694c     00 FA 05 A6 |  if_e	mov	result1, #0
26950     28 00 90 AD |  if_e	jmp	#LR__4001
26954     08 4E 05 F1 | 	add	fp, #8
26958     A7 12 02 F6 | 	mov	arg01, fp
2695c     04 4E 85 F1 | 	sub	fp, #4
26960     A7 14 02 F6 | 	mov	arg02, fp
26964     04 4E 85 F1 | 	sub	fp, #4
26968     00 16 06 F6 | 	mov	arg03, #0
2696c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
26970     18 4E 05 F1 | 	add	fp, #24
26974     A7 FA 61 FC | 	wrlong	result1, fp
26978                 | ' 
26978                 | ' 	res = mount_volume(&path, &fs, 0);
26978                 | ' 	return res ;
26978     18 4E 85 F1 | 	sub	fp, #24
2697c                 | LR__4001
2697c     A7 F0 03 F6 | 	mov	ptra, fp
26980     B2 00 A0 FD | 	call	#popregs_
26984                 | _fatfs_cc_f_mount_ret
26984     2D 00 64 FD | 	ret
26988                 | 
26988                 | _fatfs_cc_f_open
26988     02 4A 05 F6 | 	mov	COUNT_, #2
2698c     A8 00 A0 FD | 	call	#pushregs_
26990     60 F0 07 F1 | 	add	ptra, #96
26994     04 4E 05 F1 | 	add	fp, #4
26998     A7 12 62 FC | 	wrlong	arg01, fp
2699c     04 4E 05 F1 | 	add	fp, #4
269a0     A7 14 62 FC | 	wrlong	arg02, fp
269a4     04 4E 05 F1 | 	add	fp, #4
269a8     A7 16 42 FC | 	wrbyte	arg03, fp
269ac     08 4E 85 F1 | 	sub	fp, #8
269b0     A7 18 0A FB | 	rdlong	arg04, fp wz
269b4     04 4E 85 F1 | 	sub	fp, #4
269b8     09 FA 05 A6 |  if_e	mov	result1, #9
269bc     98 06 90 AD |  if_e	jmp	#LR__4027
269c0     0C 4E 05 F1 | 	add	fp, #12
269c4     A7 18 C2 FA | 	rdbyte	arg04, fp
269c8     3F 18 06 F5 | 	and	arg04, #63
269cc     A7 18 42 FC | 	wrbyte	arg04, fp
269d0     04 4E 85 F1 | 	sub	fp, #4
269d4     A7 12 02 F6 | 	mov	arg01, fp
269d8     3C 4E 05 F1 | 	add	fp, #60
269dc     A7 14 02 F6 | 	mov	arg02, fp
269e0     38 4E 85 F1 | 	sub	fp, #56
269e4     A7 16 C2 FA | 	rdbyte	arg03, fp
269e8     0C 4E 85 F1 | 	sub	fp, #12
269ec     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
269f0     10 4E 05 F1 | 	add	fp, #16
269f4     A7 FA 61 FC | 	wrlong	result1, fp
269f8     10 4E 85 F1 | 	sub	fp, #16
269fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26a00     2C 06 90 5D |  if_ne	jmp	#LR__4026
26a04     44 4E 05 F1 | 	add	fp, #68
26a08     A7 18 02 FB | 	rdlong	arg04, fp
26a0c     30 4E 85 F1 | 	sub	fp, #48
26a10     A7 18 62 FC | 	wrlong	arg04, fp
26a14     A7 12 02 F6 | 	mov	arg01, fp
26a18     0C 4E 85 F1 | 	sub	fp, #12
26a1c     A7 1E 02 FB | 	rdlong	local01, fp
26a20     08 4E 85 F1 | 	sub	fp, #8
26a24     0F 15 02 F6 | 	mov	arg02, local01
26a28     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
26a2c     10 4E 05 F1 | 	add	fp, #16
26a30     A7 FA 61 FC | 	wrlong	result1, fp
26a34     10 4E 85 F1 | 	sub	fp, #16
26a38     00 FA 0D F2 | 	cmp	result1, #0 wz
26a3c     1C 00 90 5D |  if_ne	jmp	#LR__4010
26a40     3F 4E 05 F1 | 	add	fp, #63
26a44     A7 18 C2 FA | 	rdbyte	arg04, fp
26a48     3F 4E 85 F1 | 	sub	fp, #63
26a4c     80 18 CE F7 | 	test	arg04, #128 wz
26a50     10 4E 05 51 |  if_ne	add	fp, #16
26a54     A7 0C 68 5C |  if_ne	wrlong	#6, fp
26a58     10 4E 85 51 |  if_ne	sub	fp, #16
26a5c                 | LR__4010
26a5c     0C 4E 05 F1 | 	add	fp, #12
26a60     A7 18 C2 FA | 	rdbyte	arg04, fp
26a64     0C 4E 85 F1 | 	sub	fp, #12
26a68     1C 18 CE F7 | 	test	arg04, #28 wz
26a6c     F0 01 90 AD |  if_e	jmp	#LR__4015
26a70     10 4E 05 F1 | 	add	fp, #16
26a74     A7 1E 0A FB | 	rdlong	local01, fp wz
26a78     10 4E 85 F1 | 	sub	fp, #16
26a7c     48 00 90 AD |  if_e	jmp	#LR__4012
26a80     10 4E 05 F1 | 	add	fp, #16
26a84     A7 18 02 FB | 	rdlong	arg04, fp
26a88     10 4E 85 F1 | 	sub	fp, #16
26a8c     04 18 0E F2 | 	cmp	arg04, #4 wz
26a90     1C 00 90 5D |  if_ne	jmp	#LR__4011
26a94     14 4E 05 F1 | 	add	fp, #20
26a98     A7 12 02 F6 | 	mov	arg01, fp
26a9c     14 4E 85 F1 | 	sub	fp, #20
26aa0     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
26aa4     10 4E 05 F1 | 	add	fp, #16
26aa8     A7 FA 61 FC | 	wrlong	result1, fp
26aac     10 4E 85 F1 | 	sub	fp, #16
26ab0                 | LR__4011
26ab0     0C 4E 05 F1 | 	add	fp, #12
26ab4     A7 1E C2 FA | 	rdbyte	local01, fp
26ab8     08 1E 46 F5 | 	or	local01, #8
26abc     A7 1E 42 FC | 	wrbyte	local01, fp
26ac0     0C 4E 85 F1 | 	sub	fp, #12
26ac4     3C 00 90 FD | 	jmp	#LR__4014
26ac8                 | LR__4012
26ac8     1A 4E 05 F1 | 	add	fp, #26
26acc     A7 1E C2 FA | 	rdbyte	local01, fp
26ad0     1A 4E 85 F1 | 	sub	fp, #26
26ad4     11 1E CE F7 | 	test	local01, #17 wz
26ad8     10 4E 05 51 |  if_ne	add	fp, #16
26adc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
26ae0     10 4E 85 51 |  if_ne	sub	fp, #16
26ae4     1C 00 90 5D |  if_ne	jmp	#LR__4013
26ae8     0C 4E 05 F1 | 	add	fp, #12
26aec     A7 1E C2 FA | 	rdbyte	local01, fp
26af0     0C 4E 85 F1 | 	sub	fp, #12
26af4     04 1E CE F7 | 	test	local01, #4 wz
26af8     10 4E 05 51 |  if_ne	add	fp, #16
26afc     A7 10 68 5C |  if_ne	wrlong	#8, fp
26b00     10 4E 85 51 |  if_ne	sub	fp, #16
26b04                 | LR__4013
26b04                 | LR__4014
26b04     10 4E 05 F1 | 	add	fp, #16
26b08     A7 1E 0A FB | 	rdlong	local01, fp wz
26b0c     10 4E 85 F1 | 	sub	fp, #16
26b10     A8 01 90 5D |  if_ne	jmp	#LR__4018
26b14     0C 4E 05 F1 | 	add	fp, #12
26b18     A7 1E C2 FA | 	rdbyte	local01, fp
26b1c     0C 4E 85 F1 | 	sub	fp, #12
26b20     08 1E CE F7 | 	test	local01, #8 wz
26b24     94 01 90 AD |  if_e	jmp	#LR__4018
26b28     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
26b2c     54 4E 05 F1 | 	add	fp, #84
26b30     A7 FA 61 FC | 	wrlong	result1, fp
26b34     24 4E 85 F1 | 	sub	fp, #36
26b38     A7 12 02 FB | 	rdlong	arg01, fp
26b3c     0E 12 06 F1 | 	add	arg01, #14
26b40     09 FB 61 FC | 	wrlong	result1, arg01
26b44     A7 12 02 FB | 	rdlong	arg01, fp
26b48     16 12 06 F1 | 	add	arg01, #22
26b4c     24 4E 05 F1 | 	add	fp, #36
26b50     A7 14 02 FB | 	rdlong	arg02, fp
26b54     09 15 62 FC | 	wrlong	arg02, arg01
26b58     10 4E 85 F1 | 	sub	fp, #16
26b5c     A7 12 02 FB | 	rdlong	arg01, fp
26b60     14 4E 85 F1 | 	sub	fp, #20
26b64     A7 14 02 FB | 	rdlong	arg02, fp
26b68     30 4E 85 F1 | 	sub	fp, #48
26b6c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
26b70     48 4E 05 F1 | 	add	fp, #72
26b74     A7 FA 61 FC | 	wrlong	result1, fp
26b78     18 4E 85 F1 | 	sub	fp, #24
26b7c     A7 1E 02 FB | 	rdlong	local01, fp
26b80     0B 1E 06 F1 | 	add	local01, #11
26b84     0F 41 48 FC | 	wrbyte	#32, local01
26b88     14 4E 05 F1 | 	add	fp, #20
26b8c     A7 12 02 FB | 	rdlong	arg01, fp
26b90     14 4E 85 F1 | 	sub	fp, #20
26b94     A7 14 02 FB | 	rdlong	arg02, fp
26b98     30 4E 85 F1 | 	sub	fp, #48
26b9c     00 16 06 F6 | 	mov	arg03, #0
26ba0     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
26ba4     30 4E 05 F1 | 	add	fp, #48
26ba8     A7 12 02 FB | 	rdlong	arg01, fp
26bac     1C 12 06 F1 | 	add	arg01, #28
26bb0     09 01 68 FC | 	wrlong	#0, arg01
26bb4     14 4E 05 F1 | 	add	fp, #20
26bb8     A7 1E 02 FB | 	rdlong	local01, fp
26bbc     03 1E 06 F1 | 	add	local01, #3
26bc0     0F 03 48 FC | 	wrbyte	#1, local01
26bc4     04 4E 05 F1 | 	add	fp, #4
26bc8     A7 1E 0A FB | 	rdlong	local01, fp wz
26bcc     48 4E 85 F1 | 	sub	fp, #72
26bd0     E8 00 90 AD |  if_e	jmp	#LR__4018
26bd4     44 4E 05 F1 | 	add	fp, #68
26bd8     A7 1E 02 FB | 	rdlong	local01, fp
26bdc     30 1E 06 F1 | 	add	local01, #48
26be0     0F 1F 02 FB | 	rdlong	local01, local01
26be4     14 4E 05 F1 | 	add	fp, #20
26be8     A7 1E 62 FC | 	wrlong	local01, fp
26bec     44 4E 85 F1 | 	sub	fp, #68
26bf0     A7 12 02 F6 | 	mov	arg01, fp
26bf4     34 4E 05 F1 | 	add	fp, #52
26bf8     A7 14 02 FB | 	rdlong	arg02, fp
26bfc     48 4E 85 F1 | 	sub	fp, #72
26c00     00 16 06 F6 | 	mov	arg03, #0
26c04     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
26c08     10 4E 05 F1 | 	add	fp, #16
26c0c     A7 FA 61 FC | 	wrlong	result1, fp
26c10     10 4E 85 F1 | 	sub	fp, #16
26c14     00 FA 0D F2 | 	cmp	result1, #0 wz
26c18     A0 00 90 5D |  if_ne	jmp	#LR__4018
26c1c     44 4E 05 F1 | 	add	fp, #68
26c20     A7 12 02 FB | 	rdlong	arg01, fp
26c24     14 4E 05 F1 | 	add	fp, #20
26c28     A7 14 02 FB | 	rdlong	arg02, fp
26c2c     58 4E 85 F1 | 	sub	fp, #88
26c30     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
26c34     10 4E 05 F1 | 	add	fp, #16
26c38     A7 FA 61 FC | 	wrlong	result1, fp
26c3c     34 4E 05 F1 | 	add	fp, #52
26c40     A7 18 02 FB | 	rdlong	arg04, fp
26c44     04 4E 05 F1 | 	add	fp, #4
26c48     A7 1E 02 FB | 	rdlong	local01, fp
26c4c     48 4E 85 F1 | 	sub	fp, #72
26c50     01 1E 86 F1 | 	sub	local01, #1
26c54     10 18 06 F1 | 	add	arg04, #16
26c58     0C 1F 62 FC | 	wrlong	local01, arg04
26c5c     5C 00 90 FD | 	jmp	#LR__4018
26c60                 | LR__4015
26c60     10 4E 05 F1 | 	add	fp, #16
26c64     A7 18 0A FB | 	rdlong	arg04, fp wz
26c68     10 4E 85 F1 | 	sub	fp, #16
26c6c     4C 00 90 5D |  if_ne	jmp	#LR__4017
26c70     1A 4E 05 F1 | 	add	fp, #26
26c74     A7 18 C2 FA | 	rdbyte	arg04, fp
26c78     1A 4E 85 F1 | 	sub	fp, #26
26c7c     10 18 CE F7 | 	test	arg04, #16 wz
26c80     10 4E 05 51 |  if_ne	add	fp, #16
26c84     A7 08 68 5C |  if_ne	wrlong	#4, fp
26c88     10 4E 85 51 |  if_ne	sub	fp, #16
26c8c     2C 00 90 5D |  if_ne	jmp	#LR__4016
26c90     0C 4E 05 F1 | 	add	fp, #12
26c94     A7 18 C2 FA | 	rdbyte	arg04, fp
26c98     0C 4E 85 F1 | 	sub	fp, #12
26c9c     02 18 CE F7 | 	test	arg04, #2 wz
26ca0     1A 4E 05 51 |  if_ne	add	fp, #26
26ca4     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
26ca8     1A 4E 85 51 |  if_ne	sub	fp, #26
26cac     01 1E CE 57 |  if_ne	test	local01, #1 wz
26cb0     10 4E 05 51 |  if_ne	add	fp, #16
26cb4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
26cb8     10 4E 85 51 |  if_ne	sub	fp, #16
26cbc                 | LR__4016
26cbc                 | LR__4017
26cbc                 | LR__4018
26cbc     10 4E 05 F1 | 	add	fp, #16
26cc0     A7 1E 0A FB | 	rdlong	local01, fp wz
26cc4     10 4E 85 F1 | 	sub	fp, #16
26cc8     60 00 90 5D |  if_ne	jmp	#LR__4019
26ccc     0C 4E 05 F1 | 	add	fp, #12
26cd0     A7 20 C2 FA | 	rdbyte	local02, fp
26cd4     0C 4E 85 F1 | 	sub	fp, #12
26cd8     08 20 CE F7 | 	test	local02, #8 wz
26cdc     0C 4E 05 51 |  if_ne	add	fp, #12
26ce0     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
26ce4     40 20 46 55 |  if_ne	or	local02, #64
26ce8     A7 20 42 5C |  if_ne	wrbyte	local02, fp
26cec     0C 4E 85 51 |  if_ne	sub	fp, #12
26cf0     04 4E 05 F1 | 	add	fp, #4
26cf4     A7 20 02 FB | 	rdlong	local02, fp
26cf8     40 4E 05 F1 | 	add	fp, #64
26cfc     A7 1E 02 FB | 	rdlong	local01, fp
26d00     30 1E 06 F1 | 	add	local01, #48
26d04     0F 1F 02 FB | 	rdlong	local01, local01
26d08     20 20 06 F1 | 	add	local02, #32
26d0c     10 1F 62 FC | 	wrlong	local01, local02
26d10     40 4E 85 F1 | 	sub	fp, #64
26d14     A7 20 02 FB | 	rdlong	local02, fp
26d18     2C 4E 05 F1 | 	add	fp, #44
26d1c     A7 1E 02 FB | 	rdlong	local01, fp
26d20     30 4E 85 F1 | 	sub	fp, #48
26d24     24 20 06 F1 | 	add	local02, #36
26d28     10 1F 62 FC | 	wrlong	local01, local02
26d2c                 | LR__4019
26d2c     10 4E 05 F1 | 	add	fp, #16
26d30     A7 20 0A FB | 	rdlong	local02, fp wz
26d34     10 4E 85 F1 | 	sub	fp, #16
26d38     F4 02 90 5D |  if_ne	jmp	#LR__4025
26d3c     04 4E 05 F1 | 	add	fp, #4
26d40     A7 20 02 FB | 	rdlong	local02, fp
26d44     40 4E 05 F1 | 	add	fp, #64
26d48     A7 12 02 FB | 	rdlong	arg01, fp
26d4c     14 4E 85 F1 | 	sub	fp, #20
26d50     A7 14 02 FB | 	rdlong	arg02, fp
26d54     30 4E 85 F1 | 	sub	fp, #48
26d58     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
26d5c     08 20 06 F1 | 	add	local02, #8
26d60     10 FB 61 FC | 	wrlong	result1, local02
26d64     04 4E 05 F1 | 	add	fp, #4
26d68     A7 20 02 FB | 	rdlong	local02, fp
26d6c     2C 4E 05 F1 | 	add	fp, #44
26d70     A7 12 02 FB | 	rdlong	arg01, fp
26d74     1C 12 06 F1 | 	add	arg01, #28
26d78                 | ' {
26d78                 | ' 
26d78                 | ' 	return *((DWORD*)ptr);
26d78     09 FB 01 FB | 	rdlong	result1, arg01
26d7c     0C 20 06 F1 | 	add	local02, #12
26d80     10 FB 61 FC | 	wrlong	result1, local02
26d84     2C 4E 85 F1 | 	sub	fp, #44
26d88     A7 20 02 FB | 	rdlong	local02, fp
26d8c     40 4E 05 F1 | 	add	fp, #64
26d90     A7 1E 02 FB | 	rdlong	local01, fp
26d94     10 1F 62 FC | 	wrlong	local01, local02
26d98     40 4E 85 F1 | 	sub	fp, #64
26d9c     A7 20 02 FB | 	rdlong	local02, fp
26da0     40 4E 05 F1 | 	add	fp, #64
26da4     A7 1E 02 FB | 	rdlong	local01, fp
26da8     06 1E 06 F1 | 	add	local01, #6
26dac     0F 1F E2 FA | 	rdword	local01, local01
26db0     04 20 06 F1 | 	add	local02, #4
26db4     10 1F 52 FC | 	wrword	local01, local02
26db8     40 4E 85 F1 | 	sub	fp, #64
26dbc     A7 20 02 FB | 	rdlong	local02, fp
26dc0     08 4E 05 F1 | 	add	fp, #8
26dc4     A7 1E C2 FA | 	rdbyte	local01, fp
26dc8     10 20 06 F1 | 	add	local02, #16
26dcc     10 1F 42 FC | 	wrbyte	local01, local02
26dd0     08 4E 85 F1 | 	sub	fp, #8
26dd4     A7 20 02 FB | 	rdlong	local02, fp
26dd8     11 20 06 F1 | 	add	local02, #17
26ddc     10 01 48 FC | 	wrbyte	#0, local02
26de0     A7 20 02 FB | 	rdlong	local02, fp
26de4     1C 20 06 F1 | 	add	local02, #28
26de8     10 01 68 FC | 	wrlong	#0, local02
26dec     A7 20 02 FB | 	rdlong	local02, fp
26df0     14 20 06 F1 | 	add	local02, #20
26df4     10 01 68 FC | 	wrlong	#0, local02
26df8     A7 12 02 FB | 	rdlong	arg01, fp
26dfc     04 4E 85 F1 | 	sub	fp, #4
26e00     28 12 06 F1 | 	add	arg01, #40
26e04     00 14 06 F6 | 	mov	arg02, #0
26e08     09 16 C6 F9 | 	decod	arg03, #9
26e0c     98 00 A0 FD | 	call	#\builtin_bytefill_
26e10     0C 4E 05 F1 | 	add	fp, #12
26e14     A7 20 C2 FA | 	rdbyte	local02, fp
26e18     0C 4E 85 F1 | 	sub	fp, #12
26e1c     20 20 CE F7 | 	test	local02, #32 wz
26e20     0C 02 90 AD |  if_e	jmp	#LR__4024
26e24     04 4E 05 F1 | 	add	fp, #4
26e28     A7 1E 02 FB | 	rdlong	local01, fp
26e2c     04 4E 85 F1 | 	sub	fp, #4
26e30     0C 1E 06 F1 | 	add	local01, #12
26e34     0F 21 02 FB | 	rdlong	local02, local01
26e38     01 20 16 F2 | 	cmp	local02, #1 wc
26e3c     F0 01 90 CD |  if_b	jmp	#LR__4024
26e40     04 4E 05 F1 | 	add	fp, #4
26e44     A7 1E 02 FB | 	rdlong	local01, fp
26e48     0F 21 02 F6 | 	mov	local02, local01
26e4c     0C 1E 06 F1 | 	add	local01, #12
26e50     0F 1F 02 FB | 	rdlong	local01, local01
26e54     14 20 06 F1 | 	add	local02, #20
26e58     10 1F 62 FC | 	wrlong	local01, local02
26e5c     40 4E 05 F1 | 	add	fp, #64
26e60     A7 20 02 FB | 	rdlong	local02, fp
26e64     0A 20 06 F1 | 	add	local02, #10
26e68     10 21 E2 FA | 	rdword	local02, local02
26e6c     09 20 66 F0 | 	shl	local02, #9
26e70     08 4E 05 F1 | 	add	fp, #8
26e74     A7 20 62 FC | 	wrlong	local02, fp
26e78     48 4E 85 F1 | 	sub	fp, #72
26e7c     A7 20 02 FB | 	rdlong	local02, fp
26e80     08 20 06 F1 | 	add	local02, #8
26e84     10 1F 02 FB | 	rdlong	local01, local02
26e88     4C 4E 05 F1 | 	add	fp, #76
26e8c     A7 1E 62 FC | 	wrlong	local01, fp
26e90                 | ' 				fp->fptr = fp->obj.objsize;
26e90                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
26e90                 | ' 				clst = fp->obj.sclust;
26e90                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
26e90     4C 4E 85 F1 | 	sub	fp, #76
26e94     A7 20 02 FB | 	rdlong	local02, fp
26e98     0C 20 06 F1 | 	add	local02, #12
26e9c     10 1F 02 FB | 	rdlong	local01, local02
26ea0     58 4E 05 F1 | 	add	fp, #88
26ea4     A7 1E 62 FC | 	wrlong	local01, fp
26ea8     5C 4E 85 F1 | 	sub	fp, #92
26eac                 | LR__4020
26eac     10 4E 05 F1 | 	add	fp, #16
26eb0     A7 20 0A FB | 	rdlong	local02, fp wz
26eb4     10 4E 85 F1 | 	sub	fp, #16
26eb8     94 00 90 5D |  if_ne	jmp	#LR__4021
26ebc     5C 4E 05 F1 | 	add	fp, #92
26ec0     A7 20 02 FB | 	rdlong	local02, fp
26ec4     10 4E 85 F1 | 	sub	fp, #16
26ec8     A7 1E 02 FB | 	rdlong	local01, fp
26ecc     4C 4E 85 F1 | 	sub	fp, #76
26ed0     0F 21 1A F2 | 	cmp	local02, local01 wcz
26ed4     78 00 90 ED |  if_be	jmp	#LR__4021
26ed8     04 4E 05 F1 | 	add	fp, #4
26edc     A7 12 02 FB | 	rdlong	arg01, fp
26ee0     4C 4E 05 F1 | 	add	fp, #76
26ee4     A7 14 02 FB | 	rdlong	arg02, fp
26ee8     50 4E 85 F1 | 	sub	fp, #80
26eec     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
26ef0     50 4E 05 F1 | 	add	fp, #80
26ef4     A7 FA 61 FC | 	wrlong	result1, fp
26ef8     50 4E 85 F1 | 	sub	fp, #80
26efc     02 FA 15 F2 | 	cmp	result1, #2 wc
26f00     10 4E 05 C1 |  if_b	add	fp, #16
26f04     A7 04 68 CC |  if_b	wrlong	#2, fp
26f08     10 4E 85 C1 |  if_b	sub	fp, #16
26f0c     50 4E 05 F1 | 	add	fp, #80
26f10     A7 20 02 FB | 	rdlong	local02, fp
26f14     50 4E 85 F1 | 	sub	fp, #80
26f18     FF FF 7F FF 
26f1c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
26f20     10 4E 05 A1 |  if_e	add	fp, #16
26f24     A7 02 68 AC |  if_e	wrlong	#1, fp
26f28     10 4E 85 A1 |  if_e	sub	fp, #16
26f2c     5C 4E 05 F1 | 	add	fp, #92
26f30     A7 20 02 FB | 	rdlong	local02, fp
26f34     10 4E 85 F1 | 	sub	fp, #16
26f38     A7 1E 02 FB | 	rdlong	local01, fp
26f3c     0F 21 82 F1 | 	sub	local02, local01
26f40     10 4E 05 F1 | 	add	fp, #16
26f44     A7 20 62 FC | 	wrlong	local02, fp
26f48     5C 4E 85 F1 | 	sub	fp, #92
26f4c     5C FF 9F FD | 	jmp	#LR__4020
26f50                 | LR__4021
26f50     04 4E 05 F1 | 	add	fp, #4
26f54     A7 20 02 FB | 	rdlong	local02, fp
26f58     4C 4E 05 F1 | 	add	fp, #76
26f5c     A7 1E 02 FB | 	rdlong	local01, fp
26f60     18 20 06 F1 | 	add	local02, #24
26f64     10 1F 62 FC | 	wrlong	local01, local02
26f68     40 4E 85 F1 | 	sub	fp, #64
26f6c     A7 20 0A FB | 	rdlong	local02, fp wz
26f70     10 4E 85 F1 | 	sub	fp, #16
26f74     B8 00 90 5D |  if_ne	jmp	#LR__4023
26f78     5C 4E 05 F1 | 	add	fp, #92
26f7c     A7 1E 02 FB | 	rdlong	local01, fp
26f80     5C 4E 85 F1 | 	sub	fp, #92
26f84     FF 1F CE F7 | 	test	local01, #511 wz
26f88     A4 00 90 AD |  if_e	jmp	#LR__4023
26f8c     44 4E 05 F1 | 	add	fp, #68
26f90     A7 12 02 FB | 	rdlong	arg01, fp
26f94     0C 4E 05 F1 | 	add	fp, #12
26f98     A7 14 02 FB | 	rdlong	arg02, fp
26f9c     50 4E 85 F1 | 	sub	fp, #80
26fa0     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
26fa4     58 4E 05 F1 | 	add	fp, #88
26fa8     A7 FA 61 FC | 	wrlong	result1, fp
26fac     00 FA 4D F2 | 	cmps	result1, #0 wz
26fb0     58 4E 85 F1 | 	sub	fp, #88
26fb4     10 4E 05 A1 |  if_e	add	fp, #16
26fb8     A7 04 68 AC |  if_e	wrlong	#2, fp
26fbc     10 4E 85 A1 |  if_e	sub	fp, #16
26fc0     6C 00 90 AD |  if_e	jmp	#LR__4022
26fc4     04 4E 05 F1 | 	add	fp, #4
26fc8     A7 20 02 FB | 	rdlong	local02, fp
26fcc     54 4E 05 F1 | 	add	fp, #84
26fd0     A7 1E 02 FB | 	rdlong	local01, fp
26fd4     04 4E 05 F1 | 	add	fp, #4
26fd8     A7 18 02 FB | 	rdlong	arg04, fp
26fdc     09 18 46 F0 | 	shr	arg04, #9
26fe0     0C 1F 02 F1 | 	add	local01, arg04
26fe4     1C 20 06 F1 | 	add	local02, #28
26fe8     10 1F 62 FC | 	wrlong	local01, local02
26fec     18 4E 85 F1 | 	sub	fp, #24
26ff0     A7 20 02 FB | 	rdlong	local02, fp
26ff4     01 20 06 F1 | 	add	local02, #1
26ff8     10 13 C2 FA | 	rdbyte	arg01, local02
26ffc     40 4E 85 F1 | 	sub	fp, #64
27000     A7 20 02 FB | 	rdlong	local02, fp
27004     10 15 02 F6 | 	mov	arg02, local02
27008     28 14 06 F1 | 	add	arg02, #40
2700c     04 4E 85 F1 | 	sub	fp, #4
27010     1C 20 06 F1 | 	add	local02, #28
27014     10 17 02 FB | 	rdlong	arg03, local02
27018     01 18 06 F6 | 	mov	arg04, #1
2701c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
27020     00 FA 0D F2 | 	cmp	result1, #0 wz
27024     10 4E 05 51 |  if_ne	add	fp, #16
27028     A7 02 68 5C |  if_ne	wrlong	#1, fp
2702c     10 4E 85 51 |  if_ne	sub	fp, #16
27030                 | LR__4022
27030                 | LR__4023
27030                 | LR__4024
27030                 | LR__4025
27030                 | LR__4026
27030     10 4E 05 F1 | 	add	fp, #16
27034     A7 20 0A FB | 	rdlong	local02, fp wz
27038     10 4E 85 F1 | 	sub	fp, #16
2703c     04 4E 05 51 |  if_ne	add	fp, #4
27040     A7 20 02 5B |  if_ne	rdlong	local02, fp
27044     04 4E 85 51 |  if_ne	sub	fp, #4
27048     10 01 68 5C |  if_ne	wrlong	#0, local02
2704c                 | ' 
2704c                 | ' 	return res ;
2704c     10 4E 05 F1 | 	add	fp, #16
27050     A7 FA 01 FB | 	rdlong	result1, fp
27054     10 4E 85 F1 | 	sub	fp, #16
27058                 | LR__4027
27058     A7 F0 03 F6 | 	mov	ptra, fp
2705c     B2 00 A0 FD | 	call	#popregs_
27060                 | _fatfs_cc_f_open_ret
27060     2D 00 64 FD | 	ret
27064                 | 
27064                 | _fatfs_cc_f_read
27064     0E 4A 05 F6 | 	mov	COUNT_, #14
27068     A8 00 A0 FD | 	call	#pushregs_
2706c     38 F0 07 F1 | 	add	ptra, #56
27070     04 4E 05 F1 | 	add	fp, #4
27074     A7 12 62 FC | 	wrlong	arg01, fp
27078     04 4E 05 F1 | 	add	fp, #4
2707c     A7 14 62 FC | 	wrlong	arg02, fp
27080     04 4E 05 F1 | 	add	fp, #4
27084     A7 16 62 FC | 	wrlong	arg03, fp
27088     04 4E 05 F1 | 	add	fp, #4
2708c     A7 18 62 FC | 	wrlong	arg04, fp
27090     08 4E 85 F1 | 	sub	fp, #8
27094     A7 FA 01 FB | 	rdlong	result1, fp
27098     2C 4E 05 F1 | 	add	fp, #44
2709c     A7 FA 61 FC | 	wrlong	result1, fp
270a0     24 4E 85 F1 | 	sub	fp, #36
270a4     A7 FA 01 FB | 	rdlong	result1, fp
270a8     FD 00 68 FC | 	wrlong	#0, result1
270ac     0C 4E 85 F1 | 	sub	fp, #12
270b0     A7 12 02 FB | 	rdlong	arg01, fp
270b4     14 4E 05 F1 | 	add	fp, #20
270b8     A7 14 02 F6 | 	mov	arg02, fp
270bc     18 4E 85 F1 | 	sub	fp, #24
270c0     24 F7 BF FD | 	call	#_fatfs_cc_validate
270c4     14 4E 05 F1 | 	add	fp, #20
270c8     A7 FA 61 FC | 	wrlong	result1, fp
270cc     00 FA 4D F2 | 	cmps	result1, #0 wz
270d0     14 4E 85 F1 | 	sub	fp, #20
270d4     20 00 90 5D |  if_ne	jmp	#LR__4030
270d8     04 4E 05 F1 | 	add	fp, #4
270dc     A7 14 02 FB | 	rdlong	arg02, fp
270e0     11 14 06 F1 | 	add	arg02, #17
270e4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
270e8     10 4E 05 F1 | 	add	fp, #16
270ec     A7 14 62 FC | 	wrlong	arg02, fp
270f0     14 4E 85 F1 | 	sub	fp, #20
270f4     10 00 90 AD |  if_e	jmp	#LR__4031
270f8                 | LR__4030
270f8     14 4E 05 F1 | 	add	fp, #20
270fc     A7 FA 01 FB | 	rdlong	result1, fp
27100     14 4E 85 F1 | 	sub	fp, #20
27104     EC 05 90 FD | 	jmp	#LR__4050
27108                 | LR__4031
27108     04 4E 05 F1 | 	add	fp, #4
2710c     A7 18 02 FB | 	rdlong	arg04, fp
27110     04 4E 85 F1 | 	sub	fp, #4
27114     10 18 06 F1 | 	add	arg04, #16
27118     0C 19 C2 FA | 	rdbyte	arg04, arg04
2711c     01 18 CE F7 | 	test	arg04, #1 wz
27120     07 FA 05 A6 |  if_e	mov	result1, #7
27124     CC 05 90 AD |  if_e	jmp	#LR__4050
27128     04 4E 05 F1 | 	add	fp, #4
2712c     A7 1E 02 FB | 	rdlong	local01, fp
27130     0F 21 02 F6 | 	mov	local02, local01
27134     0C 20 06 F1 | 	add	local02, #12
27138     10 23 02 FB | 	rdlong	local03, local02
2713c     14 1E 06 F1 | 	add	local01, #20
27140     0F 1F 02 FB | 	rdlong	local01, local01
27144     0F 23 82 F1 | 	sub	local03, local01
27148     20 4E 05 F1 | 	add	fp, #32
2714c     A7 22 62 FC | 	wrlong	local03, fp
27150     18 4E 85 F1 | 	sub	fp, #24
27154     A7 24 02 FB | 	rdlong	local04, fp
27158     0C 4E 85 F1 | 	sub	fp, #12
2715c     11 25 1A F2 | 	cmp	local04, local03 wcz
27160     24 4E 05 11 |  if_a	add	fp, #36
27164     A7 24 02 1B |  if_a	rdlong	local04, fp
27168     18 4E 85 11 |  if_a	sub	fp, #24
2716c     A7 24 62 1C |  if_a	wrlong	local04, fp
27170     0C 4E 85 11 |  if_a	sub	fp, #12
27174                 | ' 
27174                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
27174                 | LR__4032
27174     0C 4E 05 F1 | 	add	fp, #12
27178     A7 20 02 FB | 	rdlong	local02, fp
2717c     0C 4E 85 F1 | 	sub	fp, #12
27180     10 25 02 F6 | 	mov	local04, local02
27184     01 24 16 F2 | 	cmp	local04, #1 wc
27188     64 05 90 CD |  if_b	jmp	#LR__4049
2718c     04 4E 05 F1 | 	add	fp, #4
27190     A7 22 02 FB | 	rdlong	local03, fp
27194     04 4E 85 F1 | 	sub	fp, #4
27198     14 22 06 F1 | 	add	local03, #20
2719c     11 23 02 FB | 	rdlong	local03, local03
271a0     FF 23 CE F7 | 	test	local03, #511 wz
271a4     3C 04 90 5D |  if_ne	jmp	#LR__4047
271a8     04 4E 05 F1 | 	add	fp, #4
271ac     A7 1E 02 FB | 	rdlong	local01, fp
271b0     14 1E 06 F1 | 	add	local01, #20
271b4     0F 23 02 FB | 	rdlong	local03, local01
271b8     09 22 46 F0 | 	shr	local03, #9
271bc     14 4E 05 F1 | 	add	fp, #20
271c0     A7 26 02 FB | 	rdlong	local05, fp
271c4     13 29 02 F6 | 	mov	local06, local05
271c8     0A 28 06 F1 | 	add	local06, #10
271cc     14 2B E2 FA | 	rdword	local07, local06
271d0     0A 28 86 F1 | 	sub	local06, #10
271d4     15 2D 32 F9 | 	getword	local08, local07, #0
271d8     01 2C 86 F1 | 	sub	local08, #1
271dc     16 23 0A F5 | 	and	local03, local08 wz
271e0     18 4E 05 F1 | 	add	fp, #24
271e4     A7 22 62 FC | 	wrlong	local03, fp
271e8     30 4E 85 F1 | 	sub	fp, #48
271ec     E0 00 90 5D |  if_ne	jmp	#LR__4037
271f0     04 4E 05 F1 | 	add	fp, #4
271f4     A7 22 02 FB | 	rdlong	local03, fp
271f8     04 4E 85 F1 | 	sub	fp, #4
271fc     14 22 06 F1 | 	add	local03, #20
27200     11 23 0A FB | 	rdlong	local03, local03 wz
27204     20 00 90 5D |  if_ne	jmp	#LR__4033
27208     04 4E 05 F1 | 	add	fp, #4
2720c     A7 22 02 FB | 	rdlong	local03, fp
27210     08 22 06 F1 | 	add	local03, #8
27214     11 23 02 FB | 	rdlong	local03, local03
27218     18 4E 05 F1 | 	add	fp, #24
2721c     A7 22 62 FC | 	wrlong	local03, fp
27220     1C 4E 85 F1 | 	sub	fp, #28
27224     28 00 90 FD | 	jmp	#LR__4034
27228                 | LR__4033
27228     04 4E 05 F1 | 	add	fp, #4
2722c     A7 2C 02 FB | 	rdlong	local08, fp
27230     16 13 02 F6 | 	mov	arg01, local08
27234     04 4E 85 F1 | 	sub	fp, #4
27238     18 2C 06 F1 | 	add	local08, #24
2723c     16 15 02 FB | 	rdlong	arg02, local08
27240     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
27244     1C 4E 05 F1 | 	add	fp, #28
27248     A7 FA 61 FC | 	wrlong	result1, fp
2724c     1C 4E 85 F1 | 	sub	fp, #28
27250                 | LR__4034
27250     1C 4E 05 F1 | 	add	fp, #28
27254     A7 22 02 FB | 	rdlong	local03, fp
27258     1C 4E 85 F1 | 	sub	fp, #28
2725c     02 22 16 F2 | 	cmp	local03, #2 wc
27260     1C 00 90 3D |  if_ae	jmp	#LR__4035
27264     04 4E 05 F1 | 	add	fp, #4
27268     A7 22 02 FB | 	rdlong	local03, fp
2726c     04 4E 85 F1 | 	sub	fp, #4
27270     11 22 06 F1 | 	add	local03, #17
27274     11 05 48 FC | 	wrbyte	#2, local03
27278     02 FA 05 F6 | 	mov	result1, #2
2727c     74 04 90 FD | 	jmp	#LR__4050
27280                 | LR__4035
27280     1C 4E 05 F1 | 	add	fp, #28
27284     A7 22 02 FB | 	rdlong	local03, fp
27288     1C 4E 85 F1 | 	sub	fp, #28
2728c     FF FF 7F FF 
27290     FF 23 0E F2 | 	cmp	local03, ##-1 wz
27294     1C 00 90 5D |  if_ne	jmp	#LR__4036
27298     04 4E 05 F1 | 	add	fp, #4
2729c     A7 22 02 FB | 	rdlong	local03, fp
272a0     04 4E 85 F1 | 	sub	fp, #4
272a4     11 22 06 F1 | 	add	local03, #17
272a8     11 03 48 FC | 	wrbyte	#1, local03
272ac     01 FA 05 F6 | 	mov	result1, #1
272b0     40 04 90 FD | 	jmp	#LR__4050
272b4                 | LR__4036
272b4     04 4E 05 F1 | 	add	fp, #4
272b8     A7 22 02 FB | 	rdlong	local03, fp
272bc     18 4E 05 F1 | 	add	fp, #24
272c0     A7 2C 02 FB | 	rdlong	local08, fp
272c4     1C 4E 85 F1 | 	sub	fp, #28
272c8     18 22 06 F1 | 	add	local03, #24
272cc     11 2D 62 FC | 	wrlong	local08, local03
272d0                 | LR__4037
272d0     18 4E 05 F1 | 	add	fp, #24
272d4     A7 12 02 FB | 	rdlong	arg01, fp
272d8     14 4E 85 F1 | 	sub	fp, #20
272dc     A7 22 02 FB | 	rdlong	local03, fp
272e0     04 4E 85 F1 | 	sub	fp, #4
272e4     18 22 06 F1 | 	add	local03, #24
272e8     11 15 02 FB | 	rdlong	arg02, local03
272ec     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
272f0     20 4E 05 F1 | 	add	fp, #32
272f4     A7 FA 61 FC | 	wrlong	result1, fp
272f8     20 4E 85 F1 | 	sub	fp, #32
272fc     00 FA 0D F2 | 	cmp	result1, #0 wz
27300     1C 00 90 5D |  if_ne	jmp	#LR__4038
27304     04 4E 05 F1 | 	add	fp, #4
27308     A7 22 02 FB | 	rdlong	local03, fp
2730c     04 4E 85 F1 | 	sub	fp, #4
27310     11 22 06 F1 | 	add	local03, #17
27314     11 05 48 FC | 	wrbyte	#2, local03
27318     02 FA 05 F6 | 	mov	result1, #2
2731c     D4 03 90 FD | 	jmp	#LR__4050
27320                 | LR__4038
27320     20 4E 05 F1 | 	add	fp, #32
27324     A7 22 02 FB | 	rdlong	local03, fp
27328     10 4E 05 F1 | 	add	fp, #16
2732c     A7 2C 02 FB | 	rdlong	local08, fp
27330     16 23 02 F1 | 	add	local03, local08
27334     10 4E 85 F1 | 	sub	fp, #16
27338     A7 22 62 FC | 	wrlong	local03, fp
2733c     14 4E 85 F1 | 	sub	fp, #20
27340     A7 22 02 FB | 	rdlong	local03, fp
27344     09 22 46 F0 | 	shr	local03, #9
27348     20 4E 05 F1 | 	add	fp, #32
2734c     A7 22 62 FC | 	wrlong	local03, fp
27350     2C 4E 85 F1 | 	sub	fp, #44
27354     01 22 16 F2 | 	cmp	local03, #1 wc
27358     5C 01 90 CD |  if_b	jmp	#LR__4042
2735c     30 4E 05 F1 | 	add	fp, #48
27360     A7 22 02 FB | 	rdlong	local03, fp
27364     04 4E 85 F1 | 	sub	fp, #4
27368     A7 2C 02 FB | 	rdlong	local08, fp
2736c     16 23 02 F1 | 	add	local03, local08
27370     14 4E 85 F1 | 	sub	fp, #20
27374     A7 2C 02 FB | 	rdlong	local08, fp
27378     18 4E 85 F1 | 	sub	fp, #24
2737c     0A 2C 06 F1 | 	add	local08, #10
27380     16 2D E2 FA | 	rdword	local08, local08
27384     16 23 1A F2 | 	cmp	local03, local08 wcz
27388     28 00 90 ED |  if_be	jmp	#LR__4039
2738c     18 4E 05 F1 | 	add	fp, #24
27390     A7 1E 02 FB | 	rdlong	local01, fp
27394     0A 1E 06 F1 | 	add	local01, #10
27398     0F 23 E2 FA | 	rdword	local03, local01
2739c     18 4E 05 F1 | 	add	fp, #24
273a0     A7 2C 02 FB | 	rdlong	local08, fp
273a4     16 23 82 F1 | 	sub	local03, local08
273a8     04 4E 85 F1 | 	sub	fp, #4
273ac     A7 22 62 FC | 	wrlong	local03, fp
273b0     2C 4E 85 F1 | 	sub	fp, #44
273b4                 | LR__4039
273b4     18 4E 05 F1 | 	add	fp, #24
273b8     A7 1E 02 FB | 	rdlong	local01, fp
273bc     01 1E 06 F1 | 	add	local01, #1
273c0     0F 13 C2 FA | 	rdbyte	arg01, local01
273c4     1C 4E 05 F1 | 	add	fp, #28
273c8     A7 14 02 FB | 	rdlong	arg02, fp
273cc     14 4E 85 F1 | 	sub	fp, #20
273d0     A7 16 02 FB | 	rdlong	arg03, fp
273d4     0C 4E 05 F1 | 	add	fp, #12
273d8     A7 18 02 FB | 	rdlong	arg04, fp
273dc     2C 4E 85 F1 | 	sub	fp, #44
273e0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
273e4     00 FA 0D F2 | 	cmp	result1, #0 wz
273e8     1C 00 90 AD |  if_e	jmp	#LR__4040
273ec     04 4E 05 F1 | 	add	fp, #4
273f0     A7 22 02 FB | 	rdlong	local03, fp
273f4     04 4E 85 F1 | 	sub	fp, #4
273f8     11 22 06 F1 | 	add	local03, #17
273fc     11 03 48 FC | 	wrbyte	#1, local03
27400     01 FA 05 F6 | 	mov	result1, #1
27404     EC 02 90 FD | 	jmp	#LR__4050
27408                 | LR__4040
27408     04 4E 05 F1 | 	add	fp, #4
2740c     A7 1E 02 FB | 	rdlong	local01, fp
27410     04 4E 85 F1 | 	sub	fp, #4
27414     10 1E 06 F1 | 	add	local01, #16
27418     0F 23 C2 FA | 	rdbyte	local03, local01
2741c     80 22 CE F7 | 	test	local03, #128 wz
27420     78 00 90 AD |  if_e	jmp	#LR__4041
27424     04 4E 05 F1 | 	add	fp, #4
27428     A7 2C 02 FB | 	rdlong	local08, fp
2742c     1C 2C 06 F1 | 	add	local08, #28
27430     16 2D 02 FB | 	rdlong	local08, local08
27434     1C 4E 05 F1 | 	add	fp, #28
27438     A7 2E 02 FB | 	rdlong	local09, fp
2743c     17 2D 82 F1 | 	sub	local08, local09
27440     0C 4E 05 F1 | 	add	fp, #12
27444     A7 30 02 FB | 	rdlong	local10, fp
27448     2C 4E 85 F1 | 	sub	fp, #44
2744c     18 33 02 F6 | 	mov	local11, local10
27450     19 2D 12 F2 | 	cmp	local08, local11 wc
27454     44 00 90 3D |  if_ae	jmp	#LR__4041
27458     34 4E 05 F1 | 	add	fp, #52
2745c     A7 12 02 FB | 	rdlong	arg01, fp
27460     30 4E 85 F1 | 	sub	fp, #48
27464     A7 14 02 FB | 	rdlong	arg02, fp
27468     0A 33 02 F6 | 	mov	local11, arg02
2746c     1C 32 06 F1 | 	add	local11, #28
27470     19 2F 02 FB | 	rdlong	local09, local11
27474     1C 4E 05 F1 | 	add	fp, #28
27478     A7 26 02 FB | 	rdlong	local05, fp
2747c     13 2F 82 F1 | 	sub	local09, local05
27480     09 2E 66 F0 | 	shl	local09, #9
27484     17 33 02 F6 | 	mov	local11, local09
27488     17 13 02 F1 | 	add	arg01, local09
2748c     20 4E 85 F1 | 	sub	fp, #32
27490     28 14 06 F1 | 	add	arg02, #40
27494     09 16 C6 F9 | 	decod	arg03, #9
27498     C4 48 BF FD | 	call	#__system____builtin_memmove
2749c                 | LR__4041
2749c     2C 4E 05 F1 | 	add	fp, #44
274a0     A7 22 02 FB | 	rdlong	local03, fp
274a4     09 22 66 F0 | 	shl	local03, #9
274a8     04 4E 85 F1 | 	sub	fp, #4
274ac     A7 22 62 FC | 	wrlong	local03, fp
274b0     28 4E 85 F1 | 	sub	fp, #40
274b4                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
274b4                 | ' 				}
274b4                 | ' 
274b4                 | ' 
274b4                 | ' 				rcnt =  ((UINT) 512 )  * cc;
274b4                 | ' 				continue;
274b4     B4 01 90 FD | 	jmp	#LR__4048
274b8                 | LR__4042
274b8     04 4E 05 F1 | 	add	fp, #4
274bc     A7 22 02 FB | 	rdlong	local03, fp
274c0     1C 22 06 F1 | 	add	local03, #28
274c4     11 23 02 FB | 	rdlong	local03, local03
274c8     1C 4E 05 F1 | 	add	fp, #28
274cc     A7 1E 02 FB | 	rdlong	local01, fp
274d0     20 4E 85 F1 | 	sub	fp, #32
274d4     0F 23 0A F2 | 	cmp	local03, local01 wz
274d8     EC 00 90 AD |  if_e	jmp	#LR__4046
274dc     04 4E 05 F1 | 	add	fp, #4
274e0     A7 1E 02 FB | 	rdlong	local01, fp
274e4     04 4E 85 F1 | 	sub	fp, #4
274e8     10 1E 06 F1 | 	add	local01, #16
274ec     0F 23 C2 FA | 	rdbyte	local03, local01
274f0     80 22 CE F7 | 	test	local03, #128 wz
274f4     7C 00 90 AD |  if_e	jmp	#LR__4044
274f8     18 4E 05 F1 | 	add	fp, #24
274fc     A7 1E 02 FB | 	rdlong	local01, fp
27500     01 1E 06 F1 | 	add	local01, #1
27504     0F 13 C2 FA | 	rdbyte	arg01, local01
27508     14 4E 85 F1 | 	sub	fp, #20
2750c     A7 22 02 FB | 	rdlong	local03, fp
27510     11 15 02 F6 | 	mov	arg02, local03
27514     28 14 06 F1 | 	add	arg02, #40
27518     04 4E 85 F1 | 	sub	fp, #4
2751c     1C 22 06 F1 | 	add	local03, #28
27520     11 17 02 FB | 	rdlong	arg03, local03
27524     01 18 06 F6 | 	mov	arg04, #1
27528     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2752c     00 FA 0D F2 | 	cmp	result1, #0 wz
27530     1C 00 90 AD |  if_e	jmp	#LR__4043
27534     04 4E 05 F1 | 	add	fp, #4
27538     A7 22 02 FB | 	rdlong	local03, fp
2753c     04 4E 85 F1 | 	sub	fp, #4
27540     11 22 06 F1 | 	add	local03, #17
27544     11 03 48 FC | 	wrbyte	#1, local03
27548     01 FA 05 F6 | 	mov	result1, #1
2754c     A4 01 90 FD | 	jmp	#LR__4050
27550                 | LR__4043
27550     04 4E 05 F1 | 	add	fp, #4
27554     A7 32 02 FB | 	rdlong	local11, fp
27558     19 23 02 F6 | 	mov	local03, local11
2755c     04 4E 85 F1 | 	sub	fp, #4
27560     10 32 06 F1 | 	add	local11, #16
27564     19 33 C2 FA | 	rdbyte	local11, local11
27568     7F 32 06 F5 | 	and	local11, #127
2756c     10 22 06 F1 | 	add	local03, #16
27570     11 33 42 FC | 	wrbyte	local11, local03
27574                 | LR__4044
27574     18 4E 05 F1 | 	add	fp, #24
27578     A7 1E 02 FB | 	rdlong	local01, fp
2757c     01 1E 06 F1 | 	add	local01, #1
27580     0F 13 C2 FA | 	rdbyte	arg01, local01
27584     14 4E 85 F1 | 	sub	fp, #20
27588     A7 14 02 FB | 	rdlong	arg02, fp
2758c     28 14 06 F1 | 	add	arg02, #40
27590     1C 4E 05 F1 | 	add	fp, #28
27594     A7 16 02 FB | 	rdlong	arg03, fp
27598     20 4E 85 F1 | 	sub	fp, #32
2759c     01 18 06 F6 | 	mov	arg04, #1
275a0     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
275a4     00 FA 0D F2 | 	cmp	result1, #0 wz
275a8     1C 00 90 AD |  if_e	jmp	#LR__4045
275ac     04 4E 05 F1 | 	add	fp, #4
275b0     A7 22 02 FB | 	rdlong	local03, fp
275b4     04 4E 85 F1 | 	sub	fp, #4
275b8     11 22 06 F1 | 	add	local03, #17
275bc     11 03 48 FC | 	wrbyte	#1, local03
275c0     01 FA 05 F6 | 	mov	result1, #1
275c4     2C 01 90 FD | 	jmp	#LR__4050
275c8                 | LR__4045
275c8                 | LR__4046
275c8     04 4E 05 F1 | 	add	fp, #4
275cc     A7 22 02 FB | 	rdlong	local03, fp
275d0     1C 4E 05 F1 | 	add	fp, #28
275d4     A7 32 02 FB | 	rdlong	local11, fp
275d8     20 4E 85 F1 | 	sub	fp, #32
275dc     1C 22 06 F1 | 	add	local03, #28
275e0     11 33 62 FC | 	wrlong	local11, local03
275e4                 | LR__4047
275e4     04 4E 05 F1 | 	add	fp, #4
275e8     A7 1E 02 FB | 	rdlong	local01, fp
275ec     14 1E 06 F1 | 	add	local01, #20
275f0     0F 33 02 FB | 	rdlong	local11, local01
275f4     FF 33 06 F5 | 	and	local11, #511
275f8     09 22 C6 F9 | 	decod	local03, #9
275fc     19 23 82 F1 | 	sub	local03, local11
27600     24 4E 05 F1 | 	add	fp, #36
27604     A7 22 62 FC | 	wrlong	local03, fp
27608     1C 4E 85 F1 | 	sub	fp, #28
2760c     A7 32 02 FB | 	rdlong	local11, fp
27610     0C 4E 85 F1 | 	sub	fp, #12
27614     19 23 1A F2 | 	cmp	local03, local11 wcz
27618     0C 4E 05 11 |  if_a	add	fp, #12
2761c     A7 22 02 1B |  if_a	rdlong	local03, fp
27620     1C 4E 05 11 |  if_a	add	fp, #28
27624     A7 22 62 1C |  if_a	wrlong	local03, fp
27628     28 4E 85 11 |  if_a	sub	fp, #40
2762c     34 4E 05 F1 | 	add	fp, #52
27630     A7 12 02 FB | 	rdlong	arg01, fp
27634     30 4E 85 F1 | 	sub	fp, #48
27638     A7 28 02 FB | 	rdlong	local06, fp
2763c     14 15 02 F6 | 	mov	arg02, local06
27640     28 14 06 F1 | 	add	arg02, #40
27644     14 28 06 F1 | 	add	local06, #20
27648     14 33 02 FB | 	rdlong	local11, local06
2764c     19 2F 02 F6 | 	mov	local09, local11
27650     17 31 02 F6 | 	mov	local10, local09
27654     FF 31 06 F5 | 	and	local10, #511
27658     18 15 02 F1 | 	add	arg02, local10
2765c     24 4E 05 F1 | 	add	fp, #36
27660     A7 16 02 FB | 	rdlong	arg03, fp
27664     28 4E 85 F1 | 	sub	fp, #40
27668     F4 46 BF FD | 	call	#__system____builtin_memmove
2766c                 | LR__4048
2766c     0C 4E 05 F1 | 	add	fp, #12
27670     A7 22 02 FB | 	rdlong	local03, fp
27674     1C 4E 05 F1 | 	add	fp, #28
27678     A7 2C 02 FB | 	rdlong	local08, fp
2767c     16 23 82 F1 | 	sub	local03, local08
27680     1C 4E 85 F1 | 	sub	fp, #28
27684     A7 22 62 FC | 	wrlong	local03, fp
27688     04 4E 05 F1 | 	add	fp, #4
2768c     A7 1E 02 FB | 	rdlong	local01, fp
27690     0F 2B 02 FB | 	rdlong	local07, local01
27694     18 4E 05 F1 | 	add	fp, #24
27698     A7 2C 02 FB | 	rdlong	local08, fp
2769c     16 2B 02 F1 | 	add	local07, local08
276a0     0F 2B 62 FC | 	wrlong	local07, local01
276a4     0C 4E 05 F1 | 	add	fp, #12
276a8     A7 22 02 FB | 	rdlong	local03, fp
276ac     0C 4E 85 F1 | 	sub	fp, #12
276b0     A7 34 02 FB | 	rdlong	local12, fp
276b4     1A 23 02 F1 | 	add	local03, local12
276b8     0C 4E 05 F1 | 	add	fp, #12
276bc     A7 22 62 FC | 	wrlong	local03, fp
276c0     30 4E 85 F1 | 	sub	fp, #48
276c4     A7 36 02 FB | 	rdlong	local13, fp
276c8     1B 23 02 F6 | 	mov	local03, local13
276cc     14 36 06 F1 | 	add	local13, #20
276d0     1B 39 02 FB | 	rdlong	local14, local13
276d4     24 4E 05 F1 | 	add	fp, #36
276d8     A7 28 02 FB | 	rdlong	local06, fp
276dc     28 4E 85 F1 | 	sub	fp, #40
276e0     14 39 02 F1 | 	add	local14, local06
276e4     14 22 06 F1 | 	add	local03, #20
276e8     11 39 62 FC | 	wrlong	local14, local03
276ec     84 FA 9F FD | 	jmp	#LR__4032
276f0                 | LR__4049
276f0                 | ' 
276f0                 | ' 
276f0                 | ' 
276f0                 | ' 
276f0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
276f0                 | ' 
276f0                 | ' 	}
276f0                 | ' 
276f0                 | ' 	return FR_OK ;
276f0     00 FA 05 F6 | 	mov	result1, #0
276f4                 | LR__4050
276f4     A7 F0 03 F6 | 	mov	ptra, fp
276f8     B2 00 A0 FD | 	call	#popregs_
276fc                 | _fatfs_cc_f_read_ret
276fc     2D 00 64 FD | 	ret
27700                 | 
27700                 | _fatfs_cc_f_write
27700     15 4A 05 F6 | 	mov	COUNT_, #21
27704     A8 00 A0 FD | 	call	#pushregs_
27708     34 F0 07 F1 | 	add	ptra, #52
2770c     04 4E 05 F1 | 	add	fp, #4
27710     A7 12 62 FC | 	wrlong	arg01, fp
27714     04 4E 05 F1 | 	add	fp, #4
27718     A7 14 62 FC | 	wrlong	arg02, fp
2771c     04 4E 05 F1 | 	add	fp, #4
27720     A7 16 62 FC | 	wrlong	arg03, fp
27724     04 4E 05 F1 | 	add	fp, #4
27728     A7 18 62 FC | 	wrlong	arg04, fp
2772c     08 4E 85 F1 | 	sub	fp, #8
27730     A7 FA 01 FB | 	rdlong	result1, fp
27734     28 4E 05 F1 | 	add	fp, #40
27738     A7 FA 61 FC | 	wrlong	result1, fp
2773c     20 4E 85 F1 | 	sub	fp, #32
27740     A7 FA 01 FB | 	rdlong	result1, fp
27744     FD 00 68 FC | 	wrlong	#0, result1
27748     0C 4E 85 F1 | 	sub	fp, #12
2774c     A7 12 02 FB | 	rdlong	arg01, fp
27750     14 4E 05 F1 | 	add	fp, #20
27754     A7 14 02 F6 | 	mov	arg02, fp
27758     18 4E 85 F1 | 	sub	fp, #24
2775c     88 F0 BF FD | 	call	#_fatfs_cc_validate
27760     14 4E 05 F1 | 	add	fp, #20
27764     A7 FA 61 FC | 	wrlong	result1, fp
27768     00 FA 4D F2 | 	cmps	result1, #0 wz
2776c     14 4E 85 F1 | 	sub	fp, #20
27770     20 00 90 5D |  if_ne	jmp	#LR__4060
27774     04 4E 05 F1 | 	add	fp, #4
27778     A7 14 02 FB | 	rdlong	arg02, fp
2777c     11 14 06 F1 | 	add	arg02, #17
27780     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
27784     10 4E 05 F1 | 	add	fp, #16
27788     A7 14 62 FC | 	wrlong	arg02, fp
2778c     14 4E 85 F1 | 	sub	fp, #20
27790     10 00 90 AD |  if_e	jmp	#LR__4061
27794                 | LR__4060
27794     14 4E 05 F1 | 	add	fp, #20
27798     A7 FA 01 FB | 	rdlong	result1, fp
2779c     14 4E 85 F1 | 	sub	fp, #20
277a0     44 07 90 FD | 	jmp	#LR__4083
277a4                 | LR__4061
277a4     04 4E 05 F1 | 	add	fp, #4
277a8     A7 14 02 FB | 	rdlong	arg02, fp
277ac     04 4E 85 F1 | 	sub	fp, #4
277b0     10 14 06 F1 | 	add	arg02, #16
277b4     0A 15 C2 FA | 	rdbyte	arg02, arg02
277b8     02 14 CE F7 | 	test	arg02, #2 wz
277bc     07 FA 05 A6 |  if_e	mov	result1, #7
277c0     24 07 90 AD |  if_e	jmp	#LR__4083
277c4     04 4E 05 F1 | 	add	fp, #4
277c8     A7 14 02 FB | 	rdlong	arg02, fp
277cc     0A 13 02 F6 | 	mov	arg01, arg02
277d0     14 12 06 F1 | 	add	arg01, #20
277d4     09 13 02 FB | 	rdlong	arg01, arg01
277d8     08 4E 05 F1 | 	add	fp, #8
277dc     A7 FA 01 FB | 	rdlong	result1, fp
277e0     FD 12 02 F1 | 	add	arg01, result1
277e4     0C 4E 85 F1 | 	sub	fp, #12
277e8     14 14 06 F1 | 	add	arg02, #20
277ec     0A FB 01 FB | 	rdlong	result1, arg02
277f0     FD 12 12 F2 | 	cmp	arg01, result1 wc
277f4     24 00 90 3D |  if_ae	jmp	#LR__4062
277f8     04 4E 05 F1 | 	add	fp, #4
277fc     A7 14 02 FB | 	rdlong	arg02, fp
27800     01 FA 65 F6 | 	neg	result1, #1
27804     14 14 06 F1 | 	add	arg02, #20
27808     0A 15 02 FB | 	rdlong	arg02, arg02
2780c     0A FB 81 F1 | 	sub	result1, arg02
27810     08 4E 05 F1 | 	add	fp, #8
27814     A7 FA 61 FC | 	wrlong	result1, fp
27818     0C 4E 85 F1 | 	sub	fp, #12
2781c                 | LR__4062
2781c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2781c                 | ' 	}
2781c                 | ' 
2781c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2781c                 | LR__4063
2781c     0C 4E 05 F1 | 	add	fp, #12
27820     A7 FA 01 FB | 	rdlong	result1, fp
27824     0C 4E 85 F1 | 	sub	fp, #12
27828     01 FA 15 F2 | 	cmp	result1, #1 wc
2782c     90 06 90 CD |  if_b	jmp	#LR__4082
27830     04 4E 05 F1 | 	add	fp, #4
27834     A7 FA 01 FB | 	rdlong	result1, fp
27838     04 4E 85 F1 | 	sub	fp, #4
2783c     14 FA 05 F1 | 	add	result1, #20
27840     FD FA 01 FB | 	rdlong	result1, result1
27844     FF FB CD F7 | 	test	result1, #511 wz
27848     D8 04 90 5D |  if_ne	jmp	#LR__4078
2784c     04 4E 05 F1 | 	add	fp, #4
27850     A7 FA 01 FB | 	rdlong	result1, fp
27854     14 FA 05 F1 | 	add	result1, #20
27858     FD FA 01 FB | 	rdlong	result1, result1
2785c     09 FA 45 F0 | 	shr	result1, #9
27860     14 4E 05 F1 | 	add	fp, #20
27864     A7 14 02 FB | 	rdlong	arg02, fp
27868     0A 14 06 F1 | 	add	arg02, #10
2786c     0A 19 E2 FA | 	rdword	arg04, arg02
27870     0C 15 32 F9 | 	getword	arg02, arg04, #0
27874     01 14 86 F1 | 	sub	arg02, #1
27878     0A FB 09 F5 | 	and	result1, arg02 wz
2787c     14 4E 05 F1 | 	add	fp, #20
27880     A7 FA 61 FC | 	wrlong	result1, fp
27884     2C 4E 85 F1 | 	sub	fp, #44
27888     44 01 90 5D |  if_ne	jmp	#LR__4069
2788c     04 4E 05 F1 | 	add	fp, #4
27890     A7 FA 01 FB | 	rdlong	result1, fp
27894     04 4E 85 F1 | 	sub	fp, #4
27898     14 FA 05 F1 | 	add	result1, #20
2789c     FD 14 0A FB | 	rdlong	arg02, result1 wz
278a0     44 00 90 5D |  if_ne	jmp	#LR__4064
278a4     04 4E 05 F1 | 	add	fp, #4
278a8     A7 14 02 FB | 	rdlong	arg02, fp
278ac     08 14 06 F1 | 	add	arg02, #8
278b0     0A 15 0A FB | 	rdlong	arg02, arg02 wz
278b4     18 4E 05 F1 | 	add	fp, #24
278b8     A7 14 62 FC | 	wrlong	arg02, fp
278bc     1C 4E 85 F1 | 	sub	fp, #28
278c0     4C 00 90 5D |  if_ne	jmp	#LR__4065
278c4     04 4E 05 F1 | 	add	fp, #4
278c8     A7 12 02 FB | 	rdlong	arg01, fp
278cc     04 4E 85 F1 | 	sub	fp, #4
278d0     00 14 06 F6 | 	mov	arg02, #0
278d4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
278d8     1C 4E 05 F1 | 	add	fp, #28
278dc     A7 FA 61 FC | 	wrlong	result1, fp
278e0     1C 4E 85 F1 | 	sub	fp, #28
278e4     28 00 90 FD | 	jmp	#LR__4065
278e8                 | LR__4064
278e8     04 4E 05 F1 | 	add	fp, #4
278ec     A7 18 02 FB | 	rdlong	arg04, fp
278f0     0C 13 02 F6 | 	mov	arg01, arg04
278f4     04 4E 85 F1 | 	sub	fp, #4
278f8     18 18 06 F1 | 	add	arg04, #24
278fc     0C 15 02 FB | 	rdlong	arg02, arg04
27900     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
27904     1C 4E 05 F1 | 	add	fp, #28
27908     A7 FA 61 FC | 	wrlong	result1, fp
2790c     1C 4E 85 F1 | 	sub	fp, #28
27910                 | LR__4065
27910     1C 4E 05 F1 | 	add	fp, #28
27914     A7 FA 09 FB | 	rdlong	result1, fp wz
27918     1C 4E 85 F1 | 	sub	fp, #28
2791c     A0 05 90 AD |  if_e	jmp	#LR__4082
27920     1C 4E 05 F1 | 	add	fp, #28
27924     A7 FA 01 FB | 	rdlong	result1, fp
27928     1C 4E 85 F1 | 	sub	fp, #28
2792c     01 FA 0D F2 | 	cmp	result1, #1 wz
27930     1C 00 90 5D |  if_ne	jmp	#LR__4066
27934     04 4E 05 F1 | 	add	fp, #4
27938     A7 FA 01 FB | 	rdlong	result1, fp
2793c     04 4E 85 F1 | 	sub	fp, #4
27940     11 FA 05 F1 | 	add	result1, #17
27944     FD 04 48 FC | 	wrbyte	#2, result1
27948     02 FA 05 F6 | 	mov	result1, #2
2794c     98 05 90 FD | 	jmp	#LR__4083
27950                 | LR__4066
27950     1C 4E 05 F1 | 	add	fp, #28
27954     A7 FA 01 FB | 	rdlong	result1, fp
27958     1C 4E 85 F1 | 	sub	fp, #28
2795c     FF FF 7F FF 
27960     FF FB 0D F2 | 	cmp	result1, ##-1 wz
27964     1C 00 90 5D |  if_ne	jmp	#LR__4067
27968     04 4E 05 F1 | 	add	fp, #4
2796c     A7 FA 01 FB | 	rdlong	result1, fp
27970     04 4E 85 F1 | 	sub	fp, #4
27974     11 FA 05 F1 | 	add	result1, #17
27978     FD 02 48 FC | 	wrbyte	#1, result1
2797c     01 FA 05 F6 | 	mov	result1, #1
27980     64 05 90 FD | 	jmp	#LR__4083
27984                 | LR__4067
27984     04 4E 05 F1 | 	add	fp, #4
27988     A7 FA 01 FB | 	rdlong	result1, fp
2798c     18 4E 05 F1 | 	add	fp, #24
27990     A7 18 02 FB | 	rdlong	arg04, fp
27994     18 FA 05 F1 | 	add	result1, #24
27998     FD 18 62 FC | 	wrlong	arg04, result1
2799c     18 4E 85 F1 | 	sub	fp, #24
279a0     A7 FA 01 FB | 	rdlong	result1, fp
279a4     04 4E 85 F1 | 	sub	fp, #4
279a8     08 FA 05 F1 | 	add	result1, #8
279ac     FD FA 09 FB | 	rdlong	result1, result1 wz
279b0     1C 00 90 5D |  if_ne	jmp	#LR__4068
279b4     04 4E 05 F1 | 	add	fp, #4
279b8     A7 18 02 FB | 	rdlong	arg04, fp
279bc     18 4E 05 F1 | 	add	fp, #24
279c0     A7 FA 01 FB | 	rdlong	result1, fp
279c4     1C 4E 85 F1 | 	sub	fp, #28
279c8     08 18 06 F1 | 	add	arg04, #8
279cc     0C FB 61 FC | 	wrlong	result1, arg04
279d0                 | LR__4068
279d0                 | LR__4069
279d0     04 4E 05 F1 | 	add	fp, #4
279d4     A7 18 02 FB | 	rdlong	arg04, fp
279d8     04 4E 85 F1 | 	sub	fp, #4
279dc     10 18 06 F1 | 	add	arg04, #16
279e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
279e4     80 18 CE F7 | 	test	arg04, #128 wz
279e8     7C 00 90 AD |  if_e	jmp	#LR__4071
279ec     18 4E 05 F1 | 	add	fp, #24
279f0     A7 18 02 FB | 	rdlong	arg04, fp
279f4     01 18 06 F1 | 	add	arg04, #1
279f8     0C 13 C2 FA | 	rdbyte	arg01, arg04
279fc     14 4E 85 F1 | 	sub	fp, #20
27a00     A7 18 02 FB | 	rdlong	arg04, fp
27a04     0C 15 02 F6 | 	mov	arg02, arg04
27a08     28 14 06 F1 | 	add	arg02, #40
27a0c     04 4E 85 F1 | 	sub	fp, #4
27a10     1C 18 06 F1 | 	add	arg04, #28
27a14     0C 17 02 FB | 	rdlong	arg03, arg04
27a18     01 18 06 F6 | 	mov	arg04, #1
27a1c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
27a20     00 FA 0D F2 | 	cmp	result1, #0 wz
27a24     1C 00 90 AD |  if_e	jmp	#LR__4070
27a28     04 4E 05 F1 | 	add	fp, #4
27a2c     A7 FA 01 FB | 	rdlong	result1, fp
27a30     04 4E 85 F1 | 	sub	fp, #4
27a34     11 FA 05 F1 | 	add	result1, #17
27a38     FD 02 48 FC | 	wrbyte	#1, result1
27a3c     01 FA 05 F6 | 	mov	result1, #1
27a40     A4 04 90 FD | 	jmp	#LR__4083
27a44                 | LR__4070
27a44     04 4E 05 F1 | 	add	fp, #4
27a48     A7 18 02 FB | 	rdlong	arg04, fp
27a4c     0C FB 01 F6 | 	mov	result1, arg04
27a50     04 4E 85 F1 | 	sub	fp, #4
27a54     10 18 06 F1 | 	add	arg04, #16
27a58     0C 19 C2 FA | 	rdbyte	arg04, arg04
27a5c     7F 18 06 F5 | 	and	arg04, #127
27a60     10 FA 05 F1 | 	add	result1, #16
27a64     FD 18 42 FC | 	wrbyte	arg04, result1
27a68                 | LR__4071
27a68     18 4E 05 F1 | 	add	fp, #24
27a6c     A7 12 02 FB | 	rdlong	arg01, fp
27a70     14 4E 85 F1 | 	sub	fp, #20
27a74     A7 14 02 FB | 	rdlong	arg02, fp
27a78     04 4E 85 F1 | 	sub	fp, #4
27a7c     18 14 06 F1 | 	add	arg02, #24
27a80     0A 15 02 FB | 	rdlong	arg02, arg02
27a84     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
27a88     20 4E 05 F1 | 	add	fp, #32
27a8c     A7 FA 61 FC | 	wrlong	result1, fp
27a90     20 4E 85 F1 | 	sub	fp, #32
27a94     00 FA 0D F2 | 	cmp	result1, #0 wz
27a98     1C 00 90 5D |  if_ne	jmp	#LR__4072
27a9c     04 4E 05 F1 | 	add	fp, #4
27aa0     A7 FA 01 FB | 	rdlong	result1, fp
27aa4     04 4E 85 F1 | 	sub	fp, #4
27aa8     11 FA 05 F1 | 	add	result1, #17
27aac     FD 04 48 FC | 	wrbyte	#2, result1
27ab0     02 FA 05 F6 | 	mov	result1, #2
27ab4     30 04 90 FD | 	jmp	#LR__4083
27ab8                 | LR__4072
27ab8     20 4E 05 F1 | 	add	fp, #32
27abc     A7 FA 01 FB | 	rdlong	result1, fp
27ac0     0C 4E 05 F1 | 	add	fp, #12
27ac4     A7 1E 02 FB | 	rdlong	local01, fp
27ac8     0F FB 01 F1 | 	add	result1, local01
27acc     0C 4E 85 F1 | 	sub	fp, #12
27ad0     A7 FA 61 FC | 	wrlong	result1, fp
27ad4     14 4E 85 F1 | 	sub	fp, #20
27ad8     A7 FA 01 FB | 	rdlong	result1, fp
27adc     09 FA 45 F0 | 	shr	result1, #9
27ae0     1C 4E 05 F1 | 	add	fp, #28
27ae4     A7 FA 61 FC | 	wrlong	result1, fp
27ae8     28 4E 85 F1 | 	sub	fp, #40
27aec     01 FA 15 F2 | 	cmp	result1, #1 wc
27af0     60 01 90 CD |  if_b	jmp	#LR__4076
27af4     2C 4E 05 F1 | 	add	fp, #44
27af8     A7 FA 01 FB | 	rdlong	result1, fp
27afc     04 4E 85 F1 | 	sub	fp, #4
27b00     A7 18 02 FB | 	rdlong	arg04, fp
27b04     0C FB 01 F1 | 	add	result1, arg04
27b08     10 4E 85 F1 | 	sub	fp, #16
27b0c     A7 18 02 FB | 	rdlong	arg04, fp
27b10     18 4E 85 F1 | 	sub	fp, #24
27b14     0A 18 06 F1 | 	add	arg04, #10
27b18     0C 19 E2 FA | 	rdword	arg04, arg04
27b1c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
27b20     28 00 90 ED |  if_be	jmp	#LR__4073
27b24     18 4E 05 F1 | 	add	fp, #24
27b28     A7 FA 01 FB | 	rdlong	result1, fp
27b2c     0A FA 05 F1 | 	add	result1, #10
27b30     FD FA E1 FA | 	rdword	result1, result1
27b34     14 4E 05 F1 | 	add	fp, #20
27b38     A7 18 02 FB | 	rdlong	arg04, fp
27b3c     0C FB 81 F1 | 	sub	result1, arg04
27b40     04 4E 85 F1 | 	sub	fp, #4
27b44     A7 FA 61 FC | 	wrlong	result1, fp
27b48     28 4E 85 F1 | 	sub	fp, #40
27b4c                 | LR__4073
27b4c     18 4E 05 F1 | 	add	fp, #24
27b50     A7 18 02 FB | 	rdlong	arg04, fp
27b54     01 18 06 F1 | 	add	arg04, #1
27b58     0C 13 C2 FA | 	rdbyte	arg01, arg04
27b5c     18 4E 05 F1 | 	add	fp, #24
27b60     A7 14 02 FB | 	rdlong	arg02, fp
27b64     10 4E 85 F1 | 	sub	fp, #16
27b68     A7 16 02 FB | 	rdlong	arg03, fp
27b6c     08 4E 05 F1 | 	add	fp, #8
27b70     A7 18 02 FB | 	rdlong	arg04, fp
27b74     28 4E 85 F1 | 	sub	fp, #40
27b78     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
27b7c     00 FA 0D F2 | 	cmp	result1, #0 wz
27b80     1C 00 90 AD |  if_e	jmp	#LR__4074
27b84     04 4E 05 F1 | 	add	fp, #4
27b88     A7 1E 02 FB | 	rdlong	local01, fp
27b8c     04 4E 85 F1 | 	sub	fp, #4
27b90     11 1E 06 F1 | 	add	local01, #17
27b94     0F 03 48 FC | 	wrbyte	#1, local01
27b98     01 FA 05 F6 | 	mov	result1, #1
27b9c     48 03 90 FD | 	jmp	#LR__4083
27ba0                 | LR__4074
27ba0     04 4E 05 F1 | 	add	fp, #4
27ba4     A7 FA 01 FB | 	rdlong	result1, fp
27ba8     1C FA 05 F1 | 	add	result1, #28
27bac     FD FA 01 FB | 	rdlong	result1, result1
27bb0     1C 4E 05 F1 | 	add	fp, #28
27bb4     A7 20 02 FB | 	rdlong	local02, fp
27bb8     10 FB 81 F1 | 	sub	result1, local02
27bbc     08 4E 05 F1 | 	add	fp, #8
27bc0     A7 18 02 FB | 	rdlong	arg04, fp
27bc4     28 4E 85 F1 | 	sub	fp, #40
27bc8     0C FB 11 F2 | 	cmp	result1, arg04 wc
27bcc     68 00 90 3D |  if_ae	jmp	#LR__4075
27bd0     04 4E 05 F1 | 	add	fp, #4
27bd4     A7 12 02 FB | 	rdlong	arg01, fp
27bd8     28 12 06 F1 | 	add	arg01, #40
27bdc     2C 4E 05 F1 | 	add	fp, #44
27be0     A7 14 02 FB | 	rdlong	arg02, fp
27be4     2C 4E 85 F1 | 	sub	fp, #44
27be8     A7 FA 01 FB | 	rdlong	result1, fp
27bec     1C FA 05 F1 | 	add	result1, #28
27bf0     FD 22 02 FB | 	rdlong	local03, result1
27bf4     1C 4E 05 F1 | 	add	fp, #28
27bf8     A7 18 02 FB | 	rdlong	arg04, fp
27bfc     20 4E 85 F1 | 	sub	fp, #32
27c00     0C 23 82 F1 | 	sub	local03, arg04
27c04     09 22 66 F0 | 	shl	local03, #9
27c08     11 15 02 F1 | 	add	arg02, local03
27c0c     09 16 C6 F9 | 	decod	arg03, #9
27c10     4C 41 BF FD | 	call	#__system____builtin_memmove
27c14     04 4E 05 F1 | 	add	fp, #4
27c18     A7 18 02 FB | 	rdlong	arg04, fp
27c1c     0C FB 01 F6 | 	mov	result1, arg04
27c20     04 4E 85 F1 | 	sub	fp, #4
27c24     10 18 06 F1 | 	add	arg04, #16
27c28     0C 19 C2 FA | 	rdbyte	arg04, arg04
27c2c     7F 18 06 F5 | 	and	arg04, #127
27c30     10 FA 05 F1 | 	add	result1, #16
27c34     FD 18 42 FC | 	wrbyte	arg04, result1
27c38                 | LR__4075
27c38     28 4E 05 F1 | 	add	fp, #40
27c3c     A7 FA 01 FB | 	rdlong	result1, fp
27c40     09 FA 65 F0 | 	shl	result1, #9
27c44     04 4E 85 F1 | 	sub	fp, #4
27c48     A7 FA 61 FC | 	wrlong	result1, fp
27c4c     24 4E 85 F1 | 	sub	fp, #36
27c50                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
27c50                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
27c50                 | ' 				}
27c50                 | ' 
27c50                 | ' 
27c50                 | ' 				wcnt =  ((UINT) 512 )  * cc;
27c50                 | ' 				continue;
27c50     74 01 90 FD | 	jmp	#LR__4079
27c54                 | LR__4076
27c54     04 4E 05 F1 | 	add	fp, #4
27c58     A7 20 02 FB | 	rdlong	local02, fp
27c5c     1C 20 06 F1 | 	add	local02, #28
27c60     10 FB 01 FB | 	rdlong	result1, local02
27c64     1C 4E 05 F1 | 	add	fp, #28
27c68     A7 20 02 FB | 	rdlong	local02, fp
27c6c     20 4E 85 F1 | 	sub	fp, #32
27c70     10 FB 09 F2 | 	cmp	result1, local02 wz
27c74     90 00 90 AD |  if_e	jmp	#LR__4077
27c78     04 4E 05 F1 | 	add	fp, #4
27c7c     A7 FA 01 FB | 	rdlong	result1, fp
27c80     FD 22 02 F6 | 	mov	local03, result1
27c84     04 4E 85 F1 | 	sub	fp, #4
27c88     14 22 06 F1 | 	add	local03, #20
27c8c     11 23 02 FB | 	rdlong	local03, local03
27c90     0C FA 05 F1 | 	add	result1, #12
27c94     FD 24 02 FB | 	rdlong	local04, result1
27c98     12 27 02 F6 | 	mov	local05, local04
27c9c     13 23 12 F2 | 	cmp	local03, local05 wc
27ca0     64 00 90 3D |  if_ae	jmp	#LR__4077
27ca4     18 4E 05 F1 | 	add	fp, #24
27ca8     A7 18 02 FB | 	rdlong	arg04, fp
27cac     01 18 06 F1 | 	add	arg04, #1
27cb0     0C 13 C2 FA | 	rdbyte	arg01, arg04
27cb4     14 4E 85 F1 | 	sub	fp, #20
27cb8     A7 28 02 FB | 	rdlong	local06, fp
27cbc     28 28 06 F1 | 	add	local06, #40
27cc0     14 2B 02 F6 | 	mov	local07, local06
27cc4     1C 4E 05 F1 | 	add	fp, #28
27cc8     A7 2C 02 FB | 	rdlong	local08, fp
27ccc     20 4E 85 F1 | 	sub	fp, #32
27cd0     01 2E 06 F6 | 	mov	local09, #1
27cd4     15 15 02 F6 | 	mov	arg02, local07
27cd8     16 17 02 F6 | 	mov	arg03, local08
27cdc     01 18 06 F6 | 	mov	arg04, #1
27ce0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
27ce4     FD 30 0A F6 | 	mov	local10, result1 wz
27ce8     1C 00 90 AD |  if_e	jmp	#LR__4077
27cec     04 4E 05 F1 | 	add	fp, #4
27cf0     A7 30 02 FB | 	rdlong	local10, fp
27cf4     04 4E 85 F1 | 	sub	fp, #4
27cf8     11 30 06 F1 | 	add	local10, #17
27cfc     18 03 48 FC | 	wrbyte	#1, local10
27d00                 | ' 				fp->fptr < fp->obj.objsize &&
27d00                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
27d00                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
27d00     01 FA 05 F6 | 	mov	result1, #1
27d04     E0 01 90 FD | 	jmp	#LR__4083
27d08                 | LR__4077
27d08     04 4E 05 F1 | 	add	fp, #4
27d0c     A7 18 02 FB | 	rdlong	arg04, fp
27d10     1C 4E 05 F1 | 	add	fp, #28
27d14     A7 FA 01 FB | 	rdlong	result1, fp
27d18     20 4E 85 F1 | 	sub	fp, #32
27d1c     1C 18 06 F1 | 	add	arg04, #28
27d20     0C FB 61 FC | 	wrlong	result1, arg04
27d24                 | LR__4078
27d24     04 4E 05 F1 | 	add	fp, #4
27d28     A7 FA 01 FB | 	rdlong	result1, fp
27d2c     14 FA 05 F1 | 	add	result1, #20
27d30     FD FA 01 FB | 	rdlong	result1, result1
27d34     FF FB 05 F5 | 	and	result1, #511
27d38     09 32 C6 F9 | 	decod	local11, #9
27d3c     FD 32 82 F1 | 	sub	local11, result1
27d40     20 4E 05 F1 | 	add	fp, #32
27d44     A7 32 62 FC | 	wrlong	local11, fp
27d48     18 4E 85 F1 | 	sub	fp, #24
27d4c     A7 FA 01 FB | 	rdlong	result1, fp
27d50     0C 4E 85 F1 | 	sub	fp, #12
27d54     FD 32 1A F2 | 	cmp	local11, result1 wcz
27d58     0C 4E 05 11 |  if_a	add	fp, #12
27d5c     A7 32 02 1B |  if_a	rdlong	local11, fp
27d60     18 4E 05 11 |  if_a	add	fp, #24
27d64     A7 32 62 1C |  if_a	wrlong	local11, fp
27d68     24 4E 85 11 |  if_a	sub	fp, #36
27d6c     04 4E 05 F1 | 	add	fp, #4
27d70     A7 32 02 FB | 	rdlong	local11, fp
27d74     19 13 02 F6 | 	mov	arg01, local11
27d78     28 12 06 F1 | 	add	arg01, #40
27d7c     14 32 06 F1 | 	add	local11, #20
27d80     19 33 02 FB | 	rdlong	local11, local11
27d84     FF 33 06 F5 | 	and	local11, #511
27d88     19 13 02 F1 | 	add	arg01, local11
27d8c     2C 4E 05 F1 | 	add	fp, #44
27d90     A7 14 02 FB | 	rdlong	arg02, fp
27d94     0C 4E 85 F1 | 	sub	fp, #12
27d98     A7 16 02 FB | 	rdlong	arg03, fp
27d9c     24 4E 85 F1 | 	sub	fp, #36
27da0     BC 3F BF FD | 	call	#__system____builtin_memmove
27da4     04 4E 05 F1 | 	add	fp, #4
27da8     A7 FA 01 FB | 	rdlong	result1, fp
27dac     FD 32 02 F6 | 	mov	local11, result1
27db0     04 4E 85 F1 | 	sub	fp, #4
27db4     10 FA 05 F1 | 	add	result1, #16
27db8     FD FA C1 FA | 	rdbyte	result1, result1
27dbc     80 FA 45 F5 | 	or	result1, #128
27dc0     10 32 06 F1 | 	add	local11, #16
27dc4     19 FB 41 FC | 	wrbyte	result1, local11
27dc8                 | LR__4079
27dc8     0C 4E 05 F1 | 	add	fp, #12
27dcc     A7 32 02 FB | 	rdlong	local11, fp
27dd0     18 4E 05 F1 | 	add	fp, #24
27dd4     A7 FA 01 FB | 	rdlong	result1, fp
27dd8     FD 32 82 F1 | 	sub	local11, result1
27ddc     18 4E 85 F1 | 	sub	fp, #24
27de0     A7 32 62 FC | 	wrlong	local11, fp
27de4     04 4E 05 F1 | 	add	fp, #4
27de8     A7 34 02 FB | 	rdlong	local12, fp
27dec     1A 33 02 FB | 	rdlong	local11, local12
27df0     14 4E 05 F1 | 	add	fp, #20
27df4     A7 36 02 FB | 	rdlong	local13, fp
27df8     1B 33 02 F1 | 	add	local11, local13
27dfc     1A 33 62 FC | 	wrlong	local11, local12
27e00     0C 4E 05 F1 | 	add	fp, #12
27e04     A7 32 02 FB | 	rdlong	local11, fp
27e08     0C 4E 85 F1 | 	sub	fp, #12
27e0c     A7 38 02 FB | 	rdlong	local14, fp
27e10     1C 33 02 F1 | 	add	local11, local14
27e14     0C 4E 05 F1 | 	add	fp, #12
27e18     A7 32 62 FC | 	wrlong	local11, fp
27e1c     2C 4E 85 F1 | 	sub	fp, #44
27e20     A7 3A 02 FB | 	rdlong	local15, fp
27e24     1D 33 02 F6 | 	mov	local11, local15
27e28     14 3A 06 F1 | 	add	local15, #20
27e2c     1D 3B 02 FB | 	rdlong	local15, local15
27e30     20 4E 05 F1 | 	add	fp, #32
27e34     A7 3C 02 FB | 	rdlong	local16, fp
27e38     1E 3B 02 F1 | 	add	local15, local16
27e3c     14 32 06 F1 | 	add	local11, #20
27e40     19 3B 62 FC | 	wrlong	local15, local11
27e44     20 4E 85 F1 | 	sub	fp, #32
27e48     A7 3E 02 FB | 	rdlong	local17, fp
27e4c     1F 33 02 F6 | 	mov	local11, local17
27e50     1F 41 02 F6 | 	mov	local18, local17
27e54     04 4E 85 F1 | 	sub	fp, #4
27e58     14 3E 06 F1 | 	add	local17, #20
27e5c     1F 43 02 FB | 	rdlong	local19, local17
27e60     0C 40 06 F1 | 	add	local18, #12
27e64     20 45 02 FB | 	rdlong	local20, local18
27e68     22 43 1A F2 | 	cmp	local19, local20 wcz
27e6c     24 00 90 ED |  if_be	jmp	#LR__4080
27e70     04 4E 05 F1 | 	add	fp, #4
27e74     A7 26 02 FB | 	rdlong	local05, fp
27e78     04 4E 85 F1 | 	sub	fp, #4
27e7c     13 23 02 F6 | 	mov	local03, local05
27e80     14 22 06 F1 | 	add	local03, #20
27e84     11 25 02 FB | 	rdlong	local04, local03
27e88     14 22 86 F1 | 	sub	local03, #20
27e8c     12 47 02 F6 | 	mov	local21, local04
27e90     20 00 90 FD | 	jmp	#LR__4081
27e94                 | LR__4080
27e94     04 4E 05 F1 | 	add	fp, #4
27e98     A7 2A 02 FB | 	rdlong	local07, fp
27e9c     04 4E 85 F1 | 	sub	fp, #4
27ea0     15 31 02 F6 | 	mov	local10, local07
27ea4     0C 30 06 F1 | 	add	local10, #12
27ea8     18 2D 02 FB | 	rdlong	local08, local10
27eac     0C 30 86 F1 | 	sub	local10, #12
27eb0     16 47 02 F6 | 	mov	local21, local08
27eb4                 | LR__4081
27eb4     0C 32 06 F1 | 	add	local11, #12
27eb8     19 47 62 FC | 	wrlong	local21, local11
27ebc     5C F9 9F FD | 	jmp	#LR__4063
27ec0                 | LR__4082
27ec0     04 4E 05 F1 | 	add	fp, #4
27ec4     A7 34 02 FB | 	rdlong	local12, fp
27ec8     1A 1F 02 F6 | 	mov	local01, local12
27ecc     04 4E 85 F1 | 	sub	fp, #4
27ed0     10 34 06 F1 | 	add	local12, #16
27ed4     1A 33 C2 FA | 	rdbyte	local11, local12
27ed8     40 32 46 F5 | 	or	local11, #64
27edc     10 1E 06 F1 | 	add	local01, #16
27ee0     0F 33 42 FC | 	wrbyte	local11, local01
27ee4                 | ' 
27ee4                 | ' 
27ee4                 | ' 
27ee4                 | ' 
27ee4                 | ' 
27ee4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
27ee4                 | ' 		fp->flag |=  0x80 ;
27ee4                 | ' 
27ee4                 | ' 	}
27ee4                 | ' 
27ee4                 | ' 	fp->flag |=  0x40 ;
27ee4                 | ' 
27ee4                 | ' 	return FR_OK ;
27ee4     00 FA 05 F6 | 	mov	result1, #0
27ee8                 | LR__4083
27ee8     A7 F0 03 F6 | 	mov	ptra, fp
27eec     B2 00 A0 FD | 	call	#popregs_
27ef0                 | _fatfs_cc_f_write_ret
27ef0     2D 00 64 FD | 	ret
27ef4                 | 
27ef4                 | _fatfs_cc_f_sync
27ef4     00 4A 05 F6 | 	mov	COUNT_, #0
27ef8     A8 00 A0 FD | 	call	#pushregs_
27efc     18 F0 07 F1 | 	add	ptra, #24
27f00     04 4E 05 F1 | 	add	fp, #4
27f04     A7 12 62 FC | 	wrlong	arg01, fp
27f08     08 4E 05 F1 | 	add	fp, #8
27f0c     A7 14 02 F6 | 	mov	arg02, fp
27f10     0C 4E 85 F1 | 	sub	fp, #12
27f14     D0 E8 BF FD | 	call	#_fatfs_cc_validate
27f18     08 4E 05 F1 | 	add	fp, #8
27f1c     A7 FA 61 FC | 	wrlong	result1, fp
27f20     08 4E 85 F1 | 	sub	fp, #8
27f24     00 FA 0D F2 | 	cmp	result1, #0 wz
27f28     C0 01 90 5D |  if_ne	jmp	#LR__4093
27f2c     04 4E 05 F1 | 	add	fp, #4
27f30     A7 18 02 FB | 	rdlong	arg04, fp
27f34     04 4E 85 F1 | 	sub	fp, #4
27f38     10 18 06 F1 | 	add	arg04, #16
27f3c     0C 19 C2 FA | 	rdbyte	arg04, arg04
27f40     40 18 CE F7 | 	test	arg04, #64 wz
27f44     A4 01 90 AD |  if_e	jmp	#LR__4092
27f48     04 4E 05 F1 | 	add	fp, #4
27f4c     A7 18 02 FB | 	rdlong	arg04, fp
27f50     04 4E 85 F1 | 	sub	fp, #4
27f54     10 18 06 F1 | 	add	arg04, #16
27f58     0C 19 C2 FA | 	rdbyte	arg04, arg04
27f5c     80 18 CE F7 | 	test	arg04, #128 wz
27f60     64 00 90 AD |  if_e	jmp	#LR__4090
27f64     0C 4E 05 F1 | 	add	fp, #12
27f68     A7 18 02 FB | 	rdlong	arg04, fp
27f6c     01 18 06 F1 | 	add	arg04, #1
27f70     0C 13 C2 FA | 	rdbyte	arg01, arg04
27f74     08 4E 85 F1 | 	sub	fp, #8
27f78     A7 18 02 FB | 	rdlong	arg04, fp
27f7c     0C 15 02 F6 | 	mov	arg02, arg04
27f80     28 14 06 F1 | 	add	arg02, #40
27f84     04 4E 85 F1 | 	sub	fp, #4
27f88     1C 18 06 F1 | 	add	arg04, #28
27f8c     0C 17 02 FB | 	rdlong	arg03, arg04
27f90     01 18 06 F6 | 	mov	arg04, #1
27f94     0C AE BF FD | 	call	#_fatfs_cc_disk_write
27f98     00 FA 0D F2 | 	cmp	result1, #0 wz
27f9c     01 FA 05 56 |  if_ne	mov	result1, #1
27fa0     54 01 90 5D |  if_ne	jmp	#LR__4094
27fa4     04 4E 05 F1 | 	add	fp, #4
27fa8     A7 18 02 FB | 	rdlong	arg04, fp
27fac     0C 17 02 F6 | 	mov	arg03, arg04
27fb0     04 4E 85 F1 | 	sub	fp, #4
27fb4     10 18 06 F1 | 	add	arg04, #16
27fb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
27fbc     7F 18 06 F5 | 	and	arg04, #127
27fc0     10 16 06 F1 | 	add	arg03, #16
27fc4     0B 19 42 FC | 	wrbyte	arg04, arg03
27fc8                 | LR__4090
27fc8     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
27fcc     10 4E 05 F1 | 	add	fp, #16
27fd0     A7 FA 61 FC | 	wrlong	result1, fp
27fd4     04 4E 85 F1 | 	sub	fp, #4
27fd8     A7 12 02 FB | 	rdlong	arg01, fp
27fdc     08 4E 85 F1 | 	sub	fp, #8
27fe0     A7 18 02 FB | 	rdlong	arg04, fp
27fe4     04 4E 85 F1 | 	sub	fp, #4
27fe8     20 18 06 F1 | 	add	arg04, #32
27fec     0C 15 02 FB | 	rdlong	arg02, arg04
27ff0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
27ff4     08 4E 05 F1 | 	add	fp, #8
27ff8     A7 FA 61 FC | 	wrlong	result1, fp
27ffc     08 4E 85 F1 | 	sub	fp, #8
28000     00 FA 0D F2 | 	cmp	result1, #0 wz
28004     E4 00 90 5D |  if_ne	jmp	#LR__4091
28008     04 4E 05 F1 | 	add	fp, #4
2800c     A7 18 02 FB | 	rdlong	arg04, fp
28010     24 18 06 F1 | 	add	arg04, #36
28014     0C 19 02 FB | 	rdlong	arg04, arg04
28018     10 4E 05 F1 | 	add	fp, #16
2801c     A7 18 62 FC | 	wrlong	arg04, fp
28020     0C 17 02 F6 | 	mov	arg03, arg04
28024     0B 16 06 F1 | 	add	arg03, #11
28028     0B 17 C2 FA | 	rdbyte	arg03, arg03
2802c     20 16 46 F5 | 	or	arg03, #32
28030     0B 18 06 F1 | 	add	arg04, #11
28034     0C 17 42 FC | 	wrbyte	arg03, arg04
28038     10 4E 85 F1 | 	sub	fp, #16
2803c     A7 18 02 FB | 	rdlong	arg04, fp
28040     0C 13 02 FB | 	rdlong	arg01, arg04
28044     10 4E 05 F1 | 	add	fp, #16
28048     A7 14 02 FB | 	rdlong	arg02, fp
2804c     14 4E 85 F1 | 	sub	fp, #20
28050     08 18 06 F1 | 	add	arg04, #8
28054     0C 17 02 FB | 	rdlong	arg03, arg04
28058     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2805c     14 4E 05 F1 | 	add	fp, #20
28060     A7 12 02 FB | 	rdlong	arg01, fp
28064     1C 12 06 F1 | 	add	arg01, #28
28068     10 4E 85 F1 | 	sub	fp, #16
2806c     A7 18 02 FB | 	rdlong	arg04, fp
28070     0C 18 06 F1 | 	add	arg04, #12
28074     0C 15 02 FB | 	rdlong	arg02, arg04
28078     09 15 62 FC | 	wrlong	arg02, arg01
2807c     10 4E 05 F1 | 	add	fp, #16
28080     A7 12 02 FB | 	rdlong	arg01, fp
28084     16 12 06 F1 | 	add	arg01, #22
28088     04 4E 85 F1 | 	sub	fp, #4
2808c     A7 14 02 FB | 	rdlong	arg02, fp
28090     09 15 62 FC | 	wrlong	arg02, arg01
28094     04 4E 05 F1 | 	add	fp, #4
28098     A7 12 02 FB | 	rdlong	arg01, fp
2809c     12 12 06 F1 | 	add	arg01, #18
280a0     09 01 58 FC | 	wrword	#0, arg01
280a4     08 4E 85 F1 | 	sub	fp, #8
280a8     A7 18 02 FB | 	rdlong	arg04, fp
280ac     03 18 06 F1 | 	add	arg04, #3
280b0     0C 03 48 FC | 	wrbyte	#1, arg04
280b4     A7 12 02 FB | 	rdlong	arg01, fp
280b8     0C 4E 85 F1 | 	sub	fp, #12
280bc     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
280c0     08 4E 05 F1 | 	add	fp, #8
280c4     A7 FA 61 FC | 	wrlong	result1, fp
280c8     04 4E 85 F1 | 	sub	fp, #4
280cc     A7 18 02 FB | 	rdlong	arg04, fp
280d0     0C 17 02 F6 | 	mov	arg03, arg04
280d4     04 4E 85 F1 | 	sub	fp, #4
280d8     10 18 06 F1 | 	add	arg04, #16
280dc     0C 19 C2 FA | 	rdbyte	arg04, arg04
280e0     BF 18 06 F5 | 	and	arg04, #191
280e4     10 16 06 F1 | 	add	arg03, #16
280e8     0B 19 42 FC | 	wrbyte	arg04, arg03
280ec                 | LR__4091
280ec                 | LR__4092
280ec                 | LR__4093
280ec                 | ' 					dir = fp->dir_ptr;
280ec                 | ' 					dir[ 11 ] |=  0x20 ;
280ec                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
280ec                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
280ec                 | ' 					st_dword(dir +  22 , tm);
280ec                 | ' 					st_word(dir +  18 , 0);
280ec                 | ' 					fs->wflag = 1;
280ec                 | ' 					res = sync_fs(fs);
280ec                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
280ec                 | ' 				}
280ec                 | ' 			}
280ec                 | ' 		}
280ec                 | ' 	}
280ec                 | ' 
280ec                 | ' 	return res ;
280ec     08 4E 05 F1 | 	add	fp, #8
280f0     A7 FA 01 FB | 	rdlong	result1, fp
280f4     08 4E 85 F1 | 	sub	fp, #8
280f8                 | LR__4094
280f8     A7 F0 03 F6 | 	mov	ptra, fp
280fc     B2 00 A0 FD | 	call	#popregs_
28100                 | _fatfs_cc_f_sync_ret
28100     2D 00 64 FD | 	ret
28104                 | 
28104                 | _fatfs_cc_f_close
28104     01 4A 05 F6 | 	mov	COUNT_, #1
28108     A8 00 A0 FD | 	call	#pushregs_
2810c     10 F0 07 F1 | 	add	ptra, #16
28110     04 4E 05 F1 | 	add	fp, #4
28114     A7 12 62 FC | 	wrlong	arg01, fp
28118     04 4E 85 F1 | 	sub	fp, #4
2811c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
28120     08 4E 05 F1 | 	add	fp, #8
28124     A7 FA 61 FC | 	wrlong	result1, fp
28128     08 4E 85 F1 | 	sub	fp, #8
2812c     00 FA 0D F2 | 	cmp	result1, #0 wz
28130     38 00 90 5D |  if_ne	jmp	#LR__4100
28134     04 4E 05 F1 | 	add	fp, #4
28138     A7 12 02 FB | 	rdlong	arg01, fp
2813c     08 4E 05 F1 | 	add	fp, #8
28140     A7 14 02 F6 | 	mov	arg02, fp
28144     0C 4E 85 F1 | 	sub	fp, #12
28148     9C E6 BF FD | 	call	#_fatfs_cc_validate
2814c     08 4E 05 F1 | 	add	fp, #8
28150     A7 FA 61 FC | 	wrlong	result1, fp
28154     08 4E 85 F1 | 	sub	fp, #8
28158     00 FA 0D F2 | 	cmp	result1, #0 wz
2815c     04 4E 05 A1 |  if_e	add	fp, #4
28160     A7 1E 02 AB |  if_e	rdlong	local01, fp
28164     04 4E 85 A1 |  if_e	sub	fp, #4
28168     0F 01 68 AC |  if_e	wrlong	#0, local01
2816c                 | LR__4100
2816c                 | ' 
2816c                 | ' 
2816c                 | ' 
2816c                 | ' 
2816c                 | ' 			fp->obj.fs = 0;
2816c                 | ' #line 4192 "ff.c"
2816c                 | ' 		}
2816c                 | ' 	}
2816c                 | ' 	return res;
2816c     08 4E 05 F1 | 	add	fp, #8
28170     A7 FA 01 FB | 	rdlong	result1, fp
28174     08 4E 85 F1 | 	sub	fp, #8
28178     A7 F0 03 F6 | 	mov	ptra, fp
2817c     B2 00 A0 FD | 	call	#popregs_
28180                 | _fatfs_cc_f_close_ret
28180     2D 00 64 FD | 	ret
28184                 | 
28184                 | _fatfs_cc_f_lseek
28184     00 4A 05 F6 | 	mov	COUNT_, #0
28188     A8 00 A0 FD | 	call	#pushregs_
2818c     24 F0 07 F1 | 	add	ptra, #36
28190     04 4E 05 F1 | 	add	fp, #4
28194     A7 12 62 FC | 	wrlong	arg01, fp
28198     04 4E 05 F1 | 	add	fp, #4
2819c     A7 14 62 FC | 	wrlong	arg02, fp
281a0     04 4E 85 F1 | 	sub	fp, #4
281a4     A7 12 02 FB | 	rdlong	arg01, fp
281a8     0C 4E 05 F1 | 	add	fp, #12
281ac     A7 14 02 F6 | 	mov	arg02, fp
281b0     10 4E 85 F1 | 	sub	fp, #16
281b4     30 E6 BF FD | 	call	#_fatfs_cc_validate
281b8     0C 4E 05 F1 | 	add	fp, #12
281bc     A7 FA 61 FC | 	wrlong	result1, fp
281c0     0C 4E 85 F1 | 	sub	fp, #12
281c4     00 FA 0D F2 | 	cmp	result1, #0 wz
281c8     1C 00 90 5D |  if_ne	jmp	#LR__4110
281cc     04 4E 05 F1 | 	add	fp, #4
281d0     A7 18 02 FB | 	rdlong	arg04, fp
281d4     11 18 06 F1 | 	add	arg04, #17
281d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
281dc     08 4E 05 F1 | 	add	fp, #8
281e0     A7 18 62 FC | 	wrlong	arg04, fp
281e4     0C 4E 85 F1 | 	sub	fp, #12
281e8                 | LR__4110
281e8     0C 4E 05 F1 | 	add	fp, #12
281ec     A7 18 0A FB | 	rdlong	arg04, fp wz
281f0     0C 4E 85 F1 | 	sub	fp, #12
281f4     0C 4E 05 51 |  if_ne	add	fp, #12
281f8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
281fc     0C 4E 85 51 |  if_ne	sub	fp, #12
28200     40 06 90 5D |  if_ne	jmp	#LR__4133
28204     04 4E 05 F1 | 	add	fp, #4
28208     A7 18 02 FB | 	rdlong	arg04, fp
2820c     04 4E 05 F1 | 	add	fp, #4
28210     A7 16 02 FB | 	rdlong	arg03, fp
28214     08 4E 85 F1 | 	sub	fp, #8
28218     0C 18 06 F1 | 	add	arg04, #12
2821c     0C 19 02 FB | 	rdlong	arg04, arg04
28220     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
28224     3C 00 90 ED |  if_be	jmp	#LR__4111
28228     04 4E 05 F1 | 	add	fp, #4
2822c     A7 16 02 FB | 	rdlong	arg03, fp
28230     04 4E 85 F1 | 	sub	fp, #4
28234     10 16 06 F1 | 	add	arg03, #16
28238     0B 17 C2 FA | 	rdbyte	arg03, arg03
2823c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
28240     02 16 CE F7 | 	test	arg03, #2 wz
28244     1C 00 90 5D |  if_ne	jmp	#LR__4111
28248     04 4E 05 F1 | 	add	fp, #4
2824c     A7 16 02 FB | 	rdlong	arg03, fp
28250     0C 16 06 F1 | 	add	arg03, #12
28254     0B 17 02 FB | 	rdlong	arg03, arg03
28258     04 4E 05 F1 | 	add	fp, #4
2825c     A7 16 62 FC | 	wrlong	arg03, fp
28260     08 4E 85 F1 | 	sub	fp, #8
28264                 | LR__4111
28264     04 4E 05 F1 | 	add	fp, #4
28268     A7 16 02 FB | 	rdlong	arg03, fp
2826c     14 16 06 F1 | 	add	arg03, #20
28270     0B 17 02 FB | 	rdlong	arg03, arg03
28274     1C 4E 05 F1 | 	add	fp, #28
28278     A7 16 62 FC | 	wrlong	arg03, fp
2827c     1C 4E 85 F1 | 	sub	fp, #28
28280     A7 16 02 FB | 	rdlong	arg03, fp
28284     18 4E 05 F1 | 	add	fp, #24
28288     A7 00 68 FC | 	wrlong	#0, fp
2828c     14 16 06 F1 | 	add	arg03, #20
28290     0B 01 68 FC | 	wrlong	#0, arg03
28294     14 4E 85 F1 | 	sub	fp, #20
28298     A7 16 02 FB | 	rdlong	arg03, fp
2829c     08 4E 85 F1 | 	sub	fp, #8
282a0     01 16 16 F2 | 	cmp	arg03, #1 wc
282a4     E4 03 90 CD |  if_b	jmp	#LR__4127
282a8     10 4E 05 F1 | 	add	fp, #16
282ac     A7 16 02 FB | 	rdlong	arg03, fp
282b0     0A 16 06 F1 | 	add	arg03, #10
282b4     0B 19 E2 FA | 	rdword	arg04, arg03
282b8     09 18 66 F0 | 	shl	arg04, #9
282bc     08 4E 05 F1 | 	add	fp, #8
282c0     A7 18 62 FC | 	wrlong	arg04, fp
282c4     08 4E 05 F1 | 	add	fp, #8
282c8     A7 18 02 FB | 	rdlong	arg04, fp
282cc     20 4E 85 F1 | 	sub	fp, #32
282d0     01 18 16 F2 | 	cmp	arg04, #1 wc
282d4     AC 00 90 CD |  if_b	jmp	#LR__4112
282d8     08 4E 05 F1 | 	add	fp, #8
282dc     A7 18 02 FB | 	rdlong	arg04, fp
282e0     01 18 86 F1 | 	sub	arg04, #1
282e4     10 4E 05 F1 | 	add	fp, #16
282e8     A7 16 02 FB | 	rdlong	arg03, fp
282ec     0B 19 12 FD | 	qdiv	arg04, arg03
282f0     08 4E 05 F1 | 	add	fp, #8
282f4     A7 FA 01 FB | 	rdlong	result1, fp
282f8     01 FA 85 F1 | 	sub	result1, #1
282fc     18 18 62 FD | 	getqx	arg04
28300     0B FB 11 FD | 	qdiv	result1, arg03
28304     20 4E 85 F1 | 	sub	fp, #32
28308     18 16 62 FD | 	getqx	arg03
2830c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
28310     70 00 90 CD |  if_b	jmp	#LR__4112
28314     04 4E 05 F1 | 	add	fp, #4
28318     A7 16 02 FB | 	rdlong	arg03, fp
2831c     1C 4E 05 F1 | 	add	fp, #28
28320     A7 FA 01 FB | 	rdlong	result1, fp
28324     01 FA 85 F1 | 	sub	result1, #1
28328     08 4E 85 F1 | 	sub	fp, #8
2832c     A7 18 02 FB | 	rdlong	arg04, fp
28330     01 18 86 F1 | 	sub	arg04, #1
28334     0C FB 21 F5 | 	andn	result1, arg04
28338     14 16 06 F1 | 	add	arg03, #20
2833c     0B FB 61 FC | 	wrlong	result1, arg03
28340     10 4E 85 F1 | 	sub	fp, #16
28344     A7 16 02 FB | 	rdlong	arg03, fp
28348     04 4E 85 F1 | 	sub	fp, #4
2834c     A7 18 02 FB | 	rdlong	arg04, fp
28350     14 18 06 F1 | 	add	arg04, #20
28354     0C 19 02 FB | 	rdlong	arg04, arg04
28358     0C 17 82 F1 | 	sub	arg03, arg04
2835c     04 4E 05 F1 | 	add	fp, #4
28360     A7 16 62 FC | 	wrlong	arg03, fp
28364     04 4E 85 F1 | 	sub	fp, #4
28368     A7 16 02 FB | 	rdlong	arg03, fp
2836c     18 16 06 F1 | 	add	arg03, #24
28370     0B 17 02 FB | 	rdlong	arg03, arg03
28374     10 4E 05 F1 | 	add	fp, #16
28378     A7 16 62 FC | 	wrlong	arg03, fp
2837c     14 4E 85 F1 | 	sub	fp, #20
28380     D0 00 90 FD | 	jmp	#LR__4116
28384                 | LR__4112
28384     04 4E 05 F1 | 	add	fp, #4
28388     A7 16 02 FB | 	rdlong	arg03, fp
2838c     08 16 06 F1 | 	add	arg03, #8
28390     0B 17 0A FB | 	rdlong	arg03, arg03 wz
28394     10 4E 05 F1 | 	add	fp, #16
28398     A7 16 62 FC | 	wrlong	arg03, fp
2839c     14 4E 85 F1 | 	sub	fp, #20
283a0     94 00 90 5D |  if_ne	jmp	#LR__4115
283a4     04 4E 05 F1 | 	add	fp, #4
283a8     A7 12 02 FB | 	rdlong	arg01, fp
283ac     04 4E 85 F1 | 	sub	fp, #4
283b0     00 14 06 F6 | 	mov	arg02, #0
283b4     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
283b8     14 4E 05 F1 | 	add	fp, #20
283bc     A7 FA 61 FC | 	wrlong	result1, fp
283c0     14 4E 85 F1 | 	sub	fp, #20
283c4     01 FA 0D F2 | 	cmp	result1, #1 wz
283c8     1C 00 90 5D |  if_ne	jmp	#LR__4113
283cc     04 4E 05 F1 | 	add	fp, #4
283d0     A7 16 02 FB | 	rdlong	arg03, fp
283d4     04 4E 85 F1 | 	sub	fp, #4
283d8     11 16 06 F1 | 	add	arg03, #17
283dc     0B 05 48 FC | 	wrbyte	#2, arg03
283e0     02 FA 05 F6 | 	mov	result1, #2
283e4     5C 04 90 FD | 	jmp	#LR__4133
283e8                 | LR__4113
283e8     14 4E 05 F1 | 	add	fp, #20
283ec     A7 FA 01 FB | 	rdlong	result1, fp
283f0     14 4E 85 F1 | 	sub	fp, #20
283f4     FF FF 7F FF 
283f8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
283fc     1C 00 90 5D |  if_ne	jmp	#LR__4114
28400     04 4E 05 F1 | 	add	fp, #4
28404     A7 16 02 FB | 	rdlong	arg03, fp
28408     04 4E 85 F1 | 	sub	fp, #4
2840c     11 16 06 F1 | 	add	arg03, #17
28410     0B 03 48 FC | 	wrbyte	#1, arg03
28414     01 FA 05 F6 | 	mov	result1, #1
28418     28 04 90 FD | 	jmp	#LR__4133
2841c                 | LR__4114
2841c     04 4E 05 F1 | 	add	fp, #4
28420     A7 16 02 FB | 	rdlong	arg03, fp
28424     10 4E 05 F1 | 	add	fp, #16
28428     A7 18 02 FB | 	rdlong	arg04, fp
2842c     14 4E 85 F1 | 	sub	fp, #20
28430     08 16 06 F1 | 	add	arg03, #8
28434     0B 19 62 FC | 	wrlong	arg04, arg03
28438                 | LR__4115
28438     04 4E 05 F1 | 	add	fp, #4
2843c     A7 16 02 FB | 	rdlong	arg03, fp
28440     10 4E 05 F1 | 	add	fp, #16
28444     A7 18 02 FB | 	rdlong	arg04, fp
28448     14 4E 85 F1 | 	sub	fp, #20
2844c     18 16 06 F1 | 	add	arg03, #24
28450     0B 19 62 FC | 	wrlong	arg04, arg03
28454                 | LR__4116
28454     14 4E 05 F1 | 	add	fp, #20
28458     A7 16 0A FB | 	rdlong	arg03, fp wz
2845c     14 4E 85 F1 | 	sub	fp, #20
28460     28 02 90 AD |  if_e	jmp	#LR__4126
28464                 | ' 				while (ofs > bcs) {
28464                 | LR__4117
28464     08 4E 05 F1 | 	add	fp, #8
28468     A7 18 02 FB | 	rdlong	arg04, fp
2846c     10 4E 05 F1 | 	add	fp, #16
28470     A7 16 02 FB | 	rdlong	arg03, fp
28474     18 4E 85 F1 | 	sub	fp, #24
28478     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2847c     68 01 90 ED |  if_be	jmp	#LR__4123
28480     08 4E 05 F1 | 	add	fp, #8
28484     A7 18 02 FB | 	rdlong	arg04, fp
28488     10 4E 05 F1 | 	add	fp, #16
2848c     A7 16 02 FB | 	rdlong	arg03, fp
28490     0B 19 82 F1 | 	sub	arg04, arg03
28494     10 4E 85 F1 | 	sub	fp, #16
28498     A7 18 62 FC | 	wrlong	arg04, fp
2849c     04 4E 85 F1 | 	sub	fp, #4
284a0     A7 18 02 FB | 	rdlong	arg04, fp
284a4     0C FB 01 F6 | 	mov	result1, arg04
284a8     14 18 06 F1 | 	add	arg04, #20
284ac     0C 19 02 FB | 	rdlong	arg04, arg04
284b0     14 4E 05 F1 | 	add	fp, #20
284b4     A7 16 02 FB | 	rdlong	arg03, fp
284b8     0B 19 02 F1 | 	add	arg04, arg03
284bc     14 FA 05 F1 | 	add	result1, #20
284c0     FD 18 62 FC | 	wrlong	arg04, result1
284c4     14 4E 85 F1 | 	sub	fp, #20
284c8     A7 16 02 FB | 	rdlong	arg03, fp
284cc     04 4E 85 F1 | 	sub	fp, #4
284d0     10 16 06 F1 | 	add	arg03, #16
284d4     0B 17 C2 FA | 	rdbyte	arg03, arg03
284d8     02 16 CE F7 | 	test	arg03, #2 wz
284dc     3C 00 90 AD |  if_e	jmp	#LR__4118
284e0     04 4E 05 F1 | 	add	fp, #4
284e4     A7 12 02 FB | 	rdlong	arg01, fp
284e8     10 4E 05 F1 | 	add	fp, #16
284ec     A7 14 02 FB | 	rdlong	arg02, fp
284f0     14 4E 85 F1 | 	sub	fp, #20
284f4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
284f8     14 4E 05 F1 | 	add	fp, #20
284fc     A7 FA 61 FC | 	wrlong	result1, fp
28500     00 FA 4D F2 | 	cmps	result1, #0 wz
28504     14 4E 85 F1 | 	sub	fp, #20
28508     08 4E 05 A1 |  if_e	add	fp, #8
2850c     A7 00 68 AC |  if_e	wrlong	#0, fp
28510     08 4E 85 A1 |  if_e	sub	fp, #8
28514                 | ' 							ofs = 0; break;
28514     D0 00 90 AD |  if_e	jmp	#LR__4123
28518     24 00 90 FD | 	jmp	#LR__4119
2851c                 | LR__4118
2851c     04 4E 05 F1 | 	add	fp, #4
28520     A7 12 02 FB | 	rdlong	arg01, fp
28524     10 4E 05 F1 | 	add	fp, #16
28528     A7 14 02 FB | 	rdlong	arg02, fp
2852c     14 4E 85 F1 | 	sub	fp, #20
28530     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
28534     14 4E 05 F1 | 	add	fp, #20
28538     A7 FA 61 FC | 	wrlong	result1, fp
2853c     14 4E 85 F1 | 	sub	fp, #20
28540                 | LR__4119
28540     14 4E 05 F1 | 	add	fp, #20
28544     A7 16 02 FB | 	rdlong	arg03, fp
28548     14 4E 85 F1 | 	sub	fp, #20
2854c     FF FF 7F FF 
28550     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
28554     1C 00 90 5D |  if_ne	jmp	#LR__4120
28558     04 4E 05 F1 | 	add	fp, #4
2855c     A7 16 02 FB | 	rdlong	arg03, fp
28560     04 4E 85 F1 | 	sub	fp, #4
28564     11 16 06 F1 | 	add	arg03, #17
28568     0B 03 48 FC | 	wrbyte	#1, arg03
2856c     01 FA 05 F6 | 	mov	result1, #1
28570     D0 02 90 FD | 	jmp	#LR__4133
28574                 | LR__4120
28574     14 4E 05 F1 | 	add	fp, #20
28578     A7 16 02 FB | 	rdlong	arg03, fp
2857c     14 4E 85 F1 | 	sub	fp, #20
28580     02 16 16 F2 | 	cmp	arg03, #2 wc
28584     24 00 90 CD |  if_b	jmp	#LR__4121
28588     10 4E 05 F1 | 	add	fp, #16
2858c     A7 18 02 FB | 	rdlong	arg04, fp
28590     04 4E 05 F1 | 	add	fp, #4
28594     A7 16 02 FB | 	rdlong	arg03, fp
28598     14 4E 85 F1 | 	sub	fp, #20
2859c     18 18 06 F1 | 	add	arg04, #24
285a0     0C 19 02 FB | 	rdlong	arg04, arg04
285a4     0C 17 12 F2 | 	cmp	arg03, arg04 wc
285a8     1C 00 90 CD |  if_b	jmp	#LR__4122
285ac                 | LR__4121
285ac     04 4E 05 F1 | 	add	fp, #4
285b0     A7 16 02 FB | 	rdlong	arg03, fp
285b4     04 4E 85 F1 | 	sub	fp, #4
285b8     11 16 06 F1 | 	add	arg03, #17
285bc     0B 05 48 FC | 	wrbyte	#2, arg03
285c0     02 FA 05 F6 | 	mov	result1, #2
285c4     7C 02 90 FD | 	jmp	#LR__4133
285c8                 | LR__4122
285c8     04 4E 05 F1 | 	add	fp, #4
285cc     A7 18 02 FB | 	rdlong	arg04, fp
285d0     10 4E 05 F1 | 	add	fp, #16
285d4     A7 16 02 FB | 	rdlong	arg03, fp
285d8     14 4E 85 F1 | 	sub	fp, #20
285dc     18 18 06 F1 | 	add	arg04, #24
285e0     0C 17 62 FC | 	wrlong	arg03, arg04
285e4     7C FE 9F FD | 	jmp	#LR__4117
285e8                 | LR__4123
285e8     04 4E 05 F1 | 	add	fp, #4
285ec     A7 16 02 FB | 	rdlong	arg03, fp
285f0     0B 13 02 F6 | 	mov	arg01, arg03
285f4     14 16 06 F1 | 	add	arg03, #20
285f8     0B 15 02 FB | 	rdlong	arg02, arg03
285fc     04 4E 05 F1 | 	add	fp, #4
28600     A7 16 02 FB | 	rdlong	arg03, fp
28604     0B 15 02 F1 | 	add	arg02, arg03
28608     14 12 06 F1 | 	add	arg01, #20
2860c     09 15 62 FC | 	wrlong	arg02, arg01
28610     A7 16 02 FB | 	rdlong	arg03, fp
28614     08 4E 85 F1 | 	sub	fp, #8
28618     FF 17 CE F7 | 	test	arg03, #511 wz
2861c     6C 00 90 AD |  if_e	jmp	#LR__4125
28620     10 4E 05 F1 | 	add	fp, #16
28624     A7 12 02 FB | 	rdlong	arg01, fp
28628     04 4E 05 F1 | 	add	fp, #4
2862c     A7 14 02 FB | 	rdlong	arg02, fp
28630     14 4E 85 F1 | 	sub	fp, #20
28634     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
28638     1C 4E 05 F1 | 	add	fp, #28
2863c     A7 FA 61 FC | 	wrlong	result1, fp
28640     1C 4E 85 F1 | 	sub	fp, #28
28644     00 FA 0D F2 | 	cmp	result1, #0 wz
28648     1C 00 90 5D |  if_ne	jmp	#LR__4124
2864c     04 4E 05 F1 | 	add	fp, #4
28650     A7 16 02 FB | 	rdlong	arg03, fp
28654     04 4E 85 F1 | 	sub	fp, #4
28658     11 16 06 F1 | 	add	arg03, #17
2865c     0B 05 48 FC | 	wrbyte	#2, arg03
28660     02 FA 05 F6 | 	mov	result1, #2
28664     DC 01 90 FD | 	jmp	#LR__4133
28668                 | LR__4124
28668     1C 4E 05 F1 | 	add	fp, #28
2866c     A7 18 02 FB | 	rdlong	arg04, fp
28670     14 4E 85 F1 | 	sub	fp, #20
28674     A7 16 02 FB | 	rdlong	arg03, fp
28678     09 16 46 F0 | 	shr	arg03, #9
2867c     0B 19 02 F1 | 	add	arg04, arg03
28680     14 4E 05 F1 | 	add	fp, #20
28684     A7 18 62 FC | 	wrlong	arg04, fp
28688     1C 4E 85 F1 | 	sub	fp, #28
2868c                 | LR__4125
2868c                 | LR__4126
2868c                 | LR__4127
2868c     04 4E 05 F1 | 	add	fp, #4
28690     A7 18 02 FB | 	rdlong	arg04, fp
28694     0C 17 02 F6 | 	mov	arg03, arg04
28698     04 4E 85 F1 | 	sub	fp, #4
2869c     14 16 06 F1 | 	add	arg03, #20
286a0     0B 17 02 FB | 	rdlong	arg03, arg03
286a4     0C 18 06 F1 | 	add	arg04, #12
286a8     0C 19 02 FB | 	rdlong	arg04, arg04
286ac     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
286b0     3C 00 90 ED |  if_be	jmp	#LR__4128
286b4     04 4E 05 F1 | 	add	fp, #4
286b8     A7 18 02 FB | 	rdlong	arg04, fp
286bc     0C 17 02 F6 | 	mov	arg03, arg04
286c0     14 18 06 F1 | 	add	arg04, #20
286c4     0C 19 02 FB | 	rdlong	arg04, arg04
286c8     0C 16 06 F1 | 	add	arg03, #12
286cc     0B 19 62 FC | 	wrlong	arg04, arg03
286d0     A7 18 02 FB | 	rdlong	arg04, fp
286d4     0C 17 02 F6 | 	mov	arg03, arg04
286d8     04 4E 85 F1 | 	sub	fp, #4
286dc     10 18 06 F1 | 	add	arg04, #16
286e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
286e4     40 18 46 F5 | 	or	arg04, #64
286e8     10 16 06 F1 | 	add	arg03, #16
286ec     0B 19 42 FC | 	wrbyte	arg04, arg03
286f0                 | LR__4128
286f0     04 4E 05 F1 | 	add	fp, #4
286f4     A7 16 02 FB | 	rdlong	arg03, fp
286f8     04 4E 85 F1 | 	sub	fp, #4
286fc     14 16 06 F1 | 	add	arg03, #20
28700     0B 17 02 FB | 	rdlong	arg03, arg03
28704     FF 17 CE F7 | 	test	arg03, #511 wz
28708     2C 01 90 AD |  if_e	jmp	#LR__4132
2870c     04 4E 05 F1 | 	add	fp, #4
28710     A7 18 02 FB | 	rdlong	arg04, fp
28714     18 4E 05 F1 | 	add	fp, #24
28718     A7 16 02 FB | 	rdlong	arg03, fp
2871c     1C 4E 85 F1 | 	sub	fp, #28
28720     1C 18 06 F1 | 	add	arg04, #28
28724     0C 19 02 FB | 	rdlong	arg04, arg04
28728     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2872c     08 01 90 AD |  if_e	jmp	#LR__4132
28730     04 4E 05 F1 | 	add	fp, #4
28734     A7 16 02 FB | 	rdlong	arg03, fp
28738     04 4E 85 F1 | 	sub	fp, #4
2873c     10 16 06 F1 | 	add	arg03, #16
28740     0B 17 C2 FA | 	rdbyte	arg03, arg03
28744     80 16 CE F7 | 	test	arg03, #128 wz
28748     7C 00 90 AD |  if_e	jmp	#LR__4130
2874c     10 4E 05 F1 | 	add	fp, #16
28750     A7 16 02 FB | 	rdlong	arg03, fp
28754     01 16 06 F1 | 	add	arg03, #1
28758     0B 13 C2 FA | 	rdbyte	arg01, arg03
2875c     0C 4E 85 F1 | 	sub	fp, #12
28760     A7 16 02 FB | 	rdlong	arg03, fp
28764     0B 15 02 F6 | 	mov	arg02, arg03
28768     28 14 06 F1 | 	add	arg02, #40
2876c     04 4E 85 F1 | 	sub	fp, #4
28770     1C 16 06 F1 | 	add	arg03, #28
28774     0B 17 02 FB | 	rdlong	arg03, arg03
28778     01 18 06 F6 | 	mov	arg04, #1
2877c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
28780     00 FA 0D F2 | 	cmp	result1, #0 wz
28784     1C 00 90 AD |  if_e	jmp	#LR__4129
28788     04 4E 05 F1 | 	add	fp, #4
2878c     A7 16 02 FB | 	rdlong	arg03, fp
28790     04 4E 85 F1 | 	sub	fp, #4
28794     11 16 06 F1 | 	add	arg03, #17
28798     0B 03 48 FC | 	wrbyte	#1, arg03
2879c     01 FA 05 F6 | 	mov	result1, #1
287a0     A0 00 90 FD | 	jmp	#LR__4133
287a4                 | LR__4129
287a4     04 4E 05 F1 | 	add	fp, #4
287a8     A7 18 02 FB | 	rdlong	arg04, fp
287ac     0C 17 02 F6 | 	mov	arg03, arg04
287b0     04 4E 85 F1 | 	sub	fp, #4
287b4     10 18 06 F1 | 	add	arg04, #16
287b8     0C 19 C2 FA | 	rdbyte	arg04, arg04
287bc     7F 18 06 F5 | 	and	arg04, #127
287c0     10 16 06 F1 | 	add	arg03, #16
287c4     0B 19 42 FC | 	wrbyte	arg04, arg03
287c8                 | LR__4130
287c8     10 4E 05 F1 | 	add	fp, #16
287cc     A7 16 02 FB | 	rdlong	arg03, fp
287d0     01 16 06 F1 | 	add	arg03, #1
287d4     0B 13 C2 FA | 	rdbyte	arg01, arg03
287d8     0C 4E 85 F1 | 	sub	fp, #12
287dc     A7 14 02 FB | 	rdlong	arg02, fp
287e0     28 14 06 F1 | 	add	arg02, #40
287e4     18 4E 05 F1 | 	add	fp, #24
287e8     A7 16 02 FB | 	rdlong	arg03, fp
287ec     1C 4E 85 F1 | 	sub	fp, #28
287f0     01 18 06 F6 | 	mov	arg04, #1
287f4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
287f8     00 FA 0D F2 | 	cmp	result1, #0 wz
287fc     1C 00 90 AD |  if_e	jmp	#LR__4131
28800     04 4E 05 F1 | 	add	fp, #4
28804     A7 16 02 FB | 	rdlong	arg03, fp
28808     04 4E 85 F1 | 	sub	fp, #4
2880c     11 16 06 F1 | 	add	arg03, #17
28810     0B 03 48 FC | 	wrbyte	#1, arg03
28814     01 FA 05 F6 | 	mov	result1, #1
28818     28 00 90 FD | 	jmp	#LR__4133
2881c                 | LR__4131
2881c     04 4E 05 F1 | 	add	fp, #4
28820     A7 18 02 FB | 	rdlong	arg04, fp
28824     18 4E 05 F1 | 	add	fp, #24
28828     A7 16 02 FB | 	rdlong	arg03, fp
2882c     1C 4E 85 F1 | 	sub	fp, #28
28830     1C 18 06 F1 | 	add	arg04, #28
28834     0C 17 62 FC | 	wrlong	arg03, arg04
28838                 | LR__4132
28838                 | ' 
28838                 | ' 			fp->sect = nsect;
28838                 | ' 		}
28838                 | ' 	}
28838                 | ' 
28838                 | ' 	return res ;
28838     0C 4E 05 F1 | 	add	fp, #12
2883c     A7 FA 01 FB | 	rdlong	result1, fp
28840     0C 4E 85 F1 | 	sub	fp, #12
28844                 | LR__4133
28844     A7 F0 03 F6 | 	mov	ptra, fp
28848     B2 00 A0 FD | 	call	#popregs_
2884c                 | _fatfs_cc_f_lseek_ret
2884c     2D 00 64 FD | 	ret
28850                 | 
28850                 | _fatfs_cc_f_opendir
28850     01 4A 05 F6 | 	mov	COUNT_, #1
28854     A8 00 A0 FD | 	call	#pushregs_
28858     14 F0 07 F1 | 	add	ptra, #20
2885c     04 4E 05 F1 | 	add	fp, #4
28860     A7 12 62 FC | 	wrlong	arg01, fp
28864     04 4E 05 F1 | 	add	fp, #4
28868     A7 14 62 FC | 	wrlong	arg02, fp
2886c     04 4E 85 F1 | 	sub	fp, #4
28870     A7 16 0A FB | 	rdlong	arg03, fp wz
28874     04 4E 85 F1 | 	sub	fp, #4
28878     09 FA 05 A6 |  if_e	mov	result1, #9
2887c     78 01 90 AD |  if_e	jmp	#LR__4146
28880     08 4E 05 F1 | 	add	fp, #8
28884     A7 12 02 F6 | 	mov	arg01, fp
28888     08 4E 05 F1 | 	add	fp, #8
2888c     A7 14 02 F6 | 	mov	arg02, fp
28890     10 4E 85 F1 | 	sub	fp, #16
28894     00 16 06 F6 | 	mov	arg03, #0
28898     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2889c     0C 4E 05 F1 | 	add	fp, #12
288a0     A7 FA 61 FC | 	wrlong	result1, fp
288a4     0C 4E 85 F1 | 	sub	fp, #12
288a8     00 FA 0D F2 | 	cmp	result1, #0 wz
288ac     20 01 90 5D |  if_ne	jmp	#LR__4145
288b0     04 4E 05 F1 | 	add	fp, #4
288b4     A7 16 02 FB | 	rdlong	arg03, fp
288b8     0C 4E 05 F1 | 	add	fp, #12
288bc     A7 FA 01 FB | 	rdlong	result1, fp
288c0     0B FB 61 FC | 	wrlong	result1, arg03
288c4     0C 4E 85 F1 | 	sub	fp, #12
288c8     A7 12 02 FB | 	rdlong	arg01, fp
288cc     04 4E 05 F1 | 	add	fp, #4
288d0     A7 14 02 FB | 	rdlong	arg02, fp
288d4     08 4E 85 F1 | 	sub	fp, #8
288d8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
288dc     0C 4E 05 F1 | 	add	fp, #12
288e0     A7 FA 61 FC | 	wrlong	result1, fp
288e4     0C 4E 85 F1 | 	sub	fp, #12
288e8     00 FA 0D F2 | 	cmp	result1, #0 wz
288ec     C4 00 90 5D |  if_ne	jmp	#LR__4144
288f0     04 4E 05 F1 | 	add	fp, #4
288f4     A7 16 02 FB | 	rdlong	arg03, fp
288f8     04 4E 85 F1 | 	sub	fp, #4
288fc     2B 16 06 F1 | 	add	arg03, #43
28900     0B 17 C2 FA | 	rdbyte	arg03, arg03
28904     80 16 CE F7 | 	test	arg03, #128 wz
28908     58 00 90 5D |  if_ne	jmp	#LR__4142
2890c     04 4E 05 F1 | 	add	fp, #4
28910     A7 16 02 FB | 	rdlong	arg03, fp
28914     04 4E 85 F1 | 	sub	fp, #4
28918     06 16 06 F1 | 	add	arg03, #6
2891c     0B 17 C2 FA | 	rdbyte	arg03, arg03
28920     10 16 CE F7 | 	test	arg03, #16 wz
28924     30 00 90 AD |  if_e	jmp	#LR__4140
28928     04 4E 05 F1 | 	add	fp, #4
2892c     A7 16 02 FB | 	rdlong	arg03, fp
28930     0B 1F 02 F6 | 	mov	local01, arg03
28934     0C 4E 05 F1 | 	add	fp, #12
28938     A7 12 02 FB | 	rdlong	arg01, fp
2893c     10 4E 85 F1 | 	sub	fp, #16
28940     1C 16 06 F1 | 	add	arg03, #28
28944     0B 15 02 FB | 	rdlong	arg02, arg03
28948     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2894c     08 1E 06 F1 | 	add	local01, #8
28950     0F FB 61 FC | 	wrlong	result1, local01
28954     0C 00 90 FD | 	jmp	#LR__4141
28958                 | LR__4140
28958     0C 4E 05 F1 | 	add	fp, #12
2895c     A7 0A 68 FC | 	wrlong	#5, fp
28960     0C 4E 85 F1 | 	sub	fp, #12
28964                 | LR__4141
28964                 | LR__4142
28964     0C 4E 05 F1 | 	add	fp, #12
28968     A7 1E 0A FB | 	rdlong	local01, fp wz
2896c     0C 4E 85 F1 | 	sub	fp, #12
28970     40 00 90 5D |  if_ne	jmp	#LR__4143
28974     04 4E 05 F1 | 	add	fp, #4
28978     A7 1E 02 FB | 	rdlong	local01, fp
2897c     0C 4E 05 F1 | 	add	fp, #12
28980     A7 16 02 FB | 	rdlong	arg03, fp
28984     06 16 06 F1 | 	add	arg03, #6
28988     0B 17 E2 FA | 	rdword	arg03, arg03
2898c     04 1E 06 F1 | 	add	local01, #4
28990     0F 17 52 FC | 	wrword	arg03, local01
28994     0C 4E 85 F1 | 	sub	fp, #12
28998     A7 12 02 FB | 	rdlong	arg01, fp
2899c     04 4E 85 F1 | 	sub	fp, #4
289a0     00 14 06 F6 | 	mov	arg02, #0
289a4     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
289a8     0C 4E 05 F1 | 	add	fp, #12
289ac     A7 FA 61 FC | 	wrlong	result1, fp
289b0     0C 4E 85 F1 | 	sub	fp, #12
289b4                 | LR__4143
289b4                 | LR__4144
289b4     0C 4E 05 F1 | 	add	fp, #12
289b8     A7 1E 02 FB | 	rdlong	local01, fp
289bc     0C 4E 85 F1 | 	sub	fp, #12
289c0     04 1E 0E F2 | 	cmp	local01, #4 wz
289c4     0C 4E 05 A1 |  if_e	add	fp, #12
289c8     A7 0A 68 AC |  if_e	wrlong	#5, fp
289cc     0C 4E 85 A1 |  if_e	sub	fp, #12
289d0                 | LR__4145
289d0     0C 4E 05 F1 | 	add	fp, #12
289d4     A7 1E 0A FB | 	rdlong	local01, fp wz
289d8     0C 4E 85 F1 | 	sub	fp, #12
289dc     04 4E 05 51 |  if_ne	add	fp, #4
289e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
289e4     04 4E 85 51 |  if_ne	sub	fp, #4
289e8     0F 01 68 5C |  if_ne	wrlong	#0, local01
289ec                 | ' 
289ec                 | ' 	return res ;
289ec     0C 4E 05 F1 | 	add	fp, #12
289f0     A7 FA 01 FB | 	rdlong	result1, fp
289f4     0C 4E 85 F1 | 	sub	fp, #12
289f8                 | LR__4146
289f8     A7 F0 03 F6 | 	mov	ptra, fp
289fc     B2 00 A0 FD | 	call	#popregs_
28a00                 | _fatfs_cc_f_opendir_ret
28a00     2D 00 64 FD | 	ret
28a04                 | 
28a04                 | _fatfs_cc_f_closedir
28a04     00 4A 05 F6 | 	mov	COUNT_, #0
28a08     A8 00 A0 FD | 	call	#pushregs_
28a0c     10 F0 07 F1 | 	add	ptra, #16
28a10     04 4E 05 F1 | 	add	fp, #4
28a14     A7 12 62 FC | 	wrlong	arg01, fp
28a18     08 4E 05 F1 | 	add	fp, #8
28a1c     A7 14 02 F6 | 	mov	arg02, fp
28a20     0C 4E 85 F1 | 	sub	fp, #12
28a24     C0 DD BF FD | 	call	#_fatfs_cc_validate
28a28     08 4E 05 F1 | 	add	fp, #8
28a2c     A7 FA 61 FC | 	wrlong	result1, fp
28a30     08 4E 85 F1 | 	sub	fp, #8
28a34     00 FA 0D F2 | 	cmp	result1, #0 wz
28a38     04 4E 05 A1 |  if_e	add	fp, #4
28a3c     A7 FA 01 AB |  if_e	rdlong	result1, fp
28a40     04 4E 85 A1 |  if_e	sub	fp, #4
28a44     FD 00 68 AC |  if_e	wrlong	#0, result1
28a48                 | ' 
28a48                 | ' 
28a48                 | ' 
28a48                 | ' 
28a48                 | ' 		dp->obj.fs = 0;
28a48                 | ' #line 4633 "ff.c"
28a48                 | ' 	}
28a48                 | ' 	return res;
28a48     08 4E 05 F1 | 	add	fp, #8
28a4c     A7 FA 01 FB | 	rdlong	result1, fp
28a50     08 4E 85 F1 | 	sub	fp, #8
28a54     A7 F0 03 F6 | 	mov	ptra, fp
28a58     B2 00 A0 FD | 	call	#popregs_
28a5c                 | _fatfs_cc_f_closedir_ret
28a5c     2D 00 64 FD | 	ret
28a60                 | 
28a60                 | _fatfs_cc_f_readdir
28a60     00 4A 05 F6 | 	mov	COUNT_, #0
28a64     A8 00 A0 FD | 	call	#pushregs_
28a68     14 F0 07 F1 | 	add	ptra, #20
28a6c     04 4E 05 F1 | 	add	fp, #4
28a70     A7 12 62 FC | 	wrlong	arg01, fp
28a74     04 4E 05 F1 | 	add	fp, #4
28a78     A7 14 62 FC | 	wrlong	arg02, fp
28a7c     04 4E 85 F1 | 	sub	fp, #4
28a80     A7 12 02 FB | 	rdlong	arg01, fp
28a84     0C 4E 05 F1 | 	add	fp, #12
28a88     A7 14 02 F6 | 	mov	arg02, fp
28a8c     10 4E 85 F1 | 	sub	fp, #16
28a90     54 DD BF FD | 	call	#_fatfs_cc_validate
28a94     0C 4E 05 F1 | 	add	fp, #12
28a98     A7 FA 61 FC | 	wrlong	result1, fp
28a9c     0C 4E 85 F1 | 	sub	fp, #12
28aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
28aa4     BC 00 90 5D |  if_ne	jmp	#LR__4153
28aa8     08 4E 05 F1 | 	add	fp, #8
28aac     A7 FA 09 FB | 	rdlong	result1, fp wz
28ab0     08 4E 85 F1 | 	sub	fp, #8
28ab4     24 00 90 5D |  if_ne	jmp	#LR__4150
28ab8     04 4E 05 F1 | 	add	fp, #4
28abc     A7 12 02 FB | 	rdlong	arg01, fp
28ac0     04 4E 85 F1 | 	sub	fp, #4
28ac4     00 14 06 F6 | 	mov	arg02, #0
28ac8     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
28acc     0C 4E 05 F1 | 	add	fp, #12
28ad0     A7 FA 61 FC | 	wrlong	result1, fp
28ad4     0C 4E 85 F1 | 	sub	fp, #12
28ad8     88 00 90 FD | 	jmp	#LR__4152
28adc                 | LR__4150
28adc     04 4E 05 F1 | 	add	fp, #4
28ae0     A7 12 02 FB | 	rdlong	arg01, fp
28ae4     04 4E 85 F1 | 	sub	fp, #4
28ae8     00 14 06 F6 | 	mov	arg02, #0
28aec     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
28af0     0C 4E 05 F1 | 	add	fp, #12
28af4     A7 FA 61 FC | 	wrlong	result1, fp
28af8     0C 4E 85 F1 | 	sub	fp, #12
28afc     04 FA 0D F2 | 	cmp	result1, #4 wz
28b00     0C 4E 05 A1 |  if_e	add	fp, #12
28b04     A7 00 68 AC |  if_e	wrlong	#0, fp
28b08     0C 4E 85 A1 |  if_e	sub	fp, #12
28b0c     0C 4E 05 F1 | 	add	fp, #12
28b10     A7 FA 09 FB | 	rdlong	result1, fp wz
28b14     0C 4E 85 F1 | 	sub	fp, #12
28b18     48 00 90 5D |  if_ne	jmp	#LR__4151
28b1c     04 4E 05 F1 | 	add	fp, #4
28b20     A7 12 02 FB | 	rdlong	arg01, fp
28b24     04 4E 05 F1 | 	add	fp, #4
28b28     A7 14 02 FB | 	rdlong	arg02, fp
28b2c     08 4E 85 F1 | 	sub	fp, #8
28b30     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
28b34     04 4E 05 F1 | 	add	fp, #4
28b38     A7 12 02 FB | 	rdlong	arg01, fp
28b3c     04 4E 85 F1 | 	sub	fp, #4
28b40     00 14 06 F6 | 	mov	arg02, #0
28b44     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
28b48     0C 4E 05 F1 | 	add	fp, #12
28b4c     A7 FA 61 FC | 	wrlong	result1, fp
28b50     0C 4E 85 F1 | 	sub	fp, #12
28b54     04 FA 0D F2 | 	cmp	result1, #4 wz
28b58     0C 4E 05 A1 |  if_e	add	fp, #12
28b5c     A7 00 68 AC |  if_e	wrlong	#0, fp
28b60     0C 4E 85 A1 |  if_e	sub	fp, #12
28b64                 | LR__4151
28b64                 | LR__4152
28b64                 | LR__4153
28b64                 | ' 			}
28b64                 | ' 			;
28b64                 | ' 		}
28b64                 | ' 	}
28b64                 | ' 	return res ;
28b64     0C 4E 05 F1 | 	add	fp, #12
28b68     A7 FA 01 FB | 	rdlong	result1, fp
28b6c     0C 4E 85 F1 | 	sub	fp, #12
28b70     A7 F0 03 F6 | 	mov	ptra, fp
28b74     B2 00 A0 FD | 	call	#popregs_
28b78                 | _fatfs_cc_f_readdir_ret
28b78     2D 00 64 FD | 	ret
28b7c                 | 
28b7c                 | _fatfs_cc_f_stat
28b7c     00 4A 05 F6 | 	mov	COUNT_, #0
28b80     A8 00 A0 FD | 	call	#pushregs_
28b84     40 F0 07 F1 | 	add	ptra, #64
28b88     04 4E 05 F1 | 	add	fp, #4
28b8c     A7 12 62 FC | 	wrlong	arg01, fp
28b90     04 4E 05 F1 | 	add	fp, #4
28b94     A7 14 62 FC | 	wrlong	arg02, fp
28b98     04 4E 85 F1 | 	sub	fp, #4
28b9c     A7 12 02 F6 | 	mov	arg01, fp
28ba0     0C 4E 05 F1 | 	add	fp, #12
28ba4     A7 14 02 F6 | 	mov	arg02, fp
28ba8     10 4E 85 F1 | 	sub	fp, #16
28bac     00 16 06 F6 | 	mov	arg03, #0
28bb0     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
28bb4     0C 4E 05 F1 | 	add	fp, #12
28bb8     A7 FA 61 FC | 	wrlong	result1, fp
28bbc     0C 4E 85 F1 | 	sub	fp, #12
28bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
28bc4     74 00 90 5D |  if_ne	jmp	#LR__4163
28bc8     10 4E 05 F1 | 	add	fp, #16
28bcc     A7 12 02 F6 | 	mov	arg01, fp
28bd0     0C 4E 85 F1 | 	sub	fp, #12
28bd4     A7 14 02 FB | 	rdlong	arg02, fp
28bd8     04 4E 85 F1 | 	sub	fp, #4
28bdc     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
28be0     0C 4E 05 F1 | 	add	fp, #12
28be4     A7 FA 61 FC | 	wrlong	result1, fp
28be8     0C 4E 85 F1 | 	sub	fp, #12
28bec     00 FA 0D F2 | 	cmp	result1, #0 wz
28bf0     48 00 90 5D |  if_ne	jmp	#LR__4162
28bf4     3B 4E 05 F1 | 	add	fp, #59
28bf8     A7 FA C1 FA | 	rdbyte	result1, fp
28bfc     3B 4E 85 F1 | 	sub	fp, #59
28c00     80 FA CD F7 | 	test	result1, #128 wz
28c04     0C 4E 05 51 |  if_ne	add	fp, #12
28c08     A7 0C 68 5C |  if_ne	wrlong	#6, fp
28c0c     0C 4E 85 51 |  if_ne	sub	fp, #12
28c10     28 00 90 5D |  if_ne	jmp	#LR__4161
28c14     08 4E 05 F1 | 	add	fp, #8
28c18     A7 FA 09 FB | 	rdlong	result1, fp wz
28c1c     08 4E 85 F1 | 	sub	fp, #8
28c20     18 00 90 AD |  if_e	jmp	#LR__4160
28c24     10 4E 05 F1 | 	add	fp, #16
28c28     A7 12 02 F6 | 	mov	arg01, fp
28c2c     08 4E 85 F1 | 	sub	fp, #8
28c30     A7 14 02 FB | 	rdlong	arg02, fp
28c34     08 4E 85 F1 | 	sub	fp, #8
28c38     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
28c3c                 | LR__4160
28c3c                 | LR__4161
28c3c                 | LR__4162
28c3c                 | LR__4163
28c3c                 | ' 			}
28c3c                 | ' 		}
28c3c                 | ' 		;
28c3c                 | ' 	}
28c3c                 | ' 
28c3c                 | ' 	return res ;
28c3c     0C 4E 05 F1 | 	add	fp, #12
28c40     A7 FA 01 FB | 	rdlong	result1, fp
28c44     0C 4E 85 F1 | 	sub	fp, #12
28c48     A7 F0 03 F6 | 	mov	ptra, fp
28c4c     B2 00 A0 FD | 	call	#popregs_
28c50                 | _fatfs_cc_f_stat_ret
28c50     2D 00 64 FD | 	ret
28c54                 | 
28c54                 | _fatfs_cc_f_unlink
28c54     00 4A 05 F6 | 	mov	COUNT_, #0
28c58     A8 00 A0 FD | 	call	#pushregs_
28c5c     74 F0 07 F1 | 	add	ptra, #116
28c60     04 4E 05 F1 | 	add	fp, #4
28c64     A7 12 62 FC | 	wrlong	arg01, fp
28c68     68 4E 05 F1 | 	add	fp, #104
28c6c     A7 00 68 FC | 	wrlong	#0, fp
28c70     68 4E 85 F1 | 	sub	fp, #104
28c74     A7 12 02 F6 | 	mov	arg01, fp
28c78     6C 4E 05 F1 | 	add	fp, #108
28c7c     A7 14 02 F6 | 	mov	arg02, fp
28c80     70 4E 85 F1 | 	sub	fp, #112
28c84     02 16 06 F6 | 	mov	arg03, #2
28c88     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
28c8c     08 4E 05 F1 | 	add	fp, #8
28c90     A7 FA 61 FC | 	wrlong	result1, fp
28c94     08 4E 85 F1 | 	sub	fp, #8
28c98     00 FA 0D F2 | 	cmp	result1, #0 wz
28c9c     E4 01 90 5D |  if_ne	jmp	#LR__4178
28ca0     70 4E 05 F1 | 	add	fp, #112
28ca4     A7 16 02 FB | 	rdlong	arg03, fp
28ca8     64 4E 85 F1 | 	sub	fp, #100
28cac     A7 16 62 FC | 	wrlong	arg03, fp
28cb0     A7 12 02 F6 | 	mov	arg01, fp
28cb4     08 4E 85 F1 | 	sub	fp, #8
28cb8     A7 14 02 FB | 	rdlong	arg02, fp
28cbc     04 4E 85 F1 | 	sub	fp, #4
28cc0     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
28cc4     08 4E 05 F1 | 	add	fp, #8
28cc8     A7 FA 61 FC | 	wrlong	result1, fp
28ccc     00 FA 4D F2 | 	cmps	result1, #0 wz
28cd0     08 4E 85 F1 | 	sub	fp, #8
28cd4     AC 01 90 5D |  if_ne	jmp	#LR__4177
28cd8     37 4E 05 F1 | 	add	fp, #55
28cdc     A7 FA C1 FA | 	rdbyte	result1, fp
28ce0     37 4E 85 F1 | 	sub	fp, #55
28ce4     80 FA CD F7 | 	test	result1, #128 wz
28ce8     08 4E 05 51 |  if_ne	add	fp, #8
28cec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
28cf0     08 4E 85 51 |  if_ne	sub	fp, #8
28cf4     1C 00 90 5D |  if_ne	jmp	#LR__4170
28cf8     12 4E 05 F1 | 	add	fp, #18
28cfc     A7 FA C1 FA | 	rdbyte	result1, fp
28d00     12 4E 85 F1 | 	sub	fp, #18
28d04     01 FA CD F7 | 	test	result1, #1 wz
28d08     08 4E 05 51 |  if_ne	add	fp, #8
28d0c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
28d10     08 4E 85 51 |  if_ne	sub	fp, #8
28d14                 | LR__4170
28d14     08 4E 05 F1 | 	add	fp, #8
28d18     A7 FA 09 FB | 	rdlong	result1, fp wz
28d1c     08 4E 85 F1 | 	sub	fp, #8
28d20     C8 00 90 5D |  if_ne	jmp	#LR__4173
28d24     70 4E 05 F1 | 	add	fp, #112
28d28     A7 12 02 FB | 	rdlong	arg01, fp
28d2c     48 4E 85 F1 | 	sub	fp, #72
28d30     A7 14 02 FB | 	rdlong	arg02, fp
28d34     28 4E 85 F1 | 	sub	fp, #40
28d38     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
28d3c     6C 4E 05 F1 | 	add	fp, #108
28d40     A7 FA 61 FC | 	wrlong	result1, fp
28d44     5A 4E 85 F1 | 	sub	fp, #90
28d48     A7 FA C1 FA | 	rdbyte	result1, fp
28d4c     12 4E 85 F1 | 	sub	fp, #18
28d50     10 FA CD F7 | 	test	result1, #16 wz
28d54     94 00 90 AD |  if_e	jmp	#LR__4172
28d58     70 4E 05 F1 | 	add	fp, #112
28d5c     A7 FA 01 FB | 	rdlong	result1, fp
28d60     34 4E 85 F1 | 	sub	fp, #52
28d64     A7 FA 61 FC | 	wrlong	result1, fp
28d68     30 4E 05 F1 | 	add	fp, #48
28d6c     A7 16 02 FB | 	rdlong	arg03, fp
28d70     28 4E 85 F1 | 	sub	fp, #40
28d74     A7 16 62 FC | 	wrlong	arg03, fp
28d78     08 4E 85 F1 | 	sub	fp, #8
28d7c     A7 12 02 F6 | 	mov	arg01, fp
28d80     3C 4E 85 F1 | 	sub	fp, #60
28d84     00 14 06 F6 | 	mov	arg02, #0
28d88     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
28d8c     08 4E 05 F1 | 	add	fp, #8
28d90     A7 FA 61 FC | 	wrlong	result1, fp
28d94     08 4E 85 F1 | 	sub	fp, #8
28d98     00 FA 0D F2 | 	cmp	result1, #0 wz
28d9c     4C 00 90 5D |  if_ne	jmp	#LR__4171
28da0     3C 4E 05 F1 | 	add	fp, #60
28da4     A7 12 02 F6 | 	mov	arg01, fp
28da8     3C 4E 85 F1 | 	sub	fp, #60
28dac     00 14 06 F6 | 	mov	arg02, #0
28db0     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
28db4     08 4E 05 F1 | 	add	fp, #8
28db8     A7 FA 61 FC | 	wrlong	result1, fp
28dbc     00 FA 4D F2 | 	cmps	result1, #0 wz
28dc0     08 4E 85 F1 | 	sub	fp, #8
28dc4     08 4E 05 A1 |  if_e	add	fp, #8
28dc8     A7 0E 68 AC |  if_e	wrlong	#7, fp
28dcc     08 4E 85 A1 |  if_e	sub	fp, #8
28dd0     08 4E 05 F1 | 	add	fp, #8
28dd4     A7 FA 01 FB | 	rdlong	result1, fp
28dd8     08 4E 85 F1 | 	sub	fp, #8
28ddc     04 FA 0D F2 | 	cmp	result1, #4 wz
28de0     08 4E 05 A1 |  if_e	add	fp, #8
28de4     A7 00 68 AC |  if_e	wrlong	#0, fp
28de8     08 4E 85 A1 |  if_e	sub	fp, #8
28dec                 | LR__4171
28dec                 | LR__4172
28dec                 | LR__4173
28dec     08 4E 05 F1 | 	add	fp, #8
28df0     A7 FA 09 FB | 	rdlong	result1, fp wz
28df4     08 4E 85 F1 | 	sub	fp, #8
28df8     88 00 90 5D |  if_ne	jmp	#LR__4176
28dfc     0C 4E 05 F1 | 	add	fp, #12
28e00     A7 12 02 F6 | 	mov	arg01, fp
28e04     0C 4E 85 F1 | 	sub	fp, #12
28e08     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
28e0c     08 4E 05 F1 | 	add	fp, #8
28e10     A7 FA 61 FC | 	wrlong	result1, fp
28e14     08 4E 85 F1 | 	sub	fp, #8
28e18     00 FA 0D F2 | 	cmp	result1, #0 wz
28e1c     38 00 90 5D |  if_ne	jmp	#LR__4174
28e20     6C 4E 05 F1 | 	add	fp, #108
28e24     A7 FA 09 FB | 	rdlong	result1, fp wz
28e28     6C 4E 85 F1 | 	sub	fp, #108
28e2c     28 00 90 AD |  if_e	jmp	#LR__4174
28e30     0C 4E 05 F1 | 	add	fp, #12
28e34     A7 12 02 F6 | 	mov	arg01, fp
28e38     60 4E 05 F1 | 	add	fp, #96
28e3c     A7 14 02 FB | 	rdlong	arg02, fp
28e40     6C 4E 85 F1 | 	sub	fp, #108
28e44     00 16 06 F6 | 	mov	arg03, #0
28e48     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
28e4c     08 4E 05 F1 | 	add	fp, #8
28e50     A7 FA 61 FC | 	wrlong	result1, fp
28e54     08 4E 85 F1 | 	sub	fp, #8
28e58                 | LR__4174
28e58     08 4E 05 F1 | 	add	fp, #8
28e5c     A7 FA 09 FB | 	rdlong	result1, fp wz
28e60     08 4E 85 F1 | 	sub	fp, #8
28e64     1C 00 90 5D |  if_ne	jmp	#LR__4175
28e68     70 4E 05 F1 | 	add	fp, #112
28e6c     A7 12 02 FB | 	rdlong	arg01, fp
28e70     70 4E 85 F1 | 	sub	fp, #112
28e74     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
28e78     08 4E 05 F1 | 	add	fp, #8
28e7c     A7 FA 61 FC | 	wrlong	result1, fp
28e80     08 4E 85 F1 | 	sub	fp, #8
28e84                 | LR__4175
28e84                 | LR__4176
28e84                 | LR__4177
28e84                 | LR__4178
28e84                 | ' 			}
28e84                 | ' 		}
28e84                 | ' 		;
28e84                 | ' 	}
28e84                 | ' 
28e84                 | ' 	return res ;
28e84     08 4E 05 F1 | 	add	fp, #8
28e88     A7 FA 01 FB | 	rdlong	result1, fp
28e8c     08 4E 85 F1 | 	sub	fp, #8
28e90     A7 F0 03 F6 | 	mov	ptra, fp
28e94     B2 00 A0 FD | 	call	#popregs_
28e98                 | _fatfs_cc_f_unlink_ret
28e98     2D 00 64 FD | 	ret
28e9c                 | 
28e9c                 | _fatfs_cc_f_mkdir
28e9c     00 4A 05 F6 | 	mov	COUNT_, #0
28ea0     A8 00 A0 FD | 	call	#pushregs_
28ea4     5C F0 07 F1 | 	add	ptra, #92
28ea8     04 4E 05 F1 | 	add	fp, #4
28eac     A7 12 62 FC | 	wrlong	arg01, fp
28eb0     A7 12 02 F6 | 	mov	arg01, fp
28eb4     48 4E 05 F1 | 	add	fp, #72
28eb8     A7 14 02 F6 | 	mov	arg02, fp
28ebc     4C 4E 85 F1 | 	sub	fp, #76
28ec0     02 16 06 F6 | 	mov	arg03, #2
28ec4     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
28ec8     08 4E 05 F1 | 	add	fp, #8
28ecc     A7 FA 61 FC | 	wrlong	result1, fp
28ed0     08 4E 85 F1 | 	sub	fp, #8
28ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
28ed8     C4 02 90 5D |  if_ne	jmp	#LR__4185
28edc     4C 4E 05 F1 | 	add	fp, #76
28ee0     A7 16 02 FB | 	rdlong	arg03, fp
28ee4     40 4E 85 F1 | 	sub	fp, #64
28ee8     A7 16 62 FC | 	wrlong	arg03, fp
28eec     A7 12 02 F6 | 	mov	arg01, fp
28ef0     08 4E 85 F1 | 	sub	fp, #8
28ef4     A7 14 02 FB | 	rdlong	arg02, fp
28ef8     04 4E 85 F1 | 	sub	fp, #4
28efc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
28f00     08 4E 05 F1 | 	add	fp, #8
28f04     A7 FA 61 FC | 	wrlong	result1, fp
28f08     00 FA 4D F2 | 	cmps	result1, #0 wz
28f0c     08 4E 85 F1 | 	sub	fp, #8
28f10     08 4E 05 A1 |  if_e	add	fp, #8
28f14     A7 10 68 AC |  if_e	wrlong	#8, fp
28f18     08 4E 85 A1 |  if_e	sub	fp, #8
28f1c     08 4E 05 F1 | 	add	fp, #8
28f20     A7 FA 01 FB | 	rdlong	result1, fp
28f24     08 4E 85 F1 | 	sub	fp, #8
28f28     04 FA 0D F2 | 	cmp	result1, #4 wz
28f2c     70 02 90 5D |  if_ne	jmp	#LR__4184
28f30     4C 4E 05 F1 | 	add	fp, #76
28f34     A7 16 02 FB | 	rdlong	arg03, fp
28f38     10 4E 85 F1 | 	sub	fp, #16
28f3c     A7 16 62 FC | 	wrlong	arg03, fp
28f40     A7 12 02 F6 | 	mov	arg01, fp
28f44     3C 4E 85 F1 | 	sub	fp, #60
28f48     00 14 06 F6 | 	mov	arg02, #0
28f4c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
28f50     50 4E 05 F1 | 	add	fp, #80
28f54     A7 FA 61 FC | 	wrlong	result1, fp
28f58     48 4E 85 F1 | 	sub	fp, #72
28f5c     A7 00 68 FC | 	wrlong	#0, fp
28f60     48 4E 05 F1 | 	add	fp, #72
28f64     A7 FA 09 FB | 	rdlong	result1, fp wz
28f68     50 4E 85 F1 | 	sub	fp, #80
28f6c     08 4E 05 A1 |  if_e	add	fp, #8
28f70     A7 0E 68 AC |  if_e	wrlong	#7, fp
28f74     08 4E 85 A1 |  if_e	sub	fp, #8
28f78     50 4E 05 F1 | 	add	fp, #80
28f7c     A7 FA 01 FB | 	rdlong	result1, fp
28f80     50 4E 85 F1 | 	sub	fp, #80
28f84     01 FA 0D F2 | 	cmp	result1, #1 wz
28f88     08 4E 05 A1 |  if_e	add	fp, #8
28f8c     A7 04 68 AC |  if_e	wrlong	#2, fp
28f90     08 4E 85 A1 |  if_e	sub	fp, #8
28f94     50 4E 05 F1 | 	add	fp, #80
28f98     A7 16 02 FB | 	rdlong	arg03, fp
28f9c     50 4E 85 F1 | 	sub	fp, #80
28fa0     FF FF 7F FF 
28fa4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
28fa8     08 4E 05 A1 |  if_e	add	fp, #8
28fac     A7 02 68 AC |  if_e	wrlong	#1, fp
28fb0     08 4E 85 A1 |  if_e	sub	fp, #8
28fb4     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
28fb8     58 4E 05 F1 | 	add	fp, #88
28fbc     A7 FA 61 FC | 	wrlong	result1, fp
28fc0     50 4E 85 F1 | 	sub	fp, #80
28fc4     A7 FA 09 FB | 	rdlong	result1, fp wz
28fc8     08 4E 85 F1 | 	sub	fp, #8
28fcc     1C 01 90 5D |  if_ne	jmp	#LR__4181
28fd0     4C 4E 05 F1 | 	add	fp, #76
28fd4     A7 12 02 FB | 	rdlong	arg01, fp
28fd8     04 4E 05 F1 | 	add	fp, #4
28fdc     A7 14 02 FB | 	rdlong	arg02, fp
28fe0     50 4E 85 F1 | 	sub	fp, #80
28fe4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
28fe8     08 4E 05 F1 | 	add	fp, #8
28fec     A7 FA 61 FC | 	wrlong	result1, fp
28ff0     00 FA 4D F2 | 	cmps	result1, #0 wz
28ff4     08 4E 85 F1 | 	sub	fp, #8
28ff8     F0 00 90 5D |  if_ne	jmp	#LR__4180
28ffc     4C 4E 05 F1 | 	add	fp, #76
29000     A7 12 02 FB | 	rdlong	arg01, fp
29004     4C 4E 85 F1 | 	sub	fp, #76
29008     34 12 06 F1 | 	add	arg01, #52
2900c     20 14 06 F6 | 	mov	arg02, #32
29010     0B 16 06 F6 | 	mov	arg03, #11
29014     98 00 A0 FD | 	call	#\builtin_bytefill_
29018     4C 4E 05 F1 | 	add	fp, #76
2901c     A7 FA 01 FB | 	rdlong	result1, fp
29020     34 FA 05 F1 | 	add	result1, #52
29024     FD 5C 48 FC | 	wrbyte	#46, result1
29028     A7 16 02 FB | 	rdlong	arg03, fp
2902c     3F 16 06 F1 | 	add	arg03, #63
29030     0B 21 48 FC | 	wrbyte	#16, arg03
29034     A7 12 02 FB | 	rdlong	arg01, fp
29038     4A 12 06 F1 | 	add	arg01, #74
2903c     0C 4E 05 F1 | 	add	fp, #12
29040     A7 14 02 FB | 	rdlong	arg02, fp
29044     09 15 62 FC | 	wrlong	arg02, arg01
29048     0C 4E 85 F1 | 	sub	fp, #12
2904c     A7 14 02 FB | 	rdlong	arg02, fp
29050     0A 13 02 F6 | 	mov	arg01, arg02
29054     34 14 06 F1 | 	add	arg02, #52
29058     04 4E 05 F1 | 	add	fp, #4
2905c     A7 16 02 FB | 	rdlong	arg03, fp
29060     50 4E 85 F1 | 	sub	fp, #80
29064     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
29068     4C 4E 05 F1 | 	add	fp, #76
2906c     A7 14 02 FB | 	rdlong	arg02, fp
29070     0A 13 02 F6 | 	mov	arg01, arg02
29074     54 12 06 F1 | 	add	arg01, #84
29078     4C 4E 85 F1 | 	sub	fp, #76
2907c     34 14 06 F1 | 	add	arg02, #52
29080     20 16 06 F6 | 	mov	arg03, #32
29084     D8 2C BF FD | 	call	#__system____builtin_memmove
29088     4C 4E 05 F1 | 	add	fp, #76
2908c     A7 16 02 FB | 	rdlong	arg03, fp
29090     55 16 06 F1 | 	add	arg03, #85
29094     0B 5D 48 FC | 	wrbyte	#46, arg03
29098     38 4E 85 F1 | 	sub	fp, #56
2909c     A7 16 02 FB | 	rdlong	arg03, fp
290a0     40 4E 05 F1 | 	add	fp, #64
290a4     A7 16 62 FC | 	wrlong	arg03, fp
290a8     08 4E 85 F1 | 	sub	fp, #8
290ac     A7 14 02 FB | 	rdlong	arg02, fp
290b0     0A 13 02 F6 | 	mov	arg01, arg02
290b4     54 14 06 F1 | 	add	arg02, #84
290b8     4C 4E 85 F1 | 	sub	fp, #76
290bc     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
290c0     4C 4E 05 F1 | 	add	fp, #76
290c4     A7 16 02 FB | 	rdlong	arg03, fp
290c8     03 16 06 F1 | 	add	arg03, #3
290cc     0B 03 48 FC | 	wrbyte	#1, arg03
290d0     40 4E 85 F1 | 	sub	fp, #64
290d4     A7 12 02 F6 | 	mov	arg01, fp
290d8     0C 4E 85 F1 | 	sub	fp, #12
290dc     44 BA BF FD | 	call	#_fatfs_cc_dir_register
290e0     08 4E 05 F1 | 	add	fp, #8
290e4     A7 FA 61 FC | 	wrlong	result1, fp
290e8     08 4E 85 F1 | 	sub	fp, #8
290ec                 | LR__4180
290ec                 | LR__4181
290ec     08 4E 05 F1 | 	add	fp, #8
290f0     A7 FA 09 FB | 	rdlong	result1, fp wz
290f4     08 4E 85 F1 | 	sub	fp, #8
290f8     88 00 90 5D |  if_ne	jmp	#LR__4182
290fc     28 4E 05 F1 | 	add	fp, #40
29100     A7 12 02 FB | 	rdlong	arg01, fp
29104     16 12 06 F1 | 	add	arg01, #22
29108     30 4E 05 F1 | 	add	fp, #48
2910c     A7 14 02 FB | 	rdlong	arg02, fp
29110     09 15 62 FC | 	wrlong	arg02, arg01
29114     0C 4E 85 F1 | 	sub	fp, #12
29118     A7 12 02 FB | 	rdlong	arg01, fp
2911c     24 4E 85 F1 | 	sub	fp, #36
29120     A7 14 02 FB | 	rdlong	arg02, fp
29124     28 4E 05 F1 | 	add	fp, #40
29128     A7 16 02 FB | 	rdlong	arg03, fp
2912c     50 4E 85 F1 | 	sub	fp, #80
29130     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
29134     28 4E 05 F1 | 	add	fp, #40
29138     A7 FA 01 FB | 	rdlong	result1, fp
2913c     0B FA 05 F1 | 	add	result1, #11
29140     FD 20 48 FC | 	wrbyte	#16, result1
29144     24 4E 05 F1 | 	add	fp, #36
29148     A7 FA 01 FB | 	rdlong	result1, fp
2914c     03 FA 05 F1 | 	add	result1, #3
29150     FD 02 48 FC | 	wrbyte	#1, result1
29154     44 4E 85 F1 | 	sub	fp, #68
29158     A7 FA 09 FB | 	rdlong	result1, fp wz
2915c     08 4E 85 F1 | 	sub	fp, #8
29160     3C 00 90 5D |  if_ne	jmp	#LR__4183
29164     4C 4E 05 F1 | 	add	fp, #76
29168     A7 12 02 FB | 	rdlong	arg01, fp
2916c     4C 4E 85 F1 | 	sub	fp, #76
29170     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
29174     08 4E 05 F1 | 	add	fp, #8
29178     A7 FA 61 FC | 	wrlong	result1, fp
2917c     08 4E 85 F1 | 	sub	fp, #8
29180     1C 00 90 FD | 	jmp	#LR__4183
29184                 | LR__4182
29184     3C 4E 05 F1 | 	add	fp, #60
29188     A7 12 02 F6 | 	mov	arg01, fp
2918c     14 4E 05 F1 | 	add	fp, #20
29190     A7 14 02 FB | 	rdlong	arg02, fp
29194     50 4E 85 F1 | 	sub	fp, #80
29198     00 16 06 F6 | 	mov	arg03, #0
2919c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
291a0                 | LR__4183
291a0                 | LR__4184
291a0                 | LR__4185
291a0                 | ' 				remove_chain(&sobj, dcl, 0);
291a0                 | ' 			}
291a0                 | ' 		}
291a0                 | ' 		;
291a0                 | ' 	}
291a0                 | ' 
291a0                 | ' 	return res ;
291a0     08 4E 05 F1 | 	add	fp, #8
291a4     A7 FA 01 FB | 	rdlong	result1, fp
291a8     08 4E 85 F1 | 	sub	fp, #8
291ac     A7 F0 03 F6 | 	mov	ptra, fp
291b0     B2 00 A0 FD | 	call	#popregs_
291b4                 | _fatfs_cc_f_mkdir_ret
291b4     2D 00 64 FD | 	ret
291b8                 | 
291b8                 | _fatfs_cc_f_rename
291b8     01 4A 05 F6 | 	mov	COUNT_, #1
291bc     A8 00 A0 FD | 	call	#pushregs_
291c0     9C F0 07 F1 | 	add	ptra, #156
291c4     04 4E 05 F1 | 	add	fp, #4
291c8     A7 12 62 FC | 	wrlong	arg01, fp
291cc     04 4E 05 F1 | 	add	fp, #4
291d0     A7 14 62 FC | 	wrlong	arg02, fp
291d4     A7 12 02 F6 | 	mov	arg01, fp
291d8     08 4E 85 F1 | 	sub	fp, #8
291dc     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
291e0     04 4E 05 F1 | 	add	fp, #4
291e4     A7 12 02 F6 | 	mov	arg01, fp
291e8     6C 4E 05 F1 | 	add	fp, #108
291ec     A7 14 02 F6 | 	mov	arg02, fp
291f0     70 4E 85 F1 | 	sub	fp, #112
291f4     02 16 06 F6 | 	mov	arg03, #2
291f8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
291fc     0C 4E 05 F1 | 	add	fp, #12
29200     A7 FA 61 FC | 	wrlong	result1, fp
29204     0C 4E 85 F1 | 	sub	fp, #12
29208     00 FA 0D F2 | 	cmp	result1, #0 wz
2920c     44 03 90 5D |  if_ne	jmp	#LR__4203
29210     70 4E 05 F1 | 	add	fp, #112
29214     A7 16 02 FB | 	rdlong	arg03, fp
29218     60 4E 85 F1 | 	sub	fp, #96
2921c     A7 16 62 FC | 	wrlong	arg03, fp
29220     A7 12 02 F6 | 	mov	arg01, fp
29224     0C 4E 85 F1 | 	sub	fp, #12
29228     A7 14 02 FB | 	rdlong	arg02, fp
2922c     04 4E 85 F1 | 	sub	fp, #4
29230     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
29234     0C 4E 05 F1 | 	add	fp, #12
29238     A7 FA 61 FC | 	wrlong	result1, fp
2923c     00 FA 4D F2 | 	cmps	result1, #0 wz
29240     0C 4E 85 F1 | 	sub	fp, #12
29244     1C 00 90 5D |  if_ne	jmp	#LR__4190
29248     3B 4E 05 F1 | 	add	fp, #59
2924c     A7 FA C1 FA | 	rdbyte	result1, fp
29250     3B 4E 85 F1 | 	sub	fp, #59
29254     A0 FA CD F7 | 	test	result1, #160 wz
29258     0C 4E 05 51 |  if_ne	add	fp, #12
2925c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29260     0C 4E 85 51 |  if_ne	sub	fp, #12
29264                 | LR__4190
29264     0C 4E 05 F1 | 	add	fp, #12
29268     A7 1E 0A FB | 	rdlong	local01, fp wz
2926c     0C 4E 85 F1 | 	sub	fp, #12
29270     E0 02 90 5D |  if_ne	jmp	#LR__4202
29274     74 4E 05 F1 | 	add	fp, #116
29278     A7 12 02 F6 | 	mov	arg01, fp
2927c     48 4E 85 F1 | 	sub	fp, #72
29280     A7 14 02 FB | 	rdlong	arg02, fp
29284     2C 4E 85 F1 | 	sub	fp, #44
29288     20 16 06 F6 | 	mov	arg03, #32
2928c     D0 2A BF FD | 	call	#__system____builtin_memmove
29290     40 4E 05 F1 | 	add	fp, #64
29294     A7 12 02 F6 | 	mov	arg01, fp
29298     30 4E 85 F1 | 	sub	fp, #48
2929c     A7 14 02 F6 | 	mov	arg02, fp
292a0     10 4E 85 F1 | 	sub	fp, #16
292a4     30 16 06 F6 | 	mov	arg03, #48
292a8     B4 2A BF FD | 	call	#__system____builtin_memmove
292ac     40 4E 05 F1 | 	add	fp, #64
292b0     A7 12 02 F6 | 	mov	arg01, fp
292b4     38 4E 85 F1 | 	sub	fp, #56
292b8     A7 14 02 FB | 	rdlong	arg02, fp
292bc     08 4E 85 F1 | 	sub	fp, #8
292c0     34 CA BF FD | 	call	#_fatfs_cc_follow_path
292c4     0C 4E 05 F1 | 	add	fp, #12
292c8     A7 FA 61 FC | 	wrlong	result1, fp
292cc     0C 4E 85 F1 | 	sub	fp, #12
292d0     00 FA 0D F2 | 	cmp	result1, #0 wz
292d4     4C 00 90 5D |  if_ne	jmp	#LR__4193
292d8     48 4E 05 F1 | 	add	fp, #72
292dc     A7 FA 01 FB | 	rdlong	result1, fp
292e0     30 4E 85 F1 | 	sub	fp, #48
292e4     A7 16 02 FB | 	rdlong	arg03, fp
292e8     18 4E 85 F1 | 	sub	fp, #24
292ec     0B FB 09 F2 | 	cmp	result1, arg03 wz
292f0     20 00 90 5D |  if_ne	jmp	#LR__4191
292f4     50 4E 05 F1 | 	add	fp, #80
292f8     A7 FA 01 FB | 	rdlong	result1, fp
292fc     30 4E 85 F1 | 	sub	fp, #48
29300     A7 16 02 FB | 	rdlong	arg03, fp
29304     20 4E 85 F1 | 	sub	fp, #32
29308     0B FB 09 F2 | 	cmp	result1, arg03 wz
2930c     04 1E 06 A6 |  if_e	mov	local01, #4
29310     04 00 90 AD |  if_e	jmp	#LR__4192
29314                 | LR__4191
29314     08 1E 06 F6 | 	mov	local01, #8
29318                 | LR__4192
29318     0C 4E 05 F1 | 	add	fp, #12
2931c     A7 1E 62 FC | 	wrlong	local01, fp
29320     0C 4E 85 F1 | 	sub	fp, #12
29324                 | LR__4193
29324     0C 4E 05 F1 | 	add	fp, #12
29328     A7 1E 02 FB | 	rdlong	local01, fp
2932c     0C 4E 85 F1 | 	sub	fp, #12
29330     04 1E 0E F2 | 	cmp	local01, #4 wz
29334     CC 01 90 5D |  if_ne	jmp	#LR__4199
29338     40 4E 05 F1 | 	add	fp, #64
2933c     A7 12 02 F6 | 	mov	arg01, fp
29340     40 4E 85 F1 | 	sub	fp, #64
29344     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
29348     0C 4E 05 F1 | 	add	fp, #12
2934c     A7 FA 61 FC | 	wrlong	result1, fp
29350     0C 4E 85 F1 | 	sub	fp, #12
29354     00 FA 0D F2 | 	cmp	result1, #0 wz
29358     A8 01 90 5D |  if_ne	jmp	#LR__4198
2935c     5C 4E 05 F1 | 	add	fp, #92
29360     A7 12 02 FB | 	rdlong	arg01, fp
29364     38 4E 05 F1 | 	add	fp, #56
29368     A7 12 62 FC | 	wrlong	arg01, fp
2936c     0D 12 06 F1 | 	add	arg01, #13
29370     20 4E 85 F1 | 	sub	fp, #32
29374     A7 14 02 F6 | 	mov	arg02, fp
29378     74 4E 85 F1 | 	sub	fp, #116
2937c     0D 14 06 F1 | 	add	arg02, #13
29380     13 16 06 F6 | 	mov	arg03, #19
29384     D8 29 BF FD | 	call	#__system____builtin_memmove
29388     94 4E 05 F1 | 	add	fp, #148
2938c     A7 1E 02 FB | 	rdlong	local01, fp
29390     15 4E 85 F1 | 	sub	fp, #21
29394     A7 FA C1 FA | 	rdbyte	result1, fp
29398     0B 1E 06 F1 | 	add	local01, #11
2939c     0F FB 41 FC | 	wrbyte	result1, local01
293a0     15 4E 05 F1 | 	add	fp, #21
293a4     A7 1E 02 FB | 	rdlong	local01, fp
293a8     94 4E 85 F1 | 	sub	fp, #148
293ac     0B 1E 06 F1 | 	add	local01, #11
293b0     0F 1F C2 FA | 	rdbyte	local01, local01
293b4     10 1E CE F7 | 	test	local01, #16 wz
293b8     24 00 90 5D |  if_ne	jmp	#LR__4194
293bc     94 4E 05 F1 | 	add	fp, #148
293c0     A7 FA 01 FB | 	rdlong	result1, fp
293c4     FD 1E 02 F6 | 	mov	local01, result1
293c8     94 4E 85 F1 | 	sub	fp, #148
293cc     0B FA 05 F1 | 	add	result1, #11
293d0     FD FA C1 FA | 	rdbyte	result1, result1
293d4     20 FA 45 F5 | 	or	result1, #32
293d8     0B 1E 06 F1 | 	add	local01, #11
293dc     0F FB 41 FC | 	wrbyte	result1, local01
293e0                 | LR__4194
293e0     70 4E 05 F1 | 	add	fp, #112
293e4     A7 1E 02 FB | 	rdlong	local01, fp
293e8     03 1E 06 F1 | 	add	local01, #3
293ec     0F 03 48 FC | 	wrbyte	#1, local01
293f0     24 4E 05 F1 | 	add	fp, #36
293f4     A7 1E 02 FB | 	rdlong	local01, fp
293f8     94 4E 85 F1 | 	sub	fp, #148
293fc     0B 1E 06 F1 | 	add	local01, #11
29400     0F 1F C2 FA | 	rdbyte	local01, local01
29404     10 1E CE F7 | 	test	local01, #16 wz
29408     F8 00 90 AD |  if_e	jmp	#LR__4197
2940c     18 4E 05 F1 | 	add	fp, #24
29410     A7 16 02 FB | 	rdlong	arg03, fp
29414     30 4E 05 F1 | 	add	fp, #48
29418     A7 1E 02 FB | 	rdlong	local01, fp
2941c     48 4E 85 F1 | 	sub	fp, #72
29420     0F 17 0A F2 | 	cmp	arg03, local01 wz
29424     DC 00 90 AD |  if_e	jmp	#LR__4197
29428     70 4E 05 F1 | 	add	fp, #112
2942c     A7 12 02 FB | 	rdlong	arg01, fp
29430     09 1F 02 F6 | 	mov	local01, arg01
29434     24 4E 05 F1 | 	add	fp, #36
29438     A7 14 02 FB | 	rdlong	arg02, fp
2943c     94 4E 85 F1 | 	sub	fp, #148
29440     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
29444     FD 14 02 F6 | 	mov	arg02, result1
29448     0F 13 02 F6 | 	mov	arg01, local01
2944c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
29450     98 4E 05 F1 | 	add	fp, #152
29454     A7 FA 61 FC | 	wrlong	result1, fp
29458     00 FA 4D F2 | 	cmps	result1, #0 wz
2945c     98 4E 85 F1 | 	sub	fp, #152
29460     0C 4E 05 A1 |  if_e	add	fp, #12
29464     A7 04 68 AC |  if_e	wrlong	#2, fp
29468     0C 4E 85 A1 |  if_e	sub	fp, #12
2946c     94 00 90 AD |  if_e	jmp	#LR__4196
29470     70 4E 05 F1 | 	add	fp, #112
29474     A7 12 02 FB | 	rdlong	arg01, fp
29478     28 4E 05 F1 | 	add	fp, #40
2947c     A7 14 02 FB | 	rdlong	arg02, fp
29480     98 4E 85 F1 | 	sub	fp, #152
29484     4C A0 BF FD | 	call	#_fatfs_cc_move_window
29488     0C 4E 05 F1 | 	add	fp, #12
2948c     A7 FA 61 FC | 	wrlong	result1, fp
29490     64 4E 05 F1 | 	add	fp, #100
29494     A7 1E 02 FB | 	rdlong	local01, fp
29498     54 1E 06 F1 | 	add	local01, #84
2949c     24 4E 05 F1 | 	add	fp, #36
294a0     A7 1E 62 FC | 	wrlong	local01, fp
294a4     88 4E 85 F1 | 	sub	fp, #136
294a8     A7 1E 0A FB | 	rdlong	local01, fp wz
294ac     0C 4E 85 F1 | 	sub	fp, #12
294b0     50 00 90 5D |  if_ne	jmp	#LR__4195
294b4     94 4E 05 F1 | 	add	fp, #148
294b8     A7 1E 02 FB | 	rdlong	local01, fp
294bc     94 4E 85 F1 | 	sub	fp, #148
294c0     01 1E 06 F1 | 	add	local01, #1
294c4     0F 1F C2 FA | 	rdbyte	local01, local01
294c8     2E 1E 0E F2 | 	cmp	local01, #46 wz
294cc     34 00 90 5D |  if_ne	jmp	#LR__4195
294d0     70 4E 05 F1 | 	add	fp, #112
294d4     A7 12 02 FB | 	rdlong	arg01, fp
294d8     24 4E 05 F1 | 	add	fp, #36
294dc     A7 14 02 FB | 	rdlong	arg02, fp
294e0     4C 4E 85 F1 | 	sub	fp, #76
294e4     A7 16 02 FB | 	rdlong	arg03, fp
294e8     48 4E 85 F1 | 	sub	fp, #72
294ec     50 AD BF FD | 	call	#_fatfs_cc_st_clust
294f0     70 4E 05 F1 | 	add	fp, #112
294f4     A7 1E 02 FB | 	rdlong	local01, fp
294f8     70 4E 85 F1 | 	sub	fp, #112
294fc     03 1E 06 F1 | 	add	local01, #3
29500     0F 03 48 FC | 	wrbyte	#1, local01
29504                 | LR__4195
29504                 | LR__4196
29504                 | LR__4197
29504                 | LR__4198
29504                 | LR__4199
29504     0C 4E 05 F1 | 	add	fp, #12
29508     A7 1E 0A FB | 	rdlong	local01, fp wz
2950c     0C 4E 85 F1 | 	sub	fp, #12
29510     40 00 90 5D |  if_ne	jmp	#LR__4201
29514     10 4E 05 F1 | 	add	fp, #16
29518     A7 12 02 F6 | 	mov	arg01, fp
2951c     10 4E 85 F1 | 	sub	fp, #16
29520     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
29524     0C 4E 05 F1 | 	add	fp, #12
29528     A7 FA 61 FC | 	wrlong	result1, fp
2952c     0C 4E 85 F1 | 	sub	fp, #12
29530     00 FA 0D F2 | 	cmp	result1, #0 wz
29534     1C 00 90 5D |  if_ne	jmp	#LR__4200
29538     70 4E 05 F1 | 	add	fp, #112
2953c     A7 12 02 FB | 	rdlong	arg01, fp
29540     70 4E 85 F1 | 	sub	fp, #112
29544     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
29548     0C 4E 05 F1 | 	add	fp, #12
2954c     A7 FA 61 FC | 	wrlong	result1, fp
29550     0C 4E 85 F1 | 	sub	fp, #12
29554                 | LR__4200
29554                 | LR__4201
29554                 | LR__4202
29554                 | LR__4203
29554                 | ' 					res = sync_fs(fs);
29554                 | ' 				}
29554                 | ' 			}
29554                 | ' 
29554                 | ' 		}
29554                 | ' 		;
29554                 | ' 	}
29554                 | ' 
29554                 | ' 	return res ;
29554     0C 4E 05 F1 | 	add	fp, #12
29558     A7 FA 01 FB | 	rdlong	result1, fp
2955c     0C 4E 85 F1 | 	sub	fp, #12
29560     A7 F0 03 F6 | 	mov	ptra, fp
29564     B2 00 A0 FD | 	call	#popregs_
29568                 | _fatfs_cc_f_rename_ret
29568     2D 00 64 FD | 	ret
2956c                 | 
2956c                 | _fatfs_cc_time
2956c     00 4A 05 F6 | 	mov	COUNT_, #0
29570     A8 00 A0 FD | 	call	#pushregs_
29574     14 F0 07 F1 | 	add	ptra, #20
29578     04 4E 05 F1 | 	add	fp, #4
2957c     A7 12 62 FC | 	wrlong	arg01, fp
29580     04 4E 05 F1 | 	add	fp, #4
29584     A7 12 02 F6 | 	mov	arg01, fp
29588     08 4E 85 F1 | 	sub	fp, #8
2958c     00 14 06 F6 | 	mov	arg02, #0
29590     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
29594     08 4E 05 F1 | 	add	fp, #8
29598     A7 FA 01 FB | 	rdlong	result1, fp
2959c     08 4E 05 F1 | 	add	fp, #8
295a0     A7 FA 61 FC | 	wrlong	result1, fp
295a4     0C 4E 85 F1 | 	sub	fp, #12
295a8     A7 FA 09 FB | 	rdlong	result1, fp wz
295ac     04 4E 85 F1 | 	sub	fp, #4
295b0     18 00 90 AD |  if_e	jmp	#LR__4210
295b4     04 4E 05 F1 | 	add	fp, #4
295b8     A7 FA 01 FB | 	rdlong	result1, fp
295bc     0C 4E 05 F1 | 	add	fp, #12
295c0     A7 14 02 FB | 	rdlong	arg02, fp
295c4     10 4E 85 F1 | 	sub	fp, #16
295c8     FD 14 62 FC | 	wrlong	arg02, result1
295cc                 | LR__4210
295cc                 | '         *tp = now;
295cc                 | '     return now;
295cc     10 4E 05 F1 | 	add	fp, #16
295d0     A7 FA 01 FB | 	rdlong	result1, fp
295d4     10 4E 85 F1 | 	sub	fp, #16
295d8     A7 F0 03 F6 | 	mov	ptra, fp
295dc     B2 00 A0 FD | 	call	#popregs_
295e0                 | _fatfs_cc_time_ret
295e0     2D 00 64 FD | 	ret
295e4                 | 
295e4                 | _fatfs_cc_mktime
295e4     06 4A 05 F6 | 	mov	COUNT_, #6
295e8     A8 00 A0 FD | 	call	#pushregs_
295ec     09 1F 02 F6 | 	mov	local01, arg01
295f0     14 1E 06 F1 | 	add	local01, #20
295f4     0F 13 02 FB | 	rdlong	arg01, local01
295f8     14 1E 86 F1 | 	sub	local01, #20
295fc     46 12 56 F2 | 	cmps	arg01, #70 wc
29600                 | '                 return (time_t) -1;
29600     01 FA 65 C6 |  if_b	neg	result1, #1
29604     7C 01 90 CD |  if_b	jmp	#LR__4224
29608     03 00 00 FF 
2960c     6C 21 06 F6 | 	mov	local02, ##1900
29610     14 1E 06 F1 | 	add	local01, #20
29614     0F FB 01 FB | 	rdlong	result1, local01
29618     FD 20 02 F1 | 	add	local02, result1
2961c     08 1E 86 F1 | 	sub	local01, #8
29620     0F 23 02 FB | 	rdlong	local03, local01
29624     01 22 86 F1 | 	sub	local03, #1
29628     04 1E 06 F1 | 	add	local01, #4
2962c     0F 13 02 FB | 	rdlong	arg01, local01
29630     10 1E 86 F1 | 	sub	local01, #16
29634     02 12 66 F0 | 	shl	arg01, #2
29638     02 00 00 FF 
2963c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
29640     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
29644     09 FB 01 FB | 	rdlong	result1, arg01
29648     FD 22 02 F1 | 	add	local03, result1
2964c     10 13 02 F6 | 	mov	arg01, local02
29650     02 00 00 FF 
29654     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
29658     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2965c     00 FA 0D F2 | 	cmp	result1, #0 wz
29660     1C 00 90 AD |  if_e	jmp	#LR__4220
29664     00 24 06 F6 | 	mov	local04, #0
29668     10 1E 06 F1 | 	add	local01, #16
2966c     0F FB 01 FB | 	rdlong	result1, local01
29670     10 1E 86 F1 | 	sub	local01, #16
29674     02 FA 55 F2 | 	cmps	result1, #2 wc
29678     01 24 06 36 |  if_ae	mov	local04, #1
2967c     04 00 90 FD | 	jmp	#LR__4221
29680                 | LR__4220
29680     00 24 06 F6 | 	mov	local04, #0
29684                 | LR__4221
29684     04 1E 06 F1 | 	add	local01, #4
29688     0F FB 01 FB | 	rdlong	result1, local01
2968c     04 1E 86 F1 | 	sub	local01, #4
29690     0F 27 02 FB | 	rdlong	local05, local01
29694     08 1E 06 F1 | 	add	local01, #8
29698     0F 13 02 FB | 	rdlong	arg01, local01
2969c     07 00 00 FF 
296a0     10 12 06 FD | 	qmul	arg01, ##3600
296a4     12 23 02 F1 | 	add	local03, local04
296a8     FD 24 02 F6 | 	mov	local04, result1
296ac     04 24 66 F0 | 	shl	local04, #4
296b0     FD 24 82 F1 | 	sub	local04, result1
296b4     02 24 66 F0 | 	shl	local04, #2
296b8     12 27 02 F1 | 	add	local05, local04
296bc     08 1E 86 F1 | 	sub	local01, #8
296c0     18 24 62 FD | 	getqx	local04
296c4     A8 00 00 FF 
296c8     80 23 06 FD | 	qmul	local03, ##86400
296cc     12 27 02 F1 | 	add	local05, local04
296d0     10 23 02 F6 | 	mov	local03, local02
296d4     03 00 00 FF 
296d8     B2 23 86 F1 | 	sub	local03, ##1970
296dc     18 24 62 FD | 	getqx	local04
296e0     99 F0 00 FF 
296e4     80 23 06 FD | 	qmul	local03, ##31536000
296e8     12 27 02 F1 | 	add	local05, local04
296ec     10 23 02 F6 | 	mov	local03, local02
296f0     03 00 00 FF 
296f4     B1 23 86 F1 | 	sub	local03, ##1969
296f8     11 29 52 F6 | 	abs	local06, local03 wc
296fc     02 28 46 F0 | 	shr	local06, #2
29700     14 29 82 F6 | 	negc	local06, local06
29704     03 00 00 FF 
29708     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2970c     18 24 62 FD | 	getqx	local04
29710     12 27 02 F1 | 	add	local05, local04
29714     18 00 90 CD |  if_b	jmp	#LR__4222
29718     03 00 00 FF 
2971c     D0 21 86 F1 | 	sub	local02, ##2000
29720     10 25 52 F6 | 	abs	local04, local02 wc
29724     64 24 16 FD | 	qdiv	local04, #100
29728     18 24 62 FD | 	getqx	local04
2972c     12 29 A2 F3 | 	sumnc	local06, local04
29730                 | LR__4222
29730     A8 00 00 FF 
29734     80 29 06 FD | 	qmul	local06, ##86400
29738     18 28 62 FD | 	getqx	local06
2973c     14 27 02 F1 | 	add	local05, local06
29740     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
29744     02 00 00 FF 
29748     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2974c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
29750     14 27 02 F1 | 	add	local05, local06
29754     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
29758     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2975c     02 00 00 FF 
29760     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29764     01 22 0E F2 | 	cmp	local03, #1 wz
29768     14 00 90 5D |  if_ne	jmp	#LR__4223
2976c     0F 13 02 F6 | 	mov	arg01, local01
29770     DC 19 B0 FD | 	call	#_fatfs_cc___indst
29774     00 FA 0D F2 | 	cmp	result1, #0 wz
29778     07 00 00 5F 
2977c     10 26 86 51 |  if_ne	sub	local05, ##3600
29780                 | LR__4223
29780                 | '                 s -=  (3600L) ;
29780                 | ' 
29780                 | '         return s;
29780     13 FB 01 F6 | 	mov	result1, local05
29784                 | LR__4224
29784     A7 F0 03 F6 | 	mov	ptra, fp
29788     B2 00 A0 FD | 	call	#popregs_
2978c                 | _fatfs_cc_mktime_ret
2978c     2D 00 64 FD | 	ret
29790                 | 
29790                 | _fatfs_cc__gmtime_r
29790     03 4A 05 F6 | 	mov	COUNT_, #3
29794     A8 00 A0 FD | 	call	#pushregs_
29798     09 1F 02 FB | 	rdlong	local01, arg01
2979c     A8 00 00 FF 
297a0     80 1F 16 FD | 	qdiv	local01, ##86400
297a4     18 FA 61 FD | 	getqx	result1
297a8     04 FA 05 F1 | 	add	result1, #4
297ac     07 FA 15 FD | 	qdiv	result1, #7
297b0     18 14 06 F1 | 	add	arg02, #24
297b4     D1 7F 27 FF 
297b8     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
297bc     D1 7F 27 3F 
297c0     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
297c4     03 00 00 3F 
297c8     DC 21 06 36 |  if_ae	mov	local02, ##2012
297cc     03 00 00 CF 
297d0     B2 21 06 C6 |  if_b	mov	local02, ##1970
297d4                 | ' 	  year = 1970;
297d4                 | ' 	}
297d4                 | ' 
297d4                 | ' 	for(;;) {
297d4     19 FA 61 FD | 	getqy	result1
297d8     0A FB 61 FC | 	wrlong	result1, arg02
297dc     18 14 86 F1 | 	sub	arg02, #24
297e0                 | LR__4230
297e0     10 13 02 F6 | 	mov	arg01, local02
297e4     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
297e8     00 FA 0D F2 | 	cmp	result1, #0 wz
297ec     42 F1 00 5F 
297f0     00 23 06 56 |  if_ne	mov	local03, ##31622400
297f4     99 F0 00 AF 
297f8     80 23 06 A6 |  if_e	mov	local03, ##31536000
297fc     11 1F 12 F2 | 	cmp	local01, local03 wc
29800                 | ' 	    break;
29800     01 20 06 31 |  if_ae	add	local02, #1
29804     11 1F 82 31 |  if_ae	sub	local01, local03
29808     D4 FF 9F 3D |  if_ae	jmp	#LR__4230
2980c     A8 00 00 FF 
29810     80 1F 16 FD | 	qdiv	local01, ##86400
29814     10 23 02 F6 | 	mov	local03, local02
29818     03 00 00 FF 
2981c     6C 23 86 F1 | 	sub	local03, ##1900
29820     14 14 06 F1 | 	add	arg02, #20
29824     0A 23 62 FC | 	wrlong	local03, arg02
29828     08 14 06 F1 | 	add	arg02, #8
2982c     10 13 02 F6 | 	mov	arg01, local02
29830     18 20 62 FD | 	getqx	local02
29834     0A 21 62 FC | 	wrlong	local02, arg02
29838     1C 14 86 F1 | 	sub	arg02, #28
2983c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
29840     00 FA 0D F2 | 	cmp	result1, #0 wz
29844     1D 22 06 56 |  if_ne	mov	local03, #29
29848     1C 22 06 A6 |  if_e	mov	local03, #28
2984c     02 00 00 FF 
29850     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
29854     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
29858     02 00 00 FF 
2985c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
29860                 | ' 
29860                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
29860                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
29860     00 12 06 F6 | 	mov	arg01, #0
29864     97 2A 48 FB | 	callpa	#(@LR__4232-@LR__4231)>>2,fcache_load_ptr_
29868                 | LR__4231
29868     09 23 02 F6 | 	mov	local03, arg01
2986c     02 22 66 F0 | 	shl	local03, #2
29870     02 00 00 FF 
29874     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
29878     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2987c     11 23 02 FB | 	rdlong	local03, local03
29880     11 21 52 F2 | 	cmps	local02, local03 wc
29884     02 00 00 FF 
29888     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2988c     2C 00 90 CD |  if_b	jmp	#LR__4233
29890     09 23 02 F6 | 	mov	local03, arg01
29894     02 22 66 F0 | 	shl	local03, #2
29898     02 00 00 FF 
2989c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
298a0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
298a4     11 23 02 FB | 	rdlong	local03, local03
298a8     11 21 82 F1 | 	sub	local02, local03
298ac     01 12 06 F1 | 	add	arg01, #1
298b0     02 00 00 FF 
298b4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
298b8     AC FF 9F FD | 	jmp	#LR__4231
298bc                 | LR__4232
298bc                 | LR__4233
298bc     A8 00 00 FF 
298c0     80 1F 16 FD | 	qdiv	local01, ##86400
298c4     10 14 06 F1 | 	add	arg02, #16
298c8     0A 13 62 FC | 	wrlong	arg01, arg02
298cc     01 20 06 F1 | 	add	local02, #1
298d0     04 14 86 F1 | 	sub	arg02, #4
298d4     0A 21 62 FC | 	wrlong	local02, arg02
298d8     19 1E 62 FD | 	getqy	local01
298dc     07 00 00 FF 
298e0     10 1E 16 FD | 	qdiv	local01, ##3600
298e4     18 22 62 FD | 	getqx	local03
298e8     07 00 00 FF 
298ec     10 1E 16 FD | 	qdiv	local01, ##3600
298f0     04 14 86 F1 | 	sub	arg02, #4
298f4     0A 23 62 FC | 	wrlong	local03, arg02
298f8     19 1E 62 FD | 	getqy	local01
298fc     3C 1E 16 FD | 	qdiv	local01, #60
29900     18 22 62 FD | 	getqx	local03
29904     3C 1E 16 FD | 	qdiv	local01, #60
29908     04 14 86 F1 | 	sub	arg02, #4
2990c     0A 23 62 FC | 	wrlong	local03, arg02
29910     04 14 86 F1 | 	sub	arg02, #4
29914                 | '         stm->tm_isdst = 0;
29914                 | ' 
29914                 | ' ;
29914                 | '         return stm;
29914     0A FB 01 F6 | 	mov	result1, arg02
29918     19 22 62 FD | 	getqy	local03
2991c     0A 23 62 FC | 	wrlong	local03, arg02
29920     20 14 06 F1 | 	add	arg02, #32
29924     0A 01 68 FC | 	wrlong	#0, arg02
29928     A7 F0 03 F6 | 	mov	ptra, fp
2992c     B2 00 A0 FD | 	call	#popregs_
29930                 | _fatfs_cc__gmtime_r_ret
29930     2D 00 64 FD | 	ret
29934                 | 
29934                 | _fatfs_cc__tzset
29934     5A 01 00 FF 
29938     79 12 06 F6 | 	mov	arg01, ##@LR__4545
2993c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
29940     FD 12 02 F6 | 	mov	arg01, result1
29944     02 00 00 FF 
29948     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2994c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
29950     02 00 00 FF 
29954     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
29958     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2995c     02 00 00 FF 
29960     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
29964     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
29968     02 00 00 FF 
2996c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
29970                 | _fatfs_cc__tzset_ret
29970     2D 00 64 FD | 	ret
29974                 | 
29974                 | _fatfs_cc_getenv
29974     06 4A 05 F6 | 	mov	COUNT_, #6
29978     A8 00 A0 FD | 	call	#pushregs_
2997c     09 1F 02 F6 | 	mov	local01, arg01
29980     09 21 02 F6 | 	mov	local02, arg01
29984     97 06 48 FB | 	callpa	#(@LR__4241-@LR__4240)>>2,fcache_load_ptr_
29988                 | LR__4240
29988     10 FB C9 FA | 	rdbyte	result1, local02 wz
2998c     01 20 06 51 |  if_ne	add	local02, #1
29990     F4 FF 9F 5D |  if_ne	jmp	#LR__4240
29994                 | LR__4241
29994     09 21 82 F1 | 	sub	local02, arg01
29998     10 FB 01 F6 | 	mov	result1, local02
2999c     02 00 00 FF 
299a0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
299a4     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
299a8     02 00 00 FF 
299ac     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
299b0                 | '             return 0;
299b0     00 FA 05 A6 |  if_e	mov	result1, #0
299b4     5C 00 90 AD |  if_e	jmp	#LR__4244
299b8                 | ' 
299b8                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
299b8     02 00 00 FF 
299bc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
299c0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
299c4     02 00 00 FF 
299c8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
299cc                 | LR__4242
299cc     11 25 0A FB | 	rdlong	local04, local03 wz
299d0     3C 00 90 AD |  if_e	jmp	#LR__4243
299d4     12 13 02 F6 | 	mov	arg01, local04
299d8     0F 15 02 F6 | 	mov	arg02, local01
299dc     10 17 02 F6 | 	mov	arg03, local02
299e0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
299e4     00 FA 0D F2 | 	cmp	result1, #0 wz
299e8     10 27 02 A6 |  if_e	mov	local05, local02
299ec     12 27 02 A1 |  if_e	add	local05, local04
299f0     13 29 C2 AA |  if_e	rdbyte	local06, local05
299f4     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
299f8                 | ' 			return name+len+1;
299f8     10 25 02 A1 |  if_e	add	local04, local02
299fc     01 24 06 A1 |  if_e	add	local04, #1
29a00     12 FB 01 A6 |  if_e	mov	result1, local04
29a04     0C 00 90 AD |  if_e	jmp	#LR__4244
29a08     04 22 06 F1 | 	add	local03, #4
29a0c     BC FF 9F FD | 	jmp	#LR__4242
29a10                 | LR__4243
29a10                 | ' 	}
29a10                 | ' 	return 0;
29a10     00 FA 05 F6 | 	mov	result1, #0
29a14                 | LR__4244
29a14     A7 F0 03 F6 | 	mov	ptra, fp
29a18     B2 00 A0 FD | 	call	#popregs_
29a1c                 | _fatfs_cc_getenv_ret
29a1c     2D 00 64 FD | 	ret
29a20                 | 
29a20                 | _fatfs_cc__get_fattime
29a20     00 4A 05 F6 | 	mov	COUNT_, #0
29a24     A8 00 A0 FD | 	call	#pushregs_
29a28     34 F0 07 F1 | 	add	ptra, #52
29a2c     00 12 06 F6 | 	mov	arg01, #0
29a30     38 FB BF FD | 	call	#_fatfs_cc_time
29a34     04 4E 05 F1 | 	add	fp, #4
29a38     A7 FA 61 FC | 	wrlong	result1, fp
29a3c     A7 12 02 F6 | 	mov	arg01, fp
29a40     0C 4E 05 F1 | 	add	fp, #12
29a44     A7 14 02 F6 | 	mov	arg02, fp
29a48     10 4E 85 F1 | 	sub	fp, #16
29a4c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
29a50     24 4E 05 F1 | 	add	fp, #36
29a54     A7 14 02 FB | 	rdlong	arg02, fp
29a58     50 14 86 F1 | 	sub	arg02, #80
29a5c     09 14 66 F0 | 	shl	arg02, #9
29a60     04 4E 85 F1 | 	sub	fp, #4
29a64     A7 FA 01 FB | 	rdlong	result1, fp
29a68     01 FA 05 F1 | 	add	result1, #1
29a6c     05 FA 65 F0 | 	shl	result1, #5
29a70     FD 14 42 F5 | 	or	arg02, result1
29a74     04 4E 85 F1 | 	sub	fp, #4
29a78     A7 FA 01 FB | 	rdlong	result1, fp
29a7c     FD 14 42 F5 | 	or	arg02, result1
29a80     14 4E 85 F1 | 	sub	fp, #20
29a84     A7 14 62 FC | 	wrlong	arg02, fp
29a88     10 4E 05 F1 | 	add	fp, #16
29a8c     A7 14 02 FB | 	rdlong	arg02, fp
29a90     0B 14 66 F0 | 	shl	arg02, #11
29a94     04 4E 85 F1 | 	sub	fp, #4
29a98     A7 FA 01 FB | 	rdlong	result1, fp
29a9c     05 FA 65 F0 | 	shl	result1, #5
29aa0     FD 14 42 F5 | 	or	arg02, result1
29aa4     04 4E 85 F1 | 	sub	fp, #4
29aa8     A7 FA 01 FB | 	rdlong	result1, fp
29aac     FD 14 42 F5 | 	or	arg02, result1
29ab0     04 4E 85 F1 | 	sub	fp, #4
29ab4     A7 14 62 FC | 	wrlong	arg02, fp
29ab8                 | ' 
29ab8                 | '     now = time(0);
29ab8                 | '     _gmtime_r (&now, &date);
29ab8                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
29ab8                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
29ab8                 | '     return (ffdate << 16) | fftime;
29ab8     04 4E 85 F1 | 	sub	fp, #4
29abc     A7 FA 01 FB | 	rdlong	result1, fp
29ac0     10 FA 65 F0 | 	shl	result1, #16
29ac4     08 4E 85 F1 | 	sub	fp, #8
29ac8     0A FB 41 F5 | 	or	result1, arg02
29acc     A7 F0 03 F6 | 	mov	ptra, fp
29ad0     B2 00 A0 FD | 	call	#popregs_
29ad4                 | _fatfs_cc__get_fattime_ret
29ad4     2D 00 64 FD | 	ret
29ad8                 | 
29ad8                 | _fatfs_cc_unixtime_0892
29ad8     00 4A 05 F6 | 	mov	COUNT_, #0
29adc     A8 00 A0 FD | 	call	#pushregs_
29ae0     34 F0 07 F1 | 	add	ptra, #52
29ae4     04 4E 05 F1 | 	add	fp, #4
29ae8     A7 12 62 FC | 	wrlong	arg01, fp
29aec     04 4E 05 F1 | 	add	fp, #4
29af0     A7 14 62 FC | 	wrlong	arg02, fp
29af4     04 4E 85 F1 | 	sub	fp, #4
29af8     A7 14 02 FB | 	rdlong	arg02, fp
29afc     09 14 46 F0 | 	shr	arg02, #9
29b00     7F 14 06 F5 | 	and	arg02, #127
29b04     50 FA 05 F6 | 	mov	result1, #80
29b08     0A FB 01 F1 | 	add	result1, arg02
29b0c     20 4E 05 F1 | 	add	fp, #32
29b10     A7 FA 61 FC | 	wrlong	result1, fp
29b14     20 4E 85 F1 | 	sub	fp, #32
29b18     A7 FA 01 FB | 	rdlong	result1, fp
29b1c     05 FA 45 F0 | 	shr	result1, #5
29b20     FD FA 41 F8 | 	getnib	result1, result1, #0
29b24     01 FA 85 F1 | 	sub	result1, #1
29b28     1C 4E 05 F1 | 	add	fp, #28
29b2c     A7 FA 61 FC | 	wrlong	result1, fp
29b30     1C 4E 85 F1 | 	sub	fp, #28
29b34     A7 FA 01 FB | 	rdlong	result1, fp
29b38     1F FA 05 F5 | 	and	result1, #31
29b3c     18 4E 05 F1 | 	add	fp, #24
29b40     A7 FA 61 FC | 	wrlong	result1, fp
29b44     14 4E 85 F1 | 	sub	fp, #20
29b48     A7 FA 01 FB | 	rdlong	result1, fp
29b4c     0B FA 45 F0 | 	shr	result1, #11
29b50     1F FA 05 F5 | 	and	result1, #31
29b54     10 4E 05 F1 | 	add	fp, #16
29b58     A7 FA 61 FC | 	wrlong	result1, fp
29b5c     10 4E 85 F1 | 	sub	fp, #16
29b60     A7 FA 01 FB | 	rdlong	result1, fp
29b64     05 FA 45 F0 | 	shr	result1, #5
29b68     3F FA 05 F5 | 	and	result1, #63
29b6c     0C 4E 05 F1 | 	add	fp, #12
29b70     A7 FA 61 FC | 	wrlong	result1, fp
29b74     0C 4E 85 F1 | 	sub	fp, #12
29b78     A7 14 02 FB | 	rdlong	arg02, fp
29b7c     1F 14 06 F5 | 	and	arg02, #31
29b80     01 14 66 F0 | 	shl	arg02, #1
29b84     08 4E 05 F1 | 	add	fp, #8
29b88     A7 14 62 FC | 	wrlong	arg02, fp
29b8c     A7 12 02 F6 | 	mov	arg01, fp
29b90     10 4E 85 F1 | 	sub	fp, #16
29b94     4C FA BF FD | 	call	#_fatfs_cc_mktime
29b98     0C 4E 05 F1 | 	add	fp, #12
29b9c     A7 FA 61 FC | 	wrlong	result1, fp
29ba0                 | ' 
29ba0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
29ba0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
29ba0                 | '     date.tm_mday = (dosdate & 0x1f);
29ba0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
29ba0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
29ba0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
29ba0                 | ' 
29ba0                 | '     t = mktime(&date);
29ba0                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
29ba0                 | '     return t;
29ba0     0C 4E 85 F1 | 	sub	fp, #12
29ba4     A7 F0 03 F6 | 	mov	ptra, fp
29ba8     B2 00 A0 FD | 	call	#popregs_
29bac                 | _fatfs_cc_unixtime_0892_ret
29bac     2D 00 64 FD | 	ret
29bb0                 | 
29bb0                 | _fatfs_cc__set_dos_error_0894
29bb0     09 01 02 F6 | 	mov	_var01, arg01
29bb4                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
29bb4                 | '     switch (derr) {
29bb4     14 00 26 F3 | 	fle	_var01, #20
29bb8     30 00 62 FD | 	jmprel	_var01
29bbc                 | LR__4250
29bbc     50 00 90 FD | 	jmp	#LR__4251
29bc0     84 00 90 FD | 	jmp	#LR__4265
29bc4     80 00 90 FD | 	jmp	#LR__4266
29bc8     7C 00 90 FD | 	jmp	#LR__4267
29bcc     48 00 90 FD | 	jmp	#LR__4252
29bd0     44 00 90 FD | 	jmp	#LR__4253
29bd4     40 00 90 FD | 	jmp	#LR__4254
29bd8     44 00 90 FD | 	jmp	#LR__4255
29bdc     48 00 90 FD | 	jmp	#LR__4257
29be0     54 00 90 FD | 	jmp	#LR__4260
29be4     38 00 90 FD | 	jmp	#LR__4256
29be8     4C 00 90 FD | 	jmp	#LR__4261
29bec     48 00 90 FD | 	jmp	#LR__4262
29bf0     44 00 90 FD | 	jmp	#LR__4263
29bf4     50 00 90 FD | 	jmp	#LR__4268
29bf8     4C 00 90 FD | 	jmp	#LR__4268
29bfc     48 00 90 FD | 	jmp	#LR__4268
29c00     2C 00 90 FD | 	jmp	#LR__4258
29c04     38 00 90 FD | 	jmp	#LR__4264
29c08     2C 00 90 FD | 	jmp	#LR__4259
29c0c     38 00 90 FD | 	jmp	#LR__4268
29c10                 | LR__4251
29c10     00 02 06 F6 | 	mov	_var02, #0
29c14                 | '         r = 0;
29c14                 | '         break;
29c14     34 00 90 FD | 	jmp	#LR__4269
29c18                 | LR__4252
29c18                 | LR__4253
29c18                 | LR__4254
29c18     04 02 06 F6 | 	mov	_var02, #4
29c1c                 | '         r =  4 ;
29c1c                 | '         break;
29c1c     2C 00 90 FD | 	jmp	#LR__4269
29c20                 | LR__4255
29c20                 | LR__4256
29c20     06 02 06 F6 | 	mov	_var02, #6
29c24                 | '         r =  6 ;
29c24                 | '         break;
29c24     24 00 90 FD | 	jmp	#LR__4269
29c28                 | LR__4257
29c28     09 02 06 F6 | 	mov	_var02, #9
29c2c                 | '         r =  9 ;
29c2c                 | '         break;
29c2c     1C 00 90 FD | 	jmp	#LR__4269
29c30                 | LR__4258
29c30     07 02 06 F6 | 	mov	_var02, #7
29c34                 | '         r =  7 ;
29c34                 | '         break;
29c34     14 00 90 FD | 	jmp	#LR__4269
29c38                 | LR__4259
29c38                 | LR__4260
29c38                 | LR__4261
29c38                 | LR__4262
29c38                 | LR__4263
29c38     0A 02 06 F6 | 	mov	_var02, #10
29c3c                 | '         r =  10 ;
29c3c                 | '         break;
29c3c     0C 00 90 FD | 	jmp	#LR__4269
29c40                 | LR__4264
29c40     0B 02 06 F6 | 	mov	_var02, #11
29c44                 | '         r =  11 ;
29c44                 | '         break;
29c44     04 00 90 FD | 	jmp	#LR__4269
29c48                 | LR__4265
29c48                 | LR__4266
29c48                 | LR__4267
29c48                 | LR__4268
29c48     0C 02 06 F6 | 	mov	_var02, #12
29c4c                 | '         r =  12 ;
29c4c                 | '         break;
29c4c                 | LR__4269
29c4c                 | '     }
29c4c                 | '     return _seterror(r);
29c4c     00 02 4E F2 | 	cmps	_var02, #0 wz
29c50     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29c54     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29c58     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29c5c     01 FA 65 56 |  if_ne	neg	result1, #1
29c60     00 FA 05 A6 |  if_e	mov	result1, #0
29c64                 | _fatfs_cc__set_dos_error_0894_ret
29c64     2D 00 64 FD | 	ret
29c68                 | 
29c68                 | _fatfs_cc_v_creat
29c68     04 4A 05 F6 | 	mov	COUNT_, #4
29c6c     A8 00 A0 FD | 	call	#pushregs_
29c70     09 1F 02 F6 | 	mov	local01, arg01
29c74     0A 21 02 F6 | 	mov	local02, arg02
29c78     03 00 00 FF 
29c7c     3C 12 06 F6 | 	mov	arg01, ##1596
29c80                 | '     return _gc_alloc(size);
29c80     10 14 06 F6 | 	mov	arg02, #16
29c84     30 60 BF FD | 	call	#__system___gc_doalloc
29c88     FD 22 0A F6 | 	mov	local03, result1 wz
29c8c                 | '       return _seterror( 7 );
29c8c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29c90     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
29c94     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29c98     01 FA 65 A6 |  if_e	neg	result1, #1
29c9c     58 00 90 AD |  if_e	jmp	#LR__4271
29ca0     11 13 02 F6 | 	mov	arg01, local03
29ca4     00 14 06 F6 | 	mov	arg02, #0
29ca8     03 00 00 FF 
29cac     3C 16 06 F6 | 	mov	arg03, ##1596
29cb0     98 00 A0 FD | 	call	#\builtin_bytefill_
29cb4     02 00 00 FF 
29cb8     14 22 06 F1 | 	add	local03, ##1044
29cbc     11 13 02 F6 | 	mov	arg01, local03
29cc0     02 00 00 FF 
29cc4     14 22 86 F1 | 	sub	local03, ##1044
29cc8     10 15 02 F6 | 	mov	arg02, local02
29ccc     07 16 06 F6 | 	mov	arg03, #7
29cd0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
29cd4     FD 24 0A F6 | 	mov	local04, result1 wz
29cd8     14 00 90 AD |  if_e	jmp	#LR__4270
29cdc     11 13 02 F6 | 	mov	arg01, local03
29ce0                 | '     return _gc_free(ptr);
29ce0     E0 60 BF FD | 	call	#__system___gc_free
29ce4                 | '     free(f);
29ce4                 | '     return _set_dos_error(r);
29ce4     12 13 02 F6 | 	mov	arg01, local04
29ce8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0894
29cec     08 00 90 FD | 	jmp	#LR__4271
29cf0                 | LR__4270
29cf0     0F 23 62 FC | 	wrlong	local03, local01
29cf4                 | '   }
29cf4                 | '   fil->vfsdata = f;
29cf4                 | '   return 0;
29cf4     00 FA 05 F6 | 	mov	result1, #0
29cf8                 | LR__4271
29cf8     A7 F0 03 F6 | 	mov	ptra, fp
29cfc     B2 00 A0 FD | 	call	#popregs_
29d00                 | _fatfs_cc_v_creat_ret
29d00     2D 00 64 FD | 	ret
29d04                 | 
29d04                 | _fatfs_cc_v_close
29d04     02 4A 05 F6 | 	mov	COUNT_, #2
29d08     A8 00 A0 FD | 	call	#pushregs_
29d0c     09 1F 02 FB | 	rdlong	local01, arg01
29d10     02 00 00 FF 
29d14     14 1E 06 F1 | 	add	local01, ##1044
29d18     0F 13 02 F6 | 	mov	arg01, local01
29d1c     02 00 00 FF 
29d20     14 1E 86 F1 | 	sub	local01, ##1044
29d24     DC E3 BF FD | 	call	#_fatfs_cc_f_close
29d28     FD 20 02 F6 | 	mov	local02, result1
29d2c     0F 13 02 F6 | 	mov	arg01, local01
29d30                 | '     return _gc_free(ptr);
29d30     90 60 BF FD | 	call	#__system___gc_free
29d34                 | '     FAT_FIL *f = fil->vfsdata;
29d34                 | '     r=f_close(&f->fil);
29d34                 | '     free(f);
29d34                 | '     return _set_dos_error(r);
29d34     10 13 02 F6 | 	mov	arg01, local02
29d38     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0894
29d3c     A7 F0 03 F6 | 	mov	ptra, fp
29d40     B2 00 A0 FD | 	call	#popregs_
29d44                 | _fatfs_cc_v_close_ret
29d44     2D 00 64 FD | 	ret
29d48                 | 
29d48                 | _fatfs_cc_v_opendir
29d48     04 4A 05 F6 | 	mov	COUNT_, #4
29d4c     A8 00 A0 FD | 	call	#pushregs_
29d50     09 1F 02 F6 | 	mov	local01, arg01
29d54     0A 21 02 F6 | 	mov	local02, arg02
29d58     30 12 06 F6 | 	mov	arg01, #48
29d5c                 | '     return _gc_alloc(size);
29d5c     10 14 06 F6 | 	mov	arg02, #16
29d60     54 5F BF FD | 	call	#__system___gc_doalloc
29d64     FD 22 0A F6 | 	mov	local03, result1 wz
29d68                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
29d68                 | '       return _seterror( 7 );
29d68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
29d6c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
29d70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
29d74     01 FA 65 A6 |  if_e	neg	result1, #1
29d78     34 00 90 AD |  if_e	jmp	#LR__4281
29d7c     10 15 02 F6 | 	mov	arg02, local02
29d80     11 13 02 F6 | 	mov	arg01, local03
29d84     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
29d88     FD 24 0A F6 | 	mov	local04, result1 wz
29d8c     14 00 90 AD |  if_e	jmp	#LR__4280
29d90     11 13 02 F6 | 	mov	arg01, local03
29d94                 | '     return _gc_free(ptr);
29d94     2C 60 BF FD | 	call	#__system___gc_free
29d98                 | '         free(f);
29d98                 | '         return _set_dos_error(r);
29d98     12 13 02 F6 | 	mov	arg01, local04
29d9c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0894
29da0     0C 00 90 FD | 	jmp	#LR__4281
29da4                 | LR__4280
29da4     04 1E 06 F1 | 	add	local01, #4
29da8     0F 23 62 FC | 	wrlong	local03, local01
29dac                 | '     }
29dac                 | '     dir->vfsdata = f;
29dac                 | '     return 0;
29dac     00 FA 05 F6 | 	mov	result1, #0
29db0                 | LR__4281
29db0     A7 F0 03 F6 | 	mov	ptra, fp
29db4     B2 00 A0 FD | 	call	#popregs_
29db8                 | _fatfs_cc_v_opendir_ret
29db8     2D 00 64 FD | 	ret
29dbc                 | 
29dbc                 | _fatfs_cc_v_closedir
29dbc     02 4A 05 F6 | 	mov	COUNT_, #2
29dc0     A8 00 A0 FD | 	call	#pushregs_
29dc4     04 12 06 F1 | 	add	arg01, #4
29dc8     09 1F 02 FB | 	rdlong	local01, arg01
29dcc     0F 13 02 F6 | 	mov	arg01, local01
29dd0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
29dd4     FD 20 02 F6 | 	mov	local02, result1
29dd8     0F 13 02 F6 | 	mov	arg01, local01
29ddc                 | '     return _gc_free(ptr);
29ddc     E4 5F BF FD | 	call	#__system___gc_free
29de0     00 20 0E F2 | 	cmp	local02, #0 wz
29de4     10 13 02 56 |  if_ne	mov	arg01, local02
29de8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0894
29dec                 | '     return r;
29dec     10 FB 01 F6 | 	mov	result1, local02
29df0     A7 F0 03 F6 | 	mov	ptra, fp
29df4     B2 00 A0 FD | 	call	#popregs_
29df8                 | _fatfs_cc_v_closedir_ret
29df8     2D 00 64 FD | 	ret
29dfc                 | 
29dfc                 | _fatfs_cc_v_readdir
29dfc     01 4A 05 F6 | 	mov	COUNT_, #1
29e00     A8 00 A0 FD | 	call	#pushregs_
29e04     2C F1 07 F1 | 	add	ptra, #300
29e08     04 4E 05 F1 | 	add	fp, #4
29e0c     A7 12 62 FC | 	wrlong	arg01, fp
29e10     04 4E 05 F1 | 	add	fp, #4
29e14     A7 14 62 FC | 	wrlong	arg02, fp
29e18     04 4E 85 F1 | 	sub	fp, #4
29e1c     A7 16 02 FB | 	rdlong	arg03, fp
29e20     04 16 06 F1 | 	add	arg03, #4
29e24     0B 13 02 FB | 	rdlong	arg01, arg03
29e28     08 4E 05 F1 | 	add	fp, #8
29e2c     A7 14 02 F6 | 	mov	arg02, fp
29e30     0C 4E 85 F1 | 	sub	fp, #12
29e34     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
29e38     28 4F 05 F1 | 	add	fp, #296
29e3c     A7 FA 61 FC | 	wrlong	result1, fp
29e40     28 4F 85 F1 | 	sub	fp, #296
29e44     00 FA 0D F2 | 	cmp	result1, #0 wz
29e48     14 00 90 AD |  if_e	jmp	#LR__4290
29e4c                 | '         return _set_dos_error(r);
29e4c     28 4F 05 F1 | 	add	fp, #296
29e50     A7 12 02 FB | 	rdlong	arg01, fp
29e54     28 4F 85 F1 | 	sub	fp, #296
29e58     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0894
29e5c     C4 00 90 FD | 	jmp	#LR__4293
29e60                 | LR__4290
29e60     28 4E 05 F1 | 	add	fp, #40
29e64     A7 16 CA FA | 	rdbyte	arg03, fp wz
29e68     28 4E 85 F1 | 	sub	fp, #40
29e6c                 | '         return -1;
29e6c     01 FA 65 A6 |  if_e	neg	result1, #1
29e70     B0 00 90 AD |  if_e	jmp	#LR__4293
29e74     08 4E 05 F1 | 	add	fp, #8
29e78     A7 12 02 FB | 	rdlong	arg01, fp
29e7c     20 4E 05 F1 | 	add	fp, #32
29e80     A7 14 02 F6 | 	mov	arg02, fp
29e84     28 4E 85 F1 | 	sub	fp, #40
29e88     3F 16 06 F6 | 	mov	arg03, #63
29e8c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
29e90     08 4E 05 F1 | 	add	fp, #8
29e94     A7 16 02 FB | 	rdlong	arg03, fp
29e98     3F 16 06 F1 | 	add	arg03, #63
29e9c     0B 01 48 FC | 	wrbyte	#0, arg03
29ea0     0C 4E 05 F1 | 	add	fp, #12
29ea4     A7 16 C2 FA | 	rdbyte	arg03, fp
29ea8     14 4E 85 F1 | 	sub	fp, #20
29eac     10 16 CE F7 | 	test	arg03, #16 wz
29eb0     18 00 90 AD |  if_e	jmp	#LR__4291
29eb4     08 4E 05 F1 | 	add	fp, #8
29eb8     A7 16 02 FB | 	rdlong	arg03, fp
29ebc     08 4E 85 F1 | 	sub	fp, #8
29ec0     50 16 06 F1 | 	add	arg03, #80
29ec4     0B 03 48 FC | 	wrbyte	#1, arg03
29ec8     14 00 90 FD | 	jmp	#LR__4292
29ecc                 | LR__4291
29ecc     08 4E 05 F1 | 	add	fp, #8
29ed0     A7 16 02 FB | 	rdlong	arg03, fp
29ed4     08 4E 85 F1 | 	sub	fp, #8
29ed8     50 16 06 F1 | 	add	arg03, #80
29edc     0B 01 48 FC | 	wrbyte	#0, arg03
29ee0                 | LR__4292
29ee0     08 4E 05 F1 | 	add	fp, #8
29ee4     A7 16 02 FB | 	rdlong	arg03, fp
29ee8     04 4E 05 F1 | 	add	fp, #4
29eec     A7 14 02 FB | 	rdlong	arg02, fp
29ef0     48 16 06 F1 | 	add	arg03, #72
29ef4     0B 15 62 FC | 	wrlong	arg02, arg03
29ef8     04 4E 85 F1 | 	sub	fp, #4
29efc     A7 1E 02 FB | 	rdlong	local01, fp
29f00     08 4E 05 F1 | 	add	fp, #8
29f04     A7 12 E2 FA | 	rdword	arg01, fp
29f08     02 4E 05 F1 | 	add	fp, #2
29f0c     A7 14 E2 FA | 	rdword	arg02, fp
29f10     12 4E 85 F1 | 	sub	fp, #18
29f14     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0892
29f18     4C 1E 06 F1 | 	add	local01, #76
29f1c     0F FB 61 FC | 	wrlong	result1, local01
29f20                 | '         ent->d_type =  (0) ;
29f20                 | '     }
29f20                 | '     ent->d_size = finfo.fsize;
29f20                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
29f20                 | '     return 0;
29f20     00 FA 05 F6 | 	mov	result1, #0
29f24                 | LR__4293
29f24     A7 F0 03 F6 | 	mov	ptra, fp
29f28     B2 00 A0 FD | 	call	#popregs_
29f2c                 | _fatfs_cc_v_readdir_ret
29f2c     2D 00 64 FD | 	ret
29f30                 | 
29f30                 | _fatfs_cc_v_stat
29f30     03 4A 05 F6 | 	mov	COUNT_, #3
29f34     A8 00 A0 FD | 	call	#pushregs_
29f38     30 F1 07 F1 | 	add	ptra, #304
29f3c     04 4E 05 F1 | 	add	fp, #4
29f40     A7 12 62 FC | 	wrlong	arg01, fp
29f44     04 4E 05 F1 | 	add	fp, #4
29f48     A7 14 62 FC | 	wrlong	arg02, fp
29f4c     08 4E 85 F1 | 	sub	fp, #8
29f50     0A 13 02 F6 | 	mov	arg01, arg02
29f54     00 14 06 F6 | 	mov	arg02, #0
29f58     30 16 06 F6 | 	mov	arg03, #48
29f5c     98 00 A0 FD | 	call	#\builtin_bytefill_
29f60     04 4E 05 F1 | 	add	fp, #4
29f64     A7 FA 01 FB | 	rdlong	result1, fp
29f68     04 4E 85 F1 | 	sub	fp, #4
29f6c     FD FA C9 FA | 	rdbyte	result1, result1 wz
29f70     2C 00 90 AD |  if_e	jmp	#LR__4300
29f74     04 4E 05 F1 | 	add	fp, #4
29f78     A7 FA 01 FB | 	rdlong	result1, fp
29f7c     04 4E 85 F1 | 	sub	fp, #4
29f80     FD FA C1 FA | 	rdbyte	result1, result1
29f84     2E FA 0D F2 | 	cmp	result1, #46 wz
29f88     04 4E 05 A1 |  if_e	add	fp, #4
29f8c     A7 1E 02 AB |  if_e	rdlong	local01, fp
29f90     04 4E 85 A1 |  if_e	sub	fp, #4
29f94     01 1E 06 A1 |  if_e	add	local01, #1
29f98     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
29f9c     18 00 90 5D |  if_ne	jmp	#LR__4301
29fa0                 | LR__4300
29fa0     18 4E 05 F1 | 	add	fp, #24
29fa4     A7 20 48 FC | 	wrbyte	#16, fp
29fa8     0C 4E 85 F1 | 	sub	fp, #12
29fac     A7 00 68 FC | 	wrlong	#0, fp
29fb0     0C 4E 85 F1 | 	sub	fp, #12
29fb4     24 00 90 FD | 	jmp	#LR__4302
29fb8                 | LR__4301
29fb8     04 4E 05 F1 | 	add	fp, #4
29fbc     A7 12 02 FB | 	rdlong	arg01, fp
29fc0     0C 4E 05 F1 | 	add	fp, #12
29fc4     A7 14 02 F6 | 	mov	arg02, fp
29fc8     10 4E 85 F1 | 	sub	fp, #16
29fcc     AC EB BF FD | 	call	#_fatfs_cc_f_stat
29fd0     0C 4E 05 F1 | 	add	fp, #12
29fd4     A7 FA 61 FC | 	wrlong	result1, fp
29fd8     0C 4E 85 F1 | 	sub	fp, #12
29fdc                 | LR__4302
29fdc     0C 4E 05 F1 | 	add	fp, #12
29fe0     A7 20 0A FB | 	rdlong	local02, fp wz
29fe4     0C 4E 85 F1 | 	sub	fp, #12
29fe8     14 00 90 AD |  if_e	jmp	#LR__4303
29fec                 | '         return _set_dos_error(r);
29fec     0C 4E 05 F1 | 	add	fp, #12
29ff0     A7 12 02 FB | 	rdlong	arg01, fp
29ff4     0C 4E 85 F1 | 	sub	fp, #12
29ff8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0894
29ffc     14 01 90 FD | 	jmp	#LR__4304
2a000                 | LR__4303
2a000     2C 4F 05 F1 | 	add	fp, #300
2a004     A7 48 6A FC | 	wrlong	#292, fp
2a008     14 4F 85 F1 | 	sub	fp, #276
2a00c     A7 22 C2 FA | 	rdbyte	local03, fp
2a010     18 4E 85 F1 | 	sub	fp, #24
2a014     01 22 CE F7 | 	test	local03, #1 wz
2a018     2C 4F 05 A1 |  if_e	add	fp, #300
2a01c     A7 22 02 AB |  if_e	rdlong	local03, fp
2a020     92 22 46 A5 |  if_e	or	local03, #146
2a024     A7 22 62 AC |  if_e	wrlong	local03, fp
2a028     2C 4F 85 A1 |  if_e	sub	fp, #300
2a02c     18 4E 05 F1 | 	add	fp, #24
2a030     A7 22 C2 FA | 	rdbyte	local03, fp
2a034     18 4E 85 F1 | 	sub	fp, #24
2a038     10 22 CE F7 | 	test	local03, #16 wz
2a03c     2C 4F 05 51 |  if_ne	add	fp, #300
2a040     A7 22 02 5B |  if_ne	rdlong	local03, fp
2a044     08 00 00 5F 
2a048     49 22 46 55 |  if_ne	or	local03, ##4169
2a04c     A7 22 62 5C |  if_ne	wrlong	local03, fp
2a050     2C 4F 85 51 |  if_ne	sub	fp, #300
2a054     08 4E 05 F1 | 	add	fp, #8
2a058     A7 22 02 FB | 	rdlong	local03, fp
2a05c     24 4F 05 F1 | 	add	fp, #292
2a060     A7 20 02 FB | 	rdlong	local02, fp
2a064     08 22 06 F1 | 	add	local03, #8
2a068     11 21 62 FC | 	wrlong	local02, local03
2a06c     24 4F 85 F1 | 	sub	fp, #292
2a070     A7 22 02 FB | 	rdlong	local03, fp
2a074     0C 22 06 F1 | 	add	local03, #12
2a078     11 03 68 FC | 	wrlong	#1, local03
2a07c     A7 22 02 FB | 	rdlong	local03, fp
2a080     08 4E 05 F1 | 	add	fp, #8
2a084     A7 20 02 FB | 	rdlong	local02, fp
2a088     18 22 06 F1 | 	add	local03, #24
2a08c     11 21 62 FC | 	wrlong	local02, local03
2a090     08 4E 85 F1 | 	sub	fp, #8
2a094     A7 22 02 FB | 	rdlong	local03, fp
2a098     1C 22 06 F1 | 	add	local03, #28
2a09c     01 00 80 FF 
2a0a0     11 01 68 FC | 	wrlong	##512, local03
2a0a4     A7 20 02 FB | 	rdlong	local02, fp
2a0a8     10 23 02 F6 | 	mov	local03, local02
2a0ac     18 20 06 F1 | 	add	local02, #24
2a0b0     10 21 02 FB | 	rdlong	local02, local02
2a0b4     FF 21 06 F1 | 	add	local02, #511
2a0b8     10 21 52 F6 | 	abs	local02, local02 wc
2a0bc     09 20 46 F0 | 	shr	local02, #9
2a0c0     10 21 82 F6 | 	negc	local02, local02
2a0c4     20 22 06 F1 | 	add	local03, #32
2a0c8     11 21 62 FC | 	wrlong	local02, local03
2a0cc     A7 20 02 FB | 	rdlong	local02, fp
2a0d0     10 23 02 F6 | 	mov	local03, local02
2a0d4     10 1F 02 F6 | 	mov	local01, local02
2a0d8     0C 4E 05 F1 | 	add	fp, #12
2a0dc     A7 12 E2 FA | 	rdword	arg01, fp
2a0e0     02 4E 05 F1 | 	add	fp, #2
2a0e4     A7 14 E2 FA | 	rdword	arg02, fp
2a0e8     16 4E 85 F1 | 	sub	fp, #22
2a0ec     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0892
2a0f0     2C 1E 06 F1 | 	add	local01, #44
2a0f4     0F FB 61 FC | 	wrlong	result1, local01
2a0f8     28 20 06 F1 | 	add	local02, #40
2a0fc     10 FB 61 FC | 	wrlong	result1, local02
2a100     24 22 06 F1 | 	add	local03, #36
2a104     11 FB 61 FC | 	wrlong	result1, local03
2a108                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2a108                 | '     }
2a108                 | '     buf->st_mode = mode;
2a108                 | '     buf->st_nlink = 1;
2a108                 | '     buf->st_size = finfo.fsize;
2a108                 | '     buf->st_blksize = 512;
2a108                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2a108                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2a108                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a108                 | '     return r;
2a108     0C 4E 05 F1 | 	add	fp, #12
2a10c     A7 FA 01 FB | 	rdlong	result1, fp
2a110     0C 4E 85 F1 | 	sub	fp, #12
2a114                 | LR__4304
2a114     A7 F0 03 F6 | 	mov	ptra, fp
2a118     B2 00 A0 FD | 	call	#popregs_
2a11c                 | _fatfs_cc_v_stat_ret
2a11c     2D 00 64 FD | 	ret
2a120                 | 
2a120                 | _fatfs_cc_v_read
2a120     00 4A 05 F6 | 	mov	COUNT_, #0
2a124     A8 00 A0 FD | 	call	#pushregs_
2a128     1C F0 07 F1 | 	add	ptra, #28
2a12c     04 4E 05 F1 | 	add	fp, #4
2a130     A7 12 62 FC | 	wrlong	arg01, fp
2a134     04 4E 05 F1 | 	add	fp, #4
2a138     A7 14 62 FC | 	wrlong	arg02, fp
2a13c     04 4E 05 F1 | 	add	fp, #4
2a140     A7 16 62 FC | 	wrlong	arg03, fp
2a144     08 4E 85 F1 | 	sub	fp, #8
2a148     A7 12 02 FB | 	rdlong	arg01, fp
2a14c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a150     0C 4E 05 F1 | 	add	fp, #12
2a154     A7 12 62 FC | 	wrlong	arg01, fp
2a158     10 4E 85 F1 | 	sub	fp, #16
2a15c                 | '         return _seterror( 5 );
2a15c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a160     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a164     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a168     01 FA 65 A6 |  if_e	neg	result1, #1
2a16c     B8 00 90 AD |  if_e	jmp	#LR__4312
2a170     10 4E 05 F1 | 	add	fp, #16
2a174     A7 12 02 FB | 	rdlong	arg01, fp
2a178     02 00 00 FF 
2a17c     14 12 06 F1 | 	add	arg01, ##1044
2a180     08 4E 85 F1 | 	sub	fp, #8
2a184     A7 14 02 FB | 	rdlong	arg02, fp
2a188     04 4E 05 F1 | 	add	fp, #4
2a18c     A7 16 02 FB | 	rdlong	arg03, fp
2a190     0C 4E 05 F1 | 	add	fp, #12
2a194     A7 18 02 F6 | 	mov	arg04, fp
2a198     18 4E 85 F1 | 	sub	fp, #24
2a19c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2a1a0     14 4E 05 F1 | 	add	fp, #20
2a1a4     A7 FA 61 FC | 	wrlong	result1, fp
2a1a8     14 4E 85 F1 | 	sub	fp, #20
2a1ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1b0     34 00 90 AD |  if_e	jmp	#LR__4310
2a1b4     04 4E 05 F1 | 	add	fp, #4
2a1b8     A7 18 02 FB | 	rdlong	arg04, fp
2a1bc     0C 17 02 F6 | 	mov	arg03, arg04
2a1c0     08 18 06 F1 | 	add	arg04, #8
2a1c4     0C 19 02 FB | 	rdlong	arg04, arg04
2a1c8     20 18 46 F5 | 	or	arg04, #32
2a1cc     08 16 06 F1 | 	add	arg03, #8
2a1d0     0B 19 62 FC | 	wrlong	arg04, arg03
2a1d4                 | '         fil->state |=  (0x20) ;
2a1d4                 | '         return _set_dos_error(r);
2a1d4     10 4E 05 F1 | 	add	fp, #16
2a1d8     A7 12 02 FB | 	rdlong	arg01, fp
2a1dc     14 4E 85 F1 | 	sub	fp, #20
2a1e0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a1e4     40 00 90 FD | 	jmp	#LR__4312
2a1e8                 | LR__4310
2a1e8     18 4E 05 F1 | 	add	fp, #24
2a1ec     A7 FA 09 FB | 	rdlong	result1, fp wz
2a1f0     18 4E 85 F1 | 	sub	fp, #24
2a1f4     24 00 90 5D |  if_ne	jmp	#LR__4311
2a1f8     04 4E 05 F1 | 	add	fp, #4
2a1fc     A7 FA 01 FB | 	rdlong	result1, fp
2a200     FD 18 02 F6 | 	mov	arg04, result1
2a204     04 4E 85 F1 | 	sub	fp, #4
2a208     08 FA 05 F1 | 	add	result1, #8
2a20c     FD FA 01 FB | 	rdlong	result1, result1
2a210     10 FA 45 F5 | 	or	result1, #16
2a214     08 18 06 F1 | 	add	arg04, #8
2a218     0C FB 61 FC | 	wrlong	result1, arg04
2a21c                 | LR__4311
2a21c                 | '         fil->state |=  (0x10) ;
2a21c                 | '     }
2a21c                 | '     return x;
2a21c     18 4E 05 F1 | 	add	fp, #24
2a220     A7 FA 01 FB | 	rdlong	result1, fp
2a224     18 4E 85 F1 | 	sub	fp, #24
2a228                 | LR__4312
2a228     A7 F0 03 F6 | 	mov	ptra, fp
2a22c     B2 00 A0 FD | 	call	#popregs_
2a230                 | _fatfs_cc_v_read_ret
2a230     2D 00 64 FD | 	ret
2a234                 | 
2a234                 | _fatfs_cc_v_write
2a234     00 4A 05 F6 | 	mov	COUNT_, #0
2a238     A8 00 A0 FD | 	call	#pushregs_
2a23c     1C F0 07 F1 | 	add	ptra, #28
2a240     04 4E 05 F1 | 	add	fp, #4
2a244     A7 12 62 FC | 	wrlong	arg01, fp
2a248     04 4E 05 F1 | 	add	fp, #4
2a24c     A7 14 62 FC | 	wrlong	arg02, fp
2a250     04 4E 05 F1 | 	add	fp, #4
2a254     A7 16 62 FC | 	wrlong	arg03, fp
2a258     08 4E 85 F1 | 	sub	fp, #8
2a25c     A7 12 02 FB | 	rdlong	arg01, fp
2a260     09 13 0A FB | 	rdlong	arg01, arg01 wz
2a264     0C 4E 05 F1 | 	add	fp, #12
2a268     A7 12 62 FC | 	wrlong	arg01, fp
2a26c     10 4E 85 F1 | 	sub	fp, #16
2a270                 | '         return _seterror( 5 );
2a270     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a274     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a278     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a27c     01 FA 65 A6 |  if_e	neg	result1, #1
2a280     84 00 90 AD |  if_e	jmp	#LR__4321
2a284     10 4E 05 F1 | 	add	fp, #16
2a288     A7 12 02 FB | 	rdlong	arg01, fp
2a28c     02 00 00 FF 
2a290     14 12 06 F1 | 	add	arg01, ##1044
2a294     08 4E 85 F1 | 	sub	fp, #8
2a298     A7 14 02 FB | 	rdlong	arg02, fp
2a29c     04 4E 05 F1 | 	add	fp, #4
2a2a0     A7 16 02 FB | 	rdlong	arg03, fp
2a2a4     0C 4E 05 F1 | 	add	fp, #12
2a2a8     A7 18 02 F6 | 	mov	arg04, fp
2a2ac     18 4E 85 F1 | 	sub	fp, #24
2a2b0     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2a2b4     14 4E 05 F1 | 	add	fp, #20
2a2b8     A7 FA 61 FC | 	wrlong	result1, fp
2a2bc     14 4E 85 F1 | 	sub	fp, #20
2a2c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2c4     34 00 90 AD |  if_e	jmp	#LR__4320
2a2c8     04 4E 05 F1 | 	add	fp, #4
2a2cc     A7 18 02 FB | 	rdlong	arg04, fp
2a2d0     0C 17 02 F6 | 	mov	arg03, arg04
2a2d4     08 18 06 F1 | 	add	arg04, #8
2a2d8     0C 19 02 FB | 	rdlong	arg04, arg04
2a2dc     20 18 46 F5 | 	or	arg04, #32
2a2e0     08 16 06 F1 | 	add	arg03, #8
2a2e4     0B 19 62 FC | 	wrlong	arg04, arg03
2a2e8                 | '         fil->state |=  (0x20) ;
2a2e8                 | '         return _set_dos_error(r);
2a2e8     10 4E 05 F1 | 	add	fp, #16
2a2ec     A7 12 02 FB | 	rdlong	arg01, fp
2a2f0     14 4E 85 F1 | 	sub	fp, #20
2a2f4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a2f8     0C 00 90 FD | 	jmp	#LR__4321
2a2fc                 | LR__4320
2a2fc                 | '     }
2a2fc                 | '     return x;
2a2fc     18 4E 05 F1 | 	add	fp, #24
2a300     A7 FA 01 FB | 	rdlong	result1, fp
2a304     18 4E 85 F1 | 	sub	fp, #24
2a308                 | LR__4321
2a308     A7 F0 03 F6 | 	mov	ptra, fp
2a30c     B2 00 A0 FD | 	call	#popregs_
2a310                 | _fatfs_cc_v_write_ret
2a310     2D 00 64 FD | 	ret
2a314                 | 
2a314                 | _fatfs_cc_v_lseek
2a314     04 4A 05 F6 | 	mov	COUNT_, #4
2a318     A8 00 A0 FD | 	call	#pushregs_
2a31c     0A 1F 02 F6 | 	mov	local01, arg02
2a320     0B 21 02 F6 | 	mov	local02, arg03
2a324     09 23 02 FB | 	rdlong	local03, arg01
2a328     02 00 00 FF 
2a32c     14 22 0E F1 | 	add	local03, ##1044 wz
2a330                 | '         return _seterror( 5 );
2a330     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a334     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a338     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a33c     01 FA 65 A6 |  if_e	neg	result1, #1
2a340     4C 00 90 AD |  if_e	jmp	#LR__4332
2a344     00 20 0E F2 | 	cmp	local02, #0 wz
2a348     24 00 90 AD |  if_e	jmp	#LR__4330
2a34c     01 20 0E F2 | 	cmp	local02, #1 wz
2a350     14 22 06 A1 |  if_e	add	local03, #20
2a354     11 25 02 AB |  if_e	rdlong	local04, local03
2a358     14 22 86 A1 |  if_e	sub	local03, #20
2a35c     12 1F 02 A1 |  if_e	add	local01, local04
2a360     0C 22 06 51 |  if_ne	add	local03, #12
2a364     11 25 02 5B |  if_ne	rdlong	local04, local03
2a368     0C 22 86 51 |  if_ne	sub	local03, #12
2a36c     12 1F 02 51 |  if_ne	add	local01, local04
2a370                 | LR__4330
2a370     0F 15 02 F6 | 	mov	arg02, local01
2a374     11 13 02 F6 | 	mov	arg01, local03
2a378     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2a37c     FD 12 0A F6 | 	mov	arg01, result1 wz
2a380     08 00 90 AD |  if_e	jmp	#LR__4331
2a384                 | '         return _set_dos_error(result);
2a384     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a388     04 00 90 FD | 	jmp	#LR__4332
2a38c                 | LR__4331
2a38c                 | '     }
2a38c                 | '     return offset;
2a38c     0F FB 01 F6 | 	mov	result1, local01
2a390                 | LR__4332
2a390     A7 F0 03 F6 | 	mov	ptra, fp
2a394     B2 00 A0 FD | 	call	#popregs_
2a398                 | _fatfs_cc_v_lseek_ret
2a398     2D 00 64 FD | 	ret
2a39c                 | 
2a39c                 | _fatfs_cc_v_ioctl
2a39c                 | ' {
2a39c                 | '     return _seterror( 10 );
2a39c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a3a0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2a3a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a3a8     01 FA 65 F6 | 	neg	result1, #1
2a3ac                 | _fatfs_cc_v_ioctl_ret
2a3ac     2D 00 64 FD | 	ret
2a3b0                 | 
2a3b0                 | _fatfs_cc_v_mkdir
2a3b0     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2a3b4     FD 12 02 F6 | 	mov	arg01, result1
2a3b8                 | ' 
2a3b8                 | '     r = f_mkdir(name);
2a3b8                 | '     return _set_dos_error(r);
2a3b8     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a3bc                 | _fatfs_cc_v_mkdir_ret
2a3bc     2D 00 64 FD | 	ret
2a3c0                 | 
2a3c0                 | _fatfs_cc_v_remove
2a3c0     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a3c4     FD 12 02 F6 | 	mov	arg01, result1
2a3c8                 | ' 
2a3c8                 | '     r = f_unlink(name);
2a3c8                 | '     return _set_dos_error(r);
2a3c8     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a3cc                 | _fatfs_cc_v_remove_ret
2a3cc     2D 00 64 FD | 	ret
2a3d0                 | 
2a3d0                 | _fatfs_cc_v_rmdir
2a3d0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2a3d4     FD 12 02 F6 | 	mov	arg01, result1
2a3d8                 | ' 
2a3d8                 | '     r = f_unlink(name);
2a3d8                 | '     return _set_dos_error(r);
2a3d8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a3dc                 | _fatfs_cc_v_rmdir_ret
2a3dc     2D 00 64 FD | 	ret
2a3e0                 | 
2a3e0                 | _fatfs_cc_v_rename
2a3e0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2a3e4     FD 12 02 F6 | 	mov	arg01, result1
2a3e8                 | '     return _set_dos_error(r);
2a3e8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a3ec                 | _fatfs_cc_v_rename_ret
2a3ec     2D 00 64 FD | 	ret
2a3f0                 | 
2a3f0                 | _fatfs_cc_v_open
2a3f0     07 4A 05 F6 | 	mov	COUNT_, #7
2a3f4     A8 00 A0 FD | 	call	#pushregs_
2a3f8     09 1F 02 F6 | 	mov	local01, arg01
2a3fc     0A 21 02 F6 | 	mov	local02, arg02
2a400     0B 23 02 F6 | 	mov	local03, arg03
2a404     03 00 00 FF 
2a408     3C 12 06 F6 | 	mov	arg01, ##1596
2a40c                 | '     return _gc_alloc(size);
2a40c     10 14 06 F6 | 	mov	arg02, #16
2a410     A4 58 BF FD | 	call	#__system___gc_doalloc
2a414     FD 24 0A F6 | 	mov	local04, result1 wz
2a418                 | '       return _seterror( 7 );
2a418     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a41c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a420     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a424     01 FA 65 A6 |  if_e	neg	result1, #1
2a428     98 00 90 AD |  if_e	jmp	#LR__4346
2a42c     12 13 02 F6 | 	mov	arg01, local04
2a430     00 14 06 F6 | 	mov	arg02, #0
2a434     03 00 00 FF 
2a438     3C 16 06 F6 | 	mov	arg03, ##1596
2a43c     98 00 A0 FD | 	call	#\builtin_bytefill_
2a440                 | '   switch (flags & 3) {
2a440     11 27 02 F6 | 	mov	local05, local03
2a444     03 26 0E F5 | 	and	local05, #3 wz
2a448     0C 00 90 AD |  if_e	jmp	#LR__4340
2a44c     01 26 0E F2 | 	cmp	local05, #1 wz
2a450     0C 00 90 AD |  if_e	jmp	#LR__4341
2a454     10 00 90 FD | 	jmp	#LR__4342
2a458                 | LR__4340
2a458     01 28 06 F6 | 	mov	local06, #1
2a45c                 | '       fs_flags =  0x01 ;
2a45c                 | '       break;
2a45c     0C 00 90 FD | 	jmp	#LR__4343
2a460                 | LR__4341
2a460     02 28 06 F6 | 	mov	local06, #2
2a464                 | '       fs_flags =  0x02 ;
2a464                 | '       break;
2a464     04 00 90 FD | 	jmp	#LR__4343
2a468                 | LR__4342
2a468     03 28 06 F6 | 	mov	local06, #3
2a46c                 | '       fs_flags =  0x01  |  0x02 ;
2a46c                 | '       break;
2a46c                 | LR__4343
2a46c     08 22 CE F7 | 	test	local03, #8 wz
2a470     18 28 46 55 |  if_ne	or	local06, #24
2a474     08 00 90 5D |  if_ne	jmp	#LR__4344
2a478     20 22 CE F7 | 	test	local03, #32 wz
2a47c     30 28 46 55 |  if_ne	or	local06, #48
2a480                 | LR__4344
2a480     02 00 00 FF 
2a484     14 24 06 F1 | 	add	local04, ##1044
2a488     12 13 02 F6 | 	mov	arg01, local04
2a48c     02 00 00 FF 
2a490     14 24 86 F1 | 	sub	local04, ##1044
2a494     10 15 02 F6 | 	mov	arg02, local02
2a498     14 17 02 F6 | 	mov	arg03, local06
2a49c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2a4a0     FD 2A 0A F6 | 	mov	local07, result1 wz
2a4a4     14 00 90 AD |  if_e	jmp	#LR__4345
2a4a8     12 13 02 F6 | 	mov	arg01, local04
2a4ac                 | '     return _gc_free(ptr);
2a4ac     14 59 BF FD | 	call	#__system___gc_free
2a4b0                 | '     free(f);
2a4b0                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a4b0                 | '     return _set_dos_error(r);
2a4b0     15 13 02 F6 | 	mov	arg01, local07
2a4b4     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a4b8     08 00 90 FD | 	jmp	#LR__4346
2a4bc                 | LR__4345
2a4bc     0F 25 62 FC | 	wrlong	local04, local01
2a4c0                 | '   }
2a4c0                 | '   fil->vfsdata = f;
2a4c0                 | '   return 0;
2a4c0     00 FA 05 F6 | 	mov	result1, #0
2a4c4                 | LR__4346
2a4c4     A7 F0 03 F6 | 	mov	ptra, fp
2a4c8     B2 00 A0 FD | 	call	#popregs_
2a4cc                 | _fatfs_cc_v_open_ret
2a4cc     2D 00 64 FD | 	ret
2a4d0                 | 
2a4d0                 | _fatfs_cc_v_flush
2a4d0     09 13 02 FB | 	rdlong	arg01, arg01
2a4d4     02 00 00 FF 
2a4d8     14 12 0E F1 | 	add	arg01, ##1044 wz
2a4dc                 | '         return _seterror( 5 );
2a4dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a4e0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2a4e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a4e8     01 FA 65 A6 |  if_e	neg	result1, #1
2a4ec     0C 00 90 AD |  if_e	jmp	#LR__4350
2a4f0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2a4f4     FD 12 02 F6 | 	mov	arg01, result1
2a4f8                 | '     }
2a4f8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a4f8                 | '     result = f_sync(f);
2a4f8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a4f8                 | '     return _set_dos_error(result);
2a4f8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0894
2a4fc                 | LR__4350
2a4fc                 | _fatfs_cc_v_flush_ret
2a4fc     2D 00 64 FD | 	ret
2a500                 | 
2a500                 | _fatfs_cc_v_init
2a500                 | ' {
2a500                 | '     return 0;
2a500     00 FA 05 F6 | 	mov	result1, #0
2a504                 | _fatfs_cc_v_init_ret
2a504     2D 00 64 FD | 	ret
2a508                 | 
2a508                 | _fatfs_cc_v_deinit
2a508     5A 01 00 FF 
2a50c     7C 14 06 F6 | 	mov	arg02, ##@LR__4546
2a510     00 12 06 F6 | 	mov	arg01, #0
2a514     00 16 06 F6 | 	mov	arg03, #0
2a518     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2a51c     01 00 00 FF 
2a520     08 E4 05 F1 | 	add	objptr, ##520
2a524     F2 12 02 FB | 	rdlong	arg01, objptr
2a528     04 E4 05 F1 | 	add	objptr, #4
2a52c     F2 14 02 FB | 	rdlong	arg02, objptr
2a530     01 00 00 FF 
2a534     0C E4 85 F1 | 	sub	objptr, ##524
2a538     54 40 BF FD | 	call	#__system___freepins
2a53c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2a53c                 | '     _freepins(f_pinmask);
2a53c                 | '     return 0;
2a53c     00 FA 05 F6 | 	mov	result1, #0
2a540                 | _fatfs_cc_v_deinit_ret
2a540     2D 00 64 FD | 	ret
2a544                 | 
2a544                 | _fatfs_cc_get_vfs
2a544     01 4A 05 F6 | 	mov	COUNT_, #1
2a548     A8 00 A0 FD | 	call	#pushregs_
2a54c     09 1F 02 F6 | 	mov	local01, arg01
2a550     50 12 06 F6 | 	mov	arg01, #80
2a554     30 57 BF FD | 	call	#__system___gc_alloc_managed
2a558     FD 12 02 F6 | 	mov	arg01, result1
2a55c     F2 FA 01 F6 | 	mov	result1, objptr
2a560     00 18 04 FF 
2a564     00 FA 45 F5 | 	or	result1, ##137363456
2a568     09 FB 61 FC | 	wrlong	result1, arg01
2a56c     F2 FA 01 F6 | 	mov	result1, objptr
2a570     00 20 04 FF 
2a574     00 FA 45 F5 | 	or	result1, ##138412032
2a578     04 12 06 F1 | 	add	arg01, #4
2a57c     09 FB 61 FC | 	wrlong	result1, arg01
2a580     F2 FA 01 F6 | 	mov	result1, objptr
2a584     00 28 04 FF 
2a588     00 FA 45 F5 | 	or	result1, ##139460608
2a58c     04 12 06 F1 | 	add	arg01, #4
2a590     09 FB 61 FC | 	wrlong	result1, arg01
2a594     F2 FA 01 F6 | 	mov	result1, objptr
2a598     00 30 04 FF 
2a59c     00 FA 45 F5 | 	or	result1, ##140509184
2a5a0     04 12 06 F1 | 	add	arg01, #4
2a5a4     09 FB 61 FC | 	wrlong	result1, arg01
2a5a8     F2 FA 01 F6 | 	mov	result1, objptr
2a5ac     00 38 04 FF 
2a5b0     00 FA 45 F5 | 	or	result1, ##141557760
2a5b4     04 12 06 F1 | 	add	arg01, #4
2a5b8     09 FB 61 FC | 	wrlong	result1, arg01
2a5bc     04 12 06 F1 | 	add	arg01, #4
2a5c0     09 01 68 FC | 	wrlong	#0, arg01
2a5c4     04 12 06 F1 | 	add	arg01, #4
2a5c8     09 1F 62 FC | 	wrlong	local01, arg01
2a5cc     04 12 06 F1 | 	add	arg01, #4
2a5d0     09 01 68 FC | 	wrlong	#0, arg01
2a5d4     F2 FA 01 F6 | 	mov	result1, objptr
2a5d8     00 40 04 FF 
2a5dc     00 FA 45 F5 | 	or	result1, ##142606336
2a5e0     04 12 06 F1 | 	add	arg01, #4
2a5e4     09 FB 61 FC | 	wrlong	result1, arg01
2a5e8     F2 FA 01 F6 | 	mov	result1, objptr
2a5ec     00 48 04 FF 
2a5f0     00 FA 45 F5 | 	or	result1, ##143654912
2a5f4     04 12 06 F1 | 	add	arg01, #4
2a5f8     09 FB 61 FC | 	wrlong	result1, arg01
2a5fc     F2 FA 01 F6 | 	mov	result1, objptr
2a600     00 50 04 FF 
2a604     00 FA 45 F5 | 	or	result1, ##144703488
2a608     04 12 06 F1 | 	add	arg01, #4
2a60c     09 FB 61 FC | 	wrlong	result1, arg01
2a610     F2 FA 01 F6 | 	mov	result1, objptr
2a614     00 58 04 FF 
2a618     00 FA 45 F5 | 	or	result1, ##145752064
2a61c     04 12 06 F1 | 	add	arg01, #4
2a620     09 FB 61 FC | 	wrlong	result1, arg01
2a624     F2 FA 01 F6 | 	mov	result1, objptr
2a628     00 60 04 FF 
2a62c     00 FA 45 F5 | 	or	result1, ##146800640
2a630     04 12 06 F1 | 	add	arg01, #4
2a634     09 FB 61 FC | 	wrlong	result1, arg01
2a638     F2 FA 01 F6 | 	mov	result1, objptr
2a63c     00 68 04 FF 
2a640     00 FA 45 F5 | 	or	result1, ##147849216
2a644     04 12 06 F1 | 	add	arg01, #4
2a648     09 FB 61 FC | 	wrlong	result1, arg01
2a64c     F2 FA 01 F6 | 	mov	result1, objptr
2a650     00 70 04 FF 
2a654     00 FA 45 F5 | 	or	result1, ##148897792
2a658     04 12 06 F1 | 	add	arg01, #4
2a65c     09 FB 61 FC | 	wrlong	result1, arg01
2a660     F2 FA 01 F6 | 	mov	result1, objptr
2a664     00 78 04 FF 
2a668     00 FA 45 F5 | 	or	result1, ##149946368
2a66c     04 12 06 F1 | 	add	arg01, #4
2a670     09 FB 61 FC | 	wrlong	result1, arg01
2a674     F2 FA 01 F6 | 	mov	result1, objptr
2a678     00 80 04 FF 
2a67c     00 FA 45 F5 | 	or	result1, ##150994944
2a680     04 12 06 F1 | 	add	arg01, #4
2a684     09 FB 61 FC | 	wrlong	result1, arg01
2a688     F2 FA 01 F6 | 	mov	result1, objptr
2a68c     00 88 04 FF 
2a690     00 FA 45 F5 | 	or	result1, ##152043520
2a694     04 12 06 F1 | 	add	arg01, #4
2a698     09 FB 61 FC | 	wrlong	result1, arg01
2a69c     F2 FA 01 F6 | 	mov	result1, objptr
2a6a0     00 90 04 FF 
2a6a4     00 FA 45 F5 | 	or	result1, ##153092096
2a6a8     04 12 06 F1 | 	add	arg01, #4
2a6ac     09 FB 61 FC | 	wrlong	result1, arg01
2a6b0     F2 FA 01 F6 | 	mov	result1, objptr
2a6b4     00 98 04 FF 
2a6b8     00 FA 45 F5 | 	or	result1, ##154140672
2a6bc     04 12 06 F1 | 	add	arg01, #4
2a6c0     09 FB 61 FC | 	wrlong	result1, arg01
2a6c4     4C 12 86 F1 | 	sub	arg01, #76
2a6c8                 | ' 
2a6c8                 | '     v->close = &v_close;
2a6c8                 | '     v->read = &v_read;
2a6c8                 | '     v->write = &v_write;
2a6c8                 | '     v->lseek = &v_lseek;
2a6c8                 | '     v->ioctl = &v_ioctl;
2a6c8                 | '     v->flush = 0;
2a6c8                 | '     v->vfs_data = ptr;
2a6c8                 | '     v->reserved = 0;
2a6c8                 | ' 
2a6c8                 | '     v->open = &v_open;
2a6c8                 | '     v->creat = &v_creat;
2a6c8                 | '     v->opendir = &v_opendir;
2a6c8                 | '     v->closedir = &v_closedir;
2a6c8                 | '     v->readdir = &v_readdir;
2a6c8                 | '     v->stat = &v_stat;
2a6c8                 | ' 
2a6c8                 | '     v->mkdir = &v_mkdir;
2a6c8                 | '     v->rmdir = &v_rmdir;
2a6c8                 | ' 
2a6c8                 | '     v->remove = &v_remove;
2a6c8                 | '     v->rename = &v_rename;
2a6c8                 | ' 
2a6c8                 | '     v->init = &v_init;
2a6c8                 | '     v->deinit = &v_deinit;
2a6c8                 | ' 
2a6c8                 | '     return v;
2a6c8     09 FB 01 F6 | 	mov	result1, arg01
2a6cc     A7 F0 03 F6 | 	mov	ptra, fp
2a6d0     B2 00 A0 FD | 	call	#popregs_
2a6d4                 | _fatfs_cc_get_vfs_ret
2a6d4     2D 00 64 FD | 	ret
2a6d8                 | 
2a6d8                 | _fatfs_cc_xmit_mmc_1041
2a6d8     01 00 00 FF 
2a6dc     10 E4 05 F1 | 	add	objptr, ##528
2a6e0     F2 00 02 FB | 	rdlong	_var01, objptr
2a6e4     08 E4 05 F1 | 	add	objptr, #8
2a6e8     F2 02 02 FB | 	rdlong	_var02, objptr
2a6ec     01 00 00 FF 
2a6f0     18 E4 85 F1 | 	sub	objptr, ##536
2a6f4     40 02 62 FD | 	dirl	_var02
2a6f8     28 02 64 FD | 	setq	#1
2a6fc     09 05 02 FB | 	rdlong	_var03, arg01
2a700     69 04 62 FD | 	rev	_var03
2a704     1B 04 FE F9 | 	movbyts	_var03, #27
2a708     01 05 22 FC | 	wypin	_var03, _var02
2a70c     0A 05 02 F6 | 	mov	_var03, arg02
2a710     02 14 4E F0 | 	shr	arg02, #2 wz
2a714     03 04 66 F0 | 	shl	_var03, #3
2a718     00 05 22 FC | 	wypin	_var03, _var01
2a71c     41 02 62 FD | 	dirh	_var02
2a720     08 12 06 F1 | 	add	arg01, #8
2a724     69 06 62 FD | 	rev	_var04
2a728     1B 06 FE F9 | 	movbyts	_var04, #27
2a72c                 | LR__4360
2a72c     01 07 22 5C |  if_ne	wypin	_var04, _var02
2a730     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2a734     04 12 06 51 |  if_ne	add	arg01, #4
2a738     69 06 62 5D |  if_ne	rev	_var04
2a73c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2a740                 | LR__4361
2a740     40 02 72 5D |  if_ne	testp	_var02 wc
2a744     F8 FF 9F 1D |  if_a	jmp	#LR__4361
2a748     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4360
2a74c                 | LR__4362
2a74c     40 00 72 FD | 	testp	_var01 wc
2a750     F8 FF 9F 3D |  if_ae	jmp	#LR__4362
2a754     40 02 62 FD | 	dirl	_var02
2a758     FF FF FF FF 
2a75c     01 FF 2B FC | 	wypin	##-1, _var02
2a760     41 02 62 FD | 	dirh	_var02
2a764                 | _fatfs_cc_xmit_mmc_1041_ret
2a764     2D 00 64 FD | 	ret
2a768                 | 
2a768                 | _fatfs_cc_rcvr_mmc_1048
2a768     01 00 00 FF 
2a76c     10 E4 05 F1 | 	add	objptr, ##528
2a770     F2 00 02 FB | 	rdlong	_var01, objptr
2a774     0C E4 05 F1 | 	add	objptr, #12
2a778     F2 02 02 FB | 	rdlong	_var02, objptr
2a77c     01 00 00 FF 
2a780     1C E4 85 F1 | 	sub	objptr, ##540
2a784     01 03 08 FC | 	akpin	_var02
2a788     0A 05 0A F6 | 	mov	_var03, arg02 wz
2a78c     02 04 4E F0 | 	shr	_var03, #2 wz
2a790     30 00 90 AD |  if_e	jmp	#LR__4372
2a794     02 07 02 F6 | 	mov	_var04, _var03
2a798     05 06 66 F0 | 	shl	_var04, #5
2a79c     00 07 22 FC | 	wypin	_var04, _var01
2a7a0     01 7F 18 FC | 	wxpin	#63, _var02
2a7a4                 | LR__4370
2a7a4                 | LR__4371
2a7a4     40 02 72 FD | 	testp	_var02 wc
2a7a8     F8 FF 9F 3D |  if_ae	jmp	#LR__4371
2a7ac     01 07 8A FA | 	rdpin	_var04, _var02
2a7b0     69 06 62 FD | 	rev	_var04
2a7b4     1B 06 FE F9 | 	movbyts	_var04, #27
2a7b8     09 07 62 FC | 	wrlong	_var04, arg01
2a7bc     04 12 06 F1 | 	add	arg01, #4
2a7c0     F8 05 6E FB | 	djnz	_var03, #LR__4370
2a7c4                 | LR__4372
2a7c4     03 14 0E F5 | 	and	arg02, #3 wz
2a7c8     24 00 90 AD |  if_e	jmp	#LR__4375
2a7cc     01 4F 18 FC | 	wxpin	#39, _var02
2a7d0                 | LR__4373
2a7d0     00 11 28 FC | 	wypin	#8, _var01
2a7d4                 | LR__4374
2a7d4     40 02 72 FD | 	testp	_var02 wc
2a7d8     F8 FF 9F 3D |  if_ae	jmp	#LR__4374
2a7dc     01 07 8A FA | 	rdpin	_var04, _var02
2a7e0     69 06 62 FD | 	rev	_var04
2a7e4     09 07 42 FC | 	wrbyte	_var04, arg01
2a7e8     01 12 06 F1 | 	add	arg01, #1
2a7ec     F8 15 6E FB | 	djnz	arg02, #LR__4373
2a7f0                 | LR__4375
2a7f0                 | _fatfs_cc_rcvr_mmc_1048_ret
2a7f0     2D 00 64 FD | 	ret
2a7f4                 | 
2a7f4                 | _fatfs_cc_wait_ready_1052
2a7f4     01 4A 05 F6 | 	mov	COUNT_, #1
2a7f8     A8 00 A0 FD | 	call	#pushregs_
2a7fc     10 F0 07 F1 | 	add	ptra, #16
2a800     1A FA 61 FD | 	getct	result1
2a804     08 4E 05 F1 | 	add	fp, #8
2a808     A7 FA 61 FC | 	wrlong	result1, fp
2a80c     14 1E 06 FB | 	rdlong	local01, #20
2a810     01 1E 46 F0 | 	shr	local01, #1
2a814     04 4E 05 F1 | 	add	fp, #4
2a818     A7 1E 62 FC | 	wrlong	local01, fp
2a81c     0C 4E 85 F1 | 	sub	fp, #12
2a820                 | ' {
2a820                 | ' 	BYTE d;
2a820                 | ' 	UINT tmr, tmout;
2a820                 | ' 
2a820                 | ' 	tmr = _cnt();
2a820                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2a820                 | ' 	for(;;) {
2a820                 | LR__4380
2a820     04 4E 05 F1 | 	add	fp, #4
2a824     A7 12 02 F6 | 	mov	arg01, fp
2a828     04 4E 85 F1 | 	sub	fp, #4
2a82c     01 14 06 F6 | 	mov	arg02, #1
2a830     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2a834     04 4E 05 F1 | 	add	fp, #4
2a838     A7 1E C2 FA | 	rdbyte	local01, fp
2a83c     04 4E 85 F1 | 	sub	fp, #4
2a840     FF 1E 0E F2 | 	cmp	local01, #255 wz
2a844     01 FA 05 A6 |  if_e	mov	result1, #1
2a848     28 00 90 AD |  if_e	jmp	#LR__4381
2a84c     1A FA 61 FD | 	getct	result1
2a850     08 4E 05 F1 | 	add	fp, #8
2a854     A7 1E 02 FB | 	rdlong	local01, fp
2a858     0F FB 81 F1 | 	sub	result1, local01
2a85c     04 4E 05 F1 | 	add	fp, #4
2a860     A7 1E 02 FB | 	rdlong	local01, fp
2a864     0C 4E 85 F1 | 	sub	fp, #12
2a868     0F FB 11 F2 | 	cmp	result1, local01 wc
2a86c     00 FA 05 36 |  if_ae	mov	result1, #0
2a870     AC FF 9F CD |  if_b	jmp	#LR__4380
2a874                 | LR__4381
2a874     A7 F0 03 F6 | 	mov	ptra, fp
2a878     B2 00 A0 FD | 	call	#popregs_
2a87c                 | _fatfs_cc_wait_ready_1052_ret
2a87c     2D 00 64 FD | 	ret
2a880                 | 
2a880                 | _fatfs_cc_deselect_1058
2a880     00 4A 05 F6 | 	mov	COUNT_, #0
2a884     A8 00 A0 FD | 	call	#pushregs_
2a888     14 F0 07 F1 | 	add	ptra, #20
2a88c     01 00 00 FF 
2a890     14 E4 05 F1 | 	add	objptr, ##532
2a894     F2 14 02 FB | 	rdlong	arg02, objptr
2a898     04 4E 05 F1 | 	add	fp, #4
2a89c     A7 14 62 FC | 	wrlong	arg02, fp
2a8a0     04 E4 85 F1 | 	sub	objptr, #4
2a8a4     F2 14 02 FB | 	rdlong	arg02, objptr
2a8a8     04 4E 05 F1 | 	add	fp, #4
2a8ac     A7 14 62 FC | 	wrlong	arg02, fp
2a8b0     08 E4 05 F1 | 	add	objptr, #8
2a8b4     F2 14 02 FB | 	rdlong	arg02, objptr
2a8b8     04 4E 05 F1 | 	add	fp, #4
2a8bc     A7 14 62 FC | 	wrlong	arg02, fp
2a8c0     04 E4 05 F1 | 	add	objptr, #4
2a8c4     F2 14 02 FB | 	rdlong	arg02, objptr
2a8c8     01 00 00 FF 
2a8cc     1C E4 85 F1 | 	sub	objptr, ##540
2a8d0     04 4E 05 F1 | 	add	fp, #4
2a8d4     A7 14 62 FC | 	wrlong	arg02, fp
2a8d8     0C 4E 85 F1 | 	sub	fp, #12
2a8dc     A7 12 02 FB | 	rdlong	arg01, fp
2a8e0     04 4E 85 F1 | 	sub	fp, #4
2a8e4     59 12 62 FD | 	drvh	arg01
2a8e8     1F 20 64 FD | 	waitx	#16
2a8ec     A7 12 02 F6 | 	mov	arg01, fp
2a8f0     01 14 06 F6 | 	mov	arg02, #1
2a8f4     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2a8f8     A7 F0 03 F6 | 	mov	ptra, fp
2a8fc     B2 00 A0 FD | 	call	#popregs_
2a900                 | _fatfs_cc_deselect_1058_ret
2a900     2D 00 64 FD | 	ret
2a904                 | 
2a904                 | _fatfs_cc_select_1062
2a904     00 4A 05 F6 | 	mov	COUNT_, #0
2a908     A8 00 A0 FD | 	call	#pushregs_
2a90c     10 F0 07 F1 | 	add	ptra, #16
2a910     01 00 00 FF 
2a914     14 E4 05 F1 | 	add	objptr, ##532
2a918     F2 14 02 FB | 	rdlong	arg02, objptr
2a91c     08 4E 05 F1 | 	add	fp, #8
2a920     A7 14 62 FC | 	wrlong	arg02, fp
2a924     08 E4 05 F1 | 	add	objptr, #8
2a928     F2 12 02 FB | 	rdlong	arg01, objptr
2a92c     01 00 00 FF 
2a930     1C E4 85 F1 | 	sub	objptr, ##540
2a934     04 4E 05 F1 | 	add	fp, #4
2a938     A7 12 62 FC | 	wrlong	arg01, fp
2a93c     50 12 62 FD | 	fltl	arg01
2a940     04 4E 85 F1 | 	sub	fp, #4
2a944     A7 12 02 FB | 	rdlong	arg01, fp
2a948     58 12 62 FD | 	drvl	arg01
2a94c     1F 20 64 FD | 	waitx	#16
2a950     04 4E 05 F1 | 	add	fp, #4
2a954     A7 12 02 FB | 	rdlong	arg01, fp
2a958     41 12 62 FD | 	dirh	arg01
2a95c     08 4E 85 F1 | 	sub	fp, #8
2a960     A7 12 02 F6 | 	mov	arg01, fp
2a964     04 4E 85 F1 | 	sub	fp, #4
2a968     01 14 06 F6 | 	mov	arg02, #1
2a96c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2a970     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1052
2a974     00 FA 0D F2 | 	cmp	result1, #0 wz
2a978     01 FA 05 56 |  if_ne	mov	result1, #1
2a97c     08 00 90 5D |  if_ne	jmp	#LR__4390
2a980     FC FE BF FD | 	call	#_fatfs_cc_deselect_1058
2a984                 | ' 
2a984                 | ' 	deselect();
2a984                 | ' 	return 0;
2a984     00 FA 05 F6 | 	mov	result1, #0
2a988                 | LR__4390
2a988     A7 F0 03 F6 | 	mov	ptra, fp
2a98c     B2 00 A0 FD | 	call	#popregs_
2a990                 | _fatfs_cc_select_1062_ret
2a990     2D 00 64 FD | 	ret
2a994                 | 
2a994                 | _fatfs_cc_rcvr_datablock_1066
2a994     01 4A 05 F6 | 	mov	COUNT_, #1
2a998     A8 00 A0 FD | 	call	#pushregs_
2a99c     18 F0 07 F1 | 	add	ptra, #24
2a9a0     04 4E 05 F1 | 	add	fp, #4
2a9a4     A7 12 62 FC | 	wrlong	arg01, fp
2a9a8     04 4E 05 F1 | 	add	fp, #4
2a9ac     A7 14 62 FC | 	wrlong	arg02, fp
2a9b0     1A FA 61 FD | 	getct	result1
2a9b4     08 4E 05 F1 | 	add	fp, #8
2a9b8     A7 FA 61 FC | 	wrlong	result1, fp
2a9bc     14 1E 06 FB | 	rdlong	local01, #20
2a9c0     03 1E 46 F0 | 	shr	local01, #3
2a9c4     04 4E 05 F1 | 	add	fp, #4
2a9c8     A7 1E 62 FC | 	wrlong	local01, fp
2a9cc     14 4E 85 F1 | 	sub	fp, #20
2a9d0                 | ' 	BYTE *buff,
2a9d0                 | ' 	UINT btr
2a9d0                 | ' )
2a9d0                 | ' {
2a9d0                 | ' 	BYTE d[2];
2a9d0                 | ' 	UINT tmr, tmout;
2a9d0                 | ' 
2a9d0                 | ' 	tmr = _cnt();
2a9d0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2a9d0                 | ' 	for(;;) {
2a9d0                 | LR__4400
2a9d0     0C 4E 05 F1 | 	add	fp, #12
2a9d4     A7 12 02 F6 | 	mov	arg01, fp
2a9d8     0C 4E 85 F1 | 	sub	fp, #12
2a9dc     01 14 06 F6 | 	mov	arg02, #1
2a9e0     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2a9e4     0C 4E 05 F1 | 	add	fp, #12
2a9e8     A7 1E C2 FA | 	rdbyte	local01, fp
2a9ec     0C 4E 85 F1 | 	sub	fp, #12
2a9f0     FF 1E 0E F2 | 	cmp	local01, #255 wz
2a9f4     28 00 90 5D |  if_ne	jmp	#LR__4401
2a9f8     1A FA 61 FD | 	getct	result1
2a9fc     FD 1E 02 F6 | 	mov	local01, result1
2aa00     10 4E 05 F1 | 	add	fp, #16
2aa04     A7 14 02 FB | 	rdlong	arg02, fp
2aa08     0A 1F 82 F1 | 	sub	local01, arg02
2aa0c     04 4E 05 F1 | 	add	fp, #4
2aa10     A7 14 02 FB | 	rdlong	arg02, fp
2aa14     14 4E 85 F1 | 	sub	fp, #20
2aa18     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2aa1c     B0 FF 9F CD |  if_b	jmp	#LR__4400
2aa20                 | LR__4401
2aa20     0C 4E 05 F1 | 	add	fp, #12
2aa24     A7 1E C2 FA | 	rdbyte	local01, fp
2aa28     0C 4E 85 F1 | 	sub	fp, #12
2aa2c     FE 1E 0E F2 | 	cmp	local01, #254 wz
2aa30     00 FA 05 56 |  if_ne	mov	result1, #0
2aa34     30 00 90 5D |  if_ne	jmp	#LR__4402
2aa38     04 4E 05 F1 | 	add	fp, #4
2aa3c     A7 12 02 FB | 	rdlong	arg01, fp
2aa40     04 4E 05 F1 | 	add	fp, #4
2aa44     A7 14 02 FB | 	rdlong	arg02, fp
2aa48     08 4E 85 F1 | 	sub	fp, #8
2aa4c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2aa50     0C 4E 05 F1 | 	add	fp, #12
2aa54     A7 12 02 F6 | 	mov	arg01, fp
2aa58     0C 4E 85 F1 | 	sub	fp, #12
2aa5c     02 14 06 F6 | 	mov	arg02, #2
2aa60     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2aa64                 | ' 
2aa64                 | ' 	rcvr_mmc(buff, btr);
2aa64                 | ' 	rcvr_mmc(d, 2);
2aa64                 | ' 
2aa64                 | ' 	return 1;
2aa64     01 FA 05 F6 | 	mov	result1, #1
2aa68                 | LR__4402
2aa68     A7 F0 03 F6 | 	mov	ptra, fp
2aa6c     B2 00 A0 FD | 	call	#popregs_
2aa70                 | _fatfs_cc_rcvr_datablock_1066_ret
2aa70     2D 00 64 FD | 	ret
2aa74                 | 
2aa74                 | _fatfs_cc_xmit_datablock_1068
2aa74     00 4A 05 F6 | 	mov	COUNT_, #0
2aa78     A8 00 A0 FD | 	call	#pushregs_
2aa7c     10 F0 07 F1 | 	add	ptra, #16
2aa80     04 4E 05 F1 | 	add	fp, #4
2aa84     A7 12 62 FC | 	wrlong	arg01, fp
2aa88     04 4E 05 F1 | 	add	fp, #4
2aa8c     A7 14 42 FC | 	wrbyte	arg02, fp
2aa90     08 4E 85 F1 | 	sub	fp, #8
2aa94     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1052
2aa98     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa9c     00 FA 05 A6 |  if_e	mov	result1, #0
2aaa0     90 00 90 AD |  if_e	jmp	#LR__4411
2aaa4     08 4E 05 F1 | 	add	fp, #8
2aaa8     A7 14 C2 FA | 	rdbyte	arg02, fp
2aaac     04 4E 05 F1 | 	add	fp, #4
2aab0     A7 14 42 FC | 	wrbyte	arg02, fp
2aab4     A7 12 02 F6 | 	mov	arg01, fp
2aab8     0C 4E 85 F1 | 	sub	fp, #12
2aabc     01 14 06 F6 | 	mov	arg02, #1
2aac0     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1041
2aac4     08 4E 05 F1 | 	add	fp, #8
2aac8     A7 14 C2 FA | 	rdbyte	arg02, fp
2aacc     08 4E 85 F1 | 	sub	fp, #8
2aad0     FD 14 0E F2 | 	cmp	arg02, #253 wz
2aad4     58 00 90 AD |  if_e	jmp	#LR__4410
2aad8     04 4E 05 F1 | 	add	fp, #4
2aadc     A7 12 02 FB | 	rdlong	arg01, fp
2aae0     04 4E 85 F1 | 	sub	fp, #4
2aae4     09 14 C6 F9 | 	decod	arg02, #9
2aae8     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1041
2aaec     0C 4E 05 F1 | 	add	fp, #12
2aaf0     A7 12 02 F6 | 	mov	arg01, fp
2aaf4     0C 4E 85 F1 | 	sub	fp, #12
2aaf8     02 14 06 F6 | 	mov	arg02, #2
2aafc     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2ab00     0C 4E 05 F1 | 	add	fp, #12
2ab04     A7 12 02 F6 | 	mov	arg01, fp
2ab08     0C 4E 85 F1 | 	sub	fp, #12
2ab0c     01 14 06 F6 | 	mov	arg02, #1
2ab10     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2ab14     0C 4E 05 F1 | 	add	fp, #12
2ab18     A7 14 C2 FA | 	rdbyte	arg02, fp
2ab1c     0C 4E 85 F1 | 	sub	fp, #12
2ab20     1F 14 06 F5 | 	and	arg02, #31
2ab24     05 14 0E F2 | 	cmp	arg02, #5 wz
2ab28                 | ' 			return 0;
2ab28     00 FA 05 56 |  if_ne	mov	result1, #0
2ab2c     04 00 90 5D |  if_ne	jmp	#LR__4411
2ab30                 | LR__4410
2ab30                 | ' 	}
2ab30                 | ' 
2ab30                 | ' 	return 1;
2ab30     01 FA 05 F6 | 	mov	result1, #1
2ab34                 | LR__4411
2ab34     A7 F0 03 F6 | 	mov	ptra, fp
2ab38     B2 00 A0 FD | 	call	#popregs_
2ab3c                 | _fatfs_cc_xmit_datablock_1068_ret
2ab3c     2D 00 64 FD | 	ret
2ab40                 | 
2ab40                 | _fatfs_cc_send_cmd_1072
2ab40     01 4A 05 F6 | 	mov	COUNT_, #1
2ab44     A8 00 A0 FD | 	call	#pushregs_
2ab48     1C F0 07 F1 | 	add	ptra, #28
2ab4c                 | _fatfs_cc_send_cmd_1072_enter
2ab4c     04 4E 05 F1 | 	add	fp, #4
2ab50     A7 12 42 FC | 	wrbyte	arg01, fp
2ab54     04 4E 05 F1 | 	add	fp, #4
2ab58     A7 14 62 FC | 	wrlong	arg02, fp
2ab5c     04 4E 85 F1 | 	sub	fp, #4
2ab60     A7 FA C1 FA | 	rdbyte	result1, fp
2ab64     04 4E 85 F1 | 	sub	fp, #4
2ab68     80 FA CD F7 | 	test	result1, #128 wz
2ab6c     44 00 90 AD |  if_e	jmp	#LR__4420
2ab70     04 4E 05 F1 | 	add	fp, #4
2ab74     A7 14 C2 FA | 	rdbyte	arg02, fp
2ab78     7F 14 06 F5 | 	and	arg02, #127
2ab7c     A7 14 42 FC | 	wrbyte	arg02, fp
2ab80     04 4E 85 F1 | 	sub	fp, #4
2ab84     37 12 06 F6 | 	mov	arg01, #55
2ab88     00 14 06 F6 | 	mov	arg02, #0
2ab8c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1072
2ab90     0C 4E 05 F1 | 	add	fp, #12
2ab94     A7 FA 41 FC | 	wrbyte	result1, fp
2ab98     A7 14 C2 FA | 	rdbyte	arg02, fp
2ab9c     0C 4E 85 F1 | 	sub	fp, #12
2aba0     02 14 16 F2 | 	cmp	arg02, #2 wc
2aba4     0C 4E 05 31 |  if_ae	add	fp, #12
2aba8     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2abac     0C 4E 85 31 |  if_ae	sub	fp, #12
2abb0     6C 01 90 3D |  if_ae	jmp	#LR__4424
2abb4                 | LR__4420
2abb4     04 4E 05 F1 | 	add	fp, #4
2abb8     A7 14 C2 FA | 	rdbyte	arg02, fp
2abbc     04 4E 85 F1 | 	sub	fp, #4
2abc0     0C 14 0E F2 | 	cmp	arg02, #12 wz
2abc4     14 00 90 AD |  if_e	jmp	#LR__4421
2abc8     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1058
2abcc     34 FD BF FD | 	call	#_fatfs_cc_select_1062
2abd0     00 FA 0D F2 | 	cmp	result1, #0 wz
2abd4     FF FA 05 A6 |  if_e	mov	result1, #255
2abd8     44 01 90 AD |  if_e	jmp	#LR__4424
2abdc                 | LR__4421
2abdc     04 4E 05 F1 | 	add	fp, #4
2abe0     A7 14 C2 FA | 	rdbyte	arg02, fp
2abe4     40 FA 05 F6 | 	mov	result1, #64
2abe8     0A FB 41 F5 | 	or	result1, arg02
2abec     10 4E 05 F1 | 	add	fp, #16
2abf0     A7 FA 41 FC | 	wrbyte	result1, fp
2abf4     0C 4E 85 F1 | 	sub	fp, #12
2abf8     A7 FA 01 FB | 	rdlong	result1, fp
2abfc     18 FA 45 F0 | 	shr	result1, #24
2ac00     0D 4E 05 F1 | 	add	fp, #13
2ac04     A7 FA 41 FC | 	wrbyte	result1, fp
2ac08     0D 4E 85 F1 | 	sub	fp, #13
2ac0c     A7 FA 01 FB | 	rdlong	result1, fp
2ac10     10 FA 45 F0 | 	shr	result1, #16
2ac14     0E 4E 05 F1 | 	add	fp, #14
2ac18     A7 FA 41 FC | 	wrbyte	result1, fp
2ac1c     0E 4E 85 F1 | 	sub	fp, #14
2ac20     A7 FA 01 FB | 	rdlong	result1, fp
2ac24     08 FA 45 F0 | 	shr	result1, #8
2ac28     0F 4E 05 F1 | 	add	fp, #15
2ac2c     A7 FA 41 FC | 	wrbyte	result1, fp
2ac30     0F 4E 85 F1 | 	sub	fp, #15
2ac34     A7 FA 01 FB | 	rdlong	result1, fp
2ac38     10 4E 05 F1 | 	add	fp, #16
2ac3c     A7 FA 41 FC | 	wrbyte	result1, fp
2ac40     0C 4E 85 F1 | 	sub	fp, #12
2ac44     A7 02 48 FC | 	wrbyte	#1, fp
2ac48     08 4E 85 F1 | 	sub	fp, #8
2ac4c     A7 FA C9 FA | 	rdbyte	result1, fp wz
2ac50     04 4E 85 F1 | 	sub	fp, #4
2ac54     0C 4E 05 A1 |  if_e	add	fp, #12
2ac58     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2ac5c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ac60     04 4E 05 F1 | 	add	fp, #4
2ac64     A7 FA C1 FA | 	rdbyte	result1, fp
2ac68     04 4E 85 F1 | 	sub	fp, #4
2ac6c     08 FA 0D F2 | 	cmp	result1, #8 wz
2ac70     0C 4E 05 A1 |  if_e	add	fp, #12
2ac74     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2ac78     0C 4E 85 A1 |  if_e	sub	fp, #12
2ac7c     0C 4E 05 F1 | 	add	fp, #12
2ac80     A7 14 C2 FA | 	rdbyte	arg02, fp
2ac84     0D 4E 05 F1 | 	add	fp, #13
2ac88     A7 14 42 FC | 	wrbyte	arg02, fp
2ac8c     05 4E 85 F1 | 	sub	fp, #5
2ac90     A7 12 02 F6 | 	mov	arg01, fp
2ac94     14 4E 85 F1 | 	sub	fp, #20
2ac98     06 14 06 F6 | 	mov	arg02, #6
2ac9c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1041
2aca0     04 4E 05 F1 | 	add	fp, #4
2aca4     A7 1E C2 FA | 	rdbyte	local01, fp
2aca8     04 4E 85 F1 | 	sub	fp, #4
2acac     0C 1E 0E F2 | 	cmp	local01, #12 wz
2acb0     10 4E 05 A1 |  if_e	add	fp, #16
2acb4     A7 12 02 A6 |  if_e	mov	arg01, fp
2acb8     10 4E 85 A1 |  if_e	sub	fp, #16
2acbc     01 14 06 A6 |  if_e	mov	arg02, #1
2acc0     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1048
2acc4     0C 4E 05 F1 | 	add	fp, #12
2acc8     A7 14 48 FC | 	wrbyte	#10, fp
2accc     0C 4E 85 F1 | 	sub	fp, #12
2acd0                 | ' 	n = 10;
2acd0                 | ' 	do
2acd0                 | LR__4422
2acd0     10 4E 05 F1 | 	add	fp, #16
2acd4     A7 12 02 F6 | 	mov	arg01, fp
2acd8     10 4E 85 F1 | 	sub	fp, #16
2acdc     01 14 06 F6 | 	mov	arg02, #1
2ace0     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1048
2ace4     10 4E 05 F1 | 	add	fp, #16
2ace8     A7 1E C2 FA | 	rdbyte	local01, fp
2acec     10 4E 85 F1 | 	sub	fp, #16
2acf0     80 1E CE F7 | 	test	local01, #128 wz
2acf4     1C 00 90 AD |  if_e	jmp	#LR__4423
2acf8     0C 4E 05 F1 | 	add	fp, #12
2acfc     A7 1E C2 FA | 	rdbyte	local01, fp
2ad00     01 1E 86 F1 | 	sub	local01, #1
2ad04     A7 1E 42 FC | 	wrbyte	local01, fp
2ad08     A7 1E CA FA | 	rdbyte	local01, fp wz
2ad0c     0C 4E 85 F1 | 	sub	fp, #12
2ad10     BC FF 9F 5D |  if_ne	jmp	#LR__4422
2ad14                 | LR__4423
2ad14                 | ' 
2ad14                 | ' 	return d;
2ad14     10 4E 05 F1 | 	add	fp, #16
2ad18     A7 FA C1 FA | 	rdbyte	result1, fp
2ad1c     10 4E 85 F1 | 	sub	fp, #16
2ad20                 | LR__4424
2ad20     A7 F0 03 F6 | 	mov	ptra, fp
2ad24     B2 00 A0 FD | 	call	#popregs_
2ad28                 | _fatfs_cc_send_cmd_1072_ret
2ad28     2D 00 64 FD | 	ret
2ad2c                 | 
2ad2c                 | _fatfs_cc_disk_deinitialize
2ad2c     03 4A 05 F6 | 	mov	COUNT_, #3
2ad30     A8 00 A0 FD | 	call	#pushregs_
2ad34     00 12 4E F2 | 	cmps	arg01, #0 wz
2ad38     01 00 00 FF 
2ad3c     14 E4 05 F1 | 	add	objptr, ##532
2ad40     F2 12 02 FB | 	rdlong	arg01, objptr
2ad44     04 E4 85 F1 | 	sub	objptr, #4
2ad48     F2 1E 02 FB | 	rdlong	local01, objptr
2ad4c     08 E4 05 F1 | 	add	objptr, #8
2ad50     F2 20 02 FB | 	rdlong	local02, objptr
2ad54     04 E4 05 F1 | 	add	objptr, #4
2ad58     F2 22 02 FB | 	rdlong	local03, objptr
2ad5c     01 00 00 FF 
2ad60     1C E4 85 F1 | 	sub	objptr, ##540
2ad64                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2ad64                 | '         return RES_NOTRDY;
2ad64     03 FA 05 56 |  if_ne	mov	result1, #3
2ad68     2C 00 90 5D |  if_ne	jmp	#LR__4430
2ad6c     50 12 62 FD | 	fltl	arg01
2ad70     09 01 08 FC | 	wrpin	#0, arg01
2ad74     50 1E 62 FD | 	fltl	local01
2ad78     0F 01 08 FC | 	wrpin	#0, local01
2ad7c     50 20 62 FD | 	fltl	local02
2ad80     10 01 08 FC | 	wrpin	#0, local02
2ad84     50 22 62 FD | 	fltl	local03
2ad88     11 01 08 FC | 	wrpin	#0, local03
2ad8c     0A 12 06 F6 | 	mov	arg01, #10
2ad90     A0 13 BF FD | 	call	#__system___waitms
2ad94                 | '     }
2ad94                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2ad94                 | '     _pinclear(PIN_SS);
2ad94                 | '     _pinclear(PIN_CLK);
2ad94                 | '     _pinclear(PIN_DI);
2ad94                 | '     _pinclear(PIN_DO);
2ad94                 | ' 
2ad94                 | '     _waitms(10);
2ad94                 | ' 
2ad94                 | '     return 0;
2ad94     00 FA 05 F6 | 	mov	result1, #0
2ad98                 | LR__4430
2ad98     A7 F0 03 F6 | 	mov	ptra, fp
2ad9c     B2 00 A0 FD | 	call	#popregs_
2ada0                 | _fatfs_cc_disk_deinitialize_ret
2ada0     2D 00 64 FD | 	ret
2ada4                 | 
2ada4                 | _fatfs_cc_gettimeofday
2ada4     04 4A 05 F6 | 	mov	COUNT_, #4
2ada8     A8 00 A0 FD | 	call	#pushregs_
2adac     09 1F 02 F6 | 	mov	local01, arg01
2adb0     5C 0F BF FD | 	call	#__system___getus
2adb4     FD 12 02 F6 | 	mov	arg01, result1
2adb8     02 00 00 FF 
2adbc     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2adc0     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2adc4     09 FB 01 F6 | 	mov	result1, arg01
2adc8     10 FB 81 F1 | 	sub	result1, local02
2adcc     A1 07 00 FF 
2add0     40 FA 15 FD | 	qdiv	result1, ##1000000
2add4     02 00 00 FF 
2add8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2addc     18 20 62 FD | 	getqx	local02
2ade0     A1 07 00 FF 
2ade4     40 FA 15 FD | 	qdiv	result1, ##1000000
2ade8     00 20 0E F2 | 	cmp	local02, #0 wz
2adec     19 22 62 FD | 	getqy	local03
2adf0     28 00 90 AD |  if_e	jmp	#LR__4440
2adf4     02 00 00 FF 
2adf8     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2adfc     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2ae00     10 25 02 F1 | 	add	local04, local02
2ae04     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2ae08     11 13 82 F1 | 	sub	arg01, local03
2ae0c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2ae10     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2ae14     02 00 00 FF 
2ae18     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2ae1c                 | LR__4440
2ae1c     02 00 00 FF 
2ae20     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2ae24     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2ae28     02 00 00 FF 
2ae2c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2ae30     0F 25 62 FC | 	wrlong	local04, local01
2ae34     04 1E 06 F1 | 	add	local01, #4
2ae38     0F 23 62 FC | 	wrlong	local03, local01
2ae3c                 | '         lastsec += secs;
2ae3c                 | '         lastus = now - leftover;
2ae3c                 | '     }
2ae3c                 | '     tv->tv_sec = lastsec;
2ae3c                 | '     tv->tv_usec = leftover;
2ae3c                 | '     return 0;
2ae3c     00 FA 05 F6 | 	mov	result1, #0
2ae40     A7 F0 03 F6 | 	mov	ptra, fp
2ae44     B2 00 A0 FD | 	call	#popregs_
2ae48                 | _fatfs_cc_gettimeofday_ret
2ae48     2D 00 64 FD | 	ret
2ae4c                 | 
2ae4c                 | _fatfs_cc__is_leap_year
2ae4c     09 FB 51 F6 | 	abs	result1, arg01 wc
2ae50     03 FA 05 F5 | 	and	result1, #3
2ae54     FD FA 89 F6 | 	negc	result1, result1 wz
2ae58     38 00 90 5D |  if_ne	jmp	#LR__4451
2ae5c     09 FB 51 F6 | 	abs	result1, arg01 wc
2ae60     64 FA 15 FD | 	qdiv	result1, #100
2ae64     19 FA 61 FD | 	getqy	result1
2ae68     FD FA 89 F6 | 	negc	result1, result1 wz
2ae6c     1C 00 90 5D |  if_ne	jmp	#LR__4450
2ae70     09 FB 51 F6 | 	abs	result1, arg01 wc
2ae74     90 FB 15 FD | 	qdiv	result1, #400
2ae78                 | '       return (0 == y % 400);
2ae78     00 FA 05 F6 | 	mov	result1, #0
2ae7c     19 00 62 FD | 	getqy	_var01
2ae80     00 01 8A F6 | 	negc	_var01, _var01 wz
2ae84     01 FA 05 A6 |  if_e	mov	result1, #1
2ae88     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2ae8c                 | LR__4450
2ae8c                 | '     return 1;
2ae8c     01 FA 05 F6 | 	mov	result1, #1
2ae90     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2ae94                 | LR__4451
2ae94                 | '   }
2ae94                 | '   return 0;
2ae94     00 FA 05 F6 | 	mov	result1, #0
2ae98                 | _fatfs_cc__is_leap_year_ret
2ae98     2D 00 64 FD | 	ret
2ae9c                 | 
2ae9c                 | _fatfs_cc___tzoffset
2ae9c     09 01 0A F6 | 	mov	_var01, arg01 wz
2aea0     FF FF FF FF 
2aea4     0A FF 6B FC | 	wrlong	##-1, arg02
2aea8     01 02 06 F6 | 	mov	_var02, #1
2aeac     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2aeb0                 | '                 return 0;
2aeb0     00 FA 05 A6 |  if_e	mov	result1, #0
2aeb4     94 02 90 AD |  if_e	jmp	#LR__4477
2aeb8     0A 01 68 FC | 	wrlong	#0, arg02
2aebc     02 00 00 FF 
2aec0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2aec4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2aec8                 | ' 
2aec8                 | '        *hasdst = 0;
2aec8                 | ' 
2aec8                 | ' 	n = stdname;
2aec8                 | '         while (*s && isalpha(*s)) {
2aec8     02 00 00 FF 
2aecc     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2aed0     97 28 48 FB | 	callpa	#(@LR__4461-@LR__4460)>>2,fcache_load_ptr_
2aed4                 | LR__4460
2aed4     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2aed8     48 00 90 AD |  if_e	jmp	#LR__4462
2aedc     00 13 C2 FA | 	rdbyte	arg01, _var01
2aee0                 | ' {
2aee0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2aee0     80 12 36 F3 | 	fle	arg01, #128 wc
2aee4                 | '     return __ctype[c];
2aee4     02 00 00 FF 
2aee8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2aeec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2aef0     09 FB C1 FA | 	rdbyte	result1, arg01
2aef4     02 00 00 FF 
2aef8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2aefc     0C FA CD F7 | 	test	result1, #12 wz
2af00     20 00 90 AD |  if_e	jmp	#LR__4462
2af04     00 09 02 F6 | 	mov	_var05, _var01
2af08     00 0B 02 F6 | 	mov	_var06, _var01
2af0c     01 0A 06 F1 | 	add	_var06, #1
2af10     04 0D C2 FA | 	rdbyte	_var07, _var05
2af14     05 01 02 F6 | 	mov	_var01, _var06
2af18     03 0D 42 FC | 	wrbyte	_var07, _var04
2af1c     01 06 06 F1 | 	add	_var04, #1
2af20     B0 FF 9F FD | 	jmp	#LR__4460
2af24                 | LR__4461
2af24                 | LR__4462
2af24     03 01 48 FC | 	wrbyte	#0, _var04
2af28     00 0E 06 F6 | 	mov	_var08, #0
2af2c     00 05 C2 FA | 	rdbyte	_var03, _var01
2af30     2D 04 0E F2 | 	cmp	_var03, #45 wz
2af34     01 02 66 A6 |  if_e	neg	_var02, #1
2af38     01 00 06 A1 |  if_e	add	_var01, #1
2af3c     97 28 48 FB | 	callpa	#(@LR__4464-@LR__4463)>>2,fcache_load_ptr_
2af40                 | '                 sgn = -1;
2af40                 | '                 s++;
2af40                 | '         }
2af40                 | '         while (isdigit(*s)) {
2af40                 | LR__4463
2af40     00 13 C2 FA | 	rdbyte	arg01, _var01
2af44                 | ' {
2af44                 | '   return  (__ctype_get(c) & 0x02 ) ;
2af44     80 12 36 F3 | 	fle	arg01, #128 wc
2af48                 | '     return __ctype[c];
2af48     02 00 00 FF 
2af4c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2af50     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2af54     09 FB C1 FA | 	rdbyte	result1, arg01
2af58     02 00 00 FF 
2af5c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2af60     02 FA CD F7 | 	test	result1, #2 wz
2af64     28 00 90 AD |  if_e	jmp	#LR__4465
2af68     07 05 02 F6 | 	mov	_var03, _var08
2af6c     02 04 66 F0 | 	shl	_var03, #2
2af70     07 05 02 F1 | 	add	_var03, _var08
2af74     01 04 66 F0 | 	shl	_var03, #1
2af78     00 09 C2 FA | 	rdbyte	_var05, _var01
2af7c     30 08 86 F1 | 	sub	_var05, #48
2af80     04 05 02 F1 | 	add	_var03, _var05
2af84     02 0F 02 F6 | 	mov	_var08, _var03
2af88     01 00 06 F1 | 	add	_var01, #1
2af8c     B0 FF 9F FD | 	jmp	#LR__4463
2af90                 | LR__4464
2af90                 | LR__4465
2af90     07 00 00 FF 
2af94     10 0E 06 FD | 	qmul	_var08, ##3600
2af98     00 05 C2 FA | 	rdbyte	_var03, _var01
2af9c     3A 04 0E F2 | 	cmp	_var03, #58 wz
2afa0     18 10 62 FD | 	getqx	_var09
2afa4     70 00 90 5D |  if_ne	jmp	#LR__4469
2afa8     00 0E 06 F6 | 	mov	_var08, #0
2afac     01 00 06 F1 | 	add	_var01, #1
2afb0     97 28 48 FB | 	callpa	#(@LR__4467-@LR__4466)>>2,fcache_load_ptr_
2afb4                 | '                 x = 0;
2afb4                 | '                 s++;
2afb4                 | '                 while (isdigit(*s)) {
2afb4                 | LR__4466
2afb4     00 13 C2 FA | 	rdbyte	arg01, _var01
2afb8                 | ' {
2afb8                 | '   return  (__ctype_get(c) & 0x02 ) ;
2afb8     80 12 36 F3 | 	fle	arg01, #128 wc
2afbc                 | '     return __ctype[c];
2afbc     02 00 00 FF 
2afc0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2afc4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2afc8     09 FB C1 FA | 	rdbyte	result1, arg01
2afcc     02 00 00 FF 
2afd0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2afd4     02 FA CD F7 | 	test	result1, #2 wz
2afd8     28 00 90 AD |  if_e	jmp	#LR__4468
2afdc     07 05 02 F6 | 	mov	_var03, _var08
2afe0     02 04 66 F0 | 	shl	_var03, #2
2afe4     07 05 02 F1 | 	add	_var03, _var08
2afe8     01 04 66 F0 | 	shl	_var03, #1
2afec     00 09 C2 FA | 	rdbyte	_var05, _var01
2aff0     30 08 86 F1 | 	sub	_var05, #48
2aff4     04 05 02 F1 | 	add	_var03, _var05
2aff8     02 0F 02 F6 | 	mov	_var08, _var03
2affc     01 00 06 F1 | 	add	_var01, #1
2b000     B0 FF 9F FD | 	jmp	#LR__4466
2b004                 | LR__4467
2b004                 | LR__4468
2b004     07 0D 02 F6 | 	mov	_var07, _var08
2b008     04 0C 66 F0 | 	shl	_var07, #4
2b00c     07 0D 82 F1 | 	sub	_var07, _var08
2b010     02 0C 66 F0 | 	shl	_var07, #2
2b014     06 11 02 F1 | 	add	_var09, _var07
2b018                 | LR__4469
2b018     02 00 00 FF 
2b01c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b020     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2b024     00 13 C2 FA | 	rdbyte	arg01, _var01
2b028                 | ' {
2b028                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b028     80 12 36 F3 | 	fle	arg01, #128 wc
2b02c                 | '     return __ctype[c];
2b02c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2b030     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b034     09 FB C1 FA | 	rdbyte	result1, arg01
2b038     02 00 00 FF 
2b03c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b040     0C FA CD F7 | 	test	result1, #12 wz
2b044     50 00 90 AD |  if_e	jmp	#LR__4472
2b048     0A 03 68 FC | 	wrlong	#1, arg02
2b04c                 | '                 *hasdst = 1;
2b04c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2b04c                 | LR__4470
2b04c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2b050     44 00 90 AD |  if_e	jmp	#LR__4471
2b054     00 13 C2 FA | 	rdbyte	arg01, _var01
2b058                 | ' {
2b058                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2b058     80 12 36 F3 | 	fle	arg01, #128 wc
2b05c                 | '     return __ctype[c];
2b05c     02 00 00 FF 
2b060     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2b064     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2b068     09 FB C1 FA | 	rdbyte	result1, arg01
2b06c     02 00 00 FF 
2b070     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2b074     0C FA CD F7 | 	test	result1, #12 wz
2b078     1C 00 90 AD |  if_e	jmp	#LR__4471
2b07c     00 0B 02 F6 | 	mov	_var06, _var01
2b080     01 0A 06 F1 | 	add	_var06, #1
2b084     00 0D C2 FA | 	rdbyte	_var07, _var01
2b088     05 01 02 F6 | 	mov	_var01, _var06
2b08c     03 0D 42 FC | 	wrbyte	_var07, _var04
2b090     01 06 06 F1 | 	add	_var04, #1
2b094     B4 FF 9F FD | 	jmp	#LR__4470
2b098                 | LR__4471
2b098                 | LR__4472
2b098     03 01 48 FC | 	wrbyte	#0, _var04
2b09c     02 00 00 FF 
2b0a0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b0a4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b0a8     02 00 00 FF 
2b0ac     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2b0b0     20 00 90 AD |  if_e	jmp	#LR__4473
2b0b4     02 00 00 FF 
2b0b8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b0bc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b0c0     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2b0c4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b0c8     02 00 00 FF 
2b0cc     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b0d0     1C 00 90 FD | 	jmp	#LR__4474
2b0d4                 | LR__4473
2b0d4     02 00 00 FF 
2b0d8     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2b0dc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b0e0     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2b0e4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b0e8     02 00 00 FF 
2b0ec     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2b0f0                 | LR__4474
2b0f0     02 00 00 FF 
2b0f4     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b0f8     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2b0fc     02 00 00 FF 
2b100     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2b104     20 00 90 AD |  if_e	jmp	#LR__4475
2b108     02 00 00 FF 
2b10c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2b110     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b114     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2b118     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b11c     02 00 00 FF 
2b120     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b124     1C 00 90 FD | 	jmp	#LR__4476
2b128                 | LR__4475
2b128     02 00 00 FF 
2b12c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2b130     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2b134     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2b138     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2b13c     02 00 00 FF 
2b140     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2b144                 | LR__4476
2b144     08 03 02 FD | 	qmul	_var02, _var09
2b148                 | ' 		_tzname[1] = stdname;
2b148                 | ' 
2b148                 | '         return sgn * off;
2b148     18 FA 61 FD | 	getqx	result1
2b14c                 | LR__4477
2b14c                 | _fatfs_cc___tzoffset_ret
2b14c     2D 00 64 FD | 	ret
2b150                 | 
2b150                 | _fatfs_cc___indst
2b150     10 12 06 F1 | 	add	arg01, #16
2b154     09 01 02 FB | 	rdlong	_var01, arg01
2b158     10 12 86 F1 | 	sub	arg01, #16
2b15c     02 00 0E F2 | 	cmp	_var01, #2 wz
2b160     30 00 90 5D |  if_ne	jmp	#LR__4480
2b164     07 00 06 F6 | 	mov	_var01, #7
2b168     18 12 06 F1 | 	add	arg01, #24
2b16c     09 03 02 FB | 	rdlong	_var02, arg01
2b170     01 01 02 F1 | 	add	_var01, _var02
2b174     0C 12 86 F1 | 	sub	arg01, #12
2b178     09 05 02 FB | 	rdlong	_var03, arg01
2b17c     02 01 82 F1 | 	sub	_var01, _var03
2b180     00 00 56 F2 | 	cmps	_var01, #0 wc
2b184                 | '                         return 1;
2b184     01 FA 05 C6 |  if_b	mov	result1, #1
2b188     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b18c                 | '                 return 0;
2b18c     00 FA 05 F6 | 	mov	result1, #0
2b190     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b194                 | LR__4480
2b194     10 12 06 F1 | 	add	arg01, #16
2b198     09 01 02 FB | 	rdlong	_var01, arg01
2b19c     10 12 86 F1 | 	sub	arg01, #16
2b1a0     0A 00 0E F2 | 	cmp	_var01, #10 wz
2b1a4     28 00 90 5D |  if_ne	jmp	#LR__4481
2b1a8     18 12 06 F1 | 	add	arg01, #24
2b1ac     09 01 02 FB | 	rdlong	_var01, arg01
2b1b0     0C 12 86 F1 | 	sub	arg01, #12
2b1b4     09 07 02 FB | 	rdlong	_var04, arg01
2b1b8     03 01 82 F1 | 	sub	_var01, _var04
2b1bc     00 00 56 F2 | 	cmps	_var01, #0 wc
2b1c0                 | '                         return 0;
2b1c0     00 FA 05 C6 |  if_b	mov	result1, #0
2b1c4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2b1c8                 | '                 return 1;
2b1c8     01 FA 05 F6 | 	mov	result1, #1
2b1cc     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2b1d0                 | LR__4481
2b1d0                 | '         }
2b1d0                 | ' 
2b1d0                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2b1d0     00 00 06 F6 | 	mov	_var01, #0
2b1d4     10 12 06 F1 | 	add	arg01, #16
2b1d8     09 03 02 FB | 	rdlong	_var02, arg01
2b1dc     10 12 86 F1 | 	sub	arg01, #16
2b1e0     03 02 56 F2 | 	cmps	_var02, #3 wc
2b1e4     10 00 90 CD |  if_b	jmp	#LR__4482
2b1e8     10 12 06 F1 | 	add	arg01, #16
2b1ec     09 05 02 FB | 	rdlong	_var03, arg01
2b1f0     0A 04 56 F2 | 	cmps	_var03, #10 wc
2b1f4     01 00 06 C6 |  if_b	mov	_var01, #1
2b1f8                 | LR__4482
2b1f8     00 FB 01 F6 | 	mov	result1, _var01
2b1fc                 | _fatfs_cc___indst_ret
2b1fc     2D 00 64 FD | 	ret
2b200                 | 
2b200                 | ' 	
2b200                 | ' 	FUNCTION pfunc(c as integer) as integer
2b200                 | ___strs_cl_pfunc
2b200                 | ' 		if (i < 16) then
2b200     04 E4 05 F1 | 	add	objptr, #4
2b204     F2 FA 01 FB | 	rdlong	result1, objptr
2b208     04 E4 85 F1 | 	sub	objptr, #4
2b20c     10 FA 55 F2 | 	cmps	result1, #16 wc
2b210     2C 00 90 3D |  if_ae	jmp	#LR__4490
2b214     F2 FA 01 FB | 	rdlong	result1, objptr
2b218     04 E4 05 F1 | 	add	objptr, #4
2b21c     F2 00 02 FB | 	rdlong	_var01, objptr
2b220     FD 00 02 F1 | 	add	_var01, result1
2b224     00 13 42 FC | 	wrbyte	arg01, _var01
2b228     F2 FA 01 FB | 	rdlong	result1, objptr
2b22c     01 FA 05 F1 | 	add	result1, #1
2b230     F2 FA 61 FC | 	wrlong	result1, objptr
2b234     04 E4 85 F1 | 	sub	objptr, #4
2b238                 | ' 			p(i) = c
2b238                 | ' 			i = i+1
2b238                 | ' 			return 1
2b238     01 FA 05 F6 | 	mov	result1, #1
2b23c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2b240                 | LR__4490
2b240                 | ' 			return -1
2b240     01 FA 65 F6 | 	neg	result1, #1
2b244                 | ___strs_cl_pfunc_ret
2b244     2D 00 64 FD | 	ret
2b248                 | 
2b248                 | __struct__s_vfs_file_t_putchar
2b248     04 4A 05 F6 | 	mov	COUNT_, #4
2b24c     A8 00 A0 FD | 	call	#pushregs_
2b250     1C E4 05 F1 | 	add	objptr, #28
2b254     F2 1E 0A FB | 	rdlong	local01, objptr wz
2b258     1C E4 85 F1 | 	sub	objptr, #28
2b25c     00 FA 05 A6 |  if_e	mov	result1, #0
2b260     48 00 90 AD |  if_e	jmp	#LR__4500
2b264     1C E4 05 F1 | 	add	objptr, #28
2b268     F2 20 02 FB | 	rdlong	local02, objptr
2b26c     10 23 02 F6 | 	mov	local03, local02
2b270     1C E4 85 F1 | 	sub	objptr, #28
2b274     13 22 46 F7 | 	zerox	local03, #19
2b278     14 20 46 F0 | 	shr	local02, #20
2b27c     02 20 66 F0 | 	shl	local02, #2
2b280     ED 20 02 F1 | 	add	local02, __methods__
2b284     10 21 02 FB | 	rdlong	local02, local02
2b288     F2 14 02 F6 | 	mov	arg02, objptr
2b28c     F2 24 02 F6 | 	mov	local04, objptr
2b290     11 E5 01 F6 | 	mov	objptr, local03
2b294     2D 20 62 FD | 	call	local02
2b298     12 E5 01 F6 | 	mov	objptr, local04
2b29c                 | '     return (i < 0) ? 0 : 1;
2b29c     00 FA 55 F2 | 	cmps	result1, #0 wc
2b2a0     00 1E 06 C6 |  if_b	mov	local01, #0
2b2a4     01 1E 06 36 |  if_ae	mov	local01, #1
2b2a8     0F FB 01 F6 | 	mov	result1, local01
2b2ac                 | LR__4500
2b2ac     A7 F0 03 F6 | 	mov	ptra, fp
2b2b0     B2 00 A0 FD | 	call	#popregs_
2b2b4                 | __struct__s_vfs_file_t_putchar_ret
2b2b4     2D 00 64 FD | 	ret
2b2b8                 | 
2b2b8                 | __struct__s_vfs_file_t_getchar
2b2b8     03 4A 05 F6 | 	mov	COUNT_, #3
2b2bc     A8 00 A0 FD | 	call	#pushregs_
2b2c0     20 E4 05 F1 | 	add	objptr, #32
2b2c4     F2 12 0A FB | 	rdlong	arg01, objptr wz
2b2c8     20 E4 85 F1 | 	sub	objptr, #32
2b2cc     01 FA 65 A6 |  if_e	neg	result1, #1
2b2d0     38 00 90 AD |  if_e	jmp	#LR__4510
2b2d4                 | '     return getcf(__this);
2b2d4     20 E4 05 F1 | 	add	objptr, #32
2b2d8     F2 1E 02 FB | 	rdlong	local01, objptr
2b2dc     0F 21 02 F6 | 	mov	local02, local01
2b2e0     20 E4 85 F1 | 	sub	objptr, #32
2b2e4     13 20 46 F7 | 	zerox	local02, #19
2b2e8     14 1E 46 F0 | 	shr	local01, #20
2b2ec     02 1E 66 F0 | 	shl	local01, #2
2b2f0     ED 1E 02 F1 | 	add	local01, __methods__
2b2f4     0F 1F 02 FB | 	rdlong	local01, local01
2b2f8     F2 12 02 F6 | 	mov	arg01, objptr
2b2fc     F2 22 02 F6 | 	mov	local03, objptr
2b300     10 E5 01 F6 | 	mov	objptr, local02
2b304     2D 1E 62 FD | 	call	local01
2b308     11 E5 01 F6 | 	mov	objptr, local03
2b30c                 | LR__4510
2b30c     A7 F0 03 F6 | 	mov	ptra, fp
2b310     B2 00 A0 FD | 	call	#popregs_
2b314                 | __struct__s_vfs_file_t_getchar_ret
2b314     2D 00 64 FD | 	ret
2b318                 | 
2b318                 | __struct___bas_wrap_sender_tx
2b318     03 4A 05 F6 | 	mov	COUNT_, #3
2b31c     A8 00 A0 FD | 	call	#pushregs_
2b320     F2 1E 02 FB | 	rdlong	local01, objptr
2b324     0F 21 02 F6 | 	mov	local02, local01
2b328     13 1E 46 F7 | 	zerox	local01, #19
2b32c     14 20 46 F0 | 	shr	local02, #20
2b330     02 20 66 F0 | 	shl	local02, #2
2b334     ED 20 02 F1 | 	add	local02, __methods__
2b338     10 21 02 FB | 	rdlong	local02, local02
2b33c     F2 22 02 F6 | 	mov	local03, objptr
2b340     0F E5 01 F6 | 	mov	objptr, local01
2b344     2D 20 62 FD | 	call	local02
2b348     11 E5 01 F6 | 	mov	objptr, local03
2b34c     01 FA 05 F6 | 	mov	result1, #1
2b350     A7 F0 03 F6 | 	mov	ptra, fp
2b354     B2 00 A0 FD | 	call	#popregs_
2b358                 | __struct___bas_wrap_sender_tx_ret
2b358     2D 00 64 FD | 	ret
2b35c                 | 
2b35c                 | __struct___bas_wrap_sender_rx
2b35c     03 4A 05 F6 | 	mov	COUNT_, #3
2b360     A8 00 A0 FD | 	call	#pushregs_
2b364     04 E4 05 F1 | 	add	objptr, #4
2b368     F2 1E 02 FB | 	rdlong	local01, objptr
2b36c     0F 21 02 F6 | 	mov	local02, local01
2b370     04 E4 85 F1 | 	sub	objptr, #4
2b374     13 20 46 F7 | 	zerox	local02, #19
2b378     14 1E 46 F0 | 	shr	local01, #20
2b37c     02 1E 66 F0 | 	shl	local01, #2
2b380     ED 1E 02 F1 | 	add	local01, __methods__
2b384     0F 1F 02 FB | 	rdlong	local01, local01
2b388     F2 22 02 F6 | 	mov	local03, objptr
2b38c     10 E5 01 F6 | 	mov	objptr, local02
2b390     2D 1E 62 FD | 	call	local01
2b394     11 E5 01 F6 | 	mov	objptr, local03
2b398     A7 F0 03 F6 | 	mov	ptra, fp
2b39c     B2 00 A0 FD | 	call	#popregs_
2b3a0                 | __struct___bas_wrap_sender_rx_ret
2b3a0     2D 00 64 FD | 	ret
2b3a4                 | 
2b3a4                 | __struct___bas_wrap_sender_close
2b3a4     03 4A 05 F6 | 	mov	COUNT_, #3
2b3a8     A8 00 A0 FD | 	call	#pushregs_
2b3ac     08 E4 05 F1 | 	add	objptr, #8
2b3b0     F2 1E 02 FB | 	rdlong	local01, objptr
2b3b4     0F 21 02 F6 | 	mov	local02, local01
2b3b8     08 E4 85 F1 | 	sub	objptr, #8
2b3bc     13 20 46 F7 | 	zerox	local02, #19
2b3c0     14 1E 46 F0 | 	shr	local01, #20
2b3c4     02 1E 66 F0 | 	shl	local01, #2
2b3c8     ED 1E 02 F1 | 	add	local01, __methods__
2b3cc     0F 1F 02 FB | 	rdlong	local01, local01
2b3d0     F2 22 02 F6 | 	mov	local03, objptr
2b3d4     10 E5 01 F6 | 	mov	objptr, local02
2b3d8     2D 1E 62 FD | 	call	local01
2b3dc     11 E5 01 F6 | 	mov	objptr, local03
2b3e0     A7 F0 03 F6 | 	mov	ptra, fp
2b3e4     B2 00 A0 FD | 	call	#popregs_
2b3e8                 | __struct___bas_wrap_sender_close_ret
2b3e8     2D 00 64 FD | 	ret
2b3ec                 | 
2b3ec                 | LR__4520
2b3ec     2F          | 	byte	"/"
2b3ed     00          | 	byte	0
2b3ee                 | LR__4521
2b3ee     69 6E 66    | 	byte	"inf"
2b3f1     00          | 	byte	0
2b3f2                 | LR__4522
2b3f2     6E 61 6E    | 	byte	"nan"
2b3f5     00          | 	byte	0
2b3f6                 | LR__4523
2b3f6                 | 	byte	
2b3f6     00          | 	byte	0
2b3f7                 | LR__4524
2b3f7                 | 	byte	
2b3f7     00          | 	byte	0
2b3f8                 | LR__4525
2b3f8                 | 	byte	
2b3f8     00          | 	byte	0
2b3f9                 | LR__4526
2b3f9                 | 	byte	
2b3f9     00          | 	byte	0
2b3fa                 | LR__4527
2b3fa                 | 	byte	
2b3fa     00          | 	byte	0
2b3fb                 | LR__4528
2b3fb                 | 	byte	
2b3fb     00          | 	byte	0
2b3fc                 | LR__4529
2b3fc                 | 	byte	
2b3fc     00          | 	byte	0
2b3fd                 | LR__4530
2b3fd                 | 	byte	
2b3fd     00          | 	byte	0
2b3fe                 | LR__4531
2b3fe     00          | 	byte	0
2b3ff     00          | 	byte	0
2b400                 | LR__4532
2b400     00          | 	byte	0
2b401     00          | 	byte	0
2b402                 | LR__4533
2b402     00          | 	byte	0
2b403     00          | 	byte	0
2b404                 | LR__4534
2b404     20 21 21 21 
2b408     20 63 6F 72 
2b40c     72 75 70 74 
2b410     65 64 20 68 
2b414     65 61 70 3F 
2b418     3F 3F 20 21 
2b41c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2b41f     00          | 	byte	0
2b420                 | LR__4535
2b420     20 21 21 21 
2b424     20 6F 75 74 
2b428     20 6F 66 20 
2b42c     68 65 61 70 
2b430     20 6D 65 6D 
2b434     6F 72 79 20 
2b438     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2b43c     00          | 	byte	0
2b43d                 | LR__4536
2b43d     20 21 21 21 
2b441     20 63 6F 72 
2b445     72 75 70 74 
2b449     65 64 20 68 
2b44d     65 61 70 20 
2b451     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2b455     00          | 	byte	0
2b456                 | LR__4537
2b456     00          | 	byte	0
2b457     00          | 	byte	0
2b458                 | LR__4538
2b458     2E          | 	byte	"."
2b459     00          | 	byte	0
2b45a                 | LR__4539
2b45a     00          | 	byte	0
2b45b     00          | 	byte	0
2b45c                 | LR__4540
2b45c     00          | 	byte	0
2b45d     00          | 	byte	0
2b45e                 | LR__4541
2b45e     00          | 	byte	0
2b45f     00          | 	byte	0
2b460                 | LR__4542
2b460     2A 3A 3C 3E 
2b464     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2b468     00          | 	byte	0
2b469                 | LR__4543
2b469     2B 2C 3B 3D 
2b46d     5B 5D       | 	byte	"+,;=[]"
2b46f     00          | 	byte	0
2b470                 | LR__4544
2b470     46 41 54 33 
2b474     32 20 20 20 | 	byte	"FAT32   "
2b478     00          | 	byte	0
2b479                 | LR__4545
2b479     54 5A       | 	byte	"TZ"
2b47b     00          | 	byte	0
2b47c                 | LR__4546
2b47c     00          | 	byte	0
2b47d     00          | 	byte	0
2b47e                 | LR__4547
2b47e                 | 	byte	
2b47e     00          | 	byte	0
2b47f                 | LR__4548
2b47f                 | 	byte	
2b47f     00          | 	byte	0
2b480                 | LR__4549
2b480     22          | 	byte	34
2b481     00          | 	byte	0
2b482                 | LR__4550
2b482     22          | 	byte	34
2b483     00          | 	byte	0
2b484                 | LR__4551
2b484     3A          | 	byte	":"
2b485     00          | 	byte	0
2b486                 | LR__4552
2b486                 | 	byte	
2b486     00          | 	byte	0
2b487                 | LR__4553
2b487                 | 	byte	
2b487     00          | 	byte	0
2b488                 | LR__4554
2b488                 | 	byte	
2b488     00          | 	byte	0
2b489                 | LR__4555
2b489                 | 	byte	
2b489     00          | 	byte	0
2b48a                 | LR__4556
2b48a                 | 	byte	
2b48a     00          | 	byte	0
2b48b                 | LR__4557
2b48b                 | 	byte	
2b48b     00          | 	byte	0
2b48c                 | LR__4558
2b48c                 | 	byte	
2b48c     00          | 	byte	0
2b48d                 | LR__4559
2b48d     22          | 	byte	34
2b48e     00          | 	byte	0
2b48f                 | LR__4560
2b48f     22          | 	byte	34
2b490     00          | 	byte	0
2b491                 | LR__4561
2b491     22          | 	byte	34
2b492     00          | 	byte	0
2b493                 | LR__4562
2b493     22          | 	byte	34
2b494     00          | 	byte	0
2b495                 | LR__4563
2b495     22          | 	byte	34
2b496     00          | 	byte	0
2b497                 | LR__4564
2b497     3E          | 	byte	">"
2b498     00          | 	byte	0
2b499                 | LR__4565
2b499     3E          | 	byte	">"
2b49a     00          | 	byte	0
2b49b                 | LR__4566
2b49b     2B          | 	byte	"+"
2b49c     00          | 	byte	0
2b49d                 | LR__4567
2b49d     2D          | 	byte	"-"
2b49e     00          | 	byte	0
2b49f                 | LR__4568
2b49f     2A          | 	byte	"*"
2b4a0     00          | 	byte	0
2b4a1                 | LR__4569
2b4a1     2F          | 	byte	"/"
2b4a2     00          | 	byte	0
2b4a3                 | LR__4570
2b4a3     5E          | 	byte	"^"
2b4a4     00          | 	byte	0
2b4a5                 | LR__4571
2b4a5     3D          | 	byte	"="
2b4a6     00          | 	byte	0
2b4a7                 | LR__4572
2b4a7     2B          | 	byte	"+"
2b4a8     00          | 	byte	0
2b4a9                 | LR__4573
2b4a9     2B          | 	byte	"+"
2b4aa     00          | 	byte	0
2b4ab                 | LR__4574
2b4ab     2D          | 	byte	"-"
2b4ac     00          | 	byte	0
2b4ad                 | LR__4575
2b4ad     2D          | 	byte	"-"
2b4ae     00          | 	byte	0
2b4af                 | LR__4576
2b4af     3C          | 	byte	"<"
2b4b0     00          | 	byte	0
2b4b1                 | LR__4577
2b4b1     3E          | 	byte	">"
2b4b2     00          | 	byte	0
2b4b3                 | LR__4578
2b4b3     22          | 	byte	34
2b4b4     00          | 	byte	0
2b4b5                 | LR__4579
2b4b5     22          | 	byte	34
2b4b6     00          | 	byte	0
2b4b7                 | LR__4580
2b4b7     2E          | 	byte	"."
2b4b8     00          | 	byte	0
2b4b9                 | LR__4581
2b4b9     3F          | 	byte	"?"
2b4ba     00          | 	byte	0
2b4bb                 | LR__4582
2b4bb     3F          | 	byte	"?"
2b4bc     00          | 	byte	0
2b4bd                 | LR__4583
2b4bd     6D 6F 75 73 
2b4c1     65          | 	byte	"mouse"
2b4c2     00          | 	byte	0
2b4c3                 | LR__4584
2b4c3     63 75 72 73 
2b4c7     6F 72       | 	byte	"cursor"
2b4c9     00          | 	byte	0
2b4ca                 | LR__4585
2b4ca     63 6C 69 63 
2b4ce     6B          | 	byte	"click"
2b4cf     00          | 	byte	0
2b4d0                 | LR__4586
2b4d0     6F 6E       | 	byte	"on"
2b4d2     00          | 	byte	0
2b4d3                 | LR__4587
2b4d3     31          | 	byte	"1"
2b4d4     00          | 	byte	0
2b4d5                 | LR__4588
2b4d5     6F 66 66    | 	byte	"off"
2b4d8     00          | 	byte	0
2b4d9                 | LR__4589
2b4d9     30          | 	byte	"0"
2b4da     00          | 	byte	0
2b4db                 | LR__4590
2b4db     6D 6F 64 65 | 	byte	"mode"
2b4df     00          | 	byte	0
2b4e0                 | LR__4591
2b4e0     6D 2E       | 	byte	"m."
2b4e2     00          | 	byte	0
2b4e3                 | LR__4592
2b4e3     61 74 61 72 
2b4e7     69          | 	byte	"atari"
2b4e8     00          | 	byte	0
2b4e9                 | LR__4593
2b4e9     30          | 	byte	"0"
2b4ea     00          | 	byte	0
2b4eb                 | LR__4594
2b4eb     70 63 5F 61 
2b4ef     6D 62 65 72 | 	byte	"pc_amber"
2b4f3     00          | 	byte	0
2b4f4                 | LR__4595
2b4f4     31          | 	byte	"1"
2b4f5     00          | 	byte	0
2b4f6                 | LR__4596
2b4f6     70 63 5F 67 
2b4fa     72 65 65 6E | 	byte	"pc_green"
2b4fe     00          | 	byte	0
2b4ff                 | LR__4597
2b4ff     32          | 	byte	"2"
2b500     00          | 	byte	0
2b501                 | LR__4598
2b501     70 63 5F 77 
2b505     68 69 74 65 | 	byte	"pc_white"
2b509     00          | 	byte	0
2b50a                 | LR__4599
2b50a     33          | 	byte	"3"
2b50b     00          | 	byte	0
2b50c                 | LR__4600
2b50c     73 74       | 	byte	"st"
2b50e     00          | 	byte	0
2b50f                 | LR__4601
2b50f     34          | 	byte	"4"
2b510     00          | 	byte	0
2b511                 | LR__4602
2b511                 | 	byte	
2b511     00          | 	byte	0
2b512                 | LR__4603
2b512     6C 6F 61 64 | 	byte	"load"
2b516     00          | 	byte	0
2b517                 | LR__4604
2b517     73 61 76 65 | 	byte	"save"
2b51b     00          | 	byte	0
2b51c                 | LR__4605
2b51c     62 72 75 6E | 	byte	"brun"
2b520     00          | 	byte	0
2b521                 | LR__4606
2b521     6C 6F 2E    | 	byte	"lo."
2b524     00          | 	byte	0
2b525                 | LR__4607
2b525     73 2E       | 	byte	"s."
2b527     00          | 	byte	0
2b528                 | LR__4608
2b528     62 72 2E    | 	byte	"br."
2b52b     00          | 	byte	0
2b52c                 | LR__4609
2b52c                 | 	byte	
2b52c     00          | 	byte	0
2b52d                 | LR__4610
2b52d                 | 	byte	
2b52d     00          | 	byte	0
2b52e                 | LR__4611
2b52e                 | 	byte	
2b52e     00          | 	byte	0
2b52f                 | LR__4612
2b52f                 | 	byte	
2b52f     00          | 	byte	0
2b530                 | LR__4613
2b530     20 55 73 65 
2b534     72 20 66 75 
2b538     6E 63 74 69 
2b53c     6F 6E 73 20 
2b540     61 6E 64 20 
2b544     61 72 72 61 
2b548     79 73 20 6E 
2b54c     6F 74 20 79 
2b550     65 74 20 69 
2b554     6D 70 6C 65 
2b558     6D 65 6E 74 
2b55c     65 64       | 	byte	" User functions and arrays not yet implemented"
2b55e     00          | 	byte	0
2b55f                 | LR__4614
2b55f                 | 	byte	
2b55f     00          | 	byte	0
2b560                 | LR__4615
2b560                 | 	byte	
2b560     00          | 	byte	0
2b561                 | LR__4616
2b561     52 65 61 64 
2b565     79          | 	byte	"Ready"
2b566     00          | 	byte	0
2b567                 | LR__4617
2b567     2B          | 	byte	"+"
2b568     00          | 	byte	0
2b569                 | LR__4618
2b569     2D          | 	byte	"-"
2b56a     00          | 	byte	0
2b56b                 | LR__4619
2b56b     6F 72       | 	byte	"or"
2b56d     00          | 	byte	0
2b56e                 | LR__4620
2b56e     78 6F 72    | 	byte	"xor"
2b571     00          | 	byte	0
2b572                 | LR__4621
2b572     2A          | 	byte	"*"
2b573     00          | 	byte	0
2b574                 | LR__4622
2b574     2F          | 	byte	"/"
2b575     00          | 	byte	0
2b576                 | LR__4623
2b576     61 6E 64    | 	byte	"and"
2b579     00          | 	byte	0
2b57a                 | LR__4624
2b57a     64 69 76    | 	byte	"div"
2b57d     00          | 	byte	0
2b57e                 | LR__4625
2b57e     6D 6F 64    | 	byte	"mod"
2b581     00          | 	byte	0
2b582                 | LR__4626
2b582     73 68 6C    | 	byte	"shl"
2b585     00          | 	byte	0
2b586                 | LR__4627
2b586     73 68 72    | 	byte	"shr"
2b589     00          | 	byte	0
2b58a                 | LR__4628
2b58a     5E          | 	byte	"^"
2b58b     00          | 	byte	0
2b58c                 | LR__4629
2b58c     6E 6F 74    | 	byte	"not"
2b58f     00          | 	byte	0
2b590                 | LR__4630
2b590     40          | 	byte	"@"
2b591     00          | 	byte	0
2b592                 | LR__4631
2b592     3D          | 	byte	"="
2b593     00          | 	byte	0
2b594                 | LR__4632
2b594     3E 3D       | 	byte	">="
2b596     00          | 	byte	0
2b597                 | LR__4633
2b597     3C 3D       | 	byte	"<="
2b599     00          | 	byte	0
2b59a                 | LR__4634
2b59a     3C          | 	byte	"<"
2b59b     00          | 	byte	0
2b59c                 | LR__4635
2b59c     3E          | 	byte	">"
2b59d     00          | 	byte	0
2b59e                 | LR__4636
2b59e     3C 3E       | 	byte	"<>"
2b5a0     00          | 	byte	0
2b5a1                 | LR__4637
2b5a1     2B 2B       | 	byte	"++"
2b5a3     00          | 	byte	0
2b5a4                 | LR__4638
2b5a4     2D 2D       | 	byte	"--"
2b5a6     00          | 	byte	0
2b5a7                 | LR__4639
2b5a7     23          | 	byte	"#"
2b5a8     00          | 	byte	0
2b5a9                 | LR__4640
2b5a9     23          | 	byte	"#"
2b5aa     00          | 	byte	0
2b5ab                 | LR__4641
2b5ab     2D          | 	byte	"-"
2b5ac     00          | 	byte	0
2b5ad                 | LR__4642
2b5ad     30          | 	byte	"0"
2b5ae     00          | 	byte	0
2b5af                 | LR__4643
2b5af     63          | 	byte	"c"
2b5b0     00          | 	byte	0
2b5b1                 | LR__4644
2b5b1     63 23       | 	byte	"c#"
2b5b3     00          | 	byte	0
2b5b4                 | LR__4645
2b5b4     64          | 	byte	"d"
2b5b5     00          | 	byte	0
2b5b6                 | LR__4646
2b5b6     64 23       | 	byte	"d#"
2b5b8     00          | 	byte	0
2b5b9                 | LR__4647
2b5b9     65          | 	byte	"e"
2b5ba     00          | 	byte	0
2b5bb                 | LR__4648
2b5bb     66          | 	byte	"f"
2b5bc     00          | 	byte	0
2b5bd                 | LR__4649
2b5bd     66 23       | 	byte	"f#"
2b5bf     00          | 	byte	0
2b5c0                 | LR__4650
2b5c0     67          | 	byte	"g"
2b5c1     00          | 	byte	0
2b5c2                 | LR__4651
2b5c2     67 23       | 	byte	"g#"
2b5c4     00          | 	byte	0
2b5c5                 | LR__4652
2b5c5     61          | 	byte	"a"
2b5c6     00          | 	byte	0
2b5c7                 | LR__4653
2b5c7     61 23       | 	byte	"a#"
2b5c9     00          | 	byte	0
2b5ca                 | LR__4654
2b5ca     68          | 	byte	"h"
2b5cb     00          | 	byte	0
2b5cc                 | LR__4655
2b5cc     62          | 	byte	"b"
2b5cd     00          | 	byte	0
2b5ce                 | LR__4656
2b5ce     2B          | 	byte	"+"
2b5cf     00          | 	byte	0
2b5d0                 | LR__4657
2b5d0     2D          | 	byte	"-"
2b5d1     00          | 	byte	0
2b5d2                 | LR__4658
2b5d2     3D          | 	byte	"="
2b5d3     00          | 	byte	0
2b5d4                 | LR__4659
2b5d4     2C          | 	byte	","
2b5d5     00          | 	byte	0
2b5d6                 | LR__4660
2b5d6     2A          | 	byte	"*"
2b5d7     00          | 	byte	0
2b5d8                 | LR__4661
2b5d8     2F          | 	byte	"/"
2b5d9     00          | 	byte	0
2b5da                 | LR__4662
2b5da     3B          | 	byte	";"
2b5db     00          | 	byte	0
2b5dc                 | LR__4663
2b5dc     22          | 	byte	34
2b5dd     00          | 	byte	0
2b5de                 | LR__4664
2b5de     5E          | 	byte	"^"
2b5df     00          | 	byte	0
2b5e0                 | LR__4665
2b5e0     29          | 	byte	")"
2b5e1     00          | 	byte	0
2b5e2                 | LR__4666
2b5e2     28          | 	byte	"("
2b5e3     00          | 	byte	0
2b5e4                 | LR__4667
2b5e4     3A          | 	byte	":"
2b5e5     00          | 	byte	0
2b5e6                 | LR__4668
2b5e6     20          | 	byte	" "
2b5e7     00          | 	byte	0
2b5e8                 | LR__4669
2b5e8     3E          | 	byte	">"
2b5e9     00          | 	byte	0
2b5ea                 | LR__4670
2b5ea     3C          | 	byte	"<"
2b5eb     00          | 	byte	0
2b5ec                 | LR__4671
2b5ec     3D          | 	byte	"="
2b5ed     00          | 	byte	0
2b5ee                 | LR__4672
2b5ee     62 65 65 70 | 	byte	"beep"
2b5f2     00          | 	byte	0
2b5f3                 | LR__4673
2b5f3     62 2E       | 	byte	"b."
2b5f5     00          | 	byte	0
2b5f6                 | LR__4674
2b5f6     62 6F 78    | 	byte	"box"
2b5f9     00          | 	byte	0
2b5fa                 | LR__4675
2b5fa     62 72 75 6E | 	byte	"brun"
2b5fe     00          | 	byte	0
2b5ff                 | LR__4676
2b5ff     62 72 2E    | 	byte	"br."
2b602     00          | 	byte	0
2b603                 | LR__4677
2b603     63 69 72 63 
2b607     6C 65       | 	byte	"circle"
2b609     00          | 	byte	0
2b60a                 | LR__4678
2b60a     63 69 2E    | 	byte	"ci."
2b60d     00          | 	byte	0
2b60e                 | LR__4679
2b60e     63 6C 69 63 
2b612     6B          | 	byte	"click"
2b613     00          | 	byte	0
2b614                 | LR__4680
2b614     63 6C 73    | 	byte	"cls"
2b617     00          | 	byte	0
2b618                 | LR__4681
2b618     63 6F 6C 6F 
2b61c     72          | 	byte	"color"
2b61d     00          | 	byte	0
2b61e                 | LR__4682
2b61e     63 2E       | 	byte	"c."
2b620     00          | 	byte	0
2b621                 | LR__4683
2b621     63 73 61 76 
2b625     65          | 	byte	"csave"
2b626     00          | 	byte	0
2b627                 | LR__4684
2b627     63 73 2E    | 	byte	"cs."
2b62a     00          | 	byte	0
2b62b                 | LR__4685
2b62b     63 75 72 73 
2b62f     6F 72       | 	byte	"cursor"
2b631     00          | 	byte	0
2b632                 | LR__4686
2b632     64 65 66 73 
2b636     6E 64       | 	byte	"defsnd"
2b638     00          | 	byte	0
2b639                 | LR__4687
2b639     64 65 66 65 
2b63d     6E 76       | 	byte	"defenv"
2b63f     00          | 	byte	0
2b640                 | LR__4688
2b640     64 65 66 73 
2b644     70 72 69 74 
2b648     65          | 	byte	"defsprite"
2b649     00          | 	byte	0
2b64a                 | LR__4689
2b64a     64 73 2E    | 	byte	"ds."
2b64d     00          | 	byte	0
2b64e                 | LR__4690
2b64e     64 65 67    | 	byte	"deg"
2b651     00          | 	byte	0
2b652                 | LR__4691
2b652     64 69 6D    | 	byte	"dim"
2b655     00          | 	byte	0
2b656                 | LR__4692
2b656     64 69 72    | 	byte	"dir"
2b659     00          | 	byte	0
2b65a                 | LR__4693
2b65a     64 70 6F 6B 
2b65e     65          | 	byte	"dpoke"
2b65f     00          | 	byte	0
2b660                 | LR__4694
2b660     64 72 61 77 | 	byte	"draw"
2b664     00          | 	byte	0
2b665                 | LR__4695
2b665     64 72 2E    | 	byte	"dr."
2b668     00          | 	byte	0
2b669                 | LR__4696
2b669     65 6C 73 65 | 	byte	"else"
2b66d     00          | 	byte	0
2b66e                 | LR__4697
2b66e     66 63 69 72 
2b672     63 6C 65    | 	byte	"fcircle"
2b675     00          | 	byte	0
2b676                 | LR__4698
2b676     66 63 2E    | 	byte	"fc."
2b679     00          | 	byte	0
2b67a                 | LR__4699
2b67a     66 69 6C 6C | 	byte	"fill"
2b67e     00          | 	byte	0
2b67f                 | LR__4700
2b67f     66 69 2E    | 	byte	"fi."
2b682     00          | 	byte	0
2b683                 | LR__4701
2b683     66 6F 6E 74 | 	byte	"font"
2b687     00          | 	byte	0
2b688                 | LR__4702
2b688     66 6F 72    | 	byte	"for"
2b68b     00          | 	byte	0
2b68c                 | LR__4703
2b68c     66 2E       | 	byte	"f."
2b68e     00          | 	byte	0
2b68f                 | LR__4704
2b68f     66 72 61 6D 
2b693     65          | 	byte	"frame"
2b694     00          | 	byte	0
2b695                 | LR__4705
2b695     66 72 2E    | 	byte	"fr."
2b698     00          | 	byte	0
2b699                 | LR__4706
2b699     67 6F 74 6F | 	byte	"goto"
2b69d     00          | 	byte	0
2b69e                 | LR__4707
2b69e     67 2E       | 	byte	"g."
2b6a0     00          | 	byte	0
2b6a1                 | LR__4708
2b6a1     69 66       | 	byte	"if"
2b6a3     00          | 	byte	0
2b6a4                 | LR__4709
2b6a4     69 6E 6B    | 	byte	"ink"
2b6a7     00          | 	byte	0
2b6a8                 | LR__4710
2b6a8     69 2E       | 	byte	"i."
2b6aa     00          | 	byte	0
2b6ab                 | LR__4711
2b6ab     69 6E 74    | 	byte	"int"
2b6ae     00          | 	byte	0
2b6af                 | LR__4712
2b6af     6C 69 73 74 | 	byte	"list"
2b6b3     00          | 	byte	0
2b6b4                 | LR__4713
2b6b4     6C 2E       | 	byte	"l."
2b6b6     00          | 	byte	0
2b6b7                 | LR__4714
2b6b7     6C 6F 61 64 | 	byte	"load"
2b6bb     00          | 	byte	0
2b6bc                 | LR__4715
2b6bc     6C 6F 2E    | 	byte	"lo."
2b6bf     00          | 	byte	0
2b6c0                 | LR__4716
2b6c0     6C 70 6F 6B 
2b6c4     65          | 	byte	"lpoke"
2b6c5     00          | 	byte	0
2b6c6                 | LR__4717
2b6c6     6D 6F 64 65 | 	byte	"mode"
2b6ca     00          | 	byte	0
2b6cb                 | LR__4718
2b6cb     6D 2E       | 	byte	"m."
2b6cd     00          | 	byte	0
2b6ce                 | LR__4719
2b6ce     6D 6F 75 73 
2b6d2     65          | 	byte	"mouse"
2b6d3     00          | 	byte	0
2b6d4                 | LR__4720
2b6d4     6E 65 77    | 	byte	"new"
2b6d7     00          | 	byte	0
2b6d8                 | LR__4721
2b6d8     6E 65 78 74 | 	byte	"next"
2b6dc     00          | 	byte	0
2b6dd                 | LR__4722
2b6dd     6E 2E       | 	byte	"n."
2b6df     00          | 	byte	0
2b6e0                 | LR__4723
2b6e0     70 61 70 65 
2b6e4     72          | 	byte	"paper"
2b6e5     00          | 	byte	0
2b6e6                 | LR__4724
2b6e6     70 2E       | 	byte	"p."
2b6e8     00          | 	byte	0
2b6e9                 | LR__4725
2b6e9     70 69 6E 66 
2b6ed     6C 6F 61 74 | 	byte	"pinfloat"
2b6f1     00          | 	byte	0
2b6f2                 | LR__4726
2b6f2     70 69 6E 68 
2b6f6     69          | 	byte	"pinhi"
2b6f7     00          | 	byte	0
2b6f8                 | LR__4727
2b6f8     70 69 6E 6C 
2b6fc     6F          | 	byte	"pinlo"
2b6fd     00          | 	byte	0
2b6fe                 | LR__4728
2b6fe     70 69 6E 73 
2b702     74 61 72 74 | 	byte	"pinstart"
2b706     00          | 	byte	0
2b707                 | LR__4729
2b707     70 69 6E 74 
2b70b     6F 67 67 6C 
2b70f     65          | 	byte	"pintoggle"
2b710     00          | 	byte	0
2b711                 | LR__4730
2b711     70 69 6E 77 
2b715     72 69 74 65 | 	byte	"pinwrite"
2b719     00          | 	byte	0
2b71a                 | LR__4731
2b71a     70 6C 61 79 | 	byte	"play"
2b71e     00          | 	byte	0
2b71f                 | LR__4732
2b71f     70 6C 6F 74 | 	byte	"plot"
2b723     00          | 	byte	0
2b724                 | LR__4733
2b724     70 6C 2E    | 	byte	"pl."
2b727     00          | 	byte	0
2b728                 | LR__4734
2b728     70 6F 6B 65 | 	byte	"poke"
2b72c     00          | 	byte	0
2b72d                 | LR__4735
2b72d     70 6F 73 69 
2b731     74 69 6F 6E | 	byte	"position"
2b735     00          | 	byte	0
2b736                 | LR__4736
2b736     70 6F 73 2E | 	byte	"pos."
2b73a     00          | 	byte	0
2b73b                 | LR__4737
2b73b     70 72 69 6E 
2b73f     74          | 	byte	"print"
2b740     00          | 	byte	0
2b741                 | LR__4738
2b741     3F          | 	byte	"?"
2b742     00          | 	byte	0
2b743                 | LR__4739
2b743     72 61 64    | 	byte	"rad"
2b746     00          | 	byte	0
2b747                 | LR__4740
2b747     72 65 6C 65 
2b74b     61 73 65    | 	byte	"release"
2b74e     00          | 	byte	0
2b74f                 | LR__4741
2b74f     72 75 6E    | 	byte	"run"
2b752     00          | 	byte	0
2b753                 | LR__4742
2b753     73 61 76 65 | 	byte	"save"
2b757     00          | 	byte	0
2b758                 | LR__4743
2b758     73 2E       | 	byte	"s."
2b75a     00          | 	byte	0
2b75b                 | LR__4744
2b75b     73 65 74 64 
2b75f     65 6C 61 79 | 	byte	"setdelay"
2b763     00          | 	byte	0
2b764                 | LR__4745
2b764     73 65 74 65 
2b768     6E 76       | 	byte	"setenv"
2b76a     00          | 	byte	0
2b76b                 | LR__4746
2b76b     73 65 74 6C 
2b76f     65 6E       | 	byte	"setlen"
2b771     00          | 	byte	0
2b772                 | LR__4747
2b772     73 65 74 70 
2b776     61 6E       | 	byte	"setpan"
2b778     00          | 	byte	0
2b779                 | LR__4748
2b779     73 65 74 73 
2b77d     75 73 74 61 
2b781     69 6E       | 	byte	"setsustain"
2b783     00          | 	byte	0
2b784                 | LR__4749
2b784     73 65 74 76 
2b788     6F 6C       | 	byte	"setvol"
2b78a     00          | 	byte	0
2b78b                 | LR__4750
2b78b     73 65 74 77 
2b78f     61 76 65    | 	byte	"setwave"
2b792     00          | 	byte	0
2b793                 | LR__4751
2b793     73 6F 75 6E 
2b797     64          | 	byte	"sound"
2b798     00          | 	byte	0
2b799                 | LR__4752
2b799     73 6F 2E    | 	byte	"so."
2b79c     00          | 	byte	0
2b79d                 | LR__4753
2b79d     73 70 72 69 
2b7a1     74 65       | 	byte	"sprite"
2b7a3     00          | 	byte	0
2b7a4                 | LR__4754
2b7a4     73 70 2E    | 	byte	"sp."
2b7a7     00          | 	byte	0
2b7a8                 | LR__4755
2b7a8     74 68 65 6E | 	byte	"then"
2b7ac     00          | 	byte	0
2b7ad                 | LR__4756
2b7ad     77 61 69 74 
2b7b1     6D 73       | 	byte	"waitms"
2b7b3     00          | 	byte	0
2b7b4                 | LR__4757
2b7b4     77 61 69 74 
2b7b8     63 6C 6F 63 
2b7bc     6B          | 	byte	"waitclock"
2b7bd     00          | 	byte	0
2b7be                 | LR__4758
2b7be     77 63 2E    | 	byte	"wc."
2b7c1     00          | 	byte	0
2b7c2                 | LR__4759
2b7c2     77 61 69 74 
2b7c6     76 62 6C    | 	byte	"waitvbl"
2b7c9     00          | 	byte	0
2b7ca                 | LR__4760
2b7ca     77 76 2E    | 	byte	"wv."
2b7cd     00          | 	byte	0
2b7ce                 | LR__4761
2b7ce     77 78 70 69 
2b7d2     6E          | 	byte	"wxpin"
2b7d3     00          | 	byte	0
2b7d4                 | LR__4762
2b7d4     77 79 70 69 
2b7d8     6E          | 	byte	"wypin"
2b7d9     00          | 	byte	0
2b7da                 | LR__4763
2b7da     61 63 6F 73 | 	byte	"acos"
2b7de     00          | 	byte	0
2b7df                 | LR__4764
2b7df     61 64 72    | 	byte	"adr"
2b7e2     00          | 	byte	0
2b7e3                 | LR__4765
2b7e3     61 64 64 72 | 	byte	"addr"
2b7e7     00          | 	byte	0
2b7e8                 | LR__4766
2b7e8     76 61 72 70 
2b7ec     74 72       | 	byte	"varptr"
2b7ee     00          | 	byte	0
2b7ef                 | LR__4767
2b7ef     61 73 69 6E | 	byte	"asin"
2b7f3     00          | 	byte	0
2b7f4                 | LR__4768
2b7f4     61 74 6E    | 	byte	"atn"
2b7f7     00          | 	byte	0
2b7f8                 | LR__4769
2b7f8     63 6F 73    | 	byte	"cos"
2b7fb     00          | 	byte	0
2b7fc                 | LR__4770
2b7fc     64 70 65 65 
2b800     6B          | 	byte	"dpeek"
2b801     00          | 	byte	0
2b802                 | LR__4771
2b802     66 72 65    | 	byte	"fre"
2b805     00          | 	byte	0
2b806                 | LR__4772
2b806     67 65 74 70 
2b80a     69 78 65 6C | 	byte	"getpixel"
2b80e     00          | 	byte	0
2b80f                 | LR__4773
2b80f     67 65 2E    | 	byte	"ge."
2b812     00          | 	byte	0
2b813                 | LR__4774
2b813     67 65 74 65 
2b817     6E 76 73 75 
2b81b     73 74 61 69 
2b81f     6E          | 	byte	"getenvsustain"
2b820     00          | 	byte	0
2b821                 | LR__4775
2b821     67 65 74 6E 
2b825     6F 74 65 76 
2b829     61 6C 75 65 | 	byte	"getnotevalue"
2b82d     00          | 	byte	0
2b82e                 | LR__4776
2b82e     67 65 74 74 
2b832     69 6D 65    | 	byte	"gettime"
2b835     00          | 	byte	0
2b836                 | LR__4777
2b836     6C 70 65 65 
2b83a     6B          | 	byte	"lpeek"
2b83b     00          | 	byte	0
2b83c                 | LR__4778
2b83c     6D 6F 75 73 
2b840     65 6B       | 	byte	"mousek"
2b842     00          | 	byte	0
2b843                 | LR__4779
2b843     6D 6F 75 73 
2b847     65 77       | 	byte	"mousew"
2b849     00          | 	byte	0
2b84a                 | LR__4780
2b84a     6D 6F 75 73 
2b84e     65 78       | 	byte	"mousex"
2b850     00          | 	byte	0
2b851                 | LR__4781
2b851     6D 6F 75 73 
2b855     65 79       | 	byte	"mousey"
2b857     00          | 	byte	0
2b858                 | LR__4782
2b858     70 65 65 6B | 	byte	"peek"
2b85c     00          | 	byte	0
2b85d                 | LR__4783
2b85d     70 69 6E 72 
2b861     65 61 64    | 	byte	"pinread"
2b864     00          | 	byte	0
2b865                 | LR__4784
2b865     72 64 70 69 
2b869     6E          | 	byte	"rdpin"
2b86a     00          | 	byte	0
2b86b                 | LR__4785
2b86b     72 71 70 69 
2b86f     6E          | 	byte	"rqpin"
2b870     00          | 	byte	0
2b871                 | LR__4786
2b871     72 6E 64    | 	byte	"rnd"
2b874     00          | 	byte	0
2b875                 | LR__4787
2b875     73 69 6E    | 	byte	"sin"
2b878     00          | 	byte	0
2b879                 | LR__4788
2b879     73 71 72    | 	byte	"sqr"
2b87c     00          | 	byte	0
2b87d                 | LR__4789
2b87d     73 74 69 63 
2b881     6B          | 	byte	"stick"
2b882     00          | 	byte	0
2b883                 | LR__4790
2b883     73 74 72 69 
2b887     67          | 	byte	"strig"
2b888     00          | 	byte	0
2b889                 | LR__4791
2b889     74 61 6E    | 	byte	"tan"
2b88c     00          | 	byte	0
2b88d                 | LR__4792
2b88d     61          | 	byte	"a"
2b88e     00          | 	byte	0
2b88f                 | LR__4793
2b88f     7A          | 	byte	"z"
2b890     00          | 	byte	0
2b891                 | LR__4794
2b891     5F          | 	byte	"_"
2b892     00          | 	byte	0
2b893                 | LR__4795
2b893     61          | 	byte	"a"
2b894     00          | 	byte	0
2b895                 | LR__4796
2b895     7A          | 	byte	"z"
2b896     00          | 	byte	0
2b897                 | LR__4797
2b897     30          | 	byte	"0"
2b898     00          | 	byte	0
2b899                 | LR__4798
2b899     39          | 	byte	"9"
2b89a     00          | 	byte	0
2b89b                 | LR__4799
2b89b     5F          | 	byte	"_"
2b89c     00          | 	byte	0
2b89d                 | LR__4800
2b89d     2E          | 	byte	"."
2b89e     00          | 	byte	0
2b89f                 | LR__4801
2b89f     61          | 	byte	"a"
2b8a0     00          | 	byte	0
2b8a1                 | LR__4802
2b8a1     7A          | 	byte	"z"
2b8a2     00          | 	byte	0
2b8a3                 | LR__4803
2b8a3     30          | 	byte	"0"
2b8a4     00          | 	byte	0
2b8a5                 | LR__4804
2b8a5     39          | 	byte	"9"
2b8a6     00          | 	byte	0
2b8a7                 | LR__4805
2b8a7     5F          | 	byte	"_"
2b8a8     00          | 	byte	0
2b8a9                 | LR__4806
2b8a9     24          | 	byte	"$"
2b8aa     00          | 	byte	0
2b8ab                 | LR__4807
2b8ab     25          | 	byte	"%"
2b8ac     00          | 	byte	0
2b8ad                 | LR__4808
2b8ad     21          | 	byte	"!"
2b8ae     00          | 	byte	0
2b8af                 | LR__4809
2b8af     30          | 	byte	"0"
2b8b0     00          | 	byte	0
2b8b1                 | LR__4810
2b8b1     39          | 	byte	"9"
2b8b2     00          | 	byte	0
2b8b3                 | LR__4811
2b8b3     2E          | 	byte	"."
2b8b4     00          | 	byte	0
2b8b5                 | LR__4812
2b8b5     24          | 	byte	"$"
2b8b6     00          | 	byte	0
2b8b7                 | LR__4813
2b8b7     25          | 	byte	"%"
2b8b8     00          | 	byte	0
2b8b9                 | LR__4814
2b8b9     2D          | 	byte	"-"
2b8ba     00          | 	byte	0
2b8bb                 | LR__4815
2b8bb     2E          | 	byte	"."
2b8bc     00          | 	byte	0
2b8bd                 | LR__4816
2b8bd     30          | 	byte	"0"
2b8be     00          | 	byte	0
2b8bf                 | LR__4817
2b8bf     39          | 	byte	"9"
2b8c0     00          | 	byte	0
2b8c1                 | LR__4818
2b8c1     5F          | 	byte	"_"
2b8c2     00          | 	byte	0
2b8c3                 | LR__4819
2b8c3     2E          | 	byte	"."
2b8c4     00          | 	byte	0
2b8c5                 | LR__4820
2b8c5     45          | 	byte	"E"
2b8c6     00          | 	byte	0
2b8c7                 | LR__4821
2b8c7     65          | 	byte	"e"
2b8c8     00          | 	byte	0
2b8c9                 | LR__4822
2b8c9     2D          | 	byte	"-"
2b8ca     00          | 	byte	0
2b8cb                 | LR__4823
2b8cb     2D          | 	byte	"-"
2b8cc     00          | 	byte	0
2b8cd                 | LR__4824
2b8cd     65          | 	byte	"e"
2b8ce     00          | 	byte	0
2b8cf                 | LR__4825
2b8cf     2E          | 	byte	"."
2b8d0     00          | 	byte	0
2b8d1                 | LR__4826
2b8d1     45          | 	byte	"E"
2b8d2     00          | 	byte	0
2b8d3                 | LR__4827
2b8d3     65          | 	byte	"e"
2b8d4     00          | 	byte	0
2b8d5                 | LR__4828
2b8d5     30          | 	byte	"0"
2b8d6     00          | 	byte	0
2b8d7                 | LR__4829
2b8d7     39          | 	byte	"9"
2b8d8     00          | 	byte	0
2b8d9                 | LR__4830
2b8d9     24          | 	byte	"$"
2b8da     00          | 	byte	0
2b8db                 | LR__4831
2b8db     25          | 	byte	"%"
2b8dc     00          | 	byte	0
2b8dd                 | LR__4832
2b8dd     2D          | 	byte	"-"
2b8de     00          | 	byte	0
2b8df                 | LR__4833
2b8df     30          | 	byte	"0"
2b8e0     00          | 	byte	0
2b8e1                 | LR__4834
2b8e1     39          | 	byte	"9"
2b8e2     00          | 	byte	0
2b8e3                 | LR__4835
2b8e3     5F          | 	byte	"_"
2b8e4     00          | 	byte	0
2b8e5                 | LR__4836
2b8e5     30          | 	byte	"0"
2b8e6     00          | 	byte	0
2b8e7                 | LR__4837
2b8e7     39          | 	byte	"9"
2b8e8     00          | 	byte	0
2b8e9                 | LR__4838
2b8e9     5F          | 	byte	"_"
2b8ea     00          | 	byte	0
2b8eb                 | LR__4839
2b8eb     22          | 	byte	34
2b8ec     00          | 	byte	0
2b8ed                 | LR__4840
2b8ed     22          | 	byte	34
2b8ee     00          | 	byte	0
2b8ef                 | LR__4841
2b8ef     44 69 6D 3A 
2b8f3     20 61 74 20 
2b8f7     6C 69 6E 65 
2b8fb     20          | 	byte	"Dim: at line "
2b8fc     00          | 	byte	0
2b8fd                 | LR__4842
2b8fd     3A 20 77 61 
2b901     72 6E 69 6E 
2b905     67 3A 20 74 
2b909     68 65 20 76 
2b90d     61 72 69 61 
2b911     62 6C 65 20 
2b915     65 78 69 73 
2b919     74 65 64 2E | 	byte	": warning: the variable existed."
2b91d     00          | 	byte	0
2b91e                 | LR__4843
2b91e     28          | 	byte	"("
2b91f     00          | 	byte	0
2b920                 | LR__4844
2b920     61 73       | 	byte	"as"
2b922     00          | 	byte	0
2b923                 | LR__4845
2b923     61 73       | 	byte	"as"
2b925     00          | 	byte	0
2b926                 | LR__4846
2b926     2C          | 	byte	","
2b927     00          | 	byte	0
2b928                 | LR__4847
2b928     29          | 	byte	")"
2b929     00          | 	byte	0
2b92a                 | LR__4848
2b92a     29          | 	byte	")"
2b92b     00          | 	byte	0
2b92c                 | LR__4849
2b92c     61 73       | 	byte	"as"
2b92e     00          | 	byte	0
2b92f                 | LR__4850
2b92f     62 79 74 65 | 	byte	"byte"
2b933     00          | 	byte	0
2b934                 | LR__4851
2b934     75 62 79 74 
2b938     65          | 	byte	"ubyte"
2b939     00          | 	byte	0
2b93a                 | LR__4852
2b93a     73 68 6F 72 
2b93e     74          | 	byte	"short"
2b93f     00          | 	byte	0
2b940                 | LR__4853
2b940     75 73 68 6F 
2b944     72 74       | 	byte	"ushort"
2b946     00          | 	byte	0
2b947                 | LR__4854
2b947     6C 6F 6E 67 | 	byte	"long"
2b94b     00          | 	byte	0
2b94c                 | LR__4855
2b94c     69 6E 74 65 
2b950     67 65 72    | 	byte	"integer"
2b953     00          | 	byte	0
2b954                 | LR__4856
2b954     75 6C 6F 6E 
2b958     67          | 	byte	"ulong"
2b959     00          | 	byte	0
2b95a                 | LR__4857
2b95a     69 6E 74 36 
2b95e     34          | 	byte	"int64"
2b95f     00          | 	byte	0
2b960                 | LR__4858
2b960     75 69 6E 74 
2b964     36 34       | 	byte	"uint64"
2b966     00          | 	byte	0
2b967                 | LR__4859
2b967     73 69 6E 67 
2b96b     6C 65       | 	byte	"single"
2b96d     00          | 	byte	0
2b96e                 | LR__4860
2b96e     64 6F 75 62 
2b972     6C 65       | 	byte	"double"
2b974     00          | 	byte	0
2b975                 | LR__4861
2b975     73 74 72 69 
2b979     6E 67       | 	byte	"string"
2b97b     00          | 	byte	0
2b97c                 | LR__4862
2b97c     74 6F       | 	byte	"to"
2b97e     00          | 	byte	0
2b97f                 | LR__4863
2b97f     73 74 65 70 | 	byte	"step"
2b983     00          | 	byte	0
2b984                 | LR__4864
2b984     73 2E       | 	byte	"s."
2b986     00          | 	byte	0
2b987                 | LR__4865
2b987     57 65 20 68 
2b98b     61 76 65 20 
2b98f     61 20 73 6C 
2b993     6F 77 20 67 
2b997     6F 74 6F 2C 
2b99b     20 74 6F 64 
2b99f     6F 20 20    | 	byte	"We have a slow goto, todo  "
2b9a2     00          | 	byte	0
2b9a3                 | LR__4866
2b9a3     6E 6F 6E 61 
2b9a7     6D 65 2E 62 
2b9ab     61 73       | 	byte	"noname.bas"
2b9ad     00          | 	byte	0
2b9ae                 | LR__4867
2b9ae                 | 	byte	
2b9ae     00          | 	byte	0
2b9af                 | LR__4868
2b9af     6E 6F 6E 61 
2b9b3     6D 65 2E 62 
2b9b7     61 73       | 	byte	"noname.bas"
2b9b9     00          | 	byte	0
2b9ba                 | LR__4869
2b9ba     2F          | 	byte	"/"
2b9bb     00          | 	byte	0
2b9bc                 | LR__4870
2b9bc                 | 	byte	
2b9bc     00          | 	byte	0
2b9bd                 | LR__4871
2b9bd                 | 	byte	
2b9bd     00          | 	byte	0
2b9be                 | LR__4872
2b9be     6E 6F 6E 61 
2b9c2     6D 65 2E 62 
2b9c6     61 73       | 	byte	"noname.bas"
2b9c8     00          | 	byte	0
2b9c9                 | LR__4873
2b9c9     2F          | 	byte	"/"
2b9ca     00          | 	byte	0
2b9cb                 | LR__4874
2b9cb     53 79 73 74 
2b9cf     65 6D 20 65 
2b9d3     72 72 6F 72 
2b9d7     20          | 	byte	"System error "
2b9d8     00          | 	byte	0
2b9d9                 | LR__4875
2b9d9     3A 20       | 	byte	": "
2b9db     00          | 	byte	0
2b9dc                 | LR__4876
2b9dc     2F          | 	byte	"/"
2b9dd     00          | 	byte	0
2b9de                 | LR__4877
2b9de     30          | 	byte	"0"
2b9df     00          | 	byte	0
2b9e0                 | LR__4878
2b9e0     39          | 	byte	"9"
2b9e1     00          | 	byte	0
2b9e2                 | LR__4879
2b9e2                 | 	byte	
2b9e2     00          | 	byte	0
2b9e3                 | LR__4880
2b9e3     53 74 6F 70 
2b9e7     70 65 64 20 
2b9eb     61 74 20 6C 
2b9ef     69 6E 65 20 | 	byte	"Stopped at line "
2b9f3     00          | 	byte	0
2b9f4                 | LR__4881
2b9f4                 | 	byte	
2b9f4     00          | 	byte	0
2b9f5                 | LR__4882
2b9f5                 | 	byte	
2b9f5     00          | 	byte	0
2b9f6                 | LR__4883
2b9f6     2F 73 64 2F 
2b9fa     6D 65 64 69 
2b9fe     61 2F 68 2F | 	byte	"/sd/media/h/"
2ba02     00          | 	byte	0
2ba03                 | LR__4884
2ba03     53 79 73 74 
2ba07     65 6D 20 65 
2ba0b     72 72 6F 72 
2ba0f     20          | 	byte	"System error "
2ba10     00          | 	byte	0
2ba11                 | LR__4885
2ba11     3A 20       | 	byte	": "
2ba13     00          | 	byte	0
2ba14                 | LR__4886
2ba14                 | 	byte	
2ba14     00          | 	byte	0
2ba15                 | LR__4887
2ba15                 | 	byte	
2ba15     00          | 	byte	0
2ba16                 | LR__4888
2ba16     2F 73 64 2F 
2ba1a     6D 65 64 69 
2ba1e     61 2F 73 2F | 	byte	"/sd/media/s/"
2ba22     00          | 	byte	0
2ba23                 | LR__4889
2ba23     53 79 73 74 
2ba27     65 6D 20 65 
2ba2b     72 72 6F 72 
2ba2f     20          | 	byte	"System error "
2ba30     00          | 	byte	0
2ba31                 | LR__4890
2ba31     3A 20       | 	byte	": "
2ba33     00          | 	byte	0
2ba34                 | LR__4891
2ba34     45 72 72 6F 
2ba38     72 20       | 	byte	"Error "
2ba3a     00          | 	byte	0
2ba3b                 | LR__4892
2ba3b     3A 20       | 	byte	": "
2ba3d     00          | 	byte	0
2ba3e                 | LR__4893
2ba3e                 | 	byte	
2ba3e     00          | 	byte	0
2ba3f                 | LR__4894
2ba3f     72 6E 64 3A 
2ba43     20          | 	byte	"rnd: "
2ba44     00          | 	byte	0
2ba45                 | LR__4895
2ba45     72 6E 64 3A 
2ba49     20          | 	byte	"rnd: "
2ba4a     00          | 	byte	0
2ba4b                 | LR__4896
2ba4b     67 65 74 65 
2ba4f     6E 76 73 75 
2ba53     73 74 61 69 
2ba57     6E 3A 20    | 	byte	"getenvsustain: "
2ba5a     00          | 	byte	0
2ba5b                 | LR__4897
2ba5b     73 69 6E 3A 
2ba5f     20          | 	byte	"sin: "
2ba60     00          | 	byte	0
2ba61                 | LR__4898
2ba61     63 6F 73 3A 
2ba65     20          | 	byte	"cos: "
2ba66     00          | 	byte	0
2ba67                 | LR__4899
2ba67     74 61 6E 3A 
2ba6b     20          | 	byte	"tan: "
2ba6c     00          | 	byte	0
2ba6d                 | LR__4900
2ba6d     61 73 69 6E 
2ba71     3A 20       | 	byte	"asin: "
2ba73     00          | 	byte	0
2ba74                 | LR__4901
2ba74     61 63 6F 73 
2ba78     3A 20       | 	byte	"acos: "
2ba7a     00          | 	byte	0
2ba7b                 | LR__4902
2ba7b     61 74 6E 3A 
2ba7f     20          | 	byte	"atn: "
2ba80     00          | 	byte	0
2ba81                 | LR__4903
2ba81     73 71 72 3A 
2ba85     20          | 	byte	"sqr: "
2ba86     00          | 	byte	0
2ba87                 | LR__4904
2ba87     73 74 69 63 
2ba8b     6B 3A 20    | 	byte	"stick: "
2ba8e     00          | 	byte	0
2ba8f                 | LR__4905
2ba8f     73 74 72 69 
2ba93     67 3A 20    | 	byte	"strig: "
2ba96     00          | 	byte	0
2ba97                 | LR__4906
2ba97     67 65 74 70 
2ba9b     69 78 65 6C 
2ba9f     3A 20       | 	byte	"getpixel: "
2baa1     00          | 	byte	0
2baa2                 | LR__4907
2baa2                 | 	byte	
2baa2     00          | 	byte	0
2baa3                 | LR__4908
2baa3     2F 73 64 2F 
2baa7     62 61 73    | 	byte	"/sd/bas"
2baaa     00          | 	byte	0
2baab                 | LR__4909
2baab     57 6F 72 6B 
2baaf     69 6E 67 20 
2bab3     64 69 72 65 
2bab7     63 74 6F 72 
2babb     79 3A 20    | 	byte	"Working directory: "
2babe     00          | 	byte	0
2babf                 | LR__4910
2babf     2A          | 	byte	"*"
2bac0     00          | 	byte	0
2bac1                 | LR__4911
2bac1                 | 	byte	
2bac1     00          | 	byte	0
2bac2                 | LR__4912
2bac2     5B 64 69 72 
2bac6     5D 20       | 	byte	"[dir] "
2bac8     00          | 	byte	0
2bac9                 | LR__4913
2bac9     2A          | 	byte	"*"
2baca     00          | 	byte	0
2bacb                 | LR__4914
2bacb                 | 	byte	
2bacb     00          | 	byte	0
2bacc                 | LR__4915
2bacc     2D 2D 2D 2D 
2bad0     2D 6D 6F 72 
2bad4     65 2C 20 70 
2bad8     72 65 73 73 
2badc     20 61 6E 79 
2bae0     20 6B 65 79 | 	byte	"-----more, press any key"
2bae4     00          | 	byte	0
2bae5                 | LR__4916
2bae5     20 20 20 20 
      ...             
2bafd     20 20 20 20 
2bb01     20          | 	byte	"                             "
2bb02     00          | 	byte	0
2bb03                 | LR__4917
2bb03     2F          | 	byte	"/"
2bb04     00          | 	byte	0
2bb05                 | LR__4918
2bb05     2F 73 64 2F 
2bb09     62 69 6E 2F | 	byte	"/sd/bin/"
2bb0d     00          | 	byte	0
2bb0e                 | LR__4919
2bb0e     53 79 73 74 
2bb12     65 6D 20 65 
2bb16     72 72 6F 72 
2bb1a     20          | 	byte	"System error "
2bb1b     00          | 	byte	0
2bb1c                 | LR__4920
2bb1c     3A 20       | 	byte	": "
2bb1e     00          | 	byte	0
2bb1f                 | LR__4921
2bb1f                 | 	byte	
2bb1f     00          | 	byte	0
2bb20                 | LR__4922
2bb20     45 78 70 65 
2bb24     63 74 65 64 
2bb28     20 6E 75 6D 
2bb2c     62 65 72 2C 
2bb30     20 67 6F 74 
2bb34     20 73 6F 6D 
2bb38     65 74 68 69 
2bb3c     6E 67 20 65 
2bb40     6C 73 65 2E | 	byte	"Expected number, got something else."
2bb44     00          | 	byte	0
2bb45                 | LR__4923
2bb45     43 61 6E 6E 
2bb49     6F 74 20 61 
2bb4d     64 64 20 61 
2bb51     20 6E 75 6D 
2bb55     62 65 72 20 
2bb59     74 6F 20 61 
2bb5d     20 73 74 72 
2bb61     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2bb65     00          | 	byte	0
2bb66                 | LR__4924
2bb66     43 61 6E 6E 
2bb6a     6F 74 20 73 
2bb6e     75 62 73 74 
2bb72     72 61 63 74 
2bb76     20 73 74 72 
2bb7a     69 6E 67 73 
2bb7e     2E          | 	byte	"Cannot substract strings."
2bb7f     00          | 	byte	0
2bb80                 | LR__4925
2bb80     55 6E 6B 6E 
2bb84     6F 77 6E 20 
2bb88     65 72 72 6F 
2bb8c     72 20 77 68 
2bb90     69 6C 65 20 
2bb94     61 64 64 69 
2bb98     6E 67 2E    | 	byte	"Unknown error while adding."
2bb9b     00          | 	byte	0
2bb9c                 | LR__4926
2bb9c     55 6E 6B 6E 
2bba0     6F 77 6E 20 
2bba4     65 72 72 6F 
2bba8     72 20 77 68 
2bbac     69 6C 65 20 
2bbb0     73 75 62 73 
2bbb4     74 72 61 63 
2bbb8     74 69 6E 67 
2bbbc     2E          | 	byte	"Unknown error while substracting."
2bbbd     00          | 	byte	0
2bbbe                 | LR__4927
2bbbe     43 61 6E 6E 
2bbc2     6F 74 20 64 
2bbc6     6F 20 6C 6F 
2bbca     67 69 63 20 
2bbce     6F 70 65 72 
2bbd2     61 74 69 6F 
2bbd6     6E 20 6F 6E 
2bbda     20 73 74 72 
2bbde     69 6E 67 20 
2bbe2     6F 72 20 66 
2bbe6     6C 6F 61 74 
2bbea     2E          | 	byte	"Cannot do logic operation on string or float."
2bbeb     00          | 	byte	0
2bbec                 | LR__4928
2bbec     55 6E 6B 6E 
2bbf0     6F 77 6E 20 
2bbf4     65 72 72 6F 
2bbf8     72 20 77 68 
2bbfc     69 6C 65 20 
2bc00     64 6F 69 6E 
2bc04     67 20 6C 6F 
2bc08     67 69 63 20 
2bc0c     6F 70 65 72 
2bc10     61 74 69 6F 
2bc14     6E 2E       | 	byte	"Unknown error while doing logic operation."
2bc16     00          | 	byte	0
2bc17                 | LR__4929
2bc17     43 61 6E 6E 
2bc1b     6F 74 20 6D 
2bc1f     75 6C 74 69 
2bc23     70 6C 79 20 
2bc27     73 74 72 69 
2bc2b     6E 67 73 2E | 	byte	"Cannot multiply strings."
2bc2f     00          | 	byte	0
2bc30                 | LR__4930
2bc30     55 6E 6B 6E 
2bc34     6F 77 6E 20 
2bc38     65 72 72 6F 
2bc3c     72 20 77 68 
2bc40     69 6C 65 20 
2bc44     6D 75 6C 74 
2bc48     69 70 6C 79 
2bc4c     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2bc50     00          | 	byte	0
2bc51                 | LR__4931
2bc51     43 61 6E 6E 
2bc55     6F 74 20 64 
2bc59     69 76 69 64 
2bc5d     65 20 73 74 
2bc61     72 69 6E 67 
2bc65     73 2E       | 	byte	"Cannot divide strings."
2bc67     00          | 	byte	0
2bc68                 | LR__4932
2bc68     55 6E 6B 6E 
2bc6c     6F 77 6E 20 
2bc70     65 72 72 6F 
2bc74     72 20 77 68 
2bc78     69 6C 65 20 
2bc7c     64 69 76 69 
2bc80     64 69 6E 67 
2bc84     2E          | 	byte	"Unknown error while dividing."
2bc85     00          | 	byte	0
2bc86                 | LR__4933
2bc86     43 61 6E 6E 
2bc8a     6F 74 20 63 
2bc8e     6F 6D 70 75 
2bc92     74 65 20 61 
2bc96     20 70 6F 77 
2bc9a     65 72 20 6F 
2bc9e     66 20 61 20 
2bca2     73 74 72 69 
2bca6     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2bca9     00          | 	byte	0
2bcaa                 | LR__4934
2bcaa     55 6E 6B 6E 
2bcae     6F 77 6E 20 
2bcb2     65 72 72 6F 
2bcb6     72 20 77 68 
2bcba     69 6C 65 20 
2bcbe     63 6F 6D 70 
2bcc2     75 74 69 6E 
2bcc6     67 20 61 20 
2bcca     70 6F 77 65 
2bcce     72 2E       | 	byte	"Unknown error while computing a power."
2bcd0     00          | 	byte	0
2bcd1                 | LR__4935
2bcd1     52 69 67 68 
2bcd5     74 20 70 61 
2bcd9     72 65 6E 74 
2bcdd     68 65 73 69 
2bce1     73 20 65 78 
2bce5     70 65 63 74 
2bce9     65 64 2E    | 	byte	"Right parenthesis expected."
2bcec     00          | 	byte	0
2bced                 | LR__4936
2bced     45 78 70 65 
2bcf1     63 74 65 64 
2bcf5     20 73 74 72 
2bcf9     69 6E 67 2E | 	byte	"Expected string."
2bcfd     00          | 	byte	0
2bcfe                 | LR__4937
2bcfe     45 78 70 65 
2bd02     63 74 65 64 
2bd06     20 66 6C 6F 
2bd0a     61 74 2E    | 	byte	"Expected float."
2bd0d     00          | 	byte	0
2bd0e                 | LR__4938
2bd0e     45 78 70 65 
2bd12     63 74 65 64 
2bd16     20 75 6E 73 
2bd1a     69 67 6E 65 
2bd1e     64 20 69 6E 
2bd22     74 65 67 65 
2bd26     72 2E       | 	byte	"Expected unsigned integer."
2bd28     00          | 	byte	0
2bd29                 | LR__4939
2bd29     45 78 70 65 
2bd2d     63 74 65 64 
2bd31     20 69 6E 74 
2bd35     65 67 65 72 
2bd39     2E          | 	byte	"Expected integer."
2bd3a     00          | 	byte	0
2bd3b                 | LR__4940
2bd3b     4E 6F 20 6D 
2bd3f     6F 72 65 20 
2bd43     76 61 72 69 
2bd47     61 62 6C 65 
2bd4b     20 73 6C 6F 
2bd4f     74 73 2E    | 	byte	"No more variable slots."
2bd52     00          | 	byte	0
2bd53                 | LR__4941
2bd53     56 61 72 69 
2bd57     61 62 6C 65 
2bd5b     20 6E 6F 74 
2bd5f     20 66 6F 75 
2bd63     6E 64 2E    | 	byte	"Variable not found."
2bd66     00          | 	byte	0
2bd67                 | LR__4942
2bd67     43 6F 6D 6D 
2bd6b     61 20 65 78 
2bd6f     70 65 63 74 
2bd73     65 64 2E    | 	byte	"Comma expected."
2bd76     00          | 	byte	0
2bd77                 | LR__4943
2bd77     43 6F 6D 6D 
2bd7b     61 20 6F 72 
2bd7f     20 73 65 6D 
2bd83     69 63 6F 6C 
2bd87     6F 6E 20 65 
2bd8b     78 70 65 63 
2bd8f     74 65 64 2E | 	byte	"Comma or semicolon expected."
2bd93     00          | 	byte	0
2bd94                 | LR__4944
2bd94     55 6E 6B 6E 
2bd98     6F 77 6E 20 
2bd9c     63 6F 6D 6D 
2bda0     61 6E 64 2E | 	byte	"Unknown command."
2bda4     00          | 	byte	0
2bda5                 | LR__4945
2bda5     53 74 61 63 
2bda9     6B 20 75 6E 
2bdad     64 65 72 66 
2bdb1     6C 6F 77 2E | 	byte	"Stack underflow."
2bdb5     00          | 	byte	0
2bdb6                 | LR__4946
2bdb6     43 61 6E 6E 
2bdba     6F 74 20 65 
2bdbe     78 65 63 75 
2bdc2     74 65 20 67 
2bdc6     6F 74 6F 20 
2bdca     69 6E 20 74 
2bdce     68 65 20 69 
2bdd2     6D 6D 65 64 
2bdd6     69 61 74 65 
2bdda     20 6D 6F 64 
2bdde     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2bde0     00          | 	byte	0
2bde1                 | LR__4947
2bde1     43 61 6E 6E 
2bde5     6F 74 20 6C 
2bde9     6F 61 64 20 
2bded     66 72 6F 6D 
2bdf1     20 74 68 69 
2bdf5     73 20 66 69 
2bdf9     6C 65 2E    | 	byte	"Cannot load from this file."
2bdfc     00          | 	byte	0
2bdfd                 | LR__4948
2bdfd     54 68 65 20 
2be01     70 72 6F 67 
2be05     72 61 6D 20 
2be09     69 73 20 65 
2be0d     6D 70 74 79 
2be11     2E          | 	byte	"The program is empty."
2be12     00          | 	byte	0
2be13                 | LR__4949
2be13     49 66 20 61 
2be17     66 74 65 72 
2be1b     20 69 66 2E | 	byte	"If after if."
2be1f     00          | 	byte	0
2be20                 | LR__4950
2be20     45 6D 70 74 
2be24     79 20 65 78 
2be28     70 72 65 73 
2be2c     73 69 6F 6E 
2be30     2E          | 	byte	"Empty expression."
2be31     00          | 	byte	0
2be32                 | LR__4951
2be32     53 74 72 69 
2be36     6E 67 20 65 
2be3a     78 70 65 63 
2be3e     74 65 64 2E | 	byte	"String expected."
2be42     00          | 	byte	0
2be43                 | LR__4952
2be43     49 6E 74 65 
2be47     72 70 72 65 
2be4b     74 65 72 20 
2be4f     69 6E 74 65 
2be53     72 6E 61 6C 
2be57     20 65 72 72 
2be5b     6F 72 2E    | 	byte	"Interpreter internal error."
2be5e     00          | 	byte	0
2be5f                 | LR__4953
2be5f     45 78 70 65 
2be63     63 74 65 64 
2be67     20 61 73 73 
2be6b     69 67 6E 2E | 	byte	"Expected assign."
2be6f     00          | 	byte	0
2be70                 | LR__4954
2be70     45 78 70 65 
2be74     63 74 65 64 
2be78     20 27 74 6F 
2be7c     27 2E       | 	byte	"Expected 'to'."
2be7e     00          | 	byte	0
2be7f                 | LR__4955
2be7f     45 78 70 65 
2be83     63 74 65 64 
2be87     20 69 6E 74 
2be8b     65 67 65 72 
2be8f     20 76 61 72 
2be93     69 61 62 6C 
2be97     65 2E       | 	byte	"Expected integer variable."
2be99     00          | 	byte	0
2be9a                 | LR__4956
2be9a     55 6E 69 6E 
2be9e     69 74 69 61 
2bea2     6C 69 7A 65 
2bea6     64 20 76 61 
2beaa     72 69 61 62 
2beae     6C 65 20 69 
2beb2     6E 20 27 6E 
2beb6     65 78 74 27 
2beba     2C 20 75 73 
2bebe     65 20 27 66 
2bec2     6F 72 27 20 
2bec6     62 65 66 6F 
2beca     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2becd     00          | 	byte	0
2bece                 | LR__4957
2bece     4E 6F 20 6D 
2bed2     6F 72 65 20 
2bed6     73 6C 6F 74 
2beda     73 20 66 6F 
2bede     72 20 27 66 
2bee2     6F 72 27 2E | 	byte	"No more slots for 'for'."
2bee6     00          | 	byte	0
2bee7                 | LR__4958
2bee7     27 4E 65 78 
2beeb     74 27 20 64 
2beef     6F 65 73 6E 
2bef3     27 74 20 6D 
2bef7     61 74 63 68 
2befb     20 27 66 6F 
2beff     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2bf02     00          | 	byte	0
2bf03                 | LR__4959
2bf03     27 47 6F 74 
2bf07     6F 27 20 74 
2bf0b     61 72 67 65 
2bf0f     74 20 6C 69 
2bf13     6E 65 20 6E 
2bf17     6F 74 20 66 
2bf1b     6F 75 6E 64 
2bf1f     2E          | 	byte	"'Goto' target line not found."
2bf20     00          | 	byte	0
2bf21                 | LR__4960
2bf21     42 61 64 20 
2bf25     6E 75 6D 62 
2bf29     65 72 20 6F 
2bf2d     66 20 70 61 
2bf31     72 61 6D 65 
2bf35     74 65 72 73 | 	byte	"Bad number of parameters"
2bf39     00          | 	byte	0
2bf3a                 | LR__4961
2bf3a     46 75 6E 63 
2bf3e     74 69 6F 6E 
2bf42     20 75 6E 64 
2bf46     65 66 69 6E 
2bf4a     65 64 20 66 
2bf4e     6F 72 20 73 
2bf52     74 72 69 6E 
2bf56     67 73       | 	byte	"Function undefined for strings"
2bf58     00          | 	byte	0
2bf59                 | LR__4962
2bf59     42 61 64 20 
2bf5d     70 61 72 61 
2bf61     6D 65 74 65 
2bf65     72 2E       | 	byte	"Bad parameter."
2bf67     00          | 	byte	0
2bf68                 | LR__4963
2bf68     43 61 6E 6E 
2bf6c     6F 74 20 64 
2bf70     65 63 6C 61 
2bf74     72 65 20 61 
2bf78     6E 20 61 72 
2bf7c     72 61 79 3A 
2bf80     20 74 68 65 
2bf84     20 76 61 72 
2bf88     69 61 62 6C 
2bf8c     65 20 65 78 
2bf90     69 73 74 73 
2bf94     2E          | 	byte	"Cannot declare an array: the variable exists."
2bf95     00          | 	byte	0
2bf96                 | LR__4964
2bf96     45 78 70 65 
2bf9a     63 74 65 64 
2bf9e     20 27 28 27 
2bfa2     2E          | 	byte	"Expected '('."
2bfa3     00          | 	byte	0
2bfa4                 | LR__4965
2bfa4     45 78 70 65 
2bfa8     63 74 65 64 
2bfac     20 27 29 27 
2bfb0     20 6F 72 20 
2bfb4     27 2C 27 2E | 	byte	"Expected ')' or ','."
2bfb8     00          | 	byte	0
2bfb9                 | LR__4966
2bfb9     4E 6F 20 6D 
2bfbd     6F 72 65 20 
2bfc1     74 68 61 6E 
2bfc5     20 33 20 64 
2bfc9     69 6D 65 6E 
2bfcd     73 69 6F 6E 
2bfd1     73 20 73 75 
2bfd5     70 70 6F 72 
2bfd9     74 65 64    | 	byte	"No more than 3 dimensions supported"
2bfdc     00          | 	byte	0
2bfdd                 | LR__4967
2bfdd     56 61 72 69 
2bfe1     61 62 6C 65 
2bfe5     20 6E 61 6D 
2bfe9     65 20 65 78 
2bfed     70 65 63 74 
2bff1     65 64       | 	byte	"Variable name expected"
2bff3     00          | 	byte	0
2bff4                 | LR__4968
2bff4     54 79 70 65 
2bff8     20 6E 61 6D 
2bffc     65 20 65 78 
2c000     70 65 63 74 
2c004     65 64       | 	byte	"Type name expected"
2c006     00          | 	byte	0
2c007                 | LR__4969
2c007     54 79 70 65 
2c00b     20 6E 6F 74 
2c00f     20 73 75 70 
2c013     70 6F 72 74 
2c017     65 64 20 79 
2c01b     65 74       | 	byte	"Type not supported yet"
2c01d     00          | 	byte	0
2c01e                 | LR__4970
2c01e     41 72 72 61 
2c022     79 20 69 6E 
2c026     64 65 78 20 
2c02a     6F 75 74 20 
2c02e     6F 66 20 72 
2c032     61 6E 67 65 | 	byte	"Array index out of range"
2c036     00          | 	byte	0
2c037                 | LR__4971
2c037     45 72 72 6F 
2c03b     72 20       | 	byte	"Error "
2c03d     00          | 	byte	0
2c03e                 | LR__4972
2c03e     3A 20       | 	byte	": "
2c040     00          | 	byte	0
2c041                 | LR__4973
2c041     2F 73 64    | 	byte	"/sd"
2c044     00          | 	byte	0
2c045                 | LR__4974
2c045     2F 73 64 2F 
2c049     62 61 73    | 	byte	"/sd/bas"
2c04c     00          | 	byte	0
2c04d                 | LR__4975
2c04d     2F 73 64 2F 
2c051     62 61 73    | 	byte	"/sd/bas"
2c054     00          | 	byte	0
2c055                 | LR__4976
2c055     20 42 41 53 
2c059     49 43 20 62 
2c05d     79 74 65 73 
2c061     20 66 72 65 
2c065     65          | 	byte	" BASIC bytes free"
2c066     00          | 	byte	0
2c067                 | LR__4977
2c067     52 65 61 64 
2c06b     79          | 	byte	"Ready"
2c06c     00          | 	byte	0
2c06d                 | LR__4978
2c06d     20          | 	byte	" "
2c06e     00          | 	byte	0
2c06f                 | LR__4979
2c06f     20          | 	byte	" "
2c070     00          | 	byte	0
2c071                 | LR__4980
2c071                 | 	byte	
2c071     00          | 	byte	0
2c072                 | LR__4981
2c072                 | 	byte	
2c072     00          | 	byte	0
2c073     00          | 	alignl
2c074                 | _dat_
2c074     00 00 00 00 
2c078     00 00 00 00 
2c07c     00 00 00 00 
2c080     00 00 00 00 | 	byte	$00[16]
2c084     61 41 17 0E 
2c088     62 42 00 00 
2c08c     63 43 19 10 
2c090     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2c094     65 45 18 0F 
2c098     66 46 00 00 
2c09c     67 47 00 00 
2c0a0     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2c0a4     69 49 00 00 
2c0a8     6A 4A 00 00 
2c0ac     6B 4B 00 00 
2c0b0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2c0b4     6D 4D 00 00 
2c0b8     6E 4E 1A 11 
2c0bc     6F 4F 1E 15 
2c0c0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2c0c4     71 51 00 00 
2c0c8     72 52 00 00 
2c0cc     73 53 1B 12 
2c0d0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2c0d4     75 55 00 00 
2c0d8     76 56 00 00 
2c0dc     77 57 00 00 
2c0e0     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2c0e4     79 59 00 00 
2c0e8     7A 5A 1D 14 
2c0ec     31 21 04 00 
2c0f0     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2c0f4     33 23 06 00 
2c0f8     34 24 07 00 
2c0fc     35 25 08 00 
2c100     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2c104     37 26 0A 00 
2c108     38 2A 0B 00 
2c10c     39 28 0C 00 
2c110     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2c114     8D 8D 00 00 
2c118     9B 9B 00 00 
2c11c     88 88 00 00 
2c120     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2c124     20 20 00 00 
2c128     2D 5F 00 00 
2c12c     3D 2B 00 00 
2c130     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2c134     5D 7D 00 00 
2c138     5C 7C 00 00 
2c13c     23 7E 00 00 
2c140     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2c144     27 22 00 00 
2c148     60 7E 03 00 
2c14c     2C 3C 00 00 
2c150     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2c154     2F 3F 00 00 
2c158     B9 B9 00 00 
2c15c     BA 00 00 00 
2c160     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2c164     BC 00 00 00 
2c168     BD 00 00 00 
2c16c     BE 00 00 00 
2c170     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2c174     C0 00 00 00 
2c178     C1 00 00 00 
2c17c     C2 00 00 00 
2c180     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2c184     C4 00 00 00 
2c188     C5 00 00 00 
2c18c     C6 00 00 00 
2c190     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2c194     C8 00 00 00 
2c198     C9 00 00 00 
2c19c     CA 00 00 00 
2c1a0     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2c1a4     7F 7F 00 00 
2c1a8     CC 00 00 00 
2c1ac     CD 00 00 00 
2c1b0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2c1b4     CF 00 00 00 
2c1b8     D0 00 00 00 
2c1bc     D1 00 00 00 
2c1c0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2c1c4     2F 2F 00 00 
2c1c8     2A 2A 00 00 
2c1cc     2D 2D 00 00 
2c1d0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2c1d4     8D 8D 00 00 
2c1d8     31 31 00 00 
2c1dc     32 32 00 00 
2c1e0     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2c1e4     34 34 00 00 
2c1e8     35 35 00 00 
2c1ec     36 36 00 00 
2c1f0     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2c1f4     38 38 00 00 
2c1f8     39 39 00 00 
2c1fc     30 30 00 00 
2c200     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2c204     5C 7C 00 00 
2c208     00 00 00 00 
2c20c     00 00 00 00 
2c210     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2c214     00 00 00 00 
      ...             
2c26c     00 00 00 00 
2c270     00 00 00 00 | 	byte	$00[96]
2c274     2B 00 A6 F2 
2c278     24 A7 09 80 
2c27c     5B 88 4D 89 
2c280     80 88 A5 88 | atari_spl file "atari.spl"
2c284     6D 88 B8 88 
2c288     80 88 CB 88 
2c28c     92 88 A5 88 
2c290     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2c294     A5 88 CA 88 
2c298     A6 88 DD 88 
2c29c     B8 88 AB 89 
2c2a0     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2c2a4     C8 AD C6 F1 
2c2a8     91 06 B6 FF 
2c2ac     13 00 4A 00 
2c2b0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2c2b4     5D 00 5E 00 
2c2b8     5D 00 5E 00 
2c2bc     5E 00 5D 00 
2c2c0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2c2c4     38 00 83 00 
2c2c8     25 00 83 00 
2c2cc     C3 FE D1 04 
2c2d0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2c2d4     48 88 38 85 
2c2d8     41 8A CB 88 
2c2dc     28 89 B8 88 
2c2e0     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2c2e4     15 89 03 89 
2c2e8     02 89 15 89 
2c2ec     16 89 15 89 
2c2f0     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2c2f4     15 89 3A 89 
2c2f8     72 89 E3 89 
2c2fc     52 83 AD 97 
2c300     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2c304     0C 02 B6 FF 
2c308     E1 00 A8 00 
2c30c     F3 00 A8 00 
2c310     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2c314     CE 00 CD 00 
2c318     CD 00 BA 00 
2c31c     E1 00 BB 00 
2c320     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2c324     DF 00 C9 FF 
2c328     E6 01 B6 06 
2c32c     EE DD 8D 98 
2c330     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2c334     97 89 73 89 
2c338     3B 89 60 89 
2c33c     60 89 60 89 
2c340     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2c344     73 89 72 89 
2c348     85 89 73 89 
2c34c     AA 89 60 89 
2c350     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2c354     E8 8A 18 86 
2c358     92 88 A5 C2 
2c35c     E0 00 C3 05 
2c360     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2c364     F2 00 64 01 
2c368     06 01 3E 01 
2c36c     2B 01 2B 01 
2c370     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2c374     2B 01 2A 01 
2c378     2B 01 2B 01 
2c37c     2B 01 18 01 
2c380     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2c384     39 07 61 F3 
2c388     C0 AF 37 85 
2c38c     0F 88 8B 8A 
2c390     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2c394     AB 89 D0 89 
2c398     AB 89 D0 89 
2c39c     D0 89 CF 89 
2c3a0     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2c3a4     D0 89 F5 89 
2c3a8     BD 89 08 8A 
2c3ac     CF 89 E8 8A 
2c3b0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2c3b4     53 B3 0D F8 
2c3b8     F4 07 38 00 
2c3bc     63 01 63 01 
2c3c0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2c3c4     88 01 88 01 
2c3c8     76 01 88 01 
2c3cc     88 01 89 01 
2c3d0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2c3d4     75 01 AE 01 
2c3d8     76 01 88 01 
2c3dc     4A 00 46 06 
2c3e0     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2c3e4     08 8A 9A 86 
2c3e8     33 8B 08 8A 
2c3ec     2D 8A F5 89 
2c3f0     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2c3f4     2D 8A 2D 8A 
2c3f8     2E 8A 1B 8A 
2c3fc     40 8A 2D 8A 
2c400     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2c404     2E 8A 79 8A 
2c408     66 8A C8 8B 
2c40c     72 82 2B 97 
2c410     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2c414     1D 02 05 01 
2c418     F8 01 C0 01 
2c41c     0B 02 C0 01 
2c420     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2c424     F9 01 D3 01 
2c428     F8 01 D3 01 
2c42c     F8 01 D2 01 
2c430     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2c434     E6 01 2B 01 
2c438     8E 02 5F 07 
2c43c     F7 E2 ED 9C 
2c440     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2c444     E8 8A 78 8A 
2c448     78 8A 65 8A 
2c44c     8B 8A 78 8A 
2c450     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2c454     8B 8A 9D 8A 
2c458     9D 8A 8B 8A 
2c45c     C2 8A 78 8A 
2c460     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2c464     70 8C 18 86 
2c468     8B 8A 23 C9 
2c46c     CB 03 C4 05 
2c470     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2c474     0B 02 7B 02 
2c478     1E 02 55 02 
2c47c     30 02 43 02 
2c480     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2c484     43 02 44 02 
2c488     43 02 30 02 
2c48c     68 02 31 02 
2c490     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2c494     07 08 3F F7 
2c498     73 B2 13 85 
2c49c     15 89 ED 8B 
2c4a0     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2c4a4     B0 8A FB 8A 
2c4a8     D5 8A FA 8A 
2c4ac     E8 8A FB 8A 
2c4b0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2c4b4     E8 8A 21 8B 
2c4b8     E7 8A 33 8B 
2c4bc     E8 8A 26 8C 
2c4c0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2c4c4     8D B0 27 F6 
2c4c8     9C 08 AD 01 
2c4cc     7B 02 8D 02 
2c4d0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2c4d4     A1 02 A0 02 
2c4d8     A1 02 A0 02 
2c4dc     A0 02 A0 02 
2c4e0     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2c4e4     7B 02 D8 02 
2c4e8     7B 02 C6 02 
2c4ec     3E 01 C3 05 
2c4f0     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2c4f4     00 8C 2A 86 
2c4f8     E0 8C FA 8A 
2c4fc     6A 8B FB 8A 
2c500     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2c504     45 8B 45 8B 
2c508     45 8B 6B 8B 
2c50c     46 8B 59 8B 
2c510     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2c514     6B 8B 6B 8B 
2c518     6B 8B 6B 8B 
2c51c     7D 8B 7D 8B 
2c520     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2c524     90 8B 91 8B 
2c528     90 8B 90 8B 
2c52c     A3 8B A3 8B 
2c530     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2c534     B5 8B B6 8B 
2c538     B5 8B B5 8B 
2c53c     B6 8B C8 8B 
2c540     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2c544     C8 8B DA 8B 
2c548     DB 8B DB 8B 
2c54c     DB 8B DC 8B 
2c550     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2c554     EE 8B EE 8B 
2c558     00 8C 01 8C 
2c55c     00 8C 01 8C 
2c560     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2c564     12 8C 13 8C 
2c568     13 8C 26 8C 
2c56c     26 8C 26 8C 
2c570     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2c574     38 8C 38 8C 
2c578     38 8C 38 8C 
2c57c     4B 8C 4B 8C 
2c580     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2c584     5E 8C 5E 8C 
2c588     5E 8C 5E 8C 
2c58c     70 8C 70 8C 
2c590     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2c594     70 8C 83 8C 
2c598     83 8C 83 8C 
2c59c     83 8C 96 8C 
2c5a0     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2c5a4     95 8C A9 8C 
2c5a8     A9 8C A8 8C 
2c5ac     A8 8C A8 8C 
2c5b0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2c5b4     BB 8C BB 8C 
2c5b8     BB 8C CE 8C 
2c5bc     CE 8C CE 8C 
2c5c0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2c5c4     E0 8C E1 8C 
2c5c8     E1 8C E0 8C 
2c5cc     F4 8C F2 8C 
2c5d0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2c5d4     05 8D 05 8D 
2c5d8     06 8D 06 8D 
2c5dc     19 8D 19 8D 
2c5e0     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2c5e4     18 8D 2B 8D 
2c5e8     2B 8D 2B 8D 
2c5ec     2A 8D 3E 8D 
2c5f0     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2c5f4     3E 8D 51 8D 
2c5f8     50 8D 50 8D 
2c5fc     50 8D 51 8D 
2c600     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2c604     63 8D 64 8D 
2c608     76 8D 75 8D 
2c60c     75 8D 76 8D 
2c610     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2c614     88 8D 88 8D 
2c618     89 8D 9B 8D 
2c61c     9A 8D 9B 8D 
2c620     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2c624     AD 8D AE 8D 
2c628     AD 8D AE 8D 
2c62c     C1 8D C1 8D 
2c630     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2c634     D3 8D D3 8D 
2c638     D3 8D D3 8D 
2c63c     D3 8D E6 8D 
2c640     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2c644     E6 8D E6 8D 
2c648     F9 8D F9 8D 
2c64c     F9 8D F8 8D 
2c650     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2c654     0B 8E 0B 8E 
2c658     1D 8E 1D 8E 
2c65c     1E 8E 1E 8E 
2c660     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2c664     31 8E 31 8E 
2c668     31 8E 42 8E 
2c66c     43 8E 43 8E 
2c670     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2c674     56 8E 56 8E 
2c678     55 8E 56 8E 
2c67c     68 8E 69 8E 
2c680     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2c684     69 8E 7B 8E 
2c688     7C 8E 7B 8E 
2c68c     7B 8E 8D 8E 
2c690     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2c694     8D 8E A1 8E 
2c698     A0 8E A1 8E 
2c69c     A1 8E A0 8E 
2c6a0     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2c6a4     B3 8E B3 8E 
2c6a8     C6 8E C5 8E 
2c6ac     C6 8E C6 8E 
2c6b0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2c6b4     D8 8E D9 8E 
2c6b8     D8 8E EC 8E 
2c6bc     EB 8E EC 8E 
2c6c0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2c6c4     FE 8E FE 8E 
2c6c8     FE 8E FE 8E 
2c6cc     10 8F 10 8F 
2c6d0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2c6d4     11 8F 23 8F 
2c6d8     24 8F 23 8F 
2c6dc     24 8F 37 8F 
2c6e0     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2c6e4     36 8F 36 8F 
2c6e8     48 8F 49 8F 
2c6ec     49 8F 49 8F 
2c6f0     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2c6f4     5B 8F 5C 8F 
2c6f8     5B 8F 6E 8F 
2c6fc     6E 8F 6E 8F 
2c700     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2c704     81 8F 81 8F 
2c708     81 8F 81 8F 
2c70c     93 8F 93 8F 
2c710     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2c714     93 8F A6 8F 
2c718     A6 8F A6 8F 
2c71c     A6 8F B9 8F 
2c720     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2c724     B9 8F B9 8F 
2c728     CC 8F CB 8F 
2c72c     CB 8F CC 8F 
2c730     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2c734     DF 8F DE 8F 
2c738     DE 8F F1 8F 
2c73c     F1 8F F1 8F 
2c740     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2c744     03 90 04 90 
2c748     04 90 04 90 
2c74c     16 90 17 90 
2c750     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2c754     29 90 28 90 
2c758     29 90 28 90 
2c75c     29 90 3C 90 
2c760     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2c764     3C 90 4F 90 
2c768     4E 90 4E 90 
2c76c     4E 90 4E 90 
2c770     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2c774     61 90 61 90 
2c778     73 90 74 90 
2c77c     74 90 74 90 
2c780     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2c784     87 90 86 90 
2c788     87 90 86 90 
2c78c     99 90 99 90 
2c790     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2c794     AB 90 AB 90 
2c798     AC 90 AB 90 
2c79c     AB 90 BF 90 
2c7a0     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2c7a4     BE 90 D1 90 
2c7a8     D0 90 D1 90 
2c7ac     D1 90 D1 90 
2c7b0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2c7b4     E3 90 E4 90 
2c7b8     F6 90 F6 90 
2c7bc     F6 90 F6 90 
2c7c0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2c7c4     09 91 0A 91 
2c7c8     0A 91 1C 91 
2c7cc     1C 91 1C 91 
2c7d0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2c7d4     2F 91 2E 91 
2c7d8     2F 91 2F 91 
2c7dc     2E 91 41 91 
2c7e0     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2c7e4     41 91 53 91 
2c7e8     54 91 54 91 
2c7ec     53 91 54 91 
2c7f0     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2c7f4     67 91 67 91 
2c7f8     79 91 7A 91 
2c7fc     79 91 78 91 
2c800     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2c804     8C 91 8B 91 
2c808     8C 91 8C 91 
2c80c     9E 91 9E 91 
2c810     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2c814     B1 91 B1 91 
2c818     B2 91 B1 91 
2c81c     B1 91 C4 91 
2c820     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2c824     C4 91 D6 91 
2c828     D7 91 D7 91 
2c82c     D7 91 D6 91 
2c830     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2c834     EA 91 EA 91 
2c838     EA 91 FC 91 
2c83c     FC 91 FB 91 
2c840     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2c844     0E 92 0F 92 
2c848     0F 92 0E 92 
2c84c     21 92 21 92 
2c850     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2c854     21 92 34 92 
2c858     33 92 34 92 
2c85c     34 92 47 92 
2c860     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2c864     46 92 47 92 
2c868     59 92 59 92 
2c86c     59 92 59 92 
2c870     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2c874     6C 92 6C 92 
2c878     6B 92 7E 92 
2c87c     7E 92 7E 92 
2c880     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2c884     92 92 91 92 
2c888     91 92 90 92 
2c88c     91 92 A4 92 
2c890     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2c894     A3 92 B6 92 
2c898     B6 92 B7 92 
2c89c     B7 92 B6 92 
2c8a0     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2c8a4     CA 92 C9 92 
2c8a8     CA 92 DC 92 
2c8ac     DC 92 DC 92 
2c8b0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2c8b4     EF 92 EF 92 
2c8b8     EF 92 EF 92 
2c8bc     01 93 01 93 
2c8c0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2c8c4     15 93 14 93 
2c8c8     14 93 14 93 
2c8cc     14 93 27 93 
2c8d0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2c8d4     27 93 39 93 
2c8d8     3A 93 39 93 
2c8dc     39 93 39 93 
2c8e0     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2c8e4     4B 93 4C 93 
2c8e8     5F 93 5F 93 
2c8ec     5F 93 5E 93 
2c8f0     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2c8f4     5F 93 84 93 
2c8f8     4C 93 96 93 
2c8fc     5F 93 AE 94 
2c900     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2c904     7B C1 00 00 
2c908     00 00 00 00 
2c90c     00 00 00 00 
2c910     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c914     00 00 00 00 | 	byte	$00, $00, $00, $00
2c918     00 00 00 00 | zero long 0
2c91c     7A D7 00 80 
2c920     87 8A 48 8F 
2c924     EC 8C 76 8D 
2c928     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2c92c     3C 8D 82 8D 
2c930     42 8D 88 8D 
2c934     8C 8D 8E 8D 
2c938     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2c93c     97 8D DE 8D 
2c940     E1 8D F1 8E 
2c944     D8 8C A3 83 
2c948     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2c94c     65 71 C9 65 
2c950     FC 64 C4 65 
2c954     C1 65 BF 65 
2c958     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2c95c     B6 65 B4 65 
2c960     B2 65 AE 65 
2c964     AC 65 ED 65 
2c968     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2c96c     5E 65 25 66 
2c970     FA 62 23 6B 
2c974     B5 6C 61 0A 
2c978     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2c97c     5D 90 BE 8D 
2c980     47 8E C3 8D 
2c984     09 8E C9 8D 
2c988     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2c98c     15 8E 19 8E 
2c990     1B 8E 62 8E 
2c994     64 8E 68 8E 
2c998     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2c99c     B5 8E 4C 90 
2c9a0     FA 84 3C 9D 
2c9a4     98 13 79 6D 
2c9a8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2c9ac     D9 66 50 66 
2c9b0     D4 66 4B 66 
2c9b4     8C 66 46 66 
2c9b8     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2c9bc     81 66 3A 66 
2c9c0     7C 66 36 66 
2c9c4     76 66 30 66 
2c9c8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2c9cc     6B 66 88 72 
2c9d0     BF 37 E7 B7 
2c9d4     75 83 8B 8E 
2c9d8     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2c9dc     94 8E 96 8E 
2c9e0     DD 8E 9C 8E 
2c9e4     E2 8E A2 8E 
2c9e8     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2c9ec     EE 8E AE 8E 
2c9f0     38 8F B5 8E 
2c9f4     3F 8F FD 8E 
2c9f8     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2c9fc     A5 87 1E E3 
2ca00     6D 5D FA 71 
2ca04     41 64 25 67 
2ca08     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2ca0c     D9 66 1A 67 
2ca10     18 67 15 67 
2ca14     12 67 0F 67 
2ca18     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2ca1c     07 67 C0 66 
2ca20     01 67 BC 66 
2ca24     B8 66 DE 64 
2ca28     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2ca2c     43 E5 1F 8B 
2ca30     14 8A F1 90 
2ca34     1C 8F 63 8F 
2ca38     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2ca3c     29 8F 6E 8F 
2ca40     72 8F 75 8F 
2ca44     34 8F BE 8F 
2ca48     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2ca4c     84 8F 87 8F 
2ca50     CC 8F 56 90 
2ca54     67 91 49 80 
2ca58     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2ca5c     46 77 A6 66 
2ca60     E8 66 B0 67 
2ca64     AD 67 ED 67 
2ca68     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2ca6c     A2 67 E3 67 
2ca70     9D 67 9A 67 
2ca74     98 67 94 67 
2ca78     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2ca7c     49 67 CD 67 
2ca80     28 65 5F 6E 
2ca84     82 67 3A 01 
2ca88     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2ca8c     C2 91 A9 8F 
2ca90     EF 8F AE 8F 
2ca94     F4 8F B5 8F 
2ca98     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2ca9c     01 90 03 90 
2caa0     07 90 09 90 
2caa4     0C 90 53 90 
2caa8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2caac     18 90 44 93 
2cab0     85 84 D6 9D 
2cab4     87 1F 2F 75 
2cab8     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2cabc     C4 68 F6 67 
2cac0     BE 68 F1 67 
2cac4     76 68 2E 68 
2cac8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2cacc     27 68 24 68 
2cad0     64 68 1E 68 
2cad4     5F 68 19 68 
2cad8     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2cadc     DC 68 56 72 
2cae0     7E 36 C2 B8 
2cae4     D7 84 73 90 
2cae8     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2caec     7B 90 7F 90 
2caf0     82 90 84 90 
2caf4     CB 90 8B 90 
2caf8     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2cafc     D7 90 96 90 
2cb00     20 91 59 90 
2cb04     25 91 A2 90 
2cb08     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2cb0c     D0 89 40 EE 
2cb10     12 64 C4 71 
2cb14     29 66 0C 69 
2cb18     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2cb1c     C0 68 02 69 
2cb20     FE 68 FB 68 
2cb24     F9 68 F6 68 
2cb28     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2cb2c     EE 68 A8 68 
2cb30     2C 69 5F 68 
2cb34     E2 68 81 66 
2cb38     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2cb3c     1E EB A6 8A 
2cb40     73 8B 5E 93 
2cb44     7B 90 48 91 
2cb48     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2cb4c     0D 91 11 91 
2cb50     14 91 16 91 
2cb54     5C 91 1C 91 
2cb58     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2cb5c     68 91 AF 91 
2cb60     2A 91 B5 91 
2cb64     75 91 1A 94 
2cb68     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2cb6c     70 0E CB 6C 
2cb70     5D 6E C4 67 
2cb74     99 69 54 69 
2cb78     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2cb7c     D2 69 49 69 
2cb80     89 69 86 69 
2cb84     40 69 C4 69 
2cb88     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2cb8c     35 69 76 69 
2cb90     58 67 EB 6D 
2cb94     E9 6D 89 0F 
2cb98     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2cb9c     33 94 94 91 
2cba0     D9 91 56 91 
2cba4     E0 91 9F 91 
2cba8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2cbac     EC 91 EE 91 
2cbb0     F1 91 F4 91 
2cbb4     F7 91 3D 92 
2cbb8     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2cbbc     46 92 21 94 
2cbc0     11 89 A4 9D 
2cbc4     FD 0E 8F 6C 
2cbc8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2cbcc     28 6A E1 69 
2cbd0     65 6A 1F 6A 
2cbd4     5F 6A 1A 6A 
2cbd8     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2cbdc     54 6A 0F 6A 
2cbe0     4F 6A 09 6A 
2cbe4     06 6A 03 6A 
2cbe8     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2cbec     23 68 69 77 
2cbf0     3A 4D 38 CA 
2cbf4     38 86 4E 91 
2cbf8     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2cbfc     64 92 24 92 
2cc00     6A 92 2A 92 
2cc04     70 92 30 92 
2cc08     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2cc0c     7B 92 7E 92 
2cc10     C5 92 84 92 
2cc14     CB 92 8A 92 
2cc18     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2cc1c     4D 8D F9 E2 
2cc20     97 59 FE 74 
2cc24     DB 68 6D 6A 
2cc28     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2cc2c     A8 6A A5 6A 
2cc30     A3 6A 9F 6A 
2cc34     9D 6A 9B 6A 
2cc38     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2cc3c     D6 6A 8F 6A 
2cc40     CF 6A 46 6A 
2cc44     CA 6A E1 67 
2cc48     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2cc4c     D3 F7 15 92 
2cc50     90 8C BF 94 
2cc54     A6 92 EB 92 
2cc58     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2cc5c     B1 92 F7 92 
2cc60     FA 92 FD 92 
2cc64     00 93 02 93 
2cc68     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2cc6c     4F 93 52 93 
2cc70     54 93 22 94 
2cc74     5A 93 8F 88 
2cc78     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2cc7c     1C 77 07 6C 
2cc80     E8 69 7A 6B 
2cc84     34 6B 75 6B 
2cc88     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2cc8c     29 6B 26 6B 
2cc90     24 6B 21 6B 
2cc94     1D 6B 5E 6B 
2cc98     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2cc9c     12 6B 52 6B 
2cca0     34 69 34 6E 
2cca4     BA 73 A4 24 
2cca8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2ccac     7A 94 B3 93 
2ccb0     72 93 31 93 
2ccb4     78 93 7A 93 
2ccb8     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2ccbc     83 93 86 93 
2ccc0     89 93 D0 93 
2ccc4     D2 93 D5 93 
2ccc8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2cccc     DD 93 40 96 
2ccd0     30 8B 99 9C 
2ccd4     52 10 94 71 
2ccd8     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2ccdc     46 6C 79 6B 
2cce0     40 6C B7 6B 
2cce4     F7 6B B1 6B 
2cce8     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2ccec     EC 6B A5 6B 
2ccf0     A2 6B 9F 6B 
2ccf4     9D 6B 9A 6B 
2ccf8     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2ccfc     C8 6A E4 76 
2cd00     20 4B F9 CE 
2cd04     2E 8A 1A 92 
2cd08     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2cd0c     FB 93 BA 93 
2cd10     01 94 03 94 
2cd14     4A 94 09 94 
2cd18     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2cd1c     55 94 14 94 
2cd20     9E 94 1A 94 
2cd24     61 94 20 94 
2cd28     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2cd2c     3E 87 E5 CD 
2cd30     5F 50 6C 78 
2cd34     B5 6A 04 6C 
2cd38     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2cd3c     83 6C 7F 6C 
2cd40     7C 6C 36 6C 
2cd44     76 6C 74 6C 
2cd48     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2cd4c     6B 6C 25 6C 
2cd50     66 6C 1F 6C 
2cd54     1D 6C 41 6A 
2cd58     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2cd5c     BA FA FC 94 
2cd60     5B 8D 97 96 
2cd64     3B 94 C5 94 
2cd68     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2cd6c     89 94 8C 94 
2cd70     8F 94 92 94 
2cd74     94 94 DB 94 
2cd78     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2cd7c     E4 94 E7 94 
2cd80     2D 95 74 95 
2cd84     C8 96 15 89 
2cd88     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2cd8c     CB 75 31 6F 
2cd90     7E 6B 10 6D 
2cd94     C9 6C 0A 6D 
2cd98     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2cd9c     BD 6C FF 6C 
2cda0     FB 6C F9 6C 
2cda4     B2 6C F3 6C 
2cda8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2cdac     A7 6C E8 6C 
2cdb0     0D 6B 85 6F 
2cdb4     C7 74 10 28 
2cdb8     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2cdbc     96 96 47 95 
2cdc0     06 95 0A 95 
2cdc4     0C 95 0F 95 
2cdc8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2cdcc     17 95 5E 95 
2cdd0     61 95 63 95 
2cdd4     22 95 AC 95 
2cdd8     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2cddc     72 95 17 98 
2cde0     59 8E 01 96 
2cde4     CF FC 5A 68 
2cde8     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2cdec     96 6D 50 6D 
2cdf0     D5 6D 4A 6D 
2cdf4     8C 6D 89 6D 
2cdf8     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2cdfc     80 6D 3A 6D 
2ce00     7A 6D 77 6D 
2ce04     75 6D 71 6D 
2ce08     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2ce0c     18 6C BC 78 
2ce10     9A 4F 7E CF 
2ce14     1F 89 F1 93 
2ce18     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2ce1c     D2 95 4E 95 
2ce20     D7 95 53 95 
2ce24     DD 95 E0 95 
2ce28     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2ce2c     A5 95 EB 95 
2ce30     EE 95 F0 95 
2ce34     37 96 B3 95 
2ce38     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2ce3c     1A 98 D5 8D 
2ce40     C5 9F CD 0F 
2ce44     0F 71 F3 73 
2ce48     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2ce4c     D9 6D 5E 6E 
2ce50     D3 6D 58 6E 
2ce54     12 6E 0F 6E 
2ce58     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2ce5c     49 6E BF 6D 
2ce60     87 6E 76 6D 
2ce64     81 6E 11 6B 
2ce68     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2ce6c     3F 09 44 95 
2ce70     E5 8D 3F 99 
2ce74     D4 95 A2 96 
2ce78     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2ce7c     23 96 69 96 
2ce80     6B 96 6E 96 
2ce84     71 96 74 96 
2ce88     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2ce8c     BF 96 3C 96 
2ce90     C6 96 C8 96 
2ce94     A3 98 51 8D 
2ce98     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2ce9c     CF 75 29 73 
2cea0     90 6C EC 6E 
2cea4     62 6E E7 6E 
2cea8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2ceac     9A 6E 98 6E 
2ceb0     95 6E 91 6E 
2ceb4     8E 6E CF 6E 
2ceb8     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2cebc     40 6E C3 6E 
2cec0     E8 6C 45 6F 
2cec4     A5 7B C9 35 
2cec8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2cecc     2D 98 23 97 
2ced0     E1 96 A0 96 
2ced4     A4 96 EA 96 
2ced8     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2cedc     AF 96 F4 96 
2cee0     F8 96 3E 97 
2cee4     FD 96 43 97 
2cee8     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2ceec     08 97 6B 99 
2cef0     D6 92 88 91 
2cef4     D8 EE 84 66 
2cef8     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2cefc     2E 6F E7 6E 
2cf00     6C 6F 24 6F 
2cf04     21 6F 1F 6F 
2cf08     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2cf0c     17 6F 13 6F 
2cf10     54 6F 0E 6F 
2cf14     0B 6F 4B 6F 
2cf18     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2cf1c     27 6D 1C 7B 
2cf20     19 59 9F DB 
2cf24     66 8E BC 94 
2cf28     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2cf2c     67 97 26 97 
2cf30     6D 97 2B 97 
2cf34     72 97 32 97 
2cf38     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2cf3c     C1 97 7F 97 
2cf40     C6 97 85 97 
2cf44     CB 97 CE 97 
2cf48     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2cf4c     EC 8A C4 C6 
2cf50     68 4C F4 7D 
2cf54     63 6E E8 6E 
2cf58     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2cf5c     ED 6F A7 6F 
2cf60     E7 6F A0 6F 
2cf64     E1 6F 9B 6F 
2cf68     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2cf6c     D5 6F 8F 6F 
2cf70     CE 6F 45 6F 
2cf74     86 6F 68 6D 
2cf78     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2cf7c     C0 13 AD A2 
2cf80     A7 8E 79 99 
2cf84     E6 97 E8 97 
2cf88     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2cf8c     F1 97 F3 97 
2cf90     F6 97 F9 97 
2cf94     FB 97 FE 97 
2cf98     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2cf9c     4A 98 0A 98 
2cfa0     93 98 0F 98 
2cfa4     7F 9B BF 8C 
2cfa8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2cfac     91 7B 62 73 
2cfb0     1A 6E B9 70 
2cfb4     EB 6F B3 70 
2cfb8     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2cfbc     25 70 20 70 
2cfc0     1E 70 1B 70 
2cfc4     18 70 15 70 
2cfc8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2cfcc     0D 70 09 70 
2cfd0     07 70 03 70 
2cfd4     01 70 FD 6F 
2cfd8     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2cfdc     F6 6F F2 6F 
2cfe0     EF 6F EC 6F 
2cfe4     2C 70 E6 6F 
2cfe8     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2cfec     DD 6F 97 6F 
2cff0     D7 6F 84 6E 
2cff4     8F 6F 3F 7D 
2cff8     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2cffa     00 00 00 00 | zero1 long 0
2cffe     FF FF FF FF 
2d002     FF FF       | atarist_spl file "atarist.spl" '512
2d004     00 00 00 00 
2d008     00 00 00 00 
2d00c     00 00       | 	byte	$00[10]
2d00e     17 7F F2 7F 
2d012     B2 7F 72 7F 
2d016     33 7F F4 7E 
2d01a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2d01e     36 7E F5 7D 
2d022     E9 51 F2 0D 
2d026     8E 00 F3 FD 
2d02a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2d02e     57 FD 58 FD 
2d032     5B FD 5C FD 
2d036     5C FD 60 7D 
2d03a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2d03e     D6 7C 98 7C 
2d042     59 7C 1A 7C 
2d046     DC 7B 9E 7B 
2d04a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2d04e     F3 05 00 FD 
2d052     41 FB EA FA 
2d056     D9 FA DB FA 
2d05a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2d05e     E4 FA 9B 36 
2d062     F8 7A C0 7A 
2d066     84 7A 45 7A 
2d06a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2d06e     8E 79 51 79 
2d072     15 79 D7 78 
2d076     3C 1F EB FF 
2d07a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2d07e     6D F8 65 F8 
2d082     68 F8 6D F8 
2d086     70 F8 74 F8 
2d08a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2d08e     AB 60 79 60 
2d092     4B 60 1A 60 
2d096     E9 5F B9 5F 
2d09a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2d09e     FB 59 B2 0B 
2d0a2     92 FA 3A F7 
2d0a6     96 F6 79 F6 
2d0aa     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2d0ae     82 F6 86 F6 
2d0b2     8C F6 DB 5D 
2d0b6     F1 5E C1 5E 
2d0ba     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2d0be     34 5E 04 5E 
2d0c2     D6 5D A6 5D 
2d0c6     78 5D D4 3E 
2d0ca     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2d0ce     27 F5 BA F4 
2d0d2     AB F4 AD F4 
2d0d6     B2 F4 B8 F4 
2d0da     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2d0de     26 5D 2B 5D 
2d0e2     FC 5C CD 5C 
2d0e6     9F 5C 70 5C 
2d0ea     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2d0ee     E5 5B B8 5B 
2d0f2     DB 24 A7 FC 
2d0f6     D1 F4 4D F3 
2d0fa     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2d0fe     04 F3 0B F3 
2d102     11 F3 16 F3 
2d106     DE 18 98 5B 
2d10a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2d10e     4E 4A 29 48 
2d112     A0 47 6A 47 
2d116     43 47 20 47 
2d11a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2d11e     E2 F6 98 F2 
2d122     C5 F1 A3 F1 
2d126     A3 F1 A8 F1 
2d12a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2d12e     BF F1 00 3D 
2d132     EF 46 CD 46 
2d136     AA 46 86 46 
2d13a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2d13e     1C 46 F9 45 
2d142     D7 45 EE 43 
2d146     DE 02 E8 F3 
2d14a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2d14e     61 F0 65 F0 
2d152     6D F0 74 F0 
2d156     7C F0 84 F0 
2d15a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2d15e     8E 45 6D 45 
2d162     49 45 27 45 
2d166     05 45 E1 44 
2d16a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2d16e     F1 2F A9 FB 
2d172     8B F1 9B EF 
2d176     40 EF 36 EF 
2d17a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2d17e     4D EF 56 EF 
2d182     5E EF 7B 44 
2d186     8C 44 69 44 
2d18a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2d18e     03 44 E1 43 
2d192     C0 43 F5 37 
2d196     69 33 0F 11 
2d19a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2d19e     66 EE 37 EE 
2d1a2     38 EE 40 EE 
2d1a6     48 EE 51 EE 
2d1aa     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2d1ae     7D 32 6A 32 
2d1b2     51 32 37 32 
2d1b6     1F 32 05 32 
2d1ba     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2d1be     B9 31 A1 31 
2d1c2     F1 04 F4 F1 
2d1c6     50 EE A0 ED 
2d1ca     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2d1ce     93 ED 9A ED 
2d1d2     A4 ED AD ED 
2d1d6     F4 27 C1 31 
2d1da     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2d1de     78 31 5F 31 
2d1e2     46 31 2E 31 
2d1e6     15 31 FC 30 
2d1ea     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2d1ee     C4 EF 4A ED 
2d1f2     DC EC CB EC 
2d1f6     D2 EC DA EC 
2d1fa     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2d1fe     F9 EC 64 2F 
2d202     0A 31 F1 30 
2d206     D9 30 C0 30 
2d20a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2d20e     78 30 5F 30 
2d212     46 30 38 23 
2d216     A6 F6 19 EE 
2d21a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2d21e     20 EC 28 EC 
2d222     32 EC 3C EC 
2d226     47 EC 51 EC 
2d22a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2d22e     A3 22 93 22 
2d232     7F 22 6E 22 
2d236     5D 22 4C 22 
2d23a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2d23e     77 09 76 F1 
2d242     CC EC F0 EB 
2d246     CD EB CE EB 
2d24a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2d24e     ED EB F5 EB 
2d252     3E F6 6B 22 
2d256     5F 22 4E 22 
2d25a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2d25e     1B 22 0B 22 
2d262     FA 21 E9 21 
2d266     D8 21 4D FF 
2d26a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2d26e     92 EB 7B EB 
2d272     82 EB 8C EB 
2d276     97 EB A1 EB 
2d27a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
2d27e     15 22 04 22 
2d282     F3 21 E3 21 
2d286     D2 21 C0 21 
2d28a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
2d28e     8E 21 7D 21 
2d292     9A F8 A4 ED 
2d296     8E EB 2F EB 
2d29a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
2d29e     37 EB 42 EB 
2d2a2     4C EB 57 EB 
2d2a6     B2 17 22 19 
2d2aa     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
2d2ae     FD 18 EF 18 
2d2b2     E3 18 D6 18 
2d2b6     CA 18 BD 18 
2d2ba     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
2d2be     60 EC 35 EB 
2d2c2     01 EB 01 EB 
2d2c6     0C EB 16 EB 
2d2ca     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
2d2ce     34 EB D0 18 
2d2d2     00 19 F4 18 
2d2d6     E8 18 DA 18 
2d2da     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
2d2de     B6 18 A9 18 
2d2e2     9D 18 91 05 
2d2e6     F0 EF CA EB 
2d2ea     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
2d2ee     E8 EA F2 EA 
2d2f2     FE EA 07 EB 
2d2f6     12 EB C2 EF 
2d2fa     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
2d2fe     D9 18 CD 18 
2d302     C0 18 B3 18 
2d306     A7 18 9B 18 
2d30a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
2d30e     B8 FC 30 EE 
2d312     61 EB DC EA 
2d316     CD EA D2 EA 
2d31a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
2d31e     F3 EA FE EA 
2d322     D2 09 D1 18 
2d326     C3 18 17 18 
2d32a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
2d32e     66 11 52 11 
2d332     49 11 41 11 
2d336     38 11 E0 F4 
2d33a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
2d33e     C9 EA C5 EA 
2d342     CF EA DB EA 
2d346     E6 EA EF EA 
2d34a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
2d34e     89 11 80 11 
2d352     78 11 6E 11 
2d356     67 11 5D 11 
2d35a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
2d35e     43 11 32 0D 
2d362     9C F1 07 EC 
2d366     F8 EA CD EA 
2d36a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
2d36e     E4 EA ED EA 
2d372     F8 EA 02 EB 
2d376     55 11 91 11 
2d37a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
2d37e     75 11 6E 11 
2d382     64 11 5E 11 
2d386     54 11 4A 11 
2d38a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
2d38e     A8 EB F1 EA 
2d392     D9 EA DC EA 
2d396     E8 EA F1 EA 
2d39a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
2d39e     A6 EB 9E 11 
2d3a2     A0 11 96 11 
2d3a6     8D 11 85 11 
2d3aa     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
2d3ae     6A 11 CA 0D 
2d3b2     36 0B 57 F8 
2d3b6     6C ED 57 EB 
2d3ba     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
2d3be     F4 EA FF EA 
2d3c2     09 EB 15 EB 
2d3c6     1E EB 1A FD 
2d3ca     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
2d3ce     ED 0A E8 0A 
2d3d2     E2 0A DC 0A 
2d3d6     D6 0A D1 0A 
2d3da     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
2d3de     F8 F3 BC EC 
2d3e2     57 EB 1E EB 
2d3e6     18 EB 24 EB 
2d3ea     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
2d3ee     42 EB 4D EB 
2d3f2     08 09 20 0B 
2d3f6     1A 0B 14 0B 
2d3fa     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
2d3fe     04 0B FE 0A 
2d402     F9 0A F2 0A 
2d406     84 08 3A F1 
2d40a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
2d40e     42 EB 42 EB 
2d412     4E EB 57 EB 
2d416     62 EB 6B EB 
2d41a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
2d41e     48 0B 43 0B 
2d422     3C 0B 36 0B 
2d426     31 0B 2C 0B 
2d42a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
2d42e     1B 0B 5C 00 
2d432     6A EF 1B EC 
2d436     81 EB 6A EB 
2d43a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
2d43e     85 EB 8E EB 
2d442     99 EB A3 EB 
2d446     DD 05 E5 05 
2d44a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
2d44e     DB 05 D8 05 
2d452     D5 05 D1 05 
2d456     D0 05 CB 05 
2d45a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
2d45e     0C EC BB EB 
2d462     B3 EB BB EB 
2d466     C5 EB D0 EB 
2d46a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
2d46e     E4 F7 2C 06 
2d472     28 06 24 06 
2d476     22 06 1F 06 
2d47a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
2d47e     16 06 14 06 
2d482     0F 06 D0 F3 
2d486     65 ED 2D EC 
2d48a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
2d48e     01 EC 0A EC 
2d492     14 EC 1E EC 
2d496     29 EC FB 03 
2d49a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
2d49e     63 06 60 06 
2d4a2     5E 06 59 06 
2d4a6     58 06 54 06 
2d4aa     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
2d4ae     69 F1 21 ED 
2d4b2     55 EC 33 EC 
2d4b6     36 EC 40 EC 
2d4ba     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
2d4be     5C EC 68 EC 
2d4c2     92 02 D9 02 
2d4c6     D7 02 D7 02 
2d4ca     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
2d4ce     D1 02 D1 02 
2d4d2     CE 02 CD 02 
2d4d6     5D FC 80 EF 
2d4da     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
2d4de     83 EC 8A EC 
2d4e2     93 EC 9C EC 
2d4e6     A5 EC B1 EC 
2d4ea     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
2d4ee     2B 03 2A 03 
2d4f2     29 03 26 03 
2d4f6     25 03 24 03 
2d4fa     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
2d4fe     1F 03 70 F7 
2d502     D0 EE 27 ED 
2d506     DB EC D4 EC 
2d50a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
2d50e     F0 EC FA EC 
2d512     02 ED F9 F4 
2d516     7B 03 7C 03 
2d51a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
2d51e     75 03 73 03 
2d522     72 03 70 03 
2d526     6D 03 6C 03 
2d52a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
2d52e     54 ED 22 ED 
2d532     22 ED 2C ED 
2d536     35 ED 3F ED 
2d53a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
2d53e     14 01 C3 03 
2d542     C1 03 C0 03 
2d546     5F 01 A5 00 
2d54a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
2d54e     7B 00 7C 00 
2d552     20 00 85 F1 
2d556     2A EE 89 ED 
2d55a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
2d55e     80 ED 87 ED 
2d562     90 ED 9A ED 
2d566     A3 ED 73 00 
2d56a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
2d56e     D0 00 D0 00 
2d572     D0 00 D0 00 
2d576     D0 00 CF 00 
2d57a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
2d57e     80 F0 3D EE 
2d582     D5 ED C7 ED 
2d586     CD ED D6 ED 
2d58a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
2d58e     F2 ED FA ED 
2d592     1D 01 29 01 
2d596     27 01 27 01 
2d59a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
2d59e     25 01 26 01 
2d5a2     26 01 23 01 
2d5a6     D0 F7 EC EF 
2d5aa     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
2d5ae     1C EE 24 EE 
2d5b2     2D EE 37 EE 
2d5b6     40 EE 47 EE 
2d5ba     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
2d5be     7D 01 7B 01 
2d5c2     7A 01 7A 01 
2d5c6     79 01 78 01 
2d5ca     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
2d5ce     84 FE DE F3 
2d5d2     6C EF 93 EE 
2d5d6     72 EE 72 EE 
2d5da     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
2d5de     8B EE 95 EE 
2d5e2     9E EE 15 FC 
2d5e6     67 FE 67 FE 
2d5ea     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
2d5ee     6B FE 6B FE 
2d5f2     6D FE 6D FE 
2d5f6     6D FE 6F FE 
2d5fa     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
2d5fe     DF EE CC EE 
2d602     CF EE D9 EE 
2d606     E1 EE EA EE 
2d60a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
2d60e     5A FE C4 FE 
2d612     C3 FE C5 FE 
2d616     C6 FE C6 FE 
2d61a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
2d61e     C8 FE C7 FE 
2d622     DA FB 85 F1 
2d626     8D EF 31 EF 
2d62a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
2d62e     34 EF 3E EF 
2d632     46 EF 4F EF 
2d636     57 EF 0D FF 
2d63a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
2d63e     1F FF 1F FF 
2d642     21 FF 21 FF 
2d646     21 FF 21 FF 
2d64a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
2d64e     15 F1 BE EF 
2d652     84 EF 7E EF 
2d656     88 EF 8F EF 
2d65a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
2d65e     A9 EF 06 F2 
2d662     A6 FC AB FC 
2d666     AD FC AE FC 
2d66a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
2d66e     B2 FC B4 FC 
2d672     B6 FC B7 FC 
2d676     8B F4 BD F0 
2d67a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
2d67e     E4 EF EE EF 
2d682     F6 EF FD EF 
2d686     04 F0 0E F0 
2d68a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
2d68e     0B FD 0D FD 
2d692     0F FD 11 FD 
2d696     11 FD 13 FD 
2d69a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
2d69e     17 FD 64 F3 
2d6a2     CD F0 52 F0 
2d6a6     41 F0 45 F0 
2d6aa     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
2d6ae     5B F0 64 F0 
2d6b2     6D F0 FB FC 
2d6b6     65 FD 68 FD 
2d6ba     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
2d6be     6C FD 6D FD 
2d6c2     6F FD 70 FD 
2d6c6     72 FD B3 FB 
2d6ca     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
2d6ce     A4 F0 99 F0 
2d6d2     A0 F0 A8 F0 
2d6d6     AE F0 B9 F0 
2d6da     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
2d6de     CB FB DD FB 
2d6e2     DE FB E0 FB 
2d6e6     E3 FB E3 FB 
2d6ea     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
2d6ee     E9 FB EC FB 
2d6f2     62 F7 27 F2 
2d6f6     2A F1 FF F0 
2d6fa     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
2d6fe     0C F1 13 F1 
2d702     1B F1 23 F1 
2d706     33 F2 3C FC 
2d70a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
2d70e     42 FC 45 FC 
2d712     47 FC 48 FC 
2d716     4A FC 4C FC 
2d71a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
2d71e     20 F2 77 F1 
2d722     5C F1 5F F1 
2d726     64 F1 6C F1 
2d72a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
2d72e     83 F1 DC F8 
2d732     9A FC 9A FC 
2d736     9B FC 9E FC 
2d73a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
2d73e     A3 FC A4 FC 
2d742     A6 FC A9 FC 
2d746     90 F4 33 F2 
2d74a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
2d74e     BA F1 BF F1 
2d752     C7 F1 CE F1 
2d756     D6 F1 DC F1 
2d75a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
2d75e     F3 FC F5 FC 
2d762     FE FB 79 FB 
2d766     62 FB 5F FB 
2d76a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
2d76e     6F FA AF F3 
2d772     53 F2 12 F2 
2d776     0F F2 15 F2 
2d77a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
2d77e     2A F2 32 F2 
2d782     38 F2 9A FB 
2d786     AF FB B1 FB 
2d78a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2d78e     B7 FB B8 FB 
2d792     BA FB BC FB 
2d796     C1 FB 3B F8 
2d79a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
2d79e     6E F2 6C F2 
2d7a2     74 F2 7A F2 
2d7a6     81 F2 87 F2 
2d7aa     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
2d7ae     06 FC 09 FC 
2d7b2     0C FC 0E FC 
2d7b6     0F FC 12 FC 
2d7ba     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
2d7be     17 FC 1A FC 
2d7c2     B2 F6 7B F3 
2d7c6     DD F2 C5 F2 
2d7ca     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
2d7ce     D4 F2 DB F2 
2d7d2     E0 F2 E8 F2 
2d7d6     28 F8 60 FC 
2d7da     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
2d7de     64 FC 66 FC 
2d7e2     68 FC 6A FC 
2d7e6     6D FC 52 FC 
2d7ea     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
2d7ee     78 F3 24 F3 
2d7f2     1A F3 1E F3 
2d7f6     24 F3 2A F3 
2d7fa     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
2d7fe     3D F3 80 FA 
2d802     0C FB 0F FB 
2d806     10 FB 14 FB 
2d80a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
2d80e     1B FB 1D FB 
2d812     1F FB 92 FA 
2d816     DE F4 AE F3 
2d81a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
2d81e     79 F3 7E F3 
2d822     84 F3 8C F3 
2d826     92 F3 97 F3 
2d82a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
2d82e     67 FB 69 FB 
2d832     6B FB 6F FB 
2d836     71 FB 72 FB 
2d83a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
2d83e     E3 F8 BA F4 
2d842     EE F3 CC F3 
2d846     CA F3 CF F3 
2d84a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
2d84e     E2 F3 E8 F3 
2d852     ED F3 B7 FB 
2d856     BC FB BE FB 
2d85a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
2d85e     C4 FB C6 FB 
2d862     C8 FB C9 FB 
2d866     CC FB 8F F7 
2d86a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
2d86e     1E F4 1E F4 
2d872     24 F4 2A F4 
2d876     30 F4 38 F4 
2d87a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
2d87e     AD FA B1 FA 
2d882     B4 FA B6 FA 
2d886     BA FA BB FA 
2d88a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
2d88e     C2 FA C6 FA 
2d892     55 F6 C6 F4 
2d896     7D F4 72 F4 
2d89a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
2d89e     83 F4 89 F4 
2d8a2     8F F4 94 F4 
2d8a6     66 FA 03 FB 
2d8aa     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
2d8ae     0A FB 0E FB 
2d8b2     10 FB 11 FB 
2d8b6     16 FB 18 FB 
2d8ba     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
2d8be     F9 F4 CA F4 
2d8c2     C5 F4 CB F4 
2d8c6     D1 F4 D7 F4 
2d8ca     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
2d8ce     E8 F4 3F FB 
2d8d2     56 FB 58 FB 
2d8d6     5A FB 5E FB 
2d8da     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
2d8de     64 FB 64 FB 
2d8e2     69 FB 99 F9 
2d8e6     E9 F5 33 F5 
2d8ea     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
2d8ee     1D F5 22 F5 
2d8f2     27 F5 2E F5 
2d8f6     32 F5 37 F5 
2d8fa     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
2d8fe     BC FA BC FA 
2d902     C1 FA C2 FA 
2d906     C4 FA C8 FA 
2d90a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
2d90e     F9 F7 DB F5 
2d912     78 F5 69 F5 
2d916     6A F5 70 F5 
2d91a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
2d91e     7F F5 85 F5 
2d922     6E F7 06 FB 
2d926     0A FB 0B FB 
2d92a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
2d92e     14 FB 15 FB 
2d932     18 FB 1B FB 
2d936     1D FB 70 F7 
2d93a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
2d93e     B6 F5 BB F5 
2d942     C0 F5 C6 F5 
2d946     CA F5 CF F5 
2d94a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
2d94e     54 FB 56 FB 
2d952     5A FB 5B FB 
2d956     5E FB 5F FB 
2d95a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
2d95e     67 FB 52 FB 
2d962     29 F7 33 F6 
2d966     06 F6 02 F6 
2d96a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
2d96e     10 F6 16 F6 
2d972     1A F6 1F F6 
2d976     81 FB 9F FB 
2d97a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
2d97e     51 FB F2 FA 
2d982     E3 FA E3 FA 
2d986     E5 FA E9 FA 
2d98a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
2d98e     64 F6 4D F6 
2d992     4D F6 53 F6 
2d996     57 F6 5C F6 
2d99a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
2d99e     6A F6 19 FB 
2d9a2     1E FB 22 FB 
2d9a6     23 FB 24 FB 
2d9aa     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
2d9ae     2C FB 2E FB 
2d9b2     32 FB F0 F8 
2d9b6     01 F7 A5 F6 
2d9ba     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
2d9be     9F F6 A3 F6 
2d9c2     A6 F6 AC F6 
2d9c6     B0 F6 EB F7 
2d9ca     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
2d9ce     68 FB 6C FB 
2d9d2     6E FB 71 FB 
2d9d6     72 FB 74 FB 
2d9da     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
2d9de     71 F8 21 F7 
2d9e2     E5 F6 DD F6 
2d9e6     E1 F6 E6 F6 
2d9ea     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
2d9ee     F5 F6 F7 F6 
2d9f2     F7 FA AB FB 
2d9f6     AD FB AF FB 
2d9fa     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
2d9fe     B6 FB B9 FB 
2da02     BB FB BC FB 
2da06     21 FB 07 F8 
2da0a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
2da0e     22 F7 26 F7 
2da12     2B F7 2E F7 
2da16     34 F7 38 F7 
2da1a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
2da1e     13 FB 16 FB 
2da22     17 FB 1B FB 
2da26     1E FB 20 FB 
2da2a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
2da2e     26 FB 77 FA 
2da32     F3 F7 7C F7 
2da36     67 F7 6A F7 
2da3a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
2da3e     74 F7 7A F7 
2da42     7E F7 82 F7 
2da46     53 FB 5A FB 
2da4a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
2da4e     5F FB 63 FB 
2da52     65 FB 67 FB 
2da56     69 FB 6A FB 
2da5a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
2da5e     B5 F7 A9 F7 
2da62     AD F7 B0 F7 
2da66     B5 F7 B8 F7 
2da6a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
2da6e     6E F8 99 FB 
2da72     9C FB 9D FB 
2da76     9F FB A4 FB 
2da7a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
2da7e     A9 FB AB FB 
2da82     AD FB 46 F9 
2da86     26 F8 F0 F7 
2da8a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
2da8e     F4 F7 F8 F7 
2da92     FB F7 FF F7 
2da96     03 F8 65 FA 
2da9a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
2da9e     2B FB 2F FB 
2daa2     30 FB 32 FB 
2daa6     34 FB 38 FB 
2daaa     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
2daae     E9 F8 4A F8 
2dab2     2E F8 2C F8 
2dab6     2F F8 36 F8 
2daba     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
2dabe     41 F8 44 F8 
2dac2     4A FB 67 FB 
2dac6     68 FB 6B FB 
2daca     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
2dace     73 FB 74 FB 
2dad2     78 FB 7A FB 
2dad6     14 FB E7 F8 
2dada     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
2dade     6D F8 70 F8 
2dae2     73 F8 78 F8 
2dae6     7C F8 80 F8 
2daea     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
2daee     A6 FB A7 FB 
2daf2     A9 FB AC FB 
2daf6     AF FB B1 FB 
2dafa     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
2dafe     B7 FB 73 FA 
2db02     F8 F8 B4 F8 
2db06     A9 F8 AB F8 
2db0a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
2db0e     B4 F8 B8 F8 
2db12     BB F8 FA F8 
2db16     64 FB 65 FB 
2db1a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
2db1e     6D FB 6F FB 
2db22     70 FB 74 FB 
2db26     77 FB 77 FB 
2db2a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
2db2e     E9 F8 E4 F8 
2db32     E8 F8 EB F8 
2db36     EE F8 F2 F8 
2db3a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
2db3e     B5 FA 9F FB 
2db42     A1 FB A4 FB 
2db46     A5 FB A9 FB 
2db4a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
2db4e     AE FB B1 FB 
2db52     B2 FB C7 F9 
2db56     39 F9 22 F9 
2db5a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
2db5e     26 F9 2A F9 
2db62     2E F9 32 F9 
2db66     33 F9 BA FB 
2db6a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
2db6e     DE FB E1 FB 
2db72     E2 FB E4 FB 
2db76     E5 FB E7 FB 
2db7a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
2db7e     C5 F9 67 F9 
2db82     57 F9 56 F9 
2db86     5B F9 5F F9 
2db8a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
2db8e     68 F9 6C F9 
2db92     0B FC 11 FC 
2db96     14 FC 15 FC 
2db9a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
2db9e     B5 FB B5 FB 
2dba2     B6 FB B8 FB 
2dba6     E9 FA C8 F9 
2dbaa     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
2dbae     90 F9 94 F9 
2dbb2     95 F9 99 F9 
2dbb6     9D F9 9F F9 
2dbba     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
2dbbe     DE FB DF FB 
2dbc2     E2 FB E4 FB 
2dbc6     E6 FB E8 FB 
2dbca     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
2dbce     EF FB AC FA 
2dbd2     E9 F9 C7 F9 
2dbd6     C3 F9 C8 F9 
2dbda     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
2dbde     D0 F9 D4 F9 
2dbe2     D6 F9 0E FB 
2dbe6     11 FC 13 FC 
2dbea     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
2dbee     19 FC 1B FC 
2dbf2     1D FC 1E FC 
2dbf6     21 FC 22 FC 
2dbfa     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
2dbfe     F7 F9 F7 F9 
2dc02     FB F9 FE F9 
2dc06     00 FA 03 FA 
2dc0a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
2dc0e     1B FC 45 FC 
2dc12     46 FC 48 FC 
2dc16     4A FC 4B FC 
2dc1a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
2dc1e     52 FC 54 FC 
2dc22     F3 FB 82 FA 
2dc26     35 FA 28 FA 
2dc2a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
2dc2e     31 FA 32 FA 
2dc32     37 FA 37 FA 
2dc36     3C FA 00 FC 
2dc3a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
2dc3e     09 FC 0B FC 
2dc42     0F FC 12 FC 
2dc46     12 FC 15 FC 
2dc4a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
2dc4e     8D FA 60 FA 
2dc52     5B FA 5C FA 
2dc56     60 FA 61 FA 
2dc5a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
2dc5e     6C FA 6D FA 
2dc62     37 FC 3A FC 
2dc66     3B FC 3D FC 
2dc6a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
2dc6e     43 FC 44 FC 
2dc72     45 FC 47 FC 
2dc76     51 FB AB FA 
2dc7a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
2dc7e     8E FA 91 FA 
2dc82     93 FA 95 FA 
2dc86     98 FA 9B FA 
2dc8a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
2dc8e     68 FC 6A FC 
2dc92     6C FC 6E FC 
2dc96     70 FC 72 FC 
2dc9a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
2dc9e     76 FC 3B FB 
2dca2     D0 FA BB FA 
2dca6     B9 FA BD FA 
2dcaa     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
2dcae     C4 FA C6 FA 
2dcb2     CA FA 13 FC 
2dcb6     3A FC 3A FC 
2dcba     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
2dcbe     41 FC 43 FC 
2dcc2     44 FC 47 FC 
2dcc6     48 FC 3C FC 
2dcca     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
2dcce     E6 FA E8 FA 
2dcd2     EB FA EE FA 
2dcd6     F0 FA F2 FA 
2dcda     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
2dcde     61 FC 66 FC 
2dce2     68 FC 6B FC 
2dce6     6C FC 6E FC 
2dcea     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
2dcee     73 FC 75 FC 
2dcf2     13 FC 3F FB 
2dcf6     17 FB 12 FB 
2dcfa     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
2dcfe     1A FB 1D FB 
2dd02     1F FB 20 FB 
2dd06     23 FB 92 FC 
2dd0a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
2dd0e     96 FC 97 FC 
2dd12     9A FC 9C FC 
2dd16     9E FC 9F FC 
2dd1a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
2dd1e     5A FB 41 FB 
2dd22     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
2dd26     00 00 00 00 | zero2 long 0
2dd2a     01 00 00 00 
2dd2e     00 00 00 00 
2dd32     00 00 00 00 
2dd36     00 00 00 00 | mouse  file "mouse2.def"
2dd3a     00 00 00 00 
2dd3e     00 00 00 00 
2dd42     00 00 00 00 
2dd46     00 00 00 00 | 	byte	$00[16]
2dd4a     01 01 00 00 
2dd4e     00 00 00 00 
2dd52     00 00 00 00 
2dd56     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2dd5a     00 00 00 00 
2dd5e     00 00 00 00 
2dd62     00 00 00 00 
2dd66     00 00 00 00 | 	byte	$00[16]
2dd6a     01 0D 01 00 
2dd6e     00 00 00 00 
2dd72     00 00 00 00 
2dd76     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2dd7a     00 00 00 00 
2dd7e     00 00 00 00 
2dd82     00 00 00 00 
2dd86     00 00 00 00 | 	byte	$00[16]
2dd8a     01 0D 0D 01 
2dd8e     00 00 00 00 
2dd92     00 00 00 00 
2dd96     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2dd9a     00 00 00 00 
2dd9e     00 00 00 00 
2dda2     00 00 00 00 
2dda6     00 00 00 00 | 	byte	$00[16]
2ddaa     01 0D 0D 0D 
2ddae     01 00 00 00 
2ddb2     00 00 00 00 
2ddb6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ddba     00 00 00 00 
2ddbe     00 00 00 00 
2ddc2     00 00 00 00 
2ddc6     00 00 00 00 | 	byte	$00[16]
2ddca     01 0D 0D 0D 
2ddce     0D 01 00 00 
2ddd2     00 00 00 00 
2ddd6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ddda     00 00 00 00 
2ddde     00 00 00 00 
2dde2     00 00 00 00 
2dde6     00 00 00 00 | 	byte	$00[16]
2ddea     01 0D 0D 0D 
2ddee     0D 0D 01 00 
2ddf2     00 00 00 00 
2ddf6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
2ddfa     00 00 00 00 
2ddfe     00 00 00 00 
2de02     00 00 00 00 
2de06     00 00 00 00 | 	byte	$00[16]
2de0a     01 0D 0D 0D 
2de0e     0D 0D 0D 01 
2de12     00 00 00 00 
2de16     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
2de1a     00 00 00 00 
2de1e     00 00 00 00 
2de22     00 00 00 00 
2de26     00 00 00 00 | 	byte	$00[16]
2de2a     01 0D 0D 0D 
2de2e     0D 0D 0D 0C 
2de32     01 00 00 00 
2de36     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
2de3a     00 00 00 00 
2de3e     00 00 00 00 
2de42     00 00 00 00 
2de46     00 00 00 00 | 	byte	$00[16]
2de4a     01 0D 0D 0D 
2de4e     0D 0D 0D 0D 
2de52     0C 01 00 00 
2de56     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
2de5a     00 00 00 00 
2de5e     00 00 00 00 
2de62     00 00 00 00 
2de66     00 00 00 00 | 	byte	$00[16]
2de6a     01 0D 0D 0D 
2de6e     0D 0D 0D 0D 
2de72     0D 0C 01 00 
2de76     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
2de7a     00 00 00 00 
2de7e     00 00 00 00 
2de82     00 00 00 00 
2de86     00 00 00 00 | 	byte	$00[16]
2de8a     01 0D 0D 0D 
2de8e     0D 0D 0D 0D 
2de92     0D 0D 0B 01 
2de96     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
2de9a     00 00 00 00 
2de9e     00 00 00 00 
2dea2     00 00 00 00 
2dea6     00 00 00 00 | 	byte	$00[16]
2deaa     01 0D 0D 0D 
2deae     0C 0D 0D 03 
2deb2     01 01 01 01 
2deb6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
2deba     00 00 00 00 
2debe     00 00 00 00 
2dec2     00 00 00 00 
2dec6     00 00 00 00 | 	byte	$00[16]
2deca     01 0D 0D 0C 
2dece     01 09 0D 03 
2ded2     00 00 00 00 
2ded6     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
2deda     00 00 00 00 
2dede     00 00 00 00 
2dee2     00 00 00 00 
2dee6     00 00 00 00 | 	byte	$00[16]
2deea     01 0D 0C 01 
2deee     00 01 0D 0B 
2def2     01 00 00 00 
2def6     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
2defa     00 00 00 00 
2defe     00 00 00 00 
2df02     00 00 00 00 
2df06     00 00 00 00 | 	byte	$00[16]
2df0a     01 0C 01 00 
2df0e     00 01 0A 0D 
2df12     01 00 00 00 
2df16     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
2df1a     00 00 00 00 
2df1e     00 00 00 00 
2df22     00 00 00 00 
2df26     00 00 00 00 | 	byte	$00[16]
2df2a     01 01 00 00 
2df2e     00 00 01 0D 
2df32     0B 01 00 00 
2df36     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
2df3a     00 00 00 00 
2df3e     00 00 00 00 
2df42     00 00 00 00 
2df46     00 00 00 00 
2df4a     00 00 00 00 
2df4e     00 00       | 	byte	$00[22]
2df50     01 0B 0D 01 
2df54     00 00 00 00 
2df58     00 00 00 00 
2df5c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2df60     00 00 00 00 
2df64     00 00 00 00 
2df68     00 00 00 00 
2df6c     00 00 00 00 
2df70     00          | 	byte	$00[17]
2df71     01 01 00 00 
2df75     00 00 00 00 
2df79     00 00 00 00 
2df7d     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2df81     00 00 00 00 
      ...             
2e125     00 00 00 00 
2e129     00          | 	byte	$00[425]
2e12a     73 32 00 04 
2e12e     00 00 10 00 
2e132     00 00 00 00 
2e136     00 00 00 00 | atari2 file "atari2.s2"
2e13a     43 87 43 87 
2e13e     43 87 44 87 
2e142     43 87 44 87 
2e146     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e14a     43 87 43 87 
2e14e     43 87 44 87 
2e152     43 87 43 87 
2e156     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e15a     44 87 43 87 
2e15e     44 87 43 87 
2e162     43 87 43 87 
2e166     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e16a     43 87 43 87 
2e16e     44 87 43 87 
2e172     44 87 44 87 
2e176     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
2e17a     43 87 43 87 
2e17e     44 87 43 87 
2e182     43 87 42 87 
2e186     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e18a     43 87 43 87 
2e18e     43 87 43 87 
2e192     44 87 43 87 
2e196     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e19a     44 87 44 87 
2e19e     43 87 44 87 
2e1a2     43 87 44 87 
2e1a6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e1aa     44 87 43 87 
2e1ae     44 87 44 87 
2e1b2     43 87 43 87 
2e1b6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e1ba     43 87 44 87 
2e1be     44 87 43 87 
2e1c2     43 87 44 87 
2e1c6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e1ca     43 87 43 87 
2e1ce     43 87 43 87 
2e1d2     43 87 43 87 
2e1d6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e1da     42 87 43 87 
2e1de     44 87 42 87 
2e1e2     43 87 43 87 
2e1e6     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e1ea     43 87 44 87 
2e1ee     44 87 43 87 
2e1f2     43 87 43 87 
2e1f6     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e1fa     43 87 5C 87 
2e1fe     EE 86 AC 87 
2e202     4C 7C A3 78 
2e206     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
2e20a     BC 78 BB 78 
2e20e     BD 78 BC 78 
2e212     BB 78 BD 78 
2e216     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
2e21a     BB 78 BB 78 
2e21e     BC 78 BC 78 
2e222     BC 78 BB 78 
2e226     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e22a     BC 78 BC 78 
2e22e     BC 78 BC 78 
2e232     BC 78 BC 78 
2e236     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e23a     BB 78 BC 78 
2e23e     A0 78 4C 7C 
2e242     11 7A 29 89 
2e246     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
2e24a     44 87 43 87 
2e24e     44 87 43 87 
2e252     43 87 42 87 
2e256     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
2e25a     43 87 43 87 
2e25e     44 87 ED 85 
2e262     71 85 52 79 
2e266     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
2e26a     BC 78 BC 78 
2e26e     BC 78 BC 78 
2e272     BC 78 BC 78 
2e276     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e27a     BC 78 BC 78 
2e27e     BC 78 A0 78 
2e282     CF 7A B9 81 
2e286     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
2e28a     44 87 43 87 
2e28e     43 87 44 87 
2e292     43 87 44 87 
2e296     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e29a     43 87 43 87 
2e29e     43 87 43 87 
2e2a2     44 87 43 87 
2e2a6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
2e2aa     43 87 43 87 
2e2ae     44 87 43 87 
2e2b2     44 87 43 87 
2e2b6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e2ba     44 87 43 87 
2e2be     43 87 43 87 
2e2c2     5A 87 39 81 
2e2c6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
2e2ca     A5 78 BC 78 
2e2ce     BB 78 BC 78 
2e2d2     BB 78 BC 78 
2e2d6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
2e2da     BC 78 BC 78 
2e2de     BC 78 BC 78 
2e2e2     BC 78 8F 79 
2e2e6     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
2e2ea     09 85 47 87 
2e2ee     43 87 43 87 
2e2f2     42 87 42 87 
2e2f6     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
2e2fa     43 87 43 87 
2e2fe     43 87 43 87 
2e302     43 87 44 87 
2e306     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e30a     43 87 43 87 
2e30e     44 87 43 87 
2e312     42 87 43 87 
2e316     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
2e31a     44 87 43 87 
2e31e     43 87 43 87 
2e322     44 87 44 87 
2e326     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
2e32a     94 78 55 7A 
2e32e     B9 78 BC 78 
2e332     BC 78 BC 78 
2e336     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e33a     BC 78 BB 78 
2e33e     BC 78 BC 78 
2e342     BC 78 BC 78 
2e346     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e34a     BB 78 BC 78 
2e34e     BC 78 BC 78 
2e352     BB 78 BC 78 
2e356     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e35a     BC 78 BC 78 
2e35e     BD 78 BC 78 
2e362     BC 78 BB 78 
2e366     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
2e36a     94 78 B3 84 
2e36e     36 84 4A 87 
2e372     43 87 43 87 
2e376     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e37a     43 87 44 87 
2e37e     43 87 43 87 
2e382     43 87 43 87 
2e386     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e38a     43 87 44 87 
2e38e     43 87 44 87 
2e392     43 87 43 87 
2e396     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e39a     43 87 43 87 
2e39e     43 87 45 87 
2e3a2     43 87 43 87 
2e3a6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e3aa     43 87 44 87 
2e3ae     44 87 44 87 
2e3b2     43 87 43 87 
2e3b6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
2e3ba     43 87 42 87 
2e3be     43 87 43 87 
2e3c2     44 87 43 87 
2e3c6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e3ca     54 87 3C 82 
2e3ce     36 83 52 79 
2e3d2     C6 78 BC 78 
2e3d6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
2e3da     BB 78 BB 78 
2e3de     BC 78 BC 78 
2e3e2     BC 78 BC 78 
2e3e6     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2e3ea     BD 78 ED 78 
2e3ee     1B 79 F4 83 
2e3f2     4D 83 4E 87 
2e3f6     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
2e3fa     44 87 43 87 
2e3fe     42 87 44 87 
2e402     43 87 42 87 
2e406     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
2e40a     43 87 54 87 
2e40e     26 82 B3 84 
2e412     D6 77 BB 78 
2e416     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
2e41a     BC 78 BB 78 
2e41e     BB 78 BB 78 
2e422     BB 78 BB 78 
2e426     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
2e42a     BC 78 BC 78 
2e42e     26 79 18 75 
2e432     36 83 1F 84 
2e436     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
2e43a     43 87 43 87 
2e43e     43 87 43 87 
2e442     43 87 44 87 
2e446     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e44a     43 87 44 87 
2e44e     44 87 43 87 
2e452     43 87 43 87 
2e456     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
2e45a     43 87 43 87 
2e45e     43 87 43 87 
2e462     44 87 44 87 
2e466     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
2e46a     44 87 43 87 
2e46e     43 87 43 87 
2e472     43 87 44 87 
2e476     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e47a     44 87 44 87 
2e47e     44 87 43 87 
2e482     44 87 43 87 
2e486     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e48a     43 87 43 87 
2e48e     43 87 44 87 
2e492     44 87 43 87 
2e496     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e49a     43 87 43 87 
2e49e     43 87 43 87 
2e4a2     43 87 44 87 
2e4a6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e4aa     43 87 44 87 
2e4ae     43 87 44 87 
2e4b2     19 87 7D 86 
2e4b6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
2e4ba     B1 78 BC 78 
2e4be     BC 78 BC 78 
2e4c2     BC 78 BC 78 
2e4c6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e4ca     BC 78 BC 78 
2e4ce     BD 78 BC 78 
2e4d2     B7 78 3B 7B 
2e4d6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
2e4da     96 86 44 87 
2e4de     43 87 43 87 
2e4e2     43 87 43 87 
2e4e6     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e4ea     44 87 44 87 
2e4ee     43 87 44 87 
2e4f2     43 87 44 87 
2e4f6     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
2e4fa     43 87 44 87 
2e4fe     43 87 44 87 
2e502     43 87 44 87 
2e506     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e50a     43 87 44 87 
2e50e     43 87 43 87 
2e512     44 87 43 87 
2e516     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e51a     44 87 44 87 
2e51e     43 87 43 87 
2e522     43 87 44 87 
2e526     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
2e52a     43 87 43 87 
2e52e     43 87 43 87 
2e532     44 87 44 87 
2e536     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
2e53a     36 83 CF 7A 
2e53e     AB 78 BB 78 
2e542     BC 78 BC 78 
2e546     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
2e54a     BB 78 BC 78 
2e54e     BC 78 BC 78 
2e552     BC 78 BC 78 
2e556     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e55a     BC 78 BC 78 
2e55e     BC 78 BB 78 
2e562     BC 78 BC 78 
2e566     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
2e56a     BB 78 BC 78 
2e56e     BB 78 BC 78 
2e572     BC 78 BD 78 
2e576     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
2e57a     BC 78 BC 78 
2e57e     BC 78 BC 78 
2e582     BC 78 BD 78 
2e586     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
2e58a     BC 78 BB 78 
2e58e     BC 78 BB 78 
2e592     BB 78 BC 78 
2e596     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
2e59a     BC 78 BC 78 
2e59e     BC 78 BC 78 
2e5a2     BC 78 BB 78 
2e5a6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
2e5aa     BC 78 BC 78 
2e5ae     BC 78 BD 78 
2e5b2     BB 78 BC 78 
2e5b6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2e5ba     BC 78 BC 78 
2e5be     BC 78 BB 78 
2e5c2     BC 78 BB 78 
2e5c6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2e5ca     BB 78 BC 78 
2e5ce     BC 78 BC 78 
2e5d2     BC 78 BB 78 
2e5d6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e5da     BC 78 BC 78 
2e5de     BC 78 BB 78 
2e5e2     BC 78 BB 78 
2e5e6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e5ea     BC 78 BC 78 
2e5ee     BC 78 BC 78 
2e5f2     BB 78 BC 78 
2e5f6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2e5fa     BC 78 9F 78 
2e5fe     52 79 B3 84 
2e602     2F 86 60 87 
2e606     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
2e60a     44 87 43 87 
2e60e     43 87 43 87 
2e612     43 87 43 87 
2e616     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e61a     43 87 43 87 
2e61e     43 87 44 87 
2e622     43 87 43 87 
2e626     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e62a     43 87 43 87 
2e62e     43 87 43 87 
2e632     43 87 44 87 
2e636     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e63a     44 87 44 87 
2e63e     5E 87 BC 80 
2e642     FB 80 94 78 
2e646     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
2e64a     BD 78 BC 78 
2e64e     BB 78 BC 78 
2e652     BB 78 BB 78 
2e656     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
2e65a     BC 78 BB 78 
2e65e     BB 78 6B 79 
2e662     D6 77 AC 87 
2e666     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
2e66a     43 87 44 87 
2e66e     43 87 43 87 
2e672     44 87 43 87 
2e676     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
2e67a     43 87 44 87 
2e67e     43 87 5C 87 
2e682     E7 80 00 80 
2e686     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
2e68a     BC 78 BD 78 
2e68e     BC 78 BC 78 
2e692     BC 78 BB 78 
2e696     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e69a     BC 78 BC 78 
2e69e     BB 78 BC 78 
2e6a2     BB 78 BC 78 
2e6a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e6aa     BB 78 BC 78 
2e6ae     BC 78 BC 78 
2e6b2     BC 78 BC 78 
2e6b6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2e6ba     BC 78 BC 78 
2e6be     BC 78 BC 78 
2e6c2     A0 78 8D 7B 
2e6c6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
2e6ca     60 87 43 87 
2e6ce     44 87 44 87 
2e6d2     43 87 43 87 
2e6d6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
2e6da     44 87 43 87 
2e6de     43 87 43 87 
2e6e2     44 87 73 86 
2e6e6     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
2e6ea     51 7B B6 78 
2e6ee     BC 78 BD 78 
2e6f2     BC 78 BC 78 
2e6f6     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2e6fa     BB 78 BC 78 
2e6fe     BD 78 BB 78 
2e702     BC 78 BB 78 
2e706     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2e70a     BC 78 BC 78 
2e70e     BC 78 BC 78 
2e712     BB 78 BC 78 
2e716     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e71a     BC 78 BB 78 
2e71e     BB 78 BC 78 
2e722     BC 78 BB 78 
2e726     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
2e72a     22 8C AF 84 
2e72e     48 87 43 87 
2e732     44 87 43 87 
2e736     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
2e73a     43 87 42 87 
2e73e     43 87 43 87 
2e742     44 87 43 87 
2e746     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e74a     43 87 43 87 
2e74e     44 87 44 87 
2e752     43 87 43 87 
2e756     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
2e75a     43 87 43 87 
2e75e     43 87 43 87 
2e762     44 87 43 87 
2e766     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
2e76a     9F 8B D6 77 
2e76e     16 7C B3 78 
2e772     BC 78 BB 78 
2e776     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
2e77a     BB 78 BC 78 
2e77e     BB 78 BC 78 
2e782     BC 78 BC 78 
2e786     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e78a     BC 78 BB 78 
2e78e     BB 78 BC 78 
2e792     BB 78 BC 78 
2e796     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
2e79a     BB 78 BB 78 
2e79e     BC 78 BC 78 
2e7a2     BC 78 BB 78 
2e7a6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
2e7aa     BC 78 BC 78 
2e7ae     BC 78 BD 78 
2e7b2     BB 78 BC 78 
2e7b6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
2e7ba     BC 78 BC 78 
2e7be     BC 78 BB 78 
2e7c2     BC 78 BC 78 
2e7c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e7ca     A8 78 54 7E 
2e7ce     F4 83 17 82 
2e7d2     50 87 43 87 
2e7d6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
2e7da     44 87 43 87 
2e7de     44 87 43 87 
2e7e2     43 87 44 87 
2e7e6     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
2e7ea     43 87 28 87 
2e7ee     20 85 CF 7A 
2e7f2     70 7D AD 78 
2e7f6     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
2e7fa     BB 78 BC 78 
2e7fe     BC 78 BC 78 
2e802     BB 78 BB 78 
2e806     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
2e80a     BB 78 B2 78 
2e80e     9A 7C CF 7A 
2e812     4A 87 0D 87 
2e816     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
2e81a     43 87 44 87 
2e81e     43 87 44 87 
2e822     43 87 43 87 
2e826     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
2e82a     44 87 43 87 
2e82e     28 87 51 85 
2e832     11 7A 1E 7D 
2e836     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
2e83a     BC 78 BB 78 
2e83e     BC 78 BC 78 
2e842     BC 78 BC 78 
2e846     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
2e84a     BB 78 BC 78 
2e84e     BB 78 BC 78 
2e852     BC 78 BC 78 
2e856     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
2e85a     BB 78 BC 78 
2e85e     BC 78 BC 78 
2e862     BD 78 BB 78 
2e866     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
2e86a     BC 78 BB 78 
2e86e     BC 78 BC 78 
2e872     BC 78 BB 78 
2e876     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e87a     BC 78 BC 78 
2e87e     BC 78 BC 78 
2e882     BB 78 BC 78 
2e886     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e88a     BC 78 BD 78 
2e88e     BC 78 BC 78 
2e892     BC 78 BB 78 
2e896     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e89a     BC 78 BB 78 
2e89e     BB 78 BC 78 
2e8a2     BC 78 BB 78 
2e8a6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e8aa     BB 78 BB 78 
2e8ae     BB 78 BC 78 
2e8b2     B6 78 48 7D 
2e8b6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
2e8ba     56 87 43 87 
2e8be     42 87 44 87 
2e8c2     44 87 43 87 
2e8c6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
2e8ca     43 87 44 87 
2e8ce     43 87 44 87 
2e8d2     4C 87 7E 83 
2e8d6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
2e8da     F7 78 BC 78 
2e8de     BC 78 BB 78 
2e8e2     BB 78 BC 78 
2e8e6     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
2e8ea     BC 78 BB 78 
2e8ee     BC 78 BC 78 
2e8f2     BB 78 BC 78 
2e8f6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
2e8fa     BB 78 BC 78 
2e8fe     BC 78 BC 78 
2e902     BC 78 BB 78 
2e906     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e90a     BC 78 BC 78 
2e90e     BC 78 BC 78 
2e912     BC 78 BB 78 
2e916     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e91a     BC 78 BB 78 
2e91e     BB 78 BC 78 
2e922     BC 78 BB 78 
2e926     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
2e92a     BC 78 BC 78 
2e92e     BB 78 BC 78 
2e932     BC 78 BC 78 
2e936     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
2e93a     73 32 00 04 
2e93e     00 00 10 00 
2e942     00 00 00 00 
2e946     00 00 00 00 | atari12 file "atari12.s2"
2e94a     00 6D 00 6D 
2e94e     00 6D 00 6D 
2e952     00 6D 00 6D 
2e956     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2e95a     00 6D 00 6D 
2e95e     00 6D 00 6D 
2e962     00 6D 00 6D 
2e966     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2e96a     00 6D 00 6D 
2e96e     00 6D 00 6D 
2e972     00 6D 00 6D 
2e976     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2e97a     00 6D 00 6D 
2e97e     00 6D 00 6D 
2e982     00 6D 00 6D 
2e986     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2e98a     00 6D 00 6D 
2e98e     00 6D 00 6D 
2e992     00 6D 00 6D 
2e996     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
2e99a     00 6C 00 6C 
2e99e     00 6C 00 6C 
2e9a2     00 6C 00 6C 
2e9a6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2e9aa     00 6C 00 6C 
2e9ae     00 6C 00 6C 
2e9b2     00 6C 00 6C 
2e9b6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2e9ba     00 6C 00 6C 
2e9be     00 6C 00 6C 
2e9c2     00 6C 00 6C 
2e9c6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2e9ca     00 6C 00 6C 
2e9ce     00 6C 00 6C 
2e9d2     00 6C 00 6C 
2e9d6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2e9da     00 6C 00 6C 
2e9de     00 6C 00 6C 
2e9e2     00 6C 00 6C 
2e9e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2e9ea     00 6C 00 6C 
2e9ee     00 6C 00 6C 
2e9f2     00 6C 00 6C 
2e9f6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2e9fa     00 6C 00 6C 
2e9fe     00 6C 00 6C 
2ea02     00 6C 00 6C 
2ea06     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ea0a     00 6C 00 6C 
2ea0e     00 6C 00 6C 
2ea12     00 6C 00 6C 
2ea16     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ea1a     00 6C 00 6C 
2ea1e     00 6C 00 6C 
2ea22     00 6C 00 6C 
2ea26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ea2a     00 6C 00 6C 
2ea2e     00 6C 00 6C 
2ea32     00 6C 00 6C 
2ea36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ea3a     00 6C 00 6C 
2ea3e     00 6C 00 6C 
2ea42     00 6C 00 6C 
2ea46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2ea4a     00 6C 00 6B 
2ea4e     00 6B 00 6B 
2ea52     00 6B 00 6B 
2ea56     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ea5a     00 6B 00 6B 
2ea5e     00 6B 00 6B 
2ea62     00 6B 00 6B 
2ea66     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ea6a     00 6B 00 6B 
2ea6e     00 6B 00 6B 
2ea72     00 6B 00 6B 
2ea76     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ea7a     00 6B 00 6B 
2ea7e     00 6B 00 6B 
2ea82     00 6B 00 6B 
2ea86     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ea8a     00 6B 00 6B 
2ea8e     00 6B 00 6B 
2ea92     00 6B 00 6B 
2ea96     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2ea9a     00 6B 00 6B 
2ea9e     00 6B 00 6B 
2eaa2     00 6B 00 6B 
2eaa6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2eaaa     00 6B 00 6B 
2eaae     00 6B 00 6B 
2eab2     00 6B 00 6B 
2eab6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2eaba     00 6B 00 6B 
2eabe     00 6B 00 6B 
2eac2     00 6B 00 6B 
2eac6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2eaca     00 6B 00 6B 
2eace     00 6B 00 6B 
2ead2     00 6B 00 6B 
2ead6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
2eada     00 6B 00 6B 
2eade     00 6B 00 6B 
2eae2     00 6A 00 9D 
2eae6     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
2eaea     00 9E 00 9E 
2eaee     00 9E 00 9E 
2eaf2     00 9E 00 9E 
2eaf6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eafa     00 9E 00 9E 
2eafe     00 9E 00 9E 
2eb02     00 9E 00 9E 
2eb06     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eb0a     00 9E 00 9E 
2eb0e     00 9E 00 9E 
2eb12     00 9E 00 9E 
2eb16     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eb1a     00 9E 00 9E 
2eb1e     00 9E 00 9E 
2eb22     00 9E 00 9E 
2eb26     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eb2a     00 9E 00 9E 
2eb2e     00 9E 00 9E 
2eb32     00 9E 00 9E 
2eb36     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eb3a     00 9E 00 9E 
2eb3e     00 9E 00 9E 
2eb42     00 9E 00 9E 
2eb46     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eb4a     00 9E 00 9E 
2eb4e     00 9E 00 9E 
2eb52     00 9E 00 9E 
2eb56     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eb5a     00 9E 00 9E 
2eb5e     00 9E 00 9E 
2eb62     00 9E 00 9E 
2eb66     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
2eb6a     00 9E 00 9E 
2eb6e     00 9E 00 9E 
2eb72     00 9E 00 9E 
2eb76     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
2eb7a     00 9F 00 9F 
2eb7e     00 9F 00 9F 
2eb82     00 9F 00 9F 
2eb86     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2eb8a     00 9F 00 9F 
2eb8e     00 9F 00 9F 
2eb92     00 9F 00 9F 
2eb96     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2eb9a     00 9F 00 9F 
2eb9e     00 9F 00 9F 
2eba2     00 9F 00 9F 
2eba6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ebaa     00 9F 00 9F 
2ebae     00 9F 00 9F 
2ebb2     00 9F 00 9F 
2ebb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ebba     00 9F 00 9F 
2ebbe     00 9F 00 9F 
2ebc2     00 9F 00 9F 
2ebc6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ebca     00 9F 00 9F 
2ebce     00 9F 00 9F 
2ebd2     00 9F 00 9F 
2ebd6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ebda     00 9F 00 9F 
2ebde     00 9F 00 9F 
2ebe2     00 9F 00 9F 
2ebe6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ebea     00 9F 00 9F 
2ebee     00 9F 00 9F 
2ebf2     00 9F 00 9F 
2ebf6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ebfa     00 9F 00 9F 
2ebfe     00 9F 00 9F 
2ec02     00 9F 00 9F 
2ec06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ec0a     00 9F 00 9F 
2ec0e     00 9F 00 9F 
2ec12     00 9F 00 9F 
2ec16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ec1a     00 9F 00 9F 
2ec1e     00 9F 00 9F 
2ec22     00 9F 00 9F 
2ec26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ec2a     00 9F 00 9F 
2ec2e     00 9F 00 9F 
2ec32     00 9F 00 9F 
2ec36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
2ec3a     00 9F 00 9F 
2ec3e     00 9F 00 A0 
2ec42     00 A0 00 A0 
2ec46     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ec4a     00 A0 00 A0 
2ec4e     00 A0 00 A0 
2ec52     00 A0 00 A0 
2ec56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ec5a     00 A0 00 A0 
2ec5e     00 A0 00 A0 
2ec62     00 A0 00 A0 
2ec66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ec6a     00 A0 00 A0 
2ec6e     00 A0 00 A0 
2ec72     00 A0 00 A0 
2ec76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ec7a     00 A0 00 A0 
2ec7e     00 A0 00 A0 
2ec82     00 A0 00 A0 
2ec86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ec8a     00 A0 00 A0 
2ec8e     00 A0 00 A0 
2ec92     00 A0 00 A0 
2ec96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ec9a     00 A0 00 A0 
2ec9e     00 A0 00 A0 
2eca2     00 A0 00 A0 
2eca6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ecaa     00 A0 00 A0 
2ecae     00 A0 00 A0 
2ecb2     00 A0 00 A0 
2ecb6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ecba     00 A0 00 A0 
2ecbe     00 A0 00 A0 
2ecc2     00 A0 00 A0 
2ecc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ecca     00 A0 00 A0 
2ecce     00 A0 00 A0 
2ecd2     00 A0 00 A0 
2ecd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ecda     00 A0 00 A0 
2ecde     00 A0 00 A0 
2ece2     00 A0 00 A0 
2ece6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ecea     00 A0 00 A0 
2ecee     00 A0 00 A0 
2ecf2     00 A0 00 A0 
2ecf6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ecfa     00 A0 00 A0 
2ecfe     00 A0 00 A0 
2ed02     00 A0 00 A0 
2ed06     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
2ed0a     00 6D 00 6D 
2ed0e     00 6D 00 6D 
2ed12     00 6D 00 6D 
2ed16     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed1a     00 6D 00 6D 
2ed1e     00 6D 00 6D 
2ed22     00 6D 00 6D 
2ed26     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed2a     00 6D 00 6D 
2ed2e     00 6D 00 6D 
2ed32     00 6D 00 6D 
2ed36     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed3a     00 6D 00 6D 
2ed3e     00 6D 00 6D 
2ed42     00 6D 00 6D 
2ed46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed4a     00 6D 00 6D 
2ed4e     00 6D 00 6D 
2ed52     00 6D 00 6D 
2ed56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed5a     00 6D 00 6D 
2ed5e     00 6D 00 6D 
2ed62     00 6D 00 6D 
2ed66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed6a     00 6D 00 6D 
2ed6e     00 6D 00 6D 
2ed72     00 6D 00 6D 
2ed76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed7a     00 6D 00 6D 
2ed7e     00 6D 00 6D 
2ed82     00 6D 00 6D 
2ed86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ed8a     00 6D 00 6D 
2ed8e     00 A0 00 A0 
2ed92     00 A0 00 A0 
2ed96     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ed9a     00 A0 00 A0 
2ed9e     00 A0 00 A0 
2eda2     00 A0 00 A0 
2eda6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2edaa     00 A0 00 A0 
2edae     00 A0 00 A0 
2edb2     00 A0 00 A0 
2edb6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2edba     00 A0 00 A0 
2edbe     00 A0 00 A0 
2edc2     00 A0 00 A0 
2edc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2edca     00 A0 00 A0 
2edce     00 A0 00 A0 
2edd2     00 A0 00 A0 
2edd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2edda     00 A0 00 A0 
2edde     00 A0 00 A0 
2ede2     00 A0 00 A0 
2ede6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2edea     00 A0 00 A0 
2edee     00 A0 00 A0 
2edf2     00 A0 00 A0 
2edf6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2edfa     00 A0 00 A0 
2edfe     00 A0 00 A0 
2ee02     00 A0 00 A0 
2ee06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ee0a     00 A0 00 A0 
2ee0e     00 A0 00 A0 
2ee12     00 A0 00 A0 
2ee16     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
2ee1a     00 6D 00 6D 
2ee1e     00 6D 00 6D 
2ee22     00 6D 00 6D 
2ee26     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee2a     00 6D 00 6D 
2ee2e     00 6D 00 6D 
2ee32     00 6D 00 6D 
2ee36     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee3a     00 6D 00 6D 
2ee3e     00 6D 00 6D 
2ee42     00 6D 00 6D 
2ee46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee4a     00 6D 00 6D 
2ee4e     00 6D 00 6D 
2ee52     00 6D 00 6D 
2ee56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee5a     00 6D 00 6D 
2ee5e     00 6D 00 6D 
2ee62     00 6D 00 6D 
2ee66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee6a     00 6D 00 6D 
2ee6e     00 6D 00 6D 
2ee72     00 6D 00 6D 
2ee76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee7a     00 6D 00 6D 
2ee7e     00 6D 00 6D 
2ee82     00 6D 00 6D 
2ee86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee8a     00 6D 00 6D 
2ee8e     00 6D 00 6D 
2ee92     00 6D 00 6D 
2ee96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2ee9a     00 6D 00 6D 
2ee9e     00 6C 00 A0 
2eea2     00 9F 00 A0 
2eea6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
2eeaa     00 A0 00 A0 
2eeae     00 A0 00 A0 
2eeb2     00 A0 00 A0 
2eeb6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2eeba     00 A0 00 A0 
2eebe     00 A0 00 A0 
2eec2     00 A0 00 A0 
2eec6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2eeca     00 A0 00 A0 
2eece     00 A0 00 A0 
2eed2     00 A0 00 A0 
2eed6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2eeda     00 A0 00 A0 
2eede     00 A0 00 A0 
2eee2     00 A0 00 A0 
2eee6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2eeea     00 A0 00 A0 
2eeee     00 A0 00 A0 
2eef2     00 A0 00 A0 
2eef6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2eefa     00 A0 00 A0 
2eefe     00 A0 00 A0 
2ef02     00 A0 00 A0 
2ef06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ef0a     00 A0 00 A0 
2ef0e     00 A0 00 A0 
2ef12     00 A0 00 A0 
2ef16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ef1a     00 A0 00 A0 
2ef1e     00 A0 00 A0 
2ef22     00 A0 00 A0 
2ef26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ef2a     00 A0 00 A0 
2ef2e     00 A0 00 A0 
2ef32     00 A0 00 A0 
2ef36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ef3a     00 A0 00 A0 
2ef3e     00 A0 00 A0 
2ef42     00 A0 00 A0 
2ef46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2ef4a     00 A0 00 A0 
2ef4e     00 A0 00 A0 
2ef52     00 A0 00 A0 
2ef56     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
2ef5a     00 A1 00 A1 
2ef5e     00 A1 00 A1 
2ef62     00 A1 00 A1 
2ef66     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2ef6a     00 A1 00 A1 
2ef6e     00 A1 00 A1 
2ef72     00 A1 00 A1 
2ef76     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2ef7a     00 A1 00 A1 
2ef7e     00 A1 00 A1 
2ef82     00 A1 00 A1 
2ef86     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2ef8a     00 A1 00 A1 
2ef8e     00 A1 00 A1 
2ef92     00 A1 00 A1 
2ef96     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2ef9a     00 A1 00 A1 
2ef9e     00 A1 00 A1 
2efa2     00 A1 00 A1 
2efa6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
2efaa     00 A1 00 A1 
2efae     00 A1 00 A1 
2efb2     00 6E 00 6E 
2efb6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2efba     00 6E 00 6E 
2efbe     00 6E 00 6E 
2efc2     00 6E 00 6E 
2efc6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2efca     00 6E 00 6E 
2efce     00 6E 00 6E 
2efd2     00 6E 00 6E 
2efd6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2efda     00 6E 00 6E 
2efde     00 6E 00 6E 
2efe2     00 6E 00 6E 
2efe6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
2efea     00 6E 00 6D 
2efee     00 6D 00 6D 
2eff2     00 6D 00 6D 
2eff6     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2effa     00 6D 00 6D 
2effe     00 6D 00 6D 
2f002     00 6D 00 6D 
2f006     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f00a     00 6D 00 6D 
2f00e     00 6D 00 6D 
2f012     00 6D 00 6D 
2f016     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f01a     00 6D 00 6D 
2f01e     00 6D 00 6D 
2f022     00 6D 00 6D 
2f026     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f02a     00 6D 00 6D 
2f02e     00 6D 00 6D 
2f032     00 6D 00 6D 
2f036     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f03a     00 6D 00 6D 
2f03e     00 6D 00 6D 
2f042     00 6D 00 6D 
2f046     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f04a     00 6D 00 6D 
2f04e     00 6D 00 6D 
2f052     00 6D 00 6D 
2f056     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f05a     00 6D 00 6D 
2f05e     00 6D 00 6D 
2f062     00 6D 00 6D 
2f066     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f06a     00 6D 00 6D 
2f06e     00 6D 00 6D 
2f072     00 6D 00 6D 
2f076     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f07a     00 6D 00 6D 
2f07e     00 6D 00 6D 
2f082     00 6D 00 6D 
2f086     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f08a     00 6D 00 6D 
2f08e     00 6D 00 6D 
2f092     00 6D 00 6D 
2f096     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
2f09a     00 6D 00 6D 
2f09e     00 6C 00 6C 
2f0a2     00 6C 00 6C 
2f0a6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f0aa     00 6C 00 6C 
2f0ae     00 6C 00 6C 
2f0b2     00 6C 00 6C 
2f0b6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
2f0ba     00 6C 00 6C 
2f0be     00 6C 00 6C 
2f0c2     00 9D 00 9F 
2f0c6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
2f0ca     00 9F 00 9F 
2f0ce     00 9F 00 9F 
2f0d2     00 A0 00 A0 
2f0d6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f0da     00 A0 00 A0 
2f0de     00 A0 00 A0 
2f0e2     00 A0 00 A0 
2f0e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f0ea     00 A0 00 A0 
2f0ee     00 A0 00 A0 
2f0f2     00 A0 00 A0 
2f0f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f0fa     00 A0 00 A0 
2f0fe     00 A0 00 A0 
2f102     00 A0 00 A0 
2f106     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f10a     00 A0 00 A0 
2f10e     00 A0 00 A0 
2f112     00 A0 00 A0 
2f116     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f11a     00 A0 00 A0 
2f11e     00 A0 00 A0 
2f122     00 A0 00 A0 
2f126     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f12a     00 A0 00 A0 
2f12e     00 A0 00 A0 
2f132     00 A0 00 A0 
2f136     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f13a     00 A0 00 A0 
2f13e     00 A0 00 A0 
2f142     00 A0 00 A0 
2f146     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
2f14a                 | 
2f14a     00 00       |              	org
2f14c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
2f150 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
2f154 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
2f158 003             | 
2f158 003 00 30 04 F6 |                 mov     psramaddr,#0
2f15c 004             | 
2f15c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
2f160 005 20 00 00 FF 
2f164 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
2f168 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
2f16c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
2f170 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
2f174 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
2f178 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
2f17c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
2f180 00d             | 
2f180 00d 20 00 00 FF 
2f184 00e 00 30 04 F1 |                 add 	psramaddr,##16384
2f188 00f E0 03 00 FF 
2f18c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
2f190 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
2f194 012             | 
2f194 012             |                 
2f194 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
2f198 013             |     
2f198 013 01 2C 60 FD |                 cogid 	t11				' get id
2f19c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
2f1a0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
2f1a4 016             | 
2f1a4 016 00 00 00 00 | t11 		long 	0
2f1a8 017 00 FF 07 00 | mailbox 	long 	$7FF00
2f1ac 018 00 00 00 00 | psramaddr 	long 	0
2f1b0 019 00 00 00 00 | pslockval	long 	0
2f1b4 01a 00 00 00 00 | cmd             long    0
2f1b8 01b 00 00 00 00 | buf1            long    0
2f1bc 01c 00 40 00 00 | buf2            long    16384
2f1c0 01d C4 F1 02 00 | 	long	@@@_dat_ + 12624
2f1c4 01e 50 32 20 52 
2f1c8 01f 65 74 72 6F 
2f1cc 020 6D 61 63 68 
2f1d0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
2f1d4 022 42 41 53 49 
2f1d8 023 43 20 76 65 
2f1dc 024 72 73 69 6F 
2f1e0 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
2f1e4 026 32 36 00 00 | 	byte	$32, $36, $00, $00
2f1e8 027             | 	alignl
2f1e8 027             | _hg010b_spin2_dat_
2f1e8 027             | 
2f1e8 027 00 00 00 00 
2f1ec 028 00 00 00 00 
2f1f0 029 00 00 00 00 
2f1f4 02a 00 00 00 00 
2f1f8 02b 00 00 00    | vga_font       file "vgafont.def"
2f1fb 02b 7E 81 A5 81 
2f1ff 02c 81 BD 99 81 
2f203 02d 81 7E 00 00 
2f207 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
2f20b 02f 7E FF DB FF 
2f20f 030 FF C3 E7 FF 
2f213 031 FF 7E 00 00 
2f217 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
2f21b 033 00 36 7F 7F 
2f21f 034 7F 7F 3E 1C 
2f223 035 08 00 00 00 
2f227 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
2f22b 037 00 08 1C 3E 
2f22f 038 7F 3E 1C 08 
2f233 039 00 00 00 00 
2f237 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
2f23b 03b 18 3C 3C E7 
2f23f 03c E7 E7 18 18 
2f243 03d 3C 00 00 00 
2f247 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f24b 03f 18 3C 7E FF 
2f24f 040 FF 7E 18 18 
2f253 041 3C 00 00 00 
2f257 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
2f25b 043 00 00 00 18 
2f25f 044 3C 3C 18 00 
2f263 045 00 00 00 00 
2f267 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f26b 047 FF FF FF E7 
2f26f 048 C3 C3 E7 FF 
2f273 049 FF FF FF FF 
2f277 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f27b 04b 00 00 3C 66 
2f27f 04c 42 42 66 3C 
2f283 04d 00 00 00 00 
2f287 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
2f28b 04f FF FF C3 99 
2f28f 050 BD BD 99 C3 
2f293 051 FF FF FF FF 
2f297 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
2f29b 053 78 70 58 4C 
2f29f 054 1E 33 33 33 
2f2a3 055 33 1E 00 00 
2f2a7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
2f2ab 057 3C 66 66 66 
2f2af 058 66 3C 18 7E 
2f2b3 059 18 18 00 00 
2f2b7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
2f2bb 05b FC CC FC 0C 
2f2bf 05c 0C 0C 0C 0E 
2f2c3 05d 0F 07 00 00 
2f2c7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
2f2cb 05f FE C6 FE C6 
2f2cf 060 C6 C6 C6 E6 
2f2d3 061 E7 67 03 00 
2f2d7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
2f2db 063 18 18 DB 3C 
2f2df 064 E7 3C DB 18 
2f2e3 065 18 00 00 00 
2f2e7 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
2f2eb 067 03 07 0F 1F 
2f2ef 068 7F 1F 0F 07 
2f2f3 069 03 01 00 00 
2f2f7 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
2f2fb 06b 60 70 78 7C 
2f2ff 06c 7F 7C 78 70 
2f303 06d 60 40 00 00 
2f307 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
2f30b 06f 18 3C 7E 18 
2f30f 070 18 18 7E 3C 
2f313 071 18 00 00 00 
2f317 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
2f31b 073 66 66 66 66 
2f31f 074 66 66 66    | 	byte	$66[7]
2f322 075 00 66 66 00 
2f326 076 00 00 00 00 
2f32a 077 00 FE DB DB 
2f32e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2f332 079 D8 D8 D8 00 
2f336 07a 00 00 00 3E 
2f33a 07b 63 06 1C 36 
2f33e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2f342 07d 30 63 3E 00 
2f346 07e 00 00 00 00 
2f34a 07f 00 00 00 00 
2f34e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2f352 081 7F 7F 7F 00 
2f356 082 00 00 00 00 
2f35a 083 00 18 3C 7E 
2f35e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2f362 085 3C 18 7E 00 
2f366 086 00 00 00 00 
2f36a 087 00 18 3C 7E 
2f36e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2f372 089 18 18 18 00 
2f376 08a 00 00 00 00 
2f37a 08b 00 18 18 18 
2f37e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2f382 08d 7E 3C 18 00 
2f386 08e 00 00 00 00 
2f38a 08f 00 00 00 18 
2f38e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2f392 091 00 00 00 00 
2f396 092 00 00 00 00 
2f39a 093 00 00 00    | 	byte	$00[11]
2f39d 094 0C 06 7F 06 
2f3a1 095 0C 00 00 00 
2f3a5 096 00 00 00 00 
2f3a9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f3ad 098 00 03 03 03 
2f3b1 099 7F 00 00 00 
2f3b5 09a 00 00 00 00 
2f3b9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f3bd 09c 14 36 7F 36 
2f3c1 09d 14 00 00 00 
2f3c5 09e 00 00 00 00 
2f3c9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
2f3cd 0a0 1C 1C 3E 3E 
2f3d1 0a1 7F 7F 00 00 
2f3d5 0a2 00 00 00 00 
2f3d9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2f3dd 0a4 7F 3E 3E 1C 
2f3e1 0a5 1C 08 00 00 
2f3e5 0a6 00 00 00 00 
2f3e9 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f3ed 0a8 00 00 00 00 
2f3f1 0a9 00 00 00 00 
2f3f5 0aa 00 00 00 00 
2f3f9 0ab 00 00       | 	byte	$00[14]
2f3fb 0ab 18 3C 3C 3C 
2f3ff 0ac 18 18 18 00 
2f403 0ad 18 18 00 00 
2f407 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2f40b 0af 66 24 00 00 
2f40f 0b0 00 00 00 00 
2f413 0b1 00 00 00 00 
2f417 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f41b 0b3 00 36 36 7F 
2f41f 0b4 36 36 36 7F 
2f423 0b5 36 36 00 00 
2f427 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2f42b 0b7 3E 63 43 03 
2f42f 0b8 3E 60 60 61 
2f433 0b9 63 3E 18 18 
2f437 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2f43b 0bb 00 00 43 63 
2f43f 0bc 30 18 0C 06 
2f443 0bd 63 61 00 00 
2f447 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
2f44b 0bf 1C 36 36 1C 
2f44f 0c0 6E 3B 33 33 
2f453 0c1 33 6E 00 00 
2f457 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
2f45b 0c3 0C 0C 0C 06 
2f45f 0c4 00 00 00 00 
2f463 0c5 00 00 00 00 
2f467 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f46b 0c7 30 18 0C 0C 
2f46f 0c8 0C 0C 0C 0C 
2f473 0c9 18 30 00 00 
2f477 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
2f47b 0cb 0C 18 30 30 
2f47f 0cc 30 30 30 30 
2f483 0cd 18 0C 00 00 
2f487 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
2f48b 0cf 00 00 00 66 
2f48f 0d0 3C FF 3C 66 
2f493 0d1 00 00 00 00 
2f497 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
2f49b 0d3 00 00 00 18 
2f49f 0d4 18 7E 18 18 
2f4a3 0d5 00 00 00 00 
2f4a7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2f4ab 0d7 00 00 00 00 
2f4af 0d8 00 00 00 00 | 	byte	$00[8]
2f4b3 0d9 18 18 18 0C 
2f4b7 0da 00 00 00 00 
2f4bb 0db 00 00 00 00 
2f4bf 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
2f4c3 0dd 00 00 00 00 
2f4c7 0de 00 00 00 00 
2f4cb 0df 00 00 00 00 
2f4cf 0e0 00 00 00 00 | 	byte	$00[16]
2f4d3 0e1 18 18 00 00 
2f4d7 0e2 00 00 00 00 
2f4db 0e3 00 00 40 60 
2f4df 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
2f4e3 0e5 03 01 00 00 
2f4e7 0e6 00 00 00 00 
2f4eb 0e7 1C 36 63 63 
2f4ef 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
2f4f3 0e9 36 1C 00 00 
2f4f7 0ea 00 00 00 00 
2f4fb 0eb 18 1C 1E 18 
2f4ff 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
2f503 0ed 18 7E 00 00 
2f507 0ee 00 00 00 00 
2f50b 0ef 3E 63 60 30 
2f50f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
2f513 0f1 63 7F 00 00 
2f517 0f2 00 00 00 00 
2f51b 0f3 3E 63 60 60 
2f51f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2f523 0f5 63 3E 00 00 
2f527 0f6 00 00 00 00 
2f52b 0f7 30 38 3C 36 
2f52f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2f533 0f9 30 78 00 00 
2f537 0fa 00 00 00 00 
2f53b 0fb 7F 03 03 03 
2f53f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2f543 0fd 63 3E 00 00 
2f547 0fe 00 00 00 00 
2f54b 0ff 1C 06 03 03 
2f54f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2f553 101 63 3E 00 00 
2f557 102 00 00 00 00 
2f55b 103 7F 63 60 60 
2f55f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2f563 105 0C 0C 00 00 
2f567 106 00 00 00 00 
2f56b 107 3E 63 63 63 
2f56f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2f573 109 63 3E 00 00 
2f577 10a 00 00 00 00 
2f57b 10b 3E 63 63 63 
2f57f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2f583 10d 30 1E 00 00 
2f587 10e 00 00 00 00 
2f58b 10f 00 00 00 18 
2f58f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2f593 111 18 18 00 00 
2f597 112 00 00 00 00 
2f59b 113 00 00 00 18 
2f59f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2f5a3 115 18 18 0C 00 
2f5a7 116 00 00 00 00 
2f5ab 117 00 60 30 18 
2f5af 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2f5b3 119 30 60 00 00 
2f5b7 11a 00 00 00 00 
2f5bb 11b 00 00 00 7E 
2f5bf 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
2f5c3 11d 00 00 00 00 
2f5c7 11e 00 00 00 00 
2f5cb 11f 00          | 	byte	$00[9]
2f5cc 120 06 0C 18 30 
2f5d0 121 60 30 18 0C 
2f5d4 122 06 00 00 00 
2f5d8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
2f5dc 124 63 63 30 18 
2f5e0 125 18 18 00 18 
2f5e4 126 18 00 00 00 
2f5e8 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
2f5ec 128 3E 63 63 7B 
2f5f0 129 7B 7B 3B 03 
2f5f4 12a 3E 00 00 00 
2f5f8 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
2f5fc 12c 1C 36 63 63 
2f600 12d 7F 63 63 63 
2f604 12e 63 00 00 00 
2f608 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
2f60c 130 66 66 66 3E 
2f610 131 66 66 66 66 
2f614 132 3F 00 00 00 
2f618 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
2f61c 134 66 43 03 03 
2f620 135 03 03 43 66 
2f624 136 3C 00 00 00 
2f628 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
2f62c 138 36 66 66 66 
2f630 139 66 66 66 36 
2f634 13a 1F 00 00 00 
2f638 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
2f63c 13c 66 46 16 1E 
2f640 13d 16 06 46 66 
2f644 13e 7F 00 00 00 
2f648 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
2f64c 140 66 46 16 1E 
2f650 141 16 06 06 06 
2f654 142 0F 00 00 00 
2f658 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
2f65c 144 66 43 03 03 
2f660 145 7B 63 63 66 
2f664 146 5C 00 00 00 
2f668 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
2f66c 148 63 63 63 7F 
2f670 149 63 63 63 63 
2f674 14a 63 00 00 00 
2f678 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
2f67c 14c 18 18 18 18 
2f680 14d 18 18 18 18 | 	byte	$18[8]
2f684 14e 3C 00 00 00 
2f688 14f 00 00 00 78 
2f68c 150 30 30 30 30 
2f690 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2f694 152 1E 00 00 00 
2f698 153 00 00 00 67 
2f69c 154 66 66 36 1E 
2f6a0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2f6a4 156 67 00 00 00 
2f6a8 157 00 00 00 0F 
2f6ac 158 06 06 06 06 
2f6b0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2f6b4 15a 7F 00 00 00 
2f6b8 15b 00 00 00 63 
2f6bc 15c 77 7F 7F 6B 
2f6c0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
2f6c4 15e 63 00 00 00 
2f6c8 15f 00 00 00 63 
2f6cc 160 67 6F 7F 7B 
2f6d0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
2f6d4 162 63 00 00 00 
2f6d8 163 00 00 00 3E 
2f6dc 164 63 63 63 63 
2f6e0 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2f6e4 166 3E 00 00 00 
2f6e8 167 00 00 00 3F 
2f6ec 168 66 66 66 3E 
2f6f0 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
2f6f4 16a 0F 00 00 00 
2f6f8 16b 00 00 00 3E 
2f6fc 16c 63 63 63 63 
2f700 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
2f704 16e 3E 30 70 00 
2f708 16f 00 00 00 3F 
2f70c 170 66 66 66 3E 
2f710 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
2f714 172 67 00 00 00 
2f718 173 00 00 00 3E 
2f71c 174 63 63 06 1C 
2f720 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2f724 176 3E 00 00 00 
2f728 177 00 00 00 7E 
2f72c 178 7E 5A 18 18 
2f730 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2f734 17a 3C 00 00 00 
2f738 17b 00 00 00 63 
2f73c 17c 63 63 63 63 
2f740 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2f744 17e 3E 00 00 00 
2f748 17f 00 00 00 63 
2f74c 180 63 63 63 63 
2f750 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2f754 182 08 00 00 00 
2f758 183 00 00 00 63 
2f75c 184 63 63 63 6B 
2f760 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2f764 186 36 00 00 00 
2f768 187 00 00 00 63 
2f76c 188 63 36 3E 1C 
2f770 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2f774 18a 63 00 00 00 
2f778 18b 00 00 00 66 
2f77c 18c 66 66 66 3C 
2f780 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2f784 18e 3C 00 00 00 
2f788 18f 00 00 00 7F 
2f78c 190 63 61 30 18 
2f790 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2f794 192 7F 00 00 00 
2f798 193 00 00 00 3C 
2f79c 194 0C 0C 0C 0C 
2f7a0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2f7a4 196 3C 00 00 00 
2f7a8 197 00 00 00 00 
2f7ac 198 01 03 07 0E 
2f7b0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2f7b4 19a 40 00 00 00 
2f7b8 19b 00 00 00 3C 
2f7bc 19c 30 30 30 30 
2f7c0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
2f7c4 19e 3C 00 00 00 
2f7c8 19f 1C 36 00 00 
2f7cc 1a0 00 00 00 00 
2f7d0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f7d4 1a2 00 00 00 00 
2f7d8 1a3 00 00 00 00 
2f7dc 1a4 00 00 00 00 
2f7e0 1a5 00 00 00 00 
2f7e4 1a6 00          | 	byte	$00[17]
2f7e5 1a6 FF 00 00 0C 
2f7e9 1a7 18 00 00 00 
2f7ed 1a8 00 00 00 00 
2f7f1 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f7f5 1aa 00 00 00 00 
2f7f9 1ab 00 00 00 00 
2f7fd 1ac 00          | 	byte	$00[9]
2f7fe 1ac 1E 30 3E 33 
2f802 1ad 33 33 6E 00 
2f806 1ae 00 00 00 00 
2f80a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
2f80e 1b0 1E 36 66 66 
2f812 1b1 66 66 3E 00 
2f816 1b2 00 00 00 00 
2f81a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f81e 1b4 3E 63 03 03 
2f822 1b5 03 63 3E 00 
2f826 1b6 00 00 00 00 
2f82a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
2f82e 1b8 3C 36 33 33 
2f832 1b9 33 33 6E 00 
2f836 1ba 00 00 00 00 
2f83a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f83e 1bc 3E 63 7F 03 
2f842 1bd 03 63 3E 00 
2f846 1be 00 00 00 00 
2f84a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
2f84e 1c0 0C 1E 0C 0C 
2f852 1c1 0C 0C 1E 00 
2f856 1c2 00 00 00 00 
2f85a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f85e 1c4 6E 33 33 33 
2f862 1c5 33 33 3E 30 
2f866 1c6 33 1E 00 00 
2f86a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
2f86e 1c8 36 6E 66 66 
2f872 1c9 66 66 67 00 
2f876 1ca 00 00 00 00 
2f87a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
2f87e 1cc 1C 18 18 18 
2f882 1cd 18 18 3C 00 
2f886 1ce 00 00 00 00 
2f88a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
2f88e 1d0 70 60 60 60 
2f892 1d1 60 60 60 66 
2f896 1d2 66 3C 00 00 
2f89a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
2f89e 1d4 66 36 1E 1E 
2f8a2 1d5 36 66 67 00 
2f8a6 1d6 00 00 00 00 
2f8aa 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
2f8ae 1d8 18 18 18 18 
2f8b2 1d9 18 18       | 	byte	$18[6]
2f8b4 1da 3C 00 00 00 
2f8b8 1db 00 00 00 00 
2f8bc 1dc 00 00 37 7F 
2f8c0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
2f8c4 1de 63 00 00 00 
2f8c8 1df 00 00 00 00 
2f8cc 1e0 00 00 3B 66 
2f8d0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2f8d4 1e2 66 00 00 00 
2f8d8 1e3 00 00 00 00 
2f8dc 1e4 00 00 3E 63 
2f8e0 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
2f8e4 1e6 3E 00 00 00 
2f8e8 1e7 00 00 00 00 
2f8ec 1e8 00 00 3B 66 
2f8f0 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
2f8f4 1ea 3E 06 06 0F 
2f8f8 1eb 00 00 00 00 
2f8fc 1ec 00 00 6E 33 
2f900 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
2f904 1ee 3E 30 30 78 
2f908 1ef 00 00 00 00 
2f90c 1f0 00 00 3B 6E 
2f910 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
2f914 1f2 0F 00 00 00 
2f918 1f3 00 00 00 00 
2f91c 1f4 00 00 3E 63 
2f920 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2f924 1f6 3E 00 00 00 
2f928 1f7 00 00 00 08 
2f92c 1f8 0C 0C 3F 0C 
2f930 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2f934 1fa 38 00 00 00 
2f938 1fb 00 00 00 00 
2f93c 1fc 00 00 33 33 
2f940 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2f944 1fe 6E 00 00 00 
2f948 1ff 00 00 00 00 
2f94c 200 00 00 63 63 
2f950 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2f954 202 1C 00 00 00 
2f958 203 00 00 00 00 
2f95c 204 00 00 63 63 
2f960 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2f964 206 36 00 00 00 
2f968 207 00 00 00 00 
2f96c 208 00 00 63 36 
2f970 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2f974 20a 63 00 00 00 
2f978 20b 00 00 00 00 
2f97c 20c 00 00 63 63 
2f980 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2f984 20e 7E 60 30 1F 
2f988 20f 00 00 00 00 
2f98c 210 00 00 7F 33 
2f990 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2f994 212 7F 00 00 00 
2f998 213 00 00 00 70 
2f99c 214 18 18 18 0E 
2f9a0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2f9a4 216 70 00 00 00 
2f9a8 217 00 00 00 18 
2f9ac 218 18 18 18 18 
2f9b0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2f9b4 21a 18 00 00 00 
2f9b8 21b 00 00 00 0E 
2f9bc 21c 18 18 18 70 
2f9c0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
2f9c4 21e 0E 00 00 00 
2f9c8 21f 6E 3B 00 00 
2f9cc 220 00 00 00 00 
2f9d0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f9d4 222 00 00 00 00 
2f9d8 223 00 00 00 00 
2f9dc 224 00 00       | 	byte	$00[10]
2f9de 224 08 1C 36 63 
2f9e2 225 63 63 7F 00 
2f9e6 226 00 00 00 00 
2f9ea 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
2f9ee 228 03 03 03 03 
2f9f2 229 43 66 3C 18 
2f9f6 22a 30 1E 00 00 
2f9fa 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
2f9fe 22c 33 33 33 33 
2fa02 22d 33 33       | 	byte	$33[6]
2fa04 22e 6E 00 00 00 
2fa08 22f 00 00 60 30 
2fa0c 230 18 00 3E 63 
2fa10 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
2fa14 232 3E 00 00 00 
2fa18 233 00 00 08 1C 
2fa1c 234 36 00 1E 30 
2fa20 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2fa24 236 6E 00 00 00 
2fa28 237 00 00 00 00 
2fa2c 238 33 00 1E 30 
2fa30 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2fa34 23a 6E 00 00 00 
2fa38 23b 00 00 1C 36 
2fa3c 23c 1C 00 33 33 
2fa40 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2fa44 23e 6E 00 00 00 
2fa48 23f 00 00 60 30 
2fa4c 240 18 00 3E 63 
2fa50 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2fa54 242 3E 00 00 00 
2fa58 243 00 00 00 00 
2fa5c 244 00 00 3E 63 
2fa60 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2fa64 246 3E 18 30 1E 
2fa68 247 00 00 00 1C 
2fa6c 248 58 78 38 18 
2fa70 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2fa74 24a 3C 00 00 00 
2fa78 24b 00 00 00 00 
2fa7c 24c 63 00 3E 63 
2fa80 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2fa84 24e 3E 00 00 00 
2fa88 24f 66 33 00 3E 
2fa8c 250 63 63 63 63 
2fa90 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2fa94 252 3E 00 00 00 
2fa98 253 00 00 CC 66 
2fa9c 254 33 00 3E 63 
2faa0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2faa4 256 3E 00 00 00 
2faa8 257 00 00 18 3C 
2faac 258 66 00 1C 18 
2fab0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2fab4 25a 3C 00 00 00 
2fab8 25b 30 18 00 7F 
2fabc 25c 63 61 30 18 
2fac0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2fac4 25e 7F 00 00 00 
2fac8 25f 00 63 00 08 
2facc 260 1C 36 63 63 
2fad0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
2fad4 262 63 00 00 00 
2fad8 263 30 18 00 3C 
2fadc 264 66 43 03 03 
2fae0 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
2fae4 266 3C 00 00 00 
2fae8 267 30 18 00 7F 
2faec 268 66 46 16 1E 
2faf0 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
2faf4 26a 7F 00 00 00 
2faf8 26b 0C 06 00 0F 
2fafc 26c 06 06 06 06 
2fb00 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2fb04 26e 7F 00 00 00 
2fb08 26f 30 18 00 1C 
2fb0c 270 18 18 18 18 
2fb10 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
2fb14 272 3C 00 00 00 
2fb18 273 00 00 08 1C 
2fb1c 274 36 00 3E 63 
2fb20 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2fb24 276 3E 00 00 00 
2fb28 277 00 00 00 00 
2fb2c 278 63 00 3E 63 
2fb30 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2fb34 27a 3E 00 00 00 
2fb38 27b 00 00 00 6F 
2fb3c 27c 46 26 06 06 
2fb40 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2fb44 27e 7F 00 00 00 
2fb48 27f 00 00 00 6E 
2fb4c 280 4C 2C 0C 0C 
2fb50 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2fb54 282 1E 00 00 00 
2fb58 283 30 18 00 3E 
2fb5c 284 63 63 06 1C 
2fb60 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2fb64 286 3E 00 00 00 
2fb68 287 00 00 60 30 
2fb6c 288 18 00 3E 63 
2fb70 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2fb74 28a 3E 00 00 00 
2fb78 28b 00 63 00 3E 
2fb7c 28c 63 63 63 63 
2fb80 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2fb84 28e 3E 00 00 00 
2fb88 28f 00 63 00 63 
2fb8c 290 63 63 63 63 
2fb90 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2fb94 292 3E 00 00 00 
2fb98 293 6C 38 00 7E 
2fb9c 294 7E 5A 18 18 
2fba0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2fba4 296 3C 00 00 00 
2fba8 297 00 00 60 48 
2fbac 298 2C 0C 3F 0C 
2fbb0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2fbb4 29a 38 00 00 00 
2fbb8 29b 00 00 00 0F 
2fbbc 29c 26 36 1E 0E 
2fbc0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
2fbc4 29e 7F 00 00 00 
2fbc8 29f 00 00 00 00 
2fbcc 2a0 00 63 36 1C 
2fbd0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
2fbd4 2a2 00 00 00 00 
2fbd8 2a3 00 00       | 	byte	$00[6]
2fbda 2a3 36 1C 08 00 
2fbde 2a4 3E 63 03 03 
2fbe2 2a5 03 63 3E 00 
2fbe6 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2fbea 2a7 30 18 0C 00 
2fbee 2a8 1E 30 3E 33 
2fbf2 2a9 33 33 6E 00 
2fbf6 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2fbfa 2ab 60 30 18 00 
2fbfe 2ac 1C 18 18 18 
2fc02 2ad 18 18 3C 00 
2fc06 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2fc0a 2af 60 30 18 00 
2fc0e 2b0 3E 63 63 63 
2fc12 2b1 63 63 3E 00 
2fc16 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2fc1a 2b3 30 18 0C 00 
2fc1e 2b4 33 33 33 33 
2fc22 2b5 33 33 6E 00 
2fc26 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2fc2a 2b7 00 08 1C 36 
2fc2e 2b8 63 63 7F 63 
2fc32 2b9 63 63 63 18 
2fc36 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2fc3a 2bb 00 00 00 00 
2fc3e 2bc 1E 30 3E 33 
2fc42 2bd 33 33 6E 18 
2fc46 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
2fc4a 2bf 00 7F 63 61 
2fc4e 2c0 30 18 0C 06 
2fc52 2c1 43 63 7F 00 
2fc56 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
2fc5a 2c3 36 1C 08 00 
2fc5e 2c4 7F 33 18 0C 
2fc62 2c5 06 63 7F 00 
2fc66 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
2fc6a 2c7 00 7F 66 46 
2fc6e 2c8 16 1E 16 06 
2fc72 2c9 46 66 7F 18 
2fc76 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
2fc7a 2cb 00 00 00 00 
2fc7e 2cc 3E 63 7F 03 
2fc82 2cd 03 63 3E 18 
2fc86 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
2fc8a 2cf 00 3C 66 03 
2fc8e 2d0 1F 03 0F 03 
2fc92 2d1 03 66 3C 00 
2fc96 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
2fc9a 2d3 60 30 18 00 
2fc9e 2d4 7F 33 18 0C 
2fca2 2d5 06 63 7F 00 
2fca6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2fcaa 2d7 00 3C 66 43 
2fcae 2d8 03 03 03 03 
2fcb2 2d9 43 66 3C 00 
2fcb6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2fcba 2db 00 00 00 00 
2fcbe 2dc 3E 63 06 1C 
2fcc2 2dd 30 63 3E 18 
2fcc6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2fcca 2df 00 00 00 00 
2fcce 2e0 00 00       | 	byte	$00[6]
2fcd0 2e1 6C 36 1B 36 
2fcd4 2e2 6C 00 00 00 
2fcd8 2e3 00 00 00 00 
2fcdc 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fce0 2e5 1B 36 6C 36 
2fce4 2e6 1B 00 00 00 
2fce8 2e7 88 22 88 22 
2fcec 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
2fcf0 2e9 88 22 88 22 
2fcf4 2ea 88 22 88 22 
2fcf8 2eb AA 55 AA 55 
2fcfc 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
2fd00 2ed AA 55 AA 55 
2fd04 2ee AA 55 AA 55 
2fd08 2ef BB EE BB EE 
2fd0c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
2fd10 2f1 BB EE BB EE 
2fd14 2f2 BB EE BB EE 
2fd18 2f3 18 18 18 18 
2fd1c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
2fd20 2f5 18 18 18 18 
2fd24 2f6 18 18 18 18 
2fd28 2f7 18 18 18 18 
2fd2c 2f8 18 18 18    | 	byte	$18[15]
2fd2f 2f8 1F 18 18 18 
2fd33 2f9 18 18 18 18 
2fd37 2fa 18 30 18 00 
2fd3b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
2fd3f 2fc 63 7F 63 63 
2fd43 2fd 63 63 00 00 
2fd47 2fe 00 1C 36 00 
2fd4b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
2fd4f 300 63 7F 63 63 
2fd53 301 63 63 00 00 
2fd57 302 00 36 1C 00 
2fd5b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
2fd5f 304 1E 16 06 46 
2fd63 305 66 7F 00 00 
2fd67 306 00 00 00 00 
2fd6b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
2fd6f 308 1C 30 60 63 
2fd73 309 63 3E 18 30 
2fd77 30a 1E 6C 6C 6C 
2fd7b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
2fd7f 30c 6F 6C 6C 6C 
2fd83 30d 6C 6C 6C 6C 
2fd87 30e 6C 6C 6C 6C 
2fd8b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2fd8f 310 6C 6C 6C 6C 
2fd93 311 6C 6C 6C 6C 
2fd97 312 6C          | 	byte	$6c[9]
2fd98 313 00 00 00 00 
2fd9c 314 00          | 	byte	$00[5]
2fd9d 314 7F 60 6F 6C 
2fda1 315 6C 6C 6C 6C 
2fda5 316 6C 6C 6C 6C 
2fda9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2fdad 318 6F 60 7F 00 
2fdb1 319 00 00 00 00 
2fdb5 31a 00 00 00 18 
2fdb9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
2fdbd 31c 61 30 18 0C 
2fdc1 31d 06 43 63 7F 
2fdc5 31e 00 00 00 00 
2fdc9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
2fdcd 320 00 7F 33 18 
2fdd1 321 0C 06 63 7F 
2fdd5 322 00 00 00 00 
2fdd9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
2fddd 324 00 00 1F 18 
2fde1 325 18 18 18 18 
2fde5 326 18 18 18 18 
2fde9 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2fded 328 18 18 F8 00 
2fdf1 329 00 00 00 00 
2fdf5 32a 00 00 00 18 
2fdf9 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2fdfd 32c 18 18 FF 00 
2fe01 32d 00 00 00 00 
2fe05 32e 00 00 00 00 
2fe09 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe0d 330 00 00 FF 18 
2fe11 331 18 18 18 18 
2fe15 332 18 18 18 18 
2fe19 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2fe1d 334 18 18 F8 18 
2fe21 335 18 18 18 18 
2fe25 336 18 18 18 00 
2fe29 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2fe2d 338 00 00 FF 00 
2fe31 339 00 00 00 00 
2fe35 33a 00 00 00 18 
2fe39 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
2fe3d 33c 18 18 FF 18 
2fe41 33d 18 18 18 18 
2fe45 33e 18 18 18 63 
2fe49 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
2fe4d 340 36 63 63 7F 
2fe51 341 63 63 63 63 
2fe55 342 00 00 00 00 
2fe59 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
2fe5d 344 00 1E 30 3E 
2fe61 345 33 33 33 6E 
2fe65 346 00 00 00 6C 
2fe69 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2fe6d 348 EC 0C FC 00 
2fe71 349 00 00 00 00 
2fe75 34a 00 00 00 00 
2fe79 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe7d 34c FC 0C EC 6C 
2fe81 34d 6C 6C 6C 6C 
2fe85 34e 6C 6C 6C 6C 
2fe89 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2fe8d 350 EF 00 FF 00 
2fe91 351 00 00 00 00 
2fe95 352 00 00 00 00 
2fe99 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2fe9d 354 FF 00 EF 6C 
2fea1 355 6C 6C 6C 6C 
2fea5 356 6C 6C 6C 6C 
2fea9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
2fead 358 EC 0C EC 6C 
2feb1 359 6C 6C 6C 6C 
2feb5 35a 6C 6C 6C 00 
2feb9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2febd 35c FF 00 FF 00 
2fec1 35d 00 00 00 00 
2fec5 35e 00 00 00 6C 
2fec9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
2fecd 360 EF 00 EF 6C 
2fed1 361 6C 6C 6C 6C 
2fed5 362 6C 6C 6C 00 
2fed9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
2fedd 364 63 3E 63 63 
2fee1 365 63 63 3E 63 
2fee5 366 00 00 00 00 
2fee9 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
2feed 368 30 3C 36 33 
2fef1 369 33 33 33 6E 
2fef5 36a 00 00 00 00 
2fef9 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
2fefd 36c 66 66 6F 66 
2ff01 36d 66 66 36 1F 
2ff05 36e 00 00 00 36 
2ff09 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
2ff0d 370 66 66 66 66 
2ff11 371 66 66       | 	byte	$66[6]
2ff13 371 36 1F 00 00 
2ff17 372 00 00 63 00 
2ff1b 373 7F 66 46 16 
2ff1f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
2ff23 375 66 7F 00 00 
2ff27 376 00 6C 38 00 
2ff2b 377 38 30 30 3C 
2ff2f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
2ff33 379 33 6E 00 00 
2ff37 37a 00 36 1C 00 
2ff3b 37b 63 67 6F 7F 
2ff3f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
2ff43 37d 63 63 00 00 
2ff47 37e 00 30 18 00 
2ff4b 37f 3C 18 18 18 
2ff4f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2ff53 381 18 3C 00 00 
2ff57 382 00 3C 66 00 
2ff5b 383 3C 18 18 18 
2ff5f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
2ff63 385 18 3C 00 00 
2ff67 386 00 00 00 36 
2ff6b 387 1C 08 00 3E 
2ff6f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
2ff73 389 63 3E 00 00 
2ff77 38a 00 18 18 18 
2ff7b 38b 18 18 18 18 
2ff7f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
2ff83 38d 00 00 00 00 
2ff87 38e 00 00 00 00 
2ff8b 38f 00 00 00 00 | 	byte	$00[12]
2ff8f 390 F8 18 18 18 
2ff93 391 18 18 18 18 
2ff97 392 18 FF FF FF 
2ff9b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
2ff9f 394 FF FF FF FF 
2ffa3 395 FF FF FF FF 
2ffa7 396 FF          | 	byte	$ff[9]
2ffa8 397 00 00 00 00 
2ffac 398 00 00 00    | 	byte	$00[7]
2ffaf 398 FF FF FF FF 
2ffb3 399 FF FF FF FF 
2ffb7 39a FF          | 	byte	$ff[9]
2ffb8 39b 00 00 00 7E 
2ffbc 39c 7E 5A 18 18 
2ffc0 39d 18 18 18 18 
2ffc4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
2ffc8 39f 1C 36 1C 63 
2ffcc 3a0 63 63 63 63 
2ffd0 3a1 63 63 63 63 
2ffd4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2ffd8 3a3 FF FF FF FF 
2ffdc 3a4 FF FF FF    | 	byte	$ff[7]
2ffdf 3a4 00 00 00 00 
2ffe3 3a5 00 00 00 00 
2ffe7 3a6 00          | 	byte	$00[9]
2ffe8 3a7 30 18 00 3E 
2ffec 3a8 63 63 63 63 
2fff0 3a9 63 63 63 63 
2fff4 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
2fff8 3ab 00 00 00 1E 
2fffc 3ac 33 33 33 1B 
30000 3ad 33 63 63 63 
30004 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
30008 3af 1C 36 00 3E 
3000c 3b0 63 63 63 63 
30010 3b1 63 63 63 63 
30014 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30018 3b3 30 18 00 63 
3001c 3b4 67 6F 7F 7B 
30020 3b5 73 63 63 63 
30024 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
30028 3b7 00 00 60 30 
3002c 3b8 18 00 3B 66 
30030 3b9 66 66 66 66 
30034 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
30038 3bb 00 00 36 1C 
3003c 3bc 08 00 3B 66 
30040 3bd 66 66 66 66 
30044 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
30048 3bf 36 1C 00 3E 
3004c 3c0 63 63 06 1C 
30050 3c1 30 60 63 63 
30054 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
30058 3c3 00 00 36 1C 
3005c 3c4 08 00 3E 63 
30060 3c5 06 1C 30 63 
30064 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
30068 3c7 30 18 00 3F 
3006c 3c8 66 66 66 3E 
30070 3c9 36 66 66 66 
30074 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
30078 3cb 30 18 00 63 
3007c 3cc 63 63 63 63 
30080 3cd 63 63 63 63 
30084 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
30088 3cf 00 00 60 30 
3008c 3d0 18 00 3B 6E 
30090 3d1 66 06 06 06 
30094 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
30098 3d3 66 33 00 63 
3009c 3d4 63 63 63 63 
300a0 3d5 63 63 63 63 
300a4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
300a8 3d7 00 00 60 30 
300ac 3d8 18 00 63 63 
300b0 3d9 63 63 63 63 
300b4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
300b8 3db 30 18 00 66 
300bc 3dc 66 66 66 3C 
300c0 3dd 18 18 18 18 
300c4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
300c8 3df 00 00 00 08 
300cc 3e0 0C 0C 3F 0C 
300d0 3e1 0C 0C 0C 6C 
300d4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
300d8 3e3 30 18 00 00 
300dc 3e4 00 00 00 00 
300e0 3e5 00 00 00 00 
300e4 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
300e8 3e7 00 00 00 00 
300ec 3e8 00 00 00 00 | 	byte	$00[8]
300f0 3e9 7F 00 00 00 
300f4 3ea 00 00 00 00 
300f8 3eb 66 33 00 00 
300fc 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
30100 3ed 00 00 00 00 
30104 3ee 00 00 00 00 
30108 3ef 00 00 00 00 
3010c 3f0 00 00 00 00 
30110 3f1 00 00 00 00 
30114 3f2 00          | 	byte	$00[21]
30115 3f2 0C 06 3C 36 
30119 3f3 1C 00 00 00 
3011d 3f4 00 00 00 00 
30121 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30125 3f6 00 00 00 63 
30129 3f7 3E 00 00 00 
3012d 3f8 00 00 00 00 
30131 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30135 3fa 00 00 00 00 
30139 3fb 3E 63 06 1C 
3013d 3fc 36 63 63 36 
30141 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
30145 3fe 00 00 00 00 
30149 3ff 00 00 00 00 | 	byte	$00[8]
3014d 400 18 00 7E 00 
30151 401 18 00 00 00 
30155 402 00 00 00 00 
30159 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3015d 404 00 00 00 00 
30161 405 00 00 00 00 | 	byte	$00[8]
30165 406 18 30 1E 00 
30169 407 00 00 1C 36 
3016d 408 36 1C 00 00 
30171 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
30175 40a 00 00 00 00 
30179 40b 63 00 00 00 
3017d 40c 00 00 00 00 
30181 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30185 40e 00 00 00 18 
30189 40f 18 00 00 00 
3018d 410 00 00 00 00 
30191 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30195 412 00 00 00 00 
30199 413 00          | 	byte	$00[5]
3019a 413 CC 66 33 00 
3019e 414 33 33 33 33 
301a2 415 33 33 6E 00 
301a6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
301aa 417 00 3F 66 66 
301ae 418 66 3E 36 66 
301b2 419 66 66 6F 00 
301b6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
301ba 41b 36 1C 08 00 
301be 41c 3B 6E 66 06 
301c2 41d 06 06 0F 00 
301c6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
301ca 41f 00 00 00 7E 
301ce 420 7E 7E 7E 7E 
301d2 421 7E 7E 00 00 
301d6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
301da 423 00 00 00 00 
301de 424 00 00 00 00 
301e2 425 00 00 00 00 
301e6 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
301e8 427             | 'vga_font       file "vgafont.def"
301e8 427 00 00 00 00 
      ...             
30218 433 00 00 00 00 
3021c 434 00 00 00    | st_font        file "st4font.def"
3021f 434 FF FF 00 00 
30223 435 00 00 00 00 
30227 436 00 18 18 18 
3022b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3022f 438 18 18 18 18 
30233 439 18 18 18 18 
30237 43a 18          | 	byte	$18[9]
30238 43b 00 00 00 00 
3023c 43c 00 00 00    | 	byte	$00[7]
3023f 43c FF FF 18 18 
30243 43d 18 18 18 18 
30247 43e 18 18 18 18 
3024b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3024f 440 FF FF 00 00 
30253 441 00 00 00 00 
30257 442 00 18 18 18 
3025b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3025f 444 1F 1F 18 18 
30263 445 18 18 18 18 
30267 446 18 18 18 18 
3026b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3026f 448 F8 F8 18 18 
30273 449 18 18 18 18 
30277 44a 18 00 00 00 
3027b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3027f 44c 1F 1F 18 18 
30283 44d 18 18 18 18 
30287 44e 18 00 00 00 
3028b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3028f 450 F8 F8 18 18 
30293 451 18 18 18 18 
30297 452 18 18 18 18 
3029b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3029f 454 1F 1F 00 00 
302a3 455 00 00 00 00 
302a7 456 00 18 18 18 
302ab 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
302af 458 F8 F8 00 00 
302b3 459 00 00 00 00 
302b7 45a 00 18 18 18 
302bb 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
302bf 45c FF FF 18 18 
302c3 45d 18 18 18 18 
302c7 45e 18 00 00 18 
302cb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
302cf 460 66 7E 7E 66 
302d3 461 66 66 66 30 
302d7 462 18 00 00 7E 
302db 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
302df 464 3E 06 06 06 
302e3 465 06 7E 7E 18 
302e7 466 0C 30 18 3C 
302eb 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
302ef 468 06 06 06 66 
302f3 469 66 7E 3C 00 
302f7 46a 00 30 18 66 
302fb 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
302ff 46c 7E 7E 76 76 
30303 46d 66 66 66 00 
30307 46e 00 30 18 7C 
3030b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3030f 470 1C 38 70 60 
30313 471 60 7E 3E 00 
30317 472 00 30 18 7E 
3031b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3031f 474 18 0C 0C 06 
30323 475 06 7E 7E 00 
30327 476 00 18 18 00 
3032b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3032f 478 18 18 0C 0C 
30333 479 06 7E 7E 00 
30337 47a 00 30 18 3C 
3033b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3033f 47c 66 66 66 66 
30343 47d 66          | 	byte	$66[5]
30344 47e 7E 3C 00 00 
30348 47f 00 00 06 06 
3034c 480 06 06 16 1E 
30350 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
30354 482 7E 7E 00 00 
30358 483 00 00 00 00 
3035c 484 00 3C 7C 60 
30360 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
30364 486 7E 7C 30 18 
30368 487 00 00 00 00 
3036c 488 00 3C 7E 66 
30370 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
30374 48a 7E 7C 18 0C 
30378 48b 00 00 30 18 
3037c 48c 00 3C 3E 06 
30380 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
30384 48e 7E 7C 00 00 
30388 48f 00 00 30 18 
3038c 490 00 3E 7E 66 
30390 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
30394 492 66 66 00 00 
30398 493 00 00 30 18 
3039c 494 00 7C 7E 06 
303a0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
303a4 496 7E 3E 00 00 
303a8 497 00 00 30 18 
303ac 498 00 7E 7E 30 
303b0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
303b4 49a 7E 7E 00 00 
303b8 49b 00 00 18 18 
303bc 49c 00 7E 7E 30 
303c0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
303c4 49e 7E 7E 00 00 
303c8 49f 00 00 30 18 
303cc 4a0 00 3C 7E 66 
303d0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
303d4 4a2 7E 3C 00 00 
303d8 4a3 00 00 1C 1C 
303dc 4a4 18 18 38 3C 
303e0 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
303e4 4a6 3C 3C 00 00 
303e8 4a7 00 00 00 00 
303ec 4a8 00 00 00 00 
303f0 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
303f4 4aa 00 00 00 00 
303f8 4ab 00 00       | 	byte	$00[6]
303fa 4ab 18 18 18 18 
303fe 4ac 18 18 18 18 | 	byte	$18[8]
30402 4ad 00 00 18 18 
30406 4ae 00 00 00 00 
3040a 4af 66 66 66 66 
3040e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
30412 4b1 00 00 00 00 
30416 4b2 00 00 00 00 
3041a 4b3 00          | 	byte	$00[9]
3041b 4b3 66 66 FF FF 
3041f 4b4 66 66 FF FF 
30423 4b5 66 66 00 00 
30427 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3042b 4b7 7C 7E 06 06 
3042f 4b8 3E 7C 60 60 
30433 4b9 7E 3E 18 18 
30437 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3043b 4bb 66 30 30 18 
3043f 4bc 18 0C 0C 66 
30443 4bd 66 00 00 00 
30447 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3044b 4bf 66 66 3C 1C 
3044f 4c0 1C FC FE 66 
30453 4c1 66 FE FC 00 
30457 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3045b 4c3 18 18 18 18 
3045f 4c4 00 00 00 00 
30463 4c5 00 00 00 00 
30467 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3046b 4c7 18 1C 0C 0C 
3046f 4c8 0C 0C 0C 0C 
30473 4c9 1C 18 30 00 
30477 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3047b 4cb 18 38 30 30 
3047f 4cc 30 30 30 30 
30483 4cd 38 18 0C 00 
30487 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3048b 4cf 66 66 3C 3C 
3048f 4d0 FF FF 3C 3C 
30493 4d1 66 66 00 00 
30497 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3049b 4d3 00 18 18 18 
3049f 4d4 7E 7E 18 18 
304a3 4d5 18 00 00 00 
304a7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
304ab 4d7 00 00 00 00 
304af 4d8 00 00       | 	byte	$00[6]
304b1 4d9 18 18 18 18 
304b5 4da 18          | 	byte	$18[5]
304b6 4da 0C 04 00 00 
304ba 4db 00 00 00 00 
304be 4dc 7E 7E 00 00 
304c2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
304c6 4de 00 00 00 00 
304ca 4df 00 00 00 00 
304ce 4e0 00 00 00 00 
304d2 4e1 00          | 	byte	$00[13]
304d3 4e1 18 18 18 00 
304d7 4e2 00 00 00 60 
304db 4e3 60 60 30 30 
304df 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
304e3 4e5 06 06 06 00 
304e7 4e6 00 00 00 3C 
304eb 4e7 7E 66 66 66 
304ef 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
304f3 4e9 66 7E 3C 00 
304f7 4ea 00 00 00 18 
304fb 4eb 18 1C 1C 18 
304ff 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
30503 4ed 18 7E 7E 00 
30507 4ee 00 00 00 3C 
3050b 4ef 7E 66 66 30 
3050f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
30513 4f1 0C 7E 7E 00 
30517 4f2 00 00 00 7E 
3051b 4f3 7E 30 30 18 
3051f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
30523 4f5 66 7E 3C 00 
30527 4f6 00 00 00 30 
3052b 4f7 30 38 38 3C 
3052f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
30533 4f9 7E 30 30 00 
30537 4fa 00 00 00 7E 
3053b 4fb 7E 06 06 3E 
3053f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
30543 4fd 66 7E 3C 00 
30547 4fe 00 00 00 38 
3054b 4ff 3C 0E 06 06 
3054f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
30553 501 66 7E 3C 00 
30557 502 00 00 00 7E 
3055b 503 7E 60 60 30 
3055f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
30563 505 0C 0C 0C 00 
30567 506 00 00 00 3C 
3056b 507 7E 66 66 3C 
3056f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
30573 509 66 7E 3C 00 
30577 50a 00 00 00 3C 
3057b 50b 7E 66 66 7E 
3057f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
30583 50d 70 3C 1C 00 
30587 50e 00 00 00 00 
3058b 50f 00 00 18 18 
3058f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
30593 511 18 18 18 00 
30597 512 00 00 00 00 
3059b 513 00 00 18 18 
3059f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
305a3 515 18 18 18 0C 
305a7 516 04 00 00 00 
305ab 517 70 38 1C 0E 
305af 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
305b3 519 70 00 00 00 
305b7 51a 00 00 00 00 
305bb 51b 00 00 7E 7E 
305bf 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
305c3 51d 00 00 00 00 
305c7 51e 00 00 00 00 | 	byte	$00[8]
305cb 51f 0E 1C 38 70 
305cf 520 E0 70 38 1C 
305d3 521 0E 00 00 00 
305d7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
305db 523 7E 66 66 30 
305df 524 30 18 18 18 
305e3 525 00 18 18 00 
305e7 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
305eb 527 7E 66 66 66 
305ef 528 66 36 06 66 
305f3 529 66 7E 3C 00 
305f7 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
305fb 52b 3C 7E 66 66 
305ff 52c 66 7E 7E 66 
30603 52d 66 66 66 00 
30607 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3060b 52f 7E 66 66 7E 
3060f 530 3E 66 66 66 
30613 531 66 7E 3E 00 
30617 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3061b 533 7E 66 66 06 
3061f 534 06 06 06 66 
30623 535 66 7E 3C 00 
30627 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3062b 537 7E 66 66 66 
3062f 538 66 66 66 66 
30633 539 66 7E 3E 00 
30637 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3063b 53b 7E 06 06 3E 
3063f 53c 3E 06 06 06 
30643 53d 06 7E 7E 00 
30647 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3064b 53f 7E 06 06 3E 
3064f 540 3E 06 06 06 
30653 541 06 06 06 00 
30657 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3065b 543 7E 06 06 76 
3065f 544 76 66 66 66 
30663 545 66 7E 3C 00 
30667 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3066b 547 66 66 66 7E 
3066f 548 7E 66 66 66 
30673 549 66 66 66 00 
30677 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3067b 54b 7E 18 18 18 
3067f 54c 18 18 18 18 
30683 54d 18 7E 7E 00 
30687 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3068b 54f 60 60 60 60 
3068f 550 60 60 60    | 	byte	$60[7]
30692 551 66 66 7E 3C 
30696 552 00 00 00 00 
3069a 553 66 66 36 36 
3069e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
306a2 555 66 66 C6 C6 
306a6 556 00 00 00 00 
306aa 557 06 06 06 06 
306ae 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
306b2 559 06 06 7E 7E 
306b6 55a 00 00 00 00 
306ba 55b C6 C6 EE EE 
306be 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
306c2 55d C6 C6 C6 C6 
306c6 55e 00 00 00 00 
306ca 55f 66 66 66 6E 
306ce 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
306d2 561 76 66 66 66 
306d6 562 00 00 00 00 
306da 563 3C 7E 66 66 
306de 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
306e2 565 66 66 7E 3C 
306e6 566 00 00 00 00 
306ea 567 3E 7E 66 66 
306ee 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
306f2 569 06 06 06 06 
306f6 56a 00 00 00 00 
306fa 56b 3C 7E 66 66 
306fe 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
30702 56d 66 56 3E 6C 
30706 56e 00 00 00 00 
3070a 56f 3E 7E 66 66 
3070e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
30712 571 66 66 C6 C6 
30716 572 00 00 00 00 
3071a 573 7C 7E 06 06 
3071e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
30722 575 60 60 7E 3E 
30726 576 00 00 00 00 
3072a 577 7E 7E 18 18 
3072e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
30732 579 18 18 18 18 
30736 57a 00 00 00 00 
3073a 57b 66 66 66 66 
3073e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30742 57d 66 66 7E 3C 
30746 57e 00 00 00 00 
3074a 57f 66 66 66 66 
3074e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
30752 581 3C 3C 18 18 
30756 582 00 00 00 00 
3075a 583 C6 C6 C6 C6 
3075e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
30762 585 FE EE C6 82 
30766 586 00 00 00 00 
3076a 587 66 66 66 3C 
3076e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
30772 589 3C 66 66 66 
30776 58a 00 00 00 00 
3077a 58b 66 66 66 66 
3077e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
30782 58d 18 18 18 18 
30786 58e 00 00 00 00 
3078a 58f 7E 7E 30 30 
3078e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
30792 591 06 06 7E 7E 
30796 592 00 00 00 00 
3079a 593 3C 3C 0C 0C 
3079e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
307a2 595 0C 0C 3C 3C 
307a6 596 00 00 00 00 
307aa 597 06 06 0C 0C 
307ae 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
307b2 599 60 60 C0 C0 
307b6 59a 00 00 00 00 
307ba 59b 3C 3C 30 30 
307be 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
307c2 59d 30 30 3C 3C 
307c6 59e 00 00 00 00 
307ca 59f 18 18 3C 3C 
307ce 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
307d2 5a1 00 00 00 00 
307d6 5a2 00 00 00 00 
307da 5a3 00 00 00 00 
307de 5a4 00 00 00 00 
307e2 5a5 00 00       | 	byte	$00[18]
307e4 5a6 FE FE 00 00 
307e8 5a7 00 00 0C 0C 
307ec 5a8 18 18 00 00 
307f0 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
307f4 5aa 00 00 00 00 
307f8 5ab 00 00 00 00 
307fc 5ac 00          | 	byte	$00[9]
307fd 5ac 3C 7C 60 7C 
30801 5ad 7E 66 66 7E 
30805 5ae 7C 00 00 00 
30809 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3080d 5b0 3E 7E 66 66 
30811 5b1 66 66 66 7E 
30815 5b2 3E 00 00 00 
30819 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3081d 5b4 3C 3E 06 06 
30821 5b5 06 06 06 7E 
30825 5b6 7C 00 00 00 
30829 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3082d 5b8 7C 7E 66 66 
30831 5b9 66 66 66 7E 
30835 5ba 7C 00 00 00 
30839 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3083d 5bc 3C 7E 66 66 
30841 5bd 7E 06 06 7E 
30845 5be 7C 00 00 00 
30849 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3084d 5c0 18 7E 7E 18 
30851 5c1 18 18 18 18 
30855 5c2 18 00 00 00 
30859 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3085d 5c4 7C 7E 66 66 
30861 5c5 66 66 7E 7C 
30865 5c6 60 7E 3E 00 
30869 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3086d 5c8 3E 7E 66 66 
30871 5c9 66 66 66 66 
30875 5ca 66 00 00 00 
30879 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3087d 5cc 1C 1C 18 18 
30881 5cd 18 18 18 3C 
30885 5ce 3C 00 00 00 
30889 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3088d 5d0 30 30 30 30 
30891 5d1 30 30 30 30 
30895 5d2 30          | 	byte	$30[9]
30896 5d2 3E 1E 00 00 
3089a 5d3 06 06 06 36 
3089e 5d4 36 1E 1E 1E 
308a2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
308a6 5d6 00 00 00 00 
308aa 5d7 1C 1C 18 18 
308ae 5d8 18 18 18 18 
308b2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
308b6 5da 00 00 00 00 
308ba 5db 00 00 00    | 	byte	$00[7]
308bd 5dc 6C FE FE D6 
308c1 5dd D6 C6 C6 C6 
308c5 5de C6 00 00 00 
308c9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
308cd 5e0 3E 7E 66 66 
308d1 5e1 66 66 66 66 
308d5 5e2 66 00 00 00 
308d9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
308dd 5e4 3C 7E 66 66 
308e1 5e5 66 66 66 7E 
308e5 5e6 3C 00 00 00 
308e9 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
308ed 5e8 3E 7E 66 66 
308f1 5e9 66 66 66 7E 
308f5 5ea 3E 06 06 00 
308f9 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
308fd 5ec 7C 7E 66 66 
30901 5ed 66 66 66 7E 
30905 5ee 7C 60 60 00 
30909 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3090d 5f0 3E 7E 66 06 
30911 5f1 06 06 06 06 
30915 5f2 06 00 00 00 
30919 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3091d 5f4 7C 7E 06 0E 
30921 5f5 3C 70 60 7E 
30925 5f6 3E 00 00 00 
30929 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3092d 5f8 7E 7E 18 18 
30931 5f9 18 18 18 78 
30935 5fa 70 00 00 00 
30939 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3093d 5fc 66 66 66 66 
30941 5fd 66 66 66    | 	byte	$66[7]
30944 5fe 7E 7C 00 00 
30948 5ff 00 00 00 00 
3094c 600 00 66 66 66 
30950 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
30954 602 18 18 00 00 
30958 603 00 00 00 00 
3095c 604 00 C6 C6 D6 
30960 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
30964 606 C6 82 00 00 
30968 607 00 00 00 00 
3096c 608 00 66 66 3C 
30970 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
30974 60a 66 66 00 00 
30978 60b 00 00 00 00 
3097c 60c 00 66 66 66 
30980 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
30984 60e 7C 60 7E 3E 
30988 60f 00 00 00 00 
3098c 610 00 7E 7E 30 
30990 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
30994 612 7E 7E 00 00 
30998 613 00 00 30 18 
3099c 614 18 18 18 0C 
309a0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
309a4 616 18 30 00 00 
309a8 617 00 00 18 18 
309ac 618 18 18 18 18 
309b0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
309b4 61a 18 18 00 00 
309b8 61b 00 00 0C 18 
309bc 61c 18 18 18 30 
309c0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
309c4 61e 18 0C 00 00 
309c8 61f 00 00 6C 7E 
309cc 620 36 00 00 00 
309d0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
309d4 622 00 00 00 00 
309d8 623 00 00 00 00 
309dc 624 00          | 	byte	$00[9]
309dd 624 18 18 18 18 
309e1 625 18 18 00 00 
309e5 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
309e8 627             | 'amiga_font     file "amigafont.def"
309e8 627 00 6C FE FE 
309ec 628 7C 38 10 00 
309f0 629 18 18 18 F8 
309f4 62a F8 18 18 18 | a8_font        file "atari8.fnt"
309f8 62b C0 C0 C0 C0 
309fc 62c C0 C0 C0 C0 | 	byte	$c0[8]
30a00 62d 18 18 18 1F 
30a04 62e 1F 00 00 00 
30a08 62f 18 18 18 1F 
30a0c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
30a10 631 00 00 00 1F 
30a14 632 1F 18 18 18 
30a18 633 C0 E0 70 38 
30a1c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
30a20 635 03 07 0E 1C 
30a24 636 38 70 E0 C0 
30a28 637 80 C0 E0 F0 
30a2c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
30a30 639 00 00 00 00 
30a34 63a F0 F0 F0 F0 
30a38 63b 01 03 07 0F 
30a3c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
30a40 63d F0 F0 F0 F0 
30a44 63e 00 00 00 00 
30a48 63f 0F 0F 0F 0F 
30a4c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
30a50 641 FF FF 00 00 
30a54 642 00 00 00 00 
30a58 643 00 00 00 00 
30a5c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
30a60 645 00 00 00 00 
30a64 646 0F 0F 0F 0F 
30a68 647 00 38 38 EE 
30a6c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
30a70 649 00 00 00 F8 
30a74 64a F8 18 18 18 
30a78 64b 00 00 00 FF 
30a7c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
30a80 64d 18 18 18 FF 
30a84 64e FF 18 18 18 
30a88 64f 00 00 3C 7E 
30a8c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
30a90 651 00 00 00 00 
30a94 652 FF FF FF FF 
30a98 653 03 03 03 03 
30a9c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
30aa0 655 00 00 00 FF 
30aa4 656 FF 18 18 18 
30aa8 657 18 18 18 FF 
30aac 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
30ab0 659 0F 0F 0F 0F 
30ab4 65a 0F 0F 0F 0F | 	byte	$0f[8]
30ab8 65b 18 18 18 F8 
30abc 65c F8 00 00 00 
30ac0 65d 1E 06 1E 06 
30ac4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
30ac8 65f 00 18 3C 7E 
30acc 660 18 18 18 00 
30ad0 661 00 18 18 18 
30ad4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
30ad8 663 00 18 0C 7E 
30adc 664 0C 18 00 00 
30ae0 665 00 18 30 7E 
30ae4 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
30ae8 667 00 00 00 00 
30aec 668 00 00 00 00 
30af0 669 00          | 	byte	$00[9]
30af1 669 18 18 18 18 
30af5 66a 00 18 00 00 
30af9 66b 66 66 66 00 
30afd 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
30b01 66d 66 FF 66 66 
30b05 66e FF 66 00 18 
30b09 66f 7C 06 3C 60 
30b0d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
30b11 671 66 36 18 0C 
30b15 672 66 62 00 38 
30b19 673 6C 38 1C F6 
30b1d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
30b21 675 18 18 18 00 
30b25 676 00 00 00 00 
30b29 677 70 38 18 18 
30b2d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
30b31 679 0E 1C 18 18 
30b35 67a 1C 0E 00 00 
30b39 67b 66 3C FF 3C 
30b3d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
30b41 67d 18 18 7E 18 
30b45 67e 18 00 00 00 
30b49 67f 00 00 00 00 
30b4d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
30b51 681 00 00 7E 00 
30b55 682 00 00 00 00 
30b59 683 00 00 00 00 
30b5d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
30b61 685 60 30 18 0C 
30b65 686 06 02 00 00 
30b69 687 3C 66 76 6E 
30b6d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
30b71 689 18 1C 18 18 
30b75 68a 18 7E 00 00 
30b79 68b 3C 66 30 18 
30b7d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
30b81 68d 7E 30 18 30 
30b85 68e 66 3C 00 00 
30b89 68f 30 38 3C 36 
30b8d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
30b91 691 7E 06 3E 60 
30b95 692 66 3C 00 00 
30b99 693 3C 06 3E 66 
30b9d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
30ba1 695 7E 60 30 18 
30ba5 696 0C 0C 00 00 
30ba9 697 3C 66 3C 66 
30bad 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
30bb1 699 3C 66 7C 60 
30bb5 69a 30 1C 00 00 
30bb9 69b 00 18 18 00 
30bbd 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
30bc1 69d 00 18 18 00 
30bc5 69e 18 18 0C 60 
30bc9 69f 30 18 0C 18 
30bcd 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
30bd1 6a1 00 7E 00 00 
30bd5 6a2 7E 00 00 06 
30bd9 6a3 0C 18 30 18 
30bdd 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
30be1 6a5 3C 66 30 18 
30be5 6a6 00 18 00 00 
30be9 6a7 3C 66 76 76 
30bed 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
30bf1 6a9 18 3C 66 66 
30bf5 6aa 7E 66 00 00 
30bf9 6ab 3E 66 3E 66 
30bfd 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
30c01 6ad 3C 66 06 06 
30c05 6ae 66 3C 00 00 
30c09 6af 1E 36 66 66 
30c0d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
30c11 6b1 7E 06 3E 06 
30c15 6b2 06 7E 00 00 
30c19 6b3 7E 06 3E 06 
30c1d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
30c21 6b5 7C 06 06 76 
30c25 6b6 66 7C 00 00 
30c29 6b7 66 66 7E 66 
30c2d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
30c31 6b9 7E 18 18 18 
30c35 6ba 18 7E 00 00 
30c39 6bb 60 60 60 60 
30c3d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
30c41 6bd 66 36 1E 1E 
30c45 6be 36 66 00 00 
30c49 6bf 06 06 06 06 
30c4d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
30c51 6c1 C6 EE FE D6 
30c55 6c2 C6 C6 00 00 
30c59 6c3 66 6E 7E 7E 
30c5d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
30c61 6c5 3C 66 66 66 
30c65 6c6 66 3C 00 00 
30c69 6c7 3E 66 66 3E 
30c6d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
30c71 6c9 3C 66 66 66 
30c75 6ca 36 6C 00 00 
30c79 6cb 3E 66 66 3E 
30c7d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
30c81 6cd 3C 06 3C 60 
30c85 6ce 60 3C 00 00 
30c89 6cf 7E 18 18 18 
30c8d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
30c91 6d1 66 66 66 66 
30c95 6d2 66          | 	byte	$66[5]
30c96 6d2 7E 00 00 66 
30c9a 6d3 66 66 66 3C 
30c9e 6d4 18 00 00 C6 
30ca2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
30ca6 6d6 C6 00 00 66 
30caa 6d7 66 3C 3C 66 
30cae 6d8 66 00 00 66 
30cb2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
30cb6 6da 18 00 00 7E 
30cba 6db 30 18 0C 06 
30cbe 6dc 7E 00 00 78 
30cc2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
30cc6 6de 78 00 00 02 
30cca 6df 06 0C 18 30 
30cce 6e0 60 00 00 1E 
30cd2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
30cd6 6e2 1E 00 00 10 
30cda 6e3 38 6C C6 00 
30cde 6e4 00 00 00 00 
30ce2 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
30ce6 6e6 FF 00 00 18 
30cea 6e7 3C 7E 7E 3C 
30cee 6e8 18 00 00 00 
30cf2 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
30cf6 6ea 7C 00 00 06 
30cfa 6eb 06 3E 66 66 
30cfe 6ec 3E 00 00 00 
30d02 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
30d06 6ee 3C 00 00 60 
30d0a 6ef 60 7C 66 66 
30d0e 6f0 7C 00 00 00 
30d12 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
30d16 6f2 3C 00 00 70 
30d1a 6f3 18 7C 18 18 
30d1e 6f4 18 00 00 00 
30d22 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
30d26 6f6 60 3E 00 06 
30d2a 6f7 06 3E 66 66 
30d2e 6f8 66 00 00 18 
30d32 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
30d36 6fa 3C 00 00 60 
30d3a 6fb 00 60 60 60 
30d3e 6fc 60 3C 00 06 
30d42 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
30d46 6fe 66 00 00 1C 
30d4a 6ff 18 18 18 18 
30d4e 700 3C 00 00 00 
30d52 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
30d56 702 C6 00 00 00 
30d5a 703 3E 66 66 66 
30d5e 704 66 00 00 00 
30d62 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
30d66 706 3C 00 00 00 
30d6a 707 3E 66 66 3E 
30d6e 708 06 06 00 00 
30d72 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
30d76 70a 60 60 00 00 
30d7a 70b 3E 66 06 06 
30d7e 70c 06 00 00 00 
30d82 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
30d86 70e 3E 00 00 18 
30d8a 70f 7E 18 18 18 
30d8e 710 70 00 00 00 
30d92 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
30d96 712 7C 00 00 00 
30d9a 713 66 66 66 3C 
30d9e 714 18 00 00 00 
30da2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
30da6 716 6C 00 00 00 
30daa 717 66 3C 18 3C 
30dae 718 66 00 00 00 
30db2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
30db6 71a 30 1E 00 00 
30dba 71b 7E 30 18 0C 
30dbe 71c 7E 00 00 18 
30dc2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
30dc6 71e 3C 00 18 18 
30dca 71f 18 18 18 18 
30dce 720 18 18 00 7E 
30dd2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
30dd6 722 60 00 10 18 
30dda 723 1C 1E 1C 18 
30dde 724 10 00 08 18 
30de2 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
30de6 726 08 00       | 	byte	$08, $00
30de8 727 00 00 00 00 
30dec 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
30ded 728 80 00 00 00 
30df1 729 00 80 00 00 
30df5 72a 80 80 00 00 
30df9 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
30dfd 72c 80 00 80 00 
30e01 72d 00 40 80 00 
30e05 72e AA AA AA 00 
30e09 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
30e0d 730 FF 00 00 00 
30e11 731 00 FF 00 00 
30e15 732 FF FF 00 00 
30e19 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
30e1d 734 FF 00 FF 00 
30e21 735 00 FF FF 00 
30e25 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
30e28 737 00 00 00 00 
30e2c 738 00          | ataripalette   file "ataripalettep2.def"
30e2d 738 11 11 11 00 
30e31 739 22 22 22 00 
30e35 73a 33 33 33 00 
30e39 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
30e3d 73c 55 55 55 00 
30e41 73d 66 66 66 00 
30e45 73e 77 77 77 00 
30e49 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
30e4d 740 99 99 99 00 
30e51 741 AA AA AA 00 
30e55 742 BB BB BB 00 
30e59 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
30e5d 744 DD DD DD 00 
30e61 745 EE EE EE 00 
30e65 746 FF FF FF 00 
30e69 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
30e6d 748 00 14 40 00 
30e71 749 00 1E 60 00 
30e75 74a 00 28 80 00 
30e79 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
30e7d 74c 00 3C BF 00 
30e81 74d 00 46 DF 00 
30e85 74e 00 50 FF 00 
30e89 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
30e8d 750 39 77 FF 00 
30e91 751 55 8A FF 00 
30e95 752 71 9E FF 00 
30e99 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
30e9d 754 AA C5 FF 00 
30ea1 755 C6 D8 FF 00 
30ea5 756 E3 EC FF 00 
30ea9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
30ead 758 00 00 40 00 
30eb1 759 00 00 60 00 
30eb5 75a 00 00 80 00 
30eb9 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
30ebd 75c 00 00 BF 00 
30ec1 75d 00 00 DF 00 
30ec5 75e 00 00 FF 00 
30ec9 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
30ecd 760 39 39 FF 00 
30ed1 761 55 55 FF 00 
30ed5 762 71 71 FF 00 
30ed9 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
30edd 764 AA AA FF 00 
30ee1 765 C6 C6 FF 00 
30ee5 766 E3 E3 FF 00 
30ee9 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
30eed 768 20 00 40 00 
30ef1 769 30 00 60 00 
30ef5 76a 40 00 80 00 
30ef9 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
30efd 76c 60 00 BF 00 
30f01 76d 70 00 DF 00 
30f05 76e 80 00 FF 00 
30f09 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
30f0d 770 9C 39 FF 00 
30f11 771 AA 55 FF 00 
30f15 772 B8 71 FF 00 
30f19 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
30f1d 774 D5 AA FF 00 
30f21 775 E3 C6 FF 00 
30f25 776 F1 E3 FF 00 
30f29 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
30f2d 778 40 00 40 00 
30f31 779 60 00 60 00 
30f35 77a 80 00 80 00 
30f39 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
30f3d 77c BF 00 BF 00 
30f41 77d DF 00 DF 00 
30f45 77e FF 00 FF 00 
30f49 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
30f4d 780 FF 39 FF 00 
30f51 781 FF 55 FF 00 
30f55 782 FF 71 FF 00 
30f59 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
30f5d 784 FF AA FF 00 
30f61 785 FF C6 FF 00 
30f65 786 FF E3 FF 00 
30f69 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
30f6d 788 40 00 20 00 
30f71 789 60 00 30 00 
30f75 78a 80 00 40 00 
30f79 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
30f7d 78c BF 00 60 00 
30f81 78d DF 00 70 00 
30f85 78e FF 00 80 00 
30f89 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
30f8d 790 FF 39 9C 00 
30f91 791 FF 55 AA 00 
30f95 792 FF 71 B8 00 
30f99 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
30f9d 794 FF AA D5 00 
30fa1 795 FF C6 E3 00 
30fa5 796 FF E3 F1 00 
30fa9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
30fad 798 40 00 00 00 
30fb1 799 60 00 00 00 
30fb5 79a 80 00 00 00 
30fb9 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
30fbd 79c BF 00 00 00 
30fc1 79d DF 00 00 00 
30fc5 79e FF 00 00 00 
30fc9 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
30fcd 7a0 FF 39 39 00 
30fd1 7a1 FF 55 55 00 
30fd5 7a2 FF 71 71 00 
30fd9 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
30fdd 7a4 FF AA AA 00 
30fe1 7a5 FF C6 C6 00 
30fe5 7a6 FF E3 E3 00 
30fe9 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
30fed 7a8 40 10 00 00 
30ff1 7a9 60 18 00 00 
30ff5 7aa 80 20 00 00 
30ff9 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
30ffd 7ac BF 30 00 00 
31001 7ad DF 38 00 00 
31005 7ae FF 40 00 00 
31009 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3100d 7b0 FF 6A 39 00 
31011 7b1 FF 80 55 00 
31015 7b2 FF 95 71 00 
31019 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3101d 7b4 FF BF AA 00 
31021 7b5 FF D5 C6 00 
31025 7b6 FF EA E3 00 
31029 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3102d 7b8 40 20 00 00 
31031 7b9 60 30 00 00 
31035 7ba 80 40 00 00 
31039 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3103d 7bc BF 60 00 00 
31041 7bd DF 70 00 00 
31045 7be FF 80 00 00 
31049 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3104d 7c0 FF 9C 39 00 
31051 7c1 FF AA 55 00 
31055 7c2 FF B8 71 00 
31059 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3105d 7c4 FF D5 AA 00 
31061 7c5 FF E3 C6 00 
31065 7c6 FF F1 E3 00 
31069 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3106d 7c8 40 30 00 00 
31071 7c9 60 48 00 00 
31075 7ca 80 60 00 00 
31079 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3107d 7cc BF 90 00 00 
31081 7cd DF A8 00 00 
31085 7ce FF C0 00 00 
31089 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3108d 7d0 FF CE 39 00 
31091 7d1 FF D5 55 00 
31095 7d2 FF DC 71 00 
31099 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3109d 7d4 FF EA AA 00 
310a1 7d5 FF F1 C6 00 
310a5 7d6 FF F8 E3 00 
310a9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
310ad 7d8 30 40 00 00 
310b1 7d9 48 60 00 00 
310b5 7da 60 80 00 00 
310b9 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
310bd 7dc 90 BF 00 00 
310c1 7dd A8 DF 00 00 
310c5 7de C0 FF 00 00 
310c9 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
310cd 7e0 CE FF 39 00 
310d1 7e1 D5 FF 55 00 
310d5 7e2 DC FF 71 00 
310d9 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
310dd 7e4 EA FF AA 00 
310e1 7e5 F1 FF C6 00 
310e5 7e6 F8 FF E3 00 
310e9 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
310ed 7e8 00 40 00 00 
310f1 7e9 00 60 00 00 
310f5 7ea 00 80 00 00 
310f9 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
310fd 7ec 00 BF 00 00 
31101 7ed 00 DF 00 00 
31105 7ee 00 FF 00 00 
31109 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3110d 7f0 39 FF 39 00 
31111 7f1 55 FF 55 00 
31115 7f2 71 FF 71 00 
31119 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3111d 7f4 AA FF AA 00 
31121 7f5 C6 FF C6 00 
31125 7f6 E3 FF E3 00 
31129 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3112d 7f8 00 40 14 00 
31131 7f9 00 60 1E 00 
31135 7fa 00 80 28 00 
31139 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3113d 7fc 00 BF 3C 00 
31141 7fd 00 DF 46 00 
31145 7fe 00 FF 50 00 
31149 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3114d 800 39 FF 77 00 
31151 801 55 FF 8A 00 
31155 802 71 FF 9E 00 
31159 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3115d 804 AA FF C5 00 
31161 805 C6 FF D8 00 
31165 806 E3 FF EC 00 
31169 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3116d 808 00 40 28 00 
31171 809 00 60 3C 00 
31175 80a 00 80 50 00 
31179 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3117d 80c 00 BF 78 00 
31181 80d 00 DF 8C 00 
31185 80e 00 FF A0 00 
31189 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3118d 810 39 FF B5 00 
31191 811 55 FF C0 00 
31195 812 71 FF CA 00 
31199 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3119d 814 AA FF DF 00 
311a1 815 C6 FF EA 00 
311a5 816 E3 FF F4 00 
311a9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
311ad 818 00 40 40 00 
311b1 819 00 60 60 00 
311b5 81a 00 80 80 00 
311b9 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
311bd 81c 00 BF BF 00 
311c1 81d 00 DF DF 00 
311c5 81e 00 FF FF 00 
311c9 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
311cd 820 39 FF FF 00 
311d1 821 55 FF FF 00 
311d5 822 71 FF FF 00 
311d9 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
311dd 824 AA FF FF 00 
311e1 825 C6 FF FF 00 
311e5 826 E3 FF FF 00 
311e9 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
311ed 828 00 28 40 00 
311f1 829 00 3C 60 00 
311f5 82a 00 50 80 00 
311f9 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
311fd 82c 00 78 BF 00 
31201 82d 00 8C DF 00 
31205 82e 00 A0 FF 00 
31209 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3120d 830 39 B5 FF 00 
31211 831 55 C0 FF 00 
31215 832 71 CA FF 00 
31219 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3121d 834 AA DF FF 00 
31221 835 C6 EA FF 00 
31225 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
31228 837             | 
31228 837             | '**********************************************************************************
31228 837             | '
31228 837             | '        Timings and colors definitions
31228 837             | '
31228 837             | '**********************************************************************************
31228 837             | 
31228 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
31228 837 10 00 00 00 
3122c 838 50 00 00 00 
31230 839 0C 00 00 00 
31234 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
31238 83b 08 00 00 00 
3123c 83c 04 00 00 00 
31240 83d 08 00 00 00 
31244 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
31248 83f 40 02 00 00 
3124c 840 6A 8C 15 14 
31250 841 FB 06 B7 01 
31254 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
31258 843 00 00 00 00 
3125c 844 C0 00 00 00 
31260 845 00 00 00 00 
31264 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31268 847 00 75 C7 97 
3126c 848 27 47 F6 0A 
31270 849 05 79 CB 9B 
31274 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
31278 84b             | 
31278 84b             | ''--------  Initialization  ----------------------------------------------------------------
31278 84b             | 
31278 84b 28 0C 64 FD | hdmi            setq    #6
3127c 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
31280 84d 28 10 64 FD |                 setq    #8
31284 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
31288 84f             | 
31288 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3128c 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
31290 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
31294 852 D6 C6 01 F1 |                 add     t1,hbase
31298 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3129c 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
312a0 855 7B 0B 80 5F 
312a4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
312a8 857 66 66 86 FF 
312ac 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
312b0 859             | '
312b0 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
312b4 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
312b8 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
312bc 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
312c0 85d             | 
312c0 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
312c4 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
312c8 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
312cc 860             | 
312cc 860             | ''--------  frame rendering main loop  ---------------------------------------------------
312cc 860             | 
312cc 860 28 06 64 FD | p101            setq 	#3
312d0 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
312d4 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
312d8 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
312dc 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
312e0 865 00 A0 05 F6 |                 mov     dlinum, #0
312e4 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
312e8 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
312ec 868             | 
312ec 868             | 
312ec 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
312f0 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
312f4 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
312f8 86b             |                 
312f8 86b             | 
312f8 86b             | 
312f8 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
312f8 86b             |   
312f8 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
312fc 86c 29 FE 65 3D |          if_nc  setq2   #255
31300 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
31304 86e             | 
31304 86e             | '' -----   up porch (before the picture)
31304 86e             | 
31304 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
31308 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3130c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
31310 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
31314 872             |  
31314 872             |    
31314 872             |  
31314 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
31318 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3131c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
31320 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
31324 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
31328 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3132c 878             | 
3132c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
31330 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
31334 87a 48 00 B0 FD | 		call    #dli
31338 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3133c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
31340 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
31344 87e             |                 	
31344 87e             |                 
31344 87e             | 
31344 87e             |  
31344 87e             | '' ------- the main screen drawing starts here
31344 87e             | 
31344 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
31348 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3134c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
31350 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
31354 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
31358 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3135c 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
31360 885             |               
31360 885             | 
31360 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
31364 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
31368 887             | 
31368 887             | ' ---------------- All visible lines displayed now, start vblank  
31368 887             | 
31368 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3136c 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
31370 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
31374 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
31378 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3137c 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
31380 88d             | 
31380 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
31380 88d             | 
31380 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
31380 88d             | 
31380 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
31384 88e             | 
31384 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
31388 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3138c 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
31390 891             | 
31390 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
31394 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
31398 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3139c 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
313a0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
313a4 896             | 
313a4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
313a8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
313ac 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
313b0 899 70 00 90 AD |     if_z        jmp     #preload
313b4 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
313b8 89b 94 00 90 AD |     if_z        jmp     #preload2
313bc 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
313c0 89d 0C 00 90 AD |     if_z        jmp     #p390
313c4 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
313c8 89f 28 00 90 AD |     if_z        jmp     #p391  
313cc 8a0             | 
313cc 8a0 2D 00 64 FD | p308            ret
313d0 8a1             |    
313d0 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
313d4 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
313d8 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
313dc 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
313e0 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
313e4 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
313e8 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
313ec 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
313f0 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
313f4 8aa             |  
313f4 8aa             | '' --------  Reload palette. To do 
313f4 8aa             | 
313f4 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
313f8 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
313fc 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
31400 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
31404 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
31408 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3140c 8b0 70 FF 9F FD |         	jmp     #dli                
31410 8b1             |       
31410 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
31410 8b1             | 
31410 8b1             | 
31410 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
31410 8b1             | 
31410 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
31414 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
31418 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3141c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
31420 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
31424 8b6             |         
31424 8b6             | '' -------------- Preload a line from PSRAM        
31424 8b6             |         
31424 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
31428 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3142c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
31430 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
31434 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
31438 8bb             | 
31438 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3143c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
31440 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
31444 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
31448 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3144c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
31450 8c1             |  
31450 8c1             |  
31450 8c1             | preload2      '  incmod  dlinum,#3
31450 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
31454 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
31458 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3145c 8c4 28 02 64 FD |                 setq	#1
31460 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
31464 8c6             |                 
31464 8c6             | 
31464 8c6             | '' -------------- Draw sprites
31464 8c6             | 
31464 8c6 CF 5C 02 F6 | sprite          mov t8,frames
31468 8c7 10 5C 0E F5 | 		and t8,#16 wz
3146c 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
31470 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
31474 8ca             | 		
31474 8ca             | 
31474 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
31478 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3147c 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
31480 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
31484 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
31488 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3148c 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
31490 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
31494 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
31498 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3149c 8d4 01 52 86 F1 |                 sub     sprite_h,#1
314a0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
314a4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
314a8 8d7             | 
314a8 8d7             | 
314a8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
314ac 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
314b0 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
314b4 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
314b8 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
314bc 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
314c0 8dd 00 5E 06 F6 |                 mov 	t9,#0
314c4 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
314c8 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
314cc 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
314d0 8e1             |      
314d0 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
314d4 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
314d8 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
314dc 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
314e0 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
314e4 8e6             |                 
314e4 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
314e8 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
314ec 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
314f0 8e9             |   		
314f0 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
314f4 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
314f8 8eb             | 
314f8 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
314fc 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
31500 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
31504 8ee             |  
31504 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
31508 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3150c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
31510 8f1             | 	
31510 8f1             | 	
31510 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
31514 8f2 28 CD 01 F1 | 		add	t4,sprite_w
31518 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3151c 8f4             | 
3151c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
31520 8f5             | 
31520 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
31524 8f6 01 58 86 F1 | 	 	sub     t6,#1
31528 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3152c 8f8             | 
3152c 8f8 28 58 62 FD |                 setq   	t6
31530 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
31534 8fa 28 5D 02 F6 |                 mov t8,sprite_w
31538 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3153c 8fc 24 00 90 AD |         if_z    jmp #p898
31540 8fd             |          
31540 8fd             |         
31540 8fd 70 5F 06 F6 |                 mov  t9,#368
31544 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
31548 8ff             | 
31548 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3154c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
31550 901 FF FF 7F FF 
31554 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
31558 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3155c 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
31560 905 2D 01 00 F5 |                 and 0-0, t7
31564 906             |                
31564 906             | 
31564 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
31568 907 E5 E0 7A FA |                 wmlong 368,t3				
3156c 908             |                 
3156c 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
31570 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
31574 90a 2D 00 64 FD |                 ret
31578 90b             | 	
31578 90b             | 	
31578 90b             |                
31578 90b             |  
31578 90b             | '' -------------- Graphics line ------------------------------------------------------------
31578 90b             |  
31578 90b             | 
31578 90b             | '' consts and vars
31578 90b             | 
31578 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3157c 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
31580 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
31584 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
31588 90f             | 
31588 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3158c 910             | 
3158c 910             | '------ these longs will be set by setmode function
3158c 910             | 
3158c 910 00 00 00 00 | m_bs            long    0        'blanks before sync
31590 911 00 00 00 00 | m_sn            long    0        'sync
31594 912 00 00 00 00 | m_bv            long    0        'blanks before visible
31598 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3159c 914             | 'm_border        long    0        'left/right borders
3159c 914 00 00 00 00 | i_upporch       long    0        'up porch lines
315a0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
315a4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
315a8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
315ac 918 00 00 00 00 | i_totalvis      long    0
315b0 919             | 
315b0 919             | '-------------------------------------
315b0 919             |  
315b0 919 00 00 00 00 | linenum         long    0
315b4 91a 00 00 00 00 | frames          long    0
315b8 91b 00 00 00 00 | dlinum long 0
315bc 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
315c0 91d             | 
315c0 91d 00 00 00 00 | vblankptr       long    0
315c4 91e 00 00 00 00 | modeptr         long    0
315c8 91f 00 00 00 00 | paletteptr      long    0
315cc 920 00 00 00 00 | dlptr           long    0
315d0 921 01 00 00 00 | hbase           long    1
315d4 922 00 00 00 00 | mailbox         long    0
315d8 923 00 00 00 00 | spriteptr          long 0
315dc 924             | 
315dc 924 00 00 00 00 | cmd             long    0
315e0 925 00 B0 07 00 | buf1            long    $80000-16384-4096
315e4 926 00 04 00 00 | buf2            long    1024
315e8 927 01 00 00 00 | dlptr2          long    1
315ec 928 01 00 00 00 | dl              long    1
315f0 929             | 
315f0 929 00 00 00 00 | buf1c long 0
315f4 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
315f8 92b 01 00 00 00 | framebuf2       long    1
315fc 92c 01 00 00 00 | hsync0          long    1
31600 92d 01 00 00 00 | hsync1          long    1
31604 92e             | 
31604 92e 01 00 00 00 | t1              long    1
31608 92f 00 00 00 00 | t2 long 0
3160c 930 00 00 00 00 | t3 long 0
31610 931 00 00 00 00 | t4 long 0
31614 932             | 
31614 932 00 00 00 00 | rcnt            long    0  'dl repeat count
31618 933 00 00 00 00 | rcnt2           long    0
3161c 934 00 00 00 00 | rcnt2a          long    0
31620 935 00 00 00 00 | roffset         long    0
31624 936 00 00 00 00 | rdl             long    0  'dl repeat line
31628 937 00 00 00 00 | dlc             long    0  'dl command
3162c 938             | 
3162c 938 FF FF FF FF | affffffff       long    $ffffffff
31630 939 00 00 00 00 | sprite1pointer long 0
31634 93a 00 00 00 00 | sprite1xy      long 0
31638 93b 00 00 00 00 | sprite1wh      long 0
3163c 93c 00 00 00 00 | sprite2pointer long 0
31640 93d 00 00 00 00 | sprite2xy      long 0
31644 93e 00 00 00 00 | sprite2wh      long 0
31648 93f 00 00 00 00 | sprite3pointer long 0
3164c 940 00 00 00 00 | sprite3xy      long 0
31650 941 00 00 00 00 | sprite3wh      long 0
31654 942 00 00 00 00 | sprite4pointer long 0
31658 943 00 00 00 00 | sprite4xy      long 0
3165c 944 00 00 00 00 | sprite4wh      long 0
31660 945 00 00 00 00 | sprite5pointer long 0
31664 946 00 00 00 00 | sprite5xy      long 0
31668 947 00 00 00 00 | sprite5wh      long 0
3166c 948 00 00 00 00 | sprite6pointer long 0
31670 949 00 00 00 00 | sprite6xy      long 0
31674 94a 00 00 00 00 | sprite6wh      long 0
31678 94b 00 00 00 00 | sprite7pointer long 0
3167c 94c 00 00 00 00 | sprite7xy      long 0
31680 94d 00 00 00 00 | sprite7wh      long 0
31684 94e 00 00 00 00 | sprite8pointer long 0
31688 94f 00 00 00 00 | sprite8xy      long 0
3168c 950 00 00 00 00 | sprite8wh      long 0
31690 951 00 00 00 00 | sprite9pointer long 0
31694 952 00 00 00 00 | sprite9xy      long 0
31698 953 00 00 00 00 | sprite9wh      long 0
3169c 954 00 00 00 00 | sprite10pointer long 0
316a0 955 00 00 00 00 | sprite10xy      long 0
316a4 956 00 00 00 00 | sprite10wh      long 0
316a8 957 00 00 00 00 | sprite11pointer long 0
316ac 958 00 00 00 00 | sprite11xy      long 0
316b0 959 00 00 00 00 | sprite11wh      long 0
316b4 95a 00 00 00 00 | sprite12pointer long 0
316b8 95b 00 00 00 00 | sprite12xy      long 0
316bc 95c 00 00 00 00 | sprite12wh      long 0
316c0 95d 00 00 00 00 | sprite13pointer long 0
316c4 95e 00 00 00 00 | sprite13xy      long 0
316c8 95f 00 00 00 00 | sprite13wh      long 0
316cc 960 00 00 00 00 | sprite14pointer long 0
316d0 961 00 00 00 00 | sprite14xy      long 0
316d4 962 00 00 00 00 | sprite14wh      long 0
316d8 963 00 00 00 00 | sprite15pointer long 0
316dc 964 00 00 00 00 | sprite15xy      long 0
316e0 965 00 00 00 00 | sprite15wh      long 0
316e4 966 00 00 00 00 | sprite16pointer long 0
316e8 967 00 00 00 00 | sprite16xy      long 0
316ec 968 00 00 00 00 | sprite16wh      long 0
316f0 969 00 00 00 00 | sprite17pointer long 0
316f4 96a 00 00 00 00 | sprite17xy      long 0
316f8 96b 00 00 00 00 | sprite17wh      long 0
316fc 96c 00 00 00 00 | sprite18pointer long 0
31700 96d 00 00 00 00 | sprite18xy      long 0
31704 96e 00 00 00 00 | sprite18wh      long 0
31708 96f 00 00 00 00 | spritenum long 0
3170c 970             | 
3170c 970 00 00 00 00 | spriteline long 0
31710 971 84 03 00 00 | sprite_x long 900
31714 972 00 00 00 00 | sprite_y long 0
31718 973 10 00 00 00 | sprite_w long 16
3171c 974 40 00 00 00 | sprite_h long 64
31720 975 00 00 00 00 | l2 long 0
31724 976 00 00 00 00 | t5 long 0
31728 977 00 00 00 00 | t6 long 0
3172c 978 00 00 00 00 | t7 long 0
31730 979 00 00 00 00 | t8 long 0
31734 97a 00 00 00 00 | t9 long 0
31738 97b 00 00 00 00 | preloadaddr long 0
3173c 97c 00 00 00 00 | preloadlineaddr long 0
31740 97d 00 04 00 00 | a1024 long 1024
31744 97e             | 
31744 97e E0 03 00 00 | aa long 992
31748 97f FF 03 00 00 | a1023 long 1023
3174c 980 00 10 00 00 | a4096 long 4096
31750 981             |  fit 368
31750 981             | _psram_spin2_dat_
31750 981 00 00 00 00 
      ...             
31848 9bf 00 00 00 00 
3184c 9c0 00 00 00 00 |     listdata long 0[8*8]
31850 9c1             |             orgh
31850                 | 
31850                 | ' driver state
31850     FF FF FF FF | drivercog   long    -1  ' COG id of driver
31854     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
31858                 | 
31858                 | ' delay profile
31858     07 00 00 00 
3185c     00 CF 7B 05 
31860     80 D1 F0 08 
31864     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
31868     80 C4 60 0F 
3186c     80 39 7A 12 
31870     40 2D D9 13 
31874     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
31878                 | 
31878                 | ' data to be passed to driver when starting it
31878                 | startupData
31878     00 00 00 00 |     long    0           ' current frequency
3187c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
31880     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
31884     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
31888     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3188c     98 18 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
31890     18 19 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
31894     38 19 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
31898                 | 
31898                 | ' data for memory
31898                 | deviceData
31898                 |     ' 16 bank parameters follow (16MB per bank)
31898     00 00 00 00 
      ...             
318d0     00 00 00 00 
318d4     00 00 00 00 |     long    0[16]                               ' banks 0-15
318d8                 |     ' 16 banks of pin parameters follow
318d8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
318dc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
318e0     FF FF FF FF 
      ...             
31910     FF FF FF FF 
31914     FF FF FF FF |     long    -1[14]                              ' banks 2-15
31918                 | 
31918                 | ' data for COG polling
31918                 | qosData 
31918     00 00 FF FF 
3191c     00 00 FF FF 
31920     00 00 FF FF 
31924     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
31928     00 00 FF FF 
3192c     00 00 FF FF 
31930     00 00 FF FF 
31934     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
31938                 |     
31938                 | ' mailbox storage
31938                 | 
31938                 | mailboxes
31938     00 00 00 00 
      ...             
31990     00 00 00 00 
31994     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
31998                 | 	alignl
31998                 | _psram16drv_spin2_dat_
31998                 |                             orgh
31998     00 00 00 00 
      ...             
319b0     00 00 00 00 
319b4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
319b8                 | 
319b8                 | driver_start
319b8                 |                             org
319b8 000             | '..................................................................................................
319b8 000             | ' Memory layout for COG RAM once operational:
319b8 000             | '
319b8 000             | '  COG RAM address      Usage
319b8 000             | '  ---------------      ----
319b8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
319b8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
319b8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
319b8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
319b8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
319b8 000             | '  ~$198-$1F3           State and register variables
319b8 000             | '
319b8 000             | ' Also during driver COG startup:
319b8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
319b8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
319b8 000             | '..................................................................................................
319b8 000             |                             
319b8 000             | ' Mailbox storage after vector initialization
319b8 000             | 
319b8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
319bc 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
319c0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
319c4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
319c8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
319cc 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
319d0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
319d4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
319d8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
319dc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
319e0 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
319e4 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
319e8 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
319ec 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
319f0 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
319f4 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
319f8 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
319fc 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
31a00 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
31a04 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
31a08 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
31a0c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
31a10 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
31a14 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
31a18 018             | 
31a18 018             | ' Mailbox parameter addresses per COG once patched
31a18 018             |                             
31a18 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
31a1c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
31a20 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
31a24 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
31a28 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
31a2c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
31a30 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
31a34 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
31a38 020             | 
31a38 020             | '..................................................................................................
31a38 020             | ' Per COG request and state setup and service branching
31a38 020             |         
31a38 020             | cog0                 
31a38 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
31a3c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
31a40 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
31a44 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
31a48 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31a4c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31a50 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
31a54 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
31a58 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
31a5c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31a60 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31a64 02b 33 CA 63 FD |                             execf   request-0               'jump to service
31a68 02c             | cog1                        
31a68 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
31a6c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
31a70 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
31a74 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
31a78 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31a7c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31a80 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
31a84 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
31a88 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
31a8c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31a90 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31a94 037 33 CA 63 FD |                             execf   request-0               'jump to service
31a98 038             | cog2                         
31a98 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
31a9c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
31aa0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
31aa4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
31aa8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31aac 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31ab0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
31ab4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
31ab8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
31abc 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31ac0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31ac4 043 33 CA 63 FD |                             execf   request-0               'jump to service
31ac8 044             | cog3                        
31ac8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
31acc 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
31ad0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
31ad4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
31ad8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31adc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31ae0 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
31ae4 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
31ae8 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
31aec 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31af0 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31af4 04f 33 CA 63 FD |                             execf   request-0               'jump to service
31af8 050             | cog4                        
31af8 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
31afc 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
31b00 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
31b04 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
31b08 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31b0c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31b10 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
31b14 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
31b18 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
31b1c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31b20 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31b24 05b 33 CA 63 FD |                             execf   request-0               'jump to service
31b28 05c             | cog5                        
31b28 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
31b2c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
31b30 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
31b34 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
31b38 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31b3c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31b40 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
31b44 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
31b48 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
31b4c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31b50 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31b54 067 33 CA 63 FD |                             execf   request-0               'jump to service
31b58 068             | cog6                        
31b58 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
31b5c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
31b60 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
31b64 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
31b68 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31b6c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31b70 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
31b74 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
31b78 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
31b7c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31b80 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31b84 073 33 CA 63 FD |                             execf   request-0               'jump to service
31b88 074             | cog7                        
31b88 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
31b8c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
31b90 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
31b94 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
31b98 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
31b9c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
31ba0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
31ba4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
31ba8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
31bac 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
31bb0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
31bb4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
31bb8 080             |                             fit     128
31bb8 080             | 
31bb8 080             |                             fit     128
31bb8 080             | pad                         long    0[128-$]                'align init code to $80
31bb8 080             | 
31bb8 080             | '..................................................................................................
31bb8 080             | 
31bb8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
31bb8 080             | 
31bb8 080             | init                        
31bb8 080             |                             ' get driver scratch long address in hub
31bb8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
31bbc 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
31bc0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
31bc4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
31bc8 084             |                     
31bc8 084             |                             ' read in the additional LUT RAM code
31bc8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
31bcc 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
31bd0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
31bd4 087             | 
31bd4 087             |                             ' read the startup parameters
31bd4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
31bd8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
31bdc 089             | 
31bdc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
31bdc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
31be0 08a             | 
31be0 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
31be4 08b 01 00 00 5F 
31be8 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
31bec 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
31bf0 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
31bf4 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
31bf8 090             | 
31bf8 090             |                             ' setup data pin modes and data bus pin group in streamer commands
31bf8 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
31bfc 091 01 00 00 FF 
31c00 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
31c04 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
31c08 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
31c0c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
31c10 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
31c14 097 08 DE 47 F5 |                             or      a, #8
31c18 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
31c1c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
31c20 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
31c24 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
31c28 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
31c2c 09d 01 DE 07 F1 |                             add     a, #1
31c30 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
31c34 09f             |  
31c34 09f             |                             ' setup device control pin states
31c34 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
31c38 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
31c3c 0a1 01 00 00 FF 
31c40 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
31c44 0a3             | 
31c44 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
31c48 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
31c4c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
31c50 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
31c54 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
31c58 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
31c5c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
31c60 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
31c64 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
31c68 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
31c6c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
31c70 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
31c74 0af             | pinloop
31c74 0af             |                             ' generate minimum CE high time before access
31c74 0af A1 07 00 FF 
31c78 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
31c7c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
31c80 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
31c84 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
31c88 0b4 1F DE 63 FD |                             waitx   a                       'delay
31c8c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
31c90 0b6             | 
31c90 0b6             |                             ' setup the COG mailboxes and addresses 
31c90 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
31c94 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
31c98 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
31c9c 0b9             | 
31c9c 0b9 28 2E 64 FD |                             setq    #24-1
31ca0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
31ca4 0bb             | 
31ca4 0bb             |                             ' setup the polling loop for active COGs 
31ca4 0bb 01 C2 63 FD |                             cogid   id
31ca8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
31cac 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
31cb0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
31cb4 0bf 0A F0 07 F6 |                             mov     ptra, #10
31cb8 0c0 E1 F1 03 FA |                             mul     ptra, id
31cbc 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
31cc0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
31cc4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
31cc8 0c4 03 C2 07 FA |                             mul     id, #3
31ccc 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
31cd0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
31cd4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
31cd8 0c8 D8 01 B0 FD |                             call    #reloadcogs
31cdc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
31ce0 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
31ce4 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
31ce4 0cb D8 E5 B7 F9 |                             setd    d, #addr1
31ce8 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
31cec 0cd 08 04 DC FC |                             rep     #2, #8
31cf0 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
31cf4 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
31cf8 0d0             | 
31cf8 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
31cf8 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
31cf8 0d0 01 C2 63 FD |                             cogid   id
31cfc 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
31d00 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
31d04 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
31d08 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
31d0c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
31d10 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
31d14 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
31d18 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
31d1c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
31d20 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
31d24 0db 3F E4 A7 F9 |                             alti    d, #%111_111
31d28 0dc 00 00 00 F6 |                             mov     0-0, 0-0
31d2c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
31d30 0de A5 E5 03 F1 |                             add     d, const512
31d34 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
31d38 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
31d3c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
31d40 0e2             |                             
31d40 0e2             |                             ' setup register values for control vector loop setup after we return
31d40 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
31d44 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
31d48 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
31d4c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
31d50 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
31d54 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
31d58 0e8 D0 C3 8F F9 |                             altd    id, #id0
31d5c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
31d60 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
31d64 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
31d68 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
31d6c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
31d70 0ee             |  
31d70 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
31d74 0ef 07 CA 07 F5 |                             and     request, #7
31d78 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
31d7c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
31d80 0f2             |                             fit     $100                    'ensure all init code fits this space
31d80 0f2             | 
31d80 0f2             |                             fit     $100                    'ensure all init code fits this space
31d80 0f2             | 
31d80 0f2 00 00 00 00 
      ...             
31db0 0fe 00 00 00 00 
31db4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
31db8 100             | 
31db8 100             | '..................................................................................................
31db8 100             | ' Error result handling and COG notification of request completion
31db8 100             | 
31db8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
31dbc 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
31dc0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
31dc4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
31dc8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
31dcc 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
31dd0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
31dd4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
31dd8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
31ddc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
31de0 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
31de4 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
31de8 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
31dec 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
31df0 10e             | ' Poller re-starts here after a COG is serviced
31df0 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
31df4 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
31df8 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
31dfc 111             | ' Main dynamic polling loop repeats until a request arrives
31dfc 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
31e00 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
31e04 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
31e08 114             | 
31e08 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
31e0c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
31e10 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
31e14 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
31e18 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
31e1c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
31e20 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
31e24 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
31e28 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
31e2c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
31e30 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
31e34 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
31e38 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
31e3c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
31e40 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
31e44 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
31e48 124             | 
31e48 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
31e4c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
31e50 126             |  
31e50 126             | '..................................................................................................
31e50 126             | ' List handler                               
31e50 126             | 
31e50 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
31e54 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
31e58 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
31e5c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
31e60 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
31e64 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
31e68 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
31e6c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
31e70 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
31e74 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
31e78 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
31e7c 131 33 00 60 FD |                             execf   0-0                     'process the request 
31e80 132             | 
31e80 132             | '..................................................................................................
31e80 132             | ' Restoring per COG state and resuming where we left off
31e80 132             | 
31e80 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
31e84 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
31e88 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
31e8c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
31e90 136 D8 CB FB F8 |                             getbyte request, addr1, #3
31e94 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
31e98 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
31e9c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
31ea0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
31ea4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
31ea8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
31eac 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
31eb0 13e             |                    
31eb0 13e             | '..................................................................................................
31eb0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
31eb0 13e             | 
31eb0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
31eb4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
31eb8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
31ebc 141 D0 DF B7 F9 |                             setd    a, #id0
31ec0 142 D8 DF BF F9 |                             sets    a, #addr1
31ec4 143 FE FF FF FF 
31ec8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
31ecc 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
31ed0 146 3F DE A7 F9 |                             alti    a, #%111_111 
31ed4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
31ed8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
31edc 149 01 E2 63 FD |                             cogid   c
31ee0 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
31ee4 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
31ee8 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
31eec 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
31ef0 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
31ef4 14f 00 E0 03 F6 |                             mov     b, 0-0
31ef8 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
31efc 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
31f00 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
31f04 153 0C 00 90 AD |             if_z            jmp     #excluded               
31f08 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
31f0c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
31f10 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
31f14 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
31f18 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
31f1c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
31f20 15a             | 
31f20 15a             | 'determine priority cogs and build instructions for the polling sequence
31f20 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
31f24 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
31f28 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
31f2c 15d             | 
31f2c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
31f30 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
31f34 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
31f38 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
31f3c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
31f40 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
31f44 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
31f48 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
31f4c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
31f50 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
31f54 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
31f58 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
31f5c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
31f60 16a             | endprioloop
31f60 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
31f64 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
31f68 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
31f6c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
31f70 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
31f74 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
31f78 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
31f7c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
31f80 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
31f84 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
31f88 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
31f8c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
31f90 176             | 
31f90 176             | ' populate the round robin COG polling instructions
31f90 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
31f94 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
31f98 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
31f9c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
31fa0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
31fa4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
31fa8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
31fac 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
31fb0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
31fb4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
31fb8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
31fbc 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
31fc0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
31fc4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
31fc8 184             | '..................................................................................................
31fc8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
31fc8 184             | 
31fc8 184             | set_latency                                                 '            (a) set latency
31fc8 184             | get_latency                                                 '            (b) get latency
31fc8 184             | set_burst                                                   '            (c) set burst size of bank
31fc8 184             | get_burst                                                   '            (d) get burst size of bank
31fc8 184             |                                                             '            (e) dump state
31fc8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
31fcc 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
31fd0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
31fd4 187             |                                                             ' | | | | e  account for following AUGS
31fd4 187 04 00 00 FF 
31fd8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
31fdc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
31fe0 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
31fe4 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
31fe8 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
31fec 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
31ff0 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
31ff4 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
31ff8 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
31ffc 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
32000 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
32004 193             | 
32004 193             | '..................................................................................................
32004 193             | ' Misc EXECF code
32004 193             | 
32004 193 33 72 63 FD | start_read_exec             execf   newburstr
32008 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3200c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
32010 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
32014 197             | 
32014 197             | '..................................................................................................
32014 197             | ' Variables
32014 197             | 
32014 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
32018 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3201c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
32020 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
32024 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
32028 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3202c 19d             | 
3202c 19d 00 00 00 80 | xfreq1          long    $80000000
32030 19e 00 00 00 40 | xfreq2          long    $40000000
32034 19f 03 00 00 00 | delay           long    3
32038 1a0             | 
32038 1a0             | lutcodeaddr                 
32038 1a0             | startupparams
32038 1a0             | excludedcogs                                    'careful: shared register use!
32038 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3203c 1a1 00 00 00 00 | flags           long    0
32040 1a2             | mask                                            'careful: shared register use!
32040 1a2 00 00 00 00 | resetmaskA      long    0
32044 1a3             | limit                                           'careful: shared register use!
32044 1a3 00 00 00 00 | resetmaskB      long    0
32048 1a4 00 00 00 00 | datapins        long    0
3204c 1a5             | const512                                        'careful: shared register use!
3204c 1a5 00 00 00 00 | devicelist      long    0
32050 1a6 00 00 00 00 | coglist         long    0
32054 1a7 00 00 00 00 | mbox            long    0 
32058 1a8             | 
32058 1a8             | clkpin                                          'shared with code patched during init
32058 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3205c 1a9             | cspin                                           'shared with code patched during init
3205c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
32060 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
32064 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
32068 1ac 01 00 00 00 | clkdelay        long    1
3206c 1ad 00 00 00 00 | regdatabus      long    0
32070 1ae             | 
32070 1ae 10 00 00 00 | deviceaddr      long    $10
32074 1af             | rrcounter
32074 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
32078 1b0             | 
32078 1b0             | ' jump addresses for the per COG handlers
32078 1b0 20 00 00 00 | cog0_handler    long    cog0
3207c 1b1 2C 00 00 00 | cog1_handler    long    cog1
32080 1b2 38 00 00 00 | cog2_handler    long    cog2
32084 1b3 44 00 00 00 | cog3_handler    long    cog3
32088 1b4 50 00 00 00 | cog4_handler    long    cog4
3208c 1b5 5C 00 00 00 | cog5_handler    long    cog5
32090 1b6 68 00 00 00 | cog6_handler    long    cog6
32094 1b7 74 00 00 00 | cog7_handler    long    cog7
32098 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3209c 1b9             | 
3209c 1b9             | ' EXECF sequences
3209c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
320a0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
320a4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
320a8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
320ac 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
320b0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
320b4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
320b8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
320b8 1c0             | 
320b8 1c0             | 
320b8 1c0             | ' SKIPF sequences
320b8 1c0             | skiptable
320b8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
320bc 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
320c0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
320c4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
320c8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
320cc 1c5 00 00 00 00 | pattern2        long    0
320d0 1c6 00 00 00 00 | pattern3        long    0
320d4 1c7 77 02 00 00 | singlelong      long    %1001110111  
320d8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
320dc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
320e0 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
320e4 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
320e8 1cc             | 
320e8 1cc             | ' LUT RAM address values
320e8 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
320ec 1cd DD 02 00 00 | continue_read   long    continue_read_lut
320f0 1ce DB 02 00 00 | continue_write  long    continue_write_lut
320f4 1cf F6 02 00 00 | noread          long    noread_lut
320f8 1d0             | 
320f8 1d0 00 00 00 00 | id0             long    0
320fc 1d1 01 00 00 00 | id1             long    1
32100 1d2 02 00 00 00 | id2             long    2
32104 1d3 03 00 00 00 | id3             long    3
32108 1d4 04 00 00 00 | id4             long    4
3210c 1d5 05 00 00 00 | id5             long    5
32110 1d6 06 00 00 00 | id6             long    6
32114 1d7 07 00 00 00 | id7             long    7
32118 1d8             | 
32118 1d8             | 'These next 10 request registers below are also temporarily reused during init 
32118 1d8             | 'and COG updates and need to follow immediately after id0-id7
32118 1d8 00 00 00 00 | addr1           long    0
3211c 1d9 00 00 00 00 | hubdata         long    0
32120 1da 00 00 00 00 | count           long    0
32124 1db 00 00 00 00 | addr2           long    0
32128 1dc 00 00 00 00 | total           long    0
3212c 1dd 00 00 00 00 | offset1         long    0
32130 1de 00 00 00 00 | offset2         long    0
32134 1df 00 00 00 00 | link            long    0
32138 1e0             | 
32138 1e0             | burstwrite                                      'note shared register use during init
32138 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3213c 1e1 00 00 00 00 | id              long    0
32140 1e2             | 
32140 1e2 00 00 00 00 | header          long    0
32144 1e3 00 00 00 00 | trailer         long    0
32148 1e4 00 00 00 00 | cmdaddr         long    0
3214c 1e5 00 00 00 00 | request         long    0
32150 1e6 00 00 00 00 | rrlimit         long    0
32154 1e7 00 00 00 00 | pinconfig       long    0
32158 1e8 00 00 00 00 | clks            long    0
3215c 1e9 00 00 00 00 | resume          long    0
32160 1ea 00 00 00 00 | orighubsize     long    0
32164 1eb 00 00 00 00 | wrclks          long    0
32168 1ec             | 
32168 1ec 00 00 00 00 | pattern         long    0
3216c 1ed 00 00 00 00 | hubscratch      long    0
32170 1ee 00 10 00 00 | val4k           long    4096
32174 1ef             | 
32174 1ef             | ' temporary general purpose regs
32174 1ef 00 00 00 00 | a               long    0
32178 1f0 00 00 00 00 | b               long    0
3217c 1f1 00 00 00 00 | c               long    0
32180 1f2 00 00 00 00 | d               long    0
32184 1f3             |                 fit     502
32184 1f3             | 
32184 1f3             |                 fit     502
32184 1f3             | 
32184 1f3             | '..................................................................................................
32184 1f3             | 
32184 1f3             |             orgh
32184                 | 
32184                 | lut_code
32184                 | 'HW init code up to 80 longs
32184                 | 
32184                 | '..................................................................................................
32184                 | ' Memory layout for LUT RAM once operational:
32184                 | '
32184                 | '  LUT RAM address      Usage
32184                 | '  ---------------      ----
32184                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
32184                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
32184                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
32184                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
32184                 | '
32184                 | ' Also during driver COG startup:
32184                 | ' $230-$24F is used for HW init setup
32184                 | ' $250-$26F is used as temporary vector storage 
32184                 | '..................................................................................................
32184                 | 
32184                 |                 org $230    
32184 230             | 
32184 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
32184 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
32188 231 24 16 60 FD |                             pollxfi
3218c 232 FF AA 2A FF 
32190 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
32194 234 28 00 B0 FD |                             call    #sendqspi
32198 235 07 F8 07 FF 
3219c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
321a0 237 28 00 B0 FD |                             call    #sendspi
321a4 238 F8 07 78 FF 
321a8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
321ac 23a 1C 00 B0 FD |                             call    #sendspi
321b0 23b 7F 78 78 FF 
321b4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
321b8 23d 10 00 B0 FD |                             call    #sendspi 
321bc 23e 2D 00 64 FD |                             ret
321c0 23f             | 
321c0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
321c4 240 32 0C 64 FD |                             skipf   #%110
321c8 241 9C EF 03 F6 |                             mov     pb, xsendimm
321cc 242             | 
321cc 242 10 D0 07 F6 | sendspi                     mov     clks, #16
321d0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
321d4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
321d8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
321dc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
321e0 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
321e4 248 24 36 60 FD |                             waitxfi                         'wait for the completion
321e8 249 50 48 63 FD |                             fltl    datapins                'float data bus
321ec 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
321f0 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
321f4 24c             | 
321f4 24c 00 00 00 00 
321f8 24d 00 00 00 00 
321fc 24e 00 00 00 00 
32200 24f 00 00 00 00 |                 long    0[$270-32-$]
32204 250             |                 fit     $270-32  ' keep room for 32 vector longs
32204 250             |     
32204 250             |                 fit     $270-32  ' keep room for 32 vector longs
32204 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
32204 250             | rw_vect ' PSRAM jump vectors
32204 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32208 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3220c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
32210 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
32214 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
32218 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3221c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
32220 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
32224 258             | ro_vect ' R/O PSRAM jump vectors
32224 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
32228 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3222c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
32230 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
32234 25c 00 01 00 00 |                 long    unsupported
32238 25d 00 01 00 00 |                 long    unsupported
3223c 25e 00 01 00 00 |                 long    unsupported
32240 25f 00 01 00 00 |                 long    unsupported
32244 260             | ctrl_vect ' Control jump vectors
32244 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
32248 261 00 01 00 00 |                 long    unsupported
3224c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
32250 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
32254 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
32258 265 00 01 00 00 |                 long    unsupported
3225c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
32260 267 3E 01 00 00 |                 long    reconfig 
32264 268             | no_vect ' Invalid bank jump vectors
32264 268 01 01 00 00 |                 long    invalidbank
32268 269 01 01 00 00 |                 long    invalidbank
3226c 26a 01 01 00 00 |                 long    invalidbank
32270 26b 01 01 00 00 |                 long    invalidbank
32274 26c 01 01 00 00 |                 long    invalidbank
32278 26d 01 01 00 00 |                 long    invalidbank
3227c 26e 01 01 00 00 |                 long    invalidbank
32280 26f 01 01 00 00 |                 long    invalidbank
32284 270             |                 fit     $270
32284 270             | 
32284 270             |                 fit     $270
32284 270             | '..................................................................................................
32284 270             | ' PSRAM READS
32284 270             |                                                             ' a b c d e f
32284 270             |                                                             ' B W L B R L  (a) byte read
32284 270             |                                                             ' Y O O U E O  (b) word read
32284 270             |                                                             ' T R N R S C  (c) long read
32284 270             |                                                             ' E D G S U K  (d) new burst read
32284 270             |                                                             '       T M E  (e) resumed sub-burst
32284 270             |                                                             '         E D  (f) locked sub-burst
32284 270             | 
32284 270             | 
32284 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
32288 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3228c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
32290 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
32294 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
32298 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3229c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
322a0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
322a4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
322a8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
322ac 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
322b0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
322b4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
322b8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
322bc 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
322c0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
322c4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
322c8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
322cc 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
322d0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
322d4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
322d8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
322dc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
322e0 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
322e4 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
322e8 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
322ec 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
322f0 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
322f4 28c             | 
322f4 28c             |                             ' fall through to read bursts
322f4 28c             |                         
322f4 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
322f4 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
322f8 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
322fc 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
32300 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
32304 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
32308 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3230c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
32310 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
32314 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
32318 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3231c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
32320 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
32324 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
32328 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3232c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
32330 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
32334 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
32338 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3233c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
32340 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
32344 2a0 E8 D1 03 F1 |                             add     clks, clks
32348 2a1             | readcommon
32348 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3234c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32350 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
32354 2a4             | 
32354 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
32358 2a5 69 C8 63 FD |                             rev     cmdaddr
3235c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32360 2a7 61 C8 63 FD |                             mergeb  cmdaddr
32364 2a8             | 
32364 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
32368 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3236c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3236c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
32370 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
32374 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
32378 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3237c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3237c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
32380 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
32384 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
32388 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3238c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
32390 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
32394 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
32394 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
32398 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3239c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
323a0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
323a4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
323a8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
323ac 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
323b0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
323b4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
323b8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
323bc 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
323c0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
323c4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
323c8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
323cc 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
323cc 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
323d0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
323d4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
323d8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
323dc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
323e0 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
323e4 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
323e8 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
323ec 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
323f0 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
323f4 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
323f8 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
323fc 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
32400 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
32404 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
32408 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3240c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
32410 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
32414 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
32418 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3241c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
32420 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
32424 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
32428 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3242c 2da 10 03 90 FD |                             jmp     #writecommon
32430 2db             | 
32430 2db             | '..................................................................................................
32430 2db             | ' Burst continuation testing
32430 2db             | 
32430 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
32434 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
32438 2dd             | continue_read_lut          
32438 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3243c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
32440 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
32444 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
32448 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3244c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
32450 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
32454 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
32458 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3245c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
32460 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
32464 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
32468 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3246c 2ea             | 
3246c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
32470 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
32474 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
32478 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3247c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
32480 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
32484 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
32488 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3248c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
32490 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
32494 2f4 2A 1C 66 0D |             _ret_           push    #poller
32498 2f5             | 
32498 2f5             | 
32498 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3249c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3249c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
324a0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
324a4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
324a8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
324ac 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
324b0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
324b4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
324b8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
324bc 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
324c0 2ff             | '..................................................................................................
324c0 2ff             | ' Completion of requests
324c0 2ff             | 
324c0 2ff             | complete_rw_lut             
324c0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
324c4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
324c8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
324cc 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
324d0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
324d4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
324d8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
324dc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
324e0 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
324e4 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
324e8 309 32 62 64 AD |             if_z            skipf   #%110001
324ec 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
324f0 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
324f4 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
324f8 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
324fc 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
32500 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
32504 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
32508 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3250c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
32510 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
32514 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
32518 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3251c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3251c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3251c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3251c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
32520 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
32524 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
32528 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3252c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
32530 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
32534 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
32538 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3253c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
32540 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
32544 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
32548 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3254c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
32550 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
32554 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
32558 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3255c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
32560 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
32564 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
32568 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3256c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
32570 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
32574 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
32578 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3257c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
32580 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
32584 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
32588 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3258c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
32590 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
32594 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
32598 335 DF B7 03 A6 |             if_z            mov     addr2, link
3259c 336 34 FF 9F AD |             if_z            jmp     #checknext
325a0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
325a4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
325a8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
325ac 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
325b0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
325b4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
325b8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
325bc 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
325c0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
325c4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
325c8 341             | 
325c8 341             | '..................................................................................................
325c8 341             | ' PSRAM WRITES
325c8 341             |                                                             '  a b c d e f g h
325c8 341             | 
325c8 341             |                                                             '  B W L F B R L L (a) byte write(s)
325c8 341             |                                                             '  Y O O I U E O O (b) word write(s)
325c8 341             |                                                             '  T R N L R S C C (c) long write(s)
325c8 341             |                                                             '  E D G L S U K K (d) resumed fill
325c8 341             |                                                             '          T M E E (e) new burst write
325c8 341             |                                                             '            E D D (f) resumed burst
325c8 341             |                                                             '              F B (g) locked fill
325c8 341             |                                                             '              I U (h) locked burst write
325c8 341             |                                                             '              L R 
325c8 341             |                                                             '              L S 
325c8 341             |                                                             '                T 
325c8 341             | 
325c8 341             | w_single                   
325c8 341             | w_fill_cont           
325c8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
325cc 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
325d0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
325d4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
325d8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
325dc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
325e0 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
325e4 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
325e8 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
325ec 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
325f0 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
325f4 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
325f8 34d             |                ' disable call to r_resume_burst for single longs when z=0
325f8 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
325fc 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
32600 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
32604 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
32608 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3260c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
32610 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
32614 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
32618 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3261c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
32620 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
32624 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
32628 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3262c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
32630 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
32634 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
32638 35d             |         
32638 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
32638 35d             |             '
32638 35d             |             '  At least one of these 3 optional components will be sent
32638 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
32638 35d             |             '     body - N x full longs of data
32638 35d             |             '     trailer - last partial long of data
32638 35d             |             '
32638 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
32638 35d             |             '
32638 35d             |             'Case    Type                           Sends
32638 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
32638 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
32638 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
32638 35d             |             ' 4)     Multiple long fill             body only
32638 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
32638 35d             | 
32638 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
32638 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3263c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
32640 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
32644 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
32648 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3264c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
32650 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
32654 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
32658 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3265c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
32660 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
32664 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
32668 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3266c 36a             |                             
3266c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
32670 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
32674 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
32678 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3267c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
32680 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
32684 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
32688 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3268c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
32690 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
32694 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
32698 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3269c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
326a0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
326a4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
326a8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
326ac 37a             | 
326ac 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
326b0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
326b4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
326b8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
326bc 37e             |                  
326bc 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
326c0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
326c4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
326c8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
326cc 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
326d0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
326d4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
326d8 385             | 
326d8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
326dc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
326e0 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
326e4 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
326e8 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
326ec 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
326f0 38b             | 
326f0 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
326f0 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
326f4 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
326f8 38d 2A B0 63 FD |                             push    addr1                   'save address
326fc 38e             | 
326fc 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
326fc 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
32700 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
32704 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
32708 391             |             
32708 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3270c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
32710 393 2B B0 63 FD |                             pop     addr1                   'restore address
32714 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
32718 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3271c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
32720 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
32724 398             | 
32724 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
32728 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3272c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
32730 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
32734 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
32738 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3273c 39e             | 
3273c 39e             |                             'trailer is done
3273c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
32740 39f             | 
32740 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
32744 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
32748 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3274c 3a2             | 
3274c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
32750 3a3 69 C8 63 FD |                             rev     cmdaddr                 
32754 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
32758 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3275c 3a6             |                             
3275c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
32760 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
32764 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
32768 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3276c 3aa             |                                                          
3276c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
32770 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
32774 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
32778 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3277c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
32780 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
32784 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
32788 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3278c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
32790 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
32794 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
32798 3b5             |  
32798 3b5 59 52 63 FD |                             drvh    cspin
3279c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
327a0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
327a4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
327a8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
327ac 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
327b0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
327b4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
327b8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
327bc 3be EA E5 03 F6 |                             mov     d, orighubsize
327c0 3bf EF E5 63 F0 |                             shl     d, a
327c4 3c0 F2 E3 83 F1 |                             sub     c, d
327c8 3c1 DD E3 03 F1 |                             add     c, offset1
327cc 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
327d0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
327d4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
327d8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
327dc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
327e0 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
327e4 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
327e8 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
327ec 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
327f0 3cb BB D3 03 F6 |                             mov     resume, restorefill
327f4 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
327f8 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
327fc 3ce 6C FC BF CD |             if_c            call    #yield
32800 3cf 2D 00 64 FD |                             ret
32804 3d0             |                            
32804 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
32804 3d0             |                       '     rczl    pa                      'rotate left into address offset
32804 3d0             |                       '     rczl    c wcz                   'restore count and flags
32804 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
32808 3d1 02 EC 67 F0 |                             shl     pa, #2
3280c 3d2 28 06 64 AD |             if_z            setq    #3
32810 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
32814 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
32818 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3281c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
32820 3d7             | 
32820 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
32824 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
32828 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3282c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
32830 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
32834 3dc             |                 fit 1024-32
32834 3dc             |         
32834 3dc             | 
32834 3dc             | '..................................................................................................
32834 3dc             | 
32834 3dc             |                 fit 1024-32
32834 3dc 00 00 00 00 
32838 3dd 00 00 00 00 
3283c 3de 00 00 00 00 
32840 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
32844 3e0             |                 org 1024-32
32844 000             | 
32844 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
32844 000 00 00 00 00 |                 long $0000
32848 001 11 11 00 00 |                 long $1111
3284c 002 22 22 00 00 |                 long $2222
32850 003 33 33 00 00 |                 long $3333
32854 004 44 44 00 00 |                 long $4444
32858 005 55 55 00 00 |                 long $5555
3285c 006 66 66 00 00 |                 long $6666
32860 007 77 77 00 00 |                 long $7777
32864 008 88 88 00 00 |                 long $8888
32868 009 99 99 00 00 |                 long $9999
3286c 00a AA AA 00 00 |                 long $aaaa
32870 00b BB BB 00 00 |                 long $bbbb
32874 00c CC CC 00 00 |                 long $cccc
32878 00d DD DD 00 00 |                 long $dddd
3287c 00e EE EE 00 00 |                 long $eeee
32880 00f FF FF 00 00 |                 long $ffff
32884 010             | 
32884 010             | 'masks
32884 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
32888 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3288c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
32890 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
32894 014             | 
32894 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
32898 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3289c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
328a0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
328a4 018             | 
328a4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
328a8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
328ac 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
328b0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
328b4 01c             | 
328b4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
328b8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
328bc 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
328c0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
328c4 020             |         fit 1024
328c4 020             | 
328c4 020             |         fit 1024
328c4 020             | 
328c4 020             | '--------------------------------------------------------------------------------------------------
328c4 020             |         orgh
328c4                 | 
328c4                 | gfxexpansion
328c4                 |                             'simple line drawing graphics expansion of memory driver
328c4                 |                             'jmp     #donerepeats                'just return for now
328c4                 | 
328c4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
328c8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
328cc     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
328d0     DD E1 03 F6 |                             mov     b, offset1              'get error term
328d4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
328d8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
328dc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
328e0     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
328e4     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
328e8     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
328ec     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
328f0     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
328f4     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
328f8     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
328fc     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
32900     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
32904     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
32908     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3290c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
32910     DC E5 33 F9 |                             getword d, total, #0            'get line width
32914     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
32918     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3291c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
32920     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
32924     C3 03 80 FD |                             jmp     #readmask               'continue filling
32928                 | 	alignl
32928                 | _usbnew_spin2_dat_
32928                 |                 org     $000
32928 000             | 
32928 000             | usb_host_start
32928 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3292c 001             | 
3292c 001 03 00 00 FF 
32930 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
32934 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
32938 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3293c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
32940 006 29 70 63 FD |                 setq2   htmp
32944 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
32948 008             | 
32948 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3294c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
32950 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
32954 00b             | 
32954 00b             | '------------------------------------------------------------------------------
32954 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
32954 00b             | ' special because the receiving function must not respond with either STALL or
32954 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
32954 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
32954 00b             | ' corrupt packet, it must ignore the transaction
32954 00b             | '------------------------------------------------------------------------------
32954 00b             | ' On entry:
32954 00b             | '   PTRA - start address of the SETUP data struct.
32954 00b             | ' On exit:
32954 00b             | '   retval - PID_ACK on success, otherwise error code.
32954 00b             | '------------------------------------------------------------------------------
32954 00b             | txn_setup
32954 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
32958 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3295c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
32960 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
32964 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
32968 010             | .setup
32968 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3296c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32970 012 2D 00 64 AD |         if_z    ret
32974 013 7C 0B B0 FD |                 call    #retry_wait
32978 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3297c 015 2D 00 64 AD |         if_z    ret
32980 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
32984 017 E0 FF 9F FD |                 jmp     #.setup
32988 018             | 
32988 018             | '------------------------------------------------------------------------------
32988 018             | ' IN/INTERRUPT transaction.
32988 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
32988 018             | '------------------------------------------------------------------------------
32988 018             | ' On entry:
32988 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
32988 018             | '     CRC(b19..23).
32988 018             | ' On exit:
32988 018             | '------------------------------------------------------------------------------
32988 018             | txn_in
32988 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3298c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
32990 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
32994 01b             | 
32994 01b             |                 ' Fall through to urx_packet
32994 01b             | 
32994 01b             | '------------------------------------------------------------------------------
32994 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
32994 01b             | ' received are handshakes and IN DATAx.
32994 01b             | '------------------------------------------------------------------------------
32994 01b             | ' On entry:
32994 01b             | ' On exit:
32994 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
32994 01b             | '     returned.
32994 01b             | '------------------------------------------------------------------------------
32994 01b             | urx_packet
32994 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
32998 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3299c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
329a0 01e 1A 92 63 FD |                 getct   hct2
329a4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
329a8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
329ac 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
329b0 022             | .wait_sop
329b0 022 22 A7 8A FA |                 rdpin   urx, dm
329b4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
329b8 024 08 00 90 CD |         if_c    jmp     #.get_pid
329bc 025 FC 25 CC FB |                 jnct2   #.wait_sop
329c0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
329c4 027             | .get_pid
329c4 027 28 02 B0 FD |                 call    #urx_next
329c8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
329cc 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
329d0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
329d4 02b             | .chk_pid
329d4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
329d8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
329dc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
329e0 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
329e4 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
329e8 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
329ec 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
329f0 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
329f4 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
329f8 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
329fc 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
32a00 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
32a04 037             | .ack_resend
32a04 037 22 A7 82 FA |                 rqpin   urx, dm
32a08 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
32a0c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
32a10 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
32a14 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
32a18 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
32a1c 03d             | .chk_eop
32a1c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
32a20 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
32a24 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
32a28 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
32a2c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
32a30 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
32a34 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
32a38 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
32a3c 045 2D 00 64 FD |                 ret
32a40 046             | .idle
32a40 046 22 A7 82 FA |                 rqpin   urx, dm
32a44 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
32a48 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
32a4c 049 2D 00 64 FD |                 ret
32a50 04a             | 
32a50 04a             | '------------------------------------------------------------------------------
32a50 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
32a50 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
32a50 04a             | ' if one is required.
32a50 04a             | '------------------------------------------------------------------------------
32a50 04a             | ' On entry:
32a50 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
32a50 04a             | ' On exit:
32a50 04a             | '------------------------------------------------------------------------------
32a50 04a             | utx_token
32a50 04a 22 A7 82 FA |                 rqpin   urx, dm
32a54 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
32a58 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
32a5c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
32a60 04e 34 0D B0 CD |         if_c    call    #utx_pre
32a64 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
32a68 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
32a6c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
32a70 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
32a74 053             | .next_byte
32a74 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
32a78 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
32a7c 055             | .wait
32a7c 055 40 46 72 FD |                 testp   dp                      wc
32a80 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
32a84 057 23 03 08 FC |                 akpin   dp
32a88 058 22 A5 22 FC |                 wypin   utx, dm
32a8c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
32a90 05a             | 
32a90 05a             | '------------------------------------------------------------------------------
32a90 05a             | ' SETUP/OUT/INTERRUPT transaction.
32a90 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
32a90 05a             | '------------------------------------------------------------------------------
32a90 05a             | ' On entry:
32a90 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
32a90 05a             | '     CRC(b19..23).
32a90 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
32a90 05a             | '   pkt_data - count of DATAx payload bytes to send.
32a90 05a             | ' On exit:
32a90 05a             | '------------------------------------------------------------------------------
32a90 05a             | txn_out
32a90 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
32a94 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
32a98 05c 00 00 C0 FF 
32a9c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
32aa0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
32aa4 05f             | 
32aa4 05f             |                 ' Fall through to utx_data
32aa4 05f             | 
32aa4 05f             | '------------------------------------------------------------------------------
32aa4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
32aa4 05f             | ' calculated while the data byte is being shifted out. Since data stage
32aa4 05f             | ' success/fail is not determined until the status stage of the transaction,
32aa4 05f             | ' this routine is only concerned about the current DATAx packet.
32aa4 05f             | '------------------------------------------------------------------------------
32aa4 05f             | ' On entry:
32aa4 05f             | '   PTRA - hub start address of the data to read.
32aa4 05f             | '   pkt_cnt - data payload size.
32aa4 05f             | ' On exit:
32aa4 05f             | '------------------------------------------------------------------------------
32aa4 05f             | utx_data
32aa4 05f 22 A7 82 FA |                 rqpin   urx, dm
32aa8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32aac 061 F4 FF 9F CD |         if_c    jmp     #utx_data
32ab0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
32ab4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
32ab8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
32abc 065 D8 0C B0 CD |         if_c    call    #utx_pre
32ac0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
32ac4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
32ac8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
32acc 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
32ad0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
32ad4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
32ad8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
32adc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
32ae0 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
32ae4 06f             | .read_byte
32ae4 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
32ae8 070 F0 00 B0 FD |                 call    #utx_byte
32aec 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
32af0 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
32af4 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
32af8 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
32afc 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
32b00 076             | .send_crc
32b00 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
32b04 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
32b08 078 D0 00 B0 FD |                 call    #utx_byte
32b0c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
32b10 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
32b14 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
32b18 07c             | 
32b18 07c             | '------------------------------------------------------------------------------
32b18 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
32b18 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
32b18 07c             | ' expects that the packet includes at least the CRC word.
32b18 07c             | '
32b18 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
32b18 07c             | ' was requested, which makes it difficult to determine where the data stops
32b18 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
32b18 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
32b18 07c             | ' USB-16 expected residual value of 0xB001.
32b18 07c             | '
32b18 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
32b18 07c             | ' so the caller can verify IN success before writing the data to its final
32b18 07c             | ' destination.
32b18 07c             | '------------------------------------------------------------------------------
32b18 07c             | ' On entry:
32b18 07c             | '   pkt_data - max byte count expected to be in the packet.
32b18 07c             | '   newb_flg - signals new byte ready when toggled.
32b18 07c             | ' On exit:
32b18 07c             | '   pkt_cnt - actual number of bytes read.
32b18 07c             | '------------------------------------------------------------------------------
32b18 07c             | urx_data
32b18 07c F7 75 03 F6 |                 mov     htmp2, pb
32b1c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
32b20 07e 00 00 C0 FF 
32b24 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
32b28 080 BA EF 03 F6 |                 mov     pb, htmp2
32b2c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
32b30 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
32b34 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
32b38 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
32b3c 085             | .wait_byte
32b3c 085             | ' In-line rx for max speed
32b3c 085 22 A7 82 FA |                 rqpin   urx, dm
32b40 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
32b44 087 53 A5 02 F5 |                 and     utx, urx
32b48 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
32b4c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
32b50 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
32b54 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
32b58 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
32b5c 08d DC FF 9F FD |                 jmp     #.wait_byte
32b60 08e             | .get_byte
32b60 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
32b64 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
32b68 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
32b6c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
32b70 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
32b74 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
32b78 094             | .end_crc
32b78 094 01 B8 06 F1 |                 add     pkt_cnt, #1
32b7c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
32b80 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
32b84 097 2D 00 64 1D |         if_a    ret
32b88 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
32b88 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
32b88 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
32b88 098             | ' to miss it, so cheat a bit and look for SOP clear here.
32b88 098 22 A7 82 FA |                 rqpin   urx, dm
32b8c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
32b90 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
32b94 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
32b94 09b             | .chk_crc
32b94 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
32b98 09c 58 00 00 FF 
32b9c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
32ba0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
32ba4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
32ba8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
32bac 0a1 34 09 B0 FD |                 call    #poll_waitx
32bb0 0a2             | 
32bb0 0a2             |                 ' Fall through to utx_handshake
32bb0 0a2             | 
32bb0 0a2             | '------------------------------------------------------------------------------
32bb0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
32bb0 0a2             | ' the appropriate IP delay has been inserted.
32bb0 0a2             | '------------------------------------------------------------------------------
32bb0 0a2             | ' On entry:
32bb0 0a2             | '   retval - handshake PID to send.
32bb0 0a2             | ' On exit:
32bb0 0a2             | '   retval unchanged.
32bb0 0a2             | '------------------------------------------------------------------------------
32bb0 0a2             | utx_handshake
32bb0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
32bb4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
32bb8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
32bbc 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
32bc0 0a6 5F A5 02 F6 |                 mov     utx, retval
32bc4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
32bc8 0a8             | .idle
32bc8 0a8 22 A7 82 FA |                 rqpin   urx, dm
32bcc 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
32bd0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
32bd4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
32bd8 0ac 08 09 90 FD |                 jmp     #poll_waitx
32bdc 0ad             | 
32bdc 0ad             | '------------------------------------------------------------------------------
32bdc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
32bdc 0ad             | '------------------------------------------------------------------------------
32bdc 0ad             | ' On entry:
32bdc 0ad             | '   utx - byte to transmit.
32bdc 0ad             | ' On exit:
32bdc 0ad             | '------------------------------------------------------------------------------
32bdc 0ad             | utx_byte
32bdc 0ad 40 46 72 FD |                 testp   dp                      wc
32be0 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
32be4 0af 23 03 08 FC |                 akpin   dp
32be8 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
32bec 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
32bf0 0b2             | 
32bf0 0b2             | '------------------------------------------------------------------------------
32bf0 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
32bf0 0b2             | '------------------------------------------------------------------------------
32bf0 0b2             | ' On entry:
32bf0 0b2             | ' On exit:
32bf0 0b2             | '   retval - the byte read.
32bf0 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
32bf0 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
32bf0 0b2             | '     received.
32bf0 0b2             | '------------------------------------------------------------------------------
32bf0 0b2             | urx_next
32bf0 0b2 22 A7 8A FA |                 rdpin   urx, dm
32bf4 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
32bf8 0b4 53 A5 02 F5 |                 and     utx, urx
32bfc 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
32c00 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
32c04 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
32c08 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
32c0c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
32c10 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
32c14 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
32c18 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
32c1c 0bd 2D 00 64 FD |                 ret
32c20 0be             | 
32c20 0be             | '------------------------------------------------------------------------------
32c20 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
32c20 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
32c20 0be             | ' length, and the PID is not included in the CRC calculation:
32c20 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
32c20 0be             | '  CRC5  ENDP ADDRESS PID
32c20 0be             | ' %00000_1111_1111111_xxxxxxxx
32c20 0be             | '------------------------------------------------------------------------------
32c20 0be             | ' On entry:
32c20 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
32c20 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
32c20 0be             | ' On exit:
32c20 0be             | '   ep_addr_pid - CRC value appended to the packet.
32c20 0be             | '------------------------------------------------------------------------------
32c20 0be             | calc_crc5
32c20 0be FF 03 00 FF 
32c24 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
32c28 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
32c2c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
32c30 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
32c34 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
32c38 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
32c3c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
32c40 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
32c44 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
32c48 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
32c4c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
32c50 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
32c54 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
32c58 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
32c5c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
32c60 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
32c64 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
32c68 0d0             | 
32c68 0d0             | '------------------------------------------------------------------------------
32c68 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
32c68 0d0             | '------------------------------------------------------------------------------
32c68 0d0             | isr1_fsframe
32c68 0d0 1A 92 62 FD |                 getct   iframe_ct_base
32c6c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
32c70 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
32c74 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
32c78 0d4             | .wait
32c78 0d4 40 46 72 FD |                 testp   dp                      wc
32c7c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
32c80 0d6 23 03 08 FC |                 akpin   dp
32c84 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
32c88 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
32c8c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
32c90 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
32c94 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
32c98 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
32c9c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
32ca0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
32ca4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
32ca8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
32cac 0e1 2C FF BF FD |                 call    #utx_byte
32cb0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
32cb4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
32cb8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
32cbc 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
32cc0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
32cc4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
32cc8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
32ccc 0e9 5B A5 42 F5 |                 or      utx, icrc
32cd0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
32cd4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
32cd8 0ec 20 00 90 FD |                 jmp     #isr1_wait
32cdc 0ed             | isr1_lsframe
32cdc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
32ce0 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
32ce4 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
32ce8 0f0             | .wait
32ce8 0f0 40 46 72 FD |                 testp   dp                      wc
32cec 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
32cf0 0f2 23 03 08 FC |                 akpin   dp
32cf4 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
32cf8 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
32cfc 0f5             | isr1_wait
32cfc 0f5 22 A5 82 FA |                 rqpin   utx, dm
32d00 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
32d04 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
32d08 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
32d0c 0f9 03 00 00 FF 
32d10 0fa FF B3 06 F5 |                 and     frame, ##$7ff
32d14 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
32d18 0fc F5 FF 3B FB |                 reti1
32d1c 0fd             | 
32d1c 0fd             | '------------------------------------------------------------------------------
32d1c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
32d1c 0fd             | ' transaction will complete before the next frame is triggered.
32d1c 0fd             | '------------------------------------------------------------------------------
32d1c 0fd             | ' On entry:
32d1c 0fd             | ' On exit:
32d1c 0fd             | '------------------------------------------------------------------------------
32d1c 0fd             | wait_txn_ok
32d1c 0fd 1A 74 63 FD |                 getct   htmp2
32d20 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
32d24 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
32d28 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
32d2c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
32d30 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
32d34 103 2D 00 64 FD |                 ret
32d38 104             | 
32d38 104             | '------------------------------------------------------------------------------
32d38 104             | ' A device connection was detected, or a bus reset was requested by the USB
32d38 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
32d38 104             | ' and perform a reset sequence prior to device enumeration.
32d38 104             | '------------------------------------------------------------------------------
32d38 104             | dev_reset
32d38 104 22 A7 82 FA |                 rqpin   urx, dm
32d3c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
32d40 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
32d44 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
32d48 108             | reset
32d48 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
32d4c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
32d50 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
32d54 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
32d58 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
32d5c 10d 1A 92 62 FD |                 getct   iframe_ct_base
32d60 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
32d64 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
32d68 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
32d6c 111 24 70 07 F1 |                 add     htmp, #36
32d70 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
32d74 113             | .framewait
32d74 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
32d78 114 F8 FF 9F CD |         if_b    jmp     #.framewait
32d7c 115 2D 00 64 FD |                 ret
32d80 116             | 
32d80 116             | '------------------------------------------------------------------------------
32d80 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
32d80 116             | '------------------------------------------------------------------------------
32d80 116             | ' On entry:
32d80 116             | '   PTRA - source address.
32d80 116             | '   PB - destination address.
32d80 116             | '   hr0 - length of copy, in bytes.
32d80 116             | ' On exit:
32d80 116             | '------------------------------------------------------------------------------
32d80 116             | hmemcpy
32d80 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
32d84 117 F7 71 43 FC |                 wrbyte  htmp, pb
32d88 118 01 EE 07 F1 |                 add     pb, #1
32d8c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
32d90 11a             | 
32d90 11a             | '------------------------------------------------------------------------------
32d90 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
32d90 11a             | ' loop until the errant device is disconnected.
32d90 11a             | '------------------------------------------------------------------------------
32d90 11a             | ' On entry:
32d90 11a             | ' On exit:
32d90 11a             | '------------------------------------------------------------------------------
32d90 11a             | host_error
32d90 11a             |           if ERROR_LED >= 0
32d90 11a             |           end
32d90 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
32d94 11b             | 
32d94 11b             | '------------------------------------------------------------------------------
32d94 11b             | ' Get HID descriptor buffer for current port
32d94 11b             | '------------------------------------------------------------------------------
32d94 11b             | ' On entry:
32d94 11b             | ' On exit:
32d94 11b             | '   PB - HID descriptor buffer pointer
32d94 11b             | '------------------------------------------------------------------------------
32d94 11b             | get_hid_descr_buffer
32d94 11b 2D EF 03 F6 |                 mov     pb, hdev_port
32d98 11c 01 EE E7 F2 |                 cmpsub  pb, #1
32d9c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
32da0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
32da4 11f             | 
32da4 11f             | 
32da4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
32da8 120             | 
32da8 120             | ' USB commands and error codes
32da8 120 00 00 00 00 | cmd_data        long    0
32dac 121 00 00 00 00 | usb_err_code    long    ERR_NONE
32db0 122             | 
32db0 122             | ' Parameters block assigned at cog startup
32db0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
32db4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
32db8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
32dbc 125             | if ACTIVITY_LED >= 0
32dbc 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
32dbc 125             | end
32dbc 125             | if ERROR_LED >= 0
32dbc 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
32dbc 125             | end
32dbc 125 00 00 00 00 | hid_descr_p     long    0
32dc0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
32dc0 126             | 'hkbd_report_p   long    0
32dc0 126 00 00 00 00 | hub_descr_p     long    0
32dc4 127 00 00 00 00 | urx_buff_p      long    0
32dc8 128 00 00 00 00 | dev_desc_buff_p long    0
32dcc 129 00 00 00 00 | con_desc_buff_p long    0
32dd0 12a 00 00 00 00 | cache_start_p   long    0
32dd4 12b 00 00 00 00 | cache_end_p     long    0
32dd8 12c             | if EMUPAD_MAX_PLAYER > 0
32dd8 12c             | emupad_out_ptr  long    0
32dd8 12c             | end
32dd8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
32ddc 12d             | 
32ddc 12d             | hdev_init_start
32ddc 12d             | hdev_port       res     1
32ddc 12d             | hdev_port       res     1
32ddc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
32ddc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
32ddc 12d             | kbm_next_datax  res     1
32ddc 12d             | kbm_next_datax  res     1
32ddc 12d             | hub_intf_num    res     1
32ddc 12d             | hub_intf_num    res     1
32ddc 12d             | hub_next_datax  res     1
32ddc 12d             | hub_next_datax  res     1
32ddc 12d             | hub_status_chg  res     1
32ddc 12d             | hub_status_chg  res     1
32ddc 12d             | hub_port_status res     1
32ddc 12d             | hub_port_status res     1
32ddc 12d             | if HAVE_MOUSE
32ddc 12d             | ms_intf_num     res     1
32ddc 12d             | ms_intf_num     res     1
32ddc 12d             | ms_in_max_pkt   res     1
32ddc 12d             | ms_in_max_pkt   res     1
32ddc 12d             | end
32ddc 12d             | kb_intf_num     res     1
32ddc 12d             | kb_intf_num     res     1
32ddc 12d             | kb_interval     res     1
32ddc 12d             | kb_interval     res     1
32ddc 12d             | kb_in_max_pkt   res     1
32ddc 12d             | kb_in_max_pkt   res     1
32ddc 12d             | kb_max_index    res     1
32ddc 12d             | kb_max_index    res     1
32ddc 12d             | kb_led_states   res     1
32ddc 12d             | kb_led_states   res     1
32ddc 12d             | gp_intf_num     res     1
32ddc 12d             | gp_intf_num     res     1
32ddc 12d             | gp_interval     res     1
32ddc 12d             | gp_interval     res     1
32ddc 12d             | gp_max_index    res     1
32ddc 12d             | gp_max_index    res     1
32ddc 12d             | gp_descr_len    res     1+MAX_DEVICES
32ddc 12d             | gp_descr_len    res     1+MAX_DEVICES
32ddc 12d             | hdev_init_end
32ddc 12d             | 
32ddc 12d             | ' Initialized at cog startup:
32ddc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
32ddc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
32ddc 12d             | iframe_ct_new   res     1
32ddc 12d             | iframe_ct_new   res     1
32ddc 12d             | iframe_ct_base  res     1
32ddc 12d             | iframe_ct_base  res     1
32ddc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
32ddc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
32ddc 12d             | 
32ddc 12d             | ' This register block is reset to zero when a USB device connects
32ddc 12d             | hreg_init_start
32ddc 12d             | hstatus         res     1         ' Host status flags
32ddc 12d             | hstatus         res     1         ' Host status flags
32ddc 12d             | hctwait         res     1         ' Poll-based wait clocks
32ddc 12d             | hctwait         res     1         ' Poll-based wait clocks
32ddc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
32ddc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
32ddc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
32ddc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
32ddc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
32ddc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
32ddc 12d             | xfer_retry      res     1         ' Control transfer retry count
32ddc 12d             | xfer_retry      res     1         ' Control transfer retry count
32ddc 12d             | retry           res     1         ' Transaction retry count
32ddc 12d             | retry           res     1         ' Transaction retry count
32ddc 12d             | utx             res     1         ' Byte to transmit on USB
32ddc 12d             | utx             res     1         ' Byte to transmit on USB
32ddc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
32ddc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
32ddc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
32ddc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
32ddc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
32ddc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
32ddc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
32ddc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
32ddc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
32ddc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
32ddc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
32ddc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
32ddc 12d             | frame           res     1         ' USB 1ms frame counter value
32ddc 12d             | frame           res     1         ' USB 1ms frame counter value
32ddc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
32ddc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
32ddc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
32ddc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
32ddc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
32ddc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
32ddc 12d             | crc             res     1         ' Used for CRC16 calculation
32ddc 12d             | crc             res     1         ' Used for CRC16 calculation
32ddc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
32ddc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
32ddc 12d             | retval          res     1         ' Global success/fail return parameter
32ddc 12d             | retval          res     1         ' Global success/fail return parameter
32ddc 12d             | context_retval  res     1         ' Operation contextual return parameter
32ddc 12d             | context_retval  res     1         ' Operation contextual return parameter
32ddc 12d             | ' Device stuff
32ddc 12d             | hdev_id         res     1+MAX_DEVICES
32ddc 12d             | hdev_id         res     1+MAX_DEVICES
32ddc 12d             | hdev_bcd        res     1
32ddc 12d             | hdev_bcd        res     1
32ddc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
32ddc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
32ddc 12d             | ' Keyboard/mouse stuff
32ddc 12d             | hctrl_ep_addr   res     1
32ddc 12d             | hctrl_ep_addr   res     1
32ddc 12d             | hctrl_max_pkt   res     1
32ddc 12d             | hctrl_max_pkt   res     1
32ddc 12d             | hconfig_base    res     1
32ddc 12d             | hconfig_base    res     1
32ddc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
32ddc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
32ddc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
32ddc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
32ddc 12d             | hdev_class      res     1
32ddc 12d             | hdev_class      res     1
32ddc 12d             | hdev_subclass   res     1
32ddc 12d             | hdev_subclass   res     1
32ddc 12d             | hdev_protocol   res     1
32ddc 12d             | hdev_protocol   res     1
32ddc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
32ddc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
32ddc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
32ddc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
32ddc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
32ddc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
32ddc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
32ddc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
32ddc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
32ddc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
32ddc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
32ddc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
32ddc 12d             | if HAVE_MOUSE
32ddc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
32ddc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
32ddc 12d             | end
32ddc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
32ddc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
32ddc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
32ddc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
32ddc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
32ddc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
32ddc 12d             | hdev_out_addr   res     1
32ddc 12d             | hdev_out_addr   res     1
32ddc 12d             | 
32ddc 12d             | if EMUPAD_MAX_PLAYER > 0
32ddc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
32ddc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
32ddc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
32ddc 12d             | end
32ddc 12d             | 
32ddc 12d             | hreg_init_end
32ddc 12d             | 
32ddc 12d             | hidr_start
32ddc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
32ddc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
32ddc 12d             | hidr_flags      res     1
32ddc 12d             | hidr_flags      res     1
32ddc 12d             | hidr_axis       res     3
32ddc 12d             | hidr_axis       res     3
32ddc 12d             | hidr_buttons    res     1
32ddc 12d             | hidr_buttons    res     1
32ddc 12d             | hidr_hats       res     1
32ddc 12d             | hidr_hats       res     1
32ddc 12d             | '' Above are actually useful values, 6 longs
32ddc 12d             | hidr_id         res     1
32ddc 12d             | hidr_id         res     1
32ddc 12d             | hidr_state      res     1
32ddc 12d             | hidr_state      res     1
32ddc 12d             | hidr_size       res     1
32ddc 12d             | hidr_size       res     1
32ddc 12d             | hidr_count      res     1
32ddc 12d             | hidr_count      res     1
32ddc 12d             | hidr_offset     res     1
32ddc 12d             | hidr_offset     res     1
32ddc 12d             | hidr_usage_idx  res     1
32ddc 12d             | hidr_usage_idx  res     1
32ddc 12d             | hidr_lminmax    res     1
32ddc 12d             | hidr_lminmax    res     1
32ddc 12d             | hidr_pminmax    res     1
32ddc 12d             | hidr_pminmax    res     1
32ddc 12d             | hidr_type       res     1
32ddc 12d             | hidr_type       res     1
32ddc 12d             | hidr_end
32ddc 12d             | 
32ddc 12d             | ' Variables dependent on the system freqency
32ddc 12d             | _var_64_lower_  res     1
32ddc 12d             | _var_64_lower_  res     1
32ddc 12d             | _var_64_upper_  res     1
32ddc 12d             | _var_64_upper_  res     1
32ddc 12d             | _12Mbps_        res     1
32ddc 12d             | _12Mbps_        res     1
32ddc 12d             | _1_5Mbps_       res     1
32ddc 12d             | _1_5Mbps_       res     1
32ddc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
32ddc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
32ddc 12d             | _1us_           res     1         ' 1us
32ddc 12d             | _1us_           res     1         ' 1us
32ddc 12d             | _10us_          res     1         ' 10us
32ddc 12d             | _10us_          res     1         ' 10us
32ddc 12d             | _33us_          res     1         ' 33us
32ddc 12d             | _33us_          res     1         ' 33us
32ddc 12d             | _txn_err_       res     1         ' 250us
32ddc 12d             | _txn_err_       res     1         ' 250us
32ddc 12d             | _500us_         res     1         ' 500us
32ddc 12d             | _500us_         res     1         ' 500us
32ddc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
32ddc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
32ddc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
32ddc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
32ddc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
32ddc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
32ddc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
32ddc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
32ddc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
32ddc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
32ddc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
32ddc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
32ddc 12d             | _preamble_wait_ res     1
32ddc 12d             | _preamble_wait_ res     1
32ddc 12d             | _1ms_           res     1         ' 1ms
32ddc 12d             | _1ms_           res     1         ' 1ms
32ddc 12d             | _2ms_           res     1         ' 2ms
32ddc 12d             | _2ms_           res     1         ' 2ms
32ddc 12d             | _suspend_wait_  res     1         ' 3ms
32ddc 12d             | _suspend_wait_  res     1         ' 3ms
32ddc 12d             | _4ms_           res     1         ' 4ms
32ddc 12d             | _4ms_           res     1         ' 4ms
32ddc 12d             | _xfer_wait_     res     1         ' 5ms
32ddc 12d             | _xfer_wait_     res     1         ' 5ms
32ddc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
32ddc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
32ddc 12d             | _reset_hold_    res     1         ' 15ms
32ddc 12d             | _reset_hold_    res     1         ' 15ms
32ddc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
32ddc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
32ddc 12d             | _21ms_          res     1         ' 21ms
32ddc 12d             | _21ms_          res     1         ' 21ms
32ddc 12d             | _100ms_         res     1         ' 100ms
32ddc 12d             | _100ms_         res     1         ' 100ms
32ddc 12d             | _500ms_         res     1         ' 500ms
32ddc 12d             | _500ms_         res     1         ' 500ms
32ddc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
32ddc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
32ddc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
32ddc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
32ddc 12d             | '------------------------------------------------------------------------------
32ddc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
32ddc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
32ddc 12d             | _usb_d_ls_nco_  res     1
32ddc 12d             | _usb_d_ls_nco_  res     1
32ddc 12d             | _usb_h_fs_nco_  res     1
32ddc 12d             | _usb_h_fs_nco_  res     1
32ddc 12d             | _usb_d_fs_nco_  res     1
32ddc 12d             | _usb_d_fs_nco_  res     1
32ddc 12d             | '------------------------------------------------------------------------------
32ddc 12d             | ' Scratch registers
32ddc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
32ddc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
32ddc 12d             | htmp1           res     1
32ddc 12d             | htmp1           res     1
32ddc 12d             | htmp2           res     1
32ddc 12d             | htmp2           res     1
32ddc 12d             | htmp3           res     1
32ddc 12d             | htmp3           res     1
32ddc 12d             | hrep            res     1         ' Repeat count
32ddc 12d             | hrep            res     1         ' Repeat count
32ddc 12d             | hsave0          res     1         ' Subroutine parameter saves
32ddc 12d             | hsave0          res     1         ' Subroutine parameter saves
32ddc 12d             | hsave1          res     1
32ddc 12d             | hsave1          res     1
32ddc 12d             | hsave2          res     1
32ddc 12d             | hsave2          res     1
32ddc 12d             | isrtmp1         res     1
32ddc 12d             | isrtmp1         res     1
32ddc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
32ddc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
32ddc 12d             | hr0             res     1         ' Multi-purpose registers
32ddc 12d             | hr0             res     1         ' Multi-purpose registers
32ddc 12d             | hr1             res     1
32ddc 12d             | hr1             res     1
32ddc 12d             | hr2             res     1
32ddc 12d             | hr2             res     1
32ddc 12d             | hr3             res     1
32ddc 12d             | hr3             res     1
32ddc 12d             | hpar1           res     1         ' Routine entry/exit parameters
32ddc 12d             | hpar1           res     1         ' Routine entry/exit parameters
32ddc 12d             | hpar2           res     1
32ddc 12d             | hpar2           res     1
32ddc 12d             | hpar3           res     1
32ddc 12d             | hpar3           res     1
32ddc 12d             | hct2            res     1         ' Function response bus turn-around timer
32ddc 12d             | hct2            res     1         ' Function response bus turn-around timer
32ddc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
32ddc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
32ddc 12d             | mod_cnt         res     1         ' Used in idle loops
32ddc 12d             | mod_cnt         res     1         ' Used in idle loops
32ddc 12d             |                 fit     $1F0
32ddc 12d             |                 org     $200
32ddc 200             | hlut_start
32ddc 200             | 
32ddc 200             | '------------------------------------------------------------------------------
32ddc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
32ddc 200             | ' settings to startup defaults.
32ddc 200             | '------------------------------------------------------------------------------
32ddc 200             | ' On entry:
32ddc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
32ddc 200             | '------------------------------------------------------------------------------
32ddc 200             | set_speed_full
32ddc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
32de0 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
32de4 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
32de8 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
32dec 204             | '                ret                             wcz     ' Restore caller flags on exit
32dec 204             | 
32dec 204             | '------------------------------------------------------------------------------
32dec 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
32dec 204             | ' is a downstream hub connected (not yet implemented), the baud generator
32dec 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
32dec 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
32dec 204             | ' putting the smart pins into reset.
32dec 204             | '------------------------------------------------------------------------------
32dec 204             | ' On entry:
32dec 204             | ' On exit: CZ flags restored to caller states
32dec 204             | '------------------------------------------------------------------------------
32dec 204             | set_speed_low
32dec 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
32df0 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
32df4 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
32df8 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
32dfc 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
32e00 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
32e04 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
32e08 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
32e0c 20c             | 
32e0c 20c             | '------------------------------------------------------------------------------
32e0c 20c             | ' Perform configuration stuff required when a device intitially connects.
32e0c 20c             | '------------------------------------------------------------------------------
32e0c 20c             | ' On entry:
32e0c 20c             | ' On exit:
32e0c 20c             | '------------------------------------------------------------------------------
32e0c 20c             | on_connect
32e0c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
32e10 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
32e14 20e             | .retry
32e14 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
32e18 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
32e1c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
32e20 211 00 08 00 FF 
32e24 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
32e28 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
32e2c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
32e30 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
32e34 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
32e38 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
32e3c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32e40 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
32e44 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
32e48 21b 4C 03 B0 FD |                 call    #poll_waitx
32e4c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
32e50 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
32e54 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
32e58 21f B8 FF 9F FD |                 jmp     #.retry
32e5c 220             | .get_dev_desc
32e5c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
32e60 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
32e64 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
32e68 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
32e6c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
32e70 225 88 FB BF FD |                 call    #reset
32e74 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
32e78 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
32e7c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
32e80 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
32e84 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32e88 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
32e8c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
32e90 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
32e94 22e 04 00 00 FF 
32e98 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
32e9c 230 34 FA BF FD |                 call    #calc_crc5
32ea0 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
32ea4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
32ea8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
32eac 234 F7 AD C2 FA |                 rdbyte  total_data, pb
32eb0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
32eb4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
32eb8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32ebc 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
32ec0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
32ec4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
32ec8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
32ecc 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
32ed0 23d C4 02 B0 FD |                 call    #poll_waitx
32ed4 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
32ed8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
32edc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
32ee0 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
32ee4 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
32ee8 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32eec 244 2D 00 64 5D |         if_nz   ret
32ef0 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
32ef4 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
32ef8 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
32efc 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
32f00 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
32f04 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
32f08 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
32f0c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
32f10 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
32f14 24e 2C FB 9F CD |         if_b    jmp     #host_error
32f18 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
32f1c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
32f20 251 2D EC 63 FD |                 call    pa
32f24 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
32f28 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
32f2c 254 2C EC 63 FD |                 jmp     pa
32f30 255             | 
32f30 255             | '------------------------------------------------------------------------------
32f30 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
32f30 255             | ' Status reporting is always in the function-to-host direction.
32f30 255             | '------------------------------------------------------------------------------
32f30 255             | ' On entry:
32f30 255             | '   PTRA - start address of the SETUP data in hub.
32f30 255             | '   PB - start address of the buffer/struct to be written to during the IN data
32f30 255             | '     stage.
32f30 255             | '   ep_addr_pid - device address, endpoint and CRC5.
32f30 255             | ' On exit:
32f30 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
32f30 255             | '     contains the count of data stage bytes actually received, which must
32f30 255             | '     always be <= the count requested.
32f30 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
32f30 255             | '     more specific USB operation error code.
32f30 255             | '------------------------------------------------------------------------------
32f30 255             | control_read
32f30 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
32f34 256 F8 8F 03 F6 |                 mov     hpar2, ptra
32f38 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
32f3c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
32f40 259             | .xfer_start
32f40 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
32f44 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
32f48 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
32f4c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
32f50 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
32f54 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
32f58 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
32f5c 260 61 00 00 FF 
32f60 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
32f64 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
32f68 263             | .data
32f68 263 56 B1 02 F6 |                 mov     pkt_data, total_data
32f6c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
32f70 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
32f74 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
32f78 267             | .nak_retry
32f78 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
32f7c 268             | .in_retry
32f7c 268 BC F6 BF FD |                 call    #txn_in
32f80 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
32f84 26a 28 00 90 AD |         if_z    jmp     #.commit
32f88 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
32f8c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
32f90 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
32f94 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
32f98 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
32f9c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
32fa0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
32fa4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
32fa8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
32fac 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
32fb0 275             | .commit
32fb0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
32fb4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
32fb8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
32fbc 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
32fc0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
32fc4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
32fc8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
32fcc 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
32fd0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
32fd4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
32fd8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
32fdc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
32fe0 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
32fe4 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
32fe8 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
32fec 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
32ff0 285             | .pre_status
32ff0 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
32ff4 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
32ff8 287 00 B0 06 F6 |                 mov     pkt_data, #0
32ffc 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
33000 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
33004 28a 61 00 00 FF 
33008 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3300c 28c             | .out_retry
3300c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
33010 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33014 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
33018 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3301c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
33020 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
33024 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
33028 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3302c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33030 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
33034 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
33038 297             | ' I've encountered transfer STALL, even though the data looks correct, and
33038 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
33038 297             | ' ControlRead() transfer gets things unstuck most of the time...
33038 297             | .xfer_retry
33038 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3303c 298 58 01 B0 FD |                 call    #poll_waitx
33040 299 8C F9 BF FD |                 call    #wait_txn_ok
33044 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
33048 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3304c 29c C8 EF 03 F6 |                 mov     pb, hpar3
33050 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
33054 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
33058 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3305c 2a0             | 
3305c 2a0             | '------------------------------------------------------------------------------
3305c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3305c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3305c 2a0             | ' the SETUP data struct is filled with the required values.
3305c 2a0             | '------------------------------------------------------------------------------
3305c 2a0             | ' On entry:
3305c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3305c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3305c 2a0             | '     stage.
3305c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3305c 2a0             | ' On exit:
3305c 2a0             | '   retval - used to convey the success/failure of each stage.
3305c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3305c 2a0             | '     more specific USB operation error code.
3305c 2a0             | '------------------------------------------------------------------------------
3305c 2a0             | control_write
3305c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
33060 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
33064 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
33068 2a3             | 
33068 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3306c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
33070 2a5 F7 91 03 F6 |                 mov     hpar3, pb
33074 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
33078 2a7             | .xfer_start
33078 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3307c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
33080 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
33084 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33088 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3308c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
33090 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
33094 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
33098 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3309c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
330a0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
330a4 2b2             | .data
330a4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
330a8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
330ac 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
330b0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
330b4 2b6             | .out_retry
330b4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
330b8 2b7 88 F6 BF FD |                 call    #txn_out
330bc 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
330c0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
330c4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
330c8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
330cc 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
330d0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
330d4 2be             | .commit
330d4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
330d8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
330dc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
330e0 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
330e4 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
330e8 2c3             | pre_status_in
330e8 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
330ec 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
330f0 2c5             | .status_retry
330f0 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
330f4 2c6 44 F5 BF FD |                 call    #txn_in
330f8 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
330fc 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
33100 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
33104 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
33108 2cb 2D 00 64 AD |         if_z    ret
3310c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
33110 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33114 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
33118 2cf             | '               ret                                     ' Caller must handle transfer retirement
33118 2cf             | 
33118 2cf             | '------------------------------------------------------------------------------
33118 2cf             | ' Execute an IN interrupt transaction.
33118 2cf             | '------------------------------------------------------------------------------
33118 2cf             | ' On entry:
33118 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
33118 2cf             | '   hpar2 - Address of the IN data buffer
33118 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
33118 2cf             | ' On exit:
33118 2cf             | '   retval - the result of the operation.
33118 2cf             | '   hpar3 - the count of IN data bytes actually received.
33118 2cf             | '------------------------------------------------------------------------------
33118 2cf             | do_int_in
33118 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3311c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
33120 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
33124 2d2             | 
33124 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
33128 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3312c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
33130 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
33134 2d6             | .retry
33134 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
33138 2d7 00 F5 BF FD |                 call    #txn_in
3313c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
33140 2d9 1C 00 90 AD |         if_z    jmp     #.commit
33144 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
33148 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3314c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
33150 2dd 54 00 B0 FD |                 call    #retry_wait
33154 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
33158 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3315c 2e0 D4 FF 9F FD |                 jmp     #.retry
33160 2e1             | .commit
33160 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
33164 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
33168 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3316c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
33170 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
33174 2e6             | .post_ret
33174 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
33178 2e7             | 
33178 2e7             | 
33178 2e7             | '------------------------------------------------------------------------------
33178 2e7             | ' Resets the downstream hub port to FS
33178 2e7             | '------------------------------------------------------------------------------
33178 2e7             | dwnstream_reset
33178 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3317c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
33180 2e9             | 
33180 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
33184 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
33188 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3318c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
33190 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
33194 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
33198 2ef             | 
33198 2ef             | '------------------------------------------------------------------------------
33198 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
33198 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
33198 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
33198 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
33198 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
33198 2ef             | '------------------------------------------------------------------------------
33198 2ef             | ' On entry:
33198 2ef             | '   hctwait - wait interval in sysclocks.
33198 2ef             | ' On exit:
33198 2ef             | '------------------------------------------------------------------------------
33198 2ef             | poll_waitx
33198 2ef 1A 92 63 FD |                 getct   hct2
3319c 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
331a0 2f1             | .wait
331a0 2f1 FF 25 CC FB |                 jnct2   #.wait
331a4 2f2 2D 00 64 FD |                 ret
331a8 2f3             | 
331a8 2f3             | '------------------------------------------------------------------------------
331a8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
331a8 2f3             | '------------------------------------------------------------------------------
331a8 2f3             | ' On entry:
331a8 2f3             | '   retval - transaction response PID or error code.
331a8 2f3             | ' On exit:
331a8 2f3             | '------------------------------------------------------------------------------
331a8 2f3             | retry_wait
331a8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
331ac 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
331b0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
331b4 2f6 14 00 90 AD |         if_z    jmp     #.nak
331b8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
331bc 2f8 D8 FF BF FD |                 call    #poll_waitx
331c0 2f9             | .dec
331c0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
331c4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
331c8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
331cc 2fc             | .nak
331cc 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
331d0 2fd C4 FF BF FD |                 call    #poll_waitx
331d4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
331d8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
331dc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
331e0 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
331e4 302 2D 00 64 FD |                 ret
331e8 303             | 
331e8 303             | host_reset
331e8 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
331ec 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
331f0 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
331f0 305 BD 01 05 FF 
331f4 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
331f8 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
331fc 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
33200 309             | ' Check to see if the system clock has been changed.
33200 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
33204 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
33208 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3320c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
33210 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33214 30e 40 46 62 FD |                 dirl    dp
33218 30f             | 
33218 30f 28 02 64 FD |                 setq    #1
3321c 310 80 00 80 FF 
33220 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
33224 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
33228 313             | .enable
33228 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3322c 314 41 46 62 FD |                 dirh    dp
33230 315 1F 36 63 FD |                 waitx   _1us_
33234 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33238 317             | 
33238 317             |                 ' Handle Port protection enable and startup delay
33238 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3323c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
33240 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
33244 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
33248 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3324c 31c             | 
3324c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
33250 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
33254 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
33258 31f 00 00 04 F6 |                 mov     0-0, #0
3325c 320             | .regloop
3325c 320             | 
3325c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3325c 320             | 
3325c 320             | discon_entry
3325c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
33260 321             | 
33260 321             |               
33260 321             |         if HAVE_HIDPAD
33260 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
33264 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
33268 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3326c 324 F7 01 68 FC |                 wrlong  #0,pb
33270 325             |         end
33270 325             |         if EMUPAD_MAX_PLAYER > 0
33270 325             |         end
33270 325             | 
33270 325             |                 ' Fall through to disconnected loop
33270 325             | 
33270 325             | '-----------------------------------------------------------------------------------------------------------------
33270 325             | ' Device connect handling (Section 7.1.7.3).
33270 325             | '-----------------------------------------------------------------------------------------------------------------
33270 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
33270 325             | ' device to connect (Section 7.1.7.3).
33270 325             | '-----------------------------------------------------------------------------------------------------------------
33270 325             | disconnected
33270 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
33274 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
33278 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3327c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
33280 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
33284 32a             |         if ACTIVITY_LED >= 0
33284 32a             |         end
33284 32a 22 A7 82 FA |                 rqpin   urx, dm
33288 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3328c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
33290 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
33294 32e             | .se1_test
33294 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
33298 32f FC FE BF FD |                 call    #poll_waitx
3329c 330 22 A7 82 FA |                 rqpin   urx, dm
332a0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
332a4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
332a8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
332ac 334             | .se1            'SE1 is a fatal error condition
332ac 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
332b0 335 E4 FE BF FD |                 call    #poll_waitx
332b4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
332b8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
332bc 338             | .connect_test                                           ' Test lines until stable J/K state seen
332bc 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
332c0 339 22 A7 82 FA |                 rqpin   urx, dm
332c4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
332c8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
332cc 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
332d0 33d             | connected
332d0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
332d4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
332d8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
332dc 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
332e0 341             | .set_pulse
332e0 341 1A 64 63 FD |                 getct   _pulse_time_
332e4 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
332e8 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
332e8 343             | ' of 1ms and make a correction, if necessary.
332e8 343             | '                mov     htmp, _1ms_
332e8 343             | '                subs    htmp, iframe_delta
332e8 343             | '                adds    _frame1ms_clks_, htmp
332e8 343             | '                debug(udec(_frame1ms_clks_))
332e8 343             | 
332e8 343             |                 ' Fall through to idle/processing loop
332e8 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
332ec 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
332f0 345             | 
332f0 345             | hidle
332f0 345 22 A7 82 FA |                 rqpin   urx, dm
332f4 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
332f8 347 98 00 90 CD |         if_c    jmp     #.se0_test
332fc 348 24 06 70 FD |                 pollct3                         wc
33300 349 68 00 90 3D |         if_nc   jmp     #.nopoll
33304 34a 1A 94 63 FD |                 getct   hct3
33308 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3330c 34c             | 
3330c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
33310 34d 00 70 E3 F8 |                 getbyte htmp
33314 34e             | 
33314 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
33318 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3331c 350 40 00 90 AD |         if_z    jmp     #.poll
33320 351             | 
33320 351             |         if _HAVE_GAMEPAD
33320 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
33324 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
33328 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3332c 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
33330 355 2C 00 90 AD |         if_z    jmp     #.poll
33334 356             |         end
33334 356             | 
33334 356             |         if HAVE_MOUSE
33334 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
33338 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3333c 358 20 00 90 AD |         if_z    jmp     #.poll
33340 359             |         end
33340 359             | 
33340 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
33344 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
33348 35b 14 00 90 AD |         if_z    jmp     #.poll
3334c 35c             | 
3334c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
33350 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
33354 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
33358 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3335c 360             |         if HAVE_MOUSE
3335c 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
33360 361             |         else
33360 361             |         end
33360 361             | 
33360 361             | .poll
33360 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
33364 362 2D EC 63 FD |                 call    pa
33368 363             | .skip_poll
33368 363             | 
33368 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3336c 364             | 
3336c 364             | .nopoll
3336c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
33370 365 44 00 90 AD |         if_z    jmp     #hsuspend
33374 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
33378 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3337c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
33380 369 1A 84 63 FD |                 getct   hr0
33384 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
33388 36b             |         if ACTIVITY_LED >= 0
33388 36b             |         end
33388 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3338c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
33390 36d 5C FF 9F FD |                 jmp     #hidle
33394 36e             | ' Check for extended SE0 state on the bus
33394 36e             | .se0_test
33394 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
33398 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3339c 370 22 A7 82 FA |                 rqpin   urx, dm
333a0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
333a4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
333a8 373 24 F6 BF FD |                 call    #wait_txn_ok
333ac 374 00 00 80 FF 
333b0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
333b4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
333b4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
333b8 377             | 
333b8 377             | hsuspend
333b8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
333bc 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
333c0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
333c4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
333c8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
333cc 37c 00 96 07 F6 |                 mov     mod_cnt, #0
333d0 37d             | 
333d0 37d             |                 ' Fall through to resume wait loop
333d0 37d             | 
333d0 37d             | hwait_resume
333d0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
333d4 37e 02 86 47 F0 |                 shr     hr1, #2
333d8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
333dc 380             |         if ACTIVITY_LED >= 0
333dc 380             |         end
333dc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
333e0 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
333e4 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
333e8 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
333ec 384 18 00 90 AD |         if_z    jmp     #.resume
333f0 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
333f4 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
333f8 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
333fc 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
33400 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
33404 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
33408 38b             | .resume
33408 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3340c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
33410 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
33414 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
33418 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3341c 390 1F 70 63 FD |                 waitx   htmp
33420 391 22 07 28 FC |                 wypin   #OUT_J, dm
33424 392 01 70 47 F0 |                 shr     htmp, #1
33428 393 1F 70 63 FD |                 waitx   htmp
3342c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
33430 395 1A 92 62 FD |                 getct   iframe_ct_base
33434 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
33438 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3343c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
33440 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
33444 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
33448 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3344c 39c             | 
3344c 39c             | '------------------------------------------------------------------------------
3344c 39c             | ' Send preamble to enable low-speed HUB ports
3344c 39c             | '------------------------------------------------------------------------------
3344c 39c             | ' On entry:
3344c 39c             | ' On exit:
3344c 39c             | '   USB baud rate set to low-speed
3344c 39c             | '------------------------------------------------------------------------------
3344c 39c             | utx_pre
3344c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33450 39d 40 46 62 FD |                 dirl    dp
33454 39e 28 02 64 FD |                 setq    #1
33458 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3345c 3a0 58 44 62 FD |                 drvl    dm
33460 3a1 59 46 62 FD |                 drvh    dp
33464 3a2             | 
33464 3a2 1E 00 00 FF 
33468 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3346c 3a4             | 
3346c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
33470 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
33474 3a6 28 02 64 3D |         if_nc   setq    #1
33478 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3347c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
33480 3a9             | .l1
33480 3a9             | 
33480 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
33484 3aa 40 46 62 FD |                 dirl    dp
33488 3ab 28 02 64 FD |                 setq    #1
3348c 3ac 80 00 80 FF 
33490 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
33494 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
33498 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3349c 3b0 41 46 62 FD |                 dirh    dp
334a0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
334a4 3b2             | 
334a4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
334a8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
334ac 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
334b0 3b5             | 
334b0 3b5             | hlut_end
334b0 3b5             |                 fit     $400
334b0 3b5             |                 orgh
334b0                 | if OVERLAP_MEMORY
334b0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
334b0                 | end
334b0                 | '------------------------------------------------------------------------------
334b0                 | ' Routines called from cog space.
334b0                 | '------------------------------------------------------------------------------
334b0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
334b0                 | '------------------------------------------------------------------------------
334b0                 | 
334b0                 | '------------------------------------------------------------------------------
334b0                 | ' USB host cog initialization.
334b0                 | '------------------------------------------------------------------------------
334b0                 | usb_host_init
334b0                 |                 ' Initialize buffer pointers
334b0                 |         if OVERLAP_MEMORY
334b0                 |         else
334b0     40 15 B0 FE |                 loc     pb, #hid_descr
334b4                 |         end
334b4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
334b8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
334b8                 |                 {
334b8                 |                 }
334b8                 |         
334b8                 |                 {
334b8                 |                 }
334b8                 |                 'loc     pb,#hkbd_report
334b8                 |                 'mov     hkbd_report_p,pb
334b8                 | 
334b8     08 1D B0 FE |                 loc     pb, #hub_descr
334bc     F7 4D 02 F6 |                 mov     hub_descr_p, pb
334c0     1D 1D B0 FE |                 loc     pb, #urx_buff
334c4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
334c8     95 1D B0 FE |                 loc     pb, #dev_desc_buff
334cc     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
334d0     9F 1D B0 FE |                 loc     pb, #con_desc_buff
334d4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
334d8     18 15 B0 FE |                 loc     pb, #usb_cache_start
334dc     F7 55 02 F6 |                 mov     cache_start_p, pb
334e0     E9 1C B0 FE |                 loc     pb, #usb_cache_end
334e4     F7 57 02 F6 |                 mov     cache_end_p, pb
334e8                 | 
334e8                 |         if ERROR_LED >= 0
334e8                 |         end
334e8                 | 
334e8                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
334e8                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
334e8                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
334e8                 | ' Configure and enable the Serial Host USB port.
334e8     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
334ec                 | 
334ec                 | '------------------------------------------------------------------------------
334ec                 | ' Timing calculations happen before any interrupt(s) are enabled.
334ec                 | '------------------------------------------------------------------------------
334ec                 | ' On entry:
334ec                 | '   htmp - current CLKFREQ value.
334ec                 | '------------------------------------------------------------------------------
334ec                 | hinit_usb_timings
334ec                 | '                getct   htmp2
334ec     B8 59 02 F6 |                 mov     save_sysclk, htmp
334f0     8D 5B 80 FF 
334f4     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
334f8     18 30 63 FD |                 getqx   _12Mbps_
334fc     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
33500     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
33504     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
33508     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3350c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
33510     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
33514     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
33518     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3351c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
33520     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
33524     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
33528     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3352c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
33530     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
33534     80 00 00 FF 
33538     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3353c     18 2C 63 FD |                 getqx   _var_64_lower_
33540     19 2E 63 FD |                 getqy   _var_64_upper_
33544     28 2C 63 FD |                 setq    _var_64_lower_
33548     65 CD 1D FF 
3354c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
33550     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
33554     01 00 00 FF 
33558     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3355c     18 2C 63 FD |                 getqx   _var_64_lower_
33560     19 2E 63 FD |                 getqy   _var_64_upper_
33564     28 2C 63 FD |                 setq    _var_64_lower_
33568     A1 07 00 FF 
3356c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
33570     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
33574     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
33578     09 36 57 F0 |                 shr     _1us_, #9               wc
3357c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
33580     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
33584     18 38 63 FD |                 getqx   _10us_
33588     09 38 57 F0 |                 shr     _10us_, #9              wc
3358c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
33590     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
33594     18 3A 63 FD |                 getqx   _33us_
33598     09 3A 57 F0 |                 shr     _33us_, #9              wc
3359c     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
335a0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
335a4     18 3C 63 FD |                 getqx   _txn_err_
335a8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
335ac     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
335b0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
335b4     18 3E 63 FD |                 getqx   _500us_
335b8     09 3E 57 F0 |                 shr     _500us_, #9             wc
335bc     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
335c0     01 00 00 FF 
335c4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
335c8     18 40 63 FD |                 getqx   _txn_ok_ls_
335cc     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
335d0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
335d4     01 00 00 FF 
335d8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
335dc     18 42 63 FD |                 getqx   _txn_ok_fs_
335e0     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
335e4     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
335e8     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
335ec     05 00 00 FF 
335f0     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
335f4     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
335f8     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
335fc     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
33600     1C 00 00 FF 
33604     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
33608     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3360c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
33610     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
33614     00 00 00 FF 
33618     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3361c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
33620     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
33624     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
33628     04 00 00 FF 
3362c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
33630     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
33634     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
33638     8D 5B 00 FF 
3363c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
33640     18 4C 63 FD |                 getqx   _preamble_wait_
33644     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
33648     01 00 00 FF 
3364c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
33650     18 2C 63 FD |                 getqx   _var_64_lower_
33654     19 2E 63 FD |                 getqy   _var_64_upper_
33658     28 2C 63 FD |                 setq    _var_64_lower_
3365c     01 00 00 FF 
33660     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
33664     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
33668     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3366c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
33670     FF FF 7F FF 
33674     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
33678     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3367c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
33680     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
33684     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
33688     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3368c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
33690     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
33694     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
33698     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3369c     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
336a0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
336a4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
336a8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
336ac     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
336b0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
336b4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
336b8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
336bc     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
336c0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
336c4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
336c8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
336cc     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
336d0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
336d4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
336d8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
336dc     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
336e0                 | '        _ret_   mov     _1sec_, save_sysclk
336e0                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
336e0                 | '                ret
336e0                 | {
336e0                 | }
336e0                 | 
336e0                 | '------------------------------------------------------------------------------
336e0                 | ' Parse a configuration descriptor chain to see if the device is a recognized
336e0                 | ' one. If it is, start the task progression that will configure the device for
336e0                 | ' use.
336e0                 | '------------------------------------------------------------------------------
336e0                 | ' On entry:
336e0                 | '   hconfig_base - start address of the cached config descriptor chain.
336e0                 | ' On exit:
336e0                 | '------------------------------------------------------------------------------
336e0                 | hparse_con_desc
336e0     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
336e4     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
336e8     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
336ec     4E 70 FF F9 |                 movbyts htmp,#%%1032
336f0     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
336f4                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
336f4                 | 
336f4     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
336f8     6E ED 03 F1 |                 add     pa, hconfig_base
336fc     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
33700                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
33700                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
33700                 | ' that defines a keyboard and/or mouse.
33700     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
33704                 | .next_intf
33704     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33708     BC 01 90 3D |         if_ae   jmp     #hset_config
3370c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33710     75 F3 03 F1 |                 add     ptrb, hnext_desc
33714     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33718     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3371c     0C 00 90 AD |         if_z    jmp     #.intf
33720     80 71 C7 FA |                 rdbyte  htmp, ptrb
33724     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
33728     D8 FF 9F FD |                 jmp     #.next_intf
3372c                 | .intf
3372c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
33730     00 90 07 F6 |                 mov     hpar3, #0
33734     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
33738     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3373c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
33740     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
33744                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
33744                 | 
33744                 | .endp
33744     80 71 C7 FA |                 rdbyte  htmp, ptrb
33748     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3374c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
33750     78 00 90 3D |         if_ae   jmp     #.get_device
33754     6E F3 03 F6 |                 mov     ptrb, hconfig_base
33758     75 F3 03 F1 |                 add     ptrb, hnext_desc
3375c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
33760     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
33764     64 00 90 AD |         if_z    jmp     #.get_device
33768     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3376c     04 00 90 AD |         if_z    jmp     #.get_ep
33770     D0 FF 9F FD |                 jmp     #.endp
33774                 | .get_ep
33774     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
33778     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3377c     0F 86 67 F0 |                 shl     hr1, #8 + 7
33780     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
33784     3F 00 00 FF 
33788     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3378c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
33790     00 8E 0F F2 |                 cmp     hpar2, #0               wz
33794     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
33798     00 90 0F F2 |                 cmp     hpar3, #0               wz
3379c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
337a0     A0 FF 9F FD |                 jmp     #.endp
337a4                 | .in_ep
337a4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
337a8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
337ac                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
337ac     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
337b0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
337b4     8C FF 9F FD |                 jmp     #.endp
337b8                 | .out_ep
337b8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
337bc     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
337c0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
337c0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
337c4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
337c8     78 FF 9F FD |                 jmp     #.endp
337cc                 | 
337cc                 | .get_device
337cc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
337d0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
337d4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
337d8     68 00 90 AD |         if_z    jmp     #.gamepad
337dc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
337e0     AC 00 90 AD |         if_z    jmp     #.hub
337e4     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
337e8     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
337ec     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
337f0     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
337f4     4C 00 90 AD |         if_z    jmp     #.gamepad
337f8     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
337fc     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
33800                 | .keyboard
33800     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
33804                 |         if HAVE_MOUSE
33804     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
33808                 |         else
33808                 |         end
33808     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3380c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
33810     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33814     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
33818     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3381c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
33820                 |                 'debug(udec(kb_intf_num))
33820                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33820     E0 FE 9F FD |                 jmp     #.next_intf
33824                 | if HAVE_MOUSE
33824                 | .mouse
33824     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
33828     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3382c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
33830     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
33834     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
33838                 |                 'getbyte ms_interval, hr2, #3
33838     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3383c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
33840                 |                 'debug(udec(kb_intf_num))
33840                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
33840     C0 FE 9F FD |                 jmp     #.next_intf
33844                 | end
33844                 | .gamepad
33844     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33848     C7 71 63 F5 |                 xor     htmp, hpar2
3384c     3F 00 00 FF 
33850     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33854     AC FE 9F AD |         if_z    jmp     #.next_intf
33858                 |         if HAVE_MOUSE
33858     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3385c     C7 71 63 F5 |                 xor     htmp, hpar2
33860     3F 00 00 FF 
33864     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33868     98 FE 9F AD |         if_z    jmp     #.next_intf
3386c                 |         end
3386c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
33870     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
33874     8C FE 9F 5D |         if_nz   jmp     #.next_intf
33878                 | 
33878     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3387c     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
33880     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33884     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
33888     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3388c                 |                 'debug(udec(gp_intf_num))
3388c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3388c     74 FE 9F FD |                 jmp     #.next_intf
33890                 | .hub
33890     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
33894     6C FE 9F 5D |         if_nz   jmp     #.next_intf
33898     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3389c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
338a0     60 FE 9F 5D |         if_nz   jmp     #.next_intf
338a4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
338a8     58 FE 9F 5D |         if_nz   jmp     #.next_intf
338ac     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
338b0     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
338b4     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
338b8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
338bc     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
338c0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
338c4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
338c4     3C FE 9F FD |                 jmp     #.next_intf
338c8                 | 
338c8                 | '------------------------------------------------------------------------------
338c8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
338c8                 | ' it according to its function, or functions. In the case of this boot protocol
338c8                 | ' keyboard/mouse class driver:
338c8                 | ' - SetConfiguration(config_num)
338c8                 | ' - SetProtocol(boot)
338c8                 | ' - SetIdle(indefinite)
338c8                 | ' - Enter the device interrupt IN polling task stage.
338c8                 | '------------------------------------------------------------------------------
338c8                 | ' On entry:
338c8                 | ' On exit:
338c8                 | '------------------------------------------------------------------------------
338c8                 | hset_config
338c8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
338c8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
338c8     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
338cc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
338d0     00 00 0C F2 |                 cmp     0-0, #0                 wz
338d4     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
338d8                 |         if HAVE_MOUSE
338d8     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
338dc                 |         end
338dc     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
338e0     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
338e4                 | .set_config
338e4     6C 0E D0 FE |                 loc     ptra, #set_config
338e8     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
338ec     6E ED 03 F1 |                 add     pa, hconfig_base
338f0     F6 8D C3 FA |                 rdbyte  hpar1, pa
338f4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
338f8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
338fc     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
33900     A0 02 A0 FD |                 call    #control_write
33904     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33908     2D 00 64 5D |         if_nz   ret
3390c                 | .kbd_config
3390c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
33910     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
33914                 | 
33914     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
33918     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3391c     3F 00 00 FF 
33920     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33924     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
33928                 | 
33928     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3392c     34 0E D0 FE |                 loc     ptra, #set_protocol
33930     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
33934     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33938     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3393c     A0 02 A0 FD |                 call    #control_write
33940     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33944     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
33948     E4 02 90 5D |         if_nz   jmp     #.notify_client
3394c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
33950     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
33954     30 03 B0 FD |                 call    #hset_idle
33958                 |                 'cmp     retval, #PID_ACK        wz
33958                 |         'if_nz   mov     hkbd_ep_addr, #0
33958                 |         'if_nz   jmp     #.notify_client
33958     A8 99 02 F6 |                 mov     hctwait, _2ms_
3395c     EF 02 A0 FD |                 call    #poll_waitx
33960     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
33964     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
33968     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3396c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
33970     2C 03 B0 FD |                 call    #hset_kbdled_report
33974     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33978     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3397c     B0 02 90 5D |         if_nz   jmp     #.notify_client
33980     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
33984     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33988     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3398c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33990     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
33994     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
33998     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3399c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
339a0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
339a4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
339a8     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
339ac                 |         if !!HAVE_MOUSE
339ac                 |         end
339ac                 | 
339ac                 | .mouse_config
339ac                 | if HAVE_MOUSE
339ac     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
339b0     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
339b4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
339b8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
339bc     3F 00 00 FF 
339c0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
339c4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
339c8                 | 
339c8                 |                 debug("mouse passed addr check")
339c8                 | 
339c8     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
339cc     00 00 80 FF 
339d0     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
339d4     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
339d8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
339dc     55 02 A0 FD |                 call    #control_read
339e0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
339e4     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
339e8     44 02 90 5D |         if_nz   jmp     #.notify_client
339ec     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
339f0     56 01 00 F6 |                 mov     0-0, total_data
339f4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
339f8                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
339f8                 | 
339f8     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
339fc     64 0D D0 FE |                 loc     ptra, #set_protocol
33a00     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
33a04     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33a08     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
33a0c     A0 02 A0 FD |                 call    #control_write
33a10     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33a14     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
33a18     14 02 90 5D |         if_nz   jmp     #.notify_client
33a1c                 |                 debug("mouse passed SetProtocol")
33a1c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
33a20     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
33a24     60 02 B0 FD |                 call    #hset_idle
33a28                 |                 'cmp     retval, #PID_ACK        wz
33a28                 |         'if_nz   mov     hmouse_ep_addr, #0
33a28                 |         'if_nz   jmp     #.notify_client
33a28                 |                 debug("mouse passed SetIdle")
33a28     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
33a2c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33a30     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33a34     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33a38     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
33a3c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33a40     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
33a44     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
33a48     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
33a4c     3F 00 00 FF 
33a50     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
33a54     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
33a58     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
33a5c     D0 01 90 FD |                 jmp     #.notify_client
33a60                 | end
33a60                 | .gamepad_config
33a60                 | if _HAVE_GAMEPAD
33a60     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33a64     00 00 0C F2 |                 cmp     0-0, #0                 wz
33a68     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
33a6c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
33a70     00 70 03 F6 |                 mov     htmp, 0-0
33a74     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33a78     3F 00 00 FF 
33a7c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33a80     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
33a84                 | 
33a84     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
33a88     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
33a8c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33a90     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33a94     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
33a98     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
33a9c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
33aa0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
33aa4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
33aa8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
33aac     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
33ab0     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
33ab4     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
33ab8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
33abc                 | 
33abc                 |                 if EMUPAD_MAX_PLAYER > 0
33abc                 |                 
33abc                 | .rule_loop           
33abc                 |                 end
33abc                 | 
33abc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
33ac0     5C 00 90 AD |         if_e    jmp     #.xinput
33ac4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
33ac8     00 70 03 F6 |                 mov     htmp,0-0
33acc     01 A6 02 FF 
33ad0     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
33ad4     7C 00 90 AD |         if_e    jmp     #.ps3
33ad8                 | 
33ad8     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
33adc     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
33ae0     00 00 80 5F 
33ae4     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
33ae8     03 00 80 AF 
33aec     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
33af0     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
33af4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33af8     55 02 A0 FD |                 call    #control_read
33afc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33b00     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
33b04     00 00 04 56 |         if_nz   mov     0-0, #0
33b08     24 01 90 5D |         if_nz   jmp     #.notify_client
33b0c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
33b10     56 01 00 F6 |                 mov     0-0, total_data
33b14     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33b18                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
33b18                 | 
33b18     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
33b1c     10 01 90 FD |                 jmp     #.notify_client
33b20                 | .xinput
33b20     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
33b24     2D EF 03 F6 |                 mov     pb,hdev_port
33b28     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
33b2c     03 EE 27 F3 |                 fle     pb,#3
33b30     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
33b34     02 EF 47 FC |                 wrbyte  pb, ptra[2]
33b38                 | 
33b38     03 B0 06 F6 |                 mov     pkt_data, #3
33b3c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
33b40     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
33b44     5A 00 A0 FD |                 call    #txn_out
33b48     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
33b4c                 | 
33b4c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
33b50     DC 00 90 FD |                 jmp     #.notify_client
33b54                 | .ps3
33b54     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
33b58     2D EF 03 F6 |                 mov     pb,hdev_port
33b5c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
33b60     04 EE 27 F3 |                 fle     pb,#4
33b64     F7 EF C3 F9 |                 decod   pb
33b68     09 EF 47 FC |                 wrbyte  pb, ptra[9]
33b6c                 | 
33b6c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
33b70     00 0C D0 FE |                 loc     ptra, #set_report
33b74     01 00 80 FF 
33b78     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
33b7c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33b80     03 61 5C FC |                 wrword  #48, ptra[wLength]
33b84     20 0C B0 FE |                 loc     pb, #ps3_command_buff
33b88     A0 02 A0 FD |                 call    #control_write
33b8c                 | 
33b8c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
33b90     E0 0B D0 FE |                 loc     ptra, #set_report
33b94     01 00 80 FF 
33b98     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
33b9c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33ba0     03 09 5C FC |                 wrword  #4, ptra[wLength]
33ba4     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
33ba8     A0 02 A0 FD |                 call    #control_write
33bac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
33bb0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
33bb4     00 00 04 56 |         if_nz   mov     0-0, #0
33bb8     74 00 90 5D |         if_nz   jmp     #.notify_client
33bbc                 | 
33bbc     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
33bc0     6C 00 90 FD |                 jmp     #.notify_client
33bc4                 | end
33bc4                 | 
33bc4                 | .hub_config
33bc4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
33bc8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
33bcc     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
33bd0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
33bd4     3F 00 00 FF 
33bd8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
33bdc     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
33be0                 | 
33be0     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
33be4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
33be8     26 EF 03 F6 |                 mov     pb, hub_descr_p
33bec     55 02 A0 FD |                 call    #control_read
33bf0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33bf4     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
33bf8     34 00 90 5D |         if_nz   jmp     #.notify_client
33bfc                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
33bfc                 | 
33bfc     26 F1 03 F6 |                 mov     ptra, hub_descr_p
33c00     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
33c04     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
33c08                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
33c08                 | .pwr_loop
33c08     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
33c0c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
33c10     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
33c14     A0 02 A0 FD |                 call    #control_write
33c18     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
33c1c                 | 
33c1c     B1 99 02 F6 |                 mov     hctwait, _500ms_
33c20     B0 99 02 F1 |                 add     hctwait, _100ms_
33c24     EF 02 A0 FD |                 call    #poll_waitx
33c28                 | 
33c28     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
33c2c     00 00 90 FD |                 jmp     #.notify_client
33c30                 | 
33c30                 | .notify_client
33c30     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
33c34     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
33c38                 |                 debug(uhex_long(hdev_type,hdev_type+1))
33c38                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
33c38     2D 00 64 FD |                 ret
33c3c                 | 
33c3c                 | '------------------------------------------------------------------------------
33c3c                 | ' Initialize the keyboard/mouse data area to start-up values.
33c3c                 | '------------------------------------------------------------------------------
33c3c                 | ' On entry:
33c3c                 | ' On exit:
33c3c                 | '------------------------------------------------------------------------------
33c3c                 | init_kbdm_data
33c3c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
33c40     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
33c44                 | 
33c44     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
33c48     2B ED 03 F6 |                 mov     pa, cache_end_p
33c4c                 | .loop
33c4c     61 01 4C FC |                 wrbyte  #0, ptra++
33c50     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
33c54     F4 FF 9F CD |         if_b    jmp     #.loop
33c58                 |         
33c58                 |         if EMUPAD_MAX_PLAYER > 0
33c58                 |         end
33c58                 | 
33c58                 | 
33c58     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
33c5c                 | .regloop
33c5c     00 EC 8F F9 |                 altd    pa
33c60     00 00 04 F6 |                 mov     0-0, #0
33c64     01 EC 07 F1 |                 add     pa, #1
33c68     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
33c6c     EC FF 9F 5D |         if_nz   jmp     #.regloop
33c70                 | 
33c70     E1 E1 61 FF 
33c74     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
33c78     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
33c7c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
33c80     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
33c84                 | 
33c84     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
33c88                 | 
33c88                 | '------------------------------------------------------------------------------
33c88                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
33c88                 | ' function.
33c88                 | '------------------------------------------------------------------------------
33c88                 | ' On entry:
33c88                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
33c88                 | '   hpar2 - index number of the target interface.
33c88                 | ' On exit:
33c88                 | '------------------------------------------------------------------------------
33c88                 | hset_idle
33c88     A8 99 02 F6 |                 mov     hctwait, _2ms_
33c8c     EF 02 A0 FD |                 call    #poll_waitx
33c90     D8 0A D0 FE |                 loc     ptra, #set_idle
33c94     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
33c98     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
33c9c     A0 02 80 FD |                 jmp     #control_write
33ca0                 | 
33ca0                 | '------------------------------------------------------------------------------
33ca0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
33ca0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
33ca0                 | '------------------------------------------------------------------------------
33ca0                 | ' On entry:
33ca0                 | '   ep_addr_pid - device address and enpoint for the request.
33ca0                 | ' On exit:
33ca0                 | '   retval - transaction result.
33ca0                 | '------------------------------------------------------------------------------
33ca0                 | hset_kbdled_report
33ca0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
33ca4     CC 0A D0 FE |                 loc     ptra, #set_report
33ca8     01 00 80 FF 
33cac     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
33cb0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
33cb4     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
33cb8     27 EF 03 F6 |                 mov     pb, urx_buff_p
33cbc     F7 77 42 FC |                 wrbyte  kb_led_states, pb
33cc0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
33cc4                 | 
33cc4                 | '------------------------------------------------------------------------------
33cc4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
33cc4                 | '------------------------------------------------------------------------------
33cc4                 | ' On entry:
33cc4                 | ' On exit:
33cc4                 | '------------------------------------------------------------------------------
33cc4                 | hget_kbd_in_report
33cc4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
33cc8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
33ccc     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
33cd0     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
33cd4     CF 02 A0 FD |                 call    #do_int_in
33cd8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33cdc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
33ce0                 | 
33ce0     00 90 0F F2 |                 cmp     hpar3, #0               wz
33ce4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
33ce8                 | 
33ce8     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
33cec     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
33cf0     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
33cf4     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
33cf8                 | 
33cf8     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
33cfc     18 00 B0 FD |                 call    #hkbd_compare
33d00                 |         if EMUPAD_MAX_PLAYER > 0
33d00                 |         end
33d00                 | 
33d00                 | .led_check
33d00     3B 71 03 F6 |                 mov     htmp, kb_led_states
33d04     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
33d08     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
33d0c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
33d10     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
33d14     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
33d18                 | 
33d18                 | '------------------------------------------------------------------------------
33d18                 | ' Compare current and previous keyboard data buffers for keypress changes.
33d18                 | '------------------------------------------------------------------------------
33d18                 | hkbd_compare
33d18     27 F1 03 F6 |                 mov     ptra, urx_buff_p
33d1c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
33d20     61 73 07 FB |                 rdlong  htmp1, ptra++
33d24     E1 75 07 FB |                 rdlong  htmp2, ptrb++
33d28     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
33d2c     61 73 07 FB |                 rdlong  htmp1, ptra++
33d30     E1 75 07 FB |                 rdlong  htmp2, ptrb++
33d34     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
33d38     2D 00 64 AD |         if_z    ret
33d3c                 | 
33d3c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
33d40                 | 
33d40                 |                 ' Handle modifiers
33d40     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
33d44     00 87 C7 FA |                 rdbyte  hr1, ptra
33d48     C7 87 43 F9 |                 rolword hr1,hpar2,#0
33d4c     63 86 63 FD |                 mergew  hr1
33d50     08 EC 07 F6 |                 mov     pa,#8
33d54                 | .modloop
33d54     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
33d58     E8 8C 07 F6 |                 mov     hpar1,#$E8
33d5c     F6 8D 83 F1 |                 sub     hpar1,pa
33d60     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
33d64     FB ED 6F FB |                 djnz    pa,#.modloop
33d68                 | 
33d68     6F E0 75 FD | .release        modc    _set    wc
33d6c                 |                 'alts    hdev_port, #hid_report_p
33d6c                 |                 'mov     ptra, hid_report_p
33d6c     02 F0 07 F1 |                 add     ptra, #2
33d70     06 EC 07 F6 |                 mov     pa, #6
33d74     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
33d78     20 00 90 AD |         if_z    jmp     #.rl3
33d7c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
33d80     02 F2 07 F1 |                 add     ptrb, #2
33d84     06 EE 07 F6 |                 mov     pb, #6
33d88     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
33d8c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
33d90     08 00 90 AD |         if_z    jmp     #.rl3
33d94     FC EF 6F FB |                 djnz    pb, #.rl2
33d98     68 00 B0 FD |                 call    #hkbd_translate
33d9c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
33da0                 | 
33da0     00 90 07 F6 |                 mov     hpar3, #0
33da4     1F 90 27 F4 |                 bith    hpar3, #31
33da8                 | 
33da8     6F 00 74 FD | .press          modc    _clr    wc
33dac     27 F1 03 F6 |                 mov     ptra, urx_buff_p
33db0     02 F0 07 F1 |                 add     ptra, #2
33db4     06 EC 07 F6 |                 mov     pa, #6
33db8     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
33dbc     20 00 90 AD |         if_z    jmp     #.pl3
33dc0     30 13 F0 FE |                 loc     ptrb, #hkbd_report
33dc4     02 F2 07 F1 |                 add     ptrb, #2
33dc8     06 EE 07 F6 |                 mov     pb, #6
33dcc     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
33dd0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
33dd4     08 00 90 AD |         if_z    jmp     #.pl3
33dd8     FC EF 6F FB |                 djnz    pb, #.pl2
33ddc     24 00 B0 FD |                 call    #hkbd_translate
33de0     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
33de4                 | 
33de4     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
33de8     08 13 F0 FE |                 loc     ptrb, #hkbd_report
33dec     28 02 64 FD |                 setq #1
33df0     61 73 07 FB |                 rdlong  htmp1, ptra++
33df4     28 02 64 FD |                 setq #1
33df8     E1 73 67 FC |                 wrlong  htmp1, ptrb++
33dfc     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
33e00                 | 
33e00     2D 00 64 FD |                 ret
33e04                 | 
33e04                 | '------------------------------------------------------------------------------
33e04                 | ' Translate keyboard scancode to ASCII
33e04                 | '------------------------------------------------------------------------------
33e04                 | ' On entry:
33e04                 | '   hpar1 - scancode
33e04                 | '   hpar2 - key modifiers state
33e04                 | '       c - pressed (0) or released (1) flag
33e04                 | ' On exit:
33e04                 | '   hpar1 - bit     31 = 0 pressed, 1 released
33e04                 | '               30..17 = unused
33e04                 | '                   18 = scroll-lock state 
33e04                 | '                   17 = caps-lock state
33e04                 | '                   16 = num-lock state 
33e04                 | '                15..8 = key modifiers state
33e04                 | '                 7..0 = scancode
33e04                 | '------------------------------------------------------------------------------
33e04                 | hkbd_translate
33e04     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
33e08     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
33e0c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
33e10     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
33e14     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
33e18     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
33e1c                 | 
33e1c                 |         if EMUPAD_MAX_PLAYER > 0
33e1c                 | 
33e1c                 |         if EMUPAD_BT0_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT1_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT2_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT3_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT4_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT5_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT6_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT7_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT8_BIT >= 0
33e1c                 |         end
33e1c                 |         if EMUPAD_BT9_BIT >= 0
33e1c                 |         end
33e1c                 | 
33e1c                 |         end
33e1c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
33e20     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
33e24     1F 8C 47 F4 |                 bitc    hpar1, #31
33e28                 |         if KEYQUEUE_SIZE > 0
33e28     C4 09 B0 FE |                 loc pb,#keyq_head
33e2c     F7 71 E3 FA |                 rdword htmp,pb
33e30     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
33e34     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
33e38     B8 75 03 F6 |                 mov htmp2,htmp
33e3c     04 74 07 FA |                 mul htmp2,#4
33e40     F7 75 03 F1 |                 add htmp2,pb
33e44     02 74 07 F1 |                 add htmp2,#2
33e48     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
33e4c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
33e50     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
33e54     F7 71 43 5C |         if_nz   wrbyte htmp,pb
33e58                 |         end
33e58     2D 00 7C FD |                 ret wcz
33e5c                 | 
33e5c                 | if HAVE_MOUSE
33e5c                 | '------------------------------------------------------------------------------
33e5c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
33e5c                 | '------------------------------------------------------------------------------
33e5c                 | ' On entry:
33e5c                 | ' On exit:
33e5c                 | '------------------------------------------------------------------------------
33e5c                 | hget_mouse_in_report
33e5c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
33e60     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
33e64     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
33e68     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
33e6c     CF 02 A0 FD |                 call    #do_int_in
33e70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33e74     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
33e78                 | 
33e78     00 90 0F F2 |                 cmp     hpar3, #0               wz
33e7c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
33e80                 | 
33e80     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
33e84     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
33e88     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
33e8c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
33e90                 | 
33e90     27 F1 03 F6 |                 mov     ptra, urx_buff_p
33e94     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
33e98     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
33e9c     01 90 87 31 |         if_ae   sub     hpar3, #1
33ea0                 | 
33ea0     40 09 90 FE |                 loc     pa, #mouse_limits
33ea4     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
33ea8                 | 
33ea8                 |                 ' load xacc,yacc,zacc
33ea8     28 04 64 FD |                 setq    #3-1
33eac     80 87 07 FB |                 rdlong  hr1,ptrb
33eb0                 |                 ' load limits and outptr
33eb0     28 04 64 FD |                 setq    #3-1
33eb4     F6 73 03 FB |                 rdlong  htmp1,pa
33eb8                 | 
33eb8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
33ebc     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
33ec0     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
33ec4     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
33ec8     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
33ecc     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
33ed0     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
33ed4     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
33ed8                 |               
33ed8                 | 
33ed8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
33edc     07 70 67 F7 |                 signx   htmp, #7
33ee0     B8 87 03 F1 |                 add     hr1,htmp
33ee4     00 72 0F F2 |                 cmp     htmp1,#0 wz
33ee8     B9 87 63 53 |         if_ne   fles    hr1,htmp1
33eec     00 86 47 53 |         if_ne   fges    hr1,#0
33ef0                 | 
33ef0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
33ef4     07 70 67 F7 |                 signx   htmp, #7
33ef8     B8 89 03 F1 |                 add     hr2,htmp
33efc     00 74 0F F2 |                 cmp     htmp2,#0 wz
33f00     BA 89 63 53 |         if_ne   fles    hr2,htmp2
33f04     00 88 47 53 |         if_ne   fges    hr2,#0
33f08                 |                 
33f08                 | 
33f08     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
33f0c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
33f10     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
33f14     B8 8B 03 A1 |         if_z    add     hr3,htmp
33f18                 | 
33f18     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
33f1c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
33f20                 | 
33f20                 |                 ' write back accumulators
33f20     28 04 64 FD |                 setq    #3-1
33f24     80 87 67 FC |                 wrlong  hr1,ptrb
33f28                 |                 ' if outptr set, write X/Y words
33f28     00 76 0F F2 |                 cmp htmp3,#0                    wz
33f2c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
33f30     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
33f34     2D 00 64 FD |                 ret
33f38                 | end
33f38                 | 
33f38                 | '------------------------------------------------------------------------------
33f38                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
33f38                 | '------------------------------------------------------------------------------
33f38                 | ' On entry:
33f38                 | ' On exit:
33f38                 | '------------------------------------------------------------------------------
33f38                 | if _HAVE_GAMEPAD
33f38                 | hget_gp_in_report
33f38     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
33f3c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
33f40                 | 
33f40     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
33f44     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
33f48     00 90 E3 F8 |                 getbyte hpar3
33f4c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
33f50     CF 02 A0 FD |                 call    #do_int_in
33f54     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
33f58     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
33f5c                 | 
33f5c     00 90 0F F2 |                 cmp     hpar3, #0               wz
33f60     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
33f64                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
33f64                 | 
33f64     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
33f68     00 70 E3 F8 |                 getbyte htmp                            ' |
33f6c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
33f70     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
33f74     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
33f78     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
33f7c     B8 01 C0 F8 |                 setbyte htmp                            ' |
33f80                 | 
33f80                 | ' Note: the following code compares the current and previous reports
33f80                 | ' and process the data if there are changes to ease the debug output.
33f80                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
33f80                 | ' gpPreReport buffer.
33f80                 | 
33f80                 |                 ' ----- start of block to remove
33f80                 |                 {
33f80                 |                 }
33f80                 |                 ' ----- end of block to remove
33f80     F4 04 90 FE |                 loc pa,#hpad_translate
33f84     2A EC 63 FD |                 push pa
33f88                 | 
33f88                 |                 ' FALL THROUGH !!!!
33f88                 | 
33f88                 | '------------------------------------------------------------------------------
33f88                 | ' Decode controller report
33f88                 | '------------------------------------------------------------------------------
33f88                 | hid_decode
33f88                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
33f88     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
33f8c     00 04 00 FF 
33f90     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
33f94                 | 
33f94     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
33f98                 | 
33f98     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
33f9c     00 2A E3 F8 |                 getbyte hidr_type
33fa0     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
33fa4     34 02 90 AD |         if_z    jmp     #hpad_xinput
33fa8     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
33fac     1C 03 90 AD |         if_z    jmp     #hpad_ps3
33fb0     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
33fb4     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
33fb8     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
33fbc                 |                 
33fbc                 | 
33fbc                 | '------------------------------------------------------------------------------
33fbc                 | ' Handle HID controller (or mouse now
33fbc                 | ' On entry:
33fbc                 | '   ptrb - controller report
33fbc                 | '------------------------------------------------------------------------------
33fbc                 | hpad_hid
33fbc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
33fc0     F7 F1 03 F6 |                 mov     ptra, pb
33fc4     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
33fc8     00 EC 03 F6 |                 mov     pa, 0-0
33fcc                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
33fcc     19 2A 3B FF 
33fd0     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
33fd4                 | 
33fd4                 | .next
33fd4     00 EC 5F F2 |                 cmps    pa, #0      wcz
33fd8     2D 00 7C ED |         if_be   ret     wcz
33fdc                 | 
33fdc     61 8D C7 FA |                 rdbyte  hpar1, ptra++
33fe0     01 EC 87 F1 |                 sub     pa, #1
33fe4     00 8E 07 F6 |                 mov     hpar2, #0
33fe8                 | 
33fe8     C6 71 03 F6 |                 mov     htmp, hpar1
33fec     03 70 07 F5 |                 and     htmp, #$03
33ff0     01 70 0F F2 |                 cmp     htmp, #1    wz
33ff4     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
33ff8     07 8E 67 A7 |         if_z    signx   hpar2,#7
33ffc     01 EC 87 A1 |         if_z    sub     pa, #1
34000     02 70 0F F2 |                 cmp     htmp, #2    wz
34004     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
34008     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3400c     02 EC 87 A1 |         if_z    sub     pa, #2
34010     03 70 0F F2 |                 cmp     htmp, #3    wz
34014     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
34018     04 EC 87 A1 |         if_z    sub     pa, #4
3401c                 | 
3401c     FC 8C 07 F5 |                 and     hpar1, #$FC
34020                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
34020                 | 
34020     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
34024     0C 01 90 AD |         if_z    jmp     #.report_id
34028     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3402c     24 01 90 AD |         if_z    jmp     #.usage_page
34030     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
34034     2C 01 90 AD |         if_z    jmp     #.usage
34038     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3403c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
34040     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
34044     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
34048     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3404c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
34050     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
34054     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
34058     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3405c     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
34060     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
34064     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
34068     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3406c     64 FF 9F 5D |         if_nz   jmp     #.next
34070                 | 
34070     D8 1D A7 FB |                 tjf     hidr_state,#.next
34074                 | 
34074     03 8E 07 F5 |                 and     hpar2, #$03
34078     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3407c     18 00 90 5D |         if_nz   jmp     #.skip
34080                 | 
34080     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
34084     20 00 90 AD |         if_z    jmp     #.axes
34088     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3408c     5C 00 90 AD |         if_z    jmp     #.hats
34090     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
34094     70 00 90 AD |         if_z    jmp     #.buttons
34098                 | .skip
34098     8F 71 03 F6 |                 mov     htmp, hidr_size
3409c     90 71 03 FA |                 mul     htmp, hidr_count
340a0     B8 23 03 F1 |                 add     hidr_offset, htmp
340a4     2C FF 9F FD |                 jmp     #.next
340a8                 | .axes
340a8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
340a8     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
340ac     90 87 03 F6 |                 mov     hr1, hidr_count
340b0                 | .l1
340b0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
340b4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
340b8     04 03 B0 FD |                 call    #hpad_getbits
340bc     64 03 B0 FD |                 call    #hpad_normalize
340c0     06 84 1F F2 |                 cmp     hr0, #6         wcz
340c4     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
340c8     00 88 43 C8 |         if_b    getnib  hr2
340cc     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
340d0     5F 01 20 C9 |         if_b    setword retval
340d4     01 84 07 C1 |         if_b    add     hr0, #1
340d8     8F 23 03 F1 |                 add     hidr_offset, hidr_size
340dc     F4 87 6F FB |                 djnz    hr1, #.l1
340e0                 | 
340e0     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
340e4     01 1C 07 F6 |                 mov     hidr_state, #1
340e8     E8 FE 9F FD |                 jmp     #.next
340ec                 | .hats
340ec                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
340ec     91 8D 03 F6 |                 mov     hpar1, hidr_offset
340f0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
340f4     C8 02 B0 FD |                 call    #hpad_getbits
340f8     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
340fc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
34100     01 1C 07 F6 |                 mov     hidr_state, #1
34104     90 FF 9F FD |                 jmp     #.skip
34108                 | .buttons
34108                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
34108     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3410c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
34110     90 8F 03 FA |                 mul     hpar2, hidr_count
34114     A8 02 B0 FD |                 call    #hpad_getbits
34118     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3411c     B8 BF 62 F0 |                 shl     retval, htmp
34120     5F 17 43 F5 |                 or      hidr_buttons, retval
34124     90 71 03 F1 |                 add     htmp, hidr_count
34128     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3412c     01 1C 07 F6 |                 mov     hidr_state, #1
34130     64 FF 9F FD |                 jmp     #.skip
34134                 | .report_id
34134     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
34138     2D 00 7C 5D |         if_nz   ret     wcz
3413c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
34140     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
34144     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
34148     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3414c     01 F2 87 51 |         if_nz   sub     ptrb,#1
34150     80 FE 9F FD |                 jmp     #.next
34154                 | .usage_page
34154     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
34158     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3415c     04 1C 07 A6 |         if_z    mov     hidr_state, #4
34160     70 FE 9F FD |                 jmp     #.next
34164                 | .usage
34164     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
34168     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3416c     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
34170     01 1C 07 A6 |         if_z    mov     hidr_state, #1
34174     5C FE 9F AD |         if_z    jmp     #.next
34178     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3417c     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
34180     01 1C 07 A6 |         if_z    mov     hidr_state, #1
34184     4C FE 9F AD |         if_z    jmp     #.next
34188     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3418c     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
34190     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
34194     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
34198     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3419c     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
341a0     10 00 90 AD |         if_z    jmp     #.usage_axis
341a4     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
341a8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
341ac     03 1C 07 A6 |         if_z    mov     hidr_state, #3
341b0     20 FE 9F FD |                 jmp     #.next
341b4                 | .usage_axis
341b4     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
341b8     18 FE 9F CD |         if_b    jmp     #.next
341bc     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
341c0     C7 01 00 F8 |                 setnib  hpar2
341c4                 | 
341c4     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
341c8     C7 8F C3 F9 |                 decod   hpar2
341cc     C7 0F 43 F5 |                 or      hidr_flags, hpar2
341d0                 | 
341d0     01 24 07 F1 |                 add     hidr_usage_idx, #1
341d4     02 1C 07 F6 |                 mov     hidr_state, #2
341d8     F8 FD 9F FD |                 jmp     #.next
341dc                 | 
341dc                 | '------------------------------------------------------------------------------
341dc                 | ' Handle XInput controller
341dc                 | ' On entry:
341dc                 | '   ptrb - controller report
341dc                 | '------------------------------------------------------------------------------
341dc                 | '   Default implementation translates the report to a pseudo-defacto hid
341dc                 | '   standard and jumps to hpad_translate for actions.
341dc                 | '   Implementors may take specific actions for this kind of controller.
341dc                 | '------------------------------------------------------------------------------
341dc                 | hpad_xinput
341dc     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
341e0     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
341e4     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
341e8     14 70 0F F2 |                 cmp     htmp, #$14      wz
341ec     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
341f0                 | 
341f0                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
341f0                 | 
341f0     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
341f4     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
341f8                 | 
341f8     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
341fc     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
34200     5F BF 22 F6 |                 not     retval
34204     5F 11 2B F9 |                 setword hidr_axis, retval, #1
34208     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3420c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
34210     5F BF 22 F6 |                 not     retval
34214     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
34218                 | 
34218     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3421c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
34220     C0 BE 1E F2 |                 cmp     retval, #192    wcz
34224     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
34228     F8 01 B0 FD |                 call    #hpad_normalize
3422c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
34230     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
34234     C0 BE 1E F2 |                 cmp     retval, #192    wcz
34238     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3423c     E4 01 B0 FD |                 call    #hpad_normalize
34240     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
34244                 | 
34244     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
34248     81 BF E6 FA |                 rdword  retval, ptrb[1]
3424c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
34250     00 16 47 F4 |                 bitc    hidr_buttons, #0
34254     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
34258     01 16 47 F4 |                 bitc    hidr_buttons, #1
3425c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34260     02 16 47 F4 |                 bitc    hidr_buttons, #2
34264     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
34268     03 16 47 F4 |                 bitc    hidr_buttons, #3
3426c     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
34270     04 16 47 F4 |                 bitc    hidr_buttons, #4
34274     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
34278     05 16 47 F4 |                 bitc    hidr_buttons, #5
3427c     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
34280     08 16 47 F4 |                 bitc    hidr_buttons, #8
34284     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
34288     09 16 47 F4 |                 bitc    hidr_buttons, #9
3428c     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
34290     0A 16 47 F4 |                 bitc    hidr_buttons, #10
34294     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
34298     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3429c     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
342a0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
342a4                 | 
342a4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
342a8     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
342ac     7A BB 7A FF 
342b0     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
342b4     F9 FF 7F FF 
342b8     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
342bc     B9 71 5F F9 |                 altgn   htmp, #htmp1
342c0     00 70 43 F8 |                 getnib  htmp
342c4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
342c8                 | 
342c8     AC 01 90 FD |                 jmp     #hpad_translate
342cc                 | 
342cc                 | '------------------------------------------------------------------------------
342cc                 | ' Handle PS3 controller
342cc                 | ' On entry:
342cc                 | '   ptrb - controller report
342cc                 | '------------------------------------------------------------------------------
342cc                 | '   Default implementation translates the report to a pseudo-defacto hid
342cc                 | '   standard and jumps to hpad_translate for actions.
342cc                 | '   Implementors may take specific actions for this kind of controller.
342cc                 | '------------------------------------------------------------------------------
342cc                 | hpad_ps3
342cc     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
342d0     01 70 0F F2 |                 cmp     htmp, #$01      wz
342d4     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
342d8                 | 
342d8                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
342d8                 | 
342d8     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
342dc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
342e0     40 01 B0 FD |                 call    #hpad_normalize
342e4     5F 11 23 F9 |                 setword hidr_axis, retval, #0
342e8     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
342ec     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
342f0     30 01 B0 FD |                 call    #hpad_normalize
342f4     5F 11 2B F9 |                 setword hidr_axis, retval, #1
342f8     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
342fc     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
34300     20 01 B0 FD |                 call    #hpad_normalize
34304     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
34308     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3430c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
34310     10 01 B0 FD |                 call    #hpad_normalize
34314     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
34318     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3431c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
34320                 | 
34320     08 8C 07 F6 |                 mov     hpar1, #8
34324     13 8E 07 F6 |                 mov     hpar2, #19
34328     94 00 B0 FD |                 call    #hpad_getbits
3432c                 | 
3432c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
34330     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
34334     00 16 47 F4 |                 bitc    hidr_buttons, #0
34338     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3433c     01 16 47 F4 |                 bitc    hidr_buttons, #1
34340     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
34344     02 16 47 F4 |                 bitc    hidr_buttons, #2
34348     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3434c     03 16 47 F4 |                 bitc    hidr_buttons, #3
34350     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
34354     04 16 47 F4 |                 bitc    hidr_buttons, #4
34358     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3435c     05 16 47 F4 |                 bitc    hidr_buttons, #5
34360     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
34364     06 16 47 F4 |                 bitc    hidr_buttons, #6
34368     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3436c     07 16 47 F4 |                 bitc    hidr_buttons, #7
34370     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
34374     08 16 47 F4 |                 bitc    hidr_buttons, #8
34378     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3437c     09 16 47 F4 |                 bitc    hidr_buttons, #9
34380     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
34384     0A 16 47 F4 |                 bitc    hidr_buttons, #10
34388     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3438c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
34390     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
34394     0C 16 47 F4 |                 bitc    hidr_buttons, #12
34398                 | 
34398     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3439c     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
343a0     09 FA 79 FF 
343a4     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
343a8     FF FA 7F FF 
343ac     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
343b0     B9 71 5F F9 |                 altgn   htmp, #htmp1
343b4     00 70 43 F8 |                 getnib  htmp
343b8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
343bc                 | 
343bc     B8 00 90 FD |                 jmp     #hpad_translate
343c0                 | 
343c0                 | '------------------------------------------------------------------------------
343c0                 | ' Read bits from report data buffer
343c0                 | '------------------------------------------------------------------------------
343c0                 | ' On entry:
343c0                 | '   PTRB - report buffer
343c0                 | '   hpar1 - start bit
343c0                 | '   hpar2 - number of bits
343c0                 | ' On exit:
343c0                 | '   retval - bits
343c0                 | '------------------------------------------------------------------------------
343c0                 | hpad_getbits
343c0     C6 71 03 F6 |                 mov     htmp, hpar1
343c4     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
343c8     F9 71 03 F1 |                 add     htmp, ptrb
343cc     B8 BF 02 FB |                 rdlong  retval, htmp
343d0                 | 
343d0     C6 73 03 F6 |                 mov     htmp1, hpar1
343d4     07 72 07 F5 |                 and     htmp1, #$07     ' shift
343d8     B9 BF 42 F0 |                 shr     retval, htmp1
343dc                 | 
343dc     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
343e0     10 00 90 1D |         if_a    jmp     #.l1
343e4                 | 
343e4     C7 8F C3 F9 |                 decod   hpar2
343e8     01 8E 87 F1 |                 sub     hpar2, #1
343ec     C7 BF 02 F5 |                 and     retval, hpar2
343f0     2D 00 64 FD |                 ret
343f4                 | .l1
343f4     FF 7F 00 FF 
343f8     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
343fc     03 70 07 F1 |                 add     htmp, #3
34400     B8 75 03 FB |                 rdlong  htmp2, htmp
34404     18 8E 87 F1 |                 sub     hpar2, #24
34408     C7 8F C3 F9 |                 decod   hpar2
3440c     01 8E 87 F1 |                 sub     hpar2, #1
34410     B9 75 43 F0 |                 shr     htmp2, htmp1
34414     C7 75 03 F5 |                 and     htmp2, hpar2
34418     18 74 67 F0 |                 shl     htmp2, #24
3441c     BA BF 42 F5 |                 or      retval, htmp2
34420     2D 00 64 FD |                 ret
34424                 | 
34424                 | '------------------------------------------------------------------------------
34424                 | ' Normalize value to signed word (-32768 / 32767)
34424                 | '------------------------------------------------------------------------------
34424                 | ' On entry:
34424                 | '   retval - value to normalize
34424                 | '   hidr_lminmax - min (word 1) max (word 0) value range
34424                 | '   - or -
34424                 | '   hidr_pminmax - min (word 1) max (word 0) value range
34424                 | '   hidr_size - value bits length
34424                 | ' On exit:
34424                 | '   retval - normalized value
34424                 | '------------------------------------------------------------------------------
34424                 | hpad_normalize
34424     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
34428     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3442c     2D 00 64 AD |         if_z    ret
34430     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
34434     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
34438     0F 72 77 F7 |                 signx   htmp1, #15      wc
3443c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
34440     00 BE 66 C7 |         if_c    signx   retval, #0-0
34444     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
34448     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3444c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
34450     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
34454     B8 71 53 F6 |                 abs     htmp            wc
34458     1F BE 0E F4 |                 testb   retval, #31     wz
3445c     5F BF 42 F6 |                 abs     retval
34460     B8 BF 12 FD |                 qdiv    retval, htmp
34464     18 BE 62 FD |                 getqx   retval
34468     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3446c     C0 FF 7F FF 
34470     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
34474     2D 00 64 FD |                 ret
34478                 | 
34478                 | '------------------------------------------------------------------------------
34478                 | ' Perform controller actions
34478                 | ' On entry:
34478                 | '    hidr_id        report id
34478                 | '    hidr_axis      axis value (signed word, 2 axes per long)
34478                 | '                      X = hidr_axis+0, #0
34478                 | '                      Y = hidr_axis+0, #1
34478                 | '                      Z = hidr_axis+1, #0
34478                 | '                     RX = hidr_axis+1, #1
34478                 | '                     RY = hidr_axis+2, #0
34478                 | '                     RZ = hidr_axis+2, #1
34478                 | '    hidr_buttons   buttons state (bits 0 to 31)
34478                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
34478                 | '
34478                 | '                     -------3 -------2 -------1 -------0 byte
34478                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
34478                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
34478                 | '                                zyx||| |||||||| ++++++++ n. buttons
34478                 | '                                |||||| ||||++++--------- n. axes
34478                 | '                                |||||| ++++------------- n. hats
34478                 | '                                ++++++------------------ valid axes
34478                 | '------------------------------------------------------------------------------
34478                 | hpad_translate
34478                 | 
34478                 | 
34478                 |         if HAVE_HIDPAD
34478     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3447c     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
34480     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
34484     01 70 E7 F2 |                 cmpsub  htmp,#1
34488     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3448c     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
34490     2D 00 7C 3D |         if_ae   ret     wcz
34494     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
34498     B8 F3 03 F1 |                 add     ptrb,htmp
3449c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
344a0     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
344a4     28 0C 64 FD |                 setq    #7-1
344a8     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
344ac                 |         end
344ac                 | 
344ac                 | 
344ac                 |         if EMUPAD_MAX_PLAYER > 0
344ac                 | .emupad_no_hat
344ac                 |         if EMUPAD_BT0_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT1_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT2_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT3_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT4_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT5_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT6_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT7_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT8_BIT >= 0
344ac                 |         end
344ac                 |         if EMUPAD_BT9_BIT >= 0
344ac                 |         end
344ac                 | .emupad_slot_over
344ac                 |         end
344ac                 | 
344ac                 |         if 0
344ac                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
344ac                 | 
344ac                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
344ac                 | 
344ac                 |         end
344ac     2D 00 64 FD |                 ret
344b0                 | end
344b0                 | 
344b0                 | if EMUPAD_MAX_PLAYER > 0
344b0                 | '------------------------------------------------------------------------------
344b0                 | ' Clear EmuPad state
344b0                 | '------------------------------------------------------------------------------
344b0                 | emupad_reset
344b0                 | 
344b0                 | '------------------------------------------------------------------------------
344b0                 | ' Get EmuPad Player number for current device (into retval)
344b0                 | ' Z flag is also set if current device is valid
344b0                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
344b0                 | '------------------------------------------------------------------------------
344b0                 | emupad_getnum
344b0                 | .loop
344b0                 | '------------------------------------------------------------------------------
344b0                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
344b0                 | '------------------------------------------------------------------------------
344b0                 | emupad_discon
344b0                 | .loop         
344b0                 |         
344b0                 |         ' FALL THROUGH!!!
344b0                 | 
344b0                 | '------------------------------------------------------------------------------
344b0                 | ' Update EmuPad reports (all of them...)
344b0                 | '------------------------------------------------------------------------------
344b0                 | emupad_write_reports
344b0                 | .devloop
344b0                 | 
344b0                 | end
344b0                 | 
344b0                 | 
344b0                 | '------------------------------------------------------------------------------
344b0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
344b0                 | '------------------------------------------------------------------------------
344b0                 | ' On entry:
344b0                 | ' On exit:
344b0                 | '------------------------------------------------------------------------------
344b0                 | hget_hub_status
344b0     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
344b4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
344b8     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
344bc     01 90 2F F9 |                 setword hpar3, #1, #1
344c0     CF 02 A0 FD |                 call    #do_int_in
344c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
344c8     0C 00 90 AD |         if_z    jmp     #.data
344cc     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
344d0     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
344d4     2D 00 64 FD |                 ret
344d8                 | .data
344d8     00 90 0F F2 |                 cmp     hpar3, #0               wz
344dc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
344e0                 | 
344e0     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
344e4     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
344e8     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
344ec     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
344f0                 |                 debug(ubin_long(hub_status_chg))
344f0                 | 
344f0     01 5A 06 F6 |                 mov     hdev_port, #1
344f4                 | .loop
344f4     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
344f8     0C 00 B0 AD |         if_x1   call    #hub_port_handler
344fc     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
34500     F0 FF 9F 3D |         if_nc   jmp     #.loop
34504     2D 00 64 FD |                 ret
34508                 | 
34508                 | hub_port_handler
34508     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3450c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34510     27 EF 03 F6 |                 mov     pb, urx_buff_p
34514     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34518     55 02 A0 FD |                 call    #control_read
3451c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34520                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
34520                 | 
34520     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
34524     50 01 90 5D |         if_x0   jmp     #.other
34528     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3452c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
34530     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34534     A0 02 A0 FD |                 call    #control_write
34538     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3453c     7C 01 90 5D |         if_x0   jmp     #.disconnect
34540     B0 99 02 F6 |                 mov     hctwait, _100ms_
34544     EF 02 A0 FD |                 call    #poll_waitx
34548                 | 
34548     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3454c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
34550     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34554     A0 02 A0 FD |                 call    #control_write
34558                 | 
34558     02 76 07 F6 |                 mov     htmp3, #2
3455c                 | .wait_reset
3455c     AC 99 02 F6 |                 mov     hctwait, _8ms_
34560     EF 02 A0 FD |                 call    #poll_waitx
34564     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34568     27 EF 03 F6 |                 mov     pb, urx_buff_p
3456c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34570     55 02 A0 FD |                 call    #control_read
34574     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
34578     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3457c     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
34580                 | 
34580     10 02 D0 FE |                 loc     ptra, #clr_port_feat
34584     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
34588     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3458c     A0 02 A0 FD |                 call    #control_write
34590                 | 
34590     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
34594                 | .wait_recover
34594     A7 99 02 F6 |                 mov     hctwait, _1ms_
34598     EF 02 A0 FD |                 call    #poll_waitx
3459c     FD 71 6F FB |                 djnz    htmp,#.wait_recover
345a0                 | 
345a0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
345a4     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
345a8     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
345ac                 | 
345ac     00 08 00 FF 
345b0     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
345b4     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
345b8     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
345bc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
345c0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
345c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
345c8     48 01 90 5D |         if_nz   jmp     #.done
345cc                 | .get_dev_desc
345cc     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
345d0     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
345d4     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
345d8     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
345dc     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
345e0     01 71 57 FC |                 wrword  htmp, ptra[wValue]
345e4     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
345e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
345ec     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
345f0     AC 99 02 F6 |                 mov     hctwait, _8ms_
345f4     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
345f8     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
345fc     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
34600     BE 00 A0 FD |                 call    #calc_crc5
34604     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
34608     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3460c     F7 AD C2 FA |                 rdbyte  total_data, pb
34610     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
34614     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
34618     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3461c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
34620     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
34624     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
34628                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
34628     9F 99 02 F6 |                 mov     hctwait, _500us_
3462c     EF 02 A0 FD |                 call    #poll_waitx
34630     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
34634     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
34638     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3463c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
34640     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
34644     CC 00 90 5D |         if_nz   jmp     #.done
34648     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3464c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
34650     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
34654     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
34658     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3465c     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
34660     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
34664     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
34668     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3466c     A4 00 90 CD |         if_b    jmp     #.done
34670     6C F0 BF FD |                 call    #hparse_con_desc
34674     9C 00 90 FD |                 jmp     #.done
34678                 | 
34678                 | .other
34678     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3467c     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
34680     28 00 90 AD |         if_x1   jmp     #.reset_feature
34684     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
34688     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3468c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
34690     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
34694     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
34698     10 00 90 AD |         if_x1   jmp     #.reset_feature
3469c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
346a0     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
346a4     04 00 90 AD |         if_x1   jmp     #.reset_feature
346a8     68 00 90 FD |                 jmp     #.done
346ac                 | .reset_feature
346ac     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
346b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
346b4     A0 02 A0 FD |                 call    #control_write
346b8     58 00 90 FD |                 jmp     #.done
346bc                 | .disconnect
346bc                 | 
346bc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
346c0     00 70 E3 F8 |                 getbyte htmp
346c4     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
346c8     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
346cc     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
346d0     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
346d4     00 76 06 A6 |         if_z    mov     kb_led_states, #0
346d8     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
346dc                 |         if EMUPAD_MAX_PLAYER > 0
346dc                 |         end
346dc                 |         if HAVE_MOUSE
346dc     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
346e0     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
346e4     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
346e8                 |         end
346e8                 |         if HAVE_HIDPAD
346e8     14 0A F0 FE |                 loc ptrb,#hidpad_report
346ec     2D 71 03 F6 |                 mov htmp,hdev_port
346f0     01 70 E7 F2 |                 cmpsub htmp,#1
346f4     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
346f8     B8 F3 03 F1 |                 add ptrb,htmp
346fc     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
34700     80 01 6C FC |                 wrlong #0,ptrb
34704                 |         end
34704                 | 
34704     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
34708     00 00 C4 F8 |                 setbyte #0
3470c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
34710     00 00 04 F6 |                 mov     0-0, #0
34714                 | 
34714                 | .done
34714     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
34718     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3471c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
34720     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
34724     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
34728     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3472c                 | 
3472c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
34730     27 EF 03 F6 |                 mov     pb, urx_buff_p
34734     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
34738     55 02 A0 FD |                 call    #control_read
3473c     00 69 06 FB |                 rdlong  hub_port_status, ptra
34740                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
34740     2D 00 64 FD |                 ret
34744                 | 
34744                 | '------------------------------------------------------------------------------
34744                 | ' Partially populated SETUP packets
34744                 | '------------------------------------------------------------------------------
34744     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
34745     06          |                 byte    REQ_GET_DESC
34746     00 01       |                 word    TYPE_DEVICE << 8
34748     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3474a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3474c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3474d     06          |                 byte    REQ_GET_DESC
3474e     00 02       |                 word    TYPE_CONFIG << 8
34750     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34752     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34754     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
34755     09          |                 byte    REQ_SET_CONFIG
34756     00 00       |                 word    0       ' Configuration value
34758     00 00       |                 word    0       ' Zero
3475a     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3475c     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3475d     05          |                 byte    REQ_SET_ADDR
3475e     00 00       |                 word    0       ' Zero
34760     00 00       |                 word    0       ' Zero
34762     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
34764                 | '------------------------------------------------------------------------------
34764                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
34764                 | ' wValue field dictates which protocol should be used.
34764                 | '
34764                 | ' When initialized, all devices default to report protocol. However the host
34764                 | ' should not make any assumptions about the device state and should set the
34764                 | ' desired protocol whenever initializing a device.
34764                 | '------------------------------------------------------------------------------
34764     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34765     0B          |                 byte    HID_SET_PROTO
34766     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
34768                 |                                                 ' (HID 1.11 Section 7.2.6).
34768     00 00       |                 word    0               ' Interface index number.
3476a     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3476c                 | '------------------------------------------------------------------------------
3476c     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3476d     0A          |                 byte    HID_SET_IDLE
3476e     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
34770                 |                                         ' reporting until a change is detected in the report data
34770                 | 
34770                 |                                         ' (HID 1.11 Section 7.2.4).
34770     00 00       |                 word    0       ' Interface index number.
34772     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
34774     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
34775     09          |                 byte    HID_SET_REPORT
34776     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
34778                 |                                         ' (HID 1.11 Section 7.2.2).
34778     00 00       |                 word    0       ' Interface index number.
3477a     00 00       |                 word    0       ' Size of the report, in bytes.
3477c     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3477d     06          |                 byte    REQ_GET_DESC
3477e     00 22       |                 word    TYPE_REPORT << 8
34780     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
34782     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34784                 | '------------------------------------------------------------------------------
34784     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
34785     06          |                 byte    REQ_GET_DESC
34786     00 29       |                 word    TYPE_HUB << 8
34788     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3478a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3478c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3478d     03          |                 byte    REQ_SET_FEATURE
3478e     00 00       |                 word    0       ' port power
34790     01 00       |                 word    1       ' Port index number (1+)
34792     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
34794     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
34795     01          |                 byte    REQ_CLEAR_FEATURE
34796     00 00       |                 word    0       ' port power
34798     01 00       |                 word    1       ' Port index number (1+)
3479a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3479c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3479d     00          |                 byte    REQ_GET_STATUS
3479e     00 00       |                 word    0
347a0     01 00       |                 word    1       ' Port index number (1+)
347a2     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
347a4                 | '------------------------------------------------------------------------------
347a4                 | if _HAVE_GAMEPAD
347a4     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
347a8                 | ps3_command_buff
347a8     00 00 00 00 
347ac     00          |                 byte    $00, $00, $00, $00, $00
347ad     00 00 00 00 
347b1     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
347b2     FF 27 10 00 
347b6     32          |                 byte    $FF, $27, $10, $00, $32
347b7     FF 27 10 00 
347bb     32          |                 byte    $FF, $27, $10, $00, $32
347bc     FF 27 10 00 
347c0     32          |                 byte    $FF, $27, $10, $00, $32
347c1     FF 27 10 00 
347c5     32          |                 byte    $FF, $27, $10, $00, $32
347c6     00 00 00 00 
347ca     00          |                 byte    $00, $00, $00, $00, $00
347cb     00 00 00 00 
347cf     00          |                 byte    $00, $00, $00, $00, $00
347d0     00 00 00 00 
347d4     00          |                 byte    $00, $00, $00, $00, $00
347d5     00 00 00    |                 byte    $00, $00, $00
347d8                 | '------------------------------------------------------------------------------
347d8     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
347db                 |                                         ' 0x01 All blinking
347db                 |                                         ' 0x02 1 flashes, then on
347db                 |                                         ' 0x03 2 flashes, then on
347db                 |                                         ' 0x04 3 flashes, then on
347db                 |                                         ' 0x05 4 flashes, then on
347db                 |                                         ' 0x06 1 on
347db                 |                                         ' 0x07 2 on
347db                 |                                         ' 0x08 3 on
347db                 |                                         ' 0x09 4 on
347db                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
347db                 |                                         ' 0x0B Blinking*
347db                 |                                         ' 0x0C Slow blinking*
347db                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
347db     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
347de     00          |                 byte    $00             ' Left rumble
347df     00          |                 byte    $00             ' Right rumble
347e0     00 00 00    |                 byte    $00, $00, $00
347e3     00          | end
347e4                 | alignl
347e4                 | 
347e4                 | if HAVE_MOUSE
347e4     00 00 00 00 
347e8     00 00 00 00 | mouse_limits long 0[2]
347ec     00 00 00 00 | mouse_outptr long 0
347f0                 | end
347f0                 | 
347f0                 | if KEYQUEUE_SIZE > 0
347f0     00          | keyq_head byte 0
347f1     00          | keyq_tail byte 0
347f2     00 00 00 00 
      ...             
349ee     00 00 00 00 
349f2     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
349f4                 | alignl
349f4                 | end
349f4                 | 
349f4                 | if EMUPAD_MAX_PLAYER > 0
349f4                 | emupad_rule_buffer
349f4                 | if EMUPAD_BUILTIN_RULES
349f4                 | file "padmap_builtin.dat"
349f4                 | end
349f4                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
349f4                 | '' Default rule directly follows!
349f4                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
349f4                 | end
349f4                 | 
349f4                 | '------------------------------------------------------------------------------
349f4                 | ' The USB data cache area gets zero-filled at every device disconnect
349f4                 | '------------------------------------------------------------------------------
349f4                 | usb_cache_start
349f4                 | 
349f4                 | ' HID descriptor and report buffers
349f4                 | if !!OVERLAP_MEMORY
349f4     00 00 00 00 
      ...             
350ec     00 00 00 00 
350f0     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
350f4                 | end
350f4     00 00 00 00 
350f8     00 00 00 00 | hkbd_report     byte    0[8]
350fc     00 00 00 00 | hkbd_led_rep    byte    0
35100                 | alignl
35100                 | 
35100                 | if HAVE_HIDPAD
35100     00 00 00 00 
      ...             
351bc     00 00 00 00 
351c0     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
351c4                 | end
351c4                 | 
351c4                 | ' HUB descriptor
351c4     00          | hub_descr       byte    0   ' bDescLength
351c5     00          |                 byte    0   ' bDescriptorType
351c6     00          |                 byte    0   ' bNbrPorts
351c7     00 00       |                 word    0   ' wHubCharacteristics
351c9     00          |                 byte    0   ' bPwrOn2PwrGood
351ca     00          |                 byte    0   ' bHubContrCurrent
351cb     00          |                 byte    0   ' DeviceRemoveable
351cc     00          |                 byte    0   ' PortPwrCtrlMask
351cd                 | 
351cd                 | usb_cache_end
351cd                 | 
351cd                 | if HAVE_MOUSE
351cd     00 00 00 00 | mouse_xacc      long 0
351d1     00 00 00 00 | mouse_yacc      long 0
351d5     00 00 00 00 | mouse_zacc      long 0
351d9     00          | mouse_bstate    byte 0
351da     00          | mouse_lpending  byte 0
351db     00          | mouse_rpending  byte 0
351dc     00          | mouse_mpending  byte 0
351dd     00          | mouse_lock      byte 0
351de     00 00 00    |                 byte 0[3] ' padding
351e1                 | end
351e1                 | 
351e1     00 00 00 00 
      ...             
35259     00 00 00 00 
3525d     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
35261     00 00 00 00 
35265     00 00 00 00 
35269     00 00 00 00 
3526d     00 00 00 00 
35271     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
35273     00 00 00 00 
      ...             
3536b     00 00 00 00 
3536f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
35373                 | 
35373     00          | driver_cog      byte    0                       ' Current driver cog + 1
35374                 | 	alignl
35374                 | _audio096_spin2_dat_
35374                 | 
35374                 | audio       org     0
35374                 | 
35374     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
35378     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3537c     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
35380                 | 
35380     01 EC 63 FD |             cogid   pa                   ' compute cogid
35384     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
35388     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3538c     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
35390                 | 
35390     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
35394     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
35398     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3539c     0F 20 06 FC |             wrpin   dac2,#right
353a0     0F 00 1E FC |             wxpin   #256,#right    
353a4     41 9C 64 FD |             dirh    #left addpins 1
353a8     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
353ac     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
353b0     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
353b4                 |             
353b4                 | '---------------------------------------------------------------------------------        
353b4                 | '----------------- The main loop -------------------------------------------------
353b4                 | '---------------------------------------------------------------------------------
353b4                 | 
353b4     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
353b8     10 00 90 CD |       if_c  jmp     #loop1
353bc                 |   
353bc     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
353c0     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
353c4     D3 00 80 F1 |             sub     0-0,a40000000
353c8     FD FD 6D FB |             djnz    cn,#p402
353cc                 |     
353cc     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
353d0     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
353d4     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
353d8     01 FC 05 C6 |     if_c    mov     cn,#1
353dc     D8 FE 39 F3 |             fle     ct,time3 wcz
353e0     02 FC 05 C6 |     if_c    mov     cn,#2     
353e4     D9 FE 39 F3 |             fle     ct,time4 wcz
353e8     03 FC 05 C6 |     if_c    mov     cn,#3
353ec     DA FE 39 F3 |             fle     ct,time5 wcz
353f0     04 FC 05 C6 |     if_c    mov     cn,#4
353f4     DB FE 39 F3 |             fle     ct,time6 wcz
353f8     05 FC 05 C6 |     if_c    mov     cn,#5
353fc     DC FE 39 F3 |             fle     ct,time7 wcz
35400     06 FC 05 C6 |     if_c    mov     cn,#6
35404     DD FE 39 F3 |             fle     ct,time8 wcz
35408     07 FC 05 C6 |     if_c    mov     cn,#7
3540c                 | 
3540c                 | 
3540c                 | '----------------------------------------------------------------------------------
3540c                 | '------------- Compute channel samples --------------------------------------------
3540c                 | '----------------------------------------------------------------------------------
3540c                 | 
3540c                 | 
3540c     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
35410     06 BC 65 F0 |             shl     channeladd,#6
35414     DE F0 03 F1 |             add     ptra,channeladd
35418                 | 
35418     28 16 64 FD |             setq    #11                        	' read parameters
3541c     00 D3 05 FB |             rdlong  pointer0,ptra
35420                 |     	    
35420     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
35424     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
35428     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
3542c     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
35430     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
35434     00 C0 0D F2 |             cmp     qq,#0 wz                         
35438     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3543c     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
35440                 |             
35440     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
35444     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
35448     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3544c                 | 
3544c     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
35450     EA 04 3A F9 |             getword oldrs,sample0,#1
35454     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
35458     EE F6 31 F9 |     	    getword avol0,volpan0,#0
3545c     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
35460     EF F2 31 F9 |             getword afreq0,freqskip0,#0
35464                 | 
35464     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
35468     00 00 02 F6 |             mov     dt0,0-0    
3546c     D5 00 82 F1 |             sub     dt0,time0
35470                 |             
35470     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
35474     F9 00 00 F1 |             add     0-0,afreq0  	
35478                 |             
35478                 | '---- envelopes
35478                 |             
35478     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3547c     20 00 00 AF 
35480     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
35484     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
35488                 | 
35488     F9 44 02 F6 |             mov     envs1,afreq0
3548c     F3 44 02 FA |             mul     envs1,envspd0
35490     22 E3 01 F1 |             add     envph0,envs1 
35494                 | 
35494     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
35498     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3549c     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
354a0     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
354a4     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
354a8     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
354ac     00 42 06 36 |     if_ge   mov     envlo,#0
354b0     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
354b4     16 E2 65 30 |     if_ge   shl     envph0,#22
354b8                 | 
354b8     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
354bc     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
354c0     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
354c4     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
354c8     22 47 3A F9 |             getword envs2,envs1,#1		' next value
354cc     22 45 32 F9 |             getword envs1,envs1,#0		' current value
354d0     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
354d4     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
354d8     21 45 02 FA |             mul     envs1,envlo
354dc     23 45 02 F1 |             add     envs1,envs2
354e0     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
354e4                 |             
354e4     1B D6 0D F4 | p410        testb   sstart0, #27 wz
354e8     1B C2 61 AD |     if_z    getrnd  spl
354ec     58 00 90 AD |     if_z    jmp     #p406
354f0                 |  
354f0     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
354f4     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
354f8     08 D2 45 F0 |             shr     pointer0,#8
354fc                 |          
354fc     1F D6 0D F4 |             testb   sstart0,#31 wz            
35500     01 D2 65 A0 |     if_z    shl     pointer0,#1        
35504     1C D6 0D F4 |             testb   sstart0,#28 wz            
35508     01 D2 65 A0 |     if_z    shl     pointer0,#1        
3550c                 |         
3550c     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
35510     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
35514     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
35518                 |             
35518     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3551c     EB C0 01 F1 |             add     qq,sstart0            
35520                 | 
35520     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
35524     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
35528     14 01 B0 1D |     if_gt   call    #cache_read
3552c                 |          
3552c     1F D6 0D F4 |             testb   sstart0,#31 wz 
35530     08 C2 65 50 |     if_nz   shl     spl,#8
35534     08 D2 65 50 |     if_nz   shl     pointer0,#8
35538     07 D2 65 A0 |     if_z    shl     pointer0,#7
3553c     1C D6 0D F4 |             testb   sstart0,#28 wz            
35540     01 D2 45 A0 |     if_z    shr     pointer0,#1    
35544     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
35548                 | 
35548                 | 
35548     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
3554c     00 C2 01 F6 |             mov     spl,0-0
35550     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
35554     00 C2 01 F6 |             mov     spl,0-0
35558                 | 
35558     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
3555c     00 06 02 F6 |             mov     ls0,0-0
35560     20 00 00 FF 
35564     00 C0 05 F6 |             mov     qq,##16384
35568     FC C0 81 F1 |             sub     qq,apan0
3556c     E0 C2 31 FA |             scas    spl,qq
35570     00 08 02 F6 |             mov     rs0, 0-0
35574                 | 
35574     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
35578     04 0D 02 F1 |             add     rs,rs0
3557c     01 0B 82 F1 |             sub     ls,oldls
35580     03 0B 02 F1 |             add     ls,ls0
35584                 |    
35584     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
35588     03 D5 21 F9 |             setword sample0,ls0,#0
3558c                 |             
3558c     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
35590     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
35594     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
35598                 |   '  if_z    mov     sample0,#0
35598     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3559c     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
355a0     04 00 00 AF 
355a4     00 AC 05 A1 |     if_z    add     time1,##2048
355a8     D6 AE 01 A6 |     if_z    mov     time2,time1
355ac     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
355b0                 | 
355b0     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
355b4     00 D3 65 FC |             wrlong  pointer0,ptra
355b8     08 E3 65 FC |             wrlong  envph0,ptra[8]
355bc     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
355c0                 |                       
355c0     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
355c4     FF BF 25 A7 |     if_z    decmod  front, #511          
355c8                 |          
355c8     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
355cc     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
355d0     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
355d4     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
355d8                 | 	    
355d8                 | 		    
355d8     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
355dc     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
355e0     02 11 02 F6 |             mov     newsample, oldrs       
355e4                 | 
355e4     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
355e8     00 AB 01 F1 |             add     time0,dt0    
355ec                 |                                      
355ec     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
355f0     D8 FD 9F AD |     if_z    jmp     #loop1
355f4     00 C1 01 F6 |             mov     qq,dt0
355f8                 |   
355f8     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
355fc     00 BE 9D F2 |             cmpr    front, #0-0 wcz
35600     F4 FF 9F AD |     if_e    jmp     #p301    
35604                 | 		
35604     00 16 0E F2 | 	    cmp     scbase,#0 wz
35608     20 00 90 AD |     if_z    jmp     #p302	   
3560c                 |   
3560c     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
35610     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
35614     02 1A 66 C0 |     if_c    shl     scptr2,#2
35618     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
3561c     60 1A 66 FC |             wrlong  scptr2,#$60
35620     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
35624     01 00 00 CF 
35628     7F 18 06 C7 |     if_c    incmod  scptr,##639
3562c                 | 			    
3562c     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
35630     00 00 00 FF 
35634     FF BF 05 F7 |             incmod  front, ##511
35638     EF C1 6D FB |             djnz    qq,#p301
3563c                 |             
3563c     74 FD 9F FD |             jmp     #loop            'loop
35640                 | 
35640                 | '----------------------------------------------------------------------------------
35640                 | '------------- This is the end of the main loop -----------------------------------
35640                 | '----------------------------------------------------------------------------------
35640                 | 
35640                 | '----------------------------------------------------------------------------------
35640                 | '------------- PSRAM cache ----------- --------------------------------------------
35640                 | '----------------------------------------------------------------------------------
35640                 | 
35640                 | ' There are 8 cache pointers for 8 channels
35640                 | ' if 24 higher bits of address=cache, then get a word from the cache
35640                 | ' else load the cache from PSRAM, update the pointer, then read a sample
35640                 | 
35640                 | 
35640     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
35644                 |             
35644     E0 3C 02 F6 | 	    mov     addrhi,qq		
35648     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3564c     12 FD 95 F9 | 	    alts    cn,#cache1            
35650     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
35654     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
35658                 | 	
35658     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
3565c     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
35660     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
35664     08 34 66 F0 | 	    shl     cmd,#8
35668     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3566c     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
35670     08 36 66 F0 |             shl     hubaddr,#8                  '
35674     11 37 02 F1 |             add     hubaddr,hubptr 
35678     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
3567c     28 04 64 FD |             setq    #2                          ' write 3 longs
35680     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
35684     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
35688     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3568c                 |             
3568c                 | 	
3568c     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
35690     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
35694     11 C1 01 F1 | 	    add     qq,hubptr
35698     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3569c     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
356a0                 |           
356a0                 | 
356a0                 | '--------------------------------------------------------------------------
356a0                 | '------ Interrupt service -------------------------------------------------
356a0                 | '------ Output the sample, get the next one if exists ---------------------
356a0                 | '--------------------------------------------------------------------------
356a0                 | 
356a0     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
356a4     0F CC 25 FC |             wypin   rsample,#right       '4
356a8     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
356ac     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
356b0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
356b4     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
356b8     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
356bc                 |     
356bc     F5 FF 3B FB |             reti1                        '17/19 
356c0                 |           
356c0                 | '---------------------------------------------------------------------------
356c0                 | '-------- End of interrupt -------------------------------------------------
356c0                 | '---------------------------------------------------------------------------    
356c0                 | 
356c0                 | 
356c0                 | '---------------------------------------------------------------------------
356c0                 | '------- Variables ---------------------------------------------------------
356c0                 | '---------------------------------------------------------------------------
356c0                 | 
356c0                 | ' constants
356c0                 | 
356c0     00 00 00 40 | a40000000   long $40000000
356c4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
356c8                 | 
356c8                 | ' Time variables
356c8                 | 
356c8     00 00 00 00 | time0       long 0    ' Global sample computing time
356cc     01 00 00 00 | time1       long 1    ' Local channels time
356d0     02 00 00 00 | time2       long 2
356d4     03 00 00 00 | time3       long 3
356d8     04 00 00 00 | time4       long 4
356dc     05 00 00 00 | time5       long 5
356e0     06 00 00 00 | time6       long 6
356e4     07 00 00 00 | time7       long 7
356e8     08 00 00 00 | time8       long 8
356ec                 | 
356ec     00 00 00 00 | channeladd long 0
356f0                 | 
356f0     00 00 00 00 | front       long 0
356f4                 | 
356f4                 | ' temporary variables 
356f4     00 00 00 00 | qq          long 0
356f8     00 00 00 00 | spl         long 0
356fc     00 00 00 00 | zero        long 0
35700     00 00 00 00 | mailbox     long 0
35704     00 00 00 00 | mailbox2 long 0
35708                 | 
35708                 | ' Interrupt ISR variables
35708                 | 
35708     00 00 00 00 | lsample     long 0
3570c     00 00 00 00 | rsample     long 0
35710     00 00 00 00 | lsnext      long 0
35714     00 00 00 00 | rsnext      long 0 
35718                 | 
35718                 | ' channel parameter block
35718                 | 
35718     00 00 00 00 | pointer0    long 0     
3571c     00 00 00 00 | sample0     long 0
35720     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
35724     00 00 00 00 | lstart0     long 0
35728     00 00 00 00 | lend0       long 0
3572c     00 00 00 00 | volpan0     long 0
35730     00 00 00 00 | freqskip0   long 0
35734     00 00 00 00 | command0    long 0
35738     00 00 00 00 | envph0	    long 0
3573c     00 00 00 00 | envptr0	    long 0
35740     00 00 00 00 | envspd0	    long 0
35744     00 00 00 00 | envlen0	    long 0
35748     00 00 00 00 | res5	    long 0
3574c     00 00 00 00 | res6	    long 0
35750     00 00 00 00 | res7	    long 0
35754     00 00 00 00 | res8	    long 0
35758                 | 
35758     00 00 00 00 | afreq0      long 0
3575c     00 00 00 00 | askip0      long 0
35760     00 00 00 00 | avol0       long 0
35764     00 00 00 00 | apan0       long 0
35768                 | 
35768     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3576c     00 00 00 00 | cn          long 0
35770     00 00 00 00 | ct          long 0
35774     00 00 00 00 | dt0         long 0
35778                 | 
35778                 | ' Samples
35778     00 00 00 00 | oldls       long 0
3577c     00 00 00 00 | oldrs       long 0
35780                 | 
35780     00 00 00 00 | ls0         long 0
35784     00 00 00 00 | rs0         long 0
35788                 | 
35788     00 00 00 00 | ls          long 0    
3578c     00 00 00 00 | rs          long 0
35790                 | 
35790     00 00 00 00 | oldsample   long 0
35794     00 00 00 00 | newsample   long 0
35798                 | 
35798     00 00 00 00 | nrsample    long 0
3579c     00 00 00 00 | nlsample    long 0
357a0                 | 
357a0     00 00 00 00 | scbase long 0
357a4     00 00 00 00 | scptr long 0
357a8     00 00 00 00 | scptr2 long 0
357ac     00 00 00 00 | scope long 0
357b0                 | 
357b0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
357b4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
357b8                 | 
357b8     00 18 07 00 | hubptr      long $71800
357bc     00 00 00 00 | cache1      long 0
357c0     00 00 00 00 | cache2      long 0
357c4     00 00 00 00 | cache3      long 0
357c8     00 00 00 00 | cache4      long 0
357cc     00 00 00 00 | cache5      long 0
357d0     00 00 00 00 | cache6      long 0
357d4     00 00 00 00 | cache7      long 0
357d8     00 00 00 00 | cache8      long 0
357dc                 | 
357dc                 | 
357dc     00 00 00 00 | cmd         long 0
357e0     00 00 00 00 | hubaddr     long 0
357e4     00 01 00 00 | count       long 256
357e8     00 00 00 00 | addrlo long 0
357ec     00 00 00 00 | addrhi long 0
357f0     00 00 00 00 | pointer00 long 0
357f4     00 00 00 00 | envhi long 0
357f8     00 00 00 00 | envlo long 0
357fc     00 00 00 00 | envs1 long 0
35800     00 00 00 00 | envs2 long 0
35804     00 00 00 00 | noise0 long 0
35808     00 00 00 00 
3580c     00 00 00 00 | null  			long 	0,0           ' for channel reset
35810                 | 	alignl
35810                 | __system__dat_
35810     00 00 00 00 
35814     00 00 00 00 | 	byte	$00[8]
35818     03 00 00 00 
3581c     00 00 00 00 
35820     00 00 00 00 
35824     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35828     00 00 00 00 
      ...             
35ab4     00 00 00 00 
35ab8     00 00 00 00 | 	byte	$00[660]
35abc     00 00 C0 07 | 	long	(124 {__system____root_opendir})<<20
35ac0     00 00 D0 07 | 	long	(125 {__system____root_closedir})<<20
35ac4     00 00 E0 07 | 	long	(126 {__system____root_readdir})<<20
35ac8     00 00 F0 07 | 	long	(127 {__system____root_stat})<<20
35acc     00 00 00 00 
35ad0     00 00 00 00 
35ad4     00 00 00 00 
35ad8     00 00 00 00 
35adc     00 00 00 00 
35ae0     00 00 00 00 
35ae4     00 00 00 00 | 	byte	$00[28]
35ae8     50 5B 03 00 | 	long	@@@__system__dat_ + 832
35aec     53 5B 03 00 | 	long	@@@__system__dat_ + 835
35af0     74 5B 03 00 | 	long	@@@__system__dat_ + 868
35af4     8D 5B 03 00 | 	long	@@@__system__dat_ + 893
35af8     A8 5B 03 00 | 	long	@@@__system__dat_ + 920
35afc     C2 5B 03 00 | 	long	@@@__system__dat_ + 946
35b00     D2 5B 03 00 | 	long	@@@__system__dat_ + 962
35b04     E4 5B 03 00 | 	long	@@@__system__dat_ + 980
35b08     F6 5B 03 00 | 	long	@@@__system__dat_ + 998
35b0c     08 5C 03 00 | 	long	@@@__system__dat_ + 1016
35b10     14 5C 03 00 | 	long	@@@__system__dat_ + 1028
35b14     25 5C 03 00 | 	long	@@@__system__dat_ + 1045
35b18     39 5C 03 00 | 	long	@@@__system__dat_ + 1065
35b1c     43 5C 03 00 | 	long	@@@__system__dat_ + 1075
35b20     53 5C 03 00 | 	long	@@@__system__dat_ + 1091
35b24     62 5C 03 00 | 	long	@@@__system__dat_ + 1106
35b28     78 5C 03 00 | 	long	@@@__system__dat_ + 1128
35b2c     91 5C 03 00 | 	long	@@@__system__dat_ + 1153
35b30     A5 5C 03 00 | 	long	@@@__system__dat_ + 1173
35b34     B3 5C 03 00 | 	long	@@@__system__dat_ + 1187
35b38     C7 5C 03 00 | 	long	@@@__system__dat_ + 1207
35b3c     D3 5C 03 00 | 	long	@@@__system__dat_ + 1219
35b40     E5 5C 03 00 | 	long	@@@__system__dat_ + 1237
35b44     FD 5C 03 00 | 	long	@@@__system__dat_ + 1261
35b48     0F 5D 03 00 | 	long	@@@__system__dat_ + 1279
35b4c     22 5D 03 00 | 	long	@@@__system__dat_ + 1298
35b50     4F 4B 00 4E 
35b54     75 6D 65 72 
35b58     69 63 61 6C 
35b5c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
35b60     75 6D 65 6E 
35b64     74 20 6F 75 
35b68     74 20 6F 66 
35b6c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
35b70     61 69 6E 00 
35b74     52 65 73 75 
35b78     6C 74 20 6E 
35b7c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
35b80     65 70 72 65 
35b84     73 65 6E 74 
35b88     61 62 6C 65 
35b8c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
35b90     65 67 61 6C 
35b94     20 6D 75 6C 
35b98     74 69 62 79 
35b9c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
35ba0     65 71 75 65 
35ba4     6E 63 65 00 
35ba8     4E 6F 20 73 
35bac     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
35bb0     66 69 6C 65 
35bb4     20 6F 72 20 
35bb8     64 69 72 65 
35bbc     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
35bc0     79 00 42 61 
35bc4     64 20 66 69 
35bc8     6C 65 20 6E 
35bcc     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
35bd0     72 00 50 65 
35bd4     72 6D 69 73 
35bd8     73 69 6F 6E 
35bdc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
35be0     69 65 64 00 
35be4     4E 6F 74 20 
35be8     65 6E 6F 75 
35bec     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
35bf0     65 6D 6F 72 
35bf4     79 00 54 65 
35bf8     6D 70 6F 72 
35bfc     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
35c00     66 61 69 6C 
35c04     75 72 65 00 
35c08     46 69 6C 65 
35c0c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
35c10     73 74 73 00 
35c14     49 6E 76 61 
35c18     6C 69 64 20 
35c1c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
35c20     6D 65 6E 74 
35c24     00 54 6F 6F 
35c28     20 6D 61 6E 
35c2c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
35c30     65 6E 20 66 
35c34     69 6C 65 73 
35c38     00 49 2F 4F 
35c3c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
35c40     6F 72 00 4E 
35c44     6F 74 20 61 
35c48     20 64 69 72 
35c4c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
35c50     72 79 00 49 
35c54     73 20 61 20 
35c58     64 69 72 65 
35c5c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
35c60     79 00 52 65 
35c64     61 64 20 6F 
35c68     6E 6C 79 20 
35c6c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
35c70     20 73 79 73 
35c74     74 65 6D 00 
35c78     46 75 6E 63 
35c7c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
35c80     20 6E 6F 74 
35c84     20 69 6D 70 
35c88     6C 65 6D 65 
35c8c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
35c90     00 44 69 72 
35c94     65 63 74 6F 
35c98     72 79 20 6E 
35c9c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
35ca0     6D 70 74 79 
35ca4     00 4E 61 6D 
35ca8     65 20 74 6F 
35cac     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
35cb0     6E 67 00 44 
35cb4     65 76 69 63 
35cb8     65 20 6E 6F 
35cbc     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
35cc0     65 6B 61 62 
35cc4     6C 65 00 42 
35cc8     61 64 20 61 
35ccc     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
35cd0     73 73 00 42 
35cd4     72 6F 6B 65 
35cd8     6E 20 63 6F 
35cdc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
35ce0     74 69 6F 6E 
35ce4     00 44 65 76 
35ce8     69 63 65 20 
35cec     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
35cf0     65 73 6F 75 
35cf4     72 63 65 20 
35cf8     62 75 73 79 
35cfc     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
35d00     73 73 20 64 
35d04     65 76 69 63 
35d08     65 20 6C 69 
35d0c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
35d10     6F 20 73 70 
35d14     61 63 65 20 
35d18     6F 6E 20 64 
35d1c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
35d20     65 00 55 6E 
35d24     6B 6E 6F 77 
35d28     6E 20 65 72 
35d2c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
35d30     00 00 00 00 
35d34     00 00 00 00 | 	byte	$00[8]
35d38     05 00 00 00 
35d3c     00 00 00 00 
35d40     00 00 00 00 
35d44     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d48     00 00 00 00 | 	byte	$00, $00, $00, $00
35d4c     00 00 40 09 | 	long	(148 {__system___tx})<<20
35d50     00 00 50 09 | 	long	(149 {__system___rx})<<20
35d54     00 00 00 00 | 	byte	$00, $00, $00, $00
35d58     00 00 60 09 | 	long	(150 {__system___rxtxioctl_0628})<<20
35d5c     00 00 70 09 | 	long	(151 {__system____dummy_flush_0629})<<20
35d60     00 00 00 00 
35d64     00 00 00 00 | 	byte	$00[8]
35d68     01 00 00 00 
35d6c     06 00 00 00 
35d70     00 00 00 00 
35d74     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d78     00 00 00 00 
35d7c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
35d80     00 00 40 09 | 	long	(148 {__system___tx})<<20
35d84     00 00 50 09 | 	long	(149 {__system___rx})<<20
35d88     00 00 00 00 | 	byte	$00, $00, $00, $00
35d8c     00 00 60 09 | 	long	(150 {__system___rxtxioctl_0628})<<20
35d90     00 00 70 09 | 	long	(151 {__system____dummy_flush_0629})<<20
35d94     00 00 00 00 
35d98     00 00 00 00 | 	byte	$00[8]
35d9c     01 00 00 00 
35da0     06 00 00 00 
35da4     00 00 00 00 
35da8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35dac     00 00 00 00 
35db0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
35db4     00 00 40 09 | 	long	(148 {__system___tx})<<20
35db8     00 00 50 09 | 	long	(149 {__system___rx})<<20
35dbc     00 00 00 00 | 	byte	$00, $00, $00, $00
35dc0     00 00 60 09 | 	long	(150 {__system___rxtxioctl_0628})<<20
35dc4     00 00 70 09 | 	long	(151 {__system____dummy_flush_0629})<<20
35dc8     00 00 00 00 
      ...             
35f38     00 00 00 00 
35f3c     00 00 00 00 | 	byte	$00[376]
35f40     44 5F 03 00 | 	long	@@@__system__dat_ + 1844
35f44     00 00 00 00 
35f48     00 00 00 00 
35f4c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35f50                 | 	alignl
35f50                 | _fatfs_cc_dat_
35f50     C7 00 FC 00 
35f54     E9 00 E2 00 
35f58     E4 00 E0 00 
35f5c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
35f60     EA 00 EB 00 
35f64     E8 00 EF 00 
35f68     EE 00 EC 00 
35f6c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
35f70     C9 00 E6 00 
35f74     C6 00 F4 00 
35f78     F6 00 F2 00 
35f7c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
35f80     FF 00 D6 00 
35f84     DC 00 F8 00 
35f88     A3 00 D8 00 
35f8c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
35f90     E1 00 ED 00 
35f94     F3 00 FA 00 
35f98     F1 00 D1 00 
35f9c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
35fa0     BF 00 AE 00 
35fa4     AC 00 BD 00 
35fa8     BC 00 A1 00 
35fac     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
35fb0     91 25 92 25 
35fb4     93 25 02 25 
35fb8     24 25 C1 00 
35fbc     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
35fc0     A9 00 63 25 
35fc4     51 25 57 25 
35fc8     5D 25 A2 00 
35fcc     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
35fd0     14 25 34 25 
35fd4     2C 25 1C 25 
35fd8     00 25 3C 25 
35fdc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
35fe0     5A 25 54 25 
35fe4     69 25 66 25 
35fe8     60 25 50 25 
35fec     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
35ff0     F0 00 D0 00 
35ff4     CA 00 CB 00 
35ff8     C8 00 31 01 
35ffc     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
36000     CF 00 18 25 
36004     0C 25 88 25 
36008     84 25 A6 00 
3600c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
36010     D3 00 DF 00 
36014     D4 00 D2 00 
36018     F5 00 D5 00 
3601c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
36020     DE 00 DA 00 
36024     DB 00 D9 00 
36028     FD 00 DD 00 
3602c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
36030     AD 00 B1 00 
36034     17 20 BE 00 
36038     B6 00 A7 00 
3603c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
36040     B0 00 A8 00 
36044     B7 00 B9 00 
36048     B3 00 B2 00 
3604c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
36050     61 00 1A 03 
36054     E0 00 17 03 
36058     F8 00 07 03 
3605c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
36060     78 01 00 01 
36064     30 01 32 01 
36068     06 01 39 01 
3606c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
36070     2E 01 79 01 
36074     06 01 80 01 
36078     4D 00 43 02 
3607c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
36080     82 01 84 01 
36084     84 01 86 01 
36088     87 01 87 01 
3608c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
36090     8B 01 8B 01 
36094     8D 01 8E 01 
36098     8F 01 90 01 
3609c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
360a0     93 01 94 01 
360a4     F6 01 96 01 
360a8     97 01 98 01 
360ac     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
360b0     9B 01 9C 01 
360b4     9D 01 20 02 
360b8     9F 01 A0 01 
360bc     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
360c0     A2 01 A4 01 
360c4     A4 01 A6 01 
360c8     A7 01 A7 01 
360cc     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
360d0     AB 01 AC 01 
360d4     AC 01 AE 01 
360d8     AF 01 AF 01 
360dc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
360e0     B3 01 B3 01 
360e4     B5 01 B5 01 
360e8     B7 01 B8 01 
360ec     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
360f0     BB 01 BC 01 
360f4     BC 01 BE 01 
360f8     F7 01 C0 01 
360fc     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
36100     C3 01 C4 01 
36104     C5 01 C4 01 
36108     C7 01 C8 01 
3610c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
36110     CB 01 CA 01 
36114     CD 01 10 01 
36118     DD 01 01 00 
3611c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
36120     12 01 F3 01 
36124     03 00 F1 01 
36128     F4 01 F4 01 
3612c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
36130     22 02 12 01 
36134     3A 02 09 00 
36138     65 2C 3B 02 
3613c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
36140     66 2C 3F 02 
36144     40 02 41 02 
36148     41 02 46 02 
3614c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
36150     40 00 81 01 
36154     86 01 55 02 
36158     89 01 8A 01 
3615c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
36160     5A 02 90 01 
36164     5C 02 5D 02 
36168     5E 02 5F 02 
3616c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
36170     62 02 94 01 
36174     64 02 65 02 
36178     66 02 67 02 
3617c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
36180     6A 02 62 2C 
36184     6C 02 6D 02 
36188     6E 02 9C 01 
3618c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
36190     9D 01 73 02 
36194     74 02 9F 01 
36198     76 02 77 02 
3619c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
361a0     7A 02 7B 02 
361a4     7C 02 64 2C 
361a8     7E 02 7F 02 
361ac     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
361b0     82 02 A9 01 
361b4     84 02 85 02 
361b8     86 02 87 02 
361bc     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
361c0     B1 01 B2 01 
361c4     45 02 8D 02 
361c8     8E 02 8F 02 
361cc     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
361d0     B7 01 7B 03 
361d4     03 00 FD 03 
361d8     FE 03 FF 03 
361dc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
361e0     86 03 88 03 
361e4     89 03 8A 03 
361e8     B1 03 11 03 
361ec     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
361f0     A3 03 A3 03 
361f4     C4 03 08 03 
361f8     CC 03 03 00 
361fc     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
36200     8F 03 D8 03 
36204     18 01 F2 03 
36208     0A 00 F9 03 
3620c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
36210     F5 03 F6 03 
36214     F7 03 F7 03 
36218     F9 03 FA 03 
3621c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
36220     20 03 50 04 
36224     10 07 60 04 
36228     22 01 8A 04 
3622c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
36230     0E 01 CF 04 
36234     01 00 C0 04 
36238     D0 04 44 01 
3623c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
36240     00 00 7D 1D 
36244     01 00 63 2C 
36248     00 1E 96 01 
3624c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
36250     00 1F 08 06 
36254     10 1F 06 06 
36258     20 1F 08 06 
3625c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
36260     40 1F 06 06 
36264     51 1F 07 00 
36268     59 1F 52 1F 
3626c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
36270     5D 1F 56 1F 
36274     5F 1F 60 1F 
36278     08 06 70 1F 
3627c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
36280     BB 1F C8 1F 
36284     C9 1F CA 1F 
36288     CB 1F DA 1F 
3628c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
36290     F9 1F EA 1F 
36294     EB 1F FA 1F 
36298     FB 1F 80 1F 
3629c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
362a0     08 06 A0 1F 
362a4     08 06 B0 1F 
362a8     04 00 B8 1F 
362ac     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
362b0     BC 1F CC 1F 
362b4     01 00 C3 1F 
362b8     D0 1F 02 06 
362bc     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
362c0     E5 1F 01 00 
362c4     EC 1F F3 1F 
362c8     01 00 FC 1F 
362cc     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
362d0     32 21 70 21 
362d4     10 02 84 21 
362d8     01 00 83 21 
362dc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
362e0     30 2C 2F 04 
362e4     60 2C 02 01 
362e8     67 2C 06 01 
362ec     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
362f0     80 2C 64 01 
362f4     00 2D 26 08 
362f8     41 FF 1A 03 
362fc     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
36300     05 07 09 0E 
36304     10 12 14 16 
36308     18 1C 1E 43 
3630c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
36310     41 41 43 45 
36314     45 45 49 49 
36318     49 41 41 45 
3631c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
36320     4F 55 55 59 
36324     4F 55 4F 9C 
36328     4F 9E 9F 41 
3632c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
36330     A5 A6 A7 A8 
36334     A9 AA AB AC 
36338     AD AE AF B0 
3633c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
36340     41 41 41 B8 
36344     B9 BA BB BC 
36348     BD BE BF C0 
3634c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
36350     C5 41 41 C8 
36354     C9 CA CB CC 
36358     CD CE CF D1 
3635c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
36360     49 49 49 49 
36364     D9 DA DB DC 
36368     DD 49 DF 4F 
3636c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
36370     4F E6 E8 E8 
36374     55 55 55 59 
36378     59 EE EF F0 
3637c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
36380     F5 F6 F7 F8 
36384     F9 FA FB FC 
36388     FD FE FF 00 
3638c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
36390     00 00 00 00 | 	byte	$00, $00, $00, $00
36394     00 00 30 08 | 	long	(131 {_fatfs_cc_v_close})<<20
36398     00 00 40 08 | 	long	(132 {_fatfs_cc_v_read})<<20
3639c     00 00 50 08 | 	long	(133 {_fatfs_cc_v_write})<<20
363a0     00 00 60 08 | 	long	(134 {_fatfs_cc_v_lseek})<<20
363a4     00 00 70 08 | 	long	(135 {_fatfs_cc_v_ioctl})<<20
363a8     00 00 80 09 | 	long	(152 {_fatfs_cc_v_flush})<<20
363ac     00 00 00 00 
363b0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
363b4     00 00 80 08 | 	long	(136 {_fatfs_cc_v_open})<<20
363b8     00 00 90 08 | 	long	(137 {_fatfs_cc_v_creat})<<20
363bc     00 00 A0 08 | 	long	(138 {_fatfs_cc_v_opendir})<<20
363c0     00 00 B0 08 | 	long	(139 {_fatfs_cc_v_closedir})<<20
363c4     00 00 C0 08 | 	long	(140 {_fatfs_cc_v_readdir})<<20
363c8     00 00 D0 08 | 	long	(141 {_fatfs_cc_v_stat})<<20
363cc     00 00 E0 08 | 	long	(142 {_fatfs_cc_v_mkdir})<<20
363d0     00 00 F0 08 | 	long	(143 {_fatfs_cc_v_rmdir})<<20
363d4     00 00 00 09 | 	long	(144 {_fatfs_cc_v_remove})<<20
363d8     00 00 10 09 | 	long	(145 {_fatfs_cc_v_rename})<<20
363dc     00 00 20 09 | 	long	(146 {_fatfs_cc_v_init})<<20
363e0     00 00 30 09 | 	long	(147 {_fatfs_cc_v_deinit})<<20
363e4     FF FF FF FF 
363e8     1F 00 00 00 
363ec     1C 00 00 00 
363f0     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
363f4     1E 00 00 00 
363f8     1F 00 00 00 
363fc     1E 00 00 00 
36400     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
36404     1F 00 00 00 
36408     1E 00 00 00 
3640c     1F 00 00 00 
36410     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
36414     1F 00 00 00 
36418     00 00 00 00 
3641c     1F 00 00 00 
36420     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
36424     5A 00 00 00 
36428     78 00 00 00 
3642c     97 00 00 00 
36430     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
36434     D4 00 00 00 
36438     F3 00 00 00 
3643c     11 01 00 00 
36440     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
36444     4E 01 00 00 
36448     6D 01 00 00 
3644c     FF FF FF FF 
36450     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
36454     00 00 00 00 
      ...             
3646c     00 00 00 00 
36470     00 00 00 00 | 	byte	$00[32]
36474     92 64 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
36478     96 64 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3647c     00 00 00 00 
36480     00 00 00 00 
36484     00 00 00 00 
36488     00 00 00 00 
3648c     00 00       | 	byte	$00[18]
3648e     3F 3F 3F 00 
36492     55 43 54 00 
36496     55 43 54 00 
3649a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3649e     00 00 00 00 
364a2     00 00 00    | 	byte	$00[7]
364a5     CA 9A 3B 00 
364a9     00 00 00 01 
364ad     01 01 01 01 
364b1     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
364b5     91 11 11 11 
364b9     11 01 01 01 
364bd     01 01 01 01 
364c1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
364c5     01 01 01 01 
364c9     01 01 01    | 	byte	$01[7]
364cc     90 20 20 20 
364d0     20 20 20 20 
364d4     20 20 20 20 
364d8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
364dc     42 42 42 42 
364e0     42 42 42 42 
364e4     42 42       | 	byte	$42[10]
364e6     20 20 20 20 
364ea     20 20 20    | 	byte	$20[7]
364ed     44 44 44 44 
364f1     44 44       | 	byte	$44[6]
364f3     04 04 04 04 
364f7     04 04 04 04 
364fb     04 04 04 04 
364ff     04 04 04 04 
36503     04 04 04 04 | 	byte	$04[20]
36507     20 20 20 20 
3650b     20 20       | 	byte	$20[6]
3650d     48 48 48 48 
36511     48 48       | 	byte	$48[6]
36513     08 08 08 08 
36517     08 08 08 08 
3651b     08 08 08 08 
3651f     08 08 08 08 
36523     08 08 08 08 | 	byte	$08[20]
36527     20 20 20 20 
3652b     01 00 00 00 
3652f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
36530                 | __methodtable__
36530     B8 6B 01 00 | 	long	@_do_no_command
36534     18 F0 00 00 | 	long	@_do_plus
36538     04 F5 00 00 | 	long	@_do_minus
3653c     CC F9 00 00 | 	long	@_do_or
36540     E4 FA 00 00 | 	long	@_do_mul
36544     70 00 01 00 | 	long	@_do_fdiv
36548     B4 F8 00 00 | 	long	@_do_and
3654c     50 FE 00 00 | 	long	@_do_div
36550     38 02 01 00 | 	long	@_do_mod
36554     58 04 01 00 | 	long	@_do_shl
36558     70 05 01 00 | 	long	@_do_shr
3655c     88 06 01 00 | 	long	@_do_power
36560     70 E6 00 00 | 	long	@_do_getvar
36564     00 A2 00 00 | 	long	@_do_push
36568     70 E0 00 00 | 	long	@_do_assign
3656c     04 3E 01 00 | 	long	@_do_cls
36570     7C DA 00 00 | 	long	@_do_new
36574     A8 3E 01 00 | 	long	@_do_plot
36578     78 3F 01 00 | 	long	@_do_draw
3657c     EC 48 01 00 | 	long	@_do_print
36580     E4 41 01 00 | 	long	@_do_circle
36584     6C 40 01 00 | 	long	@_do_fcircle
36588     5C 43 01 00 | 	long	@_do_box
3658c     04 47 01 00 | 	long	@_do_frame
36590     70 3E 01 00 | 	long	@_do_color
36594     2C 82 00 00 | 	long	@_do_for
36598     58 84 00 00 | 	long	@_do_next
3659c     E0 D7 00 00 | 	long	@_do_list
365a0     50 B2 00 00 | 	long	@_do_run
365a4     2C DF 00 00 | 	long	@_do_error
365a8     28 DC 00 00 | 	long	@_do_fast_goto
365ac     18 DD 00 00 | 	long	@_do_find_goto
365b0     28 DF 00 00 | 	long	@_do_slow_goto
365b4     50 25 01 00 | 	long	@_do_converttoint
365b8     44 A8 00 00 | 	long	@_test_csave
365bc     98 AB 00 00 | 	long	@_do_save
365c0     84 AE 00 00 | 	long	@_do_load
365c4     50 57 01 00 | 	long	@_do_pinwrite
365c8     EC 61 01 00 | 	long	@_do_waitms
365cc     28 63 01 00 | 	long	@_do_waitvbl
365d0     28 66 01 00 | 	long	@_do_if
365d4     0C 67 01 00 | 	long	@_do_else
365d8     D4 67 01 00 | 	long	@_do_nothing
365dc     50 08 01 00 | 	long	@_do_eq
365e0     C8 16 01 00 | 	long	@_do_ge
365e4     A0 1B 01 00 | 	long	@_do_le
365e8     28 0D 01 00 | 	long	@_do_gt
365ec     00 12 01 00 | 	long	@_do_lt
365f0     78 20 01 00 | 	long	@_do_ne
365f4     2C 28 01 00 | 	long	@_do_rnd
365f8     D8 67 01 00 | 	long	@_do_brun
365fc     A4 6A 01 00 | 	long	@_do_beep
36600     58 63 01 00 | 	long	@_do_dir
36604     B4 4D 01 00 | 	long	@_do_paper
36608     3C 4E 01 00 | 	long	@_do_ink
3660c     D8 4E 01 00 | 	long	@_do_font
36610     54 4F 01 00 | 	long	@_do_mode
36614     10 6A 01 00 | 	long	@_do_mouse
36618     9C 3D 01 00 | 	long	@_do_gettime
3661c     44 6A 01 00 | 	long	@_do_cursor
36620     78 6A 01 00 | 	long	@_do_click
36624     28 3B 01 00 | 	long	@_do_mousex
36628     6C 3B 01 00 | 	long	@_do_mousey
3662c     F4 3B 01 00 | 	long	@_do_mousek
36630     B0 3B 01 00 | 	long	@_do_mousew
36634     00 2B 01 00 | 	long	@_do_sin
36638     54 32 01 00 | 	long	@_do_stick
3663c     D8 33 01 00 | 	long	@_do_strig
36640     3C 3A 01 00 | 	long	@_do_sprite
36644     AC 36 01 00 | 	long	@_do_defsprite
36648     5C 35 01 00 | 	long	@_do_getpixel
3664c     34 63 01 00 | 	long	@_do_waitclock
36650     C4 6B 01 00 | 	long	@_do_negative
36654     38 3C 01 00 | 	long	@_do_rdpin
36658     A4 3C 01 00 | 	long	@_do_rqpin
3665c     18 3D 01 00 | 	long	@_do_pinread
36660     E8 59 01 00 | 	long	@_do_wrpin
36664     68 5A 01 00 | 	long	@_do_wxpin
36668     E8 5A 01 00 | 	long	@_do_wypin
3666c     D8 57 01 00 | 	long	@_do_pinfloat
36670     18 58 01 00 | 	long	@_do_pinlo
36674     58 58 01 00 | 	long	@_do_pinhi
36678     D8 58 01 00 | 	long	@_do_pinstart
3667c     98 58 01 00 | 	long	@_do_pintoggle
36680     68 5B 01 00 | 	long	@_do_position
36684     0C 2C 01 00 | 	long	@_do_cos
36688     2C 2D 01 00 | 	long	@_do_tan
3668c     50 30 01 00 | 	long	@_do_atn
36690     38 2E 01 00 | 	long	@_do_asin
36694     44 2F 01 00 | 	long	@_do_acos
36698     64 31 01 00 | 	long	@_do_sqr
3669c     44 45 01 00 | 	long	@_do_fill
366a0     E8 CD 00 00 | 	long	@_do_defsnd
366a4     74 B5 00 00 | 	long	@_do_defenv
366a8     30 67 01 00 | 	long	@_do_rad
366ac     58 67 01 00 | 	long	@_do_deg
366b0     80 67 01 00 | 	long	@_do_int
366b4     1C C2 00 00 | 	long	@_do_play
366b8     B0 54 01 00 | 	long	@_do_setdelay
366bc     08 54 01 00 | 	long	@_do_setenv
366c0     58 55 01 00 | 	long	@_do_setlen
366c4     A8 56 01 00 | 	long	@_do_setpan
366c8     00 56 01 00 | 	long	@_do_setvol
366cc     B8 52 01 00 | 	long	@_do_setwave
366d0     60 53 01 00 | 	long	@_do_setsustain
366d4     50 CD 00 00 | 	long	@_do_release
366d8     F4 29 01 00 | 	long	@_do_getenvsustain
366dc     F0 5B 01 00 | 	long	@_do_poke
366e0     C8 5C 01 00 | 	long	@_do_dpoke
366e4     A0 5D 01 00 | 	long	@_do_lpoke
366e8     78 5E 01 00 | 	long	@_do_peek
366ec     28 5F 01 00 | 	long	@_do_dpeek
366f0     D4 5F 01 00 | 	long	@_do_lpeek
366f4     E4 60 01 00 | 	long	@_do_adr
366f8     80 60 01 00 | 	long	@_do_fre
366fc     E8 60 01 00 | 	long	@_do_getnotevalue
36700     28 EC 00 00 | 	long	@_do_getaddr
36704     84 AB 01 00 | 	long	@_hg010b_spin2_putchar
36708     18 B3 02 00 | 	long	@__struct___bas_wrap_sender_tx
3670c     5C B3 02 00 | 	long	@__struct___bas_wrap_sender_rx
36710     A4 B3 02 00 | 	long	@__struct___bas_wrap_sender_close
36714     48 B2 02 00 | 	long	@__struct__s_vfs_file_t_putchar
36718     B8 B2 02 00 | 	long	@__struct__s_vfs_file_t_getchar
3671c     00 B2 02 00 | 	long	@___strs_cl_pfunc
36720     5C 11 02 00 | 	long	@__system____root_opendir
36724     F8 11 02 00 | 	long	@__system____root_closedir
36728     74 11 02 00 | 	long	@__system____root_readdir
3672c     00 12 02 00 | 	long	@__system____root_stat
36730     88 0A 02 00 | 	long	@__system____default_putc
36734     0C 0A 02 00 | 	long	@__system____default_getc
36738     30 0B 02 00 | 	long	@__system____default_flush
3673c     04 9D 02 00 | 	long	@_fatfs_cc_v_close
36740     20 A1 02 00 | 	long	@_fatfs_cc_v_read
36744     34 A2 02 00 | 	long	@_fatfs_cc_v_write
36748     14 A3 02 00 | 	long	@_fatfs_cc_v_lseek
3674c     9C A3 02 00 | 	long	@_fatfs_cc_v_ioctl
36750     F0 A3 02 00 | 	long	@_fatfs_cc_v_open
36754     68 9C 02 00 | 	long	@_fatfs_cc_v_creat
36758     48 9D 02 00 | 	long	@_fatfs_cc_v_opendir
3675c     BC 9D 02 00 | 	long	@_fatfs_cc_v_closedir
36760     FC 9D 02 00 | 	long	@_fatfs_cc_v_readdir
36764     30 9F 02 00 | 	long	@_fatfs_cc_v_stat
36768     B0 A3 02 00 | 	long	@_fatfs_cc_v_mkdir
3676c     D0 A3 02 00 | 	long	@_fatfs_cc_v_rmdir
36770     C0 A3 02 00 | 	long	@_fatfs_cc_v_remove
36774     E0 A3 02 00 | 	long	@_fatfs_cc_v_rename
36778     00 A5 02 00 | 	long	@_fatfs_cc_v_init
3677c     08 A5 02 00 | 	long	@_fatfs_cc_v_deinit
36780     38 BF 01 00 | 	long	@__system___tx
36784     78 BF 01 00 | 	long	@__system___rx
36788     6C 1D 02 00 | 	long	@__system___rxtxioctl_0628
3678c     C4 1D 02 00 | 	long	@__system____dummy_flush_0629
36790     D0 A4 02 00 | 	long	@_fatfs_cc_v_flush
36794                 | __heap_base
36794     00 00 00 00 
      ...             
65594     00 00 00 00 
65598     00 00 00 00 | 	long	0[48002]
6559c                 | objmem
6559c     00 00 00 00 
      ...             
74c94     00 00 00 00 
74c98     00 00 00 00 | 	long	0[15808]
74c9c                 | stackspace
74c9c     00 00 00 00 | 	long	0[1]
74ca0 100             | 	org	COG_BSS_START
74ca0 100             | _var01
74ca0 100             | 	res	1
74ca0 101             | _var02
74ca0 101             | 	res	1
74ca0 102             | _var03
74ca0 102             | 	res	1
74ca0 103             | _var04
74ca0 103             | 	res	1
74ca0 104             | _var05
74ca0 104             | 	res	1
74ca0 105             | _var06
74ca0 105             | 	res	1
74ca0 106             | _var07
74ca0 106             | 	res	1
74ca0 107             | _var08
74ca0 107             | 	res	1
74ca0 108             | _var09
74ca0 108             | 	res	1
74ca0 109             | arg01
74ca0 109             | 	res	1
74ca0 10a             | arg02
74ca0 10a             | 	res	1
74ca0 10b             | arg03
74ca0 10b             | 	res	1
74ca0 10c             | arg04
74ca0 10c             | 	res	1
74ca0 10d             | arg05
74ca0 10d             | 	res	1
74ca0 10e             | arg06
74ca0 10e             | 	res	1
74ca0 10f             | local01
74ca0 10f             | 	res	1
74ca0 110             | local02
74ca0 110             | 	res	1
74ca0 111             | local03
74ca0 111             | 	res	1
74ca0 112             | local04
74ca0 112             | 	res	1
74ca0 113             | local05
74ca0 113             | 	res	1
74ca0 114             | local06
74ca0 114             | 	res	1
74ca0 115             | local07
74ca0 115             | 	res	1
74ca0 116             | local08
74ca0 116             | 	res	1
74ca0 117             | local09
74ca0 117             | 	res	1
74ca0 118             | local10
74ca0 118             | 	res	1
74ca0 119             | local11
74ca0 119             | 	res	1
74ca0 11a             | local12
74ca0 11a             | 	res	1
74ca0 11b             | local13
74ca0 11b             | 	res	1
74ca0 11c             | local14
74ca0 11c             | 	res	1
74ca0 11d             | local15
74ca0 11d             | 	res	1
74ca0 11e             | local16
74ca0 11e             | 	res	1
74ca0 11f             | local17
74ca0 11f             | 	res	1
74ca0 120             | local18
74ca0 120             | 	res	1
74ca0 121             | local19
74ca0 121             | 	res	1
74ca0 122             | local20
74ca0 122             | 	res	1
74ca0 123             | local21
74ca0 123             | 	res	1
74ca0 124             | local22
74ca0 124             | 	res	1
74ca0 125             | local23
74ca0 125             | 	res	1
74ca0 126             | local24
74ca0 126             | 	res	1
74ca0 127             | local25
74ca0 127             | 	res	1
74ca0 128             | local26
74ca0 128             | 	res	1
74ca0 129             | local27
74ca0 129             | 	res	1
74ca0 12a             | local28
74ca0 12a             | 	res	1
74ca0 12b             | local29
74ca0 12b             | 	res	1
74ca0 12c             | local30
74ca0 12c             | 	res	1
74ca0 12d             | local31
74ca0 12d             | 	res	1
74ca0 12e             | local32
74ca0 12e             | 	res	1
74ca0 12f             | local33
74ca0 12f             | 	res	1
74ca0 130             | local34
74ca0 130             | 	res	1
74ca0 131             | local35
74ca0 131             | 	res	1
74ca0 132             | muldiva_
74ca0 132             | 	res	1
74ca0 133             | muldivb_
74ca0 133             | 	res	1
74ca0 134             | 	fit	480
74ca0 134             | 
