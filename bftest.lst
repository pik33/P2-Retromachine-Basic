00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/bftest.p2asm"
00000                 | con
00000                 | 	_clkfreq = 338695652
00000                 | 	_clkmode = 28773115
00000                 | 	pin = 0
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 338695652
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1b70afb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 76 06 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 03 90 5D |  if_ne	jmp	#spininit
0040c 002 3A F1 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 02 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 85 DB 80 FF 
00420 007 00 F0 65 FD | 	hubset	##28773112
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 85 DB 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##28773115
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 0A 18 8A FF 
00440 00f 14 C8 6F FC | 	wrlong	##338695652, #20
00444 010 BC 02 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
006fc 0be 00 00 00 00 
00700 0bf 00 00 00 00 | 	orgf	192
00704 0c0             | skip_clock_set_
00704 0c0 44 0A A0 FD | 	call	#_program
00708 0c1             | cogexit
00708 0c1 38 01 80 FF 
0070c 0c2 1F 00 66 FD | 	waitx	##160000
00710 0c3 01 8C 62 FD | 	cogid	arg01
00714 0c4 03 8C 62 FD | 	cogstop	arg01
00718 0c5             | spininit
00718 0c5 61 67 06 FB | 	rdlong	objptr, ptra++
0071c 0c6 61 77 06 FB | 	rdlong	result1, ptra++
00720 0c7 28 06 64 FD | 	setq	#3
00724 0c8 00 8D 06 FB | 	rdlong	arg01, ptra
00728 0c9 04 F0 87 F1 | 	sub	ptra, #4
0072c 0ca 2D 76 62 FD | 	call	result1
00730 0cb D4 FF 9F FD | 	jmp	#cogexit
00734 0cc             | FCACHE_LOAD_
00734 0cc F9 AD 01 F6 |     mov	fcache_tmpb_,ptrb
00738 0cd 2B F2 63 FD |     pop	ptrb
0073c 0ce D5 EC 8B F9 |     altd	pa,ret_instr_
00740 0cf D5 00 00 F6 |     mov	 0-0, ret_instr_
00744 0d0 28 EC 63 FD |     setq	pa
00748 0d1 E1 01 04 FB |     rdlong	$0, ptrb++
0074c 0d2 2A F2 63 FD |     push	ptrb
00750 0d3 D6 F2 03 F6 |     mov ptrb,fcache_tmpb_
00754 0d4 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00758 0d5             | ret_instr_
00758 0d5 00 FE 07 02 |     _ret_ cmp inb,#0
0075c 0d6             | fcache_tmpb_
0075c 0d6 00 00 00 00 |     long 0
00760 0d7             | fcache_load_ptr_
00760 0d7 CC 00 00 00 |     long FCACHE_LOAD_
00764 0d8             | builtin_bytefill_
00764 0d8 01 90 56 F0 |         shr	arg03, #1 wc
00768 0d9 46 8F 42 CC |  if_c   wrbyte	arg02, arg01
0076c 0da 01 8C 06 C1 |  if_c   add	arg01, #1
00770 0db 00 8E FE F9 |         movbyts	arg02, #0
00774 0dc             | builtin_wordfill_
00774 0dc 01 90 56 F0 |         shr	arg03, #1 wc
00778 0dd 46 8F 52 CC |  if_c   wrword	arg02, arg01
0077c 0de 02 8C 06 C1 |  if_c   add	arg01, #2
00780 0df 47 8F 2A F9 |         setword	arg02, arg02, #1
00784 0e0             | builtin_longfill_
00784 0e0 46 01 88 FC |         wrfast	#0,arg01
00788 0e1 00 90 0E F2 |         cmp	arg03, #0 wz
0078c 0e2 48 03 D8 5C |  if_nz  rep	#1, arg03
00790 0e3 17 8E 62 5D |  if_nz  wflong	arg02
00794 0e4 2D 00 64 FD |         ret
00798 0e5             | COUNT_
00798 0e5 00 00 00 00 |     long 0
0079c 0e6             | RETADDR_
0079c 0e6 00 00 00 00 |     long 0
007a0 0e7             | fp
007a0 0e7 00 00 00 00 |     long 0
007a4 0e8             | pushregs_
007a4 0e8 2B EC 63 FD |     pop  pa
007a8 0e9 2B CC 61 FD |     pop  RETADDR_
007ac 0ea 03 CA 95 FB |     tjz  COUNT_, #pushregs_done_
007b0 0eb FF CB 8D F9 |     altd  COUNT_, #511
007b4 0ec 28 00 64 FD |     setq #0-0
007b8 0ed 61 97 66 FC |     wrlong local01, ptra++
007bc 0ee             | pushregs_done_
007bc 0ee 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
007c0 0ef 61 CB 65 FC |     wrlong COUNT_, ptra++
007c4 0f0 F8 CF 01 F6 |     mov    fp, ptra
007c8 0f1 2C EC 63 FD |     jmp  pa
007cc 0f2             |  popregs_
007cc 0f2 2B EC 63 FD |     pop    pa
007d0 0f3 28 04 64 FD |     setq   #2
007d4 0f4 5F CB 05 FB |     rdlong COUNT_, --ptra
007d8 0f5 02 CA 75 FB |     djf    COUNT_, #popregs__ret
007dc 0f6 28 CA 61 FD |     setq   COUNT_
007e0 0f7 5F 97 06 FB |     rdlong local01, --ptra
007e4 0f8             | popregs__ret
007e4 0f8 2A CC 61 FD |     push   RETADDR_
007e8 0f9 2C EC 63 FD |     jmp    pa
007ec 0fa             | 
007ec 0fa             | divide_
007ec 0fa 59 B3 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
007f0 0fb 6C 64 62 FD |        wrc     itmp2_                         'store sign of y
007f4 0fc 58 B1 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
007f8 0fd 59 B1 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
007fc 0fe 01 64 66 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00800 0ff 18 B2 62 FD |        getqx   muldivb_                       'get quotient
00804 100 19 B0 62 FD |        getqy   muldiva_                       'get remainder
00808 101 58 B1 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0080c 102 00 64 16 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00810 103 59 B3 82 06 |  _ret_ negc    muldivb_,muldivb_     
00814 104             | __pc long 0
00814 104 00 00 00 00 
00818 105             | __setjmp
00818 105 2B 08 62 FD |     pop __pc
0081c 106 00 76 06 F6 |     mov result1, #0
00820 107 00 78 06 F6 |     mov result2, #0
00824 108 46 61 02 F6 |     mov abortchain, arg01
00828 109 46 CF 61 FC |     wrlong fp, arg01
0082c 10a 04 8C 06 F1 |     add arg01, #4
00830 10b 46 F1 63 FC |     wrlong ptra, arg01
00834 10c 04 8C 06 F1 |     add arg01, #4
00838 10d 46 67 62 FC |     wrlong objptr, arg01
0083c 10e 04 8C 06 F1 |     add arg01, #4
00840 10f 46 09 62 FC |     wrlong __pc, arg01
00844 110 2C 08 62 FD |     jmp __pc
00848 111             | __unwind_pc long 0
00848 111 00 00 00 00 
0084c 112             | __unwind_stack
0084c 112 2B 22 62 FD |    pop  __unwind_pc
00850 113             | __unwind_loop
00850 113 47 8D 0A F2 |    cmp  arg01, arg02 wz
00854 114 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00858 115 46 F1 03 F6 |    mov   ptra, arg01
0085c 116 6C FF BF FD |    call  #popregs_
00860 117 E7 8C 02 F6 |    mov   arg01, fp
00864 118 E8 FF 9F FD |    jmp   #__unwind_loop
00868 119             | __unwind_stack_ret
00868 119 2C 22 62 FD |    jmp  __unwind_pc
0086c 11a             | __longjmp
0086c 11a 2B 08 62 FD |     pop __pc
00870 11b 00 8C 0E F2 |     cmp    arg01, #0 wz
00874 11c 30 00 90 AD |  if_z jmp #nocatch
00878 11d 47 77 02 F6 |     mov result1, arg02
0087c 11e 01 78 06 F6 |     mov result2, #1
00880 11f 46 8F 02 FB |     rdlong arg02, arg01
00884 120 04 8C 06 F1 |     add arg01, #4
00888 121 46 F1 03 FB |     rdlong ptra, arg01
0088c 122 04 8C 06 F1 |     add arg01, #4
00890 123 46 67 02 FB |     rdlong objptr, arg01
00894 124 04 8C 06 F1 |     add arg01, #4
00898 125 46 09 02 FB |     rdlong __pc, arg01
0089c 126 E7 8C 02 F6 |     mov arg01, fp
008a0 127 A8 FF BF FD |     call #__unwind_stack
008a4 128             | __longjmp_ret
008a4 128 2C 08 62 FD |     jmp  __pc
008a8 129             | nocatch
008a8 129 00 90 0E F2 |     cmp arg03, #0 wz
008ac 12a 58 FE 9F AD |  if_z jmp #cogexit
008b0 12b F0 FF 9F FD |     jmp #__longjmp_ret
008b4 12c             | 
008b4 12c             | __heap_ptr
008b4 12c 7C 04 01 00 | 	long	@__heap_base
008b8 12d             | __methods__
008b8 12d 44 04 01 00 | 	long	@__methodtable__
008bc 12e             | __recvreg
008bc 12e 00 00 00 00 | 	long	0
008c0 12f             | __sendreg
008c0 12f 00 00 00 00 | 	long	0
008c4 130             | abortchain
008c4 130 00 00 00 00 | 	long	0
008c8 131             | itmp1_
008c8 131 00 00 00 00 | 	long	0
008cc 132             | itmp2_
008cc 132 00 00 00 00 | 	long	0
008d0 133             | objptr
008d0 133 F4 1B 01 00 | 	long	@objmem
008d4 134             | ptr___system__dat__
008d4 134 14 02 01 00 | 	long	@__system__dat_
008d8 135             | ptr__dat__
008d8 135 4C 86 00 00 | 	long	@_dat_
008dc 136             | ptr__hg010b_spin2_dat__
008dc 136 4C 88 00 00 | 	long	@_hg010b_spin2_dat_
008e0 137             | ptr__psram16drv_spin2_dat__
008e0 137 FC C7 00 00 | 	long	@_psram16drv_spin2_dat_
008e4 138             | ptr__psram_spin2_dat__
008e4 138 B4 C5 00 00 | 	long	@_psram_spin2_dat_
008e8 139             | ptr__usbnew_spin2_dat__
008e8 139 8C D7 00 00 | 	long	@_usbnew_spin2_dat_
008ec 13a             | ptr_stackspace_
008ec 13a 50 D8 02 00 | 	long	@stackspace
008f0 13b             | result1
008f0 13b 00 00 00 00 | 	long	0
008f4 13c             | result2
008f4 13c 01 00 00 00 | 	long	1
008f8 13d             | result3
008f8 13d 02 00 00 00 | 	long	2
008fc 13e             | COG_BSS_START
008fc 13e             | 	fit	480
008fc                 | 	orgh
008fc                 | hubentry
008fc                 | 
008fc                 | ' 
008fc                 | ' function getchar() as ubyte
008fc                 | _getchar
008fc                 | ' 
008fc                 | ' do
008fc                 | LR__0001
008fc     EC 16 B0 FD | 	call	#_usbnew_spin2_get_key
00900     3B 8D 02 F6 | 	mov	arg01, result1
00904     84 00 B0 FD | 	call	#_scantochar
00908     DE 00 00 FF 
0090c     58 66 06 F1 | 	add	objptr, ##113752
00910     33 77 62 FC | 	wrlong	result1, objptr
00914     DE 00 00 FF 
00918     58 66 86 F1 | 	sub	objptr, ##113752
0091c     01 76 56 F2 | 	cmps	result1, #1 wc
00920     D8 FF 9F CD |  if_b	jmp	#LR__0001
00924                 | ' print q : return q
00924     00 8C 06 F6 | 	mov	arg01, #0
00928     74 79 B0 FD | 	call	#__system___getiolock_0103
0092c     3B 8D 02 F6 | 	mov	arg01, result1
00930     F0 65 B0 FD | 	call	#__system___lockmem
00934     DE 00 00 FF 
00938     58 66 06 F1 | 	add	objptr, ##113752
0093c     33 8F 02 FB | 	rdlong	arg02, objptr
00940     DE 00 00 FF 
00944     58 66 86 F1 | 	sub	objptr, ##113752
00948     00 8C 06 F6 | 	mov	arg01, #0
0094c     00 90 06 F6 | 	mov	arg03, #0
00950     0A 92 06 F6 | 	mov	arg04, #10
00954     5C 69 B0 FD | 	call	#__system___basic_print_integer
00958     00 8C 06 F6 | 	mov	arg01, #0
0095c     0A 8E 06 F6 | 	mov	arg02, #10
00960     00 90 06 F6 | 	mov	arg03, #0
00964     F4 68 B0 FD | 	call	#__system___basic_print_char
00968     00 8C 06 F6 | 	mov	arg01, #0
0096c     30 79 B0 FD | 	call	#__system___getiolock_0103
00970     3B 01 68 FC | 	wrlong	#0, result1
00974     DE 00 00 FF 
00978     58 66 06 F1 | 	add	objptr, ##113752
0097c     33 77 02 FB | 	rdlong	result1, objptr
00980     DE 00 00 FF 
00984     58 66 86 F1 | 	sub	objptr, ##113752
00988                 | _getchar_ret
00988     2D 00 64 FD | 	ret
0098c                 | 
0098c                 | ' 
0098c                 | ' function scantochar(key)
0098c                 | _scantochar
0098c                 | ' 
0098c                 | ' if (key and $8000_0000)=0 then
0098c     1F 8C 2E F4 | 	testbn	arg01, #31 wz
00990     A8 00 90 5D |  if_ne	jmp	#LR__0015
00994                 | '   select case (key shr 8) and 255
00994     46 7D 02 F6 | 	mov	_var01, arg01
00998     08 7C C6 F0 | 	sar	_var01, #8
0099c     FF 7C 0E F5 | 	and	_var01, #255 wz
009a0     24 00 90 AD |  if_e	jmp	#LR__0010
009a4     02 7C 0E F2 | 	cmp	_var01, #2 wz
009a8     20 7C 0E 52 |  if_ne	cmp	_var01, #32 wz
009ac     30 00 90 AD |  if_e	jmp	#LR__0011
009b0     40 7C 0E F2 | 	cmp	_var01, #64 wz
009b4     44 00 90 AD |  if_e	jmp	#LR__0012
009b8     42 7C 0E F2 | 	cmp	_var01, #66 wz
009bc     60 7C 0E 52 |  if_ne	cmp	_var01, #96 wz
009c0     70 00 90 5D |  if_ne	jmp	#LR__0014
009c4     50 00 90 FD | 	jmp	#LR__0013
009c8                 | LR__0010
009c8     46 77 02 F6 | 	mov	result1, arg01
009cc     7F 76 06 F5 | 	and	result1, #127
009d0     02 76 66 F0 | 	shl	result1, #2
009d4     35 77 02 F1 | 	add	result1, ptr__dat__
009d8     3B 77 C2 FA | 	rdbyte	result1, result1
009dc     60 00 90 FD | 	jmp	#_scantochar_ret
009e0                 | LR__0011
009e0     46 77 02 F6 | 	mov	result1, arg01
009e4     7F 76 06 F5 | 	and	result1, #127
009e8     02 76 66 F0 | 	shl	result1, #2
009ec     01 76 06 F1 | 	add	result1, #1
009f0     35 77 02 F1 | 	add	result1, ptr__dat__
009f4     3B 77 C2 FA | 	rdbyte	result1, result1
009f8     44 00 90 FD | 	jmp	#_scantochar_ret
009fc                 | LR__0012
009fc     46 77 02 F6 | 	mov	result1, arg01
00a00     7F 76 06 F5 | 	and	result1, #127
00a04     02 76 66 F0 | 	shl	result1, #2
00a08     02 76 06 F1 | 	add	result1, #2
00a0c     35 77 02 F1 | 	add	result1, ptr__dat__
00a10     3B 77 C2 FA | 	rdbyte	result1, result1
00a14     28 00 90 FD | 	jmp	#_scantochar_ret
00a18                 | LR__0013
00a18     46 77 02 F6 | 	mov	result1, arg01
00a1c     7F 76 06 F5 | 	and	result1, #127
00a20     02 76 66 F0 | 	shl	result1, #2
00a24     03 76 06 F1 | 	add	result1, #3
00a28     35 77 02 F1 | 	add	result1, ptr__dat__
00a2c     3B 77 C2 FA | 	rdbyte	result1, result1
00a30     0C 00 90 FD | 	jmp	#_scantochar_ret
00a34                 | LR__0014
00a34     00 76 06 F6 | 	mov	result1, #0
00a38     04 00 90 FD | 	jmp	#_scantochar_ret
00a3c                 | LR__0015
00a3c     00 76 06 F6 | 	mov	result1, #0
00a40                 | _scantochar_ret
00a40     2D 00 64 FD | 	ret
00a44                 | 
00a44                 | _program
00a44     01 CA 05 F6 | 	mov	COUNT_, #1
00a48     E8 00 A0 FD | 	call	#pushregs_
00a4c     00 8C 06 F6 | 	mov	arg01, #0
00a50     0A 8E C6 F9 | 	decod	arg02, #10
00a54     0B 90 06 F6 | 	mov	arg03, #11
00a58     07 92 06 F6 | 	mov	arg04, #7
00a5c     0B 00 00 FF 
00a60     CC 66 06 F1 | 	add	objptr, ##5836
00a64     C4 0F B0 FD | 	call	#_psram_spin2_startx
00a68     C0 00 00 FF 
00a6c     00 66 06 F1 | 	add	objptr, ##98304
00a70     33 77 42 FC | 	wrbyte	result1, objptr
00a74                 | '     return $7FF00 + cog*12
00a74     04 66 06 F1 | 	add	objptr, #4
00a78     FF 03 80 FF 
00a7c     33 01 6A FC | 	wrlong	##524032, objptr
00a80     CB 00 00 FF 
00a84     D0 66 86 F1 | 	sub	objptr, ##104144
00a88     04 15 B0 FD | 	call	#_usbnew_spin2_start
00a8c     CB 00 00 FF 
00a90     CE 66 06 F1 | 	add	objptr, ##104142
00a94     33 77 42 FC | 	wrbyte	result1, objptr
00a98     02 66 06 F1 | 	add	objptr, #2
00a9c     33 8F 02 FB | 	rdlong	arg02, objptr
00aa0     CB 00 00 FF 
00aa4     D0 66 86 F1 | 	sub	objptr, ##104144
00aa8     00 8C 06 F6 | 	mov	arg01, #0
00aac     C8 00 B0 FD | 	call	#_hg010b_spin2_start
00ab0     CB 00 00 FF 
00ab4     CD 66 06 F1 | 	add	objptr, ##104141
00ab8     33 77 42 FC | 	wrbyte	result1, objptr
00abc     CB 00 00 FF 
00ac0     CD 66 86 F1 | 	sub	objptr, ##104141
00ac4     04 8C 06 F6 | 	mov	arg01, #4
00ac8     7C 09 B0 FD | 	call	#_hg010b_spin2_setfontfamily
00acc                 | ' 
00acc                 | ' pscog=psram.startx(0, 1024, 11, 7)
00acc                 | ' mbox=psram.getMailbox(0)
00acc                 | ' usbcog=kbm.start()
00acc                 | ' videocog=v.start(pin,mbox)
00acc                 | ' v.setfontfamily(4)
00acc                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
00acc     00 96 06 F6 | 	mov	local01, #0
00ad0     0B 00 00 FF 
00ad4     CC 66 06 F1 | 	add	objptr, ##5836
00ad8                 | LR__0020
00ad8     4B 8D 02 F6 | 	mov	arg01, local01
00adc     00 28 00 FF 
00ae0     00 8E 06 F6 | 	mov	arg02, ##5242880
00ae4     A4 13 B0 FD | 	call	#_psram_spin2_setQos
00ae8     01 96 06 F1 | 	add	local01, #1
00aec     08 96 56 F2 | 	cmps	local01, #8 wc
00af0     E4 FF 9F CD |  if_b	jmp	#LR__0020
00af4     C0 00 00 FF 
00af8     01 66 06 F1 | 	add	objptr, ##98305
00afc     33 8D C2 FA | 	rdbyte	arg01, objptr
00b00     7A 00 02 FF 
00b04     00 8E 06 F6 | 	mov	arg02, ##67171328
00b08     C0 00 00 FF 
00b0c     01 66 86 F1 | 	sub	objptr, ##98305
00b10     78 13 B0 FD | 	call	#_psram_spin2_setQos
00b14     0B 00 00 FF 
00b18     CC 66 86 F1 | 	sub	objptr, ##5836
00b1c                 | ' psram.setQoS(videocog, $0400f400) 
00b1c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
00b1c     33 8F 02 F6 | 	mov	arg02, objptr
00b20     15 8E 26 F4 | 	bith	arg02, #21
00b24     00 90 06 F6 | 	mov	arg03, #0
00b28     00 92 06 F6 | 	mov	arg04, #0
00b2c     00 8C 06 F6 | 	mov	arg01, #0
00b30     D0 65 B0 FD | 	call	#__system___basic_open
00b34     33 5F 02 F6 | 	mov	__sendreg, objptr
00b38     15 5E 26 F4 | 	bith	__sendreg, #21
00b3c     33 5D 02 F6 | 	mov	__recvreg, objptr
00b40     34 5C 26 F4 | 	bith	__recvreg, #52
00b44     64 8C 06 F6 | 	mov	arg01, #100
00b48     E0 64 B0 FD | 	call	#__system___waitms
00b4c     9A 8C 06 F6 | 	mov	arg01, #154
00b50     93 8E 06 F6 | 	mov	arg02, #147
00b54     9C 09 B0 FD | 	call	#_hg010b_spin2_cls
00b58     8B 00 00 FF 
00b5c     CC 66 06 F1 | 	add	objptr, ##71372
00b60     F0 14 B0 FD | 	call	#_life_b_program
00b64     8B 00 00 FF 
00b68     CC 66 86 F1 | 	sub	objptr, ##71372
00b6c     E7 F0 03 F6 | 	mov	ptra, fp
00b70     F2 00 A0 FD | 	call	#popregs_
00b74                 | _program_ret
00b74     2D 00 64 FD | 	ret
00b78                 | 
00b78                 | ' '' this is not a main program.
00b78                 | ' 
00b78                 | ' '****************************************************************************************************************
00b78                 | ' '                                                                                                             	*
00b78                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
00b78                 | ' '                                                                                                            	*
00b78                 | ' ' base - HDMI base pin												*
00b78                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
00b78                 | ' '														*
00b78                 | ' '														*
00b78                 | ' '****************************************************************************************************************
00b78                 | ' 
00b78                 | ' pub start(base,mb):result |i
00b78                 | _hg010b_spin2_start
00b78                 | ' 
00b78                 | ' '--------------------------- initialize pointers and variables
00b78                 | ' 
00b78                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
00b78     34 66 06 F1 | 	add	objptr, #52
00b7c     33 77 02 F6 | 	mov	result1, objptr
00b80     28 66 86 F1 | 	sub	objptr, #40
00b84     33 77 62 FC | 	wrlong	result1, objptr
00b88                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
00b88                 | ' hdmibase:=base							' HDMI base pin, 8*n
00b88     18 66 06 F1 | 	add	objptr, #24
00b8c     33 8D 62 FC | 	wrlong	arg01, objptr
00b90                 | ' mailbox_ptr:=mb		
00b90     04 66 06 F1 | 	add	objptr, #4
00b94     33 8F 62 FC | 	wrlong	arg02, objptr
00b98                 | ' mailbox0:=mb				' PSRAM mailbox pointer
00b98     C1 67 06 F1 | 	add	objptr, #449
00b9c     33 8F 62 FC | 	wrlong	arg02, objptr
00ba0                 | ' sprite_ptr:=@spr1ptr
00ba0     D8 66 86 F1 | 	sub	objptr, #216
00ba4     33 77 02 F6 | 	mov	result1, objptr
00ba8     E5 66 86 F1 | 	sub	objptr, #229
00bac     33 77 62 FC | 	wrlong	result1, objptr
00bb0                 | ' 
00bb0                 | ' 		'
00bb0                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
00bb0     E5 66 06 F1 | 	add	objptr, #229
00bb4     33 77 02 FB | 	rdlong	result1, objptr
00bb8     D0 76 06 F1 | 	add	result1, #208
00bbc     3B 11 58 FC | 	wrword	#8, result1
00bc0                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
00bc0     33 91 02 FB | 	rdlong	arg03, objptr
00bc4     D2 90 06 F1 | 	add	arg03, #210
00bc8     48 21 58 FC | 	wrword	#16, arg03
00bcc                 | ' leading_spaces:=0				'
00bcc     A5 67 06 F1 | 	add	objptr, #421
00bd0     33 01 68 FC | 	wrlong	#0, objptr
00bd4                 | ' 
00bd4                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
00bd4     99 66 86 F1 | 	sub	objptr, #153
00bd8     00 00 A0 FF 
00bdc     33 0F 68 FC | 	wrlong	##1073741831, objptr
00be0                 | ' emptydl[1]:=0
00be0     04 66 06 F1 | 	add	objptr, #4
00be4     33 01 68 FC | 	wrlong	#0, objptr
00be8                 | ' 
00be8                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
00be8                 | ' 
00be8                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
00be8     28 67 86 F1 | 	sub	objptr, #296
00bec     33 03 68 FC | 	wrlong	#1, objptr
00bf0                 | ' if s_debug<>0
00bf0                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
00bf0     20 00 80 FF 
00bf4     33 01 68 FC | 	wrlong	##16384, objptr
00bf8     F9 66 86 F1 | 	sub	objptr, #249
00bfc                 | ' setmode()							' set the mode, see below
00bfc     30 02 B0 FD | 	call	#_hg010b_spin2_setmode
00c00                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
00c00     49 66 06 F1 | 	add	objptr, #73
00c04     33 77 02 F6 | 	mov	result1, objptr
00c08     35 66 86 F1 | 	sub	objptr, #53
00c0c     33 77 62 FC | 	wrlong	result1, objptr
00c10                 | ' cursor_ptr:=@cursor_x						
00c10     28 66 06 F1 | 	add	objptr, #40
00c14     33 91 02 F6 | 	mov	arg03, objptr
00c18     2C 66 86 F1 | 	sub	objptr, #44
00c1c     33 91 62 FC | 	wrlong	arg03, objptr
00c20                 | ' fontnum:=0  							' start with a PC type font 
00c20     55 66 06 F1 | 	add	objptr, #85
00c24     33 01 68 FC | 	wrlong	#0, objptr
00c28                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
00c28     1C 66 06 F1 | 	add	objptr, #28
00c2c     33 8D 02 F6 | 	mov	arg01, objptr
00c30     81 66 86 F1 | 	sub	objptr, #129
00c34     36 8F 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
00c38     1C 00 00 FF 
00c3c     80 8E 06 F1 | 	add	arg02, ##14464
00c40     10 90 06 F6 | 	mov	arg03, #16
00c44     20 62 B0 FD | 	call	#__system____builtin_memmove
00c48                 | ' leading_spaces:=0
00c48     01 00 00 FF 
00c4c     B6 66 06 F1 | 	add	objptr, ##694
00c50     33 01 68 FC | 	wrlong	#0, objptr
00c54     01 00 00 FF 
00c58     B6 66 86 F1 | 	sub	objptr, ##694
00c5c                 | ' '---------------------------- initialize a cursor (MSDOS type)
00c5c                 | ' 
00c5c                 | ' initcursor(154)
00c5c     9A 8C 06 F6 | 	mov	arg01, #154
00c60     48 00 B0 FD | 	call	#_hg010b_spin2_initcursor
00c64                 | ' 
00c64                 | ' '---------------------------- start the cog
00c64                 | ' 
00c64                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
00c64     36 8F 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
00c68     1C 00 00 FF 
00c6c     90 8E 06 F1 | 	add	arg02, ##14480
00c70     33 91 02 F6 | 	mov	arg03, objptr
00c74     14 90 06 F1 | 	add	arg03, #20
00c78     10 76 06 F6 | 	mov	result1, #16
00c7c     28 90 62 FD | 	setq	arg03
00c80     47 77 F2 FC | 	coginit	result1, arg02 wc
00c84     01 76 66 C6 |  if_b	neg	result1, #1
00c88     30 66 06 F1 | 	add	objptr, #48
00c8c     33 77 62 FC | 	wrlong	result1, objptr
00c90     30 66 86 F1 | 	sub	objptr, #48
00c94                 | ' waitms(40)							' wait for stabilize
00c94     28 8C 06 F6 | 	mov	arg01, #40
00c98     90 63 B0 FD | 	call	#__system___waitms
00c9c                 | ' return cog							' return the driver's cog #
00c9c     30 66 06 F1 | 	add	objptr, #48
00ca0     33 77 02 FB | 	rdlong	result1, objptr
00ca4     30 66 86 F1 | 	sub	objptr, #48
00ca8                 | _hg010b_spin2_start_ret
00ca8     2D 00 64 FD | 	ret
00cac                 | 
00cac                 | ' 
00cac                 | ' '---------------------------- initialize a cursor (MSDOS type)
00cac                 | ' pub initcursor(color) |i
00cac                 | _hg010b_spin2_initcursor
00cac     03 CA 05 F6 | 	mov	COUNT_, #3
00cb0     E8 00 A0 FD | 	call	#pushregs_
00cb4     46 97 02 F6 | 	mov	local01, arg01
00cb8                 | ' 
00cb8                 | ' cursor_x:=0							' place the cursor at 0:0
00cb8     3C 66 06 F1 | 	add	objptr, #60
00cbc     33 01 58 FC | 	wrword	#0, objptr
00cc0                 | ' cursor_y:=0
00cc0     02 66 06 F1 | 	add	objptr, #2
00cc4     33 01 48 FC | 	wrbyte	#0, objptr
00cc8                 | ' repeat i from 0 to 111
00cc8     00 98 06 F6 | 	mov	local02, #0
00ccc     F8 67 06 F1 | 	add	objptr, #504
00cd0     D7 0C 48 FB | 	callpa	#(@LR__0031-@LR__0030)>>2,fcache_load_ptr_
00cd4                 | LR__0030
00cd4                 | '   cursor[i]:=0
00cd4     4C 9B 02 F6 | 	mov	local03, local02
00cd8     33 9B 02 F1 | 	add	local03, objptr
00cdc     4D 01 48 FC | 	wrbyte	#0, local03
00ce0     01 98 06 F1 | 	add	local02, #1
00ce4     70 98 56 F2 | 	cmps	local02, #112 wc
00ce8     E8 FF 9F CD |  if_b	jmp	#LR__0030
00cec                 | LR__0031
00cec                 | ' repeat i from 112 to 127
00cec     70 98 06 F6 | 	mov	local02, #112
00cf0     D7 0C 48 FB | 	callpa	#(@LR__0033-@LR__0032)>>2,fcache_load_ptr_
00cf4                 | LR__0032
00cf4                 | '   cursor[i]:=color  
00cf4     4C 9B 02 F6 | 	mov	local03, local02
00cf8     33 9B 02 F1 | 	add	local03, objptr
00cfc     4D 97 42 FC | 	wrbyte	local01, local03
00d00     01 98 06 F1 | 	add	local02, #1
00d04     80 98 16 F2 | 	cmp	local02, #128 wc
00d08     E8 FF 9F CD |  if_b	jmp	#LR__0032
00d0c                 | LR__0033
00d0c     01 00 00 FF 
00d10     36 66 86 F1 | 	sub	objptr, ##566
00d14                 | ' 'repeat i from 0 to 127
00d14                 | ' '  if ((i/8)//2)
00d14                 | ' '    cursor[i]:=15
00d14                 | ' '  else
00d14                 | ' '    cursor[i]:=0
00d14                 | ' '  if i>=120    
00d14                 | ' '    cursor[i]:=40
00d14                 | ' setspriteptr(17,@cursor)
00d14     33 8F 02 F6 | 	mov	arg02, objptr
00d18     01 00 00 FF 
00d1c     36 8E 06 F1 | 	add	arg02, ##566
00d20     11 8C 06 F6 | 	mov	arg01, #17
00d24     10 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
00d28                 | ' setspritesize(17,8,16)
00d28     11 8C 06 F6 | 	mov	arg01, #17
00d2c     08 8E 06 F6 | 	mov	arg02, #8
00d30     10 90 06 F6 | 	mov	arg03, #16
00d34     8C 04 B0 FD | 	call	#_hg010b_spin2_setspritesize
00d38                 | ' setspritepos(17,0,0)
00d38     11 8C 06 F6 | 	mov	arg01, #17
00d3c     00 8E 06 F6 | 	mov	arg02, #0
00d40     00 90 06 F6 | 	mov	arg03, #0
00d44     14 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
00d48                 | ' cursorshape:=14
00d48     0B 00 00 FF 
00d4c     C6 66 06 F1 | 	add	objptr, ##5830
00d50     33 1D 68 FC | 	wrlong	#14, objptr
00d54                 | ' cursorcolor:=color
00d54     04 66 86 F1 | 	sub	objptr, #4
00d58     33 97 62 FC | 	wrlong	local01, objptr
00d5c     0B 00 00 FF 
00d60     C2 66 86 F1 | 	sub	objptr, ##5826
00d64     E7 F0 03 F6 | 	mov	ptra, fp
00d68     F2 00 A0 FD | 	call	#popregs_
00d6c                 | _hg010b_spin2_initcursor_ret
00d6c     2D 00 64 FD | 	ret
00d70                 | 
00d70                 | ' 
00d70                 | ' pub setcursorcolor(color) | i
00d70                 | _hg010b_spin2_setcursorcolor
00d70                 | ' 
00d70                 | ' cursorcolor:=color
00d70     0B 00 00 FF 
00d74     C2 66 06 F1 | 	add	objptr, ##5826
00d78     33 8D 62 FC | 	wrlong	arg01, objptr
00d7c                 | ' repeat i from 0 to (8*cursorshape)-1
00d7c     00 8C 06 F6 | 	mov	arg01, #0
00d80     04 66 06 F1 | 	add	objptr, #4
00d84     33 7D 02 FB | 	rdlong	_var01, objptr
00d88     03 7C 66 F0 | 	shl	_var01, #3
00d8c     01 7C 86 F1 | 	sub	_var01, #1
00d90     00 7C 56 F2 | 	cmps	_var01, #0 wc
00d94     01 7E 86 F6 | 	negc	_var02, #1
00d98     3F 81 02 F6 | 	mov	_var03, _var02
00d9c     3F 7D 02 F1 | 	add	_var01, _var02
00da0     0A 00 00 FF 
00da4     90 66 86 F1 | 	sub	objptr, ##5264
00da8     D7 0C 48 FB | 	callpa	#(@LR__0041-@LR__0040)>>2,fcache_load_ptr_
00dac                 | LR__0040
00dac                 | '   cursor[i]:=0
00dac     46 7F 02 F6 | 	mov	_var02, arg01
00db0     33 7F 02 F1 | 	add	_var02, objptr
00db4     3F 01 48 FC | 	wrbyte	#0, _var02
00db8     40 8D 02 F1 | 	add	arg01, _var03
00dbc     3E 8D 0A F2 | 	cmp	arg01, _var01 wz
00dc0     E8 FF 9F 5D |  if_ne	jmp	#LR__0040
00dc4                 | LR__0041
00dc4                 | ' repeat i from 8*cursorshape to 127
00dc4     0A 00 00 FF 
00dc8     90 66 06 F1 | 	add	objptr, ##5264
00dcc     33 81 02 FB | 	rdlong	_var03, objptr
00dd0     40 8D 02 F6 | 	mov	arg01, _var03
00dd4     03 8C 66 F0 | 	shl	arg01, #3
00dd8     0B 00 00 FF 
00ddc     C6 66 86 F1 | 	sub	objptr, ##5830
00de0     03 80 66 F0 | 	shl	_var03, #3
00de4     80 80 56 F2 | 	cmps	_var03, #128 wc
00de8     01 7E A6 F6 | 	negnc	_var02, #1
00dec     7F 7C 06 F6 | 	mov	_var01, #127
00df0     3F 7D 02 F1 | 	add	_var01, _var02
00df4     D7 1A 48 FB | 	callpa	#(@LR__0043-@LR__0042)>>2,fcache_load_ptr_
00df8                 | LR__0042
00df8                 | '   cursor[i]:=cursorcolor
00df8     46 81 02 F6 | 	mov	_var03, arg01
00dfc     01 00 00 FF 
00e00     36 66 06 F1 | 	add	objptr, ##566
00e04     33 81 02 F1 | 	add	_var03, objptr
00e08     0A 00 00 FF 
00e0c     8C 66 06 F1 | 	add	objptr, ##5260
00e10     33 83 02 FB | 	rdlong	_var04, objptr
00e14     0B 00 00 FF 
00e18     C2 66 86 F1 | 	sub	objptr, ##5826
00e1c     40 83 42 FC | 	wrbyte	_var04, _var03
00e20     3F 8D 02 F1 | 	add	arg01, _var02
00e24     3E 8D 0A F2 | 	cmp	arg01, _var01 wz
00e28     CC FF 9F 5D |  if_ne	jmp	#LR__0042
00e2c                 | LR__0043
00e2c                 | _hg010b_spin2_setcursorcolor_ret
00e2c     2D 00 64 FD | 	ret
00e30                 | 
00e30                 | '   
00e30                 | '   
00e30                 | '   
00e30                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
00e30                 | _hg010b_spin2_setmode
00e30     02 CA 05 F6 | 	mov	COUNT_, #2
00e34     E8 00 A0 FD | 	call	#pushregs_
00e38                 | ' 
00e38                 | ' 
00e38                 | ' dl_ptr:=@emptydl[0]
00e38     01 00 00 FF 
00e3c     1D 66 06 F1 | 	add	objptr, ##541
00e40     33 95 02 F6 | 	mov	arg05, objptr
00e44     FD 67 86 F1 | 	sub	objptr, #509
00e48     33 95 62 FC | 	wrlong	arg05, objptr
00e4c                 | ' 
00e4c                 | ' if cog>0 
00e4c     10 66 06 F1 | 	add	objptr, #16
00e50     33 95 02 FB | 	rdlong	arg05, objptr
00e54     30 66 86 F1 | 	sub	objptr, #48
00e58     01 94 56 F2 | 	cmps	arg05, #1 wc
00e5c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
00e5c     01 8C 06 36 |  if_ae	mov	arg01, #1
00e60     20 06 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
00e64                 | ' xres:=1024
00e64     01 00 00 FF 
00e68     26 66 06 F1 | 	add	objptr, ##550
00e6c     02 00 80 FF 
00e70     33 01 68 FC | 	wrlong	##1024, objptr
00e74                 | ' yres:=600
00e74     04 66 06 F1 | 	add	objptr, #4
00e78     01 00 80 FF 
00e7c     33 B1 68 FC | 	wrlong	##600, objptr
00e80                 | ' ppl:=(timings[3])
00e80     1C 00 00 FF 
00e84     4C 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
00e88     36 95 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
00e8c     51 67 86 F1 | 	sub	objptr, #337
00e90     33 95 62 FC | 	wrlong	arg05, objptr
00e94                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
00e94     10 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, #16
00e98     36 97 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
00e9c     01 96 66 F0 | 	shl	local01, #1
00ea0     80 66 86 F1 | 	sub	objptr, #128
00ea4     33 97 62 FC | 	wrlong	local01, objptr
00ea8                 | ' cpl1:=cpl '' todo remove
00ea8     04 66 06 F1 | 	add	objptr, #4
00eac     33 97 62 FC | 	wrlong	local01, objptr
00eb0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
00eb0     04 00 00 FF 
00eb4     1C 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
00eb8     41 66 86 F1 | 	sub	objptr, #65
00ebc     33 6D 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
00ec0                 | ' repeat i from 0 to 3
00ec0     00 98 06 F6 | 	mov	local02, #0
00ec4     04 00 00 FF 
00ec8     00 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
00ecc     08 66 06 F1 | 	add	objptr, #8
00ed0     D7 20 48 FB | 	callpa	#(@LR__0051-@LR__0050)>>2,fcache_load_ptr_
00ed4                 | LR__0050
00ed4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
00ed4     4C 97 02 F6 | 	mov	local01, local02
00ed8     02 96 66 F0 | 	shl	local01, #2
00edc     36 97 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
00ee0     33 95 02 FB | 	rdlong	arg05, objptr
00ee4     11 94 66 F0 | 	shl	arg05, #17
00ee8     4B 97 02 FB | 	rdlong	local01, local01
00eec     4A 97 02 F1 | 	add	local01, arg05
00ef0     80 40 38 FF 
00ef4     00 96 06 F1 | 	add	local01, ##1887502336
00ef8     4C 95 02 F6 | 	mov	arg05, local02
00efc     02 94 66 F0 | 	shl	arg05, #2
00f00     36 95 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
00f04     4A 97 62 FC | 	wrlong	local01, arg05
00f08     01 98 06 F1 | 	add	local02, #1
00f0c     04 98 56 F2 | 	cmps	local02, #4 wc
00f10     C0 FF 9F CD |  if_b	jmp	#LR__0050
00f14                 | LR__0051
00f14     24 66 86 F1 | 	sub	objptr, #36
00f18     1C 00 00 FF 
00f1c     40 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
00f20                 | ' 'clkfreq:=timings[9]					    	' set the clock frequency for the mode
00f20                 | ' 'hubset(timings[10])
00f20                 | ' waitms(1)                                                   	' wait for stabilization
00f20     01 8C 06 F6 | 	mov	arg01, #1
00f24     04 61 B0 FD | 	call	#__system___waitms
00f28     1C 00 00 FF 
00f2c     6C 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
00f30     36 99 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
00f34     61 66 06 F1 | 	add	objptr, #97
00f38     33 99 62 FC | 	wrlong	local02, objptr
00f3c     4C 97 52 F6 | 	abs	local01, local02 wc
00f40     04 96 46 F0 | 	shr	local01, #4
00f44     4B 97 82 F6 | 	negc	local01, local01
00f48     9C 66 06 F1 | 	add	objptr, #156
00f4c     33 97 62 FC | 	wrlong	local01, objptr
00f50     A4 66 86 F1 | 	sub	objptr, #164
00f54     33 99 02 FB | 	rdlong	local02, objptr
00f58     08 66 06 F1 | 	add	objptr, #8
00f5c     33 97 02 FB | 	rdlong	local01, objptr
00f60     4B 99 02 FD | 	qmul	local02, local01
00f64                 | ' lines:=timings[11]
00f64                 | ' t_lines:=lines/16
00f64                 | ' buflen:=cpl*lines						' framebuffer length in longs
00f64     29 66 86 F1 | 	sub	objptr, #41
00f68     19 96 C6 F9 | 	decod	local01, #25
00f6c     10 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
00f70     18 98 62 FD | 	getqx	local02
00f74     33 99 62 FC | 	wrlong	local02, objptr
00f78     38 66 86 F1 | 	sub	objptr, #56
00f7c     02 98 66 F0 | 	shl	local02, #2
00f80     4C 97 82 F1 | 	sub	local01, local02
00f84     33 97 62 FC | 	wrlong	local01, objptr
00f88     FD 66 06 F1 | 	add	objptr, #253
00f8c     33 99 02 FB | 	rdlong	local02, objptr
00f90     36 95 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
00f94     4A 99 02 FD | 	qmul	local02, arg05
00f98                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
00f98                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
00f98     F9 66 86 F1 | 	sub	objptr, #249
00f9c                 | ' mode_ptr:=@timings						' set pointers to timings
00f9c     1C 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
00fa0                 | ' graphmode:=1024+512+192+48							' det global variable
00fa0                 | ' makedl(graphmode)							' make a DL for the mode
00fa0     03 00 00 FF 
00fa4     F0 8C 06 F6 | 	mov	arg01, ##1776
00fa8     18 98 62 FD | 	getqx	local02
00fac     4C 97 82 F1 | 	sub	local01, local02
00fb0     33 97 62 FC | 	wrlong	local01, objptr
00fb4     14 66 06 F1 | 	add	objptr, #20
00fb8     33 6D 62 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
00fbc     79 66 06 F1 | 	add	objptr, #121
00fc0     03 00 80 FF 
00fc4     33 E1 69 FC | 	wrlong	##1776, objptr
00fc8     91 66 86 F1 | 	sub	objptr, #145
00fcc     1C 00 00 FF 
00fd0     40 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
00fd4     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
00fd8                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
00fd8     33 97 02 FB | 	rdlong	local01, objptr
00fdc     DD 66 06 F1 | 	add	objptr, #221
00fe0     33 97 62 FC | 	wrlong	local01, objptr
00fe4                 | ' s_font_ptr:=font_ptr
00fe4     D5 66 86 F1 | 	sub	objptr, #213
00fe8     33 97 02 FB | 	rdlong	local01, objptr
00fec     D9 66 06 F1 | 	add	objptr, #217
00ff0     33 97 62 FC | 	wrlong	local01, objptr
00ff4                 | ' s_lines:=lines
00ff4     80 66 86 F1 | 	sub	objptr, #128
00ff8     33 97 02 FB | 	rdlong	local01, objptr
00ffc     84 66 06 F1 | 	add	objptr, #132
01000     33 97 62 FC | 	wrlong	local01, objptr
01004                 | ' s_buflen:=buflen
01004     AD 66 86 F1 | 	sub	objptr, #173
01008     33 97 02 FB | 	rdlong	local01, objptr
0100c     B5 66 06 F1 | 	add	objptr, #181
01010     33 97 62 FC | 	wrlong	local01, objptr
01014                 | ' s_cpl:=cpl
01014     94 66 86 F1 | 	sub	objptr, #148
01018     33 97 02 FB | 	rdlong	local01, objptr
0101c     90 66 06 F1 | 	add	objptr, #144
01020     33 97 62 FC | 	wrlong	local01, objptr
01024                 | ' s_cpl1:=cpl
01024     90 66 86 F1 | 	sub	objptr, #144
01028     33 97 02 FB | 	rdlong	local01, objptr
0102c     98 66 06 F1 | 	add	objptr, #152
01030     33 97 62 FC | 	wrlong	local01, objptr
01034                 | ' st_lines:=t_lines
01034     0C 66 06 F1 | 	add	objptr, #12
01038     33 97 02 FB | 	rdlong	local01, objptr
0103c     04 66 06 F1 | 	add	objptr, #4
01040     33 97 62 FC | 	wrlong	local01, objptr
01044                 | ' ppl:=ppl/xzoom  
01044     28 66 86 F1 | 	sub	objptr, #40
01048     33 B1 02 FB | 	rdlong	muldiva_, objptr
0104c     2C 66 06 F1 | 	add	objptr, #44
01050     33 B3 02 FB | 	rdlong	muldivb_, objptr
01054     05 67 86 F1 | 	sub	objptr, #261
01058     FA 00 A0 FD | 	call	#divide_
0105c     D9 66 06 F1 | 	add	objptr, #217
01060     33 B3 62 FC | 	wrlong	muldivb_, objptr
01064                 | ' s_ppl:=ppl
01064     1C 66 06 F1 | 	add	objptr, #28
01068     33 B3 62 FC | 	wrlong	muldivb_, objptr
0106c     F5 66 86 F1 | 	sub	objptr, #245
01070                 | ' waitms(20)							' wait 
01070     14 8C 06 F6 | 	mov	arg01, #20
01074     B4 5F B0 FD | 	call	#__system___waitms
01078                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
01078     04 66 06 F1 | 	add	objptr, #4
0107c     33 8D 02 FB | 	rdlong	arg01, objptr
01080     04 66 86 F1 | 	sub	objptr, #4
01084     33 91 02 FB | 	rdlong	arg03, objptr
01088     46 91 82 F1 | 	sub	arg03, arg01
0108c     20 8E 06 F6 | 	mov	arg02, #32
01090     00 92 06 F6 | 	mov	arg04, #0
01094     01 94 06 F6 | 	mov	arg05, #1
01098     0B 00 00 FF 
0109c     CC 66 06 F1 | 	add	objptr, ##5836
010a0     F4 0C B0 FD | 	call	#_psram_spin2_fill
010a4     0B 00 00 FF 
010a8     CC 66 86 F1 | 	sub	objptr, ##5836
010ac     E7 F0 03 F6 | 	mov	ptra, fp
010b0     F2 00 A0 FD | 	call	#popregs_
010b4                 | _hg010b_spin2_setmode_ret
010b4     2D 00 64 FD | 	ret
010b8                 | 
010b8                 | ' 
010b8                 | ' '****************************************************************************************************************
010b8                 | ' '                                                                                                             	*
010b8                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
010b8                 | ' '                                                                                                             	*
010b8                 | ' '****************************************************************************************************************
010b8                 | ' 
010b8                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
010b8                 | _hg010b_spin2_makedl
010b8                 | ' 
010b8                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
010b8                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
010b8                 | ' repeat i from 0 to 11                                                           ' clear DL
010b8     00 7C 06 F6 | 	mov	_var01, #0
010bc     ED 67 06 F1 | 	add	objptr, #493
010c0     D7 0E 48 FB | 	callpa	#(@LR__0061-@LR__0060)>>2,fcache_load_ptr_
010c4                 | LR__0060
010c4                 | '   displaylist[i]:=0 
010c4     3E 7F 02 F6 | 	mov	_var02, _var01
010c8     02 7E 66 F0 | 	shl	_var02, #2
010cc     33 7F 02 F1 | 	add	_var02, objptr
010d0     3F 01 68 FC | 	wrlong	#0, _var02
010d4     01 7C 06 F1 | 	add	_var01, #1
010d8     0C 7C 56 F2 | 	cmps	_var01, #12 wc
010dc     E4 FF 9F CD |  if_b	jmp	#LR__0060
010e0                 | LR__0061
010e0                 | '                         ' 
010e0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
010e0     8C 67 86 F1 | 	sub	objptr, #396
010e4     33 7F 02 FB | 	rdlong	_var02, objptr
010e8     14 7E 66 F0 | 	shl	_var02, #20
010ec     01 7E 06 F1 | 	add	_var02, #1
010f0     04 66 86 F1 | 	sub	objptr, #4
010f4     33 7D 02 FB | 	rdlong	_var01, objptr
010f8     06 7C 66 F0 | 	shl	_var01, #6
010fc     3E 7F 02 F1 | 	add	_var02, _var01
01100     90 67 06 F1 | 	add	objptr, #400
01104     33 7F 62 FC | 	wrlong	_var02, objptr
01108     ED 67 86 F1 | 	sub	objptr, #493
0110c                 | ' displaylist[1]:=buf_ptr<<4+%10  
0110c     33 7F 02 FB | 	rdlong	_var02, objptr
01110     04 7E 66 F0 | 	shl	_var02, #4
01114     02 7E 06 F1 | 	add	_var02, #2
01118     F1 67 06 F1 | 	add	objptr, #497
0111c     33 7F 62 FC | 	wrlong	_var02, objptr
01120                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
01120     04 66 86 F1 | 	sub	objptr, #4
01124     33 7F 02 F6 | 	mov	_var02, objptr
01128     CD 67 86 F1 | 	sub	objptr, #461
0112c     33 7F 62 FC | 	wrlong	_var02, objptr
01130     20 66 86 F1 | 	sub	objptr, #32
01134                 | _hg010b_spin2_makedl_ret
01134     2D 00 64 FD | 	ret
01138                 | 
01138                 | ' 
01138                 | ' 
01138                 | ' '****************************************************************************************************************
01138                 | ' '                                                                        					*
01138                 | ' '  Graphic primitives                                                    					*
01138                 | ' '                                                                        					*
01138                 | ' '****************************************************************************************************************
01138                 | ' 
01138                 | ' pub setspriteptr(num,ptr)
01138                 | _hg010b_spin2_setspriteptr
01138                 | ' long[@spr1ptr+12*num]:=ptr
01138     33 7D 02 F6 | 	mov	_var01, objptr
0113c     11 7D 06 F1 | 	add	_var01, #273
01140     46 7F 02 F6 | 	mov	_var02, arg01
01144     01 7E 66 F0 | 	shl	_var02, #1
01148     46 7F 02 F1 | 	add	_var02, arg01
0114c     02 7E 66 F0 | 	shl	_var02, #2
01150     3F 7D 02 F1 | 	add	_var01, _var02
01154     3E 8F 62 FC | 	wrlong	arg02, _var01
01158                 | _hg010b_spin2_setspriteptr_ret
01158     2D 00 64 FD | 	ret
0115c                 | 
0115c                 | ' 
0115c                 | ' pub setspritepos(num,x,y)
0115c                 | _hg010b_spin2_setspritepos
0115c                 | ' if y>601
0115c     01 00 00 FF 
01160     5A 90 56 F2 | 	cmps	arg03, ##602 wc
01164                 | '   y:=601
01164     01 00 00 3F 
01168     59 90 06 36 |  if_ae	mov	arg03, ##601
0116c                 | ' if x>1024
0116c     02 00 00 FF 
01170     01 8E 56 F2 | 	cmps	arg02, ##1025 wc
01174                 | '   x:=1024
01174     0A 8E C6 39 |  if_ae	decod	arg02, #10
01178                 | ' word[@spr1ptr+12*num+4]:=x
01178     11 67 06 F1 | 	add	objptr, #273
0117c     33 7D 02 F6 | 	mov	_var01, objptr
01180     46 7F 02 F6 | 	mov	_var02, arg01
01184     01 7E 66 F0 | 	shl	_var02, #1
01188     46 7F 02 F1 | 	add	_var02, arg01
0118c     02 7E 66 F0 | 	shl	_var02, #2
01190     3F 7D 02 F1 | 	add	_var01, _var02
01194     04 7C 06 F1 | 	add	_var01, #4
01198     3E 8F 52 FC | 	wrword	arg02, _var01
0119c                 | ' word[@spr1ptr+12*num+6]:=y
0119c     33 7D 02 F6 | 	mov	_var01, objptr
011a0     46 7F 02 F6 | 	mov	_var02, arg01
011a4     01 7E 66 F0 | 	shl	_var02, #1
011a8     46 7F 02 F1 | 	add	_var02, arg01
011ac     02 7E 66 F0 | 	shl	_var02, #2
011b0     3F 7D 02 F1 | 	add	_var01, _var02
011b4     06 7C 06 F1 | 	add	_var01, #6
011b8     3E 91 52 FC | 	wrword	arg03, _var01
011bc     11 67 86 F1 | 	sub	objptr, #273
011c0                 | _hg010b_spin2_setspritepos_ret
011c0     2D 00 64 FD | 	ret
011c4                 | 
011c4                 | ' 
011c4                 | ' pub setspritesize(num,w,h)
011c4                 | _hg010b_spin2_setspritesize
011c4                 | ' word[@spr1ptr+12*num+8]:=w
011c4     11 67 06 F1 | 	add	objptr, #273
011c8     33 7D 02 F6 | 	mov	_var01, objptr
011cc     46 7F 02 F6 | 	mov	_var02, arg01
011d0     01 7E 66 F0 | 	shl	_var02, #1
011d4     46 7F 02 F1 | 	add	_var02, arg01
011d8     02 7E 66 F0 | 	shl	_var02, #2
011dc     3F 7D 02 F1 | 	add	_var01, _var02
011e0     08 7C 06 F1 | 	add	_var01, #8
011e4     3E 8F 52 FC | 	wrword	arg02, _var01
011e8                 | ' word[@spr1ptr+12*num+10]:=h
011e8     33 7D 02 F6 | 	mov	_var01, objptr
011ec     46 7F 02 F6 | 	mov	_var02, arg01
011f0     01 7E 66 F0 | 	shl	_var02, #1
011f4     46 7F 02 F1 | 	add	_var02, arg01
011f8     02 7E 66 F0 | 	shl	_var02, #2
011fc     3F 7D 02 F1 | 	add	_var01, _var02
01200     0A 7C 06 F1 | 	add	_var01, #10
01204     3E 91 52 FC | 	wrword	arg03, _var01
01208     11 67 86 F1 | 	sub	objptr, #273
0120c                 | _hg010b_spin2_setspritesize_ret
0120c     2D 00 64 FD | 	ret
01210                 | 
01210                 | '   
01210                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
01210                 | ' 
01210                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
01210                 | _hg010b_spin2_fastline
01210     02 CA 05 F6 | 	mov	COUNT_, #2
01214     E8 00 A0 FD | 	call	#pushregs_
01218     46 97 02 F6 | 	mov	local01, arg01
0121c     47 99 02 F6 | 	mov	local02, arg02
01220                 | ' 
01220                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
01220     00 90 56 F2 | 	cmps	arg03, #0 wc
01224     F4 00 90 CD |  if_b	jmp	#LR__0070
01228     01 00 00 FF 
0122c     2A 66 06 F1 | 	add	objptr, ##554
01230     33 95 02 FB | 	rdlong	arg05, objptr
01234     01 00 00 FF 
01238     2A 66 86 F1 | 	sub	objptr, ##554
0123c     4A 91 52 F2 | 	cmps	arg03, arg05 wc
01240     D8 00 90 3D |  if_ae	jmp	#LR__0070
01244     00 96 56 F2 | 	cmps	local01, #0 wc
01248     00 98 56 C2 |  if_b	cmps	local02, #0 wc
0124c     CC 00 90 CD |  if_b	jmp	#LR__0070
01250     01 00 00 FF 
01254     26 66 06 F1 | 	add	objptr, ##550
01258     33 95 02 FB | 	rdlong	arg05, objptr
0125c     01 00 00 FF 
01260     26 66 86 F1 | 	sub	objptr, ##550
01264     4A 97 5A F2 | 	cmps	local01, arg05 wcz
01268     01 00 00 1F 
0126c     26 66 06 11 |  if_a	add	objptr, ##550
01270     33 8D 02 1B |  if_a	rdlong	arg01, objptr
01274     01 00 00 1F 
01278     26 66 86 11 |  if_a	sub	objptr, ##550
0127c     46 99 5A 12 |  if_a	cmps	local02, arg01 wcz
01280                 | '   return
01280     98 00 90 1D |  if_a	jmp	#LR__0070
01284     4C 97 5A F2 | 	cmps	local01, local02 wcz
01288     4B 95 02 16 |  if_a	mov	arg05, local01
0128c     4C 97 02 16 |  if_a	mov	local01, local02
01290     4A 99 02 16 |  if_a	mov	local02, arg05
01294     00 96 56 F2 | 	cmps	local01, #0 wc
01298     00 96 06 C6 |  if_b	mov	local01, #0
0129c     01 00 00 FF 
012a0     26 66 06 F1 | 	add	objptr, ##550
012a4     33 95 02 FB | 	rdlong	arg05, objptr
012a8     01 00 00 FF 
012ac     26 66 86 F1 | 	sub	objptr, ##550
012b0     4A 99 52 F2 | 	cmps	local02, arg05 wc
012b4     01 00 00 3F 
012b8     26 66 06 31 |  if_ae	add	objptr, ##550
012bc     33 99 02 3B |  if_ae	rdlong	local02, objptr
012c0     01 00 00 3F 
012c4     26 66 86 31 |  if_ae	sub	objptr, ##550
012c8     DD 66 06 F1 | 	add	objptr, #221
012cc     33 8D 02 FB | 	rdlong	arg01, objptr
012d0     14 66 06 F1 | 	add	objptr, #20
012d4     33 95 02 FB | 	rdlong	arg05, objptr
012d8     02 94 66 F0 | 	shl	arg05, #2
012dc     48 95 02 FD | 	qmul	arg05, arg03
012e0                 | ' if x1>x2
012e0                 | '   x1,x2:=x2,x1
012e0                 | ' if x1<0 
012e0                 | '   x1:=0
012e0                 | ' if x2>=xres
012e0                 | '   x2:=xres-1  
012e0     01 98 86 31 |  if_ae	sub	local02, #1
012e4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
012e4     01 90 06 F6 | 	mov	arg03, #1
012e8     4C 91 02 F1 | 	add	arg03, local02
012ec     4B 91 82 F1 | 	sub	arg03, local01
012f0     49 8F 02 F6 | 	mov	arg02, arg04
012f4     00 92 06 F6 | 	mov	arg04, #0
012f8     01 94 06 F6 | 	mov	arg05, #1
012fc     0A 00 00 FF 
01300     DB 67 06 F1 | 	add	objptr, ##5595
01304     18 98 62 FD | 	getqx	local02
01308     4B 99 02 F1 | 	add	local02, local01
0130c     4C 8D 02 F1 | 	add	arg01, local02
01310     84 0A B0 FD | 	call	#_psram_spin2_fill
01314     0B 00 00 FF 
01318     CC 66 86 F1 | 	sub	objptr, ##5836
0131c                 | LR__0070
0131c     E7 F0 03 F6 | 	mov	ptra, fp
01320     F2 00 A0 FD | 	call	#popregs_
01324                 | _hg010b_spin2_fastline_ret
01324     2D 00 64 FD | 	ret
01328                 | 
01328                 | '       
01328                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
01328                 | _hg010b_spin2_putcharxycgf
01328                 | ' 
01328                 | '  
01328                 | ' repeat yy from 0 to 15
01328     00 7C 06 F6 | 	mov	_var01, #0
0132c     D7 8A 48 FB | 	callpa	#(@LR__0082-@LR__0080)>>2,fcache_load_ptr_
01330                 | LR__0080
01330                 | ' 
01330                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
01330     95 66 06 F1 | 	add	objptr, #149
01334     33 7F 02 FB | 	rdlong	_var02, objptr
01338     0A 7E 66 F0 | 	shl	_var02, #10
0133c     36 81 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
01340     3F 81 02 F1 | 	add	_var03, _var02
01344     48 7F 02 F6 | 	mov	_var02, arg03
01348     04 7E 66 F0 | 	shl	_var02, #4
0134c     3F 81 02 F1 | 	add	_var03, _var02
01350     3E 81 02 F1 | 	add	_var03, _var01
01354     40 81 C2 FA | 	rdbyte	_var03, _var03
01358                 | '   asm
01358     00 80 0E F4 | 	testb	_var03, #0 wz
0135c     49 83 C2 A8 |  if_e	setbyte	_var04, arg04, #0
01360     4A 83 C2 58 |  if_ne	setbyte	_var04, arg05, #0
01364     01 80 0E F4 | 	testb	_var03, #1 wz
01368     49 83 CA A8 |  if_e	setbyte	_var04, arg04, #1
0136c     4A 83 CA 58 |  if_ne	setbyte	_var04, arg05, #1
01370     02 80 0E F4 | 	testb	_var03, #2 wz
01374     49 83 D2 A8 |  if_e	setbyte	_var04, arg04, #2
01378     4A 83 D2 58 |  if_ne	setbyte	_var04, arg05, #2
0137c     03 80 0E F4 | 	testb	_var03, #3 wz
01380     49 83 DA A8 |  if_e	setbyte	_var04, arg04, #3
01384     4A 83 DA 58 |  if_ne	setbyte	_var04, arg05, #3
01388     04 80 0E F4 | 	testb	_var03, #4 wz
0138c     49 85 C2 A8 |  if_e	setbyte	_var05, arg04, #0
01390     4A 85 C2 58 |  if_ne	setbyte	_var05, arg05, #0
01394     05 80 0E F4 | 	testb	_var03, #5 wz
01398     49 85 CA A8 |  if_e	setbyte	_var05, arg04, #1
0139c     4A 85 CA 58 |  if_ne	setbyte	_var05, arg05, #1
013a0     06 80 0E F4 | 	testb	_var03, #6 wz
013a4     49 85 D2 A8 |  if_e	setbyte	_var05, arg04, #2
013a8     4A 85 D2 58 |  if_ne	setbyte	_var05, arg05, #2
013ac     07 80 0E F4 | 	testb	_var03, #7 wz
013b0     49 85 DA A8 |  if_e	setbyte	_var05, arg04, #3
013b4     4A 85 DA 58 |  if_ne	setbyte	_var05, arg05, #3
013b8                 | '   
013b8                 | '   ccc[0]:=c1
013b8     99 67 06 F1 | 	add	objptr, #409
013bc     33 83 62 FC | 	wrlong	_var04, objptr
013c0                 | '   ccc[1]:=c2 
013c0     04 66 06 F1 | 	add	objptr, #4
013c4     33 85 62 FC | 	wrlong	_var05, objptr
013c8                 | '   long[mailbox0][2]:=8
013c8     49 66 86 F1 | 	sub	objptr, #73
013cc     33 81 02 FB | 	rdlong	_var03, objptr
013d0     08 80 06 F1 | 	add	_var03, #8
013d4     40 11 68 FC | 	wrlong	#8, _var03
013d8                 | '   long[mailbox0][1]:=@ccc
013d8     33 81 02 F6 | 	mov	_var03, objptr
013dc     45 80 06 F1 | 	add	_var03, #69
013e0     33 7F 02 FB | 	rdlong	_var02, objptr
013e4     04 7E 06 F1 | 	add	_var02, #4
013e8     3F 81 62 FC | 	wrlong	_var03, _var02
013ec                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
013ec     0C 67 86 F1 | 	sub	objptr, #268
013f0     33 81 02 FB | 	rdlong	_var03, objptr
013f4     47 7F 02 F6 | 	mov	_var02, arg02
013f8     3E 7F 02 F1 | 	add	_var02, _var01
013fc     0A 7E 66 F0 | 	shl	_var02, #10
01400     46 87 02 F6 | 	mov	_var06, arg01
01404     02 86 66 F0 | 	shl	_var06, #2
01408     43 7F 02 F1 | 	add	_var02, _var06
0140c     3F 81 02 F1 | 	add	_var03, _var02
01410     00 00 78 FF 
01414     00 80 06 F1 | 	add	_var03, ##-268435456
01418     0C 67 06 F1 | 	add	objptr, #268
0141c     33 87 02 FB | 	rdlong	_var06, objptr
01420     43 81 62 FC | 	wrlong	_var03, _var06
01424                 | '   repeat
01424                 | LR__0081
01424     33 81 02 FB | 	rdlong	_var03, objptr
01428     40 7F 02 FB | 	rdlong	_var02, _var03
0142c     00 7E 56 F2 | 	cmps	_var02, #0 wc
01430     F0 FF 9F CD |  if_b	jmp	#LR__0081
01434     E9 67 86 F1 | 	sub	objptr, #489
01438     01 7C 06 F1 | 	add	_var01, #1
0143c     10 7C 56 F2 | 	cmps	_var01, #16 wc
01440     EC FE 9F CD |  if_b	jmp	#LR__0080
01444                 | LR__0082
01444                 | _hg010b_spin2_putcharxycgf_ret
01444     2D 00 64 FD | 	ret
01448                 | 
01448                 | ' 
01448                 | ' 
01448                 | ' '**********************************************************************r***
01448                 | ' '                                                                        *
01448                 | ' ' Font related functions                                                 *
01448                 | ' '                                                                        *
01448                 | ' '*************************************************************************
01448                 | ' 
01448                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
01448                 | ' 
01448                 | ' pub setfontfamily(afontnum)
01448                 | _hg010b_spin2_setfontfamily
01448                 | ' 
01448                 | ' font_family:=afontnum
01448     95 66 06 F1 | 	add	objptr, #149
0144c     33 8D 62 FC | 	wrlong	arg01, objptr
01450     95 66 86 F1 | 	sub	objptr, #149
01454                 | ' 'if afontnum==8
01454                 | ' '  font_ptr:=@amiga_font
01454                 | ' 
01454                 | ' if afontnum==4
01454     04 8C 0E F2 | 	cmp	arg01, #4 wz
01458                 | '   font_ptr:=@st_font
01458     36 7D 02 A6 |  if_e	mov	_var01, ptr__hg010b_spin2_dat__
0145c     08 00 00 AF 
01460     00 7C 06 A1 |  if_e	add	_var01, ##4096
01464     08 66 06 A1 |  if_e	add	objptr, #8
01468     33 7D 62 AC |  if_e	wrlong	_var01, objptr
0146c     08 66 86 A1 |  if_e	sub	objptr, #8
01470                 | ' if afontnum==0
01470     00 8C 0E F2 | 	cmp	arg01, #0 wz
01474                 | '   font_ptr:=@vga_font
01474     08 66 06 A1 |  if_e	add	objptr, #8
01478     33 6D 62 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
0147c     08 66 86 A1 |  if_e	sub	objptr, #8
01480                 | _hg010b_spin2_setfontfamily_ret
01480     2D 00 64 FD | 	ret
01484                 | 
01484                 | ' 
01484                 | ' '*************************************************************************
01484                 | ' '                                                                        *
01484                 | ' '  VBlank functions                                                      *
01484                 | ' '                                                                        *
01484                 | ' '*************************************************************************
01484                 | ' 
01484                 | ' pub waitvbl(amount) | i
01484                 | _hg010b_spin2_waitvbl
01484     03 CA 05 F6 | 	mov	COUNT_, #3
01488     E8 00 A0 FD | 	call	#pushregs_
0148c     46 97 02 F6 | 	mov	local01, arg01
01490                 | ' 
01490                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
01490                 | ' 
01490                 | ' repeat i from 1 to amount
01490     01 98 06 F6 | 	mov	local02, #1
01494     01 96 56 F2 | 	cmps	local01, #1 wc
01498     01 9A 86 F6 | 	negc	local03, #1
0149c     4D 97 02 F1 | 	add	local01, local03
014a0                 | LR__0090
014a0                 | '   repeat until vblank==0
014a0                 | LR__0091
014a0     49 66 06 F1 | 	add	objptr, #73
014a4     33 8D 0A FB | 	rdlong	arg01, objptr wz
014a8     49 66 86 F1 | 	sub	objptr, #73
014ac     0C 00 90 AD |  if_e	jmp	#LR__0092
014b0                 | '     waitus(100)
014b0     64 8C 06 F6 | 	mov	arg01, #100
014b4     E0 5B B0 FD | 	call	#__system___waitus
014b8     E4 FF 9F FD | 	jmp	#LR__0091
014bc                 | LR__0092
014bc                 | '   repeat until vblank==1
014bc                 | LR__0093
014bc     49 66 06 F1 | 	add	objptr, #73
014c0     33 8D 02 FB | 	rdlong	arg01, objptr
014c4     49 66 86 F1 | 	sub	objptr, #73
014c8     01 8C 0E F2 | 	cmp	arg01, #1 wz
014cc     0C 00 90 AD |  if_e	jmp	#LR__0094
014d0                 | '     waitus(100)
014d0     64 8C 06 F6 | 	mov	arg01, #100
014d4     C0 5B B0 FD | 	call	#__system___waitus
014d8     E0 FF 9F FD | 	jmp	#LR__0093
014dc                 | LR__0094
014dc     4D 99 02 F1 | 	add	local02, local03
014e0     4B 99 0A F2 | 	cmp	local02, local01 wz
014e4     B8 FF 9F 5D |  if_ne	jmp	#LR__0090
014e8     E7 F0 03 F6 | 	mov	ptra, fp
014ec     F2 00 A0 FD | 	call	#popregs_
014f0                 | _hg010b_spin2_waitvbl_ret
014f0     2D 00 64 FD | 	ret
014f4                 | 
014f4                 | ' 
014f4                 | ' 
014f4                 | ' pub cls(fc,bc)   :c,i
014f4                 | _hg010b_spin2_cls
014f4     02 CA 05 F6 | 	mov	COUNT_, #2
014f8     E8 00 A0 FD | 	call	#pushregs_
014fc     46 97 02 F6 | 	mov	local01, arg01
01500     47 99 02 F6 | 	mov	local02, arg02
01504                 | ' 
01504                 | ' c:=bc
01504                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
01504     DD 66 06 F1 | 	add	objptr, #221
01508     33 8D 02 FB | 	rdlong	arg01, objptr
0150c     A5 66 86 F1 | 	sub	objptr, #165
01510     33 91 02 FB | 	rdlong	arg03, objptr
01514     02 90 66 F0 | 	shl	arg03, #2
01518     4C 8F 02 F6 | 	mov	arg02, local02
0151c     00 92 06 F6 | 	mov	arg04, #0
01520     01 94 06 F6 | 	mov	arg05, #1
01524     0B 00 00 FF 
01528     94 66 06 F1 | 	add	objptr, ##5780
0152c     68 08 B0 FD | 	call	#_psram_spin2_fill
01530                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
01530     0B 00 00 FF 
01534     C8 66 86 F1 | 	sub	objptr, ##5832
01538     33 8D 02 FB | 	rdlong	arg01, objptr
0153c     04 66 86 F1 | 	sub	objptr, #4
01540     33 91 02 FB | 	rdlong	arg03, objptr
01544     46 91 82 F1 | 	sub	arg03, arg01
01548     20 8E 06 F6 | 	mov	arg02, #32
0154c     00 92 06 F6 | 	mov	arg04, #0
01550     01 94 06 F6 | 	mov	arg05, #1
01554     0B 00 00 FF 
01558     CC 66 06 F1 | 	add	objptr, ##5836
0155c     38 08 B0 FD | 	call	#_psram_spin2_fill
01560                 | ' setwritecolors(fc,bc)
01560                 | ' 
01560                 | ' write_color:=ff
01560     0B 00 00 FF 
01564     8B 66 86 F1 | 	sub	objptr, ##5771
01568     33 97 62 FC | 	wrlong	local01, objptr
0156c                 | ' write_background:=bb
0156c     04 66 06 F1 | 	add	objptr, #4
01570     33 99 62 FC | 	wrlong	local02, objptr
01574                 | ' cursor_x:=0
01574     09 66 86 F1 | 	sub	objptr, #9
01578     33 01 58 FC | 	wrword	#0, objptr
0157c                 | ' cursor_y:=0
0157c     02 66 06 F1 | 	add	objptr, #2
01580     33 01 48 FC | 	wrbyte	#0, objptr
01584                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
01584     02 66 86 F1 | 	sub	objptr, #2
01588     33 8F E2 FA | 	rdword	arg02, objptr
0158c     02 8E 66 F0 | 	shl	arg02, #2
01590     3C 66 86 F1 | 	sub	objptr, #60
01594     04 90 06 F6 | 	mov	arg03, #4
01598     11 8C 06 F6 | 	mov	arg01, #17
0159c     BC FB BF FD | 	call	#_hg010b_spin2_setspritepos
015a0                 | ' setcursorcolor(fc)
015a0     4B 8D 02 F6 | 	mov	arg01, local01
015a4     C8 F7 BF FD | 	call	#_hg010b_spin2_setcursorcolor
015a8     4C 77 02 F6 | 	mov	result1, local02
015ac     00 78 06 F6 | 	mov	result2, #0
015b0     E7 F0 03 F6 | 	mov	ptra, fp
015b4     F2 00 A0 FD | 	call	#popregs_
015b8                 | _hg010b_spin2_cls_ret
015b8     2D 00 64 FD | 	ret
015bc                 | 
015bc                 | ' 
015bc                 | ' ''---------- Output a char at the cursor position, move the cursor 
015bc                 | ' 
015bc                 | ' pub putchar(achar) | c,x,y,l,newcpl
015bc                 | _hg010b_spin2_putchar
015bc     02 CA 05 F6 | 	mov	COUNT_, #2
015c0     E8 00 A0 FD | 	call	#pushregs_
015c4     46 97 02 F6 | 	mov	local01, arg01
015c8                 | ' 
015c8                 | ' if achar==10
015c8     0A 96 0E F2 | 	cmp	local01, #10 wz
015cc                 | '   crlf()
015cc     B8 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
015d0                 | ' if achar==9
015d0     09 96 0E F2 | 	cmp	local01, #9 wz
015d4     18 00 90 5D |  if_ne	jmp	#LR__0100
015d8                 | '   cursor_x:=(cursor_x& %11110000)+16
015d8     3C 66 06 F1 | 	add	objptr, #60
015dc     33 91 E2 FA | 	rdword	arg03, objptr
015e0     F0 90 06 F5 | 	and	arg03, #240
015e4     10 90 06 F1 | 	add	arg03, #16
015e8     33 91 52 FC | 	wrword	arg03, objptr
015ec     3C 66 86 F1 | 	sub	objptr, #60
015f0                 | LR__0100
015f0                 | '   
015f0                 | ' if (achar<>9) && (achar<>10) 
015f0     09 96 0E F2 | 	cmp	local01, #9 wz
015f4     0A 96 0E 52 |  if_ne	cmp	local01, #10 wz
015f8     A8 00 90 AD |  if_e	jmp	#LR__0101
015fc                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
015fc     3C 66 06 F1 | 	add	objptr, #60
01600     33 8D E2 FA | 	rdword	arg01, objptr
01604     02 66 06 F1 | 	add	objptr, #2
01608     33 8F C2 FA | 	rdbyte	arg02, objptr
0160c     04 8E 66 F0 | 	shl	arg02, #4
01610     04 8E 06 F1 | 	add	arg02, #4
01614     03 66 06 F1 | 	add	objptr, #3
01618     33 93 02 FB | 	rdlong	arg04, objptr
0161c     04 66 06 F1 | 	add	objptr, #4
01620     33 95 02 FB | 	rdlong	arg05, objptr
01624     45 66 86 F1 | 	sub	objptr, #69
01628     4B 91 02 F6 | 	mov	arg03, local01
0162c     F8 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
01630     04 66 06 F1 | 	add	objptr, #4
01634     33 8D 02 FB | 	rdlong	arg01, objptr
01638     1C 00 00 FF 
0163c     5C 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01640     36 91 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
01644     3A 66 06 F1 | 	add	objptr, #58
01648     33 95 C2 FA | 	rdbyte	arg05, objptr
0164c     4A 91 02 FD | 	qmul	arg03, arg05
01650                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
01650     1C 00 00 FF 
01654     5C 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01658     02 66 86 F1 | 	sub	objptr, #2
0165c     33 99 E2 FA | 	rdword	local02, objptr
01660     01 98 46 F0 | 	shr	local02, #1
01664     4B 8F 02 F6 | 	mov	arg02, local01
01668     01 90 06 F6 | 	mov	arg03, #1
0166c     00 92 06 F6 | 	mov	arg04, #0
01670     01 94 06 F6 | 	mov	arg05, #1
01674     0B 00 00 FF 
01678     90 66 06 F1 | 	add	objptr, ##5776
0167c     18 96 62 FD | 	getqx	local01
01680     4C 97 02 F1 | 	add	local01, local02
01684     4B 8D 02 F1 | 	add	arg01, local01
01688     0C 07 B0 FD | 	call	#_psram_spin2_fill
0168c                 | '   cursor_x+=2
0168c     0B 00 00 FF 
01690     90 66 86 F1 | 	sub	objptr, ##5776
01694     33 99 E2 FA | 	rdword	local02, objptr
01698     02 98 06 F1 | 	add	local02, #2
0169c     33 99 52 FC | 	wrword	local02, objptr
016a0     3C 66 86 F1 | 	sub	objptr, #60
016a4                 | LR__0101
016a4                 | ' 
016a4                 | ' if cursor_x>=256
016a4     3C 66 06 F1 | 	add	objptr, #60
016a8     33 99 E2 FA | 	rdword	local02, objptr
016ac     3C 66 86 F1 | 	sub	objptr, #60
016b0     00 99 56 F2 | 	cmps	local02, #256 wc
016b4     64 00 90 CD |  if_b	jmp	#LR__0103
016b8                 | '   cursor_x:=0
016b8     3C 66 06 F1 | 	add	objptr, #60
016bc     33 01 58 FC | 	wrword	#0, objptr
016c0                 | '   cursor_y+=1
016c0     02 66 06 F1 | 	add	objptr, #2
016c4     33 99 C2 FA | 	rdbyte	local02, objptr
016c8     01 98 06 F1 | 	add	local02, #1
016cc     33 99 42 FC | 	wrbyte	local02, objptr
016d0                 | '   if cursor_y>st_lines-1
016d0     C3 66 06 F1 | 	add	objptr, #195
016d4     33 99 02 FB | 	rdlong	local02, objptr
016d8     01 98 86 F1 | 	sub	local02, #1
016dc     C3 66 86 F1 | 	sub	objptr, #195
016e0     33 91 C2 FA | 	rdbyte	arg03, objptr
016e4     3E 66 86 F1 | 	sub	objptr, #62
016e8     4C 91 5A F2 | 	cmps	arg03, local02 wcz
016ec     2C 00 90 ED |  if_be	jmp	#LR__0102
016f0                 | '     scrollup2()
016f0     00 8C 06 F6 | 	mov	arg01, #0
016f4     01 00 00 FF 
016f8     58 8E 06 F6 | 	mov	arg02, ##600
016fc     10 90 06 F6 | 	mov	arg03, #16
01700     4C 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
01704                 | '     cursor_y:=st_lines-1
01704     01 67 06 F1 | 	add	objptr, #257
01708     33 99 02 FB | 	rdlong	local02, objptr
0170c     01 98 86 F1 | 	sub	local02, #1
01710     C3 66 86 F1 | 	sub	objptr, #195
01714     33 99 42 FC | 	wrbyte	local02, objptr
01718     3E 66 86 F1 | 	sub	objptr, #62
0171c                 | LR__0102
0171c                 | LR__0103
0171c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
0171c     3C 66 06 F1 | 	add	objptr, #60
01720     33 8F E2 FA | 	rdword	arg02, objptr
01724     02 8E 66 F0 | 	shl	arg02, #2
01728     02 66 06 F1 | 	add	objptr, #2
0172c     33 91 C2 FA | 	rdbyte	arg03, objptr
01730     3E 66 86 F1 | 	sub	objptr, #62
01734     04 90 66 F0 | 	shl	arg03, #4
01738     04 90 06 F1 | 	add	arg03, #4
0173c     11 8C 06 F6 | 	mov	arg01, #17
01740     18 FA BF FD | 	call	#_hg010b_spin2_setspritepos
01744     E7 F0 03 F6 | 	mov	ptra, fp
01748     F2 00 A0 FD | 	call	#popregs_
0174c                 | _hg010b_spin2_putchar_ret
0174c     2D 00 64 FD | 	ret
01750                 | 
01750                 | '    
01750                 | ' ' a version for text scrolling in Basic shifted 4 lines down
01750                 | ' 
01750                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
01750                 | _hg010b_spin2_scrollup2
01750     03 CA 05 F6 | 	mov	COUNT_, #3
01754     E8 00 A0 FD | 	call	#pushregs_
01758                 | ' 	
01758                 | ' repeat i from 4 to 579 
01758     04 96 06 F6 | 	mov	local01, #4
0175c                 | LR__0110
0175c     DD 66 06 F1 | 	add	objptr, #221
01760     33 8F 02 FB | 	rdlong	arg02, objptr
01764     4B 95 02 F6 | 	mov	arg05, local01
01768     10 94 06 F1 | 	add	arg05, #16
0176c     02 94 66 F0 | 	shl	arg05, #2
01770     14 66 06 F1 | 	add	objptr, #20
01774     33 91 02 FB | 	rdlong	arg03, objptr
01778     48 95 02 FD | 	qmul	arg05, arg03
0177c                 | '   ram.read1($7E800, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
0177c     02 90 66 F0 | 	shl	arg03, #2
01780     F4 03 00 FF 
01784     00 8C 06 F6 | 	mov	arg01, ##518144
01788     0A 00 00 FF 
0178c     DB 67 06 F1 | 	add	objptr, ##5595
01790     18 94 62 FD | 	getqx	arg05
01794     4A 8F 02 F1 | 	add	arg02, arg05
01798     C4 04 B0 FD | 	call	#_psram_spin2_read1
0179c     0A 00 00 FF 
017a0     EF 67 86 F1 | 	sub	objptr, ##5615
017a4     33 8F 02 FB | 	rdlong	arg02, objptr
017a8     4B 95 02 F6 | 	mov	arg05, local01
017ac     02 94 66 F0 | 	shl	arg05, #2
017b0     14 66 06 F1 | 	add	objptr, #20
017b4     33 91 02 FB | 	rdlong	arg03, objptr
017b8     48 95 02 FD | 	qmul	arg05, arg03
017bc                 | '   ram.write($7E800, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
017bc     02 90 66 F0 | 	shl	arg03, #2
017c0     F4 03 00 FF 
017c4     00 8C 06 F6 | 	mov	arg01, ##518144
017c8     0A 00 00 FF 
017cc     DB 67 06 F1 | 	add	objptr, ##5595
017d0     18 94 62 FD | 	getqx	arg05
017d4     4A 8F 02 F1 | 	add	arg02, arg05
017d8     20 05 B0 FD | 	call	#_psram_spin2_write
017dc     0B 00 00 FF 
017e0     CC 66 86 F1 | 	sub	objptr, ##5836
017e4     01 96 06 F1 | 	add	local01, #1
017e8     01 00 00 FF 
017ec     44 96 16 F2 | 	cmp	local01, ##580 wc
017f0     68 FF 9F CD |  if_b	jmp	#LR__0110
017f4                 | ' 
017f4                 | ' repeat i from 580 to 599
017f4     01 00 00 FF 
017f8     44 96 06 F6 | 	mov	local01, ##580
017fc                 | LR__0111
017fc                 | '    fastline(0,1023,i,write_background)   
017fc     45 66 06 F1 | 	add	objptr, #69
01800     33 93 02 FB | 	rdlong	arg04, objptr
01804     45 66 86 F1 | 	sub	objptr, #69
01808     00 8C 06 F6 | 	mov	arg01, #0
0180c     09 8E CE F9 | 	bmask	arg02, #9
01810     4B 91 02 F6 | 	mov	arg03, local01
01814     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
01818     01 96 06 F1 | 	add	local01, #1
0181c     01 00 00 FF 
01820     58 96 16 F2 | 	cmp	local01, ##600 wc
01824     D4 FF 9F CD |  if_b	jmp	#LR__0111
01828                 | ' repeat i from 0 to 3
01828     00 96 06 F6 | 	mov	local01, #0
0182c                 | LR__0112
0182c                 | '    fastline(0,1023,i,write_background)      
0182c     45 66 06 F1 | 	add	objptr, #69
01830     33 93 02 FB | 	rdlong	arg04, objptr
01834     45 66 86 F1 | 	sub	objptr, #69
01838     00 8C 06 F6 | 	mov	arg01, #0
0183c     09 8E CE F9 | 	bmask	arg02, #9
01840     4B 91 02 F6 | 	mov	arg03, local01
01844     C8 F9 BF FD | 	call	#_hg010b_spin2_fastline
01848     01 96 06 F1 | 	add	local01, #1
0184c     04 96 56 F2 | 	cmps	local01, #4 wc
01850     D8 FF 9F CD |  if_b	jmp	#LR__0112
01854                 | ' 
01854                 | ' repeat i from 0 to 35
01854     00 96 06 F6 | 	mov	local01, #0
01858                 | LR__0113
01858     4B 95 02 F6 | 	mov	arg05, local01
0185c     01 94 06 F1 | 	add	arg05, #1
01860     1C 00 00 FF 
01864     5C 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01868     36 91 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
0186c     48 95 02 FD | 	qmul	arg05, arg03
01870                 | '   ram.read1($7E800, textbuf_ptr+(i+1)*timings[7], timings[7])
01870     04 66 06 F1 | 	add	objptr, #4
01874     33 8F 02 FB | 	rdlong	arg02, objptr
01878     1C 00 00 FF 
0187c     5C 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01880     F4 03 00 FF 
01884     00 8C 06 F6 | 	mov	arg01, ##518144
01888     0B 00 00 FF 
0188c     C8 66 06 F1 | 	add	objptr, ##5832
01890     18 94 62 FD | 	getqx	arg05
01894     4A 8F 02 F1 | 	add	arg02, arg05
01898     C4 03 B0 FD | 	call	#_psram_spin2_read1
0189c     1C 00 00 FF 
018a0     5C 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
018a4     36 91 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
018a8     48 97 02 FD | 	qmul	local01, arg03
018ac                 | '   ram.write($7E800, textbuf_ptr+i*timings[7], timings[7])
018ac     0B 00 00 FF 
018b0     C8 66 86 F1 | 	sub	objptr, ##5832
018b4     33 8F 02 FB | 	rdlong	arg02, objptr
018b8     1C 00 00 FF 
018bc     5C 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
018c0     F4 03 00 FF 
018c4     00 8C 06 F6 | 	mov	arg01, ##518144
018c8     0B 00 00 FF 
018cc     C8 66 06 F1 | 	add	objptr, ##5832
018d0     18 94 62 FD | 	getqx	arg05
018d4     4A 8F 02 F1 | 	add	arg02, arg05
018d8     20 04 B0 FD | 	call	#_psram_spin2_write
018dc     0B 00 00 FF 
018e0     CC 66 86 F1 | 	sub	objptr, ##5836
018e4     01 96 06 F1 | 	add	local01, #1
018e8     24 96 56 F2 | 	cmps	local01, #36 wc
018ec     68 FF 9F CD |  if_b	jmp	#LR__0113
018f0                 | ' repeat i from 0 to timings[7]-1
018f0     00 96 06 F6 | 	mov	local01, #0
018f4     1C 00 00 FF 
018f8     5C 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
018fc     36 99 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
01900     1C 00 00 FF 
01904     5C 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01908     01 98 86 F1 | 	sub	local02, #1
0190c     00 98 56 F2 | 	cmps	local02, #0 wc
01910     01 9A 86 F6 | 	negc	local03, #1
01914     4D 99 02 F1 | 	add	local02, local03
01918                 | LR__0114
01918                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
01918     04 66 06 F1 | 	add	objptr, #4
0191c     33 8D 02 FB | 	rdlong	arg01, objptr
01920     1C 00 00 FF 
01924     5C 6C 06 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
01928     36 95 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
0192c     1C 00 00 FF 
01930     5C 6C 86 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
01934     4A 93 02 F6 | 	mov	arg04, arg05
01938     03 92 66 F0 | 	shl	arg04, #3
0193c     4A 93 02 F1 | 	add	arg04, arg05
01940     02 92 66 F0 | 	shl	arg04, #2
01944     4B 93 02 F1 | 	add	arg04, local01
01948     49 8D 02 F1 | 	add	arg01, arg04
0194c     20 8E 06 F6 | 	mov	arg02, #32
01950     01 90 06 F6 | 	mov	arg03, #1
01954     00 92 06 F6 | 	mov	arg04, #0
01958     01 94 06 F6 | 	mov	arg05, #1
0195c     0B 00 00 FF 
01960     C8 66 06 F1 | 	add	objptr, ##5832
01964     30 04 B0 FD | 	call	#_psram_spin2_fill
01968     0B 00 00 FF 
0196c     CC 66 86 F1 | 	sub	objptr, ##5836
01970     4D 97 02 F1 | 	add	local01, local03
01974     4C 97 0A F2 | 	cmp	local01, local02 wz
01978     9C FF 9F 5D |  if_ne	jmp	#LR__0114
0197c     E7 F0 03 F6 | 	mov	ptra, fp
01980     F2 00 A0 FD | 	call	#popregs_
01984                 | _hg010b_spin2_scrollup2_ret
01984     2D 00 64 FD | 	ret
01988                 | 
01988                 | ' 
01988                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
01988                 | ' 
01988                 | ' pub crlf()
01988                 | _hg010b_spin2_crlf
01988                 | ' 
01988                 | ' cursor_x:=leading_spaces*2
01988     01 00 00 FF 
0198c     B6 66 06 F1 | 	add	objptr, ##694
01990     33 91 02 FB | 	rdlong	arg03, objptr
01994     01 90 66 F0 | 	shl	arg03, #1
01998     01 00 00 FF 
0199c     7A 66 86 F1 | 	sub	objptr, ##634
019a0     33 91 52 FC | 	wrword	arg03, objptr
019a4                 | ' cursor_y+=1
019a4     02 66 06 F1 | 	add	objptr, #2
019a8     33 91 C2 FA | 	rdbyte	arg03, objptr
019ac     01 90 06 F1 | 	add	arg03, #1
019b0     33 91 42 FC | 	wrbyte	arg03, objptr
019b4                 | ' if cursor_y>st_lines-1
019b4     C3 66 06 F1 | 	add	objptr, #195
019b8     33 91 02 FB | 	rdlong	arg03, objptr
019bc     01 90 86 F1 | 	sub	arg03, #1
019c0     C3 66 86 F1 | 	sub	objptr, #195
019c4     33 8F C2 FA | 	rdbyte	arg02, objptr
019c8     3E 66 86 F1 | 	sub	objptr, #62
019cc     48 8F 5A F2 | 	cmps	arg02, arg03 wcz
019d0     2C 00 90 ED |  if_be	jmp	#LR__0120
019d4                 | '   scrollup2()
019d4     00 8C 06 F6 | 	mov	arg01, #0
019d8     01 00 00 FF 
019dc     58 8E 06 F6 | 	mov	arg02, ##600
019e0     10 90 06 F6 | 	mov	arg03, #16
019e4     68 FD BF FD | 	call	#_hg010b_spin2_scrollup2
019e8                 | '   cursor_y:=st_lines-1
019e8     01 67 06 F1 | 	add	objptr, #257
019ec     33 91 02 FB | 	rdlong	arg03, objptr
019f0     01 90 86 F1 | 	sub	arg03, #1
019f4     C3 66 86 F1 | 	sub	objptr, #195
019f8     33 91 42 FC | 	wrbyte	arg03, objptr
019fc     3E 66 86 F1 | 	sub	objptr, #62
01a00                 | LR__0120
01a00                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
01a00     3C 66 06 F1 | 	add	objptr, #60
01a04     33 8F E2 FA | 	rdword	arg02, objptr
01a08     02 8E 66 F0 | 	shl	arg02, #2
01a0c     02 66 06 F1 | 	add	objptr, #2
01a10     33 91 C2 FA | 	rdbyte	arg03, objptr
01a14     3E 66 86 F1 | 	sub	objptr, #62
01a18     04 90 66 F0 | 	shl	arg03, #4
01a1c     04 90 06 F1 | 	add	arg03, #4
01a20     11 8C 06 F6 | 	mov	arg01, #17
01a24     34 F7 BF FD | 	call	#_hg010b_spin2_setspritepos
01a28                 | _hg010b_spin2_crlf_ret
01a28     2D 00 64 FD | 	ret
01a2c                 | 
01a2c                 | ' 
01a2c                 | ' '..............................................................................
01a2c                 | ' 
01a2c                 | ' {{
01a2c                 | ' }}
01a2c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
01a2c                 | _psram_spin2_startx
01a2c     04 CA 05 F6 | 	mov	COUNT_, #4
01a30     E8 00 A0 FD | 	call	#pushregs_
01a34     46 97 02 F6 | 	mov	local01, arg01
01a38     48 99 02 F6 | 	mov	local02, arg03
01a3c     49 9B 02 F6 | 	mov	local03, arg04
01a40                 | '     stop() ' restart driver if required
01a40     5C 01 B0 FD | 	call	#_psram_spin2_stop
01a44     00 96 0E F2 | 	cmp	local01, #0 wz
01a48     14 96 06 AB |  if_e	rdlong	local01, #20
01a4c     4B 8F 52 F6 | 	abs	arg02, local01 wc
01a50     A1 07 00 FF 
01a54     40 8E 16 FD | 	qdiv	arg02, ##1000000
01a58                 | ' 
01a58                 | '     ' use current frequency if none specified
01a58                 | ' 
01a58                 | '     if freq == 0 
01a58                 | '         freq := clkfreq 
01a58                 | ' 
01a58                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
01a58                 | ' 
01a58                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
01a58                 | '     if burst < 0
01a58                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
01a58     18 8E 62 FD | 	getqx	arg02
01a5c     47 93 82 F6 | 	negc	arg04, arg02
01a60     03 92 66 F0 | 	shl	arg04, #3
01a64     84 92 86 F1 | 	sub	arg04, #132
01a68     04 92 46 F0 | 	shr	arg04, #4
01a6c     04 92 66 F0 | 	shl	arg04, #4
01a70     00 92 56 F2 | 	cmps	arg04, #0 wc
01a74     0E 76 66 C6 |  if_b	neg	result1, #14
01a78     18 01 90 CD |  if_b	jmp	#LR__0134
01a7c                 | ' 
01a7c                 | '     ' compute the input delay
01a7c                 | ' 
01a7c                 | '     if delay <= 0
01a7c     01 98 56 F2 | 	cmps	local02, #1 wc
01a80     10 00 90 3D |  if_ae	jmp	#LR__0130
01a84                 | '         delay := lookupDelay(freq)
01a84     4B 8D 02 F6 | 	mov	arg01, local01
01a88     C0 04 B0 FD | 	call	#_psram_spin2_lookupDelay
01a8c     3B 99 02 F6 | 	mov	local02, result1
01a90     04 00 90 FD | 	jmp	#LR__0131
01a94                 | LR__0130
01a94                 | '     else
01a94                 | '         delay <#= $f ' limit to 15
01a94     0F 98 66 F3 | 	fles	local02, #15
01a98                 | LR__0131
01a98                 | ' 
01a98                 | '     ' create our lock
01a98                 | ' 
01a98                 | '     driverlock := LOCKNEW()  
01a98     00 76 06 F6 | 	mov	result1, #0
01a9c     04 76 62 FD | 	locknew	result1
01aa0     04 71 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01aa4     38 77 62 FC | 	wrlong	result1, ptr__psram_spin2_dat__
01aa8                 | '     if driverlock == -1
01aa8     04 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01aac     FF FF 7F FF 
01ab0     FF 77 0E F2 | 	cmp	result1, ##-1 wz
01ab4                 | '         return ERR_NO_LOCK
01ab4     1A 76 66 A6 |  if_e	neg	result1, #26
01ab8     D8 00 90 AD |  if_e	jmp	#LR__0134
01abc                 | ' 
01abc                 | '     ' patch in the proper data and HUB addresses to the startup structure
01abc                 | ' 
01abc                 | '     long[@startupData][0]:=clkfreq
01abc     14 96 06 FB | 	rdlong	local01, #20
01ac0     28 71 06 F1 | 	add	ptr__psram_spin2_dat__, #296
01ac4     38 97 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
01ac8                 | ' '    long[@startupData][1]:=$1000_0000
01ac8                 | '     long[@startupData][5]:=@deviceData
01ac8     38 97 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01acc     20 96 06 F1 | 	add	local01, #32
01ad0     38 8F 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
01ad4     14 8E 06 F1 | 	add	arg02, #20
01ad8     47 97 62 FC | 	wrlong	local01, arg02
01adc                 | '     long[@startupData][6]:=@qosData
01adc     38 97 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01ae0     A0 96 06 F1 | 	add	local01, #160
01ae4     38 8F 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
01ae8     18 8E 06 F1 | 	add	arg02, #24
01aec     47 97 62 FC | 	wrlong	local01, arg02
01af0                 | '     long[@startupData][7]:=$7FF00
01af0     38 97 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
01af4     1C 96 06 F1 | 	add	local01, #28
01af8     FF 03 80 FF 
01afc     4B 01 6A FC | 	wrlong	##524032, local01
01b00                 | ' 
01b00                 | '     ' setup some default bank and QoS parameter values
01b00                 | ' 
01b00                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
01b00     20 70 06 F1 | 	add	ptr__psram_spin2_dat__, #32
01b04     38 8D 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
01b08     48 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #328
01b0c     10 92 66 F0 | 	shl	arg04, #16
01b10     0C 98 66 F0 | 	shl	local02, #12
01b14     4C 93 42 F5 | 	or	arg04, local02
01b18     18 92 46 F5 | 	or	arg04, #24
01b1c     49 8F 02 F6 | 	mov	arg02, arg04
01b20     02 90 06 F6 | 	mov	arg03, #2
01b24     E0 00 A0 FD | 	call	#\builtin_longfill_
01b28                 | '     longfill(@qosData, $FFFF0000, 8)
01b28     38 8D 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
01b2c     C8 8D 06 F1 | 	add	arg01, #456
01b30     07 90 06 F6 | 	mov	arg03, #7
01b34     28 90 62 FD | 	setq	arg03
01b38     80 FF FF FF 
01b3c     46 01 68 FC | 	wrlong	##-65536, arg01
01b40                 | ' 
01b40                 | '     ' get the address of the PSRAM memory driver so we can start it
01b40                 | ' 
01b40                 | '     driverAddr:= driver.getDriverAddr()
01b40                 | '     return @driver_start
01b40     37 8F 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
01b44     20 8E 06 F1 | 	add	arg02, #32
01b48                 | ' 
01b48                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
01b48                 | ' 
01b48                 | '     if desiredcog < 0
01b48     00 9A 56 F2 | 	cmps	local03, #0 wc
01b4c                 | '         desiredcog := NEWCOG
01b4c     10 9A 06 C6 |  if_b	mov	local03, #16
01b50                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
01b50     38 91 02 F6 | 	mov	arg03, ptr__psram_spin2_dat__
01b54     28 91 06 F1 | 	add	arg03, #296
01b58     4D 9D 02 F6 | 	mov	local04, local03
01b5c     28 90 62 FD | 	setq	arg03
01b60     47 9D F2 FC | 	coginit	local04, arg02 wc
01b64     01 9C 66 C6 |  if_b	neg	local04, #1
01b68     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01b6c     38 9D 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
01b70     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01b74     D7 08 48 FB | 	callpa	#(@LR__0133-@LR__0132)>>2,fcache_load_ptr_
01b78                 | '     repeat until long[@startupData] == 0 
01b78                 | LR__0132
01b78     38 9D 02 F6 | 	mov	local04, ptr__psram_spin2_dat__
01b7c     28 9D 06 F1 | 	add	local04, #296
01b80     4E 9D 0A FB | 	rdlong	local04, local04 wz
01b84     F0 FF 9F 5D |  if_ne	jmp	#LR__0132
01b88                 | LR__0133
01b88                 | ' 
01b88                 | '     return drivercog
01b88     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01b8c     38 77 02 FB | 	rdlong	result1, ptr__psram_spin2_dat__
01b90     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01b94                 | LR__0134
01b94     E7 F0 03 F6 | 	mov	ptra, fp
01b98     F2 00 A0 FD | 	call	#popregs_
01b9c                 | _psram_spin2_startx_ret
01b9c     2D 00 64 FD | 	ret
01ba0                 | 
01ba0                 | ' 
01ba0                 | ' '..............................................................................
01ba0                 | ' 
01ba0                 | ' {{
01ba0                 | ' }}
01ba0                 | ' PUB stop() : i
01ba0                 | _psram_spin2_stop
01ba0     00 7C 06 F6 | 	mov	_var01, #0
01ba4                 | '     if drivercog <> -1
01ba4     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01ba8     38 8D 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01bac     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01bb0     FF FF 7F FF 
01bb4     FF 8D 0E F2 | 	cmp	arg01, ##-1 wz
01bb8     70 00 90 AD |  if_e	jmp	#LR__0143
01bbc                 | '         cogstop(drivercog) ' a rather brutal stop
01bbc     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01bc0     38 8D 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01bc4     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01bc8     03 8C 62 FD | 	cogstop	arg01
01bcc     D7 26 48 FB | 	callpa	#(@LR__0142-@LR__0140)>>2,fcache_load_ptr_
01bd0                 | '         repeat i from 0 to 7
01bd0                 | LR__0140
01bd0                 | '             if long[$7FF00][i*3] < 0
01bd0     3E 77 02 F6 | 	mov	result1, _var01
01bd4     01 76 66 F0 | 	shl	result1, #1
01bd8     3E 77 02 F1 | 	add	result1, _var01
01bdc     02 76 66 F0 | 	shl	result1, #2
01be0     FF 03 00 FF 
01be4     00 77 06 F1 | 	add	result1, ##524032
01be8     3B 77 02 FB | 	rdlong	result1, result1
01bec     00 76 56 F2 | 	cmps	result1, #0 wc
01bf0     1C 00 90 3D |  if_ae	jmp	#LR__0141
01bf4                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
01bf4     3E 77 02 F6 | 	mov	result1, _var01
01bf8     01 76 66 F0 | 	shl	result1, #1
01bfc     3E 77 02 F1 | 	add	result1, _var01
01c00     02 76 66 F0 | 	shl	result1, #2
01c04     FF 03 00 FF 
01c08     00 77 06 F1 | 	add	result1, ##524032
01c0c     3B 21 68 FC | 	wrlong	#16, result1
01c10                 | LR__0141
01c10     01 7C 06 F1 | 	add	_var01, #1
01c14     08 7C 56 F2 | 	cmps	_var01, #8 wc
01c18     B4 FF 9F CD |  if_b	jmp	#LR__0140
01c1c                 | LR__0142
01c1c                 | '         drivercog := -1
01c1c     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01c20     FF FF FF FF 
01c24     38 FF 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
01c28     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01c2c                 | LR__0143
01c2c                 | '     if driverlock <> -1
01c2c     04 71 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01c30     38 7F 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
01c34     04 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01c38     FF FF 7F FF 
01c3c     FF 7F 0E F2 | 	cmp	_var02, ##-1 wz
01c40                 | '         LOCKRET(driverlock)
01c40     04 71 06 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
01c44     38 8D 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
01c48     05 8C 62 5D |  if_ne	lockret	arg01
01c4c                 | '         driverlock := -1
01c4c     FF FF FF 5F 
01c50     38 FF 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
01c54     04 71 86 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
01c58     3E 77 02 F6 | 	mov	result1, _var01
01c5c                 | _psram_spin2_stop_ret
01c5c     2D 00 64 FD | 	ret
01c60                 | 
01c60                 | ' 
01c60                 | ' '..............................................................................
01c60                 | ' 
01c60                 | ' {{
01c60                 | ' }}
01c60                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
01c60                 | _psram_spin2_read1
01c60                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
01c60                 | '     if drivercog == -1 ' driver must be running
01c60     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01c64     38 7D 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
01c68     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01c6c     FF FF 7F FF 
01c70     FF 7D 0E F2 | 	cmp	_var01, ##-1 wz
01c74                 | '         return ERR_INACTIVE
01c74     0F 76 66 A6 |  if_e	neg	result1, #15
01c78     7C 00 90 AD |  if_e	jmp	#LR__0151
01c7c                 | '     if count == 0 ' don't even bother reading
01c7c     00 90 0E F2 | 	cmp	arg03, #0 wz
01c80                 | '         return 0
01c80     00 76 06 A6 |  if_e	mov	result1, #0
01c84     70 00 90 AD |  if_e	jmp	#LR__0151
01c88                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
01c88     00 76 06 F6 | 	mov	result1, #0
01c8c     01 76 62 FD | 	cogid	result1
01c90     3B 7D 02 F6 | 	mov	_var01, result1
01c94     01 7C 66 F0 | 	shl	_var01, #1
01c98     3B 7D 02 F1 | 	add	_var01, result1
01c9c     02 7C 66 F0 | 	shl	_var01, #2
01ca0     FF 03 00 FF 
01ca4     00 7F 06 F6 | 	mov	_var02, ##524032
01ca8     3E 7F 02 F1 | 	add	_var02, _var01
01cac                 | '     if long[mailbox] < 0
01cac     3F 7D 02 FB | 	rdlong	_var01, _var02
01cb0     00 7C 56 F2 | 	cmps	_var01, #0 wc
01cb4                 | '         return ERR_MAILBOX_BUSY
01cb4     1C 76 66 C6 |  if_b	neg	result1, #28
01cb8     3C 00 90 CD |  if_b	jmp	#LR__0151
01cbc                 | '     long[mailbox][2] := count
01cbc     08 7E 06 F1 | 	add	_var02, #8
01cc0     3F 91 62 FC | 	wrlong	arg03, _var02
01cc4                 | '     long[mailbox][1] := dstHubAddr
01cc4     04 7E 86 F1 | 	sub	_var02, #4
01cc8     3F 8D 62 FC | 	wrlong	arg01, _var02
01ccc     04 7E 86 F1 | 	sub	_var02, #4
01cd0                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
01cd0     47 81 02 F6 | 	mov	_var03, arg02
01cd4     D9 80 06 F4 | 	bitl	_var03, #217
01cd8     00 00 58 FF 
01cdc     00 7C 06 F6 | 	mov	_var01, ##-1342177280
01ce0     40 7D 02 F1 | 	add	_var01, _var03
01ce4     3F 7D 62 FC | 	wrlong	_var01, _var02
01ce8                 | '     repeat
01ce8                 | LR__0150
01ce8                 | '         result := long[mailbox]    
01ce8     3F 81 02 FB | 	rdlong	_var03, _var02
01cec     00 80 56 F2 | 	cmps	_var03, #0 wc
01cf0     F4 FF 9F CD |  if_b	jmp	#LR__0150
01cf4                 | '     while result < 0   
01cf4                 | '     return -result                       'return success or error
01cf4     40 77 62 F6 | 	neg	result1, _var03
01cf8                 | LR__0151
01cf8                 | _psram_spin2_read1_ret
01cf8     2D 00 64 FD | 	ret
01cfc                 | 
01cfc                 | ' 
01cfc                 | ' '..............................................................................
01cfc                 | ' 
01cfc                 | ' {{
01cfc                 | ' }}
01cfc                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
01cfc                 | _psram_spin2_write
01cfc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
01cfc                 | '     if drivercog == -1 ' driver must be running
01cfc     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01d00     38 7D 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
01d04     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01d08     FF FF 7F FF 
01d0c     FF 7D 0E F2 | 	cmp	_var01, ##-1 wz
01d10                 | '         return ERR_INACTIVE
01d10     0F 76 66 A6 |  if_e	neg	result1, #15
01d14     7C 00 90 AD |  if_e	jmp	#LR__0161
01d18                 | '     if count == 0 ' don't even bother writing
01d18     00 90 0E F2 | 	cmp	arg03, #0 wz
01d1c                 | '         return 0
01d1c     00 76 06 A6 |  if_e	mov	result1, #0
01d20     70 00 90 AD |  if_e	jmp	#LR__0161
01d24                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
01d24     00 76 06 F6 | 	mov	result1, #0
01d28     01 76 62 FD | 	cogid	result1
01d2c     3B 7D 02 F6 | 	mov	_var01, result1
01d30     01 7C 66 F0 | 	shl	_var01, #1
01d34     3B 7D 02 F1 | 	add	_var01, result1
01d38     02 7C 66 F0 | 	shl	_var01, #2
01d3c     FF 03 00 FF 
01d40     00 7F 06 F6 | 	mov	_var02, ##524032
01d44     3E 7F 02 F1 | 	add	_var02, _var01
01d48                 | '     if long[mailbox] < 0
01d48     3F 7D 02 FB | 	rdlong	_var01, _var02
01d4c     00 7C 56 F2 | 	cmps	_var01, #0 wc
01d50                 | '         return ERR_MAILBOX_BUSY
01d50     1C 76 66 C6 |  if_b	neg	result1, #28
01d54     3C 00 90 CD |  if_b	jmp	#LR__0161
01d58                 | '     long[mailbox][2] := count
01d58     08 7E 06 F1 | 	add	_var02, #8
01d5c     3F 91 62 FC | 	wrlong	arg03, _var02
01d60                 | '     long[mailbox][1] := srcHubAddr
01d60     04 7E 86 F1 | 	sub	_var02, #4
01d64     3F 8D 62 FC | 	wrlong	arg01, _var02
01d68     04 7E 86 F1 | 	sub	_var02, #4
01d6c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
01d6c     47 81 02 F6 | 	mov	_var03, arg02
01d70     D9 80 06 F4 | 	bitl	_var03, #217
01d74     00 00 78 FF 
01d78     00 7C 06 F6 | 	mov	_var01, ##-268435456
01d7c     40 7D 02 F1 | 	add	_var01, _var03
01d80     3F 7D 62 FC | 	wrlong	_var01, _var02
01d84                 | '     repeat
01d84                 | LR__0160
01d84                 | '         result := long[mailbox]    
01d84     3F 81 02 FB | 	rdlong	_var03, _var02
01d88     00 80 56 F2 | 	cmps	_var03, #0 wc
01d8c     F4 FF 9F CD |  if_b	jmp	#LR__0160
01d90                 | '     while result < 0   
01d90                 | '     return -result                       'return success or error
01d90     40 77 62 F6 | 	neg	result1, _var03
01d94                 | LR__0161
01d94                 | _psram_spin2_write_ret
01d94     2D 00 64 FD | 	ret
01d98                 | 
01d98                 | ' 
01d98                 | ' ' generalized fill
01d98                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
01d98                 | _psram_spin2_fill
01d98     46 7D 02 F6 | 	mov	_var01, arg01
01d9c     47 7F 02 F6 | 	mov	_var02, arg02
01da0     48 81 02 F6 | 	mov	_var03, arg03
01da4     4A 83 02 F6 | 	mov	_var04, arg05
01da8                 | '     case datasize 
01da8     01 82 86 F1 | 	sub	_var04, #1
01dac     04 82 26 F3 | 	fle	_var04, #4
01db0     30 82 62 FD | 	jmprel	_var04
01db4                 | LR__0170
01db4     10 00 90 FD | 	jmp	#LR__0171
01db8     18 00 90 FD | 	jmp	#LR__0172
01dbc     2C 00 90 FD | 	jmp	#LR__0174
01dc0     1C 00 90 FD | 	jmp	#LR__0173
01dc4     24 00 90 FD | 	jmp	#LR__0174
01dc8                 | LR__0171
01dc8                 | '         1: req := driver.R_WRITEBYTE
01dc8     00 00 60 FF 
01dcc     00 84 06 F6 | 	mov	_var05, ##-1073741824
01dd0     20 00 90 FD | 	jmp	#LR__0175
01dd4                 | LR__0172
01dd4                 | '         2: req := driver.R_WRITEWORD
01dd4     00 00 68 FF 
01dd8     00 84 06 F6 | 	mov	_var05, ##-805306368
01ddc     14 00 90 FD | 	jmp	#LR__0175
01de0                 | LR__0173
01de0                 | '         4: req := driver.R_WRITELONG
01de0     00 00 70 FF 
01de4     00 84 06 F6 | 	mov	_var05, ##-536870912
01de8     08 00 90 FD | 	jmp	#LR__0175
01dec                 | LR__0174
01dec                 | '         other : return ERR_INVALID
01dec     06 76 66 F6 | 	neg	result1, #6
01df0     94 00 90 FD | 	jmp	#LR__0177
01df4                 | LR__0175
01df4                 | '     if count == 0   ' nothing to do
01df4     00 80 0E F2 | 	cmp	_var03, #0 wz
01df8                 | '         return 0
01df8     00 76 06 A6 |  if_e	mov	result1, #0
01dfc     88 00 90 AD |  if_e	jmp	#LR__0177
01e00                 | '     if drivercog == -1
01e00     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01e04     38 83 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
01e08     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01e0c     FF FF 7F FF 
01e10     FF 83 0E F2 | 	cmp	_var04, ##-1 wz
01e14                 | '         return ERR_INACTIVE
01e14     0F 76 66 A6 |  if_e	neg	result1, #15
01e18     6C 00 90 AD |  if_e	jmp	#LR__0177
01e1c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
01e1c     00 76 06 F6 | 	mov	result1, #0
01e20     01 76 62 FD | 	cogid	result1
01e24     3B 83 02 F6 | 	mov	_var04, result1
01e28     01 82 66 F0 | 	shl	_var04, #1
01e2c     3B 83 02 F1 | 	add	_var04, result1
01e30     02 82 66 F0 | 	shl	_var04, #2
01e34     FF 03 00 FF 
01e38     00 87 06 F6 | 	mov	_var06, ##524032
01e3c     41 87 02 F1 | 	add	_var06, _var04
01e40                 | '     if long[mailbox] < 0
01e40     43 83 02 FB | 	rdlong	_var04, _var06
01e44     00 82 56 F2 | 	cmps	_var04, #0 wc
01e48                 | '         return ERR_MAILBOX_BUSY
01e48     1C 76 66 C6 |  if_b	neg	result1, #28
01e4c     38 00 90 CD |  if_b	jmp	#LR__0177
01e50                 | '     long[mailbox][2] := count
01e50     08 86 06 F1 | 	add	_var06, #8
01e54     43 81 62 FC | 	wrlong	_var03, _var06
01e58                 | '     long[mailbox][1] := pattern
01e58     04 86 86 F1 | 	sub	_var06, #4
01e5c     43 7F 62 FC | 	wrlong	_var02, _var06
01e60     04 86 86 F1 | 	sub	_var06, #4
01e64                 | '     long[mailbox] := req + (addr & $1ffffff)
01e64     42 89 02 F6 | 	mov	_var07, _var05
01e68     3E 8B 02 F6 | 	mov	_var08, _var01
01e6c     D9 8A 06 F4 | 	bitl	_var08, #217
01e70     45 89 02 F1 | 	add	_var07, _var08
01e74     43 89 62 FC | 	wrlong	_var07, _var06
01e78                 | '     repeat
01e78                 | LR__0176
01e78                 | '         r := long[mailbox]
01e78     43 8B 02 FB | 	rdlong	_var08, _var06
01e7c     00 8A 56 F2 | 	cmps	_var08, #0 wc
01e80     F4 FF 9F CD |  if_b	jmp	#LR__0176
01e84                 | '     while r < 0
01e84                 | '     return -r                  ' return 0 for success or negated error code
01e84     45 77 62 F6 | 	neg	result1, _var08
01e88                 | LR__0177
01e88                 | _psram_spin2_fill_ret
01e88     2D 00 64 FD | 	ret
01e8c                 | 
01e8c                 | ' 
01e8c                 | ' '..............................................................................
01e8c                 | ' 
01e8c                 | ' {{
01e8c                 | ' }}
01e8c                 | ' PUB setQos(cog, qos) : result | mailbox
01e8c                 | _psram_spin2_setQos
01e8c     46 7D 02 F6 | 	mov	_var01, arg01
01e90                 | '     if drivercog == -1 ' driver must be running
01e90     00 71 06 F1 | 	add	ptr__psram_spin2_dat__, #256
01e94     38 7F 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
01e98     00 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #256
01e9c     FF FF 7F FF 
01ea0     FF 7F 0E F2 | 	cmp	_var02, ##-1 wz
01ea4                 | '         return ERR_INACTIVE
01ea4     0F 76 66 A6 |  if_e	neg	result1, #15
01ea8     9C 00 90 AD |  if_e	jmp	#LR__0184
01eac                 | '     if cog < 0 or cog > 7 ' enforce cog id range
01eac     00 7C 56 F2 | 	cmps	_var01, #0 wc
01eb0     08 00 90 CD |  if_b	jmp	#LR__0180
01eb4     08 7C 56 F2 | 	cmps	_var01, #8 wc
01eb8     08 00 90 CD |  if_b	jmp	#LR__0181
01ebc                 | LR__0180
01ebc                 | '         return ERR_INVALID
01ebc     06 76 66 F6 | 	neg	result1, #6
01ec0     84 00 90 FD | 	jmp	#LR__0184
01ec4                 | LR__0181
01ec4                 | '     long[@qosData][cog] := qos & !$1ff
01ec4     FF 8F 26 F5 | 	andn	arg02, #511
01ec8     C8 71 06 F1 | 	add	ptr__psram_spin2_dat__, #456
01ecc     02 7C 66 F0 | 	shl	_var01, #2
01ed0     38 7D 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
01ed4     3E 8F 62 FC | 	wrlong	arg02, _var01
01ed8                 | '     mailbox := $7FF00 + drivercog*12
01ed8     C8 70 86 F1 | 	sub	ptr__psram_spin2_dat__, #200
01edc     38 81 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
01ee0     40 83 02 F6 | 	mov	_var04, _var03
01ee4     01 82 66 F0 | 	shl	_var04, #1
01ee8     40 83 02 F1 | 	add	_var04, _var03
01eec     02 82 66 F0 | 	shl	_var04, #2
01ef0     FF 03 00 FF 
01ef4     00 85 06 F6 | 	mov	_var05, ##524032
01ef8     41 85 02 F1 | 	add	_var05, _var04
01efc                 | '     repeat until LOCKTRY(driverlock)
01efc     04 70 06 F1 | 	add	ptr__psram_spin2_dat__, #4
01f00                 | LR__0182
01f00     38 8D 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01f04     06 8C 72 FD | 	locktry	arg01 wc
01f08     F4 FF 9F 3D |  if_ae	jmp	#LR__0182
01f0c     04 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01f10                 | '     long[mailbox] := driver.R_CONFIG + cogid()
01f10     00 82 06 F6 | 	mov	_var04, #0
01f14     01 82 62 FD | 	cogid	_var04
01f18     00 00 78 FF 
01f1c     00 7E 06 F6 | 	mov	_var02, ##-268435456
01f20     41 7F 02 F1 | 	add	_var02, _var04
01f24     42 7F 62 FC | 	wrlong	_var02, _var05
01f28                 | '     repeat while long[mailbox] < 0
01f28                 | LR__0183
01f28     42 7F 02 FB | 	rdlong	_var02, _var05
01f2c     00 7E 56 F2 | 	cmps	_var02, #0 wc
01f30     F4 FF 9F CD |  if_b	jmp	#LR__0183
01f34                 | '     LOCKREL(driverlock)
01f34     04 71 06 F1 | 	add	ptr__psram_spin2_dat__, #260
01f38     38 8D 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
01f3c     04 71 86 F1 | 	sub	ptr__psram_spin2_dat__, #260
01f40     07 8C 72 FD | 	lockrel	arg01 wc
01f44     00 76 06 F6 | 	mov	result1, #0
01f48                 | LR__0184
01f48                 | _psram_spin2_setQos_ret
01f48     2D 00 64 FD | 	ret
01f4c                 | 
01f4c                 | ' 
01f4c                 | ' '..............................................................................
01f4c                 | ' 
01f4c                 | ' {{
01f4c                 | ' }}
01f4c                 | ' PRI lookupDelay(freq) : delay | profile
01f4c                 | _psram_spin2_lookupDelay
01f4c                 | '     profile := @delayTable
01f4c     38 7D 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
01f50     08 7D 06 F1 | 	add	_var01, #264
01f54                 | '     delay := long[profile][0]
01f54     3E 7F 02 FB | 	rdlong	_var02, _var01
01f58     D7 16 48 FB | 	callpa	#(@LR__0191-@LR__0190)>>2,fcache_load_ptr_
01f5c                 | '     repeat while long[profile][1] 
01f5c                 | LR__0190
01f5c     04 7C 06 F1 | 	add	_var01, #4
01f60     3E 77 0A FB | 	rdlong	result1, _var01 wz
01f64     04 7C 86 F1 | 	sub	_var01, #4
01f68     1C 00 90 AD |  if_e	jmp	#LR__0192
01f6c                 | '         if freq +< long[profile][1] 
01f6c     04 7C 06 F1 | 	add	_var01, #4
01f70     3E 77 02 FB | 	rdlong	result1, _var01
01f74     04 7C 86 F1 | 	sub	_var01, #4
01f78     3B 8D 12 F2 | 	cmp	arg01, result1 wc
01f7c                 | '             quit
01f7c                 | '         profile += 4
01f7c     04 7C 06 31 |  if_ae	add	_var01, #4
01f80                 | '         delay++
01f80     01 7E 06 31 |  if_ae	add	_var02, #1
01f84     D4 FF 9F 3D |  if_ae	jmp	#LR__0190
01f88                 | LR__0191
01f88                 | LR__0192
01f88     3F 77 02 F6 | 	mov	result1, _var02
01f8c                 | _psram_spin2_lookupDelay_ret
01f8c     2D 00 64 FD | 	ret
01f90                 | 
01f90                 | ' 
01f90                 | ' PUB start() : r
01f90                 | _usbnew_spin2_start
01f90     00 7C 06 F6 | 	mov	_var01, #0
01f94                 | '   ifnot driver_cog
01f94     15 00 00 FF 
01f98     87 72 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##10887
01f9c     39 7F CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
01fa0     15 00 00 FF 
01fa4     87 72 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10887
01fa8     38 00 90 5D |  if_ne	jmp	#LR__0200
01fac                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
01fac     39 8F 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
01fb0     10 7C 06 F6 | 	mov	_var01, #16
01fb4     00 90 06 F6 | 	mov	arg03, #0
01fb8     28 90 62 FD | 	setq	arg03
01fbc     47 7D F2 FC | 	coginit	_var01, arg02 wc
01fc0     01 7C 66 C6 |  if_b	neg	_var01, #1
01fc4                 | '     if r >= 0
01fc4     00 7C 56 F2 | 	cmps	_var01, #0 wc
01fc8                 | '       driver_cog := r+1
01fc8     3E 7F 02 36 |  if_ae	mov	_var02, _var01
01fcc     01 7E 06 31 |  if_ae	add	_var02, #1
01fd0     15 00 00 3F 
01fd4     87 72 06 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10887
01fd8     39 7F 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
01fdc     15 00 00 3F 
01fe0     87 72 86 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10887
01fe4                 | LR__0200
01fe4     3E 77 02 F6 | 	mov	result1, _var01
01fe8                 | _usbnew_spin2_start_ret
01fe8     2D 00 64 FD | 	ret
01fec                 | 
01fec                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
01fec                 | ' 
01fec                 | ' '' Return key event from buffer if there is one
01fec                 | ' PUB get_key() : r | tail
01fec                 | _usbnew_spin2_get_key
01fec                 | '   tail := keyq_tail
01fec     0F 00 00 FF 
01ff0     D5 72 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
01ff4     39 7D C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
01ff8                 | '   if keyq_head == tail
01ff8     01 72 86 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
01ffc     39 7F C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
02000     0F 00 00 FF 
02004     D4 72 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7892
02008     3E 7F 0A F2 | 	cmp	_var02, _var01 wz
0200c                 | '     return 0 ' No event
0200c     00 76 06 A6 |  if_e	mov	result1, #0
02010     3C 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
02014                 | '   r := keyq_data[tail]
02014     3E 7F 02 F6 | 	mov	_var02, _var01
02018     02 7E 66 F0 | 	shl	_var02, #2
0201c     39 77 02 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
02020     0F 00 00 FF 
02024     D6 76 06 F1 | 	add	result1, ##7894
02028     3B 7F 02 F1 | 	add	_var02, result1
0202c     3F 77 02 FB | 	rdlong	result1, _var02
02030                 | '   if ++tail == KEYQUEUE_SIZE
02030     01 7C 06 F1 | 	add	_var01, #1
02034     80 7C 0E F2 | 	cmp	_var01, #128 wz
02038                 | '     tail := 0
02038     00 7C 06 A6 |  if_e	mov	_var01, #0
0203c                 | '   keyq_tail := tail
0203c     0F 00 00 FF 
02040     D5 72 06 F1 | 	add	ptr__usbnew_spin2_dat__, ##7893
02044     39 7D 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
02048     0F 00 00 FF 
0204c     D5 72 86 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7893
02050                 | _usbnew_spin2_get_key_ret
02050     2D 00 64 FD | 	ret
02054                 | 
02054                 | _life_b_program
02054     09 CA 05 F6 | 	mov	COUNT_, #9
02058     E8 00 A0 FD | 	call	#pushregs_
0205c     00 96 06 F6 | 	mov	local01, #0
02060     2F 8D 02 F6 | 	mov	arg01, __sendreg
02064     00 8E 06 F6 | 	mov	arg02, #0
02068     E0 4E B0 FD | 	call	#__system___funcptr_cmp
0206c     00 76 0E F2 | 	cmp	result1, #0 wz
02070     33 5F 02 A6 |  if_e	mov	__sendreg, objptr
02074     2E 8D 02 F6 | 	mov	arg01, __recvreg
02078     00 8E 06 F6 | 	mov	arg02, #0
0207c     CC 4E B0 FD | 	call	#__system___funcptr_cmp
02080     00 76 0E F2 | 	cmp	result1, #0 wz
02084     33 5D 02 A6 |  if_e	mov	__recvreg, objptr
02088     14 8E C6 A9 |  if_e	decod	arg02, #20
0208c     14 5C 26 A4 |  if_e	bith	__recvreg, #20
02090     4B 77 02 F6 | 	mov	result1, local01
02094     33 77 02 F1 | 	add	result1, objptr
02098     4B 8D 02 F6 | 	mov	arg01, local01
0209c     33 8D 02 F1 | 	add	arg01, objptr
020a0     46 8D C2 FA | 	rdbyte	arg01, arg01
020a4     01 8C 06 F1 | 	add	arg01, #1
020a8     3B 8D 42 FC | 	wrbyte	arg01, result1
020ac     02 96 06 F1 | 	add	local01, #2
020b0     0E 96 46 F7 | 	zerox	local01, #14
020b4     4B 99 02 F6 | 	mov	local02, local01
020b8     33 99 02 F1 | 	add	local02, objptr
020bc     4B 9B 02 F6 | 	mov	local03, local01
020c0     33 9B 02 F1 | 	add	local03, objptr
020c4     4D 9D C2 FA | 	rdbyte	local04, local03
020c8     04 9C 06 F1 | 	add	local04, #4
020cc     4C 9D 42 FC | 	wrbyte	local04, local02
020d0     4B 9F 02 F6 | 	mov	local05, local01
020d4     33 9F 02 F1 | 	add	local05, objptr
020d8     4F A1 CA FA | 	rdbyte	local06, local05 wz
020dc     5C 00 90 AD |  if_e	jmp	#LR__0212
020e0     D7 2C 48 FB | 	callpa	#(@LR__0211-@LR__0210)>>2,fcache_load_ptr_
020e4                 | LR__0210
020e4     01 96 86 F1 | 	sub	local01, #1
020e8     0E 96 46 F7 | 	zerox	local01, #14
020ec     4B 99 02 F6 | 	mov	local02, local01
020f0     33 99 02 F1 | 	add	local02, objptr
020f4     4B 9B 02 F6 | 	mov	local03, local01
020f8     33 9B 02 F1 | 	add	local03, objptr
020fc     4D 9D C2 FA | 	rdbyte	local04, local03
02100     04 9C 06 F1 | 	add	local04, #4
02104     4C 9D 42 FC | 	wrbyte	local04, local02
02108     01 96 06 F1 | 	add	local01, #1
0210c     0E 96 46 F7 | 	zerox	local01, #14
02110     4B 99 02 F6 | 	mov	local02, local01
02114     33 99 02 F1 | 	add	local02, objptr
02118     4B 9B 02 F6 | 	mov	local03, local01
0211c     33 9B 02 F1 | 	add	local03, objptr
02120     4D 9D C2 FA | 	rdbyte	local04, local03
02124     01 9C 86 F1 | 	sub	local04, #1
02128     4C 9D 42 FC | 	wrbyte	local04, local02
0212c     4B 9F 02 F6 | 	mov	local05, local01
02130     33 9F 02 F1 | 	add	local05, objptr
02134     4F A1 CA FA | 	rdbyte	local06, local05 wz
02138     A8 FF 9F 5D |  if_ne	jmp	#LR__0210
0213c                 | LR__0211
0213c                 | LR__0212
0213c     01 96 86 F1 | 	sub	local01, #1
02140     0E 96 46 F7 | 	zerox	local01, #14
02144     4B 9F 02 F6 | 	mov	local05, local01
02148     33 9F 02 F1 | 	add	local05, objptr
0214c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02150     5C 00 90 AD |  if_e	jmp	#LR__0215
02154     D7 2C 48 FB | 	callpa	#(@LR__0214-@LR__0213)>>2,fcache_load_ptr_
02158                 | LR__0213
02158     01 96 86 F1 | 	sub	local01, #1
0215c     0E 96 46 F7 | 	zerox	local01, #14
02160     4B 99 02 F6 | 	mov	local02, local01
02164     33 99 02 F1 | 	add	local02, objptr
02168     4B 9B 02 F6 | 	mov	local03, local01
0216c     33 9B 02 F1 | 	add	local03, objptr
02170     4D 9D C2 FA | 	rdbyte	local04, local03
02174     06 9C 06 F1 | 	add	local04, #6
02178     4C 9D 42 FC | 	wrbyte	local04, local02
0217c     01 96 06 F1 | 	add	local01, #1
02180     0E 96 46 F7 | 	zerox	local01, #14
02184     4B 99 02 F6 | 	mov	local02, local01
02188     33 99 02 F1 | 	add	local02, objptr
0218c     4B 9B 02 F6 | 	mov	local03, local01
02190     33 9B 02 F1 | 	add	local03, objptr
02194     4D 9D C2 FA | 	rdbyte	local04, local03
02198     01 9C 86 F1 | 	sub	local04, #1
0219c     4C 9D 42 FC | 	wrbyte	local04, local02
021a0     4B 9F 02 F6 | 	mov	local05, local01
021a4     33 9F 02 F1 | 	add	local05, objptr
021a8     4F A1 CA FA | 	rdbyte	local06, local05 wz
021ac     A8 FF 9F 5D |  if_ne	jmp	#LR__0213
021b0                 | LR__0214
021b0                 | LR__0215
021b0     4B 99 02 F6 | 	mov	local02, local01
021b4     33 99 02 F1 | 	add	local02, objptr
021b8     4B 9B 02 F6 | 	mov	local03, local01
021bc     33 9B 02 F1 | 	add	local03, objptr
021c0     4D 9D C2 FA | 	rdbyte	local04, local03
021c4     01 9C 06 F1 | 	add	local04, #1
021c8     4C 9D 42 FC | 	wrbyte	local04, local02
021cc     4B 9F 02 F6 | 	mov	local05, local01
021d0     33 9F 02 F1 | 	add	local05, objptr
021d4     4F A1 CA FA | 	rdbyte	local06, local05 wz
021d8     E8 4A 90 AD |  if_e	jmp	#LR__0637
021dc                 | LR__0216
021dc     01 96 86 F1 | 	sub	local01, #1
021e0     0E 96 46 F7 | 	zerox	local01, #14
021e4     4B 9F 02 F6 | 	mov	local05, local01
021e8     33 9F 02 F1 | 	add	local05, objptr
021ec     4F A1 CA FA | 	rdbyte	local06, local05 wz
021f0     5C 00 90 AD |  if_e	jmp	#LR__0219
021f4     D7 2C 48 FB | 	callpa	#(@LR__0218-@LR__0217)>>2,fcache_load_ptr_
021f8                 | LR__0217
021f8     04 96 06 F1 | 	add	local01, #4
021fc     0E 96 46 F7 | 	zerox	local01, #14
02200     4B 99 02 F6 | 	mov	local02, local01
02204     33 99 02 F1 | 	add	local02, objptr
02208     4B 9B 02 F6 | 	mov	local03, local01
0220c     33 9B 02 F1 | 	add	local03, objptr
02210     4D 9D C2 FA | 	rdbyte	local04, local03
02214     01 9C 06 F1 | 	add	local04, #1
02218     4C 9D 42 FC | 	wrbyte	local04, local02
0221c     04 96 86 F1 | 	sub	local01, #4
02220     0E 96 46 F7 | 	zerox	local01, #14
02224     4B 99 02 F6 | 	mov	local02, local01
02228     33 99 02 F1 | 	add	local02, objptr
0222c     4B 9B 02 F6 | 	mov	local03, local01
02230     33 9B 02 F1 | 	add	local03, objptr
02234     4D 9D C2 FA | 	rdbyte	local04, local03
02238     01 9C 86 F1 | 	sub	local04, #1
0223c     4C 9D 42 FC | 	wrbyte	local04, local02
02240     4B 9F 02 F6 | 	mov	local05, local01
02244     33 9F 02 F1 | 	add	local05, objptr
02248     4F A1 CA FA | 	rdbyte	local06, local05 wz
0224c     A8 FF 9F 5D |  if_ne	jmp	#LR__0217
02250                 | LR__0218
02250                 | LR__0219
02250     04 96 06 F1 | 	add	local01, #4
02254     0E 96 46 F7 | 	zerox	local01, #14
02258     4B 9F 02 F6 | 	mov	local05, local01
0225c     33 9F 02 F1 | 	add	local05, objptr
02260     4F A1 CA FA | 	rdbyte	local06, local05 wz
02264     80 00 90 AD |  if_e	jmp	#LR__0222
02268     D7 3E 48 FB | 	callpa	#(@LR__0221-@LR__0220)>>2,fcache_load_ptr_
0226c                 | LR__0220
0226c     04 96 86 F1 | 	sub	local01, #4
02270     0E 96 46 F7 | 	zerox	local01, #14
02274     4B 99 02 F6 | 	mov	local02, local01
02278     33 99 02 F1 | 	add	local02, objptr
0227c     4B 9B 02 F6 | 	mov	local03, local01
02280     33 9B 02 F1 | 	add	local03, objptr
02284     4D 9D C2 FA | 	rdbyte	local04, local03
02288     01 9C 06 F1 | 	add	local04, #1
0228c     4C 9D 42 FC | 	wrbyte	local04, local02
02290     06 96 06 F1 | 	add	local01, #6
02294     0E 96 46 F7 | 	zerox	local01, #14
02298     4B 99 02 F6 | 	mov	local02, local01
0229c     33 99 02 F1 | 	add	local02, objptr
022a0     4B 9B 02 F6 | 	mov	local03, local01
022a4     33 9B 02 F1 | 	add	local03, objptr
022a8     4D 9D C2 FA | 	rdbyte	local04, local03
022ac     01 9C 06 F1 | 	add	local04, #1
022b0     4C 9D 42 FC | 	wrbyte	local04, local02
022b4     02 96 86 F1 | 	sub	local01, #2
022b8     0E 96 46 F7 | 	zerox	local01, #14
022bc     4B 99 02 F6 | 	mov	local02, local01
022c0     33 99 02 F1 | 	add	local02, objptr
022c4     4B 9B 02 F6 | 	mov	local03, local01
022c8     33 9B 02 F1 | 	add	local03, objptr
022cc     4D 9D C2 FA | 	rdbyte	local04, local03
022d0     01 9C 86 F1 | 	sub	local04, #1
022d4     4C 9D 42 FC | 	wrbyte	local04, local02
022d8     4B 9F 02 F6 | 	mov	local05, local01
022dc     33 9F 02 F1 | 	add	local05, objptr
022e0     4F A1 CA FA | 	rdbyte	local06, local05 wz
022e4     84 FF 9F 5D |  if_ne	jmp	#LR__0220
022e8                 | LR__0221
022e8                 | LR__0222
022e8     01 96 86 F1 | 	sub	local01, #1
022ec     0E 96 46 F7 | 	zerox	local01, #14
022f0     4B 99 02 F6 | 	mov	local02, local01
022f4     33 99 02 F1 | 	add	local02, objptr
022f8     4B 9B 02 F6 | 	mov	local03, local01
022fc     33 9B 02 F1 | 	add	local03, objptr
02300     4D 9D C2 FA | 	rdbyte	local04, local03
02304     04 9C 06 F1 | 	add	local04, #4
02308     4C 9D 42 FC | 	wrbyte	local04, local02
0230c     4B 9F 02 F6 | 	mov	local05, local01
02310     33 9F 02 F1 | 	add	local05, objptr
02314     4F A1 CA FA | 	rdbyte	local06, local05 wz
02318     5C 00 90 AD |  if_e	jmp	#LR__0225
0231c     D7 2C 48 FB | 	callpa	#(@LR__0224-@LR__0223)>>2,fcache_load_ptr_
02320                 | LR__0223
02320     01 96 06 F1 | 	add	local01, #1
02324     0E 96 46 F7 | 	zerox	local01, #14
02328     4B 99 02 F6 | 	mov	local02, local01
0232c     33 99 02 F1 | 	add	local02, objptr
02330     4B 9B 02 F6 | 	mov	local03, local01
02334     33 9B 02 F1 | 	add	local03, objptr
02338     4D 9D C2 FA | 	rdbyte	local04, local03
0233c     08 9C 06 F1 | 	add	local04, #8
02340     4C 9D 42 FC | 	wrbyte	local04, local02
02344     01 96 86 F1 | 	sub	local01, #1
02348     0E 96 46 F7 | 	zerox	local01, #14
0234c     4B 99 02 F6 | 	mov	local02, local01
02350     33 99 02 F1 | 	add	local02, objptr
02354     4B 9B 02 F6 | 	mov	local03, local01
02358     33 9B 02 F1 | 	add	local03, objptr
0235c     4D 9D C2 FA | 	rdbyte	local04, local03
02360     01 9C 86 F1 | 	sub	local04, #1
02364     4C 9D 42 FC | 	wrbyte	local04, local02
02368     4B 9F 02 F6 | 	mov	local05, local01
0236c     33 9F 02 F1 | 	add	local05, objptr
02370     4F A1 CA FA | 	rdbyte	local06, local05 wz
02374     A8 FF 9F 5D |  if_ne	jmp	#LR__0223
02378                 | LR__0224
02378                 | LR__0225
02378     01 96 06 F1 | 	add	local01, #1
0237c     0E 96 46 F7 | 	zerox	local01, #14
02380     2F 99 02 F6 | 	mov	local02, __sendreg
02384     2F 9F 02 F6 | 	mov	local05, __sendreg
02388     13 98 46 F7 | 	zerox	local02, #19
0238c     14 9E 46 F0 | 	shr	local05, #20
02390     02 9E 66 F0 | 	shl	local05, #2
02394     2D 9F 02 F1 | 	add	local05, __methods__
02398     4F 9F 02 FB | 	rdlong	local05, local05
0239c     4B A1 02 F6 | 	mov	local06, local01
023a0     33 A1 02 F1 | 	add	local06, objptr
023a4     50 8D C2 FA | 	rdbyte	arg01, local06
023a8     33 A1 02 F6 | 	mov	local06, objptr
023ac     4C 67 02 F6 | 	mov	objptr, local02
023b0     2D 9E 62 FD | 	call	local05
023b4     50 67 02 F6 | 	mov	objptr, local06
023b8     4B 9F 02 F6 | 	mov	local05, local01
023bc     33 9F 02 F1 | 	add	local05, objptr
023c0     4F A1 CA FA | 	rdbyte	local06, local05 wz
023c4     30 00 90 AD |  if_e	jmp	#LR__0228
023c8     D7 16 48 FB | 	callpa	#(@LR__0227-@LR__0226)>>2,fcache_load_ptr_
023cc                 | LR__0226
023cc     4B 99 02 F6 | 	mov	local02, local01
023d0     33 99 02 F1 | 	add	local02, objptr
023d4     4B 9B 02 F6 | 	mov	local03, local01
023d8     33 9B 02 F1 | 	add	local03, objptr
023dc     4D 9D C2 FA | 	rdbyte	local04, local03
023e0     01 9C 86 F1 | 	sub	local04, #1
023e4     4C 9D 42 FC | 	wrbyte	local04, local02
023e8     4B 9F 02 F6 | 	mov	local05, local01
023ec     33 9F 02 F1 | 	add	local05, objptr
023f0     4F A1 CA FA | 	rdbyte	local06, local05 wz
023f4     D4 FF 9F 5D |  if_ne	jmp	#LR__0226
023f8                 | LR__0227
023f8                 | LR__0228
023f8     01 96 86 F1 | 	sub	local01, #1
023fc     0E 96 46 F7 | 	zerox	local01, #14
02400     4B 99 02 F6 | 	mov	local02, local01
02404     33 99 02 F1 | 	add	local02, objptr
02408     4B 9B 02 F6 | 	mov	local03, local01
0240c     33 9B 02 F1 | 	add	local03, objptr
02410     4D 9D C2 FA | 	rdbyte	local04, local03
02414     03 9C 06 F1 | 	add	local04, #3
02418     4C 9D 42 FC | 	wrbyte	local04, local02
0241c     4B 9F 02 F6 | 	mov	local05, local01
02420     33 9F 02 F1 | 	add	local05, objptr
02424     4F A1 CA FA | 	rdbyte	local06, local05 wz
02428     5C 00 90 AD |  if_e	jmp	#LR__0231
0242c     D7 2C 48 FB | 	callpa	#(@LR__0230-@LR__0229)>>2,fcache_load_ptr_
02430                 | LR__0229
02430     01 96 06 F1 | 	add	local01, #1
02434     0E 96 46 F7 | 	zerox	local01, #14
02438     4B 99 02 F6 | 	mov	local02, local01
0243c     33 99 02 F1 | 	add	local02, objptr
02440     4B 9B 02 F6 | 	mov	local03, local01
02444     33 9B 02 F1 | 	add	local03, objptr
02448     4D 9D C2 FA | 	rdbyte	local04, local03
0244c     03 9C 06 F1 | 	add	local04, #3
02450     4C 9D 42 FC | 	wrbyte	local04, local02
02454     01 96 86 F1 | 	sub	local01, #1
02458     0E 96 46 F7 | 	zerox	local01, #14
0245c     4B 99 02 F6 | 	mov	local02, local01
02460     33 99 02 F1 | 	add	local02, objptr
02464     4B 9B 02 F6 | 	mov	local03, local01
02468     33 9B 02 F1 | 	add	local03, objptr
0246c     4D 9D C2 FA | 	rdbyte	local04, local03
02470     01 9C 86 F1 | 	sub	local04, #1
02474     4C 9D 42 FC | 	wrbyte	local04, local02
02478     4B 9F 02 F6 | 	mov	local05, local01
0247c     33 9F 02 F1 | 	add	local05, objptr
02480     4F A1 CA FA | 	rdbyte	local06, local05 wz
02484     A8 FF 9F 5D |  if_ne	jmp	#LR__0229
02488                 | LR__0230
02488                 | LR__0231
02488     01 96 06 F1 | 	add	local01, #1
0248c     0E 96 46 F7 | 	zerox	local01, #14
02490     4B 99 02 F6 | 	mov	local02, local01
02494     33 99 02 F1 | 	add	local02, objptr
02498     4B 9B 02 F6 | 	mov	local03, local01
0249c     33 9B 02 F1 | 	add	local03, objptr
024a0     4D 9D C2 FA | 	rdbyte	local04, local03
024a4     01 9C 06 F1 | 	add	local04, #1
024a8     4C 9D 42 FC | 	wrbyte	local04, local02
024ac     4B 9F 02 F6 | 	mov	local05, local01
024b0     33 9F 02 F1 | 	add	local05, objptr
024b4     4F A1 CA FA | 	rdbyte	local06, local05 wz
024b8     90 00 90 AD |  if_e	jmp	#LR__0233
024bc                 | LR__0232
024bc     02 96 06 F1 | 	add	local01, #2
024c0     0E 96 46 F7 | 	zerox	local01, #14
024c4     2F 99 02 F6 | 	mov	local02, __sendreg
024c8     2F 9F 02 F6 | 	mov	local05, __sendreg
024cc     13 98 46 F7 | 	zerox	local02, #19
024d0     14 9E 46 F0 | 	shr	local05, #20
024d4     02 9E 66 F0 | 	shl	local05, #2
024d8     2D 9F 02 F1 | 	add	local05, __methods__
024dc     4F 9F 02 FB | 	rdlong	local05, local05
024e0     4B A1 02 F6 | 	mov	local06, local01
024e4     33 A1 02 F1 | 	add	local06, objptr
024e8     50 8D C2 FA | 	rdbyte	arg01, local06
024ec     33 A1 02 F6 | 	mov	local06, objptr
024f0     4C 67 02 F6 | 	mov	objptr, local02
024f4     2D 9E 62 FD | 	call	local05
024f8     50 67 02 F6 | 	mov	objptr, local06
024fc     4B 99 02 F6 | 	mov	local02, local01
02500     33 99 02 F1 | 	add	local02, objptr
02504     4B 9B 02 F6 | 	mov	local03, local01
02508     33 9B 02 F1 | 	add	local03, objptr
0250c     4D 9D C2 FA | 	rdbyte	local04, local03
02510     01 9C 06 F1 | 	add	local04, #1
02514     4C 9D 42 FC | 	wrbyte	local04, local02
02518     02 96 86 F1 | 	sub	local01, #2
0251c     0E 96 46 F7 | 	zerox	local01, #14
02520     4B 99 02 F6 | 	mov	local02, local01
02524     33 99 02 F1 | 	add	local02, objptr
02528     4B 9B 02 F6 | 	mov	local03, local01
0252c     33 9B 02 F1 | 	add	local03, objptr
02530     4D 9D C2 FA | 	rdbyte	local04, local03
02534     01 9C 86 F1 | 	sub	local04, #1
02538     4C 9D 42 FC | 	wrbyte	local04, local02
0253c     4B 9F 02 F6 | 	mov	local05, local01
02540     33 9F 02 F1 | 	add	local05, objptr
02544     4F A1 CA FA | 	rdbyte	local06, local05 wz
02548     70 FF 9F 5D |  if_ne	jmp	#LR__0232
0254c                 | LR__0233
0254c     02 96 06 F1 | 	add	local01, #2
02550     0E 96 46 F7 | 	zerox	local01, #14
02554     4B 9F 02 F6 | 	mov	local05, local01
02558     33 9F 02 F1 | 	add	local05, objptr
0255c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02560     30 00 90 AD |  if_e	jmp	#LR__0236
02564     D7 16 48 FB | 	callpa	#(@LR__0235-@LR__0234)>>2,fcache_load_ptr_
02568                 | LR__0234
02568     4B 99 02 F6 | 	mov	local02, local01
0256c     33 99 02 F1 | 	add	local02, objptr
02570     4B 9B 02 F6 | 	mov	local03, local01
02574     33 9B 02 F1 | 	add	local03, objptr
02578     4D 9D C2 FA | 	rdbyte	local04, local03
0257c     01 9C 86 F1 | 	sub	local04, #1
02580     4C 9D 42 FC | 	wrbyte	local04, local02
02584     4B 9F 02 F6 | 	mov	local05, local01
02588     33 9F 02 F1 | 	add	local05, objptr
0258c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02590     D4 FF 9F 5D |  if_ne	jmp	#LR__0234
02594                 | LR__0235
02594                 | LR__0236
02594     03 96 86 F1 | 	sub	local01, #3
02598     0E 96 46 F7 | 	zerox	local01, #14
0259c     4B 99 02 F6 | 	mov	local02, local01
025a0     33 99 02 F1 | 	add	local02, objptr
025a4     4B 9B 02 F6 | 	mov	local03, local01
025a8     33 9B 02 F1 | 	add	local03, objptr
025ac     4D 9D C2 FA | 	rdbyte	local04, local03
025b0     02 9C 06 F1 | 	add	local04, #2
025b4     4C 9D 42 FC | 	wrbyte	local04, local02
025b8     4B 9F 02 F6 | 	mov	local05, local01
025bc     33 9F 02 F1 | 	add	local05, objptr
025c0     4F A1 CA FA | 	rdbyte	local06, local05 wz
025c4     5C 00 90 AD |  if_e	jmp	#LR__0239
025c8     D7 2C 48 FB | 	callpa	#(@LR__0238-@LR__0237)>>2,fcache_load_ptr_
025cc                 | LR__0237
025cc     01 96 86 F1 | 	sub	local01, #1
025d0     0E 96 46 F7 | 	zerox	local01, #14
025d4     4B 99 02 F6 | 	mov	local02, local01
025d8     33 99 02 F1 | 	add	local02, objptr
025dc     4B 9B 02 F6 | 	mov	local03, local01
025e0     33 9B 02 F1 | 	add	local03, objptr
025e4     4D 9D C2 FA | 	rdbyte	local04, local03
025e8     05 9C 06 F1 | 	add	local04, #5
025ec     4C 9D 42 FC | 	wrbyte	local04, local02
025f0     01 96 06 F1 | 	add	local01, #1
025f4     0E 96 46 F7 | 	zerox	local01, #14
025f8     4B 99 02 F6 | 	mov	local02, local01
025fc     33 99 02 F1 | 	add	local02, objptr
02600     4B 9B 02 F6 | 	mov	local03, local01
02604     33 9B 02 F1 | 	add	local03, objptr
02608     4D 9D C2 FA | 	rdbyte	local04, local03
0260c     01 9C 86 F1 | 	sub	local04, #1
02610     4C 9D 42 FC | 	wrbyte	local04, local02
02614     4B 9F 02 F6 | 	mov	local05, local01
02618     33 9F 02 F1 | 	add	local05, objptr
0261c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02620     A8 FF 9F 5D |  if_ne	jmp	#LR__0237
02624                 | LR__0238
02624                 | LR__0239
02624     01 96 86 F1 | 	sub	local01, #1
02628     0E 96 46 F7 | 	zerox	local01, #14
0262c     2F 99 02 F6 | 	mov	local02, __sendreg
02630     2F 9F 02 F6 | 	mov	local05, __sendreg
02634     13 98 46 F7 | 	zerox	local02, #19
02638     14 9E 46 F0 | 	shr	local05, #20
0263c     02 9E 66 F0 | 	shl	local05, #2
02640     2D 9F 02 F1 | 	add	local05, __methods__
02644     4F 9F 02 FB | 	rdlong	local05, local05
02648     4B A1 02 F6 | 	mov	local06, local01
0264c     33 A1 02 F1 | 	add	local06, objptr
02650     50 8D C2 FA | 	rdbyte	arg01, local06
02654     33 A1 02 F6 | 	mov	local06, objptr
02658     4C 67 02 F6 | 	mov	objptr, local02
0265c     2D 9E 62 FD | 	call	local05
02660     50 67 02 F6 | 	mov	objptr, local06
02664     02 96 86 F1 | 	sub	local01, #2
02668     0E 96 46 F7 | 	zerox	local01, #14
0266c     4B 9F 02 F6 | 	mov	local05, local01
02670     33 9F 02 F1 | 	add	local05, objptr
02674     4F A1 CA FA | 	rdbyte	local06, local05 wz
02678     5C 00 90 AD |  if_e	jmp	#LR__0242
0267c     D7 2C 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
02680                 | LR__0240
02680     04 96 06 F1 | 	add	local01, #4
02684     0E 96 46 F7 | 	zerox	local01, #14
02688     4B 99 02 F6 | 	mov	local02, local01
0268c     33 99 02 F1 | 	add	local02, objptr
02690     4B 9B 02 F6 | 	mov	local03, local01
02694     33 9B 02 F1 | 	add	local03, objptr
02698     4D 9D C2 FA | 	rdbyte	local04, local03
0269c     01 9C 06 F1 | 	add	local04, #1
026a0     4C 9D 42 FC | 	wrbyte	local04, local02
026a4     04 96 86 F1 | 	sub	local01, #4
026a8     0E 96 46 F7 | 	zerox	local01, #14
026ac     4B 99 02 F6 | 	mov	local02, local01
026b0     33 99 02 F1 | 	add	local02, objptr
026b4     4B 9B 02 F6 | 	mov	local03, local01
026b8     33 9B 02 F1 | 	add	local03, objptr
026bc     4D 9D C2 FA | 	rdbyte	local04, local03
026c0     01 9C 86 F1 | 	sub	local04, #1
026c4     4C 9D 42 FC | 	wrbyte	local04, local02
026c8     4B 9F 02 F6 | 	mov	local05, local01
026cc     33 9F 02 F1 | 	add	local05, objptr
026d0     4F A1 CA FA | 	rdbyte	local06, local05 wz
026d4     A8 FF 9F 5D |  if_ne	jmp	#LR__0240
026d8                 | LR__0241
026d8                 | LR__0242
026d8     04 96 06 F1 | 	add	local01, #4
026dc     0E 96 46 F7 | 	zerox	local01, #14
026e0     4B 9F 02 F6 | 	mov	local05, local01
026e4     33 9F 02 F1 | 	add	local05, objptr
026e8     4F A1 CA FA | 	rdbyte	local06, local05 wz
026ec     80 00 90 AD |  if_e	jmp	#LR__0245
026f0     D7 3E 48 FB | 	callpa	#(@LR__0244-@LR__0243)>>2,fcache_load_ptr_
026f4                 | LR__0243
026f4     04 96 86 F1 | 	sub	local01, #4
026f8     0E 96 46 F7 | 	zerox	local01, #14
026fc     4B 99 02 F6 | 	mov	local02, local01
02700     33 99 02 F1 | 	add	local02, objptr
02704     4B 9B 02 F6 | 	mov	local03, local01
02708     33 9B 02 F1 | 	add	local03, objptr
0270c     4D 9D C2 FA | 	rdbyte	local04, local03
02710     01 9C 06 F1 | 	add	local04, #1
02714     4C 9D 42 FC | 	wrbyte	local04, local02
02718     06 96 06 F1 | 	add	local01, #6
0271c     0E 96 46 F7 | 	zerox	local01, #14
02720     4B 99 02 F6 | 	mov	local02, local01
02724     33 99 02 F1 | 	add	local02, objptr
02728     4B 9B 02 F6 | 	mov	local03, local01
0272c     33 9B 02 F1 | 	add	local03, objptr
02730     4D 9D C2 FA | 	rdbyte	local04, local03
02734     01 9C 06 F1 | 	add	local04, #1
02738     4C 9D 42 FC | 	wrbyte	local04, local02
0273c     02 96 86 F1 | 	sub	local01, #2
02740     0E 96 46 F7 | 	zerox	local01, #14
02744     4B 99 02 F6 | 	mov	local02, local01
02748     33 99 02 F1 | 	add	local02, objptr
0274c     4B 9B 02 F6 | 	mov	local03, local01
02750     33 9B 02 F1 | 	add	local03, objptr
02754     4D 9D C2 FA | 	rdbyte	local04, local03
02758     01 9C 86 F1 | 	sub	local04, #1
0275c     4C 9D 42 FC | 	wrbyte	local04, local02
02760     4B 9F 02 F6 | 	mov	local05, local01
02764     33 9F 02 F1 | 	add	local05, objptr
02768     4F A1 CA FA | 	rdbyte	local06, local05 wz
0276c     84 FF 9F 5D |  if_ne	jmp	#LR__0243
02770                 | LR__0244
02770                 | LR__0245
02770     02 96 86 F1 | 	sub	local01, #2
02774     0E 96 46 F7 | 	zerox	local01, #14
02778     4B 9F 02 F6 | 	mov	local05, local01
0277c     33 9F 02 F1 | 	add	local05, objptr
02780     4F A1 CA FA | 	rdbyte	local06, local05 wz
02784     C8 09 90 AD |  if_e	jmp	#LR__0299
02788                 | LR__0246
02788     04 96 06 F1 | 	add	local01, #4
0278c     0E 96 46 F7 | 	zerox	local01, #14
02790     2F 99 02 F6 | 	mov	local02, __sendreg
02794     2F 9F 02 F6 | 	mov	local05, __sendreg
02798     13 98 46 F7 | 	zerox	local02, #19
0279c     14 9E 46 F0 | 	shr	local05, #20
027a0     02 9E 66 F0 | 	shl	local05, #2
027a4     2D 9F 02 F1 | 	add	local05, __methods__
027a8     4F 9F 02 FB | 	rdlong	local05, local05
027ac     4B A1 02 F6 | 	mov	local06, local01
027b0     33 A3 02 F6 | 	mov	local07, objptr
027b4     33 A1 02 F1 | 	add	local06, objptr
027b8     50 8D C2 FA | 	rdbyte	arg01, local06
027bc     33 A1 02 F6 | 	mov	local06, objptr
027c0     4C 67 02 F6 | 	mov	objptr, local02
027c4     2D 9E 62 FD | 	call	local05
027c8     50 67 02 F6 | 	mov	objptr, local06
027cc     4B 99 02 F6 | 	mov	local02, local01
027d0     33 99 02 F1 | 	add	local02, objptr
027d4     4B 9B 02 F6 | 	mov	local03, local01
027d8     33 9B 02 F1 | 	add	local03, objptr
027dc     4D 9D C2 FA | 	rdbyte	local04, local03
027e0     01 9C 06 F1 | 	add	local04, #1
027e4     4C 9D 42 FC | 	wrbyte	local04, local02
027e8     03 96 86 F1 | 	sub	local01, #3
027ec     0E 96 46 F7 | 	zerox	local01, #14
027f0     4B 99 02 F6 | 	mov	local02, local01
027f4     33 99 02 F1 | 	add	local02, objptr
027f8     4B A5 02 F6 | 	mov	local08, local01
027fc     52 9B 02 F6 | 	mov	local03, local08
02800     33 A7 02 F6 | 	mov	local09, objptr
02804     33 9B 02 F1 | 	add	local03, objptr
02808     4D 9D C2 FA | 	rdbyte	local04, local03
0280c     0A 9C 06 F1 | 	add	local04, #10
02810     4C 9D 42 FC | 	wrbyte	local04, local02
02814     4B 9F 02 F6 | 	mov	local05, local01
02818     33 9F 02 F1 | 	add	local05, objptr
0281c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02820     64 08 90 AD |  if_e	jmp	#LR__0295
02824                 | LR__0247
02824     01 96 86 F1 | 	sub	local01, #1
02828     0E 96 46 F7 | 	zerox	local01, #14
0282c     4B 9F 02 F6 | 	mov	local05, local01
02830     33 9F 02 F1 | 	add	local05, objptr
02834     4F A1 CA FA | 	rdbyte	local06, local05 wz
02838     64 00 90 AD |  if_e	jmp	#LR__0250
0283c     D7 30 48 FB | 	callpa	#(@LR__0249-@LR__0248)>>2,fcache_load_ptr_
02840                 | LR__0248
02840     02 96 06 F1 | 	add	local01, #2
02844     0E 96 46 F7 | 	zerox	local01, #14
02848     4B 99 02 F6 | 	mov	local02, local01
0284c     33 99 02 F1 | 	add	local02, objptr
02850     4B 9B 02 F6 | 	mov	local03, local01
02854     33 9B 02 F1 | 	add	local03, objptr
02858     4D 9D C2 FA | 	rdbyte	local04, local03
0285c     01 9C 06 F1 | 	add	local04, #1
02860     4C 9D 42 FC | 	wrbyte	local04, local02
02864     02 96 86 F1 | 	sub	local01, #2
02868     0E 96 46 F7 | 	zerox	local01, #14
0286c     4B 99 02 F6 | 	mov	local02, local01
02870     33 99 02 F1 | 	add	local02, objptr
02874     4B A5 02 F6 | 	mov	local08, local01
02878     52 9B 02 F6 | 	mov	local03, local08
0287c     33 A7 02 F6 | 	mov	local09, objptr
02880     33 9B 02 F1 | 	add	local03, objptr
02884     4D 9D C2 FA | 	rdbyte	local04, local03
02888     01 9C 86 F1 | 	sub	local04, #1
0288c     4C 9D 42 FC | 	wrbyte	local04, local02
02890     4B 9F 02 F6 | 	mov	local05, local01
02894     33 9F 02 F1 | 	add	local05, objptr
02898     4F A1 CA FA | 	rdbyte	local06, local05 wz
0289c     A0 FF 9F 5D |  if_ne	jmp	#LR__0248
028a0                 | LR__0249
028a0                 | LR__0250
028a0     02 96 06 F1 | 	add	local01, #2
028a4     0E 96 46 F7 | 	zerox	local01, #14
028a8     4B 9F 02 F6 | 	mov	local05, local01
028ac     33 9F 02 F1 | 	add	local05, objptr
028b0     4F A1 CA FA | 	rdbyte	local06, local05 wz
028b4     88 00 90 AD |  if_e	jmp	#LR__0253
028b8     D7 42 48 FB | 	callpa	#(@LR__0252-@LR__0251)>>2,fcache_load_ptr_
028bc                 | LR__0251
028bc     02 96 86 F1 | 	sub	local01, #2
028c0     0E 96 46 F7 | 	zerox	local01, #14
028c4     4B 99 02 F6 | 	mov	local02, local01
028c8     33 99 02 F1 | 	add	local02, objptr
028cc     4B 9B 02 F6 | 	mov	local03, local01
028d0     33 9B 02 F1 | 	add	local03, objptr
028d4     4D 9D C2 FA | 	rdbyte	local04, local03
028d8     01 9C 06 F1 | 	add	local04, #1
028dc     4C 9D 42 FC | 	wrbyte	local04, local02
028e0     05 96 06 F1 | 	add	local01, #5
028e4     0E 96 46 F7 | 	zerox	local01, #14
028e8     4B 99 02 F6 | 	mov	local02, local01
028ec     33 99 02 F1 | 	add	local02, objptr
028f0     4B 9B 02 F6 | 	mov	local03, local01
028f4     33 9B 02 F1 | 	add	local03, objptr
028f8     4D 9D C2 FA | 	rdbyte	local04, local03
028fc     0B 9C 06 F1 | 	add	local04, #11
02900     4C 9D 42 FC | 	wrbyte	local04, local02
02904     03 96 86 F1 | 	sub	local01, #3
02908     0E 96 46 F7 | 	zerox	local01, #14
0290c     4B 99 02 F6 | 	mov	local02, local01
02910     33 99 02 F1 | 	add	local02, objptr
02914     4B A5 02 F6 | 	mov	local08, local01
02918     52 9B 02 F6 | 	mov	local03, local08
0291c     33 A7 02 F6 | 	mov	local09, objptr
02920     33 9B 02 F1 | 	add	local03, objptr
02924     4D 9D C2 FA | 	rdbyte	local04, local03
02928     01 9C 86 F1 | 	sub	local04, #1
0292c     4C 9D 42 FC | 	wrbyte	local04, local02
02930     4B 9F 02 F6 | 	mov	local05, local01
02934     33 9F 02 F1 | 	add	local05, objptr
02938     4F A1 CA FA | 	rdbyte	local06, local05 wz
0293c     7C FF 9F 5D |  if_ne	jmp	#LR__0251
02940                 | LR__0252
02940                 | LR__0253
02940     01 96 86 F1 | 	sub	local01, #1
02944     0E 96 46 F7 | 	zerox	local01, #14
02948     4B 9F 02 F6 | 	mov	local05, local01
0294c     33 9F 02 F1 | 	add	local05, objptr
02950     4F A1 CA FA | 	rdbyte	local06, local05 wz
02954     5C 00 90 AD |  if_e	jmp	#LR__0256
02958     D7 2C 48 FB | 	callpa	#(@LR__0255-@LR__0254)>>2,fcache_load_ptr_
0295c                 | LR__0254
0295c     01 96 06 F1 | 	add	local01, #1
02960     0E 96 46 F7 | 	zerox	local01, #14
02964     4B 99 02 F6 | 	mov	local02, local01
02968     33 99 02 F1 | 	add	local02, objptr
0296c     4B 9B 02 F6 | 	mov	local03, local01
02970     33 9B 02 F1 | 	add	local03, objptr
02974     4D 9D C2 FA | 	rdbyte	local04, local03
02978     01 9C 06 F1 | 	add	local04, #1
0297c     4C 9D 42 FC | 	wrbyte	local04, local02
02980     01 96 86 F1 | 	sub	local01, #1
02984     0E 96 46 F7 | 	zerox	local01, #14
02988     4B 99 02 F6 | 	mov	local02, local01
0298c     33 99 02 F1 | 	add	local02, objptr
02990     4B 9B 02 F6 | 	mov	local03, local01
02994     33 9B 02 F1 | 	add	local03, objptr
02998     4D 9D C2 FA | 	rdbyte	local04, local03
0299c     01 9C 86 F1 | 	sub	local04, #1
029a0     4C 9D 42 FC | 	wrbyte	local04, local02
029a4     4B 9F 02 F6 | 	mov	local05, local01
029a8     33 9F 02 F1 | 	add	local05, objptr
029ac     4F A1 CA FA | 	rdbyte	local06, local05 wz
029b0     A8 FF 9F 5D |  if_ne	jmp	#LR__0254
029b4                 | LR__0255
029b4                 | LR__0256
029b4     01 96 06 F1 | 	add	local01, #1
029b8     0E 96 46 F7 | 	zerox	local01, #14
029bc     4B 9F 02 F6 | 	mov	local05, local01
029c0     33 9F 02 F1 | 	add	local05, objptr
029c4     4F A1 CA FA | 	rdbyte	local06, local05 wz
029c8     80 00 90 AD |  if_e	jmp	#LR__0259
029cc     D7 3E 48 FB | 	callpa	#(@LR__0258-@LR__0257)>>2,fcache_load_ptr_
029d0                 | LR__0257
029d0     01 96 86 F1 | 	sub	local01, #1
029d4     0E 96 46 F7 | 	zerox	local01, #14
029d8     4B 99 02 F6 | 	mov	local02, local01
029dc     33 99 02 F1 | 	add	local02, objptr
029e0     4B 9B 02 F6 | 	mov	local03, local01
029e4     33 9B 02 F1 | 	add	local03, objptr
029e8     4D 9D C2 FA | 	rdbyte	local04, local03
029ec     01 9C 06 F1 | 	add	local04, #1
029f0     4C 9D 42 FC | 	wrbyte	local04, local02
029f4     04 96 06 F1 | 	add	local01, #4
029f8     0E 96 46 F7 | 	zerox	local01, #14
029fc     4B 99 02 F6 | 	mov	local02, local01
02a00     33 99 02 F1 | 	add	local02, objptr
02a04     4B 9B 02 F6 | 	mov	local03, local01
02a08     33 9B 02 F1 | 	add	local03, objptr
02a0c     4D 9D C2 FA | 	rdbyte	local04, local03
02a10     01 9C 06 F1 | 	add	local04, #1
02a14     4C 9D 42 FC | 	wrbyte	local04, local02
02a18     03 96 86 F1 | 	sub	local01, #3
02a1c     0E 96 46 F7 | 	zerox	local01, #14
02a20     4B 99 02 F6 | 	mov	local02, local01
02a24     33 99 02 F1 | 	add	local02, objptr
02a28     4B 9B 02 F6 | 	mov	local03, local01
02a2c     33 9B 02 F1 | 	add	local03, objptr
02a30     4D 9D C2 FA | 	rdbyte	local04, local03
02a34     01 9C 86 F1 | 	sub	local04, #1
02a38     4C 9D 42 FC | 	wrbyte	local04, local02
02a3c     4B 9F 02 F6 | 	mov	local05, local01
02a40     33 9F 02 F1 | 	add	local05, objptr
02a44     4F A1 CA FA | 	rdbyte	local06, local05 wz
02a48     84 FF 9F 5D |  if_ne	jmp	#LR__0257
02a4c                 | LR__0258
02a4c                 | LR__0259
02a4c     03 96 06 F1 | 	add	local01, #3
02a50     0E 96 46 F7 | 	zerox	local01, #14
02a54     4B 9F 02 F6 | 	mov	local05, local01
02a58     33 9F 02 F1 | 	add	local05, objptr
02a5c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02a60     80 00 90 AD |  if_e	jmp	#LR__0262
02a64     D7 3E 48 FB | 	callpa	#(@LR__0261-@LR__0260)>>2,fcache_load_ptr_
02a68                 | LR__0260
02a68     0C 96 06 F1 | 	add	local01, #12
02a6c     0E 96 46 F7 | 	zerox	local01, #14
02a70     4B 99 02 F6 | 	mov	local02, local01
02a74     33 99 02 F1 | 	add	local02, objptr
02a78     4B 9B 02 F6 | 	mov	local03, local01
02a7c     33 9B 02 F1 | 	add	local03, objptr
02a80     4D 9D C2 FA | 	rdbyte	local04, local03
02a84     01 9C 06 F1 | 	add	local04, #1
02a88     4C 9D 42 FC | 	wrbyte	local04, local02
02a8c     01 96 06 F1 | 	add	local01, #1
02a90     0E 96 46 F7 | 	zerox	local01, #14
02a94     4B 99 02 F6 | 	mov	local02, local01
02a98     33 99 02 F1 | 	add	local02, objptr
02a9c     4B 9B 02 F6 | 	mov	local03, local01
02aa0     33 9B 02 F1 | 	add	local03, objptr
02aa4     4D 9D C2 FA | 	rdbyte	local04, local03
02aa8     01 9C 06 F1 | 	add	local04, #1
02aac     4C 9D 42 FC | 	wrbyte	local04, local02
02ab0     0D 96 86 F1 | 	sub	local01, #13
02ab4     0E 96 46 F7 | 	zerox	local01, #14
02ab8     4B 99 02 F6 | 	mov	local02, local01
02abc     33 99 02 F1 | 	add	local02, objptr
02ac0     4B 9B 02 F6 | 	mov	local03, local01
02ac4     33 9B 02 F1 | 	add	local03, objptr
02ac8     4D 9D C2 FA | 	rdbyte	local04, local03
02acc     01 9C 86 F1 | 	sub	local04, #1
02ad0     4C 9D 42 FC | 	wrbyte	local04, local02
02ad4     4B 9F 02 F6 | 	mov	local05, local01
02ad8     33 9F 02 F1 | 	add	local05, objptr
02adc     4F A1 CA FA | 	rdbyte	local06, local05 wz
02ae0     84 FF 9F 5D |  if_ne	jmp	#LR__0260
02ae4                 | LR__0261
02ae4                 | LR__0262
02ae4     0C 96 06 F1 | 	add	local01, #12
02ae8     0E 96 46 F7 | 	zerox	local01, #14
02aec     4B 9F 02 F6 | 	mov	local05, local01
02af0     33 9F 02 F1 | 	add	local05, objptr
02af4     4F A1 CA FA | 	rdbyte	local06, local05 wz
02af8     10 01 90 AD |  if_e	jmp	#LR__0269
02afc     D7 86 48 FB | 	callpa	#(@LR__0268-@LR__0263)>>2,fcache_load_ptr_
02b00                 | LR__0263
02b00     4B 99 02 F6 | 	mov	local02, local01
02b04     33 99 02 F1 | 	add	local02, objptr
02b08     4B 9B 02 F6 | 	mov	local03, local01
02b0c     33 9B 02 F1 | 	add	local03, objptr
02b10     4D 9D C2 FA | 	rdbyte	local04, local03
02b14     01 9C 86 F1 | 	sub	local04, #1
02b18     4C 9D 42 FC | 	wrbyte	local04, local02
02b1c     4B 9F 02 F6 | 	mov	local05, local01
02b20     33 9F 02 F1 | 	add	local05, objptr
02b24     4F A1 CA FA | 	rdbyte	local06, local05 wz
02b28     58 00 90 AD |  if_e	jmp	#LR__0265
02b2c                 | LR__0264
02b2c     04 96 06 F1 | 	add	local01, #4
02b30     0E 96 46 F7 | 	zerox	local01, #14
02b34     4B 99 02 F6 | 	mov	local02, local01
02b38     33 99 02 F1 | 	add	local02, objptr
02b3c     4B 9B 02 F6 | 	mov	local03, local01
02b40     33 9B 02 F1 | 	add	local03, objptr
02b44     4D 9D C2 FA | 	rdbyte	local04, local03
02b48     01 9C 06 F1 | 	add	local04, #1
02b4c     4C 9D 42 FC | 	wrbyte	local04, local02
02b50     04 96 86 F1 | 	sub	local01, #4
02b54     0E 96 46 F7 | 	zerox	local01, #14
02b58     4B 99 02 F6 | 	mov	local02, local01
02b5c     33 99 02 F1 | 	add	local02, objptr
02b60     4B 9B 02 F6 | 	mov	local03, local01
02b64     33 9B 02 F1 | 	add	local03, objptr
02b68     4D 9D C2 FA | 	rdbyte	local04, local03
02b6c     01 9C 86 F1 | 	sub	local04, #1
02b70     4C 9D 42 FC | 	wrbyte	local04, local02
02b74     4B 9F 02 F6 | 	mov	local05, local01
02b78     33 9F 02 F1 | 	add	local05, objptr
02b7c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02b80     A8 FF 9F 5D |  if_ne	jmp	#LR__0264
02b84                 | LR__0265
02b84     01 96 06 F1 | 	add	local01, #1
02b88     0E 96 46 F7 | 	zerox	local01, #14
02b8c     4B 9F 02 F6 | 	mov	local05, local01
02b90     33 9F 02 F1 | 	add	local05, objptr
02b94     4F A1 CA FA | 	rdbyte	local06, local05 wz
02b98     58 00 90 AD |  if_e	jmp	#LR__0267
02b9c                 | LR__0266
02b9c     04 96 06 F1 | 	add	local01, #4
02ba0     0E 96 46 F7 | 	zerox	local01, #14
02ba4     4B 99 02 F6 | 	mov	local02, local01
02ba8     33 99 02 F1 | 	add	local02, objptr
02bac     4B 9B 02 F6 | 	mov	local03, local01
02bb0     33 9B 02 F1 | 	add	local03, objptr
02bb4     4D 9D C2 FA | 	rdbyte	local04, local03
02bb8     01 9C 06 F1 | 	add	local04, #1
02bbc     4C 9D 42 FC | 	wrbyte	local04, local02
02bc0     04 96 86 F1 | 	sub	local01, #4
02bc4     0E 96 46 F7 | 	zerox	local01, #14
02bc8     4B 99 02 F6 | 	mov	local02, local01
02bcc     33 99 02 F1 | 	add	local02, objptr
02bd0     4B 9B 02 F6 | 	mov	local03, local01
02bd4     33 9B 02 F1 | 	add	local03, objptr
02bd8     4D 9D C2 FA | 	rdbyte	local04, local03
02bdc     01 9C 86 F1 | 	sub	local04, #1
02be0     4C 9D 42 FC | 	wrbyte	local04, local02
02be4     4B 9F 02 F6 | 	mov	local05, local01
02be8     33 9F 02 F1 | 	add	local05, objptr
02bec     4F A1 CA FA | 	rdbyte	local06, local05 wz
02bf0     A8 FF 9F 5D |  if_ne	jmp	#LR__0266
02bf4                 | LR__0267
02bf4     03 96 06 F1 | 	add	local01, #3
02bf8     0E 96 46 F7 | 	zerox	local01, #14
02bfc     4B 9F 02 F6 | 	mov	local05, local01
02c00     33 9F 02 F1 | 	add	local05, objptr
02c04     4F A1 CA FA | 	rdbyte	local06, local05 wz
02c08     F4 FE 9F 5D |  if_ne	jmp	#LR__0263
02c0c                 | LR__0268
02c0c                 | LR__0269
02c0c     03 96 06 F1 | 	add	local01, #3
02c10     0E 96 46 F7 | 	zerox	local01, #14
02c14     4B 9F 02 F6 | 	mov	local05, local01
02c18     33 9F 02 F1 | 	add	local05, objptr
02c1c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02c20     5C 00 90 AD |  if_e	jmp	#LR__0272
02c24     D7 2C 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
02c28                 | LR__0270
02c28     03 96 86 F1 | 	sub	local01, #3
02c2c     0E 96 46 F7 | 	zerox	local01, #14
02c30     4B 99 02 F6 | 	mov	local02, local01
02c34     33 99 02 F1 | 	add	local02, objptr
02c38     4B 9B 02 F6 | 	mov	local03, local01
02c3c     33 9B 02 F1 | 	add	local03, objptr
02c40     4D 9D C2 FA | 	rdbyte	local04, local03
02c44     01 9C 06 F1 | 	add	local04, #1
02c48     4C 9D 42 FC | 	wrbyte	local04, local02
02c4c     03 96 06 F1 | 	add	local01, #3
02c50     0E 96 46 F7 | 	zerox	local01, #14
02c54     4B 99 02 F6 | 	mov	local02, local01
02c58     33 99 02 F1 | 	add	local02, objptr
02c5c     4B 9B 02 F6 | 	mov	local03, local01
02c60     33 9B 02 F1 | 	add	local03, objptr
02c64     4D 9D C2 FA | 	rdbyte	local04, local03
02c68     01 9C 86 F1 | 	sub	local04, #1
02c6c     4C 9D 42 FC | 	wrbyte	local04, local02
02c70     4B 9F 02 F6 | 	mov	local05, local01
02c74     33 9F 02 F1 | 	add	local05, objptr
02c78     4F A1 CA FA | 	rdbyte	local06, local05 wz
02c7c     A8 FF 9F 5D |  if_ne	jmp	#LR__0270
02c80                 | LR__0271
02c80                 | LR__0272
02c80     03 96 86 F1 | 	sub	local01, #3
02c84     0E 96 46 F7 | 	zerox	local01, #14
02c88     4B 9F 02 F6 | 	mov	local05, local01
02c8c     33 9F 02 F1 | 	add	local05, objptr
02c90     4F A1 CA FA | 	rdbyte	local06, local05 wz
02c94     80 00 90 AD |  if_e	jmp	#LR__0275
02c98     D7 3E 48 FB | 	callpa	#(@LR__0274-@LR__0273)>>2,fcache_load_ptr_
02c9c                 | LR__0273
02c9c     02 96 06 F1 | 	add	local01, #2
02ca0     0E 96 46 F7 | 	zerox	local01, #14
02ca4     4B 99 02 F6 | 	mov	local02, local01
02ca8     33 99 02 F1 | 	add	local02, objptr
02cac     4B 9B 02 F6 | 	mov	local03, local01
02cb0     33 9B 02 F1 | 	add	local03, objptr
02cb4     4D 9D C2 FA | 	rdbyte	local04, local03
02cb8     01 9C 06 F1 | 	add	local04, #1
02cbc     4C 9D 42 FC | 	wrbyte	local04, local02
02cc0     01 96 06 F1 | 	add	local01, #1
02cc4     0E 96 46 F7 | 	zerox	local01, #14
02cc8     4B 99 02 F6 | 	mov	local02, local01
02ccc     33 99 02 F1 | 	add	local02, objptr
02cd0     4B 9B 02 F6 | 	mov	local03, local01
02cd4     33 9B 02 F1 | 	add	local03, objptr
02cd8     4D 9D C2 FA | 	rdbyte	local04, local03
02cdc     01 9C 06 F1 | 	add	local04, #1
02ce0     4C 9D 42 FC | 	wrbyte	local04, local02
02ce4     03 96 86 F1 | 	sub	local01, #3
02ce8     0E 96 46 F7 | 	zerox	local01, #14
02cec     4B 99 02 F6 | 	mov	local02, local01
02cf0     33 99 02 F1 | 	add	local02, objptr
02cf4     4B 9B 02 F6 | 	mov	local03, local01
02cf8     33 9B 02 F1 | 	add	local03, objptr
02cfc     4D 9D C2 FA | 	rdbyte	local04, local03
02d00     01 9C 86 F1 | 	sub	local04, #1
02d04     4C 9D 42 FC | 	wrbyte	local04, local02
02d08     4B 9F 02 F6 | 	mov	local05, local01
02d0c     33 9F 02 F1 | 	add	local05, objptr
02d10     4F A1 CA FA | 	rdbyte	local06, local05 wz
02d14     84 FF 9F 5D |  if_ne	jmp	#LR__0273
02d18                 | LR__0274
02d18                 | LR__0275
02d18     01 96 06 F1 | 	add	local01, #1
02d1c     0E 96 46 F7 | 	zerox	local01, #14
02d20     4B 9F 02 F6 | 	mov	local05, local01
02d24     33 9F 02 F1 | 	add	local05, objptr
02d28     4F A1 CA FA | 	rdbyte	local06, local05 wz
02d2c     18 01 90 AD |  if_e	jmp	#LR__0282
02d30     D7 8A 48 FB | 	callpa	#(@LR__0281-@LR__0276)>>2,fcache_load_ptr_
02d34                 | LR__0276
02d34     4B 99 02 F6 | 	mov	local02, local01
02d38     33 99 02 F1 | 	add	local02, objptr
02d3c     4B 9B 02 F6 | 	mov	local03, local01
02d40     33 9B 02 F1 | 	add	local03, objptr
02d44     4D 9D C2 FA | 	rdbyte	local04, local03
02d48     01 9C 86 F1 | 	sub	local04, #1
02d4c     4C 9D 42 FC | 	wrbyte	local04, local02
02d50     01 96 06 F1 | 	add	local01, #1
02d54     0E 96 46 F7 | 	zerox	local01, #14
02d58     4B 9F 02 F6 | 	mov	local05, local01
02d5c     33 9F 02 F1 | 	add	local05, objptr
02d60     4F A1 CA FA | 	rdbyte	local06, local05 wz
02d64     58 00 90 AD |  if_e	jmp	#LR__0278
02d68                 | LR__0277
02d68     04 96 86 F1 | 	sub	local01, #4
02d6c     0E 96 46 F7 | 	zerox	local01, #14
02d70     4B 99 02 F6 | 	mov	local02, local01
02d74     33 99 02 F1 | 	add	local02, objptr
02d78     4B 9B 02 F6 | 	mov	local03, local01
02d7c     33 9B 02 F1 | 	add	local03, objptr
02d80     4D 9D C2 FA | 	rdbyte	local04, local03
02d84     01 9C 06 F1 | 	add	local04, #1
02d88     4C 9D 42 FC | 	wrbyte	local04, local02
02d8c     04 96 06 F1 | 	add	local01, #4
02d90     0E 96 46 F7 | 	zerox	local01, #14
02d94     4B 99 02 F6 | 	mov	local02, local01
02d98     33 99 02 F1 | 	add	local02, objptr
02d9c     4B 9B 02 F6 | 	mov	local03, local01
02da0     33 9B 02 F1 | 	add	local03, objptr
02da4     4D 9D C2 FA | 	rdbyte	local04, local03
02da8     01 9C 86 F1 | 	sub	local04, #1
02dac     4C 9D 42 FC | 	wrbyte	local04, local02
02db0     4B 9F 02 F6 | 	mov	local05, local01
02db4     33 9F 02 F1 | 	add	local05, objptr
02db8     4F A1 CA FA | 	rdbyte	local06, local05 wz
02dbc     A8 FF 9F 5D |  if_ne	jmp	#LR__0277
02dc0                 | LR__0278
02dc0     01 96 86 F1 | 	sub	local01, #1
02dc4     0E 96 46 F7 | 	zerox	local01, #14
02dc8     4B 9F 02 F6 | 	mov	local05, local01
02dcc     33 9F 02 F1 | 	add	local05, objptr
02dd0     4F A1 CA FA | 	rdbyte	local06, local05 wz
02dd4     58 00 90 AD |  if_e	jmp	#LR__0280
02dd8                 | LR__0279
02dd8     04 96 86 F1 | 	sub	local01, #4
02ddc     0E 96 46 F7 | 	zerox	local01, #14
02de0     4B 99 02 F6 | 	mov	local02, local01
02de4     33 99 02 F1 | 	add	local02, objptr
02de8     4B 9B 02 F6 | 	mov	local03, local01
02dec     33 9B 02 F1 | 	add	local03, objptr
02df0     4D 9D C2 FA | 	rdbyte	local04, local03
02df4     01 9C 06 F1 | 	add	local04, #1
02df8     4C 9D 42 FC | 	wrbyte	local04, local02
02dfc     04 96 06 F1 | 	add	local01, #4
02e00     0E 96 46 F7 | 	zerox	local01, #14
02e04     4B 99 02 F6 | 	mov	local02, local01
02e08     33 99 02 F1 | 	add	local02, objptr
02e0c     4B 9B 02 F6 | 	mov	local03, local01
02e10     33 9B 02 F1 | 	add	local03, objptr
02e14     4D 9D C2 FA | 	rdbyte	local04, local03
02e18     01 9C 86 F1 | 	sub	local04, #1
02e1c     4C 9D 42 FC | 	wrbyte	local04, local02
02e20     4B 9F 02 F6 | 	mov	local05, local01
02e24     33 9F 02 F1 | 	add	local05, objptr
02e28     4F A1 CA FA | 	rdbyte	local06, local05 wz
02e2c     A8 FF 9F 5D |  if_ne	jmp	#LR__0279
02e30                 | LR__0280
02e30     04 96 86 F1 | 	sub	local01, #4
02e34     0E 96 46 F7 | 	zerox	local01, #14
02e38     4B 9F 02 F6 | 	mov	local05, local01
02e3c     33 9F 02 F1 | 	add	local05, objptr
02e40     4F A1 CA FA | 	rdbyte	local06, local05 wz
02e44     EC FE 9F 5D |  if_ne	jmp	#LR__0276
02e48                 | LR__0281
02e48                 | LR__0282
02e48     01 96 86 F1 | 	sub	local01, #1
02e4c     0E 96 46 F7 | 	zerox	local01, #14
02e50     4B 99 02 F6 | 	mov	local02, local01
02e54     33 99 02 F1 | 	add	local02, objptr
02e58     4B 9B 02 F6 | 	mov	local03, local01
02e5c     33 9B 02 F1 | 	add	local03, objptr
02e60     4D 9D C2 FA | 	rdbyte	local04, local03
02e64     09 9C 06 F1 | 	add	local04, #9
02e68     4C 9D 42 FC | 	wrbyte	local04, local02
02e6c     4B 9F 02 F6 | 	mov	local05, local01
02e70     33 9F 02 F1 | 	add	local05, objptr
02e74     4F A1 CA FA | 	rdbyte	local06, local05 wz
02e78     5C 00 90 AD |  if_e	jmp	#LR__0285
02e7c     D7 2C 48 FB | 	callpa	#(@LR__0284-@LR__0283)>>2,fcache_load_ptr_
02e80                 | LR__0283
02e80     01 96 06 F1 | 	add	local01, #1
02e84     0E 96 46 F7 | 	zerox	local01, #14
02e88     4B 99 02 F6 | 	mov	local02, local01
02e8c     33 99 02 F1 | 	add	local02, objptr
02e90     4B 9B 02 F6 | 	mov	local03, local01
02e94     33 9B 02 F1 | 	add	local03, objptr
02e98     4D 9D C2 FA | 	rdbyte	local04, local03
02e9c     05 9C 06 F1 | 	add	local04, #5
02ea0     4C 9D 42 FC | 	wrbyte	local04, local02
02ea4     01 96 86 F1 | 	sub	local01, #1
02ea8     0E 96 46 F7 | 	zerox	local01, #14
02eac     4B 99 02 F6 | 	mov	local02, local01
02eb0     33 99 02 F1 | 	add	local02, objptr
02eb4     4B 9B 02 F6 | 	mov	local03, local01
02eb8     33 9B 02 F1 | 	add	local03, objptr
02ebc     4D 9D C2 FA | 	rdbyte	local04, local03
02ec0     01 9C 86 F1 | 	sub	local04, #1
02ec4     4C 9D 42 FC | 	wrbyte	local04, local02
02ec8     4B 9F 02 F6 | 	mov	local05, local01
02ecc     33 9F 02 F1 | 	add	local05, objptr
02ed0     4F A1 CA FA | 	rdbyte	local06, local05 wz
02ed4     A8 FF 9F 5D |  if_ne	jmp	#LR__0283
02ed8                 | LR__0284
02ed8                 | LR__0285
02ed8     02 96 06 F1 | 	add	local01, #2
02edc     0E 96 46 F7 | 	zerox	local01, #14
02ee0     4B 9F 02 F6 | 	mov	local05, local01
02ee4     33 9F 02 F1 | 	add	local05, objptr
02ee8     4F A1 CA FA | 	rdbyte	local06, local05 wz
02eec     5C 00 90 AD |  if_e	jmp	#LR__0288
02ef0     D7 2C 48 FB | 	callpa	#(@LR__0287-@LR__0286)>>2,fcache_load_ptr_
02ef4                 | LR__0286
02ef4     02 96 86 F1 | 	sub	local01, #2
02ef8     0E 96 46 F7 | 	zerox	local01, #14
02efc     4B 99 02 F6 | 	mov	local02, local01
02f00     33 99 02 F1 | 	add	local02, objptr
02f04     4B 9B 02 F6 | 	mov	local03, local01
02f08     33 9B 02 F1 | 	add	local03, objptr
02f0c     4D 9D C2 FA | 	rdbyte	local04, local03
02f10     01 9C 06 F1 | 	add	local04, #1
02f14     4C 9D 42 FC | 	wrbyte	local04, local02
02f18     02 96 06 F1 | 	add	local01, #2
02f1c     0E 96 46 F7 | 	zerox	local01, #14
02f20     4B 99 02 F6 | 	mov	local02, local01
02f24     33 99 02 F1 | 	add	local02, objptr
02f28     4B 9B 02 F6 | 	mov	local03, local01
02f2c     33 9B 02 F1 | 	add	local03, objptr
02f30     4D 9D C2 FA | 	rdbyte	local04, local03
02f34     01 9C 86 F1 | 	sub	local04, #1
02f38     4C 9D 42 FC | 	wrbyte	local04, local02
02f3c     4B 9F 02 F6 | 	mov	local05, local01
02f40     33 9F 02 F1 | 	add	local05, objptr
02f44     4F A1 CA FA | 	rdbyte	local06, local05 wz
02f48     A8 FF 9F 5D |  if_ne	jmp	#LR__0286
02f4c                 | LR__0287
02f4c                 | LR__0288
02f4c     02 96 86 F1 | 	sub	local01, #2
02f50     0E 96 46 F7 | 	zerox	local01, #14
02f54     4B 9F 02 F6 | 	mov	local05, local01
02f58     33 9F 02 F1 | 	add	local05, objptr
02f5c     4F A1 CA FA | 	rdbyte	local06, local05 wz
02f60     5C 00 90 AD |  if_e	jmp	#LR__0291
02f64     D7 2C 48 FB | 	callpa	#(@LR__0290-@LR__0289)>>2,fcache_load_ptr_
02f68                 | LR__0289
02f68     01 96 06 F1 | 	add	local01, #1
02f6c     0E 96 46 F7 | 	zerox	local01, #14
02f70     4B 99 02 F6 | 	mov	local02, local01
02f74     33 99 02 F1 | 	add	local02, objptr
02f78     4B 9B 02 F6 | 	mov	local03, local01
02f7c     33 9B 02 F1 | 	add	local03, objptr
02f80     4D 9D C2 FA | 	rdbyte	local04, local03
02f84     03 9C 86 F1 | 	sub	local04, #3
02f88     4C 9D 42 FC | 	wrbyte	local04, local02
02f8c     01 96 86 F1 | 	sub	local01, #1
02f90     0E 96 46 F7 | 	zerox	local01, #14
02f94     4B 99 02 F6 | 	mov	local02, local01
02f98     33 99 02 F1 | 	add	local02, objptr
02f9c     4B 9B 02 F6 | 	mov	local03, local01
02fa0     33 9B 02 F1 | 	add	local03, objptr
02fa4     4D 9D C2 FA | 	rdbyte	local04, local03
02fa8     01 9C 86 F1 | 	sub	local04, #1
02fac     4C 9D 42 FC | 	wrbyte	local04, local02
02fb0     4B 9F 02 F6 | 	mov	local05, local01
02fb4     33 9F 02 F1 | 	add	local05, objptr
02fb8     4F A1 CA FA | 	rdbyte	local06, local05 wz
02fbc     A8 FF 9F 5D |  if_ne	jmp	#LR__0289
02fc0                 | LR__0290
02fc0                 | LR__0291
02fc0     01 96 06 F1 | 	add	local01, #1
02fc4     0E 96 46 F7 | 	zerox	local01, #14
02fc8     2F 99 02 F6 | 	mov	local02, __sendreg
02fcc     2F 9F 02 F6 | 	mov	local05, __sendreg
02fd0     13 98 46 F7 | 	zerox	local02, #19
02fd4     14 9E 46 F0 | 	shr	local05, #20
02fd8     02 9E 66 F0 | 	shl	local05, #2
02fdc     2D 9F 02 F1 | 	add	local05, __methods__
02fe0     4F 9F 02 FB | 	rdlong	local05, local05
02fe4     4B A7 02 F6 | 	mov	local09, local01
02fe8     33 A3 02 F6 | 	mov	local07, objptr
02fec     33 A7 02 F1 | 	add	local09, objptr
02ff0     53 8D C2 FA | 	rdbyte	arg01, local09
02ff4     33 A5 02 F6 | 	mov	local08, objptr
02ff8     4C 67 02 F6 | 	mov	objptr, local02
02ffc     2D 9E 62 FD | 	call	local05
03000     52 67 02 F6 | 	mov	objptr, local08
03004     4B 9F 02 F6 | 	mov	local05, local01
03008     33 9F 02 F1 | 	add	local05, objptr
0300c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03010     30 00 90 AD |  if_e	jmp	#LR__0294
03014     D7 16 48 FB | 	callpa	#(@LR__0293-@LR__0292)>>2,fcache_load_ptr_
03018                 | LR__0292
03018     4B 99 02 F6 | 	mov	local02, local01
0301c     33 99 02 F1 | 	add	local02, objptr
03020     4B 9B 02 F6 | 	mov	local03, local01
03024     33 9B 02 F1 | 	add	local03, objptr
03028     4D 9D C2 FA | 	rdbyte	local04, local03
0302c     01 9C 86 F1 | 	sub	local04, #1
03030     4C 9D 42 FC | 	wrbyte	local04, local02
03034     4B 9F 02 F6 | 	mov	local05, local01
03038     33 9F 02 F1 | 	add	local05, objptr
0303c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03040     D4 FF 9F 5D |  if_ne	jmp	#LR__0292
03044                 | LR__0293
03044                 | LR__0294
03044     11 96 86 F1 | 	sub	local01, #17
03048     0E 96 46 F7 | 	zerox	local01, #14
0304c     4B 99 02 F6 | 	mov	local02, local01
03050     33 99 02 F1 | 	add	local02, objptr
03054     4B A5 02 F6 | 	mov	local08, local01
03058     52 9B 02 F6 | 	mov	local03, local08
0305c     33 A7 02 F6 | 	mov	local09, objptr
03060     33 9B 02 F1 | 	add	local03, objptr
03064     4D 9D C2 FA | 	rdbyte	local04, local03
03068     01 9C 86 F1 | 	sub	local04, #1
0306c     4C 9D 42 FC | 	wrbyte	local04, local02
03070     4B 99 02 F6 | 	mov	local02, local01
03074     4C 9F 02 F6 | 	mov	local05, local02
03078     33 9D 02 F6 | 	mov	local04, objptr
0307c     33 9F 02 F1 | 	add	local05, objptr
03080     4F A1 CA FA | 	rdbyte	local06, local05 wz
03084     9C F7 9F 5D |  if_ne	jmp	#LR__0247
03088                 | LR__0295
03088     4B 99 02 F6 | 	mov	local02, local01
0308c     33 99 02 F1 | 	add	local02, objptr
03090     4B 9B 02 F6 | 	mov	local03, local01
03094     33 9B 02 F1 | 	add	local03, objptr
03098     4D 9D C2 FA | 	rdbyte	local04, local03
0309c     0A 9C 06 F1 | 	add	local04, #10
030a0     4C 9D 42 FC | 	wrbyte	local04, local02
030a4     2F 99 02 F6 | 	mov	local02, __sendreg
030a8     2F 9F 02 F6 | 	mov	local05, __sendreg
030ac     13 98 46 F7 | 	zerox	local02, #19
030b0     14 9E 46 F0 | 	shr	local05, #20
030b4     02 9E 66 F0 | 	shl	local05, #2
030b8     2D 9F 02 F1 | 	add	local05, __methods__
030bc     4F 9F 02 FB | 	rdlong	local05, local05
030c0     4B A7 02 F6 | 	mov	local09, local01
030c4     33 A7 02 F1 | 	add	local09, objptr
030c8     53 8D C2 FA | 	rdbyte	arg01, local09
030cc     33 A5 02 F6 | 	mov	local08, objptr
030d0     4C 67 02 F6 | 	mov	objptr, local02
030d4     2D 9E 62 FD | 	call	local05
030d8     52 67 02 F6 | 	mov	objptr, local08
030dc     4B 9F 02 F6 | 	mov	local05, local01
030e0     33 9F 02 F1 | 	add	local05, objptr
030e4     4F A1 CA FA | 	rdbyte	local06, local05 wz
030e8     30 00 90 AD |  if_e	jmp	#LR__0298
030ec     D7 16 48 FB | 	callpa	#(@LR__0297-@LR__0296)>>2,fcache_load_ptr_
030f0                 | LR__0296
030f0     4B 99 02 F6 | 	mov	local02, local01
030f4     33 99 02 F1 | 	add	local02, objptr
030f8     4B 9B 02 F6 | 	mov	local03, local01
030fc     33 9B 02 F1 | 	add	local03, objptr
03100     4D 9D C2 FA | 	rdbyte	local04, local03
03104     01 9C 86 F1 | 	sub	local04, #1
03108     4C 9D 42 FC | 	wrbyte	local04, local02
0310c     4B 9F 02 F6 | 	mov	local05, local01
03110     33 9F 02 F1 | 	add	local05, objptr
03114     4F A1 CA FA | 	rdbyte	local06, local05 wz
03118     D4 FF 9F 5D |  if_ne	jmp	#LR__0296
0311c                 | LR__0297
0311c                 | LR__0298
0311c     01 96 86 F1 | 	sub	local01, #1
03120     0E 96 46 F7 | 	zerox	local01, #14
03124     4B 99 02 F6 | 	mov	local02, local01
03128     33 99 02 F1 | 	add	local02, objptr
0312c     4B 9B 02 F6 | 	mov	local03, local01
03130     33 9B 02 F1 | 	add	local03, objptr
03134     4D 9D C2 FA | 	rdbyte	local04, local03
03138     01 9C 86 F1 | 	sub	local04, #1
0313c     4C 9D 42 FC | 	wrbyte	local04, local02
03140     4B 9F 02 F6 | 	mov	local05, local01
03144     33 9F 02 F1 | 	add	local05, objptr
03148     4F A1 CA FA | 	rdbyte	local06, local05 wz
0314c     38 F6 9F 5D |  if_ne	jmp	#LR__0246
03150                 | LR__0299
03150     04 96 06 F1 | 	add	local01, #4
03154     0E 96 46 F7 | 	zerox	local01, #14
03158     4B 9F 02 F6 | 	mov	local05, local01
0315c     33 9F 02 F1 | 	add	local05, objptr
03160     4F A1 CA FA | 	rdbyte	local06, local05 wz
03164     30 00 90 AD |  if_e	jmp	#LR__0302
03168     D7 16 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
0316c                 | LR__0300
0316c     4B 99 02 F6 | 	mov	local02, local01
03170     33 99 02 F1 | 	add	local02, objptr
03174     4B 9B 02 F6 | 	mov	local03, local01
03178     33 9B 02 F1 | 	add	local03, objptr
0317c     4D 9D C2 FA | 	rdbyte	local04, local03
03180     01 9C 86 F1 | 	sub	local04, #1
03184     4C 9D 42 FC | 	wrbyte	local04, local02
03188     4B 9F 02 F6 | 	mov	local05, local01
0318c     33 9F 02 F1 | 	add	local05, objptr
03190     4F A1 CA FA | 	rdbyte	local06, local05 wz
03194     D4 FF 9F 5D |  if_ne	jmp	#LR__0300
03198                 | LR__0301
03198                 | LR__0302
03198     01 96 86 F1 | 	sub	local01, #1
0319c     0E 96 46 F7 | 	zerox	local01, #14
031a0     4B 9F 02 F6 | 	mov	local05, local01
031a4     33 9F 02 F1 | 	add	local05, objptr
031a8     4F A1 CA FA | 	rdbyte	local06, local05 wz
031ac     30 00 90 AD |  if_e	jmp	#LR__0305
031b0     D7 16 48 FB | 	callpa	#(@LR__0304-@LR__0303)>>2,fcache_load_ptr_
031b4                 | LR__0303
031b4     4B 99 02 F6 | 	mov	local02, local01
031b8     33 99 02 F1 | 	add	local02, objptr
031bc     4B 9B 02 F6 | 	mov	local03, local01
031c0     33 9B 02 F1 | 	add	local03, objptr
031c4     4D 9D C2 FA | 	rdbyte	local04, local03
031c8     01 9C 86 F1 | 	sub	local04, #1
031cc     4C 9D 42 FC | 	wrbyte	local04, local02
031d0     4B 9F 02 F6 | 	mov	local05, local01
031d4     33 9F 02 F1 | 	add	local05, objptr
031d8     4F A1 CA FA | 	rdbyte	local06, local05 wz
031dc     D4 FF 9F 5D |  if_ne	jmp	#LR__0303
031e0                 | LR__0304
031e0                 | LR__0305
031e0     4B 99 02 F6 | 	mov	local02, local01
031e4     33 99 02 F1 | 	add	local02, objptr
031e8     4B 9B 02 F6 | 	mov	local03, local01
031ec     33 9B 02 F1 | 	add	local03, objptr
031f0     4D 9D C2 FA | 	rdbyte	local04, local03
031f4     08 9C 06 F1 | 	add	local04, #8
031f8     4C 9D 42 FC | 	wrbyte	local04, local02
031fc     4B 9F 02 F6 | 	mov	local05, local01
03200     33 9F 02 F1 | 	add	local05, objptr
03204     4F A1 CA FA | 	rdbyte	local06, local05 wz
03208     5C 00 90 AD |  if_e	jmp	#LR__0308
0320c     D7 2C 48 FB | 	callpa	#(@LR__0307-@LR__0306)>>2,fcache_load_ptr_
03210                 | LR__0306
03210     01 96 06 F1 | 	add	local01, #1
03214     0E 96 46 F7 | 	zerox	local01, #14
03218     4B 99 02 F6 | 	mov	local02, local01
0321c     33 99 02 F1 | 	add	local02, objptr
03220     4B 9B 02 F6 | 	mov	local03, local01
03224     33 9B 02 F1 | 	add	local03, objptr
03228     4D 9D C2 FA | 	rdbyte	local04, local03
0322c     08 9C 06 F1 | 	add	local04, #8
03230     4C 9D 42 FC | 	wrbyte	local04, local02
03234     01 96 86 F1 | 	sub	local01, #1
03238     0E 96 46 F7 | 	zerox	local01, #14
0323c     4B 99 02 F6 | 	mov	local02, local01
03240     33 99 02 F1 | 	add	local02, objptr
03244     4B 9B 02 F6 | 	mov	local03, local01
03248     33 9B 02 F1 | 	add	local03, objptr
0324c     4D 9D C2 FA | 	rdbyte	local04, local03
03250     01 9C 86 F1 | 	sub	local04, #1
03254     4C 9D 42 FC | 	wrbyte	local04, local02
03258     4B 9F 02 F6 | 	mov	local05, local01
0325c     33 9F 02 F1 | 	add	local05, objptr
03260     4F A1 CA FA | 	rdbyte	local06, local05 wz
03264     A8 FF 9F 5D |  if_ne	jmp	#LR__0306
03268                 | LR__0307
03268                 | LR__0308
03268     01 96 06 F1 | 	add	local01, #1
0326c     0E 96 46 F7 | 	zerox	local01, #14
03270     4B 99 02 F6 | 	mov	local02, local01
03274     33 99 02 F1 | 	add	local02, objptr
03278     4B 9B 02 F6 | 	mov	local03, local01
0327c     33 9B 02 F1 | 	add	local03, objptr
03280     4D 9D C2 FA | 	rdbyte	local04, local03
03284     02 9C 86 F1 | 	sub	local04, #2
03288     4C 9D 42 FC | 	wrbyte	local04, local02
0328c     2F 99 02 F6 | 	mov	local02, __sendreg
03290     2F 9F 02 F6 | 	mov	local05, __sendreg
03294     13 98 46 F7 | 	zerox	local02, #19
03298     14 9E 46 F0 | 	shr	local05, #20
0329c     02 9E 66 F0 | 	shl	local05, #2
032a0     2D 9F 02 F1 | 	add	local05, __methods__
032a4     4F 9F 02 FB | 	rdlong	local05, local05
032a8     4B A7 02 F6 | 	mov	local09, local01
032ac     33 A3 02 F6 | 	mov	local07, objptr
032b0     33 A7 02 F1 | 	add	local09, objptr
032b4     53 8D C2 FA | 	rdbyte	arg01, local09
032b8     33 A5 02 F6 | 	mov	local08, objptr
032bc     4C 67 02 F6 | 	mov	objptr, local02
032c0     2D 9E 62 FD | 	call	local05
032c4     52 67 02 F6 | 	mov	objptr, local08
032c8     4B 9F 02 F6 | 	mov	local05, local01
032cc     33 9F 02 F1 | 	add	local05, objptr
032d0     4F A1 CA FA | 	rdbyte	local06, local05 wz
032d4     30 00 90 AD |  if_e	jmp	#LR__0311
032d8     D7 16 48 FB | 	callpa	#(@LR__0310-@LR__0309)>>2,fcache_load_ptr_
032dc                 | LR__0309
032dc     4B 99 02 F6 | 	mov	local02, local01
032e0     33 99 02 F1 | 	add	local02, objptr
032e4     4B 9B 02 F6 | 	mov	local03, local01
032e8     33 9B 02 F1 | 	add	local03, objptr
032ec     4D 9D C2 FA | 	rdbyte	local04, local03
032f0     01 9C 86 F1 | 	sub	local04, #1
032f4     4C 9D 42 FC | 	wrbyte	local04, local02
032f8     4B 9F 02 F6 | 	mov	local05, local01
032fc     33 9F 02 F1 | 	add	local05, objptr
03300     4F A1 CA FA | 	rdbyte	local06, local05 wz
03304     D4 FF 9F 5D |  if_ne	jmp	#LR__0309
03308                 | LR__0310
03308                 | LR__0311
03308     01 96 86 F1 | 	sub	local01, #1
0330c     0E 96 46 F7 | 	zerox	local01, #14
03310     4B 99 02 F6 | 	mov	local02, local01
03314     33 99 02 F1 | 	add	local02, objptr
03318     2E A5 02 F6 | 	mov	local08, __recvreg
0331c     2E 9B 02 F6 | 	mov	local03, __recvreg
03320     13 A4 46 F7 | 	zerox	local08, #19
03324     14 9A 46 F0 | 	shr	local03, #20
03328     02 9A 66 F0 | 	shl	local03, #2
0332c     2D 9B 02 F1 | 	add	local03, __methods__
03330     4D 9B 02 FB | 	rdlong	local03, local03
03334     33 A7 02 F6 | 	mov	local09, objptr
03338     52 67 02 F6 | 	mov	objptr, local08
0333c     2D 9A 62 FD | 	call	local03
03340     53 67 02 F6 | 	mov	objptr, local09
03344     4C 77 42 FC | 	wrbyte	result1, local02
03348     4B 99 02 F6 | 	mov	local02, local01
0334c     33 99 02 F1 | 	add	local02, objptr
03350     4B 9B 02 F6 | 	mov	local03, local01
03354     33 9B 02 F1 | 	add	local03, objptr
03358     4D 9D C2 FA | 	rdbyte	local04, local03
0335c     0A 9C 86 F1 | 	sub	local04, #10
03360     4C 9D 42 FC | 	wrbyte	local04, local02
03364     4B 9F 02 F6 | 	mov	local05, local01
03368     33 9F 02 F1 | 	add	local05, objptr
0336c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03370     5C 00 90 AD |  if_e	jmp	#LR__0314
03374     D7 2C 48 FB | 	callpa	#(@LR__0313-@LR__0312)>>2,fcache_load_ptr_
03378                 | LR__0312
03378     01 96 86 F1 | 	sub	local01, #1
0337c     0E 96 46 F7 | 	zerox	local01, #14
03380     4B 99 02 F6 | 	mov	local02, local01
03384     33 99 02 F1 | 	add	local02, objptr
03388     4B 9B 02 F6 | 	mov	local03, local01
0338c     33 9B 02 F1 | 	add	local03, objptr
03390     4D 9D C2 FA | 	rdbyte	local04, local03
03394     01 9C 06 F1 | 	add	local04, #1
03398     4C 9D 42 FC | 	wrbyte	local04, local02
0339c     01 96 06 F1 | 	add	local01, #1
033a0     0E 96 46 F7 | 	zerox	local01, #14
033a4     4B 99 02 F6 | 	mov	local02, local01
033a8     33 99 02 F1 | 	add	local02, objptr
033ac     4B 9B 02 F6 | 	mov	local03, local01
033b0     33 9B 02 F1 | 	add	local03, objptr
033b4     4D 9D C2 FA | 	rdbyte	local04, local03
033b8     01 9C 86 F1 | 	sub	local04, #1
033bc     4C 9D 42 FC | 	wrbyte	local04, local02
033c0     4B 9F 02 F6 | 	mov	local05, local01
033c4     33 9F 02 F1 | 	add	local05, objptr
033c8     4F A1 CA FA | 	rdbyte	local06, local05 wz
033cc     A8 FF 9F 5D |  if_ne	jmp	#LR__0312
033d0                 | LR__0313
033d0                 | LR__0314
033d0     06 96 06 F1 | 	add	local01, #6
033d4     0E 96 46 F7 | 	zerox	local01, #14
033d8     4B 99 02 F6 | 	mov	local02, local01
033dc     33 99 02 F1 | 	add	local02, objptr
033e0     4B 9B 02 F6 | 	mov	local03, local01
033e4     33 9B 02 F1 | 	add	local03, objptr
033e8     4D 9D C2 FA | 	rdbyte	local04, local03
033ec     01 9C 06 F1 | 	add	local04, #1
033f0     4C 9D 42 FC | 	wrbyte	local04, local02
033f4     07 96 86 F1 | 	sub	local01, #7
033f8     0E 96 46 F7 | 	zerox	local01, #14
033fc     4B 9F 02 F6 | 	mov	local05, local01
03400     33 9F 02 F1 | 	add	local05, objptr
03404     4F A1 CA FA | 	rdbyte	local06, local05 wz
03408     C4 00 90 AD |  if_e	jmp	#LR__0319
0340c     D7 60 48 FB | 	callpa	#(@LR__0318-@LR__0315)>>2,fcache_load_ptr_
03410                 | LR__0315
03410     01 96 06 F1 | 	add	local01, #1
03414     0E 96 46 F7 | 	zerox	local01, #14
03418     4B 99 02 F6 | 	mov	local02, local01
0341c     33 99 02 F1 | 	add	local02, objptr
03420     4B 9B 02 F6 | 	mov	local03, local01
03424     33 9B 02 F1 | 	add	local03, objptr
03428     4D 9D C2 FA | 	rdbyte	local04, local03
0342c     01 9C 06 F1 | 	add	local04, #1
03430     4C 9D 42 FC | 	wrbyte	local04, local02
03434     05 96 06 F1 | 	add	local01, #5
03438     0E 96 46 F7 | 	zerox	local01, #14
0343c     4B 99 02 F6 | 	mov	local02, local01
03440     33 99 02 F1 | 	add	local02, objptr
03444     4B 9B 02 F6 | 	mov	local03, local01
03448     33 9B 02 F1 | 	add	local03, objptr
0344c     4D 9D C2 FA | 	rdbyte	local04, local03
03450     01 9C 06 F1 | 	add	local04, #1
03454     4C 9D 42 FC | 	wrbyte	local04, local02
03458     01 96 06 F1 | 	add	local01, #1
0345c     0E 96 46 F7 | 	zerox	local01, #14
03460     4B 9F 02 F6 | 	mov	local05, local01
03464     33 9F 02 F1 | 	add	local05, objptr
03468     4F A1 CA FA | 	rdbyte	local06, local05 wz
0346c     2C 00 90 AD |  if_e	jmp	#LR__0317
03470                 | LR__0316
03470     4B 99 02 F6 | 	mov	local02, local01
03474     33 99 02 F1 | 	add	local02, objptr
03478     4B 9B 02 F6 | 	mov	local03, local01
0347c     33 9B 02 F1 | 	add	local03, objptr
03480     4D 9D C2 FA | 	rdbyte	local04, local03
03484     01 9C 86 F1 | 	sub	local04, #1
03488     4C 9D 42 FC | 	wrbyte	local04, local02
0348c     4B 9F 02 F6 | 	mov	local05, local01
03490     33 9F 02 F1 | 	add	local05, objptr
03494     4F A1 CA FA | 	rdbyte	local06, local05 wz
03498     D4 FF 9F 5D |  if_ne	jmp	#LR__0316
0349c                 | LR__0317
0349c     07 96 86 F1 | 	sub	local01, #7
034a0     0E 96 46 F7 | 	zerox	local01, #14
034a4     4B 99 02 F6 | 	mov	local02, local01
034a8     33 99 02 F1 | 	add	local02, objptr
034ac     4B 9B 02 F6 | 	mov	local03, local01
034b0     33 9B 02 F1 | 	add	local03, objptr
034b4     4D 9D C2 FA | 	rdbyte	local04, local03
034b8     01 9C 86 F1 | 	sub	local04, #1
034bc     4C 9D 42 FC | 	wrbyte	local04, local02
034c0     4B 9F 02 F6 | 	mov	local05, local01
034c4     33 9F 02 F1 | 	add	local05, objptr
034c8     4F A1 CA FA | 	rdbyte	local06, local05 wz
034cc     40 FF 9F 5D |  if_ne	jmp	#LR__0315
034d0                 | LR__0318
034d0                 | LR__0319
034d0     01 96 06 F1 | 	add	local01, #1
034d4     0E 96 46 F7 | 	zerox	local01, #14
034d8     4B 99 02 F6 | 	mov	local02, local01
034dc     33 99 02 F1 | 	add	local02, objptr
034e0     4B 9B 02 F6 | 	mov	local03, local01
034e4     33 9B 02 F1 | 	add	local03, objptr
034e8     4D 9D C2 FA | 	rdbyte	local04, local03
034ec     0A 9C 06 F1 | 	add	local04, #10
034f0     4C 9D 42 FC | 	wrbyte	local04, local02
034f4     05 96 06 F1 | 	add	local01, #5
034f8     0E 96 46 F7 | 	zerox	local01, #14
034fc     4B 9F 02 F6 | 	mov	local05, local01
03500     33 9F 02 F1 | 	add	local05, objptr
03504     4F A1 CA FA | 	rdbyte	local06, local05 wz
03508     CC 0A 90 AD |  if_e	jmp	#LR__0382
0350c                 | LR__0320
0350c     4B 9F 02 F6 | 	mov	local05, local01
03510     33 9F 02 F1 | 	add	local05, objptr
03514     4F A1 CA FA | 	rdbyte	local06, local05 wz
03518     30 00 90 AD |  if_e	jmp	#LR__0323
0351c     D7 16 48 FB | 	callpa	#(@LR__0322-@LR__0321)>>2,fcache_load_ptr_
03520                 | LR__0321
03520     4B 99 02 F6 | 	mov	local02, local01
03524     33 99 02 F1 | 	add	local02, objptr
03528     4B 9B 02 F6 | 	mov	local03, local01
0352c     33 9B 02 F1 | 	add	local03, objptr
03530     4D 9D C2 FA | 	rdbyte	local04, local03
03534     01 9C 86 F1 | 	sub	local04, #1
03538     4C 9D 42 FC | 	wrbyte	local04, local02
0353c     4B 9F 02 F6 | 	mov	local05, local01
03540     33 9F 02 F1 | 	add	local05, objptr
03544     4F A1 CA FA | 	rdbyte	local06, local05 wz
03548     D4 FF 9F 5D |  if_ne	jmp	#LR__0321
0354c                 | LR__0322
0354c                 | LR__0323
0354c     02 96 86 F1 | 	sub	local01, #2
03550     0E 96 46 F7 | 	zerox	local01, #14
03554     4B 99 02 F6 | 	mov	local02, local01
03558     33 99 02 F1 | 	add	local02, objptr
0355c     2E A5 02 F6 | 	mov	local08, __recvreg
03560     2E 9B 02 F6 | 	mov	local03, __recvreg
03564     13 A4 46 F7 | 	zerox	local08, #19
03568     14 9A 46 F0 | 	shr	local03, #20
0356c     02 9A 66 F0 | 	shl	local03, #2
03570     2D 9B 02 F1 | 	add	local03, __methods__
03574     4D 9B 02 FB | 	rdlong	local03, local03
03578     33 A7 02 F6 | 	mov	local09, objptr
0357c     52 67 02 F6 | 	mov	objptr, local08
03580     2D 9A 62 FD | 	call	local03
03584     53 67 02 F6 | 	mov	objptr, local09
03588     4C 77 42 FC | 	wrbyte	result1, local02
0358c     07 96 86 F1 | 	sub	local01, #7
03590     0E 96 46 F7 | 	zerox	local01, #14
03594     4B 99 02 F6 | 	mov	local02, local01
03598     33 99 02 F1 | 	add	local02, objptr
0359c     4B 9B 02 F6 | 	mov	local03, local01
035a0     33 9B 02 F1 | 	add	local03, objptr
035a4     4D 9D C2 FA | 	rdbyte	local04, local03
035a8     01 9C 86 F1 | 	sub	local04, #1
035ac     4C 9D 42 FC | 	wrbyte	local04, local02
035b0     07 96 06 F1 | 	add	local01, #7
035b4     0E 96 46 F7 | 	zerox	local01, #14
035b8     4B 9F 02 F6 | 	mov	local05, local01
035bc     33 9F 02 F1 | 	add	local05, objptr
035c0     4F A1 CA FA | 	rdbyte	local06, local05 wz
035c4     5C 00 90 AD |  if_e	jmp	#LR__0326
035c8     D7 2C 48 FB | 	callpa	#(@LR__0325-@LR__0324)>>2,fcache_load_ptr_
035cc                 | LR__0324
035cc     04 96 86 F1 | 	sub	local01, #4
035d0     0E 96 46 F7 | 	zerox	local01, #14
035d4     4B 99 02 F6 | 	mov	local02, local01
035d8     33 99 02 F1 | 	add	local02, objptr
035dc     4B 9B 02 F6 | 	mov	local03, local01
035e0     33 9B 02 F1 | 	add	local03, objptr
035e4     4D 9D C2 FA | 	rdbyte	local04, local03
035e8     01 9C 06 F1 | 	add	local04, #1
035ec     4C 9D 42 FC | 	wrbyte	local04, local02
035f0     04 96 06 F1 | 	add	local01, #4
035f4     0E 96 46 F7 | 	zerox	local01, #14
035f8     4B 99 02 F6 | 	mov	local02, local01
035fc     33 99 02 F1 | 	add	local02, objptr
03600     4B 9B 02 F6 | 	mov	local03, local01
03604     33 9B 02 F1 | 	add	local03, objptr
03608     4D 9D C2 FA | 	rdbyte	local04, local03
0360c     01 9C 86 F1 | 	sub	local04, #1
03610     4C 9D 42 FC | 	wrbyte	local04, local02
03614     4B 9F 02 F6 | 	mov	local05, local01
03618     33 9F 02 F1 | 	add	local05, objptr
0361c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03620     A8 FF 9F 5D |  if_ne	jmp	#LR__0324
03624                 | LR__0325
03624                 | LR__0326
03624     04 96 86 F1 | 	sub	local01, #4
03628     0E 96 46 F7 | 	zerox	local01, #14
0362c     4B 9F 02 F6 | 	mov	local05, local01
03630     33 9F 02 F1 | 	add	local05, objptr
03634     4F A1 CA FA | 	rdbyte	local06, local05 wz
03638     80 00 90 AD |  if_e	jmp	#LR__0329
0363c     D7 3E 48 FB | 	callpa	#(@LR__0328-@LR__0327)>>2,fcache_load_ptr_
03640                 | LR__0327
03640     04 96 06 F1 | 	add	local01, #4
03644     0E 96 46 F7 | 	zerox	local01, #14
03648     4B 99 02 F6 | 	mov	local02, local01
0364c     33 99 02 F1 | 	add	local02, objptr
03650     4B 9B 02 F6 | 	mov	local03, local01
03654     33 9B 02 F1 | 	add	local03, objptr
03658     4D 9D C2 FA | 	rdbyte	local04, local03
0365c     01 9C 06 F1 | 	add	local04, #1
03660     4C 9D 42 FC | 	wrbyte	local04, local02
03664     01 96 06 F1 | 	add	local01, #1
03668     0E 96 46 F7 | 	zerox	local01, #14
0366c     4B 99 02 F6 | 	mov	local02, local01
03670     33 99 02 F1 | 	add	local02, objptr
03674     4B 9B 02 F6 | 	mov	local03, local01
03678     33 9B 02 F1 | 	add	local03, objptr
0367c     4D 9D C2 FA | 	rdbyte	local04, local03
03680     01 9C 06 F1 | 	add	local04, #1
03684     4C 9D 42 FC | 	wrbyte	local04, local02
03688     05 96 86 F1 | 	sub	local01, #5
0368c     0E 96 46 F7 | 	zerox	local01, #14
03690     4B 99 02 F6 | 	mov	local02, local01
03694     33 99 02 F1 | 	add	local02, objptr
03698     4B 9B 02 F6 | 	mov	local03, local01
0369c     33 9B 02 F1 | 	add	local03, objptr
036a0     4D 9D C2 FA | 	rdbyte	local04, local03
036a4     01 9C 86 F1 | 	sub	local04, #1
036a8     4C 9D 42 FC | 	wrbyte	local04, local02
036ac     4B 9F 02 F6 | 	mov	local05, local01
036b0     33 9F 02 F1 | 	add	local05, objptr
036b4     4F A1 CA FA | 	rdbyte	local06, local05 wz
036b8     84 FF 9F 5D |  if_ne	jmp	#LR__0327
036bc                 | LR__0328
036bc                 | LR__0329
036bc     05 96 06 F1 | 	add	local01, #5
036c0     0E 96 46 F7 | 	zerox	local01, #14
036c4     4B 99 02 F6 | 	mov	local02, local01
036c8     33 99 02 F1 | 	add	local02, objptr
036cc     4B 9B 02 F6 | 	mov	local03, local01
036d0     33 9B 02 F1 | 	add	local03, objptr
036d4     4D 9D C2 FA | 	rdbyte	local04, local03
036d8     0A 9C 86 F1 | 	sub	local04, #10
036dc     4C 9D 42 FC | 	wrbyte	local04, local02
036e0     4B 9F 02 F6 | 	mov	local05, local01
036e4     33 9F 02 F1 | 	add	local05, objptr
036e8     4F A1 CA FA | 	rdbyte	local06, local05 wz
036ec     D0 08 90 AD |  if_e	jmp	#LR__0381
036f0                 | LR__0330
036f0     08 96 86 F1 | 	sub	local01, #8
036f4     0E 96 46 F7 | 	zerox	local01, #14
036f8     4B 99 02 F6 | 	mov	local02, local01
036fc     33 99 02 F1 | 	add	local02, objptr
03700     4B 9B 02 F6 | 	mov	local03, local01
03704     33 9B 02 F1 | 	add	local03, objptr
03708     4D 9D C2 FA | 	rdbyte	local04, local03
0370c     01 9C 06 F1 | 	add	local04, #1
03710     4C 9D 42 FC | 	wrbyte	local04, local02
03714     01 96 86 F1 | 	sub	local01, #1
03718     0E 96 46 F7 | 	zerox	local01, #14
0371c     4B 9F 02 F6 | 	mov	local05, local01
03720     33 9F 02 F1 | 	add	local05, objptr
03724     4F A1 CA FA | 	rdbyte	local06, local05 wz
03728     5C 00 90 AD |  if_e	jmp	#LR__0333
0372c     D7 2C 48 FB | 	callpa	#(@LR__0332-@LR__0331)>>2,fcache_load_ptr_
03730                 | LR__0331
03730     04 96 06 F1 | 	add	local01, #4
03734     0E 96 46 F7 | 	zerox	local01, #14
03738     4B 99 02 F6 | 	mov	local02, local01
0373c     33 99 02 F1 | 	add	local02, objptr
03740     4B 9B 02 F6 | 	mov	local03, local01
03744     33 9B 02 F1 | 	add	local03, objptr
03748     4D 9D C2 FA | 	rdbyte	local04, local03
0374c     01 9C 06 F1 | 	add	local04, #1
03750     4C 9D 42 FC | 	wrbyte	local04, local02
03754     04 96 86 F1 | 	sub	local01, #4
03758     0E 96 46 F7 | 	zerox	local01, #14
0375c     4B 99 02 F6 | 	mov	local02, local01
03760     33 99 02 F1 | 	add	local02, objptr
03764     4B 9B 02 F6 | 	mov	local03, local01
03768     33 9B 02 F1 | 	add	local03, objptr
0376c     4D 9D C2 FA | 	rdbyte	local04, local03
03770     01 9C 86 F1 | 	sub	local04, #1
03774     4C 9D 42 FC | 	wrbyte	local04, local02
03778     4B 9F 02 F6 | 	mov	local05, local01
0377c     33 9F 02 F1 | 	add	local05, objptr
03780     4F A1 CA FA | 	rdbyte	local06, local05 wz
03784     A8 FF 9F 5D |  if_ne	jmp	#LR__0331
03788                 | LR__0332
03788                 | LR__0333
03788     04 96 06 F1 | 	add	local01, #4
0378c     0E 96 46 F7 | 	zerox	local01, #14
03790     4B 9F 02 F6 | 	mov	local05, local01
03794     33 9F 02 F1 | 	add	local05, objptr
03798     4F A1 CA FA | 	rdbyte	local06, local05 wz
0379c     80 00 90 AD |  if_e	jmp	#LR__0336
037a0     D7 3E 48 FB | 	callpa	#(@LR__0335-@LR__0334)>>2,fcache_load_ptr_
037a4                 | LR__0334
037a4     04 96 86 F1 | 	sub	local01, #4
037a8     0E 96 46 F7 | 	zerox	local01, #14
037ac     4B 99 02 F6 | 	mov	local02, local01
037b0     33 99 02 F1 | 	add	local02, objptr
037b4     4B 9B 02 F6 | 	mov	local03, local01
037b8     33 9B 02 F1 | 	add	local03, objptr
037bc     4D 9D C2 FA | 	rdbyte	local04, local03
037c0     01 9C 06 F1 | 	add	local04, #1
037c4     4C 9D 42 FC | 	wrbyte	local04, local02
037c8     06 96 06 F1 | 	add	local01, #6
037cc     0E 96 46 F7 | 	zerox	local01, #14
037d0     4B 99 02 F6 | 	mov	local02, local01
037d4     33 99 02 F1 | 	add	local02, objptr
037d8     4B 9B 02 F6 | 	mov	local03, local01
037dc     33 9B 02 F1 | 	add	local03, objptr
037e0     4D 9D C2 FA | 	rdbyte	local04, local03
037e4     01 9C 06 F1 | 	add	local04, #1
037e8     4C 9D 42 FC | 	wrbyte	local04, local02
037ec     02 96 86 F1 | 	sub	local01, #2
037f0     0E 96 46 F7 | 	zerox	local01, #14
037f4     4B 99 02 F6 | 	mov	local02, local01
037f8     33 99 02 F1 | 	add	local02, objptr
037fc     4B 9B 02 F6 | 	mov	local03, local01
03800     33 9B 02 F1 | 	add	local03, objptr
03804     4D 9D C2 FA | 	rdbyte	local04, local03
03808     01 9C 86 F1 | 	sub	local04, #1
0380c     4C 9D 42 FC | 	wrbyte	local04, local02
03810     4B 9F 02 F6 | 	mov	local05, local01
03814     33 9F 02 F1 | 	add	local05, objptr
03818     4F A1 CA FA | 	rdbyte	local06, local05 wz
0381c     84 FF 9F 5D |  if_ne	jmp	#LR__0334
03820                 | LR__0335
03820                 | LR__0336
03820     01 96 06 F1 | 	add	local01, #1
03824     0E 96 46 F7 | 	zerox	local01, #14
03828     4B 9F 02 F6 | 	mov	local05, local01
0382c     33 9F 02 F1 | 	add	local05, objptr
03830     4F A1 CA FA | 	rdbyte	local06, local05 wz
03834     5C 00 90 AD |  if_e	jmp	#LR__0339
03838     D7 2C 48 FB | 	callpa	#(@LR__0338-@LR__0337)>>2,fcache_load_ptr_
0383c                 | LR__0337
0383c     01 96 06 F1 | 	add	local01, #1
03840     0E 96 46 F7 | 	zerox	local01, #14
03844     4B 99 02 F6 | 	mov	local02, local01
03848     33 99 02 F1 | 	add	local02, objptr
0384c     4B 9B 02 F6 | 	mov	local03, local01
03850     33 9B 02 F1 | 	add	local03, objptr
03854     4D 9D C2 FA | 	rdbyte	local04, local03
03858     01 9C 86 F1 | 	sub	local04, #1
0385c     4C 9D 42 FC | 	wrbyte	local04, local02
03860     01 96 86 F1 | 	sub	local01, #1
03864     0E 96 46 F7 | 	zerox	local01, #14
03868     4B 99 02 F6 | 	mov	local02, local01
0386c     33 99 02 F1 | 	add	local02, objptr
03870     4B 9B 02 F6 | 	mov	local03, local01
03874     33 9B 02 F1 | 	add	local03, objptr
03878     4D 9D C2 FA | 	rdbyte	local04, local03
0387c     01 9C 86 F1 | 	sub	local04, #1
03880     4C 9D 42 FC | 	wrbyte	local04, local02
03884     4B 9F 02 F6 | 	mov	local05, local01
03888     33 9F 02 F1 | 	add	local05, objptr
0388c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03890     A8 FF 9F 5D |  if_ne	jmp	#LR__0337
03894                 | LR__0338
03894                 | LR__0339
03894     01 96 06 F1 | 	add	local01, #1
03898     0E 96 46 F7 | 	zerox	local01, #14
0389c     4B 99 02 F6 | 	mov	local02, local01
038a0     33 99 02 F1 | 	add	local02, objptr
038a4     4B 9B 02 F6 | 	mov	local03, local01
038a8     33 9B 02 F1 | 	add	local03, objptr
038ac     4D 9D C2 FA | 	rdbyte	local04, local03
038b0     0A 9C 06 F1 | 	add	local04, #10
038b4     4C 9D 42 FC | 	wrbyte	local04, local02
038b8     4B 9F 02 F6 | 	mov	local05, local01
038bc     33 9F 02 F1 | 	add	local05, objptr
038c0     4F A1 CA FA | 	rdbyte	local06, local05 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0342
038c8     D7 2C 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
038cc                 | LR__0340
038cc     01 96 06 F1 | 	add	local01, #1
038d0     0E 96 46 F7 | 	zerox	local01, #14
038d4     4B 99 02 F6 | 	mov	local02, local01
038d8     33 99 02 F1 | 	add	local02, objptr
038dc     4B 9B 02 F6 | 	mov	local03, local01
038e0     33 9B 02 F1 | 	add	local03, objptr
038e4     4D 9D C2 FA | 	rdbyte	local04, local03
038e8     0B 9C 06 F1 | 	add	local04, #11
038ec     4C 9D 42 FC | 	wrbyte	local04, local02
038f0     01 96 86 F1 | 	sub	local01, #1
038f4     0E 96 46 F7 | 	zerox	local01, #14
038f8     4B 99 02 F6 | 	mov	local02, local01
038fc     33 99 02 F1 | 	add	local02, objptr
03900     4B 9B 02 F6 | 	mov	local03, local01
03904     33 9B 02 F1 | 	add	local03, objptr
03908     4D 9D C2 FA | 	rdbyte	local04, local03
0390c     01 9C 86 F1 | 	sub	local04, #1
03910     4C 9D 42 FC | 	wrbyte	local04, local02
03914     4B 9F 02 F6 | 	mov	local05, local01
03918     33 9F 02 F1 | 	add	local05, objptr
0391c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03920     A8 FF 9F 5D |  if_ne	jmp	#LR__0340
03924                 | LR__0341
03924                 | LR__0342
03924     06 96 86 F1 | 	sub	local01, #6
03928     0E 96 46 F7 | 	zerox	local01, #14
0392c     4B 9F 02 F6 | 	mov	local05, local01
03930     33 9F 02 F1 | 	add	local05, objptr
03934     4F A1 CA FA | 	rdbyte	local06, local05 wz
03938     5C 00 90 AD |  if_e	jmp	#LR__0345
0393c     D7 2C 48 FB | 	callpa	#(@LR__0344-@LR__0343)>>2,fcache_load_ptr_
03940                 | LR__0343
03940     04 96 06 F1 | 	add	local01, #4
03944     0E 96 46 F7 | 	zerox	local01, #14
03948     4B 99 02 F6 | 	mov	local02, local01
0394c     33 99 02 F1 | 	add	local02, objptr
03950     4B 9B 02 F6 | 	mov	local03, local01
03954     33 9B 02 F1 | 	add	local03, objptr
03958     4D 9D C2 FA | 	rdbyte	local04, local03
0395c     01 9C 06 F1 | 	add	local04, #1
03960     4C 9D 42 FC | 	wrbyte	local04, local02
03964     04 96 86 F1 | 	sub	local01, #4
03968     0E 96 46 F7 | 	zerox	local01, #14
0396c     4B 99 02 F6 | 	mov	local02, local01
03970     33 99 02 F1 | 	add	local02, objptr
03974     4B 9B 02 F6 | 	mov	local03, local01
03978     33 9B 02 F1 | 	add	local03, objptr
0397c     4D 9D C2 FA | 	rdbyte	local04, local03
03980     01 9C 86 F1 | 	sub	local04, #1
03984     4C 9D 42 FC | 	wrbyte	local04, local02
03988     4B 9F 02 F6 | 	mov	local05, local01
0398c     33 9F 02 F1 | 	add	local05, objptr
03990     4F A1 CA FA | 	rdbyte	local06, local05 wz
03994     A8 FF 9F 5D |  if_ne	jmp	#LR__0343
03998                 | LR__0344
03998                 | LR__0345
03998     04 96 06 F1 | 	add	local01, #4
0399c     0E 96 46 F7 | 	zerox	local01, #14
039a0     4B 9F 02 F6 | 	mov	local05, local01
039a4     33 9F 02 F1 | 	add	local05, objptr
039a8     4F A1 CA FA | 	rdbyte	local06, local05 wz
039ac     80 00 90 AD |  if_e	jmp	#LR__0348
039b0     D7 3E 48 FB | 	callpa	#(@LR__0347-@LR__0346)>>2,fcache_load_ptr_
039b4                 | LR__0346
039b4     04 96 86 F1 | 	sub	local01, #4
039b8     0E 96 46 F7 | 	zerox	local01, #14
039bc     4B 99 02 F6 | 	mov	local02, local01
039c0     33 99 02 F1 | 	add	local02, objptr
039c4     4B 9B 02 F6 | 	mov	local03, local01
039c8     33 9B 02 F1 | 	add	local03, objptr
039cc     4D 9D C2 FA | 	rdbyte	local04, local03
039d0     01 9C 06 F1 | 	add	local04, #1
039d4     4C 9D 42 FC | 	wrbyte	local04, local02
039d8     06 96 06 F1 | 	add	local01, #6
039dc     0E 96 46 F7 | 	zerox	local01, #14
039e0     4B 99 02 F6 | 	mov	local02, local01
039e4     33 99 02 F1 | 	add	local02, objptr
039e8     4B 9B 02 F6 | 	mov	local03, local01
039ec     33 9B 02 F1 | 	add	local03, objptr
039f0     4D 9D C2 FA | 	rdbyte	local04, local03
039f4     01 9C 06 F1 | 	add	local04, #1
039f8     4C 9D 42 FC | 	wrbyte	local04, local02
039fc     02 96 86 F1 | 	sub	local01, #2
03a00     0E 96 46 F7 | 	zerox	local01, #14
03a04     4B 99 02 F6 | 	mov	local02, local01
03a08     33 99 02 F1 | 	add	local02, objptr
03a0c     4B 9B 02 F6 | 	mov	local03, local01
03a10     33 9B 02 F1 | 	add	local03, objptr
03a14     4D 9D C2 FA | 	rdbyte	local04, local03
03a18     01 9C 86 F1 | 	sub	local04, #1
03a1c     4C 9D 42 FC | 	wrbyte	local04, local02
03a20     4B 9F 02 F6 | 	mov	local05, local01
03a24     33 9F 02 F1 | 	add	local05, objptr
03a28     4F A1 CA FA | 	rdbyte	local06, local05 wz
03a2c     84 FF 9F 5D |  if_ne	jmp	#LR__0346
03a30                 | LR__0347
03a30                 | LR__0348
03a30     04 96 06 F1 | 	add	local01, #4
03a34     0E 96 46 F7 | 	zerox	local01, #14
03a38     4B 9F 02 F6 | 	mov	local05, local01
03a3c     33 9F 02 F1 | 	add	local05, objptr
03a40     4F A1 CA FA | 	rdbyte	local06, local05 wz
03a44     5C 00 90 AD |  if_e	jmp	#LR__0351
03a48     D7 2C 48 FB | 	callpa	#(@LR__0350-@LR__0349)>>2,fcache_load_ptr_
03a4c                 | LR__0349
03a4c     02 96 86 F1 | 	sub	local01, #2
03a50     0E 96 46 F7 | 	zerox	local01, #14
03a54     4B 99 02 F6 | 	mov	local02, local01
03a58     33 99 02 F1 | 	add	local02, objptr
03a5c     4B 9B 02 F6 | 	mov	local03, local01
03a60     33 9B 02 F1 | 	add	local03, objptr
03a64     4D 9D C2 FA | 	rdbyte	local04, local03
03a68     01 9C 86 F1 | 	sub	local04, #1
03a6c     4C 9D 42 FC | 	wrbyte	local04, local02
03a70     02 96 06 F1 | 	add	local01, #2
03a74     0E 96 46 F7 | 	zerox	local01, #14
03a78     4B 99 02 F6 | 	mov	local02, local01
03a7c     33 99 02 F1 | 	add	local02, objptr
03a80     4B 9B 02 F6 | 	mov	local03, local01
03a84     33 9B 02 F1 | 	add	local03, objptr
03a88     4D 9D C2 FA | 	rdbyte	local04, local03
03a8c     01 9C 86 F1 | 	sub	local04, #1
03a90     4C 9D 42 FC | 	wrbyte	local04, local02
03a94     4B 9F 02 F6 | 	mov	local05, local01
03a98     33 9F 02 F1 | 	add	local05, objptr
03a9c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03aa0     A8 FF 9F 5D |  if_ne	jmp	#LR__0349
03aa4                 | LR__0350
03aa4                 | LR__0351
03aa4     02 96 86 F1 | 	sub	local01, #2
03aa8     0E 96 46 F7 | 	zerox	local01, #14
03aac     4B 99 02 F6 | 	mov	local02, local01
03ab0     33 99 02 F1 | 	add	local02, objptr
03ab4     4B 9B 02 F6 | 	mov	local03, local01
03ab8     33 9B 02 F1 | 	add	local03, objptr
03abc     4D 9D C2 FA | 	rdbyte	local04, local03
03ac0     0A 9C 06 F1 | 	add	local04, #10
03ac4     4C 9D 42 FC | 	wrbyte	local04, local02
03ac8     4B 9F 02 F6 | 	mov	local05, local01
03acc     33 9F 02 F1 | 	add	local05, objptr
03ad0     4F A1 CA FA | 	rdbyte	local06, local05 wz
03ad4     5C 00 90 AD |  if_e	jmp	#LR__0354
03ad8     D7 2C 48 FB | 	callpa	#(@LR__0353-@LR__0352)>>2,fcache_load_ptr_
03adc                 | LR__0352
03adc     01 96 06 F1 | 	add	local01, #1
03ae0     0E 96 46 F7 | 	zerox	local01, #14
03ae4     4B 99 02 F6 | 	mov	local02, local01
03ae8     33 99 02 F1 | 	add	local02, objptr
03aec     4B 9B 02 F6 | 	mov	local03, local01
03af0     33 9B 02 F1 | 	add	local03, objptr
03af4     4D 9D C2 FA | 	rdbyte	local04, local03
03af8     01 9C 06 F1 | 	add	local04, #1
03afc     4C 9D 42 FC | 	wrbyte	local04, local02
03b00     01 96 86 F1 | 	sub	local01, #1
03b04     0E 96 46 F7 | 	zerox	local01, #14
03b08     4B 99 02 F6 | 	mov	local02, local01
03b0c     33 99 02 F1 | 	add	local02, objptr
03b10     4B 9B 02 F6 | 	mov	local03, local01
03b14     33 9B 02 F1 | 	add	local03, objptr
03b18     4D 9D C2 FA | 	rdbyte	local04, local03
03b1c     01 9C 86 F1 | 	sub	local04, #1
03b20     4C 9D 42 FC | 	wrbyte	local04, local02
03b24     4B 9F 02 F6 | 	mov	local05, local01
03b28     33 9F 02 F1 | 	add	local05, objptr
03b2c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03b30     A8 FF 9F 5D |  if_ne	jmp	#LR__0352
03b34                 | LR__0353
03b34                 | LR__0354
03b34     01 96 06 F1 | 	add	local01, #1
03b38     0E 96 46 F7 | 	zerox	local01, #14
03b3c     4B 9F 02 F6 | 	mov	local05, local01
03b40     33 9F 02 F1 | 	add	local05, objptr
03b44     4F A1 CA FA | 	rdbyte	local06, local05 wz
03b48     80 00 90 AD |  if_e	jmp	#LR__0357
03b4c     D7 3E 48 FB | 	callpa	#(@LR__0356-@LR__0355)>>2,fcache_load_ptr_
03b50                 | LR__0355
03b50     0C 96 06 F1 | 	add	local01, #12
03b54     0E 96 46 F7 | 	zerox	local01, #14
03b58     4B 99 02 F6 | 	mov	local02, local01
03b5c     33 99 02 F1 | 	add	local02, objptr
03b60     4B 9B 02 F6 | 	mov	local03, local01
03b64     33 9B 02 F1 | 	add	local03, objptr
03b68     4D 9D C2 FA | 	rdbyte	local04, local03
03b6c     01 9C 06 F1 | 	add	local04, #1
03b70     4C 9D 42 FC | 	wrbyte	local04, local02
03b74     01 96 06 F1 | 	add	local01, #1
03b78     0E 96 46 F7 | 	zerox	local01, #14
03b7c     4B 99 02 F6 | 	mov	local02, local01
03b80     33 99 02 F1 | 	add	local02, objptr
03b84     4B 9B 02 F6 | 	mov	local03, local01
03b88     33 9B 02 F1 | 	add	local03, objptr
03b8c     4D 9D C2 FA | 	rdbyte	local04, local03
03b90     01 9C 06 F1 | 	add	local04, #1
03b94     4C 9D 42 FC | 	wrbyte	local04, local02
03b98     0D 96 86 F1 | 	sub	local01, #13
03b9c     0E 96 46 F7 | 	zerox	local01, #14
03ba0     4B 99 02 F6 | 	mov	local02, local01
03ba4     33 99 02 F1 | 	add	local02, objptr
03ba8     4B 9B 02 F6 | 	mov	local03, local01
03bac     33 9B 02 F1 | 	add	local03, objptr
03bb0     4D 9D C2 FA | 	rdbyte	local04, local03
03bb4     01 9C 86 F1 | 	sub	local04, #1
03bb8     4C 9D 42 FC | 	wrbyte	local04, local02
03bbc     4B 9F 02 F6 | 	mov	local05, local01
03bc0     33 9F 02 F1 | 	add	local05, objptr
03bc4     4F A1 CA FA | 	rdbyte	local06, local05 wz
03bc8     84 FF 9F 5D |  if_ne	jmp	#LR__0355
03bcc                 | LR__0356
03bcc                 | LR__0357
03bcc     0C 96 06 F1 | 	add	local01, #12
03bd0     0E 96 46 F7 | 	zerox	local01, #14
03bd4     4B 9F 02 F6 | 	mov	local05, local01
03bd8     33 9F 02 F1 | 	add	local05, objptr
03bdc     4F A1 CA FA | 	rdbyte	local06, local05 wz
03be0     10 01 90 AD |  if_e	jmp	#LR__0364
03be4     D7 86 48 FB | 	callpa	#(@LR__0363-@LR__0358)>>2,fcache_load_ptr_
03be8                 | LR__0358
03be8     4B 99 02 F6 | 	mov	local02, local01
03bec     33 99 02 F1 | 	add	local02, objptr
03bf0     4B 9B 02 F6 | 	mov	local03, local01
03bf4     33 9B 02 F1 | 	add	local03, objptr
03bf8     4D 9D C2 FA | 	rdbyte	local04, local03
03bfc     01 9C 86 F1 | 	sub	local04, #1
03c00     4C 9D 42 FC | 	wrbyte	local04, local02
03c04     4B 9F 02 F6 | 	mov	local05, local01
03c08     33 9F 02 F1 | 	add	local05, objptr
03c0c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03c10     58 00 90 AD |  if_e	jmp	#LR__0360
03c14                 | LR__0359
03c14     04 96 06 F1 | 	add	local01, #4
03c18     0E 96 46 F7 | 	zerox	local01, #14
03c1c     4B 99 02 F6 | 	mov	local02, local01
03c20     33 99 02 F1 | 	add	local02, objptr
03c24     4B 9B 02 F6 | 	mov	local03, local01
03c28     33 9B 02 F1 | 	add	local03, objptr
03c2c     4D 9D C2 FA | 	rdbyte	local04, local03
03c30     01 9C 06 F1 | 	add	local04, #1
03c34     4C 9D 42 FC | 	wrbyte	local04, local02
03c38     04 96 86 F1 | 	sub	local01, #4
03c3c     0E 96 46 F7 | 	zerox	local01, #14
03c40     4B 99 02 F6 | 	mov	local02, local01
03c44     33 99 02 F1 | 	add	local02, objptr
03c48     4B 9B 02 F6 | 	mov	local03, local01
03c4c     33 9B 02 F1 | 	add	local03, objptr
03c50     4D 9D C2 FA | 	rdbyte	local04, local03
03c54     01 9C 86 F1 | 	sub	local04, #1
03c58     4C 9D 42 FC | 	wrbyte	local04, local02
03c5c     4B 9F 02 F6 | 	mov	local05, local01
03c60     33 9F 02 F1 | 	add	local05, objptr
03c64     4F A1 CA FA | 	rdbyte	local06, local05 wz
03c68     A8 FF 9F 5D |  if_ne	jmp	#LR__0359
03c6c                 | LR__0360
03c6c     01 96 06 F1 | 	add	local01, #1
03c70     0E 96 46 F7 | 	zerox	local01, #14
03c74     4B 9F 02 F6 | 	mov	local05, local01
03c78     33 9F 02 F1 | 	add	local05, objptr
03c7c     4F A1 CA FA | 	rdbyte	local06, local05 wz
03c80     58 00 90 AD |  if_e	jmp	#LR__0362
03c84                 | LR__0361
03c84     04 96 06 F1 | 	add	local01, #4
03c88     0E 96 46 F7 | 	zerox	local01, #14
03c8c     4B 99 02 F6 | 	mov	local02, local01
03c90     33 99 02 F1 | 	add	local02, objptr
03c94     4B 9B 02 F6 | 	mov	local03, local01
03c98     33 9B 02 F1 | 	add	local03, objptr
03c9c     4D 9D C2 FA | 	rdbyte	local04, local03
03ca0     01 9C 06 F1 | 	add	local04, #1
03ca4     4C 9D 42 FC | 	wrbyte	local04, local02
03ca8     04 96 86 F1 | 	sub	local01, #4
03cac     0E 96 46 F7 | 	zerox	local01, #14
03cb0     4B 99 02 F6 | 	mov	local02, local01
03cb4     33 99 02 F1 | 	add	local02, objptr
03cb8     4B 9B 02 F6 | 	mov	local03, local01
03cbc     33 9B 02 F1 | 	add	local03, objptr
03cc0     4D 9D C2 FA | 	rdbyte	local04, local03
03cc4     01 9C 86 F1 | 	sub	local04, #1
03cc8     4C 9D 42 FC | 	wrbyte	local04, local02
03ccc     4B 9F 02 F6 | 	mov	local05, local01
03cd0     33 9F 02 F1 | 	add	local05, objptr
03cd4     4F A1 CA FA | 	rdbyte	local06, local05 wz
03cd8     A8 FF 9F 5D |  if_ne	jmp	#LR__0361
03cdc                 | LR__0362
03cdc     03 96 06 F1 | 	add	local01, #3
03ce0     0E 96 46 F7 | 	zerox	local01, #14
03ce4     4B 9F 02 F6 | 	mov	local05, local01
03ce8     33 9F 02 F1 | 	add	local05, objptr
03cec     4F A1 CA FA | 	rdbyte	local06, local05 wz
03cf0     F4 FE 9F 5D |  if_ne	jmp	#LR__0358
03cf4                 | LR__0363
03cf4                 | LR__0364
03cf4     03 96 06 F1 | 	add	local01, #3
03cf8     0E 96 46 F7 | 	zerox	local01, #14
03cfc     4B 9F 02 F6 | 	mov	local05, local01
03d00     33 9F 02 F1 | 	add	local05, objptr
03d04     4F A1 CA FA | 	rdbyte	local06, local05 wz
03d08     5C 00 90 AD |  if_e	jmp	#LR__0367
03d0c     D7 2C 48 FB | 	callpa	#(@LR__0366-@LR__0365)>>2,fcache_load_ptr_
03d10                 | LR__0365
03d10     03 96 86 F1 | 	sub	local01, #3
03d14     0E 96 46 F7 | 	zerox	local01, #14
03d18     4B 99 02 F6 | 	mov	local02, local01
03d1c     33 99 02 F1 | 	add	local02, objptr
03d20     4B 9B 02 F6 | 	mov	local03, local01
03d24     33 9B 02 F1 | 	add	local03, objptr
03d28     4D 9D C2 FA | 	rdbyte	local04, local03
03d2c     01 9C 06 F1 | 	add	local04, #1
03d30     4C 9D 42 FC | 	wrbyte	local04, local02
03d34     03 96 06 F1 | 	add	local01, #3
03d38     0E 96 46 F7 | 	zerox	local01, #14
03d3c     4B 99 02 F6 | 	mov	local02, local01
03d40     33 99 02 F1 | 	add	local02, objptr
03d44     4B 9B 02 F6 | 	mov	local03, local01
03d48     33 9B 02 F1 | 	add	local03, objptr
03d4c     4D 9D C2 FA | 	rdbyte	local04, local03
03d50     01 9C 86 F1 | 	sub	local04, #1
03d54     4C 9D 42 FC | 	wrbyte	local04, local02
03d58     4B 9F 02 F6 | 	mov	local05, local01
03d5c     33 9F 02 F1 | 	add	local05, objptr
03d60     4F A1 CA FA | 	rdbyte	local06, local05 wz
03d64     A8 FF 9F 5D |  if_ne	jmp	#LR__0365
03d68                 | LR__0366
03d68                 | LR__0367
03d68     4B 99 02 F6 | 	mov	local02, local01
03d6c     33 99 02 F1 | 	add	local02, objptr
03d70     4B 9B 02 F6 | 	mov	local03, local01
03d74     33 9B 02 F1 | 	add	local03, objptr
03d78     4D 9D C2 FA | 	rdbyte	local04, local03
03d7c     01 9C 06 F1 | 	add	local04, #1
03d80     4C 9D 42 FC | 	wrbyte	local04, local02
03d84     03 96 86 F1 | 	sub	local01, #3
03d88     0E 96 46 F7 | 	zerox	local01, #14
03d8c     4B 9F 02 F6 | 	mov	local05, local01
03d90     33 9F 02 F1 | 	add	local05, objptr
03d94     4F A1 CA FA | 	rdbyte	local06, local05 wz
03d98     5C 00 90 AD |  if_e	jmp	#LR__0370
03d9c     D7 2C 48 FB | 	callpa	#(@LR__0369-@LR__0368)>>2,fcache_load_ptr_
03da0                 | LR__0368
03da0     03 96 06 F1 | 	add	local01, #3
03da4     0E 96 46 F7 | 	zerox	local01, #14
03da8     4B 99 02 F6 | 	mov	local02, local01
03dac     33 99 02 F1 | 	add	local02, objptr
03db0     4B 9B 02 F6 | 	mov	local03, local01
03db4     33 9B 02 F1 | 	add	local03, objptr
03db8     4D 9D C2 FA | 	rdbyte	local04, local03
03dbc     01 9C 86 F1 | 	sub	local04, #1
03dc0     4C 9D 42 FC | 	wrbyte	local04, local02
03dc4     03 96 86 F1 | 	sub	local01, #3
03dc8     0E 96 46 F7 | 	zerox	local01, #14
03dcc     4B 99 02 F6 | 	mov	local02, local01
03dd0     33 99 02 F1 | 	add	local02, objptr
03dd4     4B 9B 02 F6 | 	mov	local03, local01
03dd8     33 9B 02 F1 | 	add	local03, objptr
03ddc     4D 9D C2 FA | 	rdbyte	local04, local03
03de0     01 9C 86 F1 | 	sub	local04, #1
03de4     4C 9D 42 FC | 	wrbyte	local04, local02
03de8     4B 9F 02 F6 | 	mov	local05, local01
03dec     33 9F 02 F1 | 	add	local05, objptr
03df0     4F A1 CA FA | 	rdbyte	local06, local05 wz
03df4     A8 FF 9F 5D |  if_ne	jmp	#LR__0368
03df8                 | LR__0369
03df8                 | LR__0370
03df8     01 96 06 F1 | 	add	local01, #1
03dfc     0E 96 46 F7 | 	zerox	local01, #14
03e00     4B 9F 02 F6 | 	mov	local05, local01
03e04     33 9F 02 F1 | 	add	local05, objptr
03e08     4F A1 CA FA | 	rdbyte	local06, local05 wz
03e0c     18 01 90 AD |  if_e	jmp	#LR__0377
03e10     D7 8A 48 FB | 	callpa	#(@LR__0376-@LR__0371)>>2,fcache_load_ptr_
03e14                 | LR__0371
03e14     4B 99 02 F6 | 	mov	local02, local01
03e18     33 99 02 F1 | 	add	local02, objptr
03e1c     4B 9B 02 F6 | 	mov	local03, local01
03e20     33 9B 02 F1 | 	add	local03, objptr
03e24     4D 9D C2 FA | 	rdbyte	local04, local03
03e28     01 9C 86 F1 | 	sub	local04, #1
03e2c     4C 9D 42 FC | 	wrbyte	local04, local02
03e30     01 96 06 F1 | 	add	local01, #1
03e34     0E 96 46 F7 | 	zerox	local01, #14
03e38     4B 9F 02 F6 | 	mov	local05, local01
03e3c     33 9F 02 F1 | 	add	local05, objptr
03e40     4F A1 CA FA | 	rdbyte	local06, local05 wz
03e44     58 00 90 AD |  if_e	jmp	#LR__0373
03e48                 | LR__0372
03e48     04 96 86 F1 | 	sub	local01, #4
03e4c     0E 96 46 F7 | 	zerox	local01, #14
03e50     4B 99 02 F6 | 	mov	local02, local01
03e54     33 99 02 F1 | 	add	local02, objptr
03e58     4B 9B 02 F6 | 	mov	local03, local01
03e5c     33 9B 02 F1 | 	add	local03, objptr
03e60     4D 9D C2 FA | 	rdbyte	local04, local03
03e64     01 9C 06 F1 | 	add	local04, #1
03e68     4C 9D 42 FC | 	wrbyte	local04, local02
03e6c     04 96 06 F1 | 	add	local01, #4
03e70     0E 96 46 F7 | 	zerox	local01, #14
03e74     4B 99 02 F6 | 	mov	local02, local01
03e78     33 99 02 F1 | 	add	local02, objptr
03e7c     4B 9B 02 F6 | 	mov	local03, local01
03e80     33 9B 02 F1 | 	add	local03, objptr
03e84     4D 9D C2 FA | 	rdbyte	local04, local03
03e88     01 9C 86 F1 | 	sub	local04, #1
03e8c     4C 9D 42 FC | 	wrbyte	local04, local02
03e90     4B 9F 02 F6 | 	mov	local05, local01
03e94     33 9F 02 F1 | 	add	local05, objptr
03e98     4F A1 CA FA | 	rdbyte	local06, local05 wz
03e9c     A8 FF 9F 5D |  if_ne	jmp	#LR__0372
03ea0                 | LR__0373
03ea0     01 96 86 F1 | 	sub	local01, #1
03ea4     0E 96 46 F7 | 	zerox	local01, #14
03ea8     4B 9F 02 F6 | 	mov	local05, local01
03eac     33 9F 02 F1 | 	add	local05, objptr
03eb0     4F A1 CA FA | 	rdbyte	local06, local05 wz
03eb4     58 00 90 AD |  if_e	jmp	#LR__0375
03eb8                 | LR__0374
03eb8     04 96 86 F1 | 	sub	local01, #4
03ebc     0E 96 46 F7 | 	zerox	local01, #14
03ec0     4B 99 02 F6 | 	mov	local02, local01
03ec4     33 99 02 F1 | 	add	local02, objptr
03ec8     4B 9B 02 F6 | 	mov	local03, local01
03ecc     33 9B 02 F1 | 	add	local03, objptr
03ed0     4D 9D C2 FA | 	rdbyte	local04, local03
03ed4     01 9C 06 F1 | 	add	local04, #1
03ed8     4C 9D 42 FC | 	wrbyte	local04, local02
03edc     04 96 06 F1 | 	add	local01, #4
03ee0     0E 96 46 F7 | 	zerox	local01, #14
03ee4     4B 99 02 F6 | 	mov	local02, local01
03ee8     33 99 02 F1 | 	add	local02, objptr
03eec     4B 9B 02 F6 | 	mov	local03, local01
03ef0     33 9B 02 F1 | 	add	local03, objptr
03ef4     4D 9D C2 FA | 	rdbyte	local04, local03
03ef8     01 9C 86 F1 | 	sub	local04, #1
03efc     4C 9D 42 FC | 	wrbyte	local04, local02
03f00     4B 9F 02 F6 | 	mov	local05, local01
03f04     33 9F 02 F1 | 	add	local05, objptr
03f08     4F A1 CA FA | 	rdbyte	local06, local05 wz
03f0c     A8 FF 9F 5D |  if_ne	jmp	#LR__0374
03f10                 | LR__0375
03f10     04 96 86 F1 | 	sub	local01, #4
03f14     0E 96 46 F7 | 	zerox	local01, #14
03f18     4B 9F 02 F6 | 	mov	local05, local01
03f1c     33 9F 02 F1 | 	add	local05, objptr
03f20     4F A1 CA FA | 	rdbyte	local06, local05 wz
03f24     EC FE 9F 5D |  if_ne	jmp	#LR__0371
03f28                 | LR__0376
03f28                 | LR__0377
03f28     0B 96 86 F1 | 	sub	local01, #11
03f2c     0E 96 46 F7 | 	zerox	local01, #14
03f30     4B 99 02 F6 | 	mov	local02, local01
03f34     33 99 02 F1 | 	add	local02, objptr
03f38     2E A5 02 F6 | 	mov	local08, __recvreg
03f3c     2E 9B 02 F6 | 	mov	local03, __recvreg
03f40     13 A4 46 F7 | 	zerox	local08, #19
03f44     14 9A 46 F0 | 	shr	local03, #20
03f48     02 9A 66 F0 | 	shl	local03, #2
03f4c     2D 9B 02 F1 | 	add	local03, __methods__
03f50     4D 9B 02 FB | 	rdlong	local03, local03
03f54     33 A7 02 F6 | 	mov	local09, objptr
03f58     52 67 02 F6 | 	mov	objptr, local08
03f5c     2D 9A 62 FD | 	call	local03
03f60     53 67 02 F6 | 	mov	objptr, local09
03f64     4C 77 42 FC | 	wrbyte	result1, local02
03f68     4B 9F 02 F6 | 	mov	local05, local01
03f6c     33 9F 02 F1 | 	add	local05, objptr
03f70     4F A1 CA FA | 	rdbyte	local06, local05 wz
03f74     38 00 90 AD |  if_e	jmp	#LR__0380
03f78     D7 1A 48 FB | 	callpa	#(@LR__0379-@LR__0378)>>2,fcache_load_ptr_
03f7c                 | LR__0378
03f7c     4B 99 02 F6 | 	mov	local02, local01
03f80     33 99 02 F1 | 	add	local02, objptr
03f84     4B A5 02 F6 | 	mov	local08, local01
03f88     52 9B 02 F6 | 	mov	local03, local08
03f8c     33 A7 02 F6 | 	mov	local09, objptr
03f90     33 9B 02 F1 | 	add	local03, objptr
03f94     4D 9D C2 FA | 	rdbyte	local04, local03
03f98     01 9C 86 F1 | 	sub	local04, #1
03f9c     4C 9D 42 FC | 	wrbyte	local04, local02
03fa0     4B 9F 02 F6 | 	mov	local05, local01
03fa4     33 9F 02 F1 | 	add	local05, objptr
03fa8     4F A1 CA FA | 	rdbyte	local06, local05 wz
03fac     CC FF 9F 5D |  if_ne	jmp	#LR__0378
03fb0                 | LR__0379
03fb0                 | LR__0380
03fb0     4B 9F 02 F6 | 	mov	local05, local01
03fb4     33 9F 02 F1 | 	add	local05, objptr
03fb8     4F A1 CA FA | 	rdbyte	local06, local05 wz
03fbc     30 F7 9F 5D |  if_ne	jmp	#LR__0330
03fc0                 | LR__0381
03fc0     01 96 06 F1 | 	add	local01, #1
03fc4     0E 96 46 F7 | 	zerox	local01, #14
03fc8     4B 9F 02 F6 | 	mov	local05, local01
03fcc     33 9F 02 F1 | 	add	local05, objptr
03fd0     4F A1 CA FA | 	rdbyte	local06, local05 wz
03fd4     34 F5 9F 5D |  if_ne	jmp	#LR__0320
03fd8                 | LR__0382
03fd8     01 96 06 F1 | 	add	local01, #1
03fdc     0E 96 46 F7 | 	zerox	local01, #14
03fe0     4B 9F 02 F6 | 	mov	local05, local01
03fe4     33 9F 02 F1 | 	add	local05, objptr
03fe8     4F A1 CA FA | 	rdbyte	local06, local05 wz
03fec     BC 2C 90 AD |  if_e	jmp	#LR__0636
03ff0                 | LR__0383
03ff0     4B 99 02 F6 | 	mov	local02, local01
03ff4     33 99 02 F1 | 	add	local02, objptr
03ff8     4B 9B 02 F6 | 	mov	local03, local01
03ffc     33 9B 02 F1 | 	add	local03, objptr
04000     4D 9D C2 FA | 	rdbyte	local04, local03
04004     01 9C 86 F1 | 	sub	local04, #1
04008     4C 9D 42 FC | 	wrbyte	local04, local02
0400c     4B 99 02 F6 | 	mov	local02, local01
04010     33 99 02 F1 | 	add	local02, objptr
04014     4B 9B 02 F6 | 	mov	local03, local01
04018     33 9B 02 F1 | 	add	local03, objptr
0401c     4D 9D C2 FA | 	rdbyte	local04, local03
04020     0B 9C 06 F1 | 	add	local04, #11
04024     4C 9D 42 FC | 	wrbyte	local04, local02
04028     4B 9F 02 F6 | 	mov	local05, local01
0402c     33 9F 02 F1 | 	add	local05, objptr
04030     4F A1 CA FA | 	rdbyte	local06, local05 wz
04034     80 00 90 AD |  if_e	jmp	#LR__0386
04038     D7 3E 48 FB | 	callpa	#(@LR__0385-@LR__0384)>>2,fcache_load_ptr_
0403c                 | LR__0384
0403c     01 96 06 F1 | 	add	local01, #1
04040     0E 96 46 F7 | 	zerox	local01, #14
04044     4B 99 02 F6 | 	mov	local02, local01
04048     33 99 02 F1 | 	add	local02, objptr
0404c     4B 9B 02 F6 | 	mov	local03, local01
04050     33 9B 02 F1 | 	add	local03, objptr
04054     4D 9D C2 FA | 	rdbyte	local04, local03
04058     0B 9C 06 F1 | 	add	local04, #11
0405c     4C 9D 42 FC | 	wrbyte	local04, local02
04060     01 96 06 F1 | 	add	local01, #1
04064     0E 96 46 F7 | 	zerox	local01, #14
04068     4B 99 02 F6 | 	mov	local02, local01
0406c     33 99 02 F1 | 	add	local02, objptr
04070     4B 9B 02 F6 | 	mov	local03, local01
04074     33 9B 02 F1 | 	add	local03, objptr
04078     4D 9D C2 FA | 	rdbyte	local04, local03
0407c     0B 9C 06 F1 | 	add	local04, #11
04080     4C 9D 42 FC | 	wrbyte	local04, local02
04084     02 96 86 F1 | 	sub	local01, #2
04088     0E 96 46 F7 | 	zerox	local01, #14
0408c     4B 99 02 F6 | 	mov	local02, local01
04090     33 99 02 F1 | 	add	local02, objptr
04094     4B 9B 02 F6 | 	mov	local03, local01
04098     33 9B 02 F1 | 	add	local03, objptr
0409c     4D 9D C2 FA | 	rdbyte	local04, local03
040a0     01 9C 86 F1 | 	sub	local04, #1
040a4     4C 9D 42 FC | 	wrbyte	local04, local02
040a8     4B 9F 02 F6 | 	mov	local05, local01
040ac     33 9F 02 F1 | 	add	local05, objptr
040b0     4F A1 CA FA | 	rdbyte	local06, local05 wz
040b4     84 FF 9F 5D |  if_ne	jmp	#LR__0384
040b8                 | LR__0385
040b8                 | LR__0386
040b8     01 96 06 F1 | 	add	local01, #1
040bc     0E 96 46 F7 | 	zerox	local01, #14
040c0     4B 9F 02 F6 | 	mov	local05, local01
040c4     33 9F 02 F1 | 	add	local05, objptr
040c8     4F A1 CA FA | 	rdbyte	local06, local05 wz
040cc     9C 0A 90 AD |  if_e	jmp	#LR__0446
040d0                 | LR__0387
040d0     4B 99 02 F6 | 	mov	local02, local01
040d4     33 99 02 F1 | 	add	local02, objptr
040d8     4B A5 02 F6 | 	mov	local08, local01
040dc     52 9B 02 F6 | 	mov	local03, local08
040e0     33 A7 02 F6 | 	mov	local09, objptr
040e4     33 9B 02 F1 | 	add	local03, objptr
040e8     4D 9D C2 FA | 	rdbyte	local04, local03
040ec     01 9C 86 F1 | 	sub	local04, #1
040f0     4C 9D 42 FC | 	wrbyte	local04, local02
040f4     4B 9F 02 F6 | 	mov	local05, local01
040f8     33 9F 02 F1 | 	add	local05, objptr
040fc     4F A1 CA FA | 	rdbyte	local06, local05 wz
04100     64 00 90 AD |  if_e	jmp	#LR__0390
04104     D7 30 48 FB | 	callpa	#(@LR__0389-@LR__0388)>>2,fcache_load_ptr_
04108                 | LR__0388
04108     03 96 06 F1 | 	add	local01, #3
0410c     0E 96 46 F7 | 	zerox	local01, #14
04110     4B 99 02 F6 | 	mov	local02, local01
04114     33 99 02 F1 | 	add	local02, objptr
04118     4B 9B 02 F6 | 	mov	local03, local01
0411c     33 9B 02 F1 | 	add	local03, objptr
04120     4D 9D C2 FA | 	rdbyte	local04, local03
04124     01 9C 06 F1 | 	add	local04, #1
04128     4C 9D 42 FC | 	wrbyte	local04, local02
0412c     03 96 86 F1 | 	sub	local01, #3
04130     0E 96 46 F7 | 	zerox	local01, #14
04134     4B 99 02 F6 | 	mov	local02, local01
04138     33 99 02 F1 | 	add	local02, objptr
0413c     4B A5 02 F6 | 	mov	local08, local01
04140     52 9B 02 F6 | 	mov	local03, local08
04144     33 A7 02 F6 | 	mov	local09, objptr
04148     33 9B 02 F1 | 	add	local03, objptr
0414c     4D 9D C2 FA | 	rdbyte	local04, local03
04150     01 9C 86 F1 | 	sub	local04, #1
04154     4C 9D 42 FC | 	wrbyte	local04, local02
04158     4B 9F 02 F6 | 	mov	local05, local01
0415c     33 9F 02 F1 | 	add	local05, objptr
04160     4F A1 CA FA | 	rdbyte	local06, local05 wz
04164     A0 FF 9F 5D |  if_ne	jmp	#LR__0388
04168                 | LR__0389
04168                 | LR__0390
04168     03 96 06 F1 | 	add	local01, #3
0416c     0E 96 46 F7 | 	zerox	local01, #14
04170     4B 9F 02 F6 | 	mov	local05, local01
04174     33 9F 02 F1 | 	add	local05, objptr
04178     4F A1 CA FA | 	rdbyte	local06, local05 wz
0417c     AC 00 90 AD |  if_e	jmp	#LR__0393
04180     D7 54 48 FB | 	callpa	#(@LR__0392-@LR__0391)>>2,fcache_load_ptr_
04184                 | LR__0391
04184     03 96 86 F1 | 	sub	local01, #3
04188     0E 96 46 F7 | 	zerox	local01, #14
0418c     4B 99 02 F6 | 	mov	local02, local01
04190     33 99 02 F1 | 	add	local02, objptr
04194     4B 9B 02 F6 | 	mov	local03, local01
04198     33 9B 02 F1 | 	add	local03, objptr
0419c     4D 9D C2 FA | 	rdbyte	local04, local03
041a0     01 9C 06 F1 | 	add	local04, #1
041a4     4C 9D 42 FC | 	wrbyte	local04, local02
041a8     07 96 06 F1 | 	add	local01, #7
041ac     0E 96 46 F7 | 	zerox	local01, #14
041b0     4B 99 02 F6 | 	mov	local02, local01
041b4     33 99 02 F1 | 	add	local02, objptr
041b8     4B 9B 02 F6 | 	mov	local03, local01
041bc     33 9B 02 F1 | 	add	local03, objptr
041c0     4D 9D C2 FA | 	rdbyte	local04, local03
041c4     01 9C 06 F1 | 	add	local04, #1
041c8     4C 9D 42 FC | 	wrbyte	local04, local02
041cc     01 96 06 F1 | 	add	local01, #1
041d0     0E 96 46 F7 | 	zerox	local01, #14
041d4     4B 99 02 F6 | 	mov	local02, local01
041d8     33 99 02 F1 | 	add	local02, objptr
041dc     4B 9B 02 F6 | 	mov	local03, local01
041e0     33 9B 02 F1 | 	add	local03, objptr
041e4     4D 9D C2 FA | 	rdbyte	local04, local03
041e8     01 9C 06 F1 | 	add	local04, #1
041ec     4C 9D 42 FC | 	wrbyte	local04, local02
041f0     05 96 86 F1 | 	sub	local01, #5
041f4     0E 96 46 F7 | 	zerox	local01, #14
041f8     4B 99 02 F6 | 	mov	local02, local01
041fc     33 99 02 F1 | 	add	local02, objptr
04200     4B A5 02 F6 | 	mov	local08, local01
04204     52 9B 02 F6 | 	mov	local03, local08
04208     33 A7 02 F6 | 	mov	local09, objptr
0420c     33 9B 02 F1 | 	add	local03, objptr
04210     4D 9D C2 FA | 	rdbyte	local04, local03
04214     01 9C 86 F1 | 	sub	local04, #1
04218     4C 9D 42 FC | 	wrbyte	local04, local02
0421c     4B 9F 02 F6 | 	mov	local05, local01
04220     33 9F 02 F1 | 	add	local05, objptr
04224     4F A1 CA FA | 	rdbyte	local06, local05 wz
04228     58 FF 9F 5D |  if_ne	jmp	#LR__0391
0422c                 | LR__0392
0422c                 | LR__0393
0422c     04 96 06 F1 | 	add	local01, #4
04230     0E 96 46 F7 | 	zerox	local01, #14
04234     4B 9F 02 F6 | 	mov	local05, local01
04238     33 9F 02 F1 | 	add	local05, objptr
0423c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04240     28 01 90 AD |  if_e	jmp	#LR__0400
04244     D7 92 48 FB | 	callpa	#(@LR__0399-@LR__0394)>>2,fcache_load_ptr_
04248                 | LR__0394
04248     4B 99 02 F6 | 	mov	local02, local01
0424c     33 99 02 F1 | 	add	local02, objptr
04250     4B A5 02 F6 | 	mov	local08, local01
04254     52 9B 02 F6 | 	mov	local03, local08
04258     33 A7 02 F6 | 	mov	local09, objptr
0425c     33 9B 02 F1 | 	add	local03, objptr
04260     4D 9D C2 FA | 	rdbyte	local04, local03
04264     01 9C 86 F1 | 	sub	local04, #1
04268     4C 9D 42 FC | 	wrbyte	local04, local02
0426c     4B 9F 02 F6 | 	mov	local05, local01
04270     33 9F 02 F1 | 	add	local05, objptr
04274     4F A1 CA FA | 	rdbyte	local06, local05 wz
04278     60 00 90 AD |  if_e	jmp	#LR__0396
0427c                 | LR__0395
0427c     04 96 06 F1 | 	add	local01, #4
04280     0E 96 46 F7 | 	zerox	local01, #14
04284     4B 99 02 F6 | 	mov	local02, local01
04288     33 99 02 F1 | 	add	local02, objptr
0428c     4B 9B 02 F6 | 	mov	local03, local01
04290     33 9B 02 F1 | 	add	local03, objptr
04294     4D 9D C2 FA | 	rdbyte	local04, local03
04298     01 9C 06 F1 | 	add	local04, #1
0429c     4C 9D 42 FC | 	wrbyte	local04, local02
042a0     04 96 86 F1 | 	sub	local01, #4
042a4     0E 96 46 F7 | 	zerox	local01, #14
042a8     4B 99 02 F6 | 	mov	local02, local01
042ac     33 99 02 F1 | 	add	local02, objptr
042b0     4B A5 02 F6 | 	mov	local08, local01
042b4     52 9B 02 F6 | 	mov	local03, local08
042b8     33 A7 02 F6 | 	mov	local09, objptr
042bc     33 9B 02 F1 | 	add	local03, objptr
042c0     4D 9D C2 FA | 	rdbyte	local04, local03
042c4     01 9C 86 F1 | 	sub	local04, #1
042c8     4C 9D 42 FC | 	wrbyte	local04, local02
042cc     4B 9F 02 F6 | 	mov	local05, local01
042d0     33 9F 02 F1 | 	add	local05, objptr
042d4     4F A1 CA FA | 	rdbyte	local06, local05 wz
042d8     A0 FF 9F 5D |  if_ne	jmp	#LR__0395
042dc                 | LR__0396
042dc     01 96 06 F1 | 	add	local01, #1
042e0     0E 96 46 F7 | 	zerox	local01, #14
042e4     4B 9F 02 F6 | 	mov	local05, local01
042e8     33 9F 02 F1 | 	add	local05, objptr
042ec     4F A1 CA FA | 	rdbyte	local06, local05 wz
042f0     60 00 90 AD |  if_e	jmp	#LR__0398
042f4                 | LR__0397
042f4     04 96 06 F1 | 	add	local01, #4
042f8     0E 96 46 F7 | 	zerox	local01, #14
042fc     4B 99 02 F6 | 	mov	local02, local01
04300     33 99 02 F1 | 	add	local02, objptr
04304     4B 9B 02 F6 | 	mov	local03, local01
04308     33 9B 02 F1 | 	add	local03, objptr
0430c     4D 9D C2 FA | 	rdbyte	local04, local03
04310     01 9C 06 F1 | 	add	local04, #1
04314     4C 9D 42 FC | 	wrbyte	local04, local02
04318     04 96 86 F1 | 	sub	local01, #4
0431c     0E 96 46 F7 | 	zerox	local01, #14
04320     4B 99 02 F6 | 	mov	local02, local01
04324     33 99 02 F1 | 	add	local02, objptr
04328     4B A5 02 F6 | 	mov	local08, local01
0432c     52 9B 02 F6 | 	mov	local03, local08
04330     33 A7 02 F6 | 	mov	local09, objptr
04334     33 9B 02 F1 | 	add	local03, objptr
04338     4D 9D C2 FA | 	rdbyte	local04, local03
0433c     01 9C 86 F1 | 	sub	local04, #1
04340     4C 9D 42 FC | 	wrbyte	local04, local02
04344     4B 9F 02 F6 | 	mov	local05, local01
04348     33 9F 02 F1 | 	add	local05, objptr
0434c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04350     A0 FF 9F 5D |  if_ne	jmp	#LR__0397
04354                 | LR__0398
04354     03 96 06 F1 | 	add	local01, #3
04358     0E 96 46 F7 | 	zerox	local01, #14
0435c     4B 9F 02 F6 | 	mov	local05, local01
04360     33 9F 02 F1 | 	add	local05, objptr
04364     4F A1 CA FA | 	rdbyte	local06, local05 wz
04368     DC FE 9F 5D |  if_ne	jmp	#LR__0394
0436c                 | LR__0399
0436c                 | LR__0400
0436c     03 96 06 F1 | 	add	local01, #3
04370     0E 96 46 F7 | 	zerox	local01, #14
04374     4B 9F 02 F6 | 	mov	local05, local01
04378     33 9F 02 F1 | 	add	local05, objptr
0437c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04380     64 00 90 AD |  if_e	jmp	#LR__0403
04384     D7 30 48 FB | 	callpa	#(@LR__0402-@LR__0401)>>2,fcache_load_ptr_
04388                 | LR__0401
04388     03 96 86 F1 | 	sub	local01, #3
0438c     0E 96 46 F7 | 	zerox	local01, #14
04390     4B 99 02 F6 | 	mov	local02, local01
04394     33 99 02 F1 | 	add	local02, objptr
04398     4B 9B 02 F6 | 	mov	local03, local01
0439c     33 9B 02 F1 | 	add	local03, objptr
043a0     4D 9D C2 FA | 	rdbyte	local04, local03
043a4     01 9C 06 F1 | 	add	local04, #1
043a8     4C 9D 42 FC | 	wrbyte	local04, local02
043ac     03 96 06 F1 | 	add	local01, #3
043b0     0E 96 46 F7 | 	zerox	local01, #14
043b4     4B 99 02 F6 | 	mov	local02, local01
043b8     33 99 02 F1 | 	add	local02, objptr
043bc     4B A5 02 F6 | 	mov	local08, local01
043c0     52 9B 02 F6 | 	mov	local03, local08
043c4     33 A7 02 F6 | 	mov	local09, objptr
043c8     33 9B 02 F1 | 	add	local03, objptr
043cc     4D 9D C2 FA | 	rdbyte	local04, local03
043d0     01 9C 86 F1 | 	sub	local04, #1
043d4     4C 9D 42 FC | 	wrbyte	local04, local02
043d8     4B 9F 02 F6 | 	mov	local05, local01
043dc     33 9F 02 F1 | 	add	local05, objptr
043e0     4F A1 CA FA | 	rdbyte	local06, local05 wz
043e4     A0 FF 9F 5D |  if_ne	jmp	#LR__0401
043e8                 | LR__0402
043e8                 | LR__0403
043e8     03 96 86 F1 | 	sub	local01, #3
043ec     0E 96 46 F7 | 	zerox	local01, #14
043f0     4B 9F 02 F6 | 	mov	local05, local01
043f4     33 9F 02 F1 | 	add	local05, objptr
043f8     4F A1 CA FA | 	rdbyte	local06, local05 wz
043fc     88 00 90 AD |  if_e	jmp	#LR__0406
04400     D7 42 48 FB | 	callpa	#(@LR__0405-@LR__0404)>>2,fcache_load_ptr_
04404                 | LR__0404
04404     02 96 06 F1 | 	add	local01, #2
04408     0E 96 46 F7 | 	zerox	local01, #14
0440c     4B 99 02 F6 | 	mov	local02, local01
04410     33 99 02 F1 | 	add	local02, objptr
04414     4B 9B 02 F6 | 	mov	local03, local01
04418     33 9B 02 F1 | 	add	local03, objptr
0441c     4D 9D C2 FA | 	rdbyte	local04, local03
04420     01 9C 06 F1 | 	add	local04, #1
04424     4C 9D 42 FC | 	wrbyte	local04, local02
04428     01 96 06 F1 | 	add	local01, #1
0442c     0E 96 46 F7 | 	zerox	local01, #14
04430     4B 99 02 F6 | 	mov	local02, local01
04434     33 99 02 F1 | 	add	local02, objptr
04438     4B 9B 02 F6 | 	mov	local03, local01
0443c     33 9B 02 F1 | 	add	local03, objptr
04440     4D 9D C2 FA | 	rdbyte	local04, local03
04444     01 9C 06 F1 | 	add	local04, #1
04448     4C 9D 42 FC | 	wrbyte	local04, local02
0444c     03 96 86 F1 | 	sub	local01, #3
04450     0E 96 46 F7 | 	zerox	local01, #14
04454     4B 99 02 F6 | 	mov	local02, local01
04458     33 99 02 F1 | 	add	local02, objptr
0445c     4B A5 02 F6 | 	mov	local08, local01
04460     52 9B 02 F6 | 	mov	local03, local08
04464     33 A7 02 F6 | 	mov	local09, objptr
04468     33 9B 02 F1 | 	add	local03, objptr
0446c     4D 9D C2 FA | 	rdbyte	local04, local03
04470     01 9C 86 F1 | 	sub	local04, #1
04474     4C 9D 42 FC | 	wrbyte	local04, local02
04478     4B 9F 02 F6 | 	mov	local05, local01
0447c     33 9F 02 F1 | 	add	local05, objptr
04480     4F A1 CA FA | 	rdbyte	local06, local05 wz
04484     7C FF 9F 5D |  if_ne	jmp	#LR__0404
04488                 | LR__0405
04488                 | LR__0406
04488     01 96 06 F1 | 	add	local01, #1
0448c     0E 96 46 F7 | 	zerox	local01, #14
04490     4B 9F 02 F6 | 	mov	local05, local01
04494     33 9F 02 F1 | 	add	local05, objptr
04498     4F A1 CA FA | 	rdbyte	local06, local05 wz
0449c     30 01 90 AD |  if_e	jmp	#LR__0413
044a0     D7 96 48 FB | 	callpa	#(@LR__0412-@LR__0407)>>2,fcache_load_ptr_
044a4                 | LR__0407
044a4     4B 99 02 F6 | 	mov	local02, local01
044a8     33 99 02 F1 | 	add	local02, objptr
044ac     4B A5 02 F6 | 	mov	local08, local01
044b0     52 9B 02 F6 | 	mov	local03, local08
044b4     33 A7 02 F6 | 	mov	local09, objptr
044b8     33 9B 02 F1 | 	add	local03, objptr
044bc     4D 9D C2 FA | 	rdbyte	local04, local03
044c0     01 9C 86 F1 | 	sub	local04, #1
044c4     4C 9D 42 FC | 	wrbyte	local04, local02
044c8     01 96 06 F1 | 	add	local01, #1
044cc     0E 96 46 F7 | 	zerox	local01, #14
044d0     4B 9F 02 F6 | 	mov	local05, local01
044d4     33 9F 02 F1 | 	add	local05, objptr
044d8     4F A1 CA FA | 	rdbyte	local06, local05 wz
044dc     60 00 90 AD |  if_e	jmp	#LR__0409
044e0                 | LR__0408
044e0     04 96 86 F1 | 	sub	local01, #4
044e4     0E 96 46 F7 | 	zerox	local01, #14
044e8     4B 99 02 F6 | 	mov	local02, local01
044ec     33 99 02 F1 | 	add	local02, objptr
044f0     4B 9B 02 F6 | 	mov	local03, local01
044f4     33 9B 02 F1 | 	add	local03, objptr
044f8     4D 9D C2 FA | 	rdbyte	local04, local03
044fc     01 9C 06 F1 | 	add	local04, #1
04500     4C 9D 42 FC | 	wrbyte	local04, local02
04504     04 96 06 F1 | 	add	local01, #4
04508     0E 96 46 F7 | 	zerox	local01, #14
0450c     4B 99 02 F6 | 	mov	local02, local01
04510     33 99 02 F1 | 	add	local02, objptr
04514     4B A5 02 F6 | 	mov	local08, local01
04518     52 9B 02 F6 | 	mov	local03, local08
0451c     33 A7 02 F6 | 	mov	local09, objptr
04520     33 9B 02 F1 | 	add	local03, objptr
04524     4D 9D C2 FA | 	rdbyte	local04, local03
04528     01 9C 86 F1 | 	sub	local04, #1
0452c     4C 9D 42 FC | 	wrbyte	local04, local02
04530     4B 9F 02 F6 | 	mov	local05, local01
04534     33 9F 02 F1 | 	add	local05, objptr
04538     4F A1 CA FA | 	rdbyte	local06, local05 wz
0453c     A0 FF 9F 5D |  if_ne	jmp	#LR__0408
04540                 | LR__0409
04540     01 96 86 F1 | 	sub	local01, #1
04544     0E 96 46 F7 | 	zerox	local01, #14
04548     4B 9F 02 F6 | 	mov	local05, local01
0454c     33 9F 02 F1 | 	add	local05, objptr
04550     4F A1 CA FA | 	rdbyte	local06, local05 wz
04554     60 00 90 AD |  if_e	jmp	#LR__0411
04558                 | LR__0410
04558     04 96 86 F1 | 	sub	local01, #4
0455c     0E 96 46 F7 | 	zerox	local01, #14
04560     4B 99 02 F6 | 	mov	local02, local01
04564     33 99 02 F1 | 	add	local02, objptr
04568     4B 9B 02 F6 | 	mov	local03, local01
0456c     33 9B 02 F1 | 	add	local03, objptr
04570     4D 9D C2 FA | 	rdbyte	local04, local03
04574     01 9C 06 F1 | 	add	local04, #1
04578     4C 9D 42 FC | 	wrbyte	local04, local02
0457c     04 96 06 F1 | 	add	local01, #4
04580     0E 96 46 F7 | 	zerox	local01, #14
04584     4B 99 02 F6 | 	mov	local02, local01
04588     33 99 02 F1 | 	add	local02, objptr
0458c     4B A5 02 F6 | 	mov	local08, local01
04590     52 9B 02 F6 | 	mov	local03, local08
04594     33 A7 02 F6 | 	mov	local09, objptr
04598     33 9B 02 F1 | 	add	local03, objptr
0459c     4D 9D C2 FA | 	rdbyte	local04, local03
045a0     01 9C 86 F1 | 	sub	local04, #1
045a4     4C 9D 42 FC | 	wrbyte	local04, local02
045a8     4B 9F 02 F6 | 	mov	local05, local01
045ac     33 9F 02 F1 | 	add	local05, objptr
045b0     4F A1 CA FA | 	rdbyte	local06, local05 wz
045b4     A0 FF 9F 5D |  if_ne	jmp	#LR__0410
045b8                 | LR__0411
045b8     04 96 86 F1 | 	sub	local01, #4
045bc     0E 96 46 F7 | 	zerox	local01, #14
045c0     4B 9F 02 F6 | 	mov	local05, local01
045c4     33 9F 02 F1 | 	add	local05, objptr
045c8     4F A1 CA FA | 	rdbyte	local06, local05 wz
045cc     D4 FE 9F 5D |  if_ne	jmp	#LR__0407
045d0                 | LR__0412
045d0                 | LR__0413
045d0     08 96 86 F1 | 	sub	local01, #8
045d4     0E 96 46 F7 | 	zerox	local01, #14
045d8     4B 9F 02 F6 | 	mov	local05, local01
045dc     33 9F 02 F1 | 	add	local05, objptr
045e0     4F A1 CA FA | 	rdbyte	local06, local05 wz
045e4     64 00 90 AD |  if_e	jmp	#LR__0416
045e8     D7 30 48 FB | 	callpa	#(@LR__0415-@LR__0414)>>2,fcache_load_ptr_
045ec                 | LR__0414
045ec     03 96 06 F1 | 	add	local01, #3
045f0     0E 96 46 F7 | 	zerox	local01, #14
045f4     4B 99 02 F6 | 	mov	local02, local01
045f8     33 99 02 F1 | 	add	local02, objptr
045fc     4B 9B 02 F6 | 	mov	local03, local01
04600     33 9B 02 F1 | 	add	local03, objptr
04604     4D 9D C2 FA | 	rdbyte	local04, local03
04608     01 9C 06 F1 | 	add	local04, #1
0460c     4C 9D 42 FC | 	wrbyte	local04, local02
04610     03 96 86 F1 | 	sub	local01, #3
04614     0E 96 46 F7 | 	zerox	local01, #14
04618     4B 99 02 F6 | 	mov	local02, local01
0461c     33 99 02 F1 | 	add	local02, objptr
04620     4B A5 02 F6 | 	mov	local08, local01
04624     52 9B 02 F6 | 	mov	local03, local08
04628     33 A7 02 F6 | 	mov	local09, objptr
0462c     33 9B 02 F1 | 	add	local03, objptr
04630     4D 9D C2 FA | 	rdbyte	local04, local03
04634     01 9C 86 F1 | 	sub	local04, #1
04638     4C 9D 42 FC | 	wrbyte	local04, local02
0463c     4B 9F 02 F6 | 	mov	local05, local01
04640     33 9F 02 F1 | 	add	local05, objptr
04644     4F A1 CA FA | 	rdbyte	local06, local05 wz
04648     A0 FF 9F 5D |  if_ne	jmp	#LR__0414
0464c                 | LR__0415
0464c                 | LR__0416
0464c     03 96 06 F1 | 	add	local01, #3
04650     0E 96 46 F7 | 	zerox	local01, #14
04654     4B 9F 02 F6 | 	mov	local05, local01
04658     33 9F 02 F1 | 	add	local05, objptr
0465c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04660     AC 00 90 AD |  if_e	jmp	#LR__0419
04664     D7 54 48 FB | 	callpa	#(@LR__0418-@LR__0417)>>2,fcache_load_ptr_
04668                 | LR__0417
04668     03 96 86 F1 | 	sub	local01, #3
0466c     0E 96 46 F7 | 	zerox	local01, #14
04670     4B 99 02 F6 | 	mov	local02, local01
04674     33 99 02 F1 | 	add	local02, objptr
04678     4B 9B 02 F6 | 	mov	local03, local01
0467c     33 9B 02 F1 | 	add	local03, objptr
04680     4D 9D C2 FA | 	rdbyte	local04, local03
04684     01 9C 06 F1 | 	add	local04, #1
04688     4C 9D 42 FC | 	wrbyte	local04, local02
0468c     07 96 06 F1 | 	add	local01, #7
04690     0E 96 46 F7 | 	zerox	local01, #14
04694     4B 99 02 F6 | 	mov	local02, local01
04698     33 99 02 F1 | 	add	local02, objptr
0469c     4B 9B 02 F6 | 	mov	local03, local01
046a0     33 9B 02 F1 | 	add	local03, objptr
046a4     4D 9D C2 FA | 	rdbyte	local04, local03
046a8     01 9C 06 F1 | 	add	local04, #1
046ac     4C 9D 42 FC | 	wrbyte	local04, local02
046b0     01 96 06 F1 | 	add	local01, #1
046b4     0E 96 46 F7 | 	zerox	local01, #14
046b8     4B 99 02 F6 | 	mov	local02, local01
046bc     33 99 02 F1 | 	add	local02, objptr
046c0     4B 9B 02 F6 | 	mov	local03, local01
046c4     33 9B 02 F1 | 	add	local03, objptr
046c8     4D 9D C2 FA | 	rdbyte	local04, local03
046cc     01 9C 06 F1 | 	add	local04, #1
046d0     4C 9D 42 FC | 	wrbyte	local04, local02
046d4     05 96 86 F1 | 	sub	local01, #5
046d8     0E 96 46 F7 | 	zerox	local01, #14
046dc     4B 99 02 F6 | 	mov	local02, local01
046e0     33 99 02 F1 | 	add	local02, objptr
046e4     4B A5 02 F6 | 	mov	local08, local01
046e8     52 9B 02 F6 | 	mov	local03, local08
046ec     33 A7 02 F6 | 	mov	local09, objptr
046f0     33 9B 02 F1 | 	add	local03, objptr
046f4     4D 9D C2 FA | 	rdbyte	local04, local03
046f8     01 9C 86 F1 | 	sub	local04, #1
046fc     4C 9D 42 FC | 	wrbyte	local04, local02
04700     4B 9F 02 F6 | 	mov	local05, local01
04704     33 9F 02 F1 | 	add	local05, objptr
04708     4F A1 CA FA | 	rdbyte	local06, local05 wz
0470c     58 FF 9F 5D |  if_ne	jmp	#LR__0417
04710                 | LR__0418
04710                 | LR__0419
04710     02 96 86 F1 | 	sub	local01, #2
04714     0E 96 46 F7 | 	zerox	local01, #14
04718     4B 9F 02 F6 | 	mov	local05, local01
0471c     33 9F 02 F1 | 	add	local05, objptr
04720     4F A1 CA FA | 	rdbyte	local06, local05 wz
04724     5C 00 90 AD |  if_e	jmp	#LR__0422
04728     D7 2C 48 FB | 	callpa	#(@LR__0421-@LR__0420)>>2,fcache_load_ptr_
0472c                 | LR__0420
0472c     02 96 06 F1 | 	add	local01, #2
04730     0E 96 46 F7 | 	zerox	local01, #14
04734     4B 99 02 F6 | 	mov	local02, local01
04738     33 99 02 F1 | 	add	local02, objptr
0473c     4B 9B 02 F6 | 	mov	local03, local01
04740     33 9B 02 F1 | 	add	local03, objptr
04744     4D 9D C2 FA | 	rdbyte	local04, local03
04748     01 9C 06 F1 | 	add	local04, #1
0474c     4C 9D 42 FC | 	wrbyte	local04, local02
04750     02 96 86 F1 | 	sub	local01, #2
04754     0E 96 46 F7 | 	zerox	local01, #14
04758     4B 99 02 F6 | 	mov	local02, local01
0475c     33 99 02 F1 | 	add	local02, objptr
04760     4B 9B 02 F6 | 	mov	local03, local01
04764     33 9B 02 F1 | 	add	local03, objptr
04768     4D 9D C2 FA | 	rdbyte	local04, local03
0476c     01 9C 86 F1 | 	sub	local04, #1
04770     4C 9D 42 FC | 	wrbyte	local04, local02
04774     4B 9F 02 F6 | 	mov	local05, local01
04778     33 9F 02 F1 | 	add	local05, objptr
0477c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04780     A8 FF 9F 5D |  if_ne	jmp	#LR__0420
04784                 | LR__0421
04784                 | LR__0422
04784     02 96 06 F1 | 	add	local01, #2
04788     0E 96 46 F7 | 	zerox	local01, #14
0478c     4B 9F 02 F6 | 	mov	local05, local01
04790     33 9F 02 F1 | 	add	local05, objptr
04794     4F A1 CA FA | 	rdbyte	local06, local05 wz
04798     A4 00 90 AD |  if_e	jmp	#LR__0425
0479c     D7 50 48 FB | 	callpa	#(@LR__0424-@LR__0423)>>2,fcache_load_ptr_
047a0                 | LR__0423
047a0     02 96 86 F1 | 	sub	local01, #2
047a4     0E 96 46 F7 | 	zerox	local01, #14
047a8     4B 99 02 F6 | 	mov	local02, local01
047ac     33 99 02 F1 | 	add	local02, objptr
047b0     4B 9B 02 F6 | 	mov	local03, local01
047b4     33 9B 02 F1 | 	add	local03, objptr
047b8     4D 9D C2 FA | 	rdbyte	local04, local03
047bc     01 9C 06 F1 | 	add	local04, #1
047c0     4C 9D 42 FC | 	wrbyte	local04, local02
047c4     06 96 06 F1 | 	add	local01, #6
047c8     0E 96 46 F7 | 	zerox	local01, #14
047cc     4B 99 02 F6 | 	mov	local02, local01
047d0     33 99 02 F1 | 	add	local02, objptr
047d4     4B 9B 02 F6 | 	mov	local03, local01
047d8     33 9B 02 F1 | 	add	local03, objptr
047dc     4D 9D C2 FA | 	rdbyte	local04, local03
047e0     01 9C 06 F1 | 	add	local04, #1
047e4     4C 9D 42 FC | 	wrbyte	local04, local02
047e8     01 96 06 F1 | 	add	local01, #1
047ec     0E 96 46 F7 | 	zerox	local01, #14
047f0     4B 99 02 F6 | 	mov	local02, local01
047f4     33 99 02 F1 | 	add	local02, objptr
047f8     4B 9B 02 F6 | 	mov	local03, local01
047fc     33 9B 02 F1 | 	add	local03, objptr
04800     4D 9D C2 FA | 	rdbyte	local04, local03
04804     01 9C 06 F1 | 	add	local04, #1
04808     4C 9D 42 FC | 	wrbyte	local04, local02
0480c     05 96 86 F1 | 	sub	local01, #5
04810     0E 96 46 F7 | 	zerox	local01, #14
04814     4B 99 02 F6 | 	mov	local02, local01
04818     33 99 02 F1 | 	add	local02, objptr
0481c     4B 9B 02 F6 | 	mov	local03, local01
04820     33 9B 02 F1 | 	add	local03, objptr
04824     4D 9D C2 FA | 	rdbyte	local04, local03
04828     01 9C 86 F1 | 	sub	local04, #1
0482c     4C 9D 42 FC | 	wrbyte	local04, local02
04830     4B 9F 02 F6 | 	mov	local05, local01
04834     33 9F 02 F1 | 	add	local05, objptr
04838     4F A1 CA FA | 	rdbyte	local06, local05 wz
0483c     60 FF 9F 5D |  if_ne	jmp	#LR__0423
04840                 | LR__0424
04840                 | LR__0425
04840     04 96 06 F1 | 	add	local01, #4
04844     0E 96 46 F7 | 	zerox	local01, #14
04848     4B 9F 02 F6 | 	mov	local05, local01
0484c     33 9F 02 F1 | 	add	local05, objptr
04850     4F A1 CA FA | 	rdbyte	local06, local05 wz
04854     88 01 90 AD |  if_e	jmp	#LR__0434
04858     D7 C2 48 FB | 	callpa	#(@LR__0433-@LR__0426)>>2,fcache_load_ptr_
0485c                 | LR__0426
0485c     4B 99 02 F6 | 	mov	local02, local01
04860     33 99 02 F1 | 	add	local02, objptr
04864     4B A5 02 F6 | 	mov	local08, local01
04868     52 9B 02 F6 | 	mov	local03, local08
0486c     33 A7 02 F6 | 	mov	local09, objptr
04870     33 9B 02 F1 | 	add	local03, objptr
04874     4D 9D C2 FA | 	rdbyte	local04, local03
04878     01 9C 86 F1 | 	sub	local04, #1
0487c     4C 9D 42 FC | 	wrbyte	local04, local02
04880     4B 9F 02 F6 | 	mov	local05, local01
04884     33 9F 02 F1 | 	add	local05, objptr
04888     4F A1 CA FA | 	rdbyte	local06, local05 wz
0488c     58 00 90 AD |  if_e	jmp	#LR__0428
04890                 | LR__0427
04890     04 96 06 F1 | 	add	local01, #4
04894     0E 96 46 F7 | 	zerox	local01, #14
04898     4B 99 02 F6 | 	mov	local02, local01
0489c     33 99 02 F1 | 	add	local02, objptr
048a0     4B 9B 02 F6 | 	mov	local03, local01
048a4     33 9B 02 F1 | 	add	local03, objptr
048a8     4D 9D C2 FA | 	rdbyte	local04, local03
048ac     01 9C 06 F1 | 	add	local04, #1
048b0     4C 9D 42 FC | 	wrbyte	local04, local02
048b4     04 96 86 F1 | 	sub	local01, #4
048b8     0E 96 46 F7 | 	zerox	local01, #14
048bc     4B 99 02 F6 | 	mov	local02, local01
048c0     33 99 02 F1 | 	add	local02, objptr
048c4     4B 9B 02 F6 | 	mov	local03, local01
048c8     33 9B 02 F1 | 	add	local03, objptr
048cc     4D 9D C2 FA | 	rdbyte	local04, local03
048d0     01 9C 86 F1 | 	sub	local04, #1
048d4     4C 9D 42 FC | 	wrbyte	local04, local02
048d8     4B 9F 02 F6 | 	mov	local05, local01
048dc     33 9F 02 F1 | 	add	local05, objptr
048e0     4F A1 CA FA | 	rdbyte	local06, local05 wz
048e4     A8 FF 9F 5D |  if_ne	jmp	#LR__0427
048e8                 | LR__0428
048e8     01 96 06 F1 | 	add	local01, #1
048ec     0E 96 46 F7 | 	zerox	local01, #14
048f0     4B 9F 02 F6 | 	mov	local05, local01
048f4     33 9F 02 F1 | 	add	local05, objptr
048f8     4F A1 CA FA | 	rdbyte	local06, local05 wz
048fc     58 00 90 AD |  if_e	jmp	#LR__0430
04900                 | LR__0429
04900     04 96 06 F1 | 	add	local01, #4
04904     0E 96 46 F7 | 	zerox	local01, #14
04908     4B 99 02 F6 | 	mov	local02, local01
0490c     33 99 02 F1 | 	add	local02, objptr
04910     4B 9B 02 F6 | 	mov	local03, local01
04914     33 9B 02 F1 | 	add	local03, objptr
04918     4D 9D C2 FA | 	rdbyte	local04, local03
0491c     01 9C 06 F1 | 	add	local04, #1
04920     4C 9D 42 FC | 	wrbyte	local04, local02
04924     04 96 86 F1 | 	sub	local01, #4
04928     0E 96 46 F7 | 	zerox	local01, #14
0492c     4B 99 02 F6 | 	mov	local02, local01
04930     33 99 02 F1 | 	add	local02, objptr
04934     4B 9B 02 F6 | 	mov	local03, local01
04938     33 9B 02 F1 | 	add	local03, objptr
0493c     4D 9D C2 FA | 	rdbyte	local04, local03
04940     01 9C 86 F1 | 	sub	local04, #1
04944     4C 9D 42 FC | 	wrbyte	local04, local02
04948     4B 9F 02 F6 | 	mov	local05, local01
0494c     33 9F 02 F1 | 	add	local05, objptr
04950     4F A1 CA FA | 	rdbyte	local06, local05 wz
04954     A8 FF 9F 5D |  if_ne	jmp	#LR__0429
04958                 | LR__0430
04958     01 96 06 F1 | 	add	local01, #1
0495c     0E 96 46 F7 | 	zerox	local01, #14
04960     4B 9F 02 F6 | 	mov	local05, local01
04964     33 9F 02 F1 | 	add	local05, objptr
04968     4F A1 CA FA | 	rdbyte	local06, local05 wz
0496c     58 00 90 AD |  if_e	jmp	#LR__0432
04970                 | LR__0431
04970     04 96 06 F1 | 	add	local01, #4
04974     0E 96 46 F7 | 	zerox	local01, #14
04978     4B 99 02 F6 | 	mov	local02, local01
0497c     33 99 02 F1 | 	add	local02, objptr
04980     4B 9B 02 F6 | 	mov	local03, local01
04984     33 9B 02 F1 | 	add	local03, objptr
04988     4D 9D C2 FA | 	rdbyte	local04, local03
0498c     01 9C 06 F1 | 	add	local04, #1
04990     4C 9D 42 FC | 	wrbyte	local04, local02
04994     04 96 86 F1 | 	sub	local01, #4
04998     0E 96 46 F7 | 	zerox	local01, #14
0499c     4B 99 02 F6 | 	mov	local02, local01
049a0     33 99 02 F1 | 	add	local02, objptr
049a4     4B 9B 02 F6 | 	mov	local03, local01
049a8     33 9B 02 F1 | 	add	local03, objptr
049ac     4D 9D C2 FA | 	rdbyte	local04, local03
049b0     01 9C 86 F1 | 	sub	local04, #1
049b4     4C 9D 42 FC | 	wrbyte	local04, local02
049b8     4B 9F 02 F6 | 	mov	local05, local01
049bc     33 9F 02 F1 | 	add	local05, objptr
049c0     4F A1 CA FA | 	rdbyte	local06, local05 wz
049c4     A8 FF 9F 5D |  if_ne	jmp	#LR__0431
049c8                 | LR__0432
049c8     02 96 06 F1 | 	add	local01, #2
049cc     0E 96 46 F7 | 	zerox	local01, #14
049d0     4B 9F 02 F6 | 	mov	local05, local01
049d4     33 9F 02 F1 | 	add	local05, objptr
049d8     4F A1 CA FA | 	rdbyte	local06, local05 wz
049dc     7C FE 9F 5D |  if_ne	jmp	#LR__0426
049e0                 | LR__0433
049e0                 | LR__0434
049e0     03 96 06 F1 | 	add	local01, #3
049e4     0E 96 46 F7 | 	zerox	local01, #14
049e8     4B 9F 02 F6 | 	mov	local05, local01
049ec     33 9F 02 F1 | 	add	local05, objptr
049f0     4F A1 CA FA | 	rdbyte	local06, local05 wz
049f4     30 00 90 AD |  if_e	jmp	#LR__0437
049f8     D7 16 48 FB | 	callpa	#(@LR__0436-@LR__0435)>>2,fcache_load_ptr_
049fc                 | LR__0435
049fc     4B 99 02 F6 | 	mov	local02, local01
04a00     33 99 02 F1 | 	add	local02, objptr
04a04     4B 9B 02 F6 | 	mov	local03, local01
04a08     33 9B 02 F1 | 	add	local03, objptr
04a0c     4D 9D C2 FA | 	rdbyte	local04, local03
04a10     01 9C 86 F1 | 	sub	local04, #1
04a14     4C 9D 42 FC | 	wrbyte	local04, local02
04a18     4B 9F 02 F6 | 	mov	local05, local01
04a1c     33 9F 02 F1 | 	add	local05, objptr
04a20     4F A1 CA FA | 	rdbyte	local06, local05 wz
04a24     D4 FF 9F 5D |  if_ne	jmp	#LR__0435
04a28                 | LR__0436
04a28                 | LR__0437
04a28     01 96 86 F1 | 	sub	local01, #1
04a2c     0E 96 46 F7 | 	zerox	local01, #14
04a30     4B 9F 02 F6 | 	mov	local05, local01
04a34     33 9F 02 F1 | 	add	local05, objptr
04a38     4F A1 CA FA | 	rdbyte	local06, local05 wz
04a3c     5C 00 90 AD |  if_e	jmp	#LR__0440
04a40     D7 2C 48 FB | 	callpa	#(@LR__0439-@LR__0438)>>2,fcache_load_ptr_
04a44                 | LR__0438
04a44     01 96 06 F1 | 	add	local01, #1
04a48     0E 96 46 F7 | 	zerox	local01, #14
04a4c     4B 99 02 F6 | 	mov	local02, local01
04a50     33 99 02 F1 | 	add	local02, objptr
04a54     4B 9B 02 F6 | 	mov	local03, local01
04a58     33 9B 02 F1 | 	add	local03, objptr
04a5c     4D 9D C2 FA | 	rdbyte	local04, local03
04a60     01 9C 06 F1 | 	add	local04, #1
04a64     4C 9D 42 FC | 	wrbyte	local04, local02
04a68     01 96 86 F1 | 	sub	local01, #1
04a6c     0E 96 46 F7 | 	zerox	local01, #14
04a70     4B 99 02 F6 | 	mov	local02, local01
04a74     33 99 02 F1 | 	add	local02, objptr
04a78     4B 9B 02 F6 | 	mov	local03, local01
04a7c     33 9B 02 F1 | 	add	local03, objptr
04a80     4D 9D C2 FA | 	rdbyte	local04, local03
04a84     01 9C 86 F1 | 	sub	local04, #1
04a88     4C 9D 42 FC | 	wrbyte	local04, local02
04a8c     4B 9F 02 F6 | 	mov	local05, local01
04a90     33 9F 02 F1 | 	add	local05, objptr
04a94     4F A1 CA FA | 	rdbyte	local06, local05 wz
04a98     A8 FF 9F 5D |  if_ne	jmp	#LR__0438
04a9c                 | LR__0439
04a9c                 | LR__0440
04a9c     01 96 86 F1 | 	sub	local01, #1
04aa0     0E 96 46 F7 | 	zerox	local01, #14
04aa4     4B 9F 02 F6 | 	mov	local05, local01
04aa8     33 9F 02 F1 | 	add	local05, objptr
04aac     4F A1 CA FA | 	rdbyte	local06, local05 wz
04ab0     A0 00 90 AD |  if_e	jmp	#LR__0445
04ab4     D7 4E 48 FB | 	callpa	#(@LR__0444-@LR__0441)>>2,fcache_load_ptr_
04ab8                 | LR__0441
04ab8     4B 99 02 F6 | 	mov	local02, local01
04abc     33 99 02 F1 | 	add	local02, objptr
04ac0     4B 9B 02 F6 | 	mov	local03, local01
04ac4     33 9B 02 F1 | 	add	local03, objptr
04ac8     4D 9D C2 FA | 	rdbyte	local04, local03
04acc     01 9C 86 F1 | 	sub	local04, #1
04ad0     4C 9D 42 FC | 	wrbyte	local04, local02
04ad4     4B 9F 02 F6 | 	mov	local05, local01
04ad8     33 9F 02 F1 | 	add	local05, objptr
04adc     4F A1 CA FA | 	rdbyte	local06, local05 wz
04ae0     58 00 90 AD |  if_e	jmp	#LR__0443
04ae4                 | LR__0442
04ae4     04 96 86 F1 | 	sub	local01, #4
04ae8     0E 96 46 F7 | 	zerox	local01, #14
04aec     4B 99 02 F6 | 	mov	local02, local01
04af0     33 99 02 F1 | 	add	local02, objptr
04af4     4B 9B 02 F6 | 	mov	local03, local01
04af8     33 9B 02 F1 | 	add	local03, objptr
04afc     4D 9D C2 FA | 	rdbyte	local04, local03
04b00     01 9C 06 F1 | 	add	local04, #1
04b04     4C 9D 42 FC | 	wrbyte	local04, local02
04b08     04 96 06 F1 | 	add	local01, #4
04b0c     0E 96 46 F7 | 	zerox	local01, #14
04b10     4B 99 02 F6 | 	mov	local02, local01
04b14     33 99 02 F1 | 	add	local02, objptr
04b18     4B 9B 02 F6 | 	mov	local03, local01
04b1c     33 9B 02 F1 | 	add	local03, objptr
04b20     4D 9D C2 FA | 	rdbyte	local04, local03
04b24     01 9C 86 F1 | 	sub	local04, #1
04b28     4C 9D 42 FC | 	wrbyte	local04, local02
04b2c     4B 9F 02 F6 | 	mov	local05, local01
04b30     33 9F 02 F1 | 	add	local05, objptr
04b34     4F A1 CA FA | 	rdbyte	local06, local05 wz
04b38     A8 FF 9F 5D |  if_ne	jmp	#LR__0442
04b3c                 | LR__0443
04b3c     04 96 86 F1 | 	sub	local01, #4
04b40     0E 96 46 F7 | 	zerox	local01, #14
04b44     4B 9F 02 F6 | 	mov	local05, local01
04b48     33 9F 02 F1 | 	add	local05, objptr
04b4c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04b50     64 FF 9F 5D |  if_ne	jmp	#LR__0441
04b54                 | LR__0444
04b54                 | LR__0445
04b54     08 96 86 F1 | 	sub	local01, #8
04b58     0E 96 46 F7 | 	zerox	local01, #14
04b5c     4B 9F 02 F6 | 	mov	local05, local01
04b60     33 9F 02 F1 | 	add	local05, objptr
04b64     4F A1 CA FA | 	rdbyte	local06, local05 wz
04b68     64 F5 9F 5D |  if_ne	jmp	#LR__0387
04b6c                 | LR__0446
04b6c     0A 96 86 F1 | 	sub	local01, #10
04b70     0E 96 46 F7 | 	zerox	local01, #14
04b74     4B 99 02 F6 | 	mov	local02, local01
04b78     33 99 02 F1 | 	add	local02, objptr
04b7c     4B 9B 02 F6 | 	mov	local03, local01
04b80     33 9B 02 F1 | 	add	local03, objptr
04b84     4D 9D C2 FA | 	rdbyte	local04, local03
04b88     0A 9C 06 F1 | 	add	local04, #10
04b8c     4C 9D 42 FC | 	wrbyte	local04, local02
04b90     4B 9F 02 F6 | 	mov	local05, local01
04b94     33 9F 02 F1 | 	add	local05, objptr
04b98     4F A1 CA FA | 	rdbyte	local06, local05 wz
04b9c     AC 20 90 AD |  if_e	jmp	#LR__0632
04ba0                 | LR__0447
04ba0     01 96 06 F1 | 	add	local01, #1
04ba4     0E 96 46 F7 | 	zerox	local01, #14
04ba8     4B 99 02 F6 | 	mov	local02, local01
04bac     33 99 02 F1 | 	add	local02, objptr
04bb0     4B A5 02 F6 | 	mov	local08, local01
04bb4     52 9B 02 F6 | 	mov	local03, local08
04bb8     33 A7 02 F6 | 	mov	local09, objptr
04bbc     33 9B 02 F1 | 	add	local03, objptr
04bc0     4D 9D C2 FA | 	rdbyte	local04, local03
04bc4     0A 9C 06 F1 | 	add	local04, #10
04bc8     4C 9D 42 FC | 	wrbyte	local04, local02
04bcc     4B 9F 02 F6 | 	mov	local05, local01
04bd0     33 9F 02 F1 | 	add	local05, objptr
04bd4     4F A1 CA FA | 	rdbyte	local06, local05 wz
04bd8     3C 20 90 AD |  if_e	jmp	#LR__0631
04bdc                 | LR__0448
04bdc     01 96 86 F1 | 	sub	local01, #1
04be0     0E 96 46 F7 | 	zerox	local01, #14
04be4     4B 9F 02 F6 | 	mov	local05, local01
04be8     33 9F 02 F1 | 	add	local05, objptr
04bec     4F A1 CA FA | 	rdbyte	local06, local05 wz
04bf0     64 00 90 AD |  if_e	jmp	#LR__0451
04bf4     D7 30 48 FB | 	callpa	#(@LR__0450-@LR__0449)>>2,fcache_load_ptr_
04bf8                 | LR__0449
04bf8     02 96 06 F1 | 	add	local01, #2
04bfc     0E 96 46 F7 | 	zerox	local01, #14
04c00     4B 99 02 F6 | 	mov	local02, local01
04c04     33 99 02 F1 | 	add	local02, objptr
04c08     4B 9B 02 F6 | 	mov	local03, local01
04c0c     33 9B 02 F1 | 	add	local03, objptr
04c10     4D 9D C2 FA | 	rdbyte	local04, local03
04c14     01 9C 06 F1 | 	add	local04, #1
04c18     4C 9D 42 FC | 	wrbyte	local04, local02
04c1c     02 96 86 F1 | 	sub	local01, #2
04c20     0E 96 46 F7 | 	zerox	local01, #14
04c24     4B 99 02 F6 | 	mov	local02, local01
04c28     33 99 02 F1 | 	add	local02, objptr
04c2c     4B A5 02 F6 | 	mov	local08, local01
04c30     52 9B 02 F6 | 	mov	local03, local08
04c34     33 A7 02 F6 | 	mov	local09, objptr
04c38     33 9B 02 F1 | 	add	local03, objptr
04c3c     4D 9D C2 FA | 	rdbyte	local04, local03
04c40     01 9C 86 F1 | 	sub	local04, #1
04c44     4C 9D 42 FC | 	wrbyte	local04, local02
04c48     4B 9F 02 F6 | 	mov	local05, local01
04c4c     33 9F 02 F1 | 	add	local05, objptr
04c50     4F A1 CA FA | 	rdbyte	local06, local05 wz
04c54     A0 FF 9F 5D |  if_ne	jmp	#LR__0449
04c58                 | LR__0450
04c58                 | LR__0451
04c58     02 96 06 F1 | 	add	local01, #2
04c5c     0E 96 46 F7 | 	zerox	local01, #14
04c60     4B 9F 02 F6 | 	mov	local05, local01
04c64     33 9F 02 F1 | 	add	local05, objptr
04c68     4F A1 CA FA | 	rdbyte	local06, local05 wz
04c6c     80 00 90 AD |  if_e	jmp	#LR__0454
04c70     D7 3E 48 FB | 	callpa	#(@LR__0453-@LR__0452)>>2,fcache_load_ptr_
04c74                 | LR__0452
04c74     02 96 86 F1 | 	sub	local01, #2
04c78     0E 96 46 F7 | 	zerox	local01, #14
04c7c     4B 99 02 F6 | 	mov	local02, local01
04c80     33 99 02 F1 | 	add	local02, objptr
04c84     4B 9B 02 F6 | 	mov	local03, local01
04c88     33 9B 02 F1 | 	add	local03, objptr
04c8c     4D 9D C2 FA | 	rdbyte	local04, local03
04c90     01 9C 06 F1 | 	add	local04, #1
04c94     4C 9D 42 FC | 	wrbyte	local04, local02
04c98     05 96 06 F1 | 	add	local01, #5
04c9c     0E 96 46 F7 | 	zerox	local01, #14
04ca0     4B 99 02 F6 | 	mov	local02, local01
04ca4     33 99 02 F1 | 	add	local02, objptr
04ca8     4B 9B 02 F6 | 	mov	local03, local01
04cac     33 9B 02 F1 | 	add	local03, objptr
04cb0     4D 9D C2 FA | 	rdbyte	local04, local03
04cb4     0B 9C 06 F1 | 	add	local04, #11
04cb8     4C 9D 42 FC | 	wrbyte	local04, local02
04cbc     03 96 86 F1 | 	sub	local01, #3
04cc0     0E 96 46 F7 | 	zerox	local01, #14
04cc4     4B 99 02 F6 | 	mov	local02, local01
04cc8     33 99 02 F1 | 	add	local02, objptr
04ccc     4B 9B 02 F6 | 	mov	local03, local01
04cd0     33 9B 02 F1 | 	add	local03, objptr
04cd4     4D 9D C2 FA | 	rdbyte	local04, local03
04cd8     01 9C 86 F1 | 	sub	local04, #1
04cdc     4C 9D 42 FC | 	wrbyte	local04, local02
04ce0     4B 9F 02 F6 | 	mov	local05, local01
04ce4     33 9F 02 F1 | 	add	local05, objptr
04ce8     4F A1 CA FA | 	rdbyte	local06, local05 wz
04cec     84 FF 9F 5D |  if_ne	jmp	#LR__0452
04cf0                 | LR__0453
04cf0                 | LR__0454
04cf0     01 96 86 F1 | 	sub	local01, #1
04cf4     0E 96 46 F7 | 	zerox	local01, #14
04cf8     4B 9F 02 F6 | 	mov	local05, local01
04cfc     33 9F 02 F1 | 	add	local05, objptr
04d00     4F A1 CA FA | 	rdbyte	local06, local05 wz
04d04     5C 00 90 AD |  if_e	jmp	#LR__0457
04d08     D7 2C 48 FB | 	callpa	#(@LR__0456-@LR__0455)>>2,fcache_load_ptr_
04d0c                 | LR__0455
04d0c     01 96 06 F1 | 	add	local01, #1
04d10     0E 96 46 F7 | 	zerox	local01, #14
04d14     4B 99 02 F6 | 	mov	local02, local01
04d18     33 99 02 F1 | 	add	local02, objptr
04d1c     4B 9B 02 F6 | 	mov	local03, local01
04d20     33 9B 02 F1 | 	add	local03, objptr
04d24     4D 9D C2 FA | 	rdbyte	local04, local03
04d28     01 9C 06 F1 | 	add	local04, #1
04d2c     4C 9D 42 FC | 	wrbyte	local04, local02
04d30     01 96 86 F1 | 	sub	local01, #1
04d34     0E 96 46 F7 | 	zerox	local01, #14
04d38     4B 99 02 F6 | 	mov	local02, local01
04d3c     33 99 02 F1 | 	add	local02, objptr
04d40     4B 9B 02 F6 | 	mov	local03, local01
04d44     33 9B 02 F1 | 	add	local03, objptr
04d48     4D 9D C2 FA | 	rdbyte	local04, local03
04d4c     01 9C 86 F1 | 	sub	local04, #1
04d50     4C 9D 42 FC | 	wrbyte	local04, local02
04d54     4B 9F 02 F6 | 	mov	local05, local01
04d58     33 9F 02 F1 | 	add	local05, objptr
04d5c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04d60     A8 FF 9F 5D |  if_ne	jmp	#LR__0455
04d64                 | LR__0456
04d64                 | LR__0457
04d64     01 96 06 F1 | 	add	local01, #1
04d68     0E 96 46 F7 | 	zerox	local01, #14
04d6c     4B 9F 02 F6 | 	mov	local05, local01
04d70     33 9F 02 F1 | 	add	local05, objptr
04d74     4F A1 CA FA | 	rdbyte	local06, local05 wz
04d78     80 00 90 AD |  if_e	jmp	#LR__0460
04d7c     D7 3E 48 FB | 	callpa	#(@LR__0459-@LR__0458)>>2,fcache_load_ptr_
04d80                 | LR__0458
04d80     01 96 86 F1 | 	sub	local01, #1
04d84     0E 96 46 F7 | 	zerox	local01, #14
04d88     4B 99 02 F6 | 	mov	local02, local01
04d8c     33 99 02 F1 | 	add	local02, objptr
04d90     4B 9B 02 F6 | 	mov	local03, local01
04d94     33 9B 02 F1 | 	add	local03, objptr
04d98     4D 9D C2 FA | 	rdbyte	local04, local03
04d9c     01 9C 06 F1 | 	add	local04, #1
04da0     4C 9D 42 FC | 	wrbyte	local04, local02
04da4     04 96 06 F1 | 	add	local01, #4
04da8     0E 96 46 F7 | 	zerox	local01, #14
04dac     4B 99 02 F6 | 	mov	local02, local01
04db0     33 99 02 F1 | 	add	local02, objptr
04db4     4B 9B 02 F6 | 	mov	local03, local01
04db8     33 9B 02 F1 | 	add	local03, objptr
04dbc     4D 9D C2 FA | 	rdbyte	local04, local03
04dc0     01 9C 06 F1 | 	add	local04, #1
04dc4     4C 9D 42 FC | 	wrbyte	local04, local02
04dc8     03 96 86 F1 | 	sub	local01, #3
04dcc     0E 96 46 F7 | 	zerox	local01, #14
04dd0     4B 99 02 F6 | 	mov	local02, local01
04dd4     33 99 02 F1 | 	add	local02, objptr
04dd8     4B 9B 02 F6 | 	mov	local03, local01
04ddc     33 9B 02 F1 | 	add	local03, objptr
04de0     4D 9D C2 FA | 	rdbyte	local04, local03
04de4     01 9C 86 F1 | 	sub	local04, #1
04de8     4C 9D 42 FC | 	wrbyte	local04, local02
04dec     4B 9F 02 F6 | 	mov	local05, local01
04df0     33 9F 02 F1 | 	add	local05, objptr
04df4     4F A1 CA FA | 	rdbyte	local06, local05 wz
04df8     84 FF 9F 5D |  if_ne	jmp	#LR__0458
04dfc                 | LR__0459
04dfc                 | LR__0460
04dfc     03 96 06 F1 | 	add	local01, #3
04e00     0E 96 46 F7 | 	zerox	local01, #14
04e04     4B 9F 02 F6 | 	mov	local05, local01
04e08     33 9F 02 F1 | 	add	local05, objptr
04e0c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04e10     5C 00 90 AD |  if_e	jmp	#LR__0463
04e14     D7 2C 48 FB | 	callpa	#(@LR__0462-@LR__0461)>>2,fcache_load_ptr_
04e18                 | LR__0461
04e18     03 96 86 F1 | 	sub	local01, #3
04e1c     0E 96 46 F7 | 	zerox	local01, #14
04e20     4B 99 02 F6 | 	mov	local02, local01
04e24     33 99 02 F1 | 	add	local02, objptr
04e28     4B 9B 02 F6 | 	mov	local03, local01
04e2c     33 9B 02 F1 | 	add	local03, objptr
04e30     4D 9D C2 FA | 	rdbyte	local04, local03
04e34     01 9C 06 F1 | 	add	local04, #1
04e38     4C 9D 42 FC | 	wrbyte	local04, local02
04e3c     03 96 06 F1 | 	add	local01, #3
04e40     0E 96 46 F7 | 	zerox	local01, #14
04e44     4B 99 02 F6 | 	mov	local02, local01
04e48     33 99 02 F1 | 	add	local02, objptr
04e4c     4B 9B 02 F6 | 	mov	local03, local01
04e50     33 9B 02 F1 | 	add	local03, objptr
04e54     4D 9D C2 FA | 	rdbyte	local04, local03
04e58     01 9C 86 F1 | 	sub	local04, #1
04e5c     4C 9D 42 FC | 	wrbyte	local04, local02
04e60     4B 9F 02 F6 | 	mov	local05, local01
04e64     33 9F 02 F1 | 	add	local05, objptr
04e68     4F A1 CA FA | 	rdbyte	local06, local05 wz
04e6c     A8 FF 9F 5D |  if_ne	jmp	#LR__0461
04e70                 | LR__0462
04e70                 | LR__0463
04e70     03 96 86 F1 | 	sub	local01, #3
04e74     0E 96 46 F7 | 	zerox	local01, #14
04e78     4B 9F 02 F6 | 	mov	local05, local01
04e7c     33 9F 02 F1 | 	add	local05, objptr
04e80     4F A1 CA FA | 	rdbyte	local06, local05 wz
04e84     80 00 90 AD |  if_e	jmp	#LR__0466
04e88     D7 3E 48 FB | 	callpa	#(@LR__0465-@LR__0464)>>2,fcache_load_ptr_
04e8c                 | LR__0464
04e8c     03 96 06 F1 | 	add	local01, #3
04e90     0E 96 46 F7 | 	zerox	local01, #14
04e94     4B 99 02 F6 | 	mov	local02, local01
04e98     33 99 02 F1 | 	add	local02, objptr
04e9c     4B 9B 02 F6 | 	mov	local03, local01
04ea0     33 9B 02 F1 | 	add	local03, objptr
04ea4     4D 9D C2 FA | 	rdbyte	local04, local03
04ea8     01 9C 06 F1 | 	add	local04, #1
04eac     4C 9D 42 FC | 	wrbyte	local04, local02
04eb0     05 96 06 F1 | 	add	local01, #5
04eb4     0E 96 46 F7 | 	zerox	local01, #14
04eb8     4B 99 02 F6 | 	mov	local02, local01
04ebc     33 99 02 F1 | 	add	local02, objptr
04ec0     4B 9B 02 F6 | 	mov	local03, local01
04ec4     33 9B 02 F1 | 	add	local03, objptr
04ec8     4D 9D C2 FA | 	rdbyte	local04, local03
04ecc     01 9C 06 F1 | 	add	local04, #1
04ed0     4C 9D 42 FC | 	wrbyte	local04, local02
04ed4     08 96 86 F1 | 	sub	local01, #8
04ed8     0E 96 46 F7 | 	zerox	local01, #14
04edc     4B 99 02 F6 | 	mov	local02, local01
04ee0     33 99 02 F1 | 	add	local02, objptr
04ee4     4B 9B 02 F6 | 	mov	local03, local01
04ee8     33 9B 02 F1 | 	add	local03, objptr
04eec     4D 9D C2 FA | 	rdbyte	local04, local03
04ef0     01 9C 86 F1 | 	sub	local04, #1
04ef4     4C 9D 42 FC | 	wrbyte	local04, local02
04ef8     4B 9F 02 F6 | 	mov	local05, local01
04efc     33 9F 02 F1 | 	add	local05, objptr
04f00     4F A1 CA FA | 	rdbyte	local06, local05 wz
04f04     84 FF 9F 5D |  if_ne	jmp	#LR__0464
04f08                 | LR__0465
04f08                 | LR__0466
04f08     09 96 06 F1 | 	add	local01, #9
04f0c     0E 96 46 F7 | 	zerox	local01, #14
04f10     4B 9F 02 F6 | 	mov	local05, local01
04f14     33 9F 02 F1 | 	add	local05, objptr
04f18     4F A1 CA FA | 	rdbyte	local06, local05 wz
04f1c     5C 00 90 AD |  if_e	jmp	#LR__0469
04f20     D7 2C 48 FB | 	callpa	#(@LR__0468-@LR__0467)>>2,fcache_load_ptr_
04f24                 | LR__0467
04f24     02 96 06 F1 | 	add	local01, #2
04f28     0E 96 46 F7 | 	zerox	local01, #14
04f2c     4B 99 02 F6 | 	mov	local02, local01
04f30     33 99 02 F1 | 	add	local02, objptr
04f34     4B 9B 02 F6 | 	mov	local03, local01
04f38     33 9B 02 F1 | 	add	local03, objptr
04f3c     4D 9D C2 FA | 	rdbyte	local04, local03
04f40     01 9C 06 F1 | 	add	local04, #1
04f44     4C 9D 42 FC | 	wrbyte	local04, local02
04f48     02 96 86 F1 | 	sub	local01, #2
04f4c     0E 96 46 F7 | 	zerox	local01, #14
04f50     4B 99 02 F6 | 	mov	local02, local01
04f54     33 99 02 F1 | 	add	local02, objptr
04f58     4B 9B 02 F6 | 	mov	local03, local01
04f5c     33 9B 02 F1 | 	add	local03, objptr
04f60     4D 9D C2 FA | 	rdbyte	local04, local03
04f64     01 9C 86 F1 | 	sub	local04, #1
04f68     4C 9D 42 FC | 	wrbyte	local04, local02
04f6c     4B 9F 02 F6 | 	mov	local05, local01
04f70     33 9F 02 F1 | 	add	local05, objptr
04f74     4F A1 CA FA | 	rdbyte	local06, local05 wz
04f78     A8 FF 9F 5D |  if_ne	jmp	#LR__0467
04f7c                 | LR__0468
04f7c                 | LR__0469
04f7c     02 96 06 F1 | 	add	local01, #2
04f80     0E 96 46 F7 | 	zerox	local01, #14
04f84     4B 9F 02 F6 | 	mov	local05, local01
04f88     33 9F 02 F1 | 	add	local05, objptr
04f8c     4F A1 CA FA | 	rdbyte	local06, local05 wz
04f90     80 00 90 AD |  if_e	jmp	#LR__0472
04f94     D7 3E 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
04f98                 | LR__0470
04f98     02 96 86 F1 | 	sub	local01, #2
04f9c     0E 96 46 F7 | 	zerox	local01, #14
04fa0     4B 99 02 F6 | 	mov	local02, local01
04fa4     33 99 02 F1 | 	add	local02, objptr
04fa8     4B 9B 02 F6 | 	mov	local03, local01
04fac     33 9B 02 F1 | 	add	local03, objptr
04fb0     4D 9D C2 FA | 	rdbyte	local04, local03
04fb4     01 9C 06 F1 | 	add	local04, #1
04fb8     4C 9D 42 FC | 	wrbyte	local04, local02
04fbc     01 96 86 F1 | 	sub	local01, #1
04fc0     0E 96 46 F7 | 	zerox	local01, #14
04fc4     4B 99 02 F6 | 	mov	local02, local01
04fc8     33 99 02 F1 | 	add	local02, objptr
04fcc     4B 9B 02 F6 | 	mov	local03, local01
04fd0     33 9B 02 F1 | 	add	local03, objptr
04fd4     4D 9D C2 FA | 	rdbyte	local04, local03
04fd8     01 9C 06 F1 | 	add	local04, #1
04fdc     4C 9D 42 FC | 	wrbyte	local04, local02
04fe0     03 96 06 F1 | 	add	local01, #3
04fe4     0E 96 46 F7 | 	zerox	local01, #14
04fe8     4B 99 02 F6 | 	mov	local02, local01
04fec     33 99 02 F1 | 	add	local02, objptr
04ff0     4B 9B 02 F6 | 	mov	local03, local01
04ff4     33 9B 02 F1 | 	add	local03, objptr
04ff8     4D 9D C2 FA | 	rdbyte	local04, local03
04ffc     01 9C 86 F1 | 	sub	local04, #1
05000     4C 9D 42 FC | 	wrbyte	local04, local02
05004     4B 9F 02 F6 | 	mov	local05, local01
05008     33 9F 02 F1 | 	add	local05, objptr
0500c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05010     84 FF 9F 5D |  if_ne	jmp	#LR__0470
05014                 | LR__0471
05014                 | LR__0472
05014     03 96 86 F1 | 	sub	local01, #3
05018     0E 96 46 F7 | 	zerox	local01, #14
0501c     4B 99 02 F6 | 	mov	local02, local01
05020     33 99 02 F1 | 	add	local02, objptr
05024     4B A5 02 F6 | 	mov	local08, local01
05028     52 9B 02 F6 | 	mov	local03, local08
0502c     33 A7 02 F6 | 	mov	local09, objptr
05030     33 9B 02 F1 | 	add	local03, objptr
05034     4D 9D C2 FA | 	rdbyte	local04, local03
05038     0C 9C 86 F1 | 	sub	local04, #12
0503c     4C 9D 42 FC | 	wrbyte	local04, local02
05040     4B 9F 02 F6 | 	mov	local05, local01
05044     33 9F 02 F1 | 	add	local05, objptr
05048     4F A1 CA FA | 	rdbyte	local06, local05 wz
0504c     64 00 90 AD |  if_e	jmp	#LR__0475
05050     D7 30 48 FB | 	callpa	#(@LR__0474-@LR__0473)>>2,fcache_load_ptr_
05054                 | LR__0473
05054     03 96 06 F1 | 	add	local01, #3
05058     0E 96 46 F7 | 	zerox	local01, #14
0505c     4B 99 02 F6 | 	mov	local02, local01
05060     33 99 02 F1 | 	add	local02, objptr
05064     4B 9B 02 F6 | 	mov	local03, local01
05068     33 9B 02 F1 | 	add	local03, objptr
0506c     4D 9D C2 FA | 	rdbyte	local04, local03
05070     01 9C 06 F1 | 	add	local04, #1
05074     4C 9D 42 FC | 	wrbyte	local04, local02
05078     03 96 86 F1 | 	sub	local01, #3
0507c     0E 96 46 F7 | 	zerox	local01, #14
05080     4B 99 02 F6 | 	mov	local02, local01
05084     33 99 02 F1 | 	add	local02, objptr
05088     4B A5 02 F6 | 	mov	local08, local01
0508c     52 9B 02 F6 | 	mov	local03, local08
05090     33 A7 02 F6 | 	mov	local09, objptr
05094     33 9B 02 F1 | 	add	local03, objptr
05098     4D 9D C2 FA | 	rdbyte	local04, local03
0509c     01 9C 86 F1 | 	sub	local04, #1
050a0     4C 9D 42 FC | 	wrbyte	local04, local02
050a4     4B 9F 02 F6 | 	mov	local05, local01
050a8     33 9F 02 F1 | 	add	local05, objptr
050ac     4F A1 CA FA | 	rdbyte	local06, local05 wz
050b0     A0 FF 9F 5D |  if_ne	jmp	#LR__0473
050b4                 | LR__0474
050b4                 | LR__0475
050b4     03 96 06 F1 | 	add	local01, #3
050b8     0E 96 46 F7 | 	zerox	local01, #14
050bc     4B 9F 02 F6 | 	mov	local05, local01
050c0     33 9F 02 F1 | 	add	local05, objptr
050c4     4F A1 CA FA | 	rdbyte	local06, local05 wz
050c8     AC 00 90 AD |  if_e	jmp	#LR__0478
050cc     D7 54 48 FB | 	callpa	#(@LR__0477-@LR__0476)>>2,fcache_load_ptr_
050d0                 | LR__0476
050d0     03 96 86 F1 | 	sub	local01, #3
050d4     0E 96 46 F7 | 	zerox	local01, #14
050d8     4B 99 02 F6 | 	mov	local02, local01
050dc     33 99 02 F1 | 	add	local02, objptr
050e0     4B 9B 02 F6 | 	mov	local03, local01
050e4     33 9B 02 F1 | 	add	local03, objptr
050e8     4D 9D C2 FA | 	rdbyte	local04, local03
050ec     01 9C 06 F1 | 	add	local04, #1
050f0     4C 9D 42 FC | 	wrbyte	local04, local02
050f4     07 96 06 F1 | 	add	local01, #7
050f8     0E 96 46 F7 | 	zerox	local01, #14
050fc     4B 99 02 F6 | 	mov	local02, local01
05100     33 99 02 F1 | 	add	local02, objptr
05104     4B 9B 02 F6 | 	mov	local03, local01
05108     33 9B 02 F1 | 	add	local03, objptr
0510c     4D 9D C2 FA | 	rdbyte	local04, local03
05110     01 9C 06 F1 | 	add	local04, #1
05114     4C 9D 42 FC | 	wrbyte	local04, local02
05118     01 96 06 F1 | 	add	local01, #1
0511c     0E 96 46 F7 | 	zerox	local01, #14
05120     4B 99 02 F6 | 	mov	local02, local01
05124     33 99 02 F1 | 	add	local02, objptr
05128     4B 9B 02 F6 | 	mov	local03, local01
0512c     33 9B 02 F1 | 	add	local03, objptr
05130     4D 9D C2 FA | 	rdbyte	local04, local03
05134     01 9C 06 F1 | 	add	local04, #1
05138     4C 9D 42 FC | 	wrbyte	local04, local02
0513c     05 96 86 F1 | 	sub	local01, #5
05140     0E 96 46 F7 | 	zerox	local01, #14
05144     4B 99 02 F6 | 	mov	local02, local01
05148     33 99 02 F1 | 	add	local02, objptr
0514c     4B A5 02 F6 | 	mov	local08, local01
05150     52 9B 02 F6 | 	mov	local03, local08
05154     33 A7 02 F6 | 	mov	local09, objptr
05158     33 9B 02 F1 | 	add	local03, objptr
0515c     4D 9D C2 FA | 	rdbyte	local04, local03
05160     01 9C 86 F1 | 	sub	local04, #1
05164     4C 9D 42 FC | 	wrbyte	local04, local02
05168     4B 9F 02 F6 | 	mov	local05, local01
0516c     33 9F 02 F1 | 	add	local05, objptr
05170     4F A1 CA FA | 	rdbyte	local06, local05 wz
05174     58 FF 9F 5D |  if_ne	jmp	#LR__0476
05178                 | LR__0477
05178                 | LR__0478
05178     04 96 06 F1 | 	add	local01, #4
0517c     0E 96 46 F7 | 	zerox	local01, #14
05180     4B 9F 02 F6 | 	mov	local05, local01
05184     33 9F 02 F1 | 	add	local05, objptr
05188     4F A1 CA FA | 	rdbyte	local06, local05 wz
0518c     28 01 90 AD |  if_e	jmp	#LR__0485
05190     D7 92 48 FB | 	callpa	#(@LR__0484-@LR__0479)>>2,fcache_load_ptr_
05194                 | LR__0479
05194     4B 99 02 F6 | 	mov	local02, local01
05198     33 99 02 F1 | 	add	local02, objptr
0519c     4B A5 02 F6 | 	mov	local08, local01
051a0     52 9B 02 F6 | 	mov	local03, local08
051a4     33 A7 02 F6 | 	mov	local09, objptr
051a8     33 9B 02 F1 | 	add	local03, objptr
051ac     4D 9D C2 FA | 	rdbyte	local04, local03
051b0     01 9C 86 F1 | 	sub	local04, #1
051b4     4C 9D 42 FC | 	wrbyte	local04, local02
051b8     4B 9F 02 F6 | 	mov	local05, local01
051bc     33 9F 02 F1 | 	add	local05, objptr
051c0     4F A1 CA FA | 	rdbyte	local06, local05 wz
051c4     60 00 90 AD |  if_e	jmp	#LR__0481
051c8                 | LR__0480
051c8     04 96 06 F1 | 	add	local01, #4
051cc     0E 96 46 F7 | 	zerox	local01, #14
051d0     4B 99 02 F6 | 	mov	local02, local01
051d4     33 99 02 F1 | 	add	local02, objptr
051d8     4B 9B 02 F6 | 	mov	local03, local01
051dc     33 9B 02 F1 | 	add	local03, objptr
051e0     4D 9D C2 FA | 	rdbyte	local04, local03
051e4     01 9C 06 F1 | 	add	local04, #1
051e8     4C 9D 42 FC | 	wrbyte	local04, local02
051ec     04 96 86 F1 | 	sub	local01, #4
051f0     0E 96 46 F7 | 	zerox	local01, #14
051f4     4B 99 02 F6 | 	mov	local02, local01
051f8     33 99 02 F1 | 	add	local02, objptr
051fc     4B A5 02 F6 | 	mov	local08, local01
05200     52 9B 02 F6 | 	mov	local03, local08
05204     33 A7 02 F6 | 	mov	local09, objptr
05208     33 9B 02 F1 | 	add	local03, objptr
0520c     4D 9D C2 FA | 	rdbyte	local04, local03
05210     01 9C 86 F1 | 	sub	local04, #1
05214     4C 9D 42 FC | 	wrbyte	local04, local02
05218     4B 9F 02 F6 | 	mov	local05, local01
0521c     33 9F 02 F1 | 	add	local05, objptr
05220     4F A1 CA FA | 	rdbyte	local06, local05 wz
05224     A0 FF 9F 5D |  if_ne	jmp	#LR__0480
05228                 | LR__0481
05228     01 96 06 F1 | 	add	local01, #1
0522c     0E 96 46 F7 | 	zerox	local01, #14
05230     4B 9F 02 F6 | 	mov	local05, local01
05234     33 9F 02 F1 | 	add	local05, objptr
05238     4F A1 CA FA | 	rdbyte	local06, local05 wz
0523c     60 00 90 AD |  if_e	jmp	#LR__0483
05240                 | LR__0482
05240     04 96 06 F1 | 	add	local01, #4
05244     0E 96 46 F7 | 	zerox	local01, #14
05248     4B 99 02 F6 | 	mov	local02, local01
0524c     33 99 02 F1 | 	add	local02, objptr
05250     4B 9B 02 F6 | 	mov	local03, local01
05254     33 9B 02 F1 | 	add	local03, objptr
05258     4D 9D C2 FA | 	rdbyte	local04, local03
0525c     01 9C 06 F1 | 	add	local04, #1
05260     4C 9D 42 FC | 	wrbyte	local04, local02
05264     04 96 86 F1 | 	sub	local01, #4
05268     0E 96 46 F7 | 	zerox	local01, #14
0526c     4B 99 02 F6 | 	mov	local02, local01
05270     33 99 02 F1 | 	add	local02, objptr
05274     4B A5 02 F6 | 	mov	local08, local01
05278     52 9B 02 F6 | 	mov	local03, local08
0527c     33 A7 02 F6 | 	mov	local09, objptr
05280     33 9B 02 F1 | 	add	local03, objptr
05284     4D 9D C2 FA | 	rdbyte	local04, local03
05288     01 9C 86 F1 | 	sub	local04, #1
0528c     4C 9D 42 FC | 	wrbyte	local04, local02
05290     4B 9F 02 F6 | 	mov	local05, local01
05294     33 9F 02 F1 | 	add	local05, objptr
05298     4F A1 CA FA | 	rdbyte	local06, local05 wz
0529c     A0 FF 9F 5D |  if_ne	jmp	#LR__0482
052a0                 | LR__0483
052a0     03 96 06 F1 | 	add	local01, #3
052a4     0E 96 46 F7 | 	zerox	local01, #14
052a8     4B 9F 02 F6 | 	mov	local05, local01
052ac     33 9F 02 F1 | 	add	local05, objptr
052b0     4F A1 CA FA | 	rdbyte	local06, local05 wz
052b4     DC FE 9F 5D |  if_ne	jmp	#LR__0479
052b8                 | LR__0484
052b8                 | LR__0485
052b8     03 96 06 F1 | 	add	local01, #3
052bc     0E 96 46 F7 | 	zerox	local01, #14
052c0     4B 9F 02 F6 | 	mov	local05, local01
052c4     33 9F 02 F1 | 	add	local05, objptr
052c8     4F A1 CA FA | 	rdbyte	local06, local05 wz
052cc     64 00 90 AD |  if_e	jmp	#LR__0488
052d0     D7 30 48 FB | 	callpa	#(@LR__0487-@LR__0486)>>2,fcache_load_ptr_
052d4                 | LR__0486
052d4     03 96 86 F1 | 	sub	local01, #3
052d8     0E 96 46 F7 | 	zerox	local01, #14
052dc     4B 99 02 F6 | 	mov	local02, local01
052e0     33 99 02 F1 | 	add	local02, objptr
052e4     4B 9B 02 F6 | 	mov	local03, local01
052e8     33 9B 02 F1 | 	add	local03, objptr
052ec     4D 9D C2 FA | 	rdbyte	local04, local03
052f0     01 9C 06 F1 | 	add	local04, #1
052f4     4C 9D 42 FC | 	wrbyte	local04, local02
052f8     03 96 06 F1 | 	add	local01, #3
052fc     0E 96 46 F7 | 	zerox	local01, #14
05300     4B 99 02 F6 | 	mov	local02, local01
05304     33 99 02 F1 | 	add	local02, objptr
05308     4B A5 02 F6 | 	mov	local08, local01
0530c     52 9B 02 F6 | 	mov	local03, local08
05310     33 A7 02 F6 | 	mov	local09, objptr
05314     33 9B 02 F1 | 	add	local03, objptr
05318     4D 9D C2 FA | 	rdbyte	local04, local03
0531c     01 9C 86 F1 | 	sub	local04, #1
05320     4C 9D 42 FC | 	wrbyte	local04, local02
05324     4B 9F 02 F6 | 	mov	local05, local01
05328     33 9F 02 F1 | 	add	local05, objptr
0532c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05330     A0 FF 9F 5D |  if_ne	jmp	#LR__0486
05334                 | LR__0487
05334                 | LR__0488
05334     03 96 86 F1 | 	sub	local01, #3
05338     0E 96 46 F7 | 	zerox	local01, #14
0533c     4B 9F 02 F6 | 	mov	local05, local01
05340     33 9F 02 F1 | 	add	local05, objptr
05344     4F A1 CA FA | 	rdbyte	local06, local05 wz
05348     80 00 90 AD |  if_e	jmp	#LR__0491
0534c     D7 3E 48 FB | 	callpa	#(@LR__0490-@LR__0489)>>2,fcache_load_ptr_
05350                 | LR__0489
05350     02 96 06 F1 | 	add	local01, #2
05354     0E 96 46 F7 | 	zerox	local01, #14
05358     4B 99 02 F6 | 	mov	local02, local01
0535c     33 99 02 F1 | 	add	local02, objptr
05360     4B 9B 02 F6 | 	mov	local03, local01
05364     33 9B 02 F1 | 	add	local03, objptr
05368     4D 9D C2 FA | 	rdbyte	local04, local03
0536c     01 9C 06 F1 | 	add	local04, #1
05370     4C 9D 42 FC | 	wrbyte	local04, local02
05374     01 96 06 F1 | 	add	local01, #1
05378     0E 96 46 F7 | 	zerox	local01, #14
0537c     4B 99 02 F6 | 	mov	local02, local01
05380     33 99 02 F1 | 	add	local02, objptr
05384     4B 9B 02 F6 | 	mov	local03, local01
05388     33 9B 02 F1 | 	add	local03, objptr
0538c     4D 9D C2 FA | 	rdbyte	local04, local03
05390     01 9C 06 F1 | 	add	local04, #1
05394     4C 9D 42 FC | 	wrbyte	local04, local02
05398     03 96 86 F1 | 	sub	local01, #3
0539c     0E 96 46 F7 | 	zerox	local01, #14
053a0     4B 99 02 F6 | 	mov	local02, local01
053a4     33 99 02 F1 | 	add	local02, objptr
053a8     4B 9B 02 F6 | 	mov	local03, local01
053ac     33 9B 02 F1 | 	add	local03, objptr
053b0     4D 9D C2 FA | 	rdbyte	local04, local03
053b4     01 9C 86 F1 | 	sub	local04, #1
053b8     4C 9D 42 FC | 	wrbyte	local04, local02
053bc     4B 9F 02 F6 | 	mov	local05, local01
053c0     33 9F 02 F1 | 	add	local05, objptr
053c4     4F A1 CA FA | 	rdbyte	local06, local05 wz
053c8     84 FF 9F 5D |  if_ne	jmp	#LR__0489
053cc                 | LR__0490
053cc                 | LR__0491
053cc     07 96 06 F1 | 	add	local01, #7
053d0     0E 96 46 F7 | 	zerox	local01, #14
053d4     4B 9F 02 F6 | 	mov	local05, local01
053d8     33 9F 02 F1 | 	add	local05, objptr
053dc     4F A1 CA FA | 	rdbyte	local06, local05 wz
053e0     5C 00 90 AD |  if_e	jmp	#LR__0494
053e4     D7 2C 48 FB | 	callpa	#(@LR__0493-@LR__0492)>>2,fcache_load_ptr_
053e8                 | LR__0492
053e8     03 96 86 F1 | 	sub	local01, #3
053ec     0E 96 46 F7 | 	zerox	local01, #14
053f0     4B 99 02 F6 | 	mov	local02, local01
053f4     33 99 02 F1 | 	add	local02, objptr
053f8     4B 9B 02 F6 | 	mov	local03, local01
053fc     33 9B 02 F1 | 	add	local03, objptr
05400     4D 9D C2 FA | 	rdbyte	local04, local03
05404     01 9C 06 F1 | 	add	local04, #1
05408     4C 9D 42 FC | 	wrbyte	local04, local02
0540c     03 96 06 F1 | 	add	local01, #3
05410     0E 96 46 F7 | 	zerox	local01, #14
05414     4B 99 02 F6 | 	mov	local02, local01
05418     33 99 02 F1 | 	add	local02, objptr
0541c     4B 9B 02 F6 | 	mov	local03, local01
05420     33 9B 02 F1 | 	add	local03, objptr
05424     4D 9D C2 FA | 	rdbyte	local04, local03
05428     01 9C 86 F1 | 	sub	local04, #1
0542c     4C 9D 42 FC | 	wrbyte	local04, local02
05430     4B 9F 02 F6 | 	mov	local05, local01
05434     33 9F 02 F1 | 	add	local05, objptr
05438     4F A1 CA FA | 	rdbyte	local06, local05 wz
0543c     A8 FF 9F 5D |  if_ne	jmp	#LR__0492
05440                 | LR__0493
05440                 | LR__0494
05440     03 96 86 F1 | 	sub	local01, #3
05444     0E 96 46 F7 | 	zerox	local01, #14
05448     4B 9F 02 F6 | 	mov	local05, local01
0544c     33 9F 02 F1 | 	add	local05, objptr
05450     4F A1 CA FA | 	rdbyte	local06, local05 wz
05454     80 00 90 AD |  if_e	jmp	#LR__0497
05458     D7 3E 48 FB | 	callpa	#(@LR__0496-@LR__0495)>>2,fcache_load_ptr_
0545c                 | LR__0495
0545c     03 96 06 F1 | 	add	local01, #3
05460     0E 96 46 F7 | 	zerox	local01, #14
05464     4B 99 02 F6 | 	mov	local02, local01
05468     33 99 02 F1 | 	add	local02, objptr
0546c     4B 9B 02 F6 | 	mov	local03, local01
05470     33 9B 02 F1 | 	add	local03, objptr
05474     4D 9D C2 FA | 	rdbyte	local04, local03
05478     01 9C 06 F1 | 	add	local04, #1
0547c     4C 9D 42 FC | 	wrbyte	local04, local02
05480     05 96 86 F1 | 	sub	local01, #5
05484     0E 96 46 F7 | 	zerox	local01, #14
05488     4B 99 02 F6 | 	mov	local02, local01
0548c     33 99 02 F1 | 	add	local02, objptr
05490     4B 9B 02 F6 | 	mov	local03, local01
05494     33 9B 02 F1 | 	add	local03, objptr
05498     4D 9D C2 FA | 	rdbyte	local04, local03
0549c     01 9C 06 F1 | 	add	local04, #1
054a0     4C 9D 42 FC | 	wrbyte	local04, local02
054a4     02 96 06 F1 | 	add	local01, #2
054a8     0E 96 46 F7 | 	zerox	local01, #14
054ac     4B 99 02 F6 | 	mov	local02, local01
054b0     33 99 02 F1 | 	add	local02, objptr
054b4     4B 9B 02 F6 | 	mov	local03, local01
054b8     33 9B 02 F1 | 	add	local03, objptr
054bc     4D 9D C2 FA | 	rdbyte	local04, local03
054c0     01 9C 86 F1 | 	sub	local04, #1
054c4     4C 9D 42 FC | 	wrbyte	local04, local02
054c8     4B 9F 02 F6 | 	mov	local05, local01
054cc     33 9F 02 F1 | 	add	local05, objptr
054d0     4F A1 CA FA | 	rdbyte	local06, local05 wz
054d4     84 FF 9F 5D |  if_ne	jmp	#LR__0495
054d8                 | LR__0496
054d8                 | LR__0497
054d8     07 96 06 F1 | 	add	local01, #7
054dc     0E 96 46 F7 | 	zerox	local01, #14
054e0     4B 9F 02 F6 | 	mov	local05, local01
054e4     33 9F 02 F1 | 	add	local05, objptr
054e8     4F A1 CA FA | 	rdbyte	local06, local05 wz
054ec     5C 00 90 AD |  if_e	jmp	#LR__0500
054f0     D7 2C 48 FB | 	callpa	#(@LR__0499-@LR__0498)>>2,fcache_load_ptr_
054f4                 | LR__0498
054f4     03 96 86 F1 | 	sub	local01, #3
054f8     0E 96 46 F7 | 	zerox	local01, #14
054fc     4B 99 02 F6 | 	mov	local02, local01
05500     33 99 02 F1 | 	add	local02, objptr
05504     4B 9B 02 F6 | 	mov	local03, local01
05508     33 9B 02 F1 | 	add	local03, objptr
0550c     4D 9D C2 FA | 	rdbyte	local04, local03
05510     01 9C 06 F1 | 	add	local04, #1
05514     4C 9D 42 FC | 	wrbyte	local04, local02
05518     03 96 06 F1 | 	add	local01, #3
0551c     0E 96 46 F7 | 	zerox	local01, #14
05520     4B 99 02 F6 | 	mov	local02, local01
05524     33 99 02 F1 | 	add	local02, objptr
05528     4B 9B 02 F6 | 	mov	local03, local01
0552c     33 9B 02 F1 | 	add	local03, objptr
05530     4D 9D C2 FA | 	rdbyte	local04, local03
05534     01 9C 86 F1 | 	sub	local04, #1
05538     4C 9D 42 FC | 	wrbyte	local04, local02
0553c     4B 9F 02 F6 | 	mov	local05, local01
05540     33 9F 02 F1 | 	add	local05, objptr
05544     4F A1 CA FA | 	rdbyte	local06, local05 wz
05548     A8 FF 9F 5D |  if_ne	jmp	#LR__0498
0554c                 | LR__0499
0554c                 | LR__0500
0554c     03 96 86 F1 | 	sub	local01, #3
05550     0E 96 46 F7 | 	zerox	local01, #14
05554     4B 9F 02 F6 | 	mov	local05, local01
05558     33 9F 02 F1 | 	add	local05, objptr
0555c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05560     80 00 90 AD |  if_e	jmp	#LR__0503
05564     D7 3E 48 FB | 	callpa	#(@LR__0502-@LR__0501)>>2,fcache_load_ptr_
05568                 | LR__0501
05568     03 96 06 F1 | 	add	local01, #3
0556c     0E 96 46 F7 | 	zerox	local01, #14
05570     4B 99 02 F6 | 	mov	local02, local01
05574     33 99 02 F1 | 	add	local02, objptr
05578     4B 9B 02 F6 | 	mov	local03, local01
0557c     33 9B 02 F1 | 	add	local03, objptr
05580     4D 9D C2 FA | 	rdbyte	local04, local03
05584     01 9C 06 F1 | 	add	local04, #1
05588     4C 9D 42 FC | 	wrbyte	local04, local02
0558c     09 96 86 F1 | 	sub	local01, #9
05590     0E 96 46 F7 | 	zerox	local01, #14
05594     4B 99 02 F6 | 	mov	local02, local01
05598     33 99 02 F1 | 	add	local02, objptr
0559c     4B 9B 02 F6 | 	mov	local03, local01
055a0     33 9B 02 F1 | 	add	local03, objptr
055a4     4D 9D C2 FA | 	rdbyte	local04, local03
055a8     01 9C 06 F1 | 	add	local04, #1
055ac     4C 9D 42 FC | 	wrbyte	local04, local02
055b0     06 96 06 F1 | 	add	local01, #6
055b4     0E 96 46 F7 | 	zerox	local01, #14
055b8     4B 99 02 F6 | 	mov	local02, local01
055bc     33 99 02 F1 | 	add	local02, objptr
055c0     4B 9B 02 F6 | 	mov	local03, local01
055c4     33 9B 02 F1 | 	add	local03, objptr
055c8     4D 9D C2 FA | 	rdbyte	local04, local03
055cc     01 9C 86 F1 | 	sub	local04, #1
055d0     4C 9D 42 FC | 	wrbyte	local04, local02
055d4     4B 9F 02 F6 | 	mov	local05, local01
055d8     33 9F 02 F1 | 	add	local05, objptr
055dc     4F A1 CA FA | 	rdbyte	local06, local05 wz
055e0     84 FF 9F 5D |  if_ne	jmp	#LR__0501
055e4                 | LR__0502
055e4                 | LR__0503
055e4     07 96 86 F1 | 	sub	local01, #7
055e8     0E 96 46 F7 | 	zerox	local01, #14
055ec     4B 9F 02 F6 | 	mov	local05, local01
055f0     33 9F 02 F1 | 	add	local05, objptr
055f4     4F A1 CA FA | 	rdbyte	local06, local05 wz
055f8     18 01 90 AD |  if_e	jmp	#LR__0510
055fc     D7 8A 48 FB | 	callpa	#(@LR__0509-@LR__0504)>>2,fcache_load_ptr_
05600                 | LR__0504
05600     4B 99 02 F6 | 	mov	local02, local01
05604     33 99 02 F1 | 	add	local02, objptr
05608     4B 9B 02 F6 | 	mov	local03, local01
0560c     33 9B 02 F1 | 	add	local03, objptr
05610     4D 9D C2 FA | 	rdbyte	local04, local03
05614     01 9C 86 F1 | 	sub	local04, #1
05618     4C 9D 42 FC | 	wrbyte	local04, local02
0561c     01 96 06 F1 | 	add	local01, #1
05620     0E 96 46 F7 | 	zerox	local01, #14
05624     4B 9F 02 F6 | 	mov	local05, local01
05628     33 9F 02 F1 | 	add	local05, objptr
0562c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05630     58 00 90 AD |  if_e	jmp	#LR__0506
05634                 | LR__0505
05634     04 96 86 F1 | 	sub	local01, #4
05638     0E 96 46 F7 | 	zerox	local01, #14
0563c     4B 99 02 F6 | 	mov	local02, local01
05640     33 99 02 F1 | 	add	local02, objptr
05644     4B 9B 02 F6 | 	mov	local03, local01
05648     33 9B 02 F1 | 	add	local03, objptr
0564c     4D 9D C2 FA | 	rdbyte	local04, local03
05650     01 9C 06 F1 | 	add	local04, #1
05654     4C 9D 42 FC | 	wrbyte	local04, local02
05658     04 96 06 F1 | 	add	local01, #4
0565c     0E 96 46 F7 | 	zerox	local01, #14
05660     4B 99 02 F6 | 	mov	local02, local01
05664     33 99 02 F1 | 	add	local02, objptr
05668     4B 9B 02 F6 | 	mov	local03, local01
0566c     33 9B 02 F1 | 	add	local03, objptr
05670     4D 9D C2 FA | 	rdbyte	local04, local03
05674     01 9C 86 F1 | 	sub	local04, #1
05678     4C 9D 42 FC | 	wrbyte	local04, local02
0567c     4B 9F 02 F6 | 	mov	local05, local01
05680     33 9F 02 F1 | 	add	local05, objptr
05684     4F A1 CA FA | 	rdbyte	local06, local05 wz
05688     A8 FF 9F 5D |  if_ne	jmp	#LR__0505
0568c                 | LR__0506
0568c     01 96 86 F1 | 	sub	local01, #1
05690     0E 96 46 F7 | 	zerox	local01, #14
05694     4B 9F 02 F6 | 	mov	local05, local01
05698     33 9F 02 F1 | 	add	local05, objptr
0569c     4F A1 CA FA | 	rdbyte	local06, local05 wz
056a0     58 00 90 AD |  if_e	jmp	#LR__0508
056a4                 | LR__0507
056a4     04 96 86 F1 | 	sub	local01, #4
056a8     0E 96 46 F7 | 	zerox	local01, #14
056ac     4B 99 02 F6 | 	mov	local02, local01
056b0     33 99 02 F1 | 	add	local02, objptr
056b4     4B 9B 02 F6 | 	mov	local03, local01
056b8     33 9B 02 F1 | 	add	local03, objptr
056bc     4D 9D C2 FA | 	rdbyte	local04, local03
056c0     01 9C 06 F1 | 	add	local04, #1
056c4     4C 9D 42 FC | 	wrbyte	local04, local02
056c8     04 96 06 F1 | 	add	local01, #4
056cc     0E 96 46 F7 | 	zerox	local01, #14
056d0     4B 99 02 F6 | 	mov	local02, local01
056d4     33 99 02 F1 | 	add	local02, objptr
056d8     4B 9B 02 F6 | 	mov	local03, local01
056dc     33 9B 02 F1 | 	add	local03, objptr
056e0     4D 9D C2 FA | 	rdbyte	local04, local03
056e4     01 9C 86 F1 | 	sub	local04, #1
056e8     4C 9D 42 FC | 	wrbyte	local04, local02
056ec     4B 9F 02 F6 | 	mov	local05, local01
056f0     33 9F 02 F1 | 	add	local05, objptr
056f4     4F A1 CA FA | 	rdbyte	local06, local05 wz
056f8     A8 FF 9F 5D |  if_ne	jmp	#LR__0507
056fc                 | LR__0508
056fc     04 96 86 F1 | 	sub	local01, #4
05700     0E 96 46 F7 | 	zerox	local01, #14
05704     4B 9F 02 F6 | 	mov	local05, local01
05708     33 9F 02 F1 | 	add	local05, objptr
0570c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05710     EC FE 9F 5D |  if_ne	jmp	#LR__0504
05714                 | LR__0509
05714                 | LR__0510
05714     01 96 06 F1 | 	add	local01, #1
05718     0E 96 46 F7 | 	zerox	local01, #14
0571c     4B 9F 02 F6 | 	mov	local05, local01
05720     33 9F 02 F1 | 	add	local05, objptr
05724     4F A1 CA FA | 	rdbyte	local06, local05 wz
05728     5C 00 90 AD |  if_e	jmp	#LR__0513
0572c     D7 2C 48 FB | 	callpa	#(@LR__0512-@LR__0511)>>2,fcache_load_ptr_
05730                 | LR__0511
05730     07 96 86 F1 | 	sub	local01, #7
05734     0E 96 46 F7 | 	zerox	local01, #14
05738     4B 99 02 F6 | 	mov	local02, local01
0573c     33 99 02 F1 | 	add	local02, objptr
05740     4B 9B 02 F6 | 	mov	local03, local01
05744     33 9B 02 F1 | 	add	local03, objptr
05748     4D 9D C2 FA | 	rdbyte	local04, local03
0574c     01 9C 06 F1 | 	add	local04, #1
05750     4C 9D 42 FC | 	wrbyte	local04, local02
05754     07 96 06 F1 | 	add	local01, #7
05758     0E 96 46 F7 | 	zerox	local01, #14
0575c     4B 99 02 F6 | 	mov	local02, local01
05760     33 99 02 F1 | 	add	local02, objptr
05764     4B 9B 02 F6 | 	mov	local03, local01
05768     33 9B 02 F1 | 	add	local03, objptr
0576c     4D 9D C2 FA | 	rdbyte	local04, local03
05770     01 9C 86 F1 | 	sub	local04, #1
05774     4C 9D 42 FC | 	wrbyte	local04, local02
05778     4B 9F 02 F6 | 	mov	local05, local01
0577c     33 9F 02 F1 | 	add	local05, objptr
05780     4F A1 CA FA | 	rdbyte	local06, local05 wz
05784     A8 FF 9F 5D |  if_ne	jmp	#LR__0511
05788                 | LR__0512
05788                 | LR__0513
05788     09 96 86 F1 | 	sub	local01, #9
0578c     0E 96 46 F7 | 	zerox	local01, #14
05790     4B 99 02 F6 | 	mov	local02, local01
05794     33 99 02 F1 | 	add	local02, objptr
05798     4B A5 02 F6 | 	mov	local08, local01
0579c     52 9B 02 F6 | 	mov	local03, local08
057a0     33 A7 02 F6 | 	mov	local09, objptr
057a4     33 9B 02 F1 | 	add	local03, objptr
057a8     4D 9D C2 FA | 	rdbyte	local04, local03
057ac     0B 9C 06 F1 | 	add	local04, #11
057b0     4C 9D 42 FC | 	wrbyte	local04, local02
057b4     4B 9F 02 F6 | 	mov	local05, local01
057b8     33 9F 02 F1 | 	add	local05, objptr
057bc     4F A1 CA FA | 	rdbyte	local06, local05 wz
057c0     64 00 90 AD |  if_e	jmp	#LR__0516
057c4     D7 30 48 FB | 	callpa	#(@LR__0515-@LR__0514)>>2,fcache_load_ptr_
057c8                 | LR__0514
057c8     03 96 06 F1 | 	add	local01, #3
057cc     0E 96 46 F7 | 	zerox	local01, #14
057d0     4B 99 02 F6 | 	mov	local02, local01
057d4     33 99 02 F1 | 	add	local02, objptr
057d8     4B 9B 02 F6 | 	mov	local03, local01
057dc     33 9B 02 F1 | 	add	local03, objptr
057e0     4D 9D C2 FA | 	rdbyte	local04, local03
057e4     01 9C 06 F1 | 	add	local04, #1
057e8     4C 9D 42 FC | 	wrbyte	local04, local02
057ec     03 96 86 F1 | 	sub	local01, #3
057f0     0E 96 46 F7 | 	zerox	local01, #14
057f4     4B 99 02 F6 | 	mov	local02, local01
057f8     33 99 02 F1 | 	add	local02, objptr
057fc     4B A5 02 F6 | 	mov	local08, local01
05800     52 9B 02 F6 | 	mov	local03, local08
05804     33 A7 02 F6 | 	mov	local09, objptr
05808     33 9B 02 F1 | 	add	local03, objptr
0580c     4D 9D C2 FA | 	rdbyte	local04, local03
05810     01 9C 86 F1 | 	sub	local04, #1
05814     4C 9D 42 FC | 	wrbyte	local04, local02
05818     4B 9F 02 F6 | 	mov	local05, local01
0581c     33 9F 02 F1 | 	add	local05, objptr
05820     4F A1 CA FA | 	rdbyte	local06, local05 wz
05824     A0 FF 9F 5D |  if_ne	jmp	#LR__0514
05828                 | LR__0515
05828                 | LR__0516
05828     03 96 06 F1 | 	add	local01, #3
0582c     0E 96 46 F7 | 	zerox	local01, #14
05830     4B 9F 02 F6 | 	mov	local05, local01
05834     33 9F 02 F1 | 	add	local05, objptr
05838     4F A1 CA FA | 	rdbyte	local06, local05 wz
0583c     AC 00 90 AD |  if_e	jmp	#LR__0519
05840     D7 54 48 FB | 	callpa	#(@LR__0518-@LR__0517)>>2,fcache_load_ptr_
05844                 | LR__0517
05844     03 96 86 F1 | 	sub	local01, #3
05848     0E 96 46 F7 | 	zerox	local01, #14
0584c     4B 99 02 F6 | 	mov	local02, local01
05850     33 99 02 F1 | 	add	local02, objptr
05854     4B 9B 02 F6 | 	mov	local03, local01
05858     33 9B 02 F1 | 	add	local03, objptr
0585c     4D 9D C2 FA | 	rdbyte	local04, local03
05860     01 9C 06 F1 | 	add	local04, #1
05864     4C 9D 42 FC | 	wrbyte	local04, local02
05868     07 96 06 F1 | 	add	local01, #7
0586c     0E 96 46 F7 | 	zerox	local01, #14
05870     4B 99 02 F6 | 	mov	local02, local01
05874     33 99 02 F1 | 	add	local02, objptr
05878     4B 9B 02 F6 | 	mov	local03, local01
0587c     33 9B 02 F1 | 	add	local03, objptr
05880     4D 9D C2 FA | 	rdbyte	local04, local03
05884     01 9C 06 F1 | 	add	local04, #1
05888     4C 9D 42 FC | 	wrbyte	local04, local02
0588c     01 96 06 F1 | 	add	local01, #1
05890     0E 96 46 F7 | 	zerox	local01, #14
05894     4B 99 02 F6 | 	mov	local02, local01
05898     33 99 02 F1 | 	add	local02, objptr
0589c     4B 9B 02 F6 | 	mov	local03, local01
058a0     33 9B 02 F1 | 	add	local03, objptr
058a4     4D 9D C2 FA | 	rdbyte	local04, local03
058a8     01 9C 06 F1 | 	add	local04, #1
058ac     4C 9D 42 FC | 	wrbyte	local04, local02
058b0     05 96 86 F1 | 	sub	local01, #5
058b4     0E 96 46 F7 | 	zerox	local01, #14
058b8     4B 99 02 F6 | 	mov	local02, local01
058bc     33 99 02 F1 | 	add	local02, objptr
058c0     4B A5 02 F6 | 	mov	local08, local01
058c4     52 9B 02 F6 | 	mov	local03, local08
058c8     33 A7 02 F6 | 	mov	local09, objptr
058cc     33 9B 02 F1 | 	add	local03, objptr
058d0     4D 9D C2 FA | 	rdbyte	local04, local03
058d4     01 9C 86 F1 | 	sub	local04, #1
058d8     4C 9D 42 FC | 	wrbyte	local04, local02
058dc     4B 9F 02 F6 | 	mov	local05, local01
058e0     33 9F 02 F1 | 	add	local05, objptr
058e4     4F A1 CA FA | 	rdbyte	local06, local05 wz
058e8     58 FF 9F 5D |  if_ne	jmp	#LR__0517
058ec                 | LR__0518
058ec                 | LR__0519
058ec     04 96 06 F1 | 	add	local01, #4
058f0     0E 96 46 F7 | 	zerox	local01, #14
058f4     4B 9F 02 F6 | 	mov	local05, local01
058f8     33 9F 02 F1 | 	add	local05, objptr
058fc     4F A1 CA FA | 	rdbyte	local06, local05 wz
05900     28 01 90 AD |  if_e	jmp	#LR__0526
05904     D7 92 48 FB | 	callpa	#(@LR__0525-@LR__0520)>>2,fcache_load_ptr_
05908                 | LR__0520
05908     4B 99 02 F6 | 	mov	local02, local01
0590c     33 99 02 F1 | 	add	local02, objptr
05910     4B A5 02 F6 | 	mov	local08, local01
05914     52 9B 02 F6 | 	mov	local03, local08
05918     33 A7 02 F6 | 	mov	local09, objptr
0591c     33 9B 02 F1 | 	add	local03, objptr
05920     4D 9D C2 FA | 	rdbyte	local04, local03
05924     01 9C 86 F1 | 	sub	local04, #1
05928     4C 9D 42 FC | 	wrbyte	local04, local02
0592c     4B 9F 02 F6 | 	mov	local05, local01
05930     33 9F 02 F1 | 	add	local05, objptr
05934     4F A1 CA FA | 	rdbyte	local06, local05 wz
05938     60 00 90 AD |  if_e	jmp	#LR__0522
0593c                 | LR__0521
0593c     04 96 06 F1 | 	add	local01, #4
05940     0E 96 46 F7 | 	zerox	local01, #14
05944     4B 99 02 F6 | 	mov	local02, local01
05948     33 99 02 F1 | 	add	local02, objptr
0594c     4B 9B 02 F6 | 	mov	local03, local01
05950     33 9B 02 F1 | 	add	local03, objptr
05954     4D 9D C2 FA | 	rdbyte	local04, local03
05958     01 9C 06 F1 | 	add	local04, #1
0595c     4C 9D 42 FC | 	wrbyte	local04, local02
05960     04 96 86 F1 | 	sub	local01, #4
05964     0E 96 46 F7 | 	zerox	local01, #14
05968     4B 99 02 F6 | 	mov	local02, local01
0596c     33 99 02 F1 | 	add	local02, objptr
05970     4B A5 02 F6 | 	mov	local08, local01
05974     52 9B 02 F6 | 	mov	local03, local08
05978     33 A7 02 F6 | 	mov	local09, objptr
0597c     33 9B 02 F1 | 	add	local03, objptr
05980     4D 9D C2 FA | 	rdbyte	local04, local03
05984     01 9C 86 F1 | 	sub	local04, #1
05988     4C 9D 42 FC | 	wrbyte	local04, local02
0598c     4B 9F 02 F6 | 	mov	local05, local01
05990     33 9F 02 F1 | 	add	local05, objptr
05994     4F A1 CA FA | 	rdbyte	local06, local05 wz
05998     A0 FF 9F 5D |  if_ne	jmp	#LR__0521
0599c                 | LR__0522
0599c     01 96 06 F1 | 	add	local01, #1
059a0     0E 96 46 F7 | 	zerox	local01, #14
059a4     4B 9F 02 F6 | 	mov	local05, local01
059a8     33 9F 02 F1 | 	add	local05, objptr
059ac     4F A1 CA FA | 	rdbyte	local06, local05 wz
059b0     60 00 90 AD |  if_e	jmp	#LR__0524
059b4                 | LR__0523
059b4     04 96 06 F1 | 	add	local01, #4
059b8     0E 96 46 F7 | 	zerox	local01, #14
059bc     4B 99 02 F6 | 	mov	local02, local01
059c0     33 99 02 F1 | 	add	local02, objptr
059c4     4B 9B 02 F6 | 	mov	local03, local01
059c8     33 9B 02 F1 | 	add	local03, objptr
059cc     4D 9D C2 FA | 	rdbyte	local04, local03
059d0     01 9C 06 F1 | 	add	local04, #1
059d4     4C 9D 42 FC | 	wrbyte	local04, local02
059d8     04 96 86 F1 | 	sub	local01, #4
059dc     0E 96 46 F7 | 	zerox	local01, #14
059e0     4B 99 02 F6 | 	mov	local02, local01
059e4     33 99 02 F1 | 	add	local02, objptr
059e8     4B A5 02 F6 | 	mov	local08, local01
059ec     52 9B 02 F6 | 	mov	local03, local08
059f0     33 A7 02 F6 | 	mov	local09, objptr
059f4     33 9B 02 F1 | 	add	local03, objptr
059f8     4D 9D C2 FA | 	rdbyte	local04, local03
059fc     01 9C 86 F1 | 	sub	local04, #1
05a00     4C 9D 42 FC | 	wrbyte	local04, local02
05a04     4B 9F 02 F6 | 	mov	local05, local01
05a08     33 9F 02 F1 | 	add	local05, objptr
05a0c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05a10     A0 FF 9F 5D |  if_ne	jmp	#LR__0523
05a14                 | LR__0524
05a14     03 96 06 F1 | 	add	local01, #3
05a18     0E 96 46 F7 | 	zerox	local01, #14
05a1c     4B 9F 02 F6 | 	mov	local05, local01
05a20     33 9F 02 F1 | 	add	local05, objptr
05a24     4F A1 CA FA | 	rdbyte	local06, local05 wz
05a28     DC FE 9F 5D |  if_ne	jmp	#LR__0520
05a2c                 | LR__0525
05a2c                 | LR__0526
05a2c     03 96 06 F1 | 	add	local01, #3
05a30     0E 96 46 F7 | 	zerox	local01, #14
05a34     4B 9F 02 F6 | 	mov	local05, local01
05a38     33 9F 02 F1 | 	add	local05, objptr
05a3c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05a40     64 00 90 AD |  if_e	jmp	#LR__0529
05a44     D7 30 48 FB | 	callpa	#(@LR__0528-@LR__0527)>>2,fcache_load_ptr_
05a48                 | LR__0527
05a48     03 96 86 F1 | 	sub	local01, #3
05a4c     0E 96 46 F7 | 	zerox	local01, #14
05a50     4B 99 02 F6 | 	mov	local02, local01
05a54     33 99 02 F1 | 	add	local02, objptr
05a58     4B 9B 02 F6 | 	mov	local03, local01
05a5c     33 9B 02 F1 | 	add	local03, objptr
05a60     4D 9D C2 FA | 	rdbyte	local04, local03
05a64     01 9C 06 F1 | 	add	local04, #1
05a68     4C 9D 42 FC | 	wrbyte	local04, local02
05a6c     03 96 06 F1 | 	add	local01, #3
05a70     0E 96 46 F7 | 	zerox	local01, #14
05a74     4B 99 02 F6 | 	mov	local02, local01
05a78     33 99 02 F1 | 	add	local02, objptr
05a7c     4B A5 02 F6 | 	mov	local08, local01
05a80     52 9B 02 F6 | 	mov	local03, local08
05a84     33 A7 02 F6 | 	mov	local09, objptr
05a88     33 9B 02 F1 | 	add	local03, objptr
05a8c     4D 9D C2 FA | 	rdbyte	local04, local03
05a90     01 9C 86 F1 | 	sub	local04, #1
05a94     4C 9D 42 FC | 	wrbyte	local04, local02
05a98     4B 9F 02 F6 | 	mov	local05, local01
05a9c     33 9F 02 F1 | 	add	local05, objptr
05aa0     4F A1 CA FA | 	rdbyte	local06, local05 wz
05aa4     A0 FF 9F 5D |  if_ne	jmp	#LR__0527
05aa8                 | LR__0528
05aa8                 | LR__0529
05aa8     03 96 86 F1 | 	sub	local01, #3
05aac     0E 96 46 F7 | 	zerox	local01, #14
05ab0     4B 9F 02 F6 | 	mov	local05, local01
05ab4     33 9F 02 F1 | 	add	local05, objptr
05ab8     4F A1 CA FA | 	rdbyte	local06, local05 wz
05abc     80 00 90 AD |  if_e	jmp	#LR__0532
05ac0     D7 3E 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
05ac4                 | LR__0530
05ac4     02 96 06 F1 | 	add	local01, #2
05ac8     0E 96 46 F7 | 	zerox	local01, #14
05acc     4B 99 02 F6 | 	mov	local02, local01
05ad0     33 99 02 F1 | 	add	local02, objptr
05ad4     4B 9B 02 F6 | 	mov	local03, local01
05ad8     33 9B 02 F1 | 	add	local03, objptr
05adc     4D 9D C2 FA | 	rdbyte	local04, local03
05ae0     01 9C 06 F1 | 	add	local04, #1
05ae4     4C 9D 42 FC | 	wrbyte	local04, local02
05ae8     01 96 06 F1 | 	add	local01, #1
05aec     0E 96 46 F7 | 	zerox	local01, #14
05af0     4B 99 02 F6 | 	mov	local02, local01
05af4     33 99 02 F1 | 	add	local02, objptr
05af8     4B 9B 02 F6 | 	mov	local03, local01
05afc     33 9B 02 F1 | 	add	local03, objptr
05b00     4D 9D C2 FA | 	rdbyte	local04, local03
05b04     01 9C 06 F1 | 	add	local04, #1
05b08     4C 9D 42 FC | 	wrbyte	local04, local02
05b0c     03 96 86 F1 | 	sub	local01, #3
05b10     0E 96 46 F7 | 	zerox	local01, #14
05b14     4B 99 02 F6 | 	mov	local02, local01
05b18     33 99 02 F1 | 	add	local02, objptr
05b1c     4B 9B 02 F6 | 	mov	local03, local01
05b20     33 9B 02 F1 | 	add	local03, objptr
05b24     4D 9D C2 FA | 	rdbyte	local04, local03
05b28     01 9C 86 F1 | 	sub	local04, #1
05b2c     4C 9D 42 FC | 	wrbyte	local04, local02
05b30     4B 9F 02 F6 | 	mov	local05, local01
05b34     33 9F 02 F1 | 	add	local05, objptr
05b38     4F A1 CA FA | 	rdbyte	local06, local05 wz
05b3c     84 FF 9F 5D |  if_ne	jmp	#LR__0530
05b40                 | LR__0531
05b40                 | LR__0532
05b40     07 96 06 F1 | 	add	local01, #7
05b44     0E 96 46 F7 | 	zerox	local01, #14
05b48     4B 9F 02 F6 | 	mov	local05, local01
05b4c     33 9F 02 F1 | 	add	local05, objptr
05b50     4F A1 CA FA | 	rdbyte	local06, local05 wz
05b54     5C 00 90 AD |  if_e	jmp	#LR__0535
05b58     D7 2C 48 FB | 	callpa	#(@LR__0534-@LR__0533)>>2,fcache_load_ptr_
05b5c                 | LR__0533
05b5c     03 96 86 F1 | 	sub	local01, #3
05b60     0E 96 46 F7 | 	zerox	local01, #14
05b64     4B 99 02 F6 | 	mov	local02, local01
05b68     33 99 02 F1 | 	add	local02, objptr
05b6c     4B 9B 02 F6 | 	mov	local03, local01
05b70     33 9B 02 F1 | 	add	local03, objptr
05b74     4D 9D C2 FA | 	rdbyte	local04, local03
05b78     01 9C 06 F1 | 	add	local04, #1
05b7c     4C 9D 42 FC | 	wrbyte	local04, local02
05b80     03 96 06 F1 | 	add	local01, #3
05b84     0E 96 46 F7 | 	zerox	local01, #14
05b88     4B 99 02 F6 | 	mov	local02, local01
05b8c     33 99 02 F1 | 	add	local02, objptr
05b90     4B 9B 02 F6 | 	mov	local03, local01
05b94     33 9B 02 F1 | 	add	local03, objptr
05b98     4D 9D C2 FA | 	rdbyte	local04, local03
05b9c     01 9C 86 F1 | 	sub	local04, #1
05ba0     4C 9D 42 FC | 	wrbyte	local04, local02
05ba4     4B 9F 02 F6 | 	mov	local05, local01
05ba8     33 9F 02 F1 | 	add	local05, objptr
05bac     4F A1 CA FA | 	rdbyte	local06, local05 wz
05bb0     A8 FF 9F 5D |  if_ne	jmp	#LR__0533
05bb4                 | LR__0534
05bb4                 | LR__0535
05bb4     03 96 86 F1 | 	sub	local01, #3
05bb8     0E 96 46 F7 | 	zerox	local01, #14
05bbc     4B 9F 02 F6 | 	mov	local05, local01
05bc0     33 9F 02 F1 | 	add	local05, objptr
05bc4     4F A1 CA FA | 	rdbyte	local06, local05 wz
05bc8     80 00 90 AD |  if_e	jmp	#LR__0538
05bcc     D7 3E 48 FB | 	callpa	#(@LR__0537-@LR__0536)>>2,fcache_load_ptr_
05bd0                 | LR__0536
05bd0     03 96 06 F1 | 	add	local01, #3
05bd4     0E 96 46 F7 | 	zerox	local01, #14
05bd8     4B 99 02 F6 | 	mov	local02, local01
05bdc     33 99 02 F1 | 	add	local02, objptr
05be0     4B 9B 02 F6 | 	mov	local03, local01
05be4     33 9B 02 F1 | 	add	local03, objptr
05be8     4D 9D C2 FA | 	rdbyte	local04, local03
05bec     01 9C 06 F1 | 	add	local04, #1
05bf0     4C 9D 42 FC | 	wrbyte	local04, local02
05bf4     05 96 86 F1 | 	sub	local01, #5
05bf8     0E 96 46 F7 | 	zerox	local01, #14
05bfc     4B 99 02 F6 | 	mov	local02, local01
05c00     33 99 02 F1 | 	add	local02, objptr
05c04     4B 9B 02 F6 | 	mov	local03, local01
05c08     33 9B 02 F1 | 	add	local03, objptr
05c0c     4D 9D C2 FA | 	rdbyte	local04, local03
05c10     01 9C 06 F1 | 	add	local04, #1
05c14     4C 9D 42 FC | 	wrbyte	local04, local02
05c18     02 96 06 F1 | 	add	local01, #2
05c1c     0E 96 46 F7 | 	zerox	local01, #14
05c20     4B 99 02 F6 | 	mov	local02, local01
05c24     33 99 02 F1 | 	add	local02, objptr
05c28     4B 9B 02 F6 | 	mov	local03, local01
05c2c     33 9B 02 F1 | 	add	local03, objptr
05c30     4D 9D C2 FA | 	rdbyte	local04, local03
05c34     01 9C 86 F1 | 	sub	local04, #1
05c38     4C 9D 42 FC | 	wrbyte	local04, local02
05c3c     4B 9F 02 F6 | 	mov	local05, local01
05c40     33 9F 02 F1 | 	add	local05, objptr
05c44     4F A1 CA FA | 	rdbyte	local06, local05 wz
05c48     84 FF 9F 5D |  if_ne	jmp	#LR__0536
05c4c                 | LR__0537
05c4c                 | LR__0538
05c4c     07 96 06 F1 | 	add	local01, #7
05c50     0E 96 46 F7 | 	zerox	local01, #14
05c54     4B 9F 02 F6 | 	mov	local05, local01
05c58     33 9F 02 F1 | 	add	local05, objptr
05c5c     4F A1 CA FA | 	rdbyte	local06, local05 wz
05c60     5C 00 90 AD |  if_e	jmp	#LR__0541
05c64     D7 2C 48 FB | 	callpa	#(@LR__0540-@LR__0539)>>2,fcache_load_ptr_
05c68                 | LR__0539
05c68     03 96 86 F1 | 	sub	local01, #3
05c6c     0E 96 46 F7 | 	zerox	local01, #14
05c70     4B 99 02 F6 | 	mov	local02, local01
05c74     33 99 02 F1 | 	add	local02, objptr
05c78     4B 9B 02 F6 | 	mov	local03, local01
05c7c     33 9B 02 F1 | 	add	local03, objptr
05c80     4D 9D C2 FA | 	rdbyte	local04, local03
05c84     01 9C 06 F1 | 	add	local04, #1
05c88     4C 9D 42 FC | 	wrbyte	local04, local02
05c8c     03 96 06 F1 | 	add	local01, #3
05c90     0E 96 46 F7 | 	zerox	local01, #14
05c94     4B 99 02 F6 | 	mov	local02, local01
05c98     33 99 02 F1 | 	add	local02, objptr
05c9c     4B 9B 02 F6 | 	mov	local03, local01
05ca0     33 9B 02 F1 | 	add	local03, objptr
05ca4     4D 9D C2 FA | 	rdbyte	local04, local03
05ca8     01 9C 86 F1 | 	sub	local04, #1
05cac     4C 9D 42 FC | 	wrbyte	local04, local02
05cb0     4B 9F 02 F6 | 	mov	local05, local01
05cb4     33 9F 02 F1 | 	add	local05, objptr
05cb8     4F A1 CA FA | 	rdbyte	local06, local05 wz
05cbc     A8 FF 9F 5D |  if_ne	jmp	#LR__0539
05cc0                 | LR__0540
05cc0                 | LR__0541
05cc0     03 96 86 F1 | 	sub	local01, #3
05cc4     0E 96 46 F7 | 	zerox	local01, #14
05cc8     4B 9F 02 F6 | 	mov	local05, local01
05ccc     33 9F 02 F1 | 	add	local05, objptr
05cd0     4F A1 CA FA | 	rdbyte	local06, local05 wz
05cd4     80 00 90 AD |  if_e	jmp	#LR__0544
05cd8     D7 3E 48 FB | 	callpa	#(@LR__0543-@LR__0542)>>2,fcache_load_ptr_
05cdc                 | LR__0542
05cdc     03 96 06 F1 | 	add	local01, #3
05ce0     0E 96 46 F7 | 	zerox	local01, #14
05ce4     4B 99 02 F6 | 	mov	local02, local01
05ce8     33 99 02 F1 | 	add	local02, objptr
05cec     4B 9B 02 F6 | 	mov	local03, local01
05cf0     33 9B 02 F1 | 	add	local03, objptr
05cf4     4D 9D C2 FA | 	rdbyte	local04, local03
05cf8     01 9C 06 F1 | 	add	local04, #1
05cfc     4C 9D 42 FC | 	wrbyte	local04, local02
05d00     09 96 86 F1 | 	sub	local01, #9
05d04     0E 96 46 F7 | 	zerox	local01, #14
05d08     4B 99 02 F6 | 	mov	local02, local01
05d0c     33 99 02 F1 | 	add	local02, objptr
05d10     4B 9B 02 F6 | 	mov	local03, local01
05d14     33 9B 02 F1 | 	add	local03, objptr
05d18     4D 9D C2 FA | 	rdbyte	local04, local03
05d1c     01 9C 06 F1 | 	add	local04, #1
05d20     4C 9D 42 FC | 	wrbyte	local04, local02
05d24     06 96 06 F1 | 	add	local01, #6
05d28     0E 96 46 F7 | 	zerox	local01, #14
05d2c     4B 99 02 F6 | 	mov	local02, local01
05d30     33 99 02 F1 | 	add	local02, objptr
05d34     4B 9B 02 F6 | 	mov	local03, local01
05d38     33 9B 02 F1 | 	add	local03, objptr
05d3c     4D 9D C2 FA | 	rdbyte	local04, local03
05d40     01 9C 86 F1 | 	sub	local04, #1
05d44     4C 9D 42 FC | 	wrbyte	local04, local02
05d48     4B 9F 02 F6 | 	mov	local05, local01
05d4c     33 9F 02 F1 | 	add	local05, objptr
05d50     4F A1 CA FA | 	rdbyte	local06, local05 wz
05d54     84 FF 9F 5D |  if_ne	jmp	#LR__0542
05d58                 | LR__0543
05d58                 | LR__0544
05d58     07 96 86 F1 | 	sub	local01, #7
05d5c     0E 96 46 F7 | 	zerox	local01, #14
05d60     4B 9F 02 F6 | 	mov	local05, local01
05d64     33 9F 02 F1 | 	add	local05, objptr
05d68     4F A1 CA FA | 	rdbyte	local06, local05 wz
05d6c     18 01 90 AD |  if_e	jmp	#LR__0551
05d70     D7 8A 48 FB | 	callpa	#(@LR__0550-@LR__0545)>>2,fcache_load_ptr_
05d74                 | LR__0545
05d74     4B 99 02 F6 | 	mov	local02, local01
05d78     33 99 02 F1 | 	add	local02, objptr
05d7c     4B 9B 02 F6 | 	mov	local03, local01
05d80     33 9B 02 F1 | 	add	local03, objptr
05d84     4D 9D C2 FA | 	rdbyte	local04, local03
05d88     01 9C 86 F1 | 	sub	local04, #1
05d8c     4C 9D 42 FC | 	wrbyte	local04, local02
05d90     01 96 06 F1 | 	add	local01, #1
05d94     0E 96 46 F7 | 	zerox	local01, #14
05d98     4B 9F 02 F6 | 	mov	local05, local01
05d9c     33 9F 02 F1 | 	add	local05, objptr
05da0     4F A1 CA FA | 	rdbyte	local06, local05 wz
05da4     58 00 90 AD |  if_e	jmp	#LR__0547
05da8                 | LR__0546
05da8     04 96 86 F1 | 	sub	local01, #4
05dac     0E 96 46 F7 | 	zerox	local01, #14
05db0     4B 99 02 F6 | 	mov	local02, local01
05db4     33 99 02 F1 | 	add	local02, objptr
05db8     4B 9B 02 F6 | 	mov	local03, local01
05dbc     33 9B 02 F1 | 	add	local03, objptr
05dc0     4D 9D C2 FA | 	rdbyte	local04, local03
05dc4     01 9C 06 F1 | 	add	local04, #1
05dc8     4C 9D 42 FC | 	wrbyte	local04, local02
05dcc     04 96 06 F1 | 	add	local01, #4
05dd0     0E 96 46 F7 | 	zerox	local01, #14
05dd4     4B 99 02 F6 | 	mov	local02, local01
05dd8     33 99 02 F1 | 	add	local02, objptr
05ddc     4B 9B 02 F6 | 	mov	local03, local01
05de0     33 9B 02 F1 | 	add	local03, objptr
05de4     4D 9D C2 FA | 	rdbyte	local04, local03
05de8     01 9C 86 F1 | 	sub	local04, #1
05dec     4C 9D 42 FC | 	wrbyte	local04, local02
05df0     4B 9F 02 F6 | 	mov	local05, local01
05df4     33 9F 02 F1 | 	add	local05, objptr
05df8     4F A1 CA FA | 	rdbyte	local06, local05 wz
05dfc     A8 FF 9F 5D |  if_ne	jmp	#LR__0546
05e00                 | LR__0547
05e00     01 96 86 F1 | 	sub	local01, #1
05e04     0E 96 46 F7 | 	zerox	local01, #14
05e08     4B 9F 02 F6 | 	mov	local05, local01
05e0c     33 9F 02 F1 | 	add	local05, objptr
05e10     4F A1 CA FA | 	rdbyte	local06, local05 wz
05e14     58 00 90 AD |  if_e	jmp	#LR__0549
05e18                 | LR__0548
05e18     04 96 86 F1 | 	sub	local01, #4
05e1c     0E 96 46 F7 | 	zerox	local01, #14
05e20     4B 99 02 F6 | 	mov	local02, local01
05e24     33 99 02 F1 | 	add	local02, objptr
05e28     4B 9B 02 F6 | 	mov	local03, local01
05e2c     33 9B 02 F1 | 	add	local03, objptr
05e30     4D 9D C2 FA | 	rdbyte	local04, local03
05e34     01 9C 06 F1 | 	add	local04, #1
05e38     4C 9D 42 FC | 	wrbyte	local04, local02
05e3c     04 96 06 F1 | 	add	local01, #4
05e40     0E 96 46 F7 | 	zerox	local01, #14
05e44     4B 99 02 F6 | 	mov	local02, local01
05e48     33 99 02 F1 | 	add	local02, objptr
05e4c     4B 9B 02 F6 | 	mov	local03, local01
05e50     33 9B 02 F1 | 	add	local03, objptr
05e54     4D 9D C2 FA | 	rdbyte	local04, local03
05e58     01 9C 86 F1 | 	sub	local04, #1
05e5c     4C 9D 42 FC | 	wrbyte	local04, local02
05e60     4B 9F 02 F6 | 	mov	local05, local01
05e64     33 9F 02 F1 | 	add	local05, objptr
05e68     4F A1 CA FA | 	rdbyte	local06, local05 wz
05e6c     A8 FF 9F 5D |  if_ne	jmp	#LR__0548
05e70                 | LR__0549
05e70     04 96 86 F1 | 	sub	local01, #4
05e74     0E 96 46 F7 | 	zerox	local01, #14
05e78     4B 9F 02 F6 | 	mov	local05, local01
05e7c     33 9F 02 F1 | 	add	local05, objptr
05e80     4F A1 CA FA | 	rdbyte	local06, local05 wz
05e84     EC FE 9F 5D |  if_ne	jmp	#LR__0545
05e88                 | LR__0550
05e88                 | LR__0551
05e88     01 96 06 F1 | 	add	local01, #1
05e8c     0E 96 46 F7 | 	zerox	local01, #14
05e90     4B 9F 02 F6 | 	mov	local05, local01
05e94     33 9F 02 F1 | 	add	local05, objptr
05e98     4F A1 CA FA | 	rdbyte	local06, local05 wz
05e9c     5C 00 90 AD |  if_e	jmp	#LR__0554
05ea0     D7 2C 48 FB | 	callpa	#(@LR__0553-@LR__0552)>>2,fcache_load_ptr_
05ea4                 | LR__0552
05ea4     07 96 86 F1 | 	sub	local01, #7
05ea8     0E 96 46 F7 | 	zerox	local01, #14
05eac     4B 99 02 F6 | 	mov	local02, local01
05eb0     33 99 02 F1 | 	add	local02, objptr
05eb4     4B 9B 02 F6 | 	mov	local03, local01
05eb8     33 9B 02 F1 | 	add	local03, objptr
05ebc     4D 9D C2 FA | 	rdbyte	local04, local03
05ec0     01 9C 06 F1 | 	add	local04, #1
05ec4     4C 9D 42 FC | 	wrbyte	local04, local02
05ec8     07 96 06 F1 | 	add	local01, #7
05ecc     0E 96 46 F7 | 	zerox	local01, #14
05ed0     4B 99 02 F6 | 	mov	local02, local01
05ed4     33 99 02 F1 | 	add	local02, objptr
05ed8     4B 9B 02 F6 | 	mov	local03, local01
05edc     33 9B 02 F1 | 	add	local03, objptr
05ee0     4D 9D C2 FA | 	rdbyte	local04, local03
05ee4     01 9C 86 F1 | 	sub	local04, #1
05ee8     4C 9D 42 FC | 	wrbyte	local04, local02
05eec     4B 9F 02 F6 | 	mov	local05, local01
05ef0     33 9F 02 F1 | 	add	local05, objptr
05ef4     4F A1 CA FA | 	rdbyte	local06, local05 wz
05ef8     A8 FF 9F 5D |  if_ne	jmp	#LR__0552
05efc                 | LR__0553
05efc                 | LR__0554
05efc     09 96 86 F1 | 	sub	local01, #9
05f00     0E 96 46 F7 | 	zerox	local01, #14
05f04     4B 99 02 F6 | 	mov	local02, local01
05f08     33 99 02 F1 | 	add	local02, objptr
05f0c     4B A5 02 F6 | 	mov	local08, local01
05f10     52 9B 02 F6 | 	mov	local03, local08
05f14     33 A7 02 F6 | 	mov	local09, objptr
05f18     33 9B 02 F1 | 	add	local03, objptr
05f1c     4D 9D C2 FA | 	rdbyte	local04, local03
05f20     0B 9C 06 F1 | 	add	local04, #11
05f24     4C 9D 42 FC | 	wrbyte	local04, local02
05f28     4B 9F 02 F6 | 	mov	local05, local01
05f2c     33 9F 02 F1 | 	add	local05, objptr
05f30     4F A1 CA FA | 	rdbyte	local06, local05 wz
05f34     88 00 90 AD |  if_e	jmp	#LR__0557
05f38     D7 42 48 FB | 	callpa	#(@LR__0556-@LR__0555)>>2,fcache_load_ptr_
05f3c                 | LR__0555
05f3c     07 96 06 F1 | 	add	local01, #7
05f40     0E 96 46 F7 | 	zerox	local01, #14
05f44     4B 99 02 F6 | 	mov	local02, local01
05f48     33 99 02 F1 | 	add	local02, objptr
05f4c     4B 9B 02 F6 | 	mov	local03, local01
05f50     33 9B 02 F1 | 	add	local03, objptr
05f54     4D 9D C2 FA | 	rdbyte	local04, local03
05f58     01 9C 06 F1 | 	add	local04, #1
05f5c     4C 9D 42 FC | 	wrbyte	local04, local02
05f60     01 96 06 F1 | 	add	local01, #1
05f64     0E 96 46 F7 | 	zerox	local01, #14
05f68     4B 99 02 F6 | 	mov	local02, local01
05f6c     33 99 02 F1 | 	add	local02, objptr
05f70     4B 9B 02 F6 | 	mov	local03, local01
05f74     33 9B 02 F1 | 	add	local03, objptr
05f78     4D 9D C2 FA | 	rdbyte	local04, local03
05f7c     01 9C 06 F1 | 	add	local04, #1
05f80     4C 9D 42 FC | 	wrbyte	local04, local02
05f84     08 96 86 F1 | 	sub	local01, #8
05f88     0E 96 46 F7 | 	zerox	local01, #14
05f8c     4B 99 02 F6 | 	mov	local02, local01
05f90     33 99 02 F1 | 	add	local02, objptr
05f94     4B A5 02 F6 | 	mov	local08, local01
05f98     52 9B 02 F6 | 	mov	local03, local08
05f9c     33 A7 02 F6 | 	mov	local09, objptr
05fa0     33 9B 02 F1 | 	add	local03, objptr
05fa4     4D 9D C2 FA | 	rdbyte	local04, local03
05fa8     01 9C 86 F1 | 	sub	local04, #1
05fac     4C 9D 42 FC | 	wrbyte	local04, local02
05fb0     4B 9F 02 F6 | 	mov	local05, local01
05fb4     33 9F 02 F1 | 	add	local05, objptr
05fb8     4F A1 CA FA | 	rdbyte	local06, local05 wz
05fbc     7C FF 9F 5D |  if_ne	jmp	#LR__0555
05fc0                 | LR__0556
05fc0                 | LR__0557
05fc0     07 96 06 F1 | 	add	local01, #7
05fc4     0E 96 46 F7 | 	zerox	local01, #14
05fc8     4B 9F 02 F6 | 	mov	local05, local01
05fcc     33 9F 02 F1 | 	add	local05, objptr
05fd0     4F A1 CA FA | 	rdbyte	local06, local05 wz
05fd4     28 01 90 AD |  if_e	jmp	#LR__0564
05fd8     D7 92 48 FB | 	callpa	#(@LR__0563-@LR__0558)>>2,fcache_load_ptr_
05fdc                 | LR__0558
05fdc     4B 99 02 F6 | 	mov	local02, local01
05fe0     33 99 02 F1 | 	add	local02, objptr
05fe4     4B A5 02 F6 | 	mov	local08, local01
05fe8     52 9B 02 F6 | 	mov	local03, local08
05fec     33 A7 02 F6 | 	mov	local09, objptr
05ff0     33 9B 02 F1 | 	add	local03, objptr
05ff4     4D 9D C2 FA | 	rdbyte	local04, local03
05ff8     01 9C 86 F1 | 	sub	local04, #1
05ffc     4C 9D 42 FC | 	wrbyte	local04, local02
06000     4B 9F 02 F6 | 	mov	local05, local01
06004     33 9F 02 F1 | 	add	local05, objptr
06008     4F A1 CA FA | 	rdbyte	local06, local05 wz
0600c     60 00 90 AD |  if_e	jmp	#LR__0560
06010                 | LR__0559
06010     04 96 06 F1 | 	add	local01, #4
06014     0E 96 46 F7 | 	zerox	local01, #14
06018     4B 99 02 F6 | 	mov	local02, local01
0601c     33 99 02 F1 | 	add	local02, objptr
06020     4B 9B 02 F6 | 	mov	local03, local01
06024     33 9B 02 F1 | 	add	local03, objptr
06028     4D 9D C2 FA | 	rdbyte	local04, local03
0602c     01 9C 06 F1 | 	add	local04, #1
06030     4C 9D 42 FC | 	wrbyte	local04, local02
06034     04 96 86 F1 | 	sub	local01, #4
06038     0E 96 46 F7 | 	zerox	local01, #14
0603c     4B 99 02 F6 | 	mov	local02, local01
06040     33 99 02 F1 | 	add	local02, objptr
06044     4B A5 02 F6 | 	mov	local08, local01
06048     52 9B 02 F6 | 	mov	local03, local08
0604c     33 A7 02 F6 | 	mov	local09, objptr
06050     33 9B 02 F1 | 	add	local03, objptr
06054     4D 9D C2 FA | 	rdbyte	local04, local03
06058     01 9C 86 F1 | 	sub	local04, #1
0605c     4C 9D 42 FC | 	wrbyte	local04, local02
06060     4B 9F 02 F6 | 	mov	local05, local01
06064     33 9F 02 F1 | 	add	local05, objptr
06068     4F A1 CA FA | 	rdbyte	local06, local05 wz
0606c     A0 FF 9F 5D |  if_ne	jmp	#LR__0559
06070                 | LR__0560
06070     01 96 06 F1 | 	add	local01, #1
06074     0E 96 46 F7 | 	zerox	local01, #14
06078     4B 9F 02 F6 | 	mov	local05, local01
0607c     33 9F 02 F1 | 	add	local05, objptr
06080     4F A1 CA FA | 	rdbyte	local06, local05 wz
06084     60 00 90 AD |  if_e	jmp	#LR__0562
06088                 | LR__0561
06088     04 96 06 F1 | 	add	local01, #4
0608c     0E 96 46 F7 | 	zerox	local01, #14
06090     4B 99 02 F6 | 	mov	local02, local01
06094     33 99 02 F1 | 	add	local02, objptr
06098     4B 9B 02 F6 | 	mov	local03, local01
0609c     33 9B 02 F1 | 	add	local03, objptr
060a0     4D 9D C2 FA | 	rdbyte	local04, local03
060a4     01 9C 06 F1 | 	add	local04, #1
060a8     4C 9D 42 FC | 	wrbyte	local04, local02
060ac     04 96 86 F1 | 	sub	local01, #4
060b0     0E 96 46 F7 | 	zerox	local01, #14
060b4     4B 99 02 F6 | 	mov	local02, local01
060b8     33 99 02 F1 | 	add	local02, objptr
060bc     4B A5 02 F6 | 	mov	local08, local01
060c0     52 9B 02 F6 | 	mov	local03, local08
060c4     33 A7 02 F6 | 	mov	local09, objptr
060c8     33 9B 02 F1 | 	add	local03, objptr
060cc     4D 9D C2 FA | 	rdbyte	local04, local03
060d0     01 9C 86 F1 | 	sub	local04, #1
060d4     4C 9D 42 FC | 	wrbyte	local04, local02
060d8     4B 9F 02 F6 | 	mov	local05, local01
060dc     33 9F 02 F1 | 	add	local05, objptr
060e0     4F A1 CA FA | 	rdbyte	local06, local05 wz
060e4     A0 FF 9F 5D |  if_ne	jmp	#LR__0561
060e8                 | LR__0562
060e8     03 96 06 F1 | 	add	local01, #3
060ec     0E 96 46 F7 | 	zerox	local01, #14
060f0     4B 9F 02 F6 | 	mov	local05, local01
060f4     33 9F 02 F1 | 	add	local05, objptr
060f8     4F A1 CA FA | 	rdbyte	local06, local05 wz
060fc     DC FE 9F 5D |  if_ne	jmp	#LR__0558
06100                 | LR__0563
06100                 | LR__0564
06100     03 96 06 F1 | 	add	local01, #3
06104     0E 96 46 F7 | 	zerox	local01, #14
06108     4B 9F 02 F6 | 	mov	local05, local01
0610c     33 9F 02 F1 | 	add	local05, objptr
06110     4F A1 CA FA | 	rdbyte	local06, local05 wz
06114     64 00 90 AD |  if_e	jmp	#LR__0567
06118     D7 30 48 FB | 	callpa	#(@LR__0566-@LR__0565)>>2,fcache_load_ptr_
0611c                 | LR__0565
0611c     03 96 86 F1 | 	sub	local01, #3
06120     0E 96 46 F7 | 	zerox	local01, #14
06124     4B 99 02 F6 | 	mov	local02, local01
06128     33 99 02 F1 | 	add	local02, objptr
0612c     4B 9B 02 F6 | 	mov	local03, local01
06130     33 9B 02 F1 | 	add	local03, objptr
06134     4D 9D C2 FA | 	rdbyte	local04, local03
06138     01 9C 06 F1 | 	add	local04, #1
0613c     4C 9D 42 FC | 	wrbyte	local04, local02
06140     03 96 06 F1 | 	add	local01, #3
06144     0E 96 46 F7 | 	zerox	local01, #14
06148     4B 99 02 F6 | 	mov	local02, local01
0614c     33 99 02 F1 | 	add	local02, objptr
06150     4B A5 02 F6 | 	mov	local08, local01
06154     52 9B 02 F6 | 	mov	local03, local08
06158     33 A7 02 F6 | 	mov	local09, objptr
0615c     33 9B 02 F1 | 	add	local03, objptr
06160     4D 9D C2 FA | 	rdbyte	local04, local03
06164     01 9C 86 F1 | 	sub	local04, #1
06168     4C 9D 42 FC | 	wrbyte	local04, local02
0616c     4B 9F 02 F6 | 	mov	local05, local01
06170     33 9F 02 F1 | 	add	local05, objptr
06174     4F A1 CA FA | 	rdbyte	local06, local05 wz
06178     A0 FF 9F 5D |  if_ne	jmp	#LR__0565
0617c                 | LR__0566
0617c                 | LR__0567
0617c     03 96 86 F1 | 	sub	local01, #3
06180     0E 96 46 F7 | 	zerox	local01, #14
06184     4B 9F 02 F6 | 	mov	local05, local01
06188     33 9F 02 F1 | 	add	local05, objptr
0618c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06190     80 00 90 AD |  if_e	jmp	#LR__0570
06194     D7 3E 48 FB | 	callpa	#(@LR__0569-@LR__0568)>>2,fcache_load_ptr_
06198                 | LR__0568
06198     02 96 06 F1 | 	add	local01, #2
0619c     0E 96 46 F7 | 	zerox	local01, #14
061a0     4B 99 02 F6 | 	mov	local02, local01
061a4     33 99 02 F1 | 	add	local02, objptr
061a8     4B 9B 02 F6 | 	mov	local03, local01
061ac     33 9B 02 F1 | 	add	local03, objptr
061b0     4D 9D C2 FA | 	rdbyte	local04, local03
061b4     01 9C 06 F1 | 	add	local04, #1
061b8     4C 9D 42 FC | 	wrbyte	local04, local02
061bc     01 96 06 F1 | 	add	local01, #1
061c0     0E 96 46 F7 | 	zerox	local01, #14
061c4     4B 99 02 F6 | 	mov	local02, local01
061c8     33 99 02 F1 | 	add	local02, objptr
061cc     4B 9B 02 F6 | 	mov	local03, local01
061d0     33 9B 02 F1 | 	add	local03, objptr
061d4     4D 9D C2 FA | 	rdbyte	local04, local03
061d8     01 9C 06 F1 | 	add	local04, #1
061dc     4C 9D 42 FC | 	wrbyte	local04, local02
061e0     03 96 86 F1 | 	sub	local01, #3
061e4     0E 96 46 F7 | 	zerox	local01, #14
061e8     4B 99 02 F6 | 	mov	local02, local01
061ec     33 99 02 F1 | 	add	local02, objptr
061f0     4B 9B 02 F6 | 	mov	local03, local01
061f4     33 9B 02 F1 | 	add	local03, objptr
061f8     4D 9D C2 FA | 	rdbyte	local04, local03
061fc     01 9C 86 F1 | 	sub	local04, #1
06200     4C 9D 42 FC | 	wrbyte	local04, local02
06204     4B 9F 02 F6 | 	mov	local05, local01
06208     33 9F 02 F1 | 	add	local05, objptr
0620c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06210     84 FF 9F 5D |  if_ne	jmp	#LR__0568
06214                 | LR__0569
06214                 | LR__0570
06214     07 96 06 F1 | 	add	local01, #7
06218     0E 96 46 F7 | 	zerox	local01, #14
0621c     4B 9F 02 F6 | 	mov	local05, local01
06220     33 9F 02 F1 | 	add	local05, objptr
06224     4F A1 CA FA | 	rdbyte	local06, local05 wz
06228     5C 00 90 AD |  if_e	jmp	#LR__0573
0622c     D7 2C 48 FB | 	callpa	#(@LR__0572-@LR__0571)>>2,fcache_load_ptr_
06230                 | LR__0571
06230     03 96 86 F1 | 	sub	local01, #3
06234     0E 96 46 F7 | 	zerox	local01, #14
06238     4B 99 02 F6 | 	mov	local02, local01
0623c     33 99 02 F1 | 	add	local02, objptr
06240     4B 9B 02 F6 | 	mov	local03, local01
06244     33 9B 02 F1 | 	add	local03, objptr
06248     4D 9D C2 FA | 	rdbyte	local04, local03
0624c     01 9C 06 F1 | 	add	local04, #1
06250     4C 9D 42 FC | 	wrbyte	local04, local02
06254     03 96 06 F1 | 	add	local01, #3
06258     0E 96 46 F7 | 	zerox	local01, #14
0625c     4B 99 02 F6 | 	mov	local02, local01
06260     33 99 02 F1 | 	add	local02, objptr
06264     4B 9B 02 F6 | 	mov	local03, local01
06268     33 9B 02 F1 | 	add	local03, objptr
0626c     4D 9D C2 FA | 	rdbyte	local04, local03
06270     01 9C 86 F1 | 	sub	local04, #1
06274     4C 9D 42 FC | 	wrbyte	local04, local02
06278     4B 9F 02 F6 | 	mov	local05, local01
0627c     33 9F 02 F1 | 	add	local05, objptr
06280     4F A1 CA FA | 	rdbyte	local06, local05 wz
06284     A8 FF 9F 5D |  if_ne	jmp	#LR__0571
06288                 | LR__0572
06288                 | LR__0573
06288     03 96 86 F1 | 	sub	local01, #3
0628c     0E 96 46 F7 | 	zerox	local01, #14
06290     4B 9F 02 F6 | 	mov	local05, local01
06294     33 9F 02 F1 | 	add	local05, objptr
06298     4F A1 CA FA | 	rdbyte	local06, local05 wz
0629c     80 00 90 AD |  if_e	jmp	#LR__0576
062a0     D7 3E 48 FB | 	callpa	#(@LR__0575-@LR__0574)>>2,fcache_load_ptr_
062a4                 | LR__0574
062a4     03 96 06 F1 | 	add	local01, #3
062a8     0E 96 46 F7 | 	zerox	local01, #14
062ac     4B 99 02 F6 | 	mov	local02, local01
062b0     33 99 02 F1 | 	add	local02, objptr
062b4     4B 9B 02 F6 | 	mov	local03, local01
062b8     33 9B 02 F1 | 	add	local03, objptr
062bc     4D 9D C2 FA | 	rdbyte	local04, local03
062c0     01 9C 06 F1 | 	add	local04, #1
062c4     4C 9D 42 FC | 	wrbyte	local04, local02
062c8     05 96 86 F1 | 	sub	local01, #5
062cc     0E 96 46 F7 | 	zerox	local01, #14
062d0     4B 99 02 F6 | 	mov	local02, local01
062d4     33 99 02 F1 | 	add	local02, objptr
062d8     4B 9B 02 F6 | 	mov	local03, local01
062dc     33 9B 02 F1 | 	add	local03, objptr
062e0     4D 9D C2 FA | 	rdbyte	local04, local03
062e4     01 9C 06 F1 | 	add	local04, #1
062e8     4C 9D 42 FC | 	wrbyte	local04, local02
062ec     02 96 06 F1 | 	add	local01, #2
062f0     0E 96 46 F7 | 	zerox	local01, #14
062f4     4B 99 02 F6 | 	mov	local02, local01
062f8     33 99 02 F1 | 	add	local02, objptr
062fc     4B 9B 02 F6 | 	mov	local03, local01
06300     33 9B 02 F1 | 	add	local03, objptr
06304     4D 9D C2 FA | 	rdbyte	local04, local03
06308     01 9C 86 F1 | 	sub	local04, #1
0630c     4C 9D 42 FC | 	wrbyte	local04, local02
06310     4B 9F 02 F6 | 	mov	local05, local01
06314     33 9F 02 F1 | 	add	local05, objptr
06318     4F A1 CA FA | 	rdbyte	local06, local05 wz
0631c     84 FF 9F 5D |  if_ne	jmp	#LR__0574
06320                 | LR__0575
06320                 | LR__0576
06320     07 96 06 F1 | 	add	local01, #7
06324     0E 96 46 F7 | 	zerox	local01, #14
06328     4B 9F 02 F6 | 	mov	local05, local01
0632c     33 9F 02 F1 | 	add	local05, objptr
06330     4F A1 CA FA | 	rdbyte	local06, local05 wz
06334     5C 00 90 AD |  if_e	jmp	#LR__0579
06338     D7 2C 48 FB | 	callpa	#(@LR__0578-@LR__0577)>>2,fcache_load_ptr_
0633c                 | LR__0577
0633c     03 96 86 F1 | 	sub	local01, #3
06340     0E 96 46 F7 | 	zerox	local01, #14
06344     4B 99 02 F6 | 	mov	local02, local01
06348     33 99 02 F1 | 	add	local02, objptr
0634c     4B 9B 02 F6 | 	mov	local03, local01
06350     33 9B 02 F1 | 	add	local03, objptr
06354     4D 9D C2 FA | 	rdbyte	local04, local03
06358     01 9C 06 F1 | 	add	local04, #1
0635c     4C 9D 42 FC | 	wrbyte	local04, local02
06360     03 96 06 F1 | 	add	local01, #3
06364     0E 96 46 F7 | 	zerox	local01, #14
06368     4B 99 02 F6 | 	mov	local02, local01
0636c     33 99 02 F1 | 	add	local02, objptr
06370     4B 9B 02 F6 | 	mov	local03, local01
06374     33 9B 02 F1 | 	add	local03, objptr
06378     4D 9D C2 FA | 	rdbyte	local04, local03
0637c     01 9C 86 F1 | 	sub	local04, #1
06380     4C 9D 42 FC | 	wrbyte	local04, local02
06384     4B 9F 02 F6 | 	mov	local05, local01
06388     33 9F 02 F1 | 	add	local05, objptr
0638c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06390     A8 FF 9F 5D |  if_ne	jmp	#LR__0577
06394                 | LR__0578
06394                 | LR__0579
06394     03 96 86 F1 | 	sub	local01, #3
06398     0E 96 46 F7 | 	zerox	local01, #14
0639c     4B 9F 02 F6 | 	mov	local05, local01
063a0     33 9F 02 F1 | 	add	local05, objptr
063a4     4F A1 CA FA | 	rdbyte	local06, local05 wz
063a8     80 00 90 AD |  if_e	jmp	#LR__0582
063ac     D7 3E 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
063b0                 | LR__0580
063b0     03 96 06 F1 | 	add	local01, #3
063b4     0E 96 46 F7 | 	zerox	local01, #14
063b8     4B 99 02 F6 | 	mov	local02, local01
063bc     33 99 02 F1 | 	add	local02, objptr
063c0     4B 9B 02 F6 | 	mov	local03, local01
063c4     33 9B 02 F1 | 	add	local03, objptr
063c8     4D 9D C2 FA | 	rdbyte	local04, local03
063cc     01 9C 06 F1 | 	add	local04, #1
063d0     4C 9D 42 FC | 	wrbyte	local04, local02
063d4     09 96 86 F1 | 	sub	local01, #9
063d8     0E 96 46 F7 | 	zerox	local01, #14
063dc     4B 99 02 F6 | 	mov	local02, local01
063e0     33 99 02 F1 | 	add	local02, objptr
063e4     4B 9B 02 F6 | 	mov	local03, local01
063e8     33 9B 02 F1 | 	add	local03, objptr
063ec     4D 9D C2 FA | 	rdbyte	local04, local03
063f0     01 9C 06 F1 | 	add	local04, #1
063f4     4C 9D 42 FC | 	wrbyte	local04, local02
063f8     06 96 06 F1 | 	add	local01, #6
063fc     0E 96 46 F7 | 	zerox	local01, #14
06400     4B 99 02 F6 | 	mov	local02, local01
06404     33 99 02 F1 | 	add	local02, objptr
06408     4B 9B 02 F6 | 	mov	local03, local01
0640c     33 9B 02 F1 | 	add	local03, objptr
06410     4D 9D C2 FA | 	rdbyte	local04, local03
06414     01 9C 86 F1 | 	sub	local04, #1
06418     4C 9D 42 FC | 	wrbyte	local04, local02
0641c     4B 9F 02 F6 | 	mov	local05, local01
06420     33 9F 02 F1 | 	add	local05, objptr
06424     4F A1 CA FA | 	rdbyte	local06, local05 wz
06428     84 FF 9F 5D |  if_ne	jmp	#LR__0580
0642c                 | LR__0581
0642c                 | LR__0582
0642c     07 96 86 F1 | 	sub	local01, #7
06430     0E 96 46 F7 | 	zerox	local01, #14
06434     4B 9F 02 F6 | 	mov	local05, local01
06438     33 9F 02 F1 | 	add	local05, objptr
0643c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06440     18 01 90 AD |  if_e	jmp	#LR__0589
06444     D7 8A 48 FB | 	callpa	#(@LR__0588-@LR__0583)>>2,fcache_load_ptr_
06448                 | LR__0583
06448     4B 99 02 F6 | 	mov	local02, local01
0644c     33 99 02 F1 | 	add	local02, objptr
06450     4B 9B 02 F6 | 	mov	local03, local01
06454     33 9B 02 F1 | 	add	local03, objptr
06458     4D 9D C2 FA | 	rdbyte	local04, local03
0645c     01 9C 86 F1 | 	sub	local04, #1
06460     4C 9D 42 FC | 	wrbyte	local04, local02
06464     01 96 06 F1 | 	add	local01, #1
06468     0E 96 46 F7 | 	zerox	local01, #14
0646c     4B 9F 02 F6 | 	mov	local05, local01
06470     33 9F 02 F1 | 	add	local05, objptr
06474     4F A1 CA FA | 	rdbyte	local06, local05 wz
06478     58 00 90 AD |  if_e	jmp	#LR__0585
0647c                 | LR__0584
0647c     04 96 86 F1 | 	sub	local01, #4
06480     0E 96 46 F7 | 	zerox	local01, #14
06484     4B 99 02 F6 | 	mov	local02, local01
06488     33 99 02 F1 | 	add	local02, objptr
0648c     4B 9B 02 F6 | 	mov	local03, local01
06490     33 9B 02 F1 | 	add	local03, objptr
06494     4D 9D C2 FA | 	rdbyte	local04, local03
06498     01 9C 06 F1 | 	add	local04, #1
0649c     4C 9D 42 FC | 	wrbyte	local04, local02
064a0     04 96 06 F1 | 	add	local01, #4
064a4     0E 96 46 F7 | 	zerox	local01, #14
064a8     4B 99 02 F6 | 	mov	local02, local01
064ac     33 99 02 F1 | 	add	local02, objptr
064b0     4B 9B 02 F6 | 	mov	local03, local01
064b4     33 9B 02 F1 | 	add	local03, objptr
064b8     4D 9D C2 FA | 	rdbyte	local04, local03
064bc     01 9C 86 F1 | 	sub	local04, #1
064c0     4C 9D 42 FC | 	wrbyte	local04, local02
064c4     4B 9F 02 F6 | 	mov	local05, local01
064c8     33 9F 02 F1 | 	add	local05, objptr
064cc     4F A1 CA FA | 	rdbyte	local06, local05 wz
064d0     A8 FF 9F 5D |  if_ne	jmp	#LR__0584
064d4                 | LR__0585
064d4     01 96 86 F1 | 	sub	local01, #1
064d8     0E 96 46 F7 | 	zerox	local01, #14
064dc     4B 9F 02 F6 | 	mov	local05, local01
064e0     33 9F 02 F1 | 	add	local05, objptr
064e4     4F A1 CA FA | 	rdbyte	local06, local05 wz
064e8     58 00 90 AD |  if_e	jmp	#LR__0587
064ec                 | LR__0586
064ec     04 96 86 F1 | 	sub	local01, #4
064f0     0E 96 46 F7 | 	zerox	local01, #14
064f4     4B 99 02 F6 | 	mov	local02, local01
064f8     33 99 02 F1 | 	add	local02, objptr
064fc     4B 9B 02 F6 | 	mov	local03, local01
06500     33 9B 02 F1 | 	add	local03, objptr
06504     4D 9D C2 FA | 	rdbyte	local04, local03
06508     01 9C 06 F1 | 	add	local04, #1
0650c     4C 9D 42 FC | 	wrbyte	local04, local02
06510     04 96 06 F1 | 	add	local01, #4
06514     0E 96 46 F7 | 	zerox	local01, #14
06518     4B 99 02 F6 | 	mov	local02, local01
0651c     33 99 02 F1 | 	add	local02, objptr
06520     4B 9B 02 F6 | 	mov	local03, local01
06524     33 9B 02 F1 | 	add	local03, objptr
06528     4D 9D C2 FA | 	rdbyte	local04, local03
0652c     01 9C 86 F1 | 	sub	local04, #1
06530     4C 9D 42 FC | 	wrbyte	local04, local02
06534     4B 9F 02 F6 | 	mov	local05, local01
06538     33 9F 02 F1 | 	add	local05, objptr
0653c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06540     A8 FF 9F 5D |  if_ne	jmp	#LR__0586
06544                 | LR__0587
06544     04 96 86 F1 | 	sub	local01, #4
06548     0E 96 46 F7 | 	zerox	local01, #14
0654c     4B 9F 02 F6 | 	mov	local05, local01
06550     33 9F 02 F1 | 	add	local05, objptr
06554     4F A1 CA FA | 	rdbyte	local06, local05 wz
06558     EC FE 9F 5D |  if_ne	jmp	#LR__0583
0655c                 | LR__0588
0655c                 | LR__0589
0655c     01 96 06 F1 | 	add	local01, #1
06560     0E 96 46 F7 | 	zerox	local01, #14
06564     4B 9F 02 F6 | 	mov	local05, local01
06568     33 9F 02 F1 | 	add	local05, objptr
0656c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06570     5C 00 90 AD |  if_e	jmp	#LR__0592
06574     D7 2C 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06578                 | LR__0590
06578     07 96 86 F1 | 	sub	local01, #7
0657c     0E 96 46 F7 | 	zerox	local01, #14
06580     4B 99 02 F6 | 	mov	local02, local01
06584     33 99 02 F1 | 	add	local02, objptr
06588     4B 9B 02 F6 | 	mov	local03, local01
0658c     33 9B 02 F1 | 	add	local03, objptr
06590     4D 9D C2 FA | 	rdbyte	local04, local03
06594     01 9C 06 F1 | 	add	local04, #1
06598     4C 9D 42 FC | 	wrbyte	local04, local02
0659c     07 96 06 F1 | 	add	local01, #7
065a0     0E 96 46 F7 | 	zerox	local01, #14
065a4     4B 99 02 F6 | 	mov	local02, local01
065a8     33 99 02 F1 | 	add	local02, objptr
065ac     4B 9B 02 F6 | 	mov	local03, local01
065b0     33 9B 02 F1 | 	add	local03, objptr
065b4     4D 9D C2 FA | 	rdbyte	local04, local03
065b8     01 9C 86 F1 | 	sub	local04, #1
065bc     4C 9D 42 FC | 	wrbyte	local04, local02
065c0     4B 9F 02 F6 | 	mov	local05, local01
065c4     33 9F 02 F1 | 	add	local05, objptr
065c8     4F A1 CA FA | 	rdbyte	local06, local05 wz
065cc     A8 FF 9F 5D |  if_ne	jmp	#LR__0590
065d0                 | LR__0591
065d0                 | LR__0592
065d0     07 96 86 F1 | 	sub	local01, #7
065d4     0E 96 46 F7 | 	zerox	local01, #14
065d8     4B 99 02 F6 | 	mov	local02, local01
065dc     33 99 02 F1 | 	add	local02, objptr
065e0     4B 9B 02 F6 | 	mov	local03, local01
065e4     33 9B 02 F1 | 	add	local03, objptr
065e8     4D 9D C2 FA | 	rdbyte	local04, local03
065ec     04 9C 86 F1 | 	sub	local04, #4
065f0     4C 9D 42 FC | 	wrbyte	local04, local02
065f4     4B 9F 02 F6 | 	mov	local05, local01
065f8     33 9F 02 F1 | 	add	local05, objptr
065fc     4F A1 CA FA | 	rdbyte	local06, local05 wz
06600     88 05 90 AD |  if_e	jmp	#LR__0627
06604                 | LR__0593
06604     07 96 06 F1 | 	add	local01, #7
06608     0E 96 46 F7 | 	zerox	local01, #14
0660c     4B 99 02 F6 | 	mov	local02, local01
06610     33 99 02 F1 | 	add	local02, objptr
06614     4B 9B 02 F6 | 	mov	local03, local01
06618     33 9B 02 F1 | 	add	local03, objptr
0661c     4D 9D C2 FA | 	rdbyte	local04, local03
06620     01 9C 06 F1 | 	add	local04, #1
06624     4C 9D 42 FC | 	wrbyte	local04, local02
06628     07 96 86 F1 | 	sub	local01, #7
0662c     0E 96 46 F7 | 	zerox	local01, #14
06630     4B 99 02 F6 | 	mov	local02, local01
06634     33 99 02 F1 | 	add	local02, objptr
06638     4B A5 02 F6 | 	mov	local08, local01
0663c     52 9B 02 F6 | 	mov	local03, local08
06640     33 A7 02 F6 | 	mov	local09, objptr
06644     33 9B 02 F1 | 	add	local03, objptr
06648     4D 9D C2 FA | 	rdbyte	local04, local03
0664c     01 9C 06 F1 | 	add	local04, #1
06650     4C 9D 42 FC | 	wrbyte	local04, local02
06654     4B 9F 02 F6 | 	mov	local05, local01
06658     33 9F 02 F1 | 	add	local05, objptr
0665c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06660     8C 00 90 AD |  if_e	jmp	#LR__0598
06664     D7 44 48 FB | 	callpa	#(@LR__0597-@LR__0594)>>2,fcache_load_ptr_
06668                 | LR__0594
06668     07 96 06 F1 | 	add	local01, #7
0666c     0E 96 46 F7 | 	zerox	local01, #14
06670     4B 99 02 F6 | 	mov	local02, local01
06674     33 99 02 F1 | 	add	local02, objptr
06678     4B A5 02 F6 | 	mov	local08, local01
0667c     52 9B 02 F6 | 	mov	local03, local08
06680     33 A7 02 F6 | 	mov	local09, objptr
06684     33 9B 02 F1 | 	add	local03, objptr
06688     4D 9D C2 FA | 	rdbyte	local04, local03
0668c     01 9C 86 F1 | 	sub	local04, #1
06690     4C 9D 42 FC | 	wrbyte	local04, local02
06694     07 96 86 F1 | 	sub	local01, #7
06698     0E 96 46 F7 | 	zerox	local01, #14
0669c     4B 9F 02 F6 | 	mov	local05, local01
066a0     33 9F 02 F1 | 	add	local05, objptr
066a4     4F A1 CA FA | 	rdbyte	local06, local05 wz
066a8     34 00 90 AD |  if_e	jmp	#LR__0596
066ac                 | LR__0595
066ac     4B 99 02 F6 | 	mov	local02, local01
066b0     33 99 02 F1 | 	add	local02, objptr
066b4     4B A5 02 F6 | 	mov	local08, local01
066b8     52 9B 02 F6 | 	mov	local03, local08
066bc     33 A7 02 F6 | 	mov	local09, objptr
066c0     33 9B 02 F1 | 	add	local03, objptr
066c4     4D 9D C2 FA | 	rdbyte	local04, local03
066c8     01 9C 86 F1 | 	sub	local04, #1
066cc     4C 9D 42 FC | 	wrbyte	local04, local02
066d0     4B 9F 02 F6 | 	mov	local05, local01
066d4     33 9F 02 F1 | 	add	local05, objptr
066d8     4F A1 CA FA | 	rdbyte	local06, local05 wz
066dc     CC FF 9F 5D |  if_ne	jmp	#LR__0595
066e0                 | LR__0596
066e0     4B 9F 02 F6 | 	mov	local05, local01
066e4     33 9F 02 F1 | 	add	local05, objptr
066e8     4F A1 CA FA | 	rdbyte	local06, local05 wz
066ec     78 FF 9F 5D |  if_ne	jmp	#LR__0594
066f0                 | LR__0597
066f0                 | LR__0598
066f0     07 96 86 F1 | 	sub	local01, #7
066f4     0E 96 46 F7 | 	zerox	local01, #14
066f8     4B 9F 02 F6 | 	mov	local05, local01
066fc     33 9F 02 F1 | 	add	local05, objptr
06700     4F A1 CA FA | 	rdbyte	local06, local05 wz
06704     88 00 90 AD |  if_e	jmp	#LR__0601
06708     D7 42 48 FB | 	callpa	#(@LR__0600-@LR__0599)>>2,fcache_load_ptr_
0670c                 | LR__0599
0670c     0C 96 06 F1 | 	add	local01, #12
06710     0E 96 46 F7 | 	zerox	local01, #14
06714     4B 99 02 F6 | 	mov	local02, local01
06718     33 99 02 F1 | 	add	local02, objptr
0671c     4B 9B 02 F6 | 	mov	local03, local01
06720     33 9B 02 F1 | 	add	local03, objptr
06724     4D 9D C2 FA | 	rdbyte	local04, local03
06728     01 9C 06 F1 | 	add	local04, #1
0672c     4C 9D 42 FC | 	wrbyte	local04, local02
06730     01 96 06 F1 | 	add	local01, #1
06734     0E 96 46 F7 | 	zerox	local01, #14
06738     4B 99 02 F6 | 	mov	local02, local01
0673c     33 99 02 F1 | 	add	local02, objptr
06740     4B 9B 02 F6 | 	mov	local03, local01
06744     33 9B 02 F1 | 	add	local03, objptr
06748     4D 9D C2 FA | 	rdbyte	local04, local03
0674c     01 9C 06 F1 | 	add	local04, #1
06750     4C 9D 42 FC | 	wrbyte	local04, local02
06754     0D 96 86 F1 | 	sub	local01, #13
06758     0E 96 46 F7 | 	zerox	local01, #14
0675c     4B 99 02 F6 | 	mov	local02, local01
06760     33 99 02 F1 | 	add	local02, objptr
06764     4B A5 02 F6 | 	mov	local08, local01
06768     52 9B 02 F6 | 	mov	local03, local08
0676c     33 A7 02 F6 | 	mov	local09, objptr
06770     33 9B 02 F1 | 	add	local03, objptr
06774     4D 9D C2 FA | 	rdbyte	local04, local03
06778     01 9C 86 F1 | 	sub	local04, #1
0677c     4C 9D 42 FC | 	wrbyte	local04, local02
06780     4B 9F 02 F6 | 	mov	local05, local01
06784     33 9F 02 F1 | 	add	local05, objptr
06788     4F A1 CA FA | 	rdbyte	local06, local05 wz
0678c     7C FF 9F 5D |  if_ne	jmp	#LR__0599
06790                 | LR__0600
06790                 | LR__0601
06790     4B 9F 02 F6 | 	mov	local05, local01
06794     33 9F 02 F1 | 	add	local05, objptr
06798     4F A1 CA FA | 	rdbyte	local06, local05 wz
0679c     78 00 90 AD |  if_e	jmp	#LR__0603
067a0                 | LR__0602
067a0     2F 99 02 F6 | 	mov	local02, __sendreg
067a4     2F 9F 02 F6 | 	mov	local05, __sendreg
067a8     13 98 46 F7 | 	zerox	local02, #19
067ac     14 9E 46 F0 | 	shr	local05, #20
067b0     02 9E 66 F0 | 	shl	local05, #2
067b4     2D 9F 02 F1 | 	add	local05, __methods__
067b8     4F 9F 02 FB | 	rdlong	local05, local05
067bc     4B A7 02 F6 | 	mov	local09, local01
067c0     33 A7 02 F1 | 	add	local09, objptr
067c4     53 8D C2 FA | 	rdbyte	arg01, local09
067c8     33 A5 02 F6 | 	mov	local08, objptr
067cc     4C 67 02 F6 | 	mov	objptr, local02
067d0     2D 9E 62 FD | 	call	local05
067d4     2F 67 02 F6 | 	mov	objptr, __sendreg
067d8     2F 9F 02 F6 | 	mov	local05, __sendreg
067dc     13 66 46 F7 | 	zerox	objptr, #19
067e0     14 9E 46 F0 | 	shr	local05, #20
067e4     02 9E 66 F0 | 	shl	local05, #2
067e8     2D 9F 02 F1 | 	add	local05, __methods__
067ec     4F 9F 02 FB | 	rdlong	local05, local05
067f0     4B A7 02 F6 | 	mov	local09, local01
067f4     52 A3 02 F6 | 	mov	local07, local08
067f8     52 A7 02 F1 | 	add	local09, local08
067fc     53 8D C2 FA | 	rdbyte	arg01, local09
06800     2D 9E 62 FD | 	call	local05
06804     52 67 02 F6 | 	mov	objptr, local08
06808     4B 9F 02 F6 | 	mov	local05, local01
0680c     33 9F 02 F1 | 	add	local05, objptr
06810     4F A1 CA FA | 	rdbyte	local06, local05 wz
06814     88 FF 9F 5D |  if_ne	jmp	#LR__0602
06818                 | LR__0603
06818     0C 96 06 F1 | 	add	local01, #12
0681c     0E 96 46 F7 | 	zerox	local01, #14
06820     4B 9F 02 F6 | 	mov	local05, local01
06824     33 9F 02 F1 | 	add	local05, objptr
06828     4F A1 CA FA | 	rdbyte	local06, local05 wz
0682c     90 01 90 AD |  if_e	jmp	#LR__0612
06830     D7 C6 48 FB | 	callpa	#(@LR__0611-@LR__0604)>>2,fcache_load_ptr_
06834                 | LR__0604
06834     4B 99 02 F6 | 	mov	local02, local01
06838     33 99 02 F1 | 	add	local02, objptr
0683c     4B A5 02 F6 | 	mov	local08, local01
06840     52 9B 02 F6 | 	mov	local03, local08
06844     33 A7 02 F6 | 	mov	local09, objptr
06848     33 9B 02 F1 | 	add	local03, objptr
0684c     4D 9D C2 FA | 	rdbyte	local04, local03
06850     01 9C 86 F1 | 	sub	local04, #1
06854     4C 9D 42 FC | 	wrbyte	local04, local02
06858     4B 9F 02 F6 | 	mov	local05, local01
0685c     33 9F 02 F1 | 	add	local05, objptr
06860     4F A1 CA FA | 	rdbyte	local06, local05 wz
06864     60 00 90 AD |  if_e	jmp	#LR__0606
06868                 | LR__0605
06868     04 96 06 F1 | 	add	local01, #4
0686c     0E 96 46 F7 | 	zerox	local01, #14
06870     4B 99 02 F6 | 	mov	local02, local01
06874     33 99 02 F1 | 	add	local02, objptr
06878     4B 9B 02 F6 | 	mov	local03, local01
0687c     33 9B 02 F1 | 	add	local03, objptr
06880     4D 9D C2 FA | 	rdbyte	local04, local03
06884     01 9C 06 F1 | 	add	local04, #1
06888     4C 9D 42 FC | 	wrbyte	local04, local02
0688c     04 96 86 F1 | 	sub	local01, #4
06890     0E 96 46 F7 | 	zerox	local01, #14
06894     4B 99 02 F6 | 	mov	local02, local01
06898     33 99 02 F1 | 	add	local02, objptr
0689c     4B A5 02 F6 | 	mov	local08, local01
068a0     52 9B 02 F6 | 	mov	local03, local08
068a4     33 A7 02 F6 | 	mov	local09, objptr
068a8     33 9B 02 F1 | 	add	local03, objptr
068ac     4D 9D C2 FA | 	rdbyte	local04, local03
068b0     01 9C 86 F1 | 	sub	local04, #1
068b4     4C 9D 42 FC | 	wrbyte	local04, local02
068b8     4B 9F 02 F6 | 	mov	local05, local01
068bc     33 9F 02 F1 | 	add	local05, objptr
068c0     4F A1 CA FA | 	rdbyte	local06, local05 wz
068c4     A0 FF 9F 5D |  if_ne	jmp	#LR__0605
068c8                 | LR__0606
068c8     01 96 06 F1 | 	add	local01, #1
068cc     0E 96 46 F7 | 	zerox	local01, #14
068d0     4B 9F 02 F6 | 	mov	local05, local01
068d4     33 9F 02 F1 | 	add	local05, objptr
068d8     4F A1 CA FA | 	rdbyte	local06, local05 wz
068dc     58 00 90 AD |  if_e	jmp	#LR__0608
068e0                 | LR__0607
068e0     04 96 06 F1 | 	add	local01, #4
068e4     0E 96 46 F7 | 	zerox	local01, #14
068e8     4B 99 02 F6 | 	mov	local02, local01
068ec     33 99 02 F1 | 	add	local02, objptr
068f0     4B 9B 02 F6 | 	mov	local03, local01
068f4     33 9B 02 F1 | 	add	local03, objptr
068f8     4D 9D C2 FA | 	rdbyte	local04, local03
068fc     01 9C 06 F1 | 	add	local04, #1
06900     4C 9D 42 FC | 	wrbyte	local04, local02
06904     04 96 86 F1 | 	sub	local01, #4
06908     0E 96 46 F7 | 	zerox	local01, #14
0690c     4B 99 02 F6 | 	mov	local02, local01
06910     33 99 02 F1 | 	add	local02, objptr
06914     4B 9B 02 F6 | 	mov	local03, local01
06918     33 9B 02 F1 | 	add	local03, objptr
0691c     4D 9D C2 FA | 	rdbyte	local04, local03
06920     01 9C 86 F1 | 	sub	local04, #1
06924     4C 9D 42 FC | 	wrbyte	local04, local02
06928     4B 9F 02 F6 | 	mov	local05, local01
0692c     33 9F 02 F1 | 	add	local05, objptr
06930     4F A1 CA FA | 	rdbyte	local06, local05 wz
06934     A8 FF 9F 5D |  if_ne	jmp	#LR__0607
06938                 | LR__0608
06938     01 96 06 F1 | 	add	local01, #1
0693c     0E 96 46 F7 | 	zerox	local01, #14
06940     4B 9F 02 F6 | 	mov	local05, local01
06944     33 9F 02 F1 | 	add	local05, objptr
06948     4F A1 CA FA | 	rdbyte	local06, local05 wz
0694c     58 00 90 AD |  if_e	jmp	#LR__0610
06950                 | LR__0609
06950     04 96 06 F1 | 	add	local01, #4
06954     0E 96 46 F7 | 	zerox	local01, #14
06958     4B 99 02 F6 | 	mov	local02, local01
0695c     33 99 02 F1 | 	add	local02, objptr
06960     4B 9B 02 F6 | 	mov	local03, local01
06964     33 9B 02 F1 | 	add	local03, objptr
06968     4D 9D C2 FA | 	rdbyte	local04, local03
0696c     01 9C 06 F1 | 	add	local04, #1
06970     4C 9D 42 FC | 	wrbyte	local04, local02
06974     04 96 86 F1 | 	sub	local01, #4
06978     0E 96 46 F7 | 	zerox	local01, #14
0697c     4B 99 02 F6 | 	mov	local02, local01
06980     33 99 02 F1 | 	add	local02, objptr
06984     4B 9B 02 F6 | 	mov	local03, local01
06988     33 9B 02 F1 | 	add	local03, objptr
0698c     4D 9D C2 FA | 	rdbyte	local04, local03
06990     01 9C 86 F1 | 	sub	local04, #1
06994     4C 9D 42 FC | 	wrbyte	local04, local02
06998     4B 9F 02 F6 | 	mov	local05, local01
0699c     33 9F 02 F1 | 	add	local05, objptr
069a0     4F A1 CA FA | 	rdbyte	local06, local05 wz
069a4     A8 FF 9F 5D |  if_ne	jmp	#LR__0609
069a8                 | LR__0610
069a8     02 96 06 F1 | 	add	local01, #2
069ac     0E 96 46 F7 | 	zerox	local01, #14
069b0     4B 9F 02 F6 | 	mov	local05, local01
069b4     33 9F 02 F1 | 	add	local05, objptr
069b8     4F A1 CA FA | 	rdbyte	local06, local05 wz
069bc     74 FE 9F 5D |  if_ne	jmp	#LR__0604
069c0                 | LR__0611
069c0                 | LR__0612
069c0     03 96 06 F1 | 	add	local01, #3
069c4     0E 96 46 F7 | 	zerox	local01, #14
069c8     4B 9F 02 F6 | 	mov	local05, local01
069cc     33 9F 02 F1 | 	add	local05, objptr
069d0     4F A1 CA FA | 	rdbyte	local06, local05 wz
069d4     30 00 90 AD |  if_e	jmp	#LR__0615
069d8     D7 16 48 FB | 	callpa	#(@LR__0614-@LR__0613)>>2,fcache_load_ptr_
069dc                 | LR__0613
069dc     4B 99 02 F6 | 	mov	local02, local01
069e0     33 99 02 F1 | 	add	local02, objptr
069e4     4B 9B 02 F6 | 	mov	local03, local01
069e8     33 9B 02 F1 | 	add	local03, objptr
069ec     4D 9D C2 FA | 	rdbyte	local04, local03
069f0     01 9C 86 F1 | 	sub	local04, #1
069f4     4C 9D 42 FC | 	wrbyte	local04, local02
069f8     4B 9F 02 F6 | 	mov	local05, local01
069fc     33 9F 02 F1 | 	add	local05, objptr
06a00     4F A1 CA FA | 	rdbyte	local06, local05 wz
06a04     D4 FF 9F 5D |  if_ne	jmp	#LR__0613
06a08                 | LR__0614
06a08                 | LR__0615
06a08     01 96 86 F1 | 	sub	local01, #1
06a0c     0E 96 46 F7 | 	zerox	local01, #14
06a10     4B 9F 02 F6 | 	mov	local05, local01
06a14     33 9F 02 F1 | 	add	local05, objptr
06a18     4F A1 CA FA | 	rdbyte	local06, local05 wz
06a1c     5C 00 90 AD |  if_e	jmp	#LR__0618
06a20     D7 2C 48 FB | 	callpa	#(@LR__0617-@LR__0616)>>2,fcache_load_ptr_
06a24                 | LR__0616
06a24     01 96 06 F1 | 	add	local01, #1
06a28     0E 96 46 F7 | 	zerox	local01, #14
06a2c     4B 99 02 F6 | 	mov	local02, local01
06a30     33 99 02 F1 | 	add	local02, objptr
06a34     4B 9B 02 F6 | 	mov	local03, local01
06a38     33 9B 02 F1 | 	add	local03, objptr
06a3c     4D 9D C2 FA | 	rdbyte	local04, local03
06a40     01 9C 06 F1 | 	add	local04, #1
06a44     4C 9D 42 FC | 	wrbyte	local04, local02
06a48     01 96 86 F1 | 	sub	local01, #1
06a4c     0E 96 46 F7 | 	zerox	local01, #14
06a50     4B 99 02 F6 | 	mov	local02, local01
06a54     33 99 02 F1 | 	add	local02, objptr
06a58     4B 9B 02 F6 | 	mov	local03, local01
06a5c     33 9B 02 F1 | 	add	local03, objptr
06a60     4D 9D C2 FA | 	rdbyte	local04, local03
06a64     01 9C 86 F1 | 	sub	local04, #1
06a68     4C 9D 42 FC | 	wrbyte	local04, local02
06a6c     4B 9F 02 F6 | 	mov	local05, local01
06a70     33 9F 02 F1 | 	add	local05, objptr
06a74     4F A1 CA FA | 	rdbyte	local06, local05 wz
06a78     A8 FF 9F 5D |  if_ne	jmp	#LR__0616
06a7c                 | LR__0617
06a7c                 | LR__0618
06a7c     01 96 86 F1 | 	sub	local01, #1
06a80     0E 96 46 F7 | 	zerox	local01, #14
06a84     4B 9F 02 F6 | 	mov	local05, local01
06a88     33 9F 02 F1 | 	add	local05, objptr
06a8c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06a90     A0 00 90 AD |  if_e	jmp	#LR__0623
06a94     D7 4E 48 FB | 	callpa	#(@LR__0622-@LR__0619)>>2,fcache_load_ptr_
06a98                 | LR__0619
06a98     4B 99 02 F6 | 	mov	local02, local01
06a9c     33 99 02 F1 | 	add	local02, objptr
06aa0     4B 9B 02 F6 | 	mov	local03, local01
06aa4     33 9B 02 F1 | 	add	local03, objptr
06aa8     4D 9D C2 FA | 	rdbyte	local04, local03
06aac     01 9C 86 F1 | 	sub	local04, #1
06ab0     4C 9D 42 FC | 	wrbyte	local04, local02
06ab4     4B 9F 02 F6 | 	mov	local05, local01
06ab8     33 9F 02 F1 | 	add	local05, objptr
06abc     4F A1 CA FA | 	rdbyte	local06, local05 wz
06ac0     58 00 90 AD |  if_e	jmp	#LR__0621
06ac4                 | LR__0620
06ac4     04 96 86 F1 | 	sub	local01, #4
06ac8     0E 96 46 F7 | 	zerox	local01, #14
06acc     4B 99 02 F6 | 	mov	local02, local01
06ad0     33 99 02 F1 | 	add	local02, objptr
06ad4     4B 9B 02 F6 | 	mov	local03, local01
06ad8     33 9B 02 F1 | 	add	local03, objptr
06adc     4D 9D C2 FA | 	rdbyte	local04, local03
06ae0     01 9C 06 F1 | 	add	local04, #1
06ae4     4C 9D 42 FC | 	wrbyte	local04, local02
06ae8     04 96 06 F1 | 	add	local01, #4
06aec     0E 96 46 F7 | 	zerox	local01, #14
06af0     4B 99 02 F6 | 	mov	local02, local01
06af4     33 99 02 F1 | 	add	local02, objptr
06af8     4B 9B 02 F6 | 	mov	local03, local01
06afc     33 9B 02 F1 | 	add	local03, objptr
06b00     4D 9D C2 FA | 	rdbyte	local04, local03
06b04     01 9C 86 F1 | 	sub	local04, #1
06b08     4C 9D 42 FC | 	wrbyte	local04, local02
06b0c     4B 9F 02 F6 | 	mov	local05, local01
06b10     33 9F 02 F1 | 	add	local05, objptr
06b14     4F A1 CA FA | 	rdbyte	local06, local05 wz
06b18     A8 FF 9F 5D |  if_ne	jmp	#LR__0620
06b1c                 | LR__0621
06b1c     04 96 86 F1 | 	sub	local01, #4
06b20     0E 96 46 F7 | 	zerox	local01, #14
06b24     4B 9F 02 F6 | 	mov	local05, local01
06b28     33 9F 02 F1 | 	add	local05, objptr
06b2c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06b30     64 FF 9F 5D |  if_ne	jmp	#LR__0619
06b34                 | LR__0622
06b34                 | LR__0623
06b34     06 96 86 F1 | 	sub	local01, #6
06b38     0E 96 46 F7 | 	zerox	local01, #14
06b3c     4B 9F 02 F6 | 	mov	local05, local01
06b40     33 9F 02 F1 | 	add	local05, objptr
06b44     4F A1 CA FA | 	rdbyte	local06, local05 wz
06b48     30 00 90 AD |  if_e	jmp	#LR__0626
06b4c     D7 16 48 FB | 	callpa	#(@LR__0625-@LR__0624)>>2,fcache_load_ptr_
06b50                 | LR__0624
06b50     4B 99 02 F6 | 	mov	local02, local01
06b54     33 99 02 F1 | 	add	local02, objptr
06b58     4B 9B 02 F6 | 	mov	local03, local01
06b5c     33 9B 02 F1 | 	add	local03, objptr
06b60     4D 9D C2 FA | 	rdbyte	local04, local03
06b64     01 9C 86 F1 | 	sub	local04, #1
06b68     4C 9D 42 FC | 	wrbyte	local04, local02
06b6c     4B 9F 02 F6 | 	mov	local05, local01
06b70     33 9F 02 F1 | 	add	local05, objptr
06b74     4F A1 CA FA | 	rdbyte	local06, local05 wz
06b78     D4 FF 9F 5D |  if_ne	jmp	#LR__0624
06b7c                 | LR__0625
06b7c                 | LR__0626
06b7c     4B 9F 02 F6 | 	mov	local05, local01
06b80     33 9F 02 F1 | 	add	local05, objptr
06b84     4F A1 CA FA | 	rdbyte	local06, local05 wz
06b88     78 FA 9F 5D |  if_ne	jmp	#LR__0593
06b8c                 | LR__0627
06b8c     07 96 86 F1 | 	sub	local01, #7
06b90     0E 96 46 F7 | 	zerox	local01, #14
06b94     4B 9F 02 F6 | 	mov	local05, local01
06b98     33 9F 02 F1 | 	add	local05, objptr
06b9c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06ba0     30 00 90 AD |  if_e	jmp	#LR__0630
06ba4     D7 16 48 FB | 	callpa	#(@LR__0629-@LR__0628)>>2,fcache_load_ptr_
06ba8                 | LR__0628
06ba8     4B 99 02 F6 | 	mov	local02, local01
06bac     33 99 02 F1 | 	add	local02, objptr
06bb0     4B 9B 02 F6 | 	mov	local03, local01
06bb4     33 9B 02 F1 | 	add	local03, objptr
06bb8     4D 9D C2 FA | 	rdbyte	local04, local03
06bbc     01 9C 86 F1 | 	sub	local04, #1
06bc0     4C 9D 42 FC | 	wrbyte	local04, local02
06bc4     4B 9F 02 F6 | 	mov	local05, local01
06bc8     33 9F 02 F1 | 	add	local05, objptr
06bcc     4F A1 CA FA | 	rdbyte	local06, local05 wz
06bd0     D4 FF 9F 5D |  if_ne	jmp	#LR__0628
06bd4                 | LR__0629
06bd4                 | LR__0630
06bd4     04 96 86 F1 | 	sub	local01, #4
06bd8     0E 96 46 F7 | 	zerox	local01, #14
06bdc     4B 99 02 F6 | 	mov	local02, local01
06be0     33 99 02 F1 | 	add	local02, objptr
06be4     4B A5 02 F6 | 	mov	local08, local01
06be8     52 9B 02 F6 | 	mov	local03, local08
06bec     33 A7 02 F6 | 	mov	local09, objptr
06bf0     33 9B 02 F1 | 	add	local03, objptr
06bf4     4D 9D C2 FA | 	rdbyte	local04, local03
06bf8     01 9C 86 F1 | 	sub	local04, #1
06bfc     4C 9D 42 FC | 	wrbyte	local04, local02
06c00     4B 99 02 F6 | 	mov	local02, local01
06c04     4C 9F 02 F6 | 	mov	local05, local02
06c08     33 9D 02 F6 | 	mov	local04, objptr
06c0c     33 9F 02 F1 | 	add	local05, objptr
06c10     4F A1 CA FA | 	rdbyte	local06, local05 wz
06c14     C4 DF 9F 5D |  if_ne	jmp	#LR__0448
06c18                 | LR__0631
06c18     01 96 86 F1 | 	sub	local01, #1
06c1c     0E 96 46 F7 | 	zerox	local01, #14
06c20     4B 99 02 F6 | 	mov	local02, local01
06c24     33 99 02 F1 | 	add	local02, objptr
06c28     4B 9B 02 F6 | 	mov	local03, local01
06c2c     33 9B 02 F1 | 	add	local03, objptr
06c30     4D 9D C2 FA | 	rdbyte	local04, local03
06c34     01 9C 86 F1 | 	sub	local04, #1
06c38     4C 9D 42 FC | 	wrbyte	local04, local02
06c3c     4B 9F 02 F6 | 	mov	local05, local01
06c40     33 9F 02 F1 | 	add	local05, objptr
06c44     4F A1 CA FA | 	rdbyte	local06, local05 wz
06c48     54 DF 9F 5D |  if_ne	jmp	#LR__0447
06c4c                 | LR__0632
06c4c     0B 96 06 F1 | 	add	local01, #11
06c50     0E 96 46 F7 | 	zerox	local01, #14
06c54     4B 9F 02 F6 | 	mov	local05, local01
06c58     33 9F 02 F1 | 	add	local05, objptr
06c5c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06c60     30 00 90 AD |  if_e	jmp	#LR__0635
06c64     D7 16 48 FB | 	callpa	#(@LR__0634-@LR__0633)>>2,fcache_load_ptr_
06c68                 | LR__0633
06c68     4B 99 02 F6 | 	mov	local02, local01
06c6c     33 99 02 F1 | 	add	local02, objptr
06c70     4B 9B 02 F6 | 	mov	local03, local01
06c74     33 9B 02 F1 | 	add	local03, objptr
06c78     4D 9D C2 FA | 	rdbyte	local04, local03
06c7c     01 9C 86 F1 | 	sub	local04, #1
06c80     4C 9D 42 FC | 	wrbyte	local04, local02
06c84     4B 9F 02 F6 | 	mov	local05, local01
06c88     33 9F 02 F1 | 	add	local05, objptr
06c8c     4F A1 CA FA | 	rdbyte	local06, local05 wz
06c90     D4 FF 9F 5D |  if_ne	jmp	#LR__0633
06c94                 | LR__0634
06c94                 | LR__0635
06c94     02 96 86 F1 | 	sub	local01, #2
06c98     0E 96 46 F7 | 	zerox	local01, #14
06c9c     4B 9F 02 F6 | 	mov	local05, local01
06ca0     33 9F 02 F1 | 	add	local05, objptr
06ca4     4F A1 CA FA | 	rdbyte	local06, local05 wz
06ca8     44 D3 9F 5D |  if_ne	jmp	#LR__0383
06cac                 | LR__0636
06cac     0A 96 86 F1 | 	sub	local01, #10
06cb0     0E 96 46 F7 | 	zerox	local01, #14
06cb4     4B 9F 02 F6 | 	mov	local05, local01
06cb8     33 9F 02 F1 | 	add	local05, objptr
06cbc     4F A1 CA FA | 	rdbyte	local06, local05 wz
06cc0     18 B5 9F 5D |  if_ne	jmp	#LR__0216
06cc4                 | LR__0637
06cc4     E7 F0 03 F6 | 	mov	ptra, fp
06cc8     F2 00 A0 FD | 	call	#popregs_
06ccc                 | _life_b_program_ret
06ccc     2D 00 64 FD | 	ret
06cd0                 | hubexit
06cd0     C1 00 80 FD | 	jmp	#cogexit
06cd4                 | 
06cd4                 | __system___setbaud
06cd4     14 B0 06 FB | 	rdlong	muldiva_, #20
06cd8     46 B3 02 F6 | 	mov	muldivb_, arg01
06cdc     FA 00 A0 FD | 	call	#divide_
06ce0     D7 06 48 FB | 	callpa	#(@LR__0641-@LR__0640)>>2,fcache_load_ptr_
06ce4                 | LR__0640
06ce4     3E 76 9E FA | 	rdpin	result1, #62 wc
06ce8     3C 79 A2 F1 | 	subx	result2, result2
06cec     F4 FF 9F CD |  if_b	jmp	#LR__0640
06cf0                 | LR__0641
06cf0     40 7C 64 FD | 	dirl	#62
06cf4     40 7E 64 FD | 	dirl	#63
06cf8     34 B3 62 FC | 	wrlong	muldivb_, ptr___system__dat__
06cfc     10 B2 66 F0 | 	shl	muldivb_, #16
06d00     07 8E 06 F6 | 	mov	arg02, #7
06d04     59 8F 02 F1 | 	add	arg02, muldivb_
06d08     3E F8 0C FC | 	wrpin	#124, #62
06d0c     3E 8E 16 FC | 	wxpin	arg02, #62
06d10     3F 7C 0C FC | 	wrpin	#62, #63
06d14     14 8E 06 F1 | 	add	arg02, #20
06d18     3F 8E 16 FC | 	wxpin	arg02, #63
06d1c     41 7C 64 FD | 	dirh	#62
06d20     41 7E 64 FD | 	dirh	#63
06d24                 | __system___setbaud_ret
06d24     2D 00 64 FD | 	ret
06d28                 | 
06d28                 | __system___txraw
06d28     01 CA 05 F6 | 	mov	COUNT_, #1
06d2c     E8 00 A0 FD | 	call	#pushregs_
06d30     46 97 02 F6 | 	mov	local01, arg01
06d34     D7 06 48 FB | 	callpa	#(@LR__0651-@LR__0650)>>2,fcache_load_ptr_
06d38                 | LR__0650
06d38     3E 76 9E FA | 	rdpin	result1, #62 wc
06d3c     3C 79 A2 F1 | 	subx	result2, result2
06d40     F4 FF 9F CD |  if_b	jmp	#LR__0650
06d44                 | LR__0651
06d44     34 77 0A FB | 	rdlong	result1, ptr___system__dat__ wz
06d48     42 0F 00 AF 
06d4c     80 8C 06 A6 |  if_e	mov	arg01, ##2000000
06d50     80 FF BF AD |  if_e	call	#__system___setbaud
06d54     58 7C 64 FD | 	drvl	#62
06d58     3E 96 26 FC | 	wypin	local01, #62
06d5c     01 76 06 F6 | 	mov	result1, #1
06d60     E7 F0 03 F6 | 	mov	ptra, fp
06d64     F2 00 A0 FD | 	call	#popregs_
06d68                 | __system___txraw_ret
06d68     2D 00 64 FD | 	ret
06d6c                 | 
06d6c                 | __system___rxraw
06d6c     0D CA 05 F6 | 	mov	COUNT_, #13
06d70     E8 00 A0 FD | 	call	#pushregs_
06d74     46 97 02 F6 | 	mov	local01, arg01
06d78     34 99 0A FB | 	rdlong	local02, ptr___system__dat__ wz
06d7c     42 0F 00 AF 
06d80     80 8C 06 A6 |  if_e	mov	arg01, ##2000000
06d84     4C FF BF AD |  if_e	call	#__system___setbaud
06d88     00 96 0E F2 | 	cmp	local01, #0 wz
06d8c     20 00 90 AD |  if_e	jmp	#LR__0660
06d90     14 9A 06 FB | 	rdlong	local03, #20
06d94     0A 9A 46 F0 | 	shr	local03, #10
06d98     4D 97 02 FD | 	qmul	local01, local03
06d9c     1A 76 62 FD | 	getct	result1
06da0     18 9C 62 FD | 	getqx	local04
06da4     4E 77 02 F1 | 	add	result1, local04
06da8     3B 9F 02 F6 | 	mov	local05, result1
06dac     04 00 90 FD | 	jmp	#LR__0661
06db0                 | LR__0660
06db0     00 9E 06 F6 | 	mov	local05, #0
06db4                 | LR__0661
06db4     01 A0 66 F6 | 	neg	local06, #1
06db8     3F A2 06 F6 | 	mov	local07, #63
06dbc     00 A4 06 F6 | 	mov	local08, #0
06dc0     04 68 06 F1 | 	add	ptr___system__dat__, #4
06dc4     34 A7 02 FB | 	rdlong	local09, ptr___system__dat__
06dc8     04 68 86 F1 | 	sub	ptr___system__dat__, #4
06dcc                 | LR__0662
06dcc     08 A6 16 F4 | 	testb	local09, #8 wc
06dd0     09 A6 76 F4 | 	testbn	local09, #9 andc
06dd4     0A A6 46 F0 | 	shr	local09, #10
06dd8     01 A4 06 C6 |  if_b	mov	local08, #1
06ddc     40 7E 6C 3D |  if_ae	testp	#63 wz
06de0     01 A4 06 26 |  if_nc_and_z	mov	local08, #1
06de4     3F A6 8E 2A |  if_nc_and_z	rdpin	local09, #63
06de8     04 A6 46 20 |  if_nc_and_z	shr	local09, #4
06dec                 | LR__0663
06dec     00 98 06 F6 | 	mov	local02, #0
06df0     00 A4 0E F2 | 	cmp	local08, #0 wz
06df4     01 98 66 56 |  if_ne	neg	local02, #1
06df8     00 A8 06 F6 | 	mov	local10, #0
06dfc     00 9A 06 F6 | 	mov	local03, #0
06e00     00 96 0E F2 | 	cmp	local01, #0 wz
06e04     01 9A 66 56 |  if_ne	neg	local03, #1
06e08     00 9C 06 F6 | 	mov	local04, #0
06e0c     00 AA 06 F6 | 	mov	local11, #0
06e10     4F AD 02 F6 | 	mov	local12, local05
06e14     1A 76 62 FD | 	getct	result1
06e18     3B AF 02 F6 | 	mov	local13, result1
06e1c     57 AD 82 F1 | 	sub	local12, local13
06e20     00 AC 56 F2 | 	cmps	local12, #0 wc
06e24     00 AA 26 C6 |  if_b	not	local11, #0
06e28     00 AA 0E F2 | 	cmp	local11, #0 wz
06e2c     00 9C 26 56 |  if_ne	not	local04, #0
06e30     4E 9B CA F7 | 	test	local03, local04 wz
06e34     00 A8 26 56 |  if_ne	not	local10, #0
06e38     54 99 4A F5 | 	or	local02, local10 wz
06e3c     8C FF 9F AD |  if_e	jmp	#LR__0662
06e40     00 A4 0E F2 | 	cmp	local08, #0 wz
06e44     53 A1 02 56 |  if_ne	mov	local06, local09
06e48     50 A1 E2 58 |  if_ne	getbyte	local06, local06, #0
06e4c     04 68 06 F1 | 	add	ptr___system__dat__, #4
06e50     34 A7 62 FC | 	wrlong	local09, ptr___system__dat__
06e54     04 68 86 F1 | 	sub	ptr___system__dat__, #4
06e58     50 77 02 F6 | 	mov	result1, local06
06e5c     E7 F0 03 F6 | 	mov	ptra, fp
06e60     F2 00 A0 FD | 	call	#popregs_
06e64                 | __system___rxraw_ret
06e64     2D 00 64 FD | 	ret
06e68                 | 
06e68                 | __system____builtin_memmove
06e68     46 7D 02 F6 | 	mov	_var01, arg01
06e6c     47 8D 52 F2 | 	cmps	arg01, arg02 wc
06e70     10 00 90 CD |  if_b	jmp	#LR__0670
06e74     47 7F 02 F6 | 	mov	_var02, arg02
06e78     48 7F 02 F1 | 	add	_var02, arg03
06e7c     3F 8D 52 F2 | 	cmps	arg01, _var02 wc
06e80     48 00 90 CD |  if_b	jmp	#LR__0676
06e84                 | LR__0670
06e84     48 81 02 F6 | 	mov	_var03, arg03
06e88     02 80 4E F0 | 	shr	_var03, #2 wz
06e8c     18 00 90 AD |  if_e	jmp	#LR__0675
06e90     D7 0A 48 FB | 	callpa	#(@LR__0673-@LR__0671)>>2,fcache_load_ptr_
06e94                 | LR__0671
06e94     40 09 D8 FC | 	rep	@LR__0674, _var03
06e98                 | LR__0672
06e98     47 81 02 FB | 	rdlong	_var03, arg02
06e9c     46 81 62 FC | 	wrlong	_var03, arg01
06ea0     04 8C 06 F1 | 	add	arg01, #4
06ea4     04 8E 06 F1 | 	add	arg02, #4
06ea8                 | LR__0673
06ea8                 | LR__0674
06ea8                 | LR__0675
06ea8     02 90 CE F7 | 	test	arg03, #2 wz
06eac     47 7F E2 5A |  if_ne	rdword	_var02, arg02
06eb0     46 7F 52 5C |  if_ne	wrword	_var02, arg01
06eb4     02 8C 06 51 |  if_ne	add	arg01, #2
06eb8     02 8E 06 51 |  if_ne	add	arg02, #2
06ebc     01 90 CE F7 | 	test	arg03, #1 wz
06ec0     47 7F C2 5A |  if_ne	rdbyte	_var02, arg02
06ec4     46 7F 42 5C |  if_ne	wrbyte	_var02, arg01
06ec8     28 00 90 FD | 	jmp	#LR__0682
06ecc                 | LR__0676
06ecc     48 8D 02 F1 | 	add	arg01, arg03
06ed0     48 8F 02 F1 | 	add	arg02, arg03
06ed4     48 83 0A F6 | 	mov	_var04, arg03 wz
06ed8     18 00 90 AD |  if_e	jmp	#LR__0681
06edc     D7 0A 48 FB | 	callpa	#(@LR__0679-@LR__0677)>>2,fcache_load_ptr_
06ee0                 | LR__0677
06ee0     41 09 D8 FC | 	rep	@LR__0680, _var04
06ee4                 | LR__0678
06ee4     01 8C 86 F1 | 	sub	arg01, #1
06ee8     01 8E 86 F1 | 	sub	arg02, #1
06eec     47 7F C2 FA | 	rdbyte	_var02, arg02
06ef0     46 7F 42 FC | 	wrbyte	_var02, arg01
06ef4                 | LR__0679
06ef4                 | LR__0680
06ef4                 | LR__0681
06ef4                 | LR__0682
06ef4     3E 77 02 F6 | 	mov	result1, _var01
06ef8                 | __system____builtin_memmove_ret
06ef8     2D 00 64 FD | 	ret
06efc                 | 
06efc                 | __system____topofstack
06efc     00 CA 05 F6 | 	mov	COUNT_, #0
06f00     E8 00 A0 FD | 	call	#pushregs_
06f04     08 F0 07 F1 | 	add	ptra, #8
06f08     04 CE 05 F1 | 	add	fp, #4
06f0c     E7 8C 62 FC | 	wrlong	arg01, fp
06f10     E7 76 02 F6 | 	mov	result1, fp
06f14     04 CE 85 F1 | 	sub	fp, #4
06f18     E7 F0 03 F6 | 	mov	ptra, fp
06f1c     F2 00 A0 FD | 	call	#popregs_
06f20                 | __system____topofstack_ret
06f20     2D 00 64 FD | 	ret
06f24                 | 
06f24                 | __system___lockmem
06f24     00 76 06 F6 | 	mov	result1, #0
06f28     01 76 62 FD | 	cogid	result1
06f2c     00 77 06 F1 | 	add	result1, #256
06f30                 | LR__0690
06f30     46 7D 0A FB | 	rdlong	_var01, arg01 wz
06f34     46 77 62 AC |  if_e	wrlong	result1, arg01
06f38     46 7D 02 AB |  if_e	rdlong	_var01, arg01
06f3c     46 7D 02 AB |  if_e	rdlong	_var01, arg01
06f40     3B 7D 0A F2 | 	cmp	_var01, result1 wz
06f44     E8 FF 9F 5D |  if_ne	jmp	#LR__0690
06f48                 | __system___lockmem_ret
06f48     2D 00 64 FD | 	ret
06f4c                 | 
06f4c                 | __system___funcptr_cmp
06f4c     46 77 02 FB | 	rdlong	result1, arg01
06f50     47 7D 02 FB | 	rdlong	_var01, arg02
06f54     3E 77 8A F1 | 	sub	result1, _var01 wz
06f58     04 8C 06 A1 |  if_e	add	arg01, #4
06f5c     46 77 02 AB |  if_e	rdlong	result1, arg01
06f60     04 8E 06 A1 |  if_e	add	arg02, #4
06f64     47 7D 02 AB |  if_e	rdlong	_var01, arg02
06f68     3E 77 82 A1 |  if_e	sub	result1, _var01
06f6c                 | __system___funcptr_cmp_ret
06f6c     2D 00 64 FD | 	ret
06f70                 | 
06f70                 | __system___tx
06f70     02 CA 05 F6 | 	mov	COUNT_, #2
06f74     E8 00 A0 FD | 	call	#pushregs_
06f78     46 97 02 F6 | 	mov	local01, arg01
06f7c     0A 96 0E F2 | 	cmp	local01, #10 wz
06f80     18 00 90 5D |  if_ne	jmp	#LR__0700
06f84     08 68 06 F1 | 	add	ptr___system__dat__, #8
06f88     34 99 02 FB | 	rdlong	local02, ptr___system__dat__
06f8c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
06f90     02 98 CE F7 | 	test	local02, #2 wz
06f94     0D 8C 06 56 |  if_ne	mov	arg01, #13
06f98     8C FD BF 5D |  if_ne	call	#__system___txraw
06f9c                 | LR__0700
06f9c     4B 8D 02 F6 | 	mov	arg01, local01
06fa0     84 FD BF FD | 	call	#__system___txraw
06fa4     E7 F0 03 F6 | 	mov	ptra, fp
06fa8     F2 00 A0 FD | 	call	#popregs_
06fac                 | __system___tx_ret
06fac     2D 00 64 FD | 	ret
06fb0                 | 
06fb0                 | __system___rx
06fb0     01 CA 05 F6 | 	mov	COUNT_, #1
06fb4     E8 00 A0 FD | 	call	#pushregs_
06fb8                 | LR__0710
06fb8     00 8C 06 F6 | 	mov	arg01, #0
06fbc     AC FD BF FD | 	call	#__system___rxraw
06fc0     3B 97 02 F6 | 	mov	local01, result1
06fc4     FF FF 7F FF 
06fc8     FF 97 0E F2 | 	cmp	local01, ##-1 wz
06fcc     E8 FF 9F AD |  if_e	jmp	#LR__0710
06fd0     0D 96 0E F2 | 	cmp	local01, #13 wz
06fd4     14 00 90 5D |  if_ne	jmp	#LR__0711
06fd8     08 68 06 F1 | 	add	ptr___system__dat__, #8
06fdc     34 77 02 FB | 	rdlong	result1, ptr___system__dat__
06fe0     08 68 86 F1 | 	sub	ptr___system__dat__, #8
06fe4     02 76 CE F7 | 	test	result1, #2 wz
06fe8     0A 96 06 56 |  if_ne	mov	local01, #10
06fec                 | LR__0711
06fec     08 68 06 F1 | 	add	ptr___system__dat__, #8
06ff0     34 8D 02 FB | 	rdlong	arg01, ptr___system__dat__
06ff4     08 68 86 F1 | 	sub	ptr___system__dat__, #8
06ff8     01 8C CE F7 | 	test	arg01, #1 wz
06ffc     1C 00 90 AD |  if_e	jmp	#LR__0714
07000     7F 96 0E F2 | 	cmp	local01, #127 wz
07004     0C 00 90 5D |  if_ne	jmp	#LR__0712
07008     08 8C 06 F6 | 	mov	arg01, #8
0700c     60 FF BF FD | 	call	#__system___tx
07010     08 00 90 FD | 	jmp	#LR__0713
07014                 | LR__0712
07014     4B 8D 02 F6 | 	mov	arg01, local01
07018     54 FF BF FD | 	call	#__system___tx
0701c                 | LR__0713
0701c                 | LR__0714
0701c     4B 77 02 F6 | 	mov	result1, local01
07020     E7 F0 03 F6 | 	mov	ptra, fp
07024     F2 00 A0 FD | 	call	#popregs_
07028                 | __system___rx_ret
07028     2D 00 64 FD | 	ret
0702c                 | 
0702c                 | __system___waitms
0702c     46 7D 02 F6 | 	mov	_var01, arg01
07030     1A 7E 62 FD | 	getct	_var02
07034     14 80 06 FB | 	rdlong	_var03, #20
07038     D7 14 48 FB | 	callpa	#(@LR__0721-@LR__0720)>>2,fcache_load_ptr_
0703c                 | LR__0720
0703c     01 00 00 FF 
07040     E8 7D 56 F2 | 	cmps	_var01, ##1000 wc
07044     1C 00 90 CD |  if_b	jmp	#LR__0722
07048     40 7F 02 F1 | 	add	_var02, _var03
0704c     3F 8D 02 F6 | 	mov	arg01, _var02
07050     00 8C 66 FA | 	addct1	arg01, #0
07054     24 22 60 FD | 	waitct1
07058     01 00 00 FF 
0705c     E8 7D 86 F1 | 	sub	_var01, ##1000
07060     D8 FF 9F FD | 	jmp	#LR__0720
07064                 | LR__0721
07064                 | LR__0722
07064     01 7C 56 F2 | 	cmps	_var01, #1 wc
07068     28 00 90 CD |  if_b	jmp	#LR__0723
0706c     40 7D 02 FD | 	qmul	_var01, _var03
07070     01 00 00 FF 
07074     E8 91 06 F6 | 	mov	arg03, ##1000
07078     19 76 62 FD | 	getqy	result1
0707c     18 8C 62 FD | 	getqx	arg01
07080     28 76 62 FD | 	setq	result1
07084     48 8D 12 FD | 	qdiv	arg01, arg03
07088     18 8C 62 FD | 	getqx	arg01
0708c     3F 8D 62 FA | 	addct1	arg01, _var02
07090     24 22 60 FD | 	waitct1
07094                 | LR__0723
07094                 | __system___waitms_ret
07094     2D 00 64 FD | 	ret
07098                 | 
07098                 | __system___waitus
07098     46 7D 02 F6 | 	mov	_var01, arg01
0709c     1A 7E 62 FD | 	getct	_var02
070a0     14 80 06 FB | 	rdlong	_var03, #20
070a4     D7 14 48 FB | 	callpa	#(@LR__0731-@LR__0730)>>2,fcache_load_ptr_
070a8                 | LR__0730
070a8     A1 07 00 FF 
070ac     40 7C 56 F2 | 	cmps	_var01, ##1000000 wc
070b0     1C 00 90 CD |  if_b	jmp	#LR__0732
070b4     40 7F 02 F1 | 	add	_var02, _var03
070b8     3F 8D 02 F6 | 	mov	arg01, _var02
070bc     00 8C 66 FA | 	addct1	arg01, #0
070c0     24 22 60 FD | 	waitct1
070c4     A1 07 00 FF 
070c8     40 7C 86 F1 | 	sub	_var01, ##1000000
070cc     D8 FF 9F FD | 	jmp	#LR__0730
070d0                 | LR__0731
070d0                 | LR__0732
070d0     01 7C 56 F2 | 	cmps	_var01, #1 wc
070d4     28 00 90 CD |  if_b	jmp	#LR__0733
070d8     40 7D 02 FD | 	qmul	_var01, _var03
070dc     A1 07 00 FF 
070e0     40 90 06 F6 | 	mov	arg03, ##1000000
070e4     19 76 62 FD | 	getqy	result1
070e8     18 8C 62 FD | 	getqx	arg01
070ec     28 76 62 FD | 	setq	result1
070f0     48 8D 12 FD | 	qdiv	arg01, arg03
070f4     18 76 62 FD | 	getqx	result1
070f8     3B 7F 62 FA | 	addct1	_var02, result1
070fc     24 22 60 FD | 	waitct1
07100                 | LR__0733
07100                 | __system___waitus_ret
07100     2D 00 64 FD | 	ret
07104                 | 
07104                 | __system___basic_open
07104     05 CA 05 F6 | 	mov	COUNT_, #5
07108     E8 00 A0 FD | 	call	#pushregs_
0710c     47 97 02 F6 | 	mov	local01, arg02
07110     48 99 02 F6 | 	mov	local02, arg03
07114     49 9B 02 F6 | 	mov	local03, arg04
07118     00 9C 06 F6 | 	mov	local04, #0
0711c     D8 0F B0 FD | 	call	#__system____getftab
07120     3B 9F 0A F6 | 	mov	local05, result1 wz
07124     18 00 90 5D |  if_ne	jmp	#LR__0740
07128     30 8D 02 F6 | 	mov	arg01, abortchain
0712c     0C 8E 06 F6 | 	mov	arg02, #12
07130     01 90 06 F6 | 	mov	arg03, #1
07134     1A 01 A0 FD | 	call	#__longjmp
07138     01 76 66 F6 | 	neg	result1, #1
0713c     10 01 90 FD | 	jmp	#LR__0749
07140                 | LR__0740
07140     08 9E 06 F1 | 	add	local05, #8
07144     4F 77 0A FB | 	rdlong	result1, local05 wz
07148     08 9E 86 F1 | 	sub	local05, #8
0714c     4F 8D 02 56 |  if_ne	mov	arg01, local05
07150     08 0C B0 5D |  if_ne	call	#__system___closeraw
07154     00 96 0E F2 | 	cmp	local01, #0 wz
07158     00 98 0E A2 |  if_e	cmp	local02, #0 wz
0715c     00 9A 0E A2 |  if_e	cmp	local03, #0 wz
07160     3C 00 90 AD |  if_e	jmp	#LR__0742
07164     0C 8C 06 F6 | 	mov	arg01, #12
07168     2C 06 B0 FD | 	call	#__system___gc_alloc_managed
0716c     3B 9D 0A F6 | 	mov	local04, result1 wz
07170     18 00 90 5D |  if_ne	jmp	#LR__0741
07174     30 8D 02 F6 | 	mov	arg01, abortchain
07178     07 8E 06 F6 | 	mov	arg02, #7
0717c     01 90 06 F6 | 	mov	arg03, #1
07180     1A 01 A0 FD | 	call	#__longjmp
07184     01 76 66 F6 | 	neg	result1, #1
07188     C4 00 90 FD | 	jmp	#LR__0749
0718c                 | LR__0741
0718c     4E 01 68 FC | 	wrlong	#0, local04
07190     04 9C 06 F1 | 	add	local04, #4
07194     4E 01 68 FC | 	wrlong	#0, local04
07198     04 9C 86 F1 | 	sub	local04, #4
0719c     4F 9D 62 FC | 	wrlong	local04, local05
071a0                 | LR__0742
071a0     00 96 0E F2 | 	cmp	local01, #0 wz
071a4     1C 00 90 AD |  if_e	jmp	#LR__0743
071a8     4E 97 62 FC | 	wrlong	local01, local04
071ac     4E 77 02 F6 | 	mov	result1, local04
071b0     16 76 26 F4 | 	bith	result1, #22
071b4     1C 9E 06 F1 | 	add	local05, #28
071b8     4F 77 62 FC | 	wrlong	result1, local05
071bc     1C 9E 86 F1 | 	sub	local05, #28
071c0     0C 00 90 FD | 	jmp	#LR__0744
071c4                 | LR__0743
071c4     1C 9E 06 F1 | 	add	local05, #28
071c8     4F 01 68 FC | 	wrlong	#0, local05
071cc     1C 9E 86 F1 | 	sub	local05, #28
071d0                 | LR__0744
071d0     00 98 0E F2 | 	cmp	local02, #0 wz
071d4     28 00 90 AD |  if_e	jmp	#LR__0745
071d8     04 9C 06 F1 | 	add	local04, #4
071dc     4E 99 62 FC | 	wrlong	local02, local04
071e0     04 9C 86 F1 | 	sub	local04, #4
071e4     4E 77 02 F6 | 	mov	result1, local04
071e8     00 28 00 FF 
071ec     00 76 46 F5 | 	or	result1, ##5242880
071f0     20 9E 06 F1 | 	add	local05, #32
071f4     4F 77 62 FC | 	wrlong	result1, local05
071f8     20 9E 86 F1 | 	sub	local05, #32
071fc     0C 00 90 FD | 	jmp	#LR__0746
07200                 | LR__0745
07200     20 9E 06 F1 | 	add	local05, #32
07204     4F 01 68 FC | 	wrlong	#0, local05
07208     20 9E 86 F1 | 	sub	local05, #32
0720c                 | LR__0746
0720c     00 9A 0E F2 | 	cmp	local03, #0 wz
07210     20 00 90 AD |  if_e	jmp	#LR__0747
07214     08 9C 06 F1 | 	add	local04, #8
07218     4E 9B 62 FC | 	wrlong	local03, local04
0721c     08 9C 86 F1 | 	sub	local04, #8
07220     35 9C 26 F4 | 	bith	local04, #53
07224     24 9E 06 F1 | 	add	local05, #36
07228     4F 9D 62 FC | 	wrlong	local04, local05
0722c     24 9E 86 F1 | 	sub	local05, #36
07230     0C 00 90 FD | 	jmp	#LR__0748
07234                 | LR__0747
07234     24 9E 06 F1 | 	add	local05, #36
07238     4F 01 68 FC | 	wrlong	#0, local05
0723c     24 9E 86 F1 | 	sub	local05, #36
07240                 | LR__0748
07240     08 9E 06 F1 | 	add	local05, #8
07244     40 00 80 FF 
07248     4F 07 68 FC | 	wrlong	##32771, local05
0724c     00 76 06 F6 | 	mov	result1, #0
07250                 | LR__0749
07250     E7 F0 03 F6 | 	mov	ptra, fp
07254     F2 00 A0 FD | 	call	#popregs_
07258                 | __system___basic_open_ret
07258     2D 00 64 FD | 	ret
0725c                 | 
0725c                 | __system___basic_print_char
0725c     03 CA 05 F6 | 	mov	COUNT_, #3
07260     E8 00 A0 FD | 	call	#pushregs_
07264     47 97 02 F6 | 	mov	local01, arg02
07268     78 10 B0 FD | 	call	#__system___gettxfunc
0726c     3B 99 0A F6 | 	mov	local02, result1 wz
07270     00 76 06 A6 |  if_e	mov	result1, #0
07274     30 00 90 AD |  if_e	jmp	#LR__0750
07278     4C 9B 02 F6 | 	mov	local03, local02
0727c     13 98 46 F7 | 	zerox	local02, #19
07280     14 9A 46 F0 | 	shr	local03, #20
07284     02 9A 66 F0 | 	shl	local03, #2
07288     2D 9B 02 F1 | 	add	local03, __methods__
0728c     4D 9B 02 FB | 	rdlong	local03, local03
07290     4B 8D 02 F6 | 	mov	arg01, local01
07294     33 97 02 F6 | 	mov	local01, objptr
07298     4C 67 02 F6 | 	mov	objptr, local02
0729c     2D 9A 62 FD | 	call	local03
072a0     4B 67 02 F6 | 	mov	objptr, local01
072a4     01 76 06 F6 | 	mov	result1, #1
072a8                 | LR__0750
072a8     E7 F0 03 F6 | 	mov	ptra, fp
072ac     F2 00 A0 FD | 	call	#popregs_
072b0                 | __system___basic_print_char_ret
072b0     2D 00 64 FD | 	ret
072b4                 | 
072b4                 | __system___basic_print_integer
072b4     04 CA 05 F6 | 	mov	COUNT_, #4
072b8     E8 00 A0 FD | 	call	#pushregs_
072bc     47 97 02 F6 | 	mov	local01, arg02
072c0     48 99 02 F6 | 	mov	local02, arg03
072c4     49 9B 02 F6 | 	mov	local03, arg04
072c8     18 10 B0 FD | 	call	#__system___gettxfunc
072cc     3B 9D 0A F6 | 	mov	local04, result1 wz
072d0     00 76 06 A6 |  if_e	mov	result1, #0
072d4     4E 8D 02 56 |  if_ne	mov	arg01, local04
072d8     4C 8F 02 56 |  if_ne	mov	arg02, local02
072dc     4B 91 02 56 |  if_ne	mov	arg03, local01
072e0     4D 93 02 56 |  if_ne	mov	arg04, local03
072e4     2C 01 B0 5D |  if_ne	call	#__system___fmtnum
072e8     E7 F0 03 F6 | 	mov	ptra, fp
072ec     F2 00 A0 FD | 	call	#popregs_
072f0                 | __system___basic_print_integer_ret
072f0     2D 00 64 FD | 	ret
072f4                 | 
072f4                 | __system___fmtchar
072f4     00 CA 05 F6 | 	mov	COUNT_, #0
072f8     E8 00 A0 FD | 	call	#pushregs_
072fc     10 F0 07 F1 | 	add	ptra, #16
07300     0C CE 05 F1 | 	add	fp, #12
07304     E7 90 62 FC | 	wrlong	arg03, fp
07308     48 91 E2 F8 | 	getbyte	arg03, arg03, #0
0730c     E7 90 62 FC | 	wrlong	arg03, fp
07310     E7 90 02 F6 | 	mov	arg03, fp
07314     0C CE 85 F1 | 	sub	fp, #12
07318     0C 00 B0 FD | 	call	#__system___fmtstr
0731c     E7 F0 03 F6 | 	mov	ptra, fp
07320     F2 00 A0 FD | 	call	#popregs_
07324                 | __system___fmtchar_ret
07324     2D 00 64 FD | 	ret
07328                 | 
07328                 | __system___fmtstr
07328     09 CA 05 F6 | 	mov	COUNT_, #9
0732c     E8 00 A0 FD | 	call	#pushregs_
07330     46 97 02 F6 | 	mov	local01, arg01
07334     47 99 02 F6 | 	mov	local02, arg02
07338     48 9B 02 F6 | 	mov	local03, arg03
0733c     4C 93 E2 F8 | 	getbyte	arg04, local02, #0
07340     4D 8D 02 F6 | 	mov	arg01, local03
07344     46 9D 02 F6 | 	mov	local04, arg01
07348     D7 06 48 FB | 	callpa	#(@LR__0761-@LR__0760)>>2,fcache_load_ptr_
0734c                 | LR__0760
0734c     4E 77 CA FA | 	rdbyte	result1, local04 wz
07350     01 9C 06 51 |  if_ne	add	local04, #1
07354     F4 FF 9F 5D |  if_ne	jmp	#LR__0760
07358                 | LR__0761
07358     46 9D 82 F1 | 	sub	local04, arg01
0735c     00 92 0E F2 | 	cmp	arg04, #0 wz
07360     49 9D 7A 53 |  if_ne	fles	local04, arg04 wcz
07364     4C 8F 02 F6 | 	mov	arg02, local02
07368     4E 91 02 F6 | 	mov	arg03, local04
0736c     4B 8D 02 F6 | 	mov	arg01, local01
07370     02 92 06 F6 | 	mov	arg04, #2
07374     EC 0D B0 FD | 	call	#__system___fmtpad
07378     3B 9F 02 F6 | 	mov	local05, result1
0737c     00 9E 56 F2 | 	cmps	local05, #0 wc
07380     4F 77 02 C6 |  if_b	mov	result1, local05
07384     80 00 90 CD |  if_b	jmp	#LR__0764
07388     01 9C 56 F2 | 	cmps	local04, #1 wc
0738c     50 00 90 CD |  if_b	jmp	#LR__0763
07390     4E A1 02 F6 | 	mov	local06, local04
07394                 | LR__0762
07394     4B A3 02 F6 | 	mov	local07, local01
07398     4B A5 02 F6 | 	mov	local08, local01
0739c     13 A2 46 F7 | 	zerox	local07, #19
073a0     14 A4 46 F0 | 	shr	local08, #20
073a4     02 A4 66 F0 | 	shl	local08, #2
073a8     2D A5 02 F1 | 	add	local08, __methods__
073ac     52 A5 02 FB | 	rdlong	local08, local08
073b0     4D 8D C2 FA | 	rdbyte	arg01, local03
073b4     33 A7 02 F6 | 	mov	local09, objptr
073b8     51 67 02 F6 | 	mov	objptr, local07
073bc     01 9A 06 F1 | 	add	local03, #1
073c0     2D A4 62 FD | 	call	local08
073c4     53 67 02 F6 | 	mov	objptr, local09
073c8     3B A7 02 F6 | 	mov	local09, result1
073cc     00 A6 56 F2 | 	cmps	local09, #0 wc
073d0     53 77 02 C6 |  if_b	mov	result1, local09
073d4     30 00 90 CD |  if_b	jmp	#LR__0764
073d8     53 9F 02 F1 | 	add	local05, local09
073dc     ED A1 6E FB | 	djnz	local06, #LR__0762
073e0                 | LR__0763
073e0     4C 8F 02 F6 | 	mov	arg02, local02
073e4     4E 91 02 F6 | 	mov	arg03, local04
073e8     4B 8D 02 F6 | 	mov	arg01, local01
073ec     01 92 06 F6 | 	mov	arg04, #1
073f0     70 0D B0 FD | 	call	#__system___fmtpad
073f4     3B A7 02 F6 | 	mov	local09, result1
073f8     00 A6 56 F2 | 	cmps	local09, #0 wc
073fc     53 77 02 C6 |  if_b	mov	result1, local09
07400     53 9F 02 31 |  if_ae	add	local05, local09
07404     4F 77 02 36 |  if_ae	mov	result1, local05
07408                 | LR__0764
07408     E7 F0 03 F6 | 	mov	ptra, fp
0740c     F2 00 A0 FD | 	call	#popregs_
07410                 | __system___fmtstr_ret
07410     2D 00 64 FD | 	ret
07414                 | 
07414                 | __system___fmtnum
07414     0B CA 05 F6 | 	mov	COUNT_, #11
07418     E8 00 A0 FD | 	call	#pushregs_
0741c     46 97 02 F6 | 	mov	local01, arg01
07420     47 99 02 F6 | 	mov	local02, arg02
07424     48 9B 02 F6 | 	mov	local03, arg03
07428     49 9D 02 F6 | 	mov	local04, arg04
0742c     F8 9F 02 F6 | 	mov	local05, ptra
07430     4F A1 02 F6 | 	mov	local06, local05
07434     00 A2 06 F6 | 	mov	local07, #0
07438     4C A5 02 F6 | 	mov	local08, local02
0743c     10 A4 46 F0 | 	shr	local08, #16
07440     3F A4 06 F5 | 	and	local08, #63
07444     4C A7 E2 F8 | 	getbyte	local09, local02, #0
07448     4C A9 02 F6 | 	mov	local10, local02
0744c     1A A8 46 F0 | 	shr	local10, #26
07450     03 A8 06 F5 | 	and	local10, #3
07454     54 AB 02 F6 | 	mov	local11, local10
07458     01 A4 56 F2 | 	cmps	local08, #1 wc
0745c     44 F0 07 F1 | 	add	ptra, #68
07460     01 A4 86 31 |  if_ae	sub	local08, #1
07464     41 A6 56 F2 | 	cmps	local09, #65 wc
07468     00 A6 0E C2 |  if_b	cmp	local09, #0 wz
0746c     40 A6 06 B6 |  if_nc_or_z	mov	local09, #64
07470     03 AA 0E F2 | 	cmp	local11, #3 wz
07474     00 AA 06 A6 |  if_e	mov	local11, #0
07478     00 9A 56 52 |  if_ne	cmps	local03, #0 wc
0747c     04 AA 06 46 |  if_c_and_nz	mov	local11, #4
07480     4D 9B 62 46 |  if_c_and_nz	neg	local03, local03
07484     00 AA 0E F2 | 	cmp	local11, #0 wz
07488     4C 00 90 AD |  if_e	jmp	#LR__0773
0748c     01 A2 06 F6 | 	mov	local07, #1
07490     53 A5 0A F2 | 	cmp	local08, local09 wz
07494     18 00 90 5D |  if_ne	jmp	#LR__0771
07498     05 A4 6E FB | 	djnz	local08, #LR__0770
0749c     4B 8D 02 F6 | 	mov	arg01, local01
074a0     4C 8F 02 F6 | 	mov	arg02, local02
074a4     23 90 06 F6 | 	mov	arg03, #35
074a8     48 FE BF FD | 	call	#__system___fmtchar
074ac     8C 00 90 FD | 	jmp	#LR__0777
074b0                 | LR__0770
074b0                 | LR__0771
074b0     02 AA 0E F2 | 	cmp	local11, #2 wz
074b4     50 A9 02 A6 |  if_e	mov	local10, local06
074b8     01 A0 06 A1 |  if_e	add	local06, #1
074bc     54 41 48 AC |  if_e	wrbyte	#32, local10
074c0     14 00 90 AD |  if_e	jmp	#LR__0772
074c4     04 AA 0E F2 | 	cmp	local11, #4 wz
074c8     50 5B 48 AC |  if_e	wrbyte	#45, local06
074cc     01 A0 06 A1 |  if_e	add	local06, #1
074d0     50 57 48 5C |  if_ne	wrbyte	#43, local06
074d4     01 A0 06 51 |  if_ne	add	local06, #1
074d8                 | LR__0772
074d8                 | LR__0773
074d8     51 A9 02 F6 | 	mov	local10, local07
074dc     50 8D 02 F6 | 	mov	arg01, local06
074e0     4D 8F 02 F6 | 	mov	arg02, local03
074e4     4E 91 02 F6 | 	mov	arg03, local04
074e8     52 93 02 F6 | 	mov	arg04, local08
074ec     00 94 06 F6 | 	mov	arg05, #0
074f0     1D 98 2E F4 | 	testbn	local02, #29 wz
074f4     01 94 06 56 |  if_ne	mov	arg05, #1
074f8     30 0D B0 FD | 	call	#__system___uitoa
074fc     3B A9 02 F1 | 	add	local10, result1
07500     53 A9 5A F2 | 	cmps	local10, local09 wcz
07504     24 00 90 ED |  if_be	jmp	#LR__0776
07508     D7 0E 48 FB | 	callpa	#(@LR__0775-@LR__0774)>>2,fcache_load_ptr_
0750c                 | LR__0774
0750c     53 A9 02 F6 | 	mov	local10, local09
07510     01 A8 56 F2 | 	cmps	local10, #1 wc
07514     01 A6 86 F1 | 	sub	local09, #1
07518     50 A9 02 36 |  if_ae	mov	local10, local06
0751c     01 A0 06 31 |  if_ae	add	local06, #1
07520     54 47 48 3C |  if_ae	wrbyte	#35, local10
07524     E4 FF 9F 3D |  if_ae	jmp	#LR__0774
07528                 | LR__0775
07528     50 01 48 FC | 	wrbyte	#0, local06
0752c                 | LR__0776
0752c     4B 8D 02 F6 | 	mov	arg01, local01
07530     4C 8F 02 F6 | 	mov	arg02, local02
07534     4F 91 02 F6 | 	mov	arg03, local05
07538     EC FD BF FD | 	call	#__system___fmtstr
0753c                 | LR__0777
0753c     E7 F0 03 F6 | 	mov	ptra, fp
07540     F2 00 A0 FD | 	call	#popregs_
07544                 | __system___fmtnum_ret
07544     2D 00 64 FD | 	ret
07548                 | 
07548                 | __system___gc_ptrs
07548     2C 7D 02 F6 | 	mov	_var01, __heap_ptr
0754c     3E 7F 02 F6 | 	mov	_var02, _var01
07550     0B 00 00 FF 
07554     68 7F 06 F1 | 	add	_var02, ##5992
07558     3E 79 0A FB | 	rdlong	result2, _var01 wz
0755c     74 00 90 5D |  if_ne	jmp	#LR__0780
07560     3F 79 02 F6 | 	mov	result2, _var02
07564     3E 79 82 F1 | 	sub	result2, _var01
07568     3E 03 58 FC | 	wrword	#1, _var01
0756c     3E 77 02 F6 | 	mov	result1, _var01
07570     02 76 06 F1 | 	add	result1, #2
07574     36 00 80 FF 
07578     3B 21 59 FC | 	wrword	##27792, result1
0757c     3E 77 02 F6 | 	mov	result1, _var01
07580     04 76 06 F1 | 	add	result1, #4
07584     3B 01 58 FC | 	wrword	#0, result1
07588     3E 77 02 F6 | 	mov	result1, _var01
0758c     06 76 06 F1 | 	add	result1, #6
07590     3B 03 58 FC | 	wrword	#1, result1
07594     10 7C 06 F1 | 	add	_var01, #16
07598     3C 79 52 F6 | 	abs	result2, result2 wc
0759c     04 78 46 F0 | 	shr	result2, #4
075a0     3C 79 82 F6 | 	negc	result2, result2
075a4     3E 79 52 FC | 	wrword	result2, _var01
075a8     3E 79 02 F6 | 	mov	result2, _var01
075ac     02 78 06 F1 | 	add	result2, #2
075b0     36 00 80 FF 
075b4     3C 1F 59 FC | 	wrword	##27791, result2
075b8     3E 79 02 F6 | 	mov	result2, _var01
075bc     04 78 06 F1 | 	add	result2, #4
075c0     3C 01 58 FC | 	wrword	#0, result2
075c4     3E 79 02 F6 | 	mov	result2, _var01
075c8     06 78 06 F1 | 	add	result2, #6
075cc     3C 01 58 FC | 	wrword	#0, result2
075d0     10 7C 86 F1 | 	sub	_var01, #16
075d4                 | LR__0780
075d4     3E 77 02 F6 | 	mov	result1, _var01
075d8     3F 79 02 F6 | 	mov	result2, _var02
075dc                 | __system___gc_ptrs_ret
075dc     2D 00 64 FD | 	ret
075e0                 | 
075e0                 | __system___gc_tryalloc
075e0     0B CA 05 F6 | 	mov	COUNT_, #11
075e4     E8 00 A0 FD | 	call	#pushregs_
075e8     46 97 02 F6 | 	mov	local01, arg01
075ec     47 99 02 F6 | 	mov	local02, arg02
075f0     54 FF BF FD | 	call	#__system___gc_ptrs
075f4     3B 9B 02 F6 | 	mov	local03, result1
075f8     3C 9D 02 F6 | 	mov	local04, result2
075fc     4D 9F 02 F6 | 	mov	local05, local03
07600     00 A0 06 F6 | 	mov	local06, #0
07604     D7 1E 48 FB | 	callpa	#(@LR__0791-@LR__0790)>>2,fcache_load_ptr_
07608                 | LR__0790
07608     4F A3 02 F6 | 	mov	local07, local05
0760c     06 9E 06 F1 | 	add	local05, #6
07610     4F 8F EA FA | 	rdword	arg02, local05 wz
07614     4D 8D 02 F6 | 	mov	arg01, local03
07618     00 76 06 A6 |  if_e	mov	result1, #0
0761c     04 8E 66 50 |  if_ne	shl	arg02, #4
07620     47 8D 02 51 |  if_ne	add	arg01, arg02
07624     46 77 02 56 |  if_ne	mov	result1, arg01
07628     3B 9F 0A F6 | 	mov	local05, result1 wz
0762c     4F A1 E2 5A |  if_ne	rdword	local06, local05
07630     00 9E 0E F2 | 	cmp	local05, #0 wz
07634     4E 9F 52 52 |  if_ne	cmps	local05, local04 wc
07638     08 00 90 1D |  if_a	jmp	#LR__0792
0763c     50 97 5A 52 |  if_ne	cmps	local01, local06 wcz
07640     C4 FF 9F 1D |  if_a	jmp	#LR__0790
07644                 | LR__0791
07644                 | LR__0792
07644     00 9E 0E F2 | 	cmp	local05, #0 wz
07648     4F 77 02 A6 |  if_e	mov	result1, local05
0764c     3C 01 90 AD |  if_e	jmp	#LR__0795
07650     4F 79 02 F6 | 	mov	result2, local05
07654     06 78 06 F1 | 	add	result2, #6
07658     3C A5 E2 FA | 	rdword	local08, result2
0765c     50 97 52 F2 | 	cmps	local01, local06 wc
07660     C0 00 90 3D |  if_ae	jmp	#LR__0794
07664     4F 97 52 FC | 	wrword	local01, local05
07668     4F 8D 02 F6 | 	mov	arg01, local05
0766c     4B A5 02 F6 | 	mov	local08, local01
07670     04 A4 66 F0 | 	shl	local08, #4
07674     52 8D 02 F1 | 	add	arg01, local08
07678     4B A1 82 F1 | 	sub	local06, local01
0767c     46 A1 52 FC | 	wrword	local06, arg01
07680     46 A5 02 F6 | 	mov	local08, arg01
07684     02 A4 06 F1 | 	add	local08, #2
07688     36 00 80 FF 
0768c     52 1F 59 FC | 	wrword	##27791, local08
07690     4F 8F 0A F6 | 	mov	arg02, local05 wz
07694     00 76 06 A6 |  if_e	mov	result1, #0
07698     4D 8F 82 51 |  if_ne	sub	arg02, local03
0769c     04 8E 46 50 |  if_ne	shr	arg02, #4
076a0     47 77 02 56 |  if_ne	mov	result1, arg02
076a4     46 A5 02 F6 | 	mov	local08, arg01
076a8     04 A4 06 F1 | 	add	local08, #4
076ac     52 77 52 FC | 	wrword	result1, local08
076b0     4F A5 02 F6 | 	mov	local08, local05
076b4     06 A4 06 F1 | 	add	local08, #6
076b8     46 8F 02 F6 | 	mov	arg02, arg01
076bc     52 A5 E2 FA | 	rdword	local08, local08
076c0     06 8E 06 F1 | 	add	arg02, #6
076c4     47 A5 52 FC | 	wrword	local08, arg02
076c8     46 A7 02 F6 | 	mov	local09, arg01
076cc     53 8F 0A F6 | 	mov	arg02, local09 wz
076d0     00 76 06 A6 |  if_e	mov	result1, #0
076d4     4D 8F 82 51 |  if_ne	sub	arg02, local03
076d8     04 8E 46 50 |  if_ne	shr	arg02, #4
076dc     47 77 02 56 |  if_ne	mov	result1, arg02
076e0     3B A5 02 F6 | 	mov	local08, result1
076e4     46 A9 EA FA | 	rdword	local10, arg01 wz
076e8     00 76 06 A6 |  if_e	mov	result1, #0
076ec     04 A8 66 50 |  if_ne	shl	local10, #4
076f0     54 8D 02 51 |  if_ne	add	arg01, local10
076f4     46 77 02 56 |  if_ne	mov	result1, arg01
076f8     3B AB 0A F6 | 	mov	local11, result1 wz
076fc     24 00 90 AD |  if_e	jmp	#LR__0793
07700     4E AB 52 F2 | 	cmps	local11, local04 wc
07704     1C 00 90 3D |  if_ae	jmp	#LR__0793
07708     53 8F 0A F6 | 	mov	arg02, local09 wz
0770c     00 76 06 A6 |  if_e	mov	result1, #0
07710     4D 8F 82 51 |  if_ne	sub	arg02, local03
07714     04 8E 46 50 |  if_ne	shr	arg02, #4
07718     47 77 02 56 |  if_ne	mov	result1, arg02
0771c     04 AA 06 F1 | 	add	local11, #4
07720     55 77 52 FC | 	wrword	result1, local11
07724                 | LR__0793
07724                 | LR__0794
07724     06 A2 06 F1 | 	add	local07, #6
07728     51 A5 52 FC | 	wrword	local08, local07
0772c     36 00 00 FF 
07730     80 A6 06 F6 | 	mov	local09, ##27776
07734     4C A7 42 F5 | 	or	local09, local02
07738     00 76 06 F6 | 	mov	result1, #0
0773c     01 76 62 FD | 	cogid	result1
07740     3B A7 42 F5 | 	or	local09, result1
07744     4F AB 02 F6 | 	mov	local11, local05
07748     02 AA 06 F1 | 	add	local11, #2
0774c     55 A7 52 FC | 	wrword	local09, local11
07750     4D A7 02 F6 | 	mov	local09, local03
07754     08 A6 06 F1 | 	add	local09, #8
07758     4F AB 02 F6 | 	mov	local11, local05
0775c     53 A7 E2 FA | 	rdword	local09, local09
07760     06 AA 06 F1 | 	add	local11, #6
07764     55 A7 52 FC | 	wrword	local09, local11
07768     4F 8F 0A F6 | 	mov	arg02, local05 wz
0776c     00 76 06 A6 |  if_e	mov	result1, #0
07770     4D 8F 82 51 |  if_ne	sub	arg02, local03
07774     04 8E 46 50 |  if_ne	shr	arg02, #4
07778     47 77 02 56 |  if_ne	mov	result1, arg02
0777c     08 9A 06 F1 | 	add	local03, #8
07780     4D 77 52 FC | 	wrword	result1, local03
07784     08 9E 06 F1 | 	add	local05, #8
07788     4F 77 02 F6 | 	mov	result1, local05
0778c                 | LR__0795
0778c     E7 F0 03 F6 | 	mov	ptra, fp
07790     F2 00 A0 FD | 	call	#popregs_
07794                 | __system___gc_tryalloc_ret
07794     2D 00 64 FD | 	ret
07798                 | 
07798                 | __system___gc_alloc_managed
07798     01 CA 05 F6 | 	mov	COUNT_, #1
0779c     E8 00 A0 FD | 	call	#pushregs_
077a0     46 97 02 F6 | 	mov	local01, arg01
077a4     00 8E 06 F6 | 	mov	arg02, #0
077a8     1C 00 B0 FD | 	call	#__system___gc_doalloc
077ac     3B 8F 0A F6 | 	mov	arg02, result1 wz
077b0     01 96 56 A2 |  if_e	cmps	local01, #1 wc
077b4     00 76 06 26 |  if_nc_and_z	mov	result1, #0
077b8     47 77 02 D6 |  if_c_or_nz	mov	result1, arg02
077bc     E7 F0 03 F6 | 	mov	ptra, fp
077c0     F2 00 A0 FD | 	call	#popregs_
077c4                 | __system___gc_alloc_managed_ret
077c4     2D 00 64 FD | 	ret
077c8                 | 
077c8                 | __system___gc_doalloc
077c8     06 CA 05 F6 | 	mov	COUNT_, #6
077cc     E8 00 A0 FD | 	call	#pushregs_
077d0     46 97 0A F6 | 	mov	local01, arg01 wz
077d4     47 99 02 F6 | 	mov	local02, arg02
077d8     00 76 06 A6 |  if_e	mov	result1, #0
077dc     84 00 90 AD |  if_e	jmp	#LR__0807
077e0     17 96 06 F1 | 	add	local01, #23
077e4     0F 96 26 F5 | 	andn	local01, #15
077e8     04 96 46 F0 | 	shr	local01, #4
077ec     34 8D 02 F6 | 	mov	arg01, ptr___system__dat__
077f0     1C 8C 06 F1 | 	add	arg01, #28
077f4     2C F7 BF FD | 	call	#__system___lockmem
077f8     4B 8D 02 F6 | 	mov	arg01, local01
077fc     4C 8F 02 F6 | 	mov	arg02, local02
07800     DC FD BF FD | 	call	#__system___gc_tryalloc
07804     3B 9B 0A F6 | 	mov	local03, result1 wz
07808     14 00 90 5D |  if_ne	jmp	#LR__0800
0780c     24 03 B0 FD | 	call	#__system___gc_docollect
07810     4B 8D 02 F6 | 	mov	arg01, local01
07814     4C 8F 02 F6 | 	mov	arg02, local02
07818     C4 FD BF FD | 	call	#__system___gc_tryalloc
0781c     3B 9B 02 F6 | 	mov	local03, result1
07820                 | LR__0800
07820     34 8D 02 F6 | 	mov	arg01, ptr___system__dat__
07824     1C 8C 06 F1 | 	add	arg01, #28
07828     46 01 68 FC | 	wrlong	#0, arg01
0782c     00 9A 0E F2 | 	cmp	local03, #0 wz
07830     2C 00 90 AD |  if_e	jmp	#LR__0806
07834     04 96 66 F0 | 	shl	local01, #4
07838     08 96 86 F1 | 	sub	local01, #8
0783c     4B 9D 52 F6 | 	abs	local04, local01 wc
07840     02 9C 46 F0 | 	shr	local04, #2
07844     4E 9F 8A F6 | 	negc	local05, local04 wz
07848     4D A1 02 F6 | 	mov	local06, local03
0784c     10 00 90 AD |  if_e	jmp	#LR__0805
07850     D7 06 48 FB | 	callpa	#(@LR__0803-@LR__0801)>>2,fcache_load_ptr_
07854                 | LR__0801
07854     4F 05 D8 FC | 	rep	@LR__0804, local05
07858                 | LR__0802
07858     50 01 68 FC | 	wrlong	#0, local06
0785c     04 A0 06 F1 | 	add	local06, #4
07860                 | LR__0803
07860                 | LR__0804
07860                 | LR__0805
07860                 | LR__0806
07860     4D 77 02 F6 | 	mov	result1, local03
07864                 | LR__0807
07864     E7 F0 03 F6 | 	mov	ptra, fp
07868     F2 00 A0 FD | 	call	#popregs_
0786c                 | __system___gc_doalloc_ret
0786c     2D 00 64 FD | 	ret
07870                 | 
07870                 | __system___gc_isvalidptr
07870     F8 90 06 F4 | 	bitl	arg03, #248
07874     08 90 86 F1 | 	sub	arg03, #8
07878     46 91 52 F2 | 	cmps	arg03, arg01 wc
0787c     08 00 90 CD |  if_b	jmp	#LR__0810
07880     47 91 52 F2 | 	cmps	arg03, arg02 wc
07884     08 00 90 CD |  if_b	jmp	#LR__0811
07888                 | LR__0810
07888     00 76 06 F6 | 	mov	result1, #0
0788c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
07890                 | LR__0811
07890     48 7D 02 F6 | 	mov	_var01, arg03
07894     46 7D 62 F5 | 	xor	_var01, arg01
07898     0F 7C CE F7 | 	test	_var01, #15 wz
0789c     00 76 06 56 |  if_ne	mov	result1, #0
078a0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
078a4     48 7D 02 F6 | 	mov	_var01, arg03
078a8     02 7C 06 F1 | 	add	_var01, #2
078ac     3E 7D E2 FA | 	rdword	_var01, _var01
078b0     7F 00 00 FF 
078b4     C0 7D 06 F5 | 	and	_var01, ##65472
078b8     36 00 00 FF 
078bc     80 7C 0E F2 | 	cmp	_var01, ##27776 wz
078c0     00 76 06 56 |  if_ne	mov	result1, #0
078c4     48 77 02 A6 |  if_e	mov	result1, arg03
078c8                 | __system___gc_isvalidptr_ret
078c8     2D 00 64 FD | 	ret
078cc                 | 
078cc                 | __system___gc_dofree
078cc     06 CA 05 F6 | 	mov	COUNT_, #6
078d0     E8 00 A0 FD | 	call	#pushregs_
078d4     46 97 02 F6 | 	mov	local01, arg01
078d8     6C FC BF FD | 	call	#__system___gc_ptrs
078dc     3B 99 02 F6 | 	mov	local02, result1
078e0     3C 9B 02 F6 | 	mov	local03, result2
078e4     4B 8F 02 F6 | 	mov	arg02, local01
078e8     02 8E 06 F1 | 	add	arg02, #2
078ec     36 00 80 FF 
078f0     47 1F 59 FC | 	wrword	##27791, arg02
078f4     4B 9D 02 F6 | 	mov	local04, local01
078f8     4B 8D 02 F6 | 	mov	arg01, local01
078fc     46 9F EA FA | 	rdword	local05, arg01 wz
07900     00 76 06 A6 |  if_e	mov	result1, #0
07904     04 9E 66 50 |  if_ne	shl	local05, #4
07908     4F 8D 02 51 |  if_ne	add	arg01, local05
0790c     46 77 02 56 |  if_ne	mov	result1, arg01
07910     3B A1 02 F6 | 	mov	local06, result1
07914     D7 24 48 FB | 	callpa	#(@LR__0821-@LR__0820)>>2,fcache_load_ptr_
07918                 | LR__0820
07918     04 9C 06 F1 | 	add	local04, #4
0791c     4E 8F EA FA | 	rdword	arg02, local04 wz
07920     4C 8D 02 F6 | 	mov	arg01, local02
07924     00 76 06 A6 |  if_e	mov	result1, #0
07928     04 8E 66 50 |  if_ne	shl	arg02, #4
0792c     47 8D 02 51 |  if_ne	add	arg01, arg02
07930     46 77 02 56 |  if_ne	mov	result1, arg01
07934     3B 9D 0A F6 | 	mov	local04, result1 wz
07938     24 00 90 AD |  if_e	jmp	#LR__0822
0793c     4E 8D 02 F6 | 	mov	arg01, local04
07940     00 76 06 F6 | 	mov	result1, #0
07944     02 8C 06 F1 | 	add	arg01, #2
07948     46 8D E2 FA | 	rdword	arg01, arg01
0794c     36 00 00 FF 
07950     8F 8C 0E F2 | 	cmp	arg01, ##27791 wz
07954     01 76 66 A6 |  if_e	neg	result1, #1
07958     00 76 0E F2 | 	cmp	result1, #0 wz
0795c     B8 FF 9F AD |  if_e	jmp	#LR__0820
07960                 | LR__0821
07960                 | LR__0822
07960     00 9C 0E F2 | 	cmp	local04, #0 wz
07964     4C 9D 02 A6 |  if_e	mov	local04, local02
07968     4E 8F 02 F6 | 	mov	arg02, local04
0796c     06 8E 06 F1 | 	add	arg02, #6
07970     4B 8D 02 F6 | 	mov	arg01, local01
07974     47 8F E2 FA | 	rdword	arg02, arg02
07978     06 8C 06 F1 | 	add	arg01, #6
0797c     46 8F 52 FC | 	wrword	arg02, arg01
07980     4B 8F 0A F6 | 	mov	arg02, local01 wz
07984     00 76 06 A6 |  if_e	mov	result1, #0
07988     4C 8F 82 51 |  if_ne	sub	arg02, local02
0798c     04 8E 46 50 |  if_ne	shr	arg02, #4
07990     47 77 02 56 |  if_ne	mov	result1, arg02
07994     4E 8F 02 F6 | 	mov	arg02, local04
07998     06 8E 06 F1 | 	add	arg02, #6
0799c     47 77 52 FC | 	wrword	result1, arg02
079a0     4C 9D 0A F2 | 	cmp	local04, local02 wz
079a4     A4 00 90 AD |  if_e	jmp	#LR__0825
079a8     4E 8D 02 F6 | 	mov	arg01, local04
079ac     46 9F EA FA | 	rdword	local05, arg01 wz
079b0     00 76 06 A6 |  if_e	mov	result1, #0
079b4     04 9E 66 50 |  if_ne	shl	local05, #4
079b8     4F 8D 02 51 |  if_ne	add	arg01, local05
079bc     46 77 02 56 |  if_ne	mov	result1, arg01
079c0     4B 77 0A F2 | 	cmp	result1, local01 wz
079c4     84 00 90 5D |  if_ne	jmp	#LR__0824
079c8     4E A1 E2 FA | 	rdword	local06, local04
079cc     4B 8F E2 FA | 	rdword	arg02, local01
079d0     47 A1 02 F1 | 	add	local06, arg02
079d4     4E A1 52 FC | 	wrword	local06, local04
079d8     4B A1 02 F6 | 	mov	local06, local01
079dc     02 A0 06 F1 | 	add	local06, #2
079e0     50 01 58 FC | 	wrword	#0, local06
079e4     4B 8D 02 F6 | 	mov	arg01, local01
079e8     46 9F EA FA | 	rdword	local05, arg01 wz
079ec     00 76 06 A6 |  if_e	mov	result1, #0
079f0     04 9E 66 50 |  if_ne	shl	local05, #4
079f4     4F 8D 02 51 |  if_ne	add	arg01, local05
079f8     46 77 02 56 |  if_ne	mov	result1, arg01
079fc     3B A1 02 F6 | 	mov	local06, result1
07a00     4D A1 52 F2 | 	cmps	local06, local03 wc
07a04     20 00 90 3D |  if_ae	jmp	#LR__0823
07a08     4E 8F 0A F6 | 	mov	arg02, local04 wz
07a0c     00 76 06 A6 |  if_e	mov	result1, #0
07a10     4C 8F 82 51 |  if_ne	sub	arg02, local02
07a14     04 8E 46 50 |  if_ne	shr	arg02, #4
07a18     47 77 02 56 |  if_ne	mov	result1, arg02
07a1c     50 8F 02 F6 | 	mov	arg02, local06
07a20     04 8E 06 F1 | 	add	arg02, #4
07a24     47 77 52 FC | 	wrword	result1, arg02
07a28                 | LR__0823
07a28     4B 8F 02 F6 | 	mov	arg02, local01
07a2c     06 8E 06 F1 | 	add	arg02, #6
07a30     4E 79 02 F6 | 	mov	result2, local04
07a34     47 8F E2 FA | 	rdword	arg02, arg02
07a38     06 78 06 F1 | 	add	result2, #6
07a3c     3C 8F 52 FC | 	wrword	arg02, result2
07a40     06 96 06 F1 | 	add	local01, #6
07a44     4B 01 58 FC | 	wrword	#0, local01
07a48     4E 97 02 F6 | 	mov	local01, local04
07a4c                 | LR__0824
07a4c                 | LR__0825
07a4c     4B 8D 02 F6 | 	mov	arg01, local01
07a50     46 9F EA FA | 	rdword	local05, arg01 wz
07a54     00 76 06 A6 |  if_e	mov	result1, #0
07a58     04 9E 66 50 |  if_ne	shl	local05, #4
07a5c     4F 8D 02 51 |  if_ne	add	arg01, local05
07a60     46 77 02 56 |  if_ne	mov	result1, arg01
07a64     3B 8F 0A F6 | 	mov	arg02, result1 wz
07a68     B8 00 90 AD |  if_e	jmp	#LR__0827
07a6c     4D 8F 52 F2 | 	cmps	arg02, local03 wc
07a70     B0 00 90 3D |  if_ae	jmp	#LR__0827
07a74     47 8D 02 F6 | 	mov	arg01, arg02
07a78     00 76 06 F6 | 	mov	result1, #0
07a7c     02 8C 06 F1 | 	add	arg01, #2
07a80     46 8D E2 FA | 	rdword	arg01, arg01
07a84     36 00 00 FF 
07a88     8F 8C 0E F2 | 	cmp	arg01, ##27791 wz
07a8c     01 76 66 A6 |  if_e	neg	result1, #1
07a90     00 76 0E F2 | 	cmp	result1, #0 wz
07a94     8C 00 90 AD |  if_e	jmp	#LR__0827
07a98     4B 9D 02 F6 | 	mov	local04, local01
07a9c     4E A1 E2 FA | 	rdword	local06, local04
07aa0     47 8D 02 F6 | 	mov	arg01, arg02
07aa4     46 97 E2 FA | 	rdword	local01, arg01
07aa8     4B A1 02 F1 | 	add	local06, local01
07aac     4E A1 52 FC | 	wrword	local06, local04
07ab0     46 A1 02 F6 | 	mov	local06, arg01
07ab4     06 A0 06 F1 | 	add	local06, #6
07ab8     4E 97 02 F6 | 	mov	local01, local04
07abc     50 A1 E2 FA | 	rdword	local06, local06
07ac0     06 96 06 F1 | 	add	local01, #6
07ac4     4B A1 52 FC | 	wrword	local06, local01
07ac8     46 A1 02 F6 | 	mov	local06, arg01
07acc     02 A0 06 F1 | 	add	local06, #2
07ad0     50 55 59 FC | 	wrword	#170, local06
07ad4     46 A1 02 F6 | 	mov	local06, arg01
07ad8     06 A0 06 F1 | 	add	local06, #6
07adc     50 01 58 FC | 	wrword	#0, local06
07ae0     46 9F EA FA | 	rdword	local05, arg01 wz
07ae4     00 76 06 A6 |  if_e	mov	result1, #0
07ae8     04 9E 66 50 |  if_ne	shl	local05, #4
07aec     4F 8D 02 51 |  if_ne	add	arg01, local05
07af0     46 77 02 56 |  if_ne	mov	result1, arg01
07af4     3B A1 0A F6 | 	mov	local06, result1 wz
07af8     28 00 90 AD |  if_e	jmp	#LR__0826
07afc     4D A1 52 F2 | 	cmps	local06, local03 wc
07b00     20 00 90 3D |  if_ae	jmp	#LR__0826
07b04     4E 8F 0A F6 | 	mov	arg02, local04 wz
07b08     00 76 06 A6 |  if_e	mov	result1, #0
07b0c     4C 8F 82 51 |  if_ne	sub	arg02, local02
07b10     04 8E 46 50 |  if_ne	shr	arg02, #4
07b14     47 77 02 56 |  if_ne	mov	result1, arg02
07b18     50 9D 02 F6 | 	mov	local04, local06
07b1c     04 9C 06 F1 | 	add	local04, #4
07b20     4E 77 52 FC | 	wrword	result1, local04
07b24                 | LR__0826
07b24                 | LR__0827
07b24     50 77 02 F6 | 	mov	result1, local06
07b28     E7 F0 03 F6 | 	mov	ptra, fp
07b2c     F2 00 A0 FD | 	call	#popregs_
07b30                 | __system___gc_dofree_ret
07b30     2D 00 64 FD | 	ret
07b34                 | 
07b34                 | __system___gc_docollect
07b34     05 CA 05 F6 | 	mov	COUNT_, #5
07b38     E8 00 A0 FD | 	call	#pushregs_
07b3c     08 FA BF FD | 	call	#__system___gc_ptrs
07b40     3C 97 02 F6 | 	mov	local01, result2
07b44     3B 99 02 F6 | 	mov	local02, result1
07b48     4C 8D 02 F6 | 	mov	arg01, local02
07b4c     46 9B EA FA | 	rdword	local03, arg01 wz
07b50     00 76 06 A6 |  if_e	mov	result1, #0
07b54     04 9A 66 50 |  if_ne	shl	local03, #4
07b58     4D 8D 02 51 |  if_ne	add	arg01, local03
07b5c     46 77 02 56 |  if_ne	mov	result1, arg01
07b60     3B 9D 0A F6 | 	mov	local04, result1 wz
07b64     00 76 06 F6 | 	mov	result1, #0
07b68     01 76 62 FD | 	cogid	result1
07b6c     3B 9F 02 F6 | 	mov	local05, result1
07b70     48 00 90 AD |  if_e	jmp	#LR__0832
07b74     D7 22 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
07b78                 | LR__0830
07b78     4B 9D 52 F2 | 	cmps	local04, local01 wc
07b7c     3C 00 90 3D |  if_ae	jmp	#LR__0832
07b80     4E 8F 02 F6 | 	mov	arg02, local04
07b84     02 8E 06 F1 | 	add	arg02, #2
07b88     47 8F E2 FA | 	rdword	arg02, arg02
07b8c     20 8E 26 F5 | 	andn	arg02, #32
07b90     4E 8D 02 F6 | 	mov	arg01, local04
07b94     02 8C 06 F1 | 	add	arg01, #2
07b98     46 8F 52 FC | 	wrword	arg02, arg01
07b9c     4E 8D 02 F6 | 	mov	arg01, local04
07ba0     46 9B EA FA | 	rdword	local03, arg01 wz
07ba4     00 76 06 A6 |  if_e	mov	result1, #0
07ba8     04 9A 66 50 |  if_ne	shl	local03, #4
07bac     4D 8D 02 51 |  if_ne	add	arg01, local03
07bb0     46 77 02 56 |  if_ne	mov	result1, arg01
07bb4     3B 9D 0A F6 | 	mov	local04, result1 wz
07bb8     BC FF 9F 5D |  if_ne	jmp	#LR__0830
07bbc                 | LR__0831
07bbc                 | LR__0832
07bbc     00 9A 06 F6 | 	mov	local03, #0
07bc0     00 8C 06 F6 | 	mov	arg01, #0
07bc4     34 F3 BF FD | 	call	#__system____topofstack
07bc8     3B 8F 02 F6 | 	mov	arg02, result1
07bcc     4D 8D 02 F6 | 	mov	arg01, local03
07bd0     90 00 B0 FD | 	call	#__system___gc_markhub
07bd4     1C 01 B0 FD | 	call	#__system___gc_markcog
07bd8     4C 8D 02 F6 | 	mov	arg01, local02
07bdc     46 9B EA FA | 	rdword	local03, arg01 wz
07be0     00 76 06 A6 |  if_e	mov	result1, #0
07be4     04 9A 66 50 |  if_ne	shl	local03, #4
07be8     4D 8D 02 51 |  if_ne	add	arg01, local03
07bec     46 77 02 56 |  if_ne	mov	result1, arg01
07bf0     3B 99 0A F6 | 	mov	local02, result1 wz
07bf4     60 00 90 AD |  if_e	jmp	#LR__0836
07bf8                 | LR__0833
07bf8     4C 9D 02 F6 | 	mov	local04, local02
07bfc     4E 8D 02 F6 | 	mov	arg01, local04
07c00     46 9B EA FA | 	rdword	local03, arg01 wz
07c04     00 76 06 A6 |  if_e	mov	result1, #0
07c08     04 9A 66 50 |  if_ne	shl	local03, #4
07c0c     4D 8D 02 51 |  if_ne	add	arg01, local03
07c10     46 77 02 56 |  if_ne	mov	result1, arg01
07c14     3B 99 02 F6 | 	mov	local02, result1
07c18     4E 8F 02 F6 | 	mov	arg02, local04
07c1c     02 8E 06 F1 | 	add	arg02, #2
07c20     47 8F E2 FA | 	rdword	arg02, arg02
07c24     20 8E CE F7 | 	test	arg02, #32 wz
07c28     10 8E CE A7 |  if_e	test	arg02, #16 wz
07c2c     1C 00 90 5D |  if_ne	jmp	#LR__0835
07c30     47 8F 42 F8 | 	getnib	arg02, arg02, #0
07c34     4F 8F 0A F2 | 	cmp	arg02, local05 wz
07c38     0E 8E 0E 52 |  if_ne	cmp	arg02, #14 wz
07c3c     0C 00 90 5D |  if_ne	jmp	#LR__0834
07c40     4E 8D 02 F6 | 	mov	arg01, local04
07c44     84 FC BF FD | 	call	#__system___gc_dofree
07c48     3B 99 02 F6 | 	mov	local02, result1
07c4c                 | LR__0834
07c4c                 | LR__0835
07c4c     00 98 0E F2 | 	cmp	local02, #0 wz
07c50     4B 99 52 52 |  if_ne	cmps	local02, local01 wc
07c54     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__0833
07c58                 | LR__0836
07c58     E7 F0 03 F6 | 	mov	ptra, fp
07c5c     F2 00 A0 FD | 	call	#popregs_
07c60                 | __system___gc_docollect_ret
07c60     2D 00 64 FD | 	ret
07c64                 | 
07c64                 | __system___gc_markhub
07c64     04 CA 05 F6 | 	mov	COUNT_, #4
07c68     E8 00 A0 FD | 	call	#pushregs_
07c6c     46 97 02 F6 | 	mov	local01, arg01
07c70     47 99 02 F6 | 	mov	local02, arg02
07c74     D0 F8 BF FD | 	call	#__system___gc_ptrs
07c78     3B 9B 02 F6 | 	mov	local03, result1
07c7c     3C 9D 02 F6 | 	mov	local04, result2
07c80                 | LR__0840
07c80     4C 97 52 F2 | 	cmps	local01, local02 wc
07c84     60 00 90 3D |  if_ae	jmp	#LR__0841
07c88     4B 91 02 FB | 	rdlong	arg03, local01
07c8c     04 96 06 F1 | 	add	local01, #4
07c90     4E 8F 02 F6 | 	mov	arg02, local04
07c94     4D 8D 02 F6 | 	mov	arg01, local03
07c98     D4 FB BF FD | 	call	#__system___gc_isvalidptr
07c9c     3B 91 0A F6 | 	mov	arg03, result1 wz
07ca0     DC FF 9F AD |  if_e	jmp	#LR__0840
07ca4     48 8D 02 F6 | 	mov	arg01, arg03
07ca8     00 76 06 F6 | 	mov	result1, #0
07cac     02 8C 06 F1 | 	add	arg01, #2
07cb0     46 8D E2 FA | 	rdword	arg01, arg01
07cb4     36 00 00 FF 
07cb8     8F 8C 0E F2 | 	cmp	arg01, ##27791 wz
07cbc     01 76 66 A6 |  if_e	neg	result1, #1
07cc0     00 76 0E F2 | 	cmp	result1, #0 wz
07cc4     B8 FF 9F 5D |  if_ne	jmp	#LR__0840
07cc8     48 79 02 F6 | 	mov	result2, arg03
07ccc     02 78 06 F1 | 	add	result2, #2
07cd0     3C 79 E2 FA | 	rdword	result2, result2
07cd4     0F 78 26 F5 | 	andn	result2, #15
07cd8     2E 78 46 F5 | 	or	result2, #46
07cdc     02 90 06 F1 | 	add	arg03, #2
07ce0     48 79 52 FC | 	wrword	result2, arg03
07ce4     98 FF 9F FD | 	jmp	#LR__0840
07ce8                 | LR__0841
07ce8     E7 F0 03 F6 | 	mov	ptra, fp
07cec     F2 00 A0 FD | 	call	#popregs_
07cf0                 | __system___gc_markhub_ret
07cf0     2D 00 64 FD | 	ret
07cf4                 | 
07cf4                 | __system___gc_markcog
07cf4     04 CA 05 F6 | 	mov	COUNT_, #4
07cf8     E8 00 A0 FD | 	call	#pushregs_
07cfc     48 F8 BF FD | 	call	#__system___gc_ptrs
07d00     3B 97 02 F6 | 	mov	local01, result1
07d04     3C 99 02 F6 | 	mov	local02, result2
07d08     EF 9B 06 F6 | 	mov	local03, #495
07d0c                 | LR__0850
07d0c                 | 	'.live	local03
07d0c     00 9A 96 F9 | 	alts	local03, #0
07d10     4D 9D 02 F6 | 	mov	local04, local03
07d14     4B 8D 02 F6 | 	mov	arg01, local01
07d18     4C 8F 02 F6 | 	mov	arg02, local02
07d1c     4E 91 02 F6 | 	mov	arg03, local04
07d20     4C FB BF FD | 	call	#__system___gc_isvalidptr
07d24     00 76 0E F2 | 	cmp	result1, #0 wz
07d28     18 00 90 AD |  if_e	jmp	#LR__0851
07d2c     3B 9D 02 F6 | 	mov	local04, result1
07d30     02 9C 06 F1 | 	add	local04, #2
07d34     4E 9D E2 FA | 	rdword	local04, local04
07d38     20 9C 46 F5 | 	or	local04, #32
07d3c     02 76 06 F1 | 	add	result1, #2
07d40     3B 9D 52 FC | 	wrword	local04, result1
07d44                 | LR__0851
07d44     01 9A 86 F1 | 	sub	local03, #1
07d48     00 9A 56 F2 | 	cmps	local03, #0 wc
07d4c     BC FF 9F 3D |  if_ae	jmp	#LR__0850
07d50     E7 F0 03 F6 | 	mov	ptra, fp
07d54     F2 00 A0 FD | 	call	#popregs_
07d58                 | __system___gc_markcog_ret
07d58     2D 00 64 FD | 	ret
07d5c                 | 
07d5c                 | __system___closeraw
07d5c     05 CA 05 F6 | 	mov	COUNT_, #5
07d60     E8 00 A0 FD | 	call	#pushregs_
07d64     46 97 02 F6 | 	mov	local01, arg01
07d68     00 98 06 F6 | 	mov	local02, #0
07d6c     08 96 06 F1 | 	add	local01, #8
07d70     4B 77 0A FB | 	rdlong	result1, local01 wz
07d74     08 96 86 F1 | 	sub	local01, #8
07d78     20 68 06 A1 |  if_e	add	ptr___system__dat__, #32
07d7c     34 0B 68 AC |  if_e	wrlong	#5, ptr___system__dat__
07d80     20 68 86 A1 |  if_e	sub	ptr___system__dat__, #32
07d84     01 76 66 A6 |  if_e	neg	result1, #1
07d88     A8 00 90 AD |  if_e	jmp	#LR__0862
07d8c     2C 96 06 F1 | 	add	local01, #44
07d90     4B 77 0A FB | 	rdlong	result1, local01 wz
07d94     2C 96 86 F1 | 	sub	local01, #44
07d98     38 00 90 AD |  if_e	jmp	#LR__0860
07d9c     2C 96 06 F1 | 	add	local01, #44
07da0     4B 9B 02 FB | 	rdlong	local03, local01
07da4     4D 9D 02 F6 | 	mov	local04, local03
07da8     2C 96 86 F1 | 	sub	local01, #44
07dac     13 9C 46 F7 | 	zerox	local04, #19
07db0     14 9A 46 F0 | 	shr	local03, #20
07db4     02 9A 66 F0 | 	shl	local03, #2
07db8     2D 9B 02 F1 | 	add	local03, __methods__
07dbc     4D 9B 02 FB | 	rdlong	local03, local03
07dc0     4B 8D 02 F6 | 	mov	arg01, local01
07dc4     33 9F 02 F6 | 	mov	local05, objptr
07dc8     4E 67 02 F6 | 	mov	objptr, local04
07dcc     2D 9A 62 FD | 	call	local03
07dd0     4F 67 02 F6 | 	mov	objptr, local05
07dd4                 | LR__0860
07dd4     24 96 06 F1 | 	add	local01, #36
07dd8     4B 9F 0A FB | 	rdlong	local05, local01 wz
07ddc     24 96 86 F1 | 	sub	local01, #36
07de0     3C 00 90 AD |  if_e	jmp	#LR__0861
07de4     24 96 06 F1 | 	add	local01, #36
07de8     4B 9B 02 FB | 	rdlong	local03, local01
07dec     4D 9D 02 F6 | 	mov	local04, local03
07df0     24 96 86 F1 | 	sub	local01, #36
07df4     13 9C 46 F7 | 	zerox	local04, #19
07df8     14 9A 46 F0 | 	shr	local03, #20
07dfc     02 9A 66 F0 | 	shl	local03, #2
07e00     2D 9B 02 F1 | 	add	local03, __methods__
07e04     4D 9B 02 FB | 	rdlong	local03, local03
07e08     4B 8D 02 F6 | 	mov	arg01, local01
07e0c     33 9F 02 F6 | 	mov	local05, objptr
07e10     4E 67 02 F6 | 	mov	objptr, local04
07e14     2D 9A 62 FD | 	call	local03
07e18     4F 67 02 F6 | 	mov	objptr, local05
07e1c     3B 99 02 F6 | 	mov	local02, result1
07e20                 | LR__0861
07e20     4B 8D 02 F6 | 	mov	arg01, local01
07e24     00 8E 06 F6 | 	mov	arg02, #0
07e28     34 90 06 F6 | 	mov	arg03, #52
07e2c     D8 00 A0 FD | 	call	#\builtin_bytefill_
07e30     4C 77 02 F6 | 	mov	result1, local02
07e34                 | LR__0862
07e34     E7 F0 03 F6 | 	mov	ptra, fp
07e38     F2 00 A0 FD | 	call	#popregs_
07e3c                 | __system___closeraw_ret
07e3c     2D 00 64 FD | 	ret
07e40                 | 
07e40                 | __system____default_getc
07e40     03 CA 05 F6 | 	mov	COUNT_, #3
07e44     E8 00 A0 FD | 	call	#pushregs_
07e48     46 97 02 F6 | 	mov	local01, arg01
07e4c     4B 99 02 FB | 	rdlong	local02, local01
07e50     08 96 06 F1 | 	add	local01, #8
07e54     4B 9B 02 FB | 	rdlong	local03, local01
07e58     08 96 86 F1 | 	sub	local01, #8
07e5c     08 9A CE F7 | 	test	local03, #8 wz
07e60     4B 8D 02 56 |  if_ne	mov	arg01, local01
07e64     08 01 B0 5D |  if_ne	call	#__system____default_flush
07e68     08 96 06 F1 | 	add	local01, #8
07e6c     4B 9B 02 FB | 	rdlong	local03, local01
07e70     04 9A 46 F5 | 	or	local03, #4
07e74     4B 9B 62 FC | 	wrlong	local03, local01
07e78     08 96 86 F1 | 	sub	local01, #8
07e7c     4C 9B 0A FB | 	rdlong	local03, local02 wz
07e80     0C 00 90 5D |  if_ne	jmp	#LR__0870
07e84     4B 8D 02 F6 | 	mov	arg01, local01
07e88     F8 04 B0 FD | 	call	#__system____default_filbuf
07e8c     3B 9B 02 F6 | 	mov	local03, result1
07e90                 | LR__0870
07e90     01 9A 56 F2 | 	cmps	local03, #1 wc
07e94     01 76 66 C6 |  if_b	neg	result1, #1
07e98     1C 00 90 CD |  if_b	jmp	#LR__0871
07e9c     01 9A 86 F1 | 	sub	local03, #1
07ea0     4C 9B 62 FC | 	wrlong	local03, local02
07ea4     04 98 06 F1 | 	add	local02, #4
07ea8     4C 9B 02 FB | 	rdlong	local03, local02
07eac     4D 77 C2 FA | 	rdbyte	result1, local03
07eb0     01 9A 06 F1 | 	add	local03, #1
07eb4     4C 9B 62 FC | 	wrlong	local03, local02
07eb8                 | LR__0871
07eb8     E7 F0 03 F6 | 	mov	ptra, fp
07ebc     F2 00 A0 FD | 	call	#popregs_
07ec0                 | __system____default_getc_ret
07ec0     2D 00 64 FD | 	ret
07ec4                 | 
07ec4                 | __system____default_putc
07ec4     06 CA 05 F6 | 	mov	COUNT_, #6
07ec8     E8 00 A0 FD | 	call	#pushregs_
07ecc     46 97 02 F6 | 	mov	local01, arg01
07ed0     47 99 02 F6 | 	mov	local02, arg02
07ed4     4C 9B 02 FB | 	rdlong	local03, local02
07ed8     08 98 06 F1 | 	add	local02, #8
07edc     4C 8F 02 FB | 	rdlong	arg02, local02
07ee0     08 98 86 F1 | 	sub	local02, #8
07ee4     04 8E CE F7 | 	test	arg02, #4 wz
07ee8     4C 8D 02 56 |  if_ne	mov	arg01, local02
07eec     80 00 B0 5D |  if_ne	call	#__system____default_flush
07ef0     08 98 06 F1 | 	add	local02, #8
07ef4     4C 9D 02 FB | 	rdlong	local04, local02
07ef8     08 9C 46 F5 | 	or	local04, #8
07efc     4C 9D 62 FC | 	wrlong	local04, local02
07f00     4D 9F 02 FB | 	rdlong	local05, local03
07f04     0C 9A 06 F1 | 	add	local03, #12
07f08     4D 8F 02 FB | 	rdlong	arg02, local03
07f0c     0C 9A 86 F1 | 	sub	local03, #12
07f10     4F 77 02 F6 | 	mov	result1, local05
07f14     47 77 02 F1 | 	add	result1, arg02
07f18     3B 97 42 FC | 	wrbyte	local01, result1
07f1c     4B 97 E2 F8 | 	getbyte	local01, local01, #0
07f20     01 9E 06 F1 | 	add	local05, #1
07f24     4D 9F 62 FC | 	wrlong	local05, local03
07f28     02 98 86 F1 | 	sub	local02, #2
07f2c     4C A1 EA FA | 	rdword	local06, local02 wz
07f30     06 98 86 F1 | 	sub	local02, #6
07f34     08 9A 06 51 |  if_ne	add	local03, #8
07f38     4D 9D 02 5B |  if_ne	rdlong	local04, local03
07f3c     4E 9F 0A 52 |  if_ne	cmp	local05, local04 wz
07f40     0C 00 90 AD |  if_e	jmp	#LR__0880
07f44     0A 96 0E F2 | 	cmp	local01, #10 wz
07f48     01 A0 0E A2 |  if_e	cmp	local06, #1 wz
07f4c     10 00 90 5D |  if_ne	jmp	#LR__0881
07f50                 | LR__0880
07f50     4C 8D 02 F6 | 	mov	arg01, local02
07f54     18 00 B0 FD | 	call	#__system____default_flush
07f58     00 76 0E F2 | 	cmp	result1, #0 wz
07f5c     01 96 66 56 |  if_ne	neg	local01, #1
07f60                 | LR__0881
07f60     4B 77 02 F6 | 	mov	result1, local01
07f64     E7 F0 03 F6 | 	mov	ptra, fp
07f68     F2 00 A0 FD | 	call	#popregs_
07f6c                 | __system____default_putc_ret
07f6c     2D 00 64 FD | 	ret
07f70                 | 
07f70                 | __system____default_flush
07f70     07 CA 05 F6 | 	mov	COUNT_, #7
07f74     E8 00 A0 FD | 	call	#pushregs_
07f78     46 97 02 F6 | 	mov	local01, arg01
07f7c     4B 99 02 FB | 	rdlong	local02, local01
07f80     4C 9B 02 FB | 	rdlong	local03, local02
07f84     08 96 06 F1 | 	add	local01, #8
07f88     4B 79 02 FB | 	rdlong	result2, local01
07f8c     08 96 86 F1 | 	sub	local01, #8
07f90     08 78 CE F7 | 	test	result2, #8 wz
07f94     D4 00 90 AD |  if_e	jmp	#LR__0892
07f98     01 9A 56 F2 | 	cmps	local03, #1 wc
07f9c     2C 01 90 CD |  if_b	jmp	#LR__0894
07fa0     08 96 06 F1 | 	add	local01, #8
07fa4     4B 79 02 FB | 	rdlong	result2, local01
07fa8     08 96 86 F1 | 	sub	local01, #8
07fac     80 78 CE F7 | 	test	result2, #128 wz
07fb0     6C 00 90 AD |  if_e	jmp	#LR__0891
07fb4     08 96 06 F1 | 	add	local01, #8
07fb8     4B 91 02 FB | 	rdlong	arg03, local01
07fbc     08 96 86 F1 | 	sub	local01, #8
07fc0     00 91 CE F7 | 	test	arg03, #256 wz
07fc4     58 00 90 AD |  if_e	jmp	#LR__0890
07fc8     30 96 06 F1 | 	add	local01, #48
07fcc     4B 9D 02 FB | 	rdlong	local04, local01
07fd0     4E 9F 02 F6 | 	mov	local05, local04
07fd4     30 96 86 F1 | 	sub	local01, #48
07fd8     13 9E 46 F7 | 	zerox	local05, #19
07fdc     14 9C 46 F0 | 	shr	local04, #20
07fe0     02 9C 66 F0 | 	shl	local04, #2
07fe4     2D 9D 02 F1 | 	add	local04, __methods__
07fe8     4E 9D 02 FB | 	rdlong	local04, local04
07fec     4B 8D 02 F6 | 	mov	arg01, local01
07ff0     00 8E 06 F6 | 	mov	arg02, #0
07ff4     00 90 06 F6 | 	mov	arg03, #0
07ff8     02 92 06 F6 | 	mov	arg04, #2
07ffc     33 A1 02 F6 | 	mov	local06, objptr
08000     4F 67 02 F6 | 	mov	objptr, local05
08004     2D 9C 62 FD | 	call	local04
08008     50 67 02 F6 | 	mov	objptr, local06
0800c     08 96 06 F1 | 	add	local01, #8
08010     4B A1 02 FB | 	rdlong	local06, local01
08014     00 A1 26 F5 | 	andn	local06, #256
08018     4B A1 62 FC | 	wrlong	local06, local01
0801c     08 96 86 F1 | 	sub	local01, #8
08020                 | LR__0890
08020                 | LR__0891
08020     18 96 06 F1 | 	add	local01, #24
08024     4B 9D 02 FB | 	rdlong	local04, local01
08028     4E 9F 02 F6 | 	mov	local05, local04
0802c     18 96 86 F1 | 	sub	local01, #24
08030     13 9E 46 F7 | 	zerox	local05, #19
08034     14 9C 46 F0 | 	shr	local04, #20
08038     02 9C 66 F0 | 	shl	local04, #2
0803c     2D 9D 02 F1 | 	add	local04, __methods__
08040     4E 9D 02 FB | 	rdlong	local04, local04
08044     0C 98 06 F1 | 	add	local02, #12
08048     4C 8F 02 FB | 	rdlong	arg02, local02
0804c     0C 98 86 F1 | 	sub	local02, #12
08050     4B 8D 02 F6 | 	mov	arg01, local01
08054     4D 91 02 F6 | 	mov	arg03, local03
08058     33 A1 02 F6 | 	mov	local06, objptr
0805c     4F 67 02 F6 | 	mov	objptr, local05
08060     2D 9C 62 FD | 	call	local04
08064     50 67 02 F6 | 	mov	objptr, local06
08068     60 00 90 FD | 	jmp	#LR__0894
0806c                 | LR__0892
0806c     08 96 06 F1 | 	add	local01, #8
08070     4B A1 02 FB | 	rdlong	local06, local01
08074     08 96 86 F1 | 	sub	local01, #8
08078     04 A0 CE F7 | 	test	local06, #4 wz
0807c     00 9A 0E 52 |  if_ne	cmp	local03, #0 wz
08080     48 00 90 AD |  if_e	jmp	#LR__0893
08084     4D 8F 62 F6 | 	neg	arg02, local03
08088     47 91 02 F6 | 	mov	arg03, arg02
0808c     1F 90 C6 F0 | 	sar	arg03, #31
08090     30 96 06 F1 | 	add	local01, #48
08094     4B 9D 02 FB | 	rdlong	local04, local01
08098     4E 9F 02 F6 | 	mov	local05, local04
0809c     30 96 86 F1 | 	sub	local01, #48
080a0     13 9E 46 F7 | 	zerox	local05, #19
080a4     14 9C 46 F0 | 	shr	local04, #20
080a8     02 9C 66 F0 | 	shl	local04, #2
080ac     2D 9D 02 F1 | 	add	local04, __methods__
080b0     4E 9D 02 FB | 	rdlong	local04, local04
080b4     4B 8D 02 F6 | 	mov	arg01, local01
080b8     01 92 06 F6 | 	mov	arg04, #1
080bc     33 A1 02 F6 | 	mov	local06, objptr
080c0     4F 67 02 F6 | 	mov	objptr, local05
080c4     2D 9C 62 FD | 	call	local04
080c8     50 67 02 F6 | 	mov	objptr, local06
080cc                 | LR__0893
080cc                 | LR__0894
080cc     4C 01 68 FC | 	wrlong	#0, local02
080d0     04 98 06 F1 | 	add	local02, #4
080d4     4C 01 68 FC | 	wrlong	#0, local02
080d8     08 96 06 F1 | 	add	local01, #8
080dc     4B A3 02 FB | 	rdlong	local07, local01
080e0     0C A2 26 F5 | 	andn	local07, #12
080e4     4B A3 62 FC | 	wrlong	local07, local01
080e8     00 76 06 F6 | 	mov	result1, #0
080ec     E7 F0 03 F6 | 	mov	ptra, fp
080f0     F2 00 A0 FD | 	call	#popregs_
080f4                 | __system____default_flush_ret
080f4     2D 00 64 FD | 	ret
080f8                 | 
080f8                 | __system____getftab
080f8     0A 8C 16 F2 | 	cmp	arg01, #10 wc
080fc     34 8C 06 CD |  if_b	qmul	arg01, #52
08100     00 76 06 36 |  if_ae	mov	result1, #0
08104     34 8D 02 C6 |  if_b	mov	arg01, ptr___system__dat__
08108     28 8C 06 C1 |  if_b	add	arg01, #40
0810c     18 76 62 CD |  if_b	getqx	result1
08110     46 77 02 C1 |  if_b	add	result1, arg01
08114                 | __system____getftab_ret
08114     2D 00 64 FD | 	ret
08118                 | 
08118                 | __system___strrev
08118     46 7D CA FA | 	rdbyte	_var01, arg01 wz
0811c     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
08120     46 7F 02 F6 | 	mov	_var02, arg01
08124     D7 06 48 FB | 	callpa	#(@LR__0901-@LR__0900)>>2,fcache_load_ptr_
08128                 | LR__0900
08128     3F 7D CA FA | 	rdbyte	_var01, _var02 wz
0812c     01 7E 06 51 |  if_ne	add	_var02, #1
08130     F4 FF 9F 5D |  if_ne	jmp	#LR__0900
08134                 | LR__0901
08134     01 7E 86 F1 | 	sub	_var02, #1
08138     D7 12 48 FB | 	callpa	#(@LR__0903-@LR__0902)>>2,fcache_load_ptr_
0813c                 | LR__0902
0813c     46 7F 5A F2 | 	cmps	_var02, arg01 wcz
08140     1C 00 90 ED |  if_be	jmp	#LR__0904
08144     46 7D C2 FA | 	rdbyte	_var01, arg01
08148     3F 81 C2 FA | 	rdbyte	_var03, _var02
0814c     46 81 42 FC | 	wrbyte	_var03, arg01
08150     3F 7D 42 FC | 	wrbyte	_var01, _var02
08154     01 8C 06 F1 | 	add	arg01, #1
08158     01 7E 86 F1 | 	sub	_var02, #1
0815c     DC FF 9F FD | 	jmp	#LR__0902
08160                 | LR__0903
08160                 | LR__0904
08160                 | __system___strrev_ret
08160     2D 00 64 FD | 	ret
08164                 | 
08164                 | __system___fmtpad
08164     06 CA 05 F6 | 	mov	COUNT_, #6
08168     E8 00 A0 FD | 	call	#pushregs_
0816c     46 97 02 F6 | 	mov	local01, arg01
08170     47 99 02 F6 | 	mov	local02, arg02
08174     48 9B 02 F6 | 	mov	local03, arg03
08178     4C 8D EA F8 | 	getbyte	arg01, local02, #1
0817c     16 98 46 F0 | 	shr	local02, #22
08180     03 98 0E F5 | 	and	local02, #3 wz
08184     00 9C 06 F6 | 	mov	local04, #0
08188     01 98 06 A6 |  if_e	mov	local02, #1
0818c     49 99 CA F7 | 	test	local02, arg04 wz
08190     00 76 06 A6 |  if_e	mov	result1, #0
08194     88 00 90 AD |  if_e	jmp	#LR__0913
08198     46 9B C2 F2 | 	subr	local03, arg01
0819c     01 9A 56 F2 | 	cmps	local03, #1 wc
081a0     00 76 06 C6 |  if_b	mov	result1, #0
081a4     78 00 90 CD |  if_b	jmp	#LR__0913
081a8     03 98 0E F2 | 	cmp	local02, #3 wz
081ac     18 00 90 5D |  if_ne	jmp	#LR__0910
081b0     01 92 0E F2 | 	cmp	arg04, #1 wz
081b4     6E 98 62 FD | 	wrz	local02
081b8     4C 9B 02 F1 | 	add	local03, local02
081bc     4D 9B 52 F6 | 	abs	local03, local03 wc
081c0     01 9A 46 F0 | 	shr	local03, #1
081c4     4D 9B 82 F6 | 	negc	local03, local03
081c8                 | LR__0910
081c8     01 9A 56 F2 | 	cmps	local03, #1 wc
081cc     4C 00 90 CD |  if_b	jmp	#LR__0912
081d0     4D 9F 02 F6 | 	mov	local05, local03
081d4                 | LR__0911
081d4     4B 99 02 F6 | 	mov	local02, local01
081d8     4B A1 02 F6 | 	mov	local06, local01
081dc     13 98 46 F7 | 	zerox	local02, #19
081e0     14 A0 46 F0 | 	shr	local06, #20
081e4     02 A0 66 F0 | 	shl	local06, #2
081e8     2D A1 02 F1 | 	add	local06, __methods__
081ec     50 A1 02 FB | 	rdlong	local06, local06
081f0     20 8C 06 F6 | 	mov	arg01, #32
081f4     33 9B 02 F6 | 	mov	local03, objptr
081f8     4C 67 02 F6 | 	mov	objptr, local02
081fc     2D A0 62 FD | 	call	local06
08200     4D 67 02 F6 | 	mov	objptr, local03
08204     3B A1 02 F6 | 	mov	local06, result1
08208     00 A0 56 F2 | 	cmps	local06, #0 wc
0820c     50 77 02 C6 |  if_b	mov	result1, local06
08210     0C 00 90 CD |  if_b	jmp	#LR__0913
08214     50 9D 02 F1 | 	add	local04, local06
08218     EE 9F 6E FB | 	djnz	local05, #LR__0911
0821c                 | LR__0912
0821c     4E 77 02 F6 | 	mov	result1, local04
08220                 | LR__0913
08220     E7 F0 03 F6 | 	mov	ptra, fp
08224     F2 00 A0 FD | 	call	#popregs_
08228                 | __system___fmtpad_ret
08228     2D 00 64 FD | 	ret
0822c                 | 
0822c                 | __system___uitoa
0822c     04 CA 05 F6 | 	mov	COUNT_, #4
08230     E8 00 A0 FD | 	call	#pushregs_
08234     46 97 02 F6 | 	mov	local01, arg01
08238     00 94 4E F2 | 	cmps	arg05, #0 wz
0823c     4B 95 02 F6 | 	mov	arg05, local01
08240     00 98 06 F6 | 	mov	local02, #0
08244     37 9A 06 56 |  if_ne	mov	local03, #55
08248     57 9A 06 A6 |  if_e	mov	local03, #87
0824c                 | LR__0920
0824c     48 8F 12 FD | 	qdiv	arg02, arg03
08250     19 9C 62 FD | 	getqy	local04
08254     48 8F 12 FD | 	qdiv	arg02, arg03
08258     0A 9C 16 F2 | 	cmp	local04, #10 wc
0825c     30 9C 06 C1 |  if_b	add	local04, #48
08260     4D 9D 02 31 |  if_ae	add	local04, local03
08264     4A 9D 42 FC | 	wrbyte	local04, arg05
08268     01 94 06 F1 | 	add	arg05, #1
0826c     01 98 06 F1 | 	add	local02, #1
08270     18 8E 62 FD | 	getqx	arg02
08274     00 8E 0E F2 | 	cmp	arg02, #0 wz
08278     D0 FF 9F 5D |  if_ne	jmp	#LR__0920
0827c     49 99 12 F2 | 	cmp	local02, arg04 wc
08280     C8 FF 9F CD |  if_b	jmp	#LR__0920
08284     4A 01 48 FC | 	wrbyte	#0, arg05
08288     4B 8D 02 F6 | 	mov	arg01, local01
0828c     88 FE BF FD | 	call	#__system___strrev
08290     4C 77 02 F6 | 	mov	result1, local02
08294     E7 F0 03 F6 | 	mov	ptra, fp
08298     F2 00 A0 FD | 	call	#popregs_
0829c                 | __system___uitoa_ret
0829c     2D 00 64 FD | 	ret
082a0                 | 
082a0                 | __system___getiolock_0103
082a0     01 CA 05 F6 | 	mov	COUNT_, #1
082a4     E8 00 A0 FD | 	call	#pushregs_
082a8     4C FE BF FD | 	call	#__system____getftab
082ac     3B 97 0A F6 | 	mov	local01, result1 wz
082b0     10 00 90 AD |  if_e	jmp	#LR__0930
082b4     08 96 06 F1 | 	add	local01, #8
082b8     4B 77 0A FB | 	rdlong	result1, local01 wz
082bc     08 96 86 F1 | 	sub	local01, #8
082c0     0C 00 90 5D |  if_ne	jmp	#LR__0931
082c4                 | LR__0930
082c4     34 77 02 F6 | 	mov	result1, ptr___system__dat__
082c8     24 76 06 F1 | 	add	result1, #36
082cc     08 00 90 FD | 	jmp	#LR__0932
082d0                 | LR__0931
082d0     0C 96 06 F1 | 	add	local01, #12
082d4     4B 77 02 F6 | 	mov	result1, local01
082d8                 | LR__0932
082d8     E7 F0 03 F6 | 	mov	ptra, fp
082dc     F2 00 A0 FD | 	call	#popregs_
082e0                 | __system___getiolock_0103_ret
082e0     2D 00 64 FD | 	ret
082e4                 | 
082e4                 | __system___gettxfunc
082e4     01 CA 05 F6 | 	mov	COUNT_, #1
082e8     E8 00 A0 FD | 	call	#pushregs_
082ec     08 FE BF FD | 	call	#__system____getftab
082f0     3B 97 0A F6 | 	mov	local01, result1 wz
082f4     10 00 90 AD |  if_e	jmp	#LR__0940
082f8     08 96 06 F1 | 	add	local01, #8
082fc     4B 8F 0A FB | 	rdlong	arg02, local01 wz
08300     08 96 86 F1 | 	sub	local01, #8
08304     08 00 90 5D |  if_ne	jmp	#LR__0941
08308                 | LR__0940
08308     00 76 06 F6 | 	mov	result1, #0
0830c     08 00 90 FD | 	jmp	#LR__0942
08310                 | LR__0941
08310     54 96 26 F4 | 	bith	local01, #84
08314     4B 77 02 F6 | 	mov	result1, local01
08318                 | LR__0942
08318     E7 F0 03 F6 | 	mov	ptra, fp
0831c     F2 00 A0 FD | 	call	#popregs_
08320                 | __system___gettxfunc_ret
08320     2D 00 64 FD | 	ret
08324                 | 
08324                 | __system___rxtxioctl_0153
08324     00 8F 0E F2 | 	cmp	arg02, #256 wz
08328     0C 00 90 AD |  if_e	jmp	#LR__0950
0832c     01 8F 0E F2 | 	cmp	arg02, #257 wz
08330     1C 00 90 AD |  if_e	jmp	#LR__0951
08334     30 00 90 FD | 	jmp	#LR__0952
08338                 | LR__0950
08338     08 68 06 F1 | 	add	ptr___system__dat__, #8
0833c     34 77 02 FB | 	rdlong	result1, ptr___system__dat__
08340     08 68 86 F1 | 	sub	ptr___system__dat__, #8
08344     48 77 62 FC | 	wrlong	result1, arg03
08348     00 76 06 F6 | 	mov	result1, #0
0834c     28 00 90 FD | 	jmp	#LR__0953
08350                 | LR__0951
08350     48 8D 02 FB | 	rdlong	arg01, arg03
08354     08 68 06 F1 | 	add	ptr___system__dat__, #8
08358     34 8D 62 FC | 	wrlong	arg01, ptr___system__dat__
0835c     08 68 86 F1 | 	sub	ptr___system__dat__, #8
08360     00 76 06 F6 | 	mov	result1, #0
08364     10 00 90 FD | 	jmp	#LR__0953
08368                 | LR__0952
08368     20 68 06 F1 | 	add	ptr___system__dat__, #32
0836c     34 15 68 FC | 	wrlong	#10, ptr___system__dat__
08370     20 68 86 F1 | 	sub	ptr___system__dat__, #32
08374     01 76 66 F6 | 	neg	result1, #1
08378                 | LR__0953
08378                 | __system___rxtxioctl_0153_ret
08378     2D 00 64 FD | 	ret
0837c                 | 
0837c                 | __system____dummy_flush_0154
0837c     00 76 06 F6 | 	mov	result1, #0
08380                 | __system____dummy_flush_0154_ret
08380     2D 00 64 FD | 	ret
08384                 | 
08384                 | __system____default_filbuf
08384     05 CA 05 F6 | 	mov	COUNT_, #5
08388     E8 00 A0 FD | 	call	#pushregs_
0838c     46 97 02 F6 | 	mov	local01, arg01
08390     4B 99 02 FB | 	rdlong	local02, local01
08394     08 98 06 F1 | 	add	local02, #8
08398     4C 77 0A FB | 	rdlong	result1, local02 wz
0839c     08 98 86 F1 | 	sub	local02, #8
083a0     20 00 90 5D |  if_ne	jmp	#LR__0960
083a4     10 98 06 F1 | 	add	local02, #16
083a8     4C 77 02 F6 | 	mov	result1, local02
083ac     04 98 86 F1 | 	sub	local02, #4
083b0     4C 77 62 FC | 	wrlong	result1, local02
083b4     04 98 86 F1 | 	sub	local02, #4
083b8     02 00 80 FF 
083bc     4C 01 68 FC | 	wrlong	##1024, local02
083c0     08 98 86 F1 | 	sub	local02, #8
083c4                 | LR__0960
083c4     14 96 06 F1 | 	add	local01, #20
083c8     4B 9B 02 FB | 	rdlong	local03, local01
083cc     4D 9D 02 F6 | 	mov	local04, local03
083d0     14 96 86 F1 | 	sub	local01, #20
083d4     13 9C 46 F7 | 	zerox	local04, #19
083d8     14 9A 46 F0 | 	shr	local03, #20
083dc     02 9A 66 F0 | 	shl	local03, #2
083e0     2D 9B 02 F1 | 	add	local03, __methods__
083e4     4D 9B 02 FB | 	rdlong	local03, local03
083e8     4B 8D 02 F6 | 	mov	arg01, local01
083ec     0C 98 06 F1 | 	add	local02, #12
083f0     4C 8F 02 FB | 	rdlong	arg02, local02
083f4     04 98 86 F1 | 	sub	local02, #4
083f8     4C 91 02 FB | 	rdlong	arg03, local02
083fc     08 98 86 F1 | 	sub	local02, #8
08400     33 9F 02 F6 | 	mov	local05, objptr
08404     4E 67 02 F6 | 	mov	objptr, local04
08408     2D 9A 62 FD | 	call	local03
0840c     4F 67 02 F6 | 	mov	objptr, local05
08410     3B 9F 02 F6 | 	mov	local05, result1
08414     00 9E 56 F2 | 	cmps	local05, #0 wc
08418     01 76 66 C6 |  if_b	neg	result1, #1
0841c     28 00 90 CD |  if_b	jmp	#LR__0961
08420     4C 9F 62 FC | 	wrlong	local05, local02
08424     0C 98 06 F1 | 	add	local02, #12
08428     4C 9B 02 FB | 	rdlong	local03, local02
0842c     08 98 86 F1 | 	sub	local02, #8
08430     4C 9B 62 FC | 	wrlong	local03, local02
08434     08 96 06 F1 | 	add	local01, #8
08438     4B 9D 02 FB | 	rdlong	local04, local01
0843c     04 9C 46 F5 | 	or	local04, #4
08440     4B 9D 62 FC | 	wrlong	local04, local01
08444     4F 77 02 F6 | 	mov	result1, local05
08448                 | LR__0961
08448     E7 F0 03 F6 | 	mov	ptra, fp
0844c     F2 00 A0 FD | 	call	#popregs_
08450                 | __system____default_filbuf_ret
08450     2D 00 64 FD | 	ret
08454                 | 
08454                 | __system___struct__s_vfs_file_t_putchar_
08454     04 CA 05 F6 | 	mov	COUNT_, #4
08458     E8 00 A0 FD | 	call	#pushregs_
0845c     1C 66 06 F1 | 	add	objptr, #28
08460     33 97 0A FB | 	rdlong	local01, objptr wz
08464     1C 66 86 F1 | 	sub	objptr, #28
08468     00 76 06 A6 |  if_e	mov	result1, #0
0846c     48 00 90 AD |  if_e	jmp	#LR__0970
08470     1C 66 06 F1 | 	add	objptr, #28
08474     33 99 02 FB | 	rdlong	local02, objptr
08478     4C 9B 02 F6 | 	mov	local03, local02
0847c     1C 66 86 F1 | 	sub	objptr, #28
08480     13 9A 46 F7 | 	zerox	local03, #19
08484     14 98 46 F0 | 	shr	local02, #20
08488     02 98 66 F0 | 	shl	local02, #2
0848c     2D 99 02 F1 | 	add	local02, __methods__
08490     4C 99 02 FB | 	rdlong	local02, local02
08494     33 8F 02 F6 | 	mov	arg02, objptr
08498     33 9D 02 F6 | 	mov	local04, objptr
0849c     4D 67 02 F6 | 	mov	objptr, local03
084a0     2D 98 62 FD | 	call	local02
084a4     4E 67 02 F6 | 	mov	objptr, local04
084a8                 | '     return (i < 0) ? 0 : 1;
084a8     00 76 56 F2 | 	cmps	result1, #0 wc
084ac     00 96 06 C6 |  if_b	mov	local01, #0
084b0     01 96 06 36 |  if_ae	mov	local01, #1
084b4     4B 77 02 F6 | 	mov	result1, local01
084b8                 | LR__0970
084b8     E7 F0 03 F6 | 	mov	ptra, fp
084bc     F2 00 A0 FD | 	call	#popregs_
084c0                 | __system___struct__s_vfs_file_t_putchar__ret
084c0     2D 00 64 FD | 	ret
084c4                 | 
084c4                 | __system___struct__s_vfs_file_t_getchar_
084c4     03 CA 05 F6 | 	mov	COUNT_, #3
084c8     E8 00 A0 FD | 	call	#pushregs_
084cc     20 66 06 F1 | 	add	objptr, #32
084d0     33 8D 0A FB | 	rdlong	arg01, objptr wz
084d4     20 66 86 F1 | 	sub	objptr, #32
084d8     01 76 66 A6 |  if_e	neg	result1, #1
084dc     38 00 90 AD |  if_e	jmp	#LR__0980
084e0                 | '     return getcf(__this);
084e0     20 66 06 F1 | 	add	objptr, #32
084e4     33 97 02 FB | 	rdlong	local01, objptr
084e8     4B 99 02 F6 | 	mov	local02, local01
084ec     20 66 86 F1 | 	sub	objptr, #32
084f0     13 98 46 F7 | 	zerox	local02, #19
084f4     14 96 46 F0 | 	shr	local01, #20
084f8     02 96 66 F0 | 	shl	local01, #2
084fc     2D 97 02 F1 | 	add	local01, __methods__
08500     4B 97 02 FB | 	rdlong	local01, local01
08504     33 8D 02 F6 | 	mov	arg01, objptr
08508     33 9B 02 F6 | 	mov	local03, objptr
0850c     4C 67 02 F6 | 	mov	objptr, local02
08510     2D 96 62 FD | 	call	local01
08514     4D 67 02 F6 | 	mov	objptr, local03
08518                 | LR__0980
08518     E7 F0 03 F6 | 	mov	ptra, fp
0851c     F2 00 A0 FD | 	call	#popregs_
08520                 | __system___struct__s_vfs_file_t_getchar__ret
08520     2D 00 64 FD | 	ret
08524                 | 
08524                 | __system___struct___bas_wrap_sender_tx_
08524     03 CA 05 F6 | 	mov	COUNT_, #3
08528     E8 00 A0 FD | 	call	#pushregs_
0852c     33 97 02 FB | 	rdlong	local01, objptr
08530     4B 99 02 F6 | 	mov	local02, local01
08534     13 96 46 F7 | 	zerox	local01, #19
08538     14 98 46 F0 | 	shr	local02, #20
0853c     02 98 66 F0 | 	shl	local02, #2
08540     2D 99 02 F1 | 	add	local02, __methods__
08544     4C 99 02 FB | 	rdlong	local02, local02
08548     33 9B 02 F6 | 	mov	local03, objptr
0854c     4B 67 02 F6 | 	mov	objptr, local01
08550     2D 98 62 FD | 	call	local02
08554     4D 67 02 F6 | 	mov	objptr, local03
08558     01 76 06 F6 | 	mov	result1, #1
0855c     E7 F0 03 F6 | 	mov	ptra, fp
08560     F2 00 A0 FD | 	call	#popregs_
08564                 | __system___struct___bas_wrap_sender_tx__ret
08564     2D 00 64 FD | 	ret
08568                 | 
08568                 | __system___struct___bas_wrap_sender_rx_
08568     03 CA 05 F6 | 	mov	COUNT_, #3
0856c     E8 00 A0 FD | 	call	#pushregs_
08570     04 66 06 F1 | 	add	objptr, #4
08574     33 97 02 FB | 	rdlong	local01, objptr
08578     4B 99 02 F6 | 	mov	local02, local01
0857c     04 66 86 F1 | 	sub	objptr, #4
08580     13 98 46 F7 | 	zerox	local02, #19
08584     14 96 46 F0 | 	shr	local01, #20
08588     02 96 66 F0 | 	shl	local01, #2
0858c     2D 97 02 F1 | 	add	local01, __methods__
08590     4B 97 02 FB | 	rdlong	local01, local01
08594     33 9B 02 F6 | 	mov	local03, objptr
08598     4C 67 02 F6 | 	mov	objptr, local02
0859c     2D 96 62 FD | 	call	local01
085a0     4D 67 02 F6 | 	mov	objptr, local03
085a4     E7 F0 03 F6 | 	mov	ptra, fp
085a8     F2 00 A0 FD | 	call	#popregs_
085ac                 | __system___struct___bas_wrap_sender_rx__ret
085ac     2D 00 64 FD | 	ret
085b0                 | 
085b0                 | __system___struct___bas_wrap_sender_close_
085b0     03 CA 05 F6 | 	mov	COUNT_, #3
085b4     E8 00 A0 FD | 	call	#pushregs_
085b8     08 66 06 F1 | 	add	objptr, #8
085bc     33 97 02 FB | 	rdlong	local01, objptr
085c0     4B 99 02 F6 | 	mov	local02, local01
085c4     08 66 86 F1 | 	sub	objptr, #8
085c8     13 98 46 F7 | 	zerox	local02, #19
085cc     14 96 46 F0 | 	shr	local01, #20
085d0     02 96 66 F0 | 	shl	local01, #2
085d4     2D 97 02 F1 | 	add	local01, __methods__
085d8     4B 97 02 FB | 	rdlong	local01, local01
085dc     33 9B 02 F6 | 	mov	local03, objptr
085e0     4C 67 02 F6 | 	mov	objptr, local02
085e4     2D 96 62 FD | 	call	local01
085e8     4D 67 02 F6 | 	mov	objptr, local03
085ec     E7 F0 03 F6 | 	mov	ptra, fp
085f0     F2 00 A0 FD | 	call	#popregs_
085f4                 | __system___struct___bas_wrap_sender_close__ret
085f4     2D 00 64 FD | 	ret
085f8                 | 
085f8                 | LR__0990
085f8     20 21 21 21 
085fc     20 63 6F 72 
08600     72 75 70 74 
08604     65 64 20 68 
08608     65 61 70 3F 
0860c     3F 3F 20 21 
08610     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
08613     00          | 	byte	0
08614                 | LR__0991
08614     20 21 21 21 
08618     20 6F 75 74 
0861c     20 6F 66 20 
08620     68 65 61 70 
08624     20 6D 65 6D 
08628     6F 72 79 20 
0862c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
08630     00          | 	byte	0
08631                 | LR__0992
08631     20 21 21 21 
08635     20 63 6F 72 
08639     72 75 70 74 
0863d     65 64 20 68 
08641     65 61 70 20 
08645     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
08649     00          | 	byte	0
0864a     00 00       | 	alignl
0864c                 | _dat_
0864c     00 00 00 00 
08650     00 00 00 00 
08654     00 00 00 00 
08658     00 00 00 00 | 	byte	$00[16]
0865c     61 41 17 0E 
08660     62 42 00 00 
08664     63 43 19 10 
08668     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
0866c     65 45 18 0F 
08670     66 46 00 00 
08674     67 47 00 00 
08678     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
0867c     69 49 00 00 
08680     6A 4A 00 00 
08684     6B 4B 00 00 
08688     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
0868c     6D 4D 00 00 
08690     6E 4E 1A 11 
08694     6F 4F 1E 15 
08698     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
0869c     71 51 00 00 
086a0     72 52 00 00 
086a4     73 53 1B 12 
086a8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
086ac     75 55 00 00 
086b0     76 56 00 00 
086b4     77 57 00 00 
086b8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
086bc     79 59 00 00 
086c0     7A 5A 1D 14 
086c4     31 21 04 00 
086c8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
086cc     33 23 06 00 
086d0     34 24 07 00 
086d4     35 25 08 00 
086d8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
086dc     37 26 0A 00 
086e0     38 2A 0B 00 
086e4     39 28 0C 00 
086e8     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
086ec     0D 0D 0A 00 
086f0     9B 9B 00 00 
086f4     88 88 00 00 
086f8     89 89 00 00 | 	byte	$0d, $0d, $0a, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
086fc     20 20 00 00 
08700     2D 5F 00 00 
08704     3D 2B 00 00 
08708     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
0870c     5D 7D 00 00 
08710     5C 7C 00 00 
08714     23 7E 00 00 
08718     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
0871c     27 22 00 00 
08720     60 7E 03 00 
08724     2C 3C 00 00 
08728     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
0872c     2F 3F 00 00 
08730     B9 B9 00 00 
08734     BA 00 00 00 
08738     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
0873c     BC 00 00 00 
08740     BD 00 00 00 
08744     BE 00 00 00 
08748     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
0874c     C0 00 00 00 
08750     C1 00 00 00 
08754     C2 00 00 00 
08758     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
0875c     C4 00 00 00 
08760     C5 00 00 00 
08764     C6 00 00 00 
08768     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
0876c     C8 00 00 00 
08770     C9 00 00 00 
08774     CA 00 00 00 
08778     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
0877c     7F 7F 00 00 
08780     CC 00 00 00 
08784     CD 00 00 00 
08788     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
0878c     CF 00 00 00 
08790     D0 00 00 00 
08794     D1 00 00 00 
08798     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
0879c     2F 2F 00 00 
087a0     2A 2A 00 00 
087a4     2D 2D 00 00 
087a8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
087ac     0D 0D 00 00 
087b0     31 31 00 00 
087b4     32 32 00 00 
087b8     33 33 00 00 | 	byte	$0d, $0d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
087bc     34 34 00 00 
087c0     35 35 00 00 
087c4     36 36 00 00 
087c8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
087cc     38 38 00 00 
087d0     39 39 00 00 
087d4     30 30 00 00 
087d8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
087dc     5C 7C 00 00 
087e0     00 00 00 00 
087e4     00 00 00 00 
087e8     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
087ec     00 00 00 00 
      ...             
08844     00 00 00 00 
08848     00 00 00 00 | 	byte	$00[96]
0884c                 | 	alignl
0884c                 | _hg010b_spin2_dat_
0884c                 | 
0884c     00 00 00 00 
08850     00 00 00 00 
08854     00 00 00 00 
08858     00 00 00 00 
0885c     00 00 00    | vga_font       file "vgafont.def"
0885f     7E 81 A5 81 
08863     81 BD 99 81 
08867     81 7E 00 00 
0886b     00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
0886f     7E FF DB FF 
08873     FF C3 E7 FF 
08877     FF 7E 00 00 
0887b     00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
0887f     00 36 7F 7F 
08883     7F 7F 3E 1C 
08887     08 00 00 00 
0888b     00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
0888f     00 08 1C 3E 
08893     7F 3E 1C 08 
08897     00 00 00 00 
0889b     00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
0889f     18 3C 3C E7 
088a3     E7 E7 18 18 
088a7     3C 00 00 00 
088ab     00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
088af     18 3C 7E FF 
088b3     FF 7E 18 18 
088b7     3C 00 00 00 
088bb     00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
088bf     00 00 00 18 
088c3     3C 3C 18 00 
088c7     00 00 00 00 
088cb     00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
088cf     FF FF FF E7 
088d3     C3 C3 E7 FF 
088d7     FF FF FF FF 
088db     FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
088df     00 00 3C 66 
088e3     42 42 66 3C 
088e7     00 00 00 00 
088eb     00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
088ef     FF FF C3 99 
088f3     BD BD 99 C3 
088f7     FF FF FF FF 
088fb     FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
088ff     78 70 58 4C 
08903     1E 33 33 33 
08907     33 1E 00 00 
0890b     00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
0890f     3C 66 66 66 
08913     66 3C 18 7E 
08917     18 18 00 00 
0891b     00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
0891f     FC CC FC 0C 
08923     0C 0C 0C 0E 
08927     0F 07 00 00 
0892b     00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
0892f     FE C6 FE C6 
08933     C6 C6 C6 E6 
08937     E7 67 03 00 
0893b     00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
0893f     18 18 DB 3C 
08943     E7 3C DB 18 
08947     18 00 00 00 
0894b     00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
0894f     03 07 0F 1F 
08953     7F 1F 0F 07 
08957     03 01 00 00 
0895b     00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
0895f     60 70 78 7C 
08963     7F 7C 78 70 
08967     60 40 00 00 
0896b     00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
0896f     18 3C 7E 18 
08973     18 18 7E 3C 
08977     18 00 00 00 
0897b     00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
0897f     66 66 66 66 
08983     66 66 66    | 	byte	$66[7]
08986     00 66 66 00 
0898a     00 00 00 00 
0898e     00 FE DB DB 
08992     DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
08996     D8 D8 D8 00 
0899a     00 00 00 3E 
0899e     63 06 1C 36 
089a2     63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
089a6     30 63 3E 00 
089aa     00 00 00 00 
089ae     00 00 00 00 
089b2     00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
089b6     7F 7F 7F 00 
089ba     00 00 00 00 
089be     00 18 3C 7E 
089c2     18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
089c6     3C 18 7E 00 
089ca     00 00 00 00 
089ce     00 18 3C 7E 
089d2     18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
089d6     18 18 18 00 
089da     00 00 00 00 
089de     00 18 18 18 
089e2     18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
089e6     7E 3C 18 00 
089ea     00 00 00 00 
089ee     00 00 00 18 
089f2     30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
089f6     00 00 00 00 
089fa     00 00 00 00 
089fe     00 00 00    | 	byte	$00[11]
08a01     0C 06 7F 06 
08a05     0C 00 00 00 
08a09     00 00 00 00 
08a0d     00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a11     00 03 03 03 
08a15     7F 00 00 00 
08a19     00 00 00 00 
08a1d     00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a21     14 36 7F 36 
08a25     14 00 00 00 
08a29     00 00 00 00 
08a2d     00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
08a31     1C 1C 3E 3E 
08a35     7F 7F 00 00 
08a39     00 00 00 00 
08a3d     00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
08a41     7F 3E 3E 1C 
08a45     1C 08 00 00 
08a49     00 00 00 00 
08a4d     00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a51     00 00 00 00 
08a55     00 00 00 00 
08a59     00 00 00 00 
08a5d     00 00       | 	byte	$00[14]
08a5f     18 3C 3C 3C 
08a63     18 18 18 00 
08a67     18 18 00 00 
08a6b     00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
08a6f     66 24 00 00 
08a73     00 00 00 00 
08a77     00 00 00 00 
08a7b     00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08a7f     00 36 36 7F 
08a83     36 36 36 7F 
08a87     36 36 00 00 
08a8b     00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
08a8f     3E 63 43 03 
08a93     3E 60 60 61 
08a97     63 3E 18 18 
08a9b     00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
08a9f     00 00 43 63 
08aa3     30 18 0C 06 
08aa7     63 61 00 00 
08aab     00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
08aaf     1C 36 36 1C 
08ab3     6E 3B 33 33 
08ab7     33 6E 00 00 
08abb     00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
08abf     0C 0C 0C 06 
08ac3     00 00 00 00 
08ac7     00 00 00 00 
08acb     00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08acf     30 18 0C 0C 
08ad3     0C 0C 0C 0C 
08ad7     18 30 00 00 
08adb     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
08adf     0C 18 30 30 
08ae3     30 30 30 30 
08ae7     18 0C 00 00 
08aeb     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
08aef     00 00 00 66 
08af3     3C FF 3C 66 
08af7     00 00 00 00 
08afb     00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
08aff     00 00 00 18 
08b03     18 7E 18 18 
08b07     00 00 00 00 
08b0b     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
08b0f     00 00 00 00 
08b13     00 00 00 00 | 	byte	$00[8]
08b17     18 18 18 0C 
08b1b     00 00 00 00 
08b1f     00 00 00 00 
08b23     00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
08b27     00 00 00 00 
08b2b     00 00 00 00 
08b2f     00 00 00 00 
08b33     00 00 00 00 | 	byte	$00[16]
08b37     18 18 00 00 
08b3b     00 00 00 00 
08b3f     00 00 40 60 
08b43     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
08b47     03 01 00 00 
08b4b     00 00 00 00 
08b4f     1C 36 63 63 
08b53     6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
08b57     36 1C 00 00 
08b5b     00 00 00 00 
08b5f     18 1C 1E 18 
08b63     18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
08b67     18 7E 00 00 
08b6b     00 00 00 00 
08b6f     3E 63 60 30 
08b73     18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
08b77     63 7F 00 00 
08b7b     00 00 00 00 
08b7f     3E 63 60 60 
08b83     3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
08b87     63 3E 00 00 
08b8b     00 00 00 00 
08b8f     30 38 3C 36 
08b93     33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
08b97     30 78 00 00 
08b9b     00 00 00 00 
08b9f     7F 03 03 03 
08ba3     3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
08ba7     63 3E 00 00 
08bab     00 00 00 00 
08baf     1C 06 03 03 
08bb3     3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
08bb7     63 3E 00 00 
08bbb     00 00 00 00 
08bbf     7F 63 60 60 
08bc3     30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
08bc7     0C 0C 00 00 
08bcb     00 00 00 00 
08bcf     3E 63 63 63 
08bd3     3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
08bd7     63 3E 00 00 
08bdb     00 00 00 00 
08bdf     3E 63 63 63 
08be3     7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
08be7     30 1E 00 00 
08beb     00 00 00 00 
08bef     00 00 00 18 
08bf3     18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
08bf7     18 18 00 00 
08bfb     00 00 00 00 
08bff     00 00 00 18 
08c03     18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
08c07     18 18 0C 00 
08c0b     00 00 00 00 
08c0f     00 60 30 18 
08c13     0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
08c17     30 60 00 00 
08c1b     00 00 00 00 
08c1f     00 00 00 7E 
08c23     00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
08c27     00 00 00 00 
08c2b     00 00 00 00 
08c2f     00          | 	byte	$00[9]
08c30     06 0C 18 30 
08c34     60 30 18 0C 
08c38     06 00 00 00 
08c3c     00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
08c40     63 63 30 18 
08c44     18 18 00 18 
08c48     18 00 00 00 
08c4c     00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
08c50     3E 63 63 7B 
08c54     7B 7B 3B 03 
08c58     3E 00 00 00 
08c5c     00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
08c60     1C 36 63 63 
08c64     7F 63 63 63 
08c68     63 00 00 00 
08c6c     00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
08c70     66 66 66 3E 
08c74     66 66 66 66 
08c78     3F 00 00 00 
08c7c     00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
08c80     66 43 03 03 
08c84     03 03 43 66 
08c88     3C 00 00 00 
08c8c     00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
08c90     36 66 66 66 
08c94     66 66 66 36 
08c98     1F 00 00 00 
08c9c     00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
08ca0     66 46 16 1E 
08ca4     16 06 46 66 
08ca8     7F 00 00 00 
08cac     00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
08cb0     66 46 16 1E 
08cb4     16 06 06 06 
08cb8     0F 00 00 00 
08cbc     00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
08cc0     66 43 03 03 
08cc4     7B 63 63 66 
08cc8     5C 00 00 00 
08ccc     00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
08cd0     63 63 63 7F 
08cd4     63 63 63 63 
08cd8     63 00 00 00 
08cdc     00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
08ce0     18 18 18 18 
08ce4     18 18 18 18 | 	byte	$18[8]
08ce8     3C 00 00 00 
08cec     00 00 00 78 
08cf0     30 30 30 30 
08cf4     30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
08cf8     1E 00 00 00 
08cfc     00 00 00 67 
08d00     66 66 36 1E 
08d04     1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
08d08     67 00 00 00 
08d0c     00 00 00 0F 
08d10     06 06 06 06 
08d14     06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
08d18     7F 00 00 00 
08d1c     00 00 00 63 
08d20     77 7F 7F 6B 
08d24     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
08d28     63 00 00 00 
08d2c     00 00 00 63 
08d30     67 6F 7F 7B 
08d34     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
08d38     63 00 00 00 
08d3c     00 00 00 3E 
08d40     63 63 63 63 
08d44     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
08d48     3E 00 00 00 
08d4c     00 00 00 3F 
08d50     66 66 66 3E 
08d54     06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
08d58     0F 00 00 00 
08d5c     00 00 00 3E 
08d60     63 63 63 63 
08d64     63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
08d68     3E 30 70 00 
08d6c     00 00 00 3F 
08d70     66 66 66 3E 
08d74     36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
08d78     67 00 00 00 
08d7c     00 00 00 3E 
08d80     63 63 06 1C 
08d84     30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
08d88     3E 00 00 00 
08d8c     00 00 00 7E 
08d90     7E 5A 18 18 
08d94     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
08d98     3C 00 00 00 
08d9c     00 00 00 63 
08da0     63 63 63 63 
08da4     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
08da8     3E 00 00 00 
08dac     00 00 00 63 
08db0     63 63 63 63 
08db4     63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
08db8     08 00 00 00 
08dbc     00 00 00 63 
08dc0     63 63 63 6B 
08dc4     6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
08dc8     36 00 00 00 
08dcc     00 00 00 63 
08dd0     63 36 3E 1C 
08dd4     1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
08dd8     63 00 00 00 
08ddc     00 00 00 66 
08de0     66 66 66 3C 
08de4     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
08de8     3C 00 00 00 
08dec     00 00 00 7F 
08df0     63 61 30 18 
08df4     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
08df8     7F 00 00 00 
08dfc     00 00 00 3C 
08e00     0C 0C 0C 0C 
08e04     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
08e08     3C 00 00 00 
08e0c     00 00 00 00 
08e10     01 03 07 0E 
08e14     1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
08e18     40 00 00 00 
08e1c     00 00 00 3C 
08e20     30 30 30 30 
08e24     30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
08e28     3C 00 00 00 
08e2c     1C 36 00 00 
08e30     00 00 00 00 
08e34     00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e38     00 00 00 00 
08e3c     00 00 00 00 
08e40     00 00 00 00 
08e44     00 00 00 00 
08e48     00          | 	byte	$00[17]
08e49     FF 00 00 0C 
08e4d     18 00 00 00 
08e51     00 00 00 00 
08e55     00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e59     00 00 00 00 
08e5d     00 00 00 00 
08e61     00          | 	byte	$00[9]
08e62     1E 30 3E 33 
08e66     33 33 6E 00 
08e6a     00 00 00 00 
08e6e     00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
08e72     1E 36 66 66 
08e76     66 66 3E 00 
08e7a     00 00 00 00 
08e7e     00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
08e82     3E 63 03 03 
08e86     03 63 3E 00 
08e8a     00 00 00 00 
08e8e     00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
08e92     3C 36 33 33 
08e96     33 33 6E 00 
08e9a     00 00 00 00 
08e9e     00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ea2     3E 63 7F 03 
08ea6     03 63 3E 00 
08eaa     00 00 00 00 
08eae     00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
08eb2     0C 1E 0C 0C 
08eb6     0C 0C 1E 00 
08eba     00 00 00 00 
08ebe     00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
08ec2     6E 33 33 33 
08ec6     33 33 3E 30 
08eca     33 1E 00 00 
08ece     00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
08ed2     36 6E 66 66 
08ed6     66 66 67 00 
08eda     00 00 00 00 
08ede     00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
08ee2     1C 18 18 18 
08ee6     18 18 3C 00 
08eea     00 00 00 00 
08eee     00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
08ef2     70 60 60 60 
08ef6     60 60 60 66 
08efa     66 3C 00 00 
08efe     00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
08f02     66 36 1E 1E 
08f06     36 66 67 00 
08f0a     00 00 00 00 
08f0e     00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
08f12     18 18 18 18 
08f16     18 18       | 	byte	$18[6]
08f18     3C 00 00 00 
08f1c     00 00 00 00 
08f20     00 00 37 7F 
08f24     6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
08f28     63 00 00 00 
08f2c     00 00 00 00 
08f30     00 00 3B 66 
08f34     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
08f38     66 00 00 00 
08f3c     00 00 00 00 
08f40     00 00 3E 63 
08f44     63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
08f48     3E 00 00 00 
08f4c     00 00 00 00 
08f50     00 00 3B 66 
08f54     66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
08f58     3E 06 06 0F 
08f5c     00 00 00 00 
08f60     00 00 6E 33 
08f64     33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
08f68     3E 30 30 78 
08f6c     00 00 00 00 
08f70     00 00 3B 6E 
08f74     66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
08f78     0F 00 00 00 
08f7c     00 00 00 00 
08f80     00 00 3E 63 
08f84     06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
08f88     3E 00 00 00 
08f8c     00 00 00 08 
08f90     0C 0C 3F 0C 
08f94     0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
08f98     38 00 00 00 
08f9c     00 00 00 00 
08fa0     00 00 33 33 
08fa4     33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
08fa8     6E 00 00 00 
08fac     00 00 00 00 
08fb0     00 00 63 63 
08fb4     63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
08fb8     1C 00 00 00 
08fbc     00 00 00 00 
08fc0     00 00 63 63 
08fc4     6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
08fc8     36 00 00 00 
08fcc     00 00 00 00 
08fd0     00 00 63 36 
08fd4     1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
08fd8     63 00 00 00 
08fdc     00 00 00 00 
08fe0     00 00 63 63 
08fe4     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
08fe8     7E 60 30 1F 
08fec     00 00 00 00 
08ff0     00 00 7F 33 
08ff4     18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
08ff8     7F 00 00 00 
08ffc     00 00 00 70 
09000     18 18 18 0E 
09004     18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
09008     70 00 00 00 
0900c     00 00 00 18 
09010     18 18 18 18 
09014     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
09018     18 00 00 00 
0901c     00 00 00 0E 
09020     18 18 18 70 
09024     18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
09028     0E 00 00 00 
0902c     6E 3B 00 00 
09030     00 00 00 00 
09034     00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09038     00 00 00 00 
0903c     00 00 00 00 
09040     00 00       | 	byte	$00[10]
09042     08 1C 36 63 
09046     63 63 7F 00 
0904a     00 00 00 00 
0904e     00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
09052     03 03 03 03 
09056     43 66 3C 18 
0905a     30 1E 00 00 
0905e     00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
09062     33 33 33 33 
09066     33 33       | 	byte	$33[6]
09068     6E 00 00 00 
0906c     00 00 60 30 
09070     18 00 3E 63 
09074     7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
09078     3E 00 00 00 
0907c     00 00 08 1C 
09080     36 00 1E 30 
09084     3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
09088     6E 00 00 00 
0908c     00 00 00 00 
09090     33 00 1E 30 
09094     3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
09098     6E 00 00 00 
0909c     00 00 1C 36 
090a0     1C 00 33 33 
090a4     33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
090a8     6E 00 00 00 
090ac     00 00 60 30 
090b0     18 00 3E 63 
090b4     03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
090b8     3E 00 00 00 
090bc     00 00 00 00 
090c0     00 00 3E 63 
090c4     03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
090c8     3E 18 30 1E 
090cc     00 00 00 1C 
090d0     58 78 38 18 
090d4     1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
090d8     3C 00 00 00 
090dc     00 00 00 00 
090e0     63 00 3E 63 
090e4     7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
090e8     3E 00 00 00 
090ec     66 33 00 3E 
090f0     63 63 63 63 
090f4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
090f8     3E 00 00 00 
090fc     00 00 CC 66 
09100     33 00 3E 63 
09104     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
09108     3E 00 00 00 
0910c     00 00 18 3C 
09110     66 00 1C 18 
09114     18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
09118     3C 00 00 00 
0911c     30 18 00 7F 
09120     63 61 30 18 
09124     0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
09128     7F 00 00 00 
0912c     00 63 00 08 
09130     1C 36 63 63 
09134     7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
09138     63 00 00 00 
0913c     30 18 00 3C 
09140     66 43 03 03 
09144     03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
09148     3C 00 00 00 
0914c     30 18 00 7F 
09150     66 46 16 1E 
09154     16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
09158     7F 00 00 00 
0915c     0C 06 00 0F 
09160     06 06 06 06 
09164     06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
09168     7F 00 00 00 
0916c     30 18 00 1C 
09170     18 18 18 18 
09174     18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
09178     3C 00 00 00 
0917c     00 00 08 1C 
09180     36 00 3E 63 
09184     63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
09188     3E 00 00 00 
0918c     00 00 00 00 
09190     63 00 3E 63 
09194     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
09198     3E 00 00 00 
0919c     00 00 00 6F 
091a0     46 26 06 06 
091a4     06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
091a8     7F 00 00 00 
091ac     00 00 00 6E 
091b0     4C 2C 0C 0C 
091b4     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
091b8     1E 00 00 00 
091bc     30 18 00 3E 
091c0     63 63 06 1C 
091c4     30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
091c8     3E 00 00 00 
091cc     00 00 60 30 
091d0     18 00 3E 63 
091d4     06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
091d8     3E 00 00 00 
091dc     00 63 00 3E 
091e0     63 63 63 63 
091e4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
091e8     3E 00 00 00 
091ec     00 63 00 63 
091f0     63 63 63 63 
091f4     63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
091f8     3E 00 00 00 
091fc     6C 38 00 7E 
09200     7E 5A 18 18 
09204     18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
09208     3C 00 00 00 
0920c     00 00 60 48 
09210     2C 0C 3F 0C 
09214     0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
09218     38 00 00 00 
0921c     00 00 00 0F 
09220     26 36 1E 0E 
09224     07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
09228     7F 00 00 00 
0922c     00 00 00 00 
09230     00 63 36 1C 
09234     1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
09238     00 00 00 00 
0923c     00 00       | 	byte	$00[6]
0923e     36 1C 08 00 
09242     3E 63 03 03 
09246     03 63 3E 00 
0924a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
0924e     30 18 0C 00 
09252     1E 30 3E 33 
09256     33 33 6E 00 
0925a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0925e     60 30 18 00 
09262     1C 18 18 18 
09266     18 18 3C 00 
0926a     00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
0926e     60 30 18 00 
09272     3E 63 63 63 
09276     63 63 3E 00 
0927a     00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
0927e     30 18 0C 00 
09282     33 33 33 33 
09286     33 33 6E 00 
0928a     00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
0928e     00 08 1C 36 
09292     63 63 7F 63 
09296     63 63 63 18 
0929a     0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
0929e     00 00 00 00 
092a2     1E 30 3E 33 
092a6     33 33 6E 18 
092aa     0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
092ae     00 7F 63 61 
092b2     30 18 0C 06 
092b6     43 63 7F 00 
092ba     00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
092be     36 1C 08 00 
092c2     7F 33 18 0C 
092c6     06 63 7F 00 
092ca     00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
092ce     00 7F 66 46 
092d2     16 1E 16 06 
092d6     46 66 7F 18 
092da     0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
092de     00 00 00 00 
092e2     3E 63 7F 03 
092e6     03 63 3E 18 
092ea     0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
092ee     00 3C 66 03 
092f2     1F 03 0F 03 
092f6     03 66 3C 00 
092fa     00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
092fe     60 30 18 00 
09302     7F 33 18 0C 
09306     06 63 7F 00 
0930a     00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
0930e     00 3C 66 43 
09312     03 03 03 03 
09316     43 66 3C 00 
0931a     00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
0931e     00 00 00 00 
09322     3E 63 06 1C 
09326     30 63 3E 18 
0932a     30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
0932e     00 00 00 00 
09332     00 00       | 	byte	$00[6]
09334     6C 36 1B 36 
09338     6C 00 00 00 
0933c     00 00 00 00 
09340     00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09344     1B 36 6C 36 
09348     1B 00 00 00 
0934c     88 22 88 22 
09350     88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
09354     88 22 88 22 
09358     88 22 88 22 
0935c     AA 55 AA 55 
09360     AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
09364     AA 55 AA 55 
09368     AA 55 AA 55 
0936c     BB EE BB EE 
09370     BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
09374     BB EE BB EE 
09378     BB EE BB EE 
0937c     18 18 18 18 
09380     18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
09384     18 18 18 18 
09388     18 18 18 18 
0938c     18 18 18 18 
09390     18 18 18    | 	byte	$18[15]
09393     1F 18 18 18 
09397     18 18 18 18 
0939b     18 30 18 00 
0939f     08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
093a3     63 7F 63 63 
093a7     63 63 00 00 
093ab     00 1C 36 00 
093af     08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
093b3     63 7F 63 63 
093b7     63 63 00 00 
093bb     00 36 1C 00 
093bf     7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
093c3     1E 16 06 46 
093c7     66 7F 00 00 
093cb     00 00 00 00 
093cf     3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
093d3     1C 30 60 63 
093d7     63 3E 18 30 
093db     1E 6C 6C 6C 
093df     6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
093e3     6F 6C 6C 6C 
093e7     6C 6C 6C 6C 
093eb     6C 6C 6C 6C 
093ef     6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
093f3     6C 6C 6C 6C 
093f7     6C 6C 6C 6C 
093fb     6C          | 	byte	$6c[9]
093fc     00 00 00 00 
09400     00          | 	byte	$00[5]
09401     7F 60 6F 6C 
09405     6C 6C 6C 6C 
09409     6C 6C 6C 6C 
0940d     6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
09411     6F 60 7F 00 
09415     00 00 00 00 
09419     00 00 00 18 
0941d     18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
09421     61 30 18 0C 
09425     06 43 63 7F 
09429     00 00 00 00 
0942d     00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
09431     00 7F 33 18 
09435     0C 06 63 7F 
09439     00 00 00 00 
0943d     00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
09441     00 00 1F 18 
09445     18 18 18 18 
09449     18 18 18 18 
0944d     18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
09451     18 18 F8 00 
09455     00 00 00 00 
09459     00 00 00 18 
0945d     18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
09461     18 18 FF 00 
09465     00 00 00 00 
09469     00 00 00 00 
0946d     00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09471     00 00 FF 18 
09475     18 18 18 18 
09479     18 18 18 18 
0947d     18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
09481     18 18 F8 18 
09485     18 18 18 18 
09489     18 18 18 00 
0948d     00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
09491     00 00 FF 00 
09495     00 00 00 00 
09499     00 00 00 18 
0949d     18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
094a1     18 18 FF 18 
094a5     18 18 18 18 
094a9     18 18 18 63 
094ad     3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
094b1     36 63 63 7F 
094b5     63 63 63 63 
094b9     00 00 00 00 
094bd     00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
094c1     00 1E 30 3E 
094c5     33 33 33 6E 
094c9     00 00 00 6C 
094cd     6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
094d1     EC 0C FC 00 
094d5     00 00 00 00 
094d9     00 00 00 00 
094dd     00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
094e1     FC 0C EC 6C 
094e5     6C 6C 6C 6C 
094e9     6C 6C 6C 6C 
094ed     6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
094f1     EF 00 FF 00 
094f5     00 00 00 00 
094f9     00 00 00 00 
094fd     00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09501     FF 00 EF 6C 
09505     6C 6C 6C 6C 
09509     6C 6C 6C 6C 
0950d     6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
09511     EC 0C EC 6C 
09515     6C 6C 6C 6C 
09519     6C 6C 6C 00 
0951d     00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
09521     FF 00 FF 00 
09525     00 00 00 00 
09529     00 00 00 6C 
0952d     6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
09531     EF 00 EF 6C 
09535     6C 6C 6C 6C 
09539     6C 6C 6C 00 
0953d     00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
09541     63 3E 63 63 
09545     63 63 3E 63 
09549     00 00 00 00 
0954d     00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
09551     30 3C 36 33 
09555     33 33 33 6E 
09559     00 00 00 00 
0955d     00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
09561     66 66 6F 66 
09565     66 66 36 1F 
09569     00 00 00 36 
0956d     1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
09571     66 66 66 66 
09575     66 66       | 	byte	$66[6]
09577     36 1F 00 00 
0957b     00 00 63 00 
0957f     7F 66 46 16 
09583     1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
09587     66 7F 00 00 
0958b     00 6C 38 00 
0958f     38 30 30 3C 
09593     36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
09597     33 6E 00 00 
0959b     00 36 1C 00 
0959f     63 67 6F 7F 
095a3     7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
095a7     63 63 00 00 
095ab     00 30 18 00 
095af     3C 18 18 18 
095b3     18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
095b7     18 3C 00 00 
095bb     00 3C 66 00 
095bf     3C 18 18 18 
095c3     18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
095c7     18 3C 00 00 
095cb     00 00 00 36 
095cf     1C 08 00 3E 
095d3     63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
095d7     63 3E 00 00 
095db     00 18 18 18 
095df     18 18 18 18 
095e3     1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
095e7     00 00 00 00 
095eb     00 00 00 00 
095ef     00 00 00 00 | 	byte	$00[12]
095f3     F8 18 18 18 
095f7     18 18 18 18 
095fb     18 FF FF FF 
095ff     FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
09603     FF FF FF FF 
09607     FF FF FF FF 
0960b     FF          | 	byte	$ff[9]
0960c     00 00 00 00 
09610     00 00 00    | 	byte	$00[7]
09613     FF FF FF FF 
09617     FF FF FF FF 
0961b     FF          | 	byte	$ff[9]
0961c     00 00 00 7E 
09620     7E 5A 18 18 
09624     18 18 18 18 
09628     3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
0962c     1C 36 1C 63 
09630     63 63 63 63 
09634     63 63 63 63 
09638     3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0963c     FF FF FF FF 
09640     FF FF FF    | 	byte	$ff[7]
09643     00 00 00 00 
09647     00 00 00 00 
0964b     00          | 	byte	$00[9]
0964c     30 18 00 3E 
09650     63 63 63 63 
09654     63 63 63 63 
09658     3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0965c     00 00 00 1E 
09660     33 33 33 1B 
09664     33 63 63 63 
09668     33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
0966c     1C 36 00 3E 
09670     63 63 63 63 
09674     63 63 63 63 
09678     3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0967c     30 18 00 63 
09680     67 6F 7F 7B 
09684     73 63 63 63 
09688     63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
0968c     00 00 60 30 
09690     18 00 3B 66 
09694     66 66 66 66 
09698     66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
0969c     00 00 36 1C 
096a0     08 00 3B 66 
096a4     66 66 66 66 
096a8     66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
096ac     36 1C 00 3E 
096b0     63 63 06 1C 
096b4     30 60 63 63 
096b8     3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
096bc     00 00 36 1C 
096c0     08 00 3E 63 
096c4     06 1C 30 63 
096c8     3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
096cc     30 18 00 3F 
096d0     66 66 66 3E 
096d4     36 66 66 66 
096d8     6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
096dc     30 18 00 63 
096e0     63 63 63 63 
096e4     63 63 63 63 
096e8     3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
096ec     00 00 60 30 
096f0     18 00 3B 6E 
096f4     66 06 06 06 
096f8     0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
096fc     66 33 00 63 
09700     63 63 63 63 
09704     63 63 63 63 
09708     3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
0970c     00 00 60 30 
09710     18 00 63 63 
09714     63 63 63 63 
09718     7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
0971c     30 18 00 66 
09720     66 66 66 3C 
09724     18 18 18 18 
09728     3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
0972c     00 00 00 08 
09730     0C 0C 3F 0C 
09734     0C 0C 0C 6C 
09738     38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
0973c     30 18 00 00 
09740     00 00 00 00 
09744     00 00 00 00 
09748     00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0974c     00 00 00 00 
09750     00 00 00 00 | 	byte	$00[8]
09754     7F 00 00 00 
09758     00 00 00 00 
0975c     66 33 00 00 
09760     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
09764     00 00 00 00 
09768     00 00 00 00 
0976c     00 00 00 00 
09770     00 00 00 00 
09774     00 00 00 00 
09778     00          | 	byte	$00[21]
09779     0C 06 3C 36 
0977d     1C 00 00 00 
09781     00 00 00 00 
09785     00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09789     00 00 00 63 
0978d     3E 00 00 00 
09791     00 00 00 00 
09795     00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09799     00 00 00 00 
0979d     3E 63 06 1C 
097a1     36 63 63 36 
097a5     1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
097a9     00 00 00 00 
097ad     00 00 00 00 | 	byte	$00[8]
097b1     18 00 7E 00 
097b5     18 00 00 00 
097b9     00 00 00 00 
097bd     00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097c1     00 00 00 00 
097c5     00 00 00 00 | 	byte	$00[8]
097c9     18 30 1E 00 
097cd     00 00 1C 36 
097d1     36 1C 00 00 
097d5     00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
097d9     00 00 00 00 
097dd     63 00 00 00 
097e1     00 00 00 00 
097e5     00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097e9     00 00 00 18 
097ed     18 00 00 00 
097f1     00 00 00 00 
097f5     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
097f9     00 00 00 00 
097fd     00          | 	byte	$00[5]
097fe     CC 66 33 00 
09802     33 33 33 33 
09806     33 33 6E 00 
0980a     00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
0980e     00 3F 66 66 
09812     66 3E 36 66 
09816     66 66 6F 00 
0981a     00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
0981e     36 1C 08 00 
09822     3B 6E 66 06 
09826     06 06 0F 00 
0982a     00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
0982e     00 00 00 7E 
09832     7E 7E 7E 7E 
09836     7E 7E 00 00 
0983a     00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
0983e     00 00 00 00 
09842     00 00 00 00 
09846     00 00 00 00 
0984a     00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0984c     00 00 00 00 
      ...             
0987c     00 00 00 00 
09880     00 00 00    | st_font        file "st4font.def"
09883     FF FF 00 00 
09887     00 00 00 00 
0988b     00 18 18 18 
0988f     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
09893     18 18 18 18 
09897     18 18 18 18 
0989b     18          | 	byte	$18[9]
0989c     00 00 00 00 
098a0     00 00 00    | 	byte	$00[7]
098a3     FF FF 18 18 
098a7     18 18 18 18 
098ab     18 18 18 18 
098af     18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
098b3     FF FF 00 00 
098b7     00 00 00 00 
098bb     00 18 18 18 
098bf     18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
098c3     1F 1F 18 18 
098c7     18 18 18 18 
098cb     18 18 18 18 
098cf     18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
098d3     F8 F8 18 18 
098d7     18 18 18 18 
098db     18 00 00 00 
098df     00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
098e3     1F 1F 18 18 
098e7     18 18 18 18 
098eb     18 00 00 00 
098ef     00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
098f3     F8 F8 18 18 
098f7     18 18 18 18 
098fb     18 18 18 18 
098ff     18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
09903     1F 1F 00 00 
09907     00 00 00 00 
0990b     00 18 18 18 
0990f     18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
09913     F8 F8 00 00 
09917     00 00 00 00 
0991b     00 18 18 18 
0991f     18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
09923     FF FF 18 18 
09927     18 18 18 18 
0992b     18 00 00 18 
0992f     3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
09933     66 7E 7E 66 
09937     66 66 66 30 
0993b     18 00 00 7E 
0993f     7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
09943     3E 06 06 06 
09947     06 7E 7E 18 
0994b     0C 30 18 3C 
0994f     7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
09953     06 06 06 66 
09957     66 7E 3C 00 
0995b     00 30 18 66 
0995f     66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
09963     7E 7E 76 76 
09967     66 66 66 00 
0996b     00 30 18 7C 
0996f     7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
09973     1C 38 70 60 
09977     60 7E 3E 00 
0997b     00 30 18 7E 
0997f     7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
09983     18 0C 0C 06 
09987     06 7E 7E 00 
0998b     00 18 18 00 
0998f     7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
09993     18 18 0C 0C 
09997     06 7E 7E 00 
0999b     00 30 18 3C 
0999f     7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
099a3     66 66 66 66 
099a7     66          | 	byte	$66[5]
099a8     7E 3C 00 00 
099ac     00 00 06 06 
099b0     06 06 16 1E 
099b4     0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
099b8     7E 7E 00 00 
099bc     00 00 00 00 
099c0     00 3C 7C 60 
099c4     7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
099c8     7E 7C 30 18 
099cc     00 00 00 00 
099d0     00 3C 7E 66 
099d4     66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
099d8     7E 7C 18 0C 
099dc     00 00 30 18 
099e0     00 3C 3E 06 
099e4     06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
099e8     7E 7C 00 00 
099ec     00 00 30 18 
099f0     00 3E 7E 66 
099f4     66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
099f8     66 66 00 00 
099fc     00 00 30 18 
09a00     00 7C 7E 06 
09a04     0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
09a08     7E 3E 00 00 
09a0c     00 00 30 18 
09a10     00 7E 7E 30 
09a14     18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
09a18     7E 7E 00 00 
09a1c     00 00 18 18 
09a20     00 7E 7E 30 
09a24     18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
09a28     7E 7E 00 00 
09a2c     00 00 30 18 
09a30     00 3C 7E 66 
09a34     66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
09a38     7E 3C 00 00 
09a3c     00 00 1C 1C 
09a40     18 18 38 3C 
09a44     1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
09a48     3C 3C 00 00 
09a4c     00 00 00 00 
09a50     00 00 00 00 
09a54     00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09a58     00 00 00 00 
09a5c     00 00       | 	byte	$00[6]
09a5e     18 18 18 18 
09a62     18 18 18 18 | 	byte	$18[8]
09a66     00 00 18 18 
09a6a     00 00 00 00 
09a6e     66 66 66 66 
09a72     00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
09a76     00 00 00 00 
09a7a     00 00 00 00 
09a7e     00          | 	byte	$00[9]
09a7f     66 66 FF FF 
09a83     66 66 FF FF 
09a87     66 66 00 00 
09a8b     00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
09a8f     7C 7E 06 06 
09a93     3E 7C 60 60 
09a97     7E 3E 18 18 
09a9b     00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
09a9f     66 30 30 18 
09aa3     18 0C 0C 66 
09aa7     66 00 00 00 
09aab     00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
09aaf     66 66 3C 1C 
09ab3     1C FC FE 66 
09ab7     66 FE FC 00 
09abb     00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
09abf     18 18 18 18 
09ac3     00 00 00 00 
09ac7     00 00 00 00 
09acb     00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
09acf     18 1C 0C 0C 
09ad3     0C 0C 0C 0C 
09ad7     1C 18 30 00 
09adb     00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
09adf     18 38 30 30 
09ae3     30 30 30 30 
09ae7     38 18 0C 00 
09aeb     00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
09aef     66 66 3C 3C 
09af3     FF FF 3C 3C 
09af7     66 66 00 00 
09afb     00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
09aff     00 18 18 18 
09b03     7E 7E 18 18 
09b07     18 00 00 00 
09b0b     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
09b0f     00 00 00 00 
09b13     00 00       | 	byte	$00[6]
09b15     18 18 18 18 
09b19     18          | 	byte	$18[5]
09b1a     0C 04 00 00 
09b1e     00 00 00 00 
09b22     7E 7E 00 00 
09b26     00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
09b2a     00 00 00 00 
09b2e     00 00 00 00 
09b32     00 00 00 00 
09b36     00          | 	byte	$00[13]
09b37     18 18 18 00 
09b3b     00 00 00 60 
09b3f     60 60 30 30 
09b43     18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
09b47     06 06 06 00 
09b4b     00 00 00 3C 
09b4f     7E 66 66 66 
09b53     76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
09b57     66 7E 3C 00 
09b5b     00 00 00 18 
09b5f     18 1C 1C 18 
09b63     18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
09b67     18 7E 7E 00 
09b6b     00 00 00 3C 
09b6f     7E 66 66 30 
09b73     30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
09b77     0C 7E 7E 00 
09b7b     00 00 00 7E 
09b7f     7E 30 30 18 
09b83     18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
09b87     66 7E 3C 00 
09b8b     00 00 00 30 
09b8f     30 38 38 3C 
09b93     3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
09b97     7E 30 30 00 
09b9b     00 00 00 7E 
09b9f     7E 06 06 3E 
09ba3     7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
09ba7     66 7E 3C 00 
09bab     00 00 00 38 
09baf     3C 0E 06 06 
09bb3     3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
09bb7     66 7E 3C 00 
09bbb     00 00 00 7E 
09bbf     7E 60 60 30 
09bc3     30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
09bc7     0C 0C 0C 00 
09bcb     00 00 00 3C 
09bcf     7E 66 66 3C 
09bd3     3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
09bd7     66 7E 3C 00 
09bdb     00 00 00 3C 
09bdf     7E 66 66 7E 
09be3     7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
09be7     70 3C 1C 00 
09beb     00 00 00 00 
09bef     00 00 18 18 
09bf3     18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
09bf7     18 18 18 00 
09bfb     00 00 00 00 
09bff     00 00 18 18 
09c03     18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
09c07     18 18 18 0C 
09c0b     04 00 00 00 
09c0f     70 38 1C 0E 
09c13     07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
09c17     70 00 00 00 
09c1b     00 00 00 00 
09c1f     00 00 7E 7E 
09c23     00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
09c27     00 00 00 00 
09c2b     00 00 00 00 | 	byte	$00[8]
09c2f     0E 1C 38 70 
09c33     E0 70 38 1C 
09c37     0E 00 00 00 
09c3b     00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
09c3f     7E 66 66 30 
09c43     30 18 18 18 
09c47     00 18 18 00 
09c4b     00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
09c4f     7E 66 66 66 
09c53     66 36 06 66 
09c57     66 7E 3C 00 
09c5b     00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
09c5f     3C 7E 66 66 
09c63     66 7E 7E 66 
09c67     66 66 66 00 
09c6b     00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
09c6f     7E 66 66 7E 
09c73     3E 66 66 66 
09c77     66 7E 3E 00 
09c7b     00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
09c7f     7E 66 66 06 
09c83     06 06 06 66 
09c87     66 7E 3C 00 
09c8b     00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
09c8f     7E 66 66 66 
09c93     66 66 66 66 
09c97     66 7E 3E 00 
09c9b     00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
09c9f     7E 06 06 3E 
09ca3     3E 06 06 06 
09ca7     06 7E 7E 00 
09cab     00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
09caf     7E 06 06 3E 
09cb3     3E 06 06 06 
09cb7     06 06 06 00 
09cbb     00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
09cbf     7E 06 06 76 
09cc3     76 66 66 66 
09cc7     66 7E 3C 00 
09ccb     00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
09ccf     66 66 66 7E 
09cd3     7E 66 66 66 
09cd7     66 66 66 00 
09cdb     00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
09cdf     7E 18 18 18 
09ce3     18 18 18 18 
09ce7     18 7E 7E 00 
09ceb     00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
09cef     60 60 60 60 
09cf3     60 60 60    | 	byte	$60[7]
09cf6     66 66 7E 3C 
09cfa     00 00 00 00 
09cfe     66 66 36 36 
09d02     1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
09d06     66 66 C6 C6 
09d0a     00 00 00 00 
09d0e     06 06 06 06 
09d12     06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
09d16     06 06 7E 7E 
09d1a     00 00 00 00 
09d1e     C6 C6 EE EE 
09d22     FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
09d26     C6 C6 C6 C6 
09d2a     00 00 00 00 
09d2e     66 66 66 6E 
09d32     6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
09d36     76 66 66 66 
09d3a     00 00 00 00 
09d3e     3C 7E 66 66 
09d42     66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
09d46     66 66 7E 3C 
09d4a     00 00 00 00 
09d4e     3E 7E 66 66 
09d52     66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
09d56     06 06 06 06 
09d5a     00 00 00 00 
09d5e     3C 7E 66 66 
09d62     66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
09d66     66 56 3E 6C 
09d6a     00 00 00 00 
09d6e     3E 7E 66 66 
09d72     66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
09d76     66 66 C6 C6 
09d7a     00 00 00 00 
09d7e     7C 7E 06 06 
09d82     0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
09d86     60 60 7E 3E 
09d8a     00 00 00 00 
09d8e     7E 7E 18 18 
09d92     18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
09d96     18 18 18 18 
09d9a     00 00 00 00 
09d9e     66 66 66 66 
09da2     66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
09da6     66 66 7E 3C 
09daa     00 00 00 00 
09dae     66 66 66 66 
09db2     66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
09db6     3C 3C 18 18 
09dba     00 00 00 00 
09dbe     C6 C6 C6 C6 
09dc2     C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
09dc6     FE EE C6 82 
09dca     00 00 00 00 
09dce     66 66 66 3C 
09dd2     3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
09dd6     3C 66 66 66 
09dda     00 00 00 00 
09dde     66 66 66 66 
09de2     66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
09de6     18 18 18 18 
09dea     00 00 00 00 
09dee     7E 7E 30 30 
09df2     18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
09df6     06 06 7E 7E 
09dfa     00 00 00 00 
09dfe     3C 3C 0C 0C 
09e02     0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
09e06     0C 0C 3C 3C 
09e0a     00 00 00 00 
09e0e     06 06 0C 0C 
09e12     18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
09e16     60 60 C0 C0 
09e1a     00 00 00 00 
09e1e     3C 3C 30 30 
09e22     30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
09e26     30 30 3C 3C 
09e2a     00 00 00 00 
09e2e     18 18 3C 3C 
09e32     66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
09e36     00 00 00 00 
09e3a     00 00 00 00 
09e3e     00 00 00 00 
09e42     00 00 00 00 
09e46     00 00       | 	byte	$00[18]
09e48     FE FE 00 00 
09e4c     00 00 0C 0C 
09e50     18 18 00 00 
09e54     00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
09e58     00 00 00 00 
09e5c     00 00 00 00 
09e60     00          | 	byte	$00[9]
09e61     3C 7C 60 7C 
09e65     7E 66 66 7E 
09e69     7C 00 00 00 
09e6d     00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
09e71     3E 7E 66 66 
09e75     66 66 66 7E 
09e79     3E 00 00 00 
09e7d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
09e81     3C 3E 06 06 
09e85     06 06 06 7E 
09e89     7C 00 00 00 
09e8d     00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
09e91     7C 7E 66 66 
09e95     66 66 66 7E 
09e99     7C 00 00 00 
09e9d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
09ea1     3C 7E 66 66 
09ea5     7E 06 06 7E 
09ea9     7C 00 00 00 
09ead     00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
09eb1     18 7E 7E 18 
09eb5     18 18 18 18 
09eb9     18 00 00 00 
09ebd     00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
09ec1     7C 7E 66 66 
09ec5     66 66 7E 7C 
09ec9     60 7E 3E 00 
09ecd     00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
09ed1     3E 7E 66 66 
09ed5     66 66 66 66 
09ed9     66 00 00 00 
09edd     00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
09ee1     1C 1C 18 18 
09ee5     18 18 18 3C 
09ee9     3C 00 00 00 
09eed     00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
09ef1     30 30 30 30 
09ef5     30 30 30 30 
09ef9     30          | 	byte	$30[9]
09efa     3E 1E 00 00 
09efe     06 06 06 36 
09f02     36 1E 1E 1E 
09f06     36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
09f0a     00 00 00 00 
09f0e     1C 1C 18 18 
09f12     18 18 18 18 
09f16     18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
09f1a     00 00 00 00 
09f1e     00 00 00    | 	byte	$00[7]
09f21     6C FE FE D6 
09f25     D6 C6 C6 C6 
09f29     C6 00 00 00 
09f2d     00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
09f31     3E 7E 66 66 
09f35     66 66 66 66 
09f39     66 00 00 00 
09f3d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
09f41     3C 7E 66 66 
09f45     66 66 66 7E 
09f49     3C 00 00 00 
09f4d     00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
09f51     3E 7E 66 66 
09f55     66 66 66 7E 
09f59     3E 06 06 00 
09f5d     00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
09f61     7C 7E 66 66 
09f65     66 66 66 7E 
09f69     7C 60 60 00 
09f6d     00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
09f71     3E 7E 66 06 
09f75     06 06 06 06 
09f79     06 00 00 00 
09f7d     00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
09f81     7C 7E 06 0E 
09f85     3C 70 60 7E 
09f89     3E 00 00 00 
09f8d     00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
09f91     7E 7E 18 18 
09f95     18 18 18 78 
09f99     70 00 00 00 
09f9d     00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
09fa1     66 66 66 66 
09fa5     66 66 66    | 	byte	$66[7]
09fa8     7E 7C 00 00 
09fac     00 00 00 00 
09fb0     00 66 66 66 
09fb4     66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
09fb8     18 18 00 00 
09fbc     00 00 00 00 
09fc0     00 C6 C6 D6 
09fc4     D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
09fc8     C6 82 00 00 
09fcc     00 00 00 00 
09fd0     00 66 66 3C 
09fd4     3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
09fd8     66 66 00 00 
09fdc     00 00 00 00 
09fe0     00 66 66 66 
09fe4     66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
09fe8     7C 60 7E 3E 
09fec     00 00 00 00 
09ff0     00 7E 7E 30 
09ff4     18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
09ff8     7E 7E 00 00 
09ffc     00 00 30 18 
0a000     18 18 18 0C 
0a004     0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
0a008     18 30 00 00 
0a00c     00 00 18 18 
0a010     18 18 18 18 
0a014     18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
0a018     18 18 00 00 
0a01c     00 00 0C 18 
0a020     18 18 18 30 
0a024     30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
0a028     18 0C 00 00 
0a02c     00 00 6C 7E 
0a030     36 00 00 00 
0a034     00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
0a038     00 00 00 00 
0a03c     00 00 00 00 
0a040     00          | 	byte	$00[9]
0a041     18 18 18 18 
0a045     18 18 00 00 
0a049     00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
0a04c     00 6C FE FE 
0a050     7C 38 10 00 
0a054     18 18 18 F8 
0a058     F8 18 18 18 | a8_font        file "atari8.fnt"
0a05c     C0 C0 C0 C0 
0a060     C0 C0 C0 C0 | 	byte	$c0[8]
0a064     18 18 18 1F 
0a068     1F 00 00 00 
0a06c     18 18 18 1F 
0a070     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
0a074     00 00 00 1F 
0a078     1F 18 18 18 
0a07c     C0 E0 70 38 
0a080     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
0a084     03 07 0E 1C 
0a088     38 70 E0 C0 
0a08c     80 C0 E0 F0 
0a090     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
0a094     00 00 00 00 
0a098     F0 F0 F0 F0 
0a09c     01 03 07 0F 
0a0a0     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
0a0a4     F0 F0 F0 F0 
0a0a8     00 00 00 00 
0a0ac     0F 0F 0F 0F 
0a0b0     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
0a0b4     FF FF 00 00 
0a0b8     00 00 00 00 
0a0bc     00 00 00 00 
0a0c0     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
0a0c4     00 00 00 00 
0a0c8     0F 0F 0F 0F 
0a0cc     00 38 38 EE 
0a0d0     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
0a0d4     00 00 00 F8 
0a0d8     F8 18 18 18 
0a0dc     00 00 00 FF 
0a0e0     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
0a0e4     18 18 18 FF 
0a0e8     FF 18 18 18 
0a0ec     00 00 3C 7E 
0a0f0     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
0a0f4     00 00 00 00 
0a0f8     FF FF FF FF 
0a0fc     03 03 03 03 
0a100     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
0a104     00 00 00 FF 
0a108     FF 18 18 18 
0a10c     18 18 18 FF 
0a110     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
0a114     0F 0F 0F 0F 
0a118     0F 0F 0F 0F | 	byte	$0f[8]
0a11c     18 18 18 F8 
0a120     F8 00 00 00 
0a124     1E 06 1E 06 
0a128     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
0a12c     00 18 3C 7E 
0a130     18 18 18 00 
0a134     00 18 18 18 
0a138     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
0a13c     00 18 0C 7E 
0a140     0C 18 00 00 
0a144     00 18 30 7E 
0a148     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
0a14c     00 00 00 00 
0a150     00 00 00 00 
0a154     00          | 	byte	$00[9]
0a155     18 18 18 18 
0a159     00 18 00 00 
0a15d     66 66 66 00 
0a161     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
0a165     66 FF 66 66 
0a169     FF 66 00 18 
0a16d     7C 06 3C 60 
0a171     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
0a175     66 36 18 0C 
0a179     66 62 00 38 
0a17d     6C 38 1C F6 
0a181     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
0a185     18 18 18 00 
0a189     00 00 00 00 
0a18d     70 38 18 18 
0a191     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
0a195     0E 1C 18 18 
0a199     1C 0E 00 00 
0a19d     66 3C FF 3C 
0a1a1     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
0a1a5     18 18 7E 18 
0a1a9     18 00 00 00 
0a1ad     00 00 00 00 
0a1b1     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
0a1b5     00 00 7E 00 
0a1b9     00 00 00 00 
0a1bd     00 00 00 00 
0a1c1     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
0a1c5     60 30 18 0C 
0a1c9     06 02 00 00 
0a1cd     3C 66 76 6E 
0a1d1     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
0a1d5     18 1C 18 18 
0a1d9     18 7E 00 00 
0a1dd     3C 66 30 18 
0a1e1     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
0a1e5     7E 30 18 30 
0a1e9     66 3C 00 00 
0a1ed     30 38 3C 36 
0a1f1     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
0a1f5     7E 06 3E 60 
0a1f9     66 3C 00 00 
0a1fd     3C 06 3E 66 
0a201     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
0a205     7E 60 30 18 
0a209     0C 0C 00 00 
0a20d     3C 66 3C 66 
0a211     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
0a215     3C 66 7C 60 
0a219     30 1C 00 00 
0a21d     00 18 18 00 
0a221     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
0a225     00 18 18 00 
0a229     18 18 0C 60 
0a22d     30 18 0C 18 
0a231     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
0a235     00 7E 00 00 
0a239     7E 00 00 06 
0a23d     0C 18 30 18 
0a241     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
0a245     3C 66 30 18 
0a249     00 18 00 00 
0a24d     3C 66 76 76 
0a251     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
0a255     18 3C 66 66 
0a259     7E 66 00 00 
0a25d     3E 66 3E 66 
0a261     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
0a265     3C 66 06 06 
0a269     66 3C 00 00 
0a26d     1E 36 66 66 
0a271     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
0a275     7E 06 3E 06 
0a279     06 7E 00 00 
0a27d     7E 06 3E 06 
0a281     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
0a285     7C 06 06 76 
0a289     66 7C 00 00 
0a28d     66 66 7E 66 
0a291     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
0a295     7E 18 18 18 
0a299     18 7E 00 00 
0a29d     60 60 60 60 
0a2a1     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
0a2a5     66 36 1E 1E 
0a2a9     36 66 00 00 
0a2ad     06 06 06 06 
0a2b1     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
0a2b5     C6 EE FE D6 
0a2b9     C6 C6 00 00 
0a2bd     66 6E 7E 7E 
0a2c1     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
0a2c5     3C 66 66 66 
0a2c9     66 3C 00 00 
0a2cd     3E 66 66 3E 
0a2d1     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
0a2d5     3C 66 66 66 
0a2d9     36 6C 00 00 
0a2dd     3E 66 66 3E 
0a2e1     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
0a2e5     3C 06 3C 60 
0a2e9     60 3C 00 00 
0a2ed     7E 18 18 18 
0a2f1     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
0a2f5     66 66 66 66 
0a2f9     66          | 	byte	$66[5]
0a2fa     7E 00 00 66 
0a2fe     66 66 66 3C 
0a302     18 00 00 C6 
0a306     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
0a30a     C6 00 00 66 
0a30e     66 3C 3C 66 
0a312     66 00 00 66 
0a316     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
0a31a     18 00 00 7E 
0a31e     30 18 0C 06 
0a322     7E 00 00 78 
0a326     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
0a32a     78 00 00 02 
0a32e     06 0C 18 30 
0a332     60 00 00 1E 
0a336     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
0a33a     1E 00 00 10 
0a33e     38 6C C6 00 
0a342     00 00 00 00 
0a346     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a34a     FF 00 00 18 
0a34e     3C 7E 7E 3C 
0a352     18 00 00 00 
0a356     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
0a35a     7C 00 00 06 
0a35e     06 3E 66 66 
0a362     3E 00 00 00 
0a366     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
0a36a     3C 00 00 60 
0a36e     60 7C 66 66 
0a372     7C 00 00 00 
0a376     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
0a37a     3C 00 00 70 
0a37e     18 7C 18 18 
0a382     18 00 00 00 
0a386     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
0a38a     60 3E 00 06 
0a38e     06 3E 66 66 
0a392     66 00 00 18 
0a396     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
0a39a     3C 00 00 60 
0a39e     00 60 60 60 
0a3a2     60 3C 00 06 
0a3a6     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
0a3aa     66 00 00 1C 
0a3ae     18 18 18 18 
0a3b2     3C 00 00 00 
0a3b6     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
0a3ba     C6 00 00 00 
0a3be     3E 66 66 66 
0a3c2     66 00 00 00 
0a3c6     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
0a3ca     3C 00 00 00 
0a3ce     3E 66 66 3E 
0a3d2     06 06 00 00 
0a3d6     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
0a3da     60 60 00 00 
0a3de     3E 66 06 06 
0a3e2     06 00 00 00 
0a3e6     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
0a3ea     3E 00 00 18 
0a3ee     7E 18 18 18 
0a3f2     70 00 00 00 
0a3f6     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
0a3fa     7C 00 00 00 
0a3fe     66 66 66 3C 
0a402     18 00 00 00 
0a406     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
0a40a     6C 00 00 00 
0a40e     66 3C 18 3C 
0a412     66 00 00 00 
0a416     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
0a41a     30 1E 00 00 
0a41e     7E 30 18 0C 
0a422     7E 00 00 18 
0a426     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
0a42a     3C 00 18 18 
0a42e     18 18 18 18 
0a432     18 18 00 7E 
0a436     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
0a43a     60 00 10 18 
0a43e     1C 1E 1C 18 
0a442     10 00 08 18 
0a446     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
0a44a     08 00       | 	byte	$08, $00
0a44c     00 6C FE FE 
0a450     7C 38 10 00 
0a454     18 18 18 F8 
0a458     F8 18 18 18 | a8_font2       file "atari8.fnt"
0a45c     C0 C0 C0 C0 
0a460     C0 C0 C0 C0 | 	byte	$c0[8]
0a464     18 18 18 1F 
0a468     1F 00 00 00 
0a46c     18 18 18 1F 
0a470     1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
0a474     00 00 00 1F 
0a478     1F 18 18 18 
0a47c     C0 E0 70 38 
0a480     1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
0a484     03 07 0E 1C 
0a488     38 70 E0 C0 
0a48c     80 C0 E0 F0 
0a490     F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
0a494     00 00 00 00 
0a498     F0 F0 F0 F0 
0a49c     01 03 07 0F 
0a4a0     1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
0a4a4     F0 F0 F0 F0 
0a4a8     00 00 00 00 
0a4ac     0F 0F 0F 0F 
0a4b0     00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
0a4b4     FF FF 00 00 
0a4b8     00 00 00 00 
0a4bc     00 00 00 00 
0a4c0     00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
0a4c4     00 00 00 00 
0a4c8     0F 0F 0F 0F 
0a4cc     00 38 38 EE 
0a4d0     EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
0a4d4     00 00 00 F8 
0a4d8     F8 18 18 18 
0a4dc     00 00 00 FF 
0a4e0     FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
0a4e4     18 18 18 FF 
0a4e8     FF 18 18 18 
0a4ec     00 00 3C 7E 
0a4f0     7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
0a4f4     00 00 00 00 
0a4f8     FF FF FF FF 
0a4fc     03 03 03 03 
0a500     03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
0a504     00 00 00 FF 
0a508     FF 18 18 18 
0a50c     18 18 18 FF 
0a510     FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
0a514     0F 0F 0F 0F 
0a518     0F 0F 0F 0F | 	byte	$0f[8]
0a51c     18 18 18 F8 
0a520     F8 00 00 00 
0a524     1E 06 1E 06 
0a528     7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
0a52c     00 18 3C 7E 
0a530     18 18 18 00 
0a534     00 18 18 18 
0a538     7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
0a53c     00 18 0C 7E 
0a540     0C 18 00 00 
0a544     00 18 30 7E 
0a548     30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
0a54c     00 00 00 00 
0a550     00 00 00 00 
0a554     00          | 	byte	$00[9]
0a555     18 18 18 18 
0a559     00 18 00 00 
0a55d     66 66 66 00 
0a561     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
0a565     66 FF 66 66 
0a569     FF 66 00 18 
0a56d     7C 06 3C 60 
0a571     3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
0a575     66 36 18 0C 
0a579     66 62 00 38 
0a57d     6C 38 1C F6 
0a581     66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
0a585     18 18 18 00 
0a589     00 00 00 00 
0a58d     70 38 18 18 
0a591     38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
0a595     0E 1C 18 18 
0a599     1C 0E 00 00 
0a59d     66 3C FF 3C 
0a5a1     66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
0a5a5     18 18 7E 18 
0a5a9     18 00 00 00 
0a5ad     00 00 00 00 
0a5b1     18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
0a5b5     00 00 7E 00 
0a5b9     00 00 00 00 
0a5bd     00 00 00 00 
0a5c1     18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
0a5c5     60 30 18 0C 
0a5c9     06 02 00 00 
0a5cd     3C 66 76 6E 
0a5d1     66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
0a5d5     18 1C 18 18 
0a5d9     18 7E 00 00 
0a5dd     3C 66 30 18 
0a5e1     0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
0a5e5     7E 30 18 30 
0a5e9     66 3C 00 00 
0a5ed     30 38 3C 36 
0a5f1     7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
0a5f5     7E 06 3E 60 
0a5f9     66 3C 00 00 
0a5fd     3C 06 3E 66 
0a601     66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
0a605     7E 60 30 18 
0a609     0C 0C 00 00 
0a60d     3C 66 3C 66 
0a611     66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
0a615     3C 66 7C 60 
0a619     30 1C 00 00 
0a61d     00 18 18 00 
0a621     18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
0a625     00 18 18 00 
0a629     18 18 0C 60 
0a62d     30 18 0C 18 
0a631     30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
0a635     00 7E 00 00 
0a639     7E 00 00 06 
0a63d     0C 18 30 18 
0a641     0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
0a645     3C 66 30 18 
0a649     00 18 00 00 
0a64d     3C 66 76 76 
0a651     06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
0a655     18 3C 66 66 
0a659     7E 66 00 00 
0a65d     3E 66 3E 66 
0a661     66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
0a665     3C 66 06 06 
0a669     66 3C 00 00 
0a66d     1E 36 66 66 
0a671     36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
0a675     7E 06 3E 06 
0a679     06 7E 00 00 
0a67d     7E 06 3E 06 
0a681     06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
0a685     7C 06 06 76 
0a689     66 7C 00 00 
0a68d     66 66 7E 66 
0a691     66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
0a695     7E 18 18 18 
0a699     18 7E 00 00 
0a69d     60 60 60 60 
0a6a1     66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
0a6a5     66 36 1E 1E 
0a6a9     36 66 00 00 
0a6ad     06 06 06 06 
0a6b1     06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
0a6b5     C6 EE FE D6 
0a6b9     C6 C6 00 00 
0a6bd     66 6E 7E 7E 
0a6c1     76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
0a6c5     3C 66 66 66 
0a6c9     66 3C 00 00 
0a6cd     3E 66 66 3E 
0a6d1     06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
0a6d5     3C 66 66 66 
0a6d9     36 6C 00 00 
0a6dd     3E 66 66 3E 
0a6e1     36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
0a6e5     3C 06 3C 60 
0a6e9     60 3C 00 00 
0a6ed     7E 18 18 18 
0a6f1     18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
0a6f5     66 66 66 66 
0a6f9     66          | 	byte	$66[5]
0a6fa     7E 00 00 66 
0a6fe     66 66 66 3C 
0a702     18 00 00 C6 
0a706     C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
0a70a     C6 00 00 66 
0a70e     66 3C 3C 66 
0a712     66 00 00 66 
0a716     66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
0a71a     18 00 00 7E 
0a71e     30 18 0C 06 
0a722     7E 00 00 78 
0a726     18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
0a72a     78 00 00 02 
0a72e     06 0C 18 30 
0a732     60 00 00 1E 
0a736     18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
0a73a     1E 00 00 10 
0a73e     38 6C C6 00 
0a742     00 00 00 00 
0a746     00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
0a74a     FF 00 00 18 
0a74e     3C 7E 7E 3C 
0a752     18 00 00 00 
0a756     3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
0a75a     7C 00 00 06 
0a75e     06 3E 66 66 
0a762     3E 00 00 00 
0a766     3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
0a76a     3C 00 00 60 
0a76e     60 7C 66 66 
0a772     7C 00 00 00 
0a776     3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
0a77a     3C 00 00 70 
0a77e     18 7C 18 18 
0a782     18 00 00 00 
0a786     7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
0a78a     60 3E 00 06 
0a78e     06 3E 66 66 
0a792     66 00 00 18 
0a796     00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
0a79a     3C 00 00 60 
0a79e     00 60 60 60 
0a7a2     60 3C 00 06 
0a7a6     06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
0a7aa     66 00 00 1C 
0a7ae     18 18 18 18 
0a7b2     3C 00 00 00 
0a7b6     66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
0a7ba     C6 00 00 00 
0a7be     3E 66 66 66 
0a7c2     66 00 00 00 
0a7c6     3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
0a7ca     3C 00 00 00 
0a7ce     3E 66 66 3E 
0a7d2     06 06 00 00 
0a7d6     7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
0a7da     60 60 00 00 
0a7de     3E 66 06 06 
0a7e2     06 00 00 00 
0a7e6     7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
0a7ea     3E 00 00 18 
0a7ee     7E 18 18 18 
0a7f2     70 00 00 00 
0a7f6     66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
0a7fa     7C 00 00 00 
0a7fe     66 66 66 3C 
0a802     18 00 00 00 
0a806     C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
0a80a     6C 00 00 00 
0a80e     66 3C 18 3C 
0a812     66 00 00 00 
0a816     66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
0a81a     30 1E 00 00 
0a81e     7E 30 18 0C 
0a822     7E 00 00 18 
0a826     3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
0a82a     3C 00 18 18 
0a82e     18 18 18 18 
0a832     18 18 00 7E 
0a836     1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
0a83a     60 00 10 18 
0a83e     1C 1E 1C 18 
0a842     10 00 08 18 
0a846     38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
0a84a     08 00       | 	byte	$08, $00
0a84c     00 00 00 00 
      ...             
0aa58     00 00 00 00 
0aa5c     00 00       | amiga_font     file "amigafont.def"
0aa5e     18 18 18 18 
0aa62     18 18       | 	byte	$18[6]
0aa64     00 18 18 00 
0aa68     00 00 00 00 
0aa6c     00 00 66 66 
0aa70     66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
0aa74     00 00 00 00 
0aa78     00 00 00 00 
0aa7c     00 00       | 	byte	$00[10]
0aa7e     36 36 7F 36 
0aa82     36 36 7F 36 
0aa86     36 00 00 00 
0aa8a     00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
0aa8e     18 7C 06 06 
0aa92     3C 60 60 3E 
0aa96     18 00 00 00 
0aa9a     00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
0aa9e     00 00 C6 69 
0aaa2     36 18 6C 96 
0aaa6     63 00 00 00 
0aaaa     00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
0aaae     1C 36 36 1E 
0aab2     6E 3B 33 73 
0aab6     DE 00 00 00 
0aaba     00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
0aabe     18 18 0C 00 
0aac2     00 00 00 00 
0aac6     00 00 00 00 
0aaca     00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aace     30 18 0C 0C 
0aad2     0C 0C 0C 18 
0aad6     30 00 00 00 
0aada     00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
0aade     0C 18 30 30 
0aae2     30 30 30 18 
0aae6     0C 00 00 00 
0aaea     00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
0aaee     00 66 66 3C 
0aaf2     FF 3C 66 66 
0aaf6     00 00 00 00 
0aafa     00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
0aafe     00 18 18 18 
0ab02     7E 18 18 18 
0ab06     00 00 00 00 
0ab0a     00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
0ab0e     00 00 00 00 
0ab12     00 00 00    | 	byte	$00[7]
0ab15     18 18 0C 00 
0ab19     00 00 00 00 
0ab1d     00 00 00 00 
0ab21     00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
0ab25     00 00 00 00 
0ab29     00 00 00 00 
0ab2d     00 00 00 00 
0ab31     00 00 00 00 | 	byte	$00[16]
0ab35     18 18 00 00 
0ab39     00 00 00 00 
0ab3d     00 00 C0 60 
0ab41     30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
0ab45     03 00 00 00 
0ab49     00 00 00 00 
0ab4d     00 3C 66 66 
0ab51     76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
0ab55     66 3C 00 00 
0ab59     00 00 00 00 
0ab5d     00 18 1C 1E 
0ab61     18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
0ab65     18 18 00 00 
0ab69     00 00 00 00 
0ab6d     00 3C 66 60 
0ab71     60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
0ab75     06 7E 00 00 
0ab79     00 00 00 00 
0ab7d     00 3C 66 60 
0ab81     60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
0ab85     66 3C 00 00 
0ab89     00 00 00 00 
0ab8d     00 30 38 3C 
0ab91     36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
0ab95     30 30 00 00 
0ab99     00 00 00 00 
0ab9d     00 7E 06 06 
0aba1     3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
0aba5     66 3C 00 00 
0aba9     00 00 00 00 
0abad     00 38 0C 06 
0abb1     06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
0abb5     66 3C 00 00 
0abb9     00 00 00 00 
0abbd     00 7E 60 60 
0abc1     60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
0abc5     18 18 00 00 
0abc9     00 00 00 00 
0abcd     00 3C 66 66 
0abd1     66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
0abd5     66 3C 00 00 
0abd9     00 00 00 00 
0abdd     00 3C 66 66 
0abe1     66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
0abe5     30 1C 00 00 
0abe9     00 00 00 00 
0abed     00 00 00 18 
0abf1     18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
0abf5     18 00 00 00 
0abf9     00 00 00 00 
0abfd     00 00 00 18 
0ac01     18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
0ac05     18 18 0C 00 
0ac09     00 00 00 00 
0ac0d     00 00 00 60 
0ac11     18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
0ac15     00 00 00 00 
0ac19     00 00 00 00 
0ac1d     00 00 00 00 | 	byte	$00[12]
0ac21     7E 00 7E 00 
0ac25     00 00 00 00 
0ac29     00 00 00 00 
0ac2d     00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
0ac31     18 60 18 06 
0ac35     00 00 00 00 
0ac39     00 00 00 00 
0ac3d     00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
0ac41     60 30 18 00 
0ac45     18 18 00 00 
0ac49     00 00 00 00 
0ac4d     00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
0ac51     7B 6B 7B 03 
0ac55     03 1E 00 00 
0ac59     00 00 00 00 
0ac5d     00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
0ac61     63 7F 63 63 
0ac65     63 63 00 00 
0ac69     00 00 00 00 
0ac6d     00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
0ac71     66 3E 66 66 
0ac75     66 3E 00 00 
0ac79     00 00 00 00 
0ac7d     00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
0ac81     06 06 06 06 
0ac85     0C 78 00 00 
0ac89     00 00 00 00 
0ac8d     00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
0ac91     63 63 63 63 
0ac95     33 1F 00 00 
0ac99     00 00 00 00 
0ac9d     00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
0aca1     06 1E 06 06 
0aca5     06 7E 00 00 
0aca9     00 00 00 00 
0acad     00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
0acb1     06 1E 06 06 
0acb5     06 06 00 00 
0acb9     00 00 00 00 
0acbd     00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
0acc1     06 76 66 66 
0acc5     66 7C 00 00 
0acc9     00 00 00 00 
0accd     00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
0acd1     63 7F 63 63 
0acd5     63 63 00 00 
0acd9     00 00 00 00 
0acdd     00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
0ace1     18 18 18 18 
0ace5     18          | 	byte	$18[5]
0ace6     3C 00 00 00 
0acea     00 00 00 00 
0acee     60 60 60 60 
0acf2     60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
0acf6     3E 00 00 00 
0acfa     00 00 00 00 
0acfe     C3 63 33 1B 
0ad02     0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
0ad06     C3 00 00 00 
0ad0a     00 00 00 00 
0ad0e     03 03 03 03 
0ad12     03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
0ad16     7F 00 00 00 
0ad1a     00 00 00 00 
0ad1e     63 77 7F 6B 
0ad22     63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
0ad26     63 00 00 00 
0ad2a     00 00 00 00 
0ad2e     63 67 6F 7B 
0ad32     73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
0ad36     63 00 00 00 
0ad3a     00 00 00 00 
0ad3e     3E 63 63 63 
0ad42     63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
0ad46     3E 00 00 00 
0ad4a     00 00 00 00 
0ad4e     3E 66 66 66 
0ad52     3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
0ad56     06 00 00 00 
0ad5a     00 00 00 00 
0ad5e     3E 63 63 63 
0ad62     63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
0ad66     FE 00 00 00 
0ad6a     00 00 00 00 
0ad6e     1F 33 33 33 
0ad72     1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
0ad76     63 00 00 00 
0ad7a     00 00 00 00 
0ad7e     3C 66 06 0C 
0ad82     18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
0ad86     3C 00 00 00 
0ad8a     00 00 00 00 
0ad8e     7E 18 18 18 
0ad92     18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
0ad96     18 00 00 00 
0ad9a     00 00 00 00 
0ad9e     63 63 63 63 
0ada2     63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
0ada6     3E 00 00 00 
0adaa     00 00 00 00 
0adae     63 63 63 63 
0adb2     63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
0adb6     08 00 00 00 
0adba     00 00 00 00 
0adbe     C3 C3 C3 C3 
0adc2     C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
0adc6     C3 00 00 00 
0adca     00 00 00 00 
0adce     C3 C3 66 3C 
0add2     18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
0add6     C3 00 00 00 
0adda     00 00 00 00 
0adde     C3 C3 66 3C 
0ade2     18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
0ade6     18 00 00 00 
0adea     00 00 00 00 
0adee     7F 60 60 30 
0adf2     18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
0adf6     7F 00 00 00 
0adfa     00 00 00 00 
0adfe     3C 0C 0C 0C 
0ae02     0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
0ae06     3C 00 00 00 
0ae0a     00 00 00 00 
0ae0e     00 03 06 0C 
0ae12     18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
0ae16     00 00 00 00 
0ae1a     00 00 00 00 | 	byte	$00[8]
0ae1e     3C 30 30 30 
0ae22     30 30 30 30 
0ae26     3C 00 00 00 
0ae2a     00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
0ae2e     08 1C 36 63 
0ae32     00 00 00 00 
0ae36     00 00 00 00 
0ae3a     00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae3e     00 00 00 00 
0ae42     00 00 00 00 
0ae46     00          | 	byte	$00[9]
0ae47     7F 00 00 00 
0ae4b     00 00 00 18 
0ae4f     18 30 00 00 
0ae53     00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
0ae57     00 00 00 00 
0ae5b     00 00 00 00 
0ae5f     00 00       | 	byte	$00[10]
0ae61     3C 60 7C 66 
0ae65     66 7C 00 00 
0ae69     00 00 00 00 
0ae6d     00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
0ae71     3E 66 66 66 
0ae75     66 3E 00 00 
0ae79     00 00 00 00 
0ae7d     00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0ae81     3C 06 06 06 
0ae85     06 3C 00 00 
0ae89     00 00 00 00 
0ae8d     00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
0ae91     7C 66 66 66 
0ae95     66 7C 00 00 
0ae99     00 00 00 00 
0ae9d     00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aea1     3C 66 7E 06 
0aea5     06 3C 00 00 
0aea9     00 00 00 00 
0aead     00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
0aeb1     3E 0C 0C 0C 
0aeb5     0C 0C 00 00 
0aeb9     00 00 00 00 
0aebd     00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0aec1     7C 66 66 66 
0aec5     7C 60 60 3C 
0aec9     00 00 00 00 
0aecd     00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
0aed1     3E 66 66 66 
0aed5     66 66 00 00 
0aed9     00 00 00 00 
0aedd     00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
0aee1     18 18 18 18 
0aee5     18          | 	byte	$18[5]
0aee6     30 00 00 00 
0aeea     00 00 00 00 
0aeee     00 30 00 30 
0aef2     30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
0aef6     30 30 1E 00 
0aefa     00 00 00 00 
0aefe     03 03 03 33 
0af02     1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
0af06     63 00 00 00 
0af0a     00 00 00 00 
0af0e     18 18 18 18 
0af12     18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
0af16     30 00 00 00 
0af1a     00 00 00 00 
0af1e     00 00 00 37 
0af22     7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
0af26     63 00 00 00 
0af2a     00 00 00 00 
0af2e     00 00 00 3E 
0af32     66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
0af36     66 00 00 00 
0af3a     00 00 00 00 
0af3e     00 00 00 3C 
0af42     66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
0af46     3C 00 00 00 
0af4a     00 00 00 00 
0af4e     00 00 00 3E 
0af52     66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
0af56     06 06 06 00 
0af5a     00 00 00 00 
0af5e     00 00 00 7C 
0af62     66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
0af66     60 60 60 00 
0af6a     00 00 00 00 
0af6e     00 00 00 3E 
0af72     66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
0af76     06 00 00 00 
0af7a     00 00 00 00 
0af7e     00 00 00 3C 
0af82     06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
0af86     3E 00 00 00 
0af8a     00 00 00 00 
0af8e     00 0C 0C 3E 
0af92     0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
0af96     38 00 00 00 
0af9a     00 00 00 00 
0af9e     00 00 00 66 
0afa2     66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
0afa6     7C 00 00 00 
0afaa     00 00 00 00 
0afae     00 00 00 66 
0afb2     66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
0afb6     18 00 00 00 
0afba     00 00 00 00 
0afbe     00 00 00 63 
0afc2     63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
0afc6     36 00 00 00 
0afca     00 00 00 00 
0afce     00 00 00 63 
0afd2     36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
0afd6     63 00 00 00 
0afda     00 00 00 00 
0afde     00 00 00 66 
0afe2     66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
0afe6     18 0C 06 00 
0afea     00 00 00 00 
0afee     00 00 00 7E 
0aff2     30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
0aff6     7E 00 00 00 
0affa     00 00 00 00 
0affe     70 18 18 18 
0b002     0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
0b006     70 00 00 00 
0b00a     00 00 00 00 
0b00e     18 18 18 18 
0b012     18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
0b016     18 00 00 00 
0b01a     00 00 00 00 
0b01e     0E 18 18 18 
0b022     70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
0b026     0E 00 00 00 
0b02a     00 00 00 00 
0b02e     46 5D 31 00 
0b032     00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
0b036     00 00 00 00 
0b03a     00 00 00 00 | 	byte	$00[8]
0b03e     C0 F0 3C 0F 
0b042     C3 F0 3C 0F 
0b046     03 00 00 00 
0b04a     00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
0b04e     18 18 00 18 
0b052     18 18 18 18 
0b056     18 00 00 00 
0b05a     00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0b05e     18 18 7E 1B 
0b062     1B 7E 18 18 
0b066     00 00 00 00 
0b06a     00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
0b06e     78 CC 0C 0C 
0b072     1E 0C 0C 06 
0b076     7F 00 00 00 
0b07a     00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
0b07e     66 3C 66 66 
0b082     3C 66 00 00 
0b086     00 00 00 00 
0b08a     00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b08e     C3 C3 66 3C 
0b092     18 7E 18 18 
0b096     18 00 00 00 
0b09a     00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0b09e     18 18 18 18 
0b0a2     00 18 18 18 
0b0a6     18 00 00 00 
0b0aa     00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0b0ae     3C 06 06 3C 
0b0b2     66 66 66 3C 
0b0b6     60 60 3C 00 
0b0ba     00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
0b0be     66 66 00 00 
0b0c2     00 00 00 00 
0b0c6     00 00 00 00 
0b0ca     00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0ce     7E 81 B9 85 
0b0d2     85 B9 81 7E 
0b0d6     00 00 00 00 
0b0da     00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
0b0de     3C 33 33 7E 
0b0e2     00 7F 00 00 
0b0e6     00 00 00 00 
0b0ea     00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0ee     00 00 CC 66 
0b0f2     33 66 CC 00 
0b0f6     00 00 00 00 
0b0fa     00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b0fe     7E 60 60 00 
0b102     00 00 00 00 
0b106     00 00 00 00 
0b10a     00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b10e     7E 81 9D A5 
0b112     9D A5 81 7E 
0b116     00 00 00 00 
0b11a     00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
0b11e     7E 00 00 00 
0b122     00 00 00 00 
0b126     00 00 00 00 
0b12a     00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b12e     3C 66 66 3C 
0b132     00 00 00 00 
0b136     00 00 00 00 
0b13a     00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b13e     18 18 18 7E 
0b142     18 18 18 00 
0b146     7E 00 00 00 
0b14a     00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
0b14e     1E 30 30 18 
0b152     0C 06 3E 00 
0b156     00 00 00 00 
0b15a     00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b15e     1E 30 30 1C 
0b162     30 30 1E 00 
0b166     00 00 00 00 
0b16a     00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b16e     30 18 0C 06 
0b172     00 00 00 00 
0b176     00 00 00 00 
0b17a     00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b17e     00 00 00 66 
0b182     66 66 66 66 
0b186     FE 06 06 00 
0b18a     00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
0b18e     7C 5E 5E 5E 
0b192     5C 50 50 50 
0b196     50 50 00 00 
0b19a     00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
0b19e     00 00 00 18 
0b1a2     18 00 00 00 
0b1a6     00 00 00 00 
0b1aa     00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1ae     00 00 00 00 
0b1b2     00 00 00 00 
0b1b6     00          | 	byte	$00[9]
0b1b7     30 18 00 00 
0b1bb     00 00 00 18 
0b1bf     1C 18 18 18 
0b1c3     18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
0b1c7     00 00 00 00 
0b1cb     00 00 00    | 	byte	$00[7]
0b1ce     3C 66 66 3C 
0b1d2     00 7E 00 00 
0b1d6     00 00 00 00 
0b1da     00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1de     00 00 33 66 
0b1e2     CC 66 33 00 
0b1e6     00 00 00 00 
0b1ea     00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
0b1ee     02 63 32 1A 
0b1f2     4E 66 F3 40 
0b1f6     40 00 00 00 
0b1fa     00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
0b1fe     04 C6 64 34 
0b202     7C 8C 46 23 
0b206     F0 00 00 00 
0b20a     00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
0b20e     03 C4 66 34 
0b212     5B 6C F6 43 
0b216     40 00 00 00 
0b21a     00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
0b21e     18 18 00 18 
0b222     0C 06 06 66 
0b226     3C 00 00 00 
0b22a     00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
0b22e     06 0C 3E 63 
0b232     63 7F 63 63 
0b236     63 00 00 00 
0b23a     00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
0b23e     30 18 3E 63 
0b242     63 7F 63 63 
0b246     63 00 00 00 
0b24a     00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
0b24e     0C 33 3E 63 
0b252     63 63 7F 63 
0b256     63 00 00 00 
0b25a     00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
0b25e     4E 39 3E 63 
0b262     63 7F 63 63 
0b266     63 00 00 00 
0b26a     00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
0b26e     63 00 3E 63 
0b272     63 7F 63 63 
0b276     63 00 00 00 
0b27a     00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
0b27e     1C 22 1C 36 
0b282     63 63 7F 63 
0b286     63 00 00 00 
0b28a     00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
0b28e     F8 3C 3C 36 
0b292     F6 3F 33 33 
0b296     F3 00 00 00 
0b29a     00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
0b29e     78 0C 06 06 
0b2a2     06 06 06 0C 
0b2a6     78 30 18 00 
0b2aa     00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
0b2ae     0C 18 7E 06 
0b2b2     06 3E 06 06 
0b2b6     7E 00 00 00 
0b2ba     00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
0b2be     30 18 7E 06 
0b2c2     06 3E 06 06 
0b2c6     7E 00 00 00 
0b2ca     00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
0b2ce     18 66 7E 06 
0b2d2     06 3E 06 06 
0b2d6     7E 00 00 00 
0b2da     00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
0b2de     66 00 7E 06 
0b2e2     06 3E 06 06 
0b2e6     7E 00 00 00 
0b2ea     00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
0b2ee     0C 18 3C 18 
0b2f2     18 18 18 18 
0b2f6     3C 00 00 00 
0b2fa     00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0b2fe     30 18 3C 18 
0b302     18 18 18 18 
0b306     3C 00 00 00 
0b30a     00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0b30e     18 66 3C 18 
0b312     18 18 18 18 
0b316     3C 00 00 00 
0b31a     00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0b31e     66 00 3C 18 
0b322     18 18 18 18 
0b326     3C 00 00 00 
0b32a     00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
0b32e     1E 36 66 66 
0b332     6F 66 66 36 
0b336     1E 00 00 00 
0b33a     00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
0b33e     8E 73 67 6F 
0b342     7B 73 63 63 
0b346     63 00 00 00 
0b34a     00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
0b34e     06 0C 3E 63 
0b352     63 63 63 63 
0b356     3E 00 00 00 
0b35a     00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b35e     30 18 3E 63 
0b362     63 63 63 63 
0b366     3E 00 00 00 
0b36a     00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b36e     0C 33 3E 63 
0b372     63 63 63 63 
0b376     3E 00 00 00 
0b37a     00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b37e     8E 71 3E 63 
0b382     63 63 63 63 
0b386     3E 00 00 00 
0b38a     00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b38e     63 00 3E 63 
0b392     63 63 63 63 
0b396     3E 00 00 00 
0b39a     00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b39e     00 00 63 36 
0b3a2     1C 1C 36 63 
0b3a6     00 00 00 00 
0b3aa     00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
0b3ae     BE 63 73 7B 
0b3b2     6B 6F 67 63 
0b3b6     3F 00 00 00 
0b3ba     00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
0b3be     0C 18 63 63 
0b3c2     63 63 63 63 
0b3c6     3E 00 00 00 
0b3ca     00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b3ce     18 0C 63 63 
0b3d2     63 63 63 63 
0b3d6     3E 00 00 00 
0b3da     00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b3de     08 36 63 63 
0b3e2     63 63 63 63 
0b3e6     3E 00 00 00 
0b3ea     00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b3ee     63 00 63 63 
0b3f2     63 63 63 63 
0b3f6     3E 00 00 00 
0b3fa     00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
0b3fe     30 18 C3 66 
0b402     3C 18 18 18 
0b406     18 00 00 00 
0b40a     00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
0b40e     03 03 3F 63 
0b412     63 3F 03 03 
0b416     03 00 00 00 
0b41a     00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
0b41e     3C 66 66 66 
0b422     36 66 66 66 
0b426     36 06 06 00 
0b42a     00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
0b42e     06 0C 00 3C 
0b432     60 7C 66 66 
0b436     7C 00 00 00 
0b43a     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b43e     60 30 00 3C 
0b442     60 7C 66 66 
0b446     7C 00 00 00 
0b44a     00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b44e     18 66 00 3C 
0b452     60 7C 66 66 
0b456     7C 00 00 00 
0b45a     00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b45e     8E 71 00 3C 
0b462     60 7C 66 66 
0b466     7C 00 00 00 
0b46a     00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b46e     00 66 00 3C 
0b472     60 7C 66 66 
0b476     7C 00 00 00 
0b47a     00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b47e     18 24 18 3C 
0b482     60 7C 66 66 
0b486     7C 00 00 00 
0b48a     00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b48e     00 00 00 7E 
0b492     D8 FE 1B 1B 
0b496     EE 00 00 00 
0b49a     00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
0b49e     00 00 00 3C 
0b4a2     06 06 06 06 
0b4a6     3C 18 0C 00 
0b4aa     00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
0b4ae     06 0C 00 3C 
0b4b2     66 7E 06 06 
0b4b6     3C 00 00 00 
0b4ba     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
0b4be     60 30 00 3C 
0b4c2     66 7E 06 06 
0b4c6     3C 00 00 00 
0b4ca     00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
0b4ce     18 66 00 3C 
0b4d2     66 7E 06 06 
0b4d6     3C 00 00 00 
0b4da     00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
0b4de     00 66 00 3C 
0b4e2     66 7E 06 06 
0b4e6     3C 00 00 00 
0b4ea     00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
0b4ee     0C 18 00 18 
0b4f2     18 18 18 18 
0b4f6     30 00 00 00 
0b4fa     00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
0b4fe     18 0C 00 0C 
0b502     0C 0C 0C 0C 
0b506     18 00 00 00 
0b50a     00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
0b50e     18 66 00 18 
0b512     18 18 18 18 
0b516     30 00 00 00 
0b51a     00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
0b51e     00 66 00 18 
0b522     18 18 18 18 
0b526     30 00 00 00 
0b52a     00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
0b52e     03 06 3F 18 
0b532     3C 66 66 66 
0b536     3C 00 00 00 
0b53a     00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
0b53e     8E 71 00 3E 
0b542     66 66 66 66 
0b546     66 00 00 00 
0b54a     00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
0b54e     06 0C 00 3C 
0b552     66 66 66 66 
0b556     3C 00 00 00 
0b55a     00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
0b55e     60 30 00 3C 
0b562     66 66 66 66 
0b566     3C 00 00 00 
0b56a     00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
0b56e     18 66 00 3C 
0b572     66 66 66 66 
0b576     3C 00 00 00 
0b57a     00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
0b57e     8E 71 00 3C 
0b582     66 66 66 66 
0b586     3C 00 00 00 
0b58a     00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
0b58e     00 66 00 3C 
0b592     66 66 66 66 
0b596     3C 00 00 00 
0b59a     00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
0b59e     00 18 18 00 
0b5a2     7E 00 18 18 
0b5a6     00 00 00 00 
0b5aa     00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
0b5ae     00 00 00 7E 
0b5b2     73 7B 6F 67 
0b5b6     3F 00 00 00 
0b5ba     00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
0b5be     0C 18 00 66 
0b5c2     66 66 66 66 
0b5c6     7C 00 00 00 
0b5ca     00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b5ce     30 18 00 66 
0b5d2     66 66 66 66 
0b5d6     7C 00 00 00 
0b5da     00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b5de     18 66 00 66 
0b5e2     66 66 66 66 
0b5e6     7C 00 00 00 
0b5ea     00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b5ee     00 66 00 66 
0b5f2     66 66 66 66 
0b5f6     7C 00 00 00 
0b5fa     00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
0b5fe     30 18 00 66 
0b602     66 66 66 3C 
0b606     18 0C 06 00 
0b60a     00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
0b60e     06 06 06 3E 
0b612     66 66 66 3E 
0b616     06 06 06 00 
0b61a     00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
0b61e     00 66 00 66 
0b622     66 66 66 3C 
0b626     18 0C 06 00 
0b62a     00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
0b62e     00 7E 66 66 
0b632     66 66 66 66 
0b636     66 7E 00 00 
0b63a     00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
0b63e     00 00 00 00 
      ...             
0b846     00 00 00 00 
0b84a     00 00       | 	byte	$00[526]
0b84c     00 00 00 00 
0b850     00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
0b851     80 00 00 00 
0b855     00 80 00 00 
0b859     80 80 00 00 
0b85d     00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
0b861     80 00 80 00 
0b865     00 40 80 00 
0b869     AA AA AA 00 
0b86d     55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
0b871     FF 00 00 00 
0b875     00 FF 00 00 
0b879     FF FF 00 00 
0b87d     00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
0b881     FF 00 FF 00 
0b885     00 FF FF 00 
0b889     FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
0b88c     00 00 00 00 
0b890     00          | ataripalette   file "ataripalettep2.def"
0b891     11 11 11 00 
0b895     22 22 22 00 
0b899     33 33 33 00 
0b89d     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
0b8a1     55 55 55 00 
0b8a5     66 66 66 00 
0b8a9     77 77 77 00 
0b8ad     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
0b8b1     99 99 99 00 
0b8b5     AA AA AA 00 
0b8b9     BB BB BB 00 
0b8bd     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
0b8c1     DD DD DD 00 
0b8c5     EE EE EE 00 
0b8c9     FF FF FF 00 
0b8cd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
0b8d1     00 14 40 00 
0b8d5     00 1E 60 00 
0b8d9     00 28 80 00 
0b8dd     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
0b8e1     00 3C BF 00 
0b8e5     00 46 DF 00 
0b8e9     00 50 FF 00 
0b8ed     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
0b8f1     39 77 FF 00 
0b8f5     55 8A FF 00 
0b8f9     71 9E FF 00 
0b8fd     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
0b901     AA C5 FF 00 
0b905     C6 D8 FF 00 
0b909     E3 EC FF 00 
0b90d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
0b911     00 00 40 00 
0b915     00 00 60 00 
0b919     00 00 80 00 
0b91d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
0b921     00 00 BF 00 
0b925     00 00 DF 00 
0b929     00 00 FF 00 
0b92d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
0b931     39 39 FF 00 
0b935     55 55 FF 00 
0b939     71 71 FF 00 
0b93d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
0b941     AA AA FF 00 
0b945     C6 C6 FF 00 
0b949     E3 E3 FF 00 
0b94d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
0b951     20 00 40 00 
0b955     30 00 60 00 
0b959     40 00 80 00 
0b95d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
0b961     60 00 BF 00 
0b965     70 00 DF 00 
0b969     80 00 FF 00 
0b96d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
0b971     9C 39 FF 00 
0b975     AA 55 FF 00 
0b979     B8 71 FF 00 
0b97d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
0b981     D5 AA FF 00 
0b985     E3 C6 FF 00 
0b989     F1 E3 FF 00 
0b98d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
0b991     40 00 40 00 
0b995     60 00 60 00 
0b999     80 00 80 00 
0b99d     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
0b9a1     BF 00 BF 00 
0b9a5     DF 00 DF 00 
0b9a9     FF 00 FF 00 
0b9ad     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
0b9b1     FF 39 FF 00 
0b9b5     FF 55 FF 00 
0b9b9     FF 71 FF 00 
0b9bd     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
0b9c1     FF AA FF 00 
0b9c5     FF C6 FF 00 
0b9c9     FF E3 FF 00 
0b9cd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
0b9d1     40 00 20 00 
0b9d5     60 00 30 00 
0b9d9     80 00 40 00 
0b9dd     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
0b9e1     BF 00 60 00 
0b9e5     DF 00 70 00 
0b9e9     FF 00 80 00 
0b9ed     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
0b9f1     FF 39 9C 00 
0b9f5     FF 55 AA 00 
0b9f9     FF 71 B8 00 
0b9fd     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
0ba01     FF AA D5 00 
0ba05     FF C6 E3 00 
0ba09     FF E3 F1 00 
0ba0d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
0ba11     40 00 00 00 
0ba15     60 00 00 00 
0ba19     80 00 00 00 
0ba1d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
0ba21     BF 00 00 00 
0ba25     DF 00 00 00 
0ba29     FF 00 00 00 
0ba2d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
0ba31     FF 39 39 00 
0ba35     FF 55 55 00 
0ba39     FF 71 71 00 
0ba3d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
0ba41     FF AA AA 00 
0ba45     FF C6 C6 00 
0ba49     FF E3 E3 00 
0ba4d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
0ba51     40 10 00 00 
0ba55     60 18 00 00 
0ba59     80 20 00 00 
0ba5d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
0ba61     BF 30 00 00 
0ba65     DF 38 00 00 
0ba69     FF 40 00 00 
0ba6d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
0ba71     FF 6A 39 00 
0ba75     FF 80 55 00 
0ba79     FF 95 71 00 
0ba7d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
0ba81     FF BF AA 00 
0ba85     FF D5 C6 00 
0ba89     FF EA E3 00 
0ba8d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
0ba91     40 20 00 00 
0ba95     60 30 00 00 
0ba99     80 40 00 00 
0ba9d     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
0baa1     BF 60 00 00 
0baa5     DF 70 00 00 
0baa9     FF 80 00 00 
0baad     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
0bab1     FF 9C 39 00 
0bab5     FF AA 55 00 
0bab9     FF B8 71 00 
0babd     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
0bac1     FF D5 AA 00 
0bac5     FF E3 C6 00 
0bac9     FF F1 E3 00 
0bacd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
0bad1     40 30 00 00 
0bad5     60 48 00 00 
0bad9     80 60 00 00 
0badd     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
0bae1     BF 90 00 00 
0bae5     DF A8 00 00 
0bae9     FF C0 00 00 
0baed     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
0baf1     FF CE 39 00 
0baf5     FF D5 55 00 
0baf9     FF DC 71 00 
0bafd     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
0bb01     FF EA AA 00 
0bb05     FF F1 C6 00 
0bb09     FF F8 E3 00 
0bb0d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
0bb11     30 40 00 00 
0bb15     48 60 00 00 
0bb19     60 80 00 00 
0bb1d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
0bb21     90 BF 00 00 
0bb25     A8 DF 00 00 
0bb29     C0 FF 00 00 
0bb2d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
0bb31     CE FF 39 00 
0bb35     D5 FF 55 00 
0bb39     DC FF 71 00 
0bb3d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
0bb41     EA FF AA 00 
0bb45     F1 FF C6 00 
0bb49     F8 FF E3 00 
0bb4d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
0bb51     00 40 00 00 
0bb55     00 60 00 00 
0bb59     00 80 00 00 
0bb5d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
0bb61     00 BF 00 00 
0bb65     00 DF 00 00 
0bb69     00 FF 00 00 
0bb6d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
0bb71     39 FF 39 00 
0bb75     55 FF 55 00 
0bb79     71 FF 71 00 
0bb7d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
0bb81     AA FF AA 00 
0bb85     C6 FF C6 00 
0bb89     E3 FF E3 00 
0bb8d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
0bb91     00 40 14 00 
0bb95     00 60 1E 00 
0bb99     00 80 28 00 
0bb9d     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
0bba1     00 BF 3C 00 
0bba5     00 DF 46 00 
0bba9     00 FF 50 00 
0bbad     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
0bbb1     39 FF 77 00 
0bbb5     55 FF 8A 00 
0bbb9     71 FF 9E 00 
0bbbd     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
0bbc1     AA FF C5 00 
0bbc5     C6 FF D8 00 
0bbc9     E3 FF EC 00 
0bbcd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
0bbd1     00 40 28 00 
0bbd5     00 60 3C 00 
0bbd9     00 80 50 00 
0bbdd     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
0bbe1     00 BF 78 00 
0bbe5     00 DF 8C 00 
0bbe9     00 FF A0 00 
0bbed     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
0bbf1     39 FF B5 00 
0bbf5     55 FF C0 00 
0bbf9     71 FF CA 00 
0bbfd     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
0bc01     AA FF DF 00 
0bc05     C6 FF EA 00 
0bc09     E3 FF F4 00 
0bc0d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
0bc11     00 40 40 00 
0bc15     00 60 60 00 
0bc19     00 80 80 00 
0bc1d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
0bc21     00 BF BF 00 
0bc25     00 DF DF 00 
0bc29     00 FF FF 00 
0bc2d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
0bc31     39 FF FF 00 
0bc35     55 FF FF 00 
0bc39     71 FF FF 00 
0bc3d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
0bc41     AA FF FF 00 
0bc45     C6 FF FF 00 
0bc49     E3 FF FF 00 
0bc4d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
0bc51     00 28 40 00 
0bc55     00 3C 60 00 
0bc59     00 50 80 00 
0bc5d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
0bc61     00 78 BF 00 
0bc65     00 8C DF 00 
0bc69     00 A0 FF 00 
0bc6d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
0bc71     39 B5 FF 00 
0bc75     55 C0 FF 00 
0bc79     71 CA FF 00 
0bc7d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
0bc81     AA DF FF 00 
0bc85     C6 EA FF 00 
0bc89     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
0bc8c     00 00 00 00 
0bc90     00          | ataripalette2  file "ataripalettep2.def"
0bc91     11 11 11 00 
0bc95     22 22 22 00 
0bc99     33 33 33 00 
0bc9d     44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
0bca1     55 55 55 00 
0bca5     66 66 66 00 
0bca9     77 77 77 00 
0bcad     88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
0bcb1     99 99 99 00 
0bcb5     AA AA AA 00 
0bcb9     BB BB BB 00 
0bcbd     CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
0bcc1     DD DD DD 00 
0bcc5     EE EE EE 00 
0bcc9     FF FF FF 00 
0bccd     00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
0bcd1     00 14 40 00 
0bcd5     00 1E 60 00 
0bcd9     00 28 80 00 
0bcdd     00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
0bce1     00 3C BF 00 
0bce5     00 46 DF 00 
0bce9     00 50 FF 00 
0bced     1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
0bcf1     39 77 FF 00 
0bcf5     55 8A FF 00 
0bcf9     71 9E FF 00 
0bcfd     8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
0bd01     AA C5 FF 00 
0bd05     C6 D8 FF 00 
0bd09     E3 EC FF 00 
0bd0d     00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
0bd11     00 00 40 00 
0bd15     00 00 60 00 
0bd19     00 00 80 00 
0bd1d     00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
0bd21     00 00 BF 00 
0bd25     00 00 DF 00 
0bd29     00 00 FF 00 
0bd2d     1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
0bd31     39 39 FF 00 
0bd35     55 55 FF 00 
0bd39     71 71 FF 00 
0bd3d     8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
0bd41     AA AA FF 00 
0bd45     C6 C6 FF 00 
0bd49     E3 E3 FF 00 
0bd4d     10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
0bd51     20 00 40 00 
0bd55     30 00 60 00 
0bd59     40 00 80 00 
0bd5d     50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
0bd61     60 00 BF 00 
0bd65     70 00 DF 00 
0bd69     80 00 FF 00 
0bd6d     8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
0bd71     9C 39 FF 00 
0bd75     AA 55 FF 00 
0bd79     B8 71 FF 00 
0bd7d     C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
0bd81     D5 AA FF 00 
0bd85     E3 C6 FF 00 
0bd89     F1 E3 FF 00 
0bd8d     20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
0bd91     40 00 40 00 
0bd95     60 00 60 00 
0bd99     80 00 80 00 
0bd9d     9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
0bda1     BF 00 BF 00 
0bda5     DF 00 DF 00 
0bda9     FF 00 FF 00 
0bdad     FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
0bdb1     FF 39 FF 00 
0bdb5     FF 55 FF 00 
0bdb9     FF 71 FF 00 
0bdbd     FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
0bdc1     FF AA FF 00 
0bdc5     FF C6 FF 00 
0bdc9     FF E3 FF 00 
0bdcd     20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
0bdd1     40 00 20 00 
0bdd5     60 00 30 00 
0bdd9     80 00 40 00 
0bddd     9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
0bde1     BF 00 60 00 
0bde5     DF 00 70 00 
0bde9     FF 00 80 00 
0bded     FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
0bdf1     FF 39 9C 00 
0bdf5     FF 55 AA 00 
0bdf9     FF 71 B8 00 
0bdfd     FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
0be01     FF AA D5 00 
0be05     FF C6 E3 00 
0be09     FF E3 F1 00 
0be0d     20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
0be11     40 00 00 00 
0be15     60 00 00 00 
0be19     80 00 00 00 
0be1d     9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
0be21     BF 00 00 00 
0be25     DF 00 00 00 
0be29     FF 00 00 00 
0be2d     FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
0be31     FF 39 39 00 
0be35     FF 55 55 00 
0be39     FF 71 71 00 
0be3d     FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
0be41     FF AA AA 00 
0be45     FF C6 C6 00 
0be49     FF E3 E3 00 
0be4d     20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
0be51     40 10 00 00 
0be55     60 18 00 00 
0be59     80 20 00 00 
0be5d     9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
0be61     BF 30 00 00 
0be65     DF 38 00 00 
0be69     FF 40 00 00 
0be6d     FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
0be71     FF 6A 39 00 
0be75     FF 80 55 00 
0be79     FF 95 71 00 
0be7d     FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
0be81     FF BF AA 00 
0be85     FF D5 C6 00 
0be89     FF EA E3 00 
0be8d     20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
0be91     40 20 00 00 
0be95     60 30 00 00 
0be99     80 40 00 00 
0be9d     9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
0bea1     BF 60 00 00 
0bea5     DF 70 00 00 
0bea9     FF 80 00 00 
0bead     FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
0beb1     FF 9C 39 00 
0beb5     FF AA 55 00 
0beb9     FF B8 71 00 
0bebd     FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
0bec1     FF D5 AA 00 
0bec5     FF E3 C6 00 
0bec9     FF F1 E3 00 
0becd     20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
0bed1     40 30 00 00 
0bed5     60 48 00 00 
0bed9     80 60 00 00 
0bedd     9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
0bee1     BF 90 00 00 
0bee5     DF A8 00 00 
0bee9     FF C0 00 00 
0beed     FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
0bef1     FF CE 39 00 
0bef5     FF D5 55 00 
0bef9     FF DC 71 00 
0befd     FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
0bf01     FF EA AA 00 
0bf05     FF F1 C6 00 
0bf09     FF F8 E3 00 
0bf0d     18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
0bf11     30 40 00 00 
0bf15     48 60 00 00 
0bf19     60 80 00 00 
0bf1d     78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
0bf21     90 BF 00 00 
0bf25     A8 DF 00 00 
0bf29     C0 FF 00 00 
0bf2d     C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
0bf31     CE FF 39 00 
0bf35     D5 FF 55 00 
0bf39     DC FF 71 00 
0bf3d     E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
0bf41     EA FF AA 00 
0bf45     F1 FF C6 00 
0bf49     F8 FF E3 00 
0bf4d     00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
0bf51     00 40 00 00 
0bf55     00 60 00 00 
0bf59     00 80 00 00 
0bf5d     00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
0bf61     00 BF 00 00 
0bf65     00 DF 00 00 
0bf69     00 FF 00 00 
0bf6d     1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
0bf71     39 FF 39 00 
0bf75     55 FF 55 00 
0bf79     71 FF 71 00 
0bf7d     8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
0bf81     AA FF AA 00 
0bf85     C6 FF C6 00 
0bf89     E3 FF E3 00 
0bf8d     00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
0bf91     00 40 14 00 
0bf95     00 60 1E 00 
0bf99     00 80 28 00 
0bf9d     00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
0bfa1     00 BF 3C 00 
0bfa5     00 DF 46 00 
0bfa9     00 FF 50 00 
0bfad     1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
0bfb1     39 FF 77 00 
0bfb5     55 FF 8A 00 
0bfb9     71 FF 9E 00 
0bfbd     8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
0bfc1     AA FF C5 00 
0bfc5     C6 FF D8 00 
0bfc9     E3 FF EC 00 
0bfcd     00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
0bfd1     00 40 28 00 
0bfd5     00 60 3C 00 
0bfd9     00 80 50 00 
0bfdd     00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
0bfe1     00 BF 78 00 
0bfe5     00 DF 8C 00 
0bfe9     00 FF A0 00 
0bfed     1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
0bff1     39 FF B5 00 
0bff5     55 FF C0 00 
0bff9     71 FF CA 00 
0bffd     8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
0c001     AA FF DF 00 
0c005     C6 FF EA 00 
0c009     E3 FF F4 00 
0c00d     00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
0c011     00 40 40 00 
0c015     00 60 60 00 
0c019     00 80 80 00 
0c01d     00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
0c021     00 BF BF 00 
0c025     00 DF DF 00 
0c029     00 FF FF 00 
0c02d     1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
0c031     39 FF FF 00 
0c035     55 FF FF 00 
0c039     71 FF FF 00 
0c03d     8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
0c041     AA FF FF 00 
0c045     C6 FF FF 00 
0c049     E3 FF FF 00 
0c04d     00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
0c051     00 28 40 00 
0c055     00 3C 60 00 
0c059     00 50 80 00 
0c05d     00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
0c061     00 78 BF 00 
0c065     00 8C DF 00 
0c069     00 A0 FF 00 
0c06d     1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
0c071     39 B5 FF 00 
0c075     55 C0 FF 00 
0c079     71 CA FF 00 
0c07d     8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
0c081     AA DF FF 00 
0c085     C6 EA FF 00 
0c089     E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
0c08c                 | 
0c08c                 | '**********************************************************************************
0c08c                 | '
0c08c                 | '        Timings and colors definitions
0c08c                 | '
0c08c                 | '**********************************************************************************
0c08c                 | 
0c08c                 | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
0c08c     08 00 00 00 
0c090     3C 00 00 00 
0c094     08 00 00 00 
0c098     00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
0c09c     07 00 00 00 
0c0a0     04 00 00 00 
0c0a4     01 00 00 00 
0c0a8     80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
0c0ac     58 02 00 00 
0c0b0     20 9E 4B 14 
0c0b4     FB A8 9E 01 
0c0b8     58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
0c0bc     00 00 00 00 
0c0c0     C0 00 00 00 
0c0c4     00 00 00 00 
0c0c8     00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0c0cc                 | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
0c0cc     00 75 C7 97 
0c0d0     27 47 F6 0A 
0c0d4     05 79 CB 9B 
0c0d8     2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
0c0dc                 | 
0c0dc                 | ''--------  Initialization  ----------------------------------------------------------------
0c0dc                 | 
0c0dc     28 0C 64 FD | hdmi            setq    #6
0c0e0     00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
0c0e4     28 10 64 FD |                 setq    #8
0c0e8     D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
0c0ec                 | 
0c0ec     1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
0c0f0     3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
0c0f4     C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
0c0f8     D6 C6 01 F1 |                 add     t1,hbase
0c0fc     58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
0c100     E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
0c104     7B 0B 80 5F 
0c108     E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
0c10c     66 66 86 FF 
0c110     1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
0c114                 | '
0c114     D6 C6 01 F6 |                 mov 	t1,hbase			   '
0c118     11 C6 65 F0 |                 shl 	t1,#17                             '
0c11c     E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
0c120     02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
0c124                 | 
0c124     01 C6 61 FD |                 cogid   t1              		   ' get a cogid
0c128     0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
0c12c     E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
0c130                 | 
0c130                 | ''--------  frame rendering main loop  ---------------------------------------------------
0c130                 | 
0c130     28 06 64 FD | p101            setq 	#3
0c134     00 A5 05 FB | 		rdlong  vblankptr,ptra
0c138     28 6A 64 FD |                 setq    #47+6				   ' read sprite data
0c13c     D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
0c140     00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
0c144     00 A0 05 F6 |                 mov     dlinum, #0
0c148     01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
0c14c     D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
0c150                 | 
0c150                 | 
0c150     00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
0c154     00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
0c158     ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
0c15c                 |                 
0c15c                 | 
0c15c                 | 
0c15c                 | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
0c15c                 |   
0c15c     1F A8 15 F4 |                 testb   paletteptr,#31 wc
0c160     29 FE 65 3D |          if_nc  setq2   #255
0c164     D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
0c168                 | 
0c168                 | '' -----   up porch (before the picture)
0c168                 | 
0c168     C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
0c16c     C1 C4 01 F6 |                 mov     hsync1,sync_001	
0c170     40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
0c174     D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
0c178                 |  
0c178                 |    
0c178                 |  
0c178     E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
0c17c     E2 8C B1 FC |                 xzero   m_sn,hsync1
0c180     60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
0c184     E1 8E C1 FC |                 xcont   m_bv,hsync0     
0c188     E1 90 C1 FC |                 xcont   m_vi,hsync0
0c18c     DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
0c190                 | 
0c190     E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
0c194     E2 8C B1 FC |                 xzero   m_sn,hsync1
0c198     48 00 B0 FD | 		call    #dli
0c19c     E1 8E C1 FC |                 xcont   m_bv,hsync0     
0c1a0     E1 90 C1 FC |                 xcont   m_vi,hsync0
0c1a4     20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
0c1a8                 |                 	
0c1a8                 |                 
0c1a8                 | 
0c1a8                 |  
0c1a8                 | '' ------- the main screen drawing starts here
0c1a8                 | 
0c1a8     E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
0c1ac     E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
0c1b0     30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
0c1b4     E1 8E C1 FC |                 xcont   m_bv,hsync0
0c1b8     00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
0c1bc     01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
0c1c0     04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
0c1c4                 |               
0c1c4                 | 
0c1c4     CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
0c1c8     DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
0c1cc                 | 
0c1cc                 | ' ---------------- All visible lines displayed now, start vblank  
0c1cc                 | 
0c1cc     D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
0c1d0     28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
0c1d4     C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
0c1d8     C3 C4 01 F6 |                 mov     hsync1,sync_223
0c1dc     25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
0c1e0     4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
0c1e4                 | 
0c1e4                 | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
0c1e4                 | 
0c1e4                 | '' --------------- Display list interpreter ---------------------------------------------------------------------------
0c1e4                 | 
0c1e4     00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
0c1e8                 | 
0c1e8     DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
0c1ec     04 B8 05 A1 |     if_z        add     dlptr2,#4
0c1f0     14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
0c1f4                 | 
0c1f4     01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
0c1f8     EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
0c1fc     E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
0c200     EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
0c204     DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
0c208                 | 
0c208     DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
0c20c     DD C6 41 F8 |                 getnib  t1,dl,#0
0c210     02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
0c214     70 00 90 AD |     if_z        jmp     #preload
0c218     00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
0c21c     94 00 90 AD |     if_z        jmp     #preload2
0c220     01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
0c224     0C 00 90 AD |     if_z        jmp     #p390
0c228     03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
0c22c     28 00 90 AD |     if_z        jmp     #p391  
0c230                 | 
0c230     2D 00 64 FD | p308            ret
0c234                 |    
0c234     DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
0c238     E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
0c23c     04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
0c240     ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
0c244     E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
0c248     E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
0c24c     04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
0c250     04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
0c254     8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
0c258                 |  
0c258                 | '' --------  Reload palette. To do 
0c258                 | 
0c258     E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
0c25c     04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
0c260     0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
0c264     29 1E 64 FD |          	setq2   #15				   ' load 16 entries
0c268     00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
0c26c     E0 00 00 FB |         	rdlong  $000, framebuf2         	
0c270     70 FF 9F FD |         	jmp     #dli                
0c274                 |       
0c274                 | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
0c274                 | 
0c274                 | 
0c274                 | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
0c274                 | 
0c274     E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
0c278     E2 8C B1 FC |                 xzero   m_sn,hsync1
0c27c     E1 8E C1 FC |                 xcont   m_bv,hsync0     
0c280     E1 90 C1 FC |                 xcont   m_vi,hsync0
0c284     FB ED 6F 0B |         _ret_   djnz    pa,#blank
0c288                 |         
0c288                 | '' -------------- Preload a line from PSRAM        
0c288                 |         
0c288     D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
0c28c     0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
0c290     DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
0c294     DE B4 01 F6 |                 mov     buf1,buf1c
0c298     03 A0 05 F7 |                 incmod  dlinum,#3
0c29c                 | 
0c29c     04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
0c2a0     32 B7 01 F6 |                 mov     buf2,a1024
0c2a4     E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
0c2a8     0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
0c2ac     28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
0c2b0     D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
0c2b4                 |  
0c2b4                 |  
0c2b4                 | preload2      '  incmod  dlinum,#3
0c2b4     04 C0 45 F0 |                 shr 	framebuf2,#4
0c2b8     ED B2 01 F6 |                 mov 	cmd,affffffff
0c2bc     E0 B4 01 F6 |                 mov 	buf1,framebuf2
0c2c0     28 02 64 FD |                 setq	#1
0c2c4     D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
0c2c8                 |                 
0c2c8                 | 
0c2c8                 | '' -------------- Draw sprites
0c2c8                 | 
0c2c8     CF 5C 02 F6 | sprite          mov t8,frames
0c2cc     10 5C 0E F5 | 		and t8,#16 wz
0c2d0     11 48 06 F6 |                 mov spritenum, #17			' 16 +2 sprites. Todo: this should be a parameter
0c2d4     10 48 06 A6 | 	if_z    mov spritenum, #16	
0c2d8                 | 		
0c2d8                 | 
0c2d8     24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
0c2dc     03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
0c2e0     EF 56 96 F9 |                 alts    t5,#sprite1xy
0c2e4     00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
0c2e8     0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
0c2ec     EF 56 96 F9 |                 alts    t5,#sprite1xy
0c2f0     00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
0c2f4     0F 4C 66 F7 |                 signx	sprite_x,#15
0c2f8     F0 56 96 F9 |                 alts    t5,#sprite1wh
0c2fc     00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
0c300     01 52 86 F1 |                 sub     sprite_h,#1
0c304     F0 56 96 F9 |                 alts    t5,#sprite1wh
0c308     00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
0c30c                 | 
0c30c                 | 
0c30c     32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
0c310     BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
0c314     00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
0c318     B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
0c31c     00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
0c320     AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
0c324     00 5E 06 F6 |                 mov 	t9,#0
0c328     28 5F 82 F1 |                 sub 	t9,sprite_w                      	
0c32c     2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
0c330     9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
0c334                 |      
0c334     CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
0c338     27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
0c33c     90 00 90 CD |      if_c       jmp     #p801				' if not, go out
0c340     29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
0c344     88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
0c348                 |                 
0c348     25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
0c34c     0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
0c350     DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
0c354                 |   		
0c354     1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
0c358     26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
0c35c                 | 
0c35c     28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
0c360     26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
0c364     26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
0c368                 |  
0c368     EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
0c36c     00 C8 01 F1 |                 add     t2,0-0				' then add the offset
0c370     10 00 90 CD |      if_c 	jmp     #p899		
0c374                 | 	
0c374                 | 	
0c374     26 CD 01 F6 | 		mov 	t4,sprite_x	'
0c378     28 CD 01 F1 | 		add	t4,sprite_w
0c37c     32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
0c380                 | 
0c380     E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
0c384                 | 
0c384     28 59 02 F6 | p899		mov 	t6,sprite_w
0c388     01 58 86 F1 | 	 	sub     t6,#1
0c38c     02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
0c390                 | 
0c390     28 58 62 FD |                 setq   	t6
0c394     E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
0c398     28 5D 02 F6 |                 mov t8,sprite_w
0c39c     03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
0c3a0     24 00 90 AD |         if_z    jmp #p898
0c3a4                 |          
0c3a4                 |         
0c3a4     70 5F 06 F6 |                 mov  t9,#368
0c3a8     2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
0c3ac                 | 
0c3ac     04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
0c3b0     08 5C 06 FA |                 mul t8,#8				' bits to shr
0c3b4     FF FF 7F FF 
0c3b8     FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
0c3bc     2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
0c3c0     00 5E 8E F9 |                 altd t9,#0				' and mask 
0c3c4     2D 01 00 F5 |                 and 0-0, t7
0c3c8                 |                
0c3c8                 | 
0c3c8     28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
0c3cc     E5 E0 7A FA |                 wmlong 368,t3				
0c3d0                 |                 
0c3d0     C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
0c3d4     03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
0c3d8     2D 00 64 FD |                 ret
0c3dc                 | 	
0c3dc                 | 	
0c3dc                 |                
0c3dc                 |  
0c3dc                 | '' -------------- Graphics line ------------------------------------------------------------
0c3dc                 |  
0c3dc                 | 
0c3dc                 | '' consts and vars
0c3dc                 | 
0c3dc     52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
0c3e0     AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
0c3e4     52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
0c3e8     AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
0c3ec                 | 
0c3ec     00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
0c3f0                 | 
0c3f0                 | '------ these longs will be set by setmode function
0c3f0                 | 
0c3f0     00 00 00 00 | m_bs            long    0        'blanks before sync
0c3f4     00 00 00 00 | m_sn            long    0        'sync
0c3f8     00 00 00 00 | m_bv            long    0        'blanks before visible
0c3fc     00 00 00 00 | m_vi            long    0        'visible pixels #
0c400                 | 'm_border        long    0        'left/right borders
0c400     00 00 00 00 | i_upporch       long    0        'up porch lines
0c404     00 00 00 00 | i_vsync         long    0        'vsync lines
0c408     00 00 00 00 | i_downporch     long    0        'down porch lines
0c40c     00 00 00 00 | i_cpl           long    0        'chars/longs per line
0c410     00 00 00 00 | i_totalvis      long    0
0c414                 | 
0c414                 | '-------------------------------------
0c414                 |  
0c414     00 00 00 00 | linenum         long    0
0c418     00 00 00 00 | frames          long    0
0c41c     00 00 00 00 | dlinum long 0
0c420     00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
0c424                 | 
0c424     00 00 00 00 | vblankptr       long    0
0c428     00 00 00 00 | modeptr         long    0
0c42c     00 00 00 00 | paletteptr      long    0
0c430     00 00 00 00 | dlptr           long    0
0c434     01 00 00 00 | hbase           long    1
0c438     00 00 00 00 | mailbox         long    0
0c43c     00 00 00 00 | spriteptr          long 0
0c440                 | 
0c440     00 00 00 00 | cmd             long    0
0c444     00 EC 07 00 | buf1            long    $80000-1024-4096
0c448     00 04 00 00 | buf2            long    1024
0c44c     01 00 00 00 | dlptr2          long    1
0c450     01 00 00 00 | dl              long    1
0c454                 | 
0c454     00 00 00 00 | buf1c long 0
0c458     00 EC 07 00 | buf1d            long    $80000-1024-4096
0c45c     01 00 00 00 | framebuf2       long    1
0c460     01 00 00 00 | hsync0          long    1
0c464     01 00 00 00 | hsync1          long    1
0c468                 | 
0c468     01 00 00 00 | t1              long    1
0c46c     00 00 00 00 | t2 long 0
0c470     00 00 00 00 | t3 long 0
0c474     00 00 00 00 | t4 long 0
0c478                 | 
0c478     00 00 00 00 | rcnt            long    0  'dl repeat count
0c47c     00 00 00 00 | rcnt2           long    0
0c480     00 00 00 00 | rcnt2a          long    0
0c484     00 00 00 00 | roffset         long    0
0c488     00 00 00 00 | rdl             long    0  'dl repeat line
0c48c     00 00 00 00 | dlc             long    0  'dl command
0c490                 | 
0c490     FF FF FF FF | affffffff       long    $ffffffff
0c494     00 00 00 00 | sprite1pointer long 0
0c498     00 00 00 00 | sprite1xy      long 0
0c49c     00 00 00 00 | sprite1wh      long 0
0c4a0     00 00 00 00 | sprite2pointer long 0
0c4a4     00 00 00 00 | sprite2xy      long 0
0c4a8     00 00 00 00 | sprite2wh      long 0
0c4ac     00 00 00 00 | sprite3pointer long 0
0c4b0     00 00 00 00 | sprite3xy      long 0
0c4b4     00 00 00 00 | sprite3wh      long 0
0c4b8     00 00 00 00 | sprite4pointer long 0
0c4bc     00 00 00 00 | sprite4xy      long 0
0c4c0     00 00 00 00 | sprite4wh      long 0
0c4c4     00 00 00 00 | sprite5pointer long 0
0c4c8     00 00 00 00 | sprite5xy      long 0
0c4cc     00 00 00 00 | sprite5wh      long 0
0c4d0     00 00 00 00 | sprite6pointer long 0
0c4d4     00 00 00 00 | sprite6xy      long 0
0c4d8     00 00 00 00 | sprite6wh      long 0
0c4dc     00 00 00 00 | sprite7pointer long 0
0c4e0     00 00 00 00 | sprite7xy      long 0
0c4e4     00 00 00 00 | sprite7wh      long 0
0c4e8     00 00 00 00 | sprite8pointer long 0
0c4ec     00 00 00 00 | sprite8xy      long 0
0c4f0     00 00 00 00 | sprite8wh      long 0
0c4f4     00 00 00 00 | sprite9pointer long 0
0c4f8     00 00 00 00 | sprite9xy      long 0
0c4fc     00 00 00 00 | sprite9wh      long 0
0c500     00 00 00 00 | sprite10pointer long 0
0c504     00 00 00 00 | sprite10xy      long 0
0c508     00 00 00 00 | sprite10wh      long 0
0c50c     00 00 00 00 | sprite11pointer long 0
0c510     00 00 00 00 | sprite11xy      long 0
0c514     00 00 00 00 | sprite11wh      long 0
0c518     00 00 00 00 | sprite12pointer long 0
0c51c     00 00 00 00 | sprite12xy      long 0
0c520     00 00 00 00 | sprite12wh      long 0
0c524     00 00 00 00 | sprite13pointer long 0
0c528     00 00 00 00 | sprite13xy      long 0
0c52c     00 00 00 00 | sprite13wh      long 0
0c530     00 00 00 00 | sprite14pointer long 0
0c534     00 00 00 00 | sprite14xy      long 0
0c538     00 00 00 00 | sprite14wh      long 0
0c53c     00 00 00 00 | sprite15pointer long 0
0c540     00 00 00 00 | sprite15xy      long 0
0c544     00 00 00 00 | sprite15wh      long 0
0c548     00 00 00 00 | sprite16pointer long 0
0c54c     00 00 00 00 | sprite16xy      long 0
0c550     00 00 00 00 | sprite16wh      long 0
0c554     00 00 00 00 | sprite17pointer long 0
0c558     00 00 00 00 | sprite17xy      long 0
0c55c     00 00 00 00 | sprite17wh      long 0
0c560     00 00 00 00 | sprite18pointer long 0
0c564     00 00 00 00 | sprite18xy      long 0
0c568     00 00 00 00 | sprite18wh      long 0
0c56c     00 00 00 00 | spritenum long 0
0c570                 | 
0c570     00 00 00 00 | spriteline long 0
0c574     84 03 00 00 | sprite_x long 900
0c578     00 00 00 00 | sprite_y long 0
0c57c     10 00 00 00 | sprite_w long 16
0c580     40 00 00 00 | sprite_h long 64
0c584     00 00 00 00 | l2 long 0
0c588     00 00 00 00 | t5 long 0
0c58c     00 00 00 00 | t6 long 0
0c590     00 00 00 00 | t7 long 0
0c594     00 00 00 00 | t8 long 0
0c598     00 00 00 00 | t9 long 0
0c59c     00 00 00 00 | preloadaddr long 0
0c5a0     00 00 00 00 | preloadlineaddr long 0
0c5a4     00 04 00 00 | a1024 long 1024
0c5a8                 | 
0c5a8     E0 03 00 00 | aa long 992
0c5ac     FF 03 00 00 | a1023 long 1023
0c5b0     00 10 00 00 | a4096 long 4096
0c5b4                 |  fit 368
0c5b4                 |  fit 368
0c5b4                 | _psram_spin2_dat_
0c5b4     00 00 00 00 
      ...             
0c6ac     00 00 00 00 
0c6b0     00 00 00 00 |     listdata long 0[8*8]
0c6b4                 |             orgh
0c6b4                 | 
0c6b4                 | ' driver state
0c6b4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
0c6b8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
0c6bc                 | 
0c6bc                 | ' delay profile
0c6bc     07 00 00 00 
0c6c0     00 CF 7B 05 
0c6c4     80 D1 F0 08 
0c6c8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
0c6cc     80 C4 60 0F 
0c6d0     80 39 7A 12 
0c6d4     40 2D D9 13 
0c6d8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
0c6dc                 | 
0c6dc                 | ' data to be passed to driver when starting it
0c6dc                 | startupData
0c6dc     00 00 00 00 |     long    0           ' current frequency
0c6e0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
0c6e4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
0c6e8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
0c6ec     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
0c6f0     FC C6 00 00 |     long    deviceData  ' address of devices data structure in HUBRAM
0c6f4     7C C7 00 00 |     long    qosData     ' address of QoS data structure in HUBRAM
0c6f8     9C C7 00 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
0c6fc                 | 
0c6fc                 | ' data for memory
0c6fc                 | deviceData
0c6fc                 |     ' 16 bank parameters follow (16MB per bank)
0c6fc     00 00 00 00 
      ...             
0c734     00 00 00 00 
0c738     00 00 00 00 |     long    0[16]                               ' banks 0-15
0c73c                 |     ' 16 banks of pin parameters follow
0c73c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
0c740     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
0c744     FF FF FF FF 
      ...             
0c774     FF FF FF FF 
0c778     FF FF FF FF |     long    -1[14]                              ' banks 2-15
0c77c                 | 
0c77c                 | ' data for COG polling
0c77c                 | qosData 
0c77c     00 00 FF FF 
0c780     00 00 FF FF 
0c784     00 00 FF FF 
0c788     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
0c78c     00 00 FF FF 
0c790     00 00 FF FF 
0c794     00 00 FF FF 
0c798     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
0c79c                 |     
0c79c                 | ' mailbox storage
0c79c                 | 
0c79c                 | mailboxes
0c79c     00 00 00 00 
      ...             
0c7f4     00 00 00 00 
0c7f8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
0c7fc                 | 	alignl
0c7fc                 | _psram16drv_spin2_dat_
0c7fc                 |                             orgh
0c7fc     00 00 00 00 
      ...             
0c814     00 00 00 00 
0c818     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
0c81c                 | 
0c81c                 | driver_start
0c81c                 |                             org
0c81c 000             | '..................................................................................................
0c81c 000             | ' Memory layout for COG RAM once operational:
0c81c 000             | '
0c81c 000             | '  COG RAM address      Usage
0c81c 000             | '  ---------------      ----
0c81c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
0c81c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
0c81c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
0c81c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
0c81c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
0c81c 000             | '  ~$198-$1F3           State and register variables
0c81c 000             | '
0c81c 000             | ' Also during driver COG startup:
0c81c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
0c81c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
0c81c 000             | '..................................................................................................
0c81c 000             |                             
0c81c 000             | ' Mailbox storage after vector initialization
0c81c 000             | 
0c81c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
0c820 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
0c824 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
0c828 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
0c82c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
0c830 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
0c834 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
0c838 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
0c83c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
0c840 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
0c844 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
0c848 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
0c84c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
0c850 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
0c854 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
0c858 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
0c85c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
0c860 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
0c864 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
0c868 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
0c86c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
0c870 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
0c874 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
0c878 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
0c87c 018             | 
0c87c 018             | ' Mailbox parameter addresses per COG once patched
0c87c 018             |                             
0c87c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
0c880 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
0c884 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
0c888 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
0c88c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
0c890 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
0c894 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
0c898 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
0c89c 020             | 
0c89c 020             | '..................................................................................................
0c89c 020             | ' Per COG request and state setup and service branching
0c89c 020             |         
0c89c 020             | cog0                 
0c89c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
0c8a0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
0c8a4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
0c8a8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
0c8ac 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0c8b0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0c8b4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
0c8b8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
0c8bc 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
0c8c0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0c8c4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0c8c8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
0c8cc 02c             | cog1                        
0c8cc 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
0c8d0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
0c8d4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
0c8d8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
0c8dc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0c8e0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0c8e4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
0c8e8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
0c8ec 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
0c8f0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0c8f4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0c8f8 037 33 CA 63 FD |                             execf   request-0               'jump to service
0c8fc 038             | cog2                         
0c8fc 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
0c900 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
0c904 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
0c908 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
0c90c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0c910 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0c914 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
0c918 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
0c91c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
0c920 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0c924 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0c928 043 33 CA 63 FD |                             execf   request-0               'jump to service
0c92c 044             | cog3                        
0c92c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
0c930 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
0c934 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
0c938 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
0c93c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0c940 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0c944 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
0c948 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
0c94c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
0c950 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0c954 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0c958 04f 33 CA 63 FD |                             execf   request-0               'jump to service
0c95c 050             | cog4                        
0c95c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
0c960 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
0c964 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
0c968 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
0c96c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0c970 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0c974 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
0c978 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
0c97c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
0c980 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0c984 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0c988 05b 33 CA 63 FD |                             execf   request-0               'jump to service
0c98c 05c             | cog5                        
0c98c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
0c990 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
0c994 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
0c998 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
0c99c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0c9a0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0c9a4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
0c9a8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
0c9ac 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
0c9b0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0c9b4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0c9b8 067 33 CA 63 FD |                             execf   request-0               'jump to service
0c9bc 068             | cog6                        
0c9bc 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
0c9c0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
0c9c4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
0c9c8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
0c9cc 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0c9d0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0c9d4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
0c9d8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
0c9dc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
0c9e0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0c9e4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0c9e8 073 33 CA 63 FD |                             execf   request-0               'jump to service
0c9ec 074             | cog7                        
0c9ec 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
0c9f0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
0c9f4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
0c9f8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
0c9fc 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
0ca00 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
0ca04 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
0ca08 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
0ca0c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
0ca10 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
0ca14 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
0ca18 07f 33 CA 63 FD |                             execf   request-0               'jump to service
0ca1c 080             | 
0ca1c 080             |                             fit     128
0ca1c 080             |                             fit     128
0ca1c 080             | pad                         long    0[128-$]                'align init code to $80
0ca1c 080             | 
0ca1c 080             | '..................................................................................................
0ca1c 080             | 
0ca1c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
0ca1c 080             | 
0ca1c 080             | init                        
0ca1c 080             |                             ' get driver scratch long address in hub
0ca1c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
0ca20 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
0ca24 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
0ca28 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
0ca2c 084             |                     
0ca2c 084             |                             ' read in the additional LUT RAM code
0ca2c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
0ca30 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
0ca34 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
0ca38 087             | 
0ca38 087             |                             ' read the startup parameters
0ca38 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
0ca3c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
0ca40 089             | 
0ca40 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
0ca40 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
0ca44 08a             | 
0ca44 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
0ca48 08b 01 00 00 5F 
0ca4c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
0ca50 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
0ca54 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
0ca58 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
0ca5c 090             | 
0ca5c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
0ca5c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
0ca60 091 01 00 00 FF 
0ca64 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
0ca68 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
0ca6c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
0ca70 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
0ca74 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
0ca78 097 08 DE 47 F5 |                             or      a, #8
0ca7c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
0ca80 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
0ca84 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
0ca88 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
0ca8c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
0ca90 09d 01 DE 07 F1 |                             add     a, #1
0ca94 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
0ca98 09f             |  
0ca98 09f             |                             ' setup device control pin states
0ca98 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
0ca9c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
0caa0 0a1 01 00 00 FF 
0caa4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
0caa8 0a3             | 
0caa8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
0caac 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
0cab0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
0cab4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
0cab8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
0cabc 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
0cac0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
0cac4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
0cac8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
0cacc 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
0cad0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
0cad4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
0cad8 0af             | pinloop
0cad8 0af             |                             ' generate minimum CE high time before access
0cad8 0af A1 07 00 FF 
0cadc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
0cae0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
0cae4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
0cae8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
0caec 0b4 1F DE 63 FD |                             waitx   a                       'delay
0caf0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
0caf4 0b6             | 
0caf4 0b6             |                             ' setup the COG mailboxes and addresses 
0caf4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
0caf8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
0cafc 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
0cb00 0b9             | 
0cb00 0b9 28 2E 64 FD |                             setq    #24-1
0cb04 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
0cb08 0bb             | 
0cb08 0bb             |                             ' setup the polling loop for active COGs 
0cb08 0bb 01 C2 63 FD |                             cogid   id
0cb0c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
0cb10 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
0cb14 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
0cb18 0bf 0A F0 07 F6 |                             mov     ptra, #10
0cb1c 0c0 E1 F1 03 FA |                             mul     ptra, id
0cb20 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
0cb24 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
0cb28 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
0cb2c 0c4 03 C2 07 FA |                             mul     id, #3
0cb30 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
0cb34 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
0cb38 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
0cb3c 0c8 D8 01 B0 FD |                             call    #reloadcogs
0cb40 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
0cb44 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
0cb48 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
0cb48 0cb D8 E5 B7 F9 |                             setd    d, #addr1
0cb4c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
0cb50 0cd 08 04 DC FC |                             rep     #2, #8
0cb54 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
0cb58 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
0cb5c 0d0             | 
0cb5c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
0cb5c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
0cb5c 0d0 01 C2 63 FD |                             cogid   id
0cb60 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
0cb64 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
0cb68 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
0cb6c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
0cb70 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
0cb74 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
0cb78 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
0cb7c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
0cb80 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
0cb84 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
0cb88 0db 3F E4 A7 F9 |                             alti    d, #%111_111
0cb8c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
0cb90 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
0cb94 0de A5 E5 03 F1 |                             add     d, const512
0cb98 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
0cb9c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
0cba0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
0cba4 0e2             |                             
0cba4 0e2             |                             ' setup register values for control vector loop setup after we return
0cba4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
0cba8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
0cbac 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
0cbb0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
0cbb4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
0cbb8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
0cbbc 0e8 D0 C3 8F F9 |                             altd    id, #id0
0cbc0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
0cbc4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
0cbc8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
0cbcc 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
0cbd0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
0cbd4 0ee             |  
0cbd4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
0cbd8 0ef 07 CA 07 F5 |                             and     request, #7
0cbdc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
0cbe0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
0cbe4 0f2             | 
0cbe4 0f2             |                             fit     $100                    'ensure all init code fits this space
0cbe4 0f2             |                             fit     $100                    'ensure all init code fits this space
0cbe4 0f2             | 
0cbe4 0f2 00 00 00 00 
      ...             
0cc14 0fe 00 00 00 00 
0cc18 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
0cc1c 100             | 
0cc1c 100             | '..................................................................................................
0cc1c 100             | ' Error result handling and COG notification of request completion
0cc1c 100             | 
0cc1c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
0cc20 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
0cc24 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
0cc28 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
0cc2c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
0cc30 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
0cc34 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
0cc38 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
0cc3c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
0cc40 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
0cc44 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
0cc48 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
0cc4c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
0cc50 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
0cc54 10e             | ' Poller re-starts here after a COG is serviced
0cc54 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
0cc58 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
0cc5c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
0cc60 111             | ' Main dynamic polling loop repeats until a request arrives
0cc60 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
0cc64 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
0cc68 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
0cc6c 114             | 
0cc6c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
0cc70 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
0cc74 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
0cc78 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
0cc7c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
0cc80 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
0cc84 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
0cc88 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
0cc8c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
0cc90 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
0cc94 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
0cc98 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
0cc9c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
0cca0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
0cca4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
0cca8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
0ccac 124             | 
0ccac 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
0ccb0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
0ccb4 126             |  
0ccb4 126             | '..................................................................................................
0ccb4 126             | ' List handler                               
0ccb4 126             | 
0ccb4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
0ccb8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
0ccbc 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
0ccc0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
0ccc4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
0ccc8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
0cccc 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
0ccd0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
0ccd4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
0ccd8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
0ccdc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
0cce0 131 33 00 60 FD |                             execf   0-0                     'process the request 
0cce4 132             | 
0cce4 132             | '..................................................................................................
0cce4 132             | ' Restoring per COG state and resuming where we left off
0cce4 132             | 
0cce4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
0cce8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
0ccec 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
0ccf0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
0ccf4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
0ccf8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
0ccfc 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
0cd00 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
0cd04 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
0cd08 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
0cd0c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
0cd10 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
0cd14 13e             |                    
0cd14 13e             | '..................................................................................................
0cd14 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
0cd14 13e             | 
0cd14 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
0cd18 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
0cd1c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
0cd20 141 D0 DF B7 F9 |                             setd    a, #id0
0cd24 142 D8 DF BF F9 |                             sets    a, #addr1
0cd28 143 FE FF FF FF 
0cd2c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
0cd30 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
0cd34 146 3F DE A7 F9 |                             alti    a, #%111_111 
0cd38 147 00 00 F0 F9 |                             muxq    0-0, 0-0
0cd3c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
0cd40 149 01 E2 63 FD |                             cogid   c
0cd44 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
0cd48 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
0cd4c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
0cd50 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
0cd54 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
0cd58 14f 00 E0 03 F6 |                             mov     b, 0-0
0cd5c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
0cd60 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
0cd64 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
0cd68 153 0C 00 90 AD |             if_z            jmp     #excluded               
0cd6c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
0cd70 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
0cd74 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
0cd78 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
0cd7c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
0cd80 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
0cd84 15a             | 
0cd84 15a             | 'determine priority cogs and build instructions for the polling sequence
0cd84 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
0cd88 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
0cd8c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
0cd90 15d             | 
0cd90 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
0cd94 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
0cd98 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
0cd9c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
0cda0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
0cda4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
0cda8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
0cdac 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
0cdb0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
0cdb4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
0cdb8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
0cdbc 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
0cdc0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
0cdc4 16a             | endprioloop
0cdc4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
0cdc8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
0cdcc 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
0cdd0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
0cdd4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
0cdd8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
0cddc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
0cde0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
0cde4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
0cde8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
0cdec 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
0cdf0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
0cdf4 176             | 
0cdf4 176             | ' populate the round robin COG polling instructions
0cdf4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
0cdf8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
0cdfc 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
0ce00 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
0ce04 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
0ce08 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
0ce0c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
0ce10 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
0ce14 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
0ce18 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
0ce1c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
0ce20 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
0ce24 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
0ce28 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
0ce2c 184             | '..................................................................................................
0ce2c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
0ce2c 184             | 
0ce2c 184             | set_latency                                                 '            (a) set latency
0ce2c 184             | get_latency                                                 '            (b) get latency
0ce2c 184             | set_burst                                                   '            (c) set burst size of bank
0ce2c 184             | get_burst                                                   '            (d) get burst size of bank
0ce2c 184             |                                                             '            (e) dump state
0ce2c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
0ce30 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
0ce34 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
0ce38 187             |                                                             ' | | | | e  account for following AUGS
0ce38 187 04 00 00 FF 
0ce3c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
0ce40 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
0ce44 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
0ce48 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
0ce4c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
0ce50 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
0ce54 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
0ce58 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
0ce5c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
0ce60 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
0ce64 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
0ce68 193             | 
0ce68 193             | '..................................................................................................
0ce68 193             | ' Misc EXECF code
0ce68 193             | 
0ce68 193 33 72 63 FD | start_read_exec             execf   newburstr
0ce6c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
0ce70 195 33 78 63 FD | continue_read_exec          execf   lockedreads
0ce74 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
0ce78 197             | 
0ce78 197             | '..................................................................................................
0ce78 197             | ' Variables
0ce78 197             | 
0ce78 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
0ce7c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
0ce80 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
0ce84 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
0ce88 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
0ce8c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
0ce90 19d             | 
0ce90 19d 00 00 00 80 | xfreq1          long    $80000000
0ce94 19e 00 00 00 40 | xfreq2          long    $40000000
0ce98 19f 03 00 00 00 | delay           long    3
0ce9c 1a0             | 
0ce9c 1a0             | lutcodeaddr                 
0ce9c 1a0             | startupparams
0ce9c 1a0             | excludedcogs                                    'careful: shared register use!
0ce9c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
0cea0 1a1 00 00 00 00 | flags           long    0
0cea4 1a2             | mask                                            'careful: shared register use!
0cea4 1a2 00 00 00 00 | resetmaskA      long    0
0cea8 1a3             | limit                                           'careful: shared register use!
0cea8 1a3 00 00 00 00 | resetmaskB      long    0
0ceac 1a4 00 00 00 00 | datapins        long    0
0ceb0 1a5             | const512                                        'careful: shared register use!
0ceb0 1a5 00 00 00 00 | devicelist      long    0
0ceb4 1a6 00 00 00 00 | coglist         long    0
0ceb8 1a7 00 00 00 00 | mbox            long    0 
0cebc 1a8             | 
0cebc 1a8             | clkpin                                          'shared with code patched during init
0cebc 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
0cec0 1a9             | cspin                                           'shared with code patched during init
0cec0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
0cec4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
0cec8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
0cecc 1ac 01 00 00 00 | clkdelay        long    1
0ced0 1ad 00 00 00 00 | regdatabus      long    0
0ced4 1ae             | 
0ced4 1ae 10 00 00 00 | deviceaddr      long    $10
0ced8 1af             | rrcounter
0ced8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
0cedc 1b0             | 
0cedc 1b0             | ' jump addresses for the per COG handlers
0cedc 1b0 20 00 00 00 | cog0_handler    long    cog0
0cee0 1b1 2C 00 00 00 | cog1_handler    long    cog1
0cee4 1b2 38 00 00 00 | cog2_handler    long    cog2
0cee8 1b3 44 00 00 00 | cog3_handler    long    cog3
0ceec 1b4 50 00 00 00 | cog4_handler    long    cog4
0cef0 1b5 5C 00 00 00 | cog5_handler    long    cog5
0cef4 1b6 68 00 00 00 | cog6_handler    long    cog6
0cef8 1b7 74 00 00 00 | cog7_handler    long    cog7
0cefc 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
0cf00 1b9             | 
0cf00 1b9             | ' EXECF sequences
0cf00 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
0cf04 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
0cf08 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
0cf0c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
0cf10 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
0cf14 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
0cf18 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
0cf1c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
0cf1c 1c0             | 
0cf1c 1c0             | 
0cf1c 1c0             | ' SKIPF sequences
0cf1c 1c0             | skiptable
0cf1c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
0cf20 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
0cf24 1c2 00 00 00 00 |                 long    0                      ' read modify write long
0cf28 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
0cf2c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
0cf30 1c5 00 00 00 00 | pattern2        long    0
0cf34 1c6 00 00 00 00 | pattern3        long    0
0cf38 1c7 77 02 00 00 | singlelong      long    %1001110111  
0cf3c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
0cf40 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
0cf44 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
0cf48 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
0cf4c 1cc             | 
0cf4c 1cc             | ' LUT RAM address values
0cf4c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
0cf50 1cd DD 02 00 00 | continue_read   long    continue_read_lut
0cf54 1ce DB 02 00 00 | continue_write  long    continue_write_lut
0cf58 1cf F6 02 00 00 | noread          long    noread_lut
0cf5c 1d0             | 
0cf5c 1d0 00 00 00 00 | id0             long    0
0cf60 1d1 01 00 00 00 | id1             long    1
0cf64 1d2 02 00 00 00 | id2             long    2
0cf68 1d3 03 00 00 00 | id3             long    3
0cf6c 1d4 04 00 00 00 | id4             long    4
0cf70 1d5 05 00 00 00 | id5             long    5
0cf74 1d6 06 00 00 00 | id6             long    6
0cf78 1d7 07 00 00 00 | id7             long    7
0cf7c 1d8             | 
0cf7c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
0cf7c 1d8             | 'and COG updates and need to follow immediately after id0-id7
0cf7c 1d8 00 00 00 00 | addr1           long    0
0cf80 1d9 00 00 00 00 | hubdata         long    0
0cf84 1da 00 00 00 00 | count           long    0
0cf88 1db 00 00 00 00 | addr2           long    0
0cf8c 1dc 00 00 00 00 | total           long    0
0cf90 1dd 00 00 00 00 | offset1         long    0
0cf94 1de 00 00 00 00 | offset2         long    0
0cf98 1df 00 00 00 00 | link            long    0
0cf9c 1e0             | 
0cf9c 1e0             | burstwrite                                      'note shared register use during init
0cf9c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
0cfa0 1e1 00 00 00 00 | id              long    0
0cfa4 1e2             | 
0cfa4 1e2 00 00 00 00 | header          long    0
0cfa8 1e3 00 00 00 00 | trailer         long    0
0cfac 1e4 00 00 00 00 | cmdaddr         long    0
0cfb0 1e5 00 00 00 00 | request         long    0
0cfb4 1e6 00 00 00 00 | rrlimit         long    0
0cfb8 1e7 00 00 00 00 | pinconfig       long    0
0cfbc 1e8 00 00 00 00 | clks            long    0
0cfc0 1e9 00 00 00 00 | resume          long    0
0cfc4 1ea 00 00 00 00 | orighubsize     long    0
0cfc8 1eb 00 00 00 00 | wrclks          long    0
0cfcc 1ec             | 
0cfcc 1ec 00 00 00 00 | pattern         long    0
0cfd0 1ed 00 00 00 00 | hubscratch      long    0
0cfd4 1ee 00 10 00 00 | val4k           long    4096
0cfd8 1ef             | 
0cfd8 1ef             | ' temporary general purpose regs
0cfd8 1ef 00 00 00 00 | a               long    0
0cfdc 1f0 00 00 00 00 | b               long    0
0cfe0 1f1 00 00 00 00 | c               long    0
0cfe4 1f2 00 00 00 00 | d               long    0
0cfe8 1f3             | 
0cfe8 1f3             |                 fit     502
0cfe8 1f3             |                 fit     502
0cfe8 1f3             | 
0cfe8 1f3             | '..................................................................................................
0cfe8 1f3             | 
0cfe8 1f3             |             orgh
0cfe8                 | 
0cfe8                 | lut_code
0cfe8                 | 'HW init code up to 80 longs
0cfe8                 | 
0cfe8                 | '..................................................................................................
0cfe8                 | ' Memory layout for LUT RAM once operational:
0cfe8                 | '
0cfe8                 | '  LUT RAM address      Usage
0cfe8                 | '  ---------------      ----
0cfe8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
0cfe8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
0cfe8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
0cfe8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
0cfe8                 | '
0cfe8                 | ' Also during driver COG startup:
0cfe8                 | ' $230-$24F is used for HW init setup
0cfe8                 | ' $250-$26F is used as temporary vector storage 
0cfe8                 | '..................................................................................................
0cfe8                 | 
0cfe8                 |                 org $230    
0cfe8 230             | 
0cfe8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
0cfe8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
0cfec 231 24 16 60 FD |                             pollxfi
0cff0 232 FF AA 2A FF 
0cff4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
0cff8 234 28 00 B0 FD |                             call    #sendqspi
0cffc 235 07 F8 07 FF 
0d000 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
0d004 237 28 00 B0 FD |                             call    #sendspi
0d008 238 F8 07 78 FF 
0d00c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
0d010 23a 1C 00 B0 FD |                             call    #sendspi
0d014 23b 7F 78 78 FF 
0d018 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
0d01c 23d 10 00 B0 FD |                             call    #sendspi 
0d020 23e 2D 00 64 FD |                             ret
0d024 23f             | 
0d024 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
0d028 240 32 0C 64 FD |                             skipf   #%110
0d02c 241 9C EF 03 F6 |                             mov     pb, xsendimm
0d030 242             | 
0d030 242 10 D0 07 F6 | sendspi                     mov     clks, #16
0d034 243 97 EF 03 F6 |                             mov     pb, ximm8lut
0d038 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
0d03c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
0d040 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
0d044 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
0d048 248 24 36 60 FD |                             waitxfi                         'wait for the completion
0d04c 249 50 48 63 FD |                             fltl    datapins                'float data bus
0d050 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
0d054 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
0d058 24c             | 
0d058 24c 00 00 00 00 
0d05c 24d 00 00 00 00 
0d060 24e 00 00 00 00 
0d064 24f 00 00 00 00 |                 long    0[$270-32-$]
0d068 250             |     
0d068 250             |                 fit     $270-32  ' keep room for 32 vector longs
0d068 250             |                 fit     $270-32  ' keep room for 32 vector longs
0d068 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
0d068 250             | rw_vect ' PSRAM jump vectors
0d068 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
0d06c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
0d070 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
0d074 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
0d078 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
0d07c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
0d080 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
0d084 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
0d088 258             | ro_vect ' R/O PSRAM jump vectors
0d088 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
0d08c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
0d090 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
0d094 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
0d098 25c 00 01 00 00 |                 long    unsupported
0d09c 25d 00 01 00 00 |                 long    unsupported
0d0a0 25e 00 01 00 00 |                 long    unsupported
0d0a4 25f 00 01 00 00 |                 long    unsupported
0d0a8 260             | ctrl_vect ' Control jump vectors
0d0a8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
0d0ac 261 00 01 00 00 |                 long    unsupported
0d0b0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
0d0b4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
0d0b8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
0d0bc 265 00 01 00 00 |                 long    unsupported
0d0c0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
0d0c4 267 3E 01 00 00 |                 long    reconfig 
0d0c8 268             | no_vect ' Invalid bank jump vectors
0d0c8 268 01 01 00 00 |                 long    invalidbank
0d0cc 269 01 01 00 00 |                 long    invalidbank
0d0d0 26a 01 01 00 00 |                 long    invalidbank
0d0d4 26b 01 01 00 00 |                 long    invalidbank
0d0d8 26c 01 01 00 00 |                 long    invalidbank
0d0dc 26d 01 01 00 00 |                 long    invalidbank
0d0e0 26e 01 01 00 00 |                 long    invalidbank
0d0e4 26f 01 01 00 00 |                 long    invalidbank
0d0e8 270             | 
0d0e8 270             |                 fit     $270
0d0e8 270             |                 fit     $270
0d0e8 270             | '..................................................................................................
0d0e8 270             | ' PSRAM READS
0d0e8 270             |                                                             ' a b c d e f
0d0e8 270             |                                                             ' B W L B R L  (a) byte read
0d0e8 270             |                                                             ' Y O O U E O  (b) word read
0d0e8 270             |                                                             ' T R N R S C  (c) long read
0d0e8 270             |                                                             ' E D G S U K  (d) new burst read
0d0e8 270             |                                                             '       T M E  (e) resumed sub-burst
0d0e8 270             |                                                             '         E D  (f) locked sub-burst
0d0e8 270             | 
0d0e8 270             | 
0d0e8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
0d0ec 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
0d0f0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
0d0f4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
0d0f8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
0d0fc 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
0d100 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
0d104 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
0d108 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
0d10c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
0d110 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
0d114 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
0d118 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
0d11c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
0d120 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
0d124 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
0d128 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
0d12c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
0d130 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
0d134 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
0d138 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
0d13c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
0d140 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
0d144 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
0d148 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
0d14c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
0d150 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
0d154 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
0d158 28c             | 
0d158 28c             |                             ' fall through to read bursts
0d158 28c             |                         
0d158 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
0d158 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
0d15c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
0d160 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
0d164 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
0d168 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
0d16c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
0d170 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
0d174 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
0d178 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
0d17c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
0d180 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
0d184 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
0d188 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
0d18c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
0d190 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
0d194 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
0d198 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
0d19c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
0d1a0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
0d1a4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
0d1a8 2a0 E8 D1 03 F1 |                             add     clks, clks
0d1ac 2a1             | readcommon
0d1ac 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
0d1b0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
0d1b4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
0d1b8 2a4             | 
0d1b8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
0d1bc 2a5 69 C8 63 FD |                             rev     cmdaddr
0d1c0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
0d1c4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
0d1c8 2a8             | 
0d1c8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
0d1cc 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
0d1d0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
0d1d0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
0d1d4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
0d1d8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
0d1dc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
0d1e0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
0d1e0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
0d1e4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
0d1e8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
0d1ec 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
0d1f0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
0d1f4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
0d1f8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
0d1f8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
0d1fc 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
0d200 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
0d204 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
0d208 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
0d20c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
0d210 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
0d214 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
0d218 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
0d21c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
0d220 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
0d224 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
0d228 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
0d22c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
0d230 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
0d230 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
0d234 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
0d238 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
0d23c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
0d240 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
0d244 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
0d248 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
0d24c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
0d250 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
0d254 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
0d258 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
0d25c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
0d260 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
0d264 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
0d268 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
0d26c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
0d270 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
0d274 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
0d278 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
0d27c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
0d280 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
0d284 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
0d288 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
0d28c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
0d290 2da 10 03 90 FD |                             jmp     #writecommon
0d294 2db             | 
0d294 2db             | '..................................................................................................
0d294 2db             | ' Burst continuation testing
0d294 2db             | 
0d294 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
0d298 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
0d29c 2dd             | continue_read_lut          
0d29c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
0d2a0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
0d2a4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
0d2a8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
0d2ac 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
0d2b0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
0d2b4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
0d2b8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
0d2bc 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
0d2c0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
0d2c4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
0d2c8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
0d2cc 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
0d2d0 2ea             | 
0d2d0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
0d2d4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
0d2d8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
0d2dc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
0d2e0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
0d2e4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
0d2e8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
0d2ec 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
0d2f0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
0d2f4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
0d2f8 2f4 2A 1C 66 0D |             _ret_           push    #poller
0d2fc 2f5             | 
0d2fc 2f5             | 
0d2fc 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
0d300 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
0d300 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
0d304 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
0d308 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
0d30c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
0d310 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
0d314 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
0d318 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
0d31c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
0d320 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
0d324 2ff             | '..................................................................................................
0d324 2ff             | ' Completion of requests
0d324 2ff             | 
0d324 2ff             | complete_rw_lut             
0d324 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
0d328 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
0d32c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
0d330 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
0d334 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
0d338 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
0d33c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
0d340 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
0d344 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
0d348 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
0d34c 309 32 62 64 AD |             if_z            skipf   #%110001
0d350 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
0d354 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
0d358 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
0d35c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
0d360 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
0d364 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
0d368 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
0d36c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
0d370 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
0d374 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
0d378 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
0d37c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
0d380 316             |                                                             ' skipcase (a) gfx copy to/from hub
0d380 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
0d380 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
0d380 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
0d384 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
0d388 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
0d38c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
0d390 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
0d394 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
0d398 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
0d39c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
0d3a0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
0d3a4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
0d3a8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
0d3ac 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
0d3b0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
0d3b4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
0d3b8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
0d3bc 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
0d3c0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
0d3c4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
0d3c8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
0d3cc 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
0d3d0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
0d3d4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
0d3d8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
0d3dc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
0d3e0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
0d3e4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
0d3e8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
0d3ec 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
0d3f0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
0d3f4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
0d3f8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
0d3fc 335 DF B7 03 A6 |             if_z            mov     addr2, link
0d400 336 34 FF 9F AD |             if_z            jmp     #checknext
0d404 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
0d408 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
0d40c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
0d410 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
0d414 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
0d418 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
0d41c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
0d420 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
0d424 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
0d428 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
0d42c 341             | 
0d42c 341             | '..................................................................................................
0d42c 341             | ' PSRAM WRITES
0d42c 341             |                                                             '  a b c d e f g h
0d42c 341             | 
0d42c 341             |                                                             '  B W L F B R L L (a) byte write(s)
0d42c 341             |                                                             '  Y O O I U E O O (b) word write(s)
0d42c 341             |                                                             '  T R N L R S C C (c) long write(s)
0d42c 341             |                                                             '  E D G L S U K K (d) resumed fill
0d42c 341             |                                                             '          T M E E (e) new burst write
0d42c 341             |                                                             '            E D D (f) resumed burst
0d42c 341             |                                                             '              F B (g) locked fill
0d42c 341             |                                                             '              I U (h) locked burst write
0d42c 341             |                                                             '              L R 
0d42c 341             |                                                             '              L S 
0d42c 341             |                                                             '                T 
0d42c 341             | 
0d42c 341             | w_single                   
0d42c 341             | w_fill_cont           
0d42c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
0d430 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
0d434 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
0d438 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
0d43c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
0d440 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
0d444 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
0d448 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
0d44c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
0d450 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
0d454 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
0d458 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
0d45c 34d             |                ' disable call to r_resume_burst for single longs when z=0
0d45c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
0d460 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
0d464 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
0d468 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
0d46c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
0d470 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
0d474 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
0d478 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
0d47c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
0d480 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
0d484 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
0d488 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
0d48c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
0d490 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
0d494 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
0d498 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
0d49c 35d             |         
0d49c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
0d49c 35d             |             '
0d49c 35d             |             '  At least one of these 3 optional components will be sent
0d49c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
0d49c 35d             |             '     body - N x full longs of data
0d49c 35d             |             '     trailer - last partial long of data
0d49c 35d             |             '
0d49c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
0d49c 35d             |             '
0d49c 35d             |             'Case    Type                           Sends
0d49c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
0d49c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
0d49c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
0d49c 35d             |             ' 4)     Multiple long fill             body only
0d49c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
0d49c 35d             | 
0d49c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
0d49c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
0d4a0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
0d4a4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
0d4a8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
0d4ac 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
0d4b0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
0d4b4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
0d4b8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
0d4bc 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
0d4c0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
0d4c4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
0d4c8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
0d4cc 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
0d4d0 36a             |                             
0d4d0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
0d4d4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
0d4d8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
0d4dc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
0d4e0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
0d4e4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
0d4e8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
0d4ec 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
0d4f0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
0d4f4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
0d4f8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
0d4fc 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
0d500 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
0d504 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
0d508 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
0d50c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
0d510 37a             | 
0d510 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
0d514 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
0d518 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
0d51c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
0d520 37e             |                  
0d520 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
0d524 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
0d528 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
0d52c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
0d530 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
0d534 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
0d538 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
0d53c 385             | 
0d53c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
0d540 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
0d544 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
0d548 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
0d54c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
0d550 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
0d554 38b             | 
0d554 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
0d554 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
0d558 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
0d55c 38d 2A B0 63 FD |                             push    addr1                   'save address
0d560 38e             | 
0d560 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
0d560 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
0d564 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
0d568 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
0d56c 391             |             
0d56c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
0d570 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
0d574 393 2B B0 63 FD |                             pop     addr1                   'restore address
0d578 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
0d57c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
0d580 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
0d584 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
0d588 398             | 
0d588 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
0d58c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
0d590 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
0d594 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
0d598 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
0d59c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
0d5a0 39e             | 
0d5a0 39e             |                             'trailer is done
0d5a0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
0d5a4 39f             | 
0d5a4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
0d5a8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
0d5ac 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
0d5b0 3a2             | 
0d5b0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
0d5b4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
0d5b8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
0d5bc 3a5 61 C8 63 FD |                             mergeb  cmdaddr
0d5c0 3a6             |                             
0d5c0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
0d5c4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
0d5c8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
0d5cc 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
0d5d0 3aa             |                                                          
0d5d0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
0d5d4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
0d5d8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
0d5dc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
0d5e0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
0d5e4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
0d5e8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
0d5ec 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
0d5f0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
0d5f4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
0d5f8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
0d5fc 3b5             |  
0d5fc 3b5 59 52 63 FD |                             drvh    cspin
0d600 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
0d604 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
0d608 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
0d60c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
0d610 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
0d614 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
0d618 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
0d61c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
0d620 3be EA E5 03 F6 |                             mov     d, orighubsize
0d624 3bf EF E5 63 F0 |                             shl     d, a
0d628 3c0 F2 E3 83 F1 |                             sub     c, d
0d62c 3c1 DD E3 03 F1 |                             add     c, offset1
0d630 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
0d634 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
0d638 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
0d63c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
0d640 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
0d644 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
0d648 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
0d64c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
0d650 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
0d654 3cb BB D3 03 F6 |                             mov     resume, restorefill
0d658 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
0d65c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
0d660 3ce 6C FC BF CD |             if_c            call    #yield
0d664 3cf 2D 00 64 FD |                             ret
0d668 3d0             |                            
0d668 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
0d668 3d0             |                       '     rczl    pa                      'rotate left into address offset
0d668 3d0             |                       '     rczl    c wcz                   'restore count and flags
0d668 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
0d66c 3d1 02 EC 67 F0 |                             shl     pa, #2
0d670 3d2 28 06 64 AD |             if_z            setq    #3
0d674 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
0d678 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
0d67c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
0d680 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
0d684 3d7             | 
0d684 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
0d688 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
0d68c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
0d690 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
0d694 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
0d698 3dc             |         
0d698 3dc             | 
0d698 3dc             | '..................................................................................................
0d698 3dc             | 
0d698 3dc             |                 fit 1024-32
0d698 3dc             |                 fit 1024-32
0d698 3dc 00 00 00 00 
0d69c 3dd 00 00 00 00 
0d6a0 3de 00 00 00 00 
0d6a4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
0d6a8 3e0             |                 org 1024-32
0d6a8 000             | 
0d6a8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
0d6a8 000 00 00 00 00 |                 long $0000
0d6ac 001 11 11 00 00 |                 long $1111
0d6b0 002 22 22 00 00 |                 long $2222
0d6b4 003 33 33 00 00 |                 long $3333
0d6b8 004 44 44 00 00 |                 long $4444
0d6bc 005 55 55 00 00 |                 long $5555
0d6c0 006 66 66 00 00 |                 long $6666
0d6c4 007 77 77 00 00 |                 long $7777
0d6c8 008 88 88 00 00 |                 long $8888
0d6cc 009 99 99 00 00 |                 long $9999
0d6d0 00a AA AA 00 00 |                 long $aaaa
0d6d4 00b BB BB 00 00 |                 long $bbbb
0d6d8 00c CC CC 00 00 |                 long $cccc
0d6dc 00d DD DD 00 00 |                 long $dddd
0d6e0 00e EE EE 00 00 |                 long $eeee
0d6e4 00f FF FF 00 00 |                 long $ffff
0d6e8 010             | 
0d6e8 010             | 'masks
0d6e8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
0d6ec 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
0d6f0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
0d6f4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
0d6f8 014             | 
0d6f8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
0d6fc 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
0d700 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
0d704 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
0d708 018             | 
0d708 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
0d70c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
0d710 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
0d714 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
0d718 01c             | 
0d718 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
0d71c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
0d720 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
0d724 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
0d728 020             | 
0d728 020             |         fit 1024
0d728 020             |         fit 1024
0d728 020             | 
0d728 020             | '--------------------------------------------------------------------------------------------------
0d728 020             |         orgh
0d728                 | 
0d728                 | gfxexpansion
0d728                 |                             'simple line drawing graphics expansion of memory driver
0d728                 |                             'jmp     #donerepeats                'just return for now
0d728                 | 
0d728     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
0d72c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
0d730     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
0d734     DD E1 03 F6 |                             mov     b, offset1              'get error term
0d738     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
0d73c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
0d740     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
0d744     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
0d748     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
0d74c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
0d750     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
0d754     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
0d758     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
0d75c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
0d760     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
0d764     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
0d768     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
0d76c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
0d770     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
0d774     DC E5 33 F9 |                             getword d, total, #0            'get line width
0d778     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
0d77c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
0d780     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
0d784     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
0d788     C3 03 80 FD |                             jmp     #readmask               'continue filling
0d78c                 | 	alignl
0d78c                 | _usbnew_spin2_dat_
0d78c                 |                 org     $000
0d78c 000             | 
0d78c 000             | usb_host_start
0d78c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
0d790 001             | 
0d790 001 03 00 00 FF 
0d794 002 D0 72 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
0d798 003 02 72 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
0d79c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
0d7a0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
0d7a4 006 29 72 63 FD |                 setq2   htmp
0d7a8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
0d7ac 008             | 
0d7ac 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
0d7b0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
0d7b4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
0d7b8 00b             | 
0d7b8 00b             | '------------------------------------------------------------------------------
0d7b8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
0d7b8 00b             | ' special because the receiving function must not respond with either STALL or
0d7b8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
0d7b8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
0d7b8 00b             | ' corrupt packet, it must ignore the transaction
0d7b8 00b             | '------------------------------------------------------------------------------
0d7b8 00b             | ' On entry:
0d7b8 00b             | '   PTRA - start address of the SETUP data struct.
0d7b8 00b             | ' On exit:
0d7b8 00b             | '   retval - PID_ACK on success, otherwise error code.
0d7b8 00b             | '------------------------------------------------------------------------------
0d7b8 00b             | txn_setup
0d7b8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
0d7bc 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
0d7c0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
0d7c4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
0d7c8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
0d7cc 010             | .setup
0d7cc 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
0d7d0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0d7d4 012 2D 00 64 AD |         if_z    ret
0d7d8 013 7C 0B B0 FD |                 call    #retry_wait
0d7dc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
0d7e0 015 2D 00 64 AD |         if_z    ret
0d7e4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
0d7e8 017 E0 FF 9F FD |                 jmp     #.setup
0d7ec 018             | 
0d7ec 018             | '------------------------------------------------------------------------------
0d7ec 018             | ' IN/INTERRUPT transaction.
0d7ec 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
0d7ec 018             | '------------------------------------------------------------------------------
0d7ec 018             | ' On entry:
0d7ec 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
0d7ec 018             | '     CRC(b19..23).
0d7ec 018             | ' On exit:
0d7ec 018             | '------------------------------------------------------------------------------
0d7ec 018             | txn_in
0d7ec 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
0d7f0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
0d7f4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
0d7f8 01b             | 
0d7f8 01b             |                 ' Fall through to urx_packet
0d7f8 01b             | 
0d7f8 01b             | '------------------------------------------------------------------------------
0d7f8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
0d7f8 01b             | ' received are handshakes and IN DATAx.
0d7f8 01b             | '------------------------------------------------------------------------------
0d7f8 01b             | ' On entry:
0d7f8 01b             | ' On exit:
0d7f8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
0d7f8 01b             | '     returned.
0d7f8 01b             | '------------------------------------------------------------------------------
0d7f8 01b             | urx_packet
0d7f8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
0d7fc 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
0d800 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
0d804 01e 1A 94 63 FD |                 getct   hct2
0d808 01f 4E 95 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
0d80c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
0d810 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
0d814 022             | .wait_sop
0d814 022 22 A7 8A FA |                 rdpin   urx, dm
0d818 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
0d81c 024 08 00 90 CD |         if_c    jmp     #.get_pid
0d820 025 FC 25 CC FB |                 jnct2   #.wait_sop
0d824 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
0d828 027             | .get_pid
0d828 027 28 02 B0 FD |                 call    #urx_next
0d82c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
0d830 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
0d834 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
0d838 02b             | .chk_pid
0d838 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0d83c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
0d840 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
0d844 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
0d848 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
0d84c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
0d850 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
0d854 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
0d858 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
0d85c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
0d860 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
0d864 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
0d868 037             | .ack_resend
0d868 037 22 A7 82 FA |                 rqpin   urx, dm
0d86c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
0d870 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
0d874 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
0d878 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
0d87c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
0d880 03d             | .chk_eop
0d880 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
0d884 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
0d888 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
0d88c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
0d890 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
0d894 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
0d898 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
0d89c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
0d8a0 045 2D 00 64 FD |                 ret
0d8a4 046             | .idle
0d8a4 046 22 A7 82 FA |                 rqpin   urx, dm
0d8a8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
0d8ac 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
0d8b0 049 2D 00 64 FD |                 ret
0d8b4 04a             | 
0d8b4 04a             | '------------------------------------------------------------------------------
0d8b4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
0d8b4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
0d8b4 04a             | ' if one is required.
0d8b4 04a             | '------------------------------------------------------------------------------
0d8b4 04a             | ' On entry:
0d8b4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
0d8b4 04a             | ' On exit:
0d8b4 04a             | '------------------------------------------------------------------------------
0d8b4 04a             | utx_token
0d8b4 04a 22 A7 82 FA |                 rqpin   urx, dm
0d8b8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
0d8bc 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
0d8c0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
0d8c4 04e 34 0D B0 CD |         if_c    call    #utx_pre
0d8c8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
0d8cc 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
0d8d0 051 5E 73 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
0d8d4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
0d8d8 053             | .next_byte
0d8d8 053 B9 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
0d8dc 054 08 72 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
0d8e0 055             | .wait
0d8e0 055 40 46 72 FD |                 testp   dp                      wc
0d8e4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
0d8e8 057 23 03 08 FC |                 akpin   dp
0d8ec 058 22 A5 22 FC |                 wypin   utx, dm
0d8f0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
0d8f4 05a             | 
0d8f4 05a             | '------------------------------------------------------------------------------
0d8f4 05a             | ' SETUP/OUT/INTERRUPT transaction.
0d8f4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
0d8f4 05a             | '------------------------------------------------------------------------------
0d8f4 05a             | ' On entry:
0d8f4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
0d8f4 05a             | '     CRC(b19..23).
0d8f4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
0d8f4 05a             | '   pkt_data - count of DATAx payload bytes to send.
0d8f4 05a             | ' On exit:
0d8f4 05a             | '------------------------------------------------------------------------------
0d8f4 05a             | txn_out
0d8f4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
0d8f8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
0d8fc 05c 00 00 C0 FF 
0d900 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
0d904 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
0d908 05f             | 
0d908 05f             |                 ' Fall through to utx_data
0d908 05f             | 
0d908 05f             | '------------------------------------------------------------------------------
0d908 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
0d908 05f             | ' calculated while the data byte is being shifted out. Since data stage
0d908 05f             | ' success/fail is not determined until the status stage of the transaction,
0d908 05f             | ' this routine is only concerned about the current DATAx packet.
0d908 05f             | '------------------------------------------------------------------------------
0d908 05f             | ' On entry:
0d908 05f             | '   PTRA - hub start address of the data to read.
0d908 05f             | '   pkt_cnt - data payload size.
0d908 05f             | ' On exit:
0d908 05f             | '------------------------------------------------------------------------------
0d908 05f             | utx_data
0d908 05f 22 A7 82 FA |                 rqpin   urx, dm
0d90c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
0d910 061 F4 FF 9F CD |         if_c    jmp     #utx_data
0d914 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
0d918 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
0d91c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
0d920 065 D8 0C B0 CD |         if_c    call    #utx_pre
0d924 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
0d928 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
0d92c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
0d930 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
0d934 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
0d938 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
0d93c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
0d940 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
0d944 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
0d948 06f             | .read_byte
0d948 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
0d94c 070 F0 00 B0 FD |                 call    #utx_byte
0d950 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
0d954 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
0d958 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
0d95c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
0d960 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
0d964 076             | .send_crc
0d964 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
0d968 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
0d96c 078 D0 00 B0 FD |                 call    #utx_byte
0d970 079 5D A5 EA F8 |                 getbyte utx, crc, #1
0d974 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
0d978 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
0d97c 07c             | 
0d97c 07c             | '------------------------------------------------------------------------------
0d97c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
0d97c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
0d97c 07c             | ' expects that the packet includes at least the CRC word.
0d97c 07c             | '
0d97c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
0d97c 07c             | ' was requested, which makes it difficult to determine where the data stops
0d97c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
0d97c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
0d97c 07c             | ' USB-16 expected residual value of 0xB001.
0d97c 07c             | '
0d97c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
0d97c 07c             | ' so the caller can verify IN success before writing the data to its final
0d97c 07c             | ' destination.
0d97c 07c             | '------------------------------------------------------------------------------
0d97c 07c             | ' On entry:
0d97c 07c             | '   pkt_data - max byte count expected to be in the packet.
0d97c 07c             | '   newb_flg - signals new byte ready when toggled.
0d97c 07c             | ' On exit:
0d97c 07c             | '   pkt_cnt - actual number of bytes read.
0d97c 07c             | '------------------------------------------------------------------------------
0d97c 07c             | urx_data
0d97c 07c F7 77 03 F6 |                 mov     htmp2, pb
0d980 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
0d984 07e 00 00 C0 FF 
0d988 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
0d98c 080 BB EF 03 F6 |                 mov     pb, htmp2
0d990 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
0d994 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
0d998 083 58 85 03 F6 |                 mov     pkt_tmp, pkt_data
0d99c 084 02 84 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
0d9a0 085             | .wait_byte
0d9a0 085             | ' In-line rx for max speed
0d9a0 085 22 A7 82 FA |                 rqpin   urx, dm
0d9a4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
0d9a8 087 53 A5 02 F5 |                 and     utx, urx
0d9ac 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
0d9b0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
0d9b4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
0d9b8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
0d9bc 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
0d9c0 08d DC FF 9F FD |                 jmp     #.wait_byte
0d9c4 08e             | .get_byte
0d9c4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
0d9c8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
0d9cc 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
0d9d0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
0d9d4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
0d9d8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
0d9dc 094             | .end_crc
0d9dc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
0d9e0 095 C2 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
0d9e4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
0d9e8 097 2D 00 64 1D |         if_a    ret
0d9ec 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
0d9ec 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
0d9ec 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
0d9ec 098             | ' to miss it, so cheat a bit and look for SOP clear here.
0d9ec 098 22 A7 82 FA |                 rqpin   urx, dm
0d9f0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
0d9f4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
0d9f8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
0d9f8 09b             | .chk_crc
0d9f8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
0d9fc 09c 58 00 00 FF 
0da00 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
0da04 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
0da08 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
0da0c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
0da10 0a1 34 09 B0 FD |                 call    #poll_waitx
0da14 0a2             | 
0da14 0a2             |                 ' Fall through to utx_handshake
0da14 0a2             | 
0da14 0a2             | '------------------------------------------------------------------------------
0da14 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
0da14 0a2             | ' the appropriate IP delay has been inserted.
0da14 0a2             | '------------------------------------------------------------------------------
0da14 0a2             | ' On entry:
0da14 0a2             | '   retval - handshake PID to send.
0da14 0a2             | ' On exit:
0da14 0a2             | '   retval unchanged.
0da14 0a2             | '------------------------------------------------------------------------------
0da14 0a2             | utx_handshake
0da14 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
0da18 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
0da1c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
0da20 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
0da24 0a6 5F A5 02 F6 |                 mov     utx, retval
0da28 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
0da2c 0a8             | .idle
0da2c 0a8 22 A7 82 FA |                 rqpin   urx, dm
0da30 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
0da34 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
0da38 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
0da3c 0ac 08 09 90 FD |                 jmp     #poll_waitx
0da40 0ad             | 
0da40 0ad             | '------------------------------------------------------------------------------
0da40 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
0da40 0ad             | '------------------------------------------------------------------------------
0da40 0ad             | ' On entry:
0da40 0ad             | '   utx - byte to transmit.
0da40 0ad             | ' On exit:
0da40 0ad             | '------------------------------------------------------------------------------
0da40 0ad             | utx_byte
0da40 0ad 40 46 72 FD |                 testp   dp                      wc
0da44 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
0da48 0af 23 03 08 FC |                 akpin   dp
0da4c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
0da50 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
0da54 0b2             | 
0da54 0b2             | '------------------------------------------------------------------------------
0da54 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
0da54 0b2             | '------------------------------------------------------------------------------
0da54 0b2             | ' On entry:
0da54 0b2             | ' On exit:
0da54 0b2             | '   retval - the byte read.
0da54 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
0da54 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
0da54 0b2             | '     received.
0da54 0b2             | '------------------------------------------------------------------------------
0da54 0b2             | urx_next
0da54 0b2 22 A7 8A FA |                 rdpin   urx, dm
0da58 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
0da5c 0b4 53 A5 02 F5 |                 and     utx, urx
0da60 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
0da64 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
0da68 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
0da6c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
0da70 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
0da74 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
0da78 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
0da7c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
0da80 0bd 2D 00 64 FD |                 ret
0da84 0be             | 
0da84 0be             | '------------------------------------------------------------------------------
0da84 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
0da84 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
0da84 0be             | ' length, and the PID is not included in the CRC calculation:
0da84 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
0da84 0be             | '  CRC5  ENDP ADDRESS PID
0da84 0be             | ' %00000_1111_1111111_xxxxxxxx
0da84 0be             | '------------------------------------------------------------------------------
0da84 0be             | ' On entry:
0da84 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
0da84 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
0da84 0be             | ' On exit:
0da84 0be             | '   ep_addr_pid - CRC value appended to the packet.
0da84 0be             | '------------------------------------------------------------------------------
0da84 0be             | calc_crc5
0da84 0be FF 03 00 FF 
0da88 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
0da8c 0c0 5E 73 03 F6 |                 mov     htmp, ep_addr_pid
0da90 0c1 08 72 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
0da94 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
0da98 0c3 69 72 63 FD |                 rev     htmp                            ' Input data reflected
0da9c 0c4 28 72 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
0daa0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
0daa4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
0daa8 0c7 09 72 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
0daac 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
0dab0 0c9 01 72 77 F0 |                 shl     htmp, #1                wc
0dab4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
0dab8 0cb 01 72 77 F0 |                 shl     htmp, #1                wc
0dabc 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
0dac0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
0dac4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
0dac8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
0dacc 0d0             | 
0dacc 0d0             | '------------------------------------------------------------------------------
0dacc 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
0dacc 0d0             | '------------------------------------------------------------------------------
0dacc 0d0             | isr1_fsframe
0dacc 0d0 1A 92 62 FD |                 getct   iframe_ct_base
0dad0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
0dad4 0d2 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
0dad8 0d3 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
0dadc 0d4             | .wait
0dadc 0d4 40 46 72 FD |                 testp   dp                      wc
0dae0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
0dae4 0d6 23 03 08 FC |                 akpin   dp
0dae8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
0daec 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
0daf0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
0daf4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
0daf8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
0dafc 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
0db00 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
0db04 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
0db08 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
0db0c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
0db10 0e1 2C FF BF FD |                 call    #utx_byte
0db14 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
0db18 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
0db1c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
0db20 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
0db24 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
0db28 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
0db2c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
0db30 0e9 5B A5 42 F5 |                 or      utx, icrc
0db34 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
0db38 0eb A4 83 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
0db3c 0ec 20 00 90 FD |                 jmp     #isr1_wait
0db40 0ed             | isr1_lsframe
0db40 0ed 1A 92 62 FD |                 getct   iframe_ct_base
0db44 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
0db48 0ef B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
0db4c 0f0             | .wait
0db4c 0f0 40 46 72 FD |                 testp   dp                      wc
0db50 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
0db54 0f2 23 03 08 FC |                 akpin   dp
0db58 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
0db5c 0f4 A3 83 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
0db60 0f5             | isr1_wait
0db60 0f5 22 A5 82 FA |                 rqpin   utx, dm
0db64 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
0db68 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
0db6c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
0db70 0f9 03 00 00 FF 
0db74 0fa FF B3 06 F5 |                 and     frame, ##$7ff
0db78 0fb 1F 82 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
0db7c 0fc F5 FF 3B FB |                 reti1
0db80 0fd             | 
0db80 0fd             | '------------------------------------------------------------------------------
0db80 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
0db80 0fd             | ' transaction will complete before the next frame is triggered.
0db80 0fd             | '------------------------------------------------------------------------------
0db80 0fd             | ' On entry:
0db80 0fd             | ' On exit:
0db80 0fd             | '------------------------------------------------------------------------------
0db80 0fd             | wait_txn_ok
0db80 0fd 1A 76 63 FD |                 getct   htmp2
0db84 0fe 49 77 83 F1 |                 sub     htmp2, iframe_ct_base
0db88 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
0db8c 100 A1 77 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
0db90 101 A2 77 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
0db94 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
0db98 103 2D 00 64 FD |                 ret
0db9c 104             | 
0db9c 104             | '------------------------------------------------------------------------------
0db9c 104             | ' A device connection was detected, or a bus reset was requested by the USB
0db9c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
0db9c 104             | ' and perform a reset sequence prior to device enumeration.
0db9c 104             | '------------------------------------------------------------------------------
0db9c 104             | dev_reset
0db9c 104 22 A7 82 FA |                 rqpin   urx, dm
0dba0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
0dba4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
0dba8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
0dbac 108             | reset
0dbac 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
0dbb0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
0dbb4 10a 1F 5C 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
0dbb8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
0dbbc 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
0dbc0 10d 1A 92 62 FD |                 getct   iframe_ct_base
0dbc4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
0dbc8 10f B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
0dbcc 110 59 73 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
0dbd0 111 24 72 07 F1 |                 add     htmp, #36
0dbd4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
0dbd8 113             | .framewait
0dbd8 113 B9 B3 1A F2 |                 cmp     frame, htmp             wcz
0dbdc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
0dbe0 115 2D 00 64 FD |                 ret
0dbe4 116             | 
0dbe4 116             | '------------------------------------------------------------------------------
0dbe4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
0dbe4 116             | '------------------------------------------------------------------------------
0dbe4 116             | ' On entry:
0dbe4 116             | '   PTRA - source address.
0dbe4 116             | '   PB - destination address.
0dbe4 116             | '   hr0 - length of copy, in bytes.
0dbe4 116             | ' On exit:
0dbe4 116             | '------------------------------------------------------------------------------
0dbe4 116             | hmemcpy
0dbe4 116 61 73 C7 FA |                 rdbyte  htmp, ptra++
0dbe8 117 F7 73 43 FC |                 wrbyte  htmp, pb
0dbec 118 01 EE 07 F1 |                 add     pb, #1
0dbf0 119 FC 87 6F 0B |         _ret_   djnz    hr0, #hmemcpy
0dbf4 11a             | 
0dbf4 11a             | '------------------------------------------------------------------------------
0dbf4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
0dbf4 11a             | ' loop until the errant device is disconnected.
0dbf4 11a             | '------------------------------------------------------------------------------
0dbf4 11a             | ' On entry:
0dbf4 11a             | ' On exit:
0dbf4 11a             | '------------------------------------------------------------------------------
0dbf4 11a             | host_error
0dbf4 11a             |           if ERROR_LED >= 0
0dbf4 11a             |           end
0dbf4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
0dbf8 11b             | 
0dbf8 11b             | '------------------------------------------------------------------------------
0dbf8 11b             | ' Get HID descriptor buffer for current port
0dbf8 11b             | '------------------------------------------------------------------------------
0dbf8 11b             | ' On entry:
0dbf8 11b             | ' On exit:
0dbf8 11b             | '   PB - HID descriptor buffer pointer
0dbf8 11b             | '------------------------------------------------------------------------------
0dbf8 11b             | get_hid_descr_buffer
0dbf8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
0dbfc 11c 01 EE E7 F2 |                 cmpsub  pb, #1
0dc00 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
0dc04 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
0dc08 11f             | 
0dc08 11f             | 
0dc08 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
0dc0c 120             | 
0dc0c 120             | ' USB commands and error codes
0dc0c 120 00 00 00 00 | cmd_data        long    0
0dc10 121 00 00 00 00 | usb_err_code    long    ERR_NONE
0dc14 122             | 
0dc14 122             | ' Parameters block assigned at cog startup
0dc14 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
0dc18 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
0dc1c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
0dc20 125             | if ACTIVITY_LED >= 0
0dc20 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
0dc20 125             | end
0dc20 125             | if ERROR_LED >= 0
0dc20 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
0dc20 125             | end
0dc20 125 00 00 00 00 | hid_descr_p     long    0
0dc24 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
0dc24 126             | 'hkbd_report_p   long    0
0dc24 126 00 00 00 00 | hub_descr_p     long    0
0dc28 127 00 00 00 00 | urx_buff_p      long    0
0dc2c 128 00 00 00 00 | dev_desc_buff_p long    0
0dc30 129 00 00 00 00 | con_desc_buff_p long    0
0dc34 12a 00 00 00 00 | cache_start_p   long    0
0dc38 12b 00 00 00 00 | cache_end_p     long    0
0dc3c 12c             | if EMUPAD_MAX_PLAYER > 0
0dc3c 12c             | emupad_out_ptr  long    0
0dc3c 12c             | end
0dc3c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
0dc40 12d             | 
0dc40 12d             | hdev_init_start
0dc40 12d             | hdev_port       res     1
0dc40 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
0dc40 12d             | kbm_next_datax  res     1
0dc40 12d             | hub_intf_num    res     1
0dc40 12d             | hub_next_datax  res     1
0dc40 12d             | hub_status_chg  res     1
0dc40 12d             | hub_port_status res     1
0dc40 12d             | if HAVE_MOUSE
0dc40 12d             | ms_intf_num     res     1
0dc40 12d             | ms_in_max_pkt   res     1
0dc40 12d             | end
0dc40 12d             | kb_intf_num     res     1
0dc40 12d             | kb_interval     res     1
0dc40 12d             | kb_in_max_pkt   res     1
0dc40 12d             | kb_max_index    res     1
0dc40 12d             | kb_led_states   res     1
0dc40 12d             | gp_intf_num     res     1
0dc40 12d             | gp_interval     res     1
0dc40 12d             | gp_max_index    res     1
0dc40 12d             | gp_descr_len    res     1+MAX_DEVICES
0dc40 12d             | hdev_init_end
0dc40 12d             | 
0dc40 12d             | ' Initialized at cog startup:
0dc40 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
0dc40 12d             | iframe_ct_new   res     1
0dc40 12d             | iframe_ct_base  res     1
0dc40 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
0dc40 12d             | 
0dc40 12d             | ' This register block is reset to zero when a USB device connects
0dc40 12d             | hreg_init_start
0dc40 12d             | hstatus         res     1         ' Host status flags
0dc40 12d             | hctwait         res     1         ' Poll-based wait clocks
0dc40 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
0dc40 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
0dc40 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
0dc40 12d             | xfer_retry      res     1         ' Control transfer retry count
0dc40 12d             | retry           res     1         ' Transaction retry count
0dc40 12d             | utx             res     1         ' Byte to transmit on USB
0dc40 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
0dc40 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
0dc40 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
0dc40 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
0dc40 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
0dc40 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
0dc40 12d             | frame           res     1         ' USB 1ms frame counter value
0dc40 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
0dc40 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
0dc40 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
0dc40 12d             | crc             res     1         ' Used for CRC16 calculation
0dc40 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
0dc40 12d             | retval          res     1         ' Global success/fail return parameter
0dc40 12d             | context_retval  res     1         ' Operation contextual return parameter
0dc40 12d             | ' Device stuff
0dc40 12d             | hdev_id         res     1+MAX_DEVICES
0dc40 12d             | hdev_bcd        res     1
0dc40 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
0dc40 12d             | ' Keyboard/mouse stuff
0dc40 12d             | hctrl_ep_addr   res     1
0dc40 12d             | hctrl_max_pkt   res     1
0dc40 12d             | hconfig_base    res     1
0dc40 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
0dc40 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
0dc40 12d             | hdev_class      res     1
0dc40 12d             | hdev_subclass   res     1
0dc40 12d             | hdev_protocol   res     1
0dc40 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
0dc40 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
0dc40 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
0dc40 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
0dc40 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
0dc40 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
0dc40 12d             | if HAVE_MOUSE
0dc40 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
0dc40 12d             | end
0dc40 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
0dc40 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
0dc40 12d             | hdev_ep_addr    res     1+MAX_DEVICES
0dc40 12d             | hdev_out_addr   res     1
0dc40 12d             | 
0dc40 12d             | if EMUPAD_MAX_PLAYER > 0
0dc40 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
0dc40 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
0dc40 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
0dc40 12d             | end
0dc40 12d             | 
0dc40 12d             | hreg_init_end
0dc40 12d             | 
0dc40 12d             | hidr_start
0dc40 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
0dc40 12d             | hidr_flags      res     1
0dc40 12d             | hidr_axis       res     4
0dc40 12d             | hidr_buttons    res     1
0dc40 12d             | hidr_hats       res     1
0dc40 12d             | '' Above are actually useful values, 6 longs
0dc40 12d             | hidr_type       res     1
0dc40 12d             | hidr_id         res     1
0dc40 12d             | hidr_offset     res     1
0dc40 12d             | hidr_usage_idx  res     1
0dc40 12d             | ' below need to be push/pop'd
0dc40 12d             | hidr_state      res     1
0dc40 12d             | hidr_size       res     1
0dc40 12d             | hidr_count      res     1
0dc40 12d             | hidr_lminmax    res     1
0dc40 12d             | hidr_pminmax    res     1
0dc40 12d             | hidr_end
0dc40 12d             | 
0dc40 12d             | ' Variables dependent on the system freqency
0dc40 12d             | _var_64_lower_  res     1
0dc40 12d             | _var_64_upper_  res     1
0dc40 12d             | _12Mbps_        res     1
0dc40 12d             | _1_5Mbps_       res     1
0dc40 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
0dc40 12d             | _1us_           res     1         ' 1us
0dc40 12d             | _10us_          res     1         ' 10us
0dc40 12d             | _33us_          res     1         ' 33us
0dc40 12d             | _txn_err_       res     1         ' 250us
0dc40 12d             | _500us_         res     1         ' 500us
0dc40 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
0dc40 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
0dc40 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
0dc40 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
0dc40 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
0dc40 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
0dc40 12d             | _preamble_wait_ res     1
0dc40 12d             | _1ms_           res     1         ' 1ms
0dc40 12d             | _2ms_           res     1         ' 2ms
0dc40 12d             | _suspend_wait_  res     1         ' 3ms
0dc40 12d             | _4ms_           res     1         ' 4ms
0dc40 12d             | _xfer_wait_     res     1         ' 5ms
0dc40 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
0dc40 12d             | _reset_hold_    res     1         ' 15ms
0dc40 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
0dc40 12d             | _21ms_          res     1         ' 21ms
0dc40 12d             | _100ms_         res     1         ' 100ms
0dc40 12d             | _500ms_         res     1         ' 500ms
0dc40 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
0dc40 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
0dc40 12d             | '------------------------------------------------------------------------------
0dc40 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
0dc40 12d             | _usb_d_ls_nco_  res     1
0dc40 12d             | _usb_h_fs_nco_  res     1
0dc40 12d             | _usb_d_fs_nco_  res     1
0dc40 12d             | '------------------------------------------------------------------------------
0dc40 12d             | ' Scratch registers
0dc40 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
0dc40 12d             | htmp1           res     1
0dc40 12d             | htmp2           res     1
0dc40 12d             | htmp3           res     1
0dc40 12d             | hrep            res     1         ' Repeat count
0dc40 12d             | hsave0          res     1         ' Subroutine parameter saves
0dc40 12d             | hsave1          res     1
0dc40 12d             | hsave2          res     1
0dc40 12d             | isrtmp1         res     1
0dc40 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
0dc40 12d             | hr0             res     1         ' Multi-purpose registers
0dc40 12d             | hr1             res     1
0dc40 12d             | hr2             res     1
0dc40 12d             | hr3             res     1
0dc40 12d             | hpar1           res     1         ' Routine entry/exit parameters
0dc40 12d             | hpar2           res     1
0dc40 12d             | hpar3           res     1
0dc40 12d             | hct2            res     1         ' Function response bus turn-around timer
0dc40 12d             | hct3            res     1         ' Keyboard/mouse poll timer
0dc40 12d             | mod_cnt         res     1         ' Used in idle loops
0dc40 12d             | 
0dc40 12d             |                 fit     $1F0
0dc40 12d             |                 fit     $1F0
0dc40 12d             |                 org     $200
0dc40 200             | hlut_start
0dc40 200             | 
0dc40 200             | '------------------------------------------------------------------------------
0dc40 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
0dc40 200             | ' settings to startup defaults.
0dc40 200             | '------------------------------------------------------------------------------
0dc40 200             | ' On entry:
0dc40 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
0dc40 200             | '------------------------------------------------------------------------------
0dc40 200             | set_speed_full
0dc40 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
0dc44 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
0dc48 202 A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
0dc4c 203 A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
0dc50 204             | '                ret                             wcz     ' Restore caller flags on exit
0dc50 204             | 
0dc50 204             | '------------------------------------------------------------------------------
0dc50 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
0dc50 204             | ' is a downstream hub connected (not yet implemented), the baud generator
0dc50 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
0dc50 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
0dc50 204             | ' putting the smart pins into reset.
0dc50 204             | '------------------------------------------------------------------------------
0dc50 204             | ' On entry:
0dc50 204             | ' On exit: CZ flags restored to caller states
0dc50 204             | '------------------------------------------------------------------------------
0dc50 204             | set_speed_low
0dc50 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
0dc54 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
0dc58 206 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
0dc5c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
0dc60 208 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
0dc64 209 A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
0dc68 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
0dc6c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
0dc70 20c             | 
0dc70 20c             | '------------------------------------------------------------------------------
0dc70 20c             | ' Perform configuration stuff required when a device intitially connects.
0dc70 20c             | '------------------------------------------------------------------------------
0dc70 20c             | ' On entry:
0dc70 20c             | ' On exit:
0dc70 20c             | '------------------------------------------------------------------------------
0dc70 20c             | on_connect
0dc70 20c 02 86 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
0dc74 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
0dc78 20e             | .retry
0dc78 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
0dc7c 20f 01 8E 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
0dc80 210 02 8E 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
0dc84 211 00 08 00 FF 
0dc88 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
0dc8c 213 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
0dc90 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
0dc94 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
0dc98 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
0dc9c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
0dca0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0dca4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
0dca8 21a B2 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
0dcac 21b 4C 03 B0 FD |                 call    #poll_waitx
0dcb0 21c 01 86 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
0dcb4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
0dcb8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
0dcbc 21f B8 FF 9F FD |                 jmp     #.retry
0dcc0 220             | .get_dev_desc
0dcc0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
0dcc4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
0dcc8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
0dccc 223 A8 99 02 F6 |                 mov     hctwait, _1ms_
0dcd0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
0dcd4 225 88 FB BF FD |                 call    #reset
0dcd8 226 38 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
0dcdc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
0dce0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
0dce4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
0dce8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0dcec 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
0dcf0 22c AD 99 02 F6 |                 mov     hctwait, _8ms_
0dcf4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
0dcf8 22e 04 00 00 FF 
0dcfc 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
0dd00 230 34 FA BF FD |                 call    #calc_crc5
0dd04 231 20 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
0dd08 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
0dd0c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
0dd10 234 F7 AD C2 FA |                 rdbyte  total_data, pb
0dd14 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
0dd18 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
0dd1c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0dd20 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
0dd24 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
0dd28 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
0dd2c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
0dd30 23c A0 99 02 F6 |                 mov     hctwait, _500us_
0dd34 23d C4 02 B0 FD |                 call    #poll_waitx
0dd38 23e 28 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
0dd3c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
0dd40 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
0dd44 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
0dd48 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
0dd4c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0dd50 244 2D 00 64 5D |         if_nz   ret
0dd54 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
0dd58 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
0dd5c 247 61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
0dd60 248 61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
0dd64 249 00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
0dd68 24a 09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
0dd6c 24b 02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
0dd70 24c 56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
0dd74 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
0dd78 24e 2C FB 9F CD |         if_b    jmp     #host_error
0dd7c 24f 24 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
0dd80 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
0dd84 251 2D EC 63 FD |                 call    pa
0dd88 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
0dd8c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
0dd90 254 2C EC 63 FD |                 jmp     pa
0dd94 255             | 
0dd94 255             | '------------------------------------------------------------------------------
0dd94 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
0dd94 255             | ' Status reporting is always in the function-to-host direction.
0dd94 255             | '------------------------------------------------------------------------------
0dd94 255             | ' On entry:
0dd94 255             | '   PTRA - start address of the SETUP data in hub.
0dd94 255             | '   PB - start address of the buffer/struct to be written to during the IN data
0dd94 255             | '     stage.
0dd94 255             | '   ep_addr_pid - device address, endpoint and CRC5.
0dd94 255             | ' On exit:
0dd94 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
0dd94 255             | '     contains the count of data stage bytes actually received, which must
0dd94 255             | '     always be <= the count requested.
0dd94 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
0dd94 255             | '     more specific USB operation error code.
0dd94 255             | '------------------------------------------------------------------------------
0dd94 255             | control_read
0dd94 255 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
0dd98 256 F8 91 03 F6 |                 mov     hpar2, ptra
0dd9c 257 F7 93 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
0dda0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
0dda4 259             | .xfer_start
0dda4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
0dda8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
0ddac 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0ddb0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
0ddb4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
0ddb8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
0ddbc 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
0ddc0 260 61 00 00 FF 
0ddc4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
0ddc8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
0ddcc 263             | .data
0ddcc 263 56 B1 02 F6 |                 mov     pkt_data, total_data
0ddd0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
0ddd4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
0ddd8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
0dddc 267             | .nak_retry
0dddc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
0dde0 268             | .in_retry
0dde0 268 BC F6 BF FD |                 call    #txn_in
0dde4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
0dde8 26a 28 00 90 AD |         if_z    jmp     #.commit
0ddec 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
0ddf0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
0ddf4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
0ddf8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
0ddfc 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
0de00 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
0de04 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
0de08 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
0de0c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
0de10 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
0de14 275             | .commit
0de14 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
0de18 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
0de1c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
0de20 278 5C 87 03 F6 |                 mov     hr0, pkt_cnt
0de24 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
0de28 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
0de2c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
0de30 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
0de34 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
0de38 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
0de3c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
0de40 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
0de44 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
0de48 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
0de4c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
0de50 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
0de54 285             | .pre_status
0de54 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
0de58 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
0de5c 287 00 B0 06 F6 |                 mov     pkt_data, #0
0de60 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
0de64 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
0de68 28a 61 00 00 FF 
0de6c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
0de70 28c             | .out_retry
0de70 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
0de74 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0de78 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
0de7c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
0de80 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
0de84 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
0de88 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
0de8c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
0de90 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
0de94 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
0de98 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
0de9c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
0de9c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
0de9c 297             | ' ControlRead() transfer gets things unstuck most of the time...
0de9c 297             | .xfer_retry
0de9c 297 AC 99 02 F6 |                 mov     hctwait, _xfer_wait_
0dea0 298 58 01 B0 FD |                 call    #poll_waitx
0dea4 299 8C F9 BF FD |                 call    #wait_txn_ok
0dea8 29a C7 BD 02 F6 |                 mov     ep_addr_pid, hpar1
0deac 29b C8 F1 03 F6 |                 mov     ptra, hpar2
0deb0 29c C9 EF 03 F6 |                 mov     pb, hpar3
0deb4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
0deb8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
0debc 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
0dec0 2a0             | 
0dec0 2a0             | '------------------------------------------------------------------------------
0dec0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
0dec0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
0dec0 2a0             | ' the SETUP data struct is filled with the required values.
0dec0 2a0             | '------------------------------------------------------------------------------
0dec0 2a0             | ' On entry:
0dec0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
0dec0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
0dec0 2a0             | '     stage.
0dec0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
0dec0 2a0             | ' On exit:
0dec0 2a0             | '   retval - used to convey the success/failure of each stage.
0dec0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
0dec0 2a0             | '     more specific USB operation error code.
0dec0 2a0             | '------------------------------------------------------------------------------
0dec0 2a0             | control_write
0dec0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
0dec4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
0dec8 2a2 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
0decc 2a3             | 
0decc 2a3 5E 8F 03 F6 |                 mov     hpar1, ep_addr_pid
0ded0 2a4 F8 91 03 F6 |                 mov     hpar2, ptra
0ded4 2a5 F7 93 03 F6 |                 mov     hpar3, pb
0ded8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
0dedc 2a7             | .xfer_start
0dedc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
0dee0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
0dee4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
0dee8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0deec 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
0def0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
0def4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
0def8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
0defc 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
0df00 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
0df04 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
0df08 2b2             | .data
0df08 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
0df0c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
0df10 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
0df14 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
0df18 2b6             | .out_retry
0df18 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
0df1c 2b7 88 F6 BF FD |                 call    #txn_out
0df20 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0df24 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
0df28 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
0df2c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
0df30 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
0df34 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
0df38 2be             | .commit
0df38 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
0df3c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
0df40 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
0df44 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
0df48 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
0df4c 2c3             | pre_status_in
0df4c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
0df50 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
0df54 2c5             | .status_retry
0df54 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
0df58 2c6 44 F5 BF FD |                 call    #txn_in
0df5c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
0df60 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
0df64 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
0df68 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
0df6c 2cb 2D 00 64 AD |         if_z    ret
0df70 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
0df74 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
0df78 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
0df7c 2cf             | '               ret                                     ' Caller must handle transfer retirement
0df7c 2cf             | 
0df7c 2cf             | '------------------------------------------------------------------------------
0df7c 2cf             | ' Execute an IN interrupt transaction.
0df7c 2cf             | '------------------------------------------------------------------------------
0df7c 2cf             | ' On entry:
0df7c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
0df7c 2cf             | '   hpar2 - Address of the IN data buffer
0df7c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
0df7c 2cf             | ' On exit:
0df7c 2cf             | '   retval - the result of the operation.
0df7c 2cf             | '   hpar3 - the count of IN data bytes actually received.
0df7c 2cf             | '------------------------------------------------------------------------------
0df7c 2cf             | do_int_in
0df7c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
0df80 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
0df84 2d1 0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
0df88 2d2             | 
0df88 2d2 C9 73 33 F9 |                 getword htmp, hpar3, #0
0df8c 2d3 C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz
0df90 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
0df94 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
0df98 2d6             | .retry
0df98 2d6 C9 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
0df9c 2d7 00 F5 BF FD |                 call    #txn_in
0dfa0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
0dfa4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
0dfa8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
0dfac 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
0dfb0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
0dfb4 2dd 54 00 B0 FD |                 call    #retry_wait
0dfb8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
0dfbc 2df 18 00 90 AD |         if_z    jmp     #.post_ret
0dfc0 2e0 D4 FF 9F FD |                 jmp     #.retry
0dfc4 2e1             | .commit
0dfc4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
0dfc8 2e2 C8 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
0dfcc 2e3 5C 87 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
0dfd0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
0dfd4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
0dfd8 2e6             | .post_ret
0dfd8 2e6 5C 93 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
0dfdc 2e7             | 
0dfdc 2e7             | 
0dfdc 2e7             | '------------------------------------------------------------------------------
0dfdc 2e7             | ' Resets the downstream hub port to FS
0dfdc 2e7             | '------------------------------------------------------------------------------
0dfdc 2e7             | dwnstream_reset
0dfdc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
0dfe0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
0dfe4 2e9             | 
0dfe4 2e9 0E 6A 07 F4 |                 bitl    _usb_h_ls_nco_, #14
0dfe8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
0dfec 2eb 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
0dff0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
0dff4 2ed A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
0dff8 2ee A4 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
0dffc 2ef             | 
0dffc 2ef             | '------------------------------------------------------------------------------
0dffc 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
0dffc 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
0dffc 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
0dffc 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
0dffc 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
0dffc 2ef             | '------------------------------------------------------------------------------
0dffc 2ef             | ' On entry:
0dffc 2ef             | '   hctwait - wait interval in sysclocks.
0dffc 2ef             | ' On exit:
0dffc 2ef             | '------------------------------------------------------------------------------
0dffc 2ef             | poll_waitx
0dffc 2ef 1A 94 63 FD |                 getct   hct2
0e000 2f0 4C 95 6B FA |                 addct2  hct2, hctwait
0e004 2f1             | .wait
0e004 2f1 FF 25 CC FB |                 jnct2   #.wait
0e008 2f2 2D 00 64 FD |                 ret
0e00c 2f3             | 
0e00c 2f3             | '------------------------------------------------------------------------------
0e00c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
0e00c 2f3             | '------------------------------------------------------------------------------
0e00c 2f3             | ' On entry:
0e00c 2f3             | '   retval - transaction response PID or error code.
0e00c 2f3             | ' On exit:
0e00c 2f3             | '------------------------------------------------------------------------------
0e00c 2f3             | retry_wait
0e00c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
0e010 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
0e014 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
0e018 2f6 14 00 90 AD |         if_z    jmp     #.nak
0e01c 2f7 9F 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
0e020 2f8 D8 FF BF FD |                 call    #poll_waitx
0e024 2f9             | .dec
0e024 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
0e028 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
0e02c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
0e030 2fc             | .nak
0e030 2fc 9E 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
0e034 2fd C4 FF BF FD |                 call    #poll_waitx
0e038 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
0e03c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
0e040 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
0e044 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
0e048 302 2D 00 64 FD |                 ret
0e04c 303             | 
0e04c 303             | host_reset
0e04c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
0e050 304 14 72 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
0e054 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
0e054 305 BD 01 05 FF 
0e058 306 00 72 1F F2 |                 cmp     htmp, ##168_000_000     wcz
0e05c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
0e060 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
0e064 309             | ' Check to see if the system clock has been changed.
0e064 309 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
0e068 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
0e06c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
0e070 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
0e074 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
0e078 30e 40 46 62 FD |                 dirl    dp
0e07c 30f             | 
0e07c 30f 28 02 64 FD |                 setq    #1
0e080 310 80 00 80 FF 
0e084 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
0e088 312 22 6F 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
0e08c 313             | .enable
0e08c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
0e090 314 41 46 62 FD |                 dirh    dp
0e094 315 1F 38 63 FD |                 waitx   _1us_
0e098 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
0e09c 317             | 
0e09c 317             |                 ' Handle Port protection enable and startup delay
0e09c 317 00 48 56 F2 |                 cmps    usb_enable_pin, #0      wc
0e0a0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
0e0a4 319 1F 60 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
0e0a8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
0e0ac 31b 1F 60 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
0e0b0 31c             | 
0e0b0 31c             |                 'call #dev_reset ' TODO THINK ABOUT THIS
0e0b0 31c             | 
0e0b0 31c             | discon_entry
0e0b0 31c 03 98 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
0e0b4 31d             | 
0e0b4 31d 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
0e0b8 31e 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
0e0bc 31f 38 EC A7 F9 |                 alti    pa, #%000_111_000
0e0c0 320 00 00 04 F6 |                 mov     0-0, #0
0e0c4 321             | .regloop
0e0c4 321             |               
0e0c4 321             |         if HAVE_HIDPAD
0e0c4 321 F8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
0e0c8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
0e0cc 323 28 6E 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
0e0d0 324 F7 01 68 FC |                 wrlong  #0,pb
0e0d4 325             |         end
0e0d4 325             |         if EMUPAD_MAX_PLAYER > 0
0e0d4 325             |         end
0e0d4 325             | 
0e0d4 325             |                 ' Fall through to disconnected loop
0e0d4 325             | 
0e0d4 325             | '-----------------------------------------------------------------------------------------------------------------
0e0d4 325             | ' Device connect handling (Section 7.1.7.3).
0e0d4 325             | '-----------------------------------------------------------------------------------------------------------------
0e0d4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
0e0d4 325             | ' device to connect (Section 7.1.7.3).
0e0d4 325             | '-----------------------------------------------------------------------------------------------------------------
0e0d4 325             | disconnected
0e0d4 325 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
0e0d8 326 2C 89 0B F2 |                 cmp     hr1, save_sysclk        wz
0e0dc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
0e0e0 328 03 88 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
0e0e4 329 1F 88 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
0e0e8 32a             |         if ACTIVITY_LED >= 0
0e0e8 32a             |         end
0e0e8 32a 22 A7 82 FA |                 rqpin   urx, dm
0e0ec 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
0e0f0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
0e0f4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
0e0f8 32e             | .se1_test
0e0f8 32e B1 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
0e0fc 32f FC FE BF FD |                 call    #poll_waitx
0e100 330 22 A7 82 FA |                 rqpin   urx, dm
0e104 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
0e108 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
0e10c 333 A0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
0e110 334             | .se1            'SE1 is a fatal error condition
0e110 334 B1 99 02 F6 |                 mov     hctwait, _100ms_
0e114 335 E4 FE BF FD |                 call    #poll_waitx
0e118 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
0e11c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
0e120 338             | .connect_test                                           ' Test lines until stable J/K state seen
0e120 338 1F 62 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
0e124 339 22 A7 82 FA |                 rqpin   urx, dm
0e128 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
0e12c 33b 80 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
0e130 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
0e134 33d             | connected
0e134 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
0e138 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
0e13c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
0e140 340 6C FF 9F 5D |         if_nz   jmp     #discon_entry
0e144 341             | .set_pulse
0e144 341 1A 66 63 FD |                 getct   _pulse_time_
0e148 342 B2 67 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
0e14c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
0e14c 343             | ' of 1ms and make a correction, if necessary.
0e14c 343             | '                mov     htmp, _1ms_
0e14c 343             | '                subs    htmp, iframe_delta
0e14c 343             | '                adds    _frame1ms_clks_, htmp
0e14c 343             | '                debug(udec(_frame1ms_clks_))
0e14c 343             | 
0e14c 343             |                 ' Fall through to idle/processing loop
0e14c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
0e150 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
0e154 345             | 
0e154 345             | hidle
0e154 345 22 A7 82 FA |                 rqpin   urx, dm
0e158 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
0e15c 347 98 00 90 CD |         if_c    jmp     #.se0_test
0e160 348 24 06 70 FD |                 pollct3                         wc
0e164 349 68 00 90 3D |         if_nc   jmp     #.nopoll
0e168 34a 1A 96 63 FD |                 getct   hct3
0e16c 34b A8 97 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
0e170 34c             | 
0e170 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
0e174 34d 00 72 E3 F8 |                 getbyte htmp
0e178 34e             | 
0e178 34e 09 72 0F F2 |                 cmp     htmp, #HUB_READY        wz
0e17c 34f 8C 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
0e180 350 40 00 90 AD |         if_z    jmp     #.poll
0e184 351             | 
0e184 351             |         if _HAVE_GAMEPAD
0e184 351 06 72 0F F2 |                 cmp     htmp, #HID_READY        wz
0e188 352 08 72 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
0e18c 353 07 72 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
0e190 354 F4 15 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
0e194 355 2C 00 90 AD |         if_z    jmp     #.poll
0e198 356             |         end
0e198 356             | 
0e198 356             |         if HAVE_MOUSE
0e198 356 04 72 0F F2 |                 cmp     htmp, #M_READY          wz
0e19c 357 44 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
0e1a0 358 20 00 90 AD |         if_z    jmp     #.poll
0e1a4 359             |         end
0e1a4 359             | 
0e1a4 359 03 72 0F F2 |                 cmp     htmp, #KB_READY         wz
0e1a8 35a AC 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
0e1ac 35b 14 00 90 AD |         if_z    jmp     #.poll
0e1b0 35c             | 
0e1b0 35c 05 72 0F F2 |                 cmp     htmp, #KBM_READY        wz
0e1b4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
0e1b8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
0e1bc 35f AC 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
0e1c0 360             |         if HAVE_MOUSE
0e1c0 360 44 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
0e1c4 361             |         else
0e1c4 361             |         end
0e1c4 361             | 
0e1c4 361             | .poll
0e1c4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
0e1c8 362 2D EC 63 FD |                 call    pa
0e1cc 363             | .skip_poll
0e1cc 363             | 
0e1cc 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
0e1d0 364             | 
0e1d0 364             | .nopoll
0e1d0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
0e1d4 365 44 00 90 AD |         if_z    jmp     #hsuspend
0e1d8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
0e1dc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
0e1e0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
0e1e4 369 1A 86 63 FD |                 getct   hr0
0e1e8 36a B3 87 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
0e1ec 36b             |         if ACTIVITY_LED >= 0
0e1ec 36b             |         end
0e1ec 36b 1A 66 63 3D |         if_ae   getct   _pulse_time_
0e1f0 36c B2 67 03 31 |         if_ae   add     _pulse_time_, _500ms_
0e1f4 36d 5C FF 9F FD |                 jmp     #hidle
0e1f8 36e             | ' Check for extended SE0 state on the bus
0e1f8 36e             | .se0_test
0e1f8 36e A8 99 02 F6 |                 mov     hctwait, _1ms_
0e1fc 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
0e200 370 22 A7 82 FA |                 rqpin   urx, dm
0e204 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
0e208 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
0e20c 373 24 F6 BF FD |                 call    #wait_txn_ok
0e210 374 00 00 80 FF 
0e214 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
0e218 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
0e218 376 94 FE 9F FD |                 jmp     #discon_entry                   ' Device disconnected
0e21c 377             | 
0e21c 377             | hsuspend
0e21c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
0e220 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
0e224 379 1F 54 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
0e228 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
0e22c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
0e230 37c 00 98 07 F6 |                 mov     mod_cnt, #0
0e234 37d             | 
0e234 37d             |                 ' Fall through to resume wait loop
0e234 37d             | 
0e234 37d             | hwait_resume
0e234 37d 14 88 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
0e238 37e 02 88 47 F0 |                 shr     hr1, #2
0e23c 37f 1F 88 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
0e240 380             |         if ACTIVITY_LED >= 0
0e240 380             |         end
0e240 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
0e244 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
0e248 382 14 72 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
0e24c 383 2C 73 0B F2 |                 cmp     htmp, save_sysclk       wz
0e250 384 18 00 90 AD |         if_z    jmp     #.resume
0e254 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
0e258 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
0e25c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
0e260 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
0e264 389 22 6F 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
0e268 38a 22 6B 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
0e26c 38b             | .resume
0e26c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
0e270 38c 1F 5E 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
0e274 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
0e278 38e A3 73 03 F6 |                 mov     htmp, _ip_delay_ls_
0e27c 38f 01 72 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
0e280 390 1F 72 63 FD |                 waitx   htmp
0e284 391 22 07 28 FC |                 wypin   #OUT_J, dm
0e288 392 01 72 47 F0 |                 shr     htmp, #1
0e28c 393 1F 72 63 FD |                 waitx   htmp
0e290 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
0e294 395 1A 92 62 FD |                 getct   iframe_ct_base
0e298 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
0e29c 397 B4 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
0e2a0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
0e2a4 399 AB 99 02 F6 |                 mov     hctwait, _4ms_
0e2a8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
0e2ac 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
0e2b0 39c             | 
0e2b0 39c             | '------------------------------------------------------------------------------
0e2b0 39c             | ' Send preamble to enable low-speed HUB ports
0e2b0 39c             | '------------------------------------------------------------------------------
0e2b0 39c             | ' On entry:
0e2b0 39c             | ' On exit:
0e2b0 39c             | '   USB baud rate set to low-speed
0e2b0 39c             | '------------------------------------------------------------------------------
0e2b0 39c             | utx_pre
0e2b0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
0e2b4 39d 40 46 62 FD |                 dirl    dp
0e2b8 39e 28 02 64 FD |                 setq    #1
0e2bc 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
0e2c0 3a0 58 44 62 FD |                 drvl    dm
0e2c4 3a1 59 46 62 FD |                 drvh    dp
0e2c8 3a2             | 
0e2c8 3a2 1E 00 00 FF 
0e2cc 3a3 80 72 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
0e2d0 3a4             | 
0e2d0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
0e2d4 3a5 01 72 57 F0 |                 shr     htmp, #1        wc
0e2d8 3a6 28 02 64 3D |         if_nc   setq    #1
0e2dc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
0e2e0 3a8 1F 4E 63 FD |                 waitx   _preamble_wait_
0e2e4 3a9             | .l1
0e2e4 3a9             | 
0e2e4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
0e2e8 3aa 40 46 62 FD |                 dirl    dp
0e2ec 3ab 28 02 64 FD |                 setq    #1
0e2f0 3ac 80 00 80 FF 
0e2f4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
0e2f8 3ae 22 6B 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
0e2fc 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
0e300 3b0 41 46 62 FD |                 dirh    dp
0e304 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
0e308 3b2             | 
0e308 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
0e30c 3b3 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
0e310 3b4 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
0e314 3b5             | 
0e314 3b5             | hlut_end
0e314 3b5             |                 fit     $400
0e314 3b5             |                 fit     $400
0e314 3b5             |                 orgh
0e314                 | if OVERLAP_MEMORY
0e314                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
0e314                 | end
0e314                 | '------------------------------------------------------------------------------
0e314                 | ' Routines called from cog space.
0e314                 | '------------------------------------------------------------------------------
0e314                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
0e314                 | '------------------------------------------------------------------------------
0e314                 | 
0e314                 | '------------------------------------------------------------------------------
0e314                 | ' USB host cog initialization.
0e314                 | '------------------------------------------------------------------------------
0e314                 | usb_host_init
0e314                 |                 ' Initialize buffer pointers
0e314                 |         if OVERLAP_MEMORY
0e314                 |         else
0e314     4C 15 B0 FE |                 loc     pb, #hid_descr
0e318                 |         end
0e318     F7 4B 02 F6 |                 mov     hid_descr_p, pb
0e31c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
0e31c                 |                 {
0e31c                 |                 }
0e31c                 |         
0e31c                 |                 {
0e31c                 |                 }
0e31c                 |                 'loc     pb,#hkbd_report
0e31c                 |                 'mov     hkbd_report_p,pb
0e31c                 | 
0e31c     44 1D B0 FE |                 loc     pb, #hub_descr
0e320     F7 4D 02 F6 |                 mov     hub_descr_p, pb
0e324     59 1D B0 FE |                 loc     pb, #urx_buff
0e328     F7 4F 02 F6 |                 mov     urx_buff_p, pb
0e32c     D1 1D B0 FE |                 loc     pb, #dev_desc_buff
0e330     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
0e334     DB 1D B0 FE |                 loc     pb, #con_desc_buff
0e338     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
0e33c     24 15 B0 FE |                 loc     pb, #usb_cache_start
0e340     F7 55 02 F6 |                 mov     cache_start_p, pb
0e344     25 1D B0 FE |                 loc     pb, #usb_cache_end
0e348     F7 57 02 F6 |                 mov     cache_end_p, pb
0e34c                 | 
0e34c                 |         if ERROR_LED >= 0
0e34c                 |         end
0e34c                 | 
0e34c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
0e34c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
0e34c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
0e34c                 | ' Configure and enable the Serial Host USB port.
0e34c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
0e350                 | 
0e350                 | '------------------------------------------------------------------------------
0e350                 | ' Timing calculations happen before any interrupt(s) are enabled.
0e350                 | '------------------------------------------------------------------------------
0e350                 | ' On entry:
0e350                 | '   htmp - current CLKFREQ value.
0e350                 | '------------------------------------------------------------------------------
0e350                 | hinit_usb_timings
0e350                 | '                getct   htmp2
0e350     B9 59 02 F6 |                 mov     save_sysclk, htmp
0e354     8D 5B 80 FF 
0e358     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
0e35c     18 32 63 FD |                 getqx   _12Mbps_
0e360     10 32 57 F0 |                 shr     _12Mbps_, #16           wc
0e364     00 32 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
0e368     03 6E 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
0e36c     0E 6E 67 F0 |                 shl     _usb_h_fs_nco_, #14
0e370     99 6F 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
0e374     01 70 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
0e378     0E 70 67 F0 |                 shl     _usb_d_fs_nco_, #14
0e37c     99 71 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
0e380     99 35 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
0e384     03 34 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
0e388     02 6A 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
0e38c     0E 6A 67 F0 |                 shl     _usb_h_ls_nco_, #14
0e390     9A 6B 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
0e394     9A 6D 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
0e398     80 00 00 FF 
0e39c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
0e3a0     18 2E 63 FD |                 getqx   _var_64_lower_
0e3a4     19 30 63 FD |                 getqy   _var_64_upper_
0e3a8     28 2E 63 FD |                 setq    _var_64_lower_
0e3ac     65 CD 1D FF 
0e3b0     00 30 27 FD |                 qfrac   _var_64_upper_, ##_1b
0e3b4     18 36 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
0e3b8     01 00 00 FF 
0e3bc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
0e3c0     18 2E 63 FD |                 getqx   _var_64_lower_
0e3c4     19 30 63 FD |                 getqy   _var_64_upper_
0e3c8     28 2E 63 FD |                 setq    _var_64_lower_
0e3cc     A1 07 00 FF 
0e3d0     40 30 27 FD |                 qfrac   _var_64_upper_, ##_1m
0e3d4     18 38 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
0e3d8     9C 7D 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
0e3dc     09 38 57 F0 |                 shr     _1us_, #9               wc
0e3e0     00 38 27 F1 |                 addx    _1us_, #0                       ' Round to final value
0e3e4     0A 7C 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
0e3e8     18 3A 63 FD |                 getqx   _10us_
0e3ec     09 3A 57 F0 |                 shr     _10us_, #9              wc
0e3f0     00 3A 27 F1 |                 addx    _10us_, #0                      ' 10us
0e3f4     21 7C 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
0e3f8     18 3C 63 FD |                 getqx   _33us_
0e3fc     09 3C 57 F0 |                 shr     _33us_, #9              wc
0e400     00 3C 27 F1 |                 addx    _33us_, #0                      ' 33us
0e404     FA 7C 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
0e408     18 3E 63 FD |                 getqx   _txn_err_
0e40c     09 3E 57 F0 |                 shr     _txn_err_, #9           wc
0e410     00 3E 27 F1 |                 addx    _txn_err_, #0                   ' 250us
0e414     F4 7D 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
0e418     18 40 63 FD |                 getqx   _500us_
0e41c     09 40 57 F0 |                 shr     _500us_, #9             wc
0e420     00 40 27 F1 |                 addx    _500us_, #0                     ' 500us
0e424     01 00 00 FF 
0e428     9A 7C 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
0e42c     18 42 63 FD |                 getqx   _txn_ok_ls_
0e430     09 42 57 F0 |                 shr     _txn_ok_ls_, #9         wc
0e434     00 42 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
0e438     01 00 00 FF 
0e43c     52 7D 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
0e440     18 44 63 FD |                 getqx   _txn_ok_fs_
0e444     09 44 57 F0 |                 shr     _txn_ok_fs_, #9         wc
0e448     00 44 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
0e44c     9B 47 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
0e450     05 00 00 FF 
0e454     80 46 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
0e458     10 46 57 F0 |                 shr     _ip_delay_ls_, #16      wc
0e45c     00 46 27 F1 |                 addx    _ip_delay_ls_, #0
0e460     9B 4B 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
0e464     1C 00 00 FF 
0e468     C0 4B 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
0e46c     10 4A 57 F0 |                 shr     _tat_wait_ls_, #16      wc
0e470     00 4A 27 F1 |                 addx    _tat_wait_ls_, #0
0e474     9B 49 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
0e478     00 00 00 FF 
0e47c     4E 49 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
0e480     10 48 57 F0 |                 shr     _ip_delay_fs_, #16      wc
0e484     00 48 27 F1 |                 addx    _ip_delay_fs_, #0
0e488     9B 4D 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
0e48c     04 00 00 FF 
0e490     23 4D 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
0e494     10 4C 57 F0 |                 shr     _tat_wait_fs_, #16      wc
0e498     00 4C 27 F1 |                 addx    _tat_wait_fs_, #0
0e49c     8D 5B 00 FF 
0e4a0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
0e4a4     18 4E 63 FD |                 getqx   _preamble_wait_
0e4a8     08 4E 87 F1 |                 sub     _preamble_wait_,# 9 - 1
0e4ac     01 00 00 FF 
0e4b0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
0e4b4     18 2E 63 FD |                 getqx   _var_64_lower_
0e4b8     19 30 63 FD |                 getqy   _var_64_upper_
0e4bc     28 2E 63 FD |                 setq    _var_64_lower_
0e4c0     01 00 00 FF 
0e4c4     E8 31 27 FD |                 qfrac   _var_64_upper_, ##_1thou
0e4c8     18 50 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
0e4cc     09 50 57 F0 |                 shr     _1ms_, #9               wc
0e4d0     00 50 27 F1 |                 addx    _1ms_, #0                       ' 1ms
0e4d4     FF FF 7F FF 
0e4d8     F2 69 07 F6 |                 mov     _frame1ms_clks_, ##-14
0e4dc     A8 69 43 F1 |                 adds    _frame1ms_clks_, _1ms_
0e4e0     A8 53 03 F6 |                 mov     _2ms_, _1ms_
0e4e4     01 52 67 F0 |                 shl     _2ms_, #1                       ' 2ms
0e4e8     A8 55 03 F6 |                 mov     _suspend_wait_, _1ms_
0e4ec     A8 55 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
0e4f0     A8 57 03 F6 |                 mov     _4ms_, _1ms_
0e4f4     02 56 67 F0 |                 shl     _4ms_, #2                       ' 4ms
0e4f8     AB 59 03 F6 |                 mov     _xfer_wait_, _4ms_
0e4fc     A8 59 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
0e500     AC 5D 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
0e504     AE 5F 03 F6 |                 mov     _resume_hold_, _reset_hold_
0e508     02 5E 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
0e50c     AF 63 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
0e510     01 62 67 F0 |                 shl     _100ms_, #1                     ' 40ms
0e514     A8 5B 03 F6 |                 mov     _8ms_, _1ms_
0e518     03 5A 67 F0 |                 shl     _8ms_, #3                       ' 8ms
0e51c     01 5C 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
0e520     AE 63 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
0e524     AC 5D 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
0e528     AC 61 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
0e52c     02 60 67 F0 |                 shl     _21ms_, #2                      ' 20ms
0e530     A8 61 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
0e534     B1 65 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
0e538     01 62 67 F0 |                 shl     _100ms_, #1                     ' 100ms
0e53c     03 64 67 F0 |                 shl     _500ms_, #3                     ' 400ms
0e540     B1 65 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
0e544                 | '        _ret_   mov     _1sec_, save_sysclk
0e544                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
0e544                 | '                ret
0e544                 | {
0e544                 | }
0e544                 | 
0e544                 | '------------------------------------------------------------------------------
0e544                 | ' Parse a configuration descriptor chain to see if the device is a recognized
0e544                 | ' one. If it is, start the task progression that will configure the device for
0e544                 | ' use.
0e544                 | '------------------------------------------------------------------------------
0e544                 | ' On entry:
0e544                 | '   hconfig_base - start address of the cached config descriptor chain.
0e544                 | ' On exit:
0e544                 | '------------------------------------------------------------------------------
0e544                 | hparse_con_desc
0e544     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
0e548     82 73 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
0e54c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
0e550     4E 72 FF F9 |                 movbyts htmp,#%%1032
0e554     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
0e558                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
0e558                 | 
0e558     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
0e55c     6E ED 03 F1 |                 add     pa, hconfig_base
0e560     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
0e564                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
0e564                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
0e564                 | ' that defines a keyboard and/or mouse.
0e564     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
0e568                 | .next_intf
0e568     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
0e56c     B8 01 90 3D |         if_ae   jmp     #hset_config
0e570     6E F3 03 F6 |                 mov     ptrb, hconfig_base
0e574     75 F3 03 F1 |                 add     ptrb, hnext_desc
0e578     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
0e57c     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
0e580     0C 00 90 AD |         if_z    jmp     #.intf
0e584     80 73 C7 FA |                 rdbyte  htmp, ptrb
0e588     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
0e58c     D8 FF 9F FD |                 jmp     #.next_intf
0e590                 | .intf
0e590     00 90 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
0e594     00 92 07 F6 |                 mov     hpar3, #0
0e598     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
0e59c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
0e5a0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
0e5a4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
0e5a8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
0e5a8                 | 
0e5a8                 | .endp
0e5a8     80 73 C7 FA |                 rdbyte  htmp, ptrb
0e5ac     B9 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
0e5b0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
0e5b4     78 00 90 3D |         if_ae   jmp     #.get_device
0e5b8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
0e5bc     75 F3 03 F1 |                 add     ptrb, hnext_desc
0e5c0     81 73 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
0e5c4     04 72 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
0e5c8     64 00 90 AD |         if_z    jmp     #.get_device
0e5cc     05 72 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
0e5d0     04 00 90 AD |         if_z    jmp     #.get_ep
0e5d4     D0 FF 9F FD |                 jmp     #.endp
0e5d8                 | .get_ep
0e5d8     82 89 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
0e5dc     07 88 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
0e5e0     0F 88 67 F0 |                 shl     hr1, #8 + 7
0e5e4     6C 73 03 F6 |                 mov     htmp, hctrl_ep_addr
0e5e8     3F 00 00 FF 
0e5ec     00 73 07 F5 |                 and     htmp, ##ADDR_MASK
0e5f0     C4 73 43 F5 |                 or      htmp, hr1                       ' endpoint address
0e5f4     00 90 0F F2 |                 cmp     hpar2, #0               wz
0e5f8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
0e5fc     00 92 0F F2 |                 cmp     hpar3, #0               wz
0e600     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
0e604     A0 FF 9F FD |                 jmp     #.endp
0e608                 | .in_ep
0e608     B9 91 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
0e60c     84 8B C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
0e610                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
0e610     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
0e614     C3 8B DB F8 |                 setbyte hr2, hr0, #3
0e618     8C FF 9F FD |                 jmp     #.endp
0e61c                 | .out_ep
0e61c     B9 93 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
0e620     84 8D C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
0e624                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
0e624     86 87 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
0e628     C3 8D DB F8 |                 setbyte hr3, hr0, #3
0e62c     78 FF 9F FD |                 jmp     #.endp
0e630                 | 
0e630                 | .get_device
0e630     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
0e634     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
0e638     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
0e63c     64 00 90 AD |         if_z    jmp     #.gamepad
0e640     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
0e644     A8 00 90 AD |         if_z    jmp     #.hub
0e648     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
0e64c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
0e650     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
0e654     4C 00 90 AD |         if_z    jmp     #.gamepad
0e658     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
0e65c     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
0e660                 | .keyboard
0e660     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
0e664                 |         if HAVE_MOUSE
0e664     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
0e668                 |         else
0e668                 |         end
0e668     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
0e66c     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
0e670     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
0e674     C5 71 FA F8 |                 getbyte kb_interval, hr2, #3
0e678     C5 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
0e67c     C8 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
0e680                 |                 'debug(udec(kb_intf_num))
0e680                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
0e680     E4 FE 9F FD |                 jmp     #.next_intf
0e684                 | if HAVE_MOUSE
0e684                 | .mouse
0e684     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
0e688     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
0e68c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
0e690     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
0e694     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
0e698                 |                 'getbyte ms_interval, hr2, #3
0e698     C5 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
0e69c     C8 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
0e6a0                 |                 'debug(udec(kb_intf_num))
0e6a0                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
0e6a0     C4 FE 9F FD |                 jmp     #.next_intf
0e6a4                 | end
0e6a4                 | .gamepad
0e6a4     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
0e6a8     C8 73 63 F5 |                 xor     htmp, hpar2
0e6ac     3F 00 00 FF 
0e6b0     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
0e6b4     B0 FE 9F AD |         if_z    jmp     #.next_intf
0e6b8                 |         if HAVE_MOUSE
0e6b8     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
0e6bc     C8 73 63 F5 |                 xor     htmp, hpar2
0e6c0     3F 00 00 FF 
0e6c4     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
0e6c8     9C FE 9F AD |         if_z    jmp     #.next_intf
0e6cc                 |         end
0e6cc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
0e6d0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
0e6d4     90 FE 9F 5D |         if_nz   jmp     #.next_intf
0e6d8                 | 
0e6d8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
0e6dc     C5 7B FA F8 |                 getbyte gp_interval, hr2, #3
0e6e0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
0e6e4     C8 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
0e6e8     C9 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
0e6ec                 |                 'debug(udec(gp_intf_num))
0e6ec                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
0e6ec     78 FE 9F FD |                 jmp     #.next_intf
0e6f0                 | .hub
0e6f0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
0e6f4     70 FE 9F 5D |         if_nz   jmp     #.next_intf
0e6f8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
0e6fc     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
0e700     64 FE 9F 5D |         if_nz   jmp     #.next_intf
0e704     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
0e708     5C FE 9F 5D |         if_nz   jmp     #.next_intf
0e70c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
0e710     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
0e714     C8 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
0e718     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
0e71c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
0e720     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
0e724                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
0e724     40 FE 9F FD |                 jmp     #.next_intf
0e728                 | 
0e728                 | '------------------------------------------------------------------------------
0e728                 | ' If a newly-connected device is recognized, do whatever is needed to configure
0e728                 | ' it according to its function, or functions. In the case of this boot protocol
0e728                 | ' keyboard/mouse class driver:
0e728                 | ' - SetConfiguration(config_num)
0e728                 | ' - SetProtocol(boot)
0e728                 | ' - SetIdle(indefinite)
0e728                 | ' - Enter the device interrupt IN polling task stage.
0e728                 | '------------------------------------------------------------------------------
0e728                 | ' On entry:
0e728                 | ' On exit:
0e728                 | '------------------------------------------------------------------------------
0e728                 | hset_config
0e728                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
0e728                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
0e728     02 76 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
0e72c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
0e730     00 00 0C F2 |                 cmp     0-0, #0                 wz
0e734     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
0e738                 |         if HAVE_MOUSE
0e738     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
0e73c                 |         end
0e73c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
0e740     60 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
0e744                 | .set_config
0e744     74 0E D0 FE |                 loc     ptra, #set_config
0e748     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
0e74c     6E ED 03 F1 |                 add     pa, hconfig_base
0e750     F6 8F C3 FA |                 rdbyte  hpar1, pa
0e754                 |                 debug("SetConfiguration: ",udec_(hpar1))
0e754     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
0e758     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
0e75c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
0e760     A0 02 A0 FD |                 call    #control_write
0e764     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0e768     2D 00 64 5D |         if_nz   ret
0e76c                 | .kbd_config
0e76c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
0e770     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
0e774                 | 
0e774     79 73 03 F6 |                 mov     htmp, hkbd_ep_addr
0e778     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
0e77c     3F 00 00 FF 
0e780     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
0e784     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
0e788                 | 
0e788     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
0e78c     3C 0E D0 FE |                 loc     ptra, #set_protocol
0e790     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
0e794     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
0e798     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
0e79c     A0 02 A0 FD |                 call    #control_write
0e7a0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0e7a4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
0e7a8     F8 02 90 5D |         if_nz   jmp     #.notify_client
0e7ac     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
0e7b0     37 91 E3 F8 |                 getbyte hpar2, kb_intf_num, #0
0e7b4     44 03 B0 FD |                 call    #hset_idle
0e7b8                 |                 'cmp     retval, #PID_ACK        wz
0e7b8                 |         'if_nz   mov     hkbd_ep_addr, #0
0e7b8                 |         'if_nz   jmp     #.notify_client
0e7b8     A9 99 02 F6 |                 mov     hctwait, _2ms_
0e7bc     EF 02 A0 FD |                 call    #poll_waitx
0e7c0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
0e7c4                 |         if NUMLOCK_DEFAULT_STATE && RPI_KEYBOARD_NUMLOCK_HACK
0e7c4                 |         end
0e7c4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
0e7c8     A0 17 90 FE |                 loc     pa, #hkbd_led_rep
0e7cc     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
0e7d0     40 03 B0 FD |                 call    #hset_kbdled_report
0e7d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0e7d8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
0e7dc     C4 02 90 5D |         if_nz   jmp     #.notify_client
0e7e0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
0e7e4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
0e7e8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
0e7ec     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
0e7f0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
0e7f4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
0e7f8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
0e7fc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
0e800     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
0e804     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
0e808     03 76 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
0e80c                 |         if !!HAVE_MOUSE
0e80c                 |         end
0e80c                 | 
0e80c                 | .mouse_config
0e80c                 | if HAVE_MOUSE
0e80c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
0e810     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
0e814     7A 73 03 F6 |                 mov     htmp, hmouse_ep_addr
0e818     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
0e81c     3F 00 00 FF 
0e820     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
0e824     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
0e828                 | 
0e828                 |                 debug("mouse passed addr check")
0e828                 | 
0e828     B8 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
0e82c     00 00 80 FF 
0e830     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
0e834     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
0e838     1B 01 A0 FD |                 call    #get_hid_descr_buffer
0e83c     55 02 A0 FD |                 call    #control_read
0e840     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0e844     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
0e848     58 02 90 5D |         if_nz   jmp     #.notify_client
0e84c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
0e850     56 01 00 F6 |                 mov     0-0, total_data
0e854     1B 01 A0 FD |                 call    #get_hid_descr_buffer
0e858                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
0e858                 | 
0e858     35 73 E3 F8 |                 getbyte htmp, ms_intf_num, #0
0e85c     6C 0D D0 FE |                 loc     ptra, #set_protocol
0e860     01 03 5C FC |                 wrword  #MOUSE_FULL_PROTOCOL ? REPORT_PROTOCOL : BOOT_PROTOCOL, ptra[wValue]
0e864     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
0e868     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
0e86c     A0 02 A0 FD |                 call    #control_write
0e870     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0e874     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
0e878     28 02 90 5D |         if_nz   jmp     #.notify_client
0e87c                 |                 debug("mouse passed SetProtocol")
0e87c     00 8E 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
0e880     35 91 E3 F8 |                 getbyte hpar2, ms_intf_num, #0
0e884     74 02 B0 FD |                 call    #hset_idle
0e888                 |                 'cmp     retval, #PID_ACK        wz
0e888                 |         'if_nz   mov     hmouse_ep_addr, #0
0e888                 |         'if_nz   jmp     #.notify_client
0e888                 |                 debug("mouse passed SetIdle")
0e888     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
0e88c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
0e890     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
0e894     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
0e898     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
0e89c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
0e8a0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
0e8a4     79 77 03 F6 |                 mov     htmp2, hkbd_ep_addr
0e8a8     7A 77 63 F5 |                 xor     htmp2, hmouse_ep_addr
0e8ac     3F 00 00 FF 
0e8b0     00 77 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
0e8b4     05 76 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
0e8b8     04 76 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
0e8bc     E4 01 90 FD |                 jmp     #.notify_client
0e8c0                 | end
0e8c0                 | .gamepad_config
0e8c0                 | if _HAVE_GAMEPAD
0e8c0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
0e8c4     00 00 0C F2 |                 cmp     0-0, #0                 wz
0e8c8     6C 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
0e8cc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
0e8d0     00 72 03 F6 |                 mov     htmp, 0-0
0e8d4     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
0e8d8     3F 00 00 FF 
0e8dc     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
0e8e0     54 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
0e8e4                 | 
0e8e4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
0e8e8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
0e8ec     69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
0e8f0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
0e8f4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
0e8f8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
0e8fc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
0e900     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
0e904     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
0e908     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
0e90c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
0e910     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
0e914     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
0e918     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
0e91c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
0e920                 | 
0e920                 |                 if EMUPAD_MAX_PLAYER > 0
0e920                 |                 
0e920                 | .rule_loop           
0e920                 |                 end
0e920                 | 
0e920     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
0e924     5C 00 90 AD |         if_e    jmp     #.xinput
0e928     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
0e92c     00 72 03 F6 |                 mov     htmp,0-0
0e930     01 A6 02 FF 
0e934     68 72 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
0e938     8C 00 90 AD |         if_e    jmp     #.ps3
0e93c                 | 
0e93c     A4 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
0e940     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
0e944     00 00 80 5F 
0e948     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
0e94c     03 00 80 AF 
0e950     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
0e954     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
0e958     1B 01 A0 FD |                 call    #get_hid_descr_buffer
0e95c     55 02 A0 FD |                 call    #control_read
0e960     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0e964     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
0e968     00 00 04 56 |         if_nz   mov     0-0, #0
0e96c     34 01 90 5D |         if_nz   jmp     #.notify_client
0e970     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
0e974     56 01 00 F6 |                 mov     0-0, total_data
0e978     1B 01 A0 FD |                 call    #get_hid_descr_buffer
0e97c                 |                 debug(uhex(pb),udec(total_data),uhex_byte_array(pb,total_data))
0e97c                 | 
0e97c     06 76 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
0e980     20 01 90 FD |                 jmp     #.notify_client
0e984                 | .xinput
0e984     B8 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
0e988     2D EF 03 F6 |                 mov     pb,hdev_port
0e98c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
0e990     03 EE 27 F3 |                 fle     pb,#3
0e994     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
0e998     02 EF 47 FC |                 wrbyte  pb, ptra[2]
0e99c                 | 
0e99c     03 B0 06 F6 |                 mov     pkt_data, #3
0e9a0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
0e9a4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
0e9a8                 |                 debug("XInput LED set ",uhex_long(ep_addr_pid),uhex_byte(pb))
0e9a8     5A 00 A0 FD |                 call    #txn_out
0e9ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
0e9b0                 | 
0e9b0     97 0C D0 FE |                 loc     ptra, #xinp_fix_8bitdo
0e9b4     27 EF 03 F6 |                 mov     pb, urx_buff_p          ' We don't actually care where it goes
0e9b8     55 02 A0 FD |                 call    #control_read           ' Execute GetDeviceDescriptor()
0e9bc                 |                 debug("8bitdo weird fix... ",uhex(retval))
0e9bc     D2 BE 06 F6 |                 mov retval,#PID_ACK             ' If we don't do this something else becomes sad (TODO fix?)
0e9c0                 | 
0e9c0                 | 
0e9c0     07 76 07 F6 |                 mov     htmp2, #XINPUT_READY
0e9c4     DC 00 90 FD |                 jmp     #.notify_client
0e9c8                 | .ps3
0e9c8     44 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
0e9cc     2D EF 03 F6 |                 mov     pb,hdev_port
0e9d0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
0e9d4     04 EE 27 F3 |                 fle     pb,#4
0e9d8     F7 EF C3 F9 |                 decod   pb
0e9dc     09 EF 47 FC |                 wrbyte  pb, ptra[9]
0e9e0                 | 
0e9e0     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
0e9e4     F4 0B D0 FE |                 loc     ptra, #set_report
0e9e8     01 00 80 FF 
0e9ec     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
0e9f0     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
0e9f4     03 61 5C FC |                 wrword  #48, ptra[wLength]
0e9f8     14 0C B0 FE |                 loc     pb, #ps3_command_buff
0e9fc     A0 02 A0 FD |                 call    #control_write
0ea00                 | 
0ea00     3C 73 E3 F8 |                 getbyte htmp, gp_intf_num, #0
0ea04     D4 0B D0 FE |                 loc     ptra, #set_report
0ea08     01 00 80 FF 
0ea0c     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
0ea10     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
0ea14     03 09 5C FC |                 wrword  #4, ptra[wLength]
0ea18     F0 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
0ea1c     A0 02 A0 FD |                 call    #control_write
0ea20     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
0ea24     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
0ea28     00 00 04 56 |         if_nz   mov     0-0, #0
0ea2c     74 00 90 5D |         if_nz   jmp     #.notify_client
0ea30                 | 
0ea30     08 76 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
0ea34     6C 00 90 FD |                 jmp     #.notify_client
0ea38                 | end
0ea38                 | 
0ea38                 | .hub_config
0ea38     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
0ea3c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
0ea40     77 73 03 F6 |                 mov     htmp, hhub_ep_addr
0ea44     5E 73 63 F5 |                 xor     htmp, ep_addr_pid
0ea48     3F 00 00 FF 
0ea4c     00 73 0F F5 |                 and     htmp, ##ADDR_MASK       wz
0ea50     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
0ea54                 | 
0ea54     94 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
0ea58     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
0ea5c     26 EF 03 F6 |                 mov     pb, hub_descr_p
0ea60     55 02 A0 FD |                 call    #control_read
0ea64     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0ea68     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
0ea6c     34 00 90 5D |         if_nz   jmp     #.notify_client
0ea70                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
0ea70                 | 
0ea70     26 F1 03 F6 |                 mov     ptra, hub_descr_p
0ea74     02 79 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
0ea78     07 78 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
0ea7c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
0ea7c                 | .pwr_loop
0ea7c     74 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
0ea80     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
0ea84     02 79 57 FC |                 wrword  htmp3, ptra[wIndex]
0ea88     A0 02 A0 FD |                 call    #control_write
0ea8c     FB 79 6F FB |                 djnz    htmp3, #.pwr_loop
0ea90                 | 
0ea90     B2 99 02 F6 |                 mov     hctwait, _500ms_
0ea94     B1 99 02 F1 |                 add     hctwait, _100ms_
0ea98     EF 02 A0 FD |                 call    #poll_waitx
0ea9c                 | 
0ea9c     09 76 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
0eaa0     00 00 90 FD |                 jmp     #.notify_client
0eaa4                 | 
0eaa4                 | .notify_client
0eaa4     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
0eaa8     BB 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
0eaac                 |                 debug(uhex_long(hdev_type,hdev_type+1))
0eaac                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
0eaac     2D 00 64 FD |                 ret
0eab0                 | 
0eab0                 | '------------------------------------------------------------------------------
0eab0                 | ' Initialize the keyboard/mouse data area to start-up values.
0eab0                 | '------------------------------------------------------------------------------
0eab0                 | ' On entry:
0eab0                 | ' On exit:
0eab0                 | '------------------------------------------------------------------------------
0eab0                 | init_kbdm_data
0eab0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
0eab4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
0eab8                 | 
0eab8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
0eabc     2B ED 03 F6 |                 mov     pa, cache_end_p
0eac0                 | .loop
0eac0     61 01 4C FC |                 wrbyte  #0, ptra++
0eac4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
0eac8     F4 FF 9F CD |         if_b    jmp     #.loop
0eacc                 |         
0eacc                 |         if EMUPAD_MAX_PLAYER > 0
0eacc                 |         end
0eacc                 | 
0eacc                 | 
0eacc     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
0ead0                 | .regloop
0ead0     00 EC 8F F9 |                 altd    pa
0ead4     00 00 04 F6 |                 mov     0-0, #0
0ead8     01 EC 07 F1 |                 add     pa, #1
0eadc     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
0eae0     EC FF 9F 5D |         if_nz   jmp     #.regloop
0eae4                 | 
0eae4     E1 E1 61 FF 
0eae8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
0eaec     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
0eaf0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
0eaf4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
0eaf8                 | 
0eaf8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
0eafc                 | 
0eafc                 | '------------------------------------------------------------------------------
0eafc                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
0eafc                 | ' function.
0eafc                 | '------------------------------------------------------------------------------
0eafc                 | ' On entry:
0eafc                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
0eafc                 | '   hpar2 - index number of the target interface.
0eafc                 | ' On exit:
0eafc                 | '------------------------------------------------------------------------------
0eafc                 | hset_idle
0eafc     A9 99 02 F6 |                 mov     hctwait, _2ms_
0eb00     EF 02 A0 FD |                 call    #poll_waitx
0eb04     CC 0A D0 FE |                 loc     ptra, #set_idle
0eb08     01 8F 57 FC |                 wrword  hpar1, ptra[wValue]
0eb0c     02 91 57 FC |                 wrword  hpar2, ptra[wIndex]
0eb10     A0 02 80 FD |                 jmp     #control_write
0eb14                 | 
0eb14                 | '------------------------------------------------------------------------------
0eb14                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
0eb14                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
0eb14                 | '------------------------------------------------------------------------------
0eb14                 | ' On entry:
0eb14                 | '   ep_addr_pid - device address and enpoint for the request.
0eb14                 | ' On exit:
0eb14                 | '   retval - transaction result.
0eb14                 | '------------------------------------------------------------------------------
0eb14                 | hset_kbdled_report
0eb14     37 73 E3 F8 |                 getbyte htmp, kb_intf_num, #0
0eb18     C0 0A D0 FE |                 loc     ptra, #set_report
0eb1c     01 00 80 FF 
0eb20     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
0eb24     02 73 57 FC |                 wrword  htmp, ptra[wIndex]
0eb28     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
0eb2c     27 EF 03 F6 |                 mov     pb, urx_buff_p
0eb30     F7 77 42 FC |                 wrbyte  kb_led_states, pb
0eb34     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
0eb38                 | 
0eb38                 | '------------------------------------------------------------------------------
0eb38                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
0eb38                 | '------------------------------------------------------------------------------
0eb38                 | ' On entry:
0eb38                 | ' On exit:
0eb38                 | '------------------------------------------------------------------------------
0eb38                 | hget_kbd_in_report
0eb38     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
0eb3c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
0eb40     30 93 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
0eb44     39 93 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
0eb48     CF 02 A0 FD |                 call    #do_int_in
0eb4c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0eb50     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
0eb54                 | 
0eb54     00 92 0F F2 |                 cmp     hpar3, #0               wz
0eb58     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
0eb5c                 | 
0eb5c     30 73 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
0eb60     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
0eb64     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
0eb68     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
0eb6c                 | 
0eb6c     C9 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
0eb70     18 00 B0 FD |                 call    #hkbd_compare
0eb74                 |         if EMUPAD_MAX_PLAYER > 0
0eb74                 |         end
0eb74                 | 
0eb74                 | .led_check
0eb74     3B 73 03 F6 |                 mov     htmp, kb_led_states
0eb78     B9 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
0eb7c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
0eb80     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
0eb84     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
0eb88     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
0eb8c                 | 
0eb8c                 | '------------------------------------------------------------------------------
0eb8c                 | ' Compare current and previous keyboard data buffers for keypress changes.
0eb8c                 | '------------------------------------------------------------------------------
0eb8c                 | hkbd_compare
0eb8c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
0eb90     D0 13 F0 FE |                 loc     ptrb, #hkbd_report
0eb94     61 75 07 FB |                 rdlong  htmp1, ptra++
0eb98     E1 77 07 FB |                 rdlong  htmp2, ptrb++
0eb9c     BB 75 0B F2 |                 cmp     htmp1, htmp2    wz
0eba0     61 75 07 FB |                 rdlong  htmp1, ptra++
0eba4     E1 77 07 FB |                 rdlong  htmp2, ptrb++
0eba8     BB 75 0B A2 |         if_z    cmp     htmp1, htmp2    wz
0ebac     2D 00 64 AD |         if_z    ret
0ebb0                 | 
0ebb0     B0 13 D0 FE |                 loc     ptra, #hkbd_report
0ebb4                 | 
0ebb4                 |                 ' Handle modifiers
0ebb4     27 91 C3 FA |                 rdbyte  hpar2, urx_buff_p
0ebb8     00 89 C7 FA |                 rdbyte  hr1, ptra
0ebbc     C8 89 43 F9 |                 rolword hr1,hpar2,#0
0ebc0     63 88 63 FD |                 mergew  hr1
0ebc4     08 EC 07 F6 |                 mov     pa,#8
0ebc8                 | .modloop
0ebc8     6A 88 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
0ebcc     E8 8E 07 F6 |                 mov     hpar1,#$E8
0ebd0     F6 8F 83 F1 |                 sub     hpar1,pa
0ebd4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
0ebd8     FB ED 6F FB |                 djnz    pa,#.modloop
0ebdc                 | 
0ebdc     6F E0 75 FD | .release        modc    _set    wc
0ebe0                 |                 'alts    hdev_port, #hid_report_p
0ebe0                 |                 'mov     ptra, hid_report_p
0ebe0     02 F0 07 F1 |                 add     ptra, #2
0ebe4     06 EC 07 F6 |                 mov     pa, #6
0ebe8     61 8F CF FA | .rl1            rdbyte  hpar1, ptra++   wz
0ebec     20 00 90 AD |         if_z    jmp     #.rl3
0ebf0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
0ebf4     02 F2 07 F1 |                 add     ptrb, #2
0ebf8     06 EE 07 F6 |                 mov     pb, #6
0ebfc     E1 73 C7 FA | .rl2            rdbyte  htmp, ptrb++
0ec00     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
0ec04     08 00 90 AD |         if_z    jmp     #.rl3
0ec08     FC EF 6F FB |                 djnz    pb, #.rl2
0ec0c     68 00 B0 FD |                 call    #hkbd_translate
0ec10     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
0ec14                 | 
0ec14     00 92 07 F6 |                 mov     hpar3, #0
0ec18     1F 92 27 F4 |                 bith    hpar3, #31
0ec1c                 | 
0ec1c     6F 00 74 FD | .press          modc    _clr    wc
0ec20     27 F1 03 F6 |                 mov     ptra, urx_buff_p
0ec24     02 F0 07 F1 |                 add     ptra, #2
0ec28     06 EC 07 F6 |                 mov     pa, #6
0ec2c     61 8F CF FA | .pl1            rdbyte  hpar1, ptra++   wz
0ec30     20 00 90 AD |         if_z    jmp     #.pl3
0ec34     2C 13 F0 FE |                 loc     ptrb, #hkbd_report
0ec38     02 F2 07 F1 |                 add     ptrb, #2
0ec3c     06 EE 07 F6 |                 mov     pb, #6
0ec40     E1 73 C7 FA | .pl2            rdbyte  htmp, ptrb++
0ec44     B9 8F 0B F2 |                 cmp     hpar1, htmp     wz
0ec48     08 00 90 AD |         if_z    jmp     #.pl3
0ec4c     FC EF 6F FB |                 djnz    pb, #.pl2
0ec50     24 00 B0 FD |                 call    #hkbd_translate
0ec54     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
0ec58                 | 
0ec58     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
0ec5c     04 13 F0 FE |                 loc     ptrb, #hkbd_report
0ec60     28 02 64 FD |                 setq #1
0ec64     61 75 07 FB |                 rdlong  htmp1, ptra++
0ec68     28 02 64 FD |                 setq #1
0ec6c     E1 75 67 FC |                 wrlong  htmp1, ptrb++
0ec70     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
0ec74                 | 
0ec74     2D 00 64 FD |                 ret
0ec78                 | 
0ec78                 | '------------------------------------------------------------------------------
0ec78                 | ' Translate keyboard scancode to ASCII
0ec78                 | '------------------------------------------------------------------------------
0ec78                 | ' On entry:
0ec78                 | '   hpar1 - scancode
0ec78                 | '   hpar2 - key modifiers state
0ec78                 | '       c - pressed (0) or released (1) flag
0ec78                 | ' On exit:
0ec78                 | '   hpar1 - bit     31 = 0 pressed, 1 released
0ec78                 | '               30..17 = unused
0ec78                 | '                   18 = scroll-lock state 
0ec78                 | '                   17 = caps-lock state
0ec78                 | '                   16 = num-lock state 
0ec78                 | '                15..8 = key modifiers state
0ec78                 | '                 7..0 = scancode
0ec78                 | '------------------------------------------------------------------------------
0ec78                 | hkbd_translate
0ec78     39 8E 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
0ec7c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
0ec80     53 8E 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
0ec84     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
0ec88     47 8E 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
0ec8c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
0ec90                 | 
0ec90                 |         if EMUPAD_MAX_PLAYER > 0
0ec90                 | 
0ec90                 |         if EMUPAD_BT0_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT1_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT2_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT3_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT4_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT5_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT6_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT7_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT8_BIT >= 0
0ec90                 |         end
0ec90                 |         if EMUPAD_BT9_BIT >= 0
0ec90                 |         end
0ec90                 | 
0ec90                 |         end
0ec90     C8 8F CB F8 |                 setbyte hpar1, hpar2, #1
0ec94     7C 8F D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
0ec98     1F 8E 47 F4 |                 bitc    hpar1, #31
0ec9c                 |         if KEYQUEUE_SIZE > 0
0ec9c     C0 09 B0 FE |                 loc pb,#keyq_head
0eca0     F7 73 E3 FA |                 rdword htmp,pb
0eca4     B9 75 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
0eca8     B9 73 E3 F8 |                 getbyte htmp,htmp,#0 ' head
0ecac     B9 77 03 F6 |                 mov htmp2,htmp
0ecb0     04 76 07 FA |                 mul htmp2,#4
0ecb4     F7 77 03 F1 |                 add htmp2,pb
0ecb8     02 76 07 F1 |                 add htmp2,#2
0ecbc     7F 72 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
0ecc0     B9 75 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
0ecc4     BB 8F 63 5C |         if_nz   wrlong hpar1,htmp2
0ecc8     F7 73 43 5C |         if_nz   wrbyte htmp,pb
0eccc                 |         end
0eccc     2D 00 7C FD |                 ret wcz
0ecd0                 | 
0ecd0                 | if HAVE_MOUSE
0ecd0                 | '------------------------------------------------------------------------------
0ecd0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
0ecd0                 | '------------------------------------------------------------------------------
0ecd0                 | ' On entry:
0ecd0                 | ' On exit:
0ecd0                 | '------------------------------------------------------------------------------
0ecd0                 | hget_mouse_in_report
0ecd0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
0ecd4     27 91 03 F6 |                 mov     hpar2, urx_buff_p
0ecd8     30 93 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
0ecdc     36 93 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
0ece0     CF 02 A0 FD |                 call    #do_int_in
0ece4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0ece8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
0ecec                 | 
0ecec     00 92 0F F2 |                 cmp     hpar3, #0               wz
0ecf0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
0ecf4                 | 
0ecf4     30 73 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
0ecf8     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
0ecfc     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
0ed00     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
0ed04                 | 
0ed04                 |         'debug(uhex_byte_array(urx_buff_p,hpar3))
0ed04                 | 
0ed04                 |         if MOUSE_FULL_PROTOCOL
0ed04     C8 00 B0 FD |                 call #hid_decode
0ed08                 |         else
0ed08                 |         end
0ed08                 | 
0ed08     48 09 90 FE |                 loc     pa, #mouse_limits
0ed0c     5D 13 F0 FE |                 loc     ptrb, #mouse_xacc
0ed10                 | 
0ed10                 |                 ' load xacc,yacc,zacc
0ed10     28 04 64 FD |                 setq    #3-1
0ed14     80 89 07 FB |                 rdlong  hr1,ptrb
0ed18                 |                 ' load limits and outptr
0ed18     28 04 64 FD |                 setq    #3-1
0ed1c     F6 75 03 FB |                 rdlong  htmp1,pa
0ed20                 | 
0ed20                 |         if MOUSE_FULL_PROTOCOL
0ed20     8C 19 47 FC |                 wrbyte  hidr_buttons, ptrb[12]
0ed24                 |         else
0ed24                 |                 { ' Currently not used
0ed24                 |                 '}
0ed24                 |         end
0ed24                 | 
0ed24                 |         if MOUSE_FULL_PROTOCOL
0ed24     88 73 33 F9 |                 getword htmp, hidr_axis+0, #0
0ed28     0F 72 67 F7 |                 signx   htmp, #15
0ed2c                 |         else
0ed2c                 |         end
0ed2c     B9 89 03 F1 |                 add     hr1,htmp
0ed30     00 74 0F F2 |                 cmp     htmp1,#0 wz
0ed34     BA 89 63 53 |         if_ne   fles    hr1,htmp1
0ed38     00 88 47 53 |         if_ne   fges    hr1,#0
0ed3c                 | 
0ed3c                 |         if MOUSE_FULL_PROTOCOL
0ed3c     88 73 3B F9 |                 getword htmp, hidr_axis+0, #1
0ed40     0F 72 67 F7 |                 signx   htmp, #15
0ed44                 |         else
0ed44                 |         end
0ed44     B9 8B 03 F1 |                 add     hr2,htmp
0ed48     00 76 0F F2 |                 cmp     htmp2,#0 wz
0ed4c     BB 8B 63 53 |         if_ne   fles    hr2,htmp2
0ed50     00 8A 47 53 |         if_ne   fges    hr2,#0
0ed54                 |                 
0ed54                 |         if MOUSE_FULL_PROTOCOL
0ed54     8B 73 3B F9 |                 getword htmp, hidr_axis+3, #1           ' Mouse wheel is actually on the "wheel axis"
0ed58     0F 72 67 F7 |                 signx   htmp, #15
0ed5c     B9 8D 03 F1 |                 add     hr3, htmp
0ed60                 |         else    
0ed60                 |         end
0ed60                 | 
0ed60     90 73 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
0ed64     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
0ed68                 | 
0ed68                 |                 ' write back accumulators
0ed68     28 04 64 FD |                 setq    #3-1
0ed6c     80 89 67 FC |                 wrlong  hr1,ptrb
0ed70                 |                 ' if outptr set, write X/Y words
0ed70     00 78 0F F2 |                 cmp htmp3,#0                    wz
0ed74     C5 89 2B 59 |         if_nz   setword hr1,hr2,#1
0ed78     BC 89 63 5C |         if_nz   wrlong hr1,htmp3
0ed7c     2D 00 64 FD |                 ret
0ed80                 | end
0ed80                 | 
0ed80                 | '------------------------------------------------------------------------------
0ed80                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
0ed80                 | '------------------------------------------------------------------------------
0ed80                 | ' On entry:
0ed80                 | ' On exit:
0ed80                 | '------------------------------------------------------------------------------
0ed80                 | if _HAVE_GAMEPAD
0ed80                 | hget_gp_in_report
0ed80     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
0ed84     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
0ed88                 | 
0ed88     27 91 03 F6 |                 mov     hpar2, urx_buff_p
0ed8c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
0ed90     00 92 E3 F8 |                 getbyte hpar3
0ed94     FF 92 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
0ed98     CF 02 A0 FD |                 call    #do_int_in
0ed9c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0eda0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
0eda4                 | 
0eda4     00 92 0F F2 |                 cmp     hpar3, #0               wz
0eda8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
0edac                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
0edac                 | 
0edac     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
0edb0     00 72 E3 F8 |                 getbyte htmp                            ' |
0edb4     C3 72 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
0edb8     4B 72 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
0edbc     C3 72 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
0edc0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
0edc4     B9 01 C0 F8 |                 setbyte htmp                            ' |
0edc8                 | 
0edc8                 | ' Note: the following code compares the current and previous reports
0edc8                 | ' and process the data if there are changes to ease the debug output.
0edc8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
0edc8                 | ' gpPreReport buffer.
0edc8                 | 
0edc8                 |                 ' ----- start of block to remove
0edc8                 |                 {
0edc8                 |                 }
0edc8                 |                 ' ----- end of block to remove
0edc8     14 05 90 FE |                 loc pa,#hpad_translate
0edcc     2A EC 63 FD |                 push pa
0edd0                 | 
0edd0                 |                 ' FALL THROUGH !!!!
0edd0                 | end
0edd0                 | if _HAVE_GAMEPAD || MOUSE_FULL_PROTOCOL
0edd0                 | '------------------------------------------------------------------------------
0edd0                 | ' Decode controller report
0edd0                 | '------------------------------------------------------------------------------
0edd0                 | hid_decode
0edd0                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
0edd0     28 20 64 FD |                 setq #(hidr_end-hidr_start)-1
0edd4     00 04 00 FF 
0edd8     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
0eddc                 | 
0eddc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
0ede0                 | 
0ede0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
0ede4     00 1C E3 F8 |                 getbyte hidr_type
0ede8                 |         if _HAVE_GAMEPAD
0ede8     07 1C 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
0edec     08 03 90 AD |         if_z    jmp     #hpad_xinput
0edf0     08 1C 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
0edf4     EC 03 90 AD |         if_z    jmp     #hpad_ps3
0edf8                 |         end
0edf8     05 1C 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
0edfc     04 1C 07 A6 |         if_z    mov     hidr_type,#M_READY
0ee00     04 1C 0F F2 |                 cmp     hidr_type, #M_READY             wz
0ee04                 |                 
0ee04                 | 
0ee04                 | '------------------------------------------------------------------------------
0ee04                 | ' Handle HID controller (or mouse now
0ee04                 | ' On entry:
0ee04                 | '   ptrb - controller report
0ee04                 | '------------------------------------------------------------------------------
0ee04                 | hpad_hid
0ee04     1B 01 A0 FD |                 call    #get_hid_descr_buffer
0ee08     F7 F1 03 F6 |                 mov     ptra, pb
0ee0c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
0ee10     00 EC 03 F6 |                 mov     pa, 0-0
0ee14                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
0ee14     19 2A 3B FF 
0ee18     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
0ee1c                 | 
0ee1c                 | .next
0ee1c     00 EC 5F F2 |                 cmps    pa, #0      wcz
0ee20     2D 00 7C ED |         if_be   ret     wcz
0ee24                 | 
0ee24     61 8F C7 FA |                 rdbyte  hpar1, ptra++
0ee28     01 EC 87 F1 |                 sub     pa, #1
0ee2c     00 90 07 F6 |                 mov     hpar2, #0
0ee30                 | 
0ee30     C7 73 03 F6 |                 mov     htmp, hpar1
0ee34     03 72 07 F5 |                 and     htmp, #$03
0ee38     01 72 0F F2 |                 cmp     htmp, #1    wz
0ee3c     61 91 C7 AA |         if_z    rdbyte  hpar2, ptra++
0ee40     07 90 67 A7 |         if_z    signx   hpar2,#7
0ee44     01 EC 87 A1 |         if_z    sub     pa, #1
0ee48     02 72 0F F2 |                 cmp     htmp, #2    wz
0ee4c     61 91 E7 AA |         if_z    rdword  hpar2, ptra++
0ee50     0F 90 67 A7 |         if_z    signx   hpar2,#15
0ee54     02 EC 87 A1 |         if_z    sub     pa, #2
0ee58     03 72 0F F2 |                 cmp     htmp, #3    wz
0ee5c     61 91 07 AB |         if_z    rdlong  hpar2, ptra++
0ee60     04 EC 87 A1 |         if_z    sub     pa, #4
0ee64                 | 
0ee64     FC 8E 07 F5 |                 and     hpar1, #$FC
0ee68                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
0ee68                 | 
0ee68     84 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
0ee6c     18 01 90 AD |         if_z    jmp     #.report_id
0ee70     04 8E 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
0ee74     30 01 90 AD |         if_z    jmp     #.usage_page
0ee78     08 8E 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
0ee7c     38 01 90 AD |         if_z    jmp     #.usage
0ee80     14 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
0ee84     C8 2B 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
0ee88     24 8E 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
0ee8c     C8 2B 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
0ee90     34 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
0ee94     C8 2D 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
0ee98     44 8E 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
0ee9c     C8 2D 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
0eea0     74 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
0eea4     C8 27 03 A6 |         if_z    mov     hidr_size, hpar2
0eea8     94 8E 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
0eeac     C8 29 03 A6 |         if_z    mov     hidr_count, hpar2
0eeb0     B4 8E 1F F2 |                 cmp     hpar1, #HID_POP wcz
0eeb4     A4 8E 0F 52 |         if_nz   cmp     hpar1, #HID_PUSH wz
0eeb8     64 01 90 AD |         if_z    jmp     #.pushpop ' Entering with C set if PUSH  
0eebc     80 8E 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
0eec0     58 FF 9F 5D |         if_nz   jmp     #.next
0eec4                 | 
0eec4     D5 25 A7 FB |                 tjf     hidr_state,#.next
0eec8                 | 
0eec8     03 90 07 F5 |                 and     hpar2, #$03
0eecc     02 90 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
0eed0     18 00 90 5D |         if_nz   jmp     #.skip
0eed4                 | 
0eed4     02 24 0F F2 |                 cmp     hidr_state, #2  wz
0eed8     20 00 90 AD |         if_z    jmp     #.axes
0eedc     03 24 0F F2 |                 cmp     hidr_state, #3  wz
0eee0     5C 00 90 AD |         if_z    jmp     #.hats
0eee4     04 24 0F F2 |                 cmp     hidr_state, #4  wz
0eee8     70 00 90 AD |         if_z    jmp     #.buttons
0eeec                 | .skip
0eeec     93 73 03 F6 |                 mov     htmp, hidr_size
0eef0     94 73 03 FA |                 mul     htmp, hidr_count
0eef4     B9 21 03 F1 |                 add     hidr_offset, htmp
0eef8     20 FF 9F FD |                 jmp     #.next
0eefc                 | .axes
0eefc                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count),uhex_long(hidr_flags))
0eefc     87 87 53 F8 |                 getnib  hr0, hidr_flags, #2
0ef00     94 89 03 F6 |                 mov     hr1, hidr_count
0ef04                 | .l1
0ef04     90 8F 03 F6 |                 mov     hpar1, hidr_offset
0ef08     93 91 03 F6 |                 mov     hpar2, hidr_size
0ef0c     28 01 B0 FD |                 call    #hpad_getbits
0ef10     88 01 B0 FD |                 call    #hpad_normalize
0ef14     08 86 1F F2 |                 cmp     hr0, #8         wcz
0ef18     86 87 5F C9 |         if_b    altgn   hr0, #hidr_usage
0ef1c     00 8A 43 C8 |         if_b    getnib  hr2
0ef20     88 8B 77 C9 |         if_b    altsw   hr2, #hidr_axis
0ef24     5F 01 20 C9 |         if_b    setword retval
0ef28     01 86 07 C1 |         if_b    add     hr0, #1
0ef2c     93 21 03 F1 |                 add     hidr_offset, hidr_size
0ef30     F4 89 6F FB |                 djnz    hr1, #.l1
0ef34                 | 
0ef34     C3 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
0ef38     01 24 07 F6 |                 mov     hidr_state, #1
0ef3c     DC FE 9F FD |                 jmp     #.next
0ef40                 | .hats
0ef40                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
0ef40     90 8F 03 F6 |                 mov     hpar1, hidr_offset
0ef44     93 91 03 F6 |                 mov     hpar2, hidr_size
0ef48     EC 00 B0 FD |                 call    #hpad_getbits
0ef4c     5F 1B C3 F8 |                 setbyte hidr_hats, retval, #0
0ef50     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
0ef54     01 24 07 F6 |                 mov     hidr_state, #1
0ef58     90 FF 9F FD |                 jmp     #.skip
0ef5c                 | .buttons
0ef5c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
0ef5c     90 8F 03 F6 |                 mov     hpar1, hidr_offset
0ef60     93 91 03 F6 |                 mov     hpar2, hidr_size
0ef64     94 91 03 FA |                 mul     hpar2, hidr_count
0ef68     CC 00 B0 FD |                 call    #hpad_getbits
0ef6c     87 73 E3 F8 |                 getbyte htmp, hidr_flags, #0
0ef70     B9 BF 62 F0 |                 shl     retval, htmp
0ef74     5F 19 43 F5 |                 or      hidr_buttons, retval
0ef78     94 73 03 F1 |                 add     htmp, hidr_count
0ef7c     B9 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
0ef80     01 24 07 F6 |                 mov     hidr_state, #1
0ef84     64 FF 9F FD |                 jmp     #.skip
0ef88                 | .report_id
0ef88     00 1E 0F F2 |                 cmp     hidr_id, #0     wz
0ef8c     2D 00 7C 5D |         if_nz   ret     wcz
0ef90     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
0ef94                 |                 'debug(".report_id",udec(htmp,hpar2))
0ef94     C8 73 0B F2 |                 cmp     htmp, hpar2     wz
0ef98     B9 1F 03 A6 |         if_z    mov     hidr_id, htmp
0ef9c     01 24 67 56 |         if_nz   neg     hidr_state,#1
0efa0     01 F2 87 51 |         if_nz   sub     ptrb,#1
0efa4     74 FE 9F FD |                 jmp     #.next
0efa8                 | .usage_page
0efa8     09 90 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
0efac     01 24 0F A2 |         if_z    cmp     hidr_state, #1  wz
0efb0     04 24 07 A6 |         if_z    mov     hidr_state, #4
0efb4     64 FE 9F FD |                 jmp     #.next
0efb8                 | .usage
0efb8     04 90 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
0efbc     05 90 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
0efc0     06 1C 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
0efc4     01 24 07 A6 |         if_z    mov     hidr_state, #1
0efc8     50 FE 9F AD |         if_z    jmp     #.next
0efcc     02 90 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
0efd0     04 1C 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
0efd4     01 24 07 A6 |         if_z    mov     hidr_state, #1
0efd8     40 FE 9F AD |         if_z    jmp     #.next
0efdc     30 90 17 F2 |                 cmp     hpar2, #HID_USAGE_X     wc
0efe0     38 90 97 32 |         if_nc   cmpr    hpar2, #HID_USAGE_WHEEL wc   
0efe4     10 00 90 3D |         if_nc   jmp     #.usage_axis
0efe8     39 90 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
0efec     01 24 0F A2 |         if_z    cmp     hidr_state, #1      wz
0eff0     03 24 07 A6 |         if_z    mov     hidr_state, #3
0eff4     24 FE 9F FD |                 jmp     #.next
0eff8                 | .usage_axis
0eff8     01 24 57 F2 |                 cmps    hidr_state, #1          wc
0effc     1C FE 9F CD |         if_b    jmp     #.next
0f000     37 90 27 F3 |                 fle     hpar2, #HID_USAGE_DIAL   ' Let's just say wheel and dial are the same to keep sane
0f004     86 23 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
0f008     C8 01 00 F8 |                 setnib  hpar2
0f00c                 | 
0f00c     20 90 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
0f010     C8 0F 23 F4 |                 bith    hidr_flags, hpar2
0f014                 | 
0f014     01 22 07 F1 |                 add     hidr_usage_idx, #1
0f018     02 24 07 F6 |                 mov     hidr_state, #2
0f01c     FC FD 9F FD |                 jmp     #.next
0f020                 | .pushpop
0f020                 |                 ' Entering with C set if PUSH  
0f020     4C 0F B0 FE |                 loc     pb, #hid_stack
0f024     28 08 64 CD |         if_c    setq    #(hidr_end-hidr_state)-1
0f028     F7 25 63 CC |         if_c    wrlong  hidr_state, pb
0f02c     28 08 64 3D |         if_nc   setq    #(hidr_end-hidr_state)-1
0f030     F7 25 03 3B |         if_nc   rdlong  hidr_state, pb
0f034     E4 FD 9F FD |                 jmp     #.next
0f038                 | 
0f038                 | '------------------------------------------------------------------------------
0f038                 | ' Read bits from report data buffer
0f038                 | '------------------------------------------------------------------------------
0f038                 | ' On entry:
0f038                 | '   PTRB - report buffer
0f038                 | '   hpar1 - start bit
0f038                 | '   hpar2 - number of bits
0f038                 | ' On exit:
0f038                 | '   retval - bits
0f038                 | '------------------------------------------------------------------------------
0f038                 | hpad_getbits
0f038     C7 73 03 F6 |                 mov     htmp, hpar1
0f03c     03 72 47 F0 |                 shr     htmp, #3        ' byte offset
0f040     F9 73 03 F1 |                 add     htmp, ptrb
0f044     B9 BF 02 FB |                 rdlong  retval, htmp
0f048                 | 
0f048     C7 75 03 F6 |                 mov     htmp1, hpar1
0f04c     07 74 07 F5 |                 and     htmp1, #$07     ' shift
0f050     BA BF 42 F0 |                 shr     retval, htmp1
0f054                 | 
0f054     18 90 1F F2 |                 cmp     hpar2, #24      wcz
0f058     10 00 90 1D |         if_a    jmp     #.l1
0f05c                 | 
0f05c     C8 91 C3 F9 |                 decod   hpar2
0f060     01 90 87 F1 |                 sub     hpar2, #1
0f064     C8 BF 02 F5 |                 and     retval, hpar2
0f068     2D 00 64 FD |                 ret
0f06c                 | .l1
0f06c     FF 7F 00 FF 
0f070     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
0f074     03 72 07 F1 |                 add     htmp, #3
0f078     B9 77 03 FB |                 rdlong  htmp2, htmp
0f07c     18 90 87 F1 |                 sub     hpar2, #24
0f080     C8 91 C3 F9 |                 decod   hpar2
0f084     01 90 87 F1 |                 sub     hpar2, #1
0f088     BA 77 43 F0 |                 shr     htmp2, htmp1
0f08c     C8 77 03 F5 |                 and     htmp2, hpar2
0f090     18 76 67 F0 |                 shl     htmp2, #24
0f094     BB BF 42 F5 |                 or      retval, htmp2
0f098     2D 00 64 FD |                 ret
0f09c                 | 
0f09c                 | '------------------------------------------------------------------------------
0f09c                 | ' Normalize value to signed word (-32768 / 32767)
0f09c                 | '------------------------------------------------------------------------------
0f09c                 | ' On entry:
0f09c                 | '   retval - value to normalize
0f09c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
0f09c                 | '   - or -
0f09c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
0f09c                 | '   hidr_size - value bits length
0f09c                 | ' On exit:
0f09c                 | '   retval - normalized value
0f09c                 | '------------------------------------------------------------------------------
0f09c                 | hpad_normalize
0f09c     95 73 0B F6 |                 mov     htmp, hidr_lminmax  wz
0f0a0     96 73 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
0f0a4     2D 00 64 AD |         if_z    ret
0f0a8     B9 75 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
0f0ac     B9 73 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
0f0b0     0F 74 77 F7 |                 signx   htmp1, #15      wc
0f0b4     FF 27 97 C9 |         if_c    alts    hidr_size, #511
0f0b8     00 BE 66 C7 |         if_c    signx   retval, #0-0
0f0bc                 |                 ' slightly crappy hack: if in mouse mode, don't normalize
0f0bc     04 1C 0F F2 |                 cmp     hidr_type, #M_READY wz
0f0c0     2D 00 64 AD |         if_z    ret
0f0c4     BA 73 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
0f0c8     BA BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
0f0cc     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
0f0d0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
0f0d4     B9 73 53 F6 |                 abs     htmp            wc
0f0d8     1F BE 0E F4 |                 testb   retval, #31     wz
0f0dc     5F BF 42 F6 |                 abs     retval
0f0e0     B9 BF 12 FD |                 qdiv    retval, htmp
0f0e4     18 BE 62 FD |                 getqx   retval
0f0e8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
0f0ec     C0 FF 7F FF 
0f0f0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
0f0f4     2D 00 64 FD |                 ret
0f0f8                 | end
0f0f8                 | 
0f0f8                 | if _HAVE_GAMEPAD
0f0f8                 | '------------------------------------------------------------------------------
0f0f8                 | ' Handle XInput controller
0f0f8                 | ' On entry:
0f0f8                 | '   ptrb - controller report
0f0f8                 | '------------------------------------------------------------------------------
0f0f8                 | '   Default implementation translates the report to a pseudo-defacto hid
0f0f8                 | '   standard and jumps to hpad_translate for actions.
0f0f8                 | '   Implementors may take specific actions for this kind of controller.
0f0f8                 | '------------------------------------------------------------------------------
0f0f8                 | hpad_xinput
0f0f8     80 73 CF FA |                 rdbyte  htmp, ptrb      wz
0f0fc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
0f100     81 73 C7 FA |                 rdbyte  htmp, ptrb[1]
0f104     14 72 0F F2 |                 cmp     htmp, #$14      wz
0f108     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
0f10c                 | 
0f10c                 |                 'debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
0f10c                 | 
0f10c     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
0f110     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
0f114                 | 
0f114     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
0f118     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
0f11c     5F BF 22 F6 |                 not     retval
0f120     5F 11 2B F9 |                 setword hidr_axis, retval, #1
0f124     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
0f128     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
0f12c     5F BF 22 F6 |                 not     retval
0f130     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
0f134                 | 
0f134     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
0f138     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
0f13c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
0f140     06 18 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
0f144     54 FF BF FD |                 call    #hpad_normalize
0f148     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
0f14c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
0f150     C0 BE 1E F2 |                 cmp     retval, #192    wcz
0f154     07 18 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
0f158     40 FF BF FD |                 call    #hpad_normalize
0f15c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
0f160                 | 
0f160     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
0f164     81 BF E6 FA |                 rdword  retval, ptrb[1]
0f168     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
0f16c     00 18 47 F4 |                 bitc    hidr_buttons, #0
0f170     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
0f174     01 18 47 F4 |                 bitc    hidr_buttons, #1
0f178     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
0f17c     02 18 47 F4 |                 bitc    hidr_buttons, #2
0f180     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
0f184     03 18 47 F4 |                 bitc    hidr_buttons, #3
0f188     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
0f18c     04 18 47 F4 |                 bitc    hidr_buttons, #4
0f190     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
0f194     05 18 47 F4 |                 bitc    hidr_buttons, #5
0f198     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
0f19c     08 18 47 F4 |                 bitc    hidr_buttons, #8
0f1a0     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
0f1a4     09 18 47 F4 |                 bitc    hidr_buttons, #9
0f1a8     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
0f1ac     0A 18 47 F4 |                 bitc    hidr_buttons, #10
0f1b0     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
0f1b4     0B 18 47 F4 |                 bitc    hidr_buttons, #11
0f1b8     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
0f1bc     0C 18 47 F4 |                 bitc    hidr_buttons, #12
0f1c0                 | 
0f1c0     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
0f1c4     5F 73 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
0f1c8     7A BB 7A FF 
0f1cc     0F 74 07 F6 |                 mov     htmp1, ##$F576_F40F
0f1d0     F9 FF 7F FF 
0f1d4     12 77 07 F6 |                 mov     htmp2, ##$FFFF_F312
0f1d8     BA 73 5F F9 |                 altgn   htmp, #htmp1
0f1dc     00 72 43 F8 |                 getnib  htmp
0f1e0     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
0f1e4                 | 
0f1e4                 | '------------------------------------------------------------------------------
0f1e4                 | ' Handle PS3 controller
0f1e4                 | ' On entry:
0f1e4                 | '   ptrb - controller report
0f1e4                 | '------------------------------------------------------------------------------
0f1e4                 | '   Default implementation translates the report to a pseudo-defacto hid
0f1e4                 | '   standard and jumps to hpad_translate for actions.
0f1e4                 | '   Implementors may take specific actions for this kind of controller.
0f1e4                 | '------------------------------------------------------------------------------
0f1e4                 | hpad_ps3
0f1e4     E1 73 C7 FA |                 rdbyte  htmp, ptrb++
0f1e8     01 72 0F F2 |                 cmp     htmp, #$01      wz
0f1ec     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
0f1f0                 | 
0f1f0                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
0f1f0                 | 
0f1f0     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
0f1f4     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
0f1f8                 | 
0f1f8     FF 2A 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
0f1fc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
0f200     98 FE BF FD |                 call    #hpad_normalize
0f204     5F 11 23 F9 |                 setword hidr_axis, retval, #0
0f208     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
0f20c     8C FE BF FD |                 call    #hpad_normalize
0f210     5F 11 2B F9 |                 setword hidr_axis, retval, #1
0f214     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
0f218     80 FE BF FD |                 call    #hpad_normalize
0f21c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
0f220     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
0f224     74 FE BF FD |                 call    #hpad_normalize
0f228     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
0f22c     91 BF C6 FA |                 rdbyte  retval, ptrb[17]        ' RX = L2 analog
0f230     68 FE BF FD |                 call    #hpad_normalize
0f234     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
0f238     92 BF C6 FA |                 rdbyte  retval, ptrb[18]        ' RY = R2 analog
0f23c     5C FE BF FD |                 call    #hpad_normalize
0f240     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
0f244                 | 
0f244     08 8E 07 F6 |                 mov     hpar1, #8
0f248     13 90 07 F6 |                 mov     hpar2, #19
0f24c     E8 FD BF FD |                 call    #hpad_getbits
0f250                 | 
0f250     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
0f254     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
0f258     00 18 47 F4 |                 bitc    hidr_buttons, #0
0f25c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
0f260     01 18 47 F4 |                 bitc    hidr_buttons, #1
0f264     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
0f268     02 18 47 F4 |                 bitc    hidr_buttons, #2
0f26c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
0f270     03 18 47 F4 |                 bitc    hidr_buttons, #3
0f274     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
0f278     04 18 47 F4 |                 bitc    hidr_buttons, #4
0f27c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
0f280     05 18 47 F4 |                 bitc    hidr_buttons, #5
0f284     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
0f288     06 18 47 F4 |                 bitc    hidr_buttons, #6
0f28c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
0f290     07 18 47 F4 |                 bitc    hidr_buttons, #7
0f294     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
0f298     08 18 47 F4 |                 bitc    hidr_buttons, #8
0f29c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
0f2a0     09 18 47 F4 |                 bitc    hidr_buttons, #9
0f2a4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
0f2a8     0A 18 47 F4 |                 bitc    hidr_buttons, #10
0f2ac     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
0f2b0     0B 18 47 F4 |                 bitc    hidr_buttons, #11
0f2b4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
0f2b8     0C 18 47 F4 |                 bitc    hidr_buttons, #12
0f2bc                 | 
0f2bc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
0f2c0     5F 73 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
0f2c4     09 FA 79 FF 
0f2c8     0F 74 07 F6 |                 mov     htmp1, ##$F3F4_120F
0f2cc     FF FA 7F FF 
0f2d0     76 77 07 F6 |                 mov     htmp2, ##$FFF5_FF76
0f2d4     BA 73 5F F9 |                 altgn   htmp, #htmp1
0f2d8     00 72 43 F8 |                 getnib  htmp
0f2dc     B9 1B C3 08 |         _ret_   setbyte hidr_hats, htmp, #0
0f2e0                 | 
0f2e0                 | 
0f2e0                 | '------------------------------------------------------------------------------
0f2e0                 | ' Perform controller actions
0f2e0                 | ' On entry:
0f2e0                 | '    hidr_id        report id
0f2e0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
0f2e0                 | '                      X = hidr_axis+0, #0
0f2e0                 | '                      Y = hidr_axis+0, #1
0f2e0                 | '                      Z = hidr_axis+1, #0
0f2e0                 | '                     RX = hidr_axis+1, #1
0f2e0                 | '                     RY = hidr_axis+2, #0
0f2e0                 | '                     RZ = hidr_axis+2, #1
0f2e0                 | '                     Sl = hidr_axis+3, #0
0f2e0                 | '                     Wh = hidr_axis+3, #1
0f2e0                 | '    hidr_buttons   buttons state (bits 0 to 31)
0f2e0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
0f2e0                 | '
0f2e0                 | '                     -------3 -------2 -------1 -------0 byte
0f2e0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
0f2e0                 | '    hidr_flags       xxxxxxxx_wsrrrzyx_hhhhaaaa_bbbbbbbb
0f2e0                 | '                              hlzyx||| |||||||| ++++++++ n. buttons
0f2e0                 | '                              |||||||| ||||++++--------- n. axes
0f2e0                 | '                              |||||||| ++++------------- n. hats
0f2e0                 | '                              ++++++++------------------ valid axes
0f2e0                 | '------------------------------------------------------------------------------
0f2e0                 | hpad_translate
0f2e0                 | 
0f2e0                 | 
0f2e0                 |         if HAVE_HIDPAD
0f2e0     A0 0C F0 FE |                 loc     ptrb,#hidpad_report
0f2e4     2D 73 0B F6 |                 mov     htmp,hdev_port          wz
0f2e8     8F 73 03 A6 |         if_z    mov     htmp,hidr_id
0f2ec     01 72 E7 F2 |                 cmpsub  htmp,#1
0f2f0     07 1E 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
0f2f4     02 1E 17 52 |         if_nz   cmp     hidr_id, #2             wc
0f2f8     2D 00 7C 3D |         if_ae   ret     wcz
0f2fc     20 72 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
0f300     B9 F3 03 F1 |                 add     ptrb,htmp
0f304     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
0f308     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
0f30c     28 0E 64 FD |                 setq    #8-1
0f310     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
0f314                 |         end
0f314                 | 
0f314                 | 
0f314                 |         if EMUPAD_MAX_PLAYER > 0
0f314                 | .emupad_no_hat
0f314                 |         if EMUPAD_BT0_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT1_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT2_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT3_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT4_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT5_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT6_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT7_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT8_BIT >= 0
0f314                 |         end
0f314                 |         if EMUPAD_BT9_BIT >= 0
0f314                 |         end
0f314                 | .emupad_slot_over
0f314                 |         end
0f314                 | 
0f314                 |         if 0
0f314                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
0f314                 | 
0f314                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
0f314                 | 
0f314                 |         end
0f314     2D 00 64 FD |                 ret
0f318                 | end
0f318                 | 
0f318                 | if EMUPAD_MAX_PLAYER > 0
0f318                 | '------------------------------------------------------------------------------
0f318                 | ' Clear EmuPad state
0f318                 | '------------------------------------------------------------------------------
0f318                 | emupad_reset
0f318                 | 
0f318                 | '------------------------------------------------------------------------------
0f318                 | ' Get EmuPad Player number for current device (into retval)
0f318                 | ' Z flag is also set if current device is valid
0f318                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
0f318                 | '------------------------------------------------------------------------------
0f318                 | emupad_getnum
0f318                 | .loop
0f318                 | '------------------------------------------------------------------------------
0f318                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
0f318                 | '------------------------------------------------------------------------------
0f318                 | emupad_discon
0f318                 | .loop         
0f318                 |         
0f318                 |         ' FALL THROUGH!!!
0f318                 | 
0f318                 | '------------------------------------------------------------------------------
0f318                 | ' Update EmuPad reports (all of them...)
0f318                 | '------------------------------------------------------------------------------
0f318                 | emupad_write_reports
0f318                 | .devloop
0f318                 | 
0f318                 | end
0f318                 | 
0f318                 | 
0f318                 | '------------------------------------------------------------------------------
0f318                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
0f318                 | '------------------------------------------------------------------------------
0f318                 | ' On entry:
0f318                 | ' On exit:
0f318                 | '------------------------------------------------------------------------------
0f318                 | hget_hub_status
0f318     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
0f31c     27 91 03 F6 |                 mov     hpar2, urx_buff_p
0f320     32 93 23 F9 |                 setword hpar3, hub_next_datax, #0
0f324     01 92 2F F9 |                 setword hpar3, #1, #1
0f328     CF 02 A0 FD |                 call    #do_int_in
0f32c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0f330     0C 00 90 AD |         if_z    jmp     #.data
0f334     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
0f338     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
0f33c     2D 00 64 FD |                 ret
0f340                 | .data
0f340     00 92 0F F2 |                 cmp     hpar3, #0               wz
0f344     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
0f348                 | 
0f348     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
0f34c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
0f350     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
0f354     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
0f358                 |                 debug(ubin_long(hub_status_chg))
0f358                 | 
0f358     01 5A 06 F6 |                 mov     hdev_port, #1
0f35c                 | .loop
0f35c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
0f360     0C 00 B0 AD |         if_x1   call    #hub_port_handler
0f364     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
0f368     F0 FF 9F 3D |         if_nc   jmp     #.loop
0f36c     2D 00 64 FD |                 ret
0f370                 | 
0f370                 | hub_port_handler
0f370     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
0f374     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
0f378     27 EF 03 F6 |                 mov     pb, urx_buff_p
0f37c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
0f380     55 02 A0 FD |                 call    #control_read
0f384     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
0f388                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
0f388                 | 
0f388     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
0f38c     50 01 90 5D |         if_x0   jmp     #.other
0f390     68 02 D0 FE |                 loc     ptra, #clr_port_feat
0f394     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
0f398     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
0f39c     A0 02 A0 FD |                 call    #control_write
0f3a0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
0f3a4     7C 01 90 5D |         if_x0   jmp     #.disconnect
0f3a8     B1 99 02 F6 |                 mov     hctwait, _100ms_
0f3ac     EF 02 A0 FD |                 call    #poll_waitx
0f3b0                 | 
0f3b0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
0f3b4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
0f3b8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
0f3bc     A0 02 A0 FD |                 call    #control_write
0f3c0                 | 
0f3c0     02 78 07 F6 |                 mov     htmp3, #2
0f3c4                 | .wait_reset
0f3c4     AD 99 02 F6 |                 mov     hctwait, _8ms_
0f3c8     EF 02 A0 FD |                 call    #poll_waitx
0f3cc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
0f3d0     27 EF 03 F6 |                 mov     pb, urx_buff_p
0f3d4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
0f3d8     55 02 A0 FD |                 call    #control_read
0f3dc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
0f3e0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
0f3e4     F7 79 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
0f3e8                 | 
0f3e8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
0f3ec     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
0f3f0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
0f3f4     A0 02 A0 FD |                 call    #control_write
0f3f8                 | 
0f3f8     24 72 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
0f3fc                 | .wait_recover
0f3fc     A8 99 02 F6 |                 mov     hctwait, _1ms_
0f400     EF 02 A0 FD |                 call    #poll_waitx
0f404     FD 73 6F FB |                 djnz    htmp,#.wait_recover
0f408                 | 
0f408     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
0f40c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
0f410     0E 6A 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
0f414                 | 
0f414     00 08 00 FF 
0f418     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
0f41c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
0f420     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
0f424     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
0f428     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
0f42c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0f430     48 01 90 5D |         if_nz   jmp     #.done
0f434                 | .get_dev_desc
0f434     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
0f438     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
0f43c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
0f440     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
0f444     2D 73 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
0f448     01 73 57 FC |                 wrword  htmp, ptra[wValue]
0f44c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
0f450     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0f454     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
0f458     AD 99 02 F6 |                 mov     hctwait, _8ms_
0f45c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
0f460     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
0f464     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
0f468     BE 00 A0 FD |                 call    #calc_crc5
0f46c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
0f470     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
0f474     F7 AD C2 FA |                 rdbyte  total_data, pb
0f478     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
0f47c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
0f480     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0f484     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
0f488     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
0f48c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
0f490                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
0f490     A0 99 02 F6 |                 mov     hctwait, _500us_
0f494     EF 02 A0 FD |                 call    #poll_waitx
0f498     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
0f49c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
0f4a0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
0f4a4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
0f4a8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
0f4ac     CC 00 90 5D |         if_nz   jmp     #.done
0f4b0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
0f4b4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
0f4b8     61 87 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
0f4bc     61 89 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
0f4c0     00 73 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
0f4c4     09 86 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
0f4c8     02 88 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
0f4cc     56 73 1B A2 |         if_z    cmp     htmp, total_data        wcz
0f4d0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
0f4d4     A4 00 90 CD |         if_b    jmp     #.done
0f4d8     68 F0 BF FD |                 call    #hparse_con_desc
0f4dc     9C 00 90 FD |                 jmp     #.done
0f4e0                 | 
0f4e0                 | .other
0f4e0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
0f4e4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
0f4e8     28 00 90 AD |         if_x1   jmp     #.reset_feature
0f4ec     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
0f4f0     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
0f4f4     1C 00 90 AD |         if_x1   jmp     #.reset_feature
0f4f8     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
0f4fc     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
0f500     10 00 90 AD |         if_x1   jmp     #.reset_feature
0f504     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
0f508     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
0f50c     04 00 90 AD |         if_x1   jmp     #.reset_feature
0f510     68 00 90 FD |                 jmp     #.done
0f514                 | .reset_feature
0f514     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
0f518     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
0f51c     A0 02 A0 FD |                 call    #control_write
0f520     58 00 90 FD |                 jmp     #.done
0f524                 | .disconnect
0f524                 | 
0f524     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
0f528     00 72 E3 F8 |                 getbyte htmp
0f52c     03 72 0F F2 |                 cmp     htmp,#KB_READY wz
0f530     05 72 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
0f534     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
0f538     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
0f53c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
0f540     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
0f544                 |         if EMUPAD_MAX_PLAYER > 0
0f544                 |         end
0f544                 |         if HAVE_MOUSE
0f544     04 72 0F F2 |                 cmp     htmp, #M_READY          wz
0f548     05 72 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
0f54c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
0f550                 |         end
0f550                 |         if HAVE_HIDPAD
0f550     30 0A F0 FE |                 loc ptrb,#hidpad_report
0f554     2D 73 03 F6 |                 mov htmp,hdev_port
0f558     01 72 E7 F2 |                 cmpsub htmp,#1
0f55c     20 72 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
0f560     B9 F3 03 F1 |                 add ptrb,htmp
0f564     28 0E 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
0f568     80 01 6C FC |                 wrlong #0,ptrb
0f56c                 |         end
0f56c                 | 
0f56c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
0f570     00 00 C4 F8 |                 setbyte #0
0f574     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
0f578     00 00 04 F6 |                 mov     0-0, #0
0f57c                 | 
0f57c                 | .done
0f57c     0E 6A 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
0f580     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
0f584     22 6F 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
0f588     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
0f58c     A6 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
0f590     A4 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
0f594                 | 
0f594     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
0f598     27 EF 03 F6 |                 mov     pb, urx_buff_p
0f59c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
0f5a0     55 02 A0 FD |                 call    #control_read
0f5a4     00 69 06 FB |                 rdlong  hub_port_status, ptra
0f5a8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
0f5a8     2D 00 64 FD |                 ret
0f5ac                 | 
0f5ac                 | '------------------------------------------------------------------------------
0f5ac                 | ' Partially populated SETUP packets
0f5ac                 | '------------------------------------------------------------------------------
0f5ac     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
0f5ad     06          |                 byte    REQ_GET_DESC
0f5ae     00 01       |                 word    TYPE_DEVICE << 8
0f5b0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
0f5b2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
0f5b4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
0f5b5     06          |                 byte    REQ_GET_DESC
0f5b6     00 02       |                 word    TYPE_CONFIG << 8
0f5b8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
0f5ba     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
0f5bc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
0f5bd     09          |                 byte    REQ_SET_CONFIG
0f5be     00 00       |                 word    0       ' Configuration value
0f5c0     00 00       |                 word    0       ' Zero
0f5c2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
0f5c4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
0f5c5     05          |                 byte    REQ_SET_ADDR
0f5c6     00 00       |                 word    0       ' Zero
0f5c8     00 00       |                 word    0       ' Zero
0f5ca     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
0f5cc                 | '------------------------------------------------------------------------------
0f5cc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
0f5cc                 | ' wValue field dictates which protocol should be used.
0f5cc                 | '
0f5cc                 | ' When initialized, all devices default to report protocol. However the host
0f5cc                 | ' should not make any assumptions about the device state and should set the
0f5cc                 | ' desired protocol whenever initializing a device.
0f5cc                 | '------------------------------------------------------------------------------
0f5cc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
0f5cd     0B          |                 byte    HID_SET_PROTO
0f5ce     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
0f5d0                 |                                                 ' (HID 1.11 Section 7.2.6).
0f5d0     00 00       |                 word    0               ' Interface index number.
0f5d2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
0f5d4                 | '------------------------------------------------------------------------------
0f5d4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
0f5d5     0A          |                 byte    HID_SET_IDLE
0f5d6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
0f5d8                 |                                         ' reporting until a change is detected in the report data
0f5d8                 | 
0f5d8                 |                                         ' (HID 1.11 Section 7.2.4).
0f5d8     00 00       |                 word    0       ' Interface index number.
0f5da     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
0f5dc     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
0f5dd     09          |                 byte    HID_SET_REPORT
0f5de     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
0f5e0                 |                                         ' (HID 1.11 Section 7.2.2).
0f5e0     00 00       |                 word    0       ' Interface index number.
0f5e2     00 00       |                 word    0       ' Size of the report, in bytes.
0f5e4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
0f5e5     06          |                 byte    REQ_GET_DESC
0f5e6     00 22       |                 word    TYPE_REPORT << 8
0f5e8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
0f5ea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
0f5ec                 | '------------------------------------------------------------------------------
0f5ec     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
0f5ed     06          |                 byte    REQ_GET_DESC
0f5ee     00 29       |                 word    TYPE_HUB << 8
0f5f0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
0f5f2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
0f5f4     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
0f5f5     03          |                 byte    REQ_SET_FEATURE
0f5f6     00 00       |                 word    0       ' port power
0f5f8     01 00       |                 word    1       ' Port index number (1+)
0f5fa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
0f5fc     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
0f5fd     01          |                 byte    REQ_CLEAR_FEATURE
0f5fe     00 00       |                 word    0       ' port power
0f600     01 00       |                 word    1       ' Port index number (1+)
0f602     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
0f604     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
0f605     00          |                 byte    REQ_GET_STATUS
0f606     00 00       |                 word    0
0f608     01 00       |                 word    1       ' Port index number (1+)
0f60a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
0f60c                 | '------------------------------------------------------------------------------
0f60c                 | if _HAVE_GAMEPAD
0f60c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
0f610                 | ps3_command_buff
0f610     00 00 00 00 
0f614     00          |                 byte    $00, $00, $00, $00, $00
0f615     00 00 00 00 
0f619     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
0f61a     FF 27 10 00 
0f61e     32          |                 byte    $FF, $27, $10, $00, $32
0f61f     FF 27 10 00 
0f623     32          |                 byte    $FF, $27, $10, $00, $32
0f624     FF 27 10 00 
0f628     32          |                 byte    $FF, $27, $10, $00, $32
0f629     FF 27 10 00 
0f62d     32          |                 byte    $FF, $27, $10, $00, $32
0f62e     00 00 00 00 
0f632     00          |                 byte    $00, $00, $00, $00, $00
0f633     00 00 00 00 
0f637     00          |                 byte    $00, $00, $00, $00, $00
0f638     00 00 00 00 
0f63c     00          |                 byte    $00, $00, $00, $00, $00
0f63d     00 00 00    |                 byte    $00, $00, $00
0f640                 | '------------------------------------------------------------------------------
0f640     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
0f643                 |                                         ' 0x01 All blinking
0f643                 |                                         ' 0x02 1 flashes, then on
0f643                 |                                         ' 0x03 2 flashes, then on
0f643                 |                                         ' 0x04 3 flashes, then on
0f643                 |                                         ' 0x05 4 flashes, then on
0f643                 |                                         ' 0x06 1 on
0f643                 |                                         ' 0x07 2 on
0f643                 |                                         ' 0x08 3 on
0f643                 |                                         ' 0x09 4 on
0f643                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
0f643                 |                                         ' 0x0B Blinking*
0f643                 |                                         ' 0x0C Slow blinking*
0f643                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
0f643     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
0f646     00          |                 byte    $00             ' Left rumble
0f647     00          |                 byte    $00             ' Right rumble
0f648     00 00 00    |                 byte    $00, $00, $00
0f64b                 | 
0f64b                 | xinp_fix_8bitdo '' This inexplicable String request (that WILL fail) somehow un-bugs the terrible firmware
0f64b                 |                 '' of certain wired 8bitdo gamepads.
0f64b     80          |                 byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
0f64c     06          |                 byte    REQ_GET_DESC
0f64d     04 03       |                 word    TYPE_STRING << 8 + 4
0f64f     09 04       |                 word    $0409   ' Zero or Language ID (Section 9.6.7)
0f651     02 00       |                 word    2       ' Number of bytes to transfer if there is a data stage
0f653     00          | end
0f654                 | alignl
0f654                 | 
0f654                 | if HAVE_MOUSE
0f654     00 00 00 00 
0f658     00 00 00 00 | mouse_limits long 0[2]
0f65c     00 00 00 00 | mouse_outptr long 0
0f660                 | end
0f660                 | 
0f660                 | if KEYQUEUE_SIZE > 0
0f660     00          | keyq_head byte 0
0f661     00          | keyq_tail byte 0
0f662     00 00 00 00 
      ...             
0f85e     00 00 00 00 
0f862     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
0f864                 | alignl
0f864                 | end
0f864                 | 
0f864                 | if EMUPAD_MAX_PLAYER > 0
0f864                 | emupad_rule_buffer
0f864                 | if EMUPAD_BUILTIN_RULES
0f864                 | file "padmap_builtin.dat"
0f864                 | end
0f864                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
0f864                 | '' Default rule directly follows!
0f864                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
0f864                 | end
0f864                 | 
0f864                 | '------------------------------------------------------------------------------
0f864                 | ' The USB data cache area gets zero-filled at every device disconnect
0f864                 | '------------------------------------------------------------------------------
0f864                 | usb_cache_start
0f864                 | 
0f864                 | ' HID descriptor and report buffers
0f864                 | if !!OVERLAP_MEMORY
0f864     00 00 00 00 
      ...             
0ff5c     00 00 00 00 
0ff60     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
0ff64                 | end
0ff64     00 00 00 00 
0ff68     00 00 00 00 | hkbd_report     byte    0[8]
0ff6c     00 00 00 00 | hkbd_led_rep    byte    0
0ff70                 | alignl
0ff70                 | 
0ff70     00 00 00 00 
0ff74     00 00 00 00 
0ff78     00 00 00 00 
0ff7c     00 00 00 00 
0ff80     00 00 00 00 | hid_stack       long 0[(hidr_end - hidr_state) * 1]
0ff84                 | 
0ff84                 | if HAVE_HIDPAD
0ff84     00 00 00 00 
      ...             
1005c     00 00 00 00 
10060     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
10064                 | end
10064                 | 
10064                 | ' HUB descriptor
10064     00          | hub_descr       byte    0   ' bDescLength
10065     00          |                 byte    0   ' bDescriptorType
10066     00          |                 byte    0   ' bNbrPorts
10067     00 00       |                 word    0   ' wHubCharacteristics
10069     00          |                 byte    0   ' bPwrOn2PwrGood
1006a     00          |                 byte    0   ' bHubContrCurrent
1006b     00          |                 byte    0   ' DeviceRemoveable
1006c     00          |                 byte    0   ' PortPwrCtrlMask
1006d                 | 
1006d                 | usb_cache_end
1006d                 | 
1006d                 | if HAVE_MOUSE
1006d     00 00 00 00 | mouse_xacc      long 0
10071     00 00 00 00 | mouse_yacc      long 0
10075     00 00 00 00 | mouse_zacc      long 0
10079     00          | mouse_bstate    byte 0
1007a     00          | mouse_lpending  byte 0
1007b     00          | mouse_rpending  byte 0
1007c     00          | mouse_mpending  byte 0
1007d     00          | mouse_lock      byte 0
1007e     00 00 00    |                 byte 0[3] ' padding
10081                 | end
10081                 | 
10081     00 00 00 00 
      ...             
100f9     00 00 00 00 
100fd     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
10101     00 00 00 00 
10105     00 00 00 00 
10109     00 00 00 00 
1010d     00 00 00 00 
10111     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
10113     00 00 00 00 
      ...             
1020b     00 00 00 00 
1020f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
10213                 | 
10213     00          | driver_cog      byte    0                       ' Current driver cog + 1
10214                 | 	alignl
10214                 | __system__dat_
10214     00 00 00 00 
10218     00 00 00 00 | 	byte	$00[8]
1021c     03 00 00 00 
10220     00 00 00 00 
10224     00 00 00 00 
10228     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
1022c     00 00 00 00 
10230     00 00 00 00 
10234     00 00 00 00 
10238     00 00 00 00 
1023c     00 00 00 00 
10240     00 00 00 00 | 	byte	$00[24]
10244     01 80 00 00 
10248     00 00 00 00 
1024c     00 00 00 00 
10250     00 00 00 00 | 	byte	$01, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10254     00 00 00 00 | 	byte	$00, $00, $00, $00
10258     00 00 00 00 | 	long	(0 {__system___tx})<<20
1025c     00 00 10 00 | 	long	(1 {__system___rx})<<20
10260     00 00 00 00 | 	byte	$00, $00, $00, $00
10264     00 00 C0 00 | 	long	(12 {__system___rxtxioctl_0153})<<20
10268     00 00 D0 00 | 	long	(13 {__system____dummy_flush_0154})<<20
1026c     00 00 00 00 
10270     00 00 00 00 | 	byte	$00[8]
10274     01 00 00 00 
10278     02 80 00 00 
1027c     00 00 00 00 
10280     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
10284     00 00 00 00 
10288     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
1028c     00 00 00 00 | 	long	(0 {__system___tx})<<20
10290     00 00 10 00 | 	long	(1 {__system___rx})<<20
10294     00 00 00 00 | 	byte	$00, $00, $00, $00
10298     00 00 C0 00 | 	long	(12 {__system___rxtxioctl_0153})<<20
1029c     00 00 D0 00 | 	long	(13 {__system____dummy_flush_0154})<<20
102a0     00 00 00 00 
102a4     00 00 00 00 | 	byte	$00[8]
102a8     01 00 00 00 
102ac     02 80 00 00 
102b0     00 00 00 00 
102b4     00 00 00 00 | 	byte	$01, $00, $00, $00, $02, $80, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
102b8     00 00 00 00 
102bc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
102c0     00 00 00 00 | 	long	(0 {__system___tx})<<20
102c4     00 00 10 00 | 	long	(1 {__system___rx})<<20
102c8     00 00 00 00 | 	byte	$00, $00, $00, $00
102cc     00 00 C0 00 | 	long	(12 {__system___rxtxioctl_0153})<<20
102d0     00 00 D0 00 | 	long	(13 {__system____dummy_flush_0154})<<20
102d4     00 00 00 00 
      ...             
1043c     00 00 00 00 
10440     00 00 00 00 | 	byte	$00[368]
10444                 | __methodtable__
10444     70 6F 00 00 | 	long	@__system___tx
10448     B0 6F 00 00 | 	long	@__system___rx
1044c     BC 15 00 00 | 	long	@_hg010b_spin2_putchar
10450     FC 08 00 00 | 	long	@_getchar
10454     24 85 00 00 | 	long	@__system___struct___bas_wrap_sender_tx_
10458     68 85 00 00 | 	long	@__system___struct___bas_wrap_sender_rx_
1045c     B0 85 00 00 | 	long	@__system___struct___bas_wrap_sender_close_
10460     54 84 00 00 | 	long	@__system___struct__s_vfs_file_t_putchar_
10464     C4 84 00 00 | 	long	@__system___struct__s_vfs_file_t_getchar_
10468     C4 7E 00 00 | 	long	@__system____default_putc
1046c     40 7E 00 00 | 	long	@__system____default_getc
10470     70 7F 00 00 | 	long	@__system____default_flush
10474     24 83 00 00 | 	long	@__system___rxtxioctl_0153
10478     7C 83 00 00 | 	long	@__system____dummy_flush_0154
1047c                 | __heap_base
1047c     00 00 00 00 
      ...             
11bec     00 00 00 00 
11bf0     00 00 00 00 | 	long	0[1502]
11bf4                 | objmem
11bf4     00 00 00 00 
      ...             
2d848     00 00 00 00 
2d84c     00 00 00 00 | 	long	0[28439]
2d850                 | stackspace
2d850     00 00 00 00 | 	long	0[1]
2d854 13e             | 	org	COG_BSS_START
2d854 13e             | _var01
2d854 13e             | 	res	1
2d854 13f             | _var02
2d854 13f             | 	res	1
2d854 140             | _var03
2d854 140             | 	res	1
2d854 141             | _var04
2d854 141             | 	res	1
2d854 142             | _var05
2d854 142             | 	res	1
2d854 143             | _var06
2d854 143             | 	res	1
2d854 144             | _var07
2d854 144             | 	res	1
2d854 145             | _var08
2d854 145             | 	res	1
2d854 146             | arg01
2d854 146             | 	res	1
2d854 147             | arg02
2d854 147             | 	res	1
2d854 148             | arg03
2d854 148             | 	res	1
2d854 149             | arg04
2d854 149             | 	res	1
2d854 14a             | arg05
2d854 14a             | 	res	1
2d854 14b             | local01
2d854 14b             | 	res	1
2d854 14c             | local02
2d854 14c             | 	res	1
2d854 14d             | local03
2d854 14d             | 	res	1
2d854 14e             | local04
2d854 14e             | 	res	1
2d854 14f             | local05
2d854 14f             | 	res	1
2d854 150             | local06
2d854 150             | 	res	1
2d854 151             | local07
2d854 151             | 	res	1
2d854 152             | local08
2d854 152             | 	res	1
2d854 153             | local09
2d854 153             | 	res	1
2d854 154             | local10
2d854 154             | 	res	1
2d854 155             | local11
2d854 155             | 	res	1
2d854 156             | local12
2d854 156             | 	res	1
2d854 157             | local13
2d854 157             | 	res	1
2d854 158             | muldiva_
2d854 158             | 	res	1
2d854 159             | muldivb_
2d854 159             | 	res	1
2d854 15a             | 	fit	480
2d854 15a             | 
