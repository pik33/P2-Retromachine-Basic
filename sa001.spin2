' A simple synthesizer/audio driver for a P2
' v. 0.01 alpha - 20230924
' MIT license
' Piotr Kardasz pik33@o2.pl with the help from P2 forum community :) 
' 8 channel version
'-------------------------------------------------------------------
con

_clkfreq=340000000
left= 14
right=15

c4=262
d4=294
e4=330
f4=349
g4=392
a4=440
h4=494

var

{{
Channel registers:
long #0: the sample phase accumulator: use it as read only although you -can- change this while playing (not recommended, the driver cog writes there at every sample)
long #1: the current sample generated, 2 words, right:left
long #2: envelope PA
long #3: the sample pointer.
         Set bit #27 to 1 to generate noise instead of audio
long #5: volume and pan
         word #10: volume, 0..16384(=1). Values more than 16384 could cause clipping if sample is normalized
         word #11: pan. 16384: full left, 8192: center, 0: full right
long #6  frequency

long #7  was: (reserved, unused. The planned usage is ADSR stuff.)
         Command, bit 31=set sample rate, bit 30 - set sample source (1=hub,0=psram)

long #9  envelope pointer. Points to the start of the envelope definition
long #10 envelope speed. Number of Paula's periods between 2 envelope values. 
long #11 envelope length
long #12..15 reserved, unused
}}

'

long channel1[16]
long channel2[16]
long channel3[16]
long channel4[16]
long channel5[16]
long channel6[16]
long channel7[16]
long channel8[16]


pub test()

start(0,0,0)
longmove($60000,@sinewave+16,512)
play(2,$60000,$0051_1111,16384,1024,0)  

'--------------------------------------------------------------
'---------- Init the variables, start the cog. ----------------
'--------------------------------------------------------------

pub start(mbox,scope,cache) :cog,base | iii

' mbox: PSRAM mailbox or 0 if no PSRAM
' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
' cache: a pointer to 2 KB long HUB cache for PSRAM audio data

base:=@channel1[0]

repeat iii from 0 to 7
  long[base+64*iii]:=0
  long[base+64*iii+4]:=0
  long[base+64*iii+12]:=0
  long[base+64*iii+16]:=0
  word[base+64*iii+20]:=0
  word[base+64*iii+22]:=8192
  long[base+64*iii+24]:=1
  long[base+64*iii+8]:= @null | $C0000000
  long[base+64*iii+32]:=0
  long[base+64*iii+36]:=0
  long[base+64*iii+40]:=0
  long[base+64*iii+44]:=0
  long[base+64*iii+28]:=0
  
cog:=coginit(16,@audio,base)
waitms(100)
return cog,base

' a simple play procedure to not poke everything. 

pub play(channel,sample,splfreq,vol,len,loop=-1) |base2

base2:=@channel1[0]+64*channel


word[base2+20]:=vol
long[base2+24]:=splfreq

long[base2+28]:=0 
long[base2+32]:=0    
long[base2+36]:=0    
long[base2+40]:=0    
long[base2+44]:=0    
long[base2+8]:=sample+$C0000000     


    
pub stop(channel) 'silence it

word[@channel1[0]+64*channel+20]:=0
word[@channel1[0]+64*channel+20]:=0


'--------------------------------------------------------------
'------ PASM driver code --------------------------------------
'-------------------------------------------------------------- 

dat

audio		org   	0

            	wrpin   dac2,#left           	' PWM DAC at 264600=6*44100
            	wxpin   ##6*256,#left       	' Set DACs sample rate. 
            	wrpin   dac2,#right
            	wxpin   ##6*256,#right    
            	dirh    #left addpins 1
            	setse1  #%001<<6 + left      	' Set the event - DAC empty
            	mov     cn,#0
            
'---------------------------------------------------------------------------------        
'----------------- The main loop -------------------------------------------------
'---------------------------------------------------------------------------------

loop       	incmod 	cn,#7 wcz
	if_nz	jmp 	#p401
 ' waitx ##34_000_000*1
	   	waitse1
	   	bitnot  ls,#15                	' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
            	bitnot  rs,#15		     	' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
	   	wypin 	ls,#left
           	wypin 	rs,#right
            	mov 	ls,#0
           	mov 	rs,#0
           
'----------------------------------------------------------------------------------
'------------- Compute channel samples --------------------------------------------
'----------------------------------------------------------------------------------


p401            mov     channeladd,cn           ' compute the pointer to channel parameters block
            	shl     channeladd,#6
            	add     ptra,channeladd

            	setq    #11                     ' read parameters
            	rdlong  pointer0,ptra

p405        	getword apan0,volpan0,#1       	' extract vol,pan,skip and freq from longs 
    	    	getword avol0,volpan0,#0

'---- envelopes
            
            	cmp  	envptr0,#0 wcz    	' read the pointer
    	if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
    	if_z    jmp     #p410			' and run away	

            	add     envph0,envspd0 
      	    	mov     envhi, envph0		' move phase acc to high part of env pointer
	    	shr     envhi,#6		' leave 10 bits in hi
	    	getword envlo,envhi,#0          ' and 16 bit in lo
	    	shr     envhi,#16		' move 10 bits of hi to the lower word
	    	cmp     envhi,envlen0 wcz	' compare this to envelope length
    	if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
    	if_ge   mov     envlo,#0
    	if_ge   mov     envph0,envlen0
    	if_ge   shl     envph0,#22

            	mov     envs1,envhi		' get the phase acc
            	shl     envs1,#1		' env defs are words, so phase acc*=2
            	add     envs1,envptr0		' and add the pointer
            	rdlong  envs1,envs1		' then read 2 entries
            	getword envs2,envs1,#1		' next value
            	getword envs1,envs1,#0		' current value
            	mul     envs2,envlo		' linear interpolate : new val x envlo
            	not     envlo			' sum of envlo and not envlo is always $FFFF
            	mul     envs1,envlo
            	add     envs1,envs2
            	shr     envs1,#18		' normalize it to $4000
            
p410        	testb   sstart0, #27 wz		' bit 27 set=noise channel TODO noise freq will not work now, correct this
    	if_z    getrnd  spl
    	if_z    jmp     #p406
 
                add     pointer0,freq0          ' compute the pointer to the next sample       
            	mov 	pointer00,pointer0
         	shr 	pointer00,#22	   
         	shl	pointer00,#1		' align to word, for 16-bit samples   
                cmp     pointer00,##2046 wz
     		add	pointer00,sstart0
     		
		rdlong	spl,pointer00
	if_nz	getword spl2,spl,#1
		getword spl,spl,#0		' clean high bits
	if_z	rdword	spl2,sstart0
	
	 	mov 	pointer00,pointer0
	 	shl	pointer00,#10		' get rid of 10 high bits
	 	shr	pointer00,#18		' normalize the rest to 14 bit for SCAS
	 	mov     pointer01,##16384
	 	sub	pointer01,pointer00

p999	 	scas 	spl,pointer01
	 	mov 	spl,0-0
	 	scas	spl2,pointer00
	 	add	spl,0-0



p406       	scas    spl,envs1			' apply envelope
           	mov     spl,0-0
            	scas    spl,avol0                 	' apply volume
            	mov     spl,0-0

            	scas    spl,apan0                 	' apply pan
            	mov     ls0,0-0
            	mov     qq,##16384
          	sub     qq,apan0
            	scas    spl,qq
            	mov     rs0, 0-0
      

		add	rs,rs0
		add 	ls,ls0
		
	
   
            	setword sample0,rs0,#1           	' pack samples into long
            	setword sample0,ls0,#0
            
            	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
    	if_z    mov     pointer0, #0  		
    	if_z    mov     envph0, #0  			' reset also envelope pha 
	if_z    wrlong  sstart0, ptra[2]      


p403        	setq    #1                         	' write new pointer and sample value to the hub
            	wrlong  pointer0,ptra
            	wrlong  envph0,ptra[8]			' todo: env pha has to be at the start of the block to avoid 2 wrlongs
            	sub     ptra, channeladd         	' reset the pointer to channel parameters
                      
p302        	jmp     #loop            'loop

'----------------------------------------------------------------------------------
'------------- This is the end of the main loop -----------------------------------
'----------------------------------------------------------------------------------


          



'---------------------------------------------------------------------------
'------- Variables ---------------------------------------------------------
'---------------------------------------------------------------------------

' constants

a40000000   long $40000000
a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before

' Time variables


channeladd long 0

front       long 0

' temporary variables 
qq          long 0
spl         long 0
spl2		long 0
zero        long 0
mailbox     long 0
mailbox2 long 0

' Interrupt ISR variables

lsample     long 0
rsample     long 0
lsnext      long 0
rsnext      long 0 

' channel parameter block

pointer0    long 0     
sample0     long 0
sstart0     long 0     ' start pointer and type at bit 31
lstart0     long 0
lend0       long 0
volpan0     long 0
freq0       long 0
command0    long 0
envph0	    long 0
envptr0	    long 0
envspd0	    long 0
envlen0	    long 0
res5	    long 0
res6	    long 0
res7	    long 0
res8	    long 0

afreq0      long 0
askip0      long 0
avol0       long 0
apan0       long 0

oldt0       long $FFFFFFFF    'Temporary time variables
cn          long 0
ct          long 0
dt0         long 0

' Samples
oldls       long 0
oldrs       long 0

ls0         long 0
rs0         long 0

ls          long 0    
rs          long 0

oldsample   long 0
newsample   long 0

nrsample    long 0
nlsample    long 0

scbase long 0
scptr long 0
scptr2 long 0
scope long 0

dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   

hubptr      long $71800
cache1      long 0
cache2      long 0
cache3      long 0
cache4      long 0
cache5      long 0
cache6      long 0
cache7      long 0
cache8      long 0


cmd         long 0
hubaddr     long 0
count       long 256
addrlo long 0
addrhi long 0
pointer00 long 0
pointer01 long 0
envhi long 0
envlo long 0
envs1 long 0
envs2 long 0
noise0 long 0
dropper long %10010010_10010010_10010010_10010010
'dropper long %11111111_11111111_11111111_11111110
'-----------------------------------------------------------------------------------------
'------ PASM driver ends here ------------------------------------------------------------
'----------------------------------------------------------------------------------------- 

'
dat 
null  			long 	0,0           ' for channel reset
sinewave 		file 	"/s/lauta.s2"    ' for testing
