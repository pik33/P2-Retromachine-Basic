00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic022.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 22
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 D8 1C A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 30 61 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 2F 5F 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 30 5F 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 60 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 5E 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 2F 5F 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 30 61 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 14 D3 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 5C D1 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 1C BB 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 5C C0 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 3C C4 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 C0 4A 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 7C CB 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 D0 5E 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 80 86 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 38 84 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 10 96 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc CC 5F 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     CC 49 B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     A4 49 B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     7C 49 B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     8C 3F B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     DC 3F B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     CC 3F B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     30 3F B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     20 4A 05 F6 | 	mov	COUNT_, #32
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     44 F0 07 F1 | 	add	ptra, ##580
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 12 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 29 02 F6 | 	mov	local06, local04
00aa8     03 28 66 F0 | 	shl	local06, #3
00aac     F2 28 02 F1 | 	add	local06, objptr
00ab0     20 01 00 FF 
00ab4     72 2B 06 F6 | 	mov	local07, ##@LR__4097
00ab8     14 2B 62 FC | 	wrlong	local07, local06
00abc     01 24 06 F1 | 	add	local04, #1
00ac0     7E 24 56 F2 | 	cmps	local04, #126 wc
00ac4     DC FF 9F CD |  if_b	jmp	#LR__0023
00ac8                 | LR__0024
00ac8     02 00 00 FF 
00acc     10 E4 05 F1 | 	add	objptr, ##1040
00ad0     F2 12 02 FB | 	rdlong	arg01, objptr
00ad4     2D 00 00 FF 
00ad8     E0 E5 85 F1 | 	sub	objptr, ##23520
00adc     78 68 B1 FD | 	call	#__system__RTrim_S
00ae0     FD 12 02 F6 | 	mov	arg01, result1
00ae4     B0 67 B1 FD | 	call	#__system__LTrim_S
00ae8     2D 00 00 FF 
00aec     E0 E5 05 F1 | 	add	objptr, ##23520
00af0     F2 FA 61 FC | 	wrlong	result1, objptr
00af4     20 01 00 FF 
00af8     73 1F 06 F6 | 	mov	local01, ##@LR__4098
00afc     24 00 00 FF 
00b00     7C E4 05 F1 | 	add	objptr, ##18556
00b04     F2 1E 62 FC | 	wrlong	local01, objptr
00b08     24 00 00 FF 
00b0c     7C E4 85 F1 | 	sub	objptr, ##18556
00b10     F2 12 02 FB | 	rdlong	arg01, objptr
00b14     2D 00 00 FF 
00b18     E0 E5 85 F1 | 	sub	objptr, ##23520
00b1c     09 2D 02 F6 | 	mov	local08, arg01
00b20     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b24                 | LR__0025
00b24     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b28     01 2C 06 51 |  if_ne	add	local08, #1
00b2c     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b30                 | LR__0026
00b30     09 2D 82 F1 | 	sub	local08, arg01
00b34     16 FB 09 F6 | 	mov	result1, local08 wz
00b38     52 00 00 FF 
00b3c     60 E4 05 F1 | 	add	objptr, ##42080
00b40     F2 FA 61 FC | 	wrlong	result1, objptr
00b44                 | ' if l=0 then goto 101
00b44     52 00 00 FF 
00b48     60 E4 85 F1 | 	sub	objptr, ##42080
00b4c     34 1C 90 AD |  if_e	jmp	#LR__0119
00b50     2D 00 00 FF 
00b54     E0 E5 05 F1 | 	add	objptr, ##23520
00b58     F2 14 02 FB | 	rdlong	arg02, objptr
00b5c     2D 00 00 FF 
00b60     E0 E5 85 F1 | 	sub	objptr, ##23520
00b64     20 01 00 FF 
00b68     74 17 06 F6 | 	mov	arg03, ##@LR__4099
00b6c     01 12 06 F6 | 	mov	arg01, #1
00b70     9C 68 B1 FD | 	call	#__system__Instr
00b74     52 00 00 FF 
00b78     64 E4 05 F1 | 	add	objptr, ##42084
00b7c     F2 FA 61 FC | 	wrlong	result1, objptr
00b80     FD 1E 02 F6 | 	mov	local01, result1
00b84     52 00 00 FF 
00b88     64 E4 85 F1 | 	sub	objptr, ##42084
00b8c     01 1E 56 F2 | 	cmps	local01, #1 wc
00b90     0C 01 90 CD |  if_b	jmp	#LR__0031
00b94     2D 00 00 FF 
00b98     E0 E5 05 F1 | 	add	objptr, ##23520
00b9c     F2 12 02 FB | 	rdlong	arg01, objptr
00ba0     2D 00 00 FF 
00ba4     E0 E5 85 F1 | 	sub	objptr, ##23520
00ba8     09 2D 02 F6 | 	mov	local08, arg01
00bac     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb0                 | LR__0027
00bb0     16 FB C9 FA | 	rdbyte	result1, local08 wz
00bb4     01 2C 06 51 |  if_ne	add	local08, #1
00bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bbc                 | LR__0028
00bbc     09 2D 82 F1 | 	sub	local08, arg01
00bc0     16 29 02 F6 | 	mov	local06, local08
00bc4     52 00 00 FF 
00bc8     64 E4 05 F1 | 	add	objptr, ##42084
00bcc     F2 2A 02 FB | 	rdlong	local07, objptr
00bd0     52 00 00 FF 
00bd4     64 E4 85 F1 | 	sub	objptr, ##42084
00bd8     14 2B 52 F2 | 	cmps	local07, local06 wc
00bdc     C0 00 90 3D |  if_ae	jmp	#LR__0031
00be0     2D 00 00 FF 
00be4     E0 E5 05 F1 | 	add	objptr, ##23520
00be8     F2 12 02 FB | 	rdlong	arg01, objptr
00bec     09 1F 02 F6 | 	mov	local01, arg01
00bf0     2D 00 00 FF 
00bf4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bf8     09 2D 02 F6 | 	mov	local08, arg01
00bfc     97 06 48 FB | 	callpa	#(@LR__0030-@LR__0029)>>2,fcache_load_ptr_
00c00                 | LR__0029
00c00     16 FB C9 FA | 	rdbyte	result1, local08 wz
00c04     01 2C 06 51 |  if_ne	add	local08, #1
00c08     F4 FF 9F 5D |  if_ne	jmp	#LR__0029
00c0c                 | LR__0030
00c0c     09 2D 82 F1 | 	sub	local08, arg01
00c10     16 15 02 F6 | 	mov	arg02, local08
00c14     52 00 00 FF 
00c18     64 E4 05 F1 | 	add	objptr, ##42084
00c1c     F2 2E 02 FB | 	rdlong	local09, objptr
00c20     52 00 00 FF 
00c24     64 E4 85 F1 | 	sub	objptr, ##42084
00c28     17 15 82 F1 | 	sub	arg02, local09
00c2c     0F 13 02 F6 | 	mov	arg01, local01
00c30     78 63 B1 FD | 	call	#__system__Right_S
00c34     FD 12 02 F6 | 	mov	arg01, result1
00c38     1C 67 B1 FD | 	call	#__system__RTrim_S
00c3c     FD 12 02 F6 | 	mov	arg01, result1
00c40     54 66 B1 FD | 	call	#__system__LTrim_S
00c44     52 00 00 FF 
00c48     68 E4 05 F1 | 	add	objptr, ##42088
00c4c     F2 FA 61 FC | 	wrlong	result1, objptr
00c50     24 00 00 FF 
00c54     88 E4 85 F1 | 	sub	objptr, ##18568
00c58     F2 12 02 FB | 	rdlong	arg01, objptr
00c5c     24 00 00 FF 
00c60     84 E4 05 F1 | 	add	objptr, ##18564
00c64     F2 14 02 FB | 	rdlong	arg02, objptr
00c68     52 00 00 FF 
00c6c     64 E4 85 F1 | 	sub	objptr, ##42084
00c70     01 14 86 F1 | 	sub	arg02, #1
00c74     AC 62 B1 FD | 	call	#__system__Left_S
00c78     FD 12 02 F6 | 	mov	arg01, result1
00c7c     D8 66 B1 FD | 	call	#__system__RTrim_S
00c80     FD 12 02 F6 | 	mov	arg01, result1
00c84     10 66 B1 FD | 	call	#__system__LTrim_S
00c88     2D 00 00 FF 
00c8c     E0 E5 05 F1 | 	add	objptr, ##23520
00c90     F2 FA 61 FC | 	wrlong	result1, objptr
00c94     2D 00 00 FF 
00c98     E0 E5 85 F1 | 	sub	objptr, ##23520
00c9c     1C 00 90 FD | 	jmp	#LR__0032
00ca0                 | LR__0031
00ca0     20 01 00 FF 
00ca4     76 1F 06 F6 | 	mov	local01, ##@LR__4100
00ca8     52 00 00 FF 
00cac     68 E4 05 F1 | 	add	objptr, ##42088
00cb0     F2 1E 62 FC | 	wrlong	local01, objptr
00cb4     52 00 00 FF 
00cb8     68 E4 85 F1 | 	sub	objptr, ##42088
00cbc                 | LR__0032
00cbc                 | ' 
00cbc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00cbc     2D 00 00 FF 
00cc0     E8 E5 05 F1 | 	add	objptr, ##23528
00cc4     F2 1E 02 FB | 	rdlong	local01, objptr
00cc8     2D 00 00 FF 
00ccc     E8 E5 85 F1 | 	sub	objptr, ##23528
00cd0     FF FF 7F FF 
00cd4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00cd8     3C 00 90 5D |  if_ne	jmp	#LR__0033
00cdc     52 00 00 FF 
00ce0     68 E4 05 F1 | 	add	objptr, ##42088
00ce4     F2 12 02 FB | 	rdlong	arg01, objptr
00ce8     52 00 00 FF 
00cec     68 E4 85 F1 | 	sub	objptr, ##42088
00cf0     20 01 00 FF 
00cf4     77 15 06 F6 | 	mov	arg02, ##@LR__4101
00cf8     40 42 B1 FD | 	call	#__system___string_cmp
00cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
00d00     2D 00 00 5F 
00d04     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00d08     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00d0c     2D 00 00 5F 
00d10     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00d14     08 01 90 5D |  if_ne	jmp	#LR__0037
00d18                 | LR__0033
00d18                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00d18     2D 00 00 FF 
00d1c     E8 E5 05 F1 | 	add	objptr, ##23528
00d20     F2 1E 02 FB | 	rdlong	local01, objptr
00d24     2D 00 00 FF 
00d28     E8 E5 85 F1 | 	sub	objptr, ##23528
00d2c     FF FF 7F FF 
00d30     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00d34     3C 00 90 5D |  if_ne	jmp	#LR__0034
00d38     52 00 00 FF 
00d3c     68 E4 05 F1 | 	add	objptr, ##42088
00d40     F2 12 02 FB | 	rdlong	arg01, objptr
00d44     52 00 00 FF 
00d48     68 E4 85 F1 | 	sub	objptr, ##42088
00d4c     20 01 00 FF 
00d50     78 15 06 F6 | 	mov	arg02, ##@LR__4102
00d54     E4 41 B1 FD | 	call	#__system___string_cmp
00d58     00 FA 0D F2 | 	cmp	result1, #0 wz
00d5c     2D 00 00 AF 
00d60     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00d64     F2 06 68 AC |  if_e	wrlong	#3, objptr
00d68     2D 00 00 AF 
00d6c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00d70     AC 00 90 AD |  if_e	jmp	#LR__0037
00d74                 | LR__0034
00d74                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00d74     2D 00 00 FF 
00d78     E8 E5 05 F1 | 	add	objptr, ##23528
00d7c     F2 1E 02 FB | 	rdlong	local01, objptr
00d80     2D 00 00 FF 
00d84     E8 E5 85 F1 | 	sub	objptr, ##23528
00d88     04 1E 0E F2 | 	cmp	local01, #4 wz
00d8c     3C 00 90 5D |  if_ne	jmp	#LR__0035
00d90     52 00 00 FF 
00d94     68 E4 05 F1 | 	add	objptr, ##42088
00d98     F2 12 02 FB | 	rdlong	arg01, objptr
00d9c     52 00 00 FF 
00da0     68 E4 85 F1 | 	sub	objptr, ##42088
00da4     20 01 00 FF 
00da8     79 15 06 F6 | 	mov	arg02, ##@LR__4103
00dac     8C 41 B1 FD | 	call	#__system___string_cmp
00db0     00 FA 0D F2 | 	cmp	result1, #0 wz
00db4     2D 00 00 5F 
00db8     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00dbc     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00dc0     2D 00 00 5F 
00dc4     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00dc8     54 00 90 5D |  if_ne	jmp	#LR__0037
00dcc                 | LR__0035
00dcc                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00dcc     2D 00 00 FF 
00dd0     E8 E5 05 F1 | 	add	objptr, ##23528
00dd4     F2 1E 02 FB | 	rdlong	local01, objptr
00dd8     2D 00 00 FF 
00ddc     E8 E5 85 F1 | 	sub	objptr, ##23528
00de0     04 1E 0E F2 | 	cmp	local01, #4 wz
00de4     38 00 90 5D |  if_ne	jmp	#LR__0036
00de8     52 00 00 FF 
00dec     68 E4 05 F1 | 	add	objptr, ##42088
00df0     F2 12 02 FB | 	rdlong	arg01, objptr
00df4     52 00 00 FF 
00df8     68 E4 85 F1 | 	sub	objptr, ##42088
00dfc     20 01 00 FF 
00e00     7A 15 06 F6 | 	mov	arg02, ##@LR__4104
00e04     34 41 B1 FD | 	call	#__system___string_cmp
00e08     00 FA 0D F2 | 	cmp	result1, #0 wz
00e0c     2D 00 00 AF 
00e10     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00e14     F2 04 68 AC |  if_e	wrlong	#2, objptr
00e18     2D 00 00 AF 
00e1c     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00e20                 | LR__0036
00e20                 | LR__0037
00e20     20 4E 05 F1 | 	add	fp, #32
00e24     A7 00 68 FC | 	wrlong	#0, fp
00e28     20 4E 85 F1 | 	sub	fp, #32
00e2c     00 24 06 F6 | 	mov	local04, #0
00e30     01 30 06 F6 | 	mov	local10, #1
00e34                 | ' 
00e34                 | ' ' 1b: find separators
00e34                 | ' 
00e34                 | ' 107
00e34                 | ' separators(0)=0
00e34                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00e34                 | LR__0038
00e34     01 24 06 F1 | 	add	local04, #1
00e38     2D 00 00 FF 
00e3c     E0 E5 05 F1 | 	add	objptr, ##23520
00e40     F2 12 02 FB | 	rdlong	arg01, objptr
00e44     2D 00 00 FF 
00e48     E0 E5 85 F1 | 	sub	objptr, ##23520
00e4c     12 15 02 F6 | 	mov	arg02, local04
00e50     01 16 06 F6 | 	mov	arg03, #1
00e54     E4 61 B1 FD | 	call	#__system__Mid_S
00e58     52 00 00 FF 
00e5c     6C E4 05 F1 | 	add	objptr, ##42092
00e60     F2 FA 61 FC | 	wrlong	result1, objptr
00e64                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00e64     FD 12 02 F6 | 	mov	arg01, result1
00e68     52 00 00 FF 
00e6c     6C E4 85 F1 | 	sub	objptr, ##42092
00e70     1C 1C B0 FD | 	call	#_isseparator
00e74     00 FA 0D F2 | 	cmp	result1, #0 wz
00e78     1C 00 90 AD |  if_e	jmp	#LR__0039
00e7c     18 27 02 F6 | 	mov	local05, local10
00e80     02 26 66 F0 | 	shl	local05, #2
00e84     20 4E 05 F1 | 	add	fp, #32
00e88     A7 26 02 F1 | 	add	local05, fp
00e8c     13 25 62 FC | 	wrlong	local04, local05
00e90     01 30 06 F1 | 	add	local10, #1
00e94     20 4E 85 F1 | 	sub	fp, #32
00e98                 | LR__0039
00e98     52 00 00 FF 
00e9c     60 E4 05 F1 | 	add	objptr, ##42080
00ea0     F2 1E 02 FB | 	rdlong	local01, objptr
00ea4     52 00 00 FF 
00ea8     60 E4 85 F1 | 	sub	objptr, ##42080
00eac     0F 25 5A F2 | 	cmps	local04, local01 wcz
00eb0     80 FF 9F ED |  if_be	jmp	#LR__0038
00eb4     18 27 02 F6 | 	mov	local05, local10
00eb8     02 26 66 F0 | 	shl	local05, #2
00ebc     20 4E 05 F1 | 	add	fp, #32
00ec0     A7 26 02 F1 | 	add	local05, fp
00ec4     13 25 62 FC | 	wrlong	local04, local05
00ec8     00 32 06 F6 | 	mov	local11, #0
00ecc                 | ' for i=0 to j-1 
00ecc     00 24 06 F6 | 	mov	local04, #0
00ed0     18 35 02 F6 | 	mov	local12, local10
00ed4     20 4E 85 F1 | 	sub	fp, #32
00ed8                 | LR__0040
00ed8     1A 25 52 F2 | 	cmps	local04, local12 wc
00edc     88 01 90 3D |  if_ae	jmp	#LR__0044
00ee0     12 27 02 F6 | 	mov	local05, local04
00ee4     02 26 66 F0 | 	shl	local05, #2
00ee8     20 4E 05 F1 | 	add	fp, #32
00eec     A7 26 02 F1 | 	add	local05, fp
00ef0     13 2F 02 FB | 	rdlong	local09, local05
00ef4     52 00 00 FF 
00ef8     74 E4 05 F1 | 	add	objptr, ##42100
00efc     F2 2E 62 FC | 	wrlong	local09, objptr
00f00     12 27 02 F6 | 	mov	local05, local04
00f04     01 26 06 F1 | 	add	local05, #1
00f08     02 26 66 F0 | 	shl	local05, #2
00f0c     A7 28 02 F6 | 	mov	local06, fp
00f10     A7 26 02 F1 | 	add	local05, fp
00f14     13 1F 02 FB | 	rdlong	local01, local05
00f18     04 E4 05 F1 | 	add	objptr, #4
00f1c     F2 1E 62 FC | 	wrlong	local01, objptr
00f20                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
00f20     04 E4 85 F1 | 	sub	objptr, #4
00f24     F2 1E 02 FB | 	rdlong	local01, objptr
00f28     52 00 00 FF 
00f2c     74 E4 85 F1 | 	sub	objptr, ##42100
00f30     01 1E 56 F2 | 	cmps	local01, #1 wc
00f34     20 4E 85 F1 | 	sub	fp, #32
00f38     84 00 90 CD |  if_b	jmp	#LR__0042
00f3c     2D 00 00 FF 
00f40     E0 E5 05 F1 | 	add	objptr, ##23520
00f44     F2 12 02 FB | 	rdlong	arg01, objptr
00f48     24 00 00 FF 
00f4c     94 E4 05 F1 | 	add	objptr, ##18580
00f50     F2 14 02 FB | 	rdlong	arg02, objptr
00f54     52 00 00 FF 
00f58     74 E4 85 F1 | 	sub	objptr, ##42100
00f5c     01 16 06 F6 | 	mov	arg03, #1
00f60     D8 60 B1 FD | 	call	#__system__Mid_S
00f64     52 00 00 FF 
00f68     7C E4 05 F1 | 	add	objptr, ##42108
00f6c     F2 FA 61 FC | 	wrlong	result1, objptr
00f70     52 00 00 FF 
00f74     7C E4 85 F1 | 	sub	objptr, ##42108
00f78     FD 12 02 F6 | 	mov	arg01, result1
00f7c     20 01 00 FF 
00f80     7B 15 06 F6 | 	mov	arg02, ##@LR__4105
00f84     B4 3F B1 FD | 	call	#__system___string_cmp
00f88     00 FA 0D F2 | 	cmp	result1, #0 wz
00f8c     30 00 90 AD |  if_e	jmp	#LR__0041
00f90     19 29 02 F6 | 	mov	local06, local11
00f94     03 28 66 F0 | 	shl	local06, #3
00f98     2B 00 00 FF 
00f9c     D0 E5 05 F1 | 	add	objptr, ##22480
00fa0     F2 28 02 F1 | 	add	local06, objptr
00fa4     26 00 00 FF 
00fa8     AC E4 05 F1 | 	add	objptr, ##19628
00fac     F2 2A 02 FB | 	rdlong	local07, objptr
00fb0     52 00 00 FF 
00fb4     7C E4 85 F1 | 	sub	objptr, ##42108
00fb8     14 2B 62 FC | 	wrlong	local07, local06
00fbc     01 32 06 F1 | 	add	local11, #1
00fc0                 | LR__0041
00fc0                 | LR__0042
00fc0     2D 00 00 FF 
00fc4     E0 E5 05 F1 | 	add	objptr, ##23520
00fc8     F2 12 02 FB | 	rdlong	arg01, objptr
00fcc     24 00 00 FF 
00fd0     94 E4 05 F1 | 	add	objptr, ##18580
00fd4     F2 14 02 FB | 	rdlong	arg02, objptr
00fd8     01 14 06 F1 | 	add	arg02, #1
00fdc     04 E4 05 F1 | 	add	objptr, #4
00fe0     F2 16 02 FB | 	rdlong	arg03, objptr
00fe4     04 E4 85 F1 | 	sub	objptr, #4
00fe8     F2 36 02 FB | 	rdlong	local13, objptr
00fec     52 00 00 FF 
00ff0     74 E4 85 F1 | 	sub	objptr, ##42100
00ff4     1B 2F 02 F6 | 	mov	local09, local13
00ff8     17 17 82 F1 | 	sub	arg03, local09
00ffc     01 16 86 F1 | 	sub	arg03, #1
01000     38 60 B1 FD | 	call	#__system__Mid_S
01004     52 00 00 FF 
01008     7C E4 05 F1 | 	add	objptr, ##42108
0100c     F2 FA 61 FC | 	wrlong	result1, objptr
01010     52 00 00 FF 
01014     7C E4 85 F1 | 	sub	objptr, ##42108
01018     FD 12 02 F6 | 	mov	arg01, result1
0101c     20 01 00 FF 
01020     7C 15 06 F6 | 	mov	arg02, ##@LR__4106
01024     14 3F B1 FD | 	call	#__system___string_cmp
01028     00 FA 0D F2 | 	cmp	result1, #0 wz
0102c     30 00 90 AD |  if_e	jmp	#LR__0043
01030     19 29 02 F6 | 	mov	local06, local11
01034     03 28 66 F0 | 	shl	local06, #3
01038     2B 00 00 FF 
0103c     D0 E5 05 F1 | 	add	objptr, ##22480
01040     F2 28 02 F1 | 	add	local06, objptr
01044     26 00 00 FF 
01048     AC E4 05 F1 | 	add	objptr, ##19628
0104c     F2 2A 02 FB | 	rdlong	local07, objptr
01050     52 00 00 FF 
01054     7C E4 85 F1 | 	sub	objptr, ##42108
01058     14 2B 62 FC | 	wrlong	local07, local06
0105c     01 32 06 F1 | 	add	local11, #1
01060                 | LR__0043
01060     01 24 06 F1 | 	add	local04, #1
01064     70 FE 9F FD | 	jmp	#LR__0040
01068                 | LR__0044
01068     00 24 06 F6 | 	mov	local04, #0
0106c                 | ' 
0106c                 | ' ' 1d : find strings
0106c                 | ' 
0106c                 | ' i=0
0106c                 | ' do
0106c                 | LR__0045
0106c                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
0106c     12 15 02 F6 | 	mov	arg02, local04
01070     03 14 66 F0 | 	shl	arg02, #3
01074     2B 00 00 FF 
01078     D0 E5 05 F1 | 	add	objptr, ##22480
0107c     F2 14 02 F1 | 	add	arg02, objptr
01080     0A 13 02 FB | 	rdlong	arg01, arg02
01084     20 01 00 FF 
01088     7D 15 06 F6 | 	mov	arg02, ##@LR__4107
0108c     2B 00 00 FF 
01090     D0 E5 85 F1 | 	sub	objptr, ##22480
01094     A4 3E B1 FD | 	call	#__system___string_cmp
01098     00 FA 0D F2 | 	cmp	result1, #0 wz
0109c     01 24 06 51 |  if_ne	add	local04, #1
010a0     50 01 90 5D |  if_ne	jmp	#LR__0050
010a4     12 39 02 F6 | 	mov	local14, local04
010a8                 | LR__0046
010a8     12 29 02 F6 | 	mov	local06, local04
010ac     01 28 06 F1 | 	add	local06, #1
010b0     03 28 66 F0 | 	shl	local06, #3
010b4     2B 00 00 FF 
010b8     D0 E5 05 F1 | 	add	objptr, ##22480
010bc     F2 28 02 F1 | 	add	local06, objptr
010c0     14 37 02 FB | 	rdlong	local13, local06
010c4     26 00 00 FF 
010c8     AC E4 05 F1 | 	add	objptr, ##19628
010cc     F2 36 62 FC | 	wrlong	local13, objptr
010d0     1C 29 02 F6 | 	mov	local06, local14
010d4     03 28 66 F0 | 	shl	local06, #3
010d8     26 00 00 FF 
010dc     AC E4 85 F1 | 	sub	objptr, ##19628
010e0     F2 28 02 F1 | 	add	local06, objptr
010e4     1C 31 02 F6 | 	mov	local10, local14
010e8     03 30 66 F0 | 	shl	local10, #3
010ec     F2 30 02 F1 | 	add	local10, objptr
010f0     18 13 02 FB | 	rdlong	arg01, local10
010f4     2B 00 00 FF 
010f8     D0 E5 85 F1 | 	sub	objptr, ##22480
010fc     1B 2F 02 F6 | 	mov	local09, local13
01100     17 15 02 F6 | 	mov	arg02, local09
01104     68 3E B1 FD | 	call	#__system___string_concat
01108     14 FB 61 FC | 	wrlong	result1, local06
0110c     12 31 02 F6 | 	mov	local10, local04
01110     01 30 06 F1 | 	add	local10, #1
01114     19 3B 02 F6 | 	mov	local15, local11
01118     01 3A 06 F1 | 	add	local15, #1
0111c     97 3C 48 FB | 	callpa	#(@LR__0048-@LR__0047)>>2,fcache_load_ptr_
01120                 | LR__0047
01120     1D 31 52 F2 | 	cmps	local10, local15 wc
01124     70 00 90 3D |  if_ae	jmp	#LR__0049
01128     18 37 02 F6 | 	mov	local13, local10
0112c     01 36 06 F1 | 	add	local13, #1
01130     03 36 66 F0 | 	shl	local13, #3
01134     2B 00 00 FF 
01138     D0 E5 05 F1 | 	add	objptr, ##22480
0113c     F2 36 02 F1 | 	add	local13, objptr
01140     1B 1F 02 FB | 	rdlong	local01, local13
01144     18 2B 02 F6 | 	mov	local07, local10
01148     01 2A 06 F1 | 	add	local07, #1
0114c     03 2A 66 F0 | 	shl	local07, #3
01150     F2 2A 02 F1 | 	add	local07, objptr
01154     04 2A 06 F1 | 	add	local07, #4
01158     15 27 02 FB | 	rdlong	local05, local07
0115c     18 2B 02 F6 | 	mov	local07, local10
01160     03 2A 66 F0 | 	shl	local07, #3
01164     F2 2E 02 F6 | 	mov	local09, objptr
01168     F2 2A 02 F1 | 	add	local07, objptr
0116c     15 1F 62 FC | 	wrlong	local01, local07
01170     18 37 02 F6 | 	mov	local13, local10
01174     1B 2B 02 F6 | 	mov	local07, local13
01178     03 2A 66 F0 | 	shl	local07, #3
0117c     F2 2A 02 F1 | 	add	local07, objptr
01180     04 2A 06 F1 | 	add	local07, #4
01184     15 27 62 FC | 	wrlong	local05, local07
01188     01 30 06 F1 | 	add	local10, #1
0118c     2B 00 00 FF 
01190     D0 E5 85 F1 | 	sub	objptr, ##22480
01194     88 FF 9F FD | 	jmp	#LR__0047
01198                 | LR__0048
01198                 | LR__0049
01198     01 32 86 F1 | 	sub	local11, #1
0119c     52 00 00 FF 
011a0     7C E4 05 F1 | 	add	objptr, ##42108
011a4     F2 12 02 FB | 	rdlong	arg01, objptr
011a8     52 00 00 FF 
011ac     7C E4 85 F1 | 	sub	objptr, ##42108
011b0     20 01 00 FF 
011b4     7F 15 06 F6 | 	mov	arg02, ##@LR__4108
011b8     80 3D B1 FD | 	call	#__system___string_cmp
011bc     00 FA 0D F2 | 	cmp	result1, #0 wz
011c0     19 25 52 52 |  if_ne	cmps	local04, local11 wc
011c4     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0046
011c8                 | '   if p$<>"""" then k+=1:i+=1
011c8     52 00 00 FF 
011cc     7C E4 05 F1 | 	add	objptr, ##42108
011d0     F2 12 02 FB | 	rdlong	arg01, objptr
011d4     52 00 00 FF 
011d8     7C E4 85 F1 | 	sub	objptr, ##42108
011dc     20 01 00 FF 
011e0     81 15 06 F6 | 	mov	arg02, ##@LR__4109
011e4     54 3D B1 FD | 	call	#__system___string_cmp
011e8     00 FA 0D F2 | 	cmp	result1, #0 wz
011ec     01 32 06 51 |  if_ne	add	local11, #1
011f0     01 24 06 51 |  if_ne	add	local04, #1
011f4                 | LR__0050
011f4     19 25 52 F2 | 	cmps	local04, local11 wc
011f8     70 FE 9F CD |  if_b	jmp	#LR__0045
011fc     00 24 06 F6 | 	mov	local04, #0
01200                 | ' 
01200                 | ' ' 1e : concatenate strings if "" detected between
01200                 | '  
01200                 | ' i=0 : do
01200                 | LR__0051
01200                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
01200     12 3D 02 F6 | 	mov	local16, local04
01204     03 3C 66 F0 | 	shl	local16, #3
01208     2B 00 00 FF 
0120c     D0 E5 05 F1 | 	add	objptr, ##22480
01210     F2 3C 02 F1 | 	add	local16, objptr
01214     1E 13 02 FB | 	rdlong	arg01, local16
01218     01 14 06 F6 | 	mov	arg02, #1
0121c     2B 00 00 FF 
01220     D0 E5 85 F1 | 	sub	objptr, ##22480
01224     84 5D B1 FD | 	call	#__system__Right_S
01228     FD 12 02 F6 | 	mov	arg01, result1
0122c     20 01 00 FF 
01230     83 15 06 F6 | 	mov	arg02, ##@LR__4110
01234     04 3D B1 FD | 	call	#__system___string_cmp
01238     00 FA 0D F2 | 	cmp	result1, #0 wz
0123c     78 01 90 5D |  if_ne	jmp	#LR__0057
01240     12 2B 02 F6 | 	mov	local07, local04
01244     01 2A 06 F1 | 	add	local07, #1
01248     03 2A 66 F0 | 	shl	local07, #3
0124c     2B 00 00 FF 
01250     D0 E5 05 F1 | 	add	objptr, ##22480
01254     F2 2E 02 F6 | 	mov	local09, objptr
01258     F2 2A 02 F1 | 	add	local07, objptr
0125c     15 13 02 FB | 	rdlong	arg01, local07
01260     01 14 06 F6 | 	mov	arg02, #1
01264     2B 00 00 FF 
01268     D0 E5 85 F1 | 	sub	objptr, ##22480
0126c     B4 5C B1 FD | 	call	#__system__Left_S
01270     FD 12 02 F6 | 	mov	arg01, result1
01274     20 01 00 FF 
01278     85 15 06 F6 | 	mov	arg02, ##@LR__4111
0127c     BC 3C B1 FD | 	call	#__system___string_cmp
01280     00 FA 0D F2 | 	cmp	result1, #0 wz
01284     30 01 90 5D |  if_ne	jmp	#LR__0057
01288     12 29 02 F6 | 	mov	local06, local04
0128c     03 28 66 F0 | 	shl	local06, #3
01290     2B 00 00 FF 
01294     D0 E5 05 F1 | 	add	objptr, ##22480
01298     F2 28 02 F1 | 	add	local06, objptr
0129c     12 37 02 F6 | 	mov	local13, local04
012a0     03 36 66 F0 | 	shl	local13, #3
012a4     F2 36 02 F1 | 	add	local13, objptr
012a8     1B 2B 02 FB | 	rdlong	local07, local13
012ac     12 37 02 F6 | 	mov	local13, local04
012b0     01 36 06 F1 | 	add	local13, #1
012b4     03 36 66 F0 | 	shl	local13, #3
012b8     F2 36 02 F1 | 	add	local13, objptr
012bc     1B 2F 02 FB | 	rdlong	local09, local13
012c0     12 3F 02 F6 | 	mov	local17, local04
012c4     01 3E 06 F1 | 	add	local17, #1
012c8     1F 41 02 F6 | 	mov	local18, local17
012cc     03 40 66 F0 | 	shl	local18, #3
012d0     F2 42 02 F6 | 	mov	local19, objptr
012d4     F2 40 02 F1 | 	add	local18, objptr
012d8     20 13 02 FB | 	rdlong	arg01, local18
012dc     2B 00 00 FF 
012e0     D0 E5 85 F1 | 	sub	objptr, ##22480
012e4     09 2D 02 F6 | 	mov	local08, arg01
012e8     97 06 48 FB | 	callpa	#(@LR__0053-@LR__0052)>>2,fcache_load_ptr_
012ec                 | LR__0052
012ec     16 FB C9 FA | 	rdbyte	result1, local08 wz
012f0     01 2C 06 51 |  if_ne	add	local08, #1
012f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0052
012f8                 | LR__0053
012f8     09 2D 82 F1 | 	sub	local08, arg01
012fc     16 37 02 F6 | 	mov	local13, local08
01300     01 36 86 F1 | 	sub	local13, #1
01304     17 13 02 F6 | 	mov	arg01, local09
01308     1B 15 02 F6 | 	mov	arg02, local13
0130c     9C 5C B1 FD | 	call	#__system__Right_S
01310     FD 2E 02 F6 | 	mov	local09, result1
01314     15 13 02 F6 | 	mov	arg01, local07
01318     17 15 02 F6 | 	mov	arg02, local09
0131c     50 3C B1 FD | 	call	#__system___string_concat
01320     14 FB 61 FC | 	wrlong	result1, local06
01324                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01324     12 31 02 F6 | 	mov	local10, local04
01328     01 30 06 F1 | 	add	local10, #1
0132c     19 45 02 F6 | 	mov	local20, local11
01330     01 44 06 F1 | 	add	local20, #1
01334     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
01338                 | LR__0054
01338     22 31 52 F2 | 	cmps	local10, local20 wc
0133c     70 00 90 3D |  if_ae	jmp	#LR__0056
01340     18 3D 02 F6 | 	mov	local16, local10
01344     01 3C 06 F1 | 	add	local16, #1
01348     03 3C 66 F0 | 	shl	local16, #3
0134c     2B 00 00 FF 
01350     D0 E5 05 F1 | 	add	objptr, ##22480
01354     F2 3C 02 F1 | 	add	local16, objptr
01358     1E 1F 02 FB | 	rdlong	local01, local16
0135c     18 2B 02 F6 | 	mov	local07, local10
01360     01 2A 06 F1 | 	add	local07, #1
01364     03 2A 66 F0 | 	shl	local07, #3
01368     F2 2A 02 F1 | 	add	local07, objptr
0136c     04 2A 06 F1 | 	add	local07, #4
01370     15 27 02 FB | 	rdlong	local05, local07
01374     18 2B 02 F6 | 	mov	local07, local10
01378     03 2A 66 F0 | 	shl	local07, #3
0137c     F2 2E 02 F6 | 	mov	local09, objptr
01380     F2 2A 02 F1 | 	add	local07, objptr
01384     15 1F 62 FC | 	wrlong	local01, local07
01388     18 37 02 F6 | 	mov	local13, local10
0138c     1B 2B 02 F6 | 	mov	local07, local13
01390     03 2A 66 F0 | 	shl	local07, #3
01394     F2 2A 02 F1 | 	add	local07, objptr
01398     04 2A 06 F1 | 	add	local07, #4
0139c     15 27 62 FC | 	wrlong	local05, local07
013a0     01 30 06 F1 | 	add	local10, #1
013a4     2B 00 00 FF 
013a8     D0 E5 85 F1 | 	sub	objptr, ##22480
013ac     88 FF 9F FD | 	jmp	#LR__0054
013b0                 | LR__0055
013b0                 | LR__0056
013b0     01 24 86 F1 | 	sub	local04, #1
013b4     01 32 86 F1 | 	sub	local11, #1
013b8                 | LR__0057
013b8     01 24 06 F1 | 	add	local04, #1
013bc     19 25 52 F2 | 	cmps	local04, local11 wc
013c0     3C FE 9F CD |  if_b	jmp	#LR__0051
013c4     00 24 06 F6 | 	mov	local04, #0
013c8                 | '  
013c8                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
013c8                 | '  
013c8                 | ' i=0 : do
013c8                 | LR__0058
013c8     12 29 02 F6 | 	mov	local06, local04
013cc     03 28 66 F0 | 	shl	local06, #3
013d0     2B 00 00 FF 
013d4     D0 E5 05 F1 | 	add	objptr, ##22480
013d8     F2 28 02 F1 | 	add	local06, objptr
013dc     14 2B 02 FB | 	rdlong	local07, local06
013e0     26 00 00 FF 
013e4     B4 E4 05 F1 | 	add	objptr, ##19636
013e8     F2 2A 62 FC | 	wrlong	local07, objptr
013ec     12 29 02 F6 | 	mov	local06, local04
013f0     01 28 06 F1 | 	add	local06, #1
013f4     03 28 66 F0 | 	shl	local06, #3
013f8     26 00 00 FF 
013fc     B4 E4 85 F1 | 	sub	objptr, ##19636
01400     F2 28 02 F1 | 	add	local06, objptr
01404     14 2B 02 FB | 	rdlong	local07, local06
01408     26 00 00 FF 
0140c     B8 E4 05 F1 | 	add	objptr, ##19640
01410     F2 2A 62 FC | 	wrlong	local07, objptr
01414                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01414     04 E4 85 F1 | 	sub	objptr, #4
01418     F2 12 02 FB | 	rdlong	arg01, objptr
0141c     52 00 00 FF 
01420     84 E4 85 F1 | 	sub	objptr, ##42116
01424     20 01 00 FF 
01428     87 15 06 F6 | 	mov	arg02, ##@LR__4112
0142c     0C 3B B1 FD | 	call	#__system___string_cmp
01430     00 FA 0D F2 | 	cmp	result1, #0 wz
01434     04 01 90 AD |  if_e	jmp	#LR__0059
01438     52 00 00 FF 
0143c     84 E4 05 F1 | 	add	objptr, ##42116
01440     F2 12 02 FB | 	rdlong	arg01, objptr
01444     52 00 00 FF 
01448     84 E4 85 F1 | 	sub	objptr, ##42116
0144c     20 01 00 FF 
01450     89 15 06 F6 | 	mov	arg02, ##@LR__4113
01454     E4 3A B1 FD | 	call	#__system___string_cmp
01458     FD 26 0A F6 | 	mov	local05, result1 wz
0145c     DC 00 90 AD |  if_e	jmp	#LR__0059
01460     52 00 00 FF 
01464     84 E4 05 F1 | 	add	objptr, ##42116
01468     F2 12 02 FB | 	rdlong	arg01, objptr
0146c     52 00 00 FF 
01470     84 E4 85 F1 | 	sub	objptr, ##42116
01474     20 01 00 FF 
01478     8B 15 06 F6 | 	mov	arg02, ##@LR__4114
0147c     BC 3A B1 FD | 	call	#__system___string_cmp
01480     00 FA 0D F2 | 	cmp	result1, #0 wz
01484     B4 00 90 AD |  if_e	jmp	#LR__0059
01488     52 00 00 FF 
0148c     84 E4 05 F1 | 	add	objptr, ##42116
01490     F2 12 02 FB | 	rdlong	arg01, objptr
01494     52 00 00 FF 
01498     84 E4 85 F1 | 	sub	objptr, ##42116
0149c     20 01 00 FF 
014a0     8D 2F 06 F6 | 	mov	local09, ##@LR__4115
014a4     17 15 02 F6 | 	mov	arg02, local09
014a8     90 3A B1 FD | 	call	#__system___string_cmp
014ac     00 FA 0D F2 | 	cmp	result1, #0 wz
014b0     88 00 90 AD |  if_e	jmp	#LR__0059
014b4     52 00 00 FF 
014b8     84 E4 05 F1 | 	add	objptr, ##42116
014bc     F2 12 02 FB | 	rdlong	arg01, objptr
014c0     52 00 00 FF 
014c4     84 E4 85 F1 | 	sub	objptr, ##42116
014c8     20 01 00 FF 
014cc     8F 37 06 F6 | 	mov	local13, ##@LR__4116
014d0     1B 2F 02 F6 | 	mov	local09, local13
014d4     17 15 02 F6 | 	mov	arg02, local09
014d8     60 3A B1 FD | 	call	#__system___string_cmp
014dc     00 FA 0D F2 | 	cmp	result1, #0 wz
014e0     58 00 90 AD |  if_e	jmp	#LR__0059
014e4     52 00 00 FF 
014e8     84 E4 05 F1 | 	add	objptr, ##42116
014ec     F2 12 02 FB | 	rdlong	arg01, objptr
014f0     52 00 00 FF 
014f4     84 E4 85 F1 | 	sub	objptr, ##42116
014f8     20 01 00 FF 
014fc     91 37 06 F6 | 	mov	local13, ##@LR__4117
01500     1B 15 02 F6 | 	mov	arg02, local13
01504     34 3A B1 FD | 	call	#__system___string_cmp
01508     FD 2E 0A F6 | 	mov	local09, result1 wz
0150c     2C 00 90 AD |  if_e	jmp	#LR__0059
01510     52 00 00 FF 
01514     84 E4 05 F1 | 	add	objptr, ##42116
01518     F2 12 02 FB | 	rdlong	arg01, objptr
0151c     52 00 00 FF 
01520     84 E4 85 F1 | 	sub	objptr, ##42116
01524     20 01 00 FF 
01528     93 47 06 F6 | 	mov	local21, ##@LR__4118
0152c     23 15 02 F6 | 	mov	arg02, local21
01530     08 3A B1 FD | 	call	#__system___string_cmp
01534     FD 36 0A F6 | 	mov	local13, result1 wz
01538     30 00 90 5D |  if_ne	jmp	#LR__0060
0153c                 | LR__0059
0153c     52 00 00 FF 
01540     88 E4 05 F1 | 	add	objptr, ##42120
01544     F2 12 02 FB | 	rdlong	arg01, objptr
01548     52 00 00 FF 
0154c     88 E4 85 F1 | 	sub	objptr, ##42120
01550     20 01 00 FF 
01554     95 49 06 F6 | 	mov	local22, ##@LR__4119
01558     24 4B 02 F6 | 	mov	local23, local22
0155c     25 15 02 F6 | 	mov	arg02, local23
01560     D8 39 B1 FD | 	call	#__system___string_cmp
01564     FD 46 0A F6 | 	mov	local21, result1 wz
01568     18 01 90 AD |  if_e	jmp	#LR__0063
0156c                 | LR__0060
0156c     52 00 00 FF 
01570     84 E4 05 F1 | 	add	objptr, ##42116
01574     F2 12 02 FB | 	rdlong	arg01, objptr
01578     52 00 00 FF 
0157c     84 E4 85 F1 | 	sub	objptr, ##42116
01580     20 01 00 FF 
01584     97 49 06 F6 | 	mov	local22, ##@LR__4120
01588     24 15 02 F6 | 	mov	arg02, local22
0158c     AC 39 B1 FD | 	call	#__system___string_cmp
01590     FD 4A 0A F6 | 	mov	local23, result1 wz
01594     30 00 90 5D |  if_ne	jmp	#LR__0061
01598     52 00 00 FF 
0159c     88 E4 05 F1 | 	add	objptr, ##42120
015a0     F2 12 02 FB | 	rdlong	arg01, objptr
015a4     52 00 00 FF 
015a8     88 E4 85 F1 | 	sub	objptr, ##42120
015ac     20 01 00 FF 
015b0     99 41 06 F6 | 	mov	local18, ##@LR__4121
015b4     20 3F 02 F6 | 	mov	local17, local18
015b8     1F 15 02 F6 | 	mov	arg02, local17
015bc     7C 39 B1 FD | 	call	#__system___string_cmp
015c0     FD 48 0A F6 | 	mov	local22, result1 wz
015c4     BC 00 90 AD |  if_e	jmp	#LR__0063
015c8                 | LR__0061
015c8     52 00 00 FF 
015cc     84 E4 05 F1 | 	add	objptr, ##42116
015d0     F2 12 02 FB | 	rdlong	arg01, objptr
015d4     52 00 00 FF 
015d8     84 E4 85 F1 | 	sub	objptr, ##42116
015dc     20 01 00 FF 
015e0     9B 41 06 F6 | 	mov	local18, ##@LR__4122
015e4     20 15 02 F6 | 	mov	arg02, local18
015e8     50 39 B1 FD | 	call	#__system___string_cmp
015ec     FD 3E 0A F6 | 	mov	local17, result1 wz
015f0     30 00 90 5D |  if_ne	jmp	#LR__0062
015f4     52 00 00 FF 
015f8     88 E4 05 F1 | 	add	objptr, ##42120
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     88 E4 85 F1 | 	sub	objptr, ##42120
01608     20 01 00 FF 
0160c     9D 4D 06 F6 | 	mov	local24, ##@LR__4123
01610     26 43 02 F6 | 	mov	local19, local24
01614     21 15 02 F6 | 	mov	arg02, local19
01618     20 39 B1 FD | 	call	#__system___string_cmp
0161c     FD 40 0A F6 | 	mov	local18, result1 wz
01620     60 00 90 AD |  if_e	jmp	#LR__0063
01624                 | LR__0062
01624     52 00 00 FF 
01628     84 E4 05 F1 | 	add	objptr, ##42116
0162c     F2 12 02 FB | 	rdlong	arg01, objptr
01630     52 00 00 FF 
01634     84 E4 85 F1 | 	sub	objptr, ##42116
01638     20 01 00 FF 
0163c     9F 4F 06 F6 | 	mov	local25, ##@LR__4124
01640     27 4D 02 F6 | 	mov	local24, local25
01644     26 15 02 F6 | 	mov	arg02, local24
01648     F0 38 B1 FD | 	call	#__system___string_cmp
0164c     FD 42 0A F6 | 	mov	local19, result1 wz
01650     10 01 90 5D |  if_ne	jmp	#LR__0067
01654     52 00 00 FF 
01658     88 E4 05 F1 | 	add	objptr, ##42120
0165c     F2 12 02 FB | 	rdlong	arg01, objptr
01660     52 00 00 FF 
01664     88 E4 85 F1 | 	sub	objptr, ##42120
01668     20 01 00 FF 
0166c     A1 51 06 F6 | 	mov	local26, ##@LR__4125
01670     28 4F 02 F6 | 	mov	local25, local26
01674     27 15 02 F6 | 	mov	arg02, local25
01678     C0 38 B1 FD | 	call	#__system___string_cmp
0167c     FD 4C 0A F6 | 	mov	local24, result1 wz
01680     E0 00 90 5D |  if_ne	jmp	#LR__0067
01684                 | LR__0063
01684     12 29 02 F6 | 	mov	local06, local04
01688     03 28 66 F0 | 	shl	local06, #3
0168c     2B 00 00 FF 
01690     D0 E5 05 F1 | 	add	objptr, ##22480
01694     F2 28 02 F1 | 	add	local06, objptr
01698     26 00 00 FF 
0169c     B4 E4 05 F1 | 	add	objptr, ##19636
016a0     F2 12 02 FB | 	rdlong	arg01, objptr
016a4     04 E4 05 F1 | 	add	objptr, #4
016a8     F2 36 02 FB | 	rdlong	local13, objptr
016ac     52 00 00 FF 
016b0     88 E4 85 F1 | 	sub	objptr, ##42120
016b4     1B 2F 02 F6 | 	mov	local09, local13
016b8     17 15 02 F6 | 	mov	arg02, local09
016bc     B0 38 B1 FD | 	call	#__system___string_concat
016c0     14 FB 61 FC | 	wrlong	result1, local06
016c4                 | '     lparts(i).part$=s1$+s2$
016c4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
016c4     12 31 02 F6 | 	mov	local10, local04
016c8     01 30 06 F1 | 	add	local10, #1
016cc     19 53 02 F6 | 	mov	local27, local11
016d0     01 52 06 F1 | 	add	local27, #1
016d4     97 42 48 FB | 	callpa	#(@LR__0065-@LR__0064)>>2,fcache_load_ptr_
016d8                 | LR__0064
016d8     29 31 52 F2 | 	cmps	local10, local27 wc
016dc     7C 00 90 3D |  if_ae	jmp	#LR__0066
016e0     18 3D 02 F6 | 	mov	local16, local10
016e4     01 3C 06 F1 | 	add	local16, #1
016e8     03 3C 66 F0 | 	shl	local16, #3
016ec     2B 00 00 FF 
016f0     D0 E5 05 F1 | 	add	objptr, ##22480
016f4     F2 3C 02 F1 | 	add	local16, objptr
016f8     1E 1F 02 FB | 	rdlong	local01, local16
016fc     18 2B 02 F6 | 	mov	local07, local10
01700     01 2A 06 F1 | 	add	local07, #1
01704     03 2A 66 F0 | 	shl	local07, #3
01708     F2 2A 02 F1 | 	add	local07, objptr
0170c     04 2A 06 F1 | 	add	local07, #4
01710     15 27 02 FB | 	rdlong	local05, local07
01714     18 2B 02 F6 | 	mov	local07, local10
01718     03 2A 66 F0 | 	shl	local07, #3
0171c     F2 2E 02 F6 | 	mov	local09, objptr
01720     F2 2A 02 F1 | 	add	local07, objptr
01724     15 1F 62 FC | 	wrlong	local01, local07
01728     18 37 02 F6 | 	mov	local13, local10
0172c     1B 47 02 F6 | 	mov	local21, local13
01730     23 4B 02 F6 | 	mov	local23, local21
01734     03 4A 66 F0 | 	shl	local23, #3
01738     F2 48 02 F6 | 	mov	local22, objptr
0173c     F2 4A 02 F1 | 	add	local23, objptr
01740     04 4A 06 F1 | 	add	local23, #4
01744     25 27 62 FC | 	wrlong	local05, local23
01748     04 4A 86 F1 | 	sub	local23, #4
0174c     01 30 06 F1 | 	add	local10, #1
01750     2B 00 00 FF 
01754     D0 E5 85 F1 | 	sub	objptr, ##22480
01758     7C FF 9F FD | 	jmp	#LR__0064
0175c                 | LR__0065
0175c                 | LR__0066
0175c     01 24 86 F1 | 	sub	local04, #1
01760     01 32 86 F1 | 	sub	local11, #1
01764                 | LR__0067
01764     01 24 06 F1 | 	add	local04, #1
01768     19 25 52 F2 | 	cmps	local04, local11 wc
0176c     58 FC 9F CD |  if_b	jmp	#LR__0058
01770                 | '  
01770                 | ' ' 1f : now remove parts that are spaces
01770                 | ' 
01770                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
01770     00 24 06 F6 | 	mov	local04, #0
01774     19 55 02 F6 | 	mov	local28, local11
01778     01 54 06 F1 | 	add	local28, #1
0177c                 | LR__0068
0177c     2A 25 52 F2 | 	cmps	local04, local28 wc
01780     50 00 90 3D |  if_ae	jmp	#LR__0069
01784     12 29 02 F6 | 	mov	local06, local04
01788     03 28 66 F0 | 	shl	local06, #3
0178c     2B 00 00 FF 
01790     D0 E5 05 F1 | 	add	objptr, ##22480
01794     F2 28 02 F1 | 	add	local06, objptr
01798     12 2F 02 F6 | 	mov	local09, local04
0179c     17 37 02 F6 | 	mov	local13, local09
017a0     1B 47 02 F6 | 	mov	local21, local13
017a4     03 46 66 F0 | 	shl	local21, #3
017a8     F2 4A 02 F6 | 	mov	local23, objptr
017ac     F2 46 02 F1 | 	add	local21, objptr
017b0     23 13 02 FB | 	rdlong	arg01, local21
017b4     2B 00 00 FF 
017b8     D0 E5 85 F1 | 	sub	objptr, ##22480
017bc     98 5B B1 FD | 	call	#__system__RTrim_S
017c0     FD 12 02 F6 | 	mov	arg01, result1
017c4     D0 5A B1 FD | 	call	#__system__LTrim_S
017c8     14 FB 61 FC | 	wrlong	result1, local06
017cc     01 24 06 F1 | 	add	local04, #1
017d0     A8 FF 9F FD | 	jmp	#LR__0068
017d4                 | LR__0069
017d4     00 24 06 F6 | 	mov	local04, #0
017d8     97 8A 48 FB | 	callpa	#(@LR__0076-@LR__0070)>>2,fcache_load_ptr_
017dc                 | ' 
017dc                 | ' i=0
017dc                 | ' do 
017dc                 | LR__0070
017dc                 | '   if len(lparts(i).part$)=0 then 
017dc     12 3D 02 F6 | 	mov	local16, local04
017e0     03 3C 66 F0 | 	shl	local16, #3
017e4     2B 00 00 FF 
017e8     D0 E5 05 F1 | 	add	objptr, ##22480
017ec     F2 2A 02 F6 | 	mov	local07, objptr
017f0     F2 3C 02 F1 | 	add	local16, objptr
017f4     1E 13 02 FB | 	rdlong	arg01, local16
017f8     2B 00 00 FF 
017fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01800     09 2D 02 F6 | 	mov	local08, arg01
01804                 | LR__0071
01804     16 FB C9 FA | 	rdbyte	result1, local08 wz
01808     01 2C 06 51 |  if_ne	add	local08, #1
0180c     F4 FF 9F 5D |  if_ne	jmp	#LR__0071
01810     09 2D 8A F1 | 	sub	local08, arg01 wz
01814     C4 00 90 5D |  if_ne	jmp	#LR__0075
01818                 | '     if i=k-1 then k-=1  :  exit
01818     19 1F 02 F6 | 	mov	local01, local11
0181c     01 1E 86 F1 | 	sub	local01, #1
01820     0F 25 0A F2 | 	cmp	local04, local01 wz
01824     01 32 86 A1 |  if_e	sub	local11, #1
01828     C4 00 90 AD |  if_e	jmp	#LR__0077
0182c                 | '     if i<k-1 then 
0182c     19 1F 02 F6 | 	mov	local01, local11
01830     01 1E 86 F1 | 	sub	local01, #1
01834     0F 25 52 F2 | 	cmps	local04, local01 wc
01838     A0 00 90 3D |  if_ae	jmp	#LR__0074
0183c                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
0183c     12 31 02 F6 | 	mov	local10, local04
01840     19 57 02 F6 | 	mov	local29, local11
01844     01 56 86 F1 | 	sub	local29, #1
01848                 | LR__0072
01848     2B 31 52 F2 | 	cmps	local10, local29 wc
0184c     80 00 90 3D |  if_ae	jmp	#LR__0073
01850     18 3D 02 F6 | 	mov	local16, local10
01854     01 3C 06 F1 | 	add	local16, #1
01858     03 3C 66 F0 | 	shl	local16, #3
0185c     2B 00 00 FF 
01860     D0 E5 05 F1 | 	add	objptr, ##22480
01864     F2 3C 02 F1 | 	add	local16, objptr
01868     1E 1F 02 FB | 	rdlong	local01, local16
0186c     18 2B 02 F6 | 	mov	local07, local10
01870     01 2A 06 F1 | 	add	local07, #1
01874     03 2A 66 F0 | 	shl	local07, #3
01878     F2 2A 02 F1 | 	add	local07, objptr
0187c     04 2A 06 F1 | 	add	local07, #4
01880     15 27 02 FB | 	rdlong	local05, local07
01884     18 29 02 F6 | 	mov	local06, local10
01888     14 2B 02 F6 | 	mov	local07, local06
0188c     03 2A 66 F0 | 	shl	local07, #3
01890     F2 2E 02 F6 | 	mov	local09, objptr
01894     F2 2A 02 F1 | 	add	local07, objptr
01898     15 1F 62 FC | 	wrlong	local01, local07
0189c     18 37 02 F6 | 	mov	local13, local10
018a0     1B 47 02 F6 | 	mov	local21, local13
018a4     23 4B 02 F6 | 	mov	local23, local21
018a8     03 4A 66 F0 | 	shl	local23, #3
018ac     F2 48 02 F6 | 	mov	local22, objptr
018b0     F2 4A 02 F1 | 	add	local23, objptr
018b4     04 4A 06 F1 | 	add	local23, #4
018b8     25 27 62 FC | 	wrlong	local05, local23
018bc     04 4A 86 F1 | 	sub	local23, #4
018c0     01 30 06 F1 | 	add	local10, #1
018c4     2B 00 00 FF 
018c8     D0 E5 85 F1 | 	sub	objptr, ##22480
018cc     78 FF 9F FD | 	jmp	#LR__0072
018d0                 | LR__0073
018d0     01 32 86 F1 | 	sub	local11, #1
018d4                 | '       if i>0 then i-=1 
018d4     01 24 56 F2 | 	cmps	local04, #1 wc
018d8     01 24 86 31 |  if_ae	sub	local04, #1
018dc                 | LR__0074
018dc                 | LR__0075
018dc     01 24 06 F1 | 	add	local04, #1
018e0     19 1F 02 F6 | 	mov	local01, local11
018e4     01 1E 86 F1 | 	sub	local01, #1
018e8     0F 25 5A F2 | 	cmps	local04, local01 wcz
018ec     EC FE 9F ED |  if_be	jmp	#LR__0070
018f0                 | LR__0076
018f0                 | LR__0077
018f0                 | ' 
018f0                 | ' ' 1g: lowercase all that is not a string
018f0                 | ' 
018f0                 | ' for j=0 to k-1
018f0     00 30 06 F6 | 	mov	local10, #0
018f4     19 59 02 F6 | 	mov	local30, local11
018f8                 | LR__0078
018f8     2C 31 52 F2 | 	cmps	local10, local30 wc
018fc     D0 00 90 3D |  if_ae	jmp	#LR__0081
01900                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01900     18 3D 02 F6 | 	mov	local16, local10
01904     03 3C 66 F0 | 	shl	local16, #3
01908     2B 00 00 FF 
0190c     D0 E5 05 F1 | 	add	objptr, ##22480
01910     F2 2A 02 F6 | 	mov	local07, objptr
01914     F2 3C 02 F1 | 	add	local16, objptr
01918     1E 13 02 FB | 	rdlong	arg01, local16
0191c     01 14 06 F6 | 	mov	arg02, #1
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     F8 55 B1 FD | 	call	#__system__Left_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     20 01 00 FF 
01934     A3 15 06 F6 | 	mov	arg02, ##@LR__4126
01938     00 36 B1 FD | 	call	#__system___string_cmp
0193c     00 FA 0D F2 | 	cmp	result1, #0 wz
01940     44 00 90 5D |  if_ne	jmp	#LR__0079
01944     18 2B 02 F6 | 	mov	local07, local10
01948     03 2A 66 F0 | 	shl	local07, #3
0194c     2B 00 00 FF 
01950     D0 E5 05 F1 | 	add	objptr, ##22480
01954     F2 2E 02 F6 | 	mov	local09, objptr
01958     F2 2A 02 F1 | 	add	local07, objptr
0195c     15 13 02 FB | 	rdlong	arg01, local07
01960     01 14 06 F6 | 	mov	arg02, #1
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     3C 56 B1 FD | 	call	#__system__Right_S
01970     FD 12 02 F6 | 	mov	arg01, result1
01974     20 01 00 FF 
01978     A5 15 06 F6 | 	mov	arg02, ##@LR__4127
0197c     BC 35 B1 FD | 	call	#__system___string_cmp
01980     00 FA 0D F2 | 	cmp	result1, #0 wz
01984     40 00 90 AD |  if_e	jmp	#LR__0080
01988                 | LR__0079
01988     18 29 02 F6 | 	mov	local06, local10
0198c     03 28 66 F0 | 	shl	local06, #3
01990     2B 00 00 FF 
01994     D0 E5 05 F1 | 	add	objptr, ##22480
01998     F2 28 02 F1 | 	add	local06, objptr
0199c     18 2F 02 F6 | 	mov	local09, local10
019a0     17 37 02 F6 | 	mov	local13, local09
019a4     1B 47 02 F6 | 	mov	local21, local13
019a8     03 46 66 F0 | 	shl	local21, #3
019ac     F2 4A 02 F6 | 	mov	local23, objptr
019b0     F2 46 02 F1 | 	add	local21, objptr
019b4     23 13 02 FB | 	rdlong	arg01, local21
019b8     2B 00 00 FF 
019bc     D0 E5 85 F1 | 	sub	objptr, ##22480
019c0     14 58 B1 FD | 	call	#__system__LCase_S
019c4     14 FB 61 FC | 	wrlong	result1, local06
019c8                 | LR__0080
019c8     01 30 06 F1 | 	add	local10, #1
019cc     28 FF 9F FD | 	jmp	#LR__0078
019d0                 | LR__0081
019d0                 | ' 
019d0                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
019d0                 | ' 
019d0                 | ' for i=0 to k: lparts(i).token=-1: next i
019d0     00 24 06 F6 | 	mov	local04, #0
019d4     19 5B 02 F6 | 	mov	local31, local11
019d8     01 5A 06 F1 | 	add	local31, #1
019dc     97 1C 48 FB | 	callpa	#(@LR__0083-@LR__0082)>>2,fcache_load_ptr_
019e0                 | LR__0082
019e0     2D 25 52 F2 | 	cmps	local04, local31 wc
019e4     30 00 90 3D |  if_ae	jmp	#LR__0084
019e8     12 29 02 F6 | 	mov	local06, local04
019ec     03 28 66 F0 | 	shl	local06, #3
019f0     2B 00 00 FF 
019f4     D0 E5 05 F1 | 	add	objptr, ##22480
019f8     F2 28 02 F1 | 	add	local06, objptr
019fc     04 28 06 F1 | 	add	local06, #4
01a00     FF FF FF FF 
01a04     14 FF 6B FC | 	wrlong	##-1, local06
01a08     01 24 06 F1 | 	add	local04, #1
01a0c     2B 00 00 FF 
01a10     D0 E5 85 F1 | 	sub	objptr, ##22480
01a14     C8 FF 9F FD | 	jmp	#LR__0082
01a18                 | LR__0083
01a18                 | LR__0084
01a18                 | ' 
01a18                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01a18                 | ' 
01a18                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01a18     2B 00 00 FF 
01a1c     D0 E5 05 F1 | 	add	objptr, ##22480
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     2B 00 00 FF 
01a28     D0 E5 85 F1 | 	sub	objptr, ##22480
01a2c     09 2D 02 F6 | 	mov	local08, arg01
01a30     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a34                 | LR__0085
01a34     16 FB C9 FA | 	rdbyte	result1, local08 wz
01a38     01 2C 06 51 |  if_ne	add	local08, #1
01a3c     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a40                 | LR__0086
01a40     09 2D 8A F1 | 	sub	local08, arg01 wz
01a44     3C 0D 90 AD |  if_e	jmp	#LR__0119
01a48                 | ' 
01a48                 | ' ' 2a find part types 
01a48                 | ' 
01a48                 | ' for i=0 to k-1
01a48     00 24 06 F6 | 	mov	local04, #0
01a4c     19 5D 02 F6 | 	mov	local32, local11
01a50                 | LR__0087
01a50     2E 25 52 F2 | 	cmps	local04, local32 wc
01a54     9C 05 90 3D |  if_ae	jmp	#LR__0096
01a58     12 29 02 F6 | 	mov	local06, local04
01a5c     03 28 66 F0 | 	shl	local06, #3
01a60     2B 00 00 FF 
01a64     D0 E5 05 F1 | 	add	objptr, ##22480
01a68     F2 28 02 F1 | 	add	local06, objptr
01a6c     12 37 02 F6 | 	mov	local13, local04
01a70     1B 47 02 F6 | 	mov	local21, local13
01a74     23 4B 02 F6 | 	mov	local23, local21
01a78     03 4A 66 F0 | 	shl	local23, #3
01a7c     F2 48 02 F6 | 	mov	local22, objptr
01a80     F2 4A 02 F1 | 	add	local23, objptr
01a84     25 13 02 FB | 	rdlong	arg01, local23
01a88     2B 00 00 FF 
01a8c     D0 E5 85 F1 | 	sub	objptr, ##22480
01a90     FC 0F B0 FD | 	call	#_isseparator
01a94     FD FA E1 F8 | 	getbyte	result1, result1, #0
01a98     04 28 06 F1 | 	add	local06, #4
01a9c     14 FB 61 FC | 	wrlong	result1, local06
01aa0                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01aa0     12 29 02 F6 | 	mov	local06, local04
01aa4     03 28 66 F0 | 	shl	local06, #3
01aa8     2B 00 00 FF 
01aac     D0 E5 05 F1 | 	add	objptr, ##22480
01ab0     F2 28 02 F1 | 	add	local06, objptr
01ab4     04 28 06 F1 | 	add	local06, #4
01ab8     14 2F 02 FB | 	rdlong	local09, local06
01abc     01 2E 56 F2 | 	cmps	local09, #1 wc
01ac0     2B 00 00 FF 
01ac4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ac8     20 05 90 3D |  if_ae	jmp	#LR__0095
01acc     12 29 02 F6 | 	mov	local06, local04
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     2B 00 00 FF 
01ad8     D0 E5 05 F1 | 	add	objptr, ##22480
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     12 37 02 F6 | 	mov	local13, local04
01ae4     1B 47 02 F6 | 	mov	local21, local13
01ae8     23 4B 02 F6 | 	mov	local23, local21
01aec     03 4A 66 F0 | 	shl	local23, #3
01af0     F2 48 02 F6 | 	mov	local22, objptr
01af4     F2 4A 02 F1 | 	add	local23, objptr
01af8     25 13 02 FB | 	rdlong	arg01, local23
01afc     2B 00 00 FF 
01b00     D0 E5 85 F1 | 	sub	objptr, ##22480
01b04     A8 0C B0 FD | 	call	#_isoperator
01b08     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b0c     04 28 06 F1 | 	add	local06, #4
01b10     14 FB 61 FC | 	wrlong	result1, local06
01b14                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01b14     12 29 02 F6 | 	mov	local06, local04
01b18     03 28 66 F0 | 	shl	local06, #3
01b1c     2B 00 00 FF 
01b20     D0 E5 05 F1 | 	add	objptr, ##22480
01b24     F2 28 02 F1 | 	add	local06, objptr
01b28     04 28 06 F1 | 	add	local06, #4
01b2c     14 2F 02 FB | 	rdlong	local09, local06
01b30     01 2E 56 F2 | 	cmps	local09, #1 wc
01b34     2B 00 00 FF 
01b38     D0 E5 85 F1 | 	sub	objptr, ##22480
01b3c     AC 04 90 3D |  if_ae	jmp	#LR__0095
01b40     12 29 02 F6 | 	mov	local06, local04
01b44     03 28 66 F0 | 	shl	local06, #3
01b48     2B 00 00 FF 
01b4c     D0 E5 05 F1 | 	add	objptr, ##22480
01b50     F2 28 02 F1 | 	add	local06, objptr
01b54     12 37 02 F6 | 	mov	local13, local04
01b58     1B 47 02 F6 | 	mov	local21, local13
01b5c     23 4B 02 F6 | 	mov	local23, local21
01b60     03 4A 66 F0 | 	shl	local23, #3
01b64     F2 48 02 F6 | 	mov	local22, objptr
01b68     F2 4A 02 F1 | 	add	local23, objptr
01b6c     25 13 02 FB | 	rdlong	arg01, local23
01b70     2B 00 00 FF 
01b74     D0 E5 85 F1 | 	sub	objptr, ##22480
01b78                 | ' 
01b78                 | ' select case s
01b78     21 01 00 FF 
01b7c     6E 14 06 F6 | 	mov	arg02, ##@LR__4184
01b80     B8 33 B1 FD | 	call	#__system___string_cmp
01b84     00 FA 0D F2 | 	cmp	result1, #0 wz
01b88     1B FA 05 A6 |  if_e	mov	result1, #27
01b8c     00 FA 05 56 |  if_ne	mov	result1, #0
01b90     FD FA E1 F8 | 	getbyte	result1, result1, #0
01b94     04 28 06 F1 | 	add	local06, #4
01b98     14 FB 61 FC | 	wrlong	result1, local06
01b9c                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01b9c     12 29 02 F6 | 	mov	local06, local04
01ba0     03 28 66 F0 | 	shl	local06, #3
01ba4     2B 00 00 FF 
01ba8     D0 E5 05 F1 | 	add	objptr, ##22480
01bac     F2 28 02 F1 | 	add	local06, objptr
01bb0     04 28 06 F1 | 	add	local06, #4
01bb4     14 2F 02 FB | 	rdlong	local09, local06
01bb8     01 2E 56 F2 | 	cmps	local09, #1 wc
01bbc     2B 00 00 FF 
01bc0     D0 E5 85 F1 | 	sub	objptr, ##22480
01bc4     24 04 90 3D |  if_ae	jmp	#LR__0095
01bc8     12 29 02 F6 | 	mov	local06, local04
01bcc     03 28 66 F0 | 	shl	local06, #3
01bd0     2B 00 00 FF 
01bd4     D0 E5 05 F1 | 	add	objptr, ##22480
01bd8     F2 28 02 F1 | 	add	local06, objptr
01bdc     12 37 02 F6 | 	mov	local13, local04
01be0     1B 47 02 F6 | 	mov	local21, local13
01be4     23 4B 02 F6 | 	mov	local23, local21
01be8     03 4A 66 F0 | 	shl	local23, #3
01bec     F2 48 02 F6 | 	mov	local22, objptr
01bf0     F2 4A 02 F1 | 	add	local23, objptr
01bf4     25 13 02 FB | 	rdlong	arg01, local23
01bf8     2B 00 00 FF 
01bfc     D0 E5 85 F1 | 	sub	objptr, ##22480
01c00     8C 10 B0 FD | 	call	#_iscommand
01c04     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c08     04 28 06 F1 | 	add	local06, #4
01c0c     14 FB 61 FC | 	wrlong	result1, local06
01c10                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01c10     12 29 02 F6 | 	mov	local06, local04
01c14     03 28 66 F0 | 	shl	local06, #3
01c18     2B 00 00 FF 
01c1c     D0 E5 05 F1 | 	add	objptr, ##22480
01c20     F2 28 02 F1 | 	add	local06, objptr
01c24     04 28 06 F1 | 	add	local06, #4
01c28     14 2F 02 FB | 	rdlong	local09, local06
01c2c     01 2E 56 F2 | 	cmps	local09, #1 wc
01c30     2B 00 00 FF 
01c34     D0 E5 85 F1 | 	sub	objptr, ##22480
01c38     B0 03 90 3D |  if_ae	jmp	#LR__0095
01c3c     12 29 02 F6 | 	mov	local06, local04
01c40     03 28 66 F0 | 	shl	local06, #3
01c44     2B 00 00 FF 
01c48     D0 E5 05 F1 | 	add	objptr, ##22480
01c4c     F2 28 02 F1 | 	add	local06, objptr
01c50     12 37 02 F6 | 	mov	local13, local04
01c54     1B 47 02 F6 | 	mov	local21, local13
01c58     23 4B 02 F6 | 	mov	local23, local21
01c5c     03 4A 66 F0 | 	shl	local23, #3
01c60     F2 48 02 F6 | 	mov	local22, objptr
01c64     F2 4A 02 F1 | 	add	local23, objptr
01c68     25 13 02 FB | 	rdlong	arg01, local23
01c6c     2B 00 00 FF 
01c70     D0 E5 85 F1 | 	sub	objptr, ##22480
01c74     38 15 B0 FD | 	call	#_isfunction
01c78     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c7c     04 28 06 F1 | 	add	local06, #4
01c80     14 FB 61 FC | 	wrlong	result1, local06
01c84                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01c84     12 29 02 F6 | 	mov	local06, local04
01c88     03 28 66 F0 | 	shl	local06, #3
01c8c     2B 00 00 FF 
01c90     D0 E5 05 F1 | 	add	objptr, ##22480
01c94     F2 28 02 F1 | 	add	local06, objptr
01c98     04 28 06 F1 | 	add	local06, #4
01c9c     14 2F 02 FB | 	rdlong	local09, local06
01ca0     01 2E 56 F2 | 	cmps	local09, #1 wc
01ca4     2B 00 00 FF 
01ca8     D0 E5 85 F1 | 	sub	objptr, ##22480
01cac     3C 03 90 3D |  if_ae	jmp	#LR__0095
01cb0     12 3D 02 F6 | 	mov	local16, local04
01cb4     03 3C 66 F0 | 	shl	local16, #3
01cb8     2B 00 00 FF 
01cbc     D0 E5 05 F1 | 	add	objptr, ##22480
01cc0     F2 3C 02 F1 | 	add	local16, objptr
01cc4     1E 13 02 FB | 	rdlong	arg01, local16
01cc8     2B 00 00 FF 
01ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
01cd0     B0 18 B0 FD | 	call	#_isnum
01cd4     FD 1E 02 F6 | 	mov	local01, result1
01cd8     52 00 00 FF 
01cdc     8C E4 05 F1 | 	add	objptr, ##42124
01ce0     F2 1E 62 FC | 	wrlong	local01, objptr
01ce4     12 3D 02 F6 | 	mov	local16, local04
01ce8     03 3C 66 F0 | 	shl	local16, #3
01cec     26 00 00 FF 
01cf0     BC E4 85 F1 | 	sub	objptr, ##19644
01cf4     F2 3C 02 F1 | 	add	local16, objptr
01cf8     1E 13 02 FB | 	rdlong	arg01, local16
01cfc     2B 00 00 FF 
01d00     D0 E5 85 F1 | 	sub	objptr, ##22480
01d04     54 1B B0 FD | 	call	#_isint
01d08     FD 1E 02 F6 | 	mov	local01, result1
01d0c     52 00 00 FF 
01d10     90 E4 05 F1 | 	add	objptr, ##42128
01d14     F2 1E 62 FC | 	wrlong	local01, objptr
01d18     12 3D 02 F6 | 	mov	local16, local04
01d1c     03 3C 66 F0 | 	shl	local16, #3
01d20     26 00 00 FF 
01d24     C0 E4 85 F1 | 	sub	objptr, ##19648
01d28     F2 2A 02 F6 | 	mov	local07, objptr
01d2c     F2 3C 02 F1 | 	add	local16, objptr
01d30     1E 13 02 FB | 	rdlong	arg01, local16
01d34     2B 00 00 FF 
01d38     D0 E5 85 F1 | 	sub	objptr, ##22480
01d3c     74 1C B0 FD | 	call	#_isdec
01d40     52 00 00 FF 
01d44     94 E4 05 F1 | 	add	objptr, ##42132
01d48     F2 FA 61 FC | 	wrlong	result1, objptr
01d4c                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01d4c     08 E4 85 F1 | 	sub	objptr, #8
01d50     F2 1E 0A FB | 	rdlong	local01, objptr wz
01d54     52 00 00 FF 
01d58     8C E4 85 F1 | 	sub	objptr, ##42124
01d5c     60 00 90 AD |  if_e	jmp	#LR__0088
01d60     52 00 00 FF 
01d64     90 E4 05 F1 | 	add	objptr, ##42128
01d68     F2 28 0A FB | 	rdlong	local06, objptr wz
01d6c     52 00 00 FF 
01d70     90 E4 85 F1 | 	sub	objptr, ##42128
01d74     48 00 90 AD |  if_e	jmp	#LR__0088
01d78     52 00 00 FF 
01d7c     94 E4 05 F1 | 	add	objptr, ##42132
01d80     F2 2E 0A FB | 	rdlong	local09, objptr wz
01d84     52 00 00 FF 
01d88     94 E4 85 F1 | 	sub	objptr, ##42132
01d8c     30 00 90 AD |  if_e	jmp	#LR__0088
01d90     12 27 02 F6 | 	mov	local05, local04
01d94     13 29 02 F6 | 	mov	local06, local05
01d98     03 28 66 F0 | 	shl	local06, #3
01d9c     2B 00 00 FF 
01da0     D0 E5 05 F1 | 	add	objptr, ##22480
01da4     F2 28 02 F1 | 	add	local06, objptr
01da8     04 28 06 F1 | 	add	local06, #4
01dac     01 00 80 FF 
01db0     14 01 68 FC | 	wrlong	##512, local06
01db4     2B 00 00 FF 
01db8     D0 E5 85 F1 | 	sub	objptr, ##22480
01dbc     2C 02 90 FD | 	jmp	#LR__0095
01dc0                 | LR__0088
01dc0                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01dc0     52 00 00 FF 
01dc4     8C E4 05 F1 | 	add	objptr, ##42124
01dc8     F2 1E 0A FB | 	rdlong	local01, objptr wz
01dcc     52 00 00 FF 
01dd0     8C E4 85 F1 | 	sub	objptr, ##42124
01dd4     64 00 90 AD |  if_e	jmp	#LR__0089
01dd8     52 00 00 FF 
01ddc     90 E4 05 F1 | 	add	objptr, ##42128
01de0     F2 28 0A FB | 	rdlong	local06, objptr wz
01de4     52 00 00 FF 
01de8     90 E4 85 F1 | 	sub	objptr, ##42128
01dec     52 00 00 5F 
01df0     94 E4 05 51 |  if_ne	add	objptr, ##42132
01df4     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01df8     52 00 00 5F 
01dfc     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e00     17 2B 22 56 |  if_ne	not	local07, local09
01e04     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e08     30 00 90 AD |  if_e	jmp	#LR__0089
01e0c     12 27 02 F6 | 	mov	local05, local04
01e10     13 29 02 F6 | 	mov	local06, local05
01e14     03 28 66 F0 | 	shl	local06, #3
01e18     2B 00 00 FF 
01e1c     D0 E5 05 F1 | 	add	objptr, ##22480
01e20     F2 28 02 F1 | 	add	local06, objptr
01e24     04 28 06 F1 | 	add	local06, #4
01e28     01 00 80 FF 
01e2c     14 03 68 FC | 	wrlong	##513, local06
01e30     2B 00 00 FF 
01e34     D0 E5 85 F1 | 	sub	objptr, ##22480
01e38     B0 01 90 FD | 	jmp	#LR__0095
01e3c                 | LR__0089
01e3c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01e3c     52 00 00 FF 
01e40     8C E4 05 F1 | 	add	objptr, ##42124
01e44     F2 1E 0A FB | 	rdlong	local01, objptr wz
01e48     52 00 00 FF 
01e4c     8C E4 85 F1 | 	sub	objptr, ##42124
01e50     52 00 00 5F 
01e54     90 E4 05 51 |  if_ne	add	objptr, ##42128
01e58     F2 28 02 5B |  if_ne	rdlong	local06, objptr
01e5c     52 00 00 5F 
01e60     90 E4 85 51 |  if_ne	sub	objptr, ##42128
01e64     14 29 22 56 |  if_ne	not	local06, local06
01e68     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
01e6c     52 00 00 5F 
01e70     94 E4 05 51 |  if_ne	add	objptr, ##42132
01e74     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
01e78     52 00 00 5F 
01e7c     94 E4 85 51 |  if_ne	sub	objptr, ##42132
01e80     17 2B 22 56 |  if_ne	not	local07, local09
01e84     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01e88     30 00 90 AD |  if_e	jmp	#LR__0090
01e8c     12 27 02 F6 | 	mov	local05, local04
01e90     13 29 02 F6 | 	mov	local06, local05
01e94     03 28 66 F0 | 	shl	local06, #3
01e98     2B 00 00 FF 
01e9c     D0 E5 05 F1 | 	add	objptr, ##22480
01ea0     F2 28 02 F1 | 	add	local06, objptr
01ea4     04 28 06 F1 | 	add	local06, #4
01ea8     01 00 80 FF 
01eac     14 05 68 FC | 	wrlong	##514, local06
01eb0     2B 00 00 FF 
01eb4     D0 E5 85 F1 | 	sub	objptr, ##22480
01eb8     30 01 90 FD | 	jmp	#LR__0095
01ebc                 | LR__0090
01ebc                 | ' 
01ebc                 | ' if isstring(lparts(i).part$) then 
01ebc     12 3D 02 F6 | 	mov	local16, local04
01ec0     03 3C 66 F0 | 	shl	local16, #3
01ec4     2B 00 00 FF 
01ec8     D0 E5 05 F1 | 	add	objptr, ##22480
01ecc     F2 3C 02 F1 | 	add	local16, objptr
01ed0     1E 13 02 FB | 	rdlong	arg01, local16
01ed4     2B 00 00 FF 
01ed8     D0 E5 85 F1 | 	sub	objptr, ##22480
01edc     94 1B B0 FD | 	call	#_isstring
01ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ee4     A8 00 90 AD |  if_e	jmp	#LR__0093
01ee8     12 29 02 F6 | 	mov	local06, local04
01eec     03 28 66 F0 | 	shl	local06, #3
01ef0     2B 00 00 FF 
01ef4     D0 E5 05 F1 | 	add	objptr, ##22480
01ef8     F2 28 02 F1 | 	add	local06, objptr
01efc     04 28 06 F1 | 	add	local06, #4
01f00     01 00 80 FF 
01f04     14 07 68 FC | 	wrlong	##515, local06
01f08     12 27 02 F6 | 	mov	local05, local04
01f0c     13 29 02 F6 | 	mov	local06, local05
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     12 47 02 F6 | 	mov	local21, local04
01f1c     03 46 66 F0 | 	shl	local21, #3
01f20     F2 46 02 F1 | 	add	local21, objptr
01f24     23 2B 02 FB | 	rdlong	local07, local21
01f28     02 2E 06 F6 | 	mov	local09, #2
01f2c     12 49 02 F6 | 	mov	local22, local04
01f30     24 3F 02 F6 | 	mov	local17, local22
01f34     1F 41 02 F6 | 	mov	local18, local17
01f38     03 40 66 F0 | 	shl	local18, #3
01f3c     F2 42 02 F6 | 	mov	local19, objptr
01f40     F2 40 02 F1 | 	add	local18, objptr
01f44     20 13 02 FB | 	rdlong	arg01, local18
01f48     2B 00 00 FF 
01f4c     D0 E5 85 F1 | 	sub	objptr, ##22480
01f50     09 2D 02 F6 | 	mov	local08, arg01
01f54     97 06 48 FB | 	callpa	#(@LR__0092-@LR__0091)>>2,fcache_load_ptr_
01f58                 | LR__0091
01f58     16 FB C9 FA | 	rdbyte	result1, local08 wz
01f5c     01 2C 06 51 |  if_ne	add	local08, #1
01f60     F4 FF 9F 5D |  if_ne	jmp	#LR__0091
01f64                 | LR__0092
01f64     09 2D 82 F1 | 	sub	local08, arg01
01f68     16 4B 02 F6 | 	mov	local23, local08
01f6c     25 47 02 F6 | 	mov	local21, local23
01f70     02 46 86 F1 | 	sub	local21, #2
01f74     23 37 02 F6 | 	mov	local13, local21
01f78     15 13 02 F6 | 	mov	arg01, local07
01f7c     17 15 02 F6 | 	mov	arg02, local09
01f80     1B 17 02 F6 | 	mov	arg03, local13
01f84     B4 50 B1 FD | 	call	#__system__Mid_S
01f88     14 FB 61 FC | 	wrlong	result1, local06
01f8c     5C 00 90 FD | 	jmp	#LR__0095
01f90                 | LR__0093
01f90                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
01f90     12 27 02 F6 | 	mov	local05, local04
01f94     13 3D 02 F6 | 	mov	local16, local05
01f98     03 3C 66 F0 | 	shl	local16, #3
01f9c     2B 00 00 FF 
01fa0     D0 E5 05 F1 | 	add	objptr, ##22480
01fa4     F2 3C 02 F1 | 	add	local16, objptr
01fa8     1E 13 02 FB | 	rdlong	arg01, local16
01fac     2B 00 00 FF 
01fb0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fb4     58 13 B0 FD | 	call	#_isname
01fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
01fbc     2C 00 90 AD |  if_e	jmp	#LR__0094
01fc0     12 27 02 F6 | 	mov	local05, local04
01fc4     13 29 02 F6 | 	mov	local06, local05
01fc8     03 28 66 F0 | 	shl	local06, #3
01fcc     2B 00 00 FF 
01fd0     D0 E5 05 F1 | 	add	objptr, ##22480
01fd4     F2 28 02 F1 | 	add	local06, objptr
01fd8     04 28 06 F1 | 	add	local06, #4
01fdc     01 00 80 FF 
01fe0     14 09 68 FC | 	wrlong	##516, local06
01fe4     2B 00 00 FF 
01fe8     D0 E5 85 F1 | 	sub	objptr, ##22480
01fec                 | LR__0094
01fec                 | LR__0095
01fec     01 24 06 F1 | 	add	local04, #1
01ff0     5C FA 9F FD | 	jmp	#LR__0087
01ff4                 | LR__0096
01ff4     19 29 02 F6 | 	mov	local06, local11
01ff8     03 28 66 F0 | 	shl	local06, #3
01ffc     2B 00 00 FF 
02000     D0 E5 05 F1 | 	add	objptr, ##22480
02004     F2 28 02 F1 | 	add	local06, objptr
02008     04 28 06 F1 | 	add	local06, #4
0200c     14 FD 6B FC | 	wrlong	#510, local06
02010     19 29 02 F6 | 	mov	local06, local11
02014     03 28 66 F0 | 	shl	local06, #3
02018     F2 28 02 F1 | 	add	local06, objptr
0201c     20 01 00 FF 
02020     A7 2B 06 F6 | 	mov	local07, ##@LR__4128
02024     14 2B 62 FC | 	wrlong	local07, local06
02028     10 00 00 FF 
0202c     54 E4 05 F1 | 	add	objptr, ##8276
02030     F2 32 62 FC | 	wrlong	local11, objptr
02034                 | ' 
02034                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02034                 | ' 
02034                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02034                 | ' 
02034                 | ' ' process the case when simple load or save is called without ""
02034                 | ' 
02034                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
02034     10 00 00 FF 
02038     54 E4 85 F1 | 	sub	objptr, ##8276
0203c     F2 12 02 FB | 	rdlong	arg01, objptr
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     20 01 00 FF 
0204c     A8 15 06 F6 | 	mov	arg02, ##@LR__4129
02050     E8 2E B1 FD | 	call	#__system___string_cmp
02054     00 FA 0D F2 | 	cmp	result1, #0 wz
02058     50 00 90 AD |  if_e	jmp	#LR__0097
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 12 02 FB | 	rdlong	arg01, objptr
02068     2B 00 00 FF 
0206c     D0 E5 85 F1 | 	sub	objptr, ##22480
02070     20 01 00 FF 
02074     AD 15 06 F6 | 	mov	arg02, ##@LR__4130
02078     C0 2E B1 FD | 	call	#__system___string_cmp
0207c     00 FA 0D F2 | 	cmp	result1, #0 wz
02080     28 00 90 AD |  if_e	jmp	#LR__0097
02084     2B 00 00 FF 
02088     D0 E5 05 F1 | 	add	objptr, ##22480
0208c     F2 12 02 FB | 	rdlong	arg01, objptr
02090     2B 00 00 FF 
02094     D0 E5 85 F1 | 	sub	objptr, ##22480
02098     20 01 00 FF 
0209c     B2 15 06 F6 | 	mov	arg02, ##@LR__4131
020a0     98 2E B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     50 00 90 5D |  if_ne	jmp	#LR__0098
020ac                 | LR__0097
020ac     2B 00 00 FF 
020b0     DC E5 05 F1 | 	add	objptr, ##22492
020b4     F2 3C 02 FB | 	rdlong	local16, objptr
020b8     2B 00 00 FF 
020bc     DC E5 85 F1 | 	sub	objptr, ##22492
020c0     01 00 00 FF 
020c4     04 3C 0E F2 | 	cmp	local16, ##516 wz
020c8     2B 00 00 AF 
020cc     E4 E5 05 A1 |  if_e	add	objptr, ##22500
020d0     F2 36 02 AB |  if_e	rdlong	local13, objptr
020d4     2B 00 00 AF 
020d8     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
020dc     1B 2F 02 A6 |  if_e	mov	local09, local13
020e0     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
020e4     2B 00 00 AF 
020e8     DC E5 05 A1 |  if_e	add	objptr, ##22492
020ec     01 00 80 AF 
020f0     F2 06 68 AC |  if_e	wrlong	##515, objptr
020f4     2B 00 00 AF 
020f8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
020fc                 | LR__0098
020fc                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
020fc     2B 00 00 FF 
02100     D0 E5 05 F1 | 	add	objptr, ##22480
02104     F2 12 02 FB | 	rdlong	arg01, objptr
02108     2B 00 00 FF 
0210c     D0 E5 85 F1 | 	sub	objptr, ##22480
02110     20 01 00 FF 
02114     B7 29 06 F6 | 	mov	local06, ##@LR__4132
02118     14 15 02 F6 | 	mov	arg02, local06
0211c     1C 2E B1 FD | 	call	#__system___string_cmp
02120     00 FA 0D F2 | 	cmp	result1, #0 wz
02124     5C 00 90 AD |  if_e	jmp	#LR__0099
02128     2B 00 00 FF 
0212c     D0 E5 05 F1 | 	add	objptr, ##22480
02130     F2 12 02 FB | 	rdlong	arg01, objptr
02134     2B 00 00 FF 
02138     D0 E5 85 F1 | 	sub	objptr, ##22480
0213c     20 01 00 FF 
02140     BD 29 06 F6 | 	mov	local06, ##@LR__4133
02144     14 15 02 F6 | 	mov	arg02, local06
02148     F0 2D B1 FD | 	call	#__system___string_cmp
0214c     00 FA 0D F2 | 	cmp	result1, #0 wz
02150     30 00 90 AD |  if_e	jmp	#LR__0099
02154     2B 00 00 FF 
02158     D0 E5 05 F1 | 	add	objptr, ##22480
0215c     F2 12 02 FB | 	rdlong	arg01, objptr
02160     2B 00 00 FF 
02164     D0 E5 85 F1 | 	sub	objptr, ##22480
02168     20 01 00 FF 
0216c     C4 2B 06 F6 | 	mov	local07, ##@LR__4134
02170     15 3D 02 F6 | 	mov	local16, local07
02174     1E 15 02 F6 | 	mov	arg02, local16
02178     C0 2D B1 FD | 	call	#__system___string_cmp
0217c     FD 28 0A F6 | 	mov	local06, result1 wz
02180     E4 00 90 5D |  if_ne	jmp	#LR__0102
02184                 | LR__0099
02184     2B 00 00 FF 
02188     DC E5 05 F1 | 	add	objptr, ##22492
0218c     F2 2A 02 FB | 	rdlong	local07, objptr
02190     2B 00 00 FF 
02194     DC E5 85 F1 | 	sub	objptr, ##22492
02198     15 3D 02 F6 | 	mov	local16, local07
0219c     01 00 00 FF 
021a0     04 3C 0E F2 | 	cmp	local16, ##516 wz
021a4     2B 00 00 AF 
021a8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
021ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
021b0     2B 00 00 AF 
021b4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
021b8     1B 2F 02 A6 |  if_e	mov	local09, local13
021bc     FE 2F 0E A2 |  if_e	cmp	local09, #510 wz
021c0     A4 00 90 5D |  if_ne	jmp	#LR__0102
021c4                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
021c4     2B 00 00 FF 
021c8     D8 E5 05 F1 | 	add	objptr, ##22488
021cc     F2 12 02 FB | 	rdlong	arg01, objptr
021d0     2B 00 00 FF 
021d4     D8 E5 85 F1 | 	sub	objptr, ##22488
021d8     20 01 00 FF 
021dc     CA 15 06 F6 | 	mov	arg02, ##@LR__4135
021e0     58 2D B1 FD | 	call	#__system___string_cmp
021e4     00 FA 0D F2 | 	cmp	result1, #0 wz
021e8     28 00 90 5D |  if_ne	jmp	#LR__0100
021ec     20 01 00 FF 
021f0     CD 1F 06 F6 | 	mov	local01, ##@LR__4136
021f4     2B 00 00 FF 
021f8     D8 E5 05 F1 | 	add	objptr, ##22488
021fc     F2 1E 62 FC | 	wrlong	local01, objptr
02200     04 E4 05 F1 | 	add	objptr, #4
02204     01 00 80 FF 
02208     F2 00 68 FC | 	wrlong	##512, objptr
0220c     2B 00 00 FF 
02210     DC E5 85 F1 | 	sub	objptr, ##22492
02214                 | LR__0100
02214                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02214     2B 00 00 FF 
02218     D8 E5 05 F1 | 	add	objptr, ##22488
0221c     F2 12 02 FB | 	rdlong	arg01, objptr
02220     2B 00 00 FF 
02224     D8 E5 85 F1 | 	sub	objptr, ##22488
02228     20 01 00 FF 
0222c     CF 29 06 F6 | 	mov	local06, ##@LR__4137
02230     14 15 02 F6 | 	mov	arg02, local06
02234     04 2D B1 FD | 	call	#__system___string_cmp
02238     00 FA 0D F2 | 	cmp	result1, #0 wz
0223c     28 00 90 5D |  if_ne	jmp	#LR__0101
02240     20 01 00 FF 
02244     D3 1F 06 F6 | 	mov	local01, ##@LR__4138
02248     2B 00 00 FF 
0224c     D8 E5 05 F1 | 	add	objptr, ##22488
02250     F2 1E 62 FC | 	wrlong	local01, objptr
02254     04 E4 05 F1 | 	add	objptr, #4
02258     01 00 80 FF 
0225c     F2 00 68 FC | 	wrlong	##512, objptr
02260     2B 00 00 FF 
02264     DC E5 85 F1 | 	sub	objptr, ##22492
02268                 | LR__0101
02268                 | LR__0102
02268                 | ' 
02268                 | ' '2b determine a type of the line
02268                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     34 17 B0 FD | 	call	#_isdec
02280     00 FA 0D F2 | 	cmp	result1, #0 wz
02284     20 00 90 AD |  if_e	jmp	#LR__0103
02288     2B 00 00 FF 
0228c     D0 E5 05 F1 | 	add	objptr, ##22480
02290     F2 12 02 FB | 	rdlong	arg01, objptr
02294     2B 00 00 FF 
02298     D0 E5 85 F1 | 	sub	objptr, ##22480
0229c     00 14 06 F6 | 	mov	arg02, #0
022a0     FC 5C B1 FD | 	call	#__system____builtin_atoi
022a4     FD 20 02 F6 | 	mov	local02, result1
022a8                 | LR__0103
022a8                 | ' 
022a8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
022a8     01 20 16 F2 | 	cmp	local02, #1 wc
022ac     2C 00 90 CD |  if_b	jmp	#LR__0104
022b0     01 32 0E F2 | 	cmp	local11, #1 wz
022b4     2D 00 00 AF 
022b8     E8 E5 05 A1 |  if_e	add	objptr, ##23528
022bc     F2 1E 02 AB |  if_e	rdlong	local01, objptr
022c0     2D 00 00 AF 
022c4     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
022c8     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
022cc     0C 00 90 5D |  if_ne	jmp	#LR__0104
022d0     10 13 02 F6 | 	mov	arg01, local02
022d4     00 18 B0 FD | 	call	#_deleteline
022d8     C8 04 90 FD | 	jmp	#LR__0120
022dc                 | LR__0104
022dc                 | ' 
022dc                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
022dc     01 20 16 F2 | 	cmp	local02, #1 wc
022e0     E0 00 90 CD |  if_b	jmp	#LR__0107
022e4     2D 00 00 FF 
022e8     E8 E5 05 F1 | 	add	objptr, ##23528
022ec     F2 1E 0A FB | 	rdlong	local01, objptr wz
022f0     2D 00 00 FF 
022f4     E8 E5 85 F1 | 	sub	objptr, ##23528
022f8     20 00 90 AD |  if_e	jmp	#LR__0105
022fc     2D 00 00 FF 
02300     E8 E5 05 F1 | 	add	objptr, ##23528
02304     F2 3C 02 FB | 	rdlong	local16, objptr
02308     2D 00 00 FF 
0230c     E8 E5 85 F1 | 	sub	objptr, ##23528
02310     1E 29 02 F6 | 	mov	local06, local16
02314     03 28 0E F2 | 	cmp	local06, #3 wz
02318     A8 00 90 5D |  if_ne	jmp	#LR__0107
0231c                 | LR__0105
0231c     2B 00 00 FF 
02320     E4 E5 05 F1 | 	add	objptr, ##22500
02324     F2 2E 02 FB | 	rdlong	local09, objptr
02328     2B 00 00 FF 
0232c     E4 E5 85 F1 | 	sub	objptr, ##22500
02330     17 2B 02 F6 | 	mov	local07, local09
02334     1B 2A 0E F2 | 	cmp	local07, #27 wz
02338     88 00 90 AD |  if_e	jmp	#LR__0107
0233c     2D 00 00 FF 
02340     E8 E5 05 F1 | 	add	objptr, ##23528
02344     F2 16 02 FB | 	rdlong	arg03, objptr
02348     2D 00 00 FF 
0234c     E8 E5 85 F1 | 	sub	objptr, ##23528
02350     10 13 02 F6 | 	mov	arg01, local02
02354     00 14 06 F6 | 	mov	arg02, #0
02358     74 29 B0 FD | 	call	#_compile
0235c     FD 22 0A F6 | 	mov	local03, result1 wz
02360                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02360                 | '   if err<>0 then printerror(err): goto 104
02360     0C 00 90 AD |  if_e	jmp	#LR__0106
02364     11 13 02 F6 | 	mov	arg01, local03
02368     B4 F6 B0 FD | 	call	#_printerror
0236c     34 04 90 FD | 	jmp	#LR__0120
02370                 | LR__0106
02370                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02370     52 00 00 FF 
02374     68 E4 05 F1 | 	add	objptr, ##42088
02378     F2 12 02 FB | 	rdlong	arg01, objptr
0237c     52 00 00 FF 
02380     68 E4 85 F1 | 	sub	objptr, ##42088
02384     20 01 00 FF 
02388     D5 15 06 F6 | 	mov	arg02, ##@LR__4139
0238c     AC 2B B1 FD | 	call	#__system___string_cmp
02390     00 FA 0D F2 | 	cmp	result1, #0 wz
02394     0C 04 90 AD |  if_e	jmp	#LR__0120
02398     52 00 00 FF 
0239c     68 E4 05 F1 | 	add	objptr, ##42088
023a0     F2 1E 02 FB | 	rdlong	local01, objptr
023a4     24 00 00 FF 
023a8     88 E4 85 F1 | 	sub	objptr, ##18568
023ac     F2 1E 62 FC | 	wrlong	local01, objptr
023b0     08 E4 05 F1 | 	add	objptr, #8
023b4     F2 08 68 FC | 	wrlong	#4, objptr
023b8     2D 00 00 FF 
023bc     E8 E5 85 F1 | 	sub	objptr, ##23528
023c0     A4 E6 9F FD | 	jmp	#LR__0020
023c4                 | LR__0107
023c4                 | '       							
023c4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
023c4     01 20 16 F2 | 	cmp	local02, #1 wc
023c8     E4 00 90 CD |  if_b	jmp	#LR__0110
023cc     2D 00 00 FF 
023d0     E8 E5 05 F1 | 	add	objptr, ##23528
023d4     F2 1E 02 FB | 	rdlong	local01, objptr
023d8     2D 00 00 FF 
023dc     E8 E5 85 F1 | 	sub	objptr, ##23528
023e0     01 1E 0E F2 | 	cmp	local01, #1 wz
023e4     20 00 90 AD |  if_e	jmp	#LR__0108
023e8     2D 00 00 FF 
023ec     E8 E5 05 F1 | 	add	objptr, ##23528
023f0     F2 3C 02 FB | 	rdlong	local16, objptr
023f4     2D 00 00 FF 
023f8     E8 E5 85 F1 | 	sub	objptr, ##23528
023fc     1E 29 02 F6 | 	mov	local06, local16
02400     02 28 0E F2 | 	cmp	local06, #2 wz
02404     A8 00 90 5D |  if_ne	jmp	#LR__0110
02408                 | LR__0108
02408     2B 00 00 FF 
0240c     DC E5 05 F1 | 	add	objptr, ##22492
02410     F2 2E 02 FB | 	rdlong	local09, objptr
02414     2B 00 00 FF 
02418     DC E5 85 F1 | 	sub	objptr, ##22492
0241c     17 2B 02 F6 | 	mov	local07, local09
02420     1B 2A 0E F2 | 	cmp	local07, #27 wz
02424     88 00 90 AD |  if_e	jmp	#LR__0110
02428     2D 00 00 FF 
0242c     E8 E5 05 F1 | 	add	objptr, ##23528
02430     F2 16 02 FB | 	rdlong	arg03, objptr
02434     2D 00 00 FF 
02438     E8 E5 85 F1 | 	sub	objptr, ##23528
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     00 14 06 F6 | 	mov	arg02, #0
02444     88 28 B0 FD | 	call	#_compile
02448     FD 22 0A F6 | 	mov	local03, result1 wz
0244c                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
0244c                 | '   if err<>0 then printerror(err): goto 104
0244c     0C 00 90 AD |  if_e	jmp	#LR__0109
02450     11 13 02 F6 | 	mov	arg01, local03
02454     C8 F5 B0 FD | 	call	#_printerror
02458     48 03 90 FD | 	jmp	#LR__0120
0245c                 | LR__0109
0245c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
0245c     52 00 00 FF 
02460     68 E4 05 F1 | 	add	objptr, ##42088
02464     F2 12 02 FB | 	rdlong	arg01, objptr
02468     52 00 00 FF 
0246c     68 E4 85 F1 | 	sub	objptr, ##42088
02470     20 01 00 FF 
02474     D6 15 06 F6 | 	mov	arg02, ##@LR__4140
02478     C0 2A B1 FD | 	call	#__system___string_cmp
0247c     00 FA 0D F2 | 	cmp	result1, #0 wz
02480     20 03 90 AD |  if_e	jmp	#LR__0120
02484     52 00 00 FF 
02488     68 E4 05 F1 | 	add	objptr, ##42088
0248c     F2 1E 02 FB | 	rdlong	local01, objptr
02490     24 00 00 FF 
02494     88 E4 85 F1 | 	sub	objptr, ##18568
02498     F2 1E 62 FC | 	wrlong	local01, objptr
0249c     08 E4 05 F1 | 	add	objptr, #8
024a0     F2 08 68 FC | 	wrlong	#4, objptr
024a4     2D 00 00 FF 
024a8     E8 E5 85 F1 | 	sub	objptr, ##23528
024ac     B8 E5 9F FD | 	jmp	#LR__0020
024b0                 | LR__0110
024b0                 | ' 							 
024b0                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
024b0     01 20 16 F2 | 	cmp	local02, #1 wc
024b4     C0 00 90 CD |  if_b	jmp	#LR__0111
024b8     2D 00 00 FF 
024bc     E8 E5 05 F1 | 	add	objptr, ##23528
024c0     F2 1E 0A FB | 	rdlong	local01, objptr wz
024c4     2D 00 00 FF 
024c8     E8 E5 85 F1 | 	sub	objptr, ##23528
024cc     2D 00 00 5F 
024d0     E8 E5 05 51 |  if_ne	add	objptr, ##23528
024d4     F2 3C 02 5B |  if_ne	rdlong	local16, objptr
024d8     2D 00 00 5F 
024dc     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
024e0     03 3C 0E 52 |  if_ne	cmp	local16, #3 wz
024e4     2B 00 00 AF 
024e8     E4 E5 05 A1 |  if_e	add	objptr, ##22500
024ec     F2 2E 02 AB |  if_e	rdlong	local09, objptr
024f0     2B 00 00 AF 
024f4     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
024f8     17 2B 02 A6 |  if_e	mov	local07, local09
024fc     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
02500     74 00 90 5D |  if_ne	jmp	#LR__0111
02504     2D 00 00 FF 
02508     E8 E5 05 F1 | 	add	objptr, ##23528
0250c     F2 16 02 FB | 	rdlong	arg03, objptr
02510     2D 00 00 FF 
02514     E8 E5 85 F1 | 	sub	objptr, ##23528
02518     10 13 02 F6 | 	mov	arg01, local02
0251c     00 14 06 F6 | 	mov	arg02, #0
02520     7C 28 B0 FD | 	call	#_compile_assign
02524                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02524                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02524     52 00 00 FF 
02528     68 E4 05 F1 | 	add	objptr, ##42088
0252c     F2 12 02 FB | 	rdlong	arg01, objptr
02530     52 00 00 FF 
02534     68 E4 85 F1 | 	sub	objptr, ##42088
02538     20 01 00 FF 
0253c     D7 15 06 F6 | 	mov	arg02, ##@LR__4141
02540     F8 29 B1 FD | 	call	#__system___string_cmp
02544     00 FA 0D F2 | 	cmp	result1, #0 wz
02548     58 02 90 AD |  if_e	jmp	#LR__0120
0254c     52 00 00 FF 
02550     68 E4 05 F1 | 	add	objptr, ##42088
02554     F2 1E 02 FB | 	rdlong	local01, objptr
02558     24 00 00 FF 
0255c     88 E4 85 F1 | 	sub	objptr, ##18568
02560     F2 1E 62 FC | 	wrlong	local01, objptr
02564     08 E4 05 F1 | 	add	objptr, #8
02568     F2 08 68 FC | 	wrlong	#4, objptr
0256c     2D 00 00 FF 
02570     E8 E5 85 F1 | 	sub	objptr, ##23528
02574     F0 E4 9F FD | 	jmp	#LR__0020
02578                 | LR__0111
02578                 | '     							 
02578                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
02578     01 20 16 F2 | 	cmp	local02, #1 wc
0257c     C0 00 90 CD |  if_b	jmp	#LR__0112
02580     2D 00 00 FF 
02584     E8 E5 05 F1 | 	add	objptr, ##23528
02588     F2 1E 02 FB | 	rdlong	local01, objptr
0258c     2D 00 00 FF 
02590     E8 E5 85 F1 | 	sub	objptr, ##23528
02594     01 1E 0E F2 | 	cmp	local01, #1 wz
02598     2D 00 00 5F 
0259c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
025a0     F2 28 02 5B |  if_ne	rdlong	local06, objptr
025a4     2D 00 00 5F 
025a8     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
025ac     02 28 0E 52 |  if_ne	cmp	local06, #2 wz
025b0     2B 00 00 AF 
025b4     DC E5 05 A1 |  if_e	add	objptr, ##22492
025b8     F2 2E 02 AB |  if_e	rdlong	local09, objptr
025bc     2B 00 00 AF 
025c0     DC E5 85 A1 |  if_e	sub	objptr, ##22492
025c4     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
025c8     74 00 90 5D |  if_ne	jmp	#LR__0112
025cc     2D 00 00 FF 
025d0     E8 E5 05 F1 | 	add	objptr, ##23528
025d4     F2 16 02 FB | 	rdlong	arg03, objptr
025d8     2D 00 00 FF 
025dc     E8 E5 85 F1 | 	sub	objptr, ##23528
025e0     10 13 02 F6 | 	mov	arg01, local02
025e4     00 14 06 F6 | 	mov	arg02, #0
025e8     B4 27 B0 FD | 	call	#_compile_assign
025ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
025ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
025ec     52 00 00 FF 
025f0     68 E4 05 F1 | 	add	objptr, ##42088
025f4     F2 12 02 FB | 	rdlong	arg01, objptr
025f8     52 00 00 FF 
025fc     68 E4 85 F1 | 	sub	objptr, ##42088
02600     20 01 00 FF 
02604     D8 15 06 F6 | 	mov	arg02, ##@LR__4142
02608     30 29 B1 FD | 	call	#__system___string_cmp
0260c     00 FA 0D F2 | 	cmp	result1, #0 wz
02610     90 01 90 AD |  if_e	jmp	#LR__0120
02614     52 00 00 FF 
02618     68 E4 05 F1 | 	add	objptr, ##42088
0261c     F2 1E 02 FB | 	rdlong	local01, objptr
02620     24 00 00 FF 
02624     88 E4 85 F1 | 	sub	objptr, ##18568
02628     F2 1E 62 FC | 	wrlong	local01, objptr
0262c     08 E4 05 F1 | 	add	objptr, #8
02630     F2 08 68 FC | 	wrlong	#4, objptr
02634     2D 00 00 FF 
02638     E8 E5 85 F1 | 	sub	objptr, ##23528
0263c     28 E4 9F FD | 	jmp	#LR__0020
02640                 | LR__0112
02640                 | ' 
02640                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
02640     2B 00 00 FF 
02644     D4 E5 05 F1 | 	add	objptr, ##22484
02648     F2 1E 02 FB | 	rdlong	local01, objptr
0264c     2B 00 00 FF 
02650     D4 E5 85 F1 | 	sub	objptr, ##22484
02654     01 00 00 FF 
02658     04 1E 0E F2 | 	cmp	local01, ##516 wz
0265c     2B 00 00 AF 
02660     DC E5 05 A1 |  if_e	add	objptr, ##22492
02664     F2 28 02 AB |  if_e	rdlong	local06, objptr
02668     2B 00 00 AF 
0266c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02670     1B 28 0E A2 |  if_e	cmp	local06, #27 wz
02674     14 00 90 5D |  if_ne	jmp	#LR__0113
02678     00 12 06 F6 | 	mov	arg01, #0
0267c     00 14 06 F6 | 	mov	arg02, #0
02680     00 16 06 F6 | 	mov	arg03, #0
02684     18 27 B0 FD | 	call	#_compile_assign
02688     90 00 90 FD | 	jmp	#LR__0115
0268c                 | LR__0113
0268c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0268c     2B 00 00 FF 
02690     D4 E5 05 F1 | 	add	objptr, ##22484
02694     F2 1E 02 FB | 	rdlong	local01, objptr
02698     2B 00 00 FF 
0269c     D4 E5 85 F1 | 	sub	objptr, ##22484
026a0     01 00 00 FF 
026a4     04 1E 0E F2 | 	cmp	local01, ##516 wz
026a8     2B 00 00 AF 
026ac     DC E5 05 A1 |  if_e	add	objptr, ##22492
026b0     F2 28 02 AB |  if_e	rdlong	local06, objptr
026b4     2B 00 00 AF 
026b8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
026bc     14 28 0E A2 |  if_e	cmp	local06, #20 wz
026c0     44 00 90 5D |  if_ne	jmp	#LR__0114
026c4     00 12 06 F6 | 	mov	arg01, #0
026c8     FC 7D B1 FD | 	call	#__system___getiolock_0350
026cc     FD 12 02 F6 | 	mov	arg01, result1
026d0     40 28 B1 FD | 	call	#__system___lockmem
026d4     20 01 00 FF 
026d8     D9 15 06 F6 | 	mov	arg02, ##@LR__4143
026dc     00 12 06 F6 | 	mov	arg01, #0
026e0     00 16 06 F6 | 	mov	arg03, #0
026e4     20 35 B1 FD | 	call	#__system___basic_print_string
026e8     00 12 06 F6 | 	mov	arg01, #0
026ec     0A 14 06 F6 | 	mov	arg02, #10
026f0     00 16 06 F6 | 	mov	arg03, #0
026f4     B8 34 B1 FD | 	call	#__system___basic_print_char
026f8     00 12 06 F6 | 	mov	arg01, #0
026fc     C8 7D B1 FD | 	call	#__system___getiolock_0350
02700     FD 00 68 FC | 	wrlong	#0, result1
02704     7C 00 90 FD | 	jmp	#LR__0119
02708                 | LR__0114
02708     00 12 06 F6 | 	mov	arg01, #0
0270c     00 14 06 F6 | 	mov	arg02, #0
02710     00 16 06 F6 | 	mov	arg03, #0
02714     B8 25 B0 FD | 	call	#_compile
02718     FD 22 02 F6 | 	mov	local03, result1
0271c                 | LR__0115
0271c                 | ' 
0271c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0271c                 | ' 
0271c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0271c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0271c                 | ' if err=0 then execute_line() else printerror(err)
0271c     00 22 0E F2 | 	cmp	local03, #0 wz
02720     0C 00 90 5D |  if_ne	jmp	#LR__0116
02724     00 12 06 F6 | 	mov	arg01, #0
02728     64 5F B0 FD | 	call	#_execute_line
0272c     08 00 90 FD | 	jmp	#LR__0117
02730                 | LR__0116
02730     11 13 02 F6 | 	mov	arg01, local03
02734     E8 F2 B0 FD | 	call	#_printerror
02738                 | LR__0117
02738                 | ' if rest$<>"" then line$=rest$:  goto 108 
02738     52 00 00 FF 
0273c     68 E4 05 F1 | 	add	objptr, ##42088
02740     F2 12 02 FB | 	rdlong	arg01, objptr
02744     52 00 00 FF 
02748     68 E4 85 F1 | 	sub	objptr, ##42088
0274c     21 01 00 FF 
02750     08 14 06 F6 | 	mov	arg02, ##@LR__4144
02754     E4 27 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     24 00 90 AD |  if_e	jmp	#LR__0118
02760     52 00 00 FF 
02764     68 E4 05 F1 | 	add	objptr, ##42088
02768     F2 1E 02 FB | 	rdlong	local01, objptr
0276c     24 00 00 FF 
02770     88 E4 85 F1 | 	sub	objptr, ##18568
02774     F2 1E 62 FC | 	wrlong	local01, objptr
02778     2D 00 00 FF 
0277c     E0 E5 85 F1 | 	sub	objptr, ##23520
02780     E4 E2 9F FD | 	jmp	#LR__0020
02784                 | LR__0118
02784                 | LR__0119
02784     21 01 00 FF 
02788     09 12 06 F6 | 	mov	arg01, ##@LR__4145
0278c                 | ' 
0278c                 | ' write(text)
0278c     60 17 B1 FD | 	call	#_hg010b_spin2_write
02790                 | ' crlf
02790     BC 18 B1 FD | 	call	#_hg010b_spin2_crlf
02794     21 01 00 FF 
02798     0A 12 06 F6 | 	mov	arg01, ##@LR__4146
0279c                 | ' 
0279c                 | ' write(text)
0279c     50 17 B1 FD | 	call	#_hg010b_spin2_write
027a0                 | ' crlf
027a0     AC 18 B1 FD | 	call	#_hg010b_spin2_crlf
027a4                 | LR__0120
027a4     A7 F0 03 F6 | 	mov	ptra, fp
027a8     B2 00 A0 FD | 	call	#popregs_
027ac                 | _interpret_ret
027ac     2D 00 64 FD | 	ret
027b0                 | 
027b0                 | ' 
027b0                 | ' 
027b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
027b0                 | ' 
027b0                 | ' function isoperator(s as string) as ubyte
027b0                 | _isoperator
027b0     01 4A 05 F6 | 	mov	COUNT_, #1
027b4     A8 00 A0 FD | 	call	#pushregs_
027b8                 | ' 
027b8                 | ' select case s
027b8     09 1F 02 F6 | 	mov	local01, arg01
027bc     21 01 00 FF 
027c0     10 14 06 F6 | 	mov	arg02, ##@LR__4147
027c4     0F 13 02 F6 | 	mov	arg01, local01
027c8     70 27 B1 FD | 	call	#__system___string_cmp
027cc     00 FA 0D F2 | 	cmp	result1, #0 wz
027d0     FC 01 90 AD |  if_e	jmp	#LR__0130
027d4     21 01 00 FF 
027d8     12 14 06 F6 | 	mov	arg02, ##@LR__4148
027dc     0F 13 02 F6 | 	mov	arg01, local01
027e0     58 27 B1 FD | 	call	#__system___string_cmp
027e4     00 FA 0D F2 | 	cmp	result1, #0 wz
027e8     EC 01 90 AD |  if_e	jmp	#LR__0131
027ec     21 01 00 FF 
027f0     14 14 06 F6 | 	mov	arg02, ##@LR__4149
027f4     0F 13 02 F6 | 	mov	arg01, local01
027f8     40 27 B1 FD | 	call	#__system___string_cmp
027fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02800     DC 01 90 AD |  if_e	jmp	#LR__0132
02804     21 01 00 FF 
02808     17 14 06 F6 | 	mov	arg02, ##@LR__4150
0280c     0F 13 02 F6 | 	mov	arg01, local01
02810     28 27 B1 FD | 	call	#__system___string_cmp
02814     00 FA 0D F2 | 	cmp	result1, #0 wz
02818     CC 01 90 AD |  if_e	jmp	#LR__0133
0281c     21 01 00 FF 
02820     1B 14 06 F6 | 	mov	arg02, ##@LR__4151
02824     0F 13 02 F6 | 	mov	arg01, local01
02828     10 27 B1 FD | 	call	#__system___string_cmp
0282c     00 FA 0D F2 | 	cmp	result1, #0 wz
02830     BC 01 90 AD |  if_e	jmp	#LR__0134
02834     21 01 00 FF 
02838     1D 14 06 F6 | 	mov	arg02, ##@LR__4152
0283c     0F 13 02 F6 | 	mov	arg01, local01
02840     F8 26 B1 FD | 	call	#__system___string_cmp
02844     00 FA 0D F2 | 	cmp	result1, #0 wz
02848     AC 01 90 AD |  if_e	jmp	#LR__0135
0284c     21 01 00 FF 
02850     1F 14 06 F6 | 	mov	arg02, ##@LR__4153
02854     0F 13 02 F6 | 	mov	arg01, local01
02858     E0 26 B1 FD | 	call	#__system___string_cmp
0285c     00 FA 0D F2 | 	cmp	result1, #0 wz
02860     9C 01 90 AD |  if_e	jmp	#LR__0136
02864     21 01 00 FF 
02868     23 14 06 F6 | 	mov	arg02, ##@LR__4154
0286c     0F 13 02 F6 | 	mov	arg01, local01
02870     C8 26 B1 FD | 	call	#__system___string_cmp
02874     00 FA 0D F2 | 	cmp	result1, #0 wz
02878     8C 01 90 AD |  if_e	jmp	#LR__0137
0287c     21 01 00 FF 
02880     27 14 06 F6 | 	mov	arg02, ##@LR__4155
02884     0F 13 02 F6 | 	mov	arg01, local01
02888     B0 26 B1 FD | 	call	#__system___string_cmp
0288c     00 FA 0D F2 | 	cmp	result1, #0 wz
02890     7C 01 90 AD |  if_e	jmp	#LR__0138
02894     21 01 00 FF 
02898     2B 14 06 F6 | 	mov	arg02, ##@LR__4156
0289c     0F 13 02 F6 | 	mov	arg01, local01
028a0     98 26 B1 FD | 	call	#__system___string_cmp
028a4     00 FA 0D F2 | 	cmp	result1, #0 wz
028a8     6C 01 90 AD |  if_e	jmp	#LR__0139
028ac     21 01 00 FF 
028b0     2F 14 06 F6 | 	mov	arg02, ##@LR__4157
028b4     0F 13 02 F6 | 	mov	arg01, local01
028b8     80 26 B1 FD | 	call	#__system___string_cmp
028bc     00 FA 0D F2 | 	cmp	result1, #0 wz
028c0     5C 01 90 AD |  if_e	jmp	#LR__0140
028c4     21 01 00 FF 
028c8     33 14 06 F6 | 	mov	arg02, ##@LR__4158
028cc     0F 13 02 F6 | 	mov	arg01, local01
028d0     68 26 B1 FD | 	call	#__system___string_cmp
028d4     00 FA 0D F2 | 	cmp	result1, #0 wz
028d8     4C 01 90 AD |  if_e	jmp	#LR__0141
028dc     21 01 00 FF 
028e0     35 14 06 F6 | 	mov	arg02, ##@LR__4159
028e4     0F 13 02 F6 | 	mov	arg01, local01
028e8     50 26 B1 FD | 	call	#__system___string_cmp
028ec     00 FA 0D F2 | 	cmp	result1, #0 wz
028f0     3C 01 90 AD |  if_e	jmp	#LR__0142
028f4     21 01 00 FF 
028f8     39 14 06 F6 | 	mov	arg02, ##@LR__4160
028fc     0F 13 02 F6 | 	mov	arg01, local01
02900     38 26 B1 FD | 	call	#__system___string_cmp
02904     00 FA 0D F2 | 	cmp	result1, #0 wz
02908     2C 01 90 AD |  if_e	jmp	#LR__0143
0290c     21 01 00 FF 
02910     3B 14 06 F6 | 	mov	arg02, ##@LR__4161
02914     0F 13 02 F6 | 	mov	arg01, local01
02918     20 26 B1 FD | 	call	#__system___string_cmp
0291c     00 FA 0D F2 | 	cmp	result1, #0 wz
02920     1C 01 90 AD |  if_e	jmp	#LR__0144
02924     21 01 00 FF 
02928     3D 14 06 F6 | 	mov	arg02, ##@LR__4162
0292c     0F 13 02 F6 | 	mov	arg01, local01
02930     08 26 B1 FD | 	call	#__system___string_cmp
02934     00 FA 0D F2 | 	cmp	result1, #0 wz
02938     0C 01 90 AD |  if_e	jmp	#LR__0145
0293c     21 01 00 FF 
02940     40 14 06 F6 | 	mov	arg02, ##@LR__4163
02944     0F 13 02 F6 | 	mov	arg01, local01
02948     F0 25 B1 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     FC 00 90 AD |  if_e	jmp	#LR__0146
02954     21 01 00 FF 
02958     43 14 06 F6 | 	mov	arg02, ##@LR__4164
0295c     0F 13 02 F6 | 	mov	arg01, local01
02960     D8 25 B1 FD | 	call	#__system___string_cmp
02964     00 FA 0D F2 | 	cmp	result1, #0 wz
02968     EC 00 90 AD |  if_e	jmp	#LR__0147
0296c     21 01 00 FF 
02970     45 14 06 F6 | 	mov	arg02, ##@LR__4165
02974     0F 13 02 F6 | 	mov	arg01, local01
02978     C0 25 B1 FD | 	call	#__system___string_cmp
0297c     00 FA 0D F2 | 	cmp	result1, #0 wz
02980     DC 00 90 AD |  if_e	jmp	#LR__0148
02984     21 01 00 FF 
02988     47 14 06 F6 | 	mov	arg02, ##@LR__4166
0298c     0F 13 02 F6 | 	mov	arg01, local01
02990     A8 25 B1 FD | 	call	#__system___string_cmp
02994     00 FA 0D F2 | 	cmp	result1, #0 wz
02998     CC 00 90 AD |  if_e	jmp	#LR__0149
0299c     21 01 00 FF 
029a0     4A 14 06 F6 | 	mov	arg02, ##@LR__4167
029a4     0F 13 02 F6 | 	mov	arg01, local01
029a8     90 25 B1 FD | 	call	#__system___string_cmp
029ac     00 FA 0D F2 | 	cmp	result1, #0 wz
029b0     BC 00 90 AD |  if_e	jmp	#LR__0150
029b4     21 01 00 FF 
029b8     4D 14 06 F6 | 	mov	arg02, ##@LR__4168
029bc     0F 13 02 F6 | 	mov	arg01, local01
029c0     78 25 B1 FD | 	call	#__system___string_cmp
029c4     00 FA 0D F2 | 	cmp	result1, #0 wz
029c8     AC 00 90 AD |  if_e	jmp	#LR__0151
029cc     B0 00 90 FD | 	jmp	#LR__0152
029d0                 | LR__0130
029d0     01 FA 05 F6 | 	mov	result1, #1
029d4     AC 00 90 FD | 	jmp	#LR__0153
029d8                 | LR__0131
029d8     02 FA 05 F6 | 	mov	result1, #2
029dc     A4 00 90 FD | 	jmp	#LR__0153
029e0                 | LR__0132
029e0     03 FA 05 F6 | 	mov	result1, #3
029e4     9C 00 90 FD | 	jmp	#LR__0153
029e8                 | LR__0133
029e8     04 FA 05 F6 | 	mov	result1, #4
029ec     94 00 90 FD | 	jmp	#LR__0153
029f0                 | LR__0134
029f0     05 FA 05 F6 | 	mov	result1, #5
029f4     8C 00 90 FD | 	jmp	#LR__0153
029f8                 | LR__0135
029f8     06 FA 05 F6 | 	mov	result1, #6
029fc     84 00 90 FD | 	jmp	#LR__0153
02a00                 | LR__0136
02a00     07 FA 05 F6 | 	mov	result1, #7
02a04     7C 00 90 FD | 	jmp	#LR__0153
02a08                 | LR__0137
02a08     08 FA 05 F6 | 	mov	result1, #8
02a0c     74 00 90 FD | 	jmp	#LR__0153
02a10                 | LR__0138
02a10     09 FA 05 F6 | 	mov	result1, #9
02a14     6C 00 90 FD | 	jmp	#LR__0153
02a18                 | LR__0139
02a18     0A FA 05 F6 | 	mov	result1, #10
02a1c     64 00 90 FD | 	jmp	#LR__0153
02a20                 | LR__0140
02a20     0B FA 05 F6 | 	mov	result1, #11
02a24     5C 00 90 FD | 	jmp	#LR__0153
02a28                 | LR__0141
02a28     0C FA 05 F6 | 	mov	result1, #12
02a2c     54 00 90 FD | 	jmp	#LR__0153
02a30                 | LR__0142
02a30     0D FA 05 F6 | 	mov	result1, #13
02a34     4C 00 90 FD | 	jmp	#LR__0153
02a38                 | LR__0143
02a38     0E FA 05 F6 | 	mov	result1, #14
02a3c     44 00 90 FD | 	jmp	#LR__0153
02a40                 | LR__0144
02a40     1B FA 05 F6 | 	mov	result1, #27
02a44     3C 00 90 FD | 	jmp	#LR__0153
02a48                 | LR__0145
02a48     27 FA 05 F6 | 	mov	result1, #39
02a4c     34 00 90 FD | 	jmp	#LR__0153
02a50                 | LR__0146
02a50     26 FA 05 F6 | 	mov	result1, #38
02a54     2C 00 90 FD | 	jmp	#LR__0153
02a58                 | LR__0147
02a58     10 FA 05 F6 | 	mov	result1, #16
02a5c     24 00 90 FD | 	jmp	#LR__0153
02a60                 | LR__0148
02a60     0F FA 05 F6 | 	mov	result1, #15
02a64     1C 00 90 FD | 	jmp	#LR__0153
02a68                 | LR__0149
02a68     2A FA 05 F6 | 	mov	result1, #42
02a6c     14 00 90 FD | 	jmp	#LR__0153
02a70                 | LR__0150
02a70     28 FA 05 F6 | 	mov	result1, #40
02a74     0C 00 90 FD | 	jmp	#LR__0153
02a78                 | LR__0151
02a78     29 FA 05 F6 | 	mov	result1, #41
02a7c     04 00 90 FD | 	jmp	#LR__0153
02a80                 | LR__0152
02a80     00 FA 05 F6 | 	mov	result1, #0
02a84                 | LR__0153
02a84     A7 F0 03 F6 | 	mov	ptra, fp
02a88     B2 00 A0 FD | 	call	#popregs_
02a8c                 | _isoperator_ret
02a8c     2D 00 64 FD | 	ret
02a90                 | 
02a90                 | ' 
02a90                 | ' function isseparator(s as string) as ubyte
02a90                 | _isseparator
02a90     01 4A 05 F6 | 	mov	COUNT_, #1
02a94     A8 00 A0 FD | 	call	#pushregs_
02a98                 | ' 
02a98                 | ' select case s
02a98     09 1F 02 F6 | 	mov	local01, arg01
02a9c     21 01 00 FF 
02aa0     50 14 06 F6 | 	mov	arg02, ##@LR__4169
02aa4     0F 13 02 F6 | 	mov	arg01, local01
02aa8     90 24 B1 FD | 	call	#__system___string_cmp
02aac     00 FA 0D F2 | 	cmp	result1, #0 wz
02ab0     54 01 90 AD |  if_e	jmp	#LR__0160
02ab4     21 01 00 FF 
02ab8     52 14 06 F6 | 	mov	arg02, ##@LR__4170
02abc     0F 13 02 F6 | 	mov	arg01, local01
02ac0     78 24 B1 FD | 	call	#__system___string_cmp
02ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ac8     44 01 90 AD |  if_e	jmp	#LR__0161
02acc     21 01 00 FF 
02ad0     54 14 06 F6 | 	mov	arg02, ##@LR__4171
02ad4     0F 13 02 F6 | 	mov	arg01, local01
02ad8     60 24 B1 FD | 	call	#__system___string_cmp
02adc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ae0     34 01 90 AD |  if_e	jmp	#LR__0162
02ae4     21 01 00 FF 
02ae8     56 14 06 F6 | 	mov	arg02, ##@LR__4172
02aec     0F 13 02 F6 | 	mov	arg01, local01
02af0     48 24 B1 FD | 	call	#__system___string_cmp
02af4     00 FA 0D F2 | 	cmp	result1, #0 wz
02af8     24 01 90 AD |  if_e	jmp	#LR__0163
02afc     21 01 00 FF 
02b00     58 14 06 F6 | 	mov	arg02, ##@LR__4173
02b04     0F 13 02 F6 | 	mov	arg01, local01
02b08     30 24 B1 FD | 	call	#__system___string_cmp
02b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b10     14 01 90 AD |  if_e	jmp	#LR__0164
02b14     21 01 00 FF 
02b18     5A 14 06 F6 | 	mov	arg02, ##@LR__4174
02b1c     0F 13 02 F6 | 	mov	arg01, local01
02b20     18 24 B1 FD | 	call	#__system___string_cmp
02b24     00 FA 0D F2 | 	cmp	result1, #0 wz
02b28     04 01 90 AD |  if_e	jmp	#LR__0165
02b2c     21 01 00 FF 
02b30     5C 14 06 F6 | 	mov	arg02, ##@LR__4175
02b34     0F 13 02 F6 | 	mov	arg01, local01
02b38     00 24 B1 FD | 	call	#__system___string_cmp
02b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b40     F4 00 90 AD |  if_e	jmp	#LR__0166
02b44     21 01 00 FF 
02b48     5E 14 06 F6 | 	mov	arg02, ##@LR__4176
02b4c     0F 13 02 F6 | 	mov	arg01, local01
02b50     E8 23 B1 FD | 	call	#__system___string_cmp
02b54     00 FA 0D F2 | 	cmp	result1, #0 wz
02b58     E4 00 90 AD |  if_e	jmp	#LR__0167
02b5c     21 01 00 FF 
02b60     60 14 06 F6 | 	mov	arg02, ##@LR__4177
02b64     0F 13 02 F6 | 	mov	arg01, local01
02b68     D0 23 B1 FD | 	call	#__system___string_cmp
02b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02b70     D4 00 90 AD |  if_e	jmp	#LR__0168
02b74     21 01 00 FF 
02b78     62 14 06 F6 | 	mov	arg02, ##@LR__4178
02b7c     0F 13 02 F6 | 	mov	arg01, local01
02b80     B8 23 B1 FD | 	call	#__system___string_cmp
02b84     00 FA 0D F2 | 	cmp	result1, #0 wz
02b88     C4 00 90 AD |  if_e	jmp	#LR__0169
02b8c     21 01 00 FF 
02b90     64 14 06 F6 | 	mov	arg02, ##@LR__4179
02b94     0F 13 02 F6 | 	mov	arg01, local01
02b98     A0 23 B1 FD | 	call	#__system___string_cmp
02b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02ba0     B4 00 90 AD |  if_e	jmp	#LR__0170
02ba4     21 01 00 FF 
02ba8     66 14 06 F6 | 	mov	arg02, ##@LR__4180
02bac     0F 13 02 F6 | 	mov	arg01, local01
02bb0     88 23 B1 FD | 	call	#__system___string_cmp
02bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb8     A4 00 90 AD |  if_e	jmp	#LR__0171
02bbc     21 01 00 FF 
02bc0     68 14 06 F6 | 	mov	arg02, ##@LR__4181
02bc4     0F 13 02 F6 | 	mov	arg01, local01
02bc8     70 23 B1 FD | 	call	#__system___string_cmp
02bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02bd0     94 00 90 AD |  if_e	jmp	#LR__0172
02bd4     21 01 00 FF 
02bd8     6A 14 06 F6 | 	mov	arg02, ##@LR__4182
02bdc     0F 13 02 F6 | 	mov	arg01, local01
02be0     58 23 B1 FD | 	call	#__system___string_cmp
02be4     00 FA 0D F2 | 	cmp	result1, #0 wz
02be8     84 00 90 AD |  if_e	jmp	#LR__0173
02bec     21 01 00 FF 
02bf0     6C 14 06 F6 | 	mov	arg02, ##@LR__4183
02bf4     0F 13 02 F6 | 	mov	arg01, local01
02bf8     40 23 B1 FD | 	call	#__system___string_cmp
02bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02c00     74 00 90 AD |  if_e	jmp	#LR__0174
02c04     78 00 90 FD | 	jmp	#LR__0175
02c08                 | LR__0160
02c08     01 FA 05 F6 | 	mov	result1, #1
02c0c     74 00 90 FD | 	jmp	#LR__0176
02c10                 | LR__0161
02c10     02 FA 05 F6 | 	mov	result1, #2
02c14     6C 00 90 FD | 	jmp	#LR__0176
02c18                 | LR__0162
02c18     1B FA 05 F6 | 	mov	result1, #27
02c1c     64 00 90 FD | 	jmp	#LR__0176
02c20                 | LR__0163
02c20     11 FA 05 F6 | 	mov	result1, #17
02c24     5C 00 90 FD | 	jmp	#LR__0176
02c28                 | LR__0164
02c28     05 FA 05 F6 | 	mov	result1, #5
02c2c     54 00 90 FD | 	jmp	#LR__0176
02c30                 | LR__0165
02c30     06 FA 05 F6 | 	mov	result1, #6
02c34     4C 00 90 FD | 	jmp	#LR__0176
02c38                 | LR__0166
02c38     12 FA 05 F6 | 	mov	result1, #18
02c3c     44 00 90 FD | 	jmp	#LR__0176
02c40                 | LR__0167
02c40     13 FA 05 F6 | 	mov	result1, #19
02c44     3C 00 90 FD | 	jmp	#LR__0176
02c48                 | LR__0168
02c48     0C FA 05 F6 | 	mov	result1, #12
02c4c     34 00 90 FD | 	jmp	#LR__0176
02c50                 | LR__0169
02c50     14 FA 05 F6 | 	mov	result1, #20
02c54     2C 00 90 FD | 	jmp	#LR__0176
02c58                 | LR__0170
02c58     15 FA 05 F6 | 	mov	result1, #21
02c5c     24 00 90 FD | 	jmp	#LR__0176
02c60                 | LR__0171
02c60     16 FA 05 F6 | 	mov	result1, #22
02c64     1C 00 90 FD | 	jmp	#LR__0176
02c68                 | LR__0172
02c68     FF FB 05 F6 | 	mov	result1, #511
02c6c     14 00 90 FD | 	jmp	#LR__0176
02c70                 | LR__0173
02c70     0F FA 05 F6 | 	mov	result1, #15
02c74     0C 00 90 FD | 	jmp	#LR__0176
02c78                 | LR__0174
02c78     10 FA 05 F6 | 	mov	result1, #16
02c7c     04 00 90 FD | 	jmp	#LR__0176
02c80                 | LR__0175
02c80     00 FA 05 F6 | 	mov	result1, #0
02c84                 | LR__0176
02c84     A7 F0 03 F6 | 	mov	ptra, fp
02c88     B2 00 A0 FD | 	call	#popregs_
02c8c                 | _isseparator_ret
02c8c     2D 00 64 FD | 	ret
02c90                 | 
02c90                 | ' 
02c90                 | ' 
02c90                 | ' function iscommand(s as string) as ubyte
02c90                 | _iscommand
02c90     01 4A 05 F6 | 	mov	COUNT_, #1
02c94     A8 00 A0 FD | 	call	#pushregs_
02c98                 | ' 
02c98                 | ' select case s
02c98     09 1F 02 F6 | 	mov	local01, arg01
02c9c     21 01 00 FF 
02ca0     70 14 06 F6 | 	mov	arg02, ##@LR__4185
02ca4     0F 13 02 F6 | 	mov	arg01, local01
02ca8     90 22 B1 FD | 	call	#__system___string_cmp
02cac     00 FA 0D F2 | 	cmp	result1, #0 wz
02cb0     AC 03 90 AD |  if_e	jmp	#LR__0180
02cb4     21 01 00 FF 
02cb8     74 14 06 F6 | 	mov	arg02, ##@LR__4186
02cbc     0F 13 02 F6 | 	mov	arg01, local01
02cc0     78 22 B1 FD | 	call	#__system___string_cmp
02cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc8     9C 03 90 AD |  if_e	jmp	#LR__0181
02ccc     21 01 00 FF 
02cd0     78 14 06 F6 | 	mov	arg02, ##@LR__4187
02cd4     0F 13 02 F6 | 	mov	arg01, local01
02cd8     60 22 B1 FD | 	call	#__system___string_cmp
02cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce0     8C 03 90 AD |  if_e	jmp	#LR__0182
02ce4     21 01 00 FF 
02ce8     7D 14 06 F6 | 	mov	arg02, ##@LR__4188
02cec     0F 13 02 F6 | 	mov	arg01, local01
02cf0     48 22 B1 FD | 	call	#__system___string_cmp
02cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf8     7C 03 90 AD |  if_e	jmp	#LR__0183
02cfc     21 01 00 FF 
02d00     82 14 06 F6 | 	mov	arg02, ##@LR__4189
02d04     0F 13 02 F6 | 	mov	arg01, local01
02d08     30 22 B1 FD | 	call	#__system___string_cmp
02d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d10     6C 03 90 AD |  if_e	jmp	#LR__0184
02d14     21 01 00 FF 
02d18     88 14 06 F6 | 	mov	arg02, ##@LR__4190
02d1c     0F 13 02 F6 | 	mov	arg01, local01
02d20     18 22 B1 FD | 	call	#__system___string_cmp
02d24     00 FA 0D F2 | 	cmp	result1, #0 wz
02d28     5C 03 90 AD |  if_e	jmp	#LR__0185
02d2c     21 01 00 FF 
02d30     8F 14 06 F6 | 	mov	arg02, ##@LR__4191
02d34     0F 13 02 F6 | 	mov	arg01, local01
02d38     00 22 B1 FD | 	call	#__system___string_cmp
02d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d40     4C 03 90 AD |  if_e	jmp	#LR__0186
02d44     21 01 00 FF 
02d48     97 14 06 F6 | 	mov	arg02, ##@LR__4192
02d4c     0F 13 02 F6 | 	mov	arg01, local01
02d50     E8 21 B1 FD | 	call	#__system___string_cmp
02d54     00 FA 0D F2 | 	cmp	result1, #0 wz
02d58     3C 03 90 AD |  if_e	jmp	#LR__0187
02d5c     21 01 00 FF 
02d60     9B 14 06 F6 | 	mov	arg02, ##@LR__4193
02d64     0F 13 02 F6 | 	mov	arg01, local01
02d68     D0 21 B1 FD | 	call	#__system___string_cmp
02d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d70     2C 03 90 AD |  if_e	jmp	#LR__0188
02d74     21 01 00 FF 
02d78     A1 14 06 F6 | 	mov	arg02, ##@LR__4194
02d7c     0F 13 02 F6 | 	mov	arg01, local01
02d80     B8 21 B1 FD | 	call	#__system___string_cmp
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     1C 03 90 AD |  if_e	jmp	#LR__0189
02d8c     21 01 00 FF 
02d90     A7 14 06 F6 | 	mov	arg02, ##@LR__4195
02d94     0F 13 02 F6 | 	mov	arg01, local01
02d98     A0 21 B1 FD | 	call	#__system___string_cmp
02d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
02da0     0C 03 90 AD |  if_e	jmp	#LR__0190
02da4     21 01 00 FF 
02da8     AD 14 06 F6 | 	mov	arg02, ##@LR__4196
02dac     0F 13 02 F6 | 	mov	arg01, local01
02db0     88 21 B1 FD | 	call	#__system___string_cmp
02db4     00 FA 0D F2 | 	cmp	result1, #0 wz
02db8     FC 02 90 AD |  if_e	jmp	#LR__0191
02dbc     21 01 00 FF 
02dc0     B2 14 06 F6 | 	mov	arg02, ##@LR__4197
02dc4     0F 13 02 F6 | 	mov	arg01, local01
02dc8     70 21 B1 FD | 	call	#__system___string_cmp
02dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dd0     EC 02 90 AD |  if_e	jmp	#LR__0192
02dd4     21 01 00 FF 
02dd8     B6 14 06 F6 | 	mov	arg02, ##@LR__4198
02ddc     0F 13 02 F6 | 	mov	arg01, local01
02de0     58 21 B1 FD | 	call	#__system___string_cmp
02de4     00 FA 0D F2 | 	cmp	result1, #0 wz
02de8     DC 02 90 AD |  if_e	jmp	#LR__0193
02dec     21 01 00 FF 
02df0     BB 14 06 F6 | 	mov	arg02, ##@LR__4199
02df4     0F 13 02 F6 | 	mov	arg01, local01
02df8     40 21 B1 FD | 	call	#__system___string_cmp
02dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02e00     CC 02 90 AD |  if_e	jmp	#LR__0194
02e04     21 01 00 FF 
02e08     C1 14 06 F6 | 	mov	arg02, ##@LR__4200
02e0c     0F 13 02 F6 | 	mov	arg01, local01
02e10     28 21 B1 FD | 	call	#__system___string_cmp
02e14     00 FA 0D F2 | 	cmp	result1, #0 wz
02e18     BC 02 90 AD |  if_e	jmp	#LR__0195
02e1c     21 01 00 FF 
02e20     C6 14 06 F6 | 	mov	arg02, ##@LR__4201
02e24     0F 13 02 F6 | 	mov	arg01, local01
02e28     10 21 B1 FD | 	call	#__system___string_cmp
02e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e30     AC 02 90 AD |  if_e	jmp	#LR__0196
02e34     21 01 00 FF 
02e38     CB 14 06 F6 | 	mov	arg02, ##@LR__4202
02e3c     0F 13 02 F6 | 	mov	arg01, local01
02e40     F8 20 B1 FD | 	call	#__system___string_cmp
02e44     00 FA 0D F2 | 	cmp	result1, #0 wz
02e48     9C 02 90 AD |  if_e	jmp	#LR__0197
02e4c     21 01 00 FF 
02e50     D0 14 06 F6 | 	mov	arg02, ##@LR__4203
02e54     0F 13 02 F6 | 	mov	arg01, local01
02e58     E0 20 B1 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     8C 02 90 AD |  if_e	jmp	#LR__0198
02e64     21 01 00 FF 
02e68     D9 14 06 F6 | 	mov	arg02, ##@LR__4204
02e6c     0F 13 02 F6 | 	mov	arg01, local01
02e70     C8 20 B1 FD | 	call	#__system___string_cmp
02e74     00 FA 0D F2 | 	cmp	result1, #0 wz
02e78     7C 02 90 AD |  if_e	jmp	#LR__0199
02e7c     21 01 00 FF 
02e80     E0 14 06 F6 | 	mov	arg02, ##@LR__4205
02e84     0F 13 02 F6 | 	mov	arg01, local01
02e88     B0 20 B1 FD | 	call	#__system___string_cmp
02e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e90     6C 02 90 AD |  if_e	jmp	#LR__0200
02e94     21 01 00 FF 
02e98     E8 14 06 F6 | 	mov	arg02, ##@LR__4206
02e9c     0F 13 02 F6 | 	mov	arg01, local01
02ea0     98 20 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     5C 02 90 AD |  if_e	jmp	#LR__0201
02eac     21 01 00 FF 
02eb0     EB 14 06 F6 | 	mov	arg02, ##@LR__4207
02eb4     0F 13 02 F6 | 	mov	arg01, local01
02eb8     80 20 B1 FD | 	call	#__system___string_cmp
02ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec0     4C 02 90 AD |  if_e	jmp	#LR__0202
02ec4     21 01 00 FF 
02ec8     F0 14 06 F6 | 	mov	arg02, ##@LR__4208
02ecc     0F 13 02 F6 | 	mov	arg01, local01
02ed0     68 20 B1 FD | 	call	#__system___string_cmp
02ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ed8     3C 02 90 AD |  if_e	jmp	#LR__0203
02edc     21 01 00 FF 
02ee0     F5 14 06 F6 | 	mov	arg02, ##@LR__4209
02ee4     0F 13 02 F6 | 	mov	arg01, local01
02ee8     50 20 B1 FD | 	call	#__system___string_cmp
02eec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef0     2C 02 90 AD |  if_e	jmp	#LR__0204
02ef4     21 01 00 FF 
02ef8     FA 14 06 F6 | 	mov	arg02, ##@LR__4210
02efc     0F 13 02 F6 | 	mov	arg01, local01
02f00     38 20 B1 FD | 	call	#__system___string_cmp
02f04     00 FA 0D F2 | 	cmp	result1, #0 wz
02f08     1C 02 90 AD |  if_e	jmp	#LR__0205
02f0c     21 01 00 FF 
02f10     FE 14 06 F6 | 	mov	arg02, ##@LR__4211
02f14     0F 13 02 F6 | 	mov	arg01, local01
02f18     20 20 B1 FD | 	call	#__system___string_cmp
02f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f20     0C 02 90 AD |  if_e	jmp	#LR__0206
02f24     21 01 00 FF 
02f28     02 15 06 F6 | 	mov	arg02, ##@LR__4212
02f2c     0F 13 02 F6 | 	mov	arg01, local01
02f30     08 20 B1 FD | 	call	#__system___string_cmp
02f34     00 FA 0D F2 | 	cmp	result1, #0 wz
02f38     FC 01 90 AD |  if_e	jmp	#LR__0207
02f3c     21 01 00 FF 
02f40     07 15 06 F6 | 	mov	arg02, ##@LR__4213
02f44     0F 13 02 F6 | 	mov	arg01, local01
02f48     F0 1F B1 FD | 	call	#__system___string_cmp
02f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f50     EC 01 90 AD |  if_e	jmp	#LR__0208
02f54     21 01 00 FF 
02f58     0D 15 06 F6 | 	mov	arg02, ##@LR__4214
02f5c     0F 13 02 F6 | 	mov	arg01, local01
02f60     D8 1F B1 FD | 	call	#__system___string_cmp
02f64     00 FA 0D F2 | 	cmp	result1, #0 wz
02f68     DC 01 90 AD |  if_e	jmp	#LR__0209
02f6c     21 01 00 FF 
02f70     11 15 06 F6 | 	mov	arg02, ##@LR__4215
02f74     0F 13 02 F6 | 	mov	arg01, local01
02f78     C0 1F B1 FD | 	call	#__system___string_cmp
02f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
02f80     CC 01 90 AD |  if_e	jmp	#LR__0210
02f84     21 01 00 FF 
02f88     16 15 06 F6 | 	mov	arg02, ##@LR__4216
02f8c     0F 13 02 F6 | 	mov	arg01, local01
02f90     A8 1F B1 FD | 	call	#__system___string_cmp
02f94     00 FA 0D F2 | 	cmp	result1, #0 wz
02f98     BC 01 90 AD |  if_e	jmp	#LR__0211
02f9c     21 01 00 FF 
02fa0     1B 15 06 F6 | 	mov	arg02, ##@LR__4217
02fa4     0F 13 02 F6 | 	mov	arg01, local01
02fa8     90 1F B1 FD | 	call	#__system___string_cmp
02fac     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb0     AC 01 90 AD |  if_e	jmp	#LR__0212
02fb4     21 01 00 FF 
02fb8     21 15 06 F6 | 	mov	arg02, ##@LR__4218
02fbc     0F 13 02 F6 | 	mov	arg01, local01
02fc0     78 1F B1 FD | 	call	#__system___string_cmp
02fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
02fc8     9C 01 90 AD |  if_e	jmp	#LR__0213
02fcc     21 01 00 FF 
02fd0     28 15 06 F6 | 	mov	arg02, ##@LR__4219
02fd4     0F 13 02 F6 | 	mov	arg01, local01
02fd8     60 1F B1 FD | 	call	#__system___string_cmp
02fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe0     8C 01 90 AD |  if_e	jmp	#LR__0214
02fe4     21 01 00 FF 
02fe8     2E 15 06 F6 | 	mov	arg02, ##@LR__4220
02fec     0F 13 02 F6 | 	mov	arg01, local01
02ff0     48 1F B1 FD | 	call	#__system___string_cmp
02ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff8     7C 01 90 AD |  if_e	jmp	#LR__0215
02ffc     21 01 00 FF 
03000     38 15 06 F6 | 	mov	arg02, ##@LR__4221
03004     0F 13 02 F6 | 	mov	arg01, local01
03008     30 1F B1 FD | 	call	#__system___string_cmp
0300c     00 FA 0D F2 | 	cmp	result1, #0 wz
03010     6C 01 90 AD |  if_e	jmp	#LR__0216
03014     21 01 00 FF 
03018     3F 15 06 F6 | 	mov	arg02, ##@LR__4222
0301c     0F 13 02 F6 | 	mov	arg01, local01
03020     18 1F B1 FD | 	call	#__system___string_cmp
03024     00 FA 0D F2 | 	cmp	result1, #0 wz
03028     5C 01 90 AD |  if_e	jmp	#LR__0217
0302c     21 01 00 FF 
03030     49 15 06 F6 | 	mov	arg02, ##@LR__4223
03034     0F 13 02 F6 | 	mov	arg01, local01
03038     00 1F B1 FD | 	call	#__system___string_cmp
0303c     00 FA 0D F2 | 	cmp	result1, #0 wz
03040     4C 01 90 AD |  if_e	jmp	#LR__0218
03044     21 01 00 FF 
03048     4E 15 06 F6 | 	mov	arg02, ##@LR__4224
0304c     0F 13 02 F6 | 	mov	arg01, local01
03050     E8 1E B1 FD | 	call	#__system___string_cmp
03054     00 FA 0D F2 | 	cmp	result1, #0 wz
03058     3C 01 90 AD |  if_e	jmp	#LR__0219
0305c     40 01 90 FD | 	jmp	#LR__0220
03060                 | LR__0180
03060     40 FA 05 F6 | 	mov	result1, #64
03064     3C 01 90 FD | 	jmp	#LR__0221
03068                 | LR__0181
03068     41 FA 05 F6 | 	mov	result1, #65
0306c     34 01 90 FD | 	jmp	#LR__0221
03070                 | LR__0182
03070     42 FA 05 F6 | 	mov	result1, #66
03074     2C 01 90 FD | 	jmp	#LR__0221
03078                 | LR__0183
03078     43 FA 05 F6 | 	mov	result1, #67
0307c     24 01 90 FD | 	jmp	#LR__0221
03080                 | LR__0184
03080     44 FA 05 F6 | 	mov	result1, #68
03084     1C 01 90 FD | 	jmp	#LR__0221
03088                 | LR__0185
03088     45 FA 05 F6 | 	mov	result1, #69
0308c     14 01 90 FD | 	jmp	#LR__0221
03090                 | LR__0186
03090     46 FA 05 F6 | 	mov	result1, #70
03094     0C 01 90 FD | 	jmp	#LR__0221
03098                 | LR__0187
03098     47 FA 05 F6 | 	mov	result1, #71
0309c     04 01 90 FD | 	jmp	#LR__0221
030a0                 | LR__0188
030a0     48 FA 05 F6 | 	mov	result1, #72
030a4     FC 00 90 FD | 	jmp	#LR__0221
030a8                 | LR__0189
030a8     49 FA 05 F6 | 	mov	result1, #73
030ac     F4 00 90 FD | 	jmp	#LR__0221
030b0                 | LR__0190
030b0     44 FA 05 F6 | 	mov	result1, #68
030b4     EC 00 90 FD | 	jmp	#LR__0221
030b8                 | LR__0191
030b8     4C FA 05 F6 | 	mov	result1, #76
030bc     E4 00 90 FD | 	jmp	#LR__0221
030c0                 | LR__0192
030c0     4D FA 05 F6 | 	mov	result1, #77
030c4     DC 00 90 FD | 	jmp	#LR__0221
030c8                 | LR__0193
030c8     4E FA 05 F6 | 	mov	result1, #78
030cc     D4 00 90 FD | 	jmp	#LR__0221
030d0                 | LR__0194
030d0     50 FA 05 F6 | 	mov	result1, #80
030d4     CC 00 90 FD | 	jmp	#LR__0221
030d8                 | LR__0195
030d8     51 FA 05 F6 | 	mov	result1, #81
030dc     C4 00 90 FD | 	jmp	#LR__0221
030e0                 | LR__0196
030e0     52 FA 05 F6 | 	mov	result1, #82
030e4     BC 00 90 FD | 	jmp	#LR__0221
030e8                 | LR__0197
030e8     59 FA 05 F6 | 	mov	result1, #89
030ec     B4 00 90 FD | 	jmp	#LR__0221
030f0                 | LR__0198
030f0     55 FA 05 F6 | 	mov	result1, #85
030f4     AC 00 90 FD | 	jmp	#LR__0221
030f8                 | LR__0199
030f8     56 FA 05 F6 | 	mov	result1, #86
030fc     A4 00 90 FD | 	jmp	#LR__0221
03100                 | LR__0200
03100     57 FA 05 F6 | 	mov	result1, #87
03104     9C 00 90 FD | 	jmp	#LR__0221
03108                 | LR__0201
03108     58 FA 05 F6 | 	mov	result1, #88
0310c     94 00 90 FD | 	jmp	#LR__0221
03110                 | LR__0202
03110     5A FA 05 F6 | 	mov	result1, #90
03114     8C 00 90 FD | 	jmp	#LR__0221
03118                 | LR__0203
03118     5B FA 05 F6 | 	mov	result1, #91
0311c     84 00 90 FD | 	jmp	#LR__0221
03120                 | LR__0204
03120     5C FA 05 F6 | 	mov	result1, #92
03124     7C 00 90 FD | 	jmp	#LR__0221
03128                 | LR__0205
03128     5D FA 05 F6 | 	mov	result1, #93
0312c     74 00 90 FD | 	jmp	#LR__0221
03130                 | LR__0206
03130     4A FA 05 F6 | 	mov	result1, #74
03134     6C 00 90 FD | 	jmp	#LR__0221
03138                 | LR__0207
03138     4B FA 05 F6 | 	mov	result1, #75
0313c     64 00 90 FD | 	jmp	#LR__0221
03140                 | LR__0208
03140     5E FA 05 F6 | 	mov	result1, #94
03144     5C 00 90 FD | 	jmp	#LR__0221
03148                 | LR__0209
03148     5F FA 05 F6 | 	mov	result1, #95
0314c     54 00 90 FD | 	jmp	#LR__0221
03150                 | LR__0210
03150     60 FA 05 F6 | 	mov	result1, #96
03154     4C 00 90 FD | 	jmp	#LR__0221
03158                 | LR__0211
03158     61 FA 05 F6 | 	mov	result1, #97
0315c     44 00 90 FD | 	jmp	#LR__0221
03160                 | LR__0212
03160     63 FA 05 F6 | 	mov	result1, #99
03164     3C 00 90 FD | 	jmp	#LR__0221
03168                 | LR__0213
03168     68 FA 05 F6 | 	mov	result1, #104
0316c     34 00 90 FD | 	jmp	#LR__0221
03170                 | LR__0214
03170     69 FA 05 F6 | 	mov	result1, #105
03174     2C 00 90 FD | 	jmp	#LR__0221
03178                 | LR__0215
03178     6C FA 05 F6 | 	mov	result1, #108
0317c     24 00 90 FD | 	jmp	#LR__0221
03180                 | LR__0216
03180     6D FA 05 F6 | 	mov	result1, #109
03184     1C 00 90 FD | 	jmp	#LR__0221
03188                 | LR__0217
03188     70 FA 05 F6 | 	mov	result1, #112
0318c     14 00 90 FD | 	jmp	#LR__0221
03190                 | LR__0218
03190     71 FA 05 F6 | 	mov	result1, #113
03194     0C 00 90 FD | 	jmp	#LR__0221
03198                 | LR__0219
03198     72 FA 05 F6 | 	mov	result1, #114
0319c     04 00 90 FD | 	jmp	#LR__0221
031a0                 | LR__0220
031a0     00 FA 05 F6 | 	mov	result1, #0
031a4                 | LR__0221
031a4     A7 F0 03 F6 | 	mov	ptra, fp
031a8     B2 00 A0 FD | 	call	#popregs_
031ac                 | _iscommand_ret
031ac     2D 00 64 FD | 	ret
031b0                 | 
031b0                 | ' 
031b0                 | ' function isfunction(s as string) as ubyte
031b0                 | _isfunction
031b0     01 4A 05 F6 | 	mov	COUNT_, #1
031b4     A8 00 A0 FD | 	call	#pushregs_
031b8                 | ' 
031b8                 | ' select case s
031b8     09 1F 02 F6 | 	mov	local01, arg01
031bc     21 01 00 FF 
031c0     52 15 06 F6 | 	mov	arg02, ##@LR__4225
031c4     0F 13 02 F6 | 	mov	arg01, local01
031c8     70 1D B1 FD | 	call	#__system___string_cmp
031cc     00 FA 0D F2 | 	cmp	result1, #0 wz
031d0     DC 00 90 AD |  if_e	jmp	#LR__0230
031d4     21 01 00 FF 
031d8     56 15 06 F6 | 	mov	arg02, ##@LR__4226
031dc     0F 13 02 F6 | 	mov	arg01, local01
031e0     58 1D B1 FD | 	call	#__system___string_cmp
031e4     00 FA 0D F2 | 	cmp	result1, #0 wz
031e8     CC 00 90 AD |  if_e	jmp	#LR__0231
031ec     21 01 00 FF 
031f0     5D 15 06 F6 | 	mov	arg02, ##@LR__4227
031f4     0F 13 02 F6 | 	mov	arg01, local01
031f8     40 1D B1 FD | 	call	#__system___string_cmp
031fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03200     BC 00 90 AD |  if_e	jmp	#LR__0232
03204     21 01 00 FF 
03208     64 15 06 F6 | 	mov	arg02, ##@LR__4228
0320c     0F 13 02 F6 | 	mov	arg01, local01
03210     28 1D B1 FD | 	call	#__system___string_cmp
03214     00 FA 0D F2 | 	cmp	result1, #0 wz
03218     AC 00 90 AD |  if_e	jmp	#LR__0233
0321c     21 01 00 FF 
03220     6B 15 06 F6 | 	mov	arg02, ##@LR__4229
03224     0F 13 02 F6 | 	mov	arg01, local01
03228     10 1D B1 FD | 	call	#__system___string_cmp
0322c     00 FA 0D F2 | 	cmp	result1, #0 wz
03230     9C 00 90 AD |  if_e	jmp	#LR__0234
03234     21 01 00 FF 
03238     72 15 06 F6 | 	mov	arg02, ##@LR__4230
0323c     0F 13 02 F6 | 	mov	arg01, local01
03240     F8 1C B1 FD | 	call	#__system___string_cmp
03244     00 FA 0D F2 | 	cmp	result1, #0 wz
03248     8C 00 90 AD |  if_e	jmp	#LR__0235
0324c     21 01 00 FF 
03250     7A 15 06 F6 | 	mov	arg02, ##@LR__4231
03254     0F 13 02 F6 | 	mov	arg01, local01
03258     E0 1C B1 FD | 	call	#__system___string_cmp
0325c     00 FA 0D F2 | 	cmp	result1, #0 wz
03260     7C 00 90 AD |  if_e	jmp	#LR__0236
03264     21 01 00 FF 
03268     7E 15 06 F6 | 	mov	arg02, ##@LR__4232
0326c     0F 13 02 F6 | 	mov	arg01, local01
03270     C8 1C B1 FD | 	call	#__system___string_cmp
03274     00 FA 0D F2 | 	cmp	result1, #0 wz
03278     6C 00 90 AD |  if_e	jmp	#LR__0237
0327c     21 01 00 FF 
03280     84 15 06 F6 | 	mov	arg02, ##@LR__4233
03284     0F 13 02 F6 | 	mov	arg01, local01
03288     B0 1C B1 FD | 	call	#__system___string_cmp
0328c     00 FA 0D F2 | 	cmp	result1, #0 wz
03290     5C 00 90 AD |  if_e	jmp	#LR__0238
03294     21 01 00 FF 
03298     8A 15 06 F6 | 	mov	arg02, ##@LR__4234
0329c     0F 13 02 F6 | 	mov	arg01, local01
032a0     98 1C B1 FD | 	call	#__system___string_cmp
032a4     00 FA 0D F2 | 	cmp	result1, #0 wz
032a8     4C 00 90 AD |  if_e	jmp	#LR__0239
032ac     50 00 90 FD | 	jmp	#LR__0240
032b0                 | LR__0230
032b0     54 FA 05 F6 | 	mov	result1, #84
032b4     4C 00 90 FD | 	jmp	#LR__0241
032b8                 | LR__0231
032b8     64 FA 05 F6 | 	mov	result1, #100
032bc     44 00 90 FD | 	jmp	#LR__0241
032c0                 | LR__0232
032c0     65 FA 05 F6 | 	mov	result1, #101
032c4     3C 00 90 FD | 	jmp	#LR__0241
032c8                 | LR__0233
032c8     66 FA 05 F6 | 	mov	result1, #102
032cc     34 00 90 FD | 	jmp	#LR__0241
032d0                 | LR__0234
032d0     67 FA 05 F6 | 	mov	result1, #103
032d4     2C 00 90 FD | 	jmp	#LR__0241
032d8                 | LR__0235
032d8     62 FA 05 F6 | 	mov	result1, #98
032dc     24 00 90 FD | 	jmp	#LR__0241
032e0                 | LR__0236
032e0     6B FA 05 F6 | 	mov	result1, #107
032e4     1C 00 90 FD | 	jmp	#LR__0241
032e8                 | LR__0237
032e8     6A FA 05 F6 | 	mov	result1, #106
032ec     14 00 90 FD | 	jmp	#LR__0241
032f0                 | LR__0238
032f0     6E FA 05 F6 | 	mov	result1, #110
032f4     0C 00 90 FD | 	jmp	#LR__0241
032f8                 | LR__0239
032f8     6F FA 05 F6 | 	mov	result1, #111
032fc     04 00 90 FD | 	jmp	#LR__0241
03300                 | LR__0240
03300     00 FA 05 F6 | 	mov	result1, #0
03304                 | LR__0241
03304     A7 F0 03 F6 | 	mov	ptra, fp
03308     B2 00 A0 FD | 	call	#popregs_
0330c                 | _isfunction_ret
0330c     2D 00 64 FD | 	ret
03310                 | 
03310                 | ' 
03310                 | ' function isname(s as string) as boolean
03310                 | _isname
03310     0D 4A 05 F6 | 	mov	COUNT_, #13
03314     A8 00 A0 FD | 	call	#pushregs_
03318     09 1F 02 F6 | 	mov	local01, arg01
0331c     09 21 02 F6 | 	mov	local02, arg01
03320     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
03324                 | LR__0250
03324     10 FB C9 FA | 	rdbyte	result1, local02 wz
03328     01 20 06 51 |  if_ne	add	local02, #1
0332c     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
03330                 | LR__0251
03330     09 21 82 F1 | 	sub	local02, arg01
03334     10 FB 01 F6 | 	mov	result1, local02
03338     FD 22 0A F6 | 	mov	local03, result1 wz
0333c     00 FA 05 A6 |  if_e	mov	result1, #0
03340     34 02 90 AD |  if_e	jmp	#LR__0263
03344     0F 13 02 F6 | 	mov	arg01, local01
03348     01 14 06 F6 | 	mov	arg02, #1
0334c     01 16 06 F6 | 	mov	arg03, #1
03350     E8 3C B1 FD | 	call	#__system__Mid_S
03354     FD 24 02 F6 | 	mov	local04, result1
03358                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03358     21 01 00 FF 
0335c     93 15 06 F6 | 	mov	arg02, ##@LR__4235
03360     12 13 02 F6 | 	mov	arg01, local04
03364     D4 1B B1 FD | 	call	#__system___string_cmp
03368     00 FA 55 F2 | 	cmps	result1, #0 wc
0336c     18 00 90 CD |  if_b	jmp	#LR__0252
03370     21 01 00 FF 
03374     95 15 06 F6 | 	mov	arg02, ##@LR__4236
03378     12 13 02 F6 | 	mov	arg01, local04
0337c     BC 1B B1 FD | 	call	#__system___string_cmp
03380     01 FA 55 F2 | 	cmps	result1, #1 wc
03384     1C 00 90 CD |  if_b	jmp	#LR__0253
03388                 | LR__0252
03388     21 01 00 FF 
0338c     97 15 06 F6 | 	mov	arg02, ##@LR__4237
03390     12 13 02 F6 | 	mov	arg01, local04
03394     A4 1B B1 FD | 	call	#__system___string_cmp
03398     00 FA 0D F2 | 	cmp	result1, #0 wz
0339c     00 FA 05 56 |  if_ne	mov	result1, #0
033a0     D4 01 90 5D |  if_ne	jmp	#LR__0263
033a4                 | LR__0253
033a4                 | ' if l>2 then 
033a4     03 22 56 F2 | 	cmps	local03, #3 wc
033a8     C8 01 90 CD |  if_b	jmp	#LR__0262
033ac                 | '   for i=2 to l
033ac     02 26 06 F6 | 	mov	local05, #2
033b0     11 29 02 F6 | 	mov	local06, local03
033b4     01 28 06 F1 | 	add	local06, #1
033b8                 | LR__0254
033b8     14 27 52 F2 | 	cmps	local05, local06 wc
033bc     B4 01 90 3D |  if_ae	jmp	#LR__0261
033c0     0F 13 02 F6 | 	mov	arg01, local01
033c4     13 15 02 F6 | 	mov	arg02, local05
033c8     01 16 06 F6 | 	mov	arg03, #1
033cc     6C 3C B1 FD | 	call	#__system__Mid_S
033d0     FD 24 02 F6 | 	mov	local04, result1
033d4                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
033d4     11 27 52 F2 | 	cmps	local05, local03 wc
033d8     9C 00 90 3D |  if_ae	jmp	#LR__0257
033dc     21 01 00 FF 
033e0     99 15 06 F6 | 	mov	arg02, ##@LR__4238
033e4     12 13 02 F6 | 	mov	arg01, local04
033e8     50 1B B1 FD | 	call	#__system___string_cmp
033ec     00 FA 55 F2 | 	cmps	result1, #0 wc
033f0     18 00 90 CD |  if_b	jmp	#LR__0255
033f4     21 01 00 FF 
033f8     9B 15 06 F6 | 	mov	arg02, ##@LR__4239
033fc     12 13 02 F6 | 	mov	arg01, local04
03400     38 1B B1 FD | 	call	#__system___string_cmp
03404     01 FA 55 F2 | 	cmps	result1, #1 wc
03408     6C 00 90 CD |  if_b	jmp	#LR__0257
0340c                 | LR__0255
0340c     21 01 00 FF 
03410     9D 15 06 F6 | 	mov	arg02, ##@LR__4240
03414     12 13 02 F6 | 	mov	arg01, local04
03418     20 1B B1 FD | 	call	#__system___string_cmp
0341c     00 FA 55 F2 | 	cmps	result1, #0 wc
03420     18 00 90 CD |  if_b	jmp	#LR__0256
03424     21 01 00 FF 
03428     9F 15 06 F6 | 	mov	arg02, ##@LR__4241
0342c     12 13 02 F6 | 	mov	arg01, local04
03430     08 1B B1 FD | 	call	#__system___string_cmp
03434     01 FA 55 F2 | 	cmps	result1, #1 wc
03438     3C 00 90 CD |  if_b	jmp	#LR__0257
0343c                 | LR__0256
0343c     21 01 00 FF 
03440     A1 2B 06 F6 | 	mov	local07, ##@LR__4242
03444     12 13 02 F6 | 	mov	arg01, local04
03448     15 15 02 F6 | 	mov	arg02, local07
0344c     EC 1A B1 FD | 	call	#__system___string_cmp
03450     00 FA 0D F2 | 	cmp	result1, #0 wz
03454     20 00 90 AD |  if_e	jmp	#LR__0257
03458     21 01 00 FF 
0345c     A3 2D 06 F6 | 	mov	local08, ##@LR__4243
03460     12 13 02 F6 | 	mov	arg01, local04
03464     16 15 02 F6 | 	mov	arg02, local08
03468     D0 1A B1 FD | 	call	#__system___string_cmp
0346c     FD 2E 0A F6 | 	mov	local09, result1 wz
03470     00 FA 05 56 |  if_ne	mov	result1, #0
03474     00 01 90 5D |  if_ne	jmp	#LR__0263
03478                 | LR__0257
03478                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03478     11 27 0A F2 | 	cmp	local05, local03 wz
0347c     EC 00 90 5D |  if_ne	jmp	#LR__0260
03480     21 01 00 FF 
03484     A5 31 06 F6 | 	mov	local10, ##@LR__4244
03488     12 13 02 F6 | 	mov	arg01, local04
0348c     18 15 02 F6 | 	mov	arg02, local10
03490     A8 1A B1 FD | 	call	#__system___string_cmp
03494     FD 32 02 F6 | 	mov	local11, result1
03498     00 32 56 F2 | 	cmps	local11, #0 wc
0349c     1C 00 90 CD |  if_b	jmp	#LR__0258
034a0     21 01 00 FF 
034a4     A7 15 06 F6 | 	mov	arg02, ##@LR__4245
034a8     12 13 02 F6 | 	mov	arg01, local04
034ac     8C 1A B1 FD | 	call	#__system___string_cmp
034b0     FD 30 02 F6 | 	mov	local10, result1
034b4     01 30 56 F2 | 	cmps	local10, #1 wc
034b8     B0 00 90 CD |  if_b	jmp	#LR__0260
034bc                 | LR__0258
034bc     21 01 00 FF 
034c0     A9 15 06 F6 | 	mov	arg02, ##@LR__4246
034c4     12 13 02 F6 | 	mov	arg01, local04
034c8     70 1A B1 FD | 	call	#__system___string_cmp
034cc     00 FA 55 F2 | 	cmps	result1, #0 wc
034d0     1C 00 90 CD |  if_b	jmp	#LR__0259
034d4     21 01 00 FF 
034d8     AB 2F 06 F6 | 	mov	local09, ##@LR__4247
034dc     12 13 02 F6 | 	mov	arg01, local04
034e0     17 15 02 F6 | 	mov	arg02, local09
034e4     54 1A B1 FD | 	call	#__system___string_cmp
034e8     01 FA 55 F2 | 	cmps	result1, #1 wc
034ec     7C 00 90 CD |  if_b	jmp	#LR__0260
034f0                 | LR__0259
034f0     21 01 00 FF 
034f4     AD 2F 06 F6 | 	mov	local09, ##@LR__4248
034f8     12 13 02 F6 | 	mov	arg01, local04
034fc     17 15 02 F6 | 	mov	arg02, local09
03500     38 1A B1 FD | 	call	#__system___string_cmp
03504     00 FA 4D F2 | 	cmps	result1, #0 wz
03508     60 00 90 AD |  if_e	jmp	#LR__0260
0350c     21 01 00 FF 
03510     AF 2D 06 F6 | 	mov	local08, ##@LR__4249
03514     12 13 02 F6 | 	mov	arg01, local04
03518     16 15 02 F6 | 	mov	arg02, local08
0351c     1C 1A B1 FD | 	call	#__system___string_cmp
03520     FD 2E 0A F6 | 	mov	local09, result1 wz
03524     44 00 90 AD |  if_e	jmp	#LR__0260
03528     21 01 00 FF 
0352c     B1 35 06 F6 | 	mov	local12, ##@LR__4250
03530     1A 2D 02 F6 | 	mov	local08, local12
03534     12 13 02 F6 | 	mov	arg01, local04
03538     16 15 02 F6 | 	mov	arg02, local08
0353c     FC 19 B1 FD | 	call	#__system___string_cmp
03540     FD 2A 0A F6 | 	mov	local07, result1 wz
03544     24 00 90 AD |  if_e	jmp	#LR__0260
03548     21 01 00 FF 
0354c     B3 37 06 F6 | 	mov	local13, ##@LR__4251
03550     1B 35 02 F6 | 	mov	local12, local13
03554     12 13 02 F6 | 	mov	arg01, local04
03558     1A 15 02 F6 | 	mov	arg02, local12
0355c     DC 19 B1 FD | 	call	#__system___string_cmp
03560     FD 2C 0A F6 | 	mov	local08, result1 wz
03564     00 FA 05 56 |  if_ne	mov	result1, #0
03568     0C 00 90 5D |  if_ne	jmp	#LR__0263
0356c                 | LR__0260
0356c     01 26 06 F1 | 	add	local05, #1
03570     44 FE 9F FD | 	jmp	#LR__0254
03574                 | LR__0261
03574                 | LR__0262
03574                 | ' return true
03574     01 FA 65 F6 | 	neg	result1, #1
03578                 | LR__0263
03578     A7 F0 03 F6 | 	mov	ptra, fp
0357c     B2 00 A0 FD | 	call	#popregs_
03580                 | _isname_ret
03580     2D 00 64 FD | 	ret
03584                 | 
03584                 | ' 
03584                 | ' function isnum(s as string) as boolean
03584                 | _isnum
03584     0D 4A 05 F6 | 	mov	COUNT_, #13
03588     A8 00 A0 FD | 	call	#pushregs_
0358c     09 1F 02 F6 | 	mov	local01, arg01
03590     00 20 06 F6 | 	mov	local02, #0
03594     00 22 06 F6 | 	mov	local03, #0
03598     0F 13 02 F6 | 	mov	arg01, local01
0359c     09 25 02 F6 | 	mov	local04, arg01
035a0     97 06 48 FB | 	callpa	#(@LR__0271-@LR__0270)>>2,fcache_load_ptr_
035a4                 | LR__0270
035a4     12 FB C9 FA | 	rdbyte	result1, local04 wz
035a8     01 24 06 51 |  if_ne	add	local04, #1
035ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0270
035b0                 | LR__0271
035b0     09 25 82 F1 | 	sub	local04, arg01
035b4     12 FB 01 F6 | 	mov	result1, local04
035b8     FD 26 0A F6 | 	mov	local05, result1 wz
035bc     00 FA 05 A6 |  if_e	mov	result1, #0
035c0     8C 02 90 AD |  if_e	jmp	#LR__0282
035c4     0F 13 02 F6 | 	mov	arg01, local01
035c8     01 14 06 F6 | 	mov	arg02, #1
035cc     01 16 06 F6 | 	mov	arg03, #1
035d0     68 3A B1 FD | 	call	#__system__Mid_S
035d4     FD 28 02 F6 | 	mov	local06, result1
035d8                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
035d8     21 01 00 FF 
035dc     B5 15 06 F6 | 	mov	arg02, ##@LR__4252
035e0     14 13 02 F6 | 	mov	arg01, local06
035e4     54 19 B1 FD | 	call	#__system___string_cmp
035e8     00 FA 55 F2 | 	cmps	result1, #0 wc
035ec     18 00 90 CD |  if_b	jmp	#LR__0272
035f0     21 01 00 FF 
035f4     B7 15 06 F6 | 	mov	arg02, ##@LR__4253
035f8     14 13 02 F6 | 	mov	arg01, local06
035fc     3C 19 B1 FD | 	call	#__system___string_cmp
03600     01 FA 55 F2 | 	cmps	result1, #1 wc
03604     78 00 90 CD |  if_b	jmp	#LR__0273
03608                 | LR__0272
03608     21 01 00 FF 
0360c     B9 15 06 F6 | 	mov	arg02, ##@LR__4254
03610     14 13 02 F6 | 	mov	arg01, local06
03614     24 19 B1 FD | 	call	#__system___string_cmp
03618     00 FA 0D F2 | 	cmp	result1, #0 wz
0361c     60 00 90 AD |  if_e	jmp	#LR__0273
03620     21 01 00 FF 
03624     BB 2B 06 F6 | 	mov	local07, ##@LR__4255
03628     14 13 02 F6 | 	mov	arg01, local06
0362c     15 15 02 F6 | 	mov	arg02, local07
03630     08 19 B1 FD | 	call	#__system___string_cmp
03634     00 FA 0D F2 | 	cmp	result1, #0 wz
03638     44 00 90 AD |  if_e	jmp	#LR__0273
0363c     21 01 00 FF 
03640     BD 2D 06 F6 | 	mov	local08, ##@LR__4256
03644     16 2B 02 F6 | 	mov	local07, local08
03648     14 13 02 F6 | 	mov	arg01, local06
0364c     15 15 02 F6 | 	mov	arg02, local07
03650     E8 18 B1 FD | 	call	#__system___string_cmp
03654     00 FA 4D F2 | 	cmps	result1, #0 wz
03658     24 00 90 AD |  if_e	jmp	#LR__0273
0365c     21 01 00 FF 
03660     BF 2F 06 F6 | 	mov	local09, ##@LR__4257
03664     17 2D 02 F6 | 	mov	local08, local09
03668     14 13 02 F6 | 	mov	arg01, local06
0366c     16 15 02 F6 | 	mov	arg02, local08
03670     C8 18 B1 FD | 	call	#__system___string_cmp
03674     FD 2A 0A F6 | 	mov	local07, result1 wz
03678     00 FA 05 56 |  if_ne	mov	result1, #0
0367c     D0 01 90 5D |  if_ne	jmp	#LR__0282
03680                 | LR__0273
03680                 | ' if m$="." then ds=1
03680     21 01 00 FF 
03684     C1 15 06 F6 | 	mov	arg02, ##@LR__4258
03688     14 13 02 F6 | 	mov	arg01, local06
0368c     AC 18 B1 FD | 	call	#__system___string_cmp
03690     00 FA 0D F2 | 	cmp	result1, #0 wz
03694     01 20 06 A6 |  if_e	mov	local02, #1
03698                 | ' if l>1 then 
03698     02 26 56 F2 | 	cmps	local05, #2 wc
0369c     AC 01 90 CD |  if_b	jmp	#LR__0281
036a0                 | '   for i=2 to l
036a0     02 30 06 F6 | 	mov	local10, #2
036a4     13 33 02 F6 | 	mov	local11, local05
036a8     01 32 06 F1 | 	add	local11, #1
036ac                 | LR__0274
036ac     19 31 52 F2 | 	cmps	local10, local11 wc
036b0     98 01 90 3D |  if_ae	jmp	#LR__0280
036b4     0F 13 02 F6 | 	mov	arg01, local01
036b8     18 15 02 F6 | 	mov	arg02, local10
036bc     01 16 06 F6 | 	mov	arg03, #1
036c0     78 39 B1 FD | 	call	#__system__Mid_S
036c4     FD 28 02 F6 | 	mov	local06, result1
036c8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
036c8     21 01 00 FF 
036cc     C3 15 06 F6 | 	mov	arg02, ##@LR__4259
036d0     14 13 02 F6 | 	mov	arg01, local06
036d4     64 18 B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0275
036e0     21 01 00 FF 
036e4     C5 15 06 F6 | 	mov	arg02, ##@LR__4260
036e8     14 13 02 F6 | 	mov	arg01, local06
036ec     4C 18 B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     98 00 90 CD |  if_b	jmp	#LR__0276
036f8                 | LR__0275
036f8     21 01 00 FF 
036fc     C7 15 06 F6 | 	mov	arg02, ##@LR__4261
03700     14 13 02 F6 | 	mov	arg01, local06
03704     34 18 B1 FD | 	call	#__system___string_cmp
03708     00 FA 0D F2 | 	cmp	result1, #0 wz
0370c     80 00 90 AD |  if_e	jmp	#LR__0276
03710     21 01 00 FF 
03714     C9 2B 06 F6 | 	mov	local07, ##@LR__4262
03718     14 13 02 F6 | 	mov	arg01, local06
0371c     15 15 02 F6 | 	mov	arg02, local07
03720     18 18 B1 FD | 	call	#__system___string_cmp
03724     00 FA 4D F2 | 	cmps	result1, #0 wz
03728     64 00 90 AD |  if_e	jmp	#LR__0276
0372c     21 01 00 FF 
03730     CB 2D 06 F6 | 	mov	local08, ##@LR__4263
03734     16 2B 02 F6 | 	mov	local07, local08
03738     14 13 02 F6 | 	mov	arg01, local06
0373c     15 15 02 F6 | 	mov	arg02, local07
03740     F8 17 B1 FD | 	call	#__system___string_cmp
03744     FD 34 0A F6 | 	mov	local12, result1 wz
03748     44 00 90 AD |  if_e	jmp	#LR__0276
0374c     21 01 00 FF 
03750     CD 2F 06 F6 | 	mov	local09, ##@LR__4264
03754     17 2D 02 F6 | 	mov	local08, local09
03758     14 13 02 F6 | 	mov	arg01, local06
0375c     16 15 02 F6 | 	mov	arg02, local08
03760     D8 17 B1 FD | 	call	#__system___string_cmp
03764     FD 2A 0A F6 | 	mov	local07, result1 wz
03768     24 00 90 AD |  if_e	jmp	#LR__0276
0376c     21 01 00 FF 
03770     CF 37 06 F6 | 	mov	local13, ##@LR__4265
03774     1B 2F 02 F6 | 	mov	local09, local13
03778     14 13 02 F6 | 	mov	arg01, local06
0377c     17 15 02 F6 | 	mov	arg02, local09
03780     B8 17 B1 FD | 	call	#__system___string_cmp
03784     FD 2C 0A F6 | 	mov	local08, result1 wz
03788     00 FA 05 56 |  if_ne	mov	result1, #0
0378c     C0 00 90 5D |  if_ne	jmp	#LR__0282
03790                 | LR__0276
03790                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03790     21 01 00 FF 
03794     D1 15 06 F6 | 	mov	arg02, ##@LR__4266
03798     14 13 02 F6 | 	mov	arg01, local06
0379c     9C 17 B1 FD | 	call	#__system___string_cmp
037a0     00 FA 0D F2 | 	cmp	result1, #0 wz
037a4     38 00 90 5D |  if_ne	jmp	#LR__0277
037a8     18 15 02 F6 | 	mov	arg02, local10
037ac     01 14 86 F1 | 	sub	arg02, #1
037b0     0F 13 02 F6 | 	mov	arg01, local01
037b4     01 16 06 F6 | 	mov	arg03, #1
037b8     80 38 B1 FD | 	call	#__system__Mid_S
037bc     FD 12 02 F6 | 	mov	arg01, result1
037c0     14 3A B1 FD | 	call	#__system__LCase_S
037c4     FD 12 02 F6 | 	mov	arg01, result1
037c8     21 01 00 FF 
037cc     D3 15 06 F6 | 	mov	arg02, ##@LR__4267
037d0     68 17 B1 FD | 	call	#__system___string_cmp
037d4     00 FA 0D F2 | 	cmp	result1, #0 wz
037d8     00 FA 05 56 |  if_ne	mov	result1, #0
037dc     70 00 90 5D |  if_ne	jmp	#LR__0282
037e0                 | LR__0277
037e0                 | '     if m$="." then ds+=1: if ds>1 then return false
037e0     21 01 00 FF 
037e4     D5 15 06 F6 | 	mov	arg02, ##@LR__4268
037e8     14 13 02 F6 | 	mov	arg01, local06
037ec     4C 17 B1 FD | 	call	#__system___string_cmp
037f0     00 FA 0D F2 | 	cmp	result1, #0 wz
037f4     01 20 06 A1 |  if_e	add	local02, #1
037f8     02 20 56 A2 |  if_e	cmps	local02, #2 wc
037fc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03800     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0282
03804                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03804     21 01 00 FF 
03808     D7 15 06 F6 | 	mov	arg02, ##@LR__4269
0380c     14 13 02 F6 | 	mov	arg01, local06
03810     28 17 B1 FD | 	call	#__system___string_cmp
03814     00 FA 4D F2 | 	cmps	result1, #0 wz
03818     18 00 90 AD |  if_e	jmp	#LR__0278
0381c     21 01 00 FF 
03820     D9 15 06 F6 | 	mov	arg02, ##@LR__4270
03824     14 13 02 F6 | 	mov	arg01, local06
03828     10 17 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 4D F2 | 	cmps	result1, #0 wz
03830     10 00 90 5D |  if_ne	jmp	#LR__0279
03834                 | LR__0278
03834     01 22 06 F1 | 	add	local03, #1
03838     02 22 56 F2 | 	cmps	local03, #2 wc
0383c     00 FA 05 36 |  if_ae	mov	result1, #0
03840     0C 00 90 3D |  if_ae	jmp	#LR__0282
03844                 | LR__0279
03844     01 30 06 F1 | 	add	local10, #1
03848     60 FE 9F FD | 	jmp	#LR__0274
0384c                 | LR__0280
0384c                 | LR__0281
0384c                 | ' return true
0384c     01 FA 65 F6 | 	neg	result1, #1
03850                 | LR__0282
03850     A7 F0 03 F6 | 	mov	ptra, fp
03854     B2 00 A0 FD | 	call	#popregs_
03858                 | _isnum_ret
03858     2D 00 64 FD | 	ret
0385c                 | 
0385c                 | '   
0385c                 | ' function isint(s as string) as boolean
0385c                 | _isint
0385c     05 4A 05 F6 | 	mov	COUNT_, #5
03860     A8 00 A0 FD | 	call	#pushregs_
03864     09 1F 02 F6 | 	mov	local01, arg01
03868     09 21 02 F6 | 	mov	local02, arg01
0386c     97 06 48 FB | 	callpa	#(@LR__0291-@LR__0290)>>2,fcache_load_ptr_
03870                 | LR__0290
03870     10 FB C9 FA | 	rdbyte	result1, local02 wz
03874     01 20 06 51 |  if_ne	add	local02, #1
03878     F4 FF 9F 5D |  if_ne	jmp	#LR__0290
0387c                 | LR__0291
0387c     09 21 82 F1 | 	sub	local02, arg01
03880     10 FB 01 F6 | 	mov	result1, local02
03884     FD 20 0A F6 | 	mov	local02, result1 wz
03888     00 FA 05 A6 |  if_e	mov	result1, #0
0388c     18 01 90 AD |  if_e	jmp	#LR__0299
03890     0F 13 02 F6 | 	mov	arg01, local01
03894     01 14 06 F6 | 	mov	arg02, #1
03898     01 16 06 F6 | 	mov	arg03, #1
0389c     9C 37 B1 FD | 	call	#__system__Mid_S
038a0     FD 22 02 F6 | 	mov	local03, result1
038a4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038a4     21 01 00 FF 
038a8     DB 15 06 F6 | 	mov	arg02, ##@LR__4271
038ac     11 13 02 F6 | 	mov	arg01, local03
038b0     88 16 B1 FD | 	call	#__system___string_cmp
038b4     00 FA 55 F2 | 	cmps	result1, #0 wc
038b8     18 00 90 CD |  if_b	jmp	#LR__0292
038bc     21 01 00 FF 
038c0     DD 15 06 F6 | 	mov	arg02, ##@LR__4272
038c4     11 13 02 F6 | 	mov	arg01, local03
038c8     70 16 B1 FD | 	call	#__system___string_cmp
038cc     01 FA 55 F2 | 	cmps	result1, #1 wc
038d0     4C 00 90 CD |  if_b	jmp	#LR__0293
038d4                 | LR__0292
038d4     21 01 00 FF 
038d8     DF 15 06 F6 | 	mov	arg02, ##@LR__4273
038dc     11 13 02 F6 | 	mov	arg01, local03
038e0     58 16 B1 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     34 00 90 AD |  if_e	jmp	#LR__0293
038ec     21 01 00 FF 
038f0     E1 15 06 F6 | 	mov	arg02, ##@LR__4274
038f4     11 13 02 F6 | 	mov	arg01, local03
038f8     40 16 B1 FD | 	call	#__system___string_cmp
038fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03900     1C 00 90 AD |  if_e	jmp	#LR__0293
03904     21 01 00 FF 
03908     E3 15 06 F6 | 	mov	arg02, ##@LR__4275
0390c     11 13 02 F6 | 	mov	arg01, local03
03910     28 16 B1 FD | 	call	#__system___string_cmp
03914     00 FA 0D F2 | 	cmp	result1, #0 wz
03918     00 FA 05 56 |  if_ne	mov	result1, #0
0391c     88 00 90 5D |  if_ne	jmp	#LR__0299
03920                 | LR__0293
03920                 | ' 
03920                 | ' if l>1 then 
03920     02 20 56 F2 | 	cmps	local02, #2 wc
03924     7C 00 90 CD |  if_b	jmp	#LR__0298
03928                 | '   for i=2 to l
03928     02 24 06 F6 | 	mov	local04, #2
0392c     10 27 02 F6 | 	mov	local05, local02
03930     01 26 06 F1 | 	add	local05, #1
03934                 | LR__0294
03934     13 25 52 F2 | 	cmps	local04, local05 wc
03938     68 00 90 3D |  if_ae	jmp	#LR__0297
0393c     0F 13 02 F6 | 	mov	arg01, local01
03940     12 15 02 F6 | 	mov	arg02, local04
03944     01 16 06 F6 | 	mov	arg03, #1
03948     F0 36 B1 FD | 	call	#__system__Mid_S
0394c     FD 22 02 F6 | 	mov	local03, result1
03950                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03950     21 01 00 FF 
03954     E5 15 06 F6 | 	mov	arg02, ##@LR__4276
03958     11 13 02 F6 | 	mov	arg01, local03
0395c     DC 15 B1 FD | 	call	#__system___string_cmp
03960     00 FA 55 F2 | 	cmps	result1, #0 wc
03964     18 00 90 CD |  if_b	jmp	#LR__0295
03968     21 01 00 FF 
0396c     E7 15 06 F6 | 	mov	arg02, ##@LR__4277
03970     11 13 02 F6 | 	mov	arg01, local03
03974     C4 15 B1 FD | 	call	#__system___string_cmp
03978     01 FA 55 F2 | 	cmps	result1, #1 wc
0397c     1C 00 90 CD |  if_b	jmp	#LR__0296
03980                 | LR__0295
03980     21 01 00 FF 
03984     E9 15 06 F6 | 	mov	arg02, ##@LR__4278
03988     11 13 02 F6 | 	mov	arg01, local03
0398c     AC 15 B1 FD | 	call	#__system___string_cmp
03990     00 FA 0D F2 | 	cmp	result1, #0 wz
03994     00 FA 05 56 |  if_ne	mov	result1, #0
03998     0C 00 90 5D |  if_ne	jmp	#LR__0299
0399c                 | LR__0296
0399c     01 24 06 F1 | 	add	local04, #1
039a0     90 FF 9F FD | 	jmp	#LR__0294
039a4                 | LR__0297
039a4                 | LR__0298
039a4                 | ' return true
039a4     01 FA 65 F6 | 	neg	result1, #1
039a8                 | LR__0299
039a8     A7 F0 03 F6 | 	mov	ptra, fp
039ac     B2 00 A0 FD | 	call	#popregs_
039b0                 | _isint_ret
039b0     2D 00 64 FD | 	ret
039b4                 | 
039b4                 | ' 
039b4                 | ' function isdec(s as string) as boolean
039b4                 | _isdec
039b4     05 4A 05 F6 | 	mov	COUNT_, #5
039b8     A8 00 A0 FD | 	call	#pushregs_
039bc     09 1F 02 F6 | 	mov	local01, arg01
039c0     09 21 02 F6 | 	mov	local02, arg01
039c4     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
039c8                 | LR__0300
039c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
039cc     01 20 06 51 |  if_ne	add	local02, #1
039d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
039d4                 | LR__0301
039d4     09 21 82 F1 | 	sub	local02, arg01
039d8     10 FB 01 F6 | 	mov	result1, local02
039dc     FD 20 0A F6 | 	mov	local02, result1 wz
039e0     00 FA 05 A6 |  if_e	mov	result1, #0
039e4     80 00 90 AD |  if_e	jmp	#LR__0306
039e8                 | ' for i=1 to l
039e8     01 22 06 F6 | 	mov	local03, #1
039ec     10 25 02 F6 | 	mov	local04, local02
039f0     01 24 06 F1 | 	add	local04, #1
039f4                 | LR__0302
039f4     12 23 52 F2 | 	cmps	local03, local04 wc
039f8     68 00 90 3D |  if_ae	jmp	#LR__0305
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     11 15 02 F6 | 	mov	arg02, local03
03a04     01 16 06 F6 | 	mov	arg03, #1
03a08     30 36 B1 FD | 	call	#__system__Mid_S
03a0c     FD 26 02 F6 | 	mov	local05, result1
03a10                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03a10     21 01 00 FF 
03a14     EB 15 06 F6 | 	mov	arg02, ##@LR__4279
03a18     13 13 02 F6 | 	mov	arg01, local05
03a1c     1C 15 B1 FD | 	call	#__system___string_cmp
03a20     00 FA 55 F2 | 	cmps	result1, #0 wc
03a24     18 00 90 CD |  if_b	jmp	#LR__0303
03a28     21 01 00 FF 
03a2c     ED 15 06 F6 | 	mov	arg02, ##@LR__4280
03a30     13 13 02 F6 | 	mov	arg01, local05
03a34     04 15 B1 FD | 	call	#__system___string_cmp
03a38     01 FA 55 F2 | 	cmps	result1, #1 wc
03a3c     1C 00 90 CD |  if_b	jmp	#LR__0304
03a40                 | LR__0303
03a40     21 01 00 FF 
03a44     EF 15 06 F6 | 	mov	arg02, ##@LR__4281
03a48     13 13 02 F6 | 	mov	arg01, local05
03a4c     EC 14 B1 FD | 	call	#__system___string_cmp
03a50     00 FA 0D F2 | 	cmp	result1, #0 wz
03a54     00 FA 05 56 |  if_ne	mov	result1, #0
03a58     0C 00 90 5D |  if_ne	jmp	#LR__0306
03a5c                 | LR__0304
03a5c     01 22 06 F1 | 	add	local03, #1
03a60     90 FF 9F FD | 	jmp	#LR__0302
03a64                 | LR__0305
03a64                 | ' return true
03a64     01 FA 65 F6 | 	neg	result1, #1
03a68                 | LR__0306
03a68     A7 F0 03 F6 | 	mov	ptra, fp
03a6c     B2 00 A0 FD | 	call	#popregs_
03a70                 | _isdec_ret
03a70     2D 00 64 FD | 	ret
03a74                 | 
03a74                 | ' 
03a74                 | ' function isstring(s as string) as boolean
03a74                 | _isstring
03a74     01 4A 05 F6 | 	mov	COUNT_, #1
03a78     A8 00 A0 FD | 	call	#pushregs_
03a7c                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03a7c     09 1F 02 F6 | 	mov	local01, arg01
03a80     01 14 06 F6 | 	mov	arg02, #1
03a84     9C 34 B1 FD | 	call	#__system__Left_S
03a88     FD 12 02 F6 | 	mov	arg01, result1
03a8c     21 01 00 FF 
03a90     F1 15 06 F6 | 	mov	arg02, ##@LR__4282
03a94     A4 14 B1 FD | 	call	#__system___string_cmp
03a98     00 FA 4D F2 | 	cmps	result1, #0 wz
03a9c     28 00 90 5D |  if_ne	jmp	#LR__0310
03aa0     0F 13 02 F6 | 	mov	arg01, local01
03aa4     01 14 06 F6 | 	mov	arg02, #1
03aa8     00 35 B1 FD | 	call	#__system__Right_S
03aac     FD 12 02 F6 | 	mov	arg01, result1
03ab0     21 01 00 FF 
03ab4     F3 15 06 F6 | 	mov	arg02, ##@LR__4283
03ab8     80 14 B1 FD | 	call	#__system___string_cmp
03abc     00 FA 4D F2 | 	cmps	result1, #0 wz
03ac0     01 FA 65 A6 |  if_e	neg	result1, #1
03ac4     04 00 90 AD |  if_e	jmp	#LR__0311
03ac8                 | LR__0310
03ac8     00 FA 05 F6 | 	mov	result1, #0
03acc                 | LR__0311
03acc     A7 F0 03 F6 | 	mov	ptra, fp
03ad0     B2 00 A0 FD | 	call	#popregs_
03ad4                 | _isstring_ret
03ad4     2D 00 64 FD | 	ret
03ad8                 | 
03ad8                 | ' 
03ad8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03ad8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03ad8                 | ' 
03ad8                 | ' '----- delete a line from a program
03ad8                 | ' 
03ad8                 | ' function deleteline(aline as ulong) as integer
03ad8                 | _deleteline
03ad8     03 4A 05 F6 | 	mov	COUNT_, #3
03adc     A8 00 A0 FD | 	call	#pushregs_
03ae0     2C F0 07 F1 | 	add	ptra, #44
03ae4     04 4E 05 F1 | 	add	fp, #4
03ae8     A7 12 62 FC | 	wrlong	arg01, fp
03aec     41 00 00 FF 
03af0     48 E4 05 F1 | 	add	objptr, ##33352
03af4     F2 1E 02 FB | 	rdlong	local01, objptr
03af8     0C 4E 05 F1 | 	add	fp, #12
03afc     A7 1E 62 FC | 	wrlong	local01, fp
03b00     10 4E 85 F1 | 	sub	fp, #16
03b04                 | ' 
03b04                 | ' 
03b04                 | ' searchptr=programstart
03b04                 | ' 
03b04                 | ' do
03b04     35 00 00 FF 
03b08     88 E5 85 F1 | 	sub	objptr, ##27528
03b0c                 | LR__0320
03b0c     14 4E 05 F1 | 	add	fp, #20
03b10     A7 12 02 F6 | 	mov	arg01, fp
03b14     04 4E 85 F1 | 	sub	fp, #4
03b18     A7 14 02 FB | 	rdlong	arg02, fp
03b1c     10 4E 85 F1 | 	sub	fp, #16
03b20     18 16 06 F6 | 	mov	arg03, #24
03b24     00 09 B1 FD | 	call	#_psram_spin2_read1
03b28     10 4E 05 F1 | 	add	fp, #16
03b2c     A7 1E 02 FB | 	rdlong	local01, fp
03b30     08 4E 85 F1 | 	sub	fp, #8
03b34     A7 1E 62 FC | 	wrlong	local01, fp
03b38     20 4E 05 F1 | 	add	fp, #32
03b3c     A7 1E 02 FB | 	rdlong	local01, fp
03b40     18 4E 85 F1 | 	sub	fp, #24
03b44     A7 1E 62 FC | 	wrlong	local01, fp
03b48     04 4E 05 F1 | 	add	fp, #4
03b4c     A7 1E 02 FB | 	rdlong	local01, fp
03b50     10 4E 85 F1 | 	sub	fp, #16
03b54     A7 16 02 FB | 	rdlong	arg03, fp
03b58     04 4E 85 F1 | 	sub	fp, #4
03b5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03b60     28 4E 05 C1 |  if_b	add	fp, #40
03b64     A7 20 02 CB |  if_b	rdlong	local02, fp
03b68     28 4E 85 C1 |  if_b	sub	fp, #40
03b6c     FF FF 3F CF 
03b70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03b74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0320
03b78     0B 00 00 FF 
03b7c     C0 E4 85 F1 | 	sub	objptr, ##5824
03b80                 | ' 
03b80                 | ' 
03b80                 | ' if header(0)<>aline then return -1
03b80     14 4E 05 F1 | 	add	fp, #20
03b84     A7 1E 02 FB | 	rdlong	local01, fp
03b88     10 4E 85 F1 | 	sub	fp, #16
03b8c     A7 22 02 FB | 	rdlong	local03, fp
03b90     04 4E 85 F1 | 	sub	fp, #4
03b94     11 1F 0A F2 | 	cmp	local01, local03 wz
03b98     01 FA 65 56 |  if_ne	neg	result1, #1
03b9c     4C 03 90 5D |  if_ne	jmp	#LR__0326
03ba0     08 4E 05 F1 | 	add	fp, #8
03ba4     A7 12 02 FB | 	rdlong	arg01, fp
03ba8     08 4E 85 F1 | 	sub	fp, #8
03bac     01 14 66 F6 | 	neg	arg02, #1
03bb0     01 16 06 F6 | 	mov	arg03, #1
03bb4     00 18 06 F6 | 	mov	arg04, #0
03bb8     0B 00 00 FF 
03bbc     C0 E4 05 F1 | 	add	objptr, ##5824
03bc0                 | '     return fill(addr, pattern, count, listPtr, 4)
03bc0     04 1A 06 F6 | 	mov	arg05, #4
03bc4     98 09 B1 FD | 	call	#_psram_spin2_fill
03bc8     0B 00 00 FF 
03bcc     C0 E4 85 F1 | 	sub	objptr, ##5824
03bd0                 | ' 
03bd0                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03bd0                 | ' 
03bd0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03bd0     28 4E 05 F1 | 	add	fp, #40
03bd4     A7 1E 02 FB | 	rdlong	local01, fp
03bd8     28 4E 85 F1 | 	sub	fp, #40
03bdc     FF FF 3F FF 
03be0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03be4     24 4E 05 A1 |  if_e	add	fp, #36
03be8     A7 22 02 AB |  if_e	rdlong	local03, fp
03bec     24 4E 85 A1 |  if_e	sub	fp, #36
03bf0     FF FF 7F AF 
03bf4     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03bf8     90 00 90 5D |  if_ne	jmp	#LR__0321
03bfc     41 00 00 FF 
03c00     48 E4 05 F1 | 	add	objptr, ##33352
03c04     F2 00 68 FC | 	wrlong	#0, objptr
03c08     07 00 00 FF 
03c0c     28 E4 85 F1 | 	sub	objptr, ##3624
03c10     F2 00 68 FC | 	wrlong	#0, objptr
03c14     07 00 00 FF 
03c18     2C E4 05 F1 | 	add	objptr, ##3628
03c1c     F2 00 68 FC | 	wrlong	#0, objptr
03c20     04 E4 05 F1 | 	add	objptr, #4
03c24     FF FF FF FF 
03c28     F2 FE 6B FC | 	wrlong	##-1, objptr
03c2c     00 12 06 F6 | 	mov	arg01, #0
03c30     10 E4 85 F1 | 	sub	objptr, #16
03c34     F2 00 68 FC | 	wrlong	#0, objptr
03c38     01 14 66 F6 | 	neg	arg02, #1
03c3c     01 16 06 F6 | 	mov	arg03, #1
03c40     00 18 06 F6 | 	mov	arg04, #0
03c44     35 00 00 FF 
03c48     80 E5 85 F1 | 	sub	objptr, ##27520
03c4c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c4c     04 1A 06 F6 | 	mov	arg05, #4
03c50     0C 09 B1 FD | 	call	#_psram_spin2_fill
03c54     10 12 06 F6 | 	mov	arg01, #16
03c58     01 14 66 F6 | 	neg	arg02, #1
03c5c     01 16 06 F6 | 	mov	arg03, #1
03c60     00 18 06 F6 | 	mov	arg04, #0
03c64                 | '     return fill(addr, pattern, count, listPtr, 4)
03c64     04 1A 06 F6 | 	mov	arg05, #4
03c68     F4 08 B1 FD | 	call	#_psram_spin2_fill
03c6c     14 12 06 F6 | 	mov	arg01, #20
03c70     1E 14 CE F9 | 	bmask	arg02, #30
03c74     01 16 06 F6 | 	mov	arg03, #1
03c78     00 18 06 F6 | 	mov	arg04, #0
03c7c                 | '     return fill(addr, pattern, count, listPtr, 4)
03c7c     04 1A 06 F6 | 	mov	arg05, #4
03c80     DC 08 B1 FD | 	call	#_psram_spin2_fill
03c84     0B 00 00 FF 
03c88     C0 E4 85 F1 | 	sub	objptr, ##5824
03c8c                 | LR__0321
03c8c                 | ' 
03c8c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03c8c     28 4E 05 F1 | 	add	fp, #40
03c90     A7 1E 02 FB | 	rdlong	local01, fp
03c94     28 4E 85 F1 | 	sub	fp, #40
03c98     FF FF 3F FF 
03c9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ca0     88 00 90 5D |  if_ne	jmp	#LR__0322
03ca4     24 4E 05 F1 | 	add	fp, #36
03ca8     A7 22 02 FB | 	rdlong	local03, fp
03cac     24 4E 85 F1 | 	sub	fp, #36
03cb0     FF FF 7F FF 
03cb4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03cb8     70 00 90 AD |  if_e	jmp	#LR__0322
03cbc     24 4E 05 F1 | 	add	fp, #36
03cc0     A7 12 02 FB | 	rdlong	arg01, fp
03cc4     24 4E 85 F1 | 	sub	fp, #36
03cc8     14 12 06 F1 | 	add	arg01, #20
03ccc     1E 14 CE F9 | 	bmask	arg02, #30
03cd0     01 16 06 F6 | 	mov	arg03, #1
03cd4     00 18 06 F6 | 	mov	arg04, #0
03cd8     0B 00 00 FF 
03cdc     C0 E4 05 F1 | 	add	objptr, ##5824
03ce0                 | '     return fill(addr, pattern, count, listPtr, 4)
03ce0     04 1A 06 F6 | 	mov	arg05, #4
03ce4     78 08 B1 FD | 	call	#_psram_spin2_fill
03ce8     24 4E 05 F1 | 	add	fp, #36
03cec     A7 1E 02 FB | 	rdlong	local01, fp
03cf0     35 00 00 FF 
03cf4     90 E5 05 F1 | 	add	objptr, ##27536
03cf8     F2 1E 62 FC | 	wrlong	local01, objptr
03cfc     41 00 00 FF 
03d00     50 E4 85 F1 | 	sub	objptr, ##33360
03d04     A7 12 02 FB | 	rdlong	arg01, fp
03d08     24 4E 85 F1 | 	sub	fp, #36
03d0c     CC DE B0 FD | 	call	#_pslpeek
03d10     41 00 00 FF 
03d14     4C E4 05 F1 | 	add	objptr, ##33356
03d18     F2 FA 61 FC | 	wrlong	result1, objptr
03d1c     41 00 00 FF 
03d20     4C E4 85 F1 | 	sub	objptr, ##33356
03d24                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
03d24                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
03d24                 | '   lastline=pslpeek(header(4))
03d24                 | '   return 0
03d24     00 FA 05 F6 | 	mov	result1, #0
03d28     C0 01 90 FD | 	jmp	#LR__0326
03d2c                 | LR__0322
03d2c                 | ' 
03d2c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
03d2c     28 4E 05 F1 | 	add	fp, #40
03d30     A7 1E 02 FB | 	rdlong	local01, fp
03d34     28 4E 85 F1 | 	sub	fp, #40
03d38     FF FF 3F FF 
03d3c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03d40     6C 00 90 AD |  if_e	jmp	#LR__0323
03d44     24 4E 05 F1 | 	add	fp, #36
03d48     A7 22 02 FB | 	rdlong	local03, fp
03d4c     24 4E 85 F1 | 	sub	fp, #36
03d50     FF FF 7F FF 
03d54     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03d58     54 00 90 5D |  if_ne	jmp	#LR__0323
03d5c     28 4E 05 F1 | 	add	fp, #40
03d60     A7 12 02 FB | 	rdlong	arg01, fp
03d64     28 4E 85 F1 | 	sub	fp, #40
03d68     10 12 06 F1 | 	add	arg01, #16
03d6c     01 14 66 F6 | 	neg	arg02, #1
03d70     01 16 06 F6 | 	mov	arg03, #1
03d74     00 18 06 F6 | 	mov	arg04, #0
03d78     0B 00 00 FF 
03d7c     C0 E4 05 F1 | 	add	objptr, ##5824
03d80                 | '     return fill(addr, pattern, count, listPtr, 4)
03d80     04 1A 06 F6 | 	mov	arg05, #4
03d84     D8 07 B1 FD | 	call	#_psram_spin2_fill
03d88     28 4E 05 F1 | 	add	fp, #40
03d8c     A7 1E 02 FB | 	rdlong	local01, fp
03d90     28 4E 85 F1 | 	sub	fp, #40
03d94     35 00 00 FF 
03d98     88 E5 05 F1 | 	add	objptr, ##27528
03d9c     F2 1E 62 FC | 	wrlong	local01, objptr
03da0     41 00 00 FF 
03da4     48 E4 85 F1 | 	sub	objptr, ##33352
03da8                 | ' '   print "deleted first line"
03da8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
03da8                 | '   programstart=header(5) ' adjust the program start to point on the first new line
03da8                 | '   return 0
03da8     00 FA 05 F6 | 	mov	result1, #0
03dac     3C 01 90 FD | 	jmp	#LR__0326
03db0                 | LR__0323
03db0                 | ' 
03db0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
03db0     28 4E 05 F1 | 	add	fp, #40
03db4     A7 1E 02 FB | 	rdlong	local01, fp
03db8     28 4E 85 F1 | 	sub	fp, #40
03dbc     FF FF 3F FF 
03dc0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03dc4     24 4E 05 51 |  if_ne	add	fp, #36
03dc8     A7 22 02 5B |  if_ne	rdlong	local03, fp
03dcc     24 4E 85 51 |  if_ne	sub	fp, #36
03dd0     FF FF 7F 5F 
03dd4     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
03dd8     68 00 90 AD |  if_e	jmp	#LR__0324
03ddc     28 4E 05 F1 | 	add	fp, #40
03de0     A7 12 02 FB | 	rdlong	arg01, fp
03de4     10 12 06 F1 | 	add	arg01, #16
03de8     04 4E 85 F1 | 	sub	fp, #4
03dec     A7 14 02 FB | 	rdlong	arg02, fp
03df0     24 4E 85 F1 | 	sub	fp, #36
03df4     01 16 06 F6 | 	mov	arg03, #1
03df8     00 18 06 F6 | 	mov	arg04, #0
03dfc     0B 00 00 FF 
03e00     C0 E4 05 F1 | 	add	objptr, ##5824
03e04                 | '     return fill(addr, pattern, count, listPtr, 4)
03e04     04 1A 06 F6 | 	mov	arg05, #4
03e08     54 07 B1 FD | 	call	#_psram_spin2_fill
03e0c     24 4E 05 F1 | 	add	fp, #36
03e10     A7 12 02 FB | 	rdlong	arg01, fp
03e14     14 12 06 F1 | 	add	arg01, #20
03e18     04 4E 05 F1 | 	add	fp, #4
03e1c     A7 14 02 FB | 	rdlong	arg02, fp
03e20     28 4E 85 F1 | 	sub	fp, #40
03e24     01 16 06 F6 | 	mov	arg03, #1
03e28     00 18 06 F6 | 	mov	arg04, #0
03e2c                 | '     return fill(addr, pattern, count, listPtr, 4)
03e2c     04 1A 06 F6 | 	mov	arg05, #4
03e30     2C 07 B1 FD | 	call	#_psram_spin2_fill
03e34     0B 00 00 FF 
03e38     C0 E4 85 F1 | 	sub	objptr, ##5824
03e3c                 | '    pslpoke(header(5)+16,header(4))  
03e3c                 | '    pslpoke(header(4)+20, header(5))
03e3c                 | '    return 0
03e3c     00 FA 05 F6 | 	mov	result1, #0
03e40     A8 00 90 FD | 	jmp	#LR__0326
03e44                 | LR__0324
03e44     10 4E 05 F1 | 	add	fp, #16
03e48     A7 1E 02 FB | 	rdlong	local01, fp
03e4c     08 4E 85 F1 | 	sub	fp, #8
03e50     A7 1E 62 FC | 	wrlong	local01, fp
03e54     41 00 00 FF 
03e58     48 E4 05 F1 | 	add	objptr, ##33352
03e5c     F2 1E 02 FB | 	rdlong	local01, objptr
03e60     08 4E 05 F1 | 	add	fp, #8
03e64     A7 1E 62 FC | 	wrlong	local01, fp
03e68     10 4E 85 F1 | 	sub	fp, #16
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
03e6c                 | ' 
03e6c                 | ' lineptr2=searchptr
03e6c                 | ' searchptr=programstart
03e6c                 | ' 
03e6c                 | ' do
03e6c     35 00 00 FF 
03e70     88 E5 85 F1 | 	sub	objptr, ##27528
03e74                 | LR__0325
03e74     14 4E 05 F1 | 	add	fp, #20
03e78     A7 12 02 F6 | 	mov	arg01, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     A7 14 02 FB | 	rdlong	arg02, fp
03e84     10 4E 85 F1 | 	sub	fp, #16
03e88     18 16 06 F6 | 	mov	arg03, #24
03e8c     98 05 B1 FD | 	call	#_psram_spin2_read1
03e90     10 4E 05 F1 | 	add	fp, #16
03e94     A7 1E 02 FB | 	rdlong	local01, fp
03e98     08 4E 85 F1 | 	sub	fp, #8
03e9c     A7 1E 62 FC | 	wrlong	local01, fp
03ea0     20 4E 05 F1 | 	add	fp, #32
03ea4     A7 1E 02 FB | 	rdlong	local01, fp
03ea8     18 4E 85 F1 | 	sub	fp, #24
03eac     A7 1E 62 FC | 	wrlong	local01, fp
03eb0     04 4E 05 F1 | 	add	fp, #4
03eb4     A7 1E 02 FB | 	rdlong	local01, fp
03eb8     10 4E 85 F1 | 	sub	fp, #16
03ebc     A7 22 02 FB | 	rdlong	local03, fp
03ec0     04 4E 85 F1 | 	sub	fp, #4
03ec4     11 1F 12 F2 | 	cmp	local01, local03 wc
03ec8     28 4E 05 C1 |  if_b	add	fp, #40
03ecc     A7 20 02 CB |  if_b	rdlong	local02, fp
03ed0     28 4E 85 C1 |  if_b	sub	fp, #40
03ed4     FF FF 3F CF 
03ed8     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03edc     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0325
03ee0     0B 00 00 FF 
03ee4     C0 E4 85 F1 | 	sub	objptr, ##5824
03ee8     00 FA 05 F6 | 	mov	result1, #0
03eec                 | LR__0326
03eec     A7 F0 03 F6 | 	mov	ptra, fp
03ef0     B2 00 A0 FD | 	call	#popregs_
03ef4                 | _deleteline_ret
03ef4     2D 00 64 FD | 	ret
03ef8                 | 
03ef8                 | ' 
03ef8                 | ' sub save_line
03ef8                 | _save_line
03ef8     03 4A 05 F6 | 	mov	COUNT_, #3
03efc     A8 00 A0 FD | 	call	#pushregs_
03f00     41 00 00 FF 
03f04     40 E4 05 F1 | 	add	objptr, ##33344
03f08     F2 16 02 FB | 	rdlong	arg03, objptr
03f0c     01 16 06 F1 | 	add	arg03, #1
03f10     05 00 00 FF 
03f14     18 E4 85 F1 | 	sub	objptr, ##2584
03f18     F2 14 02 FB | 	rdlong	arg02, objptr
03f1c     0B 15 02 FD | 	qmul	arg02, arg03
03f20     0E 00 00 FF 
03f24     44 E4 85 F1 | 	sub	objptr, ##7236
03f28     F2 12 02 FB | 	rdlong	arg01, objptr
03f2c     2D 00 00 FF 
03f30     E4 E5 85 F1 | 	sub	objptr, ##23524
03f34     09 1F 02 F6 | 	mov	local01, arg01
03f38     18 20 62 FD | 	getqx	local02
03f3c     97 06 48 FB | 	callpa	#(@LR__0331-@LR__0330)>>2,fcache_load_ptr_
03f40                 | LR__0330
03f40     0F FB C9 FA | 	rdbyte	result1, local01 wz
03f44     01 1E 06 51 |  if_ne	add	local01, #1
03f48     F4 FF 9F 5D |  if_ne	jmp	#LR__0330
03f4c                 | LR__0331
03f4c     09 1F 82 F1 | 	sub	local01, arg01
03f50     03 1E CE F7 | 	test	local01, #3 wz
03f54     02 1E 46 50 |  if_ne	shr	local01, #2
03f58     01 1E 06 51 |  if_ne	add	local01, #1
03f5c     02 1E 66 50 |  if_ne	shl	local01, #2
03f60     10 23 02 F6 | 	mov	local03, local02
03f64     0F 23 02 F1 | 	add	local03, local01
03f68     3A 00 00 FF 
03f6c     20 E4 05 F1 | 	add	objptr, ##29728
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     10 17 02 F1 | 	add	arg03, local02
03f78     04 00 00 FF 
03f7c     28 E4 05 F1 | 	add	objptr, ##2088
03f80     F2 16 62 FC | 	wrlong	arg03, objptr
03f84     04 E4 05 F1 | 	add	objptr, #4
03f88     F2 1E 62 FC | 	wrlong	local01, objptr
03f8c     0C E4 85 F1 | 	sub	objptr, #12
03f90     F2 12 02 F6 | 	mov	arg01, objptr
03f94     04 00 00 FF 
03f98     20 E4 85 F1 | 	sub	objptr, ##2080
03f9c     F2 14 02 FB | 	rdlong	arg02, objptr
03fa0     10 17 02 F6 | 	mov	arg03, local02
03fa4     2E 00 00 FF 
03fa8     60 E5 85 F1 | 	sub	objptr, ##23904
03fac     14 05 B1 FD | 	call	#_psram_spin2_write
03fb0     22 00 00 FF 
03fb4     24 E5 05 F1 | 	add	objptr, ##17700
03fb8     F2 12 02 FB | 	rdlong	arg01, objptr
03fbc     0C 00 00 FF 
03fc0     3C E4 05 F1 | 	add	objptr, ##6204
03fc4     F2 14 02 FB | 	rdlong	arg02, objptr
03fc8     10 15 02 F1 | 	add	arg02, local02
03fcc     0F 17 02 F6 | 	mov	arg03, local01
03fd0     2E 00 00 FF 
03fd4     60 E5 85 F1 | 	sub	objptr, ##23904
03fd8     E8 04 B1 FD | 	call	#_psram_spin2_write
03fdc     2E 00 00 FF 
03fe0     60 E5 05 F1 | 	add	objptr, ##23904
03fe4     F2 1E 02 FB | 	rdlong	local01, objptr
03fe8     11 1F 02 F1 | 	add	local01, local03
03fec     F2 1E 62 FC | 	wrlong	local01, objptr
03ff0     3A 00 00 FF 
03ff4     20 E4 85 F1 | 	sub	objptr, ##29728
03ff8     A7 F0 03 F6 | 	mov	ptra, fp
03ffc     B2 00 A0 FD | 	call	#popregs_
04000                 | _save_line_ret
04000     2D 00 64 FD | 	ret
04004                 | 
04004                 | ' 
04004                 | ' 
04004                 | ' function insertline(aline as ulong) as integer
04004                 | _insertline
04004     02 4A 05 F6 | 	mov	COUNT_, #2
04008     A8 00 A0 FD | 	call	#pushregs_
0400c     28 F0 07 F1 | 	add	ptra, #40
04010     04 4E 05 F1 | 	add	fp, #4
04014     A7 12 62 FC | 	wrlong	arg01, fp
04018     41 00 00 FF 
0401c     48 E4 05 F1 | 	add	objptr, ##33352
04020     F2 1E 02 FB | 	rdlong	local01, objptr
04024     04 4E 05 F1 | 	add	fp, #4
04028     A7 1E 62 FC | 	wrlong	local01, fp
0402c     08 4E 85 F1 | 	sub	fp, #8
04030                 | ' 
04030                 | ' do
04030     35 00 00 FF 
04034     88 E5 85 F1 | 	sub	objptr, ##27528
04038                 | LR__0340
04038     10 4E 05 F1 | 	add	fp, #16
0403c     A7 12 02 F6 | 	mov	arg01, fp
04040     08 4E 85 F1 | 	sub	fp, #8
04044     A7 14 02 FB | 	rdlong	arg02, fp
04048     08 4E 85 F1 | 	sub	fp, #8
0404c     18 16 06 F6 | 	mov	arg03, #24
04050     D4 03 B1 FD | 	call	#_psram_spin2_read1
04054     08 4E 05 F1 | 	add	fp, #8
04058     A7 1E 02 FB | 	rdlong	local01, fp
0405c     04 4E 05 F1 | 	add	fp, #4
04060     A7 1E 62 FC | 	wrlong	local01, fp
04064     18 4E 05 F1 | 	add	fp, #24
04068     A7 1E 02 FB | 	rdlong	local01, fp
0406c     1C 4E 85 F1 | 	sub	fp, #28
04070     A7 1E 62 FC | 	wrlong	local01, fp
04074     08 4E 05 F1 | 	add	fp, #8
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     0C 4E 85 F1 | 	sub	fp, #12
04080     A7 16 02 FB | 	rdlong	arg03, fp
04084     04 4E 85 F1 | 	sub	fp, #4
04088     0B 1F 12 F2 | 	cmp	local01, arg03 wc
0408c     24 4E 05 C1 |  if_b	add	fp, #36
04090     A7 20 02 CB |  if_b	rdlong	local02, fp
04094     24 4E 85 C1 |  if_b	sub	fp, #36
04098     FF FF 3F CF 
0409c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
040a0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0340
040a4     0B 00 00 FF 
040a8     C0 E4 85 F1 | 	sub	objptr, ##5824
040ac                 | ' 
040ac                 | ' if header(0)=aline then return -1 ' delete it first
040ac     10 4E 05 F1 | 	add	fp, #16
040b0     A7 1E 02 FB | 	rdlong	local01, fp
040b4     0C 4E 85 F1 | 	sub	fp, #12
040b8     A7 20 02 FB | 	rdlong	local02, fp
040bc     04 4E 85 F1 | 	sub	fp, #4
040c0     10 1F 0A F2 | 	cmp	local01, local02 wz
040c4     01 FA 65 A6 |  if_e	neg	result1, #1
040c8     74 01 90 AD |  if_e	jmp	#LR__0343
040cc                 | ' if header(0)<aline then return -2 ' end of program reached
040cc     10 4E 05 F1 | 	add	fp, #16
040d0     A7 1E 02 FB | 	rdlong	local01, fp
040d4     0C 4E 85 F1 | 	sub	fp, #12
040d8     A7 16 02 FB | 	rdlong	arg03, fp
040dc     04 4E 85 F1 | 	sub	fp, #4
040e0     0B 1F 12 F2 | 	cmp	local01, arg03 wc
040e4     02 FA 65 C6 |  if_b	neg	result1, #2
040e8     54 01 90 CD |  if_b	jmp	#LR__0343
040ec                 | ' 
040ec                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
040ec     20 4E 05 F1 | 	add	fp, #32
040f0     A7 1E 02 FB | 	rdlong	local01, fp
040f4     20 4E 85 F1 | 	sub	fp, #32
040f8     FF FF 7F FF 
040fc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04100     84 00 90 5D |  if_ne	jmp	#LR__0341
04104     3A 00 00 FF 
04108     20 E4 05 F1 | 	add	objptr, ##29728
0410c     F2 1E 02 FB | 	rdlong	local01, objptr
04110     07 00 00 FF 
04114     28 E4 05 F1 | 	add	objptr, ##3624
04118     F2 1E 62 FC | 	wrlong	local01, objptr
0411c     0C 4E 05 F1 | 	add	fp, #12
04120     A7 12 02 FB | 	rdlong	arg01, fp
04124     0C 4E 85 F1 | 	sub	fp, #12
04128     10 12 06 F1 | 	add	arg01, #16
0412c     07 00 00 FF 
04130     28 E4 85 F1 | 	sub	objptr, ##3624
04134     F2 14 02 FB | 	rdlong	arg02, objptr
04138     01 16 06 F6 | 	mov	arg03, #1
0413c     00 18 06 F6 | 	mov	arg04, #0
04140     2E 00 00 FF 
04144     60 E5 85 F1 | 	sub	objptr, ##23904
04148                 | '     return fill(addr, pattern, count, listPtr, 4)
04148     04 1A 06 F6 | 	mov	arg05, #4
0414c     10 04 B1 FD | 	call	#_psram_spin2_fill
04150     32 00 00 FF 
04154     90 E5 05 F1 | 	add	objptr, ##26000
04158     FF FF FF FF 
0415c     F2 FE 6B FC | 	wrlong	##-1, objptr
04160     0C 4E 05 F1 | 	add	fp, #12
04164     A7 1E 02 FB | 	rdlong	local01, fp
04168     0C 4E 85 F1 | 	sub	fp, #12
0416c     04 E4 05 F1 | 	add	objptr, #4
04170     F2 1E 62 FC | 	wrlong	local01, objptr
04174     3E 00 00 FF 
04178     54 E4 85 F1 | 	sub	objptr, ##31828
0417c     78 FD BF FD | 	call	#_save_line
04180                 | '   programstart=programptr
04180                 | '   pslpoke(lineptr2+16,programptr)
04180                 | '   ucompiledline(4)=$FFFF_FFFF
04180                 | '   ucompiledline(5)=lineptr2
04180                 | '   save_line
04180                 | '   return 0
04180     00 FA 05 F6 | 	mov	result1, #0
04184     B8 00 90 FD | 	jmp	#LR__0343
04188                 | LR__0341
04188                 | ' 
04188                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04188     20 4E 05 F1 | 	add	fp, #32
0418c     A7 1E 02 FB | 	rdlong	local01, fp
04190     20 4E 85 F1 | 	sub	fp, #32
04194     FF FF 7F FF 
04198     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0419c     9C 00 90 AD |  if_e	jmp	#LR__0342
041a0     20 4E 05 F1 | 	add	fp, #32
041a4     A7 1E 02 FB | 	rdlong	local01, fp
041a8     3E 00 00 FF 
041ac     50 E4 05 F1 | 	add	objptr, ##31824
041b0     F2 1E 62 FC | 	wrlong	local01, objptr
041b4     14 4E 85 F1 | 	sub	fp, #20
041b8     A7 1E 02 FB | 	rdlong	local01, fp
041bc     04 E4 05 F1 | 	add	objptr, #4
041c0     F2 1E 62 FC | 	wrlong	local01, objptr
041c4     A7 12 02 FB | 	rdlong	arg01, fp
041c8     0C 4E 85 F1 | 	sub	fp, #12
041cc     10 12 06 F1 | 	add	arg01, #16
041d0     04 00 00 FF 
041d4     34 E4 85 F1 | 	sub	objptr, ##2100
041d8     F2 14 02 FB | 	rdlong	arg02, objptr
041dc     01 16 06 F6 | 	mov	arg03, #1
041e0     00 18 06 F6 | 	mov	arg04, #0
041e4     2E 00 00 FF 
041e8     60 E5 85 F1 | 	sub	objptr, ##23904
041ec                 | '     return fill(addr, pattern, count, listPtr, 4)
041ec     04 1A 06 F6 | 	mov	arg05, #4
041f0     6C 03 B1 FD | 	call	#_psram_spin2_fill
041f4     20 4E 05 F1 | 	add	fp, #32
041f8     A7 12 02 FB | 	rdlong	arg01, fp
041fc     20 4E 85 F1 | 	sub	fp, #32
04200     14 12 06 F1 | 	add	arg01, #20
04204     2E 00 00 FF 
04208     60 E5 05 F1 | 	add	objptr, ##23904
0420c     F2 14 02 FB | 	rdlong	arg02, objptr
04210     01 16 06 F6 | 	mov	arg03, #1
04214     00 18 06 F6 | 	mov	arg04, #0
04218     2E 00 00 FF 
0421c     60 E5 85 F1 | 	sub	objptr, ##23904
04220                 | '     return fill(addr, pattern, count, listPtr, 4)
04220     04 1A 06 F6 | 	mov	arg05, #4
04224     38 03 B1 FD | 	call	#_psram_spin2_fill
04228     0B 00 00 FF 
0422c     C0 E4 85 F1 | 	sub	objptr, ##5824
04230     C4 FC BF FD | 	call	#_save_line
04234                 | '   ucompiledline(4)=header(4)
04234                 | '   ucompiledline(5)=lineptr2
04234                 | '   pslpoke(lineptr2+16,programptr)
04234                 | '   pslpoke(header(4)+20,programptr)
04234                 | '   save_line
04234                 | '   return 0
04234     00 FA 05 F6 | 	mov	result1, #0
04238     04 00 90 FD | 	jmp	#LR__0343
0423c                 | LR__0342
0423c     00 FA 05 F6 | 	mov	result1, #0
04240                 | LR__0343
04240     A7 F0 03 F6 | 	mov	ptra, fp
04244     B2 00 A0 FD | 	call	#popregs_
04248                 | _insertline_ret
04248     2D 00 64 FD | 	ret
0424c                 | 
0424c                 | ' 
0424c                 | ' sub add_line_at_end(aline) 
0424c                 | _add_line_at_end
0424c     41 00 00 FF 
04250     4C E4 05 F1 | 	add	objptr, ##33356
04254     F2 12 62 FC | 	wrlong	arg01, objptr
04258     04 E4 05 F1 | 	add	objptr, #4
0425c     F2 14 02 FB | 	rdlong	arg02, objptr
04260     03 00 00 FF 
04264     00 E4 85 F1 | 	sub	objptr, ##1536
04268     F2 14 62 FC | 	wrlong	arg02, objptr
0426c     03 00 00 FF 
04270     00 E4 05 F1 | 	add	objptr, ##1536
04274     F2 12 02 FB | 	rdlong	arg01, objptr
04278     14 12 06 F1 | 	add	arg01, #20
0427c     07 00 00 FF 
04280     30 E4 85 F1 | 	sub	objptr, ##3632
04284     F2 14 02 FB | 	rdlong	arg02, objptr
04288     01 16 06 F6 | 	mov	arg03, #1
0428c     00 18 06 F6 | 	mov	arg04, #0
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298                 | '     return fill(addr, pattern, count, listPtr, 4)
04298     04 1A 06 F6 | 	mov	arg05, #4
0429c     C0 02 B1 FD | 	call	#_psram_spin2_fill
042a0     2E 00 00 FF 
042a4     60 E5 05 F1 | 	add	objptr, ##23904
042a8     F2 14 02 FB | 	rdlong	arg02, objptr
042ac     07 00 00 FF 
042b0     30 E4 05 F1 | 	add	objptr, ##3632
042b4     F2 14 62 FC | 	wrlong	arg02, objptr
042b8     02 00 00 FF 
042bc     FC E5 85 F1 | 	sub	objptr, ##1532
042c0     FF FF BF FF 
042c4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
042c8                 | ' 
042c8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
042c8                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
042c8     04 00 00 FF 
042cc     34 E4 85 F1 | 	sub	objptr, ##2100
042d0     F2 14 0A FB | 	rdlong	arg02, objptr wz
042d4     3A 00 00 FF 
042d8     20 E4 85 F1 | 	sub	objptr, ##29728
042dc     3E 00 00 AF 
042e0     50 E4 05 A1 |  if_e	add	objptr, ##31824
042e4     FF FF FF AF 
042e8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
042ec     3E 00 00 AF 
042f0     50 E4 85 A1 |  if_e	sub	objptr, ##31824
042f4     00 FC BF FD | 	call	#_save_line
042f8     3A 00 00 FF 
042fc     20 E4 05 F1 | 	add	objptr, ##29728
04300     F2 12 02 FB | 	rdlong	arg01, objptr
04304     01 14 66 F6 | 	neg	arg02, #1
04308     01 16 06 F6 | 	mov	arg03, #1
0430c     00 18 06 F6 | 	mov	arg04, #0
04310     2E 00 00 FF 
04314     60 E5 85 F1 | 	sub	objptr, ##23904
04318                 | '     return fill(addr, pattern, count, listPtr, 4)
04318     04 1A 06 F6 | 	mov	arg05, #4
0431c     40 02 B1 FD | 	call	#_psram_spin2_fill
04320     0B 00 00 FF 
04324     C0 E4 85 F1 | 	sub	objptr, ##5824
04328                 | _add_line_at_end_ret
04328     2D 00 64 FD | 	ret
0432c                 | 
0432c                 | ' 
0432c                 | ' function compile_immediate(linetype as ulong) as integer
0432c                 | _compile_immediate
0432c     09 4A 05 F6 | 	mov	COUNT_, #9
04330     A8 00 A0 FD | 	call	#pushregs_
04334                 | _compile_immediate_enter
04334     09 25 0A F6 | 	mov	local04, arg01 wz
04338     00 26 06 F6 | 	mov	local05, #0
0433c     00 28 06 F6 | 	mov	local06, #0
04340                 | ' 
04340                 | ' ' linetype=cont+1, linetype=0 immediate
04340                 | ' '  : 1: this is the first part of the line that will continue
04340                 | ' ' 2 - this is the continuation of the line
04340                 | ' ' 3 - this is the last continued line
04340                 | ' ' 4 - this is the one and only part
04340                 | ' 
04340                 | ' err=0
04340                 | ' cmd=0
04340                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
04340     2C 00 90 5D |  if_ne	jmp	#LR__0350
04344     2B 00 00 FF 
04348     D4 E5 05 F1 | 	add	objptr, ##22484
0434c     F2 28 02 FB | 	rdlong	local06, objptr
04350     02 00 00 FF 
04354     34 E4 05 F1 | 	add	objptr, ##1076
04358     F2 02 68 FC | 	wrlong	#1, objptr
0435c     13 00 00 FF 
04360     38 E4 05 F1 | 	add	objptr, ##9784
04364     F2 00 68 FC | 	wrlong	#0, objptr
04368     41 00 00 FF 
0436c     40 E4 85 F1 | 	sub	objptr, ##33344
04370                 | LR__0350
04370                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
04370     02 24 0E F2 | 	cmp	local04, #2 wz
04374     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04378     2B 00 00 AF 
0437c     D4 E5 05 A1 |  if_e	add	objptr, ##22484
04380     F2 28 02 AB |  if_e	rdlong	local06, objptr
04384     02 00 00 AF 
04388     34 E4 05 A1 |  if_e	add	objptr, ##1076
0438c     F2 02 68 AC |  if_e	wrlong	#1, objptr
04390     2E 00 00 AF 
04394     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04398                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04398     04 24 0E F2 | 	cmp	local04, #4 wz
0439c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
043a0     2C 00 90 5D |  if_ne	jmp	#LR__0351
043a4     2B 00 00 FF 
043a8     DC E5 05 F1 | 	add	objptr, ##22492
043ac     F2 28 02 FB | 	rdlong	local06, objptr
043b0     02 00 00 FF 
043b4     2C E4 05 F1 | 	add	objptr, ##1068
043b8     F2 04 68 FC | 	wrlong	#2, objptr
043bc     13 00 00 FF 
043c0     38 E4 05 F1 | 	add	objptr, ##9784
043c4     F2 04 68 FC | 	wrlong	#2, objptr
043c8     41 00 00 FF 
043cc     40 E4 85 F1 | 	sub	objptr, ##33344
043d0                 | LR__0351
043d0                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
043d0     05 24 0E F2 | 	cmp	local04, #5 wz
043d4     40 00 90 5D |  if_ne	jmp	#LR__0352
043d8     2E 00 00 FF 
043dc     08 E4 05 F1 | 	add	objptr, ##23560
043e0     F2 2A 02 FB | 	rdlong	local07, objptr
043e4     15 29 02 F6 | 	mov	local06, local07
043e8     03 28 66 F0 | 	shl	local06, #3
043ec     02 00 00 FF 
043f0     38 E4 85 F1 | 	sub	objptr, ##1080
043f4     F2 28 02 F1 | 	add	local06, objptr
043f8     04 28 06 F1 | 	add	local06, #4
043fc     14 29 02 FB | 	rdlong	local06, local06
04400     01 2A 06 F1 | 	add	local07, #1
04404     02 00 00 FF 
04408     38 E4 05 F1 | 	add	objptr, ##1080
0440c     F2 2A 62 FC | 	wrlong	local07, objptr
04410     2E 00 00 FF 
04414     08 E4 85 F1 | 	sub	objptr, ##23560
04418                 | LR__0352
04418     00 2C 06 F6 | 	mov	local08, #0
0441c                 | ' vars=0
0441c                 | ' 'print  "In compile_immediate cmd=:", cmd
0441c                 | ' 451 select case cmd
0441c     40 28 0E F2 | 	cmp	local06, #64 wz
04420     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04424     78 02 90 AD |  if_e	jmp	#LR__0388
04428     4C 28 0E F2 | 	cmp	local06, #76 wz
0442c     24 01 90 AD |  if_e	jmp	#LR__0353
04430     4D 28 0E F2 | 	cmp	local06, #77 wz
04434     68 02 90 AD |  if_e	jmp	#LR__0388
04438     42 28 0E F2 | 	cmp	local06, #66 wz
0443c     20 01 90 AD |  if_e	jmp	#LR__0354
04440     43 28 0E F2 | 	cmp	local06, #67 wz
04444     24 01 90 AD |  if_e	jmp	#LR__0355
04448     45 28 0E F2 | 	cmp	local06, #69 wz
0444c     28 01 90 AD |  if_e	jmp	#LR__0356
04450     46 28 0E F2 | 	cmp	local06, #70 wz
04454     2C 01 90 AD |  if_e	jmp	#LR__0357
04458     47 28 0E F2 | 	cmp	local06, #71 wz
0445c     30 01 90 AD |  if_e	jmp	#LR__0358
04460     48 28 0E F2 | 	cmp	local06, #72 wz
04464     34 01 90 AD |  if_e	jmp	#LR__0359
04468     49 28 0E F2 | 	cmp	local06, #73 wz
0446c     38 01 90 AD |  if_e	jmp	#LR__0360
04470     44 28 0E F2 | 	cmp	local06, #68 wz
04474     3C 01 90 AD |  if_e	jmp	#LR__0361
04478     4E 28 0E F2 | 	cmp	local06, #78 wz
0447c     40 01 90 AD |  if_e	jmp	#LR__0362
04480     50 28 0E F2 | 	cmp	local06, #80 wz
04484     54 01 90 AD |  if_e	jmp	#LR__0364
04488     51 28 0E F2 | 	cmp	local06, #81 wz
0448c     54 01 90 AD |  if_e	jmp	#LR__0365
04490     52 28 0E F2 | 	cmp	local06, #82 wz
04494     54 01 90 AD |  if_e	jmp	#LR__0366
04498     59 28 0E F2 | 	cmp	local06, #89 wz
0449c     54 01 90 AD |  if_e	jmp	#LR__0367
044a0     55 28 0E F2 | 	cmp	local06, #85 wz
044a4     54 01 90 AD |  if_e	jmp	#LR__0368
044a8     56 28 0E F2 | 	cmp	local06, #86 wz
044ac     54 01 90 AD |  if_e	jmp	#LR__0369
044b0     57 28 0E F2 | 	cmp	local06, #87 wz
044b4     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
044b8     E4 01 90 AD |  if_e	jmp	#LR__0388
044bc     58 28 0E F2 | 	cmp	local06, #88 wz
044c0     48 01 90 AD |  if_e	jmp	#LR__0370
044c4     4A 28 0E F2 | 	cmp	local06, #74 wz
044c8     48 01 90 AD |  if_e	jmp	#LR__0371
044cc     4B 28 0E F2 | 	cmp	local06, #75 wz
044d0     48 01 90 AD |  if_e	jmp	#LR__0372
044d4     5A 28 0E F2 | 	cmp	local06, #90 wz
044d8     48 01 90 AD |  if_e	jmp	#LR__0373
044dc     5C 28 0E F2 | 	cmp	local06, #92 wz
044e0     48 01 90 AD |  if_e	jmp	#LR__0374
044e4     5D 28 0E F2 | 	cmp	local06, #93 wz
044e8     B4 01 90 AD |  if_e	jmp	#LR__0388
044ec     5E 28 0E F2 | 	cmp	local06, #94 wz
044f0     44 01 90 AD |  if_e	jmp	#LR__0375
044f4     5F 28 0E F2 | 	cmp	local06, #95 wz
044f8     44 01 90 AD |  if_e	jmp	#LR__0376
044fc     60 28 0E F2 | 	cmp	local06, #96 wz
04500     44 01 90 AD |  if_e	jmp	#LR__0377
04504     61 28 0E F2 | 	cmp	local06, #97 wz
04508     44 01 90 AD |  if_e	jmp	#LR__0378
0450c     63 28 0E F2 | 	cmp	local06, #99 wz
04510     44 01 90 AD |  if_e	jmp	#LR__0379
04514     68 28 0E F2 | 	cmp	local06, #104 wz
04518     44 01 90 AD |  if_e	jmp	#LR__0380
0451c     69 28 0E F2 | 	cmp	local06, #105 wz
04520     44 01 90 AD |  if_e	jmp	#LR__0381
04524     6D 28 0E F2 | 	cmp	local06, #109 wz
04528     44 01 90 AD |  if_e	jmp	#LR__0382
0452c     6C 28 0E F2 | 	cmp	local06, #108 wz
04530     44 01 90 AD |  if_e	jmp	#LR__0383
04534     71 28 0E F2 | 	cmp	local06, #113 wz
04538     44 01 90 AD |  if_e	jmp	#LR__0384
0453c     72 28 0E F2 | 	cmp	local06, #114 wz
04540     44 01 90 AD |  if_e	jmp	#LR__0385
04544     01 00 00 FF 
04548     04 28 0E F2 | 	cmp	local06, ##516 wz
0454c     40 01 90 AD |  if_e	jmp	#LR__0386
04550     44 01 90 FD | 	jmp	#LR__0387
04554                 | LR__0353
04554     48 0F B0 FD | 	call	#_compile_fun_varp
04558     FD 2C 02 F6 | 	mov	local08, result1
0455c     40 01 90 FD | 	jmp	#LR__0388
04560                 | LR__0354
04560     5C 0B B0 FD | 	call	#_compile_fun_2p
04564     FD 26 02 F6 | 	mov	local05, result1
04568     34 01 90 FD | 	jmp	#LR__0388
0456c                 | LR__0355
0456c     50 0B B0 FD | 	call	#_compile_fun_2p
04570     FD 26 02 F6 | 	mov	local05, result1
04574     28 01 90 FD | 	jmp	#LR__0388
04578                 | LR__0356
04578     B8 0B B0 FD | 	call	#_compile_fun_3p
0457c     FD 26 02 F6 | 	mov	local05, result1
04580     1C 01 90 FD | 	jmp	#LR__0388
04584                 | LR__0357
04584     AC 0B B0 FD | 	call	#_compile_fun_3p
04588     FD 26 02 F6 | 	mov	local05, result1
0458c     10 01 90 FD | 	jmp	#LR__0388
04590                 | LR__0358
04590     6C 0C B0 FD | 	call	#_compile_fun_4p
04594     FD 26 02 F6 | 	mov	local05, result1
04598     04 01 90 FD | 	jmp	#LR__0388
0459c                 | LR__0359
0459c     60 0C B0 FD | 	call	#_compile_fun_4p
045a0     FD 26 02 F6 | 	mov	local05, result1
045a4     F8 00 90 FD | 	jmp	#LR__0388
045a8                 | LR__0360
045a8     38 2D B0 FD | 	call	#_expr
045ac                 | ' 
045ac                 | ' 
045ac                 | ' expr()
045ac                 | ' return 0
045ac     00 26 06 F6 | 	mov	local05, #0
045b0     EC 00 90 FD | 	jmp	#LR__0388
045b4                 | LR__0361
045b4     14 10 B0 FD | 	call	#_compile_print
045b8     FD 26 02 F6 | 	mov	local05, result1
045bc     9C 01 90 FD | 	jmp	#LR__0389
045c0                 | LR__0362
045c0     01 24 16 F2 | 	cmp	local04, #1 wc
045c4     08 00 90 CD |  if_b	jmp	#LR__0363
045c8     B8 29 B0 FD | 	call	#_compile_goto
045cc     8C 01 90 FD | 	jmp	#LR__0389
045d0                 | LR__0363
045d0     19 12 06 F6 | 	mov	arg01, #25
045d4     48 D4 B0 FD | 	call	#_printerror
045d8     80 01 90 FD | 	jmp	#LR__0389
045dc                 | LR__0364
045dc     04 2D B0 FD | 	call	#_expr
045e0                 | ' 
045e0                 | ' 
045e0                 | ' expr()
045e0                 | ' return 0
045e0     BC 00 90 FD | 	jmp	#LR__0388
045e4                 | LR__0365
045e4     FC 2C B0 FD | 	call	#_expr
045e8                 | ' 
045e8                 | ' 
045e8                 | ' expr()
045e8                 | ' return 0
045e8     B4 00 90 FD | 	jmp	#LR__0388
045ec                 | LR__0366
045ec     F4 2C B0 FD | 	call	#_expr
045f0                 | ' 
045f0                 | ' 
045f0                 | ' expr()
045f0                 | ' return 0
045f0     AC 00 90 FD | 	jmp	#LR__0388
045f4                 | LR__0367
045f4     EC 2C B0 FD | 	call	#_expr
045f8                 | ' 
045f8                 | ' 
045f8                 | ' expr()
045f8                 | ' return 0
045f8     A4 00 90 FD | 	jmp	#LR__0388
045fc                 | LR__0368
045fc     4C 0F B0 FD | 	call	#_compile_int_fun_2p
04600     9C 00 90 FD | 	jmp	#LR__0388
04604                 | LR__0369
04604     D0 09 B0 FD | 	call	#_compile_converttoint
04608                 | ' return err
04608     94 00 90 FD | 	jmp	#LR__0388
0460c                 | LR__0370
0460c     94 16 B0 FD | 	call	#_compile_if
04610     48 01 90 FD | 	jmp	#LR__0389
04614                 | LR__0371
04614     D0 1F B0 FD | 	call	#_compile_for
04618     40 01 90 FD | 	jmp	#LR__0389
0461c                 | LR__0372
0461c     B4 27 B0 FD | 	call	#_compile_next
04620     38 01 90 FD | 	jmp	#LR__0389
04624                 | LR__0373
04624     BC 17 B0 FD | 	call	#_compile_else
04628     30 01 90 FD | 	jmp	#LR__0389
0462c                 | LR__0374
0462c     90 0A B0 FD | 	call	#_compile_fun_2p
04630     FD 26 02 F6 | 	mov	local05, result1
04634     68 00 90 FD | 	jmp	#LR__0388
04638                 | LR__0375
04638     A8 2C B0 FD | 	call	#_expr
0463c                 | ' 
0463c                 | ' 
0463c                 | ' expr()
0463c                 | ' return 0
0463c     60 00 90 FD | 	jmp	#LR__0388
04640                 | LR__0376
04640     A0 2C B0 FD | 	call	#_expr
04644                 | ' 
04644                 | ' 
04644                 | ' expr()
04644                 | ' return 0
04644     58 00 90 FD | 	jmp	#LR__0388
04648                 | LR__0377
04648     98 2C B0 FD | 	call	#_expr
0464c                 | ' 
0464c                 | ' 
0464c                 | ' expr()
0464c                 | ' return 0
0464c     50 00 90 FD | 	jmp	#LR__0388
04650                 | LR__0378
04650     90 2C B0 FD | 	call	#_expr
04654                 | ' 
04654                 | ' 
04654                 | ' expr()
04654                 | ' return 0
04654     48 00 90 FD | 	jmp	#LR__0388
04658                 | LR__0379
04658     88 2C B0 FD | 	call	#_expr
0465c                 | ' 
0465c                 | ' 
0465c                 | ' expr()
0465c                 | ' return 0
0465c     40 00 90 FD | 	jmp	#LR__0388
04660                 | LR__0380
04660     80 2C B0 FD | 	call	#_expr
04664                 | ' 
04664                 | ' 
04664                 | ' expr()
04664                 | ' return 0
04664     38 00 90 FD | 	jmp	#LR__0388
04668                 | LR__0381
04668     78 2C B0 FD | 	call	#_expr
0466c                 | ' 
0466c                 | ' 
0466c                 | ' expr()
0466c                 | ' return 0
0466c     30 00 90 FD | 	jmp	#LR__0388
04670                 | LR__0382
04670     C0 0A B0 FD | 	call	#_compile_fun_3p
04674     28 00 90 FD | 	jmp	#LR__0388
04678                 | LR__0383
04678     A8 0C B0 FD | 	call	#_compile_fun_5p
0467c     20 00 90 FD | 	jmp	#LR__0388
04680                 | LR__0384
04680     7C 0B B0 FD | 	call	#_compile_fun_4p
04684     18 00 90 FD | 	jmp	#LR__0388
04688                 | LR__0385
04688     80 18 B0 FD | 	call	#_compile_dim
0468c     CC 00 90 FD | 	jmp	#LR__0389
04690                 | LR__0386
04690     20 01 B0 FD | 	call	#_compile_array_assign
04694     C4 00 90 FD | 	jmp	#LR__0389
04698                 | LR__0387
04698     80 08 B0 FD | 	call	#_compile_unknown
0469c     BC 00 90 FD | 	jmp	#LR__0389
046a0                 | LR__0388
046a0     14 23 02 F6 | 	mov	local03, local06
046a4     16 1F 02 F6 | 	mov	local01, local08
046a8     0F 2B 02 F6 | 	mov	local07, local01
046ac     10 2F 02 F6 | 	mov	local09, local02
046b0     11 1F 02 F6 | 	mov	local01, local03
046b4     41 00 00 FF 
046b8     40 E4 05 F1 | 	add	objptr, ##33344
046bc     F2 2C 02 FB | 	rdlong	local08, objptr
046c0     16 29 02 F6 | 	mov	local06, local08
046c4     01 28 66 F0 | 	shl	local06, #1
046c8     16 29 02 F1 | 	add	local06, local08
046cc     02 28 66 F0 | 	shl	local06, #2
046d0     03 00 00 FF 
046d4     00 E4 85 F1 | 	sub	objptr, ##1536
046d8     F2 28 02 F1 | 	add	local06, objptr
046dc     14 2B 62 FC | 	wrlong	local07, local06
046e0     03 00 00 FF 
046e4     00 E4 05 F1 | 	add	objptr, ##1536
046e8     F2 2C 02 FB | 	rdlong	local08, objptr
046ec     16 2B 02 F6 | 	mov	local07, local08
046f0     01 2A 66 F0 | 	shl	local07, #1
046f4     16 2B 02 F1 | 	add	local07, local08
046f8     02 2A 66 F0 | 	shl	local07, #2
046fc     03 00 00 FF 
04700     00 E4 85 F1 | 	sub	objptr, ##1536
04704     F2 2A 02 F1 | 	add	local07, objptr
04708     04 2A 06 F1 | 	add	local07, #4
0470c     15 2F 62 FC | 	wrlong	local09, local07
04710     03 00 00 FF 
04714     00 E4 05 F1 | 	add	objptr, ##1536
04718     F2 2E 02 FB | 	rdlong	local09, objptr
0471c     17 2D 02 F6 | 	mov	local08, local09
04720     01 2C 66 F0 | 	shl	local08, #1
04724     17 2D 02 F1 | 	add	local08, local09
04728     02 2C 66 F0 | 	shl	local08, #2
0472c     03 00 00 FF 
04730     00 E4 85 F1 | 	sub	objptr, ##1536
04734     F2 2C 02 F1 | 	add	local08, objptr
04738     08 2C 06 F1 | 	add	local08, #8
0473c     16 1F 62 FC | 	wrlong	local01, local08
04740     03 00 00 FF 
04744     00 E4 05 F1 | 	add	objptr, ##1536
04748     F2 2A 02 FB | 	rdlong	local07, objptr
0474c     01 2A 06 F1 | 	add	local07, #1
04750     F2 2A 62 FC | 	wrlong	local07, objptr
04754     41 00 00 FF 
04758     40 E4 85 F1 | 	sub	objptr, ##33344
0475c                 | LR__0389
0475c                 | ' 
0475c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0475c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0475c     00 24 0E F2 | 	cmp	local04, #0 wz
04760     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04764     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04768     38 00 90 5D |  if_ne	jmp	#LR__0390
0476c     41 00 00 FF 
04770     40 E4 05 F1 | 	add	objptr, ##33344
04774     F2 2E 02 FB | 	rdlong	local09, objptr
04778     17 1F 02 F6 | 	mov	local01, local09
0477c     01 1E 66 F0 | 	shl	local01, #1
04780     17 1F 02 F1 | 	add	local01, local09
04784     02 1E 66 F0 | 	shl	local01, #2
04788     03 00 00 FF 
0478c     00 E4 85 F1 | 	sub	objptr, ##1536
04790     F2 1E 02 F1 | 	add	local01, objptr
04794     08 1E 06 F1 | 	add	local01, #8
04798     0F FD 6B FC | 	wrlong	#510, local01
0479c     3E 00 00 FF 
047a0     40 E4 85 F1 | 	sub	objptr, ##31808
047a4                 | LR__0390
047a4                 | ' 
047a4                 | ' 'print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
047a4                 | ' return err
047a4     13 FB 01 F6 | 	mov	result1, local05
047a8     A7 F0 03 F6 | 	mov	ptra, fp
047ac     B2 00 A0 FD | 	call	#popregs_
047b0                 | _compile_immediate_ret
047b0     2D 00 64 FD | 	ret
047b4                 | 
047b4                 | ' 
047b4                 | ' sub compile_array_assign
047b4                 | _compile_array_assign
047b4     0A 4A 05 F6 | 	mov	COUNT_, #10
047b8     A8 00 A0 FD | 	call	#pushregs_
047bc     00 24 06 F6 | 	mov	local04, #0
047c0     2E 00 00 FF 
047c4     08 E4 05 F1 | 	add	objptr, ##23560
047c8     F2 26 02 FB | 	rdlong	local05, objptr
047cc     13 FB 01 F6 | 	mov	result1, local05
047d0     01 FA 85 F1 | 	sub	result1, #1
047d4     03 FA 65 F0 | 	shl	result1, #3
047d8     02 00 00 FF 
047dc     38 E4 85 F1 | 	sub	objptr, ##1080
047e0     F2 FA 01 F1 | 	add	result1, objptr
047e4     FD 28 02 FB | 	rdlong	local06, result1
047e8                 | ' numpar=0
047e8                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
047e8                 | ' ' todo here: recognize params and t1.result.twowords=numpar
047e8                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
047e8                 | ' if lparts(ct).token=token_lpar then
047e8     03 26 66 F0 | 	shl	local05, #3
047ec     F2 26 02 F1 | 	add	local05, objptr
047f0     04 26 06 F1 | 	add	local05, #4
047f4     13 27 02 FB | 	rdlong	local05, local05
047f8     15 26 0E F2 | 	cmp	local05, #21 wz
047fc     2B 00 00 FF 
04800     D0 E5 85 F1 | 	sub	objptr, ##22480
04804     D4 01 90 5D |  if_ne	jmp	#LR__0404
04808     2E 00 00 FF 
0480c     08 E4 05 F1 | 	add	objptr, ##23560
04810     F2 2A 02 FB | 	rdlong	local07, objptr
04814     01 2A 06 F1 | 	add	local07, #1
04818     F2 2A 62 FC | 	wrlong	local07, objptr
0481c     2E 00 00 FF 
04820     08 E4 85 F1 | 	sub	objptr, ##23560
04824                 | '   ct+=1 											' omit this lpar, this is for expr list
04824                 | '   do
04824                 | LR__0400
04824     BC 2A B0 FD | 	call	#_expr
04828     2E 00 00 FF 
0482c     08 E4 05 F1 | 	add	objptr, ##23560
04830     F2 26 02 FB | 	rdlong	local05, objptr
04834     01 26 06 F1 | 	add	local05, #1
04838     F2 26 62 FC | 	wrlong	local05, objptr
0483c     01 24 06 F1 | 	add	local04, #1
04840     01 26 86 F1 | 	sub	local05, #1
04844     03 26 66 F0 | 	shl	local05, #3
04848     02 00 00 FF 
0484c     38 E4 85 F1 | 	sub	objptr, ##1080
04850     F2 26 02 F1 | 	add	local05, objptr
04854     04 26 06 F1 | 	add	local05, #4
04858     13 2B 02 FB | 	rdlong	local07, local05
0485c     14 2A 0E F2 | 	cmp	local07, #20 wz
04860     2B 00 00 FF 
04864     D0 E5 85 F1 | 	sub	objptr, ##22480
04868     34 00 90 AD |  if_e	jmp	#LR__0401
0486c     2E 00 00 FF 
04870     08 E4 05 F1 | 	add	objptr, ##23560
04874     F2 2A 02 FB | 	rdlong	local07, objptr
04878     03 2A 66 F0 | 	shl	local07, #3
0487c     02 00 00 FF 
04880     38 E4 85 F1 | 	sub	objptr, ##1080
04884     F2 2A 02 F1 | 	add	local07, objptr
04888     04 2A 06 F1 | 	add	local07, #4
0488c     15 2B 02 FB | 	rdlong	local07, local07
04890     FE 2B 0E F2 | 	cmp	local07, #510 wz
04894     2B 00 00 FF 
04898     D0 E5 85 F1 | 	sub	objptr, ##22480
0489c     84 FF 9F 5D |  if_ne	jmp	#LR__0400
048a0                 | LR__0401
048a0     2E 00 00 FF 
048a4     08 E4 05 F1 | 	add	objptr, ##23560
048a8     F2 2A 02 FB | 	rdlong	local07, objptr
048ac     01 2A 06 F1 | 	add	local07, #1
048b0     F2 2A 62 FC | 	wrlong	local07, objptr
048b4     2E 00 00 FF 
048b8     08 E4 85 F1 | 	sub	objptr, ##23560
048bc     24 2A B0 FD | 	call	#_expr
048c0     01 2C 66 F6 | 	neg	local08, #1
048c4     00 2E 06 F6 | 	mov	local09, #0
048c8                 | ' '   print "in array_assign, rpar found, numpar=",numpar
048c8                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
048c8                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
048c8                 | ' ct+=1 : expr()
048c8                 | ' ' now find the vae
048c8                 | ' 
048c8                 | ' j=-1 : i=0 : do : 
048c8                 | LR__0402
048c8                 | '   if variables(i).name=varname$ then j=i: exit loop
048c8     17 27 02 F6 | 	mov	local05, local09
048cc     04 26 66 F0 | 	shl	local05, #4
048d0     0B 00 00 FF 
048d4     CC E5 05 F1 | 	add	objptr, ##6092
048d8     F2 26 02 F1 | 	add	local05, objptr
048dc     13 13 02 FB | 	rdlong	arg01, local05
048e0     14 15 02 F6 | 	mov	arg02, local06
048e4     0B 00 00 FF 
048e8     CC E5 85 F1 | 	sub	objptr, ##6092
048ec     4C 06 B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     17 2D 02 A6 |  if_e	mov	local08, local09
048f8     20 00 90 AD |  if_e	jmp	#LR__0403
048fc     01 2E 06 F1 | 	add	local09, #1
04900     2B 00 00 FF 
04904     CC E5 05 F1 | 	add	objptr, ##22476
04908     F2 2A 02 FB | 	rdlong	local07, objptr
0490c     2B 00 00 FF 
04910     CC E5 85 F1 | 	sub	objptr, ##22476
04914     15 2F 5A F2 | 	cmps	local09, local07 wcz
04918     AC FF 9F ED |  if_be	jmp	#LR__0402
0491c                 | LR__0403
0491c     16 1F 02 F6 | 	mov	local01, local08
04920     12 21 02 F6 | 	mov	local02, local04
04924     17 22 06 F6 | 	mov	local03, #23
04928     0F 2B 02 F6 | 	mov	local07, local01
0492c     10 31 02 F6 | 	mov	local10, local02
04930     11 2D 02 F6 | 	mov	local08, local03
04934     41 00 00 FF 
04938     40 E4 05 F1 | 	add	objptr, ##33344
0493c     F2 1E 02 FB | 	rdlong	local01, objptr
04940     0F 2F 02 F6 | 	mov	local09, local01
04944     01 2E 66 F0 | 	shl	local09, #1
04948     0F 2F 02 F1 | 	add	local09, local01
0494c     02 2E 66 F0 | 	shl	local09, #2
04950     03 00 00 FF 
04954     00 E4 85 F1 | 	sub	objptr, ##1536
04958     F2 2E 02 F1 | 	add	local09, objptr
0495c     17 2B 62 FC | 	wrlong	local07, local09
04960     03 00 00 FF 
04964     00 E4 05 F1 | 	add	objptr, ##1536
04968     F2 1E 02 FB | 	rdlong	local01, objptr
0496c     0F 2F 02 F6 | 	mov	local09, local01
04970     01 2E 66 F0 | 	shl	local09, #1
04974     0F 2F 02 F1 | 	add	local09, local01
04978     02 2E 66 F0 | 	shl	local09, #2
0497c     03 00 00 FF 
04980     00 E4 85 F1 | 	sub	objptr, ##1536
04984     F2 2E 02 F1 | 	add	local09, objptr
04988     04 2E 06 F1 | 	add	local09, #4
0498c     17 31 62 FC | 	wrlong	local10, local09
04990     03 00 00 FF 
04994     00 E4 05 F1 | 	add	objptr, ##1536
04998     F2 30 02 FB | 	rdlong	local10, objptr
0499c     18 1F 02 F6 | 	mov	local01, local10
049a0     01 1E 66 F0 | 	shl	local01, #1
049a4     18 1F 02 F1 | 	add	local01, local10
049a8     02 1E 66 F0 | 	shl	local01, #2
049ac     03 00 00 FF 
049b0     00 E4 85 F1 | 	sub	objptr, ##1536
049b4     F2 1E 02 F1 | 	add	local01, objptr
049b8     08 1E 06 F1 | 	add	local01, #8
049bc     0F 2D 62 FC | 	wrlong	local08, local01
049c0     03 00 00 FF 
049c4     00 E4 05 F1 | 	add	objptr, ##1536
049c8     F2 2A 02 FB | 	rdlong	local07, objptr
049cc     01 2A 06 F1 | 	add	local07, #1
049d0     F2 2A 62 FC | 	wrlong	local07, objptr
049d4     41 00 00 FF 
049d8     40 E4 85 F1 | 	sub	objptr, ##33344
049dc                 | LR__0404
049dc     A7 F0 03 F6 | 	mov	ptra, fp
049e0     B2 00 A0 FD | 	call	#popregs_
049e4                 | _compile_array_assign_ret
049e4     2D 00 64 FD | 	ret
049e8                 | 
049e8                 | ' 
049e8                 | ' 
049e8                 | ' sub compile_immediate_assign(linetype as ulong)
049e8                 | _compile_immediate_assign
049e8     09 4A 05 F6 | 	mov	COUNT_, #9
049ec     A8 00 A0 FD | 	call	#pushregs_
049f0     09 25 0A F6 | 	mov	local04, arg01 wz
049f4     FF 22 06 F6 | 	mov	local03, #255
049f8     01 26 66 F6 | 	neg	local05, #1
049fc                 | ' 
049fc                 | ' t1.result_type=result_error : t1.result.uresult=0
049fc                 | ' i=-1: j=-1
049fc                 | ' 
049fc                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
049fc     2C 00 90 5D |  if_ne	jmp	#LR__0410
04a00     2B 00 00 FF 
04a04     D0 E5 05 F1 | 	add	objptr, ##22480
04a08     F2 28 02 FB | 	rdlong	local06, objptr
04a0c     02 00 00 FF 
04a10     38 E4 05 F1 | 	add	objptr, ##1080
04a14     F2 04 68 FC | 	wrlong	#2, objptr
04a18     13 00 00 FF 
04a1c     38 E4 05 F1 | 	add	objptr, ##9784
04a20     F2 00 68 FC | 	wrlong	#0, objptr
04a24     41 00 00 FF 
04a28     40 E4 85 F1 | 	sub	objptr, ##33344
04a2c                 | LR__0410
04a2c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04a2c     02 24 0E F2 | 	cmp	local04, #2 wz
04a30     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04a34     2B 00 00 AF 
04a38     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04a3c     F2 28 02 AB |  if_e	rdlong	local06, objptr
04a40     02 00 00 AF 
04a44     38 E4 05 A1 |  if_e	add	objptr, ##1080
04a48     F2 04 68 AC |  if_e	wrlong	#2, objptr
04a4c     2E 00 00 AF 
04a50     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04a54                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04a54     04 24 0E F2 | 	cmp	local04, #4 wz
04a58     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04a5c     2C 00 90 5D |  if_ne	jmp	#LR__0411
04a60     2B 00 00 FF 
04a64     D8 E5 05 F1 | 	add	objptr, ##22488
04a68     F2 28 02 FB | 	rdlong	local06, objptr
04a6c     02 00 00 FF 
04a70     30 E4 05 F1 | 	add	objptr, ##1072
04a74     F2 06 68 FC | 	wrlong	#3, objptr
04a78     13 00 00 FF 
04a7c     38 E4 05 F1 | 	add	objptr, ##9784
04a80     F2 04 68 FC | 	wrlong	#2, objptr
04a84     41 00 00 FF 
04a88     40 E4 85 F1 | 	sub	objptr, ##33344
04a8c                 | LR__0411
04a8c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04a8c     05 24 0E F2 | 	cmp	local04, #5 wz
04a90     3C 00 90 5D |  if_ne	jmp	#LR__0412
04a94     2E 00 00 FF 
04a98     08 E4 05 F1 | 	add	objptr, ##23560
04a9c     F2 FA 01 FB | 	rdlong	result1, objptr
04aa0     FD 28 02 F6 | 	mov	local06, result1
04aa4     03 28 66 F0 | 	shl	local06, #3
04aa8     02 00 00 FF 
04aac     38 E4 85 F1 | 	sub	objptr, ##1080
04ab0     F2 28 02 F1 | 	add	local06, objptr
04ab4     14 29 02 FB | 	rdlong	local06, local06
04ab8     02 FA 05 F1 | 	add	result1, #2
04abc     02 00 00 FF 
04ac0     38 E4 05 F1 | 	add	objptr, ##1080
04ac4     F2 FA 61 FC | 	wrlong	result1, objptr
04ac8     2E 00 00 FF 
04acc     08 E4 85 F1 | 	sub	objptr, ##23560
04ad0                 | LR__0412
04ad0     14 13 02 F6 | 	mov	arg01, local06
04ad4     01 14 06 F6 | 	mov	arg02, #1
04ad8     D0 24 B1 FD | 	call	#__system__Right_S
04adc     04 28 B0 FD | 	call	#_expr
04ae0                 | '  
04ae0                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04ae0                 | ' 
04ae0                 | ' suffix2$=right$(varname2$,1)
04ae0                 | ' expr()
04ae0                 | ' 
04ae0                 | ' 
04ae0                 | ' if varnum>0 then
04ae0     2B 00 00 FF 
04ae4     CC E5 05 F1 | 	add	objptr, ##22476
04ae8     F2 2A 02 FB | 	rdlong	local07, objptr
04aec     2B 00 00 FF 
04af0     CC E5 85 F1 | 	sub	objptr, ##22476
04af4     01 2A 56 F2 | 	cmps	local07, #1 wc
04af8     58 00 90 CD |  if_b	jmp	#LR__0415
04afc                 | '   for i=0 to varnum-1
04afc     00 2C 06 F6 | 	mov	local08, #0
04b00     2B 00 00 FF 
04b04     CC E5 05 F1 | 	add	objptr, ##22476
04b08     F2 2E 02 FB | 	rdlong	local09, objptr
04b0c     2B 00 00 FF 
04b10     CC E5 85 F1 | 	sub	objptr, ##22476
04b14                 | LR__0413
04b14     17 2D 52 F2 | 	cmps	local08, local09 wc
04b18     38 00 90 3D |  if_ae	jmp	#LR__0414
04b1c                 | '     if variables(i).name=varname2$ then j=i : exit
04b1c     16 2B 02 F6 | 	mov	local07, local08
04b20     04 2A 66 F0 | 	shl	local07, #4
04b24     0B 00 00 FF 
04b28     CC E5 05 F1 | 	add	objptr, ##6092
04b2c     F2 2A 02 F1 | 	add	local07, objptr
04b30     15 13 02 FB | 	rdlong	arg01, local07
04b34     14 15 02 F6 | 	mov	arg02, local06
04b38     0B 00 00 FF 
04b3c     CC E5 85 F1 | 	sub	objptr, ##6092
04b40     F8 03 B1 FD | 	call	#__system___string_cmp
04b44     00 FA 0D F2 | 	cmp	result1, #0 wz
04b48     16 27 02 A6 |  if_e	mov	local05, local08
04b4c     01 2C 06 51 |  if_ne	add	local08, #1
04b50     C0 FF 9F 5D |  if_ne	jmp	#LR__0413
04b54                 | LR__0414
04b54                 | LR__0415
04b54                 | ' if  j=-1 andalso varnum<maxvars then   
04b54     FF FF 7F FF 
04b58     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04b5c     60 00 90 5D |  if_ne	jmp	#LR__0416
04b60     2B 00 00 FF 
04b64     CC E5 05 F1 | 	add	objptr, ##22476
04b68     F2 2A 02 FB | 	rdlong	local07, objptr
04b6c     2B 00 00 FF 
04b70     CC E5 85 F1 | 	sub	objptr, ##22476
04b74     01 00 00 FF 
04b78     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04b7c     40 00 90 3D |  if_ae	jmp	#LR__0416
04b80     2B 00 00 FF 
04b84     CC E5 05 F1 | 	add	objptr, ##22476
04b88     F2 2E 02 FB | 	rdlong	local09, objptr
04b8c     04 2E 66 F0 | 	shl	local09, #4
04b90     20 00 00 FF 
04b94     00 E4 85 F1 | 	sub	objptr, ##16384
04b98     F2 2E 02 F1 | 	add	local09, objptr
04b9c     17 29 62 FC | 	wrlong	local06, local09
04ba0     20 00 00 FF 
04ba4     00 E4 05 F1 | 	add	objptr, ##16384
04ba8     F2 2A 02 FB | 	rdlong	local07, objptr
04bac     15 27 02 F6 | 	mov	local05, local07
04bb0     01 2A 06 F1 | 	add	local07, #1
04bb4     F2 2A 62 FC | 	wrlong	local07, objptr
04bb8     2B 00 00 FF 
04bbc     CC E5 85 F1 | 	sub	objptr, ##22476
04bc0                 | LR__0416
04bc0     13 1F 02 F6 | 	mov	local01, local05
04bc4     17 22 06 F6 | 	mov	local03, #23
04bc8     0F 2B 02 F6 | 	mov	local07, local01
04bcc     10 2F 02 F6 | 	mov	local09, local02
04bd0     11 1F 02 F6 | 	mov	local01, local03
04bd4     41 00 00 FF 
04bd8     40 E4 05 F1 | 	add	objptr, ##33344
04bdc     F2 2C 02 FB | 	rdlong	local08, objptr
04be0     16 29 02 F6 | 	mov	local06, local08
04be4     01 28 66 F0 | 	shl	local06, #1
04be8     16 29 02 F1 | 	add	local06, local08
04bec     02 28 66 F0 | 	shl	local06, #2
04bf0     03 00 00 FF 
04bf4     00 E4 85 F1 | 	sub	objptr, ##1536
04bf8     F2 28 02 F1 | 	add	local06, objptr
04bfc     14 2B 62 FC | 	wrlong	local07, local06
04c00     03 00 00 FF 
04c04     00 E4 05 F1 | 	add	objptr, ##1536
04c08     F2 2C 02 FB | 	rdlong	local08, objptr
04c0c     16 2B 02 F6 | 	mov	local07, local08
04c10     01 2A 66 F0 | 	shl	local07, #1
04c14     16 2B 02 F1 | 	add	local07, local08
04c18     02 2A 66 F0 | 	shl	local07, #2
04c1c     03 00 00 FF 
04c20     00 E4 85 F1 | 	sub	objptr, ##1536
04c24     F2 2A 02 F1 | 	add	local07, objptr
04c28     04 2A 06 F1 | 	add	local07, #4
04c2c     15 2F 62 FC | 	wrlong	local09, local07
04c30     03 00 00 FF 
04c34     00 E4 05 F1 | 	add	objptr, ##1536
04c38     F2 2E 02 FB | 	rdlong	local09, objptr
04c3c     17 2D 02 F6 | 	mov	local08, local09
04c40     01 2C 66 F0 | 	shl	local08, #1
04c44     17 2D 02 F1 | 	add	local08, local09
04c48     02 2C 66 F0 | 	shl	local08, #2
04c4c     03 00 00 FF 
04c50     00 E4 85 F1 | 	sub	objptr, ##1536
04c54     F2 2C 02 F1 | 	add	local08, objptr
04c58     08 2C 06 F1 | 	add	local08, #8
04c5c     16 1F 62 FC | 	wrlong	local01, local08
04c60     03 00 00 FF 
04c64     00 E4 05 F1 | 	add	objptr, ##1536
04c68     F2 2A 02 FB | 	rdlong	local07, objptr
04c6c     01 2A 06 F1 | 	add	local07, #1
04c70     F2 2A 62 FC | 	wrlong	local07, objptr
04c74     41 00 00 FF 
04c78     40 E4 85 F1 | 	sub	objptr, ##33344
04c7c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' 
04c7c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04c7c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04c7c     00 24 0E F2 | 	cmp	local04, #0 wz
04c80     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04c84     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04c88     38 00 90 5D |  if_ne	jmp	#LR__0417
04c8c     41 00 00 FF 
04c90     40 E4 05 F1 | 	add	objptr, ##33344
04c94     F2 1E 02 FB | 	rdlong	local01, objptr
04c98     0F 2F 02 F6 | 	mov	local09, local01
04c9c     01 2E 66 F0 | 	shl	local09, #1
04ca0     0F 2F 02 F1 | 	add	local09, local01
04ca4     02 2E 66 F0 | 	shl	local09, #2
04ca8     03 00 00 FF 
04cac     00 E4 85 F1 | 	sub	objptr, ##1536
04cb0     F2 2E 02 F1 | 	add	local09, objptr
04cb4     08 2E 06 F1 | 	add	local09, #8
04cb8     17 FD 6B FC | 	wrlong	#510, local09
04cbc     3E 00 00 FF 
04cc0     40 E4 85 F1 | 	sub	objptr, ##31808
04cc4                 | LR__0417
04cc4     A7 F0 03 F6 | 	mov	ptra, fp
04cc8     B2 00 A0 FD | 	call	#popregs_
04ccc                 | _compile_immediate_assign_ret
04ccc     2D 00 64 FD | 	ret
04cd0                 | 
04cd0                 | ' 
04cd0                 | ' ' ------------------ compile the line that is calling a command 
04cd0                 | ' 
04cd0                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
04cd0                 | _compile
04cd0     04 4A 05 F6 | 	mov	COUNT_, #4
04cd4     A8 00 A0 FD | 	call	#pushregs_
04cd8     09 1F 0A F6 | 	mov	local01, arg01 wz
04cdc     0A 21 02 F6 | 	mov	local02, arg02
04ce0     0B 23 02 F6 | 	mov	local03, arg03
04ce4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
04ce4                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
04ce4                 | '  
04ce4                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
04ce4                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
04ce4     0C 00 90 5D |  if_ne	jmp	#LR__0420
04ce8     00 12 06 F6 | 	mov	arg01, #0
04cec     3C F6 BF FD | 	call	#_compile_immediate
04cf0     A0 00 90 FD | 	jmp	#LR__0427
04cf4                 | LR__0420
04cf4     3E 00 00 FF 
04cf8     40 E4 05 F1 | 	add	objptr, ##31808
04cfc     F2 1E 62 FC | 	wrlong	local01, objptr
04d00     04 E4 05 F1 | 	add	objptr, #4
04d04     F2 20 62 FC | 	wrlong	local02, objptr
04d08     3E 00 00 FF 
04d0c     44 E4 85 F1 | 	sub	objptr, ##31812
04d10     11 13 02 F6 | 	mov	arg01, local03
04d14     01 12 06 F1 | 	add	arg01, #1
04d18     10 F6 BF FD | 	call	#_compile_immediate
04d1c     FD 24 0A F6 | 	mov	local04, result1 wz
04d20                 | ' 
04d20                 | ' ucompiledline(0)=alinemajor
04d20                 | ' ucompiledline(1)=alineminor
04d20                 | ' 
04d20                 | ' 
04d20                 | ' ' cont: 0: this is the first part of the line that will continue
04d20                 | ' ' 1 - this is the continuation of the line
04d20                 | ' ' 2 - this is the last continued line
04d20                 | ' ' 3 - this is the ome and only part
04d20                 | ' 
04d20                 | ' 
04d20                 | ' err=compile_immediate(cont+1) 
04d20                 | ' if err=0 then
04d20     6C 00 90 5D |  if_ne	jmp	#LR__0426
04d24                 | '   if cont=3 orelse cont=2 then 
04d24     03 22 0E F2 | 	cmp	local03, #3 wz
04d28     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04d2c     60 00 90 5D |  if_ne	jmp	#LR__0425
04d30                 | '     if alinemajor >lastline then 
04d30     41 00 00 FF 
04d34     4C E4 05 F1 | 	add	objptr, ##33356
04d38     F2 16 02 FB | 	rdlong	arg03, objptr
04d3c     41 00 00 FF 
04d40     4C E4 85 F1 | 	sub	objptr, ##33356
04d44     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04d48     0C 00 90 ED |  if_be	jmp	#LR__0421
04d4c     0F 13 02 F6 | 	mov	arg01, local01
04d50     F8 F4 BF FD | 	call	#_add_line_at_end
04d54     38 00 90 FD | 	jmp	#LR__0424
04d58                 | LR__0421
04d58     0F 13 02 F6 | 	mov	arg01, local01
04d5c     78 ED BF FD | 	call	#_deleteline
04d60                 | '       deleteline(alinemajor)  
04d60                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
04d60     41 00 00 FF 
04d64     4C E4 05 F1 | 	add	objptr, ##33356
04d68     F2 16 02 FB | 	rdlong	arg03, objptr
04d6c     41 00 00 FF 
04d70     4C E4 85 F1 | 	sub	objptr, ##33356
04d74     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04d78     0C 00 90 ED |  if_be	jmp	#LR__0422
04d7c     0F 13 02 F6 | 	mov	arg01, local01
04d80     C8 F4 BF FD | 	call	#_add_line_at_end
04d84     08 00 90 FD | 	jmp	#LR__0423
04d88                 | LR__0422
04d88     0F 13 02 F6 | 	mov	arg01, local01
04d8c     74 F2 BF FD | 	call	#_insertline
04d90                 | LR__0423
04d90                 | LR__0424
04d90                 | LR__0425
04d90                 | LR__0426
04d90                 | ' return err
04d90     12 FB 01 F6 | 	mov	result1, local04
04d94                 | LR__0427
04d94     A7 F0 03 F6 | 	mov	ptra, fp
04d98     B2 00 A0 FD | 	call	#popregs_
04d9c                 | _compile_ret
04d9c     2D 00 64 FD | 	ret
04da0                 | 
04da0                 | ' 
04da0                 | ' ' ------------------ compile the line that is assigning to a variable
04da0                 | ' 
04da0                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
04da0                 | _compile_assign
04da0     03 4A 05 F6 | 	mov	COUNT_, #3
04da4     A8 00 A0 FD | 	call	#pushregs_
04da8     09 1F 0A F6 | 	mov	local01, arg01 wz
04dac     0A 21 02 F6 | 	mov	local02, arg02
04db0     0B 23 02 F6 | 	mov	local03, arg03
04db4                 | ' 
04db4                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
04db4                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
04db4     0C 00 90 5D |  if_ne	jmp	#LR__0430
04db8     00 12 06 F6 | 	mov	arg01, #0
04dbc     28 FC BF FD | 	call	#_compile_immediate_assign
04dc0     94 00 90 FD | 	jmp	#LR__0436
04dc4                 | LR__0430
04dc4     3E 00 00 FF 
04dc8     40 E4 05 F1 | 	add	objptr, ##31808
04dcc     F2 1E 62 FC | 	wrlong	local01, objptr
04dd0     04 E4 05 F1 | 	add	objptr, #4
04dd4     F2 20 62 FC | 	wrlong	local02, objptr
04dd8     3E 00 00 FF 
04ddc     44 E4 85 F1 | 	sub	objptr, ##31812
04de0     11 13 02 F6 | 	mov	arg01, local03
04de4     01 12 06 F1 | 	add	arg01, #1
04de8     FC FB BF FD | 	call	#_compile_immediate_assign
04dec                 | ' 
04dec                 | ' ucompiledline(0)=alinemajor
04dec                 | ' ucompiledline(1)=alineminor
04dec                 | ' 
04dec                 | ' compile_immediate_assign(cont+1) 
04dec                 | ' 
04dec                 | ' if cont=3 orelse cont=2 then 
04dec     03 22 0E F2 | 	cmp	local03, #3 wz
04df0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
04df4     60 00 90 5D |  if_ne	jmp	#LR__0435
04df8                 | '   if alinemajor >lastline then 
04df8     41 00 00 FF 
04dfc     4C E4 05 F1 | 	add	objptr, ##33356
04e00     F2 16 02 FB | 	rdlong	arg03, objptr
04e04     41 00 00 FF 
04e08     4C E4 85 F1 | 	sub	objptr, ##33356
04e0c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04e10     0C 00 90 ED |  if_be	jmp	#LR__0431
04e14     0F 13 02 F6 | 	mov	arg01, local01
04e18     30 F4 BF FD | 	call	#_add_line_at_end
04e1c     38 00 90 FD | 	jmp	#LR__0434
04e20                 | LR__0431
04e20     0F 13 02 F6 | 	mov	arg01, local01
04e24     B0 EC BF FD | 	call	#_deleteline
04e28                 | '     deleteline(alinemajor)  
04e28                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
04e28     41 00 00 FF 
04e2c     4C E4 05 F1 | 	add	objptr, ##33356
04e30     F2 16 02 FB | 	rdlong	arg03, objptr
04e34     41 00 00 FF 
04e38     4C E4 85 F1 | 	sub	objptr, ##33356
04e3c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
04e40     0C 00 90 ED |  if_be	jmp	#LR__0432
04e44     0F 13 02 F6 | 	mov	arg01, local01
04e48     00 F4 BF FD | 	call	#_add_line_at_end
04e4c     08 00 90 FD | 	jmp	#LR__0433
04e50                 | LR__0432
04e50     0F 13 02 F6 | 	mov	arg01, local01
04e54     AC F1 BF FD | 	call	#_insertline
04e58                 | LR__0433
04e58                 | LR__0434
04e58                 | LR__0435
04e58                 | LR__0436
04e58     A7 F0 03 F6 | 	mov	ptra, fp
04e5c     B2 00 A0 FD | 	call	#popregs_
04e60                 | _compile_assign_ret
04e60     2D 00 64 FD | 	ret
04e64                 | 
04e64                 | ' 
04e64                 | ' sub compile_error(errno)
04e64                 | _compile_error
04e64     FF 04 06 F6 | 	mov	_var03, #255
04e68     01 07 02 F6 | 	mov	_var04, _var02
04e6c     02 09 02 F6 | 	mov	_var05, _var03
04e70     41 00 00 FF 
04e74     40 E4 05 F1 | 	add	objptr, ##33344
04e78     F2 0A 02 FB | 	rdlong	_var06, objptr
04e7c     05 0D 02 F6 | 	mov	_var07, _var06
04e80     01 0C 66 F0 | 	shl	_var07, #1
04e84     05 0D 02 F1 | 	add	_var07, _var06
04e88     02 0C 66 F0 | 	shl	_var07, #2
04e8c     03 00 00 FF 
04e90     00 E4 85 F1 | 	sub	objptr, ##1536
04e94     F2 0C 02 F1 | 	add	_var07, objptr
04e98     06 13 62 FC | 	wrlong	arg01, _var07
04e9c     03 00 00 FF 
04ea0     00 E4 05 F1 | 	add	objptr, ##1536
04ea4     F2 0C 02 FB | 	rdlong	_var07, objptr
04ea8     06 0B 02 F6 | 	mov	_var06, _var07
04eac     01 0A 66 F0 | 	shl	_var06, #1
04eb0     06 0B 02 F1 | 	add	_var06, _var07
04eb4     02 0A 66 F0 | 	shl	_var06, #2
04eb8     03 00 00 FF 
04ebc     00 E4 85 F1 | 	sub	objptr, ##1536
04ec0     F2 0A 02 F1 | 	add	_var06, objptr
04ec4     04 0A 06 F1 | 	add	_var06, #4
04ec8     05 07 62 FC | 	wrlong	_var04, _var06
04ecc     03 00 00 FF 
04ed0     00 E4 05 F1 | 	add	objptr, ##1536
04ed4     F2 0C 02 FB | 	rdlong	_var07, objptr
04ed8     06 0B 02 F6 | 	mov	_var06, _var07
04edc     01 0A 66 F0 | 	shl	_var06, #1
04ee0     06 0B 02 F1 | 	add	_var06, _var07
04ee4     02 0A 66 F0 | 	shl	_var06, #2
04ee8     03 00 00 FF 
04eec     00 E4 85 F1 | 	sub	objptr, ##1536
04ef0     F2 0A 02 F1 | 	add	_var06, objptr
04ef4     08 0A 06 F1 | 	add	_var06, #8
04ef8     05 09 62 FC | 	wrlong	_var05, _var06
04efc     03 00 00 FF 
04f00     00 E4 05 F1 | 	add	objptr, ##1536
04f04     F2 12 02 FB | 	rdlong	arg01, objptr
04f08     01 12 06 F1 | 	add	arg01, #1
04f0c     F2 12 62 FC | 	wrlong	arg01, objptr
04f10     41 00 00 FF 
04f14     40 E4 85 F1 | 	sub	objptr, ##33344
04f18                 | _compile_error_ret
04f18     2D 00 64 FD | 	ret
04f1c                 | 
04f1c                 | ' 
04f1c                 | ' 
04f1c                 | ' sub compile_unknown() 
04f1c                 | _compile_unknown
04f1c     FF 04 06 F6 | 	mov	_var03, #255
04f20     17 00 06 F6 | 	mov	_var01, #23
04f24     01 07 02 F6 | 	mov	_var04, _var02
04f28     02 01 02 F6 | 	mov	_var01, _var03
04f2c     41 00 00 FF 
04f30     40 E4 05 F1 | 	add	objptr, ##33344
04f34     F2 08 02 FB | 	rdlong	_var05, objptr
04f38     04 0B 02 F6 | 	mov	_var06, _var05
04f3c     01 0A 66 F0 | 	shl	_var06, #1
04f40     04 0B 02 F1 | 	add	_var06, _var05
04f44     02 0A 66 F0 | 	shl	_var06, #2
04f48     03 00 00 FF 
04f4c     00 E4 85 F1 | 	sub	objptr, ##1536
04f50     F2 0A 02 F1 | 	add	_var06, objptr
04f54     05 2F 68 FC | 	wrlong	#23, _var06
04f58     03 00 00 FF 
04f5c     00 E4 05 F1 | 	add	objptr, ##1536
04f60     F2 0A 02 FB | 	rdlong	_var06, objptr
04f64     05 09 02 F6 | 	mov	_var05, _var06
04f68     01 08 66 F0 | 	shl	_var05, #1
04f6c     05 09 02 F1 | 	add	_var05, _var06
04f70     02 08 66 F0 | 	shl	_var05, #2
04f74     03 00 00 FF 
04f78     00 E4 85 F1 | 	sub	objptr, ##1536
04f7c     F2 08 02 F1 | 	add	_var05, objptr
04f80     04 08 06 F1 | 	add	_var05, #4
04f84     04 07 62 FC | 	wrlong	_var04, _var05
04f88     03 00 00 FF 
04f8c     00 E4 05 F1 | 	add	objptr, ##1536
04f90     F2 0A 02 FB | 	rdlong	_var06, objptr
04f94     05 09 02 F6 | 	mov	_var05, _var06
04f98     01 08 66 F0 | 	shl	_var05, #1
04f9c     05 09 02 F1 | 	add	_var05, _var06
04fa0     02 08 66 F0 | 	shl	_var05, #2
04fa4     03 00 00 FF 
04fa8     00 E4 85 F1 | 	sub	objptr, ##1536
04fac     F2 08 02 F1 | 	add	_var05, objptr
04fb0     08 08 06 F1 | 	add	_var05, #8
04fb4     04 01 62 FC | 	wrlong	_var01, _var05
04fb8     03 00 00 FF 
04fbc     00 E4 05 F1 | 	add	objptr, ##1536
04fc0     F2 0A 02 FB | 	rdlong	_var06, objptr
04fc4     01 0A 06 F1 | 	add	_var06, #1
04fc8     F2 0A 62 FC | 	wrlong	_var06, objptr
04fcc     41 00 00 FF 
04fd0     40 E4 85 F1 | 	sub	objptr, ##33344
04fd4                 | _compile_unknown_ret
04fd4     2D 00 64 FD | 	ret
04fd8                 | 
04fd8                 | ' 
04fd8                 | ' function compile_converttoint() as integer
04fd8                 | _compile_converttoint
04fd8     06 4A 05 F6 | 	mov	COUNT_, #6
04fdc     A8 00 A0 FD | 	call	#pushregs_
04fe0     00 1E 06 F6 | 	mov	local01, #0
04fe4     FC 22 B0 FD | 	call	#_expr
04fe8     FD 24 0A F6 | 	mov	local04, result1 wz
04fec                 | ' err=0
04fec                 | ' t1.result.uresult=0
04fec                 | ' err=expr()
04fec                 | ' if err=0 then
04fec     C0 00 90 5D |  if_ne	jmp	#LR__0440
04ff0     16 22 06 F6 | 	mov	local03, #22
04ff4     0F 27 02 F6 | 	mov	local05, local01
04ff8     10 29 02 F6 | 	mov	local06, local02
04ffc     11 25 02 F6 | 	mov	local04, local03
05000     41 00 00 FF 
05004     40 E4 05 F1 | 	add	objptr, ##33344
05008     F2 1E 02 FB | 	rdlong	local01, objptr
0500c     0F FB 01 F6 | 	mov	result1, local01
05010     01 FA 65 F0 | 	shl	result1, #1
05014     0F FB 01 F1 | 	add	result1, local01
05018     02 FA 65 F0 | 	shl	result1, #2
0501c     03 00 00 FF 
05020     00 E4 85 F1 | 	sub	objptr, ##1536
05024     F2 FA 01 F1 | 	add	result1, objptr
05028     FD 26 62 FC | 	wrlong	local05, result1
0502c     03 00 00 FF 
05030     00 E4 05 F1 | 	add	objptr, ##1536
05034     F2 26 02 FB | 	rdlong	local05, objptr
05038     13 1F 02 F6 | 	mov	local01, local05
0503c     01 1E 66 F0 | 	shl	local01, #1
05040     13 1F 02 F1 | 	add	local01, local05
05044     02 1E 66 F0 | 	shl	local01, #2
05048     03 00 00 FF 
0504c     00 E4 85 F1 | 	sub	objptr, ##1536
05050     F2 1E 02 F1 | 	add	local01, objptr
05054     04 1E 06 F1 | 	add	local01, #4
05058     0F 29 62 FC | 	wrlong	local06, local01
0505c     03 00 00 FF 
05060     00 E4 05 F1 | 	add	objptr, ##1536
05064     F2 28 02 FB | 	rdlong	local06, objptr
05068     14 27 02 F6 | 	mov	local05, local06
0506c     01 26 66 F0 | 	shl	local05, #1
05070     14 27 02 F1 | 	add	local05, local06
05074     02 26 66 F0 | 	shl	local05, #2
05078     03 00 00 FF 
0507c     00 E4 85 F1 | 	sub	objptr, ##1536
05080     F2 26 02 F1 | 	add	local05, objptr
05084     08 26 06 F1 | 	add	local05, #8
05088     13 25 62 FC | 	wrlong	local04, local05
0508c     03 00 00 FF 
05090     00 E4 05 F1 | 	add	objptr, ##1536
05094     F2 26 02 FB | 	rdlong	local05, objptr
05098     01 26 06 F1 | 	add	local05, #1
0509c     F2 26 62 FC | 	wrlong	local05, objptr
050a0     41 00 00 FF 
050a4     40 E4 85 F1 | 	sub	objptr, ##33344
050a8                 | '   t1.result_type=fun_converttoint
050a8                 | '   compiledline(lineptr)=t1: lineptr+=1 
050a8                 | '   return 0
050a8     00 FA 05 F6 | 	mov	result1, #0
050ac     04 00 90 FD | 	jmp	#LR__0441
050b0                 | LR__0440
050b0                 | '   return err
050b0     12 FB 01 F6 | 	mov	result1, local04
050b4                 | LR__0441
050b4     A7 F0 03 F6 | 	mov	ptra, fp
050b8     B2 00 A0 FD | 	call	#popregs_
050bc                 | _compile_converttoint_ret
050bc     2D 00 64 FD | 	ret
050c0                 | 
050c0                 | ' 
050c0                 | ' 
050c0                 | ' function compile_fun_2p() as ulong
050c0                 | _compile_fun_2p
050c0     01 4A 05 F6 | 	mov	COUNT_, #1
050c4     A8 00 A0 FD | 	call	#pushregs_
050c8     18 22 B0 FD | 	call	#_expr
050cc                 | ' 
050cc                 | ' expr()
050cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
050cc     2E 00 00 FF 
050d0     08 E4 05 F1 | 	add	objptr, ##23560
050d4     F2 1E 02 FB | 	rdlong	local01, objptr
050d8     03 1E 66 F0 | 	shl	local01, #3
050dc     02 00 00 FF 
050e0     38 E4 85 F1 | 	sub	objptr, ##1080
050e4     F2 1E 02 F1 | 	add	local01, objptr
050e8     04 1E 06 F1 | 	add	local01, #4
050ec     0F 1F 02 FB | 	rdlong	local01, local01
050f0     11 1E 0E F2 | 	cmp	local01, #17 wz
050f4     2B 00 00 FF 
050f8     D0 E5 85 F1 | 	sub	objptr, ##22480
050fc     15 FA 05 56 |  if_ne	mov	result1, #21
05100     24 00 90 5D |  if_ne	jmp	#LR__0450
05104     2E 00 00 FF 
05108     08 E4 05 F1 | 	add	objptr, ##23560
0510c     F2 1E 02 FB | 	rdlong	local01, objptr
05110     01 1E 06 F1 | 	add	local01, #1
05114     F2 1E 62 FC | 	wrlong	local01, objptr
05118     2E 00 00 FF 
0511c     08 E4 85 F1 | 	sub	objptr, ##23560
05120     C0 21 B0 FD | 	call	#_expr
05124     00 FA 05 F6 | 	mov	result1, #0
05128                 | LR__0450
05128     A7 F0 03 F6 | 	mov	ptra, fp
0512c     B2 00 A0 FD | 	call	#popregs_
05130                 | _compile_fun_2p_ret
05130     2D 00 64 FD | 	ret
05134                 | 
05134                 | ' 
05134                 | ' function compile_fun_3p() as ulong
05134                 | _compile_fun_3p
05134     01 4A 05 F6 | 	mov	COUNT_, #1
05138     A8 00 A0 FD | 	call	#pushregs_
0513c     A4 21 B0 FD | 	call	#_expr
05140                 | ' 
05140                 | ' expr()
05140                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05140     2E 00 00 FF 
05144     08 E4 05 F1 | 	add	objptr, ##23560
05148     F2 1E 02 FB | 	rdlong	local01, objptr
0514c     03 1E 66 F0 | 	shl	local01, #3
05150     02 00 00 FF 
05154     38 E4 85 F1 | 	sub	objptr, ##1080
05158     F2 1E 02 F1 | 	add	local01, objptr
0515c     04 1E 06 F1 | 	add	local01, #4
05160     0F 1F 02 FB | 	rdlong	local01, local01
05164     11 1E 0E F2 | 	cmp	local01, #17 wz
05168     2B 00 00 FF 
0516c     D0 E5 85 F1 | 	sub	objptr, ##22480
05170     15 FA 05 56 |  if_ne	mov	result1, #21
05174     7C 00 90 5D |  if_ne	jmp	#LR__0460
05178     2E 00 00 FF 
0517c     08 E4 05 F1 | 	add	objptr, ##23560
05180     F2 1E 02 FB | 	rdlong	local01, objptr
05184     01 1E 06 F1 | 	add	local01, #1
05188     F2 1E 62 FC | 	wrlong	local01, objptr
0518c     2E 00 00 FF 
05190     08 E4 85 F1 | 	sub	objptr, ##23560
05194     4C 21 B0 FD | 	call	#_expr
05198                 | ' expr()
05198                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05198     2E 00 00 FF 
0519c     08 E4 05 F1 | 	add	objptr, ##23560
051a0     F2 1E 02 FB | 	rdlong	local01, objptr
051a4     03 1E 66 F0 | 	shl	local01, #3
051a8     02 00 00 FF 
051ac     38 E4 85 F1 | 	sub	objptr, ##1080
051b0     F2 1E 02 F1 | 	add	local01, objptr
051b4     04 1E 06 F1 | 	add	local01, #4
051b8     0F 1F 02 FB | 	rdlong	local01, local01
051bc     11 1E 0E F2 | 	cmp	local01, #17 wz
051c0     2B 00 00 FF 
051c4     D0 E5 85 F1 | 	sub	objptr, ##22480
051c8     15 FA 05 56 |  if_ne	mov	result1, #21
051cc     24 00 90 5D |  if_ne	jmp	#LR__0460
051d0     2E 00 00 FF 
051d4     08 E4 05 F1 | 	add	objptr, ##23560
051d8     F2 1E 02 FB | 	rdlong	local01, objptr
051dc     01 1E 06 F1 | 	add	local01, #1
051e0     F2 1E 62 FC | 	wrlong	local01, objptr
051e4     2E 00 00 FF 
051e8     08 E4 85 F1 | 	sub	objptr, ##23560
051ec     F4 20 B0 FD | 	call	#_expr
051f0     00 FA 05 F6 | 	mov	result1, #0
051f4                 | LR__0460
051f4     A7 F0 03 F6 | 	mov	ptra, fp
051f8     B2 00 A0 FD | 	call	#popregs_
051fc                 | _compile_fun_3p_ret
051fc     2D 00 64 FD | 	ret
05200                 | 
05200                 | ' 
05200                 | ' function compile_fun_4p() as ulong
05200                 | _compile_fun_4p
05200     01 4A 05 F6 | 	mov	COUNT_, #1
05204     A8 00 A0 FD | 	call	#pushregs_
05208     D8 20 B0 FD | 	call	#_expr
0520c                 | ' 
0520c                 | ' expr()
0520c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0520c     2E 00 00 FF 
05210     08 E4 05 F1 | 	add	objptr, ##23560
05214     F2 1E 02 FB | 	rdlong	local01, objptr
05218     03 1E 66 F0 | 	shl	local01, #3
0521c     02 00 00 FF 
05220     38 E4 85 F1 | 	sub	objptr, ##1080
05224     F2 1E 02 F1 | 	add	local01, objptr
05228     04 1E 06 F1 | 	add	local01, #4
0522c     0F 1F 02 FB | 	rdlong	local01, local01
05230     11 1E 0E F2 | 	cmp	local01, #17 wz
05234     2B 00 00 FF 
05238     D0 E5 85 F1 | 	sub	objptr, ##22480
0523c     15 FA 05 56 |  if_ne	mov	result1, #21
05240     D4 00 90 5D |  if_ne	jmp	#LR__0470
05244     2E 00 00 FF 
05248     08 E4 05 F1 | 	add	objptr, ##23560
0524c     F2 1E 02 FB | 	rdlong	local01, objptr
05250     01 1E 06 F1 | 	add	local01, #1
05254     F2 1E 62 FC | 	wrlong	local01, objptr
05258     2E 00 00 FF 
0525c     08 E4 85 F1 | 	sub	objptr, ##23560
05260     80 20 B0 FD | 	call	#_expr
05264                 | ' expr()
05264                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05264     2E 00 00 FF 
05268     08 E4 05 F1 | 	add	objptr, ##23560
0526c     F2 1E 02 FB | 	rdlong	local01, objptr
05270     03 1E 66 F0 | 	shl	local01, #3
05274     02 00 00 FF 
05278     38 E4 85 F1 | 	sub	objptr, ##1080
0527c     F2 1E 02 F1 | 	add	local01, objptr
05280     04 1E 06 F1 | 	add	local01, #4
05284     0F 1F 02 FB | 	rdlong	local01, local01
05288     11 1E 0E F2 | 	cmp	local01, #17 wz
0528c     2B 00 00 FF 
05290     D0 E5 85 F1 | 	sub	objptr, ##22480
05294     15 FA 05 56 |  if_ne	mov	result1, #21
05298     7C 00 90 5D |  if_ne	jmp	#LR__0470
0529c     2E 00 00 FF 
052a0     08 E4 05 F1 | 	add	objptr, ##23560
052a4     F2 1E 02 FB | 	rdlong	local01, objptr
052a8     01 1E 06 F1 | 	add	local01, #1
052ac     F2 1E 62 FC | 	wrlong	local01, objptr
052b0     2E 00 00 FF 
052b4     08 E4 85 F1 | 	sub	objptr, ##23560
052b8     28 20 B0 FD | 	call	#_expr
052bc                 | ' expr()
052bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
052bc     2E 00 00 FF 
052c0     08 E4 05 F1 | 	add	objptr, ##23560
052c4     F2 1E 02 FB | 	rdlong	local01, objptr
052c8     03 1E 66 F0 | 	shl	local01, #3
052cc     02 00 00 FF 
052d0     38 E4 85 F1 | 	sub	objptr, ##1080
052d4     F2 1E 02 F1 | 	add	local01, objptr
052d8     04 1E 06 F1 | 	add	local01, #4
052dc     0F 1F 02 FB | 	rdlong	local01, local01
052e0     11 1E 0E F2 | 	cmp	local01, #17 wz
052e4     2B 00 00 FF 
052e8     D0 E5 85 F1 | 	sub	objptr, ##22480
052ec     15 FA 05 56 |  if_ne	mov	result1, #21
052f0     24 00 90 5D |  if_ne	jmp	#LR__0470
052f4     2E 00 00 FF 
052f8     08 E4 05 F1 | 	add	objptr, ##23560
052fc     F2 1E 02 FB | 	rdlong	local01, objptr
05300     01 1E 06 F1 | 	add	local01, #1
05304     F2 1E 62 FC | 	wrlong	local01, objptr
05308     2E 00 00 FF 
0530c     08 E4 85 F1 | 	sub	objptr, ##23560
05310     D0 1F B0 FD | 	call	#_expr
05314     00 FA 05 F6 | 	mov	result1, #0
05318                 | LR__0470
05318     A7 F0 03 F6 | 	mov	ptra, fp
0531c     B2 00 A0 FD | 	call	#popregs_
05320                 | _compile_fun_4p_ret
05320     2D 00 64 FD | 	ret
05324                 | 
05324                 | ' 
05324                 | ' 
05324                 | ' function compile_fun_5p() as ulong
05324                 | _compile_fun_5p
05324     01 4A 05 F6 | 	mov	COUNT_, #1
05328     A8 00 A0 FD | 	call	#pushregs_
0532c     B4 1F B0 FD | 	call	#_expr
05330                 | ' 
05330                 | ' expr()
05330                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05330     2E 00 00 FF 
05334     08 E4 05 F1 | 	add	objptr, ##23560
05338     F2 1E 02 FB | 	rdlong	local01, objptr
0533c     03 1E 66 F0 | 	shl	local01, #3
05340     02 00 00 FF 
05344     38 E4 85 F1 | 	sub	objptr, ##1080
05348     F2 1E 02 F1 | 	add	local01, objptr
0534c     04 1E 06 F1 | 	add	local01, #4
05350     0F 1F 02 FB | 	rdlong	local01, local01
05354     11 1E 0E F2 | 	cmp	local01, #17 wz
05358     2B 00 00 FF 
0535c     D0 E5 85 F1 | 	sub	objptr, ##22480
05360     15 FA 05 56 |  if_ne	mov	result1, #21
05364     2C 01 90 5D |  if_ne	jmp	#LR__0480
05368     2E 00 00 FF 
0536c     08 E4 05 F1 | 	add	objptr, ##23560
05370     F2 1E 02 FB | 	rdlong	local01, objptr
05374     01 1E 06 F1 | 	add	local01, #1
05378     F2 1E 62 FC | 	wrlong	local01, objptr
0537c     2E 00 00 FF 
05380     08 E4 85 F1 | 	sub	objptr, ##23560
05384     5C 1F B0 FD | 	call	#_expr
05388                 | ' expr()
05388                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05388     2E 00 00 FF 
0538c     08 E4 05 F1 | 	add	objptr, ##23560
05390     F2 1E 02 FB | 	rdlong	local01, objptr
05394     03 1E 66 F0 | 	shl	local01, #3
05398     02 00 00 FF 
0539c     38 E4 85 F1 | 	sub	objptr, ##1080
053a0     F2 1E 02 F1 | 	add	local01, objptr
053a4     04 1E 06 F1 | 	add	local01, #4
053a8     0F 1F 02 FB | 	rdlong	local01, local01
053ac     11 1E 0E F2 | 	cmp	local01, #17 wz
053b0     2B 00 00 FF 
053b4     D0 E5 85 F1 | 	sub	objptr, ##22480
053b8     15 FA 05 56 |  if_ne	mov	result1, #21
053bc     D4 00 90 5D |  if_ne	jmp	#LR__0480
053c0     2E 00 00 FF 
053c4     08 E4 05 F1 | 	add	objptr, ##23560
053c8     F2 1E 02 FB | 	rdlong	local01, objptr
053cc     01 1E 06 F1 | 	add	local01, #1
053d0     F2 1E 62 FC | 	wrlong	local01, objptr
053d4     2E 00 00 FF 
053d8     08 E4 85 F1 | 	sub	objptr, ##23560
053dc     04 1F B0 FD | 	call	#_expr
053e0                 | ' expr()
053e0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
053e0     2E 00 00 FF 
053e4     08 E4 05 F1 | 	add	objptr, ##23560
053e8     F2 1E 02 FB | 	rdlong	local01, objptr
053ec     03 1E 66 F0 | 	shl	local01, #3
053f0     02 00 00 FF 
053f4     38 E4 85 F1 | 	sub	objptr, ##1080
053f8     F2 1E 02 F1 | 	add	local01, objptr
053fc     04 1E 06 F1 | 	add	local01, #4
05400     0F 1F 02 FB | 	rdlong	local01, local01
05404     11 1E 0E F2 | 	cmp	local01, #17 wz
05408     2B 00 00 FF 
0540c     D0 E5 85 F1 | 	sub	objptr, ##22480
05410     15 FA 05 56 |  if_ne	mov	result1, #21
05414     7C 00 90 5D |  if_ne	jmp	#LR__0480
05418     2E 00 00 FF 
0541c     08 E4 05 F1 | 	add	objptr, ##23560
05420     F2 1E 02 FB | 	rdlong	local01, objptr
05424     01 1E 06 F1 | 	add	local01, #1
05428     F2 1E 62 FC | 	wrlong	local01, objptr
0542c     2E 00 00 FF 
05430     08 E4 85 F1 | 	sub	objptr, ##23560
05434     AC 1E B0 FD | 	call	#_expr
05438                 | ' expr()
05438                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05438     2E 00 00 FF 
0543c     08 E4 05 F1 | 	add	objptr, ##23560
05440     F2 1E 02 FB | 	rdlong	local01, objptr
05444     03 1E 66 F0 | 	shl	local01, #3
05448     02 00 00 FF 
0544c     38 E4 85 F1 | 	sub	objptr, ##1080
05450     F2 1E 02 F1 | 	add	local01, objptr
05454     04 1E 06 F1 | 	add	local01, #4
05458     0F 1F 02 FB | 	rdlong	local01, local01
0545c     11 1E 0E F2 | 	cmp	local01, #17 wz
05460     2B 00 00 FF 
05464     D0 E5 85 F1 | 	sub	objptr, ##22480
05468     15 FA 05 56 |  if_ne	mov	result1, #21
0546c     24 00 90 5D |  if_ne	jmp	#LR__0480
05470     2E 00 00 FF 
05474     08 E4 05 F1 | 	add	objptr, ##23560
05478     F2 1E 02 FB | 	rdlong	local01, objptr
0547c     01 1E 06 F1 | 	add	local01, #1
05480     F2 1E 62 FC | 	wrlong	local01, objptr
05484     2E 00 00 FF 
05488     08 E4 85 F1 | 	sub	objptr, ##23560
0548c     54 1E B0 FD | 	call	#_expr
05490     00 FA 05 F6 | 	mov	result1, #0
05494                 | LR__0480
05494     A7 F0 03 F6 | 	mov	ptra, fp
05498     B2 00 A0 FD | 	call	#popregs_
0549c                 | _compile_fun_5p_ret
0549c     2D 00 64 FD | 	ret
054a0                 | 
054a0                 | ' 
054a0                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
054a0                 | _compile_fun_varp
054a0     02 4A 05 F6 | 	mov	COUNT_, #2
054a4     A8 00 A0 FD | 	call	#pushregs_
054a8     00 1E 06 F6 | 	mov	local01, #0
054ac                 | ' i=0
054ac                 | ' if lparts(ct).token<>token_end then
054ac     2E 00 00 FF 
054b0     08 E4 05 F1 | 	add	objptr, ##23560
054b4     F2 20 02 FB | 	rdlong	local02, objptr
054b8     03 20 66 F0 | 	shl	local02, #3
054bc     02 00 00 FF 
054c0     38 E4 85 F1 | 	sub	objptr, ##1080
054c4     F2 20 02 F1 | 	add	local02, objptr
054c8     04 20 06 F1 | 	add	local02, #4
054cc     10 21 02 FB | 	rdlong	local02, local02
054d0     FE 21 0E F2 | 	cmp	local02, #510 wz
054d4     2B 00 00 FF 
054d8     D0 E5 85 F1 | 	sub	objptr, ##22480
054dc     5C 00 90 AD |  if_e	jmp	#LR__0492
054e0                 | '   do
054e0                 | LR__0490
054e0     00 1E B0 FD | 	call	#_expr
054e4     01 1E 06 F1 | 	add	local01, #1
054e8                 | '   expr()
054e8                 | '    i+=1
054e8                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
054e8     2E 00 00 FF 
054ec     08 E4 05 F1 | 	add	objptr, ##23560
054f0     F2 20 02 FB | 	rdlong	local02, objptr
054f4     03 20 66 F0 | 	shl	local02, #3
054f8     02 00 00 FF 
054fc     38 E4 85 F1 | 	sub	objptr, ##1080
05500     F2 20 02 F1 | 	add	local02, objptr
05504     04 20 06 F1 | 	add	local02, #4
05508     10 21 02 FB | 	rdlong	local02, local02
0550c     11 20 0E F2 | 	cmp	local02, #17 wz
05510     2B 00 00 FF 
05514     D0 E5 85 F1 | 	sub	objptr, ##22480
05518     20 00 90 5D |  if_ne	jmp	#LR__0491
0551c     2E 00 00 FF 
05520     08 E4 05 F1 | 	add	objptr, ##23560
05524     F2 20 02 FB | 	rdlong	local02, objptr
05528     01 20 06 F1 | 	add	local02, #1
0552c     F2 20 62 FC | 	wrlong	local02, objptr
05530     2E 00 00 FF 
05534     08 E4 85 F1 | 	sub	objptr, ##23560
05538     A4 FF 9F FD | 	jmp	#LR__0490
0553c                 | LR__0491
0553c                 | LR__0492
0553c                 | ' return i
0553c     0F FB 01 F6 | 	mov	result1, local01
05540     A7 F0 03 F6 | 	mov	ptra, fp
05544     B2 00 A0 FD | 	call	#popregs_
05548                 | _compile_fun_varp_ret
05548     2D 00 64 FD | 	ret
0554c                 | 
0554c                 | ' 
0554c                 | ' 
0554c                 | ' function compile_int_fun_2p() as ulong
0554c                 | _compile_int_fun_2p
0554c     01 4A 05 F6 | 	mov	COUNT_, #1
05550     A8 00 A0 FD | 	call	#pushregs_
05554     80 FA BF FD | 	call	#_compile_converttoint
05558     FD 1E 02 F6 | 	mov	local01, result1
0555c                 | ' err=compile_converttoint() : if err>0 then return err
0555c     01 1E 56 F2 | 	cmps	local01, #1 wc
05560     0F FB 01 36 |  if_ae	mov	result1, local01
05564     58 00 90 3D |  if_ae	jmp	#LR__0500
05568                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05568     2E 00 00 FF 
0556c     08 E4 05 F1 | 	add	objptr, ##23560
05570     F2 1E 02 FB | 	rdlong	local01, objptr
05574     03 1E 66 F0 | 	shl	local01, #3
05578     02 00 00 FF 
0557c     38 E4 85 F1 | 	sub	objptr, ##1080
05580     F2 1E 02 F1 | 	add	local01, objptr
05584     04 1E 06 F1 | 	add	local01, #4
05588     0F 1F 02 FB | 	rdlong	local01, local01
0558c     11 1E 0E F2 | 	cmp	local01, #17 wz
05590     2B 00 00 FF 
05594     D0 E5 85 F1 | 	sub	objptr, ##22480
05598     15 FA 05 56 |  if_ne	mov	result1, #21
0559c     20 00 90 5D |  if_ne	jmp	#LR__0500
055a0     2E 00 00 FF 
055a4     08 E4 05 F1 | 	add	objptr, ##23560
055a8     F2 1E 02 FB | 	rdlong	local01, objptr
055ac     01 1E 06 F1 | 	add	local01, #1
055b0     F2 1E 62 FC | 	wrlong	local01, objptr
055b4     2E 00 00 FF 
055b8     08 E4 85 F1 | 	sub	objptr, ##23560
055bc     18 FA BF FD | 	call	#_compile_converttoint
055c0                 | ' err=compile_converttoint() 
055c0                 | ' return err
055c0                 | LR__0500
055c0     A7 F0 03 F6 | 	mov	ptra, fp
055c4     B2 00 A0 FD | 	call	#popregs_
055c8                 | _compile_int_fun_2p_ret
055c8     2D 00 64 FD | 	ret
055cc                 | 
055cc                 | ' 
055cc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
055cc                 | _compile_print
055cc     0B 4A 05 F6 | 	mov	COUNT_, #11
055d0     A8 00 A0 FD | 	call	#pushregs_
055d4     00 1E 06 F6 | 	mov	local01, #0
055d8     1D 22 06 F6 | 	mov	local03, #29
055dc                 | ' t1.result.uresult=0 : t1.result_type=result_uint
055dc                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
055dc     2E 00 00 FF 
055e0     08 E4 05 F1 | 	add	objptr, ##23560
055e4     F2 24 02 FB | 	rdlong	local04, objptr
055e8     03 24 66 F0 | 	shl	local04, #3
055ec     02 00 00 FF 
055f0     38 E4 85 F1 | 	sub	objptr, ##1080
055f4     F2 24 02 F1 | 	add	local04, objptr
055f8     04 24 06 F1 | 	add	local04, #4
055fc     12 25 02 FB | 	rdlong	local04, local04
05600     FE 25 0E F2 | 	cmp	local04, #510 wz
05604     2B 00 00 FF 
05608     D0 E5 85 F1 | 	sub	objptr, ##22480
0560c     68 01 90 5D |  if_ne	jmp	#LR__0510
05610     20 22 06 F6 | 	mov	local03, #32
05614     0F 27 02 F6 | 	mov	local05, local01
05618     10 29 02 F6 | 	mov	local06, local02
0561c     11 2B 02 F6 | 	mov	local07, local03
05620     41 00 00 FF 
05624     40 E4 05 F1 | 	add	objptr, ##33344
05628     F2 2C 02 FB | 	rdlong	local08, objptr
0562c     16 2F 02 F6 | 	mov	local09, local08
05630     01 2E 66 F0 | 	shl	local09, #1
05634     16 2F 02 F1 | 	add	local09, local08
05638     02 2E 66 F0 | 	shl	local09, #2
0563c     03 00 00 FF 
05640     00 E4 85 F1 | 	sub	objptr, ##1536
05644     F2 2E 02 F1 | 	add	local09, objptr
05648     17 27 62 FC | 	wrlong	local05, local09
0564c     03 00 00 FF 
05650     00 E4 05 F1 | 	add	objptr, ##1536
05654     F2 26 02 FB | 	rdlong	local05, objptr
05658     13 31 02 F6 | 	mov	local10, local05
0565c     01 30 66 F0 | 	shl	local10, #1
05660     13 31 02 F1 | 	add	local10, local05
05664     02 30 66 F0 | 	shl	local10, #2
05668     03 00 00 FF 
0566c     00 E4 85 F1 | 	sub	objptr, ##1536
05670     F2 30 02 F1 | 	add	local10, objptr
05674     04 30 06 F1 | 	add	local10, #4
05678     18 29 62 FC | 	wrlong	local06, local10
0567c     03 00 00 FF 
05680     00 E4 05 F1 | 	add	objptr, ##1536
05684     F2 26 02 FB | 	rdlong	local05, objptr
05688     13 33 02 F6 | 	mov	local11, local05
0568c     01 32 66 F0 | 	shl	local11, #1
05690     13 33 02 F1 | 	add	local11, local05
05694     02 32 66 F0 | 	shl	local11, #2
05698     03 00 00 FF 
0569c     00 E4 85 F1 | 	sub	objptr, ##1536
056a0     F2 32 02 F1 | 	add	local11, objptr
056a4     08 32 06 F1 | 	add	local11, #8
056a8     19 2B 62 FC | 	wrlong	local07, local11
056ac     03 00 00 FF 
056b0     00 E4 05 F1 | 	add	objptr, ##1536
056b4     F2 26 02 FB | 	rdlong	local05, objptr
056b8     01 26 06 F1 | 	add	local05, #1
056bc     F2 26 62 FC | 	wrlong	local05, objptr
056c0     44 22 06 F6 | 	mov	local03, #68
056c4     0F 27 02 F6 | 	mov	local05, local01
056c8     10 29 02 F6 | 	mov	local06, local02
056cc     11 2B 02 F6 | 	mov	local07, local03
056d0     F2 2C 02 FB | 	rdlong	local08, objptr
056d4     16 2F 02 F6 | 	mov	local09, local08
056d8     01 2E 66 F0 | 	shl	local09, #1
056dc     16 2F 02 F1 | 	add	local09, local08
056e0     02 2E 66 F0 | 	shl	local09, #2
056e4     03 00 00 FF 
056e8     00 E4 85 F1 | 	sub	objptr, ##1536
056ec     F2 2E 02 F1 | 	add	local09, objptr
056f0     17 27 62 FC | 	wrlong	local05, local09
056f4     03 00 00 FF 
056f8     00 E4 05 F1 | 	add	objptr, ##1536
056fc     F2 32 02 FB | 	rdlong	local11, objptr
05700     19 31 02 F6 | 	mov	local10, local11
05704     01 30 66 F0 | 	shl	local10, #1
05708     19 31 02 F1 | 	add	local10, local11
0570c     02 30 66 F0 | 	shl	local10, #2
05710     03 00 00 FF 
05714     00 E4 85 F1 | 	sub	objptr, ##1536
05718     F2 30 02 F1 | 	add	local10, objptr
0571c     04 30 06 F1 | 	add	local10, #4
05720     18 29 62 FC | 	wrlong	local06, local10
05724     03 00 00 FF 
05728     00 E4 05 F1 | 	add	objptr, ##1536
0572c     F2 30 02 FB | 	rdlong	local10, objptr
05730     18 33 02 F6 | 	mov	local11, local10
05734     01 32 66 F0 | 	shl	local11, #1
05738     18 33 02 F1 | 	add	local11, local10
0573c     02 32 66 F0 | 	shl	local11, #2
05740     03 00 00 FF 
05744     00 E4 85 F1 | 	sub	objptr, ##1536
05748     F2 32 02 F1 | 	add	local11, objptr
0574c     08 32 06 F1 | 	add	local11, #8
05750     19 2B 62 FC | 	wrlong	local07, local11
05754     03 00 00 FF 
05758     00 E4 05 F1 | 	add	objptr, ##1536
0575c     F2 26 02 FB | 	rdlong	local05, objptr
05760     01 26 06 F1 | 	add	local05, #1
05764     F2 26 62 FC | 	wrlong	local05, objptr
05768     41 00 00 FF 
0576c     40 E4 85 F1 | 	sub	objptr, ##33344
05770     00 FA 05 F6 | 	mov	result1, #0
05774     20 05 90 FD | 	jmp	#LR__0517
05778                 | LR__0510
05778                 | ' do
05778                 | LR__0511
05778     68 1B B0 FD | 	call	#_expr
0577c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0577c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0577c     2E 00 00 FF 
05780     08 E4 05 F1 | 	add	objptr, ##23560
05784     F2 24 02 FB | 	rdlong	local04, objptr
05788     03 24 66 F0 | 	shl	local04, #3
0578c     02 00 00 FF 
05790     38 E4 85 F1 | 	sub	objptr, ##1080
05794     F2 24 02 F1 | 	add	local04, objptr
05798     04 24 06 F1 | 	add	local04, #4
0579c     12 2D 02 FB | 	rdlong	local08, local04
057a0     11 2C 0E F2 | 	cmp	local08, #17 wz
057a4     2B 00 00 FF 
057a8     D0 E5 85 F1 | 	sub	objptr, ##22480
057ac     60 01 90 5D |  if_ne	jmp	#LR__0512
057b0     21 22 06 F6 | 	mov	local03, #33
057b4     0F 27 02 F6 | 	mov	local05, local01
057b8     10 29 02 F6 | 	mov	local06, local02
057bc     11 2B 02 F6 | 	mov	local07, local03
057c0     41 00 00 FF 
057c4     40 E4 05 F1 | 	add	objptr, ##33344
057c8     F2 2C 02 FB | 	rdlong	local08, objptr
057cc     16 2F 02 F6 | 	mov	local09, local08
057d0     01 2E 66 F0 | 	shl	local09, #1
057d4     16 2F 02 F1 | 	add	local09, local08
057d8     02 2E 66 F0 | 	shl	local09, #2
057dc     03 00 00 FF 
057e0     00 E4 85 F1 | 	sub	objptr, ##1536
057e4     F2 2E 02 F1 | 	add	local09, objptr
057e8     17 27 62 FC | 	wrlong	local05, local09
057ec     03 00 00 FF 
057f0     00 E4 05 F1 | 	add	objptr, ##1536
057f4     F2 32 02 FB | 	rdlong	local11, objptr
057f8     19 31 02 F6 | 	mov	local10, local11
057fc     01 30 66 F0 | 	shl	local10, #1
05800     19 31 02 F1 | 	add	local10, local11
05804     02 30 66 F0 | 	shl	local10, #2
05808     03 00 00 FF 
0580c     00 E4 85 F1 | 	sub	objptr, ##1536
05810     F2 30 02 F1 | 	add	local10, objptr
05814     04 30 06 F1 | 	add	local10, #4
05818     18 29 62 FC | 	wrlong	local06, local10
0581c     03 00 00 FF 
05820     00 E4 05 F1 | 	add	objptr, ##1536
05824     F2 26 02 FB | 	rdlong	local05, objptr
05828     13 33 02 F6 | 	mov	local11, local05
0582c     01 32 66 F0 | 	shl	local11, #1
05830     13 33 02 F1 | 	add	local11, local05
05834     02 32 66 F0 | 	shl	local11, #2
05838     03 00 00 FF 
0583c     00 E4 85 F1 | 	sub	objptr, ##1536
05840     F2 32 02 F1 | 	add	local11, objptr
05844     08 32 06 F1 | 	add	local11, #8
05848     19 2B 62 FC | 	wrlong	local07, local11
0584c     03 00 00 FF 
05850     00 E4 05 F1 | 	add	objptr, ##1536
05854     F2 26 02 FB | 	rdlong	local05, objptr
05858     01 26 06 F1 | 	add	local05, #1
0585c     F2 26 62 FC | 	wrlong	local05, objptr
05860     44 22 06 F6 | 	mov	local03, #68
05864     0F 27 02 F6 | 	mov	local05, local01
05868     10 29 02 F6 | 	mov	local06, local02
0586c     11 2B 02 F6 | 	mov	local07, local03
05870     F2 2C 02 FB | 	rdlong	local08, objptr
05874     16 2F 02 F6 | 	mov	local09, local08
05878     01 2E 66 F0 | 	shl	local09, #1
0587c     16 2F 02 F1 | 	add	local09, local08
05880     02 2E 66 F0 | 	shl	local09, #2
05884     03 00 00 FF 
05888     00 E4 85 F1 | 	sub	objptr, ##1536
0588c     F2 2E 02 F1 | 	add	local09, objptr
05890     17 27 62 FC | 	wrlong	local05, local09
05894     03 00 00 FF 
05898     00 E4 05 F1 | 	add	objptr, ##1536
0589c     F2 32 02 FB | 	rdlong	local11, objptr
058a0     19 31 02 F6 | 	mov	local10, local11
058a4     01 30 66 F0 | 	shl	local10, #1
058a8     19 31 02 F1 | 	add	local10, local11
058ac     02 30 66 F0 | 	shl	local10, #2
058b0     03 00 00 FF 
058b4     00 E4 85 F1 | 	sub	objptr, ##1536
058b8     F2 30 02 F1 | 	add	local10, objptr
058bc     04 30 06 F1 | 	add	local10, #4
058c0     18 29 62 FC | 	wrlong	local06, local10
058c4     03 00 00 FF 
058c8     00 E4 05 F1 | 	add	objptr, ##1536
058cc     F2 30 02 FB | 	rdlong	local10, objptr
058d0     18 33 02 F6 | 	mov	local11, local10
058d4     01 32 66 F0 | 	shl	local11, #1
058d8     18 33 02 F1 | 	add	local11, local10
058dc     02 32 66 F0 | 	shl	local11, #2
058e0     03 00 00 FF 
058e4     00 E4 85 F1 | 	sub	objptr, ##1536
058e8     F2 32 02 F1 | 	add	local11, objptr
058ec     08 32 06 F1 | 	add	local11, #8
058f0     19 2B 62 FC | 	wrlong	local07, local11
058f4     03 00 00 FF 
058f8     00 E4 05 F1 | 	add	objptr, ##1536
058fc     F2 26 02 FB | 	rdlong	local05, objptr
05900     01 26 06 F1 | 	add	local05, #1
05904     F2 26 62 FC | 	wrlong	local05, objptr
05908     41 00 00 FF 
0590c     40 E4 85 F1 | 	sub	objptr, ##33344
05910                 | LR__0512
05910                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05910     2E 00 00 FF 
05914     08 E4 05 F1 | 	add	objptr, ##23560
05918     F2 24 02 FB | 	rdlong	local04, objptr
0591c     03 24 66 F0 | 	shl	local04, #3
05920     02 00 00 FF 
05924     38 E4 85 F1 | 	sub	objptr, ##1080
05928     F2 24 02 F1 | 	add	local04, objptr
0592c     04 24 06 F1 | 	add	local04, #4
05930     12 2D 02 FB | 	rdlong	local08, local04
05934     12 2C 0E F2 | 	cmp	local08, #18 wz
05938     2B 00 00 FF 
0593c     D0 E5 85 F1 | 	sub	objptr, ##22480
05940     60 01 90 5D |  if_ne	jmp	#LR__0513
05944     22 22 06 F6 | 	mov	local03, #34
05948     0F 27 02 F6 | 	mov	local05, local01
0594c     10 29 02 F6 | 	mov	local06, local02
05950     11 2B 02 F6 | 	mov	local07, local03
05954     41 00 00 FF 
05958     40 E4 05 F1 | 	add	objptr, ##33344
0595c     F2 2C 02 FB | 	rdlong	local08, objptr
05960     16 2F 02 F6 | 	mov	local09, local08
05964     01 2E 66 F0 | 	shl	local09, #1
05968     16 2F 02 F1 | 	add	local09, local08
0596c     02 2E 66 F0 | 	shl	local09, #2
05970     03 00 00 FF 
05974     00 E4 85 F1 | 	sub	objptr, ##1536
05978     F2 2E 02 F1 | 	add	local09, objptr
0597c     17 27 62 FC | 	wrlong	local05, local09
05980     03 00 00 FF 
05984     00 E4 05 F1 | 	add	objptr, ##1536
05988     F2 32 02 FB | 	rdlong	local11, objptr
0598c     19 31 02 F6 | 	mov	local10, local11
05990     01 30 66 F0 | 	shl	local10, #1
05994     19 31 02 F1 | 	add	local10, local11
05998     02 30 66 F0 | 	shl	local10, #2
0599c     03 00 00 FF 
059a0     00 E4 85 F1 | 	sub	objptr, ##1536
059a4     F2 30 02 F1 | 	add	local10, objptr
059a8     04 30 06 F1 | 	add	local10, #4
059ac     18 29 62 FC | 	wrlong	local06, local10
059b0     03 00 00 FF 
059b4     00 E4 05 F1 | 	add	objptr, ##1536
059b8     F2 26 02 FB | 	rdlong	local05, objptr
059bc     13 33 02 F6 | 	mov	local11, local05
059c0     01 32 66 F0 | 	shl	local11, #1
059c4     13 33 02 F1 | 	add	local11, local05
059c8     02 32 66 F0 | 	shl	local11, #2
059cc     03 00 00 FF 
059d0     00 E4 85 F1 | 	sub	objptr, ##1536
059d4     F2 32 02 F1 | 	add	local11, objptr
059d8     08 32 06 F1 | 	add	local11, #8
059dc     19 2B 62 FC | 	wrlong	local07, local11
059e0     03 00 00 FF 
059e4     00 E4 05 F1 | 	add	objptr, ##1536
059e8     F2 26 02 FB | 	rdlong	local05, objptr
059ec     01 26 06 F1 | 	add	local05, #1
059f0     F2 26 62 FC | 	wrlong	local05, objptr
059f4     44 22 06 F6 | 	mov	local03, #68
059f8     0F 27 02 F6 | 	mov	local05, local01
059fc     10 29 02 F6 | 	mov	local06, local02
05a00     11 2B 02 F6 | 	mov	local07, local03
05a04     F2 2C 02 FB | 	rdlong	local08, objptr
05a08     16 2F 02 F6 | 	mov	local09, local08
05a0c     01 2E 66 F0 | 	shl	local09, #1
05a10     16 2F 02 F1 | 	add	local09, local08
05a14     02 2E 66 F0 | 	shl	local09, #2
05a18     03 00 00 FF 
05a1c     00 E4 85 F1 | 	sub	objptr, ##1536
05a20     F2 2E 02 F1 | 	add	local09, objptr
05a24     17 27 62 FC | 	wrlong	local05, local09
05a28     03 00 00 FF 
05a2c     00 E4 05 F1 | 	add	objptr, ##1536
05a30     F2 32 02 FB | 	rdlong	local11, objptr
05a34     19 31 02 F6 | 	mov	local10, local11
05a38     01 30 66 F0 | 	shl	local10, #1
05a3c     19 31 02 F1 | 	add	local10, local11
05a40     02 30 66 F0 | 	shl	local10, #2
05a44     03 00 00 FF 
05a48     00 E4 85 F1 | 	sub	objptr, ##1536
05a4c     F2 30 02 F1 | 	add	local10, objptr
05a50     04 30 06 F1 | 	add	local10, #4
05a54     18 29 62 FC | 	wrlong	local06, local10
05a58     03 00 00 FF 
05a5c     00 E4 05 F1 | 	add	objptr, ##1536
05a60     F2 30 02 FB | 	rdlong	local10, objptr
05a64     18 33 02 F6 | 	mov	local11, local10
05a68     01 32 66 F0 | 	shl	local11, #1
05a6c     18 33 02 F1 | 	add	local11, local10
05a70     02 32 66 F0 | 	shl	local11, #2
05a74     03 00 00 FF 
05a78     00 E4 85 F1 | 	sub	objptr, ##1536
05a7c     F2 32 02 F1 | 	add	local11, objptr
05a80     08 32 06 F1 | 	add	local11, #8
05a84     19 2B 62 FC | 	wrlong	local07, local11
05a88     03 00 00 FF 
05a8c     00 E4 05 F1 | 	add	objptr, ##1536
05a90     F2 26 02 FB | 	rdlong	local05, objptr
05a94     01 26 06 F1 | 	add	local05, #1
05a98     F2 26 62 FC | 	wrlong	local05, objptr
05a9c     41 00 00 FF 
05aa0     40 E4 85 F1 | 	sub	objptr, ##33344
05aa4                 | LR__0513
05aa4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05aa4     2E 00 00 FF 
05aa8     08 E4 05 F1 | 	add	objptr, ##23560
05aac     F2 24 02 FB | 	rdlong	local04, objptr
05ab0     03 24 66 F0 | 	shl	local04, #3
05ab4     02 00 00 FF 
05ab8     38 E4 85 F1 | 	sub	objptr, ##1080
05abc     F2 24 02 F1 | 	add	local04, objptr
05ac0     04 24 06 F1 | 	add	local04, #4
05ac4     12 2D 02 FB | 	rdlong	local08, local04
05ac8     FE 2D 0E F2 | 	cmp	local08, #510 wz
05acc     2B 00 00 FF 
05ad0     D0 E5 85 F1 | 	sub	objptr, ##22480
05ad4     B8 00 90 5D |  if_ne	jmp	#LR__0514
05ad8     44 22 06 F6 | 	mov	local03, #68
05adc     0F 27 02 F6 | 	mov	local05, local01
05ae0     10 29 02 F6 | 	mov	local06, local02
05ae4     11 2B 02 F6 | 	mov	local07, local03
05ae8     41 00 00 FF 
05aec     40 E4 05 F1 | 	add	objptr, ##33344
05af0     F2 2C 02 FB | 	rdlong	local08, objptr
05af4     16 2F 02 F6 | 	mov	local09, local08
05af8     01 2E 66 F0 | 	shl	local09, #1
05afc     16 2F 02 F1 | 	add	local09, local08
05b00     02 2E 66 F0 | 	shl	local09, #2
05b04     03 00 00 FF 
05b08     00 E4 85 F1 | 	sub	objptr, ##1536
05b0c     F2 2E 02 F1 | 	add	local09, objptr
05b10     17 27 62 FC | 	wrlong	local05, local09
05b14     03 00 00 FF 
05b18     00 E4 05 F1 | 	add	objptr, ##1536
05b1c     F2 32 02 FB | 	rdlong	local11, objptr
05b20     19 31 02 F6 | 	mov	local10, local11
05b24     01 30 66 F0 | 	shl	local10, #1
05b28     19 31 02 F1 | 	add	local10, local11
05b2c     02 30 66 F0 | 	shl	local10, #2
05b30     03 00 00 FF 
05b34     00 E4 85 F1 | 	sub	objptr, ##1536
05b38     F2 30 02 F1 | 	add	local10, objptr
05b3c     04 30 06 F1 | 	add	local10, #4
05b40     18 29 62 FC | 	wrlong	local06, local10
05b44     03 00 00 FF 
05b48     00 E4 05 F1 | 	add	objptr, ##1536
05b4c     F2 30 02 FB | 	rdlong	local10, objptr
05b50     18 33 02 F6 | 	mov	local11, local10
05b54     01 32 66 F0 | 	shl	local11, #1
05b58     18 33 02 F1 | 	add	local11, local10
05b5c     02 32 66 F0 | 	shl	local11, #2
05b60     03 00 00 FF 
05b64     00 E4 85 F1 | 	sub	objptr, ##1536
05b68     F2 32 02 F1 | 	add	local11, objptr
05b6c     08 32 06 F1 | 	add	local11, #8
05b70     19 2B 62 FC | 	wrlong	local07, local11
05b74     03 00 00 FF 
05b78     00 E4 05 F1 | 	add	objptr, ##1536
05b7c     F2 26 02 FB | 	rdlong	local05, objptr
05b80     01 26 06 F1 | 	add	local05, #1
05b84     F2 26 62 FC | 	wrlong	local05, objptr
05b88     41 00 00 FF 
05b8c     40 E4 85 F1 | 	sub	objptr, ##33344
05b90                 | LR__0514
05b90                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05b90     2E 00 00 FF 
05b94     08 E4 05 F1 | 	add	objptr, ##23560
05b98     F2 24 02 FB | 	rdlong	local04, objptr
05b9c     03 24 66 F0 | 	shl	local04, #3
05ba0     02 00 00 FF 
05ba4     38 E4 85 F1 | 	sub	objptr, ##1080
05ba8     F2 24 02 F1 | 	add	local04, objptr
05bac     04 24 06 F1 | 	add	local04, #4
05bb0     12 2D 02 FB | 	rdlong	local08, local04
05bb4     11 2C 0E F2 | 	cmp	local08, #17 wz
05bb8     2B 00 00 FF 
05bbc     D0 E5 85 F1 | 	sub	objptr, ##22480
05bc0     6C 00 90 AD |  if_e	jmp	#LR__0515
05bc4     2E 00 00 FF 
05bc8     08 E4 05 F1 | 	add	objptr, ##23560
05bcc     F2 2C 02 FB | 	rdlong	local08, objptr
05bd0     03 2C 66 F0 | 	shl	local08, #3
05bd4     02 00 00 FF 
05bd8     38 E4 85 F1 | 	sub	objptr, ##1080
05bdc     F2 2C 02 F1 | 	add	local08, objptr
05be0     04 2C 06 F1 | 	add	local08, #4
05be4     16 2D 02 FB | 	rdlong	local08, local08
05be8     12 2C 0E F2 | 	cmp	local08, #18 wz
05bec     2B 00 00 FF 
05bf0     D0 E5 85 F1 | 	sub	objptr, ##22480
05bf4     38 00 90 AD |  if_e	jmp	#LR__0515
05bf8     2E 00 00 FF 
05bfc     08 E4 05 F1 | 	add	objptr, ##23560
05c00     F2 32 02 FB | 	rdlong	local11, objptr
05c04     03 32 66 F0 | 	shl	local11, #3
05c08     02 00 00 FF 
05c0c     38 E4 85 F1 | 	sub	objptr, ##1080
05c10     F2 32 02 F1 | 	add	local11, objptr
05c14     04 32 06 F1 | 	add	local11, #4
05c18     19 33 02 FB | 	rdlong	local11, local11
05c1c     FE 33 0E F2 | 	cmp	local11, #510 wz
05c20     2B 00 00 FF 
05c24     D0 E5 85 F1 | 	sub	objptr, ##22480
05c28     16 FA 05 56 |  if_ne	mov	result1, #22
05c2c     68 00 90 5D |  if_ne	jmp	#LR__0517
05c30                 | LR__0515
05c30     2E 00 00 FF 
05c34     08 E4 05 F1 | 	add	objptr, ##23560
05c38     F2 24 02 FB | 	rdlong	local04, objptr
05c3c     01 24 06 F1 | 	add	local04, #1
05c40     F2 24 62 FC | 	wrlong	local04, objptr
05c44     03 24 66 F0 | 	shl	local04, #3
05c48     02 00 00 FF 
05c4c     38 E4 85 F1 | 	sub	objptr, ##1080
05c50     F2 24 02 F1 | 	add	local04, objptr
05c54     04 24 06 F1 | 	add	local04, #4
05c58     12 2D 02 FB | 	rdlong	local08, local04
05c5c     FE 2D 0E F2 | 	cmp	local08, #510 wz
05c60     2B 00 00 FF 
05c64     D0 E5 85 F1 | 	sub	objptr, ##22480
05c68     28 00 90 AD |  if_e	jmp	#LR__0516
05c6c     2E 00 00 FF 
05c70     08 E4 05 F1 | 	add	objptr, ##23560
05c74     F2 32 02 FB | 	rdlong	local11, objptr
05c78     0E 00 00 FF 
05c7c     1C E4 05 F1 | 	add	objptr, ##7196
05c80     F2 30 02 FB | 	rdlong	local10, objptr
05c84     3C 00 00 FF 
05c88     24 E4 85 F1 | 	sub	objptr, ##30756
05c8c     18 33 52 F2 | 	cmps	local11, local10 wc
05c90     E4 FA 9F CD |  if_b	jmp	#LR__0511
05c94                 | LR__0516
05c94                 | ' return 0
05c94     00 FA 05 F6 | 	mov	result1, #0
05c98                 | LR__0517
05c98     A7 F0 03 F6 | 	mov	ptra, fp
05c9c     B2 00 A0 FD | 	call	#popregs_
05ca0                 | _compile_print_ret
05ca0     2D 00 64 FD | 	ret
05ca4                 | 
05ca4                 | ' 
05ca4                 | ' function compile_if() as ulong  
05ca4                 | _compile_if
05ca4     05 4A 05 F6 | 	mov	COUNT_, #5
05ca8     A8 00 A0 FD | 	call	#pushregs_
05cac                 | _compile_if_enter
05cac     28 F3 BF FD | 	call	#_compile_converttoint
05cb0                 | ' return err
05cb0     2E 00 00 FF 
05cb4     08 E4 05 F1 | 	add	objptr, ##23560
05cb8     F2 FA 01 FB | 	rdlong	result1, objptr
05cbc     01 FA 05 F1 | 	add	result1, #1
05cc0     F2 FA 61 FC | 	wrlong	result1, objptr
05cc4     58 22 06 F6 | 	mov	local03, #88
05cc8     0F 25 02 F6 | 	mov	local04, local01
05ccc     10 27 02 F6 | 	mov	local05, local02
05cd0     11 1F 02 F6 | 	mov	local01, local03
05cd4     13 00 00 FF 
05cd8     38 E4 05 F1 | 	add	objptr, ##9784
05cdc     F2 12 02 FB | 	rdlong	arg01, objptr
05ce0     09 FB 01 F6 | 	mov	result1, arg01
05ce4     01 FA 65 F0 | 	shl	result1, #1
05ce8     09 FB 01 F1 | 	add	result1, arg01
05cec     02 FA 65 F0 | 	shl	result1, #2
05cf0     03 00 00 FF 
05cf4     00 E4 85 F1 | 	sub	objptr, ##1536
05cf8     F2 FA 01 F1 | 	add	result1, objptr
05cfc     FD 24 62 FC | 	wrlong	local04, result1
05d00     03 00 00 FF 
05d04     00 E4 05 F1 | 	add	objptr, ##1536
05d08     F2 12 02 FB | 	rdlong	arg01, objptr
05d0c     09 25 02 F6 | 	mov	local04, arg01
05d10     01 24 66 F0 | 	shl	local04, #1
05d14     09 25 02 F1 | 	add	local04, arg01
05d18     02 24 66 F0 | 	shl	local04, #2
05d1c     03 00 00 FF 
05d20     00 E4 85 F1 | 	sub	objptr, ##1536
05d24     F2 24 02 F1 | 	add	local04, objptr
05d28     04 24 06 F1 | 	add	local04, #4
05d2c     12 27 62 FC | 	wrlong	local05, local04
05d30     03 00 00 FF 
05d34     00 E4 05 F1 | 	add	objptr, ##1536
05d38     F2 24 02 FB | 	rdlong	local04, objptr
05d3c     12 27 02 F6 | 	mov	local05, local04
05d40     01 26 66 F0 | 	shl	local05, #1
05d44     12 27 02 F1 | 	add	local05, local04
05d48     02 26 66 F0 | 	shl	local05, #2
05d4c     03 00 00 FF 
05d50     00 E4 85 F1 | 	sub	objptr, ##1536
05d54     F2 26 02 F1 | 	add	local05, objptr
05d58     08 26 06 F1 | 	add	local05, #8
05d5c     13 1F 62 FC | 	wrlong	local01, local05
05d60     03 00 00 FF 
05d64     00 E4 05 F1 | 	add	objptr, ##1536
05d68     F2 24 02 FB | 	rdlong	local04, objptr
05d6c     01 24 06 F1 | 	add	local04, #1
05d70     F2 24 62 FC | 	wrlong	local04, objptr
05d74                 | ' 
05d74                 | ' 'print "In compile_if"
05d74                 | ' compile_int_fun_1p()
05d74                 | ' cmd=lparts(ct).token : ct+=1
05d74                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
05d74                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
05d74                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05d74     13 00 00 FF 
05d78     38 E4 85 F1 | 	sub	objptr, ##9784
05d7c     F2 26 02 FB | 	rdlong	local05, objptr
05d80     01 26 06 F1 | 	add	local05, #1
05d84     03 26 66 F0 | 	shl	local05, #3
05d88     02 00 00 FF 
05d8c     38 E4 85 F1 | 	sub	objptr, ##1080
05d90     F2 26 02 F1 | 	add	local05, objptr
05d94     13 13 02 FB | 	rdlong	arg01, local05
05d98     2B 00 00 FF 
05d9c     D0 E5 85 F1 | 	sub	objptr, ##22480
05da0                 | ' 
05da0                 | ' select case s
05da0     21 01 00 FF 
05da4     6E 14 06 F6 | 	mov	arg02, ##@LR__4184
05da8     90 F1 B0 FD | 	call	#__system___string_cmp
05dac     00 FA 0D F2 | 	cmp	result1, #0 wz
05db0     1B FA 05 A6 |  if_e	mov	result1, #27
05db4     00 FA 05 56 |  if_ne	mov	result1, #0
05db8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dbc     0C 00 90 AD |  if_e	jmp	#LR__0520
05dc0     05 12 06 F6 | 	mov	arg01, #5
05dc4     20 EC BF FD | 	call	#_compile_immediate_assign
05dc8     08 00 90 FD | 	jmp	#LR__0521
05dcc                 | LR__0520
05dcc     05 12 06 F6 | 	mov	arg01, #5
05dd0     58 E5 BF FD | 	call	#_compile_immediate
05dd4                 | LR__0521
05dd4                 | ' 
05dd4                 | ' 
05dd4                 | ' return 0
05dd4     00 FA 05 F6 | 	mov	result1, #0
05dd8     A7 F0 03 F6 | 	mov	ptra, fp
05ddc     B2 00 A0 FD | 	call	#popregs_
05de0                 | _compile_if_ret
05de0     2D 00 64 FD | 	ret
05de4                 | 
05de4                 | ' 
05de4                 | ' function compile_else() as ulong  
05de4                 | _compile_else
05de4     05 4A 05 F6 | 	mov	COUNT_, #5
05de8     A8 00 A0 FD | 	call	#pushregs_
05dec                 | _compile_else_enter
05dec     5A 22 06 F6 | 	mov	local03, #90
05df0     0F 25 02 F6 | 	mov	local04, local01
05df4     10 27 02 F6 | 	mov	local05, local02
05df8     11 1F 02 F6 | 	mov	local01, local03
05dfc     41 00 00 FF 
05e00     40 E4 05 F1 | 	add	objptr, ##33344
05e04     F2 12 02 FB | 	rdlong	arg01, objptr
05e08     09 FB 01 F6 | 	mov	result1, arg01
05e0c     01 FA 65 F0 | 	shl	result1, #1
05e10     09 FB 01 F1 | 	add	result1, arg01
05e14     02 FA 65 F0 | 	shl	result1, #2
05e18     03 00 00 FF 
05e1c     00 E4 85 F1 | 	sub	objptr, ##1536
05e20     F2 FA 01 F1 | 	add	result1, objptr
05e24     FD 24 62 FC | 	wrlong	local04, result1
05e28     03 00 00 FF 
05e2c     00 E4 05 F1 | 	add	objptr, ##1536
05e30     F2 FA 01 FB | 	rdlong	result1, objptr
05e34     FD 24 02 F6 | 	mov	local04, result1
05e38     01 24 66 F0 | 	shl	local04, #1
05e3c     FD 24 02 F1 | 	add	local04, result1
05e40     02 24 66 F0 | 	shl	local04, #2
05e44     03 00 00 FF 
05e48     00 E4 85 F1 | 	sub	objptr, ##1536
05e4c     F2 24 02 F1 | 	add	local04, objptr
05e50     04 24 06 F1 | 	add	local04, #4
05e54     12 27 62 FC | 	wrlong	local05, local04
05e58     03 00 00 FF 
05e5c     00 E4 05 F1 | 	add	objptr, ##1536
05e60     F2 24 02 FB | 	rdlong	local04, objptr
05e64     12 27 02 F6 | 	mov	local05, local04
05e68     01 26 66 F0 | 	shl	local05, #1
05e6c     12 27 02 F1 | 	add	local05, local04
05e70     02 26 66 F0 | 	shl	local05, #2
05e74     03 00 00 FF 
05e78     00 E4 85 F1 | 	sub	objptr, ##1536
05e7c     F2 26 02 F1 | 	add	local05, objptr
05e80     08 26 06 F1 | 	add	local05, #8
05e84     13 1F 62 FC | 	wrlong	local01, local05
05e88     03 00 00 FF 
05e8c     00 E4 05 F1 | 	add	objptr, ##1536
05e90     F2 24 02 FB | 	rdlong	local04, objptr
05e94     01 24 06 F1 | 	add	local04, #1
05e98     F2 24 62 FC | 	wrlong	local04, objptr
05e9c                 | ' 
05e9c                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
05e9c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
05e9c     13 00 00 FF 
05ea0     38 E4 85 F1 | 	sub	objptr, ##9784
05ea4     F2 26 02 FB | 	rdlong	local05, objptr
05ea8     01 26 06 F1 | 	add	local05, #1
05eac     03 26 66 F0 | 	shl	local05, #3
05eb0     02 00 00 FF 
05eb4     38 E4 85 F1 | 	sub	objptr, ##1080
05eb8     F2 26 02 F1 | 	add	local05, objptr
05ebc     13 13 02 FB | 	rdlong	arg01, local05
05ec0     2B 00 00 FF 
05ec4     D0 E5 85 F1 | 	sub	objptr, ##22480
05ec8                 | ' 
05ec8                 | ' select case s
05ec8     21 01 00 FF 
05ecc     6E 14 06 F6 | 	mov	arg02, ##@LR__4184
05ed0     68 F0 B0 FD | 	call	#__system___string_cmp
05ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed8     1B FA 05 A6 |  if_e	mov	result1, #27
05edc     00 FA 05 56 |  if_ne	mov	result1, #0
05ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee4     0C 00 90 AD |  if_e	jmp	#LR__0530
05ee8     05 12 06 F6 | 	mov	arg01, #5
05eec     F8 EA BF FD | 	call	#_compile_immediate_assign
05ef0     08 00 90 FD | 	jmp	#LR__0531
05ef4                 | LR__0530
05ef4     05 12 06 F6 | 	mov	arg01, #5
05ef8     30 E4 BF FD | 	call	#_compile_immediate
05efc                 | LR__0531
05efc                 | ' 
05efc                 | ' 
05efc                 | ' return 0
05efc     00 FA 05 F6 | 	mov	result1, #0
05f00     A7 F0 03 F6 | 	mov	ptra, fp
05f04     B2 00 A0 FD | 	call	#popregs_
05f08                 | _compile_else_ret
05f08     2D 00 64 FD | 	ret
05f0c                 | 
05f0c                 | ' 
05f0c                 | ' 
05f0c                 | ' function compile_dim() as ulong  
05f0c                 | _compile_dim
05f0c     11 4A 05 F6 | 	mov	COUNT_, #17
05f10     A8 00 A0 FD | 	call	#pushregs_
05f14     01 1E 06 F6 | 	mov	local01, #1
05f18     01 20 06 F6 | 	mov	local02, #1
05f1c     01 22 06 F6 | 	mov	local03, #1
05f20                 | ' 
05f20                 | ' dims(0)=1: dims(1)=1: dims(2)=1
05f20                 | ' 
05f20                 | ' if isname(lparts(ct).part$) then 
05f20     2E 00 00 FF 
05f24     08 E4 05 F1 | 	add	objptr, ##23560
05f28     F2 14 02 FB | 	rdlong	arg02, objptr
05f2c     03 14 66 F0 | 	shl	arg02, #3
05f30     02 00 00 FF 
05f34     38 E4 85 F1 | 	sub	objptr, ##1080
05f38     F2 14 02 F1 | 	add	arg02, objptr
05f3c     0A 13 02 FB | 	rdlong	arg01, arg02
05f40     2B 00 00 FF 
05f44     D0 E5 85 F1 | 	sub	objptr, ##22480
05f48     C4 D3 BF FD | 	call	#_isname
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     30 05 90 AD |  if_e	jmp	#LR__0564
05f54     2E 00 00 FF 
05f58     08 E4 05 F1 | 	add	objptr, ##23560
05f5c     F2 24 02 FB | 	rdlong	local04, objptr
05f60     03 24 66 F0 | 	shl	local04, #3
05f64     02 00 00 FF 
05f68     38 E4 85 F1 | 	sub	objptr, ##1080
05f6c     F2 24 02 F1 | 	add	local04, objptr
05f70     12 27 02 FB | 	rdlong	local05, local04
05f74     01 28 66 F6 | 	neg	local06, #1
05f78                 | '   varname2$=lparts(ct).part$ 
05f78                 | '   j=-1
05f78                 | '   if varnum>0 then
05f78     04 E4 85 F1 | 	sub	objptr, #4
05f7c     F2 2A 02 FB | 	rdlong	local07, objptr
05f80     2B 00 00 FF 
05f84     CC E5 85 F1 | 	sub	objptr, ##22476
05f88     01 2A 56 F2 | 	cmps	local07, #1 wc
05f8c     58 00 90 CD |  if_b	jmp	#LR__0542
05f90                 | '  '   print "in dim, varnum=";varnum
05f90                 | '     for i=0 to varnum-1
05f90     00 2C 06 F6 | 	mov	local08, #0
05f94     2B 00 00 FF 
05f98     CC E5 05 F1 | 	add	objptr, ##22476
05f9c     F2 2E 02 FB | 	rdlong	local09, objptr
05fa0     2B 00 00 FF 
05fa4     CC E5 85 F1 | 	sub	objptr, ##22476
05fa8                 | LR__0540
05fa8     17 2D 52 F2 | 	cmps	local08, local09 wc
05fac     38 00 90 3D |  if_ae	jmp	#LR__0541
05fb0                 | '       if variables(i).name=varname2$ then j=i : exit
05fb0     16 25 02 F6 | 	mov	local04, local08
05fb4     04 24 66 F0 | 	shl	local04, #4
05fb8     0B 00 00 FF 
05fbc     CC E5 05 F1 | 	add	objptr, ##6092
05fc0     F2 24 02 F1 | 	add	local04, objptr
05fc4     12 13 02 FB | 	rdlong	arg01, local04
05fc8     13 15 02 F6 | 	mov	arg02, local05
05fcc     0B 00 00 FF 
05fd0     CC E5 85 F1 | 	sub	objptr, ##6092
05fd4     64 EF B0 FD | 	call	#__system___string_cmp
05fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fdc     16 29 02 A6 |  if_e	mov	local06, local08
05fe0     01 2C 06 51 |  if_ne	add	local08, #1
05fe4     C0 FF 9F 5D |  if_ne	jmp	#LR__0540
05fe8                 | LR__0541
05fe8                 | LR__0542
05fe8                 | '   if j<>-1 then printerror (42) : return 42
05fe8     FF FF 7F FF 
05fec     FF 29 0E F2 | 	cmp	local06, ##-1 wz
05ff0     10 00 90 AD |  if_e	jmp	#LR__0543
05ff4     2A 12 06 F6 | 	mov	arg01, #42
05ff8     24 BA B0 FD | 	call	#_printerror
05ffc     2A FA 05 F6 | 	mov	result1, #42
06000     D8 05 90 FD | 	jmp	#LR__0566
06004                 | LR__0543
06004                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06004     2E 00 00 FF 
06008     08 E4 05 F1 | 	add	objptr, ##23560
0600c     F2 14 02 FB | 	rdlong	arg02, objptr
06010     01 14 06 F1 | 	add	arg02, #1
06014     03 14 66 F0 | 	shl	arg02, #3
06018     02 00 00 FF 
0601c     38 E4 85 F1 | 	sub	objptr, ##1080
06020     F2 14 02 F1 | 	add	arg02, objptr
06024     0A 13 02 FB | 	rdlong	arg01, arg02
06028     21 01 00 FF 
0602c     F5 15 06 F6 | 	mov	arg02, ##@LR__4284
06030     2B 00 00 FF 
06034     D0 E5 85 F1 | 	sub	objptr, ##22480
06038     00 EF B0 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     50 00 90 AD |  if_e	jmp	#LR__0544
06044     2E 00 00 FF 
06048     08 E4 05 F1 | 	add	objptr, ##23560
0604c     F2 2E 02 FB | 	rdlong	local09, objptr
06050     01 2E 06 F1 | 	add	local09, #1
06054     03 2E 66 F0 | 	shl	local09, #3
06058     02 00 00 FF 
0605c     38 E4 85 F1 | 	sub	objptr, ##1080
06060     F2 2E 02 F1 | 	add	local09, objptr
06064     17 13 02 FB | 	rdlong	arg01, local09
06068     21 01 00 FF 
0606c     F7 15 06 F6 | 	mov	arg02, ##@LR__4285
06070     2B 00 00 FF 
06074     D0 E5 85 F1 | 	sub	objptr, ##22480
06078     C0 EE B0 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     10 00 90 AD |  if_e	jmp	#LR__0544
06084     2B 12 06 F6 | 	mov	arg01, #43
06088     94 B9 B0 FD | 	call	#_printerror
0608c     2B FA 05 F6 | 	mov	result1, #43
06090     48 05 90 FD | 	jmp	#LR__0566
06094                 | LR__0544
06094                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06094     2E 00 00 FF 
06098     08 E4 05 F1 | 	add	objptr, ##23560
0609c     F2 14 02 FB | 	rdlong	arg02, objptr
060a0     01 14 06 F1 | 	add	arg02, #1
060a4     03 14 66 F0 | 	shl	arg02, #3
060a8     02 00 00 FF 
060ac     38 E4 85 F1 | 	sub	objptr, ##1080
060b0     F2 14 02 F1 | 	add	arg02, objptr
060b4     0A 13 02 FB | 	rdlong	arg01, arg02
060b8     21 01 00 FF 
060bc     FA 15 06 F6 | 	mov	arg02, ##@LR__4286
060c0     2B 00 00 FF 
060c4     D0 E5 85 F1 | 	sub	objptr, ##22480
060c8     70 EE B0 FD | 	call	#__system___string_cmp
060cc     00 FA 0D F2 | 	cmp	result1, #0 wz
060d0     2E 00 00 AF 
060d4     08 E4 05 A1 |  if_e	add	objptr, ##23560
060d8     F2 30 02 AB |  if_e	rdlong	local10, objptr
060dc     2E 00 00 AF 
060e0     08 E4 85 A1 |  if_e	sub	objptr, ##23560
060e4     01 30 06 A1 |  if_e	add	local10, #1
060e8     7C 01 90 AD |  if_e	jmp	#LR__0550
060ec     2E 00 00 FF 
060f0     08 E4 05 F1 | 	add	objptr, ##23560
060f4     F2 30 02 FB | 	rdlong	local10, objptr
060f8     2E 00 00 FF 
060fc     08 E4 85 F1 | 	sub	objptr, ##23560
06100     02 30 06 F1 | 	add	local10, #2
06104     00 32 06 F6 | 	mov	local11, #0
06108                 | '   l=ct+2 : m=0 : do
06108                 | LR__0545
06108                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06108                 | '     if isdec(lparts(l).part$) then 
06108     18 25 02 F6 | 	mov	local04, local10
0610c     03 24 66 F0 | 	shl	local04, #3
06110     2B 00 00 FF 
06114     D0 E5 05 F1 | 	add	objptr, ##22480
06118     F2 24 02 F1 | 	add	local04, objptr
0611c     12 13 02 FB | 	rdlong	arg01, local04
06120     2B 00 00 FF 
06124     D0 E5 85 F1 | 	sub	objptr, ##22480
06128     88 D8 BF FD | 	call	#_isdec
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     44 00 90 AD |  if_e	jmp	#LR__0546
06134     19 35 02 F6 | 	mov	local12, local11
06138     0F 35 06 F1 | 	add	local12, #local01
0613c     18 2F 02 F6 | 	mov	local09, local10
06140     03 2E 66 F0 | 	shl	local09, #3
06144     2B 00 00 FF 
06148     D0 E5 05 F1 | 	add	objptr, ##22480
0614c     F2 2E 02 F1 | 	add	local09, objptr
06150     17 13 02 FB | 	rdlong	arg01, local09
06154     00 14 06 F6 | 	mov	arg02, #0
06158     2B 00 00 FF 
0615c     D0 E5 85 F1 | 	sub	objptr, ##22480
06160     3C 1E B1 FD | 	call	#__system____builtin_atoi
06164     FD 36 02 F6 | 	mov	local13, result1
06168                 | 	'.live	local13
06168                 | 	'.live	local12
06168     00 34 8E F9 | 	altd	local12, #0
0616c     1B 35 02 F6 | 	mov	local12, local13
06170     01 32 06 F1 | 	add	local11, #1
06174     10 00 90 FD | 	jmp	#LR__0547
06178                 | LR__0546
06178     11 12 06 F6 | 	mov	arg01, #17
0617c     A0 B8 B0 FD | 	call	#_printerror
06180                 | '       printerror (17)  : return(17)
06180     11 FA 05 F6 | 	mov	result1, #17
06184     54 04 90 FD | 	jmp	#LR__0566
06188                 | LR__0547
06188                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06188     18 25 02 F6 | 	mov	local04, local10
0618c     01 24 06 F1 | 	add	local04, #1
06190     03 24 66 F0 | 	shl	local04, #3
06194     2B 00 00 FF 
06198     D0 E5 05 F1 | 	add	objptr, ##22480
0619c     F2 24 02 F1 | 	add	local04, objptr
061a0     12 13 02 FB | 	rdlong	arg01, local04
061a4     21 01 00 FF 
061a8     FD 15 06 F6 | 	mov	arg02, ##@LR__4287
061ac     2B 00 00 FF 
061b0     D0 E5 85 F1 | 	sub	objptr, ##22480
061b4     84 ED B0 FD | 	call	#__system___string_cmp
061b8     00 FA 0D F2 | 	cmp	result1, #0 wz
061bc     48 00 90 AD |  if_e	jmp	#LR__0548
061c0     18 37 02 F6 | 	mov	local13, local10
061c4     01 36 06 F1 | 	add	local13, #1
061c8     03 36 66 F0 | 	shl	local13, #3
061cc     2B 00 00 FF 
061d0     D0 E5 05 F1 | 	add	objptr, ##22480
061d4     F2 36 02 F1 | 	add	local13, objptr
061d8     1B 13 02 FB | 	rdlong	arg01, local13
061dc     21 01 00 FF 
061e0     FF 15 06 F6 | 	mov	arg02, ##@LR__4288
061e4     2B 00 00 FF 
061e8     D0 E5 85 F1 | 	sub	objptr, ##22480
061ec     4C ED B0 FD | 	call	#__system___string_cmp
061f0     00 FA 0D F2 | 	cmp	result1, #0 wz
061f4     10 00 90 AD |  if_e	jmp	#LR__0548
061f8     2C 12 06 F6 | 	mov	arg01, #44
061fc     20 B8 B0 FD | 	call	#_printerror
06200     2C FA 05 F6 | 	mov	result1, #44
06204     D4 03 90 FD | 	jmp	#LR__0566
06208                 | LR__0548
06208     02 30 06 F1 | 	add	local10, #2
0620c     18 25 02 F6 | 	mov	local04, local10
06210     01 24 86 F1 | 	sub	local04, #1
06214     03 24 66 F0 | 	shl	local04, #3
06218     2B 00 00 FF 
0621c     D0 E5 05 F1 | 	add	objptr, ##22480
06220     F2 24 02 F1 | 	add	local04, objptr
06224     12 13 02 FB | 	rdlong	arg01, local04
06228     22 01 00 FF 
0622c     01 14 06 F6 | 	mov	arg02, ##@LR__4289
06230     2B 00 00 FF 
06234     D0 E5 85 F1 | 	sub	objptr, ##22480
06238     00 ED B0 FD | 	call	#__system___string_cmp
0623c     00 FA 0D F2 | 	cmp	result1, #0 wz
06240     03 32 56 52 |  if_ne	cmps	local11, #3 wc
06244     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0545
06248                 | '   if m>3 then printerror(45): return(45)
06248     04 32 56 F2 | 	cmps	local11, #4 wc
0624c     10 00 90 CD |  if_b	jmp	#LR__0549
06250     2D 12 06 F6 | 	mov	arg01, #45
06254     C8 B7 B0 FD | 	call	#_printerror
06258     2D FA 05 F6 | 	mov	result1, #45
0625c     7C 03 90 FD | 	jmp	#LR__0566
06260                 | LR__0549
06260     00 39 06 F6 | 	mov	local14, #256
06264     0C 3A 06 F6 | 	mov	local15, #12
06268                 | LR__0550
06268                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
06268                 | '   arraytype=array_no_type : esize=12
06268                 | ' 1350 
06268                 | '   if lparts(l).part$="as" then
06268     18 25 02 F6 | 	mov	local04, local10
0626c     03 24 66 F0 | 	shl	local04, #3
06270     2B 00 00 FF 
06274     D0 E5 05 F1 | 	add	objptr, ##22480
06278     F2 24 02 F1 | 	add	local04, objptr
0627c     12 13 02 FB | 	rdlong	arg01, local04
06280     22 01 00 FF 
06284     03 14 06 F6 | 	mov	arg02, ##@LR__4290
06288     2B 00 00 FF 
0628c     D0 E5 85 F1 | 	sub	objptr, ##22480
06290     A8 EC B0 FD | 	call	#__system___string_cmp
06294     00 FA 0D F2 | 	cmp	result1, #0 wz
06298     F8 01 90 5D |  if_ne	jmp	#LR__0565
0629c                 | '     select case lparts(l+1).part$
0629c     18 35 02 F6 | 	mov	local12, local10
062a0     01 34 06 F1 | 	add	local12, #1
062a4     03 34 66 F0 | 	shl	local12, #3
062a8     2B 00 00 FF 
062ac     D0 E5 05 F1 | 	add	objptr, ##22480
062b0     F2 34 02 F1 | 	add	local12, objptr
062b4     1A 3D 02 FB | 	rdlong	local16, local12
062b8     22 01 00 FF 
062bc     06 14 06 F6 | 	mov	arg02, ##@LR__4291
062c0     1E 13 02 F6 | 	mov	arg01, local16
062c4     2B 00 00 FF 
062c8     D0 E5 85 F1 | 	sub	objptr, ##22480
062cc     6C EC B0 FD | 	call	#__system___string_cmp
062d0     00 FA 0D F2 | 	cmp	result1, #0 wz
062d4     0C 01 90 AD |  if_e	jmp	#LR__0551
062d8     22 01 00 FF 
062dc     0B 14 06 F6 | 	mov	arg02, ##@LR__4292
062e0     1E 13 02 F6 | 	mov	arg01, local16
062e4     54 EC B0 FD | 	call	#__system___string_cmp
062e8     00 FA 0D F2 | 	cmp	result1, #0 wz
062ec     00 01 90 AD |  if_e	jmp	#LR__0552
062f0     22 01 00 FF 
062f4     11 14 06 F6 | 	mov	arg02, ##@LR__4293
062f8     1E 13 02 F6 | 	mov	arg01, local16
062fc     3C EC B0 FD | 	call	#__system___string_cmp
06300     00 FA 0D F2 | 	cmp	result1, #0 wz
06304     F4 00 90 AD |  if_e	jmp	#LR__0553
06308     22 01 00 FF 
0630c     17 14 06 F6 | 	mov	arg02, ##@LR__4294
06310     1E 13 02 F6 | 	mov	arg01, local16
06314     24 EC B0 FD | 	call	#__system___string_cmp
06318     00 FA 0D F2 | 	cmp	result1, #0 wz
0631c     E8 00 90 AD |  if_e	jmp	#LR__0554
06320     22 01 00 FF 
06324     1E 14 06 F6 | 	mov	arg02, ##@LR__4295
06328     1E 13 02 F6 | 	mov	arg01, local16
0632c     0C EC B0 FD | 	call	#__system___string_cmp
06330     00 FA 0D F2 | 	cmp	result1, #0 wz
06334     DC 00 90 AD |  if_e	jmp	#LR__0555
06338     22 01 00 FF 
0633c     23 14 06 F6 | 	mov	arg02, ##@LR__4296
06340     1E 13 02 F6 | 	mov	arg01, local16
06344     F4 EB B0 FD | 	call	#__system___string_cmp
06348     00 FA 0D F2 | 	cmp	result1, #0 wz
0634c     D0 00 90 AD |  if_e	jmp	#LR__0556
06350     22 01 00 FF 
06354     2B 14 06 F6 | 	mov	arg02, ##@LR__4297
06358     1E 13 02 F6 | 	mov	arg01, local16
0635c     DC EB B0 FD | 	call	#__system___string_cmp
06360     00 FA 0D F2 | 	cmp	result1, #0 wz
06364     C4 00 90 AD |  if_e	jmp	#LR__0557
06368     22 01 00 FF 
0636c     31 14 06 F6 | 	mov	arg02, ##@LR__4298
06370     1E 13 02 F6 | 	mov	arg01, local16
06374     C4 EB B0 FD | 	call	#__system___string_cmp
06378     00 FA 0D F2 | 	cmp	result1, #0 wz
0637c     B8 00 90 AD |  if_e	jmp	#LR__0558
06380     22 01 00 FF 
06384     37 14 06 F6 | 	mov	arg02, ##@LR__4299
06388     1E 13 02 F6 | 	mov	arg01, local16
0638c     AC EB B0 FD | 	call	#__system___string_cmp
06390     00 FA 0D F2 | 	cmp	result1, #0 wz
06394     AC 00 90 AD |  if_e	jmp	#LR__0559
06398     22 01 00 FF 
0639c     3E 14 06 F6 | 	mov	arg02, ##@LR__4300
063a0     1E 13 02 F6 | 	mov	arg01, local16
063a4     94 EB B0 FD | 	call	#__system___string_cmp
063a8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ac     A0 00 90 AD |  if_e	jmp	#LR__0560
063b0     22 01 00 FF 
063b4     45 14 06 F6 | 	mov	arg02, ##@LR__4301
063b8     1E 13 02 F6 | 	mov	arg01, local16
063bc     7C EB B0 FD | 	call	#__system___string_cmp
063c0     00 FA 0D F2 | 	cmp	result1, #0 wz
063c4     94 00 90 AD |  if_e	jmp	#LR__0561
063c8     22 01 00 FF 
063cc     4C 14 06 F6 | 	mov	arg02, ##@LR__4302
063d0     1E 13 02 F6 | 	mov	arg01, local16
063d4     64 EB B0 FD | 	call	#__system___string_cmp
063d8     00 FA 0D F2 | 	cmp	result1, #0 wz
063dc     88 00 90 AD |  if_e	jmp	#LR__0562
063e0     90 00 90 FD | 	jmp	#LR__0563
063e4                 | LR__0551
063e4     01 39 06 F6 | 	mov	local14, #257
063e8     01 3A 06 F6 | 	mov	local15, #1
063ec     A4 00 90 FD | 	jmp	#LR__0565
063f0                 | LR__0552
063f0     02 39 06 F6 | 	mov	local14, #258
063f4     01 3A 06 F6 | 	mov	local15, #1
063f8     98 00 90 FD | 	jmp	#LR__0565
063fc                 | LR__0553
063fc     03 39 06 F6 | 	mov	local14, #259
06400     02 3A 06 F6 | 	mov	local15, #2
06404     8C 00 90 FD | 	jmp	#LR__0565
06408                 | LR__0554
06408     04 39 06 F6 | 	mov	local14, #260
0640c     02 3A 06 F6 | 	mov	local15, #2
06410     80 00 90 FD | 	jmp	#LR__0565
06414                 | LR__0555
06414     05 39 06 F6 | 	mov	local14, #261
06418     04 3A 06 F6 | 	mov	local15, #4
0641c     74 00 90 FD | 	jmp	#LR__0565
06420                 | LR__0556
06420     05 39 06 F6 | 	mov	local14, #261
06424     04 3A 06 F6 | 	mov	local15, #4
06428     68 00 90 FD | 	jmp	#LR__0565
0642c                 | LR__0557
0642c     06 39 06 F6 | 	mov	local14, #262
06430     04 3A 06 F6 | 	mov	local15, #4
06434     5C 00 90 FD | 	jmp	#LR__0565
06438                 | LR__0558
06438     07 39 06 F6 | 	mov	local14, #263
0643c     08 3A 06 F6 | 	mov	local15, #8
06440     50 00 90 FD | 	jmp	#LR__0565
06444                 | LR__0559
06444     08 39 06 F6 | 	mov	local14, #264
06448     08 3A 06 F6 | 	mov	local15, #8
0644c     44 00 90 FD | 	jmp	#LR__0565
06450                 | LR__0560
06450     09 39 06 F6 | 	mov	local14, #265
06454     04 3A 06 F6 | 	mov	local15, #4
06458     38 00 90 FD | 	jmp	#LR__0565
0645c                 | LR__0561
0645c     0A 39 06 F6 | 	mov	local14, #266
06460     08 3A 06 F6 | 	mov	local15, #8
06464     2C 00 90 FD | 	jmp	#LR__0565
06468                 | LR__0562
06468     0B 39 06 F6 | 	mov	local14, #267
0646c     04 3A 06 F6 | 	mov	local15, #4
06470     20 00 90 FD | 	jmp	#LR__0565
06474                 | LR__0563
06474     2F 12 06 F6 | 	mov	arg01, #47
06478     A4 B5 B0 FD | 	call	#_printerror
0647c     2F FA 05 F6 | 	mov	result1, #47
06480     58 01 90 FD | 	jmp	#LR__0566
06484                 | LR__0564
06484     2E 12 06 F6 | 	mov	arg01, #46
06488     94 B5 B0 FD | 	call	#_printerror
0648c                 | '   printerror(46): return 46
0648c     2E FA 05 F6 | 	mov	result1, #46
06490     48 01 90 FD | 	jmp	#LR__0566
06494                 | LR__0565
06494     0F 3B 02 FD | 	qmul	local15, local01
06498     18 2A 62 FD | 	getqx	local07
0649c     10 2B 02 FD | 	qmul	local07, local02
064a0     18 3C 62 FD | 	getqx	local16
064a4     11 3D 02 FD | 	qmul	local16, local03
064a8     52 00 00 FF 
064ac     3C E4 05 F1 | 	add	objptr, ##42044
064b0     F2 3E 02 FB | 	rdlong	local17, objptr
064b4     1C 15 02 F6 | 	mov	arg02, local14
064b8     01 16 06 F6 | 	mov	arg03, #1
064bc     00 18 06 F6 | 	mov	arg04, #0
064c0                 | '     return fill(addr, pattern, count, listPtr, 4)
064c0     04 1A 06 F6 | 	mov	arg05, #4
064c4     18 3C 62 FD | 	getqx	local16
064c8     1E 3F 82 F1 | 	sub	local17, local16
064cc     10 3E 86 F1 | 	sub	local17, #16
064d0     F2 3E 62 FC | 	wrlong	local17, objptr
064d4     1F 13 02 F6 | 	mov	arg01, local17
064d8     46 00 00 FF 
064dc     7C E5 85 F1 | 	sub	objptr, ##36220
064e0     7C E0 B0 FD | 	call	#_psram_spin2_fill
064e4     1F 13 02 F6 | 	mov	arg01, local17
064e8     02 12 06 F1 | 	add	arg01, #2
064ec     1D 15 02 F6 | 	mov	arg02, local15
064f0     01 16 06 F6 | 	mov	arg03, #1
064f4     00 18 06 F6 | 	mov	arg04, #0
064f8                 | '     return fill(addr, pattern, count, listPtr, 1)
064f8     01 1A 06 F6 | 	mov	arg05, #1
064fc     60 E0 B0 FD | 	call	#_psram_spin2_fill
06500     1F 13 02 F6 | 	mov	arg01, local17
06504     04 12 06 F1 | 	add	arg01, #4
06508     0F 15 02 F6 | 	mov	arg02, local01
0650c     01 16 06 F6 | 	mov	arg03, #1
06510     00 18 06 F6 | 	mov	arg04, #0
06514                 | '     return fill(addr, pattern, count, listPtr, 4)
06514     04 1A 06 F6 | 	mov	arg05, #4
06518     44 E0 B0 FD | 	call	#_psram_spin2_fill
0651c     1F 13 02 F6 | 	mov	arg01, local17
06520     08 12 06 F1 | 	add	arg01, #8
06524     10 15 02 F6 | 	mov	arg02, local02
06528     01 16 06 F6 | 	mov	arg03, #1
0652c     00 18 06 F6 | 	mov	arg04, #0
06530                 | '     return fill(addr, pattern, count, listPtr, 4)
06530     04 1A 06 F6 | 	mov	arg05, #4
06534     28 E0 B0 FD | 	call	#_psram_spin2_fill
06538     1F 13 02 F6 | 	mov	arg01, local17
0653c     0C 12 06 F1 | 	add	arg01, #12
06540     11 15 02 F6 | 	mov	arg02, local03
06544     01 16 06 F6 | 	mov	arg03, #1
06548     00 18 06 F6 | 	mov	arg04, #0
0654c                 | '     return fill(addr, pattern, count, listPtr, 4)
0654c     04 1A 06 F6 | 	mov	arg05, #4
06550     0C E0 B0 FD | 	call	#_psram_spin2_fill
06554     20 00 00 FF 
06558     0C E5 05 F1 | 	add	objptr, ##16652
0655c     F2 24 02 FB | 	rdlong	local04, objptr
06560     04 24 66 F0 | 	shl	local04, #4
06564     20 00 00 FF 
06568     00 E4 85 F1 | 	sub	objptr, ##16384
0656c     F2 24 02 F1 | 	add	local04, objptr
06570     12 27 62 FC | 	wrlong	local05, local04
06574     20 00 00 FF 
06578     00 E4 05 F1 | 	add	objptr, ##16384
0657c     F2 24 02 FB | 	rdlong	local04, objptr
06580     04 24 66 F0 | 	shl	local04, #4
06584     20 00 00 FF 
06588     00 E4 85 F1 | 	sub	objptr, ##16384
0658c     F2 24 02 F1 | 	add	local04, objptr
06590     04 24 06 F1 | 	add	local04, #4
06594     12 3F 62 FC | 	wrlong	local17, local04
06598     20 00 00 FF 
0659c     00 E4 05 F1 | 	add	objptr, ##16384
065a0     F2 24 02 FB | 	rdlong	local04, objptr
065a4     04 24 66 F0 | 	shl	local04, #4
065a8     20 00 00 FF 
065ac     00 E4 85 F1 | 	sub	objptr, ##16384
065b0     F2 24 02 F1 | 	add	local04, objptr
065b4     0C 24 06 F1 | 	add	local04, #12
065b8     12 39 62 FC | 	wrlong	local14, local04
065bc     20 00 00 FF 
065c0     00 E4 05 F1 | 	add	objptr, ##16384
065c4     F2 2A 02 FB | 	rdlong	local07, objptr
065c8     01 2A 06 F1 | 	add	local07, #1
065cc     F2 2A 62 FC | 	wrlong	local07, objptr
065d0     2B 00 00 FF 
065d4     CC E5 85 F1 | 	sub	objptr, ##22476
065d8                 | ' 'print dims(0),dims(1),dims(2),arraytype
065d8                 | ' 
065d8                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
065d8                 | ' arrayptr=memtop-arraysize-16
065d8                 | ' memtop=arrayptr
065d8                 | ' 
065d8                 | ' pslpoke arrayptr,arraytype
065d8                 | ' pspoke arrayptr+2,esize
065d8                 | ' pslpoke arrayptr+4,dims(0)
065d8                 | ' pslpoke arrayptr+8,dims(1)
065d8                 | ' pslpoke arrayptr+12,dims(2)
065d8                 | ' 
065d8                 | ' variables(varnum).name=varname2$
065d8                 | ' variables(varnum).value.uresult=arrayptr
065d8                 | ' variables(varnum).vartype=arraytype
065d8                 | ' varnum+=1
065d8                 | ' 
065d8                 | ' return 0
065d8     00 FA 05 F6 | 	mov	result1, #0
065dc                 | LR__0566
065dc     A7 F0 03 F6 | 	mov	ptra, fp
065e0     B2 00 A0 FD | 	call	#popregs_
065e4                 | _compile_dim_ret
065e4     2D 00 64 FD | 	ret
065e8                 | 
065e8                 | ' 
065e8                 | ' 
065e8                 | ' function compile_for() as ulong  
065e8                 | _compile_for
065e8     07 4A 05 F6 | 	mov	COUNT_, #7
065ec     A8 00 A0 FD | 	call	#pushregs_
065f0                 | ' 
065f0                 | ' 
065f0                 | ' 
065f0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
065f0     2E 00 00 FF 
065f4     08 E4 05 F1 | 	add	objptr, ##23560
065f8     F2 14 02 FB | 	rdlong	arg02, objptr
065fc     01 14 06 F1 | 	add	arg02, #1
06600     03 14 66 F0 | 	shl	arg02, #3
06604     02 00 00 FF 
06608     38 E4 85 F1 | 	sub	objptr, ##1080
0660c     F2 14 02 F1 | 	add	arg02, objptr
06610     0A 13 02 FB | 	rdlong	arg01, arg02
06614     2B 00 00 FF 
06618     D0 E5 85 F1 | 	sub	objptr, ##22480
0661c                 | ' 
0661c                 | ' select case s
0661c     21 01 00 FF 
06620     6E 14 06 F6 | 	mov	arg02, ##@LR__4184
06624     14 E9 B0 FD | 	call	#__system___string_cmp
06628     00 FA 0D F2 | 	cmp	result1, #0 wz
0662c     1B FA 05 A6 |  if_e	mov	result1, #27
06630     00 FA 05 56 |  if_ne	mov	result1, #0
06634     00 FA 0D F2 | 	cmp	result1, #0 wz
06638     0C 00 90 AD |  if_e	jmp	#LR__0570
0663c     05 12 06 F6 | 	mov	arg01, #5
06640     A4 E3 BF FD | 	call	#_compile_immediate_assign
06644     10 00 90 FD | 	jmp	#LR__0571
06648                 | LR__0570
06648     20 12 06 F6 | 	mov	arg01, #32
0664c     14 E8 BF FD | 	call	#_compile_error
06650     20 FA 05 F6 | 	mov	result1, #32
06654     AC 02 90 FD | 	jmp	#LR__0576
06658                 | LR__0571
06658     41 00 00 FF 
0665c     40 E4 05 F1 | 	add	objptr, ##33344
06660     F2 12 02 FB | 	rdlong	arg01, objptr
06664     09 25 02 F6 | 	mov	local04, arg01
06668     01 24 86 F1 | 	sub	local04, #1
0666c     12 15 02 F6 | 	mov	arg02, local04
06670     01 14 66 F0 | 	shl	arg02, #1
06674     12 15 02 F1 | 	add	arg02, local04
06678     02 14 66 F0 | 	shl	arg02, #2
0667c     03 00 00 FF 
06680     00 E4 85 F1 | 	sub	objptr, ##1536
06684     F2 14 02 F1 | 	add	arg02, objptr
06688     0A 1F 02 FB | 	rdlong	local01, arg02
0668c     04 14 06 F1 | 	add	arg02, #4
06690     0A 27 02 FB | 	rdlong	local05, arg02
06694     01 12 86 F1 | 	sub	arg01, #1
06698     09 29 02 F6 | 	mov	local06, arg01
0669c     01 28 66 F0 | 	shl	local06, #1
066a0     09 29 02 F1 | 	add	local06, arg01
066a4     02 28 66 F0 | 	shl	local06, #2
066a8     F2 28 02 F1 | 	add	local06, objptr
066ac     08 28 06 F1 | 	add	local06, #8
066b0     14 13 02 FB | 	rdlong	arg01, local06
066b4     13 21 02 F6 | 	mov	local02, local05
066b8     09 23 02 F6 | 	mov	local03, arg01
066bc                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
066bc                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
066bc     17 22 0E F2 | 	cmp	local03, #23 wz
066c0     3E 00 00 FF 
066c4     40 E4 85 F1 | 	sub	objptr, ##31808
066c8     10 00 90 AD |  if_e	jmp	#LR__0572
066cc     22 12 06 F6 | 	mov	arg01, #34
066d0     90 E7 BF FD | 	call	#_compile_error
066d4     22 FA 05 F6 | 	mov	result1, #34
066d8     28 02 90 FD | 	jmp	#LR__0576
066dc                 | LR__0572
066dc     0F 2B 02 F6 | 	mov	local07, local01
066e0                 | ' varnum=t1.result.uresult
066e0                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
066e0     2E 00 00 FF 
066e4     08 E4 05 F1 | 	add	objptr, ##23560
066e8     F2 24 02 FB | 	rdlong	local04, objptr
066ec     03 24 66 F0 | 	shl	local04, #3
066f0     02 00 00 FF 
066f4     38 E4 85 F1 | 	sub	objptr, ##1080
066f8     F2 24 02 F1 | 	add	local04, objptr
066fc     12 13 02 FB | 	rdlong	arg01, local04
06700     22 01 00 FF 
06704     53 14 06 F6 | 	mov	arg02, ##@LR__4303
06708     2B 00 00 FF 
0670c     D0 E5 85 F1 | 	sub	objptr, ##22480
06710     28 E8 B0 FD | 	call	#__system___string_cmp
06714     00 FA 0D F2 | 	cmp	result1, #0 wz
06718     10 00 90 AD |  if_e	jmp	#LR__0573
0671c     21 12 06 F6 | 	mov	arg01, #33
06720     40 E7 BF FD | 	call	#_compile_error
06724     21 FA 05 F6 | 	mov	result1, #33
06728     D8 01 90 FD | 	jmp	#LR__0576
0672c                 | LR__0573
0672c     2E 00 00 FF 
06730     08 E4 05 F1 | 	add	objptr, ##23560
06734     F2 28 02 FB | 	rdlong	local06, objptr
06738     01 28 06 F1 | 	add	local06, #1
0673c     F2 28 62 FC | 	wrlong	local06, objptr
06740     2E 00 00 FF 
06744     08 E4 85 F1 | 	sub	objptr, ##23560
06748     98 0B B0 FD | 	call	#_expr
0674c                 | ' ct+=1
0674c                 | ' expr()  ' there is "to" value pushed on the stack
0674c                 | ' if lparts(ct).part$="step" then 
0674c     2E 00 00 FF 
06750     08 E4 05 F1 | 	add	objptr, ##23560
06754     F2 24 02 FB | 	rdlong	local04, objptr
06758     03 24 66 F0 | 	shl	local04, #3
0675c     02 00 00 FF 
06760     38 E4 85 F1 | 	sub	objptr, ##1080
06764     F2 24 02 F1 | 	add	local04, objptr
06768     12 13 02 FB | 	rdlong	arg01, local04
0676c     22 01 00 FF 
06770     56 14 06 F6 | 	mov	arg02, ##@LR__4304
06774     2B 00 00 FF 
06778     D0 E5 85 F1 | 	sub	objptr, ##22480
0677c     BC E7 B0 FD | 	call	#__system___string_cmp
06780     00 FA 0D F2 | 	cmp	result1, #0 wz
06784     24 00 90 5D |  if_ne	jmp	#LR__0574
06788     2E 00 00 FF 
0678c     08 E4 05 F1 | 	add	objptr, ##23560
06790     F2 28 02 FB | 	rdlong	local06, objptr
06794     01 28 06 F1 | 	add	local06, #1
06798     F2 28 62 FC | 	wrlong	local06, objptr
0679c     2E 00 00 FF 
067a0     08 E4 85 F1 | 	sub	objptr, ##23560
067a4     3C 0B B0 FD | 	call	#_expr
067a8     78 00 90 FD | 	jmp	#LR__0575
067ac                 | LR__0574
067ac     41 00 00 FF 
067b0     40 E4 05 F1 | 	add	objptr, ##33344
067b4     F2 28 02 FB | 	rdlong	local06, objptr
067b8     14 27 02 F6 | 	mov	local05, local06
067bc     01 26 66 F0 | 	shl	local05, #1
067c0     14 27 02 F1 | 	add	local05, local06
067c4     02 26 66 F0 | 	shl	local05, #2
067c8     03 00 00 FF 
067cc     00 E4 85 F1 | 	sub	objptr, ##1536
067d0     F2 26 02 F1 | 	add	local05, objptr
067d4     08 26 06 F1 | 	add	local05, #8
067d8     13 39 68 FC | 	wrlong	#28, local05
067dc     03 00 00 FF 
067e0     00 E4 05 F1 | 	add	objptr, ##1536
067e4     F2 28 02 FB | 	rdlong	local06, objptr
067e8     14 27 02 F6 | 	mov	local05, local06
067ec     01 26 66 F0 | 	shl	local05, #1
067f0     14 27 02 F1 | 	add	local05, local06
067f4     02 26 66 F0 | 	shl	local05, #2
067f8     03 00 00 FF 
067fc     00 E4 85 F1 | 	sub	objptr, ##1536
06800     F2 26 02 F1 | 	add	local05, objptr
06804     13 03 68 FC | 	wrlong	#1, local05
06808     03 00 00 FF 
0680c     00 E4 05 F1 | 	add	objptr, ##1536
06810     F2 28 02 FB | 	rdlong	local06, objptr
06814     01 28 06 F1 | 	add	local06, #1
06818     F2 28 62 FC | 	wrlong	local06, objptr
0681c     41 00 00 FF 
06820     40 E4 85 F1 | 	sub	objptr, ##33344
06824                 | LR__0575
06824     41 00 00 FF 
06828     40 E4 05 F1 | 	add	objptr, ##33344
0682c     F2 28 02 FB | 	rdlong	local06, objptr
06830     14 27 02 F6 | 	mov	local05, local06
06834     01 26 66 F0 | 	shl	local05, #1
06838     14 27 02 F1 | 	add	local05, local06
0683c     02 26 66 F0 | 	shl	local05, #2
06840     03 00 00 FF 
06844     00 E4 85 F1 | 	sub	objptr, ##1536
06848     F2 26 02 F1 | 	add	local05, objptr
0684c     08 26 06 F1 | 	add	local05, #8
06850     13 39 68 FC | 	wrlong	#28, local05
06854     03 00 00 FF 
06858     00 E4 05 F1 | 	add	objptr, ##1536
0685c     F2 28 02 FB | 	rdlong	local06, objptr
06860     14 27 02 F6 | 	mov	local05, local06
06864     01 26 66 F0 | 	shl	local05, #1
06868     14 27 02 F1 | 	add	local05, local06
0686c     02 26 66 F0 | 	shl	local05, #2
06870     03 00 00 FF 
06874     00 E4 85 F1 | 	sub	objptr, ##1536
06878     F2 26 02 F1 | 	add	local05, objptr
0687c     13 2B 62 FC | 	wrlong	local07, local05
06880     03 00 00 FF 
06884     00 E4 05 F1 | 	add	objptr, ##1536
06888     F2 2A 02 FB | 	rdlong	local07, objptr
0688c     01 2A 06 F1 | 	add	local07, #1
06890     F2 2A 62 FC | 	wrlong	local07, objptr
06894     15 29 02 F6 | 	mov	local06, local07
06898     01 28 66 F0 | 	shl	local06, #1
0689c     15 29 02 F1 | 	add	local06, local07
068a0     02 28 66 F0 | 	shl	local06, #2
068a4     03 00 00 FF 
068a8     00 E4 85 F1 | 	sub	objptr, ##1536
068ac     F2 28 02 F1 | 	add	local06, objptr
068b0     08 28 06 F1 | 	add	local06, #8
068b4     14 95 68 FC | 	wrlong	#74, local06
068b8     03 00 00 FF 
068bc     00 E4 05 F1 | 	add	objptr, ##1536
068c0     F2 2A 02 FB | 	rdlong	local07, objptr
068c4     15 29 02 F6 | 	mov	local06, local07
068c8     01 28 66 F0 | 	shl	local06, #1
068cc     15 29 02 F1 | 	add	local06, local07
068d0     02 28 66 F0 | 	shl	local06, #2
068d4     03 00 00 FF 
068d8     00 E4 85 F1 | 	sub	objptr, ##1536
068dc     F2 28 02 F1 | 	add	local06, objptr
068e0     14 01 68 FC | 	wrlong	#0, local06
068e4     03 00 00 FF 
068e8     00 E4 05 F1 | 	add	objptr, ##1536
068ec     F2 2A 02 FB | 	rdlong	local07, objptr
068f0     01 2A 06 F1 | 	add	local07, #1
068f4     F2 2A 62 FC | 	wrlong	local07, objptr
068f8     41 00 00 FF 
068fc     40 E4 85 F1 | 	sub	objptr, ##33344
06900                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06900                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06900                 | ' 
06900                 | ' 
06900                 | ' return 0
06900     00 FA 05 F6 | 	mov	result1, #0
06904                 | LR__0576
06904     A7 F0 03 F6 | 	mov	ptra, fp
06908     B2 00 A0 FD | 	call	#popregs_
0690c                 | _compile_for_ret
0690c     2D 00 64 FD | 	ret
06910                 | 
06910                 | ' 
06910                 | ' 
06910                 | ' sub do_for()
06910                 | _do_for
06910     05 4A 05 F6 | 	mov	COUNT_, #5
06914     A8 00 A0 FD | 	call	#pushregs_
06918     50 00 00 FF 
0691c     9C E5 05 F1 | 	add	objptr, ##41372
06920     F2 24 02 FB | 	rdlong	local04, objptr
06924     01 24 06 F1 | 	add	local04, #1
06928     F2 24 62 FC | 	wrlong	local04, objptr
0692c     50 00 00 FF 
06930     9C E5 85 F1 | 	sub	objptr, ##41372
06934     5C 1E B0 FD | 	call	#_pop
06938     FD 1E 02 F6 | 	mov	local01, result1
0693c     FE 20 02 F6 | 	mov	local02, result2
06940     FF 22 02 F6 | 	mov	local03, result3
06944     50 00 00 FF 
06948     9C E5 05 F1 | 	add	objptr, ##41372
0694c     F2 24 02 FB | 	rdlong	local04, objptr
06950     12 27 02 F6 | 	mov	local05, local04
06954     02 26 66 F0 | 	shl	local05, #2
06958     12 27 02 F1 | 	add	local05, local04
0695c     02 26 66 F0 | 	shl	local05, #2
06960     07 00 00 FF 
06964     40 E5 85 F1 | 	sub	objptr, ##3904
06968     F2 26 02 F1 | 	add	local05, objptr
0696c     08 26 06 F1 | 	add	local05, #8
06970     13 1F 62 FC | 	wrlong	local01, local05
06974     49 00 00 FF 
06978     5C E4 85 F1 | 	sub	objptr, ##37468
0697c     14 1E B0 FD | 	call	#_pop
06980     FD 1E 02 F6 | 	mov	local01, result1
06984     FE 20 02 F6 | 	mov	local02, result2
06988     FF 22 02 F6 | 	mov	local03, result3
0698c     50 00 00 FF 
06990     9C E5 05 F1 | 	add	objptr, ##41372
06994     F2 24 02 FB | 	rdlong	local04, objptr
06998     12 27 02 F6 | 	mov	local05, local04
0699c     02 26 66 F0 | 	shl	local05, #2
069a0     12 27 02 F1 | 	add	local05, local04
069a4     02 26 66 F0 | 	shl	local05, #2
069a8     07 00 00 FF 
069ac     40 E5 85 F1 | 	sub	objptr, ##3904
069b0     F2 26 02 F1 | 	add	local05, objptr
069b4     0C 26 06 F1 | 	add	local05, #12
069b8     13 1F 62 FC | 	wrlong	local01, local05
069bc     49 00 00 FF 
069c0     5C E4 85 F1 | 	sub	objptr, ##37468
069c4     CC 1D B0 FD | 	call	#_pop
069c8     FD 1E 02 F6 | 	mov	local01, result1
069cc     FE 20 02 F6 | 	mov	local02, result2
069d0     FF 22 02 F6 | 	mov	local03, result3
069d4     50 00 00 FF 
069d8     9C E5 05 F1 | 	add	objptr, ##41372
069dc     F2 24 02 FB | 	rdlong	local04, objptr
069e0     12 27 02 F6 | 	mov	local05, local04
069e4     02 26 66 F0 | 	shl	local05, #2
069e8     12 27 02 F1 | 	add	local05, local04
069ec     02 26 66 F0 | 	shl	local05, #2
069f0     07 00 00 FF 
069f4     40 E5 85 F1 | 	sub	objptr, ##3904
069f8     F2 26 02 F1 | 	add	local05, objptr
069fc     10 26 06 F1 | 	add	local05, #16
06a00     13 1F 62 FC | 	wrlong	local01, local05
06a04                 | ' fortop+=1
06a04                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06a04                 | ' 'if i> maxfor then printerror(36) : return
06a04                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06a04                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06a04                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06a04                 | ' if compiledline(lineptr_e).result_type=token_end then
06a04     08 00 00 FF 
06a08     18 E4 85 F1 | 	sub	objptr, ##4120
06a0c     F2 1E 02 FB | 	rdlong	local01, objptr
06a10     0F 27 02 F6 | 	mov	local05, local01
06a14     01 26 66 F0 | 	shl	local05, #1
06a18     0F 27 02 F1 | 	add	local05, local01
06a1c     02 26 66 F0 | 	shl	local05, #2
06a20     03 00 00 FF 
06a24     04 E4 85 F1 | 	sub	objptr, ##1540
06a28     F2 26 02 F1 | 	add	local05, objptr
06a2c     08 26 06 F1 | 	add	local05, #8
06a30     13 27 02 FB | 	rdlong	local05, local05
06a34     FE 27 0E F2 | 	cmp	local05, #510 wz
06a38     3E 00 00 FF 
06a3c     40 E4 85 F1 | 	sub	objptr, ##31808
06a40     70 00 90 5D |  if_ne	jmp	#LR__0580
06a44     50 00 00 FF 
06a48     9C E5 05 F1 | 	add	objptr, ##41372
06a4c     F2 1E 02 FB | 	rdlong	local01, objptr
06a50     0F 27 02 F6 | 	mov	local05, local01
06a54     02 26 66 F0 | 	shl	local05, #2
06a58     0F 27 02 F1 | 	add	local05, local01
06a5c     02 26 66 F0 | 	shl	local05, #2
06a60     07 00 00 FF 
06a64     40 E5 85 F1 | 	sub	objptr, ##3904
06a68     F2 26 02 F1 | 	add	local05, objptr
06a6c     07 00 00 FF 
06a70     18 E5 05 F1 | 	add	objptr, ##3864
06a74     F2 1E 02 FB | 	rdlong	local01, objptr
06a78     13 1F 62 FC | 	wrlong	local01, local05
06a7c     28 E4 05 F1 | 	add	objptr, #40
06a80     F2 1E 02 FB | 	rdlong	local01, objptr
06a84     0F 27 02 F6 | 	mov	local05, local01
06a88     02 26 66 F0 | 	shl	local05, #2
06a8c     0F 27 02 F1 | 	add	local05, local01
06a90     02 26 66 F0 | 	shl	local05, #2
06a94     07 00 00 FF 
06a98     40 E5 85 F1 | 	sub	objptr, ##3904
06a9c     F2 26 02 F1 | 	add	local05, objptr
06aa0     04 26 06 F1 | 	add	local05, #4
06aa4     13 01 68 FC | 	wrlong	#0, local05
06aa8     49 00 00 FF 
06aac     5C E4 85 F1 | 	sub	objptr, ##37468
06ab0     7C 00 90 FD | 	jmp	#LR__0581
06ab4                 | LR__0580
06ab4     50 00 00 FF 
06ab8     9C E5 05 F1 | 	add	objptr, ##41372
06abc     F2 1E 02 FB | 	rdlong	local01, objptr
06ac0     0F 27 02 F6 | 	mov	local05, local01
06ac4     02 26 66 F0 | 	shl	local05, #2
06ac8     0F 27 02 F1 | 	add	local05, local01
06acc     02 26 66 F0 | 	shl	local05, #2
06ad0     07 00 00 FF 
06ad4     40 E5 85 F1 | 	sub	objptr, ##3904
06ad8     F2 26 02 F1 | 	add	local05, objptr
06adc     07 00 00 FF 
06ae0     20 E5 05 F1 | 	add	objptr, ##3872
06ae4     F2 1E 02 FB | 	rdlong	local01, objptr
06ae8     13 1F 62 FC | 	wrlong	local01, local05
06aec     20 E4 05 F1 | 	add	objptr, #32
06af0     F2 1E 02 FB | 	rdlong	local01, objptr
06af4     0F 27 02 F6 | 	mov	local05, local01
06af8     02 26 66 F0 | 	shl	local05, #2
06afc     0F 27 02 F1 | 	add	local05, local01
06b00     02 26 66 F0 | 	shl	local05, #2
06b04     07 00 00 FF 
06b08     40 E5 85 F1 | 	sub	objptr, ##3904
06b0c     F2 26 02 F1 | 	add	local05, objptr
06b10     08 00 00 FF 
06b14     18 E4 85 F1 | 	sub	objptr, ##4120
06b18     F2 1E 02 FB | 	rdlong	local01, objptr
06b1c     41 00 00 FF 
06b20     44 E4 85 F1 | 	sub	objptr, ##33348
06b24     01 1E 06 F1 | 	add	local01, #1
06b28     04 26 06 F1 | 	add	local05, #4
06b2c     13 1F 62 FC | 	wrlong	local01, local05
06b30                 | LR__0581
06b30     A7 F0 03 F6 | 	mov	ptra, fp
06b34     B2 00 A0 FD | 	call	#popregs_
06b38                 | _do_for_ret
06b38     2D 00 64 FD | 	ret
06b3c                 | 
06b3c                 | ' 
06b3c                 | ' ' now do_next todo
06b3c                 | ' 
06b3c                 | ' sub do_next()
06b3c                 | _do_next
06b3c     04 4A 05 F6 | 	mov	COUNT_, #4
06b40     A8 00 A0 FD | 	call	#pushregs_
06b44     4C 1C B0 FD | 	call	#_pop
06b48     FD 1E 02 F6 | 	mov	local01, result1
06b4c     FE 20 02 F6 | 	mov	local02, result2
06b50     FF 22 02 F6 | 	mov	local03, result3
06b54                 | ' 
06b54                 | ' t1=pop() :varnum=t1.result.uresult
06b54                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06b54     50 00 00 FF 
06b58     9C E5 05 F1 | 	add	objptr, ##41372
06b5c     F2 12 02 FB | 	rdlong	arg01, objptr
06b60     09 25 02 F6 | 	mov	local04, arg01
06b64     02 24 66 F0 | 	shl	local04, #2
06b68     09 25 02 F1 | 	add	local04, arg01
06b6c     02 24 66 F0 | 	shl	local04, #2
06b70     07 00 00 FF 
06b74     40 E5 85 F1 | 	sub	objptr, ##3904
06b78     F2 24 02 F1 | 	add	local04, objptr
06b7c     08 24 06 F1 | 	add	local04, #8
06b80     12 25 02 FB | 	rdlong	local04, local04
06b84     0F 25 0A F2 | 	cmp	local04, local01 wz
06b88     49 00 00 FF 
06b8c     5C E4 85 F1 | 	sub	objptr, ##37468
06b90     0C 00 90 AD |  if_e	jmp	#LR__0590
06b94     25 12 06 F6 | 	mov	arg01, #37
06b98     84 AE B0 FD | 	call	#_printerror
06b9c     28 02 90 FD | 	jmp	#LR__0594
06ba0                 | LR__0590
06ba0     50 00 00 FF 
06ba4     9C E5 05 F1 | 	add	objptr, ##41372
06ba8     F2 12 02 FB | 	rdlong	arg01, objptr
06bac     09 25 02 F6 | 	mov	local04, arg01
06bb0     02 24 66 F0 | 	shl	local04, #2
06bb4     09 25 02 F1 | 	add	local04, arg01
06bb8     02 24 66 F0 | 	shl	local04, #2
06bbc     07 00 00 FF 
06bc0     40 E5 85 F1 | 	sub	objptr, ##3904
06bc4     F2 24 02 F1 | 	add	local04, objptr
06bc8     0C 24 06 F1 | 	add	local04, #12
06bcc     12 25 02 FB | 	rdlong	local04, local04
06bd0     0F 13 02 F6 | 	mov	arg01, local01
06bd4     04 12 66 F0 | 	shl	arg01, #4
06bd8     3D 00 00 FF 
06bdc     90 E4 85 F1 | 	sub	objptr, ##31376
06be0     F2 12 02 F1 | 	add	arg01, objptr
06be4     0F FF 01 F6 | 	mov	result3, local01
06be8     04 FE 65 F0 | 	shl	result3, #4
06bec     F2 FE 01 F1 | 	add	result3, objptr
06bf0     04 FE 05 F1 | 	add	result3, #4
06bf4     FF FE 01 FB | 	rdlong	result3, result3
06bf8     12 FF 01 F1 | 	add	result3, local04
06bfc     04 12 06 F1 | 	add	arg01, #4
06c00     09 FF 61 FC | 	wrlong	result3, arg01
06c04                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06c04                 | ' if fortable(fortop).stepval>0 then
06c04     44 00 00 FF 
06c08     D0 E5 05 F1 | 	add	objptr, ##35280
06c0c     F2 12 02 FB | 	rdlong	arg01, objptr
06c10     09 25 02 F6 | 	mov	local04, arg01
06c14     02 24 66 F0 | 	shl	local04, #2
06c18     09 25 02 F1 | 	add	local04, arg01
06c1c     02 24 66 F0 | 	shl	local04, #2
06c20     07 00 00 FF 
06c24     40 E5 85 F1 | 	sub	objptr, ##3904
06c28     F2 24 02 F1 | 	add	local04, objptr
06c2c     0C 24 06 F1 | 	add	local04, #12
06c30     12 25 02 FB | 	rdlong	local04, local04
06c34     01 24 56 F2 | 	cmps	local04, #1 wc
06c38     49 00 00 FF 
06c3c     5C E4 85 F1 | 	sub	objptr, ##37468
06c40     78 00 90 CD |  if_b	jmp	#LR__0591
06c44                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06c44     04 1E 66 F0 | 	shl	local01, #4
06c48     0B 00 00 FF 
06c4c     CC E5 05 F1 | 	add	objptr, ##6092
06c50     F2 1E 02 F1 | 	add	local01, objptr
06c54     44 00 00 FF 
06c58     D0 E5 05 F1 | 	add	objptr, ##35280
06c5c     F2 24 02 FB | 	rdlong	local04, objptr
06c60     12 13 02 F6 | 	mov	arg01, local04
06c64     02 12 66 F0 | 	shl	arg01, #2
06c68     12 13 02 F1 | 	add	arg01, local04
06c6c     02 12 66 F0 | 	shl	arg01, #2
06c70     07 00 00 FF 
06c74     40 E5 85 F1 | 	sub	objptr, ##3904
06c78     F2 12 02 F1 | 	add	arg01, objptr
06c7c     04 1E 06 F1 | 	add	local01, #4
06c80     0F 25 02 FB | 	rdlong	local04, local01
06c84     10 12 06 F1 | 	add	arg01, #16
06c88     09 13 02 FB | 	rdlong	arg01, arg01
06c8c     09 25 5A F2 | 	cmps	local04, arg01 wcz
06c90     49 00 00 FF 
06c94     5C E4 85 F1 | 	sub	objptr, ##37468
06c98     9C 00 90 ED |  if_be	jmp	#LR__0593
06c9c     50 00 00 FF 
06ca0     9C E5 05 F1 | 	add	objptr, ##41372
06ca4     F2 24 02 FB | 	rdlong	local04, objptr
06ca8     01 24 86 F1 | 	sub	local04, #1
06cac     F2 24 62 FC | 	wrlong	local04, objptr
06cb0     50 00 00 FF 
06cb4     9C E5 85 F1 | 	sub	objptr, ##41372
06cb8     0C 01 90 FD | 	jmp	#LR__0594
06cbc                 | LR__0591
06cbc                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
06cbc     0F 13 02 F6 | 	mov	arg01, local01
06cc0     04 12 66 F0 | 	shl	arg01, #4
06cc4     0B 00 00 FF 
06cc8     CC E5 05 F1 | 	add	objptr, ##6092
06ccc     F2 12 02 F1 | 	add	arg01, objptr
06cd0     44 00 00 FF 
06cd4     D0 E5 05 F1 | 	add	objptr, ##35280
06cd8     F2 24 02 FB | 	rdlong	local04, objptr
06cdc     12 1F 02 F6 | 	mov	local01, local04
06ce0     02 1E 66 F0 | 	shl	local01, #2
06ce4     12 1F 02 F1 | 	add	local01, local04
06ce8     02 1E 66 F0 | 	shl	local01, #2
06cec     07 00 00 FF 
06cf0     40 E5 85 F1 | 	sub	objptr, ##3904
06cf4     F2 1E 02 F1 | 	add	local01, objptr
06cf8     04 12 06 F1 | 	add	arg01, #4
06cfc     09 13 02 FB | 	rdlong	arg01, arg01
06d00     10 1E 06 F1 | 	add	local01, #16
06d04     0F 1F 02 FB | 	rdlong	local01, local01
06d08     0F 13 52 F2 | 	cmps	arg01, local01 wc
06d0c     49 00 00 FF 
06d10     5C E4 85 F1 | 	sub	objptr, ##37468
06d14     20 00 90 3D |  if_ae	jmp	#LR__0592
06d18     50 00 00 FF 
06d1c     9C E5 05 F1 | 	add	objptr, ##41372
06d20     F2 24 02 FB | 	rdlong	local04, objptr
06d24     01 24 86 F1 | 	sub	local04, #1
06d28     F2 24 62 FC | 	wrlong	local04, objptr
06d2c     50 00 00 FF 
06d30     9C E5 85 F1 | 	sub	objptr, ##41372
06d34     90 00 90 FD | 	jmp	#LR__0594
06d38                 | LR__0592
06d38                 | LR__0593
06d38     50 00 00 FF 
06d3c     9C E5 05 F1 | 	add	objptr, ##41372
06d40     F2 1E 02 FB | 	rdlong	local01, objptr
06d44     0F 25 02 F6 | 	mov	local04, local01
06d48     02 24 66 F0 | 	shl	local04, #2
06d4c     0F 25 02 F1 | 	add	local04, local01
06d50     02 24 66 F0 | 	shl	local04, #2
06d54     07 00 00 FF 
06d58     40 E5 85 F1 | 	sub	objptr, ##3904
06d5c     F2 24 02 F1 | 	add	local04, objptr
06d60     12 25 02 FB | 	rdlong	local04, local04
06d64     07 00 00 FF 
06d68     18 E5 05 F1 | 	add	objptr, ##3864
06d6c     F2 24 62 FC | 	wrlong	local04, objptr
06d70     28 E4 05 F1 | 	add	objptr, #40
06d74     F2 1E 02 FB | 	rdlong	local01, objptr
06d78     0F 25 02 F6 | 	mov	local04, local01
06d7c     02 24 66 F0 | 	shl	local04, #2
06d80     0F 25 02 F1 | 	add	local04, local01
06d84     02 24 66 F0 | 	shl	local04, #2
06d88     07 00 00 FF 
06d8c     40 E5 85 F1 | 	sub	objptr, ##3904
06d90     F2 24 02 F1 | 	add	local04, objptr
06d94     04 24 06 F1 | 	add	local04, #4
06d98     12 25 02 FB | 	rdlong	local04, local04
06d9c     07 00 00 FF 
06da0     1C E5 05 F1 | 	add	objptr, ##3868
06da4     F2 24 62 FC | 	wrlong	local04, objptr
06da8     0F 00 00 FF 
06dac     38 E5 85 F1 | 	sub	objptr, ##7992
06db0     F2 24 02 FB | 	rdlong	local04, objptr
06db4     01 24 86 F1 | 	sub	local04, #1
06db8     04 E4 05 F1 | 	add	objptr, #4
06dbc     F2 24 62 FC | 	wrlong	local04, objptr
06dc0     41 00 00 FF 
06dc4     44 E4 85 F1 | 	sub	objptr, ##33348
06dc8                 | LR__0594
06dc8     A7 F0 03 F6 | 	mov	ptra, fp
06dcc     B2 00 A0 FD | 	call	#popregs_
06dd0                 | _do_next_ret
06dd0     2D 00 64 FD | 	ret
06dd4                 | 
06dd4                 | ' 
06dd4                 | ' 
06dd4                 | ' function compile_next() as ulong
06dd4                 | _compile_next
06dd4     04 4A 05 F6 | 	mov	COUNT_, #4
06dd8     A8 00 A0 FD | 	call	#pushregs_
06ddc     2E 00 00 FF 
06de0     08 E4 05 F1 | 	add	objptr, ##23560
06de4     F2 12 02 FB | 	rdlong	arg01, objptr
06de8     03 12 66 F0 | 	shl	arg01, #3
06dec     02 00 00 FF 
06df0     38 E4 85 F1 | 	sub	objptr, ##1080
06df4     F2 12 02 F1 | 	add	arg01, objptr
06df8     09 1F 02 FB | 	rdlong	local01, arg01
06dfc                 | ' 
06dfc                 | ' varname$=lparts(ct).part$ 
06dfc                 | ' 'suffix$=right$(varname$,1)
06dfc                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
06dfc                 | ' if varnum=0 then compile_error(35)  : return 35
06dfc     04 E4 85 F1 | 	sub	objptr, #4
06e00     F2 14 0A FB | 	rdlong	arg02, objptr wz
06e04     2B 00 00 FF 
06e08     CC E5 85 F1 | 	sub	objptr, ##22476
06e0c     10 00 90 5D |  if_ne	jmp	#LR__0600
06e10     23 12 06 F6 | 	mov	arg01, #35
06e14     4C E0 BF FD | 	call	#_compile_error
06e18     23 FA 05 F6 | 	mov	result1, #35
06e1c     58 01 90 FD | 	jmp	#LR__0604
06e20                 | LR__0600
06e20     01 20 66 F6 | 	neg	local02, #1
06e24                 | ' j=-1
06e24                 | ' for i=0 to varnum-1
06e24     00 22 06 F6 | 	mov	local03, #0
06e28     2B 00 00 FF 
06e2c     CC E5 05 F1 | 	add	objptr, ##22476
06e30     F2 24 02 FB | 	rdlong	local04, objptr
06e34     2B 00 00 FF 
06e38     CC E5 85 F1 | 	sub	objptr, ##22476
06e3c                 | LR__0601
06e3c     12 23 12 F2 | 	cmp	local03, local04 wc
06e40     38 00 90 3D |  if_ae	jmp	#LR__0602
06e44                 | '   if variables(i).name=varname$ then j=i : exit
06e44     11 15 02 F6 | 	mov	arg02, local03
06e48     04 14 66 F0 | 	shl	arg02, #4
06e4c     0B 00 00 FF 
06e50     CC E5 05 F1 | 	add	objptr, ##6092
06e54     F2 14 02 F1 | 	add	arg02, objptr
06e58     0A 13 02 FB | 	rdlong	arg01, arg02
06e5c     0F 15 02 F6 | 	mov	arg02, local01
06e60     0B 00 00 FF 
06e64     CC E5 85 F1 | 	sub	objptr, ##6092
06e68     D0 E0 B0 FD | 	call	#__system___string_cmp
06e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e70     11 21 02 A6 |  if_e	mov	local02, local03
06e74     01 22 06 51 |  if_ne	add	local03, #1
06e78     C0 FF 9F 5D |  if_ne	jmp	#LR__0601
06e7c                 | LR__0602
06e7c                 | ' if j=-1 then compile_error(35) : return 35
06e7c     FF FF 7F FF 
06e80     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06e84     10 00 90 5D |  if_ne	jmp	#LR__0603
06e88     23 12 06 F6 | 	mov	arg01, #35
06e8c     D4 DF BF FD | 	call	#_compile_error
06e90     23 FA 05 F6 | 	mov	result1, #35
06e94     E0 00 90 FD | 	jmp	#LR__0604
06e98                 | LR__0603
06e98     41 00 00 FF 
06e9c     40 E4 05 F1 | 	add	objptr, ##33344
06ea0     F2 24 02 FB | 	rdlong	local04, objptr
06ea4     12 23 02 F6 | 	mov	local03, local04
06ea8     01 22 66 F0 | 	shl	local03, #1
06eac     12 23 02 F1 | 	add	local03, local04
06eb0     02 22 66 F0 | 	shl	local03, #2
06eb4     03 00 00 FF 
06eb8     00 E4 85 F1 | 	sub	objptr, ##1536
06ebc     F2 22 02 F1 | 	add	local03, objptr
06ec0     08 22 06 F1 | 	add	local03, #8
06ec4     11 39 68 FC | 	wrlong	#28, local03
06ec8     03 00 00 FF 
06ecc     00 E4 05 F1 | 	add	objptr, ##1536
06ed0     F2 24 02 FB | 	rdlong	local04, objptr
06ed4     12 23 02 F6 | 	mov	local03, local04
06ed8     01 22 66 F0 | 	shl	local03, #1
06edc     12 23 02 F1 | 	add	local03, local04
06ee0     02 22 66 F0 | 	shl	local03, #2
06ee4     03 00 00 FF 
06ee8     00 E4 85 F1 | 	sub	objptr, ##1536
06eec     F2 22 02 F1 | 	add	local03, objptr
06ef0     11 21 62 FC | 	wrlong	local02, local03
06ef4     03 00 00 FF 
06ef8     00 E4 05 F1 | 	add	objptr, ##1536
06efc     F2 24 02 FB | 	rdlong	local04, objptr
06f00     01 24 06 F1 | 	add	local04, #1
06f04     F2 24 62 FC | 	wrlong	local04, objptr
06f08     12 23 02 F6 | 	mov	local03, local04
06f0c     01 22 66 F0 | 	shl	local03, #1
06f10     12 23 02 F1 | 	add	local03, local04
06f14     02 22 66 F0 | 	shl	local03, #2
06f18     03 00 00 FF 
06f1c     00 E4 85 F1 | 	sub	objptr, ##1536
06f20     F2 22 02 F1 | 	add	local03, objptr
06f24     08 22 06 F1 | 	add	local03, #8
06f28     11 97 68 FC | 	wrlong	#75, local03
06f2c     03 00 00 FF 
06f30     00 E4 05 F1 | 	add	objptr, ##1536
06f34     F2 24 02 FB | 	rdlong	local04, objptr
06f38     12 23 02 F6 | 	mov	local03, local04
06f3c     01 22 66 F0 | 	shl	local03, #1
06f40     12 23 02 F1 | 	add	local03, local04
06f44     02 22 66 F0 | 	shl	local03, #2
06f48     03 00 00 FF 
06f4c     00 E4 85 F1 | 	sub	objptr, ##1536
06f50     F2 22 02 F1 | 	add	local03, objptr
06f54     11 01 68 FC | 	wrlong	#0, local03
06f58     03 00 00 FF 
06f5c     00 E4 05 F1 | 	add	objptr, ##1536
06f60     F2 24 02 FB | 	rdlong	local04, objptr
06f64     01 24 06 F1 | 	add	local04, #1
06f68     F2 24 62 FC | 	wrlong	local04, objptr
06f6c     41 00 00 FF 
06f70     40 E4 85 F1 | 	sub	objptr, ##33344
06f74                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
06f74                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
06f74                 | ' return 0
06f74     00 FA 05 F6 | 	mov	result1, #0
06f78                 | LR__0604
06f78     A7 F0 03 F6 | 	mov	ptra, fp
06f7c     B2 00 A0 FD | 	call	#popregs_
06f80                 | _compile_next_ret
06f80     2D 00 64 FD | 	ret
06f84                 | 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
06f84                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
06f84                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' function compile_goto( ) as ulong
06f84                 | _compile_goto
06f84     03 4A 05 F6 | 	mov	COUNT_, #3
06f88     A8 00 A0 FD | 	call	#pushregs_
06f8c     28 F0 07 F1 | 	add	ptra, #40
06f90                 | ' 
06f90                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
06f90     2E 00 00 FF 
06f94     08 E4 05 F1 | 	add	objptr, ##23560
06f98     F2 16 02 FB | 	rdlong	arg03, objptr
06f9c     03 16 66 F0 | 	shl	arg03, #3
06fa0     02 00 00 FF 
06fa4     38 E4 85 F1 | 	sub	objptr, ##1080
06fa8     F2 16 02 F1 | 	add	arg03, objptr
06fac     04 16 06 F1 | 	add	arg03, #4
06fb0     0B 17 02 FB | 	rdlong	arg03, arg03
06fb4     01 00 00 FF 
06fb8     00 16 0E F2 | 	cmp	arg03, ##512 wz
06fbc     2B 00 00 FF 
06fc0     D0 E5 85 F1 | 	sub	objptr, ##22480
06fc4     CC 02 90 5D |  if_ne	jmp	#LR__0615
06fc8     2E 00 00 FF 
06fcc     08 E4 05 F1 | 	add	objptr, ##23560
06fd0     F2 16 02 FB | 	rdlong	arg03, objptr
06fd4     01 16 06 F1 | 	add	arg03, #1
06fd8     03 16 66 F0 | 	shl	arg03, #3
06fdc     02 00 00 FF 
06fe0     38 E4 85 F1 | 	sub	objptr, ##1080
06fe4     F2 16 02 F1 | 	add	arg03, objptr
06fe8     04 16 06 F1 | 	add	arg03, #4
06fec     0B 17 02 FB | 	rdlong	arg03, arg03
06ff0     FE 17 0E F2 | 	cmp	arg03, #510 wz
06ff4     2B 00 00 FF 
06ff8     D0 E5 85 F1 | 	sub	objptr, ##22480
06ffc     94 02 90 5D |  if_ne	jmp	#LR__0615
07000     2E 00 00 FF 
07004     08 E4 05 F1 | 	add	objptr, ##23560
07008     F2 16 02 FB | 	rdlong	arg03, objptr
0700c     03 16 66 F0 | 	shl	arg03, #3
07010     02 00 00 FF 
07014     38 E4 85 F1 | 	sub	objptr, ##1080
07018     F2 16 02 F1 | 	add	arg03, objptr
0701c     0B 13 02 FB | 	rdlong	arg01, arg03
07020     00 14 06 F6 | 	mov	arg02, #0
07024     2B 00 00 FF 
07028     D0 E5 85 F1 | 	sub	objptr, ##22480
0702c     70 0F B1 FD | 	call	#__system____builtin_atoi
07030     04 4E 05 F1 | 	add	fp, #4
07034     A7 FA 61 FC | 	wrlong	result1, fp
07038     41 00 00 FF 
0703c     40 E4 05 F1 | 	add	objptr, ##33344
07040     F2 1E 02 FB | 	rdlong	local01, objptr
07044     0F 21 02 F6 | 	mov	local02, local01
07048     01 20 66 F0 | 	shl	local02, #1
0704c     0F 21 02 F1 | 	add	local02, local01
07050     02 20 66 F0 | 	shl	local02, #2
07054     03 00 00 FF 
07058     00 E4 85 F1 | 	sub	objptr, ##1536
0705c     F2 20 02 F1 | 	add	local02, objptr
07060     08 20 06 F1 | 	add	local02, #8
07064     10 9D 68 FC | 	wrlong	#78, local02
07068     03 00 00 FF 
0706c     08 E4 05 F1 | 	add	objptr, ##1544
07070     F2 22 02 FB | 	rdlong	local03, objptr
07074     41 00 00 FF 
07078     48 E4 85 F1 | 	sub	objptr, ##33352
0707c     04 4E 05 F1 | 	add	fp, #4
07080     A7 22 62 FC | 	wrlong	local03, fp
07084     08 4E 85 F1 | 	sub	fp, #8
07088                 | ' 
07088                 | '   gotoline=val%(lparts(ct).part$) 
07088                 | '   compiledline(lineptr).result_type=token_fast_goto
07088                 | ' ' now find a pointer to goto
07088                 | '   gotoptr=programstart
07088                 | '   do
07088                 | LR__0610
07088     10 4E 05 F1 | 	add	fp, #16
0708c     A7 12 02 F6 | 	mov	arg01, fp
07090     08 4E 85 F1 | 	sub	fp, #8
07094     A7 14 02 FB | 	rdlong	arg02, fp
07098     08 4E 85 F1 | 	sub	fp, #8
0709c     18 16 06 F6 | 	mov	arg03, #24
070a0     0B 00 00 FF 
070a4     C0 E4 05 F1 | 	add	objptr, ##5824
070a8     7C D3 B0 FD | 	call	#_psram_spin2_read1
070ac     0B 00 00 FF 
070b0     C0 E4 85 F1 | 	sub	objptr, ##5824
070b4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
070b4                 | '     if gotoheader(0)<>$FFFFFFFF then
070b4     10 4E 05 F1 | 	add	fp, #16
070b8     A7 22 02 FB | 	rdlong	local03, fp
070bc     10 4E 85 F1 | 	sub	fp, #16
070c0     FF FF 7F FF 
070c4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
070c8     24 00 90 AD |  if_e	jmp	#LR__0611
070cc     08 4E 05 F1 | 	add	fp, #8
070d0     A7 22 02 FB | 	rdlong	local03, fp
070d4     04 4E 05 F1 | 	add	fp, #4
070d8     A7 22 62 FC | 	wrlong	local03, fp
070dc     18 4E 05 F1 | 	add	fp, #24
070e0     A7 22 02 FB | 	rdlong	local03, fp
070e4     1C 4E 85 F1 | 	sub	fp, #28
070e8     A7 22 62 FC | 	wrlong	local03, fp
070ec     08 4E 85 F1 | 	sub	fp, #8
070f0                 | LR__0611
070f0     24 4E 05 F1 | 	add	fp, #36
070f4     A7 22 02 FB | 	rdlong	local03, fp
070f8     24 4E 85 F1 | 	sub	fp, #36
070fc     FF FF 3F FF 
07100     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
07104     10 4E 05 51 |  if_ne	add	fp, #16
07108     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0710c     10 4E 85 51 |  if_ne	sub	fp, #16
07110     FF FF 7F 5F 
07114     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07118     1C 00 90 AD |  if_e	jmp	#LR__0612
0711c     10 4E 05 F1 | 	add	fp, #16
07120     A7 22 02 FB | 	rdlong	local03, fp
07124     0C 4E 85 F1 | 	sub	fp, #12
07128     A7 20 02 FB | 	rdlong	local02, fp
0712c     04 4E 85 F1 | 	sub	fp, #4
07130     10 23 0A F2 | 	cmp	local03, local02 wz
07134     50 FF 9F 5D |  if_ne	jmp	#LR__0610
07138                 | LR__0612
07138                 | '   if gotoheader(0)=gotoline then
07138     10 4E 05 F1 | 	add	fp, #16
0713c     A7 22 02 FB | 	rdlong	local03, fp
07140     0C 4E 85 F1 | 	sub	fp, #12
07144     A7 1E 02 FB | 	rdlong	local01, fp
07148     04 4E 85 F1 | 	sub	fp, #4
0714c     0F 23 0A F2 | 	cmp	local03, local01 wz
07150     7C 00 90 5D |  if_ne	jmp	#LR__0613
07154     41 00 00 FF 
07158     40 E4 05 F1 | 	add	objptr, ##33344
0715c     F2 1E 02 FB | 	rdlong	local01, objptr
07160     0F 21 02 F6 | 	mov	local02, local01
07164     01 20 66 F0 | 	shl	local02, #1
07168     0F 21 02 F1 | 	add	local02, local01
0716c     02 20 66 F0 | 	shl	local02, #2
07170     03 00 00 FF 
07174     00 E4 85 F1 | 	sub	objptr, ##1536
07178     F2 20 02 F1 | 	add	local02, objptr
0717c     0C 4E 05 F1 | 	add	fp, #12
07180     A7 22 02 FB | 	rdlong	local03, fp
07184     10 23 62 FC | 	wrlong	local03, local02
07188     03 00 00 FF 
0718c     00 E4 05 F1 | 	add	objptr, ##1536
07190     F2 1E 02 FB | 	rdlong	local01, objptr
07194     0F 21 02 F6 | 	mov	local02, local01
07198     01 20 66 F0 | 	shl	local02, #1
0719c     0F 21 02 F1 | 	add	local02, local01
071a0     02 20 66 F0 | 	shl	local02, #2
071a4     03 00 00 FF 
071a8     00 E4 85 F1 | 	sub	objptr, ##1536
071ac     F2 20 02 F1 | 	add	local02, objptr
071b0     08 4E 85 F1 | 	sub	fp, #8
071b4     A7 22 02 FB | 	rdlong	local03, fp
071b8     04 4E 85 F1 | 	sub	fp, #4
071bc     04 20 06 F1 | 	add	local02, #4
071c0     10 23 62 FC | 	wrlong	local03, local02
071c4     3E 00 00 FF 
071c8     40 E4 85 F1 | 	sub	objptr, ##31808
071cc     A4 00 90 FD | 	jmp	#LR__0614
071d0                 | LR__0613
071d0     41 00 00 FF 
071d4     40 E4 05 F1 | 	add	objptr, ##33344
071d8     F2 1E 02 FB | 	rdlong	local01, objptr
071dc     0F 21 02 F6 | 	mov	local02, local01
071e0     01 20 66 F0 | 	shl	local02, #1
071e4     0F 21 02 F1 | 	add	local02, local01
071e8     02 20 66 F0 | 	shl	local02, #2
071ec     03 00 00 FF 
071f0     00 E4 85 F1 | 	sub	objptr, ##1536
071f4     F2 20 02 F1 | 	add	local02, objptr
071f8     00 00 C0 FF 
071fc     10 01 68 FC | 	wrlong	##-2147483648, local02
07200     03 00 00 FF 
07204     00 E4 05 F1 | 	add	objptr, ##1536
07208     F2 1E 02 FB | 	rdlong	local01, objptr
0720c     0F 21 02 F6 | 	mov	local02, local01
07210     01 20 66 F0 | 	shl	local02, #1
07214     0F 21 02 F1 | 	add	local02, local01
07218     02 20 66 F0 | 	shl	local02, #2
0721c     03 00 00 FF 
07220     00 E4 85 F1 | 	sub	objptr, ##1536
07224     F2 20 02 F1 | 	add	local02, objptr
07228     04 4E 05 F1 | 	add	fp, #4
0722c     A7 22 02 FB | 	rdlong	local03, fp
07230     04 4E 85 F1 | 	sub	fp, #4
07234     04 20 06 F1 | 	add	local02, #4
07238     10 23 62 FC | 	wrlong	local03, local02
0723c     03 00 00 FF 
07240     00 E4 05 F1 | 	add	objptr, ##1536
07244     F2 1E 02 FB | 	rdlong	local01, objptr
07248     0F 21 02 F6 | 	mov	local02, local01
0724c     01 20 66 F0 | 	shl	local02, #1
07250     0F 21 02 F1 | 	add	local02, local01
07254     02 20 66 F0 | 	shl	local02, #2
07258     03 00 00 FF 
0725c     00 E4 85 F1 | 	sub	objptr, ##1536
07260     F2 20 02 F1 | 	add	local02, objptr
07264     08 20 06 F1 | 	add	local02, #8
07268     10 A7 68 FC | 	wrlong	#83, local02
0726c     3E 00 00 FF 
07270     40 E4 85 F1 | 	sub	objptr, ##31808
07274                 | LR__0614
07274     41 00 00 FF 
07278     40 E4 05 F1 | 	add	objptr, ##33344
0727c     F2 22 02 FB | 	rdlong	local03, objptr
07280     01 22 06 F1 | 	add	local03, #1
07284     F2 22 62 FC | 	wrlong	local03, objptr
07288     41 00 00 FF 
0728c     40 E4 85 F1 | 	sub	objptr, ##33344
07290     40 00 90 FD | 	jmp	#LR__0616
07294                 | LR__0615
07294                 | '    print "We have a slow goto, todo  "
07294     00 12 06 F6 | 	mov	arg01, #0
07298     2C 32 B1 FD | 	call	#__system___getiolock_0350
0729c     FD 12 02 F6 | 	mov	arg01, result1
072a0     70 DC B0 FD | 	call	#__system___lockmem
072a4     22 01 00 FF 
072a8     5B 14 06 F6 | 	mov	arg02, ##@LR__4305
072ac     00 12 06 F6 | 	mov	arg01, #0
072b0     00 16 06 F6 | 	mov	arg03, #0
072b4     50 E9 B0 FD | 	call	#__system___basic_print_string
072b8     00 12 06 F6 | 	mov	arg01, #0
072bc     0A 14 06 F6 | 	mov	arg02, #10
072c0     00 16 06 F6 | 	mov	arg03, #0
072c4     E8 E8 B0 FD | 	call	#__system___basic_print_char
072c8     00 12 06 F6 | 	mov	arg01, #0
072cc     F8 31 B1 FD | 	call	#__system___getiolock_0350
072d0     FD 00 68 FC | 	wrlong	#0, result1
072d4                 | LR__0616
072d4                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
072d4                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
072d4                 | ' return 0
072d4     00 FA 05 F6 | 	mov	result1, #0
072d8     A7 F0 03 F6 | 	mov	ptra, fp
072dc     B2 00 A0 FD | 	call	#popregs_
072e0                 | _compile_goto_ret
072e0     2D 00 64 FD | 	ret
072e4                 | 
072e4                 | ' 
072e4                 | ' 
072e4                 | ' 
072e4                 | ' 
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' 
072e4                 | ' 
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
072e4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
072e4                 | ' 
072e4                 | ' 
072e4                 | ' function expr() as integer 
072e4                 | _expr
072e4     07 4A 05 F6 | 	mov	COUNT_, #7
072e8     A8 00 A0 FD | 	call	#pushregs_
072ec                 | _expr_enter
072ec     2E 00 00 FF 
072f0     08 E4 05 F1 | 	add	objptr, ##23560
072f4     F2 24 02 FB | 	rdlong	local04, objptr
072f8     03 24 66 F0 | 	shl	local04, #3
072fc     02 00 00 FF 
07300     38 E4 85 F1 | 	sub	objptr, ##1080
07304     F2 24 02 F1 | 	add	local04, objptr
07308     04 24 06 F1 | 	add	local04, #4
0730c     12 27 02 FB | 	rdlong	local05, local04
07310                 | ' 
07310                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
07310     FE 27 0E F2 | 	cmp	local05, #510 wz
07314     2B 00 00 FF 
07318     D0 E5 85 F1 | 	sub	objptr, ##22480
0731c     C4 00 90 5D |  if_ne	jmp	#LR__0620
07320     1D 1E 06 F6 | 	mov	local01, #29
07324     FF 22 06 F6 | 	mov	local03, #255
07328     0F 29 02 F6 | 	mov	local06, local01
0732c     10 2B 02 F6 | 	mov	local07, local02
07330     11 1F 02 F6 | 	mov	local01, local03
07334     41 00 00 FF 
07338     40 E4 05 F1 | 	add	objptr, ##33344
0733c     F2 26 02 FB | 	rdlong	local05, objptr
07340     13 25 02 F6 | 	mov	local04, local05
07344     01 24 66 F0 | 	shl	local04, #1
07348     13 25 02 F1 | 	add	local04, local05
0734c     02 24 66 F0 | 	shl	local04, #2
07350     03 00 00 FF 
07354     00 E4 85 F1 | 	sub	objptr, ##1536
07358     F2 24 02 F1 | 	add	local04, objptr
0735c     12 29 62 FC | 	wrlong	local06, local04
07360     03 00 00 FF 
07364     00 E4 05 F1 | 	add	objptr, ##1536
07368     F2 28 02 FB | 	rdlong	local06, objptr
0736c     14 27 02 F6 | 	mov	local05, local06
07370     01 26 66 F0 | 	shl	local05, #1
07374     14 27 02 F1 | 	add	local05, local06
07378     02 26 66 F0 | 	shl	local05, #2
0737c     03 00 00 FF 
07380     00 E4 85 F1 | 	sub	objptr, ##1536
07384     F2 26 02 F1 | 	add	local05, objptr
07388     04 26 06 F1 | 	add	local05, #4
0738c     13 2B 62 FC | 	wrlong	local07, local05
07390     03 00 00 FF 
07394     00 E4 05 F1 | 	add	objptr, ##1536
07398     F2 2A 02 FB | 	rdlong	local07, objptr
0739c     15 29 02 F6 | 	mov	local06, local07
073a0     01 28 66 F0 | 	shl	local06, #1
073a4     15 29 02 F1 | 	add	local06, local07
073a8     02 28 66 F0 | 	shl	local06, #2
073ac     03 00 00 FF 
073b0     00 E4 85 F1 | 	sub	objptr, ##1536
073b4     F2 28 02 F1 | 	add	local06, objptr
073b8     08 28 06 F1 | 	add	local06, #8
073bc     14 1F 62 FC | 	wrlong	local01, local06
073c0     03 00 00 FF 
073c4     00 E4 05 F1 | 	add	objptr, ##1536
073c8     F2 28 02 FB | 	rdlong	local06, objptr
073cc     01 28 06 F1 | 	add	local06, #1
073d0     F2 28 62 FC | 	wrlong	local06, objptr
073d4     41 00 00 FF 
073d8     40 E4 85 F1 | 	sub	objptr, ##33344
073dc     1D FA 05 F6 | 	mov	result1, #29
073e0     54 01 90 FD | 	jmp	#LR__0623
073e4                 | LR__0620
073e4     00 1E 06 F6 | 	mov	local01, #0
073e8     58 01 B0 FD | 	call	#_addsub
073ec     2E 00 00 FF 
073f0     08 E4 05 F1 | 	add	objptr, ##23560
073f4     F2 24 02 FB | 	rdlong	local04, objptr
073f8     03 24 66 F0 | 	shl	local04, #3
073fc     02 00 00 FF 
07400     38 E4 85 F1 | 	sub	objptr, ##1080
07404     F2 24 02 F1 | 	add	local04, objptr
07408     04 24 06 F1 | 	add	local04, #4
0740c     12 27 02 FB | 	rdlong	local05, local04
07410                 | ' t3.result.uresult=0
07410                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07410                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07410                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
07410     2B 00 00 FF 
07414     D0 E5 85 F1 | 	sub	objptr, ##22480
07418                 | LR__0621
07418     1B 26 0E F2 | 	cmp	local05, #27 wz
0741c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
07420     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
07424     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
07428     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0742c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
07430     00 01 90 5D |  if_ne	jmp	#LR__0622
07434     2E 00 00 FF 
07438     08 E4 05 F1 | 	add	objptr, ##23560
0743c     F2 28 02 FB | 	rdlong	local06, objptr
07440     01 28 06 F1 | 	add	local06, #1
07444     F2 28 62 FC | 	wrlong	local06, objptr
07448     2E 00 00 FF 
0744c     08 E4 85 F1 | 	sub	objptr, ##23560
07450     F0 00 B0 FD | 	call	#_addsub
07454     13 23 02 F6 | 	mov	local03, local05
07458     0F 29 02 F6 | 	mov	local06, local01
0745c     10 2B 02 F6 | 	mov	local07, local02
07460     11 27 02 F6 | 	mov	local05, local03
07464     41 00 00 FF 
07468     40 E4 05 F1 | 	add	objptr, ##33344
0746c     F2 24 02 FB | 	rdlong	local04, objptr
07470     12 FB 01 F6 | 	mov	result1, local04
07474     01 FA 65 F0 | 	shl	result1, #1
07478     12 FB 01 F1 | 	add	result1, local04
0747c     02 FA 65 F0 | 	shl	result1, #2
07480     03 00 00 FF 
07484     00 E4 85 F1 | 	sub	objptr, ##1536
07488     F2 FA 01 F1 | 	add	result1, objptr
0748c     FD 28 62 FC | 	wrlong	local06, result1
07490     03 00 00 FF 
07494     00 E4 05 F1 | 	add	objptr, ##1536
07498     F2 28 02 FB | 	rdlong	local06, objptr
0749c     14 25 02 F6 | 	mov	local04, local06
074a0     01 24 66 F0 | 	shl	local04, #1
074a4     14 25 02 F1 | 	add	local04, local06
074a8     02 24 66 F0 | 	shl	local04, #2
074ac     03 00 00 FF 
074b0     00 E4 85 F1 | 	sub	objptr, ##1536
074b4     F2 24 02 F1 | 	add	local04, objptr
074b8     04 24 06 F1 | 	add	local04, #4
074bc     12 2B 62 FC | 	wrlong	local07, local04
074c0     03 00 00 FF 
074c4     00 E4 05 F1 | 	add	objptr, ##1536
074c8     F2 2A 02 FB | 	rdlong	local07, objptr
074cc     15 29 02 F6 | 	mov	local06, local07
074d0     01 28 66 F0 | 	shl	local06, #1
074d4     15 29 02 F1 | 	add	local06, local07
074d8     02 28 66 F0 | 	shl	local06, #2
074dc     03 00 00 FF 
074e0     00 E4 85 F1 | 	sub	objptr, ##1536
074e4     F2 28 02 F1 | 	add	local06, objptr
074e8     08 28 06 F1 | 	add	local06, #8
074ec     14 27 62 FC | 	wrlong	local05, local06
074f0     03 00 00 FF 
074f4     00 E4 05 F1 | 	add	objptr, ##1536
074f8     F2 28 02 FB | 	rdlong	local06, objptr
074fc     01 28 06 F1 | 	add	local06, #1
07500     F2 28 62 FC | 	wrlong	local06, objptr
07504     13 00 00 FF 
07508     38 E4 85 F1 | 	sub	objptr, ##9784
0750c     F2 24 02 FB | 	rdlong	local04, objptr
07510     03 24 66 F0 | 	shl	local04, #3
07514     02 00 00 FF 
07518     38 E4 85 F1 | 	sub	objptr, ##1080
0751c     F2 24 02 F1 | 	add	local04, objptr
07520     04 24 06 F1 | 	add	local04, #4
07524     12 27 02 FB | 	rdlong	local05, local04
07528     2B 00 00 FF 
0752c     D0 E5 85 F1 | 	sub	objptr, ##22480
07530     E4 FE 9F FD | 	jmp	#LR__0621
07534                 | LR__0622
07534                 | ' return 0  
07534     00 FA 05 F6 | 	mov	result1, #0
07538                 | LR__0623
07538     A7 F0 03 F6 | 	mov	ptra, fp
0753c     B2 00 A0 FD | 	call	#popregs_
07540                 | _expr_ret
07540     2D 00 64 FD | 	ret
07544                 | 
07544                 | ' 
07544                 | ' 
07544                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
07544                 | ' 
07544                 | ' function addsub() as integer 
07544                 | _addsub
07544     07 4A 05 F6 | 	mov	COUNT_, #7
07548     A8 00 A0 FD | 	call	#pushregs_
0754c                 | _addsub_enter
0754c     00 1E 06 F6 | 	mov	local01, #0
07550     50 01 B0 FD | 	call	#_muldiv
07554     2E 00 00 FF 
07558     08 E4 05 F1 | 	add	objptr, ##23560
0755c     F2 24 02 FB | 	rdlong	local04, objptr
07560     03 24 66 F0 | 	shl	local04, #3
07564     02 00 00 FF 
07568     38 E4 85 F1 | 	sub	objptr, ##1080
0756c     F2 24 02 F1 | 	add	local04, objptr
07570     04 24 06 F1 | 	add	local04, #4
07574     12 27 02 FB | 	rdlong	local05, local04
07578                 | ' t3.result.uresult=0
07578                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
07578                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
07578                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
07578     2B 00 00 FF 
0757c     D0 E5 85 F1 | 	sub	objptr, ##22480
07580                 | LR__0630
07580     01 26 0E F2 | 	cmp	local05, #1 wz
07584     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07588     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0758c     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
07590     00 01 90 5D |  if_ne	jmp	#LR__0631
07594     2E 00 00 FF 
07598     08 E4 05 F1 | 	add	objptr, ##23560
0759c     F2 24 02 FB | 	rdlong	local04, objptr
075a0     01 24 06 F1 | 	add	local04, #1
075a4     F2 24 62 FC | 	wrlong	local04, objptr
075a8     2E 00 00 FF 
075ac     08 E4 85 F1 | 	sub	objptr, ##23560
075b0     F0 00 B0 FD | 	call	#_muldiv
075b4     13 23 02 F6 | 	mov	local03, local05
075b8     0F 29 02 F6 | 	mov	local06, local01
075bc     10 2B 02 F6 | 	mov	local07, local02
075c0     11 27 02 F6 | 	mov	local05, local03
075c4     41 00 00 FF 
075c8     40 E4 05 F1 | 	add	objptr, ##33344
075cc     F2 24 02 FB | 	rdlong	local04, objptr
075d0     12 FB 01 F6 | 	mov	result1, local04
075d4     01 FA 65 F0 | 	shl	result1, #1
075d8     12 FB 01 F1 | 	add	result1, local04
075dc     02 FA 65 F0 | 	shl	result1, #2
075e0     03 00 00 FF 
075e4     00 E4 85 F1 | 	sub	objptr, ##1536
075e8     F2 FA 01 F1 | 	add	result1, objptr
075ec     FD 28 62 FC | 	wrlong	local06, result1
075f0     03 00 00 FF 
075f4     00 E4 05 F1 | 	add	objptr, ##1536
075f8     F2 28 02 FB | 	rdlong	local06, objptr
075fc     14 25 02 F6 | 	mov	local04, local06
07600     01 24 66 F0 | 	shl	local04, #1
07604     14 25 02 F1 | 	add	local04, local06
07608     02 24 66 F0 | 	shl	local04, #2
0760c     03 00 00 FF 
07610     00 E4 85 F1 | 	sub	objptr, ##1536
07614     F2 24 02 F1 | 	add	local04, objptr
07618     04 24 06 F1 | 	add	local04, #4
0761c     12 2B 62 FC | 	wrlong	local07, local04
07620     03 00 00 FF 
07624     00 E4 05 F1 | 	add	objptr, ##1536
07628     F2 2A 02 FB | 	rdlong	local07, objptr
0762c     15 29 02 F6 | 	mov	local06, local07
07630     01 28 66 F0 | 	shl	local06, #1
07634     15 29 02 F1 | 	add	local06, local07
07638     02 28 66 F0 | 	shl	local06, #2
0763c     03 00 00 FF 
07640     00 E4 85 F1 | 	sub	objptr, ##1536
07644     F2 28 02 F1 | 	add	local06, objptr
07648     08 28 06 F1 | 	add	local06, #8
0764c     14 27 62 FC | 	wrlong	local05, local06
07650     03 00 00 FF 
07654     00 E4 05 F1 | 	add	objptr, ##1536
07658     F2 28 02 FB | 	rdlong	local06, objptr
0765c     01 28 06 F1 | 	add	local06, #1
07660     F2 28 62 FC | 	wrlong	local06, objptr
07664     13 00 00 FF 
07668     38 E4 85 F1 | 	sub	objptr, ##9784
0766c     F2 24 02 FB | 	rdlong	local04, objptr
07670     03 24 66 F0 | 	shl	local04, #3
07674     02 00 00 FF 
07678     38 E4 85 F1 | 	sub	objptr, ##1080
0767c     F2 24 02 F1 | 	add	local04, objptr
07680     04 24 06 F1 | 	add	local04, #4
07684     12 27 02 FB | 	rdlong	local05, local04
07688     2B 00 00 FF 
0768c     D0 E5 85 F1 | 	sub	objptr, ##22480
07690     EC FE 9F FD | 	jmp	#LR__0630
07694                 | LR__0631
07694                 | '   return 0
07694     00 FA 05 F6 | 	mov	result1, #0
07698     A7 F0 03 F6 | 	mov	ptra, fp
0769c     B2 00 A0 FD | 	call	#popregs_
076a0                 | _addsub_ret
076a0     2D 00 64 FD | 	ret
076a4                 | 
076a4                 | ' 
076a4                 | ' sub muldiv()
076a4                 | _muldiv
076a4     08 4A 05 F6 | 	mov	COUNT_, #8
076a8     A8 00 A0 FD | 	call	#pushregs_
076ac                 | _muldiv_enter
076ac     00 1E 06 F6 | 	mov	local01, #0
076b0     58 01 B0 FD | 	call	#_getvalue
076b4     2E 00 00 FF 
076b8     08 E4 05 F1 | 	add	objptr, ##23560
076bc     F2 24 02 FB | 	rdlong	local04, objptr
076c0     03 24 66 F0 | 	shl	local04, #3
076c4     02 00 00 FF 
076c8     38 E4 85 F1 | 	sub	objptr, ##1080
076cc     F2 24 02 F1 | 	add	local04, objptr
076d0     04 24 06 F1 | 	add	local04, #4
076d4     12 27 02 FB | 	rdlong	local05, local04
076d8                 | ' t3.result.uresult=0
076d8                 | ' getvalue()    
076d8                 | ' op = lparts(ct).token
076d8                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
076d8     2B 00 00 FF 
076dc     D0 E5 85 F1 | 	sub	objptr, ##22480
076e0                 | LR__0640
076e0     05 26 0E F2 | 	cmp	local05, #5 wz
076e4     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
076e8     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
076ec     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
076f0     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
076f4     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
076f8     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
076fc     00 01 90 5D |  if_ne	jmp	#LR__0641
07700     2E 00 00 FF 
07704     08 E4 05 F1 | 	add	objptr, ##23560
07708     F2 24 02 FB | 	rdlong	local04, objptr
0770c     01 24 06 F1 | 	add	local04, #1
07710     F2 24 62 FC | 	wrlong	local04, objptr
07714     2E 00 00 FF 
07718     08 E4 85 F1 | 	sub	objptr, ##23560
0771c     EC 00 B0 FD | 	call	#_getvalue
07720     13 23 02 F6 | 	mov	local03, local05
07724     0F 29 02 F6 | 	mov	local06, local01
07728     10 2B 02 F6 | 	mov	local07, local02
0772c     11 27 02 F6 | 	mov	local05, local03
07730     41 00 00 FF 
07734     40 E4 05 F1 | 	add	objptr, ##33344
07738     F2 24 02 FB | 	rdlong	local04, objptr
0773c     12 2D 02 F6 | 	mov	local08, local04
07740     01 2C 66 F0 | 	shl	local08, #1
07744     12 2D 02 F1 | 	add	local08, local04
07748     02 2C 66 F0 | 	shl	local08, #2
0774c     03 00 00 FF 
07750     00 E4 85 F1 | 	sub	objptr, ##1536
07754     F2 2C 02 F1 | 	add	local08, objptr
07758     16 29 62 FC | 	wrlong	local06, local08
0775c     03 00 00 FF 
07760     00 E4 05 F1 | 	add	objptr, ##1536
07764     F2 2C 02 FB | 	rdlong	local08, objptr
07768     16 29 02 F6 | 	mov	local06, local08
0776c     01 28 66 F0 | 	shl	local06, #1
07770     16 29 02 F1 | 	add	local06, local08
07774     02 28 66 F0 | 	shl	local06, #2
07778     03 00 00 FF 
0777c     00 E4 85 F1 | 	sub	objptr, ##1536
07780     F2 28 02 F1 | 	add	local06, objptr
07784     04 28 06 F1 | 	add	local06, #4
07788     14 2B 62 FC | 	wrlong	local07, local06
0778c     03 00 00 FF 
07790     00 E4 05 F1 | 	add	objptr, ##1536
07794     F2 2C 02 FB | 	rdlong	local08, objptr
07798     16 2B 02 F6 | 	mov	local07, local08
0779c     01 2A 66 F0 | 	shl	local07, #1
077a0     16 2B 02 F1 | 	add	local07, local08
077a4     02 2A 66 F0 | 	shl	local07, #2
077a8     03 00 00 FF 
077ac     00 E4 85 F1 | 	sub	objptr, ##1536
077b0     F2 2A 02 F1 | 	add	local07, objptr
077b4     08 2A 06 F1 | 	add	local07, #8
077b8     15 27 62 FC | 	wrlong	local05, local07
077bc     03 00 00 FF 
077c0     00 E4 05 F1 | 	add	objptr, ##1536
077c4     F2 28 02 FB | 	rdlong	local06, objptr
077c8     01 28 06 F1 | 	add	local06, #1
077cc     F2 28 62 FC | 	wrlong	local06, objptr
077d0     13 00 00 FF 
077d4     38 E4 85 F1 | 	sub	objptr, ##9784
077d8     F2 24 02 FB | 	rdlong	local04, objptr
077dc     03 24 66 F0 | 	shl	local04, #3
077e0     02 00 00 FF 
077e4     38 E4 85 F1 | 	sub	objptr, ##1080
077e8     F2 24 02 F1 | 	add	local04, objptr
077ec     04 24 06 F1 | 	add	local04, #4
077f0     12 27 02 FB | 	rdlong	local05, local04
077f4     2B 00 00 FF 
077f8     D0 E5 85 F1 | 	sub	objptr, ##22480
077fc     E0 FE 9F FD | 	jmp	#LR__0640
07800                 | LR__0641
07800     A7 F0 03 F6 | 	mov	ptra, fp
07804     B2 00 A0 FD | 	call	#popregs_
07808                 | _muldiv_ret
07808     2D 00 64 FD | 	ret
0780c                 | 
0780c                 | ' 
0780c                 | ' sub getvalue() 
0780c                 | _getvalue
0780c     0B 4A 05 F6 | 	mov	COUNT_, #11
07810     A8 00 A0 FD | 	call	#pushregs_
07814                 | _getvalue_enter
07814     01 24 06 F6 | 	mov	local04, #1
07818     00 1E 06 F6 | 	mov	local01, #0
0781c     1D 22 06 F6 | 	mov	local03, #29
07820     2E 00 00 FF 
07824     08 E4 05 F1 | 	add	objptr, ##23560
07828     F2 16 02 FB | 	rdlong	arg03, objptr
0782c     03 16 66 F0 | 	shl	arg03, #3
07830     02 00 00 FF 
07834     38 E4 85 F1 | 	sub	objptr, ##1080
07838     F2 16 02 F1 | 	add	arg03, objptr
0783c     04 16 06 F1 | 	add	arg03, #4
07840     0B 27 02 FB | 	rdlong	local05, arg03
07844                 | ' m=1
07844                 | ' t1.result.uresult=0: t1.result_type=result_uint
07844                 | ' op=lparts(ct).token
07844                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07844     02 26 0E F2 | 	cmp	local05, #2 wz
07848     2B 00 00 FF 
0784c     D0 E5 85 F1 | 	sub	objptr, ##22480
07850     38 00 90 5D |  if_ne	jmp	#LR__0650
07854     01 24 66 F6 | 	neg	local04, #1
07858     2E 00 00 FF 
0785c     08 E4 05 F1 | 	add	objptr, ##23560
07860     F2 26 02 FB | 	rdlong	local05, objptr
07864     01 26 06 F1 | 	add	local05, #1
07868     F2 26 62 FC | 	wrlong	local05, objptr
0786c     03 26 66 F0 | 	shl	local05, #3
07870     02 00 00 FF 
07874     38 E4 85 F1 | 	sub	objptr, ##1080
07878     F2 26 02 F1 | 	add	local05, objptr
0787c     04 26 06 F1 | 	add	local05, #4
07880     13 27 02 FB | 	rdlong	local05, local05
07884     2B 00 00 FF 
07888     D0 E5 85 F1 | 	sub	objptr, ##22480
0788c                 | LR__0650
0788c                 | ' select case op
0788c     01 00 00 FF 
07890     00 26 0E F2 | 	cmp	local05, ##512 wz
07894     3C 00 90 AD |  if_e	jmp	#LR__0651
07898     01 00 00 FF 
0789c     01 26 0E F2 | 	cmp	local05, ##513 wz
078a0     88 01 90 AD |  if_e	jmp	#LR__0654
078a4     01 00 00 FF 
078a8     02 26 0E F2 | 	cmp	local05, ##514 wz
078ac     84 02 90 AD |  if_e	jmp	#LR__0655
078b0     01 00 00 FF 
078b4     03 26 0E F2 | 	cmp	local05, ##515 wz
078b8     E8 03 90 AD |  if_e	jmp	#LR__0658
078bc     01 00 00 FF 
078c0     04 26 0E F2 | 	cmp	local05, ##516 wz
078c4     E0 05 90 AD |  if_e	jmp	#LR__0663
078c8     15 26 0E F2 | 	cmp	local05, #21 wz
078cc     00 06 90 AD |  if_e	jmp	#LR__0664
078d0     70 06 90 FD | 	jmp	#LR__0665
078d4                 | LR__0651
078d4                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
078d4     01 24 0E F2 | 	cmp	local04, #1 wz
078d8     3C 00 90 5D |  if_ne	jmp	#LR__0652
078dc     2E 00 00 FF 
078e0     08 E4 05 F1 | 	add	objptr, ##23560
078e4     F2 26 02 FB | 	rdlong	local05, objptr
078e8     03 26 66 F0 | 	shl	local05, #3
078ec     02 00 00 FF 
078f0     38 E4 85 F1 | 	sub	objptr, ##1080
078f4     F2 26 02 F1 | 	add	local05, objptr
078f8     13 13 02 FB | 	rdlong	arg01, local05
078fc     00 14 06 F6 | 	mov	arg02, #0
07900     2B 00 00 FF 
07904     D0 E5 85 F1 | 	sub	objptr, ##22480
07908     94 06 B1 FD | 	call	#__system____builtin_atoi
0790c     FD 24 02 FD | 	qmul	local04, result1
07910     18 1E 62 FD | 	getqx	local01
07914     1D 22 06 F6 | 	mov	local03, #29
07918                 | LR__0652
07918                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07918     FF FF 7F FF 
0791c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07920     3C 00 90 5D |  if_ne	jmp	#LR__0653
07924     2E 00 00 FF 
07928     08 E4 05 F1 | 	add	objptr, ##23560
0792c     F2 26 02 FB | 	rdlong	local05, objptr
07930     03 26 66 F0 | 	shl	local05, #3
07934     02 00 00 FF 
07938     38 E4 85 F1 | 	sub	objptr, ##1080
0793c     F2 26 02 F1 | 	add	local05, objptr
07940     13 13 02 FB | 	rdlong	arg01, local05
07944     00 14 06 F6 | 	mov	arg02, #0
07948     2B 00 00 FF 
0794c     D0 E5 85 F1 | 	sub	objptr, ##22480
07950     4C 06 B1 FD | 	call	#__system____builtin_atoi
07954     FD 24 02 FD | 	qmul	local04, result1
07958     18 1E 62 FD | 	getqx	local01
0795c     1C 22 06 F6 | 	mov	local03, #28
07960                 | LR__0653
07960     0F 29 02 F6 | 	mov	local06, local01
07964     10 2B 02 F6 | 	mov	local07, local02
07968     11 27 02 F6 | 	mov	local05, local03
0796c     41 00 00 FF 
07970     40 E4 05 F1 | 	add	objptr, ##33344
07974     F2 1E 02 FB | 	rdlong	local01, objptr
07978     0F 25 02 F6 | 	mov	local04, local01
0797c     01 24 66 F0 | 	shl	local04, #1
07980     0F 25 02 F1 | 	add	local04, local01
07984     02 24 66 F0 | 	shl	local04, #2
07988     03 00 00 FF 
0798c     00 E4 85 F1 | 	sub	objptr, ##1536
07990     F2 24 02 F1 | 	add	local04, objptr
07994     12 29 62 FC | 	wrlong	local06, local04
07998     03 00 00 FF 
0799c     00 E4 05 F1 | 	add	objptr, ##1536
079a0     F2 28 02 FB | 	rdlong	local06, objptr
079a4     14 1F 02 F6 | 	mov	local01, local06
079a8     01 1E 66 F0 | 	shl	local01, #1
079ac     14 1F 02 F1 | 	add	local01, local06
079b0     02 1E 66 F0 | 	shl	local01, #2
079b4     03 00 00 FF 
079b8     00 E4 85 F1 | 	sub	objptr, ##1536
079bc     F2 1E 02 F1 | 	add	local01, objptr
079c0     04 1E 06 F1 | 	add	local01, #4
079c4     0F 2B 62 FC | 	wrlong	local07, local01
079c8     03 00 00 FF 
079cc     00 E4 05 F1 | 	add	objptr, ##1536
079d0     F2 2A 02 FB | 	rdlong	local07, objptr
079d4     15 29 02 F6 | 	mov	local06, local07
079d8     01 28 66 F0 | 	shl	local06, #1
079dc     15 29 02 F1 | 	add	local06, local07
079e0     02 28 66 F0 | 	shl	local06, #2
079e4     03 00 00 FF 
079e8     00 E4 85 F1 | 	sub	objptr, ##1536
079ec     F2 28 02 F1 | 	add	local06, objptr
079f0     08 28 06 F1 | 	add	local06, #8
079f4     14 27 62 FC | 	wrlong	local05, local06
079f8     03 00 00 FF 
079fc     00 E4 05 F1 | 	add	objptr, ##1536
07a00     F2 28 02 FB | 	rdlong	local06, objptr
07a04     01 28 06 F1 | 	add	local06, #1
07a08     F2 28 62 FC | 	wrlong	local06, objptr
07a0c     13 00 00 FF 
07a10     38 E4 85 F1 | 	sub	objptr, ##9784
07a14     F2 28 02 FB | 	rdlong	local06, objptr
07a18     01 28 06 F1 | 	add	local06, #1
07a1c     F2 28 62 FC | 	wrlong	local06, objptr
07a20     2E 00 00 FF 
07a24     08 E4 85 F1 | 	sub	objptr, ##23560
07a28     3C 05 90 FD | 	jmp	#LR__0666
07a2c                 | LR__0654
07a2c     2E 00 00 FF 
07a30     08 E4 05 F1 | 	add	objptr, ##23560
07a34     F2 28 02 FB | 	rdlong	local06, objptr
07a38     03 28 66 F0 | 	shl	local06, #3
07a3c     02 00 00 FF 
07a40     38 E4 85 F1 | 	sub	objptr, ##1080
07a44     F2 28 02 F1 | 	add	local06, objptr
07a48     14 13 02 FB | 	rdlong	arg01, local06
07a4c     00 14 06 F6 | 	mov	arg02, #0
07a50     2B 00 00 FF 
07a54     D0 E5 85 F1 | 	sub	objptr, ##22480
07a58     44 05 B1 FD | 	call	#__system____builtin_atoi
07a5c     FD 24 02 FD | 	qmul	local04, result1
07a60     41 00 00 FF 
07a64     40 E4 05 F1 | 	add	objptr, ##33344
07a68     F2 28 02 FB | 	rdlong	local06, objptr
07a6c     14 2D 02 F6 | 	mov	local08, local06
07a70     01 2C 66 F0 | 	shl	local08, #1
07a74     14 2D 02 F1 | 	add	local08, local06
07a78     02 2C 66 F0 | 	shl	local08, #2
07a7c     03 00 00 FF 
07a80     00 E4 85 F1 | 	sub	objptr, ##1536
07a84     F2 2C 02 F1 | 	add	local08, objptr
07a88     03 00 00 FF 
07a8c     00 E4 05 F1 | 	add	objptr, ##1536
07a90     18 1E 62 FD | 	getqx	local01
07a94     1C 22 06 F6 | 	mov	local03, #28
07a98     0F 29 02 F6 | 	mov	local06, local01
07a9c     10 2B 02 F6 | 	mov	local07, local02
07aa0     16 29 62 FC | 	wrlong	local06, local08
07aa4     11 2D 02 F6 | 	mov	local08, local03
07aa8     F2 28 02 FB | 	rdlong	local06, objptr
07aac     14 27 02 F6 | 	mov	local05, local06
07ab0     01 26 66 F0 | 	shl	local05, #1
07ab4     14 27 02 F1 | 	add	local05, local06
07ab8     02 26 66 F0 | 	shl	local05, #2
07abc     03 00 00 FF 
07ac0     00 E4 85 F1 | 	sub	objptr, ##1536
07ac4     F2 26 02 F1 | 	add	local05, objptr
07ac8     04 26 06 F1 | 	add	local05, #4
07acc     13 2B 62 FC | 	wrlong	local07, local05
07ad0     03 00 00 FF 
07ad4     00 E4 05 F1 | 	add	objptr, ##1536
07ad8     F2 2A 02 FB | 	rdlong	local07, objptr
07adc     15 29 02 F6 | 	mov	local06, local07
07ae0     01 28 66 F0 | 	shl	local06, #1
07ae4     15 29 02 F1 | 	add	local06, local07
07ae8     02 28 66 F0 | 	shl	local06, #2
07aec     03 00 00 FF 
07af0     00 E4 85 F1 | 	sub	objptr, ##1536
07af4     F2 28 02 F1 | 	add	local06, objptr
07af8     08 28 06 F1 | 	add	local06, #8
07afc     14 2D 62 FC | 	wrlong	local08, local06
07b00     03 00 00 FF 
07b04     00 E4 05 F1 | 	add	objptr, ##1536
07b08     F2 28 02 FB | 	rdlong	local06, objptr
07b0c     01 28 06 F1 | 	add	local06, #1
07b10     F2 28 62 FC | 	wrlong	local06, objptr
07b14     13 00 00 FF 
07b18     38 E4 85 F1 | 	sub	objptr, ##9784
07b1c     F2 28 02 FB | 	rdlong	local06, objptr
07b20     01 28 06 F1 | 	add	local06, #1
07b24     F2 28 62 FC | 	wrlong	local06, objptr
07b28     2E 00 00 FF 
07b2c     08 E4 85 F1 | 	sub	objptr, ##23560
07b30     34 04 90 FD | 	jmp	#LR__0666
07b34                 | LR__0655
07b34                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07b34     01 24 0E F2 | 	cmp	local04, #1 wz
07b38     48 00 90 5D |  if_ne	jmp	#LR__0656
07b3c     00 C0 1F FF 
07b40     00 28 06 F6 | 	mov	local06, ##1065353216
07b44     2E 00 00 FF 
07b48     08 E4 05 F1 | 	add	objptr, ##23560
07b4c     F2 2C 02 FB | 	rdlong	local08, objptr
07b50     03 2C 66 F0 | 	shl	local08, #3
07b54     02 00 00 FF 
07b58     38 E4 85 F1 | 	sub	objptr, ##1080
07b5c     F2 2C 02 F1 | 	add	local08, objptr
07b60     16 13 02 FB | 	rdlong	arg01, local08
07b64     2B 00 00 FF 
07b68     D0 E5 85 F1 | 	sub	objptr, ##22480
07b6c     A0 05 B1 FD | 	call	#__system____builtin_atof
07b70     FD 14 02 F6 | 	mov	arg02, result1
07b74     14 13 02 F6 | 	mov	arg01, local06
07b78     AC FD B0 FD | 	call	#__system___float_mul
07b7c     FD 1E 02 F6 | 	mov	local01, result1
07b80     1E 22 06 F6 | 	mov	local03, #30
07b84                 | LR__0656
07b84                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07b84     FF FF 7F FF 
07b88     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07b8c     48 00 90 5D |  if_ne	jmp	#LR__0657
07b90     00 C0 5F FF 
07b94     00 28 06 F6 | 	mov	local06, ##-1082130432
07b98     2E 00 00 FF 
07b9c     08 E4 05 F1 | 	add	objptr, ##23560
07ba0     F2 2C 02 FB | 	rdlong	local08, objptr
07ba4     03 2C 66 F0 | 	shl	local08, #3
07ba8     02 00 00 FF 
07bac     38 E4 85 F1 | 	sub	objptr, ##1080
07bb0     F2 2C 02 F1 | 	add	local08, objptr
07bb4     16 13 02 FB | 	rdlong	arg01, local08
07bb8     2B 00 00 FF 
07bbc     D0 E5 85 F1 | 	sub	objptr, ##22480
07bc0     4C 05 B1 FD | 	call	#__system____builtin_atof
07bc4     FD 14 02 F6 | 	mov	arg02, result1
07bc8     14 13 02 F6 | 	mov	arg01, local06
07bcc     58 FD B0 FD | 	call	#__system___float_mul
07bd0     FD 1E 02 F6 | 	mov	local01, result1
07bd4     1E 22 06 F6 | 	mov	local03, #30
07bd8                 | LR__0657
07bd8     0F 29 02 F6 | 	mov	local06, local01
07bdc     10 2B 02 F6 | 	mov	local07, local02
07be0     11 27 02 F6 | 	mov	local05, local03
07be4     41 00 00 FF 
07be8     40 E4 05 F1 | 	add	objptr, ##33344
07bec     F2 1E 02 FB | 	rdlong	local01, objptr
07bf0     0F 2D 02 F6 | 	mov	local08, local01
07bf4     01 2C 66 F0 | 	shl	local08, #1
07bf8     0F 2D 02 F1 | 	add	local08, local01
07bfc     02 2C 66 F0 | 	shl	local08, #2
07c00     03 00 00 FF 
07c04     00 E4 85 F1 | 	sub	objptr, ##1536
07c08     F2 2C 02 F1 | 	add	local08, objptr
07c0c     16 29 62 FC | 	wrlong	local06, local08
07c10     03 00 00 FF 
07c14     00 E4 05 F1 | 	add	objptr, ##1536
07c18     F2 2C 02 FB | 	rdlong	local08, objptr
07c1c     16 29 02 F6 | 	mov	local06, local08
07c20     01 28 66 F0 | 	shl	local06, #1
07c24     16 29 02 F1 | 	add	local06, local08
07c28     02 28 66 F0 | 	shl	local06, #2
07c2c     03 00 00 FF 
07c30     00 E4 85 F1 | 	sub	objptr, ##1536
07c34     F2 28 02 F1 | 	add	local06, objptr
07c38     04 28 06 F1 | 	add	local06, #4
07c3c     14 2B 62 FC | 	wrlong	local07, local06
07c40     03 00 00 FF 
07c44     00 E4 05 F1 | 	add	objptr, ##1536
07c48     F2 2C 02 FB | 	rdlong	local08, objptr
07c4c     16 2B 02 F6 | 	mov	local07, local08
07c50     01 2A 66 F0 | 	shl	local07, #1
07c54     16 2B 02 F1 | 	add	local07, local08
07c58     02 2A 66 F0 | 	shl	local07, #2
07c5c     03 00 00 FF 
07c60     00 E4 85 F1 | 	sub	objptr, ##1536
07c64     F2 2A 02 F1 | 	add	local07, objptr
07c68     08 2A 06 F1 | 	add	local07, #8
07c6c     15 27 62 FC | 	wrlong	local05, local07
07c70     03 00 00 FF 
07c74     00 E4 05 F1 | 	add	objptr, ##1536
07c78     F2 28 02 FB | 	rdlong	local06, objptr
07c7c     01 28 06 F1 | 	add	local06, #1
07c80     F2 28 62 FC | 	wrlong	local06, objptr
07c84     13 00 00 FF 
07c88     38 E4 85 F1 | 	sub	objptr, ##9784
07c8c     F2 28 02 FB | 	rdlong	local06, objptr
07c90     01 28 06 F1 | 	add	local06, #1
07c94     F2 28 62 FC | 	wrlong	local06, objptr
07c98     2E 00 00 FF 
07c9c     08 E4 85 F1 | 	sub	objptr, ##23560
07ca0     C4 02 90 FD | 	jmp	#LR__0666
07ca4                 | LR__0658
07ca4     1F 22 06 F6 | 	mov	local03, #31
07ca8     2E 00 00 FF 
07cac     08 E4 05 F1 | 	add	objptr, ##23560
07cb0     F2 16 02 FB | 	rdlong	arg03, objptr
07cb4     03 16 66 F0 | 	shl	arg03, #3
07cb8     02 00 00 FF 
07cbc     38 E4 85 F1 | 	sub	objptr, ##1080
07cc0     F2 16 02 F1 | 	add	arg03, objptr
07cc4     0B 13 02 FB | 	rdlong	arg01, arg03
07cc8     2B 00 00 FF 
07ccc     D0 E5 85 F1 | 	sub	objptr, ##22480
07cd0     09 2F 02 F6 | 	mov	local09, arg01
07cd4     97 06 48 FB | 	callpa	#(@LR__0660-@LR__0659)>>2,fcache_load_ptr_
07cd8                 | LR__0659
07cd8     17 FB C9 FA | 	rdbyte	result1, local09 wz
07cdc     01 2E 06 51 |  if_ne	add	local09, #1
07ce0     F4 FF 9F 5D |  if_ne	jmp	#LR__0659
07ce4                 | LR__0660
07ce4     09 2F 82 F1 | 	sub	local09, arg01
07ce8     17 FB 01 F6 | 	mov	result1, local09
07cec     52 00 00 FF 
07cf0     60 E4 05 F1 | 	add	objptr, ##42080
07cf4     F2 FA 61 FC | 	wrlong	result1, objptr
07cf8     24 E4 85 F1 | 	sub	objptr, #36
07cfc     F2 12 02 FB | 	rdlong	arg01, objptr
07d00     FD 12 82 F1 | 	sub	arg01, result1
07d04     04 12 86 F1 | 	sub	arg01, #4
07d08     03 12 26 F5 | 	andn	arg01, #3
07d0c     F2 12 62 FC | 	wrlong	arg01, objptr
07d10     24 E4 05 F1 | 	add	objptr, #36
07d14     F2 14 02 FB | 	rdlong	arg02, objptr
07d18     01 16 06 F6 | 	mov	arg03, #1
07d1c     00 18 06 F6 | 	mov	arg04, #0
07d20     46 00 00 FF 
07d24     A0 E5 85 F1 | 	sub	objptr, ##36256
07d28                 | '     return fill(addr, pattern, count, listPtr, 4)
07d28     04 1A 06 F6 | 	mov	arg05, #4
07d2c     30 C8 B0 FD | 	call	#_psram_spin2_fill
07d30                 | '     pslpoke memtop,l
07d30                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
07d30     01 30 06 F6 | 	mov	local10, #1
07d34     46 00 00 FF 
07d38     A0 E5 05 F1 | 	add	objptr, ##36256
07d3c     F2 32 02 FB | 	rdlong	local11, objptr
07d40     52 00 00 FF 
07d44     60 E4 85 F1 | 	sub	objptr, ##42080
07d48     01 32 06 F1 | 	add	local11, #1
07d4c                 | LR__0661
07d4c     19 31 52 F2 | 	cmps	local10, local11 wc
07d50     78 00 90 3D |  if_ae	jmp	#LR__0662
07d54     52 00 00 FF 
07d58     3C E4 05 F1 | 	add	objptr, ##42044
07d5c     F2 2A 02 FB | 	rdlong	local07, objptr
07d60     03 2A 06 F1 | 	add	local07, #3
07d64     18 2B 02 F1 | 	add	local07, local10
07d68     24 00 00 FF 
07d6c     34 E4 85 F1 | 	sub	objptr, ##18484
07d70     F2 2C 02 FB | 	rdlong	local08, objptr
07d74     03 2C 66 F0 | 	shl	local08, #3
07d78     02 00 00 FF 
07d7c     38 E4 85 F1 | 	sub	objptr, ##1080
07d80     F2 2C 02 F1 | 	add	local08, objptr
07d84     16 13 02 FB | 	rdlong	arg01, local08
07d88     18 15 02 F6 | 	mov	arg02, local10
07d8c     01 16 06 F6 | 	mov	arg03, #1
07d90     2B 00 00 FF 
07d94     D0 E5 85 F1 | 	sub	objptr, ##22480
07d98     A0 F2 B0 FD | 	call	#__system__Mid_S
07d9c     FD 14 C2 FA | 	rdbyte	arg02, result1
07da0     15 13 02 F6 | 	mov	arg01, local07
07da4     01 16 06 F6 | 	mov	arg03, #1
07da8     00 18 06 F6 | 	mov	arg04, #0
07dac     0B 00 00 FF 
07db0     C0 E4 05 F1 | 	add	objptr, ##5824
07db4                 | '     return fill(addr, pattern, count, listPtr, 1)
07db4     01 1A 06 F6 | 	mov	arg05, #1
07db8     A4 C7 B0 FD | 	call	#_psram_spin2_fill
07dbc     0B 00 00 FF 
07dc0     C0 E4 85 F1 | 	sub	objptr, ##5824
07dc4     01 30 06 F1 | 	add	local10, #1
07dc8     80 FF 9F FD | 	jmp	#LR__0661
07dcc                 | LR__0662
07dcc     52 00 00 FF 
07dd0     3C E4 05 F1 | 	add	objptr, ##42044
07dd4     F2 1E 02 FB | 	rdlong	local01, objptr
07dd8     2B 22 06 F6 | 	mov	local03, #43
07ddc     0F 29 02 F6 | 	mov	local06, local01
07de0     10 2B 02 F6 | 	mov	local07, local02
07de4     11 33 02 F6 | 	mov	local11, local03
07de8     10 00 00 FF 
07dec     FC E5 85 F1 | 	sub	objptr, ##8700
07df0     F2 30 02 FB | 	rdlong	local10, objptr
07df4     18 2D 02 F6 | 	mov	local08, local10
07df8     01 2C 66 F0 | 	shl	local08, #1
07dfc     18 2D 02 F1 | 	add	local08, local10
07e00     02 2C 66 F0 | 	shl	local08, #2
07e04     03 00 00 FF 
07e08     00 E4 85 F1 | 	sub	objptr, ##1536
07e0c     F2 2C 02 F1 | 	add	local08, objptr
07e10     16 29 62 FC | 	wrlong	local06, local08
07e14     03 00 00 FF 
07e18     00 E4 05 F1 | 	add	objptr, ##1536
07e1c     F2 30 02 FB | 	rdlong	local10, objptr
07e20     18 2D 02 F6 | 	mov	local08, local10
07e24     01 2C 66 F0 | 	shl	local08, #1
07e28     18 2D 02 F1 | 	add	local08, local10
07e2c     02 2C 66 F0 | 	shl	local08, #2
07e30     03 00 00 FF 
07e34     00 E4 85 F1 | 	sub	objptr, ##1536
07e38     F2 2C 02 F1 | 	add	local08, objptr
07e3c     04 2C 06 F1 | 	add	local08, #4
07e40     16 2B 62 FC | 	wrlong	local07, local08
07e44     03 00 00 FF 
07e48     00 E4 05 F1 | 	add	objptr, ##1536
07e4c     F2 30 02 FB | 	rdlong	local10, objptr
07e50     18 2D 02 F6 | 	mov	local08, local10
07e54     01 2C 66 F0 | 	shl	local08, #1
07e58     18 2D 02 F1 | 	add	local08, local10
07e5c     02 2C 66 F0 | 	shl	local08, #2
07e60     03 00 00 FF 
07e64     00 E4 85 F1 | 	sub	objptr, ##1536
07e68     F2 2C 02 F1 | 	add	local08, objptr
07e6c     08 2C 06 F1 | 	add	local08, #8
07e70     16 33 62 FC | 	wrlong	local11, local08
07e74     03 00 00 FF 
07e78     00 E4 05 F1 | 	add	objptr, ##1536
07e7c     F2 28 02 FB | 	rdlong	local06, objptr
07e80     01 28 06 F1 | 	add	local06, #1
07e84     F2 28 62 FC | 	wrlong	local06, objptr
07e88     13 00 00 FF 
07e8c     38 E4 85 F1 | 	sub	objptr, ##9784
07e90     F2 28 02 FB | 	rdlong	local06, objptr
07e94     01 28 06 F1 | 	add	local06, #1
07e98     F2 28 62 FC | 	wrlong	local06, objptr
07e9c     2E 00 00 FF 
07ea0     08 E4 85 F1 | 	sub	objptr, ##23560
07ea4     C0 00 90 FD | 	jmp	#LR__0666
07ea8                 | LR__0663
07ea8     12 13 02 F6 | 	mov	arg01, local04
07eac     B8 03 B0 FD | 	call	#_getvar
07eb0     2E 00 00 FF 
07eb4     08 E4 05 F1 | 	add	objptr, ##23560
07eb8     F2 28 02 FB | 	rdlong	local06, objptr
07ebc     01 28 06 F1 | 	add	local06, #1
07ec0     F2 28 62 FC | 	wrlong	local06, objptr
07ec4     2E 00 00 FF 
07ec8     08 E4 85 F1 | 	sub	objptr, ##23560
07ecc     98 00 90 FD | 	jmp	#LR__0666
07ed0                 | LR__0664
07ed0     2E 00 00 FF 
07ed4     08 E4 05 F1 | 	add	objptr, ##23560
07ed8     F2 28 02 FB | 	rdlong	local06, objptr
07edc     01 28 06 F1 | 	add	local06, #1
07ee0     F2 28 62 FC | 	wrlong	local06, objptr
07ee4     2E 00 00 FF 
07ee8     08 E4 85 F1 | 	sub	objptr, ##23560
07eec     F4 F3 BF FD | 	call	#_expr
07ef0                 | '     ct+=1
07ef0                 | '     expr() 
07ef0                 | '     if lparts(ct).token=token_rpar then ct+=1
07ef0     2E 00 00 FF 
07ef4     08 E4 05 F1 | 	add	objptr, ##23560
07ef8     F2 32 02 FB | 	rdlong	local11, objptr
07efc     03 32 66 F0 | 	shl	local11, #3
07f00     02 00 00 FF 
07f04     38 E4 85 F1 | 	sub	objptr, ##1080
07f08     F2 32 02 F1 | 	add	local11, objptr
07f0c     04 32 06 F1 | 	add	local11, #4
07f10     19 33 02 FB | 	rdlong	local11, local11
07f14     14 32 0E F2 | 	cmp	local11, #20 wz
07f18     2B 00 00 FF 
07f1c     D0 E5 85 F1 | 	sub	objptr, ##22480
07f20     44 00 90 5D |  if_ne	jmp	#LR__0666
07f24     2E 00 00 FF 
07f28     08 E4 05 F1 | 	add	objptr, ##23560
07f2c     F2 28 02 FB | 	rdlong	local06, objptr
07f30     01 28 06 F1 | 	add	local06, #1
07f34     F2 28 62 FC | 	wrlong	local06, objptr
07f38     2E 00 00 FF 
07f3c     08 E4 85 F1 | 	sub	objptr, ##23560
07f40     24 00 90 FD | 	jmp	#LR__0666
07f44                 | LR__0665
07f44     12 13 02 F6 | 	mov	arg01, local04
07f48     28 00 B0 FD | 	call	#_getfun
07f4c     2E 00 00 FF 
07f50     08 E4 05 F1 | 	add	objptr, ##23560
07f54     F2 28 02 FB | 	rdlong	local06, objptr
07f58     01 28 06 F1 | 	add	local06, #1
07f5c     F2 28 62 FC | 	wrlong	local06, objptr
07f60     2E 00 00 FF 
07f64     08 E4 85 F1 | 	sub	objptr, ##23560
07f68                 | LR__0666
07f68     A7 F0 03 F6 | 	mov	ptra, fp
07f6c     B2 00 A0 FD | 	call	#popregs_
07f70                 | _getvalue_ret
07f70     2D 00 64 FD | 	ret
07f74                 | 
07f74                 | ' 
07f74                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
07f74                 | _getfun
07f74     0A 4A 05 F6 | 	mov	COUNT_, #10
07f78     A8 00 A0 FD | 	call	#pushregs_
07f7c                 | _getfun_enter
07f7c     09 25 02 F6 | 	mov	local04, arg01
07f80     2E 00 00 FF 
07f84     08 E4 05 F1 | 	add	objptr, ##23560
07f88     F2 26 02 FB | 	rdlong	local05, objptr
07f8c     13 29 02 F6 | 	mov	local06, local05
07f90     00 2A 06 F6 | 	mov	local07, #0
07f94                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
07f94                 | ' oldct=ct
07f94                 | ' numpar=0
07f94                 | '   
07f94                 | ' if lparts(ct+1).token=token_lpar then
07f94     01 26 06 F1 | 	add	local05, #1
07f98     03 26 66 F0 | 	shl	local05, #3
07f9c     02 00 00 FF 
07fa0     38 E4 85 F1 | 	sub	objptr, ##1080
07fa4     F2 26 02 F1 | 	add	local05, objptr
07fa8     04 26 06 F1 | 	add	local05, #4
07fac     13 27 02 FB | 	rdlong	local05, local05
07fb0     15 26 0E F2 | 	cmp	local05, #21 wz
07fb4     2B 00 00 FF 
07fb8     D0 E5 85 F1 | 	sub	objptr, ##22480
07fbc     08 01 90 5D |  if_ne	jmp	#LR__0674
07fc0     2E 00 00 FF 
07fc4     08 E4 05 F1 | 	add	objptr, ##23560
07fc8     F2 2C 02 FB | 	rdlong	local08, objptr
07fcc     01 2C 06 F1 | 	add	local08, #1
07fd0     F2 2C 62 FC | 	wrlong	local08, objptr
07fd4     2E 00 00 FF 
07fd8     08 E4 85 F1 | 	sub	objptr, ##23560
07fdc                 | '   ct+=1 											' omit this lpar, this is for expr list
07fdc                 | '   do
07fdc                 | LR__0670
07fdc     2E 00 00 FF 
07fe0     08 E4 05 F1 | 	add	objptr, ##23560
07fe4     F2 26 02 FB | 	rdlong	local05, objptr
07fe8     01 26 06 F1 | 	add	local05, #1
07fec     F2 26 62 FC | 	wrlong	local05, objptr
07ff0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
07ff0                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
07ff0     03 26 66 F0 | 	shl	local05, #3
07ff4     02 00 00 FF 
07ff8     38 E4 85 F1 | 	sub	objptr, ##1080
07ffc     F2 26 02 F1 | 	add	local05, objptr
08000     04 26 06 F1 | 	add	local05, #4
08004     13 2D 02 FB | 	rdlong	local08, local05
08008     15 2C 0E F2 | 	cmp	local08, #21 wz
0800c     2B 00 00 FF 
08010     D0 E5 85 F1 | 	sub	objptr, ##22480
08014     40 00 90 5D |  if_ne	jmp	#LR__0671
08018     2E 00 00 FF 
0801c     08 E4 05 F1 | 	add	objptr, ##23560
08020     F2 2C 02 FB | 	rdlong	local08, objptr
08024     01 2C 06 F1 | 	add	local08, #1
08028     F2 2C 62 FC | 	wrlong	local08, objptr
0802c     2E 00 00 FF 
08030     08 E4 85 F1 | 	sub	objptr, ##23560
08034     AC F2 BF FD | 	call	#_expr
08038     2E 00 00 FF 
0803c     08 E4 05 F1 | 	add	objptr, ##23560
08040     F2 2C 02 FB | 	rdlong	local08, objptr
08044     01 2C 06 F1 | 	add	local08, #1
08048     F2 2C 62 FC | 	wrlong	local08, objptr
0804c     2E 00 00 FF 
08050     08 E4 85 F1 | 	sub	objptr, ##23560
08054     04 00 90 FD | 	jmp	#LR__0672
08058                 | LR__0671
08058     88 F2 BF FD | 	call	#_expr
0805c                 | LR__0672
0805c     01 2A 06 F1 | 	add	local07, #1
08060     2E 00 00 FF 
08064     08 E4 05 F1 | 	add	objptr, ##23560
08068     F2 26 02 FB | 	rdlong	local05, objptr
0806c     03 26 66 F0 | 	shl	local05, #3
08070     02 00 00 FF 
08074     38 E4 85 F1 | 	sub	objptr, ##1080
08078     F2 26 02 F1 | 	add	local05, objptr
0807c     04 26 06 F1 | 	add	local05, #4
08080     13 2D 02 FB | 	rdlong	local08, local05
08084     14 2C 0E F2 | 	cmp	local08, #20 wz
08088     2B 00 00 FF 
0808c     D0 E5 85 F1 | 	sub	objptr, ##22480
08090     34 00 90 AD |  if_e	jmp	#LR__0673
08094     2E 00 00 FF 
08098     08 E4 05 F1 | 	add	objptr, ##23560
0809c     F2 2C 02 FB | 	rdlong	local08, objptr
080a0     03 2C 66 F0 | 	shl	local08, #3
080a4     02 00 00 FF 
080a8     38 E4 85 F1 | 	sub	objptr, ##1080
080ac     F2 2C 02 F1 | 	add	local08, objptr
080b0     04 2C 06 F1 | 	add	local08, #4
080b4     16 2D 02 FB | 	rdlong	local08, local08
080b8     FE 2D 0E F2 | 	cmp	local08, #510 wz
080bc     2B 00 00 FF 
080c0     D0 E5 85 F1 | 	sub	objptr, ##22480
080c4     14 FF 9F 5D |  if_ne	jmp	#LR__0670
080c8                 | LR__0673
080c8                 | LR__0674
080c8     15 1F 02 F6 | 	mov	local01, local07
080cc     03 28 66 F0 | 	shl	local06, #3
080d0     2B 00 00 FF 
080d4     D0 E5 05 F1 | 	add	objptr, ##22480
080d8     F2 28 02 F1 | 	add	local06, objptr
080dc     04 28 06 F1 | 	add	local06, #4
080e0     14 23 02 FB | 	rdlong	local03, local06
080e4     0F 2D 02 F6 | 	mov	local08, local01
080e8     10 2B 02 F6 | 	mov	local07, local02
080ec     11 29 02 F6 | 	mov	local06, local03
080f0     15 00 00 FF 
080f4     70 E4 05 F1 | 	add	objptr, ##10864
080f8     F2 26 02 FB | 	rdlong	local05, objptr
080fc     13 13 02 F6 | 	mov	arg01, local05
08100     01 12 66 F0 | 	shl	arg01, #1
08104     13 13 02 F1 | 	add	arg01, local05
08108     02 12 66 F0 | 	shl	arg01, #2
0810c     03 00 00 FF 
08110     00 E4 85 F1 | 	sub	objptr, ##1536
08114     F2 12 02 F1 | 	add	arg01, objptr
08118     09 2D 62 FC | 	wrlong	local08, arg01
0811c     03 00 00 FF 
08120     00 E4 05 F1 | 	add	objptr, ##1536
08124     F2 2C 02 FB | 	rdlong	local08, objptr
08128     16 2F 02 F6 | 	mov	local09, local08
0812c     01 2E 66 F0 | 	shl	local09, #1
08130     16 2F 02 F1 | 	add	local09, local08
08134     02 2E 66 F0 | 	shl	local09, #2
08138     03 00 00 FF 
0813c     00 E4 85 F1 | 	sub	objptr, ##1536
08140     F2 2E 02 F1 | 	add	local09, objptr
08144     04 2E 06 F1 | 	add	local09, #4
08148     17 2B 62 FC | 	wrlong	local07, local09
0814c     03 00 00 FF 
08150     00 E4 05 F1 | 	add	objptr, ##1536
08154     F2 2C 02 FB | 	rdlong	local08, objptr
08158     16 31 02 F6 | 	mov	local10, local08
0815c     01 30 66 F0 | 	shl	local10, #1
08160     16 31 02 F1 | 	add	local10, local08
08164     02 30 66 F0 | 	shl	local10, #2
08168     03 00 00 FF 
0816c     00 E4 85 F1 | 	sub	objptr, ##1536
08170     F2 30 02 F1 | 	add	local10, objptr
08174     08 30 06 F1 | 	add	local10, #8
08178     18 29 62 FC | 	wrlong	local06, local10
0817c     03 00 00 FF 
08180     00 E4 05 F1 | 	add	objptr, ##1536
08184     F2 2C 02 FB | 	rdlong	local08, objptr
08188     01 2C 06 F1 | 	add	local08, #1
0818c     F2 2C 62 FC | 	wrlong	local08, objptr
08190     41 00 00 FF 
08194     40 E4 85 F1 | 	sub	objptr, ##33344
08198                 | ' 
08198                 | ' t2.result.uresult=numpar
08198                 | ' 
08198                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08198                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08198                 | ' 
08198                 | '   
08198                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08198     FF FF 7F FF 
0819c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
081a0     B8 00 90 5D |  if_ne	jmp	#LR__0675
081a4     15 22 06 F6 | 	mov	local03, #21
081a8     0F 2D 02 F6 | 	mov	local08, local01
081ac     10 2B 02 F6 | 	mov	local07, local02
081b0     11 29 02 F6 | 	mov	local06, local03
081b4     41 00 00 FF 
081b8     40 E4 05 F1 | 	add	objptr, ##33344
081bc     F2 26 02 FB | 	rdlong	local05, objptr
081c0     13 13 02 F6 | 	mov	arg01, local05
081c4     01 12 66 F0 | 	shl	arg01, #1
081c8     13 13 02 F1 | 	add	arg01, local05
081cc     02 12 66 F0 | 	shl	arg01, #2
081d0     03 00 00 FF 
081d4     00 E4 85 F1 | 	sub	objptr, ##1536
081d8     F2 12 02 F1 | 	add	arg01, objptr
081dc     09 2D 62 FC | 	wrlong	local08, arg01
081e0     03 00 00 FF 
081e4     00 E4 05 F1 | 	add	objptr, ##1536
081e8     F2 30 02 FB | 	rdlong	local10, objptr
081ec     18 2F 02 F6 | 	mov	local09, local10
081f0     01 2E 66 F0 | 	shl	local09, #1
081f4     18 2F 02 F1 | 	add	local09, local10
081f8     02 2E 66 F0 | 	shl	local09, #2
081fc     03 00 00 FF 
08200     00 E4 85 F1 | 	sub	objptr, ##1536
08204     F2 2E 02 F1 | 	add	local09, objptr
08208     04 2E 06 F1 | 	add	local09, #4
0820c     17 2B 62 FC | 	wrlong	local07, local09
08210     03 00 00 FF 
08214     00 E4 05 F1 | 	add	objptr, ##1536
08218     F2 2E 02 FB | 	rdlong	local09, objptr
0821c     17 31 02 F6 | 	mov	local10, local09
08220     01 30 66 F0 | 	shl	local10, #1
08224     17 31 02 F1 | 	add	local10, local09
08228     02 30 66 F0 | 	shl	local10, #2
0822c     03 00 00 FF 
08230     00 E4 85 F1 | 	sub	objptr, ##1536
08234     F2 30 02 F1 | 	add	local10, objptr
08238     08 30 06 F1 | 	add	local10, #8
0823c     18 29 62 FC | 	wrlong	local06, local10
08240     03 00 00 FF 
08244     00 E4 05 F1 | 	add	objptr, ##1536
08248     F2 2C 02 FB | 	rdlong	local08, objptr
0824c     01 2C 06 F1 | 	add	local08, #1
08250     F2 2C 62 FC | 	wrlong	local08, objptr
08254     41 00 00 FF 
08258     40 E4 85 F1 | 	sub	objptr, ##33344
0825c                 | LR__0675
0825c     A7 F0 03 F6 | 	mov	ptra, fp
08260     B2 00 A0 FD | 	call	#popregs_
08264                 | _getfun_ret
08264     2D 00 64 FD | 	ret
08268                 | 
08268                 | '   
08268                 | '   
08268                 | ' sub getvar(m as integer) 
08268                 | _getvar
08268     0A 4A 05 F6 | 	mov	COUNT_, #10
0826c     A8 00 A0 FD | 	call	#pushregs_
08270                 | _getvar_enter
08270     09 25 02 F6 | 	mov	local04, arg01
08274     2E 00 00 FF 
08278     08 E4 05 F1 | 	add	objptr, ##23560
0827c     F2 14 02 FB | 	rdlong	arg02, objptr
08280     03 14 66 F0 | 	shl	arg02, #3
08284     02 00 00 FF 
08288     38 E4 85 F1 | 	sub	objptr, ##1080
0828c     F2 14 02 F1 | 	add	arg02, objptr
08290     0A 27 02 FB | 	rdlong	local05, arg02
08294     13 13 02 F6 | 	mov	arg01, local05
08298     01 14 06 F6 | 	mov	arg02, #1
0829c     2B 00 00 FF 
082a0     D0 E5 85 F1 | 	sub	objptr, ##22480
082a4     04 ED B0 FD | 	call	#__system__Right_S
082a8     FD 28 02 F6 | 	mov	local06, result1
082ac     01 2A 66 F6 | 	neg	local07, #1
082b0                 | ' 
082b0                 | ' varname$=lparts(ct).part$
082b0                 | ' suffix$=right$(varname$,1)
082b0                 | ' j=-1
082b0                 | ' 
082b0                 | ' for i=0 to varnum-1
082b0     00 2C 06 F6 | 	mov	local08, #0
082b4     2B 00 00 FF 
082b8     CC E5 05 F1 | 	add	objptr, ##22476
082bc     F2 2E 02 FB | 	rdlong	local09, objptr
082c0     2B 00 00 FF 
082c4     CC E5 85 F1 | 	sub	objptr, ##22476
082c8                 | LR__0680
082c8     17 2D 52 F2 | 	cmps	local08, local09 wc
082cc     38 00 90 3D |  if_ae	jmp	#LR__0681
082d0                 | '   if variables(i).name=varname$ then j=i : exit
082d0     16 15 02 F6 | 	mov	arg02, local08
082d4     04 14 66 F0 | 	shl	arg02, #4
082d8     0B 00 00 FF 
082dc     CC E5 05 F1 | 	add	objptr, ##6092
082e0     F2 14 02 F1 | 	add	arg02, objptr
082e4     0A 13 02 FB | 	rdlong	arg01, arg02
082e8     13 15 02 F6 | 	mov	arg02, local05
082ec     0B 00 00 FF 
082f0     CC E5 85 F1 | 	sub	objptr, ##6092
082f4     44 CC B0 FD | 	call	#__system___string_cmp
082f8     00 FA 0D F2 | 	cmp	result1, #0 wz
082fc     16 2B 02 A6 |  if_e	mov	local07, local08
08300     01 2C 06 51 |  if_ne	add	local08, #1
08304     C0 FF 9F 5D |  if_ne	jmp	#LR__0680
08308                 | LR__0681
08308                 | ' if  j=-1 andalso varnum<maxvars then   
08308     FF FF 7F FF 
0830c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
08310     A8 00 90 5D |  if_ne	jmp	#LR__0682
08314     2B 00 00 FF 
08318     CC E5 05 F1 | 	add	objptr, ##22476
0831c     F2 2E 02 FB | 	rdlong	local09, objptr
08320     2B 00 00 FF 
08324     CC E5 85 F1 | 	sub	objptr, ##22476
08328     01 00 00 FF 
0832c     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
08330     88 00 90 3D |  if_ae	jmp	#LR__0682
08334     2B 00 00 FF 
08338     CC E5 05 F1 | 	add	objptr, ##22476
0833c     F2 2E 02 FB | 	rdlong	local09, objptr
08340     04 2E 66 F0 | 	shl	local09, #4
08344     20 00 00 FF 
08348     00 E4 85 F1 | 	sub	objptr, ##16384
0834c     F2 2E 02 F1 | 	add	local09, objptr
08350     17 27 62 FC | 	wrlong	local05, local09
08354     20 00 00 FF 
08358     00 E4 05 F1 | 	add	objptr, ##16384
0835c     F2 2E 02 FB | 	rdlong	local09, objptr
08360     04 2E 66 F0 | 	shl	local09, #4
08364     20 00 00 FF 
08368     00 E4 85 F1 | 	sub	objptr, ##16384
0836c     F2 2E 02 F1 | 	add	local09, objptr
08370     04 2E 06 F1 | 	add	local09, #4
08374     17 01 68 FC | 	wrlong	#0, local09
08378     20 00 00 FF 
0837c     00 E4 05 F1 | 	add	objptr, ##16384
08380     F2 2E 02 FB | 	rdlong	local09, objptr
08384     04 2E 66 F0 | 	shl	local09, #4
08388     20 00 00 FF 
0838c     00 E4 85 F1 | 	sub	objptr, ##16384
08390     F2 2E 02 F1 | 	add	local09, objptr
08394     0C 2E 06 F1 | 	add	local09, #12
08398     17 39 68 FC | 	wrlong	#28, local09
0839c     20 00 00 FF 
083a0     00 E4 05 F1 | 	add	objptr, ##16384
083a4     F2 2E 02 FB | 	rdlong	local09, objptr
083a8     17 2B 02 F6 | 	mov	local07, local09
083ac     01 2E 06 F1 | 	add	local09, #1
083b0     F2 2E 62 FC | 	wrlong	local09, objptr
083b4     2B 00 00 FF 
083b8     CC E5 85 F1 | 	sub	objptr, ##22476
083bc                 | LR__0682
083bc     00 2E 06 F6 | 	mov	local09, #0
083c0                 | ' numpar=0
083c0                 | ' ' check if it is an array
083c0                 | ' 
083c0                 | ' if lparts(ct+1).token=token_lpar then
083c0     2E 00 00 FF 
083c4     08 E4 05 F1 | 	add	objptr, ##23560
083c8     F2 2C 02 FB | 	rdlong	local08, objptr
083cc     01 2C 06 F1 | 	add	local08, #1
083d0     03 2C 66 F0 | 	shl	local08, #3
083d4     02 00 00 FF 
083d8     38 E4 85 F1 | 	sub	objptr, ##1080
083dc     F2 2C 02 F1 | 	add	local08, objptr
083e0     04 2C 06 F1 | 	add	local08, #4
083e4     16 2D 02 FB | 	rdlong	local08, local08
083e8     15 2C 0E F2 | 	cmp	local08, #21 wz
083ec     2B 00 00 FF 
083f0     D0 E5 85 F1 | 	sub	objptr, ##22480
083f4     08 01 90 5D |  if_ne	jmp	#LR__0687
083f8     2E 00 00 FF 
083fc     08 E4 05 F1 | 	add	objptr, ##23560
08400     F2 30 02 FB | 	rdlong	local10, objptr
08404     01 30 06 F1 | 	add	local10, #1
08408     F2 30 62 FC | 	wrlong	local10, objptr
0840c     2E 00 00 FF 
08410     08 E4 85 F1 | 	sub	objptr, ##23560
08414                 | '   ct+=1 											' omit this lpar, this is for expr list
08414                 | '   do
08414                 | LR__0683
08414     2E 00 00 FF 
08418     08 E4 05 F1 | 	add	objptr, ##23560
0841c     F2 2C 02 FB | 	rdlong	local08, objptr
08420     01 2C 06 F1 | 	add	local08, #1
08424     F2 2C 62 FC | 	wrlong	local08, objptr
08428                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
08428                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
08428     03 2C 66 F0 | 	shl	local08, #3
0842c     02 00 00 FF 
08430     38 E4 85 F1 | 	sub	objptr, ##1080
08434     F2 2C 02 F1 | 	add	local08, objptr
08438     04 2C 06 F1 | 	add	local08, #4
0843c     16 31 02 FB | 	rdlong	local10, local08
08440     15 30 0E F2 | 	cmp	local10, #21 wz
08444     2B 00 00 FF 
08448     D0 E5 85 F1 | 	sub	objptr, ##22480
0844c     40 00 90 5D |  if_ne	jmp	#LR__0684
08450     2E 00 00 FF 
08454     08 E4 05 F1 | 	add	objptr, ##23560
08458     F2 30 02 FB | 	rdlong	local10, objptr
0845c     01 30 06 F1 | 	add	local10, #1
08460     F2 30 62 FC | 	wrlong	local10, objptr
08464     2E 00 00 FF 
08468     08 E4 85 F1 | 	sub	objptr, ##23560
0846c     74 EE BF FD | 	call	#_expr
08470     2E 00 00 FF 
08474     08 E4 05 F1 | 	add	objptr, ##23560
08478     F2 30 02 FB | 	rdlong	local10, objptr
0847c     01 30 06 F1 | 	add	local10, #1
08480     F2 30 62 FC | 	wrlong	local10, objptr
08484     2E 00 00 FF 
08488     08 E4 85 F1 | 	sub	objptr, ##23560
0848c     04 00 90 FD | 	jmp	#LR__0685
08490                 | LR__0684
08490     50 EE BF FD | 	call	#_expr
08494                 | LR__0685
08494     01 2E 06 F1 | 	add	local09, #1
08498     2E 00 00 FF 
0849c     08 E4 05 F1 | 	add	objptr, ##23560
084a0     F2 2C 02 FB | 	rdlong	local08, objptr
084a4     03 2C 66 F0 | 	shl	local08, #3
084a8     02 00 00 FF 
084ac     38 E4 85 F1 | 	sub	objptr, ##1080
084b0     F2 2C 02 F1 | 	add	local08, objptr
084b4     04 2C 06 F1 | 	add	local08, #4
084b8     16 31 02 FB | 	rdlong	local10, local08
084bc     14 30 0E F2 | 	cmp	local10, #20 wz
084c0     2B 00 00 FF 
084c4     D0 E5 85 F1 | 	sub	objptr, ##22480
084c8     34 00 90 AD |  if_e	jmp	#LR__0686
084cc     2E 00 00 FF 
084d0     08 E4 05 F1 | 	add	objptr, ##23560
084d4     F2 30 02 FB | 	rdlong	local10, objptr
084d8     03 30 66 F0 | 	shl	local10, #3
084dc     02 00 00 FF 
084e0     38 E4 85 F1 | 	sub	objptr, ##1080
084e4     F2 30 02 F1 | 	add	local10, objptr
084e8     04 30 06 F1 | 	add	local10, #4
084ec     18 31 02 FB | 	rdlong	local10, local10
084f0     FE 31 0E F2 | 	cmp	local10, #510 wz
084f4     2B 00 00 FF 
084f8     D0 E5 85 F1 | 	sub	objptr, ##22480
084fc     14 FF 9F 5D |  if_ne	jmp	#LR__0683
08500                 | LR__0686
08500                 | LR__0687
08500     17 21 02 F6 | 	mov	local02, local09
08504     11 22 06 F6 | 	mov	local03, #17
08508     15 1F 02 F6 | 	mov	local01, local07
0850c     0F 31 02 F6 | 	mov	local10, local01
08510     10 2F 02 F6 | 	mov	local09, local02
08514     11 2D 02 F6 | 	mov	local08, local03
08518     41 00 00 FF 
0851c     40 E4 05 F1 | 	add	objptr, ##33344
08520     F2 2A 02 FB | 	rdlong	local07, objptr
08524     15 29 02 F6 | 	mov	local06, local07
08528     01 28 66 F0 | 	shl	local06, #1
0852c     15 29 02 F1 | 	add	local06, local07
08530     02 28 66 F0 | 	shl	local06, #2
08534     03 00 00 FF 
08538     00 E4 85 F1 | 	sub	objptr, ##1536
0853c     F2 28 02 F1 | 	add	local06, objptr
08540     14 31 62 FC | 	wrlong	local10, local06
08544     03 00 00 FF 
08548     00 E4 05 F1 | 	add	objptr, ##1536
0854c     F2 30 02 FB | 	rdlong	local10, objptr
08550     18 27 02 F6 | 	mov	local05, local10
08554     01 26 66 F0 | 	shl	local05, #1
08558     18 27 02 F1 | 	add	local05, local10
0855c     02 26 66 F0 | 	shl	local05, #2
08560     03 00 00 FF 
08564     00 E4 85 F1 | 	sub	objptr, ##1536
08568     F2 26 02 F1 | 	add	local05, objptr
0856c     04 26 06 F1 | 	add	local05, #4
08570     13 2F 62 FC | 	wrlong	local09, local05
08574     03 00 00 FF 
08578     00 E4 05 F1 | 	add	objptr, ##1536
0857c     F2 30 02 FB | 	rdlong	local10, objptr
08580     18 FB 01 F6 | 	mov	result1, local10
08584     01 FA 65 F0 | 	shl	result1, #1
08588     18 FB 01 F1 | 	add	result1, local10
0858c     02 FA 65 F0 | 	shl	result1, #2
08590     03 00 00 FF 
08594     00 E4 85 F1 | 	sub	objptr, ##1536
08598     F2 FA 01 F1 | 	add	result1, objptr
0859c     08 FA 05 F1 | 	add	result1, #8
085a0     FD 2C 62 FC | 	wrlong	local08, result1
085a4     03 00 00 FF 
085a8     00 E4 05 F1 | 	add	objptr, ##1536
085ac     F2 30 02 FB | 	rdlong	local10, objptr
085b0     01 30 06 F1 | 	add	local10, #1
085b4     F2 30 62 FC | 	wrlong	local10, objptr
085b8     41 00 00 FF 
085bc     40 E4 85 F1 | 	sub	objptr, ##33344
085c0                 | ' 
085c0                 | ' t2.result.twowords(1)=numpar
085c0                 | ' 
085c0                 | ' 
085c0                 | ' 
085c0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
085c0                 | ' 
085c0                 | ' 
085c0                 | '  
085c0                 | ' 
085c0                 | ' 701 
085c0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
085c0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
085c0     FF FF 7F FF 
085c4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
085c8     B8 00 90 5D |  if_ne	jmp	#LR__0688
085cc     15 22 06 F6 | 	mov	local03, #21
085d0     0F 31 02 F6 | 	mov	local10, local01
085d4     10 2F 02 F6 | 	mov	local09, local02
085d8     11 2D 02 F6 | 	mov	local08, local03
085dc     41 00 00 FF 
085e0     40 E4 05 F1 | 	add	objptr, ##33344
085e4     F2 2A 02 FB | 	rdlong	local07, objptr
085e8     15 29 02 F6 | 	mov	local06, local07
085ec     01 28 66 F0 | 	shl	local06, #1
085f0     15 29 02 F1 | 	add	local06, local07
085f4     02 28 66 F0 | 	shl	local06, #2
085f8     03 00 00 FF 
085fc     00 E4 85 F1 | 	sub	objptr, ##1536
08600     F2 28 02 F1 | 	add	local06, objptr
08604     14 31 62 FC | 	wrlong	local10, local06
08608     03 00 00 FF 
0860c     00 E4 05 F1 | 	add	objptr, ##1536
08610     F2 1E 02 FB | 	rdlong	local01, objptr
08614     0F 27 02 F6 | 	mov	local05, local01
08618     01 26 66 F0 | 	shl	local05, #1
0861c     0F 27 02 F1 | 	add	local05, local01
08620     02 26 66 F0 | 	shl	local05, #2
08624     03 00 00 FF 
08628     00 E4 85 F1 | 	sub	objptr, ##1536
0862c     F2 26 02 F1 | 	add	local05, objptr
08630     04 26 06 F1 | 	add	local05, #4
08634     13 2F 62 FC | 	wrlong	local09, local05
08638     03 00 00 FF 
0863c     00 E4 05 F1 | 	add	objptr, ##1536
08640     F2 1E 02 FB | 	rdlong	local01, objptr
08644     0F FB 01 F6 | 	mov	result1, local01
08648     01 FA 65 F0 | 	shl	result1, #1
0864c     0F FB 01 F1 | 	add	result1, local01
08650     02 FA 65 F0 | 	shl	result1, #2
08654     03 00 00 FF 
08658     00 E4 85 F1 | 	sub	objptr, ##1536
0865c     F2 FA 01 F1 | 	add	result1, objptr
08660     08 FA 05 F1 | 	add	result1, #8
08664     FD 2C 62 FC | 	wrlong	local08, result1
08668     03 00 00 FF 
0866c     00 E4 05 F1 | 	add	objptr, ##1536
08670     F2 30 02 FB | 	rdlong	local10, objptr
08674     01 30 06 F1 | 	add	local10, #1
08678     F2 30 62 FC | 	wrlong	local10, objptr
0867c     41 00 00 FF 
08680     40 E4 85 F1 | 	sub	objptr, ##33344
08684                 | LR__0688
08684     A7 F0 03 F6 | 	mov	ptra, fp
08688     B2 00 A0 FD | 	call	#popregs_
0868c                 | _getvar_ret
0868c     2D 00 64 FD | 	ret
08690                 | 
08690                 | ' 
08690                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08690                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08690                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08690                 | ' 
08690                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08690                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08690                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08690                 | ' 
08690                 | ' function execute_line (astart=0 as integer) as integer
08690                 | _execute_line
08690     04 4A 05 F6 | 	mov	COUNT_, #4
08694     A8 00 A0 FD | 	call	#pushregs_
08698     50 00 00 FF 
0869c     78 E5 05 F1 | 	add	objptr, ##41336
086a0     F2 00 68 FC | 	wrlong	#0, objptr
086a4                 | ' runptr2=0
086a4                 | ' for lineptr_e=astart to lineptr-1
086a4     0F 00 00 FF 
086a8     34 E5 85 F1 | 	sub	objptr, ##7988
086ac     F2 12 62 FC | 	wrlong	arg01, objptr
086b0     04 E4 85 F1 | 	sub	objptr, #4
086b4     F2 1E 02 FB | 	rdlong	local01, objptr
086b8     41 00 00 FF 
086bc     40 E4 85 F1 | 	sub	objptr, ##33344
086c0                 | LR__0690
086c0     41 00 00 FF 
086c4     44 E4 05 F1 | 	add	objptr, ##33348
086c8     F2 FA 01 FB | 	rdlong	result1, objptr
086cc     41 00 00 FF 
086d0     44 E4 85 F1 | 	sub	objptr, ##33348
086d4     0F FB 51 F2 | 	cmps	result1, local01 wc
086d8     98 00 90 3D |  if_ae	jmp	#LR__0691
086dc     41 00 00 FF 
086e0     44 E4 05 F1 | 	add	objptr, ##33348
086e4     F2 FA 01 FB | 	rdlong	result1, objptr
086e8     FD 20 02 F6 | 	mov	local02, result1
086ec     01 20 66 F0 | 	shl	local02, #1
086f0     FD 20 02 F1 | 	add	local02, result1
086f4     02 20 66 F0 | 	shl	local02, #2
086f8     03 00 00 FF 
086fc     04 E4 85 F1 | 	sub	objptr, ##1540
08700     F2 20 02 F1 | 	add	local02, objptr
08704     08 20 06 F1 | 	add	local02, #8
08708     10 21 02 FB | 	rdlong	local02, local02
0870c     10 21 E2 F8 | 	getbyte	local02, local02, #0
08710     02 20 66 F0 | 	shl	local02, #2
08714     04 00 00 FF 
08718     1C E4 85 F1 | 	sub	objptr, ##2076
0871c     F2 20 02 F1 | 	add	local02, objptr
08720     10 21 02 FB | 	rdlong	local02, local02
08724     10 23 02 F6 | 	mov	local03, local02
08728     13 20 46 F7 | 	zerox	local02, #19
0872c     14 22 46 F0 | 	shr	local03, #20
08730     02 22 66 F0 | 	shl	local03, #2
08734     ED 22 02 F1 | 	add	local03, __methods__
08738     11 23 02 FB | 	rdlong	local03, local03
0873c     3A 00 00 FF 
08740     24 E4 85 F1 | 	sub	objptr, ##29732
08744     F2 24 02 F6 | 	mov	local04, objptr
08748     10 E5 01 F6 | 	mov	objptr, local02
0874c     2D 22 62 FD | 	call	local03
08750     12 E5 01 F6 | 	mov	objptr, local04
08754     41 00 00 FF 
08758     44 E4 05 F1 | 	add	objptr, ##33348
0875c     F2 24 02 FB | 	rdlong	local04, objptr
08760     01 24 06 F1 | 	add	local04, #1
08764     F2 24 62 FC | 	wrlong	local04, objptr
08768     41 00 00 FF 
0876c     44 E4 85 F1 | 	sub	objptr, ##33348
08770     4C FF 9F FD | 	jmp	#LR__0690
08774                 | LR__0691
08774                 | ' return runptr2
08774     50 00 00 FF 
08778     78 E5 05 F1 | 	add	objptr, ##41336
0877c     F2 FA 01 FB | 	rdlong	result1, objptr
08780     50 00 00 FF 
08784     78 E5 85 F1 | 	sub	objptr, ##41336
08788     A7 F0 03 F6 | 	mov	ptra, fp
0878c     B2 00 A0 FD | 	call	#popregs_
08790                 | _execute_line_ret
08790     2D 00 64 FD | 	ret
08794                 | 
08794                 | ' 
08794                 | ' 
08794                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08794                 | ' 
08794                 | ' function pop() as expr_result
08794                 | _pop
08794                 | ' 
08794                 | ' if stackpointer=0 then
08794     3A 00 00 FF 
08798     1C E4 05 F1 | 	add	objptr, ##29724
0879c     F2 FA 09 FB | 	rdlong	result1, objptr wz
087a0     3A 00 00 FF 
087a4     1C E4 85 F1 | 	sub	objptr, ##29724
087a8     FF 04 06 A6 |  if_e	mov	_var03, #255
087ac     18 00 06 A6 |  if_e	mov	_var01, #24
087b0     68 00 90 AD |  if_e	jmp	#LR__0700
087b4     3A 00 00 FF 
087b8     1C E4 05 F1 | 	add	objptr, ##29724
087bc     F2 FA 01 FB | 	rdlong	result1, objptr
087c0     01 FA 85 F1 | 	sub	result1, #1
087c4     F2 FA 61 FC | 	wrlong	result1, objptr
087c8     FD FE 01 F6 | 	mov	result3, result1
087cc     01 FE 65 F0 | 	shl	result3, #1
087d0     FD FE 01 F1 | 	add	result3, result1
087d4     02 FE 65 F0 | 	shl	result3, #2
087d8     0C 00 00 FF 
087dc     0C E4 85 F1 | 	sub	objptr, ##6156
087e0     F2 FE 01 F1 | 	add	result3, objptr
087e4     FF 00 02 FB | 	rdlong	_var01, result3
087e8     04 FE 05 F1 | 	add	result3, #4
087ec     FF FE 01 FB | 	rdlong	result3, result3
087f0     FD FC 01 F6 | 	mov	result2, result1
087f4     01 FC 65 F0 | 	shl	result2, #1
087f8     FD FC 01 F1 | 	add	result2, result1
087fc     02 FC 65 F0 | 	shl	result2, #2
08800     F2 FC 01 F1 | 	add	result2, objptr
08804     08 FC 05 F1 | 	add	result2, #8
08808     FE FA 01 FB | 	rdlong	result1, result2
0880c     FF 02 02 F6 | 	mov	_var02, result3
08810     FD 04 02 F6 | 	mov	_var03, result1
08814     2E 00 00 FF 
08818     10 E4 85 F1 | 	sub	objptr, ##23568
0881c                 | LR__0700
0881c                 | ' return t1
0881c     01 FD 01 F6 | 	mov	result2, _var02
08820     02 FF 01 F6 | 	mov	result3, _var03
08824     00 FB 01 F6 | 	mov	result1, _var01
08828                 | _pop_ret
08828     2D 00 64 FD | 	ret
0882c                 | 
0882c                 | ' 
0882c                 | ' sub push(t1 as expr_result )
0882c                 | _push
0882c                 | ' 
0882c                 | ' 'print "In push: "; t1.result_type
0882c                 | ' 'print "In push: "; t1.result.uresult
0882c                 | ' 
0882c                 | ' if stackpointer<maxstack then 
0882c     3A 00 00 FF 
08830     1C E4 05 F1 | 	add	objptr, ##29724
08834     F2 00 02 FB | 	rdlong	_var01, objptr
08838     3A 00 00 FF 
0883c     1C E4 85 F1 | 	sub	objptr, ##29724
08840     01 00 00 FF 
08844     00 00 56 F2 | 	cmps	_var01, ##512 wc
08848     BC 00 90 3D |  if_ae	jmp	#LR__0710
0884c     09 01 02 FB | 	rdlong	_var01, arg01
08850     04 12 06 F1 | 	add	arg01, #4
08854     09 03 02 FB | 	rdlong	_var02, arg01
08858     04 12 06 F1 | 	add	arg01, #4
0885c     09 13 02 FB | 	rdlong	arg01, arg01
08860     3A 00 00 FF 
08864     1C E4 05 F1 | 	add	objptr, ##29724
08868     F2 04 02 FB | 	rdlong	_var03, objptr
0886c     02 07 02 F6 | 	mov	_var04, _var03
08870     01 06 66 F0 | 	shl	_var04, #1
08874     02 07 02 F1 | 	add	_var04, _var03
08878     02 06 66 F0 | 	shl	_var04, #2
0887c     0C 00 00 FF 
08880     0C E4 85 F1 | 	sub	objptr, ##6156
08884     F2 06 02 F1 | 	add	_var04, objptr
08888     03 01 62 FC | 	wrlong	_var01, _var04
0888c     0C 00 00 FF 
08890     0C E4 05 F1 | 	add	objptr, ##6156
08894     F2 06 02 FB | 	rdlong	_var04, objptr
08898     03 05 02 F6 | 	mov	_var03, _var04
0889c     01 04 66 F0 | 	shl	_var03, #1
088a0     03 05 02 F1 | 	add	_var03, _var04
088a4     02 04 66 F0 | 	shl	_var03, #2
088a8     0C 00 00 FF 
088ac     0C E4 85 F1 | 	sub	objptr, ##6156
088b0     F2 04 02 F1 | 	add	_var03, objptr
088b4     04 04 06 F1 | 	add	_var03, #4
088b8     02 03 62 FC | 	wrlong	_var02, _var03
088bc     0C 00 00 FF 
088c0     0C E4 05 F1 | 	add	objptr, ##6156
088c4     F2 06 02 FB | 	rdlong	_var04, objptr
088c8     03 05 02 F6 | 	mov	_var03, _var04
088cc     01 04 66 F0 | 	shl	_var03, #1
088d0     03 05 02 F1 | 	add	_var03, _var04
088d4     02 04 66 F0 | 	shl	_var03, #2
088d8     0C 00 00 FF 
088dc     0C E4 85 F1 | 	sub	objptr, ##6156
088e0     F2 04 02 F1 | 	add	_var03, objptr
088e4     08 04 06 F1 | 	add	_var03, #8
088e8     02 13 62 FC | 	wrlong	arg01, _var03
088ec     0C 00 00 FF 
088f0     0C E4 05 F1 | 	add	objptr, ##6156
088f4     F2 00 02 FB | 	rdlong	_var01, objptr
088f8     01 00 06 F1 | 	add	_var01, #1
088fc     F2 00 62 FC | 	wrlong	_var01, objptr
08900     3A 00 00 FF 
08904     1C E4 85 F1 | 	sub	objptr, ##29724
08908                 | LR__0710
08908                 | _push_ret
08908     2D 00 64 FD | 	ret
0890c                 | 
0890c                 | ' 
0890c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0890c                 | ' 
0890c                 | ' sub do_push
0890c                 | _do_push
0890c                 | ' if stackpointer<maxstack then 
0890c     3A 00 00 FF 
08910     1C E4 05 F1 | 	add	objptr, ##29724
08914     F2 00 02 FB | 	rdlong	_var01, objptr
08918     3A 00 00 FF 
0891c     1C E4 85 F1 | 	sub	objptr, ##29724
08920     01 00 00 FF 
08924     00 00 56 F2 | 	cmps	_var01, ##512 wc
08928     F8 00 90 3D |  if_ae	jmp	#LR__0720
0892c     41 00 00 FF 
08930     44 E4 05 F1 | 	add	objptr, ##33348
08934     F2 02 02 FB | 	rdlong	_var02, objptr
08938     01 05 02 F6 | 	mov	_var03, _var02
0893c     01 04 66 F0 | 	shl	_var03, #1
08940     01 05 02 F1 | 	add	_var03, _var02
08944     02 04 66 F0 | 	shl	_var03, #2
08948     03 00 00 FF 
0894c     04 E4 85 F1 | 	sub	objptr, ##1540
08950     F2 04 02 F1 | 	add	_var03, objptr
08954     02 01 02 FB | 	rdlong	_var01, _var03
08958     04 04 06 F1 | 	add	_var03, #4
0895c     02 07 02 FB | 	rdlong	_var04, _var03
08960     01 05 02 F6 | 	mov	_var03, _var02
08964     01 04 66 F0 | 	shl	_var03, #1
08968     01 05 02 F1 | 	add	_var03, _var02
0896c     02 04 66 F0 | 	shl	_var03, #2
08970     F2 04 02 F1 | 	add	_var03, objptr
08974     08 04 06 F1 | 	add	_var03, #8
08978     02 03 02 FB | 	rdlong	_var02, _var03
0897c     04 00 00 FF 
08980     24 E4 85 F1 | 	sub	objptr, ##2084
08984     F2 04 02 FB | 	rdlong	_var03, objptr
08988     02 09 02 F6 | 	mov	_var05, _var03
0898c     01 08 66 F0 | 	shl	_var05, #1
08990     02 09 02 F1 | 	add	_var05, _var03
08994     02 08 66 F0 | 	shl	_var05, #2
08998     0C 00 00 FF 
0899c     0C E4 85 F1 | 	sub	objptr, ##6156
089a0     F2 08 02 F1 | 	add	_var05, objptr
089a4     04 01 62 FC | 	wrlong	_var01, _var05
089a8     0C 00 00 FF 
089ac     0C E4 05 F1 | 	add	objptr, ##6156
089b0     F2 08 02 FB | 	rdlong	_var05, objptr
089b4     04 05 02 F6 | 	mov	_var03, _var05
089b8     01 04 66 F0 | 	shl	_var03, #1
089bc     04 05 02 F1 | 	add	_var03, _var05
089c0     02 04 66 F0 | 	shl	_var03, #2
089c4     0C 00 00 FF 
089c8     0C E4 85 F1 | 	sub	objptr, ##6156
089cc     F2 04 02 F1 | 	add	_var03, objptr
089d0     04 04 06 F1 | 	add	_var03, #4
089d4     02 07 62 FC | 	wrlong	_var04, _var03
089d8     0C 00 00 FF 
089dc     0C E4 05 F1 | 	add	objptr, ##6156
089e0     F2 08 02 FB | 	rdlong	_var05, objptr
089e4     04 07 02 F6 | 	mov	_var04, _var05
089e8     01 06 66 F0 | 	shl	_var04, #1
089ec     04 07 02 F1 | 	add	_var04, _var05
089f0     02 06 66 F0 | 	shl	_var04, #2
089f4     0C 00 00 FF 
089f8     0C E4 85 F1 | 	sub	objptr, ##6156
089fc     F2 06 02 F1 | 	add	_var04, objptr
08a00     08 06 06 F1 | 	add	_var04, #8
08a04     03 03 62 FC | 	wrlong	_var02, _var04
08a08     0C 00 00 FF 
08a0c     0C E4 05 F1 | 	add	objptr, ##6156
08a10     F2 00 02 FB | 	rdlong	_var01, objptr
08a14     01 00 06 F1 | 	add	_var01, #1
08a18     F2 00 62 FC | 	wrlong	_var01, objptr
08a1c     3A 00 00 FF 
08a20     1C E4 85 F1 | 	sub	objptr, ##29724
08a24                 | LR__0720
08a24                 | _do_push_ret
08a24     2D 00 64 FD | 	ret
08a28                 | 
08a28                 | ' 
08a28                 | '   
08a28                 | ' sub csave_block(address as ulong)
08a28                 | _csave_block
08a28     09 01 02 F6 | 	mov	_var01, arg01
08a2c                 | ' 
08a2c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08a2c                 | ' ' we enter it at the state of playing 1 kHz header tone
08a2c                 | ' 
08a2c                 | ' for i=0 to 63 step 2
08a2c     00 02 06 F6 | 	mov	_var02, #0
08a30                 | LR__0730
08a30                 | '   do: loop until lpeek(base+32*7)>32768
08a30     2D 00 00 FF 
08a34     D4 E5 05 F1 | 	add	objptr, ##23508
08a38     97 0C 48 FB | 	callpa	#(@LR__0732-@LR__0731)>>2,fcache_load_ptr_
08a3c                 | LR__0731
08a3c     F2 12 02 FB | 	rdlong	arg01, objptr
08a40     E0 12 06 F1 | 	add	arg01, #224
08a44     09 FB 01 FB | 	rdlong	result1, arg01
08a48     40 00 00 FF 
08a4c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08a50     E8 FF 9F CD |  if_b	jmp	#LR__0731
08a54                 | LR__0732
08a54     00 13 02 F6 | 	mov	arg01, _var01
08a58     01 05 02 F6 | 	mov	_var03, _var02
08a5c     02 04 66 F0 | 	shl	_var03, #2
08a60     02 13 02 F1 | 	add	arg01, _var03
08a64     09 07 02 FB | 	rdlong	_var04, arg01
08a68     24 00 00 FF 
08a6c     AC E4 05 F1 | 	add	objptr, ##18604
08a70     F2 06 62 FC | 	wrlong	_var04, objptr
08a74     52 00 00 FF 
08a78     80 E4 85 F1 | 	sub	objptr, ##42112
08a7c                 | '   q=lpeek(address+4*i)
08a7c                 | '      for bit=0 to 31
08a7c     00 08 06 F6 | 	mov	_var05, #0
08a80     97 84 48 FB | 	callpa	#(@LR__0737-@LR__0733)>>2,fcache_load_ptr_
08a84                 | LR__0733
08a84                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08a84     52 00 00 FF 
08a88     80 E4 05 F1 | 	add	objptr, ##42112
08a8c     F2 06 02 FB | 	rdlong	_var04, objptr
08a90     52 00 00 FF 
08a94     80 E4 85 F1 | 	sub	objptr, ##42112
08a98     04 05 C2 F9 | 	decod	_var03, _var05
08a9c     02 07 CA F7 | 	test	_var04, _var03 wz
08aa0     60 00 90 AD |  if_e	jmp	#LR__0734
08aa4     04 05 02 F6 | 	mov	_var03, _var05
08aa8     02 04 66 F0 | 	shl	_var03, #2
08aac     4E 00 00 FF 
08ab0     70 E4 05 F1 | 	add	objptr, ##40048
08ab4     F2 04 02 F1 | 	add	_var03, objptr
08ab8     02 FF 48 FC | 	wrbyte	#127, _var03
08abc     04 05 02 F6 | 	mov	_var03, _var05
08ac0     02 04 66 F0 | 	shl	_var03, #2
08ac4     01 04 06 F1 | 	add	_var03, #1
08ac8     F2 04 02 F1 | 	add	_var03, objptr
08acc     02 01 49 FC | 	wrbyte	#128, _var03
08ad0     04 05 02 F6 | 	mov	_var03, _var05
08ad4     02 04 66 F0 | 	shl	_var03, #2
08ad8     02 04 06 F1 | 	add	_var03, #2
08adc     F2 04 02 F1 | 	add	_var03, objptr
08ae0     02 FF 48 FC | 	wrbyte	#127, _var03
08ae4     04 05 02 F6 | 	mov	_var03, _var05
08ae8     02 04 66 F0 | 	shl	_var03, #2
08aec     03 04 06 F1 | 	add	_var03, #3
08af0     F2 04 02 F1 | 	add	_var03, objptr
08af4     02 01 49 FC | 	wrbyte	#128, _var03
08af8     4E 00 00 FF 
08afc     70 E4 85 F1 | 	sub	objptr, ##40048
08b00     5C 00 90 FD | 	jmp	#LR__0735
08b04                 | LR__0734
08b04     04 05 02 F6 | 	mov	_var03, _var05
08b08     02 04 66 F0 | 	shl	_var03, #2
08b0c     4E 00 00 FF 
08b10     70 E4 05 F1 | 	add	objptr, ##40048
08b14     F2 04 02 F1 | 	add	_var03, objptr
08b18     02 01 49 FC | 	wrbyte	#128, _var03
08b1c     04 05 02 F6 | 	mov	_var03, _var05
08b20     02 04 66 F0 | 	shl	_var03, #2
08b24     01 04 06 F1 | 	add	_var03, #1
08b28     F2 04 02 F1 | 	add	_var03, objptr
08b2c     02 01 49 FC | 	wrbyte	#128, _var03
08b30     04 05 02 F6 | 	mov	_var03, _var05
08b34     02 04 66 F0 | 	shl	_var03, #2
08b38     02 04 06 F1 | 	add	_var03, #2
08b3c     F2 04 02 F1 | 	add	_var03, objptr
08b40     02 FF 48 FC | 	wrbyte	#127, _var03
08b44     04 05 02 F6 | 	mov	_var03, _var05
08b48     02 04 66 F0 | 	shl	_var03, #2
08b4c     03 04 06 F1 | 	add	_var03, #3
08b50     F2 04 02 F1 | 	add	_var03, objptr
08b54     02 FF 48 FC | 	wrbyte	#127, _var03
08b58     4E 00 00 FF 
08b5c     70 E4 85 F1 | 	sub	objptr, ##40048
08b60                 | LR__0735
08b60     01 08 06 F1 | 	add	_var05, #1
08b64     20 08 56 F2 | 	cmps	_var05, #32 wc
08b68     18 FF 9F CD |  if_b	jmp	#LR__0733
08b6c                 | '   do: loop until lpeek(base+32*7)<32768
08b6c     2D 00 00 FF 
08b70     D4 E5 05 F1 | 	add	objptr, ##23508
08b74                 | LR__0736
08b74     F2 12 02 FB | 	rdlong	arg01, objptr
08b78     E0 12 06 F1 | 	add	arg01, #224
08b7c     09 FB 01 FB | 	rdlong	result1, arg01
08b80     40 00 00 FF 
08b84     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08b88     E8 FF 9F 3D |  if_ae	jmp	#LR__0736
08b8c                 | LR__0737
08b8c     00 13 02 F6 | 	mov	arg01, _var01
08b90     04 12 06 F1 | 	add	arg01, #4
08b94     01 05 02 F6 | 	mov	_var03, _var02
08b98     02 04 66 F0 | 	shl	_var03, #2
08b9c     02 13 02 F1 | 	add	arg01, _var03
08ba0     09 07 02 FB | 	rdlong	_var04, arg01
08ba4     24 00 00 FF 
08ba8     AC E4 05 F1 | 	add	objptr, ##18604
08bac     F2 06 62 FC | 	wrlong	_var04, objptr
08bb0     52 00 00 FF 
08bb4     80 E4 85 F1 | 	sub	objptr, ##42112
08bb8                 | '   q=lpeek(address+4+4*i)
08bb8                 | '      for bit=0 to 31
08bb8     00 08 06 F6 | 	mov	_var05, #0
08bbc     97 94 48 FB | 	callpa	#(@LR__0741-@LR__0738)>>2,fcache_load_ptr_
08bc0                 | LR__0738
08bc0                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08bc0     52 00 00 FF 
08bc4     80 E4 05 F1 | 	add	objptr, ##42112
08bc8     F2 06 02 FB | 	rdlong	_var04, objptr
08bcc     52 00 00 FF 
08bd0     80 E4 85 F1 | 	sub	objptr, ##42112
08bd4     04 05 C2 F9 | 	decod	_var03, _var05
08bd8     02 07 CA F7 | 	test	_var04, _var03 wz
08bdc     80 00 90 AD |  if_e	jmp	#LR__0739
08be0     04 0B 02 F6 | 	mov	_var06, _var05
08be4     02 0A 66 F0 | 	shl	_var06, #2
08be8     80 04 06 F6 | 	mov	_var03, #128
08bec     05 05 02 F1 | 	add	_var03, _var06
08bf0     4E 00 00 FF 
08bf4     70 E4 05 F1 | 	add	objptr, ##40048
08bf8     F2 04 02 F1 | 	add	_var03, objptr
08bfc     02 FF 48 FC | 	wrbyte	#127, _var03
08c00     04 0B 02 F6 | 	mov	_var06, _var05
08c04     02 0A 66 F0 | 	shl	_var06, #2
08c08     80 04 06 F6 | 	mov	_var03, #128
08c0c     05 05 02 F1 | 	add	_var03, _var06
08c10     01 04 06 F1 | 	add	_var03, #1
08c14     F2 04 02 F1 | 	add	_var03, objptr
08c18     02 01 49 FC | 	wrbyte	#128, _var03
08c1c     04 0B 02 F6 | 	mov	_var06, _var05
08c20     02 0A 66 F0 | 	shl	_var06, #2
08c24     80 04 06 F6 | 	mov	_var03, #128
08c28     05 05 02 F1 | 	add	_var03, _var06
08c2c     02 04 06 F1 | 	add	_var03, #2
08c30     F2 04 02 F1 | 	add	_var03, objptr
08c34     02 FF 48 FC | 	wrbyte	#127, _var03
08c38     04 0B 02 F6 | 	mov	_var06, _var05
08c3c     02 0A 66 F0 | 	shl	_var06, #2
08c40     80 04 06 F6 | 	mov	_var03, #128
08c44     05 05 02 F1 | 	add	_var03, _var06
08c48     03 04 06 F1 | 	add	_var03, #3
08c4c     F2 04 02 F1 | 	add	_var03, objptr
08c50     02 01 49 FC | 	wrbyte	#128, _var03
08c54     4E 00 00 FF 
08c58     70 E4 85 F1 | 	sub	objptr, ##40048
08c5c     7C 00 90 FD | 	jmp	#LR__0740
08c60                 | LR__0739
08c60     04 0B 02 F6 | 	mov	_var06, _var05
08c64     02 0A 66 F0 | 	shl	_var06, #2
08c68     80 04 06 F6 | 	mov	_var03, #128
08c6c     05 05 02 F1 | 	add	_var03, _var06
08c70     4E 00 00 FF 
08c74     70 E4 05 F1 | 	add	objptr, ##40048
08c78     F2 04 02 F1 | 	add	_var03, objptr
08c7c     02 01 49 FC | 	wrbyte	#128, _var03
08c80     04 0B 02 F6 | 	mov	_var06, _var05
08c84     02 0A 66 F0 | 	shl	_var06, #2
08c88     80 04 06 F6 | 	mov	_var03, #128
08c8c     05 05 02 F1 | 	add	_var03, _var06
08c90     01 04 06 F1 | 	add	_var03, #1
08c94     F2 04 02 F1 | 	add	_var03, objptr
08c98     02 01 49 FC | 	wrbyte	#128, _var03
08c9c     04 0B 02 F6 | 	mov	_var06, _var05
08ca0     02 0A 66 F0 | 	shl	_var06, #2
08ca4     80 04 06 F6 | 	mov	_var03, #128
08ca8     05 05 02 F1 | 	add	_var03, _var06
08cac     02 04 06 F1 | 	add	_var03, #2
08cb0     F2 04 02 F1 | 	add	_var03, objptr
08cb4     02 FF 48 FC | 	wrbyte	#127, _var03
08cb8     04 0B 02 F6 | 	mov	_var06, _var05
08cbc     02 0A 66 F0 | 	shl	_var06, #2
08cc0     80 04 06 F6 | 	mov	_var03, #128
08cc4     05 05 02 F1 | 	add	_var03, _var06
08cc8     03 04 06 F1 | 	add	_var03, #3
08ccc     F2 04 02 F1 | 	add	_var03, objptr
08cd0     02 FF 48 FC | 	wrbyte	#127, _var03
08cd4     4E 00 00 FF 
08cd8     70 E4 85 F1 | 	sub	objptr, ##40048
08cdc                 | LR__0740
08cdc     01 08 06 F1 | 	add	_var05, #1
08ce0     20 08 56 F2 | 	cmps	_var05, #32 wc
08ce4     D8 FE 9F CD |  if_b	jmp	#LR__0738
08ce8                 | LR__0741
08ce8     02 02 06 F1 | 	add	_var02, #2
08cec     40 02 56 F2 | 	cmps	_var02, #64 wc
08cf0     3C FD 9F CD |  if_b	jmp	#LR__0730
08cf4                 | ' do: loop until lpeek(base+32*7)>32768
08cf4     2D 00 00 FF 
08cf8     D4 E5 05 F1 | 	add	objptr, ##23508
08cfc     97 84 48 FB | 	callpa	#(@LR__0750-@LR__0742)>>2,fcache_load_ptr_
08d00                 | LR__0742
08d00     F2 12 02 FB | 	rdlong	arg01, objptr
08d04     E0 12 06 F1 | 	add	arg01, #224
08d08     09 FB 01 FB | 	rdlong	result1, arg01
08d0c     40 00 00 FF 
08d10     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08d14     E8 FF 9F CD |  if_b	jmp	#LR__0742
08d18     2D 00 00 FF 
08d1c     D4 E5 85 F1 | 	sub	objptr, ##23508
08d20                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08d20     00 02 06 F6 | 	mov	_var02, #0
08d24                 | LR__0743
08d24     01 07 52 F6 | 	abs	_var04, _var02 wc
08d28     07 06 06 F5 | 	and	_var04, #7
08d2c     03 07 82 F6 | 	negc	_var04, _var04
08d30     04 06 56 F2 | 	cmps	_var04, #4 wc
08d34     20 00 90 3D |  if_ae	jmp	#LR__0744
08d38     01 0B 02 F6 | 	mov	_var06, _var02
08d3c     4E 00 00 FF 
08d40     70 E4 05 F1 | 	add	objptr, ##40048
08d44     F2 0A 02 F1 | 	add	_var06, objptr
08d48     05 FF 48 FC | 	wrbyte	#127, _var06
08d4c     4E 00 00 FF 
08d50     70 E4 85 F1 | 	sub	objptr, ##40048
08d54     1C 00 90 FD | 	jmp	#LR__0745
08d58                 | LR__0744
08d58     01 0B 02 F6 | 	mov	_var06, _var02
08d5c     4E 00 00 FF 
08d60     70 E4 05 F1 | 	add	objptr, ##40048
08d64     F2 0A 02 F1 | 	add	_var06, objptr
08d68     05 01 49 FC | 	wrbyte	#128, _var06
08d6c     4E 00 00 FF 
08d70     70 E4 85 F1 | 	sub	objptr, ##40048
08d74                 | LR__0745
08d74     01 02 06 F1 | 	add	_var02, #1
08d78     80 02 56 F2 | 	cmps	_var02, #128 wc
08d7c     A4 FF 9F CD |  if_b	jmp	#LR__0743
08d80                 | ' 
08d80                 | ' do: loop until lpeek(base+32*7)<32768
08d80     2D 00 00 FF 
08d84     D4 E5 05 F1 | 	add	objptr, ##23508
08d88                 | LR__0746
08d88     F2 12 02 FB | 	rdlong	arg01, objptr
08d8c     E0 12 06 F1 | 	add	arg01, #224
08d90     09 FB 01 FB | 	rdlong	result1, arg01
08d94     40 00 00 FF 
08d98     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08d9c     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08da0     2D 00 00 FF 
08da4     D4 E5 85 F1 | 	sub	objptr, ##23508
08da8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08da8     80 02 06 F6 | 	mov	_var02, #128
08dac                 | LR__0747
08dac     01 07 52 F6 | 	abs	_var04, _var02 wc
08db0     07 06 06 F5 | 	and	_var04, #7
08db4     03 07 82 F6 | 	negc	_var04, _var04
08db8     04 06 56 F2 | 	cmps	_var04, #4 wc
08dbc     20 00 90 3D |  if_ae	jmp	#LR__0748
08dc0     01 0B 02 F6 | 	mov	_var06, _var02
08dc4     4E 00 00 FF 
08dc8     70 E4 05 F1 | 	add	objptr, ##40048
08dcc     F2 0A 02 F1 | 	add	_var06, objptr
08dd0     05 FF 48 FC | 	wrbyte	#127, _var06
08dd4     4E 00 00 FF 
08dd8     70 E4 85 F1 | 	sub	objptr, ##40048
08ddc     1C 00 90 FD | 	jmp	#LR__0749
08de0                 | LR__0748
08de0     01 0B 02 F6 | 	mov	_var06, _var02
08de4     4E 00 00 FF 
08de8     70 E4 05 F1 | 	add	objptr, ##40048
08dec     F2 0A 02 F1 | 	add	_var06, objptr
08df0     05 01 49 FC | 	wrbyte	#128, _var06
08df4     4E 00 00 FF 
08df8     70 E4 85 F1 | 	sub	objptr, ##40048
08dfc                 | LR__0749
08dfc     01 02 06 F1 | 	add	_var02, #1
08e00     00 03 16 F2 | 	cmp	_var02, #256 wc
08e04     A4 FF 9F CD |  if_b	jmp	#LR__0747
08e08                 | LR__0750
08e08                 | _csave_block_ret
08e08     2D 00 64 FD | 	ret
08e0c                 | 
08e0c                 | ' 
08e0c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
08e0c                 | _csave_addtoblock
08e0c     04 4A 05 F6 | 	mov	COUNT_, #4
08e10     A8 00 A0 FD | 	call	#pushregs_
08e14     09 1F 02 F6 | 	mov	local01, arg01
08e18                 | ' 
08e18                 | ' 
08e18                 | ' if force=0 then
08e18     07 14 4E F7 | 	zerox	arg02, #7 wz
08e1c     78 00 90 5D |  if_ne	jmp	#LR__0760
08e20     50 00 00 FF 
08e24     70 E5 05 F1 | 	add	objptr, ##41328
08e28     F2 14 02 FB | 	rdlong	arg02, objptr
08e2c     02 00 00 FF 
08e30     00 E4 85 F1 | 	sub	objptr, ##1024
08e34     F2 14 02 F1 | 	add	arg02, objptr
08e38     0A 1F 42 FC | 	wrbyte	local01, arg02
08e3c     02 00 00 FF 
08e40     00 E4 05 F1 | 	add	objptr, ##1024
08e44     F2 1E 02 FB | 	rdlong	local01, objptr
08e48     01 1E 06 F1 | 	add	local01, #1
08e4c     F2 1E 62 FC | 	wrlong	local01, objptr
08e50                 | '   block(blockptr)=d
08e50                 | '   blockptr+=1
08e50                 | '   if blockptr>=255 then
08e50     50 00 00 FF 
08e54     70 E5 85 F1 | 	sub	objptr, ##41328
08e58     FF 1E 16 F2 | 	cmp	local01, #255 wc
08e5c     E4 00 90 CD |  if_b	jmp	#LR__0764
08e60     4E 00 00 FF 
08e64     70 E5 05 F1 | 	add	objptr, ##40304
08e68     F2 12 02 F6 | 	mov	arg01, objptr
08e6c     4E 00 00 FF 
08e70     70 E5 85 F1 | 	sub	objptr, ##40304
08e74     B0 FB BF FD | 	call	#_csave_block
08e78     50 00 00 FF 
08e7c     70 E5 05 F1 | 	add	objptr, ##41328
08e80     F2 00 68 FC | 	wrlong	#0, objptr
08e84     50 00 00 FF 
08e88     70 E5 85 F1 | 	sub	objptr, ##41328
08e8c     2C 13 06 F6 | 	mov	arg01, #300
08e90     74 C3 B0 FD | 	call	#__system___waitms
08e94     AC 00 90 FD | 	jmp	#LR__0764
08e98                 | LR__0760
08e98     50 00 00 FF 
08e9c     70 E5 05 F1 | 	add	objptr, ##41328
08ea0     F2 20 02 FB | 	rdlong	local02, objptr
08ea4     02 00 00 FF 
08ea8     00 E4 85 F1 | 	sub	objptr, ##1024
08eac     F2 20 02 F1 | 	add	local02, objptr
08eb0     10 1F 42 FC | 	wrbyte	local01, local02
08eb4                 | '   block(blockptr)=d
08eb4                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
08eb4     02 00 00 FF 
08eb8     00 E4 05 F1 | 	add	objptr, ##1024
08ebc     F2 22 02 FB | 	rdlong	local03, objptr
08ec0     50 00 00 FF 
08ec4     70 E5 85 F1 | 	sub	objptr, ##41328
08ec8     FF 22 16 F2 | 	cmp	local03, #255 wc
08ecc     40 00 90 3D |  if_ae	jmp	#LR__0763
08ed0     50 00 00 FF 
08ed4     70 E5 05 F1 | 	add	objptr, ##41328
08ed8     F2 24 02 FB | 	rdlong	local04, objptr
08edc     50 00 00 FF 
08ee0     70 E5 85 F1 | 	sub	objptr, ##41328
08ee4                 | LR__0761
08ee4     00 25 56 F2 | 	cmps	local04, #256 wc
08ee8     24 00 90 3D |  if_ae	jmp	#LR__0762
08eec     12 21 02 F6 | 	mov	local02, local04
08ef0     4E 00 00 FF 
08ef4     70 E5 05 F1 | 	add	objptr, ##40304
08ef8     F2 20 02 F1 | 	add	local02, objptr
08efc     10 01 48 FC | 	wrbyte	#0, local02
08f00     01 24 06 F1 | 	add	local04, #1
08f04     4E 00 00 FF 
08f08     70 E5 85 F1 | 	sub	objptr, ##40304
08f0c     D4 FF 9F FD | 	jmp	#LR__0761
08f10                 | LR__0762
08f10                 | LR__0763
08f10     4E 00 00 FF 
08f14     70 E5 05 F1 | 	add	objptr, ##40304
08f18     F2 12 02 F6 | 	mov	arg01, objptr
08f1c     4E 00 00 FF 
08f20     70 E5 85 F1 | 	sub	objptr, ##40304
08f24     00 FB BF FD | 	call	#_csave_block
08f28     50 00 00 FF 
08f2c     70 E5 05 F1 | 	add	objptr, ##41328
08f30     F2 00 68 FC | 	wrlong	#0, objptr
08f34     50 00 00 FF 
08f38     70 E5 85 F1 | 	sub	objptr, ##41328
08f3c     2C 13 06 F6 | 	mov	arg01, #300
08f40     C4 C2 B0 FD | 	call	#__system___waitms
08f44                 | LR__0764
08f44     A7 F0 03 F6 | 	mov	ptra, fp
08f48     B2 00 A0 FD | 	call	#popregs_
08f4c                 | _csave_addtoblock_ret
08f4c     2D 00 64 FD | 	ret
08f50                 | 
08f50                 | ' 
08f50                 | ' sub test_csave
08f50                 | _test_csave
08f50     04 4A 05 F6 | 	mov	COUNT_, #4
08f54     A8 00 A0 FD | 	call	#pushregs_
08f58     C0 F0 07 F1 | 	add	ptra, #192
08f5c                 | ' 'dim fileheader,savestart, saveptr as ulong
08f5c                 | ' 
08f5c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
08f5c     41 00 00 FF 
08f60     48 E4 05 F1 | 	add	objptr, ##33352
08f64     F2 12 02 FB | 	rdlong	arg01, objptr
08f68     41 00 00 FF 
08f6c     48 E4 85 F1 | 	sub	objptr, ##33352
08f70     68 8C B0 FD | 	call	#_pslpeek
08f74     FF FF 7F FF 
08f78     FF FB 0D F2 | 	cmp	result1, ##-1 wz
08f7c     0C 00 90 5D |  if_ne	jmp	#LR__0770
08f80     1B 12 06 F6 | 	mov	arg01, #27
08f84     98 8A B0 FD | 	call	#_printerror
08f88     0C 03 90 FD | 	jmp	#LR__0782
08f8c                 | LR__0770
08f8c     04 F8 BF FD | 	call	#_pop
08f90     FF 1E 02 F6 | 	mov	local01, result3
08f94     90 4E 05 F1 | 	add	fp, #144
08f98     A7 FA 61 FC | 	wrlong	result1, fp
08f9c     04 4E 05 F1 | 	add	fp, #4
08fa0     A7 FC 61 FC | 	wrlong	result2, fp
08fa4     04 4E 05 F1 | 	add	fp, #4
08fa8     A7 1E 62 FC | 	wrlong	local01, fp
08fac                 | ' t1=pop()
08fac                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
08fac     98 4E 85 F1 | 	sub	fp, #152
08fb0     1F 1E 0E F2 | 	cmp	local01, #31 wz
08fb4     22 01 00 5F 
08fb8     77 1E 06 56 |  if_ne	mov	local01, ##@LR__4306
08fbc     8C 4E 05 51 |  if_ne	add	fp, #140
08fc0     A7 1E 62 5C |  if_ne	wrlong	local01, fp
08fc4     8C 4E 85 51 |  if_ne	sub	fp, #140
08fc8     90 4E 05 A1 |  if_e	add	fp, #144
08fcc     A7 1E 02 AB |  if_e	rdlong	local01, fp
08fd0     04 4E 85 A1 |  if_e	sub	fp, #4
08fd4     A7 1E 62 AC |  if_e	wrlong	local01, fp
08fd8     8C 4E 85 A1 |  if_e	sub	fp, #140
08fdc                 | ' 
08fdc                 | ' ' prepare 1 kHz header wave
08fdc                 | ' 
08fdc                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
08fdc     A7 00 68 FC | 	wrlong	#0, fp
08fe0     97 34 48 FB | 	callpa	#(@LR__0774-@LR__0771)>>2,fcache_load_ptr_
08fe4                 | LR__0771
08fe4     A7 1E 02 FB | 	rdlong	local01, fp
08fe8     0F 1F 52 F6 | 	abs	local01, local01 wc
08fec     07 1E 06 F5 | 	and	local01, #7
08ff0     0F 1F 82 F6 | 	negc	local01, local01
08ff4     04 1E 56 F2 | 	cmps	local01, #4 wc
08ff8     20 00 90 3D |  if_ae	jmp	#LR__0772
08ffc     A7 1E 02 FB | 	rdlong	local01, fp
09000     4E 00 00 FF 
09004     70 E4 05 F1 | 	add	objptr, ##40048
09008     F2 1E 02 F1 | 	add	local01, objptr
0900c     0F FF 48 FC | 	wrbyte	#127, local01
09010     4E 00 00 FF 
09014     70 E4 85 F1 | 	sub	objptr, ##40048
09018     1C 00 90 FD | 	jmp	#LR__0773
0901c                 | LR__0772
0901c     A7 1E 02 FB | 	rdlong	local01, fp
09020     4E 00 00 FF 
09024     70 E4 05 F1 | 	add	objptr, ##40048
09028     F2 1E 02 F1 | 	add	local01, objptr
0902c     0F 01 49 FC | 	wrbyte	#128, local01
09030     4E 00 00 FF 
09034     70 E4 85 F1 | 	sub	objptr, ##40048
09038                 | LR__0773
09038     A7 1E 02 FB | 	rdlong	local01, fp
0903c     01 1E 06 F1 | 	add	local01, #1
09040     A7 1E 62 FC | 	wrlong	local01, fp
09044     00 1F 56 F2 | 	cmps	local01, #256 wc
09048     98 FF 9F CD |  if_b	jmp	#LR__0771
0904c                 | LR__0774
0904c     4E 00 00 FF 
09050     70 E4 05 F1 | 	add	objptr, ##40048
09054     F2 14 02 F6 | 	mov	arg02, objptr
09058     07 12 06 F6 | 	mov	arg01, #7
0905c     0F 00 00 FF 
09060     40 17 06 F6 | 	mov	arg03, ##8000
09064     0E 18 C6 F9 | 	decod	arg04, #14
09068     00 1B 06 F6 | 	mov	arg05, #256
0906c     00 1C 06 F6 | 	mov	arg06, #0
09070     42 00 00 FF 
09074     B0 E5 85 F1 | 	sub	objptr, ##34224
09078     00 BB B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
0907c     0B 00 00 FF 
09080     C0 E4 85 F1 | 	sub	objptr, ##5824
09084     05 00 00 FF 
09088     B8 13 06 F6 | 	mov	arg01, ##3000
0908c     78 C1 B0 FD | 	call	#__system___waitms
09090     50 00 00 FF 
09094     70 E5 05 F1 | 	add	objptr, ##41328
09098     F2 00 68 FC | 	wrlong	#0, objptr
0909c     50 00 00 FF 
090a0     70 E5 85 F1 | 	sub	objptr, ##41328
090a4     72 12 06 F6 | 	mov	arg01, #114
090a8     00 14 06 F6 | 	mov	arg02, #0
090ac     5C FD BF FD | 	call	#_csave_addtoblock
090b0     62 12 06 F6 | 	mov	arg01, #98
090b4     00 14 06 F6 | 	mov	arg02, #0
090b8     50 FD BF FD | 	call	#_csave_addtoblock
090bc     61 12 06 F6 | 	mov	arg01, #97
090c0     00 14 06 F6 | 	mov	arg02, #0
090c4     44 FD BF FD | 	call	#_csave_addtoblock
090c8     0D 12 06 F6 | 	mov	arg01, #13
090cc     00 14 06 F6 | 	mov	arg02, #0
090d0     38 FD BF FD | 	call	#_csave_addtoblock
090d4                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
090d4                 | ' waitms 3000 
090d4                 | ' 
090d4                 | ' blockptr=0
090d4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
090d4                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
090d4     A7 02 68 FC | 	wrlong	#1, fp
090d8     8C 4E 05 F1 | 	add	fp, #140
090dc     A7 12 02 FB | 	rdlong	arg01, fp
090e0     8C 4E 85 F1 | 	sub	fp, #140
090e4     09 21 02 F6 | 	mov	local02, arg01
090e8     97 06 48 FB | 	callpa	#(@LR__0776-@LR__0775)>>2,fcache_load_ptr_
090ec                 | LR__0775
090ec     10 FB C9 FA | 	rdbyte	result1, local02 wz
090f0     01 20 06 51 |  if_ne	add	local02, #1
090f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0775
090f8                 | LR__0776
090f8     09 21 82 F1 | 	sub	local02, arg01
090fc     10 23 02 F6 | 	mov	local03, local02
09100     01 22 06 F1 | 	add	local03, #1
09104                 | LR__0777
09104     A7 1E 02 FB | 	rdlong	local01, fp
09108     11 1F 52 F2 | 	cmps	local01, local03 wc
0910c     34 00 90 3D |  if_ae	jmp	#LR__0778
09110     8C 4E 05 F1 | 	add	fp, #140
09114     A7 12 02 FB | 	rdlong	arg01, fp
09118     8C 4E 85 F1 | 	sub	fp, #140
0911c     A7 14 02 FB | 	rdlong	arg02, fp
09120     01 16 06 F6 | 	mov	arg03, #1
09124     14 DF B0 FD | 	call	#__system__Mid_S
09128     FD 12 C2 FA | 	rdbyte	arg01, result1
0912c     00 14 06 F6 | 	mov	arg02, #0
09130     D8 FC BF FD | 	call	#_csave_addtoblock
09134     A7 1E 02 FB | 	rdlong	local01, fp
09138     01 1E 06 F1 | 	add	local01, #1
0913c     A7 1E 62 FC | 	wrlong	local01, fp
09140     C0 FF 9F FD | 	jmp	#LR__0777
09144                 | LR__0778
09144     00 12 06 F6 | 	mov	arg01, #0
09148     00 14 06 F6 | 	mov	arg02, #0
0914c     BC FC BF FD | 	call	#_csave_addtoblock
09150     72 12 06 F6 | 	mov	arg01, #114
09154     00 14 06 F6 | 	mov	arg02, #0
09158     B0 FC BF FD | 	call	#_csave_addtoblock
0915c     62 12 06 F6 | 	mov	arg01, #98
09160     00 14 06 F6 | 	mov	arg02, #0
09164     A4 FC BF FD | 	call	#_csave_addtoblock
09168     73 12 06 F6 | 	mov	arg01, #115
0916c     00 14 06 F6 | 	mov	arg02, #0
09170     98 FC BF FD | 	call	#_csave_addtoblock
09174     0D 12 06 F6 | 	mov	arg01, #13
09178     00 14 06 F6 | 	mov	arg02, #0
0917c     8C FC BF FD | 	call	#_csave_addtoblock
09180     41 00 00 FF 
09184     48 E4 05 F1 | 	add	objptr, ##33352
09188     F2 1E 02 FB | 	rdlong	local01, objptr
0918c     41 00 00 FF 
09190     48 E4 85 F1 | 	sub	objptr, ##33352
09194     9C 4E 05 F1 | 	add	fp, #156
09198     A7 1E 62 FC | 	wrlong	local01, fp
0919c     9C 4E 85 F1 | 	sub	fp, #156
091a0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
091a0                 | ' 
091a0                 | ' saveptr=programstart
091a0                 | ' do
091a0                 | LR__0779
091a0     A0 4E 05 F1 | 	add	fp, #160
091a4     A7 12 02 F6 | 	mov	arg01, fp
091a8     04 4E 85 F1 | 	sub	fp, #4
091ac     A7 14 02 FB | 	rdlong	arg02, fp
091b0     9C 4E 85 F1 | 	sub	fp, #156
091b4     18 16 06 F6 | 	mov	arg03, #24
091b8     0B 00 00 FF 
091bc     C0 E4 05 F1 | 	add	objptr, ##5824
091c0     64 B2 B0 FD | 	call	#_psram_spin2_read1
091c4     0C 4E 05 F1 | 	add	fp, #12
091c8     A7 12 02 F6 | 	mov	arg01, fp
091cc     9C 4E 05 F1 | 	add	fp, #156
091d0     A7 14 02 FB | 	rdlong	arg02, fp
091d4     04 4E 05 F1 | 	add	fp, #4
091d8     A7 16 02 FB | 	rdlong	arg03, fp
091dc     AC 4E 85 F1 | 	sub	fp, #172
091e0     44 B2 B0 FD | 	call	#_psram_spin2_read1
091e4     0B 00 00 FF 
091e8     C0 E4 85 F1 | 	sub	objptr, ##5824
091ec     AC 4E 05 F1 | 	add	fp, #172
091f0     A7 12 02 FB | 	rdlong	arg01, fp
091f4     AC 4E 85 F1 | 	sub	fp, #172
091f8     00 14 06 F6 | 	mov	arg02, #0
091fc     0C FC BF FD | 	call	#_csave_addtoblock
09200                 | '   psram.read1(varptr(header(0)),saveptr,24)
09200                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
09200                 | '   csave_addtoblock(header(3),0) ' that's always <255
09200                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
09200     A7 00 68 FC | 	wrlong	#0, fp
09204     AC 4E 05 F1 | 	add	fp, #172
09208     A7 24 02 FB | 	rdlong	local04, fp
0920c     AC 4E 85 F1 | 	sub	fp, #172
09210                 | LR__0780
09210     A7 1E 02 FB | 	rdlong	local01, fp
09214     12 1F 52 F2 | 	cmps	local01, local04 wc
09218     2C 00 90 3D |  if_ae	jmp	#LR__0781
0921c     A7 22 02 FB | 	rdlong	local03, fp
09220     0C 4E 05 F1 | 	add	fp, #12
09224     A7 22 02 F1 | 	add	local03, fp
09228     11 13 C2 FA | 	rdbyte	arg01, local03
0922c     00 14 06 F6 | 	mov	arg02, #0
09230     0C 4E 85 F1 | 	sub	fp, #12
09234     D4 FB BF FD | 	call	#_csave_addtoblock
09238     A7 22 02 FB | 	rdlong	local03, fp
0923c     01 22 06 F1 | 	add	local03, #1
09240     A7 22 62 FC | 	wrlong	local03, fp
09244     C8 FF 9F FD | 	jmp	#LR__0780
09248                 | LR__0781
09248     B4 4E 05 F1 | 	add	fp, #180
0924c     A7 1E 02 FB | 	rdlong	local01, fp
09250     18 4E 85 F1 | 	sub	fp, #24
09254     A7 1E 62 FC | 	wrlong	local01, fp
09258     18 4E 05 F1 | 	add	fp, #24
0925c     A7 1E 02 FB | 	rdlong	local01, fp
09260     B4 4E 85 F1 | 	sub	fp, #180
09264     FF FF 3F FF 
09268     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0926c     30 FF 9F 5D |  if_ne	jmp	#LR__0779
09270     00 12 06 F6 | 	mov	arg01, #0
09274     01 14 06 F6 | 	mov	arg02, #1
09278     90 FB BF FD | 	call	#_csave_addtoblock
0927c     2D 00 00 FF 
09280     D4 E5 05 F1 | 	add	objptr, ##23508
09284     F2 12 02 FB | 	rdlong	arg01, objptr
09288     2D 00 00 FF 
0928c     D4 E5 85 F1 | 	sub	objptr, ##23508
09290     F4 12 06 F1 | 	add	arg01, #244
09294     09 01 58 FC | 	wrword	#0, arg01
09298                 | LR__0782
09298     A7 F0 03 F6 | 	mov	ptra, fp
0929c     B2 00 A0 FD | 	call	#popregs_
092a0                 | _test_csave_ret
092a0     2D 00 64 FD | 	ret
092a4                 | 
092a4                 | ' 
092a4                 | ' ' ----------------- Save the program
092a4                 | ' 
092a4                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
092a4                 | _do_save
092a4     02 4A 05 F6 | 	mov	COUNT_, #2
092a8     A8 00 A0 FD | 	call	#pushregs_
092ac     01 00 00 FF 
092b0     BC F0 07 F1 | 	add	ptra, ##700
092b4     01 00 00 FF 
092b8     10 4E 05 F1 | 	add	fp, ##528
092bc     B1 B0 86 FF 
092c0     A7 E4 68 FC | 	wrlong	##224486002, fp
092c4     01 00 00 FF 
092c8     10 4E 85 F1 | 	sub	fp, ##528
092cc     C4 F4 BF FD | 	call	#_pop
092d0     FF 16 02 F6 | 	mov	arg03, result3
092d4     A7 FA 61 FC | 	wrlong	result1, fp
092d8     04 4E 05 F1 | 	add	fp, #4
092dc     A7 FC 61 FC | 	wrlong	result2, fp
092e0     04 4E 05 F1 | 	add	fp, #4
092e4     A7 16 62 FC | 	wrlong	arg03, fp
092e8     08 4E 85 F1 | 	sub	fp, #8
092ec                 | ' 
092ec                 | ' fileheader=$0D616272' rba+ver'
092ec                 | ' 
092ec                 | ' t1=pop() 
092ec                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
092ec     41 00 00 FF 
092f0     48 E4 05 F1 | 	add	objptr, ##33352
092f4     F2 12 02 FB | 	rdlong	arg01, objptr
092f8     41 00 00 FF 
092fc     48 E4 85 F1 | 	sub	objptr, ##33352
09300     D8 88 B0 FD | 	call	#_pslpeek
09304     FF FF 7F FF 
09308     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0930c     0C 00 90 5D |  if_ne	jmp	#LR__0790
09310     1B 12 06 F6 | 	mov	arg01, #27
09314     08 87 B0 FD | 	call	#_printerror
09318     68 02 90 FD | 	jmp	#LR__0796
0931c                 | LR__0790
0931c                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
0931c     08 4E 05 F1 | 	add	fp, #8
09320     A7 16 02 FB | 	rdlong	arg03, fp
09324     08 4E 85 F1 | 	sub	fp, #8
09328     2B 16 0E F2 | 	cmp	arg03, #43 wz
0932c     18 00 90 5D |  if_ne	jmp	#LR__0791
09330     A7 12 02 FB | 	rdlong	arg01, fp
09334     50 11 B0 FD | 	call	#_do_convertstring
09338     A7 FA 61 FC | 	wrlong	result1, fp
0933c     08 4E 05 F1 | 	add	fp, #8
09340     A7 3E 68 FC | 	wrlong	#31, fp
09344     08 4E 85 F1 | 	sub	fp, #8
09348                 | LR__0791
09348                 | ' if t1.result_type=result_string then
09348     08 4E 05 F1 | 	add	fp, #8
0934c     A7 1E 02 FB | 	rdlong	local01, fp
09350     08 4E 85 F1 | 	sub	fp, #8
09354     1F 1E 0E F2 | 	cmp	local01, #31 wz
09358     28 02 90 5D |  if_ne	jmp	#LR__0795
0935c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
0935c     A7 12 02 FB | 	rdlong	arg01, fp
09360     22 01 00 FF 
09364     82 14 06 F6 | 	mov	arg02, ##@LR__4307
09368     D0 BB B0 FD | 	call	#__system___string_cmp
0936c     00 FA 0D F2 | 	cmp	result1, #0 wz
09370     22 01 00 AF 
09374     83 1E 06 A6 |  if_e	mov	local01, ##@LR__4308
09378     A7 1E 62 AC |  if_e	wrlong	local01, fp
0937c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0937c     09 12 06 F6 | 	mov	arg01, #9
09380     74 07 B1 FD | 	call	#__system__close
09384     09 1E 06 F6 | 	mov	local01, #9
09388     49 00 00 FF 
0938c     58 E4 05 F1 | 	add	objptr, ##37464
09390     F2 12 02 FB | 	rdlong	arg01, objptr
09394     49 00 00 FF 
09398     58 E4 85 F1 | 	sub	objptr, ##37464
0939c     22 01 00 FF 
093a0     8E 14 06 F6 | 	mov	arg02, ##@LR__4309
093a4     C8 BB B0 FD | 	call	#__system___string_concat
093a8     FD 12 02 F6 | 	mov	arg01, result1
093ac     A7 14 02 FB | 	rdlong	arg02, fp
093b0     BC BB B0 FD | 	call	#__system___string_concat
093b4     FD 14 02 F6 | 	mov	arg02, result1
093b8     0F 13 02 F6 | 	mov	arg01, local01
093bc     0D 16 06 F6 | 	mov	arg03, #13
093c0     54 C7 B0 FD | 	call	#__system___basic_open_string
093c4     01 00 00 FF 
093c8     0C 4E 05 F1 | 	add	fp, ##524
093cc     A7 0A 68 FC | 	wrlong	#5, fp
093d0     41 00 00 FF 
093d4     48 E4 05 F1 | 	add	objptr, ##33352
093d8     F2 1E 02 FB | 	rdlong	local01, objptr
093dc     41 00 00 FF 
093e0     48 E4 85 F1 | 	sub	objptr, ##33352
093e4     0C 4E 05 F1 | 	add	fp, #12
093e8     A7 1E 62 FC | 	wrlong	local01, fp
093ec     01 00 00 FF 
093f0     18 4E 85 F1 | 	sub	fp, ##536
093f4                 | ' '  put #9,1,fileheader,1
093f4                 | '   i=5
093f4                 | '   saveptr=programstart
093f4                 | '   do
093f4                 | LR__0792
093f4     01 00 00 FF 
093f8     1C 4E 05 F1 | 	add	fp, ##540
093fc     A7 12 02 F6 | 	mov	arg01, fp
09400     04 4E 85 F1 | 	sub	fp, #4
09404     A7 14 02 FB | 	rdlong	arg02, fp
09408     01 00 00 FF 
0940c     18 4E 85 F1 | 	sub	fp, ##536
09410     18 16 06 F6 | 	mov	arg03, #24
09414     0B 00 00 FF 
09418     C0 E4 05 F1 | 	add	objptr, ##5824
0941c     08 B0 B0 FD | 	call	#_psram_spin2_read1
09420     01 00 00 FF 
09424     34 4E 05 F1 | 	add	fp, ##564
09428     A7 12 02 F6 | 	mov	arg01, fp
0942c     10 4E 85 F1 | 	sub	fp, #16
09430     A7 14 02 FB | 	rdlong	arg02, fp
09434     04 4E 05 F1 | 	add	fp, #4
09438     A7 16 02 FB | 	rdlong	arg03, fp
0943c     01 00 00 FF 
09440     28 4E 85 F1 | 	sub	fp, ##552
09444     E0 AF B0 FD | 	call	#_psram_spin2_read1
09448     0B 00 00 FF 
0944c     C0 E4 85 F1 | 	sub	objptr, ##5824
09450     22 01 00 FF 
09454     90 1E 06 F6 | 	mov	local01, ##@LR__4310
09458     01 00 00 FF 
0945c     B4 4E 05 F1 | 	add	fp, ##692
09460     A7 1E 62 FC | 	wrlong	local01, fp
09464                 | '     psram.read1(varptr(header(0)),saveptr,24)
09464                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
09464                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
09464     A8 4E 85 F1 | 	sub	fp, #168
09468     A7 02 68 FC | 	wrlong	#1, fp
0946c     1C 4E 05 F1 | 	add	fp, #28
09470     A7 20 02 FB | 	rdlong	local02, fp
09474     01 00 00 FF 
09478     28 4E 85 F1 | 	sub	fp, ##552
0947c     01 20 06 F1 | 	add	local02, #1
09480                 | LR__0793
09480     01 00 00 FF 
09484     0C 4E 05 F1 | 	add	fp, ##524
09488     A7 1E 02 FB | 	rdlong	local01, fp
0948c     01 00 00 FF 
09490     0C 4E 85 F1 | 	sub	fp, ##524
09494     10 1F 52 F2 | 	cmps	local01, local02 wc
09498     64 00 90 3D |  if_ae	jmp	#LR__0794
0949c     01 00 00 FF 
094a0     B4 4E 05 F1 | 	add	fp, ##692
094a4     A7 1E 02 FB | 	rdlong	local01, fp
094a8     A8 4E 85 F1 | 	sub	fp, #168
094ac     A7 16 02 FB | 	rdlong	arg03, fp
094b0     01 16 86 F1 | 	sub	arg03, #1
094b4     28 4E 05 F1 | 	add	fp, #40
094b8     A7 16 02 F1 | 	add	arg03, fp
094bc     0B 13 C2 FA | 	rdbyte	arg01, arg03
094c0     01 00 00 FF 
094c4     34 4E 85 F1 | 	sub	fp, ##564
094c8     1C DC B0 FD | 	call	#__system__Chr_S
094cc     FD 14 02 F6 | 	mov	arg02, result1
094d0     0F 13 02 F6 | 	mov	arg01, local01
094d4     98 BA B0 FD | 	call	#__system___string_concat
094d8     01 00 00 FF 
094dc     B4 4E 05 F1 | 	add	fp, ##692
094e0     A7 FA 61 FC | 	wrlong	result1, fp
094e4     A8 4E 85 F1 | 	sub	fp, #168
094e8     A7 1E 02 FB | 	rdlong	local01, fp
094ec     01 1E 06 F1 | 	add	local01, #1
094f0     A7 1E 62 FC | 	wrlong	local01, fp
094f4     01 00 00 FF 
094f8     0C 4E 85 F1 | 	sub	fp, ##524
094fc     80 FF 9F FD | 	jmp	#LR__0793
09500                 | LR__0794
09500                 | '  '   put #9,i,header(3),1 : i+=4
09500                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
09500                 | '      print #9, saveline$
09500     09 12 06 F6 | 	mov	arg01, #9
09504     C0 0F B1 FD | 	call	#__system___getiolock_0350
09508     FD 12 02 F6 | 	mov	arg01, result1
0950c     04 BA B0 FD | 	call	#__system___lockmem
09510     01 00 00 FF 
09514     B4 4E 05 F1 | 	add	fp, ##692
09518     A7 14 02 FB | 	rdlong	arg02, fp
0951c     01 00 00 FF 
09520     B4 4E 85 F1 | 	sub	fp, ##692
09524     09 12 06 F6 | 	mov	arg01, #9
09528     00 16 06 F6 | 	mov	arg03, #0
0952c     D8 C6 B0 FD | 	call	#__system___basic_print_string
09530     09 12 06 F6 | 	mov	arg01, #9
09534     0A 14 06 F6 | 	mov	arg02, #10
09538     00 16 06 F6 | 	mov	arg03, #0
0953c     70 C6 B0 FD | 	call	#__system___basic_print_char
09540     09 12 06 F6 | 	mov	arg01, #9
09544     80 0F B1 FD | 	call	#__system___getiolock_0350
09548     FD 00 68 FC | 	wrlong	#0, result1
0954c     01 00 00 FF 
09550     30 4E 05 F1 | 	add	fp, ##560
09554     A7 1E 02 FB | 	rdlong	local01, fp
09558     18 4E 85 F1 | 	sub	fp, #24
0955c     A7 1E 62 FC | 	wrlong	local01, fp
09560     18 4E 05 F1 | 	add	fp, #24
09564     A7 1E 02 FB | 	rdlong	local01, fp
09568     01 00 00 FF 
0956c     30 4E 85 F1 | 	sub	fp, ##560
09570     FF FF 3F FF 
09574     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09578     78 FE 9F 5D |  if_ne	jmp	#LR__0792
0957c                 | '   close #9  
0957c     09 12 06 F6 | 	mov	arg01, #9
09580     74 05 B1 FD | 	call	#__system__close
09584                 | LR__0795
09584                 | LR__0796
09584     A7 F0 03 F6 | 	mov	ptra, fp
09588     B2 00 A0 FD | 	call	#popregs_
0958c                 | _do_save_ret
0958c     2D 00 64 FD | 	ret
09590                 | 
09590                 | ' 
09590                 | ' '----------------- Load the program
09590                 | ' 'lo todo: errors while loading
09590                 | ' sub do_load
09590                 | _do_load
09590     01 4A 05 F6 | 	mov	COUNT_, #1
09594     A8 00 A0 FD | 	call	#pushregs_
09598     A4 F0 07 F1 | 	add	ptra, #164
0959c     A0 4E 05 F1 | 	add	fp, #160
095a0     A7 12 02 F6 | 	mov	arg01, fp
095a4     80 4E 85 F1 | 	sub	fp, #128
095a8     A7 14 02 F6 | 	mov	arg02, fp
095ac     20 4E 85 F1 | 	sub	fp, #32
095b0     09 15 62 FC | 	wrlong	arg02, arg01
095b4     DC F1 BF FD | 	call	#_pop
095b8     FF 1A 02 F6 | 	mov	arg05, result3
095bc     A7 FA 61 FC | 	wrlong	result1, fp
095c0     04 4E 05 F1 | 	add	fp, #4
095c4     A7 FC 61 FC | 	wrlong	result2, fp
095c8     04 4E 05 F1 | 	add	fp, #4
095cc     A7 1A 62 FC | 	wrlong	arg05, fp
095d0                 | ' 
095d0                 | ' lpoke varptr(line2$),varptr(line2)
095d0                 | ' t1=pop() 
095d0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
095d0                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
095d0     08 4E 85 F1 | 	sub	fp, #8
095d4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
095d8     18 00 90 5D |  if_ne	jmp	#LR__0800
095dc     A7 12 02 FB | 	rdlong	arg01, fp
095e0     A4 0E B0 FD | 	call	#_do_convertstring
095e4     A7 FA 61 FC | 	wrlong	result1, fp
095e8     08 4E 05 F1 | 	add	fp, #8
095ec     A7 3E 68 FC | 	wrlong	#31, fp
095f0     08 4E 85 F1 | 	sub	fp, #8
095f4                 | LR__0800
095f4                 | ' if t1.result_type=result_string then
095f4     08 4E 05 F1 | 	add	fp, #8
095f8     A7 1E 02 FB | 	rdlong	local01, fp
095fc     08 4E 85 F1 | 	sub	fp, #8
09600     1F 1E 0E F2 | 	cmp	local01, #31 wz
09604     40 03 90 5D |  if_ne	jmp	#LR__0807
09608     18 09 B0 FD | 	call	#_do_new
0960c                 | '   do_new
0960c                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
0960c     A7 12 02 FB | 	rdlong	arg01, fp
09610     22 01 00 FF 
09614     91 14 06 F6 | 	mov	arg02, ##@LR__4311
09618     20 B9 B0 FD | 	call	#__system___string_cmp
0961c     00 FA 0D F2 | 	cmp	result1, #0 wz
09620     22 01 00 AF 
09624     92 1E 06 A6 |  if_e	mov	local01, ##@LR__4312
09628     A7 1E 62 AC |  if_e	wrlong	local01, fp
0962c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0962c     09 12 06 F6 | 	mov	arg01, #9
09630     C4 04 B1 FD | 	call	#__system__close
09634     09 1E 06 F6 | 	mov	local01, #9
09638     49 00 00 FF 
0963c     58 E4 05 F1 | 	add	objptr, ##37464
09640     F2 12 02 FB | 	rdlong	arg01, objptr
09644     49 00 00 FF 
09648     58 E4 85 F1 | 	sub	objptr, ##37464
0964c     22 01 00 FF 
09650     9D 14 06 F6 | 	mov	arg02, ##@LR__4313
09654     18 B9 B0 FD | 	call	#__system___string_concat
09658     FD 12 02 F6 | 	mov	arg01, result1
0965c     A7 14 02 FB | 	rdlong	arg02, fp
09660     0C B9 B0 FD | 	call	#__system___string_concat
09664     FD 14 02 F6 | 	mov	arg02, result1
09668     0F 13 02 F6 | 	mov	arg01, local01
0966c     00 16 06 F6 | 	mov	arg03, #0
09670     A4 C4 B0 FD | 	call	#__system___basic_open_string
09674     20 E8 05 F1 | 	add	ptr___system__dat__, #32
09678     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0967c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
09680     10 4E 05 F1 | 	add	fp, #16
09684     A7 FA 61 FC | 	wrlong	result1, fp
09688                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
09688     10 4E 85 F1 | 	sub	fp, #16
0968c     9C 00 90 AD |  if_e	jmp	#LR__0801
09690     00 12 06 F6 | 	mov	arg01, #0
09694     30 0E B1 FD | 	call	#__system___getiolock_0350
09698     FD 12 02 F6 | 	mov	arg01, result1
0969c     74 B8 B0 FD | 	call	#__system___lockmem
096a0     22 01 00 FF 
096a4     9F 14 06 F6 | 	mov	arg02, ##@LR__4314
096a8     00 12 06 F6 | 	mov	arg01, #0
096ac     00 16 06 F6 | 	mov	arg03, #0
096b0     54 C5 B0 FD | 	call	#__system___basic_print_string
096b4     10 4E 05 F1 | 	add	fp, #16
096b8     A7 14 02 FB | 	rdlong	arg02, fp
096bc     10 4E 85 F1 | 	sub	fp, #16
096c0     00 12 06 F6 | 	mov	arg01, #0
096c4     00 16 06 F6 | 	mov	arg03, #0
096c8     0A 18 06 F6 | 	mov	arg04, #10
096cc     7C C5 B0 FD | 	call	#__system___basic_print_integer
096d0     22 01 00 FF 
096d4     AD 14 06 F6 | 	mov	arg02, ##@LR__4315
096d8     00 12 06 F6 | 	mov	arg01, #0
096dc     00 16 06 F6 | 	mov	arg03, #0
096e0     24 C5 B0 FD | 	call	#__system___basic_print_string
096e4     10 4E 05 F1 | 	add	fp, #16
096e8     A7 12 02 FB | 	rdlong	arg01, fp
096ec     10 4E 85 F1 | 	sub	fp, #16
096f0     20 DE B0 FD | 	call	#__system___strerror
096f4     FD 14 02 F6 | 	mov	arg02, result1
096f8     00 12 06 F6 | 	mov	arg01, #0
096fc     00 16 06 F6 | 	mov	arg03, #0
09700     04 C5 B0 FD | 	call	#__system___basic_print_string
09704     00 12 06 F6 | 	mov	arg01, #0
09708     0A 14 06 F6 | 	mov	arg02, #10
0970c     00 16 06 F6 | 	mov	arg03, #0
09710     9C C4 B0 FD | 	call	#__system___basic_print_char
09714     00 12 06 F6 | 	mov	arg01, #0
09718     AC 0D B1 FD | 	call	#__system___getiolock_0350
0971c     FD 00 68 FC | 	wrlong	#0, result1
09720     09 12 06 F6 | 	mov	arg01, #9
09724     D0 03 B1 FD | 	call	#__system__close
09728     24 02 90 FD | 	jmp	#LR__0809
0972c                 | LR__0801
0972c     0C 4E 05 F1 | 	add	fp, #12
09730     A7 0A 68 FC | 	wrlong	#5, fp
09734                 | '   i=5
09734                 | '   get #9,1,header,1
09734     0C 4E 05 F1 | 	add	fp, #12
09738     A7 16 02 F6 | 	mov	arg03, fp
0973c     18 4E 85 F1 | 	sub	fp, #24
09740     09 12 06 F6 | 	mov	arg01, #9
09744     01 14 06 F6 | 	mov	arg02, #1
09748     01 18 06 F6 | 	mov	arg04, #1
0974c     04 1A 06 F6 | 	mov	arg05, #4
09750     C4 C5 B0 FD | 	call	#__system___basic_get
09754                 | '   
09754                 | '   if header<>$0D616272 then 
09754     18 4E 05 F1 | 	add	fp, #24
09758     A7 1E 02 FB | 	rdlong	local01, fp
0975c     18 4E 85 F1 | 	sub	fp, #24
09760     B1 B0 06 FF 
09764     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09768     F0 00 90 AD |  if_e	jmp	#LR__0804
0976c                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0976c     09 12 06 F6 | 	mov	arg01, #9
09770     84 03 B1 FD | 	call	#__system__close
09774     09 1E 06 F6 | 	mov	local01, #9
09778     49 00 00 FF 
0977c     58 E4 05 F1 | 	add	objptr, ##37464
09780     F2 12 02 FB | 	rdlong	arg01, objptr
09784     49 00 00 FF 
09788     58 E4 85 F1 | 	sub	objptr, ##37464
0978c     22 01 00 FF 
09790     B0 14 06 F6 | 	mov	arg02, ##@LR__4316
09794     D8 B7 B0 FD | 	call	#__system___string_concat
09798     FD 12 02 F6 | 	mov	arg01, result1
0979c     A7 14 02 FB | 	rdlong	arg02, fp
097a0     CC B7 B0 FD | 	call	#__system___string_concat
097a4     FD 14 02 F6 | 	mov	arg02, result1
097a8     0F 13 02 F6 | 	mov	arg01, local01
097ac     00 16 06 F6 | 	mov	arg03, #0
097b0     64 C3 B0 FD | 	call	#__system___basic_open_string
097b4                 | '     do
097b4                 | LR__0802
097b4     09 12 06 F6 | 	mov	arg01, #9
097b8     64 B9 B0 FD | 	call	#__system___basic_read_line
097bc     2D 00 00 FF 
097c0     E0 E5 05 F1 | 	add	objptr, ##23520
097c4     F2 FA 61 FC | 	wrlong	result1, objptr
097c8                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
097c8     2D 00 00 FF 
097cc     E0 E5 85 F1 | 	sub	objptr, ##23520
097d0     FD 12 02 F6 | 	mov	arg01, result1
097d4     01 14 06 F6 | 	mov	arg02, #1
097d8     48 D7 B0 FD | 	call	#__system__Left_S
097dc     FD 12 02 F6 | 	mov	arg01, result1
097e0     22 01 00 FF 
097e4     B2 14 06 F6 | 	mov	arg02, ##@LR__4317
097e8     50 B7 B0 FD | 	call	#__system___string_cmp
097ec     00 FA 55 F2 | 	cmps	result1, #0 wc
097f0     34 00 90 CD |  if_b	jmp	#LR__0803
097f4     2D 00 00 FF 
097f8     E0 E5 05 F1 | 	add	objptr, ##23520
097fc     F2 12 02 FB | 	rdlong	arg01, objptr
09800     2D 00 00 FF 
09804     E0 E5 85 F1 | 	sub	objptr, ##23520
09808     01 14 06 F6 | 	mov	arg02, #1
0980c     14 D7 B0 FD | 	call	#__system__Left_S
09810     FD 12 02 F6 | 	mov	arg01, result1
09814     22 01 00 FF 
09818     B4 14 06 F6 | 	mov	arg02, ##@LR__4318
0981c     1C B7 B0 FD | 	call	#__system___string_cmp
09820     01 FA 55 F2 | 	cmps	result1, #1 wc
09824     F4 71 BF CD |  if_b	call	#_interpret
09828                 | LR__0803
09828     2D 00 00 FF 
0982c     E0 E5 05 F1 | 	add	objptr, ##23520
09830     F2 12 02 FB | 	rdlong	arg01, objptr
09834     2D 00 00 FF 
09838     E0 E5 85 F1 | 	sub	objptr, ##23520
0983c     22 01 00 FF 
09840     B6 14 06 F6 | 	mov	arg02, ##@LR__4319
09844     F4 B6 B0 FD | 	call	#__system___string_cmp
09848     00 FA 0D F2 | 	cmp	result1, #0 wz
0984c     64 FF 9F 5D |  if_ne	jmp	#LR__0802
09850                 | '     close #9
09850     09 12 06 F6 | 	mov	arg01, #9
09854     A0 02 B1 FD | 	call	#__system__close
09858     F4 00 90 FD | 	jmp	#LR__0808
0985c                 | LR__0804
0985c                 | '   'printerror(26) : close #9 : return
0985c                 | '     do
0985c                 | LR__0805
0985c                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0985c     0C 4E 05 F1 | 	add	fp, #12
09860     A7 14 02 FB | 	rdlong	arg02, fp
09864     10 4E 05 F1 | 	add	fp, #16
09868     A7 16 02 F6 | 	mov	arg03, fp
0986c     1C 4E 85 F1 | 	sub	fp, #28
09870     09 12 06 F6 | 	mov	arg01, #9
09874     01 18 06 F6 | 	mov	arg04, #1
09878     04 1A 06 F6 | 	mov	arg05, #4
0987c     98 C4 B0 FD | 	call	#__system___basic_get
09880     14 4E 05 F1 | 	add	fp, #20
09884     A7 FA 61 FC | 	wrlong	result1, fp
09888     08 4E 85 F1 | 	sub	fp, #8
0988c     A7 1E 02 FB | 	rdlong	local01, fp
09890     04 1E 06 F1 | 	add	local01, #4
09894     A7 1E 62 FC | 	wrlong	local01, fp
09898     10 4E 05 F1 | 	add	fp, #16
0989c     A7 1E 02 FB | 	rdlong	local01, fp
098a0     04 4E 05 F1 | 	add	fp, #4
098a4     A7 1E 02 F1 | 	add	local01, fp
098a8     0F 01 48 FC | 	wrbyte	#0, local01
098ac                 | '       if amount=1 then  
098ac     0C 4E 85 F1 | 	sub	fp, #12
098b0     A7 1E 02 FB | 	rdlong	local01, fp
098b4     14 4E 85 F1 | 	sub	fp, #20
098b8     01 1E 0E F2 | 	cmp	local01, #1 wz
098bc     68 00 90 5D |  if_ne	jmp	#LR__0806
098c0                 | '         get #9,i,line2(0),linelength : i+=linelength
098c0     0C 4E 05 F1 | 	add	fp, #12
098c4     A7 14 02 FB | 	rdlong	arg02, fp
098c8     14 4E 05 F1 | 	add	fp, #20
098cc     A7 16 02 F6 | 	mov	arg03, fp
098d0     04 4E 85 F1 | 	sub	fp, #4
098d4     A7 18 02 FB | 	rdlong	arg04, fp
098d8     1C 4E 85 F1 | 	sub	fp, #28
098dc     09 12 06 F6 | 	mov	arg01, #9
098e0     01 1A 06 F6 | 	mov	arg05, #1
098e4     30 C4 B0 FD | 	call	#__system___basic_get
098e8     0C 4E 05 F1 | 	add	fp, #12
098ec     A7 1E 02 FB | 	rdlong	local01, fp
098f0     10 4E 05 F1 | 	add	fp, #16
098f4     A7 1A 02 FB | 	rdlong	arg05, fp
098f8     0D 1F 02 F1 | 	add	local01, arg05
098fc     10 4E 85 F1 | 	sub	fp, #16
09900     A7 1E 62 FC | 	wrlong	local01, fp
09904     94 4E 05 F1 | 	add	fp, #148
09908     A7 1E 02 FB | 	rdlong	local01, fp
0990c     A0 4E 85 F1 | 	sub	fp, #160
09910     2D 00 00 FF 
09914     E0 E5 05 F1 | 	add	objptr, ##23520
09918     F2 1E 62 FC | 	wrlong	local01, objptr
0991c     2D 00 00 FF 
09920     E0 E5 85 F1 | 	sub	objptr, ##23520
09924     F4 70 BF FD | 	call	#_interpret
09928                 | LR__0806
09928     14 4E 05 F1 | 	add	fp, #20
0992c     A7 1E 02 FB | 	rdlong	local01, fp
09930     14 4E 85 F1 | 	sub	fp, #20
09934     01 1E 56 F2 | 	cmps	local01, #1 wc
09938     20 FF 9F 3D |  if_ae	jmp	#LR__0805
0993c                 | '     close #9 
0993c     09 12 06 F6 | 	mov	arg01, #9
09940     B4 01 B1 FD | 	call	#__system__close
09944     08 00 90 FD | 	jmp	#LR__0808
09948                 | LR__0807
09948     1E 12 06 F6 | 	mov	arg01, #30
0994c     D0 80 B0 FD | 	call	#_printerror
09950                 | LR__0808
09950                 | LR__0809
09950     A7 F0 03 F6 | 	mov	ptra, fp
09954     B2 00 A0 FD | 	call	#popregs_
09958                 | _do_load_ret
09958     2D 00 64 FD | 	ret
0995c                 | 
0995c                 | ' 
0995c                 | ' '----------------- Run the program 
0995c                 | ' 
0995c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0995c                 | ' 
0995c                 | ' sub do_run
0995c                 | _do_run
0995c     01 4A 05 F6 | 	mov	COUNT_, #1
09960     A8 00 A0 FD | 	call	#pushregs_
09964     41 00 00 FF 
09968     48 E4 05 F1 | 	add	objptr, ##33352
0996c     F2 1C 02 FB | 	rdlong	arg06, objptr
09970     0F 00 00 FF 
09974     2C E5 05 F1 | 	add	objptr, ##7980
09978     F2 1C 62 FC | 	wrlong	arg06, objptr
0997c     04 E4 05 F1 | 	add	objptr, #4
09980     F2 00 68 FC | 	wrlong	#0, objptr
09984     04 E4 05 F1 | 	add	objptr, #4
09988     FF FF FF FF 
0998c     F2 FE 6B FC | 	wrlong	##-1, objptr
09990                 | ' if inrun>0 then 
09990     04 E4 05 F1 | 	add	objptr, #4
09994     F2 1C 02 FB | 	rdlong	arg06, objptr
09998     50 00 00 FF 
0999c     80 E5 85 F1 | 	sub	objptr, ##41344
099a0     01 1C 16 F2 | 	cmp	arg06, #1 wc
099a4     30 00 90 CD |  if_b	jmp	#LR__0810
099a8     50 00 00 FF 
099ac     84 E5 05 F1 | 	add	objptr, ##41348
099b0     F2 12 02 F6 | 	mov	arg01, objptr
099b4     10 E4 85 F1 | 	sub	objptr, #16
099b8     F2 14 02 FB | 	rdlong	arg02, objptr
099bc     18 16 06 F6 | 	mov	arg03, #24
099c0     45 00 00 FF 
099c4     B4 E4 85 F1 | 	sub	objptr, ##35508
099c8     5C AA B0 FD | 	call	#_psram_spin2_read1
099cc     0B 00 00 FF 
099d0     C0 E4 85 F1 | 	sub	objptr, ##5824
099d4                 | '   psram.read1(varptr(runheader),runptr,24)  
099d4                 | '   return
099d4     A4 02 90 FD | 	jmp	#LR__0816
099d8                 | LR__0810
099d8     50 00 00 FF 
099dc     80 E5 05 F1 | 	add	objptr, ##41344
099e0     F2 02 68 FC | 	wrlong	#1, objptr
099e4     04 E4 05 F1 | 	add	objptr, #4
099e8     F2 12 02 F6 | 	mov	arg01, objptr
099ec     10 E4 85 F1 | 	sub	objptr, #16
099f0     F2 14 02 FB | 	rdlong	arg02, objptr
099f4     18 16 06 F6 | 	mov	arg03, #24
099f8     45 00 00 FF 
099fc     B4 E4 85 F1 | 	sub	objptr, ##35508
09a00     24 AA B0 FD | 	call	#_psram_spin2_read1
09a04                 | ' inrun=1
09a04                 | ' psram.read1(varptr(runheader),runptr,24) 
09a04                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09a04     45 00 00 FF 
09a08     C4 E4 05 F1 | 	add	objptr, ##35524
09a0c     F2 1E 02 FB | 	rdlong	local01, objptr
09a10     50 00 00 FF 
09a14     84 E5 85 F1 | 	sub	objptr, ##41348
09a18     FF FF 7F FF 
09a1c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09a20     50 00 00 AF 
09a24     80 E5 05 A1 |  if_e	add	objptr, ##41344
09a28     F2 00 68 AC |  if_e	wrlong	#0, objptr
09a2c     50 00 00 AF 
09a30     80 E5 85 A1 |  if_e	sub	objptr, ##41344
09a34     44 02 90 AD |  if_e	jmp	#LR__0816
09a38                 | ' do 
09a38                 | LR__0811
09a38                 | '   if runptr<>oldrunptr then
09a38     50 00 00 FF 
09a3c     74 E5 05 F1 | 	add	objptr, ##41332
09a40     F2 1E 02 FB | 	rdlong	local01, objptr
09a44     08 E4 05 F1 | 	add	objptr, #8
09a48     F2 1C 02 FB | 	rdlong	arg06, objptr
09a4c     50 00 00 FF 
09a50     7C E5 85 F1 | 	sub	objptr, ##41340
09a54     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09a58     CC 00 90 AD |  if_e	jmp	#LR__0812
09a5c     50 00 00 FF 
09a60     84 E5 05 F1 | 	add	objptr, ##41348
09a64     F2 12 02 F6 | 	mov	arg01, objptr
09a68     10 E4 85 F1 | 	sub	objptr, #16
09a6c     F2 14 02 FB | 	rdlong	arg02, objptr
09a70     18 16 06 F6 | 	mov	arg03, #24
09a74     45 00 00 FF 
09a78     B4 E4 85 F1 | 	sub	objptr, ##35508
09a7c     A8 A9 B0 FD | 	call	#_psram_spin2_read1
09a80     32 00 00 FF 
09a84     80 E5 05 F1 | 	add	objptr, ##25984
09a88     F2 12 02 F6 | 	mov	arg01, objptr
09a8c     12 00 00 FF 
09a90     34 E5 05 F1 | 	add	objptr, ##9524
09a94     F2 14 02 FB | 	rdlong	arg02, objptr
09a98     14 00 00 FF 
09a9c     4C E5 85 F1 | 	sub	objptr, ##10572
09aa0     F2 1E 02 FB | 	rdlong	local01, objptr
09aa4     01 1E 66 F0 | 	shl	local01, #1
09aa8     0F 15 02 F1 | 	add	arg02, local01
09aac     14 00 00 FF 
09ab0     64 E5 05 F1 | 	add	objptr, ##10596
09ab4     F2 16 02 FB | 	rdlong	arg03, objptr
09ab8     18 E4 85 F1 | 	sub	objptr, #24
09abc     F2 1E 02 FB | 	rdlong	local01, objptr
09ac0     0F 17 82 F1 | 	sub	arg03, local01
09ac4     45 00 00 FF 
09ac8     B4 E4 85 F1 | 	sub	objptr, ##35508
09acc     58 A9 B0 FD | 	call	#_psram_spin2_read1
09ad0     45 00 00 FF 
09ad4     CC E4 05 F1 | 	add	objptr, ##35532
09ad8     F2 1E 02 FB | 	rdlong	local01, objptr
09adc     18 E4 85 F1 | 	sub	objptr, #24
09ae0     F2 1C 02 FB | 	rdlong	arg06, objptr
09ae4     0E 1F 82 F1 | 	sub	local01, arg06
09ae8     14 00 00 FF 
09aec     4C E5 85 F1 | 	sub	objptr, ##10572
09af0     F2 1C 02 FB | 	rdlong	arg06, objptr
09af4     0E 1F 12 FD | 	qdiv	local01, arg06
09af8     05 00 00 FF 
09afc     18 E4 05 F1 | 	add	objptr, ##2584
09b00     18 1E 62 FD | 	getqx	local01
09b04     03 1E 86 F1 | 	sub	local01, #3
09b08     F2 1E 62 FC | 	wrlong	local01, objptr
09b0c     0F 00 00 FF 
09b10     34 E5 05 F1 | 	add	objptr, ##7988
09b14     F2 1E 02 FB | 	rdlong	local01, objptr
09b18     08 E4 05 F1 | 	add	objptr, #8
09b1c     F2 1E 62 FC | 	wrlong	local01, objptr
09b20     50 00 00 FF 
09b24     7C E5 85 F1 | 	sub	objptr, ##41340
09b28                 | LR__0812
09b28     50 00 00 FF 
09b2c     98 E5 05 F1 | 	add	objptr, ##41368
09b30     F2 1E 02 FB | 	rdlong	local01, objptr
09b34     24 E4 85 F1 | 	sub	objptr, #36
09b38     F2 1E 62 FC | 	wrlong	local01, objptr
09b3c     04 E4 05 F1 | 	add	objptr, #4
09b40     F2 12 02 FB | 	rdlong	arg01, objptr
09b44     50 00 00 FF 
09b48     78 E5 85 F1 | 	sub	objptr, ##41336
09b4c     40 EB BF FD | 	call	#_execute_line
09b50     50 00 00 FF 
09b54     78 E5 05 F1 | 	add	objptr, ##41336
09b58     F2 FA 61 FC | 	wrlong	result1, objptr
09b5c     04 E4 85 F1 | 	sub	objptr, #4
09b60     F2 1E 02 FB | 	rdlong	local01, objptr
09b64     50 00 00 FF 
09b68     74 E5 85 F1 | 	sub	objptr, ##41332
09b6c     FF FF 3F FF 
09b70     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09b74     0C 00 90 AD |  if_e	jmp	#LR__0813
09b78     3C AC B0 FD | 	call	#_usbnew_spin2_get_key
09b7c     06 FB 0D F2 | 	cmp	result1, #262 wz
09b80     B4 FE 9F 5D |  if_ne	jmp	#LR__0811
09b84                 | LR__0813
09b84                 | ' if runheader(5)<>$7FFF_FFFF then 
09b84     50 00 00 FF 
09b88     98 E5 05 F1 | 	add	objptr, ##41368
09b8c     F2 1E 02 FB | 	rdlong	local01, objptr
09b90     50 00 00 FF 
09b94     98 E5 85 F1 | 	sub	objptr, ##41368
09b98     FF FF 3F FF 
09b9c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09ba0     C4 00 90 AD |  if_e	jmp	#LR__0815
09ba4                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684)  
09ba4     50 00 00 FF 
09ba8     A4 E5 05 F1 | 	add	objptr, ##41380
09bac     F2 1E 02 FB | 	rdlong	local01, objptr
09bb0     50 00 00 FF 
09bb4     A4 E5 85 F1 | 	sub	objptr, ##41380
09bb8     01 1E 0E F2 | 	cmp	local01, #1 wz
09bbc     44 00 90 5D |  if_ne	jmp	#LR__0814
09bc0     01 00 00 FF 
09bc4     00 EA 05 F1 | 	add	ptr__dat__, ##512
09bc8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
09bcc     01 00 00 FF 
09bd0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
09bd4     07 12 06 F6 | 	mov	arg01, #7
09bd8     56 00 00 FF 
09bdc     44 16 06 F6 | 	mov	arg03, ##44100
09be0     0E 18 C6 F9 | 	decod	arg04, #14
09be4     03 00 00 FF 
09be8     94 1A 06 F6 | 	mov	arg05, ##1684
09bec     01 1C 66 F6 | 	neg	arg06, #1
09bf0     0B 00 00 FF 
09bf4     C0 E4 05 F1 | 	add	objptr, ##5824
09bf8     E4 AE B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09bfc     0B 00 00 FF 
09c00     C0 E4 85 F1 | 	sub	objptr, ##5824
09c04                 | LR__0814
09c04                 | '   print "Stopped at line ";runheader(0)
09c04     00 12 06 F6 | 	mov	arg01, #0
09c08     BC 08 B1 FD | 	call	#__system___getiolock_0350
09c0c     FD 12 02 F6 | 	mov	arg01, result1
09c10     00 B3 B0 FD | 	call	#__system___lockmem
09c14     22 01 00 FF 
09c18     B7 14 06 F6 | 	mov	arg02, ##@LR__4320
09c1c     00 12 06 F6 | 	mov	arg01, #0
09c20     00 16 06 F6 | 	mov	arg03, #0
09c24     E0 BF B0 FD | 	call	#__system___basic_print_string
09c28     50 00 00 FF 
09c2c     84 E5 05 F1 | 	add	objptr, ##41348
09c30     F2 14 02 FB | 	rdlong	arg02, objptr
09c34     50 00 00 FF 
09c38     84 E5 85 F1 | 	sub	objptr, ##41348
09c3c     00 12 06 F6 | 	mov	arg01, #0
09c40     00 16 06 F6 | 	mov	arg03, #0
09c44     0A 18 06 F6 | 	mov	arg04, #10
09c48     40 C0 B0 FD | 	call	#__system___basic_print_unsigned
09c4c     00 12 06 F6 | 	mov	arg01, #0
09c50     0A 14 06 F6 | 	mov	arg02, #10
09c54     00 16 06 F6 | 	mov	arg03, #0
09c58     54 BF B0 FD | 	call	#__system___basic_print_char
09c5c     00 12 06 F6 | 	mov	arg01, #0
09c60     64 08 B1 FD | 	call	#__system___getiolock_0350
09c64     FD 00 68 FC | 	wrlong	#0, result1
09c68                 | LR__0815
09c68     50 00 00 FF 
09c6c     80 E5 05 F1 | 	add	objptr, ##41344
09c70     F2 00 68 FC | 	wrlong	#0, objptr
09c74     50 00 00 FF 
09c78     80 E5 85 F1 | 	sub	objptr, ##41344
09c7c                 | LR__0816
09c7c     A7 F0 03 F6 | 	mov	ptra, fp
09c80     B2 00 A0 FD | 	call	#popregs_
09c84                 | _do_run_ret
09c84     2D 00 64 FD | 	ret
09c88                 | 
09c88                 | ' 
09c88                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09c88                 | ' 
09c88                 | ' sub do_list
09c88                 | _do_list
09c88     02 4A 05 F6 | 	mov	COUNT_, #2
09c8c     A8 00 A0 FD | 	call	#pushregs_
09c90     B8 F0 07 F1 | 	add	ptra, #184
09c94     04 4E 05 F1 | 	add	fp, #4
09c98     A7 00 68 FC | 	wrlong	#0, fp
09c9c     04 4E 05 F1 | 	add	fp, #4
09ca0     FF FF BF FF 
09ca4     A7 FE 6B FC | 	wrlong	##2147483647, fp
09ca8     08 4E 85 F1 | 	sub	fp, #8
09cac     41 00 00 FF 
09cb0     44 E4 05 F1 | 	add	objptr, ##33348
09cb4     F2 1E 02 FB | 	rdlong	local01, objptr
09cb8     0F 17 02 F6 | 	mov	arg03, local01
09cbc     01 16 66 F0 | 	shl	arg03, #1
09cc0     0F 17 02 F1 | 	add	arg03, local01
09cc4     02 16 66 F0 | 	shl	arg03, #2
09cc8     03 00 00 FF 
09ccc     04 E4 85 F1 | 	sub	objptr, ##1540
09cd0     F2 16 02 F1 | 	add	arg03, objptr
09cd4     0B 17 02 FB | 	rdlong	arg03, arg03
09cd8     A7 16 62 FC | 	wrlong	arg03, fp
09cdc                 | ' 
09cdc                 | ' startline=0 : endline=$7FFFFFFF
09cdc                 | ' numpar=compiledline(lineptr_e).result.uresult
09cdc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
09cdc     01 16 0E F2 | 	cmp	arg03, #1 wz
09ce0     3E 00 00 FF 
09ce4     40 E4 85 F1 | 	sub	objptr, ##31808
09ce8     3C 00 90 5D |  if_ne	jmp	#LR__0820
09cec     A4 EA BF FD | 	call	#_pop
09cf0     FF 1E 02 F6 | 	mov	local01, result3
09cf4     0C 4E 05 F1 | 	add	fp, #12
09cf8     A7 FA 61 FC | 	wrlong	result1, fp
09cfc     04 4E 05 F1 | 	add	fp, #4
09d00     A7 FC 61 FC | 	wrlong	result2, fp
09d04     04 4E 05 F1 | 	add	fp, #4
09d08     A7 1E 62 FC | 	wrlong	local01, fp
09d0c     08 4E 85 F1 | 	sub	fp, #8
09d10     A7 12 02 F6 | 	mov	arg01, fp
09d14     0C 4E 85 F1 | 	sub	fp, #12
09d18     08 43 B0 FD | 	call	#_converttoint
09d1c     04 4E 05 F1 | 	add	fp, #4
09d20     A7 FA 61 FC | 	wrlong	result1, fp
09d24     04 4E 85 F1 | 	sub	fp, #4
09d28                 | LR__0820
09d28                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
09d28     A7 16 02 FB | 	rdlong	arg03, fp
09d2c     02 16 0E F2 | 	cmp	arg03, #2 wz
09d30     7C 00 90 5D |  if_ne	jmp	#LR__0821
09d34     5C EA BF FD | 	call	#_pop
09d38     FF 1E 02 F6 | 	mov	local01, result3
09d3c     0C 4E 05 F1 | 	add	fp, #12
09d40     A7 FA 61 FC | 	wrlong	result1, fp
09d44     04 4E 05 F1 | 	add	fp, #4
09d48     A7 FC 61 FC | 	wrlong	result2, fp
09d4c     04 4E 05 F1 | 	add	fp, #4
09d50     A7 1E 62 FC | 	wrlong	local01, fp
09d54     08 4E 85 F1 | 	sub	fp, #8
09d58     A7 12 02 F6 | 	mov	arg01, fp
09d5c     0C 4E 85 F1 | 	sub	fp, #12
09d60     C0 42 B0 FD | 	call	#_converttoint
09d64     FD 1E 02 F6 | 	mov	local01, result1
09d68     08 4E 05 F1 | 	add	fp, #8
09d6c     A7 1E 62 FC | 	wrlong	local01, fp
09d70     08 4E 85 F1 | 	sub	fp, #8
09d74     1C EA BF FD | 	call	#_pop
09d78     FF 1E 02 F6 | 	mov	local01, result3
09d7c     0C 4E 05 F1 | 	add	fp, #12
09d80     A7 FA 61 FC | 	wrlong	result1, fp
09d84     04 4E 05 F1 | 	add	fp, #4
09d88     A7 FC 61 FC | 	wrlong	result2, fp
09d8c     04 4E 05 F1 | 	add	fp, #4
09d90     A7 1E 62 FC | 	wrlong	local01, fp
09d94     08 4E 85 F1 | 	sub	fp, #8
09d98     A7 12 02 F6 | 	mov	arg01, fp
09d9c     0C 4E 85 F1 | 	sub	fp, #12
09da0     80 42 B0 FD | 	call	#_converttoint
09da4     04 4E 05 F1 | 	add	fp, #4
09da8     A7 FA 61 FC | 	wrlong	result1, fp
09dac     04 4E 85 F1 | 	sub	fp, #4
09db0                 | LR__0821
09db0                 | ' 
09db0                 | ' 
09db0                 | ' print
09db0     00 12 06 F6 | 	mov	arg01, #0
09db4     10 07 B1 FD | 	call	#__system___getiolock_0350
09db8     FD 12 02 F6 | 	mov	arg01, result1
09dbc     54 B1 B0 FD | 	call	#__system___lockmem
09dc0     00 12 06 F6 | 	mov	arg01, #0
09dc4     0A 14 06 F6 | 	mov	arg02, #10
09dc8     00 16 06 F6 | 	mov	arg03, #0
09dcc     E0 BD B0 FD | 	call	#__system___basic_print_char
09dd0     00 12 06 F6 | 	mov	arg01, #0
09dd4     F0 06 B1 FD | 	call	#__system___getiolock_0350
09dd8     FD 00 68 FC | 	wrlong	#0, result1
09ddc     41 00 00 FF 
09de0     48 E4 05 F1 | 	add	objptr, ##33352
09de4     F2 20 02 FB | 	rdlong	local02, objptr
09de8     11 00 00 FF 
09dec     54 E4 05 F1 | 	add	objptr, ##8788
09df0     F2 20 62 FC | 	wrlong	local02, objptr
09df4     52 00 00 FF 
09df8     9C E4 85 F1 | 	sub	objptr, ##42140
09dfc                 | ' do 
09dfc                 | LR__0822
09dfc     20 4E 05 F1 | 	add	fp, #32
09e00     A7 12 02 F6 | 	mov	arg01, fp
09e04     20 4E 85 F1 | 	sub	fp, #32
09e08     52 00 00 FF 
09e0c     9C E4 05 F1 | 	add	objptr, ##42140
09e10     F2 14 02 FB | 	rdlong	arg02, objptr
09e14     18 16 06 F6 | 	mov	arg03, #24
09e18     46 00 00 FF 
09e1c     DC E5 85 F1 | 	sub	objptr, ##36316
09e20     04 A6 B0 FD | 	call	#_psram_spin2_read1
09e24     0B 00 00 FF 
09e28     C0 E4 85 F1 | 	sub	objptr, ##5824
09e2c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
09e2c                 | '   if header(0)<> $FFFFFFFF then
09e2c     20 4E 05 F1 | 	add	fp, #32
09e30     A7 20 02 FB | 	rdlong	local02, fp
09e34     20 4E 85 F1 | 	sub	fp, #32
09e38     FF FF 7F FF 
09e3c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09e40     A8 00 90 AD |  if_e	jmp	#LR__0824
09e44     38 4E 05 F1 | 	add	fp, #56
09e48     3F 16 06 F6 | 	mov	arg03, #63
09e4c     28 16 62 FD | 	setq	arg03
09e50     A7 00 68 FC | 	wrlong	#0, fp
09e54     A7 12 02 F6 | 	mov	arg01, fp
09e58     10 4E 85 F1 | 	sub	fp, #16
09e5c     A7 14 02 FB | 	rdlong	arg02, fp
09e60     04 4E 05 F1 | 	add	fp, #4
09e64     A7 16 02 FB | 	rdlong	arg03, fp
09e68     2C 4E 85 F1 | 	sub	fp, #44
09e6c     0B 00 00 FF 
09e70     C0 E4 05 F1 | 	add	objptr, ##5824
09e74     B0 A5 B0 FD | 	call	#_psram_spin2_read1
09e78     0B 00 00 FF 
09e7c     C0 E4 85 F1 | 	sub	objptr, ##5824
09e80                 | '     longfill(linebuf,0,64)
09e80                 | '     psram.read1(varptr(linebuf),header(2),header(3))
09e80                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
09e80     20 4E 05 F1 | 	add	fp, #32
09e84     A7 20 02 FB | 	rdlong	local02, fp
09e88     1C 4E 85 F1 | 	sub	fp, #28
09e8c     A7 1E 02 FB | 	rdlong	local01, fp
09e90     04 4E 85 F1 | 	sub	fp, #4
09e94     0F 21 52 F2 | 	cmps	local02, local01 wc
09e98     30 00 90 CD |  if_b	jmp	#LR__0823
09e9c     20 4E 05 F1 | 	add	fp, #32
09ea0     A7 20 02 FB | 	rdlong	local02, fp
09ea4     18 4E 85 F1 | 	sub	fp, #24
09ea8     A7 16 02 FB | 	rdlong	arg03, fp
09eac     08 4E 85 F1 | 	sub	fp, #8
09eb0     0B 21 5A F2 | 	cmps	local02, arg03 wcz
09eb4     14 00 90 1D |  if_a	jmp	#LR__0823
09eb8     38 4E 05 F1 | 	add	fp, #56
09ebc     A7 12 02 F6 | 	mov	arg01, fp
09ec0     38 4E 85 F1 | 	sub	fp, #56
09ec4                 | ' 
09ec4                 | ' write(text)
09ec4     28 A0 B0 FD | 	call	#_hg010b_spin2_write
09ec8                 | ' crlf
09ec8     84 A1 B0 FD | 	call	#_hg010b_spin2_crlf
09ecc                 | LR__0823
09ecc     34 4E 05 F1 | 	add	fp, #52
09ed0     A7 20 02 FB | 	rdlong	local02, fp
09ed4     34 4E 85 F1 | 	sub	fp, #52
09ed8     52 00 00 FF 
09edc     9C E4 05 F1 | 	add	objptr, ##42140
09ee0     F2 20 62 FC | 	wrlong	local02, objptr
09ee4     52 00 00 FF 
09ee8     9C E4 85 F1 | 	sub	objptr, ##42140
09eec                 | LR__0824
09eec     34 4E 05 F1 | 	add	fp, #52
09ef0     A7 20 02 FB | 	rdlong	local02, fp
09ef4     34 4E 85 F1 | 	sub	fp, #52
09ef8     FF FF 3F FF 
09efc     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
09f00     20 4E 05 51 |  if_ne	add	fp, #32
09f04     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09f08     20 4E 85 51 |  if_ne	sub	fp, #32
09f0c     FF FF 7F 5F 
09f10     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09f14     E4 FE 9F 5D |  if_ne	jmp	#LR__0822
09f18     A7 F0 03 F6 | 	mov	ptra, fp
09f1c     B2 00 A0 FD | 	call	#popregs_
09f20                 | _do_list_ret
09f20     2D 00 64 FD | 	ret
09f24                 | 
09f24                 | ' 
09f24                 | ' '---------------- Clear the program
09f24                 | ' 
09f24                 | ' sub do_new
09f24                 | _do_new
09f24     03 4A 05 F6 | 	mov	COUNT_, #3
09f28     A8 00 A0 FD | 	call	#pushregs_
09f2c     00 12 06 F6 | 	mov	arg01, #0
09f30     01 14 66 F6 | 	neg	arg02, #1
09f34     01 16 06 F6 | 	mov	arg03, #1
09f38     00 18 06 F6 | 	mov	arg04, #0
09f3c     0B 00 00 FF 
09f40     C0 E4 05 F1 | 	add	objptr, ##5824
09f44                 | '     return fill(addr, pattern, count, listPtr, 4)
09f44     04 1A 06 F6 | 	mov	arg05, #4
09f48     14 A6 B0 FD | 	call	#_psram_spin2_fill
09f4c     20 00 00 FF 
09f50     0C E5 05 F1 | 	add	objptr, ##16652
09f54     F2 00 68 FC | 	wrlong	#0, objptr
09f58     15 00 00 FF 
09f5c     7C E4 05 F1 | 	add	objptr, ##10876
09f60     F2 00 68 FC | 	wrlong	#0, objptr
09f64     0F 00 00 FF 
09f68     2C E5 05 F1 | 	add	objptr, ##7980
09f6c     F2 00 68 FC | 	wrlong	#0, objptr
09f70     04 E4 05 F1 | 	add	objptr, #4
09f74     F2 00 68 FC | 	wrlong	#0, objptr
09f78     16 00 00 FF 
09f7c     5C E5 85 F1 | 	sub	objptr, ##11612
09f80     F2 00 68 FC | 	wrlong	#0, objptr
09f84     07 00 00 FF 
09f88     24 E4 05 F1 | 	add	objptr, ##3620
09f8c     F2 00 68 FC | 	wrlong	#0, objptr
09f90     07 00 00 FF 
09f94     20 E4 85 F1 | 	sub	objptr, ##3616
09f98     F2 00 68 FC | 	wrlong	#0, objptr
09f9c     0F 00 00 FF 
09fa0     34 E4 05 F1 | 	add	objptr, ##7732
09fa4     F2 00 68 FC | 	wrlong	#0, objptr
09fa8     08 00 00 FF 
09fac     08 E4 85 F1 | 	sub	objptr, ##4104
09fb0     F2 00 68 FC | 	wrlong	#0, objptr
09fb4     04 E4 05 F1 | 	add	objptr, #4
09fb8     FF FF FF FF 
09fbc     F2 FE 6B FC | 	wrlong	##-1, objptr
09fc0     0F 00 00 FF 
09fc4     4C E5 05 F1 | 	add	objptr, ##8012
09fc8     F2 00 68 FC | 	wrlong	#0, objptr
09fcc                 | ' 
09fcc                 | ' pslpoke(0,$FFFFFFFF)
09fcc                 | ' varnum=0
09fcc                 | ' programstart=0 :runptr=0 : runptr2=0
09fcc                 | ' stackpointer=0
09fcc                 | ' lineptr=0 
09fcc                 | ' programptr=0 : stringptr=0
09fcc                 | ' lastline=0 : lastlineptr=-1 :fortop=0
09fcc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
09fcc     00 1E 06 F6 | 	mov	local01, #0
09fd0     07 00 00 FF 
09fd4     40 E5 85 F1 | 	sub	objptr, ##3904
09fd8     97 16 48 FB | 	callpa	#(@LR__0831-@LR__0830)>>2,fcache_load_ptr_
09fdc                 | LR__0830
09fdc     0F 21 02 F6 | 	mov	local02, local01
09fe0     02 20 66 F0 | 	shl	local02, #2
09fe4     0F 21 02 F1 | 	add	local02, local01
09fe8     02 20 66 F0 | 	shl	local02, #2
09fec     F2 20 02 F1 | 	add	local02, objptr
09ff0     08 20 06 F1 | 	add	local02, #8
09ff4     FF FF FF FF 
09ff8     10 FF 6B FC | 	wrlong	##-1, local02
09ffc     01 1E 06 F1 | 	add	local01, #1
0a000     81 1E 56 F2 | 	cmps	local01, #129 wc
0a004     D4 FF 9F CD |  if_b	jmp	#LR__0830
0a008                 | LR__0831
0a008     49 00 00 FF 
0a00c     5C E4 85 F1 | 	sub	objptr, ##37468
0a010                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0a010     00 1E 06 F6 | 	mov	local01, #0
0a014                 | LR__0832
0a014     0F 21 02 F6 | 	mov	local02, local01
0a018     02 20 66 F0 | 	shl	local02, #2
0a01c     51 00 00 FF 
0a020     F8 E5 05 F1 | 	add	objptr, ##41976
0a024     F2 20 02 F1 | 	add	local02, objptr
0a028     10 21 0A FB | 	rdlong	local02, local02 wz
0a02c     51 00 00 FF 
0a030     F8 E5 85 F1 | 	sub	objptr, ##41976
0a034     34 00 90 AD |  if_e	jmp	#LR__0833
0a038     0F 13 02 F6 | 	mov	arg01, local01
0a03c     00 14 06 F6 | 	mov	arg02, #0
0a040     00 16 06 F6 | 	mov	arg03, #0
0a044     28 8F B0 FD | 	call	#_hg010b_spin2_setspritesize
0a048     0F 21 02 F6 | 	mov	local02, local01
0a04c     02 20 66 F0 | 	shl	local02, #2
0a050     51 00 00 FF 
0a054     F8 E5 05 F1 | 	add	objptr, ##41976
0a058     F2 20 02 F1 | 	add	local02, objptr
0a05c     10 13 02 FB | 	rdlong	arg01, local02
0a060     51 00 00 FF 
0a064     F8 E5 85 F1 | 	sub	objptr, ##41976
0a068     4C EA B0 FD | 	call	#__system___gc_free
0a06c                 | LR__0833
0a06c     F2 22 02 FB | 	rdlong	local03, objptr
0a070     52 00 00 FF 
0a074     3C E4 05 F1 | 	add	objptr, ##42044
0a078     F2 22 62 FC | 	wrlong	local03, objptr
0a07c     52 00 00 FF 
0a080     3C E4 85 F1 | 	sub	objptr, ##42044
0a084     11 12 06 F6 | 	mov	arg01, #17
0a088     08 14 06 F6 | 	mov	arg02, #8
0a08c     10 16 06 F6 | 	mov	arg03, #16
0a090     DC 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
0a094     01 1E 06 F1 | 	add	local01, #1
0a098     10 1E 56 F2 | 	cmps	local01, #16 wc
0a09c     74 FF 9F CD |  if_b	jmp	#LR__0832
0a0a0     A7 F0 03 F6 | 	mov	ptra, fp
0a0a4     B2 00 A0 FD | 	call	#popregs_
0a0a8                 | _do_new_ret
0a0a8     2D 00 64 FD | 	ret
0a0ac                 | 
0a0ac                 | ' 
0a0ac                 | ' '----------------------- goto
0a0ac                 | ' sub do_fast_goto
0a0ac                 | _do_fast_goto
0a0ac     02 4A 05 F6 | 	mov	COUNT_, #2
0a0b0     A8 00 A0 FD | 	call	#pushregs_
0a0b4                 | _do_fast_goto_enter
0a0b4     41 00 00 FF 
0a0b8     44 E4 05 F1 | 	add	objptr, ##33348
0a0bc     F2 12 02 FB | 	rdlong	arg01, objptr
0a0c0     09 1F 02 F6 | 	mov	local01, arg01
0a0c4     01 1E 66 F0 | 	shl	local01, #1
0a0c8     09 1F 02 F1 | 	add	local01, arg01
0a0cc     02 1E 66 F0 | 	shl	local01, #2
0a0d0     03 00 00 FF 
0a0d4     04 E4 85 F1 | 	sub	objptr, ##1540
0a0d8     F2 1E 02 F1 | 	add	local01, objptr
0a0dc     0F 21 02 FB | 	rdlong	local02, local01
0a0e0     10 13 02 F6 | 	mov	arg01, local02
0a0e4     3E 00 00 FF 
0a0e8     40 E4 85 F1 | 	sub	objptr, ##31808
0a0ec     EC 7A B0 FD | 	call	#_pslpeek
0a0f0     FD 12 02 F6 | 	mov	arg01, result1
0a0f4                 | ' 
0a0f4                 | ' testptr=compiledline(lineptr_e).result.uresult
0a0f4                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0a0f4                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0a0f4     41 00 00 FF 
0a0f8     44 E4 05 F1 | 	add	objptr, ##33348
0a0fc     F2 FA 01 FB | 	rdlong	result1, objptr
0a100     FD 1E 02 F6 | 	mov	local01, result1
0a104     01 1E 66 F0 | 	shl	local01, #1
0a108     FD 1E 02 F1 | 	add	local01, result1
0a10c     02 1E 66 F0 | 	shl	local01, #2
0a110     03 00 00 FF 
0a114     04 E4 85 F1 | 	sub	objptr, ##1540
0a118     F2 1E 02 F1 | 	add	local01, objptr
0a11c     04 1E 06 F1 | 	add	local01, #4
0a120     0F 1F 02 FB | 	rdlong	local01, local01
0a124     0F 13 0A F2 | 	cmp	arg01, local01 wz
0a128     3E 00 00 FF 
0a12c     40 E4 85 F1 | 	sub	objptr, ##31808
0a130     58 00 90 5D |  if_ne	jmp	#LR__0840
0a134     50 00 00 FF 
0a138     74 E5 05 F1 | 	add	objptr, ##41332
0a13c     F2 20 62 FC | 	wrlong	local02, objptr
0a140     0F 00 00 FF 
0a144     34 E5 85 F1 | 	sub	objptr, ##7988
0a148     F2 20 02 FB | 	rdlong	local02, objptr
0a14c     01 20 86 F1 | 	sub	local02, #1
0a150     04 E4 05 F1 | 	add	objptr, #4
0a154     F2 20 62 FC | 	wrlong	local02, objptr
0a158                 | '   runptr=testptr
0a158                 | '   lineptr_e=lineptr-1
0a158                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0a158     0F 00 00 FF 
0a15c     54 E5 05 F1 | 	add	objptr, ##8020
0a160     F2 20 02 FB | 	rdlong	local02, objptr
0a164     50 00 00 FF 
0a168     98 E5 85 F1 | 	sub	objptr, ##41368
0a16c     FF FF 3F FF 
0a170     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a174     50 00 00 AF 
0a178     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a17c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a180     50 00 00 AF 
0a184     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a188     04 00 90 FD | 	jmp	#LR__0841
0a18c                 | LR__0840
0a18c     0C 00 B0 FD | 	call	#_do_find_goto
0a190                 | LR__0841
0a190     A7 F0 03 F6 | 	mov	ptra, fp
0a194     B2 00 A0 FD | 	call	#popregs_
0a198                 | _do_fast_goto_ret
0a198     2D 00 64 FD | 	ret
0a19c                 | 
0a19c                 | ' 
0a19c                 | ' 
0a19c                 | ' 
0a19c                 | ' 
0a19c                 | ' sub do_find_goto
0a19c                 | _do_find_goto
0a19c     03 4A 05 F6 | 	mov	COUNT_, #3
0a1a0     A8 00 A0 FD | 	call	#pushregs_
0a1a4     24 F0 07 F1 | 	add	ptra, #36
0a1a8                 | _do_find_goto_enter
0a1a8     41 00 00 FF 
0a1ac     44 E4 05 F1 | 	add	objptr, ##33348
0a1b0     F2 1E 02 FB | 	rdlong	local01, objptr
0a1b4     0F 21 02 F6 | 	mov	local02, local01
0a1b8     01 20 66 F0 | 	shl	local02, #1
0a1bc     0F 21 02 F1 | 	add	local02, local01
0a1c0     02 20 66 F0 | 	shl	local02, #2
0a1c4     03 00 00 FF 
0a1c8     04 E4 85 F1 | 	sub	objptr, ##1540
0a1cc     F2 20 02 F1 | 	add	local02, objptr
0a1d0     04 20 06 F1 | 	add	local02, #4
0a1d4     10 21 02 FB | 	rdlong	local02, local02
0a1d8     A7 20 62 FC | 	wrlong	local02, fp
0a1dc     03 00 00 FF 
0a1e0     08 E4 05 F1 | 	add	objptr, ##1544
0a1e4     F2 22 02 FB | 	rdlong	local03, objptr
0a1e8     41 00 00 FF 
0a1ec     48 E4 85 F1 | 	sub	objptr, ##33352
0a1f0     04 4E 05 F1 | 	add	fp, #4
0a1f4     A7 22 62 FC | 	wrlong	local03, fp
0a1f8     04 4E 85 F1 | 	sub	fp, #4
0a1fc                 | ' 
0a1fc                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a1fc                 | '  ' print "find goto"                                                                     'print gotoline 
0a1fc                 | ' gotoptr=programstart
0a1fc                 | ' do
0a1fc                 | LR__0850
0a1fc     0C 4E 05 F1 | 	add	fp, #12
0a200     A7 12 02 F6 | 	mov	arg01, fp
0a204     08 4E 85 F1 | 	sub	fp, #8
0a208     A7 14 02 FB | 	rdlong	arg02, fp
0a20c     04 4E 85 F1 | 	sub	fp, #4
0a210     18 16 06 F6 | 	mov	arg03, #24
0a214     0B 00 00 FF 
0a218     C0 E4 05 F1 | 	add	objptr, ##5824
0a21c     08 A2 B0 FD | 	call	#_psram_spin2_read1
0a220     0B 00 00 FF 
0a224     C0 E4 85 F1 | 	sub	objptr, ##5824
0a228                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a228                 | '   if gotoheader(0)<>$FFFFFFFF then
0a228     0C 4E 05 F1 | 	add	fp, #12
0a22c     A7 22 02 FB | 	rdlong	local03, fp
0a230     0C 4E 85 F1 | 	sub	fp, #12
0a234     FF FF 7F FF 
0a238     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a23c     24 00 90 AD |  if_e	jmp	#LR__0851
0a240     04 4E 05 F1 | 	add	fp, #4
0a244     A7 22 02 FB | 	rdlong	local03, fp
0a248     04 4E 05 F1 | 	add	fp, #4
0a24c     A7 22 62 FC | 	wrlong	local03, fp
0a250     18 4E 05 F1 | 	add	fp, #24
0a254     A7 22 02 FB | 	rdlong	local03, fp
0a258     1C 4E 85 F1 | 	sub	fp, #28
0a25c     A7 22 62 FC | 	wrlong	local03, fp
0a260     04 4E 85 F1 | 	sub	fp, #4
0a264                 | LR__0851
0a264     20 4E 05 F1 | 	add	fp, #32
0a268     A7 22 02 FB | 	rdlong	local03, fp
0a26c     20 4E 85 F1 | 	sub	fp, #32
0a270     FF FF 3F FF 
0a274     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a278     0C 4E 05 51 |  if_ne	add	fp, #12
0a27c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a280     0C 4E 85 51 |  if_ne	sub	fp, #12
0a284     FF FF 7F 5F 
0a288     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a28c     18 00 90 AD |  if_e	jmp	#LR__0852
0a290     0C 4E 05 F1 | 	add	fp, #12
0a294     A7 22 02 FB | 	rdlong	local03, fp
0a298     0C 4E 85 F1 | 	sub	fp, #12
0a29c     A7 20 02 FB | 	rdlong	local02, fp
0a2a0     10 23 0A F2 | 	cmp	local03, local02 wz
0a2a4     54 FF 9F 5D |  if_ne	jmp	#LR__0850
0a2a8                 | LR__0852
0a2a8                 | ' 
0a2a8                 | ' if gotoheader(0)=gotoline then
0a2a8     0C 4E 05 F1 | 	add	fp, #12
0a2ac     A7 22 02 FB | 	rdlong	local03, fp
0a2b0     0C 4E 85 F1 | 	sub	fp, #12
0a2b4     A7 1E 02 FB | 	rdlong	local01, fp
0a2b8     0F 23 0A F2 | 	cmp	local03, local01 wz
0a2bc     D8 00 90 5D |  if_ne	jmp	#LR__0853
0a2c0     41 00 00 FF 
0a2c4     44 E4 05 F1 | 	add	objptr, ##33348
0a2c8     F2 1E 02 FB | 	rdlong	local01, objptr
0a2cc     0F 21 02 F6 | 	mov	local02, local01
0a2d0     01 20 66 F0 | 	shl	local02, #1
0a2d4     0F 21 02 F1 | 	add	local02, local01
0a2d8     02 20 66 F0 | 	shl	local02, #2
0a2dc     03 00 00 FF 
0a2e0     04 E4 85 F1 | 	sub	objptr, ##1540
0a2e4     F2 20 02 F1 | 	add	local02, objptr
0a2e8     08 4E 05 F1 | 	add	fp, #8
0a2ec     A7 22 02 FB | 	rdlong	local03, fp
0a2f0     10 23 62 FC | 	wrlong	local03, local02
0a2f4     03 00 00 FF 
0a2f8     04 E4 05 F1 | 	add	objptr, ##1540
0a2fc     F2 1E 02 FB | 	rdlong	local01, objptr
0a300     0F 21 02 F6 | 	mov	local02, local01
0a304     01 20 66 F0 | 	shl	local02, #1
0a308     0F 21 02 F1 | 	add	local02, local01
0a30c     02 20 66 F0 | 	shl	local02, #2
0a310     03 00 00 FF 
0a314     04 E4 85 F1 | 	sub	objptr, ##1540
0a318     F2 20 02 F1 | 	add	local02, objptr
0a31c     08 20 06 F1 | 	add	local02, #8
0a320     10 9D 68 FC | 	wrlong	#78, local02
0a324     03 00 00 FF 
0a328     04 E4 05 F1 | 	add	objptr, ##1540
0a32c     F2 20 02 FB | 	rdlong	local02, objptr
0a330     10 13 02 F6 | 	mov	arg01, local02
0a334     01 12 66 F0 | 	shl	arg01, #1
0a338     10 13 02 F1 | 	add	arg01, local02
0a33c     02 12 66 F0 | 	shl	arg01, #2
0a340     03 00 00 FF 
0a344     04 E4 85 F1 | 	sub	objptr, ##1540
0a348     F2 12 02 F1 | 	add	arg01, objptr
0a34c     12 00 00 FF 
0a350     3C E5 05 F1 | 	add	objptr, ##9532
0a354     F2 14 02 FB | 	rdlong	arg02, objptr
0a358     02 22 06 F6 | 	mov	local03, #2
0a35c     10 23 02 F1 | 	add	local03, local02
0a360     14 00 00 FF 
0a364     54 E5 85 F1 | 	sub	objptr, ##10580
0a368     F2 16 02 FB | 	rdlong	arg03, objptr
0a36c     0B 23 02 FD | 	qmul	local03, arg03
0a370     08 4E 85 F1 | 	sub	fp, #8
0a374     30 00 00 FF 
0a378     68 E5 85 F1 | 	sub	objptr, ##24936
0a37c     18 22 62 FD | 	getqx	local03
0a380     11 15 02 F1 | 	add	arg02, local03
0a384     3C A1 B0 FD | 	call	#_psram_spin2_write
0a388     0B 00 00 FF 
0a38c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a390     18 FD BF FD | 	call	#_do_fast_goto
0a394     08 00 90 FD | 	jmp	#LR__0854
0a398                 | LR__0853
0a398     26 12 06 F6 | 	mov	arg01, #38
0a39c     80 76 B0 FD | 	call	#_printerror
0a3a0                 | LR__0854
0a3a0     A7 F0 03 F6 | 	mov	ptra, fp
0a3a4     B2 00 A0 FD | 	call	#popregs_
0a3a8                 | _do_find_goto_ret
0a3a8     2D 00 64 FD | 	ret
0a3ac                 | 
0a3ac                 | ' 
0a3ac                 | ' sub do_slow_goto
0a3ac                 | _do_slow_goto
0a3ac                 | _do_slow_goto_ret
0a3ac     2D 00 64 FD | 	ret
0a3b0                 | 
0a3b0                 | ' 
0a3b0                 | ' '----------------------- Error processing
0a3b0                 | ' 
0a3b0                 | ' sub do_error
0a3b0                 | _do_error
0a3b0     01 4A 05 F6 | 	mov	COUNT_, #1
0a3b4     A8 00 A0 FD | 	call	#pushregs_
0a3b8     41 00 00 FF 
0a3bc     44 E4 05 F1 | 	add	objptr, ##33348
0a3c0     F2 18 02 FB | 	rdlong	arg04, objptr
0a3c4     0C 17 02 F6 | 	mov	arg03, arg04
0a3c8     01 16 66 F0 | 	shl	arg03, #1
0a3cc     0C 17 02 F1 | 	add	arg03, arg04
0a3d0     02 16 66 F0 | 	shl	arg03, #2
0a3d4     03 00 00 FF 
0a3d8     04 E4 85 F1 | 	sub	objptr, ##1540
0a3dc     F2 16 02 F1 | 	add	arg03, objptr
0a3e0     0B 1F 02 FB | 	rdlong	local01, arg03
0a3e4                 | ' r=compiledline(lineptr_e).result.uresult
0a3e4                 | ' print "Error ";r;": ";errors$(r)
0a3e4     00 12 06 F6 | 	mov	arg01, #0
0a3e8     3E 00 00 FF 
0a3ec     40 E4 85 F1 | 	sub	objptr, ##31808
0a3f0     D4 00 B1 FD | 	call	#__system___getiolock_0350
0a3f4     FD 12 02 F6 | 	mov	arg01, result1
0a3f8     18 AB B0 FD | 	call	#__system___lockmem
0a3fc     22 01 00 FF 
0a400     C8 14 06 F6 | 	mov	arg02, ##@LR__4321
0a404     00 12 06 F6 | 	mov	arg01, #0
0a408     00 16 06 F6 | 	mov	arg03, #0
0a40c     F8 B7 B0 FD | 	call	#__system___basic_print_string
0a410     00 12 06 F6 | 	mov	arg01, #0
0a414     0F 15 02 F6 | 	mov	arg02, local01
0a418     00 16 06 F6 | 	mov	arg03, #0
0a41c     0A 18 06 F6 | 	mov	arg04, #10
0a420     68 B8 B0 FD | 	call	#__system___basic_print_unsigned
0a424     22 01 00 FF 
0a428     CF 14 06 F6 | 	mov	arg02, ##@LR__4322
0a42c     00 12 06 F6 | 	mov	arg01, #0
0a430     00 16 06 F6 | 	mov	arg03, #0
0a434     D0 B7 B0 FD | 	call	#__system___basic_print_string
0a438     02 1E 66 F0 | 	shl	local01, #2
0a43c     3C 00 00 FF 
0a440     40 E4 05 F1 | 	add	objptr, ##30784
0a444     F2 1E 02 F1 | 	add	local01, objptr
0a448     0F 15 02 FB | 	rdlong	arg02, local01
0a44c     00 12 06 F6 | 	mov	arg01, #0
0a450     00 16 06 F6 | 	mov	arg03, #0
0a454     3C 00 00 FF 
0a458     40 E4 85 F1 | 	sub	objptr, ##30784
0a45c     A8 B7 B0 FD | 	call	#__system___basic_print_string
0a460     00 12 06 F6 | 	mov	arg01, #0
0a464     0A 14 06 F6 | 	mov	arg02, #10
0a468     00 16 06 F6 | 	mov	arg03, #0
0a46c     40 B7 B0 FD | 	call	#__system___basic_print_char
0a470     00 12 06 F6 | 	mov	arg01, #0
0a474     50 00 B1 FD | 	call	#__system___getiolock_0350
0a478     FD 00 68 FC | 	wrlong	#0, result1
0a47c     A7 F0 03 F6 | 	mov	ptra, fp
0a480     B2 00 A0 FD | 	call	#popregs_
0a484                 | _do_error_ret
0a484     2D 00 64 FD | 	ret
0a488                 | 
0a488                 | ' 
0a488                 | ' 
0a488                 | ' '------------------ Assigning to a variable  
0a488                 | ' 
0a488                 | ' function  do_convertstring(psaddr as ulong) as string
0a488                 | _do_convertstring
0a488     04 4A 05 F6 | 	mov	COUNT_, #4
0a48c     A8 00 A0 FD | 	call	#pushregs_
0a490     09 1F 02 F6 | 	mov	local01, arg01
0a494     44 77 B0 FD | 	call	#_pslpeek
0a498     FD 20 02 F6 | 	mov	local02, result1
0a49c     22 01 00 FF 
0a4a0     D2 22 06 F6 | 	mov	local03, ##@LR__4323
0a4a4                 | ' 'print "in do_convertstring: psaddr=";psaddr
0a4a4                 | ' l=pslpeek(psaddr)
0a4a4                 | ' 'print "in do_convertstring: len=";l
0a4a4                 | ' s="" 
0a4a4                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0a4a4     01 24 06 F6 | 	mov	local04, #1
0a4a8     01 20 06 F1 | 	add	local02, #1
0a4ac                 | LR__0860
0a4ac     10 25 52 F2 | 	cmps	local04, local02 wc
0a4b0     30 00 90 3D |  if_ae	jmp	#LR__0861
0a4b4     0F 13 02 F6 | 	mov	arg01, local01
0a4b8     03 12 06 F1 | 	add	arg01, #3
0a4bc     12 13 02 F1 | 	add	arg01, local04
0a4c0     C0 76 B0 FD | 	call	#_pspeek
0a4c4     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0a4c8     1C CC B0 FD | 	call	#__system__Chr_S
0a4cc     FD 14 02 F6 | 	mov	arg02, result1
0a4d0     11 13 02 F6 | 	mov	arg01, local03
0a4d4     98 AA B0 FD | 	call	#__system___string_concat
0a4d8     FD 22 02 F6 | 	mov	local03, result1
0a4dc     01 24 06 F1 | 	add	local04, #1
0a4e0     C8 FF 9F FD | 	jmp	#LR__0860
0a4e4                 | LR__0861
0a4e4                 | ' 'print "in do_convertstring: str=";s
0a4e4                 | ' return s
0a4e4     11 FB 01 F6 | 	mov	result1, local03
0a4e8     A7 F0 03 F6 | 	mov	ptra, fp
0a4ec     B2 00 A0 FD | 	call	#popregs_
0a4f0                 | _do_convertstring_ret
0a4f0     2D 00 64 FD | 	ret
0a4f4                 | 
0a4f4                 | ' 
0a4f4                 | ' sub do_assign
0a4f4                 | _do_assign
0a4f4     05 4A 05 F6 | 	mov	COUNT_, #5
0a4f8     A8 00 A0 FD | 	call	#pushregs_
0a4fc     44 F0 07 F1 | 	add	ptra, #68
0a500     41 00 00 FF 
0a504     44 E4 05 F1 | 	add	objptr, ##33348
0a508     F2 16 02 FB | 	rdlong	arg03, objptr
0a50c     0B 15 02 F6 | 	mov	arg02, arg03
0a510     01 14 66 F0 | 	shl	arg02, #1
0a514     0B 15 02 F1 | 	add	arg02, arg03
0a518     02 14 66 F0 | 	shl	arg02, #2
0a51c     03 00 00 FF 
0a520     04 E4 85 F1 | 	sub	objptr, ##1540
0a524     F2 14 02 F1 | 	add	arg02, objptr
0a528     0A 15 02 FB | 	rdlong	arg02, arg02
0a52c     18 4E 05 F1 | 	add	fp, #24
0a530     A7 14 62 FC | 	wrlong	arg02, fp
0a534                 | ' 
0a534                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0a534                 | ' 
0a534                 | ' if variables(varnum).vartype<array_no_type then 
0a534     18 4E 85 F1 | 	sub	fp, #24
0a538     04 14 66 F0 | 	shl	arg02, #4
0a53c     32 00 00 FF 
0a540     74 E4 85 F1 | 	sub	objptr, ##25716
0a544     F2 14 02 F1 | 	add	arg02, objptr
0a548     0C 14 06 F1 | 	add	arg02, #12
0a54c     0A 17 02 FB | 	rdlong	arg03, arg02
0a550     00 17 16 F2 | 	cmp	arg03, #256 wc
0a554     0B 00 00 FF 
0a558     CC E5 85 F1 | 	sub	objptr, ##6092
0a55c     18 01 90 3D |  if_ae	jmp	#LR__0870
0a560     30 E2 BF FD | 	call	#_pop
0a564     A7 FA 61 FC | 	wrlong	result1, fp
0a568     04 4E 05 F1 | 	add	fp, #4
0a56c     A7 FC 61 FC | 	wrlong	result2, fp
0a570     04 4E 05 F1 | 	add	fp, #4
0a574     A7 FE 61 FC | 	wrlong	result3, fp
0a578     08 4E 85 F1 | 	sub	fp, #8
0a57c     A7 16 02 FB | 	rdlong	arg03, fp
0a580     04 4E 05 F1 | 	add	fp, #4
0a584     A7 14 02 FB | 	rdlong	arg02, fp
0a588     14 4E 05 F1 | 	add	fp, #20
0a58c     A7 12 02 FB | 	rdlong	arg01, fp
0a590     04 12 66 F0 | 	shl	arg01, #4
0a594     0B 00 00 FF 
0a598     CC E5 05 F1 | 	add	objptr, ##6092
0a59c     F2 12 02 F1 | 	add	arg01, objptr
0a5a0     04 12 06 F1 | 	add	arg01, #4
0a5a4     09 17 62 FC | 	wrlong	arg03, arg01
0a5a8     A7 16 02 FB | 	rdlong	arg03, fp
0a5ac     04 16 66 F0 | 	shl	arg03, #4
0a5b0     F2 16 02 F1 | 	add	arg03, objptr
0a5b4     08 16 06 F1 | 	add	arg03, #8
0a5b8     0B 15 62 FC | 	wrlong	arg02, arg03
0a5bc     A7 16 02 FB | 	rdlong	arg03, fp
0a5c0     04 16 66 F0 | 	shl	arg03, #4
0a5c4     F2 16 02 F1 | 	add	arg03, objptr
0a5c8     10 4E 85 F1 | 	sub	fp, #16
0a5cc     A7 14 02 FB | 	rdlong	arg02, fp
0a5d0     0C 16 06 F1 | 	add	arg03, #12
0a5d4     0B 15 62 FC | 	wrlong	arg02, arg03
0a5d8                 | '   t1=pop() : variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0a5d8                 | '   if variables(varnum).vartype<>result_string2 then return
0a5d8     10 4E 05 F1 | 	add	fp, #16
0a5dc     A7 16 02 FB | 	rdlong	arg03, fp
0a5e0     18 4E 85 F1 | 	sub	fp, #24
0a5e4     04 16 66 F0 | 	shl	arg03, #4
0a5e8     F2 16 02 F1 | 	add	arg03, objptr
0a5ec     0C 16 06 F1 | 	add	arg03, #12
0a5f0     0B 17 02 FB | 	rdlong	arg03, arg03
0a5f4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a5f8     0B 00 00 FF 
0a5fc     CC E5 85 F1 | 	sub	objptr, ##6092
0a600     9C 05 90 5D |  if_ne	jmp	#LR__0891
0a604     18 4E 05 F1 | 	add	fp, #24
0a608     A7 16 02 FB | 	rdlong	arg03, fp
0a60c     0B 1F 02 F6 | 	mov	local01, arg03
0a610     04 1E 66 F0 | 	shl	local01, #4
0a614     0B 00 00 FF 
0a618     CC E5 05 F1 | 	add	objptr, ##6092
0a61c     F2 1E 02 F1 | 	add	local01, objptr
0a620     18 4E 85 F1 | 	sub	fp, #24
0a624     04 16 66 F0 | 	shl	arg03, #4
0a628     F2 16 02 F1 | 	add	arg03, objptr
0a62c     04 16 06 F1 | 	add	arg03, #4
0a630     0B 13 02 FB | 	rdlong	arg01, arg03
0a634     0B 00 00 FF 
0a638     CC E5 85 F1 | 	sub	objptr, ##6092
0a63c     48 FE BF FD | 	call	#_do_convertstring
0a640     04 1E 06 F1 | 	add	local01, #4
0a644     0F FB 61 FC | 	wrlong	result1, local01
0a648     18 4E 05 F1 | 	add	fp, #24
0a64c     A7 1E 02 FB | 	rdlong	local01, fp
0a650     18 4E 85 F1 | 	sub	fp, #24
0a654     04 1E 66 F0 | 	shl	local01, #4
0a658     0B 00 00 FF 
0a65c     CC E5 05 F1 | 	add	objptr, ##6092
0a660     F2 1E 02 F1 | 	add	local01, objptr
0a664     0C 1E 06 F1 | 	add	local01, #12
0a668     0F 3F 68 FC | 	wrlong	#31, local01
0a66c                 | '   variables(varnum).value.sresult=do_convertstring(variables(varnum).value.uresult)
0a66c                 | '   variables(varnum).vartype=result_string
0a66c                 | '   return
0a66c     0B 00 00 FF 
0a670     CC E5 85 F1 | 	sub	objptr, ##6092
0a674     28 05 90 FD | 	jmp	#LR__0891
0a678                 | LR__0870
0a678                 | ' for i=0 to 2 : arrid(i)=0 : next i
0a678     1C 4E 05 F1 | 	add	fp, #28
0a67c     A7 00 68 FC | 	wrlong	#0, fp
0a680     97 16 48 FB | 	callpa	#(@LR__0872-@LR__0871)>>2,fcache_load_ptr_
0a684                 | LR__0871
0a684     A7 1E 02 FB | 	rdlong	local01, fp
0a688     02 1E 66 F0 | 	shl	local01, #2
0a68c     18 4E 05 F1 | 	add	fp, #24
0a690     A7 1E 02 F1 | 	add	local01, fp
0a694     0F 01 68 FC | 	wrlong	#0, local01
0a698     18 4E 85 F1 | 	sub	fp, #24
0a69c     A7 1E 02 FB | 	rdlong	local01, fp
0a6a0     01 1E 06 F1 | 	add	local01, #1
0a6a4     A7 1E 62 FC | 	wrlong	local01, fp
0a6a8     03 1E 16 F2 | 	cmp	local01, #3 wc
0a6ac     D4 FF 9F CD |  if_b	jmp	#LR__0871
0a6b0                 | LR__0872
0a6b0     41 00 00 FF 
0a6b4     44 E4 05 F1 | 	add	objptr, ##33348
0a6b8     F2 16 02 FB | 	rdlong	arg03, objptr
0a6bc     0B 1F 02 F6 | 	mov	local01, arg03
0a6c0     01 1E 66 F0 | 	shl	local01, #1
0a6c4     0B 1F 02 F1 | 	add	local01, arg03
0a6c8     02 1E 66 F0 | 	shl	local01, #2
0a6cc     03 00 00 FF 
0a6d0     04 E4 85 F1 | 	sub	objptr, ##1540
0a6d4     F2 1E 02 F1 | 	add	local01, objptr
0a6d8     04 1E 06 F1 | 	add	local01, #4
0a6dc     0F 21 02 FB | 	rdlong	local02, local01
0a6e0     04 4E 05 F1 | 	add	fp, #4
0a6e4     A7 20 62 FC | 	wrlong	local02, fp
0a6e8     20 4E 85 F1 | 	sub	fp, #32
0a6ec     3E 00 00 FF 
0a6f0     40 E4 85 F1 | 	sub	objptr, ##31808
0a6f4     9C E0 BF FD | 	call	#_pop
0a6f8     A7 FA 61 FC | 	wrlong	result1, fp
0a6fc     04 4E 05 F1 | 	add	fp, #4
0a700     A7 FC 61 FC | 	wrlong	result2, fp
0a704     04 4E 05 F1 | 	add	fp, #4
0a708     A7 FE 61 FC | 	wrlong	result3, fp
0a70c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0a70c                 | ' t1=pop() ' var value
0a70c                 | ' if numpar>0 then
0a70c     18 4E 05 F1 | 	add	fp, #24
0a710     A7 22 02 FB | 	rdlong	local03, fp
0a714     20 4E 85 F1 | 	sub	fp, #32
0a718     01 22 16 F2 | 	cmp	local03, #1 wc
0a71c     70 00 90 CD |  if_b	jmp	#LR__0875
0a720                 | '   for i=numpar to 1 step -1
0a720     20 4E 05 F1 | 	add	fp, #32
0a724     A7 24 0A FB | 	rdlong	local04, fp wz
0a728     04 4E 85 F1 | 	sub	fp, #4
0a72c     A7 24 62 FC | 	wrlong	local04, fp
0a730     1C 4E 85 F1 | 	sub	fp, #28
0a734     58 00 90 AD |  if_e	jmp	#LR__0874
0a738                 | LR__0873
0a738     58 E0 BF FD | 	call	#_pop
0a73c     0C 4E 05 F1 | 	add	fp, #12
0a740     A7 FA 61 FC | 	wrlong	result1, fp
0a744     04 4E 05 F1 | 	add	fp, #4
0a748     A7 FC 61 FC | 	wrlong	result2, fp
0a74c     04 4E 05 F1 | 	add	fp, #4
0a750     A7 FE 61 FC | 	wrlong	result3, fp
0a754     08 4E 05 F1 | 	add	fp, #8
0a758     A7 22 02 FB | 	rdlong	local03, fp
0a75c     01 22 86 F1 | 	sub	local03, #1
0a760     02 22 66 F0 | 	shl	local03, #2
0a764     18 4E 05 F1 | 	add	fp, #24
0a768     A7 22 02 F1 | 	add	local03, fp
0a76c     28 4E 85 F1 | 	sub	fp, #40
0a770     A7 24 02 FB | 	rdlong	local04, fp
0a774     11 25 62 FC | 	wrlong	local04, local03
0a778     10 4E 05 F1 | 	add	fp, #16
0a77c     A7 24 02 FB | 	rdlong	local04, fp
0a780     01 24 8E F1 | 	sub	local04, #1 wz
0a784     A7 24 62 FC | 	wrlong	local04, fp
0a788     1C 4E 85 F1 | 	sub	fp, #28
0a78c     A8 FF 9F 5D |  if_ne	jmp	#LR__0873
0a790                 | LR__0874
0a790                 | LR__0875
0a790     18 4E 05 F1 | 	add	fp, #24
0a794     A7 1E 02 FB | 	rdlong	local01, fp
0a798     04 1E 66 F0 | 	shl	local01, #4
0a79c     0B 00 00 FF 
0a7a0     CC E5 05 F1 | 	add	objptr, ##6092
0a7a4     F2 1E 02 F1 | 	add	local01, objptr
0a7a8     04 1E 06 F1 | 	add	local01, #4
0a7ac     0F 13 02 FB | 	rdlong	arg01, local01
0a7b0     0C 4E 05 F1 | 	add	fp, #12
0a7b4     A7 12 62 FC | 	wrlong	arg01, fp
0a7b8     24 4E 85 F1 | 	sub	fp, #36
0a7bc     0B 00 00 FF 
0a7c0     CC E5 85 F1 | 	sub	objptr, ##6092
0a7c4     14 74 B0 FD | 	call	#_pslpeek
0a7c8     FD 24 32 F9 | 	getword	local04, result1, #0
0a7cc     28 4E 05 F1 | 	add	fp, #40
0a7d0     A7 24 62 FC | 	wrlong	local04, fp
0a7d4     04 4E 85 F1 | 	sub	fp, #4
0a7d8     A7 12 02 FB | 	rdlong	arg01, fp
0a7dc     24 4E 85 F1 | 	sub	fp, #36
0a7e0     02 12 06 F1 | 	add	arg01, #2
0a7e4     9C 73 B0 FD | 	call	#_pspeek
0a7e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a7ec     2C 4E 05 F1 | 	add	fp, #44
0a7f0     A7 FA 61 FC | 	wrlong	result1, fp
0a7f4     08 4E 85 F1 | 	sub	fp, #8
0a7f8     A7 12 02 FB | 	rdlong	arg01, fp
0a7fc     09 25 02 F6 | 	mov	local04, arg01
0a800     10 24 06 F1 | 	add	local04, #16
0a804     24 4E 85 F1 | 	sub	fp, #36
0a808     04 12 06 F1 | 	add	arg01, #4
0a80c     CC 73 B0 FD | 	call	#_pslpeek
0a810     FD 1E 02 F6 | 	mov	local01, result1
0a814     38 4E 05 F1 | 	add	fp, #56
0a818     A7 20 02 FB | 	rdlong	local02, fp
0a81c     10 1F 02 FD | 	qmul	local01, local02
0a820     04 4E 85 F1 | 	sub	fp, #4
0a824     A7 22 02 FB | 	rdlong	local03, fp
0a828     10 4E 85 F1 | 	sub	fp, #16
0a82c     A7 12 02 FB | 	rdlong	arg01, fp
0a830     24 4E 85 F1 | 	sub	fp, #36
0a834     08 12 06 F1 | 	add	arg01, #8
0a838     18 20 62 FD | 	getqx	local02
0a83c     10 23 02 F1 | 	add	local03, local02
0a840     98 73 B0 FD | 	call	#_pslpeek
0a844     FD 20 02 F6 | 	mov	local02, result1
0a848     24 4E 05 F1 | 	add	fp, #36
0a84c     A7 12 02 FB | 	rdlong	arg01, fp
0a850     24 4E 85 F1 | 	sub	fp, #36
0a854     04 12 06 F1 | 	add	arg01, #4
0a858     80 73 B0 FD | 	call	#_pslpeek
0a85c     FD 20 02 FD | 	qmul	local02, result1
0a860     3C 4E 05 F1 | 	add	fp, #60
0a864     A7 20 02 FB | 	rdlong	local02, fp
0a868     18 1E 62 FD | 	getqx	local01
0a86c     10 1F 02 FD | 	qmul	local01, local02
0a870     10 4E 85 F1 | 	sub	fp, #16
0a874     A7 20 02 FB | 	rdlong	local02, fp
0a878     18 1E 62 FD | 	getqx	local01
0a87c     0F 23 02 F1 | 	add	local03, local01
0a880     11 21 02 FD | 	qmul	local02, local03
0a884     04 4E 05 F1 | 	add	fp, #4
0a888                 | ' esize=pspeek(arrptr+2)
0a888                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0a888                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0a888                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0a888                 | ' 
0a888                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0a888                 | ' select case arrtype
0a888     18 22 62 FD | 	getqx	local03
0a88c     11 25 02 F1 | 	add	local04, local03
0a890     A7 24 62 FC | 	wrlong	local04, fp
0a894     08 4E 85 F1 | 	sub	fp, #8
0a898     A7 26 02 FB | 	rdlong	local05, fp
0a89c     28 4E 85 F1 | 	sub	fp, #40
0a8a0     00 27 86 F1 | 	sub	local05, #256
0a8a4     0C 26 26 F3 | 	fle	local05, #12
0a8a8     30 26 62 FD | 	jmprel	local05
0a8ac                 | LR__0876
0a8ac     30 00 90 FD | 	jmp	#LR__0877
0a8b0     58 00 90 FD | 	jmp	#LR__0878
0a8b4     88 00 90 FD | 	jmp	#LR__0879
0a8b8     B8 00 90 FD | 	jmp	#LR__0880
0a8bc     10 01 90 FD | 	jmp	#LR__0881
0a8c0     68 01 90 FD | 	jmp	#LR__0882
0a8c4     98 01 90 FD | 	jmp	#LR__0883
0a8c8     C8 01 90 FD | 	jmp	#LR__0884
0a8cc     F8 01 90 FD | 	jmp	#LR__0885
0a8d0     28 02 90 FD | 	jmp	#LR__0886
0a8d4     58 02 90 FD | 	jmp	#LR__0887
0a8d8     88 02 90 FD | 	jmp	#LR__0888
0a8dc     B8 02 90 FD | 	jmp	#LR__0889
0a8e0                 | LR__0877
0a8e0     A7 12 02 F6 | 	mov	arg01, fp
0a8e4     30 4E 05 F1 | 	add	fp, #48
0a8e8     A7 14 02 FB | 	rdlong	arg02, fp
0a8ec     30 4E 85 F1 | 	sub	fp, #48
0a8f0     0C 16 06 F6 | 	mov	arg03, #12
0a8f4     0B 00 00 FF 
0a8f8     C0 E4 05 F1 | 	add	objptr, ##5824
0a8fc     C4 9B B0 FD | 	call	#_psram_spin2_write
0a900     0B 00 00 FF 
0a904     C0 E4 85 F1 | 	sub	objptr, ##5824
0a908     94 02 90 FD | 	jmp	#LR__0890
0a90c                 | LR__0878
0a90c     30 4E 05 F1 | 	add	fp, #48
0a910     A7 12 02 FB | 	rdlong	arg01, fp
0a914     30 4E 85 F1 | 	sub	fp, #48
0a918     A7 14 02 FB | 	rdlong	arg02, fp
0a91c     01 16 06 F6 | 	mov	arg03, #1
0a920     00 18 06 F6 | 	mov	arg04, #0
0a924     0B 00 00 FF 
0a928     C0 E4 05 F1 | 	add	objptr, ##5824
0a92c                 | '     return fill(addr, pattern, count, listPtr, 1)
0a92c     01 1A 06 F6 | 	mov	arg05, #1
0a930     2C 9C B0 FD | 	call	#_psram_spin2_fill
0a934     0B 00 00 FF 
0a938     C0 E4 85 F1 | 	sub	objptr, ##5824
0a93c     60 02 90 FD | 	jmp	#LR__0890
0a940                 | LR__0879
0a940     30 4E 05 F1 | 	add	fp, #48
0a944     A7 12 02 FB | 	rdlong	arg01, fp
0a948     30 4E 85 F1 | 	sub	fp, #48
0a94c     A7 14 02 FB | 	rdlong	arg02, fp
0a950     01 16 06 F6 | 	mov	arg03, #1
0a954     00 18 06 F6 | 	mov	arg04, #0
0a958     0B 00 00 FF 
0a95c     C0 E4 05 F1 | 	add	objptr, ##5824
0a960                 | '     return fill(addr, pattern, count, listPtr, 1)
0a960     01 1A 06 F6 | 	mov	arg05, #1
0a964     F8 9B B0 FD | 	call	#_psram_spin2_fill
0a968     0B 00 00 FF 
0a96c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a970     2C 02 90 FD | 	jmp	#LR__0890
0a974                 | LR__0880
0a974     30 4E 05 F1 | 	add	fp, #48
0a978     A7 12 02 FB | 	rdlong	arg01, fp
0a97c     30 4E 85 F1 | 	sub	fp, #48
0a980     A7 14 02 FB | 	rdlong	arg02, fp
0a984     01 16 06 F6 | 	mov	arg03, #1
0a988     00 18 06 F6 | 	mov	arg04, #0
0a98c     0B 00 00 FF 
0a990     C0 E4 05 F1 | 	add	objptr, ##5824
0a994                 | '     return fill(addr, pattern, count, listPtr, 1)
0a994     01 1A 06 F6 | 	mov	arg05, #1
0a998     C4 9B B0 FD | 	call	#_psram_spin2_fill
0a99c     30 4E 05 F1 | 	add	fp, #48
0a9a0     A7 12 02 FB | 	rdlong	arg01, fp
0a9a4     30 4E 85 F1 | 	sub	fp, #48
0a9a8     01 12 06 F1 | 	add	arg01, #1
0a9ac     A7 14 02 FB | 	rdlong	arg02, fp
0a9b0     08 14 46 F0 | 	shr	arg02, #8
0a9b4     01 16 06 F6 | 	mov	arg03, #1
0a9b8     00 18 06 F6 | 	mov	arg04, #0
0a9bc                 | '     return fill(addr, pattern, count, listPtr, 1)
0a9bc     01 1A 06 F6 | 	mov	arg05, #1
0a9c0     9C 9B B0 FD | 	call	#_psram_spin2_fill
0a9c4     0B 00 00 FF 
0a9c8     C0 E4 85 F1 | 	sub	objptr, ##5824
0a9cc     D0 01 90 FD | 	jmp	#LR__0890
0a9d0                 | LR__0881
0a9d0     30 4E 05 F1 | 	add	fp, #48
0a9d4     A7 12 02 FB | 	rdlong	arg01, fp
0a9d8     30 4E 85 F1 | 	sub	fp, #48
0a9dc     A7 14 02 FB | 	rdlong	arg02, fp
0a9e0     01 16 06 F6 | 	mov	arg03, #1
0a9e4     00 18 06 F6 | 	mov	arg04, #0
0a9e8     0B 00 00 FF 
0a9ec     C0 E4 05 F1 | 	add	objptr, ##5824
0a9f0                 | '     return fill(addr, pattern, count, listPtr, 1)
0a9f0     01 1A 06 F6 | 	mov	arg05, #1
0a9f4     68 9B B0 FD | 	call	#_psram_spin2_fill
0a9f8     30 4E 05 F1 | 	add	fp, #48
0a9fc     A7 12 02 FB | 	rdlong	arg01, fp
0aa00     30 4E 85 F1 | 	sub	fp, #48
0aa04     01 12 06 F1 | 	add	arg01, #1
0aa08     A7 14 02 FB | 	rdlong	arg02, fp
0aa0c     08 14 46 F0 | 	shr	arg02, #8
0aa10     01 16 06 F6 | 	mov	arg03, #1
0aa14     00 18 06 F6 | 	mov	arg04, #0
0aa18                 | '     return fill(addr, pattern, count, listPtr, 1)
0aa18     01 1A 06 F6 | 	mov	arg05, #1
0aa1c     40 9B B0 FD | 	call	#_psram_spin2_fill
0aa20     0B 00 00 FF 
0aa24     C0 E4 85 F1 | 	sub	objptr, ##5824
0aa28     74 01 90 FD | 	jmp	#LR__0890
0aa2c                 | LR__0882
0aa2c     30 4E 05 F1 | 	add	fp, #48
0aa30     A7 12 02 FB | 	rdlong	arg01, fp
0aa34     30 4E 85 F1 | 	sub	fp, #48
0aa38     A7 14 02 FB | 	rdlong	arg02, fp
0aa3c     01 16 06 F6 | 	mov	arg03, #1
0aa40     00 18 06 F6 | 	mov	arg04, #0
0aa44     0B 00 00 FF 
0aa48     C0 E4 05 F1 | 	add	objptr, ##5824
0aa4c                 | '     return fill(addr, pattern, count, listPtr, 4)
0aa4c     04 1A 06 F6 | 	mov	arg05, #4
0aa50     0C 9B B0 FD | 	call	#_psram_spin2_fill
0aa54     0B 00 00 FF 
0aa58     C0 E4 85 F1 | 	sub	objptr, ##5824
0aa5c     40 01 90 FD | 	jmp	#LR__0890
0aa60                 | LR__0883
0aa60     30 4E 05 F1 | 	add	fp, #48
0aa64     A7 12 02 FB | 	rdlong	arg01, fp
0aa68     30 4E 85 F1 | 	sub	fp, #48
0aa6c     A7 14 02 FB | 	rdlong	arg02, fp
0aa70     01 16 06 F6 | 	mov	arg03, #1
0aa74     00 18 06 F6 | 	mov	arg04, #0
0aa78     0B 00 00 FF 
0aa7c     C0 E4 05 F1 | 	add	objptr, ##5824
0aa80                 | '     return fill(addr, pattern, count, listPtr, 4)
0aa80     04 1A 06 F6 | 	mov	arg05, #4
0aa84     D8 9A B0 FD | 	call	#_psram_spin2_fill
0aa88     0B 00 00 FF 
0aa8c     C0 E4 85 F1 | 	sub	objptr, ##5824
0aa90     0C 01 90 FD | 	jmp	#LR__0890
0aa94                 | LR__0884
0aa94     30 4E 05 F1 | 	add	fp, #48
0aa98     A7 12 02 FB | 	rdlong	arg01, fp
0aa9c     30 4E 85 F1 | 	sub	fp, #48
0aaa0     A7 14 02 FB | 	rdlong	arg02, fp
0aaa4     01 16 06 F6 | 	mov	arg03, #1
0aaa8     00 18 06 F6 | 	mov	arg04, #0
0aaac     0B 00 00 FF 
0aab0     C0 E4 05 F1 | 	add	objptr, ##5824
0aab4                 | '     return fill(addr, pattern, count, listPtr, 4)
0aab4     04 1A 06 F6 | 	mov	arg05, #4
0aab8     A4 9A B0 FD | 	call	#_psram_spin2_fill
0aabc     0B 00 00 FF 
0aac0     C0 E4 85 F1 | 	sub	objptr, ##5824
0aac4     D8 00 90 FD | 	jmp	#LR__0890
0aac8                 | LR__0885
0aac8     30 4E 05 F1 | 	add	fp, #48
0aacc     A7 12 02 FB | 	rdlong	arg01, fp
0aad0     30 4E 85 F1 | 	sub	fp, #48
0aad4     A7 14 02 FB | 	rdlong	arg02, fp
0aad8     01 16 06 F6 | 	mov	arg03, #1
0aadc     00 18 06 F6 | 	mov	arg04, #0
0aae0     0B 00 00 FF 
0aae4     C0 E4 05 F1 | 	add	objptr, ##5824
0aae8                 | '     return fill(addr, pattern, count, listPtr, 4)
0aae8     04 1A 06 F6 | 	mov	arg05, #4
0aaec     70 9A B0 FD | 	call	#_psram_spin2_fill
0aaf0     0B 00 00 FF 
0aaf4     C0 E4 85 F1 | 	sub	objptr, ##5824
0aaf8     A4 00 90 FD | 	jmp	#LR__0890
0aafc                 | LR__0886
0aafc     30 4E 05 F1 | 	add	fp, #48
0ab00     A7 12 02 FB | 	rdlong	arg01, fp
0ab04     30 4E 85 F1 | 	sub	fp, #48
0ab08     A7 14 02 FB | 	rdlong	arg02, fp
0ab0c     01 16 06 F6 | 	mov	arg03, #1
0ab10     00 18 06 F6 | 	mov	arg04, #0
0ab14     0B 00 00 FF 
0ab18     C0 E4 05 F1 | 	add	objptr, ##5824
0ab1c                 | '     return fill(addr, pattern, count, listPtr, 4)
0ab1c     04 1A 06 F6 | 	mov	arg05, #4
0ab20     3C 9A B0 FD | 	call	#_psram_spin2_fill
0ab24     0B 00 00 FF 
0ab28     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab2c     70 00 90 FD | 	jmp	#LR__0890
0ab30                 | LR__0887
0ab30     30 4E 05 F1 | 	add	fp, #48
0ab34     A7 12 02 FB | 	rdlong	arg01, fp
0ab38     30 4E 85 F1 | 	sub	fp, #48
0ab3c     A7 14 02 FB | 	rdlong	arg02, fp
0ab40     01 16 06 F6 | 	mov	arg03, #1
0ab44     00 18 06 F6 | 	mov	arg04, #0
0ab48     0B 00 00 FF 
0ab4c     C0 E4 05 F1 | 	add	objptr, ##5824
0ab50                 | '     return fill(addr, pattern, count, listPtr, 4)
0ab50     04 1A 06 F6 | 	mov	arg05, #4
0ab54     08 9A B0 FD | 	call	#_psram_spin2_fill
0ab58     0B 00 00 FF 
0ab5c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab60     3C 00 90 FD | 	jmp	#LR__0890
0ab64                 | LR__0888
0ab64     30 4E 05 F1 | 	add	fp, #48
0ab68     A7 12 02 FB | 	rdlong	arg01, fp
0ab6c     30 4E 85 F1 | 	sub	fp, #48
0ab70     A7 14 02 FB | 	rdlong	arg02, fp
0ab74     01 16 06 F6 | 	mov	arg03, #1
0ab78     00 18 06 F6 | 	mov	arg04, #0
0ab7c     0B 00 00 FF 
0ab80     C0 E4 05 F1 | 	add	objptr, ##5824
0ab84                 | '     return fill(addr, pattern, count, listPtr, 4)
0ab84     04 1A 06 F6 | 	mov	arg05, #4
0ab88     D4 99 B0 FD | 	call	#_psram_spin2_fill
0ab8c     0B 00 00 FF 
0ab90     C0 E4 85 F1 | 	sub	objptr, ##5824
0ab94     08 00 90 FD | 	jmp	#LR__0890
0ab98                 | LR__0889
0ab98     2F 12 06 F6 | 	mov	arg01, #47
0ab9c     80 6E B0 FD | 	call	#_printerror
0aba0                 | LR__0890
0aba0                 | LR__0891
0aba0     A7 F0 03 F6 | 	mov	ptra, fp
0aba4     B2 00 A0 FD | 	call	#popregs_
0aba8                 | _do_assign_ret
0aba8     2D 00 64 FD | 	ret
0abac                 | 
0abac                 | ' 
0abac                 | ' 
0abac                 | ' ' --------------------- Read a variable and push to the stack
0abac                 | ' 
0abac                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0abac                 | ' 
0abac                 | ' sub do_getvar
0abac                 | _do_getvar
0abac     04 4A 05 F6 | 	mov	COUNT_, #4
0abb0     A8 00 A0 FD | 	call	#pushregs_
0abb4     3C F0 07 F1 | 	add	ptra, #60
0abb8                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0abb8                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0abb8     41 00 00 FF 
0abbc     44 E4 05 F1 | 	add	objptr, ##33348
0abc0     F2 1E 02 FB | 	rdlong	local01, objptr
0abc4     0F 17 02 F6 | 	mov	arg03, local01
0abc8     01 16 66 F0 | 	shl	arg03, #1
0abcc     0F 17 02 F1 | 	add	arg03, local01
0abd0     02 16 66 F0 | 	shl	arg03, #2
0abd4     03 00 00 FF 
0abd8     04 E4 85 F1 | 	sub	objptr, ##1540
0abdc     F2 16 02 F1 | 	add	arg03, objptr
0abe0     04 16 06 F1 | 	add	arg03, #4
0abe4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0abe8     3E 00 00 FF 
0abec     40 E4 85 F1 | 	sub	objptr, ##31808
0abf0     C4 00 90 5D |  if_ne	jmp	#LR__0901
0abf4     41 00 00 FF 
0abf8     44 E4 05 F1 | 	add	objptr, ##33348
0abfc     F2 1E 02 FB | 	rdlong	local01, objptr
0ac00     0F 13 02 F6 | 	mov	arg01, local01
0ac04     01 12 66 F0 | 	shl	arg01, #1
0ac08     0F 13 02 F1 | 	add	arg01, local01
0ac0c     02 12 66 F0 | 	shl	arg01, #2
0ac10     03 00 00 FF 
0ac14     04 E4 85 F1 | 	sub	objptr, ##1540
0ac18     F2 12 02 F1 | 	add	arg01, objptr
0ac1c     09 1F 02 FB | 	rdlong	local01, arg01
0ac20     04 1E 66 F0 | 	shl	local01, #4
0ac24     32 00 00 FF 
0ac28     74 E4 85 F1 | 	sub	objptr, ##25716
0ac2c     F2 1E 02 F1 | 	add	local01, objptr
0ac30     04 1E 06 F1 | 	add	local01, #4
0ac34     0F 13 02 FB | 	rdlong	arg01, local01
0ac38     04 1E 06 F1 | 	add	local01, #4
0ac3c     0F 1F 02 FB | 	rdlong	local01, local01
0ac40     A7 12 62 FC | 	wrlong	arg01, fp
0ac44     04 4E 05 F1 | 	add	fp, #4
0ac48     A7 1E 62 FC | 	wrlong	local01, fp
0ac4c     35 00 00 FF 
0ac50     78 E4 05 F1 | 	add	objptr, ##27256
0ac54     F2 1E 02 FB | 	rdlong	local01, objptr
0ac58     0F 13 02 F6 | 	mov	arg01, local01
0ac5c     01 12 66 F0 | 	shl	arg01, #1
0ac60     0F 13 02 F1 | 	add	arg01, local01
0ac64     02 12 66 F0 | 	shl	arg01, #2
0ac68     03 00 00 FF 
0ac6c     04 E4 85 F1 | 	sub	objptr, ##1540
0ac70     F2 12 02 F1 | 	add	arg01, objptr
0ac74     09 1F 02 FB | 	rdlong	local01, arg01
0ac78     04 1E 66 F0 | 	shl	local01, #4
0ac7c     32 00 00 FF 
0ac80     74 E4 85 F1 | 	sub	objptr, ##25716
0ac84     F2 1E 02 F1 | 	add	local01, objptr
0ac88     0C 1E 06 F1 | 	add	local01, #12
0ac8c     0F 1F 02 FB | 	rdlong	local01, local01
0ac90     04 4E 05 F1 | 	add	fp, #4
0ac94     A7 1E 62 FC | 	wrlong	local01, fp
0ac98                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0ac98                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0ac98                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0ac98     08 4E 85 F1 | 	sub	fp, #8
0ac9c     00 1F 16 F2 | 	cmp	local01, #256 wc
0aca0     0B 00 00 FF 
0aca4     CC E5 85 F1 | 	sub	objptr, ##6092
0aca8     0C 00 90 3D |  if_ae	jmp	#LR__0900
0acac     A7 12 02 F6 | 	mov	arg01, fp
0acb0     78 DB BF FD | 	call	#_push
0acb4     74 04 90 FD | 	jmp	#LR__0922
0acb8                 | LR__0900
0acb8                 | LR__0901
0acb8     41 00 00 FF 
0acbc     44 E4 05 F1 | 	add	objptr, ##33348
0acc0     F2 16 02 FB | 	rdlong	arg03, objptr
0acc4     0B 15 02 F6 | 	mov	arg02, arg03
0acc8     01 14 66 F0 | 	shl	arg02, #1
0accc     0B 15 02 F1 | 	add	arg02, arg03
0acd0     02 14 66 F0 | 	shl	arg02, #2
0acd4     03 00 00 FF 
0acd8     04 E4 85 F1 | 	sub	objptr, ##1540
0acdc     F2 14 02 F1 | 	add	arg02, objptr
0ace0     0A 17 02 FB | 	rdlong	arg03, arg02
0ace4     04 16 66 F0 | 	shl	arg03, #4
0ace8     32 00 00 FF 
0acec     74 E4 85 F1 | 	sub	objptr, ##25716
0acf0     F2 16 02 F1 | 	add	arg03, objptr
0acf4     04 16 06 F1 | 	add	arg03, #4
0acf8     0B 13 02 FB | 	rdlong	arg01, arg03
0acfc     0C 4E 05 F1 | 	add	fp, #12
0ad00     A7 12 62 FC | 	wrlong	arg01, fp
0ad04     0C 4E 85 F1 | 	sub	fp, #12
0ad08     0B 00 00 FF 
0ad0c     CC E5 85 F1 | 	sub	objptr, ##6092
0ad10     C8 6E B0 FD | 	call	#_pslpeek
0ad14     FD FA 31 F9 | 	getword	result1, result1, #0
0ad18     10 4E 05 F1 | 	add	fp, #16
0ad1c     A7 FA 61 FC | 	wrlong	result1, fp
0ad20     41 00 00 FF 
0ad24     44 E4 05 F1 | 	add	objptr, ##33348
0ad28     F2 16 02 FB | 	rdlong	arg03, objptr
0ad2c     0B 15 02 F6 | 	mov	arg02, arg03
0ad30     01 14 66 F0 | 	shl	arg02, #1
0ad34     0B 15 02 F1 | 	add	arg02, arg03
0ad38     02 14 66 F0 | 	shl	arg02, #2
0ad3c     03 00 00 FF 
0ad40     04 E4 85 F1 | 	sub	objptr, ##1540
0ad44     F2 14 02 F1 | 	add	arg02, objptr
0ad48     04 14 06 F1 | 	add	arg02, #4
0ad4c     0A 17 02 FB | 	rdlong	arg03, arg02
0ad50     04 4E 05 F1 | 	add	fp, #4
0ad54     A7 16 62 FC | 	wrlong	arg03, fp
0ad58     08 4E 85 F1 | 	sub	fp, #8
0ad5c     A7 12 02 FB | 	rdlong	arg01, fp
0ad60     0C 4E 85 F1 | 	sub	fp, #12
0ad64     02 12 06 F1 | 	add	arg01, #2
0ad68     3E 00 00 FF 
0ad6c     40 E4 85 F1 | 	sub	objptr, ##31808
0ad70     10 6E B0 FD | 	call	#_pspeek
0ad74     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ad78     18 4E 05 F1 | 	add	fp, #24
0ad7c     A7 FA 61 FC | 	wrlong	result1, fp
0ad80     0C 4E 85 F1 | 	sub	fp, #12
0ad84     A7 12 02 FB | 	rdlong	arg01, fp
0ad88     0C 4E 85 F1 | 	sub	fp, #12
0ad8c     04 12 06 F1 | 	add	arg01, #4
0ad90     48 6E B0 FD | 	call	#_pslpeek
0ad94     1C 4E 05 F1 | 	add	fp, #28
0ad98     A7 FA 61 FC | 	wrlong	result1, fp
0ad9c     10 4E 85 F1 | 	sub	fp, #16
0ada0     A7 12 02 FB | 	rdlong	arg01, fp
0ada4     0C 4E 85 F1 | 	sub	fp, #12
0ada8     08 12 06 F1 | 	add	arg01, #8
0adac     2C 6E B0 FD | 	call	#_pslpeek
0adb0     20 4E 05 F1 | 	add	fp, #32
0adb4     A7 FA 61 FC | 	wrlong	result1, fp
0adb8     14 4E 85 F1 | 	sub	fp, #20
0adbc     A7 12 02 FB | 	rdlong	arg01, fp
0adc0     0C 4E 85 F1 | 	sub	fp, #12
0adc4     0C 12 06 F1 | 	add	arg01, #12
0adc8     10 6E B0 FD | 	call	#_pslpeek
0adcc     24 4E 05 F1 | 	add	fp, #36
0add0     A7 FA 61 FC | 	wrlong	result1, fp
0add4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0add4                 | ' esize=pspeek(arrptr+2)
0add4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0add4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0add4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0add4                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0add4     10 4E 85 F1 | 	sub	fp, #16
0add8     A7 16 02 FB | 	rdlong	arg03, fp
0addc     14 4E 85 F1 | 	sub	fp, #20
0ade0     03 16 16 F2 | 	cmp	arg03, #3 wc
0ade4     30 00 90 CD |  if_b	jmp	#LR__0902
0ade8     A8 D9 BF FD | 	call	#_pop
0adec     A7 FA 61 FC | 	wrlong	result1, fp
0adf0     04 4E 05 F1 | 	add	fp, #4
0adf4     A7 FC 61 FC | 	wrlong	result2, fp
0adf8     04 4E 05 F1 | 	add	fp, #4
0adfc     A7 FE 61 FC | 	wrlong	result3, fp
0ae00     08 4E 85 F1 | 	sub	fp, #8
0ae04     A7 16 02 FB | 	rdlong	arg03, fp
0ae08     30 4E 05 F1 | 	add	fp, #48
0ae0c     A7 16 62 FC | 	wrlong	arg03, fp
0ae10     30 4E 85 F1 | 	sub	fp, #48
0ae14     0C 00 90 FD | 	jmp	#LR__0903
0ae18                 | LR__0902
0ae18     30 4E 05 F1 | 	add	fp, #48
0ae1c     A7 00 68 FC | 	wrlong	#0, fp
0ae20     30 4E 85 F1 | 	sub	fp, #48
0ae24                 | LR__0903
0ae24                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0ae24     14 4E 05 F1 | 	add	fp, #20
0ae28     A7 16 02 FB | 	rdlong	arg03, fp
0ae2c     14 4E 85 F1 | 	sub	fp, #20
0ae30     02 16 16 F2 | 	cmp	arg03, #2 wc
0ae34     30 00 90 CD |  if_b	jmp	#LR__0904
0ae38     58 D9 BF FD | 	call	#_pop
0ae3c     A7 FA 61 FC | 	wrlong	result1, fp
0ae40     04 4E 05 F1 | 	add	fp, #4
0ae44     A7 FC 61 FC | 	wrlong	result2, fp
0ae48     04 4E 05 F1 | 	add	fp, #4
0ae4c     A7 FE 61 FC | 	wrlong	result3, fp
0ae50     08 4E 85 F1 | 	sub	fp, #8
0ae54     A7 16 02 FB | 	rdlong	arg03, fp
0ae58     2C 4E 05 F1 | 	add	fp, #44
0ae5c     A7 16 62 FC | 	wrlong	arg03, fp
0ae60     2C 4E 85 F1 | 	sub	fp, #44
0ae64     0C 00 90 FD | 	jmp	#LR__0905
0ae68                 | LR__0904
0ae68     2C 4E 05 F1 | 	add	fp, #44
0ae6c     A7 00 68 FC | 	wrlong	#0, fp
0ae70     2C 4E 85 F1 | 	sub	fp, #44
0ae74                 | LR__0905
0ae74                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0ae74     14 4E 05 F1 | 	add	fp, #20
0ae78     A7 16 02 FB | 	rdlong	arg03, fp
0ae7c     14 4E 85 F1 | 	sub	fp, #20
0ae80     01 16 16 F2 | 	cmp	arg03, #1 wc
0ae84     30 00 90 CD |  if_b	jmp	#LR__0906
0ae88     08 D9 BF FD | 	call	#_pop
0ae8c     A7 FA 61 FC | 	wrlong	result1, fp
0ae90     04 4E 05 F1 | 	add	fp, #4
0ae94     A7 FC 61 FC | 	wrlong	result2, fp
0ae98     04 4E 05 F1 | 	add	fp, #4
0ae9c     A7 FE 61 FC | 	wrlong	result3, fp
0aea0     08 4E 85 F1 | 	sub	fp, #8
0aea4     A7 16 02 FB | 	rdlong	arg03, fp
0aea8     28 4E 05 F1 | 	add	fp, #40
0aeac     A7 16 62 FC | 	wrlong	arg03, fp
0aeb0     28 4E 85 F1 | 	sub	fp, #40
0aeb4     0C 00 90 FD | 	jmp	#LR__0907
0aeb8                 | LR__0906
0aeb8     28 4E 05 F1 | 	add	fp, #40
0aebc     A7 00 68 FC | 	wrlong	#0, fp
0aec0     28 4E 85 F1 | 	sub	fp, #40
0aec4                 | LR__0907
0aec4     0C 4E 05 F1 | 	add	fp, #12
0aec8     A7 20 02 FB | 	rdlong	local02, fp
0aecc     1C 4E 05 F1 | 	add	fp, #28
0aed0     A7 22 02 FB | 	rdlong	local03, fp
0aed4     04 4E 05 F1 | 	add	fp, #4
0aed8     A7 FE 01 FB | 	rdlong	result3, fp
0aedc     10 4E 85 F1 | 	sub	fp, #16
0aee0     A7 FC 01 FB | 	rdlong	result2, fp
0aee4     FE FE 01 FD | 	qmul	result3, result2
0aee8     10 20 06 F1 | 	add	local02, #16
0aeec     14 4E 05 F1 | 	add	fp, #20
0aef0     A7 FE 01 FB | 	rdlong	result3, fp
0aef4     18 FA 61 FD | 	getqx	result1
0aef8     FE FE 01 FD | 	qmul	result3, result2
0aefc     FD 22 02 F1 | 	add	local03, result1
0af00     10 4E 85 F1 | 	sub	fp, #16
0af04     A7 FC 01 FB | 	rdlong	result2, fp
0af08     18 FE 61 FD | 	getqx	result3
0af0c     FE FE 01 FD | 	qmul	result3, result2
0af10     08 4E 85 F1 | 	sub	fp, #8
0af14     A7 FC 01 FB | 	rdlong	result2, fp
0af18     18 FE 61 FD | 	getqx	result3
0af1c     FF 22 02 F1 | 	add	local03, result3
0af20     FE 22 02 FD | 	qmul	local03, result2
0af24     1C 4E 05 F1 | 	add	fp, #28
0af28                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0af28                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0af28                 | ' 
0af28                 | ' select case vartype
0af28     18 FE 61 FD | 	getqx	result3
0af2c     FF 20 02 F1 | 	add	local02, result3
0af30     A7 20 62 FC | 	wrlong	local02, fp
0af34     24 4E 85 F1 | 	sub	fp, #36
0af38     A7 24 02 FB | 	rdlong	local04, fp
0af3c     10 4E 85 F1 | 	sub	fp, #16
0af40     00 25 86 F1 | 	sub	local04, #256
0af44     0C 24 26 F3 | 	fle	local04, #12
0af48     30 24 62 FD | 	jmprel	local04
0af4c                 | LR__0908
0af4c     30 00 90 FD | 	jmp	#LR__0909
0af50     58 00 90 FD | 	jmp	#LR__0910
0af54     8C 00 90 FD | 	jmp	#LR__0911
0af58     AC 00 90 FD | 	jmp	#LR__0912
0af5c     E8 00 90 FD | 	jmp	#LR__0913
0af60     08 01 90 FD | 	jmp	#LR__0914
0af64     24 01 90 FD | 	jmp	#LR__0915
0af68     40 01 90 FD | 	jmp	#LR__0916
0af6c     50 01 90 FD | 	jmp	#LR__0917
0af70     60 01 90 FD | 	jmp	#LR__0918
0af74     7C 01 90 FD | 	jmp	#LR__0919
0af78     8C 01 90 FD | 	jmp	#LR__0920
0af7c     A4 01 90 FD | 	jmp	#LR__0921
0af80                 | LR__0909
0af80     A7 12 02 F6 | 	mov	arg01, fp
0af84     34 4E 05 F1 | 	add	fp, #52
0af88     A7 14 02 FB | 	rdlong	arg02, fp
0af8c     34 4E 85 F1 | 	sub	fp, #52
0af90     0C 16 06 F6 | 	mov	arg03, #12
0af94     0B 00 00 FF 
0af98     C0 E4 05 F1 | 	add	objptr, ##5824
0af9c     88 94 B0 FD | 	call	#_psram_spin2_read1
0afa0     0B 00 00 FF 
0afa4     C0 E4 85 F1 | 	sub	objptr, ##5824
0afa8     78 01 90 FD | 	jmp	#LR__0921
0afac                 | LR__0910
0afac     08 4E 05 F1 | 	add	fp, #8
0afb0     A7 38 68 FC | 	wrlong	#28, fp
0afb4     2C 4E 05 F1 | 	add	fp, #44
0afb8     A7 12 02 FB | 	rdlong	arg01, fp
0afbc     34 4E 85 F1 | 	sub	fp, #52
0afc0     C0 6B B0 FD | 	call	#_pspeek
0afc4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0afc8     A7 FA 61 FC | 	wrlong	result1, fp
0afcc     80 FA 15 F2 | 	cmp	result1, #128 wc
0afd0     00 1F 66 36 |  if_ae	neg	local01, #256
0afd4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0afd8     11 1F 42 35 |  if_ae	or	local01, local03
0afdc     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0afe0     40 01 90 FD | 	jmp	#LR__0921
0afe4                 | LR__0911
0afe4     08 4E 05 F1 | 	add	fp, #8
0afe8     A7 3A 68 FC | 	wrlong	#29, fp
0afec     2C 4E 05 F1 | 	add	fp, #44
0aff0     A7 12 02 FB | 	rdlong	arg01, fp
0aff4     34 4E 85 F1 | 	sub	fp, #52
0aff8     88 6B B0 FD | 	call	#_pspeek
0affc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b000     A7 FA 61 FC | 	wrlong	result1, fp
0b004     1C 01 90 FD | 	jmp	#LR__0921
0b008                 | LR__0912
0b008     08 4E 05 F1 | 	add	fp, #8
0b00c     A7 38 68 FC | 	wrlong	#28, fp
0b010     2C 4E 05 F1 | 	add	fp, #44
0b014     A7 12 02 FB | 	rdlong	arg01, fp
0b018     34 4E 85 F1 | 	sub	fp, #52
0b01c     BC 6B B0 FD | 	call	#_pslpeek
0b020     FD FA 31 F9 | 	getword	result1, result1, #0
0b024     A7 FA 61 FC | 	wrlong	result1, fp
0b028     40 00 00 FF 
0b02c     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0b030     FF 7F 00 3F 
0b034     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0b038     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b03c     11 1F 42 35 |  if_ae	or	local01, local03
0b040     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b044     DC 00 90 FD | 	jmp	#LR__0921
0b048                 | LR__0913
0b048     08 4E 05 F1 | 	add	fp, #8
0b04c     A7 3A 68 FC | 	wrlong	#29, fp
0b050     2C 4E 05 F1 | 	add	fp, #44
0b054     A7 12 02 FB | 	rdlong	arg01, fp
0b058     34 4E 85 F1 | 	sub	fp, #52
0b05c     7C 6B B0 FD | 	call	#_pslpeek
0b060     FD FA 31 F9 | 	getword	result1, result1, #0
0b064     A7 FA 61 FC | 	wrlong	result1, fp
0b068     B8 00 90 FD | 	jmp	#LR__0921
0b06c                 | LR__0914
0b06c     08 4E 05 F1 | 	add	fp, #8
0b070     A7 38 68 FC | 	wrlong	#28, fp
0b074     2C 4E 05 F1 | 	add	fp, #44
0b078     A7 12 02 FB | 	rdlong	arg01, fp
0b07c     34 4E 85 F1 | 	sub	fp, #52
0b080     58 6B B0 FD | 	call	#_pslpeek
0b084     A7 FA 61 FC | 	wrlong	result1, fp
0b088     98 00 90 FD | 	jmp	#LR__0921
0b08c                 | LR__0915
0b08c     08 4E 05 F1 | 	add	fp, #8
0b090     A7 3A 68 FC | 	wrlong	#29, fp
0b094     2C 4E 05 F1 | 	add	fp, #44
0b098     A7 12 02 FB | 	rdlong	arg01, fp
0b09c     34 4E 85 F1 | 	sub	fp, #52
0b0a0     38 6B B0 FD | 	call	#_pslpeek
0b0a4     A7 FA 61 FC | 	wrlong	result1, fp
0b0a8     78 00 90 FD | 	jmp	#LR__0921
0b0ac                 | LR__0916
0b0ac     08 4E 05 F1 | 	add	fp, #8
0b0b0     A7 FE 69 FC | 	wrlong	#255, fp
0b0b4     08 4E 85 F1 | 	sub	fp, #8
0b0b8     A7 60 68 FC | 	wrlong	#48, fp
0b0bc     64 00 90 FD | 	jmp	#LR__0921
0b0c0                 | LR__0917
0b0c0     08 4E 05 F1 | 	add	fp, #8
0b0c4     A7 FE 69 FC | 	wrlong	#255, fp
0b0c8     08 4E 85 F1 | 	sub	fp, #8
0b0cc     A7 60 68 FC | 	wrlong	#48, fp
0b0d0     50 00 90 FD | 	jmp	#LR__0921
0b0d4                 | LR__0918
0b0d4     08 4E 05 F1 | 	add	fp, #8
0b0d8     A7 3C 68 FC | 	wrlong	#30, fp
0b0dc     2C 4E 05 F1 | 	add	fp, #44
0b0e0     A7 12 02 FB | 	rdlong	arg01, fp
0b0e4     34 4E 85 F1 | 	sub	fp, #52
0b0e8     F0 6A B0 FD | 	call	#_pslpeek
0b0ec     A7 FA 61 FC | 	wrlong	result1, fp
0b0f0     30 00 90 FD | 	jmp	#LR__0921
0b0f4                 | LR__0919
0b0f4     08 4E 05 F1 | 	add	fp, #8
0b0f8     A7 FE 69 FC | 	wrlong	#255, fp
0b0fc     08 4E 85 F1 | 	sub	fp, #8
0b100     A7 60 68 FC | 	wrlong	#48, fp
0b104     1C 00 90 FD | 	jmp	#LR__0921
0b108                 | LR__0920
0b108     08 4E 05 F1 | 	add	fp, #8
0b10c     A7 3E 68 FC | 	wrlong	#31, fp
0b110     2C 4E 05 F1 | 	add	fp, #44
0b114     A7 12 02 FB | 	rdlong	arg01, fp
0b118     34 4E 85 F1 | 	sub	fp, #52
0b11c     BC 6A B0 FD | 	call	#_pslpeek
0b120     A7 FA 61 FC | 	wrlong	result1, fp
0b124                 | LR__0921
0b124     A7 12 02 F6 | 	mov	arg01, fp
0b128     00 D7 BF FD | 	call	#_push
0b12c                 | LR__0922
0b12c     A7 F0 03 F6 | 	mov	ptra, fp
0b130     B2 00 A0 FD | 	call	#popregs_
0b134                 | _do_getvar_ret
0b134     2D 00 64 FD | 	ret
0b138                 | 
0b138                 | ' 
0b138                 | ' '------------------------ Operators 
0b138                 | ' 
0b138                 | ' sub do_plus 
0b138                 | _do_plus
0b138     05 4A 05 F6 | 	mov	COUNT_, #5
0b13c     A8 00 A0 FD | 	call	#pushregs_
0b140     18 F0 07 F1 | 	add	ptra, #24
0b144     4C D6 BF FD | 	call	#_pop
0b148     FD 1E 02 F6 | 	mov	local01, result1
0b14c     FE 20 02 F6 | 	mov	local02, result2
0b150     FF 22 02 F6 | 	mov	local03, result3
0b154     0C 4E 05 F1 | 	add	fp, #12
0b158     A7 1E 62 FC | 	wrlong	local01, fp
0b15c     04 4E 05 F1 | 	add	fp, #4
0b160     A7 20 62 FC | 	wrlong	local02, fp
0b164     04 4E 05 F1 | 	add	fp, #4
0b168     A7 22 62 FC | 	wrlong	local03, fp
0b16c     14 4E 85 F1 | 	sub	fp, #20
0b170     20 D6 BF FD | 	call	#_pop
0b174     FF 22 02 F6 | 	mov	local03, result3
0b178     A7 FA 61 FC | 	wrlong	result1, fp
0b17c     04 4E 05 F1 | 	add	fp, #4
0b180     A7 FC 61 FC | 	wrlong	result2, fp
0b184     04 4E 05 F1 | 	add	fp, #4
0b188     A7 22 62 FC | 	wrlong	local03, fp
0b18c                 | ' 
0b18c                 | ' t2=pop()
0b18c                 | ' t1=pop()
0b18c                 | ' 
0b18c                 | ' 
0b18c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0b18c     08 4E 85 F1 | 	sub	fp, #8
0b190     1D 22 0E F2 | 	cmp	local03, #29 wz
0b194     14 4E 05 A1 |  if_e	add	fp, #20
0b198     A7 24 02 AB |  if_e	rdlong	local04, fp
0b19c     14 4E 85 A1 |  if_e	sub	fp, #20
0b1a0     12 23 02 A6 |  if_e	mov	local03, local04
0b1a4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b1a8     1C 00 90 5D |  if_ne	jmp	#LR__0930
0b1ac     A7 1E 02 FB | 	rdlong	local01, fp
0b1b0     0C 4E 05 F1 | 	add	fp, #12
0b1b4     A7 20 02 FB | 	rdlong	local02, fp
0b1b8     0C 4E 85 F1 | 	sub	fp, #12
0b1bc     10 1F 02 F1 | 	add	local01, local02
0b1c0     A7 1E 62 FC | 	wrlong	local01, fp
0b1c4     3C 03 90 FD | 	jmp	#LR__0942
0b1c8                 | LR__0930
0b1c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0b1c8     08 4E 05 F1 | 	add	fp, #8
0b1cc     A7 1E 02 FB | 	rdlong	local01, fp
0b1d0     08 4E 85 F1 | 	sub	fp, #8
0b1d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b1d8     14 4E 05 A1 |  if_e	add	fp, #20
0b1dc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b1e0     14 4E 85 A1 |  if_e	sub	fp, #20
0b1e4     12 23 02 A6 |  if_e	mov	local03, local04
0b1e8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b1ec     28 00 90 5D |  if_ne	jmp	#LR__0931
0b1f0     A7 1E 02 FB | 	rdlong	local01, fp
0b1f4     0C 4E 05 F1 | 	add	fp, #12
0b1f8     A7 20 02 FB | 	rdlong	local02, fp
0b1fc     0C 4E 85 F1 | 	sub	fp, #12
0b200     10 1F 02 F1 | 	add	local01, local02
0b204     A7 1E 62 FC | 	wrlong	local01, fp
0b208     08 4E 05 F1 | 	add	fp, #8
0b20c     A7 38 68 FC | 	wrlong	#28, fp
0b210     08 4E 85 F1 | 	sub	fp, #8
0b214     EC 02 90 FD | 	jmp	#LR__0942
0b218                 | LR__0931
0b218                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b218     08 4E 05 F1 | 	add	fp, #8
0b21c     A7 1E 02 FB | 	rdlong	local01, fp
0b220     08 4E 85 F1 | 	sub	fp, #8
0b224     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b228     14 4E 05 A1 |  if_e	add	fp, #20
0b22c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b230     14 4E 85 A1 |  if_e	sub	fp, #20
0b234     12 23 02 A6 |  if_e	mov	local03, local04
0b238     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b23c     30 00 90 5D |  if_ne	jmp	#LR__0932
0b240     A7 12 02 FB | 	rdlong	arg01, fp
0b244     B4 C3 B0 FD | 	call	#__system___float_fromuns
0b248     FD 12 02 F6 | 	mov	arg01, result1
0b24c     0C 4E 05 F1 | 	add	fp, #12
0b250     A7 14 02 FB | 	rdlong	arg02, fp
0b254     0C 4E 85 F1 | 	sub	fp, #12
0b258     D4 C3 B0 FD | 	call	#__system___float_add
0b25c     A7 FA 61 FC | 	wrlong	result1, fp
0b260     08 4E 05 F1 | 	add	fp, #8
0b264     A7 3C 68 FC | 	wrlong	#30, fp
0b268     08 4E 85 F1 | 	sub	fp, #8
0b26c     94 02 90 FD | 	jmp	#LR__0942
0b270                 | LR__0932
0b270                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0b270     08 4E 05 F1 | 	add	fp, #8
0b274     A7 1E 02 FB | 	rdlong	local01, fp
0b278     08 4E 85 F1 | 	sub	fp, #8
0b27c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b280     14 4E 05 A1 |  if_e	add	fp, #20
0b284     A7 24 02 AB |  if_e	rdlong	local04, fp
0b288     14 4E 85 A1 |  if_e	sub	fp, #20
0b28c     12 23 02 A6 |  if_e	mov	local03, local04
0b290     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b294     1C 00 90 5D |  if_ne	jmp	#LR__0933
0b298     A7 1E 02 FB | 	rdlong	local01, fp
0b29c     0C 4E 05 F1 | 	add	fp, #12
0b2a0     A7 20 02 FB | 	rdlong	local02, fp
0b2a4     0C 4E 85 F1 | 	sub	fp, #12
0b2a8     10 1F 02 F1 | 	add	local01, local02
0b2ac     A7 1E 62 FC | 	wrlong	local01, fp
0b2b0     50 02 90 FD | 	jmp	#LR__0942
0b2b4                 | LR__0933
0b2b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b2b4     08 4E 05 F1 | 	add	fp, #8
0b2b8     A7 1E 02 FB | 	rdlong	local01, fp
0b2bc     08 4E 85 F1 | 	sub	fp, #8
0b2c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b2c4     14 4E 05 A1 |  if_e	add	fp, #20
0b2c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0b2cc     14 4E 85 A1 |  if_e	sub	fp, #20
0b2d0     12 23 02 A6 |  if_e	mov	local03, local04
0b2d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b2d8     1C 00 90 5D |  if_ne	jmp	#LR__0934
0b2dc     A7 1E 02 FB | 	rdlong	local01, fp
0b2e0     0C 4E 05 F1 | 	add	fp, #12
0b2e4     A7 20 02 FB | 	rdlong	local02, fp
0b2e8     0C 4E 85 F1 | 	sub	fp, #12
0b2ec     10 1F 02 F1 | 	add	local01, local02
0b2f0     A7 1E 62 FC | 	wrlong	local01, fp
0b2f4     0C 02 90 FD | 	jmp	#LR__0942
0b2f8                 | LR__0934
0b2f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b2f8     08 4E 05 F1 | 	add	fp, #8
0b2fc     A7 1E 02 FB | 	rdlong	local01, fp
0b300     08 4E 85 F1 | 	sub	fp, #8
0b304     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b308     14 4E 05 A1 |  if_e	add	fp, #20
0b30c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b310     14 4E 85 A1 |  if_e	sub	fp, #20
0b314     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b318     40 00 90 5D |  if_ne	jmp	#LR__0935
0b31c     A7 12 02 FB | 	rdlong	arg01, fp
0b320     09 13 52 F6 | 	abs	arg01, arg01 wc
0b324     1F 26 C6 C9 |  if_b	decod	local05, #31
0b328     00 26 06 36 |  if_ae	mov	local05, #0
0b32c     CC C2 B0 FD | 	call	#__system___float_fromuns
0b330     13 FB 61 F5 | 	xor	result1, local05
0b334     FD 12 02 F6 | 	mov	arg01, result1
0b338     0C 4E 05 F1 | 	add	fp, #12
0b33c     A7 14 02 FB | 	rdlong	arg02, fp
0b340     0C 4E 85 F1 | 	sub	fp, #12
0b344     E8 C2 B0 FD | 	call	#__system___float_add
0b348     A7 FA 61 FC | 	wrlong	result1, fp
0b34c     08 4E 05 F1 | 	add	fp, #8
0b350     A7 3C 68 FC | 	wrlong	#30, fp
0b354     08 4E 85 F1 | 	sub	fp, #8
0b358     A8 01 90 FD | 	jmp	#LR__0942
0b35c                 | LR__0935
0b35c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b35c     08 4E 05 F1 | 	add	fp, #8
0b360     A7 1E 02 FB | 	rdlong	local01, fp
0b364     08 4E 85 F1 | 	sub	fp, #8
0b368     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b36c     14 4E 05 A1 |  if_e	add	fp, #20
0b370     A7 22 02 AB |  if_e	rdlong	local03, fp
0b374     14 4E 85 A1 |  if_e	sub	fp, #20
0b378     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b37c     28 00 90 5D |  if_ne	jmp	#LR__0936
0b380     A7 1E 02 FB | 	rdlong	local01, fp
0b384     0C 4E 05 F1 | 	add	fp, #12
0b388     A7 12 02 FB | 	rdlong	arg01, fp
0b38c     0C 4E 85 F1 | 	sub	fp, #12
0b390     68 C2 B0 FD | 	call	#__system___float_fromuns
0b394     FD 14 02 F6 | 	mov	arg02, result1
0b398     0F 13 02 F6 | 	mov	arg01, local01
0b39c     90 C2 B0 FD | 	call	#__system___float_add
0b3a0     A7 FA 61 FC | 	wrlong	result1, fp
0b3a4     5C 01 90 FD | 	jmp	#LR__0942
0b3a8                 | LR__0936
0b3a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b3a8     08 4E 05 F1 | 	add	fp, #8
0b3ac     A7 1E 02 FB | 	rdlong	local01, fp
0b3b0     08 4E 85 F1 | 	sub	fp, #8
0b3b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b3b8     14 4E 05 A1 |  if_e	add	fp, #20
0b3bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0b3c0     14 4E 85 A1 |  if_e	sub	fp, #20
0b3c4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b3c8     38 00 90 5D |  if_ne	jmp	#LR__0937
0b3cc     A7 1E 02 FB | 	rdlong	local01, fp
0b3d0     0C 4E 05 F1 | 	add	fp, #12
0b3d4     A7 12 02 FB | 	rdlong	arg01, fp
0b3d8     0C 4E 85 F1 | 	sub	fp, #12
0b3dc     09 13 52 F6 | 	abs	arg01, arg01 wc
0b3e0     1F 26 C6 C9 |  if_b	decod	local05, #31
0b3e4     00 26 06 36 |  if_ae	mov	local05, #0
0b3e8     10 C2 B0 FD | 	call	#__system___float_fromuns
0b3ec     13 FB 61 F5 | 	xor	result1, local05
0b3f0     FD 14 02 F6 | 	mov	arg02, result1
0b3f4     0F 13 02 F6 | 	mov	arg01, local01
0b3f8     34 C2 B0 FD | 	call	#__system___float_add
0b3fc     A7 FA 61 FC | 	wrlong	result1, fp
0b400     00 01 90 FD | 	jmp	#LR__0942
0b404                 | LR__0937
0b404                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b404     08 4E 05 F1 | 	add	fp, #8
0b408     A7 1E 02 FB | 	rdlong	local01, fp
0b40c     08 4E 85 F1 | 	sub	fp, #8
0b410     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b414     14 4E 05 A1 |  if_e	add	fp, #20
0b418     A7 22 02 AB |  if_e	rdlong	local03, fp
0b41c     14 4E 85 A1 |  if_e	sub	fp, #20
0b420     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b424     1C 00 90 5D |  if_ne	jmp	#LR__0938
0b428     A7 12 02 FB | 	rdlong	arg01, fp
0b42c     0C 4E 05 F1 | 	add	fp, #12
0b430     A7 14 02 FB | 	rdlong	arg02, fp
0b434     0C 4E 85 F1 | 	sub	fp, #12
0b438     F4 C1 B0 FD | 	call	#__system___float_add
0b43c     A7 FA 61 FC | 	wrlong	result1, fp
0b440     C0 00 90 FD | 	jmp	#LR__0942
0b444                 | LR__0938
0b444                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b444     08 4E 05 F1 | 	add	fp, #8
0b448     A7 1E 02 FB | 	rdlong	local01, fp
0b44c     08 4E 85 F1 | 	sub	fp, #8
0b450     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b454     24 00 90 5D |  if_ne	jmp	#LR__0939
0b458     14 4E 05 F1 | 	add	fp, #20
0b45c     A7 22 02 FB | 	rdlong	local03, fp
0b460     14 4E 85 F1 | 	sub	fp, #20
0b464     1F 22 0E F2 | 	cmp	local03, #31 wz
0b468     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b46c     08 4E 05 51 |  if_ne	add	fp, #8
0b470     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b474     08 4E 85 51 |  if_ne	sub	fp, #8
0b478     88 00 90 5D |  if_ne	jmp	#LR__0942
0b47c                 | LR__0939
0b47c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b47c     14 4E 05 F1 | 	add	fp, #20
0b480     A7 1E 02 FB | 	rdlong	local01, fp
0b484     14 4E 85 F1 | 	sub	fp, #20
0b488     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b48c     24 00 90 5D |  if_ne	jmp	#LR__0940
0b490     08 4E 05 F1 | 	add	fp, #8
0b494     A7 22 02 FB | 	rdlong	local03, fp
0b498     08 4E 85 F1 | 	sub	fp, #8
0b49c     1F 22 0E F2 | 	cmp	local03, #31 wz
0b4a0     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b4a4     08 4E 05 51 |  if_ne	add	fp, #8
0b4a8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b4ac     08 4E 85 51 |  if_ne	sub	fp, #8
0b4b0     50 00 90 5D |  if_ne	jmp	#LR__0942
0b4b4                 | LR__0940
0b4b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0b4b4     08 4E 05 F1 | 	add	fp, #8
0b4b8     A7 1E 02 FB | 	rdlong	local01, fp
0b4bc     08 4E 85 F1 | 	sub	fp, #8
0b4c0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b4c4     14 4E 05 A1 |  if_e	add	fp, #20
0b4c8     A7 22 02 AB |  if_e	rdlong	local03, fp
0b4cc     14 4E 85 A1 |  if_e	sub	fp, #20
0b4d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b4d4     1C 00 90 5D |  if_ne	jmp	#LR__0941
0b4d8     A7 12 02 FB | 	rdlong	arg01, fp
0b4dc     0C 4E 05 F1 | 	add	fp, #12
0b4e0     A7 14 02 FB | 	rdlong	arg02, fp
0b4e4     0C 4E 85 F1 | 	sub	fp, #12
0b4e8     84 9A B0 FD | 	call	#__system___string_concat
0b4ec     A7 FA 61 FC | 	wrlong	result1, fp
0b4f0     10 00 90 FD | 	jmp	#LR__0942
0b4f4                 | LR__0941
0b4f4     A7 08 68 FC | 	wrlong	#4, fp
0b4f8     08 4E 05 F1 | 	add	fp, #8
0b4fc     A7 FE 69 FC | 	wrlong	#255, fp
0b500     08 4E 85 F1 | 	sub	fp, #8
0b504                 | LR__0942
0b504     A7 12 02 F6 | 	mov	arg01, fp
0b508     20 D3 BF FD | 	call	#_push
0b50c     A7 F0 03 F6 | 	mov	ptra, fp
0b510     B2 00 A0 FD | 	call	#popregs_
0b514                 | _do_plus_ret
0b514     2D 00 64 FD | 	ret
0b518                 | 
0b518                 | ' 
0b518                 | ' sub do_minus
0b518                 | _do_minus
0b518     05 4A 05 F6 | 	mov	COUNT_, #5
0b51c     A8 00 A0 FD | 	call	#pushregs_
0b520     18 F0 07 F1 | 	add	ptra, #24
0b524     6C D2 BF FD | 	call	#_pop
0b528     FD 1E 02 F6 | 	mov	local01, result1
0b52c     FE 20 02 F6 | 	mov	local02, result2
0b530     FF 22 02 F6 | 	mov	local03, result3
0b534     0C 4E 05 F1 | 	add	fp, #12
0b538     A7 1E 62 FC | 	wrlong	local01, fp
0b53c     04 4E 05 F1 | 	add	fp, #4
0b540     A7 20 62 FC | 	wrlong	local02, fp
0b544     04 4E 05 F1 | 	add	fp, #4
0b548     A7 22 62 FC | 	wrlong	local03, fp
0b54c     14 4E 85 F1 | 	sub	fp, #20
0b550     40 D2 BF FD | 	call	#_pop
0b554     FF 22 02 F6 | 	mov	local03, result3
0b558     A7 FA 61 FC | 	wrlong	result1, fp
0b55c     04 4E 05 F1 | 	add	fp, #4
0b560     A7 FC 61 FC | 	wrlong	result2, fp
0b564     04 4E 05 F1 | 	add	fp, #4
0b568     A7 22 62 FC | 	wrlong	local03, fp
0b56c                 | ' 
0b56c                 | ' t2=pop()
0b56c                 | ' t1=pop()
0b56c                 | ' 
0b56c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0b56c     08 4E 85 F1 | 	sub	fp, #8
0b570     1D 22 0E F2 | 	cmp	local03, #29 wz
0b574     14 4E 05 A1 |  if_e	add	fp, #20
0b578     A7 24 02 AB |  if_e	rdlong	local04, fp
0b57c     14 4E 85 A1 |  if_e	sub	fp, #20
0b580     12 23 02 A6 |  if_e	mov	local03, local04
0b584     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b588     5C 00 90 5D |  if_ne	jmp	#LR__0951
0b58c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0b58c     0C 4E 05 F1 | 	add	fp, #12
0b590     A7 1E 02 FB | 	rdlong	local01, fp
0b594     0C 4E 85 F1 | 	sub	fp, #12
0b598     A7 22 02 FB | 	rdlong	local03, fp
0b59c     11 1F 12 F2 | 	cmp	local01, local03 wc
0b5a0     1C 00 90 3D |  if_ae	jmp	#LR__0950
0b5a4     A7 1E 02 FB | 	rdlong	local01, fp
0b5a8     0C 4E 05 F1 | 	add	fp, #12
0b5ac     A7 20 02 FB | 	rdlong	local02, fp
0b5b0     0C 4E 85 F1 | 	sub	fp, #12
0b5b4     10 1F 82 F1 | 	sub	local01, local02
0b5b8     A7 1E 62 FC | 	wrlong	local01, fp
0b5bc     F4 02 90 FD | 	jmp	#LR__0960
0b5c0                 | LR__0950
0b5c0     A7 1E 02 FB | 	rdlong	local01, fp
0b5c4     0C 4E 05 F1 | 	add	fp, #12
0b5c8     A7 20 02 FB | 	rdlong	local02, fp
0b5cc     0C 4E 85 F1 | 	sub	fp, #12
0b5d0     10 1F 82 F1 | 	sub	local01, local02
0b5d4     A7 1E 62 FC | 	wrlong	local01, fp
0b5d8     08 4E 05 F1 | 	add	fp, #8
0b5dc     A7 38 68 FC | 	wrlong	#28, fp
0b5e0     08 4E 85 F1 | 	sub	fp, #8
0b5e4     CC 02 90 FD | 	jmp	#LR__0960
0b5e8                 | LR__0951
0b5e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0b5e8     08 4E 05 F1 | 	add	fp, #8
0b5ec     A7 1E 02 FB | 	rdlong	local01, fp
0b5f0     08 4E 85 F1 | 	sub	fp, #8
0b5f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b5f8     14 4E 05 A1 |  if_e	add	fp, #20
0b5fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b600     14 4E 85 A1 |  if_e	sub	fp, #20
0b604     12 23 02 A6 |  if_e	mov	local03, local04
0b608     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b60c     28 00 90 5D |  if_ne	jmp	#LR__0952
0b610     A7 1E 02 FB | 	rdlong	local01, fp
0b614     0C 4E 05 F1 | 	add	fp, #12
0b618     A7 20 02 FB | 	rdlong	local02, fp
0b61c     0C 4E 85 F1 | 	sub	fp, #12
0b620     10 1F 82 F1 | 	sub	local01, local02
0b624     A7 1E 62 FC | 	wrlong	local01, fp
0b628     08 4E 05 F1 | 	add	fp, #8
0b62c     A7 38 68 FC | 	wrlong	#28, fp
0b630     08 4E 85 F1 | 	sub	fp, #8
0b634     7C 02 90 FD | 	jmp	#LR__0960
0b638                 | LR__0952
0b638                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b638     08 4E 05 F1 | 	add	fp, #8
0b63c     A7 1E 02 FB | 	rdlong	local01, fp
0b640     08 4E 85 F1 | 	sub	fp, #8
0b644     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b648     14 4E 05 A1 |  if_e	add	fp, #20
0b64c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b650     14 4E 85 A1 |  if_e	sub	fp, #20
0b654     12 23 02 A6 |  if_e	mov	local03, local04
0b658     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b65c     34 00 90 5D |  if_ne	jmp	#LR__0953
0b660     A7 12 02 FB | 	rdlong	arg01, fp
0b664     94 BF B0 FD | 	call	#__system___float_fromuns
0b668     FD 12 02 F6 | 	mov	arg01, result1
0b66c     0C 4E 05 F1 | 	add	fp, #12
0b670     A7 14 02 FB | 	rdlong	arg02, fp
0b674     0C 4E 85 F1 | 	sub	fp, #12
0b678     1F 14 E6 F4 | 	bitnot	arg02, #31
0b67c     B0 BF B0 FD | 	call	#__system___float_add
0b680     A7 FA 61 FC | 	wrlong	result1, fp
0b684     08 4E 05 F1 | 	add	fp, #8
0b688     A7 3C 68 FC | 	wrlong	#30, fp
0b68c     08 4E 85 F1 | 	sub	fp, #8
0b690     20 02 90 FD | 	jmp	#LR__0960
0b694                 | LR__0953
0b694                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0b694     08 4E 05 F1 | 	add	fp, #8
0b698     A7 1E 02 FB | 	rdlong	local01, fp
0b69c     08 4E 85 F1 | 	sub	fp, #8
0b6a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b6a4     14 4E 05 A1 |  if_e	add	fp, #20
0b6a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0b6ac     14 4E 85 A1 |  if_e	sub	fp, #20
0b6b0     12 23 02 A6 |  if_e	mov	local03, local04
0b6b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b6b8     1C 00 90 5D |  if_ne	jmp	#LR__0954
0b6bc     A7 1E 02 FB | 	rdlong	local01, fp
0b6c0     0C 4E 05 F1 | 	add	fp, #12
0b6c4     A7 20 02 FB | 	rdlong	local02, fp
0b6c8     0C 4E 85 F1 | 	sub	fp, #12
0b6cc     10 1F 82 F1 | 	sub	local01, local02
0b6d0     A7 1E 62 FC | 	wrlong	local01, fp
0b6d4     DC 01 90 FD | 	jmp	#LR__0960
0b6d8                 | LR__0954
0b6d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0b6d8     08 4E 05 F1 | 	add	fp, #8
0b6dc     A7 1E 02 FB | 	rdlong	local01, fp
0b6e0     08 4E 85 F1 | 	sub	fp, #8
0b6e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b6e8     14 4E 05 A1 |  if_e	add	fp, #20
0b6ec     A7 24 02 AB |  if_e	rdlong	local04, fp
0b6f0     14 4E 85 A1 |  if_e	sub	fp, #20
0b6f4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0b6f8     1C 00 90 5D |  if_ne	jmp	#LR__0955
0b6fc     A7 1E 02 FB | 	rdlong	local01, fp
0b700     0C 4E 05 F1 | 	add	fp, #12
0b704     A7 20 02 FB | 	rdlong	local02, fp
0b708     0C 4E 85 F1 | 	sub	fp, #12
0b70c     10 1F 82 F1 | 	sub	local01, local02
0b710     A7 1E 62 FC | 	wrlong	local01, fp
0b714     9C 01 90 FD | 	jmp	#LR__0960
0b718                 | LR__0955
0b718                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0b718     08 4E 05 F1 | 	add	fp, #8
0b71c     A7 1E 02 FB | 	rdlong	local01, fp
0b720     08 4E 85 F1 | 	sub	fp, #8
0b724     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b728     14 4E 05 A1 |  if_e	add	fp, #20
0b72c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b730     14 4E 85 A1 |  if_e	sub	fp, #20
0b734     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b738     44 00 90 5D |  if_ne	jmp	#LR__0956
0b73c     A7 12 02 FB | 	rdlong	arg01, fp
0b740     09 13 52 F6 | 	abs	arg01, arg01 wc
0b744     1F 26 C6 C9 |  if_b	decod	local05, #31
0b748     00 26 06 36 |  if_ae	mov	local05, #0
0b74c     AC BE B0 FD | 	call	#__system___float_fromuns
0b750     13 FB 61 F5 | 	xor	result1, local05
0b754     FD 12 02 F6 | 	mov	arg01, result1
0b758     0C 4E 05 F1 | 	add	fp, #12
0b75c     A7 14 02 FB | 	rdlong	arg02, fp
0b760     0C 4E 85 F1 | 	sub	fp, #12
0b764     1F 14 E6 F4 | 	bitnot	arg02, #31
0b768     C4 BE B0 FD | 	call	#__system___float_add
0b76c     A7 FA 61 FC | 	wrlong	result1, fp
0b770     08 4E 05 F1 | 	add	fp, #8
0b774     A7 3C 68 FC | 	wrlong	#30, fp
0b778     08 4E 85 F1 | 	sub	fp, #8
0b77c     34 01 90 FD | 	jmp	#LR__0960
0b780                 | LR__0956
0b780                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0b780     08 4E 05 F1 | 	add	fp, #8
0b784     A7 1E 02 FB | 	rdlong	local01, fp
0b788     08 4E 85 F1 | 	sub	fp, #8
0b78c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b790     14 4E 05 A1 |  if_e	add	fp, #20
0b794     A7 22 02 AB |  if_e	rdlong	local03, fp
0b798     14 4E 85 A1 |  if_e	sub	fp, #20
0b79c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b7a0     2C 00 90 5D |  if_ne	jmp	#LR__0957
0b7a4     A7 1E 02 FB | 	rdlong	local01, fp
0b7a8     0C 4E 05 F1 | 	add	fp, #12
0b7ac     A7 12 02 FB | 	rdlong	arg01, fp
0b7b0     0C 4E 85 F1 | 	sub	fp, #12
0b7b4     44 BE B0 FD | 	call	#__system___float_fromuns
0b7b8     FD 14 02 F6 | 	mov	arg02, result1
0b7bc     0F 13 02 F6 | 	mov	arg01, local01
0b7c0     1F 14 E6 F4 | 	bitnot	arg02, #31
0b7c4     68 BE B0 FD | 	call	#__system___float_add
0b7c8     A7 FA 61 FC | 	wrlong	result1, fp
0b7cc     E4 00 90 FD | 	jmp	#LR__0960
0b7d0                 | LR__0957
0b7d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0b7d0     08 4E 05 F1 | 	add	fp, #8
0b7d4     A7 1E 02 FB | 	rdlong	local01, fp
0b7d8     08 4E 85 F1 | 	sub	fp, #8
0b7dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b7e0     14 4E 05 A1 |  if_e	add	fp, #20
0b7e4     A7 22 02 AB |  if_e	rdlong	local03, fp
0b7e8     14 4E 85 A1 |  if_e	sub	fp, #20
0b7ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b7f0     3C 00 90 5D |  if_ne	jmp	#LR__0958
0b7f4     A7 1E 02 FB | 	rdlong	local01, fp
0b7f8     0C 4E 05 F1 | 	add	fp, #12
0b7fc     A7 12 02 FB | 	rdlong	arg01, fp
0b800     0C 4E 85 F1 | 	sub	fp, #12
0b804     09 13 52 F6 | 	abs	arg01, arg01 wc
0b808     1F 26 C6 C9 |  if_b	decod	local05, #31
0b80c     00 26 06 36 |  if_ae	mov	local05, #0
0b810     E8 BD B0 FD | 	call	#__system___float_fromuns
0b814     13 FB 61 F5 | 	xor	result1, local05
0b818     FD 14 02 F6 | 	mov	arg02, result1
0b81c     0F 13 02 F6 | 	mov	arg01, local01
0b820     1F 14 E6 F4 | 	bitnot	arg02, #31
0b824     08 BE B0 FD | 	call	#__system___float_add
0b828     A7 FA 61 FC | 	wrlong	result1, fp
0b82c     84 00 90 FD | 	jmp	#LR__0960
0b830                 | LR__0958
0b830                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0b830     08 4E 05 F1 | 	add	fp, #8
0b834     A7 1E 02 FB | 	rdlong	local01, fp
0b838     08 4E 85 F1 | 	sub	fp, #8
0b83c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b840     14 4E 05 A1 |  if_e	add	fp, #20
0b844     A7 22 02 AB |  if_e	rdlong	local03, fp
0b848     14 4E 85 A1 |  if_e	sub	fp, #20
0b84c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b850     20 00 90 5D |  if_ne	jmp	#LR__0959
0b854     A7 12 02 FB | 	rdlong	arg01, fp
0b858     0C 4E 05 F1 | 	add	fp, #12
0b85c     A7 14 02 FB | 	rdlong	arg02, fp
0b860     0C 4E 85 F1 | 	sub	fp, #12
0b864     1F 14 E6 F4 | 	bitnot	arg02, #31
0b868     C4 BD B0 FD | 	call	#__system___float_add
0b86c     A7 FA 61 FC | 	wrlong	result1, fp
0b870     40 00 90 FD | 	jmp	#LR__0960
0b874                 | LR__0959
0b874                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0b874     08 4E 05 F1 | 	add	fp, #8
0b878     A7 1E 02 FB | 	rdlong	local01, fp
0b87c     08 4E 85 F1 | 	sub	fp, #8
0b880     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b884     14 4E 05 51 |  if_ne	add	fp, #20
0b888     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b88c     14 4E 85 51 |  if_ne	sub	fp, #20
0b890     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0b894     A7 06 68 AC |  if_e	wrlong	#3, fp
0b898     08 4E 05 A1 |  if_e	add	fp, #8
0b89c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b8a0     08 4E 85 A1 |  if_e	sub	fp, #8
0b8a4     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0b8a8     08 4E 05 51 |  if_ne	add	fp, #8
0b8ac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b8b0     08 4E 85 51 |  if_ne	sub	fp, #8
0b8b4                 | LR__0960
0b8b4     A7 12 02 F6 | 	mov	arg01, fp
0b8b8     70 CF BF FD | 	call	#_push
0b8bc     A7 F0 03 F6 | 	mov	ptra, fp
0b8c0     B2 00 A0 FD | 	call	#popregs_
0b8c4                 | _do_minus_ret
0b8c4     2D 00 64 FD | 	ret
0b8c8                 | 
0b8c8                 | ' 
0b8c8                 | ' sub do_and 
0b8c8                 | _do_and
0b8c8     03 4A 05 F6 | 	mov	COUNT_, #3
0b8cc     A8 00 A0 FD | 	call	#pushregs_
0b8d0     18 F0 07 F1 | 	add	ptra, #24
0b8d4     BC CE BF FD | 	call	#_pop
0b8d8     FD 12 02 F6 | 	mov	arg01, result1
0b8dc     FE 1E 02 F6 | 	mov	local01, result2
0b8e0     FF 20 02 F6 | 	mov	local02, result3
0b8e4     0C 4E 05 F1 | 	add	fp, #12
0b8e8     A7 12 62 FC | 	wrlong	arg01, fp
0b8ec     04 4E 05 F1 | 	add	fp, #4
0b8f0     A7 1E 62 FC | 	wrlong	local01, fp
0b8f4     04 4E 05 F1 | 	add	fp, #4
0b8f8     A7 20 62 FC | 	wrlong	local02, fp
0b8fc     14 4E 85 F1 | 	sub	fp, #20
0b900     90 CE BF FD | 	call	#_pop
0b904     FF 22 02 F6 | 	mov	local03, result3
0b908     A7 FA 61 FC | 	wrlong	result1, fp
0b90c     04 4E 05 F1 | 	add	fp, #4
0b910     A7 FC 61 FC | 	wrlong	result2, fp
0b914     04 4E 05 F1 | 	add	fp, #4
0b918     A7 22 62 FC | 	wrlong	local03, fp
0b91c                 | ' 
0b91c                 | ' t2=pop()
0b91c                 | ' t1=pop()
0b91c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0b91c     08 4E 85 F1 | 	sub	fp, #8
0b920     1C 22 0E F2 | 	cmp	local03, #28 wz
0b924     A7 22 02 AB |  if_e	rdlong	local03, fp
0b928     A7 22 62 AC |  if_e	wrlong	local03, fp
0b92c     08 4E 05 A1 |  if_e	add	fp, #8
0b930     A7 3A 68 AC |  if_e	wrlong	#29, fp
0b934     08 4E 85 A1 |  if_e	sub	fp, #8
0b938                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0b938     14 4E 05 F1 | 	add	fp, #20
0b93c     A7 22 02 FB | 	rdlong	local03, fp
0b940     14 4E 85 F1 | 	sub	fp, #20
0b944     1C 22 0E F2 | 	cmp	local03, #28 wz
0b948     18 00 90 5D |  if_ne	jmp	#LR__0970
0b94c     0C 4E 05 F1 | 	add	fp, #12
0b950     A7 22 02 FB | 	rdlong	local03, fp
0b954     A7 22 62 FC | 	wrlong	local03, fp
0b958     08 4E 05 F1 | 	add	fp, #8
0b95c     A7 3A 68 FC | 	wrlong	#29, fp
0b960     14 4E 85 F1 | 	sub	fp, #20
0b964                 | LR__0970
0b964                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0b964     08 4E 05 F1 | 	add	fp, #8
0b968     A7 22 02 FB | 	rdlong	local03, fp
0b96c     08 4E 85 F1 | 	sub	fp, #8
0b970     1F 22 0E F2 | 	cmp	local03, #31 wz
0b974     14 4E 05 51 |  if_ne	add	fp, #20
0b978     A7 20 02 5B |  if_ne	rdlong	local02, fp
0b97c     14 4E 85 51 |  if_ne	sub	fp, #20
0b980     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0b984     08 4E 05 51 |  if_ne	add	fp, #8
0b988     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b98c     08 4E 85 51 |  if_ne	sub	fp, #8
0b990     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0b994     14 4E 05 51 |  if_ne	add	fp, #20
0b998     14 4E 85 51 |  if_ne	sub	fp, #20
0b99c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0b9a0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0b9a4     08 4E 05 A1 |  if_e	add	fp, #8
0b9a8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0b9ac     08 4E 85 A1 |  if_e	sub	fp, #8
0b9b0     18 00 90 AD |  if_e	jmp	#LR__0971
0b9b4     A7 22 02 FB | 	rdlong	local03, fp
0b9b8     0C 4E 05 F1 | 	add	fp, #12
0b9bc     A7 1E 02 FB | 	rdlong	local01, fp
0b9c0     0C 4E 85 F1 | 	sub	fp, #12
0b9c4     0F 23 02 F5 | 	and	local03, local01
0b9c8     A7 22 62 FC | 	wrlong	local03, fp
0b9cc                 | LR__0971
0b9cc     A7 12 02 F6 | 	mov	arg01, fp
0b9d0     58 CE BF FD | 	call	#_push
0b9d4     A7 F0 03 F6 | 	mov	ptra, fp
0b9d8     B2 00 A0 FD | 	call	#popregs_
0b9dc                 | _do_and_ret
0b9dc     2D 00 64 FD | 	ret
0b9e0                 | 
0b9e0                 | ' 
0b9e0                 | ' sub do_or 
0b9e0                 | _do_or
0b9e0     03 4A 05 F6 | 	mov	COUNT_, #3
0b9e4     A8 00 A0 FD | 	call	#pushregs_
0b9e8     18 F0 07 F1 | 	add	ptra, #24
0b9ec     A4 CD BF FD | 	call	#_pop
0b9f0     FD 12 02 F6 | 	mov	arg01, result1
0b9f4     FE 1E 02 F6 | 	mov	local01, result2
0b9f8     FF 20 02 F6 | 	mov	local02, result3
0b9fc     0C 4E 05 F1 | 	add	fp, #12
0ba00     A7 12 62 FC | 	wrlong	arg01, fp
0ba04     04 4E 05 F1 | 	add	fp, #4
0ba08     A7 1E 62 FC | 	wrlong	local01, fp
0ba0c     04 4E 05 F1 | 	add	fp, #4
0ba10     A7 20 62 FC | 	wrlong	local02, fp
0ba14     14 4E 85 F1 | 	sub	fp, #20
0ba18     78 CD BF FD | 	call	#_pop
0ba1c     FF 22 02 F6 | 	mov	local03, result3
0ba20     A7 FA 61 FC | 	wrlong	result1, fp
0ba24     04 4E 05 F1 | 	add	fp, #4
0ba28     A7 FC 61 FC | 	wrlong	result2, fp
0ba2c     04 4E 05 F1 | 	add	fp, #4
0ba30     A7 22 62 FC | 	wrlong	local03, fp
0ba34                 | ' 
0ba34                 | ' t2=pop()
0ba34                 | ' t1=pop()
0ba34                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ba34     08 4E 85 F1 | 	sub	fp, #8
0ba38     1C 22 0E F2 | 	cmp	local03, #28 wz
0ba3c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ba40     A7 22 62 AC |  if_e	wrlong	local03, fp
0ba44     08 4E 05 A1 |  if_e	add	fp, #8
0ba48     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ba4c     08 4E 85 A1 |  if_e	sub	fp, #8
0ba50                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ba50     14 4E 05 F1 | 	add	fp, #20
0ba54     A7 22 02 FB | 	rdlong	local03, fp
0ba58     14 4E 85 F1 | 	sub	fp, #20
0ba5c     1C 22 0E F2 | 	cmp	local03, #28 wz
0ba60     18 00 90 5D |  if_ne	jmp	#LR__0980
0ba64     0C 4E 05 F1 | 	add	fp, #12
0ba68     A7 22 02 FB | 	rdlong	local03, fp
0ba6c     A7 22 62 FC | 	wrlong	local03, fp
0ba70     08 4E 05 F1 | 	add	fp, #8
0ba74     A7 3A 68 FC | 	wrlong	#29, fp
0ba78     14 4E 85 F1 | 	sub	fp, #20
0ba7c                 | LR__0980
0ba7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0ba7c     08 4E 05 F1 | 	add	fp, #8
0ba80     A7 22 02 FB | 	rdlong	local03, fp
0ba84     08 4E 85 F1 | 	sub	fp, #8
0ba88     1F 22 0E F2 | 	cmp	local03, #31 wz
0ba8c     14 4E 05 51 |  if_ne	add	fp, #20
0ba90     A7 20 02 5B |  if_ne	rdlong	local02, fp
0ba94     14 4E 85 51 |  if_ne	sub	fp, #20
0ba98     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0ba9c     08 4E 05 51 |  if_ne	add	fp, #8
0baa0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0baa4     08 4E 85 51 |  if_ne	sub	fp, #8
0baa8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0baac     14 4E 05 51 |  if_ne	add	fp, #20
0bab0     14 4E 85 51 |  if_ne	sub	fp, #20
0bab4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bab8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0babc     08 4E 05 A1 |  if_e	add	fp, #8
0bac0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bac4     08 4E 85 A1 |  if_e	sub	fp, #8
0bac8     18 00 90 AD |  if_e	jmp	#LR__0981
0bacc     A7 22 02 FB | 	rdlong	local03, fp
0bad0     0C 4E 05 F1 | 	add	fp, #12
0bad4     A7 1E 02 FB | 	rdlong	local01, fp
0bad8     0C 4E 85 F1 | 	sub	fp, #12
0badc     0F 23 42 F5 | 	or	local03, local01
0bae0     A7 22 62 FC | 	wrlong	local03, fp
0bae4                 | LR__0981
0bae4     A7 12 02 F6 | 	mov	arg01, fp
0bae8     40 CD BF FD | 	call	#_push
0baec     A7 F0 03 F6 | 	mov	ptra, fp
0baf0     B2 00 A0 FD | 	call	#popregs_
0baf4                 | _do_or_ret
0baf4     2D 00 64 FD | 	ret
0baf8                 | 
0baf8                 | ' 
0baf8                 | ' sub do_mul
0baf8                 | _do_mul
0baf8     05 4A 05 F6 | 	mov	COUNT_, #5
0bafc     A8 00 A0 FD | 	call	#pushregs_
0bb00     18 F0 07 F1 | 	add	ptra, #24
0bb04     8C CC BF FD | 	call	#_pop
0bb08     FD 1E 02 F6 | 	mov	local01, result1
0bb0c     FE 20 02 F6 | 	mov	local02, result2
0bb10     FF 22 02 F6 | 	mov	local03, result3
0bb14     0C 4E 05 F1 | 	add	fp, #12
0bb18     A7 1E 62 FC | 	wrlong	local01, fp
0bb1c     04 4E 05 F1 | 	add	fp, #4
0bb20     A7 20 62 FC | 	wrlong	local02, fp
0bb24     04 4E 05 F1 | 	add	fp, #4
0bb28     A7 22 62 FC | 	wrlong	local03, fp
0bb2c     14 4E 85 F1 | 	sub	fp, #20
0bb30     60 CC BF FD | 	call	#_pop
0bb34     FF 22 02 F6 | 	mov	local03, result3
0bb38     A7 FA 61 FC | 	wrlong	result1, fp
0bb3c     04 4E 05 F1 | 	add	fp, #4
0bb40     A7 FC 61 FC | 	wrlong	result2, fp
0bb44     04 4E 05 F1 | 	add	fp, #4
0bb48     A7 22 62 FC | 	wrlong	local03, fp
0bb4c                 | ' 
0bb4c                 | ' t2=pop()
0bb4c                 | ' t1=pop()
0bb4c                 | ' 
0bb4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0bb4c     08 4E 85 F1 | 	sub	fp, #8
0bb50     1D 22 0E F2 | 	cmp	local03, #29 wz
0bb54     14 4E 05 A1 |  if_e	add	fp, #20
0bb58     A7 24 02 AB |  if_e	rdlong	local04, fp
0bb5c     14 4E 85 A1 |  if_e	sub	fp, #20
0bb60     12 23 02 A6 |  if_e	mov	local03, local04
0bb64     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bb68     20 00 90 5D |  if_ne	jmp	#LR__0990
0bb6c     A7 20 02 FB | 	rdlong	local02, fp
0bb70     0C 4E 05 F1 | 	add	fp, #12
0bb74     A7 22 02 FB | 	rdlong	local03, fp
0bb78     11 21 02 FD | 	qmul	local02, local03
0bb7c     0C 4E 85 F1 | 	sub	fp, #12
0bb80     18 1E 62 FD | 	getqx	local01
0bb84     A7 1E 62 FC | 	wrlong	local01, fp
0bb88     C4 02 90 FD | 	jmp	#LR__0999
0bb8c                 | LR__0990
0bb8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0bb8c     08 4E 05 F1 | 	add	fp, #8
0bb90     A7 1E 02 FB | 	rdlong	local01, fp
0bb94     08 4E 85 F1 | 	sub	fp, #8
0bb98     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bb9c     14 4E 05 A1 |  if_e	add	fp, #20
0bba0     A7 24 02 AB |  if_e	rdlong	local04, fp
0bba4     14 4E 85 A1 |  if_e	sub	fp, #20
0bba8     12 23 02 A6 |  if_e	mov	local03, local04
0bbac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bbb0     2C 00 90 5D |  if_ne	jmp	#LR__0991
0bbb4     A7 20 02 FB | 	rdlong	local02, fp
0bbb8     0C 4E 05 F1 | 	add	fp, #12
0bbbc     A7 22 02 FB | 	rdlong	local03, fp
0bbc0     11 21 02 FD | 	qmul	local02, local03
0bbc4     0C 4E 85 F1 | 	sub	fp, #12
0bbc8     18 1E 62 FD | 	getqx	local01
0bbcc     A7 1E 62 FC | 	wrlong	local01, fp
0bbd0     08 4E 05 F1 | 	add	fp, #8
0bbd4     A7 38 68 FC | 	wrlong	#28, fp
0bbd8     08 4E 85 F1 | 	sub	fp, #8
0bbdc     70 02 90 FD | 	jmp	#LR__0999
0bbe0                 | LR__0991
0bbe0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bbe0     08 4E 05 F1 | 	add	fp, #8
0bbe4     A7 1E 02 FB | 	rdlong	local01, fp
0bbe8     08 4E 85 F1 | 	sub	fp, #8
0bbec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0bbf0     14 4E 05 A1 |  if_e	add	fp, #20
0bbf4     A7 24 02 AB |  if_e	rdlong	local04, fp
0bbf8     14 4E 85 A1 |  if_e	sub	fp, #20
0bbfc     12 23 02 A6 |  if_e	mov	local03, local04
0bc00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bc04     30 00 90 5D |  if_ne	jmp	#LR__0992
0bc08     A7 12 02 FB | 	rdlong	arg01, fp
0bc0c     EC B9 B0 FD | 	call	#__system___float_fromuns
0bc10     FD 12 02 F6 | 	mov	arg01, result1
0bc14     0C 4E 05 F1 | 	add	fp, #12
0bc18     A7 14 02 FB | 	rdlong	arg02, fp
0bc1c     0C 4E 85 F1 | 	sub	fp, #12
0bc20     04 BD B0 FD | 	call	#__system___float_mul
0bc24     A7 FA 61 FC | 	wrlong	result1, fp
0bc28     08 4E 05 F1 | 	add	fp, #8
0bc2c     A7 3C 68 FC | 	wrlong	#30, fp
0bc30     08 4E 85 F1 | 	sub	fp, #8
0bc34     18 02 90 FD | 	jmp	#LR__0999
0bc38                 | LR__0992
0bc38                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0bc38     08 4E 05 F1 | 	add	fp, #8
0bc3c     A7 1E 02 FB | 	rdlong	local01, fp
0bc40     08 4E 85 F1 | 	sub	fp, #8
0bc44     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bc48     14 4E 05 A1 |  if_e	add	fp, #20
0bc4c     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc50     14 4E 85 A1 |  if_e	sub	fp, #20
0bc54     12 23 02 A6 |  if_e	mov	local03, local04
0bc58     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bc5c     20 00 90 5D |  if_ne	jmp	#LR__0993
0bc60     A7 20 02 FB | 	rdlong	local02, fp
0bc64     0C 4E 05 F1 | 	add	fp, #12
0bc68     A7 22 02 FB | 	rdlong	local03, fp
0bc6c     11 21 02 FD | 	qmul	local02, local03
0bc70     0C 4E 85 F1 | 	sub	fp, #12
0bc74     18 1E 62 FD | 	getqx	local01
0bc78     A7 1E 62 FC | 	wrlong	local01, fp
0bc7c     D0 01 90 FD | 	jmp	#LR__0999
0bc80                 | LR__0993
0bc80                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0bc80     08 4E 05 F1 | 	add	fp, #8
0bc84     A7 1E 02 FB | 	rdlong	local01, fp
0bc88     08 4E 85 F1 | 	sub	fp, #8
0bc8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bc90     14 4E 05 A1 |  if_e	add	fp, #20
0bc94     A7 24 02 AB |  if_e	rdlong	local04, fp
0bc98     14 4E 85 A1 |  if_e	sub	fp, #20
0bc9c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0bca0     20 00 90 5D |  if_ne	jmp	#LR__0994
0bca4     A7 20 02 FB | 	rdlong	local02, fp
0bca8     0C 4E 05 F1 | 	add	fp, #12
0bcac     A7 22 02 FB | 	rdlong	local03, fp
0bcb0     11 21 02 FD | 	qmul	local02, local03
0bcb4     0C 4E 85 F1 | 	sub	fp, #12
0bcb8     18 1E 62 FD | 	getqx	local01
0bcbc     A7 1E 62 FC | 	wrlong	local01, fp
0bcc0     8C 01 90 FD | 	jmp	#LR__0999
0bcc4                 | LR__0994
0bcc4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0bcc4     08 4E 05 F1 | 	add	fp, #8
0bcc8     A7 1E 02 FB | 	rdlong	local01, fp
0bccc     08 4E 85 F1 | 	sub	fp, #8
0bcd0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bcd4     14 4E 05 A1 |  if_e	add	fp, #20
0bcd8     A7 22 02 AB |  if_e	rdlong	local03, fp
0bcdc     14 4E 85 A1 |  if_e	sub	fp, #20
0bce0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bce4     40 00 90 5D |  if_ne	jmp	#LR__0995
0bce8     A7 12 02 FB | 	rdlong	arg01, fp
0bcec     09 13 52 F6 | 	abs	arg01, arg01 wc
0bcf0     1F 26 C6 C9 |  if_b	decod	local05, #31
0bcf4     00 26 06 36 |  if_ae	mov	local05, #0
0bcf8     00 B9 B0 FD | 	call	#__system___float_fromuns
0bcfc     13 FB 61 F5 | 	xor	result1, local05
0bd00     FD 12 02 F6 | 	mov	arg01, result1
0bd04     0C 4E 05 F1 | 	add	fp, #12
0bd08     A7 14 02 FB | 	rdlong	arg02, fp
0bd0c     0C 4E 85 F1 | 	sub	fp, #12
0bd10     14 BC B0 FD | 	call	#__system___float_mul
0bd14     A7 FA 61 FC | 	wrlong	result1, fp
0bd18     08 4E 05 F1 | 	add	fp, #8
0bd1c     A7 3C 68 FC | 	wrlong	#30, fp
0bd20     08 4E 85 F1 | 	sub	fp, #8
0bd24     28 01 90 FD | 	jmp	#LR__0999
0bd28                 | LR__0995
0bd28                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0bd28     08 4E 05 F1 | 	add	fp, #8
0bd2c     A7 1E 02 FB | 	rdlong	local01, fp
0bd30     08 4E 85 F1 | 	sub	fp, #8
0bd34     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bd38     14 4E 05 A1 |  if_e	add	fp, #20
0bd3c     A7 22 02 AB |  if_e	rdlong	local03, fp
0bd40     14 4E 85 A1 |  if_e	sub	fp, #20
0bd44     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bd48     28 00 90 5D |  if_ne	jmp	#LR__0996
0bd4c     A7 1E 02 FB | 	rdlong	local01, fp
0bd50     0C 4E 05 F1 | 	add	fp, #12
0bd54     A7 12 02 FB | 	rdlong	arg01, fp
0bd58     0C 4E 85 F1 | 	sub	fp, #12
0bd5c     9C B8 B0 FD | 	call	#__system___float_fromuns
0bd60     FD 14 02 F6 | 	mov	arg02, result1
0bd64     0F 13 02 F6 | 	mov	arg01, local01
0bd68     BC BB B0 FD | 	call	#__system___float_mul
0bd6c     A7 FA 61 FC | 	wrlong	result1, fp
0bd70     DC 00 90 FD | 	jmp	#LR__0999
0bd74                 | LR__0996
0bd74                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0bd74     08 4E 05 F1 | 	add	fp, #8
0bd78     A7 1E 02 FB | 	rdlong	local01, fp
0bd7c     08 4E 85 F1 | 	sub	fp, #8
0bd80     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bd84     14 4E 05 A1 |  if_e	add	fp, #20
0bd88     A7 22 02 AB |  if_e	rdlong	local03, fp
0bd8c     14 4E 85 A1 |  if_e	sub	fp, #20
0bd90     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bd94     38 00 90 5D |  if_ne	jmp	#LR__0997
0bd98     A7 1E 02 FB | 	rdlong	local01, fp
0bd9c     0C 4E 05 F1 | 	add	fp, #12
0bda0     A7 12 02 FB | 	rdlong	arg01, fp
0bda4     0C 4E 85 F1 | 	sub	fp, #12
0bda8     09 13 52 F6 | 	abs	arg01, arg01 wc
0bdac     1F 26 C6 C9 |  if_b	decod	local05, #31
0bdb0     00 26 06 36 |  if_ae	mov	local05, #0
0bdb4     44 B8 B0 FD | 	call	#__system___float_fromuns
0bdb8     13 FB 61 F5 | 	xor	result1, local05
0bdbc     FD 14 02 F6 | 	mov	arg02, result1
0bdc0     0F 13 02 F6 | 	mov	arg01, local01
0bdc4     60 BB B0 FD | 	call	#__system___float_mul
0bdc8     A7 FA 61 FC | 	wrlong	result1, fp
0bdcc     80 00 90 FD | 	jmp	#LR__0999
0bdd0                 | LR__0997
0bdd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0bdd0     08 4E 05 F1 | 	add	fp, #8
0bdd4     A7 1E 02 FB | 	rdlong	local01, fp
0bdd8     08 4E 85 F1 | 	sub	fp, #8
0bddc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bde0     14 4E 05 A1 |  if_e	add	fp, #20
0bde4     A7 22 02 AB |  if_e	rdlong	local03, fp
0bde8     14 4E 85 A1 |  if_e	sub	fp, #20
0bdec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bdf0     1C 00 90 5D |  if_ne	jmp	#LR__0998
0bdf4     A7 12 02 FB | 	rdlong	arg01, fp
0bdf8     0C 4E 05 F1 | 	add	fp, #12
0bdfc     A7 14 02 FB | 	rdlong	arg02, fp
0be00     0C 4E 85 F1 | 	sub	fp, #12
0be04     20 BB B0 FD | 	call	#__system___float_mul
0be08     A7 FA 61 FC | 	wrlong	result1, fp
0be0c     40 00 90 FD | 	jmp	#LR__0999
0be10                 | LR__0998
0be10                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0be10     08 4E 05 F1 | 	add	fp, #8
0be14     A7 1E 02 FB | 	rdlong	local01, fp
0be18     08 4E 85 F1 | 	sub	fp, #8
0be1c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0be20     14 4E 05 51 |  if_ne	add	fp, #20
0be24     A7 22 02 5B |  if_ne	rdlong	local03, fp
0be28     14 4E 85 51 |  if_ne	sub	fp, #20
0be2c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0be30     A7 10 68 AC |  if_e	wrlong	#8, fp
0be34     08 4E 05 A1 |  if_e	add	fp, #8
0be38     A7 FE 69 AC |  if_e	wrlong	#255, fp
0be3c     08 4E 85 A1 |  if_e	sub	fp, #8
0be40     A7 12 68 5C |  if_ne	wrlong	#9, fp
0be44     08 4E 05 51 |  if_ne	add	fp, #8
0be48     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0be4c     08 4E 85 51 |  if_ne	sub	fp, #8
0be50                 | LR__0999
0be50     A7 12 02 F6 | 	mov	arg01, fp
0be54     D4 C9 BF FD | 	call	#_push
0be58     A7 F0 03 F6 | 	mov	ptra, fp
0be5c     B2 00 A0 FD | 	call	#popregs_
0be60                 | _do_mul_ret
0be60     2D 00 64 FD | 	ret
0be64                 | 
0be64                 | ' 
0be64                 | ' sub do_div 
0be64                 | _do_div
0be64     01 4A 05 F6 | 	mov	COUNT_, #1
0be68     A8 00 A0 FD | 	call	#pushregs_
0be6c     18 F0 07 F1 | 	add	ptra, #24
0be70     20 C9 BF FD | 	call	#_pop
0be74     FD 60 02 F6 | 	mov	muldivb_, result1
0be78     FE 5E 02 F6 | 	mov	muldiva_, result2
0be7c     FF 1E 02 F6 | 	mov	local01, result3
0be80     0C 4E 05 F1 | 	add	fp, #12
0be84     A7 60 62 FC | 	wrlong	muldivb_, fp
0be88     04 4E 05 F1 | 	add	fp, #4
0be8c     A7 5E 62 FC | 	wrlong	muldiva_, fp
0be90     04 4E 05 F1 | 	add	fp, #4
0be94     A7 1E 62 FC | 	wrlong	local01, fp
0be98     14 4E 85 F1 | 	sub	fp, #20
0be9c     F4 C8 BF FD | 	call	#_pop
0bea0     A7 FA 61 FC | 	wrlong	result1, fp
0bea4     04 4E 05 F1 | 	add	fp, #4
0bea8     A7 FC 61 FC | 	wrlong	result2, fp
0beac     04 4E 05 F1 | 	add	fp, #4
0beb0     A7 FE 61 FC | 	wrlong	result3, fp
0beb4                 | ' 
0beb4                 | ' t2=pop()
0beb4                 | ' t1=pop()
0beb4                 | ' 
0beb4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0beb4     08 4E 85 F1 | 	sub	fp, #8
0beb8     1F FE 0D F2 | 	cmp	result3, #31 wz
0bebc     14 4E 05 51 |  if_ne	add	fp, #20
0bec0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0bec4     14 4E 85 51 |  if_ne	sub	fp, #20
0bec8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0becc     A7 14 68 AC |  if_e	wrlong	#10, fp
0bed0     08 4E 05 A1 |  if_e	add	fp, #8
0bed4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bed8     08 4E 85 A1 |  if_e	sub	fp, #8
0bedc     90 01 90 AD |  if_e	jmp	#LR__1006
0bee0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0bee0     08 4E 05 F1 | 	add	fp, #8
0bee4     A7 60 02 FB | 	rdlong	muldivb_, fp
0bee8     08 4E 85 F1 | 	sub	fp, #8
0beec     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0bef0     1C 00 90 5D |  if_ne	jmp	#LR__1000
0bef4     08 4E 05 F1 | 	add	fp, #8
0bef8     A7 38 68 FC | 	wrlong	#28, fp
0befc     08 4E 85 F1 | 	sub	fp, #8
0bf00     A7 12 02 FB | 	rdlong	arg01, fp
0bf04     00 14 06 F6 | 	mov	arg02, #0
0bf08     E4 BE B0 FD | 	call	#__system___float_tointeger
0bf0c     A7 FA 61 FC | 	wrlong	result1, fp
0bf10                 | LR__1000
0bf10                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0bf10     14 4E 05 F1 | 	add	fp, #20
0bf14     A7 60 02 FB | 	rdlong	muldivb_, fp
0bf18     14 4E 85 F1 | 	sub	fp, #20
0bf1c     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0bf20     28 00 90 5D |  if_ne	jmp	#LR__1001
0bf24     14 4E 05 F1 | 	add	fp, #20
0bf28     A7 38 68 FC | 	wrlong	#28, fp
0bf2c     08 4E 85 F1 | 	sub	fp, #8
0bf30     A7 12 02 FB | 	rdlong	arg01, fp
0bf34     0C 4E 85 F1 | 	sub	fp, #12
0bf38     00 14 06 F6 | 	mov	arg02, #0
0bf3c     B0 BE B0 FD | 	call	#__system___float_tointeger
0bf40     0C 4E 05 F1 | 	add	fp, #12
0bf44     A7 FA 61 FC | 	wrlong	result1, fp
0bf48     0C 4E 85 F1 | 	sub	fp, #12
0bf4c                 | LR__1001
0bf4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0bf4c     08 4E 05 F1 | 	add	fp, #8
0bf50     A7 60 02 FB | 	rdlong	muldivb_, fp
0bf54     08 4E 85 F1 | 	sub	fp, #8
0bf58     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0bf5c     14 4E 05 A1 |  if_e	add	fp, #20
0bf60     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bf64     14 4E 85 A1 |  if_e	sub	fp, #20
0bf68     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0bf6c     20 00 90 5D |  if_ne	jmp	#LR__1002
0bf70     0C 4E 05 F1 | 	add	fp, #12
0bf74     A7 1E 02 FB | 	rdlong	local01, fp
0bf78     0C 4E 85 F1 | 	sub	fp, #12
0bf7c     A7 60 02 FB | 	rdlong	muldivb_, fp
0bf80     0F 61 12 FD | 	qdiv	muldivb_, local01
0bf84     18 1E 62 FD | 	getqx	local01
0bf88     A7 1E 62 FC | 	wrlong	local01, fp
0bf8c     E0 00 90 FD | 	jmp	#LR__1006
0bf90                 | LR__1002
0bf90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0bf90     08 4E 05 F1 | 	add	fp, #8
0bf94     A7 60 02 FB | 	rdlong	muldivb_, fp
0bf98     08 4E 85 F1 | 	sub	fp, #8
0bf9c     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0bfa0     14 4E 05 A1 |  if_e	add	fp, #20
0bfa4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bfa8     14 4E 85 A1 |  if_e	sub	fp, #20
0bfac     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0bfb0     2C 00 90 5D |  if_ne	jmp	#LR__1003
0bfb4     0C 4E 05 F1 | 	add	fp, #12
0bfb8     A7 1E 02 FB | 	rdlong	local01, fp
0bfbc     0C 4E 85 F1 | 	sub	fp, #12
0bfc0     A7 60 02 FB | 	rdlong	muldivb_, fp
0bfc4     0F 61 12 FD | 	qdiv	muldivb_, local01
0bfc8     18 1E 62 FD | 	getqx	local01
0bfcc     A7 1E 62 FC | 	wrlong	local01, fp
0bfd0     08 4E 05 F1 | 	add	fp, #8
0bfd4     A7 38 68 FC | 	wrlong	#28, fp
0bfd8     08 4E 85 F1 | 	sub	fp, #8
0bfdc     90 00 90 FD | 	jmp	#LR__1006
0bfe0                 | LR__1003
0bfe0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0bfe0     08 4E 05 F1 | 	add	fp, #8
0bfe4     A7 60 02 FB | 	rdlong	muldivb_, fp
0bfe8     08 4E 85 F1 | 	sub	fp, #8
0bfec     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0bff0     14 4E 05 A1 |  if_e	add	fp, #20
0bff4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0bff8     14 4E 85 A1 |  if_e	sub	fp, #20
0bffc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c000     1C 00 90 5D |  if_ne	jmp	#LR__1004
0c004     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c008     0C 4E 05 F1 | 	add	fp, #12
0c00c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c010     0C 4E 85 F1 | 	sub	fp, #12
0c014     BA 00 A0 FD | 	call	#divide_
0c018     A7 60 62 FC | 	wrlong	muldivb_, fp
0c01c     50 00 90 FD | 	jmp	#LR__1006
0c020                 | LR__1004
0c020                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0c020     08 4E 05 F1 | 	add	fp, #8
0c024     A7 60 02 FB | 	rdlong	muldivb_, fp
0c028     08 4E 85 F1 | 	sub	fp, #8
0c02c     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c030     14 4E 05 A1 |  if_e	add	fp, #20
0c034     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c038     14 4E 85 A1 |  if_e	sub	fp, #20
0c03c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c040     1C 00 90 5D |  if_ne	jmp	#LR__1005
0c044     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c048     0C 4E 05 F1 | 	add	fp, #12
0c04c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c050     0C 4E 85 F1 | 	sub	fp, #12
0c054     BA 00 A0 FD | 	call	#divide_
0c058     A7 60 62 FC | 	wrlong	muldivb_, fp
0c05c     10 00 90 FD | 	jmp	#LR__1006
0c060                 | LR__1005
0c060     A7 16 68 FC | 	wrlong	#11, fp
0c064     08 4E 05 F1 | 	add	fp, #8
0c068     A7 FE 69 FC | 	wrlong	#255, fp
0c06c     08 4E 85 F1 | 	sub	fp, #8
0c070                 | LR__1006
0c070     A7 12 02 F6 | 	mov	arg01, fp
0c074     B4 C7 BF FD | 	call	#_push
0c078     A7 F0 03 F6 | 	mov	ptra, fp
0c07c     B2 00 A0 FD | 	call	#popregs_
0c080                 | _do_div_ret
0c080     2D 00 64 FD | 	ret
0c084                 | 
0c084                 | ' 
0c084                 | ' sub do_fdiv 
0c084                 | _do_fdiv
0c084     02 4A 05 F6 | 	mov	COUNT_, #2
0c088     A8 00 A0 FD | 	call	#pushregs_
0c08c     18 F0 07 F1 | 	add	ptra, #24
0c090     00 C7 BF FD | 	call	#_pop
0c094     FD 14 02 F6 | 	mov	arg02, result1
0c098     FE 12 02 F6 | 	mov	arg01, result2
0c09c     FF 1E 02 F6 | 	mov	local01, result3
0c0a0     0C 4E 05 F1 | 	add	fp, #12
0c0a4     A7 14 62 FC | 	wrlong	arg02, fp
0c0a8     04 4E 05 F1 | 	add	fp, #4
0c0ac     A7 12 62 FC | 	wrlong	arg01, fp
0c0b0     04 4E 05 F1 | 	add	fp, #4
0c0b4     A7 1E 62 FC | 	wrlong	local01, fp
0c0b8     14 4E 85 F1 | 	sub	fp, #20
0c0bc     D4 C6 BF FD | 	call	#_pop
0c0c0     A7 FA 61 FC | 	wrlong	result1, fp
0c0c4     04 4E 05 F1 | 	add	fp, #4
0c0c8     A7 FC 61 FC | 	wrlong	result2, fp
0c0cc     04 4E 05 F1 | 	add	fp, #4
0c0d0     A7 FE 61 FC | 	wrlong	result3, fp
0c0d4                 | ' 
0c0d4                 | ' t2=pop()
0c0d4                 | ' t1=pop()
0c0d4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0c0d4     08 4E 85 F1 | 	sub	fp, #8
0c0d8     1F FE 0D F2 | 	cmp	result3, #31 wz
0c0dc     14 4E 05 51 |  if_ne	add	fp, #20
0c0e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c0e4     14 4E 85 51 |  if_ne	sub	fp, #20
0c0e8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c0ec     A7 14 68 AC |  if_e	wrlong	#10, fp
0c0f0     08 4E 05 A1 |  if_e	add	fp, #8
0c0f4     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c0f8     08 4E 85 A1 |  if_e	sub	fp, #8
0c0fc     38 01 90 AD |  if_e	jmp	#LR__1015
0c100                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c100     08 4E 05 F1 | 	add	fp, #8
0c104     A7 14 02 FB | 	rdlong	arg02, fp
0c108     08 4E 85 F1 | 	sub	fp, #8
0c10c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c110     28 00 90 5D |  if_ne	jmp	#LR__1010
0c114     08 4E 05 F1 | 	add	fp, #8
0c118     A7 3C 68 FC | 	wrlong	#30, fp
0c11c     08 4E 85 F1 | 	sub	fp, #8
0c120     A7 12 02 FB | 	rdlong	arg01, fp
0c124     09 13 52 F6 | 	abs	arg01, arg01 wc
0c128     1F 20 C6 C9 |  if_b	decod	local02, #31
0c12c     00 20 06 36 |  if_ae	mov	local02, #0
0c130     C8 B4 B0 FD | 	call	#__system___float_fromuns
0c134     10 FB 61 F5 | 	xor	result1, local02
0c138     A7 FA 61 FC | 	wrlong	result1, fp
0c13c                 | LR__1010
0c13c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0c13c     08 4E 05 F1 | 	add	fp, #8
0c140     A7 14 02 FB | 	rdlong	arg02, fp
0c144     08 4E 85 F1 | 	sub	fp, #8
0c148     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c14c     18 00 90 5D |  if_ne	jmp	#LR__1011
0c150     08 4E 05 F1 | 	add	fp, #8
0c154     A7 3C 68 FC | 	wrlong	#30, fp
0c158     08 4E 85 F1 | 	sub	fp, #8
0c15c     A7 12 02 FB | 	rdlong	arg01, fp
0c160     98 B4 B0 FD | 	call	#__system___float_fromuns
0c164     A7 FA 61 FC | 	wrlong	result1, fp
0c168                 | LR__1011
0c168                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c168     14 4E 05 F1 | 	add	fp, #20
0c16c     A7 14 02 FB | 	rdlong	arg02, fp
0c170     14 4E 85 F1 | 	sub	fp, #20
0c174     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c178     34 00 90 5D |  if_ne	jmp	#LR__1012
0c17c     14 4E 05 F1 | 	add	fp, #20
0c180     A7 3C 68 FC | 	wrlong	#30, fp
0c184     08 4E 85 F1 | 	sub	fp, #8
0c188     A7 12 02 FB | 	rdlong	arg01, fp
0c18c     0C 4E 85 F1 | 	sub	fp, #12
0c190     09 13 52 F6 | 	abs	arg01, arg01 wc
0c194     1F 20 C6 C9 |  if_b	decod	local02, #31
0c198     00 20 06 36 |  if_ae	mov	local02, #0
0c19c     5C B4 B0 FD | 	call	#__system___float_fromuns
0c1a0     10 FB 61 F5 | 	xor	result1, local02
0c1a4     0C 4E 05 F1 | 	add	fp, #12
0c1a8     A7 FA 61 FC | 	wrlong	result1, fp
0c1ac     0C 4E 85 F1 | 	sub	fp, #12
0c1b0                 | LR__1012
0c1b0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c1b0     14 4E 05 F1 | 	add	fp, #20
0c1b4     A7 14 02 FB | 	rdlong	arg02, fp
0c1b8     14 4E 85 F1 | 	sub	fp, #20
0c1bc     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c1c0     24 00 90 5D |  if_ne	jmp	#LR__1013
0c1c4     14 4E 05 F1 | 	add	fp, #20
0c1c8     A7 3C 68 FC | 	wrlong	#30, fp
0c1cc     08 4E 85 F1 | 	sub	fp, #8
0c1d0     A7 12 02 FB | 	rdlong	arg01, fp
0c1d4     0C 4E 85 F1 | 	sub	fp, #12
0c1d8     20 B4 B0 FD | 	call	#__system___float_fromuns
0c1dc     0C 4E 05 F1 | 	add	fp, #12
0c1e0     A7 FA 61 FC | 	wrlong	result1, fp
0c1e4     0C 4E 85 F1 | 	sub	fp, #12
0c1e8                 | LR__1013
0c1e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0c1e8     08 4E 05 F1 | 	add	fp, #8
0c1ec     A7 14 02 FB | 	rdlong	arg02, fp
0c1f0     08 4E 85 F1 | 	sub	fp, #8
0c1f4     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c1f8     14 4E 05 A1 |  if_e	add	fp, #20
0c1fc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c200     14 4E 85 A1 |  if_e	sub	fp, #20
0c204     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c208     1C 00 90 5D |  if_ne	jmp	#LR__1014
0c20c     A7 12 02 FB | 	rdlong	arg01, fp
0c210     0C 4E 05 F1 | 	add	fp, #12
0c214     A7 14 02 FB | 	rdlong	arg02, fp
0c218     0C 4E 85 F1 | 	sub	fp, #12
0c21c     0C B9 B0 FD | 	call	#__system___float_div
0c220     A7 FA 61 FC | 	wrlong	result1, fp
0c224     10 00 90 FD | 	jmp	#LR__1015
0c228                 | LR__1014
0c228     A7 16 68 FC | 	wrlong	#11, fp
0c22c     08 4E 05 F1 | 	add	fp, #8
0c230     A7 FE 69 FC | 	wrlong	#255, fp
0c234     08 4E 85 F1 | 	sub	fp, #8
0c238                 | LR__1015
0c238     A7 12 02 F6 | 	mov	arg01, fp
0c23c     EC C5 BF FD | 	call	#_push
0c240     A7 F0 03 F6 | 	mov	ptra, fp
0c244     B2 00 A0 FD | 	call	#popregs_
0c248                 | _do_fdiv_ret
0c248     2D 00 64 FD | 	ret
0c24c                 | 
0c24c                 | ' 
0c24c                 | ' 
0c24c                 | ' sub do_mod 
0c24c                 | _do_mod
0c24c     01 4A 05 F6 | 	mov	COUNT_, #1
0c250     A8 00 A0 FD | 	call	#pushregs_
0c254     18 F0 07 F1 | 	add	ptra, #24
0c258     38 C5 BF FD | 	call	#_pop
0c25c     FD 60 02 F6 | 	mov	muldivb_, result1
0c260     FE 5E 02 F6 | 	mov	muldiva_, result2
0c264     FF 1E 02 F6 | 	mov	local01, result3
0c268     0C 4E 05 F1 | 	add	fp, #12
0c26c     A7 60 62 FC | 	wrlong	muldivb_, fp
0c270     04 4E 05 F1 | 	add	fp, #4
0c274     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c278     04 4E 05 F1 | 	add	fp, #4
0c27c     A7 1E 62 FC | 	wrlong	local01, fp
0c280     14 4E 85 F1 | 	sub	fp, #20
0c284     0C C5 BF FD | 	call	#_pop
0c288     A7 FA 61 FC | 	wrlong	result1, fp
0c28c     04 4E 05 F1 | 	add	fp, #4
0c290     A7 FC 61 FC | 	wrlong	result2, fp
0c294     04 4E 05 F1 | 	add	fp, #4
0c298     A7 FE 61 FC | 	wrlong	result3, fp
0c29c                 | ' 
0c29c                 | ' t2=pop()
0c29c                 | ' t1=pop()
0c29c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c29c     08 4E 85 F1 | 	sub	fp, #8
0c2a0     1F FE 0D F2 | 	cmp	result3, #31 wz
0c2a4     14 4E 05 51 |  if_ne	add	fp, #20
0c2a8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c2ac     14 4E 85 51 |  if_ne	sub	fp, #20
0c2b0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c2b4     A7 14 68 AC |  if_e	wrlong	#10, fp
0c2b8     08 4E 05 A1 |  if_e	add	fp, #8
0c2bc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c2c0     08 4E 85 A1 |  if_e	sub	fp, #8
0c2c4     90 01 90 AD |  if_e	jmp	#LR__1026
0c2c8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c2c8     08 4E 05 F1 | 	add	fp, #8
0c2cc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c2d0     08 4E 85 F1 | 	sub	fp, #8
0c2d4     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c2d8     1C 00 90 5D |  if_ne	jmp	#LR__1020
0c2dc     08 4E 05 F1 | 	add	fp, #8
0c2e0     A7 38 68 FC | 	wrlong	#28, fp
0c2e4     08 4E 85 F1 | 	sub	fp, #8
0c2e8     A7 12 02 FB | 	rdlong	arg01, fp
0c2ec     00 14 06 F6 | 	mov	arg02, #0
0c2f0     FC BA B0 FD | 	call	#__system___float_tointeger
0c2f4     A7 FA 61 FC | 	wrlong	result1, fp
0c2f8                 | LR__1020
0c2f8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c2f8     14 4E 05 F1 | 	add	fp, #20
0c2fc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c300     14 4E 85 F1 | 	sub	fp, #20
0c304     1E 60 0E F2 | 	cmp	muldivb_, #30 wz
0c308     28 00 90 5D |  if_ne	jmp	#LR__1021
0c30c     14 4E 05 F1 | 	add	fp, #20
0c310     A7 38 68 FC | 	wrlong	#28, fp
0c314     08 4E 85 F1 | 	sub	fp, #8
0c318     A7 12 02 FB | 	rdlong	arg01, fp
0c31c     0C 4E 85 F1 | 	sub	fp, #12
0c320     00 14 06 F6 | 	mov	arg02, #0
0c324     C8 BA B0 FD | 	call	#__system___float_tointeger
0c328     0C 4E 05 F1 | 	add	fp, #12
0c32c     A7 FA 61 FC | 	wrlong	result1, fp
0c330     0C 4E 85 F1 | 	sub	fp, #12
0c334                 | LR__1021
0c334                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c334     08 4E 05 F1 | 	add	fp, #8
0c338     A7 60 02 FB | 	rdlong	muldivb_, fp
0c33c     08 4E 85 F1 | 	sub	fp, #8
0c340     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c344     14 4E 05 A1 |  if_e	add	fp, #20
0c348     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c34c     14 4E 85 A1 |  if_e	sub	fp, #20
0c350     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c354     20 00 90 5D |  if_ne	jmp	#LR__1022
0c358     0C 4E 05 F1 | 	add	fp, #12
0c35c     A7 1E 02 FB | 	rdlong	local01, fp
0c360     0C 4E 85 F1 | 	sub	fp, #12
0c364     A7 60 02 FB | 	rdlong	muldivb_, fp
0c368     0F 61 12 FD | 	qdiv	muldivb_, local01
0c36c     19 1E 62 FD | 	getqy	local01
0c370     A7 1E 62 FC | 	wrlong	local01, fp
0c374     E0 00 90 FD | 	jmp	#LR__1026
0c378                 | LR__1022
0c378                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c378     08 4E 05 F1 | 	add	fp, #8
0c37c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c380     08 4E 85 F1 | 	sub	fp, #8
0c384     1D 60 0E F2 | 	cmp	muldivb_, #29 wz
0c388     14 4E 05 A1 |  if_e	add	fp, #20
0c38c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c390     14 4E 85 A1 |  if_e	sub	fp, #20
0c394     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c398     2C 00 90 5D |  if_ne	jmp	#LR__1023
0c39c     0C 4E 05 F1 | 	add	fp, #12
0c3a0     A7 1E 02 FB | 	rdlong	local01, fp
0c3a4     0C 4E 85 F1 | 	sub	fp, #12
0c3a8     A7 60 02 FB | 	rdlong	muldivb_, fp
0c3ac     0F 61 12 FD | 	qdiv	muldivb_, local01
0c3b0     19 1E 62 FD | 	getqy	local01
0c3b4     A7 1E 62 FC | 	wrlong	local01, fp
0c3b8     08 4E 05 F1 | 	add	fp, #8
0c3bc     A7 38 68 FC | 	wrlong	#28, fp
0c3c0     08 4E 85 F1 | 	sub	fp, #8
0c3c4     90 00 90 FD | 	jmp	#LR__1026
0c3c8                 | LR__1023
0c3c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c3c8     08 4E 05 F1 | 	add	fp, #8
0c3cc     A7 60 02 FB | 	rdlong	muldivb_, fp
0c3d0     08 4E 85 F1 | 	sub	fp, #8
0c3d4     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c3d8     14 4E 05 A1 |  if_e	add	fp, #20
0c3dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c3e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c3e4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c3e8     1C 00 90 5D |  if_ne	jmp	#LR__1024
0c3ec     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c3f0     0C 4E 05 F1 | 	add	fp, #12
0c3f4     A7 60 02 FB | 	rdlong	muldivb_, fp
0c3f8     0C 4E 85 F1 | 	sub	fp, #12
0c3fc     BA 00 A0 FD | 	call	#divide_
0c400     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c404     50 00 90 FD | 	jmp	#LR__1026
0c408                 | LR__1024
0c408                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c408     08 4E 05 F1 | 	add	fp, #8
0c40c     A7 60 02 FB | 	rdlong	muldivb_, fp
0c410     08 4E 85 F1 | 	sub	fp, #8
0c414     1C 60 0E F2 | 	cmp	muldivb_, #28 wz
0c418     14 4E 05 A1 |  if_e	add	fp, #20
0c41c     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c420     14 4E 85 A1 |  if_e	sub	fp, #20
0c424     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c428     1C 00 90 5D |  if_ne	jmp	#LR__1025
0c42c     A7 5E 02 FB | 	rdlong	muldiva_, fp
0c430     0C 4E 05 F1 | 	add	fp, #12
0c434     A7 60 02 FB | 	rdlong	muldivb_, fp
0c438     0C 4E 85 F1 | 	sub	fp, #12
0c43c     BA 00 A0 FD | 	call	#divide_
0c440     A7 5E 62 FC | 	wrlong	muldiva_, fp
0c444     10 00 90 FD | 	jmp	#LR__1026
0c448                 | LR__1025
0c448     A7 16 68 FC | 	wrlong	#11, fp
0c44c     08 4E 05 F1 | 	add	fp, #8
0c450     A7 FE 69 FC | 	wrlong	#255, fp
0c454     08 4E 85 F1 | 	sub	fp, #8
0c458                 | LR__1026
0c458     A7 12 02 F6 | 	mov	arg01, fp
0c45c     CC C3 BF FD | 	call	#_push
0c460     A7 F0 03 F6 | 	mov	ptra, fp
0c464     B2 00 A0 FD | 	call	#popregs_
0c468                 | _do_mod_ret
0c468     2D 00 64 FD | 	ret
0c46c                 | 
0c46c                 | ' 
0c46c                 | ' sub do_shl 
0c46c                 | _do_shl
0c46c     03 4A 05 F6 | 	mov	COUNT_, #3
0c470     A8 00 A0 FD | 	call	#pushregs_
0c474     18 F0 07 F1 | 	add	ptra, #24
0c478     18 C3 BF FD | 	call	#_pop
0c47c     FD 12 02 F6 | 	mov	arg01, result1
0c480     FE 1E 02 F6 | 	mov	local01, result2
0c484     FF 20 02 F6 | 	mov	local02, result3
0c488     0C 4E 05 F1 | 	add	fp, #12
0c48c     A7 12 62 FC | 	wrlong	arg01, fp
0c490     04 4E 05 F1 | 	add	fp, #4
0c494     A7 1E 62 FC | 	wrlong	local01, fp
0c498     04 4E 05 F1 | 	add	fp, #4
0c49c     A7 20 62 FC | 	wrlong	local02, fp
0c4a0     14 4E 85 F1 | 	sub	fp, #20
0c4a4     EC C2 BF FD | 	call	#_pop
0c4a8     FF 22 02 F6 | 	mov	local03, result3
0c4ac     A7 FA 61 FC | 	wrlong	result1, fp
0c4b0     04 4E 05 F1 | 	add	fp, #4
0c4b4     A7 FC 61 FC | 	wrlong	result2, fp
0c4b8     04 4E 05 F1 | 	add	fp, #4
0c4bc     A7 22 62 FC | 	wrlong	local03, fp
0c4c0                 | ' 
0c4c0                 | ' t2=pop()
0c4c0                 | ' t1=pop()
0c4c0                 | ' 
0c4c0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c4c0     08 4E 85 F1 | 	sub	fp, #8
0c4c4     1C 22 0E F2 | 	cmp	local03, #28 wz
0c4c8     A7 22 02 AB |  if_e	rdlong	local03, fp
0c4cc     A7 22 62 AC |  if_e	wrlong	local03, fp
0c4d0     08 4E 05 A1 |  if_e	add	fp, #8
0c4d4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c4d8     08 4E 85 A1 |  if_e	sub	fp, #8
0c4dc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c4dc     14 4E 05 F1 | 	add	fp, #20
0c4e0     A7 22 02 FB | 	rdlong	local03, fp
0c4e4     14 4E 85 F1 | 	sub	fp, #20
0c4e8     1C 22 0E F2 | 	cmp	local03, #28 wz
0c4ec     18 00 90 5D |  if_ne	jmp	#LR__1030
0c4f0     0C 4E 05 F1 | 	add	fp, #12
0c4f4     A7 22 02 FB | 	rdlong	local03, fp
0c4f8     A7 22 62 FC | 	wrlong	local03, fp
0c4fc     08 4E 05 F1 | 	add	fp, #8
0c500     A7 3A 68 FC | 	wrlong	#29, fp
0c504     14 4E 85 F1 | 	sub	fp, #20
0c508                 | LR__1030
0c508                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0c508     08 4E 05 F1 | 	add	fp, #8
0c50c     A7 22 02 FB | 	rdlong	local03, fp
0c510     08 4E 85 F1 | 	sub	fp, #8
0c514     1F 22 0E F2 | 	cmp	local03, #31 wz
0c518     14 4E 05 51 |  if_ne	add	fp, #20
0c51c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c520     14 4E 85 51 |  if_ne	sub	fp, #20
0c524     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c528     08 4E 05 51 |  if_ne	add	fp, #8
0c52c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c530     08 4E 85 51 |  if_ne	sub	fp, #8
0c534     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c538     14 4E 05 51 |  if_ne	add	fp, #20
0c53c     14 4E 85 51 |  if_ne	sub	fp, #20
0c540     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c544     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c548     08 4E 05 A1 |  if_e	add	fp, #8
0c54c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c550     08 4E 85 A1 |  if_e	sub	fp, #8
0c554     18 00 90 AD |  if_e	jmp	#LR__1031
0c558     A7 22 02 FB | 	rdlong	local03, fp
0c55c     0C 4E 05 F1 | 	add	fp, #12
0c560     A7 1E 02 FB | 	rdlong	local01, fp
0c564     0C 4E 85 F1 | 	sub	fp, #12
0c568     0F 23 62 F0 | 	shl	local03, local01
0c56c     A7 22 62 FC | 	wrlong	local03, fp
0c570                 | LR__1031
0c570     A7 12 02 F6 | 	mov	arg01, fp
0c574     B4 C2 BF FD | 	call	#_push
0c578     A7 F0 03 F6 | 	mov	ptra, fp
0c57c     B2 00 A0 FD | 	call	#popregs_
0c580                 | _do_shl_ret
0c580     2D 00 64 FD | 	ret
0c584                 | 
0c584                 | ' 
0c584                 | ' sub do_shr 
0c584                 | _do_shr
0c584     03 4A 05 F6 | 	mov	COUNT_, #3
0c588     A8 00 A0 FD | 	call	#pushregs_
0c58c     18 F0 07 F1 | 	add	ptra, #24
0c590     00 C2 BF FD | 	call	#_pop
0c594     FD 12 02 F6 | 	mov	arg01, result1
0c598     FE 1E 02 F6 | 	mov	local01, result2
0c59c     FF 20 02 F6 | 	mov	local02, result3
0c5a0     0C 4E 05 F1 | 	add	fp, #12
0c5a4     A7 12 62 FC | 	wrlong	arg01, fp
0c5a8     04 4E 05 F1 | 	add	fp, #4
0c5ac     A7 1E 62 FC | 	wrlong	local01, fp
0c5b0     04 4E 05 F1 | 	add	fp, #4
0c5b4     A7 20 62 FC | 	wrlong	local02, fp
0c5b8     14 4E 85 F1 | 	sub	fp, #20
0c5bc     D4 C1 BF FD | 	call	#_pop
0c5c0     FF 22 02 F6 | 	mov	local03, result3
0c5c4     A7 FA 61 FC | 	wrlong	result1, fp
0c5c8     04 4E 05 F1 | 	add	fp, #4
0c5cc     A7 FC 61 FC | 	wrlong	result2, fp
0c5d0     04 4E 05 F1 | 	add	fp, #4
0c5d4     A7 22 62 FC | 	wrlong	local03, fp
0c5d8                 | ' t2=pop()
0c5d8                 | ' t1=pop()
0c5d8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c5d8     08 4E 85 F1 | 	sub	fp, #8
0c5dc     1C 22 0E F2 | 	cmp	local03, #28 wz
0c5e0     A7 22 02 AB |  if_e	rdlong	local03, fp
0c5e4     A7 22 62 AC |  if_e	wrlong	local03, fp
0c5e8     08 4E 05 A1 |  if_e	add	fp, #8
0c5ec     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c5f0     08 4E 85 A1 |  if_e	sub	fp, #8
0c5f4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c5f4     14 4E 05 F1 | 	add	fp, #20
0c5f8     A7 22 02 FB | 	rdlong	local03, fp
0c5fc     14 4E 85 F1 | 	sub	fp, #20
0c600     1C 22 0E F2 | 	cmp	local03, #28 wz
0c604     18 00 90 5D |  if_ne	jmp	#LR__1040
0c608     0C 4E 05 F1 | 	add	fp, #12
0c60c     A7 22 02 FB | 	rdlong	local03, fp
0c610     A7 22 62 FC | 	wrlong	local03, fp
0c614     08 4E 05 F1 | 	add	fp, #8
0c618     A7 3A 68 FC | 	wrlong	#29, fp
0c61c     14 4E 85 F1 | 	sub	fp, #20
0c620                 | LR__1040
0c620                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0c620     08 4E 05 F1 | 	add	fp, #8
0c624     A7 22 02 FB | 	rdlong	local03, fp
0c628     08 4E 85 F1 | 	sub	fp, #8
0c62c     1F 22 0E F2 | 	cmp	local03, #31 wz
0c630     14 4E 05 51 |  if_ne	add	fp, #20
0c634     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c638     14 4E 85 51 |  if_ne	sub	fp, #20
0c63c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c640     08 4E 05 51 |  if_ne	add	fp, #8
0c644     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c648     08 4E 85 51 |  if_ne	sub	fp, #8
0c64c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c650     14 4E 05 51 |  if_ne	add	fp, #20
0c654     14 4E 85 51 |  if_ne	sub	fp, #20
0c658     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c65c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c660     08 4E 05 A1 |  if_e	add	fp, #8
0c664     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c668     08 4E 85 A1 |  if_e	sub	fp, #8
0c66c     18 00 90 AD |  if_e	jmp	#LR__1041
0c670     A7 22 02 FB | 	rdlong	local03, fp
0c674     0C 4E 05 F1 | 	add	fp, #12
0c678     A7 1E 02 FB | 	rdlong	local01, fp
0c67c     0C 4E 85 F1 | 	sub	fp, #12
0c680     0F 23 42 F0 | 	shr	local03, local01
0c684     A7 22 62 FC | 	wrlong	local03, fp
0c688                 | LR__1041
0c688     A7 12 02 F6 | 	mov	arg01, fp
0c68c     9C C1 BF FD | 	call	#_push
0c690     A7 F0 03 F6 | 	mov	ptra, fp
0c694     B2 00 A0 FD | 	call	#popregs_
0c698                 | _do_shr_ret
0c698     2D 00 64 FD | 	ret
0c69c                 | 
0c69c                 | ' 
0c69c                 | ' sub do_power 
0c69c                 | _do_power
0c69c     02 4A 05 F6 | 	mov	COUNT_, #2
0c6a0     A8 00 A0 FD | 	call	#pushregs_
0c6a4     18 F0 07 F1 | 	add	ptra, #24
0c6a8     E8 C0 BF FD | 	call	#_pop
0c6ac     FD 14 02 F6 | 	mov	arg02, result1
0c6b0     FE 12 02 F6 | 	mov	arg01, result2
0c6b4     FF 1E 02 F6 | 	mov	local01, result3
0c6b8     0C 4E 05 F1 | 	add	fp, #12
0c6bc     A7 14 62 FC | 	wrlong	arg02, fp
0c6c0     04 4E 05 F1 | 	add	fp, #4
0c6c4     A7 12 62 FC | 	wrlong	arg01, fp
0c6c8     04 4E 05 F1 | 	add	fp, #4
0c6cc     A7 1E 62 FC | 	wrlong	local01, fp
0c6d0     14 4E 85 F1 | 	sub	fp, #20
0c6d4     BC C0 BF FD | 	call	#_pop
0c6d8     A7 FA 61 FC | 	wrlong	result1, fp
0c6dc     04 4E 05 F1 | 	add	fp, #4
0c6e0     A7 FC 61 FC | 	wrlong	result2, fp
0c6e4     04 4E 05 F1 | 	add	fp, #4
0c6e8     A7 FE 61 FC | 	wrlong	result3, fp
0c6ec                 | ' t2=pop()
0c6ec                 | ' t1=pop()
0c6ec                 | ' 
0c6ec                 | ' 
0c6ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0c6ec     08 4E 85 F1 | 	sub	fp, #8
0c6f0     1F FE 0D F2 | 	cmp	result3, #31 wz
0c6f4     14 4E 05 51 |  if_ne	add	fp, #20
0c6f8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c6fc     14 4E 85 51 |  if_ne	sub	fp, #20
0c700     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c704     A7 18 68 AC |  if_e	wrlong	#12, fp
0c708     08 4E 05 A1 |  if_e	add	fp, #8
0c70c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c710     08 4E 85 A1 |  if_e	sub	fp, #8
0c714     38 01 90 AD |  if_e	jmp	#LR__1055
0c718                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c718     08 4E 05 F1 | 	add	fp, #8
0c71c     A7 14 02 FB | 	rdlong	arg02, fp
0c720     08 4E 85 F1 | 	sub	fp, #8
0c724     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c728     28 00 90 5D |  if_ne	jmp	#LR__1050
0c72c     08 4E 05 F1 | 	add	fp, #8
0c730     A7 3C 68 FC | 	wrlong	#30, fp
0c734     08 4E 85 F1 | 	sub	fp, #8
0c738     A7 12 02 FB | 	rdlong	arg01, fp
0c73c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c740     1F 20 C6 C9 |  if_b	decod	local02, #31
0c744     00 20 06 36 |  if_ae	mov	local02, #0
0c748     B0 AE B0 FD | 	call	#__system___float_fromuns
0c74c     10 FB 61 F5 | 	xor	result1, local02
0c750     A7 FA 61 FC | 	wrlong	result1, fp
0c754                 | LR__1050
0c754                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0c754     08 4E 05 F1 | 	add	fp, #8
0c758     A7 14 02 FB | 	rdlong	arg02, fp
0c75c     08 4E 85 F1 | 	sub	fp, #8
0c760     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c764     18 00 90 5D |  if_ne	jmp	#LR__1051
0c768     08 4E 05 F1 | 	add	fp, #8
0c76c     A7 3C 68 FC | 	wrlong	#30, fp
0c770     08 4E 85 F1 | 	sub	fp, #8
0c774     A7 12 02 FB | 	rdlong	arg01, fp
0c778     80 AE B0 FD | 	call	#__system___float_fromuns
0c77c     A7 FA 61 FC | 	wrlong	result1, fp
0c780                 | LR__1051
0c780                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c780     14 4E 05 F1 | 	add	fp, #20
0c784     A7 14 02 FB | 	rdlong	arg02, fp
0c788     14 4E 85 F1 | 	sub	fp, #20
0c78c     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c790     34 00 90 5D |  if_ne	jmp	#LR__1052
0c794     14 4E 05 F1 | 	add	fp, #20
0c798     A7 3C 68 FC | 	wrlong	#30, fp
0c79c     08 4E 85 F1 | 	sub	fp, #8
0c7a0     A7 12 02 FB | 	rdlong	arg01, fp
0c7a4     0C 4E 85 F1 | 	sub	fp, #12
0c7a8     09 13 52 F6 | 	abs	arg01, arg01 wc
0c7ac     1F 20 C6 C9 |  if_b	decod	local02, #31
0c7b0     00 20 06 36 |  if_ae	mov	local02, #0
0c7b4     44 AE B0 FD | 	call	#__system___float_fromuns
0c7b8     10 FB 61 F5 | 	xor	result1, local02
0c7bc     0C 4E 05 F1 | 	add	fp, #12
0c7c0     A7 FA 61 FC | 	wrlong	result1, fp
0c7c4     0C 4E 85 F1 | 	sub	fp, #12
0c7c8                 | LR__1052
0c7c8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c7c8     14 4E 05 F1 | 	add	fp, #20
0c7cc     A7 14 02 FB | 	rdlong	arg02, fp
0c7d0     14 4E 85 F1 | 	sub	fp, #20
0c7d4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c7d8     24 00 90 5D |  if_ne	jmp	#LR__1053
0c7dc     14 4E 05 F1 | 	add	fp, #20
0c7e0     A7 3C 68 FC | 	wrlong	#30, fp
0c7e4     08 4E 85 F1 | 	sub	fp, #8
0c7e8     A7 12 02 FB | 	rdlong	arg01, fp
0c7ec     0C 4E 85 F1 | 	sub	fp, #12
0c7f0     08 AE B0 FD | 	call	#__system___float_fromuns
0c7f4     0C 4E 05 F1 | 	add	fp, #12
0c7f8     A7 FA 61 FC | 	wrlong	result1, fp
0c7fc     0C 4E 85 F1 | 	sub	fp, #12
0c800                 | LR__1053
0c800                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0c800     08 4E 05 F1 | 	add	fp, #8
0c804     A7 14 02 FB | 	rdlong	arg02, fp
0c808     08 4E 85 F1 | 	sub	fp, #8
0c80c     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c810     14 4E 05 A1 |  if_e	add	fp, #20
0c814     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c818     14 4E 85 A1 |  if_e	sub	fp, #20
0c81c     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c820     1C 00 90 5D |  if_ne	jmp	#LR__1054
0c824     A7 12 02 FB | 	rdlong	arg01, fp
0c828     0C 4E 05 F1 | 	add	fp, #12
0c82c     A7 14 02 FB | 	rdlong	arg02, fp
0c830     0C 4E 85 F1 | 	sub	fp, #12
0c834     5C BD B0 FD | 	call	#__system____builtin_powf
0c838     A7 FA 61 FC | 	wrlong	result1, fp
0c83c     10 00 90 FD | 	jmp	#LR__1055
0c840                 | LR__1054
0c840     A7 1A 68 FC | 	wrlong	#13, fp
0c844     08 4E 05 F1 | 	add	fp, #8
0c848     A7 FE 69 FC | 	wrlong	#255, fp
0c84c     08 4E 85 F1 | 	sub	fp, #8
0c850                 | LR__1055
0c850     A7 12 02 F6 | 	mov	arg01, fp
0c854     D4 BF BF FD | 	call	#_push
0c858     A7 F0 03 F6 | 	mov	ptra, fp
0c85c     B2 00 A0 FD | 	call	#popregs_
0c860                 | _do_power_ret
0c860     2D 00 64 FD | 	ret
0c864                 | 
0c864                 | ' 
0c864                 | ' 
0c864                 | ' sub do_eq
0c864                 | _do_eq
0c864     05 4A 05 F6 | 	mov	COUNT_, #5
0c868     A8 00 A0 FD | 	call	#pushregs_
0c86c     18 F0 07 F1 | 	add	ptra, #24
0c870     20 BF BF FD | 	call	#_pop
0c874     FD 1E 02 F6 | 	mov	local01, result1
0c878     FE 20 02 F6 | 	mov	local02, result2
0c87c     FF 22 02 F6 | 	mov	local03, result3
0c880     0C 4E 05 F1 | 	add	fp, #12
0c884     A7 1E 62 FC | 	wrlong	local01, fp
0c888     04 4E 05 F1 | 	add	fp, #4
0c88c     A7 20 62 FC | 	wrlong	local02, fp
0c890     04 4E 05 F1 | 	add	fp, #4
0c894     A7 22 62 FC | 	wrlong	local03, fp
0c898     14 4E 85 F1 | 	sub	fp, #20
0c89c     F4 BE BF FD | 	call	#_pop
0c8a0     FF 22 02 F6 | 	mov	local03, result3
0c8a4     A7 FA 61 FC | 	wrlong	result1, fp
0c8a8     04 4E 05 F1 | 	add	fp, #4
0c8ac     A7 FC 61 FC | 	wrlong	result2, fp
0c8b0     04 4E 05 F1 | 	add	fp, #4
0c8b4     A7 22 62 FC | 	wrlong	local03, fp
0c8b8                 | ' t2=pop()
0c8b8                 | ' t1=pop()
0c8b8                 | ' 
0c8b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0c8b8     08 4E 85 F1 | 	sub	fp, #8
0c8bc     1F 22 0E F2 | 	cmp	local03, #31 wz
0c8c0     14 4E 05 A1 |  if_e	add	fp, #20
0c8c4     A7 24 02 AB |  if_e	rdlong	local04, fp
0c8c8     14 4E 85 A1 |  if_e	sub	fp, #20
0c8cc     12 23 02 A6 |  if_e	mov	local03, local04
0c8d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0c8d4     28 00 90 5D |  if_ne	jmp	#LR__1060
0c8d8     00 1E 06 F6 | 	mov	local01, #0
0c8dc     A7 12 02 FB | 	rdlong	arg01, fp
0c8e0     0C 4E 05 F1 | 	add	fp, #12
0c8e4     A7 14 02 FB | 	rdlong	arg02, fp
0c8e8     0C 4E 85 F1 | 	sub	fp, #12
0c8ec     4C 86 B0 FD | 	call	#__system___string_cmp
0c8f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c8f4     00 1E 26 A6 |  if_e	not	local01, #0
0c8f8     A7 1E 62 FC | 	wrlong	local01, fp
0c8fc     04 03 90 FD | 	jmp	#LR__1070
0c900                 | LR__1060
0c900                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0c900     08 4E 05 F1 | 	add	fp, #8
0c904     A7 1E 02 FB | 	rdlong	local01, fp
0c908     08 4E 85 F1 | 	sub	fp, #8
0c90c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c910     14 4E 05 A1 |  if_e	add	fp, #20
0c914     A7 24 02 AB |  if_e	rdlong	local04, fp
0c918     14 4E 85 A1 |  if_e	sub	fp, #20
0c91c     12 23 02 A6 |  if_e	mov	local03, local04
0c920     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c924     2C 00 90 5D |  if_ne	jmp	#LR__1061
0c928     00 1E 06 F6 | 	mov	local01, #0
0c92c     A7 12 02 FB | 	rdlong	arg01, fp
0c930     0C 4E 05 F1 | 	add	fp, #12
0c934     A7 14 02 FB | 	rdlong	arg02, fp
0c938     0C 4E 85 F1 | 	sub	fp, #12
0c93c     01 16 06 F6 | 	mov	arg03, #1
0c940     18 B4 B0 FD | 	call	#__system___float_cmp
0c944     00 FA 0D F2 | 	cmp	result1, #0 wz
0c948     00 1E 26 A6 |  if_e	not	local01, #0
0c94c     A7 1E 62 FC | 	wrlong	local01, fp
0c950     B0 02 90 FD | 	jmp	#LR__1070
0c954                 | LR__1061
0c954                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0c954     08 4E 05 F1 | 	add	fp, #8
0c958     A7 1E 02 FB | 	rdlong	local01, fp
0c95c     08 4E 85 F1 | 	sub	fp, #8
0c960     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c964     14 4E 05 A1 |  if_e	add	fp, #20
0c968     A7 24 02 AB |  if_e	rdlong	local04, fp
0c96c     14 4E 85 A1 |  if_e	sub	fp, #20
0c970     12 23 02 A6 |  if_e	mov	local03, local04
0c974     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c978     48 00 90 5D |  if_ne	jmp	#LR__1062
0c97c     00 1E 06 F6 | 	mov	local01, #0
0c980     A7 20 02 FB | 	rdlong	local02, fp
0c984     0C 4E 05 F1 | 	add	fp, #12
0c988     A7 12 02 FB | 	rdlong	arg01, fp
0c98c     0C 4E 85 F1 | 	sub	fp, #12
0c990     09 13 52 F6 | 	abs	arg01, arg01 wc
0c994     1F 26 C6 C9 |  if_b	decod	local05, #31
0c998     00 26 06 36 |  if_ae	mov	local05, #0
0c99c     5C AC B0 FD | 	call	#__system___float_fromuns
0c9a0     13 FB 61 F5 | 	xor	result1, local05
0c9a4     FD 14 02 F6 | 	mov	arg02, result1
0c9a8     10 13 02 F6 | 	mov	arg01, local02
0c9ac     01 16 06 F6 | 	mov	arg03, #1
0c9b0     A8 B3 B0 FD | 	call	#__system___float_cmp
0c9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0c9b8     00 1E 26 A6 |  if_e	not	local01, #0
0c9bc     A7 1E 62 FC | 	wrlong	local01, fp
0c9c0     40 02 90 FD | 	jmp	#LR__1070
0c9c4                 | LR__1062
0c9c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0c9c4     08 4E 05 F1 | 	add	fp, #8
0c9c8     A7 1E 02 FB | 	rdlong	local01, fp
0c9cc     08 4E 85 F1 | 	sub	fp, #8
0c9d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c9d4     14 4E 05 A1 |  if_e	add	fp, #20
0c9d8     A7 24 02 AB |  if_e	rdlong	local04, fp
0c9dc     14 4E 85 A1 |  if_e	sub	fp, #20
0c9e0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0c9e4     38 00 90 5D |  if_ne	jmp	#LR__1063
0c9e8     00 1E 06 F6 | 	mov	local01, #0
0c9ec     A7 20 02 FB | 	rdlong	local02, fp
0c9f0     0C 4E 05 F1 | 	add	fp, #12
0c9f4     A7 12 02 FB | 	rdlong	arg01, fp
0c9f8     0C 4E 85 F1 | 	sub	fp, #12
0c9fc     FC AB B0 FD | 	call	#__system___float_fromuns
0ca00     FD 14 02 F6 | 	mov	arg02, result1
0ca04     10 13 02 F6 | 	mov	arg01, local02
0ca08     01 16 06 F6 | 	mov	arg03, #1
0ca0c     4C B3 B0 FD | 	call	#__system___float_cmp
0ca10     00 FA 0D F2 | 	cmp	result1, #0 wz
0ca14     00 1E 26 A6 |  if_e	not	local01, #0
0ca18     A7 1E 62 FC | 	wrlong	local01, fp
0ca1c     E4 01 90 FD | 	jmp	#LR__1070
0ca20                 | LR__1063
0ca20                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0ca20     08 4E 05 F1 | 	add	fp, #8
0ca24     A7 1E 02 FB | 	rdlong	local01, fp
0ca28     08 4E 85 F1 | 	sub	fp, #8
0ca2c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ca30     14 4E 05 A1 |  if_e	add	fp, #20
0ca34     A7 22 02 AB |  if_e	rdlong	local03, fp
0ca38     14 4E 85 A1 |  if_e	sub	fp, #20
0ca3c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ca40     44 00 90 5D |  if_ne	jmp	#LR__1064
0ca44     00 1E 06 F6 | 	mov	local01, #0
0ca48     A7 12 02 FB | 	rdlong	arg01, fp
0ca4c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ca50     1F 26 C6 C9 |  if_b	decod	local05, #31
0ca54     00 26 06 36 |  if_ae	mov	local05, #0
0ca58     A0 AB B0 FD | 	call	#__system___float_fromuns
0ca5c     13 FB 61 F5 | 	xor	result1, local05
0ca60     FD 12 02 F6 | 	mov	arg01, result1
0ca64     0C 4E 05 F1 | 	add	fp, #12
0ca68     A7 14 02 FB | 	rdlong	arg02, fp
0ca6c     0C 4E 85 F1 | 	sub	fp, #12
0ca70     01 16 06 F6 | 	mov	arg03, #1
0ca74     E4 B2 B0 FD | 	call	#__system___float_cmp
0ca78     00 FA 0D F2 | 	cmp	result1, #0 wz
0ca7c     00 1E 26 A6 |  if_e	not	local01, #0
0ca80     A7 1E 62 FC | 	wrlong	local01, fp
0ca84     7C 01 90 FD | 	jmp	#LR__1070
0ca88                 | LR__1064
0ca88                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0ca88     08 4E 05 F1 | 	add	fp, #8
0ca8c     A7 1E 02 FB | 	rdlong	local01, fp
0ca90     08 4E 85 F1 | 	sub	fp, #8
0ca94     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ca98     14 4E 05 A1 |  if_e	add	fp, #20
0ca9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0caa0     14 4E 85 A1 |  if_e	sub	fp, #20
0caa4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0caa8     24 00 90 5D |  if_ne	jmp	#LR__1065
0caac     00 1E 06 F6 | 	mov	local01, #0
0cab0     A7 20 02 FB | 	rdlong	local02, fp
0cab4     0C 4E 05 F1 | 	add	fp, #12
0cab8     A7 22 02 FB | 	rdlong	local03, fp
0cabc     0C 4E 85 F1 | 	sub	fp, #12
0cac0     11 21 0A F2 | 	cmp	local02, local03 wz
0cac4     01 1E 66 A6 |  if_e	neg	local01, #1
0cac8     A7 1E 62 FC | 	wrlong	local01, fp
0cacc     34 01 90 FD | 	jmp	#LR__1070
0cad0                 | LR__1065
0cad0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0cad0     08 4E 05 F1 | 	add	fp, #8
0cad4     A7 1E 02 FB | 	rdlong	local01, fp
0cad8     08 4E 85 F1 | 	sub	fp, #8
0cadc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cae0     14 4E 05 A1 |  if_e	add	fp, #20
0cae4     A7 22 02 AB |  if_e	rdlong	local03, fp
0cae8     14 4E 85 A1 |  if_e	sub	fp, #20
0caec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0caf0     24 00 90 5D |  if_ne	jmp	#LR__1066
0caf4     00 1E 06 F6 | 	mov	local01, #0
0caf8     A7 20 02 FB | 	rdlong	local02, fp
0cafc     0C 4E 05 F1 | 	add	fp, #12
0cb00     A7 22 02 FB | 	rdlong	local03, fp
0cb04     0C 4E 85 F1 | 	sub	fp, #12
0cb08     11 21 0A F2 | 	cmp	local02, local03 wz
0cb0c     01 1E 66 A6 |  if_e	neg	local01, #1
0cb10     A7 1E 62 FC | 	wrlong	local01, fp
0cb14     EC 00 90 FD | 	jmp	#LR__1070
0cb18                 | LR__1066
0cb18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0cb18     08 4E 05 F1 | 	add	fp, #8
0cb1c     A7 1E 02 FB | 	rdlong	local01, fp
0cb20     08 4E 85 F1 | 	sub	fp, #8
0cb24     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cb28     14 4E 05 A1 |  if_e	add	fp, #20
0cb2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cb30     14 4E 85 A1 |  if_e	sub	fp, #20
0cb34     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cb38     34 00 90 5D |  if_ne	jmp	#LR__1067
0cb3c     00 1E 06 F6 | 	mov	local01, #0
0cb40     A7 12 02 FB | 	rdlong	arg01, fp
0cb44     B4 AA B0 FD | 	call	#__system___float_fromuns
0cb48     FD 12 02 F6 | 	mov	arg01, result1
0cb4c     0C 4E 05 F1 | 	add	fp, #12
0cb50     A7 14 02 FB | 	rdlong	arg02, fp
0cb54     0C 4E 85 F1 | 	sub	fp, #12
0cb58     01 16 06 F6 | 	mov	arg03, #1
0cb5c     FC B1 B0 FD | 	call	#__system___float_cmp
0cb60     00 FA 0D F2 | 	cmp	result1, #0 wz
0cb64     00 1E 26 A6 |  if_e	not	local01, #0
0cb68     A7 1E 62 FC | 	wrlong	local01, fp
0cb6c     94 00 90 FD | 	jmp	#LR__1070
0cb70                 | LR__1067
0cb70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0cb70     08 4E 05 F1 | 	add	fp, #8
0cb74     A7 1E 02 FB | 	rdlong	local01, fp
0cb78     08 4E 85 F1 | 	sub	fp, #8
0cb7c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cb80     14 4E 05 A1 |  if_e	add	fp, #20
0cb84     A7 22 02 AB |  if_e	rdlong	local03, fp
0cb88     14 4E 85 A1 |  if_e	sub	fp, #20
0cb8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cb90     24 00 90 5D |  if_ne	jmp	#LR__1068
0cb94     00 1E 06 F6 | 	mov	local01, #0
0cb98     A7 20 02 FB | 	rdlong	local02, fp
0cb9c     0C 4E 05 F1 | 	add	fp, #12
0cba0     A7 22 02 FB | 	rdlong	local03, fp
0cba4     0C 4E 85 F1 | 	sub	fp, #12
0cba8     11 21 0A F2 | 	cmp	local02, local03 wz
0cbac     01 1E 66 A6 |  if_e	neg	local01, #1
0cbb0     A7 1E 62 FC | 	wrlong	local01, fp
0cbb4     4C 00 90 FD | 	jmp	#LR__1070
0cbb8                 | LR__1068
0cbb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0cbb8     08 4E 05 F1 | 	add	fp, #8
0cbbc     A7 1E 02 FB | 	rdlong	local01, fp
0cbc0     08 4E 85 F1 | 	sub	fp, #8
0cbc4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cbc8     14 4E 05 A1 |  if_e	add	fp, #20
0cbcc     A7 22 02 AB |  if_e	rdlong	local03, fp
0cbd0     14 4E 85 A1 |  if_e	sub	fp, #20
0cbd4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cbd8     24 00 90 5D |  if_ne	jmp	#LR__1069
0cbdc     00 1E 06 F6 | 	mov	local01, #0
0cbe0     A7 20 02 FB | 	rdlong	local02, fp
0cbe4     0C 4E 05 F1 | 	add	fp, #12
0cbe8     A7 22 02 FB | 	rdlong	local03, fp
0cbec     0C 4E 85 F1 | 	sub	fp, #12
0cbf0     11 21 0A F2 | 	cmp	local02, local03 wz
0cbf4     01 1E 66 A6 |  if_e	neg	local01, #1
0cbf8     A7 1E 62 FC | 	wrlong	local01, fp
0cbfc     04 00 90 FD | 	jmp	#LR__1070
0cc00                 | LR__1069
0cc00     A7 00 68 FC | 	wrlong	#0, fp
0cc04                 | LR__1070
0cc04     08 4E 05 F1 | 	add	fp, #8
0cc08     A7 38 68 FC | 	wrlong	#28, fp
0cc0c     08 4E 85 F1 | 	sub	fp, #8
0cc10     A7 12 02 F6 | 	mov	arg01, fp
0cc14     14 BC BF FD | 	call	#_push
0cc18     A7 F0 03 F6 | 	mov	ptra, fp
0cc1c     B2 00 A0 FD | 	call	#popregs_
0cc20                 | _do_eq_ret
0cc20     2D 00 64 FD | 	ret
0cc24                 | 
0cc24                 | ' 
0cc24                 | ' sub do_gt
0cc24                 | _do_gt
0cc24     05 4A 05 F6 | 	mov	COUNT_, #5
0cc28     A8 00 A0 FD | 	call	#pushregs_
0cc2c     18 F0 07 F1 | 	add	ptra, #24
0cc30     60 BB BF FD | 	call	#_pop
0cc34     FD 1E 02 F6 | 	mov	local01, result1
0cc38     FE 20 02 F6 | 	mov	local02, result2
0cc3c     FF 22 02 F6 | 	mov	local03, result3
0cc40     0C 4E 05 F1 | 	add	fp, #12
0cc44     A7 1E 62 FC | 	wrlong	local01, fp
0cc48     04 4E 05 F1 | 	add	fp, #4
0cc4c     A7 20 62 FC | 	wrlong	local02, fp
0cc50     04 4E 05 F1 | 	add	fp, #4
0cc54     A7 22 62 FC | 	wrlong	local03, fp
0cc58     14 4E 85 F1 | 	sub	fp, #20
0cc5c     34 BB BF FD | 	call	#_pop
0cc60     FF 22 02 F6 | 	mov	local03, result3
0cc64     A7 FA 61 FC | 	wrlong	result1, fp
0cc68     04 4E 05 F1 | 	add	fp, #4
0cc6c     A7 FC 61 FC | 	wrlong	result2, fp
0cc70     04 4E 05 F1 | 	add	fp, #4
0cc74     A7 22 62 FC | 	wrlong	local03, fp
0cc78                 | ' t2=pop()
0cc78                 | ' t1=pop()
0cc78                 | ' 
0cc78                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0cc78     08 4E 85 F1 | 	sub	fp, #8
0cc7c     1F 22 0E F2 | 	cmp	local03, #31 wz
0cc80     14 4E 05 A1 |  if_e	add	fp, #20
0cc84     A7 24 02 AB |  if_e	rdlong	local04, fp
0cc88     14 4E 85 A1 |  if_e	sub	fp, #20
0cc8c     12 23 02 A6 |  if_e	mov	local03, local04
0cc90     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cc94     28 00 90 5D |  if_ne	jmp	#LR__1080
0cc98     00 1E 06 F6 | 	mov	local01, #0
0cc9c     A7 12 02 FB | 	rdlong	arg01, fp
0cca0     0C 4E 05 F1 | 	add	fp, #12
0cca4     A7 14 02 FB | 	rdlong	arg02, fp
0cca8     0C 4E 85 F1 | 	sub	fp, #12
0ccac     8C 82 B0 FD | 	call	#__system___string_cmp
0ccb0     01 FA 55 F2 | 	cmps	result1, #1 wc
0ccb4     00 1E 26 36 |  if_ae	not	local01, #0
0ccb8     A7 1E 62 FC | 	wrlong	local01, fp
0ccbc     04 03 90 FD | 	jmp	#LR__1090
0ccc0                 | LR__1080
0ccc0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0ccc0     08 4E 05 F1 | 	add	fp, #8
0ccc4     A7 1E 02 FB | 	rdlong	local01, fp
0ccc8     08 4E 85 F1 | 	sub	fp, #8
0cccc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ccd0     14 4E 05 A1 |  if_e	add	fp, #20
0ccd4     A7 24 02 AB |  if_e	rdlong	local04, fp
0ccd8     14 4E 85 A1 |  if_e	sub	fp, #20
0ccdc     12 23 02 A6 |  if_e	mov	local03, local04
0cce0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cce4     2C 00 90 5D |  if_ne	jmp	#LR__1081
0cce8     00 1E 06 F6 | 	mov	local01, #0
0ccec     A7 12 02 FB | 	rdlong	arg01, fp
0ccf0     0C 4E 05 F1 | 	add	fp, #12
0ccf4     A7 14 02 FB | 	rdlong	arg02, fp
0ccf8     0C 4E 85 F1 | 	sub	fp, #12
0ccfc     01 16 66 F6 | 	neg	arg03, #1
0cd00     58 B0 B0 FD | 	call	#__system___float_cmp
0cd04     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd08     00 1E 26 36 |  if_ae	not	local01, #0
0cd0c     A7 1E 62 FC | 	wrlong	local01, fp
0cd10     B0 02 90 FD | 	jmp	#LR__1090
0cd14                 | LR__1081
0cd14                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0cd14     08 4E 05 F1 | 	add	fp, #8
0cd18     A7 1E 02 FB | 	rdlong	local01, fp
0cd1c     08 4E 85 F1 | 	sub	fp, #8
0cd20     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cd24     14 4E 05 A1 |  if_e	add	fp, #20
0cd28     A7 24 02 AB |  if_e	rdlong	local04, fp
0cd2c     14 4E 85 A1 |  if_e	sub	fp, #20
0cd30     12 23 02 A6 |  if_e	mov	local03, local04
0cd34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cd38     48 00 90 5D |  if_ne	jmp	#LR__1082
0cd3c     00 1E 06 F6 | 	mov	local01, #0
0cd40     A7 20 02 FB | 	rdlong	local02, fp
0cd44     0C 4E 05 F1 | 	add	fp, #12
0cd48     A7 12 02 FB | 	rdlong	arg01, fp
0cd4c     0C 4E 85 F1 | 	sub	fp, #12
0cd50     09 13 52 F6 | 	abs	arg01, arg01 wc
0cd54     1F 26 C6 C9 |  if_b	decod	local05, #31
0cd58     00 26 06 36 |  if_ae	mov	local05, #0
0cd5c     9C A8 B0 FD | 	call	#__system___float_fromuns
0cd60     13 FB 61 F5 | 	xor	result1, local05
0cd64     FD 14 02 F6 | 	mov	arg02, result1
0cd68     10 13 02 F6 | 	mov	arg01, local02
0cd6c     01 16 66 F6 | 	neg	arg03, #1
0cd70     E8 AF B0 FD | 	call	#__system___float_cmp
0cd74     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd78     00 1E 26 36 |  if_ae	not	local01, #0
0cd7c     A7 1E 62 FC | 	wrlong	local01, fp
0cd80     40 02 90 FD | 	jmp	#LR__1090
0cd84                 | LR__1082
0cd84                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0cd84     08 4E 05 F1 | 	add	fp, #8
0cd88     A7 1E 02 FB | 	rdlong	local01, fp
0cd8c     08 4E 85 F1 | 	sub	fp, #8
0cd90     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cd94     14 4E 05 A1 |  if_e	add	fp, #20
0cd98     A7 24 02 AB |  if_e	rdlong	local04, fp
0cd9c     14 4E 85 A1 |  if_e	sub	fp, #20
0cda0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cda4     38 00 90 5D |  if_ne	jmp	#LR__1083
0cda8     00 1E 06 F6 | 	mov	local01, #0
0cdac     A7 20 02 FB | 	rdlong	local02, fp
0cdb0     0C 4E 05 F1 | 	add	fp, #12
0cdb4     A7 12 02 FB | 	rdlong	arg01, fp
0cdb8     0C 4E 85 F1 | 	sub	fp, #12
0cdbc     3C A8 B0 FD | 	call	#__system___float_fromuns
0cdc0     FD 14 02 F6 | 	mov	arg02, result1
0cdc4     10 13 02 F6 | 	mov	arg01, local02
0cdc8     01 16 66 F6 | 	neg	arg03, #1
0cdcc     8C AF B0 FD | 	call	#__system___float_cmp
0cdd0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cdd4     00 1E 26 36 |  if_ae	not	local01, #0
0cdd8     A7 1E 62 FC | 	wrlong	local01, fp
0cddc     E4 01 90 FD | 	jmp	#LR__1090
0cde0                 | LR__1083
0cde0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0cde0     08 4E 05 F1 | 	add	fp, #8
0cde4     A7 1E 02 FB | 	rdlong	local01, fp
0cde8     08 4E 85 F1 | 	sub	fp, #8
0cdec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cdf0     14 4E 05 A1 |  if_e	add	fp, #20
0cdf4     A7 22 02 AB |  if_e	rdlong	local03, fp
0cdf8     14 4E 85 A1 |  if_e	sub	fp, #20
0cdfc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ce00     44 00 90 5D |  if_ne	jmp	#LR__1084
0ce04     00 1E 06 F6 | 	mov	local01, #0
0ce08     A7 12 02 FB | 	rdlong	arg01, fp
0ce0c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ce10     1F 26 C6 C9 |  if_b	decod	local05, #31
0ce14     00 26 06 36 |  if_ae	mov	local05, #0
0ce18     E0 A7 B0 FD | 	call	#__system___float_fromuns
0ce1c     13 FB 61 F5 | 	xor	result1, local05
0ce20     FD 12 02 F6 | 	mov	arg01, result1
0ce24     0C 4E 05 F1 | 	add	fp, #12
0ce28     A7 14 02 FB | 	rdlong	arg02, fp
0ce2c     0C 4E 85 F1 | 	sub	fp, #12
0ce30     01 16 66 F6 | 	neg	arg03, #1
0ce34     24 AF B0 FD | 	call	#__system___float_cmp
0ce38     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce3c     00 1E 26 36 |  if_ae	not	local01, #0
0ce40     A7 1E 62 FC | 	wrlong	local01, fp
0ce44     7C 01 90 FD | 	jmp	#LR__1090
0ce48                 | LR__1084
0ce48                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0ce48     08 4E 05 F1 | 	add	fp, #8
0ce4c     A7 1E 02 FB | 	rdlong	local01, fp
0ce50     08 4E 85 F1 | 	sub	fp, #8
0ce54     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ce58     14 4E 05 A1 |  if_e	add	fp, #20
0ce5c     A7 22 02 AB |  if_e	rdlong	local03, fp
0ce60     14 4E 85 A1 |  if_e	sub	fp, #20
0ce64     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ce68     24 00 90 5D |  if_ne	jmp	#LR__1085
0ce6c     00 1E 06 F6 | 	mov	local01, #0
0ce70     A7 20 02 FB | 	rdlong	local02, fp
0ce74     0C 4E 05 F1 | 	add	fp, #12
0ce78     A7 22 02 FB | 	rdlong	local03, fp
0ce7c     0C 4E 85 F1 | 	sub	fp, #12
0ce80     11 21 5A F2 | 	cmps	local02, local03 wcz
0ce84     01 1E 66 16 |  if_a	neg	local01, #1
0ce88     A7 1E 62 FC | 	wrlong	local01, fp
0ce8c     34 01 90 FD | 	jmp	#LR__1090
0ce90                 | LR__1085
0ce90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0ce90     08 4E 05 F1 | 	add	fp, #8
0ce94     A7 1E 02 FB | 	rdlong	local01, fp
0ce98     08 4E 85 F1 | 	sub	fp, #8
0ce9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cea0     14 4E 05 A1 |  if_e	add	fp, #20
0cea4     A7 22 02 AB |  if_e	rdlong	local03, fp
0cea8     14 4E 85 A1 |  if_e	sub	fp, #20
0ceac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ceb0     24 00 90 5D |  if_ne	jmp	#LR__1086
0ceb4     00 1E 06 F6 | 	mov	local01, #0
0ceb8     A7 20 02 FB | 	rdlong	local02, fp
0cebc     0C 4E 05 F1 | 	add	fp, #12
0cec0     A7 22 02 FB | 	rdlong	local03, fp
0cec4     0C 4E 85 F1 | 	sub	fp, #12
0cec8     11 21 5A F2 | 	cmps	local02, local03 wcz
0cecc     01 1E 66 16 |  if_a	neg	local01, #1
0ced0     A7 1E 62 FC | 	wrlong	local01, fp
0ced4     EC 00 90 FD | 	jmp	#LR__1090
0ced8                 | LR__1086
0ced8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0ced8     08 4E 05 F1 | 	add	fp, #8
0cedc     A7 1E 02 FB | 	rdlong	local01, fp
0cee0     08 4E 85 F1 | 	sub	fp, #8
0cee4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cee8     14 4E 05 A1 |  if_e	add	fp, #20
0ceec     A7 22 02 AB |  if_e	rdlong	local03, fp
0cef0     14 4E 85 A1 |  if_e	sub	fp, #20
0cef4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cef8     34 00 90 5D |  if_ne	jmp	#LR__1087
0cefc     00 1E 06 F6 | 	mov	local01, #0
0cf00     A7 12 02 FB | 	rdlong	arg01, fp
0cf04     F4 A6 B0 FD | 	call	#__system___float_fromuns
0cf08     FD 12 02 F6 | 	mov	arg01, result1
0cf0c     0C 4E 05 F1 | 	add	fp, #12
0cf10     A7 14 02 FB | 	rdlong	arg02, fp
0cf14     0C 4E 85 F1 | 	sub	fp, #12
0cf18     01 16 66 F6 | 	neg	arg03, #1
0cf1c     3C AE B0 FD | 	call	#__system___float_cmp
0cf20     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf24     00 1E 26 36 |  if_ae	not	local01, #0
0cf28     A7 1E 62 FC | 	wrlong	local01, fp
0cf2c     94 00 90 FD | 	jmp	#LR__1090
0cf30                 | LR__1087
0cf30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0cf30     08 4E 05 F1 | 	add	fp, #8
0cf34     A7 1E 02 FB | 	rdlong	local01, fp
0cf38     08 4E 85 F1 | 	sub	fp, #8
0cf3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cf40     14 4E 05 A1 |  if_e	add	fp, #20
0cf44     A7 22 02 AB |  if_e	rdlong	local03, fp
0cf48     14 4E 85 A1 |  if_e	sub	fp, #20
0cf4c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf50     24 00 90 5D |  if_ne	jmp	#LR__1088
0cf54     00 1E 06 F6 | 	mov	local01, #0
0cf58     A7 20 02 FB | 	rdlong	local02, fp
0cf5c     0C 4E 05 F1 | 	add	fp, #12
0cf60     A7 22 02 FB | 	rdlong	local03, fp
0cf64     0C 4E 85 F1 | 	sub	fp, #12
0cf68     11 21 5A F2 | 	cmps	local02, local03 wcz
0cf6c     01 1E 66 16 |  if_a	neg	local01, #1
0cf70     A7 1E 62 FC | 	wrlong	local01, fp
0cf74     4C 00 90 FD | 	jmp	#LR__1090
0cf78                 | LR__1088
0cf78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0cf78     08 4E 05 F1 | 	add	fp, #8
0cf7c     A7 1E 02 FB | 	rdlong	local01, fp
0cf80     08 4E 85 F1 | 	sub	fp, #8
0cf84     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cf88     14 4E 05 A1 |  if_e	add	fp, #20
0cf8c     A7 22 02 AB |  if_e	rdlong	local03, fp
0cf90     14 4E 85 A1 |  if_e	sub	fp, #20
0cf94     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0cf98     24 00 90 5D |  if_ne	jmp	#LR__1089
0cf9c     00 1E 06 F6 | 	mov	local01, #0
0cfa0     A7 20 02 FB | 	rdlong	local02, fp
0cfa4     0C 4E 05 F1 | 	add	fp, #12
0cfa8     A7 22 02 FB | 	rdlong	local03, fp
0cfac     0C 4E 85 F1 | 	sub	fp, #12
0cfb0     11 21 1A F2 | 	cmp	local02, local03 wcz
0cfb4     01 1E 66 16 |  if_a	neg	local01, #1
0cfb8     A7 1E 62 FC | 	wrlong	local01, fp
0cfbc     04 00 90 FD | 	jmp	#LR__1090
0cfc0                 | LR__1089
0cfc0     A7 00 68 FC | 	wrlong	#0, fp
0cfc4                 | LR__1090
0cfc4     08 4E 05 F1 | 	add	fp, #8
0cfc8     A7 38 68 FC | 	wrlong	#28, fp
0cfcc     08 4E 85 F1 | 	sub	fp, #8
0cfd0     A7 12 02 F6 | 	mov	arg01, fp
0cfd4     54 B8 BF FD | 	call	#_push
0cfd8     A7 F0 03 F6 | 	mov	ptra, fp
0cfdc     B2 00 A0 FD | 	call	#popregs_
0cfe0                 | _do_gt_ret
0cfe0     2D 00 64 FD | 	ret
0cfe4                 | 
0cfe4                 | ' 
0cfe4                 | ' sub do_lt
0cfe4                 | _do_lt
0cfe4     05 4A 05 F6 | 	mov	COUNT_, #5
0cfe8     A8 00 A0 FD | 	call	#pushregs_
0cfec     18 F0 07 F1 | 	add	ptra, #24
0cff0     A0 B7 BF FD | 	call	#_pop
0cff4     FD 1E 02 F6 | 	mov	local01, result1
0cff8     FE 20 02 F6 | 	mov	local02, result2
0cffc     FF 22 02 F6 | 	mov	local03, result3
0d000     0C 4E 05 F1 | 	add	fp, #12
0d004     A7 1E 62 FC | 	wrlong	local01, fp
0d008     04 4E 05 F1 | 	add	fp, #4
0d00c     A7 20 62 FC | 	wrlong	local02, fp
0d010     04 4E 05 F1 | 	add	fp, #4
0d014     A7 22 62 FC | 	wrlong	local03, fp
0d018     14 4E 85 F1 | 	sub	fp, #20
0d01c     74 B7 BF FD | 	call	#_pop
0d020     FF 22 02 F6 | 	mov	local03, result3
0d024     A7 FA 61 FC | 	wrlong	result1, fp
0d028     04 4E 05 F1 | 	add	fp, #4
0d02c     A7 FC 61 FC | 	wrlong	result2, fp
0d030     04 4E 05 F1 | 	add	fp, #4
0d034     A7 22 62 FC | 	wrlong	local03, fp
0d038                 | ' t2=pop()
0d038                 | ' t1=pop()
0d038                 | ' 
0d038                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0d038     08 4E 85 F1 | 	sub	fp, #8
0d03c     1F 22 0E F2 | 	cmp	local03, #31 wz
0d040     14 4E 05 A1 |  if_e	add	fp, #20
0d044     A7 24 02 AB |  if_e	rdlong	local04, fp
0d048     14 4E 85 A1 |  if_e	sub	fp, #20
0d04c     12 23 02 A6 |  if_e	mov	local03, local04
0d050     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d054     28 00 90 5D |  if_ne	jmp	#LR__1100
0d058     00 1E 06 F6 | 	mov	local01, #0
0d05c     A7 12 02 FB | 	rdlong	arg01, fp
0d060     0C 4E 05 F1 | 	add	fp, #12
0d064     A7 14 02 FB | 	rdlong	arg02, fp
0d068     0C 4E 85 F1 | 	sub	fp, #12
0d06c     CC 7E B0 FD | 	call	#__system___string_cmp
0d070     00 FA 55 F2 | 	cmps	result1, #0 wc
0d074     00 1E 26 C6 |  if_b	not	local01, #0
0d078     A7 1E 62 FC | 	wrlong	local01, fp
0d07c     F4 02 90 FD | 	jmp	#LR__1110
0d080                 | LR__1100
0d080                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0d080     08 4E 05 F1 | 	add	fp, #8
0d084     A7 1E 02 FB | 	rdlong	local01, fp
0d088     08 4E 85 F1 | 	sub	fp, #8
0d08c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d090     14 4E 05 A1 |  if_e	add	fp, #20
0d094     A7 24 02 AB |  if_e	rdlong	local04, fp
0d098     14 4E 85 A1 |  if_e	sub	fp, #20
0d09c     12 23 02 A6 |  if_e	mov	local03, local04
0d0a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d0a4     2C 00 90 5D |  if_ne	jmp	#LR__1101
0d0a8     00 1E 06 F6 | 	mov	local01, #0
0d0ac     A7 12 02 FB | 	rdlong	arg01, fp
0d0b0     0C 4E 05 F1 | 	add	fp, #12
0d0b4     A7 14 02 FB | 	rdlong	arg02, fp
0d0b8     0C 4E 85 F1 | 	sub	fp, #12
0d0bc     01 16 06 F6 | 	mov	arg03, #1
0d0c0     98 AC B0 FD | 	call	#__system___float_cmp
0d0c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d0c8     00 1E 26 C6 |  if_b	not	local01, #0
0d0cc     A7 1E 62 FC | 	wrlong	local01, fp
0d0d0     A0 02 90 FD | 	jmp	#LR__1110
0d0d4                 | LR__1101
0d0d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0d0d4     08 4E 05 F1 | 	add	fp, #8
0d0d8     A7 1E 02 FB | 	rdlong	local01, fp
0d0dc     08 4E 85 F1 | 	sub	fp, #8
0d0e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d0e4     14 4E 05 A1 |  if_e	add	fp, #20
0d0e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d0ec     14 4E 85 A1 |  if_e	sub	fp, #20
0d0f0     12 23 02 A6 |  if_e	mov	local03, local04
0d0f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d0f8     48 00 90 5D |  if_ne	jmp	#LR__1102
0d0fc     00 1E 06 F6 | 	mov	local01, #0
0d100     A7 20 02 FB | 	rdlong	local02, fp
0d104     0C 4E 05 F1 | 	add	fp, #12
0d108     A7 12 02 FB | 	rdlong	arg01, fp
0d10c     0C 4E 85 F1 | 	sub	fp, #12
0d110     09 13 52 F6 | 	abs	arg01, arg01 wc
0d114     1F 26 C6 C9 |  if_b	decod	local05, #31
0d118     00 26 06 36 |  if_ae	mov	local05, #0
0d11c     DC A4 B0 FD | 	call	#__system___float_fromuns
0d120     13 FB 61 F5 | 	xor	result1, local05
0d124     FD 14 02 F6 | 	mov	arg02, result1
0d128     10 13 02 F6 | 	mov	arg01, local02
0d12c     01 16 06 F6 | 	mov	arg03, #1
0d130     28 AC B0 FD | 	call	#__system___float_cmp
0d134     00 FA 55 F2 | 	cmps	result1, #0 wc
0d138     00 1E 26 C6 |  if_b	not	local01, #0
0d13c     A7 1E 62 FC | 	wrlong	local01, fp
0d140     30 02 90 FD | 	jmp	#LR__1110
0d144                 | LR__1102
0d144                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0d144     08 4E 05 F1 | 	add	fp, #8
0d148     A7 1E 02 FB | 	rdlong	local01, fp
0d14c     08 4E 85 F1 | 	sub	fp, #8
0d150     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d154     14 4E 05 A1 |  if_e	add	fp, #20
0d158     A7 24 02 AB |  if_e	rdlong	local04, fp
0d15c     14 4E 85 A1 |  if_e	sub	fp, #20
0d160     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d164     38 00 90 5D |  if_ne	jmp	#LR__1103
0d168     00 1E 06 F6 | 	mov	local01, #0
0d16c     A7 20 02 FB | 	rdlong	local02, fp
0d170     0C 4E 05 F1 | 	add	fp, #12
0d174     A7 12 02 FB | 	rdlong	arg01, fp
0d178     0C 4E 85 F1 | 	sub	fp, #12
0d17c     7C A4 B0 FD | 	call	#__system___float_fromuns
0d180     FD 14 02 F6 | 	mov	arg02, result1
0d184     10 13 02 F6 | 	mov	arg01, local02
0d188     01 16 06 F6 | 	mov	arg03, #1
0d18c     CC AB B0 FD | 	call	#__system___float_cmp
0d190     00 FA 55 F2 | 	cmps	result1, #0 wc
0d194     00 1E 26 C6 |  if_b	not	local01, #0
0d198     A7 1E 62 FC | 	wrlong	local01, fp
0d19c     D4 01 90 FD | 	jmp	#LR__1110
0d1a0                 | LR__1103
0d1a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0d1a0     08 4E 05 F1 | 	add	fp, #8
0d1a4     A7 1E 02 FB | 	rdlong	local01, fp
0d1a8     08 4E 85 F1 | 	sub	fp, #8
0d1ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d1b0     14 4E 05 A1 |  if_e	add	fp, #20
0d1b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d1b8     14 4E 85 A1 |  if_e	sub	fp, #20
0d1bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d1c0     44 00 90 5D |  if_ne	jmp	#LR__1104
0d1c4     00 1E 06 F6 | 	mov	local01, #0
0d1c8     A7 12 02 FB | 	rdlong	arg01, fp
0d1cc     09 13 52 F6 | 	abs	arg01, arg01 wc
0d1d0     1F 26 C6 C9 |  if_b	decod	local05, #31
0d1d4     00 26 06 36 |  if_ae	mov	local05, #0
0d1d8     20 A4 B0 FD | 	call	#__system___float_fromuns
0d1dc     13 FB 61 F5 | 	xor	result1, local05
0d1e0     FD 12 02 F6 | 	mov	arg01, result1
0d1e4     0C 4E 05 F1 | 	add	fp, #12
0d1e8     A7 14 02 FB | 	rdlong	arg02, fp
0d1ec     0C 4E 85 F1 | 	sub	fp, #12
0d1f0     01 16 06 F6 | 	mov	arg03, #1
0d1f4     64 AB B0 FD | 	call	#__system___float_cmp
0d1f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d1fc     00 1E 26 C6 |  if_b	not	local01, #0
0d200     A7 1E 62 FC | 	wrlong	local01, fp
0d204     6C 01 90 FD | 	jmp	#LR__1110
0d208                 | LR__1104
0d208                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0d208     08 4E 05 F1 | 	add	fp, #8
0d20c     A7 1E 02 FB | 	rdlong	local01, fp
0d210     08 4E 85 F1 | 	sub	fp, #8
0d214     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d218     14 4E 05 A1 |  if_e	add	fp, #20
0d21c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d220     14 4E 85 A1 |  if_e	sub	fp, #20
0d224     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d228     20 00 90 5D |  if_ne	jmp	#LR__1105
0d22c     A7 20 02 FB | 	rdlong	local02, fp
0d230     0C 4E 05 F1 | 	add	fp, #12
0d234     A7 22 02 FB | 	rdlong	local03, fp
0d238     0C 4E 85 F1 | 	sub	fp, #12
0d23c     11 21 52 F2 | 	cmps	local02, local03 wc
0d240     0F 1F A2 F1 | 	subx	local01, local01
0d244     A7 1E 62 FC | 	wrlong	local01, fp
0d248     28 01 90 FD | 	jmp	#LR__1110
0d24c                 | LR__1105
0d24c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0d24c     08 4E 05 F1 | 	add	fp, #8
0d250     A7 1E 02 FB | 	rdlong	local01, fp
0d254     08 4E 85 F1 | 	sub	fp, #8
0d258     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d25c     14 4E 05 A1 |  if_e	add	fp, #20
0d260     A7 22 02 AB |  if_e	rdlong	local03, fp
0d264     14 4E 85 A1 |  if_e	sub	fp, #20
0d268     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d26c     20 00 90 5D |  if_ne	jmp	#LR__1106
0d270     A7 20 02 FB | 	rdlong	local02, fp
0d274     0C 4E 05 F1 | 	add	fp, #12
0d278     A7 22 02 FB | 	rdlong	local03, fp
0d27c     0C 4E 85 F1 | 	sub	fp, #12
0d280     11 21 52 F2 | 	cmps	local02, local03 wc
0d284     0F 1F A2 F1 | 	subx	local01, local01
0d288     A7 1E 62 FC | 	wrlong	local01, fp
0d28c     E4 00 90 FD | 	jmp	#LR__1110
0d290                 | LR__1106
0d290                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0d290     08 4E 05 F1 | 	add	fp, #8
0d294     A7 1E 02 FB | 	rdlong	local01, fp
0d298     08 4E 85 F1 | 	sub	fp, #8
0d29c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d2a0     14 4E 05 A1 |  if_e	add	fp, #20
0d2a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d2a8     14 4E 85 A1 |  if_e	sub	fp, #20
0d2ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d2b0     34 00 90 5D |  if_ne	jmp	#LR__1107
0d2b4     00 1E 06 F6 | 	mov	local01, #0
0d2b8     A7 12 02 FB | 	rdlong	arg01, fp
0d2bc     3C A3 B0 FD | 	call	#__system___float_fromuns
0d2c0     FD 12 02 F6 | 	mov	arg01, result1
0d2c4     0C 4E 05 F1 | 	add	fp, #12
0d2c8     A7 14 02 FB | 	rdlong	arg02, fp
0d2cc     0C 4E 85 F1 | 	sub	fp, #12
0d2d0     01 16 06 F6 | 	mov	arg03, #1
0d2d4     84 AA B0 FD | 	call	#__system___float_cmp
0d2d8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d2dc     00 1E 26 C6 |  if_b	not	local01, #0
0d2e0     A7 1E 62 FC | 	wrlong	local01, fp
0d2e4     8C 00 90 FD | 	jmp	#LR__1110
0d2e8                 | LR__1107
0d2e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d2e8     08 4E 05 F1 | 	add	fp, #8
0d2ec     A7 1E 02 FB | 	rdlong	local01, fp
0d2f0     08 4E 85 F1 | 	sub	fp, #8
0d2f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d2f8     14 4E 05 A1 |  if_e	add	fp, #20
0d2fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d300     14 4E 85 A1 |  if_e	sub	fp, #20
0d304     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d308     20 00 90 5D |  if_ne	jmp	#LR__1108
0d30c     A7 20 02 FB | 	rdlong	local02, fp
0d310     0C 4E 05 F1 | 	add	fp, #12
0d314     A7 22 02 FB | 	rdlong	local03, fp
0d318     0C 4E 85 F1 | 	sub	fp, #12
0d31c     11 21 52 F2 | 	cmps	local02, local03 wc
0d320     0F 1F A2 F1 | 	subx	local01, local01
0d324     A7 1E 62 FC | 	wrlong	local01, fp
0d328     48 00 90 FD | 	jmp	#LR__1110
0d32c                 | LR__1108
0d32c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d32c     08 4E 05 F1 | 	add	fp, #8
0d330     A7 1E 02 FB | 	rdlong	local01, fp
0d334     08 4E 85 F1 | 	sub	fp, #8
0d338     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d33c     14 4E 05 A1 |  if_e	add	fp, #20
0d340     A7 22 02 AB |  if_e	rdlong	local03, fp
0d344     14 4E 85 A1 |  if_e	sub	fp, #20
0d348     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d34c     20 00 90 5D |  if_ne	jmp	#LR__1109
0d350     A7 20 02 FB | 	rdlong	local02, fp
0d354     0C 4E 05 F1 | 	add	fp, #12
0d358     A7 22 02 FB | 	rdlong	local03, fp
0d35c     0C 4E 85 F1 | 	sub	fp, #12
0d360     11 21 12 F2 | 	cmp	local02, local03 wc
0d364     0F 1F A2 F1 | 	subx	local01, local01
0d368     A7 1E 62 FC | 	wrlong	local01, fp
0d36c     04 00 90 FD | 	jmp	#LR__1110
0d370                 | LR__1109
0d370     A7 00 68 FC | 	wrlong	#0, fp
0d374                 | LR__1110
0d374     08 4E 05 F1 | 	add	fp, #8
0d378     A7 38 68 FC | 	wrlong	#28, fp
0d37c     08 4E 85 F1 | 	sub	fp, #8
0d380     A7 12 02 F6 | 	mov	arg01, fp
0d384     A4 B4 BF FD | 	call	#_push
0d388     A7 F0 03 F6 | 	mov	ptra, fp
0d38c     B2 00 A0 FD | 	call	#popregs_
0d390                 | _do_lt_ret
0d390     2D 00 64 FD | 	ret
0d394                 | 
0d394                 | ' 
0d394                 | ' sub do_ge
0d394                 | _do_ge
0d394     05 4A 05 F6 | 	mov	COUNT_, #5
0d398     A8 00 A0 FD | 	call	#pushregs_
0d39c     18 F0 07 F1 | 	add	ptra, #24
0d3a0     F0 B3 BF FD | 	call	#_pop
0d3a4     FD 1E 02 F6 | 	mov	local01, result1
0d3a8     FE 20 02 F6 | 	mov	local02, result2
0d3ac     FF 22 02 F6 | 	mov	local03, result3
0d3b0     0C 4E 05 F1 | 	add	fp, #12
0d3b4     A7 1E 62 FC | 	wrlong	local01, fp
0d3b8     04 4E 05 F1 | 	add	fp, #4
0d3bc     A7 20 62 FC | 	wrlong	local02, fp
0d3c0     04 4E 05 F1 | 	add	fp, #4
0d3c4     A7 22 62 FC | 	wrlong	local03, fp
0d3c8     14 4E 85 F1 | 	sub	fp, #20
0d3cc     C4 B3 BF FD | 	call	#_pop
0d3d0     FF 22 02 F6 | 	mov	local03, result3
0d3d4     A7 FA 61 FC | 	wrlong	result1, fp
0d3d8     04 4E 05 F1 | 	add	fp, #4
0d3dc     A7 FC 61 FC | 	wrlong	result2, fp
0d3e0     04 4E 05 F1 | 	add	fp, #4
0d3e4     A7 22 62 FC | 	wrlong	local03, fp
0d3e8                 | ' t2=pop()
0d3e8                 | ' t1=pop()
0d3e8                 | ' 
0d3e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0d3e8     08 4E 85 F1 | 	sub	fp, #8
0d3ec     1F 22 0E F2 | 	cmp	local03, #31 wz
0d3f0     14 4E 05 A1 |  if_e	add	fp, #20
0d3f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d3f8     14 4E 85 A1 |  if_e	sub	fp, #20
0d3fc     12 23 02 A6 |  if_e	mov	local03, local04
0d400     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d404     28 00 90 5D |  if_ne	jmp	#LR__1120
0d408     00 1E 06 F6 | 	mov	local01, #0
0d40c     A7 12 02 FB | 	rdlong	arg01, fp
0d410     0C 4E 05 F1 | 	add	fp, #12
0d414     A7 14 02 FB | 	rdlong	arg02, fp
0d418     0C 4E 85 F1 | 	sub	fp, #12
0d41c     1C 7B B0 FD | 	call	#__system___string_cmp
0d420     00 FA 55 F2 | 	cmps	result1, #0 wc
0d424     00 1E 26 36 |  if_ae	not	local01, #0
0d428     A7 1E 62 FC | 	wrlong	local01, fp
0d42c     04 03 90 FD | 	jmp	#LR__1130
0d430                 | LR__1120
0d430                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0d430     08 4E 05 F1 | 	add	fp, #8
0d434     A7 1E 02 FB | 	rdlong	local01, fp
0d438     08 4E 85 F1 | 	sub	fp, #8
0d43c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d440     14 4E 05 A1 |  if_e	add	fp, #20
0d444     A7 24 02 AB |  if_e	rdlong	local04, fp
0d448     14 4E 85 A1 |  if_e	sub	fp, #20
0d44c     12 23 02 A6 |  if_e	mov	local03, local04
0d450     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d454     2C 00 90 5D |  if_ne	jmp	#LR__1121
0d458     00 1E 06 F6 | 	mov	local01, #0
0d45c     A7 12 02 FB | 	rdlong	arg01, fp
0d460     0C 4E 05 F1 | 	add	fp, #12
0d464     A7 14 02 FB | 	rdlong	arg02, fp
0d468     0C 4E 85 F1 | 	sub	fp, #12
0d46c     01 16 66 F6 | 	neg	arg03, #1
0d470     E8 A8 B0 FD | 	call	#__system___float_cmp
0d474     00 FA 55 F2 | 	cmps	result1, #0 wc
0d478     00 1E 26 36 |  if_ae	not	local01, #0
0d47c     A7 1E 62 FC | 	wrlong	local01, fp
0d480     B0 02 90 FD | 	jmp	#LR__1130
0d484                 | LR__1121
0d484                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0d484     08 4E 05 F1 | 	add	fp, #8
0d488     A7 1E 02 FB | 	rdlong	local01, fp
0d48c     08 4E 85 F1 | 	sub	fp, #8
0d490     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d494     14 4E 05 A1 |  if_e	add	fp, #20
0d498     A7 24 02 AB |  if_e	rdlong	local04, fp
0d49c     14 4E 85 A1 |  if_e	sub	fp, #20
0d4a0     12 23 02 A6 |  if_e	mov	local03, local04
0d4a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d4a8     48 00 90 5D |  if_ne	jmp	#LR__1122
0d4ac     00 1E 06 F6 | 	mov	local01, #0
0d4b0     A7 20 02 FB | 	rdlong	local02, fp
0d4b4     0C 4E 05 F1 | 	add	fp, #12
0d4b8     A7 12 02 FB | 	rdlong	arg01, fp
0d4bc     0C 4E 85 F1 | 	sub	fp, #12
0d4c0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d4c4     1F 26 C6 C9 |  if_b	decod	local05, #31
0d4c8     00 26 06 36 |  if_ae	mov	local05, #0
0d4cc     2C A1 B0 FD | 	call	#__system___float_fromuns
0d4d0     13 FB 61 F5 | 	xor	result1, local05
0d4d4     FD 14 02 F6 | 	mov	arg02, result1
0d4d8     10 13 02 F6 | 	mov	arg01, local02
0d4dc     01 16 66 F6 | 	neg	arg03, #1
0d4e0     78 A8 B0 FD | 	call	#__system___float_cmp
0d4e4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4e8     00 1E 26 36 |  if_ae	not	local01, #0
0d4ec     A7 1E 62 FC | 	wrlong	local01, fp
0d4f0     40 02 90 FD | 	jmp	#LR__1130
0d4f4                 | LR__1122
0d4f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0d4f4     08 4E 05 F1 | 	add	fp, #8
0d4f8     A7 1E 02 FB | 	rdlong	local01, fp
0d4fc     08 4E 85 F1 | 	sub	fp, #8
0d500     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d504     14 4E 05 A1 |  if_e	add	fp, #20
0d508     A7 24 02 AB |  if_e	rdlong	local04, fp
0d50c     14 4E 85 A1 |  if_e	sub	fp, #20
0d510     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d514     38 00 90 5D |  if_ne	jmp	#LR__1123
0d518     00 1E 06 F6 | 	mov	local01, #0
0d51c     A7 20 02 FB | 	rdlong	local02, fp
0d520     0C 4E 05 F1 | 	add	fp, #12
0d524     A7 12 02 FB | 	rdlong	arg01, fp
0d528     0C 4E 85 F1 | 	sub	fp, #12
0d52c     CC A0 B0 FD | 	call	#__system___float_fromuns
0d530     FD 14 02 F6 | 	mov	arg02, result1
0d534     10 13 02 F6 | 	mov	arg01, local02
0d538     01 16 66 F6 | 	neg	arg03, #1
0d53c     1C A8 B0 FD | 	call	#__system___float_cmp
0d540     00 FA 55 F2 | 	cmps	result1, #0 wc
0d544     00 1E 26 36 |  if_ae	not	local01, #0
0d548     A7 1E 62 FC | 	wrlong	local01, fp
0d54c     E4 01 90 FD | 	jmp	#LR__1130
0d550                 | LR__1123
0d550                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0d550     08 4E 05 F1 | 	add	fp, #8
0d554     A7 1E 02 FB | 	rdlong	local01, fp
0d558     08 4E 85 F1 | 	sub	fp, #8
0d55c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d560     14 4E 05 A1 |  if_e	add	fp, #20
0d564     A7 22 02 AB |  if_e	rdlong	local03, fp
0d568     14 4E 85 A1 |  if_e	sub	fp, #20
0d56c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d570     44 00 90 5D |  if_ne	jmp	#LR__1124
0d574     00 1E 06 F6 | 	mov	local01, #0
0d578     A7 12 02 FB | 	rdlong	arg01, fp
0d57c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d580     1F 26 C6 C9 |  if_b	decod	local05, #31
0d584     00 26 06 36 |  if_ae	mov	local05, #0
0d588     70 A0 B0 FD | 	call	#__system___float_fromuns
0d58c     13 FB 61 F5 | 	xor	result1, local05
0d590     FD 12 02 F6 | 	mov	arg01, result1
0d594     0C 4E 05 F1 | 	add	fp, #12
0d598     A7 14 02 FB | 	rdlong	arg02, fp
0d59c     0C 4E 85 F1 | 	sub	fp, #12
0d5a0     01 16 66 F6 | 	neg	arg03, #1
0d5a4     B4 A7 B0 FD | 	call	#__system___float_cmp
0d5a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d5ac     00 1E 26 36 |  if_ae	not	local01, #0
0d5b0     A7 1E 62 FC | 	wrlong	local01, fp
0d5b4     7C 01 90 FD | 	jmp	#LR__1130
0d5b8                 | LR__1124
0d5b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0d5b8     08 4E 05 F1 | 	add	fp, #8
0d5bc     A7 1E 02 FB | 	rdlong	local01, fp
0d5c0     08 4E 85 F1 | 	sub	fp, #8
0d5c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d5c8     14 4E 05 A1 |  if_e	add	fp, #20
0d5cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d5d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d5d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d5d8     24 00 90 5D |  if_ne	jmp	#LR__1125
0d5dc     00 1E 06 F6 | 	mov	local01, #0
0d5e0     A7 20 02 FB | 	rdlong	local02, fp
0d5e4     0C 4E 05 F1 | 	add	fp, #12
0d5e8     A7 22 02 FB | 	rdlong	local03, fp
0d5ec     0C 4E 85 F1 | 	sub	fp, #12
0d5f0     11 21 52 F2 | 	cmps	local02, local03 wc
0d5f4     01 1E 66 36 |  if_ae	neg	local01, #1
0d5f8     A7 1E 62 FC | 	wrlong	local01, fp
0d5fc     34 01 90 FD | 	jmp	#LR__1130
0d600                 | LR__1125
0d600                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0d600     08 4E 05 F1 | 	add	fp, #8
0d604     A7 1E 02 FB | 	rdlong	local01, fp
0d608     08 4E 85 F1 | 	sub	fp, #8
0d60c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d610     14 4E 05 A1 |  if_e	add	fp, #20
0d614     A7 22 02 AB |  if_e	rdlong	local03, fp
0d618     14 4E 85 A1 |  if_e	sub	fp, #20
0d61c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d620     24 00 90 5D |  if_ne	jmp	#LR__1126
0d624     00 1E 06 F6 | 	mov	local01, #0
0d628     A7 20 02 FB | 	rdlong	local02, fp
0d62c     0C 4E 05 F1 | 	add	fp, #12
0d630     A7 22 02 FB | 	rdlong	local03, fp
0d634     0C 4E 85 F1 | 	sub	fp, #12
0d638     11 21 52 F2 | 	cmps	local02, local03 wc
0d63c     01 1E 66 36 |  if_ae	neg	local01, #1
0d640     A7 1E 62 FC | 	wrlong	local01, fp
0d644     EC 00 90 FD | 	jmp	#LR__1130
0d648                 | LR__1126
0d648                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0d648     08 4E 05 F1 | 	add	fp, #8
0d64c     A7 1E 02 FB | 	rdlong	local01, fp
0d650     08 4E 85 F1 | 	sub	fp, #8
0d654     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d658     14 4E 05 A1 |  if_e	add	fp, #20
0d65c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d660     14 4E 85 A1 |  if_e	sub	fp, #20
0d664     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d668     34 00 90 5D |  if_ne	jmp	#LR__1127
0d66c     00 1E 06 F6 | 	mov	local01, #0
0d670     A7 12 02 FB | 	rdlong	arg01, fp
0d674     84 9F B0 FD | 	call	#__system___float_fromuns
0d678     FD 12 02 F6 | 	mov	arg01, result1
0d67c     0C 4E 05 F1 | 	add	fp, #12
0d680     A7 14 02 FB | 	rdlong	arg02, fp
0d684     0C 4E 85 F1 | 	sub	fp, #12
0d688     01 16 66 F6 | 	neg	arg03, #1
0d68c     CC A6 B0 FD | 	call	#__system___float_cmp
0d690     00 FA 55 F2 | 	cmps	result1, #0 wc
0d694     00 1E 26 36 |  if_ae	not	local01, #0
0d698     A7 1E 62 FC | 	wrlong	local01, fp
0d69c     94 00 90 FD | 	jmp	#LR__1130
0d6a0                 | LR__1127
0d6a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0d6a0     08 4E 05 F1 | 	add	fp, #8
0d6a4     A7 1E 02 FB | 	rdlong	local01, fp
0d6a8     08 4E 85 F1 | 	sub	fp, #8
0d6ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6b0     14 4E 05 A1 |  if_e	add	fp, #20
0d6b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d6b8     14 4E 85 A1 |  if_e	sub	fp, #20
0d6bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d6c0     24 00 90 5D |  if_ne	jmp	#LR__1128
0d6c4     00 1E 06 F6 | 	mov	local01, #0
0d6c8     A7 20 02 FB | 	rdlong	local02, fp
0d6cc     0C 4E 05 F1 | 	add	fp, #12
0d6d0     A7 22 02 FB | 	rdlong	local03, fp
0d6d4     0C 4E 85 F1 | 	sub	fp, #12
0d6d8     11 21 52 F2 | 	cmps	local02, local03 wc
0d6dc     01 1E 66 36 |  if_ae	neg	local01, #1
0d6e0     A7 1E 62 FC | 	wrlong	local01, fp
0d6e4     4C 00 90 FD | 	jmp	#LR__1130
0d6e8                 | LR__1128
0d6e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0d6e8     08 4E 05 F1 | 	add	fp, #8
0d6ec     A7 1E 02 FB | 	rdlong	local01, fp
0d6f0     08 4E 85 F1 | 	sub	fp, #8
0d6f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d6f8     14 4E 05 A1 |  if_e	add	fp, #20
0d6fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d700     14 4E 85 A1 |  if_e	sub	fp, #20
0d704     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d708     24 00 90 5D |  if_ne	jmp	#LR__1129
0d70c     00 1E 06 F6 | 	mov	local01, #0
0d710     A7 20 02 FB | 	rdlong	local02, fp
0d714     0C 4E 05 F1 | 	add	fp, #12
0d718     A7 22 02 FB | 	rdlong	local03, fp
0d71c     0C 4E 85 F1 | 	sub	fp, #12
0d720     11 21 12 F2 | 	cmp	local02, local03 wc
0d724     01 1E 66 36 |  if_ae	neg	local01, #1
0d728     A7 1E 62 FC | 	wrlong	local01, fp
0d72c     04 00 90 FD | 	jmp	#LR__1130
0d730                 | LR__1129
0d730     A7 00 68 FC | 	wrlong	#0, fp
0d734                 | LR__1130
0d734     08 4E 05 F1 | 	add	fp, #8
0d738     A7 38 68 FC | 	wrlong	#28, fp
0d73c     08 4E 85 F1 | 	sub	fp, #8
0d740     A7 12 02 F6 | 	mov	arg01, fp
0d744     E4 B0 BF FD | 	call	#_push
0d748     A7 F0 03 F6 | 	mov	ptra, fp
0d74c     B2 00 A0 FD | 	call	#popregs_
0d750                 | _do_ge_ret
0d750     2D 00 64 FD | 	ret
0d754                 | 
0d754                 | ' 
0d754                 | ' sub do_le
0d754                 | _do_le
0d754     05 4A 05 F6 | 	mov	COUNT_, #5
0d758     A8 00 A0 FD | 	call	#pushregs_
0d75c     18 F0 07 F1 | 	add	ptra, #24
0d760     30 B0 BF FD | 	call	#_pop
0d764     FD 1E 02 F6 | 	mov	local01, result1
0d768     FE 20 02 F6 | 	mov	local02, result2
0d76c     FF 22 02 F6 | 	mov	local03, result3
0d770     0C 4E 05 F1 | 	add	fp, #12
0d774     A7 1E 62 FC | 	wrlong	local01, fp
0d778     04 4E 05 F1 | 	add	fp, #4
0d77c     A7 20 62 FC | 	wrlong	local02, fp
0d780     04 4E 05 F1 | 	add	fp, #4
0d784     A7 22 62 FC | 	wrlong	local03, fp
0d788     14 4E 85 F1 | 	sub	fp, #20
0d78c     04 B0 BF FD | 	call	#_pop
0d790     FF 22 02 F6 | 	mov	local03, result3
0d794     A7 FA 61 FC | 	wrlong	result1, fp
0d798     04 4E 05 F1 | 	add	fp, #4
0d79c     A7 FC 61 FC | 	wrlong	result2, fp
0d7a0     04 4E 05 F1 | 	add	fp, #4
0d7a4     A7 22 62 FC | 	wrlong	local03, fp
0d7a8                 | ' t2=pop()
0d7a8                 | ' t1=pop()
0d7a8                 | ' 
0d7a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0d7a8     08 4E 85 F1 | 	sub	fp, #8
0d7ac     1F 22 0E F2 | 	cmp	local03, #31 wz
0d7b0     14 4E 05 A1 |  if_e	add	fp, #20
0d7b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7b8     14 4E 85 A1 |  if_e	sub	fp, #20
0d7bc     12 23 02 A6 |  if_e	mov	local03, local04
0d7c0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d7c4     28 00 90 5D |  if_ne	jmp	#LR__1140
0d7c8     00 1E 06 F6 | 	mov	local01, #0
0d7cc     A7 12 02 FB | 	rdlong	arg01, fp
0d7d0     0C 4E 05 F1 | 	add	fp, #12
0d7d4     A7 14 02 FB | 	rdlong	arg02, fp
0d7d8     0C 4E 85 F1 | 	sub	fp, #12
0d7dc     5C 77 B0 FD | 	call	#__system___string_cmp
0d7e0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d7e4     00 1E 26 C6 |  if_b	not	local01, #0
0d7e8     A7 1E 62 FC | 	wrlong	local01, fp
0d7ec     04 03 90 FD | 	jmp	#LR__1150
0d7f0                 | LR__1140
0d7f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0d7f0     08 4E 05 F1 | 	add	fp, #8
0d7f4     A7 1E 02 FB | 	rdlong	local01, fp
0d7f8     08 4E 85 F1 | 	sub	fp, #8
0d7fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d800     14 4E 05 A1 |  if_e	add	fp, #20
0d804     A7 24 02 AB |  if_e	rdlong	local04, fp
0d808     14 4E 85 A1 |  if_e	sub	fp, #20
0d80c     12 23 02 A6 |  if_e	mov	local03, local04
0d810     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d814     2C 00 90 5D |  if_ne	jmp	#LR__1141
0d818     00 1E 06 F6 | 	mov	local01, #0
0d81c     A7 12 02 FB | 	rdlong	arg01, fp
0d820     0C 4E 05 F1 | 	add	fp, #12
0d824     A7 14 02 FB | 	rdlong	arg02, fp
0d828     0C 4E 85 F1 | 	sub	fp, #12
0d82c     01 16 06 F6 | 	mov	arg03, #1
0d830     28 A5 B0 FD | 	call	#__system___float_cmp
0d834     01 FA 55 F2 | 	cmps	result1, #1 wc
0d838     00 1E 26 C6 |  if_b	not	local01, #0
0d83c     A7 1E 62 FC | 	wrlong	local01, fp
0d840     B0 02 90 FD | 	jmp	#LR__1150
0d844                 | LR__1141
0d844                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0d844     08 4E 05 F1 | 	add	fp, #8
0d848     A7 1E 02 FB | 	rdlong	local01, fp
0d84c     08 4E 85 F1 | 	sub	fp, #8
0d850     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d854     14 4E 05 A1 |  if_e	add	fp, #20
0d858     A7 24 02 AB |  if_e	rdlong	local04, fp
0d85c     14 4E 85 A1 |  if_e	sub	fp, #20
0d860     12 23 02 A6 |  if_e	mov	local03, local04
0d864     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d868     48 00 90 5D |  if_ne	jmp	#LR__1142
0d86c     00 1E 06 F6 | 	mov	local01, #0
0d870     A7 20 02 FB | 	rdlong	local02, fp
0d874     0C 4E 05 F1 | 	add	fp, #12
0d878     A7 12 02 FB | 	rdlong	arg01, fp
0d87c     0C 4E 85 F1 | 	sub	fp, #12
0d880     09 13 52 F6 | 	abs	arg01, arg01 wc
0d884     1F 26 C6 C9 |  if_b	decod	local05, #31
0d888     00 26 06 36 |  if_ae	mov	local05, #0
0d88c     6C 9D B0 FD | 	call	#__system___float_fromuns
0d890     13 FB 61 F5 | 	xor	result1, local05
0d894     FD 14 02 F6 | 	mov	arg02, result1
0d898     10 13 02 F6 | 	mov	arg01, local02
0d89c     01 16 06 F6 | 	mov	arg03, #1
0d8a0     B8 A4 B0 FD | 	call	#__system___float_cmp
0d8a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0d8a8     00 1E 26 C6 |  if_b	not	local01, #0
0d8ac     A7 1E 62 FC | 	wrlong	local01, fp
0d8b0     40 02 90 FD | 	jmp	#LR__1150
0d8b4                 | LR__1142
0d8b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0d8b4     08 4E 05 F1 | 	add	fp, #8
0d8b8     A7 1E 02 FB | 	rdlong	local01, fp
0d8bc     08 4E 85 F1 | 	sub	fp, #8
0d8c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d8c4     14 4E 05 A1 |  if_e	add	fp, #20
0d8c8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8cc     14 4E 85 A1 |  if_e	sub	fp, #20
0d8d0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d8d4     38 00 90 5D |  if_ne	jmp	#LR__1143
0d8d8     00 1E 06 F6 | 	mov	local01, #0
0d8dc     A7 20 02 FB | 	rdlong	local02, fp
0d8e0     0C 4E 05 F1 | 	add	fp, #12
0d8e4     A7 12 02 FB | 	rdlong	arg01, fp
0d8e8     0C 4E 85 F1 | 	sub	fp, #12
0d8ec     0C 9D B0 FD | 	call	#__system___float_fromuns
0d8f0     FD 14 02 F6 | 	mov	arg02, result1
0d8f4     10 13 02 F6 | 	mov	arg01, local02
0d8f8     01 16 06 F6 | 	mov	arg03, #1
0d8fc     5C A4 B0 FD | 	call	#__system___float_cmp
0d900     01 FA 55 F2 | 	cmps	result1, #1 wc
0d904     00 1E 26 C6 |  if_b	not	local01, #0
0d908     A7 1E 62 FC | 	wrlong	local01, fp
0d90c     E4 01 90 FD | 	jmp	#LR__1150
0d910                 | LR__1143
0d910                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0d910     08 4E 05 F1 | 	add	fp, #8
0d914     A7 1E 02 FB | 	rdlong	local01, fp
0d918     08 4E 85 F1 | 	sub	fp, #8
0d91c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d920     14 4E 05 A1 |  if_e	add	fp, #20
0d924     A7 22 02 AB |  if_e	rdlong	local03, fp
0d928     14 4E 85 A1 |  if_e	sub	fp, #20
0d92c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d930     44 00 90 5D |  if_ne	jmp	#LR__1144
0d934     00 1E 06 F6 | 	mov	local01, #0
0d938     A7 12 02 FB | 	rdlong	arg01, fp
0d93c     09 13 52 F6 | 	abs	arg01, arg01 wc
0d940     1F 26 C6 C9 |  if_b	decod	local05, #31
0d944     00 26 06 36 |  if_ae	mov	local05, #0
0d948     B0 9C B0 FD | 	call	#__system___float_fromuns
0d94c     13 FB 61 F5 | 	xor	result1, local05
0d950     FD 12 02 F6 | 	mov	arg01, result1
0d954     0C 4E 05 F1 | 	add	fp, #12
0d958     A7 14 02 FB | 	rdlong	arg02, fp
0d95c     0C 4E 85 F1 | 	sub	fp, #12
0d960     01 16 06 F6 | 	mov	arg03, #1
0d964     F4 A3 B0 FD | 	call	#__system___float_cmp
0d968     01 FA 55 F2 | 	cmps	result1, #1 wc
0d96c     00 1E 26 C6 |  if_b	not	local01, #0
0d970     A7 1E 62 FC | 	wrlong	local01, fp
0d974     7C 01 90 FD | 	jmp	#LR__1150
0d978                 | LR__1144
0d978                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0d978     08 4E 05 F1 | 	add	fp, #8
0d97c     A7 1E 02 FB | 	rdlong	local01, fp
0d980     08 4E 85 F1 | 	sub	fp, #8
0d984     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d988     14 4E 05 A1 |  if_e	add	fp, #20
0d98c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d990     14 4E 85 A1 |  if_e	sub	fp, #20
0d994     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d998     24 00 90 5D |  if_ne	jmp	#LR__1145
0d99c     00 1E 06 F6 | 	mov	local01, #0
0d9a0     A7 20 02 FB | 	rdlong	local02, fp
0d9a4     0C 4E 05 F1 | 	add	fp, #12
0d9a8     A7 22 02 FB | 	rdlong	local03, fp
0d9ac     0C 4E 85 F1 | 	sub	fp, #12
0d9b0     11 21 5A F2 | 	cmps	local02, local03 wcz
0d9b4     01 1E 66 E6 |  if_be	neg	local01, #1
0d9b8     A7 1E 62 FC | 	wrlong	local01, fp
0d9bc     34 01 90 FD | 	jmp	#LR__1150
0d9c0                 | LR__1145
0d9c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0d9c0     08 4E 05 F1 | 	add	fp, #8
0d9c4     A7 1E 02 FB | 	rdlong	local01, fp
0d9c8     08 4E 85 F1 | 	sub	fp, #8
0d9cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d9d0     14 4E 05 A1 |  if_e	add	fp, #20
0d9d4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d9dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d9e0     24 00 90 5D |  if_ne	jmp	#LR__1146
0d9e4     00 1E 06 F6 | 	mov	local01, #0
0d9e8     A7 20 02 FB | 	rdlong	local02, fp
0d9ec     0C 4E 05 F1 | 	add	fp, #12
0d9f0     A7 22 02 FB | 	rdlong	local03, fp
0d9f4     0C 4E 85 F1 | 	sub	fp, #12
0d9f8     11 21 5A F2 | 	cmps	local02, local03 wcz
0d9fc     01 1E 66 E6 |  if_be	neg	local01, #1
0da00     A7 1E 62 FC | 	wrlong	local01, fp
0da04     EC 00 90 FD | 	jmp	#LR__1150
0da08                 | LR__1146
0da08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0da08     08 4E 05 F1 | 	add	fp, #8
0da0c     A7 1E 02 FB | 	rdlong	local01, fp
0da10     08 4E 85 F1 | 	sub	fp, #8
0da14     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da18     14 4E 05 A1 |  if_e	add	fp, #20
0da1c     A7 22 02 AB |  if_e	rdlong	local03, fp
0da20     14 4E 85 A1 |  if_e	sub	fp, #20
0da24     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0da28     34 00 90 5D |  if_ne	jmp	#LR__1147
0da2c     00 1E 06 F6 | 	mov	local01, #0
0da30     A7 12 02 FB | 	rdlong	arg01, fp
0da34     C4 9B B0 FD | 	call	#__system___float_fromuns
0da38     FD 12 02 F6 | 	mov	arg01, result1
0da3c     0C 4E 05 F1 | 	add	fp, #12
0da40     A7 14 02 FB | 	rdlong	arg02, fp
0da44     0C 4E 85 F1 | 	sub	fp, #12
0da48     01 16 06 F6 | 	mov	arg03, #1
0da4c     0C A3 B0 FD | 	call	#__system___float_cmp
0da50     01 FA 55 F2 | 	cmps	result1, #1 wc
0da54     00 1E 26 C6 |  if_b	not	local01, #0
0da58     A7 1E 62 FC | 	wrlong	local01, fp
0da5c     94 00 90 FD | 	jmp	#LR__1150
0da60                 | LR__1147
0da60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0da60     08 4E 05 F1 | 	add	fp, #8
0da64     A7 1E 02 FB | 	rdlong	local01, fp
0da68     08 4E 85 F1 | 	sub	fp, #8
0da6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da70     14 4E 05 A1 |  if_e	add	fp, #20
0da74     A7 22 02 AB |  if_e	rdlong	local03, fp
0da78     14 4E 85 A1 |  if_e	sub	fp, #20
0da7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0da80     24 00 90 5D |  if_ne	jmp	#LR__1148
0da84     00 1E 06 F6 | 	mov	local01, #0
0da88     A7 20 02 FB | 	rdlong	local02, fp
0da8c     0C 4E 05 F1 | 	add	fp, #12
0da90     A7 22 02 FB | 	rdlong	local03, fp
0da94     0C 4E 85 F1 | 	sub	fp, #12
0da98     11 21 5A F2 | 	cmps	local02, local03 wcz
0da9c     01 1E 66 E6 |  if_be	neg	local01, #1
0daa0     A7 1E 62 FC | 	wrlong	local01, fp
0daa4     4C 00 90 FD | 	jmp	#LR__1150
0daa8                 | LR__1148
0daa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0daa8     08 4E 05 F1 | 	add	fp, #8
0daac     A7 1E 02 FB | 	rdlong	local01, fp
0dab0     08 4E 85 F1 | 	sub	fp, #8
0dab4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dab8     14 4E 05 A1 |  if_e	add	fp, #20
0dabc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dac0     14 4E 85 A1 |  if_e	sub	fp, #20
0dac4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dac8     24 00 90 5D |  if_ne	jmp	#LR__1149
0dacc     00 1E 06 F6 | 	mov	local01, #0
0dad0     A7 20 02 FB | 	rdlong	local02, fp
0dad4     0C 4E 05 F1 | 	add	fp, #12
0dad8     A7 22 02 FB | 	rdlong	local03, fp
0dadc     0C 4E 85 F1 | 	sub	fp, #12
0dae0     11 21 1A F2 | 	cmp	local02, local03 wcz
0dae4     01 1E 66 E6 |  if_be	neg	local01, #1
0dae8     A7 1E 62 FC | 	wrlong	local01, fp
0daec     04 00 90 FD | 	jmp	#LR__1150
0daf0                 | LR__1149
0daf0     A7 00 68 FC | 	wrlong	#0, fp
0daf4                 | LR__1150
0daf4     08 4E 05 F1 | 	add	fp, #8
0daf8     A7 38 68 FC | 	wrlong	#28, fp
0dafc     08 4E 85 F1 | 	sub	fp, #8
0db00     A7 12 02 F6 | 	mov	arg01, fp
0db04     24 AD BF FD | 	call	#_push
0db08     A7 F0 03 F6 | 	mov	ptra, fp
0db0c     B2 00 A0 FD | 	call	#popregs_
0db10                 | _do_le_ret
0db10     2D 00 64 FD | 	ret
0db14                 | 
0db14                 | ' 
0db14                 | ' 
0db14                 | ' sub do_ne
0db14                 | _do_ne
0db14     05 4A 05 F6 | 	mov	COUNT_, #5
0db18     A8 00 A0 FD | 	call	#pushregs_
0db1c     18 F0 07 F1 | 	add	ptra, #24
0db20     70 AC BF FD | 	call	#_pop
0db24     FD 1E 02 F6 | 	mov	local01, result1
0db28     FE 20 02 F6 | 	mov	local02, result2
0db2c     FF 22 02 F6 | 	mov	local03, result3
0db30     0C 4E 05 F1 | 	add	fp, #12
0db34     A7 1E 62 FC | 	wrlong	local01, fp
0db38     04 4E 05 F1 | 	add	fp, #4
0db3c     A7 20 62 FC | 	wrlong	local02, fp
0db40     04 4E 05 F1 | 	add	fp, #4
0db44     A7 22 62 FC | 	wrlong	local03, fp
0db48     14 4E 85 F1 | 	sub	fp, #20
0db4c     44 AC BF FD | 	call	#_pop
0db50     FF 22 02 F6 | 	mov	local03, result3
0db54     A7 FA 61 FC | 	wrlong	result1, fp
0db58     04 4E 05 F1 | 	add	fp, #4
0db5c     A7 FC 61 FC | 	wrlong	result2, fp
0db60     04 4E 05 F1 | 	add	fp, #4
0db64     A7 22 62 FC | 	wrlong	local03, fp
0db68                 | ' t2=pop()
0db68                 | ' t1=pop()
0db68                 | ' 
0db68                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0db68     08 4E 85 F1 | 	sub	fp, #8
0db6c     1F 22 0E F2 | 	cmp	local03, #31 wz
0db70     14 4E 05 A1 |  if_e	add	fp, #20
0db74     A7 24 02 AB |  if_e	rdlong	local04, fp
0db78     14 4E 85 A1 |  if_e	sub	fp, #20
0db7c     12 23 02 A6 |  if_e	mov	local03, local04
0db80     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0db84     28 00 90 5D |  if_ne	jmp	#LR__1160
0db88     00 1E 06 F6 | 	mov	local01, #0
0db8c     A7 12 02 FB | 	rdlong	arg01, fp
0db90     0C 4E 05 F1 | 	add	fp, #12
0db94     A7 14 02 FB | 	rdlong	arg02, fp
0db98     0C 4E 85 F1 | 	sub	fp, #12
0db9c     9C 73 B0 FD | 	call	#__system___string_cmp
0dba0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dba4     00 1E 26 56 |  if_ne	not	local01, #0
0dba8     A7 1E 62 FC | 	wrlong	local01, fp
0dbac     04 03 90 FD | 	jmp	#LR__1170
0dbb0                 | LR__1160
0dbb0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0dbb0     08 4E 05 F1 | 	add	fp, #8
0dbb4     A7 1E 02 FB | 	rdlong	local01, fp
0dbb8     08 4E 85 F1 | 	sub	fp, #8
0dbbc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dbc0     14 4E 05 A1 |  if_e	add	fp, #20
0dbc4     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbc8     14 4E 85 A1 |  if_e	sub	fp, #20
0dbcc     12 23 02 A6 |  if_e	mov	local03, local04
0dbd0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dbd4     2C 00 90 5D |  if_ne	jmp	#LR__1161
0dbd8     00 1E 06 F6 | 	mov	local01, #0
0dbdc     A7 12 02 FB | 	rdlong	arg01, fp
0dbe0     0C 4E 05 F1 | 	add	fp, #12
0dbe4     A7 14 02 FB | 	rdlong	arg02, fp
0dbe8     0C 4E 85 F1 | 	sub	fp, #12
0dbec     01 16 06 F6 | 	mov	arg03, #1
0dbf0     68 A1 B0 FD | 	call	#__system___float_cmp
0dbf4     00 FA 0D F2 | 	cmp	result1, #0 wz
0dbf8     00 1E 26 56 |  if_ne	not	local01, #0
0dbfc     A7 1E 62 FC | 	wrlong	local01, fp
0dc00     B0 02 90 FD | 	jmp	#LR__1170
0dc04                 | LR__1161
0dc04                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0dc04     08 4E 05 F1 | 	add	fp, #8
0dc08     A7 1E 02 FB | 	rdlong	local01, fp
0dc0c     08 4E 85 F1 | 	sub	fp, #8
0dc10     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc14     14 4E 05 A1 |  if_e	add	fp, #20
0dc18     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc1c     14 4E 85 A1 |  if_e	sub	fp, #20
0dc20     12 23 02 A6 |  if_e	mov	local03, local04
0dc24     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dc28     48 00 90 5D |  if_ne	jmp	#LR__1162
0dc2c     00 1E 06 F6 | 	mov	local01, #0
0dc30     A7 20 02 FB | 	rdlong	local02, fp
0dc34     0C 4E 05 F1 | 	add	fp, #12
0dc38     A7 12 02 FB | 	rdlong	arg01, fp
0dc3c     0C 4E 85 F1 | 	sub	fp, #12
0dc40     09 13 52 F6 | 	abs	arg01, arg01 wc
0dc44     1F 26 C6 C9 |  if_b	decod	local05, #31
0dc48     00 26 06 36 |  if_ae	mov	local05, #0
0dc4c     AC 99 B0 FD | 	call	#__system___float_fromuns
0dc50     13 FB 61 F5 | 	xor	result1, local05
0dc54     FD 14 02 F6 | 	mov	arg02, result1
0dc58     10 13 02 F6 | 	mov	arg01, local02
0dc5c     01 16 06 F6 | 	mov	arg03, #1
0dc60     F8 A0 B0 FD | 	call	#__system___float_cmp
0dc64     00 FA 0D F2 | 	cmp	result1, #0 wz
0dc68     00 1E 26 56 |  if_ne	not	local01, #0
0dc6c     A7 1E 62 FC | 	wrlong	local01, fp
0dc70     40 02 90 FD | 	jmp	#LR__1170
0dc74                 | LR__1162
0dc74                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0dc74     08 4E 05 F1 | 	add	fp, #8
0dc78     A7 1E 02 FB | 	rdlong	local01, fp
0dc7c     08 4E 85 F1 | 	sub	fp, #8
0dc80     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc84     14 4E 05 A1 |  if_e	add	fp, #20
0dc88     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc8c     14 4E 85 A1 |  if_e	sub	fp, #20
0dc90     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0dc94     38 00 90 5D |  if_ne	jmp	#LR__1163
0dc98     00 1E 06 F6 | 	mov	local01, #0
0dc9c     A7 20 02 FB | 	rdlong	local02, fp
0dca0     0C 4E 05 F1 | 	add	fp, #12
0dca4     A7 12 02 FB | 	rdlong	arg01, fp
0dca8     0C 4E 85 F1 | 	sub	fp, #12
0dcac     4C 99 B0 FD | 	call	#__system___float_fromuns
0dcb0     FD 14 02 F6 | 	mov	arg02, result1
0dcb4     10 13 02 F6 | 	mov	arg01, local02
0dcb8     01 16 06 F6 | 	mov	arg03, #1
0dcbc     9C A0 B0 FD | 	call	#__system___float_cmp
0dcc0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dcc4     00 1E 26 56 |  if_ne	not	local01, #0
0dcc8     A7 1E 62 FC | 	wrlong	local01, fp
0dccc     E4 01 90 FD | 	jmp	#LR__1170
0dcd0                 | LR__1163
0dcd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0dcd0     08 4E 05 F1 | 	add	fp, #8
0dcd4     A7 1E 02 FB | 	rdlong	local01, fp
0dcd8     08 4E 85 F1 | 	sub	fp, #8
0dcdc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dce0     14 4E 05 A1 |  if_e	add	fp, #20
0dce4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dce8     14 4E 85 A1 |  if_e	sub	fp, #20
0dcec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dcf0     44 00 90 5D |  if_ne	jmp	#LR__1164
0dcf4     00 1E 06 F6 | 	mov	local01, #0
0dcf8     A7 12 02 FB | 	rdlong	arg01, fp
0dcfc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd00     1F 26 C6 C9 |  if_b	decod	local05, #31
0dd04     00 26 06 36 |  if_ae	mov	local05, #0
0dd08     F0 98 B0 FD | 	call	#__system___float_fromuns
0dd0c     13 FB 61 F5 | 	xor	result1, local05
0dd10     FD 12 02 F6 | 	mov	arg01, result1
0dd14     0C 4E 05 F1 | 	add	fp, #12
0dd18     A7 14 02 FB | 	rdlong	arg02, fp
0dd1c     0C 4E 85 F1 | 	sub	fp, #12
0dd20     01 16 06 F6 | 	mov	arg03, #1
0dd24     34 A0 B0 FD | 	call	#__system___float_cmp
0dd28     00 FA 0D F2 | 	cmp	result1, #0 wz
0dd2c     00 1E 26 56 |  if_ne	not	local01, #0
0dd30     A7 1E 62 FC | 	wrlong	local01, fp
0dd34     7C 01 90 FD | 	jmp	#LR__1170
0dd38                 | LR__1164
0dd38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0dd38     08 4E 05 F1 | 	add	fp, #8
0dd3c     A7 1E 02 FB | 	rdlong	local01, fp
0dd40     08 4E 85 F1 | 	sub	fp, #8
0dd44     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd48     14 4E 05 A1 |  if_e	add	fp, #20
0dd4c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd50     14 4E 85 A1 |  if_e	sub	fp, #20
0dd54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dd58     24 00 90 5D |  if_ne	jmp	#LR__1165
0dd5c     00 1E 06 F6 | 	mov	local01, #0
0dd60     A7 20 02 FB | 	rdlong	local02, fp
0dd64     0C 4E 05 F1 | 	add	fp, #12
0dd68     A7 22 02 FB | 	rdlong	local03, fp
0dd6c     0C 4E 85 F1 | 	sub	fp, #12
0dd70     11 21 0A F2 | 	cmp	local02, local03 wz
0dd74     01 1E 66 56 |  if_ne	neg	local01, #1
0dd78     A7 1E 62 FC | 	wrlong	local01, fp
0dd7c     34 01 90 FD | 	jmp	#LR__1170
0dd80                 | LR__1165
0dd80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0dd80     08 4E 05 F1 | 	add	fp, #8
0dd84     A7 1E 02 FB | 	rdlong	local01, fp
0dd88     08 4E 85 F1 | 	sub	fp, #8
0dd8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd90     14 4E 05 A1 |  if_e	add	fp, #20
0dd94     A7 22 02 AB |  if_e	rdlong	local03, fp
0dd98     14 4E 85 A1 |  if_e	sub	fp, #20
0dd9c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dda0     24 00 90 5D |  if_ne	jmp	#LR__1166
0dda4     00 1E 06 F6 | 	mov	local01, #0
0dda8     A7 20 02 FB | 	rdlong	local02, fp
0ddac     0C 4E 05 F1 | 	add	fp, #12
0ddb0     A7 22 02 FB | 	rdlong	local03, fp
0ddb4     0C 4E 85 F1 | 	sub	fp, #12
0ddb8     11 21 0A F2 | 	cmp	local02, local03 wz
0ddbc     01 1E 66 56 |  if_ne	neg	local01, #1
0ddc0     A7 1E 62 FC | 	wrlong	local01, fp
0ddc4     EC 00 90 FD | 	jmp	#LR__1170
0ddc8                 | LR__1166
0ddc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0ddc8     08 4E 05 F1 | 	add	fp, #8
0ddcc     A7 1E 02 FB | 	rdlong	local01, fp
0ddd0     08 4E 85 F1 | 	sub	fp, #8
0ddd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ddd8     14 4E 05 A1 |  if_e	add	fp, #20
0dddc     A7 22 02 AB |  if_e	rdlong	local03, fp
0dde0     14 4E 85 A1 |  if_e	sub	fp, #20
0dde4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dde8     34 00 90 5D |  if_ne	jmp	#LR__1167
0ddec     00 1E 06 F6 | 	mov	local01, #0
0ddf0     A7 12 02 FB | 	rdlong	arg01, fp
0ddf4     04 98 B0 FD | 	call	#__system___float_fromuns
0ddf8     FD 12 02 F6 | 	mov	arg01, result1
0ddfc     0C 4E 05 F1 | 	add	fp, #12
0de00     A7 14 02 FB | 	rdlong	arg02, fp
0de04     0C 4E 85 F1 | 	sub	fp, #12
0de08     01 16 06 F6 | 	mov	arg03, #1
0de0c     4C 9F B0 FD | 	call	#__system___float_cmp
0de10     00 FA 0D F2 | 	cmp	result1, #0 wz
0de14     00 1E 26 56 |  if_ne	not	local01, #0
0de18     A7 1E 62 FC | 	wrlong	local01, fp
0de1c     94 00 90 FD | 	jmp	#LR__1170
0de20                 | LR__1167
0de20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0de20     08 4E 05 F1 | 	add	fp, #8
0de24     A7 1E 02 FB | 	rdlong	local01, fp
0de28     08 4E 85 F1 | 	sub	fp, #8
0de2c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de30     14 4E 05 A1 |  if_e	add	fp, #20
0de34     A7 22 02 AB |  if_e	rdlong	local03, fp
0de38     14 4E 85 A1 |  if_e	sub	fp, #20
0de3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0de40     24 00 90 5D |  if_ne	jmp	#LR__1168
0de44     00 1E 06 F6 | 	mov	local01, #0
0de48     A7 20 02 FB | 	rdlong	local02, fp
0de4c     0C 4E 05 F1 | 	add	fp, #12
0de50     A7 22 02 FB | 	rdlong	local03, fp
0de54     0C 4E 85 F1 | 	sub	fp, #12
0de58     11 21 0A F2 | 	cmp	local02, local03 wz
0de5c     01 1E 66 56 |  if_ne	neg	local01, #1
0de60     A7 1E 62 FC | 	wrlong	local01, fp
0de64     4C 00 90 FD | 	jmp	#LR__1170
0de68                 | LR__1168
0de68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0de68     08 4E 05 F1 | 	add	fp, #8
0de6c     A7 1E 02 FB | 	rdlong	local01, fp
0de70     08 4E 85 F1 | 	sub	fp, #8
0de74     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de78     14 4E 05 A1 |  if_e	add	fp, #20
0de7c     A7 22 02 AB |  if_e	rdlong	local03, fp
0de80     14 4E 85 A1 |  if_e	sub	fp, #20
0de84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0de88     24 00 90 5D |  if_ne	jmp	#LR__1169
0de8c     00 1E 06 F6 | 	mov	local01, #0
0de90     A7 20 02 FB | 	rdlong	local02, fp
0de94     0C 4E 05 F1 | 	add	fp, #12
0de98     A7 22 02 FB | 	rdlong	local03, fp
0de9c     0C 4E 85 F1 | 	sub	fp, #12
0dea0     11 21 0A F2 | 	cmp	local02, local03 wz
0dea4     01 1E 66 56 |  if_ne	neg	local01, #1
0dea8     A7 1E 62 FC | 	wrlong	local01, fp
0deac     04 00 90 FD | 	jmp	#LR__1170
0deb0                 | LR__1169
0deb0     A7 00 68 FC | 	wrlong	#0, fp
0deb4                 | LR__1170
0deb4     08 4E 05 F1 | 	add	fp, #8
0deb8     A7 38 68 FC | 	wrlong	#28, fp
0debc     08 4E 85 F1 | 	sub	fp, #8
0dec0     A7 12 02 F6 | 	mov	arg01, fp
0dec4     64 A9 BF FD | 	call	#_push
0dec8     A7 F0 03 F6 | 	mov	ptra, fp
0decc     B2 00 A0 FD | 	call	#popregs_
0ded0                 | _do_ne_ret
0ded0     2D 00 64 FD | 	ret
0ded4                 | 
0ded4                 | ' 
0ded4                 | ' 
0ded4                 | ' 
0ded4                 | ' ' -------------------   convert a variable on the top of stack to integer
0ded4                 | ' 
0ded4                 | ' sub do_converttoint
0ded4                 | _do_converttoint
0ded4     02 4A 05 F6 | 	mov	COUNT_, #2
0ded8     A8 00 A0 FD | 	call	#pushregs_
0dedc     18 F0 07 F1 | 	add	ptra, #24
0dee0     B0 A8 BF FD | 	call	#_pop
0dee4     FE 1E 02 F6 | 	mov	local01, result2
0dee8     FF 20 02 F6 | 	mov	local02, result3
0deec     A7 FA 61 FC | 	wrlong	result1, fp
0def0     04 4E 05 F1 | 	add	fp, #4
0def4     A7 1E 62 FC | 	wrlong	local01, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 20 62 FC | 	wrlong	local02, fp
0df00                 | ' t1=pop() 
0df00                 | ' select case t1.result_type
0df00     08 4E 85 F1 | 	sub	fp, #8
0df04     1C 20 0E F2 | 	cmp	local02, #28 wz
0df08     24 00 90 AD |  if_e	jmp	#LR__1180
0df0c     1D 20 0E F2 | 	cmp	local02, #29 wz
0df10     38 00 90 AD |  if_e	jmp	#LR__1181
0df14     1E 20 0E F2 | 	cmp	local02, #30 wz
0df18     4C 00 90 AD |  if_e	jmp	#LR__1182
0df1c     1F 20 0E F2 | 	cmp	local02, #31 wz
0df20     68 00 90 AD |  if_e	jmp	#LR__1183
0df24     FF 20 0E F2 | 	cmp	local02, #255 wz
0df28     8C 00 90 AD |  if_e	jmp	#LR__1184
0df2c     A8 00 90 FD | 	jmp	#LR__1185
0df30                 | LR__1180
0df30     A7 20 02 FB | 	rdlong	local02, fp
0df34     0C 4E 05 F1 | 	add	fp, #12
0df38     A7 20 62 FC | 	wrlong	local02, fp
0df3c     04 4E 05 F1 | 	add	fp, #4
0df40     A7 38 68 FC | 	wrlong	#28, fp
0df44     10 4E 85 F1 | 	sub	fp, #16
0df48     A0 00 90 FD | 	jmp	#LR__1186
0df4c                 | LR__1181
0df4c     A7 20 02 FB | 	rdlong	local02, fp
0df50     0C 4E 05 F1 | 	add	fp, #12
0df54     A7 20 62 FC | 	wrlong	local02, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 38 68 FC | 	wrlong	#28, fp
0df60     10 4E 85 F1 | 	sub	fp, #16
0df64     84 00 90 FD | 	jmp	#LR__1186
0df68                 | LR__1182
0df68     A7 12 02 FB | 	rdlong	arg01, fp
0df6c     01 14 06 F6 | 	mov	arg02, #1
0df70     7C 9E B0 FD | 	call	#__system___float_tointeger
0df74     0C 4E 05 F1 | 	add	fp, #12
0df78     A7 FA 61 FC | 	wrlong	result1, fp
0df7c     04 4E 05 F1 | 	add	fp, #4
0df80     A7 38 68 FC | 	wrlong	#28, fp
0df84     10 4E 85 F1 | 	sub	fp, #16
0df88     60 00 90 FD | 	jmp	#LR__1186
0df8c                 | LR__1183
0df8c     A7 12 02 FB | 	rdlong	arg01, fp
0df90     7C A1 B0 FD | 	call	#__system____builtin_atof
0df94     FD 12 02 F6 | 	mov	arg01, result1
0df98     00 14 06 F6 | 	mov	arg02, #0
0df9c     50 9E B0 FD | 	call	#__system___float_tointeger
0dfa0     0C 4E 05 F1 | 	add	fp, #12
0dfa4     A7 FA 61 FC | 	wrlong	result1, fp
0dfa8     04 4E 05 F1 | 	add	fp, #4
0dfac     A7 38 68 FC | 	wrlong	#28, fp
0dfb0     10 4E 85 F1 | 	sub	fp, #16
0dfb4     34 00 90 FD | 	jmp	#LR__1186
0dfb8                 | LR__1184
0dfb8     0C 4E 05 F1 | 	add	fp, #12
0dfbc     A7 00 68 FC | 	wrlong	#0, fp
0dfc0     0C 4E 85 F1 | 	sub	fp, #12
0dfc4     A7 20 02 FB | 	rdlong	local02, fp
0dfc8     10 4E 05 F1 | 	add	fp, #16
0dfcc     A7 20 62 FC | 	wrlong	local02, fp
0dfd0     10 4E 85 F1 | 	sub	fp, #16
0dfd4     14 00 90 FD | 	jmp	#LR__1186
0dfd8                 | LR__1185
0dfd8     0C 4E 05 F1 | 	add	fp, #12
0dfdc     A7 00 68 FC | 	wrlong	#0, fp
0dfe0     04 4E 05 F1 | 	add	fp, #4
0dfe4     A7 02 68 FC | 	wrlong	#1, fp
0dfe8     10 4E 85 F1 | 	sub	fp, #16
0dfec                 | LR__1186
0dfec     0C 4E 05 F1 | 	add	fp, #12
0dff0     A7 20 02 FB | 	rdlong	local02, fp
0dff4     0C 4E 85 F1 | 	sub	fp, #12
0dff8     A7 20 62 FC | 	wrlong	local02, fp
0dffc     10 4E 05 F1 | 	add	fp, #16
0e000     A7 20 02 FB | 	rdlong	local02, fp
0e004     08 4E 85 F1 | 	sub	fp, #8
0e008     A7 20 62 FC | 	wrlong	local02, fp
0e00c     08 4E 85 F1 | 	sub	fp, #8
0e010     A7 12 02 F6 | 	mov	arg01, fp
0e014     14 A8 BF FD | 	call	#_push
0e018     A7 F0 03 F6 | 	mov	ptra, fp
0e01c     B2 00 A0 FD | 	call	#popregs_
0e020                 | _do_converttoint_ret
0e020     2D 00 64 FD | 	ret
0e024                 | 
0e024                 | ' 
0e024                 | ' function converttoint (t1 as expr_result) as integer
0e024                 | _converttoint
0e024     02 4A 05 F6 | 	mov	COUNT_, #2
0e028     A8 00 A0 FD | 	call	#pushregs_
0e02c     09 1F 02 F6 | 	mov	local01, arg01
0e030                 | ' 
0e030                 | ' select case t1.result_type
0e030     08 1E 06 F1 | 	add	local01, #8
0e034     0F 21 02 FB | 	rdlong	local02, local01
0e038     08 1E 86 F1 | 	sub	local01, #8
0e03c     1C 20 86 F1 | 	sub	local02, #28
0e040     04 20 26 F3 | 	fle	local02, #4
0e044     30 20 62 FD | 	jmprel	local02
0e048                 | LR__1190
0e048     10 00 90 FD | 	jmp	#LR__1191
0e04c     14 00 90 FD | 	jmp	#LR__1192
0e050     18 00 90 FD | 	jmp	#LR__1193
0e054     24 00 90 FD | 	jmp	#LR__1194
0e058     38 00 90 FD | 	jmp	#LR__1195
0e05c                 | LR__1191
0e05c     0F FB 01 FB | 	rdlong	result1, local01
0e060     34 00 90 FD | 	jmp	#LR__1196
0e064                 | LR__1192
0e064     0F FB 01 FB | 	rdlong	result1, local01
0e068     2C 00 90 FD | 	jmp	#LR__1196
0e06c                 | LR__1193
0e06c     0F 13 02 FB | 	rdlong	arg01, local01
0e070     01 14 06 F6 | 	mov	arg02, #1
0e074     78 9D B0 FD | 	call	#__system___float_tointeger
0e078     1C 00 90 FD | 	jmp	#LR__1196
0e07c                 | LR__1194
0e07c     0F 13 02 FB | 	rdlong	arg01, local01
0e080     8C A0 B0 FD | 	call	#__system____builtin_atof
0e084     FD 12 02 F6 | 	mov	arg01, result1
0e088     00 14 06 F6 | 	mov	arg02, #0
0e08c     60 9D B0 FD | 	call	#__system___float_tointeger
0e090     04 00 90 FD | 	jmp	#LR__1196
0e094                 | LR__1195
0e094     00 FA 05 F6 | 	mov	result1, #0
0e098                 | LR__1196
0e098     A7 F0 03 F6 | 	mov	ptra, fp
0e09c     B2 00 A0 FD | 	call	#popregs_
0e0a0                 | _converttoint_ret
0e0a0     2D 00 64 FD | 	ret
0e0a4                 | 
0e0a4                 | ' 
0e0a4                 | ' sub do_rnd
0e0a4                 | _do_rnd
0e0a4     01 4A 05 F6 | 	mov	COUNT_, #1
0e0a8     A8 00 A0 FD | 	call	#pushregs_
0e0ac     10 F0 07 F1 | 	add	ptra, #16
0e0b0     41 00 00 FF 
0e0b4     44 E4 05 F1 | 	add	objptr, ##33348
0e0b8     F2 1E 02 FB | 	rdlong	local01, objptr
0e0bc     0F 17 02 F6 | 	mov	arg03, local01
0e0c0     01 16 66 F0 | 	shl	arg03, #1
0e0c4     0F 17 02 F1 | 	add	arg03, local01
0e0c8     02 16 66 F0 | 	shl	arg03, #2
0e0cc     03 00 00 FF 
0e0d0     04 E4 85 F1 | 	sub	objptr, ##1540
0e0d4     F2 16 02 F1 | 	add	arg03, objptr
0e0d8     0B 17 02 FB | 	rdlong	arg03, arg03
0e0dc     0C 4E 05 F1 | 	add	fp, #12
0e0e0     A7 16 62 FC | 	wrlong	arg03, fp
0e0e4                 | ' 
0e0e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0e4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0e0e4     0C 4E 85 F1 | 	sub	fp, #12
0e0e8     02 16 16 F2 | 	cmp	arg03, #2 wc
0e0ec     3E 00 00 FF 
0e0f0     40 E4 85 F1 | 	sub	objptr, ##31808
0e0f4     3C 00 90 CD |  if_b	jmp	#LR__1200
0e0f8     00 12 06 F6 | 	mov	arg01, #0
0e0fc     C8 C3 B0 FD | 	call	#__system___getiolock_0350
0e100     FD 12 02 F6 | 	mov	arg01, result1
0e104     0C 6E B0 FD | 	call	#__system___lockmem
0e108     22 01 00 FF 
0e10c     D3 14 06 F6 | 	mov	arg02, ##@LR__4324
0e110     00 12 06 F6 | 	mov	arg01, #0
0e114     00 16 06 F6 | 	mov	arg03, #0
0e118     EC 7A B0 FD | 	call	#__system___basic_print_string
0e11c     00 12 06 F6 | 	mov	arg01, #0
0e120     A4 C3 B0 FD | 	call	#__system___getiolock_0350
0e124     FD 00 68 FC | 	wrlong	#0, result1
0e128     27 12 06 F6 | 	mov	arg01, #39
0e12c     F0 38 B0 FD | 	call	#_printerror
0e130     2C 01 90 FD | 	jmp	#LR__1207
0e134                 | LR__1200
0e134                 | ' if numpar=0 then
0e134     0C 4E 05 F1 | 	add	fp, #12
0e138     A7 FE 09 FB | 	rdlong	result3, fp wz
0e13c     0C 4E 85 F1 | 	sub	fp, #12
0e140     20 00 90 5D |  if_ne	jmp	#LR__1201
0e144     08 4E 05 F1 | 	add	fp, #8
0e148     A7 3A 68 FC | 	wrlong	#29, fp
0e14c     08 4E 85 F1 | 	sub	fp, #8
0e150     1B FA 61 FD | 	getrnd	result1
0e154     A7 FA 61 FC | 	wrlong	result1, fp
0e158     A7 12 02 F6 | 	mov	arg01, fp
0e15c     CC A6 BF FD | 	call	#_push
0e160     FC 00 90 FD | 	jmp	#LR__1206
0e164                 | LR__1201
0e164     2C A6 BF FD | 	call	#_pop
0e168     A7 FA 61 FC | 	wrlong	result1, fp
0e16c     04 4E 05 F1 | 	add	fp, #4
0e170     A7 FC 61 FC | 	wrlong	result2, fp
0e174     04 4E 05 F1 | 	add	fp, #4
0e178     A7 FE 61 FC | 	wrlong	result3, fp
0e17c                 | '   t1=pop()
0e17c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0e17c     08 4E 85 F1 | 	sub	fp, #8
0e180     1C FE 0D F2 | 	cmp	result3, #28 wz
0e184     08 4E 05 51 |  if_ne	add	fp, #8
0e188     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e18c     08 4E 85 51 |  if_ne	sub	fp, #8
0e190     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e194     2C 00 90 5D |  if_ne	jmp	#LR__1202
0e198     1B FA 61 FD | 	getrnd	result1
0e19c     A7 1E 02 FB | 	rdlong	local01, fp
0e1a0     0F FB 11 FD | 	qdiv	result1, local01
0e1a4     A7 12 02 F6 | 	mov	arg01, fp
0e1a8     19 1E 62 FD | 	getqy	local01
0e1ac     A7 1E 62 FC | 	wrlong	local01, fp
0e1b0     08 4E 05 F1 | 	add	fp, #8
0e1b4     A7 3A 68 FC | 	wrlong	#29, fp
0e1b8     08 4E 85 F1 | 	sub	fp, #8
0e1bc     6C A6 BF FD | 	call	#_push
0e1c0     9C 00 90 FD | 	jmp	#LR__1205
0e1c4                 | LR__1202
0e1c4     08 4E 05 F1 | 	add	fp, #8
0e1c8     A7 1E 02 FB | 	rdlong	local01, fp
0e1cc     08 4E 85 F1 | 	sub	fp, #8
0e1d0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e1d4     48 00 90 5D |  if_ne	jmp	#LR__1203
0e1d8     A7 12 02 FB | 	rdlong	arg01, fp
0e1dc     00 C0 24 FF 
0e1e0     00 14 06 F6 | 	mov	arg02, ##1233125376
0e1e4     44 99 B0 FD | 	call	#__system___float_div
0e1e8     FD 1E 02 F6 | 	mov	local01, result1
0e1ec     1B 12 62 FD | 	getrnd	arg01
0e1f0     74 13 06 F4 | 	bitl	arg01, #372
0e1f4     04 94 B0 FD | 	call	#__system___float_fromuns
0e1f8     FD 14 02 F6 | 	mov	arg02, result1
0e1fc     0F 13 02 F6 | 	mov	arg01, local01
0e200     24 97 B0 FD | 	call	#__system___float_mul
0e204     A7 FA 61 FC | 	wrlong	result1, fp
0e208     08 4E 05 F1 | 	add	fp, #8
0e20c     A7 3C 68 FC | 	wrlong	#30, fp
0e210     08 4E 85 F1 | 	sub	fp, #8
0e214     A7 12 02 F6 | 	mov	arg01, fp
0e218     10 A6 BF FD | 	call	#_push
0e21c     40 00 90 FD | 	jmp	#LR__1204
0e220                 | LR__1203
0e220                 | '     print "rnd: "; : printerror(40) 
0e220     00 12 06 F6 | 	mov	arg01, #0
0e224     A0 C2 B0 FD | 	call	#__system___getiolock_0350
0e228     FD 12 02 F6 | 	mov	arg01, result1
0e22c     E4 6C B0 FD | 	call	#__system___lockmem
0e230     22 01 00 FF 
0e234     D9 14 06 F6 | 	mov	arg02, ##@LR__4325
0e238     00 12 06 F6 | 	mov	arg01, #0
0e23c     00 16 06 F6 | 	mov	arg03, #0
0e240     C4 79 B0 FD | 	call	#__system___basic_print_string
0e244     00 12 06 F6 | 	mov	arg01, #0
0e248     7C C2 B0 FD | 	call	#__system___getiolock_0350
0e24c     FD 00 68 FC | 	wrlong	#0, result1
0e250     28 12 06 F6 | 	mov	arg01, #40
0e254     C8 37 B0 FD | 	call	#_printerror
0e258     A7 12 02 F6 | 	mov	arg01, fp
0e25c     CC A5 BF FD | 	call	#_push
0e260                 | LR__1204
0e260                 | LR__1205
0e260                 | LR__1206
0e260                 | LR__1207
0e260     A7 F0 03 F6 | 	mov	ptra, fp
0e264     B2 00 A0 FD | 	call	#popregs_
0e268                 | _do_rnd_ret
0e268     2D 00 64 FD | 	ret
0e26c                 | 
0e26c                 | ' 
0e26c                 | ' sub do_sin
0e26c                 | _do_sin
0e26c     03 4A 05 F6 | 	mov	COUNT_, #3
0e270     A8 00 A0 FD | 	call	#pushregs_
0e274     10 F0 07 F1 | 	add	ptra, #16
0e278     41 00 00 FF 
0e27c     44 E4 05 F1 | 	add	objptr, ##33348
0e280     F2 1E 02 FB | 	rdlong	local01, objptr
0e284     0F 17 02 F6 | 	mov	arg03, local01
0e288     01 16 66 F0 | 	shl	arg03, #1
0e28c     0F 17 02 F1 | 	add	arg03, local01
0e290     02 16 66 F0 | 	shl	arg03, #2
0e294     03 00 00 FF 
0e298     04 E4 85 F1 | 	sub	objptr, ##1540
0e29c     F2 16 02 F1 | 	add	arg03, objptr
0e2a0     0B 17 02 FB | 	rdlong	arg03, arg03
0e2a4     0C 4E 05 F1 | 	add	fp, #12
0e2a8     A7 16 62 FC | 	wrlong	arg03, fp
0e2ac                 | ' 
0e2ac                 | ' numpar=compiledline(lineptr_e).result.uresult
0e2ac                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0e2ac     0C 4E 85 F1 | 	sub	fp, #12
0e2b0     02 16 16 F2 | 	cmp	arg03, #2 wc
0e2b4     3E 00 00 FF 
0e2b8     40 E4 85 F1 | 	sub	objptr, ##31808
0e2bc     0C 4E 05 C1 |  if_b	add	fp, #12
0e2c0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0e2c4     0C 4E 85 C1 |  if_b	sub	fp, #12
0e2c8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0e2cc     00 12 06 F6 | 	mov	arg01, #0
0e2d0     F4 C1 B0 FD | 	call	#__system___getiolock_0350
0e2d4     FD 12 02 F6 | 	mov	arg01, result1
0e2d8     38 6C B0 FD | 	call	#__system___lockmem
0e2dc     22 01 00 FF 
0e2e0     DF 14 06 F6 | 	mov	arg02, ##@LR__4326
0e2e4     00 12 06 F6 | 	mov	arg01, #0
0e2e8     00 16 06 F6 | 	mov	arg03, #0
0e2ec     18 79 B0 FD | 	call	#__system___basic_print_string
0e2f0     00 12 06 F6 | 	mov	arg01, #0
0e2f4     D0 C1 B0 FD | 	call	#__system___getiolock_0350
0e2f8     FD 00 68 FC | 	wrlong	#0, result1
0e2fc     27 12 06 F6 | 	mov	arg01, #39
0e300     1C 37 B0 FD | 	call	#_printerror
0e304     40 01 90 FD | 	jmp	#LR__1215
0e308                 | LR__1210
0e308     88 A4 BF FD | 	call	#_pop
0e30c     A7 FA 61 FC | 	wrlong	result1, fp
0e310     04 4E 05 F1 | 	add	fp, #4
0e314     A7 FC 61 FC | 	wrlong	result2, fp
0e318     04 4E 05 F1 | 	add	fp, #4
0e31c     A7 FE 61 FC | 	wrlong	result3, fp
0e320                 | ' t1=pop()
0e320                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0e320     08 4E 85 F1 | 	sub	fp, #8
0e324     1C FE 0D F2 | 	cmp	result3, #28 wz
0e328     08 4E 05 51 |  if_ne	add	fp, #8
0e32c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e330     08 4E 85 51 |  if_ne	sub	fp, #8
0e334     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e338     70 00 90 5D |  if_ne	jmp	#LR__1211
0e33c     A7 1E 02 FB | 	rdlong	local01, fp
0e340     0F 1F 52 F6 | 	abs	local01, local01 wc
0e344     68 1F 16 FD | 	qdiv	local01, #360
0e348     87 24 20 FF 
0e34c     DB 21 06 F6 | 	mov	local02, ##1078530011
0e350     19 1E 62 FD | 	getqy	local01
0e354     0F 13 82 F6 | 	negc	arg01, local01
0e358     09 13 52 F6 | 	abs	arg01, arg01 wc
0e35c     1F 22 C6 C9 |  if_b	decod	local03, #31
0e360     00 22 06 36 |  if_ae	mov	local03, #0
0e364     94 92 B0 FD | 	call	#__system___float_fromuns
0e368     11 FB 61 F5 | 	xor	result1, local03
0e36c     FD 12 02 F6 | 	mov	arg01, result1
0e370     00 9A 21 FF 
0e374     00 14 06 F6 | 	mov	arg02, ##1127481344
0e378     B0 97 B0 FD | 	call	#__system___float_div
0e37c     FD 14 02 F6 | 	mov	arg02, result1
0e380     10 13 02 F6 | 	mov	arg01, local02
0e384     A0 95 B0 FD | 	call	#__system___float_mul
0e388     FD 12 02 F6 | 	mov	arg01, result1
0e38c     D4 9E B0 FD | 	call	#__system____builtin_sinf
0e390     A7 FA 61 FC | 	wrlong	result1, fp
0e394     08 4E 05 F1 | 	add	fp, #8
0e398     A7 3C 68 FC | 	wrlong	#30, fp
0e39c     08 4E 85 F1 | 	sub	fp, #8
0e3a0     A7 12 02 F6 | 	mov	arg01, fp
0e3a4     84 A4 BF FD | 	call	#_push
0e3a8     9C 00 90 FD | 	jmp	#LR__1214
0e3ac                 | LR__1211
0e3ac     08 4E 05 F1 | 	add	fp, #8
0e3b0     A7 20 02 FB | 	rdlong	local02, fp
0e3b4     08 4E 85 F1 | 	sub	fp, #8
0e3b8     1E 20 0E F2 | 	cmp	local02, #30 wz
0e3bc     48 00 90 5D |  if_ne	jmp	#LR__1212
0e3c0     87 24 20 FF 
0e3c4     DB 21 06 F6 | 	mov	local02, ##1078530011
0e3c8     A7 12 02 FB | 	rdlong	arg01, fp
0e3cc     00 9A 21 FF 
0e3d0     00 14 06 F6 | 	mov	arg02, ##1127481344
0e3d4     54 97 B0 FD | 	call	#__system___float_div
0e3d8     FD 14 02 F6 | 	mov	arg02, result1
0e3dc     10 13 02 F6 | 	mov	arg01, local02
0e3e0     44 95 B0 FD | 	call	#__system___float_mul
0e3e4     FD 12 02 F6 | 	mov	arg01, result1
0e3e8     78 9E B0 FD | 	call	#__system____builtin_sinf
0e3ec     A7 FA 61 FC | 	wrlong	result1, fp
0e3f0     08 4E 05 F1 | 	add	fp, #8
0e3f4     A7 3C 68 FC | 	wrlong	#30, fp
0e3f8     08 4E 85 F1 | 	sub	fp, #8
0e3fc     A7 12 02 F6 | 	mov	arg01, fp
0e400     28 A4 BF FD | 	call	#_push
0e404     40 00 90 FD | 	jmp	#LR__1213
0e408                 | LR__1212
0e408                 | '   print "sin: "; : printerror(40) 
0e408     00 12 06 F6 | 	mov	arg01, #0
0e40c     B8 C0 B0 FD | 	call	#__system___getiolock_0350
0e410     FD 12 02 F6 | 	mov	arg01, result1
0e414     FC 6A B0 FD | 	call	#__system___lockmem
0e418     22 01 00 FF 
0e41c     E5 14 06 F6 | 	mov	arg02, ##@LR__4327
0e420     00 12 06 F6 | 	mov	arg01, #0
0e424     00 16 06 F6 | 	mov	arg03, #0
0e428     DC 77 B0 FD | 	call	#__system___basic_print_string
0e42c     00 12 06 F6 | 	mov	arg01, #0
0e430     94 C0 B0 FD | 	call	#__system___getiolock_0350
0e434     FD 00 68 FC | 	wrlong	#0, result1
0e438     28 12 06 F6 | 	mov	arg01, #40
0e43c     E0 35 B0 FD | 	call	#_printerror
0e440     A7 12 02 F6 | 	mov	arg01, fp
0e444     E4 A3 BF FD | 	call	#_push
0e448                 | LR__1213
0e448                 | LR__1214
0e448                 | LR__1215
0e448     A7 F0 03 F6 | 	mov	ptra, fp
0e44c     B2 00 A0 FD | 	call	#popregs_
0e450                 | _do_sin_ret
0e450     2D 00 64 FD | 	ret
0e454                 | 
0e454                 | ' 
0e454                 | ' sub do_stick
0e454                 | _do_stick
0e454     01 4A 05 F6 | 	mov	COUNT_, #1
0e458     A8 00 A0 FD | 	call	#pushregs_
0e45c     10 F0 07 F1 | 	add	ptra, #16
0e460     41 00 00 FF 
0e464     44 E4 05 F1 | 	add	objptr, ##33348
0e468     F2 1E 02 FB | 	rdlong	local01, objptr
0e46c     0F 17 02 F6 | 	mov	arg03, local01
0e470     01 16 66 F0 | 	shl	arg03, #1
0e474     0F 17 02 F1 | 	add	arg03, local01
0e478     02 16 66 F0 | 	shl	arg03, #2
0e47c     03 00 00 FF 
0e480     04 E4 85 F1 | 	sub	objptr, ##1540
0e484     F2 16 02 F1 | 	add	arg03, objptr
0e488     0B 17 02 FB | 	rdlong	arg03, arg03
0e48c     0C 4E 05 F1 | 	add	fp, #12
0e490     A7 16 62 FC | 	wrlong	arg03, fp
0e494                 | ' 
0e494                 | ' numpar=compiledline(lineptr_e).result.uresult
0e494                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0e494     0C 4E 85 F1 | 	sub	fp, #12
0e498     02 16 16 F2 | 	cmp	arg03, #2 wc
0e49c     3E 00 00 FF 
0e4a0     40 E4 85 F1 | 	sub	objptr, ##31808
0e4a4     3C 00 90 CD |  if_b	jmp	#LR__1220
0e4a8     00 12 06 F6 | 	mov	arg01, #0
0e4ac     18 C0 B0 FD | 	call	#__system___getiolock_0350
0e4b0     FD 12 02 F6 | 	mov	arg01, result1
0e4b4     5C 6A B0 FD | 	call	#__system___lockmem
0e4b8     22 01 00 FF 
0e4bc     EB 14 06 F6 | 	mov	arg02, ##@LR__4328
0e4c0     00 12 06 F6 | 	mov	arg01, #0
0e4c4     00 16 06 F6 | 	mov	arg03, #0
0e4c8     3C 77 B0 FD | 	call	#__system___basic_print_string
0e4cc     00 12 06 F6 | 	mov	arg01, #0
0e4d0     F4 BF B0 FD | 	call	#__system___getiolock_0350
0e4d4     FD 00 68 FC | 	wrlong	#0, result1
0e4d8     27 12 06 F6 | 	mov	arg01, #39
0e4dc     40 35 B0 FD | 	call	#_printerror
0e4e0     E8 00 90 FD | 	jmp	#LR__1224
0e4e4                 | LR__1220
0e4e4                 | ' 
0e4e4                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0e4e4     0C 4E 05 F1 | 	add	fp, #12
0e4e8     A7 FE 09 FB | 	rdlong	result3, fp wz
0e4ec     0C 4E 85 F1 | 	sub	fp, #12
0e4f0     30 00 90 5D |  if_ne	jmp	#LR__1221
0e4f4     51 00 00 FF 
0e4f8     C0 E5 05 F1 | 	add	objptr, ##41920
0e4fc     F2 1E 02 FB | 	rdlong	local01, objptr
0e500     51 00 00 FF 
0e504     C0 E5 85 F1 | 	sub	objptr, ##41920
0e508     A7 1E 62 FC | 	wrlong	local01, fp
0e50c     08 4E 05 F1 | 	add	fp, #8
0e510     A7 3A 68 FC | 	wrlong	#29, fp
0e514     08 4E 85 F1 | 	sub	fp, #8
0e518     A7 12 02 F6 | 	mov	arg01, fp
0e51c     0C A3 BF FD | 	call	#_push
0e520     A8 00 90 FD | 	jmp	#LR__1224
0e524                 | LR__1221
0e524     6C A2 BF FD | 	call	#_pop
0e528     A7 FA 61 FC | 	wrlong	result1, fp
0e52c     04 4E 05 F1 | 	add	fp, #4
0e530     A7 FC 61 FC | 	wrlong	result2, fp
0e534     04 4E 05 F1 | 	add	fp, #4
0e538     A7 FE 61 FC | 	wrlong	result3, fp
0e53c                 | ' 
0e53c                 | ' t1=pop()
0e53c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e53c     08 4E 85 F1 | 	sub	fp, #8
0e540     1C FE 0D F2 | 	cmp	result3, #28 wz
0e544     08 4E 05 51 |  if_ne	add	fp, #8
0e548     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e54c     08 4E 85 51 |  if_ne	sub	fp, #8
0e550     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e554     6C 00 90 5D |  if_ne	jmp	#LR__1223
0e558     A7 1E 02 FB | 	rdlong	local01, fp
0e55c     52 00 00 FF 
0e560     80 E4 05 F1 | 	add	objptr, ##42112
0e564     F2 1E 62 FC | 	wrlong	local01, objptr
0e568                 | '   q=t1.result.uresult
0e568                 | '   if q<7 then 
0e568     52 00 00 FF 
0e56c     80 E4 85 F1 | 	sub	objptr, ##42112
0e570     07 1E 56 F2 | 	cmps	local01, #7 wc
0e574     40 00 90 3D |  if_ae	jmp	#LR__1222
0e578     52 00 00 FF 
0e57c     80 E4 05 F1 | 	add	objptr, ##42112
0e580     F2 1E 02 FB | 	rdlong	local01, objptr
0e584     02 1E 66 F0 | 	shl	local01, #2
0e588     C0 E4 85 F1 | 	sub	objptr, #192
0e58c     F2 1E 02 F1 | 	add	local01, objptr
0e590     0F 1F 02 FB | 	rdlong	local01, local01
0e594     A7 1E 62 FC | 	wrlong	local01, fp
0e598     08 4E 05 F1 | 	add	fp, #8
0e59c     A7 3A 68 FC | 	wrlong	#29, fp
0e5a0     08 4E 85 F1 | 	sub	fp, #8
0e5a4     A7 12 02 F6 | 	mov	arg01, fp
0e5a8     51 00 00 FF 
0e5ac     C0 E5 85 F1 | 	sub	objptr, ##41920
0e5b0     78 A2 BF FD | 	call	#_push
0e5b4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0e5b4     14 00 90 FD | 	jmp	#LR__1224
0e5b8                 | LR__1222
0e5b8     29 12 06 F6 | 	mov	arg01, #41
0e5bc     60 34 B0 FD | 	call	#_printerror
0e5c0                 | '      printerror(41) : return
0e5c0     08 00 90 FD | 	jmp	#LR__1224
0e5c4                 | LR__1223
0e5c4     29 12 06 F6 | 	mov	arg01, #41
0e5c8     54 34 B0 FD | 	call	#_printerror
0e5cc                 | LR__1224
0e5cc     A7 F0 03 F6 | 	mov	ptra, fp
0e5d0     B2 00 A0 FD | 	call	#popregs_
0e5d4                 | _do_stick_ret
0e5d4     2D 00 64 FD | 	ret
0e5d8                 | 
0e5d8                 | ' 
0e5d8                 | ' sub do_strig
0e5d8                 | _do_strig
0e5d8     01 4A 05 F6 | 	mov	COUNT_, #1
0e5dc     A8 00 A0 FD | 	call	#pushregs_
0e5e0     10 F0 07 F1 | 	add	ptra, #16
0e5e4     41 00 00 FF 
0e5e8     44 E4 05 F1 | 	add	objptr, ##33348
0e5ec     F2 1E 02 FB | 	rdlong	local01, objptr
0e5f0     0F 17 02 F6 | 	mov	arg03, local01
0e5f4     01 16 66 F0 | 	shl	arg03, #1
0e5f8     0F 17 02 F1 | 	add	arg03, local01
0e5fc     02 16 66 F0 | 	shl	arg03, #2
0e600     03 00 00 FF 
0e604     04 E4 85 F1 | 	sub	objptr, ##1540
0e608     F2 16 02 F1 | 	add	arg03, objptr
0e60c     0B 17 02 FB | 	rdlong	arg03, arg03
0e610     0C 4E 05 F1 | 	add	fp, #12
0e614     A7 16 62 FC | 	wrlong	arg03, fp
0e618                 | ' 
0e618                 | ' numpar=compiledline(lineptr_e).result.uresult
0e618                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0e618     0C 4E 85 F1 | 	sub	fp, #12
0e61c     02 16 16 F2 | 	cmp	arg03, #2 wc
0e620     3E 00 00 FF 
0e624     40 E4 85 F1 | 	sub	objptr, ##31808
0e628     3C 00 90 CD |  if_b	jmp	#LR__1230
0e62c     00 12 06 F6 | 	mov	arg01, #0
0e630     94 BE B0 FD | 	call	#__system___getiolock_0350
0e634     FD 12 02 F6 | 	mov	arg01, result1
0e638     D8 68 B0 FD | 	call	#__system___lockmem
0e63c     22 01 00 FF 
0e640     F3 14 06 F6 | 	mov	arg02, ##@LR__4329
0e644     00 12 06 F6 | 	mov	arg01, #0
0e648     00 16 06 F6 | 	mov	arg03, #0
0e64c     B8 75 B0 FD | 	call	#__system___basic_print_string
0e650     00 12 06 F6 | 	mov	arg01, #0
0e654     70 BE B0 FD | 	call	#__system___getiolock_0350
0e658     FD 00 68 FC | 	wrlong	#0, result1
0e65c     27 12 06 F6 | 	mov	arg01, #39
0e660     BC 33 B0 FD | 	call	#_printerror
0e664     E8 00 90 FD | 	jmp	#LR__1234
0e668                 | LR__1230
0e668                 | ' 
0e668                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0e668     0C 4E 05 F1 | 	add	fp, #12
0e66c     A7 FE 09 FB | 	rdlong	result3, fp wz
0e670     0C 4E 85 F1 | 	sub	fp, #12
0e674     30 00 90 5D |  if_ne	jmp	#LR__1231
0e678     51 00 00 FF 
0e67c     DC E5 05 F1 | 	add	objptr, ##41948
0e680     F2 1E 02 FB | 	rdlong	local01, objptr
0e684     51 00 00 FF 
0e688     DC E5 85 F1 | 	sub	objptr, ##41948
0e68c     A7 1E 62 FC | 	wrlong	local01, fp
0e690     08 4E 05 F1 | 	add	fp, #8
0e694     A7 3A 68 FC | 	wrlong	#29, fp
0e698     08 4E 85 F1 | 	sub	fp, #8
0e69c     A7 12 02 F6 | 	mov	arg01, fp
0e6a0     88 A1 BF FD | 	call	#_push
0e6a4     A8 00 90 FD | 	jmp	#LR__1234
0e6a8                 | LR__1231
0e6a8     E8 A0 BF FD | 	call	#_pop
0e6ac     A7 FA 61 FC | 	wrlong	result1, fp
0e6b0     04 4E 05 F1 | 	add	fp, #4
0e6b4     A7 FC 61 FC | 	wrlong	result2, fp
0e6b8     04 4E 05 F1 | 	add	fp, #4
0e6bc     A7 FE 61 FC | 	wrlong	result3, fp
0e6c0                 | ' 
0e6c0                 | ' t1=pop()
0e6c0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0e6c0     08 4E 85 F1 | 	sub	fp, #8
0e6c4     1C FE 0D F2 | 	cmp	result3, #28 wz
0e6c8     08 4E 05 51 |  if_ne	add	fp, #8
0e6cc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e6d0     08 4E 85 51 |  if_ne	sub	fp, #8
0e6d4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0e6d8     6C 00 90 5D |  if_ne	jmp	#LR__1233
0e6dc     A7 1E 02 FB | 	rdlong	local01, fp
0e6e0     52 00 00 FF 
0e6e4     80 E4 05 F1 | 	add	objptr, ##42112
0e6e8     F2 1E 62 FC | 	wrlong	local01, objptr
0e6ec                 | '   q=t1.result.uresult
0e6ec                 | '   if q<7 then 
0e6ec     52 00 00 FF 
0e6f0     80 E4 85 F1 | 	sub	objptr, ##42112
0e6f4     07 1E 56 F2 | 	cmps	local01, #7 wc
0e6f8     40 00 90 3D |  if_ae	jmp	#LR__1232
0e6fc     52 00 00 FF 
0e700     80 E4 05 F1 | 	add	objptr, ##42112
0e704     F2 1E 02 FB | 	rdlong	local01, objptr
0e708     02 1E 66 F0 | 	shl	local01, #2
0e70c     A4 E4 85 F1 | 	sub	objptr, #164
0e710     F2 1E 02 F1 | 	add	local01, objptr
0e714     0F 1F 02 FB | 	rdlong	local01, local01
0e718     A7 1E 62 FC | 	wrlong	local01, fp
0e71c     08 4E 05 F1 | 	add	fp, #8
0e720     A7 3A 68 FC | 	wrlong	#29, fp
0e724     08 4E 85 F1 | 	sub	fp, #8
0e728     A7 12 02 F6 | 	mov	arg01, fp
0e72c     51 00 00 FF 
0e730     DC E5 85 F1 | 	sub	objptr, ##41948
0e734     F4 A0 BF FD | 	call	#_push
0e738                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0e738     14 00 90 FD | 	jmp	#LR__1234
0e73c                 | LR__1232
0e73c     29 12 06 F6 | 	mov	arg01, #41
0e740     DC 32 B0 FD | 	call	#_printerror
0e744                 | '      printerror(41) : return
0e744     08 00 90 FD | 	jmp	#LR__1234
0e748                 | LR__1233
0e748     29 12 06 F6 | 	mov	arg01, #41
0e74c     D0 32 B0 FD | 	call	#_printerror
0e750                 | LR__1234
0e750     A7 F0 03 F6 | 	mov	ptra, fp
0e754     B2 00 A0 FD | 	call	#popregs_
0e758                 | _do_strig_ret
0e758     2D 00 64 FD | 	ret
0e75c                 | 
0e75c                 | ' 
0e75c                 | ' sub do_getpixel
0e75c                 | _do_getpixel
0e75c     00 4A 05 F6 | 	mov	COUNT_, #0
0e760     A8 00 A0 FD | 	call	#pushregs_
0e764     24 F0 07 F1 | 	add	ptra, #36
0e768     41 00 00 FF 
0e76c     44 E4 05 F1 | 	add	objptr, ##33348
0e770     F2 16 02 FB | 	rdlong	arg03, objptr
0e774     0B 15 02 F6 | 	mov	arg02, arg03
0e778     01 14 66 F0 | 	shl	arg02, #1
0e77c     0B 15 02 F1 | 	add	arg02, arg03
0e780     02 14 66 F0 | 	shl	arg02, #2
0e784     03 00 00 FF 
0e788     04 E4 85 F1 | 	sub	objptr, ##1540
0e78c     F2 14 02 F1 | 	add	arg02, objptr
0e790     0A 17 02 FB | 	rdlong	arg03, arg02
0e794     18 4E 05 F1 | 	add	fp, #24
0e798     A7 16 62 FC | 	wrlong	arg03, fp
0e79c                 | ' 
0e79c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e79c                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0e79c     18 4E 85 F1 | 	sub	fp, #24
0e7a0     02 16 0E F2 | 	cmp	arg03, #2 wz
0e7a4     3E 00 00 FF 
0e7a8     40 E4 85 F1 | 	sub	objptr, ##31808
0e7ac     3C 00 90 AD |  if_e	jmp	#LR__1240
0e7b0     00 12 06 F6 | 	mov	arg01, #0
0e7b4     10 BD B0 FD | 	call	#__system___getiolock_0350
0e7b8     FD 12 02 F6 | 	mov	arg01, result1
0e7bc     54 67 B0 FD | 	call	#__system___lockmem
0e7c0     22 01 00 FF 
0e7c4     FB 14 06 F6 | 	mov	arg02, ##@LR__4330
0e7c8     00 12 06 F6 | 	mov	arg01, #0
0e7cc     00 16 06 F6 | 	mov	arg03, #0
0e7d0     34 74 B0 FD | 	call	#__system___basic_print_string
0e7d4     00 12 06 F6 | 	mov	arg01, #0
0e7d8     EC BC B0 FD | 	call	#__system___getiolock_0350
0e7dc     FD 00 68 FC | 	wrlong	#0, result1
0e7e0     27 12 06 F6 | 	mov	arg01, #39
0e7e4     38 32 B0 FD | 	call	#_printerror
0e7e8     B4 00 90 FD | 	jmp	#LR__1241
0e7ec                 | LR__1240
0e7ec     A4 9F BF FD | 	call	#_pop
0e7f0     FD 16 02 F6 | 	mov	arg03, result1
0e7f4     FE 14 02 F6 | 	mov	arg02, result2
0e7f8     FF 12 02 F6 | 	mov	arg01, result3
0e7fc     0C 4E 05 F1 | 	add	fp, #12
0e800     A7 16 62 FC | 	wrlong	arg03, fp
0e804     04 4E 05 F1 | 	add	fp, #4
0e808     A7 14 62 FC | 	wrlong	arg02, fp
0e80c     04 4E 05 F1 | 	add	fp, #4
0e810     A7 12 62 FC | 	wrlong	arg01, fp
0e814     14 4E 85 F1 | 	sub	fp, #20
0e818     78 9F BF FD | 	call	#_pop
0e81c     FF 16 02 F6 | 	mov	arg03, result3
0e820     A7 FA 61 FC | 	wrlong	result1, fp
0e824     04 4E 05 F1 | 	add	fp, #4
0e828     A7 FC 61 FC | 	wrlong	result2, fp
0e82c     04 4E 05 F1 | 	add	fp, #4
0e830     A7 16 62 FC | 	wrlong	arg03, fp
0e834     08 4E 85 F1 | 	sub	fp, #8
0e838     A7 12 02 F6 | 	mov	arg01, fp
0e83c     E4 F7 BF FD | 	call	#_converttoint
0e840     1C 4E 05 F1 | 	add	fp, #28
0e844     A7 FA 61 FC | 	wrlong	result1, fp
0e848     10 4E 85 F1 | 	sub	fp, #16
0e84c     A7 12 02 F6 | 	mov	arg01, fp
0e850     0C 4E 85 F1 | 	sub	fp, #12
0e854     CC F7 BF FD | 	call	#_converttoint
0e858     FD 16 02 F6 | 	mov	arg03, result1
0e85c     20 4E 05 F1 | 	add	fp, #32
0e860     A7 16 62 FC | 	wrlong	arg03, fp
0e864     F2 12 02 FB | 	rdlong	arg01, objptr
0e868     04 4E 85 F1 | 	sub	fp, #4
0e86c     A7 FE 01 FB | 	rdlong	result3, fp
0e870     FF 12 02 F1 | 	add	arg01, result3
0e874     1C 4E 85 F1 | 	sub	fp, #28
0e878     0A 16 66 F0 | 	shl	arg03, #10
0e87c     0B 13 02 F1 | 	add	arg01, arg03
0e880     00 33 B0 FD | 	call	#_pspeek
0e884     FD FA E1 F8 | 	getbyte	result1, result1, #0
0e888     A7 FA 61 FC | 	wrlong	result1, fp
0e88c     08 4E 05 F1 | 	add	fp, #8
0e890     A7 3A 68 FC | 	wrlong	#29, fp
0e894     08 4E 85 F1 | 	sub	fp, #8
0e898     A7 12 02 F6 | 	mov	arg01, fp
0e89c     8C 9F BF FD | 	call	#_push
0e8a0                 | LR__1241
0e8a0     A7 F0 03 F6 | 	mov	ptra, fp
0e8a4     B2 00 A0 FD | 	call	#popregs_
0e8a8                 | _do_getpixel_ret
0e8a8     2D 00 64 FD | 	ret
0e8ac                 | 
0e8ac                 | ' 
0e8ac                 | ' 
0e8ac                 | ' 
0e8ac                 | ' sub do_defsprite
0e8ac                 | _do_defsprite
0e8ac     07 4A 05 F6 | 	mov	COUNT_, #7
0e8b0     A8 00 A0 FD | 	call	#pushregs_
0e8b4     5C F0 07 F1 | 	add	ptra, #92
0e8b8     D8 9E BF FD | 	call	#_pop
0e8bc     FD 16 02 F6 | 	mov	arg03, result1
0e8c0     FE 14 02 F6 | 	mov	arg02, result2
0e8c4     FF 12 02 F6 | 	mov	arg01, result3
0e8c8     30 4E 05 F1 | 	add	fp, #48
0e8cc     A7 16 62 FC | 	wrlong	arg03, fp
0e8d0     04 4E 05 F1 | 	add	fp, #4
0e8d4     A7 14 62 FC | 	wrlong	arg02, fp
0e8d8     04 4E 05 F1 | 	add	fp, #4
0e8dc     A7 12 62 FC | 	wrlong	arg01, fp
0e8e0     38 4E 85 F1 | 	sub	fp, #56
0e8e4     AC 9E BF FD | 	call	#_pop
0e8e8     FD 16 02 F6 | 	mov	arg03, result1
0e8ec     FE 14 02 F6 | 	mov	arg02, result2
0e8f0     FF 12 02 F6 | 	mov	arg01, result3
0e8f4     24 4E 05 F1 | 	add	fp, #36
0e8f8     A7 16 62 FC | 	wrlong	arg03, fp
0e8fc     04 4E 05 F1 | 	add	fp, #4
0e900     A7 14 62 FC | 	wrlong	arg02, fp
0e904     04 4E 05 F1 | 	add	fp, #4
0e908     A7 12 62 FC | 	wrlong	arg01, fp
0e90c     2C 4E 85 F1 | 	sub	fp, #44
0e910     80 9E BF FD | 	call	#_pop
0e914     FD 16 02 F6 | 	mov	arg03, result1
0e918     FE 14 02 F6 | 	mov	arg02, result2
0e91c     FF 12 02 F6 | 	mov	arg01, result3
0e920     18 4E 05 F1 | 	add	fp, #24
0e924     A7 16 62 FC | 	wrlong	arg03, fp
0e928     04 4E 05 F1 | 	add	fp, #4
0e92c     A7 14 62 FC | 	wrlong	arg02, fp
0e930     04 4E 05 F1 | 	add	fp, #4
0e934     A7 12 62 FC | 	wrlong	arg01, fp
0e938     20 4E 85 F1 | 	sub	fp, #32
0e93c     54 9E BF FD | 	call	#_pop
0e940     FD 16 02 F6 | 	mov	arg03, result1
0e944     FE 14 02 F6 | 	mov	arg02, result2
0e948     FF 12 02 F6 | 	mov	arg01, result3
0e94c     0C 4E 05 F1 | 	add	fp, #12
0e950     A7 16 62 FC | 	wrlong	arg03, fp
0e954     04 4E 05 F1 | 	add	fp, #4
0e958     A7 14 62 FC | 	wrlong	arg02, fp
0e95c     04 4E 05 F1 | 	add	fp, #4
0e960     A7 12 62 FC | 	wrlong	arg01, fp
0e964     14 4E 85 F1 | 	sub	fp, #20
0e968     28 9E BF FD | 	call	#_pop
0e96c     FF 16 02 F6 | 	mov	arg03, result3
0e970     A7 FA 61 FC | 	wrlong	result1, fp
0e974     04 4E 05 F1 | 	add	fp, #4
0e978     A7 FC 61 FC | 	wrlong	result2, fp
0e97c     04 4E 05 F1 | 	add	fp, #4
0e980     A7 16 62 FC | 	wrlong	arg03, fp
0e984     08 4E 85 F1 | 	sub	fp, #8
0e988     A7 12 02 F6 | 	mov	arg01, fp
0e98c     94 F6 BF FD | 	call	#_converttoint
0e990     3C 4E 05 F1 | 	add	fp, #60
0e994     A7 FA 61 FC | 	wrlong	result1, fp
0e998     30 4E 85 F1 | 	sub	fp, #48
0e99c     A7 12 02 F6 | 	mov	arg01, fp
0e9a0     0C 4E 85 F1 | 	sub	fp, #12
0e9a4     7C F6 BF FD | 	call	#_converttoint
0e9a8     40 4E 05 F1 | 	add	fp, #64
0e9ac     A7 FA 61 FC | 	wrlong	result1, fp
0e9b0     28 4E 85 F1 | 	sub	fp, #40
0e9b4     A7 12 02 F6 | 	mov	arg01, fp
0e9b8     18 4E 85 F1 | 	sub	fp, #24
0e9bc     64 F6 BF FD | 	call	#_converttoint
0e9c0     44 4E 05 F1 | 	add	fp, #68
0e9c4     A7 FA 61 FC | 	wrlong	result1, fp
0e9c8     20 4E 85 F1 | 	sub	fp, #32
0e9cc     A7 12 02 F6 | 	mov	arg01, fp
0e9d0     24 4E 85 F1 | 	sub	fp, #36
0e9d4     4C F6 BF FD | 	call	#_converttoint
0e9d8     48 4E 05 F1 | 	add	fp, #72
0e9dc     A7 FA 61 FC | 	wrlong	result1, fp
0e9e0     18 4E 85 F1 | 	sub	fp, #24
0e9e4     A7 12 02 F6 | 	mov	arg01, fp
0e9e8     30 4E 85 F1 | 	sub	fp, #48
0e9ec     34 F6 BF FD | 	call	#_converttoint
0e9f0     4C 4E 05 F1 | 	add	fp, #76
0e9f4     A7 FA 61 FC | 	wrlong	result1, fp
0e9f8                 | ' 
0e9f8                 | ' t5=pop()
0e9f8                 | ' t4=pop()
0e9f8                 | ' t3=pop()
0e9f8                 | ' t2=pop()
0e9f8                 | ' t1=pop()
0e9f8                 | ' 
0e9f8                 | ' ' do convert, defsprite is not a racing command
0e9f8                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0e9f8                 | '  
0e9f8                 | ' ' todo: check parameters for linits
0e9f8                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0e9f8     10 4E 85 F1 | 	sub	fp, #16
0e9fc     A7 16 02 FB | 	rdlong	arg03, fp
0ea00     3C 4E 85 F1 | 	sub	fp, #60
0ea04     02 16 66 F0 | 	shl	arg03, #2
0ea08     51 00 00 FF 
0ea0c     F8 E5 05 F1 | 	add	objptr, ##41976
0ea10     F2 16 02 F1 | 	add	arg03, objptr
0ea14     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0ea18     51 00 00 FF 
0ea1c     F8 E5 85 F1 | 	sub	objptr, ##41976
0ea20     2C 00 90 AD |  if_e	jmp	#LR__1250
0ea24     3C 4E 05 F1 | 	add	fp, #60
0ea28     A7 16 02 FB | 	rdlong	arg03, fp
0ea2c     3C 4E 85 F1 | 	sub	fp, #60
0ea30     02 16 66 F0 | 	shl	arg03, #2
0ea34     51 00 00 FF 
0ea38     F8 E5 05 F1 | 	add	objptr, ##41976
0ea3c     F2 16 02 F1 | 	add	arg03, objptr
0ea40     0B 13 02 FB | 	rdlong	arg01, arg03
0ea44     51 00 00 FF 
0ea48     F8 E5 85 F1 | 	sub	objptr, ##41976
0ea4c     68 A0 B0 FD | 	call	#__system___gc_free
0ea50                 | LR__1250
0ea50     3C 4E 05 F1 | 	add	fp, #60
0ea54     A7 1E 02 FB | 	rdlong	local01, fp
0ea58     0C 4E 05 F1 | 	add	fp, #12
0ea5c     A7 16 02 FB | 	rdlong	arg03, fp
0ea60     04 4E 05 F1 | 	add	fp, #4
0ea64     A7 14 02 FB | 	rdlong	arg02, fp
0ea68     0A 17 02 FD | 	qmul	arg03, arg02
0ea6c     02 1E 66 F0 | 	shl	local01, #2
0ea70     51 00 00 FF 
0ea74     F8 E5 05 F1 | 	add	objptr, ##41976
0ea78     F2 1E 02 F1 | 	add	local01, objptr
0ea7c     4C 4E 85 F1 | 	sub	fp, #76
0ea80     51 00 00 FF 
0ea84     F8 E5 85 F1 | 	sub	objptr, ##41976
0ea88     18 12 62 FD | 	getqx	arg01
0ea8c     EC 9E B0 FD | 	call	#__system___gc_alloc_managed
0ea90     0F FB 61 FC | 	wrlong	result1, local01
0ea94                 | ' for y=a3 to a3+a5-1
0ea94     44 4E 05 F1 | 	add	fp, #68
0ea98     A7 20 02 FB | 	rdlong	local02, fp
0ea9c     0C 4E 05 F1 | 	add	fp, #12
0eaa0     A7 20 62 FC | 	wrlong	local02, fp
0eaa4     0C 4E 85 F1 | 	sub	fp, #12
0eaa8     A7 22 02 FB | 	rdlong	local03, fp
0eaac     08 4E 05 F1 | 	add	fp, #8
0eab0     A7 24 02 FB | 	rdlong	local04, fp
0eab4     4C 4E 85 F1 | 	sub	fp, #76
0eab8     12 23 02 F1 | 	add	local03, local04
0eabc                 | LR__1251
0eabc     50 4E 05 F1 | 	add	fp, #80
0eac0     A7 20 02 FB | 	rdlong	local02, fp
0eac4     50 4E 85 F1 | 	sub	fp, #80
0eac8     11 21 52 F2 | 	cmps	local02, local03 wc
0eacc     10 01 90 3D |  if_ae	jmp	#LR__1254
0ead0                 | '   for x=a2 to a4+a2-1
0ead0     40 4E 05 F1 | 	add	fp, #64
0ead4     A7 1E 02 FB | 	rdlong	local01, fp
0ead8     52 00 00 FF 
0eadc     54 E4 05 F1 | 	add	objptr, ##42068
0eae0     F2 1E 62 FC | 	wrlong	local01, objptr
0eae4     52 00 00 FF 
0eae8     54 E4 85 F1 | 	sub	objptr, ##42068
0eaec     08 4E 05 F1 | 	add	fp, #8
0eaf0     A7 26 02 FB | 	rdlong	local05, fp
0eaf4     08 4E 85 F1 | 	sub	fp, #8
0eaf8     A7 28 02 FB | 	rdlong	local06, fp
0eafc     40 4E 85 F1 | 	sub	fp, #64
0eb00     14 27 02 F1 | 	add	local05, local06
0eb04                 | LR__1252
0eb04     52 00 00 FF 
0eb08     54 E4 05 F1 | 	add	objptr, ##42068
0eb0c     F2 1E 02 FB | 	rdlong	local01, objptr
0eb10     52 00 00 FF 
0eb14     54 E4 85 F1 | 	sub	objptr, ##42068
0eb18     13 1F 52 F2 | 	cmps	local01, local05 wc
0eb1c     A8 00 90 3D |  if_ae	jmp	#LR__1253
0eb20     3C 4E 05 F1 | 	add	fp, #60
0eb24     A7 28 02 FB | 	rdlong	local06, fp
0eb28     04 4E 05 F1 | 	add	fp, #4
0eb2c     A7 24 02 FB | 	rdlong	local04, fp
0eb30     10 4E 05 F1 | 	add	fp, #16
0eb34     A7 20 02 FB | 	rdlong	local02, fp
0eb38     10 1F 02 F6 | 	mov	local01, local02
0eb3c     0C 4E 85 F1 | 	sub	fp, #12
0eb40     A7 16 02 FB | 	rdlong	arg03, fp
0eb44     0B 1F 82 F1 | 	sub	local01, arg03
0eb48     04 4E 05 F1 | 	add	fp, #4
0eb4c     A7 16 02 FB | 	rdlong	arg03, fp
0eb50     0B 1F 02 FD | 	qmul	local01, arg03
0eb54     02 28 66 F0 | 	shl	local06, #2
0eb58     51 00 00 FF 
0eb5c     F8 E5 05 F1 | 	add	objptr, ##41976
0eb60     F2 28 02 F1 | 	add	local06, objptr
0eb64     14 29 02 FB | 	rdlong	local06, local06
0eb68     5C E4 05 F1 | 	add	objptr, #92
0eb6c     F2 1E 02 FB | 	rdlong	local01, objptr
0eb70     52 00 00 FF 
0eb74     54 E4 85 F1 | 	sub	objptr, ##42068
0eb78     0F 2B 02 F6 | 	mov	local07, local01
0eb7c     12 2B 82 F1 | 	sub	local07, local04
0eb80     F2 12 02 FB | 	rdlong	arg01, objptr
0eb84     0F 13 02 F1 | 	add	arg01, local01
0eb88     48 4E 85 F1 | 	sub	fp, #72
0eb8c     0A 20 66 F0 | 	shl	local02, #10
0eb90     10 13 02 F1 | 	add	arg01, local02
0eb94     18 24 62 FD | 	getqx	local04
0eb98     12 2B 02 F1 | 	add	local07, local04
0eb9c     14 2B 02 F1 | 	add	local07, local06
0eba0     E0 2F B0 FD | 	call	#_pspeek
0eba4     15 FB 41 FC | 	wrbyte	result1, local07
0eba8     52 00 00 FF 
0ebac     54 E4 05 F1 | 	add	objptr, ##42068
0ebb0     F2 2A 02 FB | 	rdlong	local07, objptr
0ebb4     01 2A 06 F1 | 	add	local07, #1
0ebb8     F2 2A 62 FC | 	wrlong	local07, objptr
0ebbc     52 00 00 FF 
0ebc0     54 E4 85 F1 | 	sub	objptr, ##42068
0ebc4     3C FF 9F FD | 	jmp	#LR__1252
0ebc8                 | LR__1253
0ebc8     50 4E 05 F1 | 	add	fp, #80
0ebcc     A7 2A 02 FB | 	rdlong	local07, fp
0ebd0     01 2A 06 F1 | 	add	local07, #1
0ebd4     A7 2A 62 FC | 	wrlong	local07, fp
0ebd8     50 4E 85 F1 | 	sub	fp, #80
0ebdc     DC FE 9F FD | 	jmp	#LR__1251
0ebe0                 | LR__1254
0ebe0     3C 4E 05 F1 | 	add	fp, #60
0ebe4     A7 2A 02 FB | 	rdlong	local07, fp
0ebe8     15 13 02 F6 | 	mov	arg01, local07
0ebec     3C 4E 85 F1 | 	sub	fp, #60
0ebf0     02 2A 66 F0 | 	shl	local07, #2
0ebf4     51 00 00 FF 
0ebf8     F8 E5 05 F1 | 	add	objptr, ##41976
0ebfc     F2 2A 02 F1 | 	add	local07, objptr
0ec00     15 15 02 FB | 	rdlong	arg02, local07
0ec04     51 00 00 FF 
0ec08     F8 E5 85 F1 | 	sub	objptr, ##41976
0ec0c     EC 42 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0ec10     3C 4E 05 F1 | 	add	fp, #60
0ec14     A7 12 02 FB | 	rdlong	arg01, fp
0ec18     0C 4E 05 F1 | 	add	fp, #12
0ec1c     A7 14 02 FB | 	rdlong	arg02, fp
0ec20     04 4E 05 F1 | 	add	fp, #4
0ec24     A7 16 02 FB | 	rdlong	arg03, fp
0ec28     4C 4E 85 F1 | 	sub	fp, #76
0ec2c     40 43 B0 FD | 	call	#_hg010b_spin2_setspritesize
0ec30     A7 F0 03 F6 | 	mov	ptra, fp
0ec34     B2 00 A0 FD | 	call	#popregs_
0ec38                 | _do_defsprite_ret
0ec38     2D 00 64 FD | 	ret
0ec3c                 | 
0ec3c                 | ' 
0ec3c                 | ' sub do_sprite
0ec3c                 | _do_sprite
0ec3c     00 4A 05 F6 | 	mov	COUNT_, #0
0ec40     A8 00 A0 FD | 	call	#pushregs_
0ec44     30 F0 07 F1 | 	add	ptra, #48
0ec48     48 9B BF FD | 	call	#_pop
0ec4c     FD 16 02 F6 | 	mov	arg03, result1
0ec50     FE 14 02 F6 | 	mov	arg02, result2
0ec54     FF 12 02 F6 | 	mov	arg01, result3
0ec58     18 4E 05 F1 | 	add	fp, #24
0ec5c     A7 16 62 FC | 	wrlong	arg03, fp
0ec60     04 4E 05 F1 | 	add	fp, #4
0ec64     A7 14 62 FC | 	wrlong	arg02, fp
0ec68     04 4E 05 F1 | 	add	fp, #4
0ec6c     A7 12 62 FC | 	wrlong	arg01, fp
0ec70     20 4E 85 F1 | 	sub	fp, #32
0ec74     1C 9B BF FD | 	call	#_pop
0ec78     FD 16 02 F6 | 	mov	arg03, result1
0ec7c     FE 14 02 F6 | 	mov	arg02, result2
0ec80     FF 12 02 F6 | 	mov	arg01, result3
0ec84     0C 4E 05 F1 | 	add	fp, #12
0ec88     A7 16 62 FC | 	wrlong	arg03, fp
0ec8c     04 4E 05 F1 | 	add	fp, #4
0ec90     A7 14 62 FC | 	wrlong	arg02, fp
0ec94     04 4E 05 F1 | 	add	fp, #4
0ec98     A7 12 62 FC | 	wrlong	arg01, fp
0ec9c     14 4E 85 F1 | 	sub	fp, #20
0eca0     F0 9A BF FD | 	call	#_pop
0eca4     FF 16 02 F6 | 	mov	arg03, result3
0eca8     A7 FA 61 FC | 	wrlong	result1, fp
0ecac     04 4E 05 F1 | 	add	fp, #4
0ecb0     A7 FC 61 FC | 	wrlong	result2, fp
0ecb4     04 4E 05 F1 | 	add	fp, #4
0ecb8     A7 16 62 FC | 	wrlong	arg03, fp
0ecbc     08 4E 85 F1 | 	sub	fp, #8
0ecc0     A7 12 02 F6 | 	mov	arg01, fp
0ecc4     5C F3 BF FD | 	call	#_converttoint
0ecc8     24 4E 05 F1 | 	add	fp, #36
0eccc     A7 FA 61 FC | 	wrlong	result1, fp
0ecd0     18 4E 85 F1 | 	sub	fp, #24
0ecd4     A7 12 02 F6 | 	mov	arg01, fp
0ecd8     0C 4E 85 F1 | 	sub	fp, #12
0ecdc     44 F3 BF FD | 	call	#_converttoint
0ece0     28 4E 05 F1 | 	add	fp, #40
0ece4     A7 FA 61 FC | 	wrlong	result1, fp
0ece8     10 4E 85 F1 | 	sub	fp, #16
0ecec     A7 12 02 F6 | 	mov	arg01, fp
0ecf0     18 4E 85 F1 | 	sub	fp, #24
0ecf4     2C F3 BF FD | 	call	#_converttoint
0ecf8     2C 4E 05 F1 | 	add	fp, #44
0ecfc     A7 FA 61 FC | 	wrlong	result1, fp
0ed00     08 4E 85 F1 | 	sub	fp, #8
0ed04     A7 12 02 FB | 	rdlong	arg01, fp
0ed08     04 4E 05 F1 | 	add	fp, #4
0ed0c     A7 14 02 FB | 	rdlong	arg02, fp
0ed10     FD 16 02 F6 | 	mov	arg03, result1
0ed14     28 4E 85 F1 | 	sub	fp, #40
0ed18     08 42 B0 FD | 	call	#_hg010b_spin2_setspritepos
0ed1c     A7 F0 03 F6 | 	mov	ptra, fp
0ed20     B2 00 A0 FD | 	call	#popregs_
0ed24                 | _do_sprite_ret
0ed24     2D 00 64 FD | 	ret
0ed28                 | 
0ed28                 | ' 
0ed28                 | ' sub do_mousex
0ed28                 | _do_mousex
0ed28     00 4A 05 F6 | 	mov	COUNT_, #0
0ed2c     A8 00 A0 FD | 	call	#pushregs_
0ed30     0C F0 07 F1 | 	add	ptra, #12
0ed34     08 4E 05 F1 | 	add	fp, #8
0ed38     A7 3A 68 FC | 	wrlong	#29, fp
0ed3c     08 4E 85 F1 | 	sub	fp, #8
0ed40     51 00 00 FF 
0ed44     B0 E5 05 F1 | 	add	objptr, ##41904
0ed48     F2 12 02 FB | 	rdlong	arg01, objptr
0ed4c     51 00 00 FF 
0ed50     B0 E5 85 F1 | 	sub	objptr, ##41904
0ed54     A7 12 62 FC | 	wrlong	arg01, fp
0ed58     A7 12 02 F6 | 	mov	arg01, fp
0ed5c     CC 9A BF FD | 	call	#_push
0ed60     A7 F0 03 F6 | 	mov	ptra, fp
0ed64     B2 00 A0 FD | 	call	#popregs_
0ed68                 | _do_mousex_ret
0ed68     2D 00 64 FD | 	ret
0ed6c                 | 
0ed6c                 | ' 
0ed6c                 | ' sub do_mousey
0ed6c                 | _do_mousey
0ed6c     00 4A 05 F6 | 	mov	COUNT_, #0
0ed70     A8 00 A0 FD | 	call	#pushregs_
0ed74     0C F0 07 F1 | 	add	ptra, #12
0ed78     08 4E 05 F1 | 	add	fp, #8
0ed7c     A7 3A 68 FC | 	wrlong	#29, fp
0ed80     08 4E 85 F1 | 	sub	fp, #8
0ed84     51 00 00 FF 
0ed88     B4 E5 05 F1 | 	add	objptr, ##41908
0ed8c     F2 12 02 FB | 	rdlong	arg01, objptr
0ed90     51 00 00 FF 
0ed94     B4 E5 85 F1 | 	sub	objptr, ##41908
0ed98     A7 12 62 FC | 	wrlong	arg01, fp
0ed9c     A7 12 02 F6 | 	mov	arg01, fp
0eda0     88 9A BF FD | 	call	#_push
0eda4     A7 F0 03 F6 | 	mov	ptra, fp
0eda8     B2 00 A0 FD | 	call	#popregs_
0edac                 | _do_mousey_ret
0edac     2D 00 64 FD | 	ret
0edb0                 | 
0edb0                 | ' 
0edb0                 | ' sub do_mousew
0edb0                 | _do_mousew
0edb0     00 4A 05 F6 | 	mov	COUNT_, #0
0edb4     A8 00 A0 FD | 	call	#pushregs_
0edb8     0C F0 07 F1 | 	add	ptra, #12
0edbc     08 4E 05 F1 | 	add	fp, #8
0edc0     A7 38 68 FC | 	wrlong	#28, fp
0edc4     08 4E 85 F1 | 	sub	fp, #8
0edc8     51 00 00 FF 
0edcc     BC E5 05 F1 | 	add	objptr, ##41916
0edd0     F2 12 02 FB | 	rdlong	arg01, objptr
0edd4     51 00 00 FF 
0edd8     BC E5 85 F1 | 	sub	objptr, ##41916
0eddc     A7 12 62 FC | 	wrlong	arg01, fp
0ede0     A7 12 02 F6 | 	mov	arg01, fp
0ede4     44 9A BF FD | 	call	#_push
0ede8     A7 F0 03 F6 | 	mov	ptra, fp
0edec     B2 00 A0 FD | 	call	#popregs_
0edf0                 | _do_mousew_ret
0edf0     2D 00 64 FD | 	ret
0edf4                 | 
0edf4                 | ' 
0edf4                 | ' sub do_mousek
0edf4                 | _do_mousek
0edf4     00 4A 05 F6 | 	mov	COUNT_, #0
0edf8     A8 00 A0 FD | 	call	#pushregs_
0edfc     0C F0 07 F1 | 	add	ptra, #12
0ee00     08 4E 05 F1 | 	add	fp, #8
0ee04     A7 3A 68 FC | 	wrlong	#29, fp
0ee08     08 4E 85 F1 | 	sub	fp, #8
0ee0c     51 00 00 FF 
0ee10     B8 E5 05 F1 | 	add	objptr, ##41912
0ee14     F2 12 02 FB | 	rdlong	arg01, objptr
0ee18     51 00 00 FF 
0ee1c     B8 E5 85 F1 | 	sub	objptr, ##41912
0ee20     A7 12 62 FC | 	wrlong	arg01, fp
0ee24     A7 12 02 F6 | 	mov	arg01, fp
0ee28     00 9A BF FD | 	call	#_push
0ee2c     A7 F0 03 F6 | 	mov	ptra, fp
0ee30     B2 00 A0 FD | 	call	#popregs_
0ee34                 | _do_mousek_ret
0ee34     2D 00 64 FD | 	ret
0ee38                 | 
0ee38                 | ' sub do_gettime
0ee38                 | _do_gettime
0ee38     02 4A 05 F6 | 	mov	COUNT_, #2
0ee3c     A8 00 A0 FD | 	call	#pushregs_
0ee40     14 F0 07 F1 | 	add	ptra, #20
0ee44                 | ' 
0ee44                 | ' const asm 
0ee44     1A 1E 72 FD | 	getct	local01 wc
0ee48     1A 20 62 FD | 	getct	local02
0ee4c                 | ' 
0ee4c                 | ' return hi1, lo1
0ee4c     10 FD 01 F6 | 	mov	result2, local02
0ee50     A7 1E 62 FC | 	wrlong	local01, fp
0ee54     04 4E 05 F1 | 	add	fp, #4
0ee58     A7 FC 61 FC | 	wrlong	result2, fp
0ee5c     0C 4E 05 F1 | 	add	fp, #12
0ee60     A7 3A 68 FC | 	wrlong	#29, fp
0ee64     0C 4E 85 F1 | 	sub	fp, #12
0ee68     A7 12 02 FB | 	rdlong	arg01, fp
0ee6c     04 4E 05 F1 | 	add	fp, #4
0ee70     A7 12 62 FC | 	wrlong	arg01, fp
0ee74     08 4E 85 F1 | 	sub	fp, #8
0ee78     A7 12 02 FB | 	rdlong	arg01, fp
0ee7c     0C 4E 05 F1 | 	add	fp, #12
0ee80     A7 12 62 FC | 	wrlong	arg01, fp
0ee84     04 4E 85 F1 | 	sub	fp, #4
0ee88     A7 12 02 F6 | 	mov	arg01, fp
0ee8c     08 4E 85 F1 | 	sub	fp, #8
0ee90     98 99 BF FD | 	call	#_push
0ee94     A7 F0 03 F6 | 	mov	ptra, fp
0ee98     B2 00 A0 FD | 	call	#popregs_
0ee9c                 | _do_gettime_ret
0ee9c     2D 00 64 FD | 	ret
0eea0                 | 
0eea0                 | '    
0eea0                 | ' 
0eea0                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0eea0                 | ' 
0eea0                 | ' '' ----------------------------- Clear the screen
0eea0                 | ' 
0eea0                 | ' sub do_cls
0eea0                 | _do_cls
0eea0     2E 00 00 FF 
0eea4     00 E4 05 F1 | 	add	objptr, ##23552
0eea8     F2 12 02 FB | 	rdlong	arg01, objptr
0eeac     04 E4 85 F1 | 	sub	objptr, #4
0eeb0     F2 14 02 FB | 	rdlong	arg02, objptr
0eeb4     2D 00 00 FF 
0eeb8     FC E5 85 F1 | 	sub	objptr, ##23548
0eebc     74 4D B0 FD | 	call	#_hg010b_spin2_cls
0eec0     2E 00 00 FF 
0eec4     00 E4 05 F1 | 	add	objptr, ##23552
0eec8     F2 14 02 FB | 	rdlong	arg02, objptr
0eecc     14 E4 85 F1 | 	sub	objptr, #20
0eed0     F2 14 62 FC | 	wrlong	arg02, objptr
0eed4     2D 00 00 FF 
0eed8     EC E5 85 F1 | 	sub	objptr, ##23532
0eedc                 | ' cls(ink,paper): plot_color=ink: print
0eedc     00 12 06 F6 | 	mov	arg01, #0
0eee0     E4 B5 B0 FD | 	call	#__system___getiolock_0350
0eee4     FD 12 02 F6 | 	mov	arg01, result1
0eee8     28 60 B0 FD | 	call	#__system___lockmem
0eeec     00 12 06 F6 | 	mov	arg01, #0
0eef0     0A 14 06 F6 | 	mov	arg02, #10
0eef4     00 16 06 F6 | 	mov	arg03, #0
0eef8     B4 6C B0 FD | 	call	#__system___basic_print_char
0eefc     00 12 06 F6 | 	mov	arg01, #0
0ef00     C4 B5 B0 FD | 	call	#__system___getiolock_0350
0ef04     FD 00 68 FC | 	wrlong	#0, result1
0ef08                 | _do_cls_ret
0ef08     2D 00 64 FD | 	ret
0ef0c                 | 
0ef0c                 | ' 
0ef0c                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0ef0c                 | ' 
0ef0c                 | ' sub do_color
0ef0c                 | _do_color
0ef0c     03 4A 05 F6 | 	mov	COUNT_, #3
0ef10     A8 00 A0 FD | 	call	#pushregs_
0ef14     7C 98 BF FD | 	call	#_pop
0ef18     FD 1E 02 F6 | 	mov	local01, result1
0ef1c     FE 20 02 F6 | 	mov	local02, result2
0ef20     FF 22 02 F6 | 	mov	local03, result3
0ef24     2D 00 00 FF 
0ef28     EC E5 05 F1 | 	add	objptr, ##23532
0ef2c     F2 1E 62 FC | 	wrlong	local01, objptr
0ef30     2D 00 00 FF 
0ef34     EC E5 85 F1 | 	sub	objptr, ##23532
0ef38     A7 F0 03 F6 | 	mov	ptra, fp
0ef3c     B2 00 A0 FD | 	call	#popregs_
0ef40                 | _do_color_ret
0ef40     2D 00 64 FD | 	ret
0ef44                 | 
0ef44                 | ' 
0ef44                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0ef44                 | ' 
0ef44                 | ' sub do_plot
0ef44                 | _do_plot
0ef44     08 4A 05 F6 | 	mov	COUNT_, #8
0ef48     A8 00 A0 FD | 	call	#pushregs_
0ef4c     44 98 BF FD | 	call	#_pop
0ef50     FD 1E 02 F6 | 	mov	local01, result1
0ef54     FE 14 02 F6 | 	mov	arg02, result2
0ef58     FF 16 02 F6 | 	mov	arg03, result3
0ef5c     0A 21 02 F6 | 	mov	local02, arg02
0ef60     0B 23 02 F6 | 	mov	local03, arg03
0ef64     2C 98 BF FD | 	call	#_pop
0ef68     FD 24 02 F6 | 	mov	local04, result1
0ef6c     FE 26 02 F6 | 	mov	local05, result2
0ef70     FF 28 02 F6 | 	mov	local06, result3
0ef74     12 2B 02 F6 | 	mov	local07, local04
0ef78     0F 2D 02 F6 | 	mov	local08, local01
0ef7c                 | ' t2=pop() 					 
0ef7c                 | ' t1=pop()
0ef7c                 | ' 
0ef7c                 | ' x=t1.result.iresult
0ef7c                 | ' y=t2.result.iresult	
0ef7c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0ef7c     1C 28 0E F2 | 	cmp	local06, #28 wz
0ef80     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0ef84     44 00 90 5D |  if_ne	jmp	#LR__1260
0ef88     1C 22 0E F2 | 	cmp	local03, #28 wz
0ef8c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0ef90     38 00 90 5D |  if_ne	jmp	#LR__1260
0ef94     2D 00 00 FF 
0ef98     F0 E5 05 F1 | 	add	objptr, ##23536
0ef9c     F2 2A 62 FC | 	wrlong	local07, objptr
0efa0     04 E4 05 F1 | 	add	objptr, #4
0efa4     F2 2C 62 FC | 	wrlong	local08, objptr
0efa8     04 E4 85 F1 | 	sub	objptr, #4
0efac     F2 12 02 FB | 	rdlong	arg01, objptr
0efb0     04 E4 85 F1 | 	sub	objptr, #4
0efb4     F2 16 02 FB | 	rdlong	arg03, objptr
0efb8     2D 00 00 FF 
0efbc     EC E5 85 F1 | 	sub	objptr, ##23532
0efc0     16 15 02 F6 | 	mov	arg02, local08
0efc4     F4 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0efc8     A4 00 90 FD | 	jmp	#LR__1265
0efcc                 | LR__1260
0efcc                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0efcc     1E 28 0E F2 | 	cmp	local06, #30 wz
0efd0     10 00 90 5D |  if_ne	jmp	#LR__1261
0efd4     12 13 02 F6 | 	mov	arg01, local04
0efd8     01 14 06 F6 | 	mov	arg02, #1
0efdc     10 8E B0 FD | 	call	#__system___float_tointeger
0efe0     FD 2A 02 F6 | 	mov	local07, result1
0efe4                 | LR__1261
0efe4                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0efe4     1E 22 0E F2 | 	cmp	local03, #30 wz
0efe8     10 00 90 5D |  if_ne	jmp	#LR__1262
0efec     0F 13 02 F6 | 	mov	arg01, local01
0eff0     01 14 06 F6 | 	mov	arg02, #1
0eff4     F8 8D B0 FD | 	call	#__system___float_tointeger
0eff8     FD 2C 02 F6 | 	mov	local08, result1
0effc                 | LR__1262
0effc                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0effc     1F 28 0E F2 | 	cmp	local06, #31 wz
0f000     18 00 90 5D |  if_ne	jmp	#LR__1263
0f004     12 13 02 F6 | 	mov	arg01, local04
0f008     04 91 B0 FD | 	call	#__system____builtin_atof
0f00c     FD 12 02 F6 | 	mov	arg01, result1
0f010     00 14 06 F6 | 	mov	arg02, #0
0f014     D8 8D B0 FD | 	call	#__system___float_tointeger
0f018     FD 2A 02 F6 | 	mov	local07, result1
0f01c                 | LR__1263
0f01c                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0f01c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f020     18 00 90 5D |  if_ne	jmp	#LR__1264
0f024     0F 13 02 F6 | 	mov	arg01, local01
0f028     E4 90 B0 FD | 	call	#__system____builtin_atof
0f02c     FD 12 02 F6 | 	mov	arg01, result1
0f030     00 14 06 F6 | 	mov	arg02, #0
0f034     B8 8D B0 FD | 	call	#__system___float_tointeger
0f038     FD 2C 02 F6 | 	mov	local08, result1
0f03c                 | LR__1264
0f03c     2D 00 00 FF 
0f040     F0 E5 05 F1 | 	add	objptr, ##23536
0f044     F2 2A 62 FC | 	wrlong	local07, objptr
0f048     04 E4 05 F1 | 	add	objptr, #4
0f04c     F2 2C 62 FC | 	wrlong	local08, objptr
0f050     04 E4 85 F1 | 	sub	objptr, #4
0f054     F2 12 02 FB | 	rdlong	arg01, objptr
0f058     04 E4 85 F1 | 	sub	objptr, #4
0f05c     F2 16 02 FB | 	rdlong	arg03, objptr
0f060     2D 00 00 FF 
0f064     EC E5 85 F1 | 	sub	objptr, ##23532
0f068     16 15 02 F6 | 	mov	arg02, local08
0f06c     4C 3F B0 FD | 	call	#_hg010b_spin2_putpixel
0f070                 | LR__1265
0f070     A7 F0 03 F6 | 	mov	ptra, fp
0f074     B2 00 A0 FD | 	call	#popregs_
0f078                 | _do_plot_ret
0f078     2D 00 64 FD | 	ret
0f07c                 | 
0f07c                 | ' 
0f07c                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0f07c                 | ' 
0f07c                 | ' sub do_draw
0f07c                 | _do_draw
0f07c     08 4A 05 F6 | 	mov	COUNT_, #8
0f080     A8 00 A0 FD | 	call	#pushregs_
0f084     0C 97 BF FD | 	call	#_pop
0f088     FD 1E 02 F6 | 	mov	local01, result1
0f08c     FE 18 02 F6 | 	mov	arg04, result2
0f090     FF 16 02 F6 | 	mov	arg03, result3
0f094     0C 21 02 F6 | 	mov	local02, arg04
0f098     0B 23 02 F6 | 	mov	local03, arg03
0f09c     F4 96 BF FD | 	call	#_pop
0f0a0     FD 24 02 F6 | 	mov	local04, result1
0f0a4     FE 26 02 F6 | 	mov	local05, result2
0f0a8     FF 28 02 F6 | 	mov	local06, result3
0f0ac     12 2B 02 F6 | 	mov	local07, local04
0f0b0     0F 2D 02 F6 | 	mov	local08, local01
0f0b4                 | ' 
0f0b4                 | ' t2=pop()
0f0b4                 | ' t1=pop()
0f0b4                 | ' x=t1.result.iresult
0f0b4                 | ' y=t2.result.iresult
0f0b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0f0b4     1C 28 0E F2 | 	cmp	local06, #28 wz
0f0b8     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0f0bc     5C 00 90 5D |  if_ne	jmp	#LR__1270
0f0c0     1C 22 0E F2 | 	cmp	local03, #28 wz
0f0c4     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0f0c8     50 00 90 5D |  if_ne	jmp	#LR__1270
0f0cc     2D 00 00 FF 
0f0d0     F0 E5 05 F1 | 	add	objptr, ##23536
0f0d4     F2 12 02 FB | 	rdlong	arg01, objptr
0f0d8     04 E4 05 F1 | 	add	objptr, #4
0f0dc     F2 14 02 FB | 	rdlong	arg02, objptr
0f0e0     08 E4 85 F1 | 	sub	objptr, #8
0f0e4     F2 1A 02 FB | 	rdlong	arg05, objptr
0f0e8     2D 00 00 FF 
0f0ec     EC E5 85 F1 | 	sub	objptr, ##23532
0f0f0     15 17 02 F6 | 	mov	arg03, local07
0f0f4     16 19 02 F6 | 	mov	arg04, local08
0f0f8     70 41 B0 FD | 	call	#_hg010b_spin2_draw
0f0fc     2D 00 00 FF 
0f100     F0 E5 05 F1 | 	add	objptr, ##23536
0f104     F2 2A 62 FC | 	wrlong	local07, objptr
0f108     04 E4 05 F1 | 	add	objptr, #4
0f10c     F2 2C 62 FC | 	wrlong	local08, objptr
0f110     2D 00 00 FF 
0f114     F4 E5 85 F1 | 	sub	objptr, ##23540
0f118     BC 00 90 FD | 	jmp	#LR__1275
0f11c                 | LR__1270
0f11c                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0f11c     1E 28 0E F2 | 	cmp	local06, #30 wz
0f120     10 00 90 5D |  if_ne	jmp	#LR__1271
0f124     12 13 02 F6 | 	mov	arg01, local04
0f128     01 14 06 F6 | 	mov	arg02, #1
0f12c     C0 8C B0 FD | 	call	#__system___float_tointeger
0f130     FD 2A 02 F6 | 	mov	local07, result1
0f134                 | LR__1271
0f134                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0f134     1E 22 0E F2 | 	cmp	local03, #30 wz
0f138     10 00 90 5D |  if_ne	jmp	#LR__1272
0f13c     0F 13 02 F6 | 	mov	arg01, local01
0f140     01 14 06 F6 | 	mov	arg02, #1
0f144     A8 8C B0 FD | 	call	#__system___float_tointeger
0f148     FD 2C 02 F6 | 	mov	local08, result1
0f14c                 | LR__1272
0f14c                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0f14c     1F 28 0E F2 | 	cmp	local06, #31 wz
0f150     18 00 90 5D |  if_ne	jmp	#LR__1273
0f154     12 13 02 F6 | 	mov	arg01, local04
0f158     B4 8F B0 FD | 	call	#__system____builtin_atof
0f15c     FD 12 02 F6 | 	mov	arg01, result1
0f160     00 14 06 F6 | 	mov	arg02, #0
0f164     88 8C B0 FD | 	call	#__system___float_tointeger
0f168     FD 2A 02 F6 | 	mov	local07, result1
0f16c                 | LR__1273
0f16c                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0f16c     1F 22 0E F2 | 	cmp	local03, #31 wz
0f170     18 00 90 5D |  if_ne	jmp	#LR__1274
0f174     0F 13 02 F6 | 	mov	arg01, local01
0f178     94 8F B0 FD | 	call	#__system____builtin_atof
0f17c     FD 12 02 F6 | 	mov	arg01, result1
0f180     00 14 06 F6 | 	mov	arg02, #0
0f184     68 8C B0 FD | 	call	#__system___float_tointeger
0f188     FD 2C 02 F6 | 	mov	local08, result1
0f18c                 | LR__1274
0f18c     2D 00 00 FF 
0f190     F0 E5 05 F1 | 	add	objptr, ##23536
0f194     F2 12 02 FB | 	rdlong	arg01, objptr
0f198     04 E4 05 F1 | 	add	objptr, #4
0f19c     F2 14 02 FB | 	rdlong	arg02, objptr
0f1a0     08 E4 85 F1 | 	sub	objptr, #8
0f1a4     F2 1A 02 FB | 	rdlong	arg05, objptr
0f1a8     2D 00 00 FF 
0f1ac     EC E5 85 F1 | 	sub	objptr, ##23532
0f1b0     15 17 02 F6 | 	mov	arg03, local07
0f1b4     16 19 02 F6 | 	mov	arg04, local08
0f1b8     B0 40 B0 FD | 	call	#_hg010b_spin2_draw
0f1bc     2D 00 00 FF 
0f1c0     F0 E5 05 F1 | 	add	objptr, ##23536
0f1c4     F2 2A 62 FC | 	wrlong	local07, objptr
0f1c8     04 E4 05 F1 | 	add	objptr, #4
0f1cc     F2 2C 62 FC | 	wrlong	local08, objptr
0f1d0     2D 00 00 FF 
0f1d4     F4 E5 85 F1 | 	sub	objptr, ##23540
0f1d8                 | LR__1275
0f1d8     A7 F0 03 F6 | 	mov	ptra, fp
0f1dc     B2 00 A0 FD | 	call	#popregs_
0f1e0                 | _do_draw_ret
0f1e0     2D 00 64 FD | 	ret
0f1e4                 | 
0f1e4                 | ' 
0f1e4                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0f1e4                 | ' 
0f1e4                 | ' sub do_fcircle
0f1e4                 | _do_fcircle
0f1e4     02 4A 05 F6 | 	mov	COUNT_, #2
0f1e8     A8 00 A0 FD | 	call	#pushregs_
0f1ec     24 F0 07 F1 | 	add	ptra, #36
0f1f0     A0 95 BF FD | 	call	#_pop
0f1f4     FD 18 02 F6 | 	mov	arg04, result1
0f1f8     FE 16 02 F6 | 	mov	arg03, result2
0f1fc     FF 14 02 F6 | 	mov	arg02, result3
0f200     18 4E 05 F1 | 	add	fp, #24
0f204     A7 18 62 FC | 	wrlong	arg04, fp
0f208     04 4E 05 F1 | 	add	fp, #4
0f20c     A7 16 62 FC | 	wrlong	arg03, fp
0f210     04 4E 05 F1 | 	add	fp, #4
0f214     A7 14 62 FC | 	wrlong	arg02, fp
0f218     20 4E 85 F1 | 	sub	fp, #32
0f21c     74 95 BF FD | 	call	#_pop
0f220     FD 18 02 F6 | 	mov	arg04, result1
0f224     FE 16 02 F6 | 	mov	arg03, result2
0f228     FF 1E 02 F6 | 	mov	local01, result3
0f22c     0C 4E 05 F1 | 	add	fp, #12
0f230     A7 18 62 FC | 	wrlong	arg04, fp
0f234     04 4E 05 F1 | 	add	fp, #4
0f238     A7 16 62 FC | 	wrlong	arg03, fp
0f23c     04 4E 05 F1 | 	add	fp, #4
0f240     A7 1E 62 FC | 	wrlong	local01, fp
0f244     14 4E 85 F1 | 	sub	fp, #20
0f248     48 95 BF FD | 	call	#_pop
0f24c     A7 FA 61 FC | 	wrlong	result1, fp
0f250     04 4E 05 F1 | 	add	fp, #4
0f254     A7 FC 61 FC | 	wrlong	result2, fp
0f258     04 4E 05 F1 | 	add	fp, #4
0f25c     A7 FE 61 FC | 	wrlong	result3, fp
0f260                 | ' 
0f260                 | ' t3=pop()
0f260                 | ' t2=pop()
0f260                 | ' t1=pop()
0f260                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f260     FF 18 02 F6 | 	mov	arg04, result3
0f264     08 4E 85 F1 | 	sub	fp, #8
0f268     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f26c     08 4E 05 51 |  if_ne	add	fp, #8
0f270     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f274     08 4E 85 51 |  if_ne	sub	fp, #8
0f278     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f27c     7C 00 90 5D |  if_ne	jmp	#LR__1280
0f280     14 4E 05 F1 | 	add	fp, #20
0f284     A7 1E 02 FB | 	rdlong	local01, fp
0f288     14 4E 85 F1 | 	sub	fp, #20
0f28c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f290     14 4E 05 51 |  if_ne	add	fp, #20
0f294     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f298     14 4E 85 51 |  if_ne	sub	fp, #20
0f29c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2a0     58 00 90 5D |  if_ne	jmp	#LR__1280
0f2a4     20 4E 05 F1 | 	add	fp, #32
0f2a8     A7 1E 02 FB | 	rdlong	local01, fp
0f2ac     20 4E 85 F1 | 	sub	fp, #32
0f2b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f2b4     20 4E 05 51 |  if_ne	add	fp, #32
0f2b8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f2bc     20 4E 85 51 |  if_ne	sub	fp, #32
0f2c0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f2c4     34 00 90 5D |  if_ne	jmp	#LR__1280
0f2c8     A7 12 02 FB | 	rdlong	arg01, fp
0f2cc     0C 4E 05 F1 | 	add	fp, #12
0f2d0     A7 14 02 FB | 	rdlong	arg02, fp
0f2d4     0C 4E 05 F1 | 	add	fp, #12
0f2d8     A7 16 02 FB | 	rdlong	arg03, fp
0f2dc     18 4E 85 F1 | 	sub	fp, #24
0f2e0     2D 00 00 FF 
0f2e4     EC E5 05 F1 | 	add	objptr, ##23532
0f2e8     F2 18 02 FB | 	rdlong	arg04, objptr
0f2ec     2D 00 00 FF 
0f2f0     EC E5 85 F1 | 	sub	objptr, ##23532
0f2f4     04 44 B0 FD | 	call	#_hg010b_spin2_fcircle
0f2f8                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f2f8     54 00 90 FD | 	jmp	#LR__1281
0f2fc                 | LR__1280
0f2fc     A7 12 02 F6 | 	mov	arg01, fp
0f300     20 ED BF FD | 	call	#_converttoint
0f304     FD 1E 02 F6 | 	mov	local01, result1
0f308     0C 4E 05 F1 | 	add	fp, #12
0f30c     A7 12 02 F6 | 	mov	arg01, fp
0f310     0C 4E 85 F1 | 	sub	fp, #12
0f314     0C ED BF FD | 	call	#_converttoint
0f318     FD 20 02 F6 | 	mov	local02, result1
0f31c     18 4E 05 F1 | 	add	fp, #24
0f320     A7 12 02 F6 | 	mov	arg01, fp
0f324     18 4E 85 F1 | 	sub	fp, #24
0f328     F8 EC BF FD | 	call	#_converttoint
0f32c     FD 16 02 F6 | 	mov	arg03, result1
0f330     2D 00 00 FF 
0f334     EC E5 05 F1 | 	add	objptr, ##23532
0f338     F2 18 02 FB | 	rdlong	arg04, objptr
0f33c     2D 00 00 FF 
0f340     EC E5 85 F1 | 	sub	objptr, ##23532
0f344     0F 13 02 F6 | 	mov	arg01, local01
0f348     10 15 02 F6 | 	mov	arg02, local02
0f34c     AC 43 B0 FD | 	call	#_hg010b_spin2_fcircle
0f350                 | LR__1281
0f350     A7 F0 03 F6 | 	mov	ptra, fp
0f354     B2 00 A0 FD | 	call	#popregs_
0f358                 | _do_fcircle_ret
0f358     2D 00 64 FD | 	ret
0f35c                 | 
0f35c                 | ' 
0f35c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0f35c                 | ' 
0f35c                 | ' sub do_circle
0f35c                 | _do_circle
0f35c     02 4A 05 F6 | 	mov	COUNT_, #2
0f360     A8 00 A0 FD | 	call	#pushregs_
0f364     24 F0 07 F1 | 	add	ptra, #36
0f368     28 94 BF FD | 	call	#_pop
0f36c     FD 18 02 F6 | 	mov	arg04, result1
0f370     FE 16 02 F6 | 	mov	arg03, result2
0f374     FF 14 02 F6 | 	mov	arg02, result3
0f378     18 4E 05 F1 | 	add	fp, #24
0f37c     A7 18 62 FC | 	wrlong	arg04, fp
0f380     04 4E 05 F1 | 	add	fp, #4
0f384     A7 16 62 FC | 	wrlong	arg03, fp
0f388     04 4E 05 F1 | 	add	fp, #4
0f38c     A7 14 62 FC | 	wrlong	arg02, fp
0f390     20 4E 85 F1 | 	sub	fp, #32
0f394     FC 93 BF FD | 	call	#_pop
0f398     FD 18 02 F6 | 	mov	arg04, result1
0f39c     FE 16 02 F6 | 	mov	arg03, result2
0f3a0     FF 1E 02 F6 | 	mov	local01, result3
0f3a4     0C 4E 05 F1 | 	add	fp, #12
0f3a8     A7 18 62 FC | 	wrlong	arg04, fp
0f3ac     04 4E 05 F1 | 	add	fp, #4
0f3b0     A7 16 62 FC | 	wrlong	arg03, fp
0f3b4     04 4E 05 F1 | 	add	fp, #4
0f3b8     A7 1E 62 FC | 	wrlong	local01, fp
0f3bc     14 4E 85 F1 | 	sub	fp, #20
0f3c0     D0 93 BF FD | 	call	#_pop
0f3c4     A7 FA 61 FC | 	wrlong	result1, fp
0f3c8     04 4E 05 F1 | 	add	fp, #4
0f3cc     A7 FC 61 FC | 	wrlong	result2, fp
0f3d0     04 4E 05 F1 | 	add	fp, #4
0f3d4     A7 FE 61 FC | 	wrlong	result3, fp
0f3d8                 | ' 
0f3d8                 | ' t3=pop()
0f3d8                 | ' t2=pop()
0f3d8                 | ' t1=pop()
0f3d8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3d8     FF 18 02 F6 | 	mov	arg04, result3
0f3dc     08 4E 85 F1 | 	sub	fp, #8
0f3e0     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f3e4     08 4E 05 51 |  if_ne	add	fp, #8
0f3e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f3ec     08 4E 85 51 |  if_ne	sub	fp, #8
0f3f0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f3f4     7C 00 90 5D |  if_ne	jmp	#LR__1290
0f3f8     14 4E 05 F1 | 	add	fp, #20
0f3fc     A7 1E 02 FB | 	rdlong	local01, fp
0f400     14 4E 85 F1 | 	sub	fp, #20
0f404     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f408     14 4E 05 51 |  if_ne	add	fp, #20
0f40c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f410     14 4E 85 51 |  if_ne	sub	fp, #20
0f414     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f418     58 00 90 5D |  if_ne	jmp	#LR__1290
0f41c     20 4E 05 F1 | 	add	fp, #32
0f420     A7 1E 02 FB | 	rdlong	local01, fp
0f424     20 4E 85 F1 | 	sub	fp, #32
0f428     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f42c     20 4E 05 51 |  if_ne	add	fp, #32
0f430     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f434     20 4E 85 51 |  if_ne	sub	fp, #32
0f438     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f43c     34 00 90 5D |  if_ne	jmp	#LR__1290
0f440     A7 12 02 FB | 	rdlong	arg01, fp
0f444     0C 4E 05 F1 | 	add	fp, #12
0f448     A7 14 02 FB | 	rdlong	arg02, fp
0f44c     0C 4E 05 F1 | 	add	fp, #12
0f450     A7 16 02 FB | 	rdlong	arg03, fp
0f454     18 4E 85 F1 | 	sub	fp, #24
0f458     2D 00 00 FF 
0f45c     EC E5 05 F1 | 	add	objptr, ##23532
0f460     F2 18 02 FB | 	rdlong	arg04, objptr
0f464     2D 00 00 FF 
0f468     EC E5 85 F1 | 	sub	objptr, ##23532
0f46c     98 43 B0 FD | 	call	#_hg010b_spin2_circle
0f470                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f470     54 00 90 FD | 	jmp	#LR__1291
0f474                 | LR__1290
0f474     A7 12 02 F6 | 	mov	arg01, fp
0f478     A8 EB BF FD | 	call	#_converttoint
0f47c     FD 1E 02 F6 | 	mov	local01, result1
0f480     0C 4E 05 F1 | 	add	fp, #12
0f484     A7 12 02 F6 | 	mov	arg01, fp
0f488     0C 4E 85 F1 | 	sub	fp, #12
0f48c     94 EB BF FD | 	call	#_converttoint
0f490     FD 20 02 F6 | 	mov	local02, result1
0f494     18 4E 05 F1 | 	add	fp, #24
0f498     A7 12 02 F6 | 	mov	arg01, fp
0f49c     18 4E 85 F1 | 	sub	fp, #24
0f4a0     80 EB BF FD | 	call	#_converttoint
0f4a4     FD 16 02 F6 | 	mov	arg03, result1
0f4a8     2D 00 00 FF 
0f4ac     EC E5 05 F1 | 	add	objptr, ##23532
0f4b0     F2 18 02 FB | 	rdlong	arg04, objptr
0f4b4     2D 00 00 FF 
0f4b8     EC E5 85 F1 | 	sub	objptr, ##23532
0f4bc     0F 13 02 F6 | 	mov	arg01, local01
0f4c0     10 15 02 F6 | 	mov	arg02, local02
0f4c4     40 43 B0 FD | 	call	#_hg010b_spin2_circle
0f4c8                 | LR__1291
0f4c8     A7 F0 03 F6 | 	mov	ptra, fp
0f4cc     B2 00 A0 FD | 	call	#popregs_
0f4d0                 | _do_circle_ret
0f4d0     2D 00 64 FD | 	ret
0f4d4                 | 
0f4d4                 | ' 
0f4d4                 | ' ' -------------------------- Draw a rectangle
0f4d4                 | ' 
0f4d4                 | ' sub do_box
0f4d4                 | _do_box
0f4d4     03 4A 05 F6 | 	mov	COUNT_, #3
0f4d8     A8 00 A0 FD | 	call	#pushregs_
0f4dc     30 F0 07 F1 | 	add	ptra, #48
0f4e0     B0 92 BF FD | 	call	#_pop
0f4e4     FD 1A 02 F6 | 	mov	arg05, result1
0f4e8     FE 18 02 F6 | 	mov	arg04, result2
0f4ec     FF 16 02 F6 | 	mov	arg03, result3
0f4f0     24 4E 05 F1 | 	add	fp, #36
0f4f4     A7 1A 62 FC | 	wrlong	arg05, fp
0f4f8     04 4E 05 F1 | 	add	fp, #4
0f4fc     A7 18 62 FC | 	wrlong	arg04, fp
0f500     04 4E 05 F1 | 	add	fp, #4
0f504     A7 16 62 FC | 	wrlong	arg03, fp
0f508     2C 4E 85 F1 | 	sub	fp, #44
0f50c     84 92 BF FD | 	call	#_pop
0f510     FD 1A 02 F6 | 	mov	arg05, result1
0f514     FE 18 02 F6 | 	mov	arg04, result2
0f518     FF 16 02 F6 | 	mov	arg03, result3
0f51c     18 4E 05 F1 | 	add	fp, #24
0f520     A7 1A 62 FC | 	wrlong	arg05, fp
0f524     04 4E 05 F1 | 	add	fp, #4
0f528     A7 18 62 FC | 	wrlong	arg04, fp
0f52c     04 4E 05 F1 | 	add	fp, #4
0f530     A7 16 62 FC | 	wrlong	arg03, fp
0f534     20 4E 85 F1 | 	sub	fp, #32
0f538     58 92 BF FD | 	call	#_pop
0f53c     FD 1A 02 F6 | 	mov	arg05, result1
0f540     FE 18 02 F6 | 	mov	arg04, result2
0f544     FF 1E 02 F6 | 	mov	local01, result3
0f548     0C 4E 05 F1 | 	add	fp, #12
0f54c     A7 1A 62 FC | 	wrlong	arg05, fp
0f550     04 4E 05 F1 | 	add	fp, #4
0f554     A7 18 62 FC | 	wrlong	arg04, fp
0f558     04 4E 05 F1 | 	add	fp, #4
0f55c     A7 1E 62 FC | 	wrlong	local01, fp
0f560     14 4E 85 F1 | 	sub	fp, #20
0f564     2C 92 BF FD | 	call	#_pop
0f568     A7 FA 61 FC | 	wrlong	result1, fp
0f56c     04 4E 05 F1 | 	add	fp, #4
0f570     A7 FC 61 FC | 	wrlong	result2, fp
0f574     04 4E 05 F1 | 	add	fp, #4
0f578     A7 FE 61 FC | 	wrlong	result3, fp
0f57c                 | ' 
0f57c                 | ' t4=pop()
0f57c                 | ' t3=pop()
0f57c                 | ' t2=pop()
0f57c                 | ' t1=pop()
0f57c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f57c     FF 1A 02 F6 | 	mov	arg05, result3
0f580     08 4E 85 F1 | 	sub	fp, #8
0f584     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0f588     08 4E 05 51 |  if_ne	add	fp, #8
0f58c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f590     08 4E 85 51 |  if_ne	sub	fp, #8
0f594     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f598     A8 00 90 5D |  if_ne	jmp	#LR__1300
0f59c     14 4E 05 F1 | 	add	fp, #20
0f5a0     A7 1E 02 FB | 	rdlong	local01, fp
0f5a4     14 4E 85 F1 | 	sub	fp, #20
0f5a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5ac     14 4E 05 51 |  if_ne	add	fp, #20
0f5b0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f5b4     14 4E 85 51 |  if_ne	sub	fp, #20
0f5b8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f5bc     84 00 90 5D |  if_ne	jmp	#LR__1300
0f5c0     20 4E 05 F1 | 	add	fp, #32
0f5c4     A7 1E 02 FB | 	rdlong	local01, fp
0f5c8     20 4E 85 F1 | 	sub	fp, #32
0f5cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5d0     20 4E 05 51 |  if_ne	add	fp, #32
0f5d4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f5d8     20 4E 85 51 |  if_ne	sub	fp, #32
0f5dc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f5e0     60 00 90 5D |  if_ne	jmp	#LR__1300
0f5e4     2C 4E 05 F1 | 	add	fp, #44
0f5e8     A7 1E 02 FB | 	rdlong	local01, fp
0f5ec     2C 4E 85 F1 | 	sub	fp, #44
0f5f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f5f4     2C 4E 05 51 |  if_ne	add	fp, #44
0f5f8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f5fc     2C 4E 85 51 |  if_ne	sub	fp, #44
0f600     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f604     3C 00 90 5D |  if_ne	jmp	#LR__1300
0f608     A7 12 02 FB | 	rdlong	arg01, fp
0f60c     0C 4E 05 F1 | 	add	fp, #12
0f610     A7 14 02 FB | 	rdlong	arg02, fp
0f614     0C 4E 05 F1 | 	add	fp, #12
0f618     A7 16 02 FB | 	rdlong	arg03, fp
0f61c     0C 4E 05 F1 | 	add	fp, #12
0f620     A7 18 02 FB | 	rdlong	arg04, fp
0f624     24 4E 85 F1 | 	sub	fp, #36
0f628     2D 00 00 FF 
0f62c     EC E5 05 F1 | 	add	objptr, ##23532
0f630     F2 1A 02 FB | 	rdlong	arg05, objptr
0f634     2D 00 00 FF 
0f638     EC E5 85 F1 | 	sub	objptr, ##23532
0f63c     94 43 B0 FD | 	call	#_hg010b_spin2_box
0f640                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0f640     6C 00 90 FD | 	jmp	#LR__1301
0f644                 | LR__1300
0f644     A7 12 02 F6 | 	mov	arg01, fp
0f648     D8 E9 BF FD | 	call	#_converttoint
0f64c     FD 20 02 F6 | 	mov	local02, result1
0f650     0C 4E 05 F1 | 	add	fp, #12
0f654     A7 12 02 F6 | 	mov	arg01, fp
0f658     0C 4E 85 F1 | 	sub	fp, #12
0f65c     C4 E9 BF FD | 	call	#_converttoint
0f660     FD 22 02 F6 | 	mov	local03, result1
0f664     18 4E 05 F1 | 	add	fp, #24
0f668     A7 12 02 F6 | 	mov	arg01, fp
0f66c     18 4E 85 F1 | 	sub	fp, #24
0f670     B0 E9 BF FD | 	call	#_converttoint
0f674     FD 1E 02 F6 | 	mov	local01, result1
0f678     24 4E 05 F1 | 	add	fp, #36
0f67c     A7 12 02 F6 | 	mov	arg01, fp
0f680     24 4E 85 F1 | 	sub	fp, #36
0f684     9C E9 BF FD | 	call	#_converttoint
0f688     FD 18 02 F6 | 	mov	arg04, result1
0f68c     2D 00 00 FF 
0f690     EC E5 05 F1 | 	add	objptr, ##23532
0f694     F2 1A 02 FB | 	rdlong	arg05, objptr
0f698     2D 00 00 FF 
0f69c     EC E5 85 F1 | 	sub	objptr, ##23532
0f6a0     10 13 02 F6 | 	mov	arg01, local02
0f6a4     11 15 02 F6 | 	mov	arg02, local03
0f6a8     0F 17 02 F6 | 	mov	arg03, local01
0f6ac     24 43 B0 FD | 	call	#_hg010b_spin2_box
0f6b0                 | LR__1301
0f6b0     A7 F0 03 F6 | 	mov	ptra, fp
0f6b4     B2 00 A0 FD | 	call	#popregs_
0f6b8                 | _do_box_ret
0f6b8     2D 00 64 FD | 	ret
0f6bc                 | 
0f6bc                 | ' 
0f6bc                 | ' sub do_fill
0f6bc                 | _do_fill
0f6bc     03 4A 05 F6 | 	mov	COUNT_, #3
0f6c0     A8 00 A0 FD | 	call	#pushregs_
0f6c4     30 F0 07 F1 | 	add	ptra, #48
0f6c8     C8 90 BF FD | 	call	#_pop
0f6cc     FD 18 02 F6 | 	mov	arg04, result1
0f6d0     FE 16 02 F6 | 	mov	arg03, result2
0f6d4     FF 14 02 F6 | 	mov	arg02, result3
0f6d8     24 4E 05 F1 | 	add	fp, #36
0f6dc     A7 18 62 FC | 	wrlong	arg04, fp
0f6e0     04 4E 05 F1 | 	add	fp, #4
0f6e4     A7 16 62 FC | 	wrlong	arg03, fp
0f6e8     04 4E 05 F1 | 	add	fp, #4
0f6ec     A7 14 62 FC | 	wrlong	arg02, fp
0f6f0     2C 4E 85 F1 | 	sub	fp, #44
0f6f4     9C 90 BF FD | 	call	#_pop
0f6f8     FD 18 02 F6 | 	mov	arg04, result1
0f6fc     FE 16 02 F6 | 	mov	arg03, result2
0f700     FF 14 02 F6 | 	mov	arg02, result3
0f704     18 4E 05 F1 | 	add	fp, #24
0f708     A7 18 62 FC | 	wrlong	arg04, fp
0f70c     04 4E 05 F1 | 	add	fp, #4
0f710     A7 16 62 FC | 	wrlong	arg03, fp
0f714     04 4E 05 F1 | 	add	fp, #4
0f718     A7 14 62 FC | 	wrlong	arg02, fp
0f71c     20 4E 85 F1 | 	sub	fp, #32
0f720     70 90 BF FD | 	call	#_pop
0f724     FD 18 02 F6 | 	mov	arg04, result1
0f728     FE 16 02 F6 | 	mov	arg03, result2
0f72c     FF 1E 02 F6 | 	mov	local01, result3
0f730     0C 4E 05 F1 | 	add	fp, #12
0f734     A7 18 62 FC | 	wrlong	arg04, fp
0f738     04 4E 05 F1 | 	add	fp, #4
0f73c     A7 16 62 FC | 	wrlong	arg03, fp
0f740     04 4E 05 F1 | 	add	fp, #4
0f744     A7 1E 62 FC | 	wrlong	local01, fp
0f748     14 4E 85 F1 | 	sub	fp, #20
0f74c     44 90 BF FD | 	call	#_pop
0f750     A7 FA 61 FC | 	wrlong	result1, fp
0f754     04 4E 05 F1 | 	add	fp, #4
0f758     A7 FC 61 FC | 	wrlong	result2, fp
0f75c     04 4E 05 F1 | 	add	fp, #4
0f760     A7 FE 61 FC | 	wrlong	result3, fp
0f764                 | ' 
0f764                 | ' t4=pop()
0f764                 | ' t3=pop()
0f764                 | ' t2=pop()
0f764                 | ' t1=pop()
0f764                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f764     FF 18 02 F6 | 	mov	arg04, result3
0f768     08 4E 85 F1 | 	sub	fp, #8
0f76c     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f770     08 4E 05 51 |  if_ne	add	fp, #8
0f774     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f778     08 4E 85 51 |  if_ne	sub	fp, #8
0f77c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f780     94 00 90 5D |  if_ne	jmp	#LR__1310
0f784     14 4E 05 F1 | 	add	fp, #20
0f788     A7 1E 02 FB | 	rdlong	local01, fp
0f78c     14 4E 85 F1 | 	sub	fp, #20
0f790     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f794     14 4E 05 51 |  if_ne	add	fp, #20
0f798     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f79c     14 4E 85 51 |  if_ne	sub	fp, #20
0f7a0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f7a4     70 00 90 5D |  if_ne	jmp	#LR__1310
0f7a8     20 4E 05 F1 | 	add	fp, #32
0f7ac     A7 1E 02 FB | 	rdlong	local01, fp
0f7b0     20 4E 85 F1 | 	sub	fp, #32
0f7b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f7b8     20 4E 05 51 |  if_ne	add	fp, #32
0f7bc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f7c0     20 4E 85 51 |  if_ne	sub	fp, #32
0f7c4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f7c8     4C 00 90 5D |  if_ne	jmp	#LR__1310
0f7cc     2C 4E 05 F1 | 	add	fp, #44
0f7d0     A7 1E 02 FB | 	rdlong	local01, fp
0f7d4     2C 4E 85 F1 | 	sub	fp, #44
0f7d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f7dc     2C 4E 05 51 |  if_ne	add	fp, #44
0f7e0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f7e4     2C 4E 85 51 |  if_ne	sub	fp, #44
0f7e8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f7ec     28 00 90 5D |  if_ne	jmp	#LR__1310
0f7f0     A7 12 02 FB | 	rdlong	arg01, fp
0f7f4     0C 4E 05 F1 | 	add	fp, #12
0f7f8     A7 14 02 FB | 	rdlong	arg02, fp
0f7fc     0C 4E 05 F1 | 	add	fp, #12
0f800     A7 16 02 FB | 	rdlong	arg03, fp
0f804     0C 4E 05 F1 | 	add	fp, #12
0f808     A7 18 02 FB | 	rdlong	arg04, fp
0f80c     24 4E 85 F1 | 	sub	fp, #36
0f810     48 3C B0 FD | 	call	#_hg010b_spin2_fill
0f814                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
0f814     58 00 90 FD | 	jmp	#LR__1311
0f818                 | LR__1310
0f818     A7 12 02 F6 | 	mov	arg01, fp
0f81c     04 E8 BF FD | 	call	#_converttoint
0f820     FD 20 02 F6 | 	mov	local02, result1
0f824     0C 4E 05 F1 | 	add	fp, #12
0f828     A7 12 02 F6 | 	mov	arg01, fp
0f82c     0C 4E 85 F1 | 	sub	fp, #12
0f830     F0 E7 BF FD | 	call	#_converttoint
0f834     FD 22 02 F6 | 	mov	local03, result1
0f838     18 4E 05 F1 | 	add	fp, #24
0f83c     A7 12 02 F6 | 	mov	arg01, fp
0f840     18 4E 85 F1 | 	sub	fp, #24
0f844     DC E7 BF FD | 	call	#_converttoint
0f848     FD 1E 02 F6 | 	mov	local01, result1
0f84c     24 4E 05 F1 | 	add	fp, #36
0f850     A7 12 02 F6 | 	mov	arg01, fp
0f854     24 4E 85 F1 | 	sub	fp, #36
0f858     C8 E7 BF FD | 	call	#_converttoint
0f85c     FD 18 02 F6 | 	mov	arg04, result1
0f860     10 13 02 F6 | 	mov	arg01, local02
0f864     11 15 02 F6 | 	mov	arg02, local03
0f868     0F 17 02 F6 | 	mov	arg03, local01
0f86c     EC 3B B0 FD | 	call	#_hg010b_spin2_fill
0f870                 | LR__1311
0f870     A7 F0 03 F6 | 	mov	ptra, fp
0f874     B2 00 A0 FD | 	call	#popregs_
0f878                 | _do_fill_ret
0f878     2D 00 64 FD | 	ret
0f87c                 | 
0f87c                 | ' 
0f87c                 | ' ' -------------------------- Draw a frane
0f87c                 | ' 
0f87c                 | ' sub do_frame
0f87c                 | _do_frame
0f87c     03 4A 05 F6 | 	mov	COUNT_, #3
0f880     A8 00 A0 FD | 	call	#pushregs_
0f884     30 F0 07 F1 | 	add	ptra, #48
0f888     08 8F BF FD | 	call	#_pop
0f88c     FD 1A 02 F6 | 	mov	arg05, result1
0f890     FE 18 02 F6 | 	mov	arg04, result2
0f894     FF 16 02 F6 | 	mov	arg03, result3
0f898     24 4E 05 F1 | 	add	fp, #36
0f89c     A7 1A 62 FC | 	wrlong	arg05, fp
0f8a0     04 4E 05 F1 | 	add	fp, #4
0f8a4     A7 18 62 FC | 	wrlong	arg04, fp
0f8a8     04 4E 05 F1 | 	add	fp, #4
0f8ac     A7 16 62 FC | 	wrlong	arg03, fp
0f8b0     2C 4E 85 F1 | 	sub	fp, #44
0f8b4     DC 8E BF FD | 	call	#_pop
0f8b8     FD 1A 02 F6 | 	mov	arg05, result1
0f8bc     FE 18 02 F6 | 	mov	arg04, result2
0f8c0     FF 16 02 F6 | 	mov	arg03, result3
0f8c4     18 4E 05 F1 | 	add	fp, #24
0f8c8     A7 1A 62 FC | 	wrlong	arg05, fp
0f8cc     04 4E 05 F1 | 	add	fp, #4
0f8d0     A7 18 62 FC | 	wrlong	arg04, fp
0f8d4     04 4E 05 F1 | 	add	fp, #4
0f8d8     A7 16 62 FC | 	wrlong	arg03, fp
0f8dc     20 4E 85 F1 | 	sub	fp, #32
0f8e0     B0 8E BF FD | 	call	#_pop
0f8e4     FD 1A 02 F6 | 	mov	arg05, result1
0f8e8     FE 18 02 F6 | 	mov	arg04, result2
0f8ec     FF 1E 02 F6 | 	mov	local01, result3
0f8f0     0C 4E 05 F1 | 	add	fp, #12
0f8f4     A7 1A 62 FC | 	wrlong	arg05, fp
0f8f8     04 4E 05 F1 | 	add	fp, #4
0f8fc     A7 18 62 FC | 	wrlong	arg04, fp
0f900     04 4E 05 F1 | 	add	fp, #4
0f904     A7 1E 62 FC | 	wrlong	local01, fp
0f908     14 4E 85 F1 | 	sub	fp, #20
0f90c     84 8E BF FD | 	call	#_pop
0f910     A7 FA 61 FC | 	wrlong	result1, fp
0f914     04 4E 05 F1 | 	add	fp, #4
0f918     A7 FC 61 FC | 	wrlong	result2, fp
0f91c     04 4E 05 F1 | 	add	fp, #4
0f920     A7 FE 61 FC | 	wrlong	result3, fp
0f924                 | ' 
0f924                 | ' t4=pop()
0f924                 | ' t3=pop()
0f924                 | ' t2=pop()
0f924                 | ' t1=pop()
0f924                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0f924     FF 1A 02 F6 | 	mov	arg05, result3
0f928     08 4E 85 F1 | 	sub	fp, #8
0f92c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0f930     08 4E 05 51 |  if_ne	add	fp, #8
0f934     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f938     08 4E 85 51 |  if_ne	sub	fp, #8
0f93c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f940     A8 00 90 5D |  if_ne	jmp	#LR__1320
0f944     14 4E 05 F1 | 	add	fp, #20
0f948     A7 1E 02 FB | 	rdlong	local01, fp
0f94c     14 4E 85 F1 | 	sub	fp, #20
0f950     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f954     14 4E 05 51 |  if_ne	add	fp, #20
0f958     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f95c     14 4E 85 51 |  if_ne	sub	fp, #20
0f960     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f964     84 00 90 5D |  if_ne	jmp	#LR__1320
0f968     20 4E 05 F1 | 	add	fp, #32
0f96c     A7 1E 02 FB | 	rdlong	local01, fp
0f970     20 4E 85 F1 | 	sub	fp, #32
0f974     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f978     20 4E 05 51 |  if_ne	add	fp, #32
0f97c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f980     20 4E 85 51 |  if_ne	sub	fp, #32
0f984     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f988     60 00 90 5D |  if_ne	jmp	#LR__1320
0f98c     2C 4E 05 F1 | 	add	fp, #44
0f990     A7 1E 02 FB | 	rdlong	local01, fp
0f994     2C 4E 85 F1 | 	sub	fp, #44
0f998     1C 1E 0E F2 | 	cmp	local01, #28 wz
0f99c     2C 4E 05 51 |  if_ne	add	fp, #44
0f9a0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0f9a4     2C 4E 85 51 |  if_ne	sub	fp, #44
0f9a8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0f9ac     3C 00 90 5D |  if_ne	jmp	#LR__1320
0f9b0     A7 12 02 FB | 	rdlong	arg01, fp
0f9b4     0C 4E 05 F1 | 	add	fp, #12
0f9b8     A7 14 02 FB | 	rdlong	arg02, fp
0f9bc     0C 4E 05 F1 | 	add	fp, #12
0f9c0     A7 16 02 FB | 	rdlong	arg03, fp
0f9c4     0C 4E 05 F1 | 	add	fp, #12
0f9c8     A7 18 02 FB | 	rdlong	arg04, fp
0f9cc     24 4E 85 F1 | 	sub	fp, #36
0f9d0     2D 00 00 FF 
0f9d4     EC E5 05 F1 | 	add	objptr, ##23532
0f9d8     F2 1A 02 FB | 	rdlong	arg05, objptr
0f9dc     2D 00 00 FF 
0f9e0     EC E5 85 F1 | 	sub	objptr, ##23532
0f9e4     6C 3F B0 FD | 	call	#_hg010b_spin2_frame
0f9e8                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0f9e8     6C 00 90 FD | 	jmp	#LR__1321
0f9ec                 | LR__1320
0f9ec     A7 12 02 F6 | 	mov	arg01, fp
0f9f0     30 E6 BF FD | 	call	#_converttoint
0f9f4     FD 20 02 F6 | 	mov	local02, result1
0f9f8     0C 4E 05 F1 | 	add	fp, #12
0f9fc     A7 12 02 F6 | 	mov	arg01, fp
0fa00     0C 4E 85 F1 | 	sub	fp, #12
0fa04     1C E6 BF FD | 	call	#_converttoint
0fa08     FD 22 02 F6 | 	mov	local03, result1
0fa0c     18 4E 05 F1 | 	add	fp, #24
0fa10     A7 12 02 F6 | 	mov	arg01, fp
0fa14     18 4E 85 F1 | 	sub	fp, #24
0fa18     08 E6 BF FD | 	call	#_converttoint
0fa1c     FD 1E 02 F6 | 	mov	local01, result1
0fa20     24 4E 05 F1 | 	add	fp, #36
0fa24     A7 12 02 F6 | 	mov	arg01, fp
0fa28     24 4E 85 F1 | 	sub	fp, #36
0fa2c     F4 E5 BF FD | 	call	#_converttoint
0fa30     FD 18 02 F6 | 	mov	arg04, result1
0fa34     2D 00 00 FF 
0fa38     EC E5 05 F1 | 	add	objptr, ##23532
0fa3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fa40     2D 00 00 FF 
0fa44     EC E5 85 F1 | 	sub	objptr, ##23532
0fa48     10 13 02 F6 | 	mov	arg01, local02
0fa4c     11 15 02 F6 | 	mov	arg02, local03
0fa50     0F 17 02 F6 | 	mov	arg03, local01
0fa54     FC 3E B0 FD | 	call	#_hg010b_spin2_frame
0fa58                 | LR__1321
0fa58     A7 F0 03 F6 | 	mov	ptra, fp
0fa5c     B2 00 A0 FD | 	call	#popregs_
0fa60                 | _do_frame_ret
0fa60     2D 00 64 FD | 	ret
0fa64                 | 
0fa64                 | ' 
0fa64                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
0fa64                 | ' 
0fa64                 | ' ' ------------------------- Print to the screem
0fa64                 | ' 
0fa64                 | ' sub do_print  
0fa64                 | _do_print
0fa64     0A 4A 05 F6 | 	mov	COUNT_, #10
0fa68     A8 00 A0 FD | 	call	#pushregs_
0fa6c     00 24 06 F6 | 	mov	local04, #0
0fa70     20 8D BF FD | 	call	#_pop
0fa74     FD 26 02 F6 | 	mov	local05, result1
0fa78     FE 28 02 F6 | 	mov	local06, result2
0fa7c     FF 2A 02 F6 | 	mov	local07, result3
0fa80     13 1F 02 F6 | 	mov	local01, local05
0fa84     14 21 02 F6 | 	mov	local02, local06
0fa88     15 23 02 F6 | 	mov	local03, local07
0fa8c                 | '  
0fa8c                 | ' r=0
0fa8c                 | ' t1=pop() 
0fa8c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
0fa8c     21 22 0E F2 | 	cmp	local03, #33 wz
0fa90     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
0fa94     20 00 90 5D |  if_ne	jmp	#LR__1330
0fa98     11 25 02 F6 | 	mov	local04, local03
0fa9c     F4 8C BF FD | 	call	#_pop
0faa0     FD 26 02 F6 | 	mov	local05, result1
0faa4     FE 28 02 F6 | 	mov	local06, result2
0faa8     FF 2A 02 F6 | 	mov	local07, result3
0faac     13 1F 02 F6 | 	mov	local01, local05
0fab0     14 21 02 F6 | 	mov	local02, local06
0fab4     15 23 02 F6 | 	mov	local03, local07
0fab8                 | LR__1330
0fab8                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
0fab8     20 22 0E F2 | 	cmp	local03, #32 wz
0fabc     11 25 02 A6 |  if_e	mov	local04, local03
0fac0                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
0fac0     FF 22 0E F2 | 	cmp	local03, #255 wz
0fac4     0C 00 90 5D |  if_ne	jmp	#LR__1331
0fac8     0F 13 02 F6 | 	mov	arg01, local01
0facc     50 1F B0 FD | 	call	#_printerror
0fad0     30 04 90 FD | 	jmp	#LR__1348
0fad4                 | LR__1331
0fad4                 | ' 
0fad4                 | ' if r=print_mod_comma  then
0fad4     21 24 0E F2 | 	cmp	local04, #33 wz
0fad8     AC 01 90 5D |  if_ne	jmp	#LR__1336
0fadc                 | '   if t1.result_type=result_int then print t1.result.iresult,
0fadc     1C 22 0E F2 | 	cmp	local03, #28 wz
0fae0     64 00 90 5D |  if_ne	jmp	#LR__1332
0fae4     00 12 06 F6 | 	mov	arg01, #0
0fae8     DC A9 B0 FD | 	call	#__system___getiolock_0350
0faec     FD 12 02 F6 | 	mov	arg01, result1
0faf0     20 54 B0 FD | 	call	#__system___lockmem
0faf4     00 28 06 F6 | 	mov	local06, #0
0faf8     00 12 06 F6 | 	mov	arg01, #0
0fafc     0F 15 02 F6 | 	mov	arg02, local01
0fb00     00 16 06 F6 | 	mov	arg03, #0
0fb04     0A 18 06 F6 | 	mov	arg04, #10
0fb08     40 61 B0 FD | 	call	#__system___basic_print_integer
0fb0c     FD 2A 02 F6 | 	mov	local07, result1
0fb10     14 27 02 F6 | 	mov	local05, local06
0fb14     15 27 02 F1 | 	add	local05, local07
0fb18     00 2C 06 F6 | 	mov	local08, #0
0fb1c     00 12 06 F6 | 	mov	arg01, #0
0fb20     09 14 06 F6 | 	mov	arg02, #9
0fb24     00 16 06 F6 | 	mov	arg03, #0
0fb28     84 60 B0 FD | 	call	#__system___basic_print_char
0fb2c     FD 2E 02 F6 | 	mov	local09, result1
0fb30     FD 26 02 F1 | 	add	local05, result1
0fb34     00 12 06 F6 | 	mov	arg01, #0
0fb38     8C A9 B0 FD | 	call	#__system___getiolock_0350
0fb3c     FD 00 68 FC | 	wrlong	#0, result1
0fb40     00 FA 05 F6 | 	mov	result1, #0
0fb44     00 30 06 F6 | 	mov	local10, #0
0fb48                 | LR__1332
0fb48                 | '   if t1.result_type=result_uint then print t1.result.uresult,
0fb48     1D 22 0E F2 | 	cmp	local03, #29 wz
0fb4c     64 00 90 5D |  if_ne	jmp	#LR__1333
0fb50     00 12 06 F6 | 	mov	arg01, #0
0fb54     70 A9 B0 FD | 	call	#__system___getiolock_0350
0fb58     FD 12 02 F6 | 	mov	arg01, result1
0fb5c     B4 53 B0 FD | 	call	#__system___lockmem
0fb60     00 28 06 F6 | 	mov	local06, #0
0fb64     00 12 06 F6 | 	mov	arg01, #0
0fb68     0F 15 02 F6 | 	mov	arg02, local01
0fb6c     00 16 06 F6 | 	mov	arg03, #0
0fb70     0A 18 06 F6 | 	mov	arg04, #10
0fb74     14 61 B0 FD | 	call	#__system___basic_print_unsigned
0fb78     FD 2A 02 F6 | 	mov	local07, result1
0fb7c     14 27 02 F6 | 	mov	local05, local06
0fb80     15 27 02 F1 | 	add	local05, local07
0fb84     00 2C 06 F6 | 	mov	local08, #0
0fb88     00 12 06 F6 | 	mov	arg01, #0
0fb8c     09 14 06 F6 | 	mov	arg02, #9
0fb90     00 16 06 F6 | 	mov	arg03, #0
0fb94     18 60 B0 FD | 	call	#__system___basic_print_char
0fb98     FD 2E 02 F6 | 	mov	local09, result1
0fb9c     FD 26 02 F1 | 	add	local05, result1
0fba0     00 12 06 F6 | 	mov	arg01, #0
0fba4     20 A9 B0 FD | 	call	#__system___getiolock_0350
0fba8     FD 00 68 FC | 	wrlong	#0, result1
0fbac     00 FA 05 F6 | 	mov	result1, #0
0fbb0     00 30 06 F6 | 	mov	local10, #0
0fbb4                 | LR__1333
0fbb4                 | '   if t1.result_type=result_float then print t1.result.fresult,
0fbb4     1E 22 0E F2 | 	cmp	local03, #30 wz
0fbb8     64 00 90 5D |  if_ne	jmp	#LR__1334
0fbbc     00 12 06 F6 | 	mov	arg01, #0
0fbc0     04 A9 B0 FD | 	call	#__system___getiolock_0350
0fbc4     FD 12 02 F6 | 	mov	arg01, result1
0fbc8     48 53 B0 FD | 	call	#__system___lockmem
0fbcc     00 28 06 F6 | 	mov	local06, #0
0fbd0     00 12 06 F6 | 	mov	arg01, #0
0fbd4     0F 15 02 F6 | 	mov	arg02, local01
0fbd8     00 16 06 F6 | 	mov	arg03, #0
0fbdc     23 18 06 F6 | 	mov	arg04, #35
0fbe0     5C 83 B0 FD | 	call	#__system___basic_print_float
0fbe4     FD 2A 02 F6 | 	mov	local07, result1
0fbe8     14 27 02 F6 | 	mov	local05, local06
0fbec     15 27 02 F1 | 	add	local05, local07
0fbf0     00 2C 06 F6 | 	mov	local08, #0
0fbf4     00 12 06 F6 | 	mov	arg01, #0
0fbf8     09 14 06 F6 | 	mov	arg02, #9
0fbfc     00 16 06 F6 | 	mov	arg03, #0
0fc00     AC 5F B0 FD | 	call	#__system___basic_print_char
0fc04     FD 2E 02 F6 | 	mov	local09, result1
0fc08     FD 26 02 F1 | 	add	local05, result1
0fc0c     00 12 06 F6 | 	mov	arg01, #0
0fc10     B4 A8 B0 FD | 	call	#__system___getiolock_0350
0fc14     FD 00 68 FC | 	wrlong	#0, result1
0fc18     00 FA 05 F6 | 	mov	result1, #0
0fc1c     00 30 06 F6 | 	mov	local10, #0
0fc20                 | LR__1334
0fc20                 | '   if t1.result_type=result_string then print t1.result.sresult,
0fc20     1F 22 0E F2 | 	cmp	local03, #31 wz
0fc24     60 00 90 5D |  if_ne	jmp	#LR__1335
0fc28     00 12 06 F6 | 	mov	arg01, #0
0fc2c     98 A8 B0 FD | 	call	#__system___getiolock_0350
0fc30     FD 12 02 F6 | 	mov	arg01, result1
0fc34     DC 52 B0 FD | 	call	#__system___lockmem
0fc38     00 28 06 F6 | 	mov	local06, #0
0fc3c     00 12 06 F6 | 	mov	arg01, #0
0fc40     0F 15 02 F6 | 	mov	arg02, local01
0fc44     00 16 06 F6 | 	mov	arg03, #0
0fc48     BC 5F B0 FD | 	call	#__system___basic_print_string
0fc4c     FD 2A 02 F6 | 	mov	local07, result1
0fc50     14 27 02 F6 | 	mov	local05, local06
0fc54     15 27 02 F1 | 	add	local05, local07
0fc58     00 2C 06 F6 | 	mov	local08, #0
0fc5c     00 12 06 F6 | 	mov	arg01, #0
0fc60     09 14 06 F6 | 	mov	arg02, #9
0fc64     00 16 06 F6 | 	mov	arg03, #0
0fc68     44 5F B0 FD | 	call	#__system___basic_print_char
0fc6c     FD 2E 02 F6 | 	mov	local09, result1
0fc70     FD 26 02 F1 | 	add	local05, result1
0fc74     00 12 06 F6 | 	mov	arg01, #0
0fc78     4C A8 B0 FD | 	call	#__system___getiolock_0350
0fc7c     FD 00 68 FC | 	wrlong	#0, result1
0fc80     00 FA 05 F6 | 	mov	result1, #0
0fc84     00 30 06 F6 | 	mov	local10, #0
0fc88                 | LR__1335
0fc88                 | LR__1336
0fc88                 | ' if r=print_mod_semicolon then 
0fc88     22 24 0E F2 | 	cmp	local04, #34 wz
0fc8c     1C 01 90 5D |  if_ne	jmp	#LR__1341
0fc90                 | '   if t1.result_type=result_int then print t1.result.iresult;
0fc90     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc94     50 00 90 5D |  if_ne	jmp	#LR__1337
0fc98     00 12 06 F6 | 	mov	arg01, #0
0fc9c     28 A8 B0 FD | 	call	#__system___getiolock_0350
0fca0     FD 12 02 F6 | 	mov	arg01, result1
0fca4     6C 52 B0 FD | 	call	#__system___lockmem
0fca8     00 28 06 F6 | 	mov	local06, #0
0fcac     00 30 06 F6 | 	mov	local10, #0
0fcb0     0A 2C 06 F6 | 	mov	local08, #10
0fcb4     00 12 06 F6 | 	mov	arg01, #0
0fcb8     0F 15 02 F6 | 	mov	arg02, local01
0fcbc     00 16 06 F6 | 	mov	arg03, #0
0fcc0     0A 18 06 F6 | 	mov	arg04, #10
0fcc4     84 5F B0 FD | 	call	#__system___basic_print_integer
0fcc8     FD 2A 02 F6 | 	mov	local07, result1
0fccc     14 27 02 F6 | 	mov	local05, local06
0fcd0     15 27 02 F1 | 	add	local05, local07
0fcd4     00 12 06 F6 | 	mov	arg01, #0
0fcd8     EC A7 B0 FD | 	call	#__system___getiolock_0350
0fcdc     FD 00 68 FC | 	wrlong	#0, result1
0fce0     00 FA 05 F6 | 	mov	result1, #0
0fce4     00 2E 06 F6 | 	mov	local09, #0
0fce8                 | LR__1337
0fce8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
0fce8     1D 22 0E F2 | 	cmp	local03, #29 wz
0fcec     50 00 90 5D |  if_ne	jmp	#LR__1338
0fcf0     00 12 06 F6 | 	mov	arg01, #0
0fcf4     D0 A7 B0 FD | 	call	#__system___getiolock_0350
0fcf8     FD 12 02 F6 | 	mov	arg01, result1
0fcfc     14 52 B0 FD | 	call	#__system___lockmem
0fd00     00 28 06 F6 | 	mov	local06, #0
0fd04     00 30 06 F6 | 	mov	local10, #0
0fd08     0A 2C 06 F6 | 	mov	local08, #10
0fd0c     00 12 06 F6 | 	mov	arg01, #0
0fd10     0F 15 02 F6 | 	mov	arg02, local01
0fd14     00 16 06 F6 | 	mov	arg03, #0
0fd18     0A 18 06 F6 | 	mov	arg04, #10
0fd1c     6C 5F B0 FD | 	call	#__system___basic_print_unsigned
0fd20     FD 2A 02 F6 | 	mov	local07, result1
0fd24     14 27 02 F6 | 	mov	local05, local06
0fd28     15 27 02 F1 | 	add	local05, local07
0fd2c     00 12 06 F6 | 	mov	arg01, #0
0fd30     94 A7 B0 FD | 	call	#__system___getiolock_0350
0fd34     FD 00 68 FC | 	wrlong	#0, result1
0fd38     00 FA 05 F6 | 	mov	result1, #0
0fd3c     00 2E 06 F6 | 	mov	local09, #0
0fd40                 | LR__1338
0fd40                 | '   if t1.result_type=result_float then print t1.result.fresult;
0fd40     1E 22 0E F2 | 	cmp	local03, #30 wz
0fd44     30 00 90 5D |  if_ne	jmp	#LR__1339
0fd48     00 12 06 F6 | 	mov	arg01, #0
0fd4c     78 A7 B0 FD | 	call	#__system___getiolock_0350
0fd50     FD 12 02 F6 | 	mov	arg01, result1
0fd54     BC 51 B0 FD | 	call	#__system___lockmem
0fd58     00 12 06 F6 | 	mov	arg01, #0
0fd5c     0F 15 02 F6 | 	mov	arg02, local01
0fd60     00 16 06 F6 | 	mov	arg03, #0
0fd64     23 18 06 F6 | 	mov	arg04, #35
0fd68     D4 81 B0 FD | 	call	#__system___basic_print_float
0fd6c     00 12 06 F6 | 	mov	arg01, #0
0fd70     54 A7 B0 FD | 	call	#__system___getiolock_0350
0fd74     FD 00 68 FC | 	wrlong	#0, result1
0fd78                 | LR__1339
0fd78                 | '   if t1.result_type=result_string then print t1.result.sresult;
0fd78     1F 22 0E F2 | 	cmp	local03, #31 wz
0fd7c     2C 00 90 5D |  if_ne	jmp	#LR__1340
0fd80     00 12 06 F6 | 	mov	arg01, #0
0fd84     40 A7 B0 FD | 	call	#__system___getiolock_0350
0fd88     FD 12 02 F6 | 	mov	arg01, result1
0fd8c     84 51 B0 FD | 	call	#__system___lockmem
0fd90     00 12 06 F6 | 	mov	arg01, #0
0fd94     0F 15 02 F6 | 	mov	arg02, local01
0fd98     00 16 06 F6 | 	mov	arg03, #0
0fd9c     68 5E B0 FD | 	call	#__system___basic_print_string
0fda0     00 12 06 F6 | 	mov	arg01, #0
0fda4     20 A7 B0 FD | 	call	#__system___getiolock_0350
0fda8     FD 00 68 FC | 	wrlong	#0, result1
0fdac                 | LR__1340
0fdac                 | LR__1341
0fdac                 | ' if r=0 then 
0fdac     00 24 0E F2 | 	cmp	local04, #0 wz
0fdb0     1C 01 90 5D |  if_ne	jmp	#LR__1346
0fdb4                 | '   if t1.result_type=result_int then print t1.result.iresult
0fdb4     1C 22 0E F2 | 	cmp	local03, #28 wz
0fdb8     40 00 90 5D |  if_ne	jmp	#LR__1342
0fdbc     00 12 06 F6 | 	mov	arg01, #0
0fdc0     04 A7 B0 FD | 	call	#__system___getiolock_0350
0fdc4     FD 12 02 F6 | 	mov	arg01, result1
0fdc8     48 51 B0 FD | 	call	#__system___lockmem
0fdcc     00 12 06 F6 | 	mov	arg01, #0
0fdd0     0F 15 02 F6 | 	mov	arg02, local01
0fdd4     00 16 06 F6 | 	mov	arg03, #0
0fdd8     0A 18 06 F6 | 	mov	arg04, #10
0fddc     6C 5E B0 FD | 	call	#__system___basic_print_integer
0fde0     00 12 06 F6 | 	mov	arg01, #0
0fde4     0A 14 06 F6 | 	mov	arg02, #10
0fde8     00 16 06 F6 | 	mov	arg03, #0
0fdec     C0 5D B0 FD | 	call	#__system___basic_print_char
0fdf0     00 12 06 F6 | 	mov	arg01, #0
0fdf4     D0 A6 B0 FD | 	call	#__system___getiolock_0350
0fdf8     FD 00 68 FC | 	wrlong	#0, result1
0fdfc                 | LR__1342
0fdfc                 | '   if t1.result_type=result_uint then print t1.result.uresult
0fdfc     1D 22 0E F2 | 	cmp	local03, #29 wz
0fe00     40 00 90 5D |  if_ne	jmp	#LR__1343
0fe04     00 12 06 F6 | 	mov	arg01, #0
0fe08     BC A6 B0 FD | 	call	#__system___getiolock_0350
0fe0c     FD 12 02 F6 | 	mov	arg01, result1
0fe10     00 51 B0 FD | 	call	#__system___lockmem
0fe14     00 12 06 F6 | 	mov	arg01, #0
0fe18     0F 15 02 F6 | 	mov	arg02, local01
0fe1c     00 16 06 F6 | 	mov	arg03, #0
0fe20     0A 18 06 F6 | 	mov	arg04, #10
0fe24     64 5E B0 FD | 	call	#__system___basic_print_unsigned
0fe28     00 12 06 F6 | 	mov	arg01, #0
0fe2c     0A 14 06 F6 | 	mov	arg02, #10
0fe30     00 16 06 F6 | 	mov	arg03, #0
0fe34     78 5D B0 FD | 	call	#__system___basic_print_char
0fe38     00 12 06 F6 | 	mov	arg01, #0
0fe3c     88 A6 B0 FD | 	call	#__system___getiolock_0350
0fe40     FD 00 68 FC | 	wrlong	#0, result1
0fe44                 | LR__1343
0fe44                 | '   if t1.result_type=result_float then print t1.result.fresult
0fe44     1E 22 0E F2 | 	cmp	local03, #30 wz
0fe48     40 00 90 5D |  if_ne	jmp	#LR__1344
0fe4c     00 12 06 F6 | 	mov	arg01, #0
0fe50     74 A6 B0 FD | 	call	#__system___getiolock_0350
0fe54     FD 12 02 F6 | 	mov	arg01, result1
0fe58     B8 50 B0 FD | 	call	#__system___lockmem
0fe5c     00 12 06 F6 | 	mov	arg01, #0
0fe60     0F 15 02 F6 | 	mov	arg02, local01
0fe64     00 16 06 F6 | 	mov	arg03, #0
0fe68     23 18 06 F6 | 	mov	arg04, #35
0fe6c     D0 80 B0 FD | 	call	#__system___basic_print_float
0fe70     00 12 06 F6 | 	mov	arg01, #0
0fe74     0A 14 06 F6 | 	mov	arg02, #10
0fe78     00 16 06 F6 | 	mov	arg03, #0
0fe7c     30 5D B0 FD | 	call	#__system___basic_print_char
0fe80     00 12 06 F6 | 	mov	arg01, #0
0fe84     40 A6 B0 FD | 	call	#__system___getiolock_0350
0fe88     FD 00 68 FC | 	wrlong	#0, result1
0fe8c                 | LR__1344
0fe8c                 | '   if t1.result_type=result_string then print t1.result.sresult
0fe8c     1F 22 0E F2 | 	cmp	local03, #31 wz
0fe90     3C 00 90 5D |  if_ne	jmp	#LR__1345
0fe94     00 12 06 F6 | 	mov	arg01, #0
0fe98     2C A6 B0 FD | 	call	#__system___getiolock_0350
0fe9c     FD 12 02 F6 | 	mov	arg01, result1
0fea0     70 50 B0 FD | 	call	#__system___lockmem
0fea4     00 12 06 F6 | 	mov	arg01, #0
0fea8     0F 15 02 F6 | 	mov	arg02, local01
0feac     00 16 06 F6 | 	mov	arg03, #0
0feb0     54 5D B0 FD | 	call	#__system___basic_print_string
0feb4     00 12 06 F6 | 	mov	arg01, #0
0feb8     0A 14 06 F6 | 	mov	arg02, #10
0febc     00 16 06 F6 | 	mov	arg03, #0
0fec0     EC 5C B0 FD | 	call	#__system___basic_print_char
0fec4     00 12 06 F6 | 	mov	arg01, #0
0fec8     FC A5 B0 FD | 	call	#__system___getiolock_0350
0fecc     FD 00 68 FC | 	wrlong	#0, result1
0fed0                 | LR__1345
0fed0                 | LR__1346
0fed0                 | ' if r=print_mod_empty then print
0fed0     20 24 0E F2 | 	cmp	local04, #32 wz
0fed4     2C 00 90 5D |  if_ne	jmp	#LR__1347
0fed8     00 12 06 F6 | 	mov	arg01, #0
0fedc     E8 A5 B0 FD | 	call	#__system___getiolock_0350
0fee0     FD 12 02 F6 | 	mov	arg01, result1
0fee4     2C 50 B0 FD | 	call	#__system___lockmem
0fee8     00 12 06 F6 | 	mov	arg01, #0
0feec     0A 14 06 F6 | 	mov	arg02, #10
0fef0     00 16 06 F6 | 	mov	arg03, #0
0fef4     B8 5C B0 FD | 	call	#__system___basic_print_char
0fef8     00 12 06 F6 | 	mov	arg01, #0
0fefc     C8 A5 B0 FD | 	call	#__system___getiolock_0350
0ff00     FD 00 68 FC | 	wrlong	#0, result1
0ff04                 | LR__1347
0ff04                 | LR__1348
0ff04     A7 F0 03 F6 | 	mov	ptra, fp
0ff08     B2 00 A0 FD | 	call	#popregs_
0ff0c                 | _do_print_ret
0ff0c     2D 00 64 FD | 	ret
0ff10                 | 
0ff10                 | ' 
0ff10                 | ' 
0ff10                 | ' sub do_paper
0ff10                 | _do_paper
0ff10     03 4A 05 F6 | 	mov	COUNT_, #3
0ff14     A8 00 A0 FD | 	call	#pushregs_
0ff18     78 88 BF FD | 	call	#_pop
0ff1c     FD 1E 02 F6 | 	mov	local01, result1
0ff20     FE 20 02 F6 | 	mov	local02, result2
0ff24     FF 22 02 F6 | 	mov	local03, result3
0ff28                 | ' t1=pop() 
0ff28                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0ff28     1E 22 0E F2 | 	cmp	local03, #30 wz
0ff2c     10 00 90 5D |  if_ne	jmp	#LR__1350
0ff30     0F 13 02 F6 | 	mov	arg01, local01
0ff34     00 14 06 F6 | 	mov	arg02, #0
0ff38     B4 7E B0 FD | 	call	#__system___float_tointeger
0ff3c     FD 1E 02 F6 | 	mov	local01, result1
0ff40                 | LR__1350
0ff40                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0ff40     1F 22 0E F2 | 	cmp	local03, #31 wz
0ff44     18 00 90 5D |  if_ne	jmp	#LR__1351
0ff48     0F 13 02 F6 | 	mov	arg01, local01
0ff4c     C0 81 B0 FD | 	call	#__system____builtin_atof
0ff50     FD 12 02 F6 | 	mov	arg01, result1
0ff54     00 14 06 F6 | 	mov	arg02, #0
0ff58     94 7E B0 FD | 	call	#__system___float_tointeger
0ff5c     FD 1E 02 F6 | 	mov	local01, result1
0ff60                 | LR__1351
0ff60     2D 00 00 FF 
0ff64     FC E5 05 F1 | 	add	objptr, ##23548
0ff68     F2 1E 62 FC | 	wrlong	local01, objptr
0ff6c     04 E4 05 F1 | 	add	objptr, #4
0ff70     F2 12 02 FB | 	rdlong	arg01, objptr
0ff74                 | ' 
0ff74                 | ' write_color:=ff
0ff74     2D 00 00 FF 
0ff78     C3 E5 85 F1 | 	sub	objptr, ##23491
0ff7c     F2 12 62 FC | 	wrlong	arg01, objptr
0ff80                 | ' write_background:=bb
0ff80     04 E4 05 F1 | 	add	objptr, #4
0ff84     F2 1E 62 FC | 	wrlong	local01, objptr
0ff88     41 E4 85 F1 | 	sub	objptr, #65
0ff8c     A7 F0 03 F6 | 	mov	ptra, fp
0ff90     B2 00 A0 FD | 	call	#popregs_
0ff94                 | _do_paper_ret
0ff94     2D 00 64 FD | 	ret
0ff98                 | 
0ff98                 | ' 
0ff98                 | ' sub do_ink
0ff98                 | _do_ink
0ff98     03 4A 05 F6 | 	mov	COUNT_, #3
0ff9c     A8 00 A0 FD | 	call	#pushregs_
0ffa0     F0 87 BF FD | 	call	#_pop
0ffa4     FD 1E 02 F6 | 	mov	local01, result1
0ffa8     FE 20 02 F6 | 	mov	local02, result2
0ffac     FF 22 02 F6 | 	mov	local03, result3
0ffb0                 | ' t1=pop() 
0ffb0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
0ffb0     1E 22 0E F2 | 	cmp	local03, #30 wz
0ffb4     10 00 90 5D |  if_ne	jmp	#LR__1360
0ffb8     0F 13 02 F6 | 	mov	arg01, local01
0ffbc     00 14 06 F6 | 	mov	arg02, #0
0ffc0     2C 7E B0 FD | 	call	#__system___float_tointeger
0ffc4     FD 1E 02 F6 | 	mov	local01, result1
0ffc8                 | LR__1360
0ffc8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
0ffc8     1F 22 0E F2 | 	cmp	local03, #31 wz
0ffcc     18 00 90 5D |  if_ne	jmp	#LR__1361
0ffd0     0F 13 02 F6 | 	mov	arg01, local01
0ffd4     38 81 B0 FD | 	call	#__system____builtin_atof
0ffd8     FD 12 02 F6 | 	mov	arg01, result1
0ffdc     00 14 06 F6 | 	mov	arg02, #0
0ffe0     0C 7E B0 FD | 	call	#__system___float_tointeger
0ffe4     FD 1E 02 F6 | 	mov	local01, result1
0ffe8                 | LR__1361
0ffe8     2E 00 00 FF 
0ffec     00 E4 05 F1 | 	add	objptr, ##23552
0fff0     F2 1E 62 FC | 	wrlong	local01, objptr
0fff4     04 E4 85 F1 | 	sub	objptr, #4
0fff8     F2 14 02 FB | 	rdlong	arg02, objptr
0fffc                 | ' 
0fffc                 | ' write_color:=ff
0fffc     2D 00 00 FF 
10000     BF E5 85 F1 | 	sub	objptr, ##23487
10004     F2 1E 62 FC | 	wrlong	local01, objptr
10008                 | ' write_background:=bb
10008     04 E4 05 F1 | 	add	objptr, #4
1000c     F2 14 62 FC | 	wrlong	arg02, objptr
10010     2D 00 00 FF 
10014     BF E5 05 F1 | 	add	objptr, ##23487
10018     F2 12 02 FB | 	rdlong	arg01, objptr
1001c     2E 00 00 FF 
10020     00 E4 85 F1 | 	sub	objptr, ##23552
10024     B8 2B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
10028     A7 F0 03 F6 | 	mov	ptra, fp
1002c     B2 00 A0 FD | 	call	#popregs_
10030                 | _do_ink_ret
10030     2D 00 64 FD | 	ret
10034                 | 
10034                 | ' 
10034                 | ' 
10034                 | ' sub do_font
10034                 | _do_font
10034     03 4A 05 F6 | 	mov	COUNT_, #3
10038     A8 00 A0 FD | 	call	#pushregs_
1003c     54 87 BF FD | 	call	#_pop
10040     FD 1E 02 F6 | 	mov	local01, result1
10044     FE 20 02 F6 | 	mov	local02, result2
10048     FF 22 02 F6 | 	mov	local03, result3
1004c                 | ' t1=pop() 
1004c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1004c     1E 22 0E F2 | 	cmp	local03, #30 wz
10050     10 00 90 5D |  if_ne	jmp	#LR__1370
10054     0F 13 02 F6 | 	mov	arg01, local01
10058     00 14 06 F6 | 	mov	arg02, #0
1005c     90 7D B0 FD | 	call	#__system___float_tointeger
10060     FD 1E 02 F6 | 	mov	local01, result1
10064                 | LR__1370
10064                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10064     1F 22 0E F2 | 	cmp	local03, #31 wz
10068     18 00 90 5D |  if_ne	jmp	#LR__1371
1006c     0F 13 02 F6 | 	mov	arg01, local01
10070     9C 80 B0 FD | 	call	#__system____builtin_atof
10074     FD 12 02 F6 | 	mov	arg01, result1
10078     00 14 06 F6 | 	mov	arg02, #0
1007c     70 7D B0 FD | 	call	#__system___float_tointeger
10080     FD 1E 02 F6 | 	mov	local01, result1
10084                 | LR__1371
10084     2E 00 00 FF 
10088     04 E4 05 F1 | 	add	objptr, ##23556
1008c     F2 1E 62 FC | 	wrlong	local01, objptr
10090     2E 00 00 FF 
10094     04 E4 85 F1 | 	sub	objptr, ##23556
10098     02 1E 66 F0 | 	shl	local01, #2
1009c     0F 13 02 F6 | 	mov	arg01, local01
100a0     A8 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
100a4     A7 F0 03 F6 | 	mov	ptra, fp
100a8     B2 00 A0 FD | 	call	#popregs_
100ac                 | _do_font_ret
100ac     2D 00 64 FD | 	ret
100b0                 | 
100b0                 | ' 
100b0                 | ' sub do_mode
100b0                 | _do_mode
100b0     04 4A 05 F6 | 	mov	COUNT_, #4
100b4     A8 00 A0 FD | 	call	#pushregs_
100b8     D8 86 BF FD | 	call	#_pop
100bc     FD 1E 02 F6 | 	mov	local01, result1
100c0     FE 20 02 F6 | 	mov	local02, result2
100c4     FF 22 02 F6 | 	mov	local03, result3
100c8                 | ' t1=pop() 
100c8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
100c8     1E 22 0E F2 | 	cmp	local03, #30 wz
100cc     10 00 90 5D |  if_ne	jmp	#LR__1380
100d0     0F 13 02 F6 | 	mov	arg01, local01
100d4     00 14 06 F6 | 	mov	arg02, #0
100d8     14 7D B0 FD | 	call	#__system___float_tointeger
100dc     FD 1E 02 F6 | 	mov	local01, result1
100e0                 | LR__1380
100e0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
100e0     1F 22 0E F2 | 	cmp	local03, #31 wz
100e4     18 00 90 5D |  if_ne	jmp	#LR__1381
100e8     0F 13 02 F6 | 	mov	arg01, local01
100ec     20 80 B0 FD | 	call	#__system____builtin_atof
100f0     FD 12 02 F6 | 	mov	arg01, result1
100f4     00 14 06 F6 | 	mov	arg02, #0
100f8     F4 7C B0 FD | 	call	#__system___float_tointeger
100fc     FD 1E 02 F6 | 	mov	local01, result1
10100                 | LR__1381
10100                 | ' select case t1.result.iresult
10100     0F 25 02 F6 | 	mov	local04, local01
10104     04 24 26 F3 | 	fle	local04, #4
10108     30 24 62 FD | 	jmprel	local04
1010c                 | LR__1382
1010c     10 00 90 FD | 	jmp	#LR__1383
10110     68 00 90 FD | 	jmp	#LR__1384
10114     C0 00 90 FD | 	jmp	#LR__1385
10118     18 01 90 FD | 	jmp	#LR__1386
1011c     6C 01 90 FD | 	jmp	#LR__1387
10120                 | LR__1383
10120     2E 00 00 FF 
10124     04 E4 05 F1 | 	add	objptr, ##23556
10128     F2 02 68 FC | 	wrlong	#1, objptr
1012c     04 E4 85 F1 | 	sub	objptr, #4
10130     F2 34 69 FC | 	wrlong	#154, objptr
10134     04 E4 85 F1 | 	sub	objptr, #4
10138     F2 26 69 FC | 	wrlong	#147, objptr
1013c     2D 00 00 FF 
10140     FC E5 85 F1 | 	sub	objptr, ##23548
10144     04 12 06 F6 | 	mov	arg01, #4
10148     00 3A B0 FD | 	call	#_hg010b_spin2_setfontfamily
1014c     2E 00 00 FF 
10150     00 E4 05 F1 | 	add	objptr, ##23552
10154     F2 12 02 FB | 	rdlong	arg01, objptr
10158     04 E4 85 F1 | 	sub	objptr, #4
1015c     F2 14 02 FB | 	rdlong	arg02, objptr
10160                 | ' 
10160                 | ' write_color:=ff
10160     2D 00 00 FF 
10164     BF E5 85 F1 | 	sub	objptr, ##23487
10168     F2 12 62 FC | 	wrlong	arg01, objptr
1016c                 | ' write_background:=bb
1016c     04 E4 05 F1 | 	add	objptr, #4
10170     F2 14 62 FC | 	wrlong	arg02, objptr
10174     41 E4 85 F1 | 	sub	objptr, #65
10178     10 01 90 FD | 	jmp	#LR__1387
1017c                 | LR__1384
1017c     2E 00 00 FF 
10180     04 E4 05 F1 | 	add	objptr, ##23556
10184     F2 00 68 FC | 	wrlong	#0, objptr
10188     04 E4 85 F1 | 	sub	objptr, #4
1018c     F2 2E 68 FC | 	wrlong	#23, objptr
10190     00 12 06 F6 | 	mov	arg01, #0
10194     04 E4 85 F1 | 	sub	objptr, #4
10198     F2 00 68 FC | 	wrlong	#0, objptr
1019c     2D 00 00 FF 
101a0     FC E5 85 F1 | 	sub	objptr, ##23548
101a4     A4 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
101a8     2E 00 00 FF 
101ac     00 E4 05 F1 | 	add	objptr, ##23552
101b0     F2 12 02 FB | 	rdlong	arg01, objptr
101b4     04 E4 85 F1 | 	sub	objptr, #4
101b8     F2 14 02 FB | 	rdlong	arg02, objptr
101bc                 | ' 
101bc                 | ' write_color:=ff
101bc     2D 00 00 FF 
101c0     BF E5 85 F1 | 	sub	objptr, ##23487
101c4     F2 12 62 FC | 	wrlong	arg01, objptr
101c8                 | ' write_background:=bb
101c8     04 E4 05 F1 | 	add	objptr, #4
101cc     F2 14 62 FC | 	wrlong	arg02, objptr
101d0     41 E4 85 F1 | 	sub	objptr, #65
101d4     B4 00 90 FD | 	jmp	#LR__1387
101d8                 | LR__1385
101d8     2E 00 00 FF 
101dc     04 E4 05 F1 | 	add	objptr, ##23556
101e0     F2 00 68 FC | 	wrlong	#0, objptr
101e4     04 E4 85 F1 | 	sub	objptr, #4
101e8     F2 6A 69 FC | 	wrlong	#181, objptr
101ec     00 12 06 F6 | 	mov	arg01, #0
101f0     04 E4 85 F1 | 	sub	objptr, #4
101f4     F2 00 68 FC | 	wrlong	#0, objptr
101f8     2D 00 00 FF 
101fc     FC E5 85 F1 | 	sub	objptr, ##23548
10200     48 39 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10204     2E 00 00 FF 
10208     00 E4 05 F1 | 	add	objptr, ##23552
1020c     F2 12 02 FB | 	rdlong	arg01, objptr
10210     04 E4 85 F1 | 	sub	objptr, #4
10214     F2 14 02 FB | 	rdlong	arg02, objptr
10218                 | ' 
10218                 | ' write_color:=ff
10218     2D 00 00 FF 
1021c     BF E5 85 F1 | 	sub	objptr, ##23487
10220     F2 12 62 FC | 	wrlong	arg01, objptr
10224                 | ' write_background:=bb
10224     04 E4 05 F1 | 	add	objptr, #4
10228     F2 14 62 FC | 	wrlong	arg02, objptr
1022c     41 E4 85 F1 | 	sub	objptr, #65
10230     58 00 90 FD | 	jmp	#LR__1387
10234                 | LR__1386
10234     2E 00 00 FF 
10238     04 E4 05 F1 | 	add	objptr, ##23556
1023c     F2 00 68 FC | 	wrlong	#0, objptr
10240     04 E4 85 F1 | 	sub	objptr, #4
10244     F2 1E 68 FC | 	wrlong	#15, objptr
10248     00 12 06 F6 | 	mov	arg01, #0
1024c     04 E4 85 F1 | 	sub	objptr, #4
10250     F2 00 68 FC | 	wrlong	#0, objptr
10254     2D 00 00 FF 
10258     FC E5 85 F1 | 	sub	objptr, ##23548
1025c     EC 38 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10260     2E 00 00 FF 
10264     00 E4 05 F1 | 	add	objptr, ##23552
10268     F2 12 02 FB | 	rdlong	arg01, objptr
1026c     04 E4 85 F1 | 	sub	objptr, #4
10270     F2 14 02 FB | 	rdlong	arg02, objptr
10274                 | ' 
10274                 | ' write_color:=ff
10274     2D 00 00 FF 
10278     BF E5 85 F1 | 	sub	objptr, ##23487
1027c     F2 12 62 FC | 	wrlong	arg01, objptr
10280                 | ' write_background:=bb
10280     04 E4 05 F1 | 	add	objptr, #4
10284     F2 14 62 FC | 	wrlong	arg02, objptr
10288     41 E4 85 F1 | 	sub	objptr, #65
1028c                 | LR__1387
1028c     2E 00 00 FF 
10290     00 E4 05 F1 | 	add	objptr, ##23552
10294     F2 12 02 FB | 	rdlong	arg01, objptr
10298     04 E4 85 F1 | 	sub	objptr, #4
1029c     F2 14 02 FB | 	rdlong	arg02, objptr
102a0     2D 00 00 FF 
102a4     FC E5 85 F1 | 	sub	objptr, ##23548
102a8     88 39 B0 FD | 	call	#_hg010b_spin2_cls
102ac     22 01 00 FF 
102b0     06 13 06 F6 | 	mov	arg01, ##@LR__4331
102b4                 | ' 
102b4                 | ' write(text)
102b4     38 3C B0 FD | 	call	#_hg010b_spin2_write
102b8                 | ' crlf
102b8     94 3D B0 FD | 	call	#_hg010b_spin2_crlf
102bc     09 00 00 FF 
102c0     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
102c4     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
102c8     09 00 00 FF 
102cc     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
102d0                 | ' 
102d0                 | ' write(text)
102d0     1C 3C B0 FD | 	call	#_hg010b_spin2_write
102d4                 | ' crlf
102d4     78 3D B0 FD | 	call	#_hg010b_spin2_crlf
102d8     50 00 00 FF 
102dc     A0 E5 05 F1 | 	add	objptr, ##41376
102e0     F2 12 02 FB | 	rdlong	arg01, objptr
102e4     50 00 00 FF 
102e8     A0 E5 85 F1 | 	sub	objptr, ##41376
102ec                 | ' 
102ec                 | ' write(text)
102ec     00 3C B0 FD | 	call	#_hg010b_spin2_write
102f0                 | ' crlf
102f0     5C 3D B0 FD | 	call	#_hg010b_spin2_crlf
102f4     A7 F0 03 F6 | 	mov	ptra, fp
102f8     B2 00 A0 FD | 	call	#popregs_
102fc                 | _do_mode_ret
102fc     2D 00 64 FD | 	ret
10300                 | 
10300                 | ' 
10300                 | ' 
10300                 | ' 
10300                 | ' sub do_pinwrite
10300                 | _do_pinwrite
10300     90 84 BF FD | 	call	#_pop
10304     FD 14 02 F6 | 	mov	arg02, result1
10308     88 84 BF FD | 	call	#_pop
1030c     FD 12 02 F6 | 	mov	arg01, result1
10310     B4 4D B0 FD | 	call	#__system___pinwrite
10314                 | _do_pinwrite_ret
10314     2D 00 64 FD | 	ret
10318                 | 
10318                 | ' 
10318                 | ' sub do_waitms
10318                 | _do_waitms
10318     01 4A 05 F6 | 	mov	COUNT_, #1
1031c     A8 00 A0 FD | 	call	#pushregs_
10320     18 F0 07 F1 | 	add	ptra, #24
10324     6C 84 BF FD | 	call	#_pop
10328     A7 FA 61 FC | 	wrlong	result1, fp
1032c     04 4E 05 F1 | 	add	fp, #4
10330     A7 FC 61 FC | 	wrlong	result2, fp
10334     04 4E 05 F1 | 	add	fp, #4
10338     A7 FE 61 FC | 	wrlong	result3, fp
1033c                 | ' 
1033c                 | ' t1=pop() 'value
1033c                 | ' 
1033c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1033c     08 4E 85 F1 | 	sub	fp, #8
10340     1C FE 0D F2 | 	cmp	result3, #28 wz
10344     08 4E 05 51 |  if_ne	add	fp, #8
10348     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1034c     08 4E 85 51 |  if_ne	sub	fp, #8
10350     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
10354     A7 12 02 AB |  if_e	rdlong	arg01, fp
10358     0C 4E 05 A1 |  if_e	add	fp, #12
1035c     A7 12 62 AC |  if_e	wrlong	arg01, fp
10360     0C 4E 85 A1 |  if_e	sub	fp, #12
10364     14 00 90 AD |  if_e	jmp	#LR__1390
10368     A7 12 02 F6 | 	mov	arg01, fp
1036c     B4 DC BF FD | 	call	#_converttoint
10370     0C 4E 05 F1 | 	add	fp, #12
10374     A7 FA 61 FC | 	wrlong	result1, fp
10378     0C 4E 85 F1 | 	sub	fp, #12
1037c                 | LR__1390
1037c                 | ' if t<0 then return
1037c     0C 4E 05 F1 | 	add	fp, #12
10380     A7 12 02 FB | 	rdlong	arg01, fp
10384     0C 4E 85 F1 | 	sub	fp, #12
10388     00 12 56 F2 | 	cmps	arg01, #0 wc
1038c     B8 00 90 CD |  if_b	jmp	#LR__1395
10390                 | ' if t < 5000 then 
10390     0C 4E 05 F1 | 	add	fp, #12
10394     A7 12 02 FB | 	rdlong	arg01, fp
10398     0C 4E 85 F1 | 	sub	fp, #12
1039c     09 00 00 FF 
103a0     88 13 56 F2 | 	cmps	arg01, ##5000 wc
103a4     14 00 90 3D |  if_ae	jmp	#LR__1391
103a8     0C 4E 05 F1 | 	add	fp, #12
103ac     A7 12 02 FB | 	rdlong	arg01, fp
103b0     0C 4E 85 F1 | 	sub	fp, #12
103b4     50 4E B0 FD | 	call	#__system___waitms
103b8     8C 00 90 FD | 	jmp	#LR__1394
103bc                 | LR__1391
103bc     10 4E 05 F1 | 	add	fp, #16
103c0     A7 02 68 FC | 	wrlong	#1, fp
103c4     04 4E 85 F1 | 	sub	fp, #4
103c8     A7 12 02 FB | 	rdlong	arg01, fp
103cc     09 13 52 F6 | 	abs	arg01, arg01 wc
103d0     09 00 00 FF 
103d4     88 13 16 FD | 	qdiv	arg01, ##5000
103d8                 | '   for i=1 to t/5000
103d8     0C 4E 85 F1 | 	sub	fp, #12
103dc     18 1E 62 FD | 	getqx	local01
103e0     0F 1F 82 F6 | 	negc	local01, local01
103e4     01 1E 06 F1 | 	add	local01, #1
103e8                 | LR__1392
103e8     10 4E 05 F1 | 	add	fp, #16
103ec     A7 12 02 FB | 	rdlong	arg01, fp
103f0     10 4E 85 F1 | 	sub	fp, #16
103f4     0F 13 52 F2 | 	cmps	arg01, local01 wc
103f8     28 00 90 3D |  if_ae	jmp	#LR__1393
103fc     0C 4E 05 F1 | 	add	fp, #12
10400     A7 12 02 FB | 	rdlong	arg01, fp
10404     0C 4E 85 F1 | 	sub	fp, #12
10408     FC 4D B0 FD | 	call	#__system___waitms
1040c     10 4E 05 F1 | 	add	fp, #16
10410     A7 12 02 FB | 	rdlong	arg01, fp
10414     01 12 06 F1 | 	add	arg01, #1
10418     A7 12 62 FC | 	wrlong	arg01, fp
1041c     10 4E 85 F1 | 	sub	fp, #16
10420     C4 FF 9F FD | 	jmp	#LR__1392
10424                 | LR__1393
10424     0C 4E 05 F1 | 	add	fp, #12
10428     A7 1E 02 FB | 	rdlong	local01, fp
1042c     0F 1F 52 F6 | 	abs	local01, local01 wc
10430     09 00 00 FF 
10434     88 1F 16 FD | 	qdiv	local01, ##5000
10438     0C 4E 85 F1 | 	sub	fp, #12
1043c     19 1E 62 FD | 	getqy	local01
10440     0F 13 82 F6 | 	negc	arg01, local01
10444     C0 4D B0 FD | 	call	#__system___waitms
10448                 | LR__1394
10448                 | LR__1395
10448     A7 F0 03 F6 | 	mov	ptra, fp
1044c     B2 00 A0 FD | 	call	#popregs_
10450                 | _do_waitms_ret
10450     2D 00 64 FD | 	ret
10454                 | 
10454                 | ' 
10454                 | ' sub do_waitvbl
10454                 | _do_waitvbl
10454     01 12 06 F6 | 	mov	arg01, #1
10458     68 37 B0 FD | 	call	#_hg010b_spin2_waitvbl
1045c                 | _do_waitvbl_ret
1045c     2D 00 64 FD | 	ret
10460                 | 
10460                 | ' 
10460                 | ' sub do_waitclock
10460                 | _do_waitclock
10460     52 00 00 FF 
10464     38 E4 05 F1 | 	add	objptr, ##42040
10468     F2 00 02 FB | 	rdlong	_var01, objptr
1046c                 | ' c=hkcnt
1046c                 | ' do: loop until hkcnt<>c
1046c                 | LR__1400
1046c     F2 02 02 FB | 	rdlong	_var02, objptr
10470     00 03 0A F2 | 	cmp	_var02, _var01 wz
10474     F4 FF 9F AD |  if_e	jmp	#LR__1400
10478     52 00 00 FF 
1047c     38 E4 85 F1 | 	sub	objptr, ##42040
10480                 | _do_waitclock_ret
10480     2D 00 64 FD | 	ret
10484                 | 
10484                 | ' 
10484                 | ' sub do_dir
10484                 | _do_dir
10484     03 4A 05 F6 | 	mov	COUNT_, #3
10488     A8 00 A0 FD | 	call	#pushregs_
1048c     22 01 00 FF 
10490     07 13 06 F6 | 	mov	arg01, ##@LR__4332
10494     08 51 B0 FD | 	call	#__system___chdir
10498                 | ' chdir("/sd/bas")       ' set working directory
10498                 | ' print "Working directory: "; currentdir$ 
10498     00 12 06 F6 | 	mov	arg01, #0
1049c     28 A0 B0 FD | 	call	#__system___getiolock_0350
104a0     FD 12 02 F6 | 	mov	arg01, result1
104a4     6C 4A B0 FD | 	call	#__system___lockmem
104a8     22 01 00 FF 
104ac     0F 15 06 F6 | 	mov	arg02, ##@LR__4333
104b0     00 12 06 F6 | 	mov	arg01, #0
104b4     00 16 06 F6 | 	mov	arg03, #0
104b8     4C 57 B0 FD | 	call	#__system___basic_print_string
104bc     49 00 00 FF 
104c0     58 E4 05 F1 | 	add	objptr, ##37464
104c4     F2 14 02 FB | 	rdlong	arg02, objptr
104c8     49 00 00 FF 
104cc     58 E4 85 F1 | 	sub	objptr, ##37464
104d0     00 12 06 F6 | 	mov	arg01, #0
104d4     00 16 06 F6 | 	mov	arg03, #0
104d8     2C 57 B0 FD | 	call	#__system___basic_print_string
104dc     00 12 06 F6 | 	mov	arg01, #0
104e0     0A 14 06 F6 | 	mov	arg02, #10
104e4     00 16 06 F6 | 	mov	arg03, #0
104e8     C4 56 B0 FD | 	call	#__system___basic_print_char
104ec     00 12 06 F6 | 	mov	arg01, #0
104f0     D4 9F B0 FD | 	call	#__system___getiolock_0350
104f4     FD 00 68 FC | 	wrlong	#0, result1
104f8     22 01 00 FF 
104fc     23 13 06 F6 | 	mov	arg01, ##@LR__4334
10500     10 14 06 F6 | 	mov	arg02, #16
10504     F8 A0 B0 FD | 	call	#__system___basic_dir
10508     FD 1E 02 F6 | 	mov	local01, result1
1050c                 | ' 
1050c                 | ' filename=dir$("*", fbDirectory)
1050c                 | ' while filename <> "" and filename <> nil
1050c                 | LR__1410
1050c     00 20 06 F6 | 	mov	local02, #0
10510     22 01 00 FF 
10514     25 15 06 F6 | 	mov	arg02, ##@LR__4335
10518     0F 13 02 F6 | 	mov	arg01, local01
1051c     1C 4A B0 FD | 	call	#__system___string_cmp
10520     00 FA 0D F2 | 	cmp	result1, #0 wz
10524     00 20 26 56 |  if_ne	not	local02, #0
10528     00 22 06 F6 | 	mov	local03, #0
1052c     0F 13 02 F6 | 	mov	arg01, local01
10530     00 14 06 F6 | 	mov	arg02, #0
10534     04 4A B0 FD | 	call	#__system___string_cmp
10538     00 FA 0D F2 | 	cmp	result1, #0 wz
1053c     00 22 26 56 |  if_ne	not	local03, #0
10540     11 21 CA F7 | 	test	local02, local03 wz
10544     64 00 90 AD |  if_e	jmp	#LR__1411
10548                 | '   print "[dir] ";filename
10548     00 12 06 F6 | 	mov	arg01, #0
1054c     78 9F B0 FD | 	call	#__system___getiolock_0350
10550     FD 12 02 F6 | 	mov	arg01, result1
10554     BC 49 B0 FD | 	call	#__system___lockmem
10558     22 01 00 FF 
1055c     26 15 06 F6 | 	mov	arg02, ##@LR__4336
10560     00 12 06 F6 | 	mov	arg01, #0
10564     00 16 06 F6 | 	mov	arg03, #0
10568     9C 56 B0 FD | 	call	#__system___basic_print_string
1056c     00 12 06 F6 | 	mov	arg01, #0
10570     0F 15 02 F6 | 	mov	arg02, local01
10574     00 16 06 F6 | 	mov	arg03, #0
10578     8C 56 B0 FD | 	call	#__system___basic_print_string
1057c     00 12 06 F6 | 	mov	arg01, #0
10580     0A 14 06 F6 | 	mov	arg02, #10
10584     00 16 06 F6 | 	mov	arg03, #0
10588     24 56 B0 FD | 	call	#__system___basic_print_char
1058c     00 12 06 F6 | 	mov	arg01, #0
10590     34 9F B0 FD | 	call	#__system___getiolock_0350
10594     FD 00 68 FC | 	wrlong	#0, result1
10598     00 12 06 F6 | 	mov	arg01, #0
1059c     00 14 06 F6 | 	mov	arg02, #0
105a0     5C A0 B0 FD | 	call	#__system___basic_dir
105a4     FD 1E 02 F6 | 	mov	local01, result1
105a8     60 FF 9F FD | 	jmp	#LR__1410
105ac                 | LR__1411
105ac     22 01 00 FF 
105b0     2D 13 06 F6 | 	mov	arg01, ##@LR__4337
105b4     21 14 06 F6 | 	mov	arg02, #33
105b8     44 A0 B0 FD | 	call	#__system___basic_dir
105bc     FD 1E 02 F6 | 	mov	local01, result1
105c0                 | ' 
105c0                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
105c0                 | ' do while filename <> "" and filename <> nil
105c0                 | LR__1412
105c0     00 20 06 F6 | 	mov	local02, #0
105c4     22 01 00 FF 
105c8     2F 15 06 F6 | 	mov	arg02, ##@LR__4338
105cc     0F 13 02 F6 | 	mov	arg01, local01
105d0     68 49 B0 FD | 	call	#__system___string_cmp
105d4     00 FA 0D F2 | 	cmp	result1, #0 wz
105d8     00 20 26 56 |  if_ne	not	local02, #0
105dc     00 22 06 F6 | 	mov	local03, #0
105e0     0F 13 02 F6 | 	mov	arg01, local01
105e4     00 14 06 F6 | 	mov	arg02, #0
105e8     50 49 B0 FD | 	call	#__system___string_cmp
105ec     00 FA 0D F2 | 	cmp	result1, #0 wz
105f0     00 22 26 56 |  if_ne	not	local03, #0
105f4     11 21 CA F7 | 	test	local02, local03 wz
105f8     54 01 90 AD |  if_e	jmp	#LR__1416
105fc                 | '   print filename
105fc     00 12 06 F6 | 	mov	arg01, #0
10600     C4 9E B0 FD | 	call	#__system___getiolock_0350
10604     FD 12 02 F6 | 	mov	arg01, result1
10608     08 49 B0 FD | 	call	#__system___lockmem
1060c     00 12 06 F6 | 	mov	arg01, #0
10610     0F 15 02 F6 | 	mov	arg02, local01
10614     00 16 06 F6 | 	mov	arg03, #0
10618     EC 55 B0 FD | 	call	#__system___basic_print_string
1061c     00 12 06 F6 | 	mov	arg01, #0
10620     0A 14 06 F6 | 	mov	arg02, #10
10624     00 16 06 F6 | 	mov	arg03, #0
10628     84 55 B0 FD | 	call	#__system___basic_print_char
1062c     00 12 06 F6 | 	mov	arg01, #0
10630     94 9E B0 FD | 	call	#__system___getiolock_0350
10634     FD 00 68 FC | 	wrlong	#0, result1
10638     00 12 06 F6 | 	mov	arg01, #0
1063c     00 14 06 F6 | 	mov	arg02, #0
10640     BC 9F B0 FD | 	call	#__system___basic_dir
10644     FD 1E 02 F6 | 	mov	local01, result1
10648                 | '   filename = dir$()      ' continue scan
10648                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
10648                 | ' return cursor_y
10648     3A E4 05 F1 | 	add	objptr, #58
1064c     F2 FA C1 FA | 	rdbyte	result1, objptr
10650     3A E4 85 F1 | 	sub	objptr, #58
10654     22 FA 0D F2 | 	cmp	result1, #34 wz
10658     64 FF 9F 5D |  if_ne	jmp	#LR__1412
1065c                 | '     print "-----more, press any key";
1065c     00 12 06 F6 | 	mov	arg01, #0
10660     64 9E B0 FD | 	call	#__system___getiolock_0350
10664     FD 12 02 F6 | 	mov	arg01, result1
10668     A8 48 B0 FD | 	call	#__system___lockmem
1066c     22 01 00 FF 
10670     30 15 06 F6 | 	mov	arg02, ##@LR__4339
10674     00 12 06 F6 | 	mov	arg01, #0
10678     00 16 06 F6 | 	mov	arg03, #0
1067c     88 55 B0 FD | 	call	#__system___basic_print_string
10680     00 12 06 F6 | 	mov	arg01, #0
10684     40 9E B0 FD | 	call	#__system___getiolock_0350
10688     FD 00 68 FC | 	wrlong	#0, result1
1068c                 | '     do 
1068c                 | LR__1413
1068c     28 41 B0 FD | 	call	#_usbnew_spin2_get_key
10690     00 FA 0D F2 | 	cmp	result1, #0 wz
10694     F4 FF 9F 5D |  if_ne	jmp	#LR__1413
10698                 | '     do
10698                 | LR__1414
10698     1C 41 B0 FD | 	call	#_usbnew_spin2_get_key
1069c     00 FA 0D F2 | 	cmp	result1, #0 wz
106a0     F4 FF 9F AD |  if_e	jmp	#LR__1414
106a4                 | '       if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
106a4     50 00 00 FF 
106a8     A4 E5 05 F1 | 	add	objptr, ##41380
106ac     F2 20 02 FB | 	rdlong	local02, objptr
106b0     50 00 00 FF 
106b4     A4 E5 85 F1 | 	sub	objptr, ##41380
106b8     01 20 0E F2 | 	cmp	local02, #1 wz
106bc     44 00 90 5D |  if_ne	jmp	#LR__1415
106c0     01 00 00 FF 
106c4     00 EA 05 F1 | 	add	ptr__dat__, ##512
106c8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
106cc     01 00 00 FF 
106d0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
106d4     07 12 06 F6 | 	mov	arg01, #7
106d8     56 00 00 FF 
106dc     44 16 06 F6 | 	mov	arg03, ##44100
106e0     0E 18 C6 F9 | 	decod	arg04, #14
106e4     03 00 00 FF 
106e8     94 1A 06 F6 | 	mov	arg05, ##1684
106ec     01 1C 66 F6 | 	neg	arg06, #1
106f0     0B 00 00 FF 
106f4     C0 E4 05 F1 | 	add	objptr, ##5824
106f8     E4 43 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
106fc     0B 00 00 FF 
10700     C0 E4 85 F1 | 	sub	objptr, ##5824
10704                 | LR__1415
10704     00 12 06 F6 | 	mov	arg01, #0
10708     23 14 06 F6 | 	mov	arg02, #35
1070c     7C 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
10710                 | '     position 0,35: print "                             ";: position 4,35  
10710     00 12 06 F6 | 	mov	arg01, #0
10714     B0 9D B0 FD | 	call	#__system___getiolock_0350
10718     FD 12 02 F6 | 	mov	arg01, result1
1071c     F4 47 B0 FD | 	call	#__system___lockmem
10720     22 01 00 FF 
10724     49 15 06 F6 | 	mov	arg02, ##@LR__4340
10728     00 12 06 F6 | 	mov	arg01, #0
1072c     00 16 06 F6 | 	mov	arg03, #0
10730     D4 54 B0 FD | 	call	#__system___basic_print_string
10734     00 12 06 F6 | 	mov	arg01, #0
10738     8C 9D B0 FD | 	call	#__system___getiolock_0350
1073c     FD 00 68 FC | 	wrlong	#0, result1
10740     04 12 06 F6 | 	mov	arg01, #4
10744     23 14 06 F6 | 	mov	arg02, #35
10748     40 34 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1074c     70 FE 9F FD | 	jmp	#LR__1412
10750                 | LR__1416
10750     A7 F0 03 F6 | 	mov	ptra, fp
10754     B2 00 A0 FD | 	call	#popregs_
10758                 | _do_dir_ret
10758     2D 00 64 FD | 	ret
1075c                 | 
1075c                 | ' 
1075c                 | ' sub do_if
1075c                 | _do_if
1075c     05 4A 05 F6 | 	mov	COUNT_, #5
10760     A8 00 A0 FD | 	call	#pushregs_
10764     2C 80 BF FD | 	call	#_pop
10768     FD 1E 0A F6 | 	mov	local01, result1 wz
1076c     FE 20 02 F6 | 	mov	local02, result2
10770     FF 22 02 F6 | 	mov	local03, result3
10774                 | ' t1=pop()
10774                 | ' ' if uresult=0, jump over else
10774                 | ' if t1.result.uresult = 0 then 
10774     BC 00 90 5D |  if_ne	jmp	#LR__1422
10778                 | '   for i=lineptr_e to lineptr-1
10778     41 00 00 FF 
1077c     44 E4 05 F1 | 	add	objptr, ##33348
10780     F2 24 02 FB | 	rdlong	local04, objptr
10784     04 E4 85 F1 | 	sub	objptr, #4
10788     F2 26 02 FB | 	rdlong	local05, objptr
1078c     41 00 00 FF 
10790     40 E4 85 F1 | 	sub	objptr, ##33344
10794                 | LR__1420
10794     13 25 52 F2 | 	cmps	local04, local05 wc
10798     78 00 90 3D |  if_ae	jmp	#LR__1421
1079c     12 FF 01 F6 | 	mov	result3, local04
107a0     01 FE 65 F0 | 	shl	result3, #1
107a4     12 FF 01 F1 | 	add	result3, local04
107a8     02 FE 65 F0 | 	shl	result3, #2
107ac     3E 00 00 FF 
107b0     40 E4 05 F1 | 	add	objptr, ##31808
107b4     F2 FE 01 F1 | 	add	result3, objptr
107b8     FF 1E 02 FB | 	rdlong	local01, result3
107bc     04 FE 05 F1 | 	add	result3, #4
107c0     FF FC 01 FB | 	rdlong	result2, result3
107c4     12 FF 01 F6 | 	mov	result3, local04
107c8     01 FE 65 F0 | 	shl	result3, #1
107cc     12 FF 01 F1 | 	add	result3, local04
107d0     02 FE 65 F0 | 	shl	result3, #2
107d4     F2 FE 01 F1 | 	add	result3, objptr
107d8     08 FE 05 F1 | 	add	result3, #8
107dc     FF FE 01 FB | 	rdlong	result3, result3
107e0     FE 20 02 F6 | 	mov	local02, result2
107e4     FF 22 02 F6 | 	mov	local03, result3
107e8                 | '     t1=compiledline(i)
107e8                 | '     if t1.result_type=token_else then lineptr_e=i : return
107e8     5A 22 0E F2 | 	cmp	local03, #90 wz
107ec     3E 00 00 FF 
107f0     40 E4 85 F1 | 	sub	objptr, ##31808
107f4     41 00 00 AF 
107f8     44 E4 05 A1 |  if_e	add	objptr, ##33348
107fc     F2 24 62 AC |  if_e	wrlong	local04, objptr
10800     41 00 00 AF 
10804     44 E4 85 A1 |  if_e	sub	objptr, ##33348
10808     28 00 90 AD |  if_e	jmp	#LR__1423
1080c     01 24 06 F1 | 	add	local04, #1
10810     80 FF 9F FD | 	jmp	#LR__1420
10814                 | LR__1421
10814     41 00 00 FF 
10818     40 E4 05 F1 | 	add	objptr, ##33344
1081c     F2 26 02 FB | 	rdlong	local05, objptr
10820     01 26 86 F1 | 	sub	local05, #1
10824     04 E4 05 F1 | 	add	objptr, #4
10828     F2 26 62 FC | 	wrlong	local05, objptr
1082c     41 00 00 FF 
10830     44 E4 85 F1 | 	sub	objptr, ##33348
10834                 | LR__1422
10834                 | LR__1423
10834     A7 F0 03 F6 | 	mov	ptra, fp
10838     B2 00 A0 FD | 	call	#popregs_
1083c                 | _do_if_ret
1083c     2D 00 64 FD | 	ret
10840                 | 
10840                 | ' 
10840                 | ' sub do_else
10840                 | _do_else
10840     41 00 00 FF 
10844     40 E4 05 F1 | 	add	objptr, ##33344
10848     F2 00 02 FB | 	rdlong	_var01, objptr
1084c     01 00 86 F1 | 	sub	_var01, #1
10850     04 E4 05 F1 | 	add	objptr, #4
10854     F2 00 62 FC | 	wrlong	_var01, objptr
10858     41 00 00 FF 
1085c     44 E4 85 F1 | 	sub	objptr, ##33348
10860                 | _do_else_ret
10860     2D 00 64 FD | 	ret
10864                 | 
10864                 | ' 
10864                 | ' 
10864                 | ' 
10864                 | ' sub do_nothing
10864                 | _do_nothing
10864                 | _do_nothing_ret
10864     2D 00 64 FD | 	ret
10868                 | 
10868                 | ' 
10868                 | ' sub do_brun
10868                 | _do_brun
10868     08 4A 05 F6 | 	mov	COUNT_, #8
1086c     A8 00 A0 FD | 	call	#pushregs_
10870     20 7F BF FD | 	call	#_pop
10874     FE 1A 02 F6 | 	mov	arg05, result2
10878     FF 18 02 F6 | 	mov	arg04, result3
1087c     FD 1E 02 F6 | 	mov	local01, result1
10880     0D 21 02 F6 | 	mov	local02, arg05
10884     0C 23 02 F6 | 	mov	local03, arg04
10888                 | ' 
10888                 | ' t1=pop() 
10888                 | ' if t1.result_type=result_string2 then t1.result.sresult=do_convertstring(t1.result.uresult): t1.result_type=result_string
10888     2B 22 0E F2 | 	cmp	local03, #43 wz
1088c     10 00 90 5D |  if_ne	jmp	#LR__1430
10890     0F 13 02 F6 | 	mov	arg01, local01
10894     F0 9B BF FD | 	call	#_do_convertstring
10898     FD 1E 02 F6 | 	mov	local01, result1
1089c     1F 22 06 F6 | 	mov	local03, #31
108a0                 | LR__1430
108a0                 | ' if t1.result_type=result_string then
108a0     1F 22 0E F2 | 	cmp	local03, #31 wz
108a4     EC 01 90 5D |  if_ne	jmp	#LR__1434
108a8     0F 25 02 F6 | 	mov	local04, local01
108ac                 | '   filename=t1.result.sresult
108ac                 | '   if left$(filename,1)="/" then 
108ac     12 13 02 F6 | 	mov	arg01, local04
108b0     01 14 06 F6 | 	mov	arg02, #1
108b4     6C 66 B0 FD | 	call	#__system__Left_S
108b8     FD 12 02 F6 | 	mov	arg01, result1
108bc     22 01 00 FF 
108c0     67 15 06 F6 | 	mov	arg02, ##@LR__4341
108c4     74 46 B0 FD | 	call	#__system___string_cmp
108c8     00 FA 0D F2 | 	cmp	result1, #0 wz
108cc     12 27 02 A6 |  if_e	mov	local05, local04
108d0     14 00 90 AD |  if_e	jmp	#LR__1431
108d4     22 01 00 FF 
108d8     69 13 06 F6 | 	mov	arg01, ##@LR__4342
108dc     12 15 02 F6 | 	mov	arg02, local04
108e0     8C 46 B0 FD | 	call	#__system___string_concat
108e4     FD 26 02 F6 | 	mov	local05, result1
108e8                 | LR__1431
108e8                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
108e8                 | '   open fullfilename for input as #9
108e8     09 12 06 F6 | 	mov	arg01, #9
108ec     13 15 02 F6 | 	mov	arg02, local05
108f0     00 16 06 F6 | 	mov	arg03, #0
108f4     20 52 B0 FD | 	call	#__system___basic_open_string
108f8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
108fc     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10900     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
10904     FD 28 0A F6 | 	mov	local06, result1 wz
10908                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
10908     8C 00 90 AD |  if_e	jmp	#LR__1432
1090c     00 12 06 F6 | 	mov	arg01, #0
10910     B4 9B B0 FD | 	call	#__system___getiolock_0350
10914     FD 12 02 F6 | 	mov	arg01, result1
10918     F8 45 B0 FD | 	call	#__system___lockmem
1091c     22 01 00 FF 
10920     72 15 06 F6 | 	mov	arg02, ##@LR__4343
10924     00 12 06 F6 | 	mov	arg01, #0
10928     00 16 06 F6 | 	mov	arg03, #0
1092c     D8 52 B0 FD | 	call	#__system___basic_print_string
10930     00 12 06 F6 | 	mov	arg01, #0
10934     14 15 02 F6 | 	mov	arg02, local06
10938     00 16 06 F6 | 	mov	arg03, #0
1093c     0A 18 06 F6 | 	mov	arg04, #10
10940     08 53 B0 FD | 	call	#__system___basic_print_integer
10944     22 01 00 FF 
10948     80 15 06 F6 | 	mov	arg02, ##@LR__4344
1094c     00 12 06 F6 | 	mov	arg01, #0
10950     00 16 06 F6 | 	mov	arg03, #0
10954     B0 52 B0 FD | 	call	#__system___basic_print_string
10958     14 13 02 F6 | 	mov	arg01, local06
1095c     B4 6B B0 FD | 	call	#__system___strerror
10960     FD 14 02 F6 | 	mov	arg02, result1
10964     00 12 06 F6 | 	mov	arg01, #0
10968     00 16 06 F6 | 	mov	arg03, #0
1096c     98 52 B0 FD | 	call	#__system___basic_print_string
10970     00 12 06 F6 | 	mov	arg01, #0
10974     0A 14 06 F6 | 	mov	arg02, #10
10978     00 16 06 F6 | 	mov	arg03, #0
1097c     30 52 B0 FD | 	call	#__system___basic_print_char
10980     00 12 06 F6 | 	mov	arg01, #0
10984     40 9B B0 FD | 	call	#__system___getiolock_0350
10988     FD 00 68 FC | 	wrlong	#0, result1
1098c     09 12 06 F6 | 	mov	arg01, #9
10990     64 91 B0 FD | 	call	#__system__close
10994     FC 00 90 FD | 	jmp	#LR__1435
10998                 | LR__1432
10998     01 2A 06 F6 | 	mov	local07, #1
1099c     00 2C 06 F6 | 	mov	local08, #0
109a0                 | '   do
109a0                 | LR__1433
109a0                 | '     get #9,pos,block(0),1024,r : pos+=r	
109a0     4E 00 00 FF 
109a4     70 E5 05 F1 | 	add	objptr, ##40304
109a8     F2 16 02 F6 | 	mov	arg03, objptr
109ac     4E 00 00 FF 
109b0     70 E5 85 F1 | 	sub	objptr, ##40304
109b4     09 12 06 F6 | 	mov	arg01, #9
109b8     15 15 02 F6 | 	mov	arg02, local07
109bc     0A 18 C6 F9 | 	decod	arg04, #10
109c0     01 1A 06 F6 | 	mov	arg05, #1
109c4     50 53 B0 FD | 	call	#__system___basic_get
109c8     FD 28 02 F6 | 	mov	local06, result1
109cc     FD 2A 02 F1 | 	add	local07, result1
109d0     4E 00 00 FF 
109d4     70 E5 05 F1 | 	add	objptr, ##40304
109d8     F2 12 02 F6 | 	mov	arg01, objptr
109dc     16 15 02 F6 | 	mov	arg02, local08
109e0     0A 16 C6 F9 | 	decod	arg03, #10
109e4     43 00 00 FF 
109e8     B0 E4 85 F1 | 	sub	objptr, ##34480
109ec     D4 3A B0 FD | 	call	#_psram_spin2_write
109f0     0B 00 00 FF 
109f4     C0 E4 85 F1 | 	sub	objptr, ##5824
109f8     14 2D 02 F1 | 	add	local08, local06
109fc     02 00 00 FF 
10a00     00 28 0E F2 | 	cmp	local06, ##1024 wz
10a04     E0 03 00 AF 
10a08     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
10a0c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1433
10a10     2D 00 00 FF 
10a14     C0 E5 05 F1 | 	add	objptr, ##23488
10a18     F2 12 02 FB | 	rdlong	arg01, objptr
10a1c     03 12 62 FD | 	cogstop	arg01
10a20     04 E4 05 F1 | 	add	objptr, #4
10a24     F2 12 02 FB | 	rdlong	arg01, objptr
10a28     03 12 62 FD | 	cogstop	arg01
10a2c     04 E4 05 F1 | 	add	objptr, #4
10a30     F2 12 02 FB | 	rdlong	arg01, objptr
10a34     03 12 62 FD | 	cogstop	arg01
10a38     22 00 00 FF 
10a3c     E0 E5 05 F1 | 	add	objptr, ##17888
10a40     F2 12 02 FB | 	rdlong	arg01, objptr
10a44     03 12 62 FD | 	cogstop	arg01
10a48     09 00 00 FF 
10a4c     74 EB 05 F1 | 	add	ptr__dat__, ##4980
10a50     F5 14 02 F6 | 	mov	arg02, ptr__dat__
10a54     09 00 00 FF 
10a58     74 EB 85 F1 | 	sub	ptr__dat__, ##4980
10a5c     22 00 00 FF 
10a60     D8 E5 85 F1 | 	sub	objptr, ##17880
10a64     1E 2C 06 F6 | 	mov	local08, #30
10a68     28 E4 61 FD | 	setq	objptr
10a6c     0A 2D F2 FC | 	coginit	local08, arg02 wc
10a70     01 2C 66 C6 |  if_b	neg	local08, #1
10a74     24 00 00 FF 
10a78     DC E4 05 F1 | 	add	objptr, ##18652
10a7c     F2 2C 62 FC | 	wrlong	local08, objptr
10a80     52 00 00 FF 
10a84     AC E4 85 F1 | 	sub	objptr, ##42156
10a88     00 12 06 F6 | 	mov	arg01, #0
10a8c     01 12 62 FD | 	cogid	arg01
10a90     03 12 62 FD | 	cogstop	arg01
10a94                 | LR__1434
10a94                 | LR__1435
10a94     A7 F0 03 F6 | 	mov	ptra, fp
10a98     B2 00 A0 FD | 	call	#popregs_
10a9c                 | _do_brun_ret
10a9c     2D 00 64 FD | 	ret
10aa0                 | 
10aa0                 | ' 
10aa0                 | ' 
10aa0                 | ' sub do_mouse
10aa0                 | _do_mouse
10aa0     F0 7C BF FD | 	call	#_pop
10aa4     00 FA 4D F2 | 	cmps	result1, #0 wz
10aa8                 | ' 
10aa8                 | ' t1=pop()
10aa8                 | ' 
10aa8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
10aa8     14 00 90 5D |  if_ne	jmp	#LR__1440
10aac     10 12 06 F6 | 	mov	arg01, #16
10ab0     00 14 06 F6 | 	mov	arg02, #0
10ab4     00 16 06 F6 | 	mov	arg03, #0
10ab8     B4 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10abc     10 00 90 FD | 	jmp	#LR__1441
10ac0                 | LR__1440
10ac0     10 12 06 F6 | 	mov	arg01, #16
10ac4     20 14 06 F6 | 	mov	arg02, #32
10ac8     20 16 06 F6 | 	mov	arg03, #32
10acc     A0 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10ad0                 | LR__1441
10ad0                 | _do_mouse_ret
10ad0     2D 00 64 FD | 	ret
10ad4                 | 
10ad4                 | ' 
10ad4                 | ' sub do_cursor
10ad4                 | _do_cursor
10ad4     BC 7C BF FD | 	call	#_pop
10ad8     00 FA 4D F2 | 	cmps	result1, #0 wz
10adc                 | ' 
10adc                 | ' t1=pop()
10adc                 | ' 
10adc                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
10adc     14 00 90 5D |  if_ne	jmp	#LR__1450
10ae0     11 12 06 F6 | 	mov	arg01, #17
10ae4     00 14 06 F6 | 	mov	arg02, #0
10ae8     00 16 06 F6 | 	mov	arg03, #0
10aec     80 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10af0     10 00 90 FD | 	jmp	#LR__1451
10af4                 | LR__1450
10af4     11 12 06 F6 | 	mov	arg01, #17
10af8     08 14 06 F6 | 	mov	arg02, #8
10afc     10 16 06 F6 | 	mov	arg03, #16
10b00     6C 24 B0 FD | 	call	#_hg010b_spin2_setspritesize
10b04                 | LR__1451
10b04                 | _do_cursor_ret
10b04     2D 00 64 FD | 	ret
10b08                 | 
10b08                 | ' 
10b08                 | ' 
10b08                 | ' sub do_click
10b08                 | _do_click
10b08     88 7C BF FD | 	call	#_pop
10b0c     00 FA 4D F2 | 	cmps	result1, #0 wz
10b10                 | ' 
10b10                 | ' t1=pop()
10b10                 | ' 
10b10                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
10b10     50 00 00 AF 
10b14     A4 E5 05 A1 |  if_e	add	objptr, ##41380
10b18     F2 00 68 AC |  if_e	wrlong	#0, objptr
10b1c     50 00 00 FF 
10b20     A4 E5 C5 F3 | 	sumz	objptr, ##41380
10b24     F2 02 68 5C |  if_ne	wrlong	#1, objptr
10b28     50 00 00 5F 
10b2c     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
10b30                 | _do_click_ret
10b30     2D 00 64 FD | 	ret
10b34                 | 
10b34                 | ' 
10b34                 | ' 
10b34                 | ' sub do_beep
10b34                 | _do_beep
10b34     02 4A 05 F6 | 	mov	COUNT_, #2
10b38     A8 00 A0 FD | 	call	#pushregs_
10b3c     20 F0 07 F1 | 	add	ptra, #32
10b40     50 7C BF FD | 	call	#_pop
10b44     FD 1E 02 F6 | 	mov	local01, result1
10b48     FE 1C 02 F6 | 	mov	arg06, result2
10b4c     FF 20 02 F6 | 	mov	local02, result3
10b50     0C 4E 05 F1 | 	add	fp, #12
10b54     A7 1E 62 FC | 	wrlong	local01, fp
10b58     04 4E 05 F1 | 	add	fp, #4
10b5c     A7 1C 62 FC | 	wrlong	arg06, fp
10b60     04 4E 05 F1 | 	add	fp, #4
10b64     A7 20 62 FC | 	wrlong	local02, fp
10b68     14 4E 85 F1 | 	sub	fp, #20
10b6c     24 7C BF FD | 	call	#_pop
10b70     A7 FA 61 FC | 	wrlong	result1, fp
10b74     04 4E 05 F1 | 	add	fp, #4
10b78     A7 FC 61 FC | 	wrlong	result2, fp
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 FE 61 FC | 	wrlong	result3, fp
10b84                 | ' 
10b84                 | ' 
10b84                 | ' 
10b84                 | ' t2=pop()
10b84                 | ' t1=pop()
10b84                 | ' 
10b84                 | ' 
10b84                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
10b84     08 4E 85 F1 | 	sub	fp, #8
10b88     1C FE 0D F2 | 	cmp	result3, #28 wz
10b8c     08 4E 05 51 |  if_ne	add	fp, #8
10b90     A7 20 02 5B |  if_ne	rdlong	local02, fp
10b94     08 4E 85 51 |  if_ne	sub	fp, #8
10b98     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
10b9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
10ba0     18 4E 05 A1 |  if_e	add	fp, #24
10ba4     A7 1E 62 AC |  if_e	wrlong	local01, fp
10ba8     18 4E 85 A1 |  if_e	sub	fp, #24
10bac     14 00 90 AD |  if_e	jmp	#LR__1460
10bb0     A7 12 02 F6 | 	mov	arg01, fp
10bb4     6C D4 BF FD | 	call	#_converttoint
10bb8     18 4E 05 F1 | 	add	fp, #24
10bbc     A7 FA 61 FC | 	wrlong	result1, fp
10bc0     18 4E 85 F1 | 	sub	fp, #24
10bc4                 | LR__1460
10bc4     1C 4E 05 F1 | 	add	fp, #28
10bc8     A7 FE 48 FC | 	wrbyte	#127, fp
10bcc     01 4E 05 F1 | 	add	fp, #1
10bd0     A7 00 49 FC | 	wrbyte	#128, fp
10bd4     01 4E 85 F1 | 	sub	fp, #1
10bd8     A7 14 02 F6 | 	mov	arg02, fp
10bdc     04 4E 85 F1 | 	sub	fp, #4
10be0     A7 16 02 FB | 	rdlong	arg03, fp
10be4     18 4E 85 F1 | 	sub	fp, #24
10be8     01 16 66 F0 | 	shl	arg03, #1
10bec     07 12 06 F6 | 	mov	arg01, #7
10bf0     0E 18 C6 F9 | 	decod	arg04, #14
10bf4     02 1A 06 F6 | 	mov	arg05, #2
10bf8     00 1C 06 F6 | 	mov	arg06, #0
10bfc     0B 00 00 FF 
10c00     C0 E4 05 F1 | 	add	objptr, ##5824
10c04     74 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
10c08     0B 00 00 FF 
10c0c     C0 E4 85 F1 | 	sub	objptr, ##5824
10c10     0C 4E 05 F1 | 	add	fp, #12
10c14     A7 12 02 F6 | 	mov	arg01, fp
10c18     0C 4E 85 F1 | 	sub	fp, #12
10c1c     0C 7C BF FD | 	call	#_push
10c20     F4 F6 BF FD | 	call	#_do_waitms
10c24     07 12 06 F6 | 	mov	arg01, #7
10c28     0B 00 00 FF 
10c2c     C0 E4 05 F1 | 	add	objptr, ##5824
10c30     FC 3F B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
10c34     0B 00 00 FF 
10c38     C0 E4 85 F1 | 	sub	objptr, ##5824
10c3c     A7 F0 03 F6 | 	mov	ptra, fp
10c40     B2 00 A0 FD | 	call	#popregs_
10c44                 | _do_beep_ret
10c44     2D 00 64 FD | 	ret
10c48                 | 
10c48                 | ' 
10c48                 | ' sub do_no_command
10c48                 | _do_no_command
10c48     17 12 06 F6 | 	mov	arg01, #23
10c4c     D0 0D B0 FD | 	call	#_printerror
10c50                 | _do_no_command_ret
10c50     2D 00 64 FD | 	ret
10c54                 | 
10c54                 | ' 
10c54                 | ' sub do_negative
10c54                 | _do_negative
10c54     02 4A 05 F6 | 	mov	COUNT_, #2
10c58     A8 00 A0 FD | 	call	#pushregs_
10c5c     0C F0 07 F1 | 	add	ptra, #12
10c60     30 7B BF FD | 	call	#_pop
10c64     FF 1E 02 F6 | 	mov	local01, result3
10c68     A7 FA 61 FC | 	wrlong	result1, fp
10c6c     04 4E 05 F1 | 	add	fp, #4
10c70     A7 FC 61 FC | 	wrlong	result2, fp
10c74     04 4E 05 F1 | 	add	fp, #4
10c78     A7 1E 62 FC | 	wrlong	local01, fp
10c7c                 | ' t1=pop()
10c7c                 | ' if t1.result_type=result_int then 
10c7c     08 4E 85 F1 | 	sub	fp, #8
10c80     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c84     A7 20 02 AB |  if_e	rdlong	local02, fp
10c88     10 1F 62 A6 |  if_e	neg	local01, local02
10c8c     A7 1E 62 AC |  if_e	wrlong	local01, fp
10c90     5C 00 90 AD |  if_e	jmp	#LR__1472
10c94     08 4E 05 F1 | 	add	fp, #8
10c98     A7 1E 02 FB | 	rdlong	local01, fp
10c9c     08 4E 85 F1 | 	sub	fp, #8
10ca0     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ca4     1C 00 90 5D |  if_ne	jmp	#LR__1470
10ca8     A7 20 02 FB | 	rdlong	local02, fp
10cac     10 1F 62 F6 | 	neg	local01, local02
10cb0     A7 1E 62 FC | 	wrlong	local01, fp
10cb4     08 4E 05 F1 | 	add	fp, #8
10cb8     A7 38 68 FC | 	wrlong	#28, fp
10cbc     08 4E 85 F1 | 	sub	fp, #8
10cc0     2C 00 90 FD | 	jmp	#LR__1471
10cc4                 | LR__1470
10cc4     08 4E 05 F1 | 	add	fp, #8
10cc8     A7 1E 02 FB | 	rdlong	local01, fp
10ccc     08 4E 85 F1 | 	sub	fp, #8
10cd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
10cd4     A7 FA 01 AB |  if_e	rdlong	result1, fp
10cd8     1F FA E5 A4 |  if_e	bitnot	result1, #31
10cdc     A7 FA 61 AC |  if_e	wrlong	result1, fp
10ce0     08 4E 05 51 |  if_ne	add	fp, #8
10ce4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10ce8     08 4E 85 51 |  if_ne	sub	fp, #8
10cec     A7 50 68 5C |  if_ne	wrlong	#40, fp
10cf0                 | LR__1471
10cf0                 | LR__1472
10cf0     A7 12 02 F6 | 	mov	arg01, fp
10cf4     34 7B BF FD | 	call	#_push
10cf8     A7 F0 03 F6 | 	mov	ptra, fp
10cfc     B2 00 A0 FD | 	call	#popregs_
10d00                 | _do_negative_ret
10d00     2D 00 64 FD | 	ret
10d04                 | 
10d04                 | ' 
10d04                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
10d04                 | ' 
10d04                 | ' ''----------------------------------------------------------------------------------------------------
10d04                 | ' ''------------------ Initialization procedures -------------------------------------------------------
10d04                 | ' ''----------------------------------------------------------------------------------------------------
10d04                 | ' 
10d04                 | ' ''--------------------------- Command function pointers
10d04                 | ' 
10d04                 | ' sub init_commands
10d04                 | _init_commands
10d04                 | ' 
10d04                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
10d04     00 00 06 F6 | 	mov	_var01, #0
10d08     97 16 48 FB | 	callpa	#(@LR__1481-@LR__1480)>>2,fcache_load_ptr_
10d0c                 | LR__1480
10d0c     00 FB 01 F6 | 	mov	result1, _var01
10d10     02 FA 65 F0 | 	shl	result1, #2
10d14     3A 00 00 FF 
10d18     24 E4 05 F1 | 	add	objptr, ##29732
10d1c     F2 FA 01 F1 | 	add	result1, objptr
10d20     3A 00 00 FF 
10d24     24 E4 85 F1 | 	sub	objptr, ##29732
10d28     FD E4 61 FC | 	wrlong	objptr, result1
10d2c     01 00 06 F1 | 	add	_var01, #1
10d30     00 01 56 F2 | 	cmps	_var01, #256 wc
10d34     D4 FF 9F CD |  if_b	jmp	#LR__1480
10d38                 | LR__1481
10d38     F2 FA 01 F6 | 	mov	result1, objptr
10d3c     14 FA 25 F4 | 	bith	result1, #20
10d40     3A 00 00 FF 
10d44     28 E4 05 F1 | 	add	objptr, ##29736
10d48     F2 FA 61 FC | 	wrlong	result1, objptr
10d4c     3A 00 00 FF 
10d50     28 E4 85 F1 | 	sub	objptr, ##29736
10d54     F2 FA 01 F6 | 	mov	result1, objptr
10d58     15 FA 25 F4 | 	bith	result1, #21
10d5c     3A 00 00 FF 
10d60     2C E4 05 F1 | 	add	objptr, ##29740
10d64     F2 FA 61 FC | 	wrlong	result1, objptr
10d68     3A 00 00 FF 
10d6c     2C E4 85 F1 | 	sub	objptr, ##29740
10d70     F2 FA 01 F6 | 	mov	result1, objptr
10d74     34 FA 25 F4 | 	bith	result1, #52
10d78     3A 00 00 FF 
10d7c     30 E4 05 F1 | 	add	objptr, ##29744
10d80     F2 FA 61 FC | 	wrlong	result1, objptr
10d84     3A 00 00 FF 
10d88     30 E4 85 F1 | 	sub	objptr, ##29744
10d8c     F2 FA 01 F6 | 	mov	result1, objptr
10d90     16 FA 25 F4 | 	bith	result1, #22
10d94     3A 00 00 FF 
10d98     38 E4 05 F1 | 	add	objptr, ##29752
10d9c     F2 FA 61 FC | 	wrlong	result1, objptr
10da0     3A 00 00 FF 
10da4     38 E4 85 F1 | 	sub	objptr, ##29752
10da8     F2 FA 01 F6 | 	mov	result1, objptr
10dac     00 28 00 FF 
10db0     00 FA 45 F5 | 	or	result1, ##5242880
10db4     3A 00 00 FF 
10db8     3C E4 05 F1 | 	add	objptr, ##29756
10dbc     F2 FA 61 FC | 	wrlong	result1, objptr
10dc0     3A 00 00 FF 
10dc4     3C E4 85 F1 | 	sub	objptr, ##29756
10dc8     F2 FA 01 F6 | 	mov	result1, objptr
10dcc     35 FA 25 F4 | 	bith	result1, #53
10dd0     3A 00 00 FF 
10dd4     40 E4 05 F1 | 	add	objptr, ##29760
10dd8     F2 FA 61 FC | 	wrlong	result1, objptr
10ddc     3A 00 00 FF 
10de0     40 E4 85 F1 | 	sub	objptr, ##29760
10de4     F2 FA 01 F6 | 	mov	result1, objptr
10de8     54 FA 25 F4 | 	bith	result1, #84
10dec     3A 00 00 FF 
10df0     44 E4 05 F1 | 	add	objptr, ##29764
10df4     F2 FA 61 FC | 	wrlong	result1, objptr
10df8     3A 00 00 FF 
10dfc     44 E4 85 F1 | 	sub	objptr, ##29764
10e00     F2 FA 01 F6 | 	mov	result1, objptr
10e04     17 FA 25 F4 | 	bith	result1, #23
10e08     3A 00 00 FF 
10e0c     48 E4 05 F1 | 	add	objptr, ##29768
10e10     F2 FA 61 FC | 	wrlong	result1, objptr
10e14     3A 00 00 FF 
10e18     48 E4 85 F1 | 	sub	objptr, ##29768
10e1c     F2 FA 01 F6 | 	mov	result1, objptr
10e20     00 48 00 FF 
10e24     00 FA 45 F5 | 	or	result1, ##9437184
10e28     3A 00 00 FF 
10e2c     4C E4 05 F1 | 	add	objptr, ##29772
10e30     F2 FA 61 FC | 	wrlong	result1, objptr
10e34     3A 00 00 FF 
10e38     4C E4 85 F1 | 	sub	objptr, ##29772
10e3c     F2 FA 01 F6 | 	mov	result1, objptr
10e40     00 50 00 FF 
10e44     00 FA 45 F5 | 	or	result1, ##10485760
10e48     3A 00 00 FF 
10e4c     50 E4 05 F1 | 	add	objptr, ##29776
10e50     F2 FA 61 FC | 	wrlong	result1, objptr
10e54     3A 00 00 FF 
10e58     50 E4 85 F1 | 	sub	objptr, ##29776
10e5c     F2 FA 01 F6 | 	mov	result1, objptr
10e60     00 58 00 FF 
10e64     00 FA 45 F5 | 	or	result1, ##11534336
10e68     3A 00 00 FF 
10e6c     54 E4 05 F1 | 	add	objptr, ##29780
10e70     F2 FA 61 FC | 	wrlong	result1, objptr
10e74     3A 00 00 FF 
10e78     54 E4 85 F1 | 	sub	objptr, ##29780
10e7c     F2 FA 01 F6 | 	mov	result1, objptr
10e80     36 FA 25 F4 | 	bith	result1, #54
10e84     3A 00 00 FF 
10e88     68 E4 05 F1 | 	add	objptr, ##29800
10e8c     F2 FA 61 FC | 	wrlong	result1, objptr
10e90     3A 00 00 FF 
10e94     68 E4 85 F1 | 	sub	objptr, ##29800
10e98     F2 FA 01 F6 | 	mov	result1, objptr
10e9c     00 68 00 FF 
10ea0     00 FA 45 F5 | 	or	result1, ##13631488
10ea4     3A 00 00 FF 
10ea8     98 E4 05 F1 | 	add	objptr, ##29848
10eac     F2 FA 61 FC | 	wrlong	result1, objptr
10eb0     3A 00 00 FF 
10eb4     98 E4 85 F1 | 	sub	objptr, ##29848
10eb8     F2 FA 01 F6 | 	mov	result1, objptr
10ebc     00 68 00 FF 
10ec0     00 FA 45 F5 | 	or	result1, ##13631488
10ec4     3A 00 00 FF 
10ec8     94 E4 05 F1 | 	add	objptr, ##29844
10ecc     F2 FA 61 FC | 	wrlong	result1, objptr
10ed0     3A 00 00 FF 
10ed4     94 E4 85 F1 | 	sub	objptr, ##29844
10ed8     F2 FA 01 F6 | 	mov	result1, objptr
10edc     00 68 00 FF 
10ee0     00 FA 45 F5 | 	or	result1, ##13631488
10ee4     3A 00 00 FF 
10ee8     9C E4 05 F1 | 	add	objptr, ##29852
10eec     F2 FA 61 FC | 	wrlong	result1, objptr
10ef0     3A 00 00 FF 
10ef4     9C E4 85 F1 | 	sub	objptr, ##29852
10ef8     F2 FA 01 F6 | 	mov	result1, objptr
10efc     00 68 00 FF 
10f00     00 FA 45 F5 | 	or	result1, ##13631488
10f04     3A 00 00 FF 
10f08     A0 E4 05 F1 | 	add	objptr, ##29856
10f0c     F2 FA 61 FC | 	wrlong	result1, objptr
10f10     3A 00 00 FF 
10f14     A0 E4 85 F1 | 	sub	objptr, ##29856
10f18     F2 FA 01 F6 | 	mov	result1, objptr
10f1c     00 68 00 FF 
10f20     00 FA 45 F5 | 	or	result1, ##13631488
10f24     3A 00 00 FF 
10f28     D0 E4 05 F1 | 	add	objptr, ##29904
10f2c     F2 FA 61 FC | 	wrlong	result1, objptr
10f30     3A 00 00 FF 
10f34     D0 E4 85 F1 | 	sub	objptr, ##29904
10f38     F2 FA 01 F6 | 	mov	result1, objptr
10f3c     55 FA 25 F4 | 	bith	result1, #85
10f40     3A 00 00 FF 
10f44     80 E4 05 F1 | 	add	objptr, ##29824
10f48     F2 FA 61 FC | 	wrlong	result1, objptr
10f4c     3A 00 00 FF 
10f50     80 E4 85 F1 | 	sub	objptr, ##29824
10f54     F2 FA 01 F6 | 	mov	result1, objptr
10f58     00 68 00 FF 
10f5c     00 FA 45 F5 | 	or	result1, ##13631488
10f60     3A 00 00 FF 
10f64     A4 E4 05 F1 | 	add	objptr, ##29860
10f68     F2 FA 61 FC | 	wrlong	result1, objptr
10f6c     3A 00 00 FF 
10f70     A4 E4 85 F1 | 	sub	objptr, ##29860
10f74     F2 FA 01 F6 | 	mov	result1, objptr
10f78     00 68 00 FF 
10f7c     00 FA 45 F5 | 	or	result1, ##13631488
10f80     3A 00 00 FF 
10f84     A8 E4 05 F1 | 	add	objptr, ##29864
10f88     F2 FA 61 FC | 	wrlong	result1, objptr
10f8c     3A 00 00 FF 
10f90     A8 E4 85 F1 | 	sub	objptr, ##29864
10f94     F2 FA 01 F6 | 	mov	result1, objptr
10f98     00 68 00 FF 
10f9c     00 FA 45 F5 | 	or	result1, ##13631488
10fa0     3A 00 00 FF 
10fa4     AC E4 05 F1 | 	add	objptr, ##29868
10fa8     F2 FA 61 FC | 	wrlong	result1, objptr
10fac     3A 00 00 FF 
10fb0     AC E4 85 F1 | 	sub	objptr, ##29868
10fb4     F2 FA 01 F6 | 	mov	result1, objptr
10fb8     74 FA 25 F4 | 	bith	result1, #116
10fbc     3A 00 00 FF 
10fc0     24 E5 05 F1 | 	add	objptr, ##29988
10fc4     F2 FA 61 FC | 	wrlong	result1, objptr
10fc8     3A 00 00 FF 
10fcc     24 E5 85 F1 | 	sub	objptr, ##29988
10fd0     F2 FA 01 F6 | 	mov	result1, objptr
10fd4     18 FA 25 F4 | 	bith	result1, #24
10fd8     3A 00 00 FF 
10fdc     28 E5 05 F1 | 	add	objptr, ##29992
10fe0     F2 FA 61 FC | 	wrlong	result1, objptr
10fe4     3A 00 00 FF 
10fe8     28 E5 85 F1 | 	sub	objptr, ##29992
10fec     F2 FA 01 F6 | 	mov	result1, objptr
10ff0     00 88 00 FF 
10ff4     00 FA 45 F5 | 	or	result1, ##17825792
10ff8     3A 00 00 FF 
10ffc     2C E5 05 F1 | 	add	objptr, ##29996
11000     F2 FA 61 FC | 	wrlong	result1, objptr
11004     3A 00 00 FF 
11008     2C E5 85 F1 | 	sub	objptr, ##29996
1100c     F2 FA 01 F6 | 	mov	result1, objptr
11010     00 90 00 FF 
11014     00 FA 45 F5 | 	or	result1, ##18874368
11018     3A 00 00 FF 
1101c     30 E5 05 F1 | 	add	objptr, ##30000
11020     F2 FA 61 FC | 	wrlong	result1, objptr
11024     3A 00 00 FF 
11028     30 E5 85 F1 | 	sub	objptr, ##30000
1102c     F2 FA 01 F6 | 	mov	result1, objptr
11030     00 98 00 FF 
11034     00 FA 45 F5 | 	or	result1, ##19922944
11038     3A 00 00 FF 
1103c     34 E5 05 F1 | 	add	objptr, ##30004
11040     F2 FA 61 FC | 	wrlong	result1, objptr
11044     3A 00 00 FF 
11048     34 E5 85 F1 | 	sub	objptr, ##30004
1104c     F2 FA 01 F6 | 	mov	result1, objptr
11050     00 A0 00 FF 
11054     00 FA 45 F5 | 	or	result1, ##20971520
11058     3A 00 00 FF 
1105c     38 E5 05 F1 | 	add	objptr, ##30008
11060     F2 FA 61 FC | 	wrlong	result1, objptr
11064     3A 00 00 FF 
11068     38 E5 85 F1 | 	sub	objptr, ##30008
1106c     F2 FA 01 F6 | 	mov	result1, objptr
11070     00 A8 00 FF 
11074     00 FA 45 F5 | 	or	result1, ##22020096
11078     3A 00 00 FF 
1107c     3C E5 05 F1 | 	add	objptr, ##30012
11080     F2 FA 61 FC | 	wrlong	result1, objptr
11084     3A 00 00 FF 
11088     3C E5 85 F1 | 	sub	objptr, ##30012
1108c     F2 FA 01 F6 | 	mov	result1, objptr
11090     00 B0 00 FF 
11094     00 FA 45 F5 | 	or	result1, ##23068672
11098     3A 00 00 FF 
1109c     40 E5 05 F1 | 	add	objptr, ##30016
110a0     F2 FA 61 FC | 	wrlong	result1, objptr
110a4     3A 00 00 FF 
110a8     40 E5 85 F1 | 	sub	objptr, ##30016
110ac     F2 FA 01 F6 | 	mov	result1, objptr
110b0     00 B8 00 FF 
110b4     00 FA 45 F5 | 	or	result1, ##24117248
110b8     3A 00 00 FF 
110bc     44 E5 05 F1 | 	add	objptr, ##30020
110c0     F2 FA 61 FC | 	wrlong	result1, objptr
110c4     3A 00 00 FF 
110c8     44 E5 85 F1 | 	sub	objptr, ##30020
110cc     F2 FA 01 F6 | 	mov	result1, objptr
110d0     37 FA 25 F4 | 	bith	result1, #55
110d4     3A 00 00 FF 
110d8     48 E5 05 F1 | 	add	objptr, ##30024
110dc     F2 FA 61 FC | 	wrlong	result1, objptr
110e0     3A 00 00 FF 
110e4     48 E5 85 F1 | 	sub	objptr, ##30024
110e8     F2 FA 01 F6 | 	mov	result1, objptr
110ec     00 C8 00 FF 
110f0     00 FA 45 F5 | 	or	result1, ##26214400
110f4     3A 00 00 FF 
110f8     4C E5 05 F1 | 	add	objptr, ##30028
110fc     F2 FA 61 FC | 	wrlong	result1, objptr
11100     3A 00 00 FF 
11104     4C E5 85 F1 | 	sub	objptr, ##30028
11108     F2 FA 01 F6 | 	mov	result1, objptr
1110c     00 D0 00 FF 
11110     00 FA 45 F5 | 	or	result1, ##27262976
11114     3A 00 00 FF 
11118     50 E5 05 F1 | 	add	objptr, ##30032
1111c     F2 FA 61 FC | 	wrlong	result1, objptr
11120     3A 00 00 FF 
11124     50 E5 85 F1 | 	sub	objptr, ##30032
11128     F2 FA 01 F6 | 	mov	result1, objptr
1112c     00 D8 00 FF 
11130     00 FA 45 F5 | 	or	result1, ##28311552
11134     3A 00 00 FF 
11138     54 E5 05 F1 | 	add	objptr, ##30036
1113c     F2 FA 61 FC | 	wrlong	result1, objptr
11140     3A 00 00 FF 
11144     54 E5 85 F1 | 	sub	objptr, ##30036
11148     F2 FA 01 F6 | 	mov	result1, objptr
1114c     56 FA 25 F4 | 	bith	result1, #86
11150     3A 00 00 FF 
11154     58 E5 05 F1 | 	add	objptr, ##30040
11158     F2 FA 61 FC | 	wrlong	result1, objptr
1115c     3A 00 00 FF 
11160     58 E5 85 F1 | 	sub	objptr, ##30040
11164     F2 FA 01 F6 | 	mov	result1, objptr
11168     00 E8 00 FF 
1116c     00 FA 45 F5 | 	or	result1, ##30408704
11170     3C 00 00 FF 
11174     20 E4 05 F1 | 	add	objptr, ##30752
11178     F2 FA 61 FC | 	wrlong	result1, objptr
1117c     3C 00 00 FF 
11180     20 E4 85 F1 | 	sub	objptr, ##30752
11184     F2 FA 01 F6 | 	mov	result1, objptr
11188     75 FA 25 F4 | 	bith	result1, #117
1118c     3A 00 00 FF 
11190     5C E5 05 F1 | 	add	objptr, ##30044
11194     F2 FA 61 FC | 	wrlong	result1, objptr
11198     3A 00 00 FF 
1119c     5C E5 85 F1 | 	sub	objptr, ##30044
111a0     F2 FA 01 F6 | 	mov	result1, objptr
111a4     94 FA 25 F4 | 	bith	result1, #148
111a8     3A 00 00 FF 
111ac     70 E5 05 F1 | 	add	objptr, ##30064
111b0     F2 FA 61 FC | 	wrlong	result1, objptr
111b4     3A 00 00 FF 
111b8     70 E5 85 F1 | 	sub	objptr, ##30064
111bc     F2 FA 01 F6 | 	mov	result1, objptr
111c0     19 FA 25 F4 | 	bith	result1, #25
111c4     3A 00 00 FF 
111c8     60 E5 05 F1 | 	add	objptr, ##30048
111cc     F2 FA 61 FC | 	wrlong	result1, objptr
111d0     3A 00 00 FF 
111d4     60 E5 85 F1 | 	sub	objptr, ##30048
111d8     F2 FA 01 F6 | 	mov	result1, objptr
111dc     00 08 01 FF 
111e0     00 FA 45 F5 | 	or	result1, ##34603008
111e4     3A 00 00 FF 
111e8     7C E4 05 F1 | 	add	objptr, ##29820
111ec     F2 FA 61 FC | 	wrlong	result1, objptr
111f0     3A 00 00 FF 
111f4     7C E4 85 F1 | 	sub	objptr, ##29820
111f8     F2 FA 01 F6 | 	mov	result1, objptr
111fc     00 10 01 FF 
11200     00 FA 45 F5 | 	or	result1, ##35651584
11204     3A 00 00 FF 
11208     64 E5 05 F1 | 	add	objptr, ##30052
1120c     F2 FA 61 FC | 	wrlong	result1, objptr
11210     3A 00 00 FF 
11214     64 E5 85 F1 | 	sub	objptr, ##30052
11218     F2 FA 01 F6 | 	mov	result1, objptr
1121c     00 18 01 FF 
11220     00 FA 45 F5 | 	or	result1, ##36700160
11224     3A 00 00 FF 
11228     68 E5 05 F1 | 	add	objptr, ##30056
1122c     F2 FA 61 FC | 	wrlong	result1, objptr
11230     3A 00 00 FF 
11234     68 E5 85 F1 | 	sub	objptr, ##30056
11238     F2 FA 01 F6 | 	mov	result1, objptr
1123c     00 20 01 FF 
11240     00 FA 45 F5 | 	or	result1, ##37748736
11244     3A 00 00 FF 
11248     6C E5 05 F1 | 	add	objptr, ##30060
1124c     F2 FA 61 FC | 	wrlong	result1, objptr
11250     3A 00 00 FF 
11254     6C E5 85 F1 | 	sub	objptr, ##30060
11258     F2 FA 01 F6 | 	mov	result1, objptr
1125c     00 28 01 FF 
11260     00 FA 45 F5 | 	or	result1, ##38797312
11264     3A 00 00 FF 
11268     78 E5 05 F1 | 	add	objptr, ##30072
1126c     F2 FA 61 FC | 	wrlong	result1, objptr
11270     3A 00 00 FF 
11274     78 E5 85 F1 | 	sub	objptr, ##30072
11278     F2 FA 01 F6 | 	mov	result1, objptr
1127c     00 30 01 FF 
11280     00 FA 45 F5 | 	or	result1, ##39845888
11284     3A 00 00 FF 
11288     7C E5 05 F1 | 	add	objptr, ##30076
1128c     F2 FA 61 FC | 	wrlong	result1, objptr
11290     3A 00 00 FF 
11294     7C E5 85 F1 | 	sub	objptr, ##30076
11298     F2 FA 01 F6 | 	mov	result1, objptr
1129c     00 38 01 FF 
112a0     00 FA 45 F5 | 	or	result1, ##40894464
112a4     3A 00 00 FF 
112a8     80 E5 05 F1 | 	add	objptr, ##30080
112ac     F2 FA 61 FC | 	wrlong	result1, objptr
112b0     3A 00 00 FF 
112b4     80 E5 85 F1 | 	sub	objptr, ##30080
112b8     F2 FA 01 F6 | 	mov	result1, objptr
112bc     00 40 01 FF 
112c0     00 FA 45 F5 | 	or	result1, ##41943040
112c4     3A 00 00 FF 
112c8     84 E5 05 F1 | 	add	objptr, ##30084
112cc     F2 FA 61 FC | 	wrlong	result1, objptr
112d0     3A 00 00 FF 
112d4     84 E5 85 F1 | 	sub	objptr, ##30084
112d8     F2 FA 01 F6 | 	mov	result1, objptr
112dc     00 48 01 FF 
112e0     00 FA 45 F5 | 	or	result1, ##42991616
112e4     3A 00 00 FF 
112e8     8C E5 05 F1 | 	add	objptr, ##30092
112ec     F2 FA 61 FC | 	wrlong	result1, objptr
112f0     3A 00 00 FF 
112f4     8C E5 85 F1 | 	sub	objptr, ##30092
112f8     F2 FA 01 F6 | 	mov	result1, objptr
112fc     00 50 01 FF 
11300     00 FA 45 F5 | 	or	result1, ##44040192
11304     3A 00 00 FF 
11308     90 E5 05 F1 | 	add	objptr, ##30096
1130c     F2 FA 61 FC | 	wrlong	result1, objptr
11310     3A 00 00 FF 
11314     90 E5 85 F1 | 	sub	objptr, ##30096
11318     F2 FA 01 F6 | 	mov	result1, objptr
1131c     00 58 01 FF 
11320     00 FA 45 F5 | 	or	result1, ##45088768
11324     3A 00 00 FF 
11328     90 E4 05 F1 | 	add	objptr, ##29840
1132c     F2 FA 61 FC | 	wrlong	result1, objptr
11330     3A 00 00 FF 
11334     90 E4 85 F1 | 	sub	objptr, ##29840
11338     F2 FA 01 F6 | 	mov	result1, objptr
1133c     00 60 01 FF 
11340     00 FA 45 F5 | 	or	result1, ##46137344
11344     3A 00 00 FF 
11348     C0 E4 05 F1 | 	add	objptr, ##29888
1134c     F2 FA 61 FC | 	wrlong	result1, objptr
11350     3A 00 00 FF 
11354     C0 E4 85 F1 | 	sub	objptr, ##29888
11358     F2 FA 01 F6 | 	mov	result1, objptr
1135c     00 68 01 FF 
11360     00 FA 45 F5 | 	or	result1, ##47185920
11364     3A 00 00 FF 
11368     BC E4 05 F1 | 	add	objptr, ##29884
1136c     F2 FA 61 FC | 	wrlong	result1, objptr
11370     3A 00 00 FF 
11374     BC E4 85 F1 | 	sub	objptr, ##29884
11378     F2 FA 01 F6 | 	mov	result1, objptr
1137c     00 70 01 FF 
11380     00 FA 45 F5 | 	or	result1, ##48234496
11384     3A 00 00 FF 
11388     60 E4 05 F1 | 	add	objptr, ##29792
1138c     F2 FA 61 FC | 	wrlong	result1, objptr
11390     3A 00 00 FF 
11394     60 E4 85 F1 | 	sub	objptr, ##29792
11398     F2 FA 01 F6 | 	mov	result1, objptr
1139c     00 78 01 FF 
113a0     00 FA 45 F5 | 	or	result1, ##49283072
113a4     3A 00 00 FF 
113a8     64 E4 05 F1 | 	add	objptr, ##29796
113ac     F2 FA 61 FC | 	wrlong	result1, objptr
113b0     3A 00 00 FF 
113b4     64 E4 85 F1 | 	sub	objptr, ##29796
113b8     F2 FA 01 F6 | 	mov	result1, objptr
113bc     38 FA 25 F4 | 	bith	result1, #56
113c0     3A 00 00 FF 
113c4     CC E4 05 F1 | 	add	objptr, ##29900
113c8     F2 FA 61 FC | 	wrlong	result1, objptr
113cc     3A 00 00 FF 
113d0     CC E4 85 F1 | 	sub	objptr, ##29900
113d4     F2 FA 01 F6 | 	mov	result1, objptr
113d8     00 88 01 FF 
113dc     00 FA 45 F5 | 	or	result1, ##51380224
113e0     3A 00 00 FF 
113e4     74 E5 05 F1 | 	add	objptr, ##30068
113e8     F2 FA 61 FC | 	wrlong	result1, objptr
113ec     3A 00 00 FF 
113f0     74 E5 85 F1 | 	sub	objptr, ##30068
113f4     F2 FA 01 F6 | 	mov	result1, objptr
113f8     00 90 01 FF 
113fc     00 FA 45 F5 | 	or	result1, ##52428800
11400     3A 00 00 FF 
11404     88 E5 05 F1 | 	add	objptr, ##30088
11408     F2 FA 61 FC | 	wrlong	result1, objptr
1140c     3A 00 00 FF 
11410     88 E5 85 F1 | 	sub	objptr, ##30088
11414     F2 FA 01 F6 | 	mov	result1, objptr
11418     00 98 01 FF 
1141c     00 FA 45 F5 | 	or	result1, ##53477376
11420     3A 00 00 FF 
11424     94 E5 05 F1 | 	add	objptr, ##30100
11428     F2 FA 61 FC | 	wrlong	result1, objptr
1142c     3A 00 00 FF 
11430     94 E5 85 F1 | 	sub	objptr, ##30100
11434     F2 FA 01 F6 | 	mov	result1, objptr
11438     00 A0 01 FF 
1143c     00 FA 45 F5 | 	or	result1, ##54525952
11440     3A 00 00 FF 
11444     98 E5 05 F1 | 	add	objptr, ##30104
11448     F2 FA 61 FC | 	wrlong	result1, objptr
1144c     3A 00 00 FF 
11450     98 E5 85 F1 | 	sub	objptr, ##30104
11454     F2 FA 01 F6 | 	mov	result1, objptr
11458     00 A8 01 FF 
1145c     00 FA 45 F5 | 	or	result1, ##55574528
11460     3A 00 00 FF 
11464     9C E5 05 F1 | 	add	objptr, ##30108
11468     F2 FA 61 FC | 	wrlong	result1, objptr
1146c     3A 00 00 FF 
11470     9C E5 85 F1 | 	sub	objptr, ##30108
11474     F2 FA 01 F6 | 	mov	result1, objptr
11478     00 B0 01 FF 
1147c     00 FA 45 F5 | 	or	result1, ##56623104
11480     3A 00 00 FF 
11484     A0 E5 05 F1 | 	add	objptr, ##30112
11488     F2 FA 61 FC | 	wrlong	result1, objptr
1148c     3A 00 00 FF 
11490     A0 E5 85 F1 | 	sub	objptr, ##30112
11494     F2 FA 01 F6 | 	mov	result1, objptr
11498     00 B8 01 FF 
1149c     00 FA 45 F5 | 	or	result1, ##57671680
114a0     3A 00 00 FF 
114a4     A4 E5 05 F1 | 	add	objptr, ##30116
114a8     F2 FA 61 FC | 	wrlong	result1, objptr
114ac     3A 00 00 FF 
114b0     A4 E5 85 F1 | 	sub	objptr, ##30116
114b4     F2 FA 01 F6 | 	mov	result1, objptr
114b8     57 FA 25 F4 | 	bith	result1, #87
114bc     3A 00 00 FF 
114c0     A8 E5 05 F1 | 	add	objptr, ##30120
114c4     F2 FA 61 FC | 	wrlong	result1, objptr
114c8     3A 00 00 FF 
114cc     A8 E5 85 F1 | 	sub	objptr, ##30120
114d0     F2 FA 01 F6 | 	mov	result1, objptr
114d4     94 FA 25 F4 | 	bith	result1, #148
114d8     3A 00 00 FF 
114dc     70 E5 05 F1 | 	add	objptr, ##30064
114e0     F2 FA 61 FC | 	wrlong	result1, objptr
114e4     3A 00 00 FF 
114e8     70 E5 85 F1 | 	sub	objptr, ##30064
114ec     F2 FA 01 F6 | 	mov	result1, objptr
114f0     00 C8 01 FF 
114f4     00 FA 45 F5 | 	or	result1, ##59768832
114f8     3A 00 00 FF 
114fc     B0 E5 05 F1 | 	add	objptr, ##30128
11500     F2 FA 61 FC | 	wrlong	result1, objptr
11504     3A 00 00 FF 
11508     B0 E5 85 F1 | 	sub	objptr, ##30128
1150c     F2 FA 01 F6 | 	mov	result1, objptr
11510     00 D0 01 FF 
11514     00 FA 45 F5 | 	or	result1, ##60817408
11518     3A 00 00 FF 
1151c     AC E5 05 F1 | 	add	objptr, ##30124
11520     F2 FA 61 FC | 	wrlong	result1, objptr
11524     3A 00 00 FF 
11528     AC E5 85 F1 | 	sub	objptr, ##30124
1152c     F2 FA 01 F6 | 	mov	result1, objptr
11530     00 D8 01 FF 
11534     00 FA 45 F5 | 	or	result1, ##61865984
11538     3A 00 00 FF 
1153c     C4 E5 05 F1 | 	add	objptr, ##30148
11540     F2 FA 61 FC | 	wrlong	result1, objptr
11544     3A 00 00 FF 
11548     C4 E5 85 F1 | 	sub	objptr, ##30148
1154c     F2 FA 01 F6 | 	mov	result1, objptr
11550     76 FA 25 F4 | 	bith	result1, #118
11554     3A 00 00 FF 
11558     C8 E5 05 F1 | 	add	objptr, ##30152
1155c     F2 FA 61 FC | 	wrlong	result1, objptr
11560     3A 00 00 FF 
11564     C8 E5 85 F1 | 	sub	objptr, ##30152
11568     F2 FA 01 F6 | 	mov	result1, objptr
1156c     00 E8 01 FF 
11570     00 FA 45 F5 | 	or	result1, ##63963136
11574     3A 00 00 FF 
11578     B4 E5 05 F1 | 	add	objptr, ##30132
1157c     F2 FA 61 FC | 	wrlong	result1, objptr
11580     3A 00 00 FF 
11584     B4 E5 85 F1 | 	sub	objptr, ##30132
11588     F2 FA 01 F6 | 	mov	result1, objptr
1158c     95 FA 25 F4 | 	bith	result1, #149
11590     3A 00 00 FF 
11594     B8 E5 05 F1 | 	add	objptr, ##30136
11598     F2 FA 61 FC | 	wrlong	result1, objptr
1159c     3A 00 00 FF 
115a0     B8 E5 85 F1 | 	sub	objptr, ##30136
115a4     F2 FA 01 F6 | 	mov	result1, objptr
115a8     B4 FA 25 F4 | 	bith	result1, #180
115ac     3A 00 00 FF 
115b0     BC E5 05 F1 | 	add	objptr, ##30140
115b4     F2 FA 61 FC | 	wrlong	result1, objptr
115b8     3A 00 00 FF 
115bc     BC E5 85 F1 | 	sub	objptr, ##30140
115c0     F2 FA 01 F6 | 	mov	result1, objptr
115c4     1A FA 25 F4 | 	bith	result1, #26
115c8     3A 00 00 FF 
115cc     C0 E5 05 F1 | 	add	objptr, ##30144
115d0     F2 FA 61 FC | 	wrlong	result1, objptr
115d4     3A 00 00 FF 
115d8     C0 E5 85 F1 | 	sub	objptr, ##30144
115dc     F2 FA 01 F6 | 	mov	result1, objptr
115e0     00 08 02 FF 
115e4     00 FA 45 F5 | 	or	result1, ##68157440
115e8     3A 00 00 FF 
115ec     D0 E5 05 F1 | 	add	objptr, ##30160
115f0     F2 FA 61 FC | 	wrlong	result1, objptr
115f4     3A 00 00 FF 
115f8     D0 E5 85 F1 | 	sub	objptr, ##30160
115fc     F2 FA 01 F6 | 	mov	result1, objptr
11600     00 10 02 FF 
11604     00 FA 45 F5 | 	or	result1, ##69206016
11608     3A 00 00 FF 
1160c     CC E5 05 F1 | 	add	objptr, ##30156
11610     F2 FA 61 FC | 	wrlong	result1, objptr
11614     3A 00 00 FF 
11618     CC E5 85 F1 | 	sub	objptr, ##30156
1161c     F2 FA 01 F6 | 	mov	result1, objptr
11620     00 18 02 FF 
11624     00 FA 45 F5 | 	or	result1, ##70254592
11628     3A 00 00 FF 
1162c     DC E5 05 F1 | 	add	objptr, ##30172
11630     F2 FA 61 FC | 	wrlong	result1, objptr
11634     3A 00 00 FF 
11638     DC E5 85 F1 | 	sub	objptr, ##30172
1163c     F2 FA 01 F6 | 	mov	result1, objptr
11640     00 20 02 FF 
11644     00 FA 45 F5 | 	or	result1, ##71303168
11648     3A 00 00 FF 
1164c     D8 E5 05 F1 | 	add	objptr, ##30168
11650     F2 FA 61 FC | 	wrlong	result1, objptr
11654     3A 00 00 FF 
11658     D8 E5 85 F1 | 	sub	objptr, ##30168
1165c     F2 FA 01 F6 | 	mov	result1, objptr
11660     00 28 02 FF 
11664     00 FA 45 F5 | 	or	result1, ##72351744
11668     3A 00 00 FF 
1166c     D4 E5 05 F1 | 	add	objptr, ##30164
11670     F2 FA 61 FC | 	wrlong	result1, objptr
11674     3A 00 00 FF 
11678     D4 E5 85 F1 | 	sub	objptr, ##30164
1167c     F2 FA 01 F6 | 	mov	result1, objptr
11680     00 30 02 FF 
11684     00 FA 45 F5 | 	or	result1, ##73400320
11688     3A 00 00 FF 
1168c     E0 E5 05 F1 | 	add	objptr, ##30176
11690     F2 FA 61 FC | 	wrlong	result1, objptr
11694     3A 00 00 FF 
11698     E0 E5 85 F1 | 	sub	objptr, ##30176
1169c     F2 FA 01 F6 | 	mov	result1, objptr
116a0     00 38 02 FF 
116a4     00 FA 45 F5 | 	or	result1, ##74448896
116a8     3A 00 00 FF 
116ac     E4 E5 05 F1 | 	add	objptr, ##30180
116b0     F2 FA 61 FC | 	wrlong	result1, objptr
116b4     3A 00 00 FF 
116b8     E4 E5 85 F1 | 	sub	objptr, ##30180
116bc     F2 FA 01 F6 | 	mov	result1, objptr
116c0     00 40 02 FF 
116c4     00 FA 45 F5 | 	or	result1, ##75497472
116c8     3A 00 00 FF 
116cc     78 E4 05 F1 | 	add	objptr, ##29816
116d0     F2 FA 61 FC | 	wrlong	result1, objptr
116d4     3A 00 00 FF 
116d8     78 E4 85 F1 | 	sub	objptr, ##29816
116dc     F2 FA 01 F6 | 	mov	result1, objptr
116e0     00 48 02 FF 
116e4     00 FA 45 F5 | 	or	result1, ##76546048
116e8     3A 00 00 FF 
116ec     E8 E5 05 F1 | 	add	objptr, ##30184
116f0     F2 FA 61 FC | 	wrlong	result1, objptr
116f4     3A 00 00 FF 
116f8     E8 E5 85 F1 | 	sub	objptr, ##30184
116fc                 | _init_commands_ret
116fc     2D 00 64 FD | 	ret
11700                 | 
11700                 | ' 
11700                 | ' ''--------------------------------Error strings -------------------------------------
11700                 | ' 
11700                 | ' sub init_error_strings
11700                 | _init_error_strings
11700     22 01 00 FF 
11704     83 01 06 F6 | 	mov	_var01, ##@LR__4345
11708     3C 00 00 FF 
1170c     40 E4 05 F1 | 	add	objptr, ##30784
11710     F2 00 62 FC | 	wrlong	_var01, objptr
11714     22 01 00 FF 
11718     84 01 06 F6 | 	mov	_var01, ##@LR__4346
1171c     04 E4 05 F1 | 	add	objptr, #4
11720     F2 00 62 FC | 	wrlong	_var01, objptr
11724     22 01 00 FF 
11728     A9 01 06 F6 | 	mov	_var01, ##@LR__4347
1172c     04 E4 05 F1 | 	add	objptr, #4
11730     F2 00 62 FC | 	wrlong	_var01, objptr
11734     22 01 00 FF 
11738     CA 01 06 F6 | 	mov	_var01, ##@LR__4348
1173c     04 E4 05 F1 | 	add	objptr, #4
11740     F2 00 62 FC | 	wrlong	_var01, objptr
11744     22 01 00 FF 
11748     E4 01 06 F6 | 	mov	_var01, ##@LR__4349
1174c     04 E4 05 F1 | 	add	objptr, #4
11750     F2 00 62 FC | 	wrlong	_var01, objptr
11754     23 01 00 FF 
11758     00 00 06 F6 | 	mov	_var01, ##@LR__4350
1175c     04 E4 05 F1 | 	add	objptr, #4
11760     F2 00 62 FC | 	wrlong	_var01, objptr
11764     23 01 00 FF 
11768     22 00 06 F6 | 	mov	_var01, ##@LR__4351
1176c     04 E4 05 F1 | 	add	objptr, #4
11770     F2 00 62 FC | 	wrlong	_var01, objptr
11774     23 01 00 FF 
11778     50 00 06 F6 | 	mov	_var01, ##@LR__4352
1177c     04 E4 05 F1 | 	add	objptr, #4
11780     F2 00 62 FC | 	wrlong	_var01, objptr
11784     23 01 00 FF 
11788     7B 00 06 F6 | 	mov	_var01, ##@LR__4353
1178c     04 E4 05 F1 | 	add	objptr, #4
11790     F2 00 62 FC | 	wrlong	_var01, objptr
11794     23 01 00 FF 
11798     94 00 06 F6 | 	mov	_var01, ##@LR__4354
1179c     04 E4 05 F1 | 	add	objptr, #4
117a0     F2 00 62 FC | 	wrlong	_var01, objptr
117a4     23 01 00 FF 
117a8     B5 00 06 F6 | 	mov	_var01, ##@LR__4355
117ac     04 E4 05 F1 | 	add	objptr, #4
117b0     F2 00 62 FC | 	wrlong	_var01, objptr
117b4     23 01 00 FF 
117b8     CC 00 06 F6 | 	mov	_var01, ##@LR__4356
117bc     04 E4 05 F1 | 	add	objptr, #4
117c0     F2 00 62 FC | 	wrlong	_var01, objptr
117c4     23 01 00 FF 
117c8     EA 00 06 F6 | 	mov	_var01, ##@LR__4357
117cc     04 E4 05 F1 | 	add	objptr, #4
117d0     F2 00 62 FC | 	wrlong	_var01, objptr
117d4     23 01 00 FF 
117d8     0E 01 06 F6 | 	mov	_var01, ##@LR__4358
117dc     04 E4 05 F1 | 	add	objptr, #4
117e0     F2 00 62 FC | 	wrlong	_var01, objptr
117e4     23 01 00 FF 
117e8     35 01 06 F6 | 	mov	_var01, ##@LR__4359
117ec     04 E4 05 F1 | 	add	objptr, #4
117f0     F2 00 62 FC | 	wrlong	_var01, objptr
117f4     23 01 00 FF 
117f8     51 01 06 F6 | 	mov	_var01, ##@LR__4360
117fc     04 E4 05 F1 | 	add	objptr, #4
11800     F2 00 62 FC | 	wrlong	_var01, objptr
11804     23 01 00 FF 
11808     62 01 06 F6 | 	mov	_var01, ##@LR__4361
1180c     04 E4 05 F1 | 	add	objptr, #4
11810     F2 00 62 FC | 	wrlong	_var01, objptr
11814     23 01 00 FF 
11818     72 01 06 F6 | 	mov	_var01, ##@LR__4362
1181c     04 E4 05 F1 | 	add	objptr, #4
11820     F2 00 62 FC | 	wrlong	_var01, objptr
11824     23 01 00 FF 
11828     8D 01 06 F6 | 	mov	_var01, ##@LR__4363
1182c     04 E4 05 F1 | 	add	objptr, #4
11830     F2 00 62 FC | 	wrlong	_var01, objptr
11834     23 01 00 FF 
11838     9F 01 06 F6 | 	mov	_var01, ##@LR__4364
1183c     04 E4 05 F1 | 	add	objptr, #4
11840     F2 00 62 FC | 	wrlong	_var01, objptr
11844     23 01 00 FF 
11848     B7 01 06 F6 | 	mov	_var01, ##@LR__4365
1184c     04 E4 05 F1 | 	add	objptr, #4
11850     F2 00 62 FC | 	wrlong	_var01, objptr
11854     23 01 00 FF 
11858     CB 01 06 F6 | 	mov	_var01, ##@LR__4366
1185c     04 E4 05 F1 | 	add	objptr, #4
11860     F2 00 62 FC | 	wrlong	_var01, objptr
11864     23 01 00 FF 
11868     DB 01 06 F6 | 	mov	_var01, ##@LR__4367
1186c     04 E4 05 F1 | 	add	objptr, #4
11870     F2 00 62 FC | 	wrlong	_var01, objptr
11874     23 01 00 FF 
11878     F8 01 06 F6 | 	mov	_var01, ##@LR__4368
1187c     04 E4 05 F1 | 	add	objptr, #4
11880     F2 00 62 FC | 	wrlong	_var01, objptr
11884     24 01 00 FF 
11888     09 00 06 F6 | 	mov	_var01, ##@LR__4369
1188c     04 E4 05 F1 | 	add	objptr, #4
11890     F2 00 62 FC | 	wrlong	_var01, objptr
11894     24 01 00 FF 
11898     1A 00 06 F6 | 	mov	_var01, ##@LR__4370
1189c     04 E4 05 F1 | 	add	objptr, #4
118a0     F2 00 62 FC | 	wrlong	_var01, objptr
118a4     24 01 00 FF 
118a8     45 00 06 F6 | 	mov	_var01, ##@LR__4371
118ac     04 E4 05 F1 | 	add	objptr, #4
118b0     F2 00 62 FC | 	wrlong	_var01, objptr
118b4     24 01 00 FF 
118b8     61 00 06 F6 | 	mov	_var01, ##@LR__4372
118bc     04 E4 05 F1 | 	add	objptr, #4
118c0     F2 00 62 FC | 	wrlong	_var01, objptr
118c4     24 01 00 FF 
118c8     77 00 06 F6 | 	mov	_var01, ##@LR__4373
118cc     04 E4 05 F1 | 	add	objptr, #4
118d0     F2 00 62 FC | 	wrlong	_var01, objptr
118d4     24 01 00 FF 
118d8     84 00 06 F6 | 	mov	_var01, ##@LR__4374
118dc     04 E4 05 F1 | 	add	objptr, #4
118e0     F2 00 62 FC | 	wrlong	_var01, objptr
118e4     24 01 00 FF 
118e8     96 00 06 F6 | 	mov	_var01, ##@LR__4375
118ec     04 E4 05 F1 | 	add	objptr, #4
118f0     F2 00 62 FC | 	wrlong	_var01, objptr
118f4     24 01 00 FF 
118f8     A7 00 06 F6 | 	mov	_var01, ##@LR__4376
118fc     04 E4 05 F1 | 	add	objptr, #4
11900     F2 00 62 FC | 	wrlong	_var01, objptr
11904     24 01 00 FF 
11908     C3 00 06 F6 | 	mov	_var01, ##@LR__4377
1190c     04 E4 05 F1 | 	add	objptr, #4
11910     F2 00 62 FC | 	wrlong	_var01, objptr
11914     24 01 00 FF 
11918     D4 00 06 F6 | 	mov	_var01, ##@LR__4378
1191c     04 E4 05 F1 | 	add	objptr, #4
11920     F2 00 62 FC | 	wrlong	_var01, objptr
11924     24 01 00 FF 
11928     E3 00 06 F6 | 	mov	_var01, ##@LR__4379
1192c     04 E4 05 F1 | 	add	objptr, #4
11930     F2 00 62 FC | 	wrlong	_var01, objptr
11934     24 01 00 FF 
11938     FE 00 06 F6 | 	mov	_var01, ##@LR__4380
1193c     04 E4 05 F1 | 	add	objptr, #4
11940     F2 00 62 FC | 	wrlong	_var01, objptr
11944     24 01 00 FF 
11948     32 01 06 F6 | 	mov	_var01, ##@LR__4381
1194c     04 E4 05 F1 | 	add	objptr, #4
11950     F2 00 62 FC | 	wrlong	_var01, objptr
11954     24 01 00 FF 
11958     4B 01 06 F6 | 	mov	_var01, ##@LR__4382
1195c     04 E4 05 F1 | 	add	objptr, #4
11960     F2 00 62 FC | 	wrlong	_var01, objptr
11964     24 01 00 FF 
11968     67 01 06 F6 | 	mov	_var01, ##@LR__4383
1196c     04 E4 05 F1 | 	add	objptr, #4
11970     F2 00 62 FC | 	wrlong	_var01, objptr
11974     24 01 00 FF 
11978     85 01 06 F6 | 	mov	_var01, ##@LR__4384
1197c     04 E4 05 F1 | 	add	objptr, #4
11980     F2 00 62 FC | 	wrlong	_var01, objptr
11984     24 01 00 FF 
11988     9E 01 06 F6 | 	mov	_var01, ##@LR__4385
1198c     04 E4 05 F1 | 	add	objptr, #4
11990     F2 00 62 FC | 	wrlong	_var01, objptr
11994     24 01 00 FF 
11998     BD 01 06 F6 | 	mov	_var01, ##@LR__4386
1199c     04 E4 05 F1 | 	add	objptr, #4
119a0     F2 00 62 FC | 	wrlong	_var01, objptr
119a4     24 01 00 FF 
119a8     CC 01 06 F6 | 	mov	_var01, ##@LR__4387
119ac     04 E4 05 F1 | 	add	objptr, #4
119b0     F2 00 62 FC | 	wrlong	_var01, objptr
119b4     24 01 00 FF 
119b8     FA 01 06 F6 | 	mov	_var01, ##@LR__4388
119bc     04 E4 05 F1 | 	add	objptr, #4
119c0     F2 00 62 FC | 	wrlong	_var01, objptr
119c4     25 01 00 FF 
119c8     08 00 06 F6 | 	mov	_var01, ##@LR__4389
119cc     04 E4 05 F1 | 	add	objptr, #4
119d0     F2 00 62 FC | 	wrlong	_var01, objptr
119d4     25 01 00 FF 
119d8     1D 00 06 F6 | 	mov	_var01, ##@LR__4390
119dc     04 E4 05 F1 | 	add	objptr, #4
119e0     F2 00 62 FC | 	wrlong	_var01, objptr
119e4     25 01 00 FF 
119e8     41 00 06 F6 | 	mov	_var01, ##@LR__4391
119ec     04 E4 05 F1 | 	add	objptr, #4
119f0     F2 00 62 FC | 	wrlong	_var01, objptr
119f4     25 01 00 FF 
119f8     58 00 06 F6 | 	mov	_var01, ##@LR__4392
119fc     04 E4 05 F1 | 	add	objptr, #4
11a00     F2 00 62 FC | 	wrlong	_var01, objptr
11a04     25 01 00 FF 
11a08     6B 00 06 F6 | 	mov	_var01, ##@LR__4393
11a0c     04 E4 05 F1 | 	add	objptr, #4
11a10     F2 00 62 FC | 	wrlong	_var01, objptr
11a14     3C 00 00 FF 
11a18     00 E5 85 F1 | 	sub	objptr, ##30976
11a1c                 | _init_error_strings_ret
11a1c     2D 00 64 FD | 	ret
11a20                 | 
11a20                 | '         
11a20                 | ' sub printerror(err as integer)
11a20                 | _printerror
11a20     01 4A 05 F6 | 	mov	COUNT_, #1
11a24     A8 00 A0 FD | 	call	#pushregs_
11a28     09 1F 02 F6 | 	mov	local01, arg01
11a2c     25 01 00 FF 
11a30     82 12 06 F6 | 	mov	arg01, ##@LR__4394
11a34     B8 24 B0 FD | 	call	#_hg010b_spin2_write
11a38     0F 13 02 F6 | 	mov	arg01, local01
11a3c     B0 26 B0 FD | 	call	#_hg010b_spin2_inttostr
11a40     FD 12 02 F6 | 	mov	arg01, result1
11a44     A8 24 B0 FD | 	call	#_hg010b_spin2_write
11a48     25 01 00 FF 
11a4c     89 12 06 F6 | 	mov	arg01, ##@LR__4395
11a50     9C 24 B0 FD | 	call	#_hg010b_spin2_write
11a54     02 1E 66 F0 | 	shl	local01, #2
11a58     3C 00 00 FF 
11a5c     40 E4 05 F1 | 	add	objptr, ##30784
11a60     F2 1E 02 F1 | 	add	local01, objptr
11a64     0F 13 02 FB | 	rdlong	arg01, local01
11a68     3C 00 00 FF 
11a6c     40 E4 85 F1 | 	sub	objptr, ##30784
11a70                 | ' 
11a70                 | ' write(text)
11a70     7C 24 B0 FD | 	call	#_hg010b_spin2_write
11a74                 | ' crlf
11a74     D8 25 B0 FD | 	call	#_hg010b_spin2_crlf
11a78     A7 F0 03 F6 | 	mov	ptra, fp
11a7c     B2 00 A0 FD | 	call	#popregs_
11a80                 | _printerror_ret
11a80     2D 00 64 FD | 	ret
11a84                 | 
11a84                 | ' 
11a84                 | ' '' ------------------------------- Hardware start/stop/initialization 
11a84                 | ' 
11a84                 | ' sub startpsram
11a84                 | _startpsram
11a84     00 12 06 F6 | 	mov	arg01, #0
11a88     0A 14 C6 F9 | 	decod	arg02, #10
11a8c     0B 16 06 F6 | 	mov	arg03, #11
11a90     07 18 06 F6 | 	mov	arg04, #7
11a94     0B 00 00 FF 
11a98     C0 E4 05 F1 | 	add	objptr, ##5824
11a9c     5C 27 B0 FD | 	call	#_psram_spin2_startx
11aa0     22 00 00 FF 
11aa4     0C E5 05 F1 | 	add	objptr, ##17676
11aa8     F2 FA 61 FC | 	wrlong	result1, objptr
11aac                 | '     return $7FF00 + cog*12
11aac     0C E4 05 F1 | 	add	objptr, #12
11ab0     FF 03 80 FF 
11ab4     F2 00 6A FC | 	wrlong	##524032, objptr
11ab8     2D 00 00 FF 
11abc     D8 E5 85 F1 | 	sub	objptr, ##23512
11ac0                 | _startpsram_ret
11ac0     2D 00 64 FD | 	ret
11ac4                 | 
11ac4                 | ' 
11ac4                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
11ac4                 | _startvideo
11ac4     01 4A 05 F6 | 	mov	COUNT_, #1
11ac8     A8 00 A0 FD | 	call	#pushregs_
11acc     2D 00 00 FF 
11ad0     D8 E5 05 F1 | 	add	objptr, ##23512
11ad4     F2 18 02 FB | 	rdlong	arg04, objptr
11ad8     2D 00 00 FF 
11adc     D8 E5 85 F1 | 	sub	objptr, ##23512
11ae0     0A 13 02 F6 | 	mov	arg01, arg02
11ae4     0C 15 02 F6 | 	mov	arg02, arg04
11ae8     18 0F B0 FD | 	call	#_hg010b_spin2_start
11aec     2D 00 00 FF 
11af0     C4 E5 05 F1 | 	add	objptr, ##23492
11af4     F2 FA 61 FC | 	wrlong	result1, objptr
11af8                 | ' 
11af8                 | ' videocog=v.start(pin,mbox)
11af8                 | ' 
11af8                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
11af8     00 1E 06 F6 | 	mov	local01, #0
11afc     22 00 00 FF 
11b00     04 E5 85 F1 | 	sub	objptr, ##17668
11b04                 | LR__1490
11b04     0F 13 02 F6 | 	mov	arg01, local01
11b08     00 28 00 FF 
11b0c     00 14 06 F6 | 	mov	arg02, ##5242880
11b10     40 2B B0 FD | 	call	#_psram_spin2_setQos
11b14     01 1E 06 F1 | 	add	local01, #1
11b18     08 1E 56 F2 | 	cmps	local01, #8 wc
11b1c     E4 FF 9F CD |  if_b	jmp	#LR__1490
11b20     22 00 00 FF 
11b24     04 E5 05 F1 | 	add	objptr, ##17668
11b28     F2 12 02 FB | 	rdlong	arg01, objptr
11b2c     7A 00 02 FF 
11b30     00 14 06 F6 | 	mov	arg02, ##67171328
11b34     22 00 00 FF 
11b38     04 E5 85 F1 | 	sub	objptr, ##17668
11b3c     14 2B B0 FD | 	call	#_psram_spin2_setQos
11b40     0B 00 00 FF 
11b44     C0 E4 85 F1 | 	sub	objptr, ##5824
11b48                 | ' psram.setQoS(videocog, $0400f400) 
11b48                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
11b48     F2 14 02 F6 | 	mov	arg02, objptr
11b4c     00 50 02 FF 
11b50     00 14 46 F5 | 	or	arg02, ##77594624
11b54     00 16 06 F6 | 	mov	arg03, #0
11b58     00 18 06 F6 | 	mov	arg04, #0
11b5c     00 12 06 F6 | 	mov	arg01, #0
11b60     58 3E B0 FD | 	call	#__system___basic_open
11b64                 | ' return videocog
11b64     2D 00 00 FF 
11b68     C4 E5 05 F1 | 	add	objptr, ##23492
11b6c     F2 FA 01 FB | 	rdlong	result1, objptr
11b70     2D 00 00 FF 
11b74     C4 E5 85 F1 | 	sub	objptr, ##23492
11b78     A7 F0 03 F6 | 	mov	ptra, fp
11b7c     B2 00 A0 FD | 	call	#popregs_
11b80                 | _startvideo_ret
11b80     2D 00 64 FD | 	ret
11b84                 | 
11b84                 | ' 
11b84                 | ' function pspeek(adr as ulong) as ubyte
11b84                 | _pspeek
11b84     00 4A 05 F6 | 	mov	COUNT_, #0
11b88     A8 00 A0 FD | 	call	#pushregs_
11b8c     0C F0 07 F1 | 	add	ptra, #12
11b90     04 4E 05 F1 | 	add	fp, #4
11b94     A7 12 62 FC | 	wrlong	arg01, fp
11b98     04 4E 05 F1 | 	add	fp, #4
11b9c     A7 12 02 F6 | 	mov	arg01, fp
11ba0     04 4E 85 F1 | 	sub	fp, #4
11ba4     A7 14 02 FB | 	rdlong	arg02, fp
11ba8     04 4E 85 F1 | 	sub	fp, #4
11bac     01 16 06 F6 | 	mov	arg03, #1
11bb0     0B 00 00 FF 
11bb4     C0 E4 05 F1 | 	add	objptr, ##5824
11bb8     6C 28 B0 FD | 	call	#_psram_spin2_read1
11bbc     0B 00 00 FF 
11bc0     C0 E4 85 F1 | 	sub	objptr, ##5824
11bc4                 | ' psram.read1(varptr(res),adr,1)
11bc4                 | ' return res
11bc4     08 4E 05 F1 | 	add	fp, #8
11bc8     A7 FA C1 FA | 	rdbyte	result1, fp
11bcc     08 4E 85 F1 | 	sub	fp, #8
11bd0     A7 F0 03 F6 | 	mov	ptra, fp
11bd4     B2 00 A0 FD | 	call	#popregs_
11bd8                 | _pspeek_ret
11bd8     2D 00 64 FD | 	ret
11bdc                 | 
11bdc                 | ' 
11bdc                 | ' function pslpeek(adr as ulong) as ulong
11bdc                 | _pslpeek
11bdc     00 4A 05 F6 | 	mov	COUNT_, #0
11be0     A8 00 A0 FD | 	call	#pushregs_
11be4     0C F0 07 F1 | 	add	ptra, #12
11be8     04 4E 05 F1 | 	add	fp, #4
11bec     A7 12 62 FC | 	wrlong	arg01, fp
11bf0     04 4E 05 F1 | 	add	fp, #4
11bf4     A7 12 02 F6 | 	mov	arg01, fp
11bf8     04 4E 85 F1 | 	sub	fp, #4
11bfc     A7 14 02 FB | 	rdlong	arg02, fp
11c00     04 4E 85 F1 | 	sub	fp, #4
11c04     04 16 06 F6 | 	mov	arg03, #4
11c08     0B 00 00 FF 
11c0c     C0 E4 05 F1 | 	add	objptr, ##5824
11c10     14 28 B0 FD | 	call	#_psram_spin2_read1
11c14     0B 00 00 FF 
11c18     C0 E4 85 F1 | 	sub	objptr, ##5824
11c1c                 | ' psram.read1(varptr(res),adr,4)
11c1c                 | ' return res
11c1c     08 4E 05 F1 | 	add	fp, #8
11c20     A7 FA 01 FB | 	rdlong	result1, fp
11c24     08 4E 85 F1 | 	sub	fp, #8
11c28     A7 F0 03 F6 | 	mov	ptra, fp
11c2c     B2 00 A0 FD | 	call	#popregs_
11c30                 | _pslpeek_ret
11c30     2D 00 64 FD | 	ret
11c34                 | 
11c34                 | ' 
11c34                 | ' '' ------------------------------- USB keyboard scan to char translator
11c34                 | ' 
11c34                 | ' function scantochar(key)
11c34                 | _scantochar
11c34                 | ' 
11c34                 | ' select case (key shr 8) and 255
11c34     09 01 02 F6 | 	mov	_var01, arg01
11c38     08 00 C6 F0 | 	sar	_var01, #8
11c3c     FF 00 0E F5 | 	and	_var01, #255 wz
11c40     24 00 90 AD |  if_e	jmp	#LR__1500
11c44     02 00 0E F2 | 	cmp	_var01, #2 wz
11c48     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
11c4c     30 00 90 AD |  if_e	jmp	#LR__1501
11c50     40 00 0E F2 | 	cmp	_var01, #64 wz
11c54     44 00 90 AD |  if_e	jmp	#LR__1502
11c58     42 00 0E F2 | 	cmp	_var01, #66 wz
11c5c     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
11c60     70 00 90 5D |  if_ne	jmp	#LR__1504
11c64     50 00 90 FD | 	jmp	#LR__1503
11c68                 | LR__1500
11c68     09 FB 01 F6 | 	mov	result1, arg01
11c6c     7F FA 05 F5 | 	and	result1, #127
11c70     02 FA 65 F0 | 	shl	result1, #2
11c74     F5 FA 01 F1 | 	add	result1, ptr__dat__
11c78     FD FA C1 FA | 	rdbyte	result1, result1
11c7c     54 00 90 FD | 	jmp	#_scantochar_ret
11c80                 | LR__1501
11c80     09 FB 01 F6 | 	mov	result1, arg01
11c84     7F FA 05 F5 | 	and	result1, #127
11c88     02 FA 65 F0 | 	shl	result1, #2
11c8c     01 FA 05 F1 | 	add	result1, #1
11c90     F5 FA 01 F1 | 	add	result1, ptr__dat__
11c94     FD FA C1 FA | 	rdbyte	result1, result1
11c98     38 00 90 FD | 	jmp	#_scantochar_ret
11c9c                 | LR__1502
11c9c     09 FB 01 F6 | 	mov	result1, arg01
11ca0     7F FA 05 F5 | 	and	result1, #127
11ca4     02 FA 65 F0 | 	shl	result1, #2
11ca8     02 FA 05 F1 | 	add	result1, #2
11cac     F5 FA 01 F1 | 	add	result1, ptr__dat__
11cb0     FD FA C1 FA | 	rdbyte	result1, result1
11cb4     1C 00 90 FD | 	jmp	#_scantochar_ret
11cb8                 | LR__1503
11cb8     09 FB 01 F6 | 	mov	result1, arg01
11cbc     7F FA 05 F5 | 	and	result1, #127
11cc0     02 FA 65 F0 | 	shl	result1, #2
11cc4     03 FA 05 F1 | 	add	result1, #3
11cc8     F5 FA 01 F1 | 	add	result1, ptr__dat__
11ccc     FD FA C1 FA | 	rdbyte	result1, result1
11cd0     00 00 90 FD | 	jmp	#_scantochar_ret
11cd4                 | LR__1504
11cd4                 | _scantochar_ret
11cd4     2D 00 64 FD | 	ret
11cd8                 | 
11cd8                 | _program
11cd8     0B 4A 05 F6 | 	mov	COUNT_, #11
11cdc     A8 00 A0 FD | 	call	#pushregs_
11ce0     A0 FD BF FD | 	call	#_startpsram
11ce4     40 12 06 F6 | 	mov	arg01, #64
11ce8     00 14 06 F6 | 	mov	arg02, #0
11cec     00 16 06 F6 | 	mov	arg03, #0
11cf0     D0 FD BF FD | 	call	#_startvideo
11cf4     00 12 06 F6 | 	mov	arg01, #0
11cf8     00 14 06 F6 | 	mov	arg02, #0
11cfc     00 16 06 F6 | 	mov	arg03, #0
11d00     0B 00 00 FF 
11d04     C0 E4 05 F1 | 	add	objptr, ##5824
11d08     5C 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
11d0c     FE 1C 02 F6 | 	mov	arg06, result2
11d10     22 00 00 FF 
11d14     00 E5 05 F1 | 	add	objptr, ##17664
11d18     F2 FA 61 FC | 	wrlong	result1, objptr
11d1c     14 E4 05 F1 | 	add	objptr, #20
11d20     F2 1C 62 FC | 	wrlong	arg06, objptr
11d24     2D 00 00 FF 
11d28     D4 E5 85 F1 | 	sub	objptr, ##23508
11d2c     32 12 06 F6 | 	mov	arg01, #50
11d30     D4 34 B0 FD | 	call	#__system___waitms
11d34     2D 00 00 FF 
11d38     D4 E5 05 F1 | 	add	objptr, ##23508
11d3c     F2 12 02 FB | 	rdlong	arg01, objptr
11d40     2D 00 00 FF 
11d44     D4 E5 85 F1 | 	sub	objptr, ##23508
11d48     14 12 06 F1 | 	add	arg01, #20
11d4c     20 00 80 FF 
11d50     09 01 58 FC | 	wrword	##16384, arg01
11d54     04 2A B0 FD | 	call	#_usbnew_spin2_start
11d58     2D 00 00 FF 
11d5c     C8 E5 05 F1 | 	add	objptr, ##23496
11d60     F2 FA 61 FC | 	wrlong	result1, objptr
11d64                 | '   mouse_limits[0] := xlim
11d64     0F 00 00 FF 
11d68     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
11d6c     01 00 80 FF 
11d70     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
11d74                 | '   mouse_limits[1] := ylim
11d74     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
11d78     01 00 80 FF 
11d7c     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
11d80     2D 00 00 FF 
11d84     BB E4 85 F1 | 	sub	objptr, ##23227
11d88     F2 12 02 F6 | 	mov	arg01, objptr
11d8c     0D E5 85 F1 | 	sub	objptr, #269
11d90     C4 12 06 F1 | 	add	arg01, #196
11d94                 | '   mouse_outptr := ptr
11d94     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
11d98     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
11d9c     0F 00 00 FF 
11da0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
11da4     07 00 00 FF 
11da8     72 EB 05 F1 | 	add	ptr__dat__, ##3954
11dac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11db0     07 00 00 FF 
11db4     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
11db8     10 12 06 F6 | 	mov	arg01, #16
11dbc     3C 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
11dc0     10 12 06 F6 | 	mov	arg01, #16
11dc4     20 14 06 F6 | 	mov	arg02, #32
11dc8     20 16 06 F6 | 	mov	arg03, #32
11dcc     A0 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
11dd0     09 12 C6 F9 | 	decod	arg01, #9
11dd4     20 15 06 F6 | 	mov	arg02, #288
11dd8     3C 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
11ddc     F2 1C 02 F6 | 	mov	arg06, objptr
11de0     50 00 00 FF 
11de4     AC E5 05 F1 | 	add	objptr, ##41388
11de8     F2 1A 02 F6 | 	mov	arg05, objptr
11dec     0D 1D 62 FC | 	wrlong	arg06, arg05
11df0     04 1A 06 F1 | 	add	arg05, #4
11df4     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
11df8     EF 14 02 F6 | 	mov	arg02, entryptr__
11dfc     F2 1E 02 F6 | 	mov	local01, objptr
11e00     1E FA 05 F6 | 	mov	result1, #30
11e04     28 1E 62 FD | 	setq	local01
11e08     0A FB F1 FC | 	coginit	result1, arg02 wc
11e0c     01 FA 65 C6 |  if_b	neg	result1, #1
11e10     04 E4 85 F1 | 	sub	objptr, #4
11e14     F2 FA 61 FC | 	wrlong	result1, objptr
11e18     01 00 00 FF 
11e1c     90 E4 05 F1 | 	add	objptr, ##656
11e20     F2 00 68 FC | 	wrlong	#0, objptr
11e24     24 00 00 FF 
11e28     40 E4 85 F1 | 	sub	objptr, ##18496
11e2c     F2 04 68 FC | 	wrlong	#2, objptr
11e30     04 E4 05 F1 | 	add	objptr, #4
11e34     F2 26 69 FC | 	wrlong	#147, objptr
11e38     04 E4 05 F1 | 	add	objptr, #4
11e3c     F2 34 69 FC | 	wrlong	#154, objptr
11e40     04 E4 05 F1 | 	add	objptr, #4
11e44     F2 08 68 FC | 	wrlong	#4, objptr
11e48     04 E4 85 F1 | 	sub	objptr, #4
11e4c     F2 1C 02 FB | 	rdlong	arg06, objptr
11e50     14 E4 85 F1 | 	sub	objptr, #20
11e54     F2 1C 62 FC | 	wrlong	arg06, objptr
11e58     04 E4 05 F1 | 	add	objptr, #4
11e5c     F2 00 68 FC | 	wrlong	#0, objptr
11e60     04 E4 05 F1 | 	add	objptr, #4
11e64     F2 00 68 FC | 	wrlong	#0, objptr
11e68     22 00 00 FF 
11e6c     B0 E5 05 F1 | 	add	objptr, ##17840
11e70     F2 02 68 FC | 	wrlong	#1, objptr
11e74     14 00 00 FF 
11e78     7C E5 85 F1 | 	sub	objptr, ##10620
11e7c     F2 18 68 FC | 	wrlong	#12, objptr
11e80     3C 00 00 FF 
11e84     28 E4 85 F1 | 	sub	objptr, ##30760
11e88     78 EE BF FD | 	call	#_init_commands
11e8c     70 F8 BF FD | 	call	#_init_error_strings
11e90     90 80 BF FD | 	call	#_do_new
11e94     2E 00 00 FF 
11e98     00 E4 05 F1 | 	add	objptr, ##23552
11e9c     F2 12 02 FB | 	rdlong	arg01, objptr
11ea0     04 E4 85 F1 | 	sub	objptr, #4
11ea4     F2 14 02 FB | 	rdlong	arg02, objptr
11ea8     2D 00 00 FF 
11eac     FC E5 85 F1 | 	sub	objptr, ##23548
11eb0     80 1D B0 FD | 	call	#_hg010b_spin2_cls
11eb4     2E 00 00 FF 
11eb8     04 E4 05 F1 | 	add	objptr, ##23556
11ebc     F2 12 02 FB | 	rdlong	arg01, objptr
11ec0     2E 00 00 FF 
11ec4     04 E4 85 F1 | 	sub	objptr, ##23556
11ec8     80 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
11ecc                 | ' 
11ecc                 | ' leading_spaces:=amount
11ecc     01 00 00 FF 
11ed0     B2 E4 05 F1 | 	add	objptr, ##690
11ed4     F2 04 68 FC | 	wrlong	#2, objptr
11ed8     01 00 00 FF 
11edc     B2 E4 85 F1 | 	sub	objptr, ##690
11ee0     25 01 00 FF 
11ee4     8C 20 06 F6 | 	mov	local02, ##@LR__4396
11ee8     3D 12 06 F6 | 	mov	arg01, #61
11eec     3C 14 06 F6 | 	mov	arg02, #60
11ef0     3B 16 06 F6 | 	mov	arg03, #59
11ef4     3A 18 06 F6 | 	mov	arg04, #58
11ef8     64 76 B0 FD | 	call	#__system___vfs_open_sdcardx
11efc     FD 14 02 F6 | 	mov	arg02, result1
11f00     10 13 02 F6 | 	mov	arg01, local02
11f04     D8 33 B0 FD | 	call	#__system___mount
11f08     25 01 00 FF 
11f0c     90 12 06 F6 | 	mov	arg01, ##@LR__4397
11f10     8C 36 B0 FD | 	call	#__system___chdir
11f14     25 01 00 FF 
11f18     98 20 06 F6 | 	mov	local02, ##@LR__4398
11f1c     49 00 00 FF 
11f20     58 E4 05 F1 | 	add	objptr, ##37464
11f24     F2 20 62 FC | 	wrlong	local02, objptr
11f28     1B 00 00 FF 
11f2c     60 E4 85 F1 | 	sub	objptr, ##13920
11f30     F2 12 02 FB | 	rdlong	arg01, objptr
11f34     2D 00 00 FF 
11f38     F8 E5 85 F1 | 	sub	objptr, ##23544
11f3c     01 12 66 F0 | 	shl	arg01, #1
11f40     01 14 06 F6 | 	mov	arg02, #1
11f44     44 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
11f48                 | ' 
11f48                 | ' init_commands
11f48                 | ' init_error_strings
11f48                 | ' do_new
11f48                 | ' 
11f48                 | ' 
11f48                 | ' cls(ink, paper)
11f48                 | ' 'v.setfontfamily(4) 				' use ST Mono font
11f48                 | ' v.setfontfamily(font) 				' use ST Mono font
11f48                 | ' v.setleadingspaces(2)
11f48                 | ' mount "/sd", _vfs_open_sdcard()
11f48                 | ' chdir "/sd/bas"
11f48                 | ' 
11f48                 | ' currentdir$="/sd/bas"
11f48                 | ' 
11f48                 | ' position 2*editor_spaces,1 : print ver$
11f48     00 12 06 F6 | 	mov	arg01, #0
11f4c     78 85 B0 FD | 	call	#__system___getiolock_0350
11f50     FD 12 02 F6 | 	mov	arg01, result1
11f54     BC 2F B0 FD | 	call	#__system___lockmem
11f58     09 00 00 FF 
11f5c     E8 EB 05 F1 | 	add	ptr__dat__, ##5096
11f60     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
11f64     09 00 00 FF 
11f68     E8 EB 85 F1 | 	sub	ptr__dat__, ##5096
11f6c     00 12 06 F6 | 	mov	arg01, #0
11f70     00 16 06 F6 | 	mov	arg03, #0
11f74     90 3C B0 FD | 	call	#__system___basic_print_string
11f78     00 12 06 F6 | 	mov	arg01, #0
11f7c     0A 14 06 F6 | 	mov	arg02, #10
11f80     00 16 06 F6 | 	mov	arg03, #0
11f84     28 3C B0 FD | 	call	#__system___basic_print_char
11f88     00 12 06 F6 | 	mov	arg01, #0
11f8c     38 85 B0 FD | 	call	#__system___getiolock_0350
11f90     FD 00 68 FC | 	wrlong	#0, result1
11f94     F2 12 02 FB | 	rdlong	arg01, objptr
11f98     00 14 06 F6 | 	mov	arg02, #0
11f9c     0A 16 06 F6 | 	mov	arg03, #10
11fa0     78 51 B0 FD | 	call	#__system__Number_S
11fa4     FD 12 02 F6 | 	mov	arg01, result1
11fa8     25 01 00 FF 
11fac     A0 14 06 F6 | 	mov	arg02, ##@LR__4399
11fb0     BC 2F B0 FD | 	call	#__system___string_concat
11fb4     FD 20 02 F6 | 	mov	local02, result1
11fb8     50 00 00 FF 
11fbc     A0 E5 05 F1 | 	add	objptr, ##41376
11fc0     F2 20 62 FC | 	wrlong	local02, objptr
11fc4     50 00 00 FF 
11fc8     A0 E5 85 F1 | 	sub	objptr, ##41376
11fcc                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
11fcc     00 12 06 F6 | 	mov	arg01, #0
11fd0     F4 84 B0 FD | 	call	#__system___getiolock_0350
11fd4     FD 12 02 F6 | 	mov	arg01, result1
11fd8     38 2F B0 FD | 	call	#__system___lockmem
11fdc     50 00 00 FF 
11fe0     A0 E5 05 F1 | 	add	objptr, ##41376
11fe4     F2 14 02 FB | 	rdlong	arg02, objptr
11fe8     50 00 00 FF 
11fec     A0 E5 85 F1 | 	sub	objptr, ##41376
11ff0     00 12 06 F6 | 	mov	arg01, #0
11ff4     00 16 06 F6 | 	mov	arg03, #0
11ff8     0C 3C B0 FD | 	call	#__system___basic_print_string
11ffc     00 12 06 F6 | 	mov	arg01, #0
12000     0A 14 06 F6 | 	mov	arg02, #10
12004     00 16 06 F6 | 	mov	arg03, #0
12008     A4 3B B0 FD | 	call	#__system___basic_print_char
1200c     00 12 06 F6 | 	mov	arg01, #0
12010     B4 84 B0 FD | 	call	#__system___getiolock_0350
12014     FD 00 68 FC | 	wrlong	#0, result1
12018     2D 00 00 FF 
1201c     F8 E5 05 F1 | 	add	objptr, ##23544
12020     F2 12 02 FB | 	rdlong	arg01, objptr
12024     2D 00 00 FF 
12028     F8 E5 85 F1 | 	sub	objptr, ##23544
1202c     01 12 66 F0 | 	shl	arg01, #1
12030     04 14 06 F6 | 	mov	arg02, #4
12034     54 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
12038                 | ' position 2*editor_spaces,4 : print "Ready"
12038     00 12 06 F6 | 	mov	arg01, #0
1203c     88 84 B0 FD | 	call	#__system___getiolock_0350
12040     FD 12 02 F6 | 	mov	arg01, result1
12044     CC 2E B0 FD | 	call	#__system___lockmem
12048     25 01 00 FF 
1204c     B2 14 06 F6 | 	mov	arg02, ##@LR__4400
12050     00 12 06 F6 | 	mov	arg01, #0
12054     00 16 06 F6 | 	mov	arg03, #0
12058     AC 3B B0 FD | 	call	#__system___basic_print_string
1205c     FD 22 02 F6 | 	mov	local03, result1
12060     00 12 06 F6 | 	mov	arg01, #0
12064     0A 14 06 F6 | 	mov	arg02, #10
12068     00 16 06 F6 | 	mov	arg03, #0
1206c     40 3B B0 FD | 	call	#__system___basic_print_char
12070     01 24 06 F6 | 	mov	local04, #1
12074     00 12 06 F6 | 	mov	arg01, #0
12078     4C 84 B0 FD | 	call	#__system___getiolock_0350
1207c     FD 00 68 FC | 	wrlong	#0, result1
12080     00 26 06 F6 | 	mov	local05, #0
12084                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
12084                 | ' 
12084                 | ' 
12084                 | ' '-------------------------------------------------------------------------------------------------------- 
12084                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
12084                 | ' '--------------------------------------------------------------------------------------------------------
12084                 | ' 
12084                 | ' do
12084                 | LR__1510
12084     01 12 06 F6 | 	mov	arg01, #1
12088     38 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
1208c     28 27 B0 FD | 	call	#_usbnew_spin2_get_key
12090     3C 00 00 FF 
12094     38 E4 05 F1 | 	add	objptr, ##30776
12098     F2 FA 61 FC | 	wrlong	result1, objptr
1209c                 | '   return hkbd_led_rep
1209c     13 00 00 FF 
120a0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
120a4     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
120a8     13 00 00 FF 
120ac     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
120b0     16 00 00 FF 
120b4     08 E4 05 F1 | 	add	objptr, ##11272
120b8     F2 FA 61 FC | 	wrlong	result1, objptr
120bc                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
120bc     16 00 00 FF 
120c0     08 E4 85 F1 | 	sub	objptr, ##11272
120c4     F2 20 02 FB | 	rdlong	local02, objptr
120c8     3C 00 00 FF 
120cc     38 E4 85 F1 | 	sub	objptr, ##30776
120d0     01 20 16 F2 | 	cmp	local02, #1 wc
120d4     BC 00 90 CD |  if_b	jmp	#LR__1511
120d8     3C 00 00 FF 
120dc     38 E4 05 F1 | 	add	objptr, ##30776
120e0     F2 24 02 FB | 	rdlong	local04, objptr
120e4     3C 00 00 FF 
120e8     38 E4 85 F1 | 	sub	objptr, ##30776
120ec     12 23 02 F6 | 	mov	local03, local04
120f0     04 22 16 F2 | 	cmp	local03, #4 wc
120f4     9C 00 90 3D |  if_ae	jmp	#LR__1511
120f8     50 00 00 FF 
120fc     A4 E5 05 F1 | 	add	objptr, ##41380
12100     F2 1E 02 FB | 	rdlong	local01, objptr
12104     50 00 00 FF 
12108     A4 E5 85 F1 | 	sub	objptr, ##41380
1210c     0F 27 02 F6 | 	mov	local05, local01
12110     01 26 0E F2 | 	cmp	local05, #1 wz
12114     7C 00 90 5D |  if_ne	jmp	#LR__1511
12118     04 00 00 FF 
1211c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12120     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12124     04 00 00 FF 
12128     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
1212c     56 00 00 FF 
12130     44 22 06 F6 | 	mov	local03, ##44100
12134     0E 24 C6 F9 | 	decod	local04, #14
12138     00 26 06 F6 | 	mov	local05, #0
1213c     03 00 00 FF 
12140     DE 1E 06 F6 | 	mov	local01, ##1758
12144     07 12 06 F6 | 	mov	arg01, #7
12148     56 00 00 FF 
1214c     44 16 06 F6 | 	mov	arg03, ##44100
12150     0E 18 C6 F9 | 	decod	arg04, #14
12154     00 1A 06 F6 | 	mov	arg05, #0
12158     03 00 00 FF 
1215c     DE 1C 06 F6 | 	mov	arg06, ##1758
12160     0B 00 00 FF 
12164     C0 E4 05 F1 | 	add	objptr, ##5824
12168     74 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1216c     0B 00 00 FF 
12170     C0 E4 85 F1 | 	sub	objptr, ##5824
12174     0A 12 06 F6 | 	mov	arg01, #10
12178     8C 30 B0 FD | 	call	#__system___waitms
1217c     07 12 06 F6 | 	mov	arg01, #7
12180     0B 00 00 FF 
12184     C0 E4 05 F1 | 	add	objptr, ##5824
12188     A4 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
1218c     0B 00 00 FF 
12190     C0 E4 85 F1 | 	sub	objptr, ##5824
12194                 | LR__1511
12194                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
12194     3C 00 00 FF 
12198     38 E4 05 F1 | 	add	objptr, ##30776
1219c     F2 20 02 FB | 	rdlong	local02, objptr
121a0     3C 00 00 FF 
121a4     38 E4 85 F1 | 	sub	objptr, ##30776
121a8     04 20 16 F2 | 	cmp	local02, #4 wc
121ac     80 00 90 CD |  if_b	jmp	#LR__1512
121b0     3C 00 00 FF 
121b4     38 E4 05 F1 | 	add	objptr, ##30776
121b8     F2 24 02 FB | 	rdlong	local04, objptr
121bc     3C 00 00 FF 
121c0     38 E4 85 F1 | 	sub	objptr, ##30776
121c4     12 23 02 F6 | 	mov	local03, local04
121c8     00 00 40 FF 
121cc     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
121d0     3C 00 00 CF 
121d4     38 E4 05 C1 |  if_b	add	objptr, ##30776
121d8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
121dc     3C 00 00 CF 
121e0     38 E4 85 C1 |  if_b	sub	objptr, ##30776
121e4     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
121e8     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
121ec     40 00 90 3D |  if_ae	jmp	#LR__1512
121f0     3C 00 00 FF 
121f4     38 E4 05 F1 | 	add	objptr, ##30776
121f8     F2 20 02 FB | 	rdlong	local02, objptr
121fc     04 E4 05 F1 | 	add	objptr, #4
12200     F2 20 62 FC | 	wrlong	local02, objptr
12204     16 00 00 FF 
12208     08 E4 05 F1 | 	add	objptr, ##11272
1220c     F2 02 68 FC | 	wrlong	#1, objptr
12210     16 00 00 FF 
12214     08 E4 85 F1 | 	sub	objptr, ##11272
12218     F2 20 02 FB | 	rdlong	local02, objptr
1221c     16 00 00 FF 
12220     0C E4 05 F1 | 	add	objptr, ##11276
12224     F2 20 62 FC | 	wrlong	local02, objptr
12228     52 00 00 FF 
1222c     48 E4 85 F1 | 	sub	objptr, ##42056
12230                 | LR__1512
12230                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
12230     3C 00 00 FF 
12234     38 E4 05 F1 | 	add	objptr, ##30776
12238     F2 20 02 FB | 	rdlong	local02, objptr
1223c     3C 00 00 FF 
12240     38 E4 85 F1 | 	sub	objptr, ##30776
12244     00 00 40 FF 
12248     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1224c     52 00 00 3F 
12250     4C E4 05 31 |  if_ae	add	objptr, ##42060
12254     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12258     08 E4 85 31 |  if_ae	sub	objptr, #8
1225c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
12260     52 00 00 3F 
12264     44 E4 85 31 |  if_ae	sub	objptr, ##42052
12268                 | ' if key=0 andalso rpt=1 then rptcnt+=1
12268     3C 00 00 FF 
1226c     38 E4 05 F1 | 	add	objptr, ##30776
12270     F2 20 0A FB | 	rdlong	local02, objptr wz
12274     3C 00 00 FF 
12278     38 E4 85 F1 | 	sub	objptr, ##30776
1227c     52 00 00 AF 
12280     44 E4 05 A1 |  if_e	add	objptr, ##42052
12284     F2 24 02 AB |  if_e	rdlong	local04, objptr
12288     52 00 00 AF 
1228c     44 E4 85 A1 |  if_e	sub	objptr, ##42052
12290     12 23 02 A6 |  if_e	mov	local03, local04
12294     01 22 0E A2 |  if_e	cmp	local03, #1 wz
12298     52 00 00 AF 
1229c     4C E4 05 A1 |  if_e	add	objptr, ##42060
122a0     F2 20 02 AB |  if_e	rdlong	local02, objptr
122a4     01 20 06 A1 |  if_e	add	local02, #1
122a8     F2 20 62 AC |  if_e	wrlong	local02, objptr
122ac     52 00 00 AF 
122b0     4C E4 85 A1 |  if_e	sub	objptr, ##42060
122b4                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
122b4     3C 00 00 FF 
122b8     38 E4 05 F1 | 	add	objptr, ##30776
122bc     F2 20 02 FB | 	rdlong	local02, objptr
122c0     3C 00 00 FF 
122c4     38 E4 85 F1 | 	sub	objptr, ##30776
122c8     00 00 40 FF 
122cc     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
122d0     44 00 90 3D |  if_ae	jmp	#LR__1514
122d4     52 00 00 FF 
122d8     4C E4 05 F1 | 	add	objptr, ##42060
122dc     F2 20 02 FB | 	rdlong	local02, objptr
122e0     52 00 00 FF 
122e4     4C E4 85 F1 | 	sub	objptr, ##42060
122e8     19 20 0E F2 | 	cmp	local02, #25 wz
122ec     28 00 90 5D |  if_ne	jmp	#LR__1513
122f0     3C 00 00 FF 
122f4     3C E4 05 F1 | 	add	objptr, ##30780
122f8     F2 20 02 FB | 	rdlong	local02, objptr
122fc     16 00 00 FF 
12300     0C E4 05 F1 | 	add	objptr, ##11276
12304     F2 20 62 FC | 	wrlong	local02, objptr
12308     04 E4 05 F1 | 	add	objptr, #4
1230c     F2 2A 68 FC | 	wrlong	#21, objptr
12310     52 00 00 FF 
12314     4C E4 85 F1 | 	sub	objptr, ##42060
12318                 | LR__1513
12318                 | LR__1514
12318                 | ' 
12318                 | ' 
12318                 | ' if key3<>0 then
12318     52 00 00 FF 
1231c     48 E4 05 F1 | 	add	objptr, ##42056
12320     F2 28 0A FB | 	rdlong	local06, objptr wz
12324     52 00 00 FF 
12328     48 E4 85 F1 | 	sub	objptr, ##42056
1232c     54 FD 9F AD |  if_e	jmp	#LR__1510
12330                 | '   if keyclick=1 then paula.play(7,@atari_spl,44100,16384,1684) 
12330     50 00 00 FF 
12334     A4 E5 05 F1 | 	add	objptr, ##41380
12338     F2 20 02 FB | 	rdlong	local02, objptr
1233c     50 00 00 FF 
12340     A4 E5 85 F1 | 	sub	objptr, ##41380
12344     01 20 0E F2 | 	cmp	local02, #1 wz
12348     5C 00 90 5D |  if_ne	jmp	#LR__1515
1234c     01 00 00 FF 
12350     00 EA 05 F1 | 	add	ptr__dat__, ##512
12354     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12358     01 00 00 FF 
1235c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12360     56 00 00 FF 
12364     44 22 06 F6 | 	mov	local03, ##44100
12368     0E 24 C6 F9 | 	decod	local04, #14
1236c     03 00 00 FF 
12370     94 26 06 F6 | 	mov	local05, ##1684
12374     01 1E 66 F6 | 	neg	local01, #1
12378     07 12 06 F6 | 	mov	arg01, #7
1237c     56 00 00 FF 
12380     44 16 06 F6 | 	mov	arg03, ##44100
12384     0E 18 C6 F9 | 	decod	arg04, #14
12388     03 00 00 FF 
1238c     94 1A 06 F6 | 	mov	arg05, ##1684
12390     01 1C 66 F6 | 	neg	arg06, #1
12394     0B 00 00 FF 
12398     C0 E4 05 F1 | 	add	objptr, ##5824
1239c     40 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
123a0     0B 00 00 FF 
123a4     C0 E4 85 F1 | 	sub	objptr, ##5824
123a8                 | LR__1515
123a8     52 00 00 FF 
123ac     48 E4 05 F1 | 	add	objptr, ##42056
123b0     F2 12 02 FB | 	rdlong	arg01, objptr
123b4     52 00 00 FF 
123b8     48 E4 85 F1 | 	sub	objptr, ##42056
123bc     74 F8 BF FD | 	call	#_scantochar
123c0     52 00 00 FF 
123c4     50 E4 05 F1 | 	add	objptr, ##42064
123c8     F2 FA 61 FC | 	wrlong	result1, objptr
123cc                 | '   if leds and 2 = 2 then 
123cc     10 E4 85 F1 | 	sub	objptr, #16
123d0     F2 20 0A FB | 	rdlong	local02, objptr wz
123d4     52 00 00 FF 
123d8     40 E4 85 F1 | 	sub	objptr, ##42048
123dc     68 01 90 AD |  if_e	jmp	#LR__1523
123e0                 | '     if key4>96 andalso key4<123 then
123e0     52 00 00 FF 
123e4     50 E4 05 F1 | 	add	objptr, ##42064
123e8     F2 20 02 FB | 	rdlong	local02, objptr
123ec     52 00 00 FF 
123f0     50 E4 85 F1 | 	sub	objptr, ##42064
123f4     61 20 56 F2 | 	cmps	local02, #97 wc
123f8     40 00 90 CD |  if_b	jmp	#LR__1516
123fc     52 00 00 FF 
12400     50 E4 05 F1 | 	add	objptr, ##42064
12404     F2 24 02 FB | 	rdlong	local04, objptr
12408     52 00 00 FF 
1240c     50 E4 85 F1 | 	sub	objptr, ##42064
12410     12 23 02 F6 | 	mov	local03, local04
12414     7B 22 56 F2 | 	cmps	local03, #123 wc
12418     20 00 90 3D |  if_ae	jmp	#LR__1516
1241c     52 00 00 FF 
12420     50 E4 05 F1 | 	add	objptr, ##42064
12424     F2 20 02 FB | 	rdlong	local02, objptr
12428     20 20 86 F1 | 	sub	local02, #32
1242c     F2 20 62 FC | 	wrlong	local02, objptr
12430     52 00 00 FF 
12434     50 E4 85 F1 | 	sub	objptr, ##42064
12438     0C 01 90 FD | 	jmp	#LR__1522
1243c                 | LR__1516
1243c     52 00 00 FF 
12440     50 E4 05 F1 | 	add	objptr, ##42064
12444     F2 20 02 FB | 	rdlong	local02, objptr
12448     52 00 00 FF 
1244c     50 E4 85 F1 | 	sub	objptr, ##42064
12450     41 20 56 F2 | 	cmps	local02, #65 wc
12454     40 00 90 CD |  if_b	jmp	#LR__1517
12458     52 00 00 FF 
1245c     50 E4 05 F1 | 	add	objptr, ##42064
12460     F2 24 02 FB | 	rdlong	local04, objptr
12464     52 00 00 FF 
12468     50 E4 85 F1 | 	sub	objptr, ##42064
1246c     12 23 02 F6 | 	mov	local03, local04
12470     5B 22 56 F2 | 	cmps	local03, #91 wc
12474     20 00 90 3D |  if_ae	jmp	#LR__1517
12478     52 00 00 FF 
1247c     50 E4 05 F1 | 	add	objptr, ##42064
12480     F2 20 02 FB | 	rdlong	local02, objptr
12484     20 20 06 F1 | 	add	local02, #32
12488     F2 20 62 FC | 	wrlong	local02, objptr
1248c     52 00 00 FF 
12490     50 E4 85 F1 | 	sub	objptr, ##42064
12494     B0 00 90 FD | 	jmp	#LR__1521
12498                 | LR__1517
12498     52 00 00 FF 
1249c     50 E4 05 F1 | 	add	objptr, ##42064
124a0     F2 20 02 FB | 	rdlong	local02, objptr
124a4     52 00 00 FF 
124a8     50 E4 85 F1 | 	sub	objptr, ##42064
124ac     17 20 56 F2 | 	cmps	local02, #23 wc
124b0     40 00 90 CD |  if_b	jmp	#LR__1518
124b4     52 00 00 FF 
124b8     50 E4 05 F1 | 	add	objptr, ##42064
124bc     F2 24 02 FB | 	rdlong	local04, objptr
124c0     52 00 00 FF 
124c4     50 E4 85 F1 | 	sub	objptr, ##42064
124c8     12 23 02 F6 | 	mov	local03, local04
124cc     20 22 56 F2 | 	cmps	local03, #32 wc
124d0     20 00 90 3D |  if_ae	jmp	#LR__1518
124d4     52 00 00 FF 
124d8     50 E4 05 F1 | 	add	objptr, ##42064
124dc     F2 20 02 FB | 	rdlong	local02, objptr
124e0     09 20 86 F1 | 	sub	local02, #9
124e4     F2 20 62 FC | 	wrlong	local02, objptr
124e8     52 00 00 FF 
124ec     50 E4 85 F1 | 	sub	objptr, ##42064
124f0     54 00 90 FD | 	jmp	#LR__1520
124f4                 | LR__1518
124f4     52 00 00 FF 
124f8     50 E4 05 F1 | 	add	objptr, ##42064
124fc     F2 20 02 FB | 	rdlong	local02, objptr
12500     52 00 00 FF 
12504     50 E4 85 F1 | 	sub	objptr, ##42064
12508     0E 20 56 F2 | 	cmps	local02, #14 wc
1250c     38 00 90 CD |  if_b	jmp	#LR__1519
12510     52 00 00 FF 
12514     50 E4 05 F1 | 	add	objptr, ##42064
12518     F2 24 02 FB | 	rdlong	local04, objptr
1251c     52 00 00 FF 
12520     50 E4 85 F1 | 	sub	objptr, ##42064
12524     12 23 02 F6 | 	mov	local03, local04
12528     17 22 56 F2 | 	cmps	local03, #23 wc
1252c     52 00 00 CF 
12530     50 E4 05 C1 |  if_b	add	objptr, ##42064
12534     F2 20 02 CB |  if_b	rdlong	local02, objptr
12538     27 20 06 C1 |  if_b	add	local02, #39
1253c     F2 20 62 CC |  if_b	wrlong	local02, objptr
12540     52 00 00 CF 
12544     50 E4 85 C1 |  if_b	sub	objptr, ##42064
12548                 | LR__1519
12548                 | LR__1520
12548                 | LR__1521
12548                 | LR__1522
12548                 | LR__1523
12548                 | '  
12548                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
12548     52 00 00 FF 
1254c     50 E4 05 F1 | 	add	objptr, ##42064
12550     F2 20 02 FB | 	rdlong	local02, objptr
12554     52 00 00 FF 
12558     50 E4 85 F1 | 	sub	objptr, ##42064
1255c     01 20 56 F2 | 	cmps	local02, #1 wc
12560     90 00 90 CD |  if_b	jmp	#LR__1524
12564     52 00 00 FF 
12568     50 E4 05 F1 | 	add	objptr, ##42064
1256c     F2 24 02 FB | 	rdlong	local04, objptr
12570     52 00 00 FF 
12574     50 E4 85 F1 | 	sub	objptr, ##42064
12578     12 23 02 F6 | 	mov	local03, local04
1257c     7F 22 56 F2 | 	cmps	local03, #127 wc
12580     38 E4 05 C1 |  if_b	add	objptr, #56
12584     F2 1E E2 CA |  if_b	rdword	local01, objptr
12588     38 E4 85 C1 |  if_b	sub	objptr, #56
1258c     0F 27 32 C9 |  if_b	getword	local05, local01, #0
12590     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
12594     5C 00 90 3D |  if_ae	jmp	#LR__1524
12598     52 00 00 FF 
1259c     50 E4 05 F1 | 	add	objptr, ##42064
125a0     F2 12 02 FB | 	rdlong	arg01, objptr
125a4     52 00 00 FF 
125a8     50 E4 85 F1 | 	sub	objptr, ##42064
125ac     38 4B B0 FD | 	call	#__system__Chr_S
125b0     FD 2A 02 F6 | 	mov	local07, result1
125b4     2D 00 00 FF 
125b8     E0 E5 05 F1 | 	add	objptr, ##23520
125bc     F2 12 02 FB | 	rdlong	arg01, objptr
125c0     2D 00 00 FF 
125c4     E0 E5 85 F1 | 	sub	objptr, ##23520
125c8     15 15 02 F6 | 	mov	arg02, local07
125cc     A0 29 B0 FD | 	call	#__system___string_concat
125d0     2D 00 00 FF 
125d4     E0 E5 05 F1 | 	add	objptr, ##23520
125d8     F2 FA 61 FC | 	wrlong	result1, objptr
125dc     24 00 00 FF 
125e0     70 E4 05 F1 | 	add	objptr, ##18544
125e4     F2 12 02 FB | 	rdlong	arg01, objptr
125e8     52 00 00 FF 
125ec     50 E4 85 F1 | 	sub	objptr, ##42064
125f0     E0 16 B0 FD | 	call	#_hg010b_spin2_putchar
125f4                 | LR__1524
125f4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0) 'end of line reached
125f4     52 00 00 FF 
125f8     50 E4 05 F1 | 	add	objptr, ##42064
125fc     F2 20 02 FB | 	rdlong	local02, objptr
12600     52 00 00 FF 
12604     50 E4 85 F1 | 	sub	objptr, ##42064
12608     01 20 56 F2 | 	cmps	local02, #1 wc
1260c     D0 00 90 CD |  if_b	jmp	#LR__1525
12610     52 00 00 FF 
12614     50 E4 05 F1 | 	add	objptr, ##42064
12618     F2 24 02 FB | 	rdlong	local04, objptr
1261c     52 00 00 FF 
12620     50 E4 85 F1 | 	sub	objptr, ##42064
12624     12 23 02 F6 | 	mov	local03, local04
12628     7F 22 56 F2 | 	cmps	local03, #127 wc
1262c     B0 00 90 3D |  if_ae	jmp	#LR__1525
12630     38 E4 05 F1 | 	add	objptr, #56
12634     F2 1E E2 FA | 	rdword	local01, objptr
12638     38 E4 85 F1 | 	sub	objptr, #56
1263c     0F 27 32 F9 | 	getword	local05, local01, #0
12640     FE 26 0E F2 | 	cmp	local05, #254 wz
12644     50 00 00 AF 
12648     A4 E5 05 A1 |  if_e	add	objptr, ##41380
1264c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
12650     50 00 00 AF 
12654     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
12658     16 2F 02 A6 |  if_e	mov	local09, local08
1265c     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
12660     7C 00 90 5D |  if_ne	jmp	#LR__1525
12664     04 00 00 FF 
12668     94 EA 05 F1 | 	add	ptr__dat__, ##2196
1266c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12670     04 00 00 FF 
12674     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
12678     56 00 00 FF 
1267c     44 22 06 F6 | 	mov	local03, ##44100
12680     0E 24 C6 F9 | 	decod	local04, #14
12684     00 26 06 F6 | 	mov	local05, #0
12688     03 00 00 FF 
1268c     DE 1E 06 F6 | 	mov	local01, ##1758
12690     07 12 06 F6 | 	mov	arg01, #7
12694     56 00 00 FF 
12698     44 16 06 F6 | 	mov	arg03, ##44100
1269c     0E 18 C6 F9 | 	decod	arg04, #14
126a0     00 1A 06 F6 | 	mov	arg05, #0
126a4     03 00 00 FF 
126a8     DE 1C 06 F6 | 	mov	arg06, ##1758
126ac     0B 00 00 FF 
126b0     C0 E4 05 F1 | 	add	objptr, ##5824
126b4     28 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
126b8     0B 00 00 FF 
126bc     C0 E4 85 F1 | 	sub	objptr, ##5824
126c0     2C 13 06 F6 | 	mov	arg01, #300
126c4     40 2B B0 FD | 	call	#__system___waitms
126c8     00 12 06 F6 | 	mov	arg01, #0
126cc     0B 00 00 FF 
126d0     C0 E4 05 F1 | 	add	objptr, ##5824
126d4     58 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
126d8     0B 00 00 FF 
126dc     C0 E4 85 F1 | 	sub	objptr, ##5824
126e0                 | LR__1525
126e0                 | '  
126e0                 | '   'tab
126e0                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
126e0     52 00 00 FF 
126e4     48 E4 05 F1 | 	add	objptr, ##42056
126e8     F2 20 02 FB | 	rdlong	local02, objptr
126ec     52 00 00 FF 
126f0     48 E4 85 F1 | 	sub	objptr, ##42056
126f4     10 21 E2 F8 | 	getbyte	local02, local02, #0
126f8     2B 20 0E F2 | 	cmp	local02, #43 wz
126fc     B4 00 90 5D |  if_ne	jmp	#LR__1526
12700     38 E4 05 F1 | 	add	objptr, #56
12704     F2 24 E2 FA | 	rdword	local04, objptr
12708     38 E4 85 F1 | 	sub	objptr, #56
1270c     12 23 32 F9 | 	getword	local03, local04, #0
12710     F0 22 16 F2 | 	cmp	local03, #240 wc
12714     9C 00 90 CD |  if_b	jmp	#LR__1526
12718     50 00 00 FF 
1271c     A4 E5 05 F1 | 	add	objptr, ##41380
12720     F2 1E 02 FB | 	rdlong	local01, objptr
12724     50 00 00 FF 
12728     A4 E5 85 F1 | 	sub	objptr, ##41380
1272c     0F 27 02 F6 | 	mov	local05, local01
12730     01 26 0E F2 | 	cmp	local05, #1 wz
12734     7C 00 90 5D |  if_ne	jmp	#LR__1526
12738     04 00 00 FF 
1273c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
12740     F5 14 02 F6 | 	mov	arg02, ptr__dat__
12744     04 00 00 FF 
12748     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
1274c     56 00 00 FF 
12750     44 22 06 F6 | 	mov	local03, ##44100
12754     0E 24 C6 F9 | 	decod	local04, #14
12758     00 26 06 F6 | 	mov	local05, #0
1275c     03 00 00 FF 
12760     DE 1E 06 F6 | 	mov	local01, ##1758
12764     00 12 06 F6 | 	mov	arg01, #0
12768     56 00 00 FF 
1276c     44 16 06 F6 | 	mov	arg03, ##44100
12770     0E 18 C6 F9 | 	decod	arg04, #14
12774     00 1A 06 F6 | 	mov	arg05, #0
12778     03 00 00 FF 
1277c     DE 1C 06 F6 | 	mov	arg06, ##1758
12780     0B 00 00 FF 
12784     C0 E4 05 F1 | 	add	objptr, ##5824
12788     54 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
1278c     0B 00 00 FF 
12790     C0 E4 85 F1 | 	sub	objptr, ##5824
12794     2C 13 06 F6 | 	mov	arg01, #300
12798     6C 2A B0 FD | 	call	#__system___waitms
1279c     00 12 06 F6 | 	mov	arg01, #0
127a0     0B 00 00 FF 
127a4     C0 E4 05 F1 | 	add	objptr, ##5824
127a8     84 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
127ac     0B 00 00 FF 
127b0     C0 E4 85 F1 | 	sub	objptr, ##5824
127b4                 | LR__1526
127b4                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
127b4     52 00 00 FF 
127b8     48 E4 05 F1 | 	add	objptr, ##42056
127bc     F2 20 02 FB | 	rdlong	local02, objptr
127c0     52 00 00 FF 
127c4     48 E4 85 F1 | 	sub	objptr, ##42056
127c8     10 21 E2 F8 | 	getbyte	local02, local02, #0
127cc     2B 20 0E F2 | 	cmp	local02, #43 wz
127d0     AC 00 90 5D |  if_ne	jmp	#LR__1529
127d4     38 E4 05 F1 | 	add	objptr, #56
127d8     F2 24 E2 FA | 	rdword	local04, objptr
127dc     38 E4 85 F1 | 	sub	objptr, #56
127e0     12 23 32 F9 | 	getword	local03, local04, #0
127e4     F0 22 16 F2 | 	cmp	local03, #240 wc
127e8     94 00 90 3D |  if_ae	jmp	#LR__1529
127ec     38 E4 05 F1 | 	add	objptr, #56
127f0     F2 20 E2 FA | 	rdword	local02, objptr
127f4     10 23 52 F6 | 	abs	local03, local02 wc
127f8     11 23 42 F8 | 	getnib	local03, local03, #0
127fc     11 23 82 F6 | 	negc	local03, local03
12800     11 25 52 F6 | 	abs	local04, local03 wc
12804     01 24 46 F0 | 	shr	local04, #1
12808     12 25 82 F6 | 	negc	local04, local04
1280c     52 00 00 FF 
12810     1C E4 05 F1 | 	add	objptr, ##42012
12814     F2 24 62 FC | 	wrlong	local04, objptr
12818     12 31 02 F6 | 	mov	local10, local04
1281c     52 00 00 FF 
12820     54 E4 85 F1 | 	sub	objptr, ##42068
12824                 | LR__1527
12824     08 30 56 F2 | 	cmps	local10, #8 wc
12828     54 00 90 3D |  if_ae	jmp	#LR__1528
1282c     2D 00 00 FF 
12830     E0 E5 05 F1 | 	add	objptr, ##23520
12834     F2 12 02 FB | 	rdlong	arg01, objptr
12838     2D 00 00 FF 
1283c     E0 E5 85 F1 | 	sub	objptr, ##23520
12840     25 01 00 FF 
12844     B8 24 06 F6 | 	mov	local04, ##@LR__4401
12848     12 15 02 F6 | 	mov	arg02, local04
1284c     20 27 B0 FD | 	call	#__system___string_concat
12850     2D 00 00 FF 
12854     E0 E5 05 F1 | 	add	objptr, ##23520
12858     F2 FA 61 FC | 	wrlong	result1, objptr
1285c     2D 00 00 FF 
12860     E0 E5 85 F1 | 	sub	objptr, ##23520
12864     25 01 00 FF 
12868     BA 12 06 F6 | 	mov	arg01, ##@LR__4402
1286c     80 16 B0 FD | 	call	#_hg010b_spin2_write
12870     18 23 02 F6 | 	mov	local03, local10
12874     01 22 06 F1 | 	add	local03, #1
12878     11 31 02 F6 | 	mov	local10, local03
1287c     A4 FF 9F FD | 	jmp	#LR__1527
12880                 | LR__1528
12880                 | LR__1529
12880                 | '  
12880                 | '   'backspace
12880                 | '   if (key3 and 255) = 42 then 
12880     52 00 00 FF 
12884     48 E4 05 F1 | 	add	objptr, ##42056
12888     F2 20 02 FB | 	rdlong	local02, objptr
1288c     52 00 00 FF 
12890     48 E4 85 F1 | 	sub	objptr, ##42056
12894     10 21 E2 F8 | 	getbyte	local02, local02, #0
12898     2A 20 0E F2 | 	cmp	local02, #42 wz
1289c     D4 00 90 5D |  if_ne	jmp	#LR__1534
128a0                 | '       if v.cursor_x>4 then 
128a0     38 E4 05 F1 | 	add	objptr, #56
128a4     F2 20 E2 FA | 	rdword	local02, objptr
128a8     38 E4 85 F1 | 	sub	objptr, #56
128ac     05 20 16 F2 | 	cmp	local02, #5 wc
128b0     9C 00 90 CD |  if_b	jmp	#LR__1532
128b4     2D 00 00 FF 
128b8     E0 E5 05 F1 | 	add	objptr, ##23520
128bc     F2 26 02 FB | 	rdlong	local05, objptr
128c0     2D 00 00 FF 
128c4     E0 E5 85 F1 | 	sub	objptr, ##23520
128c8     13 13 02 F6 | 	mov	arg01, local05
128cc     09 33 02 F6 | 	mov	local11, arg01
128d0     97 06 48 FB | 	callpa	#(@LR__1531-@LR__1530)>>2,fcache_load_ptr_
128d4                 | LR__1530
128d4     19 FB C9 FA | 	rdbyte	result1, local11 wz
128d8     01 32 06 51 |  if_ne	add	local11, #1
128dc     F4 FF 9F 5D |  if_ne	jmp	#LR__1530
128e0                 | LR__1531
128e0     09 33 82 F1 | 	sub	local11, arg01
128e4     19 15 02 F6 | 	mov	arg02, local11
128e8     01 14 86 F1 | 	sub	arg02, #1
128ec     13 13 02 F6 | 	mov	arg01, local05
128f0     30 46 B0 FD | 	call	#__system__Left_S
128f4     2D 00 00 FF 
128f8     E0 E5 05 F1 | 	add	objptr, ##23520
128fc     F2 FA 61 FC | 	wrlong	result1, objptr
12900     2D 00 00 FF 
12904     A8 E5 85 F1 | 	sub	objptr, ##23464
12908     F2 12 E2 FA | 	rdword	arg01, objptr
1290c     02 12 86 F1 | 	sub	arg01, #2
12910     02 E4 05 F1 | 	add	objptr, #2
12914     F2 14 C2 FA | 	rdbyte	arg02, objptr
12918     3A E4 85 F1 | 	sub	objptr, #58
1291c     6C 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
12920     20 12 06 F6 | 	mov	arg01, #32
12924     AC 13 B0 FD | 	call	#_hg010b_spin2_putchar
12928     38 E4 05 F1 | 	add	objptr, #56
1292c     F2 12 E2 FA | 	rdword	arg01, objptr
12930     02 12 86 F1 | 	sub	arg01, #2
12934     02 E4 05 F1 | 	add	objptr, #2
12938     F2 24 C2 FA | 	rdbyte	local04, objptr
1293c     3A E4 85 F1 | 	sub	objptr, #58
12940     12 23 E2 F8 | 	getbyte	local03, local04, #0
12944     11 15 02 F6 | 	mov	arg02, local03
12948     40 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1294c     24 00 90 FD | 	jmp	#LR__1533
12950                 | LR__1532
12950     25 01 00 FF 
12954     BC 20 06 F6 | 	mov	local02, ##@LR__4403
12958     2D 00 00 FF 
1295c     E0 E5 05 F1 | 	add	objptr, ##23520
12960     F2 20 62 FC | 	wrlong	local02, objptr
12964     2D 00 00 FF 
12968     A8 E5 85 F1 | 	sub	objptr, ##23464
1296c     F2 08 58 FC | 	wrword	#4, objptr
12970     38 E4 85 F1 | 	sub	objptr, #56
12974                 | LR__1533
12974                 | LR__1534
12974                 | '    
12974                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
12974                 | '  
12974                 | '   if key4=key_enter then 
12974     52 00 00 FF 
12978     50 E4 05 F1 | 	add	objptr, ##42064
1297c     F2 28 02 FB | 	rdlong	local06, objptr
12980     52 00 00 FF 
12984     50 E4 85 F1 | 	sub	objptr, ##42064
12988     8D 28 0E F2 | 	cmp	local06, #141 wz
1298c     50 00 90 5D |  if_ne	jmp	#LR__1535
12990     BC 16 B0 FD | 	call	#_hg010b_spin2_crlf
12994     84 E0 BE FD | 	call	#_interpret
12998     25 01 00 FF 
1299c     BD 20 06 F6 | 	mov	local02, ##@LR__4404
129a0     2D 00 00 FF 
129a4     E0 E5 05 F1 | 	add	objptr, ##23520
129a8     F2 20 62 FC | 	wrlong	local02, objptr
129ac     1A FA 61 FD | 	getct	result1
129b0     24 00 00 FF 
129b4     78 E4 05 F1 | 	add	objptr, ##18552
129b8     F2 24 02 FB | 	rdlong	local04, objptr
129bc     12 23 02 F6 | 	mov	local03, local04
129c0     11 FB 81 F1 | 	sub	result1, local03
129c4     F2 FA 61 FC | 	wrlong	result1, objptr
129c8     14 E4 85 F1 | 	sub	objptr, #20
129cc     F2 00 68 FC | 	wrlong	#0, objptr
129d0     08 E4 05 F1 | 	add	objptr, #8
129d4     F2 00 68 FC | 	wrlong	#0, objptr
129d8     52 00 00 FF 
129dc     4C E4 85 F1 | 	sub	objptr, ##42060
129e0                 | LR__1535
129e0     52 00 00 FF 
129e4     48 E4 05 F1 | 	add	objptr, ##42056
129e8     F2 00 68 FC | 	wrlong	#0, objptr
129ec     52 00 00 FF 
129f0     48 E4 85 F1 | 	sub	objptr, ##42056
129f4     8C F6 9F FD | 	jmp	#LR__1510
129f8     A7 F0 03 F6 | 	mov	ptra, fp
129fc     B2 00 A0 FD | 	call	#popregs_
12a00                 | _program_ret
12a00     2D 00 64 FD | 	ret
12a04                 | 
12a04                 | ' '' this is not a main program.
12a04                 | ' 
12a04                 | ' '****************************************************************************************************************
12a04                 | ' '                                                                                                             	*
12a04                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
12a04                 | ' '                                                                                                            	*
12a04                 | ' ' mode - mode #, see below											*
12a04                 | ' ' base - HDMI base pin												*
12a04                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
12a04                 | ' '														*
12a04                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
12a04                 | ' '' set bit #15 for custom timings														*
12a04                 | ' '' p - 1 - psram, 0 - hub											*
12a04                 | ' '' t - 1 - graphics, 0 - text											*
12a04                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
12a04                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
12a04                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
12a04                 | ' '														*
12a04                 | ' '****************************************************************************************************************
12a04                 | ' 
12a04                 | ' pub start(base,mb):result |i
12a04                 | _hg010b_spin2_start
12a04                 | ' 
12a04                 | ' '--------------------------- initialize pointers and variables
12a04                 | ' 
12a04                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
12a04     30 E4 05 F1 | 	add	objptr, #48
12a08     F2 FA 01 F6 | 	mov	result1, objptr
12a0c     28 E4 85 F1 | 	sub	objptr, #40
12a10     F2 FA 61 FC | 	wrlong	result1, objptr
12a14                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
12a14                 | ' hdmibase:=base							' HDMI base pin, 8*n
12a14     18 E4 05 F1 | 	add	objptr, #24
12a18     F2 12 62 FC | 	wrlong	arg01, objptr
12a1c                 | ' mailbox_ptr:=mb		
12a1c     04 E4 05 F1 | 	add	objptr, #4
12a20     F2 14 62 FC | 	wrlong	arg02, objptr
12a24                 | ' mailbox0:=mb				' PSRAM mailbox pointer
12a24     C1 E5 05 F1 | 	add	objptr, #449
12a28     F2 14 62 FC | 	wrlong	arg02, objptr
12a2c                 | ' sprite_ptr:=@spr1ptr
12a2c     D8 E4 85 F1 | 	sub	objptr, #216
12a30     F2 FA 01 F6 | 	mov	result1, objptr
12a34     E5 E4 85 F1 | 	sub	objptr, #229
12a38     F2 FA 61 FC | 	wrlong	result1, objptr
12a3c                 | ' 
12a3c                 | ' 		'
12a3c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
12a3c     E5 E4 05 F1 | 	add	objptr, #229
12a40     F2 FA 01 FB | 	rdlong	result1, objptr
12a44     D0 FA 05 F1 | 	add	result1, #208
12a48     FD 10 58 FC | 	wrword	#8, result1
12a4c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
12a4c     F2 16 02 FB | 	rdlong	arg03, objptr
12a50     D2 16 06 F1 | 	add	arg03, #210
12a54     0B 21 58 FC | 	wrword	#16, arg03
12a58                 | ' leading_spaces:=0				'
12a58     A5 E5 05 F1 | 	add	objptr, #421
12a5c     F2 00 68 FC | 	wrlong	#0, objptr
12a60                 | ' 
12a60                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
12a60     99 E4 85 F1 | 	sub	objptr, #153
12a64     00 00 A0 FF 
12a68     F2 0E 68 FC | 	wrlong	##1073741831, objptr
12a6c                 | ' emptydl[1]:=0
12a6c     04 E4 05 F1 | 	add	objptr, #4
12a70     F2 00 68 FC | 	wrlong	#0, objptr
12a74                 | ' 
12a74                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
12a74                 | ' 
12a74                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
12a74     28 E5 85 F1 | 	sub	objptr, #296
12a78     F2 02 68 FC | 	wrlong	#1, objptr
12a7c                 | ' if s_debug<>0
12a7c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
12a7c     20 00 80 FF 
12a80     F2 00 68 FC | 	wrlong	##16384, objptr
12a84     F5 E4 85 F1 | 	sub	objptr, #245
12a88                 | ' setmode()							' set the mode, see below
12a88     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
12a8c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
12a8c     45 E4 05 F1 | 	add	objptr, #69
12a90     F2 FA 01 F6 | 	mov	result1, objptr
12a94     35 E4 85 F1 | 	sub	objptr, #53
12a98     F2 FA 61 FC | 	wrlong	result1, objptr
12a9c                 | ' cursor_ptr:=@cursor_x						
12a9c     28 E4 05 F1 | 	add	objptr, #40
12aa0     F2 16 02 F6 | 	mov	arg03, objptr
12aa4     2C E4 85 F1 | 	sub	objptr, #44
12aa8     F2 16 62 FC | 	wrlong	arg03, objptr
12aac                 | ' fontnum:=0  							' start with a PC type font 
12aac     55 E4 05 F1 | 	add	objptr, #85
12ab0     F2 00 68 FC | 	wrlong	#0, objptr
12ab4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
12ab4     1C E4 05 F1 | 	add	objptr, #28
12ab8     F2 12 02 F6 | 	mov	arg01, objptr
12abc     7D E4 85 F1 | 	sub	objptr, #125
12ac0     10 00 00 FF 
12ac4     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
12ac8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
12acc     10 00 00 FF 
12ad0     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
12ad4     10 16 06 F6 | 	mov	arg03, #16
12ad8     58 23 B0 FD | 	call	#__system____builtin_memmove
12adc                 | ' leading_spaces:=0
12adc     01 00 00 FF 
12ae0     B2 E4 05 F1 | 	add	objptr, ##690
12ae4     F2 00 68 FC | 	wrlong	#0, objptr
12ae8     01 00 00 FF 
12aec     B2 E4 85 F1 | 	sub	objptr, ##690
12af0                 | ' '---------------------------- initialize a cursor (MSDOS type)
12af0                 | ' 
12af0                 | ' initcursor(154)
12af0     9A 12 06 F6 | 	mov	arg01, #154
12af4     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
12af8                 | ' 
12af8                 | ' '---------------------------- start the cog
12af8                 | ' 
12af8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
12af8     10 00 00 FF 
12afc     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
12b00     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
12b04     10 00 00 FF 
12b08     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
12b0c     10 E4 05 F1 | 	add	objptr, #16
12b10     10 FA 05 F6 | 	mov	result1, #16
12b14     28 E4 61 FD | 	setq	objptr
12b18     0A FB F1 FC | 	coginit	result1, arg02 wc
12b1c     01 FA 65 C6 |  if_b	neg	result1, #1
12b20     1C E4 05 F1 | 	add	objptr, #28
12b24     F2 FA 61 FC | 	wrlong	result1, objptr
12b28     2C E4 85 F1 | 	sub	objptr, #44
12b2c                 | ' waitms(40)							' wait for stabilize
12b2c     28 12 06 F6 | 	mov	arg01, #40
12b30     D4 26 B0 FD | 	call	#__system___waitms
12b34                 | ' return cog							' return the driver's cog #
12b34     2C E4 05 F1 | 	add	objptr, #44
12b38     F2 FA 01 FB | 	rdlong	result1, objptr
12b3c     2C E4 85 F1 | 	sub	objptr, #44
12b40                 | _hg010b_spin2_start_ret
12b40     2D 00 64 FD | 	ret
12b44                 | 
12b44                 | ' 
12b44                 | ' 
12b44                 | ' '**************************************************************************************************************** 
12b44                 | ' '                                                                                                             	*
12b44                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
12b44                 | ' '  Mode number - see start() above or bits below								*
12b44                 | ' '                                                                                                             	*
12b44                 | ' '****************************************************************************************************************
12b44                 | ' 
12b44                 | ' '---------------------------- initialize a cursor (MSDOS type)
12b44                 | ' pub initcursor(color) |i
12b44                 | _hg010b_spin2_initcursor
12b44     03 4A 05 F6 | 	mov	COUNT_, #3
12b48     A8 00 A0 FD | 	call	#pushregs_
12b4c     09 1F 02 F6 | 	mov	local01, arg01
12b50                 | ' 
12b50                 | ' cursor_x:=0							' place the cursor at 0:0
12b50     38 E4 05 F1 | 	add	objptr, #56
12b54     F2 00 58 FC | 	wrword	#0, objptr
12b58                 | ' cursor_y:=0
12b58     02 E4 05 F1 | 	add	objptr, #2
12b5c     F2 00 48 FC | 	wrbyte	#0, objptr
12b60                 | ' repeat i from 0 to 111
12b60     00 20 06 F6 | 	mov	local02, #0
12b64     F8 E5 05 F1 | 	add	objptr, #504
12b68     97 1A 48 FB | 	callpa	#(@LR__1542-@LR__1540)>>2,fcache_load_ptr_
12b6c                 | LR__1540
12b6c                 | '   cursor[i]:=0
12b6c     10 23 02 F6 | 	mov	local03, local02
12b70     F2 22 02 F1 | 	add	local03, objptr
12b74     11 01 48 FC | 	wrbyte	#0, local03
12b78     01 20 06 F1 | 	add	local02, #1
12b7c     70 20 56 F2 | 	cmps	local02, #112 wc
12b80     E8 FF 9F CD |  if_b	jmp	#LR__1540
12b84                 | ' repeat i from 112 to 127
12b84     70 20 06 F6 | 	mov	local02, #112
12b88                 | LR__1541
12b88                 | '   cursor[i]:=color  
12b88     10 23 02 F6 | 	mov	local03, local02
12b8c     F2 22 02 F1 | 	add	local03, objptr
12b90     11 1F 42 FC | 	wrbyte	local01, local03
12b94     01 20 06 F1 | 	add	local02, #1
12b98     80 20 16 F2 | 	cmp	local02, #128 wc
12b9c     E8 FF 9F CD |  if_b	jmp	#LR__1541
12ba0                 | LR__1542
12ba0                 | ' 'repeat i from 0 to 127
12ba0                 | ' '  if ((i/8)//2)
12ba0                 | ' '    cursor[i]:=15
12ba0                 | ' '  else
12ba0                 | ' '    cursor[i]:=0
12ba0                 | ' '  if i>=120    
12ba0                 | ' '    cursor[i]:=40
12ba0                 | ' setspriteptr(17,@cursor)
12ba0     F2 14 02 F6 | 	mov	arg02, objptr
12ba4     01 00 00 FF 
12ba8     32 E4 85 F1 | 	sub	objptr, ##562
12bac     11 12 06 F6 | 	mov	arg01, #17
12bb0     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
12bb4                 | ' setspritesize(17,8,16)
12bb4     11 12 06 F6 | 	mov	arg01, #17
12bb8     08 14 06 F6 | 	mov	arg02, #8
12bbc     10 16 06 F6 | 	mov	arg03, #16
12bc0     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
12bc4                 | ' setspritepos(17,0,0)
12bc4     11 12 06 F6 | 	mov	arg01, #17
12bc8     00 14 06 F6 | 	mov	arg02, #0
12bcc     00 16 06 F6 | 	mov	arg03, #0
12bd0     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
12bd4     A7 F0 03 F6 | 	mov	ptra, fp
12bd8     B2 00 A0 FD | 	call	#popregs_
12bdc                 | _hg010b_spin2_initcursor_ret
12bdc     2D 00 64 FD | 	ret
12be0                 | 
12be0                 | ' 
12be0                 | '  
12be0                 | ' pub setcursorcolor(color) |i
12be0                 | _hg010b_spin2_setcursorcolor
12be0                 | ' 
12be0                 | ' 
12be0                 | ' repeat i from 0 to 111
12be0     00 00 06 F6 | 	mov	_var01, #0
12be4     01 00 00 FF 
12be8     32 E4 05 F1 | 	add	objptr, ##562
12bec     97 1A 48 FB | 	callpa	#(@LR__1552-@LR__1550)>>2,fcache_load_ptr_
12bf0                 | LR__1550
12bf0                 | '   cursor[i]:=0
12bf0     00 03 02 F6 | 	mov	_var02, _var01
12bf4     F2 02 02 F1 | 	add	_var02, objptr
12bf8     01 01 48 FC | 	wrbyte	#0, _var02
12bfc     01 00 06 F1 | 	add	_var01, #1
12c00     70 00 56 F2 | 	cmps	_var01, #112 wc
12c04     E8 FF 9F CD |  if_b	jmp	#LR__1550
12c08                 | ' repeat i from 112 to 127
12c08     70 00 06 F6 | 	mov	_var01, #112
12c0c                 | LR__1551
12c0c                 | '   cursor[i]:=color  
12c0c     00 03 02 F6 | 	mov	_var02, _var01
12c10     F2 02 02 F1 | 	add	_var02, objptr
12c14     01 13 42 FC | 	wrbyte	arg01, _var02
12c18     01 00 06 F1 | 	add	_var01, #1
12c1c     80 00 16 F2 | 	cmp	_var01, #128 wc
12c20     E8 FF 9F CD |  if_b	jmp	#LR__1551
12c24                 | LR__1552
12c24     01 00 00 FF 
12c28     32 E4 85 F1 | 	sub	objptr, ##562
12c2c                 | _hg010b_spin2_setcursorcolor_ret
12c2c     2D 00 64 FD | 	ret
12c30                 | 
12c30                 | '  
12c30                 | ' 
12c30                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
12c30                 | _hg010b_spin2_setmode
12c30     02 4A 05 F6 | 	mov	COUNT_, #2
12c34     A8 00 A0 FD | 	call	#pushregs_
12c38                 | ' 
12c38                 | ' 
12c38                 | ' dl_ptr:=@emptydl[0]
12c38     01 00 00 FF 
12c3c     19 E4 05 F1 | 	add	objptr, ##537
12c40     F2 60 02 F6 | 	mov	muldivb_, objptr
12c44     FD E5 85 F1 | 	sub	objptr, #509
12c48     F2 60 62 FC | 	wrlong	muldivb_, objptr
12c4c                 | ' 
12c4c                 | ' if cog>0 
12c4c     10 E4 05 F1 | 	add	objptr, #16
12c50     F2 60 02 FB | 	rdlong	muldivb_, objptr
12c54     2C E4 85 F1 | 	sub	objptr, #44
12c58     01 60 56 F2 | 	cmps	muldivb_, #1 wc
12c5c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
12c5c     01 12 06 36 |  if_ae	mov	arg01, #1
12c60     60 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
12c64                 | ' xres:=1024
12c64     01 00 00 FF 
12c68     22 E4 05 F1 | 	add	objptr, ##546
12c6c     02 00 80 FF 
12c70     F2 00 68 FC | 	wrlong	##1024, objptr
12c74                 | ' yres:=576  
12c74     04 E4 05 F1 | 	add	objptr, #4
12c78     01 00 80 FF 
12c7c     F2 80 68 FC | 	wrlong	##576, objptr
12c80                 | ' ppl:=(timings[3])
12c80     10 00 00 FF 
12c84     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
12c88     F7 60 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
12c8c     51 E5 85 F1 | 	sub	objptr, #337
12c90     F2 60 62 FC | 	wrlong	muldivb_, objptr
12c94                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
12c94     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
12c98     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
12c9c     01 1E 66 F0 | 	shl	local01, #1
12ca0     80 E4 85 F1 | 	sub	objptr, #128
12ca4     F2 1E 62 FC | 	wrlong	local01, objptr
12ca8                 | ' cpl1:=cpl '' todo remove
12ca8     04 E4 05 F1 | 	add	objptr, #4
12cac     F2 1E 62 FC | 	wrlong	local01, objptr
12cb0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
12cb0     02 00 00 FF 
12cb4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
12cb8     41 E4 85 F1 | 	sub	objptr, #65
12cbc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
12cc0                 | ' repeat i from 0 to 3
12cc0     00 20 06 F6 | 	mov	local02, #0
12cc4     02 00 00 FF 
12cc8     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
12ccc     08 E4 05 F1 | 	add	objptr, #8
12cd0     97 20 48 FB | 	callpa	#(@LR__1561-@LR__1560)>>2,fcache_load_ptr_
12cd4                 | LR__1560
12cd4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
12cd4     10 1F 02 F6 | 	mov	local01, local02
12cd8     02 1E 66 F0 | 	shl	local01, #2
12cdc     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
12ce0     F2 60 02 FB | 	rdlong	muldivb_, objptr
12ce4     11 60 66 F0 | 	shl	muldivb_, #17
12ce8     0F 1F 02 FB | 	rdlong	local01, local01
12cec     30 1F 02 F1 | 	add	local01, muldivb_
12cf0     80 40 38 FF 
12cf4     00 1E 06 F1 | 	add	local01, ##1887502336
12cf8     10 61 02 F6 | 	mov	muldivb_, local02
12cfc     02 60 66 F0 | 	shl	muldivb_, #2
12d00     F7 60 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
12d04     30 1F 62 FC | 	wrlong	local01, muldivb_
12d08     01 20 06 F1 | 	add	local02, #1
12d0c     04 20 56 F2 | 	cmps	local02, #4 wc
12d10     C0 FF 9F CD |  if_b	jmp	#LR__1560
12d14                 | LR__1561
12d14     20 E4 85 F1 | 	sub	objptr, #32
12d18                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
12d18     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
12d1c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
12d20     14 1E 66 FC | 	wrlong	local01, #20
12d24                 | ' hubset(timings[10])
12d24     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
12d28     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
12d2c     10 00 00 FF 
12d30     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
12d34     00 12 62 FD | 	hubset	arg01
12d38                 | ' waitms(1)                                                   	' wait for stabilization
12d38     01 12 06 F6 | 	mov	arg01, #1
12d3c     C8 24 B0 FD | 	call	#__system___waitms
12d40     10 00 00 FF 
12d44     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
12d48     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
12d4c     5D E4 05 F1 | 	add	objptr, #93
12d50     F2 20 62 FC | 	wrlong	local02, objptr
12d54     10 1F 52 F6 | 	abs	local01, local02 wc
12d58     04 1E 46 F0 | 	shr	local01, #4
12d5c     0F 1F 82 F6 | 	negc	local01, local01
12d60     9C E4 05 F1 | 	add	objptr, #156
12d64     F2 1E 62 FC | 	wrlong	local01, objptr
12d68     A4 E4 85 F1 | 	sub	objptr, #164
12d6c     F2 20 02 FB | 	rdlong	local02, objptr
12d70     08 E4 05 F1 | 	add	objptr, #8
12d74     F2 1E 02 FB | 	rdlong	local01, objptr
12d78     0F 21 02 FD | 	qmul	local02, local01
12d7c                 | ' lines:=timings[11]
12d7c                 | ' t_lines:=lines/16
12d7c                 | ' buflen:=cpl*lines						' framebuffer length in longs
12d7c     29 E4 85 F1 | 	sub	objptr, #41
12d80                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
12d80     19 1E C6 F9 | 	decod	local01, #25
12d84                 | ' mode_ptr:=@timings						' set pointers to timings
12d84     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
12d88                 | ' graphmode:=1024+512+192+48							' det global variable
12d88                 | ' makedl(graphmode)							' make a DL for the mode
12d88     03 00 00 FF 
12d8c     F0 12 06 F6 | 	mov	arg01, ##1776
12d90     18 20 62 FD | 	getqx	local02
12d94     F2 20 62 FC | 	wrlong	local02, objptr
12d98     34 E4 85 F1 | 	sub	objptr, #52
12d9c     02 20 66 F0 | 	shl	local02, #2
12da0     10 1F 82 F1 | 	sub	local01, local02
12da4     F2 1E 62 FC | 	wrlong	local01, objptr
12da8     14 E4 05 F1 | 	add	objptr, #20
12dac     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
12db0     79 E4 05 F1 | 	add	objptr, #121
12db4     03 00 80 FF 
12db8     F2 E0 69 FC | 	wrlong	##1776, objptr
12dbc     8D E4 85 F1 | 	sub	objptr, #141
12dc0     10 00 00 FF 
12dc4     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
12dc8     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
12dcc                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
12dcc     F2 1E 02 FB | 	rdlong	local01, objptr
12dd0     D9 E4 05 F1 | 	add	objptr, #217
12dd4     F2 1E 62 FC | 	wrlong	local01, objptr
12dd8                 | ' s_font_ptr:=font_ptr
12dd8     D5 E4 85 F1 | 	sub	objptr, #213
12ddc     F2 1E 02 FB | 	rdlong	local01, objptr
12de0     D9 E4 05 F1 | 	add	objptr, #217
12de4     F2 1E 62 FC | 	wrlong	local01, objptr
12de8                 | ' s_lines:=lines
12de8     80 E4 85 F1 | 	sub	objptr, #128
12dec     F2 1E 02 FB | 	rdlong	local01, objptr
12df0     84 E4 05 F1 | 	add	objptr, #132
12df4     F2 1E 62 FC | 	wrlong	local01, objptr
12df8                 | ' s_buflen:=buflen
12df8     AD E4 85 F1 | 	sub	objptr, #173
12dfc     F2 1E 02 FB | 	rdlong	local01, objptr
12e00     B5 E4 05 F1 | 	add	objptr, #181
12e04     F2 1E 62 FC | 	wrlong	local01, objptr
12e08                 | ' s_cpl:=cpl
12e08     94 E4 85 F1 | 	sub	objptr, #148
12e0c     F2 1E 02 FB | 	rdlong	local01, objptr
12e10     90 E4 05 F1 | 	add	objptr, #144
12e14     F2 1E 62 FC | 	wrlong	local01, objptr
12e18                 | ' s_cpl1:=cpl
12e18     90 E4 85 F1 | 	sub	objptr, #144
12e1c     F2 1E 02 FB | 	rdlong	local01, objptr
12e20     98 E4 05 F1 | 	add	objptr, #152
12e24     F2 1E 62 FC | 	wrlong	local01, objptr
12e28                 | ' st_lines:=t_lines
12e28     0C E4 05 F1 | 	add	objptr, #12
12e2c     F2 1E 02 FB | 	rdlong	local01, objptr
12e30     04 E4 05 F1 | 	add	objptr, #4
12e34     F2 1E 62 FC | 	wrlong	local01, objptr
12e38                 | ' ppl:=ppl/xzoom  
12e38     28 E4 85 F1 | 	sub	objptr, #40
12e3c     F2 5E 02 FB | 	rdlong	muldiva_, objptr
12e40     2C E4 05 F1 | 	add	objptr, #44
12e44     F2 60 02 FB | 	rdlong	muldivb_, objptr
12e48     01 E5 85 F1 | 	sub	objptr, #257
12e4c     BA 00 A0 FD | 	call	#divide_
12e50     D5 E4 05 F1 | 	add	objptr, #213
12e54     F2 60 62 FC | 	wrlong	muldivb_, objptr
12e58                 | ' s_ppl:=ppl
12e58     1C E4 05 F1 | 	add	objptr, #28
12e5c     F2 60 62 FC | 	wrlong	muldivb_, objptr
12e60     F1 E4 85 F1 | 	sub	objptr, #241
12e64                 | ' waitms(20)							' wait 
12e64     14 12 06 F6 | 	mov	arg01, #20
12e68     9C 23 B0 FD | 	call	#__system___waitms
12e6c     A7 F0 03 F6 | 	mov	ptra, fp
12e70     B2 00 A0 FD | 	call	#popregs_
12e74                 | _hg010b_spin2_setmode_ret
12e74     2D 00 64 FD | 	ret
12e78                 | 
12e78                 | ' 
12e78                 | ' 
12e78                 | ' '****************************************************************************************************************
12e78                 | ' '                                                                                                             	*
12e78                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
12e78                 | ' '                                                                                                             	*
12e78                 | ' '****************************************************************************************************************
12e78                 | ' 
12e78                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
12e78                 | _hg010b_spin2_makedl
12e78                 | ' 
12e78                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
12e78                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
12e78                 | ' repeat i from 0 to 11                                                           ' clear DL
12e78     00 00 06 F6 | 	mov	_var01, #0
12e7c     E9 E5 05 F1 | 	add	objptr, #489
12e80     97 0E 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
12e84                 | LR__1570
12e84                 | '   displaylist[i]:=0 
12e84     00 03 02 F6 | 	mov	_var02, _var01
12e88     02 02 66 F0 | 	shl	_var02, #2
12e8c     F2 02 02 F1 | 	add	_var02, objptr
12e90     01 01 68 FC | 	wrlong	#0, _var02
12e94     01 00 06 F1 | 	add	_var01, #1
12e98     0C 00 56 F2 | 	cmps	_var01, #12 wc
12e9c     E4 FF 9F CD |  if_b	jmp	#LR__1570
12ea0                 | LR__1571
12ea0                 | '                         ' 
12ea0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
12ea0     8C E5 85 F1 | 	sub	objptr, #396
12ea4     F2 02 02 FB | 	rdlong	_var02, objptr
12ea8     14 02 66 F0 | 	shl	_var02, #20
12eac     01 02 06 F1 | 	add	_var02, #1
12eb0     04 E4 85 F1 | 	sub	objptr, #4
12eb4     F2 00 02 FB | 	rdlong	_var01, objptr
12eb8     02 00 66 F0 | 	shl	_var01, #2
12ebc     04 00 66 F0 | 	shl	_var01, #4
12ec0     00 03 02 F1 | 	add	_var02, _var01
12ec4     90 E5 05 F1 | 	add	objptr, #400
12ec8     F2 02 62 FC | 	wrlong	_var02, objptr
12ecc     E9 E5 85 F1 | 	sub	objptr, #489
12ed0                 | ' displaylist[1]:=buf_ptr<<4+%10  
12ed0     F2 02 02 FB | 	rdlong	_var02, objptr
12ed4     04 02 66 F0 | 	shl	_var02, #4
12ed8     02 02 06 F1 | 	add	_var02, #2
12edc     ED E5 05 F1 | 	add	objptr, #493
12ee0     F2 02 62 FC | 	wrlong	_var02, objptr
12ee4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
12ee4     04 E4 85 F1 | 	sub	objptr, #4
12ee8     F2 02 02 F6 | 	mov	_var02, objptr
12eec     CD E5 85 F1 | 	sub	objptr, #461
12ef0     F2 02 62 FC | 	wrlong	_var02, objptr
12ef4     1C E4 85 F1 | 	sub	objptr, #28
12ef8                 | _hg010b_spin2_makedl_ret
12ef8     2D 00 64 FD | 	ret
12efc                 | 
12efc                 | ' 
12efc                 | ' 
12efc                 | ' '****************************************************************************************************************
12efc                 | ' '                                                                        					*
12efc                 | ' '  Graphic primitives                                                    					*
12efc                 | ' '                                                                        					*
12efc                 | ' '****************************************************************************************************************
12efc                 | ' 
12efc                 | ' pub setspriteptr(num,ptr)
12efc                 | _hg010b_spin2_setspriteptr
12efc                 | ' long[@spr1ptr+12*num]:=ptr
12efc     0D E5 05 F1 | 	add	objptr, #269
12f00     F2 00 02 F6 | 	mov	_var01, objptr
12f04     09 03 02 F6 | 	mov	_var02, arg01
12f08     01 02 66 F0 | 	shl	_var02, #1
12f0c     09 03 02 F1 | 	add	_var02, arg01
12f10     02 02 66 F0 | 	shl	_var02, #2
12f14     01 01 02 F1 | 	add	_var01, _var02
12f18     00 15 62 FC | 	wrlong	arg02, _var01
12f1c     0D E5 85 F1 | 	sub	objptr, #269
12f20                 | _hg010b_spin2_setspriteptr_ret
12f20     2D 00 64 FD | 	ret
12f24                 | 
12f24                 | ' 
12f24                 | ' pub setspritepos(num,x,y)
12f24                 | _hg010b_spin2_setspritepos
12f24                 | ' word[@spr1ptr+12*num+4]:=x
12f24     0D E5 05 F1 | 	add	objptr, #269
12f28     F2 00 02 F6 | 	mov	_var01, objptr
12f2c     09 03 02 F6 | 	mov	_var02, arg01
12f30     01 02 66 F0 | 	shl	_var02, #1
12f34     09 03 02 F1 | 	add	_var02, arg01
12f38     02 02 66 F0 | 	shl	_var02, #2
12f3c     01 01 02 F1 | 	add	_var01, _var02
12f40     04 00 06 F1 | 	add	_var01, #4
12f44     00 15 52 FC | 	wrword	arg02, _var01
12f48                 | ' word[@spr1ptr+12*num+6]:=y
12f48     F2 00 02 F6 | 	mov	_var01, objptr
12f4c     09 03 02 F6 | 	mov	_var02, arg01
12f50     01 02 66 F0 | 	shl	_var02, #1
12f54     09 03 02 F1 | 	add	_var02, arg01
12f58     02 02 66 F0 | 	shl	_var02, #2
12f5c     01 01 02 F1 | 	add	_var01, _var02
12f60     06 00 06 F1 | 	add	_var01, #6
12f64     00 17 52 FC | 	wrword	arg03, _var01
12f68     0D E5 85 F1 | 	sub	objptr, #269
12f6c                 | _hg010b_spin2_setspritepos_ret
12f6c     2D 00 64 FD | 	ret
12f70                 | 
12f70                 | ' 
12f70                 | ' pub setspritesize(num,w,h)
12f70                 | _hg010b_spin2_setspritesize
12f70                 | ' word[@spr1ptr+12*num+8]:=w
12f70     0D E5 05 F1 | 	add	objptr, #269
12f74     F2 00 02 F6 | 	mov	_var01, objptr
12f78     09 03 02 F6 | 	mov	_var02, arg01
12f7c     01 02 66 F0 | 	shl	_var02, #1
12f80     09 03 02 F1 | 	add	_var02, arg01
12f84     02 02 66 F0 | 	shl	_var02, #2
12f88     01 01 02 F1 | 	add	_var01, _var02
12f8c     08 00 06 F1 | 	add	_var01, #8
12f90     00 15 52 FC | 	wrword	arg02, _var01
12f94                 | ' word[@spr1ptr+12*num+10]:=h
12f94     F2 00 02 F6 | 	mov	_var01, objptr
12f98     09 03 02 F6 | 	mov	_var02, arg01
12f9c     01 02 66 F0 | 	shl	_var02, #1
12fa0     09 03 02 F1 | 	add	_var02, arg01
12fa4     02 02 66 F0 | 	shl	_var02, #2
12fa8     01 01 02 F1 | 	add	_var01, _var02
12fac     0A 00 06 F1 | 	add	_var01, #10
12fb0     00 17 52 FC | 	wrword	arg03, _var01
12fb4     0D E5 85 F1 | 	sub	objptr, #269
12fb8                 | _hg010b_spin2_setspritesize_ret
12fb8     2D 00 64 FD | 	ret
12fbc                 | 
12fbc                 | ' 
12fbc                 | ' 
12fbc                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
12fbc                 | ' 
12fbc                 | ' 
12fbc                 | ' pub putpixel(x,y,c)
12fbc                 | _hg010b_spin2_putpixel
12fbc     04 4A 05 F6 | 	mov	COUNT_, #4
12fc0     A8 00 A0 FD | 	call	#pushregs_
12fc4     09 1F 02 F6 | 	mov	local01, arg01
12fc8                 | ' 
12fc8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
12fc8     00 20 06 F6 | 	mov	local02, #0
12fcc     00 1E 56 F2 | 	cmps	local01, #0 wc
12fd0     01 20 66 36 |  if_ae	neg	local02, #1
12fd4     E5 E4 05 F1 | 	add	objptr, #229
12fd8     F2 1A 02 FB | 	rdlong	arg05, objptr
12fdc     02 1A 66 F0 | 	shl	arg05, #2
12fe0     0D 1F 52 F2 | 	cmps	local01, arg05 wc
12fe4     11 23 A2 F1 | 	subx	local03, local03
12fe8     11 21 02 F5 | 	and	local02, local03
12fec     00 22 06 F6 | 	mov	local03, #0
12ff0     00 14 56 F2 | 	cmps	arg02, #0 wc
12ff4     01 22 66 36 |  if_ae	neg	local03, #1
12ff8     11 21 02 F5 | 	and	local02, local03
12ffc     04 E4 85 F1 | 	sub	objptr, #4
13000     F2 22 02 FB | 	rdlong	local03, objptr
13004     E1 E4 85 F1 | 	sub	objptr, #225
13008     11 15 52 F2 | 	cmps	arg02, local03 wc
1300c     12 25 A2 F1 | 	subx	local04, local04
13010     12 21 CA F7 | 	test	local02, local04 wz
13014     48 00 90 AD |  if_e	jmp	#LR__1580
13018     D9 E4 05 F1 | 	add	objptr, #217
1301c     F2 12 02 FB | 	rdlong	arg01, objptr
13020     14 E4 05 F1 | 	add	objptr, #20
13024     F2 24 02 FB | 	rdlong	local04, objptr
13028     02 24 66 F0 | 	shl	local04, #2
1302c     0A 25 02 FD | 	qmul	local04, arg02
13030                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
13030     0B 15 02 F6 | 	mov	arg02, arg03
13034     01 16 06 F6 | 	mov	arg03, #1
13038     00 18 06 F6 | 	mov	arg04, #0
1303c     01 1A 06 F6 | 	mov	arg05, #1
13040     0A 00 00 FF 
13044     D3 E5 05 F1 | 	add	objptr, ##5587
13048     18 24 62 FD | 	getqx	local04
1304c     0F 25 02 F1 | 	add	local04, local01
13050     12 13 02 F1 | 	add	arg01, local04
13054     08 15 B0 FD | 	call	#_psram_spin2_fill
13058     0B 00 00 FF 
1305c     C0 E4 85 F1 | 	sub	objptr, ##5824
13060                 | LR__1580
13060     A7 F0 03 F6 | 	mov	ptra, fp
13064     B2 00 A0 FD | 	call	#popregs_
13068                 | _hg010b_spin2_putpixel_ret
13068     2D 00 64 FD | 	ret
1306c                 | 
1306c                 | ' 
1306c                 | ' pub putpixel2(x,y,c)
1306c                 | _hg010b_spin2_putpixel2
1306c     02 4A 05 F6 | 	mov	COUNT_, #2
13070     A8 00 A0 FD | 	call	#pushregs_
13074     D9 E4 05 F1 | 	add	objptr, #217
13078     F2 1E 02 FB | 	rdlong	local01, objptr
1307c     14 E4 05 F1 | 	add	objptr, #20
13080     F2 1A 02 FB | 	rdlong	arg05, objptr
13084     02 1A 66 F0 | 	shl	arg05, #2
13088     0A 1B 02 FD | 	qmul	arg05, arg02
1308c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1308c     0B 15 02 F6 | 	mov	arg02, arg03
13090     01 16 06 F6 | 	mov	arg03, #1
13094     00 18 06 F6 | 	mov	arg04, #0
13098     01 1A 06 F6 | 	mov	arg05, #1
1309c     0A 00 00 FF 
130a0     D3 E5 05 F1 | 	add	objptr, ##5587
130a4     18 20 62 FD | 	getqx	local02
130a8     09 21 02 F1 | 	add	local02, arg01
130ac     10 1F 02 F1 | 	add	local01, local02
130b0     0F 13 02 F6 | 	mov	arg01, local01
130b4     A8 14 B0 FD | 	call	#_psram_spin2_fill
130b8     0B 00 00 FF 
130bc     C0 E4 85 F1 | 	sub	objptr, ##5824
130c0     A7 F0 03 F6 | 	mov	ptra, fp
130c4     B2 00 A0 FD | 	call	#popregs_
130c8                 | _hg010b_spin2_putpixel2_ret
130c8     2D 00 64 FD | 	ret
130cc                 | 
130cc                 | ' 
130cc                 | ' pub getpixel2(x,y): c 
130cc                 | _hg010b_spin2_getpixel2
130cc     02 4A 05 F6 | 	mov	COUNT_, #2
130d0     A8 00 A0 FD | 	call	#pushregs_
130d4     0C F0 07 F1 | 	add	ptra, #12
130d8     04 4E 05 F1 | 	add	fp, #4
130dc     A7 12 62 FC | 	wrlong	arg01, fp
130e0     04 4E 05 F1 | 	add	fp, #4
130e4     A7 14 62 FC | 	wrlong	arg02, fp
130e8     08 4E 85 F1 | 	sub	fp, #8
130ec     A7 00 68 FC | 	wrlong	#0, fp
130f0     A7 12 02 F6 | 	mov	arg01, fp
130f4     D9 E4 05 F1 | 	add	objptr, #217
130f8     F2 14 02 FB | 	rdlong	arg02, objptr
130fc     14 E4 05 F1 | 	add	objptr, #20
13100     F2 16 02 FB | 	rdlong	arg03, objptr
13104     02 16 66 F0 | 	shl	arg03, #2
13108     08 4E 05 F1 | 	add	fp, #8
1310c     A7 FA 01 FB | 	rdlong	result1, fp
13110     FD 16 02 FD | 	qmul	arg03, result1
13114                 | ' 
13114                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
13114     04 4E 85 F1 | 	sub	fp, #4
13118     A7 1E 02 FB | 	rdlong	local01, fp
1311c     04 4E 85 F1 | 	sub	fp, #4
13120     01 16 06 F6 | 	mov	arg03, #1
13124     0A 00 00 FF 
13128     D3 E5 05 F1 | 	add	objptr, ##5587
1312c     18 20 62 FD | 	getqx	local02
13130     0F 21 02 F1 | 	add	local02, local01
13134     10 15 02 F1 | 	add	arg02, local02
13138     EC 12 B0 FD | 	call	#_psram_spin2_read1
1313c     0B 00 00 FF 
13140     C0 E4 85 F1 | 	sub	objptr, ##5824
13144                 | ' return c
13144     A7 FA 01 FB | 	rdlong	result1, fp
13148     A7 F0 03 F6 | 	mov	ptra, fp
1314c     B2 00 A0 FD | 	call	#popregs_
13150                 | _hg010b_spin2_getpixel2_ret
13150     2D 00 64 FD | 	ret
13154                 | 
13154                 | '   
13154                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
13154                 | ' 
13154                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
13154                 | _hg010b_spin2_fastline
13154     02 4A 05 F6 | 	mov	COUNT_, #2
13158     A8 00 A0 FD | 	call	#pushregs_
1315c     09 1F 02 F6 | 	mov	local01, arg01
13160     0A 21 02 F6 | 	mov	local02, arg02
13164                 | ' 
13164                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
13164     00 16 56 F2 | 	cmps	arg03, #0 wc
13168     F4 00 90 CD |  if_b	jmp	#LR__1590
1316c     01 00 00 FF 
13170     26 E4 05 F1 | 	add	objptr, ##550
13174     F2 1A 02 FB | 	rdlong	arg05, objptr
13178     01 00 00 FF 
1317c     26 E4 85 F1 | 	sub	objptr, ##550
13180     0D 17 52 F2 | 	cmps	arg03, arg05 wc
13184     D8 00 90 3D |  if_ae	jmp	#LR__1590
13188     00 1E 56 F2 | 	cmps	local01, #0 wc
1318c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
13190     CC 00 90 CD |  if_b	jmp	#LR__1590
13194     01 00 00 FF 
13198     22 E4 05 F1 | 	add	objptr, ##546
1319c     F2 1A 02 FB | 	rdlong	arg05, objptr
131a0     01 00 00 FF 
131a4     22 E4 85 F1 | 	sub	objptr, ##546
131a8     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
131ac     01 00 00 1F 
131b0     22 E4 05 11 |  if_a	add	objptr, ##546
131b4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
131b8     01 00 00 1F 
131bc     22 E4 85 11 |  if_a	sub	objptr, ##546
131c0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
131c4                 | '   return
131c4     98 00 90 1D |  if_a	jmp	#LR__1590
131c8     10 1F 5A F2 | 	cmps	local01, local02 wcz
131cc     0F 1B 02 16 |  if_a	mov	arg05, local01
131d0     10 1F 02 16 |  if_a	mov	local01, local02
131d4     0D 21 02 16 |  if_a	mov	local02, arg05
131d8     00 1E 56 F2 | 	cmps	local01, #0 wc
131dc     00 1E 06 C6 |  if_b	mov	local01, #0
131e0     01 00 00 FF 
131e4     22 E4 05 F1 | 	add	objptr, ##546
131e8     F2 1A 02 FB | 	rdlong	arg05, objptr
131ec     01 00 00 FF 
131f0     22 E4 85 F1 | 	sub	objptr, ##546
131f4     0D 21 52 F2 | 	cmps	local02, arg05 wc
131f8     01 00 00 3F 
131fc     22 E4 05 31 |  if_ae	add	objptr, ##546
13200     F2 20 02 3B |  if_ae	rdlong	local02, objptr
13204     01 00 00 3F 
13208     22 E4 85 31 |  if_ae	sub	objptr, ##546
1320c     D9 E4 05 F1 | 	add	objptr, #217
13210     F2 12 02 FB | 	rdlong	arg01, objptr
13214     14 E4 05 F1 | 	add	objptr, #20
13218     F2 1A 02 FB | 	rdlong	arg05, objptr
1321c     02 1A 66 F0 | 	shl	arg05, #2
13220     0B 1B 02 FD | 	qmul	arg05, arg03
13224                 | ' if x1>x2
13224                 | '   x1,x2:=x2,x1
13224                 | ' if x1<0 
13224                 | '   x1:=0
13224                 | ' if x2>=xres
13224                 | '   x2:=xres-1  
13224     01 20 86 31 |  if_ae	sub	local02, #1
13228                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
13228     01 16 06 F6 | 	mov	arg03, #1
1322c     10 17 02 F1 | 	add	arg03, local02
13230     0F 17 82 F1 | 	sub	arg03, local01
13234     0C 15 02 F6 | 	mov	arg02, arg04
13238     00 18 06 F6 | 	mov	arg04, #0
1323c     01 1A 06 F6 | 	mov	arg05, #1
13240     0A 00 00 FF 
13244     D3 E5 05 F1 | 	add	objptr, ##5587
13248     18 20 62 FD | 	getqx	local02
1324c     0F 21 02 F1 | 	add	local02, local01
13250     10 13 02 F1 | 	add	arg01, local02
13254     08 13 B0 FD | 	call	#_psram_spin2_fill
13258     0B 00 00 FF 
1325c     C0 E4 85 F1 | 	sub	objptr, ##5824
13260                 | LR__1590
13260     A7 F0 03 F6 | 	mov	ptra, fp
13264     B2 00 A0 FD | 	call	#popregs_
13268                 | _hg010b_spin2_fastline_ret
13268     2D 00 64 FD | 	ret
1326c                 | 
1326c                 | ' 
1326c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1326c                 | _hg010b_spin2_draw
1326c     0E 4A 05 F6 | 	mov	COUNT_, #14
13270     A8 00 A0 FD | 	call	#pushregs_
13274     09 1F 02 F6 | 	mov	local01, arg01
13278     0A 21 02 F6 | 	mov	local02, arg02
1327c     0B 23 02 F6 | 	mov	local03, arg03
13280     0C 25 02 F6 | 	mov	local04, arg04
13284     0D 27 02 F6 | 	mov	local05, arg05
13288                 | ' 
13288                 | ' if (y1==y2)
13288     12 21 0A F2 | 	cmp	local02, local04 wz
1328c     18 00 90 5D |  if_ne	jmp	#LR__1600
13290                 | '   fastline(x1,x2,y1,c)
13290     0F 13 02 F6 | 	mov	arg01, local01
13294     11 15 02 F6 | 	mov	arg02, local03
13298     10 17 02 F6 | 	mov	arg03, local02
1329c     13 19 02 F6 | 	mov	arg04, local05
132a0     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
132a4     F8 00 90 FD | 	jmp	#LR__1606
132a8                 | LR__1600
132a8                 | ' else  
132a8                 | '   x:=x1
132a8     0F 29 02 F6 | 	mov	local06, local01
132ac                 | '   y:=y1
132ac     10 2B 02 F6 | 	mov	local07, local02
132b0                 | ' 
132b0                 | '   if (x1<x2) 
132b0     11 1F 52 F2 | 	cmps	local01, local03 wc
132b4                 | '     xi:=1
132b4     01 2C 06 C6 |  if_b	mov	local08, #1
132b8                 | '     dx:=x2-x1
132b8     11 2F 02 C6 |  if_b	mov	local09, local03
132bc     0F 2F 82 C1 |  if_b	sub	local09, local01
132c0                 | '   else
132c0                 | '     xi:=-1
132c0     01 2C 66 36 |  if_ae	neg	local08, #1
132c4                 | '     dx:=x1-x2
132c4     11 1F 82 31 |  if_ae	sub	local01, local03
132c8     0F 2F 02 36 |  if_ae	mov	local09, local01
132cc                 | '   
132cc                 | '   if (y1<y2) 
132cc     12 21 52 F2 | 	cmps	local02, local04 wc
132d0                 | '     yi:=1
132d0     01 30 06 C6 |  if_b	mov	local10, #1
132d4                 | '     dy:=y2-y1
132d4     12 33 02 C6 |  if_b	mov	local11, local04
132d8     10 33 82 C1 |  if_b	sub	local11, local02
132dc                 | '   else
132dc                 | '     yi:=-1
132dc     01 30 66 36 |  if_ae	neg	local10, #1
132e0                 | '     dy:=y1-y2
132e0     12 21 82 31 |  if_ae	sub	local02, local04
132e4     10 33 02 36 |  if_ae	mov	local11, local02
132e8                 | ' 
132e8                 | '   putpixel(x,y,c)
132e8     13 17 02 F6 | 	mov	arg03, local05
132ec     14 13 02 F6 | 	mov	arg01, local06
132f0     15 15 02 F6 | 	mov	arg02, local07
132f4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
132f8                 | ' 
132f8                 | '   if (dx>dy)
132f8     19 2F 5A F2 | 	cmps	local09, local11 wcz
132fc     50 00 90 ED |  if_be	jmp	#LR__1602
13300                 | '     ai:=(dy-dx)*2
13300     19 35 02 F6 | 	mov	local12, local11
13304     17 35 82 F1 | 	sub	local12, local09
13308     01 34 66 F0 | 	shl	local12, #1
1330c                 | '     bi:=dy*2
1330c     01 32 66 F0 | 	shl	local11, #1
13310     19 37 02 F6 | 	mov	local13, local11
13314                 | '     d:= bi-dx
13314     1B 39 02 F6 | 	mov	local14, local13
13318     17 39 82 F1 | 	sub	local14, local09
1331c                 | '     repeat while (x<>x2) 
1331c                 | LR__1601
1331c     11 29 0A F2 | 	cmp	local06, local03 wz
13320     7C 00 90 AD |  if_e	jmp	#LR__1605
13324                 | '       if (d>=0) 
13324     00 38 56 F2 | 	cmps	local14, #0 wc
13328                 | '         x+=xi
13328     16 29 02 31 |  if_ae	add	local06, local08
1332c                 | '         y+=yi
1332c     18 2B 02 31 |  if_ae	add	local07, local10
13330                 | '         d+=ai
13330     1A 39 02 31 |  if_ae	add	local14, local12
13334                 | '       else
13334                 | '         d+=bi
13334     1B 39 02 C1 |  if_b	add	local14, local13
13338                 | '         x+=xi
13338     16 29 02 C1 |  if_b	add	local06, local08
1333c                 | '       putpixel(x,y,c)
1333c     14 13 02 F6 | 	mov	arg01, local06
13340     15 15 02 F6 | 	mov	arg02, local07
13344     13 17 02 F6 | 	mov	arg03, local05
13348     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1334c     CC FF 9F FD | 	jmp	#LR__1601
13350                 | LR__1602
13350                 | '   else
13350                 | '     ai:=(dx-dy)*2
13350     17 35 02 F6 | 	mov	local12, local09
13354     19 35 82 F1 | 	sub	local12, local11
13358     01 34 66 F0 | 	shl	local12, #1
1335c                 | '     bi:=dx*2
1335c     01 2E 66 F0 | 	shl	local09, #1
13360     17 37 02 F6 | 	mov	local13, local09
13364                 | '     d:=bi-dy
13364     1B 39 02 F6 | 	mov	local14, local13
13368     19 39 82 F1 | 	sub	local14, local11
1336c                 | '     repeat while (y<>y2)
1336c                 | LR__1603
1336c     12 2B 0A F2 | 	cmp	local07, local04 wz
13370     2C 00 90 AD |  if_e	jmp	#LR__1604
13374                 | '       if (d>=0)
13374     00 38 56 F2 | 	cmps	local14, #0 wc
13378                 | '         x+=xi
13378     16 29 02 31 |  if_ae	add	local06, local08
1337c                 | '         y+=yi
1337c     18 2B 02 31 |  if_ae	add	local07, local10
13380                 | '         d+=ai
13380     1A 39 02 31 |  if_ae	add	local14, local12
13384                 | '       else
13384                 | '         d+=bi
13384     1B 39 02 C1 |  if_b	add	local14, local13
13388                 | '         y+=yi
13388     18 2B 02 C1 |  if_b	add	local07, local10
1338c                 | '       putpixel(x, y,c)
1338c     14 13 02 F6 | 	mov	arg01, local06
13390     15 15 02 F6 | 	mov	arg02, local07
13394     13 17 02 F6 | 	mov	arg03, local05
13398     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1339c     CC FF 9F FD | 	jmp	#LR__1603
133a0                 | LR__1604
133a0                 | LR__1605
133a0                 | LR__1606
133a0     A7 F0 03 F6 | 	mov	ptra, fp
133a4     B2 00 A0 FD | 	call	#popregs_
133a8                 | _hg010b_spin2_draw_ret
133a8     2D 00 64 FD | 	ret
133ac                 | 
133ac                 | '  
133ac                 | ' pub fillpush(val) 
133ac                 | _hg010b_spin2_fillpush
133ac                 | ' fillstack[fillptr]:=val
133ac     0B 00 00 FF 
133b0     B6 E4 05 F1 | 	add	objptr, ##5814
133b4     F2 00 02 FB | 	rdlong	_var01, objptr
133b8     02 00 66 F0 | 	shl	_var01, #2
133bc     0A 00 00 FF 
133c0     00 E4 85 F1 | 	sub	objptr, ##5120
133c4     F2 00 02 F1 | 	add	_var01, objptr
133c8     00 13 62 FC | 	wrlong	arg01, _var01
133cc                 | ' fillptr+=1   
133cc     0A 00 00 FF 
133d0     00 E4 05 F1 | 	add	objptr, ##5120
133d4     F2 00 02 FB | 	rdlong	_var01, objptr
133d8     01 00 06 F1 | 	add	_var01, #1
133dc     F2 00 62 FC | 	wrlong	_var01, objptr
133e0     0B 00 00 FF 
133e4     B6 E4 85 F1 | 	sub	objptr, ##5814
133e8                 | _hg010b_spin2_fillpush_ret
133e8     2D 00 64 FD | 	ret
133ec                 | 
133ec                 | ' 
133ec                 | '     
133ec                 | ' pub fillpop() : val
133ec                 | _hg010b_spin2_fillpop
133ec                 | ' 
133ec                 | ' fillptr-=1
133ec     0B 00 00 FF 
133f0     B6 E4 05 F1 | 	add	objptr, ##5814
133f4     F2 FA 01 FB | 	rdlong	result1, objptr
133f8     01 FA 85 F1 | 	sub	result1, #1
133fc     F2 FA 61 FC | 	wrlong	result1, objptr
13400                 | ' if fillptr<0
13400     0B 00 00 FF 
13404     B6 E4 85 F1 | 	sub	objptr, ##5814
13408     00 FA 55 F2 | 	cmps	result1, #0 wc
1340c                 | '   fillptr:=0
1340c     0B 00 00 CF 
13410     B6 E4 05 C1 |  if_b	add	objptr, ##5814
13414     F2 00 68 CC |  if_b	wrlong	#0, objptr
13418     0B 00 00 CF 
1341c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
13420                 | '   val:=-12345
13420     E7 FF 7F CF 
13424     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
13428     28 00 90 CD |  if_b	jmp	#LR__1610
1342c                 | ' else 
1342c                 | '   val:=fillstack[fillptr]
1342c     0B 00 00 FF 
13430     B6 E4 05 F1 | 	add	objptr, ##5814
13434     F2 00 02 FB | 	rdlong	_var01, objptr
13438     02 00 66 F0 | 	shl	_var01, #2
1343c     0A 00 00 FF 
13440     00 E4 85 F1 | 	sub	objptr, ##5120
13444     F2 00 02 F1 | 	add	_var01, objptr
13448     00 01 02 FB | 	rdlong	_var01, _var01
1344c     01 00 00 FF 
13450     B6 E4 85 F1 | 	sub	objptr, ##694
13454                 | LR__1610
13454                 | ' return val
13454     00 FB 01 F6 | 	mov	result1, _var01
13458                 | _hg010b_spin2_fillpop_ret
13458     2D 00 64 FD | 	ret
1345c                 | 
1345c                 | ' 
1345c                 | '       
1345c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1345c                 | _hg010b_spin2_fill
1345c     0B 4A 05 F6 | 	mov	COUNT_, #11
13460     A8 00 A0 FD | 	call	#pushregs_
13464                 | ' 
13464                 | ' newcolor:=newcolor & 255
13464     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
13468                 | ' oldcolor:=oldcolor & 255
13468     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1346c                 | ' 
1346c                 | ' if (oldcolor == newcolor) 
1346c     0F 21 0A F2 | 	cmp	local02, local01 wz
13470                 | '   return
13470     7C 02 90 AD |  if_e	jmp	#LR__1629
13474                 | ' 
13474                 | ' fillptr:=0
13474     0B 00 00 FF 
13478     B6 E4 05 F1 | 	add	objptr, ##5814
1347c     F2 00 68 FC | 	wrlong	#0, objptr
13480                 | ' fillmax:=0
13480     04 E4 05 F1 | 	add	objptr, #4
13484     F2 00 68 FC | 	wrlong	#0, objptr
13488     0B 00 00 FF 
1348c     BA E4 85 F1 | 	sub	objptr, ##5818
13490                 | ' fillpush(x)
13490     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
13494                 | ' fillpush(y)
13494     0A 13 02 F6 | 	mov	arg01, arg02
13498     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1349c                 | ' y:=fillpop()
1349c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
134a0     FD 22 02 F6 | 	mov	local03, result1
134a4                 | ' x:=fillpop()
134a4     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
134a8     FD 24 02 F6 | 	mov	local04, result1
134ac                 | ' pinhigh(38)
134ac     59 4C 64 FD | 	drvh	#38
134b0                 | ' repeat while (x>-1)       
134b0                 | LR__1620
134b0     00 24 56 F2 | 	cmps	local04, #0 wc
134b4     34 02 90 CD |  if_b	jmp	#LR__1628
134b8                 | '   pintoggle(39)
134b8     5F 4E 64 FD | 	drvnot	#39
134bc                 | '   x1 := x
134bc     12 27 02 F6 | 	mov	local05, local04
134c0                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
134c0                 | LR__1621
134c0     00 28 06 F6 | 	mov	local06, #0
134c4     00 2A 06 F6 | 	mov	local07, #0
134c8     00 26 56 F2 | 	cmps	local05, #0 wc
134cc     01 2A 66 36 |  if_ae	neg	local07, #1
134d0     00 2A 0E F2 | 	cmp	local07, #0 wz
134d4     00 28 26 56 |  if_ne	not	local06, #0
134d8     00 2C 06 F6 | 	mov	local08, #0
134dc     00 2E 06 F6 | 	mov	local09, #0
134e0     11 15 02 F6 | 	mov	arg02, local03
134e4     13 13 02 F6 | 	mov	arg01, local05
134e8     E0 FB BF FD | 	call	#_hg010b_spin2_getpixel2
134ec     10 FB 09 F2 | 	cmp	result1, local02 wz
134f0     00 2E 26 A6 |  if_e	not	local09, #0
134f4     00 2E 0E F2 | 	cmp	local09, #0 wz
134f8     00 2C 26 56 |  if_ne	not	local08, #0
134fc     16 29 CA F7 | 	test	local06, local08 wz
13500                 | '     x1--
13500     01 26 86 51 |  if_ne	sub	local05, #1
13504     B8 FF 9F 5D |  if_ne	jmp	#LR__1621
13508                 | '   x1++
13508     01 26 06 F1 | 	add	local05, #1
1350c                 | '   spanabove := 0
1350c     00 30 06 F6 | 	mov	local10, #0
13510                 | '   spanbelow := 0
13510     00 32 06 F6 | 	mov	local11, #0
13514                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
13514                 | LR__1622
13514     00 28 06 F6 | 	mov	local06, #0
13518     02 00 00 FF 
1351c     00 26 56 F2 | 	cmps	local05, ##1024 wc
13520     00 28 26 C6 |  if_b	not	local06, #0
13524     00 2C 06 F6 | 	mov	local08, #0
13528     00 2E 06 F6 | 	mov	local09, #0
1352c     11 15 02 F6 | 	mov	arg02, local03
13530     13 13 02 F6 | 	mov	arg01, local05
13534     94 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13538     10 FB 09 F2 | 	cmp	result1, local02 wz
1353c     00 2E 26 A6 |  if_e	not	local09, #0
13540     00 2E 0E F2 | 	cmp	local09, #0 wz
13544     00 2C 26 56 |  if_ne	not	local08, #0
13548     16 29 CA F7 | 	test	local06, local08 wz
1354c     88 01 90 AD |  if_e	jmp	#LR__1627
13550                 | '     putpixel2 (x1,y, newcolor & 255)
13550     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
13554     13 13 02 F6 | 	mov	arg01, local05
13558     11 15 02 F6 | 	mov	arg02, local03
1355c     0C FB BF FD | 	call	#_hg010b_spin2_putpixel2
13560                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
13560     00 28 06 F6 | 	mov	local06, #0
13564     00 2A 06 F6 | 	mov	local07, #0
13568     00 30 0E F2 | 	cmp	local10, #0 wz
1356c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
13570     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
13574     00 2A 0E F2 | 	cmp	local07, #0 wz
13578     00 28 26 56 |  if_ne	not	local06, #0
1357c     00 2C 06 F6 | 	mov	local08, #0
13580     00 2E 06 F6 | 	mov	local09, #0
13584     11 15 02 F6 | 	mov	arg02, local03
13588     01 14 86 F1 | 	sub	arg02, #1
1358c     13 13 02 F6 | 	mov	arg01, local05
13590     38 FB BF FD | 	call	#_hg010b_spin2_getpixel2
13594     10 FB 09 F2 | 	cmp	result1, local02 wz
13598     00 2E 26 A6 |  if_e	not	local09, #0
1359c     00 2E 0E F2 | 	cmp	local09, #0 wz
135a0     00 2C 26 56 |  if_ne	not	local08, #0
135a4     16 29 CA F7 | 	test	local06, local08 wz
135a8     1C 00 90 AD |  if_e	jmp	#LR__1623
135ac                 | '       fillpush(x1)
135ac     13 13 02 F6 | 	mov	arg01, local05
135b0     F8 FD BF FD | 	call	#_hg010b_spin2_fillpush
135b4                 | '       fillpush(y-1)
135b4     11 13 02 F6 | 	mov	arg01, local03
135b8     01 12 86 F1 | 	sub	arg01, #1
135bc     EC FD BF FD | 	call	#_hg010b_spin2_fillpush
135c0                 | '       spanAbove := 1 
135c0     01 30 06 F6 | 	mov	local10, #1
135c4     4C 00 90 FD | 	jmp	#LR__1624
135c8                 | LR__1623
135c8                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
135c8     00 28 06 F6 | 	mov	local06, #0
135cc     00 2A 06 F6 | 	mov	local07, #0
135d0     00 30 0E F2 | 	cmp	local10, #0 wz
135d4     01 22 56 52 |  if_ne	cmps	local03, #1 wc
135d8     01 2A 66 16 |  if_a	neg	local07, #1
135dc     00 2A 0E F2 | 	cmp	local07, #0 wz
135e0     00 28 26 56 |  if_ne	not	local06, #0
135e4     00 2C 06 F6 | 	mov	local08, #0
135e8     00 2E 06 F6 | 	mov	local09, #0
135ec     11 15 02 F6 | 	mov	arg02, local03
135f0     01 14 86 F1 | 	sub	arg02, #1
135f4     13 13 02 F6 | 	mov	arg01, local05
135f8     D0 FA BF FD | 	call	#_hg010b_spin2_getpixel2
135fc     10 FB 09 F2 | 	cmp	result1, local02 wz
13600     00 2E 26 56 |  if_ne	not	local09, #0
13604     00 2E 0E F2 | 	cmp	local09, #0 wz
13608     00 2C 26 56 |  if_ne	not	local08, #0
1360c     16 29 CA F7 | 	test	local06, local08 wz
13610                 | '       spanAbove := 0 
13610     00 30 06 56 |  if_ne	mov	local10, #0
13614                 | LR__1624
13614                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
13614     00 28 06 F6 | 	mov	local06, #0
13618     00 2A 06 F6 | 	mov	local07, #0
1361c     00 32 0E F2 | 	cmp	local11, #0 wz
13620     01 00 00 AF 
13624     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
13628     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1362c     00 2A 0E F2 | 	cmp	local07, #0 wz
13630     00 28 26 56 |  if_ne	not	local06, #0
13634     00 2C 06 F6 | 	mov	local08, #0
13638     00 2E 06 F6 | 	mov	local09, #0
1363c     11 15 02 F6 | 	mov	arg02, local03
13640     01 14 06 F1 | 	add	arg02, #1
13644     13 13 02 F6 | 	mov	arg01, local05
13648     80 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1364c     10 FB 09 F2 | 	cmp	result1, local02 wz
13650     00 2E 26 A6 |  if_e	not	local09, #0
13654     00 2E 0E F2 | 	cmp	local09, #0 wz
13658     00 2C 26 56 |  if_ne	not	local08, #0
1365c     16 29 CA F7 | 	test	local06, local08 wz
13660     1C 00 90 AD |  if_e	jmp	#LR__1625
13664                 | '       fillpush(x1)
13664     13 13 02 F6 | 	mov	arg01, local05
13668     40 FD BF FD | 	call	#_hg010b_spin2_fillpush
1366c                 | '       fillpush(y + 1)
1366c     11 13 02 F6 | 	mov	arg01, local03
13670     01 12 06 F1 | 	add	arg01, #1
13674     34 FD BF FD | 	call	#_hg010b_spin2_fillpush
13678                 | '       spanBelow := 1
13678     01 32 06 F6 | 	mov	local11, #1
1367c     50 00 90 FD | 	jmp	#LR__1626
13680                 | LR__1625
13680                 | '     elseif((spanBelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
13680     00 28 06 F6 | 	mov	local06, #0
13684     00 2A 06 F6 | 	mov	local07, #0
13688     00 32 0E F2 | 	cmp	local11, #0 wz
1368c     01 00 00 5F 
13690     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
13694     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
13698     00 2A 0E F2 | 	cmp	local07, #0 wz
1369c     00 28 26 56 |  if_ne	not	local06, #0
136a0     00 2C 06 F6 | 	mov	local08, #0
136a4     00 2E 06 F6 | 	mov	local09, #0
136a8     11 15 02 F6 | 	mov	arg02, local03
136ac     01 14 06 F1 | 	add	arg02, #1
136b0     13 13 02 F6 | 	mov	arg01, local05
136b4     14 FA BF FD | 	call	#_hg010b_spin2_getpixel2
136b8     10 FB 09 F2 | 	cmp	result1, local02 wz
136bc     00 2E 26 56 |  if_ne	not	local09, #0
136c0     00 2E 0E F2 | 	cmp	local09, #0 wz
136c4     00 2C 26 56 |  if_ne	not	local08, #0
136c8     16 29 CA F7 | 	test	local06, local08 wz
136cc                 | '       spanBelow := 0
136cc     00 32 06 56 |  if_ne	mov	local11, #0
136d0                 | LR__1626
136d0                 | '     x1++
136d0     01 26 06 F1 | 	add	local05, #1
136d4     3C FE 9F FD | 	jmp	#LR__1622
136d8                 | LR__1627
136d8                 | '   y:=fillpop()
136d8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
136dc     FD 22 02 F6 | 	mov	local03, result1
136e0                 | '   x:=fillpop()
136e0     08 FD BF FD | 	call	#_hg010b_spin2_fillpop
136e4     FD 24 02 F6 | 	mov	local04, result1
136e8     C4 FD 9F FD | 	jmp	#LR__1620
136ec                 | LR__1628
136ec                 | ' pinlow(38)    
136ec     58 4C 64 FD | 	drvl	#38
136f0                 | LR__1629
136f0     A7 F0 03 F6 | 	mov	ptra, fp
136f4     B2 00 A0 FD | 	call	#popregs_
136f8                 | _hg010b_spin2_fill_ret
136f8     2D 00 64 FD | 	ret
136fc                 | 
136fc                 | ' 
136fc                 | ' '-- A filled circle -----------------------------------------------------
136fc                 | ' 
136fc                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
136fc                 | _hg010b_spin2_fcircle
136fc     08 4A 05 F6 | 	mov	COUNT_, #8
13700     A8 00 A0 FD | 	call	#pushregs_
13704     0B 1F 02 F6 | 	mov	local01, arg03
13708     FF FF 7F FF 
1370c     FE 1F 06 FD | 	qmul	local01, ##-2
13710     09 21 02 F6 | 	mov	local02, arg01
13714     0A 23 02 F6 | 	mov	local03, arg02
13718     0C 25 02 F6 | 	mov	local04, arg04
1371c                 | ' 
1371c                 | ' d:=5-4*r
1371c     0F 19 02 F6 | 	mov	arg04, local01
13720     02 18 66 F0 | 	shl	arg04, #2
13724     05 26 06 F6 | 	mov	local05, #5
13728     0C 27 82 F1 | 	sub	local05, arg04
1372c                 | ' x:=0
1372c     00 28 06 F6 | 	mov	local06, #0
13730                 | ' y:=r
13730                 | ' da:=(-2*r+5)*4
13730                 | ' db:=3*4
13730     0C 2A 06 F6 | 	mov	local07, #12
13734                 | ' repeat while (x<=y) 
13734     18 2C 62 FD | 	getqx	local08
13738     05 2C 06 F1 | 	add	local08, #5
1373c     02 2C 66 F0 | 	shl	local08, #2
13740                 | LR__1630
13740     0F 29 5A F2 | 	cmps	local06, local01 wcz
13744     B4 00 90 1D |  if_a	jmp	#LR__1632
13748                 | '   fastline(x0-x,x0+x,y0-y,c)
13748     10 13 02 F6 | 	mov	arg01, local02
1374c     14 13 82 F1 | 	sub	arg01, local06
13750     10 15 02 F6 | 	mov	arg02, local02
13754     14 15 02 F1 | 	add	arg02, local06
13758     11 17 02 F6 | 	mov	arg03, local03
1375c     0F 17 82 F1 | 	sub	arg03, local01
13760     12 19 02 F6 | 	mov	arg04, local04
13764     EC F9 BF FD | 	call	#_hg010b_spin2_fastline
13768                 | '   fastline(x0-x,x0+x,y0+y,c)
13768     10 13 02 F6 | 	mov	arg01, local02
1376c     14 13 82 F1 | 	sub	arg01, local06
13770     10 15 02 F6 | 	mov	arg02, local02
13774     14 15 02 F1 | 	add	arg02, local06
13778     11 17 02 F6 | 	mov	arg03, local03
1377c     0F 17 02 F1 | 	add	arg03, local01
13780     12 19 02 F6 | 	mov	arg04, local04
13784     CC F9 BF FD | 	call	#_hg010b_spin2_fastline
13788                 | '   fastline(x0-y,x0+y,y0-x,c)
13788     10 13 02 F6 | 	mov	arg01, local02
1378c     0F 13 82 F1 | 	sub	arg01, local01
13790     10 15 02 F6 | 	mov	arg02, local02
13794     0F 15 02 F1 | 	add	arg02, local01
13798     11 17 02 F6 | 	mov	arg03, local03
1379c     14 17 82 F1 | 	sub	arg03, local06
137a0     12 19 02 F6 | 	mov	arg04, local04
137a4     AC F9 BF FD | 	call	#_hg010b_spin2_fastline
137a8                 | '   fastline(x0-y,x0+y,y0+x,c)
137a8     10 13 02 F6 | 	mov	arg01, local02
137ac     0F 13 82 F1 | 	sub	arg01, local01
137b0     10 15 02 F6 | 	mov	arg02, local02
137b4     0F 15 02 F1 | 	add	arg02, local01
137b8     11 17 02 F6 | 	mov	arg03, local03
137bc     14 17 02 F1 | 	add	arg03, local06
137c0     12 19 02 F6 | 	mov	arg04, local04
137c4     8C F9 BF FD | 	call	#_hg010b_spin2_fastline
137c8                 | '   if d>0 
137c8     01 26 56 F2 | 	cmps	local05, #1 wc
137cc     18 00 90 CD |  if_b	jmp	#LR__1631
137d0                 | '     d+=da
137d0     16 27 02 F1 | 	add	local05, local08
137d4                 | '     y-=1
137d4     01 1E 86 F1 | 	sub	local01, #1
137d8                 | '     x+=1
137d8     01 28 06 F1 | 	add	local06, #1
137dc                 | '     da+=4*4
137dc     10 2C 06 F1 | 	add	local08, #16
137e0                 | '     db+=2*4
137e0     08 2A 06 F1 | 	add	local07, #8
137e4     58 FF 9F FD | 	jmp	#LR__1630
137e8                 | LR__1631
137e8                 | '   else
137e8                 | '     d+=db
137e8     15 27 02 F1 | 	add	local05, local07
137ec                 | '     x+=1
137ec     01 28 06 F1 | 	add	local06, #1
137f0                 | '     da+=2*4
137f0     08 2C 06 F1 | 	add	local08, #8
137f4                 | '     db+=2*4
137f4     08 2A 06 F1 | 	add	local07, #8
137f8     44 FF 9F FD | 	jmp	#LR__1630
137fc                 | LR__1632
137fc     A7 F0 03 F6 | 	mov	ptra, fp
13800     B2 00 A0 FD | 	call	#popregs_
13804                 | _hg010b_spin2_fcircle_ret
13804     2D 00 64 FD | 	ret
13808                 | 
13808                 | '  
13808                 | ' '-- A circle ------------------------------------------------------------ 
13808                 | '  
13808                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
13808                 | _hg010b_spin2_circle
13808     08 4A 05 F6 | 	mov	COUNT_, #8
1380c     A8 00 A0 FD | 	call	#pushregs_
13810     0B 1F 02 F6 | 	mov	local01, arg03
13814     FF FF 7F FF 
13818     FE 1F 06 FD | 	qmul	local01, ##-2
1381c     09 21 02 F6 | 	mov	local02, arg01
13820     0A 23 02 F6 | 	mov	local03, arg02
13824     0C 25 02 F6 | 	mov	local04, arg04
13828                 | ' 
13828                 | '  
13828                 | ' d:=5-4*r
13828     0F 19 02 F6 | 	mov	arg04, local01
1382c     02 18 66 F0 | 	shl	arg04, #2
13830     05 26 06 F6 | 	mov	local05, #5
13834     0C 27 82 F1 | 	sub	local05, arg04
13838                 | ' x:=0
13838     00 28 06 F6 | 	mov	local06, #0
1383c                 | ' y:=r
1383c                 | ' da:=(-2*r+5)*4
1383c                 | ' db:=3*4
1383c     0C 2A 06 F6 | 	mov	local07, #12
13840                 | ' repeat while (x<=y) 
13840     18 2C 62 FD | 	getqx	local08
13844     05 2C 06 F1 | 	add	local08, #5
13848     02 2C 66 F0 | 	shl	local08, #2
1384c                 | LR__1640
1384c     0F 29 5A F2 | 	cmps	local06, local01 wcz
13850     F4 00 90 1D |  if_a	jmp	#LR__1642
13854                 | '   putpixel(x0-x,y0-y,c)
13854     10 13 02 F6 | 	mov	arg01, local02
13858     14 13 82 F1 | 	sub	arg01, local06
1385c     11 15 02 F6 | 	mov	arg02, local03
13860     0F 15 82 F1 | 	sub	arg02, local01
13864     12 17 02 F6 | 	mov	arg03, local04
13868     50 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1386c                 | '   putpixel(x0-x,y0+y,c)
1386c     10 13 02 F6 | 	mov	arg01, local02
13870     14 13 82 F1 | 	sub	arg01, local06
13874     11 15 02 F6 | 	mov	arg02, local03
13878     0F 15 02 F1 | 	add	arg02, local01
1387c     12 17 02 F6 | 	mov	arg03, local04
13880     38 F7 BF FD | 	call	#_hg010b_spin2_putpixel
13884                 | '   putpixel(x0+x,y0-y,c)
13884     10 13 02 F6 | 	mov	arg01, local02
13888     14 13 02 F1 | 	add	arg01, local06
1388c     11 15 02 F6 | 	mov	arg02, local03
13890     0F 15 82 F1 | 	sub	arg02, local01
13894     12 17 02 F6 | 	mov	arg03, local04
13898     20 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1389c                 | '   putpixel(x0+x,y0+y,c)
1389c     10 13 02 F6 | 	mov	arg01, local02
138a0     14 13 02 F1 | 	add	arg01, local06
138a4     11 15 02 F6 | 	mov	arg02, local03
138a8     0F 15 02 F1 | 	add	arg02, local01
138ac     12 17 02 F6 | 	mov	arg03, local04
138b0     08 F7 BF FD | 	call	#_hg010b_spin2_putpixel
138b4                 | '   putpixel(x0-y,y0-x,c)
138b4     10 13 02 F6 | 	mov	arg01, local02
138b8     0F 13 82 F1 | 	sub	arg01, local01
138bc     11 15 02 F6 | 	mov	arg02, local03
138c0     14 15 82 F1 | 	sub	arg02, local06
138c4     12 17 02 F6 | 	mov	arg03, local04
138c8     F0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
138cc                 | '   putpixel(x0-y,y0+x,c)
138cc     10 13 02 F6 | 	mov	arg01, local02
138d0     0F 13 82 F1 | 	sub	arg01, local01
138d4     11 15 02 F6 | 	mov	arg02, local03
138d8     14 15 02 F1 | 	add	arg02, local06
138dc     12 17 02 F6 | 	mov	arg03, local04
138e0     D8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
138e4                 | '   putpixel(x0+y,y0-x,c)
138e4     10 13 02 F6 | 	mov	arg01, local02
138e8     0F 13 02 F1 | 	add	arg01, local01
138ec     11 15 02 F6 | 	mov	arg02, local03
138f0     14 15 82 F1 | 	sub	arg02, local06
138f4     12 17 02 F6 | 	mov	arg03, local04
138f8     C0 F6 BF FD | 	call	#_hg010b_spin2_putpixel
138fc                 | '   putpixel(x0+y,y0+x,c)
138fc     10 13 02 F6 | 	mov	arg01, local02
13900     0F 13 02 F1 | 	add	arg01, local01
13904     11 15 02 F6 | 	mov	arg02, local03
13908     14 15 02 F1 | 	add	arg02, local06
1390c     12 17 02 F6 | 	mov	arg03, local04
13910     A8 F6 BF FD | 	call	#_hg010b_spin2_putpixel
13914                 | '   if d>0 
13914     01 26 56 F2 | 	cmps	local05, #1 wc
13918     18 00 90 CD |  if_b	jmp	#LR__1641
1391c                 | '     d+=da
1391c     16 27 02 F1 | 	add	local05, local08
13920                 | '     y-=1
13920     01 1E 86 F1 | 	sub	local01, #1
13924                 | '     x+=1
13924     01 28 06 F1 | 	add	local06, #1
13928                 | '     da+=4*4
13928     10 2C 06 F1 | 	add	local08, #16
1392c                 | '     db+=2*4
1392c     08 2A 06 F1 | 	add	local07, #8
13930     18 FF 9F FD | 	jmp	#LR__1640
13934                 | LR__1641
13934                 | '   else
13934                 | '     d+=db
13934     15 27 02 F1 | 	add	local05, local07
13938                 | '     x+=1
13938     01 28 06 F1 | 	add	local06, #1
1393c                 | '     da+=2*4
1393c     08 2C 06 F1 | 	add	local08, #8
13940                 | '     db+=2*4
13940     08 2A 06 F1 | 	add	local07, #8
13944     04 FF 9F FD | 	jmp	#LR__1640
13948                 | LR__1642
13948     A7 F0 03 F6 | 	mov	ptra, fp
1394c     B2 00 A0 FD | 	call	#popregs_
13950                 | _hg010b_spin2_circle_ret
13950     2D 00 64 FD | 	ret
13954                 | 
13954                 | '     
13954                 | ' '-- A frame (an empty rectangle) ---------------------------------------
13954                 | ' 
13954                 | ' pub frame(x1,y1,x2,y2,c)
13954                 | _hg010b_spin2_frame
13954     05 4A 05 F6 | 	mov	COUNT_, #5
13958     A8 00 A0 FD | 	call	#pushregs_
1395c     09 1F 02 F6 | 	mov	local01, arg01
13960     0A 21 02 F6 | 	mov	local02, arg02
13964     0B 23 02 F6 | 	mov	local03, arg03
13968     0C 25 02 F6 | 	mov	local04, arg04
1396c     0D 27 02 F6 | 	mov	local05, arg05
13970                 | ' 
13970                 | ' fastline(x1,x2,y1,c)
13970     0F 13 02 F6 | 	mov	arg01, local01
13974     11 15 02 F6 | 	mov	arg02, local03
13978     10 17 02 F6 | 	mov	arg03, local02
1397c     13 19 02 F6 | 	mov	arg04, local05
13980     D0 F7 BF FD | 	call	#_hg010b_spin2_fastline
13984                 | ' fastline(x1,x2,y2,c)
13984     0F 13 02 F6 | 	mov	arg01, local01
13988     11 15 02 F6 | 	mov	arg02, local03
1398c     12 17 02 F6 | 	mov	arg03, local04
13990     13 19 02 F6 | 	mov	arg04, local05
13994     BC F7 BF FD | 	call	#_hg010b_spin2_fastline
13998                 | ' line(x1,y1,x1,y2,c)
13998     0F 13 02 F6 | 	mov	arg01, local01
1399c     10 15 02 F6 | 	mov	arg02, local02
139a0     0F 17 02 F6 | 	mov	arg03, local01
139a4     12 19 02 F6 | 	mov	arg04, local04
139a8     13 1B 02 F6 | 	mov	arg05, local05
139ac                 | ' draw(x1,y1,x2,y2,c)
139ac     BC F8 BF FD | 	call	#_hg010b_spin2_draw
139b0                 | ' line(x2,y1,x2,y2,c)
139b0     11 13 02 F6 | 	mov	arg01, local03
139b4     10 15 02 F6 | 	mov	arg02, local02
139b8     11 17 02 F6 | 	mov	arg03, local03
139bc     12 19 02 F6 | 	mov	arg04, local04
139c0     13 1B 02 F6 | 	mov	arg05, local05
139c4                 | ' draw(x1,y1,x2,y2,c)
139c4     A4 F8 BF FD | 	call	#_hg010b_spin2_draw
139c8     A7 F0 03 F6 | 	mov	ptra, fp
139cc     B2 00 A0 FD | 	call	#popregs_
139d0                 | _hg010b_spin2_frame_ret
139d0     2D 00 64 FD | 	ret
139d4                 | 
139d4                 | ' 
139d4                 | ' '-- A box (a filled rectangle) ----------------------------------------
139d4                 | ' 
139d4                 | ' pub box(x1,y1,x2,y2,c) |yy
139d4                 | _hg010b_spin2_box
139d4     06 4A 05 F6 | 	mov	COUNT_, #6
139d8     A8 00 A0 FD | 	call	#pushregs_
139dc     09 1F 02 F6 | 	mov	local01, arg01
139e0     0A 21 02 F6 | 	mov	local02, arg02
139e4     0B 23 02 F6 | 	mov	local03, arg03
139e8     0C 25 02 F6 | 	mov	local04, arg04
139ec     0D 27 02 F6 | 	mov	local05, arg05
139f0                 | ' 
139f0                 | ' repeat yy from y1 to y2
139f0     10 25 52 F2 | 	cmps	local04, local02 wc
139f4     01 28 86 F6 | 	negc	local06, #1
139f8     14 25 02 F1 | 	add	local04, local06
139fc                 | LR__1650
139fc                 | '   fastline(x1,x2,yy,c)
139fc     0F 13 02 F6 | 	mov	arg01, local01
13a00     11 15 02 F6 | 	mov	arg02, local03
13a04     13 19 02 F6 | 	mov	arg04, local05
13a08     10 17 02 F6 | 	mov	arg03, local02
13a0c     44 F7 BF FD | 	call	#_hg010b_spin2_fastline
13a10     14 21 02 F1 | 	add	local02, local06
13a14     12 21 0A F2 | 	cmp	local02, local04 wz
13a18     E0 FF 9F 5D |  if_ne	jmp	#LR__1650
13a1c     A7 F0 03 F6 | 	mov	ptra, fp
13a20     B2 00 A0 FD | 	call	#popregs_
13a24                 | _hg010b_spin2_box_ret
13a24     2D 00 64 FD | 	ret
13a28                 | 
13a28                 | '       
13a28                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
13a28                 | _hg010b_spin2_putcharxycgf
13a28                 | ' 
13a28                 | '  
13a28                 | ' repeat yy from 0 to 15
13a28     00 00 06 F6 | 	mov	_var01, #0
13a2c     97 8C 48 FB | 	callpa	#(@LR__1662-@LR__1660)>>2,fcache_load_ptr_
13a30                 | LR__1660
13a30                 | ' 
13a30                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
13a30     91 E4 05 F1 | 	add	objptr, #145
13a34     F2 02 02 FB | 	rdlong	_var02, objptr
13a38     0A 02 66 F0 | 	shl	_var02, #10
13a3c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
13a40     01 05 02 F1 | 	add	_var03, _var02
13a44     0B 03 02 F6 | 	mov	_var02, arg03
13a48     04 02 66 F0 | 	shl	_var02, #4
13a4c     01 05 02 F1 | 	add	_var03, _var02
13a50     00 05 02 F1 | 	add	_var03, _var01
13a54     02 05 C2 FA | 	rdbyte	_var03, _var03
13a58                 | '   asm
13a58     00 04 0E F4 | 	testb	_var03, #0 wz
13a5c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
13a60     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
13a64     01 04 0E F4 | 	testb	_var03, #1 wz
13a68     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
13a6c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
13a70     02 04 0E F4 | 	testb	_var03, #2 wz
13a74     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
13a78     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
13a7c     03 04 0E F4 | 	testb	_var03, #3 wz
13a80     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
13a84     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
13a88     04 04 0E F4 | 	testb	_var03, #4 wz
13a8c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
13a90     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
13a94     05 04 0E F4 | 	testb	_var03, #5 wz
13a98     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
13a9c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
13aa0     06 04 0E F4 | 	testb	_var03, #6 wz
13aa4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
13aa8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
13aac     07 04 0E F4 | 	testb	_var03, #7 wz
13ab0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
13ab4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
13ab8                 | '   
13ab8                 | '   ccc[0]:=c1
13ab8     99 E5 05 F1 | 	add	objptr, #409
13abc     F2 06 62 FC | 	wrlong	_var04, objptr
13ac0                 | '   ccc[1]:=c2 
13ac0     04 E4 05 F1 | 	add	objptr, #4
13ac4     F2 08 62 FC | 	wrlong	_var05, objptr
13ac8                 | '   long[mailbox0][2]:=8
13ac8     49 E4 85 F1 | 	sub	objptr, #73
13acc     F2 04 02 FB | 	rdlong	_var03, objptr
13ad0     08 04 06 F1 | 	add	_var03, #8
13ad4     02 11 68 FC | 	wrlong	#8, _var03
13ad8                 | '   long[mailbox0][1]:=@ccc
13ad8     45 E4 05 F1 | 	add	objptr, #69
13adc     F2 04 02 F6 | 	mov	_var03, objptr
13ae0     45 E4 85 F1 | 	sub	objptr, #69
13ae4     F2 02 02 FB | 	rdlong	_var02, objptr
13ae8     04 02 06 F1 | 	add	_var02, #4
13aec     01 05 62 FC | 	wrlong	_var03, _var02
13af0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
13af0     0C E5 85 F1 | 	sub	objptr, #268
13af4     F2 04 02 FB | 	rdlong	_var03, objptr
13af8     0A 03 02 F6 | 	mov	_var02, arg02
13afc     00 03 02 F1 | 	add	_var02, _var01
13b00     0A 02 66 F0 | 	shl	_var02, #10
13b04     09 0B 02 F6 | 	mov	_var06, arg01
13b08     02 0A 66 F0 | 	shl	_var06, #2
13b0c     05 03 02 F1 | 	add	_var02, _var06
13b10     01 05 02 F1 | 	add	_var03, _var02
13b14     00 00 78 FF 
13b18     00 04 06 F1 | 	add	_var03, ##-268435456
13b1c     0C E5 05 F1 | 	add	objptr, #268
13b20     F2 0A 02 FB | 	rdlong	_var06, objptr
13b24     05 05 62 FC | 	wrlong	_var03, _var06
13b28                 | '   repeat
13b28                 | LR__1661
13b28     F2 04 02 FB | 	rdlong	_var03, objptr
13b2c     02 03 02 FB | 	rdlong	_var02, _var03
13b30     00 02 56 F2 | 	cmps	_var02, #0 wc
13b34     F0 FF 9F CD |  if_b	jmp	#LR__1661
13b38     E5 E5 85 F1 | 	sub	objptr, #485
13b3c     01 00 06 F1 | 	add	_var01, #1
13b40     10 00 56 F2 | 	cmps	_var01, #16 wc
13b44     E8 FE 9F CD |  if_b	jmp	#LR__1660
13b48                 | LR__1662
13b48                 | _hg010b_spin2_putcharxycgf_ret
13b48     2D 00 64 FD | 	ret
13b4c                 | 
13b4c                 | ' 
13b4c                 | ' 
13b4c                 | ' '**********************************************************************r***
13b4c                 | ' '                                                                        *
13b4c                 | ' ' Font related functions                                                 *
13b4c                 | ' '                                                                        *
13b4c                 | ' '*************************************************************************
13b4c                 | ' 
13b4c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
13b4c                 | ' 
13b4c                 | ' pub setfontfamily(afontnum)
13b4c                 | _hg010b_spin2_setfontfamily
13b4c                 | ' 
13b4c                 | ' font_family:=afontnum
13b4c     91 E4 05 F1 | 	add	objptr, #145
13b50     F2 12 62 FC | 	wrlong	arg01, objptr
13b54     91 E4 85 F1 | 	sub	objptr, #145
13b58                 | ' 'if afontnum==8
13b58                 | ' '  font_ptr:=@amiga_font
13b58                 | ' 
13b58                 | ' if afontnum==4
13b58     04 12 0E F2 | 	cmp	arg01, #4 wz
13b5c                 | '   font_ptr:=@st_font
13b5c     08 00 00 AF 
13b60     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
13b64     04 E4 05 A1 |  if_e	add	objptr, #4
13b68     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
13b6c     04 E4 85 A1 |  if_e	sub	objptr, #4
13b70     08 00 00 AF 
13b74     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
13b78                 | ' if afontnum==0
13b78     00 12 0E F2 | 	cmp	arg01, #0 wz
13b7c                 | '   font_ptr:=@vga_font
13b7c     04 E4 05 A1 |  if_e	add	objptr, #4
13b80     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
13b84     04 E4 85 A1 |  if_e	sub	objptr, #4
13b88                 | _hg010b_spin2_setfontfamily_ret
13b88     2D 00 64 FD | 	ret
13b8c                 | 
13b8c                 | ' 
13b8c                 | ' '*************************************************************************
13b8c                 | ' '                                                                        *
13b8c                 | ' '  Cursor functions                                                      *
13b8c                 | ' '                                                                        *
13b8c                 | ' '*************************************************************************
13b8c                 | ' 
13b8c                 | ' 
13b8c                 | ' pub setcursorpos(x,y)
13b8c                 | _hg010b_spin2_setcursorpos
13b8c                 | ' 
13b8c                 | ' ''---------- Set the (x,y) position of cursor
13b8c                 | ' 
13b8c                 | ' cursor_x:=x
13b8c     38 E4 05 F1 | 	add	objptr, #56
13b90     F2 12 52 FC | 	wrword	arg01, objptr
13b94                 | ' cursor_y:=y
13b94     02 E4 05 F1 | 	add	objptr, #2
13b98     F2 14 42 FC | 	wrbyte	arg02, objptr
13b9c                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
13b9c     02 E4 85 F1 | 	sub	objptr, #2
13ba0     F2 14 E2 FA | 	rdword	arg02, objptr
13ba4     02 14 66 F0 | 	shl	arg02, #2
13ba8     02 E4 05 F1 | 	add	objptr, #2
13bac     F2 16 C2 FA | 	rdbyte	arg03, objptr
13bb0     3A E4 85 F1 | 	sub	objptr, #58
13bb4     04 16 66 F0 | 	shl	arg03, #4
13bb8     11 12 06 F6 | 	mov	arg01, #17
13bbc     64 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
13bc0                 | _hg010b_spin2_setcursorpos_ret
13bc0     2D 00 64 FD | 	ret
13bc4                 | 
13bc4                 | ' 
13bc4                 | ' '*************************************************************************
13bc4                 | ' '                                                                        *
13bc4                 | ' '  VBlank functions                                                      *
13bc4                 | ' '                                                                        *
13bc4                 | ' '*************************************************************************
13bc4                 | ' 
13bc4                 | ' pub waitvbl(amount) | i
13bc4                 | _hg010b_spin2_waitvbl
13bc4     03 4A 05 F6 | 	mov	COUNT_, #3
13bc8     A8 00 A0 FD | 	call	#pushregs_
13bcc     09 1F 02 F6 | 	mov	local01, arg01
13bd0                 | ' 
13bd0                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
13bd0                 | ' 
13bd0                 | ' repeat i from 1 to amount
13bd0     01 20 06 F6 | 	mov	local02, #1
13bd4     01 1E 56 F2 | 	cmps	local01, #1 wc
13bd8     01 22 86 F6 | 	negc	local03, #1
13bdc     11 1F 02 F1 | 	add	local01, local03
13be0                 | LR__1670
13be0                 | '   repeat until vblank==0
13be0                 | LR__1671
13be0     45 E4 05 F1 | 	add	objptr, #69
13be4     F2 12 0A FB | 	rdlong	arg01, objptr wz
13be8     45 E4 85 F1 | 	sub	objptr, #69
13bec     0C 00 90 AD |  if_e	jmp	#LR__1672
13bf0                 | '     waitus(100)
13bf0     64 12 06 F6 | 	mov	arg01, #100
13bf4     7C 16 B0 FD | 	call	#__system___waitus
13bf8     E4 FF 9F FD | 	jmp	#LR__1671
13bfc                 | LR__1672
13bfc                 | '   repeat until vblank==1
13bfc                 | LR__1673
13bfc     45 E4 05 F1 | 	add	objptr, #69
13c00     F2 12 02 FB | 	rdlong	arg01, objptr
13c04     45 E4 85 F1 | 	sub	objptr, #69
13c08     01 12 0E F2 | 	cmp	arg01, #1 wz
13c0c     0C 00 90 AD |  if_e	jmp	#LR__1674
13c10                 | '     waitus(100)
13c10     64 12 06 F6 | 	mov	arg01, #100
13c14     5C 16 B0 FD | 	call	#__system___waitus
13c18     E0 FF 9F FD | 	jmp	#LR__1673
13c1c                 | LR__1674
13c1c     11 21 02 F1 | 	add	local02, local03
13c20     0F 21 0A F2 | 	cmp	local02, local01 wz
13c24     B8 FF 9F 5D |  if_ne	jmp	#LR__1670
13c28     A7 F0 03 F6 | 	mov	ptra, fp
13c2c     B2 00 A0 FD | 	call	#popregs_
13c30                 | _hg010b_spin2_waitvbl_ret
13c30     2D 00 64 FD | 	ret
13c34                 | 
13c34                 | ' 
13c34                 | ' 
13c34                 | ' pub cls(fc,bc)   :c,i
13c34                 | _hg010b_spin2_cls
13c34     02 4A 05 F6 | 	mov	COUNT_, #2
13c38     A8 00 A0 FD | 	call	#pushregs_
13c3c     09 1F 02 F6 | 	mov	local01, arg01
13c40     0A 21 02 F6 | 	mov	local02, arg02
13c44                 | ' 
13c44                 | ' c:=bc
13c44                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
13c44     D9 E4 05 F1 | 	add	objptr, #217
13c48     F2 12 02 FB | 	rdlong	arg01, objptr
13c4c     A5 E4 85 F1 | 	sub	objptr, #165
13c50     F2 16 02 FB | 	rdlong	arg03, objptr
13c54     02 16 66 F0 | 	shl	arg03, #2
13c58     10 15 02 F6 | 	mov	arg02, local02
13c5c     00 18 06 F6 | 	mov	arg04, #0
13c60     01 1A 06 F6 | 	mov	arg05, #1
13c64     0B 00 00 FF 
13c68     8C E4 05 F1 | 	add	objptr, ##5772
13c6c     F0 08 B0 FD | 	call	#_psram_spin2_fill
13c70                 | ' setwritecolors(fc,bc)
13c70                 | ' 
13c70                 | ' write_color:=ff
13c70     0B 00 00 FF 
13c74     83 E4 85 F1 | 	sub	objptr, ##5763
13c78     F2 1E 62 FC | 	wrlong	local01, objptr
13c7c                 | ' write_background:=bb
13c7c     04 E4 05 F1 | 	add	objptr, #4
13c80     F2 20 62 FC | 	wrlong	local02, objptr
13c84                 | ' cursor_x:=0
13c84     09 E4 85 F1 | 	sub	objptr, #9
13c88     F2 00 58 FC | 	wrword	#0, objptr
13c8c                 | ' cursor_y:=0
13c8c     02 E4 05 F1 | 	add	objptr, #2
13c90     F2 00 48 FC | 	wrbyte	#0, objptr
13c94                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
13c94     02 E4 85 F1 | 	sub	objptr, #2
13c98     F2 14 E2 FA | 	rdword	arg02, objptr
13c9c     02 14 66 F0 | 	shl	arg02, #2
13ca0     02 E4 05 F1 | 	add	objptr, #2
13ca4     F2 16 C2 FA | 	rdbyte	arg03, objptr
13ca8     3A E4 85 F1 | 	sub	objptr, #58
13cac     04 16 66 F0 | 	shl	arg03, #4
13cb0     11 12 06 F6 | 	mov	arg01, #17
13cb4     6C F2 BF FD | 	call	#_hg010b_spin2_setspritepos
13cb8                 | ' setcursorcolor(fc)
13cb8     0F 13 02 F6 | 	mov	arg01, local01
13cbc     20 EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
13cc0     10 FB 01 F6 | 	mov	result1, local02
13cc4     00 FC 05 F6 | 	mov	result2, #0
13cc8     A7 F0 03 F6 | 	mov	ptra, fp
13ccc     B2 00 A0 FD | 	call	#popregs_
13cd0                 | _hg010b_spin2_cls_ret
13cd0     2D 00 64 FD | 	ret
13cd4                 | 
13cd4                 | ' 
13cd4                 | ' ''---------- Output a char at the cursor position, move the cursor 
13cd4                 | ' 
13cd4                 | ' pub putchar(achar) | c,x,y,l,newcpl
13cd4                 | _hg010b_spin2_putchar
13cd4     01 4A 05 F6 | 	mov	COUNT_, #1
13cd8     A8 00 A0 FD | 	call	#pushregs_
13cdc     09 1F 02 F6 | 	mov	local01, arg01
13ce0                 | ' 
13ce0                 | ' if achar==10
13ce0     0A 1E 0E F2 | 	cmp	local01, #10 wz
13ce4                 | '   crlf()
13ce4     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
13ce8                 | ' if achar==9
13ce8     09 1E 0E F2 | 	cmp	local01, #9 wz
13cec     18 00 90 5D |  if_ne	jmp	#LR__1680
13cf0                 | '   cursor_x:=(cursor_x& %11110000)+16
13cf0     38 E4 05 F1 | 	add	objptr, #56
13cf4     F2 16 E2 FA | 	rdword	arg03, objptr
13cf8     F0 16 06 F5 | 	and	arg03, #240
13cfc     10 16 06 F1 | 	add	arg03, #16
13d00     F2 16 52 FC | 	wrword	arg03, objptr
13d04     38 E4 85 F1 | 	sub	objptr, #56
13d08                 | LR__1680
13d08                 | '   
13d08                 | ' if (achar<>9) && (achar<>10) 
13d08     09 1E 0E F2 | 	cmp	local01, #9 wz
13d0c     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
13d10     44 00 90 AD |  if_e	jmp	#LR__1681
13d14                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
13d14     38 E4 05 F1 | 	add	objptr, #56
13d18     F2 12 E2 FA | 	rdword	arg01, objptr
13d1c     02 E4 05 F1 | 	add	objptr, #2
13d20     F2 14 C2 FA | 	rdbyte	arg02, objptr
13d24     04 14 66 F0 | 	shl	arg02, #4
13d28     03 E4 05 F1 | 	add	objptr, #3
13d2c     F2 18 02 FB | 	rdlong	arg04, objptr
13d30     04 E4 05 F1 | 	add	objptr, #4
13d34     F2 1A 02 FB | 	rdlong	arg05, objptr
13d38     41 E4 85 F1 | 	sub	objptr, #65
13d3c     0F 17 02 F6 | 	mov	arg03, local01
13d40     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
13d44                 | '   cursor_x+=2
13d44     38 E4 05 F1 | 	add	objptr, #56
13d48     F2 1E E2 FA | 	rdword	local01, objptr
13d4c     02 1E 06 F1 | 	add	local01, #2
13d50     F2 1E 52 FC | 	wrword	local01, objptr
13d54     38 E4 85 F1 | 	sub	objptr, #56
13d58                 | LR__1681
13d58                 | ' 
13d58                 | ' if cursor_x>=256
13d58     38 E4 05 F1 | 	add	objptr, #56
13d5c     F2 1E E2 FA | 	rdword	local01, objptr
13d60     38 E4 85 F1 | 	sub	objptr, #56
13d64     00 1F 56 F2 | 	cmps	local01, #256 wc
13d68     64 00 90 CD |  if_b	jmp	#LR__1683
13d6c                 | '   cursor_x:=0
13d6c     38 E4 05 F1 | 	add	objptr, #56
13d70     F2 00 58 FC | 	wrword	#0, objptr
13d74                 | '   cursor_y+=1
13d74     02 E4 05 F1 | 	add	objptr, #2
13d78     F2 1E C2 FA | 	rdbyte	local01, objptr
13d7c     01 1E 06 F1 | 	add	local01, #1
13d80     F2 1E 42 FC | 	wrbyte	local01, objptr
13d84                 | '   if cursor_y>st_lines-1
13d84     C3 E4 05 F1 | 	add	objptr, #195
13d88     F2 1E 02 FB | 	rdlong	local01, objptr
13d8c     01 1E 86 F1 | 	sub	local01, #1
13d90     C3 E4 85 F1 | 	sub	objptr, #195
13d94     F2 16 C2 FA | 	rdbyte	arg03, objptr
13d98     3A E4 85 F1 | 	sub	objptr, #58
13d9c     0F 17 5A F2 | 	cmps	arg03, local01 wcz
13da0     2C 00 90 ED |  if_be	jmp	#LR__1682
13da4                 | '     scrollup()
13da4     00 12 06 F6 | 	mov	arg01, #0
13da8     01 00 00 FF 
13dac     40 14 06 F6 | 	mov	arg02, ##576
13db0     10 16 06 F6 | 	mov	arg03, #16
13db4     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
13db8                 | '     cursor_y:=st_lines-1
13db8     FD E4 05 F1 | 	add	objptr, #253
13dbc     F2 1E 02 FB | 	rdlong	local01, objptr
13dc0     01 1E 86 F1 | 	sub	local01, #1
13dc4     C3 E4 85 F1 | 	sub	objptr, #195
13dc8     F2 1E 42 FC | 	wrbyte	local01, objptr
13dcc     3A E4 85 F1 | 	sub	objptr, #58
13dd0                 | LR__1682
13dd0                 | LR__1683
13dd0                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
13dd0     38 E4 05 F1 | 	add	objptr, #56
13dd4     F2 14 E2 FA | 	rdword	arg02, objptr
13dd8     02 14 66 F0 | 	shl	arg02, #2
13ddc     02 E4 05 F1 | 	add	objptr, #2
13de0     F2 16 C2 FA | 	rdbyte	arg03, objptr
13de4     3A E4 85 F1 | 	sub	objptr, #58
13de8     04 16 66 F0 | 	shl	arg03, #4
13dec     11 12 06 F6 | 	mov	arg01, #17
13df0     30 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
13df4     A7 F0 03 F6 | 	mov	ptra, fp
13df8     B2 00 A0 FD | 	call	#popregs_
13dfc                 | _hg010b_spin2_putchar_ret
13dfc     2D 00 64 FD | 	ret
13e00                 | 
13e00                 | '     
13e00                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
13e00                 | ' 
13e00                 | ' pub putchar2(achar) | c,x,y,l,newcpl
13e00                 | _hg010b_spin2_putchar2
13e00     01 4A 05 F6 | 	mov	COUNT_, #1
13e04     A8 00 A0 FD | 	call	#pushregs_
13e08                 | ' 
13e08                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
13e08     38 E4 05 F1 | 	add	objptr, #56
13e0c     F2 1E E2 FA | 	rdword	local01, objptr
13e10     02 E4 05 F1 | 	add	objptr, #2
13e14     F2 14 C2 FA | 	rdbyte	arg02, objptr
13e18     04 14 66 F0 | 	shl	arg02, #4
13e1c     09 17 02 F6 | 	mov	arg03, arg01
13e20     03 E4 05 F1 | 	add	objptr, #3
13e24     F2 18 02 FB | 	rdlong	arg04, objptr
13e28     04 E4 05 F1 | 	add	objptr, #4
13e2c     F2 1A 02 FB | 	rdlong	arg05, objptr
13e30     41 E4 85 F1 | 	sub	objptr, #65
13e34     0F 13 02 F6 | 	mov	arg01, local01
13e38     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
13e3c                 | ' cursor_x+=2
13e3c     38 E4 05 F1 | 	add	objptr, #56
13e40     F2 1E E2 FA | 	rdword	local01, objptr
13e44     02 1E 06 F1 | 	add	local01, #2
13e48     F2 1E 52 FC | 	wrword	local01, objptr
13e4c                 | ' if cursor_x>=256
13e4c     F2 1E E2 FA | 	rdword	local01, objptr
13e50     38 E4 85 F1 | 	sub	objptr, #56
13e54     00 1F 56 F2 | 	cmps	local01, #256 wc
13e58     64 00 90 CD |  if_b	jmp	#LR__1691
13e5c                 | '   cursor_x:=0
13e5c     38 E4 05 F1 | 	add	objptr, #56
13e60     F2 00 58 FC | 	wrword	#0, objptr
13e64                 | '   cursor_y+=1
13e64     02 E4 05 F1 | 	add	objptr, #2
13e68     F2 1E C2 FA | 	rdbyte	local01, objptr
13e6c     01 1E 06 F1 | 	add	local01, #1
13e70     F2 1E 42 FC | 	wrbyte	local01, objptr
13e74                 | '   if cursor_y>st_lines-1
13e74     C3 E4 05 F1 | 	add	objptr, #195
13e78     F2 1E 02 FB | 	rdlong	local01, objptr
13e7c     01 1E 86 F1 | 	sub	local01, #1
13e80     C3 E4 85 F1 | 	sub	objptr, #195
13e84     F2 1A C2 FA | 	rdbyte	arg05, objptr
13e88     3A E4 85 F1 | 	sub	objptr, #58
13e8c     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
13e90     2C 00 90 ED |  if_be	jmp	#LR__1690
13e94                 | '     scrollup()
13e94     00 12 06 F6 | 	mov	arg01, #0
13e98     01 00 00 FF 
13e9c     40 14 06 F6 | 	mov	arg02, ##576
13ea0     10 16 06 F6 | 	mov	arg03, #16
13ea4     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
13ea8                 | '     cursor_y:=st_lines-1
13ea8     FD E4 05 F1 | 	add	objptr, #253
13eac     F2 1E 02 FB | 	rdlong	local01, objptr
13eb0     01 1E 86 F1 | 	sub	local01, #1
13eb4     C3 E4 85 F1 | 	sub	objptr, #195
13eb8     F2 1E 42 FC | 	wrbyte	local01, objptr
13ebc     3A E4 85 F1 | 	sub	objptr, #58
13ec0                 | LR__1690
13ec0                 | LR__1691
13ec0                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
13ec0     38 E4 05 F1 | 	add	objptr, #56
13ec4     F2 14 E2 FA | 	rdword	arg02, objptr
13ec8     02 14 66 F0 | 	shl	arg02, #2
13ecc     02 E4 05 F1 | 	add	objptr, #2
13ed0     F2 16 C2 FA | 	rdbyte	arg03, objptr
13ed4     3A E4 85 F1 | 	sub	objptr, #58
13ed8     04 16 66 F0 | 	shl	arg03, #4
13edc     11 12 06 F6 | 	mov	arg01, #17
13ee0     40 F0 BF FD | 	call	#_hg010b_spin2_setspritepos
13ee4     A7 F0 03 F6 | 	mov	ptra, fp
13ee8     B2 00 A0 FD | 	call	#popregs_
13eec                 | _hg010b_spin2_putchar2_ret
13eec     2D 00 64 FD | 	ret
13ef0                 | 
13ef0                 | ' ''--------- Output a string at the cursor position, move the cursor  
13ef0                 | ' 
13ef0                 | ' pub write(text) | iii,c,ncx,ncy
13ef0                 | _hg010b_spin2_write
13ef0     04 4A 05 F6 | 	mov	COUNT_, #4
13ef4     A8 00 A0 FD | 	call	#pushregs_
13ef8     09 1F 02 F6 | 	mov	local01, arg01
13efc                 | ' 
13efc                 | ' repeat iii from 0 to strsize(text)-1
13efc     00 20 06 F6 | 	mov	local02, #0
13f00     0F 13 02 F6 | 	mov	arg01, local01
13f04     09 23 02 F6 | 	mov	local03, arg01
13f08     97 06 48 FB | 	callpa	#(@LR__1701-@LR__1700)>>2,fcache_load_ptr_
13f0c                 | LR__1700
13f0c     11 FB C9 FA | 	rdbyte	result1, local03 wz
13f10     01 22 06 51 |  if_ne	add	local03, #1
13f14     F4 FF 9F 5D |  if_ne	jmp	#LR__1700
13f18                 | LR__1701
13f18     09 23 82 F1 | 	sub	local03, arg01
13f1c     01 22 86 F1 | 	sub	local03, #1
13f20     00 22 56 F2 | 	cmps	local03, #0 wc
13f24     01 24 86 F6 | 	negc	local04, #1
13f28     12 23 02 F1 | 	add	local03, local04
13f2c                 | LR__1702
13f2c                 | '   putchar2(byte[text+iii])
13f2c     0F 13 02 F6 | 	mov	arg01, local01
13f30     10 13 02 F1 | 	add	arg01, local02
13f34     09 13 C2 FA | 	rdbyte	arg01, arg01
13f38     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
13f3c     12 21 02 F1 | 	add	local02, local04
13f40     11 21 0A F2 | 	cmp	local02, local03 wz
13f44     E4 FF 9F 5D |  if_ne	jmp	#LR__1702
13f48     A7 F0 03 F6 | 	mov	ptra, fp
13f4c     B2 00 A0 FD | 	call	#popregs_
13f50                 | _hg010b_spin2_write_ret
13f50     2D 00 64 FD | 	ret
13f54                 | 
13f54                 | ' 
13f54                 | ' ''-----------  Scroll the screen one line up
13f54                 | ' 
13f54                 | ' pub scrollup(start=0, end=576 , amount=16) | i
13f54                 | _hg010b_spin2_scrollup
13f54     01 4A 05 F6 | 	mov	COUNT_, #1
13f58     A8 00 A0 FD | 	call	#pushregs_
13f5c                 | ' 	
13f5c                 | ' repeat i from 0 to 559 
13f5c     00 1E 06 F6 | 	mov	local01, #0
13f60                 | LR__1710
13f60     F5 E4 05 F1 | 	add	objptr, #245
13f64     F2 18 02 FB | 	rdlong	arg04, objptr
13f68     1C E4 85 F1 | 	sub	objptr, #28
13f6c     F2 14 02 FB | 	rdlong	arg02, objptr
13f70     0F 13 02 F6 | 	mov	arg01, local01
13f74     10 12 06 F1 | 	add	arg01, #16
13f78     02 12 66 F0 | 	shl	arg01, #2
13f7c     14 E4 05 F1 | 	add	objptr, #20
13f80     F2 16 02 FB | 	rdlong	arg03, objptr
13f84     0B 13 02 FD | 	qmul	arg01, arg03
13f88                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
13f88     F6 03 00 FF 
13f8c     00 12 06 F6 | 	mov	arg01, ##519168
13f90     0C 13 82 F1 | 	sub	arg01, arg04
13f94     02 16 66 F0 | 	shl	arg03, #2
13f98     0A 00 00 FF 
13f9c     D3 E5 05 F1 | 	add	objptr, ##5587
13fa0     18 18 62 FD | 	getqx	arg04
13fa4     0C 15 02 F1 | 	add	arg02, arg04
13fa8     7C 04 B0 FD | 	call	#_psram_spin2_read1
13fac     0A 00 00 FF 
13fb0     CB E5 85 F1 | 	sub	objptr, ##5579
13fb4     F2 18 02 FB | 	rdlong	arg04, objptr
13fb8     1C E4 85 F1 | 	sub	objptr, #28
13fbc     F2 14 02 FB | 	rdlong	arg02, objptr
13fc0     0F 13 02 F6 | 	mov	arg01, local01
13fc4     02 12 66 F0 | 	shl	arg01, #2
13fc8     14 E4 05 F1 | 	add	objptr, #20
13fcc     F2 16 02 FB | 	rdlong	arg03, objptr
13fd0     0B 13 02 FD | 	qmul	arg01, arg03
13fd4                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
13fd4     F6 03 00 FF 
13fd8     00 12 06 F6 | 	mov	arg01, ##519168
13fdc     0C 13 82 F1 | 	sub	arg01, arg04
13fe0     02 16 66 F0 | 	shl	arg03, #2
13fe4     0A 00 00 FF 
13fe8     D3 E5 05 F1 | 	add	objptr, ##5587
13fec     18 18 62 FD | 	getqx	arg04
13ff0     0C 15 02 F1 | 	add	arg02, arg04
13ff4     CC 04 B0 FD | 	call	#_psram_spin2_write
13ff8     0B 00 00 FF 
13ffc     C0 E4 85 F1 | 	sub	objptr, ##5824
14000     01 1E 06 F1 | 	add	local01, #1
14004     01 00 00 FF 
14008     30 1E 56 F2 | 	cmps	local01, ##560 wc
1400c     50 FF 9F CD |  if_b	jmp	#LR__1710
14010                 | ' 
14010                 | ' repeat i from 560 to 575
14010     01 00 00 FF 
14014     30 1E 06 F6 | 	mov	local01, ##560
14018                 | LR__1711
14018                 | '    fastline(0,1023,i,write_background)   
14018     41 E4 05 F1 | 	add	objptr, #65
1401c     F2 18 02 FB | 	rdlong	arg04, objptr
14020     41 E4 85 F1 | 	sub	objptr, #65
14024     00 12 06 F6 | 	mov	arg01, #0
14028     09 14 CE F9 | 	bmask	arg02, #9
1402c     0F 17 02 F6 | 	mov	arg03, local01
14030     20 F1 BF FD | 	call	#_hg010b_spin2_fastline
14034     01 1E 06 F1 | 	add	local01, #1
14038     01 00 00 FF 
1403c     40 1E 16 F2 | 	cmp	local01, ##576 wc
14040     D4 FF 9F CD |  if_b	jmp	#LR__1711
14044     A7 F0 03 F6 | 	mov	ptra, fp
14048     B2 00 A0 FD | 	call	#popregs_
1404c                 | _hg010b_spin2_scrollup_ret
1404c     2D 00 64 FD | 	ret
14050                 | 
14050                 | ' 
14050                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
14050                 | ' 
14050                 | ' pub crlf()
14050                 | _hg010b_spin2_crlf
14050                 | ' 
14050                 | ' cursor_x:=leading_spaces*2
14050     01 00 00 FF 
14054     B2 E4 05 F1 | 	add	objptr, ##690
14058     F2 16 02 FB | 	rdlong	arg03, objptr
1405c     01 16 66 F0 | 	shl	arg03, #1
14060     01 00 00 FF 
14064     7A E4 85 F1 | 	sub	objptr, ##634
14068     F2 16 52 FC | 	wrword	arg03, objptr
1406c                 | ' cursor_y+=1
1406c     02 E4 05 F1 | 	add	objptr, #2
14070     F2 16 C2 FA | 	rdbyte	arg03, objptr
14074     01 16 06 F1 | 	add	arg03, #1
14078     F2 16 42 FC | 	wrbyte	arg03, objptr
1407c                 | ' if cursor_y>st_lines-1
1407c     C3 E4 05 F1 | 	add	objptr, #195
14080     F2 16 02 FB | 	rdlong	arg03, objptr
14084     01 16 86 F1 | 	sub	arg03, #1
14088     C3 E4 85 F1 | 	sub	objptr, #195
1408c     F2 14 C2 FA | 	rdbyte	arg02, objptr
14090     3A E4 85 F1 | 	sub	objptr, #58
14094     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
14098     2C 00 90 ED |  if_be	jmp	#LR__1720
1409c                 | '   scrollup()
1409c     00 12 06 F6 | 	mov	arg01, #0
140a0     01 00 00 FF 
140a4     40 14 06 F6 | 	mov	arg02, ##576
140a8     10 16 06 F6 | 	mov	arg03, #16
140ac     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
140b0                 | '   cursor_y:=st_lines-1
140b0     FD E4 05 F1 | 	add	objptr, #253
140b4     F2 16 02 FB | 	rdlong	arg03, objptr
140b8     01 16 86 F1 | 	sub	arg03, #1
140bc     C3 E4 85 F1 | 	sub	objptr, #195
140c0     F2 16 42 FC | 	wrbyte	arg03, objptr
140c4     3A E4 85 F1 | 	sub	objptr, #58
140c8                 | LR__1720
140c8                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
140c8     38 E4 05 F1 | 	add	objptr, #56
140cc     F2 14 E2 FA | 	rdword	arg02, objptr
140d0     02 14 66 F0 | 	shl	arg02, #2
140d4     02 E4 05 F1 | 	add	objptr, #2
140d8     F2 16 C2 FA | 	rdbyte	arg03, objptr
140dc     3A E4 85 F1 | 	sub	objptr, #58
140e0     04 16 66 F0 | 	shl	arg03, #4
140e4     11 12 06 F6 | 	mov	arg01, #17
140e8     38 EE BF FD | 	call	#_hg010b_spin2_setspritepos
140ec                 | _hg010b_spin2_crlf_ret
140ec     2D 00 64 FD | 	ret
140f0                 | 
140f0                 | ' 
140f0                 | ' 
140f0                 | ' '*************************************************************************
140f0                 | ' '                                                                        *
140f0                 | ' '  Conversions                                                           *
140f0                 | ' '                                                                        *
140f0                 | ' '*************************************************************************
140f0                 | ' 
140f0                 | ' ''---------- Convert a integer to dec string, return a pointer
140f0                 | ' 
140f0                 | ' pub inttostr(i):result |q,pos,k,j
140f0                 | _hg010b_spin2_inttostr
140f0     03 4A 05 F6 | 	mov	COUNT_, #3
140f4     A8 00 A0 FD | 	call	#pushregs_
140f8     09 1F 0A F6 | 	mov	local01, arg01 wz
140fc                 | ' 
140fc                 | ' j:=i
140fc                 | ' pos:=10
140fc     0A 20 06 F6 | 	mov	local02, #10
14100                 | ' k:=0
14100     00 22 06 F6 | 	mov	local03, #0
14104                 | ' 
14104                 | ' if (j==0)
14104     18 00 90 5D |  if_ne	jmp	#LR__1730
14108                 | '   n_string[0]:=48
14108     49 E4 05 F1 | 	add	objptr, #73
1410c     F2 60 48 FC | 	wrbyte	#48, objptr
14110                 | '   n_string[1]:=0
14110     01 E4 05 F1 | 	add	objptr, #1
14114     F2 00 48 FC | 	wrbyte	#0, objptr
14118     4A E4 85 F1 | 	sub	objptr, #74
1411c     C4 00 90 FD | 	jmp	#LR__1737
14120                 | LR__1730
14120                 | ' 
14120                 | ' else
14120                 | '   if (j<0)
14120     0F 1F 52 F6 | 	abs	local01, local01 wc
14124                 | '     j:=0-j
14124                 | '     k:=45
14124     2D 22 06 C6 |  if_b	mov	local03, #45
14128                 | ' 
14128                 | '   n_string[11]:=0
14128     54 E4 05 F1 | 	add	objptr, #84
1412c     F2 00 48 FC | 	wrbyte	#0, objptr
14130     54 E4 85 F1 | 	sub	objptr, #84
14134     97 24 48 FB | 	callpa	#(@LR__1732-@LR__1731)>>2,fcache_load_ptr_
14138                 | '   repeat while (pos>-1)
14138                 | LR__1731
14138     00 20 56 F2 | 	cmps	local02, #0 wc
1413c     40 00 90 CD |  if_b	jmp	#LR__1733
14140     0F FB 51 F6 | 	abs	result1, local01 wc
14144     0A FA 15 FD | 	qdiv	result1, #10
14148                 | '     q:=j//10
14148     19 FA 61 FD | 	getqy	result1
1414c     FD FA 81 F6 | 	negc	result1, result1
14150     0F 1F 52 F6 | 	abs	local01, local01 wc
14154     0A 1E 16 FD | 	qdiv	local01, #10
14158                 | '     q:=48+q
14158     30 FA 05 F1 | 	add	result1, #48
1415c                 | '     n_string[pos]:=q
1415c     10 1F 02 F6 | 	mov	local01, local02
14160     49 E4 05 F1 | 	add	objptr, #73
14164     F2 1E 02 F1 | 	add	local01, objptr
14168     0F FB 41 FC | 	wrbyte	result1, local01
1416c                 | '     j:=j/10
1416c     49 E4 85 F1 | 	sub	objptr, #73
14170                 | '     pos-=1
14170     01 20 86 F1 | 	sub	local02, #1
14174     18 1E 62 FD | 	getqx	local01
14178     0F 1F 82 F6 | 	negc	local01, local01
1417c     B8 FF 9F FD | 	jmp	#LR__1731
14180                 | LR__1732
14180                 | LR__1733
14180                 | '   repeat while n_string[0]==48
14180                 | LR__1734
14180     49 E4 05 F1 | 	add	objptr, #73
14184     F2 16 C2 FA | 	rdbyte	arg03, objptr
14188     49 E4 85 F1 | 	sub	objptr, #73
1418c     30 16 0E F2 | 	cmp	arg03, #48 wz
14190     20 00 90 5D |  if_ne	jmp	#LR__1735
14194                 | '     bytemove(@n_string,@n_string+1,12)
14194     49 E4 05 F1 | 	add	objptr, #73
14198     F2 12 02 F6 | 	mov	arg01, objptr
1419c     F2 14 02 F6 | 	mov	arg02, objptr
141a0     49 E4 85 F1 | 	sub	objptr, #73
141a4     01 14 06 F1 | 	add	arg02, #1
141a8     0C 16 06 F6 | 	mov	arg03, #12
141ac     84 0C B0 FD | 	call	#__system____builtin_memmove
141b0     CC FF 9F FD | 	jmp	#LR__1734
141b4                 | LR__1735
141b4                 | ' 
141b4                 | '   if k==45
141b4     2D 22 0E F2 | 	cmp	local03, #45 wz
141b8     28 00 90 5D |  if_ne	jmp	#LR__1736
141bc                 | '      bytemove(@n_string+1,@n_string,12)
141bc     49 E4 05 F1 | 	add	objptr, #73
141c0     F2 12 02 F6 | 	mov	arg01, objptr
141c4     01 12 06 F1 | 	add	arg01, #1
141c8     F2 14 02 F6 | 	mov	arg02, objptr
141cc     49 E4 85 F1 | 	sub	objptr, #73
141d0     0C 16 06 F6 | 	mov	arg03, #12
141d4     5C 0C B0 FD | 	call	#__system____builtin_memmove
141d8                 | '      n_string[0]:=k
141d8     49 E4 05 F1 | 	add	objptr, #73
141dc     F2 22 42 FC | 	wrbyte	local03, objptr
141e0     49 E4 85 F1 | 	sub	objptr, #73
141e4                 | LR__1736
141e4                 | LR__1737
141e4                 | ' 
141e4                 | ' q:=@n_string
141e4     49 E4 05 F1 | 	add	objptr, #73
141e8     F2 FA 01 F6 | 	mov	result1, objptr
141ec     49 E4 85 F1 | 	sub	objptr, #73
141f0                 | ' return q
141f0     A7 F0 03 F6 | 	mov	ptra, fp
141f4     B2 00 A0 FD | 	call	#popregs_
141f8                 | _hg010b_spin2_inttostr_ret
141f8     2D 00 64 FD | 	ret
141fc                 | 
141fc                 | ' 
141fc                 | ' '..............................................................................
141fc                 | ' 
141fc                 | ' {{
141fc                 | ' }}
141fc                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
141fc                 | _psram_spin2_startx
141fc     04 4A 05 F6 | 	mov	COUNT_, #4
14200     A8 00 A0 FD | 	call	#pushregs_
14204     09 1F 02 F6 | 	mov	local01, arg01
14208     0B 21 02 F6 | 	mov	local02, arg03
1420c     0C 23 02 F6 | 	mov	local03, arg04
14210                 | '     stop() ' restart driver if required
14210     54 01 B0 FD | 	call	#_psram_spin2_stop
14214     00 1E 0E F2 | 	cmp	local01, #0 wz
14218     14 1E 06 AB |  if_e	rdlong	local01, #20
1421c     0F 15 52 F6 | 	abs	arg02, local01 wc
14220     A1 07 00 FF 
14224     40 14 16 FD | 	qdiv	arg02, ##1000000
14228                 | ' 
14228                 | '     ' use current frequency if none specified
14228                 | ' 
14228                 | '     if freq == 0 
14228                 | '         freq := clkfreq 
14228                 | ' 
14228                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
14228                 | ' 
14228                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
14228                 | '     if burst < 0
14228                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
14228     18 14 62 FD | 	getqx	arg02
1422c     0A 19 82 F6 | 	negc	arg04, arg02
14230     03 18 66 F0 | 	shl	arg04, #3
14234     84 18 86 F1 | 	sub	arg04, #132
14238     04 18 46 F0 | 	shr	arg04, #4
1423c     04 18 66 F0 | 	shl	arg04, #4
14240     00 18 56 F2 | 	cmps	arg04, #0 wc
14244     0E FA 65 C6 |  if_b	neg	result1, #14
14248     10 01 90 CD |  if_b	jmp	#LR__1743
1424c                 | ' 
1424c                 | '     ' compute the input delay
1424c                 | ' 
1424c                 | '     if delay <= 0
1424c     01 20 56 F2 | 	cmps	local02, #1 wc
14250     10 00 90 3D |  if_ae	jmp	#LR__1740
14254                 | '         delay := lookupDelay(freq)
14254     0F 13 02 F6 | 	mov	arg01, local01
14258     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1425c     FD 20 02 F6 | 	mov	local02, result1
14260     04 00 90 FD | 	jmp	#LR__1741
14264                 | LR__1740
14264                 | '     else
14264                 | '         delay <#= $f ' limit to 15
14264     0F 20 66 F3 | 	fles	local02, #15
14268                 | LR__1741
14268                 | ' 
14268                 | '     ' create our lock
14268                 | ' 
14268                 | '     driverlock := LOCKNEW()  
14268     00 FA 05 F6 | 	mov	result1, #0
1426c     04 FA 61 FD | 	locknew	result1
14270     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14274     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
14278                 | '     if driverlock == -1
14278     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1427c     FF FF 7F FF 
14280     FF FB 0D F2 | 	cmp	result1, ##-1 wz
14284                 | '         return ERR_NO_LOCK
14284     1A FA 65 A6 |  if_e	neg	result1, #26
14288     D0 00 90 AD |  if_e	jmp	#LR__1743
1428c                 | ' 
1428c                 | '     ' patch in the proper data and HUB addresses to the startup structure
1428c                 | ' 
1428c                 | '     long[@startupData][0]:=clkfreq
1428c     14 1E 06 FB | 	rdlong	local01, #20
14290     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
14294     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
14298                 | ' '    long[@startupData][1]:=$1000_0000
14298                 | '     long[@startupData][5]:=@deviceData
14298     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1429c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
142a0     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
142a4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
142a8     14 14 06 F1 | 	add	arg02, #20
142ac     0A 1F 62 FC | 	wrlong	local01, arg02
142b0                 | '     long[@startupData][6]:=@qosData
142b0     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
142b4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
142b8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
142bc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
142c0     18 14 06 F1 | 	add	arg02, #24
142c4     0A 1F 62 FC | 	wrlong	local01, arg02
142c8                 | '     long[@startupData][7]:=$7FF00
142c8     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
142cc     1C 1E 06 F1 | 	add	local01, #28
142d0     FF 03 80 FF 
142d4     0F 01 6A FC | 	wrlong	##524032, local01
142d8                 | ' 
142d8                 | '     ' setup some default bank and QoS parameter values
142d8                 | ' 
142d8                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
142d8     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
142dc     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
142e0     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
142e4     10 18 66 F0 | 	shl	arg04, #16
142e8     0C 20 66 F0 | 	shl	local02, #12
142ec     10 19 42 F5 | 	or	arg04, local02
142f0     18 18 46 F5 | 	or	arg04, #24
142f4     0C 15 02 F6 | 	mov	arg02, arg04
142f8     02 16 06 F6 | 	mov	arg03, #2
142fc     A0 00 A0 FD | 	call	#\builtin_longfill_
14300                 | '     longfill(@qosData, $FFFF0000, 8)
14300     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14304     07 16 06 F6 | 	mov	arg03, #7
14308     28 16 62 FD | 	setq	arg03
1430c     80 FF FF FF 
14310     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
14314                 | ' 
14314                 | '     ' get the address of the PSRAM memory driver so we can start it
14314                 | ' 
14314                 | '     driverAddr:= driver.getDriverAddr()
14314                 | '     return @driver_start
14314     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
14318     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1431c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
14320                 | ' 
14320                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
14320                 | ' 
14320                 | '     if desiredcog < 0
14320     00 22 56 F2 | 	cmps	local03, #0 wc
14324                 | '         desiredcog := NEWCOG
14324     10 22 06 C6 |  if_b	mov	local03, #16
14328                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
14328     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1432c     11 25 02 F6 | 	mov	local04, local03
14330     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
14334     0A 25 F2 FC | 	coginit	local04, arg02 wc
14338     01 24 66 C6 |  if_b	neg	local04, #1
1433c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14340     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
14344                 | '     repeat until long[@startupData] == 0 
14344     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
14348                 | LR__1742
14348     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1434c     F8 FF 9F 5D |  if_ne	jmp	#LR__1742
14350                 | ' 
14350                 | '     return drivercog
14350     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
14354     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
14358     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1435c                 | LR__1743
1435c     A7 F0 03 F6 | 	mov	ptra, fp
14360     B2 00 A0 FD | 	call	#popregs_
14364                 | _psram_spin2_startx_ret
14364     2D 00 64 FD | 	ret
14368                 | 
14368                 | ' 
14368                 | ' '..............................................................................
14368                 | ' 
14368                 | ' {{
14368                 | ' }}
14368                 | ' PUB stop() : i
14368                 | _psram_spin2_stop
14368     00 00 06 F6 | 	mov	_var01, #0
1436c                 | '     if drivercog <> -1
1436c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14370     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14374     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14378     FF FF 7F FF 
1437c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
14380     70 00 90 AD |  if_e	jmp	#LR__1753
14384                 | '         cogstop(drivercog) ' a rather brutal stop
14384     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
14388     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1438c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14390     03 12 62 FD | 	cogstop	arg01
14394     97 26 48 FB | 	callpa	#(@LR__1752-@LR__1750)>>2,fcache_load_ptr_
14398                 | '         repeat i from 0 to 7
14398                 | LR__1750
14398                 | '             if long[$7FF00][i*3] < 0
14398     00 FB 01 F6 | 	mov	result1, _var01
1439c     01 FA 65 F0 | 	shl	result1, #1
143a0     00 FB 01 F1 | 	add	result1, _var01
143a4     02 FA 65 F0 | 	shl	result1, #2
143a8     FF 03 00 FF 
143ac     00 FB 05 F1 | 	add	result1, ##524032
143b0     FD FA 01 FB | 	rdlong	result1, result1
143b4     00 FA 55 F2 | 	cmps	result1, #0 wc
143b8     1C 00 90 3D |  if_ae	jmp	#LR__1751
143bc                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
143bc     00 FB 01 F6 | 	mov	result1, _var01
143c0     01 FA 65 F0 | 	shl	result1, #1
143c4     00 FB 01 F1 | 	add	result1, _var01
143c8     02 FA 65 F0 | 	shl	result1, #2
143cc     FF 03 00 FF 
143d0     00 FB 05 F1 | 	add	result1, ##524032
143d4     FD 20 68 FC | 	wrlong	#16, result1
143d8                 | LR__1751
143d8     01 00 06 F1 | 	add	_var01, #1
143dc     08 00 56 F2 | 	cmps	_var01, #8 wc
143e0     B4 FF 9F CD |  if_b	jmp	#LR__1750
143e4                 | LR__1752
143e4                 | '         drivercog := -1
143e4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
143e8     FF FF FF FF 
143ec     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
143f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
143f4                 | LR__1753
143f4                 | '     if driverlock <> -1
143f4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
143f8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
143fc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14400     FF FF 7F FF 
14404     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
14408                 | '         LOCKRET(driverlock)
14408     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1440c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
14410     05 12 62 5D |  if_ne	lockret	arg01
14414                 | '         driverlock := -1
14414     FF FF FF 5F 
14418     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1441c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
14420     00 FB 01 F6 | 	mov	result1, _var01
14424                 | _psram_spin2_stop_ret
14424     2D 00 64 FD | 	ret
14428                 | 
14428                 | ' 
14428                 | ' '..............................................................................
14428                 | ' 
14428                 | ' {{
14428                 | ' }}
14428                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
14428                 | _psram_spin2_read1
14428                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
14428                 | '     if drivercog == -1 ' driver must be running
14428     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1442c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
14430     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14434     FF FF 7F FF 
14438     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1443c                 | '         return ERR_INACTIVE
1443c     0F FA 65 A6 |  if_e	neg	result1, #15
14440     7C 00 90 AD |  if_e	jmp	#LR__1761
14444                 | '     if count == 0 ' don't even bother reading
14444     00 16 0E F2 | 	cmp	arg03, #0 wz
14448                 | '         return 0
14448     00 FA 05 A6 |  if_e	mov	result1, #0
1444c     70 00 90 AD |  if_e	jmp	#LR__1761
14450                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
14450     00 FA 05 F6 | 	mov	result1, #0
14454     01 FA 61 FD | 	cogid	result1
14458     FD 00 02 F6 | 	mov	_var01, result1
1445c     01 00 66 F0 | 	shl	_var01, #1
14460     FD 00 02 F1 | 	add	_var01, result1
14464     02 00 66 F0 | 	shl	_var01, #2
14468     FF 03 00 FF 
1446c     00 03 06 F6 | 	mov	_var02, ##524032
14470     00 03 02 F1 | 	add	_var02, _var01
14474                 | '     if long[mailbox] < 0
14474     01 01 02 FB | 	rdlong	_var01, _var02
14478     00 00 56 F2 | 	cmps	_var01, #0 wc
1447c                 | '         return ERR_MAILBOX_BUSY
1447c     1C FA 65 C6 |  if_b	neg	result1, #28
14480     3C 00 90 CD |  if_b	jmp	#LR__1761
14484                 | '     long[mailbox][2] := count
14484     08 02 06 F1 | 	add	_var02, #8
14488     01 17 62 FC | 	wrlong	arg03, _var02
1448c                 | '     long[mailbox][1] := dstHubAddr
1448c     04 02 86 F1 | 	sub	_var02, #4
14490     01 13 62 FC | 	wrlong	arg01, _var02
14494     04 02 86 F1 | 	sub	_var02, #4
14498                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
14498     0A 05 02 F6 | 	mov	_var03, arg02
1449c     D9 04 06 F4 | 	bitl	_var03, #217
144a0     00 00 58 FF 
144a4     00 00 06 F6 | 	mov	_var01, ##-1342177280
144a8     02 01 02 F1 | 	add	_var01, _var03
144ac     01 01 62 FC | 	wrlong	_var01, _var02
144b0                 | '     repeat
144b0                 | LR__1760
144b0                 | '         result := long[mailbox]    
144b0     01 05 02 FB | 	rdlong	_var03, _var02
144b4     00 04 56 F2 | 	cmps	_var03, #0 wc
144b8     F4 FF 9F CD |  if_b	jmp	#LR__1760
144bc                 | '     while result < 0   
144bc                 | '     return -result                       'return success or error
144bc     02 FB 61 F6 | 	neg	result1, _var03
144c0                 | LR__1761
144c0                 | _psram_spin2_read1_ret
144c0     2D 00 64 FD | 	ret
144c4                 | 
144c4                 | ' 
144c4                 | ' '..............................................................................
144c4                 | ' 
144c4                 | ' {{
144c4                 | ' }}
144c4                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
144c4                 | _psram_spin2_write
144c4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
144c4                 | '     if drivercog == -1 ' driver must be running
144c4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
144c8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
144cc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
144d0     FF FF 7F FF 
144d4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
144d8                 | '         return ERR_INACTIVE
144d8     0F FA 65 A6 |  if_e	neg	result1, #15
144dc     7C 00 90 AD |  if_e	jmp	#LR__1771
144e0                 | '     if count == 0 ' don't even bother writing
144e0     00 16 0E F2 | 	cmp	arg03, #0 wz
144e4                 | '         return 0
144e4     00 FA 05 A6 |  if_e	mov	result1, #0
144e8     70 00 90 AD |  if_e	jmp	#LR__1771
144ec                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
144ec     00 FA 05 F6 | 	mov	result1, #0
144f0     01 FA 61 FD | 	cogid	result1
144f4     FD 00 02 F6 | 	mov	_var01, result1
144f8     01 00 66 F0 | 	shl	_var01, #1
144fc     FD 00 02 F1 | 	add	_var01, result1
14500     02 00 66 F0 | 	shl	_var01, #2
14504     FF 03 00 FF 
14508     00 03 06 F6 | 	mov	_var02, ##524032
1450c     00 03 02 F1 | 	add	_var02, _var01
14510                 | '     if long[mailbox] < 0
14510     01 01 02 FB | 	rdlong	_var01, _var02
14514     00 00 56 F2 | 	cmps	_var01, #0 wc
14518                 | '         return ERR_MAILBOX_BUSY
14518     1C FA 65 C6 |  if_b	neg	result1, #28
1451c     3C 00 90 CD |  if_b	jmp	#LR__1771
14520                 | '     long[mailbox][2] := count
14520     08 02 06 F1 | 	add	_var02, #8
14524     01 17 62 FC | 	wrlong	arg03, _var02
14528                 | '     long[mailbox][1] := srcHubAddr
14528     04 02 86 F1 | 	sub	_var02, #4
1452c     01 13 62 FC | 	wrlong	arg01, _var02
14530     04 02 86 F1 | 	sub	_var02, #4
14534                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
14534     0A 05 02 F6 | 	mov	_var03, arg02
14538     D9 04 06 F4 | 	bitl	_var03, #217
1453c     00 00 78 FF 
14540     00 00 06 F6 | 	mov	_var01, ##-268435456
14544     02 01 02 F1 | 	add	_var01, _var03
14548     01 01 62 FC | 	wrlong	_var01, _var02
1454c                 | '     repeat
1454c                 | LR__1770
1454c                 | '         result := long[mailbox]    
1454c     01 05 02 FB | 	rdlong	_var03, _var02
14550     00 04 56 F2 | 	cmps	_var03, #0 wc
14554     F4 FF 9F CD |  if_b	jmp	#LR__1770
14558                 | '     while result < 0   
14558                 | '     return -result                       'return success or error
14558     02 FB 61 F6 | 	neg	result1, _var03
1455c                 | LR__1771
1455c                 | _psram_spin2_write_ret
1455c     2D 00 64 FD | 	ret
14560                 | 
14560                 | ' 
14560                 | ' ' generalized fill
14560                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
14560                 | _psram_spin2_fill
14560     09 01 02 F6 | 	mov	_var01, arg01
14564     0A 03 02 F6 | 	mov	_var02, arg02
14568     0B 05 02 F6 | 	mov	_var03, arg03
1456c     0D 07 02 F6 | 	mov	_var04, arg05
14570                 | '     case datasize 
14570     01 06 86 F1 | 	sub	_var04, #1
14574     04 06 26 F3 | 	fle	_var04, #4
14578     30 06 62 FD | 	jmprel	_var04
1457c                 | LR__1780
1457c     10 00 90 FD | 	jmp	#LR__1781
14580     18 00 90 FD | 	jmp	#LR__1782
14584     2C 00 90 FD | 	jmp	#LR__1784
14588     1C 00 90 FD | 	jmp	#LR__1783
1458c     24 00 90 FD | 	jmp	#LR__1784
14590                 | LR__1781
14590                 | '         1: req := driver.R_WRITEBYTE
14590     00 00 60 FF 
14594     00 08 06 F6 | 	mov	_var05, ##-1073741824
14598     20 00 90 FD | 	jmp	#LR__1785
1459c                 | LR__1782
1459c                 | '         2: req := driver.R_WRITEWORD
1459c     00 00 68 FF 
145a0     00 08 06 F6 | 	mov	_var05, ##-805306368
145a4     14 00 90 FD | 	jmp	#LR__1785
145a8                 | LR__1783
145a8                 | '         4: req := driver.R_WRITELONG
145a8     00 00 70 FF 
145ac     00 08 06 F6 | 	mov	_var05, ##-536870912
145b0     08 00 90 FD | 	jmp	#LR__1785
145b4                 | LR__1784
145b4                 | '         other : return ERR_INVALID
145b4     06 FA 65 F6 | 	neg	result1, #6
145b8     94 00 90 FD | 	jmp	#LR__1787
145bc                 | LR__1785
145bc                 | '     if count == 0   ' nothing to do
145bc     00 04 0E F2 | 	cmp	_var03, #0 wz
145c0                 | '         return 0
145c0     00 FA 05 A6 |  if_e	mov	result1, #0
145c4     88 00 90 AD |  if_e	jmp	#LR__1787
145c8                 | '     if drivercog == -1
145c8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
145cc     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
145d0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
145d4     FF FF 7F FF 
145d8     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
145dc                 | '         return ERR_INACTIVE
145dc     0F FA 65 A6 |  if_e	neg	result1, #15
145e0     6C 00 90 AD |  if_e	jmp	#LR__1787
145e4                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
145e4     00 FA 05 F6 | 	mov	result1, #0
145e8     01 FA 61 FD | 	cogid	result1
145ec     FD 06 02 F6 | 	mov	_var04, result1
145f0     01 06 66 F0 | 	shl	_var04, #1
145f4     FD 06 02 F1 | 	add	_var04, result1
145f8     02 06 66 F0 | 	shl	_var04, #2
145fc     FF 03 00 FF 
14600     00 0B 06 F6 | 	mov	_var06, ##524032
14604     03 0B 02 F1 | 	add	_var06, _var04
14608                 | '     if long[mailbox] < 0
14608     05 07 02 FB | 	rdlong	_var04, _var06
1460c     00 06 56 F2 | 	cmps	_var04, #0 wc
14610                 | '         return ERR_MAILBOX_BUSY
14610     1C FA 65 C6 |  if_b	neg	result1, #28
14614     38 00 90 CD |  if_b	jmp	#LR__1787
14618                 | '     long[mailbox][2] := count
14618     08 0A 06 F1 | 	add	_var06, #8
1461c     05 05 62 FC | 	wrlong	_var03, _var06
14620                 | '     long[mailbox][1] := pattern
14620     04 0A 86 F1 | 	sub	_var06, #4
14624     05 03 62 FC | 	wrlong	_var02, _var06
14628     04 0A 86 F1 | 	sub	_var06, #4
1462c                 | '     long[mailbox] := req + (addr & $fffffff)
1462c     04 0D 02 F6 | 	mov	_var07, _var05
14630     00 0F 02 F6 | 	mov	_var08, _var01
14634     7C 0E 06 F4 | 	bitl	_var08, #124
14638     07 0D 02 F1 | 	add	_var07, _var08
1463c     05 0D 62 FC | 	wrlong	_var07, _var06
14640                 | '     repeat
14640                 | LR__1786
14640                 | '         r := long[mailbox]
14640     05 0F 02 FB | 	rdlong	_var08, _var06
14644     00 0E 56 F2 | 	cmps	_var08, #0 wc
14648     F4 FF 9F CD |  if_b	jmp	#LR__1786
1464c                 | '     while r < 0
1464c                 | '     return -r                  ' return 0 for success or negated error code
1464c     07 FB 61 F6 | 	neg	result1, _var08
14650                 | LR__1787
14650                 | _psram_spin2_fill_ret
14650     2D 00 64 FD | 	ret
14654                 | 
14654                 | ' 
14654                 | ' '..............................................................................
14654                 | ' 
14654                 | ' {{
14654                 | ' }}
14654                 | ' PUB setQos(cog, qos) : result | mailbox
14654                 | _psram_spin2_setQos
14654     09 01 02 F6 | 	mov	_var01, arg01
14658                 | '     if drivercog == -1 ' driver must be running
14658     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1465c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
14660     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
14664     FF FF 7F FF 
14668     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1466c                 | '         return ERR_INACTIVE
1466c     0F FA 65 A6 |  if_e	neg	result1, #15
14670     9C 00 90 AD |  if_e	jmp	#LR__1794
14674                 | '     if cog < 0 or cog > 7 ' enforce cog id range
14674     00 00 56 F2 | 	cmps	_var01, #0 wc
14678     08 00 90 CD |  if_b	jmp	#LR__1790
1467c     08 00 56 F2 | 	cmps	_var01, #8 wc
14680     08 00 90 CD |  if_b	jmp	#LR__1791
14684                 | LR__1790
14684                 | '         return ERR_INVALID
14684     06 FA 65 F6 | 	neg	result1, #6
14688     84 00 90 FD | 	jmp	#LR__1794
1468c                 | LR__1791
1468c                 | '     long[@qosData][cog] := qos & !$1ff
1468c     FF 15 26 F5 | 	andn	arg02, #511
14690     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
14694     02 00 66 F0 | 	shl	_var01, #2
14698     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1469c     00 15 62 FC | 	wrlong	arg02, _var01
146a0                 | '     mailbox := $7FF00 + drivercog*12
146a0     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
146a4     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
146a8     02 07 02 F6 | 	mov	_var04, _var03
146ac     01 06 66 F0 | 	shl	_var04, #1
146b0     02 07 02 F1 | 	add	_var04, _var03
146b4     02 06 66 F0 | 	shl	_var04, #2
146b8     FF 03 00 FF 
146bc     00 09 06 F6 | 	mov	_var05, ##524032
146c0     03 09 02 F1 | 	add	_var05, _var04
146c4                 | '     repeat until LOCKTRY(driverlock)
146c4     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
146c8                 | LR__1792
146c8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
146cc     06 12 72 FD | 	locktry	arg01 wc
146d0     F4 FF 9F 3D |  if_ae	jmp	#LR__1792
146d4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
146d8                 | '     long[mailbox] := driver.R_CONFIG + cogid()
146d8     00 06 06 F6 | 	mov	_var04, #0
146dc     01 06 62 FD | 	cogid	_var04
146e0     00 00 78 FF 
146e4     00 02 06 F6 | 	mov	_var02, ##-268435456
146e8     03 03 02 F1 | 	add	_var02, _var04
146ec     04 03 62 FC | 	wrlong	_var02, _var05
146f0                 | '     repeat while long[mailbox] < 0
146f0                 | LR__1793
146f0     04 03 02 FB | 	rdlong	_var02, _var05
146f4     00 02 56 F2 | 	cmps	_var02, #0 wc
146f8     F4 FF 9F CD |  if_b	jmp	#LR__1793
146fc                 | '     LOCKREL(driverlock)
146fc     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
14700     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
14704     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
14708     07 12 72 FD | 	lockrel	arg01 wc
1470c     00 FA 05 F6 | 	mov	result1, #0
14710                 | LR__1794
14710                 | _psram_spin2_setQos_ret
14710     2D 00 64 FD | 	ret
14714                 | 
14714                 | ' 
14714                 | ' '..............................................................................
14714                 | ' 
14714                 | ' {{
14714                 | ' }}
14714                 | ' PRI lookupDelay(freq) : delay | profile
14714                 | _psram_spin2_lookupDelay
14714                 | '     profile := @delayTable
14714     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
14718     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1471c                 | '     delay := long[profile][0]
1471c     00 03 02 FB | 	rdlong	_var02, _var01
14720                 | '     repeat while long[profile][1] 
14720     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
14724     97 16 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
14728                 | LR__1800
14728     04 00 06 F1 | 	add	_var01, #4
1472c     00 FB 09 FB | 	rdlong	result1, _var01 wz
14730     04 00 86 F1 | 	sub	_var01, #4
14734     1C 00 90 AD |  if_e	jmp	#LR__1802
14738                 | '         if freq +< long[profile][1] 
14738     04 00 06 F1 | 	add	_var01, #4
1473c     00 FB 01 FB | 	rdlong	result1, _var01
14740     04 00 86 F1 | 	sub	_var01, #4
14744     FD 12 12 F2 | 	cmp	arg01, result1 wc
14748                 | '             quit
14748                 | '         profile += 4
14748     04 00 06 31 |  if_ae	add	_var01, #4
1474c                 | '         delay++
1474c     01 02 06 31 |  if_ae	add	_var02, #1
14750     D4 FF 9F 3D |  if_ae	jmp	#LR__1800
14754                 | LR__1801
14754                 | LR__1802
14754     01 FB 01 F6 | 	mov	result1, _var02
14758                 | _psram_spin2_lookupDelay_ret
14758     2D 00 64 FD | 	ret
1475c                 | 
1475c                 | ' 
1475c                 | ' PUB start() : r
1475c                 | _usbnew_spin2_start
1475c     00 00 06 F6 | 	mov	_var01, #0
14760                 | '   ifnot driver_cog
14760     15 00 00 FF 
14764     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
14768     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1476c     15 00 00 FF 
14770     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
14774     38 00 90 5D |  if_ne	jmp	#LR__1810
14778                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
14778     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1477c     10 00 06 F6 | 	mov	_var01, #16
14780     00 16 06 F6 | 	mov	arg03, #0
14784     28 16 62 FD | 	setq	arg03
14788     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1478c     01 00 66 C6 |  if_b	neg	_var01, #1
14790                 | '     if r >= 0
14790     00 00 56 F2 | 	cmps	_var01, #0 wc
14794                 | '       driver_cog := r+1
14794     00 03 02 36 |  if_ae	mov	_var02, _var01
14798     01 02 06 31 |  if_ae	add	_var02, #1
1479c     15 00 00 3F 
147a0     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
147a4     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
147a8     15 00 00 3F 
147ac     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
147b0                 | LR__1810
147b0     00 FB 01 F6 | 	mov	result1, _var01
147b4                 | _usbnew_spin2_start_ret
147b4     2D 00 64 FD | 	ret
147b8                 | 
147b8                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
147b8                 | ' 
147b8                 | ' '' Return key event from buffer if there is one
147b8                 | ' PUB get_key() : r | tail
147b8                 | _usbnew_spin2_get_key
147b8                 | '   tail := keyq_tail
147b8     0F 00 00 FF 
147bc     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
147c0     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
147c4                 | '   if keyq_head == tail
147c4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
147c8     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
147cc     0F 00 00 FF 
147d0     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
147d4     00 03 0A F2 | 	cmp	_var02, _var01 wz
147d8                 | '     return 0 ' No event
147d8     00 FA 05 A6 |  if_e	mov	result1, #0
147dc     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
147e0                 | '   r := keyq_data[tail]
147e0     00 03 02 F6 | 	mov	_var02, _var01
147e4     02 02 66 F0 | 	shl	_var02, #2
147e8     0F 00 00 FF 
147ec     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
147f0     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
147f4     01 FB 01 FB | 	rdlong	result1, _var02
147f8                 | '   if ++tail == KEYQUEUE_SIZE
147f8     01 00 06 F1 | 	add	_var01, #1
147fc     80 00 0E F2 | 	cmp	_var01, #128 wz
14800                 | '     tail := 0
14800     00 00 06 A6 |  if_e	mov	_var01, #0
14804                 | '   keyq_tail := tail
14804     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
14808     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1480c     0F 00 00 FF 
14810     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
14814                 | _usbnew_spin2_get_key_ret
14814     2D 00 64 FD | 	ret
14818                 | 
14818                 | ' 
14818                 | ' '' Emulate mouse movement
14818                 | ' PUB mouse_move(x,y)
14818                 | _usbnew_spin2_mouse_move
14818     02 4A 05 F6 | 	mov	COUNT_, #2
1481c     A8 00 A0 FD | 	call	#pushregs_
14820     09 1F 02 F6 | 	mov	local01, arg01
14824     0A 21 02 F6 | 	mov	local02, arg02
14828                 | '   mouse_lock := 1
14828     14 00 00 FF 
1482c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
14830     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
14834     14 00 00 FF 
14838     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1483c                 | '   waitus(2) ' hope driver is now done
1483c     02 12 06 F6 | 	mov	arg01, #2
14840     30 0A B0 FD | 	call	#__system___waitus
14844                 | '   mouse_xacc := x
14844     14 00 00 FF 
14848     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1484c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
14850                 | '   mouse_yacc := y
14850     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
14854     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
14858                 | '   if mouse_outptr
14858     04 00 00 FF 
1485c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
14860     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
14864     0F 00 00 FF 
14868     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1486c     24 00 90 AD |  if_e	jmp	#LR__1820
14870                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
14870     10 20 66 F0 | 	shl	local02, #16
14874     0F 1F 32 F9 | 	getword	local01, local01, #0
14878     0F 21 42 F5 | 	or	local02, local01
1487c     0F 00 00 FF 
14880     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
14884     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
14888     0F 00 00 FF 
1488c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
14890     0F 21 62 FC | 	wrlong	local02, local01
14894                 | LR__1820
14894                 | '   mouse_lock := 0
14894     14 00 00 FF 
14898     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1489c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
148a0     14 00 00 FF 
148a4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
148a8     A7 F0 03 F6 | 	mov	ptra, fp
148ac     B2 00 A0 FD | 	call	#popregs_
148b0                 | _usbnew_spin2_mouse_move_ret
148b0     2D 00 64 FD | 	ret
148b4                 | 
148b4                 | '     '' Set HAVE_HIDPAD to enable.
148b4                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
148b4                 | ' 
148b4                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
148b4                 | ' PUB hidpad_id(dev) : r
148b4                 | _usbnew_spin2_hidpad_id
148b4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
148b4     13 00 00 FF 
148b8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
148bc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
148c0     09 01 02 F6 | 	mov	_var01, arg01
148c4     03 00 66 F0 | 	shl	_var01, #3
148c8     09 01 82 F1 | 	sub	_var01, arg01
148cc     02 00 66 F0 | 	shl	_var01, #2
148d0     00 FB 01 F1 | 	add	result1, _var01
148d4     FD FA 01 FB | 	rdlong	result1, result1
148d8     13 00 00 FF 
148dc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
148e0                 | _usbnew_spin2_hidpad_id_ret
148e0     2D 00 64 FD | 	ret
148e4                 | 
148e4                 | ' 
148e4                 | ' '' Get all button states for a device
148e4                 | ' PUB hidpad_buttons(dev) : r 
148e4                 | _usbnew_spin2_hidpad_buttons
148e4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
148e4     13 00 00 FF 
148e8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
148ec     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
148f0     09 01 02 F6 | 	mov	_var01, arg01
148f4     03 00 66 F0 | 	shl	_var01, #3
148f8     09 01 82 F1 | 	sub	_var01, arg01
148fc     02 00 66 F0 | 	shl	_var01, #2
14900     00 FB 01 F1 | 	add	result1, _var01
14904     14 FA 05 F1 | 	add	result1, #20
14908     FD FA 01 FB | 	rdlong	result1, result1
1490c     13 00 00 FF 
14910     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14914                 | _usbnew_spin2_hidpad_buttons_ret
14914     2D 00 64 FD | 	ret
14918                 | 
14918                 | ' 
14918                 | ' '' Get state of an axis (normalized between -32768 and 32767)
14918                 | ' PUB hidpad_axis(dev,axnum) : r
14918                 | _usbnew_spin2_hidpad_axis
14918                 | '   if axnum +>= 6
14918     06 14 16 F2 | 	cmp	arg02, #6 wc
1491c                 | '     return 0
1491c     00 FA 05 36 |  if_ae	mov	result1, #0
14920     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
14924                 | '   else 
14924                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
14924     13 00 00 FF 
14928     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1492c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
14930     09 01 02 F6 | 	mov	_var01, arg01
14934     03 00 66 F0 | 	shl	_var01, #3
14938     09 01 82 F1 | 	sub	_var01, arg01
1493c     02 00 66 F0 | 	shl	_var01, #2
14940     00 FB 01 F1 | 	add	result1, _var01
14944     04 00 06 F6 | 	mov	_var01, #4
14948     0A 01 02 F1 | 	add	_var01, arg02
1494c     01 00 66 F0 | 	shl	_var01, #1
14950     FD 00 02 F1 | 	add	_var01, result1
14954     00 FB E1 FA | 	rdword	result1, _var01
14958     0F FA 65 F7 | 	signx	result1, #15
1495c     13 00 00 FF 
14960     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
14964                 | _usbnew_spin2_hidpad_axis_ret
14964     2D 00 64 FD | 	ret
14968                 | 
14968                 | ' 
14968                 | ' 
14968                 | ' '--------------------------------------------------------------
14968                 | ' '---------- Init the variables, start the cog. ----------------
14968                 | ' '--------------------------------------------------------------
14968                 | ' 
14968                 | ' pub start(mbox,scope,cache) :cog,base | iii
14968                 | _Audio093b_8_sc_spin2_start
14968     04 4A 05 F6 | 	mov	COUNT_, #4
1496c     A8 00 A0 FD | 	call	#pushregs_
14970     09 1F 02 F6 | 	mov	local01, arg01
14974                 | ' 
14974                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
14974                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
14974                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
14974                 | ' 
14974                 | ' mailboxaddr:=mbox 
14974     F2 1E 62 FC | 	wrlong	local01, objptr
14978                 | ' scope_ptr:=scope
14978     04 E4 05 F1 | 	add	objptr, #4
1497c     F2 14 62 FC | 	wrlong	arg02, objptr
14980                 | ' cache_ptr:=cache
14980     04 E4 05 F1 | 	add	objptr, #4
14984     F2 16 62 FC | 	wrlong	arg03, objptr
14988                 | ' base:=@channel1[0]
14988     04 E4 05 F1 | 	add	objptr, #4
1498c     F2 20 02 F6 | 	mov	local02, objptr
14990                 | ' 
14990                 | ' repeat iii from 0 to 7
14990     00 22 06 F6 | 	mov	local03, #0
14994     01 00 00 FF 
14998     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
1499c     0C E4 85 F1 | 	sub	objptr, #12
149a0     97 80 48 FB | 	callpa	#(@LR__1831-@LR__1830)>>2,fcache_load_ptr_
149a4                 | LR__1830
149a4                 | '   long[base+32*iii]:=0
149a4     10 1F 02 F6 | 	mov	local01, local02
149a8     11 FD 01 F6 | 	mov	result2, local03
149ac     05 FC 65 F0 | 	shl	result2, #5
149b0     FE 1E 02 F1 | 	add	local01, result2
149b4     0F 01 68 FC | 	wrlong	#0, local01
149b8                 | '   long[base+32*iii+4]:=0
149b8     10 1F 02 F6 | 	mov	local01, local02
149bc     11 FD 01 F6 | 	mov	result2, local03
149c0     05 FC 65 F0 | 	shl	result2, #5
149c4     FE 1E 02 F1 | 	add	local01, result2
149c8     04 1E 06 F1 | 	add	local01, #4
149cc     0F 01 68 FC | 	wrlong	#0, local01
149d0                 | '   long[base+32*iii+12]:=0
149d0     10 25 02 F6 | 	mov	local04, local02
149d4     11 1F 02 F6 | 	mov	local01, local03
149d8     05 1E 66 F0 | 	shl	local01, #5
149dc     0F 25 02 F1 | 	add	local04, local01
149e0     0C 24 06 F1 | 	add	local04, #12
149e4     12 01 68 FC | 	wrlong	#0, local04
149e8                 | '   long[base+32*iii+16]:=2 
149e8     10 25 02 F6 | 	mov	local04, local02
149ec     11 1F 02 F6 | 	mov	local01, local03
149f0     05 1E 66 F0 | 	shl	local01, #5
149f4     0F 25 02 F1 | 	add	local04, local01
149f8     10 24 06 F1 | 	add	local04, #16
149fc     12 05 68 FC | 	wrlong	#2, local04
14a00                 | '   word[base+32*iii+20]:=0
14a00     10 25 02 F6 | 	mov	local04, local02
14a04     11 1F 02 F6 | 	mov	local01, local03
14a08     05 1E 66 F0 | 	shl	local01, #5
14a0c     0F 25 02 F1 | 	add	local04, local01
14a10     14 24 06 F1 | 	add	local04, #20
14a14     12 01 58 FC | 	wrword	#0, local04
14a18                 | '   word[base+32*iii+22]:=8192
14a18     10 25 02 F6 | 	mov	local04, local02
14a1c     11 1F 02 F6 | 	mov	local01, local03
14a20     05 1E 66 F0 | 	shl	local01, #5
14a24     0F 25 02 F1 | 	add	local04, local01
14a28     16 24 06 F1 | 	add	local04, #22
14a2c     10 00 80 FF 
14a30     12 01 58 FC | 	wrword	##8192, local04
14a34                 | '   word[base+32*iii+24]:=4000+2*iii
14a34     11 25 02 F6 | 	mov	local04, local03
14a38     01 24 66 F0 | 	shl	local04, #1
14a3c     07 00 00 FF 
14a40     A0 1F 06 F6 | 	mov	local01, ##4000
14a44     12 1F 02 F1 | 	add	local01, local04
14a48     10 25 02 F6 | 	mov	local04, local02
14a4c     11 FD 01 F6 | 	mov	result2, local03
14a50     05 FC 65 F0 | 	shl	result2, #5
14a54     FE 24 02 F1 | 	add	local04, result2
14a58     18 24 06 F1 | 	add	local04, #24
14a5c     12 1F 52 FC | 	wrword	local01, local04
14a60                 | '   word[base+32*iii+26]:=2
14a60     10 25 02 F6 | 	mov	local04, local02
14a64     11 1F 02 F6 | 	mov	local01, local03
14a68     05 1E 66 F0 | 	shl	local01, #5
14a6c     0F 25 02 F1 | 	add	local04, local01
14a70     1A 24 06 F1 | 	add	local04, #26
14a74     12 05 58 FC | 	wrword	#2, local04
14a78                 | '   long [base+32*iii+8]:=@null | $C0000000
14a78     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
14a7c     3E 1E 26 F4 | 	bith	local01, #62
14a80     10 25 02 F6 | 	mov	local04, local02
14a84     11 17 02 F6 | 	mov	arg03, local03
14a88     05 16 66 F0 | 	shl	arg03, #5
14a8c     0B 25 02 F1 | 	add	local04, arg03
14a90     08 24 06 F1 | 	add	local04, #8
14a94     12 1F 62 FC | 	wrlong	local01, local04
14a98     01 22 06 F1 | 	add	local03, #1
14a9c     08 22 56 F2 | 	cmps	local03, #8 wc
14aa0     00 FF 9F CD |  if_b	jmp	#LR__1830
14aa4                 | LR__1831
14aa4     01 00 00 FF 
14aa8     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
14aac                 | '   
14aac                 | ' cog:=coginit(16,@audio,@mailboxaddr)
14aac     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
14ab0     F2 16 02 F6 | 	mov	arg03, objptr
14ab4     10 24 06 F6 | 	mov	local04, #16
14ab8     28 16 62 FD | 	setq	arg03
14abc     0A 25 F2 FC | 	coginit	local04, arg02 wc
14ac0     01 24 66 C6 |  if_b	neg	local04, #1
14ac4                 | ' waitms(100)
14ac4     64 12 06 F6 | 	mov	arg01, #100
14ac8     3C 07 B0 FD | 	call	#__system___waitms
14acc                 | ' return cog,base
14acc     10 FD 01 F6 | 	mov	result2, local02
14ad0     12 FB 01 F6 | 	mov	result1, local04
14ad4     A7 F0 03 F6 | 	mov	ptra, fp
14ad8     B2 00 A0 FD | 	call	#popregs_
14adc                 | _Audio093b_8_sc_spin2_start_ret
14adc     2D 00 64 FD | 	ret
14ae0                 | 
14ae0                 | ' 
14ae0                 | ' ' a simple play procedure to not poke everything. 
14ae0                 | ' 
14ae0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
14ae0                 | _Audio093b_8_sc_spin2_play
14ae0     0C E4 05 F1 | 	add	objptr, #12
14ae4     F2 00 02 F6 | 	mov	_var01, objptr
14ae8     05 12 66 F0 | 	shl	arg01, #5
14aec     09 01 02 F1 | 	add	_var01, arg01
14af0     00 00 60 FF 
14af4     00 14 06 F1 | 	add	arg02, ##-1073741824
14af8     00 13 02 F6 | 	mov	arg01, _var01
14afc     08 12 06 F1 | 	add	arg01, #8
14b00     09 15 62 FC | 	wrlong	arg02, arg01
14b04     00 15 02 F6 | 	mov	arg02, _var01
14b08     0C 14 06 F1 | 	add	arg02, #12
14b0c     0A 1B 62 FC | 	wrlong	arg05, arg02
14b10     00 1C 56 F2 | 	cmps	arg06, #0 wc
14b14     00 15 02 36 |  if_ae	mov	arg02, _var01
14b18     10 14 06 31 |  if_ae	add	arg02, #16
14b1c     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
14b20     02 1A 06 C1 |  if_b	add	arg05, #2
14b24     00 13 02 C6 |  if_b	mov	arg01, _var01
14b28     10 12 06 C1 |  if_b	add	arg01, #16
14b2c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
14b30     0B 15 52 F6 | 	abs	arg02, arg03 wc
14b34     0F 1B 80 FF 
14b38     0A 3F 1A FD | 	qdiv	##3546911, arg02
14b3c                 | ' 
14b3c                 | ' base2:=@channel1[0]+32*channel
14b3c                 | ' long[base2+8]:=sample+$C0000000 
14b3c                 | ' long[base2+12]:= len
14b3c                 | ' if loop >=0 
14b3c                 | '   long[base2+16]:= loop
14b3c     0C E4 85 F1 | 	sub	objptr, #12
14b40                 | ' else
14b40                 | '   long[base2+16]:= len+2
14b40                 | ' word[base2+20]:=vol
14b40     00 15 02 F6 | 	mov	arg02, _var01
14b44     14 14 06 F1 | 	add	arg02, #20
14b48     0A 19 52 FC | 	wrword	arg04, arg02
14b4c                 | ' word[base2+24]:= 3546911/splfreq 
14b4c     00 13 02 F6 | 	mov	arg01, _var01
14b50     18 12 06 F1 | 	add	arg01, #24
14b54                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
14b54                 | ' long[base2+28]:=$40000000
14b54     18 14 62 FD | 	getqx	arg02
14b58     0A 15 82 F6 | 	negc	arg02, arg02
14b5c     09 15 52 FC | 	wrword	arg02, arg01
14b60     00 15 02 F6 | 	mov	arg02, _var01
14b64     1A 14 06 F1 | 	add	arg02, #26
14b68     0A 01 5A FC | 	wrword	#256, arg02
14b6c     1C 00 06 F1 | 	add	_var01, #28
14b70     00 00 A0 FF 
14b74     00 01 68 FC | 	wrlong	##1073741824, _var01
14b78                 | _Audio093b_8_sc_spin2_play_ret
14b78     2D 00 64 FD | 	ret
14b7c                 | 
14b7c                 | ' until (i >>8) >=len
14b7c                 | ' 
14b7c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
14b7c                 | _Audio093b_8_sc_spin2_play8
14b7c                 | ' 
14b7c                 | ' base2:=@channel1[0]+32*channel
14b7c     0C E4 05 F1 | 	add	objptr, #12
14b80     F2 00 02 F6 | 	mov	_var01, objptr
14b84     05 12 66 F0 | 	shl	arg01, #5
14b88     09 01 02 F1 | 	add	_var01, arg01
14b8c                 | ' long[base2]:=0
14b8c     00 01 68 FC | 	wrlong	#0, _var01
14b90                 | ' long[base2+8]:=sample+$40000000 
14b90     00 00 20 FF 
14b94     00 14 06 F1 | 	add	arg02, ##1073741824
14b98     00 13 02 F6 | 	mov	arg01, _var01
14b9c     08 12 06 F1 | 	add	arg01, #8
14ba0     09 15 62 FC | 	wrlong	arg02, arg01
14ba4                 | ' if loop>=0
14ba4     00 1C 56 F2 | 	cmps	arg06, #0 wc
14ba8     0C E4 85 F1 | 	sub	objptr, #12
14bac     1C 00 90 CD |  if_b	jmp	#LR__1840
14bb0                 | '   long[base2+12]:=loop
14bb0     00 15 02 F6 | 	mov	arg02, _var01
14bb4     0C 14 06 F1 | 	add	arg02, #12
14bb8     0A 1D 62 FC | 	wrlong	arg06, arg02
14bbc                 | '   long[base2+16]:= len
14bbc     00 1D 02 F6 | 	mov	arg06, _var01
14bc0     10 1C 06 F1 | 	add	arg06, #16
14bc4     0E 1B 62 FC | 	wrlong	arg05, arg06
14bc8     1C 00 90 FD | 	jmp	#LR__1841
14bcc                 | LR__1840
14bcc                 | ' else
14bcc                 | '   long[base2+12]:= len
14bcc     00 1D 02 F6 | 	mov	arg06, _var01
14bd0     0C 1C 06 F1 | 	add	arg06, #12
14bd4     0E 1B 62 FC | 	wrlong	arg05, arg06
14bd8                 | '   long[base2+16]:= len+1
14bd8     01 1A 06 F1 | 	add	arg05, #1
14bdc     00 13 02 F6 | 	mov	arg01, _var01
14be0     10 12 06 F1 | 	add	arg01, #16
14be4     09 1B 62 FC | 	wrlong	arg05, arg01
14be8                 | LR__1841
14be8     0B 17 52 F6 | 	abs	arg03, arg03 wc
14bec     0F 1B 80 FF 
14bf0     0B 3F 1A FD | 	qdiv	##3546911, arg03
14bf4                 | ' word[base2+20]:=vol
14bf4     00 17 02 F6 | 	mov	arg03, _var01
14bf8     14 16 06 F1 | 	add	arg03, #20
14bfc     0B 19 52 FC | 	wrword	arg04, arg03
14c00                 | ' word[base2+24]:= 3546911/splfreq 
14c00     00 13 02 F6 | 	mov	arg01, _var01
14c04     18 12 06 F1 | 	add	arg01, #24
14c08                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
14c08                 | ' long[base2+28]:=$40000000
14c08     18 18 62 FD | 	getqx	arg04
14c0c     0C 19 82 F6 | 	negc	arg04, arg04
14c10     09 19 52 FC | 	wrword	arg04, arg01
14c14     00 19 02 F6 | 	mov	arg04, _var01
14c18     1A 18 06 F1 | 	add	arg04, #26
14c1c     0C 01 5A FC | 	wrword	#256, arg04
14c20     1C 00 06 F1 | 	add	_var01, #28
14c24     00 00 A0 FF 
14c28     00 01 68 FC | 	wrlong	##1073741824, _var01
14c2c                 | _Audio093b_8_sc_spin2_play8_ret
14c2c     2D 00 64 FD | 	ret
14c30                 | 
14c30                 | ' 
14c30                 | '     
14c30                 | ' pub stop(channel) 'silence it
14c30                 | _Audio093b_8_sc_spin2_stop
14c30                 | ' 
14c30                 | ' word[@channel1[0]+32*channel+20]:=0
14c30     0C E4 05 F1 | 	add	objptr, #12
14c34     F2 00 02 F6 | 	mov	_var01, objptr
14c38     05 12 66 F0 | 	shl	arg01, #5
14c3c     09 01 02 F1 | 	add	_var01, arg01
14c40     14 00 06 F1 | 	add	_var01, #20
14c44     00 01 58 FC | 	wrword	#0, _var01
14c48     0C E4 85 F1 | 	sub	objptr, #12
14c4c                 | _Audio093b_8_sc_spin2_stop_ret
14c4c     2D 00 64 FD | 	ret
14c50                 | hubexit
14c50     81 00 80 FD | 	jmp	#cogexit
14c54                 | 
14c54                 | __system___setbaud
14c54     14 5E 06 FB | 	rdlong	muldiva_, #20
14c58     09 61 02 F6 | 	mov	muldivb_, arg01
14c5c     BA 00 A0 FD | 	call	#divide_
14c60     97 06 48 FB | 	callpa	#(@LR__1851-@LR__1850)>>2,fcache_load_ptr_
14c64                 | LR__1850
14c64     3E FA 9D FA | 	rdpin	result1, #62 wc
14c68     FE FC A1 F1 | 	subx	result2, result2
14c6c     F4 FF 9F CD |  if_b	jmp	#LR__1850
14c70                 | LR__1851
14c70     40 7C 64 FD | 	dirl	#62
14c74     40 7E 64 FD | 	dirl	#63
14c78     F4 60 62 FC | 	wrlong	muldivb_, ptr___system__dat__
14c7c     10 60 66 F0 | 	shl	muldivb_, #16
14c80     07 14 06 F6 | 	mov	arg02, #7
14c84     30 15 02 F1 | 	add	arg02, muldivb_
14c88     3E F8 0C FC | 	wrpin	#124, #62
14c8c     3E 14 16 FC | 	wxpin	arg02, #62
14c90     3F 7C 0C FC | 	wrpin	#62, #63
14c94     14 14 06 F1 | 	add	arg02, #20
14c98     3F 14 16 FC | 	wxpin	arg02, #63
14c9c     41 7C 64 FD | 	dirh	#62
14ca0     41 7E 64 FD | 	dirh	#63
14ca4                 | __system___setbaud_ret
14ca4     2D 00 64 FD | 	ret
14ca8                 | 
14ca8                 | __system___txraw
14ca8     01 4A 05 F6 | 	mov	COUNT_, #1
14cac     A8 00 A0 FD | 	call	#pushregs_
14cb0     09 1F 02 F6 | 	mov	local01, arg01
14cb4     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
14cb8                 | LR__1860
14cb8     3E FA 9D FA | 	rdpin	result1, #62 wc
14cbc     FE FC A1 F1 | 	subx	result2, result2
14cc0     F4 FF 9F CD |  if_b	jmp	#LR__1860
14cc4                 | LR__1861
14cc4     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14cc8     C2 01 00 AF 
14ccc     00 12 06 A6 |  if_e	mov	arg01, ##230400
14cd0     80 FF BF AD |  if_e	call	#__system___setbaud
14cd4     3E 1E 26 FC | 	wypin	local01, #62
14cd8     01 FA 05 F6 | 	mov	result1, #1
14cdc     A7 F0 03 F6 | 	mov	ptra, fp
14ce0     B2 00 A0 FD | 	call	#popregs_
14ce4                 | __system___txraw_ret
14ce4     2D 00 64 FD | 	ret
14ce8                 | 
14ce8                 | __system___rxraw
14ce8     0D 4A 05 F6 | 	mov	COUNT_, #13
14cec     A8 00 A0 FD | 	call	#pushregs_
14cf0     09 1F 02 F6 | 	mov	local01, arg01
14cf4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
14cf8     C2 01 00 AF 
14cfc     00 12 06 A6 |  if_e	mov	arg01, ##230400
14d00     50 FF BF AD |  if_e	call	#__system___setbaud
14d04     00 1E 0E F2 | 	cmp	local01, #0 wz
14d08     20 00 90 AD |  if_e	jmp	#LR__1870
14d0c     14 22 06 FB | 	rdlong	local03, #20
14d10     0A 22 46 F0 | 	shr	local03, #10
14d14     11 1F 02 FD | 	qmul	local01, local03
14d18     1A FA 61 FD | 	getct	result1
14d1c     18 24 62 FD | 	getqx	local04
14d20     12 FB 01 F1 | 	add	result1, local04
14d24     FD 26 02 F6 | 	mov	local05, result1
14d28     04 00 90 FD | 	jmp	#LR__1871
14d2c                 | LR__1870
14d2c     00 26 06 F6 | 	mov	local05, #0
14d30                 | LR__1871
14d30     01 28 66 F6 | 	neg	local06, #1
14d34     3F 2A 06 F6 | 	mov	local07, #63
14d38     00 2C 06 F6 | 	mov	local08, #0
14d3c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
14d40     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
14d44     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
14d48                 | LR__1872
14d48     08 2E 16 F4 | 	testb	local09, #8 wc
14d4c     09 2E 76 F4 | 	testbn	local09, #9 andc
14d50     0A 2E 46 F0 | 	shr	local09, #10
14d54     01 2C 06 C6 |  if_b	mov	local08, #1
14d58     40 7E 6C 3D |  if_ae	testp	#63 wz
14d5c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
14d60     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
14d64     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
14d68                 | LR__1873
14d68     00 20 06 F6 | 	mov	local02, #0
14d6c     00 2C 0E F2 | 	cmp	local08, #0 wz
14d70     01 20 66 56 |  if_ne	neg	local02, #1
14d74     00 30 06 F6 | 	mov	local10, #0
14d78     00 22 06 F6 | 	mov	local03, #0
14d7c     00 1E 0E F2 | 	cmp	local01, #0 wz
14d80     01 22 66 56 |  if_ne	neg	local03, #1
14d84     00 24 06 F6 | 	mov	local04, #0
14d88     00 32 06 F6 | 	mov	local11, #0
14d8c     1A FA 61 FD | 	getct	result1
14d90     FD 34 02 F6 | 	mov	local12, result1
14d94     1A 37 02 F6 | 	mov	local13, local12
14d98     13 37 82 F1 | 	sub	local13, local05
14d9c     00 36 56 F2 | 	cmps	local13, #0 wc
14da0     00 32 26 C6 |  if_b	not	local11, #0
14da4     00 32 0E F2 | 	cmp	local11, #0 wz
14da8     00 24 26 56 |  if_ne	not	local04, #0
14dac     12 23 CA F7 | 	test	local03, local04 wz
14db0     00 30 26 56 |  if_ne	not	local10, #0
14db4     18 21 4A F5 | 	or	local02, local10 wz
14db8     8C FF 9F AD |  if_e	jmp	#LR__1872
14dbc     00 2C 0E F2 | 	cmp	local08, #0 wz
14dc0     17 29 02 56 |  if_ne	mov	local06, local09
14dc4     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
14dc8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
14dcc     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
14dd0     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
14dd4     14 FB 01 F6 | 	mov	result1, local06
14dd8     A7 F0 03 F6 | 	mov	ptra, fp
14ddc     B2 00 A0 FD | 	call	#popregs_
14de0                 | __system___rxraw_ret
14de0     2D 00 64 FD | 	ret
14de4                 | 
14de4                 | __system___getus
14de4     1A FC 71 FD | 	getct	result2 wc
14de8     1A 00 62 FD | 	getct	_var01
14dec     10 E8 05 F1 | 	add	ptr___system__dat__, #16
14df0     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
14df4     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
14df8     20 00 90 5D |  if_ne	jmp	#LR__1880
14dfc     14 02 06 FB | 	rdlong	_var02, #20
14e00     A1 07 00 FF 
14e04     40 02 16 FD | 	qdiv	_var02, ##1000000
14e08     10 E8 05 F1 | 	add	ptr___system__dat__, #16
14e0c     18 FA 61 FD | 	getqx	result1
14e10     FD 02 02 F6 | 	mov	_var02, result1
14e14     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
14e18     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
14e1c                 | LR__1880
14e1c     01 FD 11 FD | 	qdiv	result2, _var02
14e20     19 FC 61 FD | 	getqy	result2
14e24     28 FC 61 FD | 	setq	result2
14e28     01 01 12 FD | 	qdiv	_var01, _var02
14e2c     18 FA 61 FD | 	getqx	result1
14e30                 | __system___getus_ret
14e30     2D 00 64 FD | 	ret
14e34                 | 
14e34                 | __system____builtin_memmove
14e34     09 01 02 F6 | 	mov	_var01, arg01
14e38     0A 13 52 F2 | 	cmps	arg01, arg02 wc
14e3c     10 00 90 CD |  if_b	jmp	#LR__1890
14e40     0A 03 02 F6 | 	mov	_var02, arg02
14e44     0B 03 02 F1 | 	add	_var02, arg03
14e48     01 13 52 F2 | 	cmps	arg01, _var02 wc
14e4c     48 00 90 CD |  if_b	jmp	#LR__1896
14e50                 | LR__1890
14e50     0B 05 02 F6 | 	mov	_var03, arg03
14e54     02 04 4E F0 | 	shr	_var03, #2 wz
14e58     18 00 90 AD |  if_e	jmp	#LR__1895
14e5c     97 0A 48 FB | 	callpa	#(@LR__1893-@LR__1891)>>2,fcache_load_ptr_
14e60                 | LR__1891
14e60     02 09 D8 FC | 	rep	@LR__1894, _var03
14e64                 | LR__1892
14e64     0A 05 02 FB | 	rdlong	_var03, arg02
14e68     09 05 62 FC | 	wrlong	_var03, arg01
14e6c     04 12 06 F1 | 	add	arg01, #4
14e70     04 14 06 F1 | 	add	arg02, #4
14e74                 | LR__1893
14e74                 | LR__1894
14e74                 | LR__1895
14e74     02 16 CE F7 | 	test	arg03, #2 wz
14e78     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
14e7c     09 03 52 5C |  if_ne	wrword	_var02, arg01
14e80     02 12 06 51 |  if_ne	add	arg01, #2
14e84     02 14 06 51 |  if_ne	add	arg02, #2
14e88     01 16 CE F7 | 	test	arg03, #1 wz
14e8c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
14e90     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
14e94     28 00 90 FD | 	jmp	#LR__1902
14e98                 | LR__1896
14e98     0B 13 02 F1 | 	add	arg01, arg03
14e9c     0B 15 02 F1 | 	add	arg02, arg03
14ea0     0B 07 0A F6 | 	mov	_var04, arg03 wz
14ea4     18 00 90 AD |  if_e	jmp	#LR__1901
14ea8     97 0A 48 FB | 	callpa	#(@LR__1899-@LR__1897)>>2,fcache_load_ptr_
14eac                 | LR__1897
14eac     03 09 D8 FC | 	rep	@LR__1900, _var04
14eb0                 | LR__1898
14eb0     01 12 86 F1 | 	sub	arg01, #1
14eb4     01 14 86 F1 | 	sub	arg02, #1
14eb8     0A 03 C2 FA | 	rdbyte	_var02, arg02
14ebc     09 03 42 FC | 	wrbyte	_var02, arg01
14ec0                 | LR__1899
14ec0                 | LR__1900
14ec0                 | LR__1901
14ec0                 | LR__1902
14ec0     00 FB 01 F6 | 	mov	result1, _var01
14ec4                 | __system____builtin_memmove_ret
14ec4     2D 00 64 FD | 	ret
14ec8                 | 
14ec8                 | __system____builtin_strcpy
14ec8     09 01 02 F6 | 	mov	_var01, arg01
14ecc     97 0A 48 FB | 	callpa	#(@LR__1911-@LR__1910)>>2,fcache_load_ptr_
14ed0                 | LR__1910
14ed0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
14ed4     09 FB 41 FC | 	wrbyte	result1, arg01
14ed8     01 14 06 F1 | 	add	arg02, #1
14edc     01 12 06 F1 | 	add	arg01, #1
14ee0     EC FF 9F 5D |  if_ne	jmp	#LR__1910
14ee4                 | LR__1911
14ee4     00 FB 01 F6 | 	mov	result1, _var01
14ee8                 | __system____builtin_strcpy_ret
14ee8     2D 00 64 FD | 	ret
14eec                 | 
14eec                 | __system____topofstack
14eec     00 4A 05 F6 | 	mov	COUNT_, #0
14ef0     A8 00 A0 FD | 	call	#pushregs_
14ef4     08 F0 07 F1 | 	add	ptra, #8
14ef8     04 4E 05 F1 | 	add	fp, #4
14efc     A7 12 62 FC | 	wrlong	arg01, fp
14f00     A7 FA 01 F6 | 	mov	result1, fp
14f04     04 4E 85 F1 | 	sub	fp, #4
14f08     A7 F0 03 F6 | 	mov	ptra, fp
14f0c     B2 00 A0 FD | 	call	#popregs_
14f10                 | __system____topofstack_ret
14f10     2D 00 64 FD | 	ret
14f14                 | 
14f14                 | __system___lockmem
14f14     00 FA 05 F6 | 	mov	result1, #0
14f18     01 FA 61 FD | 	cogid	result1
14f1c     00 FB 05 F1 | 	add	result1, #256
14f20                 | LR__1920
14f20     09 01 0A FB | 	rdlong	_var01, arg01 wz
14f24     09 FB 61 AC |  if_e	wrlong	result1, arg01
14f28     09 01 02 AB |  if_e	rdlong	_var01, arg01
14f2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
14f30     FD 00 0A F2 | 	cmp	_var01, result1 wz
14f34     E8 FF 9F 5D |  if_ne	jmp	#LR__1920
14f38                 | __system___lockmem_ret
14f38     2D 00 64 FD | 	ret
14f3c                 | 
14f3c                 | __system___string_cmp
14f3c     97 14 48 FB | 	callpa	#(@LR__1931-@LR__1930)>>2,fcache_load_ptr_
14f40                 | LR__1930
14f40     09 01 C2 FA | 	rdbyte	_var01, arg01
14f44     0A 03 C2 FA | 	rdbyte	_var02, arg02
14f48     00 05 02 F6 | 	mov	_var03, _var01
14f4c     01 05 8A F1 | 	sub	_var03, _var02 wz
14f50     01 12 06 F1 | 	add	arg01, #1
14f54     01 14 06 F1 | 	add	arg02, #1
14f58     0C 00 90 5D |  if_ne	jmp	#LR__1932
14f5c     00 00 0E F2 | 	cmp	_var01, #0 wz
14f60     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
14f64     D8 FF 9F 5D |  if_ne	jmp	#LR__1930
14f68                 | LR__1931
14f68                 | LR__1932
14f68     02 FB 01 F6 | 	mov	result1, _var03
14f6c                 | __system___string_cmp_ret
14f6c     2D 00 64 FD | 	ret
14f70                 | 
14f70                 | __system___string_concat
14f70     05 4A 05 F6 | 	mov	COUNT_, #5
14f74     A8 00 A0 FD | 	call	#pushregs_
14f78     09 1F 02 F6 | 	mov	local01, arg01
14f7c     0A 21 02 F6 | 	mov	local02, arg02
14f80     0F 13 02 F6 | 	mov	arg01, local01
14f84     09 23 02 F6 | 	mov	local03, arg01
14f88     97 06 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
14f8c                 | LR__1940
14f8c     11 FB C9 FA | 	rdbyte	result1, local03 wz
14f90     01 22 06 51 |  if_ne	add	local03, #1
14f94     F4 FF 9F 5D |  if_ne	jmp	#LR__1940
14f98                 | LR__1941
14f98     09 23 82 F1 | 	sub	local03, arg01
14f9c     11 25 02 F6 | 	mov	local04, local03
14fa0     10 13 02 F6 | 	mov	arg01, local02
14fa4     09 23 02 F6 | 	mov	local03, arg01
14fa8     97 06 48 FB | 	callpa	#(@LR__1943-@LR__1942)>>2,fcache_load_ptr_
14fac                 | LR__1942
14fac     11 FB C9 FA | 	rdbyte	result1, local03 wz
14fb0     01 22 06 51 |  if_ne	add	local03, #1
14fb4     F4 FF 9F 5D |  if_ne	jmp	#LR__1942
14fb8                 | LR__1943
14fb8     09 23 82 F1 | 	sub	local03, arg01
14fbc     12 13 02 F6 | 	mov	arg01, local04
14fc0     11 13 02 F1 | 	add	arg01, local03
14fc4     01 12 06 F1 | 	add	arg01, #1
14fc8     B0 39 B0 FD | 	call	#__system___gc_alloc_managed
14fcc     FD 26 0A F6 | 	mov	local05, result1 wz
14fd0     28 00 90 AD |  if_e	jmp	#LR__1944
14fd4     13 13 02 F6 | 	mov	arg01, local05
14fd8     0F 15 02 F6 | 	mov	arg02, local01
14fdc     12 17 02 F6 | 	mov	arg03, local04
14fe0     50 FE BF FD | 	call	#__system____builtin_memmove
14fe4     13 13 02 F6 | 	mov	arg01, local05
14fe8     12 13 02 F1 | 	add	arg01, local04
14fec     01 22 06 F1 | 	add	local03, #1
14ff0     10 15 02 F6 | 	mov	arg02, local02
14ff4     11 17 02 F6 | 	mov	arg03, local03
14ff8     38 FE BF FD | 	call	#__system____builtin_memmove
14ffc                 | LR__1944
14ffc     13 FB 01 F6 | 	mov	result1, local05
15000     A7 F0 03 F6 | 	mov	ptra, fp
15004     B2 00 A0 FD | 	call	#popregs_
15008                 | __system___string_concat_ret
15008     2D 00 64 FD | 	ret
1500c                 | 
1500c                 | __system___tx
1500c     02 4A 05 F6 | 	mov	COUNT_, #2
15010     A8 00 A0 FD | 	call	#pushregs_
15014     09 1F 02 F6 | 	mov	local01, arg01
15018     0A 1E 0E F2 | 	cmp	local01, #10 wz
1501c     18 00 90 5D |  if_ne	jmp	#LR__1950
15020     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15024     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
15028     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1502c     02 20 CE F7 | 	test	local02, #2 wz
15030     0D 12 06 56 |  if_ne	mov	arg01, #13
15034     70 FC BF 5D |  if_ne	call	#__system___txraw
15038                 | LR__1950
15038     0F 13 02 F6 | 	mov	arg01, local01
1503c     68 FC BF FD | 	call	#__system___txraw
15040     A7 F0 03 F6 | 	mov	ptra, fp
15044     B2 00 A0 FD | 	call	#popregs_
15048                 | __system___tx_ret
15048     2D 00 64 FD | 	ret
1504c                 | 
1504c                 | __system___rx
1504c     01 4A 05 F6 | 	mov	COUNT_, #1
15050     A8 00 A0 FD | 	call	#pushregs_
15054                 | LR__1960
15054     00 12 06 F6 | 	mov	arg01, #0
15058     8C FC BF FD | 	call	#__system___rxraw
1505c     FD 1E 02 F6 | 	mov	local01, result1
15060     FF FF 7F FF 
15064     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
15068     E8 FF 9F AD |  if_e	jmp	#LR__1960
1506c     0D 1E 0E F2 | 	cmp	local01, #13 wz
15070     14 00 90 5D |  if_ne	jmp	#LR__1961
15074     08 E8 05 F1 | 	add	ptr___system__dat__, #8
15078     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1507c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15080     02 FA CD F7 | 	test	result1, #2 wz
15084     0A 1E 06 56 |  if_ne	mov	local01, #10
15088                 | LR__1961
15088     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1508c     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
15090     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
15094     01 12 CE F7 | 	test	arg01, #1 wz
15098     1C 00 90 AD |  if_e	jmp	#LR__1964
1509c     7F 1E 0E F2 | 	cmp	local01, #127 wz
150a0     0C 00 90 5D |  if_ne	jmp	#LR__1962
150a4     08 12 06 F6 | 	mov	arg01, #8
150a8     60 FF BF FD | 	call	#__system___tx
150ac     08 00 90 FD | 	jmp	#LR__1963
150b0                 | LR__1962
150b0     0F 13 02 F6 | 	mov	arg01, local01
150b4     54 FF BF FD | 	call	#__system___tx
150b8                 | LR__1963
150b8                 | LR__1964
150b8     0F FB 01 F6 | 	mov	result1, local01
150bc     A7 F0 03 F6 | 	mov	ptra, fp
150c0     B2 00 A0 FD | 	call	#popregs_
150c4                 | __system___rx_ret
150c4     2D 00 64 FD | 	ret
150c8                 | 
150c8                 | __system___pinwrite
150c8     09 01 02 F6 | 	mov	_var01, arg01
150cc     1F 00 06 F5 | 	and	_var01, #31
150d0     20 12 CE F7 | 	test	arg01, #32 wz
150d4     06 12 46 F0 | 	shr	arg01, #6
150d8     09 13 CA F9 | 	bmask	arg01, arg01
150dc     00 13 62 F0 | 	shl	arg01, _var01
150e0     00 15 62 F0 | 	shl	arg02, _var01
150e4     1C 00 90 AD |  if_e	jmp	#LR__1970
150e8     09 F7 43 F5 | 	or	dirb, arg01
150ec     FD 01 02 F6 | 	mov	_var01, outb
150f0     09 01 22 F5 | 	andn	_var01, arg01
150f4     09 15 02 F5 | 	and	arg02, arg01
150f8     0A 01 42 F5 | 	or	_var01, arg02
150fc     00 FB 03 F6 | 	mov	outb, _var01
15100     18 00 90 FD | 	jmp	#LR__1971
15104                 | LR__1970
15104     09 F5 43 F5 | 	or	dira, arg01
15108     FC 01 02 F6 | 	mov	_var01, outa
1510c     09 01 22 F5 | 	andn	_var01, arg01
15110     09 15 02 F5 | 	and	arg02, arg01
15114     0A 01 42 F5 | 	or	_var01, arg02
15118     00 F9 03 F6 | 	mov	outa, _var01
1511c                 | LR__1971
1511c                 | __system___pinwrite_ret
1511c     2D 00 64 FD | 	ret
15120                 | 
15120                 | __system___basic_read_line
15120     06 4A 05 F6 | 	mov	COUNT_, #6
15124     A8 00 A0 FD | 	call	#pushregs_
15128     09 1F 02 F6 | 	mov	local01, arg01
1512c     00 20 06 F6 | 	mov	local02, #0
15130     18 22 06 F6 | 	mov	local03, #24
15134     00 24 06 F6 | 	mov	local04, #0
15138     18 12 06 F6 | 	mov	arg01, #24
1513c     3C 38 B0 FD | 	call	#__system___gc_alloc_managed
15140     FD 26 0A F6 | 	mov	local05, result1 wz
15144     13 FB 01 A6 |  if_e	mov	result1, local05
15148     B0 00 90 AD |  if_e	jmp	#LR__1983
1514c                 | LR__1980
1514c     0F 13 02 F6 | 	mov	arg01, local01
15150     78 0B B0 FD | 	call	#__system___basic_get_char
15154     FD 28 02 F6 | 	mov	local06, result1
15158     01 28 56 F2 | 	cmps	local06, #1 wc
1515c     8C 00 90 CD |  if_b	jmp	#LR__1982
15160     0A 28 0E F2 | 	cmp	local06, #10 wz
15164     10 00 90 5D |  if_ne	jmp	#LR__1981
15168     00 24 0E F2 | 	cmp	local04, #0 wz
1516c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
15170     01 20 86 11 |  if_a	sub	local02, #1
15174     74 00 90 FD | 	jmp	#LR__1982
15178                 | LR__1981
15178     0D 28 0E F2 | 	cmp	local06, #13 wz
1517c     01 24 06 A6 |  if_e	mov	local04, #1
15180     00 24 06 56 |  if_ne	mov	local04, #0
15184     08 28 0E F2 | 	cmp	local06, #8 wz
15188     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1518c     01 20 56 A2 |  if_e	cmps	local02, #1 wc
15190     01 20 86 21 |  if_nc_and_z	sub	local02, #1
15194     B4 FF 9F AD |  if_e	jmp	#LR__1980
15198     13 17 02 F6 | 	mov	arg03, local05
1519c     10 17 02 F1 | 	add	arg03, local02
151a0     0B 29 42 FC | 	wrbyte	local06, arg03
151a4     01 20 06 F1 | 	add	local02, #1
151a8     11 21 0A F2 | 	cmp	local02, local03 wz
151ac     9C FF 9F 5D |  if_ne	jmp	#LR__1980
151b0     11 13 02 F6 | 	mov	arg01, local03
151b4     20 12 06 F1 | 	add	arg01, #32
151b8     C0 37 B0 FD | 	call	#__system___gc_alloc_managed
151bc     FD 28 0A F6 | 	mov	local06, result1 wz
151c0     14 FB 01 A6 |  if_e	mov	result1, local06
151c4     34 00 90 AD |  if_e	jmp	#LR__1983
151c8     14 13 02 F6 | 	mov	arg01, local06
151cc     13 15 02 F6 | 	mov	arg02, local05
151d0     11 17 02 F6 | 	mov	arg03, local03
151d4     5C FC BF FD | 	call	#__system____builtin_memmove
151d8     20 22 06 F1 | 	add	local03, #32
151dc     13 13 02 F6 | 	mov	arg01, local05
151e0     D4 38 B0 FD | 	call	#__system___gc_free
151e4     14 27 02 F6 | 	mov	local05, local06
151e8     60 FF 9F FD | 	jmp	#LR__1980
151ec                 | LR__1982
151ec     13 29 02 F6 | 	mov	local06, local05
151f0     10 29 02 F1 | 	add	local06, local02
151f4     14 01 48 FC | 	wrbyte	#0, local06
151f8     13 FB 01 F6 | 	mov	result1, local05
151fc                 | LR__1983
151fc     A7 F0 03 F6 | 	mov	ptra, fp
15200     B2 00 A0 FD | 	call	#popregs_
15204                 | __system___basic_read_line_ret
15204     2D 00 64 FD | 	ret
15208                 | 
15208                 | __system___waitms
15208     09 01 02 F6 | 	mov	_var01, arg01
1520c     1A 02 62 FD | 	getct	_var02
15210     14 04 06 FB | 	rdlong	_var03, #20
15214     97 14 48 FB | 	callpa	#(@LR__1991-@LR__1990)>>2,fcache_load_ptr_
15218                 | LR__1990
15218     01 00 00 FF 
1521c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
15220     1C 00 90 CD |  if_b	jmp	#LR__1992
15224     02 03 02 F1 | 	add	_var02, _var03
15228     01 13 02 F6 | 	mov	arg01, _var02
1522c     00 12 66 FA | 	addct1	arg01, #0
15230     24 22 60 FD | 	waitct1
15234     01 00 00 FF 
15238     E8 01 86 F1 | 	sub	_var01, ##1000
1523c     D8 FF 9F FD | 	jmp	#LR__1990
15240                 | LR__1991
15240                 | LR__1992
15240     01 00 56 F2 | 	cmps	_var01, #1 wc
15244     28 00 90 CD |  if_b	jmp	#LR__1993
15248     02 01 02 FD | 	qmul	_var01, _var03
1524c     01 00 00 FF 
15250     E8 17 06 F6 | 	mov	arg03, ##1000
15254     19 FA 61 FD | 	getqy	result1
15258     18 12 62 FD | 	getqx	arg01
1525c     28 FA 61 FD | 	setq	result1
15260     0B 13 12 FD | 	qdiv	arg01, arg03
15264     18 12 62 FD | 	getqx	arg01
15268     01 13 62 FA | 	addct1	arg01, _var02
1526c     24 22 60 FD | 	waitct1
15270                 | LR__1993
15270                 | __system___waitms_ret
15270     2D 00 64 FD | 	ret
15274                 | 
15274                 | __system___waitus
15274     09 01 02 F6 | 	mov	_var01, arg01
15278     1A 02 62 FD | 	getct	_var02
1527c     14 04 06 FB | 	rdlong	_var03, #20
15280     97 14 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
15284                 | LR__2000
15284     A1 07 00 FF 
15288     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1528c     1C 00 90 CD |  if_b	jmp	#LR__2002
15290     02 03 02 F1 | 	add	_var02, _var03
15294     01 13 02 F6 | 	mov	arg01, _var02
15298     00 12 66 FA | 	addct1	arg01, #0
1529c     24 22 60 FD | 	waitct1
152a0     A1 07 00 FF 
152a4     40 00 86 F1 | 	sub	_var01, ##1000000
152a8     D8 FF 9F FD | 	jmp	#LR__2000
152ac                 | LR__2001
152ac                 | LR__2002
152ac     01 00 56 F2 | 	cmps	_var01, #1 wc
152b0     28 00 90 CD |  if_b	jmp	#LR__2003
152b4     02 01 02 FD | 	qmul	_var01, _var03
152b8     A1 07 00 FF 
152bc     40 16 06 F6 | 	mov	arg03, ##1000000
152c0     19 FA 61 FD | 	getqy	result1
152c4     18 12 62 FD | 	getqx	arg01
152c8     28 FA 61 FD | 	setq	result1
152cc     0B 13 12 FD | 	qdiv	arg01, arg03
152d0     18 FA 61 FD | 	getqx	result1
152d4     FD 02 62 FA | 	addct1	_var02, result1
152d8     24 22 60 FD | 	waitct1
152dc                 | LR__2003
152dc                 | __system___waitus_ret
152dc     2D 00 64 FD | 	ret
152e0                 | 
152e0                 | __system___mount
152e0     0B 4A 05 F6 | 	mov	COUNT_, #11
152e4     A8 00 A0 FD | 	call	#pushregs_
152e8     09 1F 02 F6 | 	mov	local01, arg01
152ec     0A 21 0A F6 | 	mov	local02, arg02 wz
152f0     01 22 66 F6 | 	neg	local03, #1
152f4     01 FA 65 A6 |  if_e	neg	result1, #1
152f8     98 02 90 AD |  if_e	jmp	#LR__2025
152fc     0F FB C1 FA | 	rdbyte	result1, local01
15300     2F FA 0D F2 | 	cmp	result1, #47 wz
15304     28 00 90 5D |  if_ne	jmp	#LR__2012
15308     0F 13 02 F6 | 	mov	arg01, local01
1530c     09 25 02 F6 | 	mov	local04, arg01
15310     97 06 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
15314                 | LR__2010
15314     12 FB C9 FA | 	rdbyte	result1, local04 wz
15318     01 24 06 51 |  if_ne	add	local04, #1
1531c     F4 FF 9F 5D |  if_ne	jmp	#LR__2010
15320                 | LR__2011
15320     09 25 82 F1 | 	sub	local04, arg01
15324     12 FB 01 F6 | 	mov	result1, local04
15328     10 FA 55 F2 | 	cmps	result1, #16 wc
1532c     14 00 90 CD |  if_b	jmp	#LR__2013
15330                 | LR__2012
15330     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15334     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
15338     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1533c     01 FA 65 F6 | 	neg	result1, #1
15340     50 02 90 FD | 	jmp	#LR__2025
15344                 | LR__2013
15344     00 26 06 F6 | 	mov	local05, #0
15348                 | LR__2014
15348     04 26 56 F2 | 	cmps	local05, #4 wc
1534c     B0 00 90 3D |  if_ae	jmp	#LR__2019
15350     13 13 02 F6 | 	mov	arg01, local05
15354     02 12 66 F0 | 	shl	arg01, #2
15358     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1535c     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15360     09 FB 09 FB | 	rdlong	result1, arg01 wz
15364     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15368     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1536c     13 23 02 86 |  if_c_and_z	mov	local03, local05
15370     84 00 90 8D |  if_c_and_z	jmp	#LR__2018
15374     13 13 02 F6 | 	mov	arg01, local05
15378     02 12 66 F0 | 	shl	arg01, #2
1537c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15380     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
15384     09 13 02 FB | 	rdlong	arg01, arg01
15388     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1538c     09 25 02 F6 | 	mov	local04, arg01
15390     97 06 48 FB | 	callpa	#(@LR__2016-@LR__2015)>>2,fcache_load_ptr_
15394                 | LR__2015
15394     12 FB C9 FA | 	rdbyte	result1, local04 wz
15398     01 24 06 51 |  if_ne	add	local04, #1
1539c     F4 FF 9F 5D |  if_ne	jmp	#LR__2015
153a0                 | LR__2016
153a0     09 25 82 F1 | 	sub	local04, arg01
153a4     12 29 02 F6 | 	mov	local06, local04
153a8     14 13 02 F6 | 	mov	arg01, local06
153ac     0F 13 02 F1 | 	add	arg01, local01
153b0     09 FB C1 FA | 	rdbyte	result1, arg01
153b4     2F FA 0D F2 | 	cmp	result1, #47 wz
153b8     14 2B 02 56 |  if_ne	mov	local07, local06
153bc     0F 2B 02 51 |  if_ne	add	local07, local01
153c0     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
153c4     30 00 90 5D |  if_ne	jmp	#LR__2017
153c8     13 17 02 F6 | 	mov	arg03, local05
153cc     02 16 66 F0 | 	shl	arg03, #2
153d0     64 E8 05 F1 | 	add	ptr___system__dat__, #100
153d4     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
153d8     0B 15 02 FB | 	rdlong	arg02, arg03
153dc     0F 13 02 F6 | 	mov	arg01, local01
153e0     14 17 02 F6 | 	mov	arg03, local06
153e4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
153e8     D4 49 B0 FD | 	call	#__system__strncmp
153ec     00 FA 0D F2 | 	cmp	result1, #0 wz
153f0     13 23 02 A6 |  if_e	mov	local03, local05
153f4     08 00 90 AD |  if_e	jmp	#LR__2019
153f8                 | LR__2017
153f8                 | LR__2018
153f8     01 26 06 F1 | 	add	local05, #1
153fc     48 FF 9F FD | 	jmp	#LR__2014
15400                 | LR__2019
15400     FF FF 7F FF 
15404     FF 23 0E F2 | 	cmp	local03, ##-1 wz
15408     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1540c     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
15410     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
15414     01 FA 65 A6 |  if_e	neg	result1, #1
15418     78 01 90 AD |  if_e	jmp	#LR__2025
1541c     11 27 02 F6 | 	mov	local05, local03
15420     13 2B 02 F6 | 	mov	local07, local05
15424     02 2A 66 F0 | 	shl	local07, #2
15428     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1542c     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
15430     15 29 0A FB | 	rdlong	local06, local07 wz
15434     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15438     58 00 90 AD |  if_e	jmp	#LR__2020
1543c     4C 28 06 F1 | 	add	local06, #76
15440     14 2B 0A FB | 	rdlong	local07, local06 wz
15444     4C 28 86 F1 | 	sub	local06, #76
15448     48 00 90 AD |  if_e	jmp	#LR__2020
1544c     4C 28 06 F1 | 	add	local06, #76
15450     14 2B 02 FB | 	rdlong	local07, local06
15454     15 23 02 F6 | 	mov	local03, local07
15458     13 2A 46 F7 | 	zerox	local07, #19
1545c     14 22 46 F0 | 	shr	local03, #20
15460     02 22 66 F0 | 	shl	local03, #2
15464     ED 22 02 F1 | 	add	local03, __methods__
15468     11 23 02 FB | 	rdlong	local03, local03
1546c     13 29 02 F6 | 	mov	local06, local05
15470     02 28 66 F0 | 	shl	local06, #2
15474     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15478     F4 28 02 F1 | 	add	local06, ptr___system__dat__
1547c     14 13 02 FB | 	rdlong	arg01, local06
15480     F2 28 02 F6 | 	mov	local06, objptr
15484     15 E5 01 F6 | 	mov	objptr, local07
15488     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1548c     2D 22 62 FD | 	call	local03
15490     14 E5 01 F6 | 	mov	objptr, local06
15494                 | LR__2020
15494     13 2D 02 F6 | 	mov	local08, local05
15498     02 2C 66 F0 | 	shl	local08, #2
1549c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
154a0     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
154a4     16 21 62 FC | 	wrlong	local02, local08
154a8     00 20 0E F2 | 	cmp	local02, #0 wz
154ac     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
154b0     18 00 90 5D |  if_ne	jmp	#LR__2021
154b4     02 26 66 F0 | 	shl	local05, #2
154b8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
154bc     F4 26 02 F1 | 	add	local05, ptr___system__dat__
154c0     13 01 68 FC | 	wrlong	#0, local05
154c4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
154c8     C4 00 90 FD | 	jmp	#LR__2024
154cc                 | LR__2021
154cc     13 2F 02 F6 | 	mov	local09, local05
154d0     04 2E 66 F0 | 	shl	local09, #4
154d4     24 E8 05 F1 | 	add	ptr___system__dat__, #36
154d8     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
154dc     17 13 02 F6 | 	mov	arg01, local09
154e0     0F 15 02 F6 | 	mov	arg02, local01
154e4     10 16 06 F6 | 	mov	arg03, #16
154e8     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
154ec     24 48 B0 FD | 	call	#__system__strncpy
154f0     48 20 06 F1 | 	add	local02, #72
154f4     10 2D 0A FB | 	rdlong	local08, local02 wz
154f8     48 20 86 F1 | 	sub	local02, #72
154fc     7C 00 90 AD |  if_e	jmp	#LR__2023
15500     48 20 06 F1 | 	add	local02, #72
15504     10 2D 02 FB | 	rdlong	local08, local02
15508     16 31 02 F6 | 	mov	local10, local08
1550c     13 2C 46 F7 | 	zerox	local08, #19
15510     14 30 46 F0 | 	shr	local10, #20
15514     02 30 66 F0 | 	shl	local10, #2
15518     ED 30 02 F1 | 	add	local10, __methods__
1551c     18 31 02 FB | 	rdlong	local10, local10
15520     17 13 02 F6 | 	mov	arg01, local09
15524     F2 32 02 F6 | 	mov	local11, objptr
15528     16 E5 01 F6 | 	mov	objptr, local08
1552c     2D 30 62 FD | 	call	local10
15530     19 E5 01 F6 | 	mov	objptr, local11
15534     FD 12 0A F6 | 	mov	arg01, result1 wz
15538     40 00 90 AD |  if_e	jmp	#LR__2022
1553c     13 2D 02 F6 | 	mov	local08, local05
15540     02 2C 66 F0 | 	shl	local08, #2
15544     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15548     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
1554c     16 01 68 FC | 	wrlong	#0, local08
15550     02 26 66 F0 | 	shl	local05, #2
15554     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
15558     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1555c     13 01 68 FC | 	wrlong	#0, local05
15560     09 13 6A F6 | 	neg	arg01, arg01 wz
15564     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
15568     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1556c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15570     01 FA 65 56 |  if_ne	neg	result1, #1
15574     00 FA 05 A6 |  if_e	mov	result1, #0
15578     18 00 90 FD | 	jmp	#LR__2025
1557c                 | LR__2022
1557c                 | LR__2023
1557c     02 26 66 F0 | 	shl	local05, #2
15580     64 E8 05 F1 | 	add	ptr___system__dat__, #100
15584     F4 26 02 F1 | 	add	local05, ptr___system__dat__
15588     13 2F 62 FC | 	wrlong	local09, local05
1558c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15590                 | LR__2024
15590     00 FA 05 F6 | 	mov	result1, #0
15594                 | LR__2025
15594     A7 F0 03 F6 | 	mov	ptra, fp
15598     B2 00 A0 FD | 	call	#popregs_
1559c                 | __system___mount_ret
1559c     2D 00 64 FD | 	ret
155a0                 | 
155a0                 | __system___chdir
155a0     00 4A 05 F6 | 	mov	COUNT_, #0
155a4     A8 00 A0 FD | 	call	#pushregs_
155a8     40 F0 07 F1 | 	add	ptra, #64
155ac     04 4E 05 F1 | 	add	fp, #4
155b0     A7 12 62 FC | 	wrlong	arg01, fp
155b4     04 4E 05 F1 | 	add	fp, #4
155b8     A7 14 02 F6 | 	mov	arg02, fp
155bc     08 4E 85 F1 | 	sub	fp, #8
155c0     30 44 B0 FD | 	call	#__system__stat
155c4     3C 4E 05 F1 | 	add	fp, #60
155c8     A7 FA 61 FC | 	wrlong	result1, fp
155cc     3C 4E 85 F1 | 	sub	fp, #60
155d0     00 FA 0D F2 | 	cmp	result1, #0 wz
155d4     3C 4E 05 51 |  if_ne	add	fp, #60
155d8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
155dc     3C 4E 85 51 |  if_ne	sub	fp, #60
155e0     BC 00 90 5D |  if_ne	jmp	#LR__2032
155e4     10 4E 05 F1 | 	add	fp, #16
155e8     A7 12 02 FB | 	rdlong	arg01, fp
155ec     10 4E 85 F1 | 	sub	fp, #16
155f0     78 00 00 FF 
155f4     00 12 06 F5 | 	and	arg01, ##61440
155f8     08 00 00 FF 
155fc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
15600     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
15604     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
15608     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
1560c     01 FA 65 56 |  if_ne	neg	result1, #1
15610     8C 00 90 5D |  if_ne	jmp	#LR__2032
15614     04 4E 05 F1 | 	add	fp, #4
15618     A7 16 02 FB | 	rdlong	arg03, fp
1561c     04 4E 85 F1 | 	sub	fp, #4
15620     0B 17 C2 FA | 	rdbyte	arg03, arg03
15624     2F 16 0E F2 | 	cmp	arg03, #47 wz
15628     24 00 90 5D |  if_ne	jmp	#LR__2030
1562c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15630     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15634     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15638     04 4E 05 F1 | 	add	fp, #4
1563c     A7 14 02 FB | 	rdlong	arg02, fp
15640     04 4E 85 F1 | 	sub	fp, #4
15644     00 17 06 F6 | 	mov	arg03, #256
15648     C8 46 B0 FD | 	call	#__system__strncpy
1564c     4C 00 90 FD | 	jmp	#LR__2031
15650                 | LR__2030
15650     84 E9 05 F1 | 	add	ptr___system__dat__, #388
15654     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
15658     38 4E 05 F1 | 	add	fp, #56
1565c     A7 12 62 FC | 	wrlong	arg01, fp
15660     38 4E 85 F1 | 	sub	fp, #56
15664     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
15668     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
1566c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15670     00 17 06 F6 | 	mov	arg03, #256
15674     9C 46 B0 FD | 	call	#__system__strncpy
15678     38 4E 05 F1 | 	add	fp, #56
1567c     A7 12 02 FB | 	rdlong	arg01, fp
15680     34 4E 85 F1 | 	sub	fp, #52
15684     A7 14 02 FB | 	rdlong	arg02, fp
15688     04 4E 85 F1 | 	sub	fp, #4
1568c     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15690     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
15694     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15698     10 00 B0 FD | 	call	#__system____getvfsforfile
1569c                 | LR__2031
1569c     00 FA 05 F6 | 	mov	result1, #0
156a0                 | LR__2032
156a0     A7 F0 03 F6 | 	mov	ptra, fp
156a4     B2 00 A0 FD | 	call	#popregs_
156a8                 | __system___chdir_ret
156a8     2D 00 64 FD | 	ret
156ac                 | 
156ac                 | __system____getvfsforfile
156ac     0E 4A 05 F6 | 	mov	COUNT_, #14
156b0     A8 00 A0 FD | 	call	#pushregs_
156b4     09 1F 02 F6 | 	mov	local01, arg01
156b8     0A 21 02 F6 | 	mov	local02, arg02
156bc     0B 23 02 F6 | 	mov	local03, arg03
156c0     97 10 48 FB | 	callpa	#(@LR__2041-@LR__2040)>>2,fcache_load_ptr_
156c4                 | LR__2040
156c4     10 FB C1 FA | 	rdbyte	result1, local02
156c8     2F FA 0D F2 | 	cmp	result1, #47 wz
156cc     01 20 06 A1 |  if_e	add	local02, #1
156d0     10 25 C2 AA |  if_e	rdbyte	local04, local02
156d4     01 20 86 A1 |  if_e	sub	local02, #1
156d8     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
156dc     01 20 06 A1 |  if_e	add	local02, #1
156e0     E0 FF 9F AD |  if_e	jmp	#LR__2040
156e4                 | LR__2041
156e4     10 25 C2 FA | 	rdbyte	local04, local02
156e8     2F 24 0E F2 | 	cmp	local04, #47 wz
156ec     14 00 90 5D |  if_ne	jmp	#LR__2042
156f0     0F 13 02 F6 | 	mov	arg01, local01
156f4     10 15 02 F6 | 	mov	arg02, local02
156f8     00 17 06 F6 | 	mov	arg03, #256
156fc     14 46 B0 FD | 	call	#__system__strncpy
15700     7C 00 90 FD | 	jmp	#LR__2044
15704                 | LR__2042
15704     84 E8 05 F1 | 	add	ptr___system__dat__, #132
15708     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
1570c     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
15710     0F 13 02 F6 | 	mov	arg01, local01
15714     00 17 06 F6 | 	mov	arg03, #256
15718     F8 45 B0 FD | 	call	#__system__strncpy
1571c     10 25 CA FA | 	rdbyte	local04, local02 wz
15720     5C 00 90 AD |  if_e	jmp	#LR__2043
15724     10 25 C2 FA | 	rdbyte	local04, local02
15728     2E 24 0E F2 | 	cmp	local04, #46 wz
1572c     01 20 06 A1 |  if_e	add	local02, #1
15730     10 27 C2 AA |  if_e	rdbyte	local05, local02
15734     01 20 86 A1 |  if_e	sub	local02, #1
15738     13 29 02 A6 |  if_e	mov	local06, local05
1573c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
15740     3C 00 90 AD |  if_e	jmp	#LR__2043
15744     0F 27 C2 FA | 	rdbyte	local05, local01
15748     2F 26 0E F2 | 	cmp	local05, #47 wz
1574c     01 1E 06 A1 |  if_e	add	local01, #1
15750     0F 25 C2 AA |  if_e	rdbyte	local04, local01
15754     01 1E 86 A1 |  if_e	sub	local01, #1
15758     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1575c     20 01 00 5F 
15760     E0 14 06 56 |  if_ne	mov	arg02, ##@LR__4070
15764     0F 13 02 56 |  if_ne	mov	arg01, local01
15768     00 17 06 56 |  if_ne	mov	arg03, #256
1576c     F0 45 B0 5D |  if_ne	call	#__system__strncat
15770     0F 13 02 F6 | 	mov	arg01, local01
15774     10 15 02 F6 | 	mov	arg02, local02
15778     00 17 06 F6 | 	mov	arg03, #256
1577c     E0 45 B0 FD | 	call	#__system__strncat
15780                 | LR__2043
15780                 | LR__2044
15780     0F 13 02 F6 | 	mov	arg01, local01
15784     98 47 B0 FD | 	call	#__system___normalizeName
15788     0F 25 CA FA | 	rdbyte	local04, local01 wz
1578c     1C 00 90 AD |  if_e	jmp	#LR__2045
15790     0F 25 C2 FA | 	rdbyte	local04, local01
15794     2F 24 0E F2 | 	cmp	local04, #47 wz
15798     01 1E 06 A1 |  if_e	add	local01, #1
1579c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
157a0     01 1E 86 A1 |  if_e	sub	local01, #1
157a4     00 28 4E A2 |  if_e	cmps	local06, #0 wz
157a8     18 00 90 5D |  if_ne	jmp	#LR__2046
157ac                 | LR__2045
157ac     01 00 00 FF 
157b0     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
157b4     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
157b8     01 00 00 FF 
157bc     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
157c0     EC 01 90 FD | 	jmp	#LR__2060
157c4                 | LR__2046
157c4     00 2A 06 F6 | 	mov	local07, #0
157c8                 | LR__2047
157c8     04 2A 56 F2 | 	cmps	local07, #4 wc
157cc     CC 01 90 3D |  if_ae	jmp	#LR__2059
157d0     15 29 02 F6 | 	mov	local06, local07
157d4     02 28 66 F0 | 	shl	local06, #2
157d8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
157dc     F4 28 02 F1 | 	add	local06, ptr___system__dat__
157e0     14 29 0A FB | 	rdlong	local06, local06 wz
157e4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
157e8     A8 01 90 AD |  if_e	jmp	#LR__2058
157ec     15 25 02 F6 | 	mov	local04, local07
157f0     02 24 66 F0 | 	shl	local04, #2
157f4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
157f8     F4 24 02 F1 | 	add	local04, ptr___system__dat__
157fc     12 13 02 FB | 	rdlong	arg01, local04
15800     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15804     09 2D 02 F6 | 	mov	local08, arg01
15808     97 06 48 FB | 	callpa	#(@LR__2049-@LR__2048)>>2,fcache_load_ptr_
1580c                 | LR__2048
1580c     16 FB C9 FA | 	rdbyte	result1, local08 wz
15810     01 2C 06 51 |  if_ne	add	local08, #1
15814     F4 FF 9F 5D |  if_ne	jmp	#LR__2048
15818                 | LR__2049
15818     09 2D 82 F1 | 	sub	local08, arg01
1581c     16 2F 02 F6 | 	mov	local09, local08
15820     17 25 02 F6 | 	mov	local04, local09
15824     0F 25 02 F1 | 	add	local04, local01
15828     12 29 C2 FA | 	rdbyte	local06, local04
1582c     2F 28 0E F2 | 	cmp	local06, #47 wz
15830     17 31 02 56 |  if_ne	mov	local10, local09
15834     0F 31 02 51 |  if_ne	add	local10, local01
15838     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1583c     54 01 90 5D |  if_ne	jmp	#LR__2057
15840     15 17 02 F6 | 	mov	arg03, local07
15844     02 16 66 F0 | 	shl	arg03, #2
15848     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1584c     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
15850     0B 15 02 FB | 	rdlong	arg02, arg03
15854     17 17 02 F6 | 	mov	arg03, local09
15858     0F 13 02 F6 | 	mov	arg01, local01
1585c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
15860     5C 45 B0 FD | 	call	#__system__strncmp
15864     00 FA 4D F2 | 	cmps	result1, #0 wz
15868     28 01 90 5D |  if_ne	jmp	#LR__2057
1586c     15 33 02 F6 | 	mov	local11, local07
15870     02 32 66 F0 | 	shl	local11, #2
15874     74 E8 05 F1 | 	add	ptr___system__dat__, #116
15878     F4 32 02 F1 | 	add	local11, ptr___system__dat__
1587c     19 35 02 FB | 	rdlong	local12, local11
15880     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
15884     97 22 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
15888                 | LR__2050
15888     17 29 02 F6 | 	mov	local06, local09
1588c     01 28 06 F1 | 	add	local06, #1
15890     0F 29 02 F1 | 	add	local06, local01
15894     14 33 C2 FA | 	rdbyte	local11, local06
15898     2E 32 0E F2 | 	cmp	local11, #46 wz
1589c     2C 00 90 5D |  if_ne	jmp	#LR__2052
158a0     17 33 02 F6 | 	mov	local11, local09
158a4     02 32 06 F1 | 	add	local11, #2
158a8     0F 33 02 F1 | 	add	local11, local01
158ac     19 31 C2 FA | 	rdbyte	local10, local11
158b0     2F 30 0E F2 | 	cmp	local10, #47 wz
158b4     17 37 02 56 |  if_ne	mov	local13, local09
158b8     02 36 06 51 |  if_ne	add	local13, #2
158bc     0F 37 02 51 |  if_ne	add	local13, local01
158c0     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
158c4     01 2E 06 A1 |  if_e	add	local09, #1
158c8     BC FF 9F AD |  if_e	jmp	#LR__2050
158cc                 | LR__2051
158cc                 | LR__2052
158cc     00 22 0E F2 | 	cmp	local03, #0 wz
158d0     11 13 02 56 |  if_ne	mov	arg01, local03
158d4     0F 15 02 56 |  if_ne	mov	arg02, local01
158d8     00 17 06 56 |  if_ne	mov	arg03, #256
158dc     34 44 B0 5D |  if_ne	call	#__system__strncpy
158e0     0F 15 02 F6 | 	mov	arg02, local01
158e4     17 15 02 F1 | 	add	arg02, local09
158e8     01 14 06 F1 | 	add	arg02, #1
158ec     0F 13 02 F6 | 	mov	arg01, local01
158f0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
158f4     0F 13 02 F6 | 	mov	arg01, local01
158f8     09 2D 02 F6 | 	mov	local08, arg01
158fc     97 06 48 FB | 	callpa	#(@LR__2054-@LR__2053)>>2,fcache_load_ptr_
15900                 | LR__2053
15900     16 FB C9 FA | 	rdbyte	result1, local08 wz
15904     01 2C 06 51 |  if_ne	add	local08, #1
15908     F4 FF 9F 5D |  if_ne	jmp	#LR__2053
1590c                 | LR__2054
1590c     09 2D 82 F1 | 	sub	local08, arg01
15910     16 2F 02 F6 | 	mov	local09, local08
15914                 | LR__2055
15914     01 2E 56 F2 | 	cmps	local09, #1 wc
15918     70 00 90 CD |  if_b	jmp	#LR__2056
1591c     17 25 02 F6 | 	mov	local04, local09
15920     0F 25 02 F1 | 	add	local04, local01
15924     12 33 C2 FA | 	rdbyte	local11, local04
15928     2F 32 0E F2 | 	cmp	local11, #47 wz
1592c     17 33 02 A6 |  if_e	mov	local11, local09
15930     0F 33 02 A1 |  if_e	add	local11, local01
15934     19 01 48 AC |  if_e	wrbyte	#0, local11
15938     01 2E 86 A1 |  if_e	sub	local09, #1
1593c     D4 FF 9F AD |  if_e	jmp	#LR__2055
15940     17 25 02 F6 | 	mov	local04, local09
15944     0F 25 02 F1 | 	add	local04, local01
15948     12 33 C2 FA | 	rdbyte	local11, local04
1594c     2E 32 0E F2 | 	cmp	local11, #46 wz
15950     38 00 90 5D |  if_ne	jmp	#LR__2056
15954     02 2E 56 F2 | 	cmps	local09, #2 wc
15958     30 00 90 CD |  if_b	jmp	#LR__2056
1595c     17 39 02 F6 | 	mov	local14, local09
15960     01 38 86 F1 | 	sub	local14, #1
15964     0F 39 02 F1 | 	add	local14, local01
15968     1C 27 C2 FA | 	rdbyte	local05, local14
1596c     2F 26 0E F2 | 	cmp	local05, #47 wz
15970     18 00 90 5D |  if_ne	jmp	#LR__2056
15974     17 25 02 F6 | 	mov	local04, local09
15978     01 24 86 F1 | 	sub	local04, #1
1597c     0F 25 02 F1 | 	add	local04, local01
15980     12 01 48 FC | 	wrbyte	#0, local04
15984     02 2E 86 F1 | 	sub	local09, #2
15988     88 FF 9F FD | 	jmp	#LR__2055
1598c                 | LR__2056
1598c     1A FB 01 F6 | 	mov	result1, local12
15990     1C 00 90 FD | 	jmp	#LR__2060
15994                 | LR__2057
15994                 | LR__2058
15994     01 2A 06 F1 | 	add	local07, #1
15998     2C FE 9F FD | 	jmp	#LR__2047
1599c                 | LR__2059
1599c     03 00 00 FF 
159a0     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
159a4     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
159a8     03 00 00 FF 
159ac     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
159b0                 | LR__2060
159b0     A7 F0 03 F6 | 	mov	ptra, fp
159b4     B2 00 A0 FD | 	call	#popregs_
159b8                 | __system____getvfsforfile_ret
159b8     2D 00 64 FD | 	ret
159bc                 | 
159bc                 | __system___basic_open
159bc     05 4A 05 F6 | 	mov	COUNT_, #5
159c0     A8 00 A0 FD | 	call	#pushregs_
159c4     0A 1F 02 F6 | 	mov	local01, arg02
159c8     0B 21 02 F6 | 	mov	local02, arg03
159cc     0C 23 02 F6 | 	mov	local03, arg04
159d0     00 24 06 F6 | 	mov	local04, #0
159d4     14 43 B0 FD | 	call	#__system____getftab
159d8     FD 26 0A F6 | 	mov	local05, result1 wz
159dc     18 00 90 5D |  if_ne	jmp	#LR__2070
159e0     EE 12 02 F6 | 	mov	arg01, abortchain
159e4     0C 14 06 F6 | 	mov	arg02, #12
159e8     01 16 06 F6 | 	mov	arg03, #1
159ec     DA 00 A0 FD | 	call	#__longjmp
159f0     01 FA 65 F6 | 	neg	result1, #1
159f4     14 01 90 FD | 	jmp	#LR__2079
159f8                 | LR__2070
159f8     08 26 06 F1 | 	add	local05, #8
159fc     13 FB 09 FB | 	rdlong	result1, local05 wz
15a00     08 26 86 F1 | 	sub	local05, #8
15a04     13 13 02 56 |  if_ne	mov	arg01, local05
15a08     70 3A B0 5D |  if_ne	call	#__system___closeraw
15a0c     00 1E 0E F2 | 	cmp	local01, #0 wz
15a10     00 20 0E A2 |  if_e	cmp	local02, #0 wz
15a14     00 22 0E A2 |  if_e	cmp	local03, #0 wz
15a18     3C 00 90 AD |  if_e	jmp	#LR__2072
15a1c     0C 12 06 F6 | 	mov	arg01, #12
15a20     58 2F B0 FD | 	call	#__system___gc_alloc_managed
15a24     FD 24 0A F6 | 	mov	local04, result1 wz
15a28     18 00 90 5D |  if_ne	jmp	#LR__2071
15a2c     EE 12 02 F6 | 	mov	arg01, abortchain
15a30     07 14 06 F6 | 	mov	arg02, #7
15a34     01 16 06 F6 | 	mov	arg03, #1
15a38     DA 00 A0 FD | 	call	#__longjmp
15a3c     01 FA 65 F6 | 	neg	result1, #1
15a40     C8 00 90 FD | 	jmp	#LR__2079
15a44                 | LR__2071
15a44     12 01 68 FC | 	wrlong	#0, local04
15a48     04 24 06 F1 | 	add	local04, #4
15a4c     12 01 68 FC | 	wrlong	#0, local04
15a50     04 24 86 F1 | 	sub	local04, #4
15a54     13 25 62 FC | 	wrlong	local04, local05
15a58                 | LR__2072
15a58     00 1E 0E F2 | 	cmp	local01, #0 wz
15a5c     20 00 90 AD |  if_e	jmp	#LR__2073
15a60     12 1F 62 FC | 	wrlong	local01, local04
15a64     12 FB 01 F6 | 	mov	result1, local04
15a68     00 58 02 FF 
15a6c     00 FA 45 F5 | 	or	result1, ##78643200
15a70     1C 26 06 F1 | 	add	local05, #28
15a74     13 FB 61 FC | 	wrlong	result1, local05
15a78     1C 26 86 F1 | 	sub	local05, #28
15a7c     0C 00 90 FD | 	jmp	#LR__2074
15a80                 | LR__2073
15a80     1C 26 06 F1 | 	add	local05, #28
15a84     13 01 68 FC | 	wrlong	#0, local05
15a88     1C 26 86 F1 | 	sub	local05, #28
15a8c                 | LR__2074
15a8c     00 20 0E F2 | 	cmp	local02, #0 wz
15a90     28 00 90 AD |  if_e	jmp	#LR__2075
15a94     04 24 06 F1 | 	add	local04, #4
15a98     12 21 62 FC | 	wrlong	local02, local04
15a9c     04 24 86 F1 | 	sub	local04, #4
15aa0     12 FB 01 F6 | 	mov	result1, local04
15aa4     00 60 02 FF 
15aa8     00 FA 45 F5 | 	or	result1, ##79691776
15aac     20 26 06 F1 | 	add	local05, #32
15ab0     13 FB 61 FC | 	wrlong	result1, local05
15ab4     20 26 86 F1 | 	sub	local05, #32
15ab8     0C 00 90 FD | 	jmp	#LR__2076
15abc                 | LR__2075
15abc     20 26 06 F1 | 	add	local05, #32
15ac0     13 01 68 FC | 	wrlong	#0, local05
15ac4     20 26 86 F1 | 	sub	local05, #32
15ac8                 | LR__2076
15ac8     00 22 0E F2 | 	cmp	local03, #0 wz
15acc     24 00 90 AD |  if_e	jmp	#LR__2077
15ad0     08 24 06 F1 | 	add	local04, #8
15ad4     12 23 62 FC | 	wrlong	local03, local04
15ad8     08 24 86 F1 | 	sub	local04, #8
15adc     00 68 02 FF 
15ae0     00 24 46 F5 | 	or	local04, ##80740352
15ae4     24 26 06 F1 | 	add	local05, #36
15ae8     13 25 62 FC | 	wrlong	local04, local05
15aec     24 26 86 F1 | 	sub	local05, #36
15af0     0C 00 90 FD | 	jmp	#LR__2078
15af4                 | LR__2077
15af4     24 26 06 F1 | 	add	local05, #36
15af8     13 01 68 FC | 	wrlong	#0, local05
15afc     24 26 86 F1 | 	sub	local05, #36
15b00                 | LR__2078
15b00     08 26 06 F1 | 	add	local05, #8
15b04     13 0F 68 FC | 	wrlong	#7, local05
15b08     00 FA 05 F6 | 	mov	result1, #0
15b0c                 | LR__2079
15b0c     A7 F0 03 F6 | 	mov	ptra, fp
15b10     B2 00 A0 FD | 	call	#popregs_
15b14                 | __system___basic_open_ret
15b14     2D 00 64 FD | 	ret
15b18                 | 
15b18                 | __system___basic_open_string
15b18     04 4A 05 F6 | 	mov	COUNT_, #4
15b1c     A8 00 A0 FD | 	call	#pushregs_
15b20     0A 1F 02 F6 | 	mov	local01, arg02
15b24     0B 21 02 F6 | 	mov	local02, arg03
15b28     C0 41 B0 FD | 	call	#__system____getftab
15b2c     FD 22 0A F6 | 	mov	local03, result1 wz
15b30     18 00 90 5D |  if_ne	jmp	#LR__2080
15b34     EE 12 02 F6 | 	mov	arg01, abortchain
15b38     0C 14 06 F6 | 	mov	arg02, #12
15b3c     01 16 06 F6 | 	mov	arg03, #1
15b40     DA 00 A0 FD | 	call	#__longjmp
15b44     01 FA 65 F6 | 	neg	result1, #1
15b48     58 00 90 FD | 	jmp	#LR__2082
15b4c                 | LR__2080
15b4c     08 22 06 F1 | 	add	local03, #8
15b50     11 19 0A FB | 	rdlong	arg04, local03 wz
15b54     08 22 86 F1 | 	sub	local03, #8
15b58     11 13 02 56 |  if_ne	mov	arg01, local03
15b5c     1C 39 B0 5D |  if_ne	call	#__system___closeraw
15b60     0F 15 02 F6 | 	mov	arg02, local01
15b64     10 17 02 F6 | 	mov	arg03, local02
15b68     11 13 02 F6 | 	mov	arg01, local03
15b6c     B6 19 06 F6 | 	mov	arg04, #438
15b70     04 36 B0 FD | 	call	#__system___openraw
15b74     FD 24 02 F6 | 	mov	local04, result1
15b78     00 24 56 F2 | 	cmps	local04, #0 wc
15b7c     20 00 90 3D |  if_ae	jmp	#LR__2081
15b80     20 E8 05 F1 | 	add	ptr___system__dat__, #32
15b84     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
15b88     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
15b8c     EE 12 02 F6 | 	mov	arg01, abortchain
15b90     01 16 06 F6 | 	mov	arg03, #1
15b94     DA 00 A0 FD | 	call	#__longjmp
15b98     01 FA 65 F6 | 	neg	result1, #1
15b9c     04 00 90 FD | 	jmp	#LR__2082
15ba0                 | LR__2081
15ba0     12 FB 01 F6 | 	mov	result1, local04
15ba4                 | LR__2082
15ba4     A7 F0 03 F6 | 	mov	ptra, fp
15ba8     B2 00 A0 FD | 	call	#popregs_
15bac                 | __system___basic_open_string_ret
15bac     2D 00 64 FD | 	ret
15bb0                 | 
15bb0                 | __system___basic_print_char
15bb0     03 4A 05 F6 | 	mov	COUNT_, #3
15bb4     A8 00 A0 FD | 	call	#pushregs_
15bb8     0A 1F 02 F6 | 	mov	local01, arg02
15bbc     80 48 B0 FD | 	call	#__system___gettxfunc
15bc0     FD 20 0A F6 | 	mov	local02, result1 wz
15bc4     00 FA 05 A6 |  if_e	mov	result1, #0
15bc8     30 00 90 AD |  if_e	jmp	#LR__2090
15bcc     10 23 02 F6 | 	mov	local03, local02
15bd0     13 20 46 F7 | 	zerox	local02, #19
15bd4     14 22 46 F0 | 	shr	local03, #20
15bd8     02 22 66 F0 | 	shl	local03, #2
15bdc     ED 22 02 F1 | 	add	local03, __methods__
15be0     11 23 02 FB | 	rdlong	local03, local03
15be4     0F 13 02 F6 | 	mov	arg01, local01
15be8     F2 1E 02 F6 | 	mov	local01, objptr
15bec     10 E5 01 F6 | 	mov	objptr, local02
15bf0     2D 22 62 FD | 	call	local03
15bf4     0F E5 01 F6 | 	mov	objptr, local01
15bf8     01 FA 05 F6 | 	mov	result1, #1
15bfc                 | LR__2090
15bfc     A7 F0 03 F6 | 	mov	ptra, fp
15c00     B2 00 A0 FD | 	call	#popregs_
15c04                 | __system___basic_print_char_ret
15c04     2D 00 64 FD | 	ret
15c08                 | 
15c08                 | __system___basic_print_string
15c08     03 4A 05 F6 | 	mov	COUNT_, #3
15c0c     A8 00 A0 FD | 	call	#pushregs_
15c10     0A 1F 02 F6 | 	mov	local01, arg02
15c14     0B 21 02 F6 | 	mov	local02, arg03
15c18     24 48 B0 FD | 	call	#__system___gettxfunc
15c1c     FD 22 0A F6 | 	mov	local03, result1 wz
15c20     00 FA 05 A6 |  if_e	mov	result1, #0
15c24     18 00 90 AD |  if_e	jmp	#LR__2100
15c28     00 1E 0E F2 | 	cmp	local01, #0 wz
15c2c     00 FA 05 A6 |  if_e	mov	result1, #0
15c30     11 13 02 56 |  if_ne	mov	arg01, local03
15c34     10 15 02 56 |  if_ne	mov	arg02, local02
15c38     0F 17 02 56 |  if_ne	mov	arg03, local01
15c3c     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
15c40                 | LR__2100
15c40     A7 F0 03 F6 | 	mov	ptra, fp
15c44     B2 00 A0 FD | 	call	#popregs_
15c48                 | __system___basic_print_string_ret
15c48     2D 00 64 FD | 	ret
15c4c                 | 
15c4c                 | __system___basic_print_integer
15c4c     04 4A 05 F6 | 	mov	COUNT_, #4
15c50     A8 00 A0 FD | 	call	#pushregs_
15c54     0A 1F 02 F6 | 	mov	local01, arg02
15c58     0B 21 02 F6 | 	mov	local02, arg03
15c5c     0C 23 02 F6 | 	mov	local03, arg04
15c60     DC 47 B0 FD | 	call	#__system___gettxfunc
15c64     FD 24 0A F6 | 	mov	local04, result1 wz
15c68     00 FA 05 A6 |  if_e	mov	result1, #0
15c6c     12 13 02 56 |  if_ne	mov	arg01, local04
15c70     10 15 02 56 |  if_ne	mov	arg02, local02
15c74     0F 17 02 56 |  if_ne	mov	arg03, local01
15c78     11 19 02 56 |  if_ne	mov	arg04, local03
15c7c     48 02 B0 5D |  if_ne	call	#__system___fmtnum
15c80     A7 F0 03 F6 | 	mov	ptra, fp
15c84     B2 00 A0 FD | 	call	#popregs_
15c88                 | __system___basic_print_integer_ret
15c88     2D 00 64 FD | 	ret
15c8c                 | 
15c8c                 | __system___basic_print_unsigned
15c8c     03 4A 05 F6 | 	mov	COUNT_, #3
15c90     A8 00 A0 FD | 	call	#pushregs_
15c94     0A 1F 02 F6 | 	mov	local01, arg02
15c98     0B 21 02 F6 | 	mov	local02, arg03
15c9c     0C 23 02 F6 | 	mov	local03, arg04
15ca0     9C 47 B0 FD | 	call	#__system___gettxfunc
15ca4     FD 12 0A F6 | 	mov	arg01, result1 wz
15ca8     00 FA 05 A6 |  if_e	mov	result1, #0
15cac     3A 20 26 54 |  if_ne	bith	local02, #58
15cb0     10 15 02 56 |  if_ne	mov	arg02, local02
15cb4     0F 17 02 56 |  if_ne	mov	arg03, local01
15cb8     11 19 02 56 |  if_ne	mov	arg04, local03
15cbc     08 02 B0 5D |  if_ne	call	#__system___fmtnum
15cc0     A7 F0 03 F6 | 	mov	ptra, fp
15cc4     B2 00 A0 FD | 	call	#popregs_
15cc8                 | __system___basic_print_unsigned_ret
15cc8     2D 00 64 FD | 	ret
15ccc                 | 
15ccc                 | __system___basic_get_char
15ccc     03 4A 05 F6 | 	mov	COUNT_, #3
15cd0     A8 00 A0 FD | 	call	#pushregs_
15cd4     AC 47 B0 FD | 	call	#__system___getrxfunc
15cd8     FD 1E 0A F6 | 	mov	local01, result1 wz
15cdc     01 FA 65 A6 |  if_e	neg	result1, #1
15ce0     28 00 90 AD |  if_e	jmp	#LR__2110
15ce4     0F 21 02 F6 | 	mov	local02, local01
15ce8     13 1E 46 F7 | 	zerox	local01, #19
15cec     14 20 46 F0 | 	shr	local02, #20
15cf0     02 20 66 F0 | 	shl	local02, #2
15cf4     ED 20 02 F1 | 	add	local02, __methods__
15cf8     10 21 02 FB | 	rdlong	local02, local02
15cfc     F2 22 02 F6 | 	mov	local03, objptr
15d00     0F E5 01 F6 | 	mov	objptr, local01
15d04     2D 20 62 FD | 	call	local02
15d08     11 E5 01 F6 | 	mov	objptr, local03
15d0c                 | LR__2110
15d0c     A7 F0 03 F6 | 	mov	ptra, fp
15d10     B2 00 A0 FD | 	call	#popregs_
15d14                 | __system___basic_get_char_ret
15d14     2D 00 64 FD | 	ret
15d18                 | 
15d18                 | __system___basic_get
15d18     04 4A 05 F6 | 	mov	COUNT_, #4
15d1c     A8 00 A0 FD | 	call	#pushregs_
15d20     0D 1F 02 F6 | 	mov	local01, arg05
15d24     0F 19 02 FD | 	qmul	arg04, local01
15d28     09 21 02 F6 | 	mov	local02, arg01
15d2c     0B 23 02 F6 | 	mov	local03, arg03
15d30     00 14 0E F2 | 	cmp	arg02, #0 wz
15d34     01 14 86 51 |  if_ne	sub	arg02, #1
15d38     10 13 02 56 |  if_ne	mov	arg01, local02
15d3c     00 16 06 56 |  if_ne	mov	arg03, #0
15d40     18 24 62 FD | 	getqx	local04
15d44     EC 3D B0 5D |  if_ne	call	#__system__lseek
15d48     11 15 02 F6 | 	mov	arg02, local03
15d4c     12 17 02 F6 | 	mov	arg03, local04
15d50     10 13 02 F6 | 	mov	arg01, local02
15d54     64 3D B0 FD | 	call	#__system__read
15d58     FD 24 02 F6 | 	mov	local04, result1
15d5c     01 24 56 F2 | 	cmps	local04, #1 wc
15d60     10 00 90 CD |  if_b	jmp	#LR__2120
15d64     12 5F 02 F6 | 	mov	muldiva_, local04
15d68     0F 61 02 F6 | 	mov	muldivb_, local01
15d6c     BA 00 A0 FD | 	call	#divide_
15d70     30 25 02 F6 | 	mov	local04, muldivb_
15d74                 | LR__2120
15d74     12 FB 01 F6 | 	mov	result1, local04
15d78     A7 F0 03 F6 | 	mov	ptra, fp
15d7c     B2 00 A0 FD | 	call	#popregs_
15d80                 | __system___basic_get_ret
15d80     2D 00 64 FD | 	ret
15d84                 | 
15d84                 | __system___fmtchar
15d84     00 4A 05 F6 | 	mov	COUNT_, #0
15d88     A8 00 A0 FD | 	call	#pushregs_
15d8c     10 F0 07 F1 | 	add	ptra, #16
15d90     04 4E 05 F1 | 	add	fp, #4
15d94     A7 12 62 FC | 	wrlong	arg01, fp
15d98     04 4E 05 F1 | 	add	fp, #4
15d9c     A7 14 62 FC | 	wrlong	arg02, fp
15da0     04 4E 05 F1 | 	add	fp, #4
15da4     A7 16 62 FC | 	wrlong	arg03, fp
15da8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
15dac     A7 16 62 FC | 	wrlong	arg03, fp
15db0     08 4E 85 F1 | 	sub	fp, #8
15db4     A7 12 02 FB | 	rdlong	arg01, fp
15db8     04 4E 05 F1 | 	add	fp, #4
15dbc     A7 14 02 FB | 	rdlong	arg02, fp
15dc0     04 4E 05 F1 | 	add	fp, #4
15dc4     A7 16 02 F6 | 	mov	arg03, fp
15dc8     0C 4E 85 F1 | 	sub	fp, #12
15dcc     0C 00 B0 FD | 	call	#__system___fmtstr
15dd0     A7 F0 03 F6 | 	mov	ptra, fp
15dd4     B2 00 A0 FD | 	call	#popregs_
15dd8                 | __system___fmtchar_ret
15dd8     2D 00 64 FD | 	ret
15ddc                 | 
15ddc                 | __system___fmtstr
15ddc     09 4A 05 F6 | 	mov	COUNT_, #9
15de0     A8 00 A0 FD | 	call	#pushregs_
15de4     09 1F 02 F6 | 	mov	local01, arg01
15de8     0A 21 02 F6 | 	mov	local02, arg02
15dec     0B 23 02 F6 | 	mov	local03, arg03
15df0     10 19 E2 F8 | 	getbyte	arg04, local02, #0
15df4     11 13 02 F6 | 	mov	arg01, local03
15df8     09 25 02 F6 | 	mov	local04, arg01
15dfc     97 06 48 FB | 	callpa	#(@LR__2131-@LR__2130)>>2,fcache_load_ptr_
15e00                 | LR__2130
15e00     12 FB C9 FA | 	rdbyte	result1, local04 wz
15e04     01 24 06 51 |  if_ne	add	local04, #1
15e08     F4 FF 9F 5D |  if_ne	jmp	#LR__2130
15e0c                 | LR__2131
15e0c     09 25 82 F1 | 	sub	local04, arg01
15e10     00 18 0E F2 | 	cmp	arg04, #0 wz
15e14     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
15e18     10 15 02 F6 | 	mov	arg02, local02
15e1c     12 17 02 F6 | 	mov	arg03, local04
15e20     0F 13 02 F6 | 	mov	arg01, local01
15e24     02 18 06 F6 | 	mov	arg04, #2
15e28     B4 42 B0 FD | 	call	#__system___fmtpad
15e2c     FD 26 02 F6 | 	mov	local05, result1
15e30     00 26 56 F2 | 	cmps	local05, #0 wc
15e34     13 FB 01 C6 |  if_b	mov	result1, local05
15e38     80 00 90 CD |  if_b	jmp	#LR__2134
15e3c     01 24 56 F2 | 	cmps	local04, #1 wc
15e40     50 00 90 CD |  if_b	jmp	#LR__2133
15e44     12 29 02 F6 | 	mov	local06, local04
15e48                 | LR__2132
15e48     0F 2B 02 F6 | 	mov	local07, local01
15e4c     0F 2D 02 F6 | 	mov	local08, local01
15e50     13 2A 46 F7 | 	zerox	local07, #19
15e54     14 2C 46 F0 | 	shr	local08, #20
15e58     02 2C 66 F0 | 	shl	local08, #2
15e5c     ED 2C 02 F1 | 	add	local08, __methods__
15e60     16 2D 02 FB | 	rdlong	local08, local08
15e64     11 13 C2 FA | 	rdbyte	arg01, local03
15e68     F2 2E 02 F6 | 	mov	local09, objptr
15e6c     15 E5 01 F6 | 	mov	objptr, local07
15e70     01 22 06 F1 | 	add	local03, #1
15e74     2D 2C 62 FD | 	call	local08
15e78     17 E5 01 F6 | 	mov	objptr, local09
15e7c     FD 2E 02 F6 | 	mov	local09, result1
15e80     00 2E 56 F2 | 	cmps	local09, #0 wc
15e84     17 FB 01 C6 |  if_b	mov	result1, local09
15e88     30 00 90 CD |  if_b	jmp	#LR__2134
15e8c     17 27 02 F1 | 	add	local05, local09
15e90     ED 29 6E FB | 	djnz	local06, #LR__2132
15e94                 | LR__2133
15e94     10 15 02 F6 | 	mov	arg02, local02
15e98     12 17 02 F6 | 	mov	arg03, local04
15e9c     0F 13 02 F6 | 	mov	arg01, local01
15ea0     01 18 06 F6 | 	mov	arg04, #1
15ea4     38 42 B0 FD | 	call	#__system___fmtpad
15ea8     FD 2E 02 F6 | 	mov	local09, result1
15eac     00 2E 56 F2 | 	cmps	local09, #0 wc
15eb0     17 FB 01 C6 |  if_b	mov	result1, local09
15eb4     17 27 02 31 |  if_ae	add	local05, local09
15eb8     13 FB 01 36 |  if_ae	mov	result1, local05
15ebc                 | LR__2134
15ebc     A7 F0 03 F6 | 	mov	ptra, fp
15ec0     B2 00 A0 FD | 	call	#popregs_
15ec4                 | __system___fmtstr_ret
15ec4     2D 00 64 FD | 	ret
15ec8                 | 
15ec8                 | __system___fmtnum
15ec8     0B 4A 05 F6 | 	mov	COUNT_, #11
15ecc     A8 00 A0 FD | 	call	#pushregs_
15ed0     09 1F 02 F6 | 	mov	local01, arg01
15ed4     0A 21 02 F6 | 	mov	local02, arg02
15ed8     0B 23 02 F6 | 	mov	local03, arg03
15edc     0C 25 02 F6 | 	mov	local04, arg04
15ee0     F8 27 02 F6 | 	mov	local05, ptra
15ee4     13 29 02 F6 | 	mov	local06, local05
15ee8     00 2A 06 F6 | 	mov	local07, #0
15eec     10 2D 02 F6 | 	mov	local08, local02
15ef0     10 2C 46 F0 | 	shr	local08, #16
15ef4     3F 2C 06 F5 | 	and	local08, #63
15ef8     10 2F E2 F8 | 	getbyte	local09, local02, #0
15efc     10 31 02 F6 | 	mov	local10, local02
15f00     1A 30 46 F0 | 	shr	local10, #26
15f04     03 30 06 F5 | 	and	local10, #3
15f08     18 33 02 F6 | 	mov	local11, local10
15f0c     01 2C 56 F2 | 	cmps	local08, #1 wc
15f10     44 F0 07 F1 | 	add	ptra, #68
15f14     01 2C 86 31 |  if_ae	sub	local08, #1
15f18     41 2E 56 F2 | 	cmps	local09, #65 wc
15f1c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
15f20     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
15f24     03 32 0E F2 | 	cmp	local11, #3 wz
15f28     00 32 06 A6 |  if_e	mov	local11, #0
15f2c     00 22 56 52 |  if_ne	cmps	local03, #0 wc
15f30     04 32 06 46 |  if_c_and_nz	mov	local11, #4
15f34     11 23 62 46 |  if_c_and_nz	neg	local03, local03
15f38     00 32 0E F2 | 	cmp	local11, #0 wz
15f3c     4C 00 90 AD |  if_e	jmp	#LR__2143
15f40     01 2A 06 F6 | 	mov	local07, #1
15f44     17 2D 0A F2 | 	cmp	local08, local09 wz
15f48     18 00 90 5D |  if_ne	jmp	#LR__2141
15f4c     05 2C 6E FB | 	djnz	local08, #LR__2140
15f50     0F 13 02 F6 | 	mov	arg01, local01
15f54     10 15 02 F6 | 	mov	arg02, local02
15f58     23 16 06 F6 | 	mov	arg03, #35
15f5c     24 FE BF FD | 	call	#__system___fmtchar
15f60     88 00 90 FD | 	jmp	#LR__2147
15f64                 | LR__2140
15f64                 | LR__2141
15f64     02 32 0E F2 | 	cmp	local11, #2 wz
15f68     14 31 02 A6 |  if_e	mov	local10, local06
15f6c     01 28 06 A1 |  if_e	add	local06, #1
15f70     18 41 48 AC |  if_e	wrbyte	#32, local10
15f74     14 00 90 AD |  if_e	jmp	#LR__2142
15f78     04 32 0E F2 | 	cmp	local11, #4 wz
15f7c     14 5B 48 AC |  if_e	wrbyte	#45, local06
15f80     01 28 06 A1 |  if_e	add	local06, #1
15f84     14 57 48 5C |  if_ne	wrbyte	#43, local06
15f88     01 28 06 51 |  if_ne	add	local06, #1
15f8c                 | LR__2142
15f8c                 | LR__2143
15f8c     14 13 02 F6 | 	mov	arg01, local06
15f90     11 15 02 F6 | 	mov	arg02, local03
15f94     12 17 02 F6 | 	mov	arg03, local04
15f98     16 19 02 F6 | 	mov	arg04, local08
15f9c     00 1A 06 F6 | 	mov	arg05, #0
15fa0     1D 20 2E F4 | 	testbn	local02, #29 wz
15fa4     01 1A 06 56 |  if_ne	mov	arg05, #1
15fa8     FC 41 B0 FD | 	call	#__system___uitoa
15fac     FD 2A 02 F1 | 	add	local07, result1
15fb0     17 2B 5A F2 | 	cmps	local07, local09 wcz
15fb4     24 00 90 ED |  if_be	jmp	#LR__2146
15fb8     97 0E 48 FB | 	callpa	#(@LR__2145-@LR__2144)>>2,fcache_load_ptr_
15fbc                 | LR__2144
15fbc     17 31 02 F6 | 	mov	local10, local09
15fc0     01 30 56 F2 | 	cmps	local10, #1 wc
15fc4     01 2E 86 F1 | 	sub	local09, #1
15fc8     14 31 02 36 |  if_ae	mov	local10, local06
15fcc     01 28 06 31 |  if_ae	add	local06, #1
15fd0     18 47 48 3C |  if_ae	wrbyte	#35, local10
15fd4     E4 FF 9F 3D |  if_ae	jmp	#LR__2144
15fd8                 | LR__2145
15fd8     14 01 48 FC | 	wrbyte	#0, local06
15fdc                 | LR__2146
15fdc     0F 13 02 F6 | 	mov	arg01, local01
15fe0     10 15 02 F6 | 	mov	arg02, local02
15fe4     13 17 02 F6 | 	mov	arg03, local05
15fe8     F0 FD BF FD | 	call	#__system___fmtstr
15fec                 | LR__2147
15fec     A7 F0 03 F6 | 	mov	ptra, fp
15ff0     B2 00 A0 FD | 	call	#popregs_
15ff4                 | __system___fmtnum_ret
15ff4     2D 00 64 FD | 	ret
15ff8                 | 
15ff8                 | __system___fmtfloat
15ff8     10 4A 05 F6 | 	mov	COUNT_, #16
15ffc     A8 00 A0 FD | 	call	#pushregs_
16000     24 F1 07 F1 | 	add	ptra, #292
16004     04 4E 05 F1 | 	add	fp, #4
16008     A7 12 62 FC | 	wrlong	arg01, fp
1600c     04 4E 05 F1 | 	add	fp, #4
16010     A7 14 62 FC | 	wrlong	arg02, fp
16014     04 4E 05 F1 | 	add	fp, #4
16018     A7 16 62 FC | 	wrlong	arg03, fp
1601c     04 4E 05 F1 | 	add	fp, #4
16020     A7 18 62 FC | 	wrlong	arg04, fp
16024     0C 4E 05 F1 | 	add	fp, #12
16028     A7 14 68 FC | 	wrlong	#10, fp
1602c     08 4E 05 F1 | 	add	fp, #8
16030     A7 00 68 FC | 	wrlong	#0, fp
16034     08 4E 05 F1 | 	add	fp, #8
16038     A7 00 68 FC | 	wrlong	#0, fp
1603c     08 4E 05 F1 | 	add	fp, #8
16040     A7 00 68 FC | 	wrlong	#0, fp
16044     04 4E 05 F1 | 	add	fp, #4
16048     A7 04 68 FC | 	wrlong	#2, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 00 68 FC | 	wrlong	#0, fp
16054     04 4E 05 F1 | 	add	fp, #4
16058     A7 00 68 FC | 	wrlong	#0, fp
1605c     04 4E 05 F1 | 	add	fp, #4
16060     A7 00 68 FC | 	wrlong	#0, fp
16064     04 4E 05 F1 | 	add	fp, #4
16068     A7 00 68 FC | 	wrlong	#0, fp
1606c     18 4E 05 F1 | 	add	fp, #24
16070     A7 00 68 FC | 	wrlong	#0, fp
16074     68 4E 05 F1 | 	add	fp, #104
16078     A7 1E 02 F6 | 	mov	local01, fp
1607c     08 4E 85 F1 | 	sub	fp, #8
16080     A7 1E 62 FC | 	wrlong	local01, fp
16084     04 4E 05 F1 | 	add	fp, #4
16088     A7 1E 62 FC | 	wrlong	local01, fp
1608c     BC 4E 85 F1 | 	sub	fp, #188
16090     A7 1E 02 FB | 	rdlong	local01, fp
16094     10 1E 46 F0 | 	shr	local01, #16
16098     3F 1E 06 F5 | 	and	local01, #63
1609c     B0 4E 05 F1 | 	add	fp, #176
160a0     A7 1E 62 FC | 	wrlong	local01, fp
160a4     B0 4E 85 F1 | 	sub	fp, #176
160a8     A7 1E 02 FB | 	rdlong	local01, fp
160ac     1C 1E 46 F0 | 	shr	local01, #28
160b0     01 1E 06 F5 | 	and	local01, #1
160b4     08 4F 05 F1 | 	add	fp, #264
160b8     A7 1E 62 FC | 	wrlong	local01, fp
160bc     58 4E 85 F1 | 	sub	fp, #88
160c0     A7 1E 0A FB | 	rdlong	local01, fp wz
160c4     B8 4E 85 F1 | 	sub	fp, #184
160c8     3C 00 90 5D |  if_ne	jmp	#LR__2151
160cc     10 4E 05 F1 | 	add	fp, #16
160d0     A7 1E 02 FB | 	rdlong	local01, fp
160d4     10 4E 85 F1 | 	sub	fp, #16
160d8     61 1E 0E F2 | 	cmp	local01, #97 wz
160dc     18 00 90 5D |  if_ne	jmp	#LR__2150
160e0     B8 4E 05 F1 | 	add	fp, #184
160e4     A7 1A 68 FC | 	wrlong	#13, fp
160e8     84 4E 85 F1 | 	sub	fp, #132
160ec     A7 02 68 FC | 	wrlong	#1, fp
160f0     34 4E 85 F1 | 	sub	fp, #52
160f4     24 00 90 FD | 	jmp	#LR__2152
160f8                 | LR__2150
160f8     B8 4E 05 F1 | 	add	fp, #184
160fc     A7 0C 68 FC | 	wrlong	#6, fp
16100     B8 4E 85 F1 | 	sub	fp, #184
16104     14 00 90 FD | 	jmp	#LR__2152
16108                 | LR__2151
16108     B8 4E 05 F1 | 	add	fp, #184
1610c     A7 1E 02 FB | 	rdlong	local01, fp
16110     01 1E 86 F1 | 	sub	local01, #1
16114     A7 1E 62 FC | 	wrlong	local01, fp
16118     B8 4E 85 F1 | 	sub	fp, #184
1611c                 | LR__2152
1611c     08 4E 05 F1 | 	add	fp, #8
16120     A7 1E 02 FB | 	rdlong	local01, fp
16124     16 1E 46 F0 | 	shr	local01, #22
16128     03 1E 06 F5 | 	and	local01, #3
1612c     04 4F 05 F1 | 	add	fp, #260
16130     A7 1E 62 FC | 	wrlong	local01, fp
16134     04 4F 85 F1 | 	sub	fp, #260
16138     A7 1E 02 FB | 	rdlong	local01, fp
1613c     1D 1E 46 F0 | 	shr	local01, #29
16140     01 1E 06 F5 | 	and	local01, #1
16144     B4 4E 05 F1 | 	add	fp, #180
16148     A7 1E 62 FC | 	wrlong	local01, fp
1614c     B4 4E 85 F1 | 	sub	fp, #180
16150     A7 1E 02 FB | 	rdlong	local01, fp
16154     0F 1F EA F8 | 	getbyte	local01, local01, #1
16158     60 4E 05 F1 | 	add	fp, #96
1615c     A7 1E 62 FC | 	wrlong	local01, fp
16160     60 4E 85 F1 | 	sub	fp, #96
16164     A7 1E 02 FB | 	rdlong	local01, fp
16168     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1616c     64 4E 05 F1 | 	add	fp, #100
16170     A7 1E 62 FC | 	wrlong	local01, fp
16174     00 1E 06 F6 | 	mov	local01, #0
16178     5C 4E 85 F1 | 	sub	fp, #92
1617c     A7 1A 02 FB | 	rdlong	arg05, fp
16180     65 1A 0E F2 | 	cmp	arg05, #101 wz
16184     01 1E 06 A6 |  if_e	mov	local01, #1
16188     14 4E 05 F1 | 	add	fp, #20
1618c     A7 1E 62 FC | 	wrlong	local01, fp
16190     98 4E 05 F1 | 	add	fp, #152
16194     A7 20 0A FB | 	rdlong	local02, fp wz
16198     45 1E 06 56 |  if_ne	mov	local01, #69
1619c     65 1E 06 A6 |  if_e	mov	local01, #101
161a0     8C 4E 85 F1 | 	sub	fp, #140
161a4     A7 1E 62 FC | 	wrlong	local01, fp
161a8     20 4E 85 F1 | 	sub	fp, #32
161ac     A7 1E 02 FB | 	rdlong	local01, fp
161b0     10 4E 85 F1 | 	sub	fp, #16
161b4     61 1E 0E F2 | 	cmp	local01, #97 wz
161b8     4C 00 90 5D |  if_ne	jmp	#LR__2153
161bc     24 4E 05 F1 | 	add	fp, #36
161c0     A7 02 68 FC | 	wrlong	#1, fp
161c4     98 4E 05 F1 | 	add	fp, #152
161c8     A7 20 0A FB | 	rdlong	local02, fp wz
161cc     50 1E 06 56 |  if_ne	mov	local01, #80
161d0     70 1E 06 A6 |  if_e	mov	local01, #112
161d4     8C 4E 85 F1 | 	sub	fp, #140
161d8     A7 1E 62 FC | 	wrlong	local01, fp
161dc     14 4E 85 F1 | 	sub	fp, #20
161e0     A7 04 68 FC | 	wrlong	#2, fp
161e4     1C 4E 05 F1 | 	add	fp, #28
161e8     A7 02 68 FC | 	wrlong	#1, fp
161ec     84 4E 05 F1 | 	add	fp, #132
161f0     A7 20 0A FB | 	rdlong	local02, fp wz
161f4     58 1E 06 56 |  if_ne	mov	local01, #88
161f8     78 1E 06 A6 |  if_e	mov	local01, #120
161fc     7C 4E 85 F1 | 	sub	fp, #124
16200     A7 1E 62 FC | 	wrlong	local01, fp
16204     40 4E 85 F1 | 	sub	fp, #64
16208                 | LR__2153
16208     10 4E 05 F1 | 	add	fp, #16
1620c     A7 1E 02 FB | 	rdlong	local01, fp
16210     10 4E 85 F1 | 	sub	fp, #16
16214     23 1E 0E F2 | 	cmp	local01, #35 wz
16218     3C 00 90 5D |  if_ne	jmp	#LR__2156
1621c     48 4E 05 F1 | 	add	fp, #72
16220     A7 02 68 FC | 	wrlong	#1, fp
16224     C8 4E 05 F1 | 	add	fp, #200
16228     A7 1E 0A FB | 	rdlong	local01, fp wz
1622c     10 4F 85 F1 | 	sub	fp, #272
16230     18 00 90 AD |  if_e	jmp	#LR__2154
16234     10 4E 05 F1 | 	add	fp, #16
16238     A7 CC 68 FC | 	wrlong	#102, fp
1623c     00 4F 05 F1 | 	add	fp, #256
16240     A7 00 68 FC | 	wrlong	#0, fp
16244     10 4F 85 F1 | 	sub	fp, #272
16248     0C 00 90 FD | 	jmp	#LR__2155
1624c                 | LR__2154
1624c     10 4F 05 F1 | 	add	fp, #272
16250     A7 02 68 FC | 	wrlong	#1, fp
16254     10 4F 85 F1 | 	sub	fp, #272
16258                 | LR__2155
16258                 | LR__2156
16258     08 4E 05 F1 | 	add	fp, #8
1625c     A7 1E 02 FB | 	rdlong	local01, fp
16260     1A 1E 46 F0 | 	shr	local01, #26
16264     03 1E 06 F5 | 	and	local01, #3
16268     5C 4E 05 F1 | 	add	fp, #92
1626c     A7 1E 62 FC | 	wrlong	local01, fp
16270     58 4E 85 F1 | 	sub	fp, #88
16274     A7 FA 01 FB | 	rdlong	result1, fp
16278     0C 4E 85 F1 | 	sub	fp, #12
1627c     1F FA 4D F0 | 	shr	result1, #31 wz
16280     20 00 90 AD |  if_e	jmp	#LR__2157
16284     2C 4E 05 F1 | 	add	fp, #44
16288     A7 5A 68 FC | 	wrlong	#45, fp
1628c     20 4E 85 F1 | 	sub	fp, #32
16290     A7 FA 01 FB | 	rdlong	result1, fp
16294     1F FA E5 F4 | 	bitnot	result1, #31
16298     A7 FA 61 FC | 	wrlong	result1, fp
1629c     0C 4E 85 F1 | 	sub	fp, #12
162a0     3C 00 90 FD | 	jmp	#LR__2159
162a4                 | LR__2157
162a4     64 4E 05 F1 | 	add	fp, #100
162a8     A7 1E 02 FB | 	rdlong	local01, fp
162ac     64 4E 85 F1 | 	sub	fp, #100
162b0     01 1E 0E F2 | 	cmp	local01, #1 wz
162b4     2C 4E 05 A1 |  if_e	add	fp, #44
162b8     A7 56 68 AC |  if_e	wrlong	#43, fp
162bc     2C 4E 85 A1 |  if_e	sub	fp, #44
162c0     1C 00 90 AD |  if_e	jmp	#LR__2158
162c4     64 4E 05 F1 | 	add	fp, #100
162c8     A7 1E 02 FB | 	rdlong	local01, fp
162cc     64 4E 85 F1 | 	sub	fp, #100
162d0     02 1E 0E F2 | 	cmp	local01, #2 wz
162d4     2C 4E 05 A1 |  if_e	add	fp, #44
162d8     A7 40 68 AC |  if_e	wrlong	#32, fp
162dc     2C 4E 85 A1 |  if_e	sub	fp, #44
162e0                 | LR__2158
162e0                 | LR__2159
162e0     08 4E 05 F1 | 	add	fp, #8
162e4     A7 1E 02 FB | 	rdlong	local01, fp
162e8     18 1E 46 F0 | 	shr	local01, #24
162ec     03 1E 06 F5 | 	and	local01, #3
162f0     3C 4E 05 F1 | 	add	fp, #60
162f4     A7 1E 62 FC | 	wrlong	local01, fp
162f8     00 1E 06 F6 | 	mov	local01, #0
162fc     18 4E 85 F1 | 	sub	fp, #24
16300     A7 22 0A FB | 	rdlong	local03, fp wz
16304     2C 4E 85 F1 | 	sub	fp, #44
16308     18 00 90 5D |  if_ne	jmp	#LR__2160
1630c     1C 4E 05 F1 | 	add	fp, #28
16310     A7 24 02 FB | 	rdlong	local04, fp
16314     1C 4E 85 F1 | 	sub	fp, #28
16318     12 27 02 F6 | 	mov	local05, local04
1631c     0A 26 0E F2 | 	cmp	local05, #10 wz
16320     04 00 90 AD |  if_e	jmp	#LR__2161
16324                 | LR__2160
16324     01 1E 66 F5 | 	xor	local01, #1
16328                 | LR__2161
16328     3C 4E 05 F1 | 	add	fp, #60
1632c     A7 1E 62 FC | 	wrlong	local01, fp
16330     3C 4E 85 F1 | 	sub	fp, #60
16334     00 1E 0E F2 | 	cmp	local01, #0 wz
16338     0C 01 90 AD |  if_e	jmp	#LR__2163
1633c     44 4E 05 F1 | 	add	fp, #68
16340     A7 26 02 FB | 	rdlong	local05, fp
16344     44 4E 85 F1 | 	sub	fp, #68
16348     13 23 02 F6 | 	mov	local03, local05
1634c     02 22 0E F2 | 	cmp	local03, #2 wz
16350     F4 00 90 5D |  if_ne	jmp	#LR__2163
16354     0C 4F 05 F1 | 	add	fp, #268
16358     A7 28 02 FB | 	rdlong	local06, fp
1635c     0C 4F 85 F1 | 	sub	fp, #268
16360     14 25 02 F6 | 	mov	local04, local06
16364     02 24 0E F2 | 	cmp	local04, #2 wz
16368     DC 00 90 AD |  if_e	jmp	#LR__2163
1636c     C0 4E 05 F1 | 	add	fp, #192
16370     A7 12 02 FB | 	rdlong	arg01, fp
16374     94 4E 85 F1 | 	sub	fp, #148
16378     A7 14 02 FB | 	rdlong	arg02, fp
1637c     14 4E 05 F1 | 	add	fp, #20
16380     A7 16 02 FB | 	rdlong	arg03, fp
16384     40 4E 85 F1 | 	sub	fp, #64
16388     84 40 B0 FD | 	call	#__system__emitsign_0310
1638c     14 4F 05 F1 | 	add	fp, #276
16390     A7 FA 61 FC | 	wrlong	result1, fp
16394     14 4F 85 F1 | 	sub	fp, #276
16398     00 FA 55 F2 | 	cmps	result1, #0 wc
1639c     14 4F 05 C1 |  if_b	add	fp, #276
163a0     A7 FA 01 CB |  if_b	rdlong	result1, fp
163a4     14 4F 85 C1 |  if_b	sub	fp, #276
163a8     6C 0B 90 CD |  if_b	jmp	#LR__2213
163ac     C0 4E 05 F1 | 	add	fp, #192
163b0     A7 1E 02 FB | 	rdlong	local01, fp
163b4     54 4E 05 F1 | 	add	fp, #84
163b8     A7 26 02 FB | 	rdlong	local05, fp
163bc     13 23 02 F6 | 	mov	local03, local05
163c0     13 1F 02 F1 | 	add	local01, local05
163c4     54 4E 85 F1 | 	sub	fp, #84
163c8     A7 1E 62 FC | 	wrlong	local01, fp
163cc     58 4E 85 F1 | 	sub	fp, #88
163d0     A7 1E 0A FB | 	rdlong	local01, fp wz
163d4     68 4E 85 F1 | 	sub	fp, #104
163d8     60 00 90 AD |  if_e	jmp	#LR__2162
163dc     68 4E 05 F1 | 	add	fp, #104
163e0     A7 1E 02 FB | 	rdlong	local01, fp
163e4     AC 4E 05 F1 | 	add	fp, #172
163e8     A7 22 02 FB | 	rdlong	local03, fp
163ec     11 1F 82 F1 | 	sub	local01, local03
163f0     AC 4E 85 F1 | 	sub	fp, #172
163f4     A7 1E 62 FC | 	wrlong	local01, fp
163f8     68 4E 85 F1 | 	sub	fp, #104
163fc     00 1E 56 F2 | 	cmps	local01, #0 wc
16400     68 4E 05 C1 |  if_b	add	fp, #104
16404     A7 00 68 CC |  if_b	wrlong	#0, fp
16408     68 4E 85 C1 |  if_b	sub	fp, #104
1640c     08 4E 05 F1 | 	add	fp, #8
16410     A7 1E 02 FB | 	rdlong	local01, fp
16414     E8 1E 06 F4 | 	bitl	local01, #232
16418     A7 1E 62 FC | 	wrlong	local01, fp
1641c     60 4E 05 F1 | 	add	fp, #96
16420     A7 26 02 FB | 	rdlong	local05, fp
16424     13 23 02 F6 | 	mov	local03, local05
16428     08 22 66 F0 | 	shl	local03, #8
1642c     11 1F 42 F5 | 	or	local01, local03
16430     60 4E 85 F1 | 	sub	fp, #96
16434     A7 1E 62 FC | 	wrlong	local01, fp
16438     08 4E 85 F1 | 	sub	fp, #8
1643c                 | LR__2162
1643c     3C 4E 05 F1 | 	add	fp, #60
16440     A7 00 68 FC | 	wrlong	#0, fp
16444     3C 4E 85 F1 | 	sub	fp, #60
16448                 | LR__2163
16448     0C 4E 05 F1 | 	add	fp, #12
1644c     A7 12 02 FB | 	rdlong	arg01, fp
16450     0C 4E 85 F1 | 	sub	fp, #12
16454     D0 1D B0 FD | 	call	#__system____builtin_ilogb
16458     FF FF 3F FF 
1645c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
16460     50 00 90 5D |  if_ne	jmp	#LR__2165
16464     2C 4E 05 F1 | 	add	fp, #44
16468     A7 1E 0A FB | 	rdlong	local01, fp wz
1646c     2C 4E 85 F1 | 	sub	fp, #44
16470     24 00 90 AD |  if_e	jmp	#LR__2164
16474     C0 4E 05 F1 | 	add	fp, #192
16478     A7 20 02 FB | 	rdlong	local02, fp
1647c     10 23 02 F6 | 	mov	local03, local02
16480     01 22 06 F1 | 	add	local03, #1
16484     A7 22 62 FC | 	wrlong	local03, fp
16488     94 4E 85 F1 | 	sub	fp, #148
1648c     A7 24 02 FB | 	rdlong	local04, fp
16490     2C 4E 85 F1 | 	sub	fp, #44
16494     10 25 42 FC | 	wrbyte	local04, local02
16498                 | LR__2164
16498     C0 4E 05 F1 | 	add	fp, #192
1649c     A7 12 02 FB | 	rdlong	arg01, fp
164a0     C0 4E 85 F1 | 	sub	fp, #192
164a4     20 01 00 FF 
164a8     E2 14 06 F6 | 	mov	arg02, ##@LR__4071
164ac     18 EA BF FD | 	call	#__system____builtin_strcpy
164b0     A4 08 90 FD | 	jmp	#LR__2201
164b4                 | LR__2165
164b4     0C 4E 05 F1 | 	add	fp, #12
164b8     A7 20 02 FB | 	rdlong	local02, fp
164bc     0C 4E 85 F1 | 	sub	fp, #12
164c0     10 13 02 F6 | 	mov	arg01, local02
164c4     60 1D B0 FD | 	call	#__system____builtin_ilogb
164c8     00 00 40 FF 
164cc     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
164d0     50 00 90 5D |  if_ne	jmp	#LR__2167
164d4     2C 4E 05 F1 | 	add	fp, #44
164d8     A7 1E 0A FB | 	rdlong	local01, fp wz
164dc     2C 4E 85 F1 | 	sub	fp, #44
164e0     24 00 90 AD |  if_e	jmp	#LR__2166
164e4     C0 4E 05 F1 | 	add	fp, #192
164e8     A7 20 02 FB | 	rdlong	local02, fp
164ec     10 23 02 F6 | 	mov	local03, local02
164f0     01 22 06 F1 | 	add	local03, #1
164f4     A7 22 62 FC | 	wrlong	local03, fp
164f8     94 4E 85 F1 | 	sub	fp, #148
164fc     A7 24 02 FB | 	rdlong	local04, fp
16500     2C 4E 85 F1 | 	sub	fp, #44
16504     10 25 42 FC | 	wrbyte	local04, local02
16508                 | LR__2166
16508     C0 4E 05 F1 | 	add	fp, #192
1650c     A7 12 02 FB | 	rdlong	arg01, fp
16510     C0 4E 85 F1 | 	sub	fp, #192
16514     20 01 00 FF 
16518     E6 14 06 F6 | 	mov	arg02, ##@LR__4072
1651c     A8 E9 BF FD | 	call	#__system____builtin_strcpy
16520     34 08 90 FD | 	jmp	#LR__2201
16524                 | LR__2167
16524     10 4E 05 F1 | 	add	fp, #16
16528     A7 1E 02 FB | 	rdlong	local01, fp
1652c     10 4E 85 F1 | 	sub	fp, #16
16530     67 1E 0E F2 | 	cmp	local01, #103 wz
16534     10 4E 05 51 |  if_ne	add	fp, #16
16538     A7 22 02 5B |  if_ne	rdlong	local03, fp
1653c     10 4E 85 51 |  if_ne	sub	fp, #16
16540     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
16544     94 01 90 5D |  if_ne	jmp	#LR__2172
16548     0C 4E 05 F1 | 	add	fp, #12
1654c     A7 12 02 FB | 	rdlong	arg01, fp
16550     08 4E 05 F1 | 	add	fp, #8
16554     A7 14 02 F6 | 	mov	arg02, fp
16558     0C 4E 05 F1 | 	add	fp, #12
1655c     A7 16 02 F6 | 	mov	arg03, fp
16560     98 4E 05 F1 | 	add	fp, #152
16564     A7 18 02 FB | 	rdlong	arg04, fp
16568     9C 4E 85 F1 | 	sub	fp, #156
1656c     A7 1A 02 FB | 	rdlong	arg05, fp
16570     1C 4E 85 F1 | 	sub	fp, #28
16574     A4 3C B0 FD | 	call	#__system__disassemble_0308
16578     10 4E 05 F1 | 	add	fp, #16
1657c     A7 1E 02 FB | 	rdlong	local01, fp
16580     10 4E 85 F1 | 	sub	fp, #16
16584     23 1E 0E F2 | 	cmp	local01, #35 wz
16588     A0 00 90 5D |  if_ne	jmp	#LR__2169
1658c     20 4E 05 F1 | 	add	fp, #32
16590     A7 1E 02 FB | 	rdlong	local01, fp
16594     98 4E 05 F1 | 	add	fp, #152
16598     A7 22 02 FB | 	rdlong	local03, fp
1659c     B8 4E 85 F1 | 	sub	fp, #184
165a0     11 1F 5A F2 | 	cmps	local01, local03 wcz
165a4     24 4E 05 11 |  if_a	add	fp, #36
165a8     A7 02 68 1C |  if_a	wrlong	#1, fp
165ac     24 4E 85 11 |  if_a	sub	fp, #36
165b0     A4 01 90 1D |  if_a	jmp	#LR__2175
165b4     20 4E 05 F1 | 	add	fp, #32
165b8     A7 1E 02 FB | 	rdlong	local01, fp
165bc     20 4E 85 F1 | 	sub	fp, #32
165c0     00 1E 56 F2 | 	cmps	local01, #0 wc
165c4     2C 00 90 3D |  if_ae	jmp	#LR__2168
165c8     B8 4E 05 F1 | 	add	fp, #184
165cc     A7 1E 02 FB | 	rdlong	local01, fp
165d0     0F 1F 62 F6 | 	neg	local01, local01
165d4     98 4E 85 F1 | 	sub	fp, #152
165d8     A7 22 02 FB | 	rdlong	local03, fp
165dc     20 4E 85 F1 | 	sub	fp, #32
165e0     0F 23 5A F2 | 	cmps	local03, local01 wcz
165e4     24 4E 05 E1 |  if_be	add	fp, #36
165e8     A7 02 68 EC |  if_be	wrlong	#1, fp
165ec     24 4E 85 E1 |  if_be	sub	fp, #36
165f0     64 01 90 FD | 	jmp	#LR__2175
165f4                 | LR__2168
165f4     20 4E 05 F1 | 	add	fp, #32
165f8     A7 1E 02 FB | 	rdlong	local01, fp
165fc     20 4E 85 F1 | 	sub	fp, #32
16600     01 1E 56 F2 | 	cmps	local01, #1 wc
16604     50 01 90 CD |  if_b	jmp	#LR__2175
16608     B8 4E 05 F1 | 	add	fp, #184
1660c     A7 1E 02 FB | 	rdlong	local01, fp
16610     98 4E 85 F1 | 	sub	fp, #152
16614     A7 22 02 FB | 	rdlong	local03, fp
16618     11 1F 82 F1 | 	sub	local01, local03
1661c     98 4E 05 F1 | 	add	fp, #152
16620     A7 1E 62 FC | 	wrlong	local01, fp
16624     B8 4E 85 F1 | 	sub	fp, #184
16628     2C 01 90 FD | 	jmp	#LR__2175
1662c                 | LR__2169
1662c     00 1E 06 F6 | 	mov	local01, #0
16630     08 4E 05 F1 | 	add	fp, #8
16634     A7 20 02 FB | 	rdlong	local02, fp
16638     1C 20 46 F0 | 	shr	local02, #28
1663c     01 20 0E F5 | 	and	local02, #1 wz
16640     01 1E 06 A6 |  if_e	mov	local01, #1
16644     2C 4E 05 F1 | 	add	fp, #44
16648     A7 1E 62 FC | 	wrlong	local01, fp
1664c     14 4E 85 F1 | 	sub	fp, #20
16650     A7 1E 02 FB | 	rdlong	local01, fp
16654     98 4E 05 F1 | 	add	fp, #152
16658     A7 22 02 FB | 	rdlong	local03, fp
1665c     B8 4E 85 F1 | 	sub	fp, #184
16660     11 1F 52 F2 | 	cmps	local01, local03 wc
16664     18 00 90 3D |  if_ae	jmp	#LR__2170
16668     20 4E 05 F1 | 	add	fp, #32
1666c     A7 24 02 FB | 	rdlong	local04, fp
16670     20 4E 85 F1 | 	sub	fp, #32
16674     FF FF 7F FF 
16678     FC 25 56 F2 | 	cmps	local04, ##-4 wc
1667c     10 00 90 3D |  if_ae	jmp	#LR__2171
16680                 | LR__2170
16680     24 4E 05 F1 | 	add	fp, #36
16684     A7 02 68 FC | 	wrlong	#1, fp
16688     24 4E 85 F1 | 	sub	fp, #36
1668c     C8 00 90 FD | 	jmp	#LR__2175
16690                 | LR__2171
16690     B8 4E 05 F1 | 	add	fp, #184
16694     A7 24 02 FB | 	rdlong	local04, fp
16698     98 4E 85 F1 | 	sub	fp, #152
1669c     A7 22 02 FB | 	rdlong	local03, fp
166a0     11 25 82 F1 | 	sub	local04, local03
166a4     98 4E 05 F1 | 	add	fp, #152
166a8     A7 24 62 FC | 	wrlong	local04, fp
166ac     AC 4E 85 F1 | 	sub	fp, #172
166b0     A7 12 02 FB | 	rdlong	arg01, fp
166b4     08 4E 05 F1 | 	add	fp, #8
166b8     A7 14 02 F6 | 	mov	arg02, fp
166bc     0C 4E 05 F1 | 	add	fp, #12
166c0     A7 16 02 F6 | 	mov	arg03, fp
166c4     12 19 62 F6 | 	neg	arg04, local04
166c8     04 4E 85 F1 | 	sub	fp, #4
166cc     A7 1A 02 FB | 	rdlong	arg05, fp
166d0     1C 4E 85 F1 | 	sub	fp, #28
166d4     44 3B B0 FD | 	call	#__system__disassemble_0308
166d8     7C 00 90 FD | 	jmp	#LR__2175
166dc                 | LR__2172
166dc     24 4E 05 F1 | 	add	fp, #36
166e0     A7 1E 0A FB | 	rdlong	local01, fp wz
166e4     24 4E 85 F1 | 	sub	fp, #36
166e8     34 00 90 AD |  if_e	jmp	#LR__2173
166ec     0C 4E 05 F1 | 	add	fp, #12
166f0     A7 12 02 FB | 	rdlong	arg01, fp
166f4     08 4E 05 F1 | 	add	fp, #8
166f8     A7 14 02 F6 | 	mov	arg02, fp
166fc     0C 4E 05 F1 | 	add	fp, #12
16700     A7 16 02 F6 | 	mov	arg03, fp
16704     98 4E 05 F1 | 	add	fp, #152
16708     A7 18 02 FB | 	rdlong	arg04, fp
1670c     9C 4E 85 F1 | 	sub	fp, #156
16710     A7 1A 02 FB | 	rdlong	arg05, fp
16714     1C 4E 85 F1 | 	sub	fp, #28
16718     00 3B B0 FD | 	call	#__system__disassemble_0308
1671c     38 00 90 FD | 	jmp	#LR__2174
16720                 | LR__2173
16720     0C 4E 05 F1 | 	add	fp, #12
16724     A7 12 02 FB | 	rdlong	arg01, fp
16728     08 4E 05 F1 | 	add	fp, #8
1672c     A7 14 02 F6 | 	mov	arg02, fp
16730     0C 4E 05 F1 | 	add	fp, #12
16734     A7 16 02 F6 | 	mov	arg03, fp
16738     98 4E 05 F1 | 	add	fp, #152
1673c     A7 24 02 FB | 	rdlong	local04, fp
16740     01 24 06 F1 | 	add	local04, #1
16744     12 19 62 F6 | 	neg	arg04, local04
16748     9C 4E 85 F1 | 	sub	fp, #156
1674c     A7 1A 02 FB | 	rdlong	arg05, fp
16750     1C 4E 85 F1 | 	sub	fp, #28
16754     C4 3A B0 FD | 	call	#__system__disassemble_0308
16758                 | LR__2174
16758                 | LR__2175
16758     1C 4E 05 F1 | 	add	fp, #28
1675c     A7 1E 02 FB | 	rdlong	local01, fp
16760     1C 4E 85 F1 | 	sub	fp, #28
16764     02 1E 0E F2 | 	cmp	local01, #2 wz
16768     4C 00 90 5D |  if_ne	jmp	#LR__2178
1676c     1C 4E 05 F1 | 	add	fp, #28
16770     A7 20 68 FC | 	wrlong	#16, fp
16774     1C 4E 85 F1 | 	sub	fp, #28
16778                 | LR__2176
16778     14 4E 05 F1 | 	add	fp, #20
1677c     A7 1E 0A FB | 	rdlong	local01, fp wz
16780     14 4E 85 F1 | 	sub	fp, #20
16784     30 00 90 AD |  if_e	jmp	#LR__2177
16788     14 4E 05 F1 | 	add	fp, #20
1678c     A7 22 02 FB | 	rdlong	local03, fp
16790     14 4E 85 F1 | 	sub	fp, #20
16794     00 80 00 FF 
16798     00 22 16 F2 | 	cmp	local03, ##16777216 wc
1679c     18 00 90 3D |  if_ae	jmp	#LR__2177
167a0     14 4E 05 F1 | 	add	fp, #20
167a4     A7 1E 02 FB | 	rdlong	local01, fp
167a8     01 1E 66 F0 | 	shl	local01, #1
167ac     A7 1E 62 FC | 	wrlong	local01, fp
167b0     14 4E 85 F1 | 	sub	fp, #20
167b4     C0 FF 9F FD | 	jmp	#LR__2176
167b8                 | LR__2177
167b8                 | LR__2178
167b8     70 4E 05 F1 | 	add	fp, #112
167bc     A7 12 02 F6 | 	mov	arg01, fp
167c0     5C 4E 85 F1 | 	sub	fp, #92
167c4     A7 14 02 FB | 	rdlong	arg02, fp
167c8     08 4E 05 F1 | 	add	fp, #8
167cc     A7 16 02 FB | 	rdlong	arg03, fp
167d0     A0 4E 05 F1 | 	add	fp, #160
167d4     A7 1A 02 FB | 	rdlong	arg05, fp
167d8     BC 4E 85 F1 | 	sub	fp, #188
167dc     01 18 06 F6 | 	mov	arg04, #1
167e0     C4 39 B0 FD | 	call	#__system___uitoa
167e4     58 4E 05 F1 | 	add	fp, #88
167e8     A7 FA 61 FC | 	wrlong	result1, fp
167ec     38 4E 85 F1 | 	sub	fp, #56
167f0     A7 1E 02 FB | 	rdlong	local01, fp
167f4     20 4E 85 F1 | 	sub	fp, #32
167f8     00 1E 56 F2 | 	cmps	local01, #0 wc
167fc     50 00 90 3D |  if_ae	jmp	#LR__2179
16800     60 4E 05 F1 | 	add	fp, #96
16804     A7 5A 68 FC | 	wrlong	#45, fp
16808     50 4E 05 F1 | 	add	fp, #80
1680c     A7 12 02 F6 | 	mov	arg01, fp
16810     90 4E 85 F1 | 	sub	fp, #144
16814     A7 22 02 FB | 	rdlong	local03, fp
16818     11 15 62 F6 | 	neg	arg02, local03
1681c     18 4E 05 F1 | 	add	fp, #24
16820     A7 18 02 FB | 	rdlong	arg04, fp
16824     84 4E 05 F1 | 	add	fp, #132
16828     A7 28 02 FB | 	rdlong	local06, fp
1682c     BC 4E 85 F1 | 	sub	fp, #188
16830     14 25 02 F6 | 	mov	local04, local06
16834     0A 16 06 F6 | 	mov	arg03, #10
16838     12 1B 02 F6 | 	mov	arg05, local04
1683c     68 39 B0 FD | 	call	#__system___uitoa
16840     5C 4E 05 F1 | 	add	fp, #92
16844     A7 FA 61 FC | 	wrlong	result1, fp
16848     5C 4E 85 F1 | 	sub	fp, #92
1684c     48 00 90 FD | 	jmp	#LR__2180
16850                 | LR__2179
16850     60 4E 05 F1 | 	add	fp, #96
16854     A7 56 68 FC | 	wrlong	#43, fp
16858     50 4E 05 F1 | 	add	fp, #80
1685c     A7 12 02 F6 | 	mov	arg01, fp
16860     90 4E 85 F1 | 	sub	fp, #144
16864     A7 14 02 FB | 	rdlong	arg02, fp
16868     18 4E 05 F1 | 	add	fp, #24
1686c     A7 18 02 FB | 	rdlong	arg04, fp
16870     84 4E 05 F1 | 	add	fp, #132
16874     A7 28 02 FB | 	rdlong	local06, fp
16878     BC 4E 85 F1 | 	sub	fp, #188
1687c     14 25 02 F6 | 	mov	local04, local06
16880     0A 16 06 F6 | 	mov	arg03, #10
16884     12 1B 02 F6 | 	mov	arg05, local04
16888     1C 39 B0 FD | 	call	#__system___uitoa
1688c     5C 4E 05 F1 | 	add	fp, #92
16890     A7 FA 61 FC | 	wrlong	result1, fp
16894     5C 4E 85 F1 | 	sub	fp, #92
16898                 | LR__2180
16898     24 4E 05 F1 | 	add	fp, #36
1689c     A7 1E 0A FB | 	rdlong	local01, fp wz
168a0     24 4E 85 F1 | 	sub	fp, #36
168a4     2C 00 90 AD |  if_e	jmp	#LR__2181
168a8     50 4E 05 F1 | 	add	fp, #80
168ac     A7 00 68 FC | 	wrlong	#0, fp
168b0     04 4E 85 F1 | 	sub	fp, #4
168b4     A7 00 68 FC | 	wrlong	#0, fp
168b8     6C 4E 05 F1 | 	add	fp, #108
168bc     A7 1E 02 FB | 	rdlong	local01, fp
168c0     01 1E 06 F1 | 	add	local01, #1
168c4     64 4E 85 F1 | 	sub	fp, #100
168c8     A7 1E 62 FC | 	wrlong	local01, fp
168cc     54 4E 85 F1 | 	sub	fp, #84
168d0     88 00 90 FD | 	jmp	#LR__2184
168d4                 | LR__2181
168d4     20 4E 05 F1 | 	add	fp, #32
168d8     A7 1E 02 FB | 	rdlong	local01, fp
168dc     20 4E 85 F1 | 	sub	fp, #32
168e0     00 1E 56 F2 | 	cmps	local01, #0 wc
168e4     40 00 90 3D |  if_ae	jmp	#LR__2182
168e8     20 4E 05 F1 | 	add	fp, #32
168ec     A7 20 02 FB | 	rdlong	local02, fp
168f0     30 4E 05 F1 | 	add	fp, #48
168f4     A7 20 62 FC | 	wrlong	local02, fp
168f8     04 4E 85 F1 | 	sub	fp, #4
168fc     A7 20 62 FC | 	wrlong	local02, fp
16900     2C 4E 85 F1 | 	sub	fp, #44
16904     A7 1E 02 FB | 	rdlong	local01, fp
16908     98 4E 05 F1 | 	add	fp, #152
1690c     A7 22 02 FB | 	rdlong	local03, fp
16910     11 1F 02 F1 | 	add	local01, local03
16914     01 1E 06 F1 | 	add	local01, #1
16918     64 4E 85 F1 | 	sub	fp, #100
1691c     A7 1E 62 FC | 	wrlong	local01, fp
16920     54 4E 85 F1 | 	sub	fp, #84
16924     34 00 90 FD | 	jmp	#LR__2183
16928                 | LR__2182
16928     4C 4E 05 F1 | 	add	fp, #76
1692c     A7 00 68 FC | 	wrlong	#0, fp
16930     2C 4E 85 F1 | 	sub	fp, #44
16934     A7 1E 02 FB | 	rdlong	local01, fp
16938     30 4E 05 F1 | 	add	fp, #48
1693c     A7 1E 62 FC | 	wrlong	local01, fp
16940     68 4E 05 F1 | 	add	fp, #104
16944     A7 22 02 FB | 	rdlong	local03, fp
16948     11 1F 02 F1 | 	add	local01, local03
1694c     01 1E 06 F1 | 	add	local01, #1
16950     64 4E 85 F1 | 	sub	fp, #100
16954     A7 1E 62 FC | 	wrlong	local01, fp
16958     54 4E 85 F1 | 	sub	fp, #84
1695c                 | LR__2183
1695c                 | LR__2184
1695c     54 4E 05 F1 | 	add	fp, #84
16960     A7 1E 02 FB | 	rdlong	local01, fp
16964     08 4E 85 F1 | 	sub	fp, #8
16968     A7 22 02 FB | 	rdlong	local03, fp
1696c     11 1F 82 F1 | 	sub	local01, local03
16970     01 1E 06 F1 | 	add	local01, #1
16974     24 4E 85 F1 | 	sub	fp, #36
16978     A7 1E 62 FC | 	wrlong	local01, fp
1697c     04 4E 05 F1 | 	add	fp, #4
16980     A7 1E 0A FB | 	rdlong	local01, fp wz
16984     2C 4E 85 F1 | 	sub	fp, #44
16988     28 4E 05 51 |  if_ne	add	fp, #40
1698c     A7 22 02 5B |  if_ne	rdlong	local03, fp
16990     01 22 06 51 |  if_ne	add	local03, #1
16994     A7 22 62 5C |  if_ne	wrlong	local03, fp
16998     28 4E 85 51 |  if_ne	sub	fp, #40
1699c     1C 4E 05 F1 | 	add	fp, #28
169a0     A7 1E 02 FB | 	rdlong	local01, fp
169a4     1C 4E 85 F1 | 	sub	fp, #28
169a8     10 1E 0E F2 | 	cmp	local01, #16 wz
169ac     28 4E 05 A1 |  if_e	add	fp, #40
169b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
169b4     02 1E 06 A1 |  if_e	add	local01, #2
169b8     A7 1E 62 AC |  if_e	wrlong	local01, fp
169bc     28 4E 85 A1 |  if_e	sub	fp, #40
169c0     24 4E 05 F1 | 	add	fp, #36
169c4     A7 1E 0A FB | 	rdlong	local01, fp wz
169c8     24 4E 85 F1 | 	sub	fp, #36
169cc     28 00 90 AD |  if_e	jmp	#LR__2185
169d0     28 4E 05 F1 | 	add	fp, #40
169d4     A7 1E 02 FB | 	rdlong	local01, fp
169d8     02 22 06 F6 | 	mov	local03, #2
169dc     34 4E 05 F1 | 	add	fp, #52
169e0     A7 26 02 FB | 	rdlong	local05, fp
169e4     13 23 02 F1 | 	add	local03, local05
169e8     11 1F 02 F1 | 	add	local01, local03
169ec     34 4E 85 F1 | 	sub	fp, #52
169f0     A7 1E 62 FC | 	wrlong	local01, fp
169f4     28 4E 85 F1 | 	sub	fp, #40
169f8                 | LR__2185
169f8     28 4E 05 F1 | 	add	fp, #40
169fc     A7 1E 02 FB | 	rdlong	local01, fp
16a00     28 4E 85 F1 | 	sub	fp, #40
16a04     41 1E 56 F2 | 	cmps	local01, #65 wc
16a08     01 FA 65 36 |  if_ae	neg	result1, #1
16a0c     08 05 90 3D |  if_ae	jmp	#LR__2213
16a10     3C 4E 05 F1 | 	add	fp, #60
16a14     A7 1E 0A FB | 	rdlong	local01, fp wz
16a18     3C 4E 85 F1 | 	sub	fp, #60
16a1c     60 00 90 AD |  if_e	jmp	#LR__2186
16a20     C0 4E 05 F1 | 	add	fp, #192
16a24     A7 12 02 FB | 	rdlong	arg01, fp
16a28     94 4E 85 F1 | 	sub	fp, #148
16a2c     A7 14 02 FB | 	rdlong	arg02, fp
16a30     14 4E 05 F1 | 	add	fp, #20
16a34     A7 16 02 FB | 	rdlong	arg03, fp
16a38     40 4E 85 F1 | 	sub	fp, #64
16a3c     D0 39 B0 FD | 	call	#__system__emitsign_0310
16a40     18 4F 05 F1 | 	add	fp, #280
16a44     A7 FA 61 FC | 	wrlong	result1, fp
16a48     18 4F 85 F1 | 	sub	fp, #280
16a4c     00 FA 55 F2 | 	cmps	result1, #0 wc
16a50     18 4F 05 C1 |  if_b	add	fp, #280
16a54     A7 FA 01 CB |  if_b	rdlong	result1, fp
16a58     18 4F 85 C1 |  if_b	sub	fp, #280
16a5c     B8 04 90 CD |  if_b	jmp	#LR__2213
16a60     C0 4E 05 F1 | 	add	fp, #192
16a64     A7 1E 02 FB | 	rdlong	local01, fp
16a68     58 4E 05 F1 | 	add	fp, #88
16a6c     A7 22 02 FB | 	rdlong	local03, fp
16a70     11 1F 02 F1 | 	add	local01, local03
16a74     58 4E 85 F1 | 	sub	fp, #88
16a78     A7 1E 62 FC | 	wrlong	local01, fp
16a7c     C0 4E 85 F1 | 	sub	fp, #192
16a80                 | LR__2186
16a80     4C 4E 05 F1 | 	add	fp, #76
16a84     A7 1E 02 FB | 	rdlong	local01, fp
16a88     34 4E 85 F1 | 	sub	fp, #52
16a8c     A7 1E 62 FC | 	wrlong	local01, fp
16a90     18 4E 85 F1 | 	sub	fp, #24
16a94     97 9E 48 FB | 	callpa	#(@LR__2192-@LR__2187)>>2,fcache_load_ptr_
16a98                 | LR__2187
16a98     18 4E 05 F1 | 	add	fp, #24
16a9c     A7 20 02 FB | 	rdlong	local02, fp
16aa0     3C 4E 05 F1 | 	add	fp, #60
16aa4     A7 26 02 FB | 	rdlong	local05, fp
16aa8     54 4E 85 F1 | 	sub	fp, #84
16aac     13 21 52 F2 | 	cmps	local02, local05 wc
16ab0     20 01 90 3D |  if_ae	jmp	#LR__2193
16ab4     18 4E 05 F1 | 	add	fp, #24
16ab8     A7 28 02 FB | 	rdlong	local06, fp
16abc     18 4E 85 F1 | 	sub	fp, #24
16ac0     00 28 56 F2 | 	cmps	local06, #0 wc
16ac4     58 00 90 CD |  if_b	jmp	#LR__2188
16ac8     18 4E 05 F1 | 	add	fp, #24
16acc     A7 28 02 FB | 	rdlong	local06, fp
16ad0     40 4E 05 F1 | 	add	fp, #64
16ad4     A7 2A 02 FB | 	rdlong	local07, fp
16ad8     58 4E 85 F1 | 	sub	fp, #88
16adc     15 29 52 F2 | 	cmps	local06, local07 wc
16ae0     3C 00 90 3D |  if_ae	jmp	#LR__2188
16ae4     C0 4E 05 F1 | 	add	fp, #192
16ae8     A7 2C 02 FB | 	rdlong	local08, fp
16aec     16 2B 02 F6 | 	mov	local07, local08
16af0     01 2A 06 F1 | 	add	local07, #1
16af4     A7 2A 62 FC | 	wrlong	local07, fp
16af8     A8 4E 85 F1 | 	sub	fp, #168
16afc     A7 2A 02 FB | 	rdlong	local07, fp
16b00     15 2F 02 F6 | 	mov	local09, local07
16b04     58 4E 05 F1 | 	add	fp, #88
16b08     A7 30 02 F6 | 	mov	local10, fp
16b0c     A7 2E 02 F1 | 	add	local09, fp
16b10     17 33 C2 FA | 	rdbyte	local11, local09
16b14     16 33 42 FC | 	wrbyte	local11, local08
16b18     70 4E 85 F1 | 	sub	fp, #112
16b1c     20 00 90 FD | 	jmp	#LR__2189
16b20                 | LR__2188
16b20     C0 4E 05 F1 | 	add	fp, #192
16b24     A7 2C 02 FB | 	rdlong	local08, fp
16b28     16 2F 02 F6 | 	mov	local09, local08
16b2c     01 2E 06 F1 | 	add	local09, #1
16b30     A7 2E 62 FC | 	wrlong	local09, fp
16b34     C0 4E 85 F1 | 	sub	fp, #192
16b38     30 2E 06 F6 | 	mov	local09, #48
16b3c     16 61 48 FC | 	wrbyte	#48, local08
16b40                 | LR__2189
16b40     18 4E 05 F1 | 	add	fp, #24
16b44     A7 28 02 FB | 	rdlong	local06, fp
16b48     38 4E 05 F1 | 	add	fp, #56
16b4c     A7 34 02 FB | 	rdlong	local12, fp
16b50     50 4E 85 F1 | 	sub	fp, #80
16b54     1A 29 0A F2 | 	cmp	local06, local12 wz
16b58     5C 00 90 5D |  if_ne	jmp	#LR__2191
16b5c     10 4F 05 F1 | 	add	fp, #272
16b60     A7 2A 02 FB | 	rdlong	local07, fp
16b64     10 4F 85 F1 | 	sub	fp, #272
16b68     15 2F 0A F6 | 	mov	local09, local07 wz
16b6c     28 00 90 5D |  if_ne	jmp	#LR__2190
16b70     54 4E 05 F1 | 	add	fp, #84
16b74     A7 32 02 FB | 	rdlong	local11, fp
16b78     19 31 02 F6 | 	mov	local10, local11
16b7c     01 30 86 F1 | 	sub	local10, #1
16b80     3C 4E 85 F1 | 	sub	fp, #60
16b84     A7 36 02 FB | 	rdlong	local13, fp
16b88     18 4E 85 F1 | 	sub	fp, #24
16b8c     1B 39 02 F6 | 	mov	local14, local13
16b90     18 39 52 F2 | 	cmps	local14, local10 wc
16b94     20 00 90 3D |  if_ae	jmp	#LR__2191
16b98                 | LR__2190
16b98     C0 4E 05 F1 | 	add	fp, #192
16b9c     A7 2C 02 FB | 	rdlong	local08, fp
16ba0     16 35 02 F6 | 	mov	local12, local08
16ba4     01 34 06 F1 | 	add	local12, #1
16ba8     A7 34 62 FC | 	wrlong	local12, fp
16bac     C0 4E 85 F1 | 	sub	fp, #192
16bb0     2E 2E 06 F6 | 	mov	local09, #46
16bb4     16 5D 48 FC | 	wrbyte	#46, local08
16bb8                 | LR__2191
16bb8     18 4E 05 F1 | 	add	fp, #24
16bbc     A7 3A 02 FB | 	rdlong	local15, fp
16bc0     1D 35 02 F6 | 	mov	local12, local15
16bc4     01 34 06 F1 | 	add	local12, #1
16bc8     A7 34 62 FC | 	wrlong	local12, fp
16bcc     18 4E 85 F1 | 	sub	fp, #24
16bd0     C4 FE 9F FD | 	jmp	#LR__2187
16bd4                 | LR__2192
16bd4                 | LR__2193
16bd4     34 4E 05 F1 | 	add	fp, #52
16bd8     A7 1E 0A FB | 	rdlong	local01, fp wz
16bdc     34 4E 85 F1 | 	sub	fp, #52
16be0     A0 00 90 AD |  if_e	jmp	#LR__2197
16be4     C0 4E 05 F1 | 	add	fp, #192
16be8     A7 1E 02 FB | 	rdlong	local01, fp
16bec     01 1E 86 F1 | 	sub	local01, #1
16bf0     A7 1E 62 FC | 	wrlong	local01, fp
16bf4     C0 4E 85 F1 | 	sub	fp, #192
16bf8     97 26 48 FB | 	callpa	#(@LR__2195-@LR__2194)>>2,fcache_load_ptr_
16bfc                 | LR__2194
16bfc     C0 4E 05 F1 | 	add	fp, #192
16c00     A7 1E 02 FB | 	rdlong	local01, fp
16c04     04 4E 05 F1 | 	add	fp, #4
16c08     A7 22 02 FB | 	rdlong	local03, fp
16c0c     C4 4E 85 F1 | 	sub	fp, #196
16c10     11 1F 5A F2 | 	cmps	local01, local03 wcz
16c14     30 00 90 ED |  if_be	jmp	#LR__2196
16c18     C0 4E 05 F1 | 	add	fp, #192
16c1c     A7 28 02 FB | 	rdlong	local06, fp
16c20     C0 4E 85 F1 | 	sub	fp, #192
16c24     14 25 C2 FA | 	rdbyte	local04, local06
16c28     30 24 0E F2 | 	cmp	local04, #48 wz
16c2c     18 00 90 5D |  if_ne	jmp	#LR__2196
16c30     C0 4E 05 F1 | 	add	fp, #192
16c34     A7 1E 02 FB | 	rdlong	local01, fp
16c38     01 1E 86 F1 | 	sub	local01, #1
16c3c     A7 1E 62 FC | 	wrlong	local01, fp
16c40     C0 4E 85 F1 | 	sub	fp, #192
16c44     B4 FF 9F FD | 	jmp	#LR__2194
16c48                 | LR__2195
16c48                 | LR__2196
16c48     C0 4E 05 F1 | 	add	fp, #192
16c4c     A7 20 02 FB | 	rdlong	local02, fp
16c50     C0 4E 85 F1 | 	sub	fp, #192
16c54     10 1F C2 FA | 	rdbyte	local01, local02
16c58     2E 1E 0E F2 | 	cmp	local01, #46 wz
16c5c     C0 4E 05 A1 |  if_e	add	fp, #192
16c60     A7 1E 02 AB |  if_e	rdlong	local01, fp
16c64     01 1E 86 A1 |  if_e	sub	local01, #1
16c68     A7 1E 62 AC |  if_e	wrlong	local01, fp
16c6c     C0 4E 85 A1 |  if_e	sub	fp, #192
16c70     C0 4E 05 F1 | 	add	fp, #192
16c74     A7 22 02 FB | 	rdlong	local03, fp
16c78     01 22 06 F1 | 	add	local03, #1
16c7c     A7 22 62 FC | 	wrlong	local03, fp
16c80     C0 4E 85 F1 | 	sub	fp, #192
16c84                 | LR__2197
16c84     24 4E 05 F1 | 	add	fp, #36
16c88     A7 1E 0A FB | 	rdlong	local01, fp wz
16c8c     24 4E 85 F1 | 	sub	fp, #36
16c90     B4 00 90 AD |  if_e	jmp	#LR__2200
16c94     C0 4E 05 F1 | 	add	fp, #192
16c98     A7 20 02 FB | 	rdlong	local02, fp
16c9c     10 23 02 F6 | 	mov	local03, local02
16ca0     01 22 06 F1 | 	add	local03, #1
16ca4     A7 22 62 FC | 	wrlong	local03, fp
16ca8     90 4E 85 F1 | 	sub	fp, #144
16cac     A7 24 02 FB | 	rdlong	local04, fp
16cb0     10 25 42 FC | 	wrbyte	local04, local02
16cb4     90 4E 05 F1 | 	add	fp, #144
16cb8     A7 20 02 FB | 	rdlong	local02, fp
16cbc     10 23 02 F6 | 	mov	local03, local02
16cc0     01 22 06 F1 | 	add	local03, #1
16cc4     A7 22 62 FC | 	wrlong	local03, fp
16cc8     60 4E 85 F1 | 	sub	fp, #96
16ccc     A7 24 02 FB | 	rdlong	local04, fp
16cd0     10 25 42 FC | 	wrbyte	local04, local02
16cd4     48 4E 85 F1 | 	sub	fp, #72
16cd8     A7 00 68 FC | 	wrlong	#0, fp
16cdc     18 4E 85 F1 | 	sub	fp, #24
16ce0                 | LR__2198
16ce0     18 4E 05 F1 | 	add	fp, #24
16ce4     A7 20 02 FB | 	rdlong	local02, fp
16ce8     44 4E 05 F1 | 	add	fp, #68
16cec     A7 26 02 FB | 	rdlong	local05, fp
16cf0     5C 4E 85 F1 | 	sub	fp, #92
16cf4     13 21 52 F2 | 	cmps	local02, local05 wc
16cf8     4C 00 90 3D |  if_ae	jmp	#LR__2199
16cfc     C0 4E 05 F1 | 	add	fp, #192
16d00     A7 2C 02 FB | 	rdlong	local08, fp
16d04     16 35 02 F6 | 	mov	local12, local08
16d08     01 34 06 F1 | 	add	local12, #1
16d0c     A7 34 62 FC | 	wrlong	local12, fp
16d10     A8 4E 85 F1 | 	sub	fp, #168
16d14     A7 2A 02 FB | 	rdlong	local07, fp
16d18     15 2F 02 F6 | 	mov	local09, local07
16d1c     98 4E 05 F1 | 	add	fp, #152
16d20     A7 30 02 F6 | 	mov	local10, fp
16d24     A7 2E 02 F1 | 	add	local09, fp
16d28     17 33 C2 FA | 	rdbyte	local11, local09
16d2c     16 33 42 FC | 	wrbyte	local11, local08
16d30     98 4E 85 F1 | 	sub	fp, #152
16d34     A7 34 02 FB | 	rdlong	local12, fp
16d38     01 34 06 F1 | 	add	local12, #1
16d3c     A7 34 62 FC | 	wrlong	local12, fp
16d40     18 4E 85 F1 | 	sub	fp, #24
16d44     98 FF 9F FD | 	jmp	#LR__2198
16d48                 | LR__2199
16d48                 | LR__2200
16d48     C0 4E 05 F1 | 	add	fp, #192
16d4c     A7 1E 02 FB | 	rdlong	local01, fp
16d50     C0 4E 85 F1 | 	sub	fp, #192
16d54     0F 01 48 FC | 	wrbyte	#0, local01
16d58                 | LR__2201
16d58     6C 4E 05 F1 | 	add	fp, #108
16d5c     A7 1E 0A FB | 	rdlong	local01, fp wz
16d60     6C 4E 85 F1 | 	sub	fp, #108
16d64     90 01 90 AD |  if_e	jmp	#LR__2212
16d68     48 4E 05 F1 | 	add	fp, #72
16d6c     A7 22 0A FB | 	rdlong	local03, fp wz
16d70     48 4E 85 F1 | 	sub	fp, #72
16d74     80 01 90 AD |  if_e	jmp	#LR__2212
16d78     C4 4E 05 F1 | 	add	fp, #196
16d7c     A7 12 02 FB | 	rdlong	arg01, fp
16d80     C4 4E 85 F1 | 	sub	fp, #196
16d84     09 3D 02 F6 | 	mov	local16, arg01
16d88     97 06 48 FB | 	callpa	#(@LR__2203-@LR__2202)>>2,fcache_load_ptr_
16d8c                 | LR__2202
16d8c     1E FB C9 FA | 	rdbyte	result1, local16 wz
16d90     01 3C 06 51 |  if_ne	add	local16, #1
16d94     F4 FF 9F 5D |  if_ne	jmp	#LR__2202
16d98                 | LR__2203
16d98     09 3D 82 F1 | 	sub	local16, arg01
16d9c     1E 25 02 F6 | 	mov	local04, local16
16da0     6C 4E 05 F1 | 	add	fp, #108
16da4     A7 28 02 FB | 	rdlong	local06, fp
16da8     6C 4E 85 F1 | 	sub	fp, #108
16dac     14 25 5A F2 | 	cmps	local04, local06 wcz
16db0     44 01 90 ED |  if_be	jmp	#LR__2212
16db4     C4 4E 05 F1 | 	add	fp, #196
16db8     A7 1E 02 FB | 	rdlong	local01, fp
16dbc     5C 4E 05 F1 | 	add	fp, #92
16dc0     A7 1E 62 FC | 	wrlong	local01, fp
16dc4     FC 4E 85 F1 | 	sub	fp, #252
16dc8     A7 1E 0A FB | 	rdlong	local01, fp wz
16dcc     24 4E 85 F1 | 	sub	fp, #36
16dd0     20 00 90 AD |  if_e	jmp	#LR__2204
16dd4     B8 4E 05 F1 | 	add	fp, #184
16dd8     A7 00 68 FC | 	wrlong	#0, fp
16ddc     4C 4E 85 F1 | 	sub	fp, #76
16de0     A7 1E 02 FB | 	rdlong	local01, fp
16de4     B0 4E 05 F1 | 	add	fp, #176
16de8     A7 1E 62 FC | 	wrlong	local01, fp
16dec     1C 4F 85 F1 | 	sub	fp, #284
16df0     24 00 90 FD | 	jmp	#LR__2205
16df4                 | LR__2204
16df4     6C 4E 05 F1 | 	add	fp, #108
16df8     A7 1E 02 FB | 	rdlong	local01, fp
16dfc     01 1E 86 F1 | 	sub	local01, #1
16e00     4C 4E 05 F1 | 	add	fp, #76
16e04     A7 22 02 FB | 	rdlong	local03, fp
16e08     11 1F 82 F1 | 	sub	local01, local03
16e0c     64 4E 05 F1 | 	add	fp, #100
16e10     A7 1E 62 FC | 	wrlong	local01, fp
16e14     1C 4F 85 F1 | 	sub	fp, #284
16e18                 | LR__2205
16e18     97 20 48 FB | 	callpa	#(@LR__2207-@LR__2206)>>2,fcache_load_ptr_
16e1c                 | LR__2206
16e1c     1C 4F 05 F1 | 	add	fp, #284
16e20     A7 1E 0A FB | 	rdlong	local01, fp wz
16e24     1C 4F 85 F1 | 	sub	fp, #284
16e28     30 00 90 AD |  if_e	jmp	#LR__2208
16e2c     20 4F 05 F1 | 	add	fp, #288
16e30     A7 20 02 FB | 	rdlong	local02, fp
16e34     10 23 02 F6 | 	mov	local03, local02
16e38     01 22 06 F1 | 	add	local03, #1
16e3c     A7 22 62 FC | 	wrlong	local03, fp
16e40     10 55 48 FC | 	wrbyte	#42, local02
16e44     04 4E 85 F1 | 	sub	fp, #4
16e48     A7 1E 02 FB | 	rdlong	local01, fp
16e4c     01 1E 86 F1 | 	sub	local01, #1
16e50     A7 1E 62 FC | 	wrlong	local01, fp
16e54     1C 4F 85 F1 | 	sub	fp, #284
16e58     C0 FF 9F FD | 	jmp	#LR__2206
16e5c                 | LR__2207
16e5c                 | LR__2208
16e5c     B8 4E 05 F1 | 	add	fp, #184
16e60     A7 1E 0A FB | 	rdlong	local01, fp wz
16e64     B8 4E 85 F1 | 	sub	fp, #184
16e68     70 00 90 AD |  if_e	jmp	#LR__2211
16e6c     20 4F 05 F1 | 	add	fp, #288
16e70     A7 20 02 FB | 	rdlong	local02, fp
16e74     10 23 02 F6 | 	mov	local03, local02
16e78     01 22 06 F1 | 	add	local03, #1
16e7c     A7 22 62 FC | 	wrlong	local03, fp
16e80     10 5D 48 FC | 	wrbyte	#46, local02
16e84     04 4E 85 F1 | 	sub	fp, #4
16e88     A7 00 68 FC | 	wrlong	#0, fp
16e8c     1C 4F 85 F1 | 	sub	fp, #284
16e90                 | LR__2209
16e90     1C 4F 05 F1 | 	add	fp, #284
16e94     A7 20 02 FB | 	rdlong	local02, fp
16e98     64 4E 85 F1 | 	sub	fp, #100
16e9c     A7 26 02 FB | 	rdlong	local05, fp
16ea0     B8 4E 85 F1 | 	sub	fp, #184
16ea4     13 21 52 F2 | 	cmps	local02, local05 wc
16ea8     30 00 90 3D |  if_ae	jmp	#LR__2210
16eac     20 4F 05 F1 | 	add	fp, #288
16eb0     A7 2C 02 FB | 	rdlong	local08, fp
16eb4     16 35 02 F6 | 	mov	local12, local08
16eb8     01 34 06 F1 | 	add	local12, #1
16ebc     A7 34 62 FC | 	wrlong	local12, fp
16ec0     16 55 48 FC | 	wrbyte	#42, local08
16ec4     04 4E 85 F1 | 	sub	fp, #4
16ec8     A7 34 02 FB | 	rdlong	local12, fp
16ecc     01 34 06 F1 | 	add	local12, #1
16ed0     A7 34 62 FC | 	wrlong	local12, fp
16ed4     1C 4F 85 F1 | 	sub	fp, #284
16ed8     B4 FF 9F FD | 	jmp	#LR__2209
16edc                 | LR__2210
16edc                 | LR__2211
16edc     20 4F 05 F1 | 	add	fp, #288
16ee0     A7 20 02 FB | 	rdlong	local02, fp
16ee4     10 23 02 F6 | 	mov	local03, local02
16ee8     01 22 06 F1 | 	add	local03, #1
16eec     A7 22 62 FC | 	wrlong	local03, fp
16ef0     20 4F 85 F1 | 	sub	fp, #288
16ef4     10 01 48 FC | 	wrbyte	#0, local02
16ef8                 | LR__2212
16ef8     04 4E 05 F1 | 	add	fp, #4
16efc     A7 12 02 FB | 	rdlong	arg01, fp
16f00     04 4E 05 F1 | 	add	fp, #4
16f04     A7 14 02 FB | 	rdlong	arg02, fp
16f08     BC 4E 05 F1 | 	add	fp, #188
16f0c     A7 16 02 FB | 	rdlong	arg03, fp
16f10     C4 4E 85 F1 | 	sub	fp, #196
16f14     C4 EE BF FD | 	call	#__system___fmtstr
16f18                 | LR__2213
16f18     A7 F0 03 F6 | 	mov	ptra, fp
16f1c     B2 00 A0 FD | 	call	#popregs_
16f20                 | __system___fmtfloat_ret
16f20     2D 00 64 FD | 	ret
16f24                 | 
16f24                 | __system__Left_S
16f24     04 4A 05 F6 | 	mov	COUNT_, #4
16f28     A8 00 A0 FD | 	call	#pushregs_
16f2c     09 1F 02 F6 | 	mov	local01, arg01
16f30     0A 21 02 F6 | 	mov	local02, arg02
16f34     01 20 56 F2 | 	cmps	local02, #1 wc
16f38     20 01 00 CF 
16f3c     EA FA 05 C6 |  if_b	mov	result1, ##@LR__4073
16f40     5C 00 90 CD |  if_b	jmp	#LR__2223
16f44     0F 13 02 F6 | 	mov	arg01, local01
16f48     09 23 02 F6 | 	mov	local03, arg01
16f4c     97 06 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
16f50                 | LR__2220
16f50     11 FB C9 FA | 	rdbyte	result1, local03 wz
16f54     01 22 06 51 |  if_ne	add	local03, #1
16f58     F4 FF 9F 5D |  if_ne	jmp	#LR__2220
16f5c                 | LR__2221
16f5c     09 23 82 F1 | 	sub	local03, arg01
16f60     11 FB 01 F6 | 	mov	result1, local03
16f64     10 FB 59 F2 | 	cmps	result1, local02 wcz
16f68     0F FB 01 E6 |  if_be	mov	result1, local01
16f6c     30 00 90 ED |  if_be	jmp	#LR__2223
16f70     10 13 02 F6 | 	mov	arg01, local02
16f74     02 12 06 F1 | 	add	arg01, #2
16f78     00 1A B0 FD | 	call	#__system___gc_alloc_managed
16f7c     FD 24 0A F6 | 	mov	local04, result1 wz
16f80     18 00 90 AD |  if_e	jmp	#LR__2222
16f84     12 13 02 F6 | 	mov	arg01, local04
16f88     0F 15 02 F6 | 	mov	arg02, local01
16f8c     10 17 02 F6 | 	mov	arg03, local02
16f90     A0 DE BF FD | 	call	#__system____builtin_memmove
16f94     12 21 02 F1 | 	add	local02, local04
16f98     10 01 48 FC | 	wrbyte	#0, local02
16f9c                 | LR__2222
16f9c     12 FB 01 F6 | 	mov	result1, local04
16fa0                 | LR__2223
16fa0     A7 F0 03 F6 | 	mov	ptra, fp
16fa4     B2 00 A0 FD | 	call	#popregs_
16fa8                 | __system__Left_S_ret
16fa8     2D 00 64 FD | 	ret
16fac                 | 
16fac                 | __system__Right_S
16fac     05 4A 05 F6 | 	mov	COUNT_, #5
16fb0     A8 00 A0 FD | 	call	#pushregs_
16fb4     09 1F 02 F6 | 	mov	local01, arg01
16fb8     0A 21 02 F6 | 	mov	local02, arg02
16fbc     01 20 56 F2 | 	cmps	local02, #1 wc
16fc0     20 01 00 CF 
16fc4     EB FA 05 C6 |  if_b	mov	result1, ##@LR__4074
16fc8     64 00 90 CD |  if_b	jmp	#LR__2233
16fcc     0F 13 02 F6 | 	mov	arg01, local01
16fd0     09 23 02 F6 | 	mov	local03, arg01
16fd4     97 06 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
16fd8                 | LR__2230
16fd8     11 FB C9 FA | 	rdbyte	result1, local03 wz
16fdc     01 22 06 51 |  if_ne	add	local03, #1
16fe0     F4 FF 9F 5D |  if_ne	jmp	#LR__2230
16fe4                 | LR__2231
16fe4     09 23 82 F1 | 	sub	local03, arg01
16fe8     11 FB 01 F6 | 	mov	result1, local03
16fec     FD 24 02 F6 | 	mov	local04, result1
16ff0     10 25 5A F2 | 	cmps	local04, local02 wcz
16ff4     0F FB 01 E6 |  if_be	mov	result1, local01
16ff8     34 00 90 ED |  if_be	jmp	#LR__2233
16ffc     10 13 02 F6 | 	mov	arg01, local02
17000     02 12 06 F1 | 	add	arg01, #2
17004     74 19 B0 FD | 	call	#__system___gc_alloc_managed
17008     FD 26 0A F6 | 	mov	local05, result1 wz
1700c     1C 00 90 AD |  if_e	jmp	#LR__2232
17010     10 25 82 F1 | 	sub	local04, local02
17014     0F 25 02 F1 | 	add	local04, local01
17018     01 20 06 F1 | 	add	local02, #1
1701c     13 13 02 F6 | 	mov	arg01, local05
17020     12 15 02 F6 | 	mov	arg02, local04
17024     10 17 02 F6 | 	mov	arg03, local02
17028     08 DE BF FD | 	call	#__system____builtin_memmove
1702c                 | LR__2232
1702c     13 FB 01 F6 | 	mov	result1, local05
17030                 | LR__2233
17030     A7 F0 03 F6 | 	mov	ptra, fp
17034     B2 00 A0 FD | 	call	#popregs_
17038                 | __system__Right_S_ret
17038     2D 00 64 FD | 	ret
1703c                 | 
1703c                 | __system__Mid_S
1703c     05 4A 05 F6 | 	mov	COUNT_, #5
17040     A8 00 A0 FD | 	call	#pushregs_
17044     09 1F 02 F6 | 	mov	local01, arg01
17048     0A 21 02 F6 | 	mov	local02, arg02
1704c     01 16 56 F2 | 	cmps	arg03, #1 wc
17050     20 01 00 CF 
17054     EC FA 05 C6 |  if_b	mov	result1, ##@LR__4075
17058     80 00 90 CD |  if_b	jmp	#LR__2243
1705c     01 20 86 F1 | 	sub	local02, #1
17060     00 20 56 F3 | 	fges	local02, #0 wc
17064     0F 13 02 F6 | 	mov	arg01, local01
17068     09 23 02 F6 | 	mov	local03, arg01
1706c     97 06 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
17070                 | LR__2240
17070     11 FB C9 FA | 	rdbyte	result1, local03 wz
17074     01 22 06 51 |  if_ne	add	local03, #1
17078     F4 FF 9F 5D |  if_ne	jmp	#LR__2240
1707c                 | LR__2241
1707c     09 23 82 F1 | 	sub	local03, arg01
17080     11 FB 01 F6 | 	mov	result1, local03
17084     FD 14 02 F6 | 	mov	arg02, result1
17088     10 15 52 F2 | 	cmps	arg02, local02 wc
1708c     20 01 00 CF 
17090     ED FA 05 C6 |  if_b	mov	result1, ##@LR__4076
17094     44 00 90 CD |  if_b	jmp	#LR__2243
17098     0A 25 02 F6 | 	mov	local04, arg02
1709c     10 25 82 F1 | 	sub	local04, local02
170a0     0B 25 5A F2 | 	cmps	local04, arg03 wcz
170a4     0B 25 02 16 |  if_a	mov	local04, arg03
170a8     12 13 02 F6 | 	mov	arg01, local04
170ac     02 12 06 F1 | 	add	arg01, #2
170b0     C8 18 B0 FD | 	call	#__system___gc_alloc_managed
170b4     FD 26 0A F6 | 	mov	local05, result1 wz
170b8     1C 00 90 AD |  if_e	jmp	#LR__2242
170bc     0F 21 02 F1 | 	add	local02, local01
170c0     13 13 02 F6 | 	mov	arg01, local05
170c4     10 15 02 F6 | 	mov	arg02, local02
170c8     12 17 02 F6 | 	mov	arg03, local04
170cc     64 DD BF FD | 	call	#__system____builtin_memmove
170d0     13 25 02 F1 | 	add	local04, local05
170d4     12 01 48 FC | 	wrbyte	#0, local04
170d8                 | LR__2242
170d8     13 FB 01 F6 | 	mov	result1, local05
170dc                 | LR__2243
170dc     A7 F0 03 F6 | 	mov	ptra, fp
170e0     B2 00 A0 FD | 	call	#popregs_
170e4                 | __system__Mid_S_ret
170e4     2D 00 64 FD | 	ret
170e8                 | 
170e8                 | __system__Chr_S
170e8     01 4A 05 F6 | 	mov	COUNT_, #1
170ec     A8 00 A0 FD | 	call	#pushregs_
170f0     09 1F 02 F6 | 	mov	local01, arg01
170f4     03 12 06 F6 | 	mov	arg01, #3
170f8     80 18 B0 FD | 	call	#__system___gc_alloc_managed
170fc     00 FA 4D F2 | 	cmps	result1, #0 wz
17100     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
17104     01 FA 05 51 |  if_ne	add	result1, #1
17108     FD 00 48 5C |  if_ne	wrbyte	#0, result1
1710c     01 FA 85 51 |  if_ne	sub	result1, #1
17110     A7 F0 03 F6 | 	mov	ptra, fp
17114     B2 00 A0 FD | 	call	#popregs_
17118                 | __system__Chr_S_ret
17118     2D 00 64 FD | 	ret
1711c                 | 
1711c                 | __system__Number_S
1711c     08 4A 05 F6 | 	mov	COUNT_, #8
17120     A8 00 A0 FD | 	call	#pushregs_
17124     09 1F 02 F6 | 	mov	local01, arg01
17128     0A 21 0A F6 | 	mov	local02, arg02 wz
1712c     0B 23 02 F6 | 	mov	local03, arg03
17130     3C 00 90 5D |  if_ne	jmp	#LR__2252
17134     01 20 06 F6 | 	mov	local02, #1
17138     11 25 02 F6 | 	mov	local04, local03
1713c     01 26 06 F6 | 	mov	local05, #1
17140     97 16 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
17144                 | LR__2250
17144     00 28 06 F6 | 	mov	local06, #0
17148     0F 25 1A F2 | 	cmp	local04, local01 wcz
1714c     01 28 66 E6 |  if_be	neg	local06, #1
17150     12 27 12 F2 | 	cmp	local05, local04 wc
17154     15 2B A2 F1 | 	subx	local07, local07
17158     15 29 CA F7 | 	test	local06, local07 wz
1715c     11 25 02 5D |  if_ne	qmul	local04, local03
17160     12 27 02 56 |  if_ne	mov	local05, local04
17164     01 20 06 51 |  if_ne	add	local02, #1
17168     18 24 62 5D |  if_ne	getqx	local04
1716c     D4 FF 9F 5D |  if_ne	jmp	#LR__2250
17170                 | LR__2251
17170                 | LR__2252
17170     20 20 36 F3 | 	fle	local02, #32 wc
17174     10 13 02 F6 | 	mov	arg01, local02
17178     02 12 06 F1 | 	add	arg01, #2
1717c     FC 17 B0 FD | 	call	#__system___gc_alloc_managed
17180     FD 28 02 F6 | 	mov	local06, result1
17184     10 2B 02 F6 | 	mov	local07, local02
17188     14 2B 02 F1 | 	add	local07, local06
1718c     15 01 48 FC | 	wrbyte	#0, local07
17190     97 1A 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
17194                 | LR__2253
17194     01 20 16 F2 | 	cmp	local02, #1 wc
17198     2C 00 90 CD |  if_b	jmp	#LR__2255
1719c     11 1F 12 FD | 	qdiv	local01, local03
171a0     01 20 86 F1 | 	sub	local02, #1
171a4     10 2B 02 F6 | 	mov	local07, local02
171a8     14 2B 02 F1 | 	add	local07, local06
171ac     19 2C 62 FD | 	getqy	local08
171b0     0A 2C 16 F2 | 	cmp	local08, #10 wc
171b4     30 2C 06 C1 |  if_b	add	local08, #48
171b8     37 2C 06 31 |  if_ae	add	local08, #55
171bc     15 2D 42 FC | 	wrbyte	local08, local07
171c0     18 1E 62 FD | 	getqx	local01
171c4     CC FF 9F FD | 	jmp	#LR__2253
171c8                 | LR__2254
171c8                 | LR__2255
171c8     14 FB 01 F6 | 	mov	result1, local06
171cc     A7 F0 03 F6 | 	mov	ptra, fp
171d0     B2 00 A0 FD | 	call	#popregs_
171d4                 | __system__Number_S_ret
171d4     2D 00 64 FD | 	ret
171d8                 | 
171d8                 | __system__LCase_S
171d8     07 4A 05 F6 | 	mov	COUNT_, #7
171dc     A8 00 A0 FD | 	call	#pushregs_
171e0     09 1F 02 F6 | 	mov	local01, arg01
171e4     09 21 02 F6 | 	mov	local02, arg01
171e8     97 06 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
171ec                 | LR__2260
171ec     10 FB C9 FA | 	rdbyte	result1, local02 wz
171f0     01 20 06 51 |  if_ne	add	local02, #1
171f4     F4 FF 9F 5D |  if_ne	jmp	#LR__2260
171f8                 | LR__2261
171f8     09 21 82 F1 | 	sub	local02, arg01
171fc     10 FB 01 F6 | 	mov	result1, local02
17200     FD 20 0A F6 | 	mov	local02, result1 wz
17204     20 01 00 AF 
17208     EE FA 05 A6 |  if_e	mov	result1, ##@LR__4077
1720c     7C 00 90 AD |  if_e	jmp	#LR__2267
17210     10 13 02 F6 | 	mov	arg01, local02
17214     02 12 06 F1 | 	add	arg01, #2
17218     60 17 B0 FD | 	call	#__system___gc_alloc_managed
1721c     FD 22 0A F6 | 	mov	local03, result1 wz
17220     64 00 90 AD |  if_e	jmp	#LR__2266
17224     01 24 66 F6 | 	neg	local04, #1
17228     97 26 48 FB | 	callpa	#(@LR__2265-@LR__2262)>>2,fcache_load_ptr_
1722c                 | LR__2262
1722c     01 24 06 F1 | 	add	local04, #1
17230     12 27 02 F6 | 	mov	local05, local04
17234     0F 27 02 F1 | 	add	local05, local01
17238     13 29 C2 FA | 	rdbyte	local06, local05
1723c     41 28 56 F2 | 	cmps	local06, #65 wc
17240     18 00 90 CD |  if_b	jmp	#LR__2263
17244     5B 28 56 F2 | 	cmps	local06, #91 wc
17248     12 2B 02 C6 |  if_b	mov	local07, local04
1724c     11 2B 02 C1 |  if_b	add	local07, local03
17250     20 28 06 C1 |  if_b	add	local06, #32
17254     15 29 42 CC |  if_b	wrbyte	local06, local07
17258     0C 00 90 CD |  if_b	jmp	#LR__2264
1725c                 | LR__2263
1725c     12 2B 02 F6 | 	mov	local07, local04
17260     11 2B 02 F1 | 	add	local07, local03
17264     15 29 42 FC | 	wrbyte	local06, local07
17268                 | LR__2264
17268     10 29 02 F6 | 	mov	local06, local02
1726c     01 28 86 F1 | 	sub	local06, #1
17270     14 25 0A F2 | 	cmp	local04, local06 wz
17274     B4 FF 9F 5D |  if_ne	jmp	#LR__2262
17278                 | LR__2265
17278     11 21 02 F1 | 	add	local02, local03
1727c     10 01 48 FC | 	wrbyte	#0, local02
17280     11 FB 01 F6 | 	mov	result1, local03
17284     04 00 90 FD | 	jmp	#LR__2267
17288                 | LR__2266
17288     11 FB 01 F6 | 	mov	result1, local03
1728c                 | LR__2267
1728c     A7 F0 03 F6 | 	mov	ptra, fp
17290     B2 00 A0 FD | 	call	#popregs_
17294                 | __system__LCase_S_ret
17294     2D 00 64 FD | 	ret
17298                 | 
17298                 | __system__LTrim_S
17298     05 4A 05 F6 | 	mov	COUNT_, #5
1729c     A8 00 A0 FD | 	call	#pushregs_
172a0     09 1F 02 F6 | 	mov	local01, arg01
172a4     09 21 02 F6 | 	mov	local02, arg01
172a8     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
172ac                 | LR__2270
172ac     10 FB C9 FA | 	rdbyte	result1, local02 wz
172b0     01 20 06 51 |  if_ne	add	local02, #1
172b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
172b8                 | LR__2271
172b8     09 21 82 F1 | 	sub	local02, arg01
172bc     10 FB 01 F6 | 	mov	result1, local02
172c0     FD 20 0A F6 | 	mov	local02, result1 wz
172c4     20 01 00 AF 
172c8     EF FA 05 A6 |  if_e	mov	result1, ##@LR__4078
172cc     7C 00 90 AD |  if_e	jmp	#LR__2276
172d0     00 22 06 F6 | 	mov	local03, #0
172d4     10 25 02 F6 | 	mov	local04, local02
172d8                 | LR__2272
172d8     12 23 52 F2 | 	cmps	local03, local04 wc
172dc     68 00 90 3D |  if_ae	jmp	#LR__2275
172e0     11 17 02 F6 | 	mov	arg03, local03
172e4     0F 17 02 F1 | 	add	arg03, local01
172e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
172ec     20 16 0E F2 | 	cmp	arg03, #32 wz
172f0     4C 00 90 AD |  if_e	jmp	#LR__2274
172f4     10 13 02 F6 | 	mov	arg01, local02
172f8     11 13 82 F1 | 	sub	arg01, local03
172fc     02 12 06 F1 | 	add	arg01, #2
17300     78 16 B0 FD | 	call	#__system___gc_alloc_managed
17304     FD 26 0A F6 | 	mov	local05, result1 wz
17308     2C 00 90 AD |  if_e	jmp	#LR__2273
1730c     11 15 02 F6 | 	mov	arg02, local03
17310     0F 15 02 F1 | 	add	arg02, local01
17314     10 17 02 F6 | 	mov	arg03, local02
17318     11 17 82 F1 | 	sub	arg03, local03
1731c     13 13 02 F6 | 	mov	arg01, local05
17320     10 DB BF FD | 	call	#__system____builtin_memmove
17324     11 21 82 F1 | 	sub	local02, local03
17328     13 21 02 F1 | 	add	local02, local05
1732c     10 01 48 FC | 	wrbyte	#0, local02
17330     13 FB 01 F6 | 	mov	result1, local05
17334     14 00 90 FD | 	jmp	#LR__2276
17338                 | LR__2273
17338     13 FB 01 F6 | 	mov	result1, local05
1733c     0C 00 90 FD | 	jmp	#LR__2276
17340                 | LR__2274
17340     01 22 06 F1 | 	add	local03, #1
17344     90 FF 9F FD | 	jmp	#LR__2272
17348                 | LR__2275
17348     0F FB 01 F6 | 	mov	result1, local01
1734c                 | LR__2276
1734c     A7 F0 03 F6 | 	mov	ptra, fp
17350     B2 00 A0 FD | 	call	#popregs_
17354                 | __system__LTrim_S_ret
17354     2D 00 64 FD | 	ret
17358                 | 
17358                 | __system__RTrim_S
17358     04 4A 05 F6 | 	mov	COUNT_, #4
1735c     A8 00 A0 FD | 	call	#pushregs_
17360     09 1F 02 F6 | 	mov	local01, arg01
17364     09 21 02 F6 | 	mov	local02, arg01
17368     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
1736c                 | LR__2280
1736c     10 FB C9 FA | 	rdbyte	result1, local02 wz
17370     01 20 06 51 |  if_ne	add	local02, #1
17374     F4 FF 9F 5D |  if_ne	jmp	#LR__2280
17378                 | LR__2281
17378     09 21 82 F1 | 	sub	local02, arg01
1737c     10 FB 01 F6 | 	mov	result1, local02
17380     FD 20 0A F6 | 	mov	local02, result1 wz
17384     20 01 00 AF 
17388     F0 FA 05 A6 |  if_e	mov	result1, ##@LR__4079
1738c     74 00 90 AD |  if_e	jmp	#LR__2285
17390     10 23 02 F6 | 	mov	local03, local02
17394     01 22 86 F1 | 	sub	local03, #1
17398                 | LR__2282
17398     11 15 02 F6 | 	mov	arg02, local03
1739c     0F 15 02 F1 | 	add	arg02, local01
173a0     0A 21 C2 FA | 	rdbyte	local02, arg02
173a4     20 20 0E F2 | 	cmp	local02, #32 wz
173a8     44 00 90 AD |  if_e	jmp	#LR__2284
173ac     11 13 02 F6 | 	mov	arg01, local03
173b0     02 12 06 F1 | 	add	arg01, #2
173b4     C4 15 B0 FD | 	call	#__system___gc_alloc_managed
173b8     FD 24 0A F6 | 	mov	local04, result1 wz
173bc     28 00 90 AD |  if_e	jmp	#LR__2283
173c0     11 17 02 F6 | 	mov	arg03, local03
173c4     01 16 06 F1 | 	add	arg03, #1
173c8     12 13 02 F6 | 	mov	arg01, local04
173cc     0F 15 02 F6 | 	mov	arg02, local01
173d0     60 DA BF FD | 	call	#__system____builtin_memmove
173d4     01 22 06 F1 | 	add	local03, #1
173d8     12 23 02 F1 | 	add	local03, local04
173dc     11 01 48 FC | 	wrbyte	#0, local03
173e0     12 FB 01 F6 | 	mov	result1, local04
173e4     1C 00 90 FD | 	jmp	#LR__2285
173e8                 | LR__2283
173e8     12 FB 01 F6 | 	mov	result1, local04
173ec     14 00 90 FD | 	jmp	#LR__2285
173f0                 | LR__2284
173f0     01 22 86 F1 | 	sub	local03, #1
173f4     00 22 56 F2 | 	cmps	local03, #0 wc
173f8     9C FF 9F 3D |  if_ae	jmp	#LR__2282
173fc     20 01 00 FF 
17400     F1 FA 05 F6 | 	mov	result1, ##@LR__4080
17404                 | LR__2285
17404     A7 F0 03 F6 | 	mov	ptra, fp
17408     B2 00 A0 FD | 	call	#popregs_
1740c                 | __system__RTrim_S_ret
1740c     2D 00 64 FD | 	ret
17410                 | 
17410                 | __system__Instr
17410     07 4A 05 F6 | 	mov	COUNT_, #7
17414     A8 00 A0 FD | 	call	#pushregs_
17418     09 1F 02 F6 | 	mov	local01, arg01
1741c     0A 21 02 F6 | 	mov	local02, arg02
17420     0B 23 02 F6 | 	mov	local03, arg03
17424     11 13 02 F6 | 	mov	arg01, local03
17428     09 25 02 F6 | 	mov	local04, arg01
1742c     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
17430                 | LR__2290
17430     12 FB C9 FA | 	rdbyte	result1, local04 wz
17434     01 24 06 51 |  if_ne	add	local04, #1
17438     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
1743c                 | LR__2291
1743c     09 25 82 F1 | 	sub	local04, arg01
17440     12 27 02 F6 | 	mov	local05, local04
17444     10 13 02 F6 | 	mov	arg01, local02
17448     09 25 02 F6 | 	mov	local04, arg01
1744c     97 06 48 FB | 	callpa	#(@LR__2293-@LR__2292)>>2,fcache_load_ptr_
17450                 | LR__2292
17450     12 FB C9 FA | 	rdbyte	result1, local04 wz
17454     01 24 06 51 |  if_ne	add	local04, #1
17458     F4 FF 9F 5D |  if_ne	jmp	#LR__2292
1745c                 | LR__2293
1745c     09 25 82 F1 | 	sub	local04, arg01
17460     12 FB 01 F6 | 	mov	result1, local04
17464     FD 18 0A F6 | 	mov	arg04, result1 wz
17468     00 FA 05 A6 |  if_e	mov	result1, #0
1746c     98 00 90 AD |  if_e	jmp	#LR__2297
17470     00 26 0E F2 | 	cmp	local05, #0 wz
17474     00 FA 05 A6 |  if_e	mov	result1, #0
17478     8C 00 90 AD |  if_e	jmp	#LR__2297
1747c     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
17480     00 FA 05 16 |  if_a	mov	result1, #0
17484     80 00 90 1D |  if_a	jmp	#LR__2297
17488     01 1E 56 F2 | 	cmps	local01, #1 wc
1748c     01 1E 06 C6 |  if_b	mov	local01, #1
17490     11 29 C2 FA | 	rdbyte	local06, local03
17494     01 26 0E F2 | 	cmp	local05, #1 wz
17498     18 00 90 5D |  if_ne	jmp	#LR__2294
1749c     10 13 02 F6 | 	mov	arg01, local02
174a0     14 15 02 F6 | 	mov	arg02, local06
174a4     0F 17 02 F6 | 	mov	arg03, local01
174a8     00 18 06 F6 | 	mov	arg04, #0
174ac     68 30 B0 FD | 	call	#__system____ScanForChar
174b0     54 00 90 FD | 	jmp	#LR__2297
174b4                 | LR__2294
174b4     0F 2B 02 F6 | 	mov	local07, local01
174b8                 | LR__2295
174b8     10 13 02 F6 | 	mov	arg01, local02
174bc     14 15 02 F6 | 	mov	arg02, local06
174c0     15 17 02 F6 | 	mov	arg03, local07
174c4     00 18 06 F6 | 	mov	arg04, #0
174c8     4C 30 B0 FD | 	call	#__system____ScanForChar
174cc     FD 2A 0A F6 | 	mov	local07, result1 wz
174d0     30 00 90 AD |  if_e	jmp	#LR__2296
174d4     13 17 02 F6 | 	mov	arg03, local05
174d8     10 13 02 F6 | 	mov	arg01, local02
174dc     15 15 02 F6 | 	mov	arg02, local07
174e0     58 FB BF FD | 	call	#__system__Mid_S
174e4     FD 12 02 F6 | 	mov	arg01, result1
174e8     11 15 02 F6 | 	mov	arg02, local03
174ec     4C DA BF FD | 	call	#__system___string_cmp
174f0     00 FA 0D F2 | 	cmp	result1, #0 wz
174f4     15 FB 01 A6 |  if_e	mov	result1, local07
174f8     0C 00 90 AD |  if_e	jmp	#LR__2297
174fc     13 2B 02 F1 | 	add	local07, local05
17500     B4 FF 9F FD | 	jmp	#LR__2295
17504                 | LR__2296
17504     00 FA 05 F6 | 	mov	result1, #0
17508                 | LR__2297
17508     A7 F0 03 F6 | 	mov	ptra, fp
1750c     B2 00 A0 FD | 	call	#popregs_
17510                 | __system__Instr_ret
17510     2D 00 64 FD | 	ret
17514                 | 
17514                 | __system___strerror
17514     00 12 56 F2 | 	cmps	arg01, #0 wc
17518     08 00 90 CD |  if_b	jmp	#LR__2300
1751c     1A 12 56 F2 | 	cmps	arg01, #26 wc
17520     04 00 90 CD |  if_b	jmp	#LR__2301
17524                 | LR__2300
17524     19 12 06 F6 | 	mov	arg01, #25
17528                 | LR__2301
17528     02 12 66 F0 | 	shl	arg01, #2
1752c     01 00 00 FF 
17530     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
17534     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
17538     09 FB 01 FB | 	rdlong	result1, arg01
1753c     01 00 00 FF 
17540     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
17544                 | __system___strerror_ret
17544     2D 00 64 FD | 	ret
17548                 | 
17548                 | __system___int64_shl
17548     20 16 CE F7 | 	test	arg03, #32 wz
1754c     09 15 02 56 |  if_ne	mov	arg02, arg01
17550     00 12 06 56 |  if_ne	mov	arg01, #0
17554     1F 16 CE F7 | 	test	arg03, #31 wz
17558     18 00 90 AD |  if_e	jmp	#LR__2310
1755c     0B 15 62 F0 | 	shl	arg02, arg03
17560     09 FB 01 F6 | 	mov	result1, arg01
17564     0B FD 61 F6 | 	neg	result2, arg03
17568     FE FA 41 F0 | 	shr	result1, result2
1756c     FD 14 42 F5 | 	or	arg02, result1
17570     0B 13 62 F0 | 	shl	arg01, arg03
17574                 | LR__2310
17574     0A FD 01 F6 | 	mov	result2, arg02
17578     09 FB 01 F6 | 	mov	result1, arg01
1757c                 | __system___int64_shl_ret
1757c     2D 00 64 FD | 	ret
17580                 | 
17580                 | __system___usepins
17580     14 E8 05 F1 | 	add	ptr___system__dat__, #20
17584     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
17588     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1758c     00 13 CA F7 | 	test	arg01, _var01 wz
17590     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
17594     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
17598     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1759c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
175a0     00 FA 05 56 |  if_ne	mov	result1, #0
175a4     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
175a8     14 E8 05 F1 | 	add	ptr___system__dat__, #20
175ac     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
175b0     09 03 42 F5 | 	or	_var02, arg01
175b4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
175b8     04 E8 05 F1 | 	add	ptr___system__dat__, #4
175bc     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
175c0     0A 03 42 F5 | 	or	_var02, arg02
175c4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
175c8     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
175cc     01 FA 65 F6 | 	neg	result1, #1
175d0                 | __system___usepins_ret
175d0     2D 00 64 FD | 	ret
175d4                 | 
175d4                 | __system___freepins
175d4     14 E8 05 F1 | 	add	ptr___system__dat__, #20
175d8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
175dc     09 01 22 F5 | 	andn	_var01, arg01
175e0     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
175e4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
175e8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
175ec     0A 01 22 F5 | 	andn	_var01, arg02
175f0     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
175f4     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
175f8                 | __system___freepins_ret
175f8     2D 00 64 FD | 	ret
175fc                 | 
175fc                 | __system___float_fromuns
175fc     09 17 0A F6 | 	mov	arg03, arg01 wz
17600     0B FB 01 A6 |  if_e	mov	result1, arg03
17604     24 00 90 AD |  if_e	jmp	#LR__2320
17608     0B 15 92 F7 | 	encod	arg02, arg03 wc
1760c     01 14 06 C1 |  if_b	add	arg02, #1
17610     01 14 86 F1 | 	sub	arg02, #1
17614     1F 12 06 F6 | 	mov	arg01, #31
17618     0A 13 82 F1 | 	sub	arg01, arg02
1761c     09 17 62 F0 | 	shl	arg03, arg01
17620     02 16 46 F0 | 	shr	arg03, #2
17624     00 12 06 F6 | 	mov	arg01, #0
17628     74 08 B0 FD | 	call	#__system___float_Pack
1762c                 | LR__2320
1762c                 | __system___float_fromuns_ret
1762c     2D 00 64 FD | 	ret
17630                 | 
17630                 | __system___float_add
17630     0F 4A 05 F6 | 	mov	COUNT_, #15
17634     A8 00 A0 FD | 	call	#pushregs_
17638     09 1F 02 F6 | 	mov	local01, arg01
1763c     0A 21 02 F6 | 	mov	local02, arg02
17640     00 22 06 F6 | 	mov	local03, #0
17644     0F 25 02 F6 | 	mov	local04, local01
17648     12 27 02 F6 | 	mov	local05, local04
1764c     16 26 46 F7 | 	zerox	local05, #22
17650     12 29 02 F6 | 	mov	local06, local04
17654     01 28 66 F0 | 	shl	local06, #1
17658     18 28 46 F0 | 	shr	local06, #24
1765c     1F 24 46 F0 | 	shr	local04, #31
17660     10 13 02 F6 | 	mov	arg01, local02
17664     09 FB 01 F6 | 	mov	result1, arg01
17668     FD 2A 02 F6 | 	mov	local07, result1
1766c     15 2D 02 F6 | 	mov	local08, local07
17670     16 2C 46 F7 | 	zerox	local08, #22
17674     15 2F 02 F6 | 	mov	local09, local07
17678     01 2E 66 F0 | 	shl	local09, #1
1767c     18 2E 46 F0 | 	shr	local09, #24
17680     17 31 02 F6 | 	mov	local10, local09
17684     1F 2A 46 F0 | 	shr	local07, #31
17688     00 32 06 F6 | 	mov	local11, #0
1768c     00 34 06 F6 | 	mov	local12, #0
17690     18 29 12 F2 | 	cmp	local06, local10 wc
17694     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
17698     2C 00 90 1D |  if_a	jmp	#LR__2330
1769c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
176a0     24 00 90 3D |  if_ae	jmp	#LR__2330
176a4     13 37 02 F6 | 	mov	local13, local05
176a8     16 27 02 F6 | 	mov	local05, local08
176ac     1B 2D 02 F6 | 	mov	local08, local13
176b0     14 37 02 F6 | 	mov	local13, local06
176b4     18 29 02 F6 | 	mov	local06, local10
176b8     1B 31 02 F6 | 	mov	local10, local13
176bc     12 37 02 F6 | 	mov	local13, local04
176c0     15 25 02 F6 | 	mov	local04, local07
176c4     1B 2B 02 F6 | 	mov	local07, local13
176c8                 | LR__2330
176c8     FF 28 0E F2 | 	cmp	local06, #255 wz
176cc     70 01 90 AD |  if_e	jmp	#LR__2345
176d0     00 28 0E F2 | 	cmp	local06, #0 wz
176d4     AC 01 90 AD |  if_e	jmp	#LR__2347
176d8     17 26 26 F4 | 	bith	local05, #23
176dc                 | LR__2331
176dc     00 30 0E F2 | 	cmp	local10, #0 wz
176e0     F0 01 90 AD |  if_e	jmp	#LR__2351
176e4     17 2C 26 F4 | 	bith	local08, #23
176e8                 | LR__2332
176e8     7F 28 86 F1 | 	sub	local06, #127
176ec     7F 30 86 F1 | 	sub	local10, #127
176f0     14 39 02 F6 | 	mov	local14, local06
176f4     18 39 82 F1 | 	sub	local14, local10
176f8     97 14 48 FB | 	callpa	#(@LR__2334-@LR__2333)>>2,fcache_load_ptr_
176fc                 | LR__2333
176fc     20 38 56 F2 | 	cmps	local14, #32 wc
17700     20 00 90 CD |  if_b	jmp	#LR__2335
17704     16 2F 02 F6 | 	mov	local09, local08
17708     00 32 0E F2 | 	cmp	local11, #0 wz
1770c     6F 32 62 FD | 	wrnz	local11
17710     19 2F 42 F5 | 	or	local09, local11
17714     17 33 02 F6 | 	mov	local11, local09
17718     00 2C 06 F6 | 	mov	local08, #0
1771c     20 38 86 F1 | 	sub	local14, #32
17720     D8 FF 9F FD | 	jmp	#LR__2333
17724                 | LR__2334
17724                 | LR__2335
17724     00 38 0E F2 | 	cmp	local14, #0 wz
17728     38 00 90 AD |  if_e	jmp	#LR__2336
1772c     16 37 02 F6 | 	mov	local13, local08
17730     20 30 06 F6 | 	mov	local10, #32
17734     1C 31 82 F1 | 	sub	local10, local14
17738     18 37 62 F0 | 	shl	local13, local10
1773c     19 31 02 F6 | 	mov	local10, local11
17740     20 2E 06 F6 | 	mov	local09, #32
17744     1C 2F 82 F1 | 	sub	local09, local14
17748     17 31 6A F0 | 	shl	local10, local09 wz
1774c     1C 33 42 F0 | 	shr	local11, local14
17750     1C 2D 42 F0 | 	shr	local08, local14
17754     1B 33 42 F5 | 	or	local11, local13
17758     00 3A 06 F6 | 	mov	local15, #0
1775c     01 3A 06 56 |  if_ne	mov	local15, #1
17760     1D 33 42 F5 | 	or	local11, local15
17764                 | LR__2336
17764     12 3B 02 F6 | 	mov	local15, local04
17768     15 3B 62 F5 | 	xor	local15, local07
1776c     01 3A CE F7 | 	test	local15, #1 wz
17770     18 00 90 AD |  if_e	jmp	#LR__2337
17774     16 2D 22 F6 | 	not	local08, local08
17778     19 33 22 F6 | 	not	local11, local11
1777c     01 32 0E F1 | 	add	local11, #1 wz
17780     00 3A 06 F6 | 	mov	local15, #0
17784     01 3A 06 A6 |  if_e	mov	local15, #1
17788     1D 2D 02 F1 | 	add	local08, local15
1778c                 | LR__2337
1778c     19 35 12 F1 | 	add	local12, local11 wc
17790     16 27 22 F1 | 	addx	local05, local08
17794     00 26 56 F2 | 	cmps	local05, #0 wc
17798     1C 00 90 3D |  if_ae	jmp	#LR__2338
1779c     01 24 66 F5 | 	xor	local04, #1
177a0     13 27 22 F6 | 	not	local05, local05
177a4     1A 35 22 F6 | 	not	local12, local12
177a8     01 34 0E F1 | 	add	local12, #1 wz
177ac     00 3A 06 F6 | 	mov	local15, #0
177b0     01 3A 06 A6 |  if_e	mov	local15, #1
177b4     1D 27 02 F1 | 	add	local05, local15
177b8                 | LR__2338
177b8     00 80 00 FF 
177bc     00 26 16 F2 | 	cmp	local05, ##16777216 wc
177c0     28 00 90 CD |  if_b	jmp	#LR__2339
177c4     01 28 06 F1 | 	add	local06, #1
177c8     1A 39 02 F6 | 	mov	local14, local12
177cc     01 38 06 F5 | 	and	local14, #1
177d0     01 34 46 F0 | 	shr	local12, #1
177d4     13 3B 02 F6 | 	mov	local15, local05
177d8     1F 3A 66 F0 | 	shl	local15, #31
177dc     1D 35 42 F5 | 	or	local12, local15
177e0     1C 35 42 F5 | 	or	local12, local14
177e4     01 26 46 F0 | 	shr	local05, #1
177e8     3C 00 90 FD | 	jmp	#LR__2344
177ec                 | LR__2339
177ec     00 40 00 FF 
177f0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
177f4     30 00 90 3D |  if_ae	jmp	#LR__2343
177f8     00 26 0E F2 | 	cmp	local05, #0 wz
177fc     00 34 0E A2 |  if_e	cmp	local12, #0 wz
17800     08 24 46 A5 |  if_e	or	local04, #8
17804     01 24 26 A5 |  if_e	andn	local04, #1
17808     1C 00 90 AD |  if_e	jmp	#LR__2342
1780c                 | LR__2340
1780c     00 40 00 FF 
17810     00 26 16 F2 | 	cmp	local05, ##8388608 wc
17814     10 00 90 3D |  if_ae	jmp	#LR__2341
17818     1A 35 12 F1 | 	add	local12, local12 wc
1781c     13 27 22 F1 | 	addx	local05, local05
17820     01 28 86 F1 | 	sub	local06, #1
17824     E4 FF 9F FD | 	jmp	#LR__2340
17828                 | LR__2341
17828                 | LR__2342
17828                 | LR__2343
17828                 | LR__2344
17828     13 13 02 F6 | 	mov	arg01, local05
1782c     1A 15 02 F6 | 	mov	arg02, local12
17830     14 17 02 F6 | 	mov	arg03, local06
17834     12 19 02 F6 | 	mov	arg04, local04
17838     20 31 B0 FD | 	call	#__system__pack_0416
1783c     DC 00 90 FD | 	jmp	#LR__2355
17840                 | LR__2345
17840     FF 30 0E F2 | 	cmp	local10, #255 wz
17844     10 00 90 5D |  if_ne	jmp	#LR__2346
17848     12 2B 0A F2 | 	cmp	local07, local04 wz
1784c     00 F8 3F 5F 
17850     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17854     C4 00 90 5D |  if_ne	jmp	#LR__2355
17858                 | LR__2346
17858     00 26 0E F2 | 	cmp	local05, #0 wz
1785c     00 F8 3F 5F 
17860     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
17864     B4 00 90 5D |  if_ne	jmp	#LR__2355
17868     1A 15 02 F6 | 	mov	arg02, local12
1786c     14 17 02 F6 | 	mov	arg03, local06
17870     12 19 02 F6 | 	mov	arg04, local04
17874     02 18 46 F5 | 	or	arg04, #2
17878     13 13 02 F6 | 	mov	arg01, local05
1787c     DC 30 B0 FD | 	call	#__system__pack_0416
17880     98 00 90 FD | 	jmp	#LR__2355
17884                 | LR__2347
17884     00 26 0E F2 | 	cmp	local05, #0 wz
17888     28 00 90 AD |  if_e	jmp	#LR__2350
1788c     01 26 66 F0 | 	shl	local05, #1
17890     97 0E 48 FB | 	callpa	#(@LR__2349-@LR__2348)>>2,fcache_load_ptr_
17894                 | LR__2348
17894     00 40 00 FF 
17898     00 26 16 F2 | 	cmp	local05, ##8388608 wc
1789c     14 3B 02 C6 |  if_b	mov	local15, local06
178a0     01 3A 86 C1 |  if_b	sub	local15, #1
178a4     1D 29 02 C6 |  if_b	mov	local06, local15
178a8     01 26 66 C0 |  if_b	shl	local05, #1
178ac     E4 FF 9F CD |  if_b	jmp	#LR__2348
178b0                 | LR__2349
178b0     28 FE 9F FD | 	jmp	#LR__2331
178b4                 | LR__2350
178b4     15 25 02 F5 | 	and	local04, local07
178b8     12 19 02 F6 | 	mov	arg04, local04
178bc     08 18 46 F5 | 	or	arg04, #8
178c0     00 12 06 F6 | 	mov	arg01, #0
178c4     00 14 06 F6 | 	mov	arg02, #0
178c8     00 16 06 F6 | 	mov	arg03, #0
178cc     8C 30 B0 FD | 	call	#__system__pack_0416
178d0     48 00 90 FD | 	jmp	#LR__2355
178d4                 | LR__2351
178d4     00 2C 0E F2 | 	cmp	local08, #0 wz
178d8     28 00 90 AD |  if_e	jmp	#LR__2354
178dc     01 2C 66 F0 | 	shl	local08, #1
178e0     97 0E 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
178e4                 | LR__2352
178e4     00 40 00 FF 
178e8     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
178ec     18 3B 02 C6 |  if_b	mov	local15, local10
178f0     01 3A 86 C1 |  if_b	sub	local15, #1
178f4     1D 31 02 C6 |  if_b	mov	local10, local15
178f8     01 2C 66 C0 |  if_b	shl	local08, #1
178fc     E4 FF 9F CD |  if_b	jmp	#LR__2352
17900                 | LR__2353
17900     E4 FD 9F FD | 	jmp	#LR__2332
17904                 | LR__2354
17904     7F 28 86 F1 | 	sub	local06, #127
17908     13 13 02 F6 | 	mov	arg01, local05
1790c     1A 15 02 F6 | 	mov	arg02, local12
17910     14 17 02 F6 | 	mov	arg03, local06
17914     12 19 02 F6 | 	mov	arg04, local04
17918     40 30 B0 FD | 	call	#__system__pack_0416
1791c                 | LR__2355
1791c     A7 F0 03 F6 | 	mov	ptra, fp
17920     B2 00 A0 FD | 	call	#popregs_
17924                 | __system___float_add_ret
17924     2D 00 64 FD | 	ret
17928                 | 
17928                 | __system___float_mul
17928     0B 4A 05 F6 | 	mov	COUNT_, #11
1792c     A8 00 A0 FD | 	call	#pushregs_
17930     09 1F 02 F6 | 	mov	local01, arg01
17934     0A 21 02 F6 | 	mov	local02, arg02
17938     0F 23 02 F6 | 	mov	local03, local01
1793c     11 25 02 F6 | 	mov	local04, local03
17940     16 24 46 F7 | 	zerox	local04, #22
17944     11 27 02 F6 | 	mov	local05, local03
17948     01 26 66 F0 | 	shl	local05, #1
1794c     18 26 46 F0 | 	shr	local05, #24
17950     1F 22 46 F0 | 	shr	local03, #31
17954     10 FB 01 F6 | 	mov	result1, local02
17958     FD 28 02 F6 | 	mov	local06, result1
1795c     14 2B 02 F6 | 	mov	local07, local06
17960     16 2A 46 F7 | 	zerox	local07, #22
17964     14 2D 02 F6 | 	mov	local08, local06
17968     01 2C 66 F0 | 	shl	local08, #1
1796c     18 2C 46 F0 | 	shr	local08, #24
17970     1F 28 46 F0 | 	shr	local06, #31
17974     14 23 62 F5 | 	xor	local03, local06
17978     FF 26 0E F2 | 	cmp	local05, #255 wz
1797c     90 00 90 AD |  if_e	jmp	#LR__2363
17980     FF 2C 0E F2 | 	cmp	local08, #255 wz
17984     D8 00 90 AD |  if_e	jmp	#LR__2365
17988     00 26 0E F2 | 	cmp	local05, #0 wz
1798c     0C 01 90 AD |  if_e	jmp	#LR__2366
17990     17 24 26 F4 | 	bith	local04, #23
17994                 | LR__2360
17994     00 2C 0E F2 | 	cmp	local08, #0 wz
17998     44 01 90 AD |  if_e	jmp	#LR__2370
1799c     17 2A 26 F4 | 	bith	local07, #23
179a0                 | LR__2361
179a0     12 21 02 F6 | 	mov	local02, local04
179a4     04 20 66 F0 | 	shl	local02, #4
179a8     15 29 02 F6 | 	mov	local06, local07
179ac     05 28 66 F0 | 	shl	local06, #5
179b0     14 21 02 FD | 	qmul	local02, local06
179b4     16 27 02 F1 | 	add	local05, local08
179b8     FE 26 86 F1 | 	sub	local05, #254
179bc     13 2F 02 F6 | 	mov	local09, local05
179c0     04 24 66 F0 | 	shl	local04, #4
179c4     05 2A 66 F0 | 	shl	local07, #5
179c8     18 30 62 FD | 	getqx	local10
179cc     15 25 02 FD | 	qmul	local04, local07
179d0     19 32 62 FD | 	getqy	local11
179d4     00 80 00 FF 
179d8     00 32 16 F2 | 	cmp	local11, ##16777216 wc
179dc     18 00 90 CD |  if_b	jmp	#LR__2362
179e0     01 2E 06 F1 | 	add	local09, #1
179e4     01 30 46 F0 | 	shr	local10, #1
179e8     19 2D 02 F6 | 	mov	local08, local11
179ec     1F 2C 66 F0 | 	shl	local08, #31
179f0     16 31 42 F5 | 	or	local10, local08
179f4     01 32 46 F0 | 	shr	local11, #1
179f8                 | LR__2362
179f8     19 13 02 F6 | 	mov	arg01, local11
179fc     18 15 02 F6 | 	mov	arg02, local10
17a00     17 17 02 F6 | 	mov	arg03, local09
17a04     11 19 02 F6 | 	mov	arg04, local03
17a08     50 2F B0 FD | 	call	#__system__pack_0416
17a0c     10 01 90 FD | 	jmp	#LR__2374
17a10                 | LR__2363
17a10     00 24 0E F2 | 	cmp	local04, #0 wz
17a14     0F FB 01 56 |  if_ne	mov	result1, local01
17a18     04 01 90 5D |  if_ne	jmp	#LR__2374
17a1c     FF 2C 56 F2 | 	cmps	local08, #255 wc
17a20     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
17a24     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
17a28     18 00 90 4D |  if_c_and_nz	jmp	#LR__2364
17a2c     00 F8 3F CF 
17a30     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
17a34     E8 00 90 CD |  if_b	jmp	#LR__2374
17a38     00 2A 0E F2 | 	cmp	local07, #0 wz
17a3c     10 FB 01 56 |  if_ne	mov	result1, local02
17a40     DC 00 90 5D |  if_ne	jmp	#LR__2374
17a44                 | LR__2364
17a44     02 22 46 F5 | 	or	local03, #2
17a48     00 12 06 F6 | 	mov	arg01, #0
17a4c     00 14 06 F6 | 	mov	arg02, #0
17a50     13 17 02 F6 | 	mov	arg03, local05
17a54     11 19 02 F6 | 	mov	arg04, local03
17a58     00 2F B0 FD | 	call	#__system__pack_0416
17a5c     C0 00 90 FD | 	jmp	#LR__2374
17a60                 | LR__2365
17a60     00 26 0E F2 | 	cmp	local05, #0 wz
17a64     00 24 0E A2 |  if_e	cmp	local04, #0 wz
17a68     00 F8 3F AF 
17a6c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
17a70     AC 00 90 AD |  if_e	jmp	#LR__2374
17a74     00 2A 0E F2 | 	cmp	local07, #0 wz
17a78     10 FB 01 56 |  if_ne	mov	result1, local02
17a7c     A0 00 90 5D |  if_ne	jmp	#LR__2374
17a80     16 17 02 F6 | 	mov	arg03, local08
17a84     11 19 02 F6 | 	mov	arg04, local03
17a88     02 18 46 F5 | 	or	arg04, #2
17a8c     00 12 06 F6 | 	mov	arg01, #0
17a90     00 14 06 F6 | 	mov	arg02, #0
17a94     C4 2E B0 FD | 	call	#__system__pack_0416
17a98     84 00 90 FD | 	jmp	#LR__2374
17a9c                 | LR__2366
17a9c     00 24 0E F2 | 	cmp	local04, #0 wz
17aa0     20 00 90 AD |  if_e	jmp	#LR__2369
17aa4     01 24 66 F0 | 	shl	local04, #1
17aa8     97 0A 48 FB | 	callpa	#(@LR__2368-@LR__2367)>>2,fcache_load_ptr_
17aac                 | LR__2367
17aac     00 40 00 FF 
17ab0     00 24 16 F2 | 	cmp	local04, ##8388608 wc
17ab4     01 26 86 C1 |  if_b	sub	local05, #1
17ab8     01 24 66 C0 |  if_b	shl	local04, #1
17abc     EC FF 9F CD |  if_b	jmp	#LR__2367
17ac0                 | LR__2368
17ac0     D0 FE 9F FD | 	jmp	#LR__2360
17ac4                 | LR__2369
17ac4     08 22 46 F5 | 	or	local03, #8
17ac8     00 12 06 F6 | 	mov	arg01, #0
17acc     00 14 06 F6 | 	mov	arg02, #0
17ad0     00 16 06 F6 | 	mov	arg03, #0
17ad4     11 19 02 F6 | 	mov	arg04, local03
17ad8     80 2E B0 FD | 	call	#__system__pack_0416
17adc     40 00 90 FD | 	jmp	#LR__2374
17ae0                 | LR__2370
17ae0     00 2A 0E F2 | 	cmp	local07, #0 wz
17ae4     20 00 90 AD |  if_e	jmp	#LR__2373
17ae8     01 2A 66 F0 | 	shl	local07, #1
17aec     97 0A 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
17af0                 | LR__2371
17af0     00 40 00 FF 
17af4     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
17af8     01 2C 86 C1 |  if_b	sub	local08, #1
17afc     01 2A 66 C0 |  if_b	shl	local07, #1
17b00     EC FF 9F CD |  if_b	jmp	#LR__2371
17b04                 | LR__2372
17b04     98 FE 9F FD | 	jmp	#LR__2361
17b08                 | LR__2373
17b08     08 22 46 F5 | 	or	local03, #8
17b0c     00 12 06 F6 | 	mov	arg01, #0
17b10     00 14 06 F6 | 	mov	arg02, #0
17b14     00 16 06 F6 | 	mov	arg03, #0
17b18     11 19 02 F6 | 	mov	arg04, local03
17b1c     3C 2E B0 FD | 	call	#__system__pack_0416
17b20                 | LR__2374
17b20     A7 F0 03 F6 | 	mov	ptra, fp
17b24     B2 00 A0 FD | 	call	#popregs_
17b28                 | __system___float_mul_ret
17b28     2D 00 64 FD | 	ret
17b2c                 | 
17b2c                 | __system___float_div
17b2c     0E 4A 05 F6 | 	mov	COUNT_, #14
17b30     A8 00 A0 FD | 	call	#pushregs_
17b34     09 23 02 F6 | 	mov	local03, arg01
17b38     0A 25 02 F6 | 	mov	local04, arg02
17b3c     11 27 02 F6 | 	mov	local05, local03
17b40     13 29 02 F6 | 	mov	local06, local05
17b44     16 28 46 F7 | 	zerox	local06, #22
17b48     13 2B 02 F6 | 	mov	local07, local05
17b4c     01 2A 66 F0 | 	shl	local07, #1
17b50     18 2A 46 F0 | 	shr	local07, #24
17b54     1F 26 46 F0 | 	shr	local05, #31
17b58     12 FB 01 F6 | 	mov	result1, local04
17b5c     FD 2C 02 F6 | 	mov	local08, result1
17b60     16 2F 02 F6 | 	mov	local09, local08
17b64     16 2E 46 F7 | 	zerox	local09, #22
17b68     16 31 02 F6 | 	mov	local10, local08
17b6c     01 30 66 F0 | 	shl	local10, #1
17b70     18 30 46 F0 | 	shr	local10, #24
17b74     1F 2C 46 F0 | 	shr	local08, #31
17b78     16 27 62 F5 | 	xor	local05, local08
17b7c     FF 2A 0E F2 | 	cmp	local07, #255 wz
17b80     D4 00 90 AD |  if_e	jmp	#LR__2385
17b84     FF 30 0E F2 | 	cmp	local10, #255 wz
17b88     04 01 90 AD |  if_e	jmp	#LR__2386
17b8c     00 2A 0E F2 | 	cmp	local07, #0 wz
17b90     24 01 90 AD |  if_e	jmp	#LR__2387
17b94     17 28 26 F4 | 	bith	local06, #23
17b98                 | LR__2380
17b98     00 30 0E F2 | 	cmp	local10, #0 wz
17b9c     70 01 90 AD |  if_e	jmp	#LR__2391
17ba0     17 2E 26 F4 | 	bith	local09, #23
17ba4                 | LR__2381
17ba4     18 2B 82 F1 | 	sub	local07, local10
17ba8     15 33 02 F6 | 	mov	local11, local07
17bac     14 13 02 F6 | 	mov	arg01, local06
17bb0     02 12 46 F0 | 	shr	arg01, #2
17bb4     1E 28 66 F0 | 	shl	local06, #30
17bb8     14 15 02 F6 | 	mov	arg02, local06
17bbc     17 17 02 F6 | 	mov	arg03, local09
17bc0     28 12 62 FD | 	setq	arg01
17bc4     0B 15 12 FD | 	qdiv	arg02, arg03
17bc8     00 34 06 F6 | 	mov	local12, #0
17bcc     18 1E 62 FD | 	getqx	local01
17bd0     19 FC 61 FD | 	getqy	result2
17bd4     FE 20 02 F6 | 	mov	local02, result2
17bd8     0F 37 02 F6 | 	mov	local13, local01
17bdc     00 20 4E F2 | 	cmps	local02, #0 wz
17be0     1B 39 02 F6 | 	mov	local14, local13
17be4     19 38 66 F0 | 	shl	local14, #25
17be8     01 34 06 56 |  if_ne	mov	local12, #1
17bec     1A 39 42 F5 | 	or	local14, local12
17bf0     07 36 46 F0 | 	shr	local13, #7
17bf4     00 80 00 FF 
17bf8     00 36 16 F2 | 	cmp	local13, ##16777216 wc
17bfc     1C 00 90 CD |  if_b	jmp	#LR__2382
17c00     01 32 06 F1 | 	add	local11, #1
17c04     01 38 46 F0 | 	shr	local14, #1
17c08     1B 35 02 F6 | 	mov	local12, local13
17c0c     1F 34 66 F0 | 	shl	local12, #31
17c10     1A 39 42 F5 | 	or	local14, local12
17c14     01 36 46 F0 | 	shr	local13, #1
17c18     24 00 90 FD | 	jmp	#LR__2384
17c1c                 | LR__2382
17c1c     00 40 00 FF 
17c20     00 36 16 F2 | 	cmp	local13, ##8388608 wc
17c24     18 00 90 3D |  if_ae	jmp	#LR__2383
17c28     01 32 86 F1 | 	sub	local11, #1
17c2c     01 36 66 F0 | 	shl	local13, #1
17c30     1C 35 02 F6 | 	mov	local12, local14
17c34     1F 34 46 F0 | 	shr	local12, #31
17c38     1A 37 42 F5 | 	or	local13, local12
17c3c     01 38 66 F0 | 	shl	local14, #1
17c40                 | LR__2383
17c40                 | LR__2384
17c40     1B 13 02 F6 | 	mov	arg01, local13
17c44     1C 15 02 F6 | 	mov	arg02, local14
17c48     19 17 02 F6 | 	mov	arg03, local11
17c4c     13 19 02 F6 | 	mov	arg04, local05
17c50     08 2D B0 FD | 	call	#__system__pack_0416
17c54     F8 00 90 FD | 	jmp	#LR__2395
17c58                 | LR__2385
17c58     00 28 0E F2 | 	cmp	local06, #0 wz
17c5c     11 FB 01 56 |  if_ne	mov	result1, local03
17c60     EC 00 90 5D |  if_ne	jmp	#LR__2395
17c64     FF 30 0E F2 | 	cmp	local10, #255 wz
17c68     00 F8 3F AF 
17c6c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
17c70     DC 00 90 AD |  if_e	jmp	#LR__2395
17c74     02 26 46 F5 | 	or	local05, #2
17c78     00 12 06 F6 | 	mov	arg01, #0
17c7c     00 14 06 F6 | 	mov	arg02, #0
17c80     15 17 02 F6 | 	mov	arg03, local07
17c84     13 19 02 F6 | 	mov	arg04, local05
17c88     D0 2C B0 FD | 	call	#__system__pack_0416
17c8c     C0 00 90 FD | 	jmp	#LR__2395
17c90                 | LR__2386
17c90     00 2E 0E F2 | 	cmp	local09, #0 wz
17c94     12 FB 01 56 |  if_ne	mov	result1, local04
17c98     B4 00 90 5D |  if_ne	jmp	#LR__2395
17c9c     13 19 02 F6 | 	mov	arg04, local05
17ca0     08 18 46 F5 | 	or	arg04, #8
17ca4     00 12 06 F6 | 	mov	arg01, #0
17ca8     00 14 06 F6 | 	mov	arg02, #0
17cac     00 16 06 F6 | 	mov	arg03, #0
17cb0     A8 2C B0 FD | 	call	#__system__pack_0416
17cb4     98 00 90 FD | 	jmp	#LR__2395
17cb8                 | LR__2387
17cb8     00 28 0E F2 | 	cmp	local06, #0 wz
17cbc     20 00 90 AD |  if_e	jmp	#LR__2390
17cc0     01 28 66 F0 | 	shl	local06, #1
17cc4     97 0A 48 FB | 	callpa	#(@LR__2389-@LR__2388)>>2,fcache_load_ptr_
17cc8                 | LR__2388
17cc8     00 40 00 FF 
17ccc     00 28 16 F2 | 	cmp	local06, ##8388608 wc
17cd0     01 2A 86 C1 |  if_b	sub	local07, #1
17cd4     01 28 66 C0 |  if_b	shl	local06, #1
17cd8     EC FF 9F CD |  if_b	jmp	#LR__2388
17cdc                 | LR__2389
17cdc     B8 FE 9F FD | 	jmp	#LR__2380
17ce0                 | LR__2390
17ce0     00 30 0E F2 | 	cmp	local10, #0 wz
17ce4     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
17ce8     00 F8 3F AF 
17cec     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
17cf0     5C 00 90 AD |  if_e	jmp	#LR__2395
17cf4     13 19 02 F6 | 	mov	arg04, local05
17cf8     08 18 46 F5 | 	or	arg04, #8
17cfc     00 12 06 F6 | 	mov	arg01, #0
17d00     00 14 06 F6 | 	mov	arg02, #0
17d04     00 16 06 F6 | 	mov	arg03, #0
17d08     50 2C B0 FD | 	call	#__system__pack_0416
17d0c     40 00 90 FD | 	jmp	#LR__2395
17d10                 | LR__2391
17d10     00 2E 0E F2 | 	cmp	local09, #0 wz
17d14     20 00 90 AD |  if_e	jmp	#LR__2394
17d18     01 2E 66 F0 | 	shl	local09, #1
17d1c     97 0A 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
17d20                 | LR__2392
17d20     00 40 00 FF 
17d24     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
17d28     01 30 86 C1 |  if_b	sub	local10, #1
17d2c     01 2E 66 C0 |  if_b	shl	local09, #1
17d30     EC FF 9F CD |  if_b	jmp	#LR__2392
17d34                 | LR__2393
17d34     6C FE 9F FD | 	jmp	#LR__2381
17d38                 | LR__2394
17d38     02 26 46 F5 | 	or	local05, #2
17d3c     00 12 06 F6 | 	mov	arg01, #0
17d40     00 14 06 F6 | 	mov	arg02, #0
17d44     00 16 06 F6 | 	mov	arg03, #0
17d48     13 19 02 F6 | 	mov	arg04, local05
17d4c     0C 2C B0 FD | 	call	#__system__pack_0416
17d50                 | LR__2395
17d50     A7 F0 03 F6 | 	mov	ptra, fp
17d54     B2 00 A0 FD | 	call	#popregs_
17d58                 | __system___float_div_ret
17d58     2D 00 64 FD | 	ret
17d5c                 | 
17d5c                 | __system___float_cmp
17d5c     00 C0 3F FF 
17d60     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
17d64     00 C0 3F CF 
17d68     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
17d6c     0B FB 01 36 |  if_ae	mov	result1, arg03
17d70     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
17d74     00 C0 7F FF 
17d78     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
17d7c     00 C0 7F CF 
17d80     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
17d84     0B FB 01 36 |  if_ae	mov	result1, arg03
17d88     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
17d8c     00 12 56 F2 | 	cmps	arg01, #0 wc
17d90     2C 00 90 3D |  if_ae	jmp	#LR__2400
17d94     00 14 56 F2 | 	cmps	arg02, #0 wc
17d98     0A FB 01 C6 |  if_b	mov	result1, arg02
17d9c     09 FB 81 C1 |  if_b	sub	result1, arg01
17da0     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
17da4     00 14 0E F2 | 	cmp	arg02, #0 wz
17da8     00 00 40 AF 
17dac     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
17db0     00 FA 05 A6 |  if_e	mov	result1, #0
17db4     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
17db8     01 FA 65 F6 | 	neg	result1, #1
17dbc     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
17dc0                 | LR__2400
17dc0     00 14 56 F2 | 	cmps	arg02, #0 wc
17dc4     1C 00 90 3D |  if_ae	jmp	#LR__2401
17dc8     00 12 0E F2 | 	cmp	arg01, #0 wz
17dcc     00 00 40 AF 
17dd0     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
17dd4     00 FA 05 A6 |  if_e	mov	result1, #0
17dd8     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
17ddc     01 FA 05 F6 | 	mov	result1, #1
17de0     08 00 90 FD | 	jmp	#__system___float_cmp_ret
17de4                 | LR__2401
17de4     0A 13 82 F1 | 	sub	arg01, arg02
17de8     09 FB 01 F6 | 	mov	result1, arg01
17dec                 | __system___float_cmp_ret
17dec     2D 00 64 FD | 	ret
17df0                 | 
17df0                 | __system___float_tointeger
17df0     02 4A 05 F6 | 	mov	COUNT_, #2
17df4     A8 00 A0 FD | 	call	#pushregs_
17df8     50 00 B0 FD | 	call	#__system___float_Unpack
17dfc     FF FF 7F FF 
17e00     FF FD 55 F2 | 	cmps	result2, ##-1 wc
17e04     34 00 90 CD |  if_b	jmp	#LR__2410
17e08     1F FC 55 F2 | 	cmps	result2, #31 wc
17e0c     2C 00 90 3D |  if_ae	jmp	#LR__2410
17e10     02 FE 65 F0 | 	shl	result3, #2
17e14     1E 1E 06 F6 | 	mov	local01, #30
17e18     FE 1E 82 F1 | 	sub	local01, result2
17e1c     0F FF 41 F0 | 	shr	result3, local01
17e20     FF 20 02 F6 | 	mov	local02, result3
17e24     0A 21 02 F1 | 	add	local02, arg02
17e28     01 20 46 F0 | 	shr	local02, #1
17e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
17e30     10 21 62 56 |  if_ne	neg	local02, local02
17e34     10 FB 01 F6 | 	mov	result1, local02
17e38     04 00 90 FD | 	jmp	#LR__2411
17e3c                 | LR__2410
17e3c     00 FA 05 F6 | 	mov	result1, #0
17e40                 | LR__2411
17e40     A7 F0 03 F6 | 	mov	ptra, fp
17e44     B2 00 A0 FD | 	call	#popregs_
17e48                 | __system___float_tointeger_ret
17e48     2D 00 64 FD | 	ret
17e4c                 | 
17e4c                 | __system___float_Unpack
17e4c     09 01 02 F6 | 	mov	_var01, arg01
17e50     1F 00 46 F0 | 	shr	_var01, #31
17e54     09 03 02 F6 | 	mov	_var02, arg01
17e58     01 02 66 F0 | 	shl	_var02, #1
17e5c     18 02 4E F0 | 	shr	_var02, #24 wz
17e60     17 13 06 F4 | 	bitl	arg01, #279
17e64     06 12 66 50 |  if_ne	shl	arg01, #6
17e68     1D 12 26 54 |  if_ne	bith	arg01, #29
17e6c     1C 00 90 5D |  if_ne	jmp	#LR__2420
17e70     09 05 92 F7 | 	encod	_var03, arg01 wc
17e74     01 04 06 C1 |  if_b	add	_var03, #1
17e78     17 04 86 F1 | 	sub	_var03, #23
17e7c     02 03 02 F6 | 	mov	_var02, _var03
17e80     07 FC 05 F6 | 	mov	result2, #7
17e84     02 FD 81 F1 | 	sub	result2, _var03
17e88     FE 12 62 F0 | 	shl	arg01, result2
17e8c                 | LR__2420
17e8c     7F 02 86 F1 | 	sub	_var02, #127
17e90     09 FF 01 F6 | 	mov	result3, arg01
17e94     00 FB 01 F6 | 	mov	result1, _var01
17e98     01 FD 01 F6 | 	mov	result2, _var02
17e9c                 | __system___float_Unpack_ret
17e9c     2D 00 64 FD | 	ret
17ea0                 | 
17ea0                 | __system___float_Pack
17ea0     00 00 06 F6 | 	mov	_var01, #0
17ea4     00 16 0E F2 | 	cmp	arg03, #0 wz
17ea8     8C 00 90 AD |  if_e	jmp	#LR__2431
17eac     0B 03 92 F7 | 	encod	_var02, arg03 wc
17eb0     01 02 06 C1 |  if_b	add	_var02, #1
17eb4     21 00 06 F6 | 	mov	_var01, #33
17eb8     01 01 82 F1 | 	sub	_var01, _var02
17ebc     00 17 62 F0 | 	shl	arg03, _var01
17ec0     03 02 06 F6 | 	mov	_var02, #3
17ec4     00 03 82 F1 | 	sub	_var02, _var01
17ec8     01 15 02 F1 | 	add	arg02, _var02
17ecc     0A 05 02 F6 | 	mov	_var03, arg02
17ed0     00 17 06 F1 | 	add	arg03, #256
17ed4     0B 03 02 F6 | 	mov	_var02, arg03
17ed8     FF 02 2E F5 | 	andn	_var02, #255 wz
17edc     01 04 06 A1 |  if_e	add	_var03, #1
17ee0     7F 04 06 F1 | 	add	_var03, #127
17ee4     FF FF 7F FF 
17ee8     E9 05 46 F3 | 	fges	_var03, ##-23
17eec     FF 04 66 F3 | 	fles	_var03, #255
17ef0     01 04 56 F2 | 	cmps	_var03, #1 wc
17ef4     1C 00 90 3D |  if_ae	jmp	#LR__2430
17ef8     01 16 46 F0 | 	shr	arg03, #1
17efc     1F 02 C6 F9 | 	decod	_var02, #31
17f00     0B 03 02 F1 | 	add	_var02, arg03
17f04     02 05 62 F6 | 	neg	_var03, _var03
17f08     02 03 42 F0 | 	shr	_var02, _var03
17f0c     01 17 02 F6 | 	mov	arg03, _var02
17f10     00 04 06 F6 | 	mov	_var03, #0
17f14                 | LR__2430
17f14     09 FB 01 F6 | 	mov	result1, arg01
17f18     1F FA 65 F0 | 	shl	result1, #31
17f1c     02 03 02 F6 | 	mov	_var02, _var03
17f20     17 02 66 F0 | 	shl	_var02, #23
17f24     01 FB 41 F5 | 	or	result1, _var02
17f28     0B 07 02 F6 | 	mov	_var04, arg03
17f2c     09 06 46 F0 | 	shr	_var04, #9
17f30     03 FB 41 F5 | 	or	result1, _var04
17f34     04 00 90 FD | 	jmp	#__system___float_Pack_ret
17f38                 | LR__2431
17f38     00 FB 01 F6 | 	mov	result1, _var01
17f3c                 | __system___float_Pack_ret
17f3c     2D 00 64 FD | 	ret
17f40                 | 
17f40                 | __system___basic_print_float
17f40     05 4A 05 F6 | 	mov	COUNT_, #5
17f44     A8 00 A0 FD | 	call	#pushregs_
17f48     09 1F 02 F6 | 	mov	local01, arg01
17f4c     0A 21 02 F6 | 	mov	local02, arg02
17f50     0B 23 0A F6 | 	mov	local03, arg03 wz
17f54     0C 25 02 F6 | 	mov	local04, arg04
17f58     14 00 90 5D |  if_ne	jmp	#LR__2440
17f5c     23 24 0E F2 | 	cmp	local04, #35 wz
17f60     80 02 10 AF 
17f64     00 26 06 A6 |  if_e	mov	local05, ##537198592
17f68     1D 26 C6 59 |  if_ne	decod	local05, #29
17f6c     13 23 02 F6 | 	mov	local03, local05
17f70                 | LR__2440
17f70     0F 13 02 F6 | 	mov	arg01, local01
17f74     C8 24 B0 FD | 	call	#__system___gettxfunc
17f78     FD 26 0A F6 | 	mov	local05, result1 wz
17f7c     00 FA 05 A6 |  if_e	mov	result1, #0
17f80     13 13 02 56 |  if_ne	mov	arg01, local05
17f84     11 15 02 56 |  if_ne	mov	arg02, local03
17f88     10 17 02 56 |  if_ne	mov	arg03, local02
17f8c     12 19 02 56 |  if_ne	mov	arg04, local04
17f90     64 E0 BF 5D |  if_ne	call	#__system___fmtfloat
17f94     A7 F0 03 F6 | 	mov	ptra, fp
17f98     B2 00 A0 FD | 	call	#popregs_
17f9c                 | __system___basic_print_float_ret
17f9c     2D 00 64 FD | 	ret
17fa0                 | 
17fa0                 | __system____builtin_atoi
17fa0     07 4A 05 F6 | 	mov	COUNT_, #7
17fa4     A8 00 A0 FD | 	call	#pushregs_
17fa8                 | __system____builtin_atoi_enter
17fa8     09 1F 02 F6 | 	mov	local01, arg01
17fac     0A 21 02 F6 | 	mov	local02, arg02
17fb0     00 22 06 F6 | 	mov	local03, #0
17fb4     00 24 06 F6 | 	mov	local04, #0
17fb8     00 26 06 F6 | 	mov	local05, #0
17fbc     97 08 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
17fc0                 | LR__2450
17fc0     0F 29 C2 FA | 	rdbyte	local06, local01
17fc4     20 28 0E F2 | 	cmp	local06, #32 wz
17fc8     01 1E 06 A1 |  if_e	add	local01, #1
17fcc     F0 FF 9F AD |  if_e	jmp	#LR__2450
17fd0                 | LR__2451
17fd0     0F 2B C2 FA | 	rdbyte	local07, local01
17fd4                 | LR__2452
17fd4     2D 2A 0E F2 | 	cmp	local07, #45 wz
17fd8     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
17fdc     18 00 90 5D |  if_ne	jmp	#LR__2453
17fe0     01 1E 06 F1 | 	add	local01, #1
17fe4     2D 2A 0E F2 | 	cmp	local07, #45 wz
17fe8     01 28 06 A6 |  if_e	mov	local06, #1
17fec     14 27 C2 A2 |  if_e	subr	local05, local06
17ff0     0F 2B C2 FA | 	rdbyte	local07, local01
17ff4     DC FF 9F FD | 	jmp	#LR__2452
17ff8                 | LR__2453
17ff8     97 48 48 FB | 	callpa	#(@LR__2461-@LR__2454)>>2,fcache_load_ptr_
17ffc                 | LR__2454
17ffc                 | LR__2455
17ffc     0F 2B C2 FA | 	rdbyte	local07, local01
18000     5F 2A 0E F2 | 	cmp	local07, #95 wz
18004     01 1E 06 F1 | 	add	local01, #1
18008     F0 FF 9F AD |  if_e	jmp	#LR__2455
1800c     30 2A 0E F2 | 	cmp	local07, #48 wz
18010     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
18014     00 24 06 A6 |  if_e	mov	local04, #0
18018     60 00 90 AD |  if_e	jmp	#LR__2460
1801c     31 2A 56 F2 | 	cmps	local07, #49 wc
18020     18 00 90 CD |  if_b	jmp	#LR__2456
18024     3A 2A 56 F2 | 	cmps	local07, #58 wc
18028     15 25 02 C6 |  if_b	mov	local04, local07
1802c     30 24 86 C1 |  if_b	sub	local04, #48
18030     00 20 0E C2 |  if_b	cmp	local02, #0 wz
18034     0A 20 06 86 |  if_c_and_z	mov	local02, #10
18038     40 00 90 CD |  if_b	jmp	#LR__2459
1803c                 | LR__2456
1803c     0B 20 56 F2 | 	cmps	local02, #11 wc
18040     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
18044     14 00 90 CD |  if_b	jmp	#LR__2457
18048     67 2A 56 F2 | 	cmps	local07, #103 wc
1804c     61 2A 86 C1 |  if_b	sub	local07, #97
18050     0A 24 06 C6 |  if_b	mov	local04, #10
18054     15 25 02 C1 |  if_b	add	local04, local07
18058     20 00 90 CD |  if_b	jmp	#LR__2458
1805c                 | LR__2457
1805c     0B 20 56 F2 | 	cmps	local02, #11 wc
18060     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
18064     24 00 90 CD |  if_b	jmp	#LR__2462
18068     47 2A 56 F2 | 	cmps	local07, #71 wc
1806c     41 2A 86 C1 |  if_b	sub	local07, #65
18070     0A 24 06 C6 |  if_b	mov	local04, #10
18074     15 25 02 C1 |  if_b	add	local04, local07
18078     10 00 90 3D |  if_ae	jmp	#LR__2462
1807c                 | LR__2458
1807c                 | LR__2459
1807c                 | LR__2460
1807c     11 21 02 FD | 	qmul	local02, local03
18080     18 22 62 FD | 	getqx	local03
18084     12 23 02 F1 | 	add	local03, local04
18088     70 FF 9F FD | 	jmp	#LR__2454
1808c                 | LR__2461
1808c                 | LR__2462
1808c     00 20 0E F2 | 	cmp	local02, #0 wz
18090     64 00 90 5D |  if_ne	jmp	#LR__2468
18094     78 2A 0E F2 | 	cmp	local07, #120 wz
18098     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1809c     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
180a0     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
180a4     14 00 90 5D |  if_ne	jmp	#LR__2463
180a8     0F 13 02 F6 | 	mov	arg01, local01
180ac     10 14 06 F6 | 	mov	arg02, #16
180b0     EC FE BF FD | 	call	#__system____builtin_atoi
180b4     FD 22 02 F6 | 	mov	local03, result1
180b8     3C 00 90 FD | 	jmp	#LR__2467
180bc                 | LR__2463
180bc     62 2A 0E F2 | 	cmp	local07, #98 wz
180c0     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
180c4     14 00 90 5D |  if_ne	jmp	#LR__2464
180c8     0F 13 02 F6 | 	mov	arg01, local01
180cc     02 14 06 F6 | 	mov	arg02, #2
180d0     CC FE BF FD | 	call	#__system____builtin_atoi
180d4     FD 22 02 F6 | 	mov	local03, result1
180d8     1C 00 90 FD | 	jmp	#LR__2466
180dc                 | LR__2464
180dc     6F 2A 0E F2 | 	cmp	local07, #111 wz
180e0     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
180e4     10 00 90 5D |  if_ne	jmp	#LR__2465
180e8     0F 13 02 F6 | 	mov	arg01, local01
180ec     08 14 06 F6 | 	mov	arg02, #8
180f0     AC FE BF FD | 	call	#__system____builtin_atoi
180f4     FD 22 02 F6 | 	mov	local03, result1
180f8                 | LR__2465
180f8                 | LR__2466
180f8                 | LR__2467
180f8                 | LR__2468
180f8     00 26 0E F2 | 	cmp	local05, #0 wz
180fc     11 23 62 56 |  if_ne	neg	local03, local03
18100     11 FB 01 F6 | 	mov	result1, local03
18104     A7 F0 03 F6 | 	mov	ptra, fp
18108     B2 00 A0 FD | 	call	#popregs_
1810c                 | __system____builtin_atoi_ret
1810c     2D 00 64 FD | 	ret
18110                 | 
18110                 | __system____builtin_atof
18110     07 4A 05 F6 | 	mov	COUNT_, #7
18114     A8 00 A0 FD | 	call	#pushregs_
18118     09 1F 02 F6 | 	mov	local01, arg01
1811c     00 20 06 F6 | 	mov	local02, #0
18120     00 22 06 F6 | 	mov	local03, #0
18124     00 24 06 F6 | 	mov	local04, #0
18128     00 26 06 F6 | 	mov	local05, #0
1812c     97 08 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
18130                 | LR__2470
18130     0F 17 C2 FA | 	rdbyte	arg03, local01
18134     20 16 0E F2 | 	cmp	arg03, #32 wz
18138     01 1E 06 A1 |  if_e	add	local01, #1
1813c     F0 FF 9F AD |  if_e	jmp	#LR__2470
18140                 | LR__2471
18140     0F 29 C2 FA | 	rdbyte	local06, local01
18144                 | LR__2472
18144     2B 28 0E F2 | 	cmp	local06, #43 wz
18148     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1814c     14 00 90 5D |  if_ne	jmp	#LR__2473
18150     2D 28 0E F2 | 	cmp	local06, #45 wz
18154     1F 24 E6 A4 |  if_e	bitnot	local04, #31
18158     01 1E 06 F1 | 	add	local01, #1
1815c     0F 29 C2 FA | 	rdbyte	local06, local01
18160     E0 FF 9F FD | 	jmp	#LR__2472
18164                 | LR__2473
18164                 | LR__2474
18164     97 08 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
18168                 | LR__2475
18168     0F 29 C2 FA | 	rdbyte	local06, local01
1816c     5F 28 0E F2 | 	cmp	local06, #95 wz
18170     01 1E 06 F1 | 	add	local01, #1
18174     F0 FF 9F AD |  if_e	jmp	#LR__2475
18178                 | LR__2476
18178     00 28 0E F2 | 	cmp	local06, #0 wz
1817c     5C 00 90 AD |  if_e	jmp	#LR__2478
18180     30 28 56 F2 | 	cmps	local06, #48 wc
18184     44 00 90 CD |  if_b	jmp	#LR__2477
18188     3A 28 56 F2 | 	cmps	local06, #58 wc
1818c     3C 00 90 3D |  if_ae	jmp	#LR__2477
18190     10 13 02 F6 | 	mov	arg01, local02
18194     00 90 20 FF 
18198     00 14 06 F6 | 	mov	arg02, ##1092616192
1819c     88 F7 BF FD | 	call	#__system___float_mul
181a0     FD 20 02 F6 | 	mov	local02, result1
181a4     30 28 86 F1 | 	sub	local06, #48
181a8     14 13 02 F6 | 	mov	arg01, local06
181ac     4C F4 BF FD | 	call	#__system___float_fromuns
181b0     FD 14 02 F6 | 	mov	arg02, result1
181b4     10 13 02 F6 | 	mov	arg01, local02
181b8     74 F4 BF FD | 	call	#__system___float_add
181bc     FD 20 02 F6 | 	mov	local02, result1
181c0     00 26 0E F2 | 	cmp	local05, #0 wz
181c4     01 22 86 51 |  if_ne	sub	local03, #1
181c8     98 FF 9F FD | 	jmp	#LR__2474
181cc                 | LR__2477
181cc     2E 28 0E F2 | 	cmp	local06, #46 wz
181d0     00 26 0E A2 |  if_e	cmp	local05, #0 wz
181d4     01 26 06 A6 |  if_e	mov	local05, #1
181d8     88 FF 9F AD |  if_e	jmp	#LR__2474
181dc                 | LR__2478
181dc     45 28 0E F2 | 	cmp	local06, #69 wz
181e0     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
181e4     18 00 90 5D |  if_ne	jmp	#LR__2479
181e8     0F 13 02 F6 | 	mov	arg01, local01
181ec     00 14 06 F6 | 	mov	arg02, #0
181f0     AC FD BF FD | 	call	#__system____builtin_atoi
181f4     11 FB 01 F1 | 	add	result1, local03
181f8     FD 2A 02 F6 | 	mov	local07, result1
181fc     04 00 90 FD | 	jmp	#LR__2480
18200                 | LR__2479
18200     11 2B 02 F6 | 	mov	local07, local03
18204                 | LR__2480
18204     15 17 02 F6 | 	mov	arg03, local07
18208     10 13 02 F6 | 	mov	arg01, local02
1820c     00 90 20 FF 
18210     00 14 06 F6 | 	mov	arg02, ##1092616192
18214     44 04 B0 FD | 	call	#__system___float_pow_n
18218     12 FB 61 F5 | 	xor	result1, local04
1821c     A7 F0 03 F6 | 	mov	ptra, fp
18220     B2 00 A0 FD | 	call	#popregs_
18224                 | __system____builtin_atof_ret
18224     2D 00 64 FD | 	ret
18228                 | 
18228                 | __system____builtin_ilogb
18228     20 FC BF FD | 	call	#__system___float_Unpack
1822c     00 FE 0D F2 | 	cmp	result3, #0 wz
18230     00 00 40 AF 
18234     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
18238     24 00 90 AD |  if_e	jmp	#LR__2491
1823c     80 FC 0D F2 | 	cmp	result2, #128 wz
18240     18 00 90 5D |  if_ne	jmp	#LR__2490
18244     00 00 10 FF 
18248     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1824c     1E FA CD A9 |  if_e	bmask	result1, #30
18250     0C 00 90 AD |  if_e	jmp	#LR__2491
18254     1F FA C5 F9 | 	decod	result1, #31
18258     04 00 90 FD | 	jmp	#LR__2491
1825c                 | LR__2490
1825c     FE FA 01 F6 | 	mov	result1, result2
18260                 | LR__2491
18260                 | __system____builtin_ilogb_ret
18260     2D 00 64 FD | 	ret
18264                 | 
18264                 | __system____builtin_sinf
18264     03 4A 05 F6 | 	mov	COUNT_, #3
18268     A8 00 A0 FD | 	call	#pushregs_
1826c     09 1F 02 F6 | 	mov	local01, arg01
18270     66 E6 1E FF 
18274     CD 14 06 F6 | 	mov	arg02, ##1036831949
18278     01 16 06 F6 | 	mov	arg03, #1
1827c     DC FA BF FD | 	call	#__system___float_cmp
18280     00 FA 55 F2 | 	cmps	result1, #0 wc
18284     5C 00 90 3D |  if_ae	jmp	#LR__2500
18288     0F 13 02 F6 | 	mov	arg01, local01
1828c     66 E6 5E FF 
18290     CD 14 06 F6 | 	mov	arg02, ##-1110651699
18294     01 16 66 F6 | 	neg	arg03, #1
18298     C0 FA BF FD | 	call	#__system___float_cmp
1829c     01 FA 55 F2 | 	cmps	result1, #1 wc
182a0     40 00 90 CD |  if_b	jmp	#LR__2500
182a4     0F 13 02 F6 | 	mov	arg01, local01
182a8     0F 15 02 F6 | 	mov	arg02, local01
182ac     78 F6 BF FD | 	call	#__system___float_mul
182b0     FD 12 02 F6 | 	mov	arg01, result1
182b4     0F 15 02 F6 | 	mov	arg02, local01
182b8     6C F6 BF FD | 	call	#__system___float_mul
182bc     FD 12 02 F6 | 	mov	arg01, result1
182c0     00 60 20 FF 
182c4     00 14 06 F6 | 	mov	arg02, ##1086324736
182c8     60 F8 BF FD | 	call	#__system___float_div
182cc     FD 14 02 F6 | 	mov	arg02, result1
182d0     0F 13 02 F6 | 	mov	arg01, local01
182d4     1F 14 E6 F4 | 	bitnot	arg02, #31
182d8     54 F3 BF FD | 	call	#__system___float_add
182dc     FD 20 02 F6 | 	mov	local02, result1
182e0     54 00 90 FD | 	jmp	#LR__2501
182e4                 | LR__2500
182e4     0F 13 02 F6 | 	mov	arg01, local01
182e8     7C 91 26 FF 
182ec     83 15 06 F6 | 	mov	arg02, ##1294137731
182f0     34 F6 BF FD | 	call	#__system___float_mul
182f4     FD 12 02 F6 | 	mov	arg01, result1
182f8     00 14 06 F6 | 	mov	arg02, #0
182fc     F0 FA BF FD | 	call	#__system___float_tointeger
18300     02 FA 65 F0 | 	shl	result1, #2
18304     00 00 A0 FF 
18308     FD 00 48 FD | 	qrotate	##1073741824, result1
1830c     19 12 62 FD | 	getqy	arg01
18310     09 13 52 F6 | 	abs	arg01, arg01 wc
18314     1F 22 C6 C9 |  if_b	decod	local03, #31
18318     00 22 06 36 |  if_ae	mov	local03, #0
1831c     DC F2 BF FD | 	call	#__system___float_fromuns
18320     11 FB 61 F5 | 	xor	result1, local03
18324     FD 12 02 F6 | 	mov	arg01, result1
18328     00 40 27 FF 
1832c     00 14 06 F6 | 	mov	arg02, ##1317011456
18330     F8 F7 BF FD | 	call	#__system___float_div
18334     FD 20 02 F6 | 	mov	local02, result1
18338                 | LR__2501
18338     10 FB 01 F6 | 	mov	result1, local02
1833c     A7 F0 03 F6 | 	mov	ptra, fp
18340     B2 00 A0 FD | 	call	#popregs_
18344                 | __system____builtin_sinf_ret
18344     2D 00 64 FD | 	ret
18348                 | 
18348                 | __system____builtin_exp2f
18348     04 4A 05 F6 | 	mov	COUNT_, #4
1834c     A8 00 A0 FD | 	call	#pushregs_
18350     09 1F 02 F6 | 	mov	local01, arg01
18354     00 7F 21 FF 
18358     00 14 06 F6 | 	mov	arg02, ##1123942400
1835c     01 16 66 F6 | 	neg	arg03, #1
18360     F8 F9 BF FD | 	call	#__system___float_cmp
18364     00 FA 55 F2 | 	cmps	result1, #0 wc
18368     00 C0 3F 3F 
1836c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
18370     DC 00 90 3D |  if_ae	jmp	#LR__2511
18374     0F 13 02 F6 | 	mov	arg01, local01
18378     00 7F 61 FF 
1837c     00 14 06 F6 | 	mov	arg02, ##-1023541248
18380     01 16 06 F6 | 	mov	arg03, #1
18384     D4 F9 BF FD | 	call	#__system___float_cmp
18388     00 FA 55 F2 | 	cmps	result1, #0 wc
1838c     00 FA 05 C6 |  if_b	mov	result1, #0
18390     BC 00 90 CD |  if_b	jmp	#LR__2511
18394     0F 13 02 F6 | 	mov	arg01, local01
18398     00 14 06 F6 | 	mov	arg02, #0
1839c     50 FA BF FD | 	call	#__system___float_tointeger
183a0     FD 20 02 F6 | 	mov	local02, result1
183a4     10 13 52 F6 | 	abs	arg01, local02 wc
183a8     1F 22 C6 C9 |  if_b	decod	local03, #31
183ac     00 22 06 36 |  if_ae	mov	local03, #0
183b0     48 F2 BF FD | 	call	#__system___float_fromuns
183b4     11 FB 61 F5 | 	xor	result1, local03
183b8     FD 14 02 F6 | 	mov	arg02, result1
183bc     0F 13 02 F6 | 	mov	arg01, local01
183c0     1F 14 E6 F4 | 	bitnot	arg02, #31
183c4     68 F2 BF FD | 	call	#__system___float_add
183c8     FD 24 02 F6 | 	mov	local04, result1
183cc     12 13 02 F6 | 	mov	arg01, local04
183d0     00 14 06 F6 | 	mov	arg02, #0
183d4     01 16 06 F6 | 	mov	arg03, #1
183d8     80 F9 BF FD | 	call	#__system___float_cmp
183dc     00 FA 55 F2 | 	cmps	result1, #0 wc
183e0     18 00 90 3D |  if_ae	jmp	#LR__2510
183e4     12 13 02 F6 | 	mov	arg01, local04
183e8     00 C0 1F FF 
183ec     00 14 06 F6 | 	mov	arg02, ##1065353216
183f0     3C F2 BF FD | 	call	#__system___float_add
183f4     FD 24 02 F6 | 	mov	local04, result1
183f8     01 20 86 F1 | 	sub	local02, #1
183fc                 | LR__2510
183fc     7F 20 06 F1 | 	add	local02, #127
18400     17 20 66 F0 | 	shl	local02, #23
18404     12 13 02 F6 | 	mov	arg01, local04
18408     00 80 26 FF 
1840c     00 14 06 F6 | 	mov	arg02, ##1291845632
18410     14 F5 BF FD | 	call	#__system___float_mul
18414     FD 12 02 F6 | 	mov	arg01, result1
18418     00 14 06 F6 | 	mov	arg02, #0
1841c     D0 F9 BF FD | 	call	#__system___float_tointeger
18420     FD 24 0A F6 | 	mov	local04, result1 wz
18424     10 FB 01 A6 |  if_e	mov	result1, local02
18428     24 00 90 AD |  if_e	jmp	#LR__2511
1842c     3E 24 26 F4 | 	bith	local04, #62
18430     0F 24 62 FD | 	qexp	local04
18434     10 13 02 F6 | 	mov	arg01, local02
18438     18 14 62 FD | 	getqx	arg02
1843c     01 14 06 F1 | 	add	arg02, #1
18440     01 14 46 F0 | 	shr	arg02, #1
18444     00 80 1F FF 
18448     00 14 06 F1 | 	add	arg02, ##1056964608
1844c     D8 F4 BF FD | 	call	#__system___float_mul
18450                 | LR__2511
18450     A7 F0 03 F6 | 	mov	ptra, fp
18454     B2 00 A0 FD | 	call	#popregs_
18458                 | __system____builtin_exp2f_ret
18458     2D 00 64 FD | 	ret
1845c                 | 
1845c                 | __system____builtin_log2f
1845c     06 4A 05 F6 | 	mov	COUNT_, #6
18460     A8 00 A0 FD | 	call	#pushregs_
18464     09 1F 02 F6 | 	mov	local01, arg01
18468     09 21 0A F6 | 	mov	local02, arg01 wz
1846c     00 00 40 5F 
18470     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
18474     00 40 00 AF 
18478     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1847c     08 01 90 AD |  if_e	jmp	#LR__2524
18480     00 20 56 F2 | 	cmps	local02, #0 wc
18484     00 E0 3F CF 
18488     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1848c     F8 00 90 CD |  if_b	jmp	#LR__2524
18490     0F 13 02 F6 | 	mov	arg01, local01
18494     00 90 20 FF 
18498     00 14 06 F6 | 	mov	arg02, ##1092616192
1849c     01 16 06 F6 | 	mov	arg03, #1
184a0     B8 F8 BF FD | 	call	#__system___float_cmp
184a4     00 FA 0D F2 | 	cmp	result1, #0 wz
184a8     4D 2A 20 AF 
184ac     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
184b0     D4 00 90 AD |  if_e	jmp	#LR__2524
184b4     0F 13 02 F6 | 	mov	arg01, local01
184b8     FC 16 20 FF 
184bc     54 14 06 F6 | 	mov	arg02, ##1076754516
184c0     01 16 06 F6 | 	mov	arg03, #1
184c4     94 F8 BF FD | 	call	#__system___float_cmp
184c8     00 FA 0D F2 | 	cmp	result1, #0 wz
184cc     55 DC 1F AF 
184d0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
184d4     B0 00 90 AD |  if_e	jmp	#LR__2524
184d8     10 23 02 F6 | 	mov	local03, local02
184dc     17 22 46 F0 | 	shr	local03, #23
184e0     11 23 E2 F8 | 	getbyte	local03, local03, #0
184e4     17 21 06 F4 | 	bitl	local02, #279
184e8     10 25 02 F6 | 	mov	local04, local02
184ec     FF 22 0E F2 | 	cmp	local03, #255 wz
184f0     1C 00 90 5D |  if_ne	jmp	#LR__2520
184f4     00 24 0E F2 | 	cmp	local04, #0 wz
184f8     00 C0 3F 5F 
184fc     00 26 06 56 |  if_ne	mov	local05, ##2139095040
18500     00 E0 3F AF 
18504     00 26 06 A6 |  if_e	mov	local05, ##2143289344
18508     13 FB 01 F6 | 	mov	result1, local05
1850c     78 00 90 FD | 	jmp	#LR__2524
18510                 | LR__2520
18510     00 22 0E F2 | 	cmp	local03, #0 wz
18514     17 24 26 54 |  if_ne	bith	local04, #23
18518     7F 22 86 51 |  if_ne	sub	local03, #127
1851c     28 00 90 5D |  if_ne	jmp	#LR__2523
18520     00 24 0E F2 | 	cmp	local04, #0 wz
18524     00 40 00 AF 
18528     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1852c     58 00 90 AD |  if_e	jmp	#LR__2524
18530     7E 22 66 F6 | 	neg	local03, #126
18534     97 08 48 FB | 	callpa	#(@LR__2522-@LR__2521)>>2,fcache_load_ptr_
18538                 | LR__2521
18538     17 24 2E F4 | 	testbn	local04, #23 wz
1853c     01 24 66 A0 |  if_e	shl	local04, #1
18540     01 22 06 A1 |  if_e	add	local03, #1
18544     F0 FF 9F AD |  if_e	jmp	#LR__2521
18548                 | LR__2522
18548                 | LR__2523
18548     0E 24 62 FD | 	qlog	local04
1854c     01 22 86 F1 | 	sub	local03, #1
18550     11 13 52 F6 | 	abs	arg01, local03 wc
18554     1F 28 C6 C9 |  if_b	decod	local06, #31
18558     00 28 06 36 |  if_ae	mov	local06, #0
1855c     18 26 62 FD | 	getqx	local05
18560     9B 26 06 F4 | 	bitl	local05, #155
18564     08 26 06 F1 | 	add	local05, #8
18568     04 26 46 F0 | 	shr	local05, #4
1856c     00 C0 1F FF 
18570     00 26 06 F1 | 	add	local05, ##1065353216
18574     84 F0 BF FD | 	call	#__system___float_fromuns
18578     14 FB 61 F5 | 	xor	result1, local06
1857c     FD 14 02 F6 | 	mov	arg02, result1
18580     13 13 02 F6 | 	mov	arg01, local05
18584     A8 F0 BF FD | 	call	#__system___float_add
18588                 | LR__2524
18588     A7 F0 03 F6 | 	mov	ptra, fp
1858c     B2 00 A0 FD | 	call	#popregs_
18590                 | __system____builtin_log2f_ret
18590     2D 00 64 FD | 	ret
18594                 | 
18594                 | __system____builtin_powf
18594     04 4A 05 F6 | 	mov	COUNT_, #4
18598     A8 00 A0 FD | 	call	#pushregs_
1859c     09 1F 02 F6 | 	mov	local01, arg01
185a0     0A 21 02 F6 | 	mov	local02, arg02
185a4     10 13 02 F6 | 	mov	arg01, local02
185a8     00 14 06 F6 | 	mov	arg02, #0
185ac     40 F8 BF FD | 	call	#__system___float_tointeger
185b0     FD 22 02 F6 | 	mov	local03, result1
185b4     11 13 52 F6 | 	abs	arg01, local03 wc
185b8     1F 24 C6 C9 |  if_b	decod	local04, #31
185bc     00 24 06 36 |  if_ae	mov	local04, #0
185c0     38 F0 BF FD | 	call	#__system___float_fromuns
185c4     12 FB 61 F5 | 	xor	result1, local04
185c8     FD 12 02 F6 | 	mov	arg01, result1
185cc     10 15 02 F6 | 	mov	arg02, local02
185d0     01 16 06 F6 | 	mov	arg03, #1
185d4     84 F7 BF FD | 	call	#__system___float_cmp
185d8     00 FA 0D F2 | 	cmp	result1, #0 wz
185dc     18 00 90 5D |  if_ne	jmp	#LR__2530
185e0     00 C0 1F FF 
185e4     00 12 06 F6 | 	mov	arg01, ##1065353216
185e8     0F 15 02 F6 | 	mov	arg02, local01
185ec     11 17 02 F6 | 	mov	arg03, local03
185f0     68 00 B0 FD | 	call	#__system___float_pow_n
185f4     58 00 90 FD | 	jmp	#LR__2531
185f8                 | LR__2530
185f8     0F 13 02 F6 | 	mov	arg01, local01
185fc     00 14 06 F6 | 	mov	arg02, #0
18600     01 16 06 F6 | 	mov	arg03, #1
18604     54 F7 BF FD | 	call	#__system___float_cmp
18608     00 FA 55 F2 | 	cmps	result1, #0 wc
1860c     00 E0 3F CF 
18610     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
18614     38 00 90 CD |  if_b	jmp	#LR__2531
18618     0F 13 02 F6 | 	mov	arg01, local01
1861c     00 14 06 F6 | 	mov	arg02, #0
18620     01 16 06 F6 | 	mov	arg03, #1
18624     34 F7 BF FD | 	call	#__system___float_cmp
18628     00 FA 0D F2 | 	cmp	result1, #0 wz
1862c     00 FA 05 A6 |  if_e	mov	result1, #0
18630     1C 00 90 AD |  if_e	jmp	#LR__2531
18634     0F 13 02 F6 | 	mov	arg01, local01
18638     20 FE BF FD | 	call	#__system____builtin_log2f
1863c     FD 12 02 F6 | 	mov	arg01, result1
18640     10 15 02 F6 | 	mov	arg02, local02
18644     E0 F2 BF FD | 	call	#__system___float_mul
18648     FD 12 02 F6 | 	mov	arg01, result1
1864c     F8 FC BF FD | 	call	#__system____builtin_exp2f
18650                 | LR__2531
18650     A7 F0 03 F6 | 	mov	ptra, fp
18654     B2 00 A0 FD | 	call	#popregs_
18658                 | __system____builtin_powf_ret
18658     2D 00 64 FD | 	ret
1865c                 | 
1865c                 | __system___float_pow_n
1865c     05 4A 05 F6 | 	mov	COUNT_, #5
18660     A8 00 A0 FD | 	call	#pushregs_
18664     09 1F 02 F6 | 	mov	local01, arg01
18668     0A 21 02 F6 | 	mov	local02, arg02
1866c     0B 23 02 F6 | 	mov	local03, arg03
18670     00 22 56 F2 | 	cmps	local03, #0 wc
18674     18 00 90 3D |  if_ae	jmp	#LR__2540
18678     01 24 06 F6 | 	mov	local04, #1
1867c     11 23 62 F6 | 	neg	local03, local03
18680     00 22 56 F2 | 	cmps	local03, #0 wc
18684     00 FA 05 C6 |  if_b	mov	result1, #0
18688     94 00 90 CD |  if_b	jmp	#LR__2548
1868c     04 00 90 FD | 	jmp	#LR__2541
18690                 | LR__2540
18690     00 24 06 F6 | 	mov	local04, #0
18694                 | LR__2541
18694     00 C0 1F FF 
18698     00 26 06 F6 | 	mov	local05, ##1065353216
1869c                 | LR__2542
1869c     01 22 56 F2 | 	cmps	local03, #1 wc
186a0     30 00 90 CD |  if_b	jmp	#LR__2544
186a4     01 22 CE F7 | 	test	local03, #1 wz
186a8     10 00 90 AD |  if_e	jmp	#LR__2543
186ac     13 13 02 F6 | 	mov	arg01, local05
186b0     10 15 02 F6 | 	mov	arg02, local02
186b4     70 F2 BF FD | 	call	#__system___float_mul
186b8     FD 26 02 F6 | 	mov	local05, result1
186bc                 | LR__2543
186bc     01 22 C6 F0 | 	sar	local03, #1
186c0     10 13 02 F6 | 	mov	arg01, local02
186c4     10 15 02 F6 | 	mov	arg02, local02
186c8     5C F2 BF FD | 	call	#__system___float_mul
186cc     FD 20 02 F6 | 	mov	local02, result1
186d0     C8 FF 9F FD | 	jmp	#LR__2542
186d4                 | LR__2544
186d4     00 24 0E F2 | 	cmp	local04, #0 wz
186d8     14 00 90 AD |  if_e	jmp	#LR__2545
186dc     0F 13 02 F6 | 	mov	arg01, local01
186e0     13 15 02 F6 | 	mov	arg02, local05
186e4     44 F4 BF FD | 	call	#__system___float_div
186e8     FD 26 02 F6 | 	mov	local05, result1
186ec     2C 00 90 FD | 	jmp	#LR__2547
186f0                 | LR__2545
186f0     0F 13 02 F6 | 	mov	arg01, local01
186f4     00 C0 1F FF 
186f8     00 14 06 F6 | 	mov	arg02, ##1065353216
186fc     01 16 06 F6 | 	mov	arg03, #1
18700     58 F6 BF FD | 	call	#__system___float_cmp
18704     00 FA 0D F2 | 	cmp	result1, #0 wz
18708     10 00 90 AD |  if_e	jmp	#LR__2546
1870c     0F 13 02 F6 | 	mov	arg01, local01
18710     13 15 02 F6 | 	mov	arg02, local05
18714     10 F2 BF FD | 	call	#__system___float_mul
18718     FD 26 02 F6 | 	mov	local05, result1
1871c                 | LR__2546
1871c                 | LR__2547
1871c     13 FB 01 F6 | 	mov	result1, local05
18720                 | LR__2548
18720     A7 F0 03 F6 | 	mov	ptra, fp
18724     B2 00 A0 FD | 	call	#popregs_
18728                 | __system___float_pow_n_ret
18728     2D 00 64 FD | 	ret
1872c                 | 
1872c                 | __system___gc_ptrs
1872c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
18730     00 03 02 F6 | 	mov	_var02, _var01
18734     F3 01 00 FF 
18738     F8 03 06 F1 | 	add	_var02, ##255992
1873c     00 FD 09 FB | 	rdlong	result2, _var01 wz
18740     74 00 90 5D |  if_ne	jmp	#LR__2550
18744     01 FD 01 F6 | 	mov	result2, _var02
18748     00 FD 81 F1 | 	sub	result2, _var01
1874c     00 03 58 FC | 	wrword	#1, _var01
18750     00 FB 01 F6 | 	mov	result1, _var01
18754     02 FA 05 F1 | 	add	result1, #2
18758     36 00 80 FF 
1875c     FD 20 59 FC | 	wrword	##27792, result1
18760     00 FB 01 F6 | 	mov	result1, _var01
18764     04 FA 05 F1 | 	add	result1, #4
18768     FD 00 58 FC | 	wrword	#0, result1
1876c     00 FB 01 F6 | 	mov	result1, _var01
18770     06 FA 05 F1 | 	add	result1, #6
18774     FD 02 58 FC | 	wrword	#1, result1
18778     10 00 06 F1 | 	add	_var01, #16
1877c     FE FC 51 F6 | 	abs	result2, result2 wc
18780     04 FC 45 F0 | 	shr	result2, #4
18784     FE FC 81 F6 | 	negc	result2, result2
18788     00 FD 51 FC | 	wrword	result2, _var01
1878c     00 FD 01 F6 | 	mov	result2, _var01
18790     02 FC 05 F1 | 	add	result2, #2
18794     36 00 80 FF 
18798     FE 1E 59 FC | 	wrword	##27791, result2
1879c     00 FD 01 F6 | 	mov	result2, _var01
187a0     04 FC 05 F1 | 	add	result2, #4
187a4     FE 00 58 FC | 	wrword	#0, result2
187a8     00 FD 01 F6 | 	mov	result2, _var01
187ac     06 FC 05 F1 | 	add	result2, #6
187b0     FE 00 58 FC | 	wrword	#0, result2
187b4     10 00 86 F1 | 	sub	_var01, #16
187b8                 | LR__2550
187b8     00 FB 01 F6 | 	mov	result1, _var01
187bc     01 FD 01 F6 | 	mov	result2, _var02
187c0                 | __system___gc_ptrs_ret
187c0     2D 00 64 FD | 	ret
187c4                 | 
187c4                 | __system___gc_tryalloc
187c4     0B 4A 05 F6 | 	mov	COUNT_, #11
187c8     A8 00 A0 FD | 	call	#pushregs_
187cc     09 1F 02 F6 | 	mov	local01, arg01
187d0     0A 21 02 F6 | 	mov	local02, arg02
187d4     54 FF BF FD | 	call	#__system___gc_ptrs
187d8     FD 22 02 F6 | 	mov	local03, result1
187dc     FE 24 02 F6 | 	mov	local04, result2
187e0     11 27 02 F6 | 	mov	local05, local03
187e4     00 28 06 F6 | 	mov	local06, #0
187e8     97 1E 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
187ec                 | LR__2560
187ec     13 2B 02 F6 | 	mov	local07, local05
187f0     06 26 06 F1 | 	add	local05, #6
187f4     13 15 EA FA | 	rdword	arg02, local05 wz
187f8     11 13 02 F6 | 	mov	arg01, local03
187fc     00 FA 05 A6 |  if_e	mov	result1, #0
18800     04 14 66 50 |  if_ne	shl	arg02, #4
18804     0A 13 02 51 |  if_ne	add	arg01, arg02
18808     09 FB 01 56 |  if_ne	mov	result1, arg01
1880c     FD 26 0A F6 | 	mov	local05, result1 wz
18810     13 29 E2 5A |  if_ne	rdword	local06, local05
18814     00 26 0E F2 | 	cmp	local05, #0 wz
18818     12 27 52 52 |  if_ne	cmps	local05, local04 wc
1881c     08 00 90 1D |  if_a	jmp	#LR__2562
18820     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
18824     C4 FF 9F 1D |  if_a	jmp	#LR__2560
18828                 | LR__2561
18828                 | LR__2562
18828     00 26 0E F2 | 	cmp	local05, #0 wz
1882c     13 FB 01 A6 |  if_e	mov	result1, local05
18830     3C 01 90 AD |  if_e	jmp	#LR__2565
18834     13 FD 01 F6 | 	mov	result2, local05
18838     06 FC 05 F1 | 	add	result2, #6
1883c     FE 2C E2 FA | 	rdword	local08, result2
18840     14 1F 52 F2 | 	cmps	local01, local06 wc
18844     C0 00 90 3D |  if_ae	jmp	#LR__2564
18848     13 1F 52 FC | 	wrword	local01, local05
1884c     13 13 02 F6 | 	mov	arg01, local05
18850     0F 2D 02 F6 | 	mov	local08, local01
18854     04 2C 66 F0 | 	shl	local08, #4
18858     16 13 02 F1 | 	add	arg01, local08
1885c     0F 29 82 F1 | 	sub	local06, local01
18860     09 29 52 FC | 	wrword	local06, arg01
18864     09 2D 02 F6 | 	mov	local08, arg01
18868     02 2C 06 F1 | 	add	local08, #2
1886c     36 00 80 FF 
18870     16 1F 59 FC | 	wrword	##27791, local08
18874     13 15 0A F6 | 	mov	arg02, local05 wz
18878     00 FA 05 A6 |  if_e	mov	result1, #0
1887c     11 15 82 51 |  if_ne	sub	arg02, local03
18880     04 14 46 50 |  if_ne	shr	arg02, #4
18884     0A FB 01 56 |  if_ne	mov	result1, arg02
18888     09 2D 02 F6 | 	mov	local08, arg01
1888c     04 2C 06 F1 | 	add	local08, #4
18890     16 FB 51 FC | 	wrword	result1, local08
18894     13 2D 02 F6 | 	mov	local08, local05
18898     06 2C 06 F1 | 	add	local08, #6
1889c     09 15 02 F6 | 	mov	arg02, arg01
188a0     16 2D E2 FA | 	rdword	local08, local08
188a4     06 14 06 F1 | 	add	arg02, #6
188a8     0A 2D 52 FC | 	wrword	local08, arg02
188ac     09 2F 02 F6 | 	mov	local09, arg01
188b0     17 15 0A F6 | 	mov	arg02, local09 wz
188b4     00 FA 05 A6 |  if_e	mov	result1, #0
188b8     11 15 82 51 |  if_ne	sub	arg02, local03
188bc     04 14 46 50 |  if_ne	shr	arg02, #4
188c0     0A FB 01 56 |  if_ne	mov	result1, arg02
188c4     FD 2C 02 F6 | 	mov	local08, result1
188c8     09 31 EA FA | 	rdword	local10, arg01 wz
188cc     00 FA 05 A6 |  if_e	mov	result1, #0
188d0     04 30 66 50 |  if_ne	shl	local10, #4
188d4     18 13 02 51 |  if_ne	add	arg01, local10
188d8     09 FB 01 56 |  if_ne	mov	result1, arg01
188dc     FD 32 0A F6 | 	mov	local11, result1 wz
188e0     24 00 90 AD |  if_e	jmp	#LR__2563
188e4     12 33 52 F2 | 	cmps	local11, local04 wc
188e8     1C 00 90 3D |  if_ae	jmp	#LR__2563
188ec     17 15 0A F6 | 	mov	arg02, local09 wz
188f0     00 FA 05 A6 |  if_e	mov	result1, #0
188f4     11 15 82 51 |  if_ne	sub	arg02, local03
188f8     04 14 46 50 |  if_ne	shr	arg02, #4
188fc     0A FB 01 56 |  if_ne	mov	result1, arg02
18900     04 32 06 F1 | 	add	local11, #4
18904     19 FB 51 FC | 	wrword	result1, local11
18908                 | LR__2563
18908                 | LR__2564
18908     06 2A 06 F1 | 	add	local07, #6
1890c     15 2D 52 FC | 	wrword	local08, local07
18910     36 00 00 FF 
18914     80 2E 06 F6 | 	mov	local09, ##27776
18918     10 2F 42 F5 | 	or	local09, local02
1891c     00 FA 05 F6 | 	mov	result1, #0
18920     01 FA 61 FD | 	cogid	result1
18924     FD 2E 42 F5 | 	or	local09, result1
18928     13 33 02 F6 | 	mov	local11, local05
1892c     02 32 06 F1 | 	add	local11, #2
18930     19 2F 52 FC | 	wrword	local09, local11
18934     11 2F 02 F6 | 	mov	local09, local03
18938     08 2E 06 F1 | 	add	local09, #8
1893c     13 33 02 F6 | 	mov	local11, local05
18940     17 2F E2 FA | 	rdword	local09, local09
18944     06 32 06 F1 | 	add	local11, #6
18948     19 2F 52 FC | 	wrword	local09, local11
1894c     13 15 0A F6 | 	mov	arg02, local05 wz
18950     00 FA 05 A6 |  if_e	mov	result1, #0
18954     11 15 82 51 |  if_ne	sub	arg02, local03
18958     04 14 46 50 |  if_ne	shr	arg02, #4
1895c     0A FB 01 56 |  if_ne	mov	result1, arg02
18960     08 22 06 F1 | 	add	local03, #8
18964     11 FB 51 FC | 	wrword	result1, local03
18968     08 26 06 F1 | 	add	local05, #8
1896c     13 FB 01 F6 | 	mov	result1, local05
18970                 | LR__2565
18970     A7 F0 03 F6 | 	mov	ptra, fp
18974     B2 00 A0 FD | 	call	#popregs_
18978                 | __system___gc_tryalloc_ret
18978     2D 00 64 FD | 	ret
1897c                 | 
1897c                 | __system___gc_alloc_managed
1897c     01 4A 05 F6 | 	mov	COUNT_, #1
18980     A8 00 A0 FD | 	call	#pushregs_
18984     09 1F 02 F6 | 	mov	local01, arg01
18988     00 14 06 F6 | 	mov	arg02, #0
1898c     1C 00 B0 FD | 	call	#__system___gc_doalloc
18990     FD 14 0A F6 | 	mov	arg02, result1 wz
18994     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
18998     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
1899c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
189a0     A7 F0 03 F6 | 	mov	ptra, fp
189a4     B2 00 A0 FD | 	call	#popregs_
189a8                 | __system___gc_alloc_managed_ret
189a8     2D 00 64 FD | 	ret
189ac                 | 
189ac                 | __system___gc_doalloc
189ac     06 4A 05 F6 | 	mov	COUNT_, #6
189b0     A8 00 A0 FD | 	call	#pushregs_
189b4     09 1F 0A F6 | 	mov	local01, arg01 wz
189b8     0A 21 02 F6 | 	mov	local02, arg02
189bc     00 FA 05 A6 |  if_e	mov	result1, #0
189c0     8C 00 90 AD |  if_e	jmp	#LR__2577
189c4     17 1E 06 F1 | 	add	local01, #23
189c8     0F 1E 26 F5 | 	andn	local01, #15
189cc     04 1E 46 F0 | 	shr	local01, #4
189d0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
189d4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
189d8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
189dc     34 C5 BF FD | 	call	#__system___lockmem
189e0     0F 13 02 F6 | 	mov	arg01, local01
189e4     10 15 02 F6 | 	mov	arg02, local02
189e8     D8 FD BF FD | 	call	#__system___gc_tryalloc
189ec     FD 22 0A F6 | 	mov	local03, result1 wz
189f0     14 00 90 5D |  if_ne	jmp	#LR__2570
189f4     70 03 B0 FD | 	call	#__system___gc_docollect
189f8     0F 13 02 F6 | 	mov	arg01, local01
189fc     10 15 02 F6 | 	mov	arg02, local02
18a00     C0 FD BF FD | 	call	#__system___gc_tryalloc
18a04     FD 22 02 F6 | 	mov	local03, result1
18a08                 | LR__2570
18a08     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18a0c     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18a10     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18a14     09 01 68 FC | 	wrlong	#0, arg01
18a18     00 22 0E F2 | 	cmp	local03, #0 wz
18a1c     2C 00 90 AD |  if_e	jmp	#LR__2576
18a20     04 1E 66 F0 | 	shl	local01, #4
18a24     08 1E 86 F1 | 	sub	local01, #8
18a28     0F 25 52 F6 | 	abs	local04, local01 wc
18a2c     02 24 46 F0 | 	shr	local04, #2
18a30     12 27 8A F6 | 	negc	local05, local04 wz
18a34     11 29 02 F6 | 	mov	local06, local03
18a38     10 00 90 AD |  if_e	jmp	#LR__2575
18a3c     97 06 48 FB | 	callpa	#(@LR__2573-@LR__2571)>>2,fcache_load_ptr_
18a40                 | LR__2571
18a40     13 05 D8 FC | 	rep	@LR__2574, local05
18a44                 | LR__2572
18a44     14 01 68 FC | 	wrlong	#0, local06
18a48     04 28 06 F1 | 	add	local06, #4
18a4c                 | LR__2573
18a4c                 | LR__2574
18a4c                 | LR__2575
18a4c                 | LR__2576
18a4c     11 FB 01 F6 | 	mov	result1, local03
18a50                 | LR__2577
18a50     A7 F0 03 F6 | 	mov	ptra, fp
18a54     B2 00 A0 FD | 	call	#popregs_
18a58                 | __system___gc_doalloc_ret
18a58     2D 00 64 FD | 	ret
18a5c                 | 
18a5c                 | __system___gc_isvalidptr
18a5c     F8 16 06 F4 | 	bitl	arg03, #248
18a60     08 16 86 F1 | 	sub	arg03, #8
18a64     09 17 52 F2 | 	cmps	arg03, arg01 wc
18a68     08 00 90 CD |  if_b	jmp	#LR__2580
18a6c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
18a70     08 00 90 CD |  if_b	jmp	#LR__2581
18a74                 | LR__2580
18a74     00 FA 05 F6 | 	mov	result1, #0
18a78     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
18a7c                 | LR__2581
18a7c     0B 01 02 F6 | 	mov	_var01, arg03
18a80     09 01 62 F5 | 	xor	_var01, arg01
18a84     0F 00 CE F7 | 	test	_var01, #15 wz
18a88     00 FA 05 56 |  if_ne	mov	result1, #0
18a8c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
18a90     0B 01 02 F6 | 	mov	_var01, arg03
18a94     02 00 06 F1 | 	add	_var01, #2
18a98     00 01 E2 FA | 	rdword	_var01, _var01
18a9c     7F 00 00 FF 
18aa0     C0 01 06 F5 | 	and	_var01, ##65472
18aa4     36 00 00 FF 
18aa8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
18aac     00 FA 05 56 |  if_ne	mov	result1, #0
18ab0     0B FB 01 A6 |  if_e	mov	result1, arg03
18ab4                 | __system___gc_isvalidptr_ret
18ab4     2D 00 64 FD | 	ret
18ab8                 | 
18ab8                 | __system___gc_free
18ab8     09 17 02 F6 | 	mov	arg03, arg01
18abc     6C FC BF FD | 	call	#__system___gc_ptrs
18ac0     FD 12 02 F6 | 	mov	arg01, result1
18ac4     FE 14 02 F6 | 	mov	arg02, result2
18ac8     90 FF BF FD | 	call	#__system___gc_isvalidptr
18acc     FD 14 0A F6 | 	mov	arg02, result1 wz
18ad0     28 00 90 AD |  if_e	jmp	#LR__2590
18ad4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18ad8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18adc     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18ae0     30 C4 BF FD | 	call	#__system___lockmem
18ae4     0A 13 02 F6 | 	mov	arg01, arg02
18ae8     14 00 B0 FD | 	call	#__system___gc_dofree
18aec     1C E8 05 F1 | 	add	ptr___system__dat__, #28
18af0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
18af4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
18af8     09 01 68 FC | 	wrlong	#0, arg01
18afc                 | LR__2590
18afc                 | __system___gc_free_ret
18afc     2D 00 64 FD | 	ret
18b00                 | 
18b00                 | __system___gc_dofree
18b00     06 4A 05 F6 | 	mov	COUNT_, #6
18b04     A8 00 A0 FD | 	call	#pushregs_
18b08     09 1F 02 F6 | 	mov	local01, arg01
18b0c     1C FC BF FD | 	call	#__system___gc_ptrs
18b10     FD 20 02 F6 | 	mov	local02, result1
18b14     FE 22 02 F6 | 	mov	local03, result2
18b18     0F 15 02 F6 | 	mov	arg02, local01
18b1c     02 14 06 F1 | 	add	arg02, #2
18b20     36 00 80 FF 
18b24     0A 1F 59 FC | 	wrword	##27791, arg02
18b28     0F 25 02 F6 | 	mov	local04, local01
18b2c     0F 13 02 F6 | 	mov	arg01, local01
18b30     09 27 EA FA | 	rdword	local05, arg01 wz
18b34     00 FA 05 A6 |  if_e	mov	result1, #0
18b38     04 26 66 50 |  if_ne	shl	local05, #4
18b3c     13 13 02 51 |  if_ne	add	arg01, local05
18b40     09 FB 01 56 |  if_ne	mov	result1, arg01
18b44     FD 28 02 F6 | 	mov	local06, result1
18b48     97 24 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
18b4c                 | LR__2600
18b4c     04 24 06 F1 | 	add	local04, #4
18b50     12 15 EA FA | 	rdword	arg02, local04 wz
18b54     10 13 02 F6 | 	mov	arg01, local02
18b58     00 FA 05 A6 |  if_e	mov	result1, #0
18b5c     04 14 66 50 |  if_ne	shl	arg02, #4
18b60     0A 13 02 51 |  if_ne	add	arg01, arg02
18b64     09 FB 01 56 |  if_ne	mov	result1, arg01
18b68     FD 24 0A F6 | 	mov	local04, result1 wz
18b6c     24 00 90 AD |  if_e	jmp	#LR__2602
18b70     12 13 02 F6 | 	mov	arg01, local04
18b74     00 FA 05 F6 | 	mov	result1, #0
18b78     02 12 06 F1 | 	add	arg01, #2
18b7c     09 13 E2 FA | 	rdword	arg01, arg01
18b80     36 00 00 FF 
18b84     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
18b88     01 FA 65 A6 |  if_e	neg	result1, #1
18b8c     00 FA 0D F2 | 	cmp	result1, #0 wz
18b90     B8 FF 9F AD |  if_e	jmp	#LR__2600
18b94                 | LR__2601
18b94                 | LR__2602
18b94     00 24 0E F2 | 	cmp	local04, #0 wz
18b98     10 25 02 A6 |  if_e	mov	local04, local02
18b9c     12 15 02 F6 | 	mov	arg02, local04
18ba0     06 14 06 F1 | 	add	arg02, #6
18ba4     0F 13 02 F6 | 	mov	arg01, local01
18ba8     0A 15 E2 FA | 	rdword	arg02, arg02
18bac     06 12 06 F1 | 	add	arg01, #6
18bb0     09 15 52 FC | 	wrword	arg02, arg01
18bb4     0F 15 0A F6 | 	mov	arg02, local01 wz
18bb8     00 FA 05 A6 |  if_e	mov	result1, #0
18bbc     10 15 82 51 |  if_ne	sub	arg02, local02
18bc0     04 14 46 50 |  if_ne	shr	arg02, #4
18bc4     0A FB 01 56 |  if_ne	mov	result1, arg02
18bc8     12 15 02 F6 | 	mov	arg02, local04
18bcc     06 14 06 F1 | 	add	arg02, #6
18bd0     0A FB 51 FC | 	wrword	result1, arg02
18bd4     10 25 0A F2 | 	cmp	local04, local02 wz
18bd8     A4 00 90 AD |  if_e	jmp	#LR__2605
18bdc     12 13 02 F6 | 	mov	arg01, local04
18be0     09 27 EA FA | 	rdword	local05, arg01 wz
18be4     00 FA 05 A6 |  if_e	mov	result1, #0
18be8     04 26 66 50 |  if_ne	shl	local05, #4
18bec     13 13 02 51 |  if_ne	add	arg01, local05
18bf0     09 FB 01 56 |  if_ne	mov	result1, arg01
18bf4     0F FB 09 F2 | 	cmp	result1, local01 wz
18bf8     84 00 90 5D |  if_ne	jmp	#LR__2604
18bfc     12 29 E2 FA | 	rdword	local06, local04
18c00     0F 15 E2 FA | 	rdword	arg02, local01
18c04     0A 29 02 F1 | 	add	local06, arg02
18c08     12 29 52 FC | 	wrword	local06, local04
18c0c     0F 29 02 F6 | 	mov	local06, local01
18c10     02 28 06 F1 | 	add	local06, #2
18c14     14 01 58 FC | 	wrword	#0, local06
18c18     0F 13 02 F6 | 	mov	arg01, local01
18c1c     09 27 EA FA | 	rdword	local05, arg01 wz
18c20     00 FA 05 A6 |  if_e	mov	result1, #0
18c24     04 26 66 50 |  if_ne	shl	local05, #4
18c28     13 13 02 51 |  if_ne	add	arg01, local05
18c2c     09 FB 01 56 |  if_ne	mov	result1, arg01
18c30     FD 28 02 F6 | 	mov	local06, result1
18c34     11 29 52 F2 | 	cmps	local06, local03 wc
18c38     20 00 90 3D |  if_ae	jmp	#LR__2603
18c3c     12 15 0A F6 | 	mov	arg02, local04 wz
18c40     00 FA 05 A6 |  if_e	mov	result1, #0
18c44     10 15 82 51 |  if_ne	sub	arg02, local02
18c48     04 14 46 50 |  if_ne	shr	arg02, #4
18c4c     0A FB 01 56 |  if_ne	mov	result1, arg02
18c50     14 15 02 F6 | 	mov	arg02, local06
18c54     04 14 06 F1 | 	add	arg02, #4
18c58     0A FB 51 FC | 	wrword	result1, arg02
18c5c                 | LR__2603
18c5c     0F 15 02 F6 | 	mov	arg02, local01
18c60     06 14 06 F1 | 	add	arg02, #6
18c64     12 FD 01 F6 | 	mov	result2, local04
18c68     0A 15 E2 FA | 	rdword	arg02, arg02
18c6c     06 FC 05 F1 | 	add	result2, #6
18c70     FE 14 52 FC | 	wrword	arg02, result2
18c74     06 1E 06 F1 | 	add	local01, #6
18c78     0F 01 58 FC | 	wrword	#0, local01
18c7c     12 1F 02 F6 | 	mov	local01, local04
18c80                 | LR__2604
18c80                 | LR__2605
18c80     0F 13 02 F6 | 	mov	arg01, local01
18c84     09 27 EA FA | 	rdword	local05, arg01 wz
18c88     00 FA 05 A6 |  if_e	mov	result1, #0
18c8c     04 26 66 50 |  if_ne	shl	local05, #4
18c90     13 13 02 51 |  if_ne	add	arg01, local05
18c94     09 FB 01 56 |  if_ne	mov	result1, arg01
18c98     FD 14 0A F6 | 	mov	arg02, result1 wz
18c9c     B8 00 90 AD |  if_e	jmp	#LR__2607
18ca0     11 15 52 F2 | 	cmps	arg02, local03 wc
18ca4     B0 00 90 3D |  if_ae	jmp	#LR__2607
18ca8     0A 13 02 F6 | 	mov	arg01, arg02
18cac     00 FA 05 F6 | 	mov	result1, #0
18cb0     02 12 06 F1 | 	add	arg01, #2
18cb4     09 13 E2 FA | 	rdword	arg01, arg01
18cb8     36 00 00 FF 
18cbc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
18cc0     01 FA 65 A6 |  if_e	neg	result1, #1
18cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
18cc8     8C 00 90 AD |  if_e	jmp	#LR__2607
18ccc     0F 25 02 F6 | 	mov	local04, local01
18cd0     12 29 E2 FA | 	rdword	local06, local04
18cd4     0A 13 02 F6 | 	mov	arg01, arg02
18cd8     09 1F E2 FA | 	rdword	local01, arg01
18cdc     0F 29 02 F1 | 	add	local06, local01
18ce0     12 29 52 FC | 	wrword	local06, local04
18ce4     09 29 02 F6 | 	mov	local06, arg01
18ce8     06 28 06 F1 | 	add	local06, #6
18cec     12 1F 02 F6 | 	mov	local01, local04
18cf0     14 29 E2 FA | 	rdword	local06, local06
18cf4     06 1E 06 F1 | 	add	local01, #6
18cf8     0F 29 52 FC | 	wrword	local06, local01
18cfc     09 29 02 F6 | 	mov	local06, arg01
18d00     02 28 06 F1 | 	add	local06, #2
18d04     14 55 59 FC | 	wrword	#170, local06
18d08     09 29 02 F6 | 	mov	local06, arg01
18d0c     06 28 06 F1 | 	add	local06, #6
18d10     14 01 58 FC | 	wrword	#0, local06
18d14     09 27 EA FA | 	rdword	local05, arg01 wz
18d18     00 FA 05 A6 |  if_e	mov	result1, #0
18d1c     04 26 66 50 |  if_ne	shl	local05, #4
18d20     13 13 02 51 |  if_ne	add	arg01, local05
18d24     09 FB 01 56 |  if_ne	mov	result1, arg01
18d28     FD 28 0A F6 | 	mov	local06, result1 wz
18d2c     28 00 90 AD |  if_e	jmp	#LR__2606
18d30     11 29 52 F2 | 	cmps	local06, local03 wc
18d34     20 00 90 3D |  if_ae	jmp	#LR__2606
18d38     12 15 0A F6 | 	mov	arg02, local04 wz
18d3c     00 FA 05 A6 |  if_e	mov	result1, #0
18d40     10 15 82 51 |  if_ne	sub	arg02, local02
18d44     04 14 46 50 |  if_ne	shr	arg02, #4
18d48     0A FB 01 56 |  if_ne	mov	result1, arg02
18d4c     14 25 02 F6 | 	mov	local04, local06
18d50     04 24 06 F1 | 	add	local04, #4
18d54     12 FB 51 FC | 	wrword	result1, local04
18d58                 | LR__2606
18d58                 | LR__2607
18d58     14 FB 01 F6 | 	mov	result1, local06
18d5c     A7 F0 03 F6 | 	mov	ptra, fp
18d60     B2 00 A0 FD | 	call	#popregs_
18d64                 | __system___gc_dofree_ret
18d64     2D 00 64 FD | 	ret
18d68                 | 
18d68                 | __system___gc_docollect
18d68     05 4A 05 F6 | 	mov	COUNT_, #5
18d6c     A8 00 A0 FD | 	call	#pushregs_
18d70     B8 F9 BF FD | 	call	#__system___gc_ptrs
18d74     FE 1E 02 F6 | 	mov	local01, result2
18d78     FD 20 02 F6 | 	mov	local02, result1
18d7c     10 13 02 F6 | 	mov	arg01, local02
18d80     09 23 EA FA | 	rdword	local03, arg01 wz
18d84     00 FA 05 A6 |  if_e	mov	result1, #0
18d88     04 22 66 50 |  if_ne	shl	local03, #4
18d8c     11 13 02 51 |  if_ne	add	arg01, local03
18d90     09 FB 01 56 |  if_ne	mov	result1, arg01
18d94     FD 24 0A F6 | 	mov	local04, result1 wz
18d98     00 FA 05 F6 | 	mov	result1, #0
18d9c     01 FA 61 FD | 	cogid	result1
18da0     FD 26 02 F6 | 	mov	local05, result1
18da4     48 00 90 AD |  if_e	jmp	#LR__2612
18da8     97 22 48 FB | 	callpa	#(@LR__2611-@LR__2610)>>2,fcache_load_ptr_
18dac                 | LR__2610
18dac     0F 25 52 F2 | 	cmps	local04, local01 wc
18db0     3C 00 90 3D |  if_ae	jmp	#LR__2612
18db4     12 15 02 F6 | 	mov	arg02, local04
18db8     02 14 06 F1 | 	add	arg02, #2
18dbc     0A 15 E2 FA | 	rdword	arg02, arg02
18dc0     20 14 26 F5 | 	andn	arg02, #32
18dc4     12 13 02 F6 | 	mov	arg01, local04
18dc8     02 12 06 F1 | 	add	arg01, #2
18dcc     09 15 52 FC | 	wrword	arg02, arg01
18dd0     12 13 02 F6 | 	mov	arg01, local04
18dd4     09 23 EA FA | 	rdword	local03, arg01 wz
18dd8     00 FA 05 A6 |  if_e	mov	result1, #0
18ddc     04 22 66 50 |  if_ne	shl	local03, #4
18de0     11 13 02 51 |  if_ne	add	arg01, local03
18de4     09 FB 01 56 |  if_ne	mov	result1, arg01
18de8     FD 24 0A F6 | 	mov	local04, result1 wz
18dec     BC FF 9F 5D |  if_ne	jmp	#LR__2610
18df0                 | LR__2611
18df0                 | LR__2612
18df0     00 22 06 F6 | 	mov	local03, #0
18df4     00 12 06 F6 | 	mov	arg01, #0
18df8     F0 C0 BF FD | 	call	#__system____topofstack
18dfc     FD 14 02 F6 | 	mov	arg02, result1
18e00     11 13 02 F6 | 	mov	arg01, local03
18e04     90 00 B0 FD | 	call	#__system___gc_markhub
18e08     1C 01 B0 FD | 	call	#__system___gc_markcog
18e0c     10 13 02 F6 | 	mov	arg01, local02
18e10     09 23 EA FA | 	rdword	local03, arg01 wz
18e14     00 FA 05 A6 |  if_e	mov	result1, #0
18e18     04 22 66 50 |  if_ne	shl	local03, #4
18e1c     11 13 02 51 |  if_ne	add	arg01, local03
18e20     09 FB 01 56 |  if_ne	mov	result1, arg01
18e24     FD 20 0A F6 | 	mov	local02, result1 wz
18e28     60 00 90 AD |  if_e	jmp	#LR__2616
18e2c                 | LR__2613
18e2c     10 25 02 F6 | 	mov	local04, local02
18e30     12 13 02 F6 | 	mov	arg01, local04
18e34     09 23 EA FA | 	rdword	local03, arg01 wz
18e38     00 FA 05 A6 |  if_e	mov	result1, #0
18e3c     04 22 66 50 |  if_ne	shl	local03, #4
18e40     11 13 02 51 |  if_ne	add	arg01, local03
18e44     09 FB 01 56 |  if_ne	mov	result1, arg01
18e48     FD 20 02 F6 | 	mov	local02, result1
18e4c     12 15 02 F6 | 	mov	arg02, local04
18e50     02 14 06 F1 | 	add	arg02, #2
18e54     0A 15 E2 FA | 	rdword	arg02, arg02
18e58     20 14 CE F7 | 	test	arg02, #32 wz
18e5c     10 14 CE A7 |  if_e	test	arg02, #16 wz
18e60     1C 00 90 5D |  if_ne	jmp	#LR__2615
18e64     0A 15 42 F8 | 	getnib	arg02, arg02, #0
18e68     13 15 0A F2 | 	cmp	arg02, local05 wz
18e6c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
18e70     0C 00 90 5D |  if_ne	jmp	#LR__2614
18e74     12 13 02 F6 | 	mov	arg01, local04
18e78     84 FC BF FD | 	call	#__system___gc_dofree
18e7c     FD 20 02 F6 | 	mov	local02, result1
18e80                 | LR__2614
18e80                 | LR__2615
18e80     00 20 0E F2 | 	cmp	local02, #0 wz
18e84     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
18e88     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2613
18e8c                 | LR__2616
18e8c     A7 F0 03 F6 | 	mov	ptra, fp
18e90     B2 00 A0 FD | 	call	#popregs_
18e94                 | __system___gc_docollect_ret
18e94     2D 00 64 FD | 	ret
18e98                 | 
18e98                 | __system___gc_markhub
18e98     04 4A 05 F6 | 	mov	COUNT_, #4
18e9c     A8 00 A0 FD | 	call	#pushregs_
18ea0     09 1F 02 F6 | 	mov	local01, arg01
18ea4     0A 21 02 F6 | 	mov	local02, arg02
18ea8     80 F8 BF FD | 	call	#__system___gc_ptrs
18eac     FD 22 02 F6 | 	mov	local03, result1
18eb0     FE 24 02 F6 | 	mov	local04, result2
18eb4                 | LR__2620
18eb4     10 1F 52 F2 | 	cmps	local01, local02 wc
18eb8     60 00 90 3D |  if_ae	jmp	#LR__2621
18ebc     0F 17 02 FB | 	rdlong	arg03, local01
18ec0     04 1E 06 F1 | 	add	local01, #4
18ec4     12 15 02 F6 | 	mov	arg02, local04
18ec8     11 13 02 F6 | 	mov	arg01, local03
18ecc     8C FB BF FD | 	call	#__system___gc_isvalidptr
18ed0     FD 16 0A F6 | 	mov	arg03, result1 wz
18ed4     DC FF 9F AD |  if_e	jmp	#LR__2620
18ed8     0B 13 02 F6 | 	mov	arg01, arg03
18edc     00 FA 05 F6 | 	mov	result1, #0
18ee0     02 12 06 F1 | 	add	arg01, #2
18ee4     09 13 E2 FA | 	rdword	arg01, arg01
18ee8     36 00 00 FF 
18eec     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
18ef0     01 FA 65 A6 |  if_e	neg	result1, #1
18ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
18ef8     B8 FF 9F 5D |  if_ne	jmp	#LR__2620
18efc     0B FD 01 F6 | 	mov	result2, arg03
18f00     02 FC 05 F1 | 	add	result2, #2
18f04     FE FC E1 FA | 	rdword	result2, result2
18f08     0F FC 25 F5 | 	andn	result2, #15
18f0c     2E FC 45 F5 | 	or	result2, #46
18f10     02 16 06 F1 | 	add	arg03, #2
18f14     0B FD 51 FC | 	wrword	result2, arg03
18f18     98 FF 9F FD | 	jmp	#LR__2620
18f1c                 | LR__2621
18f1c     A7 F0 03 F6 | 	mov	ptra, fp
18f20     B2 00 A0 FD | 	call	#popregs_
18f24                 | __system___gc_markhub_ret
18f24     2D 00 64 FD | 	ret
18f28                 | 
18f28                 | __system___gc_markcog
18f28     04 4A 05 F6 | 	mov	COUNT_, #4
18f2c     A8 00 A0 FD | 	call	#pushregs_
18f30     F8 F7 BF FD | 	call	#__system___gc_ptrs
18f34     FD 1E 02 F6 | 	mov	local01, result1
18f38     FE 20 02 F6 | 	mov	local02, result2
18f3c     EF 23 06 F6 | 	mov	local03, #495
18f40                 | LR__2630
18f40                 | 	'.live	local03
18f40     00 22 96 F9 | 	alts	local03, #0
18f44     11 25 02 F6 | 	mov	local04, local03
18f48     0F 13 02 F6 | 	mov	arg01, local01
18f4c     10 15 02 F6 | 	mov	arg02, local02
18f50     12 17 02 F6 | 	mov	arg03, local04
18f54     04 FB BF FD | 	call	#__system___gc_isvalidptr
18f58     00 FA 0D F2 | 	cmp	result1, #0 wz
18f5c     18 00 90 AD |  if_e	jmp	#LR__2631
18f60     FD 24 02 F6 | 	mov	local04, result1
18f64     02 24 06 F1 | 	add	local04, #2
18f68     12 25 E2 FA | 	rdword	local04, local04
18f6c     20 24 46 F5 | 	or	local04, #32
18f70     02 FA 05 F1 | 	add	result1, #2
18f74     FD 24 52 FC | 	wrword	local04, result1
18f78                 | LR__2631
18f78     01 22 86 F1 | 	sub	local03, #1
18f7c     00 22 56 F2 | 	cmps	local03, #0 wc
18f80     BC FF 9F 3D |  if_ae	jmp	#LR__2630
18f84     A7 F0 03 F6 | 	mov	ptra, fp
18f88     B2 00 A0 FD | 	call	#popregs_
18f8c                 | __system___gc_markcog_ret
18f8c     2D 00 64 FD | 	ret
18f90                 | 
18f90                 | __system__opendir
18f90     06 4A 05 F6 | 	mov	COUNT_, #6
18f94     A8 00 A0 FD | 	call	#pushregs_
18f98     84 E9 05 F1 | 	add	ptr___system__dat__, #388
18f9c     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
18fa0     09 15 02 F6 | 	mov	arg02, arg01
18fa4     0F 13 02 F6 | 	mov	arg01, local01
18fa8     00 16 06 F6 | 	mov	arg03, #0
18fac     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
18fb0     F8 C6 BF FD | 	call	#__system____getvfsforfile
18fb4     FD 20 0A F6 | 	mov	local02, result1 wz
18fb8     10 00 90 AD |  if_e	jmp	#LR__2640
18fbc     28 20 06 F1 | 	add	local02, #40
18fc0     10 17 0A FB | 	rdlong	arg03, local02 wz
18fc4     28 20 86 F1 | 	sub	local02, #40
18fc8     14 00 90 5D |  if_ne	jmp	#LR__2641
18fcc                 | LR__2640
18fcc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
18fd0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
18fd4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
18fd8     00 FA 05 F6 | 	mov	result1, #0
18fdc     90 00 90 FD | 	jmp	#LR__2643
18fe0                 | LR__2641
18fe0     5C 12 06 F6 | 	mov	arg01, #92
18fe4     10 14 06 F6 | 	mov	arg02, #16
18fe8     C0 F9 BF FD | 	call	#__system___gc_doalloc
18fec     FD 22 0A F6 | 	mov	local03, result1 wz
18ff0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
18ff4     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
18ff8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
18ffc     00 FA 05 A6 |  if_e	mov	result1, #0
19000     6C 00 90 AD |  if_e	jmp	#LR__2643
19004     28 20 06 F1 | 	add	local02, #40
19008     10 25 02 FB | 	rdlong	local04, local02
1900c     12 27 02 F6 | 	mov	local05, local04
19010     28 20 86 F1 | 	sub	local02, #40
19014     13 26 46 F7 | 	zerox	local05, #19
19018     14 24 46 F0 | 	shr	local04, #20
1901c     02 24 66 F0 | 	shl	local04, #2
19020     ED 24 02 F1 | 	add	local04, __methods__
19024     12 25 02 FB | 	rdlong	local04, local04
19028     11 13 02 F6 | 	mov	arg01, local03
1902c     0F 15 02 F6 | 	mov	arg02, local01
19030     F2 28 02 F6 | 	mov	local06, objptr
19034     13 E5 01 F6 | 	mov	objptr, local05
19038     2D 24 62 FD | 	call	local04
1903c     14 E5 01 F6 | 	mov	objptr, local06
19040     FD 16 0A F6 | 	mov	arg03, result1 wz
19044     20 00 90 AD |  if_e	jmp	#LR__2642
19048     00 16 4E F2 | 	cmps	arg03, #0 wz
1904c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19050     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
19054     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19058     11 13 02 F6 | 	mov	arg01, local03
1905c     58 FA BF FD | 	call	#__system___gc_free
19060     00 FA 05 F6 | 	mov	result1, #0
19064     08 00 90 FD | 	jmp	#LR__2643
19068                 | LR__2642
19068     11 21 62 FC | 	wrlong	local02, local03
1906c     11 FB 01 F6 | 	mov	result1, local03
19070                 | LR__2643
19070     A7 F0 03 F6 | 	mov	ptra, fp
19074     B2 00 A0 FD | 	call	#popregs_
19078                 | __system__opendir_ret
19078     2D 00 64 FD | 	ret
1907c                 | 
1907c                 | __system__closedir
1907c     04 4A 05 F6 | 	mov	COUNT_, #4
19080     A8 00 A0 FD | 	call	#pushregs_
19084     09 1F 02 F6 | 	mov	local01, arg01
19088     0F 13 02 FB | 	rdlong	arg01, local01
1908c     2C 12 06 F1 | 	add	arg01, #44
19090     09 21 02 FB | 	rdlong	local02, arg01
19094     10 23 02 F6 | 	mov	local03, local02
19098     13 22 46 F7 | 	zerox	local03, #19
1909c     14 20 46 F0 | 	shr	local02, #20
190a0     02 20 66 F0 | 	shl	local02, #2
190a4     ED 20 02 F1 | 	add	local02, __methods__
190a8     10 21 02 FB | 	rdlong	local02, local02
190ac     0F 13 02 F6 | 	mov	arg01, local01
190b0     F2 24 02 F6 | 	mov	local04, objptr
190b4     11 E5 01 F6 | 	mov	objptr, local03
190b8     2D 20 62 FD | 	call	local02
190bc     12 E5 01 F6 | 	mov	objptr, local04
190c0     FD 24 02 F6 | 	mov	local04, result1
190c4     0F 13 02 F6 | 	mov	arg01, local01
190c8     EC F9 BF FD | 	call	#__system___gc_free
190cc     00 24 4E F2 | 	cmps	local04, #0 wz
190d0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
190d4     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
190d8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
190dc     01 FA 65 56 |  if_ne	neg	result1, #1
190e0     00 FA 05 A6 |  if_e	mov	result1, #0
190e4     A7 F0 03 F6 | 	mov	ptra, fp
190e8     B2 00 A0 FD | 	call	#popregs_
190ec                 | __system__closedir_ret
190ec     2D 00 64 FD | 	ret
190f0                 | 
190f0                 | __system__readdir
190f0     04 4A 05 F6 | 	mov	COUNT_, #4
190f4     A8 00 A0 FD | 	call	#pushregs_
190f8     09 15 0A FB | 	rdlong	arg02, arg01 wz
190fc     08 12 06 F1 | 	add	arg01, #8
19100     09 1F 02 F6 | 	mov	local01, arg01
19104     08 12 86 F1 | 	sub	arg01, #8
19108     00 FA 05 A6 |  if_e	mov	result1, #0
1910c     5C 00 90 AD |  if_e	jmp	#LR__2651
19110     30 14 06 F1 | 	add	arg02, #48
19114     0A 21 02 FB | 	rdlong	local02, arg02
19118     10 23 02 F6 | 	mov	local03, local02
1911c     13 22 46 F7 | 	zerox	local03, #19
19120     14 20 46 F0 | 	shr	local02, #20
19124     02 20 66 F0 | 	shl	local02, #2
19128     ED 20 02 F1 | 	add	local02, __methods__
1912c     10 21 02 FB | 	rdlong	local02, local02
19130     0F 15 02 F6 | 	mov	arg02, local01
19134     F2 24 02 F6 | 	mov	local04, objptr
19138     11 E5 01 F6 | 	mov	objptr, local03
1913c     2D 20 62 FD | 	call	local02
19140     12 E5 01 F6 | 	mov	objptr, local04
19144     00 FA 4D F2 | 	cmps	result1, #0 wz
19148     1C 00 90 AD |  if_e	jmp	#LR__2650
1914c     01 FA 55 F2 | 	cmps	result1, #1 wc
19150     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
19154     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19158     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1915c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19160     00 FA 05 F6 | 	mov	result1, #0
19164     04 00 90 FD | 	jmp	#LR__2651
19168                 | LR__2650
19168     0F FB 01 F6 | 	mov	result1, local01
1916c                 | LR__2651
1916c     A7 F0 03 F6 | 	mov	ptra, fp
19170     B2 00 A0 FD | 	call	#popregs_
19174                 | __system__readdir_ret
19174     2D 00 64 FD | 	ret
19178                 | 
19178                 | __system___openraw
19178     15 4A 05 F6 | 	mov	COUNT_, #21
1917c     A8 00 A0 FD | 	call	#pushregs_
19180     09 1F 02 F6 | 	mov	local01, arg01
19184     0A 21 02 F6 | 	mov	local02, arg02
19188     0B 23 02 F6 | 	mov	local03, arg03
1918c     0C 25 02 F6 | 	mov	local04, arg04
19190     04 26 06 F6 | 	mov	local05, #4
19194     0F 29 02 F6 | 	mov	local06, local01
19198     00 2A 06 F6 | 	mov	local07, #0
1919c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
191a0     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
191a4     16 13 02 F6 | 	mov	arg01, local08
191a8     10 15 02 F6 | 	mov	arg02, local02
191ac     00 16 06 F6 | 	mov	arg03, #0
191b0     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
191b4     F4 C4 BF FD | 	call	#__system____getvfsforfile
191b8     FD 2E 0A F6 | 	mov	local09, result1 wz
191bc     10 00 90 AD |  if_e	jmp	#LR__2660
191c0     20 2E 06 F1 | 	add	local09, #32
191c4     17 FB 09 FB | 	rdlong	result1, local09 wz
191c8     20 2E 86 F1 | 	sub	local09, #32
191cc     14 00 90 5D |  if_ne	jmp	#LR__2661
191d0                 | LR__2660
191d0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
191d4     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
191d8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
191dc     01 FA 65 F6 | 	neg	result1, #1
191e0     8C 02 90 FD | 	jmp	#LR__2674
191e4                 | LR__2661
191e4     14 13 02 F6 | 	mov	arg01, local06
191e8     00 14 06 F6 | 	mov	arg02, #0
191ec     34 16 06 F6 | 	mov	arg03, #52
191f0     09 31 02 F6 | 	mov	local10, arg01
191f4     98 00 A0 FD | 	call	#\builtin_bytefill_
191f8     20 2E 06 F1 | 	add	local09, #32
191fc     17 33 02 FB | 	rdlong	local11, local09
19200     19 35 02 F6 | 	mov	local12, local11
19204     19 37 02 F6 | 	mov	local13, local11
19208     20 2E 86 F1 | 	sub	local09, #32
1920c     1B 39 02 F6 | 	mov	local14, local13
19210     13 34 46 F7 | 	zerox	local12, #19
19214     14 38 46 F0 | 	shr	local14, #20
19218     02 38 66 F0 | 	shl	local14, #2
1921c     ED 38 02 F1 | 	add	local14, __methods__
19220     1C 39 02 FB | 	rdlong	local14, local14
19224     14 3B 02 F6 | 	mov	local15, local06
19228     16 3D 02 F6 | 	mov	local16, local08
1922c     11 3F 02 F6 | 	mov	local17, local03
19230     1D 13 02 F6 | 	mov	arg01, local15
19234     1E 15 02 F6 | 	mov	arg02, local16
19238     1F 17 02 F6 | 	mov	arg03, local17
1923c     F2 40 02 F6 | 	mov	local18, objptr
19240     1A E5 01 F6 | 	mov	objptr, local12
19244     2D 38 62 FD | 	call	local14
19248     20 E5 01 F6 | 	mov	objptr, local18
1924c     FD 42 0A F6 | 	mov	local19, result1 wz
19250     04 22 CE 57 |  if_ne	test	local03, #4 wz
19254     58 00 90 AD |  if_e	jmp	#LR__2662
19258     24 2E 06 F1 | 	add	local09, #36
1925c     17 33 02 FB | 	rdlong	local11, local09
19260     19 35 02 F6 | 	mov	local12, local11
19264     19 37 02 F6 | 	mov	local13, local11
19268     24 2E 86 F1 | 	sub	local09, #36
1926c     1B 39 02 F6 | 	mov	local14, local13
19270     13 34 46 F7 | 	zerox	local12, #19
19274     14 38 46 F0 | 	shr	local14, #20
19278     02 38 66 F0 | 	shl	local14, #2
1927c     ED 38 02 F1 | 	add	local14, __methods__
19280     1C 39 02 FB | 	rdlong	local14, local14
19284     14 3B 02 F6 | 	mov	local15, local06
19288     16 3D 02 F6 | 	mov	local16, local08
1928c     12 3F 02 F6 | 	mov	local17, local04
19290     1D 13 02 F6 | 	mov	arg01, local15
19294     1E 15 02 F6 | 	mov	arg02, local16
19298     1F 17 02 F6 | 	mov	arg03, local17
1929c     F2 40 02 F6 | 	mov	local18, objptr
192a0     1A E5 01 F6 | 	mov	objptr, local12
192a4     2D 38 62 FD | 	call	local14
192a8     20 E5 01 F6 | 	mov	objptr, local18
192ac     FD 42 02 F6 | 	mov	local19, result1
192b0                 | LR__2662
192b0     00 42 0E F2 | 	cmp	local19, #0 wz
192b4     8C 01 90 5D |  if_ne	jmp	#LR__2672
192b8     11 45 02 F6 | 	mov	local20, local03
192bc     03 44 0E F5 | 	and	local20, #3 wz
192c0     02 26 46 55 |  if_ne	or	local05, #2
192c4     01 44 0E F2 | 	cmp	local20, #1 wz
192c8     01 26 46 55 |  if_ne	or	local05, #1
192cc     20 22 CE F7 | 	test	local03, #32 wz
192d0     C0 26 46 55 |  if_ne	or	local05, #192
192d4     08 28 06 F1 | 	add	local06, #8
192d8     14 27 62 FC | 	wrlong	local05, local06
192dc     0C 28 06 F1 | 	add	local06, #12
192e0     14 47 0A FB | 	rdlong	local21, local06 wz
192e4     14 28 86 F1 | 	sub	local06, #20
192e8     18 00 90 5D |  if_ne	jmp	#LR__2663
192ec     04 2E 06 F1 | 	add	local09, #4
192f0     17 47 02 FB | 	rdlong	local21, local09
192f4     04 2E 86 F1 | 	sub	local09, #4
192f8     14 28 06 F1 | 	add	local06, #20
192fc     14 47 62 FC | 	wrlong	local21, local06
19300     14 28 86 F1 | 	sub	local06, #20
19304                 | LR__2663
19304     18 28 06 F1 | 	add	local06, #24
19308     14 47 0A FB | 	rdlong	local21, local06 wz
1930c     18 28 86 F1 | 	sub	local06, #24
19310     18 00 90 5D |  if_ne	jmp	#LR__2664
19314     08 2E 06 F1 | 	add	local09, #8
19318     17 47 02 FB | 	rdlong	local21, local09
1931c     08 2E 86 F1 | 	sub	local09, #8
19320     18 28 06 F1 | 	add	local06, #24
19324     14 47 62 FC | 	wrlong	local21, local06
19328     18 28 86 F1 | 	sub	local06, #24
1932c                 | LR__2664
1932c     24 28 06 F1 | 	add	local06, #36
19330     14 47 0A FB | 	rdlong	local21, local06 wz
19334     24 28 86 F1 | 	sub	local06, #36
19338     17 47 02 AB |  if_e	rdlong	local21, local09
1933c     24 28 06 A1 |  if_e	add	local06, #36
19340     14 47 62 AC |  if_e	wrlong	local21, local06
19344     24 28 86 A1 |  if_e	sub	local06, #36
19348     28 28 06 F1 | 	add	local06, #40
1934c     14 47 0A FB | 	rdlong	local21, local06 wz
19350     28 28 86 F1 | 	sub	local06, #40
19354     18 00 90 5D |  if_ne	jmp	#LR__2665
19358     10 2E 06 F1 | 	add	local09, #16
1935c     17 47 02 FB | 	rdlong	local21, local09
19360     10 2E 86 F1 | 	sub	local09, #16
19364     28 28 06 F1 | 	add	local06, #40
19368     14 47 62 FC | 	wrlong	local21, local06
1936c     28 28 86 F1 | 	sub	local06, #40
19370                 | LR__2665
19370     30 28 06 F1 | 	add	local06, #48
19374     14 47 0A FB | 	rdlong	local21, local06 wz
19378     30 28 86 F1 | 	sub	local06, #48
1937c     18 00 90 5D |  if_ne	jmp	#LR__2666
19380     0C 2E 06 F1 | 	add	local09, #12
19384     17 47 02 FB | 	rdlong	local21, local09
19388     0C 2E 86 F1 | 	sub	local09, #12
1938c     30 28 06 F1 | 	add	local06, #48
19390     14 47 62 FC | 	wrlong	local21, local06
19394     30 28 86 F1 | 	sub	local06, #48
19398                 | LR__2666
19398     1C 28 06 F1 | 	add	local06, #28
1939c     14 47 0A FB | 	rdlong	local21, local06 wz
193a0     1C 28 86 F1 | 	sub	local06, #28
193a4     1C 00 90 5D |  if_ne	jmp	#LR__2667
193a8     01 2A 06 F6 | 	mov	local07, #1
193ac     F2 12 02 F6 | 	mov	arg01, objptr
193b0     00 A8 02 FF 
193b4     00 12 46 F5 | 	or	arg01, ##89128960
193b8     1C 28 06 F1 | 	add	local06, #28
193bc     14 13 62 FC | 	wrlong	arg01, local06
193c0     1C 28 86 F1 | 	sub	local06, #28
193c4                 | LR__2667
193c4     20 28 06 F1 | 	add	local06, #32
193c8     14 47 0A FB | 	rdlong	local21, local06 wz
193cc     20 28 86 F1 | 	sub	local06, #32
193d0     1C 00 90 5D |  if_ne	jmp	#LR__2668
193d4     01 2A 06 F6 | 	mov	local07, #1
193d8     F2 12 02 F6 | 	mov	arg01, objptr
193dc     00 B0 02 FF 
193e0     00 12 46 F5 | 	or	arg01, ##90177536
193e4     20 28 06 F1 | 	add	local06, #32
193e8     14 13 62 FC | 	wrlong	arg01, local06
193ec     20 28 86 F1 | 	sub	local06, #32
193f0                 | LR__2668
193f0     2C 28 06 F1 | 	add	local06, #44
193f4     14 47 0A FB | 	rdlong	local21, local06 wz
193f8     2C 28 86 F1 | 	sub	local06, #44
193fc     44 00 90 5D |  if_ne	jmp	#LR__2671
19400     14 2E 06 F1 | 	add	local09, #20
19404     17 47 0A FB | 	rdlong	local21, local09 wz
19408     14 2E 86 F1 | 	sub	local09, #20
1940c     18 00 90 AD |  if_e	jmp	#LR__2669
19410     14 2E 06 F1 | 	add	local09, #20
19414     17 47 02 FB | 	rdlong	local21, local09
19418     2C 28 06 F1 | 	add	local06, #44
1941c     14 47 62 FC | 	wrlong	local21, local06
19420     2C 28 86 F1 | 	sub	local06, #44
19424     1C 00 90 FD | 	jmp	#LR__2670
19428                 | LR__2669
19428     01 2A 06 F6 | 	mov	local07, #1
1942c     F2 12 02 F6 | 	mov	arg01, objptr
19430     00 B8 02 FF 
19434     00 12 46 F5 | 	or	arg01, ##91226112
19438     2C 28 06 F1 | 	add	local06, #44
1943c     14 13 62 FC | 	wrlong	arg01, local06
19440     2C 28 86 F1 | 	sub	local06, #44
19444                 | LR__2670
19444                 | LR__2671
19444                 | LR__2672
19444     00 2A 0E F2 | 	cmp	local07, #0 wz
19448     14 13 02 56 |  if_ne	mov	arg01, local06
1944c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
19450     00 42 0E F2 | 	cmp	local19, #0 wz
19454     00 12 06 A6 |  if_e	mov	arg01, #0
19458     10 00 90 5D |  if_ne	jmp	#LR__2673
1945c     00 12 4E F2 | 	cmps	arg01, #0 wz
19460     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19464     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19468     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1946c                 | LR__2673
1946c     21 FB 01 F6 | 	mov	result1, local19
19470                 | LR__2674
19470     A7 F0 03 F6 | 	mov	ptra, fp
19474     B2 00 A0 FD | 	call	#popregs_
19478                 | __system___openraw_ret
19478     2D 00 64 FD | 	ret
1947c                 | 
1947c                 | __system___closeraw
1947c     05 4A 05 F6 | 	mov	COUNT_, #5
19480     A8 00 A0 FD | 	call	#pushregs_
19484     09 1F 02 F6 | 	mov	local01, arg01
19488     00 20 06 F6 | 	mov	local02, #0
1948c     08 1E 06 F1 | 	add	local01, #8
19490     0F FB 09 FB | 	rdlong	result1, local01 wz
19494     08 1E 86 F1 | 	sub	local01, #8
19498     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1949c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
194a0     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
194a4     01 FA 65 A6 |  if_e	neg	result1, #1
194a8     A8 00 90 AD |  if_e	jmp	#LR__2682
194ac     2C 1E 06 F1 | 	add	local01, #44
194b0     0F FB 09 FB | 	rdlong	result1, local01 wz
194b4     2C 1E 86 F1 | 	sub	local01, #44
194b8     38 00 90 AD |  if_e	jmp	#LR__2680
194bc     2C 1E 06 F1 | 	add	local01, #44
194c0     0F 23 02 FB | 	rdlong	local03, local01
194c4     11 25 02 F6 | 	mov	local04, local03
194c8     2C 1E 86 F1 | 	sub	local01, #44
194cc     13 24 46 F7 | 	zerox	local04, #19
194d0     14 22 46 F0 | 	shr	local03, #20
194d4     02 22 66 F0 | 	shl	local03, #2
194d8     ED 22 02 F1 | 	add	local03, __methods__
194dc     11 23 02 FB | 	rdlong	local03, local03
194e0     0F 13 02 F6 | 	mov	arg01, local01
194e4     F2 26 02 F6 | 	mov	local05, objptr
194e8     12 E5 01 F6 | 	mov	objptr, local04
194ec     2D 22 62 FD | 	call	local03
194f0     13 E5 01 F6 | 	mov	objptr, local05
194f4                 | LR__2680
194f4     24 1E 06 F1 | 	add	local01, #36
194f8     0F 27 0A FB | 	rdlong	local05, local01 wz
194fc     24 1E 86 F1 | 	sub	local01, #36
19500     3C 00 90 AD |  if_e	jmp	#LR__2681
19504     24 1E 06 F1 | 	add	local01, #36
19508     0F 23 02 FB | 	rdlong	local03, local01
1950c     11 25 02 F6 | 	mov	local04, local03
19510     24 1E 86 F1 | 	sub	local01, #36
19514     13 24 46 F7 | 	zerox	local04, #19
19518     14 22 46 F0 | 	shr	local03, #20
1951c     02 22 66 F0 | 	shl	local03, #2
19520     ED 22 02 F1 | 	add	local03, __methods__
19524     11 23 02 FB | 	rdlong	local03, local03
19528     0F 13 02 F6 | 	mov	arg01, local01
1952c     F2 26 02 F6 | 	mov	local05, objptr
19530     12 E5 01 F6 | 	mov	objptr, local04
19534     2D 22 62 FD | 	call	local03
19538     13 E5 01 F6 | 	mov	objptr, local05
1953c     FD 20 02 F6 | 	mov	local02, result1
19540                 | LR__2681
19540     0F 13 02 F6 | 	mov	arg01, local01
19544     00 14 06 F6 | 	mov	arg02, #0
19548     34 16 06 F6 | 	mov	arg03, #52
1954c     98 00 A0 FD | 	call	#\builtin_bytefill_
19550     10 FB 01 F6 | 	mov	result1, local02
19554                 | LR__2682
19554     A7 F0 03 F6 | 	mov	ptra, fp
19558     B2 00 A0 FD | 	call	#popregs_
1955c                 | __system___closeraw_ret
1955c     2D 00 64 FD | 	ret
19560                 | 
19560                 | __system___vfs_open_sdcardx
19560     0B 4A 05 F6 | 	mov	COUNT_, #11
19564     A8 00 A0 FD | 	call	#pushregs_
19568     09 23 02 F6 | 	mov	local03, arg01
1956c     0A 25 02 F6 | 	mov	local04, arg02
19570     0B 27 02 F6 | 	mov	local05, arg03
19574     0C 29 02 F6 | 	mov	local06, arg04
19578     01 00 00 FF 
1957c     24 12 06 F6 | 	mov	arg01, ##548
19580     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
19584     FD 2A 02 F6 | 	mov	local07, result1
19588     01 00 00 FF 
1958c     34 12 06 F6 | 	mov	arg01, ##564
19590     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
19594     FD 2C 02 F6 | 	mov	local08, result1
19598     11 19 02 F6 | 	mov	arg04, local03
1959c     1F 18 C6 F0 | 	sar	arg04, #31
195a0     11 17 02 F6 | 	mov	arg03, local03
195a4     01 12 06 F6 | 	mov	arg01, #1
195a8     00 14 06 F6 | 	mov	arg02, #0
195ac     98 DF BF FD | 	call	#__system___int64_shl
195b0     FD 1E 02 F6 | 	mov	local01, result1
195b4     FE 2E 02 F6 | 	mov	local09, result2
195b8     12 19 02 F6 | 	mov	arg04, local04
195bc     1F 18 C6 F0 | 	sar	arg04, #31
195c0     12 17 02 F6 | 	mov	arg03, local04
195c4     01 12 06 F6 | 	mov	arg01, #1
195c8     00 14 06 F6 | 	mov	arg02, #0
195cc     78 DF BF FD | 	call	#__system___int64_shl
195d0     FD 1E 42 F5 | 	or	local01, result1
195d4     FE 2E 42 F5 | 	or	local09, result2
195d8     13 19 02 F6 | 	mov	arg04, local05
195dc     1F 18 C6 F0 | 	sar	arg04, #31
195e0     13 17 02 F6 | 	mov	arg03, local05
195e4     01 12 06 F6 | 	mov	arg01, #1
195e8     00 14 06 F6 | 	mov	arg02, #0
195ec     58 DF BF FD | 	call	#__system___int64_shl
195f0     FD 1E 42 F5 | 	or	local01, result1
195f4     FE 2E 42 F5 | 	or	local09, result2
195f8     14 19 02 F6 | 	mov	arg04, local06
195fc     1F 18 C6 F0 | 	sar	arg04, #31
19600     14 17 02 F6 | 	mov	arg03, local06
19604     01 12 06 F6 | 	mov	arg01, #1
19608     00 14 06 F6 | 	mov	arg02, #0
1960c     38 DF BF FD | 	call	#__system___int64_shl
19610     17 15 02 F6 | 	mov	arg02, local09
19614     FD 1E 42 F5 | 	or	local01, result1
19618     0A FD 41 F5 | 	or	result2, arg02
1961c     FE 20 02 F6 | 	mov	local02, result2
19620     0F 13 02 F6 | 	mov	arg01, local01
19624     10 15 02 F6 | 	mov	arg02, local02
19628     54 DF BF FD | 	call	#__system___usepins
1962c     00 FA 0D F2 | 	cmp	result1, #0 wz
19630     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19634     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
19638     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1963c     00 FA 05 A6 |  if_e	mov	result1, #0
19640     B4 00 90 AD |  if_e	jmp	#LR__2692
19644     0F 31 02 F6 | 	mov	local10, local01
19648     10 2F 02 F6 | 	mov	local09, local02
1964c     01 00 00 FF 
19650     08 2A 06 F1 | 	add	local07, ##520
19654     15 31 62 FC | 	wrlong	local10, local07
19658     04 2A 06 F1 | 	add	local07, #4
1965c     15 2F 62 FC | 	wrlong	local09, local07
19660     01 00 00 FF 
19664     0C 2A 86 F1 | 	sub	local07, ##524
19668     14 1B 02 F6 | 	mov	arg05, local06
1966c     00 12 06 F6 | 	mov	arg01, #0
19670     11 15 02 F6 | 	mov	arg02, local03
19674     12 17 02 F6 | 	mov	arg03, local04
19678     13 19 02 F6 | 	mov	arg04, local05
1967c     F2 30 02 F6 | 	mov	local10, objptr
19680     15 E5 01 F6 | 	mov	objptr, local07
19684     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
19688     18 E5 01 F6 | 	mov	objptr, local10
1968c     FD 32 0A F6 | 	mov	local11, result1 wz
19690     24 00 90 5D |  if_ne	jmp	#LR__2690
19694     20 01 00 FF 
19698     4A 15 06 F6 | 	mov	arg02, ##@LR__4087
1969c     16 13 02 F6 | 	mov	arg01, local08
196a0     00 16 06 F6 | 	mov	arg03, #0
196a4     F2 32 02 F6 | 	mov	local11, objptr
196a8     15 E5 01 F6 | 	mov	objptr, local07
196ac     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
196b0     19 E5 01 F6 | 	mov	objptr, local11
196b4     FD 32 02 F6 | 	mov	local11, result1
196b8                 | LR__2690
196b8     00 32 0E F2 | 	cmp	local11, #0 wz
196bc     24 00 90 AD |  if_e	jmp	#LR__2691
196c0     0F 13 02 F6 | 	mov	arg01, local01
196c4     10 15 02 F6 | 	mov	arg02, local02
196c8     08 DF BF FD | 	call	#__system___freepins
196cc     19 13 6A F6 | 	neg	arg01, local11 wz
196d0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
196d4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
196d8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
196dc     00 FA 05 F6 | 	mov	result1, #0
196e0     14 00 90 FD | 	jmp	#LR__2692
196e4                 | LR__2691
196e4     15 13 02 F6 | 	mov	arg01, local07
196e8     F2 32 02 F6 | 	mov	local11, objptr
196ec     15 E5 01 F6 | 	mov	objptr, local07
196f0     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
196f4     19 E5 01 F6 | 	mov	objptr, local11
196f8                 | LR__2692
196f8     A7 F0 03 F6 | 	mov	ptra, fp
196fc     B2 00 A0 FD | 	call	#popregs_
19700                 | __system___vfs_open_sdcardx_ret
19700     2D 00 64 FD | 	ret
19704                 | 
19704                 | __system____default_getc
19704     03 4A 05 F6 | 	mov	COUNT_, #3
19708     A8 00 A0 FD | 	call	#pushregs_
1970c     09 1F 02 F6 | 	mov	local01, arg01
19710     0F 21 02 FB | 	rdlong	local02, local01
19714     08 20 06 F1 | 	add	local02, #8
19718     10 23 02 FB | 	rdlong	local03, local02
1971c     02 22 CE F7 | 	test	local03, #2 wz
19720     0F 13 02 56 |  if_ne	mov	arg01, local01
19724     00 01 B0 5D |  if_ne	call	#__system____default_flush
19728     10 23 02 FB | 	rdlong	local03, local02
1972c     01 22 46 F5 | 	or	local03, #1
19730     10 23 62 FC | 	wrlong	local03, local02
19734     08 20 86 F1 | 	sub	local02, #8
19738     10 23 0A FB | 	rdlong	local03, local02 wz
1973c     0C 00 90 5D |  if_ne	jmp	#LR__2700
19740     0F 13 02 F6 | 	mov	arg01, local01
19744     64 16 B0 FD | 	call	#__system____default_filbuf
19748     FD 22 02 F6 | 	mov	local03, result1
1974c                 | LR__2700
1974c     01 22 56 F2 | 	cmps	local03, #1 wc
19750     01 FA 65 C6 |  if_b	neg	result1, #1
19754     1C 00 90 CD |  if_b	jmp	#LR__2701
19758     01 22 86 F1 | 	sub	local03, #1
1975c     10 23 62 FC | 	wrlong	local03, local02
19760     04 20 06 F1 | 	add	local02, #4
19764     10 23 02 FB | 	rdlong	local03, local02
19768     11 FB C1 FA | 	rdbyte	result1, local03
1976c     01 22 06 F1 | 	add	local03, #1
19770     10 23 62 FC | 	wrlong	local03, local02
19774                 | LR__2701
19774     A7 F0 03 F6 | 	mov	ptra, fp
19778     B2 00 A0 FD | 	call	#popregs_
1977c                 | __system____default_getc_ret
1977c     2D 00 64 FD | 	ret
19780                 | 
19780                 | __system____default_putc
19780     06 4A 05 F6 | 	mov	COUNT_, #6
19784     A8 00 A0 FD | 	call	#pushregs_
19788     09 1F 02 F6 | 	mov	local01, arg01
1978c     0A 21 02 F6 | 	mov	local02, arg02
19790     10 23 02 FB | 	rdlong	local03, local02
19794     08 22 06 F1 | 	add	local03, #8
19798     11 FB 01 FB | 	rdlong	result1, local03
1979c     01 FA CD F7 | 	test	result1, #1 wz
197a0     10 13 02 56 |  if_ne	mov	arg01, local02
197a4     80 00 B0 5D |  if_ne	call	#__system____default_flush
197a8     11 25 02 FB | 	rdlong	local04, local03
197ac     02 24 46 F5 | 	or	local04, #2
197b0     11 25 62 FC | 	wrlong	local04, local03
197b4     08 22 86 F1 | 	sub	local03, #8
197b8     11 27 02 FB | 	rdlong	local05, local03
197bc     10 22 06 F1 | 	add	local03, #16
197c0     11 15 02 FB | 	rdlong	arg02, local03
197c4     10 22 86 F1 | 	sub	local03, #16
197c8     13 FB 01 F6 | 	mov	result1, local05
197cc     0A FB 01 F1 | 	add	result1, arg02
197d0     FD 1E 42 FC | 	wrbyte	local01, result1
197d4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
197d8     01 26 06 F1 | 	add	local05, #1
197dc     11 27 62 FC | 	wrlong	local05, local03
197e0     06 20 06 F1 | 	add	local02, #6
197e4     10 29 EA FA | 	rdword	local06, local02 wz
197e8     06 20 86 F1 | 	sub	local02, #6
197ec     0C 22 06 51 |  if_ne	add	local03, #12
197f0     11 25 02 5B |  if_ne	rdlong	local04, local03
197f4     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
197f8     0C 00 90 AD |  if_e	jmp	#LR__2710
197fc     0A 1E 0E F2 | 	cmp	local01, #10 wz
19800     01 28 0E A2 |  if_e	cmp	local06, #1 wz
19804     10 00 90 5D |  if_ne	jmp	#LR__2711
19808                 | LR__2710
19808     10 13 02 F6 | 	mov	arg01, local02
1980c     18 00 B0 FD | 	call	#__system____default_flush
19810     00 FA 0D F2 | 	cmp	result1, #0 wz
19814     01 1E 66 56 |  if_ne	neg	local01, #1
19818                 | LR__2711
19818     0F FB 01 F6 | 	mov	result1, local01
1981c     A7 F0 03 F6 | 	mov	ptra, fp
19820     B2 00 A0 FD | 	call	#popregs_
19824                 | __system____default_putc_ret
19824     2D 00 64 FD | 	ret
19828                 | 
19828                 | __system____default_flush
19828     06 4A 05 F6 | 	mov	COUNT_, #6
1982c     A8 00 A0 FD | 	call	#pushregs_
19830     09 1F 02 F6 | 	mov	local01, arg01
19834     0F 21 02 FB | 	rdlong	local02, local01
19838     10 23 02 FB | 	rdlong	local03, local02
1983c     08 20 06 F1 | 	add	local02, #8
19840     10 FB 01 FB | 	rdlong	result1, local02
19844     08 20 86 F1 | 	sub	local02, #8
19848     02 FA CD F7 | 	test	result1, #2 wz
1984c     D0 00 90 AD |  if_e	jmp	#LR__2722
19850     01 22 56 F2 | 	cmps	local03, #1 wc
19854     20 01 90 CD |  if_b	jmp	#LR__2724
19858     08 1E 06 F1 | 	add	local01, #8
1985c     0F FB 01 FB | 	rdlong	result1, local01
19860     08 1E 86 F1 | 	sub	local01, #8
19864     40 FA CD F7 | 	test	result1, #64 wz
19868     68 00 90 AD |  if_e	jmp	#LR__2721
1986c     08 1E 06 F1 | 	add	local01, #8
19870     0F 17 02 FB | 	rdlong	arg03, local01
19874     08 1E 86 F1 | 	sub	local01, #8
19878     80 16 CE F7 | 	test	arg03, #128 wz
1987c     54 00 90 AD |  if_e	jmp	#LR__2720
19880     30 1E 06 F1 | 	add	local01, #48
19884     0F 25 02 FB | 	rdlong	local04, local01
19888     12 27 02 F6 | 	mov	local05, local04
1988c     30 1E 86 F1 | 	sub	local01, #48
19890     13 26 46 F7 | 	zerox	local05, #19
19894     14 24 46 F0 | 	shr	local04, #20
19898     02 24 66 F0 | 	shl	local04, #2
1989c     ED 24 02 F1 | 	add	local04, __methods__
198a0     12 25 02 FB | 	rdlong	local04, local04
198a4     0F 13 02 F6 | 	mov	arg01, local01
198a8     00 14 06 F6 | 	mov	arg02, #0
198ac     02 16 06 F6 | 	mov	arg03, #2
198b0     F2 28 02 F6 | 	mov	local06, objptr
198b4     13 E5 01 F6 | 	mov	objptr, local05
198b8     2D 24 62 FD | 	call	local04
198bc     14 E5 01 F6 | 	mov	objptr, local06
198c0     08 1E 06 F1 | 	add	local01, #8
198c4     0F 29 02 FB | 	rdlong	local06, local01
198c8     80 28 26 F5 | 	andn	local06, #128
198cc     0F 29 62 FC | 	wrlong	local06, local01
198d0     08 1E 86 F1 | 	sub	local01, #8
198d4                 | LR__2720
198d4                 | LR__2721
198d4     18 1E 06 F1 | 	add	local01, #24
198d8     0F 25 02 FB | 	rdlong	local04, local01
198dc     12 27 02 F6 | 	mov	local05, local04
198e0     18 1E 86 F1 | 	sub	local01, #24
198e4     13 26 46 F7 | 	zerox	local05, #19
198e8     14 24 46 F0 | 	shr	local04, #20
198ec     02 24 66 F0 | 	shl	local04, #2
198f0     ED 24 02 F1 | 	add	local04, __methods__
198f4     12 25 02 FB | 	rdlong	local04, local04
198f8     10 20 06 F1 | 	add	local02, #16
198fc     10 15 02 FB | 	rdlong	arg02, local02
19900     10 20 86 F1 | 	sub	local02, #16
19904     0F 13 02 F6 | 	mov	arg01, local01
19908     11 17 02 F6 | 	mov	arg03, local03
1990c     F2 28 02 F6 | 	mov	local06, objptr
19910     13 E5 01 F6 | 	mov	objptr, local05
19914     2D 24 62 FD | 	call	local04
19918     14 E5 01 F6 | 	mov	objptr, local06
1991c     58 00 90 FD | 	jmp	#LR__2724
19920                 | LR__2722
19920     08 20 06 F1 | 	add	local02, #8
19924     10 29 02 FB | 	rdlong	local06, local02
19928     08 20 86 F1 | 	sub	local02, #8
1992c     01 28 CE F7 | 	test	local06, #1 wz
19930     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
19934     40 00 90 AD |  if_e	jmp	#LR__2723
19938     30 1E 06 F1 | 	add	local01, #48
1993c     0F 25 02 FB | 	rdlong	local04, local01
19940     12 27 02 F6 | 	mov	local05, local04
19944     30 1E 86 F1 | 	sub	local01, #48
19948     13 26 46 F7 | 	zerox	local05, #19
1994c     14 24 46 F0 | 	shr	local04, #20
19950     02 24 66 F0 | 	shl	local04, #2
19954     ED 24 02 F1 | 	add	local04, __methods__
19958     12 25 02 FB | 	rdlong	local04, local04
1995c     0F 13 02 F6 | 	mov	arg01, local01
19960     11 15 62 F6 | 	neg	arg02, local03
19964     01 16 06 F6 | 	mov	arg03, #1
19968     F2 28 02 F6 | 	mov	local06, objptr
1996c     13 E5 01 F6 | 	mov	objptr, local05
19970     2D 24 62 FD | 	call	local04
19974     14 E5 01 F6 | 	mov	objptr, local06
19978                 | LR__2723
19978                 | LR__2724
19978     10 01 68 FC | 	wrlong	#0, local02
1997c     04 20 06 F1 | 	add	local02, #4
19980     10 01 68 FC | 	wrlong	#0, local02
19984     04 20 06 F1 | 	add	local02, #4
19988     10 01 68 FC | 	wrlong	#0, local02
1998c     00 FA 05 F6 | 	mov	result1, #0
19990     A7 F0 03 F6 | 	mov	ptra, fp
19994     B2 00 A0 FD | 	call	#popregs_
19998                 | __system____default_flush_ret
19998     2D 00 64 FD | 	ret
1999c                 | 
1999c                 | __system____default_buffer_init
1999c     02 4A 05 F6 | 	mov	COUNT_, #2
199a0     A8 00 A0 FD | 	call	#pushregs_
199a4     09 1F 02 F6 | 	mov	local01, arg01
199a8     0F 21 02 FB | 	rdlong	local02, local01
199ac     0F 13 02 F6 | 	mov	arg01, local01
199b0     F8 02 B0 FD | 	call	#__system___isatty
199b4     00 FA 0D F2 | 	cmp	result1, #0 wz
199b8     06 1E 06 51 |  if_ne	add	local01, #6
199bc     0F 0B 58 5C |  if_ne	wrword	#5, local01
199c0     06 1E 06 A1 |  if_e	add	local01, #6
199c4     0F 0D 58 AC |  if_e	wrword	#6, local01
199c8     14 20 06 F1 | 	add	local02, #20
199cc     10 1F 02 F6 | 	mov	local01, local02
199d0     04 20 86 F1 | 	sub	local02, #4
199d4     10 1F 62 FC | 	wrlong	local01, local02
199d8     04 20 86 F1 | 	sub	local02, #4
199dc     02 00 80 FF 
199e0     10 01 68 FC | 	wrlong	##1024, local02
199e4     00 FA 05 F6 | 	mov	result1, #0
199e8     A7 F0 03 F6 | 	mov	ptra, fp
199ec     B2 00 A0 FD | 	call	#popregs_
199f0                 | __system____default_buffer_init_ret
199f0     2D 00 64 FD | 	ret
199f4                 | 
199f4                 | __system__stat
199f4     04 4A 05 F6 | 	mov	COUNT_, #4
199f8     A8 00 A0 FD | 	call	#pushregs_
199fc     0A 1F 02 F6 | 	mov	local01, arg02
19a00     84 E9 05 F1 | 	add	ptr___system__dat__, #388
19a04     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
19a08     09 15 02 F6 | 	mov	arg02, arg01
19a0c     10 13 02 F6 | 	mov	arg01, local02
19a10     00 16 06 F6 | 	mov	arg03, #0
19a14     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
19a18     90 BC BF FD | 	call	#__system____getvfsforfile
19a1c     FD 22 0A F6 | 	mov	local03, result1 wz
19a20     10 00 90 AD |  if_e	jmp	#LR__2730
19a24     34 22 06 F1 | 	add	local03, #52
19a28     11 17 0A FB | 	rdlong	arg03, local03 wz
19a2c     34 22 86 F1 | 	sub	local03, #52
19a30     14 00 90 5D |  if_ne	jmp	#LR__2731
19a34                 | LR__2730
19a34     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19a38     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
19a3c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19a40     01 FA 65 F6 | 	neg	result1, #1
19a44     68 00 90 FD | 	jmp	#LR__2732
19a48                 | LR__2731
19a48     0F 13 02 F6 | 	mov	arg01, local01
19a4c     00 14 06 F6 | 	mov	arg02, #0
19a50     30 16 06 F6 | 	mov	arg03, #48
19a54     09 25 02 F6 | 	mov	local04, arg01
19a58     98 00 A0 FD | 	call	#\builtin_bytefill_
19a5c     12 FB 01 F6 | 	mov	result1, local04
19a60     10 13 CA FA | 	rdbyte	arg01, local02 wz
19a64     08 1E 06 A1 |  if_e	add	local01, #8
19a68     08 00 80 AF 
19a6c     0F FF 6B AC |  if_e	wrlong	##4607, local01
19a70     00 FA 05 A6 |  if_e	mov	result1, #0
19a74     38 00 90 AD |  if_e	jmp	#LR__2732
19a78     34 22 06 F1 | 	add	local03, #52
19a7c     11 23 02 FB | 	rdlong	local03, local03
19a80     11 25 02 F6 | 	mov	local04, local03
19a84     13 22 46 F7 | 	zerox	local03, #19
19a88     14 24 46 F0 | 	shr	local04, #20
19a8c     02 24 66 F0 | 	shl	local04, #2
19a90     ED 24 02 F1 | 	add	local04, __methods__
19a94     12 25 02 FB | 	rdlong	local04, local04
19a98     10 13 02 F6 | 	mov	arg01, local02
19a9c     0F 15 02 F6 | 	mov	arg02, local01
19aa0     F2 20 02 F6 | 	mov	local02, objptr
19aa4     11 E5 01 F6 | 	mov	objptr, local03
19aa8     2D 24 62 FD | 	call	local04
19aac     10 E5 01 F6 | 	mov	objptr, local02
19ab0                 | LR__2732
19ab0     A7 F0 03 F6 | 	mov	ptra, fp
19ab4     B2 00 A0 FD | 	call	#popregs_
19ab8                 | __system__stat_ret
19ab8     2D 00 64 FD | 	ret
19abc                 | 
19abc                 | __system__read
19abc     0A 12 16 F2 | 	cmp	arg01, #10 wc
19ac0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19ac4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19ac8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19acc     01 FA 65 36 |  if_ae	neg	result1, #1
19ad0     20 00 90 3D |  if_ae	jmp	#LR__2740
19ad4     34 12 06 FD | 	qmul	arg01, #52
19ad8     02 00 00 FF 
19adc     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
19ae0     18 12 62 FD | 	getqx	arg01
19ae4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19ae8     02 00 00 FF 
19aec     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
19af0     D0 0F B0 FD | 	call	#__system___vfsread
19af4                 | LR__2740
19af4                 | __system__read_ret
19af4     2D 00 64 FD | 	ret
19af8                 | 
19af8                 | __system__close
19af8     0A 12 16 F2 | 	cmp	arg01, #10 wc
19afc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19b00     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19b04     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19b08     01 FA 65 36 |  if_ae	neg	result1, #1
19b0c     20 00 90 3D |  if_ae	jmp	#LR__2750
19b10     34 12 06 FD | 	qmul	arg01, #52
19b14     02 00 00 FF 
19b18     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
19b1c     18 12 62 FD | 	getqx	arg01
19b20     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
19b24     02 00 00 FF 
19b28     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
19b2c     4C F9 BF FD | 	call	#__system___closeraw
19b30                 | LR__2750
19b30                 | __system__close_ret
19b30     2D 00 64 FD | 	ret
19b34                 | 
19b34                 | __system__lseek
19b34     06 4A 05 F6 | 	mov	COUNT_, #6
19b38     A8 00 A0 FD | 	call	#pushregs_
19b3c     0A 12 16 F2 | 	cmp	arg01, #10 wc
19b40     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
19b44     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
19b48     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
19b4c     01 FA 65 36 |  if_ae	neg	result1, #1
19b50     C4 00 90 3D |  if_ae	jmp	#LR__2761
19b54     34 12 06 FD | 	qmul	arg01, #52
19b58     02 00 00 FF 
19b5c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
19b60     18 1E 62 FD | 	getqx	local01
19b64     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
19b68     30 1E 06 F1 | 	add	local01, #48
19b6c     0F 13 0A FB | 	rdlong	arg01, local01 wz
19b70     30 1E 86 F1 | 	sub	local01, #48
19b74     02 00 00 FF 
19b78     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
19b7c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19b80     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
19b84     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19b88     01 FA 65 A6 |  if_e	neg	result1, #1
19b8c     88 00 90 AD |  if_e	jmp	#LR__2761
19b90     08 1E 06 F1 | 	add	local01, #8
19b94     0F 21 02 FB | 	rdlong	local02, local01
19b98     08 1E 86 F1 | 	sub	local01, #8
19b9c     40 20 CE F7 | 	test	local02, #64 wz
19ba0     08 1E 06 51 |  if_ne	add	local01, #8
19ba4     0F 21 02 5B |  if_ne	rdlong	local02, local01
19ba8     80 20 46 55 |  if_ne	or	local02, #128
19bac     0F 21 62 5C |  if_ne	wrlong	local02, local01
19bb0     08 1E 86 51 |  if_ne	sub	local01, #8
19bb4     30 1E 06 F1 | 	add	local01, #48
19bb8     0F 23 02 FB | 	rdlong	local03, local01
19bbc     11 25 02 F6 | 	mov	local04, local03
19bc0     30 1E 86 F1 | 	sub	local01, #48
19bc4     13 24 46 F7 | 	zerox	local04, #19
19bc8     14 22 46 F0 | 	shr	local03, #20
19bcc     02 22 66 F0 | 	shl	local03, #2
19bd0     ED 22 02 F1 | 	add	local03, __methods__
19bd4     11 23 02 FB | 	rdlong	local03, local03
19bd8     0F 13 02 F6 | 	mov	arg01, local01
19bdc     F2 26 02 F6 | 	mov	local05, objptr
19be0     12 E5 01 F6 | 	mov	objptr, local04
19be4     2D 22 62 FD | 	call	local03
19be8     13 E5 01 F6 | 	mov	objptr, local05
19bec     FD 28 02 F6 | 	mov	local06, result1
19bf0     00 28 56 F2 | 	cmps	local06, #0 wc
19bf4     1C 00 90 3D |  if_ae	jmp	#LR__2760
19bf8     14 13 6A F6 | 	neg	arg01, local06 wz
19bfc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19c00     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19c04     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19c08     01 FA 65 56 |  if_ne	neg	result1, #1
19c0c     00 FA 05 A6 |  if_e	mov	result1, #0
19c10     04 00 90 FD | 	jmp	#LR__2761
19c14                 | LR__2760
19c14     14 FB 01 F6 | 	mov	result1, local06
19c18                 | LR__2761
19c18     A7 F0 03 F6 | 	mov	ptra, fp
19c1c     B2 00 A0 FD | 	call	#popregs_
19c20                 | __system__lseek_ret
19c20     2D 00 64 FD | 	ret
19c24                 | 
19c24                 | __system___ioctl
19c24     03 4A 05 F6 | 	mov	COUNT_, #3
19c28     A8 00 A0 FD | 	call	#pushregs_
19c2c     00 12 4E F2 | 	cmps	arg01, #0 wz
19c30     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
19c34     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
19c38     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
19c3c     01 FA 65 A6 |  if_e	neg	result1, #1
19c40     5C 00 90 AD |  if_e	jmp	#LR__2771
19c44     28 12 06 F1 | 	add	arg01, #40
19c48     09 1F 02 FB | 	rdlong	local01, arg01
19c4c     0F 21 02 F6 | 	mov	local02, local01
19c50     28 12 86 F1 | 	sub	arg01, #40
19c54     13 20 46 F7 | 	zerox	local02, #19
19c58     14 1E 46 F0 | 	shr	local01, #20
19c5c     02 1E 66 F0 | 	shl	local01, #2
19c60     ED 1E 02 F1 | 	add	local01, __methods__
19c64     0F 1F 02 FB | 	rdlong	local01, local01
19c68     F2 22 02 F6 | 	mov	local03, objptr
19c6c     10 E5 01 F6 | 	mov	objptr, local02
19c70     2D 1E 62 FD | 	call	local01
19c74     11 E5 01 F6 | 	mov	objptr, local03
19c78     FD 12 0A F6 | 	mov	arg01, result1 wz
19c7c     1C 00 90 AD |  if_e	jmp	#LR__2770
19c80     00 12 4E F2 | 	cmps	arg01, #0 wz
19c84     20 E8 05 F1 | 	add	ptr___system__dat__, #32
19c88     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
19c8c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
19c90     01 FA 65 56 |  if_ne	neg	result1, #1
19c94     00 FA 05 A6 |  if_e	mov	result1, #0
19c98     04 00 90 FD | 	jmp	#LR__2771
19c9c                 | LR__2770
19c9c     00 FA 05 F6 | 	mov	result1, #0
19ca0                 | LR__2771
19ca0     A7 F0 03 F6 | 	mov	ptra, fp
19ca4     B2 00 A0 FD | 	call	#popregs_
19ca8                 | __system___ioctl_ret
19ca8     2D 00 64 FD | 	ret
19cac                 | 
19cac                 | __system___isatty
19cac     00 4A 05 F6 | 	mov	COUNT_, #0
19cb0     A8 00 A0 FD | 	call	#pushregs_
19cb4     0C F0 07 F1 | 	add	ptra, #12
19cb8     04 4E 05 F1 | 	add	fp, #4
19cbc     A7 12 62 FC | 	wrlong	arg01, fp
19cc0     04 4E 05 F1 | 	add	fp, #4
19cc4     A7 16 02 F6 | 	mov	arg03, fp
19cc8     08 4E 85 F1 | 	sub	fp, #8
19ccc     00 15 06 F6 | 	mov	arg02, #256
19cd0     50 FF BF FD | 	call	#__system___ioctl
19cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
19cd8     01 FA 05 A6 |  if_e	mov	result1, #1
19cdc     00 FA 05 56 |  if_ne	mov	result1, #0
19ce0     A7 F0 03 F6 | 	mov	ptra, fp
19ce4     B2 00 A0 FD | 	call	#popregs_
19ce8                 | __system___isatty_ret
19ce8     2D 00 64 FD | 	ret
19cec                 | 
19cec                 | __system____getftab
19cec     0A 12 16 F2 | 	cmp	arg01, #10 wc
19cf0     34 12 06 CD |  if_b	qmul	arg01, #52
19cf4     00 FA 05 36 |  if_ae	mov	result1, #0
19cf8     02 00 00 CF 
19cfc     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
19d00     18 FA 61 CD |  if_b	getqx	result1
19d04     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
19d08     02 00 00 CF 
19d0c     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
19d10                 | __system____getftab_ret
19d10     2D 00 64 FD | 	ret
19d14                 | 
19d14                 | __system__strncpy
19d14     09 01 02 F6 | 	mov	_var01, arg01
19d18                 | LR__2780
19d18     01 16 86 F1 | 	sub	arg03, #1
19d1c     00 16 56 F2 | 	cmps	arg03, #0 wc
19d20     18 00 90 CD |  if_b	jmp	#LR__2781
19d24     0A FB C1 FA | 	rdbyte	result1, arg02
19d28     00 FB 41 FC | 	wrbyte	result1, _var01
19d2c     01 14 06 F1 | 	add	arg02, #1
19d30     00 FB C9 FA | 	rdbyte	result1, _var01 wz
19d34     01 00 06 F1 | 	add	_var01, #1
19d38     DC FF 9F 5D |  if_ne	jmp	#LR__2780
19d3c                 | LR__2781
19d3c     97 0C 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
19d40                 | LR__2782
19d40     01 16 86 F1 | 	sub	arg03, #1
19d44     00 16 56 F2 | 	cmps	arg03, #0 wc
19d48     00 03 02 36 |  if_ae	mov	_var02, _var01
19d4c     01 00 06 31 |  if_ae	add	_var01, #1
19d50     01 01 48 3C |  if_ae	wrbyte	#0, _var02
19d54     E8 FF 9F 3D |  if_ae	jmp	#LR__2782
19d58                 | LR__2783
19d58     09 FB 01 F6 | 	mov	result1, arg01
19d5c                 | __system__strncpy_ret
19d5c     2D 00 64 FD | 	ret
19d60                 | 
19d60                 | __system__strncat
19d60     00 14 4E F2 | 	cmps	arg02, #0 wz
19d64     50 00 90 AD |  if_e	jmp	#LR__2794
19d68     01 16 16 F2 | 	cmp	arg03, #1 wc
19d6c     48 00 90 CD |  if_b	jmp	#LR__2794
19d70     09 01 02 F6 | 	mov	_var01, arg01
19d74     97 1E 48 FB | 	callpa	#(@LR__2792-@LR__2790)>>2,fcache_load_ptr_
19d78                 | LR__2790
19d78     00 FB C9 FA | 	rdbyte	result1, _var01 wz
19d7c     01 00 06 51 |  if_ne	add	_var01, #1
19d80     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
19d84     0B 03 02 F6 | 	mov	_var02, arg03
19d88                 | LR__2791
19d88     0A 05 C2 FA | 	rdbyte	_var03, arg02
19d8c     02 07 02 F6 | 	mov	_var04, _var03
19d90     07 06 4E F7 | 	zerox	_var04, #7 wz
19d94     01 14 06 F1 | 	add	arg02, #1
19d98     18 00 90 AD |  if_e	jmp	#LR__2793
19d9c     01 02 86 F1 | 	sub	_var02, #1
19da0     00 02 56 F2 | 	cmps	_var02, #0 wc
19da4     00 07 02 36 |  if_ae	mov	_var04, _var01
19da8     01 00 06 31 |  if_ae	add	_var01, #1
19dac     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
19db0     D4 FF 9F 3D |  if_ae	jmp	#LR__2791
19db4                 | LR__2792
19db4                 | LR__2793
19db4     00 01 48 FC | 	wrbyte	#0, _var01
19db8                 | LR__2794
19db8     09 FB 01 F6 | 	mov	result1, arg01
19dbc                 | __system__strncat_ret
19dbc     2D 00 64 FD | 	ret
19dc0                 | 
19dc0                 | __system__strncmp
19dc0     09 01 0A F6 | 	mov	_var01, arg01 wz
19dc4     14 00 90 5D |  if_ne	jmp	#LR__2800
19dc8     00 14 0E F2 | 	cmp	arg02, #0 wz
19dcc     01 02 66 56 |  if_ne	neg	_var02, #1
19dd0     00 02 06 A6 |  if_e	mov	_var02, #0
19dd4     01 FB 01 F6 | 	mov	result1, _var02
19dd8     74 00 90 FD | 	jmp	#__system__strncmp_ret
19ddc                 | LR__2800
19ddc     00 14 0E F2 | 	cmp	arg02, #0 wz
19de0     01 FA 05 A6 |  if_e	mov	result1, #1
19de4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
19de8     0B 05 02 F6 | 	mov	_var03, arg03
19dec     97 16 48 FB | 	callpa	#(@LR__2802-@LR__2801)>>2,fcache_load_ptr_
19df0                 | LR__2801
19df0     00 07 C2 FA | 	rdbyte	_var04, _var01
19df4     0A 09 02 F6 | 	mov	_var05, arg02
19df8     04 0B C2 FA | 	rdbyte	_var06, _var05
19dfc     01 04 86 F1 | 	sub	_var03, #1
19e00     00 04 56 F2 | 	cmps	_var03, #0 wc
19e04     01 00 06 F1 | 	add	_var01, #1
19e08     01 14 06 F1 | 	add	arg02, #1
19e0c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
19e10     08 00 90 2D |  if_nc_and_z	jmp	#LR__2803
19e14     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
19e18     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2801
19e1c                 | LR__2802
19e1c                 | LR__2803
19e1c     00 04 56 F2 | 	cmps	_var03, #0 wc
19e20     00 FA 05 C6 |  if_b	mov	result1, #0
19e24     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
19e28     05 07 0A F2 | 	cmp	_var04, _var06 wz
19e2c     00 FA 05 A6 |  if_e	mov	result1, #0
19e30     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
19e34     00 06 0E F2 | 	cmp	_var04, #0 wz
19e38     01 FA 65 A6 |  if_e	neg	result1, #1
19e3c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
19e40     00 0A 0E F2 | 	cmp	_var06, #0 wz
19e44     01 FA 05 A6 |  if_e	mov	result1, #1
19e48     03 FB 01 56 |  if_ne	mov	result1, _var04
19e4c     05 FB 81 51 |  if_ne	sub	result1, _var06
19e50                 | __system__strncmp_ret
19e50     2D 00 64 FD | 	ret
19e54                 | 
19e54                 | __system____root_opendir
19e54     64 E8 05 F1 | 	add	ptr___system__dat__, #100
19e58     04 12 06 F1 | 	add	arg01, #4
19e5c     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
19e60     00 FA 05 F6 | 	mov	result1, #0
19e64     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
19e68                 | __system____root_opendir_ret
19e68     2D 00 64 FD | 	ret
19e6c                 | 
19e6c                 | __system____root_readdir
19e6c     03 4A 05 F6 | 	mov	COUNT_, #3
19e70     A8 00 A0 FD | 	call	#pushregs_
19e74     09 1F 02 F6 | 	mov	local01, arg01
19e78     0A 21 02 F6 | 	mov	local02, arg02
19e7c     04 1E 06 F1 | 	add	local01, #4
19e80     0F 23 02 FB | 	rdlong	local03, local01
19e84     04 1E 86 F1 | 	sub	local01, #4
19e88                 | LR__2810
19e88     74 E8 05 F1 | 	add	ptr___system__dat__, #116
19e8c     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
19e90     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
19e94     01 FA 65 A6 |  if_e	neg	result1, #1
19e98     48 00 90 AD |  if_e	jmp	#LR__2811
19e9c     11 17 0A FB | 	rdlong	arg03, local03 wz
19ea0     04 22 06 A1 |  if_e	add	local03, #4
19ea4     E0 FF 9F AD |  if_e	jmp	#LR__2810
19ea8     11 15 02 FB | 	rdlong	arg02, local03
19eac     01 14 06 F1 | 	add	arg02, #1
19eb0     10 13 02 F6 | 	mov	arg01, local02
19eb4     40 16 06 F6 | 	mov	arg03, #64
19eb8     58 FE BF FD | 	call	#__system__strncpy
19ebc     50 20 06 F1 | 	add	local02, #80
19ec0     10 03 48 FC | 	wrbyte	#1, local02
19ec4     08 20 86 F1 | 	sub	local02, #8
19ec8     10 01 68 FC | 	wrlong	#0, local02
19ecc     04 20 06 F1 | 	add	local02, #4
19ed0     10 01 68 FC | 	wrlong	#0, local02
19ed4     04 22 06 F1 | 	add	local03, #4
19ed8     04 1E 06 F1 | 	add	local01, #4
19edc     0F 23 62 FC | 	wrlong	local03, local01
19ee0     00 FA 05 F6 | 	mov	result1, #0
19ee4                 | LR__2811
19ee4     A7 F0 03 F6 | 	mov	ptra, fp
19ee8     B2 00 A0 FD | 	call	#popregs_
19eec                 | __system____root_readdir_ret
19eec     2D 00 64 FD | 	ret
19ef0                 | 
19ef0                 | __system____root_closedir
19ef0     00 FA 05 F6 | 	mov	result1, #0
19ef4                 | __system____root_closedir_ret
19ef4     2D 00 64 FD | 	ret
19ef8                 | 
19ef8                 | __system____root_stat
19ef8     0A 01 02 F6 | 	mov	_var01, arg02
19efc     00 13 02 F6 | 	mov	arg01, _var01
19f00     00 14 06 F6 | 	mov	arg02, #0
19f04     30 16 06 F6 | 	mov	arg03, #48
19f08     98 00 A0 FD | 	call	#\builtin_bytefill_
19f0c     08 00 06 F1 | 	add	_var01, #8
19f10     08 00 80 FF 
19f14     00 FF 6B FC | 	wrlong	##4607, _var01
19f18     00 FA 05 F6 | 	mov	result1, #0
19f1c                 | __system____root_stat_ret
19f1c     2D 00 64 FD | 	ret
19f20                 | 
19f20                 | __system___normalizeName
19f20     00 00 06 F6 | 	mov	_var01, #0
19f24     09 03 02 F6 | 	mov	_var02, arg01
19f28     01 05 02 F6 | 	mov	_var03, _var02
19f2c                 | LR__2820
19f2c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
19f30     5C 01 90 AD |  if_e	jmp	#LR__2839
19f34     00 00 0E F2 | 	cmp	_var01, #0 wz
19f38     02 07 02 56 |  if_ne	mov	_var04, _var03
19f3c     01 04 06 51 |  if_ne	add	_var03, #1
19f40     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
19f44     00 00 06 56 |  if_ne	mov	_var01, #0
19f48     01 07 C2 FA | 	rdbyte	_var04, _var02
19f4c     2E 06 0E F2 | 	cmp	_var04, #46 wz
19f50     D8 00 90 5D |  if_ne	jmp	#LR__2832
19f54     01 02 06 F1 | 	add	_var02, #1
19f58     01 07 C2 FA | 	rdbyte	_var04, _var02
19f5c     01 02 86 F1 | 	sub	_var02, #1
19f60     2F 06 0E F2 | 	cmp	_var04, #47 wz
19f64     18 00 90 AD |  if_e	jmp	#LR__2821
19f68     01 02 06 F1 | 	add	_var02, #1
19f6c     01 09 C2 FA | 	rdbyte	_var05, _var02
19f70     01 02 86 F1 | 	sub	_var02, #1
19f74     04 0B 02 F6 | 	mov	_var06, _var05
19f78     07 0A 4E F7 | 	zerox	_var06, #7 wz
19f7c     10 00 90 5D |  if_ne	jmp	#LR__2822
19f80                 | LR__2821
19f80     01 0D 02 F6 | 	mov	_var07, _var02
19f84     01 0C 06 F1 | 	add	_var07, #1
19f88     06 03 02 F6 | 	mov	_var02, _var07
19f8c     E0 00 90 FD | 	jmp	#LR__2836
19f90                 | LR__2822
19f90     01 02 06 F1 | 	add	_var02, #1
19f94     01 0D C2 FA | 	rdbyte	_var07, _var02
19f98     01 02 86 F1 | 	sub	_var02, #1
19f9c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
19fa0     2E 06 0E F2 | 	cmp	_var04, #46 wz
19fa4     84 00 90 5D |  if_ne	jmp	#LR__2831
19fa8     02 02 06 F1 | 	add	_var02, #2
19fac     01 0D C2 FA | 	rdbyte	_var07, _var02
19fb0     02 02 86 F1 | 	sub	_var02, #2
19fb4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
19fb8     2F 06 0E F2 | 	cmp	_var04, #47 wz
19fbc     18 00 90 AD |  if_e	jmp	#LR__2823
19fc0     02 02 06 F1 | 	add	_var02, #2
19fc4     01 09 C2 FA | 	rdbyte	_var05, _var02
19fc8     02 02 86 F1 | 	sub	_var02, #2
19fcc     04 0B 02 F6 | 	mov	_var06, _var05
19fd0     07 0A 4E F7 | 	zerox	_var06, #7 wz
19fd4     54 00 90 5D |  if_ne	jmp	#LR__2830
19fd8                 | LR__2823
19fd8     02 02 06 F1 | 	add	_var02, #2
19fdc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
19fe0     40 00 90 ED |  if_be	jmp	#LR__2829
19fe4     02 0F 02 F6 | 	mov	_var08, _var03
19fe8     01 0E 86 F1 | 	sub	_var08, #1
19fec                 | LR__2824
19fec     07 07 C2 FA | 	rdbyte	_var04, _var08
19ff0     2F 06 0E F2 | 	cmp	_var04, #47 wz
19ff4     0C 00 90 5D |  if_ne	jmp	#LR__2825
19ff8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
19ffc     01 0E 86 11 |  if_a	sub	_var08, #1
1a000     E8 FF 9F 1D |  if_a	jmp	#LR__2824
1a004                 | LR__2825
1a004     97 0C 48 FB | 	callpa	#(@LR__2827-@LR__2826)>>2,fcache_load_ptr_
1a008                 | LR__2826
1a008     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1a00c     10 00 90 ED |  if_be	jmp	#LR__2828
1a010     07 07 C2 FA | 	rdbyte	_var04, _var08
1a014     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a018     01 0E 86 51 |  if_ne	sub	_var08, #1
1a01c     E8 FF 9F 5D |  if_ne	jmp	#LR__2826
1a020                 | LR__2827
1a020                 | LR__2828
1a020     07 05 02 F6 | 	mov	_var03, _var08
1a024                 | LR__2829
1a024     01 00 06 F6 | 	mov	_var01, #1
1a028     44 00 90 FD | 	jmp	#LR__2836
1a02c                 | LR__2830
1a02c                 | LR__2831
1a02c                 | LR__2832
1a02c     97 18 48 FB | 	callpa	#(@LR__2834-@LR__2833)>>2,fcache_load_ptr_
1a030                 | LR__2833
1a030     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1a034     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1a038     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1a03c     20 00 90 AD |  if_e	jmp	#LR__2835
1a040     01 0B 02 F6 | 	mov	_var06, _var02
1a044     01 09 02 F6 | 	mov	_var05, _var02
1a048     01 08 06 F1 | 	add	_var05, #1
1a04c     05 11 C2 FA | 	rdbyte	_var09, _var06
1a050     04 03 02 F6 | 	mov	_var02, _var05
1a054     02 11 42 FC | 	wrbyte	_var09, _var03
1a058     01 04 06 F1 | 	add	_var03, #1
1a05c     D0 FF 9F FD | 	jmp	#LR__2833
1a060                 | LR__2834
1a060                 | LR__2835
1a060     01 07 C2 FA | 	rdbyte	_var04, _var02
1a064     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a068     C0 FE 9F 5D |  if_ne	jmp	#LR__2820
1a06c     01 00 06 F6 | 	mov	_var01, #1
1a070                 | LR__2836
1a070     97 0C 48 FB | 	callpa	#(@LR__2838-@LR__2837)>>2,fcache_load_ptr_
1a074                 | LR__2837
1a074     01 07 C2 FA | 	rdbyte	_var04, _var02
1a078     2F 06 0E F2 | 	cmp	_var04, #47 wz
1a07c     01 0D 02 A6 |  if_e	mov	_var07, _var02
1a080     01 0C 06 A1 |  if_e	add	_var07, #1
1a084     06 03 02 A6 |  if_e	mov	_var02, _var07
1a088     E8 FF 9F AD |  if_e	jmp	#LR__2837
1a08c                 | LR__2838
1a08c     9C FE 9F FD | 	jmp	#LR__2820
1a090                 | LR__2839
1a090     02 01 48 FC | 	wrbyte	#0, _var03
1a094                 | __system___normalizeName_ret
1a094     2D 00 64 FD | 	ret
1a098                 | 
1a098                 | __system___strrev
1a098     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1a09c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1a0a0     09 03 02 F6 | 	mov	_var02, arg01
1a0a4     97 1A 48 FB | 	callpa	#(@LR__2842-@LR__2840)>>2,fcache_load_ptr_
1a0a8                 | LR__2840
1a0a8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1a0ac     01 02 06 51 |  if_ne	add	_var02, #1
1a0b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
1a0b4     01 02 86 F1 | 	sub	_var02, #1
1a0b8                 | LR__2841
1a0b8     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1a0bc     1C 00 90 ED |  if_be	jmp	#LR__2843
1a0c0     09 01 C2 FA | 	rdbyte	_var01, arg01
1a0c4     01 05 C2 FA | 	rdbyte	_var03, _var02
1a0c8     09 05 42 FC | 	wrbyte	_var03, arg01
1a0cc     01 01 42 FC | 	wrbyte	_var01, _var02
1a0d0     01 12 06 F1 | 	add	arg01, #1
1a0d4     01 02 86 F1 | 	sub	_var02, #1
1a0d8     DC FF 9F FD | 	jmp	#LR__2841
1a0dc                 | LR__2842
1a0dc                 | LR__2843
1a0dc                 | __system___strrev_ret
1a0dc     2D 00 64 FD | 	ret
1a0e0                 | 
1a0e0                 | __system___fmtpad
1a0e0     06 4A 05 F6 | 	mov	COUNT_, #6
1a0e4     A8 00 A0 FD | 	call	#pushregs_
1a0e8     09 1F 02 F6 | 	mov	local01, arg01
1a0ec     0A 21 02 F6 | 	mov	local02, arg02
1a0f0     0B 23 02 F6 | 	mov	local03, arg03
1a0f4     10 13 EA F8 | 	getbyte	arg01, local02, #1
1a0f8     16 20 46 F0 | 	shr	local02, #22
1a0fc     03 20 0E F5 | 	and	local02, #3 wz
1a100     00 24 06 F6 | 	mov	local04, #0
1a104     01 20 06 A6 |  if_e	mov	local02, #1
1a108     0C 21 CA F7 | 	test	local02, arg04 wz
1a10c     00 FA 05 A6 |  if_e	mov	result1, #0
1a110     88 00 90 AD |  if_e	jmp	#LR__2853
1a114     09 23 C2 F2 | 	subr	local03, arg01
1a118     01 22 56 F2 | 	cmps	local03, #1 wc
1a11c     00 FA 05 C6 |  if_b	mov	result1, #0
1a120     78 00 90 CD |  if_b	jmp	#LR__2853
1a124     03 20 0E F2 | 	cmp	local02, #3 wz
1a128     18 00 90 5D |  if_ne	jmp	#LR__2850
1a12c     01 18 0E F2 | 	cmp	arg04, #1 wz
1a130     6E 20 62 FD | 	wrz	local02
1a134     10 23 02 F1 | 	add	local03, local02
1a138     11 23 52 F6 | 	abs	local03, local03 wc
1a13c     01 22 46 F0 | 	shr	local03, #1
1a140     11 23 82 F6 | 	negc	local03, local03
1a144                 | LR__2850
1a144     01 22 56 F2 | 	cmps	local03, #1 wc
1a148     4C 00 90 CD |  if_b	jmp	#LR__2852
1a14c     11 27 02 F6 | 	mov	local05, local03
1a150                 | LR__2851
1a150     0F 21 02 F6 | 	mov	local02, local01
1a154     0F 29 02 F6 | 	mov	local06, local01
1a158     13 20 46 F7 | 	zerox	local02, #19
1a15c     14 28 46 F0 | 	shr	local06, #20
1a160     02 28 66 F0 | 	shl	local06, #2
1a164     ED 28 02 F1 | 	add	local06, __methods__
1a168     14 29 02 FB | 	rdlong	local06, local06
1a16c     20 12 06 F6 | 	mov	arg01, #32
1a170     F2 22 02 F6 | 	mov	local03, objptr
1a174     10 E5 01 F6 | 	mov	objptr, local02
1a178     2D 28 62 FD | 	call	local06
1a17c     11 E5 01 F6 | 	mov	objptr, local03
1a180     FD 28 02 F6 | 	mov	local06, result1
1a184     00 28 56 F2 | 	cmps	local06, #0 wc
1a188     14 FB 01 C6 |  if_b	mov	result1, local06
1a18c     0C 00 90 CD |  if_b	jmp	#LR__2853
1a190     14 25 02 F1 | 	add	local04, local06
1a194     EE 27 6E FB | 	djnz	local05, #LR__2851
1a198                 | LR__2852
1a198     12 FB 01 F6 | 	mov	result1, local04
1a19c                 | LR__2853
1a19c     A7 F0 03 F6 | 	mov	ptra, fp
1a1a0     B2 00 A0 FD | 	call	#popregs_
1a1a4                 | __system___fmtpad_ret
1a1a4     2D 00 64 FD | 	ret
1a1a8                 | 
1a1a8                 | __system___uitoa
1a1a8     04 4A 05 F6 | 	mov	COUNT_, #4
1a1ac     A8 00 A0 FD | 	call	#pushregs_
1a1b0     09 1F 02 F6 | 	mov	local01, arg01
1a1b4     00 1A 4E F2 | 	cmps	arg05, #0 wz
1a1b8     0F 1B 02 F6 | 	mov	arg05, local01
1a1bc     00 20 06 F6 | 	mov	local02, #0
1a1c0     37 22 06 56 |  if_ne	mov	local03, #55
1a1c4     57 22 06 A6 |  if_e	mov	local03, #87
1a1c8                 | LR__2860
1a1c8     0B 15 12 FD | 	qdiv	arg02, arg03
1a1cc     19 24 62 FD | 	getqy	local04
1a1d0     0B 15 12 FD | 	qdiv	arg02, arg03
1a1d4     0A 24 16 F2 | 	cmp	local04, #10 wc
1a1d8     30 24 06 C1 |  if_b	add	local04, #48
1a1dc     11 25 02 31 |  if_ae	add	local04, local03
1a1e0     0D 25 42 FC | 	wrbyte	local04, arg05
1a1e4     01 1A 06 F1 | 	add	arg05, #1
1a1e8     01 20 06 F1 | 	add	local02, #1
1a1ec     18 14 62 FD | 	getqx	arg02
1a1f0     00 14 0E F2 | 	cmp	arg02, #0 wz
1a1f4     D0 FF 9F 5D |  if_ne	jmp	#LR__2860
1a1f8     0C 21 12 F2 | 	cmp	local02, arg04 wc
1a1fc     C8 FF 9F CD |  if_b	jmp	#LR__2860
1a200     0D 01 48 FC | 	wrbyte	#0, arg05
1a204     0F 13 02 F6 | 	mov	arg01, local01
1a208     8C FE BF FD | 	call	#__system___strrev
1a20c     10 FB 01 F6 | 	mov	result1, local02
1a210     A7 F0 03 F6 | 	mov	ptra, fp
1a214     B2 00 A0 FD | 	call	#popregs_
1a218                 | __system___uitoa_ret
1a218     2D 00 64 FD | 	ret
1a21c                 | 
1a21c                 | __system__disassemble_0308
1a21c     10 4A 05 F6 | 	mov	COUNT_, #16
1a220     A8 00 A0 FD | 	call	#pushregs_
1a224     09 1F 02 F6 | 	mov	local01, arg01
1a228     0A 21 02 F6 | 	mov	local02, arg02
1a22c     0B 23 02 F6 | 	mov	local03, arg03
1a230     0C 25 02 F6 | 	mov	local04, arg04
1a234     0D 27 02 F6 | 	mov	local05, arg05
1a238     13 13 52 F6 | 	abs	arg01, local05 wc
1a23c     1F 28 C6 C9 |  if_b	decod	local06, #31
1a240     00 28 06 36 |  if_ae	mov	local06, #0
1a244     B4 D3 BF FD | 	call	#__system___float_fromuns
1a248     14 FB 61 F5 | 	xor	result1, local06
1a24c     FD 2A 02 F6 | 	mov	local07, result1
1a250     00 2C 06 F6 | 	mov	local08, #0
1a254     0F 13 02 F6 | 	mov	arg01, local01
1a258     00 14 06 F6 | 	mov	arg02, #0
1a25c     01 16 06 F6 | 	mov	arg03, #1
1a260     F8 DA BF FD | 	call	#__system___float_cmp
1a264     00 FA 0D F2 | 	cmp	result1, #0 wz
1a268     00 2E 06 A6 |  if_e	mov	local09, #0
1a26c     10 01 68 AC |  if_e	wrlong	#0, local02
1a270     11 2F 62 AC |  if_e	wrlong	local09, local03
1a274     8C 01 90 AD |  if_e	jmp	#LR__2882
1a278     0F 13 02 F6 | 	mov	arg01, local01
1a27c     A8 DF BF FD | 	call	#__system____builtin_ilogb
1a280     FD 30 02 F6 | 	mov	local10, result1
1a284     0A 26 0E F2 | 	cmp	local05, #10 wz
1a288     24 00 90 5D |  if_ne	jmp	#LR__2870
1a28c     18 2F 02 F6 | 	mov	local09, local10
1a290     01 2E 66 F0 | 	shl	local09, #1
1a294     18 2F 02 F1 | 	add	local09, local10
1a298     17 31 52 F6 | 	abs	local10, local09 wc
1a29c     0A 30 16 FD | 	qdiv	local10, #10
1a2a0     09 32 06 F6 | 	mov	local11, #9
1a2a4     18 30 62 FD | 	getqx	local10
1a2a8     18 31 82 F6 | 	negc	local10, local10
1a2ac     04 00 90 FD | 	jmp	#LR__2871
1a2b0                 | LR__2870
1a2b0     18 32 06 F6 | 	mov	local11, #24
1a2b4                 | LR__2871
1a2b4                 | LR__2872
1a2b4     08 2C 56 F2 | 	cmps	local08, #8 wc
1a2b8     01 2C 06 F1 | 	add	local08, #1
1a2bc     60 00 90 3D |  if_ae	jmp	#LR__2873
1a2c0     00 C0 1F FF 
1a2c4     00 12 06 F6 | 	mov	arg01, ##1065353216
1a2c8     15 15 02 F6 | 	mov	arg02, local07
1a2cc     18 17 02 F6 | 	mov	arg03, local10
1a2d0     88 E3 BF FD | 	call	#__system___float_pow_n
1a2d4     FD 14 02 F6 | 	mov	arg02, result1
1a2d8     0F 13 02 F6 | 	mov	arg01, local01
1a2dc     4C D8 BF FD | 	call	#__system___float_div
1a2e0     FD 34 02 F6 | 	mov	local12, result1
1a2e4     1A 13 02 F6 | 	mov	arg01, local12
1a2e8     00 C0 1F FF 
1a2ec     00 14 06 F6 | 	mov	arg02, ##1065353216
1a2f0     01 16 06 F6 | 	mov	arg03, #1
1a2f4     64 DA BF FD | 	call	#__system___float_cmp
1a2f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1a2fc     01 30 86 C1 |  if_b	sub	local10, #1
1a300     B0 FF 9F CD |  if_b	jmp	#LR__2872
1a304     15 15 02 F6 | 	mov	arg02, local07
1a308     1A 13 02 F6 | 	mov	arg01, local12
1a30c     01 16 66 F6 | 	neg	arg03, #1
1a310     48 DA BF FD | 	call	#__system___float_cmp
1a314     00 FA 55 F2 | 	cmps	result1, #0 wc
1a318     01 30 06 31 |  if_ae	add	local10, #1
1a31c     94 FF 9F 3D |  if_ae	jmp	#LR__2872
1a320                 | LR__2873
1a320     1A 13 02 F6 | 	mov	arg01, local12
1a324     00 DF BF FD | 	call	#__system____builtin_ilogb
1a328     FD 36 02 F6 | 	mov	local13, result1
1a32c     1A 39 02 F6 | 	mov	local14, local12
1a330     17 39 06 F4 | 	bitl	local14, #279
1a334     17 38 26 F4 | 	bith	local14, #23
1a338     1B 39 62 F0 | 	shl	local14, local13
1a33c     02 26 0E F2 | 	cmp	local05, #2 wz
1a340     02 24 66 A0 |  if_e	shl	local04, #2
1a344     00 3A 06 F6 | 	mov	local15, #0
1a348     00 24 56 F2 | 	cmps	local04, #0 wc
1a34c     10 00 90 3D |  if_ae	jmp	#LR__2874
1a350     18 25 C2 F2 | 	subr	local04, local10
1a354     00 24 56 F2 | 	cmps	local04, #0 wc
1a358     A0 00 90 CD |  if_b	jmp	#LR__2881
1a35c     04 00 90 FD | 	jmp	#LR__2875
1a360                 | LR__2874
1a360     01 24 06 F1 | 	add	local04, #1
1a364                 | LR__2875
1a364     19 25 7A F3 | 	fles	local04, local11 wcz
1a368     01 3C 06 F6 | 	mov	local16, #1
1a36c     97 22 48 FB | 	callpa	#(@LR__2877-@LR__2876)>>2,fcache_load_ptr_
1a370                 | LR__2876
1a370     00 40 00 FF 
1a374     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1a378     38 00 90 3D |  if_ae	jmp	#LR__2878
1a37c     01 24 56 F2 | 	cmps	local04, #1 wc
1a380     01 24 86 F1 | 	sub	local04, #1
1a384     2C 00 90 CD |  if_b	jmp	#LR__2878
1a388     13 3B 02 FD | 	qmul	local15, local05
1a38c     1C 37 02 F6 | 	mov	local13, local14
1a390     17 36 46 F0 | 	shr	local13, #23
1a394     17 39 06 F4 | 	bitl	local14, #279
1a398     18 3A 62 FD | 	getqx	local15
1a39c     13 3D 02 FD | 	qmul	local16, local05
1a3a0     18 3C 62 FD | 	getqx	local16
1a3a4     13 39 02 FD | 	qmul	local14, local05
1a3a8     1B 3B 02 F1 | 	add	local15, local13
1a3ac     18 38 62 FD | 	getqx	local14
1a3b0     BC FF 9F FD | 	jmp	#LR__2876
1a3b4                 | LR__2877
1a3b4                 | LR__2878
1a3b4     13 2F 02 F6 | 	mov	local09, local05
1a3b8     17 2E 66 F0 | 	shl	local09, #23
1a3bc     17 37 52 F6 | 	abs	local13, local09 wc
1a3c0     01 36 46 F0 | 	shr	local13, #1
1a3c4     1B 37 82 F6 | 	negc	local13, local13
1a3c8     1B 39 1A F2 | 	cmp	local14, local13 wcz
1a3cc     20 00 90 1D |  if_a	jmp	#LR__2879
1a3d0     17 26 66 F0 | 	shl	local05, #23
1a3d4     13 37 52 F6 | 	abs	local13, local05 wc
1a3d8     01 36 46 F0 | 	shr	local13, #1
1a3dc     1B 37 82 F6 | 	negc	local13, local13
1a3e0     1B 39 0A F2 | 	cmp	local14, local13 wz
1a3e4     14 00 90 5D |  if_ne	jmp	#LR__2880
1a3e8     01 3A CE F7 | 	test	local15, #1 wz
1a3ec     0C 00 90 AD |  if_e	jmp	#LR__2880
1a3f0                 | LR__2879
1a3f0     01 3A 06 F1 | 	add	local15, #1
1a3f4     1E 3B 0A F2 | 	cmp	local15, local16 wz
1a3f8     01 30 06 A1 |  if_e	add	local10, #1
1a3fc                 | LR__2880
1a3fc                 | LR__2881
1a3fc     10 3B 62 FC | 	wrlong	local15, local02
1a400     11 31 62 FC | 	wrlong	local10, local03
1a404                 | LR__2882
1a404     A7 F0 03 F6 | 	mov	ptra, fp
1a408     B2 00 A0 FD | 	call	#popregs_
1a40c                 | __system__disassemble_0308_ret
1a40c     2D 00 64 FD | 	ret
1a410                 | 
1a410                 | __system__emitsign_0310
1a410     00 FA 05 F6 | 	mov	result1, #0
1a414     00 14 0E F2 | 	cmp	arg02, #0 wz
1a418     09 01 02 56 |  if_ne	mov	_var01, arg01
1a41c     01 12 06 51 |  if_ne	add	arg01, #1
1a420     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1a424     01 FA 05 56 |  if_ne	mov	result1, #1
1a428     00 16 0E F2 | 	cmp	arg03, #0 wz
1a42c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1a430     01 12 06 51 |  if_ne	add	arg01, #1
1a434     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1a438     02 FA 05 51 |  if_ne	add	result1, #2
1a43c                 | __system__emitsign_0310_ret
1a43c     2D 00 64 FD | 	ret
1a440                 | 
1a440                 | __system___gettxfunc
1a440     01 4A 05 F6 | 	mov	COUNT_, #1
1a444     A8 00 A0 FD | 	call	#pushregs_
1a448     A0 F8 BF FD | 	call	#__system____getftab
1a44c     FD 1E 0A F6 | 	mov	local01, result1 wz
1a450     10 00 90 AD |  if_e	jmp	#LR__2890
1a454     08 1E 06 F1 | 	add	local01, #8
1a458     0F 15 0A FB | 	rdlong	arg02, local01 wz
1a45c     08 1E 86 F1 | 	sub	local01, #8
1a460     08 00 90 5D |  if_ne	jmp	#LR__2891
1a464                 | LR__2890
1a464     00 FA 05 F6 | 	mov	result1, #0
1a468     0C 00 90 FD | 	jmp	#LR__2892
1a46c                 | LR__2891
1a46c     00 70 02 FF 
1a470     00 1E 46 F5 | 	or	local01, ##81788928
1a474     0F FB 01 F6 | 	mov	result1, local01
1a478                 | LR__2892
1a478     A7 F0 03 F6 | 	mov	ptra, fp
1a47c     B2 00 A0 FD | 	call	#popregs_
1a480                 | __system___gettxfunc_ret
1a480     2D 00 64 FD | 	ret
1a484                 | 
1a484                 | __system___getrxfunc
1a484     01 4A 05 F6 | 	mov	COUNT_, #1
1a488     A8 00 A0 FD | 	call	#pushregs_
1a48c     5C F8 BF FD | 	call	#__system____getftab
1a490     FD 1E 0A F6 | 	mov	local01, result1 wz
1a494     10 00 90 AD |  if_e	jmp	#LR__2900
1a498     08 1E 06 F1 | 	add	local01, #8
1a49c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1a4a0     08 1E 86 F1 | 	sub	local01, #8
1a4a4     08 00 90 5D |  if_ne	jmp	#LR__2901
1a4a8                 | LR__2900
1a4a8     00 FA 05 F6 | 	mov	result1, #0
1a4ac     0C 00 90 FD | 	jmp	#LR__2902
1a4b0                 | LR__2901
1a4b0     00 78 02 FF 
1a4b4     00 1E 46 F5 | 	or	local01, ##82837504
1a4b8     0F FB 01 F6 | 	mov	result1, local01
1a4bc                 | LR__2902
1a4bc     A7 F0 03 F6 | 	mov	ptra, fp
1a4c0     B2 00 A0 FD | 	call	#popregs_
1a4c4                 | __system___getrxfunc_ret
1a4c4     2D 00 64 FD | 	ret
1a4c8                 | 
1a4c8                 | __system___getiolock_0350
1a4c8     01 4A 05 F6 | 	mov	COUNT_, #1
1a4cc     A8 00 A0 FD | 	call	#pushregs_
1a4d0     18 F8 BF FD | 	call	#__system____getftab
1a4d4     FD 1E 0A F6 | 	mov	local01, result1 wz
1a4d8     10 00 90 AD |  if_e	jmp	#LR__2910
1a4dc     08 1E 06 F1 | 	add	local01, #8
1a4e0     0F FB 09 FB | 	rdlong	result1, local01 wz
1a4e4     08 1E 86 F1 | 	sub	local01, #8
1a4e8     18 00 90 5D |  if_ne	jmp	#LR__2911
1a4ec                 | LR__2910
1a4ec     01 00 00 FF 
1a4f0     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1a4f4     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1a4f8     01 00 00 FF 
1a4fc     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1a500     08 00 90 FD | 	jmp	#LR__2912
1a504                 | LR__2911
1a504     0C 1E 06 F1 | 	add	local01, #12
1a508     0F FB 01 F6 | 	mov	result1, local01
1a50c                 | LR__2912
1a50c     A7 F0 03 F6 | 	mov	ptra, fp
1a510     B2 00 A0 FD | 	call	#popregs_
1a514                 | __system___getiolock_0350_ret
1a514     2D 00 64 FD | 	ret
1a518                 | 
1a518                 | __system____ScanForChar
1a518     09 01 02 F6 | 	mov	_var01, arg01
1a51c     09 03 02 F6 | 	mov	_var02, arg01
1a520     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
1a524                 | LR__2920
1a524     01 FB C9 FA | 	rdbyte	result1, _var02 wz
1a528     01 02 06 51 |  if_ne	add	_var02, #1
1a52c     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
1a530                 | LR__2921
1a530     09 03 82 F1 | 	sub	_var02, arg01
1a534     01 FB 01 F6 | 	mov	result1, _var02
1a538     FD 12 0A F6 | 	mov	arg01, result1 wz
1a53c     00 FA 05 A6 |  if_e	mov	result1, #0
1a540     B8 00 90 AD |  if_e	jmp	#LR__2928
1a544     0A 05 02 F6 | 	mov	_var03, arg02
1a548     07 04 4E F7 | 	zerox	_var03, #7 wz
1a54c     00 FA 05 A6 |  if_e	mov	result1, #0
1a550     A8 00 90 AD |  if_e	jmp	#LR__2928
1a554     01 16 16 F2 | 	cmp	arg03, #1 wc
1a558     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
1a55c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
1a560     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
1a564     94 00 90 4D |  if_c_and_nz	jmp	#LR__2928
1a568     09 17 1A F2 | 	cmp	arg03, arg01 wcz
1a56c     10 00 90 ED |  if_be	jmp	#LR__2922
1a570     00 18 0E F2 | 	cmp	arg04, #0 wz
1a574     00 FA 05 A6 |  if_e	mov	result1, #0
1a578     80 00 90 AD |  if_e	jmp	#LR__2928
1a57c     09 17 02 F6 | 	mov	arg03, arg01
1a580                 | LR__2922
1a580     01 16 86 F1 | 	sub	arg03, #1
1a584     00 18 0E F2 | 	cmp	arg04, #0 wz
1a588     38 00 90 5D |  if_ne	jmp	#LR__2924
1a58c     0B 07 02 F6 | 	mov	_var04, arg03
1a590     09 09 02 F6 | 	mov	_var05, arg01
1a594                 | LR__2923
1a594     04 07 12 F2 | 	cmp	_var04, _var05 wc
1a598     5C 00 90 3D |  if_ae	jmp	#LR__2927
1a59c     03 05 02 F6 | 	mov	_var03, _var04
1a5a0     00 05 02 F1 | 	add	_var03, _var01
1a5a4     02 05 C2 FA | 	rdbyte	_var03, _var03
1a5a8     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
1a5ac     0C 05 0A F2 | 	cmp	_var03, arg04 wz
1a5b0     01 06 06 A1 |  if_e	add	_var04, #1
1a5b4     03 FB 01 A6 |  if_e	mov	result1, _var04
1a5b8     40 00 90 AD |  if_e	jmp	#LR__2928
1a5bc     01 06 06 F1 | 	add	_var04, #1
1a5c0     D0 FF 9F FD | 	jmp	#LR__2923
1a5c4                 | LR__2924
1a5c4     0B 07 02 F6 | 	mov	_var04, arg03
1a5c8                 | LR__2925
1a5c8     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
1a5cc     28 00 90 1D |  if_a	jmp	#LR__2926
1a5d0     03 09 02 F6 | 	mov	_var05, _var04
1a5d4     00 09 02 F1 | 	add	_var05, _var01
1a5d8     04 05 C2 FA | 	rdbyte	_var03, _var05
1a5dc     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
1a5e0     04 05 0A F2 | 	cmp	_var03, _var05 wz
1a5e4     01 06 06 A1 |  if_e	add	_var04, #1
1a5e8     03 FB 01 A6 |  if_e	mov	result1, _var04
1a5ec     0C 00 90 AD |  if_e	jmp	#LR__2928
1a5f0     01 06 86 F1 | 	sub	_var04, #1
1a5f4     D0 FF 9F FD | 	jmp	#LR__2925
1a5f8                 | LR__2926
1a5f8                 | LR__2927
1a5f8     00 FA 05 F6 | 	mov	result1, #0
1a5fc                 | LR__2928
1a5fc                 | __system____ScanForChar_ret
1a5fc     2D 00 64 FD | 	ret
1a600                 | 
1a600                 | __system___basic_dir
1a600     05 4A 05 F6 | 	mov	COUNT_, #5
1a604     A8 00 A0 FD | 	call	#pushregs_
1a608     4C F0 07 F1 | 	add	ptra, #76
1a60c     04 4E 05 F1 | 	add	fp, #4
1a610     A7 12 62 FC | 	wrlong	arg01, fp
1a614     04 4E 05 F1 | 	add	fp, #4
1a618     A7 14 62 FC | 	wrlong	arg02, fp
1a61c     04 4E 85 F1 | 	sub	fp, #4
1a620     A7 14 0A FB | 	rdlong	arg02, fp wz
1a624     04 4E 85 F1 | 	sub	fp, #4
1a628     04 4E 05 51 |  if_ne	add	fp, #4
1a62c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a630     04 4E 85 51 |  if_ne	sub	fp, #4
1a634     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1a638     70 00 90 AD |  if_e	jmp	#LR__2930
1a63c     03 00 00 FF 
1a640     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a644     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a648     03 00 00 FF 
1a64c     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a650     03 00 00 5F 
1a654     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1a658     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1a65c     03 00 00 5F 
1a660     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1a664     14 EA BF 5D |  if_ne	call	#__system__closedir
1a668     20 01 00 FF 
1a66c     4C 13 06 F6 | 	mov	arg01, ##@LR__4088
1a670     1C E9 BF FD | 	call	#__system__opendir
1a674     03 00 00 FF 
1a678     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a67c     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1a680     08 4E 05 F1 | 	add	fp, #8
1a684     A7 20 02 FB | 	rdlong	local02, fp
1a688     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1a68c     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1a690     04 4E 85 F1 | 	sub	fp, #4
1a694     A7 20 02 FB | 	rdlong	local02, fp
1a698     04 4E 85 F1 | 	sub	fp, #4
1a69c     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1a6a0     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1a6a4     03 00 00 FF 
1a6a8     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1a6ac                 | LR__2930
1a6ac     03 00 00 FF 
1a6b0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a6b4     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a6b8     03 00 00 FF 
1a6bc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a6c0     20 01 00 AF 
1a6c4     4E FB 05 A6 |  if_e	mov	result1, ##@LR__4089
1a6c8     84 02 90 AD |  if_e	jmp	#LR__2943
1a6cc                 | LR__2931
1a6cc     03 00 00 FF 
1a6d0     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a6d4     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1a6d8     03 00 00 FF 
1a6dc     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a6e0     0C EA BF FD | 	call	#__system__readdir
1a6e4     0C 4E 05 F1 | 	add	fp, #12
1a6e8     A7 FA 61 FC | 	wrlong	result1, fp
1a6ec     0C 4E 85 F1 | 	sub	fp, #12
1a6f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a6f4     38 00 90 5D |  if_ne	jmp	#LR__2932
1a6f8     03 00 00 FF 
1a6fc     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a700     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1a704     03 00 00 FF 
1a708     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a70c     6C E9 BF FD | 	call	#__system__closedir
1a710     03 00 00 FF 
1a714     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1a718     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1a71c     03 00 00 FF 
1a720     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1a724     20 01 00 FF 
1a728     50 FB 05 F6 | 	mov	result1, ##@LR__4090
1a72c     20 02 90 FD | 	jmp	#LR__2943
1a730                 | LR__2932
1a730     0C 4E 05 F1 | 	add	fp, #12
1a734     A7 12 02 FB | 	rdlong	arg01, fp
1a738     0C 4E 85 F1 | 	sub	fp, #12
1a73c     03 00 00 FF 
1a740     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1a744     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1a748     03 00 00 FF 
1a74c     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1a750     48 07 B0 FD | 	call	#__system___pat_match
1a754     00 FA 0D F2 | 	cmp	result1, #0 wz
1a758     70 FF 9F AD |  if_e	jmp	#LR__2931
1a75c     03 00 00 FF 
1a760     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1a764     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1a768     03 00 00 FF 
1a76c     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1a770     78 01 90 AD |  if_e	jmp	#LR__2939
1a774     0C 4E 05 F1 | 	add	fp, #12
1a778     A7 12 02 FB | 	rdlong	arg01, fp
1a77c     04 4E 05 F1 | 	add	fp, #4
1a780     A7 14 02 F6 | 	mov	arg02, fp
1a784     10 4E 85 F1 | 	sub	fp, #16
1a788     68 F2 BF FD | 	call	#__system__stat
1a78c     40 4E 05 F1 | 	add	fp, #64
1a790     A7 FA 61 FC | 	wrlong	result1, fp
1a794     40 4E 85 F1 | 	sub	fp, #64
1a798     00 FA 0D F2 | 	cmp	result1, #0 wz
1a79c     20 01 00 5F 
1a7a0     52 FB 05 56 |  if_ne	mov	result1, ##@LR__4091
1a7a4     A8 01 90 5D |  if_ne	jmp	#LR__2943
1a7a8     18 4E 05 F1 | 	add	fp, #24
1a7ac     A7 20 02 FB | 	rdlong	local02, fp
1a7b0     78 00 00 FF 
1a7b4     00 20 06 F5 | 	and	local02, ##61440
1a7b8     2C 4E 05 F1 | 	add	fp, #44
1a7bc     A7 20 62 FC | 	wrlong	local02, fp
1a7c0     38 4E 85 F1 | 	sub	fp, #56
1a7c4     A7 20 02 FB | 	rdlong	local02, fp
1a7c8     0C 4E 85 F1 | 	sub	fp, #12
1a7cc     10 21 C2 FA | 	rdbyte	local02, local02
1a7d0     2E 20 0E F2 | 	cmp	local02, #46 wz
1a7d4     08 4E 05 A1 |  if_e	add	fp, #8
1a7d8     A7 04 68 AC |  if_e	wrlong	#2, fp
1a7dc     08 4E C5 F3 | 	sumz	fp, #8
1a7e0     A7 00 68 5C |  if_ne	wrlong	#0, fp
1a7e4     08 4E 85 51 |  if_ne	sub	fp, #8
1a7e8     44 4E 05 F1 | 	add	fp, #68
1a7ec     A7 20 02 FB | 	rdlong	local02, fp
1a7f0     44 4E 85 F1 | 	sub	fp, #68
1a7f4     08 00 00 FF 
1a7f8     00 20 0E F2 | 	cmp	local02, ##4096 wz
1a7fc     18 00 90 5D |  if_ne	jmp	#LR__2933
1a800     08 4E 05 F1 | 	add	fp, #8
1a804     A7 20 02 FB | 	rdlong	local02, fp
1a808     10 20 46 F5 | 	or	local02, #16
1a80c     A7 20 62 FC | 	wrlong	local02, fp
1a810     08 4E 85 F1 | 	sub	fp, #8
1a814     AC 00 90 FD | 	jmp	#LR__2938
1a818                 | LR__2933
1a818     44 4E 05 F1 | 	add	fp, #68
1a81c     A7 20 02 FB | 	rdlong	local02, fp
1a820     44 4E 85 F1 | 	sub	fp, #68
1a824     10 00 00 FF 
1a828     00 20 0E F2 | 	cmp	local02, ##8192 wz
1a82c     44 4E 05 51 |  if_ne	add	fp, #68
1a830     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1a834     44 4E 85 51 |  if_ne	sub	fp, #68
1a838     18 00 00 5F 
1a83c     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1a840     44 4E 05 51 |  if_ne	add	fp, #68
1a844     0F 23 02 56 |  if_ne	mov	local03, local01
1a848     44 4E 85 51 |  if_ne	sub	fp, #68
1a84c     20 00 00 5F 
1a850     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1a854     18 00 90 5D |  if_ne	jmp	#LR__2934
1a858     08 4E 05 F1 | 	add	fp, #8
1a85c     A7 20 02 FB | 	rdlong	local02, fp
1a860     04 20 46 F5 | 	or	local02, #4
1a864     A7 20 62 FC | 	wrlong	local02, fp
1a868     08 4E 85 F1 | 	sub	fp, #8
1a86c     54 00 90 FD | 	jmp	#LR__2937
1a870                 | LR__2934
1a870     18 4E 05 F1 | 	add	fp, #24
1a874     A7 20 02 FB | 	rdlong	local02, fp
1a878     18 4E 85 F1 | 	sub	fp, #24
1a87c     92 20 CE F7 | 	test	local02, #146 wz
1a880     18 00 90 5D |  if_ne	jmp	#LR__2935
1a884     08 4E 05 F1 | 	add	fp, #8
1a888     A7 20 02 FB | 	rdlong	local02, fp
1a88c     01 20 46 F5 | 	or	local02, #1
1a890     A7 20 62 FC | 	wrlong	local02, fp
1a894     08 4E 85 F1 | 	sub	fp, #8
1a898     28 00 90 FD | 	jmp	#LR__2936
1a89c                 | LR__2935
1a89c     44 4E 05 F1 | 	add	fp, #68
1a8a0     A7 24 02 FB | 	rdlong	local04, fp
1a8a4     44 4E 85 F1 | 	sub	fp, #68
1a8a8     08 00 00 FF 
1a8ac     00 24 0E F2 | 	cmp	local04, ##4096 wz
1a8b0     08 4E 05 51 |  if_ne	add	fp, #8
1a8b4     A7 24 02 5B |  if_ne	rdlong	local04, fp
1a8b8     20 24 46 55 |  if_ne	or	local04, #32
1a8bc     A7 24 62 5C |  if_ne	wrlong	local04, fp
1a8c0     08 4E 85 51 |  if_ne	sub	fp, #8
1a8c4                 | LR__2936
1a8c4                 | LR__2937
1a8c4                 | LR__2938
1a8c4     08 4E 05 F1 | 	add	fp, #8
1a8c8     A7 24 02 FB | 	rdlong	local04, fp
1a8cc     08 4E 85 F1 | 	sub	fp, #8
1a8d0     03 00 00 FF 
1a8d4     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1a8d8     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1a8dc     03 00 00 FF 
1a8e0     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1a8e4     0F 25 CA F7 | 	test	local04, local01 wz
1a8e8     E0 FD 9F AD |  if_e	jmp	#LR__2931
1a8ec                 | LR__2939
1a8ec     0C 4E 05 F1 | 	add	fp, #12
1a8f0     A7 12 02 FB | 	rdlong	arg01, fp
1a8f4     0C 4E 85 F1 | 	sub	fp, #12
1a8f8     09 27 02 F6 | 	mov	local05, arg01
1a8fc     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
1a900                 | LR__2940
1a900     13 FB C9 FA | 	rdbyte	result1, local05 wz
1a904     01 26 06 51 |  if_ne	add	local05, #1
1a908     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
1a90c                 | LR__2941
1a90c     13 13 C2 F2 | 	subr	arg01, local05
1a910     01 12 06 F1 | 	add	arg01, #1
1a914     64 E0 BF FD | 	call	#__system___gc_alloc_managed
1a918     48 4E 05 F1 | 	add	fp, #72
1a91c     A7 FA 61 FC | 	wrlong	result1, fp
1a920     48 4E 85 F1 | 	sub	fp, #72
1a924     00 FA 0D F2 | 	cmp	result1, #0 wz
1a928     18 00 90 AD |  if_e	jmp	#LR__2942
1a92c     48 4E 05 F1 | 	add	fp, #72
1a930     A7 12 02 FB | 	rdlong	arg01, fp
1a934     3C 4E 85 F1 | 	sub	fp, #60
1a938     A7 14 02 FB | 	rdlong	arg02, fp
1a93c     0C 4E 85 F1 | 	sub	fp, #12
1a940     84 A5 BF FD | 	call	#__system____builtin_strcpy
1a944                 | LR__2942
1a944     48 4E 05 F1 | 	add	fp, #72
1a948     A7 FA 01 FB | 	rdlong	result1, fp
1a94c     48 4E 85 F1 | 	sub	fp, #72
1a950                 | LR__2943
1a950     A7 F0 03 F6 | 	mov	ptra, fp
1a954     B2 00 A0 FD | 	call	#popregs_
1a958                 | __system___basic_dir_ret
1a958     2D 00 64 FD | 	ret
1a95c                 | 
1a95c                 | __system__pack_0416
1a95c     09 01 02 F6 | 	mov	_var01, arg01
1a960     7F 16 06 F1 | 	add	arg03, #127
1a964     04 18 CE F7 | 	test	arg04, #4 wz
1a968     10 00 90 AD |  if_e	jmp	#LR__2950
1a96c     00 00 0E F2 | 	cmp	_var01, #0 wz
1a970     16 00 C6 A9 |  if_e	decod	_var01, #22
1a974     F7 00 26 F4 | 	bith	_var01, #247
1a978     B4 00 90 FD | 	jmp	#LR__2959
1a97c                 | LR__2950
1a97c     02 18 CE F7 | 	test	arg04, #2 wz
1a980     00 C0 3F 5F 
1a984     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1a988     00 14 06 56 |  if_ne	mov	arg02, #0
1a98c     A0 00 90 5D |  if_ne	jmp	#LR__2958
1a990     08 18 CE F7 | 	test	arg04, #8 wz
1a994     00 00 06 56 |  if_ne	mov	_var01, #0
1a998     94 00 90 5D |  if_ne	jmp	#LR__2957
1a99c     FF 16 56 F2 | 	cmps	arg03, #255 wc
1a9a0     00 C0 3F 3F 
1a9a4     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1a9a8     00 14 06 36 |  if_ae	mov	arg02, #0
1a9ac     80 00 90 3D |  if_ae	jmp	#LR__2956
1a9b0     01 16 56 F2 | 	cmps	arg03, #1 wc
1a9b4     6C 00 90 3D |  if_ae	jmp	#LR__2954
1a9b8     01 14 46 F0 | 	shr	arg02, #1
1a9bc     00 03 02 F6 | 	mov	_var02, _var01
1a9c0     01 02 06 F5 | 	and	_var02, #1
1a9c4     1F 02 66 F0 | 	shl	_var02, #31
1a9c8     01 15 42 F5 | 	or	arg02, _var02
1a9cc     01 00 46 F0 | 	shr	_var01, #1
1a9d0     97 1E 48 FB | 	callpa	#(@LR__2952-@LR__2951)>>2,fcache_load_ptr_
1a9d4                 | LR__2951
1a9d4     00 16 56 F2 | 	cmps	arg03, #0 wc
1a9d8     34 00 90 3D |  if_ae	jmp	#LR__2953
1a9dc     00 00 0E F2 | 	cmp	_var01, #0 wz
1a9e0     2C 00 90 AD |  if_e	jmp	#LR__2953
1a9e4     0A 13 02 F6 | 	mov	arg01, arg02
1a9e8     01 12 06 F5 | 	and	arg01, #1
1a9ec     01 16 06 F1 | 	add	arg03, #1
1a9f0     01 14 46 F0 | 	shr	arg02, #1
1a9f4     00 03 02 F6 | 	mov	_var02, _var01
1a9f8     01 02 06 F5 | 	and	_var02, #1
1a9fc     1F 02 66 F0 | 	shl	_var02, #31
1aa00     01 15 42 F5 | 	or	arg02, _var02
1aa04     09 15 42 F5 | 	or	arg02, arg01
1aa08     01 00 46 F0 | 	shr	_var01, #1
1aa0c     C4 FF 9F FD | 	jmp	#LR__2951
1aa10                 | LR__2952
1aa10                 | LR__2953
1aa10     00 16 56 F2 | 	cmps	arg03, #0 wc
1aa14     18 00 90 3D |  if_ae	jmp	#LR__2955
1aa18     00 14 0E F2 | 	cmp	arg02, #0 wz
1aa1c     6F 14 62 FD | 	wrnz	arg02
1aa20     0C 00 90 FD | 	jmp	#LR__2955
1aa24                 | LR__2954
1aa24     17 01 06 F4 | 	bitl	_var01, #279
1aa28     17 16 66 F0 | 	shl	arg03, #23
1aa2c     0B 01 42 F5 | 	or	_var01, arg03
1aa30                 | LR__2955
1aa30                 | LR__2956
1aa30                 | LR__2957
1aa30                 | LR__2958
1aa30                 | LR__2959
1aa30     01 00 CE F7 | 	test	_var01, #1 wz
1aa34     01 14 46 55 |  if_ne	or	arg02, #1
1aa38     0A 17 02 F6 | 	mov	arg03, arg02
1aa3c     00 02 06 F6 | 	mov	_var02, #0
1aa40     FF FF 3F FF 
1aa44     FF 15 06 F1 | 	add	arg02, ##2147483647
1aa48     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1aa4c     01 02 06 C6 |  if_b	mov	_var02, #1
1aa50     01 01 02 F1 | 	add	_var01, _var02
1aa54     01 18 CE F7 | 	test	arg04, #1 wz
1aa58     1F 00 26 54 |  if_ne	bith	_var01, #31
1aa5c     00 FB 01 F6 | 	mov	result1, _var01
1aa60                 | __system__pack_0416_ret
1aa60     2D 00 64 FD | 	ret
1aa64                 | 
1aa64                 | __system___rxtxioctl_0505
1aa64     00 15 0E F2 | 	cmp	arg02, #256 wz
1aa68     0C 00 90 AD |  if_e	jmp	#LR__2960
1aa6c     01 15 0E F2 | 	cmp	arg02, #257 wz
1aa70     1C 00 90 AD |  if_e	jmp	#LR__2961
1aa74     30 00 90 FD | 	jmp	#LR__2962
1aa78                 | LR__2960
1aa78     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1aa7c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1aa80     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1aa84     0B FB 61 FC | 	wrlong	result1, arg03
1aa88     00 FA 05 F6 | 	mov	result1, #0
1aa8c     28 00 90 FD | 	jmp	#LR__2963
1aa90                 | LR__2961
1aa90     0B 13 02 FB | 	rdlong	arg01, arg03
1aa94     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1aa98     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1aa9c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1aaa0     00 FA 05 F6 | 	mov	result1, #0
1aaa4     10 00 90 FD | 	jmp	#LR__2963
1aaa8                 | LR__2962
1aaa8     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1aaac     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1aab0     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1aab4     01 FA 65 F6 | 	neg	result1, #1
1aab8                 | LR__2963
1aab8                 | __system___rxtxioctl_0505_ret
1aab8     2D 00 64 FD | 	ret
1aabc                 | 
1aabc                 | __system____dummy_flush_0506
1aabc     00 FA 05 F6 | 	mov	result1, #0
1aac0                 | __system____dummy_flush_0506_ret
1aac0     2D 00 64 FD | 	ret
1aac4                 | 
1aac4                 | __system___vfsread
1aac4     03 4A 05 F6 | 	mov	COUNT_, #3
1aac8     A8 00 A0 FD | 	call	#pushregs_
1aacc     28 F0 07 F1 | 	add	ptra, #40
1aad0     04 4E 05 F1 | 	add	fp, #4
1aad4     A7 12 62 FC | 	wrlong	arg01, fp
1aad8     04 4E 05 F1 | 	add	fp, #4
1aadc     A7 14 62 FC | 	wrlong	arg02, fp
1aae0     04 4E 05 F1 | 	add	fp, #4
1aae4     A7 16 62 FC | 	wrlong	arg03, fp
1aae8     04 4E 85 F1 | 	sub	fp, #4
1aaec     A7 FA 01 FB | 	rdlong	result1, fp
1aaf0     14 4E 05 F1 | 	add	fp, #20
1aaf4     A7 FA 61 FC | 	wrlong	result1, fp
1aaf8     04 4E 05 F1 | 	add	fp, #4
1aafc     A7 00 68 FC | 	wrlong	#0, fp
1ab00     1C 4E 85 F1 | 	sub	fp, #28
1ab04     A7 12 02 FB | 	rdlong	arg01, fp
1ab08     04 4E 85 F1 | 	sub	fp, #4
1ab0c     08 12 06 F1 | 	add	arg01, #8
1ab10     09 FB 01 FB | 	rdlong	result1, arg01
1ab14     01 FA CD F7 | 	test	result1, #1 wz
1ab18     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ab1c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ab20     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ab24     01 FA 65 A6 |  if_e	neg	result1, #1
1ab28     74 02 90 AD |  if_e	jmp	#LR__2976
1ab2c     04 4E 05 F1 | 	add	fp, #4
1ab30     A7 12 02 FB | 	rdlong	arg01, fp
1ab34     04 4E 85 F1 | 	sub	fp, #4
1ab38     14 12 06 F1 | 	add	arg01, #20
1ab3c     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ab40     B8 00 90 AD |  if_e	jmp	#LR__2971
1ab44     04 4E 05 F1 | 	add	fp, #4
1ab48     A7 12 02 FB | 	rdlong	arg01, fp
1ab4c     09 17 02 F6 | 	mov	arg03, arg01
1ab50     14 16 06 F1 | 	add	arg03, #20
1ab54     0B 1F 02 FB | 	rdlong	local01, arg03
1ab58     0F 21 02 F6 | 	mov	local02, local01
1ab5c     13 1E 46 F7 | 	zerox	local01, #19
1ab60     14 20 46 F0 | 	shr	local02, #20
1ab64     02 20 66 F0 | 	shl	local02, #2
1ab68     ED 20 02 F1 | 	add	local02, __methods__
1ab6c     10 21 02 FB | 	rdlong	local02, local02
1ab70     04 4E 05 F1 | 	add	fp, #4
1ab74     A7 14 02 FB | 	rdlong	arg02, fp
1ab78     04 4E 05 F1 | 	add	fp, #4
1ab7c     A7 16 02 FB | 	rdlong	arg03, fp
1ab80     0C 4E 85 F1 | 	sub	fp, #12
1ab84     F2 22 02 F6 | 	mov	local03, objptr
1ab88     0F E5 01 F6 | 	mov	objptr, local01
1ab8c     2D 20 62 FD | 	call	local02
1ab90     11 E5 01 F6 | 	mov	objptr, local03
1ab94     10 4E 05 F1 | 	add	fp, #16
1ab98     A7 FA 61 FC | 	wrlong	result1, fp
1ab9c     10 4E 85 F1 | 	sub	fp, #16
1aba0     00 FA 55 F2 | 	cmps	result1, #0 wc
1aba4     44 00 90 3D |  if_ae	jmp	#LR__2970
1aba8     04 4E 05 F1 | 	add	fp, #4
1abac     A7 22 02 FB | 	rdlong	local03, fp
1abb0     11 1F 02 F6 | 	mov	local01, local03
1abb4     08 22 06 F1 | 	add	local03, #8
1abb8     11 21 02 FB | 	rdlong	local02, local03
1abbc     20 20 46 F5 | 	or	local02, #32
1abc0     08 1E 06 F1 | 	add	local01, #8
1abc4     0F 21 62 FC | 	wrlong	local02, local01
1abc8     0C 4E 05 F1 | 	add	fp, #12
1abcc     A7 12 0A FB | 	rdlong	arg01, fp wz
1abd0     10 4E 85 F1 | 	sub	fp, #16
1abd4     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1abd8     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1abdc     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1abe0     01 FA 65 56 |  if_ne	neg	result1, #1
1abe4     00 FA 05 A6 |  if_e	mov	result1, #0
1abe8     B4 01 90 FD | 	jmp	#LR__2976
1abec                 | LR__2970
1abec     10 4E 05 F1 | 	add	fp, #16
1abf0     A7 FA 01 FB | 	rdlong	result1, fp
1abf4     10 4E 85 F1 | 	sub	fp, #16
1abf8     A4 01 90 FD | 	jmp	#LR__2976
1abfc                 | LR__2971
1abfc     04 4E 05 F1 | 	add	fp, #4
1ac00     A7 12 02 FB | 	rdlong	arg01, fp
1ac04     20 12 06 F1 | 	add	arg01, #32
1ac08     09 13 0A FB | 	rdlong	arg01, arg01 wz
1ac0c     14 4E 05 F1 | 	add	fp, #20
1ac10     A7 12 62 FC | 	wrlong	arg01, fp
1ac14     18 4E 85 F1 | 	sub	fp, #24
1ac18     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ac1c     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1ac20     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ac24     01 FA 65 A6 |  if_e	neg	result1, #1
1ac28     74 01 90 AD |  if_e	jmp	#LR__2976
1ac2c     04 4E 05 F1 | 	add	fp, #4
1ac30     A7 22 02 FB | 	rdlong	local03, fp
1ac34     04 4E 85 F1 | 	sub	fp, #4
1ac38     28 22 06 F1 | 	add	local03, #40
1ac3c     11 21 0A FB | 	rdlong	local02, local03 wz
1ac40     7C 00 90 AD |  if_e	jmp	#LR__2973
1ac44     04 4E 05 F1 | 	add	fp, #4
1ac48     A7 12 02 FB | 	rdlong	arg01, fp
1ac4c     09 23 02 F6 | 	mov	local03, arg01
1ac50     28 22 06 F1 | 	add	local03, #40
1ac54     11 1F 02 FB | 	rdlong	local01, local03
1ac58     0F 21 02 F6 | 	mov	local02, local01
1ac5c     13 1E 46 F7 | 	zerox	local01, #19
1ac60     14 20 46 F0 | 	shr	local02, #20
1ac64     02 20 66 F0 | 	shl	local02, #2
1ac68     ED 20 02 F1 | 	add	local02, __methods__
1ac6c     10 21 02 FB | 	rdlong	local02, local02
1ac70     20 4E 05 F1 | 	add	fp, #32
1ac74     A7 16 02 F6 | 	mov	arg03, fp
1ac78     24 4E 85 F1 | 	sub	fp, #36
1ac7c     00 15 06 F6 | 	mov	arg02, #256
1ac80     F2 22 02 F6 | 	mov	local03, objptr
1ac84     0F E5 01 F6 | 	mov	objptr, local01
1ac88     2D 20 62 FD | 	call	local02
1ac8c     11 E5 01 F6 | 	mov	objptr, local03
1ac90     10 4E 05 F1 | 	add	fp, #16
1ac94     A7 FA 61 FC | 	wrlong	result1, fp
1ac98     00 FA 4D F2 | 	cmps	result1, #0 wz
1ac9c     10 4E 85 F1 | 	sub	fp, #16
1aca0     1C 00 90 5D |  if_ne	jmp	#LR__2972
1aca4     24 4E 05 F1 | 	add	fp, #36
1aca8     A7 20 02 FB | 	rdlong	local02, fp
1acac     24 4E 85 F1 | 	sub	fp, #36
1acb0     02 20 CE F7 | 	test	local02, #2 wz
1acb4     20 4E 05 51 |  if_ne	add	fp, #32
1acb8     A7 02 68 5C |  if_ne	wrlong	#1, fp
1acbc     20 4E 85 51 |  if_ne	sub	fp, #32
1acc0                 | LR__2972
1acc0                 | LR__2973
1acc0     10 4E 05 F1 | 	add	fp, #16
1acc4     A7 00 68 FC | 	wrlong	#0, fp
1acc8     10 4E 85 F1 | 	sub	fp, #16
1accc                 | LR__2974
1accc     0C 4E 05 F1 | 	add	fp, #12
1acd0     A7 22 02 FB | 	rdlong	local03, fp
1acd4     0C 4E 85 F1 | 	sub	fp, #12
1acd8     01 22 16 F2 | 	cmp	local03, #1 wc
1acdc     B4 00 90 CD |  if_b	jmp	#LR__2975
1ace0     18 4E 05 F1 | 	add	fp, #24
1ace4     A7 20 02 FB | 	rdlong	local02, fp
1ace8     10 23 02 F6 | 	mov	local03, local02
1acec     13 22 46 F7 | 	zerox	local03, #19
1acf0     14 20 46 F0 | 	shr	local02, #20
1acf4     02 20 66 F0 | 	shl	local02, #2
1acf8     ED 20 02 F1 | 	add	local02, __methods__
1acfc     10 21 02 FB | 	rdlong	local02, local02
1ad00     14 4E 85 F1 | 	sub	fp, #20
1ad04     A7 12 02 FB | 	rdlong	arg01, fp
1ad08     04 4E 85 F1 | 	sub	fp, #4
1ad0c     F2 1E 02 F6 | 	mov	local01, objptr
1ad10     11 E5 01 F6 | 	mov	objptr, local03
1ad14     2D 20 62 FD | 	call	local02
1ad18     0F E5 01 F6 | 	mov	objptr, local01
1ad1c     14 4E 05 F1 | 	add	fp, #20
1ad20     A7 FA 61 FC | 	wrlong	result1, fp
1ad24     14 4E 85 F1 | 	sub	fp, #20
1ad28     00 FA 55 F2 | 	cmps	result1, #0 wc
1ad2c     64 00 90 CD |  if_b	jmp	#LR__2975
1ad30     1C 4E 05 F1 | 	add	fp, #28
1ad34     A7 22 02 FB | 	rdlong	local03, fp
1ad38     11 21 02 F6 | 	mov	local02, local03
1ad3c     01 20 06 F1 | 	add	local02, #1
1ad40     A7 20 62 FC | 	wrlong	local02, fp
1ad44     08 4E 85 F1 | 	sub	fp, #8
1ad48     A7 20 02 FB | 	rdlong	local02, fp
1ad4c     11 21 42 FC | 	wrbyte	local02, local03
1ad50     04 4E 85 F1 | 	sub	fp, #4
1ad54     A7 22 02 FB | 	rdlong	local03, fp
1ad58     01 22 06 F1 | 	add	local03, #1
1ad5c     A7 22 62 FC | 	wrlong	local03, fp
1ad60     04 4E 85 F1 | 	sub	fp, #4
1ad64     A7 22 02 FB | 	rdlong	local03, fp
1ad68     01 22 86 F1 | 	sub	local03, #1
1ad6c     A7 22 62 FC | 	wrlong	local03, fp
1ad70     14 4E 05 F1 | 	add	fp, #20
1ad74     A7 22 0A FB | 	rdlong	local03, fp wz
1ad78     20 4E 85 F1 | 	sub	fp, #32
1ad7c     4C FF 9F AD |  if_e	jmp	#LR__2974
1ad80     14 4E 05 F1 | 	add	fp, #20
1ad84     A7 20 02 FB | 	rdlong	local02, fp
1ad88     14 4E 85 F1 | 	sub	fp, #20
1ad8c     0A 20 0E F2 | 	cmp	local02, #10 wz
1ad90     38 FF 9F 5D |  if_ne	jmp	#LR__2974
1ad94                 | LR__2975
1ad94     10 4E 05 F1 | 	add	fp, #16
1ad98     A7 FA 01 FB | 	rdlong	result1, fp
1ad9c     10 4E 85 F1 | 	sub	fp, #16
1ada0                 | LR__2976
1ada0     A7 F0 03 F6 | 	mov	ptra, fp
1ada4     B2 00 A0 FD | 	call	#popregs_
1ada8                 | __system___vfsread_ret
1ada8     2D 00 64 FD | 	ret
1adac                 | 
1adac                 | __system____default_filbuf
1adac     04 4A 05 F6 | 	mov	COUNT_, #4
1adb0     A8 00 A0 FD | 	call	#pushregs_
1adb4     09 1F 02 F6 | 	mov	local01, arg01
1adb8     0F 21 02 FB | 	rdlong	local02, local01
1adbc     0C 20 06 F1 | 	add	local02, #12
1adc0     10 FB 09 FB | 	rdlong	result1, local02 wz
1adc4     0C 20 86 F1 | 	sub	local02, #12
1adc8     20 00 90 5D |  if_ne	jmp	#LR__2980
1adcc     14 20 06 F1 | 	add	local02, #20
1add0     10 FB 01 F6 | 	mov	result1, local02
1add4     04 20 86 F1 | 	sub	local02, #4
1add8     10 FB 61 FC | 	wrlong	result1, local02
1addc     04 20 86 F1 | 	sub	local02, #4
1ade0     02 00 80 FF 
1ade4     10 01 68 FC | 	wrlong	##1024, local02
1ade8     0C 20 86 F1 | 	sub	local02, #12
1adec                 | LR__2980
1adec     14 1E 06 F1 | 	add	local01, #20
1adf0     0F 23 02 FB | 	rdlong	local03, local01
1adf4     11 25 02 F6 | 	mov	local04, local03
1adf8     14 1E 86 F1 | 	sub	local01, #20
1adfc     13 24 46 F7 | 	zerox	local04, #19
1ae00     14 22 46 F0 | 	shr	local03, #20
1ae04     02 22 66 F0 | 	shl	local03, #2
1ae08     ED 22 02 F1 | 	add	local03, __methods__
1ae0c     11 23 02 FB | 	rdlong	local03, local03
1ae10     10 20 06 F1 | 	add	local02, #16
1ae14     10 15 02 FB | 	rdlong	arg02, local02
1ae18     04 20 86 F1 | 	sub	local02, #4
1ae1c     10 17 02 FB | 	rdlong	arg03, local02
1ae20     0C 20 86 F1 | 	sub	local02, #12
1ae24     0F 13 02 F6 | 	mov	arg01, local01
1ae28     F2 1E 02 F6 | 	mov	local01, objptr
1ae2c     12 E5 01 F6 | 	mov	objptr, local04
1ae30     2D 22 62 FD | 	call	local03
1ae34     0F E5 01 F6 | 	mov	objptr, local01
1ae38     FD 24 02 F6 | 	mov	local04, result1
1ae3c     00 24 56 F2 | 	cmps	local04, #0 wc
1ae40     01 FA 65 C6 |  if_b	neg	result1, #1
1ae44     28 00 90 CD |  if_b	jmp	#LR__2981
1ae48     10 25 62 FC | 	wrlong	local04, local02
1ae4c     10 20 06 F1 | 	add	local02, #16
1ae50     10 23 02 FB | 	rdlong	local03, local02
1ae54     0C 20 86 F1 | 	sub	local02, #12
1ae58     10 23 62 FC | 	wrlong	local03, local02
1ae5c     04 20 06 F1 | 	add	local02, #4
1ae60     10 23 02 FB | 	rdlong	local03, local02
1ae64     01 22 46 F5 | 	or	local03, #1
1ae68     10 23 62 FC | 	wrlong	local03, local02
1ae6c     12 FB 01 F6 | 	mov	result1, local04
1ae70                 | LR__2981
1ae70     A7 F0 03 F6 | 	mov	ptra, fp
1ae74     B2 00 A0 FD | 	call	#popregs_
1ae78                 | __system____default_filbuf_ret
1ae78     2D 00 64 FD | 	ret
1ae7c                 | 
1ae7c                 | __system__getlower_0891
1ae7c     41 12 56 F2 | 	cmps	arg01, #65 wc
1ae80     10 00 90 CD |  if_b	jmp	#LR__2990
1ae84     5B 12 56 F2 | 	cmps	arg01, #91 wc
1ae88     09 FB 01 C6 |  if_b	mov	result1, arg01
1ae8c     20 FA 05 C1 |  if_b	add	result1, #32
1ae90     04 00 90 CD |  if_b	jmp	#__system__getlower_0891_ret
1ae94                 | LR__2990
1ae94     09 FB 01 F6 | 	mov	result1, arg01
1ae98                 | __system__getlower_0891_ret
1ae98     2D 00 64 FD | 	ret
1ae9c                 | 
1ae9c                 | __system___pat_match
1ae9c     08 4A 05 F6 | 	mov	COUNT_, #8
1aea0     A8 00 A0 FD | 	call	#pushregs_
1aea4     09 1F 02 F6 | 	mov	local01, arg01
1aea8                 | LR__3000
1aea8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1aeac     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1aeb0     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1aeb4     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1aeb8     2C 00 90 AD |  if_e	jmp	#LR__3001
1aebc     0A 13 C2 FA | 	rdbyte	arg01, arg02
1aec0     B8 FF BF FD | 	call	#__system__getlower_0891
1aec4     FD 22 02 F6 | 	mov	local03, result1
1aec8     0F 13 C2 FA | 	rdbyte	arg01, local01
1aecc     AC FF BF FD | 	call	#__system__getlower_0891
1aed0     11 FB 09 F2 | 	cmp	result1, local03 wz
1aed4     00 FA 05 56 |  if_ne	mov	result1, #0
1aed8     FC 00 90 5D |  if_ne	jmp	#LR__3009
1aedc     01 1E 06 F1 | 	add	local01, #1
1aee0     01 14 06 F1 | 	add	arg02, #1
1aee4     C0 FF 9F FD | 	jmp	#LR__3000
1aee8                 | LR__3001
1aee8     0A 23 C2 FA | 	rdbyte	local03, arg02
1aeec     2A 22 0E F2 | 	cmp	local03, #42 wz
1aef0     D4 00 90 5D |  if_ne	jmp	#LR__3008
1aef4     01 14 06 F1 | 	add	arg02, #1
1aef8     0A 21 C2 FA | 	rdbyte	local02, arg02
1aefc     01 14 86 F1 | 	sub	arg02, #1
1af00     2E 20 0E F2 | 	cmp	local02, #46 wz
1af04     28 00 90 5D |  if_ne	jmp	#LR__3002
1af08     02 14 06 F1 | 	add	arg02, #2
1af0c     0A 21 C2 FA | 	rdbyte	local02, arg02
1af10     02 14 86 F1 | 	sub	arg02, #2
1af14     2A 20 0E F2 | 	cmp	local02, #42 wz
1af18     03 14 06 A1 |  if_e	add	arg02, #3
1af1c     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1af20     03 14 86 A1 |  if_e	sub	arg02, #3
1af24     12 27 0A A6 |  if_e	mov	local05, local04 wz
1af28     01 FA 05 A6 |  if_e	mov	result1, #1
1af2c     A8 00 90 AD |  if_e	jmp	#LR__3009
1af30                 | LR__3002
1af30     01 14 06 F1 | 	add	arg02, #1
1af34     00 28 06 F6 | 	mov	local06, #0
1af38     97 1E 48 FB | 	callpa	#(@LR__3005-@LR__3003)>>2,fcache_load_ptr_
1af3c                 | LR__3003
1af3c     14 2B 02 F6 | 	mov	local07, local06
1af40     0A 2B 02 F1 | 	add	local07, arg02
1af44     15 2B CA FA | 	rdbyte	local07, local07 wz
1af48     14 27 02 56 |  if_ne	mov	local05, local06
1af4c     01 26 06 51 |  if_ne	add	local05, #1
1af50     13 29 02 56 |  if_ne	mov	local06, local05
1af54     E4 FF 9F 5D |  if_ne	jmp	#LR__3003
1af58     00 2C 06 F6 | 	mov	local08, #0
1af5c                 | LR__3004
1af5c     16 2B 02 F6 | 	mov	local07, local08
1af60     0F 2B 02 F1 | 	add	local07, local01
1af64     15 2B CA FA | 	rdbyte	local07, local07 wz
1af68     16 27 02 56 |  if_ne	mov	local05, local08
1af6c     01 26 06 51 |  if_ne	add	local05, #1
1af70     13 2D 02 56 |  if_ne	mov	local08, local05
1af74     E4 FF 9F 5D |  if_ne	jmp	#LR__3004
1af78                 | LR__3005
1af78     14 2D 52 F2 | 	cmps	local08, local06 wc
1af7c     00 FA 05 C6 |  if_b	mov	result1, #0
1af80     54 00 90 CD |  if_b	jmp	#LR__3009
1af84     16 21 02 F6 | 	mov	local02, local08
1af88     14 21 82 F1 | 	sub	local02, local06
1af8c     10 1F 02 F1 | 	add	local01, local02
1af90                 | LR__3006
1af90     01 28 56 F2 | 	cmps	local06, #1 wc
1af94     30 00 90 CD |  if_b	jmp	#LR__3007
1af98     0F 13 C2 FA | 	rdbyte	arg01, local01
1af9c     DC FE BF FD | 	call	#__system__getlower_0891
1afa0     FD 2C 02 F6 | 	mov	local08, result1
1afa4     0A 13 C2 FA | 	rdbyte	arg01, arg02
1afa8     D0 FE BF FD | 	call	#__system__getlower_0891
1afac     FD 2C 0A F2 | 	cmp	local08, result1 wz
1afb0     00 FA 05 56 |  if_ne	mov	result1, #0
1afb4     20 00 90 5D |  if_ne	jmp	#LR__3009
1afb8     01 1E 06 F1 | 	add	local01, #1
1afbc     01 14 06 F1 | 	add	arg02, #1
1afc0     01 28 86 F1 | 	sub	local06, #1
1afc4     C8 FF 9F FD | 	jmp	#LR__3006
1afc8                 | LR__3007
1afc8                 | LR__3008
1afc8     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1afcc     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1afd0     01 FA 05 A6 |  if_e	mov	result1, #1
1afd4     00 FA 05 56 |  if_ne	mov	result1, #0
1afd8                 | LR__3009
1afd8     A7 F0 03 F6 | 	mov	ptra, fp
1afdc     B2 00 A0 FD | 	call	#popregs_
1afe0                 | __system___pat_match_ret
1afe0     2D 00 64 FD | 	ret
1afe4                 | 
1afe4                 | _fatfs_cc_ff_uni2oem
1afe4     00 00 06 F6 | 	mov	_var01, #0
1afe8     80 12 16 F2 | 	cmp	arg01, #128 wc
1afec     09 01 02 C6 |  if_b	mov	_var01, arg01
1aff0     58 00 90 CD |  if_b	jmp	#LR__3014
1aff4     80 00 00 FF 
1aff8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1affc     4C 00 90 3D |  if_ae	jmp	#LR__3013
1b000     0A FB 31 F9 | 	getword	result1, arg02, #0
1b004     01 00 00 FF 
1b008     52 FB 0D F2 | 	cmp	result1, ##850 wz
1b00c     3C 00 90 5D |  if_ne	jmp	#LR__3013
1b010                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1b010     00 00 06 F6 | 	mov	_var01, #0
1b014     97 14 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
1b018                 | LR__3010
1b018     00 FB 31 F9 | 	getword	result1, _var01, #0
1b01c     80 FA 15 F2 | 	cmp	result1, #128 wc
1b020     1C 00 90 3D |  if_ae	jmp	#LR__3012
1b024     00 FB 31 F9 | 	getword	result1, _var01, #0
1b028     01 FA 65 F0 | 	shl	result1, #1
1b02c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1b030     FD FA E1 FA | 	rdword	result1, result1
1b034     FD 12 0A F2 | 	cmp	arg01, result1 wz
1b038     01 00 06 51 |  if_ne	add	_var01, #1
1b03c     D8 FF 9F 5D |  if_ne	jmp	#LR__3010
1b040                 | LR__3011
1b040                 | LR__3012
1b040     00 01 32 F9 | 	getword	_var01, _var01, #0
1b044     80 00 06 F1 | 	add	_var01, #128
1b048     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1b04c                 | LR__3013
1b04c                 | LR__3014
1b04c                 | ' 			c = (c + 0x80) & 0xFF;
1b04c                 | ' 		}
1b04c                 | ' 	}
1b04c                 | ' 
1b04c                 | ' 	return c;
1b04c     00 FB 01 F6 | 	mov	result1, _var01
1b050                 | _fatfs_cc_ff_uni2oem_ret
1b050     2D 00 64 FD | 	ret
1b054                 | 
1b054                 | _fatfs_cc_ff_oem2uni
1b054     00 00 06 F6 | 	mov	_var01, #0
1b058     09 FB 31 F9 | 	getword	result1, arg01, #0
1b05c     80 FA 15 F2 | 	cmp	result1, #128 wc
1b060     09 01 02 C6 |  if_b	mov	_var01, arg01
1b064     2C 00 90 CD |  if_b	jmp	#LR__3021
1b068     0A 15 32 F9 | 	getword	arg02, arg02, #0
1b06c     01 00 00 FF 
1b070     52 15 0E F2 | 	cmp	arg02, ##850 wz
1b074     1C 00 90 5D |  if_ne	jmp	#LR__3020
1b078     09 FB 31 F9 | 	getword	result1, arg01, #0
1b07c     00 FB 15 F2 | 	cmp	result1, #256 wc
1b080     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1b084     80 12 86 C1 |  if_b	sub	arg01, #128
1b088     01 12 66 C0 |  if_b	shl	arg01, #1
1b08c     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1b090     09 01 E2 CA |  if_b	rdword	_var01, arg01
1b094                 | LR__3020
1b094                 | LR__3021
1b094                 | ' 		}
1b094                 | ' 	}
1b094                 | ' 
1b094                 | ' 	return c;
1b094     00 FB 01 F6 | 	mov	result1, _var01
1b098                 | _fatfs_cc_ff_oem2uni_ret
1b098     2D 00 64 FD | 	ret
1b09c                 | 
1b09c                 | _fatfs_cc_ff_wtoupper
1b09c     09 01 02 F6 | 	mov	_var01, arg01
1b0a0     80 00 00 FF 
1b0a4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1b0a8     60 01 90 3D |  if_ae	jmp	#LR__3043
1b0ac     00 03 02 F6 | 	mov	_var02, _var01
1b0b0     01 01 32 F9 | 	getword	_var01, _var02, #0
1b0b4     08 00 00 FF 
1b0b8     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1b0bc     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1b0c0     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1b0c4     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1b0c8     01 00 00 3F 
1b0cc     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1b0d0     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1b0d4     01 00 00 3F 
1b0d8     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1b0dc     02 07 02 F6 | 	mov	_var04, _var03
1b0e0                 | ' 		uc = (WORD)uni;
1b0e0                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1b0e0                 | ' 		for (;;) {
1b0e0                 | LR__3030
1b0e0     03 09 E2 FA | 	rdword	_var05, _var04
1b0e4     04 05 02 F6 | 	mov	_var03, _var05
1b0e8     0F 04 4E F7 | 	zerox	_var03, #15 wz
1b0ec     02 06 06 F1 | 	add	_var04, #2
1b0f0     14 01 90 AD |  if_e	jmp	#LR__3042
1b0f4     01 05 32 F9 | 	getword	_var03, _var02, #0
1b0f8     04 01 32 F9 | 	getword	_var01, _var05, #0
1b0fc     00 05 12 F2 | 	cmp	_var03, _var01 wc
1b100     04 01 90 CD |  if_b	jmp	#LR__3042
1b104     03 0B E2 FA | 	rdword	_var06, _var04
1b108     05 0D 32 F9 | 	getword	_var07, _var06, #0
1b10c     08 0C 46 F0 | 	shr	_var07, #8
1b110     05 0B 32 F9 | 	getword	_var06, _var06, #0
1b114     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1b118     01 05 32 F9 | 	getword	_var03, _var02, #0
1b11c     04 0F 32 F9 | 	getword	_var08, _var05, #0
1b120     05 01 32 F9 | 	getword	_var01, _var06, #0
1b124     00 0F 02 F1 | 	add	_var08, _var01
1b128     07 05 52 F2 | 	cmps	_var03, _var08 wc
1b12c     02 06 06 F1 | 	add	_var04, #2
1b130     C4 00 90 3D |  if_ae	jmp	#LR__3041
1b134                 | ' 				switch (cmd) {
1b134     06 11 32 F9 | 	getword	_var09, _var07, #0
1b138     09 10 26 F3 | 	fle	_var09, #9
1b13c     30 10 62 FD | 	jmprel	_var09
1b140                 | LR__3031
1b140     24 00 90 FD | 	jmp	#LR__3032
1b144     3C 00 90 FD | 	jmp	#LR__3033
1b148     54 00 90 FD | 	jmp	#LR__3034
1b14c     5C 00 90 FD | 	jmp	#LR__3035
1b150     64 00 90 FD | 	jmp	#LR__3036
1b154     6C 00 90 FD | 	jmp	#LR__3037
1b158     74 00 90 FD | 	jmp	#LR__3038
1b15c     7C 00 90 FD | 	jmp	#LR__3039
1b160     84 00 90 FD | 	jmp	#LR__3040
1b164     A0 00 90 FD | 	jmp	#LR__3042
1b168                 | LR__3032
1b168     01 03 32 F9 | 	getword	_var02, _var02, #0
1b16c     04 09 32 F9 | 	getword	_var05, _var05, #0
1b170     04 03 82 F1 | 	sub	_var02, _var05
1b174     01 02 66 F0 | 	shl	_var02, #1
1b178     03 03 02 F1 | 	add	_var02, _var04
1b17c     01 03 E2 FA | 	rdword	_var02, _var02
1b180     84 00 90 FD | 	jmp	#LR__3042
1b184                 | LR__3033
1b184     01 05 32 F9 | 	getword	_var03, _var02, #0
1b188     01 03 32 F9 | 	getword	_var02, _var02, #0
1b18c     04 09 32 F9 | 	getword	_var05, _var05, #0
1b190     04 03 82 F1 | 	sub	_var02, _var05
1b194     01 02 06 F5 | 	and	_var02, #1
1b198     02 03 C2 F2 | 	subr	_var02, _var03
1b19c     68 00 90 FD | 	jmp	#LR__3042
1b1a0                 | LR__3034
1b1a0     01 03 32 F9 | 	getword	_var02, _var02, #0
1b1a4     10 02 86 F1 | 	sub	_var02, #16
1b1a8     5C 00 90 FD | 	jmp	#LR__3042
1b1ac                 | LR__3035
1b1ac     01 03 32 F9 | 	getword	_var02, _var02, #0
1b1b0     20 02 86 F1 | 	sub	_var02, #32
1b1b4     50 00 90 FD | 	jmp	#LR__3042
1b1b8                 | LR__3036
1b1b8     01 03 32 F9 | 	getword	_var02, _var02, #0
1b1bc     30 02 86 F1 | 	sub	_var02, #48
1b1c0     44 00 90 FD | 	jmp	#LR__3042
1b1c4                 | LR__3037
1b1c4     01 03 32 F9 | 	getword	_var02, _var02, #0
1b1c8     1A 02 86 F1 | 	sub	_var02, #26
1b1cc     38 00 90 FD | 	jmp	#LR__3042
1b1d0                 | LR__3038
1b1d0     01 03 32 F9 | 	getword	_var02, _var02, #0
1b1d4     08 02 06 F1 | 	add	_var02, #8
1b1d8     2C 00 90 FD | 	jmp	#LR__3042
1b1dc                 | LR__3039
1b1dc     01 03 32 F9 | 	getword	_var02, _var02, #0
1b1e0     50 02 86 F1 | 	sub	_var02, #80
1b1e4     20 00 90 FD | 	jmp	#LR__3042
1b1e8                 | LR__3040
1b1e8     01 03 32 F9 | 	getword	_var02, _var02, #0
1b1ec     0E 00 00 FF 
1b1f0     60 02 86 F1 | 	sub	_var02, ##7264
1b1f4                 | ' 				}
1b1f4                 | ' 				break;
1b1f4     10 00 90 FD | 	jmp	#LR__3042
1b1f8                 | LR__3041
1b1f8     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1b1fc     02 0A 06 AA |  if_e	mul	_var06, #2
1b200     05 07 02 A1 |  if_e	add	_var04, _var06
1b204     D8 FE 9F FD | 	jmp	#LR__3030
1b208                 | LR__3042
1b208     01 01 32 F9 | 	getword	_var01, _var02, #0
1b20c                 | LR__3043
1b20c                 | ' 		}
1b20c                 | ' 		uni = uc;
1b20c                 | ' 	}
1b20c                 | ' 
1b20c                 | ' 	return uni;
1b20c     00 FB 01 F6 | 	mov	result1, _var01
1b210                 | _fatfs_cc_ff_wtoupper_ret
1b210     2D 00 64 FD | 	ret
1b214                 | 
1b214                 | _fatfs_cc_strncpy
1b214     09 01 02 F6 | 	mov	_var01, arg01
1b218     97 12 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
1b21c                 | ' 
1b21c                 | ' 	dscan = dst;
1b21c                 | ' 	sscan = src;
1b21c                 | ' 	count = n;
1b21c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1b21c                 | LR__3050
1b21c     01 16 86 F1 | 	sub	arg03, #1
1b220     00 16 56 F2 | 	cmps	arg03, #0 wc
1b224     18 00 90 CD |  if_b	jmp	#LR__3052
1b228     0A FB C1 FA | 	rdbyte	result1, arg02
1b22c     00 FB 41 FC | 	wrbyte	result1, _var01
1b230     01 14 06 F1 | 	add	arg02, #1
1b234     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1b238                 | ' 		continue;
1b238     01 00 06 F1 | 	add	_var01, #1
1b23c     DC FF 9F 5D |  if_ne	jmp	#LR__3050
1b240                 | LR__3051
1b240                 | LR__3052
1b240     97 0C 48 FB | 	callpa	#(@LR__3054-@LR__3053)>>2,fcache_load_ptr_
1b244                 | ' 	while (--count >= 0)
1b244                 | LR__3053
1b244     01 16 86 F1 | 	sub	arg03, #1
1b248     00 16 56 F2 | 	cmps	arg03, #0 wc
1b24c     00 03 02 36 |  if_ae	mov	_var02, _var01
1b250     01 00 06 31 |  if_ae	add	_var01, #1
1b254     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1b258     E8 FF 9F 3D |  if_ae	jmp	#LR__3053
1b25c                 | LR__3054
1b25c                 | ' 		*dscan++ = '\0';
1b25c                 | ' 	return(dst);
1b25c     09 FB 01 F6 | 	mov	result1, arg01
1b260                 | _fatfs_cc_strncpy_ret
1b260     2D 00 64 FD | 	ret
1b264                 | 
1b264                 | _fatfs_cc_memcmp
1b264                 | ' 	for (n = size; n > 0; n--)
1b264     00 16 0E F2 | 	cmp	arg03, #0 wz
1b268     28 00 90 AD |  if_e	jmp	#LR__3061
1b26c                 | LR__3060
1b26c     09 01 C2 FA | 	rdbyte	_var01, arg01
1b270     0A 03 C2 FA | 	rdbyte	_var02, arg02
1b274     01 01 0A F2 | 	cmp	_var01, _var02 wz
1b278     01 12 06 A1 |  if_e	add	arg01, #1
1b27c     01 14 06 A1 |  if_e	add	arg02, #1
1b280                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1b280     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1b284     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1b288     01 FB 81 51 |  if_ne	sub	result1, _var02
1b28c     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1b290     F6 17 6E FB | 	djnz	arg03, #LR__3060
1b294                 | LR__3061
1b294                 | ' 
1b294                 | ' 	return(0);
1b294     00 FA 05 F6 | 	mov	result1, #0
1b298                 | _fatfs_cc_memcmp_ret
1b298     2D 00 64 FD | 	ret
1b29c                 | 
1b29c                 | _fatfs_cc_strncmp
1b29c     09 01 0A F6 | 	mov	_var01, arg01 wz
1b2a0     14 00 90 5D |  if_ne	jmp	#LR__3070
1b2a4                 | ' 		return scan2 ? -1 : 0;
1b2a4     00 14 0E F2 | 	cmp	arg02, #0 wz
1b2a8     01 02 66 56 |  if_ne	neg	_var02, #1
1b2ac     00 02 06 A6 |  if_e	mov	_var02, #0
1b2b0     01 FB 01 F6 | 	mov	result1, _var02
1b2b4     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1b2b8                 | LR__3070
1b2b8     00 14 0E F2 | 	cmp	arg02, #0 wz
1b2bc     01 FA 05 A6 |  if_e	mov	result1, #1
1b2c0     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b2c4     0B 05 02 F6 | 	mov	_var03, arg03
1b2c8     97 16 48 FB | 	callpa	#(@LR__3072-@LR__3071)>>2,fcache_load_ptr_
1b2cc                 | ' 	count = n;
1b2cc                 | ' 	do {
1b2cc                 | LR__3071
1b2cc     00 07 C2 FA | 	rdbyte	_var04, _var01
1b2d0     0A 09 02 F6 | 	mov	_var05, arg02
1b2d4     04 0B C2 FA | 	rdbyte	_var06, _var05
1b2d8     01 04 86 F1 | 	sub	_var03, #1
1b2dc     00 04 56 F2 | 	cmps	_var03, #0 wc
1b2e0     01 00 06 F1 | 	add	_var01, #1
1b2e4     01 14 06 F1 | 	add	arg02, #1
1b2e8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1b2ec     08 00 90 2D |  if_nc_and_z	jmp	#LR__3073
1b2f0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1b2f4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3071
1b2f8                 | LR__3072
1b2f8                 | LR__3073
1b2f8     00 04 56 F2 | 	cmps	_var03, #0 wc
1b2fc                 | ' 		return(0);
1b2fc     00 FA 05 C6 |  if_b	mov	result1, #0
1b300     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1b304     05 07 0A F2 | 	cmp	_var04, _var06 wz
1b308                 | ' 		return(0);
1b308     00 FA 05 A6 |  if_e	mov	result1, #0
1b30c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b310     00 06 0E F2 | 	cmp	_var04, #0 wz
1b314                 | ' 		return(-1);
1b314     01 FA 65 A6 |  if_e	neg	result1, #1
1b318     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1b31c     00 0A 0E F2 | 	cmp	_var06, #0 wz
1b320                 | ' 		return(1);
1b320     01 FA 05 A6 |  if_e	mov	result1, #1
1b324                 | ' 		return(c1 - c2);
1b324     03 FB 01 56 |  if_ne	mov	result1, _var04
1b328     05 FB 81 51 |  if_ne	sub	result1, _var06
1b32c                 | _fatfs_cc_strncmp_ret
1b32c     2D 00 64 FD | 	ret
1b330                 | 
1b330                 | _fatfs_cc_strchr
1b330                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/libc/string/strchr.c"
1b330                 | ' 	while ((c = *s++) != (char) charwanted)
1b330                 | LR__3080
1b330     09 01 02 F6 | 	mov	_var01, arg01
1b334     00 03 C2 FA | 	rdbyte	_var02, _var01
1b338     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1b33c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1b340     03 05 0A F2 | 	cmp	_var03, _var04 wz
1b344     01 12 06 F1 | 	add	arg01, #1
1b348     14 00 90 AD |  if_e	jmp	#LR__3081
1b34c     01 05 02 F6 | 	mov	_var03, _var02
1b350     07 04 4E F7 | 	zerox	_var03, #7 wz
1b354     00 FA 05 A6 |  if_e	mov	result1, #0
1b358     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1b35c     D0 FF 9F FD | 	jmp	#LR__3080
1b360                 | LR__3081
1b360                 | ' 	return((char *)--s);
1b360     01 12 86 F1 | 	sub	arg01, #1
1b364     09 FB 01 F6 | 	mov	result1, arg01
1b368                 | _fatfs_cc_strchr_ret
1b368     2D 00 64 FD | 	ret
1b36c                 | 
1b36c                 | _fatfs_cc_disk_initialize
1b36c     04 4A 05 F6 | 	mov	COUNT_, #4
1b370     A8 00 A0 FD | 	call	#pushregs_
1b374     40 F0 07 F1 | 	add	ptra, #64
1b378     04 4E 05 F1 | 	add	fp, #4
1b37c     A7 12 42 FC | 	wrbyte	arg01, fp
1b380     01 00 00 FF 
1b384     14 E4 05 F1 | 	add	objptr, ##532
1b388     F2 18 02 FB | 	rdlong	arg04, objptr
1b38c     2C 4E 05 F1 | 	add	fp, #44
1b390     A7 18 62 FC | 	wrlong	arg04, fp
1b394     04 E4 85 F1 | 	sub	objptr, #4
1b398     F2 18 02 FB | 	rdlong	arg04, objptr
1b39c     04 4E 05 F1 | 	add	fp, #4
1b3a0     A7 18 62 FC | 	wrlong	arg04, fp
1b3a4     08 E4 05 F1 | 	add	objptr, #8
1b3a8     F2 18 02 FB | 	rdlong	arg04, objptr
1b3ac     04 4E 05 F1 | 	add	fp, #4
1b3b0     A7 18 62 FC | 	wrlong	arg04, fp
1b3b4     04 E4 05 F1 | 	add	objptr, #4
1b3b8     F2 18 02 FB | 	rdlong	arg04, objptr
1b3bc     04 4E 05 F1 | 	add	fp, #4
1b3c0     A7 18 62 FC | 	wrlong	arg04, fp
1b3c4     04 E4 05 F1 | 	add	objptr, #4
1b3c8     F2 02 48 FC | 	wrbyte	#1, objptr
1b3cc     01 00 00 FF 
1b3d0     20 E4 85 F1 | 	sub	objptr, ##544
1b3d4     38 4E 85 F1 | 	sub	fp, #56
1b3d8     A7 18 CA FA | 	rdbyte	arg04, fp wz
1b3dc     04 4E 85 F1 | 	sub	fp, #4
1b3e0                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b3e0                 | '             return RES_NOTRDY;
1b3e0     03 FA 05 56 |  if_ne	mov	result1, #3
1b3e4     D8 05 90 5D |  if_ne	jmp	#LR__3108
1b3e8     13 00 00 FF 
1b3ec     10 13 06 F6 | 	mov	arg01, ##10000
1b3f0     80 9E BF FD | 	call	#__system___waitus
1b3f4     30 4E 05 F1 | 	add	fp, #48
1b3f8     A7 12 02 FB | 	rdlong	arg01, fp
1b3fc     09 01 08 FC | 	wrpin	#0, arg01
1b400     04 4E 05 F1 | 	add	fp, #4
1b404     A7 12 02 FB | 	rdlong	arg01, fp
1b408     09 01 08 FC | 	wrpin	#0, arg01
1b40c     04 4E 05 F1 | 	add	fp, #4
1b410     A7 12 02 FB | 	rdlong	arg01, fp
1b414     09 01 08 FC | 	wrpin	#0, arg01
1b418     04 4E 05 F1 | 	add	fp, #4
1b41c     A7 12 02 FB | 	rdlong	arg01, fp
1b420     09 00 80 FF 
1b424     09 01 08 FC | 	wrpin	##4608, arg01
1b428     0C 4E 85 F1 | 	sub	fp, #12
1b42c     A7 12 02 FB | 	rdlong	arg01, fp
1b430     59 12 62 FD | 	drvh	arg01
1b434     04 4E 05 F1 | 	add	fp, #4
1b438     A7 12 02 FB | 	rdlong	arg01, fp
1b43c     59 12 62 FD | 	drvh	arg01
1b440     04 4E 05 F1 | 	add	fp, #4
1b444     A7 12 02 FB | 	rdlong	arg01, fp
1b448     59 12 62 FD | 	drvh	arg01
1b44c     04 4E 05 F1 | 	add	fp, #4
1b450     A7 12 02 FB | 	rdlong	arg01, fp
1b454     59 12 62 FD | 	drvh	arg01
1b458     20 4E 85 F1 | 	sub	fp, #32
1b45c     00 04 80 FF 
1b460     A7 20 68 FC | 	wrlong	##524304, fp
1b464     04 4E 05 F1 | 	add	fp, #4
1b468     20 03 80 FF 
1b46c     A7 90 68 FC | 	wrlong	##409672, fp
1b470     14 4E 05 F1 | 	add	fp, #20
1b474     A7 1E 02 FB | 	rdlong	local01, fp
1b478     18 4E 85 F1 | 	sub	fp, #24
1b47c     A7 16 02 FB | 	rdlong	arg03, fp
1b480     40 1E 62 FD | 	dirl	local01
1b484     A0 03 80 FF 
1b488     0F 91 08 FC | 	wrpin	##475208, local01
1b48c     0F 17 12 FC | 	wxpin	arg03, local01
1b490     0F 01 28 FC | 	wypin	#0, local01
1b494     41 1E 62 FD | 	dirh	local01
1b498     1C 4E 05 F1 | 	add	fp, #28
1b49c     A7 20 02 FB | 	rdlong	local02, fp
1b4a0     10 1F 82 F1 | 	sub	local01, local02
1b4a4     07 1E 06 F5 | 	and	local01, #7
1b4a8     18 1E 66 F0 | 	shl	local01, #24
1b4ac     78 14 06 F6 | 	mov	arg02, #120
1b4b0     0F 15 42 F5 | 	or	arg02, local01
1b4b4     14 4E 85 F1 | 	sub	fp, #20
1b4b8     A7 14 62 FC | 	wrlong	arg02, fp
1b4bc     14 4E 05 F1 | 	add	fp, #20
1b4c0     A7 12 02 FB | 	rdlong	arg01, fp
1b4c4     10 14 26 F4 | 	bith	arg02, #16
1b4c8     40 12 62 FD | 	dirl	arg01
1b4cc     09 15 02 FC | 	wrpin	arg02, arg01
1b4d0     09 3F 18 FC | 	wxpin	#31, arg01
1b4d4     FF FF FF FF 
1b4d8     09 FF 2B FC | 	wypin	##-1, arg01
1b4dc     41 12 62 FD | 	dirh	arg01
1b4e0     04 4E 85 F1 | 	sub	fp, #4
1b4e4     A7 14 02 FB | 	rdlong	arg02, fp
1b4e8     08 4E 05 F1 | 	add	fp, #8
1b4ec     A7 22 02 FB | 	rdlong	local03, fp
1b4f0     11 15 82 F1 | 	sub	arg02, local03
1b4f4     07 14 06 F5 | 	and	arg02, #7
1b4f8     18 14 66 F0 | 	shl	arg02, #24
1b4fc     14 4E 85 F1 | 	sub	fp, #20
1b500     A7 14 62 FC | 	wrlong	arg02, fp
1b504     29 00 00 FF 
1b508     7A 14 46 F5 | 	or	arg02, ##21114
1b50c     A7 14 62 FC | 	wrlong	arg02, fp
1b510     14 4E 05 F1 | 	add	fp, #20
1b514     A7 12 02 FB | 	rdlong	arg01, fp
1b518     40 12 62 FD | 	dirl	arg01
1b51c     09 15 02 FC | 	wrpin	arg02, arg01
1b520     09 4F 18 FC | 	wxpin	#39, arg01
1b524     09 01 28 FC | 	wypin	#0, arg01
1b528     41 12 62 FD | 	dirh	arg01
1b52c     28 4E 85 F1 | 	sub	fp, #40
1b530     A7 12 02 F6 | 	mov	arg01, fp
1b534     14 4E 85 F1 | 	sub	fp, #20
1b538     0A 14 06 F6 | 	mov	arg02, #10
1b53c     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0925
1b540     00 12 06 F6 | 	mov	arg01, #0
1b544     00 14 06 F6 | 	mov	arg02, #0
1b548     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b54c     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0935
1b550     64 12 06 F6 | 	mov	arg01, #100
1b554     1C 9D BF FD | 	call	#__system___waitus
1b558     14 4E 05 F1 | 	add	fp, #20
1b55c     A7 12 02 F6 | 	mov	arg01, fp
1b560     14 4E 85 F1 | 	sub	fp, #20
1b564     0A 14 06 F6 | 	mov	arg02, #10
1b568     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0925
1b56c     0C 4E 05 F1 | 	add	fp, #12
1b570     A7 00 48 FC | 	wrbyte	#0, fp
1b574     0C 4E 85 F1 | 	sub	fp, #12
1b578     00 12 06 F6 | 	mov	arg01, #0
1b57c     00 14 06 F6 | 	mov	arg02, #0
1b580     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b584     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1b588     01 18 0E F2 | 	cmp	arg04, #1 wz
1b58c     B8 03 90 5D |  if_ne	jmp	#LR__3107
1b590     08 12 06 F6 | 	mov	arg01, #8
1b594     AA 15 06 F6 | 	mov	arg02, #426
1b598     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b59c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b5a0     01 FA 0D F2 | 	cmp	result1, #1 wz
1b5a4     98 01 90 5D |  if_ne	jmp	#LR__3093
1b5a8     14 4E 05 F1 | 	add	fp, #20
1b5ac     A7 12 02 F6 | 	mov	arg01, fp
1b5b0     14 4E 85 F1 | 	sub	fp, #20
1b5b4     04 14 06 F6 | 	mov	arg02, #4
1b5b8     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0925
1b5bc     16 4E 05 F1 | 	add	fp, #22
1b5c0     A7 24 C2 FA | 	rdbyte	local04, fp
1b5c4     16 4E 85 F1 | 	sub	fp, #22
1b5c8     01 24 0E F2 | 	cmp	local04, #1 wz
1b5cc     17 4E 05 A1 |  if_e	add	fp, #23
1b5d0     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1b5d4     17 4E 85 A1 |  if_e	sub	fp, #23
1b5d8     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1b5dc     68 03 90 5D |  if_ne	jmp	#LR__3106
1b5e0                 | ' 				for (tmr = 1000; tmr; tmr--) {
1b5e0     18 4E 05 F1 | 	add	fp, #24
1b5e4     01 00 80 FF 
1b5e8     A7 D0 6B FC | 	wrlong	##1000, fp
1b5ec     18 4E 85 F1 | 	sub	fp, #24
1b5f0                 | LR__3090
1b5f0     18 4E 05 F1 | 	add	fp, #24
1b5f4     A7 1E 0A FB | 	rdlong	local01, fp wz
1b5f8     18 4E 85 F1 | 	sub	fp, #24
1b5fc     3C 00 90 AD |  if_e	jmp	#LR__3091
1b600     A9 12 06 F6 | 	mov	arg01, #169
1b604     1E 14 C6 F9 | 	decod	arg02, #30
1b608     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b60c     FD 24 02 F6 | 	mov	local04, result1
1b610     07 24 4E F7 | 	zerox	local04, #7 wz
1b614     24 00 90 AD |  if_e	jmp	#LR__3091
1b618     01 00 00 FF 
1b61c     E8 13 06 F6 | 	mov	arg01, ##1000
1b620     50 9C BF FD | 	call	#__system___waitus
1b624     18 4E 05 F1 | 	add	fp, #24
1b628     A7 24 02 FB | 	rdlong	local04, fp
1b62c     01 24 86 F1 | 	sub	local04, #1
1b630     A7 24 62 FC | 	wrlong	local04, fp
1b634     18 4E 85 F1 | 	sub	fp, #24
1b638     B4 FF 9F FD | 	jmp	#LR__3090
1b63c                 | LR__3091
1b63c     18 4E 05 F1 | 	add	fp, #24
1b640     A7 24 0A FB | 	rdlong	local04, fp wz
1b644     18 4E 85 F1 | 	sub	fp, #24
1b648     4C 00 90 AD |  if_e	jmp	#LR__3092
1b64c     3A 12 06 F6 | 	mov	arg01, #58
1b650     00 14 06 F6 | 	mov	arg02, #0
1b654     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b658     FD 22 02 F6 | 	mov	local03, result1
1b65c     07 22 4E F7 | 	zerox	local03, #7 wz
1b660     34 00 90 5D |  if_ne	jmp	#LR__3092
1b664     14 4E 05 F1 | 	add	fp, #20
1b668     A7 12 02 F6 | 	mov	arg01, fp
1b66c     14 4E 85 F1 | 	sub	fp, #20
1b670     04 14 06 F6 | 	mov	arg02, #4
1b674     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0925
1b678     14 4E 05 F1 | 	add	fp, #20
1b67c     A7 1E C2 FA | 	rdbyte	local01, fp
1b680     40 1E CE F7 | 	test	local01, #64 wz
1b684     0C 24 06 56 |  if_ne	mov	local04, #12
1b688     04 24 06 A6 |  if_e	mov	local04, #4
1b68c     08 4E 85 F1 | 	sub	fp, #8
1b690     A7 24 42 FC | 	wrbyte	local04, fp
1b694     0C 4E 85 F1 | 	sub	fp, #12
1b698                 | LR__3092
1b698     14 24 06 FB | 	rdlong	local04, #20
1b69c     18 4E 05 F1 | 	add	fp, #24
1b6a0     A7 24 62 FC | 	wrlong	local04, fp
1b6a4     0C 4E 05 F1 | 	add	fp, #12
1b6a8     A7 24 02 FB | 	rdlong	local04, fp
1b6ac     1B 24 26 F4 | 	bith	local04, #27
1b6b0     A7 24 62 FC | 	wrlong	local04, fp
1b6b4     0C 4E 85 F1 | 	sub	fp, #12
1b6b8     A7 24 02 FB | 	rdlong	local04, fp
1b6bc     18 4E 85 F1 | 	sub	fp, #24
1b6c0     68 78 04 FF 
1b6c4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1b6c8     1C 4E 05 C1 |  if_b	add	fp, #28
1b6cc     00 01 80 CF 
1b6d0     A7 08 68 CC |  if_b	wrlong	##131076, fp
1b6d4     1C 4E 85 C1 |  if_b	sub	fp, #28
1b6d8     6C 02 90 CD |  if_b	jmp	#LR__3106
1b6dc     18 4E 05 F1 | 	add	fp, #24
1b6e0     A7 24 02 FB | 	rdlong	local04, fp
1b6e4     18 4E 85 F1 | 	sub	fp, #24
1b6e8     E1 F5 05 FF 
1b6ec     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1b6f0     1C 4E 05 C1 |  if_b	add	fp, #28
1b6f4     00 01 80 CF 
1b6f8     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1b6fc     1C 4E 85 C1 |  if_b	sub	fp, #28
1b700     44 02 90 CD |  if_b	jmp	#LR__3106
1b704     18 4E 05 F1 | 	add	fp, #24
1b708     A7 24 02 FB | 	rdlong	local04, fp
1b70c     18 4E 85 F1 | 	sub	fp, #24
1b710     3B 58 08 FF 
1b714     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1b718     1C 4E 05 C1 |  if_b	add	fp, #28
1b71c     00 01 80 CF 
1b720     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1b724     1C 4E 85 C1 |  if_b	sub	fp, #28
1b728     1C 02 90 CD |  if_b	jmp	#LR__3106
1b72c     1C 4E 05 F1 | 	add	fp, #28
1b730     80 01 80 FF 
1b734     A7 10 68 FC | 	wrlong	##196616, fp
1b738     1C 4E 85 F1 | 	sub	fp, #28
1b73c     08 02 90 FD | 	jmp	#LR__3106
1b740                 | LR__3093
1b740     A9 12 06 F6 | 	mov	arg01, #169
1b744     00 14 06 F6 | 	mov	arg02, #0
1b748     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b74c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b750     02 24 16 F2 | 	cmp	local04, #2 wc
1b754     18 00 90 3D |  if_ae	jmp	#LR__3094
1b758     0C 4E 05 F1 | 	add	fp, #12
1b75c     A7 04 48 FC | 	wrbyte	#2, fp
1b760     04 4E 05 F1 | 	add	fp, #4
1b764     A7 52 49 FC | 	wrbyte	#169, fp
1b768     10 4E 85 F1 | 	sub	fp, #16
1b76c     14 00 90 FD | 	jmp	#LR__3095
1b770                 | LR__3094
1b770     0C 4E 05 F1 | 	add	fp, #12
1b774     A7 02 48 FC | 	wrbyte	#1, fp
1b778     04 4E 05 F1 | 	add	fp, #4
1b77c     A7 02 48 FC | 	wrbyte	#1, fp
1b780     10 4E 85 F1 | 	sub	fp, #16
1b784                 | LR__3095
1b784                 | ' 				ty =  0x01 ; cmd =  (1) ;
1b784                 | ' 			}
1b784                 | ' 			for (tmr = 1000; tmr; tmr--) {
1b784     18 4E 05 F1 | 	add	fp, #24
1b788     01 00 80 FF 
1b78c     A7 D0 6B FC | 	wrlong	##1000, fp
1b790     18 4E 85 F1 | 	sub	fp, #24
1b794                 | LR__3096
1b794     18 4E 05 F1 | 	add	fp, #24
1b798     A7 22 0A FB | 	rdlong	local03, fp wz
1b79c     18 4E 85 F1 | 	sub	fp, #24
1b7a0     44 00 90 AD |  if_e	jmp	#LR__3097
1b7a4     10 4E 05 F1 | 	add	fp, #16
1b7a8     A7 12 C2 FA | 	rdbyte	arg01, fp
1b7ac     10 4E 85 F1 | 	sub	fp, #16
1b7b0     00 14 06 F6 | 	mov	arg02, #0
1b7b4     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b7b8     FD 24 02 F6 | 	mov	local04, result1
1b7bc     07 24 4E F7 | 	zerox	local04, #7 wz
1b7c0     24 00 90 AD |  if_e	jmp	#LR__3097
1b7c4     01 00 00 FF 
1b7c8     E8 13 06 F6 | 	mov	arg01, ##1000
1b7cc     A4 9A BF FD | 	call	#__system___waitus
1b7d0     18 4E 05 F1 | 	add	fp, #24
1b7d4     A7 24 02 FB | 	rdlong	local04, fp
1b7d8     01 24 86 F1 | 	sub	local04, #1
1b7dc     A7 24 62 FC | 	wrlong	local04, fp
1b7e0     18 4E 85 F1 | 	sub	fp, #24
1b7e4     AC FF 9F FD | 	jmp	#LR__3096
1b7e8                 | LR__3097
1b7e8     18 4E 05 F1 | 	add	fp, #24
1b7ec     A7 24 0A FB | 	rdlong	local04, fp wz
1b7f0     18 4E 85 F1 | 	sub	fp, #24
1b7f4     14 00 90 AD |  if_e	jmp	#LR__3098
1b7f8     10 12 06 F6 | 	mov	arg01, #16
1b7fc     09 14 C6 F9 | 	decod	arg02, #9
1b800     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1b804     07 FA 4D F7 | 	zerox	result1, #7 wz
1b808     0C 00 90 AD |  if_e	jmp	#LR__3099
1b80c                 | LR__3098
1b80c     0C 4E 05 F1 | 	add	fp, #12
1b810     A7 00 48 FC | 	wrbyte	#0, fp
1b814     0C 4E 85 F1 | 	sub	fp, #12
1b818                 | LR__3099
1b818     14 24 06 FB | 	rdlong	local04, #20
1b81c     18 4E 05 F1 | 	add	fp, #24
1b820     A7 24 62 FC | 	wrlong	local04, fp
1b824     18 4E 85 F1 | 	sub	fp, #24
1b828     F0 FA 02 FF 
1b82c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1b830     18 00 90 3D |  if_ae	jmp	#LR__3100
1b834     24 4E 05 F1 | 	add	fp, #36
1b838     A7 24 02 FB | 	rdlong	local04, fp
1b83c     1B 24 26 F4 | 	bith	local04, #27
1b840     A7 24 62 FC | 	wrlong	local04, fp
1b844     24 4E 85 F1 | 	sub	fp, #36
1b848     2C 00 90 FD | 	jmp	#LR__3101
1b84c                 | LR__3100
1b84c     18 4E 05 F1 | 	add	fp, #24
1b850     A7 24 02 FB | 	rdlong	local04, fp
1b854     18 4E 85 F1 | 	sub	fp, #24
1b858     E1 F5 05 FF 
1b85c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1b860     24 4E 05 C1 |  if_b	add	fp, #36
1b864     A7 24 02 CB |  if_b	rdlong	local04, fp
1b868     80 00 04 CF 
1b86c     00 24 46 C5 |  if_b	or	local04, ##134283264
1b870     A7 24 62 CC |  if_b	wrlong	local04, fp
1b874     24 4E 85 C1 |  if_b	sub	fp, #36
1b878                 | LR__3101
1b878     18 4E 05 F1 | 	add	fp, #24
1b87c     A7 24 02 FB | 	rdlong	local04, fp
1b880     18 4E 85 F1 | 	sub	fp, #24
1b884     F0 FA 02 FF 
1b888     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1b88c     1C 4E 05 C1 |  if_b	add	fp, #28
1b890     00 01 80 CF 
1b894     A7 08 68 CC |  if_b	wrlong	##131076, fp
1b898     1C 4E 85 C1 |  if_b	sub	fp, #28
1b89c     A8 00 90 CD |  if_b	jmp	#LR__3105
1b8a0     18 4E 05 F1 | 	add	fp, #24
1b8a4     A7 24 02 FB | 	rdlong	local04, fp
1b8a8     18 4E 85 F1 | 	sub	fp, #24
1b8ac     68 78 04 FF 
1b8b0     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1b8b4     1C 4E 05 C1 |  if_b	add	fp, #28
1b8b8     80 01 80 CF 
1b8bc     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1b8c0     1C 4E 85 C1 |  if_b	sub	fp, #28
1b8c4     80 00 90 CD |  if_b	jmp	#LR__3104
1b8c8     18 4E 05 F1 | 	add	fp, #24
1b8cc     A7 24 02 FB | 	rdlong	local04, fp
1b8d0     18 4E 85 F1 | 	sub	fp, #24
1b8d4     E1 F5 05 FF 
1b8d8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1b8dc     1C 4E 05 C1 |  if_b	add	fp, #28
1b8e0     00 02 80 CF 
1b8e4     A7 10 68 CC |  if_b	wrlong	##262152, fp
1b8e8     1C 4E 85 C1 |  if_b	sub	fp, #28
1b8ec     58 00 90 CD |  if_b	jmp	#LR__3103
1b8f0     18 4E 05 F1 | 	add	fp, #24
1b8f4     A7 24 02 FB | 	rdlong	local04, fp
1b8f8     18 4E 85 F1 | 	sub	fp, #24
1b8fc     59 73 07 FF 
1b900     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1b904     1C 4E 05 C1 |  if_b	add	fp, #28
1b908     80 02 80 CF 
1b90c     A7 14 68 CC |  if_b	wrlong	##327690, fp
1b910     1C 4E 85 C1 |  if_b	sub	fp, #28
1b914     30 00 90 CD |  if_b	jmp	#LR__3102
1b918     18 4E 05 F1 | 	add	fp, #24
1b91c     A7 24 02 FB | 	rdlong	local04, fp
1b920     18 4E 85 F1 | 	sub	fp, #24
1b924     D1 F0 08 FF 
1b928     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1b92c     1C 4E 05 C1 |  if_b	add	fp, #28
1b930     00 03 80 CF 
1b934     A7 18 68 CC |  if_b	wrlong	##393228, fp
1b938     1C 4E 85 F3 | 	sumc	fp, #28
1b93c     80 03 80 3F 
1b940     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1b944     1C 4E 85 31 |  if_ae	sub	fp, #28
1b948                 | LR__3102
1b948                 | LR__3103
1b948                 | LR__3104
1b948                 | LR__3105
1b948                 | LR__3106
1b948                 | LR__3107
1b948     0C 4E 05 F1 | 	add	fp, #12
1b94c     A7 24 C2 FA | 	rdbyte	local04, fp
1b950     01 00 00 FF 
1b954     21 E4 05 F1 | 	add	objptr, ##545
1b958     F2 24 42 FC | 	wrbyte	local04, objptr
1b95c     A7 1E CA FA | 	rdbyte	local01, fp wz
1b960     00 24 06 56 |  if_ne	mov	local04, #0
1b964     01 24 06 A6 |  if_e	mov	local04, #1
1b968     20 4E 05 F1 | 	add	fp, #32
1b96c     A7 24 42 FC | 	wrbyte	local04, fp
1b970     A7 24 C2 FA | 	rdbyte	local04, fp
1b974     2C 4E 85 F1 | 	sub	fp, #44
1b978     01 E4 85 F1 | 	sub	objptr, #1
1b97c     F2 24 42 FC | 	wrbyte	local04, objptr
1b980     01 00 00 FF 
1b984     20 E4 85 F1 | 	sub	objptr, ##544
1b988     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0935
1b98c     34 4E 05 F1 | 	add	fp, #52
1b990     A7 12 02 FB | 	rdlong	arg01, fp
1b994     18 4E 85 F1 | 	sub	fp, #24
1b998     A7 14 02 FB | 	rdlong	arg02, fp
1b99c     09 15 12 FC | 	wxpin	arg02, arg01
1b9a0     1C 4E 05 F1 | 	add	fp, #28
1b9a4     A7 12 02 FB | 	rdlong	arg01, fp
1b9a8     14 4E 85 F1 | 	sub	fp, #20
1b9ac     A7 14 02 FB | 	rdlong	arg02, fp
1b9b0     09 15 02 FC | 	wrpin	arg02, arg01
1b9b4                 | ' 
1b9b4                 | ' 		}
1b9b4                 | ' 	}
1b9b4                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b9b4                 | ' 	CardType = ty;
1b9b4                 | ' 	s = ty ? 0 :  0x01 ;
1b9b4                 | ' 	Stat = s;
1b9b4                 | ' 
1b9b4                 | ' 	deselect();
1b9b4                 | ' 
1b9b4                 | ' 
1b9b4                 | ' 	_wxpin( PIN_CLK, ck_div );
1b9b4                 | ' 	_wrpin( PIN_DI, spm_tx );
1b9b4                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
1b9b4                 | ' 	return s;
1b9b4     08 4E 05 F1 | 	add	fp, #8
1b9b8     A7 FA C1 FA | 	rdbyte	result1, fp
1b9bc     2C 4E 85 F1 | 	sub	fp, #44
1b9c0                 | LR__3108
1b9c0     A7 F0 03 F6 | 	mov	ptra, fp
1b9c4     B2 00 A0 FD | 	call	#popregs_
1b9c8                 | _fatfs_cc_disk_initialize_ret
1b9c8     2D 00 64 FD | 	ret
1b9cc                 | 
1b9cc                 | _fatfs_cc_disk_read
1b9cc     05 4A 05 F6 | 	mov	COUNT_, #5
1b9d0     A8 00 A0 FD | 	call	#pushregs_
1b9d4     0A 1F 02 F6 | 	mov	local01, arg02
1b9d8     0B 21 02 F6 | 	mov	local02, arg03
1b9dc     0C 23 02 F6 | 	mov	local03, arg04
1b9e0     00 12 0E F2 | 	cmp	arg01, #0 wz
1b9e4     01 FA 05 56 |  if_ne	mov	result1, #1
1b9e8                 | ' 
1b9e8                 | ' 	return Stat;
1b9e8     01 00 00 AF 
1b9ec     20 E4 05 A1 |  if_e	add	objptr, ##544
1b9f0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1b9f4     01 00 00 AF 
1b9f8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1b9fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ba00     01 FA CD F7 | 	test	result1, #1 wz
1ba04     03 FA 05 56 |  if_ne	mov	result1, #3
1ba08     84 00 90 5D |  if_ne	jmp	#LR__3112
1ba0c     01 00 00 FF 
1ba10     21 E4 05 F1 | 	add	objptr, ##545
1ba14     F2 24 C2 FA | 	rdbyte	local04, objptr
1ba18     01 00 00 FF 
1ba1c     21 E4 85 F1 | 	sub	objptr, ##545
1ba20     08 24 CE F7 | 	test	local04, #8 wz
1ba24     09 20 66 A0 |  if_e	shl	local02, #9
1ba28     02 22 16 F2 | 	cmp	local03, #2 wc
1ba2c     12 24 06 36 |  if_ae	mov	local04, #18
1ba30     11 24 06 C6 |  if_b	mov	local04, #17
1ba34     10 15 02 F6 | 	mov	arg02, local02
1ba38     12 13 02 F6 | 	mov	arg01, local04
1ba3c     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1ba40     FD 26 02 F6 | 	mov	local05, result1
1ba44     07 26 4E F7 | 	zerox	local05, #7 wz
1ba48     30 00 90 5D |  if_ne	jmp	#LR__3111
1ba4c                 | ' 		do {
1ba4c                 | LR__3110
1ba4c     0F 13 02 F6 | 	mov	arg01, local01
1ba50     09 14 C6 F9 | 	decod	arg02, #9
1ba54     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0943
1ba58     00 FA 0D F2 | 	cmp	result1, #0 wz
1ba5c     01 00 00 5F 
1ba60     00 1E 06 51 |  if_ne	add	local01, ##512
1ba64     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3110
1ba68     12 25 E2 F8 | 	getbyte	local04, local04, #0
1ba6c     12 24 0E F2 | 	cmp	local04, #18 wz
1ba70     0C 12 06 A6 |  if_e	mov	arg01, #12
1ba74     00 14 06 A6 |  if_e	mov	arg02, #0
1ba78     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0949
1ba7c                 | LR__3111
1ba7c     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0935
1ba80                 | ' 	}
1ba80                 | ' 	deselect();
1ba80                 | ' 
1ba80                 | ' 	return count ? RES_ERROR : RES_OK;
1ba80     00 22 0E F2 | 	cmp	local03, #0 wz
1ba84     01 26 06 56 |  if_ne	mov	local05, #1
1ba88     00 26 06 A6 |  if_e	mov	local05, #0
1ba8c     13 FB 01 F6 | 	mov	result1, local05
1ba90                 | LR__3112
1ba90     A7 F0 03 F6 | 	mov	ptra, fp
1ba94     B2 00 A0 FD | 	call	#popregs_
1ba98                 | _fatfs_cc_disk_read_ret
1ba98     2D 00 64 FD | 	ret
1ba9c                 | 
1ba9c                 | _fatfs_cc_disk_write
1ba9c     04 4A 05 F6 | 	mov	COUNT_, #4
1baa0     A8 00 A0 FD | 	call	#pushregs_
1baa4     0A 1F 02 F6 | 	mov	local01, arg02
1baa8     0C 21 02 F6 | 	mov	local02, arg04
1baac     0B 23 02 F6 | 	mov	local03, arg03
1bab0     00 12 0E F2 | 	cmp	arg01, #0 wz
1bab4     01 FA 05 56 |  if_ne	mov	result1, #1
1bab8                 | ' 
1bab8                 | ' 	return Stat;
1bab8     01 00 00 AF 
1babc     20 E4 05 A1 |  if_e	add	objptr, ##544
1bac0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1bac4     01 00 00 AF 
1bac8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1bacc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bad0     01 FA CD F7 | 	test	result1, #1 wz
1bad4     03 FA 05 56 |  if_ne	mov	result1, #3
1bad8     D4 00 90 5D |  if_ne	jmp	#LR__3124
1badc     01 00 00 FF 
1bae0     21 E4 05 F1 | 	add	objptr, ##545
1bae4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1bae8     01 00 00 FF 
1baec     21 E4 85 F1 | 	sub	objptr, ##545
1baf0     08 16 CE F7 | 	test	arg03, #8 wz
1baf4     09 22 66 A0 |  if_e	shl	local03, #9
1baf8     01 20 0E F2 | 	cmp	local02, #1 wz
1bafc     30 00 90 5D |  if_ne	jmp	#LR__3120
1bb00     18 12 06 F6 | 	mov	arg01, #24
1bb04     11 15 02 F6 | 	mov	arg02, local03
1bb08     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1bb0c     FD 24 02 F6 | 	mov	local04, result1
1bb10     07 24 4E F7 | 	zerox	local04, #7 wz
1bb14     84 00 90 5D |  if_ne	jmp	#LR__3123
1bb18     0F 13 02 F6 | 	mov	arg01, local01
1bb1c     FE 14 06 F6 | 	mov	arg02, #254
1bb20     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0945
1bb24     00 FA 0D F2 | 	cmp	result1, #0 wz
1bb28     00 20 06 56 |  if_ne	mov	local02, #0
1bb2c     6C 00 90 FD | 	jmp	#LR__3123
1bb30                 | LR__3120
1bb30     01 00 00 FF 
1bb34     21 E4 05 F1 | 	add	objptr, ##545
1bb38     F2 24 C2 FA | 	rdbyte	local04, objptr
1bb3c     01 00 00 FF 
1bb40     21 E4 85 F1 | 	sub	objptr, ##545
1bb44     06 24 CE F7 | 	test	local04, #6 wz
1bb48     97 12 06 56 |  if_ne	mov	arg01, #151
1bb4c     10 15 02 56 |  if_ne	mov	arg02, local02
1bb50     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0949
1bb54     11 15 02 F6 | 	mov	arg02, local03
1bb58     19 12 06 F6 | 	mov	arg01, #25
1bb5c     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1bb60     FD 24 02 F6 | 	mov	local04, result1
1bb64     07 24 4E F7 | 	zerox	local04, #7 wz
1bb68     30 00 90 5D |  if_ne	jmp	#LR__3122
1bb6c                 | ' 			do {
1bb6c                 | LR__3121
1bb6c     0F 13 02 F6 | 	mov	arg01, local01
1bb70     FC 14 06 F6 | 	mov	arg02, #252
1bb74     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0945
1bb78     00 FA 0D F2 | 	cmp	result1, #0 wz
1bb7c     01 00 00 5F 
1bb80     00 1E 06 51 |  if_ne	add	local01, ##512
1bb84     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3121
1bb88     00 12 06 F6 | 	mov	arg01, #0
1bb8c     FD 14 06 F6 | 	mov	arg02, #253
1bb90     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0945
1bb94     00 FA 0D F2 | 	cmp	result1, #0 wz
1bb98     01 20 06 A6 |  if_e	mov	local02, #1
1bb9c                 | LR__3122
1bb9c                 | LR__3123
1bb9c     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0935
1bba0                 | ' 				count = 1;
1bba0                 | ' 		}
1bba0                 | ' 	}
1bba0                 | ' 	deselect();
1bba0                 | ' 
1bba0                 | ' 	return count ? RES_ERROR : RES_OK;
1bba0     00 20 0E F2 | 	cmp	local02, #0 wz
1bba4     01 24 06 56 |  if_ne	mov	local04, #1
1bba8     00 24 06 A6 |  if_e	mov	local04, #0
1bbac     12 FB 01 F6 | 	mov	result1, local04
1bbb0                 | LR__3124
1bbb0     A7 F0 03 F6 | 	mov	ptra, fp
1bbb4     B2 00 A0 FD | 	call	#popregs_
1bbb8                 | _fatfs_cc_disk_write_ret
1bbb8     2D 00 64 FD | 	ret
1bbbc                 | 
1bbbc                 | _fatfs_cc_disk_ioctl
1bbbc     01 4A 05 F6 | 	mov	COUNT_, #1
1bbc0     A8 00 A0 FD | 	call	#pushregs_
1bbc4     30 F0 07 F1 | 	add	ptra, #48
1bbc8     04 4E 05 F1 | 	add	fp, #4
1bbcc     A7 12 42 FC | 	wrbyte	arg01, fp
1bbd0     04 4E 05 F1 | 	add	fp, #4
1bbd4     A7 14 42 FC | 	wrbyte	arg02, fp
1bbd8     04 4E 05 F1 | 	add	fp, #4
1bbdc     A7 16 62 FC | 	wrlong	arg03, fp
1bbe0     08 4E 85 F1 | 	sub	fp, #8
1bbe4     A7 12 CA FA | 	rdbyte	arg01, fp wz
1bbe8     04 4E 85 F1 | 	sub	fp, #4
1bbec     01 FA 05 56 |  if_ne	mov	result1, #1
1bbf0                 | ' 
1bbf0                 | ' 	return Stat;
1bbf0     01 00 00 AF 
1bbf4     20 E4 05 A1 |  if_e	add	objptr, ##544
1bbf8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1bbfc     01 00 00 AF 
1bc00     20 E4 85 A1 |  if_e	sub	objptr, ##544
1bc04     FD FA E1 F8 | 	getbyte	result1, result1, #0
1bc08     01 FA CD F7 | 	test	result1, #1 wz
1bc0c     03 FA 05 56 |  if_ne	mov	result1, #3
1bc10     E4 01 90 5D |  if_ne	jmp	#LR__3138
1bc14     10 4E 05 F1 | 	add	fp, #16
1bc18     A7 02 68 FC | 	wrlong	#1, fp
1bc1c                 | ' 
1bc1c                 | ' 	res = RES_ERROR;
1bc1c                 | ' 	switch (ctrl) {
1bc1c     08 4E 85 F1 | 	sub	fp, #8
1bc20     A7 1E C2 FA | 	rdbyte	local01, fp
1bc24     08 4E 85 F1 | 	sub	fp, #8
1bc28     04 1E 26 F3 | 	fle	local01, #4
1bc2c     30 1E 62 FD | 	jmprel	local01
1bc30                 | LR__3130
1bc30     10 00 90 FD | 	jmp	#LR__3131
1bc34     24 00 90 FD | 	jmp	#LR__3132
1bc38     A0 01 90 FD | 	jmp	#LR__3136
1bc3c     80 01 90 FD | 	jmp	#LR__3135
1bc40     98 01 90 FD | 	jmp	#LR__3136
1bc44                 | LR__3131
1bc44     B0 79 B0 FD | 	call	#_fatfs_cc_select_0939
1bc48     00 FA 0D F2 | 	cmp	result1, #0 wz
1bc4c     10 4E 05 51 |  if_ne	add	fp, #16
1bc50     A7 00 68 5C |  if_ne	wrlong	#0, fp
1bc54     10 4E 85 51 |  if_ne	sub	fp, #16
1bc58                 | ' 			break;
1bc58     8C 01 90 FD | 	jmp	#LR__3137
1bc5c                 | LR__3132
1bc5c     09 12 06 F6 | 	mov	arg01, #9
1bc60     00 14 06 F6 | 	mov	arg02, #0
1bc64     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0949
1bc68     FD 1E 02 F6 | 	mov	local01, result1
1bc6c     07 1E 4E F7 | 	zerox	local01, #7 wz
1bc70     74 01 90 5D |  if_ne	jmp	#LR__3137
1bc74     18 4E 05 F1 | 	add	fp, #24
1bc78     A7 12 02 F6 | 	mov	arg01, fp
1bc7c     18 4E 85 F1 | 	sub	fp, #24
1bc80     10 14 06 F6 | 	mov	arg02, #16
1bc84     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0943
1bc88     00 FA 0D F2 | 	cmp	result1, #0 wz
1bc8c     58 01 90 AD |  if_e	jmp	#LR__3137
1bc90     18 4E 05 F1 | 	add	fp, #24
1bc94     A7 1E C2 FA | 	rdbyte	local01, fp
1bc98     18 4E 85 F1 | 	sub	fp, #24
1bc9c     06 1E 46 F0 | 	shr	local01, #6
1bca0     01 1E 0E F2 | 	cmp	local01, #1 wz
1bca4     5C 00 90 5D |  if_ne	jmp	#LR__3133
1bca8     21 4E 05 F1 | 	add	fp, #33
1bcac     A7 1E C2 FA | 	rdbyte	local01, fp
1bcb0     01 4E 85 F1 | 	sub	fp, #1
1bcb4     A7 FA C1 FA | 	rdbyte	result1, fp
1bcb8     FD FA 31 F9 | 	getword	result1, result1, #0
1bcbc     08 FA 65 F0 | 	shl	result1, #8
1bcc0     FD 1E 02 F1 | 	add	local01, result1
1bcc4     01 4E 85 F1 | 	sub	fp, #1
1bcc8     A7 FA C1 FA | 	rdbyte	result1, fp
1bccc     3F FA 05 F5 | 	and	result1, #63
1bcd0     10 FA 65 F0 | 	shl	result1, #16
1bcd4     FD 1E 02 F1 | 	add	local01, result1
1bcd8     01 1E 06 F1 | 	add	local01, #1
1bcdc     09 4E 05 F1 | 	add	fp, #9
1bce0     A7 1E 62 FC | 	wrlong	local01, fp
1bce4     1C 4E 85 F1 | 	sub	fp, #28
1bce8     A7 1E 02 FB | 	rdlong	local01, fp
1bcec     1C 4E 05 F1 | 	add	fp, #28
1bcf0     A7 FA 01 FB | 	rdlong	result1, fp
1bcf4     28 4E 85 F1 | 	sub	fp, #40
1bcf8     0A FA 65 F0 | 	shl	result1, #10
1bcfc     0F FB 61 FC | 	wrlong	result1, local01
1bd00     AC 00 90 FD | 	jmp	#LR__3134
1bd04                 | LR__3133
1bd04     1D 4E 05 F1 | 	add	fp, #29
1bd08     A7 1E C2 FA | 	rdbyte	local01, fp
1bd0c     0F 1F 42 F8 | 	getnib	local01, local01, #0
1bd10     05 4E 05 F1 | 	add	fp, #5
1bd14     A7 FA C1 FA | 	rdbyte	result1, fp
1bd18     80 FA 05 F5 | 	and	result1, #128
1bd1c     07 FA C5 F0 | 	sar	result1, #7
1bd20     FD 1E 02 F1 | 	add	local01, result1
1bd24     01 4E 85 F1 | 	sub	fp, #1
1bd28     A7 FA C1 FA | 	rdbyte	result1, fp
1bd2c     03 FA 05 F5 | 	and	result1, #3
1bd30     01 FA 65 F0 | 	shl	result1, #1
1bd34     FD 1E 02 F1 | 	add	local01, result1
1bd38     02 1E 06 F1 | 	add	local01, #2
1bd3c     0D 4E 85 F1 | 	sub	fp, #13
1bd40     A7 1E 42 FC | 	wrbyte	local01, fp
1bd44     0C 4E 05 F1 | 	add	fp, #12
1bd48     A7 1E C2 FA | 	rdbyte	local01, fp
1bd4c     06 1E 46 F0 | 	shr	local01, #6
1bd50     01 4E 85 F1 | 	sub	fp, #1
1bd54     A7 FA C1 FA | 	rdbyte	result1, fp
1bd58     FD FA 31 F9 | 	getword	result1, result1, #0
1bd5c     02 FA 65 F0 | 	shl	result1, #2
1bd60     FD 1E 02 F1 | 	add	local01, result1
1bd64     01 4E 85 F1 | 	sub	fp, #1
1bd68     A7 FA C1 FA | 	rdbyte	result1, fp
1bd6c     03 FA 05 F5 | 	and	result1, #3
1bd70     FD FA 31 F9 | 	getword	result1, result1, #0
1bd74     0A FA 65 F0 | 	shl	result1, #10
1bd78     FD 1E 02 F1 | 	add	local01, result1
1bd7c     01 1E 06 F1 | 	add	local01, #1
1bd80     0A 4E 05 F1 | 	add	fp, #10
1bd84     A7 1E 62 FC | 	wrlong	local01, fp
1bd88     1C 4E 85 F1 | 	sub	fp, #28
1bd8c     A7 1E 02 FB | 	rdlong	local01, fp
1bd90     1C 4E 05 F1 | 	add	fp, #28
1bd94     A7 FA 01 FB | 	rdlong	result1, fp
1bd98     14 4E 85 F1 | 	sub	fp, #20
1bd9c     A7 16 C2 FA | 	rdbyte	arg03, fp
1bda0     14 4E 85 F1 | 	sub	fp, #20
1bda4     09 16 86 F1 | 	sub	arg03, #9
1bda8     0B FB 61 F0 | 	shl	result1, arg03
1bdac     0F FB 61 FC | 	wrlong	result1, local01
1bdb0                 | LR__3134
1bdb0     10 4E 05 F1 | 	add	fp, #16
1bdb4     A7 00 68 FC | 	wrlong	#0, fp
1bdb8     10 4E 85 F1 | 	sub	fp, #16
1bdbc                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1bdbc                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1bdbc                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1bdbc                 | ' 				}
1bdbc                 | ' 				res = RES_OK;
1bdbc                 | ' 			}
1bdbc                 | ' 			break;
1bdbc     28 00 90 FD | 	jmp	#LR__3137
1bdc0                 | LR__3135
1bdc0     0C 4E 05 F1 | 	add	fp, #12
1bdc4     A7 1E 02 FB | 	rdlong	local01, fp
1bdc8     0F 01 69 FC | 	wrlong	#128, local01
1bdcc     04 4E 05 F1 | 	add	fp, #4
1bdd0     A7 00 68 FC | 	wrlong	#0, fp
1bdd4     10 4E 85 F1 | 	sub	fp, #16
1bdd8                 | ' 			*(DWORD*)buff = 128;
1bdd8                 | ' 			res = RES_OK;
1bdd8                 | ' 			break;
1bdd8     0C 00 90 FD | 	jmp	#LR__3137
1bddc                 | LR__3136
1bddc     10 4E 05 F1 | 	add	fp, #16
1bde0     A7 08 68 FC | 	wrlong	#4, fp
1bde4     10 4E 85 F1 | 	sub	fp, #16
1bde8                 | LR__3137
1bde8     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0935
1bdec                 | ' 			res = RES_PARERR;
1bdec                 | ' 	}
1bdec                 | ' 
1bdec                 | ' 	deselect();
1bdec                 | ' 
1bdec                 | ' 	return res;
1bdec     10 4E 05 F1 | 	add	fp, #16
1bdf0     A7 FA 01 FB | 	rdlong	result1, fp
1bdf4     10 4E 85 F1 | 	sub	fp, #16
1bdf8                 | LR__3138
1bdf8     A7 F0 03 F6 | 	mov	ptra, fp
1bdfc     B2 00 A0 FD | 	call	#popregs_
1be00                 | _fatfs_cc_disk_ioctl_ret
1be00     2D 00 64 FD | 	ret
1be04                 | 
1be04                 | _fatfs_cc_disk_setpins
1be04     00 12 0E F2 | 	cmp	arg01, #0 wz
1be08     01 FA 65 56 |  if_ne	neg	result1, #1
1be0c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1be10     01 00 00 FF 
1be14     10 E4 05 F1 | 	add	objptr, ##528
1be18     F2 14 62 FC | 	wrlong	arg02, objptr
1be1c     04 E4 05 F1 | 	add	objptr, #4
1be20     F2 16 62 FC | 	wrlong	arg03, objptr
1be24     04 E4 05 F1 | 	add	objptr, #4
1be28     F2 18 62 FC | 	wrlong	arg04, objptr
1be2c     04 E4 05 F1 | 	add	objptr, #4
1be30     F2 1A 62 FC | 	wrlong	arg05, objptr
1be34     01 00 00 FF 
1be38     1C E4 85 F1 | 	sub	objptr, ##540
1be3c     00 FA 05 F6 | 	mov	result1, #0
1be40                 | _fatfs_cc_disk_setpins_ret
1be40     2D 00 64 FD | 	ret
1be44                 | 
1be44                 | _fatfs_cc_tchar2uni
1be44     09 01 02 FB | 	rdlong	_var01, arg01
1be48     00 03 02 F6 | 	mov	_var02, _var01
1be4c     01 00 06 F1 | 	add	_var01, #1
1be50     00 05 02 F6 | 	mov	_var03, _var01
1be54     01 07 C2 FA | 	rdbyte	_var04, _var02
1be58     80 06 CE F7 | 	test	_var04, #128 wz
1be5c     E8 00 90 AD |  if_e	jmp	#LR__3147
1be60     03 09 02 F6 | 	mov	_var05, _var04
1be64     E0 08 06 F5 | 	and	_var05, #224
1be68     C0 08 0E F2 | 	cmp	_var05, #192 wz
1be6c     1F 06 06 A5 |  if_e	and	_var04, #31
1be70     01 0A 06 A6 |  if_e	mov	_var06, #1
1be74     34 00 90 AD |  if_e	jmp	#LR__3141
1be78     03 09 02 F6 | 	mov	_var05, _var04
1be7c     F0 08 06 F5 | 	and	_var05, #240
1be80     E0 08 0E F2 | 	cmp	_var05, #224 wz
1be84     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1be88     02 0A 06 A6 |  if_e	mov	_var06, #2
1be8c     1C 00 90 AD |  if_e	jmp	#LR__3140
1be90     03 09 02 F6 | 	mov	_var05, _var04
1be94     F8 08 06 F5 | 	and	_var05, #248
1be98     F0 08 0E F2 | 	cmp	_var05, #240 wz
1be9c     07 06 06 A5 |  if_e	and	_var04, #7
1bea0     03 0A 06 A6 |  if_e	mov	_var06, #3
1bea4                 | ' 			return 0xFFFFFFFF;
1bea4     01 FA 65 56 |  if_ne	neg	result1, #1
1bea8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1beac                 | LR__3140
1beac                 | LR__3141
1beac                 | ' 		}
1beac                 | ' 		do {
1beac                 | LR__3142
1beac     02 0D C2 FA | 	rdbyte	_var07, _var03
1beb0     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1beb4     C0 08 06 F5 | 	and	_var05, #192
1beb8     80 08 0E F2 | 	cmp	_var05, #128 wz
1bebc     01 04 06 F1 | 	add	_var03, #1
1bec0     01 FA 65 56 |  if_ne	neg	result1, #1
1bec4     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1bec8     06 06 66 F0 | 	shl	_var04, #6
1becc     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1bed0     3F 02 06 F5 | 	and	_var02, #63
1bed4     01 07 42 F5 | 	or	_var04, _var02
1bed8     F4 0B 6E FB | 	djnz	_var06, #LR__3142
1bedc     80 06 16 F2 | 	cmp	_var04, #128 wc
1bee0     24 00 90 CD |  if_b	jmp	#LR__3144
1bee4     6C 00 00 FF 
1bee8     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1beec     0C 00 90 CD |  if_b	jmp	#LR__3143
1bef0     70 00 00 FF 
1bef4     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1bef8     0C 00 90 CD |  if_b	jmp	#LR__3144
1befc                 | LR__3143
1befc     80 08 00 FF 
1bf00     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1bf04     08 00 90 CD |  if_b	jmp	#LR__3145
1bf08                 | LR__3144
1bf08     01 FA 65 F6 | 	neg	result1, #1
1bf0c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1bf10                 | LR__3145
1bf10     80 00 00 FF 
1bf14     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1bf18     2C 00 90 CD |  if_b	jmp	#LR__3146
1bf1c     03 03 02 F6 | 	mov	_var02, _var04
1bf20     80 00 00 FF 
1bf24     00 02 86 F1 | 	sub	_var02, ##65536
1bf28     06 02 66 F0 | 	shl	_var02, #6
1bf2c     80 FF 01 FF 
1bf30     00 02 06 F5 | 	and	_var02, ##67043328
1bf34     6E 00 6C FF 
1bf38     00 08 06 F6 | 	mov	_var05, ##-671032320
1bf3c     01 09 42 F5 | 	or	_var05, _var02
1bf40     09 06 46 F7 | 	zerox	_var04, #9
1bf44     04 07 42 F5 | 	or	_var04, _var05
1bf48                 | LR__3146
1bf48                 | LR__3147
1bf48     09 05 62 FC | 	wrlong	_var03, arg01
1bf4c                 | ' 	}
1bf4c                 | ' #line 811 "ff.c"
1bf4c                 | ' 	*str = p;
1bf4c                 | ' 	return uc;
1bf4c     03 FB 01 F6 | 	mov	result1, _var04
1bf50                 | _fatfs_cc_tchar2uni_ret
1bf50     2D 00 64 FD | 	ret
1bf54                 | 
1bf54                 | _fatfs_cc_put_utf
1bf54     80 12 16 F2 | 	cmp	arg01, #128 wc
1bf58     18 00 90 3D |  if_ae	jmp	#LR__3150
1bf5c     01 16 16 F2 | 	cmp	arg03, #1 wc
1bf60     00 FA 05 C6 |  if_b	mov	result1, #0
1bf64     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1bf68     0A 13 42 FC | 	wrbyte	arg01, arg02
1bf6c                 | ' 		*buf = (TCHAR)chr;
1bf6c                 | ' 		return 1;
1bf6c     01 FA 05 F6 | 	mov	result1, #1
1bf70     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1bf74                 | LR__3150
1bf74     04 00 00 FF 
1bf78     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1bf7c     40 00 90 3D |  if_ae	jmp	#LR__3151
1bf80     02 16 16 F2 | 	cmp	arg03, #2 wc
1bf84     00 FA 05 C6 |  if_b	mov	result1, #0
1bf88     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1bf8c     09 FB 01 F6 | 	mov	result1, arg01
1bf90     06 FA 45 F0 | 	shr	result1, #6
1bf94     1F FA 05 F5 | 	and	result1, #31
1bf98     C0 16 06 F6 | 	mov	arg03, #192
1bf9c     FD 16 42 F5 | 	or	arg03, result1
1bfa0     0A 17 42 FC | 	wrbyte	arg03, arg02
1bfa4     01 14 06 F1 | 	add	arg02, #1
1bfa8     3F 12 06 F5 | 	and	arg01, #63
1bfac     80 FA 05 F6 | 	mov	result1, #128
1bfb0     09 FB 41 F5 | 	or	result1, arg01
1bfb4     0A FB 41 FC | 	wrbyte	result1, arg02
1bfb8                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1bfb8                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1bfb8                 | ' 		return 2;
1bfb8     02 FA 05 F6 | 	mov	result1, #2
1bfbc     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1bfc0                 | LR__3151
1bfc0     80 00 00 FF 
1bfc4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1bfc8     70 00 90 3D |  if_ae	jmp	#LR__3154
1bfcc     03 16 16 F2 | 	cmp	arg03, #3 wc
1bfd0     18 00 90 CD |  if_b	jmp	#LR__3152
1bfd4     6C 00 00 FF 
1bfd8     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1bfdc     14 00 90 CD |  if_b	jmp	#LR__3153
1bfe0     70 00 00 FF 
1bfe4     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1bfe8     08 00 90 3D |  if_ae	jmp	#LR__3153
1bfec                 | LR__3152
1bfec     00 FA 05 F6 | 	mov	result1, #0
1bff0     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1bff4                 | LR__3153
1bff4     09 FB 59 F8 | 	getnib	result1, arg01, #3
1bff8     E0 16 06 F6 | 	mov	arg03, #224
1bffc     FD 16 42 F5 | 	or	arg03, result1
1c000     0A 17 42 FC | 	wrbyte	arg03, arg02
1c004     01 14 06 F1 | 	add	arg02, #1
1c008     09 FB 01 F6 | 	mov	result1, arg01
1c00c     06 FA 45 F0 | 	shr	result1, #6
1c010     3F FA 05 F5 | 	and	result1, #63
1c014     80 16 06 F6 | 	mov	arg03, #128
1c018     FD 16 42 F5 | 	or	arg03, result1
1c01c     0A 17 42 FC | 	wrbyte	arg03, arg02
1c020     01 14 06 F1 | 	add	arg02, #1
1c024     3F 12 06 F5 | 	and	arg01, #63
1c028     80 FA 05 F6 | 	mov	result1, #128
1c02c     09 FB 41 F5 | 	or	result1, arg01
1c030     0A FB 41 FC | 	wrbyte	result1, arg02
1c034                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1c034                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c034                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c034                 | ' 		return 3;
1c034     03 FA 05 F6 | 	mov	result1, #3
1c038     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1c03c                 | LR__3154
1c03c     04 16 16 F2 | 	cmp	arg03, #4 wc
1c040     00 FA 05 C6 |  if_b	mov	result1, #0
1c044     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1c048     09 01 02 F6 | 	mov	_var01, arg01
1c04c     E0 01 06 F4 | 	bitl	_var01, #480
1c050     00 00 6C FF 
1c054     00 00 86 F1 | 	sub	_var01, ##-671088640
1c058     06 00 46 F0 | 	shr	_var01, #6
1c05c     09 13 32 F9 | 	getword	arg01, arg01, #0
1c060     6E 00 00 FF 
1c064     00 12 86 F1 | 	sub	arg01, ##56320
1c068     00 08 00 FF 
1c06c     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1c070     02 00 00 CF 
1c074     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1c078     00 FA 05 36 |  if_ae	mov	result1, #0
1c07c     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1c080     09 01 42 F5 | 	or	_var01, arg01
1c084     80 00 00 FF 
1c088     00 00 06 F1 | 	add	_var01, ##65536
1c08c     00 FB 01 F6 | 	mov	result1, _var01
1c090     12 FA 45 F0 | 	shr	result1, #18
1c094     07 FA 05 F5 | 	and	result1, #7
1c098     F0 16 06 F6 | 	mov	arg03, #240
1c09c     FD 16 42 F5 | 	or	arg03, result1
1c0a0     0A 17 42 FC | 	wrbyte	arg03, arg02
1c0a4     01 14 06 F1 | 	add	arg02, #1
1c0a8     00 FB 01 F6 | 	mov	result1, _var01
1c0ac     0C FA 45 F0 | 	shr	result1, #12
1c0b0     3F FA 05 F5 | 	and	result1, #63
1c0b4     80 16 06 F6 | 	mov	arg03, #128
1c0b8     FD 16 42 F5 | 	or	arg03, result1
1c0bc     0A 17 42 FC | 	wrbyte	arg03, arg02
1c0c0     01 14 06 F1 | 	add	arg02, #1
1c0c4     00 FB 01 F6 | 	mov	result1, _var01
1c0c8     06 FA 45 F0 | 	shr	result1, #6
1c0cc     3F FA 05 F5 | 	and	result1, #63
1c0d0     80 16 06 F6 | 	mov	arg03, #128
1c0d4     FD 16 42 F5 | 	or	arg03, result1
1c0d8     0A 17 42 FC | 	wrbyte	arg03, arg02
1c0dc     01 14 06 F1 | 	add	arg02, #1
1c0e0     3F 00 06 F5 | 	and	_var01, #63
1c0e4     80 FA 05 F6 | 	mov	result1, #128
1c0e8     00 FB 41 F5 | 	or	result1, _var01
1c0ec     0A FB 41 FC | 	wrbyte	result1, arg02
1c0f0                 | ' 	chr = (hc | chr) + 0x10000;
1c0f0                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1c0f0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1c0f0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1c0f0                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1c0f0                 | ' 	return 4;
1c0f0     04 FA 05 F6 | 	mov	result1, #4
1c0f4                 | _fatfs_cc_put_utf_ret
1c0f4     2D 00 64 FD | 	ret
1c0f8                 | 
1c0f8                 | _fatfs_cc_sync_window
1c0f8     02 4A 05 F6 | 	mov	COUNT_, #2
1c0fc     A8 00 A0 FD | 	call	#pushregs_
1c100     09 1F 02 F6 | 	mov	local01, arg01
1c104     00 20 06 F6 | 	mov	local02, #0
1c108     03 1E 06 F1 | 	add	local01, #3
1c10c     0F FB C9 FA | 	rdbyte	result1, local01 wz
1c110     03 1E 86 F1 | 	sub	local01, #3
1c114     A4 00 90 AD |  if_e	jmp	#LR__3162
1c118     01 1E 06 F1 | 	add	local01, #1
1c11c     0F 13 C2 FA | 	rdbyte	arg01, local01
1c120     33 1E 06 F1 | 	add	local01, #51
1c124     0F 15 02 F6 | 	mov	arg02, local01
1c128     04 1E 86 F1 | 	sub	local01, #4
1c12c     0F 17 02 FB | 	rdlong	arg03, local01
1c130     30 1E 86 F1 | 	sub	local01, #48
1c134     01 18 06 F6 | 	mov	arg04, #1
1c138     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1c13c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c140     74 00 90 5D |  if_ne	jmp	#LR__3160
1c144     03 1E 06 F1 | 	add	local01, #3
1c148     0F 01 48 FC | 	wrbyte	#0, local01
1c14c     2D 1E 06 F1 | 	add	local01, #45
1c150     0F FB 01 FB | 	rdlong	result1, local01
1c154     0C 1E 86 F1 | 	sub	local01, #12
1c158     0F 19 02 FB | 	rdlong	arg04, local01
1c15c     0C FB 81 F1 | 	sub	result1, arg04
1c160     08 1E 86 F1 | 	sub	local01, #8
1c164     0F 19 02 FB | 	rdlong	arg04, local01
1c168     1C 1E 86 F1 | 	sub	local01, #28
1c16c     0C FB 11 F2 | 	cmp	result1, arg04 wc
1c170     48 00 90 3D |  if_ae	jmp	#LR__3161
1c174     02 1E 06 F1 | 	add	local01, #2
1c178     0F 19 C2 FA | 	rdbyte	arg04, local01
1c17c     02 1E 86 F1 | 	sub	local01, #2
1c180     02 18 0E F2 | 	cmp	arg04, #2 wz
1c184     34 00 90 5D |  if_ne	jmp	#LR__3161
1c188     01 1E 06 F1 | 	add	local01, #1
1c18c     0F 13 C2 FA | 	rdbyte	arg01, local01
1c190     33 1E 06 F1 | 	add	local01, #51
1c194     0F 15 02 F6 | 	mov	arg02, local01
1c198     04 1E 86 F1 | 	sub	local01, #4
1c19c     0F 17 02 FB | 	rdlong	arg03, local01
1c1a0     14 1E 86 F1 | 	sub	local01, #20
1c1a4     0F 1F 02 FB | 	rdlong	local01, local01
1c1a8     0F 17 02 F1 | 	add	arg03, local01
1c1ac     01 18 06 F6 | 	mov	arg04, #1
1c1b0     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1c1b4     04 00 90 FD | 	jmp	#LR__3161
1c1b8                 | LR__3160
1c1b8     01 20 06 F6 | 	mov	local02, #1
1c1bc                 | LR__3161
1c1bc                 | LR__3162
1c1bc                 | ' 			res = FR_DISK_ERR;
1c1bc                 | ' 		}
1c1bc                 | ' 	}
1c1bc                 | ' 	return res;
1c1bc     10 FB 01 F6 | 	mov	result1, local02
1c1c0     A7 F0 03 F6 | 	mov	ptra, fp
1c1c4     B2 00 A0 FD | 	call	#popregs_
1c1c8                 | _fatfs_cc_sync_window_ret
1c1c8     2D 00 64 FD | 	ret
1c1cc                 | 
1c1cc                 | _fatfs_cc_move_window
1c1cc     03 4A 05 F6 | 	mov	COUNT_, #3
1c1d0     A8 00 A0 FD | 	call	#pushregs_
1c1d4     09 1F 02 F6 | 	mov	local01, arg01
1c1d8     0A 21 02 F6 | 	mov	local02, arg02
1c1dc     00 22 06 F6 | 	mov	local03, #0
1c1e0     30 1E 06 F1 | 	add	local01, #48
1c1e4     0F 19 02 FB | 	rdlong	arg04, local01
1c1e8     30 1E 86 F1 | 	sub	local01, #48
1c1ec     0C 21 0A F2 | 	cmp	local02, arg04 wz
1c1f0     40 00 90 AD |  if_e	jmp	#LR__3171
1c1f4     0F 13 02 F6 | 	mov	arg01, local01
1c1f8     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1c1fc     FD 22 0A F6 | 	mov	local03, result1 wz
1c200     30 00 90 5D |  if_ne	jmp	#LR__3170
1c204     01 1E 06 F1 | 	add	local01, #1
1c208     0F 13 C2 FA | 	rdbyte	arg01, local01
1c20c     33 1E 06 F1 | 	add	local01, #51
1c210     0F 15 02 F6 | 	mov	arg02, local01
1c214     10 17 02 F6 | 	mov	arg03, local02
1c218     01 18 06 F6 | 	mov	arg04, #1
1c21c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1c220     00 FA 0D F2 | 	cmp	result1, #0 wz
1c224     01 20 66 56 |  if_ne	neg	local02, #1
1c228     01 22 06 56 |  if_ne	mov	local03, #1
1c22c     04 1E 86 F1 | 	sub	local01, #4
1c230     0F 21 62 FC | 	wrlong	local02, local01
1c234                 | LR__3170
1c234                 | LR__3171
1c234                 | ' 				sect = (LBA_t)0 - 1;
1c234                 | ' 				res = FR_DISK_ERR;
1c234                 | ' 			}
1c234                 | ' 			fs->winsect = sect;
1c234                 | ' 		}
1c234                 | ' 	}
1c234                 | ' 	return res;
1c234     11 FB 01 F6 | 	mov	result1, local03
1c238     A7 F0 03 F6 | 	mov	ptra, fp
1c23c     B2 00 A0 FD | 	call	#popregs_
1c240                 | _fatfs_cc_move_window_ret
1c240     2D 00 64 FD | 	ret
1c244                 | 
1c244                 | _fatfs_cc_sync_fs
1c244     02 4A 05 F6 | 	mov	COUNT_, #2
1c248     A8 00 A0 FD | 	call	#pushregs_
1c24c     09 1F 02 F6 | 	mov	local01, arg01
1c250     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1c254     FD 20 0A F6 | 	mov	local02, result1 wz
1c258     D8 00 90 5D |  if_ne	jmp	#LR__3181
1c25c     0F 19 C2 FA | 	rdbyte	arg04, local01
1c260     03 18 0E F2 | 	cmp	arg04, #3 wz
1c264     04 1E 06 A1 |  if_e	add	local01, #4
1c268     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1c26c     04 1E 86 A1 |  if_e	sub	local01, #4
1c270     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1c274     A0 00 90 5D |  if_ne	jmp	#LR__3180
1c278     34 1E 06 F1 | 	add	local01, #52
1c27c     0F 13 02 F6 | 	mov	arg01, local01
1c280     00 14 06 F6 | 	mov	arg02, #0
1c284     09 16 C6 F9 | 	decod	arg03, #9
1c288     98 00 A0 FD | 	call	#\builtin_bytefill_
1c28c     0F 13 02 F6 | 	mov	arg01, local01
1c290     FE 13 06 F1 | 	add	arg01, #510
1c294     55 00 80 FF 
1c298     09 AB 58 FC | 	wrword	##43605, arg01
1c29c     A9 B0 A0 FF 
1c2a0     0F A5 68 FC | 	wrlong	##1096897106, local01
1c2a4     0F 13 02 F6 | 	mov	arg01, local01
1c2a8     E4 13 06 F1 | 	add	arg01, #484
1c2ac     B9 A0 B0 FF 
1c2b0     09 E5 68 FC | 	wrlong	##1631679090, arg01
1c2b4     0F 13 02 F6 | 	mov	arg01, local01
1c2b8     E8 13 06 F1 | 	add	arg01, #488
1c2bc     20 1E 86 F1 | 	sub	local01, #32
1c2c0     0F 15 02 FB | 	rdlong	arg02, local01
1c2c4     09 15 62 FC | 	wrlong	arg02, arg01
1c2c8     20 1E 06 F1 | 	add	local01, #32
1c2cc     0F 13 02 F6 | 	mov	arg01, local01
1c2d0     EC 13 06 F1 | 	add	arg01, #492
1c2d4     24 1E 86 F1 | 	sub	local01, #36
1c2d8     0F 15 02 FB | 	rdlong	arg02, local01
1c2dc     09 15 62 FC | 	wrlong	arg02, arg01
1c2e0     10 1E 06 F1 | 	add	local01, #16
1c2e4     0F 17 02 FB | 	rdlong	arg03, local01
1c2e8     01 16 06 F1 | 	add	arg03, #1
1c2ec     10 1E 06 F1 | 	add	local01, #16
1c2f0     0F 17 62 FC | 	wrlong	arg03, local01
1c2f4     2F 1E 86 F1 | 	sub	local01, #47
1c2f8     0F 13 C2 FA | 	rdbyte	arg01, local01
1c2fc     33 1E 06 F1 | 	add	local01, #51
1c300     0F 15 02 F6 | 	mov	arg02, local01
1c304     01 18 06 F6 | 	mov	arg04, #1
1c308     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1c30c     30 1E 86 F1 | 	sub	local01, #48
1c310     0F 01 48 FC | 	wrbyte	#0, local01
1c314     04 1E 86 F1 | 	sub	local01, #4
1c318                 | LR__3180
1c318     01 1E 06 F1 | 	add	local01, #1
1c31c     0F 13 C2 FA | 	rdbyte	arg01, local01
1c320     00 14 06 F6 | 	mov	arg02, #0
1c324     00 16 06 F6 | 	mov	arg03, #0
1c328     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1c32c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c330     01 20 06 56 |  if_ne	mov	local02, #1
1c334                 | LR__3181
1c334                 | ' 	}
1c334                 | ' 
1c334                 | ' 	return res;
1c334     10 FB 01 F6 | 	mov	result1, local02
1c338     A7 F0 03 F6 | 	mov	ptra, fp
1c33c     B2 00 A0 FD | 	call	#popregs_
1c340                 | _fatfs_cc_sync_fs_ret
1c340     2D 00 64 FD | 	ret
1c344                 | 
1c344                 | _fatfs_cc_clst2sect
1c344     02 14 86 F1 | 	sub	arg02, #2
1c348     18 12 06 F1 | 	add	arg01, #24
1c34c     09 01 02 FB | 	rdlong	_var01, arg01
1c350     18 12 86 F1 | 	sub	arg01, #24
1c354     02 00 86 F1 | 	sub	_var01, #2
1c358     00 15 12 F2 | 	cmp	arg02, _var01 wc
1c35c     00 FA 05 36 |  if_ae	mov	result1, #0
1c360     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1c364     0A 12 06 F1 | 	add	arg01, #10
1c368     09 01 E2 FA | 	rdword	_var01, arg01
1c36c     0A 01 02 FD | 	qmul	_var01, arg02
1c370                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1c370     22 12 06 F1 | 	add	arg01, #34
1c374     09 FB 01 FB | 	rdlong	result1, arg01
1c378     18 00 62 FD | 	getqx	_var01
1c37c     00 FB 01 F1 | 	add	result1, _var01
1c380                 | _fatfs_cc_clst2sect_ret
1c380     2D 00 64 FD | 	ret
1c384                 | 
1c384                 | _fatfs_cc_get_fat
1c384     07 4A 05 F6 | 	mov	COUNT_, #7
1c388     A8 00 A0 FD | 	call	#pushregs_
1c38c     0A 1F 02 F6 | 	mov	local01, arg02
1c390     09 21 02 FB | 	rdlong	local02, arg01
1c394     02 1E 16 F2 | 	cmp	local01, #2 wc
1c398     14 00 90 CD |  if_b	jmp	#LR__3190
1c39c     18 20 06 F1 | 	add	local02, #24
1c3a0     10 23 02 FB | 	rdlong	local03, local02
1c3a4     18 20 86 F1 | 	sub	local02, #24
1c3a8     11 1F 12 F2 | 	cmp	local01, local03 wc
1c3ac     08 00 90 CD |  if_b	jmp	#LR__3191
1c3b0                 | LR__3190
1c3b0     01 24 06 F6 | 	mov	local04, #1
1c3b4     60 01 90 FD | 	jmp	#LR__3198
1c3b8                 | LR__3191
1c3b8     01 24 66 F6 | 	neg	local04, #1
1c3bc                 | ' 		val = 0xFFFFFFFF;
1c3bc                 | ' 
1c3bc                 | ' 		switch (fs->fs_type) {
1c3bc     10 27 C2 FA | 	rdbyte	local05, local02
1c3c0     01 26 86 F1 | 	sub	local05, #1
1c3c4     03 26 26 F3 | 	fle	local05, #3
1c3c8     30 26 62 FD | 	jmprel	local05
1c3cc                 | LR__3192
1c3cc     0C 00 90 FD | 	jmp	#LR__3193
1c3d0     B8 00 90 FD | 	jmp	#LR__3194
1c3d4     F8 00 90 FD | 	jmp	#LR__3195
1c3d8     38 01 90 FD | 	jmp	#LR__3196
1c3dc                 | LR__3193
1c3dc     0F 27 02 F6 | 	mov	local05, local01
1c3e0     0F 13 02 F6 | 	mov	arg01, local01
1c3e4     01 12 46 F0 | 	shr	arg01, #1
1c3e8     09 27 02 F1 | 	add	local05, arg01
1c3ec     10 13 02 F6 | 	mov	arg01, local02
1c3f0     13 29 02 F6 | 	mov	local06, local05
1c3f4     09 28 46 F0 | 	shr	local06, #9
1c3f8     24 20 06 F1 | 	add	local02, #36
1c3fc     10 15 02 FB | 	rdlong	arg02, local02
1c400     24 20 86 F1 | 	sub	local02, #36
1c404     14 15 02 F1 | 	add	arg02, local06
1c408     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1c40c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c410     04 01 90 5D |  if_ne	jmp	#LR__3197
1c414     13 29 02 F6 | 	mov	local06, local05
1c418     FF 29 06 F5 | 	and	local06, #511
1c41c     34 20 06 F1 | 	add	local02, #52
1c420     10 29 02 F1 | 	add	local06, local02
1c424     14 2B C2 FA | 	rdbyte	local07, local06
1c428     34 20 86 F1 | 	sub	local02, #52
1c42c     10 13 02 F6 | 	mov	arg01, local02
1c430     01 26 06 F1 | 	add	local05, #1
1c434     13 29 02 F6 | 	mov	local06, local05
1c438     09 28 46 F0 | 	shr	local06, #9
1c43c     24 20 06 F1 | 	add	local02, #36
1c440     10 15 02 FB | 	rdlong	arg02, local02
1c444     24 20 86 F1 | 	sub	local02, #36
1c448     14 15 02 F1 | 	add	arg02, local06
1c44c     7C FD BF FD | 	call	#_fatfs_cc_move_window
1c450     00 FA 0D F2 | 	cmp	result1, #0 wz
1c454     C0 00 90 5D |  if_ne	jmp	#LR__3197
1c458     FF 27 06 F5 | 	and	local05, #511
1c45c     34 20 06 F1 | 	add	local02, #52
1c460     10 27 02 F1 | 	add	local05, local02
1c464     13 29 C2 FA | 	rdbyte	local06, local05
1c468     08 28 66 F0 | 	shl	local06, #8
1c46c     14 2B 42 F5 | 	or	local07, local06
1c470     01 1E CE F7 | 	test	local01, #1 wz
1c474     04 2A 46 50 |  if_ne	shr	local07, #4
1c478     15 23 02 56 |  if_ne	mov	local03, local07
1c47c     0B 2A 46 A7 |  if_e	zerox	local07, #11
1c480     15 23 02 A6 |  if_e	mov	local03, local07
1c484     11 25 02 F6 | 	mov	local04, local03
1c488                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1c488                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1c488                 | ' 			break;
1c488     8C 00 90 FD | 	jmp	#LR__3197
1c48c                 | LR__3194
1c48c     10 13 02 F6 | 	mov	arg01, local02
1c490     0F 29 02 F6 | 	mov	local06, local01
1c494     08 28 46 F0 | 	shr	local06, #8
1c498     24 20 06 F1 | 	add	local02, #36
1c49c     10 15 02 FB | 	rdlong	arg02, local02
1c4a0     24 20 86 F1 | 	sub	local02, #36
1c4a4     14 15 02 F1 | 	add	arg02, local06
1c4a8     20 FD BF FD | 	call	#_fatfs_cc_move_window
1c4ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4b0     64 00 90 5D |  if_ne	jmp	#LR__3197
1c4b4     34 20 06 F1 | 	add	local02, #52
1c4b8     01 1E 66 F0 | 	shl	local01, #1
1c4bc     FF 1F 06 F5 | 	and	local01, #511
1c4c0     0F 21 02 F1 | 	add	local02, local01
1c4c4                 | ' {
1c4c4                 | ' 
1c4c4                 | ' 	return *((WORD*)ptr);
1c4c4     10 FB E1 FA | 	rdword	result1, local02
1c4c8     FD 24 32 F9 | 	getword	local04, result1, #0
1c4cc                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1c4cc                 | ' 			break;
1c4cc     48 00 90 FD | 	jmp	#LR__3197
1c4d0                 | LR__3195
1c4d0     10 13 02 F6 | 	mov	arg01, local02
1c4d4     0F 29 02 F6 | 	mov	local06, local01
1c4d8     07 28 46 F0 | 	shr	local06, #7
1c4dc     24 20 06 F1 | 	add	local02, #36
1c4e0     10 15 02 FB | 	rdlong	arg02, local02
1c4e4     24 20 86 F1 | 	sub	local02, #36
1c4e8     14 15 02 F1 | 	add	arg02, local06
1c4ec     DC FC BF FD | 	call	#_fatfs_cc_move_window
1c4f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c4f4     20 00 90 5D |  if_ne	jmp	#LR__3197
1c4f8     34 20 06 F1 | 	add	local02, #52
1c4fc     02 1E 66 F0 | 	shl	local01, #2
1c500     FF 1F 06 F5 | 	and	local01, #511
1c504     0F 21 02 F1 | 	add	local02, local01
1c508                 | ' {
1c508                 | ' 
1c508                 | ' 	return *((DWORD*)ptr);
1c508     10 25 02 FB | 	rdlong	local04, local02
1c50c     7C 24 06 F4 | 	bitl	local04, #124
1c510                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1c510                 | ' 			break;
1c510     04 00 90 FD | 	jmp	#LR__3197
1c514                 | LR__3196
1c514     01 24 06 F6 | 	mov	local04, #1
1c518                 | LR__3197
1c518                 | LR__3198
1c518                 | ' 			val = 1;
1c518                 | ' 		}
1c518                 | ' 	}
1c518                 | ' 
1c518                 | ' 	return val;
1c518     12 FB 01 F6 | 	mov	result1, local04
1c51c     A7 F0 03 F6 | 	mov	ptra, fp
1c520     B2 00 A0 FD | 	call	#popregs_
1c524                 | _fatfs_cc_get_fat_ret
1c524     2D 00 64 FD | 	ret
1c528                 | 
1c528                 | _fatfs_cc_put_fat
1c528     08 4A 05 F6 | 	mov	COUNT_, #8
1c52c     A8 00 A0 FD | 	call	#pushregs_
1c530     09 1F 02 F6 | 	mov	local01, arg01
1c534     0A 21 02 F6 | 	mov	local02, arg02
1c538     0B 23 02 F6 | 	mov	local03, arg03
1c53c     02 24 06 F6 | 	mov	local04, #2
1c540     02 20 16 F2 | 	cmp	local02, #2 wc
1c544     E0 01 90 CD |  if_b	jmp	#LR__3207
1c548     18 1E 06 F1 | 	add	local01, #24
1c54c     0F 27 02 FB | 	rdlong	local05, local01
1c550     18 1E 86 F1 | 	sub	local01, #24
1c554     13 21 12 F2 | 	cmp	local02, local05 wc
1c558     CC 01 90 3D |  if_ae	jmp	#LR__3207
1c55c                 | ' 		switch (fs->fs_type) {
1c55c     0F 29 C2 FA | 	rdbyte	local06, local01
1c560     01 28 86 F1 | 	sub	local06, #1
1c564     03 28 26 F3 | 	fle	local06, #3
1c568     30 28 62 FD | 	jmprel	local06
1c56c                 | LR__3200
1c56c     0C 00 90 FD | 	jmp	#LR__3201
1c570     F8 00 90 FD | 	jmp	#LR__3204
1c574     40 01 90 FD | 	jmp	#LR__3205
1c578     AC 01 90 FD | 	jmp	#LR__3206
1c57c                 | LR__3201
1c57c     10 2B 02 F6 | 	mov	local07, local02
1c580     10 27 02 F6 | 	mov	local05, local02
1c584     01 26 46 F0 | 	shr	local05, #1
1c588     13 2B 02 F1 | 	add	local07, local05
1c58c     0F 13 02 F6 | 	mov	arg01, local01
1c590     15 29 02 F6 | 	mov	local06, local07
1c594     09 28 46 F0 | 	shr	local06, #9
1c598     24 1E 06 F1 | 	add	local01, #36
1c59c     0F 15 02 FB | 	rdlong	arg02, local01
1c5a0     24 1E 86 F1 | 	sub	local01, #36
1c5a4     14 15 02 F1 | 	add	arg02, local06
1c5a8     20 FC BF FD | 	call	#_fatfs_cc_move_window
1c5ac     FD 24 0A F6 | 	mov	local04, result1 wz
1c5b0     74 01 90 5D |  if_ne	jmp	#LR__3206
1c5b4     34 1E 06 F1 | 	add	local01, #52
1c5b8     0F 2D 02 F6 | 	mov	local08, local01
1c5bc     15 27 02 F6 | 	mov	local05, local07
1c5c0     FF 27 06 F5 | 	and	local05, #511
1c5c4     13 2D 02 F1 | 	add	local08, local05
1c5c8     01 20 CE F7 | 	test	local02, #1 wz
1c5cc     34 1E 86 F1 | 	sub	local01, #52
1c5d0     01 2A 06 F1 | 	add	local07, #1
1c5d4     18 00 90 AD |  if_e	jmp	#LR__3202
1c5d8     16 27 C2 FA | 	rdbyte	local05, local08
1c5dc     13 27 42 F8 | 	getnib	local05, local05, #0
1c5e0     11 29 E2 F8 | 	getbyte	local06, local03, #0
1c5e4     04 28 66 F0 | 	shl	local06, #4
1c5e8     14 27 42 F5 | 	or	local05, local06
1c5ec     04 00 90 FD | 	jmp	#LR__3203
1c5f0                 | LR__3202
1c5f0     11 27 02 F6 | 	mov	local05, local03
1c5f4                 | LR__3203
1c5f4     16 27 42 FC | 	wrbyte	local05, local08
1c5f8     03 1E 06 F1 | 	add	local01, #3
1c5fc     0F 03 48 FC | 	wrbyte	#1, local01
1c600     03 1E 86 F1 | 	sub	local01, #3
1c604     0F 13 02 F6 | 	mov	arg01, local01
1c608     15 2D 02 F6 | 	mov	local08, local07
1c60c     09 2C 46 F0 | 	shr	local08, #9
1c610     24 1E 06 F1 | 	add	local01, #36
1c614     0F 15 02 FB | 	rdlong	arg02, local01
1c618     24 1E 86 F1 | 	sub	local01, #36
1c61c     16 15 02 F1 | 	add	arg02, local08
1c620     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1c624     FD 24 0A F6 | 	mov	local04, result1 wz
1c628     FC 00 90 5D |  if_ne	jmp	#LR__3206
1c62c     34 1E 06 F1 | 	add	local01, #52
1c630     0F 2D 02 F6 | 	mov	local08, local01
1c634     FF 2B 06 F5 | 	and	local07, #511
1c638     15 2D 02 F1 | 	add	local08, local07
1c63c     01 20 CE F7 | 	test	local02, #1 wz
1c640     04 22 46 50 |  if_ne	shr	local03, #4
1c644     11 27 02 56 |  if_ne	mov	local05, local03
1c648     16 27 C2 AA |  if_e	rdbyte	local05, local08
1c64c     F0 26 06 A5 |  if_e	and	local05, #240
1c650     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1c654     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1c658     11 27 42 A5 |  if_e	or	local05, local03
1c65c     16 27 42 FC | 	wrbyte	local05, local08
1c660     31 1E 86 F1 | 	sub	local01, #49
1c664     0F 03 48 FC | 	wrbyte	#1, local01
1c668                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1c668                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1c668                 | ' 			fs->wflag = 1;
1c668                 | ' 			break;
1c668     BC 00 90 FD | 	jmp	#LR__3206
1c66c                 | LR__3204
1c66c     0F 13 02 F6 | 	mov	arg01, local01
1c670     10 2D 02 F6 | 	mov	local08, local02
1c674     08 2C 46 F0 | 	shr	local08, #8
1c678     24 1E 06 F1 | 	add	local01, #36
1c67c     0F 15 02 FB | 	rdlong	arg02, local01
1c680     24 1E 86 F1 | 	sub	local01, #36
1c684     16 15 02 F1 | 	add	arg02, local08
1c688     40 FB BF FD | 	call	#_fatfs_cc_move_window
1c68c     FD 24 0A F6 | 	mov	local04, result1 wz
1c690     94 00 90 5D |  if_ne	jmp	#LR__3206
1c694     34 1E 06 F1 | 	add	local01, #52
1c698     0F 13 02 F6 | 	mov	arg01, local01
1c69c     01 20 66 F0 | 	shl	local02, #1
1c6a0     FF 21 06 F5 | 	and	local02, #511
1c6a4     10 13 02 F1 | 	add	arg01, local02
1c6a8     09 23 52 FC | 	wrword	local03, arg01
1c6ac     31 1E 86 F1 | 	sub	local01, #49
1c6b0     0F 03 48 FC | 	wrbyte	#1, local01
1c6b4                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1c6b4                 | ' 			fs->wflag = 1;
1c6b4                 | ' 			break;
1c6b4     70 00 90 FD | 	jmp	#LR__3206
1c6b8                 | LR__3205
1c6b8     0F 13 02 F6 | 	mov	arg01, local01
1c6bc     10 2D 02 F6 | 	mov	local08, local02
1c6c0     07 2C 46 F0 | 	shr	local08, #7
1c6c4     24 1E 06 F1 | 	add	local01, #36
1c6c8     0F 15 02 FB | 	rdlong	arg02, local01
1c6cc     24 1E 86 F1 | 	sub	local01, #36
1c6d0     16 15 02 F1 | 	add	arg02, local08
1c6d4     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1c6d8     FD 24 0A F6 | 	mov	local04, result1 wz
1c6dc     48 00 90 5D |  if_ne	jmp	#LR__3206
1c6e0     7C 22 06 F4 | 	bitl	local03, #124
1c6e4     34 1E 06 F1 | 	add	local01, #52
1c6e8     10 2D 02 F6 | 	mov	local08, local02
1c6ec     02 2C 66 F0 | 	shl	local08, #2
1c6f0     FF 2D 06 F5 | 	and	local08, #511
1c6f4     0F 13 02 F6 | 	mov	arg01, local01
1c6f8     16 13 02 F1 | 	add	arg01, local08
1c6fc                 | ' {
1c6fc                 | ' 
1c6fc                 | ' 	return *((DWORD*)ptr);
1c6fc     09 2D 02 FB | 	rdlong	local08, arg01
1c700     00 00 78 FF 
1c704     00 2C 06 F5 | 	and	local08, ##-268435456
1c708     16 23 42 F5 | 	or	local03, local08
1c70c     0F 13 02 F6 | 	mov	arg01, local01
1c710     02 20 66 F0 | 	shl	local02, #2
1c714     FF 21 06 F5 | 	and	local02, #511
1c718     10 13 02 F1 | 	add	arg01, local02
1c71c     09 23 62 FC | 	wrlong	local03, arg01
1c720     31 1E 86 F1 | 	sub	local01, #49
1c724     0F 03 48 FC | 	wrbyte	#1, local01
1c728                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1c728                 | ' 			}
1c728                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1c728                 | ' 			fs->wflag = 1;
1c728                 | ' 			break;
1c728                 | LR__3206
1c728                 | LR__3207
1c728                 | ' 		}
1c728                 | ' 	}
1c728                 | ' 	return res;
1c728     12 FB 01 F6 | 	mov	result1, local04
1c72c     A7 F0 03 F6 | 	mov	ptra, fp
1c730     B2 00 A0 FD | 	call	#popregs_
1c734                 | _fatfs_cc_put_fat_ret
1c734     2D 00 64 FD | 	ret
1c738                 | 
1c738                 | _fatfs_cc_remove_chain
1c738     05 4A 05 F6 | 	mov	COUNT_, #5
1c73c     A8 00 A0 FD | 	call	#pushregs_
1c740     09 1F 02 F6 | 	mov	local01, arg01
1c744     0A 21 02 F6 | 	mov	local02, arg02
1c748     0B 23 02 F6 | 	mov	local03, arg03
1c74c     0F 25 02 FB | 	rdlong	local04, local01
1c750     02 20 16 F2 | 	cmp	local02, #2 wc
1c754     14 00 90 CD |  if_b	jmp	#LR__3210
1c758     18 24 06 F1 | 	add	local04, #24
1c75c     12 FB 01 FB | 	rdlong	result1, local04
1c760     18 24 86 F1 | 	sub	local04, #24
1c764     FD 20 12 F2 | 	cmp	local02, result1 wc
1c768     08 00 90 CD |  if_b	jmp	#LR__3211
1c76c                 | LR__3210
1c76c     02 FA 05 F6 | 	mov	result1, #2
1c770     CC 00 90 FD | 	jmp	#LR__3216
1c774                 | LR__3211
1c774     00 22 0E F2 | 	cmp	local03, #0 wz
1c778     18 00 90 AD |  if_e	jmp	#LR__3212
1c77c     11 15 02 F6 | 	mov	arg02, local03
1c780     12 13 02 F6 | 	mov	arg01, local04
1c784     01 16 66 F6 | 	neg	arg03, #1
1c788     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1c78c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c790     AC 00 90 5D |  if_ne	jmp	#LR__3216
1c794                 | LR__3212
1c794                 | ' 	}
1c794                 | ' 
1c794                 | ' 
1c794                 | ' 	do {
1c794                 | LR__3213
1c794     10 15 02 F6 | 	mov	arg02, local02
1c798     0F 13 02 F6 | 	mov	arg01, local01
1c79c     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1c7a0     FD 26 0A F6 | 	mov	local05, result1 wz
1c7a4     94 00 90 AD |  if_e	jmp	#LR__3215
1c7a8     01 26 0E F2 | 	cmp	local05, #1 wz
1c7ac     02 FA 05 A6 |  if_e	mov	result1, #2
1c7b0     8C 00 90 AD |  if_e	jmp	#LR__3216
1c7b4     FF FF 7F FF 
1c7b8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1c7bc     01 FA 05 A6 |  if_e	mov	result1, #1
1c7c0     7C 00 90 AD |  if_e	jmp	#LR__3216
1c7c4     10 15 02 F6 | 	mov	arg02, local02
1c7c8     12 13 02 F6 | 	mov	arg01, local04
1c7cc     00 16 06 F6 | 	mov	arg03, #0
1c7d0     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1c7d4     FD 22 0A F6 | 	mov	local03, result1 wz
1c7d8     11 FB 01 56 |  if_ne	mov	result1, local03
1c7dc     60 00 90 5D |  if_ne	jmp	#LR__3216
1c7e0     18 24 06 F1 | 	add	local04, #24
1c7e4     12 23 02 FB | 	rdlong	local03, local04
1c7e8     02 22 86 F1 | 	sub	local03, #2
1c7ec     04 24 86 F1 | 	sub	local04, #4
1c7f0     12 21 02 FB | 	rdlong	local02, local04
1c7f4     14 24 86 F1 | 	sub	local04, #20
1c7f8     11 21 12 F2 | 	cmp	local02, local03 wc
1c7fc     24 00 90 3D |  if_ae	jmp	#LR__3214
1c800     14 24 06 F1 | 	add	local04, #20
1c804     12 23 02 FB | 	rdlong	local03, local04
1c808     01 22 06 F1 | 	add	local03, #1
1c80c     12 23 62 FC | 	wrlong	local03, local04
1c810     10 24 86 F1 | 	sub	local04, #16
1c814     12 23 C2 FA | 	rdbyte	local03, local04
1c818     01 22 46 F5 | 	or	local03, #1
1c81c     12 23 42 FC | 	wrbyte	local03, local04
1c820     04 24 86 F1 | 	sub	local04, #4
1c824                 | LR__3214
1c824     13 21 02 F6 | 	mov	local02, local05
1c828     18 24 06 F1 | 	add	local04, #24
1c82c     12 27 02 FB | 	rdlong	local05, local04
1c830     18 24 86 F1 | 	sub	local04, #24
1c834     13 21 12 F2 | 	cmp	local02, local05 wc
1c838     58 FF 9F CD |  if_b	jmp	#LR__3213
1c83c                 | LR__3215
1c83c                 | ' #line 1500 "ff.c"
1c83c                 | ' 	return FR_OK;
1c83c     00 FA 05 F6 | 	mov	result1, #0
1c840                 | LR__3216
1c840     A7 F0 03 F6 | 	mov	ptra, fp
1c844     B2 00 A0 FD | 	call	#popregs_
1c848                 | _fatfs_cc_remove_chain_ret
1c848     2D 00 64 FD | 	ret
1c84c                 | 
1c84c                 | _fatfs_cc_create_chain
1c84c     09 4A 05 F6 | 	mov	COUNT_, #9
1c850     A8 00 A0 FD | 	call	#pushregs_
1c854     09 1F 02 F6 | 	mov	local01, arg01
1c858     0A 21 0A F6 | 	mov	local02, arg02 wz
1c85c     0F 23 02 FB | 	rdlong	local03, local01
1c860     28 00 90 5D |  if_ne	jmp	#LR__3220
1c864     10 22 06 F1 | 	add	local03, #16
1c868     11 25 0A FB | 	rdlong	local04, local03 wz
1c86c     10 22 86 F1 | 	sub	local03, #16
1c870     18 22 06 51 |  if_ne	add	local03, #24
1c874     11 27 02 5B |  if_ne	rdlong	local05, local03
1c878     18 22 86 51 |  if_ne	sub	local03, #24
1c87c     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1c880     50 00 90 4D |  if_c_and_nz	jmp	#LR__3221
1c884     01 24 06 F6 | 	mov	local04, #1
1c888     48 00 90 FD | 	jmp	#LR__3221
1c88c                 | LR__3220
1c88c     10 15 02 F6 | 	mov	arg02, local02
1c890     0F 13 02 F6 | 	mov	arg01, local01
1c894     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1c898     FD 24 02 F6 | 	mov	local04, result1
1c89c     02 24 16 F2 | 	cmp	local04, #2 wc
1c8a0     01 FA 05 C6 |  if_b	mov	result1, #1
1c8a4     BC 01 90 CD |  if_b	jmp	#LR__3231
1c8a8     FF FF 7F FF 
1c8ac     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1c8b0     12 FB 01 A6 |  if_e	mov	result1, local04
1c8b4     AC 01 90 AD |  if_e	jmp	#LR__3231
1c8b8     18 22 06 F1 | 	add	local03, #24
1c8bc     11 27 02 FB | 	rdlong	local05, local03
1c8c0     18 22 86 F1 | 	sub	local03, #24
1c8c4     13 25 12 F2 | 	cmp	local04, local05 wc
1c8c8     12 FB 01 C6 |  if_b	mov	result1, local04
1c8cc     94 01 90 CD |  if_b	jmp	#LR__3231
1c8d0     10 25 02 F6 | 	mov	local04, local02
1c8d4                 | LR__3221
1c8d4     14 22 06 F1 | 	add	local03, #20
1c8d8     11 27 0A FB | 	rdlong	local05, local03 wz
1c8dc     14 22 86 F1 | 	sub	local03, #20
1c8e0     00 FA 05 A6 |  if_e	mov	result1, #0
1c8e4     7C 01 90 AD |  if_e	jmp	#LR__3231
1c8e8     00 28 06 F6 | 	mov	local06, #0
1c8ec     10 25 0A F2 | 	cmp	local04, local02 wz
1c8f0     74 00 90 5D |  if_ne	jmp	#LR__3224
1c8f4     12 29 02 F6 | 	mov	local06, local04
1c8f8     01 28 06 F1 | 	add	local06, #1
1c8fc     18 22 06 F1 | 	add	local03, #24
1c900     11 27 02 FB | 	rdlong	local05, local03
1c904     18 22 86 F1 | 	sub	local03, #24
1c908     13 29 12 F2 | 	cmp	local06, local05 wc
1c90c     02 28 06 36 |  if_ae	mov	local06, #2
1c910     14 15 02 F6 | 	mov	arg02, local06
1c914     0F 13 02 F6 | 	mov	arg01, local01
1c918     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1c91c     FD 26 02 F6 | 	mov	local05, result1
1c920     01 26 0E F2 | 	cmp	local05, #1 wz
1c924     FF FF 7F 5F 
1c928     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1c92c     13 FB 01 A6 |  if_e	mov	result1, local05
1c930     30 01 90 AD |  if_e	jmp	#LR__3231
1c934     00 26 0E F2 | 	cmp	local05, #0 wz
1c938     2C 00 90 AD |  if_e	jmp	#LR__3223
1c93c     10 22 06 F1 | 	add	local03, #16
1c940     11 2B 02 FB | 	rdlong	local07, local03
1c944     10 22 86 F1 | 	sub	local03, #16
1c948     02 2A 16 F2 | 	cmp	local07, #2 wc
1c94c     14 00 90 CD |  if_b	jmp	#LR__3222
1c950     18 22 06 F1 | 	add	local03, #24
1c954     11 27 02 FB | 	rdlong	local05, local03
1c958     18 22 86 F1 | 	sub	local03, #24
1c95c     13 2B 12 F2 | 	cmp	local07, local05 wc
1c960     15 25 02 C6 |  if_b	mov	local04, local07
1c964                 | LR__3222
1c964     00 28 06 F6 | 	mov	local06, #0
1c968                 | LR__3223
1c968                 | LR__3224
1c968     00 28 0E F2 | 	cmp	local06, #0 wz
1c96c     60 00 90 5D |  if_ne	jmp	#LR__3227
1c970     12 29 02 F6 | 	mov	local06, local04
1c974                 | ' 			ncl = scl;
1c974                 | ' 			for (;;) {
1c974                 | LR__3225
1c974     01 28 06 F1 | 	add	local06, #1
1c978     18 22 06 F1 | 	add	local03, #24
1c97c     11 27 02 FB | 	rdlong	local05, local03
1c980     18 22 86 F1 | 	sub	local03, #24
1c984     13 29 12 F2 | 	cmp	local06, local05 wc
1c988     02 28 06 36 |  if_ae	mov	local06, #2
1c98c     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1c990     00 FA 05 16 |  if_a	mov	result1, #0
1c994     CC 00 90 1D |  if_a	jmp	#LR__3231
1c998     14 15 02 F6 | 	mov	arg02, local06
1c99c     0F 13 02 F6 | 	mov	arg01, local01
1c9a0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1c9a4     FD 2A 0A F6 | 	mov	local07, result1 wz
1c9a8     24 00 90 AD |  if_e	jmp	#LR__3226
1c9ac     01 2A 0E F2 | 	cmp	local07, #1 wz
1c9b0     FF FF 7F 5F 
1c9b4     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1c9b8     15 FB 01 A6 |  if_e	mov	result1, local07
1c9bc     A4 00 90 AD |  if_e	jmp	#LR__3231
1c9c0     12 29 0A F2 | 	cmp	local06, local04 wz
1c9c4     00 FA 05 A6 |  if_e	mov	result1, #0
1c9c8     98 00 90 AD |  if_e	jmp	#LR__3231
1c9cc     A4 FF 9F FD | 	jmp	#LR__3225
1c9d0                 | LR__3226
1c9d0                 | LR__3227
1c9d0     11 13 02 F6 | 	mov	arg01, local03
1c9d4     14 15 02 F6 | 	mov	arg02, local06
1c9d8     01 16 66 F6 | 	neg	arg03, #1
1c9dc     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1c9e0     FD 2C 0A F6 | 	mov	local08, result1 wz
1c9e4     1C 00 90 5D |  if_ne	jmp	#LR__3228
1c9e8     00 20 0E F2 | 	cmp	local02, #0 wz
1c9ec     14 00 90 AD |  if_e	jmp	#LR__3228
1c9f0     11 13 02 F6 | 	mov	arg01, local03
1c9f4     10 15 02 F6 | 	mov	arg02, local02
1c9f8     14 17 02 F6 | 	mov	arg03, local06
1c9fc     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1ca00     FD 2C 02 F6 | 	mov	local08, result1
1ca04                 | LR__3228
1ca04     00 2C 0E F2 | 	cmp	local08, #0 wz
1ca08     4C 00 90 5D |  if_ne	jmp	#LR__3229
1ca0c     10 22 06 F1 | 	add	local03, #16
1ca10     11 29 62 FC | 	wrlong	local06, local03
1ca14     08 22 06 F1 | 	add	local03, #8
1ca18     11 27 02 FB | 	rdlong	local05, local03
1ca1c     02 26 86 F1 | 	sub	local05, #2
1ca20     04 22 86 F1 | 	sub	local03, #4
1ca24     11 2F 02 FB | 	rdlong	local09, local03
1ca28     14 22 86 F1 | 	sub	local03, #20
1ca2c     13 2F 1A F2 | 	cmp	local09, local05 wcz
1ca30     14 22 06 E1 |  if_be	add	local03, #20
1ca34     11 2F 02 EB |  if_be	rdlong	local09, local03
1ca38     01 2E 86 E1 |  if_be	sub	local09, #1
1ca3c     11 2F 62 EC |  if_be	wrlong	local09, local03
1ca40     14 22 86 E1 |  if_be	sub	local03, #20
1ca44     04 22 06 F1 | 	add	local03, #4
1ca48     11 27 C2 FA | 	rdbyte	local05, local03
1ca4c     01 26 46 F5 | 	or	local05, #1
1ca50     11 27 42 FC | 	wrbyte	local05, local03
1ca54     08 00 90 FD | 	jmp	#LR__3230
1ca58                 | LR__3229
1ca58     01 2C 0E F2 | 	cmp	local08, #1 wz
1ca5c     01 28 C6 F6 | 	negz	local06, #1
1ca60                 | LR__3230
1ca60                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1ca60                 | ' 	}
1ca60                 | ' 
1ca60                 | ' 	return ncl;
1ca60     14 FB 01 F6 | 	mov	result1, local06
1ca64                 | LR__3231
1ca64     A7 F0 03 F6 | 	mov	ptra, fp
1ca68     B2 00 A0 FD | 	call	#popregs_
1ca6c                 | _fatfs_cc_create_chain_ret
1ca6c     2D 00 64 FD | 	ret
1ca70                 | 
1ca70                 | _fatfs_cc_dir_clear
1ca70     06 4A 05 F6 | 	mov	COUNT_, #6
1ca74     A8 00 A0 FD | 	call	#pushregs_
1ca78     09 1F 02 F6 | 	mov	local01, arg01
1ca7c     0A 21 02 F6 | 	mov	local02, arg02
1ca80     0F 13 02 F6 | 	mov	arg01, local01
1ca84     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1ca88     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca8c     01 FA 05 56 |  if_ne	mov	result1, #1
1ca90     90 00 90 5D |  if_ne	jmp	#LR__3242
1ca94     0F 13 02 F6 | 	mov	arg01, local01
1ca98     10 15 02 F6 | 	mov	arg02, local02
1ca9c     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1caa0     FD 22 02 F6 | 	mov	local03, result1
1caa4     30 1E 06 F1 | 	add	local01, #48
1caa8     0F 23 62 FC | 	wrlong	local03, local01
1caac     04 1E 06 F1 | 	add	local01, #4
1cab0     0F 13 02 F6 | 	mov	arg01, local01
1cab4     00 14 06 F6 | 	mov	arg02, #0
1cab8     09 16 C6 F9 | 	decod	arg03, #9
1cabc     98 00 A0 FD | 	call	#\builtin_bytefill_
1cac0     0F 25 02 F6 | 	mov	local04, local01
1cac4                 | ' #line 1667 "ff.c"
1cac4                 | ' 	{
1cac4                 | ' 		ibuf = fs->win; szb = 1;
1cac4                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1cac4     00 26 06 F6 | 	mov	local05, #0
1cac8     34 1E 86 F1 | 	sub	local01, #52
1cacc                 | LR__3240
1cacc     0A 1E 06 F1 | 	add	local01, #10
1cad0     0F 29 E2 FA | 	rdword	local06, local01
1cad4     0A 1E 86 F1 | 	sub	local01, #10
1cad8     14 27 12 F2 | 	cmp	local05, local06 wc
1cadc     2C 00 90 3D |  if_ae	jmp	#LR__3241
1cae0     01 1E 06 F1 | 	add	local01, #1
1cae4     0F 13 C2 FA | 	rdbyte	arg01, local01
1cae8     01 1E 86 F1 | 	sub	local01, #1
1caec     12 15 02 F6 | 	mov	arg02, local04
1caf0     11 17 02 F6 | 	mov	arg03, local03
1caf4     13 17 02 F1 | 	add	arg03, local05
1caf8     01 18 06 F6 | 	mov	arg04, #1
1cafc     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1cb00     00 FA 0D F2 | 	cmp	result1, #0 wz
1cb04     01 26 06 A1 |  if_e	add	local05, #1
1cb08     C0 FF 9F AD |  if_e	jmp	#LR__3240
1cb0c                 | LR__3241
1cb0c                 | ' 	}
1cb0c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1cb0c     0A 1E 06 F1 | 	add	local01, #10
1cb10     0F 25 E2 FA | 	rdword	local04, local01
1cb14     12 27 0A F2 | 	cmp	local05, local04 wz
1cb18     00 28 06 A6 |  if_e	mov	local06, #0
1cb1c     01 28 06 56 |  if_ne	mov	local06, #1
1cb20     14 FB 01 F6 | 	mov	result1, local06
1cb24                 | LR__3242
1cb24     A7 F0 03 F6 | 	mov	ptra, fp
1cb28     B2 00 A0 FD | 	call	#popregs_
1cb2c                 | _fatfs_cc_dir_clear_ret
1cb2c     2D 00 64 FD | 	ret
1cb30                 | 
1cb30                 | _fatfs_cc_dir_sdi
1cb30     06 4A 05 F6 | 	mov	COUNT_, #6
1cb34     A8 00 A0 FD | 	call	#pushregs_
1cb38     09 1F 02 F6 | 	mov	local01, arg01
1cb3c     0A 21 02 F6 | 	mov	local02, arg02
1cb40     0F 23 02 FB | 	rdlong	local03, local01
1cb44     00 10 00 FF 
1cb48     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1cb4c     1F 20 CE C7 |  if_b	test	local02, #31 wz
1cb50                 | ' 		return FR_INT_ERR;
1cb50     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1cb54     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3256
1cb58     10 1E 06 F1 | 	add	local01, #16
1cb5c     0F 21 62 FC | 	wrlong	local02, local01
1cb60     08 1E 86 F1 | 	sub	local01, #8
1cb64     0F 25 0A FB | 	rdlong	local04, local01 wz
1cb68     08 1E 86 F1 | 	sub	local01, #8
1cb6c     11 27 C2 AA |  if_e	rdbyte	local05, local03
1cb70     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1cb74     28 22 06 21 |  if_nc_and_z	add	local03, #40
1cb78     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1cb7c     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1cb80     00 24 0E F2 | 	cmp	local04, #0 wz
1cb84     3C 00 90 5D |  if_ne	jmp	#LR__3250
1cb88     10 27 02 F6 | 	mov	local05, local02
1cb8c     05 26 46 F0 | 	shr	local05, #5
1cb90     08 22 06 F1 | 	add	local03, #8
1cb94     11 15 E2 FA | 	rdword	arg02, local03
1cb98     08 22 86 F1 | 	sub	local03, #8
1cb9c     0A 27 12 F2 | 	cmp	local05, arg02 wc
1cba0     02 FA 05 36 |  if_ae	mov	result1, #2
1cba4     E4 00 90 3D |  if_ae	jmp	#LR__3256
1cba8     28 22 06 F1 | 	add	local03, #40
1cbac     11 27 02 FB | 	rdlong	local05, local03
1cbb0     28 22 86 F1 | 	sub	local03, #40
1cbb4     18 1E 06 F1 | 	add	local01, #24
1cbb8     0F 27 62 FC | 	wrlong	local05, local01
1cbbc     18 1E 86 F1 | 	sub	local01, #24
1cbc0     7C 00 90 FD | 	jmp	#LR__3255
1cbc4                 | LR__3250
1cbc4     0A 22 06 F1 | 	add	local03, #10
1cbc8     11 29 E2 FA | 	rdword	local06, local03
1cbcc     0A 22 86 F1 | 	sub	local03, #10
1cbd0     09 28 66 F0 | 	shl	local06, #9
1cbd4                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1cbd4                 | ' 		while (ofs >= csz) {
1cbd4                 | LR__3251
1cbd4     14 21 12 F2 | 	cmp	local02, local06 wc
1cbd8     4C 00 90 CD |  if_b	jmp	#LR__3254
1cbdc     0F 13 02 F6 | 	mov	arg01, local01
1cbe0     12 15 02 F6 | 	mov	arg02, local04
1cbe4     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1cbe8     FD 24 02 F6 | 	mov	local04, result1
1cbec     FF FF 7F FF 
1cbf0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1cbf4     01 FA 05 A6 |  if_e	mov	result1, #1
1cbf8     90 00 90 AD |  if_e	jmp	#LR__3256
1cbfc     02 24 16 F2 | 	cmp	local04, #2 wc
1cc00     14 00 90 CD |  if_b	jmp	#LR__3252
1cc04     18 22 06 F1 | 	add	local03, #24
1cc08     11 27 02 FB | 	rdlong	local05, local03
1cc0c     18 22 86 F1 | 	sub	local03, #24
1cc10     13 25 12 F2 | 	cmp	local04, local05 wc
1cc14     08 00 90 CD |  if_b	jmp	#LR__3253
1cc18                 | LR__3252
1cc18     02 FA 05 F6 | 	mov	result1, #2
1cc1c     6C 00 90 FD | 	jmp	#LR__3256
1cc20                 | LR__3253
1cc20     14 21 82 F1 | 	sub	local02, local06
1cc24     AC FF 9F FD | 	jmp	#LR__3251
1cc28                 | LR__3254
1cc28     11 13 02 F6 | 	mov	arg01, local03
1cc2c     12 15 02 F6 | 	mov	arg02, local04
1cc30     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1cc34     18 1E 06 F1 | 	add	local01, #24
1cc38     0F FB 61 FC | 	wrlong	result1, local01
1cc3c     18 1E 86 F1 | 	sub	local01, #24
1cc40                 | LR__3255
1cc40     14 1E 06 F1 | 	add	local01, #20
1cc44     0F 25 62 FC | 	wrlong	local04, local01
1cc48     04 1E 06 F1 | 	add	local01, #4
1cc4c     0F 27 0A FB | 	rdlong	local05, local01 wz
1cc50     18 1E 86 F1 | 	sub	local01, #24
1cc54     02 FA 05 A6 |  if_e	mov	result1, #2
1cc58     30 00 90 AD |  if_e	jmp	#LR__3256
1cc5c     10 29 02 F6 | 	mov	local06, local02
1cc60     09 28 46 F0 | 	shr	local06, #9
1cc64     18 1E 06 F1 | 	add	local01, #24
1cc68     0F 27 02 FB | 	rdlong	local05, local01
1cc6c     14 27 02 F1 | 	add	local05, local06
1cc70     0F 27 62 FC | 	wrlong	local05, local01
1cc74     34 22 06 F1 | 	add	local03, #52
1cc78     FF 21 06 F5 | 	and	local02, #511
1cc7c     10 23 02 F1 | 	add	local03, local02
1cc80     04 1E 06 F1 | 	add	local01, #4
1cc84     0F 23 62 FC | 	wrlong	local03, local01
1cc88                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1cc88                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1cc88                 | ' 
1cc88                 | ' 	return FR_OK;
1cc88     00 FA 05 F6 | 	mov	result1, #0
1cc8c                 | LR__3256
1cc8c     A7 F0 03 F6 | 	mov	ptra, fp
1cc90     B2 00 A0 FD | 	call	#popregs_
1cc94                 | _fatfs_cc_dir_sdi_ret
1cc94     2D 00 64 FD | 	ret
1cc98                 | 
1cc98                 | _fatfs_cc_dir_next
1cc98     05 4A 05 F6 | 	mov	COUNT_, #5
1cc9c     A8 00 A0 FD | 	call	#pushregs_
1cca0     09 1F 02 F6 | 	mov	local01, arg01
1cca4     0A 21 02 F6 | 	mov	local02, arg02
1cca8     0F 23 02 FB | 	rdlong	local03, local01
1ccac     10 1E 06 F1 | 	add	local01, #16
1ccb0     0F 25 02 FB | 	rdlong	local04, local01
1ccb4     10 1E 86 F1 | 	sub	local01, #16
1ccb8     20 24 06 F1 | 	add	local04, #32
1ccbc     00 10 00 FF 
1ccc0     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1ccc4     18 1E 06 31 |  if_ae	add	local01, #24
1ccc8     0F 01 68 3C |  if_ae	wrlong	#0, local01
1cccc     18 1E 86 31 |  if_ae	sub	local01, #24
1ccd0     18 1E 06 F1 | 	add	local01, #24
1ccd4     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ccd8     18 1E 86 F1 | 	sub	local01, #24
1ccdc     04 FA 05 A6 |  if_e	mov	result1, #4
1cce0     64 01 90 AD |  if_e	jmp	#LR__3265
1cce4     FF 25 CE F7 | 	test	local04, #511 wz
1cce8     3C 01 90 5D |  if_ne	jmp	#LR__3264
1ccec     18 1E 06 F1 | 	add	local01, #24
1ccf0     0F 15 02 FB | 	rdlong	arg02, local01
1ccf4     01 14 06 F1 | 	add	arg02, #1
1ccf8     0F 15 62 FC | 	wrlong	arg02, local01
1ccfc     04 1E 86 F1 | 	sub	local01, #4
1cd00     0F 15 0A FB | 	rdlong	arg02, local01 wz
1cd04     14 1E 86 F1 | 	sub	local01, #20
1cd08     2C 00 90 5D |  if_ne	jmp	#LR__3260
1cd0c     12 15 02 F6 | 	mov	arg02, local04
1cd10     05 14 46 F0 | 	shr	arg02, #5
1cd14     08 22 06 F1 | 	add	local03, #8
1cd18     11 21 E2 FA | 	rdword	local02, local03
1cd1c     08 22 86 F1 | 	sub	local03, #8
1cd20     10 15 12 F2 | 	cmp	arg02, local02 wc
1cd24     18 1E 06 31 |  if_ae	add	local01, #24
1cd28     0F 01 68 3C |  if_ae	wrlong	#0, local01
1cd2c                 | ' 				dp->sect = 0; return FR_NO_FILE;
1cd2c     04 FA 05 36 |  if_ae	mov	result1, #4
1cd30     14 01 90 3D |  if_ae	jmp	#LR__3265
1cd34     F0 00 90 FD | 	jmp	#LR__3263
1cd38                 | LR__3260
1cd38     12 13 02 F6 | 	mov	arg01, local04
1cd3c     09 12 46 F0 | 	shr	arg01, #9
1cd40     0A 22 06 F1 | 	add	local03, #10
1cd44     11 15 E2 FA | 	rdword	arg02, local03
1cd48     0A 22 86 F1 | 	sub	local03, #10
1cd4c     01 14 86 F1 | 	sub	arg02, #1
1cd50     0A 13 CA F7 | 	test	arg01, arg02 wz
1cd54     D0 00 90 5D |  if_ne	jmp	#LR__3262
1cd58     0F 13 02 F6 | 	mov	arg01, local01
1cd5c     14 1E 06 F1 | 	add	local01, #20
1cd60     0F 15 02 FB | 	rdlong	arg02, local01
1cd64     14 1E 86 F1 | 	sub	local01, #20
1cd68     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1cd6c     FD 26 02 F6 | 	mov	local05, result1
1cd70     02 26 16 F2 | 	cmp	local05, #2 wc
1cd74     02 FA 05 C6 |  if_b	mov	result1, #2
1cd78     CC 00 90 CD |  if_b	jmp	#LR__3265
1cd7c     FF FF 7F FF 
1cd80     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1cd84     01 FA 05 A6 |  if_e	mov	result1, #1
1cd88     BC 00 90 AD |  if_e	jmp	#LR__3265
1cd8c     18 22 06 F1 | 	add	local03, #24
1cd90     11 15 02 FB | 	rdlong	arg02, local03
1cd94     18 22 86 F1 | 	sub	local03, #24
1cd98     0A 27 12 F2 | 	cmp	local05, arg02 wc
1cd9c     68 00 90 CD |  if_b	jmp	#LR__3261
1cda0     00 20 0E F2 | 	cmp	local02, #0 wz
1cda4     18 1E 06 A1 |  if_e	add	local01, #24
1cda8     0F 01 68 AC |  if_e	wrlong	#0, local01
1cdac                 | ' 						dp->sect = 0; return FR_NO_FILE;
1cdac     04 FA 05 A6 |  if_e	mov	result1, #4
1cdb0     94 00 90 AD |  if_e	jmp	#LR__3265
1cdb4     0F 13 02 F6 | 	mov	arg01, local01
1cdb8     14 1E 06 F1 | 	add	local01, #20
1cdbc     0F 15 02 FB | 	rdlong	arg02, local01
1cdc0     14 1E 86 F1 | 	sub	local01, #20
1cdc4     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1cdc8     FD 26 0A F6 | 	mov	local05, result1 wz
1cdcc     07 FA 05 A6 |  if_e	mov	result1, #7
1cdd0     74 00 90 AD |  if_e	jmp	#LR__3265
1cdd4     01 26 0E F2 | 	cmp	local05, #1 wz
1cdd8     02 FA 05 A6 |  if_e	mov	result1, #2
1cddc     68 00 90 AD |  if_e	jmp	#LR__3265
1cde0     FF FF 7F FF 
1cde4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1cde8     01 FA 05 A6 |  if_e	mov	result1, #1
1cdec     58 00 90 AD |  if_e	jmp	#LR__3265
1cdf0     13 15 02 F6 | 	mov	arg02, local05
1cdf4     11 13 02 F6 | 	mov	arg01, local03
1cdf8     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1cdfc     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce00     01 FA 05 56 |  if_ne	mov	result1, #1
1ce04     40 00 90 5D |  if_ne	jmp	#LR__3265
1ce08                 | LR__3261
1ce08     14 1E 06 F1 | 	add	local01, #20
1ce0c     0F 27 62 FC | 	wrlong	local05, local01
1ce10     11 13 02 F6 | 	mov	arg01, local03
1ce14     13 15 02 F6 | 	mov	arg02, local05
1ce18     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1ce1c     04 1E 06 F1 | 	add	local01, #4
1ce20     0F FB 61 FC | 	wrlong	result1, local01
1ce24     18 1E 86 F1 | 	sub	local01, #24
1ce28                 | LR__3262
1ce28                 | LR__3263
1ce28                 | LR__3264
1ce28     10 1E 06 F1 | 	add	local01, #16
1ce2c     0F 25 62 FC | 	wrlong	local04, local01
1ce30     34 22 06 F1 | 	add	local03, #52
1ce34     FF 25 06 F5 | 	and	local04, #511
1ce38     12 23 02 F1 | 	add	local03, local04
1ce3c     0C 1E 06 F1 | 	add	local01, #12
1ce40     0F 23 62 FC | 	wrlong	local03, local01
1ce44                 | ' #line 1771 "ff.c"
1ce44                 | ' 				}
1ce44                 | ' 				dp->clust = clst;
1ce44                 | ' 				dp->sect = clst2sect(fs, clst);
1ce44                 | ' 			}
1ce44                 | ' 		}
1ce44                 | ' 	}
1ce44                 | ' 	dp->dptr = ofs;
1ce44                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1ce44                 | ' 
1ce44                 | ' 	return FR_OK;
1ce44     00 FA 05 F6 | 	mov	result1, #0
1ce48                 | LR__3265
1ce48     A7 F0 03 F6 | 	mov	ptra, fp
1ce4c     B2 00 A0 FD | 	call	#popregs_
1ce50                 | _fatfs_cc_dir_next_ret
1ce50     2D 00 64 FD | 	ret
1ce54                 | 
1ce54                 | _fatfs_cc_dir_alloc
1ce54     08 4A 05 F6 | 	mov	COUNT_, #8
1ce58     A8 00 A0 FD | 	call	#pushregs_
1ce5c     09 1F 02 F6 | 	mov	local01, arg01
1ce60     0A 21 02 F6 | 	mov	local02, arg02
1ce64     0F 23 02 FB | 	rdlong	local03, local01
1ce68     0F 13 02 F6 | 	mov	arg01, local01
1ce6c     00 14 06 F6 | 	mov	arg02, #0
1ce70     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1ce74     FD 24 0A F6 | 	mov	local04, result1 wz
1ce78     70 00 90 5D |  if_ne	jmp	#LR__3274
1ce7c     00 26 06 F6 | 	mov	local05, #0
1ce80                 | ' 		n = 0;
1ce80                 | ' 		do {
1ce80                 | LR__3270
1ce80     18 1E 06 F1 | 	add	local01, #24
1ce84     0F 15 02 FB | 	rdlong	arg02, local01
1ce88     18 1E 86 F1 | 	sub	local01, #24
1ce8c     11 13 02 F6 | 	mov	arg01, local03
1ce90     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1ce94     FD 24 0A F6 | 	mov	local04, result1 wz
1ce98     50 00 90 5D |  if_ne	jmp	#LR__3273
1ce9c     1C 1E 06 F1 | 	add	local01, #28
1cea0     0F 29 02 FB | 	rdlong	local06, local01
1cea4     1C 1E 86 F1 | 	sub	local01, #28
1cea8     14 29 C2 FA | 	rdbyte	local06, local06
1ceac     E5 28 0E F2 | 	cmp	local06, #229 wz
1ceb0     1C 1E 06 51 |  if_ne	add	local01, #28
1ceb4     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1ceb8     1C 1E 86 51 |  if_ne	sub	local01, #28
1cebc     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1cec0     10 00 90 5D |  if_ne	jmp	#LR__3271
1cec4     01 26 06 F1 | 	add	local05, #1
1cec8     10 27 0A F2 | 	cmp	local05, local02 wz
1cecc     1C 00 90 AD |  if_e	jmp	#LR__3273
1ced0     04 00 90 FD | 	jmp	#LR__3272
1ced4                 | LR__3271
1ced4     00 26 06 F6 | 	mov	local05, #0
1ced8                 | LR__3272
1ced8     0F 13 02 F6 | 	mov	arg01, local01
1cedc     01 14 06 F6 | 	mov	arg02, #1
1cee0     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1cee4     FD 24 0A F6 | 	mov	local04, result1 wz
1cee8     94 FF 9F AD |  if_e	jmp	#LR__3270
1ceec                 | LR__3273
1ceec                 | LR__3274
1ceec     04 24 0E F2 | 	cmp	local04, #4 wz
1cef0     07 24 06 A6 |  if_e	mov	local04, #7
1cef4                 | ' 	return res;
1cef4     12 FB 01 F6 | 	mov	result1, local04
1cef8     A7 F0 03 F6 | 	mov	ptra, fp
1cefc     B2 00 A0 FD | 	call	#popregs_
1cf00                 | _fatfs_cc_dir_alloc_ret
1cf00     2D 00 64 FD | 	ret
1cf04                 | 
1cf04                 | _fatfs_cc_ld_clust
1cf04     09 01 02 F6 | 	mov	_var01, arg01
1cf08     0A 13 02 F6 | 	mov	arg01, arg02
1cf0c     1A 12 06 F1 | 	add	arg01, #26
1cf10                 | ' {
1cf10                 | ' 
1cf10                 | ' 	return *((WORD*)ptr);
1cf10     09 FB E1 FA | 	rdword	result1, arg01
1cf14     FD 12 32 F9 | 	getword	arg01, result1, #0
1cf18     00 01 C2 FA | 	rdbyte	_var01, _var01
1cf1c     03 00 0E F2 | 	cmp	_var01, #3 wz
1cf20     14 14 06 A1 |  if_e	add	arg02, #20
1cf24                 | ' {
1cf24                 | ' 
1cf24                 | ' 	return *((WORD*)ptr);
1cf24     0A FB E1 AA |  if_e	rdword	result1, arg02
1cf28     10 FA 65 A0 |  if_e	shl	result1, #16
1cf2c     FD 12 42 A5 |  if_e	or	arg01, result1
1cf30                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1cf30                 | ' 	}
1cf30                 | ' 
1cf30                 | ' 	return cl;
1cf30     09 FB 01 F6 | 	mov	result1, arg01
1cf34                 | _fatfs_cc_ld_clust_ret
1cf34     2D 00 64 FD | 	ret
1cf38                 | 
1cf38                 | _fatfs_cc_st_clust
1cf38     09 01 02 F6 | 	mov	_var01, arg01
1cf3c     0A 13 02 F6 | 	mov	arg01, arg02
1cf40     1A 12 06 F1 | 	add	arg01, #26
1cf44     09 17 52 FC | 	wrword	arg03, arg01
1cf48     00 01 C2 FA | 	rdbyte	_var01, _var01
1cf4c     03 00 0E F2 | 	cmp	_var01, #3 wz
1cf50     14 14 06 A1 |  if_e	add	arg02, #20
1cf54     10 16 46 A0 |  if_e	shr	arg03, #16
1cf58     0A 17 52 AC |  if_e	wrword	arg03, arg02
1cf5c                 | _fatfs_cc_st_clust_ret
1cf5c     2D 00 64 FD | 	ret
1cf60                 | 
1cf60                 | _fatfs_cc_cmp_lfn
1cf60     07 4A 05 F6 | 	mov	COUNT_, #7
1cf64     A8 00 A0 FD | 	call	#pushregs_
1cf68     09 1F 02 F6 | 	mov	local01, arg01
1cf6c     0A 13 02 F6 | 	mov	arg01, arg02
1cf70     1A 12 06 F1 | 	add	arg01, #26
1cf74                 | ' {
1cf74                 | ' 
1cf74                 | ' 	return *((WORD*)ptr);
1cf74     09 FB E9 FA | 	rdword	result1, arg01 wz
1cf78     00 FA 05 56 |  if_ne	mov	result1, #0
1cf7c     E0 00 90 5D |  if_ne	jmp	#LR__3286
1cf80     0A 21 C2 FA | 	rdbyte	local02, arg02
1cf84     3F 20 06 F5 | 	and	local02, #63
1cf88     01 20 86 F1 | 	sub	local02, #1
1cf8c     0D 20 06 FD | 	qmul	local02, #13
1cf90                 | ' 
1cf90                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1cf90                 | ' 
1cf90                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1cf90     01 22 06 F6 | 	mov	local03, #1
1cf94     00 24 06 F6 | 	mov	local04, #0
1cf98     18 26 62 FD | 	getqx	local05
1cf9c                 | LR__3280
1cf9c     0D 24 16 F2 | 	cmp	local04, #13 wc
1cfa0     9C 00 90 3D |  if_ae	jmp	#LR__3285
1cfa4     0A 13 02 F6 | 	mov	arg01, arg02
1cfa8     12 21 02 F6 | 	mov	local02, local04
1cfac     01 00 00 FF 
1cfb0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1cfb4     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1cfb8     10 21 C2 FA | 	rdbyte	local02, local02
1cfbc     01 20 06 FA | 	mul	local02, #1
1cfc0     10 13 02 F1 | 	add	arg01, local02
1cfc4     01 00 00 FF 
1cfc8     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1cfcc                 | ' {
1cfcc                 | ' 
1cfcc                 | ' 	return *((WORD*)ptr);
1cfcc     09 FB E1 FA | 	rdword	result1, arg01
1cfd0     FD 28 02 F6 | 	mov	local06, result1
1cfd4     11 21 02 F6 | 	mov	local02, local03
1cfd8     0F 20 4E F7 | 	zerox	local02, #15 wz
1cfdc     44 00 90 AD |  if_e	jmp	#LR__3283
1cfe0     00 27 16 F2 | 	cmp	local05, #256 wc
1cfe4     2C 00 90 3D |  if_ae	jmp	#LR__3281
1cfe8     14 13 32 F9 | 	getword	arg01, local06, #0
1cfec     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1cff0     FD 20 02 F6 | 	mov	local02, result1
1cff4     13 23 02 F6 | 	mov	local03, local05
1cff8     01 22 66 F0 | 	shl	local03, #1
1cffc     0F 23 02 F1 | 	add	local03, local01
1d000     11 13 E2 FA | 	rdword	arg01, local03
1d004     01 26 06 F1 | 	add	local05, #1
1d008     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1d00c     FD 20 0A F2 | 	cmp	local02, result1 wz
1d010     08 00 90 AD |  if_e	jmp	#LR__3282
1d014                 | LR__3281
1d014                 | ' 				return 0;
1d014     00 FA 05 F6 | 	mov	result1, #0
1d018     44 00 90 FD | 	jmp	#LR__3286
1d01c                 | LR__3282
1d01c     14 23 02 F6 | 	mov	local03, local06
1d020     14 00 90 FD | 	jmp	#LR__3284
1d024                 | LR__3283
1d024     14 29 32 F9 | 	getword	local06, local06, #0
1d028     7F 00 00 FF 
1d02c     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1d030     00 FA 05 56 |  if_ne	mov	result1, #0
1d034     28 00 90 5D |  if_ne	jmp	#LR__3286
1d038                 | LR__3284
1d038     01 24 06 F1 | 	add	local04, #1
1d03c     5C FF 9F FD | 	jmp	#LR__3280
1d040                 | LR__3285
1d040     0A 21 C2 FA | 	rdbyte	local02, arg02
1d044     40 20 CE F7 | 	test	local02, #64 wz
1d048     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1d04c     01 26 66 50 |  if_ne	shl	local05, #1
1d050     0F 27 02 51 |  if_ne	add	local05, local01
1d054     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1d058     00 FA 05 56 |  if_ne	mov	result1, #0
1d05c                 | ' 
1d05c                 | ' 	return 1;
1d05c     01 FA 05 A6 |  if_e	mov	result1, #1
1d060                 | LR__3286
1d060     A7 F0 03 F6 | 	mov	ptra, fp
1d064     B2 00 A0 FD | 	call	#popregs_
1d068                 | _fatfs_cc_cmp_lfn_ret
1d068     2D 00 64 FD | 	ret
1d06c                 | 
1d06c                 | _fatfs_cc_pick_lfn
1d06c     09 01 02 F6 | 	mov	_var01, arg01
1d070     0A 13 02 F6 | 	mov	arg01, arg02
1d074     1A 12 06 F1 | 	add	arg01, #26
1d078                 | ' {
1d078                 | ' 
1d078                 | ' 	return *((WORD*)ptr);
1d078     09 FB E9 FA | 	rdword	result1, arg01 wz
1d07c     00 FA 05 56 |  if_ne	mov	result1, #0
1d080     D4 00 90 5D |  if_ne	jmp	#LR__3295
1d084     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d088     40 02 26 F5 | 	andn	_var02, #64
1d08c     01 02 86 F1 | 	sub	_var02, #1
1d090     0D 02 06 FD | 	qmul	_var02, #13
1d094                 | ' 
1d094                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1d094                 | ' 
1d094                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1d094     01 04 06 F6 | 	mov	_var03, #1
1d098     00 06 06 F6 | 	mov	_var04, #0
1d09c     18 08 62 FD | 	getqx	_var05
1d0a0                 | LR__3290
1d0a0     0D 06 16 F2 | 	cmp	_var04, #13 wc
1d0a4     80 00 90 3D |  if_ae	jmp	#LR__3293
1d0a8     0A 13 02 F6 | 	mov	arg01, arg02
1d0ac     03 03 02 F6 | 	mov	_var02, _var04
1d0b0     01 00 00 FF 
1d0b4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d0b8     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1d0bc     01 03 C2 FA | 	rdbyte	_var02, _var02
1d0c0     01 02 06 FA | 	mul	_var02, #1
1d0c4     01 13 02 F1 | 	add	arg01, _var02
1d0c8     01 00 00 FF 
1d0cc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d0d0                 | ' {
1d0d0                 | ' 
1d0d0                 | ' 	return *((WORD*)ptr);
1d0d0     09 FB E1 FA | 	rdword	result1, arg01
1d0d4     FD 0A 02 F6 | 	mov	_var06, result1
1d0d8     02 03 02 F6 | 	mov	_var02, _var03
1d0dc     0F 02 4E F7 | 	zerox	_var02, #15 wz
1d0e0     28 00 90 AD |  if_e	jmp	#LR__3291
1d0e4     00 09 16 F2 | 	cmp	_var05, #256 wc
1d0e8     00 FA 05 36 |  if_ae	mov	result1, #0
1d0ec     68 00 90 3D |  if_ae	jmp	#LR__3295
1d0f0     04 03 02 F6 | 	mov	_var02, _var05
1d0f4     01 02 66 F0 | 	shl	_var02, #1
1d0f8     00 03 02 F1 | 	add	_var02, _var01
1d0fc     05 05 02 F6 | 	mov	_var03, _var06
1d100     01 05 52 FC | 	wrword	_var03, _var02
1d104     01 08 06 F1 | 	add	_var05, #1
1d108     14 00 90 FD | 	jmp	#LR__3292
1d10c                 | LR__3291
1d10c     05 0B 32 F9 | 	getword	_var06, _var06, #0
1d110     7F 00 00 FF 
1d114     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1d118     00 FA 05 56 |  if_ne	mov	result1, #0
1d11c     38 00 90 5D |  if_ne	jmp	#LR__3295
1d120                 | LR__3292
1d120     01 06 06 F1 | 	add	_var04, #1
1d124     78 FF 9F FD | 	jmp	#LR__3290
1d128                 | LR__3293
1d128     0A 03 C2 FA | 	rdbyte	_var02, arg02
1d12c     40 02 CE F7 | 	test	_var02, #64 wz
1d130     02 0D 02 56 |  if_ne	mov	_var07, _var03
1d134     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1d138     18 00 90 AD |  if_e	jmp	#LR__3294
1d13c     00 09 16 F2 | 	cmp	_var05, #256 wc
1d140     00 FA 05 36 |  if_ae	mov	result1, #0
1d144     10 00 90 3D |  if_ae	jmp	#LR__3295
1d148     01 08 66 F0 | 	shl	_var05, #1
1d14c     00 09 02 F1 | 	add	_var05, _var01
1d150     04 01 58 FC | 	wrword	#0, _var05
1d154                 | LR__3294
1d154                 | ' 		lfnbuf[i] = 0;
1d154                 | ' 	}
1d154                 | ' 
1d154                 | ' 	return 1;
1d154     01 FA 05 F6 | 	mov	result1, #1
1d158                 | LR__3295
1d158                 | _fatfs_cc_pick_lfn_ret
1d158     2D 00 64 FD | 	ret
1d15c                 | 
1d15c                 | _fatfs_cc_put_lfn
1d15c     0D 14 06 F1 | 	add	arg02, #13
1d160     0A 19 42 FC | 	wrbyte	arg04, arg02
1d164     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1d168     01 18 86 F1 | 	sub	arg04, #1
1d16c     0D 18 06 FD | 	qmul	arg04, #13
1d170     09 01 02 F6 | 	mov	_var01, arg01
1d174     02 14 86 F1 | 	sub	arg02, #2
1d178     0A 1F 48 FC | 	wrbyte	#15, arg02
1d17c     01 14 06 F1 | 	add	arg02, #1
1d180     0A 01 48 FC | 	wrbyte	#0, arg02
1d184     0C 14 86 F1 | 	sub	arg02, #12
1d188     0A 13 02 F6 | 	mov	arg01, arg02
1d18c     1A 12 06 F1 | 	add	arg01, #26
1d190     09 01 58 FC | 	wrword	#0, arg01
1d194     00 02 06 F6 | 	mov	_var02, #0
1d198     00 04 06 F6 | 	mov	_var03, #0
1d19c                 | ' 	BYTE* dir,
1d19c                 | ' 	BYTE ord,
1d19c                 | ' 	BYTE sum
1d19c                 | ' )
1d19c                 | ' {
1d19c                 | ' 	UINT i, s;
1d19c                 | ' 	WCHAR wc;
1d19c                 | ' 
1d19c                 | ' 
1d19c                 | ' 	dir[ 13 ] = sum;
1d19c                 | ' 	dir[ 11 ] =  0x0F ;
1d19c                 | ' 	dir[ 12 ] = 0;
1d19c                 | ' 	st_word(dir +  26 , 0);
1d19c                 | ' 
1d19c                 | ' 	i = (ord - 1) * 13;
1d19c                 | ' 	s = wc = 0;
1d19c                 | ' 	do {
1d19c     01 00 00 FF 
1d1a0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1d1a4     18 06 62 FD | 	getqx	_var04
1d1a8     97 2A 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
1d1ac                 | LR__3300
1d1ac     01 19 32 F9 | 	getword	arg04, _var02, #0
1d1b0     7F 00 00 FF 
1d1b4     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1d1b8     03 13 02 56 |  if_ne	mov	arg01, _var04
1d1bc     01 06 06 51 |  if_ne	add	_var04, #1
1d1c0     01 12 66 50 |  if_ne	shl	arg01, #1
1d1c4     00 13 02 51 |  if_ne	add	arg01, _var01
1d1c8     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1d1cc     0A 13 02 F6 | 	mov	arg01, arg02
1d1d0     02 19 02 F6 | 	mov	arg04, _var03
1d1d4     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1d1d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
1d1dc     01 18 06 FA | 	mul	arg04, #1
1d1e0     0C 13 02 F1 | 	add	arg01, arg04
1d1e4     09 03 52 FC | 	wrword	_var02, arg01
1d1e8     01 19 02 F6 | 	mov	arg04, _var02
1d1ec     0F 18 4E F7 | 	zerox	arg04, #15 wz
1d1f0     0F 02 CE A9 |  if_e	bmask	_var02, #15
1d1f4     01 04 06 F1 | 	add	_var03, #1
1d1f8     0D 04 16 F2 | 	cmp	_var03, #13 wc
1d1fc     AC FF 9F CD |  if_b	jmp	#LR__3300
1d200                 | LR__3301
1d200     01 00 00 FF 
1d204     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1d208     01 03 32 F9 | 	getword	_var02, _var02, #0
1d20c     7F 00 00 FF 
1d210     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1d214     01 06 66 50 |  if_ne	shl	_var04, #1
1d218     00 07 02 51 |  if_ne	add	_var04, _var01
1d21c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1d220     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1d224     40 16 46 A5 |  if_e	or	arg03, #64
1d228     0A 17 42 FC | 	wrbyte	arg03, arg02
1d22c                 | _fatfs_cc_put_lfn_ret
1d22c     2D 00 64 FD | 	ret
1d230                 | 
1d230                 | _fatfs_cc_gen_numname
1d230     08 4A 05 F6 | 	mov	COUNT_, #8
1d234     A8 00 A0 FD | 	call	#pushregs_
1d238     2C F0 07 F1 | 	add	ptra, #44
1d23c     09 1F 02 F6 | 	mov	local01, arg01
1d240     0A 21 02 F6 | 	mov	local02, arg02
1d244     0B 23 02 F6 | 	mov	local03, arg03
1d248     0C 25 02 F6 | 	mov	local04, arg04
1d24c     0F 13 02 F6 | 	mov	arg01, local01
1d250     10 15 02 F6 | 	mov	arg02, local02
1d254     0B 16 06 F6 | 	mov	arg03, #11
1d258     D8 7B BF FD | 	call	#__system____builtin_memmove
1d25c     06 24 16 F2 | 	cmp	local04, #6 wc
1d260     48 00 90 CD |  if_b	jmp	#LR__3315
1d264     12 27 02 F6 | 	mov	local05, local04
1d268     97 1E 48 FB | 	callpa	#(@LR__3313-@LR__3310)>>2,fcache_load_ptr_
1d26c                 | ' 		sreg = seq;
1d26c                 | ' 		while (*lfn) {
1d26c                 | LR__3310
1d26c     11 29 EA FA | 	rdword	local06, local03 wz
1d270     34 00 90 AD |  if_e	jmp	#LR__3314
1d274     11 2B E2 FA | 	rdword	local07, local03
1d278                 | ' 			wc = *lfn++;
1d278                 | ' 			for (i = 0; i < 16; i++) {
1d278     02 22 06 F1 | 	add	local03, #2
1d27c     10 12 DC FC | 	rep	@LR__3312, #16
1d280                 | LR__3311
1d280     01 26 66 F0 | 	shl	local05, #1
1d284     15 29 32 F9 | 	getword	local06, local07, #0
1d288     01 28 06 F5 | 	and	local06, #1
1d28c     14 27 02 F1 | 	add	local05, local06
1d290     15 2B 32 F9 | 	getword	local07, local07, #0
1d294     01 2A 46 F0 | 	shr	local07, #1
1d298     10 26 2E F4 | 	testbn	local05, #16 wz
1d29c     88 00 00 5F 
1d2a0     21 26 66 55 |  if_ne	xor	local05, ##69665
1d2a4                 | LR__3312
1d2a4     C4 FF 9F FD | 	jmp	#LR__3310
1d2a8                 | LR__3313
1d2a8                 | LR__3314
1d2a8     13 25 02 F6 | 	mov	local04, local05
1d2ac                 | LR__3315
1d2ac     07 2A 06 F6 | 	mov	local07, #7
1d2b0                 | ' 			}
1d2b0                 | ' 		}
1d2b0                 | ' 		seq = (UINT)sreg;
1d2b0                 | ' 	}
1d2b0                 | ' 
1d2b0                 | ' 
1d2b0                 | ' 	i = 7;
1d2b0                 | ' 	do {
1d2b0     10 4E 05 F1 | 	add	fp, #16
1d2b4     97 1A 48 FB | 	callpa	#(@LR__3317-@LR__3316)>>2,fcache_load_ptr_
1d2b8                 | LR__3316
1d2b8     12 27 42 F8 | 	getnib	local05, local04, #0
1d2bc     30 26 06 F1 | 	add	local05, #48
1d2c0     04 24 46 F0 | 	shr	local04, #4
1d2c4     13 29 E2 F8 | 	getbyte	local06, local05, #0
1d2c8     3A 28 16 F2 | 	cmp	local06, #58 wc
1d2cc     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1d2d0     07 26 06 31 |  if_ae	add	local05, #7
1d2d4     15 29 02 F6 | 	mov	local06, local07
1d2d8     01 2A 8E F1 | 	sub	local07, #1 wz
1d2dc     A7 28 02 F1 | 	add	local06, fp
1d2e0     14 27 42 FC | 	wrbyte	local05, local06
1d2e4     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1d2e8     CC FF 9F 5D |  if_ne	jmp	#LR__3316
1d2ec                 | LR__3317
1d2ec     15 29 02 F6 | 	mov	local06, local07
1d2f0     A7 28 02 F1 | 	add	local06, fp
1d2f4     14 FD 48 FC | 	wrbyte	#126, local06
1d2f8                 | ' 	ns[i] = '~';
1d2f8                 | ' 
1d2f8                 | ' 
1d2f8                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1d2f8     00 26 06 F6 | 	mov	local05, #0
1d2fc     10 4E 85 F1 | 	sub	fp, #16
1d300     97 2A 48 FB | 	callpa	#(@LR__3320-@LR__3318)>>2,fcache_load_ptr_
1d304                 | LR__3318
1d304     15 27 12 F2 | 	cmp	local05, local07 wc
1d308     4C 00 90 3D |  if_ae	jmp	#LR__3321
1d30c     13 29 02 F6 | 	mov	local06, local05
1d310     0F 29 02 F1 | 	add	local06, local01
1d314     14 29 C2 FA | 	rdbyte	local06, local06
1d318     20 28 0E F2 | 	cmp	local06, #32 wz
1d31c     38 00 90 AD |  if_e	jmp	#LR__3321
1d320     13 13 02 F6 | 	mov	arg01, local05
1d324     0F 13 02 F1 | 	add	arg01, local01
1d328     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1d32c     00 FA 05 56 |  if_ne	mov	result1, #0
1d330                 | ' 
1d330                 | ' 	return 0;
1d330     00 FA 05 A6 |  if_e	mov	result1, #0
1d334     00 FA 0D F2 | 	cmp	result1, #0 wz
1d338     14 00 90 AD |  if_e	jmp	#LR__3319
1d33c     15 29 02 F6 | 	mov	local06, local07
1d340     01 28 86 F1 | 	sub	local06, #1
1d344     14 27 0A F2 | 	cmp	local05, local06 wz
1d348     0C 00 90 AD |  if_e	jmp	#LR__3321
1d34c     01 26 06 F1 | 	add	local05, #1
1d350                 | LR__3319
1d350     01 26 06 F1 | 	add	local05, #1
1d354     AC FF 9F FD | 	jmp	#LR__3318
1d358                 | LR__3320
1d358                 | LR__3321
1d358     97 20 48 FB | 	callpa	#(@LR__3325-@LR__3322)>>2,fcache_load_ptr_
1d35c                 | ' 			j++;
1d35c                 | ' 		}
1d35c                 | ' 	}
1d35c                 | ' 	do {
1d35c                 | LR__3322
1d35c     13 29 02 F6 | 	mov	local06, local05
1d360     0F 29 02 F1 | 	add	local06, local01
1d364     08 2A 16 F2 | 	cmp	local07, #8 wc
1d368     01 26 06 F1 | 	add	local05, #1
1d36c     1C 00 90 3D |  if_ae	jmp	#LR__3323
1d370     15 25 02 F6 | 	mov	local04, local07
1d374     10 4E 05 F1 | 	add	fp, #16
1d378     A7 24 02 F1 | 	add	local04, fp
1d37c     12 2D C2 FA | 	rdbyte	local08, local04
1d380     01 2A 06 F1 | 	add	local07, #1
1d384     10 4E 85 F1 | 	sub	fp, #16
1d388     04 00 90 FD | 	jmp	#LR__3324
1d38c                 | LR__3323
1d38c     20 2C 06 F6 | 	mov	local08, #32
1d390                 | LR__3324
1d390     14 2D 42 FC | 	wrbyte	local08, local06
1d394     08 26 16 F2 | 	cmp	local05, #8 wc
1d398     C0 FF 9F CD |  if_b	jmp	#LR__3322
1d39c                 | LR__3325
1d39c     A7 F0 03 F6 | 	mov	ptra, fp
1d3a0     B2 00 A0 FD | 	call	#popregs_
1d3a4                 | _fatfs_cc_gen_numname_ret
1d3a4     2D 00 64 FD | 	ret
1d3a8                 | 
1d3a8                 | _fatfs_cc_sum_sfn
1d3a8     00 00 06 F6 | 	mov	_var01, #0
1d3ac                 | ' )
1d3ac                 | ' {
1d3ac                 | ' 	BYTE sum = 0;
1d3ac                 | ' 	UINT n = 11;
1d3ac                 | ' 
1d3ac                 | ' 	do {
1d3ac     97 12 48 FB | 	callpa	#(@LR__3332-@LR__3330)>>2,fcache_load_ptr_
1d3b0                 | LR__3330
1d3b0     0B 10 DC FC | 	rep	@LR__3333, #11
1d3b4                 | LR__3331
1d3b4     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1d3b8     01 FA 45 F0 | 	shr	result1, #1
1d3bc     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1d3c0     07 00 66 F0 | 	shl	_var01, #7
1d3c4     00 FB 01 F1 | 	add	result1, _var01
1d3c8     09 01 C2 FA | 	rdbyte	_var01, arg01
1d3cc     FD 00 02 F1 | 	add	_var01, result1
1d3d0     01 12 06 F1 | 	add	arg01, #1
1d3d4                 | LR__3332
1d3d4                 | LR__3333
1d3d4                 | ' 	return sum;
1d3d4     00 FB 01 F6 | 	mov	result1, _var01
1d3d8                 | _fatfs_cc_sum_sfn_ret
1d3d8     2D 00 64 FD | 	ret
1d3dc                 | 
1d3dc                 | _fatfs_cc_dir_read
1d3dc     0C 4A 05 F6 | 	mov	COUNT_, #12
1d3e0     A8 00 A0 FD | 	call	#pushregs_
1d3e4     09 1F 02 F6 | 	mov	local01, arg01
1d3e8     0A 21 02 F6 | 	mov	local02, arg02
1d3ec     04 22 06 F6 | 	mov	local03, #4
1d3f0     0F 25 02 FB | 	rdlong	local04, local01
1d3f4     FF 26 06 F6 | 	mov	local05, #255
1d3f8     FF 28 06 F6 | 	mov	local06, #255
1d3fc                 | ' )
1d3fc                 | ' {
1d3fc                 | ' 	FRESULT res = FR_NO_FILE;
1d3fc                 | ' 	FATFS *fs = dp->obj.fs;
1d3fc                 | ' 	BYTE attr, b;
1d3fc                 | ' 
1d3fc                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1d3fc                 | ' 
1d3fc                 | ' 
1d3fc                 | ' 	while (dp->sect) {
1d3fc                 | LR__3340
1d3fc     18 1E 06 F1 | 	add	local01, #24
1d400     0F FB 09 FB | 	rdlong	result1, local01 wz
1d404     18 1E 86 F1 | 	sub	local01, #24
1d408     AC 01 90 AD |  if_e	jmp	#LR__3350
1d40c     18 1E 06 F1 | 	add	local01, #24
1d410     0F 15 02 FB | 	rdlong	arg02, local01
1d414     18 1E 86 F1 | 	sub	local01, #24
1d418     12 13 02 F6 | 	mov	arg01, local04
1d41c     AC ED BF FD | 	call	#_fatfs_cc_move_window
1d420     FD 22 0A F6 | 	mov	local03, result1 wz
1d424     90 01 90 5D |  if_ne	jmp	#LR__3350
1d428     1C 1E 06 F1 | 	add	local01, #28
1d42c     0F FB 01 FB | 	rdlong	result1, local01
1d430     1C 1E 86 F1 | 	sub	local01, #28
1d434     FD 2A C2 FA | 	rdbyte	local07, result1
1d438     15 FB 01 F6 | 	mov	result1, local07
1d43c     07 FA 4D F7 | 	zerox	result1, #7 wz
1d440     04 22 06 A6 |  if_e	mov	local03, #4
1d444                 | ' 			res = FR_NO_FILE; break;
1d444     70 01 90 AD |  if_e	jmp	#LR__3350
1d448     1C 1E 06 F1 | 	add	local01, #28
1d44c     0F 2D 02 FB | 	rdlong	local08, local01
1d450     0B 2C 06 F1 | 	add	local08, #11
1d454     16 2F C2 FA | 	rdbyte	local09, local08
1d458     3F 2E 06 F5 | 	and	local09, #63
1d45c     16 1E 86 F1 | 	sub	local01, #22
1d460     0F 2F 42 FC | 	wrbyte	local09, local01
1d464     06 1E 86 F1 | 	sub	local01, #6
1d468     15 FB E1 F8 | 	getbyte	result1, local07, #0
1d46c     E5 FA 0D F2 | 	cmp	result1, #229 wz
1d470     15 2D 02 56 |  if_ne	mov	local08, local07
1d474     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1d478     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1d47c     1C 00 90 AD |  if_e	jmp	#LR__3341
1d480     00 30 06 F6 | 	mov	local10, #0
1d484     17 2D E2 F8 | 	getbyte	local08, local09, #0
1d488     20 2C 26 F5 | 	andn	local08, #32
1d48c     08 2C 0E F2 | 	cmp	local08, #8 wz
1d490     01 30 06 A6 |  if_e	mov	local10, #1
1d494     10 31 0A F2 | 	cmp	local10, local02 wz
1d498     08 00 90 AD |  if_e	jmp	#LR__3342
1d49c                 | LR__3341
1d49c     FF 26 06 F6 | 	mov	local05, #255
1d4a0     00 01 90 FD | 	jmp	#LR__3349
1d4a4                 | LR__3342
1d4a4     17 2F E2 F8 | 	getbyte	local09, local09, #0
1d4a8     0F 2E 0E F2 | 	cmp	local09, #15 wz
1d4ac     B4 00 90 5D |  if_ne	jmp	#LR__3346
1d4b0     15 33 E2 F8 | 	getbyte	local11, local07, #0
1d4b4     40 32 CE F7 | 	test	local11, #64 wz
1d4b8     30 00 90 AD |  if_e	jmp	#LR__3343
1d4bc     1C 1E 06 F1 | 	add	local01, #28
1d4c0     0F 33 02 FB | 	rdlong	local11, local01
1d4c4     0D 32 06 F1 | 	add	local11, #13
1d4c8     19 29 C2 FA | 	rdbyte	local06, local11
1d4cc     15 2B E2 F8 | 	getbyte	local07, local07, #0
1d4d0     BF 2A 06 F5 | 	and	local07, #191
1d4d4     15 27 02 F6 | 	mov	local05, local07
1d4d8     0C 1E 86 F1 | 	sub	local01, #12
1d4dc     0F 33 02 FB | 	rdlong	local11, local01
1d4e0     1C 1E 06 F1 | 	add	local01, #28
1d4e4     0F 33 62 FC | 	wrlong	local11, local01
1d4e8     2C 1E 86 F1 | 	sub	local01, #44
1d4ec                 | LR__3343
1d4ec     15 2D E2 F8 | 	getbyte	local08, local07, #0
1d4f0     13 31 E2 F8 | 	getbyte	local10, local05, #0
1d4f4     18 2D 0A F2 | 	cmp	local08, local10 wz
1d4f8     5C 00 90 5D |  if_ne	jmp	#LR__3344
1d4fc     14 31 E2 F8 | 	getbyte	local10, local06, #0
1d500     1C 1E 06 F1 | 	add	local01, #28
1d504     0F 2F 02 FB | 	rdlong	local09, local01
1d508     1C 1E 86 F1 | 	sub	local01, #28
1d50c     0D 2E 06 F1 | 	add	local09, #13
1d510     17 2D C2 FA | 	rdbyte	local08, local09
1d514     16 2F E2 F8 | 	getbyte	local09, local08, #0
1d518     17 31 0A F2 | 	cmp	local10, local09 wz
1d51c     38 00 90 5D |  if_ne	jmp	#LR__3344
1d520     0C 24 06 F1 | 	add	local04, #12
1d524     12 13 02 FB | 	rdlong	arg01, local04
1d528     0C 24 86 F1 | 	sub	local04, #12
1d52c     1C 1E 06 F1 | 	add	local01, #28
1d530     0F 35 02 FB | 	rdlong	local12, local01
1d534     1C 1E 86 F1 | 	sub	local01, #28
1d538     1A 15 02 F6 | 	mov	arg02, local12
1d53c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1d540     00 FA 4D F2 | 	cmps	result1, #0 wz
1d544     13 35 02 56 |  if_ne	mov	local12, local05
1d548     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1d54c     01 34 86 51 |  if_ne	sub	local12, #1
1d550     1A 33 02 56 |  if_ne	mov	local11, local12
1d554     04 00 90 5D |  if_ne	jmp	#LR__3345
1d558                 | LR__3344
1d558     FF 32 06 F6 | 	mov	local11, #255
1d55c                 | LR__3345
1d55c     19 27 02 F6 | 	mov	local05, local11
1d560     40 00 90 FD | 	jmp	#LR__3348
1d564                 | LR__3346
1d564     13 33 02 F6 | 	mov	local11, local05
1d568     07 32 4E F7 | 	zerox	local11, #7 wz
1d56c     20 00 90 5D |  if_ne	jmp	#LR__3347
1d570     14 29 E2 F8 | 	getbyte	local06, local06, #0
1d574     1C 1E 06 F1 | 	add	local01, #28
1d578     0F 13 02 FB | 	rdlong	arg01, local01
1d57c     1C 1E 86 F1 | 	sub	local01, #28
1d580     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1d584     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d588     FD 28 0A F2 | 	cmp	local06, result1 wz
1d58c     28 00 90 AD |  if_e	jmp	#LR__3350
1d590                 | LR__3347
1d590     2C 1E 06 F1 | 	add	local01, #44
1d594     FF FF FF FF 
1d598     0F FF 6B FC | 	wrlong	##-1, local01
1d59c     2C 1E 86 F1 | 	sub	local01, #44
1d5a0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1d5a0                 | ' 					}
1d5a0                 | ' 					break;
1d5a0     14 00 90 FD | 	jmp	#LR__3350
1d5a4                 | LR__3348
1d5a4                 | LR__3349
1d5a4     0F 13 02 F6 | 	mov	arg01, local01
1d5a8     00 14 06 F6 | 	mov	arg02, #0
1d5ac     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1d5b0     FD 22 0A F6 | 	mov	local03, result1 wz
1d5b4     44 FE 9F AD |  if_e	jmp	#LR__3340
1d5b8                 | LR__3350
1d5b8     00 22 0E F2 | 	cmp	local03, #0 wz
1d5bc     18 1E 06 51 |  if_ne	add	local01, #24
1d5c0     0F 01 68 5C |  if_ne	wrlong	#0, local01
1d5c4                 | ' 	return res;
1d5c4     11 FB 01 F6 | 	mov	result1, local03
1d5c8     A7 F0 03 F6 | 	mov	ptra, fp
1d5cc     B2 00 A0 FD | 	call	#popregs_
1d5d0                 | _fatfs_cc_dir_read_ret
1d5d0     2D 00 64 FD | 	ret
1d5d4                 | 
1d5d4                 | _fatfs_cc_dir_find
1d5d4     0B 4A 05 F6 | 	mov	COUNT_, #11
1d5d8     A8 00 A0 FD | 	call	#pushregs_
1d5dc     09 1F 02 F6 | 	mov	local01, arg01
1d5e0     0F 21 02 FB | 	rdlong	local02, local01
1d5e4     0F 13 02 F6 | 	mov	arg01, local01
1d5e8     00 14 06 F6 | 	mov	arg02, #0
1d5ec     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1d5f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1d5f4     18 02 90 5D |  if_ne	jmp	#LR__3372
1d5f8     FF 22 06 F6 | 	mov	local03, #255
1d5fc     FF 24 06 F6 | 	mov	local04, #255
1d600     2C 1E 06 F1 | 	add	local01, #44
1d604     FF FF FF FF 
1d608     0F FF 6B FC | 	wrlong	##-1, local01
1d60c     2C 1E 86 F1 | 	sub	local01, #44
1d610                 | ' #line 2404 "ff.c"
1d610                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1d610                 | ' 
1d610                 | ' 	do {
1d610                 | LR__3360
1d610     18 1E 06 F1 | 	add	local01, #24
1d614     0F 15 02 FB | 	rdlong	arg02, local01
1d618     18 1E 86 F1 | 	sub	local01, #24
1d61c     10 13 02 F6 | 	mov	arg01, local02
1d620     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1d624     FD 26 0A F6 | 	mov	local05, result1 wz
1d628     E0 01 90 5D |  if_ne	jmp	#LR__3371
1d62c     1C 1E 06 F1 | 	add	local01, #28
1d630     0F 17 02 FB | 	rdlong	arg03, local01
1d634     1C 1E 86 F1 | 	sub	local01, #28
1d638     0B 29 C2 FA | 	rdbyte	local06, arg03
1d63c     14 17 02 F6 | 	mov	arg03, local06
1d640     07 16 4E F7 | 	zerox	arg03, #7 wz
1d644     04 26 06 A6 |  if_e	mov	local05, #4
1d648     C0 01 90 AD |  if_e	jmp	#LR__3371
1d64c     1C 1E 06 F1 | 	add	local01, #28
1d650     0F 2B 02 FB | 	rdlong	local07, local01
1d654     15 17 02 F6 | 	mov	arg03, local07
1d658     0B 16 06 F1 | 	add	arg03, #11
1d65c     0B 2D C2 FA | 	rdbyte	local08, arg03
1d660     3F 2C 06 F5 | 	and	local08, #63
1d664     16 1E 86 F1 | 	sub	local01, #22
1d668     0F 2D 42 FC | 	wrbyte	local08, local01
1d66c     06 1E 86 F1 | 	sub	local01, #6
1d670     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1d674     E5 16 0E F2 | 	cmp	arg03, #229 wz
1d678     18 00 90 AD |  if_e	jmp	#LR__3361
1d67c     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1d680     08 16 CE F7 | 	test	arg03, #8 wz
1d684     16 2B 02 56 |  if_ne	mov	local07, local08
1d688     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1d68c     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1d690     18 00 90 AD |  if_e	jmp	#LR__3362
1d694                 | LR__3361
1d694     FF 24 06 F6 | 	mov	local04, #255
1d698     2C 1E 06 F1 | 	add	local01, #44
1d69c     FF FF FF FF 
1d6a0     0F FF 6B FC | 	wrlong	##-1, local01
1d6a4     2C 1E 86 F1 | 	sub	local01, #44
1d6a8     4C 01 90 FD | 	jmp	#LR__3370
1d6ac                 | LR__3362
1d6ac     16 2D E2 F8 | 	getbyte	local08, local08, #0
1d6b0     0F 2C 0E F2 | 	cmp	local08, #15 wz
1d6b4     C8 00 90 5D |  if_ne	jmp	#LR__3366
1d6b8     2B 1E 06 F1 | 	add	local01, #43
1d6bc     0F 2D C2 FA | 	rdbyte	local08, local01
1d6c0     2B 1E 86 F1 | 	sub	local01, #43
1d6c4     40 2C CE F7 | 	test	local08, #64 wz
1d6c8     2C 01 90 5D |  if_ne	jmp	#LR__3369
1d6cc     14 2F E2 F8 | 	getbyte	local09, local06, #0
1d6d0     40 2E CE F7 | 	test	local09, #64 wz
1d6d4     30 00 90 AD |  if_e	jmp	#LR__3363
1d6d8     1C 1E 06 F1 | 	add	local01, #28
1d6dc     0F 2F 02 FB | 	rdlong	local09, local01
1d6e0     0D 2E 06 F1 | 	add	local09, #13
1d6e4     17 23 C2 FA | 	rdbyte	local03, local09
1d6e8     14 29 E2 F8 | 	getbyte	local06, local06, #0
1d6ec     BF 28 06 F5 | 	and	local06, #191
1d6f0     14 25 02 F6 | 	mov	local04, local06
1d6f4     0C 1E 86 F1 | 	sub	local01, #12
1d6f8     0F 2F 02 FB | 	rdlong	local09, local01
1d6fc     1C 1E 06 F1 | 	add	local01, #28
1d700     0F 2F 62 FC | 	wrlong	local09, local01
1d704     2C 1E 86 F1 | 	sub	local01, #44
1d708                 | LR__3363
1d708     14 31 E2 F8 | 	getbyte	local10, local06, #0
1d70c     12 2B E2 F8 | 	getbyte	local07, local04, #0
1d710     15 31 0A F2 | 	cmp	local10, local07 wz
1d714     5C 00 90 5D |  if_ne	jmp	#LR__3364
1d718     11 2D E2 F8 | 	getbyte	local08, local03, #0
1d71c     1C 1E 06 F1 | 	add	local01, #28
1d720     0F 2B 02 FB | 	rdlong	local07, local01
1d724     1C 1E 86 F1 | 	sub	local01, #28
1d728     0D 2A 06 F1 | 	add	local07, #13
1d72c     15 29 C2 FA | 	rdbyte	local06, local07
1d730     14 2B E2 F8 | 	getbyte	local07, local06, #0
1d734     15 2D 0A F2 | 	cmp	local08, local07 wz
1d738     38 00 90 5D |  if_ne	jmp	#LR__3364
1d73c     0C 20 06 F1 | 	add	local02, #12
1d740     10 13 02 FB | 	rdlong	arg01, local02
1d744     0C 20 86 F1 | 	sub	local02, #12
1d748     1C 1E 06 F1 | 	add	local01, #28
1d74c     0F 33 02 FB | 	rdlong	local11, local01
1d750     1C 1E 86 F1 | 	sub	local01, #28
1d754     19 15 02 F6 | 	mov	arg02, local11
1d758     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1d75c     00 FA 4D F2 | 	cmps	result1, #0 wz
1d760     12 33 02 56 |  if_ne	mov	local11, local04
1d764     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1d768     01 32 86 51 |  if_ne	sub	local11, #1
1d76c     19 2F 02 56 |  if_ne	mov	local09, local11
1d770     04 00 90 5D |  if_ne	jmp	#LR__3365
1d774                 | LR__3364
1d774     FF 2E 06 F6 | 	mov	local09, #255
1d778                 | LR__3365
1d778     17 25 02 F6 | 	mov	local04, local09
1d77c     78 00 90 FD | 	jmp	#LR__3369
1d780                 | LR__3366
1d780     12 2F 02 F6 | 	mov	local09, local04
1d784     07 2E 4E F7 | 	zerox	local09, #7 wz
1d788     20 00 90 5D |  if_ne	jmp	#LR__3367
1d78c     11 31 E2 F8 | 	getbyte	local10, local03, #0
1d790     1C 1E 06 F1 | 	add	local01, #28
1d794     0F 13 02 FB | 	rdlong	arg01, local01
1d798     1C 1E 86 F1 | 	sub	local01, #28
1d79c     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1d7a0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d7a4     FD 30 0A F2 | 	cmp	local10, result1 wz
1d7a8     60 00 90 AD |  if_e	jmp	#LR__3371
1d7ac                 | LR__3367
1d7ac     2B 1E 06 F1 | 	add	local01, #43
1d7b0     0F 2F C2 FA | 	rdbyte	local09, local01
1d7b4     2B 1E 86 F1 | 	sub	local01, #43
1d7b8     01 2E CE F7 | 	test	local09, #1 wz
1d7bc     24 00 90 5D |  if_ne	jmp	#LR__3368
1d7c0     1C 1E 06 F1 | 	add	local01, #28
1d7c4     0F 13 02 FB | 	rdlong	arg01, local01
1d7c8     04 1E 06 F1 | 	add	local01, #4
1d7cc     0F 15 02 F6 | 	mov	arg02, local01
1d7d0     20 1E 86 F1 | 	sub	local01, #32
1d7d4     0B 16 06 F6 | 	mov	arg03, #11
1d7d8     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1d7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d7e0     28 00 90 AD |  if_e	jmp	#LR__3371
1d7e4                 | LR__3368
1d7e4     FF 24 06 F6 | 	mov	local04, #255
1d7e8     2C 1E 06 F1 | 	add	local01, #44
1d7ec     FF FF FF FF 
1d7f0     0F FF 6B FC | 	wrlong	##-1, local01
1d7f4     2C 1E 86 F1 | 	sub	local01, #44
1d7f8                 | LR__3369
1d7f8                 | LR__3370
1d7f8     0F 13 02 F6 | 	mov	arg01, local01
1d7fc     00 14 06 F6 | 	mov	arg02, #0
1d800     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1d804     FD 26 0A F6 | 	mov	local05, result1 wz
1d808     04 FE 9F AD |  if_e	jmp	#LR__3360
1d80c                 | LR__3371
1d80c                 | ' 
1d80c                 | ' 	return res;
1d80c     13 FB 01 F6 | 	mov	result1, local05
1d810                 | LR__3372
1d810     A7 F0 03 F6 | 	mov	ptra, fp
1d814     B2 00 A0 FD | 	call	#popregs_
1d818                 | _fatfs_cc_dir_find_ret
1d818     2D 00 64 FD | 	ret
1d81c                 | 
1d81c                 | _fatfs_cc_dir_register
1d81c     0A 4A 05 F6 | 	mov	COUNT_, #10
1d820     A8 00 A0 FD | 	call	#pushregs_
1d824     2C F0 07 F1 | 	add	ptra, #44
1d828     04 4E 05 F1 | 	add	fp, #4
1d82c     A7 12 62 FC | 	wrlong	arg01, fp
1d830     09 1F 02 FB | 	rdlong	local01, arg01
1d834     08 4E 05 F1 | 	add	fp, #8
1d838     A7 1E 62 FC | 	wrlong	local01, fp
1d83c     08 4E 85 F1 | 	sub	fp, #8
1d840     A7 20 02 FB | 	rdlong	local02, fp
1d844     04 4E 85 F1 | 	sub	fp, #4
1d848     2B 20 06 F1 | 	add	local02, #43
1d84c     10 21 C2 FA | 	rdbyte	local02, local02
1d850     A0 20 CE F7 | 	test	local02, #160 wz
1d854     06 FA 05 56 |  if_ne	mov	result1, #6
1d858     F8 03 90 5D |  if_ne	jmp	#LR__3395
1d85c                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1d85c     14 4E 05 F1 | 	add	fp, #20
1d860     A7 00 68 FC | 	wrlong	#0, fp
1d864     14 4E 85 F1 | 	sub	fp, #20
1d868     97 28 48 FB | 	callpa	#(@LR__3381-@LR__3380)>>2,fcache_load_ptr_
1d86c                 | LR__3380
1d86c     0C 4E 05 F1 | 	add	fp, #12
1d870     A7 20 02 FB | 	rdlong	local02, fp
1d874     0C 20 06 F1 | 	add	local02, #12
1d878     10 23 02 FB | 	rdlong	local03, local02
1d87c     08 4E 05 F1 | 	add	fp, #8
1d880     A7 24 02 FB | 	rdlong	local04, fp
1d884     14 4E 85 F1 | 	sub	fp, #20
1d888     01 24 66 F0 | 	shl	local04, #1
1d88c     11 25 02 F1 | 	add	local04, local03
1d890     12 21 EA FA | 	rdword	local02, local04 wz
1d894     24 00 90 AD |  if_e	jmp	#LR__3382
1d898     14 4E 05 F1 | 	add	fp, #20
1d89c     A7 26 02 FB | 	rdlong	local05, fp
1d8a0     13 29 02 F6 | 	mov	local06, local05
1d8a4     13 2B 02 F6 | 	mov	local07, local05
1d8a8     15 2D 02 F6 | 	mov	local08, local07
1d8ac     01 2C 06 F1 | 	add	local08, #1
1d8b0     A7 2C 62 FC | 	wrlong	local08, fp
1d8b4     14 4E 85 F1 | 	sub	fp, #20
1d8b8     B0 FF 9F FD | 	jmp	#LR__3380
1d8bc                 | LR__3381
1d8bc                 | LR__3382
1d8bc     1C 4E 05 F1 | 	add	fp, #28
1d8c0     A7 12 02 F6 | 	mov	arg01, fp
1d8c4     18 4E 85 F1 | 	sub	fp, #24
1d8c8     A7 14 02 FB | 	rdlong	arg02, fp
1d8cc     04 4E 85 F1 | 	sub	fp, #4
1d8d0     20 14 06 F1 | 	add	arg02, #32
1d8d4     0C 16 06 F6 | 	mov	arg03, #12
1d8d8     58 75 BF FD | 	call	#__system____builtin_memmove
1d8dc     27 4E 05 F1 | 	add	fp, #39
1d8e0     A7 2E C2 FA | 	rdbyte	local09, fp
1d8e4     27 4E 85 F1 | 	sub	fp, #39
1d8e8     01 2E CE F7 | 	test	local09, #1 wz
1d8ec     F4 00 90 AD |  if_e	jmp	#LR__3385
1d8f0     04 4E 05 F1 | 	add	fp, #4
1d8f4     A7 30 02 FB | 	rdlong	local10, fp
1d8f8     2B 30 06 F1 | 	add	local10, #43
1d8fc     18 81 48 FC | 	wrbyte	#64, local10
1d900                 | ' 		dp->fn[ 11 ] =  0x40 ;
1d900                 | ' 		for (n = 1; n < 100; n++) {
1d900     0C 4E 05 F1 | 	add	fp, #12
1d904     A7 02 68 FC | 	wrlong	#1, fp
1d908     10 4E 85 F1 | 	sub	fp, #16
1d90c                 | LR__3383
1d90c     10 4E 05 F1 | 	add	fp, #16
1d910     A7 20 02 FB | 	rdlong	local02, fp
1d914     10 4E 85 F1 | 	sub	fp, #16
1d918     64 20 16 F2 | 	cmp	local02, #100 wc
1d91c     70 00 90 3D |  if_ae	jmp	#LR__3384
1d920     04 4E 05 F1 | 	add	fp, #4
1d924     A7 12 02 FB | 	rdlong	arg01, fp
1d928     20 12 06 F1 | 	add	arg01, #32
1d92c     18 4E 05 F1 | 	add	fp, #24
1d930     A7 14 02 F6 | 	mov	arg02, fp
1d934     10 4E 85 F1 | 	sub	fp, #16
1d938     A7 30 02 FB | 	rdlong	local10, fp
1d93c     0C 30 06 F1 | 	add	local10, #12
1d940     18 17 02 FB | 	rdlong	arg03, local10
1d944     04 4E 05 F1 | 	add	fp, #4
1d948     A7 18 02 FB | 	rdlong	arg04, fp
1d94c     10 4E 85 F1 | 	sub	fp, #16
1d950     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1d954     04 4E 05 F1 | 	add	fp, #4
1d958     A7 12 02 FB | 	rdlong	arg01, fp
1d95c     04 4E 85 F1 | 	sub	fp, #4
1d960     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1d964     08 4E 05 F1 | 	add	fp, #8
1d968     A7 FA 61 FC | 	wrlong	result1, fp
1d96c     00 FA 4D F2 | 	cmps	result1, #0 wz
1d970     08 4E 85 F1 | 	sub	fp, #8
1d974     18 00 90 5D |  if_ne	jmp	#LR__3384
1d978     10 4E 05 F1 | 	add	fp, #16
1d97c     A7 30 02 FB | 	rdlong	local10, fp
1d980     01 30 06 F1 | 	add	local10, #1
1d984     A7 30 62 FC | 	wrlong	local10, fp
1d988     10 4E 85 F1 | 	sub	fp, #16
1d98c     7C FF 9F FD | 	jmp	#LR__3383
1d990                 | LR__3384
1d990     10 4E 05 F1 | 	add	fp, #16
1d994     A7 30 02 FB | 	rdlong	local10, fp
1d998     10 4E 85 F1 | 	sub	fp, #16
1d99c     64 30 0E F2 | 	cmp	local10, #100 wz
1d9a0     07 FA 05 A6 |  if_e	mov	result1, #7
1d9a4     AC 02 90 AD |  if_e	jmp	#LR__3395
1d9a8     08 4E 05 F1 | 	add	fp, #8
1d9ac     A7 30 02 FB | 	rdlong	local10, fp
1d9b0     08 4E 85 F1 | 	sub	fp, #8
1d9b4     04 30 0E F2 | 	cmp	local10, #4 wz
1d9b8     08 4E 05 51 |  if_ne	add	fp, #8
1d9bc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1d9c0     08 4E 85 51 |  if_ne	sub	fp, #8
1d9c4     8C 02 90 5D |  if_ne	jmp	#LR__3395
1d9c8     04 4E 05 F1 | 	add	fp, #4
1d9cc     A7 30 02 FB | 	rdlong	local10, fp
1d9d0     23 4E 05 F1 | 	add	fp, #35
1d9d4     A7 1E C2 FA | 	rdbyte	local01, fp
1d9d8     27 4E 85 F1 | 	sub	fp, #39
1d9dc     2B 30 06 F1 | 	add	local10, #43
1d9e0     18 1F 42 FC | 	wrbyte	local01, local10
1d9e4                 | LR__3385
1d9e4     27 4E 05 F1 | 	add	fp, #39
1d9e8     A7 20 C2 FA | 	rdbyte	local02, fp
1d9ec     27 4E 85 F1 | 	sub	fp, #39
1d9f0     02 20 CE F7 | 	test	local02, #2 wz
1d9f4     20 00 90 AD |  if_e	jmp	#LR__3386
1d9f8     14 4E 05 F1 | 	add	fp, #20
1d9fc     A7 30 02 FB | 	rdlong	local10, fp
1da00     0C 30 06 F1 | 	add	local10, #12
1da04     0D 30 16 FD | 	qdiv	local10, #13
1da08     14 4E 85 F1 | 	sub	fp, #20
1da0c     18 30 62 FD | 	getqx	local10
1da10     01 30 06 F1 | 	add	local10, #1
1da14     04 00 90 FD | 	jmp	#LR__3387
1da18                 | LR__3386
1da18     01 30 06 F6 | 	mov	local10, #1
1da1c                 | LR__3387
1da1c     18 4E 05 F1 | 	add	fp, #24
1da20     A7 30 62 FC | 	wrlong	local10, fp
1da24     14 4E 85 F1 | 	sub	fp, #20
1da28     A7 12 02 FB | 	rdlong	arg01, fp
1da2c     18 15 02 F6 | 	mov	arg02, local10
1da30     04 4E 85 F1 | 	sub	fp, #4
1da34     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1da38     08 4E 05 F1 | 	add	fp, #8
1da3c     A7 FA 61 FC | 	wrlong	result1, fp
1da40     08 4E 85 F1 | 	sub	fp, #8
1da44     00 FA 0D F2 | 	cmp	result1, #0 wz
1da48     38 01 90 5D |  if_ne	jmp	#LR__3392
1da4c     18 4E 05 F1 | 	add	fp, #24
1da50     A7 30 02 FB | 	rdlong	local10, fp
1da54     01 30 8E F1 | 	sub	local10, #1 wz
1da58     A7 30 62 FC | 	wrlong	local10, fp
1da5c     18 4E 85 F1 | 	sub	fp, #24
1da60     20 01 90 AD |  if_e	jmp	#LR__3392
1da64     04 4E 05 F1 | 	add	fp, #4
1da68     A7 30 02 FB | 	rdlong	local10, fp
1da6c     18 13 02 F6 | 	mov	arg01, local10
1da70     14 4E 05 F1 | 	add	fp, #20
1da74     A7 18 02 FB | 	rdlong	arg04, fp
1da78     18 4E 85 F1 | 	sub	fp, #24
1da7c     05 18 66 F0 | 	shl	arg04, #5
1da80     10 30 06 F1 | 	add	local10, #16
1da84     18 15 02 FB | 	rdlong	arg02, local10
1da88     0C 15 82 F1 | 	sub	arg02, arg04
1da8c     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1da90     08 4E 05 F1 | 	add	fp, #8
1da94     A7 FA 61 FC | 	wrlong	result1, fp
1da98     08 4E 85 F1 | 	sub	fp, #8
1da9c     00 FA 0D F2 | 	cmp	result1, #0 wz
1daa0     E0 00 90 5D |  if_ne	jmp	#LR__3391
1daa4     04 4E 05 F1 | 	add	fp, #4
1daa8     A7 12 02 FB | 	rdlong	arg01, fp
1daac     04 4E 85 F1 | 	sub	fp, #4
1dab0     20 12 06 F1 | 	add	arg01, #32
1dab4     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1dab8     FD 30 02 F6 | 	mov	local10, result1
1dabc     28 4E 05 F1 | 	add	fp, #40
1dac0     A7 30 42 FC | 	wrbyte	local10, fp
1dac4     28 4E 85 F1 | 	sub	fp, #40
1dac8                 | ' 			sum = sum_sfn(dp->fn);
1dac8                 | ' 			do {
1dac8                 | LR__3388
1dac8     0C 4E 05 F1 | 	add	fp, #12
1dacc     A7 12 02 FB | 	rdlong	arg01, fp
1dad0     08 4E 85 F1 | 	sub	fp, #8
1dad4     A7 1E 02 FB | 	rdlong	local01, fp
1dad8     04 4E 85 F1 | 	sub	fp, #4
1dadc     18 1E 06 F1 | 	add	local01, #24
1dae0     0F 15 02 FB | 	rdlong	arg02, local01
1dae4     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1dae8     08 4E 05 F1 | 	add	fp, #8
1daec     A7 FA 61 FC | 	wrlong	result1, fp
1daf0     00 FA 4D F2 | 	cmps	result1, #0 wz
1daf4     08 4E 85 F1 | 	sub	fp, #8
1daf8     88 00 90 5D |  if_ne	jmp	#LR__3390
1dafc     0C 4E 05 F1 | 	add	fp, #12
1db00     A7 20 02 FB | 	rdlong	local02, fp
1db04     0C 20 06 F1 | 	add	local02, #12
1db08     10 13 02 FB | 	rdlong	arg01, local02
1db0c     08 4E 85 F1 | 	sub	fp, #8
1db10     A7 1E 02 FB | 	rdlong	local01, fp
1db14     1C 1E 06 F1 | 	add	local01, #28
1db18     0F 15 02 FB | 	rdlong	arg02, local01
1db1c     14 4E 05 F1 | 	add	fp, #20
1db20     A7 16 02 FB | 	rdlong	arg03, fp
1db24     10 4E 05 F1 | 	add	fp, #16
1db28     A7 18 C2 FA | 	rdbyte	arg04, fp
1db2c     28 4E 85 F1 | 	sub	fp, #40
1db30     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1db34     0C 4E 05 F1 | 	add	fp, #12
1db38     A7 30 02 FB | 	rdlong	local10, fp
1db3c     03 30 06 F1 | 	add	local10, #3
1db40     18 03 48 FC | 	wrbyte	#1, local10
1db44     08 4E 85 F1 | 	sub	fp, #8
1db48     A7 12 02 FB | 	rdlong	arg01, fp
1db4c     04 4E 85 F1 | 	sub	fp, #4
1db50     00 14 06 F6 | 	mov	arg02, #0
1db54     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1db58     08 4E 05 F1 | 	add	fp, #8
1db5c     A7 FA 61 FC | 	wrlong	result1, fp
1db60     00 FA 4D F2 | 	cmps	result1, #0 wz
1db64     08 4E 85 F1 | 	sub	fp, #8
1db68     18 00 90 5D |  if_ne	jmp	#LR__3389
1db6c     18 4E 05 F1 | 	add	fp, #24
1db70     A7 30 02 FB | 	rdlong	local10, fp
1db74     01 30 8E F1 | 	sub	local10, #1 wz
1db78     A7 30 62 FC | 	wrlong	local10, fp
1db7c     18 4E 85 F1 | 	sub	fp, #24
1db80     44 FF 9F 5D |  if_ne	jmp	#LR__3388
1db84                 | LR__3389
1db84                 | LR__3390
1db84                 | LR__3391
1db84                 | LR__3392
1db84     08 4E 05 F1 | 	add	fp, #8
1db88     A7 30 0A FB | 	rdlong	local10, fp wz
1db8c     08 4E 85 F1 | 	sub	fp, #8
1db90     B4 00 90 5D |  if_ne	jmp	#LR__3394
1db94     0C 4E 05 F1 | 	add	fp, #12
1db98     A7 12 02 FB | 	rdlong	arg01, fp
1db9c     08 4E 85 F1 | 	sub	fp, #8
1dba0     A7 1E 02 FB | 	rdlong	local01, fp
1dba4     04 4E 85 F1 | 	sub	fp, #4
1dba8     18 1E 06 F1 | 	add	local01, #24
1dbac     0F 15 02 FB | 	rdlong	arg02, local01
1dbb0     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1dbb4     08 4E 05 F1 | 	add	fp, #8
1dbb8     A7 FA 61 FC | 	wrlong	result1, fp
1dbbc     08 4E 85 F1 | 	sub	fp, #8
1dbc0     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbc4     80 00 90 5D |  if_ne	jmp	#LR__3393
1dbc8     04 4E 05 F1 | 	add	fp, #4
1dbcc     A7 20 02 FB | 	rdlong	local02, fp
1dbd0     04 4E 85 F1 | 	sub	fp, #4
1dbd4     1C 20 06 F1 | 	add	local02, #28
1dbd8     10 13 02 FB | 	rdlong	arg01, local02
1dbdc     00 14 06 F6 | 	mov	arg02, #0
1dbe0     20 16 06 F6 | 	mov	arg03, #32
1dbe4     98 00 A0 FD | 	call	#\builtin_bytefill_
1dbe8     04 4E 05 F1 | 	add	fp, #4
1dbec     A7 14 02 FB | 	rdlong	arg02, fp
1dbf0     0A 1F 02 F6 | 	mov	local01, arg02
1dbf4     1C 1E 06 F1 | 	add	local01, #28
1dbf8     0F 13 02 FB | 	rdlong	arg01, local01
1dbfc     04 4E 85 F1 | 	sub	fp, #4
1dc00     20 14 06 F1 | 	add	arg02, #32
1dc04     0B 16 06 F6 | 	mov	arg03, #11
1dc08     28 72 BF FD | 	call	#__system____builtin_memmove
1dc0c     04 4E 05 F1 | 	add	fp, #4
1dc10     A7 2E 02 FB | 	rdlong	local09, fp
1dc14     17 31 02 F6 | 	mov	local10, local09
1dc18     1C 30 06 F1 | 	add	local10, #28
1dc1c     18 1F 02 FB | 	rdlong	local01, local10
1dc20     2B 2E 06 F1 | 	add	local09, #43
1dc24     17 31 C2 FA | 	rdbyte	local10, local09
1dc28     18 30 06 F5 | 	and	local10, #24
1dc2c     0C 1E 06 F1 | 	add	local01, #12
1dc30     0F 31 42 FC | 	wrbyte	local10, local01
1dc34     08 4E 05 F1 | 	add	fp, #8
1dc38     A7 30 02 FB | 	rdlong	local10, fp
1dc3c     0C 4E 85 F1 | 	sub	fp, #12
1dc40     03 30 06 F1 | 	add	local10, #3
1dc44     18 03 48 FC | 	wrbyte	#1, local10
1dc48                 | LR__3393
1dc48                 | LR__3394
1dc48                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1dc48                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1dc48                 | ' 
1dc48                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1dc48                 | ' 
1dc48                 | ' 			fs->wflag = 1;
1dc48                 | ' 		}
1dc48                 | ' 	}
1dc48                 | ' 
1dc48                 | ' 	return res;
1dc48     08 4E 05 F1 | 	add	fp, #8
1dc4c     A7 FA 01 FB | 	rdlong	result1, fp
1dc50     08 4E 85 F1 | 	sub	fp, #8
1dc54                 | LR__3395
1dc54     A7 F0 03 F6 | 	mov	ptra, fp
1dc58     B2 00 A0 FD | 	call	#popregs_
1dc5c                 | _fatfs_cc_dir_register_ret
1dc5c     2D 00 64 FD | 	ret
1dc60                 | 
1dc60                 | _fatfs_cc_dir_remove
1dc60     05 4A 05 F6 | 	mov	COUNT_, #5
1dc64     A8 00 A0 FD | 	call	#pushregs_
1dc68     09 1F 02 F6 | 	mov	local01, arg01
1dc6c     0F 21 02 FB | 	rdlong	local02, local01
1dc70     10 1E 06 F1 | 	add	local01, #16
1dc74     0F 23 02 FB | 	rdlong	local03, local01
1dc78     1C 1E 06 F1 | 	add	local01, #28
1dc7c     0F 15 02 FB | 	rdlong	arg02, local01
1dc80     2C 1E 86 F1 | 	sub	local01, #44
1dc84     FF FF 7F FF 
1dc88     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1dc8c     00 24 06 A6 |  if_e	mov	local04, #0
1dc90     18 00 90 AD |  if_e	jmp	#LR__3400
1dc94     0F 13 02 F6 | 	mov	arg01, local01
1dc98     2C 1E 06 F1 | 	add	local01, #44
1dc9c     0F 15 02 FB | 	rdlong	arg02, local01
1dca0     2C 1E 86 F1 | 	sub	local01, #44
1dca4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1dca8     FD 24 02 F6 | 	mov	local04, result1
1dcac                 | LR__3400
1dcac     12 27 0A F6 | 	mov	local05, local04 wz
1dcb0     64 00 90 5D |  if_ne	jmp	#LR__3403
1dcb4                 | ' 		do {
1dcb4                 | LR__3401
1dcb4     18 1E 06 F1 | 	add	local01, #24
1dcb8     0F 15 02 FB | 	rdlong	arg02, local01
1dcbc     18 1E 86 F1 | 	sub	local01, #24
1dcc0     10 13 02 F6 | 	mov	arg01, local02
1dcc4     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1dcc8     FD 26 0A F6 | 	mov	local05, result1 wz
1dccc     40 00 90 5D |  if_ne	jmp	#LR__3402
1dcd0     1C 1E 06 F1 | 	add	local01, #28
1dcd4     0F 25 02 FB | 	rdlong	local04, local01
1dcd8     12 CB 49 FC | 	wrbyte	#229, local04
1dcdc     03 20 06 F1 | 	add	local02, #3
1dce0     10 03 48 FC | 	wrbyte	#1, local02
1dce4     03 20 86 F1 | 	sub	local02, #3
1dce8     0C 1E 86 F1 | 	sub	local01, #12
1dcec     0F 25 02 FB | 	rdlong	local04, local01
1dcf0     10 1E 86 F1 | 	sub	local01, #16
1dcf4     11 25 12 F2 | 	cmp	local04, local03 wc
1dcf8     14 00 90 3D |  if_ae	jmp	#LR__3402
1dcfc     0F 13 02 F6 | 	mov	arg01, local01
1dd00     00 14 06 F6 | 	mov	arg02, #0
1dd04     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1dd08     FD 26 0A F6 | 	mov	local05, result1 wz
1dd0c     A4 FF 9F AD |  if_e	jmp	#LR__3401
1dd10                 | LR__3402
1dd10     04 26 0E F2 | 	cmp	local05, #4 wz
1dd14     02 26 06 A6 |  if_e	mov	local05, #2
1dd18                 | LR__3403
1dd18                 | ' 	}
1dd18                 | ' #line 2590 "ff.c"
1dd18                 | ' 	return res;
1dd18     13 FB 01 F6 | 	mov	result1, local05
1dd1c     A7 F0 03 F6 | 	mov	ptra, fp
1dd20     B2 00 A0 FD | 	call	#popregs_
1dd24                 | _fatfs_cc_dir_remove_ret
1dd24     2D 00 64 FD | 	ret
1dd28                 | 
1dd28                 | _fatfs_cc_get_fileinfo
1dd28     0F 4A 05 F6 | 	mov	COUNT_, #15
1dd2c     A8 00 A0 FD | 	call	#pushregs_
1dd30     09 1F 02 F6 | 	mov	local01, arg01
1dd34     0A 21 02 F6 | 	mov	local02, arg02
1dd38     0F 23 02 FB | 	rdlong	local03, local01
1dd3c     1C 20 06 F1 | 	add	local02, #28
1dd40     10 01 48 FC | 	wrbyte	#0, local02
1dd44     1C 20 86 F1 | 	sub	local02, #28
1dd48     18 1E 06 F1 | 	add	local01, #24
1dd4c     0F 25 0A FB | 	rdlong	local04, local01 wz
1dd50     18 1E 86 F1 | 	sub	local01, #24
1dd54     90 03 90 AD |  if_e	jmp	#LR__3424
1dd58     2C 1E 06 F1 | 	add	local01, #44
1dd5c     0F 25 02 FB | 	rdlong	local04, local01
1dd60     2C 1E 86 F1 | 	sub	local01, #44
1dd64     FF FF 7F FF 
1dd68     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1dd6c     D8 00 90 AD |  if_e	jmp	#LR__3413
1dd70     00 26 06 F6 | 	mov	local05, #0
1dd74     00 28 06 F6 | 	mov	local06, #0
1dd78     00 2A 06 F6 | 	mov	local07, #0
1dd7c                 | ' 			si = di = 0;
1dd7c                 | ' 			hs = 0;
1dd7c                 | ' 			while (fs->lfnbuf[si] != 0) {
1dd7c                 | LR__3410
1dd7c     0C 22 06 F1 | 	add	local03, #12
1dd80     11 25 02 FB | 	rdlong	local04, local03
1dd84     0C 22 86 F1 | 	sub	local03, #12
1dd88     14 2D 02 F6 | 	mov	local08, local06
1dd8c     01 2C 66 F0 | 	shl	local08, #1
1dd90     12 2D 02 F1 | 	add	local08, local04
1dd94     16 25 EA FA | 	rdword	local04, local08 wz
1dd98     90 00 90 AD |  if_e	jmp	#LR__3412
1dd9c     0C 22 06 F1 | 	add	local03, #12
1dda0     11 2F 02 FB | 	rdlong	local09, local03
1dda4     0C 22 86 F1 | 	sub	local03, #12
1dda8     14 31 02 F6 | 	mov	local10, local06
1ddac     01 30 66 F0 | 	shl	local10, #1
1ddb0     17 31 02 F1 | 	add	local10, local09
1ddb4     18 33 E2 FA | 	rdword	local11, local10
1ddb8     15 25 02 F6 | 	mov	local04, local07
1ddbc     0F 24 4E F7 | 	zerox	local04, #15 wz
1ddc0     01 28 06 F1 | 	add	local06, #1
1ddc4     24 00 90 5D |  if_ne	jmp	#LR__3411
1ddc8     19 35 32 F9 | 	getword	local12, local11, #0
1ddcc     6C 00 00 FF 
1ddd0     00 34 16 F2 | 	cmp	local12, ##55296 wc
1ddd4     14 00 90 CD |  if_b	jmp	#LR__3411
1ddd8     19 37 32 F9 | 	getword	local13, local11, #0
1dddc     70 00 00 FF 
1dde0     00 36 16 F2 | 	cmp	local13, ##57344 wc
1dde4     19 2B 02 C6 |  if_b	mov	local07, local11
1dde8                 | ' 					hs = wc; continue;
1dde8     90 FF 9F CD |  if_b	jmp	#LR__3410
1ddec                 | LR__3411
1ddec     15 13 32 F9 | 	getword	arg01, local07, #0
1ddf0     10 12 66 F0 | 	shl	arg01, #16
1ddf4     19 33 32 F9 | 	getword	local11, local11, #0
1ddf8     19 13 42 F5 | 	or	arg01, local11
1ddfc     13 15 02 F6 | 	mov	arg02, local05
1de00     1C 20 06 F1 | 	add	local02, #28
1de04     10 15 02 F1 | 	add	arg02, local02
1de08     FF 16 06 F6 | 	mov	arg03, #255
1de0c     13 17 82 F1 | 	sub	arg03, local05
1de10     1C 20 86 F1 | 	sub	local02, #28
1de14     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1de18     FD 38 0A F6 | 	mov	local14, result1 wz
1de1c     00 26 06 A6 |  if_e	mov	local05, #0
1de20     1C 27 02 51 |  if_ne	add	local05, local14
1de24     00 2A 06 56 |  if_ne	mov	local07, #0
1de28     50 FF 9F 5D |  if_ne	jmp	#LR__3410
1de2c                 | LR__3412
1de2c     15 25 02 F6 | 	mov	local04, local07
1de30     0F 24 4E F7 | 	zerox	local04, #15 wz
1de34     00 26 06 56 |  if_ne	mov	local05, #0
1de38     1C 20 06 F1 | 	add	local02, #28
1de3c     10 27 02 F1 | 	add	local05, local02
1de40     13 01 48 FC | 	wrbyte	#0, local05
1de44     1C 20 86 F1 | 	sub	local02, #28
1de48                 | LR__3413
1de48     00 26 06 F6 | 	mov	local05, #0
1de4c     00 28 06 F6 | 	mov	local06, #0
1de50                 | ' 			fno->fname[di] = 0;
1de50                 | ' 		}
1de50                 | ' 	}
1de50                 | ' 
1de50                 | ' 	si = di = 0;
1de50                 | ' 	while (si < 11) {
1de50                 | LR__3414
1de50     0B 28 16 F2 | 	cmp	local06, #11 wc
1de54     20 01 90 3D |  if_ae	jmp	#LR__3417
1de58     1C 1E 06 F1 | 	add	local01, #28
1de5c     0F 2F 02 FB | 	rdlong	local09, local01
1de60     1C 1E 86 F1 | 	sub	local01, #28
1de64     14 31 02 F6 | 	mov	local10, local06
1de68     17 31 02 F1 | 	add	local10, local09
1de6c     18 33 C2 FA | 	rdbyte	local11, local10
1de70     19 25 32 F9 | 	getword	local04, local11, #0
1de74     20 24 0E F2 | 	cmp	local04, #32 wz
1de78     01 28 06 F1 | 	add	local06, #1
1de7c     D0 FF 9F AD |  if_e	jmp	#LR__3414
1de80     19 25 32 F9 | 	getword	local04, local11, #0
1de84     05 24 0E F2 | 	cmp	local04, #5 wz
1de88     E5 32 06 A6 |  if_e	mov	local11, #229
1de8c     09 28 0E F2 | 	cmp	local06, #9 wz
1de90     20 00 90 5D |  if_ne	jmp	#LR__3415
1de94     0C 26 16 F2 | 	cmp	local05, #12 wc
1de98     18 00 90 3D |  if_ae	jmp	#LR__3415
1de9c     13 37 02 F6 | 	mov	local13, local05
1dea0     0C 20 06 F1 | 	add	local02, #12
1dea4     10 37 02 F1 | 	add	local13, local02
1dea8     1B 5D 48 FC | 	wrbyte	#46, local13
1deac     01 26 06 F1 | 	add	local05, #1
1deb0     0C 20 86 F1 | 	sub	local02, #12
1deb4                 | LR__3415
1deb4     19 13 32 F9 | 	getword	arg01, local11, #0
1deb8     07 12 4E F7 | 	zerox	arg01, #7 wz
1debc     00 FA 05 56 |  if_ne	mov	result1, #0
1dec0                 | ' 
1dec0                 | ' 	return 0;
1dec0     00 FA 05 A6 |  if_e	mov	result1, #0
1dec4     00 FA 0D F2 | 	cmp	result1, #0 wz
1dec8     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1decc     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1ded0     50 00 90 AD |  if_e	jmp	#LR__3416
1ded4     1C 1E 06 F1 | 	add	local01, #28
1ded8     0F 31 02 FB | 	rdlong	local10, local01
1dedc     1C 1E 86 F1 | 	sub	local01, #28
1dee0     14 2D 02 F6 | 	mov	local08, local06
1dee4     18 2D 02 F1 | 	add	local08, local10
1dee8     16 13 CA FA | 	rdbyte	arg01, local08 wz
1deec     00 FA 05 56 |  if_ne	mov	result1, #0
1def0                 | ' 
1def0                 | ' 	return 0;
1def0     00 FA 05 A6 |  if_e	mov	result1, #0
1def4     00 FA 0D F2 | 	cmp	result1, #0 wz
1def8     28 00 90 AD |  if_e	jmp	#LR__3416
1defc     19 33 32 F9 | 	getword	local11, local11, #0
1df00     08 32 66 F0 | 	shl	local11, #8
1df04     1C 1E 06 F1 | 	add	local01, #28
1df08     0F 39 02 FB | 	rdlong	local14, local01
1df0c     1C 1E 86 F1 | 	sub	local01, #28
1df10     14 2F 02 F6 | 	mov	local09, local06
1df14     1C 2F 02 F1 | 	add	local09, local14
1df18     17 35 C2 FA | 	rdbyte	local12, local09
1df1c     1A 33 42 F5 | 	or	local11, local12
1df20     01 28 06 F1 | 	add	local06, #1
1df24                 | LR__3416
1df24     19 13 02 F6 | 	mov	arg01, local11
1df28     01 00 00 FF 
1df2c     52 15 06 F6 | 	mov	arg02, ##850
1df30     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1df34     FD 32 02 F6 | 	mov	local11, result1
1df38     19 25 02 F6 | 	mov	local04, local11
1df3c     0F 24 4E F7 | 	zerox	local04, #15 wz
1df40     00 26 06 A6 |  if_e	mov	local05, #0
1df44     30 00 90 AD |  if_e	jmp	#LR__3417
1df48     19 13 32 F9 | 	getword	arg01, local11, #0
1df4c     13 15 02 F6 | 	mov	arg02, local05
1df50     0C 20 06 F1 | 	add	local02, #12
1df54     10 15 02 F1 | 	add	arg02, local02
1df58     0C 16 06 F6 | 	mov	arg03, #12
1df5c     13 17 82 F1 | 	sub	arg03, local05
1df60     0C 20 86 F1 | 	sub	local02, #12
1df64     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1df68     FD 38 0A F6 | 	mov	local14, result1 wz
1df6c     00 26 06 A6 |  if_e	mov	local05, #0
1df70     1C 27 02 51 |  if_ne	add	local05, local14
1df74     D8 FE 9F 5D |  if_ne	jmp	#LR__3414
1df78                 | LR__3417
1df78     13 25 02 F6 | 	mov	local04, local05
1df7c     0C 20 06 F1 | 	add	local02, #12
1df80     10 25 02 F1 | 	add	local04, local02
1df84     12 01 48 FC | 	wrbyte	#0, local04
1df88     10 20 06 F1 | 	add	local02, #16
1df8c     10 25 CA FA | 	rdbyte	local04, local02 wz
1df90     1C 20 86 F1 | 	sub	local02, #28
1df94     F8 00 90 5D |  if_ne	jmp	#LR__3423
1df98     00 26 0E F2 | 	cmp	local05, #0 wz
1df9c     1C 00 90 5D |  if_ne	jmp	#LR__3418
1dfa0     13 37 02 F6 | 	mov	local13, local05
1dfa4     1C 20 06 F1 | 	add	local02, #28
1dfa8     10 37 02 F1 | 	add	local13, local02
1dfac     1B 7F 48 FC | 	wrbyte	#63, local13
1dfb0     01 26 06 F1 | 	add	local05, #1
1dfb4     1C 20 86 F1 | 	sub	local02, #28
1dfb8     A4 00 90 FD | 	jmp	#LR__3422
1dfbc                 | LR__3418
1dfbc                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1dfbc     00 26 06 F6 | 	mov	local05, #0
1dfc0     00 28 06 F6 | 	mov	local06, #0
1dfc4     08 3A 06 F6 | 	mov	local15, #8
1dfc8                 | LR__3419
1dfc8     14 25 02 F6 | 	mov	local04, local06
1dfcc     0C 20 06 F1 | 	add	local02, #12
1dfd0     10 25 02 F1 | 	add	local04, local02
1dfd4     12 37 CA FA | 	rdbyte	local13, local04 wz
1dfd8     0C 20 86 F1 | 	sub	local02, #12
1dfdc     80 00 90 AD |  if_e	jmp	#LR__3421
1dfe0     14 2D 02 F6 | 	mov	local08, local06
1dfe4     0C 20 06 F1 | 	add	local02, #12
1dfe8     10 2D 02 F1 | 	add	local08, local02
1dfec     16 33 C2 FA | 	rdbyte	local11, local08
1dff0     19 39 32 F9 | 	getword	local14, local11, #0
1dff4     2E 38 0E F2 | 	cmp	local14, #46 wz
1dff8     0C 20 86 F1 | 	sub	local02, #12
1dffc     10 3A 06 A6 |  if_e	mov	local15, #16
1e000     19 39 32 F9 | 	getword	local14, local11, #0
1e004     41 38 16 F2 | 	cmp	local14, #65 wc
1e008     30 00 90 CD |  if_b	jmp	#LR__3420
1e00c     19 2D 32 F9 | 	getword	local08, local11, #0
1e010     5B 2C 16 F2 | 	cmp	local08, #91 wc
1e014     24 00 90 3D |  if_ae	jmp	#LR__3420
1e018     1C 1E 06 F1 | 	add	local01, #28
1e01c     0F 2F 02 FB | 	rdlong	local09, local01
1e020     1C 1E 86 F1 | 	sub	local01, #28
1e024     0C 2E 06 F1 | 	add	local09, #12
1e028     17 31 C2 FA | 	rdbyte	local10, local09
1e02c     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1e030     1C 31 CA F7 | 	test	local10, local14 wz
1e034     19 33 32 59 |  if_ne	getword	local11, local11, #0
1e038     20 32 06 51 |  if_ne	add	local11, #32
1e03c                 | LR__3420
1e03c     13 39 02 F6 | 	mov	local14, local05
1e040     1C 20 06 F1 | 	add	local02, #28
1e044     10 39 02 F1 | 	add	local14, local02
1e048     19 33 32 F9 | 	getword	local11, local11, #0
1e04c     1C 33 42 FC | 	wrbyte	local11, local14
1e050     01 28 06 F1 | 	add	local06, #1
1e054     01 26 06 F1 | 	add	local05, #1
1e058     1C 20 86 F1 | 	sub	local02, #28
1e05c     68 FF 9F FD | 	jmp	#LR__3419
1e060                 | LR__3421
1e060                 | LR__3422
1e060     1C 20 06 F1 | 	add	local02, #28
1e064     10 27 02 F1 | 	add	local05, local02
1e068     13 01 48 FC | 	wrbyte	#0, local05
1e06c     1C 1E 06 F1 | 	add	local01, #28
1e070     0F 25 02 FB | 	rdlong	local04, local01
1e074     1C 1E 86 F1 | 	sub	local01, #28
1e078     0C 24 06 F1 | 	add	local04, #12
1e07c     12 37 CA FA | 	rdbyte	local13, local04 wz
1e080     1C 20 86 F1 | 	sub	local02, #28
1e084     0C 20 06 A1 |  if_e	add	local02, #12
1e088     10 01 48 AC |  if_e	wrbyte	#0, local02
1e08c     0C 20 86 A1 |  if_e	sub	local02, #12
1e090                 | LR__3423
1e090     1C 1E 06 F1 | 	add	local01, #28
1e094     0F 35 02 FB | 	rdlong	local12, local01
1e098     0B 34 06 F1 | 	add	local12, #11
1e09c     1A 25 C2 FA | 	rdbyte	local04, local12
1e0a0     3F 24 06 F5 | 	and	local04, #63
1e0a4     08 20 06 F1 | 	add	local02, #8
1e0a8     10 25 42 FC | 	wrbyte	local04, local02
1e0ac     08 20 86 F1 | 	sub	local02, #8
1e0b0     0F 13 02 FB | 	rdlong	arg01, local01
1e0b4     1C 12 06 F1 | 	add	arg01, #28
1e0b8                 | ' {
1e0b8                 | ' 
1e0b8                 | ' 	return *((DWORD*)ptr);
1e0b8     09 FB 01 FB | 	rdlong	result1, arg01
1e0bc     10 FB 61 FC | 	wrlong	result1, local02
1e0c0     0F 13 02 FB | 	rdlong	arg01, local01
1e0c4     16 12 06 F1 | 	add	arg01, #22
1e0c8                 | ' {
1e0c8                 | ' 
1e0c8                 | ' 	return *((WORD*)ptr);
1e0c8     09 FB E1 FA | 	rdword	result1, arg01
1e0cc     06 20 06 F1 | 	add	local02, #6
1e0d0     10 FB 51 FC | 	wrword	result1, local02
1e0d4     0F 13 02 FB | 	rdlong	arg01, local01
1e0d8     18 12 06 F1 | 	add	arg01, #24
1e0dc                 | ' {
1e0dc                 | ' 
1e0dc                 | ' 	return *((WORD*)ptr);
1e0dc     09 FB E1 FA | 	rdword	result1, arg01
1e0e0     02 20 86 F1 | 	sub	local02, #2
1e0e4     10 FB 51 FC | 	wrword	result1, local02
1e0e8                 | LR__3424
1e0e8     A7 F0 03 F6 | 	mov	ptra, fp
1e0ec     B2 00 A0 FD | 	call	#popregs_
1e0f0                 | _fatfs_cc_get_fileinfo_ret
1e0f0     2D 00 64 FD | 	ret
1e0f4                 | 
1e0f4                 | _fatfs_cc_create_name
1e0f4     0D 4A 05 F6 | 	mov	COUNT_, #13
1e0f8     A8 00 A0 FD | 	call	#pushregs_
1e0fc     34 F0 07 F1 | 	add	ptra, #52
1e100     04 4E 05 F1 | 	add	fp, #4
1e104     A7 12 62 FC | 	wrlong	arg01, fp
1e108     04 4E 05 F1 | 	add	fp, #4
1e10c     A7 14 62 FC | 	wrlong	arg02, fp
1e110     0A FB 01 FB | 	rdlong	result1, arg02
1e114     28 4E 05 F1 | 	add	fp, #40
1e118     A7 FA 61 FC | 	wrlong	result1, fp
1e11c     2C 4E 85 F1 | 	sub	fp, #44
1e120     A7 FA 01 FB | 	rdlong	result1, fp
1e124     FD 1E 02 FB | 	rdlong	local01, result1
1e128     0C 1E 06 F1 | 	add	local01, #12
1e12c     0F 21 02 FB | 	rdlong	local02, local01
1e130     14 4E 05 F1 | 	add	fp, #20
1e134     A7 20 62 FC | 	wrlong	local02, fp
1e138     14 4E 05 F1 | 	add	fp, #20
1e13c     A7 00 68 FC | 	wrlong	#0, fp
1e140     2C 4E 85 F1 | 	sub	fp, #44
1e144                 | ' 
1e144                 | ' 
1e144                 | ' 
1e144                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1e144                 | ' 	for (;;) {
1e144                 | LR__3430
1e144     30 4E 05 F1 | 	add	fp, #48
1e148     A7 12 02 F6 | 	mov	arg01, fp
1e14c     30 4E 85 F1 | 	sub	fp, #48
1e150     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1e154     1C 4E 05 F1 | 	add	fp, #28
1e158     A7 FA 61 FC | 	wrlong	result1, fp
1e15c     1C 4E 85 F1 | 	sub	fp, #28
1e160     FF FF 7F FF 
1e164     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1e168     06 FA 05 A6 |  if_e	mov	result1, #6
1e16c     74 08 90 AD |  if_e	jmp	#LR__3470
1e170     1C 4E 05 F1 | 	add	fp, #28
1e174     A7 1E 02 FB | 	rdlong	local01, fp
1e178     1C 4E 85 F1 | 	sub	fp, #28
1e17c     80 00 00 FF 
1e180     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1e184     3C 00 90 CD |  if_b	jmp	#LR__3431
1e188     18 4E 05 F1 | 	add	fp, #24
1e18c     A7 22 02 FB | 	rdlong	local03, fp
1e190     14 4E 05 F1 | 	add	fp, #20
1e194     A7 1E 02 FB | 	rdlong	local01, fp
1e198     0F 25 02 F6 | 	mov	local04, local01
1e19c     01 24 06 F1 | 	add	local04, #1
1e1a0     A7 24 62 FC | 	wrlong	local04, fp
1e1a4     01 1E 66 F0 | 	shl	local01, #1
1e1a8     11 1F 02 F1 | 	add	local01, local03
1e1ac     10 4E 85 F1 | 	sub	fp, #16
1e1b0     A7 26 02 FB | 	rdlong	local05, fp
1e1b4     1C 4E 85 F1 | 	sub	fp, #28
1e1b8     13 29 02 F6 | 	mov	local06, local05
1e1bc     10 28 46 F0 | 	shr	local06, #16
1e1c0     0F 29 52 FC | 	wrword	local06, local01
1e1c4                 | LR__3431
1e1c4     1C 4E 05 F1 | 	add	fp, #28
1e1c8     A7 1E 02 FB | 	rdlong	local01, fp
1e1cc     08 4E 85 F1 | 	sub	fp, #8
1e1d0     A7 1E 52 FC | 	wrword	local01, fp
1e1d4     A7 1E E2 FA | 	rdword	local01, fp
1e1d8     14 4E 85 F1 | 	sub	fp, #20
1e1dc     20 1E 16 F2 | 	cmp	local01, #32 wc
1e1e0     B0 00 90 CD |  if_b	jmp	#LR__3433
1e1e4     14 4E 05 F1 | 	add	fp, #20
1e1e8     A7 1E E2 FA | 	rdword	local01, fp
1e1ec     14 4E 85 F1 | 	sub	fp, #20
1e1f0     2F 1E 0E F2 | 	cmp	local01, #47 wz
1e1f4     14 4E 05 51 |  if_ne	add	fp, #20
1e1f8     A7 24 E2 5A |  if_ne	rdword	local04, fp
1e1fc     14 4E 85 51 |  if_ne	sub	fp, #20
1e200     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1e204     8C 00 90 AD |  if_e	jmp	#LR__3433
1e208     14 4E 05 F1 | 	add	fp, #20
1e20c     A7 12 E2 FA | 	rdword	arg01, fp
1e210     14 4E 85 F1 | 	sub	fp, #20
1e214     80 12 16 F2 | 	cmp	arg01, #128 wc
1e218     24 00 90 3D |  if_ae	jmp	#LR__3432
1e21c     20 01 00 FF 
1e220     54 13 06 F6 | 	mov	arg01, ##@LR__4092
1e224     14 4E 05 F1 | 	add	fp, #20
1e228     A7 14 E2 FA | 	rdword	arg02, fp
1e22c     14 4E 85 F1 | 	sub	fp, #20
1e230     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1e234     00 FA 0D F2 | 	cmp	result1, #0 wz
1e238     06 FA 05 56 |  if_ne	mov	result1, #6
1e23c     A4 07 90 5D |  if_ne	jmp	#LR__3470
1e240                 | LR__3432
1e240     2C 4E 05 F1 | 	add	fp, #44
1e244     A7 28 02 FB | 	rdlong	local06, fp
1e248     2C 4E 85 F1 | 	sub	fp, #44
1e24c     FF 28 16 F2 | 	cmp	local06, #255 wc
1e250     06 FA 05 36 |  if_ae	mov	result1, #6
1e254     8C 07 90 3D |  if_ae	jmp	#LR__3470
1e258     18 4E 05 F1 | 	add	fp, #24
1e25c     A7 22 02 FB | 	rdlong	local03, fp
1e260     14 4E 05 F1 | 	add	fp, #20
1e264     A7 20 02 FB | 	rdlong	local02, fp
1e268     10 25 02 F6 | 	mov	local04, local02
1e26c     01 24 06 F1 | 	add	local04, #1
1e270     A7 24 62 FC | 	wrlong	local04, fp
1e274     10 1F 02 F6 | 	mov	local01, local02
1e278     01 1E 66 F0 | 	shl	local01, #1
1e27c     11 1F 02 F1 | 	add	local01, local03
1e280     18 4E 85 F1 | 	sub	fp, #24
1e284     A7 28 E2 FA | 	rdword	local06, fp
1e288     14 4E 85 F1 | 	sub	fp, #20
1e28c     0F 29 52 FC | 	wrword	local06, local01
1e290     B0 FE 9F FD | 	jmp	#LR__3430
1e294                 | LR__3433
1e294     14 4E 05 F1 | 	add	fp, #20
1e298     A7 2A E2 FA | 	rdword	local07, fp
1e29c     14 4E 85 F1 | 	sub	fp, #20
1e2a0     20 2A 16 F2 | 	cmp	local07, #32 wc
1e2a4     10 4E 05 C1 |  if_b	add	fp, #16
1e2a8     A7 08 48 CC |  if_b	wrbyte	#4, fp
1e2ac     10 4E 85 C1 |  if_b	sub	fp, #16
1e2b0     74 00 90 CD |  if_b	jmp	#LR__3438
1e2b4     97 24 48 FB | 	callpa	#(@LR__3436-@LR__3434)>>2,fcache_load_ptr_
1e2b8                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1e2b8                 | LR__3434
1e2b8     30 4E 05 F1 | 	add	fp, #48
1e2bc     A7 24 02 FB | 	rdlong	local04, fp
1e2c0     30 4E 85 F1 | 	sub	fp, #48
1e2c4     12 2B C2 FA | 	rdbyte	local07, local04
1e2c8     2F 2A 0E F2 | 	cmp	local07, #47 wz
1e2cc     18 00 90 AD |  if_e	jmp	#LR__3435
1e2d0     30 4E 05 F1 | 	add	fp, #48
1e2d4     A7 24 02 FB | 	rdlong	local04, fp
1e2d8     30 4E 85 F1 | 	sub	fp, #48
1e2dc     12 21 C2 FA | 	rdbyte	local02, local04
1e2e0     5C 20 0E F2 | 	cmp	local02, #92 wz
1e2e4     18 00 90 5D |  if_ne	jmp	#LR__3437
1e2e8                 | LR__3435
1e2e8     30 4E 05 F1 | 	add	fp, #48
1e2ec     A7 1E 02 FB | 	rdlong	local01, fp
1e2f0     01 1E 06 F1 | 	add	local01, #1
1e2f4     A7 1E 62 FC | 	wrlong	local01, fp
1e2f8     30 4E 85 F1 | 	sub	fp, #48
1e2fc     B8 FF 9F FD | 	jmp	#LR__3434
1e300                 | LR__3436
1e300                 | LR__3437
1e300     10 4E 05 F1 | 	add	fp, #16
1e304     A7 00 48 FC | 	wrbyte	#0, fp
1e308     20 4E 05 F1 | 	add	fp, #32
1e30c     A7 28 02 FB | 	rdlong	local06, fp
1e310     30 4E 85 F1 | 	sub	fp, #48
1e314     14 2B C2 FA | 	rdbyte	local07, local06
1e318     20 2A 16 F2 | 	cmp	local07, #32 wc
1e31c     10 4E 05 C1 |  if_b	add	fp, #16
1e320     A7 08 48 CC |  if_b	wrbyte	#4, fp
1e324     10 4E 85 C1 |  if_b	sub	fp, #16
1e328                 | LR__3438
1e328     08 4E 05 F1 | 	add	fp, #8
1e32c     A7 2A 02 FB | 	rdlong	local07, fp
1e330     28 4E 05 F1 | 	add	fp, #40
1e334     A7 1E 02 FB | 	rdlong	local01, fp
1e338     30 4E 85 F1 | 	sub	fp, #48
1e33c     15 1F 62 FC | 	wrlong	local01, local07
1e340     97 38 48 FB | 	callpa	#(@LR__3440-@LR__3439)>>2,fcache_load_ptr_
1e344                 | ' 	}
1e344                 | ' 	*path = p;
1e344                 | ' #line 2862 "ff.c"
1e344                 | ' 	while (di) {
1e344                 | LR__3439
1e344     2C 4E 05 F1 | 	add	fp, #44
1e348     A7 2A 0A FB | 	rdlong	local07, fp wz
1e34c     2C 4E 85 F1 | 	sub	fp, #44
1e350     60 00 90 AD |  if_e	jmp	#LR__3441
1e354     18 4E 05 F1 | 	add	fp, #24
1e358     A7 28 02 FB | 	rdlong	local06, fp
1e35c     14 4E 05 F1 | 	add	fp, #20
1e360     A7 24 02 FB | 	rdlong	local04, fp
1e364     01 24 86 F1 | 	sub	local04, #1
1e368     01 24 66 F0 | 	shl	local04, #1
1e36c     14 25 02 F1 | 	add	local04, local06
1e370     12 29 E2 FA | 	rdword	local06, local04
1e374     18 4E 85 F1 | 	sub	fp, #24
1e378     A7 28 52 FC | 	wrword	local06, fp
1e37c     A7 2A E2 FA | 	rdword	local07, fp
1e380     14 4E 85 F1 | 	sub	fp, #20
1e384     20 2A 0E F2 | 	cmp	local07, #32 wz
1e388     14 4E 05 51 |  if_ne	add	fp, #20
1e38c     A7 1E E2 5A |  if_ne	rdword	local01, fp
1e390     14 4E 85 51 |  if_ne	sub	fp, #20
1e394     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1e398     18 00 90 5D |  if_ne	jmp	#LR__3441
1e39c     2C 4E 05 F1 | 	add	fp, #44
1e3a0     A7 1E 02 FB | 	rdlong	local01, fp
1e3a4     01 1E 86 F1 | 	sub	local01, #1
1e3a8     A7 1E 62 FC | 	wrlong	local01, fp
1e3ac     2C 4E 85 F1 | 	sub	fp, #44
1e3b0     90 FF 9F FD | 	jmp	#LR__3439
1e3b4                 | LR__3440
1e3b4                 | LR__3441
1e3b4     18 4E 05 F1 | 	add	fp, #24
1e3b8     A7 2C 02 FB | 	rdlong	local08, fp
1e3bc     14 4E 05 F1 | 	add	fp, #20
1e3c0     A7 24 02 FB | 	rdlong	local04, fp
1e3c4     01 24 66 F0 | 	shl	local04, #1
1e3c8     16 25 02 F1 | 	add	local04, local08
1e3cc     12 01 58 FC | 	wrword	#0, local04
1e3d0     A7 2A 0A FB | 	rdlong	local07, fp wz
1e3d4     2C 4E 85 F1 | 	sub	fp, #44
1e3d8     06 FA 05 A6 |  if_e	mov	result1, #6
1e3dc     04 06 90 AD |  if_e	jmp	#LR__3470
1e3e0                 | ' 
1e3e0                 | ' 
1e3e0                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1e3e0     28 4E 05 F1 | 	add	fp, #40
1e3e4     A7 00 68 FC | 	wrlong	#0, fp
1e3e8     28 4E 85 F1 | 	sub	fp, #40
1e3ec     97 22 48 FB | 	callpa	#(@LR__3443-@LR__3442)>>2,fcache_load_ptr_
1e3f0                 | LR__3442
1e3f0     18 4E 05 F1 | 	add	fp, #24
1e3f4     A7 2E 02 FB | 	rdlong	local09, fp
1e3f8     10 4E 05 F1 | 	add	fp, #16
1e3fc     A7 30 02 FB | 	rdlong	local10, fp
1e400     28 4E 85 F1 | 	sub	fp, #40
1e404     01 30 66 F0 | 	shl	local10, #1
1e408     17 31 02 F1 | 	add	local10, local09
1e40c     18 33 E2 FA | 	rdword	local11, local10
1e410     20 32 0E F2 | 	cmp	local11, #32 wz
1e414     1C 00 90 5D |  if_ne	jmp	#LR__3444
1e418     28 4E 05 F1 | 	add	fp, #40
1e41c     A7 34 02 FB | 	rdlong	local12, fp
1e420     1A 27 02 F6 | 	mov	local05, local12
1e424     01 26 06 F1 | 	add	local05, #1
1e428     A7 26 62 FC | 	wrlong	local05, fp
1e42c     28 4E 85 F1 | 	sub	fp, #40
1e430     BC FF 9F FD | 	jmp	#LR__3442
1e434                 | LR__3443
1e434                 | LR__3444
1e434     28 4E 05 F1 | 	add	fp, #40
1e438     A7 2A 02 FB | 	rdlong	local07, fp
1e43c     28 4E 85 F1 | 	sub	fp, #40
1e440     01 2A 16 F2 | 	cmp	local07, #1 wc
1e444     28 00 90 3D |  if_ae	jmp	#LR__3445
1e448     18 4E 05 F1 | 	add	fp, #24
1e44c     A7 22 02 FB | 	rdlong	local03, fp
1e450     10 4E 05 F1 | 	add	fp, #16
1e454     A7 2E 02 FB | 	rdlong	local09, fp
1e458     28 4E 85 F1 | 	sub	fp, #40
1e45c     01 2E 66 F0 | 	shl	local09, #1
1e460     11 2F 02 F1 | 	add	local09, local03
1e464     17 1F E2 FA | 	rdword	local01, local09
1e468     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e46c     14 00 90 5D |  if_ne	jmp	#LR__3446
1e470                 | LR__3445
1e470     10 4E 05 F1 | 	add	fp, #16
1e474     A7 2A C2 FA | 	rdbyte	local07, fp
1e478     03 2A 46 F5 | 	or	local07, #3
1e47c     A7 2A 42 FC | 	wrbyte	local07, fp
1e480     10 4E 85 F1 | 	sub	fp, #16
1e484                 | LR__3446
1e484     97 2C 48 FB | 	callpa	#(@LR__3448-@LR__3447)>>2,fcache_load_ptr_
1e488                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1e488                 | LR__3447
1e488     2C 4E 05 F1 | 	add	fp, #44
1e48c     A7 2A 02 FB | 	rdlong	local07, fp
1e490     2C 4E 85 F1 | 	sub	fp, #44
1e494     01 2A 16 F2 | 	cmp	local07, #1 wc
1e498     44 00 90 CD |  if_b	jmp	#LR__3449
1e49c     18 4E 05 F1 | 	add	fp, #24
1e4a0     A7 28 02 FB | 	rdlong	local06, fp
1e4a4     14 4E 05 F1 | 	add	fp, #20
1e4a8     A7 22 02 FB | 	rdlong	local03, fp
1e4ac     2C 4E 85 F1 | 	sub	fp, #44
1e4b0     01 22 86 F1 | 	sub	local03, #1
1e4b4     01 22 66 F0 | 	shl	local03, #1
1e4b8     14 23 02 F1 | 	add	local03, local06
1e4bc     11 1F E2 FA | 	rdword	local01, local03
1e4c0     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e4c4     18 00 90 AD |  if_e	jmp	#LR__3449
1e4c8     2C 4E 05 F1 | 	add	fp, #44
1e4cc     A7 1E 02 FB | 	rdlong	local01, fp
1e4d0     01 1E 86 F1 | 	sub	local01, #1
1e4d4     A7 1E 62 FC | 	wrlong	local01, fp
1e4d8     2C 4E 85 F1 | 	sub	fp, #44
1e4dc     A8 FF 9F FD | 	jmp	#LR__3447
1e4e0                 | LR__3448
1e4e0                 | LR__3449
1e4e0     04 4E 05 F1 | 	add	fp, #4
1e4e4     A7 12 02 FB | 	rdlong	arg01, fp
1e4e8     04 4E 85 F1 | 	sub	fp, #4
1e4ec     20 12 06 F1 | 	add	arg01, #32
1e4f0     20 14 06 F6 | 	mov	arg02, #32
1e4f4     0B 16 06 F6 | 	mov	arg03, #11
1e4f8     09 37 02 F6 | 	mov	local13, arg01
1e4fc     98 00 A0 FD | 	call	#\builtin_bytefill_
1e500     1B FB 01 F6 | 	mov	result1, local13
1e504     0C 4E 05 F1 | 	add	fp, #12
1e508     A7 00 48 FC | 	wrbyte	#0, fp
1e50c     A7 2A C2 FA | 	rdbyte	local07, fp
1e510     14 4E 05 F1 | 	add	fp, #20
1e514     A7 2A 62 FC | 	wrlong	local07, fp
1e518     04 4E 05 F1 | 	add	fp, #4
1e51c     A7 10 68 FC | 	wrlong	#8, fp
1e520     24 4E 85 F1 | 	sub	fp, #36
1e524                 | ' 
1e524                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1e524                 | ' 	i = b = 0; ni = 8;
1e524                 | ' 	for (;;) {
1e524                 | LR__3450
1e524     18 4E 05 F1 | 	add	fp, #24
1e528     A7 22 02 FB | 	rdlong	local03, fp
1e52c     10 4E 05 F1 | 	add	fp, #16
1e530     A7 2E 02 FB | 	rdlong	local09, fp
1e534     17 25 02 F6 | 	mov	local04, local09
1e538     01 24 06 F1 | 	add	local04, #1
1e53c     A7 24 62 FC | 	wrlong	local04, fp
1e540     01 2E 66 F0 | 	shl	local09, #1
1e544     11 2F 02 F1 | 	add	local09, local03
1e548     17 29 E2 FA | 	rdword	local06, local09
1e54c     14 4E 85 F1 | 	sub	fp, #20
1e550     A7 28 52 FC | 	wrword	local06, fp
1e554     A7 2A EA FA | 	rdword	local07, fp wz
1e558     14 4E 85 F1 | 	sub	fp, #20
1e55c     74 03 90 AD |  if_e	jmp	#LR__3466
1e560     14 4E 05 F1 | 	add	fp, #20
1e564     A7 2A E2 FA | 	rdword	local07, fp
1e568     14 4E 85 F1 | 	sub	fp, #20
1e56c     20 2A 0E F2 | 	cmp	local07, #32 wz
1e570     30 00 90 AD |  if_e	jmp	#LR__3451
1e574     14 4E 05 F1 | 	add	fp, #20
1e578     A7 1E E2 FA | 	rdword	local01, fp
1e57c     14 4E 85 F1 | 	sub	fp, #20
1e580     2E 1E 0E F2 | 	cmp	local01, #46 wz
1e584     34 00 90 5D |  if_ne	jmp	#LR__3452
1e588     28 4E 05 F1 | 	add	fp, #40
1e58c     A7 24 02 FB | 	rdlong	local04, fp
1e590     04 4E 05 F1 | 	add	fp, #4
1e594     A7 30 02 FB | 	rdlong	local10, fp
1e598     2C 4E 85 F1 | 	sub	fp, #44
1e59c     18 25 0A F2 | 	cmp	local04, local10 wz
1e5a0     18 00 90 AD |  if_e	jmp	#LR__3452
1e5a4                 | LR__3451
1e5a4     10 4E 05 F1 | 	add	fp, #16
1e5a8     A7 2A C2 FA | 	rdbyte	local07, fp
1e5ac     03 2A 46 F5 | 	or	local07, #3
1e5b0     A7 2A 42 FC | 	wrbyte	local07, fp
1e5b4     10 4E 85 F1 | 	sub	fp, #16
1e5b8                 | ' 			cf |=  0x01  |  0x02 ;
1e5b8                 | ' 			continue;
1e5b8     68 FF 9F FD | 	jmp	#LR__3450
1e5bc                 | LR__3452
1e5bc     20 4E 05 F1 | 	add	fp, #32
1e5c0     A7 2A 02 FB | 	rdlong	local07, fp
1e5c4     04 4E 05 F1 | 	add	fp, #4
1e5c8     A7 1E 02 FB | 	rdlong	local01, fp
1e5cc     24 4E 85 F1 | 	sub	fp, #36
1e5d0     0F 2B 12 F2 | 	cmp	local07, local01 wc
1e5d4     1C 00 90 3D |  if_ae	jmp	#LR__3453
1e5d8     28 4E 05 F1 | 	add	fp, #40
1e5dc     A7 2C 02 FB | 	rdlong	local08, fp
1e5e0     04 4E 05 F1 | 	add	fp, #4
1e5e4     A7 30 02 FB | 	rdlong	local10, fp
1e5e8     2C 4E 85 F1 | 	sub	fp, #44
1e5ec     18 2D 0A F2 | 	cmp	local08, local10 wz
1e5f0     B0 00 90 5D |  if_ne	jmp	#LR__3455
1e5f4                 | LR__3453
1e5f4     24 4E 05 F1 | 	add	fp, #36
1e5f8     A7 2A 02 FB | 	rdlong	local07, fp
1e5fc     24 4E 85 F1 | 	sub	fp, #36
1e600     0B 2A 0E F2 | 	cmp	local07, #11 wz
1e604     18 00 90 5D |  if_ne	jmp	#LR__3454
1e608     10 4E 05 F1 | 	add	fp, #16
1e60c     A7 2A C2 FA | 	rdbyte	local07, fp
1e610     03 2A 46 F5 | 	or	local07, #3
1e614     A7 2A 42 FC | 	wrbyte	local07, fp
1e618     10 4E 85 F1 | 	sub	fp, #16
1e61c                 | ' 				cf |=  0x01  |  0x02 ;
1e61c                 | ' 				break;
1e61c     B4 02 90 FD | 	jmp	#LR__3466
1e620                 | LR__3454
1e620     28 4E 05 F1 | 	add	fp, #40
1e624     A7 2A 02 FB | 	rdlong	local07, fp
1e628     04 4E 05 F1 | 	add	fp, #4
1e62c     A7 1E 02 FB | 	rdlong	local01, fp
1e630     2C 4E 85 F1 | 	sub	fp, #44
1e634     0F 2B 0A F2 | 	cmp	local07, local01 wz
1e638     10 4E 05 51 |  if_ne	add	fp, #16
1e63c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1e640     03 2A 46 55 |  if_ne	or	local07, #3
1e644     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1e648     10 4E 85 51 |  if_ne	sub	fp, #16
1e64c     28 4E 05 F1 | 	add	fp, #40
1e650     A7 2A 02 FB | 	rdlong	local07, fp
1e654     04 4E 05 F1 | 	add	fp, #4
1e658     A7 20 02 FB | 	rdlong	local02, fp
1e65c     2C 4E 85 F1 | 	sub	fp, #44
1e660     10 2B 1A F2 | 	cmp	local07, local02 wcz
1e664     6C 02 90 1D |  if_a	jmp	#LR__3466
1e668     2C 4E 05 F1 | 	add	fp, #44
1e66c     A7 2A 02 FB | 	rdlong	local07, fp
1e670     04 4E 85 F1 | 	sub	fp, #4
1e674     A7 2A 62 FC | 	wrlong	local07, fp
1e678     08 4E 85 F1 | 	sub	fp, #8
1e67c     A7 10 68 FC | 	wrlong	#8, fp
1e680     04 4E 05 F1 | 	add	fp, #4
1e684     A7 16 68 FC | 	wrlong	#11, fp
1e688     18 4E 85 F1 | 	sub	fp, #24
1e68c     A7 32 C2 FA | 	rdbyte	local11, fp
1e690     19 2B E2 F8 | 	getbyte	local07, local11, #0
1e694     02 2A 66 F0 | 	shl	local07, #2
1e698     A7 2A 42 FC | 	wrbyte	local07, fp
1e69c     0C 4E 85 F1 | 	sub	fp, #12
1e6a0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1e6a0                 | ' 			continue;
1e6a0     80 FE 9F FD | 	jmp	#LR__3450
1e6a4                 | LR__3455
1e6a4     14 4E 05 F1 | 	add	fp, #20
1e6a8     A7 2A E2 FA | 	rdword	local07, fp
1e6ac     14 4E 85 F1 | 	sub	fp, #20
1e6b0     80 2A 16 F2 | 	cmp	local07, #128 wc
1e6b4     6C 00 90 CD |  if_b	jmp	#LR__3457
1e6b8     10 4E 05 F1 | 	add	fp, #16
1e6bc     A7 2A C2 FA | 	rdbyte	local07, fp
1e6c0     02 2A 46 F5 | 	or	local07, #2
1e6c4     A7 2A 42 FC | 	wrbyte	local07, fp
1e6c8     04 4E 05 F1 | 	add	fp, #4
1e6cc     A7 12 E2 FA | 	rdword	arg01, fp
1e6d0     14 4E 85 F1 | 	sub	fp, #20
1e6d4     01 00 00 FF 
1e6d8     52 15 06 F6 | 	mov	arg02, ##850
1e6dc     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1e6e0     14 4E 05 F1 | 	add	fp, #20
1e6e4     A7 FA 51 FC | 	wrword	result1, fp
1e6e8     A7 2A E2 FA | 	rdword	local07, fp
1e6ec     14 4E 85 F1 | 	sub	fp, #20
1e6f0     80 2A CE F7 | 	test	local07, #128 wz
1e6f4     2C 00 90 AD |  if_e	jmp	#LR__3456
1e6f8     14 4E 05 F1 | 	add	fp, #20
1e6fc     A7 20 E2 FA | 	rdword	local02, fp
1e700     7F 20 06 F5 | 	and	local02, #127
1e704     01 00 00 FF 
1e708     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1e70c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1e710     10 2B C2 FA | 	rdbyte	local07, local02
1e714     A7 2A 52 FC | 	wrword	local07, fp
1e718     14 4E 85 F1 | 	sub	fp, #20
1e71c     01 00 00 FF 
1e720     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1e724                 | LR__3456
1e724                 | LR__3457
1e724     14 4E 05 F1 | 	add	fp, #20
1e728     A7 2A E2 FA | 	rdword	local07, fp
1e72c     14 4E 85 F1 | 	sub	fp, #20
1e730     00 2B 16 F2 | 	cmp	local07, #256 wc
1e734     88 00 90 CD |  if_b	jmp	#LR__3459
1e738     24 4E 05 F1 | 	add	fp, #36
1e73c     A7 2A 02 FB | 	rdlong	local07, fp
1e740     01 2A 86 F1 | 	sub	local07, #1
1e744     04 4E 85 F1 | 	sub	fp, #4
1e748     A7 20 02 FB | 	rdlong	local02, fp
1e74c     20 4E 85 F1 | 	sub	fp, #32
1e750     15 21 12 F2 | 	cmp	local02, local07 wc
1e754     2C 00 90 CD |  if_b	jmp	#LR__3458
1e758     10 4E 05 F1 | 	add	fp, #16
1e75c     A7 32 C2 FA | 	rdbyte	local11, fp
1e760     19 2B E2 F8 | 	getbyte	local07, local11, #0
1e764     03 2A 46 F5 | 	or	local07, #3
1e768     A7 2A 42 FC | 	wrbyte	local07, fp
1e76c     14 4E 05 F1 | 	add	fp, #20
1e770     A7 2A 02 FB | 	rdlong	local07, fp
1e774     04 4E 85 F1 | 	sub	fp, #4
1e778     A7 2A 62 FC | 	wrlong	local07, fp
1e77c     20 4E 85 F1 | 	sub	fp, #32
1e780                 | ' 				cf |=  0x01  |  0x02 ;
1e780                 | ' 				i = ni; continue;
1e780     A0 FD 9F FD | 	jmp	#LR__3450
1e784                 | LR__3458
1e784     04 4E 05 F1 | 	add	fp, #4
1e788     A7 2E 02 FB | 	rdlong	local09, fp
1e78c     1C 4E 05 F1 | 	add	fp, #28
1e790     A7 30 02 FB | 	rdlong	local10, fp
1e794     18 25 02 F6 | 	mov	local04, local10
1e798     01 24 06 F1 | 	add	local04, #1
1e79c     A7 24 62 FC | 	wrlong	local04, fp
1e7a0     20 2E 06 F1 | 	add	local09, #32
1e7a4     17 31 02 F1 | 	add	local10, local09
1e7a8     0C 4E 85 F1 | 	sub	fp, #12
1e7ac     A7 22 E2 FA | 	rdword	local03, fp
1e7b0     14 4E 85 F1 | 	sub	fp, #20
1e7b4     08 22 46 F0 | 	shr	local03, #8
1e7b8     18 23 42 FC | 	wrbyte	local03, local10
1e7bc     D4 00 90 FD | 	jmp	#LR__3465
1e7c0                 | LR__3459
1e7c0     14 4E 05 F1 | 	add	fp, #20
1e7c4     A7 2A EA FA | 	rdword	local07, fp wz
1e7c8     14 4E 85 F1 | 	sub	fp, #20
1e7cc     20 00 90 AD |  if_e	jmp	#LR__3460
1e7d0     20 01 00 FF 
1e7d4     5D 13 06 F6 | 	mov	arg01, ##@LR__4093
1e7d8     14 4E 05 F1 | 	add	fp, #20
1e7dc     A7 14 E2 FA | 	rdword	arg02, fp
1e7e0     14 4E 85 F1 | 	sub	fp, #20
1e7e4     48 CB BF FD | 	call	#_fatfs_cc_strchr
1e7e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7ec     20 00 90 AD |  if_e	jmp	#LR__3461
1e7f0                 | LR__3460
1e7f0     14 4E 05 F1 | 	add	fp, #20
1e7f4     A7 BE 58 FC | 	wrword	#95, fp
1e7f8     04 4E 85 F1 | 	sub	fp, #4
1e7fc     A7 2A C2 FA | 	rdbyte	local07, fp
1e800     03 2A 46 F5 | 	or	local07, #3
1e804     A7 2A 42 FC | 	wrbyte	local07, fp
1e808     10 4E 85 F1 | 	sub	fp, #16
1e80c     84 00 90 FD | 	jmp	#LR__3464
1e810                 | LR__3461
1e810     14 4E 05 F1 | 	add	fp, #20
1e814     A7 2A E2 FA | 	rdword	local07, fp
1e818     14 4E 85 F1 | 	sub	fp, #20
1e81c     41 2A 16 F2 | 	cmp	local07, #65 wc
1e820     24 00 90 CD |  if_b	jmp	#LR__3462
1e824     14 4E 05 F1 | 	add	fp, #20
1e828     A7 1E E2 FA | 	rdword	local01, fp
1e82c     14 4E 85 F1 | 	sub	fp, #20
1e830     5B 1E 16 F2 | 	cmp	local01, #91 wc
1e834     0C 4E 05 C1 |  if_b	add	fp, #12
1e838     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1e83c     02 2A 46 C5 |  if_b	or	local07, #2
1e840     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1e844     0C 4E 85 C1 |  if_b	sub	fp, #12
1e848                 | LR__3462
1e848     14 4E 05 F1 | 	add	fp, #20
1e84c     A7 2A E2 FA | 	rdword	local07, fp
1e850     14 4E 85 F1 | 	sub	fp, #20
1e854     61 2A 16 F2 | 	cmp	local07, #97 wc
1e858     38 00 90 CD |  if_b	jmp	#LR__3463
1e85c     14 4E 05 F1 | 	add	fp, #20
1e860     A7 1E E2 FA | 	rdword	local01, fp
1e864     14 4E 85 F1 | 	sub	fp, #20
1e868     7B 1E 16 F2 | 	cmp	local01, #123 wc
1e86c     24 00 90 3D |  if_ae	jmp	#LR__3463
1e870     0C 4E 05 F1 | 	add	fp, #12
1e874     A7 2A C2 FA | 	rdbyte	local07, fp
1e878     01 2A 46 F5 | 	or	local07, #1
1e87c     A7 2A 42 FC | 	wrbyte	local07, fp
1e880     08 4E 05 F1 | 	add	fp, #8
1e884     A7 2A E2 FA | 	rdword	local07, fp
1e888     20 2A 86 F1 | 	sub	local07, #32
1e88c     A7 2A 52 FC | 	wrword	local07, fp
1e890     14 4E 85 F1 | 	sub	fp, #20
1e894                 | LR__3463
1e894                 | LR__3464
1e894                 | LR__3465
1e894     04 4E 05 F1 | 	add	fp, #4
1e898     A7 32 02 FB | 	rdlong	local11, fp
1e89c     19 2F 02 F6 | 	mov	local09, local11
1e8a0     1C 4E 05 F1 | 	add	fp, #28
1e8a4     A7 20 02 FB | 	rdlong	local02, fp
1e8a8     10 25 02 F6 | 	mov	local04, local02
1e8ac     01 24 06 F1 | 	add	local04, #1
1e8b0     A7 24 62 FC | 	wrlong	local04, fp
1e8b4     10 31 02 F6 | 	mov	local10, local02
1e8b8     20 2E 06 F1 | 	add	local09, #32
1e8bc     17 31 02 F1 | 	add	local10, local09
1e8c0     0C 4E 85 F1 | 	sub	fp, #12
1e8c4     A7 22 E2 FA | 	rdword	local03, fp
1e8c8     14 4E 85 F1 | 	sub	fp, #20
1e8cc     18 23 42 FC | 	wrbyte	local03, local10
1e8d0     50 FC 9F FD | 	jmp	#LR__3450
1e8d4                 | LR__3466
1e8d4     04 4E 05 F1 | 	add	fp, #4
1e8d8     A7 32 02 FB | 	rdlong	local11, fp
1e8dc     04 4E 85 F1 | 	sub	fp, #4
1e8e0     20 32 06 F1 | 	add	local11, #32
1e8e4     19 2B C2 FA | 	rdbyte	local07, local11
1e8e8     E5 2A 0E F2 | 	cmp	local07, #229 wz
1e8ec     04 4E 05 A1 |  if_e	add	fp, #4
1e8f0     A7 2A 02 AB |  if_e	rdlong	local07, fp
1e8f4     04 4E 85 A1 |  if_e	sub	fp, #4
1e8f8     20 2A 06 A1 |  if_e	add	local07, #32
1e8fc     15 0B 48 AC |  if_e	wrbyte	#5, local07
1e900     24 4E 05 F1 | 	add	fp, #36
1e904     A7 2A 02 FB | 	rdlong	local07, fp
1e908     24 4E 85 F1 | 	sub	fp, #36
1e90c     08 2A 0E F2 | 	cmp	local07, #8 wz
1e910     0C 4E 05 A1 |  if_e	add	fp, #12
1e914     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1e918     02 2A 66 A0 |  if_e	shl	local07, #2
1e91c     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1e920     0C 4E 85 A1 |  if_e	sub	fp, #12
1e924     0C 4E 05 F1 | 	add	fp, #12
1e928     A7 2A C2 FA | 	rdbyte	local07, fp
1e92c     0C 4E 85 F1 | 	sub	fp, #12
1e930     0C 2A 06 F5 | 	and	local07, #12
1e934     0C 2A 0E F2 | 	cmp	local07, #12 wz
1e938     18 00 90 AD |  if_e	jmp	#LR__3467
1e93c     0C 4E 05 F1 | 	add	fp, #12
1e940     A7 1E C2 FA | 	rdbyte	local01, fp
1e944     0C 4E 85 F1 | 	sub	fp, #12
1e948     03 1E 06 F5 | 	and	local01, #3
1e94c     03 1E 0E F2 | 	cmp	local01, #3 wz
1e950     14 00 90 5D |  if_ne	jmp	#LR__3468
1e954                 | LR__3467
1e954     10 4E 05 F1 | 	add	fp, #16
1e958     A7 2A C2 FA | 	rdbyte	local07, fp
1e95c     02 2A 46 F5 | 	or	local07, #2
1e960     A7 2A 42 FC | 	wrbyte	local07, fp
1e964     10 4E 85 F1 | 	sub	fp, #16
1e968                 | LR__3468
1e968     10 4E 05 F1 | 	add	fp, #16
1e96c     A7 2A C2 FA | 	rdbyte	local07, fp
1e970     10 4E 85 F1 | 	sub	fp, #16
1e974     02 2A CE F7 | 	test	local07, #2 wz
1e978     48 00 90 5D |  if_ne	jmp	#LR__3469
1e97c     0C 4E 05 F1 | 	add	fp, #12
1e980     A7 2A C2 FA | 	rdbyte	local07, fp
1e984     0C 4E 85 F1 | 	sub	fp, #12
1e988     01 2A CE F7 | 	test	local07, #1 wz
1e98c     10 4E 05 51 |  if_ne	add	fp, #16
1e990     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1e994     10 2A 46 55 |  if_ne	or	local07, #16
1e998     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1e99c     10 4E 85 51 |  if_ne	sub	fp, #16
1e9a0     0C 4E 05 F1 | 	add	fp, #12
1e9a4     A7 2A C2 FA | 	rdbyte	local07, fp
1e9a8     0C 4E 85 F1 | 	sub	fp, #12
1e9ac     04 2A CE F7 | 	test	local07, #4 wz
1e9b0     10 4E 05 51 |  if_ne	add	fp, #16
1e9b4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1e9b8     08 2A 46 55 |  if_ne	or	local07, #8
1e9bc     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1e9c0     10 4E 85 51 |  if_ne	sub	fp, #16
1e9c4                 | LR__3469
1e9c4     04 4E 05 F1 | 	add	fp, #4
1e9c8     A7 2A 02 FB | 	rdlong	local07, fp
1e9cc     0C 4E 05 F1 | 	add	fp, #12
1e9d0     A7 1E C2 FA | 	rdbyte	local01, fp
1e9d4     10 4E 85 F1 | 	sub	fp, #16
1e9d8     2B 2A 06 F1 | 	add	local07, #43
1e9dc     15 1F 42 FC | 	wrbyte	local01, local07
1e9e0                 | ' 	}
1e9e0                 | ' 
1e9e0                 | ' 	dp->fn[ 11 ] = cf;
1e9e0                 | ' 
1e9e0                 | ' 	return FR_OK;
1e9e0     00 FA 05 F6 | 	mov	result1, #0
1e9e4                 | LR__3470
1e9e4     A7 F0 03 F6 | 	mov	ptra, fp
1e9e8     B2 00 A0 FD | 	call	#popregs_
1e9ec                 | _fatfs_cc_create_name_ret
1e9ec     2D 00 64 FD | 	ret
1e9f0                 | 
1e9f0                 | _fatfs_cc_follow_path
1e9f0     02 4A 05 F6 | 	mov	COUNT_, #2
1e9f4     A8 00 A0 FD | 	call	#pushregs_
1e9f8     18 F0 07 F1 | 	add	ptra, #24
1e9fc     04 4E 05 F1 | 	add	fp, #4
1ea00     A7 12 62 FC | 	wrlong	arg01, fp
1ea04     04 4E 05 F1 | 	add	fp, #4
1ea08     A7 14 62 FC | 	wrlong	arg02, fp
1ea0c     04 4E 85 F1 | 	sub	fp, #4
1ea10     A7 FA 01 FB | 	rdlong	result1, fp
1ea14     FD 1E 02 FB | 	rdlong	local01, result1
1ea18     10 4E 05 F1 | 	add	fp, #16
1ea1c     A7 1E 62 FC | 	wrlong	local01, fp
1ea20     14 4E 85 F1 | 	sub	fp, #20
1ea24     97 24 48 FB | 	callpa	#(@LR__3482-@LR__3480)>>2,fcache_load_ptr_
1ea28                 | ' )
1ea28                 | ' {
1ea28                 | ' 	FRESULT res;
1ea28                 | ' 	BYTE ns;
1ea28                 | ' 	FATFS *fs = dp->obj.fs;
1ea28                 | ' #line 3034 "ff.c"
1ea28                 | ' 	{
1ea28                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1ea28                 | LR__3480
1ea28     08 4E 05 F1 | 	add	fp, #8
1ea2c     A7 1E 02 FB | 	rdlong	local01, fp
1ea30     08 4E 85 F1 | 	sub	fp, #8
1ea34     0F 1F C2 FA | 	rdbyte	local01, local01
1ea38     2F 1E 0E F2 | 	cmp	local01, #47 wz
1ea3c     18 00 90 AD |  if_e	jmp	#LR__3481
1ea40     08 4E 05 F1 | 	add	fp, #8
1ea44     A7 1E 02 FB | 	rdlong	local01, fp
1ea48     08 4E 85 F1 | 	sub	fp, #8
1ea4c     0F 1F C2 FA | 	rdbyte	local01, local01
1ea50     5C 1E 0E F2 | 	cmp	local01, #92 wz
1ea54     18 00 90 5D |  if_ne	jmp	#LR__3483
1ea58                 | LR__3481
1ea58     08 4E 05 F1 | 	add	fp, #8
1ea5c     A7 1E 02 FB | 	rdlong	local01, fp
1ea60     01 1E 06 F1 | 	add	local01, #1
1ea64     A7 1E 62 FC | 	wrlong	local01, fp
1ea68     08 4E 85 F1 | 	sub	fp, #8
1ea6c     B8 FF 9F FD | 	jmp	#LR__3480
1ea70                 | LR__3482
1ea70                 | LR__3483
1ea70     04 4E 05 F1 | 	add	fp, #4
1ea74     A7 1E 02 FB | 	rdlong	local01, fp
1ea78     08 1E 06 F1 | 	add	local01, #8
1ea7c     0F 01 68 FC | 	wrlong	#0, local01
1ea80     04 4E 05 F1 | 	add	fp, #4
1ea84     A7 1E 02 FB | 	rdlong	local01, fp
1ea88     08 4E 85 F1 | 	sub	fp, #8
1ea8c     0F 1F C2 FA | 	rdbyte	local01, local01
1ea90     20 1E 16 F2 | 	cmp	local01, #32 wc
1ea94     30 00 90 3D |  if_ae	jmp	#LR__3484
1ea98     04 4E 05 F1 | 	add	fp, #4
1ea9c     A7 1E 02 FB | 	rdlong	local01, fp
1eaa0     2B 1E 06 F1 | 	add	local01, #43
1eaa4     0F 01 49 FC | 	wrbyte	#128, local01
1eaa8     A7 12 02 FB | 	rdlong	arg01, fp
1eaac     04 4E 85 F1 | 	sub	fp, #4
1eab0     00 14 06 F6 | 	mov	arg02, #0
1eab4     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1eab8     0C 4E 05 F1 | 	add	fp, #12
1eabc     A7 FA 61 FC | 	wrlong	result1, fp
1eac0     0C 4E 85 F1 | 	sub	fp, #12
1eac4     1C 01 90 FD | 	jmp	#LR__3488
1eac8                 | LR__3484
1eac8                 | ' 		for (;;) {
1eac8                 | LR__3485
1eac8     04 4E 05 F1 | 	add	fp, #4
1eacc     A7 12 02 FB | 	rdlong	arg01, fp
1ead0     04 4E 05 F1 | 	add	fp, #4
1ead4     A7 14 02 F6 | 	mov	arg02, fp
1ead8     08 4E 85 F1 | 	sub	fp, #8
1eadc     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1eae0     0C 4E 05 F1 | 	add	fp, #12
1eae4     A7 FA 61 FC | 	wrlong	result1, fp
1eae8     00 FA 4D F2 | 	cmps	result1, #0 wz
1eaec     0C 4E 85 F1 | 	sub	fp, #12
1eaf0     F0 00 90 5D |  if_ne	jmp	#LR__3487
1eaf4     04 4E 05 F1 | 	add	fp, #4
1eaf8     A7 12 02 FB | 	rdlong	arg01, fp
1eafc     04 4E 85 F1 | 	sub	fp, #4
1eb00     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1eb04     0C 4E 05 F1 | 	add	fp, #12
1eb08     A7 FA 61 FC | 	wrlong	result1, fp
1eb0c     08 4E 85 F1 | 	sub	fp, #8
1eb10     A7 1E 02 FB | 	rdlong	local01, fp
1eb14     2B 1E 06 F1 | 	add	local01, #43
1eb18     0F 1F C2 FA | 	rdbyte	local01, local01
1eb1c     0C 4E 05 F1 | 	add	fp, #12
1eb20     A7 1E 42 FC | 	wrbyte	local01, fp
1eb24     04 4E 85 F1 | 	sub	fp, #4
1eb28     A7 1E 0A FB | 	rdlong	local01, fp wz
1eb2c     0C 4E 85 F1 | 	sub	fp, #12
1eb30     34 00 90 AD |  if_e	jmp	#LR__3486
1eb34     0C 4E 05 F1 | 	add	fp, #12
1eb38     A7 1E 02 FB | 	rdlong	local01, fp
1eb3c     0C 4E 85 F1 | 	sub	fp, #12
1eb40     04 1E 0E F2 | 	cmp	local01, #4 wz
1eb44     9C 00 90 5D |  if_ne	jmp	#LR__3487
1eb48     10 4E 05 F1 | 	add	fp, #16
1eb4c     A7 1E C2 FA | 	rdbyte	local01, fp
1eb50     10 4E 85 F1 | 	sub	fp, #16
1eb54     04 1E CE F7 | 	test	local01, #4 wz
1eb58     0C 4E 05 A1 |  if_e	add	fp, #12
1eb5c     A7 0A 68 AC |  if_e	wrlong	#5, fp
1eb60     0C 4E 85 A1 |  if_e	sub	fp, #12
1eb64                 | ' 					}
1eb64                 | ' 				}
1eb64                 | ' 				break;
1eb64     7C 00 90 FD | 	jmp	#LR__3487
1eb68                 | LR__3486
1eb68     10 4E 05 F1 | 	add	fp, #16
1eb6c     A7 1E C2 FA | 	rdbyte	local01, fp
1eb70     10 4E 85 F1 | 	sub	fp, #16
1eb74     04 1E CE F7 | 	test	local01, #4 wz
1eb78     68 00 90 5D |  if_ne	jmp	#LR__3487
1eb7c     04 4E 05 F1 | 	add	fp, #4
1eb80     A7 1E 02 FB | 	rdlong	local01, fp
1eb84     04 4E 85 F1 | 	sub	fp, #4
1eb88     06 1E 06 F1 | 	add	local01, #6
1eb8c     0F 1F C2 FA | 	rdbyte	local01, local01
1eb90     10 1E CE F7 | 	test	local01, #16 wz
1eb94     0C 4E 05 A1 |  if_e	add	fp, #12
1eb98     A7 0A 68 AC |  if_e	wrlong	#5, fp
1eb9c     0C 4E 85 A1 |  if_e	sub	fp, #12
1eba0                 | ' 				res = FR_NO_PATH; break;
1eba0     40 00 90 AD |  if_e	jmp	#LR__3487
1eba4     04 4E 05 F1 | 	add	fp, #4
1eba8     A7 20 02 FB | 	rdlong	local02, fp
1ebac     10 1F 02 F6 | 	mov	local01, local02
1ebb0     10 4E 05 F1 | 	add	fp, #16
1ebb4     A7 14 02 FB | 	rdlong	arg02, fp
1ebb8     0A 13 02 F6 | 	mov	arg01, arg02
1ebbc     34 14 06 F1 | 	add	arg02, #52
1ebc0     14 4E 85 F1 | 	sub	fp, #20
1ebc4     10 20 06 F1 | 	add	local02, #16
1ebc8     10 21 02 FB | 	rdlong	local02, local02
1ebcc     FF 21 06 F5 | 	and	local02, #511
1ebd0     10 15 02 F1 | 	add	arg02, local02
1ebd4     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1ebd8     08 1E 06 F1 | 	add	local01, #8
1ebdc     0F FB 61 FC | 	wrlong	result1, local01
1ebe0     E4 FE 9F FD | 	jmp	#LR__3485
1ebe4                 | LR__3487
1ebe4                 | LR__3488
1ebe4                 | ' 			}
1ebe4                 | ' #line 3090 "ff.c"
1ebe4                 | ' 			{
1ebe4                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1ebe4                 | ' 			}
1ebe4                 | ' 		}
1ebe4                 | ' 	}
1ebe4                 | ' 
1ebe4                 | ' 	return res;
1ebe4     0C 4E 05 F1 | 	add	fp, #12
1ebe8     A7 FA 01 FB | 	rdlong	result1, fp
1ebec     0C 4E 85 F1 | 	sub	fp, #12
1ebf0     A7 F0 03 F6 | 	mov	ptra, fp
1ebf4     B2 00 A0 FD | 	call	#popregs_
1ebf8                 | _fatfs_cc_follow_path_ret
1ebf8     2D 00 64 FD | 	ret
1ebfc                 | 
1ebfc                 | _fatfs_cc_get_ldnumber
1ebfc     01 00 66 F6 | 	neg	_var01, #1
1ec00     09 03 0A FB | 	rdlong	_var02, arg01 wz
1ec04     01 05 02 F6 | 	mov	_var03, _var02
1ec08     01 FA 65 A6 |  if_e	neg	result1, #1
1ec0c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1ec10     97 10 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
1ec14                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1ec14                 | LR__3490
1ec14     02 07 C2 FA | 	rdbyte	_var04, _var03
1ec18     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1ec1c     20 FA 15 F2 | 	cmp	result1, #32 wc
1ec20     01 04 06 F1 | 	add	_var03, #1
1ec24     03 09 02 36 |  if_ae	mov	_var05, _var04
1ec28     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1ec2c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1ec30     E0 FF 9F 1D |  if_a	jmp	#LR__3490
1ec34                 | LR__3491
1ec34     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1ec38     3A 06 0E F2 | 	cmp	_var04, #58 wz
1ec3c     40 00 90 5D |  if_ne	jmp	#LR__3493
1ec40     01 0A 06 F6 | 	mov	_var06, #1
1ec44     01 09 C2 FA | 	rdbyte	_var05, _var02
1ec48     30 08 16 F2 | 	cmp	_var05, #48 wc
1ec4c     1C 00 90 CD |  if_b	jmp	#LR__3492
1ec50     01 09 C2 FA | 	rdbyte	_var05, _var02
1ec54     3A 08 16 F2 | 	cmp	_var05, #58 wc
1ec58     01 0D 02 C6 |  if_b	mov	_var07, _var02
1ec5c     02 0C 06 C1 |  if_b	add	_var07, #2
1ec60     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1ec64     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1ec68     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1ec6c                 | LR__3492
1ec6c     01 0A 56 F2 | 	cmps	_var06, #1 wc
1ec70     05 01 02 C6 |  if_b	mov	_var01, _var06
1ec74     09 05 62 CC |  if_b	wrlong	_var03, arg01
1ec78                 | ' 			vol = i;
1ec78                 | ' 			*path = tt;
1ec78                 | ' 		}
1ec78                 | ' 		return vol;
1ec78     00 FB 01 F6 | 	mov	result1, _var01
1ec7c     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1ec80                 | LR__3493
1ec80                 | ' 	}
1ec80                 | ' #line 3170 "ff.c"
1ec80                 | ' 	vol = 0;
1ec80                 | ' 
1ec80                 | ' 	return vol;
1ec80     00 FA 05 F6 | 	mov	result1, #0
1ec84                 | _fatfs_cc_get_ldnumber_ret
1ec84     2D 00 64 FD | 	ret
1ec88                 | 
1ec88                 | _fatfs_cc_check_fs
1ec88     04 4A 05 F6 | 	mov	COUNT_, #4
1ec8c     A8 00 A0 FD | 	call	#pushregs_
1ec90     09 1F 02 F6 | 	mov	local01, arg01
1ec94     03 1E 06 F1 | 	add	local01, #3
1ec98     0F 01 48 FC | 	wrbyte	#0, local01
1ec9c     2D 1E 06 F1 | 	add	local01, #45
1eca0     FF FF FF FF 
1eca4     0F FF 6B FC | 	wrlong	##-1, local01
1eca8     30 1E 86 F1 | 	sub	local01, #48
1ecac     0F 13 02 F6 | 	mov	arg01, local01
1ecb0     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1ecb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1ecb8     04 FA 05 56 |  if_ne	mov	result1, #4
1ecbc     94 01 90 5D |  if_ne	jmp	#LR__3504
1ecc0     34 1E 06 F1 | 	add	local01, #52
1ecc4     0F 13 02 F6 | 	mov	arg01, local01
1ecc8     FE 13 06 F1 | 	add	arg01, #510
1eccc                 | ' {
1eccc                 | ' 
1eccc                 | ' 	return *((WORD*)ptr);
1eccc     09 21 E2 FA | 	rdword	local02, arg01
1ecd0     0F 23 C2 FA | 	rdbyte	local03, local01
1ecd4     34 1E 86 F1 | 	sub	local01, #52
1ecd8     11 25 E2 F8 | 	getbyte	local04, local03, #0
1ecdc     EB 24 0E F2 | 	cmp	local04, #235 wz
1ece0     11 17 02 56 |  if_ne	mov	arg03, local03
1ece4     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1ece8     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1ecec     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1ecf0     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1ecf4     44 01 90 5D |  if_ne	jmp	#LR__3503
1ecf8     10 25 32 F9 | 	getword	local04, local02, #0
1ecfc     55 00 00 FF 
1ed00     55 24 0E F2 | 	cmp	local04, ##43605 wz
1ed04     2C 00 90 5D |  if_ne	jmp	#LR__3500
1ed08     34 1E 06 F1 | 	add	local01, #52
1ed0c     0F 13 02 F6 | 	mov	arg01, local01
1ed10     34 1E 86 F1 | 	sub	local01, #52
1ed14     52 12 06 F1 | 	add	arg01, #82
1ed18     20 01 00 FF 
1ed1c     64 15 06 F6 | 	mov	arg02, ##@LR__4094
1ed20     08 16 06 F6 | 	mov	arg03, #8
1ed24     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1ed28     00 FA 0D F2 | 	cmp	result1, #0 wz
1ed2c                 | ' 			return 0;
1ed2c     00 FA 05 A6 |  if_e	mov	result1, #0
1ed30     20 01 90 AD |  if_e	jmp	#LR__3504
1ed34                 | LR__3500
1ed34     34 1E 06 F1 | 	add	local01, #52
1ed38     0F 13 02 F6 | 	mov	arg01, local01
1ed3c     0B 12 06 F1 | 	add	arg01, #11
1ed40                 | ' {
1ed40                 | ' 
1ed40                 | ' 	return *((WORD*)ptr);
1ed40     09 FB E1 FA | 	rdword	result1, arg01
1ed44     0D 1E 06 F1 | 	add	local01, #13
1ed48     0F 23 C2 FA | 	rdbyte	local03, local01
1ed4c     41 1E 86 F1 | 	sub	local01, #65
1ed50     FD 24 32 F9 | 	getword	local04, result1, #0
1ed54     FD 14 32 F9 | 	getword	arg02, result1, #0
1ed58     01 14 86 F1 | 	sub	arg02, #1
1ed5c     0A 25 CA F7 | 	test	local04, arg02 wz
1ed60     D8 00 90 5D |  if_ne	jmp	#LR__3502
1ed64     FD 14 32 F9 | 	getword	arg02, result1, #0
1ed68     01 00 00 FF 
1ed6c     00 14 16 F2 | 	cmp	arg02, ##512 wc
1ed70     C8 00 90 CD |  if_b	jmp	#LR__3502
1ed74     FD 14 32 F9 | 	getword	arg02, result1, #0
1ed78     01 00 00 FF 
1ed7c     01 14 16 F2 | 	cmp	arg02, ##513 wc
1ed80     B8 00 90 3D |  if_ae	jmp	#LR__3502
1ed84     11 13 02 F6 | 	mov	arg01, local03
1ed88     07 12 4E F7 | 	zerox	arg01, #7 wz
1ed8c     AC 00 90 AD |  if_e	jmp	#LR__3502
1ed90     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1ed94     11 23 E2 F8 | 	getbyte	local03, local03, #0
1ed98     01 22 86 F1 | 	sub	local03, #1
1ed9c     11 13 CA F7 | 	test	arg01, local03 wz
1eda0     98 00 90 5D |  if_ne	jmp	#LR__3502
1eda4     34 1E 06 F1 | 	add	local01, #52
1eda8     0F 13 02 F6 | 	mov	arg01, local01
1edac     34 1E 86 F1 | 	sub	local01, #52
1edb0     0E 12 06 F1 | 	add	arg01, #14
1edb4                 | ' {
1edb4                 | ' 
1edb4                 | ' 	return *((WORD*)ptr);
1edb4     09 FB E9 FA | 	rdword	result1, arg01 wz
1edb8     80 00 90 AD |  if_e	jmp	#LR__3502
1edbc     44 1E 06 F1 | 	add	local01, #68
1edc0     0F 13 C2 FA | 	rdbyte	arg01, local01
1edc4     44 1E 86 F1 | 	sub	local01, #68
1edc8     01 12 86 F1 | 	sub	arg01, #1
1edcc     02 12 16 F2 | 	cmp	arg01, #2 wc
1edd0     68 00 90 3D |  if_ae	jmp	#LR__3502
1edd4     34 1E 06 F1 | 	add	local01, #52
1edd8     0F 13 02 F6 | 	mov	arg01, local01
1eddc     34 1E 86 F1 | 	sub	local01, #52
1ede0     11 12 06 F1 | 	add	arg01, #17
1ede4                 | ' {
1ede4                 | ' 
1ede4                 | ' 	return *((WORD*)ptr);
1ede4     09 FB E9 FA | 	rdword	result1, arg01 wz
1ede8     50 00 90 AD |  if_e	jmp	#LR__3502
1edec     34 1E 06 F1 | 	add	local01, #52
1edf0     0F 13 02 F6 | 	mov	arg01, local01
1edf4     34 1E 86 F1 | 	sub	local01, #52
1edf8     13 12 06 F1 | 	add	arg01, #19
1edfc                 | ' {
1edfc                 | ' 
1edfc                 | ' 	return *((WORD*)ptr);
1edfc     09 FB E1 FA | 	rdword	result1, arg01
1ee00     FD 22 32 F9 | 	getword	local03, result1, #0
1ee04     80 22 16 F2 | 	cmp	local03, #128 wc
1ee08     20 00 90 3D |  if_ae	jmp	#LR__3501
1ee0c     34 1E 06 F1 | 	add	local01, #52
1ee10     0F 13 02 F6 | 	mov	arg01, local01
1ee14     34 1E 86 F1 | 	sub	local01, #52
1ee18     20 12 06 F1 | 	add	arg01, #32
1ee1c                 | ' {
1ee1c                 | ' 
1ee1c                 | ' 	return *((DWORD*)ptr);
1ee1c     09 FB 01 FB | 	rdlong	result1, arg01
1ee20     80 00 00 FF 
1ee24     00 FA 15 F2 | 	cmp	result1, ##65536 wc
1ee28     10 00 90 CD |  if_b	jmp	#LR__3502
1ee2c                 | LR__3501
1ee2c     4A 1E 06 F1 | 	add	local01, #74
1ee30                 | ' {
1ee30                 | ' 
1ee30                 | ' 	return *((WORD*)ptr);
1ee30     0F FB E9 FA | 	rdword	result1, local01 wz
1ee34                 | ' 			&& b != 0 && (b & (b - 1)) == 0
1ee34                 | ' 			&& ld_word(fs->win +  14 ) != 0
1ee34                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
1ee34                 | ' 			&& ld_word(fs->win +  17 ) != 0
1ee34                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
1ee34                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
1ee34                 | ' 				return 0;
1ee34     00 FA 05 56 |  if_ne	mov	result1, #0
1ee38     18 00 90 5D |  if_ne	jmp	#LR__3504
1ee3c                 | LR__3502
1ee3c                 | LR__3503
1ee3c                 | ' 		}
1ee3c                 | ' 	}
1ee3c                 | ' 	return sign == 0xAA55 ? 2 : 3;
1ee3c     10 23 32 F9 | 	getword	local03, local02, #0
1ee40     55 00 00 FF 
1ee44     55 22 0E F2 | 	cmp	local03, ##43605 wz
1ee48     02 24 06 A6 |  if_e	mov	local04, #2
1ee4c     03 24 06 56 |  if_ne	mov	local04, #3
1ee50     12 FB 01 F6 | 	mov	result1, local04
1ee54                 | LR__3504
1ee54     A7 F0 03 F6 | 	mov	ptra, fp
1ee58     B2 00 A0 FD | 	call	#popregs_
1ee5c                 | _fatfs_cc_check_fs_ret
1ee5c     2D 00 64 FD | 	ret
1ee60                 | 
1ee60                 | _fatfs_cc_find_volume
1ee60     05 4A 05 F6 | 	mov	COUNT_, #5
1ee64     A8 00 A0 FD | 	call	#pushregs_
1ee68     24 F0 07 F1 | 	add	ptra, #36
1ee6c     09 1F 02 F6 | 	mov	local01, arg01
1ee70     0A 21 02 F6 | 	mov	local02, arg02
1ee74     0F 13 02 F6 | 	mov	arg01, local01
1ee78     00 14 06 F6 | 	mov	arg02, #0
1ee7c     08 FE BF FD | 	call	#_fatfs_cc_check_fs
1ee80     02 FA 0D F2 | 	cmp	result1, #2 wz
1ee84     0C 00 90 AD |  if_e	jmp	#LR__3510
1ee88     03 FA 15 F2 | 	cmp	result1, #3 wc
1ee8c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
1ee90     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3518
1ee94                 | LR__3510
1ee94                 | ' 	for (i = 0; i < 4; i++) {
1ee94     00 22 06 F6 | 	mov	local03, #0
1ee98     97 26 48 FB | 	callpa	#(@LR__3512-@LR__3511)>>2,fcache_load_ptr_
1ee9c                 | LR__3511
1ee9c     04 22 16 F2 | 	cmp	local03, #4 wc
1eea0     44 00 90 3D |  if_ae	jmp	#LR__3513
1eea4     11 25 02 F6 | 	mov	local04, local03
1eea8     02 24 66 F0 | 	shl	local04, #2
1eeac     14 4E 05 F1 | 	add	fp, #20
1eeb0     A7 24 02 F1 | 	add	local04, fp
1eeb4     34 1E 06 F1 | 	add	local01, #52
1eeb8     0F 13 02 F6 | 	mov	arg01, local01
1eebc     34 1E 86 F1 | 	sub	local01, #52
1eec0     BE 13 06 F1 | 	add	arg01, #446
1eec4     11 15 02 F6 | 	mov	arg02, local03
1eec8     04 14 66 F0 | 	shl	arg02, #4
1eecc     0A 13 02 F1 | 	add	arg01, arg02
1eed0     08 12 06 F1 | 	add	arg01, #8
1eed4                 | ' {
1eed4                 | ' 
1eed4                 | ' 	return *((DWORD*)ptr);
1eed4     09 FB 01 FB | 	rdlong	result1, arg01
1eed8     14 4E 85 F1 | 	sub	fp, #20
1eedc     12 FB 61 FC | 	wrlong	result1, local04
1eee0     01 22 06 F1 | 	add	local03, #1
1eee4     B4 FF 9F FD | 	jmp	#LR__3511
1eee8                 | LR__3512
1eee8                 | LR__3513
1eee8     00 20 0E F2 | 	cmp	local02, #0 wz
1eeec     10 25 02 56 |  if_ne	mov	local04, local02
1eef0     01 24 86 51 |  if_ne	sub	local04, #1
1eef4     00 24 06 A6 |  if_e	mov	local04, #0
1eef8     12 23 02 F6 | 	mov	local03, local04
1eefc                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
1eefc                 | ' 	}
1eefc                 | ' 	i = part ? part - 1 : 0;
1eefc                 | ' 	do {
1eefc                 | LR__3514
1eefc     11 25 02 F6 | 	mov	local04, local03
1ef00     02 24 66 F0 | 	shl	local04, #2
1ef04     14 4E 05 F1 | 	add	fp, #20
1ef08     A7 24 02 F1 | 	add	local04, fp
1ef0c     12 25 0A FB | 	rdlong	local04, local04 wz
1ef10     14 4E 85 F1 | 	sub	fp, #20
1ef14     28 00 90 AD |  if_e	jmp	#LR__3515
1ef18     11 25 02 F6 | 	mov	local04, local03
1ef1c     02 24 66 F0 | 	shl	local04, #2
1ef20     14 4E 05 F1 | 	add	fp, #20
1ef24     A7 24 02 F1 | 	add	local04, fp
1ef28     12 15 02 FB | 	rdlong	arg02, local04
1ef2c     0F 13 02 F6 | 	mov	arg01, local01
1ef30     14 4E 85 F1 | 	sub	fp, #20
1ef34     50 FD BF FD | 	call	#_fatfs_cc_check_fs
1ef38     FD 24 02 F6 | 	mov	local04, result1
1ef3c     04 00 90 FD | 	jmp	#LR__3516
1ef40                 | LR__3515
1ef40     03 24 06 F6 | 	mov	local04, #3
1ef44                 | LR__3516
1ef44     12 27 02 F6 | 	mov	local05, local04
1ef48     00 20 0E F2 | 	cmp	local02, #0 wz
1ef4c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
1ef50     0C 00 90 8D |  if_c_and_z	jmp	#LR__3517
1ef54     01 22 06 A1 |  if_e	add	local03, #1
1ef58     04 22 16 A2 |  if_e	cmp	local03, #4 wc
1ef5c     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3514
1ef60                 | LR__3517
1ef60                 | ' 	return fmt;
1ef60     13 FB 01 F6 | 	mov	result1, local05
1ef64                 | LR__3518
1ef64     A7 F0 03 F6 | 	mov	ptra, fp
1ef68     B2 00 A0 FD | 	call	#popregs_
1ef6c                 | _fatfs_cc_find_volume_ret
1ef6c     2D 00 64 FD | 	ret
1ef70                 | 
1ef70                 | _fatfs_cc_mount_volume
1ef70     0B 4A 05 F6 | 	mov	COUNT_, #11
1ef74     A8 00 A0 FD | 	call	#pushregs_
1ef78     0A 1F 02 F6 | 	mov	local01, arg02
1ef7c     0B 21 02 F6 | 	mov	local02, arg03
1ef80     0F 01 68 FC | 	wrlong	#0, local01
1ef84     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
1ef88     FD 22 02 F6 | 	mov	local03, result1
1ef8c     00 22 56 F2 | 	cmps	local03, #0 wc
1ef90     0B FA 05 C6 |  if_b	mov	result1, #11
1ef94     3C 05 90 CD |  if_b	jmp	#LR__3530
1ef98     11 17 02 F6 | 	mov	arg03, local03
1ef9c     02 16 66 F0 | 	shl	arg03, #2
1efa0     F2 16 02 F1 | 	add	arg03, objptr
1efa4     0B 25 0A FB | 	rdlong	local04, arg03 wz
1efa8     0C FA 05 A6 |  if_e	mov	result1, #12
1efac     24 05 90 AD |  if_e	jmp	#LR__3530
1efb0     0F 25 62 FC | 	wrlong	local04, local01
1efb4     10 21 E2 F8 | 	getbyte	local02, local02, #0
1efb8     FE 20 06 F5 | 	and	local02, #254
1efbc     12 17 CA FA | 	rdbyte	arg03, local04 wz
1efc0     4C 00 90 AD |  if_e	jmp	#LR__3521
1efc4     01 24 06 F1 | 	add	local04, #1
1efc8     12 13 CA FA | 	rdbyte	arg01, local04 wz
1efcc     01 24 86 F1 | 	sub	local04, #1
1efd0     01 FA 05 56 |  if_ne	mov	result1, #1
1efd4                 | ' 
1efd4                 | ' 	return Stat;
1efd4     01 00 00 AF 
1efd8     20 E4 05 A1 |  if_e	add	objptr, ##544
1efdc     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1efe0     01 00 00 AF 
1efe4     20 E4 85 A1 |  if_e	sub	objptr, ##544
1efe8     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
1efec     01 16 CE F7 | 	test	arg03, #1 wz
1eff0     1C 00 90 5D |  if_ne	jmp	#LR__3520
1eff4     00 20 0E F2 | 	cmp	local02, #0 wz
1eff8     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
1effc     04 FA CD 57 |  if_ne	test	result1, #4 wz
1f000                 | ' 				return FR_WRITE_PROTECTED;
1f000     0A FA 05 56 |  if_ne	mov	result1, #10
1f004     CC 04 90 5D |  if_ne	jmp	#LR__3530
1f008                 | ' 			}
1f008                 | ' 			return FR_OK;
1f008     00 FA 05 F6 | 	mov	result1, #0
1f00c     C4 04 90 FD | 	jmp	#LR__3530
1f010                 | LR__3520
1f010                 | LR__3521
1f010     12 01 48 FC | 	wrbyte	#0, local04
1f014     01 24 06 F1 | 	add	local04, #1
1f018     12 23 42 FC | 	wrbyte	local03, local04
1f01c     12 13 C2 FA | 	rdbyte	arg01, local04
1f020     01 24 86 F1 | 	sub	local04, #1
1f024     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
1f028     FD 16 02 F6 | 	mov	arg03, result1
1f02c     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
1f030     01 26 CE F7 | 	test	local05, #1 wz
1f034                 | ' 		return FR_NOT_READY;
1f034     03 FA 05 56 |  if_ne	mov	result1, #3
1f038     98 04 90 5D |  if_ne	jmp	#LR__3530
1f03c     00 20 0E F2 | 	cmp	local02, #0 wz
1f040     0B 27 02 56 |  if_ne	mov	local05, arg03
1f044     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
1f048     04 26 CE 57 |  if_ne	test	local05, #4 wz
1f04c                 | ' 		return FR_WRITE_PROTECTED;
1f04c     0A FA 05 56 |  if_ne	mov	result1, #10
1f050     80 04 90 5D |  if_ne	jmp	#LR__3530
1f054     12 13 02 F6 | 	mov	arg01, local04
1f058     00 14 06 F6 | 	mov	arg02, #0
1f05c     00 FE BF FD | 	call	#_fatfs_cc_find_volume
1f060     FD 12 02 F6 | 	mov	arg01, result1
1f064     04 12 0E F2 | 	cmp	arg01, #4 wz
1f068     01 FA 05 A6 |  if_e	mov	result1, #1
1f06c     64 04 90 AD |  if_e	jmp	#LR__3530
1f070     02 12 16 F2 | 	cmp	arg01, #2 wc
1f074     0D FA 05 36 |  if_ae	mov	result1, #13
1f078     58 04 90 3D |  if_ae	jmp	#LR__3530
1f07c     30 24 06 F1 | 	add	local04, #48
1f080     12 29 02 FB | 	rdlong	local06, local04
1f084     04 24 06 F1 | 	add	local04, #4
1f088     12 13 02 F6 | 	mov	arg01, local04
1f08c     34 24 86 F1 | 	sub	local04, #52
1f090     0B 12 06 F1 | 	add	arg01, #11
1f094                 | ' {
1f094                 | ' 
1f094                 | ' 	return *((WORD*)ptr);
1f094     09 FB E1 FA | 	rdword	result1, arg01
1f098     01 00 00 FF 
1f09c     00 FA 0D F2 | 	cmp	result1, ##512 wz
1f0a0     0D FA 05 56 |  if_ne	mov	result1, #13
1f0a4     2C 04 90 5D |  if_ne	jmp	#LR__3530
1f0a8     34 24 06 F1 | 	add	local04, #52
1f0ac     12 13 02 F6 | 	mov	arg01, local04
1f0b0     34 24 86 F1 | 	sub	local04, #52
1f0b4     16 12 06 F1 | 	add	arg01, #22
1f0b8                 | ' {
1f0b8                 | ' 
1f0b8                 | ' 	return *((WORD*)ptr);
1f0b8     09 FB E1 FA | 	rdword	result1, arg01
1f0bc     FD 2A 0A F6 | 	mov	local07, result1 wz
1f0c0     18 00 90 5D |  if_ne	jmp	#LR__3522
1f0c4     34 24 06 F1 | 	add	local04, #52
1f0c8     12 13 02 F6 | 	mov	arg01, local04
1f0cc     34 24 86 F1 | 	sub	local04, #52
1f0d0     24 12 06 F1 | 	add	arg01, #36
1f0d4                 | ' {
1f0d4                 | ' 
1f0d4                 | ' 	return *((DWORD*)ptr);
1f0d4     09 FB 01 FB | 	rdlong	result1, arg01
1f0d8     FD 2A 02 F6 | 	mov	local07, result1
1f0dc                 | LR__3522
1f0dc     1C 24 06 F1 | 	add	local04, #28
1f0e0     12 2B 62 FC | 	wrlong	local07, local04
1f0e4     28 24 06 F1 | 	add	local04, #40
1f0e8     12 27 C2 FA | 	rdbyte	local05, local04
1f0ec     42 24 86 F1 | 	sub	local04, #66
1f0f0     12 27 42 FC | 	wrbyte	local05, local04
1f0f4     12 27 C2 FA | 	rdbyte	local05, local04
1f0f8     02 24 86 F1 | 	sub	local04, #2
1f0fc     01 26 0E F2 | 	cmp	local05, #1 wz
1f100     02 24 06 51 |  if_ne	add	local04, #2
1f104     12 27 C2 5A |  if_ne	rdbyte	local05, local04
1f108     02 24 86 51 |  if_ne	sub	local04, #2
1f10c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
1f110     0D FA 05 56 |  if_ne	mov	result1, #13
1f114     BC 03 90 5D |  if_ne	jmp	#LR__3530
1f118     02 24 06 F1 | 	add	local04, #2
1f11c     12 27 C2 FA | 	rdbyte	local05, local04
1f120     13 2B 02 FD | 	qmul	local07, local05
1f124     3F 24 06 F1 | 	add	local04, #63
1f128     12 27 C2 FA | 	rdbyte	local05, local04
1f12c     37 24 86 F1 | 	sub	local04, #55
1f130     12 27 52 FC | 	wrword	local05, local04
1f134     12 27 EA FA | 	rdword	local05, local04 wz
1f138     0A 24 86 F1 | 	sub	local04, #10
1f13c     18 2A 62 FD | 	getqx	local07
1f140     20 00 90 AD |  if_e	jmp	#LR__3523
1f144     0A 24 06 F1 | 	add	local04, #10
1f148     12 27 E2 FA | 	rdword	local05, local04
1f14c     13 23 32 F9 | 	getword	local03, local05, #0
1f150     0A 24 86 F1 | 	sub	local04, #10
1f154     13 27 32 F9 | 	getword	local05, local05, #0
1f158     01 26 86 F1 | 	sub	local05, #1
1f15c     13 23 CA F7 | 	test	local03, local05 wz
1f160     08 00 90 AD |  if_e	jmp	#LR__3524
1f164                 | LR__3523
1f164     0D FA 05 F6 | 	mov	result1, #13
1f168     68 03 90 FD | 	jmp	#LR__3530
1f16c                 | LR__3524
1f16c     34 24 06 F1 | 	add	local04, #52
1f170     12 13 02 F6 | 	mov	arg01, local04
1f174     11 12 06 F1 | 	add	arg01, #17
1f178                 | ' {
1f178                 | ' 
1f178                 | ' 	return *((WORD*)ptr);
1f178     09 FB E1 FA | 	rdword	result1, arg01
1f17c     2C 24 86 F1 | 	sub	local04, #44
1f180     12 FB 51 FC | 	wrword	result1, local04
1f184     12 27 E2 FA | 	rdword	local05, local04
1f188     08 24 86 F1 | 	sub	local04, #8
1f18c     13 13 52 F6 | 	abs	arg01, local05 wc
1f190     09 13 42 F8 | 	getnib	arg01, arg01, #0
1f194     09 13 8A F6 | 	negc	arg01, arg01 wz
1f198     0D FA 05 56 |  if_ne	mov	result1, #13
1f19c     34 03 90 5D |  if_ne	jmp	#LR__3530
1f1a0     34 24 06 F1 | 	add	local04, #52
1f1a4     12 13 02 F6 | 	mov	arg01, local04
1f1a8     34 24 86 F1 | 	sub	local04, #52
1f1ac     13 12 06 F1 | 	add	arg01, #19
1f1b0                 | ' {
1f1b0                 | ' 
1f1b0                 | ' 	return *((WORD*)ptr);
1f1b0     09 FB E1 FA | 	rdword	result1, arg01
1f1b4     FD 2C 0A F6 | 	mov	local08, result1 wz
1f1b8     34 24 06 A1 |  if_e	add	local04, #52
1f1bc     12 13 02 A6 |  if_e	mov	arg01, local04
1f1c0     34 24 86 A1 |  if_e	sub	local04, #52
1f1c4     20 12 06 A1 |  if_e	add	arg01, #32
1f1c8                 | ' {
1f1c8                 | ' 
1f1c8                 | ' 	return *((DWORD*)ptr);
1f1c8     09 2D 02 AB |  if_e	rdlong	local08, arg01
1f1cc     34 24 06 F1 | 	add	local04, #52
1f1d0     12 13 02 F6 | 	mov	arg01, local04
1f1d4     34 24 86 F1 | 	sub	local04, #52
1f1d8     0E 12 06 F1 | 	add	arg01, #14
1f1dc                 | ' {
1f1dc                 | ' 
1f1dc                 | ' 	return *((WORD*)ptr);
1f1dc     09 FB E1 FA | 	rdword	result1, arg01
1f1e0     FD 12 02 F6 | 	mov	arg01, result1
1f1e4     09 27 02 F6 | 	mov	local05, arg01
1f1e8     0F 26 4E F7 | 	zerox	local05, #15 wz
1f1ec     0D FA 05 A6 |  if_e	mov	result1, #13
1f1f0     E0 02 90 AD |  if_e	jmp	#LR__3530
1f1f4     09 2F 32 F9 | 	getword	local09, arg01, #0
1f1f8     15 2F 02 F1 | 	add	local09, local07
1f1fc     08 24 06 F1 | 	add	local04, #8
1f200     12 27 E2 FA | 	rdword	local05, local04
1f204     08 24 86 F1 | 	sub	local04, #8
1f208     13 27 52 F6 | 	abs	local05, local05 wc
1f20c     04 26 46 F0 | 	shr	local05, #4
1f210     13 2F 82 F3 | 	sumc	local09, local05
1f214     17 2D 12 F2 | 	cmp	local08, local09 wc
1f218     0D FA 05 C6 |  if_b	mov	result1, #13
1f21c     B4 02 90 CD |  if_b	jmp	#LR__3530
1f220     17 2D 82 F1 | 	sub	local08, local09
1f224     0A 24 06 F1 | 	add	local04, #10
1f228     12 27 E2 FA | 	rdword	local05, local04
1f22c     13 2D 12 FD | 	qdiv	local08, local05
1f230     0A 24 86 F1 | 	sub	local04, #10
1f234     18 26 62 FD | 	getqx	local05
1f238     00 26 0E F2 | 	cmp	local05, #0 wz
1f23c     0D FA 05 A6 |  if_e	mov	result1, #13
1f240     90 02 90 AD |  if_e	jmp	#LR__3530
1f244     00 30 06 F6 | 	mov	local10, #0
1f248     FF FF 07 FF 
1f24c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
1f250     03 30 06 C6 |  if_b	mov	local10, #3
1f254     7F 00 00 FF 
1f258     F6 27 16 F2 | 	cmp	local05, ##65526 wc
1f25c     02 30 06 C6 |  if_b	mov	local10, #2
1f260     07 00 00 FF 
1f264     F6 27 16 F2 | 	cmp	local05, ##4086 wc
1f268     01 30 06 C6 |  if_b	mov	local10, #1
1f26c     00 30 0E F2 | 	cmp	local10, #0 wz
1f270     0D FA 05 A6 |  if_e	mov	result1, #13
1f274     5C 02 90 AD |  if_e	jmp	#LR__3530
1f278     02 26 06 F1 | 	add	local05, #2
1f27c     18 24 06 F1 | 	add	local04, #24
1f280     12 27 62 FC | 	wrlong	local05, local04
1f284     08 24 06 F1 | 	add	local04, #8
1f288     12 29 62 FC | 	wrlong	local06, local04
1f28c     14 27 02 F6 | 	mov	local05, local06
1f290     09 13 32 F9 | 	getword	arg01, arg01, #0
1f294     09 27 02 F1 | 	add	local05, arg01
1f298     04 24 06 F1 | 	add	local04, #4
1f29c     12 27 62 FC | 	wrlong	local05, local04
1f2a0     14 27 02 F6 | 	mov	local05, local06
1f2a4     17 27 02 F1 | 	add	local05, local09
1f2a8     08 24 06 F1 | 	add	local04, #8
1f2ac     12 27 62 FC | 	wrlong	local05, local04
1f2b0     2C 24 86 F1 | 	sub	local04, #44
1f2b4     03 30 0E F2 | 	cmp	local10, #3 wz
1f2b8     5C 00 90 5D |  if_ne	jmp	#LR__3525
1f2bc     34 24 06 F1 | 	add	local04, #52
1f2c0     12 13 02 F6 | 	mov	arg01, local04
1f2c4     34 24 86 F1 | 	sub	local04, #52
1f2c8     2A 12 06 F1 | 	add	arg01, #42
1f2cc                 | ' {
1f2cc                 | ' 
1f2cc                 | ' 	return *((WORD*)ptr);
1f2cc     09 FB E9 FA | 	rdword	result1, arg01 wz
1f2d0     0D FA 05 56 |  if_ne	mov	result1, #13
1f2d4     FC 01 90 5D |  if_ne	jmp	#LR__3530
1f2d8     08 24 06 F1 | 	add	local04, #8
1f2dc     12 27 EA FA | 	rdword	local05, local04 wz
1f2e0     08 24 86 F1 | 	sub	local04, #8
1f2e4     0D FA 05 56 |  if_ne	mov	result1, #13
1f2e8     E8 01 90 5D |  if_ne	jmp	#LR__3530
1f2ec     34 24 06 F1 | 	add	local04, #52
1f2f0     12 13 02 F6 | 	mov	arg01, local04
1f2f4     2C 12 06 F1 | 	add	arg01, #44
1f2f8                 | ' {
1f2f8                 | ' 
1f2f8                 | ' 	return *((DWORD*)ptr);
1f2f8     09 FB 01 FB | 	rdlong	result1, arg01
1f2fc     0C 24 86 F1 | 	sub	local04, #12
1f300     12 FB 61 FC | 	wrlong	result1, local04
1f304     10 24 86 F1 | 	sub	local04, #16
1f308     12 33 02 FB | 	rdlong	local11, local04
1f30c     18 24 86 F1 | 	sub	local04, #24
1f310     02 32 66 F0 | 	shl	local11, #2
1f314     6C 00 90 FD | 	jmp	#LR__3527
1f318                 | LR__3525
1f318     08 24 06 F1 | 	add	local04, #8
1f31c     12 27 EA FA | 	rdword	local05, local04 wz
1f320     08 24 86 F1 | 	sub	local04, #8
1f324     0D FA 05 A6 |  if_e	mov	result1, #13
1f328     A8 01 90 AD |  if_e	jmp	#LR__3530
1f32c     24 24 06 F1 | 	add	local04, #36
1f330     12 27 02 FB | 	rdlong	local05, local04
1f334     15 27 02 F1 | 	add	local05, local07
1f338     04 24 06 F1 | 	add	local04, #4
1f33c     12 27 62 FC | 	wrlong	local05, local04
1f340     28 24 86 F1 | 	sub	local04, #40
1f344     02 30 0E F2 | 	cmp	local10, #2 wz
1f348     18 24 06 A1 |  if_e	add	local04, #24
1f34c     12 27 02 AB |  if_e	rdlong	local05, local04
1f350     18 24 86 A1 |  if_e	sub	local04, #24
1f354     01 26 66 A0 |  if_e	shl	local05, #1
1f358     24 00 90 AD |  if_e	jmp	#LR__3526
1f35c     18 24 06 F1 | 	add	local04, #24
1f360     12 33 02 FB | 	rdlong	local11, local04
1f364     19 27 02 F6 | 	mov	local05, local11
1f368     01 26 66 F0 | 	shl	local05, #1
1f36c     19 27 02 F1 | 	add	local05, local11
1f370     01 26 46 F0 | 	shr	local05, #1
1f374     18 24 86 F1 | 	sub	local04, #24
1f378     01 32 06 F5 | 	and	local11, #1
1f37c     19 27 02 F1 | 	add	local05, local11
1f380                 | LR__3526
1f380     13 33 02 F6 | 	mov	local11, local05
1f384                 | LR__3527
1f384     FF 33 06 F1 | 	add	local11, #511
1f388     09 32 46 F0 | 	shr	local11, #9
1f38c     1C 24 06 F1 | 	add	local04, #28
1f390     12 17 02 FB | 	rdlong	arg03, local04
1f394     1C 24 86 F1 | 	sub	local04, #28
1f398     19 17 12 F2 | 	cmp	arg03, local11 wc
1f39c     0D FA 05 C6 |  if_b	mov	result1, #13
1f3a0     30 01 90 CD |  if_b	jmp	#LR__3530
1f3a4     14 24 06 F1 | 	add	local04, #20
1f3a8     FF FF FF FF 
1f3ac     12 FF 6B FC | 	wrlong	##-1, local04
1f3b0     04 24 86 F1 | 	sub	local04, #4
1f3b4     FF FF FF FF 
1f3b8     12 FF 6B FC | 	wrlong	##-1, local04
1f3bc     0C 24 86 F1 | 	sub	local04, #12
1f3c0     12 01 49 FC | 	wrbyte	#128, local04
1f3c4     04 24 86 F1 | 	sub	local04, #4
1f3c8     03 30 0E F2 | 	cmp	local10, #3 wz
1f3cc     D0 00 90 5D |  if_ne	jmp	#LR__3529
1f3d0     34 24 06 F1 | 	add	local04, #52
1f3d4     12 13 02 F6 | 	mov	arg01, local04
1f3d8     34 24 86 F1 | 	sub	local04, #52
1f3dc     30 12 06 F1 | 	add	arg01, #48
1f3e0                 | ' {
1f3e0                 | ' 
1f3e0                 | ' 	return *((WORD*)ptr);
1f3e0     09 FB E1 FA | 	rdword	result1, arg01
1f3e4     FD 26 32 F9 | 	getword	local05, result1, #0
1f3e8     01 26 0E F2 | 	cmp	local05, #1 wz
1f3ec     B0 00 90 5D |  if_ne	jmp	#LR__3529
1f3f0     01 28 06 F1 | 	add	local06, #1
1f3f4     12 13 02 F6 | 	mov	arg01, local04
1f3f8     14 15 02 F6 | 	mov	arg02, local06
1f3fc     CC CD BF FD | 	call	#_fatfs_cc_move_window
1f400     00 FA 0D F2 | 	cmp	result1, #0 wz
1f404     98 00 90 5D |  if_ne	jmp	#LR__3529
1f408     04 24 06 F1 | 	add	local04, #4
1f40c     12 01 48 FC | 	wrbyte	#0, local04
1f410     30 24 06 F1 | 	add	local04, #48
1f414     12 13 02 F6 | 	mov	arg01, local04
1f418     34 24 86 F1 | 	sub	local04, #52
1f41c     FE 13 06 F1 | 	add	arg01, #510
1f420                 | ' {
1f420                 | ' 
1f420                 | ' 	return *((WORD*)ptr);
1f420     09 FB E1 FA | 	rdword	result1, arg01
1f424     FD 26 32 F9 | 	getword	local05, result1, #0
1f428     55 00 00 FF 
1f42c     55 26 0E F2 | 	cmp	local05, ##43605 wz
1f430     34 24 06 A1 |  if_e	add	local04, #52
1f434     12 13 02 A6 |  if_e	mov	arg01, local04
1f438     34 24 86 A1 |  if_e	sub	local04, #52
1f43c                 | ' {
1f43c                 | ' 
1f43c                 | ' 	return *((DWORD*)ptr);
1f43c     09 FB 01 AB |  if_e	rdlong	result1, arg01
1f440     A9 B0 20 AF 
1f444     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
1f448     54 00 90 5D |  if_ne	jmp	#LR__3528
1f44c     34 24 06 F1 | 	add	local04, #52
1f450     12 13 02 F6 | 	mov	arg01, local04
1f454     34 24 86 F1 | 	sub	local04, #52
1f458     E4 13 06 F1 | 	add	arg01, #484
1f45c                 | ' {
1f45c                 | ' 
1f45c                 | ' 	return *((DWORD*)ptr);
1f45c     09 FB 01 FB | 	rdlong	result1, arg01
1f460     B9 A0 30 FF 
1f464     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
1f468     34 00 90 5D |  if_ne	jmp	#LR__3528
1f46c     34 24 06 F1 | 	add	local04, #52
1f470     12 13 02 F6 | 	mov	arg01, local04
1f474     E8 13 06 F1 | 	add	arg01, #488
1f478                 | ' {
1f478                 | ' 
1f478                 | ' 	return *((DWORD*)ptr);
1f478     09 FB 01 FB | 	rdlong	result1, arg01
1f47c     20 24 86 F1 | 	sub	local04, #32
1f480     12 FB 61 FC | 	wrlong	result1, local04
1f484     20 24 06 F1 | 	add	local04, #32
1f488     12 13 02 F6 | 	mov	arg01, local04
1f48c     EC 13 06 F1 | 	add	arg01, #492
1f490                 | ' {
1f490                 | ' 
1f490                 | ' 	return *((DWORD*)ptr);
1f490     09 FB 01 FB | 	rdlong	result1, arg01
1f494     24 24 86 F1 | 	sub	local04, #36
1f498     12 FB 61 FC | 	wrlong	result1, local04
1f49c     10 24 86 F1 | 	sub	local04, #16
1f4a0                 | LR__3528
1f4a0                 | LR__3529
1f4a0     12 31 42 FC | 	wrbyte	local10, local04
1f4a4     04 E4 05 F1 | 	add	objptr, #4
1f4a8     F2 26 E2 FA | 	rdword	local05, objptr
1f4ac     01 26 06 F1 | 	add	local05, #1
1f4b0     F2 26 52 FC | 	wrword	local05, objptr
1f4b4     F2 32 E2 FA | 	rdword	local11, objptr
1f4b8     06 24 06 F1 | 	add	local04, #6
1f4bc     12 33 52 FC | 	wrword	local11, local04
1f4c0     04 E4 05 F1 | 	add	objptr, #4
1f4c4     06 24 06 F1 | 	add	local04, #6
1f4c8     12 E5 61 FC | 	wrlong	objptr, local04
1f4cc                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
1f4cc                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
1f4cc                 | ' 			{
1f4cc                 | ' 
1f4cc                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
1f4cc                 | ' 
1f4cc                 | ' 
1f4cc                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
1f4cc                 | ' 
1f4cc                 | ' 			}
1f4cc                 | ' 		}
1f4cc                 | ' 
1f4cc                 | ' 
1f4cc                 | ' 	}
1f4cc                 | ' 
1f4cc                 | ' 	fs->fs_type = (BYTE)fmt;
1f4cc                 | ' 	fs->id = ++Fsid;
1f4cc                 | ' 
1f4cc                 | ' 	fs->lfnbuf = LfnBuf;
1f4cc                 | ' #line 3567 "ff.c"
1f4cc                 | ' 	return FR_OK;
1f4cc     00 FA 05 F6 | 	mov	result1, #0
1f4d0     08 E4 85 F1 | 	sub	objptr, #8
1f4d4                 | LR__3530
1f4d4     A7 F0 03 F6 | 	mov	ptra, fp
1f4d8     B2 00 A0 FD | 	call	#popregs_
1f4dc                 | _fatfs_cc_mount_volume_ret
1f4dc     2D 00 64 FD | 	ret
1f4e0                 | 
1f4e0                 | _fatfs_cc_validate
1f4e0     09 01 0A F6 | 	mov	_var01, arg01 wz
1f4e4     09 02 06 F6 | 	mov	_var02, #9
1f4e8     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
1f4ec     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
1f4f0     50 00 90 AD |  if_e	jmp	#LR__3540
1f4f4     04 00 06 F1 | 	add	_var01, #4
1f4f8     00 07 E2 FA | 	rdword	_var04, _var01
1f4fc     04 00 86 F1 | 	sub	_var01, #4
1f500     00 13 02 FB | 	rdlong	arg01, _var01
1f504     06 12 06 F1 | 	add	arg01, #6
1f508     09 FB E1 FA | 	rdword	result1, arg01
1f50c     FD 06 0A F2 | 	cmp	_var04, result1 wz
1f510     30 00 90 5D |  if_ne	jmp	#LR__3540
1f514     00 07 02 FB | 	rdlong	_var04, _var01
1f518     01 06 06 F1 | 	add	_var04, #1
1f51c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
1f520     01 FA 05 56 |  if_ne	mov	result1, #1
1f524                 | ' 
1f524                 | ' 	return Stat;
1f524     01 00 00 AF 
1f528     20 E4 05 A1 |  if_e	add	objptr, ##544
1f52c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1f530     01 00 00 AF 
1f534     20 E4 85 A1 |  if_e	sub	objptr, ##544
1f538     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
1f53c     01 04 CE F7 | 	test	_var03, #1 wz
1f540     00 02 06 A6 |  if_e	mov	_var02, #0
1f544                 | LR__3540
1f544     00 02 0E F2 | 	cmp	_var02, #0 wz
1f548     00 05 02 AB |  if_e	rdlong	_var03, _var01
1f54c     00 04 06 56 |  if_ne	mov	_var03, #0
1f550     0A 05 62 FC | 	wrlong	_var03, arg02
1f554                 | ' 			res = FR_OK;
1f554                 | ' 		}
1f554                 | ' 
1f554                 | ' 	}
1f554                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
1f554                 | ' 	return res;
1f554     01 FB 01 F6 | 	mov	result1, _var02
1f558                 | _fatfs_cc_validate_ret
1f558     2D 00 64 FD | 	ret
1f55c                 | 
1f55c                 | _fatfs_cc_f_mount
1f55c     01 4A 05 F6 | 	mov	COUNT_, #1
1f560     A8 00 A0 FD | 	call	#pushregs_
1f564     20 F0 07 F1 | 	add	ptra, #32
1f568     04 4E 05 F1 | 	add	fp, #4
1f56c     A7 12 62 FC | 	wrlong	arg01, fp
1f570     04 4E 05 F1 | 	add	fp, #4
1f574     A7 14 62 FC | 	wrlong	arg02, fp
1f578     04 4E 05 F1 | 	add	fp, #4
1f57c     A7 16 42 FC | 	wrbyte	arg03, fp
1f580     04 4E 85 F1 | 	sub	fp, #4
1f584     A7 16 02 FB | 	rdlong	arg03, fp
1f588     14 4E 05 F1 | 	add	fp, #20
1f58c     A7 16 62 FC | 	wrlong	arg03, fp
1f590     A7 12 02 F6 | 	mov	arg01, fp
1f594     1C 4E 85 F1 | 	sub	fp, #28
1f598     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
1f59c     14 4E 05 F1 | 	add	fp, #20
1f5a0     A7 FA 61 FC | 	wrlong	result1, fp
1f5a4     14 4E 85 F1 | 	sub	fp, #20
1f5a8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f5ac     0B FA 05 C6 |  if_b	mov	result1, #11
1f5b0     C0 00 90 CD |  if_b	jmp	#LR__3551
1f5b4     14 4E 05 F1 | 	add	fp, #20
1f5b8     A7 16 02 FB | 	rdlong	arg03, fp
1f5bc     02 16 66 F0 | 	shl	arg03, #2
1f5c0     F2 16 02 F1 | 	add	arg03, objptr
1f5c4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1f5c8     04 4E 85 F1 | 	sub	fp, #4
1f5cc     A7 16 62 FC | 	wrlong	arg03, fp
1f5d0     10 4E 85 F1 | 	sub	fp, #16
1f5d4     28 00 90 AD |  if_e	jmp	#LR__3550
1f5d8     10 4E 05 F1 | 	add	fp, #16
1f5dc     A7 16 02 FB | 	rdlong	arg03, fp
1f5e0     10 4E 85 F1 | 	sub	fp, #16
1f5e4     01 16 06 F1 | 	add	arg03, #1
1f5e8     0B 13 C2 FA | 	rdbyte	arg01, arg03
1f5ec     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
1f5f0     10 4E 05 F1 | 	add	fp, #16
1f5f4     A7 16 02 FB | 	rdlong	arg03, fp
1f5f8     10 4E 85 F1 | 	sub	fp, #16
1f5fc     0B 01 48 FC | 	wrbyte	#0, arg03
1f600                 | LR__3550
1f600     04 4E 05 F1 | 	add	fp, #4
1f604     A7 1E 0A FB | 	rdlong	local01, fp wz
1f608     04 4E 85 F1 | 	sub	fp, #4
1f60c     04 4E 05 51 |  if_ne	add	fp, #4
1f610     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1f614     04 4E 85 51 |  if_ne	sub	fp, #4
1f618     0F 01 48 5C |  if_ne	wrbyte	#0, local01
1f61c     14 4E 05 F1 | 	add	fp, #20
1f620     A7 1E 02 FB | 	rdlong	local01, fp
1f624     02 1E 66 F0 | 	shl	local01, #2
1f628     F2 1E 02 F1 | 	add	local01, objptr
1f62c     10 4E 85 F1 | 	sub	fp, #16
1f630     A7 16 02 FB | 	rdlong	arg03, fp
1f634     0F 17 62 FC | 	wrlong	arg03, local01
1f638     08 4E 05 F1 | 	add	fp, #8
1f63c     A7 1E CA FA | 	rdbyte	local01, fp wz
1f640     0C 4E 85 F1 | 	sub	fp, #12
1f644     00 FA 05 A6 |  if_e	mov	result1, #0
1f648     28 00 90 AD |  if_e	jmp	#LR__3551
1f64c     08 4E 05 F1 | 	add	fp, #8
1f650     A7 12 02 F6 | 	mov	arg01, fp
1f654     04 4E 85 F1 | 	sub	fp, #4
1f658     A7 14 02 F6 | 	mov	arg02, fp
1f65c     04 4E 85 F1 | 	sub	fp, #4
1f660     00 16 06 F6 | 	mov	arg03, #0
1f664     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
1f668     18 4E 05 F1 | 	add	fp, #24
1f66c     A7 FA 61 FC | 	wrlong	result1, fp
1f670                 | ' 
1f670                 | ' 	res = mount_volume(&path, &fs, 0);
1f670                 | ' 	return res ;
1f670     18 4E 85 F1 | 	sub	fp, #24
1f674                 | LR__3551
1f674     A7 F0 03 F6 | 	mov	ptra, fp
1f678     B2 00 A0 FD | 	call	#popregs_
1f67c                 | _fatfs_cc_f_mount_ret
1f67c     2D 00 64 FD | 	ret
1f680                 | 
1f680                 | _fatfs_cc_f_open
1f680     02 4A 05 F6 | 	mov	COUNT_, #2
1f684     A8 00 A0 FD | 	call	#pushregs_
1f688     60 F0 07 F1 | 	add	ptra, #96
1f68c     04 4E 05 F1 | 	add	fp, #4
1f690     A7 12 62 FC | 	wrlong	arg01, fp
1f694     04 4E 05 F1 | 	add	fp, #4
1f698     A7 14 62 FC | 	wrlong	arg02, fp
1f69c     04 4E 05 F1 | 	add	fp, #4
1f6a0     A7 16 42 FC | 	wrbyte	arg03, fp
1f6a4     08 4E 85 F1 | 	sub	fp, #8
1f6a8     A7 18 0A FB | 	rdlong	arg04, fp wz
1f6ac     04 4E 85 F1 | 	sub	fp, #4
1f6b0     09 FA 05 A6 |  if_e	mov	result1, #9
1f6b4     98 06 90 AD |  if_e	jmp	#LR__3577
1f6b8     0C 4E 05 F1 | 	add	fp, #12
1f6bc     A7 18 C2 FA | 	rdbyte	arg04, fp
1f6c0     3F 18 06 F5 | 	and	arg04, #63
1f6c4     A7 18 42 FC | 	wrbyte	arg04, fp
1f6c8     04 4E 85 F1 | 	sub	fp, #4
1f6cc     A7 12 02 F6 | 	mov	arg01, fp
1f6d0     3C 4E 05 F1 | 	add	fp, #60
1f6d4     A7 14 02 F6 | 	mov	arg02, fp
1f6d8     38 4E 85 F1 | 	sub	fp, #56
1f6dc     A7 16 C2 FA | 	rdbyte	arg03, fp
1f6e0     0C 4E 85 F1 | 	sub	fp, #12
1f6e4     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
1f6e8     10 4E 05 F1 | 	add	fp, #16
1f6ec     A7 FA 61 FC | 	wrlong	result1, fp
1f6f0     10 4E 85 F1 | 	sub	fp, #16
1f6f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f6f8     2C 06 90 5D |  if_ne	jmp	#LR__3576
1f6fc     44 4E 05 F1 | 	add	fp, #68
1f700     A7 18 02 FB | 	rdlong	arg04, fp
1f704     30 4E 85 F1 | 	sub	fp, #48
1f708     A7 18 62 FC | 	wrlong	arg04, fp
1f70c     A7 12 02 F6 | 	mov	arg01, fp
1f710     0C 4E 85 F1 | 	sub	fp, #12
1f714     A7 1E 02 FB | 	rdlong	local01, fp
1f718     08 4E 85 F1 | 	sub	fp, #8
1f71c     0F 15 02 F6 | 	mov	arg02, local01
1f720     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
1f724     10 4E 05 F1 | 	add	fp, #16
1f728     A7 FA 61 FC | 	wrlong	result1, fp
1f72c     10 4E 85 F1 | 	sub	fp, #16
1f730     00 FA 0D F2 | 	cmp	result1, #0 wz
1f734     1C 00 90 5D |  if_ne	jmp	#LR__3560
1f738     3F 4E 05 F1 | 	add	fp, #63
1f73c     A7 18 C2 FA | 	rdbyte	arg04, fp
1f740     3F 4E 85 F1 | 	sub	fp, #63
1f744     80 18 CE F7 | 	test	arg04, #128 wz
1f748     10 4E 05 51 |  if_ne	add	fp, #16
1f74c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
1f750     10 4E 85 51 |  if_ne	sub	fp, #16
1f754                 | LR__3560
1f754     0C 4E 05 F1 | 	add	fp, #12
1f758     A7 18 C2 FA | 	rdbyte	arg04, fp
1f75c     0C 4E 85 F1 | 	sub	fp, #12
1f760     1C 18 CE F7 | 	test	arg04, #28 wz
1f764     F0 01 90 AD |  if_e	jmp	#LR__3565
1f768     10 4E 05 F1 | 	add	fp, #16
1f76c     A7 1E 0A FB | 	rdlong	local01, fp wz
1f770     10 4E 85 F1 | 	sub	fp, #16
1f774     48 00 90 AD |  if_e	jmp	#LR__3562
1f778     10 4E 05 F1 | 	add	fp, #16
1f77c     A7 18 02 FB | 	rdlong	arg04, fp
1f780     10 4E 85 F1 | 	sub	fp, #16
1f784     04 18 0E F2 | 	cmp	arg04, #4 wz
1f788     1C 00 90 5D |  if_ne	jmp	#LR__3561
1f78c     14 4E 05 F1 | 	add	fp, #20
1f790     A7 12 02 F6 | 	mov	arg01, fp
1f794     14 4E 85 F1 | 	sub	fp, #20
1f798     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
1f79c     10 4E 05 F1 | 	add	fp, #16
1f7a0     A7 FA 61 FC | 	wrlong	result1, fp
1f7a4     10 4E 85 F1 | 	sub	fp, #16
1f7a8                 | LR__3561
1f7a8     0C 4E 05 F1 | 	add	fp, #12
1f7ac     A7 1E C2 FA | 	rdbyte	local01, fp
1f7b0     08 1E 46 F5 | 	or	local01, #8
1f7b4     A7 1E 42 FC | 	wrbyte	local01, fp
1f7b8     0C 4E 85 F1 | 	sub	fp, #12
1f7bc     3C 00 90 FD | 	jmp	#LR__3564
1f7c0                 | LR__3562
1f7c0     1A 4E 05 F1 | 	add	fp, #26
1f7c4     A7 1E C2 FA | 	rdbyte	local01, fp
1f7c8     1A 4E 85 F1 | 	sub	fp, #26
1f7cc     11 1E CE F7 | 	test	local01, #17 wz
1f7d0     10 4E 05 51 |  if_ne	add	fp, #16
1f7d4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1f7d8     10 4E 85 51 |  if_ne	sub	fp, #16
1f7dc     1C 00 90 5D |  if_ne	jmp	#LR__3563
1f7e0     0C 4E 05 F1 | 	add	fp, #12
1f7e4     A7 1E C2 FA | 	rdbyte	local01, fp
1f7e8     0C 4E 85 F1 | 	sub	fp, #12
1f7ec     04 1E CE F7 | 	test	local01, #4 wz
1f7f0     10 4E 05 51 |  if_ne	add	fp, #16
1f7f4     A7 10 68 5C |  if_ne	wrlong	#8, fp
1f7f8     10 4E 85 51 |  if_ne	sub	fp, #16
1f7fc                 | LR__3563
1f7fc                 | LR__3564
1f7fc     10 4E 05 F1 | 	add	fp, #16
1f800     A7 1E 0A FB | 	rdlong	local01, fp wz
1f804     10 4E 85 F1 | 	sub	fp, #16
1f808     A8 01 90 5D |  if_ne	jmp	#LR__3568
1f80c     0C 4E 05 F1 | 	add	fp, #12
1f810     A7 1E C2 FA | 	rdbyte	local01, fp
1f814     0C 4E 85 F1 | 	sub	fp, #12
1f818     08 1E CE F7 | 	test	local01, #8 wz
1f81c     94 01 90 AD |  if_e	jmp	#LR__3568
1f820     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
1f824     54 4E 05 F1 | 	add	fp, #84
1f828     A7 FA 61 FC | 	wrlong	result1, fp
1f82c     24 4E 85 F1 | 	sub	fp, #36
1f830     A7 12 02 FB | 	rdlong	arg01, fp
1f834     0E 12 06 F1 | 	add	arg01, #14
1f838     09 FB 61 FC | 	wrlong	result1, arg01
1f83c     A7 12 02 FB | 	rdlong	arg01, fp
1f840     16 12 06 F1 | 	add	arg01, #22
1f844     24 4E 05 F1 | 	add	fp, #36
1f848     A7 14 02 FB | 	rdlong	arg02, fp
1f84c     09 15 62 FC | 	wrlong	arg02, arg01
1f850     10 4E 85 F1 | 	sub	fp, #16
1f854     A7 12 02 FB | 	rdlong	arg01, fp
1f858     14 4E 85 F1 | 	sub	fp, #20
1f85c     A7 14 02 FB | 	rdlong	arg02, fp
1f860     30 4E 85 F1 | 	sub	fp, #48
1f864     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
1f868     48 4E 05 F1 | 	add	fp, #72
1f86c     A7 FA 61 FC | 	wrlong	result1, fp
1f870     18 4E 85 F1 | 	sub	fp, #24
1f874     A7 1E 02 FB | 	rdlong	local01, fp
1f878     0B 1E 06 F1 | 	add	local01, #11
1f87c     0F 41 48 FC | 	wrbyte	#32, local01
1f880     14 4E 05 F1 | 	add	fp, #20
1f884     A7 12 02 FB | 	rdlong	arg01, fp
1f888     14 4E 85 F1 | 	sub	fp, #20
1f88c     A7 14 02 FB | 	rdlong	arg02, fp
1f890     30 4E 85 F1 | 	sub	fp, #48
1f894     00 16 06 F6 | 	mov	arg03, #0
1f898     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
1f89c     30 4E 05 F1 | 	add	fp, #48
1f8a0     A7 12 02 FB | 	rdlong	arg01, fp
1f8a4     1C 12 06 F1 | 	add	arg01, #28
1f8a8     09 01 68 FC | 	wrlong	#0, arg01
1f8ac     14 4E 05 F1 | 	add	fp, #20
1f8b0     A7 1E 02 FB | 	rdlong	local01, fp
1f8b4     03 1E 06 F1 | 	add	local01, #3
1f8b8     0F 03 48 FC | 	wrbyte	#1, local01
1f8bc     04 4E 05 F1 | 	add	fp, #4
1f8c0     A7 1E 0A FB | 	rdlong	local01, fp wz
1f8c4     48 4E 85 F1 | 	sub	fp, #72
1f8c8     E8 00 90 AD |  if_e	jmp	#LR__3568
1f8cc     44 4E 05 F1 | 	add	fp, #68
1f8d0     A7 1E 02 FB | 	rdlong	local01, fp
1f8d4     30 1E 06 F1 | 	add	local01, #48
1f8d8     0F 1F 02 FB | 	rdlong	local01, local01
1f8dc     14 4E 05 F1 | 	add	fp, #20
1f8e0     A7 1E 62 FC | 	wrlong	local01, fp
1f8e4     44 4E 85 F1 | 	sub	fp, #68
1f8e8     A7 12 02 F6 | 	mov	arg01, fp
1f8ec     34 4E 05 F1 | 	add	fp, #52
1f8f0     A7 14 02 FB | 	rdlong	arg02, fp
1f8f4     48 4E 85 F1 | 	sub	fp, #72
1f8f8     00 16 06 F6 | 	mov	arg03, #0
1f8fc     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
1f900     10 4E 05 F1 | 	add	fp, #16
1f904     A7 FA 61 FC | 	wrlong	result1, fp
1f908     10 4E 85 F1 | 	sub	fp, #16
1f90c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f910     A0 00 90 5D |  if_ne	jmp	#LR__3568
1f914     44 4E 05 F1 | 	add	fp, #68
1f918     A7 12 02 FB | 	rdlong	arg01, fp
1f91c     14 4E 05 F1 | 	add	fp, #20
1f920     A7 14 02 FB | 	rdlong	arg02, fp
1f924     58 4E 85 F1 | 	sub	fp, #88
1f928     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
1f92c     10 4E 05 F1 | 	add	fp, #16
1f930     A7 FA 61 FC | 	wrlong	result1, fp
1f934     34 4E 05 F1 | 	add	fp, #52
1f938     A7 18 02 FB | 	rdlong	arg04, fp
1f93c     04 4E 05 F1 | 	add	fp, #4
1f940     A7 1E 02 FB | 	rdlong	local01, fp
1f944     48 4E 85 F1 | 	sub	fp, #72
1f948     01 1E 86 F1 | 	sub	local01, #1
1f94c     10 18 06 F1 | 	add	arg04, #16
1f950     0C 1F 62 FC | 	wrlong	local01, arg04
1f954     5C 00 90 FD | 	jmp	#LR__3568
1f958                 | LR__3565
1f958     10 4E 05 F1 | 	add	fp, #16
1f95c     A7 18 0A FB | 	rdlong	arg04, fp wz
1f960     10 4E 85 F1 | 	sub	fp, #16
1f964     4C 00 90 5D |  if_ne	jmp	#LR__3567
1f968     1A 4E 05 F1 | 	add	fp, #26
1f96c     A7 18 C2 FA | 	rdbyte	arg04, fp
1f970     1A 4E 85 F1 | 	sub	fp, #26
1f974     10 18 CE F7 | 	test	arg04, #16 wz
1f978     10 4E 05 51 |  if_ne	add	fp, #16
1f97c     A7 08 68 5C |  if_ne	wrlong	#4, fp
1f980     10 4E 85 51 |  if_ne	sub	fp, #16
1f984     2C 00 90 5D |  if_ne	jmp	#LR__3566
1f988     0C 4E 05 F1 | 	add	fp, #12
1f98c     A7 18 C2 FA | 	rdbyte	arg04, fp
1f990     0C 4E 85 F1 | 	sub	fp, #12
1f994     02 18 CE F7 | 	test	arg04, #2 wz
1f998     1A 4E 05 51 |  if_ne	add	fp, #26
1f99c     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
1f9a0     1A 4E 85 51 |  if_ne	sub	fp, #26
1f9a4     01 1E CE 57 |  if_ne	test	local01, #1 wz
1f9a8     10 4E 05 51 |  if_ne	add	fp, #16
1f9ac     A7 0E 68 5C |  if_ne	wrlong	#7, fp
1f9b0     10 4E 85 51 |  if_ne	sub	fp, #16
1f9b4                 | LR__3566
1f9b4                 | LR__3567
1f9b4                 | LR__3568
1f9b4     10 4E 05 F1 | 	add	fp, #16
1f9b8     A7 1E 0A FB | 	rdlong	local01, fp wz
1f9bc     10 4E 85 F1 | 	sub	fp, #16
1f9c0     60 00 90 5D |  if_ne	jmp	#LR__3569
1f9c4     0C 4E 05 F1 | 	add	fp, #12
1f9c8     A7 20 C2 FA | 	rdbyte	local02, fp
1f9cc     0C 4E 85 F1 | 	sub	fp, #12
1f9d0     08 20 CE F7 | 	test	local02, #8 wz
1f9d4     0C 4E 05 51 |  if_ne	add	fp, #12
1f9d8     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
1f9dc     40 20 46 55 |  if_ne	or	local02, #64
1f9e0     A7 20 42 5C |  if_ne	wrbyte	local02, fp
1f9e4     0C 4E 85 51 |  if_ne	sub	fp, #12
1f9e8     04 4E 05 F1 | 	add	fp, #4
1f9ec     A7 20 02 FB | 	rdlong	local02, fp
1f9f0     40 4E 05 F1 | 	add	fp, #64
1f9f4     A7 1E 02 FB | 	rdlong	local01, fp
1f9f8     30 1E 06 F1 | 	add	local01, #48
1f9fc     0F 1F 02 FB | 	rdlong	local01, local01
1fa00     20 20 06 F1 | 	add	local02, #32
1fa04     10 1F 62 FC | 	wrlong	local01, local02
1fa08     40 4E 85 F1 | 	sub	fp, #64
1fa0c     A7 20 02 FB | 	rdlong	local02, fp
1fa10     2C 4E 05 F1 | 	add	fp, #44
1fa14     A7 1E 02 FB | 	rdlong	local01, fp
1fa18     30 4E 85 F1 | 	sub	fp, #48
1fa1c     24 20 06 F1 | 	add	local02, #36
1fa20     10 1F 62 FC | 	wrlong	local01, local02
1fa24                 | LR__3569
1fa24     10 4E 05 F1 | 	add	fp, #16
1fa28     A7 20 0A FB | 	rdlong	local02, fp wz
1fa2c     10 4E 85 F1 | 	sub	fp, #16
1fa30     F4 02 90 5D |  if_ne	jmp	#LR__3575
1fa34     04 4E 05 F1 | 	add	fp, #4
1fa38     A7 20 02 FB | 	rdlong	local02, fp
1fa3c     40 4E 05 F1 | 	add	fp, #64
1fa40     A7 12 02 FB | 	rdlong	arg01, fp
1fa44     14 4E 85 F1 | 	sub	fp, #20
1fa48     A7 14 02 FB | 	rdlong	arg02, fp
1fa4c     30 4E 85 F1 | 	sub	fp, #48
1fa50     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
1fa54     08 20 06 F1 | 	add	local02, #8
1fa58     10 FB 61 FC | 	wrlong	result1, local02
1fa5c     04 4E 05 F1 | 	add	fp, #4
1fa60     A7 20 02 FB | 	rdlong	local02, fp
1fa64     2C 4E 05 F1 | 	add	fp, #44
1fa68     A7 12 02 FB | 	rdlong	arg01, fp
1fa6c     1C 12 06 F1 | 	add	arg01, #28
1fa70                 | ' {
1fa70                 | ' 
1fa70                 | ' 	return *((DWORD*)ptr);
1fa70     09 FB 01 FB | 	rdlong	result1, arg01
1fa74     0C 20 06 F1 | 	add	local02, #12
1fa78     10 FB 61 FC | 	wrlong	result1, local02
1fa7c     2C 4E 85 F1 | 	sub	fp, #44
1fa80     A7 20 02 FB | 	rdlong	local02, fp
1fa84     40 4E 05 F1 | 	add	fp, #64
1fa88     A7 1E 02 FB | 	rdlong	local01, fp
1fa8c     10 1F 62 FC | 	wrlong	local01, local02
1fa90     40 4E 85 F1 | 	sub	fp, #64
1fa94     A7 20 02 FB | 	rdlong	local02, fp
1fa98     40 4E 05 F1 | 	add	fp, #64
1fa9c     A7 1E 02 FB | 	rdlong	local01, fp
1faa0     06 1E 06 F1 | 	add	local01, #6
1faa4     0F 1F E2 FA | 	rdword	local01, local01
1faa8     04 20 06 F1 | 	add	local02, #4
1faac     10 1F 52 FC | 	wrword	local01, local02
1fab0     40 4E 85 F1 | 	sub	fp, #64
1fab4     A7 20 02 FB | 	rdlong	local02, fp
1fab8     08 4E 05 F1 | 	add	fp, #8
1fabc     A7 1E C2 FA | 	rdbyte	local01, fp
1fac0     10 20 06 F1 | 	add	local02, #16
1fac4     10 1F 42 FC | 	wrbyte	local01, local02
1fac8     08 4E 85 F1 | 	sub	fp, #8
1facc     A7 20 02 FB | 	rdlong	local02, fp
1fad0     11 20 06 F1 | 	add	local02, #17
1fad4     10 01 48 FC | 	wrbyte	#0, local02
1fad8     A7 20 02 FB | 	rdlong	local02, fp
1fadc     1C 20 06 F1 | 	add	local02, #28
1fae0     10 01 68 FC | 	wrlong	#0, local02
1fae4     A7 20 02 FB | 	rdlong	local02, fp
1fae8     14 20 06 F1 | 	add	local02, #20
1faec     10 01 68 FC | 	wrlong	#0, local02
1faf0     A7 12 02 FB | 	rdlong	arg01, fp
1faf4     04 4E 85 F1 | 	sub	fp, #4
1faf8     28 12 06 F1 | 	add	arg01, #40
1fafc     00 14 06 F6 | 	mov	arg02, #0
1fb00     09 16 C6 F9 | 	decod	arg03, #9
1fb04     98 00 A0 FD | 	call	#\builtin_bytefill_
1fb08     0C 4E 05 F1 | 	add	fp, #12
1fb0c     A7 20 C2 FA | 	rdbyte	local02, fp
1fb10     0C 4E 85 F1 | 	sub	fp, #12
1fb14     20 20 CE F7 | 	test	local02, #32 wz
1fb18     0C 02 90 AD |  if_e	jmp	#LR__3574
1fb1c     04 4E 05 F1 | 	add	fp, #4
1fb20     A7 1E 02 FB | 	rdlong	local01, fp
1fb24     04 4E 85 F1 | 	sub	fp, #4
1fb28     0C 1E 06 F1 | 	add	local01, #12
1fb2c     0F 21 02 FB | 	rdlong	local02, local01
1fb30     01 20 16 F2 | 	cmp	local02, #1 wc
1fb34     F0 01 90 CD |  if_b	jmp	#LR__3574
1fb38     04 4E 05 F1 | 	add	fp, #4
1fb3c     A7 1E 02 FB | 	rdlong	local01, fp
1fb40     0F 21 02 F6 | 	mov	local02, local01
1fb44     0C 1E 06 F1 | 	add	local01, #12
1fb48     0F 1F 02 FB | 	rdlong	local01, local01
1fb4c     14 20 06 F1 | 	add	local02, #20
1fb50     10 1F 62 FC | 	wrlong	local01, local02
1fb54     40 4E 05 F1 | 	add	fp, #64
1fb58     A7 20 02 FB | 	rdlong	local02, fp
1fb5c     0A 20 06 F1 | 	add	local02, #10
1fb60     10 21 E2 FA | 	rdword	local02, local02
1fb64     09 20 66 F0 | 	shl	local02, #9
1fb68     08 4E 05 F1 | 	add	fp, #8
1fb6c     A7 20 62 FC | 	wrlong	local02, fp
1fb70     48 4E 85 F1 | 	sub	fp, #72
1fb74     A7 20 02 FB | 	rdlong	local02, fp
1fb78     08 20 06 F1 | 	add	local02, #8
1fb7c     10 1F 02 FB | 	rdlong	local01, local02
1fb80     4C 4E 05 F1 | 	add	fp, #76
1fb84     A7 1E 62 FC | 	wrlong	local01, fp
1fb88                 | ' 				fp->fptr = fp->obj.objsize;
1fb88                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
1fb88                 | ' 				clst = fp->obj.sclust;
1fb88                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1fb88     4C 4E 85 F1 | 	sub	fp, #76
1fb8c     A7 20 02 FB | 	rdlong	local02, fp
1fb90     0C 20 06 F1 | 	add	local02, #12
1fb94     10 1F 02 FB | 	rdlong	local01, local02
1fb98     58 4E 05 F1 | 	add	fp, #88
1fb9c     A7 1E 62 FC | 	wrlong	local01, fp
1fba0     5C 4E 85 F1 | 	sub	fp, #92
1fba4                 | LR__3570
1fba4     10 4E 05 F1 | 	add	fp, #16
1fba8     A7 20 0A FB | 	rdlong	local02, fp wz
1fbac     10 4E 85 F1 | 	sub	fp, #16
1fbb0     94 00 90 5D |  if_ne	jmp	#LR__3571
1fbb4     5C 4E 05 F1 | 	add	fp, #92
1fbb8     A7 20 02 FB | 	rdlong	local02, fp
1fbbc     10 4E 85 F1 | 	sub	fp, #16
1fbc0     A7 1E 02 FB | 	rdlong	local01, fp
1fbc4     4C 4E 85 F1 | 	sub	fp, #76
1fbc8     0F 21 1A F2 | 	cmp	local02, local01 wcz
1fbcc     78 00 90 ED |  if_be	jmp	#LR__3571
1fbd0     04 4E 05 F1 | 	add	fp, #4
1fbd4     A7 12 02 FB | 	rdlong	arg01, fp
1fbd8     4C 4E 05 F1 | 	add	fp, #76
1fbdc     A7 14 02 FB | 	rdlong	arg02, fp
1fbe0     50 4E 85 F1 | 	sub	fp, #80
1fbe4     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
1fbe8     50 4E 05 F1 | 	add	fp, #80
1fbec     A7 FA 61 FC | 	wrlong	result1, fp
1fbf0     50 4E 85 F1 | 	sub	fp, #80
1fbf4     02 FA 15 F2 | 	cmp	result1, #2 wc
1fbf8     10 4E 05 C1 |  if_b	add	fp, #16
1fbfc     A7 04 68 CC |  if_b	wrlong	#2, fp
1fc00     10 4E 85 C1 |  if_b	sub	fp, #16
1fc04     50 4E 05 F1 | 	add	fp, #80
1fc08     A7 20 02 FB | 	rdlong	local02, fp
1fc0c     50 4E 85 F1 | 	sub	fp, #80
1fc10     FF FF 7F FF 
1fc14     FF 21 0E F2 | 	cmp	local02, ##-1 wz
1fc18     10 4E 05 A1 |  if_e	add	fp, #16
1fc1c     A7 02 68 AC |  if_e	wrlong	#1, fp
1fc20     10 4E 85 A1 |  if_e	sub	fp, #16
1fc24     5C 4E 05 F1 | 	add	fp, #92
1fc28     A7 20 02 FB | 	rdlong	local02, fp
1fc2c     10 4E 85 F1 | 	sub	fp, #16
1fc30     A7 1E 02 FB | 	rdlong	local01, fp
1fc34     0F 21 82 F1 | 	sub	local02, local01
1fc38     10 4E 05 F1 | 	add	fp, #16
1fc3c     A7 20 62 FC | 	wrlong	local02, fp
1fc40     5C 4E 85 F1 | 	sub	fp, #92
1fc44     5C FF 9F FD | 	jmp	#LR__3570
1fc48                 | LR__3571
1fc48     04 4E 05 F1 | 	add	fp, #4
1fc4c     A7 20 02 FB | 	rdlong	local02, fp
1fc50     4C 4E 05 F1 | 	add	fp, #76
1fc54     A7 1E 02 FB | 	rdlong	local01, fp
1fc58     18 20 06 F1 | 	add	local02, #24
1fc5c     10 1F 62 FC | 	wrlong	local01, local02
1fc60     40 4E 85 F1 | 	sub	fp, #64
1fc64     A7 20 0A FB | 	rdlong	local02, fp wz
1fc68     10 4E 85 F1 | 	sub	fp, #16
1fc6c     B8 00 90 5D |  if_ne	jmp	#LR__3573
1fc70     5C 4E 05 F1 | 	add	fp, #92
1fc74     A7 1E 02 FB | 	rdlong	local01, fp
1fc78     5C 4E 85 F1 | 	sub	fp, #92
1fc7c     FF 1F CE F7 | 	test	local01, #511 wz
1fc80     A4 00 90 AD |  if_e	jmp	#LR__3573
1fc84     44 4E 05 F1 | 	add	fp, #68
1fc88     A7 12 02 FB | 	rdlong	arg01, fp
1fc8c     0C 4E 05 F1 | 	add	fp, #12
1fc90     A7 14 02 FB | 	rdlong	arg02, fp
1fc94     50 4E 85 F1 | 	sub	fp, #80
1fc98     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
1fc9c     58 4E 05 F1 | 	add	fp, #88
1fca0     A7 FA 61 FC | 	wrlong	result1, fp
1fca4     00 FA 4D F2 | 	cmps	result1, #0 wz
1fca8     58 4E 85 F1 | 	sub	fp, #88
1fcac     10 4E 05 A1 |  if_e	add	fp, #16
1fcb0     A7 04 68 AC |  if_e	wrlong	#2, fp
1fcb4     10 4E 85 A1 |  if_e	sub	fp, #16
1fcb8     6C 00 90 AD |  if_e	jmp	#LR__3572
1fcbc     04 4E 05 F1 | 	add	fp, #4
1fcc0     A7 20 02 FB | 	rdlong	local02, fp
1fcc4     54 4E 05 F1 | 	add	fp, #84
1fcc8     A7 1E 02 FB | 	rdlong	local01, fp
1fccc     04 4E 05 F1 | 	add	fp, #4
1fcd0     A7 18 02 FB | 	rdlong	arg04, fp
1fcd4     09 18 46 F0 | 	shr	arg04, #9
1fcd8     0C 1F 02 F1 | 	add	local01, arg04
1fcdc     1C 20 06 F1 | 	add	local02, #28
1fce0     10 1F 62 FC | 	wrlong	local01, local02
1fce4     18 4E 85 F1 | 	sub	fp, #24
1fce8     A7 20 02 FB | 	rdlong	local02, fp
1fcec     01 20 06 F1 | 	add	local02, #1
1fcf0     10 13 C2 FA | 	rdbyte	arg01, local02
1fcf4     40 4E 85 F1 | 	sub	fp, #64
1fcf8     A7 20 02 FB | 	rdlong	local02, fp
1fcfc     10 15 02 F6 | 	mov	arg02, local02
1fd00     28 14 06 F1 | 	add	arg02, #40
1fd04     04 4E 85 F1 | 	sub	fp, #4
1fd08     1C 20 06 F1 | 	add	local02, #28
1fd0c     10 17 02 FB | 	rdlong	arg03, local02
1fd10     01 18 06 F6 | 	mov	arg04, #1
1fd14     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
1fd18     00 FA 0D F2 | 	cmp	result1, #0 wz
1fd1c     10 4E 05 51 |  if_ne	add	fp, #16
1fd20     A7 02 68 5C |  if_ne	wrlong	#1, fp
1fd24     10 4E 85 51 |  if_ne	sub	fp, #16
1fd28                 | LR__3572
1fd28                 | LR__3573
1fd28                 | LR__3574
1fd28                 | LR__3575
1fd28                 | LR__3576
1fd28     10 4E 05 F1 | 	add	fp, #16
1fd2c     A7 20 0A FB | 	rdlong	local02, fp wz
1fd30     10 4E 85 F1 | 	sub	fp, #16
1fd34     04 4E 05 51 |  if_ne	add	fp, #4
1fd38     A7 20 02 5B |  if_ne	rdlong	local02, fp
1fd3c     04 4E 85 51 |  if_ne	sub	fp, #4
1fd40     10 01 68 5C |  if_ne	wrlong	#0, local02
1fd44                 | ' 
1fd44                 | ' 	return res ;
1fd44     10 4E 05 F1 | 	add	fp, #16
1fd48     A7 FA 01 FB | 	rdlong	result1, fp
1fd4c     10 4E 85 F1 | 	sub	fp, #16
1fd50                 | LR__3577
1fd50     A7 F0 03 F6 | 	mov	ptra, fp
1fd54     B2 00 A0 FD | 	call	#popregs_
1fd58                 | _fatfs_cc_f_open_ret
1fd58     2D 00 64 FD | 	ret
1fd5c                 | 
1fd5c                 | _fatfs_cc_f_read
1fd5c     0E 4A 05 F6 | 	mov	COUNT_, #14
1fd60     A8 00 A0 FD | 	call	#pushregs_
1fd64     38 F0 07 F1 | 	add	ptra, #56
1fd68     04 4E 05 F1 | 	add	fp, #4
1fd6c     A7 12 62 FC | 	wrlong	arg01, fp
1fd70     04 4E 05 F1 | 	add	fp, #4
1fd74     A7 14 62 FC | 	wrlong	arg02, fp
1fd78     04 4E 05 F1 | 	add	fp, #4
1fd7c     A7 16 62 FC | 	wrlong	arg03, fp
1fd80     04 4E 05 F1 | 	add	fp, #4
1fd84     A7 18 62 FC | 	wrlong	arg04, fp
1fd88     08 4E 85 F1 | 	sub	fp, #8
1fd8c     A7 FA 01 FB | 	rdlong	result1, fp
1fd90     2C 4E 05 F1 | 	add	fp, #44
1fd94     A7 FA 61 FC | 	wrlong	result1, fp
1fd98     24 4E 85 F1 | 	sub	fp, #36
1fd9c     A7 FA 01 FB | 	rdlong	result1, fp
1fda0     FD 00 68 FC | 	wrlong	#0, result1
1fda4     0C 4E 85 F1 | 	sub	fp, #12
1fda8     A7 12 02 FB | 	rdlong	arg01, fp
1fdac     14 4E 05 F1 | 	add	fp, #20
1fdb0     A7 14 02 F6 | 	mov	arg02, fp
1fdb4     18 4E 85 F1 | 	sub	fp, #24
1fdb8     24 F7 BF FD | 	call	#_fatfs_cc_validate
1fdbc     14 4E 05 F1 | 	add	fp, #20
1fdc0     A7 FA 61 FC | 	wrlong	result1, fp
1fdc4     00 FA 4D F2 | 	cmps	result1, #0 wz
1fdc8     14 4E 85 F1 | 	sub	fp, #20
1fdcc     20 00 90 5D |  if_ne	jmp	#LR__3580
1fdd0     04 4E 05 F1 | 	add	fp, #4
1fdd4     A7 14 02 FB | 	rdlong	arg02, fp
1fdd8     11 14 06 F1 | 	add	arg02, #17
1fddc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
1fde0     10 4E 05 F1 | 	add	fp, #16
1fde4     A7 14 62 FC | 	wrlong	arg02, fp
1fde8     14 4E 85 F1 | 	sub	fp, #20
1fdec     10 00 90 AD |  if_e	jmp	#LR__3581
1fdf0                 | LR__3580
1fdf0     14 4E 05 F1 | 	add	fp, #20
1fdf4     A7 FA 01 FB | 	rdlong	result1, fp
1fdf8     14 4E 85 F1 | 	sub	fp, #20
1fdfc     EC 05 90 FD | 	jmp	#LR__3600
1fe00                 | LR__3581
1fe00     04 4E 05 F1 | 	add	fp, #4
1fe04     A7 18 02 FB | 	rdlong	arg04, fp
1fe08     04 4E 85 F1 | 	sub	fp, #4
1fe0c     10 18 06 F1 | 	add	arg04, #16
1fe10     0C 19 C2 FA | 	rdbyte	arg04, arg04
1fe14     01 18 CE F7 | 	test	arg04, #1 wz
1fe18     07 FA 05 A6 |  if_e	mov	result1, #7
1fe1c     CC 05 90 AD |  if_e	jmp	#LR__3600
1fe20     04 4E 05 F1 | 	add	fp, #4
1fe24     A7 1E 02 FB | 	rdlong	local01, fp
1fe28     0F 21 02 F6 | 	mov	local02, local01
1fe2c     0C 20 06 F1 | 	add	local02, #12
1fe30     10 23 02 FB | 	rdlong	local03, local02
1fe34     14 1E 06 F1 | 	add	local01, #20
1fe38     0F 1F 02 FB | 	rdlong	local01, local01
1fe3c     0F 23 82 F1 | 	sub	local03, local01
1fe40     20 4E 05 F1 | 	add	fp, #32
1fe44     A7 22 62 FC | 	wrlong	local03, fp
1fe48     18 4E 85 F1 | 	sub	fp, #24
1fe4c     A7 24 02 FB | 	rdlong	local04, fp
1fe50     0C 4E 85 F1 | 	sub	fp, #12
1fe54     11 25 1A F2 | 	cmp	local04, local03 wcz
1fe58     24 4E 05 11 |  if_a	add	fp, #36
1fe5c     A7 24 02 1B |  if_a	rdlong	local04, fp
1fe60     18 4E 85 11 |  if_a	sub	fp, #24
1fe64     A7 24 62 1C |  if_a	wrlong	local04, fp
1fe68     0C 4E 85 11 |  if_a	sub	fp, #12
1fe6c                 | ' 
1fe6c                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
1fe6c                 | LR__3582
1fe6c     0C 4E 05 F1 | 	add	fp, #12
1fe70     A7 20 02 FB | 	rdlong	local02, fp
1fe74     0C 4E 85 F1 | 	sub	fp, #12
1fe78     10 25 02 F6 | 	mov	local04, local02
1fe7c     01 24 16 F2 | 	cmp	local04, #1 wc
1fe80     64 05 90 CD |  if_b	jmp	#LR__3599
1fe84     04 4E 05 F1 | 	add	fp, #4
1fe88     A7 22 02 FB | 	rdlong	local03, fp
1fe8c     04 4E 85 F1 | 	sub	fp, #4
1fe90     14 22 06 F1 | 	add	local03, #20
1fe94     11 23 02 FB | 	rdlong	local03, local03
1fe98     FF 23 CE F7 | 	test	local03, #511 wz
1fe9c     3C 04 90 5D |  if_ne	jmp	#LR__3597
1fea0     04 4E 05 F1 | 	add	fp, #4
1fea4     A7 1E 02 FB | 	rdlong	local01, fp
1fea8     14 1E 06 F1 | 	add	local01, #20
1feac     0F 23 02 FB | 	rdlong	local03, local01
1feb0     09 22 46 F0 | 	shr	local03, #9
1feb4     14 4E 05 F1 | 	add	fp, #20
1feb8     A7 26 02 FB | 	rdlong	local05, fp
1febc     13 29 02 F6 | 	mov	local06, local05
1fec0     0A 28 06 F1 | 	add	local06, #10
1fec4     14 2B E2 FA | 	rdword	local07, local06
1fec8     0A 28 86 F1 | 	sub	local06, #10
1fecc     15 2D 32 F9 | 	getword	local08, local07, #0
1fed0     01 2C 86 F1 | 	sub	local08, #1
1fed4     16 23 0A F5 | 	and	local03, local08 wz
1fed8     18 4E 05 F1 | 	add	fp, #24
1fedc     A7 22 62 FC | 	wrlong	local03, fp
1fee0     30 4E 85 F1 | 	sub	fp, #48
1fee4     E0 00 90 5D |  if_ne	jmp	#LR__3587
1fee8     04 4E 05 F1 | 	add	fp, #4
1feec     A7 22 02 FB | 	rdlong	local03, fp
1fef0     04 4E 85 F1 | 	sub	fp, #4
1fef4     14 22 06 F1 | 	add	local03, #20
1fef8     11 23 0A FB | 	rdlong	local03, local03 wz
1fefc     20 00 90 5D |  if_ne	jmp	#LR__3583
1ff00     04 4E 05 F1 | 	add	fp, #4
1ff04     A7 22 02 FB | 	rdlong	local03, fp
1ff08     08 22 06 F1 | 	add	local03, #8
1ff0c     11 23 02 FB | 	rdlong	local03, local03
1ff10     18 4E 05 F1 | 	add	fp, #24
1ff14     A7 22 62 FC | 	wrlong	local03, fp
1ff18     1C 4E 85 F1 | 	sub	fp, #28
1ff1c     28 00 90 FD | 	jmp	#LR__3584
1ff20                 | LR__3583
1ff20     04 4E 05 F1 | 	add	fp, #4
1ff24     A7 2C 02 FB | 	rdlong	local08, fp
1ff28     16 13 02 F6 | 	mov	arg01, local08
1ff2c     04 4E 85 F1 | 	sub	fp, #4
1ff30     18 2C 06 F1 | 	add	local08, #24
1ff34     16 15 02 FB | 	rdlong	arg02, local08
1ff38     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
1ff3c     1C 4E 05 F1 | 	add	fp, #28
1ff40     A7 FA 61 FC | 	wrlong	result1, fp
1ff44     1C 4E 85 F1 | 	sub	fp, #28
1ff48                 | LR__3584
1ff48     1C 4E 05 F1 | 	add	fp, #28
1ff4c     A7 22 02 FB | 	rdlong	local03, fp
1ff50     1C 4E 85 F1 | 	sub	fp, #28
1ff54     02 22 16 F2 | 	cmp	local03, #2 wc
1ff58     1C 00 90 3D |  if_ae	jmp	#LR__3585
1ff5c     04 4E 05 F1 | 	add	fp, #4
1ff60     A7 22 02 FB | 	rdlong	local03, fp
1ff64     04 4E 85 F1 | 	sub	fp, #4
1ff68     11 22 06 F1 | 	add	local03, #17
1ff6c     11 05 48 FC | 	wrbyte	#2, local03
1ff70     02 FA 05 F6 | 	mov	result1, #2
1ff74     74 04 90 FD | 	jmp	#LR__3600
1ff78                 | LR__3585
1ff78     1C 4E 05 F1 | 	add	fp, #28
1ff7c     A7 22 02 FB | 	rdlong	local03, fp
1ff80     1C 4E 85 F1 | 	sub	fp, #28
1ff84     FF FF 7F FF 
1ff88     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1ff8c     1C 00 90 5D |  if_ne	jmp	#LR__3586
1ff90     04 4E 05 F1 | 	add	fp, #4
1ff94     A7 22 02 FB | 	rdlong	local03, fp
1ff98     04 4E 85 F1 | 	sub	fp, #4
1ff9c     11 22 06 F1 | 	add	local03, #17
1ffa0     11 03 48 FC | 	wrbyte	#1, local03
1ffa4     01 FA 05 F6 | 	mov	result1, #1
1ffa8     40 04 90 FD | 	jmp	#LR__3600
1ffac                 | LR__3586
1ffac     04 4E 05 F1 | 	add	fp, #4
1ffb0     A7 22 02 FB | 	rdlong	local03, fp
1ffb4     18 4E 05 F1 | 	add	fp, #24
1ffb8     A7 2C 02 FB | 	rdlong	local08, fp
1ffbc     1C 4E 85 F1 | 	sub	fp, #28
1ffc0     18 22 06 F1 | 	add	local03, #24
1ffc4     11 2D 62 FC | 	wrlong	local08, local03
1ffc8                 | LR__3587
1ffc8     18 4E 05 F1 | 	add	fp, #24
1ffcc     A7 12 02 FB | 	rdlong	arg01, fp
1ffd0     14 4E 85 F1 | 	sub	fp, #20
1ffd4     A7 22 02 FB | 	rdlong	local03, fp
1ffd8     04 4E 85 F1 | 	sub	fp, #4
1ffdc     18 22 06 F1 | 	add	local03, #24
1ffe0     11 15 02 FB | 	rdlong	arg02, local03
1ffe4     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
1ffe8     20 4E 05 F1 | 	add	fp, #32
1ffec     A7 FA 61 FC | 	wrlong	result1, fp
1fff0     20 4E 85 F1 | 	sub	fp, #32
1fff4     00 FA 0D F2 | 	cmp	result1, #0 wz
1fff8     1C 00 90 5D |  if_ne	jmp	#LR__3588
1fffc     04 4E 05 F1 | 	add	fp, #4
20000     A7 22 02 FB | 	rdlong	local03, fp
20004     04 4E 85 F1 | 	sub	fp, #4
20008     11 22 06 F1 | 	add	local03, #17
2000c     11 05 48 FC | 	wrbyte	#2, local03
20010     02 FA 05 F6 | 	mov	result1, #2
20014     D4 03 90 FD | 	jmp	#LR__3600
20018                 | LR__3588
20018     20 4E 05 F1 | 	add	fp, #32
2001c     A7 22 02 FB | 	rdlong	local03, fp
20020     10 4E 05 F1 | 	add	fp, #16
20024     A7 2C 02 FB | 	rdlong	local08, fp
20028     16 23 02 F1 | 	add	local03, local08
2002c     10 4E 85 F1 | 	sub	fp, #16
20030     A7 22 62 FC | 	wrlong	local03, fp
20034     14 4E 85 F1 | 	sub	fp, #20
20038     A7 22 02 FB | 	rdlong	local03, fp
2003c     09 22 46 F0 | 	shr	local03, #9
20040     20 4E 05 F1 | 	add	fp, #32
20044     A7 22 62 FC | 	wrlong	local03, fp
20048     2C 4E 85 F1 | 	sub	fp, #44
2004c     01 22 16 F2 | 	cmp	local03, #1 wc
20050     5C 01 90 CD |  if_b	jmp	#LR__3592
20054     30 4E 05 F1 | 	add	fp, #48
20058     A7 22 02 FB | 	rdlong	local03, fp
2005c     04 4E 85 F1 | 	sub	fp, #4
20060     A7 2C 02 FB | 	rdlong	local08, fp
20064     16 23 02 F1 | 	add	local03, local08
20068     14 4E 85 F1 | 	sub	fp, #20
2006c     A7 2C 02 FB | 	rdlong	local08, fp
20070     18 4E 85 F1 | 	sub	fp, #24
20074     0A 2C 06 F1 | 	add	local08, #10
20078     16 2D E2 FA | 	rdword	local08, local08
2007c     16 23 1A F2 | 	cmp	local03, local08 wcz
20080     28 00 90 ED |  if_be	jmp	#LR__3589
20084     18 4E 05 F1 | 	add	fp, #24
20088     A7 1E 02 FB | 	rdlong	local01, fp
2008c     0A 1E 06 F1 | 	add	local01, #10
20090     0F 23 E2 FA | 	rdword	local03, local01
20094     18 4E 05 F1 | 	add	fp, #24
20098     A7 2C 02 FB | 	rdlong	local08, fp
2009c     16 23 82 F1 | 	sub	local03, local08
200a0     04 4E 85 F1 | 	sub	fp, #4
200a4     A7 22 62 FC | 	wrlong	local03, fp
200a8     2C 4E 85 F1 | 	sub	fp, #44
200ac                 | LR__3589
200ac     18 4E 05 F1 | 	add	fp, #24
200b0     A7 1E 02 FB | 	rdlong	local01, fp
200b4     01 1E 06 F1 | 	add	local01, #1
200b8     0F 13 C2 FA | 	rdbyte	arg01, local01
200bc     1C 4E 05 F1 | 	add	fp, #28
200c0     A7 14 02 FB | 	rdlong	arg02, fp
200c4     14 4E 85 F1 | 	sub	fp, #20
200c8     A7 16 02 FB | 	rdlong	arg03, fp
200cc     0C 4E 05 F1 | 	add	fp, #12
200d0     A7 18 02 FB | 	rdlong	arg04, fp
200d4     2C 4E 85 F1 | 	sub	fp, #44
200d8     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
200dc     00 FA 0D F2 | 	cmp	result1, #0 wz
200e0     1C 00 90 AD |  if_e	jmp	#LR__3590
200e4     04 4E 05 F1 | 	add	fp, #4
200e8     A7 22 02 FB | 	rdlong	local03, fp
200ec     04 4E 85 F1 | 	sub	fp, #4
200f0     11 22 06 F1 | 	add	local03, #17
200f4     11 03 48 FC | 	wrbyte	#1, local03
200f8     01 FA 05 F6 | 	mov	result1, #1
200fc     EC 02 90 FD | 	jmp	#LR__3600
20100                 | LR__3590
20100     04 4E 05 F1 | 	add	fp, #4
20104     A7 1E 02 FB | 	rdlong	local01, fp
20108     04 4E 85 F1 | 	sub	fp, #4
2010c     10 1E 06 F1 | 	add	local01, #16
20110     0F 23 C2 FA | 	rdbyte	local03, local01
20114     80 22 CE F7 | 	test	local03, #128 wz
20118     78 00 90 AD |  if_e	jmp	#LR__3591
2011c     04 4E 05 F1 | 	add	fp, #4
20120     A7 2C 02 FB | 	rdlong	local08, fp
20124     1C 2C 06 F1 | 	add	local08, #28
20128     16 2D 02 FB | 	rdlong	local08, local08
2012c     1C 4E 05 F1 | 	add	fp, #28
20130     A7 2E 02 FB | 	rdlong	local09, fp
20134     17 2D 82 F1 | 	sub	local08, local09
20138     0C 4E 05 F1 | 	add	fp, #12
2013c     A7 30 02 FB | 	rdlong	local10, fp
20140     2C 4E 85 F1 | 	sub	fp, #44
20144     18 33 02 F6 | 	mov	local11, local10
20148     19 2D 12 F2 | 	cmp	local08, local11 wc
2014c     44 00 90 3D |  if_ae	jmp	#LR__3591
20150     34 4E 05 F1 | 	add	fp, #52
20154     A7 12 02 FB | 	rdlong	arg01, fp
20158     30 4E 85 F1 | 	sub	fp, #48
2015c     A7 14 02 FB | 	rdlong	arg02, fp
20160     0A 33 02 F6 | 	mov	local11, arg02
20164     1C 32 06 F1 | 	add	local11, #28
20168     19 2F 02 FB | 	rdlong	local09, local11
2016c     1C 4E 05 F1 | 	add	fp, #28
20170     A7 26 02 FB | 	rdlong	local05, fp
20174     13 2F 82 F1 | 	sub	local09, local05
20178     09 2E 66 F0 | 	shl	local09, #9
2017c     17 33 02 F6 | 	mov	local11, local09
20180     17 13 02 F1 | 	add	arg01, local09
20184     20 4E 85 F1 | 	sub	fp, #32
20188     28 14 06 F1 | 	add	arg02, #40
2018c     09 16 C6 F9 | 	decod	arg03, #9
20190     A0 4C BF FD | 	call	#__system____builtin_memmove
20194                 | LR__3591
20194     2C 4E 05 F1 | 	add	fp, #44
20198     A7 22 02 FB | 	rdlong	local03, fp
2019c     09 22 66 F0 | 	shl	local03, #9
201a0     04 4E 85 F1 | 	sub	fp, #4
201a4     A7 22 62 FC | 	wrlong	local03, fp
201a8     28 4E 85 F1 | 	sub	fp, #40
201ac                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
201ac                 | ' 				}
201ac                 | ' 
201ac                 | ' 
201ac                 | ' 				rcnt =  ((UINT) 512 )  * cc;
201ac                 | ' 				continue;
201ac     B4 01 90 FD | 	jmp	#LR__3598
201b0                 | LR__3592
201b0     04 4E 05 F1 | 	add	fp, #4
201b4     A7 22 02 FB | 	rdlong	local03, fp
201b8     1C 22 06 F1 | 	add	local03, #28
201bc     11 23 02 FB | 	rdlong	local03, local03
201c0     1C 4E 05 F1 | 	add	fp, #28
201c4     A7 1E 02 FB | 	rdlong	local01, fp
201c8     20 4E 85 F1 | 	sub	fp, #32
201cc     0F 23 0A F2 | 	cmp	local03, local01 wz
201d0     EC 00 90 AD |  if_e	jmp	#LR__3596
201d4     04 4E 05 F1 | 	add	fp, #4
201d8     A7 1E 02 FB | 	rdlong	local01, fp
201dc     04 4E 85 F1 | 	sub	fp, #4
201e0     10 1E 06 F1 | 	add	local01, #16
201e4     0F 23 C2 FA | 	rdbyte	local03, local01
201e8     80 22 CE F7 | 	test	local03, #128 wz
201ec     7C 00 90 AD |  if_e	jmp	#LR__3594
201f0     18 4E 05 F1 | 	add	fp, #24
201f4     A7 1E 02 FB | 	rdlong	local01, fp
201f8     01 1E 06 F1 | 	add	local01, #1
201fc     0F 13 C2 FA | 	rdbyte	arg01, local01
20200     14 4E 85 F1 | 	sub	fp, #20
20204     A7 22 02 FB | 	rdlong	local03, fp
20208     11 15 02 F6 | 	mov	arg02, local03
2020c     28 14 06 F1 | 	add	arg02, #40
20210     04 4E 85 F1 | 	sub	fp, #4
20214     1C 22 06 F1 | 	add	local03, #28
20218     11 17 02 FB | 	rdlong	arg03, local03
2021c     01 18 06 F6 | 	mov	arg04, #1
20220     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
20224     00 FA 0D F2 | 	cmp	result1, #0 wz
20228     1C 00 90 AD |  if_e	jmp	#LR__3593
2022c     04 4E 05 F1 | 	add	fp, #4
20230     A7 22 02 FB | 	rdlong	local03, fp
20234     04 4E 85 F1 | 	sub	fp, #4
20238     11 22 06 F1 | 	add	local03, #17
2023c     11 03 48 FC | 	wrbyte	#1, local03
20240     01 FA 05 F6 | 	mov	result1, #1
20244     A4 01 90 FD | 	jmp	#LR__3600
20248                 | LR__3593
20248     04 4E 05 F1 | 	add	fp, #4
2024c     A7 32 02 FB | 	rdlong	local11, fp
20250     19 23 02 F6 | 	mov	local03, local11
20254     04 4E 85 F1 | 	sub	fp, #4
20258     10 32 06 F1 | 	add	local11, #16
2025c     19 33 C2 FA | 	rdbyte	local11, local11
20260     7F 32 06 F5 | 	and	local11, #127
20264     10 22 06 F1 | 	add	local03, #16
20268     11 33 42 FC | 	wrbyte	local11, local03
2026c                 | LR__3594
2026c     18 4E 05 F1 | 	add	fp, #24
20270     A7 1E 02 FB | 	rdlong	local01, fp
20274     01 1E 06 F1 | 	add	local01, #1
20278     0F 13 C2 FA | 	rdbyte	arg01, local01
2027c     14 4E 85 F1 | 	sub	fp, #20
20280     A7 14 02 FB | 	rdlong	arg02, fp
20284     28 14 06 F1 | 	add	arg02, #40
20288     1C 4E 05 F1 | 	add	fp, #28
2028c     A7 16 02 FB | 	rdlong	arg03, fp
20290     20 4E 85 F1 | 	sub	fp, #32
20294     01 18 06 F6 | 	mov	arg04, #1
20298     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2029c     00 FA 0D F2 | 	cmp	result1, #0 wz
202a0     1C 00 90 AD |  if_e	jmp	#LR__3595
202a4     04 4E 05 F1 | 	add	fp, #4
202a8     A7 22 02 FB | 	rdlong	local03, fp
202ac     04 4E 85 F1 | 	sub	fp, #4
202b0     11 22 06 F1 | 	add	local03, #17
202b4     11 03 48 FC | 	wrbyte	#1, local03
202b8     01 FA 05 F6 | 	mov	result1, #1
202bc     2C 01 90 FD | 	jmp	#LR__3600
202c0                 | LR__3595
202c0                 | LR__3596
202c0     04 4E 05 F1 | 	add	fp, #4
202c4     A7 22 02 FB | 	rdlong	local03, fp
202c8     1C 4E 05 F1 | 	add	fp, #28
202cc     A7 32 02 FB | 	rdlong	local11, fp
202d0     20 4E 85 F1 | 	sub	fp, #32
202d4     1C 22 06 F1 | 	add	local03, #28
202d8     11 33 62 FC | 	wrlong	local11, local03
202dc                 | LR__3597
202dc     04 4E 05 F1 | 	add	fp, #4
202e0     A7 1E 02 FB | 	rdlong	local01, fp
202e4     14 1E 06 F1 | 	add	local01, #20
202e8     0F 33 02 FB | 	rdlong	local11, local01
202ec     FF 33 06 F5 | 	and	local11, #511
202f0     09 22 C6 F9 | 	decod	local03, #9
202f4     19 23 82 F1 | 	sub	local03, local11
202f8     24 4E 05 F1 | 	add	fp, #36
202fc     A7 22 62 FC | 	wrlong	local03, fp
20300     1C 4E 85 F1 | 	sub	fp, #28
20304     A7 32 02 FB | 	rdlong	local11, fp
20308     0C 4E 85 F1 | 	sub	fp, #12
2030c     19 23 1A F2 | 	cmp	local03, local11 wcz
20310     0C 4E 05 11 |  if_a	add	fp, #12
20314     A7 22 02 1B |  if_a	rdlong	local03, fp
20318     1C 4E 05 11 |  if_a	add	fp, #28
2031c     A7 22 62 1C |  if_a	wrlong	local03, fp
20320     28 4E 85 11 |  if_a	sub	fp, #40
20324     34 4E 05 F1 | 	add	fp, #52
20328     A7 12 02 FB | 	rdlong	arg01, fp
2032c     30 4E 85 F1 | 	sub	fp, #48
20330     A7 28 02 FB | 	rdlong	local06, fp
20334     14 15 02 F6 | 	mov	arg02, local06
20338     28 14 06 F1 | 	add	arg02, #40
2033c     14 28 06 F1 | 	add	local06, #20
20340     14 33 02 FB | 	rdlong	local11, local06
20344     19 2F 02 F6 | 	mov	local09, local11
20348     17 31 02 F6 | 	mov	local10, local09
2034c     FF 31 06 F5 | 	and	local10, #511
20350     18 15 02 F1 | 	add	arg02, local10
20354     24 4E 05 F1 | 	add	fp, #36
20358     A7 16 02 FB | 	rdlong	arg03, fp
2035c     28 4E 85 F1 | 	sub	fp, #40
20360     D0 4A BF FD | 	call	#__system____builtin_memmove
20364                 | LR__3598
20364     0C 4E 05 F1 | 	add	fp, #12
20368     A7 22 02 FB | 	rdlong	local03, fp
2036c     1C 4E 05 F1 | 	add	fp, #28
20370     A7 2C 02 FB | 	rdlong	local08, fp
20374     16 23 82 F1 | 	sub	local03, local08
20378     1C 4E 85 F1 | 	sub	fp, #28
2037c     A7 22 62 FC | 	wrlong	local03, fp
20380     04 4E 05 F1 | 	add	fp, #4
20384     A7 1E 02 FB | 	rdlong	local01, fp
20388     0F 2B 02 FB | 	rdlong	local07, local01
2038c     18 4E 05 F1 | 	add	fp, #24
20390     A7 2C 02 FB | 	rdlong	local08, fp
20394     16 2B 02 F1 | 	add	local07, local08
20398     0F 2B 62 FC | 	wrlong	local07, local01
2039c     0C 4E 05 F1 | 	add	fp, #12
203a0     A7 22 02 FB | 	rdlong	local03, fp
203a4     0C 4E 85 F1 | 	sub	fp, #12
203a8     A7 34 02 FB | 	rdlong	local12, fp
203ac     1A 23 02 F1 | 	add	local03, local12
203b0     0C 4E 05 F1 | 	add	fp, #12
203b4     A7 22 62 FC | 	wrlong	local03, fp
203b8     30 4E 85 F1 | 	sub	fp, #48
203bc     A7 36 02 FB | 	rdlong	local13, fp
203c0     1B 23 02 F6 | 	mov	local03, local13
203c4     14 36 06 F1 | 	add	local13, #20
203c8     1B 39 02 FB | 	rdlong	local14, local13
203cc     24 4E 05 F1 | 	add	fp, #36
203d0     A7 28 02 FB | 	rdlong	local06, fp
203d4     28 4E 85 F1 | 	sub	fp, #40
203d8     14 39 02 F1 | 	add	local14, local06
203dc     14 22 06 F1 | 	add	local03, #20
203e0     11 39 62 FC | 	wrlong	local14, local03
203e4     84 FA 9F FD | 	jmp	#LR__3582
203e8                 | LR__3599
203e8                 | ' 
203e8                 | ' 
203e8                 | ' 
203e8                 | ' 
203e8                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
203e8                 | ' 
203e8                 | ' 	}
203e8                 | ' 
203e8                 | ' 	return FR_OK ;
203e8     00 FA 05 F6 | 	mov	result1, #0
203ec                 | LR__3600
203ec     A7 F0 03 F6 | 	mov	ptra, fp
203f0     B2 00 A0 FD | 	call	#popregs_
203f4                 | _fatfs_cc_f_read_ret
203f4     2D 00 64 FD | 	ret
203f8                 | 
203f8                 | _fatfs_cc_f_write
203f8     15 4A 05 F6 | 	mov	COUNT_, #21
203fc     A8 00 A0 FD | 	call	#pushregs_
20400     34 F0 07 F1 | 	add	ptra, #52
20404     04 4E 05 F1 | 	add	fp, #4
20408     A7 12 62 FC | 	wrlong	arg01, fp
2040c     04 4E 05 F1 | 	add	fp, #4
20410     A7 14 62 FC | 	wrlong	arg02, fp
20414     04 4E 05 F1 | 	add	fp, #4
20418     A7 16 62 FC | 	wrlong	arg03, fp
2041c     04 4E 05 F1 | 	add	fp, #4
20420     A7 18 62 FC | 	wrlong	arg04, fp
20424     08 4E 85 F1 | 	sub	fp, #8
20428     A7 FA 01 FB | 	rdlong	result1, fp
2042c     28 4E 05 F1 | 	add	fp, #40
20430     A7 FA 61 FC | 	wrlong	result1, fp
20434     20 4E 85 F1 | 	sub	fp, #32
20438     A7 FA 01 FB | 	rdlong	result1, fp
2043c     FD 00 68 FC | 	wrlong	#0, result1
20440     0C 4E 85 F1 | 	sub	fp, #12
20444     A7 12 02 FB | 	rdlong	arg01, fp
20448     14 4E 05 F1 | 	add	fp, #20
2044c     A7 14 02 F6 | 	mov	arg02, fp
20450     18 4E 85 F1 | 	sub	fp, #24
20454     88 F0 BF FD | 	call	#_fatfs_cc_validate
20458     14 4E 05 F1 | 	add	fp, #20
2045c     A7 FA 61 FC | 	wrlong	result1, fp
20460     00 FA 4D F2 | 	cmps	result1, #0 wz
20464     14 4E 85 F1 | 	sub	fp, #20
20468     20 00 90 5D |  if_ne	jmp	#LR__3610
2046c     04 4E 05 F1 | 	add	fp, #4
20470     A7 14 02 FB | 	rdlong	arg02, fp
20474     11 14 06 F1 | 	add	arg02, #17
20478     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2047c     10 4E 05 F1 | 	add	fp, #16
20480     A7 14 62 FC | 	wrlong	arg02, fp
20484     14 4E 85 F1 | 	sub	fp, #20
20488     10 00 90 AD |  if_e	jmp	#LR__3611
2048c                 | LR__3610
2048c     14 4E 05 F1 | 	add	fp, #20
20490     A7 FA 01 FB | 	rdlong	result1, fp
20494     14 4E 85 F1 | 	sub	fp, #20
20498     44 07 90 FD | 	jmp	#LR__3633
2049c                 | LR__3611
2049c     04 4E 05 F1 | 	add	fp, #4
204a0     A7 14 02 FB | 	rdlong	arg02, fp
204a4     04 4E 85 F1 | 	sub	fp, #4
204a8     10 14 06 F1 | 	add	arg02, #16
204ac     0A 15 C2 FA | 	rdbyte	arg02, arg02
204b0     02 14 CE F7 | 	test	arg02, #2 wz
204b4     07 FA 05 A6 |  if_e	mov	result1, #7
204b8     24 07 90 AD |  if_e	jmp	#LR__3633
204bc     04 4E 05 F1 | 	add	fp, #4
204c0     A7 14 02 FB | 	rdlong	arg02, fp
204c4     0A 13 02 F6 | 	mov	arg01, arg02
204c8     14 12 06 F1 | 	add	arg01, #20
204cc     09 13 02 FB | 	rdlong	arg01, arg01
204d0     08 4E 05 F1 | 	add	fp, #8
204d4     A7 FA 01 FB | 	rdlong	result1, fp
204d8     FD 12 02 F1 | 	add	arg01, result1
204dc     0C 4E 85 F1 | 	sub	fp, #12
204e0     14 14 06 F1 | 	add	arg02, #20
204e4     0A FB 01 FB | 	rdlong	result1, arg02
204e8     FD 12 12 F2 | 	cmp	arg01, result1 wc
204ec     24 00 90 3D |  if_ae	jmp	#LR__3612
204f0     04 4E 05 F1 | 	add	fp, #4
204f4     A7 14 02 FB | 	rdlong	arg02, fp
204f8     01 FA 65 F6 | 	neg	result1, #1
204fc     14 14 06 F1 | 	add	arg02, #20
20500     0A 15 02 FB | 	rdlong	arg02, arg02
20504     0A FB 81 F1 | 	sub	result1, arg02
20508     08 4E 05 F1 | 	add	fp, #8
2050c     A7 FA 61 FC | 	wrlong	result1, fp
20510     0C 4E 85 F1 | 	sub	fp, #12
20514                 | LR__3612
20514                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
20514                 | ' 	}
20514                 | ' 
20514                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
20514                 | LR__3613
20514     0C 4E 05 F1 | 	add	fp, #12
20518     A7 FA 01 FB | 	rdlong	result1, fp
2051c     0C 4E 85 F1 | 	sub	fp, #12
20520     01 FA 15 F2 | 	cmp	result1, #1 wc
20524     90 06 90 CD |  if_b	jmp	#LR__3632
20528     04 4E 05 F1 | 	add	fp, #4
2052c     A7 FA 01 FB | 	rdlong	result1, fp
20530     04 4E 85 F1 | 	sub	fp, #4
20534     14 FA 05 F1 | 	add	result1, #20
20538     FD FA 01 FB | 	rdlong	result1, result1
2053c     FF FB CD F7 | 	test	result1, #511 wz
20540     D8 04 90 5D |  if_ne	jmp	#LR__3628
20544     04 4E 05 F1 | 	add	fp, #4
20548     A7 FA 01 FB | 	rdlong	result1, fp
2054c     14 FA 05 F1 | 	add	result1, #20
20550     FD FA 01 FB | 	rdlong	result1, result1
20554     09 FA 45 F0 | 	shr	result1, #9
20558     14 4E 05 F1 | 	add	fp, #20
2055c     A7 14 02 FB | 	rdlong	arg02, fp
20560     0A 14 06 F1 | 	add	arg02, #10
20564     0A 19 E2 FA | 	rdword	arg04, arg02
20568     0C 15 32 F9 | 	getword	arg02, arg04, #0
2056c     01 14 86 F1 | 	sub	arg02, #1
20570     0A FB 09 F5 | 	and	result1, arg02 wz
20574     14 4E 05 F1 | 	add	fp, #20
20578     A7 FA 61 FC | 	wrlong	result1, fp
2057c     2C 4E 85 F1 | 	sub	fp, #44
20580     44 01 90 5D |  if_ne	jmp	#LR__3619
20584     04 4E 05 F1 | 	add	fp, #4
20588     A7 FA 01 FB | 	rdlong	result1, fp
2058c     04 4E 85 F1 | 	sub	fp, #4
20590     14 FA 05 F1 | 	add	result1, #20
20594     FD 14 0A FB | 	rdlong	arg02, result1 wz
20598     44 00 90 5D |  if_ne	jmp	#LR__3614
2059c     04 4E 05 F1 | 	add	fp, #4
205a0     A7 14 02 FB | 	rdlong	arg02, fp
205a4     08 14 06 F1 | 	add	arg02, #8
205a8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
205ac     18 4E 05 F1 | 	add	fp, #24
205b0     A7 14 62 FC | 	wrlong	arg02, fp
205b4     1C 4E 85 F1 | 	sub	fp, #28
205b8     4C 00 90 5D |  if_ne	jmp	#LR__3615
205bc     04 4E 05 F1 | 	add	fp, #4
205c0     A7 12 02 FB | 	rdlong	arg01, fp
205c4     04 4E 85 F1 | 	sub	fp, #4
205c8     00 14 06 F6 | 	mov	arg02, #0
205cc     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
205d0     1C 4E 05 F1 | 	add	fp, #28
205d4     A7 FA 61 FC | 	wrlong	result1, fp
205d8     1C 4E 85 F1 | 	sub	fp, #28
205dc     28 00 90 FD | 	jmp	#LR__3615
205e0                 | LR__3614
205e0     04 4E 05 F1 | 	add	fp, #4
205e4     A7 18 02 FB | 	rdlong	arg04, fp
205e8     0C 13 02 F6 | 	mov	arg01, arg04
205ec     04 4E 85 F1 | 	sub	fp, #4
205f0     18 18 06 F1 | 	add	arg04, #24
205f4     0C 15 02 FB | 	rdlong	arg02, arg04
205f8     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
205fc     1C 4E 05 F1 | 	add	fp, #28
20600     A7 FA 61 FC | 	wrlong	result1, fp
20604     1C 4E 85 F1 | 	sub	fp, #28
20608                 | LR__3615
20608     1C 4E 05 F1 | 	add	fp, #28
2060c     A7 FA 09 FB | 	rdlong	result1, fp wz
20610     1C 4E 85 F1 | 	sub	fp, #28
20614     A0 05 90 AD |  if_e	jmp	#LR__3632
20618     1C 4E 05 F1 | 	add	fp, #28
2061c     A7 FA 01 FB | 	rdlong	result1, fp
20620     1C 4E 85 F1 | 	sub	fp, #28
20624     01 FA 0D F2 | 	cmp	result1, #1 wz
20628     1C 00 90 5D |  if_ne	jmp	#LR__3616
2062c     04 4E 05 F1 | 	add	fp, #4
20630     A7 FA 01 FB | 	rdlong	result1, fp
20634     04 4E 85 F1 | 	sub	fp, #4
20638     11 FA 05 F1 | 	add	result1, #17
2063c     FD 04 48 FC | 	wrbyte	#2, result1
20640     02 FA 05 F6 | 	mov	result1, #2
20644     98 05 90 FD | 	jmp	#LR__3633
20648                 | LR__3616
20648     1C 4E 05 F1 | 	add	fp, #28
2064c     A7 FA 01 FB | 	rdlong	result1, fp
20650     1C 4E 85 F1 | 	sub	fp, #28
20654     FF FF 7F FF 
20658     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2065c     1C 00 90 5D |  if_ne	jmp	#LR__3617
20660     04 4E 05 F1 | 	add	fp, #4
20664     A7 FA 01 FB | 	rdlong	result1, fp
20668     04 4E 85 F1 | 	sub	fp, #4
2066c     11 FA 05 F1 | 	add	result1, #17
20670     FD 02 48 FC | 	wrbyte	#1, result1
20674     01 FA 05 F6 | 	mov	result1, #1
20678     64 05 90 FD | 	jmp	#LR__3633
2067c                 | LR__3617
2067c     04 4E 05 F1 | 	add	fp, #4
20680     A7 FA 01 FB | 	rdlong	result1, fp
20684     18 4E 05 F1 | 	add	fp, #24
20688     A7 18 02 FB | 	rdlong	arg04, fp
2068c     18 FA 05 F1 | 	add	result1, #24
20690     FD 18 62 FC | 	wrlong	arg04, result1
20694     18 4E 85 F1 | 	sub	fp, #24
20698     A7 FA 01 FB | 	rdlong	result1, fp
2069c     04 4E 85 F1 | 	sub	fp, #4
206a0     08 FA 05 F1 | 	add	result1, #8
206a4     FD FA 09 FB | 	rdlong	result1, result1 wz
206a8     1C 00 90 5D |  if_ne	jmp	#LR__3618
206ac     04 4E 05 F1 | 	add	fp, #4
206b0     A7 18 02 FB | 	rdlong	arg04, fp
206b4     18 4E 05 F1 | 	add	fp, #24
206b8     A7 FA 01 FB | 	rdlong	result1, fp
206bc     1C 4E 85 F1 | 	sub	fp, #28
206c0     08 18 06 F1 | 	add	arg04, #8
206c4     0C FB 61 FC | 	wrlong	result1, arg04
206c8                 | LR__3618
206c8                 | LR__3619
206c8     04 4E 05 F1 | 	add	fp, #4
206cc     A7 18 02 FB | 	rdlong	arg04, fp
206d0     04 4E 85 F1 | 	sub	fp, #4
206d4     10 18 06 F1 | 	add	arg04, #16
206d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
206dc     80 18 CE F7 | 	test	arg04, #128 wz
206e0     7C 00 90 AD |  if_e	jmp	#LR__3621
206e4     18 4E 05 F1 | 	add	fp, #24
206e8     A7 18 02 FB | 	rdlong	arg04, fp
206ec     01 18 06 F1 | 	add	arg04, #1
206f0     0C 13 C2 FA | 	rdbyte	arg01, arg04
206f4     14 4E 85 F1 | 	sub	fp, #20
206f8     A7 18 02 FB | 	rdlong	arg04, fp
206fc     0C 15 02 F6 | 	mov	arg02, arg04
20700     28 14 06 F1 | 	add	arg02, #40
20704     04 4E 85 F1 | 	sub	fp, #4
20708     1C 18 06 F1 | 	add	arg04, #28
2070c     0C 17 02 FB | 	rdlong	arg03, arg04
20710     01 18 06 F6 | 	mov	arg04, #1
20714     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
20718     00 FA 0D F2 | 	cmp	result1, #0 wz
2071c     1C 00 90 AD |  if_e	jmp	#LR__3620
20720     04 4E 05 F1 | 	add	fp, #4
20724     A7 FA 01 FB | 	rdlong	result1, fp
20728     04 4E 85 F1 | 	sub	fp, #4
2072c     11 FA 05 F1 | 	add	result1, #17
20730     FD 02 48 FC | 	wrbyte	#1, result1
20734     01 FA 05 F6 | 	mov	result1, #1
20738     A4 04 90 FD | 	jmp	#LR__3633
2073c                 | LR__3620
2073c     04 4E 05 F1 | 	add	fp, #4
20740     A7 18 02 FB | 	rdlong	arg04, fp
20744     0C FB 01 F6 | 	mov	result1, arg04
20748     04 4E 85 F1 | 	sub	fp, #4
2074c     10 18 06 F1 | 	add	arg04, #16
20750     0C 19 C2 FA | 	rdbyte	arg04, arg04
20754     7F 18 06 F5 | 	and	arg04, #127
20758     10 FA 05 F1 | 	add	result1, #16
2075c     FD 18 42 FC | 	wrbyte	arg04, result1
20760                 | LR__3621
20760     18 4E 05 F1 | 	add	fp, #24
20764     A7 12 02 FB | 	rdlong	arg01, fp
20768     14 4E 85 F1 | 	sub	fp, #20
2076c     A7 14 02 FB | 	rdlong	arg02, fp
20770     04 4E 85 F1 | 	sub	fp, #4
20774     18 14 06 F1 | 	add	arg02, #24
20778     0A 15 02 FB | 	rdlong	arg02, arg02
2077c     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
20780     20 4E 05 F1 | 	add	fp, #32
20784     A7 FA 61 FC | 	wrlong	result1, fp
20788     20 4E 85 F1 | 	sub	fp, #32
2078c     00 FA 0D F2 | 	cmp	result1, #0 wz
20790     1C 00 90 5D |  if_ne	jmp	#LR__3622
20794     04 4E 05 F1 | 	add	fp, #4
20798     A7 FA 01 FB | 	rdlong	result1, fp
2079c     04 4E 85 F1 | 	sub	fp, #4
207a0     11 FA 05 F1 | 	add	result1, #17
207a4     FD 04 48 FC | 	wrbyte	#2, result1
207a8     02 FA 05 F6 | 	mov	result1, #2
207ac     30 04 90 FD | 	jmp	#LR__3633
207b0                 | LR__3622
207b0     20 4E 05 F1 | 	add	fp, #32
207b4     A7 FA 01 FB | 	rdlong	result1, fp
207b8     0C 4E 05 F1 | 	add	fp, #12
207bc     A7 1E 02 FB | 	rdlong	local01, fp
207c0     0F FB 01 F1 | 	add	result1, local01
207c4     0C 4E 85 F1 | 	sub	fp, #12
207c8     A7 FA 61 FC | 	wrlong	result1, fp
207cc     14 4E 85 F1 | 	sub	fp, #20
207d0     A7 FA 01 FB | 	rdlong	result1, fp
207d4     09 FA 45 F0 | 	shr	result1, #9
207d8     1C 4E 05 F1 | 	add	fp, #28
207dc     A7 FA 61 FC | 	wrlong	result1, fp
207e0     28 4E 85 F1 | 	sub	fp, #40
207e4     01 FA 15 F2 | 	cmp	result1, #1 wc
207e8     60 01 90 CD |  if_b	jmp	#LR__3626
207ec     2C 4E 05 F1 | 	add	fp, #44
207f0     A7 FA 01 FB | 	rdlong	result1, fp
207f4     04 4E 85 F1 | 	sub	fp, #4
207f8     A7 18 02 FB | 	rdlong	arg04, fp
207fc     0C FB 01 F1 | 	add	result1, arg04
20800     10 4E 85 F1 | 	sub	fp, #16
20804     A7 18 02 FB | 	rdlong	arg04, fp
20808     18 4E 85 F1 | 	sub	fp, #24
2080c     0A 18 06 F1 | 	add	arg04, #10
20810     0C 19 E2 FA | 	rdword	arg04, arg04
20814     0C FB 19 F2 | 	cmp	result1, arg04 wcz
20818     28 00 90 ED |  if_be	jmp	#LR__3623
2081c     18 4E 05 F1 | 	add	fp, #24
20820     A7 FA 01 FB | 	rdlong	result1, fp
20824     0A FA 05 F1 | 	add	result1, #10
20828     FD FA E1 FA | 	rdword	result1, result1
2082c     14 4E 05 F1 | 	add	fp, #20
20830     A7 18 02 FB | 	rdlong	arg04, fp
20834     0C FB 81 F1 | 	sub	result1, arg04
20838     04 4E 85 F1 | 	sub	fp, #4
2083c     A7 FA 61 FC | 	wrlong	result1, fp
20840     28 4E 85 F1 | 	sub	fp, #40
20844                 | LR__3623
20844     18 4E 05 F1 | 	add	fp, #24
20848     A7 18 02 FB | 	rdlong	arg04, fp
2084c     01 18 06 F1 | 	add	arg04, #1
20850     0C 13 C2 FA | 	rdbyte	arg01, arg04
20854     18 4E 05 F1 | 	add	fp, #24
20858     A7 14 02 FB | 	rdlong	arg02, fp
2085c     10 4E 85 F1 | 	sub	fp, #16
20860     A7 16 02 FB | 	rdlong	arg03, fp
20864     08 4E 05 F1 | 	add	fp, #8
20868     A7 18 02 FB | 	rdlong	arg04, fp
2086c     28 4E 85 F1 | 	sub	fp, #40
20870     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
20874     00 FA 0D F2 | 	cmp	result1, #0 wz
20878     1C 00 90 AD |  if_e	jmp	#LR__3624
2087c     04 4E 05 F1 | 	add	fp, #4
20880     A7 1E 02 FB | 	rdlong	local01, fp
20884     04 4E 85 F1 | 	sub	fp, #4
20888     11 1E 06 F1 | 	add	local01, #17
2088c     0F 03 48 FC | 	wrbyte	#1, local01
20890     01 FA 05 F6 | 	mov	result1, #1
20894     48 03 90 FD | 	jmp	#LR__3633
20898                 | LR__3624
20898     04 4E 05 F1 | 	add	fp, #4
2089c     A7 FA 01 FB | 	rdlong	result1, fp
208a0     1C FA 05 F1 | 	add	result1, #28
208a4     FD FA 01 FB | 	rdlong	result1, result1
208a8     1C 4E 05 F1 | 	add	fp, #28
208ac     A7 20 02 FB | 	rdlong	local02, fp
208b0     10 FB 81 F1 | 	sub	result1, local02
208b4     08 4E 05 F1 | 	add	fp, #8
208b8     A7 18 02 FB | 	rdlong	arg04, fp
208bc     28 4E 85 F1 | 	sub	fp, #40
208c0     0C FB 11 F2 | 	cmp	result1, arg04 wc
208c4     68 00 90 3D |  if_ae	jmp	#LR__3625
208c8     04 4E 05 F1 | 	add	fp, #4
208cc     A7 12 02 FB | 	rdlong	arg01, fp
208d0     28 12 06 F1 | 	add	arg01, #40
208d4     2C 4E 05 F1 | 	add	fp, #44
208d8     A7 14 02 FB | 	rdlong	arg02, fp
208dc     2C 4E 85 F1 | 	sub	fp, #44
208e0     A7 FA 01 FB | 	rdlong	result1, fp
208e4     1C FA 05 F1 | 	add	result1, #28
208e8     FD 22 02 FB | 	rdlong	local03, result1
208ec     1C 4E 05 F1 | 	add	fp, #28
208f0     A7 18 02 FB | 	rdlong	arg04, fp
208f4     20 4E 85 F1 | 	sub	fp, #32
208f8     0C 23 82 F1 | 	sub	local03, arg04
208fc     09 22 66 F0 | 	shl	local03, #9
20900     11 15 02 F1 | 	add	arg02, local03
20904     09 16 C6 F9 | 	decod	arg03, #9
20908     28 45 BF FD | 	call	#__system____builtin_memmove
2090c     04 4E 05 F1 | 	add	fp, #4
20910     A7 18 02 FB | 	rdlong	arg04, fp
20914     0C FB 01 F6 | 	mov	result1, arg04
20918     04 4E 85 F1 | 	sub	fp, #4
2091c     10 18 06 F1 | 	add	arg04, #16
20920     0C 19 C2 FA | 	rdbyte	arg04, arg04
20924     7F 18 06 F5 | 	and	arg04, #127
20928     10 FA 05 F1 | 	add	result1, #16
2092c     FD 18 42 FC | 	wrbyte	arg04, result1
20930                 | LR__3625
20930     28 4E 05 F1 | 	add	fp, #40
20934     A7 FA 01 FB | 	rdlong	result1, fp
20938     09 FA 65 F0 | 	shl	result1, #9
2093c     04 4E 85 F1 | 	sub	fp, #4
20940     A7 FA 61 FC | 	wrlong	result1, fp
20944     24 4E 85 F1 | 	sub	fp, #36
20948                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
20948                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
20948                 | ' 				}
20948                 | ' 
20948                 | ' 
20948                 | ' 				wcnt =  ((UINT) 512 )  * cc;
20948                 | ' 				continue;
20948     74 01 90 FD | 	jmp	#LR__3629
2094c                 | LR__3626
2094c     04 4E 05 F1 | 	add	fp, #4
20950     A7 20 02 FB | 	rdlong	local02, fp
20954     1C 20 06 F1 | 	add	local02, #28
20958     10 FB 01 FB | 	rdlong	result1, local02
2095c     1C 4E 05 F1 | 	add	fp, #28
20960     A7 20 02 FB | 	rdlong	local02, fp
20964     20 4E 85 F1 | 	sub	fp, #32
20968     10 FB 09 F2 | 	cmp	result1, local02 wz
2096c     90 00 90 AD |  if_e	jmp	#LR__3627
20970     04 4E 05 F1 | 	add	fp, #4
20974     A7 FA 01 FB | 	rdlong	result1, fp
20978     FD 22 02 F6 | 	mov	local03, result1
2097c     04 4E 85 F1 | 	sub	fp, #4
20980     14 22 06 F1 | 	add	local03, #20
20984     11 23 02 FB | 	rdlong	local03, local03
20988     0C FA 05 F1 | 	add	result1, #12
2098c     FD 24 02 FB | 	rdlong	local04, result1
20990     12 27 02 F6 | 	mov	local05, local04
20994     13 23 12 F2 | 	cmp	local03, local05 wc
20998     64 00 90 3D |  if_ae	jmp	#LR__3627
2099c     18 4E 05 F1 | 	add	fp, #24
209a0     A7 18 02 FB | 	rdlong	arg04, fp
209a4     01 18 06 F1 | 	add	arg04, #1
209a8     0C 13 C2 FA | 	rdbyte	arg01, arg04
209ac     14 4E 85 F1 | 	sub	fp, #20
209b0     A7 28 02 FB | 	rdlong	local06, fp
209b4     28 28 06 F1 | 	add	local06, #40
209b8     14 2B 02 F6 | 	mov	local07, local06
209bc     1C 4E 05 F1 | 	add	fp, #28
209c0     A7 2C 02 FB | 	rdlong	local08, fp
209c4     20 4E 85 F1 | 	sub	fp, #32
209c8     01 2E 06 F6 | 	mov	local09, #1
209cc     15 15 02 F6 | 	mov	arg02, local07
209d0     16 17 02 F6 | 	mov	arg03, local08
209d4     01 18 06 F6 | 	mov	arg04, #1
209d8     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
209dc     FD 30 0A F6 | 	mov	local10, result1 wz
209e0     1C 00 90 AD |  if_e	jmp	#LR__3627
209e4     04 4E 05 F1 | 	add	fp, #4
209e8     A7 30 02 FB | 	rdlong	local10, fp
209ec     04 4E 85 F1 | 	sub	fp, #4
209f0     11 30 06 F1 | 	add	local10, #17
209f4     18 03 48 FC | 	wrbyte	#1, local10
209f8                 | ' 				fp->fptr < fp->obj.objsize &&
209f8                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
209f8                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
209f8     01 FA 05 F6 | 	mov	result1, #1
209fc     E0 01 90 FD | 	jmp	#LR__3633
20a00                 | LR__3627
20a00     04 4E 05 F1 | 	add	fp, #4
20a04     A7 18 02 FB | 	rdlong	arg04, fp
20a08     1C 4E 05 F1 | 	add	fp, #28
20a0c     A7 FA 01 FB | 	rdlong	result1, fp
20a10     20 4E 85 F1 | 	sub	fp, #32
20a14     1C 18 06 F1 | 	add	arg04, #28
20a18     0C FB 61 FC | 	wrlong	result1, arg04
20a1c                 | LR__3628
20a1c     04 4E 05 F1 | 	add	fp, #4
20a20     A7 FA 01 FB | 	rdlong	result1, fp
20a24     14 FA 05 F1 | 	add	result1, #20
20a28     FD FA 01 FB | 	rdlong	result1, result1
20a2c     FF FB 05 F5 | 	and	result1, #511
20a30     09 32 C6 F9 | 	decod	local11, #9
20a34     FD 32 82 F1 | 	sub	local11, result1
20a38     20 4E 05 F1 | 	add	fp, #32
20a3c     A7 32 62 FC | 	wrlong	local11, fp
20a40     18 4E 85 F1 | 	sub	fp, #24
20a44     A7 FA 01 FB | 	rdlong	result1, fp
20a48     0C 4E 85 F1 | 	sub	fp, #12
20a4c     FD 32 1A F2 | 	cmp	local11, result1 wcz
20a50     0C 4E 05 11 |  if_a	add	fp, #12
20a54     A7 32 02 1B |  if_a	rdlong	local11, fp
20a58     18 4E 05 11 |  if_a	add	fp, #24
20a5c     A7 32 62 1C |  if_a	wrlong	local11, fp
20a60     24 4E 85 11 |  if_a	sub	fp, #36
20a64     04 4E 05 F1 | 	add	fp, #4
20a68     A7 32 02 FB | 	rdlong	local11, fp
20a6c     19 13 02 F6 | 	mov	arg01, local11
20a70     28 12 06 F1 | 	add	arg01, #40
20a74     14 32 06 F1 | 	add	local11, #20
20a78     19 33 02 FB | 	rdlong	local11, local11
20a7c     FF 33 06 F5 | 	and	local11, #511
20a80     19 13 02 F1 | 	add	arg01, local11
20a84     2C 4E 05 F1 | 	add	fp, #44
20a88     A7 14 02 FB | 	rdlong	arg02, fp
20a8c     0C 4E 85 F1 | 	sub	fp, #12
20a90     A7 16 02 FB | 	rdlong	arg03, fp
20a94     24 4E 85 F1 | 	sub	fp, #36
20a98     98 43 BF FD | 	call	#__system____builtin_memmove
20a9c     04 4E 05 F1 | 	add	fp, #4
20aa0     A7 FA 01 FB | 	rdlong	result1, fp
20aa4     FD 32 02 F6 | 	mov	local11, result1
20aa8     04 4E 85 F1 | 	sub	fp, #4
20aac     10 FA 05 F1 | 	add	result1, #16
20ab0     FD FA C1 FA | 	rdbyte	result1, result1
20ab4     80 FA 45 F5 | 	or	result1, #128
20ab8     10 32 06 F1 | 	add	local11, #16
20abc     19 FB 41 FC | 	wrbyte	result1, local11
20ac0                 | LR__3629
20ac0     0C 4E 05 F1 | 	add	fp, #12
20ac4     A7 32 02 FB | 	rdlong	local11, fp
20ac8     18 4E 05 F1 | 	add	fp, #24
20acc     A7 FA 01 FB | 	rdlong	result1, fp
20ad0     FD 32 82 F1 | 	sub	local11, result1
20ad4     18 4E 85 F1 | 	sub	fp, #24
20ad8     A7 32 62 FC | 	wrlong	local11, fp
20adc     04 4E 05 F1 | 	add	fp, #4
20ae0     A7 34 02 FB | 	rdlong	local12, fp
20ae4     1A 33 02 FB | 	rdlong	local11, local12
20ae8     14 4E 05 F1 | 	add	fp, #20
20aec     A7 36 02 FB | 	rdlong	local13, fp
20af0     1B 33 02 F1 | 	add	local11, local13
20af4     1A 33 62 FC | 	wrlong	local11, local12
20af8     0C 4E 05 F1 | 	add	fp, #12
20afc     A7 32 02 FB | 	rdlong	local11, fp
20b00     0C 4E 85 F1 | 	sub	fp, #12
20b04     A7 38 02 FB | 	rdlong	local14, fp
20b08     1C 33 02 F1 | 	add	local11, local14
20b0c     0C 4E 05 F1 | 	add	fp, #12
20b10     A7 32 62 FC | 	wrlong	local11, fp
20b14     2C 4E 85 F1 | 	sub	fp, #44
20b18     A7 3A 02 FB | 	rdlong	local15, fp
20b1c     1D 33 02 F6 | 	mov	local11, local15
20b20     14 3A 06 F1 | 	add	local15, #20
20b24     1D 3B 02 FB | 	rdlong	local15, local15
20b28     20 4E 05 F1 | 	add	fp, #32
20b2c     A7 3C 02 FB | 	rdlong	local16, fp
20b30     1E 3B 02 F1 | 	add	local15, local16
20b34     14 32 06 F1 | 	add	local11, #20
20b38     19 3B 62 FC | 	wrlong	local15, local11
20b3c     20 4E 85 F1 | 	sub	fp, #32
20b40     A7 3E 02 FB | 	rdlong	local17, fp
20b44     1F 33 02 F6 | 	mov	local11, local17
20b48     1F 41 02 F6 | 	mov	local18, local17
20b4c     04 4E 85 F1 | 	sub	fp, #4
20b50     14 3E 06 F1 | 	add	local17, #20
20b54     1F 43 02 FB | 	rdlong	local19, local17
20b58     0C 40 06 F1 | 	add	local18, #12
20b5c     20 45 02 FB | 	rdlong	local20, local18
20b60     22 43 1A F2 | 	cmp	local19, local20 wcz
20b64     24 00 90 ED |  if_be	jmp	#LR__3630
20b68     04 4E 05 F1 | 	add	fp, #4
20b6c     A7 26 02 FB | 	rdlong	local05, fp
20b70     04 4E 85 F1 | 	sub	fp, #4
20b74     13 23 02 F6 | 	mov	local03, local05
20b78     14 22 06 F1 | 	add	local03, #20
20b7c     11 25 02 FB | 	rdlong	local04, local03
20b80     14 22 86 F1 | 	sub	local03, #20
20b84     12 47 02 F6 | 	mov	local21, local04
20b88     20 00 90 FD | 	jmp	#LR__3631
20b8c                 | LR__3630
20b8c     04 4E 05 F1 | 	add	fp, #4
20b90     A7 2A 02 FB | 	rdlong	local07, fp
20b94     04 4E 85 F1 | 	sub	fp, #4
20b98     15 31 02 F6 | 	mov	local10, local07
20b9c     0C 30 06 F1 | 	add	local10, #12
20ba0     18 2D 02 FB | 	rdlong	local08, local10
20ba4     0C 30 86 F1 | 	sub	local10, #12
20ba8     16 47 02 F6 | 	mov	local21, local08
20bac                 | LR__3631
20bac     0C 32 06 F1 | 	add	local11, #12
20bb0     19 47 62 FC | 	wrlong	local21, local11
20bb4     5C F9 9F FD | 	jmp	#LR__3613
20bb8                 | LR__3632
20bb8     04 4E 05 F1 | 	add	fp, #4
20bbc     A7 34 02 FB | 	rdlong	local12, fp
20bc0     1A 1F 02 F6 | 	mov	local01, local12
20bc4     04 4E 85 F1 | 	sub	fp, #4
20bc8     10 34 06 F1 | 	add	local12, #16
20bcc     1A 33 C2 FA | 	rdbyte	local11, local12
20bd0     40 32 46 F5 | 	or	local11, #64
20bd4     10 1E 06 F1 | 	add	local01, #16
20bd8     0F 33 42 FC | 	wrbyte	local11, local01
20bdc                 | ' 
20bdc                 | ' 
20bdc                 | ' 
20bdc                 | ' 
20bdc                 | ' 
20bdc                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
20bdc                 | ' 		fp->flag |=  0x80 ;
20bdc                 | ' 
20bdc                 | ' 	}
20bdc                 | ' 
20bdc                 | ' 	fp->flag |=  0x40 ;
20bdc                 | ' 
20bdc                 | ' 	return FR_OK ;
20bdc     00 FA 05 F6 | 	mov	result1, #0
20be0                 | LR__3633
20be0     A7 F0 03 F6 | 	mov	ptra, fp
20be4     B2 00 A0 FD | 	call	#popregs_
20be8                 | _fatfs_cc_f_write_ret
20be8     2D 00 64 FD | 	ret
20bec                 | 
20bec                 | _fatfs_cc_f_sync
20bec     00 4A 05 F6 | 	mov	COUNT_, #0
20bf0     A8 00 A0 FD | 	call	#pushregs_
20bf4     18 F0 07 F1 | 	add	ptra, #24
20bf8     04 4E 05 F1 | 	add	fp, #4
20bfc     A7 12 62 FC | 	wrlong	arg01, fp
20c00     08 4E 05 F1 | 	add	fp, #8
20c04     A7 14 02 F6 | 	mov	arg02, fp
20c08     0C 4E 85 F1 | 	sub	fp, #12
20c0c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
20c10     08 4E 05 F1 | 	add	fp, #8
20c14     A7 FA 61 FC | 	wrlong	result1, fp
20c18     08 4E 85 F1 | 	sub	fp, #8
20c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
20c20     C0 01 90 5D |  if_ne	jmp	#LR__3643
20c24     04 4E 05 F1 | 	add	fp, #4
20c28     A7 18 02 FB | 	rdlong	arg04, fp
20c2c     04 4E 85 F1 | 	sub	fp, #4
20c30     10 18 06 F1 | 	add	arg04, #16
20c34     0C 19 C2 FA | 	rdbyte	arg04, arg04
20c38     40 18 CE F7 | 	test	arg04, #64 wz
20c3c     A4 01 90 AD |  if_e	jmp	#LR__3642
20c40     04 4E 05 F1 | 	add	fp, #4
20c44     A7 18 02 FB | 	rdlong	arg04, fp
20c48     04 4E 85 F1 | 	sub	fp, #4
20c4c     10 18 06 F1 | 	add	arg04, #16
20c50     0C 19 C2 FA | 	rdbyte	arg04, arg04
20c54     80 18 CE F7 | 	test	arg04, #128 wz
20c58     64 00 90 AD |  if_e	jmp	#LR__3640
20c5c     0C 4E 05 F1 | 	add	fp, #12
20c60     A7 18 02 FB | 	rdlong	arg04, fp
20c64     01 18 06 F1 | 	add	arg04, #1
20c68     0C 13 C2 FA | 	rdbyte	arg01, arg04
20c6c     08 4E 85 F1 | 	sub	fp, #8
20c70     A7 18 02 FB | 	rdlong	arg04, fp
20c74     0C 15 02 F6 | 	mov	arg02, arg04
20c78     28 14 06 F1 | 	add	arg02, #40
20c7c     04 4E 85 F1 | 	sub	fp, #4
20c80     1C 18 06 F1 | 	add	arg04, #28
20c84     0C 17 02 FB | 	rdlong	arg03, arg04
20c88     01 18 06 F6 | 	mov	arg04, #1
20c8c     0C AE BF FD | 	call	#_fatfs_cc_disk_write
20c90     00 FA 0D F2 | 	cmp	result1, #0 wz
20c94     01 FA 05 56 |  if_ne	mov	result1, #1
20c98     54 01 90 5D |  if_ne	jmp	#LR__3644
20c9c     04 4E 05 F1 | 	add	fp, #4
20ca0     A7 18 02 FB | 	rdlong	arg04, fp
20ca4     0C 17 02 F6 | 	mov	arg03, arg04
20ca8     04 4E 85 F1 | 	sub	fp, #4
20cac     10 18 06 F1 | 	add	arg04, #16
20cb0     0C 19 C2 FA | 	rdbyte	arg04, arg04
20cb4     7F 18 06 F5 | 	and	arg04, #127
20cb8     10 16 06 F1 | 	add	arg03, #16
20cbc     0B 19 42 FC | 	wrbyte	arg04, arg03
20cc0                 | LR__3640
20cc0     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
20cc4     10 4E 05 F1 | 	add	fp, #16
20cc8     A7 FA 61 FC | 	wrlong	result1, fp
20ccc     04 4E 85 F1 | 	sub	fp, #4
20cd0     A7 12 02 FB | 	rdlong	arg01, fp
20cd4     08 4E 85 F1 | 	sub	fp, #8
20cd8     A7 18 02 FB | 	rdlong	arg04, fp
20cdc     04 4E 85 F1 | 	sub	fp, #4
20ce0     20 18 06 F1 | 	add	arg04, #32
20ce4     0C 15 02 FB | 	rdlong	arg02, arg04
20ce8     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
20cec     08 4E 05 F1 | 	add	fp, #8
20cf0     A7 FA 61 FC | 	wrlong	result1, fp
20cf4     08 4E 85 F1 | 	sub	fp, #8
20cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
20cfc     E4 00 90 5D |  if_ne	jmp	#LR__3641
20d00     04 4E 05 F1 | 	add	fp, #4
20d04     A7 18 02 FB | 	rdlong	arg04, fp
20d08     24 18 06 F1 | 	add	arg04, #36
20d0c     0C 19 02 FB | 	rdlong	arg04, arg04
20d10     10 4E 05 F1 | 	add	fp, #16
20d14     A7 18 62 FC | 	wrlong	arg04, fp
20d18     0C 17 02 F6 | 	mov	arg03, arg04
20d1c     0B 16 06 F1 | 	add	arg03, #11
20d20     0B 17 C2 FA | 	rdbyte	arg03, arg03
20d24     20 16 46 F5 | 	or	arg03, #32
20d28     0B 18 06 F1 | 	add	arg04, #11
20d2c     0C 17 42 FC | 	wrbyte	arg03, arg04
20d30     10 4E 85 F1 | 	sub	fp, #16
20d34     A7 18 02 FB | 	rdlong	arg04, fp
20d38     0C 13 02 FB | 	rdlong	arg01, arg04
20d3c     10 4E 05 F1 | 	add	fp, #16
20d40     A7 14 02 FB | 	rdlong	arg02, fp
20d44     14 4E 85 F1 | 	sub	fp, #20
20d48     08 18 06 F1 | 	add	arg04, #8
20d4c     0C 17 02 FB | 	rdlong	arg03, arg04
20d50     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
20d54     14 4E 05 F1 | 	add	fp, #20
20d58     A7 12 02 FB | 	rdlong	arg01, fp
20d5c     1C 12 06 F1 | 	add	arg01, #28
20d60     10 4E 85 F1 | 	sub	fp, #16
20d64     A7 18 02 FB | 	rdlong	arg04, fp
20d68     0C 18 06 F1 | 	add	arg04, #12
20d6c     0C 15 02 FB | 	rdlong	arg02, arg04
20d70     09 15 62 FC | 	wrlong	arg02, arg01
20d74     10 4E 05 F1 | 	add	fp, #16
20d78     A7 12 02 FB | 	rdlong	arg01, fp
20d7c     16 12 06 F1 | 	add	arg01, #22
20d80     04 4E 85 F1 | 	sub	fp, #4
20d84     A7 14 02 FB | 	rdlong	arg02, fp
20d88     09 15 62 FC | 	wrlong	arg02, arg01
20d8c     04 4E 05 F1 | 	add	fp, #4
20d90     A7 12 02 FB | 	rdlong	arg01, fp
20d94     12 12 06 F1 | 	add	arg01, #18
20d98     09 01 58 FC | 	wrword	#0, arg01
20d9c     08 4E 85 F1 | 	sub	fp, #8
20da0     A7 18 02 FB | 	rdlong	arg04, fp
20da4     03 18 06 F1 | 	add	arg04, #3
20da8     0C 03 48 FC | 	wrbyte	#1, arg04
20dac     A7 12 02 FB | 	rdlong	arg01, fp
20db0     0C 4E 85 F1 | 	sub	fp, #12
20db4     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
20db8     08 4E 05 F1 | 	add	fp, #8
20dbc     A7 FA 61 FC | 	wrlong	result1, fp
20dc0     04 4E 85 F1 | 	sub	fp, #4
20dc4     A7 18 02 FB | 	rdlong	arg04, fp
20dc8     0C 17 02 F6 | 	mov	arg03, arg04
20dcc     04 4E 85 F1 | 	sub	fp, #4
20dd0     10 18 06 F1 | 	add	arg04, #16
20dd4     0C 19 C2 FA | 	rdbyte	arg04, arg04
20dd8     BF 18 06 F5 | 	and	arg04, #191
20ddc     10 16 06 F1 | 	add	arg03, #16
20de0     0B 19 42 FC | 	wrbyte	arg04, arg03
20de4                 | LR__3641
20de4                 | LR__3642
20de4                 | LR__3643
20de4                 | ' 					dir = fp->dir_ptr;
20de4                 | ' 					dir[ 11 ] |=  0x20 ;
20de4                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
20de4                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
20de4                 | ' 					st_dword(dir +  22 , tm);
20de4                 | ' 					st_word(dir +  18 , 0);
20de4                 | ' 					fs->wflag = 1;
20de4                 | ' 					res = sync_fs(fs);
20de4                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
20de4                 | ' 				}
20de4                 | ' 			}
20de4                 | ' 		}
20de4                 | ' 	}
20de4                 | ' 
20de4                 | ' 	return res ;
20de4     08 4E 05 F1 | 	add	fp, #8
20de8     A7 FA 01 FB | 	rdlong	result1, fp
20dec     08 4E 85 F1 | 	sub	fp, #8
20df0                 | LR__3644
20df0     A7 F0 03 F6 | 	mov	ptra, fp
20df4     B2 00 A0 FD | 	call	#popregs_
20df8                 | _fatfs_cc_f_sync_ret
20df8     2D 00 64 FD | 	ret
20dfc                 | 
20dfc                 | _fatfs_cc_f_close
20dfc     01 4A 05 F6 | 	mov	COUNT_, #1
20e00     A8 00 A0 FD | 	call	#pushregs_
20e04     10 F0 07 F1 | 	add	ptra, #16
20e08     04 4E 05 F1 | 	add	fp, #4
20e0c     A7 12 62 FC | 	wrlong	arg01, fp
20e10     04 4E 85 F1 | 	sub	fp, #4
20e14     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
20e18     08 4E 05 F1 | 	add	fp, #8
20e1c     A7 FA 61 FC | 	wrlong	result1, fp
20e20     08 4E 85 F1 | 	sub	fp, #8
20e24     00 FA 0D F2 | 	cmp	result1, #0 wz
20e28     38 00 90 5D |  if_ne	jmp	#LR__3650
20e2c     04 4E 05 F1 | 	add	fp, #4
20e30     A7 12 02 FB | 	rdlong	arg01, fp
20e34     08 4E 05 F1 | 	add	fp, #8
20e38     A7 14 02 F6 | 	mov	arg02, fp
20e3c     0C 4E 85 F1 | 	sub	fp, #12
20e40     9C E6 BF FD | 	call	#_fatfs_cc_validate
20e44     08 4E 05 F1 | 	add	fp, #8
20e48     A7 FA 61 FC | 	wrlong	result1, fp
20e4c     08 4E 85 F1 | 	sub	fp, #8
20e50     00 FA 0D F2 | 	cmp	result1, #0 wz
20e54     04 4E 05 A1 |  if_e	add	fp, #4
20e58     A7 1E 02 AB |  if_e	rdlong	local01, fp
20e5c     04 4E 85 A1 |  if_e	sub	fp, #4
20e60     0F 01 68 AC |  if_e	wrlong	#0, local01
20e64                 | LR__3650
20e64                 | ' 
20e64                 | ' 
20e64                 | ' 
20e64                 | ' 
20e64                 | ' 			fp->obj.fs = 0;
20e64                 | ' #line 4192 "ff.c"
20e64                 | ' 		}
20e64                 | ' 	}
20e64                 | ' 	return res;
20e64     08 4E 05 F1 | 	add	fp, #8
20e68     A7 FA 01 FB | 	rdlong	result1, fp
20e6c     08 4E 85 F1 | 	sub	fp, #8
20e70     A7 F0 03 F6 | 	mov	ptra, fp
20e74     B2 00 A0 FD | 	call	#popregs_
20e78                 | _fatfs_cc_f_close_ret
20e78     2D 00 64 FD | 	ret
20e7c                 | 
20e7c                 | _fatfs_cc_f_lseek
20e7c     00 4A 05 F6 | 	mov	COUNT_, #0
20e80     A8 00 A0 FD | 	call	#pushregs_
20e84     24 F0 07 F1 | 	add	ptra, #36
20e88     04 4E 05 F1 | 	add	fp, #4
20e8c     A7 12 62 FC | 	wrlong	arg01, fp
20e90     04 4E 05 F1 | 	add	fp, #4
20e94     A7 14 62 FC | 	wrlong	arg02, fp
20e98     04 4E 85 F1 | 	sub	fp, #4
20e9c     A7 12 02 FB | 	rdlong	arg01, fp
20ea0     0C 4E 05 F1 | 	add	fp, #12
20ea4     A7 14 02 F6 | 	mov	arg02, fp
20ea8     10 4E 85 F1 | 	sub	fp, #16
20eac     30 E6 BF FD | 	call	#_fatfs_cc_validate
20eb0     0C 4E 05 F1 | 	add	fp, #12
20eb4     A7 FA 61 FC | 	wrlong	result1, fp
20eb8     0C 4E 85 F1 | 	sub	fp, #12
20ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
20ec0     1C 00 90 5D |  if_ne	jmp	#LR__3660
20ec4     04 4E 05 F1 | 	add	fp, #4
20ec8     A7 18 02 FB | 	rdlong	arg04, fp
20ecc     11 18 06 F1 | 	add	arg04, #17
20ed0     0C 19 C2 FA | 	rdbyte	arg04, arg04
20ed4     08 4E 05 F1 | 	add	fp, #8
20ed8     A7 18 62 FC | 	wrlong	arg04, fp
20edc     0C 4E 85 F1 | 	sub	fp, #12
20ee0                 | LR__3660
20ee0     0C 4E 05 F1 | 	add	fp, #12
20ee4     A7 18 0A FB | 	rdlong	arg04, fp wz
20ee8     0C 4E 85 F1 | 	sub	fp, #12
20eec     0C 4E 05 51 |  if_ne	add	fp, #12
20ef0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
20ef4     0C 4E 85 51 |  if_ne	sub	fp, #12
20ef8     40 06 90 5D |  if_ne	jmp	#LR__3683
20efc     04 4E 05 F1 | 	add	fp, #4
20f00     A7 18 02 FB | 	rdlong	arg04, fp
20f04     04 4E 05 F1 | 	add	fp, #4
20f08     A7 16 02 FB | 	rdlong	arg03, fp
20f0c     08 4E 85 F1 | 	sub	fp, #8
20f10     0C 18 06 F1 | 	add	arg04, #12
20f14     0C 19 02 FB | 	rdlong	arg04, arg04
20f18     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
20f1c     3C 00 90 ED |  if_be	jmp	#LR__3661
20f20     04 4E 05 F1 | 	add	fp, #4
20f24     A7 16 02 FB | 	rdlong	arg03, fp
20f28     04 4E 85 F1 | 	sub	fp, #4
20f2c     10 16 06 F1 | 	add	arg03, #16
20f30     0B 17 C2 FA | 	rdbyte	arg03, arg03
20f34     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
20f38     02 16 CE F7 | 	test	arg03, #2 wz
20f3c     1C 00 90 5D |  if_ne	jmp	#LR__3661
20f40     04 4E 05 F1 | 	add	fp, #4
20f44     A7 16 02 FB | 	rdlong	arg03, fp
20f48     0C 16 06 F1 | 	add	arg03, #12
20f4c     0B 17 02 FB | 	rdlong	arg03, arg03
20f50     04 4E 05 F1 | 	add	fp, #4
20f54     A7 16 62 FC | 	wrlong	arg03, fp
20f58     08 4E 85 F1 | 	sub	fp, #8
20f5c                 | LR__3661
20f5c     04 4E 05 F1 | 	add	fp, #4
20f60     A7 16 02 FB | 	rdlong	arg03, fp
20f64     14 16 06 F1 | 	add	arg03, #20
20f68     0B 17 02 FB | 	rdlong	arg03, arg03
20f6c     1C 4E 05 F1 | 	add	fp, #28
20f70     A7 16 62 FC | 	wrlong	arg03, fp
20f74     1C 4E 85 F1 | 	sub	fp, #28
20f78     A7 16 02 FB | 	rdlong	arg03, fp
20f7c     18 4E 05 F1 | 	add	fp, #24
20f80     A7 00 68 FC | 	wrlong	#0, fp
20f84     14 16 06 F1 | 	add	arg03, #20
20f88     0B 01 68 FC | 	wrlong	#0, arg03
20f8c     14 4E 85 F1 | 	sub	fp, #20
20f90     A7 16 02 FB | 	rdlong	arg03, fp
20f94     08 4E 85 F1 | 	sub	fp, #8
20f98     01 16 16 F2 | 	cmp	arg03, #1 wc
20f9c     E4 03 90 CD |  if_b	jmp	#LR__3677
20fa0     10 4E 05 F1 | 	add	fp, #16
20fa4     A7 16 02 FB | 	rdlong	arg03, fp
20fa8     0A 16 06 F1 | 	add	arg03, #10
20fac     0B 19 E2 FA | 	rdword	arg04, arg03
20fb0     09 18 66 F0 | 	shl	arg04, #9
20fb4     08 4E 05 F1 | 	add	fp, #8
20fb8     A7 18 62 FC | 	wrlong	arg04, fp
20fbc     08 4E 05 F1 | 	add	fp, #8
20fc0     A7 18 02 FB | 	rdlong	arg04, fp
20fc4     20 4E 85 F1 | 	sub	fp, #32
20fc8     01 18 16 F2 | 	cmp	arg04, #1 wc
20fcc     AC 00 90 CD |  if_b	jmp	#LR__3662
20fd0     08 4E 05 F1 | 	add	fp, #8
20fd4     A7 18 02 FB | 	rdlong	arg04, fp
20fd8     01 18 86 F1 | 	sub	arg04, #1
20fdc     10 4E 05 F1 | 	add	fp, #16
20fe0     A7 16 02 FB | 	rdlong	arg03, fp
20fe4     0B 19 12 FD | 	qdiv	arg04, arg03
20fe8     08 4E 05 F1 | 	add	fp, #8
20fec     A7 FA 01 FB | 	rdlong	result1, fp
20ff0     01 FA 85 F1 | 	sub	result1, #1
20ff4     18 18 62 FD | 	getqx	arg04
20ff8     0B FB 11 FD | 	qdiv	result1, arg03
20ffc     20 4E 85 F1 | 	sub	fp, #32
21000     18 16 62 FD | 	getqx	arg03
21004     0B 19 12 F2 | 	cmp	arg04, arg03 wc
21008     70 00 90 CD |  if_b	jmp	#LR__3662
2100c     04 4E 05 F1 | 	add	fp, #4
21010     A7 16 02 FB | 	rdlong	arg03, fp
21014     1C 4E 05 F1 | 	add	fp, #28
21018     A7 FA 01 FB | 	rdlong	result1, fp
2101c     01 FA 85 F1 | 	sub	result1, #1
21020     08 4E 85 F1 | 	sub	fp, #8
21024     A7 18 02 FB | 	rdlong	arg04, fp
21028     01 18 86 F1 | 	sub	arg04, #1
2102c     0C FB 21 F5 | 	andn	result1, arg04
21030     14 16 06 F1 | 	add	arg03, #20
21034     0B FB 61 FC | 	wrlong	result1, arg03
21038     10 4E 85 F1 | 	sub	fp, #16
2103c     A7 16 02 FB | 	rdlong	arg03, fp
21040     04 4E 85 F1 | 	sub	fp, #4
21044     A7 18 02 FB | 	rdlong	arg04, fp
21048     14 18 06 F1 | 	add	arg04, #20
2104c     0C 19 02 FB | 	rdlong	arg04, arg04
21050     0C 17 82 F1 | 	sub	arg03, arg04
21054     04 4E 05 F1 | 	add	fp, #4
21058     A7 16 62 FC | 	wrlong	arg03, fp
2105c     04 4E 85 F1 | 	sub	fp, #4
21060     A7 16 02 FB | 	rdlong	arg03, fp
21064     18 16 06 F1 | 	add	arg03, #24
21068     0B 17 02 FB | 	rdlong	arg03, arg03
2106c     10 4E 05 F1 | 	add	fp, #16
21070     A7 16 62 FC | 	wrlong	arg03, fp
21074     14 4E 85 F1 | 	sub	fp, #20
21078     D0 00 90 FD | 	jmp	#LR__3666
2107c                 | LR__3662
2107c     04 4E 05 F1 | 	add	fp, #4
21080     A7 16 02 FB | 	rdlong	arg03, fp
21084     08 16 06 F1 | 	add	arg03, #8
21088     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2108c     10 4E 05 F1 | 	add	fp, #16
21090     A7 16 62 FC | 	wrlong	arg03, fp
21094     14 4E 85 F1 | 	sub	fp, #20
21098     94 00 90 5D |  if_ne	jmp	#LR__3665
2109c     04 4E 05 F1 | 	add	fp, #4
210a0     A7 12 02 FB | 	rdlong	arg01, fp
210a4     04 4E 85 F1 | 	sub	fp, #4
210a8     00 14 06 F6 | 	mov	arg02, #0
210ac     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
210b0     14 4E 05 F1 | 	add	fp, #20
210b4     A7 FA 61 FC | 	wrlong	result1, fp
210b8     14 4E 85 F1 | 	sub	fp, #20
210bc     01 FA 0D F2 | 	cmp	result1, #1 wz
210c0     1C 00 90 5D |  if_ne	jmp	#LR__3663
210c4     04 4E 05 F1 | 	add	fp, #4
210c8     A7 16 02 FB | 	rdlong	arg03, fp
210cc     04 4E 85 F1 | 	sub	fp, #4
210d0     11 16 06 F1 | 	add	arg03, #17
210d4     0B 05 48 FC | 	wrbyte	#2, arg03
210d8     02 FA 05 F6 | 	mov	result1, #2
210dc     5C 04 90 FD | 	jmp	#LR__3683
210e0                 | LR__3663
210e0     14 4E 05 F1 | 	add	fp, #20
210e4     A7 FA 01 FB | 	rdlong	result1, fp
210e8     14 4E 85 F1 | 	sub	fp, #20
210ec     FF FF 7F FF 
210f0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
210f4     1C 00 90 5D |  if_ne	jmp	#LR__3664
210f8     04 4E 05 F1 | 	add	fp, #4
210fc     A7 16 02 FB | 	rdlong	arg03, fp
21100     04 4E 85 F1 | 	sub	fp, #4
21104     11 16 06 F1 | 	add	arg03, #17
21108     0B 03 48 FC | 	wrbyte	#1, arg03
2110c     01 FA 05 F6 | 	mov	result1, #1
21110     28 04 90 FD | 	jmp	#LR__3683
21114                 | LR__3664
21114     04 4E 05 F1 | 	add	fp, #4
21118     A7 16 02 FB | 	rdlong	arg03, fp
2111c     10 4E 05 F1 | 	add	fp, #16
21120     A7 18 02 FB | 	rdlong	arg04, fp
21124     14 4E 85 F1 | 	sub	fp, #20
21128     08 16 06 F1 | 	add	arg03, #8
2112c     0B 19 62 FC | 	wrlong	arg04, arg03
21130                 | LR__3665
21130     04 4E 05 F1 | 	add	fp, #4
21134     A7 16 02 FB | 	rdlong	arg03, fp
21138     10 4E 05 F1 | 	add	fp, #16
2113c     A7 18 02 FB | 	rdlong	arg04, fp
21140     14 4E 85 F1 | 	sub	fp, #20
21144     18 16 06 F1 | 	add	arg03, #24
21148     0B 19 62 FC | 	wrlong	arg04, arg03
2114c                 | LR__3666
2114c     14 4E 05 F1 | 	add	fp, #20
21150     A7 16 0A FB | 	rdlong	arg03, fp wz
21154     14 4E 85 F1 | 	sub	fp, #20
21158     28 02 90 AD |  if_e	jmp	#LR__3676
2115c                 | ' 				while (ofs > bcs) {
2115c                 | LR__3667
2115c     08 4E 05 F1 | 	add	fp, #8
21160     A7 18 02 FB | 	rdlong	arg04, fp
21164     10 4E 05 F1 | 	add	fp, #16
21168     A7 16 02 FB | 	rdlong	arg03, fp
2116c     18 4E 85 F1 | 	sub	fp, #24
21170     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
21174     68 01 90 ED |  if_be	jmp	#LR__3673
21178     08 4E 05 F1 | 	add	fp, #8
2117c     A7 18 02 FB | 	rdlong	arg04, fp
21180     10 4E 05 F1 | 	add	fp, #16
21184     A7 16 02 FB | 	rdlong	arg03, fp
21188     0B 19 82 F1 | 	sub	arg04, arg03
2118c     10 4E 85 F1 | 	sub	fp, #16
21190     A7 18 62 FC | 	wrlong	arg04, fp
21194     04 4E 85 F1 | 	sub	fp, #4
21198     A7 18 02 FB | 	rdlong	arg04, fp
2119c     0C FB 01 F6 | 	mov	result1, arg04
211a0     14 18 06 F1 | 	add	arg04, #20
211a4     0C 19 02 FB | 	rdlong	arg04, arg04
211a8     14 4E 05 F1 | 	add	fp, #20
211ac     A7 16 02 FB | 	rdlong	arg03, fp
211b0     0B 19 02 F1 | 	add	arg04, arg03
211b4     14 FA 05 F1 | 	add	result1, #20
211b8     FD 18 62 FC | 	wrlong	arg04, result1
211bc     14 4E 85 F1 | 	sub	fp, #20
211c0     A7 16 02 FB | 	rdlong	arg03, fp
211c4     04 4E 85 F1 | 	sub	fp, #4
211c8     10 16 06 F1 | 	add	arg03, #16
211cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
211d0     02 16 CE F7 | 	test	arg03, #2 wz
211d4     3C 00 90 AD |  if_e	jmp	#LR__3668
211d8     04 4E 05 F1 | 	add	fp, #4
211dc     A7 12 02 FB | 	rdlong	arg01, fp
211e0     10 4E 05 F1 | 	add	fp, #16
211e4     A7 14 02 FB | 	rdlong	arg02, fp
211e8     14 4E 85 F1 | 	sub	fp, #20
211ec     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
211f0     14 4E 05 F1 | 	add	fp, #20
211f4     A7 FA 61 FC | 	wrlong	result1, fp
211f8     00 FA 4D F2 | 	cmps	result1, #0 wz
211fc     14 4E 85 F1 | 	sub	fp, #20
21200     08 4E 05 A1 |  if_e	add	fp, #8
21204     A7 00 68 AC |  if_e	wrlong	#0, fp
21208     08 4E 85 A1 |  if_e	sub	fp, #8
2120c                 | ' 							ofs = 0; break;
2120c     D0 00 90 AD |  if_e	jmp	#LR__3673
21210     24 00 90 FD | 	jmp	#LR__3669
21214                 | LR__3668
21214     04 4E 05 F1 | 	add	fp, #4
21218     A7 12 02 FB | 	rdlong	arg01, fp
2121c     10 4E 05 F1 | 	add	fp, #16
21220     A7 14 02 FB | 	rdlong	arg02, fp
21224     14 4E 85 F1 | 	sub	fp, #20
21228     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2122c     14 4E 05 F1 | 	add	fp, #20
21230     A7 FA 61 FC | 	wrlong	result1, fp
21234     14 4E 85 F1 | 	sub	fp, #20
21238                 | LR__3669
21238     14 4E 05 F1 | 	add	fp, #20
2123c     A7 16 02 FB | 	rdlong	arg03, fp
21240     14 4E 85 F1 | 	sub	fp, #20
21244     FF FF 7F FF 
21248     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2124c     1C 00 90 5D |  if_ne	jmp	#LR__3670
21250     04 4E 05 F1 | 	add	fp, #4
21254     A7 16 02 FB | 	rdlong	arg03, fp
21258     04 4E 85 F1 | 	sub	fp, #4
2125c     11 16 06 F1 | 	add	arg03, #17
21260     0B 03 48 FC | 	wrbyte	#1, arg03
21264     01 FA 05 F6 | 	mov	result1, #1
21268     D0 02 90 FD | 	jmp	#LR__3683
2126c                 | LR__3670
2126c     14 4E 05 F1 | 	add	fp, #20
21270     A7 16 02 FB | 	rdlong	arg03, fp
21274     14 4E 85 F1 | 	sub	fp, #20
21278     02 16 16 F2 | 	cmp	arg03, #2 wc
2127c     24 00 90 CD |  if_b	jmp	#LR__3671
21280     10 4E 05 F1 | 	add	fp, #16
21284     A7 18 02 FB | 	rdlong	arg04, fp
21288     04 4E 05 F1 | 	add	fp, #4
2128c     A7 16 02 FB | 	rdlong	arg03, fp
21290     14 4E 85 F1 | 	sub	fp, #20
21294     18 18 06 F1 | 	add	arg04, #24
21298     0C 19 02 FB | 	rdlong	arg04, arg04
2129c     0C 17 12 F2 | 	cmp	arg03, arg04 wc
212a0     1C 00 90 CD |  if_b	jmp	#LR__3672
212a4                 | LR__3671
212a4     04 4E 05 F1 | 	add	fp, #4
212a8     A7 16 02 FB | 	rdlong	arg03, fp
212ac     04 4E 85 F1 | 	sub	fp, #4
212b0     11 16 06 F1 | 	add	arg03, #17
212b4     0B 05 48 FC | 	wrbyte	#2, arg03
212b8     02 FA 05 F6 | 	mov	result1, #2
212bc     7C 02 90 FD | 	jmp	#LR__3683
212c0                 | LR__3672
212c0     04 4E 05 F1 | 	add	fp, #4
212c4     A7 18 02 FB | 	rdlong	arg04, fp
212c8     10 4E 05 F1 | 	add	fp, #16
212cc     A7 16 02 FB | 	rdlong	arg03, fp
212d0     14 4E 85 F1 | 	sub	fp, #20
212d4     18 18 06 F1 | 	add	arg04, #24
212d8     0C 17 62 FC | 	wrlong	arg03, arg04
212dc     7C FE 9F FD | 	jmp	#LR__3667
212e0                 | LR__3673
212e0     04 4E 05 F1 | 	add	fp, #4
212e4     A7 16 02 FB | 	rdlong	arg03, fp
212e8     0B 13 02 F6 | 	mov	arg01, arg03
212ec     14 16 06 F1 | 	add	arg03, #20
212f0     0B 15 02 FB | 	rdlong	arg02, arg03
212f4     04 4E 05 F1 | 	add	fp, #4
212f8     A7 16 02 FB | 	rdlong	arg03, fp
212fc     0B 15 02 F1 | 	add	arg02, arg03
21300     14 12 06 F1 | 	add	arg01, #20
21304     09 15 62 FC | 	wrlong	arg02, arg01
21308     A7 16 02 FB | 	rdlong	arg03, fp
2130c     08 4E 85 F1 | 	sub	fp, #8
21310     FF 17 CE F7 | 	test	arg03, #511 wz
21314     6C 00 90 AD |  if_e	jmp	#LR__3675
21318     10 4E 05 F1 | 	add	fp, #16
2131c     A7 12 02 FB | 	rdlong	arg01, fp
21320     04 4E 05 F1 | 	add	fp, #4
21324     A7 14 02 FB | 	rdlong	arg02, fp
21328     14 4E 85 F1 | 	sub	fp, #20
2132c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
21330     1C 4E 05 F1 | 	add	fp, #28
21334     A7 FA 61 FC | 	wrlong	result1, fp
21338     1C 4E 85 F1 | 	sub	fp, #28
2133c     00 FA 0D F2 | 	cmp	result1, #0 wz
21340     1C 00 90 5D |  if_ne	jmp	#LR__3674
21344     04 4E 05 F1 | 	add	fp, #4
21348     A7 16 02 FB | 	rdlong	arg03, fp
2134c     04 4E 85 F1 | 	sub	fp, #4
21350     11 16 06 F1 | 	add	arg03, #17
21354     0B 05 48 FC | 	wrbyte	#2, arg03
21358     02 FA 05 F6 | 	mov	result1, #2
2135c     DC 01 90 FD | 	jmp	#LR__3683
21360                 | LR__3674
21360     1C 4E 05 F1 | 	add	fp, #28
21364     A7 18 02 FB | 	rdlong	arg04, fp
21368     14 4E 85 F1 | 	sub	fp, #20
2136c     A7 16 02 FB | 	rdlong	arg03, fp
21370     09 16 46 F0 | 	shr	arg03, #9
21374     0B 19 02 F1 | 	add	arg04, arg03
21378     14 4E 05 F1 | 	add	fp, #20
2137c     A7 18 62 FC | 	wrlong	arg04, fp
21380     1C 4E 85 F1 | 	sub	fp, #28
21384                 | LR__3675
21384                 | LR__3676
21384                 | LR__3677
21384     04 4E 05 F1 | 	add	fp, #4
21388     A7 18 02 FB | 	rdlong	arg04, fp
2138c     0C 17 02 F6 | 	mov	arg03, arg04
21390     04 4E 85 F1 | 	sub	fp, #4
21394     14 16 06 F1 | 	add	arg03, #20
21398     0B 17 02 FB | 	rdlong	arg03, arg03
2139c     0C 18 06 F1 | 	add	arg04, #12
213a0     0C 19 02 FB | 	rdlong	arg04, arg04
213a4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
213a8     3C 00 90 ED |  if_be	jmp	#LR__3678
213ac     04 4E 05 F1 | 	add	fp, #4
213b0     A7 18 02 FB | 	rdlong	arg04, fp
213b4     0C 17 02 F6 | 	mov	arg03, arg04
213b8     14 18 06 F1 | 	add	arg04, #20
213bc     0C 19 02 FB | 	rdlong	arg04, arg04
213c0     0C 16 06 F1 | 	add	arg03, #12
213c4     0B 19 62 FC | 	wrlong	arg04, arg03
213c8     A7 18 02 FB | 	rdlong	arg04, fp
213cc     0C 17 02 F6 | 	mov	arg03, arg04
213d0     04 4E 85 F1 | 	sub	fp, #4
213d4     10 18 06 F1 | 	add	arg04, #16
213d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
213dc     40 18 46 F5 | 	or	arg04, #64
213e0     10 16 06 F1 | 	add	arg03, #16
213e4     0B 19 42 FC | 	wrbyte	arg04, arg03
213e8                 | LR__3678
213e8     04 4E 05 F1 | 	add	fp, #4
213ec     A7 16 02 FB | 	rdlong	arg03, fp
213f0     04 4E 85 F1 | 	sub	fp, #4
213f4     14 16 06 F1 | 	add	arg03, #20
213f8     0B 17 02 FB | 	rdlong	arg03, arg03
213fc     FF 17 CE F7 | 	test	arg03, #511 wz
21400     2C 01 90 AD |  if_e	jmp	#LR__3682
21404     04 4E 05 F1 | 	add	fp, #4
21408     A7 18 02 FB | 	rdlong	arg04, fp
2140c     18 4E 05 F1 | 	add	fp, #24
21410     A7 16 02 FB | 	rdlong	arg03, fp
21414     1C 4E 85 F1 | 	sub	fp, #28
21418     1C 18 06 F1 | 	add	arg04, #28
2141c     0C 19 02 FB | 	rdlong	arg04, arg04
21420     0C 17 0A F2 | 	cmp	arg03, arg04 wz
21424     08 01 90 AD |  if_e	jmp	#LR__3682
21428     04 4E 05 F1 | 	add	fp, #4
2142c     A7 16 02 FB | 	rdlong	arg03, fp
21430     04 4E 85 F1 | 	sub	fp, #4
21434     10 16 06 F1 | 	add	arg03, #16
21438     0B 17 C2 FA | 	rdbyte	arg03, arg03
2143c     80 16 CE F7 | 	test	arg03, #128 wz
21440     7C 00 90 AD |  if_e	jmp	#LR__3680
21444     10 4E 05 F1 | 	add	fp, #16
21448     A7 16 02 FB | 	rdlong	arg03, fp
2144c     01 16 06 F1 | 	add	arg03, #1
21450     0B 13 C2 FA | 	rdbyte	arg01, arg03
21454     0C 4E 85 F1 | 	sub	fp, #12
21458     A7 16 02 FB | 	rdlong	arg03, fp
2145c     0B 15 02 F6 | 	mov	arg02, arg03
21460     28 14 06 F1 | 	add	arg02, #40
21464     04 4E 85 F1 | 	sub	fp, #4
21468     1C 16 06 F1 | 	add	arg03, #28
2146c     0B 17 02 FB | 	rdlong	arg03, arg03
21470     01 18 06 F6 | 	mov	arg04, #1
21474     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
21478     00 FA 0D F2 | 	cmp	result1, #0 wz
2147c     1C 00 90 AD |  if_e	jmp	#LR__3679
21480     04 4E 05 F1 | 	add	fp, #4
21484     A7 16 02 FB | 	rdlong	arg03, fp
21488     04 4E 85 F1 | 	sub	fp, #4
2148c     11 16 06 F1 | 	add	arg03, #17
21490     0B 03 48 FC | 	wrbyte	#1, arg03
21494     01 FA 05 F6 | 	mov	result1, #1
21498     A0 00 90 FD | 	jmp	#LR__3683
2149c                 | LR__3679
2149c     04 4E 05 F1 | 	add	fp, #4
214a0     A7 18 02 FB | 	rdlong	arg04, fp
214a4     0C 17 02 F6 | 	mov	arg03, arg04
214a8     04 4E 85 F1 | 	sub	fp, #4
214ac     10 18 06 F1 | 	add	arg04, #16
214b0     0C 19 C2 FA | 	rdbyte	arg04, arg04
214b4     7F 18 06 F5 | 	and	arg04, #127
214b8     10 16 06 F1 | 	add	arg03, #16
214bc     0B 19 42 FC | 	wrbyte	arg04, arg03
214c0                 | LR__3680
214c0     10 4E 05 F1 | 	add	fp, #16
214c4     A7 16 02 FB | 	rdlong	arg03, fp
214c8     01 16 06 F1 | 	add	arg03, #1
214cc     0B 13 C2 FA | 	rdbyte	arg01, arg03
214d0     0C 4E 85 F1 | 	sub	fp, #12
214d4     A7 14 02 FB | 	rdlong	arg02, fp
214d8     28 14 06 F1 | 	add	arg02, #40
214dc     18 4E 05 F1 | 	add	fp, #24
214e0     A7 16 02 FB | 	rdlong	arg03, fp
214e4     1C 4E 85 F1 | 	sub	fp, #28
214e8     01 18 06 F6 | 	mov	arg04, #1
214ec     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
214f0     00 FA 0D F2 | 	cmp	result1, #0 wz
214f4     1C 00 90 AD |  if_e	jmp	#LR__3681
214f8     04 4E 05 F1 | 	add	fp, #4
214fc     A7 16 02 FB | 	rdlong	arg03, fp
21500     04 4E 85 F1 | 	sub	fp, #4
21504     11 16 06 F1 | 	add	arg03, #17
21508     0B 03 48 FC | 	wrbyte	#1, arg03
2150c     01 FA 05 F6 | 	mov	result1, #1
21510     28 00 90 FD | 	jmp	#LR__3683
21514                 | LR__3681
21514     04 4E 05 F1 | 	add	fp, #4
21518     A7 18 02 FB | 	rdlong	arg04, fp
2151c     18 4E 05 F1 | 	add	fp, #24
21520     A7 16 02 FB | 	rdlong	arg03, fp
21524     1C 4E 85 F1 | 	sub	fp, #28
21528     1C 18 06 F1 | 	add	arg04, #28
2152c     0C 17 62 FC | 	wrlong	arg03, arg04
21530                 | LR__3682
21530                 | ' 
21530                 | ' 			fp->sect = nsect;
21530                 | ' 		}
21530                 | ' 	}
21530                 | ' 
21530                 | ' 	return res ;
21530     0C 4E 05 F1 | 	add	fp, #12
21534     A7 FA 01 FB | 	rdlong	result1, fp
21538     0C 4E 85 F1 | 	sub	fp, #12
2153c                 | LR__3683
2153c     A7 F0 03 F6 | 	mov	ptra, fp
21540     B2 00 A0 FD | 	call	#popregs_
21544                 | _fatfs_cc_f_lseek_ret
21544     2D 00 64 FD | 	ret
21548                 | 
21548                 | _fatfs_cc_f_opendir
21548     01 4A 05 F6 | 	mov	COUNT_, #1
2154c     A8 00 A0 FD | 	call	#pushregs_
21550     14 F0 07 F1 | 	add	ptra, #20
21554     04 4E 05 F1 | 	add	fp, #4
21558     A7 12 62 FC | 	wrlong	arg01, fp
2155c     04 4E 05 F1 | 	add	fp, #4
21560     A7 14 62 FC | 	wrlong	arg02, fp
21564     04 4E 85 F1 | 	sub	fp, #4
21568     A7 16 0A FB | 	rdlong	arg03, fp wz
2156c     04 4E 85 F1 | 	sub	fp, #4
21570     09 FA 05 A6 |  if_e	mov	result1, #9
21574     78 01 90 AD |  if_e	jmp	#LR__3696
21578     08 4E 05 F1 | 	add	fp, #8
2157c     A7 12 02 F6 | 	mov	arg01, fp
21580     08 4E 05 F1 | 	add	fp, #8
21584     A7 14 02 F6 | 	mov	arg02, fp
21588     10 4E 85 F1 | 	sub	fp, #16
2158c     00 16 06 F6 | 	mov	arg03, #0
21590     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
21594     0C 4E 05 F1 | 	add	fp, #12
21598     A7 FA 61 FC | 	wrlong	result1, fp
2159c     0C 4E 85 F1 | 	sub	fp, #12
215a0     00 FA 0D F2 | 	cmp	result1, #0 wz
215a4     20 01 90 5D |  if_ne	jmp	#LR__3695
215a8     04 4E 05 F1 | 	add	fp, #4
215ac     A7 16 02 FB | 	rdlong	arg03, fp
215b0     0C 4E 05 F1 | 	add	fp, #12
215b4     A7 FA 01 FB | 	rdlong	result1, fp
215b8     0B FB 61 FC | 	wrlong	result1, arg03
215bc     0C 4E 85 F1 | 	sub	fp, #12
215c0     A7 12 02 FB | 	rdlong	arg01, fp
215c4     04 4E 05 F1 | 	add	fp, #4
215c8     A7 14 02 FB | 	rdlong	arg02, fp
215cc     08 4E 85 F1 | 	sub	fp, #8
215d0     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
215d4     0C 4E 05 F1 | 	add	fp, #12
215d8     A7 FA 61 FC | 	wrlong	result1, fp
215dc     0C 4E 85 F1 | 	sub	fp, #12
215e0     00 FA 0D F2 | 	cmp	result1, #0 wz
215e4     C4 00 90 5D |  if_ne	jmp	#LR__3694
215e8     04 4E 05 F1 | 	add	fp, #4
215ec     A7 16 02 FB | 	rdlong	arg03, fp
215f0     04 4E 85 F1 | 	sub	fp, #4
215f4     2B 16 06 F1 | 	add	arg03, #43
215f8     0B 17 C2 FA | 	rdbyte	arg03, arg03
215fc     80 16 CE F7 | 	test	arg03, #128 wz
21600     58 00 90 5D |  if_ne	jmp	#LR__3692
21604     04 4E 05 F1 | 	add	fp, #4
21608     A7 16 02 FB | 	rdlong	arg03, fp
2160c     04 4E 85 F1 | 	sub	fp, #4
21610     06 16 06 F1 | 	add	arg03, #6
21614     0B 17 C2 FA | 	rdbyte	arg03, arg03
21618     10 16 CE F7 | 	test	arg03, #16 wz
2161c     30 00 90 AD |  if_e	jmp	#LR__3690
21620     04 4E 05 F1 | 	add	fp, #4
21624     A7 16 02 FB | 	rdlong	arg03, fp
21628     0B 1F 02 F6 | 	mov	local01, arg03
2162c     0C 4E 05 F1 | 	add	fp, #12
21630     A7 12 02 FB | 	rdlong	arg01, fp
21634     10 4E 85 F1 | 	sub	fp, #16
21638     1C 16 06 F1 | 	add	arg03, #28
2163c     0B 15 02 FB | 	rdlong	arg02, arg03
21640     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
21644     08 1E 06 F1 | 	add	local01, #8
21648     0F FB 61 FC | 	wrlong	result1, local01
2164c     0C 00 90 FD | 	jmp	#LR__3691
21650                 | LR__3690
21650     0C 4E 05 F1 | 	add	fp, #12
21654     A7 0A 68 FC | 	wrlong	#5, fp
21658     0C 4E 85 F1 | 	sub	fp, #12
2165c                 | LR__3691
2165c                 | LR__3692
2165c     0C 4E 05 F1 | 	add	fp, #12
21660     A7 1E 0A FB | 	rdlong	local01, fp wz
21664     0C 4E 85 F1 | 	sub	fp, #12
21668     40 00 90 5D |  if_ne	jmp	#LR__3693
2166c     04 4E 05 F1 | 	add	fp, #4
21670     A7 1E 02 FB | 	rdlong	local01, fp
21674     0C 4E 05 F1 | 	add	fp, #12
21678     A7 16 02 FB | 	rdlong	arg03, fp
2167c     06 16 06 F1 | 	add	arg03, #6
21680     0B 17 E2 FA | 	rdword	arg03, arg03
21684     04 1E 06 F1 | 	add	local01, #4
21688     0F 17 52 FC | 	wrword	arg03, local01
2168c     0C 4E 85 F1 | 	sub	fp, #12
21690     A7 12 02 FB | 	rdlong	arg01, fp
21694     04 4E 85 F1 | 	sub	fp, #4
21698     00 14 06 F6 | 	mov	arg02, #0
2169c     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
216a0     0C 4E 05 F1 | 	add	fp, #12
216a4     A7 FA 61 FC | 	wrlong	result1, fp
216a8     0C 4E 85 F1 | 	sub	fp, #12
216ac                 | LR__3693
216ac                 | LR__3694
216ac     0C 4E 05 F1 | 	add	fp, #12
216b0     A7 1E 02 FB | 	rdlong	local01, fp
216b4     0C 4E 85 F1 | 	sub	fp, #12
216b8     04 1E 0E F2 | 	cmp	local01, #4 wz
216bc     0C 4E 05 A1 |  if_e	add	fp, #12
216c0     A7 0A 68 AC |  if_e	wrlong	#5, fp
216c4     0C 4E 85 A1 |  if_e	sub	fp, #12
216c8                 | LR__3695
216c8     0C 4E 05 F1 | 	add	fp, #12
216cc     A7 1E 0A FB | 	rdlong	local01, fp wz
216d0     0C 4E 85 F1 | 	sub	fp, #12
216d4     04 4E 05 51 |  if_ne	add	fp, #4
216d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
216dc     04 4E 85 51 |  if_ne	sub	fp, #4
216e0     0F 01 68 5C |  if_ne	wrlong	#0, local01
216e4                 | ' 
216e4                 | ' 	return res ;
216e4     0C 4E 05 F1 | 	add	fp, #12
216e8     A7 FA 01 FB | 	rdlong	result1, fp
216ec     0C 4E 85 F1 | 	sub	fp, #12
216f0                 | LR__3696
216f0     A7 F0 03 F6 | 	mov	ptra, fp
216f4     B2 00 A0 FD | 	call	#popregs_
216f8                 | _fatfs_cc_f_opendir_ret
216f8     2D 00 64 FD | 	ret
216fc                 | 
216fc                 | _fatfs_cc_f_closedir
216fc     00 4A 05 F6 | 	mov	COUNT_, #0
21700     A8 00 A0 FD | 	call	#pushregs_
21704     10 F0 07 F1 | 	add	ptra, #16
21708     04 4E 05 F1 | 	add	fp, #4
2170c     A7 12 62 FC | 	wrlong	arg01, fp
21710     08 4E 05 F1 | 	add	fp, #8
21714     A7 14 02 F6 | 	mov	arg02, fp
21718     0C 4E 85 F1 | 	sub	fp, #12
2171c     C0 DD BF FD | 	call	#_fatfs_cc_validate
21720     08 4E 05 F1 | 	add	fp, #8
21724     A7 FA 61 FC | 	wrlong	result1, fp
21728     08 4E 85 F1 | 	sub	fp, #8
2172c     00 FA 0D F2 | 	cmp	result1, #0 wz
21730     04 4E 05 A1 |  if_e	add	fp, #4
21734     A7 FA 01 AB |  if_e	rdlong	result1, fp
21738     04 4E 85 A1 |  if_e	sub	fp, #4
2173c     FD 00 68 AC |  if_e	wrlong	#0, result1
21740                 | ' 
21740                 | ' 
21740                 | ' 
21740                 | ' 
21740                 | ' 		dp->obj.fs = 0;
21740                 | ' #line 4633 "ff.c"
21740                 | ' 	}
21740                 | ' 	return res;
21740     08 4E 05 F1 | 	add	fp, #8
21744     A7 FA 01 FB | 	rdlong	result1, fp
21748     08 4E 85 F1 | 	sub	fp, #8
2174c     A7 F0 03 F6 | 	mov	ptra, fp
21750     B2 00 A0 FD | 	call	#popregs_
21754                 | _fatfs_cc_f_closedir_ret
21754     2D 00 64 FD | 	ret
21758                 | 
21758                 | _fatfs_cc_f_readdir
21758     00 4A 05 F6 | 	mov	COUNT_, #0
2175c     A8 00 A0 FD | 	call	#pushregs_
21760     14 F0 07 F1 | 	add	ptra, #20
21764     04 4E 05 F1 | 	add	fp, #4
21768     A7 12 62 FC | 	wrlong	arg01, fp
2176c     04 4E 05 F1 | 	add	fp, #4
21770     A7 14 62 FC | 	wrlong	arg02, fp
21774     04 4E 85 F1 | 	sub	fp, #4
21778     A7 12 02 FB | 	rdlong	arg01, fp
2177c     0C 4E 05 F1 | 	add	fp, #12
21780     A7 14 02 F6 | 	mov	arg02, fp
21784     10 4E 85 F1 | 	sub	fp, #16
21788     54 DD BF FD | 	call	#_fatfs_cc_validate
2178c     0C 4E 05 F1 | 	add	fp, #12
21790     A7 FA 61 FC | 	wrlong	result1, fp
21794     0C 4E 85 F1 | 	sub	fp, #12
21798     00 FA 0D F2 | 	cmp	result1, #0 wz
2179c     BC 00 90 5D |  if_ne	jmp	#LR__3703
217a0     08 4E 05 F1 | 	add	fp, #8
217a4     A7 FA 09 FB | 	rdlong	result1, fp wz
217a8     08 4E 85 F1 | 	sub	fp, #8
217ac     24 00 90 5D |  if_ne	jmp	#LR__3700
217b0     04 4E 05 F1 | 	add	fp, #4
217b4     A7 12 02 FB | 	rdlong	arg01, fp
217b8     04 4E 85 F1 | 	sub	fp, #4
217bc     00 14 06 F6 | 	mov	arg02, #0
217c0     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
217c4     0C 4E 05 F1 | 	add	fp, #12
217c8     A7 FA 61 FC | 	wrlong	result1, fp
217cc     0C 4E 85 F1 | 	sub	fp, #12
217d0     88 00 90 FD | 	jmp	#LR__3702
217d4                 | LR__3700
217d4     04 4E 05 F1 | 	add	fp, #4
217d8     A7 12 02 FB | 	rdlong	arg01, fp
217dc     04 4E 85 F1 | 	sub	fp, #4
217e0     00 14 06 F6 | 	mov	arg02, #0
217e4     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
217e8     0C 4E 05 F1 | 	add	fp, #12
217ec     A7 FA 61 FC | 	wrlong	result1, fp
217f0     0C 4E 85 F1 | 	sub	fp, #12
217f4     04 FA 0D F2 | 	cmp	result1, #4 wz
217f8     0C 4E 05 A1 |  if_e	add	fp, #12
217fc     A7 00 68 AC |  if_e	wrlong	#0, fp
21800     0C 4E 85 A1 |  if_e	sub	fp, #12
21804     0C 4E 05 F1 | 	add	fp, #12
21808     A7 FA 09 FB | 	rdlong	result1, fp wz
2180c     0C 4E 85 F1 | 	sub	fp, #12
21810     48 00 90 5D |  if_ne	jmp	#LR__3701
21814     04 4E 05 F1 | 	add	fp, #4
21818     A7 12 02 FB | 	rdlong	arg01, fp
2181c     04 4E 05 F1 | 	add	fp, #4
21820     A7 14 02 FB | 	rdlong	arg02, fp
21824     08 4E 85 F1 | 	sub	fp, #8
21828     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2182c     04 4E 05 F1 | 	add	fp, #4
21830     A7 12 02 FB | 	rdlong	arg01, fp
21834     04 4E 85 F1 | 	sub	fp, #4
21838     00 14 06 F6 | 	mov	arg02, #0
2183c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
21840     0C 4E 05 F1 | 	add	fp, #12
21844     A7 FA 61 FC | 	wrlong	result1, fp
21848     0C 4E 85 F1 | 	sub	fp, #12
2184c     04 FA 0D F2 | 	cmp	result1, #4 wz
21850     0C 4E 05 A1 |  if_e	add	fp, #12
21854     A7 00 68 AC |  if_e	wrlong	#0, fp
21858     0C 4E 85 A1 |  if_e	sub	fp, #12
2185c                 | LR__3701
2185c                 | LR__3702
2185c                 | LR__3703
2185c                 | ' 			}
2185c                 | ' 			;
2185c                 | ' 		}
2185c                 | ' 	}
2185c                 | ' 	return res ;
2185c     0C 4E 05 F1 | 	add	fp, #12
21860     A7 FA 01 FB | 	rdlong	result1, fp
21864     0C 4E 85 F1 | 	sub	fp, #12
21868     A7 F0 03 F6 | 	mov	ptra, fp
2186c     B2 00 A0 FD | 	call	#popregs_
21870                 | _fatfs_cc_f_readdir_ret
21870     2D 00 64 FD | 	ret
21874                 | 
21874                 | _fatfs_cc_f_stat
21874     00 4A 05 F6 | 	mov	COUNT_, #0
21878     A8 00 A0 FD | 	call	#pushregs_
2187c     40 F0 07 F1 | 	add	ptra, #64
21880     04 4E 05 F1 | 	add	fp, #4
21884     A7 12 62 FC | 	wrlong	arg01, fp
21888     04 4E 05 F1 | 	add	fp, #4
2188c     A7 14 62 FC | 	wrlong	arg02, fp
21890     04 4E 85 F1 | 	sub	fp, #4
21894     A7 12 02 F6 | 	mov	arg01, fp
21898     0C 4E 05 F1 | 	add	fp, #12
2189c     A7 14 02 F6 | 	mov	arg02, fp
218a0     10 4E 85 F1 | 	sub	fp, #16
218a4     00 16 06 F6 | 	mov	arg03, #0
218a8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
218ac     0C 4E 05 F1 | 	add	fp, #12
218b0     A7 FA 61 FC | 	wrlong	result1, fp
218b4     0C 4E 85 F1 | 	sub	fp, #12
218b8     00 FA 0D F2 | 	cmp	result1, #0 wz
218bc     74 00 90 5D |  if_ne	jmp	#LR__3713
218c0     10 4E 05 F1 | 	add	fp, #16
218c4     A7 12 02 F6 | 	mov	arg01, fp
218c8     0C 4E 85 F1 | 	sub	fp, #12
218cc     A7 14 02 FB | 	rdlong	arg02, fp
218d0     04 4E 85 F1 | 	sub	fp, #4
218d4     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
218d8     0C 4E 05 F1 | 	add	fp, #12
218dc     A7 FA 61 FC | 	wrlong	result1, fp
218e0     0C 4E 85 F1 | 	sub	fp, #12
218e4     00 FA 0D F2 | 	cmp	result1, #0 wz
218e8     48 00 90 5D |  if_ne	jmp	#LR__3712
218ec     3B 4E 05 F1 | 	add	fp, #59
218f0     A7 FA C1 FA | 	rdbyte	result1, fp
218f4     3B 4E 85 F1 | 	sub	fp, #59
218f8     80 FA CD F7 | 	test	result1, #128 wz
218fc     0C 4E 05 51 |  if_ne	add	fp, #12
21900     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21904     0C 4E 85 51 |  if_ne	sub	fp, #12
21908     28 00 90 5D |  if_ne	jmp	#LR__3711
2190c     08 4E 05 F1 | 	add	fp, #8
21910     A7 FA 09 FB | 	rdlong	result1, fp wz
21914     08 4E 85 F1 | 	sub	fp, #8
21918     18 00 90 AD |  if_e	jmp	#LR__3710
2191c     10 4E 05 F1 | 	add	fp, #16
21920     A7 12 02 F6 | 	mov	arg01, fp
21924     08 4E 85 F1 | 	sub	fp, #8
21928     A7 14 02 FB | 	rdlong	arg02, fp
2192c     08 4E 85 F1 | 	sub	fp, #8
21930     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
21934                 | LR__3710
21934                 | LR__3711
21934                 | LR__3712
21934                 | LR__3713
21934                 | ' 			}
21934                 | ' 		}
21934                 | ' 		;
21934                 | ' 	}
21934                 | ' 
21934                 | ' 	return res ;
21934     0C 4E 05 F1 | 	add	fp, #12
21938     A7 FA 01 FB | 	rdlong	result1, fp
2193c     0C 4E 85 F1 | 	sub	fp, #12
21940     A7 F0 03 F6 | 	mov	ptra, fp
21944     B2 00 A0 FD | 	call	#popregs_
21948                 | _fatfs_cc_f_stat_ret
21948     2D 00 64 FD | 	ret
2194c                 | 
2194c                 | _fatfs_cc_f_unlink
2194c     00 4A 05 F6 | 	mov	COUNT_, #0
21950     A8 00 A0 FD | 	call	#pushregs_
21954     74 F0 07 F1 | 	add	ptra, #116
21958     04 4E 05 F1 | 	add	fp, #4
2195c     A7 12 62 FC | 	wrlong	arg01, fp
21960     68 4E 05 F1 | 	add	fp, #104
21964     A7 00 68 FC | 	wrlong	#0, fp
21968     68 4E 85 F1 | 	sub	fp, #104
2196c     A7 12 02 F6 | 	mov	arg01, fp
21970     6C 4E 05 F1 | 	add	fp, #108
21974     A7 14 02 F6 | 	mov	arg02, fp
21978     70 4E 85 F1 | 	sub	fp, #112
2197c     02 16 06 F6 | 	mov	arg03, #2
21980     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
21984     08 4E 05 F1 | 	add	fp, #8
21988     A7 FA 61 FC | 	wrlong	result1, fp
2198c     08 4E 85 F1 | 	sub	fp, #8
21990     00 FA 0D F2 | 	cmp	result1, #0 wz
21994     E4 01 90 5D |  if_ne	jmp	#LR__3728
21998     70 4E 05 F1 | 	add	fp, #112
2199c     A7 16 02 FB | 	rdlong	arg03, fp
219a0     64 4E 85 F1 | 	sub	fp, #100
219a4     A7 16 62 FC | 	wrlong	arg03, fp
219a8     A7 12 02 F6 | 	mov	arg01, fp
219ac     08 4E 85 F1 | 	sub	fp, #8
219b0     A7 14 02 FB | 	rdlong	arg02, fp
219b4     04 4E 85 F1 | 	sub	fp, #4
219b8     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
219bc     08 4E 05 F1 | 	add	fp, #8
219c0     A7 FA 61 FC | 	wrlong	result1, fp
219c4     00 FA 4D F2 | 	cmps	result1, #0 wz
219c8     08 4E 85 F1 | 	sub	fp, #8
219cc     AC 01 90 5D |  if_ne	jmp	#LR__3727
219d0     37 4E 05 F1 | 	add	fp, #55
219d4     A7 FA C1 FA | 	rdbyte	result1, fp
219d8     37 4E 85 F1 | 	sub	fp, #55
219dc     80 FA CD F7 | 	test	result1, #128 wz
219e0     08 4E 05 51 |  if_ne	add	fp, #8
219e4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
219e8     08 4E 85 51 |  if_ne	sub	fp, #8
219ec     1C 00 90 5D |  if_ne	jmp	#LR__3720
219f0     12 4E 05 F1 | 	add	fp, #18
219f4     A7 FA C1 FA | 	rdbyte	result1, fp
219f8     12 4E 85 F1 | 	sub	fp, #18
219fc     01 FA CD F7 | 	test	result1, #1 wz
21a00     08 4E 05 51 |  if_ne	add	fp, #8
21a04     A7 0E 68 5C |  if_ne	wrlong	#7, fp
21a08     08 4E 85 51 |  if_ne	sub	fp, #8
21a0c                 | LR__3720
21a0c     08 4E 05 F1 | 	add	fp, #8
21a10     A7 FA 09 FB | 	rdlong	result1, fp wz
21a14     08 4E 85 F1 | 	sub	fp, #8
21a18     C8 00 90 5D |  if_ne	jmp	#LR__3723
21a1c     70 4E 05 F1 | 	add	fp, #112
21a20     A7 12 02 FB | 	rdlong	arg01, fp
21a24     48 4E 85 F1 | 	sub	fp, #72
21a28     A7 14 02 FB | 	rdlong	arg02, fp
21a2c     28 4E 85 F1 | 	sub	fp, #40
21a30     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
21a34     6C 4E 05 F1 | 	add	fp, #108
21a38     A7 FA 61 FC | 	wrlong	result1, fp
21a3c     5A 4E 85 F1 | 	sub	fp, #90
21a40     A7 FA C1 FA | 	rdbyte	result1, fp
21a44     12 4E 85 F1 | 	sub	fp, #18
21a48     10 FA CD F7 | 	test	result1, #16 wz
21a4c     94 00 90 AD |  if_e	jmp	#LR__3722
21a50     70 4E 05 F1 | 	add	fp, #112
21a54     A7 FA 01 FB | 	rdlong	result1, fp
21a58     34 4E 85 F1 | 	sub	fp, #52
21a5c     A7 FA 61 FC | 	wrlong	result1, fp
21a60     30 4E 05 F1 | 	add	fp, #48
21a64     A7 16 02 FB | 	rdlong	arg03, fp
21a68     28 4E 85 F1 | 	sub	fp, #40
21a6c     A7 16 62 FC | 	wrlong	arg03, fp
21a70     08 4E 85 F1 | 	sub	fp, #8
21a74     A7 12 02 F6 | 	mov	arg01, fp
21a78     3C 4E 85 F1 | 	sub	fp, #60
21a7c     00 14 06 F6 | 	mov	arg02, #0
21a80     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
21a84     08 4E 05 F1 | 	add	fp, #8
21a88     A7 FA 61 FC | 	wrlong	result1, fp
21a8c     08 4E 85 F1 | 	sub	fp, #8
21a90     00 FA 0D F2 | 	cmp	result1, #0 wz
21a94     4C 00 90 5D |  if_ne	jmp	#LR__3721
21a98     3C 4E 05 F1 | 	add	fp, #60
21a9c     A7 12 02 F6 | 	mov	arg01, fp
21aa0     3C 4E 85 F1 | 	sub	fp, #60
21aa4     00 14 06 F6 | 	mov	arg02, #0
21aa8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
21aac     08 4E 05 F1 | 	add	fp, #8
21ab0     A7 FA 61 FC | 	wrlong	result1, fp
21ab4     00 FA 4D F2 | 	cmps	result1, #0 wz
21ab8     08 4E 85 F1 | 	sub	fp, #8
21abc     08 4E 05 A1 |  if_e	add	fp, #8
21ac0     A7 0E 68 AC |  if_e	wrlong	#7, fp
21ac4     08 4E 85 A1 |  if_e	sub	fp, #8
21ac8     08 4E 05 F1 | 	add	fp, #8
21acc     A7 FA 01 FB | 	rdlong	result1, fp
21ad0     08 4E 85 F1 | 	sub	fp, #8
21ad4     04 FA 0D F2 | 	cmp	result1, #4 wz
21ad8     08 4E 05 A1 |  if_e	add	fp, #8
21adc     A7 00 68 AC |  if_e	wrlong	#0, fp
21ae0     08 4E 85 A1 |  if_e	sub	fp, #8
21ae4                 | LR__3721
21ae4                 | LR__3722
21ae4                 | LR__3723
21ae4     08 4E 05 F1 | 	add	fp, #8
21ae8     A7 FA 09 FB | 	rdlong	result1, fp wz
21aec     08 4E 85 F1 | 	sub	fp, #8
21af0     88 00 90 5D |  if_ne	jmp	#LR__3726
21af4     0C 4E 05 F1 | 	add	fp, #12
21af8     A7 12 02 F6 | 	mov	arg01, fp
21afc     0C 4E 85 F1 | 	sub	fp, #12
21b00     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
21b04     08 4E 05 F1 | 	add	fp, #8
21b08     A7 FA 61 FC | 	wrlong	result1, fp
21b0c     08 4E 85 F1 | 	sub	fp, #8
21b10     00 FA 0D F2 | 	cmp	result1, #0 wz
21b14     38 00 90 5D |  if_ne	jmp	#LR__3724
21b18     6C 4E 05 F1 | 	add	fp, #108
21b1c     A7 FA 09 FB | 	rdlong	result1, fp wz
21b20     6C 4E 85 F1 | 	sub	fp, #108
21b24     28 00 90 AD |  if_e	jmp	#LR__3724
21b28     0C 4E 05 F1 | 	add	fp, #12
21b2c     A7 12 02 F6 | 	mov	arg01, fp
21b30     60 4E 05 F1 | 	add	fp, #96
21b34     A7 14 02 FB | 	rdlong	arg02, fp
21b38     6C 4E 85 F1 | 	sub	fp, #108
21b3c     00 16 06 F6 | 	mov	arg03, #0
21b40     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
21b44     08 4E 05 F1 | 	add	fp, #8
21b48     A7 FA 61 FC | 	wrlong	result1, fp
21b4c     08 4E 85 F1 | 	sub	fp, #8
21b50                 | LR__3724
21b50     08 4E 05 F1 | 	add	fp, #8
21b54     A7 FA 09 FB | 	rdlong	result1, fp wz
21b58     08 4E 85 F1 | 	sub	fp, #8
21b5c     1C 00 90 5D |  if_ne	jmp	#LR__3725
21b60     70 4E 05 F1 | 	add	fp, #112
21b64     A7 12 02 FB | 	rdlong	arg01, fp
21b68     70 4E 85 F1 | 	sub	fp, #112
21b6c     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
21b70     08 4E 05 F1 | 	add	fp, #8
21b74     A7 FA 61 FC | 	wrlong	result1, fp
21b78     08 4E 85 F1 | 	sub	fp, #8
21b7c                 | LR__3725
21b7c                 | LR__3726
21b7c                 | LR__3727
21b7c                 | LR__3728
21b7c                 | ' 			}
21b7c                 | ' 		}
21b7c                 | ' 		;
21b7c                 | ' 	}
21b7c                 | ' 
21b7c                 | ' 	return res ;
21b7c     08 4E 05 F1 | 	add	fp, #8
21b80     A7 FA 01 FB | 	rdlong	result1, fp
21b84     08 4E 85 F1 | 	sub	fp, #8
21b88     A7 F0 03 F6 | 	mov	ptra, fp
21b8c     B2 00 A0 FD | 	call	#popregs_
21b90                 | _fatfs_cc_f_unlink_ret
21b90     2D 00 64 FD | 	ret
21b94                 | 
21b94                 | _fatfs_cc_f_mkdir
21b94     00 4A 05 F6 | 	mov	COUNT_, #0
21b98     A8 00 A0 FD | 	call	#pushregs_
21b9c     5C F0 07 F1 | 	add	ptra, #92
21ba0     04 4E 05 F1 | 	add	fp, #4
21ba4     A7 12 62 FC | 	wrlong	arg01, fp
21ba8     A7 12 02 F6 | 	mov	arg01, fp
21bac     48 4E 05 F1 | 	add	fp, #72
21bb0     A7 14 02 F6 | 	mov	arg02, fp
21bb4     4C 4E 85 F1 | 	sub	fp, #76
21bb8     02 16 06 F6 | 	mov	arg03, #2
21bbc     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
21bc0     08 4E 05 F1 | 	add	fp, #8
21bc4     A7 FA 61 FC | 	wrlong	result1, fp
21bc8     08 4E 85 F1 | 	sub	fp, #8
21bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
21bd0     C4 02 90 5D |  if_ne	jmp	#LR__3735
21bd4     4C 4E 05 F1 | 	add	fp, #76
21bd8     A7 16 02 FB | 	rdlong	arg03, fp
21bdc     40 4E 85 F1 | 	sub	fp, #64
21be0     A7 16 62 FC | 	wrlong	arg03, fp
21be4     A7 12 02 F6 | 	mov	arg01, fp
21be8     08 4E 85 F1 | 	sub	fp, #8
21bec     A7 14 02 FB | 	rdlong	arg02, fp
21bf0     04 4E 85 F1 | 	sub	fp, #4
21bf4     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
21bf8     08 4E 05 F1 | 	add	fp, #8
21bfc     A7 FA 61 FC | 	wrlong	result1, fp
21c00     00 FA 4D F2 | 	cmps	result1, #0 wz
21c04     08 4E 85 F1 | 	sub	fp, #8
21c08     08 4E 05 A1 |  if_e	add	fp, #8
21c0c     A7 10 68 AC |  if_e	wrlong	#8, fp
21c10     08 4E 85 A1 |  if_e	sub	fp, #8
21c14     08 4E 05 F1 | 	add	fp, #8
21c18     A7 FA 01 FB | 	rdlong	result1, fp
21c1c     08 4E 85 F1 | 	sub	fp, #8
21c20     04 FA 0D F2 | 	cmp	result1, #4 wz
21c24     70 02 90 5D |  if_ne	jmp	#LR__3734
21c28     4C 4E 05 F1 | 	add	fp, #76
21c2c     A7 16 02 FB | 	rdlong	arg03, fp
21c30     10 4E 85 F1 | 	sub	fp, #16
21c34     A7 16 62 FC | 	wrlong	arg03, fp
21c38     A7 12 02 F6 | 	mov	arg01, fp
21c3c     3C 4E 85 F1 | 	sub	fp, #60
21c40     00 14 06 F6 | 	mov	arg02, #0
21c44     04 AC BF FD | 	call	#_fatfs_cc_create_chain
21c48     50 4E 05 F1 | 	add	fp, #80
21c4c     A7 FA 61 FC | 	wrlong	result1, fp
21c50     48 4E 85 F1 | 	sub	fp, #72
21c54     A7 00 68 FC | 	wrlong	#0, fp
21c58     48 4E 05 F1 | 	add	fp, #72
21c5c     A7 FA 09 FB | 	rdlong	result1, fp wz
21c60     50 4E 85 F1 | 	sub	fp, #80
21c64     08 4E 05 A1 |  if_e	add	fp, #8
21c68     A7 0E 68 AC |  if_e	wrlong	#7, fp
21c6c     08 4E 85 A1 |  if_e	sub	fp, #8
21c70     50 4E 05 F1 | 	add	fp, #80
21c74     A7 FA 01 FB | 	rdlong	result1, fp
21c78     50 4E 85 F1 | 	sub	fp, #80
21c7c     01 FA 0D F2 | 	cmp	result1, #1 wz
21c80     08 4E 05 A1 |  if_e	add	fp, #8
21c84     A7 04 68 AC |  if_e	wrlong	#2, fp
21c88     08 4E 85 A1 |  if_e	sub	fp, #8
21c8c     50 4E 05 F1 | 	add	fp, #80
21c90     A7 16 02 FB | 	rdlong	arg03, fp
21c94     50 4E 85 F1 | 	sub	fp, #80
21c98     FF FF 7F FF 
21c9c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
21ca0     08 4E 05 A1 |  if_e	add	fp, #8
21ca4     A7 02 68 AC |  if_e	wrlong	#1, fp
21ca8     08 4E 85 A1 |  if_e	sub	fp, #8
21cac     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
21cb0     58 4E 05 F1 | 	add	fp, #88
21cb4     A7 FA 61 FC | 	wrlong	result1, fp
21cb8     50 4E 85 F1 | 	sub	fp, #80
21cbc     A7 FA 09 FB | 	rdlong	result1, fp wz
21cc0     08 4E 85 F1 | 	sub	fp, #8
21cc4     1C 01 90 5D |  if_ne	jmp	#LR__3731
21cc8     4C 4E 05 F1 | 	add	fp, #76
21ccc     A7 12 02 FB | 	rdlong	arg01, fp
21cd0     04 4E 05 F1 | 	add	fp, #4
21cd4     A7 14 02 FB | 	rdlong	arg02, fp
21cd8     50 4E 85 F1 | 	sub	fp, #80
21cdc     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
21ce0     08 4E 05 F1 | 	add	fp, #8
21ce4     A7 FA 61 FC | 	wrlong	result1, fp
21ce8     00 FA 4D F2 | 	cmps	result1, #0 wz
21cec     08 4E 85 F1 | 	sub	fp, #8
21cf0     F0 00 90 5D |  if_ne	jmp	#LR__3730
21cf4     4C 4E 05 F1 | 	add	fp, #76
21cf8     A7 12 02 FB | 	rdlong	arg01, fp
21cfc     4C 4E 85 F1 | 	sub	fp, #76
21d00     34 12 06 F1 | 	add	arg01, #52
21d04     20 14 06 F6 | 	mov	arg02, #32
21d08     0B 16 06 F6 | 	mov	arg03, #11
21d0c     98 00 A0 FD | 	call	#\builtin_bytefill_
21d10     4C 4E 05 F1 | 	add	fp, #76
21d14     A7 FA 01 FB | 	rdlong	result1, fp
21d18     34 FA 05 F1 | 	add	result1, #52
21d1c     FD 5C 48 FC | 	wrbyte	#46, result1
21d20     A7 16 02 FB | 	rdlong	arg03, fp
21d24     3F 16 06 F1 | 	add	arg03, #63
21d28     0B 21 48 FC | 	wrbyte	#16, arg03
21d2c     A7 12 02 FB | 	rdlong	arg01, fp
21d30     4A 12 06 F1 | 	add	arg01, #74
21d34     0C 4E 05 F1 | 	add	fp, #12
21d38     A7 14 02 FB | 	rdlong	arg02, fp
21d3c     09 15 62 FC | 	wrlong	arg02, arg01
21d40     0C 4E 85 F1 | 	sub	fp, #12
21d44     A7 14 02 FB | 	rdlong	arg02, fp
21d48     0A 13 02 F6 | 	mov	arg01, arg02
21d4c     34 14 06 F1 | 	add	arg02, #52
21d50     04 4E 05 F1 | 	add	fp, #4
21d54     A7 16 02 FB | 	rdlong	arg03, fp
21d58     50 4E 85 F1 | 	sub	fp, #80
21d5c     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
21d60     4C 4E 05 F1 | 	add	fp, #76
21d64     A7 14 02 FB | 	rdlong	arg02, fp
21d68     0A 13 02 F6 | 	mov	arg01, arg02
21d6c     54 12 06 F1 | 	add	arg01, #84
21d70     4C 4E 85 F1 | 	sub	fp, #76
21d74     34 14 06 F1 | 	add	arg02, #52
21d78     20 16 06 F6 | 	mov	arg03, #32
21d7c     B4 30 BF FD | 	call	#__system____builtin_memmove
21d80     4C 4E 05 F1 | 	add	fp, #76
21d84     A7 16 02 FB | 	rdlong	arg03, fp
21d88     55 16 06 F1 | 	add	arg03, #85
21d8c     0B 5D 48 FC | 	wrbyte	#46, arg03
21d90     38 4E 85 F1 | 	sub	fp, #56
21d94     A7 16 02 FB | 	rdlong	arg03, fp
21d98     40 4E 05 F1 | 	add	fp, #64
21d9c     A7 16 62 FC | 	wrlong	arg03, fp
21da0     08 4E 85 F1 | 	sub	fp, #8
21da4     A7 14 02 FB | 	rdlong	arg02, fp
21da8     0A 13 02 F6 | 	mov	arg01, arg02
21dac     54 14 06 F1 | 	add	arg02, #84
21db0     4C 4E 85 F1 | 	sub	fp, #76
21db4     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
21db8     4C 4E 05 F1 | 	add	fp, #76
21dbc     A7 16 02 FB | 	rdlong	arg03, fp
21dc0     03 16 06 F1 | 	add	arg03, #3
21dc4     0B 03 48 FC | 	wrbyte	#1, arg03
21dc8     40 4E 85 F1 | 	sub	fp, #64
21dcc     A7 12 02 F6 | 	mov	arg01, fp
21dd0     0C 4E 85 F1 | 	sub	fp, #12
21dd4     44 BA BF FD | 	call	#_fatfs_cc_dir_register
21dd8     08 4E 05 F1 | 	add	fp, #8
21ddc     A7 FA 61 FC | 	wrlong	result1, fp
21de0     08 4E 85 F1 | 	sub	fp, #8
21de4                 | LR__3730
21de4                 | LR__3731
21de4     08 4E 05 F1 | 	add	fp, #8
21de8     A7 FA 09 FB | 	rdlong	result1, fp wz
21dec     08 4E 85 F1 | 	sub	fp, #8
21df0     88 00 90 5D |  if_ne	jmp	#LR__3732
21df4     28 4E 05 F1 | 	add	fp, #40
21df8     A7 12 02 FB | 	rdlong	arg01, fp
21dfc     16 12 06 F1 | 	add	arg01, #22
21e00     30 4E 05 F1 | 	add	fp, #48
21e04     A7 14 02 FB | 	rdlong	arg02, fp
21e08     09 15 62 FC | 	wrlong	arg02, arg01
21e0c     0C 4E 85 F1 | 	sub	fp, #12
21e10     A7 12 02 FB | 	rdlong	arg01, fp
21e14     24 4E 85 F1 | 	sub	fp, #36
21e18     A7 14 02 FB | 	rdlong	arg02, fp
21e1c     28 4E 05 F1 | 	add	fp, #40
21e20     A7 16 02 FB | 	rdlong	arg03, fp
21e24     50 4E 85 F1 | 	sub	fp, #80
21e28     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
21e2c     28 4E 05 F1 | 	add	fp, #40
21e30     A7 FA 01 FB | 	rdlong	result1, fp
21e34     0B FA 05 F1 | 	add	result1, #11
21e38     FD 20 48 FC | 	wrbyte	#16, result1
21e3c     24 4E 05 F1 | 	add	fp, #36
21e40     A7 FA 01 FB | 	rdlong	result1, fp
21e44     03 FA 05 F1 | 	add	result1, #3
21e48     FD 02 48 FC | 	wrbyte	#1, result1
21e4c     44 4E 85 F1 | 	sub	fp, #68
21e50     A7 FA 09 FB | 	rdlong	result1, fp wz
21e54     08 4E 85 F1 | 	sub	fp, #8
21e58     3C 00 90 5D |  if_ne	jmp	#LR__3733
21e5c     4C 4E 05 F1 | 	add	fp, #76
21e60     A7 12 02 FB | 	rdlong	arg01, fp
21e64     4C 4E 85 F1 | 	sub	fp, #76
21e68     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
21e6c     08 4E 05 F1 | 	add	fp, #8
21e70     A7 FA 61 FC | 	wrlong	result1, fp
21e74     08 4E 85 F1 | 	sub	fp, #8
21e78     1C 00 90 FD | 	jmp	#LR__3733
21e7c                 | LR__3732
21e7c     3C 4E 05 F1 | 	add	fp, #60
21e80     A7 12 02 F6 | 	mov	arg01, fp
21e84     14 4E 05 F1 | 	add	fp, #20
21e88     A7 14 02 FB | 	rdlong	arg02, fp
21e8c     50 4E 85 F1 | 	sub	fp, #80
21e90     00 16 06 F6 | 	mov	arg03, #0
21e94     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
21e98                 | LR__3733
21e98                 | LR__3734
21e98                 | LR__3735
21e98                 | ' 				remove_chain(&sobj, dcl, 0);
21e98                 | ' 			}
21e98                 | ' 		}
21e98                 | ' 		;
21e98                 | ' 	}
21e98                 | ' 
21e98                 | ' 	return res ;
21e98     08 4E 05 F1 | 	add	fp, #8
21e9c     A7 FA 01 FB | 	rdlong	result1, fp
21ea0     08 4E 85 F1 | 	sub	fp, #8
21ea4     A7 F0 03 F6 | 	mov	ptra, fp
21ea8     B2 00 A0 FD | 	call	#popregs_
21eac                 | _fatfs_cc_f_mkdir_ret
21eac     2D 00 64 FD | 	ret
21eb0                 | 
21eb0                 | _fatfs_cc_f_rename
21eb0     01 4A 05 F6 | 	mov	COUNT_, #1
21eb4     A8 00 A0 FD | 	call	#pushregs_
21eb8     9C F0 07 F1 | 	add	ptra, #156
21ebc     04 4E 05 F1 | 	add	fp, #4
21ec0     A7 12 62 FC | 	wrlong	arg01, fp
21ec4     04 4E 05 F1 | 	add	fp, #4
21ec8     A7 14 62 FC | 	wrlong	arg02, fp
21ecc     A7 12 02 F6 | 	mov	arg01, fp
21ed0     08 4E 85 F1 | 	sub	fp, #8
21ed4     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
21ed8     04 4E 05 F1 | 	add	fp, #4
21edc     A7 12 02 F6 | 	mov	arg01, fp
21ee0     6C 4E 05 F1 | 	add	fp, #108
21ee4     A7 14 02 F6 | 	mov	arg02, fp
21ee8     70 4E 85 F1 | 	sub	fp, #112
21eec     02 16 06 F6 | 	mov	arg03, #2
21ef0     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
21ef4     0C 4E 05 F1 | 	add	fp, #12
21ef8     A7 FA 61 FC | 	wrlong	result1, fp
21efc     0C 4E 85 F1 | 	sub	fp, #12
21f00     00 FA 0D F2 | 	cmp	result1, #0 wz
21f04     44 03 90 5D |  if_ne	jmp	#LR__3753
21f08     70 4E 05 F1 | 	add	fp, #112
21f0c     A7 16 02 FB | 	rdlong	arg03, fp
21f10     60 4E 85 F1 | 	sub	fp, #96
21f14     A7 16 62 FC | 	wrlong	arg03, fp
21f18     A7 12 02 F6 | 	mov	arg01, fp
21f1c     0C 4E 85 F1 | 	sub	fp, #12
21f20     A7 14 02 FB | 	rdlong	arg02, fp
21f24     04 4E 85 F1 | 	sub	fp, #4
21f28     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
21f2c     0C 4E 05 F1 | 	add	fp, #12
21f30     A7 FA 61 FC | 	wrlong	result1, fp
21f34     00 FA 4D F2 | 	cmps	result1, #0 wz
21f38     0C 4E 85 F1 | 	sub	fp, #12
21f3c     1C 00 90 5D |  if_ne	jmp	#LR__3740
21f40     3B 4E 05 F1 | 	add	fp, #59
21f44     A7 FA C1 FA | 	rdbyte	result1, fp
21f48     3B 4E 85 F1 | 	sub	fp, #59
21f4c     A0 FA CD F7 | 	test	result1, #160 wz
21f50     0C 4E 05 51 |  if_ne	add	fp, #12
21f54     A7 0C 68 5C |  if_ne	wrlong	#6, fp
21f58     0C 4E 85 51 |  if_ne	sub	fp, #12
21f5c                 | LR__3740
21f5c     0C 4E 05 F1 | 	add	fp, #12
21f60     A7 1E 0A FB | 	rdlong	local01, fp wz
21f64     0C 4E 85 F1 | 	sub	fp, #12
21f68     E0 02 90 5D |  if_ne	jmp	#LR__3752
21f6c     74 4E 05 F1 | 	add	fp, #116
21f70     A7 12 02 F6 | 	mov	arg01, fp
21f74     48 4E 85 F1 | 	sub	fp, #72
21f78     A7 14 02 FB | 	rdlong	arg02, fp
21f7c     2C 4E 85 F1 | 	sub	fp, #44
21f80     20 16 06 F6 | 	mov	arg03, #32
21f84     AC 2E BF FD | 	call	#__system____builtin_memmove
21f88     40 4E 05 F1 | 	add	fp, #64
21f8c     A7 12 02 F6 | 	mov	arg01, fp
21f90     30 4E 85 F1 | 	sub	fp, #48
21f94     A7 14 02 F6 | 	mov	arg02, fp
21f98     10 4E 85 F1 | 	sub	fp, #16
21f9c     30 16 06 F6 | 	mov	arg03, #48
21fa0     90 2E BF FD | 	call	#__system____builtin_memmove
21fa4     40 4E 05 F1 | 	add	fp, #64
21fa8     A7 12 02 F6 | 	mov	arg01, fp
21fac     38 4E 85 F1 | 	sub	fp, #56
21fb0     A7 14 02 FB | 	rdlong	arg02, fp
21fb4     08 4E 85 F1 | 	sub	fp, #8
21fb8     34 CA BF FD | 	call	#_fatfs_cc_follow_path
21fbc     0C 4E 05 F1 | 	add	fp, #12
21fc0     A7 FA 61 FC | 	wrlong	result1, fp
21fc4     0C 4E 85 F1 | 	sub	fp, #12
21fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
21fcc     4C 00 90 5D |  if_ne	jmp	#LR__3743
21fd0     48 4E 05 F1 | 	add	fp, #72
21fd4     A7 FA 01 FB | 	rdlong	result1, fp
21fd8     30 4E 85 F1 | 	sub	fp, #48
21fdc     A7 16 02 FB | 	rdlong	arg03, fp
21fe0     18 4E 85 F1 | 	sub	fp, #24
21fe4     0B FB 09 F2 | 	cmp	result1, arg03 wz
21fe8     20 00 90 5D |  if_ne	jmp	#LR__3741
21fec     50 4E 05 F1 | 	add	fp, #80
21ff0     A7 FA 01 FB | 	rdlong	result1, fp
21ff4     30 4E 85 F1 | 	sub	fp, #48
21ff8     A7 16 02 FB | 	rdlong	arg03, fp
21ffc     20 4E 85 F1 | 	sub	fp, #32
22000     0B FB 09 F2 | 	cmp	result1, arg03 wz
22004     04 1E 06 A6 |  if_e	mov	local01, #4
22008     04 00 90 AD |  if_e	jmp	#LR__3742
2200c                 | LR__3741
2200c     08 1E 06 F6 | 	mov	local01, #8
22010                 | LR__3742
22010     0C 4E 05 F1 | 	add	fp, #12
22014     A7 1E 62 FC | 	wrlong	local01, fp
22018     0C 4E 85 F1 | 	sub	fp, #12
2201c                 | LR__3743
2201c     0C 4E 05 F1 | 	add	fp, #12
22020     A7 1E 02 FB | 	rdlong	local01, fp
22024     0C 4E 85 F1 | 	sub	fp, #12
22028     04 1E 0E F2 | 	cmp	local01, #4 wz
2202c     CC 01 90 5D |  if_ne	jmp	#LR__3749
22030     40 4E 05 F1 | 	add	fp, #64
22034     A7 12 02 F6 | 	mov	arg01, fp
22038     40 4E 85 F1 | 	sub	fp, #64
2203c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
22040     0C 4E 05 F1 | 	add	fp, #12
22044     A7 FA 61 FC | 	wrlong	result1, fp
22048     0C 4E 85 F1 | 	sub	fp, #12
2204c     00 FA 0D F2 | 	cmp	result1, #0 wz
22050     A8 01 90 5D |  if_ne	jmp	#LR__3748
22054     5C 4E 05 F1 | 	add	fp, #92
22058     A7 12 02 FB | 	rdlong	arg01, fp
2205c     38 4E 05 F1 | 	add	fp, #56
22060     A7 12 62 FC | 	wrlong	arg01, fp
22064     0D 12 06 F1 | 	add	arg01, #13
22068     20 4E 85 F1 | 	sub	fp, #32
2206c     A7 14 02 F6 | 	mov	arg02, fp
22070     74 4E 85 F1 | 	sub	fp, #116
22074     0D 14 06 F1 | 	add	arg02, #13
22078     13 16 06 F6 | 	mov	arg03, #19
2207c     B4 2D BF FD | 	call	#__system____builtin_memmove
22080     94 4E 05 F1 | 	add	fp, #148
22084     A7 1E 02 FB | 	rdlong	local01, fp
22088     15 4E 85 F1 | 	sub	fp, #21
2208c     A7 FA C1 FA | 	rdbyte	result1, fp
22090     0B 1E 06 F1 | 	add	local01, #11
22094     0F FB 41 FC | 	wrbyte	result1, local01
22098     15 4E 05 F1 | 	add	fp, #21
2209c     A7 1E 02 FB | 	rdlong	local01, fp
220a0     94 4E 85 F1 | 	sub	fp, #148
220a4     0B 1E 06 F1 | 	add	local01, #11
220a8     0F 1F C2 FA | 	rdbyte	local01, local01
220ac     10 1E CE F7 | 	test	local01, #16 wz
220b0     24 00 90 5D |  if_ne	jmp	#LR__3744
220b4     94 4E 05 F1 | 	add	fp, #148
220b8     A7 FA 01 FB | 	rdlong	result1, fp
220bc     FD 1E 02 F6 | 	mov	local01, result1
220c0     94 4E 85 F1 | 	sub	fp, #148
220c4     0B FA 05 F1 | 	add	result1, #11
220c8     FD FA C1 FA | 	rdbyte	result1, result1
220cc     20 FA 45 F5 | 	or	result1, #32
220d0     0B 1E 06 F1 | 	add	local01, #11
220d4     0F FB 41 FC | 	wrbyte	result1, local01
220d8                 | LR__3744
220d8     70 4E 05 F1 | 	add	fp, #112
220dc     A7 1E 02 FB | 	rdlong	local01, fp
220e0     03 1E 06 F1 | 	add	local01, #3
220e4     0F 03 48 FC | 	wrbyte	#1, local01
220e8     24 4E 05 F1 | 	add	fp, #36
220ec     A7 1E 02 FB | 	rdlong	local01, fp
220f0     94 4E 85 F1 | 	sub	fp, #148
220f4     0B 1E 06 F1 | 	add	local01, #11
220f8     0F 1F C2 FA | 	rdbyte	local01, local01
220fc     10 1E CE F7 | 	test	local01, #16 wz
22100     F8 00 90 AD |  if_e	jmp	#LR__3747
22104     18 4E 05 F1 | 	add	fp, #24
22108     A7 16 02 FB | 	rdlong	arg03, fp
2210c     30 4E 05 F1 | 	add	fp, #48
22110     A7 1E 02 FB | 	rdlong	local01, fp
22114     48 4E 85 F1 | 	sub	fp, #72
22118     0F 17 0A F2 | 	cmp	arg03, local01 wz
2211c     DC 00 90 AD |  if_e	jmp	#LR__3747
22120     70 4E 05 F1 | 	add	fp, #112
22124     A7 12 02 FB | 	rdlong	arg01, fp
22128     09 1F 02 F6 | 	mov	local01, arg01
2212c     24 4E 05 F1 | 	add	fp, #36
22130     A7 14 02 FB | 	rdlong	arg02, fp
22134     94 4E 85 F1 | 	sub	fp, #148
22138     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2213c     FD 14 02 F6 | 	mov	arg02, result1
22140     0F 13 02 F6 | 	mov	arg01, local01
22144     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
22148     98 4E 05 F1 | 	add	fp, #152
2214c     A7 FA 61 FC | 	wrlong	result1, fp
22150     00 FA 4D F2 | 	cmps	result1, #0 wz
22154     98 4E 85 F1 | 	sub	fp, #152
22158     0C 4E 05 A1 |  if_e	add	fp, #12
2215c     A7 04 68 AC |  if_e	wrlong	#2, fp
22160     0C 4E 85 A1 |  if_e	sub	fp, #12
22164     94 00 90 AD |  if_e	jmp	#LR__3746
22168     70 4E 05 F1 | 	add	fp, #112
2216c     A7 12 02 FB | 	rdlong	arg01, fp
22170     28 4E 05 F1 | 	add	fp, #40
22174     A7 14 02 FB | 	rdlong	arg02, fp
22178     98 4E 85 F1 | 	sub	fp, #152
2217c     4C A0 BF FD | 	call	#_fatfs_cc_move_window
22180     0C 4E 05 F1 | 	add	fp, #12
22184     A7 FA 61 FC | 	wrlong	result1, fp
22188     64 4E 05 F1 | 	add	fp, #100
2218c     A7 1E 02 FB | 	rdlong	local01, fp
22190     54 1E 06 F1 | 	add	local01, #84
22194     24 4E 05 F1 | 	add	fp, #36
22198     A7 1E 62 FC | 	wrlong	local01, fp
2219c     88 4E 85 F1 | 	sub	fp, #136
221a0     A7 1E 0A FB | 	rdlong	local01, fp wz
221a4     0C 4E 85 F1 | 	sub	fp, #12
221a8     50 00 90 5D |  if_ne	jmp	#LR__3745
221ac     94 4E 05 F1 | 	add	fp, #148
221b0     A7 1E 02 FB | 	rdlong	local01, fp
221b4     94 4E 85 F1 | 	sub	fp, #148
221b8     01 1E 06 F1 | 	add	local01, #1
221bc     0F 1F C2 FA | 	rdbyte	local01, local01
221c0     2E 1E 0E F2 | 	cmp	local01, #46 wz
221c4     34 00 90 5D |  if_ne	jmp	#LR__3745
221c8     70 4E 05 F1 | 	add	fp, #112
221cc     A7 12 02 FB | 	rdlong	arg01, fp
221d0     24 4E 05 F1 | 	add	fp, #36
221d4     A7 14 02 FB | 	rdlong	arg02, fp
221d8     4C 4E 85 F1 | 	sub	fp, #76
221dc     A7 16 02 FB | 	rdlong	arg03, fp
221e0     48 4E 85 F1 | 	sub	fp, #72
221e4     50 AD BF FD | 	call	#_fatfs_cc_st_clust
221e8     70 4E 05 F1 | 	add	fp, #112
221ec     A7 1E 02 FB | 	rdlong	local01, fp
221f0     70 4E 85 F1 | 	sub	fp, #112
221f4     03 1E 06 F1 | 	add	local01, #3
221f8     0F 03 48 FC | 	wrbyte	#1, local01
221fc                 | LR__3745
221fc                 | LR__3746
221fc                 | LR__3747
221fc                 | LR__3748
221fc                 | LR__3749
221fc     0C 4E 05 F1 | 	add	fp, #12
22200     A7 1E 0A FB | 	rdlong	local01, fp wz
22204     0C 4E 85 F1 | 	sub	fp, #12
22208     40 00 90 5D |  if_ne	jmp	#LR__3751
2220c     10 4E 05 F1 | 	add	fp, #16
22210     A7 12 02 F6 | 	mov	arg01, fp
22214     10 4E 85 F1 | 	sub	fp, #16
22218     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2221c     0C 4E 05 F1 | 	add	fp, #12
22220     A7 FA 61 FC | 	wrlong	result1, fp
22224     0C 4E 85 F1 | 	sub	fp, #12
22228     00 FA 0D F2 | 	cmp	result1, #0 wz
2222c     1C 00 90 5D |  if_ne	jmp	#LR__3750
22230     70 4E 05 F1 | 	add	fp, #112
22234     A7 12 02 FB | 	rdlong	arg01, fp
22238     70 4E 85 F1 | 	sub	fp, #112
2223c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
22240     0C 4E 05 F1 | 	add	fp, #12
22244     A7 FA 61 FC | 	wrlong	result1, fp
22248     0C 4E 85 F1 | 	sub	fp, #12
2224c                 | LR__3750
2224c                 | LR__3751
2224c                 | LR__3752
2224c                 | LR__3753
2224c                 | ' 					res = sync_fs(fs);
2224c                 | ' 				}
2224c                 | ' 			}
2224c                 | ' 
2224c                 | ' 		}
2224c                 | ' 		;
2224c                 | ' 	}
2224c                 | ' 
2224c                 | ' 	return res ;
2224c     0C 4E 05 F1 | 	add	fp, #12
22250     A7 FA 01 FB | 	rdlong	result1, fp
22254     0C 4E 85 F1 | 	sub	fp, #12
22258     A7 F0 03 F6 | 	mov	ptra, fp
2225c     B2 00 A0 FD | 	call	#popregs_
22260                 | _fatfs_cc_f_rename_ret
22260     2D 00 64 FD | 	ret
22264                 | 
22264                 | _fatfs_cc_time
22264     00 4A 05 F6 | 	mov	COUNT_, #0
22268     A8 00 A0 FD | 	call	#pushregs_
2226c     14 F0 07 F1 | 	add	ptra, #20
22270     04 4E 05 F1 | 	add	fp, #4
22274     A7 12 62 FC | 	wrlong	arg01, fp
22278     04 4E 05 F1 | 	add	fp, #4
2227c     A7 12 02 F6 | 	mov	arg01, fp
22280     08 4E 85 F1 | 	sub	fp, #8
22284     00 14 06 F6 | 	mov	arg02, #0
22288     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2228c     08 4E 05 F1 | 	add	fp, #8
22290     A7 FA 01 FB | 	rdlong	result1, fp
22294     08 4E 05 F1 | 	add	fp, #8
22298     A7 FA 61 FC | 	wrlong	result1, fp
2229c     0C 4E 85 F1 | 	sub	fp, #12
222a0     A7 FA 09 FB | 	rdlong	result1, fp wz
222a4     04 4E 85 F1 | 	sub	fp, #4
222a8     18 00 90 AD |  if_e	jmp	#LR__3760
222ac     04 4E 05 F1 | 	add	fp, #4
222b0     A7 FA 01 FB | 	rdlong	result1, fp
222b4     0C 4E 05 F1 | 	add	fp, #12
222b8     A7 14 02 FB | 	rdlong	arg02, fp
222bc     10 4E 85 F1 | 	sub	fp, #16
222c0     FD 14 62 FC | 	wrlong	arg02, result1
222c4                 | LR__3760
222c4                 | '         *tp = now;
222c4                 | '     return now;
222c4     10 4E 05 F1 | 	add	fp, #16
222c8     A7 FA 01 FB | 	rdlong	result1, fp
222cc     10 4E 85 F1 | 	sub	fp, #16
222d0     A7 F0 03 F6 | 	mov	ptra, fp
222d4     B2 00 A0 FD | 	call	#popregs_
222d8                 | _fatfs_cc_time_ret
222d8     2D 00 64 FD | 	ret
222dc                 | 
222dc                 | _fatfs_cc_mktime
222dc     06 4A 05 F6 | 	mov	COUNT_, #6
222e0     A8 00 A0 FD | 	call	#pushregs_
222e4     09 1F 02 F6 | 	mov	local01, arg01
222e8     14 1E 06 F1 | 	add	local01, #20
222ec     0F 13 02 FB | 	rdlong	arg01, local01
222f0     14 1E 86 F1 | 	sub	local01, #20
222f4     46 12 56 F2 | 	cmps	arg01, #70 wc
222f8                 | '                 return (time_t) -1;
222f8     01 FA 65 C6 |  if_b	neg	result1, #1
222fc     7C 01 90 CD |  if_b	jmp	#LR__3774
22300     03 00 00 FF 
22304     6C 21 06 F6 | 	mov	local02, ##1900
22308     14 1E 06 F1 | 	add	local01, #20
2230c     0F FB 01 FB | 	rdlong	result1, local01
22310     FD 20 02 F1 | 	add	local02, result1
22314     08 1E 86 F1 | 	sub	local01, #8
22318     0F 23 02 FB | 	rdlong	local03, local01
2231c     01 22 86 F1 | 	sub	local03, #1
22320     04 1E 06 F1 | 	add	local01, #4
22324     0F 13 02 FB | 	rdlong	arg01, local01
22328     10 1E 86 F1 | 	sub	local01, #16
2232c     02 12 66 F0 | 	shl	arg01, #2
22330     02 00 00 FF 
22334     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
22338     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2233c     09 FB 01 FB | 	rdlong	result1, arg01
22340     FD 22 02 F1 | 	add	local03, result1
22344     10 13 02 F6 | 	mov	arg01, local02
22348     02 00 00 FF 
2234c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
22350     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
22354     00 FA 0D F2 | 	cmp	result1, #0 wz
22358     1C 00 90 AD |  if_e	jmp	#LR__3770
2235c     00 24 06 F6 | 	mov	local04, #0
22360     10 1E 06 F1 | 	add	local01, #16
22364     0F FB 01 FB | 	rdlong	result1, local01
22368     10 1E 86 F1 | 	sub	local01, #16
2236c     02 FA 55 F2 | 	cmps	result1, #2 wc
22370     01 24 06 36 |  if_ae	mov	local04, #1
22374     04 00 90 FD | 	jmp	#LR__3771
22378                 | LR__3770
22378     00 24 06 F6 | 	mov	local04, #0
2237c                 | LR__3771
2237c     04 1E 06 F1 | 	add	local01, #4
22380     0F FB 01 FB | 	rdlong	result1, local01
22384     04 1E 86 F1 | 	sub	local01, #4
22388     0F 27 02 FB | 	rdlong	local05, local01
2238c     08 1E 06 F1 | 	add	local01, #8
22390     0F 13 02 FB | 	rdlong	arg01, local01
22394     07 00 00 FF 
22398     10 12 06 FD | 	qmul	arg01, ##3600
2239c     12 23 02 F1 | 	add	local03, local04
223a0     FD 24 02 F6 | 	mov	local04, result1
223a4     04 24 66 F0 | 	shl	local04, #4
223a8     FD 24 82 F1 | 	sub	local04, result1
223ac     02 24 66 F0 | 	shl	local04, #2
223b0     12 27 02 F1 | 	add	local05, local04
223b4     08 1E 86 F1 | 	sub	local01, #8
223b8     18 24 62 FD | 	getqx	local04
223bc     A8 00 00 FF 
223c0     80 23 06 FD | 	qmul	local03, ##86400
223c4     12 27 02 F1 | 	add	local05, local04
223c8     10 23 02 F6 | 	mov	local03, local02
223cc     03 00 00 FF 
223d0     B2 23 86 F1 | 	sub	local03, ##1970
223d4     18 24 62 FD | 	getqx	local04
223d8     99 F0 00 FF 
223dc     80 23 06 FD | 	qmul	local03, ##31536000
223e0     12 27 02 F1 | 	add	local05, local04
223e4     10 23 02 F6 | 	mov	local03, local02
223e8     03 00 00 FF 
223ec     B1 23 86 F1 | 	sub	local03, ##1969
223f0     11 29 52 F6 | 	abs	local06, local03 wc
223f4     02 28 46 F0 | 	shr	local06, #2
223f8     14 29 82 F6 | 	negc	local06, local06
223fc     03 00 00 FF 
22400     D1 21 56 F2 | 	cmps	local02, ##2001 wc
22404     18 24 62 FD | 	getqx	local04
22408     12 27 02 F1 | 	add	local05, local04
2240c     18 00 90 CD |  if_b	jmp	#LR__3772
22410     03 00 00 FF 
22414     D0 21 86 F1 | 	sub	local02, ##2000
22418     10 25 52 F6 | 	abs	local04, local02 wc
2241c     64 24 16 FD | 	qdiv	local04, #100
22420     18 24 62 FD | 	getqx	local04
22424     12 29 A2 F3 | 	sumnc	local06, local04
22428                 | LR__3772
22428     A8 00 00 FF 
2242c     80 29 06 FD | 	qmul	local06, ##86400
22430     18 28 62 FD | 	getqx	local06
22434     14 27 02 F1 | 	add	local05, local06
22438     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2243c     02 00 00 FF 
22440     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
22444     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
22448     14 27 02 F1 | 	add	local05, local06
2244c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
22450     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
22454     02 00 00 FF 
22458     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2245c     01 22 0E F2 | 	cmp	local03, #1 wz
22460     14 00 90 5D |  if_ne	jmp	#LR__3773
22464     0F 13 02 F6 | 	mov	arg01, local01
22468     D8 19 B0 FD | 	call	#_fatfs_cc___indst
2246c     00 FA 0D F2 | 	cmp	result1, #0 wz
22470     07 00 00 5F 
22474     10 26 86 51 |  if_ne	sub	local05, ##3600
22478                 | LR__3773
22478                 | '                 s -=  (3600L) ;
22478                 | ' 
22478                 | '         return s;
22478     13 FB 01 F6 | 	mov	result1, local05
2247c                 | LR__3774
2247c     A7 F0 03 F6 | 	mov	ptra, fp
22480     B2 00 A0 FD | 	call	#popregs_
22484                 | _fatfs_cc_mktime_ret
22484     2D 00 64 FD | 	ret
22488                 | 
22488                 | _fatfs_cc__gmtime_r
22488     03 4A 05 F6 | 	mov	COUNT_, #3
2248c     A8 00 A0 FD | 	call	#pushregs_
22490     09 1F 02 FB | 	rdlong	local01, arg01
22494     A8 00 00 FF 
22498     80 1F 16 FD | 	qdiv	local01, ##86400
2249c     18 FA 61 FD | 	getqx	result1
224a0     04 FA 05 F1 | 	add	result1, #4
224a4     07 FA 15 FD | 	qdiv	result1, #7
224a8     18 14 06 F1 | 	add	arg02, #24
224ac     D1 7F 27 FF 
224b0     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
224b4     D1 7F 27 3F 
224b8     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
224bc     03 00 00 3F 
224c0     DC 21 06 36 |  if_ae	mov	local02, ##2012
224c4     03 00 00 CF 
224c8     B2 21 06 C6 |  if_b	mov	local02, ##1970
224cc                 | ' 	  year = 1970;
224cc                 | ' 	}
224cc                 | ' 
224cc                 | ' 	for(;;) {
224cc     19 FA 61 FD | 	getqy	result1
224d0     0A FB 61 FC | 	wrlong	result1, arg02
224d4     18 14 86 F1 | 	sub	arg02, #24
224d8                 | LR__3780
224d8     10 13 02 F6 | 	mov	arg01, local02
224dc     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
224e0     00 FA 0D F2 | 	cmp	result1, #0 wz
224e4     42 F1 00 5F 
224e8     00 23 06 56 |  if_ne	mov	local03, ##31622400
224ec     99 F0 00 AF 
224f0     80 23 06 A6 |  if_e	mov	local03, ##31536000
224f4     11 1F 12 F2 | 	cmp	local01, local03 wc
224f8                 | ' 	    break;
224f8     01 20 06 31 |  if_ae	add	local02, #1
224fc     11 1F 82 31 |  if_ae	sub	local01, local03
22500     D4 FF 9F 3D |  if_ae	jmp	#LR__3780
22504     A8 00 00 FF 
22508     80 1F 16 FD | 	qdiv	local01, ##86400
2250c     10 23 02 F6 | 	mov	local03, local02
22510     03 00 00 FF 
22514     6C 23 86 F1 | 	sub	local03, ##1900
22518     14 14 06 F1 | 	add	arg02, #20
2251c     0A 23 62 FC | 	wrlong	local03, arg02
22520     08 14 06 F1 | 	add	arg02, #8
22524     10 13 02 F6 | 	mov	arg01, local02
22528     18 20 62 FD | 	getqx	local02
2252c     0A 21 62 FC | 	wrlong	local02, arg02
22530     1C 14 86 F1 | 	sub	arg02, #28
22534     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
22538     00 FA 0D F2 | 	cmp	result1, #0 wz
2253c     1D 22 06 56 |  if_ne	mov	local03, #29
22540     1C 22 06 A6 |  if_e	mov	local03, #28
22544     02 00 00 FF 
22548     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2254c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
22550     02 00 00 FF 
22554     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
22558                 | ' 
22558                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
22558                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
22558     00 12 06 F6 | 	mov	arg01, #0
2255c     97 2A 48 FB | 	callpa	#(@LR__3782-@LR__3781)>>2,fcache_load_ptr_
22560                 | LR__3781
22560     09 23 02 F6 | 	mov	local03, arg01
22564     02 22 66 F0 | 	shl	local03, #2
22568     02 00 00 FF 
2256c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22570     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
22574     11 23 02 FB | 	rdlong	local03, local03
22578     11 21 52 F2 | 	cmps	local02, local03 wc
2257c     02 00 00 FF 
22580     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
22584     2C 00 90 CD |  if_b	jmp	#LR__3783
22588     09 23 02 F6 | 	mov	local03, arg01
2258c     02 22 66 F0 | 	shl	local03, #2
22590     02 00 00 FF 
22594     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
22598     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2259c     11 23 02 FB | 	rdlong	local03, local03
225a0     11 21 82 F1 | 	sub	local02, local03
225a4     01 12 06 F1 | 	add	arg01, #1
225a8     02 00 00 FF 
225ac     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
225b0     AC FF 9F FD | 	jmp	#LR__3781
225b4                 | LR__3782
225b4                 | LR__3783
225b4     A8 00 00 FF 
225b8     80 1F 16 FD | 	qdiv	local01, ##86400
225bc     10 14 06 F1 | 	add	arg02, #16
225c0     0A 13 62 FC | 	wrlong	arg01, arg02
225c4     01 20 06 F1 | 	add	local02, #1
225c8     04 14 86 F1 | 	sub	arg02, #4
225cc     0A 21 62 FC | 	wrlong	local02, arg02
225d0     19 1E 62 FD | 	getqy	local01
225d4     07 00 00 FF 
225d8     10 1E 16 FD | 	qdiv	local01, ##3600
225dc     18 22 62 FD | 	getqx	local03
225e0     07 00 00 FF 
225e4     10 1E 16 FD | 	qdiv	local01, ##3600
225e8     04 14 86 F1 | 	sub	arg02, #4
225ec     0A 23 62 FC | 	wrlong	local03, arg02
225f0     19 1E 62 FD | 	getqy	local01
225f4     3C 1E 16 FD | 	qdiv	local01, #60
225f8     18 22 62 FD | 	getqx	local03
225fc     3C 1E 16 FD | 	qdiv	local01, #60
22600     04 14 86 F1 | 	sub	arg02, #4
22604     0A 23 62 FC | 	wrlong	local03, arg02
22608     04 14 86 F1 | 	sub	arg02, #4
2260c                 | '         stm->tm_isdst = 0;
2260c                 | ' 
2260c                 | ' ;
2260c                 | '         return stm;
2260c     0A FB 01 F6 | 	mov	result1, arg02
22610     19 22 62 FD | 	getqy	local03
22614     0A 23 62 FC | 	wrlong	local03, arg02
22618     20 14 06 F1 | 	add	arg02, #32
2261c     0A 01 68 FC | 	wrlong	#0, arg02
22620     A7 F0 03 F6 | 	mov	ptra, fp
22624     B2 00 A0 FD | 	call	#popregs_
22628                 | _fatfs_cc__gmtime_r_ret
22628     2D 00 64 FD | 	ret
2262c                 | 
2262c                 | _fatfs_cc__tzset
2262c     20 01 00 FF 
22630     6D 13 06 F6 | 	mov	arg01, ##@LR__4095
22634     34 00 B0 FD | 	call	#_fatfs_cc_getenv
22638     FD 12 02 F6 | 	mov	arg01, result1
2263c     02 00 00 FF 
22640     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
22644     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
22648     02 00 00 FF 
2264c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
22650     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
22654     02 00 00 FF 
22658     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2265c     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
22660     02 00 00 FF 
22664     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
22668                 | _fatfs_cc__tzset_ret
22668     2D 00 64 FD | 	ret
2266c                 | 
2266c                 | _fatfs_cc_getenv
2266c     06 4A 05 F6 | 	mov	COUNT_, #6
22670     A8 00 A0 FD | 	call	#pushregs_
22674     09 1F 02 F6 | 	mov	local01, arg01
22678     09 21 02 F6 | 	mov	local02, arg01
2267c     97 06 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
22680                 | LR__3790
22680     10 FB C9 FA | 	rdbyte	result1, local02 wz
22684     01 20 06 51 |  if_ne	add	local02, #1
22688     F4 FF 9F 5D |  if_ne	jmp	#LR__3790
2268c                 | LR__3791
2268c     09 21 82 F1 | 	sub	local02, arg01
22690     10 FB 01 F6 | 	mov	result1, local02
22694     02 00 00 FF 
22698     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2269c     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
226a0     02 00 00 FF 
226a4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
226a8                 | '             return 0;
226a8     00 FA 05 A6 |  if_e	mov	result1, #0
226ac     5C 00 90 AD |  if_e	jmp	#LR__3794
226b0                 | ' 
226b0                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
226b0     02 00 00 FF 
226b4     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
226b8     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
226bc     02 00 00 FF 
226c0     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
226c4                 | LR__3792
226c4     11 25 0A FB | 	rdlong	local04, local03 wz
226c8     3C 00 90 AD |  if_e	jmp	#LR__3793
226cc     12 13 02 F6 | 	mov	arg01, local04
226d0     0F 15 02 F6 | 	mov	arg02, local01
226d4     10 17 02 F6 | 	mov	arg03, local02
226d8     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
226dc     00 FA 0D F2 | 	cmp	result1, #0 wz
226e0     10 27 02 A6 |  if_e	mov	local05, local02
226e4     12 27 02 A1 |  if_e	add	local05, local04
226e8     13 29 C2 AA |  if_e	rdbyte	local06, local05
226ec     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
226f0                 | ' 			return name+len+1;
226f0     10 25 02 A1 |  if_e	add	local04, local02
226f4     01 24 06 A1 |  if_e	add	local04, #1
226f8     12 FB 01 A6 |  if_e	mov	result1, local04
226fc     0C 00 90 AD |  if_e	jmp	#LR__3794
22700     04 22 06 F1 | 	add	local03, #4
22704     BC FF 9F FD | 	jmp	#LR__3792
22708                 | LR__3793
22708                 | ' 	}
22708                 | ' 	return 0;
22708     00 FA 05 F6 | 	mov	result1, #0
2270c                 | LR__3794
2270c     A7 F0 03 F6 | 	mov	ptra, fp
22710     B2 00 A0 FD | 	call	#popregs_
22714                 | _fatfs_cc_getenv_ret
22714     2D 00 64 FD | 	ret
22718                 | 
22718                 | _fatfs_cc__get_fattime
22718     00 4A 05 F6 | 	mov	COUNT_, #0
2271c     A8 00 A0 FD | 	call	#pushregs_
22720     34 F0 07 F1 | 	add	ptra, #52
22724     00 12 06 F6 | 	mov	arg01, #0
22728     38 FB BF FD | 	call	#_fatfs_cc_time
2272c     04 4E 05 F1 | 	add	fp, #4
22730     A7 FA 61 FC | 	wrlong	result1, fp
22734     A7 12 02 F6 | 	mov	arg01, fp
22738     0C 4E 05 F1 | 	add	fp, #12
2273c     A7 14 02 F6 | 	mov	arg02, fp
22740     10 4E 85 F1 | 	sub	fp, #16
22744     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
22748     24 4E 05 F1 | 	add	fp, #36
2274c     A7 14 02 FB | 	rdlong	arg02, fp
22750     50 14 86 F1 | 	sub	arg02, #80
22754     09 14 66 F0 | 	shl	arg02, #9
22758     04 4E 85 F1 | 	sub	fp, #4
2275c     A7 FA 01 FB | 	rdlong	result1, fp
22760     01 FA 05 F1 | 	add	result1, #1
22764     05 FA 65 F0 | 	shl	result1, #5
22768     FD 14 42 F5 | 	or	arg02, result1
2276c     04 4E 85 F1 | 	sub	fp, #4
22770     A7 FA 01 FB | 	rdlong	result1, fp
22774     FD 14 42 F5 | 	or	arg02, result1
22778     14 4E 85 F1 | 	sub	fp, #20
2277c     A7 14 62 FC | 	wrlong	arg02, fp
22780     10 4E 05 F1 | 	add	fp, #16
22784     A7 14 02 FB | 	rdlong	arg02, fp
22788     0B 14 66 F0 | 	shl	arg02, #11
2278c     04 4E 85 F1 | 	sub	fp, #4
22790     A7 FA 01 FB | 	rdlong	result1, fp
22794     05 FA 65 F0 | 	shl	result1, #5
22798     FD 14 42 F5 | 	or	arg02, result1
2279c     04 4E 85 F1 | 	sub	fp, #4
227a0     A7 FA 01 FB | 	rdlong	result1, fp
227a4     FD 14 42 F5 | 	or	arg02, result1
227a8     04 4E 85 F1 | 	sub	fp, #4
227ac     A7 14 62 FC | 	wrlong	arg02, fp
227b0                 | ' 
227b0                 | '     now = time(0);
227b0                 | '     _gmtime_r (&now, &date);
227b0                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
227b0                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
227b0                 | '     return (ffdate << 16) | fftime;
227b0     04 4E 85 F1 | 	sub	fp, #4
227b4     A7 FA 01 FB | 	rdlong	result1, fp
227b8     10 FA 65 F0 | 	shl	result1, #16
227bc     08 4E 85 F1 | 	sub	fp, #8
227c0     0A FB 41 F5 | 	or	result1, arg02
227c4     A7 F0 03 F6 | 	mov	ptra, fp
227c8     B2 00 A0 FD | 	call	#popregs_
227cc                 | _fatfs_cc__get_fattime_ret
227cc     2D 00 64 FD | 	ret
227d0                 | 
227d0                 | _fatfs_cc_unixtime_0769
227d0     00 4A 05 F6 | 	mov	COUNT_, #0
227d4     A8 00 A0 FD | 	call	#pushregs_
227d8     34 F0 07 F1 | 	add	ptra, #52
227dc     04 4E 05 F1 | 	add	fp, #4
227e0     A7 12 62 FC | 	wrlong	arg01, fp
227e4     04 4E 05 F1 | 	add	fp, #4
227e8     A7 14 62 FC | 	wrlong	arg02, fp
227ec     04 4E 85 F1 | 	sub	fp, #4
227f0     A7 14 02 FB | 	rdlong	arg02, fp
227f4     09 14 46 F0 | 	shr	arg02, #9
227f8     7F 14 06 F5 | 	and	arg02, #127
227fc     50 FA 05 F6 | 	mov	result1, #80
22800     0A FB 01 F1 | 	add	result1, arg02
22804     20 4E 05 F1 | 	add	fp, #32
22808     A7 FA 61 FC | 	wrlong	result1, fp
2280c     20 4E 85 F1 | 	sub	fp, #32
22810     A7 FA 01 FB | 	rdlong	result1, fp
22814     05 FA 45 F0 | 	shr	result1, #5
22818     FD FA 41 F8 | 	getnib	result1, result1, #0
2281c     01 FA 85 F1 | 	sub	result1, #1
22820     1C 4E 05 F1 | 	add	fp, #28
22824     A7 FA 61 FC | 	wrlong	result1, fp
22828     1C 4E 85 F1 | 	sub	fp, #28
2282c     A7 FA 01 FB | 	rdlong	result1, fp
22830     1F FA 05 F5 | 	and	result1, #31
22834     18 4E 05 F1 | 	add	fp, #24
22838     A7 FA 61 FC | 	wrlong	result1, fp
2283c     14 4E 85 F1 | 	sub	fp, #20
22840     A7 FA 01 FB | 	rdlong	result1, fp
22844     0B FA 45 F0 | 	shr	result1, #11
22848     1F FA 05 F5 | 	and	result1, #31
2284c     10 4E 05 F1 | 	add	fp, #16
22850     A7 FA 61 FC | 	wrlong	result1, fp
22854     10 4E 85 F1 | 	sub	fp, #16
22858     A7 FA 01 FB | 	rdlong	result1, fp
2285c     05 FA 45 F0 | 	shr	result1, #5
22860     3F FA 05 F5 | 	and	result1, #63
22864     0C 4E 05 F1 | 	add	fp, #12
22868     A7 FA 61 FC | 	wrlong	result1, fp
2286c     0C 4E 85 F1 | 	sub	fp, #12
22870     A7 14 02 FB | 	rdlong	arg02, fp
22874     1F 14 06 F5 | 	and	arg02, #31
22878     01 14 66 F0 | 	shl	arg02, #1
2287c     08 4E 05 F1 | 	add	fp, #8
22880     A7 14 62 FC | 	wrlong	arg02, fp
22884     A7 12 02 F6 | 	mov	arg01, fp
22888     10 4E 85 F1 | 	sub	fp, #16
2288c     4C FA BF FD | 	call	#_fatfs_cc_mktime
22890     0C 4E 05 F1 | 	add	fp, #12
22894     A7 FA 61 FC | 	wrlong	result1, fp
22898                 | ' 
22898                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
22898                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
22898                 | '     date.tm_mday = (dosdate & 0x1f);
22898                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
22898                 | '     date.tm_min = (dostime >> 5) & 0x3f;
22898                 | '     date.tm_sec = (dostime & 0x1f) << 1;
22898                 | ' 
22898                 | '     t = mktime(&date);
22898                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22898                 | '     return t;
22898     0C 4E 85 F1 | 	sub	fp, #12
2289c     A7 F0 03 F6 | 	mov	ptra, fp
228a0     B2 00 A0 FD | 	call	#popregs_
228a4                 | _fatfs_cc_unixtime_0769_ret
228a4     2D 00 64 FD | 	ret
228a8                 | 
228a8                 | _fatfs_cc__set_dos_error_0771
228a8     09 01 02 F6 | 	mov	_var01, arg01
228ac                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
228ac                 | '     switch (derr) {
228ac     14 00 26 F3 | 	fle	_var01, #20
228b0     30 00 62 FD | 	jmprel	_var01
228b4                 | LR__3800
228b4     50 00 90 FD | 	jmp	#LR__3801
228b8     84 00 90 FD | 	jmp	#LR__3815
228bc     80 00 90 FD | 	jmp	#LR__3816
228c0     7C 00 90 FD | 	jmp	#LR__3817
228c4     48 00 90 FD | 	jmp	#LR__3802
228c8     44 00 90 FD | 	jmp	#LR__3803
228cc     40 00 90 FD | 	jmp	#LR__3804
228d0     44 00 90 FD | 	jmp	#LR__3805
228d4     48 00 90 FD | 	jmp	#LR__3807
228d8     54 00 90 FD | 	jmp	#LR__3810
228dc     38 00 90 FD | 	jmp	#LR__3806
228e0     4C 00 90 FD | 	jmp	#LR__3811
228e4     48 00 90 FD | 	jmp	#LR__3812
228e8     44 00 90 FD | 	jmp	#LR__3813
228ec     50 00 90 FD | 	jmp	#LR__3818
228f0     4C 00 90 FD | 	jmp	#LR__3818
228f4     48 00 90 FD | 	jmp	#LR__3818
228f8     2C 00 90 FD | 	jmp	#LR__3808
228fc     38 00 90 FD | 	jmp	#LR__3814
22900     2C 00 90 FD | 	jmp	#LR__3809
22904     38 00 90 FD | 	jmp	#LR__3818
22908                 | LR__3801
22908     00 02 06 F6 | 	mov	_var02, #0
2290c                 | '         r = 0;
2290c                 | '         break;
2290c     34 00 90 FD | 	jmp	#LR__3819
22910                 | LR__3802
22910                 | LR__3803
22910                 | LR__3804
22910     04 02 06 F6 | 	mov	_var02, #4
22914                 | '         r =  4 ;
22914                 | '         break;
22914     2C 00 90 FD | 	jmp	#LR__3819
22918                 | LR__3805
22918                 | LR__3806
22918     06 02 06 F6 | 	mov	_var02, #6
2291c                 | '         r =  6 ;
2291c                 | '         break;
2291c     24 00 90 FD | 	jmp	#LR__3819
22920                 | LR__3807
22920     09 02 06 F6 | 	mov	_var02, #9
22924                 | '         r =  9 ;
22924                 | '         break;
22924     1C 00 90 FD | 	jmp	#LR__3819
22928                 | LR__3808
22928     07 02 06 F6 | 	mov	_var02, #7
2292c                 | '         r =  7 ;
2292c                 | '         break;
2292c     14 00 90 FD | 	jmp	#LR__3819
22930                 | LR__3809
22930                 | LR__3810
22930                 | LR__3811
22930                 | LR__3812
22930                 | LR__3813
22930     0A 02 06 F6 | 	mov	_var02, #10
22934                 | '         r =  10 ;
22934                 | '         break;
22934     0C 00 90 FD | 	jmp	#LR__3819
22938                 | LR__3814
22938     0B 02 06 F6 | 	mov	_var02, #11
2293c                 | '         r =  11 ;
2293c                 | '         break;
2293c     04 00 90 FD | 	jmp	#LR__3819
22940                 | LR__3815
22940                 | LR__3816
22940                 | LR__3817
22940                 | LR__3818
22940     0C 02 06 F6 | 	mov	_var02, #12
22944                 | '         r =  12 ;
22944                 | '         break;
22944                 | LR__3819
22944                 | '     }
22944                 | '     return _seterror(r);
22944     00 02 4E F2 | 	cmps	_var02, #0 wz
22948     20 E8 05 F1 | 	add	ptr___system__dat__, #32
2294c     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
22950     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
22954     01 FA 65 56 |  if_ne	neg	result1, #1
22958     00 FA 05 A6 |  if_e	mov	result1, #0
2295c                 | _fatfs_cc__set_dos_error_0771_ret
2295c     2D 00 64 FD | 	ret
22960                 | 
22960                 | _fatfs_cc_v_creat
22960     04 4A 05 F6 | 	mov	COUNT_, #4
22964     A8 00 A0 FD | 	call	#pushregs_
22968     09 1F 02 F6 | 	mov	local01, arg01
2296c     0A 21 02 F6 | 	mov	local02, arg02
22970     03 00 00 FF 
22974     3C 12 06 F6 | 	mov	arg01, ##1596
22978                 | '     return _gc_alloc(size);
22978     10 14 06 F6 | 	mov	arg02, #16
2297c     2C 60 BF FD | 	call	#__system___gc_doalloc
22980     FD 22 0A F6 | 	mov	local03, result1 wz
22984                 | '       return _seterror( 7 );
22984     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22988     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2298c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22990     01 FA 65 A6 |  if_e	neg	result1, #1
22994     58 00 90 AD |  if_e	jmp	#LR__3821
22998     11 13 02 F6 | 	mov	arg01, local03
2299c     00 14 06 F6 | 	mov	arg02, #0
229a0     03 00 00 FF 
229a4     3C 16 06 F6 | 	mov	arg03, ##1596
229a8     98 00 A0 FD | 	call	#\builtin_bytefill_
229ac     02 00 00 FF 
229b0     14 22 06 F1 | 	add	local03, ##1044
229b4     11 13 02 F6 | 	mov	arg01, local03
229b8     02 00 00 FF 
229bc     14 22 86 F1 | 	sub	local03, ##1044
229c0     10 15 02 F6 | 	mov	arg02, local02
229c4     07 16 06 F6 | 	mov	arg03, #7
229c8     B4 CC BF FD | 	call	#_fatfs_cc_f_open
229cc     FD 24 0A F6 | 	mov	local04, result1 wz
229d0     14 00 90 AD |  if_e	jmp	#LR__3820
229d4     11 13 02 F6 | 	mov	arg01, local03
229d8                 | '     return _gc_free(ptr);
229d8     DC 60 BF FD | 	call	#__system___gc_free
229dc                 | '     free(f);
229dc                 | '     return _set_dos_error(r);
229dc     12 13 02 F6 | 	mov	arg01, local04
229e0     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0771
229e4     08 00 90 FD | 	jmp	#LR__3821
229e8                 | LR__3820
229e8     0F 23 62 FC | 	wrlong	local03, local01
229ec                 | '   }
229ec                 | '   fil->vfsdata = f;
229ec                 | '   return 0;
229ec     00 FA 05 F6 | 	mov	result1, #0
229f0                 | LR__3821
229f0     A7 F0 03 F6 | 	mov	ptra, fp
229f4     B2 00 A0 FD | 	call	#popregs_
229f8                 | _fatfs_cc_v_creat_ret
229f8     2D 00 64 FD | 	ret
229fc                 | 
229fc                 | _fatfs_cc_v_close
229fc     02 4A 05 F6 | 	mov	COUNT_, #2
22a00     A8 00 A0 FD | 	call	#pushregs_
22a04     09 1F 02 FB | 	rdlong	local01, arg01
22a08     02 00 00 FF 
22a0c     14 1E 06 F1 | 	add	local01, ##1044
22a10     0F 13 02 F6 | 	mov	arg01, local01
22a14     02 00 00 FF 
22a18     14 1E 86 F1 | 	sub	local01, ##1044
22a1c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
22a20     FD 20 02 F6 | 	mov	local02, result1
22a24     0F 13 02 F6 | 	mov	arg01, local01
22a28                 | '     return _gc_free(ptr);
22a28     8C 60 BF FD | 	call	#__system___gc_free
22a2c                 | '     FAT_FIL *f = fil->vfsdata;
22a2c                 | '     r=f_close(&f->fil);
22a2c                 | '     free(f);
22a2c                 | '     return _set_dos_error(r);
22a2c     10 13 02 F6 | 	mov	arg01, local02
22a30     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0771
22a34     A7 F0 03 F6 | 	mov	ptra, fp
22a38     B2 00 A0 FD | 	call	#popregs_
22a3c                 | _fatfs_cc_v_close_ret
22a3c     2D 00 64 FD | 	ret
22a40                 | 
22a40                 | _fatfs_cc_v_opendir
22a40     04 4A 05 F6 | 	mov	COUNT_, #4
22a44     A8 00 A0 FD | 	call	#pushregs_
22a48     09 1F 02 F6 | 	mov	local01, arg01
22a4c     0A 21 02 F6 | 	mov	local02, arg02
22a50     30 12 06 F6 | 	mov	arg01, #48
22a54                 | '     return _gc_alloc(size);
22a54     10 14 06 F6 | 	mov	arg02, #16
22a58     50 5F BF FD | 	call	#__system___gc_doalloc
22a5c     FD 22 0A F6 | 	mov	local03, result1 wz
22a60                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22a60                 | '       return _seterror( 7 );
22a60     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22a64     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22a68     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22a6c     01 FA 65 A6 |  if_e	neg	result1, #1
22a70     34 00 90 AD |  if_e	jmp	#LR__3831
22a74     10 15 02 F6 | 	mov	arg02, local02
22a78     11 13 02 F6 | 	mov	arg01, local03
22a7c     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
22a80     FD 24 0A F6 | 	mov	local04, result1 wz
22a84     14 00 90 AD |  if_e	jmp	#LR__3830
22a88     11 13 02 F6 | 	mov	arg01, local03
22a8c                 | '     return _gc_free(ptr);
22a8c     28 60 BF FD | 	call	#__system___gc_free
22a90                 | '         free(f);
22a90                 | '         return _set_dos_error(r);
22a90     12 13 02 F6 | 	mov	arg01, local04
22a94     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0771
22a98     0C 00 90 FD | 	jmp	#LR__3831
22a9c                 | LR__3830
22a9c     04 1E 06 F1 | 	add	local01, #4
22aa0     0F 23 62 FC | 	wrlong	local03, local01
22aa4                 | '     }
22aa4                 | '     dir->vfsdata = f;
22aa4                 | '     return 0;
22aa4     00 FA 05 F6 | 	mov	result1, #0
22aa8                 | LR__3831
22aa8     A7 F0 03 F6 | 	mov	ptra, fp
22aac     B2 00 A0 FD | 	call	#popregs_
22ab0                 | _fatfs_cc_v_opendir_ret
22ab0     2D 00 64 FD | 	ret
22ab4                 | 
22ab4                 | _fatfs_cc_v_closedir
22ab4     02 4A 05 F6 | 	mov	COUNT_, #2
22ab8     A8 00 A0 FD | 	call	#pushregs_
22abc     04 12 06 F1 | 	add	arg01, #4
22ac0     09 1F 02 FB | 	rdlong	local01, arg01
22ac4     0F 13 02 F6 | 	mov	arg01, local01
22ac8     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
22acc     FD 20 02 F6 | 	mov	local02, result1
22ad0     0F 13 02 F6 | 	mov	arg01, local01
22ad4                 | '     return _gc_free(ptr);
22ad4     E0 5F BF FD | 	call	#__system___gc_free
22ad8     00 20 0E F2 | 	cmp	local02, #0 wz
22adc     10 13 02 56 |  if_ne	mov	arg01, local02
22ae0     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0771
22ae4                 | '     return r;
22ae4     10 FB 01 F6 | 	mov	result1, local02
22ae8     A7 F0 03 F6 | 	mov	ptra, fp
22aec     B2 00 A0 FD | 	call	#popregs_
22af0                 | _fatfs_cc_v_closedir_ret
22af0     2D 00 64 FD | 	ret
22af4                 | 
22af4                 | _fatfs_cc_v_readdir
22af4     01 4A 05 F6 | 	mov	COUNT_, #1
22af8     A8 00 A0 FD | 	call	#pushregs_
22afc     2C F1 07 F1 | 	add	ptra, #300
22b00     04 4E 05 F1 | 	add	fp, #4
22b04     A7 12 62 FC | 	wrlong	arg01, fp
22b08     04 4E 05 F1 | 	add	fp, #4
22b0c     A7 14 62 FC | 	wrlong	arg02, fp
22b10     04 4E 85 F1 | 	sub	fp, #4
22b14     A7 16 02 FB | 	rdlong	arg03, fp
22b18     04 16 06 F1 | 	add	arg03, #4
22b1c     0B 13 02 FB | 	rdlong	arg01, arg03
22b20     08 4E 05 F1 | 	add	fp, #8
22b24     A7 14 02 F6 | 	mov	arg02, fp
22b28     0C 4E 85 F1 | 	sub	fp, #12
22b2c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
22b30     28 4F 05 F1 | 	add	fp, #296
22b34     A7 FA 61 FC | 	wrlong	result1, fp
22b38     28 4F 85 F1 | 	sub	fp, #296
22b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
22b40     14 00 90 AD |  if_e	jmp	#LR__3840
22b44                 | '         return _set_dos_error(r);
22b44     28 4F 05 F1 | 	add	fp, #296
22b48     A7 12 02 FB | 	rdlong	arg01, fp
22b4c     28 4F 85 F1 | 	sub	fp, #296
22b50     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0771
22b54     C4 00 90 FD | 	jmp	#LR__3843
22b58                 | LR__3840
22b58     28 4E 05 F1 | 	add	fp, #40
22b5c     A7 16 CA FA | 	rdbyte	arg03, fp wz
22b60     28 4E 85 F1 | 	sub	fp, #40
22b64                 | '         return -1;
22b64     01 FA 65 A6 |  if_e	neg	result1, #1
22b68     B0 00 90 AD |  if_e	jmp	#LR__3843
22b6c     08 4E 05 F1 | 	add	fp, #8
22b70     A7 12 02 FB | 	rdlong	arg01, fp
22b74     20 4E 05 F1 | 	add	fp, #32
22b78     A7 14 02 F6 | 	mov	arg02, fp
22b7c     28 4E 85 F1 | 	sub	fp, #40
22b80     3F 16 06 F6 | 	mov	arg03, #63
22b84     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
22b88     08 4E 05 F1 | 	add	fp, #8
22b8c     A7 16 02 FB | 	rdlong	arg03, fp
22b90     3F 16 06 F1 | 	add	arg03, #63
22b94     0B 01 48 FC | 	wrbyte	#0, arg03
22b98     0C 4E 05 F1 | 	add	fp, #12
22b9c     A7 16 C2 FA | 	rdbyte	arg03, fp
22ba0     14 4E 85 F1 | 	sub	fp, #20
22ba4     10 16 CE F7 | 	test	arg03, #16 wz
22ba8     18 00 90 AD |  if_e	jmp	#LR__3841
22bac     08 4E 05 F1 | 	add	fp, #8
22bb0     A7 16 02 FB | 	rdlong	arg03, fp
22bb4     08 4E 85 F1 | 	sub	fp, #8
22bb8     50 16 06 F1 | 	add	arg03, #80
22bbc     0B 03 48 FC | 	wrbyte	#1, arg03
22bc0     14 00 90 FD | 	jmp	#LR__3842
22bc4                 | LR__3841
22bc4     08 4E 05 F1 | 	add	fp, #8
22bc8     A7 16 02 FB | 	rdlong	arg03, fp
22bcc     08 4E 85 F1 | 	sub	fp, #8
22bd0     50 16 06 F1 | 	add	arg03, #80
22bd4     0B 01 48 FC | 	wrbyte	#0, arg03
22bd8                 | LR__3842
22bd8     08 4E 05 F1 | 	add	fp, #8
22bdc     A7 16 02 FB | 	rdlong	arg03, fp
22be0     04 4E 05 F1 | 	add	fp, #4
22be4     A7 14 02 FB | 	rdlong	arg02, fp
22be8     48 16 06 F1 | 	add	arg03, #72
22bec     0B 15 62 FC | 	wrlong	arg02, arg03
22bf0     04 4E 85 F1 | 	sub	fp, #4
22bf4     A7 1E 02 FB | 	rdlong	local01, fp
22bf8     08 4E 05 F1 | 	add	fp, #8
22bfc     A7 12 E2 FA | 	rdword	arg01, fp
22c00     02 4E 05 F1 | 	add	fp, #2
22c04     A7 14 E2 FA | 	rdword	arg02, fp
22c08     12 4E 85 F1 | 	sub	fp, #18
22c0c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0769
22c10     4C 1E 06 F1 | 	add	local01, #76
22c14     0F FB 61 FC | 	wrlong	result1, local01
22c18                 | '         ent->d_type =  (0) ;
22c18                 | '     }
22c18                 | '     ent->d_size = finfo.fsize;
22c18                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
22c18                 | '     return 0;
22c18     00 FA 05 F6 | 	mov	result1, #0
22c1c                 | LR__3843
22c1c     A7 F0 03 F6 | 	mov	ptra, fp
22c20     B2 00 A0 FD | 	call	#popregs_
22c24                 | _fatfs_cc_v_readdir_ret
22c24     2D 00 64 FD | 	ret
22c28                 | 
22c28                 | _fatfs_cc_v_stat
22c28     03 4A 05 F6 | 	mov	COUNT_, #3
22c2c     A8 00 A0 FD | 	call	#pushregs_
22c30     30 F1 07 F1 | 	add	ptra, #304
22c34     04 4E 05 F1 | 	add	fp, #4
22c38     A7 12 62 FC | 	wrlong	arg01, fp
22c3c     04 4E 05 F1 | 	add	fp, #4
22c40     A7 14 62 FC | 	wrlong	arg02, fp
22c44     08 4E 85 F1 | 	sub	fp, #8
22c48     0A 13 02 F6 | 	mov	arg01, arg02
22c4c     00 14 06 F6 | 	mov	arg02, #0
22c50     30 16 06 F6 | 	mov	arg03, #48
22c54     98 00 A0 FD | 	call	#\builtin_bytefill_
22c58     04 4E 05 F1 | 	add	fp, #4
22c5c     A7 FA 01 FB | 	rdlong	result1, fp
22c60     04 4E 85 F1 | 	sub	fp, #4
22c64     FD FA C9 FA | 	rdbyte	result1, result1 wz
22c68     2C 00 90 AD |  if_e	jmp	#LR__3850
22c6c     04 4E 05 F1 | 	add	fp, #4
22c70     A7 FA 01 FB | 	rdlong	result1, fp
22c74     04 4E 85 F1 | 	sub	fp, #4
22c78     FD FA C1 FA | 	rdbyte	result1, result1
22c7c     2E FA 0D F2 | 	cmp	result1, #46 wz
22c80     04 4E 05 A1 |  if_e	add	fp, #4
22c84     A7 1E 02 AB |  if_e	rdlong	local01, fp
22c88     04 4E 85 A1 |  if_e	sub	fp, #4
22c8c     01 1E 06 A1 |  if_e	add	local01, #1
22c90     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
22c94     18 00 90 5D |  if_ne	jmp	#LR__3851
22c98                 | LR__3850
22c98     18 4E 05 F1 | 	add	fp, #24
22c9c     A7 20 48 FC | 	wrbyte	#16, fp
22ca0     0C 4E 85 F1 | 	sub	fp, #12
22ca4     A7 00 68 FC | 	wrlong	#0, fp
22ca8     0C 4E 85 F1 | 	sub	fp, #12
22cac     24 00 90 FD | 	jmp	#LR__3852
22cb0                 | LR__3851
22cb0     04 4E 05 F1 | 	add	fp, #4
22cb4     A7 12 02 FB | 	rdlong	arg01, fp
22cb8     0C 4E 05 F1 | 	add	fp, #12
22cbc     A7 14 02 F6 | 	mov	arg02, fp
22cc0     10 4E 85 F1 | 	sub	fp, #16
22cc4     AC EB BF FD | 	call	#_fatfs_cc_f_stat
22cc8     0C 4E 05 F1 | 	add	fp, #12
22ccc     A7 FA 61 FC | 	wrlong	result1, fp
22cd0     0C 4E 85 F1 | 	sub	fp, #12
22cd4                 | LR__3852
22cd4     0C 4E 05 F1 | 	add	fp, #12
22cd8     A7 20 0A FB | 	rdlong	local02, fp wz
22cdc     0C 4E 85 F1 | 	sub	fp, #12
22ce0     14 00 90 AD |  if_e	jmp	#LR__3853
22ce4                 | '         return _set_dos_error(r);
22ce4     0C 4E 05 F1 | 	add	fp, #12
22ce8     A7 12 02 FB | 	rdlong	arg01, fp
22cec     0C 4E 85 F1 | 	sub	fp, #12
22cf0     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0771
22cf4     14 01 90 FD | 	jmp	#LR__3854
22cf8                 | LR__3853
22cf8     2C 4F 05 F1 | 	add	fp, #300
22cfc     A7 48 6A FC | 	wrlong	#292, fp
22d00     14 4F 85 F1 | 	sub	fp, #276
22d04     A7 22 C2 FA | 	rdbyte	local03, fp
22d08     18 4E 85 F1 | 	sub	fp, #24
22d0c     01 22 CE F7 | 	test	local03, #1 wz
22d10     2C 4F 05 51 |  if_ne	add	fp, #300
22d14     A7 22 02 5B |  if_ne	rdlong	local03, fp
22d18     92 22 46 55 |  if_ne	or	local03, #146
22d1c     A7 22 62 5C |  if_ne	wrlong	local03, fp
22d20     2C 4F 85 51 |  if_ne	sub	fp, #300
22d24     18 4E 05 F1 | 	add	fp, #24
22d28     A7 22 C2 FA | 	rdbyte	local03, fp
22d2c     18 4E 85 F1 | 	sub	fp, #24
22d30     10 22 CE F7 | 	test	local03, #16 wz
22d34     2C 4F 05 51 |  if_ne	add	fp, #300
22d38     A7 22 02 5B |  if_ne	rdlong	local03, fp
22d3c     08 00 00 5F 
22d40     49 22 46 55 |  if_ne	or	local03, ##4169
22d44     A7 22 62 5C |  if_ne	wrlong	local03, fp
22d48     2C 4F 85 51 |  if_ne	sub	fp, #300
22d4c     08 4E 05 F1 | 	add	fp, #8
22d50     A7 22 02 FB | 	rdlong	local03, fp
22d54     24 4F 05 F1 | 	add	fp, #292
22d58     A7 20 02 FB | 	rdlong	local02, fp
22d5c     08 22 06 F1 | 	add	local03, #8
22d60     11 21 62 FC | 	wrlong	local02, local03
22d64     24 4F 85 F1 | 	sub	fp, #292
22d68     A7 22 02 FB | 	rdlong	local03, fp
22d6c     0C 22 06 F1 | 	add	local03, #12
22d70     11 03 68 FC | 	wrlong	#1, local03
22d74     A7 22 02 FB | 	rdlong	local03, fp
22d78     08 4E 05 F1 | 	add	fp, #8
22d7c     A7 20 02 FB | 	rdlong	local02, fp
22d80     18 22 06 F1 | 	add	local03, #24
22d84     11 21 62 FC | 	wrlong	local02, local03
22d88     08 4E 85 F1 | 	sub	fp, #8
22d8c     A7 22 02 FB | 	rdlong	local03, fp
22d90     1C 22 06 F1 | 	add	local03, #28
22d94     01 00 80 FF 
22d98     11 01 68 FC | 	wrlong	##512, local03
22d9c     A7 20 02 FB | 	rdlong	local02, fp
22da0     10 23 02 F6 | 	mov	local03, local02
22da4     18 20 06 F1 | 	add	local02, #24
22da8     10 21 02 FB | 	rdlong	local02, local02
22dac     FF 21 06 F1 | 	add	local02, #511
22db0     10 21 52 F6 | 	abs	local02, local02 wc
22db4     09 20 46 F0 | 	shr	local02, #9
22db8     10 21 82 F6 | 	negc	local02, local02
22dbc     20 22 06 F1 | 	add	local03, #32
22dc0     11 21 62 FC | 	wrlong	local02, local03
22dc4     A7 20 02 FB | 	rdlong	local02, fp
22dc8     10 23 02 F6 | 	mov	local03, local02
22dcc     10 1F 02 F6 | 	mov	local01, local02
22dd0     0C 4E 05 F1 | 	add	fp, #12
22dd4     A7 12 E2 FA | 	rdword	arg01, fp
22dd8     02 4E 05 F1 | 	add	fp, #2
22ddc     A7 14 E2 FA | 	rdword	arg02, fp
22de0     16 4E 85 F1 | 	sub	fp, #22
22de4     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0769
22de8     2C 1E 06 F1 | 	add	local01, #44
22dec     0F FB 61 FC | 	wrlong	result1, local01
22df0     28 20 06 F1 | 	add	local02, #40
22df4     10 FB 61 FC | 	wrlong	result1, local02
22df8     24 22 06 F1 | 	add	local03, #36
22dfc     11 FB 61 FC | 	wrlong	result1, local03
22e00                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
22e00                 | '     }
22e00                 | '     buf->st_mode = mode;
22e00                 | '     buf->st_nlink = 1;
22e00                 | '     buf->st_size = finfo.fsize;
22e00                 | '     buf->st_blksize = 512;
22e00                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
22e00                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
22e00                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
22e00                 | '     return r;
22e00     0C 4E 05 F1 | 	add	fp, #12
22e04     A7 FA 01 FB | 	rdlong	result1, fp
22e08     0C 4E 85 F1 | 	sub	fp, #12
22e0c                 | LR__3854
22e0c     A7 F0 03 F6 | 	mov	ptra, fp
22e10     B2 00 A0 FD | 	call	#popregs_
22e14                 | _fatfs_cc_v_stat_ret
22e14     2D 00 64 FD | 	ret
22e18                 | 
22e18                 | _fatfs_cc_v_read
22e18     00 4A 05 F6 | 	mov	COUNT_, #0
22e1c     A8 00 A0 FD | 	call	#pushregs_
22e20     1C F0 07 F1 | 	add	ptra, #28
22e24     04 4E 05 F1 | 	add	fp, #4
22e28     A7 12 62 FC | 	wrlong	arg01, fp
22e2c     04 4E 05 F1 | 	add	fp, #4
22e30     A7 14 62 FC | 	wrlong	arg02, fp
22e34     04 4E 05 F1 | 	add	fp, #4
22e38     A7 16 62 FC | 	wrlong	arg03, fp
22e3c     08 4E 85 F1 | 	sub	fp, #8
22e40     A7 12 02 FB | 	rdlong	arg01, fp
22e44     09 13 0A FB | 	rdlong	arg01, arg01 wz
22e48     0C 4E 05 F1 | 	add	fp, #12
22e4c     A7 12 62 FC | 	wrlong	arg01, fp
22e50     10 4E 85 F1 | 	sub	fp, #16
22e54                 | '         return _seterror( 5 );
22e54     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22e58     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22e5c     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22e60     01 FA 65 A6 |  if_e	neg	result1, #1
22e64     B8 00 90 AD |  if_e	jmp	#LR__3862
22e68     10 4E 05 F1 | 	add	fp, #16
22e6c     A7 12 02 FB | 	rdlong	arg01, fp
22e70     02 00 00 FF 
22e74     14 12 06 F1 | 	add	arg01, ##1044
22e78     08 4E 85 F1 | 	sub	fp, #8
22e7c     A7 14 02 FB | 	rdlong	arg02, fp
22e80     04 4E 05 F1 | 	add	fp, #4
22e84     A7 16 02 FB | 	rdlong	arg03, fp
22e88     0C 4E 05 F1 | 	add	fp, #12
22e8c     A7 18 02 F6 | 	mov	arg04, fp
22e90     18 4E 85 F1 | 	sub	fp, #24
22e94     C4 CE BF FD | 	call	#_fatfs_cc_f_read
22e98     14 4E 05 F1 | 	add	fp, #20
22e9c     A7 FA 61 FC | 	wrlong	result1, fp
22ea0     14 4E 85 F1 | 	sub	fp, #20
22ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
22ea8     34 00 90 AD |  if_e	jmp	#LR__3860
22eac     04 4E 05 F1 | 	add	fp, #4
22eb0     A7 18 02 FB | 	rdlong	arg04, fp
22eb4     0C 17 02 F6 | 	mov	arg03, arg04
22eb8     08 18 06 F1 | 	add	arg04, #8
22ebc     0C 19 02 FB | 	rdlong	arg04, arg04
22ec0     20 18 46 F5 | 	or	arg04, #32
22ec4     08 16 06 F1 | 	add	arg03, #8
22ec8     0B 19 62 FC | 	wrlong	arg04, arg03
22ecc                 | '         fil->state |=  (0x20) ;
22ecc                 | '         return _set_dos_error(r);
22ecc     10 4E 05 F1 | 	add	fp, #16
22ed0     A7 12 02 FB | 	rdlong	arg01, fp
22ed4     14 4E 85 F1 | 	sub	fp, #20
22ed8     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
22edc     40 00 90 FD | 	jmp	#LR__3862
22ee0                 | LR__3860
22ee0     18 4E 05 F1 | 	add	fp, #24
22ee4     A7 FA 09 FB | 	rdlong	result1, fp wz
22ee8     18 4E 85 F1 | 	sub	fp, #24
22eec     24 00 90 5D |  if_ne	jmp	#LR__3861
22ef0     04 4E 05 F1 | 	add	fp, #4
22ef4     A7 FA 01 FB | 	rdlong	result1, fp
22ef8     FD 18 02 F6 | 	mov	arg04, result1
22efc     04 4E 85 F1 | 	sub	fp, #4
22f00     08 FA 05 F1 | 	add	result1, #8
22f04     FD FA 01 FB | 	rdlong	result1, result1
22f08     10 FA 45 F5 | 	or	result1, #16
22f0c     08 18 06 F1 | 	add	arg04, #8
22f10     0C FB 61 FC | 	wrlong	result1, arg04
22f14                 | LR__3861
22f14                 | '         fil->state |=  (0x10) ;
22f14                 | '     }
22f14                 | '     return x;
22f14     18 4E 05 F1 | 	add	fp, #24
22f18     A7 FA 01 FB | 	rdlong	result1, fp
22f1c     18 4E 85 F1 | 	sub	fp, #24
22f20                 | LR__3862
22f20     A7 F0 03 F6 | 	mov	ptra, fp
22f24     B2 00 A0 FD | 	call	#popregs_
22f28                 | _fatfs_cc_v_read_ret
22f28     2D 00 64 FD | 	ret
22f2c                 | 
22f2c                 | _fatfs_cc_v_write
22f2c     00 4A 05 F6 | 	mov	COUNT_, #0
22f30     A8 00 A0 FD | 	call	#pushregs_
22f34     1C F0 07 F1 | 	add	ptra, #28
22f38     04 4E 05 F1 | 	add	fp, #4
22f3c     A7 12 62 FC | 	wrlong	arg01, fp
22f40     04 4E 05 F1 | 	add	fp, #4
22f44     A7 14 62 FC | 	wrlong	arg02, fp
22f48     04 4E 05 F1 | 	add	fp, #4
22f4c     A7 16 62 FC | 	wrlong	arg03, fp
22f50     08 4E 85 F1 | 	sub	fp, #8
22f54     A7 12 02 FB | 	rdlong	arg01, fp
22f58     09 13 0A FB | 	rdlong	arg01, arg01 wz
22f5c     0C 4E 05 F1 | 	add	fp, #12
22f60     A7 12 62 FC | 	wrlong	arg01, fp
22f64     10 4E 85 F1 | 	sub	fp, #16
22f68                 | '         return _seterror( 5 );
22f68     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
22f6c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
22f70     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
22f74     01 FA 65 A6 |  if_e	neg	result1, #1
22f78     84 00 90 AD |  if_e	jmp	#LR__3871
22f7c     10 4E 05 F1 | 	add	fp, #16
22f80     A7 12 02 FB | 	rdlong	arg01, fp
22f84     02 00 00 FF 
22f88     14 12 06 F1 | 	add	arg01, ##1044
22f8c     08 4E 85 F1 | 	sub	fp, #8
22f90     A7 14 02 FB | 	rdlong	arg02, fp
22f94     04 4E 05 F1 | 	add	fp, #4
22f98     A7 16 02 FB | 	rdlong	arg03, fp
22f9c     0C 4E 05 F1 | 	add	fp, #12
22fa0     A7 18 02 F6 | 	mov	arg04, fp
22fa4     18 4E 85 F1 | 	sub	fp, #24
22fa8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
22fac     14 4E 05 F1 | 	add	fp, #20
22fb0     A7 FA 61 FC | 	wrlong	result1, fp
22fb4     14 4E 85 F1 | 	sub	fp, #20
22fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
22fbc     34 00 90 AD |  if_e	jmp	#LR__3870
22fc0     04 4E 05 F1 | 	add	fp, #4
22fc4     A7 18 02 FB | 	rdlong	arg04, fp
22fc8     0C 17 02 F6 | 	mov	arg03, arg04
22fcc     08 18 06 F1 | 	add	arg04, #8
22fd0     0C 19 02 FB | 	rdlong	arg04, arg04
22fd4     20 18 46 F5 | 	or	arg04, #32
22fd8     08 16 06 F1 | 	add	arg03, #8
22fdc     0B 19 62 FC | 	wrlong	arg04, arg03
22fe0                 | '         fil->state |=  (0x20) ;
22fe0                 | '         return _set_dos_error(r);
22fe0     10 4E 05 F1 | 	add	fp, #16
22fe4     A7 12 02 FB | 	rdlong	arg01, fp
22fe8     14 4E 85 F1 | 	sub	fp, #20
22fec     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
22ff0     0C 00 90 FD | 	jmp	#LR__3871
22ff4                 | LR__3870
22ff4                 | '     }
22ff4                 | '     return x;
22ff4     18 4E 05 F1 | 	add	fp, #24
22ff8     A7 FA 01 FB | 	rdlong	result1, fp
22ffc     18 4E 85 F1 | 	sub	fp, #24
23000                 | LR__3871
23000     A7 F0 03 F6 | 	mov	ptra, fp
23004     B2 00 A0 FD | 	call	#popregs_
23008                 | _fatfs_cc_v_write_ret
23008     2D 00 64 FD | 	ret
2300c                 | 
2300c                 | _fatfs_cc_v_lseek
2300c     04 4A 05 F6 | 	mov	COUNT_, #4
23010     A8 00 A0 FD | 	call	#pushregs_
23014     0A 1F 02 F6 | 	mov	local01, arg02
23018     0B 21 02 F6 | 	mov	local02, arg03
2301c     09 23 02 FB | 	rdlong	local03, arg01
23020     02 00 00 FF 
23024     14 22 0E F1 | 	add	local03, ##1044 wz
23028                 | '         return _seterror( 5 );
23028     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2302c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23030     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23034     01 FA 65 A6 |  if_e	neg	result1, #1
23038     4C 00 90 AD |  if_e	jmp	#LR__3882
2303c     00 20 0E F2 | 	cmp	local02, #0 wz
23040     24 00 90 AD |  if_e	jmp	#LR__3880
23044     01 20 0E F2 | 	cmp	local02, #1 wz
23048     14 22 06 A1 |  if_e	add	local03, #20
2304c     11 25 02 AB |  if_e	rdlong	local04, local03
23050     14 22 86 A1 |  if_e	sub	local03, #20
23054     12 1F 02 A1 |  if_e	add	local01, local04
23058     0C 22 06 51 |  if_ne	add	local03, #12
2305c     11 25 02 5B |  if_ne	rdlong	local04, local03
23060     0C 22 86 51 |  if_ne	sub	local03, #12
23064     12 1F 02 51 |  if_ne	add	local01, local04
23068                 | LR__3880
23068     0F 15 02 F6 | 	mov	arg02, local01
2306c     11 13 02 F6 | 	mov	arg01, local03
23070     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
23074     FD 12 0A F6 | 	mov	arg01, result1 wz
23078     08 00 90 AD |  if_e	jmp	#LR__3881
2307c                 | '         return _set_dos_error(result);
2307c     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
23080     04 00 90 FD | 	jmp	#LR__3882
23084                 | LR__3881
23084                 | '     }
23084                 | '     return offset;
23084     0F FB 01 F6 | 	mov	result1, local01
23088                 | LR__3882
23088     A7 F0 03 F6 | 	mov	ptra, fp
2308c     B2 00 A0 FD | 	call	#popregs_
23090                 | _fatfs_cc_v_lseek_ret
23090     2D 00 64 FD | 	ret
23094                 | 
23094                 | _fatfs_cc_v_ioctl
23094                 | ' {
23094                 | '     return _seterror( 10 );
23094     20 E8 05 F1 | 	add	ptr___system__dat__, #32
23098     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
2309c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
230a0     01 FA 65 F6 | 	neg	result1, #1
230a4                 | _fatfs_cc_v_ioctl_ret
230a4     2D 00 64 FD | 	ret
230a8                 | 
230a8                 | _fatfs_cc_v_mkdir
230a8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
230ac     FD 12 02 F6 | 	mov	arg01, result1
230b0                 | ' 
230b0                 | '     r = f_mkdir(name);
230b0                 | '     return _set_dos_error(r);
230b0     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
230b4                 | _fatfs_cc_v_mkdir_ret
230b4     2D 00 64 FD | 	ret
230b8                 | 
230b8                 | _fatfs_cc_v_remove
230b8     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
230bc     FD 12 02 F6 | 	mov	arg01, result1
230c0                 | ' 
230c0                 | '     r = f_unlink(name);
230c0                 | '     return _set_dos_error(r);
230c0     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
230c4                 | _fatfs_cc_v_remove_ret
230c4     2D 00 64 FD | 	ret
230c8                 | 
230c8                 | _fatfs_cc_v_rmdir
230c8     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
230cc     FD 12 02 F6 | 	mov	arg01, result1
230d0                 | ' 
230d0                 | '     r = f_unlink(name);
230d0                 | '     return _set_dos_error(r);
230d0     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
230d4                 | _fatfs_cc_v_rmdir_ret
230d4     2D 00 64 FD | 	ret
230d8                 | 
230d8                 | _fatfs_cc_v_rename
230d8     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
230dc     FD 12 02 F6 | 	mov	arg01, result1
230e0                 | '     return _set_dos_error(r);
230e0     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
230e4                 | _fatfs_cc_v_rename_ret
230e4     2D 00 64 FD | 	ret
230e8                 | 
230e8                 | _fatfs_cc_v_open
230e8     07 4A 05 F6 | 	mov	COUNT_, #7
230ec     A8 00 A0 FD | 	call	#pushregs_
230f0     09 1F 02 F6 | 	mov	local01, arg01
230f4     0A 21 02 F6 | 	mov	local02, arg02
230f8     0B 23 02 F6 | 	mov	local03, arg03
230fc     03 00 00 FF 
23100     3C 12 06 F6 | 	mov	arg01, ##1596
23104                 | '     return _gc_alloc(size);
23104     10 14 06 F6 | 	mov	arg02, #16
23108     A0 58 BF FD | 	call	#__system___gc_doalloc
2310c     FD 24 0A F6 | 	mov	local04, result1 wz
23110                 | '       return _seterror( 7 );
23110     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23114     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23118     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2311c     01 FA 65 A6 |  if_e	neg	result1, #1
23120     98 00 90 AD |  if_e	jmp	#LR__3896
23124     12 13 02 F6 | 	mov	arg01, local04
23128     00 14 06 F6 | 	mov	arg02, #0
2312c     03 00 00 FF 
23130     3C 16 06 F6 | 	mov	arg03, ##1596
23134     98 00 A0 FD | 	call	#\builtin_bytefill_
23138                 | '   switch (flags & 3) {
23138     11 27 02 F6 | 	mov	local05, local03
2313c     03 26 0E F5 | 	and	local05, #3 wz
23140     0C 00 90 AD |  if_e	jmp	#LR__3890
23144     01 26 0E F2 | 	cmp	local05, #1 wz
23148     0C 00 90 AD |  if_e	jmp	#LR__3891
2314c     10 00 90 FD | 	jmp	#LR__3892
23150                 | LR__3890
23150     01 28 06 F6 | 	mov	local06, #1
23154                 | '       fs_flags =  0x01 ;
23154                 | '       break;
23154     0C 00 90 FD | 	jmp	#LR__3893
23158                 | LR__3891
23158     02 28 06 F6 | 	mov	local06, #2
2315c                 | '       fs_flags =  0x02 ;
2315c                 | '       break;
2315c     04 00 90 FD | 	jmp	#LR__3893
23160                 | LR__3892
23160     03 28 06 F6 | 	mov	local06, #3
23164                 | '       fs_flags =  0x01  |  0x02 ;
23164                 | '       break;
23164                 | LR__3893
23164     08 22 CE F7 | 	test	local03, #8 wz
23168     18 28 46 55 |  if_ne	or	local06, #24
2316c     08 00 90 5D |  if_ne	jmp	#LR__3894
23170     20 22 CE F7 | 	test	local03, #32 wz
23174     30 28 46 55 |  if_ne	or	local06, #48
23178                 | LR__3894
23178     02 00 00 FF 
2317c     14 24 06 F1 | 	add	local04, ##1044
23180     12 13 02 F6 | 	mov	arg01, local04
23184     02 00 00 FF 
23188     14 24 86 F1 | 	sub	local04, ##1044
2318c     10 15 02 F6 | 	mov	arg02, local02
23190     14 17 02 F6 | 	mov	arg03, local06
23194     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
23198     FD 2A 0A F6 | 	mov	local07, result1 wz
2319c     14 00 90 AD |  if_e	jmp	#LR__3895
231a0     12 13 02 F6 | 	mov	arg01, local04
231a4                 | '     return _gc_free(ptr);
231a4     10 59 BF FD | 	call	#__system___gc_free
231a8                 | '     free(f);
231a8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
231a8                 | '     return _set_dos_error(r);
231a8     15 13 02 F6 | 	mov	arg01, local07
231ac     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
231b0     08 00 90 FD | 	jmp	#LR__3896
231b4                 | LR__3895
231b4     0F 25 62 FC | 	wrlong	local04, local01
231b8                 | '   }
231b8                 | '   fil->vfsdata = f;
231b8                 | '   return 0;
231b8     00 FA 05 F6 | 	mov	result1, #0
231bc                 | LR__3896
231bc     A7 F0 03 F6 | 	mov	ptra, fp
231c0     B2 00 A0 FD | 	call	#popregs_
231c4                 | _fatfs_cc_v_open_ret
231c4     2D 00 64 FD | 	ret
231c8                 | 
231c8                 | _fatfs_cc_v_flush
231c8     09 13 02 FB | 	rdlong	arg01, arg01
231cc     02 00 00 FF 
231d0     14 12 0E F1 | 	add	arg01, ##1044 wz
231d4                 | '         return _seterror( 5 );
231d4     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
231d8     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
231dc     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
231e0     01 FA 65 A6 |  if_e	neg	result1, #1
231e4     0C 00 90 AD |  if_e	jmp	#LR__3900
231e8     00 DA BF FD | 	call	#_fatfs_cc_f_sync
231ec     FD 12 02 F6 | 	mov	arg01, result1
231f0                 | '     }
231f0                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
231f0                 | '     result = f_sync(f);
231f0                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
231f0                 | '     return _set_dos_error(result);
231f0     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0771
231f4                 | LR__3900
231f4                 | _fatfs_cc_v_flush_ret
231f4     2D 00 64 FD | 	ret
231f8                 | 
231f8                 | _fatfs_cc_v_init
231f8                 | ' {
231f8                 | '     return 0;
231f8     00 FA 05 F6 | 	mov	result1, #0
231fc                 | _fatfs_cc_v_init_ret
231fc     2D 00 64 FD | 	ret
23200                 | 
23200                 | _fatfs_cc_v_deinit
23200     20 01 00 FF 
23204     70 15 06 F6 | 	mov	arg02, ##@LR__4096
23208     00 12 06 F6 | 	mov	arg01, #0
2320c     00 16 06 F6 | 	mov	arg03, #0
23210     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
23214     01 00 00 FF 
23218     08 E4 05 F1 | 	add	objptr, ##520
2321c     F2 12 02 FB | 	rdlong	arg01, objptr
23220     04 E4 05 F1 | 	add	objptr, #4
23224     F2 14 02 FB | 	rdlong	arg02, objptr
23228     01 00 00 FF 
2322c     0C E4 85 F1 | 	sub	objptr, ##524
23230     A0 43 BF FD | 	call	#__system___freepins
23234                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/fatfs.cc"
23234                 | '     _freepins(f_pinmask);
23234                 | '     return 0;
23234     00 FA 05 F6 | 	mov	result1, #0
23238                 | _fatfs_cc_v_deinit_ret
23238     2D 00 64 FD | 	ret
2323c                 | 
2323c                 | _fatfs_cc_get_vfs
2323c     01 4A 05 F6 | 	mov	COUNT_, #1
23240     A8 00 A0 FD | 	call	#pushregs_
23244     09 1F 02 F6 | 	mov	local01, arg01
23248     50 12 06 F6 | 	mov	arg01, #80
2324c     2C 57 BF FD | 	call	#__system___gc_alloc_managed
23250     FD 12 02 F6 | 	mov	arg01, result1
23254     F2 FA 01 F6 | 	mov	result1, objptr
23258     00 C0 02 FF 
2325c     00 FA 45 F5 | 	or	result1, ##92274688
23260     09 FB 61 FC | 	wrlong	result1, arg01
23264     F2 FA 01 F6 | 	mov	result1, objptr
23268     00 C8 02 FF 
2326c     00 FA 45 F5 | 	or	result1, ##93323264
23270     04 12 06 F1 | 	add	arg01, #4
23274     09 FB 61 FC | 	wrlong	result1, arg01
23278     F2 FA 01 F6 | 	mov	result1, objptr
2327c     00 D0 02 FF 
23280     00 FA 45 F5 | 	or	result1, ##94371840
23284     04 12 06 F1 | 	add	arg01, #4
23288     09 FB 61 FC | 	wrlong	result1, arg01
2328c     F2 FA 01 F6 | 	mov	result1, objptr
23290     00 D8 02 FF 
23294     00 FA 45 F5 | 	or	result1, ##95420416
23298     04 12 06 F1 | 	add	arg01, #4
2329c     09 FB 61 FC | 	wrlong	result1, arg01
232a0     F2 FA 01 F6 | 	mov	result1, objptr
232a4     00 E0 02 FF 
232a8     00 FA 45 F5 | 	or	result1, ##96468992
232ac     04 12 06 F1 | 	add	arg01, #4
232b0     09 FB 61 FC | 	wrlong	result1, arg01
232b4     04 12 06 F1 | 	add	arg01, #4
232b8     09 01 68 FC | 	wrlong	#0, arg01
232bc     04 12 06 F1 | 	add	arg01, #4
232c0     09 1F 62 FC | 	wrlong	local01, arg01
232c4     04 12 06 F1 | 	add	arg01, #4
232c8     09 01 68 FC | 	wrlong	#0, arg01
232cc     F2 FA 01 F6 | 	mov	result1, objptr
232d0     00 E8 02 FF 
232d4     00 FA 45 F5 | 	or	result1, ##97517568
232d8     04 12 06 F1 | 	add	arg01, #4
232dc     09 FB 61 FC | 	wrlong	result1, arg01
232e0     F2 FA 01 F6 | 	mov	result1, objptr
232e4     00 F0 02 FF 
232e8     00 FA 45 F5 | 	or	result1, ##98566144
232ec     04 12 06 F1 | 	add	arg01, #4
232f0     09 FB 61 FC | 	wrlong	result1, arg01
232f4     F2 FA 01 F6 | 	mov	result1, objptr
232f8     00 F8 02 FF 
232fc     00 FA 45 F5 | 	or	result1, ##99614720
23300     04 12 06 F1 | 	add	arg01, #4
23304     09 FB 61 FC | 	wrlong	result1, arg01
23308     F2 FA 01 F6 | 	mov	result1, objptr
2330c     39 FA 25 F4 | 	bith	result1, #57
23310     04 12 06 F1 | 	add	arg01, #4
23314     09 FB 61 FC | 	wrlong	result1, arg01
23318     F2 FA 01 F6 | 	mov	result1, objptr
2331c     00 08 03 FF 
23320     00 FA 45 F5 | 	or	result1, ##101711872
23324     04 12 06 F1 | 	add	arg01, #4
23328     09 FB 61 FC | 	wrlong	result1, arg01
2332c     F2 FA 01 F6 | 	mov	result1, objptr
23330     00 10 03 FF 
23334     00 FA 45 F5 | 	or	result1, ##102760448
23338     04 12 06 F1 | 	add	arg01, #4
2333c     09 FB 61 FC | 	wrlong	result1, arg01
23340     F2 FA 01 F6 | 	mov	result1, objptr
23344     00 18 03 FF 
23348     00 FA 45 F5 | 	or	result1, ##103809024
2334c     04 12 06 F1 | 	add	arg01, #4
23350     09 FB 61 FC | 	wrlong	result1, arg01
23354     F2 FA 01 F6 | 	mov	result1, objptr
23358     00 20 03 FF 
2335c     00 FA 45 F5 | 	or	result1, ##104857600
23360     04 12 06 F1 | 	add	arg01, #4
23364     09 FB 61 FC | 	wrlong	result1, arg01
23368     F2 FA 01 F6 | 	mov	result1, objptr
2336c     00 28 03 FF 
23370     00 FA 45 F5 | 	or	result1, ##105906176
23374     04 12 06 F1 | 	add	arg01, #4
23378     09 FB 61 FC | 	wrlong	result1, arg01
2337c     F2 FA 01 F6 | 	mov	result1, objptr
23380     00 30 03 FF 
23384     00 FA 45 F5 | 	or	result1, ##106954752
23388     04 12 06 F1 | 	add	arg01, #4
2338c     09 FB 61 FC | 	wrlong	result1, arg01
23390     F2 FA 01 F6 | 	mov	result1, objptr
23394     00 38 03 FF 
23398     00 FA 45 F5 | 	or	result1, ##108003328
2339c     04 12 06 F1 | 	add	arg01, #4
233a0     09 FB 61 FC | 	wrlong	result1, arg01
233a4     F2 FA 01 F6 | 	mov	result1, objptr
233a8     00 40 03 FF 
233ac     00 FA 45 F5 | 	or	result1, ##109051904
233b0     04 12 06 F1 | 	add	arg01, #4
233b4     09 FB 61 FC | 	wrlong	result1, arg01
233b8     4C 12 86 F1 | 	sub	arg01, #76
233bc                 | ' 
233bc                 | '     v->close = &v_close;
233bc                 | '     v->read = &v_read;
233bc                 | '     v->write = &v_write;
233bc                 | '     v->lseek = &v_lseek;
233bc                 | '     v->ioctl = &v_ioctl;
233bc                 | '     v->flush = 0;
233bc                 | '     v->vfs_data = ptr;
233bc                 | '     v->reserved = 0;
233bc                 | ' 
233bc                 | '     v->open = &v_open;
233bc                 | '     v->creat = &v_creat;
233bc                 | '     v->opendir = &v_opendir;
233bc                 | '     v->closedir = &v_closedir;
233bc                 | '     v->readdir = &v_readdir;
233bc                 | '     v->stat = &v_stat;
233bc                 | ' 
233bc                 | '     v->mkdir = &v_mkdir;
233bc                 | '     v->rmdir = &v_rmdir;
233bc                 | ' 
233bc                 | '     v->remove = &v_remove;
233bc                 | '     v->rename = &v_rename;
233bc                 | ' 
233bc                 | '     v->init = &v_init;
233bc                 | '     v->deinit = &v_deinit;
233bc                 | ' 
233bc                 | '     return v;
233bc     09 FB 01 F6 | 	mov	result1, arg01
233c0     A7 F0 03 F6 | 	mov	ptra, fp
233c4     B2 00 A0 FD | 	call	#popregs_
233c8                 | _fatfs_cc_get_vfs_ret
233c8     2D 00 64 FD | 	ret
233cc                 | 
233cc                 | _fatfs_cc_xmit_mmc_0918
233cc     01 00 00 FF 
233d0     10 E4 05 F1 | 	add	objptr, ##528
233d4     F2 00 02 FB | 	rdlong	_var01, objptr
233d8     08 E4 05 F1 | 	add	objptr, #8
233dc     F2 02 02 FB | 	rdlong	_var02, objptr
233e0     01 00 00 FF 
233e4     18 E4 85 F1 | 	sub	objptr, ##536
233e8     40 02 62 FD | 	dirl	_var02
233ec     28 02 64 FD | 	setq	#1
233f0     09 05 02 FB | 	rdlong	_var03, arg01
233f4     69 04 62 FD | 	rev	_var03
233f8     1B 04 FE F9 | 	movbyts	_var03, #27
233fc     01 05 22 FC | 	wypin	_var03, _var02
23400     0A 05 02 F6 | 	mov	_var03, arg02
23404     02 14 4E F0 | 	shr	arg02, #2 wz
23408     03 04 66 F0 | 	shl	_var03, #3
2340c     00 05 22 FC | 	wypin	_var03, _var01
23410     41 02 62 FD | 	dirh	_var02
23414     08 12 06 F1 | 	add	arg01, #8
23418     69 06 62 FD | 	rev	_var04
2341c     1B 06 FE F9 | 	movbyts	_var04, #27
23420                 | LR__3910
23420     01 07 22 5C |  if_ne	wypin	_var04, _var02
23424     09 07 02 5B |  if_ne	rdlong	_var04, arg01
23428     04 12 06 51 |  if_ne	add	arg01, #4
2342c     69 06 62 5D |  if_ne	rev	_var04
23430     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
23434                 | LR__3911
23434     40 02 72 5D |  if_ne	testp	_var02 wc
23438     F8 FF 9F 1D |  if_a	jmp	#LR__3911
2343c     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3910
23440                 | LR__3912
23440     40 00 72 FD | 	testp	_var01 wc
23444     F8 FF 9F 3D |  if_ae	jmp	#LR__3912
23448     40 02 62 FD | 	dirl	_var02
2344c     FF FF FF FF 
23450     01 FF 2B FC | 	wypin	##-1, _var02
23454     41 02 62 FD | 	dirh	_var02
23458                 | _fatfs_cc_xmit_mmc_0918_ret
23458     2D 00 64 FD | 	ret
2345c                 | 
2345c                 | _fatfs_cc_rcvr_mmc_0925
2345c     01 00 00 FF 
23460     10 E4 05 F1 | 	add	objptr, ##528
23464     F2 00 02 FB | 	rdlong	_var01, objptr
23468     0C E4 05 F1 | 	add	objptr, #12
2346c     F2 02 02 FB | 	rdlong	_var02, objptr
23470     01 00 00 FF 
23474     1C E4 85 F1 | 	sub	objptr, ##540
23478     01 03 08 FC | 	akpin	_var02
2347c     0A 05 0A F6 | 	mov	_var03, arg02 wz
23480     02 04 4E F0 | 	shr	_var03, #2 wz
23484     30 00 90 AD |  if_e	jmp	#LR__3922
23488     02 07 02 F6 | 	mov	_var04, _var03
2348c     05 06 66 F0 | 	shl	_var04, #5
23490     00 07 22 FC | 	wypin	_var04, _var01
23494     01 7F 18 FC | 	wxpin	#63, _var02
23498                 | LR__3920
23498                 | LR__3921
23498     40 02 72 FD | 	testp	_var02 wc
2349c     F8 FF 9F 3D |  if_ae	jmp	#LR__3921
234a0     01 07 8A FA | 	rdpin	_var04, _var02
234a4     69 06 62 FD | 	rev	_var04
234a8     1B 06 FE F9 | 	movbyts	_var04, #27
234ac     09 07 62 FC | 	wrlong	_var04, arg01
234b0     04 12 06 F1 | 	add	arg01, #4
234b4     F8 05 6E FB | 	djnz	_var03, #LR__3920
234b8                 | LR__3922
234b8     03 14 0E F5 | 	and	arg02, #3 wz
234bc     24 00 90 AD |  if_e	jmp	#LR__3925
234c0     01 4F 18 FC | 	wxpin	#39, _var02
234c4                 | LR__3923
234c4     00 11 28 FC | 	wypin	#8, _var01
234c8                 | LR__3924
234c8     40 02 72 FD | 	testp	_var02 wc
234cc     F8 FF 9F 3D |  if_ae	jmp	#LR__3924
234d0     01 07 8A FA | 	rdpin	_var04, _var02
234d4     69 06 62 FD | 	rev	_var04
234d8     09 07 42 FC | 	wrbyte	_var04, arg01
234dc     01 12 06 F1 | 	add	arg01, #1
234e0     F8 15 6E FB | 	djnz	arg02, #LR__3923
234e4                 | LR__3925
234e4                 | _fatfs_cc_rcvr_mmc_0925_ret
234e4     2D 00 64 FD | 	ret
234e8                 | 
234e8                 | _fatfs_cc_wait_ready_0929
234e8     01 4A 05 F6 | 	mov	COUNT_, #1
234ec     A8 00 A0 FD | 	call	#pushregs_
234f0     10 F0 07 F1 | 	add	ptra, #16
234f4     1A FA 61 FD | 	getct	result1
234f8     08 4E 05 F1 | 	add	fp, #8
234fc     A7 FA 61 FC | 	wrlong	result1, fp
23500     14 1E 06 FB | 	rdlong	local01, #20
23504     01 1E 46 F0 | 	shr	local01, #1
23508     04 4E 05 F1 | 	add	fp, #4
2350c     A7 1E 62 FC | 	wrlong	local01, fp
23510     0C 4E 85 F1 | 	sub	fp, #12
23514                 | ' {
23514                 | ' 	BYTE d;
23514                 | ' 	UINT tmr, tmout;
23514                 | ' 
23514                 | ' 	tmr = _cnt();
23514                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
23514                 | ' 	for(;;) {
23514                 | LR__3930
23514     04 4E 05 F1 | 	add	fp, #4
23518     A7 12 02 F6 | 	mov	arg01, fp
2351c     04 4E 85 F1 | 	sub	fp, #4
23520     01 14 06 F6 | 	mov	arg02, #1
23524     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
23528     04 4E 05 F1 | 	add	fp, #4
2352c     A7 1E C2 FA | 	rdbyte	local01, fp
23530     04 4E 85 F1 | 	sub	fp, #4
23534     FF 1E 0E F2 | 	cmp	local01, #255 wz
23538     01 FA 05 A6 |  if_e	mov	result1, #1
2353c     28 00 90 AD |  if_e	jmp	#LR__3931
23540     1A FA 61 FD | 	getct	result1
23544     08 4E 05 F1 | 	add	fp, #8
23548     A7 1E 02 FB | 	rdlong	local01, fp
2354c     0F FB 81 F1 | 	sub	result1, local01
23550     04 4E 05 F1 | 	add	fp, #4
23554     A7 1E 02 FB | 	rdlong	local01, fp
23558     0C 4E 85 F1 | 	sub	fp, #12
2355c     0F FB 11 F2 | 	cmp	result1, local01 wc
23560     00 FA 05 36 |  if_ae	mov	result1, #0
23564     AC FF 9F CD |  if_b	jmp	#LR__3930
23568                 | LR__3931
23568     A7 F0 03 F6 | 	mov	ptra, fp
2356c     B2 00 A0 FD | 	call	#popregs_
23570                 | _fatfs_cc_wait_ready_0929_ret
23570     2D 00 64 FD | 	ret
23574                 | 
23574                 | _fatfs_cc_deselect_0935
23574     00 4A 05 F6 | 	mov	COUNT_, #0
23578     A8 00 A0 FD | 	call	#pushregs_
2357c     14 F0 07 F1 | 	add	ptra, #20
23580     01 00 00 FF 
23584     14 E4 05 F1 | 	add	objptr, ##532
23588     F2 14 02 FB | 	rdlong	arg02, objptr
2358c     04 4E 05 F1 | 	add	fp, #4
23590     A7 14 62 FC | 	wrlong	arg02, fp
23594     04 E4 85 F1 | 	sub	objptr, #4
23598     F2 14 02 FB | 	rdlong	arg02, objptr
2359c     04 4E 05 F1 | 	add	fp, #4
235a0     A7 14 62 FC | 	wrlong	arg02, fp
235a4     08 E4 05 F1 | 	add	objptr, #8
235a8     F2 14 02 FB | 	rdlong	arg02, objptr
235ac     04 4E 05 F1 | 	add	fp, #4
235b0     A7 14 62 FC | 	wrlong	arg02, fp
235b4     04 E4 05 F1 | 	add	objptr, #4
235b8     F2 14 02 FB | 	rdlong	arg02, objptr
235bc     01 00 00 FF 
235c0     1C E4 85 F1 | 	sub	objptr, ##540
235c4     04 4E 05 F1 | 	add	fp, #4
235c8     A7 14 62 FC | 	wrlong	arg02, fp
235cc     0C 4E 85 F1 | 	sub	fp, #12
235d0     A7 12 02 FB | 	rdlong	arg01, fp
235d4     04 4E 85 F1 | 	sub	fp, #4
235d8     59 12 62 FD | 	drvh	arg01
235dc     1F 20 64 FD | 	waitx	#16
235e0     A7 12 02 F6 | 	mov	arg01, fp
235e4     01 14 06 F6 | 	mov	arg02, #1
235e8     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
235ec     A7 F0 03 F6 | 	mov	ptra, fp
235f0     B2 00 A0 FD | 	call	#popregs_
235f4                 | _fatfs_cc_deselect_0935_ret
235f4     2D 00 64 FD | 	ret
235f8                 | 
235f8                 | _fatfs_cc_select_0939
235f8     00 4A 05 F6 | 	mov	COUNT_, #0
235fc     A8 00 A0 FD | 	call	#pushregs_
23600     10 F0 07 F1 | 	add	ptra, #16
23604     01 00 00 FF 
23608     14 E4 05 F1 | 	add	objptr, ##532
2360c     F2 14 02 FB | 	rdlong	arg02, objptr
23610     08 4E 05 F1 | 	add	fp, #8
23614     A7 14 62 FC | 	wrlong	arg02, fp
23618     08 E4 05 F1 | 	add	objptr, #8
2361c     F2 12 02 FB | 	rdlong	arg01, objptr
23620     01 00 00 FF 
23624     1C E4 85 F1 | 	sub	objptr, ##540
23628     04 4E 05 F1 | 	add	fp, #4
2362c     A7 12 62 FC | 	wrlong	arg01, fp
23630     50 12 62 FD | 	fltl	arg01
23634     04 4E 85 F1 | 	sub	fp, #4
23638     A7 12 02 FB | 	rdlong	arg01, fp
2363c     58 12 62 FD | 	drvl	arg01
23640     1F 20 64 FD | 	waitx	#16
23644     04 4E 05 F1 | 	add	fp, #4
23648     A7 12 02 FB | 	rdlong	arg01, fp
2364c     41 12 62 FD | 	dirh	arg01
23650     08 4E 85 F1 | 	sub	fp, #8
23654     A7 12 02 F6 | 	mov	arg01, fp
23658     04 4E 85 F1 | 	sub	fp, #4
2365c     01 14 06 F6 | 	mov	arg02, #1
23660     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
23664     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0929
23668     00 FA 0D F2 | 	cmp	result1, #0 wz
2366c     01 FA 05 56 |  if_ne	mov	result1, #1
23670     08 00 90 5D |  if_ne	jmp	#LR__3940
23674     FC FE BF FD | 	call	#_fatfs_cc_deselect_0935
23678                 | ' 
23678                 | ' 	deselect();
23678                 | ' 	return 0;
23678     00 FA 05 F6 | 	mov	result1, #0
2367c                 | LR__3940
2367c     A7 F0 03 F6 | 	mov	ptra, fp
23680     B2 00 A0 FD | 	call	#popregs_
23684                 | _fatfs_cc_select_0939_ret
23684     2D 00 64 FD | 	ret
23688                 | 
23688                 | _fatfs_cc_rcvr_datablock_0943
23688     01 4A 05 F6 | 	mov	COUNT_, #1
2368c     A8 00 A0 FD | 	call	#pushregs_
23690     18 F0 07 F1 | 	add	ptra, #24
23694     04 4E 05 F1 | 	add	fp, #4
23698     A7 12 62 FC | 	wrlong	arg01, fp
2369c     04 4E 05 F1 | 	add	fp, #4
236a0     A7 14 62 FC | 	wrlong	arg02, fp
236a4     1A FA 61 FD | 	getct	result1
236a8     08 4E 05 F1 | 	add	fp, #8
236ac     A7 FA 61 FC | 	wrlong	result1, fp
236b0     14 1E 06 FB | 	rdlong	local01, #20
236b4     03 1E 46 F0 | 	shr	local01, #3
236b8     04 4E 05 F1 | 	add	fp, #4
236bc     A7 1E 62 FC | 	wrlong	local01, fp
236c0     14 4E 85 F1 | 	sub	fp, #20
236c4                 | ' 	BYTE *buff,
236c4                 | ' 	UINT btr
236c4                 | ' )
236c4                 | ' {
236c4                 | ' 	BYTE d[2];
236c4                 | ' 	UINT tmr, tmout;
236c4                 | ' 
236c4                 | ' 	tmr = _cnt();
236c4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
236c4                 | ' 	for(;;) {
236c4                 | LR__3950
236c4     0C 4E 05 F1 | 	add	fp, #12
236c8     A7 12 02 F6 | 	mov	arg01, fp
236cc     0C 4E 85 F1 | 	sub	fp, #12
236d0     01 14 06 F6 | 	mov	arg02, #1
236d4     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
236d8     0C 4E 05 F1 | 	add	fp, #12
236dc     A7 1E C2 FA | 	rdbyte	local01, fp
236e0     0C 4E 85 F1 | 	sub	fp, #12
236e4     FF 1E 0E F2 | 	cmp	local01, #255 wz
236e8     28 00 90 5D |  if_ne	jmp	#LR__3951
236ec     1A FA 61 FD | 	getct	result1
236f0     FD 1E 02 F6 | 	mov	local01, result1
236f4     10 4E 05 F1 | 	add	fp, #16
236f8     A7 14 02 FB | 	rdlong	arg02, fp
236fc     0A 1F 82 F1 | 	sub	local01, arg02
23700     04 4E 05 F1 | 	add	fp, #4
23704     A7 14 02 FB | 	rdlong	arg02, fp
23708     14 4E 85 F1 | 	sub	fp, #20
2370c     0A 1F 12 F2 | 	cmp	local01, arg02 wc
23710     B0 FF 9F CD |  if_b	jmp	#LR__3950
23714                 | LR__3951
23714     0C 4E 05 F1 | 	add	fp, #12
23718     A7 1E C2 FA | 	rdbyte	local01, fp
2371c     0C 4E 85 F1 | 	sub	fp, #12
23720     FE 1E 0E F2 | 	cmp	local01, #254 wz
23724     00 FA 05 56 |  if_ne	mov	result1, #0
23728     30 00 90 5D |  if_ne	jmp	#LR__3952
2372c     04 4E 05 F1 | 	add	fp, #4
23730     A7 12 02 FB | 	rdlong	arg01, fp
23734     04 4E 05 F1 | 	add	fp, #4
23738     A7 14 02 FB | 	rdlong	arg02, fp
2373c     08 4E 85 F1 | 	sub	fp, #8
23740     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
23744     0C 4E 05 F1 | 	add	fp, #12
23748     A7 12 02 F6 | 	mov	arg01, fp
2374c     0C 4E 85 F1 | 	sub	fp, #12
23750     02 14 06 F6 | 	mov	arg02, #2
23754     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
23758                 | ' 
23758                 | ' 	rcvr_mmc(buff, btr);
23758                 | ' 	rcvr_mmc(d, 2);
23758                 | ' 
23758                 | ' 	return 1;
23758     01 FA 05 F6 | 	mov	result1, #1
2375c                 | LR__3952
2375c     A7 F0 03 F6 | 	mov	ptra, fp
23760     B2 00 A0 FD | 	call	#popregs_
23764                 | _fatfs_cc_rcvr_datablock_0943_ret
23764     2D 00 64 FD | 	ret
23768                 | 
23768                 | _fatfs_cc_xmit_datablock_0945
23768     00 4A 05 F6 | 	mov	COUNT_, #0
2376c     A8 00 A0 FD | 	call	#pushregs_
23770     10 F0 07 F1 | 	add	ptra, #16
23774     04 4E 05 F1 | 	add	fp, #4
23778     A7 12 62 FC | 	wrlong	arg01, fp
2377c     04 4E 05 F1 | 	add	fp, #4
23780     A7 14 42 FC | 	wrbyte	arg02, fp
23784     08 4E 85 F1 | 	sub	fp, #8
23788     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0929
2378c     00 FA 0D F2 | 	cmp	result1, #0 wz
23790     00 FA 05 A6 |  if_e	mov	result1, #0
23794     90 00 90 AD |  if_e	jmp	#LR__3961
23798     08 4E 05 F1 | 	add	fp, #8
2379c     A7 14 C2 FA | 	rdbyte	arg02, fp
237a0     04 4E 05 F1 | 	add	fp, #4
237a4     A7 14 42 FC | 	wrbyte	arg02, fp
237a8     A7 12 02 F6 | 	mov	arg01, fp
237ac     0C 4E 85 F1 | 	sub	fp, #12
237b0     01 14 06 F6 | 	mov	arg02, #1
237b4     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0918
237b8     08 4E 05 F1 | 	add	fp, #8
237bc     A7 14 C2 FA | 	rdbyte	arg02, fp
237c0     08 4E 85 F1 | 	sub	fp, #8
237c4     FD 14 0E F2 | 	cmp	arg02, #253 wz
237c8     58 00 90 AD |  if_e	jmp	#LR__3960
237cc     04 4E 05 F1 | 	add	fp, #4
237d0     A7 12 02 FB | 	rdlong	arg01, fp
237d4     04 4E 85 F1 | 	sub	fp, #4
237d8     09 14 C6 F9 | 	decod	arg02, #9
237dc     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0918
237e0     0C 4E 05 F1 | 	add	fp, #12
237e4     A7 12 02 F6 | 	mov	arg01, fp
237e8     0C 4E 85 F1 | 	sub	fp, #12
237ec     02 14 06 F6 | 	mov	arg02, #2
237f0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
237f4     0C 4E 05 F1 | 	add	fp, #12
237f8     A7 12 02 F6 | 	mov	arg01, fp
237fc     0C 4E 85 F1 | 	sub	fp, #12
23800     01 14 06 F6 | 	mov	arg02, #1
23804     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
23808     0C 4E 05 F1 | 	add	fp, #12
2380c     A7 14 C2 FA | 	rdbyte	arg02, fp
23810     0C 4E 85 F1 | 	sub	fp, #12
23814     1F 14 06 F5 | 	and	arg02, #31
23818     05 14 0E F2 | 	cmp	arg02, #5 wz
2381c                 | ' 			return 0;
2381c     00 FA 05 56 |  if_ne	mov	result1, #0
23820     04 00 90 5D |  if_ne	jmp	#LR__3961
23824                 | LR__3960
23824                 | ' 	}
23824                 | ' 
23824                 | ' 	return 1;
23824     01 FA 05 F6 | 	mov	result1, #1
23828                 | LR__3961
23828     A7 F0 03 F6 | 	mov	ptra, fp
2382c     B2 00 A0 FD | 	call	#popregs_
23830                 | _fatfs_cc_xmit_datablock_0945_ret
23830     2D 00 64 FD | 	ret
23834                 | 
23834                 | _fatfs_cc_send_cmd_0949
23834     01 4A 05 F6 | 	mov	COUNT_, #1
23838     A8 00 A0 FD | 	call	#pushregs_
2383c     1C F0 07 F1 | 	add	ptra, #28
23840                 | _fatfs_cc_send_cmd_0949_enter
23840     04 4E 05 F1 | 	add	fp, #4
23844     A7 12 42 FC | 	wrbyte	arg01, fp
23848     04 4E 05 F1 | 	add	fp, #4
2384c     A7 14 62 FC | 	wrlong	arg02, fp
23850     04 4E 85 F1 | 	sub	fp, #4
23854     A7 FA C1 FA | 	rdbyte	result1, fp
23858     04 4E 85 F1 | 	sub	fp, #4
2385c     80 FA CD F7 | 	test	result1, #128 wz
23860     44 00 90 AD |  if_e	jmp	#LR__3970
23864     04 4E 05 F1 | 	add	fp, #4
23868     A7 14 C2 FA | 	rdbyte	arg02, fp
2386c     7F 14 06 F5 | 	and	arg02, #127
23870     A7 14 42 FC | 	wrbyte	arg02, fp
23874     04 4E 85 F1 | 	sub	fp, #4
23878     37 12 06 F6 | 	mov	arg01, #55
2387c     00 14 06 F6 | 	mov	arg02, #0
23880     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0949
23884     0C 4E 05 F1 | 	add	fp, #12
23888     A7 FA 41 FC | 	wrbyte	result1, fp
2388c     A7 14 C2 FA | 	rdbyte	arg02, fp
23890     0C 4E 85 F1 | 	sub	fp, #12
23894     02 14 16 F2 | 	cmp	arg02, #2 wc
23898     0C 4E 05 31 |  if_ae	add	fp, #12
2389c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
238a0     0C 4E 85 31 |  if_ae	sub	fp, #12
238a4     6C 01 90 3D |  if_ae	jmp	#LR__3974
238a8                 | LR__3970
238a8     04 4E 05 F1 | 	add	fp, #4
238ac     A7 14 C2 FA | 	rdbyte	arg02, fp
238b0     04 4E 85 F1 | 	sub	fp, #4
238b4     0C 14 0E F2 | 	cmp	arg02, #12 wz
238b8     14 00 90 AD |  if_e	jmp	#LR__3971
238bc     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0935
238c0     34 FD BF FD | 	call	#_fatfs_cc_select_0939
238c4     00 FA 0D F2 | 	cmp	result1, #0 wz
238c8     FF FA 05 A6 |  if_e	mov	result1, #255
238cc     44 01 90 AD |  if_e	jmp	#LR__3974
238d0                 | LR__3971
238d0     04 4E 05 F1 | 	add	fp, #4
238d4     A7 14 C2 FA | 	rdbyte	arg02, fp
238d8     40 FA 05 F6 | 	mov	result1, #64
238dc     0A FB 41 F5 | 	or	result1, arg02
238e0     10 4E 05 F1 | 	add	fp, #16
238e4     A7 FA 41 FC | 	wrbyte	result1, fp
238e8     0C 4E 85 F1 | 	sub	fp, #12
238ec     A7 FA 01 FB | 	rdlong	result1, fp
238f0     18 FA 45 F0 | 	shr	result1, #24
238f4     0D 4E 05 F1 | 	add	fp, #13
238f8     A7 FA 41 FC | 	wrbyte	result1, fp
238fc     0D 4E 85 F1 | 	sub	fp, #13
23900     A7 FA 01 FB | 	rdlong	result1, fp
23904     10 FA 45 F0 | 	shr	result1, #16
23908     0E 4E 05 F1 | 	add	fp, #14
2390c     A7 FA 41 FC | 	wrbyte	result1, fp
23910     0E 4E 85 F1 | 	sub	fp, #14
23914     A7 FA 01 FB | 	rdlong	result1, fp
23918     08 FA 45 F0 | 	shr	result1, #8
2391c     0F 4E 05 F1 | 	add	fp, #15
23920     A7 FA 41 FC | 	wrbyte	result1, fp
23924     0F 4E 85 F1 | 	sub	fp, #15
23928     A7 FA 01 FB | 	rdlong	result1, fp
2392c     10 4E 05 F1 | 	add	fp, #16
23930     A7 FA 41 FC | 	wrbyte	result1, fp
23934     0C 4E 85 F1 | 	sub	fp, #12
23938     A7 02 48 FC | 	wrbyte	#1, fp
2393c     08 4E 85 F1 | 	sub	fp, #8
23940     A7 FA C9 FA | 	rdbyte	result1, fp wz
23944     04 4E 85 F1 | 	sub	fp, #4
23948     0C 4E 05 A1 |  if_e	add	fp, #12
2394c     A7 2A 49 AC |  if_e	wrbyte	#149, fp
23950     0C 4E 85 A1 |  if_e	sub	fp, #12
23954     04 4E 05 F1 | 	add	fp, #4
23958     A7 FA C1 FA | 	rdbyte	result1, fp
2395c     04 4E 85 F1 | 	sub	fp, #4
23960     08 FA 0D F2 | 	cmp	result1, #8 wz
23964     0C 4E 05 A1 |  if_e	add	fp, #12
23968     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2396c     0C 4E 85 A1 |  if_e	sub	fp, #12
23970     0C 4E 05 F1 | 	add	fp, #12
23974     A7 14 C2 FA | 	rdbyte	arg02, fp
23978     0D 4E 05 F1 | 	add	fp, #13
2397c     A7 14 42 FC | 	wrbyte	arg02, fp
23980     05 4E 85 F1 | 	sub	fp, #5
23984     A7 12 02 F6 | 	mov	arg01, fp
23988     14 4E 85 F1 | 	sub	fp, #20
2398c     06 14 06 F6 | 	mov	arg02, #6
23990     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0918
23994     04 4E 05 F1 | 	add	fp, #4
23998     A7 1E C2 FA | 	rdbyte	local01, fp
2399c     04 4E 85 F1 | 	sub	fp, #4
239a0     0C 1E 0E F2 | 	cmp	local01, #12 wz
239a4     10 4E 05 A1 |  if_e	add	fp, #16
239a8     A7 12 02 A6 |  if_e	mov	arg01, fp
239ac     10 4E 85 A1 |  if_e	sub	fp, #16
239b0     01 14 06 A6 |  if_e	mov	arg02, #1
239b4     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0925
239b8     0C 4E 05 F1 | 	add	fp, #12
239bc     A7 14 48 FC | 	wrbyte	#10, fp
239c0     0C 4E 85 F1 | 	sub	fp, #12
239c4                 | ' 	n = 10;
239c4                 | ' 	do
239c4                 | LR__3972
239c4     10 4E 05 F1 | 	add	fp, #16
239c8     A7 12 02 F6 | 	mov	arg01, fp
239cc     10 4E 85 F1 | 	sub	fp, #16
239d0     01 14 06 F6 | 	mov	arg02, #1
239d4     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0925
239d8     10 4E 05 F1 | 	add	fp, #16
239dc     A7 1E C2 FA | 	rdbyte	local01, fp
239e0     10 4E 85 F1 | 	sub	fp, #16
239e4     80 1E CE F7 | 	test	local01, #128 wz
239e8     1C 00 90 AD |  if_e	jmp	#LR__3973
239ec     0C 4E 05 F1 | 	add	fp, #12
239f0     A7 1E C2 FA | 	rdbyte	local01, fp
239f4     01 1E 86 F1 | 	sub	local01, #1
239f8     A7 1E 42 FC | 	wrbyte	local01, fp
239fc     A7 1E CA FA | 	rdbyte	local01, fp wz
23a00     0C 4E 85 F1 | 	sub	fp, #12
23a04     BC FF 9F 5D |  if_ne	jmp	#LR__3972
23a08                 | LR__3973
23a08                 | ' 
23a08                 | ' 	return d;
23a08     10 4E 05 F1 | 	add	fp, #16
23a0c     A7 FA C1 FA | 	rdbyte	result1, fp
23a10     10 4E 85 F1 | 	sub	fp, #16
23a14                 | LR__3974
23a14     A7 F0 03 F6 | 	mov	ptra, fp
23a18     B2 00 A0 FD | 	call	#popregs_
23a1c                 | _fatfs_cc_send_cmd_0949_ret
23a1c     2D 00 64 FD | 	ret
23a20                 | 
23a20                 | _fatfs_cc_disk_deinitialize
23a20     03 4A 05 F6 | 	mov	COUNT_, #3
23a24     A8 00 A0 FD | 	call	#pushregs_
23a28     00 12 4E F2 | 	cmps	arg01, #0 wz
23a2c     01 00 00 FF 
23a30     14 E4 05 F1 | 	add	objptr, ##532
23a34     F2 12 02 FB | 	rdlong	arg01, objptr
23a38     04 E4 85 F1 | 	sub	objptr, #4
23a3c     F2 1E 02 FB | 	rdlong	local01, objptr
23a40     08 E4 05 F1 | 	add	objptr, #8
23a44     F2 20 02 FB | 	rdlong	local02, objptr
23a48     04 E4 05 F1 | 	add	objptr, #4
23a4c     F2 22 02 FB | 	rdlong	local03, objptr
23a50     01 00 00 FF 
23a54     1C E4 85 F1 | 	sub	objptr, ##540
23a58                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
23a58                 | '         return RES_NOTRDY;
23a58     03 FA 05 56 |  if_ne	mov	result1, #3
23a5c     2C 00 90 5D |  if_ne	jmp	#LR__3980
23a60     50 12 62 FD | 	fltl	arg01
23a64     09 01 08 FC | 	wrpin	#0, arg01
23a68     50 1E 62 FD | 	fltl	local01
23a6c     0F 01 08 FC | 	wrpin	#0, local01
23a70     50 20 62 FD | 	fltl	local02
23a74     10 01 08 FC | 	wrpin	#0, local02
23a78     50 22 62 FD | 	fltl	local03
23a7c     11 01 08 FC | 	wrpin	#0, local03
23a80     0A 12 06 F6 | 	mov	arg01, #10
23a84     80 17 BF FD | 	call	#__system___waitms
23a88                 | '     }
23a88                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.1.5/flexprop/include/filesys/fatfs/sdmm.cc"
23a88                 | '     _pinclear(PIN_SS);
23a88                 | '     _pinclear(PIN_CLK);
23a88                 | '     _pinclear(PIN_DI);
23a88                 | '     _pinclear(PIN_DO);
23a88                 | ' 
23a88                 | '     _waitms(10);
23a88                 | ' 
23a88                 | '     return 0;
23a88     00 FA 05 F6 | 	mov	result1, #0
23a8c                 | LR__3980
23a8c     A7 F0 03 F6 | 	mov	ptra, fp
23a90     B2 00 A0 FD | 	call	#popregs_
23a94                 | _fatfs_cc_disk_deinitialize_ret
23a94     2D 00 64 FD | 	ret
23a98                 | 
23a98                 | _fatfs_cc_gettimeofday
23a98     04 4A 05 F6 | 	mov	COUNT_, #4
23a9c     A8 00 A0 FD | 	call	#pushregs_
23aa0     09 1F 02 F6 | 	mov	local01, arg01
23aa4     3C 13 BF FD | 	call	#__system___getus
23aa8     FD 12 02 F6 | 	mov	arg01, result1
23aac     02 00 00 FF 
23ab0     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
23ab4     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
23ab8     09 FB 01 F6 | 	mov	result1, arg01
23abc     10 FB 81 F1 | 	sub	result1, local02
23ac0     A1 07 00 FF 
23ac4     40 FA 15 FD | 	qdiv	result1, ##1000000
23ac8     02 00 00 FF 
23acc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
23ad0     18 20 62 FD | 	getqx	local02
23ad4     A1 07 00 FF 
23ad8     40 FA 15 FD | 	qdiv	result1, ##1000000
23adc     00 20 0E F2 | 	cmp	local02, #0 wz
23ae0     19 22 62 FD | 	getqy	local03
23ae4     28 00 90 AD |  if_e	jmp	#LR__3990
23ae8     02 00 00 FF 
23aec     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
23af0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23af4     10 25 02 F1 | 	add	local04, local02
23af8     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
23afc     11 13 82 F1 | 	sub	arg01, local03
23b00     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
23b04     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
23b08     02 00 00 FF 
23b0c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
23b10                 | LR__3990
23b10     02 00 00 FF 
23b14     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
23b18     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
23b1c     02 00 00 FF 
23b20     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
23b24     0F 25 62 FC | 	wrlong	local04, local01
23b28     04 1E 06 F1 | 	add	local01, #4
23b2c     0F 23 62 FC | 	wrlong	local03, local01
23b30                 | '         lastsec += secs;
23b30                 | '         lastus = now - leftover;
23b30                 | '     }
23b30                 | '     tv->tv_sec = lastsec;
23b30                 | '     tv->tv_usec = leftover;
23b30                 | '     return 0;
23b30     00 FA 05 F6 | 	mov	result1, #0
23b34     A7 F0 03 F6 | 	mov	ptra, fp
23b38     B2 00 A0 FD | 	call	#popregs_
23b3c                 | _fatfs_cc_gettimeofday_ret
23b3c     2D 00 64 FD | 	ret
23b40                 | 
23b40                 | _fatfs_cc__is_leap_year
23b40     09 FB 51 F6 | 	abs	result1, arg01 wc
23b44     03 FA 05 F5 | 	and	result1, #3
23b48     FD FA 89 F6 | 	negc	result1, result1 wz
23b4c     38 00 90 5D |  if_ne	jmp	#LR__4001
23b50     09 FB 51 F6 | 	abs	result1, arg01 wc
23b54     64 FA 15 FD | 	qdiv	result1, #100
23b58     19 FA 61 FD | 	getqy	result1
23b5c     FD FA 89 F6 | 	negc	result1, result1 wz
23b60     1C 00 90 5D |  if_ne	jmp	#LR__4000
23b64     09 FB 51 F6 | 	abs	result1, arg01 wc
23b68     90 FB 15 FD | 	qdiv	result1, #400
23b6c                 | '       return (0 == y % 400);
23b6c     00 FA 05 F6 | 	mov	result1, #0
23b70     19 00 62 FD | 	getqy	_var01
23b74     00 01 8A F6 | 	negc	_var01, _var01 wz
23b78     01 FA 05 A6 |  if_e	mov	result1, #1
23b7c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
23b80                 | LR__4000
23b80                 | '     return 1;
23b80     01 FA 05 F6 | 	mov	result1, #1
23b84     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
23b88                 | LR__4001
23b88                 | '   }
23b88                 | '   return 0;
23b88     00 FA 05 F6 | 	mov	result1, #0
23b8c                 | _fatfs_cc__is_leap_year_ret
23b8c     2D 00 64 FD | 	ret
23b90                 | 
23b90                 | _fatfs_cc___tzoffset
23b90     09 01 0A F6 | 	mov	_var01, arg01 wz
23b94     FF FF FF FF 
23b98     0A FF 6B FC | 	wrlong	##-1, arg02
23b9c     01 02 06 F6 | 	mov	_var02, #1
23ba0     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
23ba4                 | '                 return 0;
23ba4     00 FA 05 A6 |  if_e	mov	result1, #0
23ba8     94 02 90 AD |  if_e	jmp	#LR__4027
23bac     0A 01 68 FC | 	wrlong	#0, arg02
23bb0     02 00 00 FF 
23bb4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23bb8     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
23bbc                 | ' 
23bbc                 | '        *hasdst = 0;
23bbc                 | ' 
23bbc                 | ' 	n = stdname;
23bbc                 | '         while (*s && isalpha(*s)) {
23bbc     02 00 00 FF 
23bc0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
23bc4     97 28 48 FB | 	callpa	#(@LR__4011-@LR__4010)>>2,fcache_load_ptr_
23bc8                 | LR__4010
23bc8     00 05 CA FA | 	rdbyte	_var03, _var01 wz
23bcc     48 00 90 AD |  if_e	jmp	#LR__4012
23bd0     00 13 C2 FA | 	rdbyte	arg01, _var01
23bd4                 | ' {
23bd4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
23bd4     80 12 36 F3 | 	fle	arg01, #128 wc
23bd8                 | '     return __ctype[c];
23bd8     02 00 00 FF 
23bdc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23be0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23be4     09 FB C1 FA | 	rdbyte	result1, arg01
23be8     02 00 00 FF 
23bec     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23bf0     0C FA CD F7 | 	test	result1, #12 wz
23bf4     20 00 90 AD |  if_e	jmp	#LR__4012
23bf8     00 09 02 F6 | 	mov	_var05, _var01
23bfc     00 0B 02 F6 | 	mov	_var06, _var01
23c00     01 0A 06 F1 | 	add	_var06, #1
23c04     04 0D C2 FA | 	rdbyte	_var07, _var05
23c08     05 01 02 F6 | 	mov	_var01, _var06
23c0c     03 0D 42 FC | 	wrbyte	_var07, _var04
23c10     01 06 06 F1 | 	add	_var04, #1
23c14     B0 FF 9F FD | 	jmp	#LR__4010
23c18                 | LR__4011
23c18                 | LR__4012
23c18     03 01 48 FC | 	wrbyte	#0, _var04
23c1c     00 0E 06 F6 | 	mov	_var08, #0
23c20     00 05 C2 FA | 	rdbyte	_var03, _var01
23c24     2D 04 0E F2 | 	cmp	_var03, #45 wz
23c28     01 02 66 A6 |  if_e	neg	_var02, #1
23c2c     01 00 06 A1 |  if_e	add	_var01, #1
23c30     97 28 48 FB | 	callpa	#(@LR__4014-@LR__4013)>>2,fcache_load_ptr_
23c34                 | '                 sgn = -1;
23c34                 | '                 s++;
23c34                 | '         }
23c34                 | '         while (isdigit(*s)) {
23c34                 | LR__4013
23c34     00 13 C2 FA | 	rdbyte	arg01, _var01
23c38                 | ' {
23c38                 | '   return  (__ctype_get(c) & 0x02 ) ;
23c38     80 12 36 F3 | 	fle	arg01, #128 wc
23c3c                 | '     return __ctype[c];
23c3c     02 00 00 FF 
23c40     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23c44     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23c48     09 FB C1 FA | 	rdbyte	result1, arg01
23c4c     02 00 00 FF 
23c50     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23c54     02 FA CD F7 | 	test	result1, #2 wz
23c58     28 00 90 AD |  if_e	jmp	#LR__4015
23c5c     07 05 02 F6 | 	mov	_var03, _var08
23c60     02 04 66 F0 | 	shl	_var03, #2
23c64     07 05 02 F1 | 	add	_var03, _var08
23c68     01 04 66 F0 | 	shl	_var03, #1
23c6c     00 09 C2 FA | 	rdbyte	_var05, _var01
23c70     30 08 86 F1 | 	sub	_var05, #48
23c74     04 05 02 F1 | 	add	_var03, _var05
23c78     02 0F 02 F6 | 	mov	_var08, _var03
23c7c     01 00 06 F1 | 	add	_var01, #1
23c80     B0 FF 9F FD | 	jmp	#LR__4013
23c84                 | LR__4014
23c84                 | LR__4015
23c84     07 00 00 FF 
23c88     10 0E 06 FD | 	qmul	_var08, ##3600
23c8c     00 05 C2 FA | 	rdbyte	_var03, _var01
23c90     3A 04 0E F2 | 	cmp	_var03, #58 wz
23c94     18 10 62 FD | 	getqx	_var09
23c98     70 00 90 5D |  if_ne	jmp	#LR__4019
23c9c     00 0E 06 F6 | 	mov	_var08, #0
23ca0     01 00 06 F1 | 	add	_var01, #1
23ca4     97 28 48 FB | 	callpa	#(@LR__4017-@LR__4016)>>2,fcache_load_ptr_
23ca8                 | '                 x = 0;
23ca8                 | '                 s++;
23ca8                 | '                 while (isdigit(*s)) {
23ca8                 | LR__4016
23ca8     00 13 C2 FA | 	rdbyte	arg01, _var01
23cac                 | ' {
23cac                 | '   return  (__ctype_get(c) & 0x02 ) ;
23cac     80 12 36 F3 | 	fle	arg01, #128 wc
23cb0                 | '     return __ctype[c];
23cb0     02 00 00 FF 
23cb4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23cb8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23cbc     09 FB C1 FA | 	rdbyte	result1, arg01
23cc0     02 00 00 FF 
23cc4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23cc8     02 FA CD F7 | 	test	result1, #2 wz
23ccc     28 00 90 AD |  if_e	jmp	#LR__4018
23cd0     07 05 02 F6 | 	mov	_var03, _var08
23cd4     02 04 66 F0 | 	shl	_var03, #2
23cd8     07 05 02 F1 | 	add	_var03, _var08
23cdc     01 04 66 F0 | 	shl	_var03, #1
23ce0     00 09 C2 FA | 	rdbyte	_var05, _var01
23ce4     30 08 86 F1 | 	sub	_var05, #48
23ce8     04 05 02 F1 | 	add	_var03, _var05
23cec     02 0F 02 F6 | 	mov	_var08, _var03
23cf0     01 00 06 F1 | 	add	_var01, #1
23cf4     B0 FF 9F FD | 	jmp	#LR__4016
23cf8                 | LR__4017
23cf8                 | LR__4018
23cf8     07 0D 02 F6 | 	mov	_var07, _var08
23cfc     04 0C 66 F0 | 	shl	_var07, #4
23d00     07 0D 82 F1 | 	sub	_var07, _var08
23d04     02 0C 66 F0 | 	shl	_var07, #2
23d08     06 11 02 F1 | 	add	_var09, _var07
23d0c                 | LR__4019
23d0c     02 00 00 FF 
23d10     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
23d14     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
23d18     00 13 C2 FA | 	rdbyte	arg01, _var01
23d1c                 | ' {
23d1c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
23d1c     80 12 36 F3 | 	fle	arg01, #128 wc
23d20                 | '     return __ctype[c];
23d20     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
23d24     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23d28     09 FB C1 FA | 	rdbyte	result1, arg01
23d2c     02 00 00 FF 
23d30     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23d34     0C FA CD F7 | 	test	result1, #12 wz
23d38     50 00 90 AD |  if_e	jmp	#LR__4022
23d3c     0A 03 68 FC | 	wrlong	#1, arg02
23d40                 | '                 *hasdst = 1;
23d40                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
23d40                 | LR__4020
23d40     00 05 CA FA | 	rdbyte	_var03, _var01 wz
23d44     44 00 90 AD |  if_e	jmp	#LR__4021
23d48     00 13 C2 FA | 	rdbyte	arg01, _var01
23d4c                 | ' {
23d4c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
23d4c     80 12 36 F3 | 	fle	arg01, #128 wc
23d50                 | '     return __ctype[c];
23d50     02 00 00 FF 
23d54     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
23d58     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23d5c     09 FB C1 FA | 	rdbyte	result1, arg01
23d60     02 00 00 FF 
23d64     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
23d68     0C FA CD F7 | 	test	result1, #12 wz
23d6c     1C 00 90 AD |  if_e	jmp	#LR__4021
23d70     00 0B 02 F6 | 	mov	_var06, _var01
23d74     01 0A 06 F1 | 	add	_var06, #1
23d78     00 0D C2 FA | 	rdbyte	_var07, _var01
23d7c     05 01 02 F6 | 	mov	_var01, _var06
23d80     03 0D 42 FC | 	wrbyte	_var07, _var04
23d84     01 06 06 F1 | 	add	_var04, #1
23d88     B4 FF 9F FD | 	jmp	#LR__4020
23d8c                 | LR__4021
23d8c                 | LR__4022
23d8c     03 01 48 FC | 	wrbyte	#0, _var04
23d90     02 00 00 FF 
23d94     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23d98     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
23d9c     02 00 00 FF 
23da0     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
23da4     20 00 90 AD |  if_e	jmp	#LR__4023
23da8     02 00 00 FF 
23dac     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23db0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23db4     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
23db8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23dbc     02 00 00 FF 
23dc0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
23dc4     1C 00 90 FD | 	jmp	#LR__4024
23dc8                 | LR__4023
23dc8     02 00 00 FF 
23dcc     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
23dd0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23dd4     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
23dd8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23ddc     02 00 00 FF 
23de0     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
23de4                 | LR__4024
23de4     02 00 00 FF 
23de8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
23dec     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
23df0     02 00 00 FF 
23df4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
23df8     20 00 90 AD |  if_e	jmp	#LR__4025
23dfc     02 00 00 FF 
23e00     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
23e04     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23e08     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
23e0c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23e10     02 00 00 FF 
23e14     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
23e18     1C 00 90 FD | 	jmp	#LR__4026
23e1c                 | LR__4025
23e1c     02 00 00 FF 
23e20     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
23e24     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
23e28     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
23e2c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
23e30     02 00 00 FF 
23e34     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
23e38                 | LR__4026
23e38     08 03 02 FD | 	qmul	_var02, _var09
23e3c                 | ' 		_tzname[1] = stdname;
23e3c                 | ' 
23e3c                 | '         return sgn * off;
23e3c     18 FA 61 FD | 	getqx	result1
23e40                 | LR__4027
23e40                 | _fatfs_cc___tzoffset_ret
23e40     2D 00 64 FD | 	ret
23e44                 | 
23e44                 | _fatfs_cc___indst
23e44     10 12 06 F1 | 	add	arg01, #16
23e48     09 01 02 FB | 	rdlong	_var01, arg01
23e4c     10 12 86 F1 | 	sub	arg01, #16
23e50     02 00 0E F2 | 	cmp	_var01, #2 wz
23e54     30 00 90 5D |  if_ne	jmp	#LR__4030
23e58     07 00 06 F6 | 	mov	_var01, #7
23e5c     18 12 06 F1 | 	add	arg01, #24
23e60     09 03 02 FB | 	rdlong	_var02, arg01
23e64     01 01 02 F1 | 	add	_var01, _var02
23e68     0C 12 86 F1 | 	sub	arg01, #12
23e6c     09 05 02 FB | 	rdlong	_var03, arg01
23e70     02 01 82 F1 | 	sub	_var01, _var03
23e74     00 00 56 F2 | 	cmps	_var01, #0 wc
23e78                 | '                         return 1;
23e78     01 FA 05 C6 |  if_b	mov	result1, #1
23e7c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
23e80                 | '                 return 0;
23e80     00 FA 05 F6 | 	mov	result1, #0
23e84     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
23e88                 | LR__4030
23e88     10 12 06 F1 | 	add	arg01, #16
23e8c     09 01 02 FB | 	rdlong	_var01, arg01
23e90     10 12 86 F1 | 	sub	arg01, #16
23e94     0A 00 0E F2 | 	cmp	_var01, #10 wz
23e98     28 00 90 5D |  if_ne	jmp	#LR__4031
23e9c     18 12 06 F1 | 	add	arg01, #24
23ea0     09 01 02 FB | 	rdlong	_var01, arg01
23ea4     0C 12 86 F1 | 	sub	arg01, #12
23ea8     09 07 02 FB | 	rdlong	_var04, arg01
23eac     03 01 82 F1 | 	sub	_var01, _var04
23eb0     00 00 56 F2 | 	cmps	_var01, #0 wc
23eb4                 | '                         return 0;
23eb4     00 FA 05 C6 |  if_b	mov	result1, #0
23eb8     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
23ebc                 | '                 return 1;
23ebc     01 FA 05 F6 | 	mov	result1, #1
23ec0     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
23ec4                 | LR__4031
23ec4                 | '         }
23ec4                 | ' 
23ec4                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
23ec4     00 00 06 F6 | 	mov	_var01, #0
23ec8     10 12 06 F1 | 	add	arg01, #16
23ecc     09 03 02 FB | 	rdlong	_var02, arg01
23ed0     10 12 86 F1 | 	sub	arg01, #16
23ed4     03 02 56 F2 | 	cmps	_var02, #3 wc
23ed8     10 00 90 CD |  if_b	jmp	#LR__4032
23edc     10 12 06 F1 | 	add	arg01, #16
23ee0     09 05 02 FB | 	rdlong	_var03, arg01
23ee4     0A 04 56 F2 | 	cmps	_var03, #10 wc
23ee8     01 00 06 C6 |  if_b	mov	_var01, #1
23eec                 | LR__4032
23eec     00 FB 01 F6 | 	mov	result1, _var01
23ef0                 | _fatfs_cc___indst_ret
23ef0     2D 00 64 FD | 	ret
23ef4                 | 
23ef4                 | ' 	
23ef4                 | ' 	FUNCTION pfunc(c as integer) as integer
23ef4                 | ___strs_cl_pfunc
23ef4                 | ' 		if (i < 16) then
23ef4     04 E4 05 F1 | 	add	objptr, #4
23ef8     F2 FA 01 FB | 	rdlong	result1, objptr
23efc     04 E4 85 F1 | 	sub	objptr, #4
23f00     10 FA 55 F2 | 	cmps	result1, #16 wc
23f04     2C 00 90 3D |  if_ae	jmp	#LR__4040
23f08     F2 FA 01 FB | 	rdlong	result1, objptr
23f0c     04 E4 05 F1 | 	add	objptr, #4
23f10     F2 00 02 FB | 	rdlong	_var01, objptr
23f14     FD 00 02 F1 | 	add	_var01, result1
23f18     00 13 42 FC | 	wrbyte	arg01, _var01
23f1c     F2 FA 01 FB | 	rdlong	result1, objptr
23f20     01 FA 05 F1 | 	add	result1, #1
23f24     F2 FA 61 FC | 	wrlong	result1, objptr
23f28     04 E4 85 F1 | 	sub	objptr, #4
23f2c                 | ' 			p(i) = c
23f2c                 | ' 			i = i+1
23f2c                 | ' 			return 1
23f2c     01 FA 05 F6 | 	mov	result1, #1
23f30     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
23f34                 | LR__4040
23f34                 | ' 			return -1
23f34     01 FA 65 F6 | 	neg	result1, #1
23f38                 | ___strs_cl_pfunc_ret
23f38     2D 00 64 FD | 	ret
23f3c                 | 
23f3c                 | __struct__s_vfs_file_t_putchar
23f3c     04 4A 05 F6 | 	mov	COUNT_, #4
23f40     A8 00 A0 FD | 	call	#pushregs_
23f44     1C E4 05 F1 | 	add	objptr, #28
23f48     F2 1E 0A FB | 	rdlong	local01, objptr wz
23f4c     1C E4 85 F1 | 	sub	objptr, #28
23f50     00 FA 05 A6 |  if_e	mov	result1, #0
23f54     48 00 90 AD |  if_e	jmp	#LR__4050
23f58     1C E4 05 F1 | 	add	objptr, #28
23f5c     F2 20 02 FB | 	rdlong	local02, objptr
23f60     10 23 02 F6 | 	mov	local03, local02
23f64     1C E4 85 F1 | 	sub	objptr, #28
23f68     13 22 46 F7 | 	zerox	local03, #19
23f6c     14 20 46 F0 | 	shr	local02, #20
23f70     02 20 66 F0 | 	shl	local02, #2
23f74     ED 20 02 F1 | 	add	local02, __methods__
23f78     10 21 02 FB | 	rdlong	local02, local02
23f7c     F2 14 02 F6 | 	mov	arg02, objptr
23f80     F2 24 02 F6 | 	mov	local04, objptr
23f84     11 E5 01 F6 | 	mov	objptr, local03
23f88     2D 20 62 FD | 	call	local02
23f8c     12 E5 01 F6 | 	mov	objptr, local04
23f90                 | '     return (i < 0) ? 0 : 1;
23f90     00 FA 55 F2 | 	cmps	result1, #0 wc
23f94     00 1E 06 C6 |  if_b	mov	local01, #0
23f98     01 1E 06 36 |  if_ae	mov	local01, #1
23f9c     0F FB 01 F6 | 	mov	result1, local01
23fa0                 | LR__4050
23fa0     A7 F0 03 F6 | 	mov	ptra, fp
23fa4     B2 00 A0 FD | 	call	#popregs_
23fa8                 | __struct__s_vfs_file_t_putchar_ret
23fa8     2D 00 64 FD | 	ret
23fac                 | 
23fac                 | __struct__s_vfs_file_t_getchar
23fac     03 4A 05 F6 | 	mov	COUNT_, #3
23fb0     A8 00 A0 FD | 	call	#pushregs_
23fb4     20 E4 05 F1 | 	add	objptr, #32
23fb8     F2 12 0A FB | 	rdlong	arg01, objptr wz
23fbc     20 E4 85 F1 | 	sub	objptr, #32
23fc0     01 FA 65 A6 |  if_e	neg	result1, #1
23fc4     38 00 90 AD |  if_e	jmp	#LR__4060
23fc8                 | '     return getcf(__this);
23fc8     20 E4 05 F1 | 	add	objptr, #32
23fcc     F2 1E 02 FB | 	rdlong	local01, objptr
23fd0     0F 21 02 F6 | 	mov	local02, local01
23fd4     20 E4 85 F1 | 	sub	objptr, #32
23fd8     13 20 46 F7 | 	zerox	local02, #19
23fdc     14 1E 46 F0 | 	shr	local01, #20
23fe0     02 1E 66 F0 | 	shl	local01, #2
23fe4     ED 1E 02 F1 | 	add	local01, __methods__
23fe8     0F 1F 02 FB | 	rdlong	local01, local01
23fec     F2 12 02 F6 | 	mov	arg01, objptr
23ff0     F2 22 02 F6 | 	mov	local03, objptr
23ff4     10 E5 01 F6 | 	mov	objptr, local02
23ff8     2D 1E 62 FD | 	call	local01
23ffc     11 E5 01 F6 | 	mov	objptr, local03
24000                 | LR__4060
24000     A7 F0 03 F6 | 	mov	ptra, fp
24004     B2 00 A0 FD | 	call	#popregs_
24008                 | __struct__s_vfs_file_t_getchar_ret
24008     2D 00 64 FD | 	ret
2400c                 | 
2400c                 | __struct___bas_wrap_sender_tx
2400c     03 4A 05 F6 | 	mov	COUNT_, #3
24010     A8 00 A0 FD | 	call	#pushregs_
24014     F2 1E 02 FB | 	rdlong	local01, objptr
24018     0F 21 02 F6 | 	mov	local02, local01
2401c     13 1E 46 F7 | 	zerox	local01, #19
24020     14 20 46 F0 | 	shr	local02, #20
24024     02 20 66 F0 | 	shl	local02, #2
24028     ED 20 02 F1 | 	add	local02, __methods__
2402c     10 21 02 FB | 	rdlong	local02, local02
24030     F2 22 02 F6 | 	mov	local03, objptr
24034     0F E5 01 F6 | 	mov	objptr, local01
24038     2D 20 62 FD | 	call	local02
2403c     11 E5 01 F6 | 	mov	objptr, local03
24040     01 FA 05 F6 | 	mov	result1, #1
24044     A7 F0 03 F6 | 	mov	ptra, fp
24048     B2 00 A0 FD | 	call	#popregs_
2404c                 | __struct___bas_wrap_sender_tx_ret
2404c     2D 00 64 FD | 	ret
24050                 | 
24050                 | __struct___bas_wrap_sender_rx
24050     03 4A 05 F6 | 	mov	COUNT_, #3
24054     A8 00 A0 FD | 	call	#pushregs_
24058     04 E4 05 F1 | 	add	objptr, #4
2405c     F2 1E 02 FB | 	rdlong	local01, objptr
24060     0F 21 02 F6 | 	mov	local02, local01
24064     04 E4 85 F1 | 	sub	objptr, #4
24068     13 20 46 F7 | 	zerox	local02, #19
2406c     14 1E 46 F0 | 	shr	local01, #20
24070     02 1E 66 F0 | 	shl	local01, #2
24074     ED 1E 02 F1 | 	add	local01, __methods__
24078     0F 1F 02 FB | 	rdlong	local01, local01
2407c     F2 22 02 F6 | 	mov	local03, objptr
24080     10 E5 01 F6 | 	mov	objptr, local02
24084     2D 1E 62 FD | 	call	local01
24088     11 E5 01 F6 | 	mov	objptr, local03
2408c     A7 F0 03 F6 | 	mov	ptra, fp
24090     B2 00 A0 FD | 	call	#popregs_
24094                 | __struct___bas_wrap_sender_rx_ret
24094     2D 00 64 FD | 	ret
24098                 | 
24098                 | __struct___bas_wrap_sender_close
24098     03 4A 05 F6 | 	mov	COUNT_, #3
2409c     A8 00 A0 FD | 	call	#pushregs_
240a0     08 E4 05 F1 | 	add	objptr, #8
240a4     F2 1E 02 FB | 	rdlong	local01, objptr
240a8     0F 21 02 F6 | 	mov	local02, local01
240ac     08 E4 85 F1 | 	sub	objptr, #8
240b0     13 20 46 F7 | 	zerox	local02, #19
240b4     14 1E 46 F0 | 	shr	local01, #20
240b8     02 1E 66 F0 | 	shl	local01, #2
240bc     ED 1E 02 F1 | 	add	local01, __methods__
240c0     0F 1F 02 FB | 	rdlong	local01, local01
240c4     F2 22 02 F6 | 	mov	local03, objptr
240c8     10 E5 01 F6 | 	mov	objptr, local02
240cc     2D 1E 62 FD | 	call	local01
240d0     11 E5 01 F6 | 	mov	objptr, local03
240d4     A7 F0 03 F6 | 	mov	ptra, fp
240d8     B2 00 A0 FD | 	call	#popregs_
240dc                 | __struct___bas_wrap_sender_close_ret
240dc     2D 00 64 FD | 	ret
240e0                 | 
240e0                 | LR__4070
240e0     2F          | 	byte	"/"
240e1     00          | 	byte	0
240e2                 | LR__4071
240e2     69 6E 66    | 	byte	"inf"
240e5     00          | 	byte	0
240e6                 | LR__4072
240e6     6E 61 6E    | 	byte	"nan"
240e9     00          | 	byte	0
240ea                 | LR__4073
240ea                 | 	byte	
240ea     00          | 	byte	0
240eb                 | LR__4074
240eb                 | 	byte	
240eb     00          | 	byte	0
240ec                 | LR__4075
240ec                 | 	byte	
240ec     00          | 	byte	0
240ed                 | LR__4076
240ed                 | 	byte	
240ed     00          | 	byte	0
240ee                 | LR__4077
240ee                 | 	byte	
240ee     00          | 	byte	0
240ef                 | LR__4078
240ef                 | 	byte	
240ef     00          | 	byte	0
240f0                 | LR__4079
240f0                 | 	byte	
240f0     00          | 	byte	0
240f1                 | LR__4080
240f1                 | 	byte	
240f1     00          | 	byte	0
240f2                 | LR__4081
240f2     00          | 	byte	0
240f3     00          | 	byte	0
240f4                 | LR__4082
240f4     00          | 	byte	0
240f5     00          | 	byte	0
240f6                 | LR__4083
240f6     00          | 	byte	0
240f7     00          | 	byte	0
240f8                 | LR__4084
240f8     20 21 21 21 
240fc     20 63 6F 72 
24100     72 75 70 74 
24104     65 64 20 68 
24108     65 61 70 3F 
2410c     3F 3F 20 21 
24110     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
24113     00          | 	byte	0
24114                 | LR__4085
24114     20 21 21 21 
24118     20 6F 75 74 
2411c     20 6F 66 20 
24120     68 65 61 70 
24124     20 6D 65 6D 
24128     6F 72 79 20 
2412c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
24130     00          | 	byte	0
24131                 | LR__4086
24131     20 21 21 21 
24135     20 63 6F 72 
24139     72 75 70 74 
2413d     65 64 20 68 
24141     65 61 70 20 
24145     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
24149     00          | 	byte	0
2414a                 | LR__4087
2414a     00          | 	byte	0
2414b     00          | 	byte	0
2414c                 | LR__4088
2414c     2E          | 	byte	"."
2414d     00          | 	byte	0
2414e                 | LR__4089
2414e     00          | 	byte	0
2414f     00          | 	byte	0
24150                 | LR__4090
24150     00          | 	byte	0
24151     00          | 	byte	0
24152                 | LR__4091
24152     00          | 	byte	0
24153     00          | 	byte	0
24154                 | LR__4092
24154     2A 3A 3C 3E 
24158     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2415c     00          | 	byte	0
2415d                 | LR__4093
2415d     2B 2C 3B 3D 
24161     5B 5D       | 	byte	"+,;=[]"
24163     00          | 	byte	0
24164                 | LR__4094
24164     46 41 54 33 
24168     32 20 20 20 | 	byte	"FAT32   "
2416c     00          | 	byte	0
2416d                 | LR__4095
2416d     54 5A       | 	byte	"TZ"
2416f     00          | 	byte	0
24170                 | LR__4096
24170     00          | 	byte	0
24171     00          | 	byte	0
24172                 | LR__4097
24172                 | 	byte	
24172     00          | 	byte	0
24173                 | LR__4098
24173                 | 	byte	
24173     00          | 	byte	0
24174                 | LR__4099
24174     3A          | 	byte	":"
24175     00          | 	byte	0
24176                 | LR__4100
24176                 | 	byte	
24176     00          | 	byte	0
24177                 | LR__4101
24177                 | 	byte	
24177     00          | 	byte	0
24178                 | LR__4102
24178                 | 	byte	
24178     00          | 	byte	0
24179                 | LR__4103
24179                 | 	byte	
24179     00          | 	byte	0
2417a                 | LR__4104
2417a                 | 	byte	
2417a     00          | 	byte	0
2417b                 | LR__4105
2417b                 | 	byte	
2417b     00          | 	byte	0
2417c                 | LR__4106
2417c                 | 	byte	
2417c     00          | 	byte	0
2417d                 | LR__4107
2417d     22          | 	byte	34
2417e     00          | 	byte	0
2417f                 | LR__4108
2417f     22          | 	byte	34
24180     00          | 	byte	0
24181                 | LR__4109
24181     22          | 	byte	34
24182     00          | 	byte	0
24183                 | LR__4110
24183     22          | 	byte	34
24184     00          | 	byte	0
24185                 | LR__4111
24185     22          | 	byte	34
24186     00          | 	byte	0
24187                 | LR__4112
24187     3E          | 	byte	">"
24188     00          | 	byte	0
24189                 | LR__4113
24189     3E          | 	byte	">"
2418a     00          | 	byte	0
2418b                 | LR__4114
2418b     2B          | 	byte	"+"
2418c     00          | 	byte	0
2418d                 | LR__4115
2418d     2D          | 	byte	"-"
2418e     00          | 	byte	0
2418f                 | LR__4116
2418f     2A          | 	byte	"*"
24190     00          | 	byte	0
24191                 | LR__4117
24191     2F          | 	byte	"/"
24192     00          | 	byte	0
24193                 | LR__4118
24193     5E          | 	byte	"^"
24194     00          | 	byte	0
24195                 | LR__4119
24195     3D          | 	byte	"="
24196     00          | 	byte	0
24197                 | LR__4120
24197     2B          | 	byte	"+"
24198     00          | 	byte	0
24199                 | LR__4121
24199     2B          | 	byte	"+"
2419a     00          | 	byte	0
2419b                 | LR__4122
2419b     2D          | 	byte	"-"
2419c     00          | 	byte	0
2419d                 | LR__4123
2419d     2D          | 	byte	"-"
2419e     00          | 	byte	0
2419f                 | LR__4124
2419f     3C          | 	byte	"<"
241a0     00          | 	byte	0
241a1                 | LR__4125
241a1     3E          | 	byte	">"
241a2     00          | 	byte	0
241a3                 | LR__4126
241a3     22          | 	byte	34
241a4     00          | 	byte	0
241a5                 | LR__4127
241a5     22          | 	byte	34
241a6     00          | 	byte	0
241a7                 | LR__4128
241a7                 | 	byte	
241a7     00          | 	byte	0
241a8                 | LR__4129
241a8     6C 6F 61 64 | 	byte	"load"
241ac     00          | 	byte	0
241ad                 | LR__4130
241ad     73 61 76 65 | 	byte	"save"
241b1     00          | 	byte	0
241b2                 | LR__4131
241b2     62 72 75 6E | 	byte	"brun"
241b6     00          | 	byte	0
241b7                 | LR__4132
241b7     6D 6F 75 73 
241bb     65          | 	byte	"mouse"
241bc     00          | 	byte	0
241bd                 | LR__4133
241bd     63 75 72 73 
241c1     6F 72       | 	byte	"cursor"
241c3     00          | 	byte	0
241c4                 | LR__4134
241c4     63 6C 69 63 
241c8     6B          | 	byte	"click"
241c9     00          | 	byte	0
241ca                 | LR__4135
241ca     6F 6E       | 	byte	"on"
241cc     00          | 	byte	0
241cd                 | LR__4136
241cd     31          | 	byte	"1"
241ce     00          | 	byte	0
241cf                 | LR__4137
241cf     6F 66 66    | 	byte	"off"
241d2     00          | 	byte	0
241d3                 | LR__4138
241d3     30          | 	byte	"0"
241d4     00          | 	byte	0
241d5                 | LR__4139
241d5                 | 	byte	
241d5     00          | 	byte	0
241d6                 | LR__4140
241d6                 | 	byte	
241d6     00          | 	byte	0
241d7                 | LR__4141
241d7                 | 	byte	
241d7     00          | 	byte	0
241d8                 | LR__4142
241d8                 | 	byte	
241d8     00          | 	byte	0
241d9                 | LR__4143
241d9     20 55 73 65 
241dd     72 20 66 75 
241e1     6E 63 74 69 
241e5     6F 6E 73 20 
241e9     61 6E 64 20 
241ed     61 72 72 61 
241f1     79 73 20 6E 
241f5     6F 74 20 79 
241f9     65 74 20 69 
241fd     6D 70 6C 65 
24201     6D 65 6E 74 
24205     65 64       | 	byte	" User functions and arrays not yet implemented"
24207     00          | 	byte	0
24208                 | LR__4144
24208                 | 	byte	
24208     00          | 	byte	0
24209                 | LR__4145
24209                 | 	byte	
24209     00          | 	byte	0
2420a                 | LR__4146
2420a     52 65 61 64 
2420e     79          | 	byte	"Ready"
2420f     00          | 	byte	0
24210                 | LR__4147
24210     2B          | 	byte	"+"
24211     00          | 	byte	0
24212                 | LR__4148
24212     2D          | 	byte	"-"
24213     00          | 	byte	0
24214                 | LR__4149
24214     6F 72       | 	byte	"or"
24216     00          | 	byte	0
24217                 | LR__4150
24217     78 6F 72    | 	byte	"xor"
2421a     00          | 	byte	0
2421b                 | LR__4151
2421b     2A          | 	byte	"*"
2421c     00          | 	byte	0
2421d                 | LR__4152
2421d     2F          | 	byte	"/"
2421e     00          | 	byte	0
2421f                 | LR__4153
2421f     61 6E 64    | 	byte	"and"
24222     00          | 	byte	0
24223                 | LR__4154
24223     64 69 76    | 	byte	"div"
24226     00          | 	byte	0
24227                 | LR__4155
24227     6D 6F 64    | 	byte	"mod"
2422a     00          | 	byte	0
2422b                 | LR__4156
2422b     73 68 6C    | 	byte	"shl"
2422e     00          | 	byte	0
2422f                 | LR__4157
2422f     73 68 72    | 	byte	"shr"
24232     00          | 	byte	0
24233                 | LR__4158
24233     5E          | 	byte	"^"
24234     00          | 	byte	0
24235                 | LR__4159
24235     6E 6F 74    | 	byte	"not"
24238     00          | 	byte	0
24239                 | LR__4160
24239     40          | 	byte	"@"
2423a     00          | 	byte	0
2423b                 | LR__4161
2423b     3D          | 	byte	"="
2423c     00          | 	byte	0
2423d                 | LR__4162
2423d     3E 3D       | 	byte	">="
2423f     00          | 	byte	0
24240                 | LR__4163
24240     3C 3D       | 	byte	"<="
24242     00          | 	byte	0
24243                 | LR__4164
24243     3C          | 	byte	"<"
24244     00          | 	byte	0
24245                 | LR__4165
24245     3E          | 	byte	">"
24246     00          | 	byte	0
24247                 | LR__4166
24247     3C 3E       | 	byte	"<>"
24249     00          | 	byte	0
2424a                 | LR__4167
2424a     2B 2B       | 	byte	"++"
2424c     00          | 	byte	0
2424d                 | LR__4168
2424d     2D 2D       | 	byte	"--"
2424f     00          | 	byte	0
24250                 | LR__4169
24250     2B          | 	byte	"+"
24251     00          | 	byte	0
24252                 | LR__4170
24252     2D          | 	byte	"-"
24253     00          | 	byte	0
24254                 | LR__4171
24254     3D          | 	byte	"="
24255     00          | 	byte	0
24256                 | LR__4172
24256     2C          | 	byte	","
24257     00          | 	byte	0
24258                 | LR__4173
24258     2A          | 	byte	"*"
24259     00          | 	byte	0
2425a                 | LR__4174
2425a     2F          | 	byte	"/"
2425b     00          | 	byte	0
2425c                 | LR__4175
2425c     3B          | 	byte	";"
2425d     00          | 	byte	0
2425e                 | LR__4176
2425e     22          | 	byte	34
2425f     00          | 	byte	0
24260                 | LR__4177
24260     5E          | 	byte	"^"
24261     00          | 	byte	0
24262                 | LR__4178
24262     29          | 	byte	")"
24263     00          | 	byte	0
24264                 | LR__4179
24264     28          | 	byte	"("
24265     00          | 	byte	0
24266                 | LR__4180
24266     3A          | 	byte	":"
24267     00          | 	byte	0
24268                 | LR__4181
24268     20          | 	byte	" "
24269     00          | 	byte	0
2426a                 | LR__4182
2426a     3E          | 	byte	">"
2426b     00          | 	byte	0
2426c                 | LR__4183
2426c     3C          | 	byte	"<"
2426d     00          | 	byte	0
2426e                 | LR__4184
2426e     3D          | 	byte	"="
2426f     00          | 	byte	0
24270                 | LR__4185
24270     63 6C 73    | 	byte	"cls"
24273     00          | 	byte	0
24274                 | LR__4186
24274     6E 65 77    | 	byte	"new"
24277     00          | 	byte	0
24278                 | LR__4187
24278     70 6C 6F 74 | 	byte	"plot"
2427c     00          | 	byte	0
2427d                 | LR__4188
2427d     64 72 61 77 | 	byte	"draw"
24281     00          | 	byte	0
24282                 | LR__4189
24282     70 72 69 6E 
24286     74          | 	byte	"print"
24287     00          | 	byte	0
24288                 | LR__4190
24288     63 69 72 63 
2428c     6C 65       | 	byte	"circle"
2428e     00          | 	byte	0
2428f                 | LR__4191
2428f     66 63 69 72 
24293     63 6C 65    | 	byte	"fcircle"
24296     00          | 	byte	0
24297                 | LR__4192
24297     62 6F 78    | 	byte	"box"
2429a     00          | 	byte	0
2429b                 | LR__4193
2429b     66 72 61 6D 
2429f     65          | 	byte	"frame"
242a0     00          | 	byte	0
242a1                 | LR__4194
242a1     63 6F 6C 6F 
242a5     72          | 	byte	"color"
242a6     00          | 	byte	0
242a7                 | LR__4195
242a7     70 72 69 6E 
242ab     74          | 	byte	"print"
242ac     00          | 	byte	0
242ad                 | LR__4196
242ad     6C 69 73 74 | 	byte	"list"
242b1     00          | 	byte	0
242b2                 | LR__4197
242b2     72 75 6E    | 	byte	"run"
242b5     00          | 	byte	0
242b6                 | LR__4198
242b6     67 6F 74 6F | 	byte	"goto"
242ba     00          | 	byte	0
242bb                 | LR__4199
242bb     63 73 61 76 
242bf     65          | 	byte	"csave"
242c0     00          | 	byte	0
242c1                 | LR__4200
242c1     73 61 76 65 | 	byte	"save"
242c5     00          | 	byte	0
242c6                 | LR__4201
242c6     6C 6F 61 64 | 	byte	"load"
242ca     00          | 	byte	0
242cb                 | LR__4202
242cb     62 72 75 6E | 	byte	"brun"
242cf     00          | 	byte	0
242d0                 | LR__4203
242d0     70 69 6E 77 
242d4     72 69 74 65 | 	byte	"pinwrite"
242d8     00          | 	byte	0
242d9                 | LR__4204
242d9     77 61 69 74 
242dd     6D 73       | 	byte	"waitms"
242df     00          | 	byte	0
242e0                 | LR__4205
242e0     77 61 69 74 
242e4     76 62 6C    | 	byte	"waitvbl"
242e7     00          | 	byte	0
242e8                 | LR__4206
242e8     69 66       | 	byte	"if"
242ea     00          | 	byte	0
242eb                 | LR__4207
242eb     65 6C 73 65 | 	byte	"else"
242ef     00          | 	byte	0
242f0                 | LR__4208
242f0     74 68 65 6E | 	byte	"then"
242f4     00          | 	byte	0
242f5                 | LR__4209
242f5     62 65 65 70 | 	byte	"beep"
242f9     00          | 	byte	0
242fa                 | LR__4210
242fa     64 69 72    | 	byte	"dir"
242fd     00          | 	byte	0
242fe                 | LR__4211
242fe     66 6F 72    | 	byte	"for"
24301     00          | 	byte	0
24302                 | LR__4212
24302     6E 65 78 74 | 	byte	"next"
24306     00          | 	byte	0
24307                 | LR__4213
24307     70 61 70 65 
2430b     72          | 	byte	"paper"
2430c     00          | 	byte	0
2430d                 | LR__4214
2430d     69 6E 6B    | 	byte	"ink"
24310     00          | 	byte	0
24311                 | LR__4215
24311     66 6F 6E 74 | 	byte	"font"
24315     00          | 	byte	0
24316                 | LR__4216
24316     6D 6F 64 65 | 	byte	"mode"
2431a     00          | 	byte	0
2431b                 | LR__4217
2431b     6D 6F 75 73 
2431f     65          | 	byte	"mouse"
24320     00          | 	byte	0
24321                 | LR__4218
24321     63 75 72 73 
24325     6F 72       | 	byte	"cursor"
24327     00          | 	byte	0
24328                 | LR__4219
24328     63 6C 69 63 
2432c     6B          | 	byte	"click"
2432d     00          | 	byte	0
2432e                 | LR__4220
2432e     64 65 66 73 
24332     70 72 69 74 
24336     65          | 	byte	"defsprite"
24337     00          | 	byte	0
24338                 | LR__4221
24338     73 70 72 69 
2433c     74 65       | 	byte	"sprite"
2433e     00          | 	byte	0
2433f                 | LR__4222
2433f     77 61 69 74 
24343     63 6C 6F 63 
24347     6B          | 	byte	"waitclock"
24348     00          | 	byte	0
24349                 | LR__4223
24349     66 69 6C 6C | 	byte	"fill"
2434d     00          | 	byte	0
2434e                 | LR__4224
2434e     64 69 6D    | 	byte	"dim"
24351     00          | 	byte	0
24352                 | LR__4225
24352     72 6E 64    | 	byte	"rnd"
24355     00          | 	byte	0
24356                 | LR__4226
24356     6D 6F 75 73 
2435a     65 78       | 	byte	"mousex"
2435c     00          | 	byte	0
2435d                 | LR__4227
2435d     6D 6F 75 73 
24361     65 79       | 	byte	"mousey"
24363     00          | 	byte	0
24364                 | LR__4228
24364     6D 6F 75 73 
24368     65 6B       | 	byte	"mousek"
2436a     00          | 	byte	0
2436b                 | LR__4229
2436b     6D 6F 75 73 
2436f     65 77       | 	byte	"mousew"
24371     00          | 	byte	0
24372                 | LR__4230
24372     67 65 74 74 
24376     69 6D 65    | 	byte	"gettime"
24379     00          | 	byte	0
2437a                 | LR__4231
2437a     73 69 6E    | 	byte	"sin"
2437d     00          | 	byte	0
2437e                 | LR__4232
2437e     73 74 69 63 
24382     6B          | 	byte	"stick"
24383     00          | 	byte	0
24384                 | LR__4233
24384     73 74 72 69 
24388     67          | 	byte	"strig"
24389     00          | 	byte	0
2438a                 | LR__4234
2438a     67 65 74 70 
2438e     69 78 65 6C | 	byte	"getpixel"
24392     00          | 	byte	0
24393                 | LR__4235
24393     61          | 	byte	"a"
24394     00          | 	byte	0
24395                 | LR__4236
24395     7A          | 	byte	"z"
24396     00          | 	byte	0
24397                 | LR__4237
24397     5F          | 	byte	"_"
24398     00          | 	byte	0
24399                 | LR__4238
24399     61          | 	byte	"a"
2439a     00          | 	byte	0
2439b                 | LR__4239
2439b     7A          | 	byte	"z"
2439c     00          | 	byte	0
2439d                 | LR__4240
2439d     30          | 	byte	"0"
2439e     00          | 	byte	0
2439f                 | LR__4241
2439f     39          | 	byte	"9"
243a0     00          | 	byte	0
243a1                 | LR__4242
243a1     5F          | 	byte	"_"
243a2     00          | 	byte	0
243a3                 | LR__4243
243a3     2E          | 	byte	"."
243a4     00          | 	byte	0
243a5                 | LR__4244
243a5     61          | 	byte	"a"
243a6     00          | 	byte	0
243a7                 | LR__4245
243a7     7A          | 	byte	"z"
243a8     00          | 	byte	0
243a9                 | LR__4246
243a9     30          | 	byte	"0"
243aa     00          | 	byte	0
243ab                 | LR__4247
243ab     39          | 	byte	"9"
243ac     00          | 	byte	0
243ad                 | LR__4248
243ad     5F          | 	byte	"_"
243ae     00          | 	byte	0
243af                 | LR__4249
243af     24          | 	byte	"$"
243b0     00          | 	byte	0
243b1                 | LR__4250
243b1     25          | 	byte	"%"
243b2     00          | 	byte	0
243b3                 | LR__4251
243b3     21          | 	byte	"!"
243b4     00          | 	byte	0
243b5                 | LR__4252
243b5     30          | 	byte	"0"
243b6     00          | 	byte	0
243b7                 | LR__4253
243b7     39          | 	byte	"9"
243b8     00          | 	byte	0
243b9                 | LR__4254
243b9     2E          | 	byte	"."
243ba     00          | 	byte	0
243bb                 | LR__4255
243bb     24          | 	byte	"$"
243bc     00          | 	byte	0
243bd                 | LR__4256
243bd     25          | 	byte	"%"
243be     00          | 	byte	0
243bf                 | LR__4257
243bf     2D          | 	byte	"-"
243c0     00          | 	byte	0
243c1                 | LR__4258
243c1     2E          | 	byte	"."
243c2     00          | 	byte	0
243c3                 | LR__4259
243c3     30          | 	byte	"0"
243c4     00          | 	byte	0
243c5                 | LR__4260
243c5     39          | 	byte	"9"
243c6     00          | 	byte	0
243c7                 | LR__4261
243c7     5F          | 	byte	"_"
243c8     00          | 	byte	0
243c9                 | LR__4262
243c9     2E          | 	byte	"."
243ca     00          | 	byte	0
243cb                 | LR__4263
243cb     45          | 	byte	"E"
243cc     00          | 	byte	0
243cd                 | LR__4264
243cd     65          | 	byte	"e"
243ce     00          | 	byte	0
243cf                 | LR__4265
243cf     2D          | 	byte	"-"
243d0     00          | 	byte	0
243d1                 | LR__4266
243d1     2D          | 	byte	"-"
243d2     00          | 	byte	0
243d3                 | LR__4267
243d3     65          | 	byte	"e"
243d4     00          | 	byte	0
243d5                 | LR__4268
243d5     2E          | 	byte	"."
243d6     00          | 	byte	0
243d7                 | LR__4269
243d7     45          | 	byte	"E"
243d8     00          | 	byte	0
243d9                 | LR__4270
243d9     65          | 	byte	"e"
243da     00          | 	byte	0
243db                 | LR__4271
243db     30          | 	byte	"0"
243dc     00          | 	byte	0
243dd                 | LR__4272
243dd     39          | 	byte	"9"
243de     00          | 	byte	0
243df                 | LR__4273
243df     24          | 	byte	"$"
243e0     00          | 	byte	0
243e1                 | LR__4274
243e1     25          | 	byte	"%"
243e2     00          | 	byte	0
243e3                 | LR__4275
243e3     2D          | 	byte	"-"
243e4     00          | 	byte	0
243e5                 | LR__4276
243e5     30          | 	byte	"0"
243e6     00          | 	byte	0
243e7                 | LR__4277
243e7     39          | 	byte	"9"
243e8     00          | 	byte	0
243e9                 | LR__4278
243e9     5F          | 	byte	"_"
243ea     00          | 	byte	0
243eb                 | LR__4279
243eb     30          | 	byte	"0"
243ec     00          | 	byte	0
243ed                 | LR__4280
243ed     39          | 	byte	"9"
243ee     00          | 	byte	0
243ef                 | LR__4281
243ef     5F          | 	byte	"_"
243f0     00          | 	byte	0
243f1                 | LR__4282
243f1     22          | 	byte	34
243f2     00          | 	byte	0
243f3                 | LR__4283
243f3     22          | 	byte	34
243f4     00          | 	byte	0
243f5                 | LR__4284
243f5     28          | 	byte	"("
243f6     00          | 	byte	0
243f7                 | LR__4285
243f7     61 73       | 	byte	"as"
243f9     00          | 	byte	0
243fa                 | LR__4286
243fa     61 73       | 	byte	"as"
243fc     00          | 	byte	0
243fd                 | LR__4287
243fd     2C          | 	byte	","
243fe     00          | 	byte	0
243ff                 | LR__4288
243ff     29          | 	byte	")"
24400     00          | 	byte	0
24401                 | LR__4289
24401     29          | 	byte	")"
24402     00          | 	byte	0
24403                 | LR__4290
24403     61 73       | 	byte	"as"
24405     00          | 	byte	0
24406                 | LR__4291
24406     62 79 74 65 | 	byte	"byte"
2440a     00          | 	byte	0
2440b                 | LR__4292
2440b     75 62 79 74 
2440f     65          | 	byte	"ubyte"
24410     00          | 	byte	0
24411                 | LR__4293
24411     73 68 6F 72 
24415     74          | 	byte	"short"
24416     00          | 	byte	0
24417                 | LR__4294
24417     75 73 68 6F 
2441b     72 74       | 	byte	"ushort"
2441d     00          | 	byte	0
2441e                 | LR__4295
2441e     6C 6F 6E 67 | 	byte	"long"
24422     00          | 	byte	0
24423                 | LR__4296
24423     69 6E 74 65 
24427     67 65 72    | 	byte	"integer"
2442a     00          | 	byte	0
2442b                 | LR__4297
2442b     75 6C 6F 6E 
2442f     67          | 	byte	"ulong"
24430     00          | 	byte	0
24431                 | LR__4298
24431     69 6E 74 36 
24435     34          | 	byte	"int64"
24436     00          | 	byte	0
24437                 | LR__4299
24437     75 69 6E 74 
2443b     36 34       | 	byte	"uint64"
2443d     00          | 	byte	0
2443e                 | LR__4300
2443e     73 69 6E 67 
24442     6C 65       | 	byte	"single"
24444     00          | 	byte	0
24445                 | LR__4301
24445     64 6F 75 62 
24449     6C 65       | 	byte	"double"
2444b     00          | 	byte	0
2444c                 | LR__4302
2444c     73 74 72 69 
24450     6E 67       | 	byte	"string"
24452     00          | 	byte	0
24453                 | LR__4303
24453     74 6F       | 	byte	"to"
24455     00          | 	byte	0
24456                 | LR__4304
24456     73 74 65 70 | 	byte	"step"
2445a     00          | 	byte	0
2445b                 | LR__4305
2445b     57 65 20 68 
2445f     61 76 65 20 
24463     61 20 73 6C 
24467     6F 77 20 67 
2446b     6F 74 6F 2C 
2446f     20 74 6F 64 
24473     6F 20 20    | 	byte	"We have a slow goto, todo  "
24476     00          | 	byte	0
24477                 | LR__4306
24477     6E 6F 6E 61 
2447b     6D 65 2E 62 
2447f     61 73       | 	byte	"noname.bas"
24481     00          | 	byte	0
24482                 | LR__4307
24482                 | 	byte	
24482     00          | 	byte	0
24483                 | LR__4308
24483     6E 6F 6E 61 
24487     6D 65 2E 62 
2448b     61 73       | 	byte	"noname.bas"
2448d     00          | 	byte	0
2448e                 | LR__4309
2448e     2F          | 	byte	"/"
2448f     00          | 	byte	0
24490                 | LR__4310
24490                 | 	byte	
24490     00          | 	byte	0
24491                 | LR__4311
24491                 | 	byte	
24491     00          | 	byte	0
24492                 | LR__4312
24492     6E 6F 6E 61 
24496     6D 65 2E 62 
2449a     61 73       | 	byte	"noname.bas"
2449c     00          | 	byte	0
2449d                 | LR__4313
2449d     2F          | 	byte	"/"
2449e     00          | 	byte	0
2449f                 | LR__4314
2449f     53 79 73 74 
244a3     65 6D 20 65 
244a7     72 72 6F 72 
244ab     20          | 	byte	"System error "
244ac     00          | 	byte	0
244ad                 | LR__4315
244ad     3A 20       | 	byte	": "
244af     00          | 	byte	0
244b0                 | LR__4316
244b0     2F          | 	byte	"/"
244b1     00          | 	byte	0
244b2                 | LR__4317
244b2     30          | 	byte	"0"
244b3     00          | 	byte	0
244b4                 | LR__4318
244b4     39          | 	byte	"9"
244b5     00          | 	byte	0
244b6                 | LR__4319
244b6                 | 	byte	
244b6     00          | 	byte	0
244b7                 | LR__4320
244b7     53 74 6F 70 
244bb     70 65 64 20 
244bf     61 74 20 6C 
244c3     69 6E 65 20 | 	byte	"Stopped at line "
244c7     00          | 	byte	0
244c8                 | LR__4321
244c8     45 72 72 6F 
244cc     72 20       | 	byte	"Error "
244ce     00          | 	byte	0
244cf                 | LR__4322
244cf     3A 20       | 	byte	": "
244d1     00          | 	byte	0
244d2                 | LR__4323
244d2                 | 	byte	
244d2     00          | 	byte	0
244d3                 | LR__4324
244d3     72 6E 64 3A 
244d7     20          | 	byte	"rnd: "
244d8     00          | 	byte	0
244d9                 | LR__4325
244d9     72 6E 64 3A 
244dd     20          | 	byte	"rnd: "
244de     00          | 	byte	0
244df                 | LR__4326
244df     73 69 6E 3A 
244e3     20          | 	byte	"sin: "
244e4     00          | 	byte	0
244e5                 | LR__4327
244e5     73 69 6E 3A 
244e9     20          | 	byte	"sin: "
244ea     00          | 	byte	0
244eb                 | LR__4328
244eb     73 74 69 63 
244ef     6B 3A 20    | 	byte	"stick: "
244f2     00          | 	byte	0
244f3                 | LR__4329
244f3     73 74 72 69 
244f7     67 3A 20    | 	byte	"strig: "
244fa     00          | 	byte	0
244fb                 | LR__4330
244fb     67 65 74 70 
244ff     69 78 65 6C 
24503     3A 20       | 	byte	"getpixel: "
24505     00          | 	byte	0
24506                 | LR__4331
24506                 | 	byte	
24506     00          | 	byte	0
24507                 | LR__4332
24507     2F 73 64 2F 
2450b     62 61 73    | 	byte	"/sd/bas"
2450e     00          | 	byte	0
2450f                 | LR__4333
2450f     57 6F 72 6B 
24513     69 6E 67 20 
24517     64 69 72 65 
2451b     63 74 6F 72 
2451f     79 3A 20    | 	byte	"Working directory: "
24522     00          | 	byte	0
24523                 | LR__4334
24523     2A          | 	byte	"*"
24524     00          | 	byte	0
24525                 | LR__4335
24525                 | 	byte	
24525     00          | 	byte	0
24526                 | LR__4336
24526     5B 64 69 72 
2452a     5D 20       | 	byte	"[dir] "
2452c     00          | 	byte	0
2452d                 | LR__4337
2452d     2A          | 	byte	"*"
2452e     00          | 	byte	0
2452f                 | LR__4338
2452f                 | 	byte	
2452f     00          | 	byte	0
24530                 | LR__4339
24530     2D 2D 2D 2D 
24534     2D 6D 6F 72 
24538     65 2C 20 70 
2453c     72 65 73 73 
24540     20 61 6E 79 
24544     20 6B 65 79 | 	byte	"-----more, press any key"
24548     00          | 	byte	0
24549                 | LR__4340
24549     20 20 20 20 
      ...             
24561     20 20 20 20 
24565     20          | 	byte	"                             "
24566     00          | 	byte	0
24567                 | LR__4341
24567     2F          | 	byte	"/"
24568     00          | 	byte	0
24569                 | LR__4342
24569     2F 73 64 2F 
2456d     62 69 6E 2F | 	byte	"/sd/bin/"
24571     00          | 	byte	0
24572                 | LR__4343
24572     53 79 73 74 
24576     65 6D 20 65 
2457a     72 72 6F 72 
2457e     20          | 	byte	"System error "
2457f     00          | 	byte	0
24580                 | LR__4344
24580     3A 20       | 	byte	": "
24582     00          | 	byte	0
24583                 | LR__4345
24583                 | 	byte	
24583     00          | 	byte	0
24584                 | LR__4346
24584     45 78 70 65 
24588     63 74 65 64 
2458c     20 6E 75 6D 
24590     62 65 72 2C 
24594     20 67 6F 74 
24598     20 73 6F 6D 
2459c     65 74 68 69 
245a0     6E 67 20 65 
245a4     6C 73 65 2E | 	byte	"Expected number, got something else."
245a8     00          | 	byte	0
245a9                 | LR__4347
245a9     43 61 6E 6E 
245ad     6F 74 20 61 
245b1     64 64 20 61 
245b5     20 6E 75 6D 
245b9     62 65 72 20 
245bd     74 6F 20 61 
245c1     20 73 74 72 
245c5     69 6E 67 2E | 	byte	"Cannot add a number to a string."
245c9     00          | 	byte	0
245ca                 | LR__4348
245ca     43 61 6E 6E 
245ce     6F 74 20 73 
245d2     75 62 73 74 
245d6     72 61 63 74 
245da     20 73 74 72 
245de     69 6E 67 73 
245e2     2E          | 	byte	"Cannot substract strings."
245e3     00          | 	byte	0
245e4                 | LR__4349
245e4     55 6E 6B 6E 
245e8     6F 77 6E 20 
245ec     65 72 72 6F 
245f0     72 20 77 68 
245f4     69 6C 65 20 
245f8     61 64 64 69 
245fc     6E 67 2E    | 	byte	"Unknown error while adding."
245ff     00          | 	byte	0
24600                 | LR__4350
24600     55 6E 6B 6E 
24604     6F 77 6E 20 
24608     65 72 72 6F 
2460c     72 20 77 68 
24610     69 6C 65 20 
24614     73 75 62 73 
24618     74 72 61 63 
2461c     74 69 6E 67 
24620     2E          | 	byte	"Unknown error while substracting."
24621     00          | 	byte	0
24622                 | LR__4351
24622     43 61 6E 6E 
24626     6F 74 20 64 
2462a     6F 20 6C 6F 
2462e     67 69 63 20 
24632     6F 70 65 72 
24636     61 74 69 6F 
2463a     6E 20 6F 6E 
2463e     20 73 74 72 
24642     69 6E 67 20 
24646     6F 72 20 66 
2464a     6C 6F 61 74 
2464e     2E          | 	byte	"Cannot do logic operation on string or float."
2464f     00          | 	byte	0
24650                 | LR__4352
24650     55 6E 6B 6E 
24654     6F 77 6E 20 
24658     65 72 72 6F 
2465c     72 20 77 68 
24660     69 6C 65 20 
24664     64 6F 69 6E 
24668     67 20 6C 6F 
2466c     67 69 63 20 
24670     6F 70 65 72 
24674     61 74 69 6F 
24678     6E 2E       | 	byte	"Unknown error while doing logic operation."
2467a     00          | 	byte	0
2467b                 | LR__4353
2467b     43 61 6E 6E 
2467f     6F 74 20 6D 
24683     75 6C 74 69 
24687     70 6C 79 20 
2468b     73 74 72 69 
2468f     6E 67 73 2E | 	byte	"Cannot multiply strings."
24693     00          | 	byte	0
24694                 | LR__4354
24694     55 6E 6B 6E 
24698     6F 77 6E 20 
2469c     65 72 72 6F 
246a0     72 20 77 68 
246a4     69 6C 65 20 
246a8     6D 75 6C 74 
246ac     69 70 6C 79 
246b0     69 6E 67 2E | 	byte	"Unknown error while multiplying."
246b4     00          | 	byte	0
246b5                 | LR__4355
246b5     43 61 6E 6E 
246b9     6F 74 20 64 
246bd     69 76 69 64 
246c1     65 20 73 74 
246c5     72 69 6E 67 
246c9     73 2E       | 	byte	"Cannot divide strings."
246cb     00          | 	byte	0
246cc                 | LR__4356
246cc     55 6E 6B 6E 
246d0     6F 77 6E 20 
246d4     65 72 72 6F 
246d8     72 20 77 68 
246dc     69 6C 65 20 
246e0     64 69 76 69 
246e4     64 69 6E 67 
246e8     2E          | 	byte	"Unknown error while dividing."
246e9     00          | 	byte	0
246ea                 | LR__4357
246ea     43 61 6E 6E 
246ee     6F 74 20 63 
246f2     6F 6D 70 75 
246f6     74 65 20 61 
246fa     20 70 6F 77 
246fe     65 72 20 6F 
24702     66 20 61 20 
24706     73 74 72 69 
2470a     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2470d     00          | 	byte	0
2470e                 | LR__4358
2470e     55 6E 6B 6E 
24712     6F 77 6E 20 
24716     65 72 72 6F 
2471a     72 20 77 68 
2471e     69 6C 65 20 
24722     63 6F 6D 70 
24726     75 74 69 6E 
2472a     67 20 61 20 
2472e     70 6F 77 65 
24732     72 2E       | 	byte	"Unknown error while computing a power."
24734     00          | 	byte	0
24735                 | LR__4359
24735     52 69 67 68 
24739     74 20 70 61 
2473d     72 65 6E 74 
24741     68 65 73 69 
24745     73 20 65 78 
24749     70 65 63 74 
2474d     65 64 2E    | 	byte	"Right parenthesis expected."
24750     00          | 	byte	0
24751                 | LR__4360
24751     45 78 70 65 
24755     63 74 65 64 
24759     20 73 74 72 
2475d     69 6E 67 2E | 	byte	"Expected string."
24761     00          | 	byte	0
24762                 | LR__4361
24762     45 78 70 65 
24766     63 74 65 64 
2476a     20 66 6C 6F 
2476e     61 74 2E    | 	byte	"Expected float."
24771     00          | 	byte	0
24772                 | LR__4362
24772     45 78 70 65 
24776     63 74 65 64 
2477a     20 75 6E 73 
2477e     69 67 6E 65 
24782     64 20 69 6E 
24786     74 65 67 65 
2478a     72 2E       | 	byte	"Expected unsigned integer."
2478c     00          | 	byte	0
2478d                 | LR__4363
2478d     45 78 70 65 
24791     63 74 65 64 
24795     20 69 6E 74 
24799     65 67 65 72 
2479d     2E          | 	byte	"Expected integer."
2479e     00          | 	byte	0
2479f                 | LR__4364
2479f     4E 6F 20 6D 
247a3     6F 72 65 20 
247a7     76 61 72 69 
247ab     61 62 6C 65 
247af     20 73 6C 6F 
247b3     74 73 2E    | 	byte	"No more variable slots."
247b6     00          | 	byte	0
247b7                 | LR__4365
247b7     56 61 72 69 
247bb     61 62 6C 65 
247bf     20 6E 6F 74 
247c3     20 66 6F 75 
247c7     6E 64 2E    | 	byte	"Variable not found."
247ca     00          | 	byte	0
247cb                 | LR__4366
247cb     43 6F 6D 6D 
247cf     61 20 65 78 
247d3     70 65 63 74 
247d7     65 64 2E    | 	byte	"Comma expected."
247da     00          | 	byte	0
247db                 | LR__4367
247db     43 6F 6D 6D 
247df     61 20 6F 72 
247e3     20 73 65 6D 
247e7     69 63 6F 6C 
247eb     6F 6E 20 65 
247ef     78 70 65 63 
247f3     74 65 64 2E | 	byte	"Comma or semicolon expected."
247f7     00          | 	byte	0
247f8                 | LR__4368
247f8     55 6E 6B 6E 
247fc     6F 77 6E 20 
24800     63 6F 6D 6D 
24804     61 6E 64 2E | 	byte	"Unknown command."
24808     00          | 	byte	0
24809                 | LR__4369
24809     53 74 61 63 
2480d     6B 20 75 6E 
24811     64 65 72 66 
24815     6C 6F 77 2E | 	byte	"Stack underflow."
24819     00          | 	byte	0
2481a                 | LR__4370
2481a     43 61 6E 6E 
2481e     6F 74 20 65 
24822     78 65 63 75 
24826     74 65 20 67 
2482a     6F 74 6F 20 
2482e     69 6E 20 74 
24832     68 65 20 69 
24836     6D 6D 65 64 
2483a     69 61 74 65 
2483e     20 6D 6F 64 
24842     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
24844     00          | 	byte	0
24845                 | LR__4371
24845     43 61 6E 6E 
24849     6F 74 20 6C 
2484d     6F 61 64 20 
24851     66 72 6F 6D 
24855     20 74 68 69 
24859     73 20 66 69 
2485d     6C 65 2E    | 	byte	"Cannot load from this file."
24860     00          | 	byte	0
24861                 | LR__4372
24861     54 68 65 20 
24865     70 72 6F 67 
24869     72 61 6D 20 
2486d     69 73 20 65 
24871     6D 70 74 79 
24875     2E          | 	byte	"The program is empty."
24876     00          | 	byte	0
24877                 | LR__4373
24877     49 66 20 61 
2487b     66 74 65 72 
2487f     20 69 66 2E | 	byte	"If after if."
24883     00          | 	byte	0
24884                 | LR__4374
24884     45 6D 70 74 
24888     79 20 65 78 
2488c     70 72 65 73 
24890     73 69 6F 6E 
24894     2E          | 	byte	"Empty expression."
24895     00          | 	byte	0
24896                 | LR__4375
24896     53 74 72 69 
2489a     6E 67 20 65 
2489e     78 70 65 63 
248a2     74 65 64 2E | 	byte	"String expected."
248a6     00          | 	byte	0
248a7                 | LR__4376
248a7     49 6E 74 65 
248ab     72 70 72 65 
248af     74 65 72 20 
248b3     69 6E 74 65 
248b7     72 6E 61 6C 
248bb     20 65 72 72 
248bf     6F 72 2E    | 	byte	"Interpreter internal error."
248c2     00          | 	byte	0
248c3                 | LR__4377
248c3     45 78 70 65 
248c7     63 74 65 64 
248cb     20 61 73 73 
248cf     69 67 6E 2E | 	byte	"Expected assign."
248d3     00          | 	byte	0
248d4                 | LR__4378
248d4     45 78 70 65 
248d8     63 74 65 64 
248dc     20 27 74 6F 
248e0     27 2E       | 	byte	"Expected 'to'."
248e2     00          | 	byte	0
248e3                 | LR__4379
248e3     45 78 70 65 
248e7     63 74 65 64 
248eb     20 69 6E 74 
248ef     65 67 65 72 
248f3     20 76 61 72 
248f7     69 61 62 6C 
248fb     65 2E       | 	byte	"Expected integer variable."
248fd     00          | 	byte	0
248fe                 | LR__4380
248fe     55 6E 69 6E 
24902     69 74 69 61 
24906     6C 69 7A 65 
2490a     64 20 76 61 
2490e     72 69 61 62 
24912     6C 65 20 69 
24916     6E 20 27 6E 
2491a     65 78 74 27 
2491e     2C 20 75 73 
24922     65 20 27 66 
24926     6F 72 27 20 
2492a     62 65 66 6F 
2492e     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
24931     00          | 	byte	0
24932                 | LR__4381
24932     4E 6F 20 6D 
24936     6F 72 65 20 
2493a     73 6C 6F 74 
2493e     73 20 66 6F 
24942     72 20 27 66 
24946     6F 72 27 2E | 	byte	"No more slots for 'for'."
2494a     00          | 	byte	0
2494b                 | LR__4382
2494b     27 4E 65 78 
2494f     74 27 20 64 
24953     6F 65 73 6E 
24957     27 74 20 6D 
2495b     61 74 63 68 
2495f     20 27 66 6F 
24963     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
24966     00          | 	byte	0
24967                 | LR__4383
24967     27 47 6F 74 
2496b     6F 27 20 74 
2496f     61 72 67 65 
24973     74 20 6C 69 
24977     6E 65 20 6E 
2497b     6F 74 20 66 
2497f     6F 75 6E 64 
24983     2E          | 	byte	"'Goto' target line not found."
24984     00          | 	byte	0
24985                 | LR__4384
24985     42 61 64 20 
24989     6E 75 6D 62 
2498d     65 72 20 6F 
24991     66 20 70 61 
24995     72 61 6D 65 
24999     74 65 72 73 | 	byte	"Bad number of parameters"
2499d     00          | 	byte	0
2499e                 | LR__4385
2499e     46 75 6E 63 
249a2     74 69 6F 6E 
249a6     20 75 6E 64 
249aa     65 66 69 6E 
249ae     65 64 20 66 
249b2     6F 72 20 73 
249b6     74 72 69 6E 
249ba     67 73       | 	byte	"Function undefined for strings"
249bc     00          | 	byte	0
249bd                 | LR__4386
249bd     42 61 64 20 
249c1     70 61 72 61 
249c5     6D 65 74 65 
249c9     72 2E       | 	byte	"Bad parameter."
249cb     00          | 	byte	0
249cc                 | LR__4387
249cc     43 61 6E 6E 
249d0     6F 74 20 64 
249d4     65 63 6C 61 
249d8     72 65 20 61 
249dc     6E 20 61 72 
249e0     72 61 79 3A 
249e4     20 74 68 65 
249e8     20 76 61 72 
249ec     69 61 62 6C 
249f0     65 20 65 78 
249f4     69 73 74 73 
249f8     2E          | 	byte	"Cannot declare an array: the variable exists."
249f9     00          | 	byte	0
249fa                 | LR__4388
249fa     45 78 70 65 
249fe     63 74 65 64 
24a02     20 27 28 27 
24a06     2E          | 	byte	"Expected '('."
24a07     00          | 	byte	0
24a08                 | LR__4389
24a08     45 78 70 65 
24a0c     63 74 65 64 
24a10     20 27 29 27 
24a14     20 6F 72 20 
24a18     27 2C 27 2E | 	byte	"Expected ')' or ','."
24a1c     00          | 	byte	0
24a1d                 | LR__4390
24a1d     4E 6F 20 6D 
24a21     6F 72 65 20 
24a25     74 68 61 6E 
24a29     20 33 20 64 
24a2d     69 6D 65 6E 
24a31     73 69 6F 6E 
24a35     73 20 73 75 
24a39     70 70 6F 72 
24a3d     74 65 64    | 	byte	"No more than 3 dimensions supported"
24a40     00          | 	byte	0
24a41                 | LR__4391
24a41     56 61 72 69 
24a45     61 62 6C 65 
24a49     20 6E 61 6D 
24a4d     65 20 65 78 
24a51     70 65 63 74 
24a55     65 64       | 	byte	"Variable name expected"
24a57     00          | 	byte	0
24a58                 | LR__4392
24a58     54 79 70 65 
24a5c     20 6E 61 6D 
24a60     65 20 65 78 
24a64     70 65 63 74 
24a68     65 64       | 	byte	"Type name expected"
24a6a     00          | 	byte	0
24a6b                 | LR__4393
24a6b     54 79 70 65 
24a6f     20 6E 6F 74 
24a73     20 73 75 70 
24a77     70 6F 72 74 
24a7b     65 64 20 79 
24a7f     65 74       | 	byte	"Type not supported yet"
24a81     00          | 	byte	0
24a82                 | LR__4394
24a82     45 72 72 6F 
24a86     72 20       | 	byte	"Error "
24a88     00          | 	byte	0
24a89                 | LR__4395
24a89     3A 20       | 	byte	": "
24a8b     00          | 	byte	0
24a8c                 | LR__4396
24a8c     2F 73 64    | 	byte	"/sd"
24a8f     00          | 	byte	0
24a90                 | LR__4397
24a90     2F 73 64 2F 
24a94     62 61 73    | 	byte	"/sd/bas"
24a97     00          | 	byte	0
24a98                 | LR__4398
24a98     2F 73 64 2F 
24a9c     62 61 73    | 	byte	"/sd/bas"
24a9f     00          | 	byte	0
24aa0                 | LR__4399
24aa0     20 42 41 53 
24aa4     49 43 20 62 
24aa8     79 74 65 73 
24aac     20 66 72 65 
24ab0     65          | 	byte	" BASIC bytes free"
24ab1     00          | 	byte	0
24ab2                 | LR__4400
24ab2     52 65 61 64 
24ab6     79          | 	byte	"Ready"
24ab7     00          | 	byte	0
24ab8                 | LR__4401
24ab8     20          | 	byte	" "
24ab9     00          | 	byte	0
24aba                 | LR__4402
24aba     20          | 	byte	" "
24abb     00          | 	byte	0
24abc                 | LR__4403
24abc                 | 	byte	
24abc     00          | 	byte	0
24abd                 | LR__4404
24abd                 | 	byte	
24abd     00          | 	byte	0
24abe     00 00       | 	alignl
24ac0                 | _dat_
24ac0     00 00 00 00 
24ac4     00 00 00 00 
24ac8     00 00 00 00 
24acc     00 00 00 00 | 	byte	$00[16]
24ad0     61 41 17 0E 
24ad4     62 42 00 00 
24ad8     63 43 19 10 
24adc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
24ae0     65 45 18 0F 
24ae4     66 46 00 00 
24ae8     67 47 00 00 
24aec     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
24af0     69 49 00 00 
24af4     6A 4A 00 00 
24af8     6B 4B 00 00 
24afc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
24b00     6D 4D 00 00 
24b04     6E 4E 1A 11 
24b08     6F 4F 1E 15 
24b0c     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
24b10     71 51 00 00 
24b14     72 52 00 00 
24b18     73 53 1B 12 
24b1c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
24b20     75 55 00 00 
24b24     76 56 00 00 
24b28     77 57 00 00 
24b2c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
24b30     79 59 00 00 
24b34     7A 5A 1D 14 
24b38     31 21 04 00 
24b3c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
24b40     33 23 06 00 
24b44     34 24 07 00 
24b48     35 25 08 00 
24b4c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
24b50     37 26 0A 00 
24b54     38 2A 0B 00 
24b58     39 28 0C 00 
24b5c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
24b60     8D 8D 00 00 
24b64     9B 9B 00 00 
24b68     88 88 00 00 
24b6c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
24b70     20 20 00 00 
24b74     2D 5F 00 00 
24b78     3D 2B 00 00 
24b7c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
24b80     5D 7D 00 00 
24b84     5C 7C 00 00 
24b88     23 7E 00 00 
24b8c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
24b90     27 22 00 00 
24b94     60 7E 03 00 
24b98     2C 3C 00 00 
24b9c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
24ba0     2F 3F 00 00 
24ba4     B9 B9 00 00 
24ba8     BA 00 00 00 
24bac     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
24bb0     BC 00 00 00 
24bb4     BD 00 00 00 
24bb8     BE 00 00 00 
24bbc     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
24bc0     C0 00 00 00 
24bc4     C1 00 00 00 
24bc8     C2 00 00 00 
24bcc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
24bd0     C4 00 00 00 
24bd4     C5 00 00 00 
24bd8     C6 00 00 00 
24bdc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
24be0     C8 00 00 00 
24be4     C9 00 00 00 
24be8     CA 00 00 00 
24bec     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
24bf0     7F 7F 00 00 
24bf4     CC 00 00 00 
24bf8     CD 00 00 00 
24bfc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
24c00     CF 00 00 00 
24c04     D0 00 00 00 
24c08     D1 00 00 00 
24c0c     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
24c10     2F 2F 00 00 
24c14     2A 2A 00 00 
24c18     2D 2D 00 00 
24c1c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
24c20     8D 8D 00 00 
24c24     31 31 00 00 
24c28     32 32 00 00 
24c2c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
24c30     34 34 00 00 
24c34     35 35 00 00 
24c38     36 36 00 00 
24c3c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
24c40     38 38 00 00 
24c44     39 39 00 00 
24c48     30 30 00 00 
24c4c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
24c50     5C 7C 00 00 
24c54     00 00 00 00 
24c58     00 00 00 00 
24c5c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
24c60     00 00 00 00 
      ...             
24cb8     00 00 00 00 
24cbc     00 00 00 00 | 	byte	$00[96]
24cc0     2B 00 A6 F2 
24cc4     24 A7 09 80 
24cc8     5B 88 4D 89 
24ccc     80 88 A5 88 | atari_spl file "atari.spl"
24cd0     6D 88 B8 88 
24cd4     80 88 CB 88 
24cd8     92 88 A5 88 
24cdc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
24ce0     A5 88 CA 88 
24ce4     A6 88 DD 88 
24ce8     B8 88 AB 89 
24cec     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
24cf0     C8 AD C6 F1 
24cf4     91 06 B6 FF 
24cf8     13 00 4A 00 
24cfc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
24d00     5D 00 5E 00 
24d04     5D 00 5E 00 
24d08     5E 00 5D 00 
24d0c     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
24d10     38 00 83 00 
24d14     25 00 83 00 
24d18     C3 FE D1 04 
24d1c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
24d20     48 88 38 85 
24d24     41 8A CB 88 
24d28     28 89 B8 88 
24d2c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
24d30     15 89 03 89 
24d34     02 89 15 89 
24d38     16 89 15 89 
24d3c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
24d40     15 89 3A 89 
24d44     72 89 E3 89 
24d48     52 83 AD 97 
24d4c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
24d50     0C 02 B6 FF 
24d54     E1 00 A8 00 
24d58     F3 00 A8 00 
24d5c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
24d60     CE 00 CD 00 
24d64     CD 00 BA 00 
24d68     E1 00 BB 00 
24d6c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
24d70     DF 00 C9 FF 
24d74     E6 01 B6 06 
24d78     EE DD 8D 98 
24d7c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
24d80     97 89 73 89 
24d84     3B 89 60 89 
24d88     60 89 60 89 
24d8c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
24d90     73 89 72 89 
24d94     85 89 73 89 
24d98     AA 89 60 89 
24d9c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
24da0     E8 8A 18 86 
24da4     92 88 A5 C2 
24da8     E0 00 C3 05 
24dac     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
24db0     F2 00 64 01 
24db4     06 01 3E 01 
24db8     2B 01 2B 01 
24dbc     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
24dc0     2B 01 2A 01 
24dc4     2B 01 2B 01 
24dc8     2B 01 18 01 
24dcc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
24dd0     39 07 61 F3 
24dd4     C0 AF 37 85 
24dd8     0F 88 8B 8A 
24ddc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
24de0     AB 89 D0 89 
24de4     AB 89 D0 89 
24de8     D0 89 CF 89 
24dec     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
24df0     D0 89 F5 89 
24df4     BD 89 08 8A 
24df8     CF 89 E8 8A 
24dfc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
24e00     53 B3 0D F8 
24e04     F4 07 38 00 
24e08     63 01 63 01 
24e0c     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
24e10     88 01 88 01 
24e14     76 01 88 01 
24e18     88 01 89 01 
24e1c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
24e20     75 01 AE 01 
24e24     76 01 88 01 
24e28     4A 00 46 06 
24e2c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
24e30     08 8A 9A 86 
24e34     33 8B 08 8A 
24e38     2D 8A F5 89 
24e3c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
24e40     2D 8A 2D 8A 
24e44     2E 8A 1B 8A 
24e48     40 8A 2D 8A 
24e4c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
24e50     2E 8A 79 8A 
24e54     66 8A C8 8B 
24e58     72 82 2B 97 
24e5c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
24e60     1D 02 05 01 
24e64     F8 01 C0 01 
24e68     0B 02 C0 01 
24e6c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
24e70     F9 01 D3 01 
24e74     F8 01 D3 01 
24e78     F8 01 D2 01 
24e7c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
24e80     E6 01 2B 01 
24e84     8E 02 5F 07 
24e88     F7 E2 ED 9C 
24e8c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
24e90     E8 8A 78 8A 
24e94     78 8A 65 8A 
24e98     8B 8A 78 8A 
24e9c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
24ea0     8B 8A 9D 8A 
24ea4     9D 8A 8B 8A 
24ea8     C2 8A 78 8A 
24eac     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
24eb0     70 8C 18 86 
24eb4     8B 8A 23 C9 
24eb8     CB 03 C4 05 
24ebc     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
24ec0     0B 02 7B 02 
24ec4     1E 02 55 02 
24ec8     30 02 43 02 
24ecc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
24ed0     43 02 44 02 
24ed4     43 02 30 02 
24ed8     68 02 31 02 
24edc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
24ee0     07 08 3F F7 
24ee4     73 B2 13 85 
24ee8     15 89 ED 8B 
24eec     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
24ef0     B0 8A FB 8A 
24ef4     D5 8A FA 8A 
24ef8     E8 8A FB 8A 
24efc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
24f00     E8 8A 21 8B 
24f04     E7 8A 33 8B 
24f08     E8 8A 26 8C 
24f0c     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
24f10     8D B0 27 F6 
24f14     9C 08 AD 01 
24f18     7B 02 8D 02 
24f1c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
24f20     A1 02 A0 02 
24f24     A1 02 A0 02 
24f28     A0 02 A0 02 
24f2c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
24f30     7B 02 D8 02 
24f34     7B 02 C6 02 
24f38     3E 01 C3 05 
24f3c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
24f40     00 8C 2A 86 
24f44     E0 8C FA 8A 
24f48     6A 8B FB 8A 
24f4c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
24f50     45 8B 45 8B 
24f54     45 8B 6B 8B 
24f58     46 8B 59 8B 
24f5c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
24f60     6B 8B 6B 8B 
24f64     6B 8B 6B 8B 
24f68     7D 8B 7D 8B 
24f6c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
24f70     90 8B 91 8B 
24f74     90 8B 90 8B 
24f78     A3 8B A3 8B 
24f7c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
24f80     B5 8B B6 8B 
24f84     B5 8B B5 8B 
24f88     B6 8B C8 8B 
24f8c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
24f90     C8 8B DA 8B 
24f94     DB 8B DB 8B 
24f98     DB 8B DC 8B 
24f9c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
24fa0     EE 8B EE 8B 
24fa4     00 8C 01 8C 
24fa8     00 8C 01 8C 
24fac     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
24fb0     12 8C 13 8C 
24fb4     13 8C 26 8C 
24fb8     26 8C 26 8C 
24fbc     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
24fc0     38 8C 38 8C 
24fc4     38 8C 38 8C 
24fc8     4B 8C 4B 8C 
24fcc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
24fd0     5E 8C 5E 8C 
24fd4     5E 8C 5E 8C 
24fd8     70 8C 70 8C 
24fdc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
24fe0     70 8C 83 8C 
24fe4     83 8C 83 8C 
24fe8     83 8C 96 8C 
24fec     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
24ff0     95 8C A9 8C 
24ff4     A9 8C A8 8C 
24ff8     A8 8C A8 8C 
24ffc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
25000     BB 8C BB 8C 
25004     BB 8C CE 8C 
25008     CE 8C CE 8C 
2500c     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
25010     E0 8C E1 8C 
25014     E1 8C E0 8C 
25018     F4 8C F2 8C 
2501c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
25020     05 8D 05 8D 
25024     06 8D 06 8D 
25028     19 8D 19 8D 
2502c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
25030     18 8D 2B 8D 
25034     2B 8D 2B 8D 
25038     2A 8D 3E 8D 
2503c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
25040     3E 8D 51 8D 
25044     50 8D 50 8D 
25048     50 8D 51 8D 
2504c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
25050     63 8D 64 8D 
25054     76 8D 75 8D 
25058     75 8D 76 8D 
2505c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
25060     88 8D 88 8D 
25064     89 8D 9B 8D 
25068     9A 8D 9B 8D 
2506c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
25070     AD 8D AE 8D 
25074     AD 8D AE 8D 
25078     C1 8D C1 8D 
2507c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
25080     D3 8D D3 8D 
25084     D3 8D D3 8D 
25088     D3 8D E6 8D 
2508c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
25090     E6 8D E6 8D 
25094     F9 8D F9 8D 
25098     F9 8D F8 8D 
2509c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
250a0     0B 8E 0B 8E 
250a4     1D 8E 1D 8E 
250a8     1E 8E 1E 8E 
250ac     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
250b0     31 8E 31 8E 
250b4     31 8E 42 8E 
250b8     43 8E 43 8E 
250bc     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
250c0     56 8E 56 8E 
250c4     55 8E 56 8E 
250c8     68 8E 69 8E 
250cc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
250d0     69 8E 7B 8E 
250d4     7C 8E 7B 8E 
250d8     7B 8E 8D 8E 
250dc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
250e0     8D 8E A1 8E 
250e4     A0 8E A1 8E 
250e8     A1 8E A0 8E 
250ec     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
250f0     B3 8E B3 8E 
250f4     C6 8E C5 8E 
250f8     C6 8E C6 8E 
250fc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
25100     D8 8E D9 8E 
25104     D8 8E EC 8E 
25108     EB 8E EC 8E 
2510c     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
25110     FE 8E FE 8E 
25114     FE 8E FE 8E 
25118     10 8F 10 8F 
2511c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
25120     11 8F 23 8F 
25124     24 8F 23 8F 
25128     24 8F 37 8F 
2512c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
25130     36 8F 36 8F 
25134     48 8F 49 8F 
25138     49 8F 49 8F 
2513c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
25140     5B 8F 5C 8F 
25144     5B 8F 6E 8F 
25148     6E 8F 6E 8F 
2514c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
25150     81 8F 81 8F 
25154     81 8F 81 8F 
25158     93 8F 93 8F 
2515c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
25160     93 8F A6 8F 
25164     A6 8F A6 8F 
25168     A6 8F B9 8F 
2516c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
25170     B9 8F B9 8F 
25174     CC 8F CB 8F 
25178     CB 8F CC 8F 
2517c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
25180     DF 8F DE 8F 
25184     DE 8F F1 8F 
25188     F1 8F F1 8F 
2518c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
25190     03 90 04 90 
25194     04 90 04 90 
25198     16 90 17 90 
2519c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
251a0     29 90 28 90 
251a4     29 90 28 90 
251a8     29 90 3C 90 
251ac     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
251b0     3C 90 4F 90 
251b4     4E 90 4E 90 
251b8     4E 90 4E 90 
251bc     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
251c0     61 90 61 90 
251c4     73 90 74 90 
251c8     74 90 74 90 
251cc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
251d0     87 90 86 90 
251d4     87 90 86 90 
251d8     99 90 99 90 
251dc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
251e0     AB 90 AB 90 
251e4     AC 90 AB 90 
251e8     AB 90 BF 90 
251ec     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
251f0     BE 90 D1 90 
251f4     D0 90 D1 90 
251f8     D1 90 D1 90 
251fc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
25200     E3 90 E4 90 
25204     F6 90 F6 90 
25208     F6 90 F6 90 
2520c     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
25210     09 91 0A 91 
25214     0A 91 1C 91 
25218     1C 91 1C 91 
2521c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
25220     2F 91 2E 91 
25224     2F 91 2F 91 
25228     2E 91 41 91 
2522c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
25230     41 91 53 91 
25234     54 91 54 91 
25238     53 91 54 91 
2523c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
25240     67 91 67 91 
25244     79 91 7A 91 
25248     79 91 78 91 
2524c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
25250     8C 91 8B 91 
25254     8C 91 8C 91 
25258     9E 91 9E 91 
2525c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
25260     B1 91 B1 91 
25264     B2 91 B1 91 
25268     B1 91 C4 91 
2526c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
25270     C4 91 D6 91 
25274     D7 91 D7 91 
25278     D7 91 D6 91 
2527c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
25280     EA 91 EA 91 
25284     EA 91 FC 91 
25288     FC 91 FB 91 
2528c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
25290     0E 92 0F 92 
25294     0F 92 0E 92 
25298     21 92 21 92 
2529c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
252a0     21 92 34 92 
252a4     33 92 34 92 
252a8     34 92 47 92 
252ac     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
252b0     46 92 47 92 
252b4     59 92 59 92 
252b8     59 92 59 92 
252bc     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
252c0     6C 92 6C 92 
252c4     6B 92 7E 92 
252c8     7E 92 7E 92 
252cc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
252d0     92 92 91 92 
252d4     91 92 90 92 
252d8     91 92 A4 92 
252dc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
252e0     A3 92 B6 92 
252e4     B6 92 B7 92 
252e8     B7 92 B6 92 
252ec     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
252f0     CA 92 C9 92 
252f4     CA 92 DC 92 
252f8     DC 92 DC 92 
252fc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
25300     EF 92 EF 92 
25304     EF 92 EF 92 
25308     01 93 01 93 
2530c     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
25310     15 93 14 93 
25314     14 93 14 93 
25318     14 93 27 93 
2531c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
25320     27 93 39 93 
25324     3A 93 39 93 
25328     39 93 39 93 
2532c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
25330     4B 93 4C 93 
25334     5F 93 5F 93 
25338     5F 93 5E 93 
2533c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
25340     5F 93 84 93 
25344     4C 93 96 93 
25348     5F 93 AE 94 
2534c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
25350     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
25354     7A D7 00 80 
25358     87 8A 48 8F 
2535c     EC 8C 76 8D 
25360     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
25364     3C 8D 82 8D 
25368     42 8D 88 8D 
2536c     8C 8D 8E 8D 
25370     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
25374     97 8D DE 8D 
25378     E1 8D F1 8E 
2537c     D8 8C A3 83 
25380     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
25384     65 71 C9 65 
25388     FC 64 C4 65 
2538c     C1 65 BF 65 
25390     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
25394     B6 65 B4 65 
25398     B2 65 AE 65 
2539c     AC 65 ED 65 
253a0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
253a4     5E 65 25 66 
253a8     FA 62 23 6B 
253ac     B5 6C 61 0A 
253b0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
253b4     5D 90 BE 8D 
253b8     47 8E C3 8D 
253bc     09 8E C9 8D 
253c0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
253c4     15 8E 19 8E 
253c8     1B 8E 62 8E 
253cc     64 8E 68 8E 
253d0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
253d4     B5 8E 4C 90 
253d8     FA 84 3C 9D 
253dc     98 13 79 6D 
253e0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
253e4     D9 66 50 66 
253e8     D4 66 4B 66 
253ec     8C 66 46 66 
253f0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
253f4     81 66 3A 66 
253f8     7C 66 36 66 
253fc     76 66 30 66 
25400     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
25404     6B 66 88 72 
25408     BF 37 E7 B7 
2540c     75 83 8B 8E 
25410     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
25414     94 8E 96 8E 
25418     DD 8E 9C 8E 
2541c     E2 8E A2 8E 
25420     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
25424     EE 8E AE 8E 
25428     38 8F B5 8E 
2542c     3F 8F FD 8E 
25430     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
25434     A5 87 1E E3 
25438     6D 5D FA 71 
2543c     41 64 25 67 
25440     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
25444     D9 66 1A 67 
25448     18 67 15 67 
2544c     12 67 0F 67 
25450     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
25454     07 67 C0 66 
25458     01 67 BC 66 
2545c     B8 66 DE 64 
25460     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
25464     43 E5 1F 8B 
25468     14 8A F1 90 
2546c     1C 8F 63 8F 
25470     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
25474     29 8F 6E 8F 
25478     72 8F 75 8F 
2547c     34 8F BE 8F 
25480     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
25484     84 8F 87 8F 
25488     CC 8F 56 90 
2548c     67 91 49 80 
25490     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
25494     46 77 A6 66 
25498     E8 66 B0 67 
2549c     AD 67 ED 67 
254a0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
254a4     A2 67 E3 67 
254a8     9D 67 9A 67 
254ac     98 67 94 67 
254b0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
254b4     49 67 CD 67 
254b8     28 65 5F 6E 
254bc     82 67 3A 01 
254c0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
254c4     C2 91 A9 8F 
254c8     EF 8F AE 8F 
254cc     F4 8F B5 8F 
254d0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
254d4     01 90 03 90 
254d8     07 90 09 90 
254dc     0C 90 53 90 
254e0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
254e4     18 90 44 93 
254e8     85 84 D6 9D 
254ec     87 1F 2F 75 
254f0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
254f4     C4 68 F6 67 
254f8     BE 68 F1 67 
254fc     76 68 2E 68 
25500     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
25504     27 68 24 68 
25508     64 68 1E 68 
2550c     5F 68 19 68 
25510     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
25514     DC 68 56 72 
25518     7E 36 C2 B8 
2551c     D7 84 73 90 
25520     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
25524     7B 90 7F 90 
25528     82 90 84 90 
2552c     CB 90 8B 90 
25530     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
25534     D7 90 96 90 
25538     20 91 59 90 
2553c     25 91 A2 90 
25540     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
25544     D0 89 40 EE 
25548     12 64 C4 71 
2554c     29 66 0C 69 
25550     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
25554     C0 68 02 69 
25558     FE 68 FB 68 
2555c     F9 68 F6 68 
25560     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
25564     EE 68 A8 68 
25568     2C 69 5F 68 
2556c     E2 68 81 66 
25570     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
25574     1E EB A6 8A 
25578     73 8B 5E 93 
2557c     7B 90 48 91 
25580     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
25584     0D 91 11 91 
25588     14 91 16 91 
2558c     5C 91 1C 91 
25590     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
25594     68 91 AF 91 
25598     2A 91 B5 91 
2559c     75 91 1A 94 
255a0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
255a4     70 0E CB 6C 
255a8     5D 6E C4 67 
255ac     99 69 54 69 
255b0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
255b4     D2 69 49 69 
255b8     89 69 86 69 
255bc     40 69 C4 69 
255c0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
255c4     35 69 76 69 
255c8     58 67 EB 6D 
255cc     E9 6D 89 0F 
255d0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
255d4     33 94 94 91 
255d8     D9 91 56 91 
255dc     E0 91 9F 91 
255e0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
255e4     EC 91 EE 91 
255e8     F1 91 F4 91 
255ec     F7 91 3D 92 
255f0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
255f4     46 92 21 94 
255f8     11 89 A4 9D 
255fc     FD 0E 8F 6C 
25600     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
25604     28 6A E1 69 
25608     65 6A 1F 6A 
2560c     5F 6A 1A 6A 
25610     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
25614     54 6A 0F 6A 
25618     4F 6A 09 6A 
2561c     06 6A 03 6A 
25620     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
25624     23 68 69 77 
25628     3A 4D 38 CA 
2562c     38 86 4E 91 
25630     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
25634     64 92 24 92 
25638     6A 92 2A 92 
2563c     70 92 30 92 
25640     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
25644     7B 92 7E 92 
25648     C5 92 84 92 
2564c     CB 92 8A 92 
25650     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
25654     4D 8D F9 E2 
25658     97 59 FE 74 
2565c     DB 68 6D 6A 
25660     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
25664     A8 6A A5 6A 
25668     A3 6A 9F 6A 
2566c     9D 6A 9B 6A 
25670     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
25674     D6 6A 8F 6A 
25678     CF 6A 46 6A 
2567c     CA 6A E1 67 
25680     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
25684     D3 F7 15 92 
25688     90 8C BF 94 
2568c     A6 92 EB 92 
25690     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
25694     B1 92 F7 92 
25698     FA 92 FD 92 
2569c     00 93 02 93 
256a0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
256a4     4F 93 52 93 
256a8     54 93 22 94 
256ac     5A 93 8F 88 
256b0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
256b4     1C 77 07 6C 
256b8     E8 69 7A 6B 
256bc     34 6B 75 6B 
256c0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
256c4     29 6B 26 6B 
256c8     24 6B 21 6B 
256cc     1D 6B 5E 6B 
256d0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
256d4     12 6B 52 6B 
256d8     34 69 34 6E 
256dc     BA 73 A4 24 
256e0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
256e4     7A 94 B3 93 
256e8     72 93 31 93 
256ec     78 93 7A 93 
256f0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
256f4     83 93 86 93 
256f8     89 93 D0 93 
256fc     D2 93 D5 93 
25700     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
25704     DD 93 40 96 
25708     30 8B 99 9C 
2570c     52 10 94 71 
25710     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
25714     46 6C 79 6B 
25718     40 6C B7 6B 
2571c     F7 6B B1 6B 
25720     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
25724     EC 6B A5 6B 
25728     A2 6B 9F 6B 
2572c     9D 6B 9A 6B 
25730     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
25734     C8 6A E4 76 
25738     20 4B F9 CE 
2573c     2E 8A 1A 92 
25740     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
25744     FB 93 BA 93 
25748     01 94 03 94 
2574c     4A 94 09 94 
25750     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
25754     55 94 14 94 
25758     9E 94 1A 94 
2575c     61 94 20 94 
25760     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
25764     3E 87 E5 CD 
25768     5F 50 6C 78 
2576c     B5 6A 04 6C 
25770     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
25774     83 6C 7F 6C 
25778     7C 6C 36 6C 
2577c     76 6C 74 6C 
25780     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
25784     6B 6C 25 6C 
25788     66 6C 1F 6C 
2578c     1D 6C 41 6A 
25790     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
25794     BA FA FC 94 
25798     5B 8D 97 96 
2579c     3B 94 C5 94 
257a0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
257a4     89 94 8C 94 
257a8     8F 94 92 94 
257ac     94 94 DB 94 
257b0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
257b4     E4 94 E7 94 
257b8     2D 95 74 95 
257bc     C8 96 15 89 
257c0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
257c4     CB 75 31 6F 
257c8     7E 6B 10 6D 
257cc     C9 6C 0A 6D 
257d0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
257d4     BD 6C FF 6C 
257d8     FB 6C F9 6C 
257dc     B2 6C F3 6C 
257e0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
257e4     A7 6C E8 6C 
257e8     0D 6B 85 6F 
257ec     C7 74 10 28 
257f0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
257f4     96 96 47 95 
257f8     06 95 0A 95 
257fc     0C 95 0F 95 
25800     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
25804     17 95 5E 95 
25808     61 95 63 95 
2580c     22 95 AC 95 
25810     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
25814     72 95 17 98 
25818     59 8E 01 96 
2581c     CF FC 5A 68 
25820     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
25824     96 6D 50 6D 
25828     D5 6D 4A 6D 
2582c     8C 6D 89 6D 
25830     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
25834     80 6D 3A 6D 
25838     7A 6D 77 6D 
2583c     75 6D 71 6D 
25840     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
25844     18 6C BC 78 
25848     9A 4F 7E CF 
2584c     1F 89 F1 93 
25850     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
25854     D2 95 4E 95 
25858     D7 95 53 95 
2585c     DD 95 E0 95 
25860     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
25864     A5 95 EB 95 
25868     EE 95 F0 95 
2586c     37 96 B3 95 
25870     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
25874     1A 98 D5 8D 
25878     C5 9F CD 0F 
2587c     0F 71 F3 73 
25880     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
25884     D9 6D 5E 6E 
25888     D3 6D 58 6E 
2588c     12 6E 0F 6E 
25890     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
25894     49 6E BF 6D 
25898     87 6E 76 6D 
2589c     81 6E 11 6B 
258a0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
258a4     3F 09 44 95 
258a8     E5 8D 3F 99 
258ac     D4 95 A2 96 
258b0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
258b4     23 96 69 96 
258b8     6B 96 6E 96 
258bc     71 96 74 96 
258c0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
258c4     BF 96 3C 96 
258c8     C6 96 C8 96 
258cc     A3 98 51 8D 
258d0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
258d4     CF 75 29 73 
258d8     90 6C EC 6E 
258dc     62 6E E7 6E 
258e0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
258e4     9A 6E 98 6E 
258e8     95 6E 91 6E 
258ec     8E 6E CF 6E 
258f0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
258f4     40 6E C3 6E 
258f8     E8 6C 45 6F 
258fc     A5 7B C9 35 
25900     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
25904     2D 98 23 97 
25908     E1 96 A0 96 
2590c     A4 96 EA 96 
25910     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
25914     AF 96 F4 96 
25918     F8 96 3E 97 
2591c     FD 96 43 97 
25920     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
25924     08 97 6B 99 
25928     D6 92 88 91 
2592c     D8 EE 84 66 
25930     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
25934     2E 6F E7 6E 
25938     6C 6F 24 6F 
2593c     21 6F 1F 6F 
25940     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
25944     17 6F 13 6F 
25948     54 6F 0E 6F 
2594c     0B 6F 4B 6F 
25950     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
25954     27 6D 1C 7B 
25958     19 59 9F DB 
2595c     66 8E BC 94 
25960     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
25964     67 97 26 97 
25968     6D 97 2B 97 
2596c     72 97 32 97 
25970     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
25974     C1 97 7F 97 
25978     C6 97 85 97 
2597c     CB 97 CE 97 
25980     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
25984     EC 8A C4 C6 
25988     68 4C F4 7D 
2598c     63 6E E8 6E 
25990     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
25994     ED 6F A7 6F 
25998     E7 6F A0 6F 
2599c     E1 6F 9B 6F 
259a0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
259a4     D5 6F 8F 6F 
259a8     CE 6F 45 6F 
259ac     86 6F 68 6D 
259b0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
259b4     C0 13 AD A2 
259b8     A7 8E 79 99 
259bc     E6 97 E8 97 
259c0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
259c4     F1 97 F3 97 
259c8     F6 97 F9 97 
259cc     FB 97 FE 97 
259d0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
259d4     4A 98 0A 98 
259d8     93 98 0F 98 
259dc     7F 9B BF 8C 
259e0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
259e4     91 7B 62 73 
259e8     1A 6E B9 70 
259ec     EB 6F B3 70 
259f0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
259f4     25 70 20 70 
259f8     1E 70 1B 70 
259fc     18 70 15 70 
25a00     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
25a04     0D 70 09 70 
25a08     07 70 03 70 
25a0c     01 70 FD 6F 
25a10     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
25a14     F6 6F F2 6F 
25a18     EF 6F EC 6F 
25a1c     2C 70 E6 6F 
25a20     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
25a24     DD 6F 97 6F 
25a28     D7 6F 84 6E 
25a2c     8F 6F 3F 7D 
25a30     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
25a32     01 00 00 00 
25a36     00 00 00 00 
25a3a     00 00 00 00 
25a3e     00 00 00 00 | mouse  file "mouse.def"
25a42     00 00 00 00 
25a46     00 00 00 00 
25a4a     00 00 00 00 
25a4e     00 00 00 00 | 	byte	$00[16]
25a52     01 01 00 00 
25a56     00 00 00 00 
25a5a     00 00 00 00 
25a5e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a62     00 00 00 00 
25a66     00 00 00 00 
25a6a     00 00 00 00 
25a6e     00 00 00 00 | 	byte	$00[16]
25a72     01 0D 01 00 
25a76     00 00 00 00 
25a7a     00 00 00 00 
25a7e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25a82     00 00 00 00 
25a86     00 00 00 00 
25a8a     00 00 00 00 
25a8e     00 00 00 00 | 	byte	$00[16]
25a92     01 0D 0D 01 
25a96     00 00 00 00 
25a9a     00 00 00 00 
25a9e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25aa2     00 00 00 00 
25aa6     00 00 00 00 
25aaa     00 00 00 00 
25aae     00 00 00 00 | 	byte	$00[16]
25ab2     01 0D 0D 0D 
25ab6     01 00 00 00 
25aba     00 00 00 00 
25abe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25ac2     00 00 00 00 
25ac6     00 00 00 00 
25aca     00 00 00 00 
25ace     00 00 00 00 | 	byte	$00[16]
25ad2     01 0D 0D 0D 
25ad6     0D 01 00 00 
25ada     00 00 00 00 
25ade     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25ae2     00 00 00 00 
25ae6     00 00 00 00 
25aea     00 00 00 00 
25aee     00 00 00 00 | 	byte	$00[16]
25af2     01 0D 0D 0D 
25af6     0D 0D 01 00 
25afa     00 00 00 00 
25afe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
25b02     00 00 00 00 
25b06     00 00 00 00 
25b0a     00 00 00 00 
25b0e     00 00 00 00 | 	byte	$00[16]
25b12     01 0D 0D 0D 
25b16     0D 0D 0D 01 
25b1a     00 00 00 00 
25b1e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
25b22     00 00 00 00 
25b26     00 00 00 00 
25b2a     00 00 00 00 
25b2e     00 00 00 00 | 	byte	$00[16]
25b32     01 0D 0D 0D 
25b36     0D 0D 0D 0C 
25b3a     01 00 00 00 
25b3e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
25b42     00 00 00 00 
25b46     00 00 00 00 
25b4a     00 00 00 00 
25b4e     00 00 00 00 | 	byte	$00[16]
25b52     01 0D 0D 0D 
25b56     0D 0D 0D 0D 
25b5a     0C 01 00 00 
25b5e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
25b62     00 00 00 00 
25b66     00 00 00 00 
25b6a     00 00 00 00 
25b6e     00 00 00 00 | 	byte	$00[16]
25b72     01 0D 0D 0D 
25b76     0D 0D 0D 0D 
25b7a     0D 0C 01 00 
25b7e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
25b82     00 00 00 00 
25b86     00 00 00 00 
25b8a     00 00 00 00 
25b8e     00 00 00 00 | 	byte	$00[16]
25b92     01 0D 0D 0D 
25b96     0D 0D 0D 0D 
25b9a     0D 0D 0B 01 
25b9e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
25ba2     00 00 00 00 
25ba6     00 00 00 00 
25baa     00 00 00 00 
25bae     00 00 00 00 | 	byte	$00[16]
25bb2     01 0D 0D 0D 
25bb6     0C 0D 0D 03 
25bba     01 01 01 01 
25bbe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
25bc2     00 00 00 00 
25bc6     00 00 00 00 
25bca     00 00 00 00 
25bce     00 00 00 00 | 	byte	$00[16]
25bd2     01 0D 0D 0C 
25bd6     01 09 0D 03 
25bda     00 00 00 00 
25bde     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
25be2     00 00 00 00 
25be6     00 00 00 00 
25bea     00 00 00 00 
25bee     00 00 00 00 | 	byte	$00[16]
25bf2     01 0D 0C 00 
25bf6     00 01 0D 0B 
25bfa     01 00 00 00 
25bfe     00 00 00 00 | 	byte	$01, $0d, $0c, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
25c02     00 00 00 00 
25c06     00 00 00 00 
25c0a     00 00 00 00 
25c0e     00 00 00 00 | 	byte	$00[16]
25c12     01 0C 00 00 
25c16     00 01 0A 0D 
25c1a     01 00 00 00 
25c1e     00 00 00 00 | 	byte	$01, $0c, $00, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
25c22     00 00 00 00 
25c26     00 00 00 00 
25c2a     00 00 00 00 
25c2e     00 00 00 00 | 	byte	$00[16]
25c32     01 00 00 00 
25c36     00 00 01 0D 
25c3a     0B 01 00 00 
25c3e     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
25c42     00 00 00 00 
25c46     00 00 00 00 
25c4a     00 00 00 00 
25c4e     00 00 00 00 
25c52     00 00 00 00 
25c56     00 00       | 	byte	$00[22]
25c58     01 0B 0D 01 
25c5c     00 00 00 00 
25c60     00 00 00 00 
25c64     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25c68     00 00 00 00 
25c6c     00 00 00 00 
25c70     00 00 00 00 
25c74     00 00 00 00 
25c78     00          | 	byte	$00[17]
25c79     01 00 00 00 
25c7d     00 00 00 00 
25c81     00 00 00 00 
25c85     00 00 00 00 | 	byte	$01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
25c89     00 00 00 00 
      ...             
25e2d     00 00 00 00 
25e31     00          | 	byte	$00[425]
25e32                 | 
25e32     00 00       |              	org
25e34 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
25e38 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
25e3c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
25e40 003             | 
25e40 003 00 30 04 F6 |                 mov     psramaddr,#0
25e44 004             | 
25e44 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
25e48 005 20 00 00 FF 
25e4c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
25e50 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
25e54 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
25e58 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
25e5c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
25e60 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
25e64 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
25e68 00d             | 
25e68 00d 20 00 00 FF 
25e6c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
25e70 00f E0 03 00 FF 
25e74 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
25e78 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
25e7c 012             | 
25e7c 012             |                 
25e7c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
25e80 013             |     
25e80 013 01 2C 60 FD |                 cogid 	t11				' get id
25e84 014 00 00 EC FC |                 coginit #0,#0				' start the new program
25e88 015 03 2C 60 FD |                 cogstop t11				' stop the loader
25e8c 016             | 
25e8c 016 00 00 00 00 | t11 		long 	0
25e90 017 00 FF 07 00 | mailbox 	long 	$7FF00
25e94 018 00 00 00 00 | psramaddr 	long 	0
25e98 019 00 00 00 00 | pslockval	long 	0
25e9c 01a 00 00 00 00 | cmd             long    0
25ea0 01b 00 00 00 00 | buf1            long    0
25ea4 01c 00 40 00 00 | buf2            long    16384
25ea8 01d AC 5E 02 00 | 	long	@@@_dat_ + 5100
25eac 01e 50 32 20 52 
25eb0 01f 65 74 72 6F 
25eb4 020 6D 61 63 68 
25eb8 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
25ebc 022 42 41 53 49 
25ec0 023 43 20 76 65 
25ec4 024 72 73 69 6F 
25ec8 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
25ecc 026 32 32 00 00 | 	byte	$32, $32, $00, $00
25ed0 027             | 	alignl
25ed0 027             | _hg010b_spin2_dat_
25ed0 027             | 
25ed0 027 00 00 00 00 
25ed4 028 00 00 00 00 
25ed8 029 00 00 00 00 
25edc 02a 00 00 00 00 
25ee0 02b 00 00 00    | vga_font       file "vgafont.def"
25ee3 02b 7E 81 A5 81 
25ee7 02c 81 BD 99 81 
25eeb 02d 81 7E 00 00 
25eef 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
25ef3 02f 7E FF DB FF 
25ef7 030 FF C3 E7 FF 
25efb 031 FF 7E 00 00 
25eff 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
25f03 033 00 36 7F 7F 
25f07 034 7F 7F 3E 1C 
25f0b 035 08 00 00 00 
25f0f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
25f13 037 00 08 1C 3E 
25f17 038 7F 3E 1C 08 
25f1b 039 00 00 00 00 
25f1f 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
25f23 03b 18 3C 3C E7 
25f27 03c E7 E7 18 18 
25f2b 03d 3C 00 00 00 
25f2f 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
25f33 03f 18 3C 7E FF 
25f37 040 FF 7E 18 18 
25f3b 041 3C 00 00 00 
25f3f 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
25f43 043 00 00 00 18 
25f47 044 3C 3C 18 00 
25f4b 045 00 00 00 00 
25f4f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
25f53 047 FF FF FF E7 
25f57 048 C3 C3 E7 FF 
25f5b 049 FF FF FF FF 
25f5f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
25f63 04b 00 00 3C 66 
25f67 04c 42 42 66 3C 
25f6b 04d 00 00 00 00 
25f6f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
25f73 04f FF FF C3 99 
25f77 050 BD BD 99 C3 
25f7b 051 FF FF FF FF 
25f7f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
25f83 053 78 70 58 4C 
25f87 054 1E 33 33 33 
25f8b 055 33 1E 00 00 
25f8f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
25f93 057 3C 66 66 66 
25f97 058 66 3C 18 7E 
25f9b 059 18 18 00 00 
25f9f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
25fa3 05b FC CC FC 0C 
25fa7 05c 0C 0C 0C 0E 
25fab 05d 0F 07 00 00 
25faf 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
25fb3 05f FE C6 FE C6 
25fb7 060 C6 C6 C6 E6 
25fbb 061 E7 67 03 00 
25fbf 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
25fc3 063 18 18 DB 3C 
25fc7 064 E7 3C DB 18 
25fcb 065 18 00 00 00 
25fcf 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
25fd3 067 03 07 0F 1F 
25fd7 068 7F 1F 0F 07 
25fdb 069 03 01 00 00 
25fdf 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
25fe3 06b 60 70 78 7C 
25fe7 06c 7F 7C 78 70 
25feb 06d 60 40 00 00 
25fef 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
25ff3 06f 18 3C 7E 18 
25ff7 070 18 18 7E 3C 
25ffb 071 18 00 00 00 
25fff 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
26003 073 66 66 66 66 
26007 074 66 66 66    | 	byte	$66[7]
2600a 075 00 66 66 00 
2600e 076 00 00 00 00 
26012 077 00 FE DB DB 
26016 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
2601a 079 D8 D8 D8 00 
2601e 07a 00 00 00 3E 
26022 07b 63 06 1C 36 
26026 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
2602a 07d 30 63 3E 00 
2602e 07e 00 00 00 00 
26032 07f 00 00 00 00 
26036 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
2603a 081 7F 7F 7F 00 
2603e 082 00 00 00 00 
26042 083 00 18 3C 7E 
26046 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
2604a 085 3C 18 7E 00 
2604e 086 00 00 00 00 
26052 087 00 18 3C 7E 
26056 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
2605a 089 18 18 18 00 
2605e 08a 00 00 00 00 
26062 08b 00 18 18 18 
26066 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
2606a 08d 7E 3C 18 00 
2606e 08e 00 00 00 00 
26072 08f 00 00 00 18 
26076 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
2607a 091 00 00 00 00 
2607e 092 00 00 00 00 
26082 093 00 00 00    | 	byte	$00[11]
26085 094 0C 06 7F 06 
26089 095 0C 00 00 00 
2608d 096 00 00 00 00 
26091 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26095 098 00 03 03 03 
26099 099 7F 00 00 00 
2609d 09a 00 00 00 00 
260a1 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
260a5 09c 14 36 7F 36 
260a9 09d 14 00 00 00 
260ad 09e 00 00 00 00 
260b1 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
260b5 0a0 1C 1C 3E 3E 
260b9 0a1 7F 7F 00 00 
260bd 0a2 00 00 00 00 
260c1 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
260c5 0a4 7F 3E 3E 1C 
260c9 0a5 1C 08 00 00 
260cd 0a6 00 00 00 00 
260d1 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
260d5 0a8 00 00 00 00 
260d9 0a9 00 00 00 00 
260dd 0aa 00 00 00 00 
260e1 0ab 00 00       | 	byte	$00[14]
260e3 0ab 18 3C 3C 3C 
260e7 0ac 18 18 18 00 
260eb 0ad 18 18 00 00 
260ef 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
260f3 0af 66 24 00 00 
260f7 0b0 00 00 00 00 
260fb 0b1 00 00 00 00 
260ff 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26103 0b3 00 36 36 7F 
26107 0b4 36 36 36 7F 
2610b 0b5 36 36 00 00 
2610f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
26113 0b7 3E 63 43 03 
26117 0b8 3E 60 60 61 
2611b 0b9 63 3E 18 18 
2611f 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
26123 0bb 00 00 43 63 
26127 0bc 30 18 0C 06 
2612b 0bd 63 61 00 00 
2612f 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
26133 0bf 1C 36 36 1C 
26137 0c0 6E 3B 33 33 
2613b 0c1 33 6E 00 00 
2613f 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
26143 0c3 0C 0C 0C 06 
26147 0c4 00 00 00 00 
2614b 0c5 00 00 00 00 
2614f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26153 0c7 30 18 0C 0C 
26157 0c8 0C 0C 0C 0C 
2615b 0c9 18 30 00 00 
2615f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
26163 0cb 0C 18 30 30 
26167 0cc 30 30 30 30 
2616b 0cd 18 0C 00 00 
2616f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
26173 0cf 00 00 00 66 
26177 0d0 3C FF 3C 66 
2617b 0d1 00 00 00 00 
2617f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
26183 0d3 00 00 00 18 
26187 0d4 18 7E 18 18 
2618b 0d5 00 00 00 00 
2618f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
26193 0d7 00 00 00 00 
26197 0d8 00 00 00 00 | 	byte	$00[8]
2619b 0d9 18 18 18 0C 
2619f 0da 00 00 00 00 
261a3 0db 00 00 00 00 
261a7 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
261ab 0dd 00 00 00 00 
261af 0de 00 00 00 00 
261b3 0df 00 00 00 00 
261b7 0e0 00 00 00 00 | 	byte	$00[16]
261bb 0e1 18 18 00 00 
261bf 0e2 00 00 00 00 
261c3 0e3 00 00 40 60 
261c7 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
261cb 0e5 03 01 00 00 
261cf 0e6 00 00 00 00 
261d3 0e7 1C 36 63 63 
261d7 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
261db 0e9 36 1C 00 00 
261df 0ea 00 00 00 00 
261e3 0eb 18 1C 1E 18 
261e7 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
261eb 0ed 18 7E 00 00 
261ef 0ee 00 00 00 00 
261f3 0ef 3E 63 60 30 
261f7 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
261fb 0f1 63 7F 00 00 
261ff 0f2 00 00 00 00 
26203 0f3 3E 63 60 60 
26207 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
2620b 0f5 63 3E 00 00 
2620f 0f6 00 00 00 00 
26213 0f7 30 38 3C 36 
26217 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
2621b 0f9 30 78 00 00 
2621f 0fa 00 00 00 00 
26223 0fb 7F 03 03 03 
26227 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
2622b 0fd 63 3E 00 00 
2622f 0fe 00 00 00 00 
26233 0ff 1C 06 03 03 
26237 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
2623b 101 63 3E 00 00 
2623f 102 00 00 00 00 
26243 103 7F 63 60 60 
26247 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
2624b 105 0C 0C 00 00 
2624f 106 00 00 00 00 
26253 107 3E 63 63 63 
26257 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
2625b 109 63 3E 00 00 
2625f 10a 00 00 00 00 
26263 10b 3E 63 63 63 
26267 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
2626b 10d 30 1E 00 00 
2626f 10e 00 00 00 00 
26273 10f 00 00 00 18 
26277 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2627b 111 18 18 00 00 
2627f 112 00 00 00 00 
26283 113 00 00 00 18 
26287 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
2628b 115 18 18 0C 00 
2628f 116 00 00 00 00 
26293 117 00 60 30 18 
26297 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
2629b 119 30 60 00 00 
2629f 11a 00 00 00 00 
262a3 11b 00 00 00 7E 
262a7 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
262ab 11d 00 00 00 00 
262af 11e 00 00 00 00 
262b3 11f 00          | 	byte	$00[9]
262b4 120 06 0C 18 30 
262b8 121 60 30 18 0C 
262bc 122 06 00 00 00 
262c0 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
262c4 124 63 63 30 18 
262c8 125 18 18 00 18 
262cc 126 18 00 00 00 
262d0 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
262d4 128 3E 63 63 7B 
262d8 129 7B 7B 3B 03 
262dc 12a 3E 00 00 00 
262e0 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
262e4 12c 1C 36 63 63 
262e8 12d 7F 63 63 63 
262ec 12e 63 00 00 00 
262f0 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
262f4 130 66 66 66 3E 
262f8 131 66 66 66 66 
262fc 132 3F 00 00 00 
26300 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
26304 134 66 43 03 03 
26308 135 03 03 43 66 
2630c 136 3C 00 00 00 
26310 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
26314 138 36 66 66 66 
26318 139 66 66 66 36 
2631c 13a 1F 00 00 00 
26320 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
26324 13c 66 46 16 1E 
26328 13d 16 06 46 66 
2632c 13e 7F 00 00 00 
26330 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
26334 140 66 46 16 1E 
26338 141 16 06 06 06 
2633c 142 0F 00 00 00 
26340 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
26344 144 66 43 03 03 
26348 145 7B 63 63 66 
2634c 146 5C 00 00 00 
26350 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
26354 148 63 63 63 7F 
26358 149 63 63 63 63 
2635c 14a 63 00 00 00 
26360 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
26364 14c 18 18 18 18 
26368 14d 18 18 18 18 | 	byte	$18[8]
2636c 14e 3C 00 00 00 
26370 14f 00 00 00 78 
26374 150 30 30 30 30 
26378 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
2637c 152 1E 00 00 00 
26380 153 00 00 00 67 
26384 154 66 66 36 1E 
26388 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
2638c 156 67 00 00 00 
26390 157 00 00 00 0F 
26394 158 06 06 06 06 
26398 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
2639c 15a 7F 00 00 00 
263a0 15b 00 00 00 63 
263a4 15c 77 7F 7F 6B 
263a8 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
263ac 15e 63 00 00 00 
263b0 15f 00 00 00 63 
263b4 160 67 6F 7F 7B 
263b8 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
263bc 162 63 00 00 00 
263c0 163 00 00 00 3E 
263c4 164 63 63 63 63 
263c8 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
263cc 166 3E 00 00 00 
263d0 167 00 00 00 3F 
263d4 168 66 66 66 3E 
263d8 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
263dc 16a 0F 00 00 00 
263e0 16b 00 00 00 3E 
263e4 16c 63 63 63 63 
263e8 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
263ec 16e 3E 30 70 00 
263f0 16f 00 00 00 3F 
263f4 170 66 66 66 3E 
263f8 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
263fc 172 67 00 00 00 
26400 173 00 00 00 3E 
26404 174 63 63 06 1C 
26408 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2640c 176 3E 00 00 00 
26410 177 00 00 00 7E 
26414 178 7E 5A 18 18 
26418 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2641c 17a 3C 00 00 00 
26420 17b 00 00 00 63 
26424 17c 63 63 63 63 
26428 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2642c 17e 3E 00 00 00 
26430 17f 00 00 00 63 
26434 180 63 63 63 63 
26438 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
2643c 182 08 00 00 00 
26440 183 00 00 00 63 
26444 184 63 63 63 6B 
26448 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
2644c 186 36 00 00 00 
26450 187 00 00 00 63 
26454 188 63 36 3E 1C 
26458 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
2645c 18a 63 00 00 00 
26460 18b 00 00 00 66 
26464 18c 66 66 66 3C 
26468 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
2646c 18e 3C 00 00 00 
26470 18f 00 00 00 7F 
26474 190 63 61 30 18 
26478 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
2647c 192 7F 00 00 00 
26480 193 00 00 00 3C 
26484 194 0C 0C 0C 0C 
26488 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
2648c 196 3C 00 00 00 
26490 197 00 00 00 00 
26494 198 01 03 07 0E 
26498 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
2649c 19a 40 00 00 00 
264a0 19b 00 00 00 3C 
264a4 19c 30 30 30 30 
264a8 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
264ac 19e 3C 00 00 00 
264b0 19f 1C 36 00 00 
264b4 1a0 00 00 00 00 
264b8 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
264bc 1a2 00 00 00 00 
264c0 1a3 00 00 00 00 
264c4 1a4 00 00 00 00 
264c8 1a5 00 00 00 00 
264cc 1a6 00          | 	byte	$00[17]
264cd 1a6 FF 00 00 0C 
264d1 1a7 18 00 00 00 
264d5 1a8 00 00 00 00 
264d9 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
264dd 1aa 00 00 00 00 
264e1 1ab 00 00 00 00 
264e5 1ac 00          | 	byte	$00[9]
264e6 1ac 1E 30 3E 33 
264ea 1ad 33 33 6E 00 
264ee 1ae 00 00 00 00 
264f2 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
264f6 1b0 1E 36 66 66 
264fa 1b1 66 66 3E 00 
264fe 1b2 00 00 00 00 
26502 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26506 1b4 3E 63 03 03 
2650a 1b5 03 63 3E 00 
2650e 1b6 00 00 00 00 
26512 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
26516 1b8 3C 36 33 33 
2651a 1b9 33 33 6E 00 
2651e 1ba 00 00 00 00 
26522 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26526 1bc 3E 63 7F 03 
2652a 1bd 03 63 3E 00 
2652e 1be 00 00 00 00 
26532 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
26536 1c0 0C 1E 0C 0C 
2653a 1c1 0C 0C 1E 00 
2653e 1c2 00 00 00 00 
26542 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
26546 1c4 6E 33 33 33 
2654a 1c5 33 33 3E 30 
2654e 1c6 33 1E 00 00 
26552 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
26556 1c8 36 6E 66 66 
2655a 1c9 66 66 67 00 
2655e 1ca 00 00 00 00 
26562 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
26566 1cc 1C 18 18 18 
2656a 1cd 18 18 3C 00 
2656e 1ce 00 00 00 00 
26572 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
26576 1d0 70 60 60 60 
2657a 1d1 60 60 60 66 
2657e 1d2 66 3C 00 00 
26582 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
26586 1d4 66 36 1E 1E 
2658a 1d5 36 66 67 00 
2658e 1d6 00 00 00 00 
26592 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
26596 1d8 18 18 18 18 
2659a 1d9 18 18       | 	byte	$18[6]
2659c 1da 3C 00 00 00 
265a0 1db 00 00 00 00 
265a4 1dc 00 00 37 7F 
265a8 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
265ac 1de 63 00 00 00 
265b0 1df 00 00 00 00 
265b4 1e0 00 00 3B 66 
265b8 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
265bc 1e2 66 00 00 00 
265c0 1e3 00 00 00 00 
265c4 1e4 00 00 3E 63 
265c8 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
265cc 1e6 3E 00 00 00 
265d0 1e7 00 00 00 00 
265d4 1e8 00 00 3B 66 
265d8 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
265dc 1ea 3E 06 06 0F 
265e0 1eb 00 00 00 00 
265e4 1ec 00 00 6E 33 
265e8 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
265ec 1ee 3E 30 30 78 
265f0 1ef 00 00 00 00 
265f4 1f0 00 00 3B 6E 
265f8 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
265fc 1f2 0F 00 00 00 
26600 1f3 00 00 00 00 
26604 1f4 00 00 3E 63 
26608 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
2660c 1f6 3E 00 00 00 
26610 1f7 00 00 00 08 
26614 1f8 0C 0C 3F 0C 
26618 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2661c 1fa 38 00 00 00 
26620 1fb 00 00 00 00 
26624 1fc 00 00 33 33 
26628 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
2662c 1fe 6E 00 00 00 
26630 1ff 00 00 00 00 
26634 200 00 00 63 63 
26638 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
2663c 202 1C 00 00 00 
26640 203 00 00 00 00 
26644 204 00 00 63 63 
26648 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
2664c 206 36 00 00 00 
26650 207 00 00 00 00 
26654 208 00 00 63 36 
26658 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
2665c 20a 63 00 00 00 
26660 20b 00 00 00 00 
26664 20c 00 00 63 63 
26668 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
2666c 20e 7E 60 30 1F 
26670 20f 00 00 00 00 
26674 210 00 00 7F 33 
26678 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
2667c 212 7F 00 00 00 
26680 213 00 00 00 70 
26684 214 18 18 18 0E 
26688 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
2668c 216 70 00 00 00 
26690 217 00 00 00 18 
26694 218 18 18 18 18 
26698 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
2669c 21a 18 00 00 00 
266a0 21b 00 00 00 0E 
266a4 21c 18 18 18 70 
266a8 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
266ac 21e 0E 00 00 00 
266b0 21f 6E 3B 00 00 
266b4 220 00 00 00 00 
266b8 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
266bc 222 00 00 00 00 
266c0 223 00 00 00 00 
266c4 224 00 00       | 	byte	$00[10]
266c6 224 08 1C 36 63 
266ca 225 63 63 7F 00 
266ce 226 00 00 00 00 
266d2 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
266d6 228 03 03 03 03 
266da 229 43 66 3C 18 
266de 22a 30 1E 00 00 
266e2 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
266e6 22c 33 33 33 33 
266ea 22d 33 33       | 	byte	$33[6]
266ec 22e 6E 00 00 00 
266f0 22f 00 00 60 30 
266f4 230 18 00 3E 63 
266f8 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
266fc 232 3E 00 00 00 
26700 233 00 00 08 1C 
26704 234 36 00 1E 30 
26708 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
2670c 236 6E 00 00 00 
26710 237 00 00 00 00 
26714 238 33 00 1E 30 
26718 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
2671c 23a 6E 00 00 00 
26720 23b 00 00 1C 36 
26724 23c 1C 00 33 33 
26728 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
2672c 23e 6E 00 00 00 
26730 23f 00 00 60 30 
26734 240 18 00 3E 63 
26738 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
2673c 242 3E 00 00 00 
26740 243 00 00 00 00 
26744 244 00 00 3E 63 
26748 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
2674c 246 3E 18 30 1E 
26750 247 00 00 00 1C 
26754 248 58 78 38 18 
26758 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
2675c 24a 3C 00 00 00 
26760 24b 00 00 00 00 
26764 24c 63 00 3E 63 
26768 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
2676c 24e 3E 00 00 00 
26770 24f 66 33 00 3E 
26774 250 63 63 63 63 
26778 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2677c 252 3E 00 00 00 
26780 253 00 00 CC 66 
26784 254 33 00 3E 63 
26788 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
2678c 256 3E 00 00 00 
26790 257 00 00 18 3C 
26794 258 66 00 1C 18 
26798 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
2679c 25a 3C 00 00 00 
267a0 25b 30 18 00 7F 
267a4 25c 63 61 30 18 
267a8 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
267ac 25e 7F 00 00 00 
267b0 25f 00 63 00 08 
267b4 260 1C 36 63 63 
267b8 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
267bc 262 63 00 00 00 
267c0 263 30 18 00 3C 
267c4 264 66 43 03 03 
267c8 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
267cc 266 3C 00 00 00 
267d0 267 30 18 00 7F 
267d4 268 66 46 16 1E 
267d8 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
267dc 26a 7F 00 00 00 
267e0 26b 0C 06 00 0F 
267e4 26c 06 06 06 06 
267e8 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
267ec 26e 7F 00 00 00 
267f0 26f 30 18 00 1C 
267f4 270 18 18 18 18 
267f8 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
267fc 272 3C 00 00 00 
26800 273 00 00 08 1C 
26804 274 36 00 3E 63 
26808 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
2680c 276 3E 00 00 00 
26810 277 00 00 00 00 
26814 278 63 00 3E 63 
26818 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
2681c 27a 3E 00 00 00 
26820 27b 00 00 00 6F 
26824 27c 46 26 06 06 
26828 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
2682c 27e 7F 00 00 00 
26830 27f 00 00 00 6E 
26834 280 4C 2C 0C 0C 
26838 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
2683c 282 1E 00 00 00 
26840 283 30 18 00 3E 
26844 284 63 63 06 1C 
26848 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
2684c 286 3E 00 00 00 
26850 287 00 00 60 30 
26854 288 18 00 3E 63 
26858 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
2685c 28a 3E 00 00 00 
26860 28b 00 63 00 3E 
26864 28c 63 63 63 63 
26868 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
2686c 28e 3E 00 00 00 
26870 28f 00 63 00 63 
26874 290 63 63 63 63 
26878 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
2687c 292 3E 00 00 00 
26880 293 6C 38 00 7E 
26884 294 7E 5A 18 18 
26888 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
2688c 296 3C 00 00 00 
26890 297 00 00 60 48 
26894 298 2C 0C 3F 0C 
26898 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
2689c 29a 38 00 00 00 
268a0 29b 00 00 00 0F 
268a4 29c 26 36 1E 0E 
268a8 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
268ac 29e 7F 00 00 00 
268b0 29f 00 00 00 00 
268b4 2a0 00 63 36 1C 
268b8 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
268bc 2a2 00 00 00 00 
268c0 2a3 00 00       | 	byte	$00[6]
268c2 2a3 36 1C 08 00 
268c6 2a4 3E 63 03 03 
268ca 2a5 03 63 3E 00 
268ce 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
268d2 2a7 30 18 0C 00 
268d6 2a8 1E 30 3E 33 
268da 2a9 33 33 6E 00 
268de 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
268e2 2ab 60 30 18 00 
268e6 2ac 1C 18 18 18 
268ea 2ad 18 18 3C 00 
268ee 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
268f2 2af 60 30 18 00 
268f6 2b0 3E 63 63 63 
268fa 2b1 63 63 3E 00 
268fe 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
26902 2b3 30 18 0C 00 
26906 2b4 33 33 33 33 
2690a 2b5 33 33 6E 00 
2690e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
26912 2b7 00 08 1C 36 
26916 2b8 63 63 7F 63 
2691a 2b9 63 63 63 18 
2691e 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
26922 2bb 00 00 00 00 
26926 2bc 1E 30 3E 33 
2692a 2bd 33 33 6E 18 
2692e 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
26932 2bf 00 7F 63 61 
26936 2c0 30 18 0C 06 
2693a 2c1 43 63 7F 00 
2693e 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
26942 2c3 36 1C 08 00 
26946 2c4 7F 33 18 0C 
2694a 2c5 06 63 7F 00 
2694e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
26952 2c7 00 7F 66 46 
26956 2c8 16 1E 16 06 
2695a 2c9 46 66 7F 18 
2695e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
26962 2cb 00 00 00 00 
26966 2cc 3E 63 7F 03 
2696a 2cd 03 63 3E 18 
2696e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
26972 2cf 00 3C 66 03 
26976 2d0 1F 03 0F 03 
2697a 2d1 03 66 3C 00 
2697e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
26982 2d3 60 30 18 00 
26986 2d4 7F 33 18 0C 
2698a 2d5 06 63 7F 00 
2698e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
26992 2d7 00 3C 66 43 
26996 2d8 03 03 03 03 
2699a 2d9 43 66 3C 00 
2699e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
269a2 2db 00 00 00 00 
269a6 2dc 3E 63 06 1C 
269aa 2dd 30 63 3E 18 
269ae 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
269b2 2df 00 00 00 00 
269b6 2e0 00 00       | 	byte	$00[6]
269b8 2e1 6C 36 1B 36 
269bc 2e2 6C 00 00 00 
269c0 2e3 00 00 00 00 
269c4 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
269c8 2e5 1B 36 6C 36 
269cc 2e6 1B 00 00 00 
269d0 2e7 88 22 88 22 
269d4 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
269d8 2e9 88 22 88 22 
269dc 2ea 88 22 88 22 
269e0 2eb AA 55 AA 55 
269e4 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
269e8 2ed AA 55 AA 55 
269ec 2ee AA 55 AA 55 
269f0 2ef BB EE BB EE 
269f4 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
269f8 2f1 BB EE BB EE 
269fc 2f2 BB EE BB EE 
26a00 2f3 18 18 18 18 
26a04 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
26a08 2f5 18 18 18 18 
26a0c 2f6 18 18 18 18 
26a10 2f7 18 18 18 18 
26a14 2f8 18 18 18    | 	byte	$18[15]
26a17 2f8 1F 18 18 18 
26a1b 2f9 18 18 18 18 
26a1f 2fa 18 30 18 00 
26a23 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
26a27 2fc 63 7F 63 63 
26a2b 2fd 63 63 00 00 
26a2f 2fe 00 1C 36 00 
26a33 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
26a37 300 63 7F 63 63 
26a3b 301 63 63 00 00 
26a3f 302 00 36 1C 00 
26a43 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
26a47 304 1E 16 06 46 
26a4b 305 66 7F 00 00 
26a4f 306 00 00 00 00 
26a53 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
26a57 308 1C 30 60 63 
26a5b 309 63 3E 18 30 
26a5f 30a 1E 6C 6C 6C 
26a63 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
26a67 30c 6F 6C 6C 6C 
26a6b 30d 6C 6C 6C 6C 
26a6f 30e 6C 6C 6C 6C 
26a73 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
26a77 310 6C 6C 6C 6C 
26a7b 311 6C 6C 6C 6C 
26a7f 312 6C          | 	byte	$6c[9]
26a80 313 00 00 00 00 
26a84 314 00          | 	byte	$00[5]
26a85 314 7F 60 6F 6C 
26a89 315 6C 6C 6C 6C 
26a8d 316 6C 6C 6C 6C 
26a91 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
26a95 318 6F 60 7F 00 
26a99 319 00 00 00 00 
26a9d 31a 00 00 00 18 
26aa1 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
26aa5 31c 61 30 18 0C 
26aa9 31d 06 43 63 7F 
26aad 31e 00 00 00 00 
26ab1 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
26ab5 320 00 7F 33 18 
26ab9 321 0C 06 63 7F 
26abd 322 00 00 00 00 
26ac1 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
26ac5 324 00 00 1F 18 
26ac9 325 18 18 18 18 
26acd 326 18 18 18 18 
26ad1 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26ad5 328 18 18 F8 00 
26ad9 329 00 00 00 00 
26add 32a 00 00 00 18 
26ae1 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
26ae5 32c 18 18 FF 00 
26ae9 32d 00 00 00 00 
26aed 32e 00 00 00 00 
26af1 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26af5 330 00 00 FF 18 
26af9 331 18 18 18 18 
26afd 332 18 18 18 18 
26b01 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26b05 334 18 18 F8 18 
26b09 335 18 18 18 18 
26b0d 336 18 18 18 00 
26b11 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
26b15 338 00 00 FF 00 
26b19 339 00 00 00 00 
26b1d 33a 00 00 00 18 
26b21 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
26b25 33c 18 18 FF 18 
26b29 33d 18 18 18 18 
26b2d 33e 18 18 18 63 
26b31 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
26b35 340 36 63 63 7F 
26b39 341 63 63 63 63 
26b3d 342 00 00 00 00 
26b41 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
26b45 344 00 1E 30 3E 
26b49 345 33 33 33 6E 
26b4d 346 00 00 00 6C 
26b51 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
26b55 348 EC 0C FC 00 
26b59 349 00 00 00 00 
26b5d 34a 00 00 00 00 
26b61 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b65 34c FC 0C EC 6C 
26b69 34d 6C 6C 6C 6C 
26b6d 34e 6C 6C 6C 6C 
26b71 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
26b75 350 EF 00 FF 00 
26b79 351 00 00 00 00 
26b7d 352 00 00 00 00 
26b81 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26b85 354 FF 00 EF 6C 
26b89 355 6C 6C 6C 6C 
26b8d 356 6C 6C 6C 6C 
26b91 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
26b95 358 EC 0C EC 6C 
26b99 359 6C 6C 6C 6C 
26b9d 35a 6C 6C 6C 00 
26ba1 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
26ba5 35c FF 00 FF 00 
26ba9 35d 00 00 00 00 
26bad 35e 00 00 00 6C 
26bb1 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
26bb5 360 EF 00 EF 6C 
26bb9 361 6C 6C 6C 6C 
26bbd 362 6C 6C 6C 00 
26bc1 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
26bc5 364 63 3E 63 63 
26bc9 365 63 63 3E 63 
26bcd 366 00 00 00 00 
26bd1 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
26bd5 368 30 3C 36 33 
26bd9 369 33 33 33 6E 
26bdd 36a 00 00 00 00 
26be1 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
26be5 36c 66 66 6F 66 
26be9 36d 66 66 36 1F 
26bed 36e 00 00 00 36 
26bf1 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
26bf5 370 66 66 66 66 
26bf9 371 66 66       | 	byte	$66[6]
26bfb 371 36 1F 00 00 
26bff 372 00 00 63 00 
26c03 373 7F 66 46 16 
26c07 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
26c0b 375 66 7F 00 00 
26c0f 376 00 6C 38 00 
26c13 377 38 30 30 3C 
26c17 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
26c1b 379 33 6E 00 00 
26c1f 37a 00 36 1C 00 
26c23 37b 63 67 6F 7F 
26c27 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
26c2b 37d 63 63 00 00 
26c2f 37e 00 30 18 00 
26c33 37f 3C 18 18 18 
26c37 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
26c3b 381 18 3C 00 00 
26c3f 382 00 3C 66 00 
26c43 383 3C 18 18 18 
26c47 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
26c4b 385 18 3C 00 00 
26c4f 386 00 00 00 36 
26c53 387 1C 08 00 3E 
26c57 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
26c5b 389 63 3E 00 00 
26c5f 38a 00 18 18 18 
26c63 38b 18 18 18 18 
26c67 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
26c6b 38d 00 00 00 00 
26c6f 38e 00 00 00 00 
26c73 38f 00 00 00 00 | 	byte	$00[12]
26c77 390 F8 18 18 18 
26c7b 391 18 18 18 18 
26c7f 392 18 FF FF FF 
26c83 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
26c87 394 FF FF FF FF 
26c8b 395 FF FF FF FF 
26c8f 396 FF          | 	byte	$ff[9]
26c90 397 00 00 00 00 
26c94 398 00 00 00    | 	byte	$00[7]
26c97 398 FF FF FF FF 
26c9b 399 FF FF FF FF 
26c9f 39a FF          | 	byte	$ff[9]
26ca0 39b 00 00 00 7E 
26ca4 39c 7E 5A 18 18 
26ca8 39d 18 18 18 18 
26cac 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
26cb0 39f 1C 36 1C 63 
26cb4 3a0 63 63 63 63 
26cb8 3a1 63 63 63 63 
26cbc 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26cc0 3a3 FF FF FF FF 
26cc4 3a4 FF FF FF    | 	byte	$ff[7]
26cc7 3a4 00 00 00 00 
26ccb 3a5 00 00 00 00 
26ccf 3a6 00          | 	byte	$00[9]
26cd0 3a7 30 18 00 3E 
26cd4 3a8 63 63 63 63 
26cd8 3a9 63 63 63 63 
26cdc 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26ce0 3ab 00 00 00 1E 
26ce4 3ac 33 33 33 1B 
26ce8 3ad 33 63 63 63 
26cec 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
26cf0 3af 1C 36 00 3E 
26cf4 3b0 63 63 63 63 
26cf8 3b1 63 63 63 63 
26cfc 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26d00 3b3 30 18 00 63 
26d04 3b4 67 6F 7F 7B 
26d08 3b5 73 63 63 63 
26d0c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
26d10 3b7 00 00 60 30 
26d14 3b8 18 00 3B 66 
26d18 3b9 66 66 66 66 
26d1c 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
26d20 3bb 00 00 36 1C 
26d24 3bc 08 00 3B 66 
26d28 3bd 66 66 66 66 
26d2c 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
26d30 3bf 36 1C 00 3E 
26d34 3c0 63 63 06 1C 
26d38 3c1 30 60 63 63 
26d3c 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
26d40 3c3 00 00 36 1C 
26d44 3c4 08 00 3E 63 
26d48 3c5 06 1C 30 63 
26d4c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
26d50 3c7 30 18 00 3F 
26d54 3c8 66 66 66 3E 
26d58 3c9 36 66 66 66 
26d5c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
26d60 3cb 30 18 00 63 
26d64 3cc 63 63 63 63 
26d68 3cd 63 63 63 63 
26d6c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26d70 3cf 00 00 60 30 
26d74 3d0 18 00 3B 6E 
26d78 3d1 66 06 06 06 
26d7c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
26d80 3d3 66 33 00 63 
26d84 3d4 63 63 63 63 
26d88 3d5 63 63 63 63 
26d8c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
26d90 3d7 00 00 60 30 
26d94 3d8 18 00 63 63 
26d98 3d9 63 63 63 63 
26d9c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
26da0 3db 30 18 00 66 
26da4 3dc 66 66 66 3C 
26da8 3dd 18 18 18 18 
26dac 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
26db0 3df 00 00 00 08 
26db4 3e0 0C 0C 3F 0C 
26db8 3e1 0C 0C 0C 6C 
26dbc 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
26dc0 3e3 30 18 00 00 
26dc4 3e4 00 00 00 00 
26dc8 3e5 00 00 00 00 
26dcc 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26dd0 3e7 00 00 00 00 
26dd4 3e8 00 00 00 00 | 	byte	$00[8]
26dd8 3e9 7F 00 00 00 
26ddc 3ea 00 00 00 00 
26de0 3eb 66 33 00 00 
26de4 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
26de8 3ed 00 00 00 00 
26dec 3ee 00 00 00 00 
26df0 3ef 00 00 00 00 
26df4 3f0 00 00 00 00 
26df8 3f1 00 00 00 00 
26dfc 3f2 00          | 	byte	$00[21]
26dfd 3f2 0C 06 3C 36 
26e01 3f3 1C 00 00 00 
26e05 3f4 00 00 00 00 
26e09 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e0d 3f6 00 00 00 63 
26e11 3f7 3E 00 00 00 
26e15 3f8 00 00 00 00 
26e19 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e1d 3fa 00 00 00 00 
26e21 3fb 3E 63 06 1C 
26e25 3fc 36 63 63 36 
26e29 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
26e2d 3fe 00 00 00 00 
26e31 3ff 00 00 00 00 | 	byte	$00[8]
26e35 400 18 00 7E 00 
26e39 401 18 00 00 00 
26e3d 402 00 00 00 00 
26e41 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e45 404 00 00 00 00 
26e49 405 00 00 00 00 | 	byte	$00[8]
26e4d 406 18 30 1E 00 
26e51 407 00 00 1C 36 
26e55 408 36 1C 00 00 
26e59 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
26e5d 40a 00 00 00 00 
26e61 40b 63 00 00 00 
26e65 40c 00 00 00 00 
26e69 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e6d 40e 00 00 00 18 
26e71 40f 18 00 00 00 
26e75 410 00 00 00 00 
26e79 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26e7d 412 00 00 00 00 
26e81 413 00          | 	byte	$00[5]
26e82 413 CC 66 33 00 
26e86 414 33 33 33 33 
26e8a 415 33 33 6E 00 
26e8e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
26e92 417 00 3F 66 66 
26e96 418 66 3E 36 66 
26e9a 419 66 66 6F 00 
26e9e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
26ea2 41b 36 1C 08 00 
26ea6 41c 3B 6E 66 06 
26eaa 41d 06 06 0F 00 
26eae 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
26eb2 41f 00 00 00 7E 
26eb6 420 7E 7E 7E 7E 
26eba 421 7E 7E 00 00 
26ebe 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
26ec2 423 00 00 00 00 
26ec6 424 00 00 00 00 
26eca 425 00 00 00 00 
26ece 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
26ed0 427             | 'vga_font       file "vgafont.def"
26ed0 427 00 00 00 00 
      ...             
26f00 433 00 00 00 00 
26f04 434 00 00 00    | st_font        file "st4font.def"
26f07 434 FF FF 00 00 
26f0b 435 00 00 00 00 
26f0f 436 00 18 18 18 
26f13 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26f17 438 18 18 18 18 
26f1b 439 18 18 18 18 
26f1f 43a 18          | 	byte	$18[9]
26f20 43b 00 00 00 00 
26f24 43c 00 00 00    | 	byte	$00[7]
26f27 43c FF FF 18 18 
26f2b 43d 18 18 18 18 
26f2f 43e 18 18 18 18 
26f33 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26f37 440 FF FF 00 00 
26f3b 441 00 00 00 00 
26f3f 442 00 18 18 18 
26f43 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26f47 444 1F 1F 18 18 
26f4b 445 18 18 18 18 
26f4f 446 18 18 18 18 
26f53 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26f57 448 F8 F8 18 18 
26f5b 449 18 18 18 18 
26f5f 44a 18 00 00 00 
26f63 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
26f67 44c 1F 1F 18 18 
26f6b 44d 18 18 18 18 
26f6f 44e 18 00 00 00 
26f73 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
26f77 450 F8 F8 18 18 
26f7b 451 18 18 18 18 
26f7f 452 18 18 18 18 
26f83 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
26f87 454 1F 1F 00 00 
26f8b 455 00 00 00 00 
26f8f 456 00 18 18 18 
26f93 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26f97 458 F8 F8 00 00 
26f9b 459 00 00 00 00 
26f9f 45a 00 18 18 18 
26fa3 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
26fa7 45c FF FF 18 18 
26fab 45d 18 18 18 18 
26faf 45e 18 00 00 18 
26fb3 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
26fb7 460 66 7E 7E 66 
26fbb 461 66 66 66 30 
26fbf 462 18 00 00 7E 
26fc3 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
26fc7 464 3E 06 06 06 
26fcb 465 06 7E 7E 18 
26fcf 466 0C 30 18 3C 
26fd3 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
26fd7 468 06 06 06 66 
26fdb 469 66 7E 3C 00 
26fdf 46a 00 30 18 66 
26fe3 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
26fe7 46c 7E 7E 76 76 
26feb 46d 66 66 66 00 
26fef 46e 00 30 18 7C 
26ff3 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
26ff7 470 1C 38 70 60 
26ffb 471 60 7E 3E 00 
26fff 472 00 30 18 7E 
27003 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
27007 474 18 0C 0C 06 
2700b 475 06 7E 7E 00 
2700f 476 00 18 18 00 
27013 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
27017 478 18 18 0C 0C 
2701b 479 06 7E 7E 00 
2701f 47a 00 30 18 3C 
27023 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
27027 47c 66 66 66 66 
2702b 47d 66          | 	byte	$66[5]
2702c 47e 7E 3C 00 00 
27030 47f 00 00 06 06 
27034 480 06 06 16 1E 
27038 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
2703c 482 7E 7E 00 00 
27040 483 00 00 00 00 
27044 484 00 3C 7C 60 
27048 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
2704c 486 7E 7C 30 18 
27050 487 00 00 00 00 
27054 488 00 3C 7E 66 
27058 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
2705c 48a 7E 7C 18 0C 
27060 48b 00 00 30 18 
27064 48c 00 3C 3E 06 
27068 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
2706c 48e 7E 7C 00 00 
27070 48f 00 00 30 18 
27074 490 00 3E 7E 66 
27078 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
2707c 492 66 66 00 00 
27080 493 00 00 30 18 
27084 494 00 7C 7E 06 
27088 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
2708c 496 7E 3E 00 00 
27090 497 00 00 30 18 
27094 498 00 7E 7E 30 
27098 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2709c 49a 7E 7E 00 00 
270a0 49b 00 00 18 18 
270a4 49c 00 7E 7E 30 
270a8 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
270ac 49e 7E 7E 00 00 
270b0 49f 00 00 30 18 
270b4 4a0 00 3C 7E 66 
270b8 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
270bc 4a2 7E 3C 00 00 
270c0 4a3 00 00 1C 1C 
270c4 4a4 18 18 38 3C 
270c8 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
270cc 4a6 3C 3C 00 00 
270d0 4a7 00 00 00 00 
270d4 4a8 00 00 00 00 
270d8 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
270dc 4aa 00 00 00 00 
270e0 4ab 00 00       | 	byte	$00[6]
270e2 4ab 18 18 18 18 
270e6 4ac 18 18 18 18 | 	byte	$18[8]
270ea 4ad 00 00 18 18 
270ee 4ae 00 00 00 00 
270f2 4af 66 66 66 66 
270f6 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
270fa 4b1 00 00 00 00 
270fe 4b2 00 00 00 00 
27102 4b3 00          | 	byte	$00[9]
27103 4b3 66 66 FF FF 
27107 4b4 66 66 FF FF 
2710b 4b5 66 66 00 00 
2710f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
27113 4b7 7C 7E 06 06 
27117 4b8 3E 7C 60 60 
2711b 4b9 7E 3E 18 18 
2711f 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
27123 4bb 66 30 30 18 
27127 4bc 18 0C 0C 66 
2712b 4bd 66 00 00 00 
2712f 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
27133 4bf 66 66 3C 1C 
27137 4c0 1C FC FE 66 
2713b 4c1 66 FE FC 00 
2713f 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
27143 4c3 18 18 18 18 
27147 4c4 00 00 00 00 
2714b 4c5 00 00 00 00 
2714f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
27153 4c7 18 1C 0C 0C 
27157 4c8 0C 0C 0C 0C 
2715b 4c9 1C 18 30 00 
2715f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
27163 4cb 18 38 30 30 
27167 4cc 30 30 30 30 
2716b 4cd 38 18 0C 00 
2716f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
27173 4cf 66 66 3C 3C 
27177 4d0 FF FF 3C 3C 
2717b 4d1 66 66 00 00 
2717f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
27183 4d3 00 18 18 18 
27187 4d4 7E 7E 18 18 
2718b 4d5 18 00 00 00 
2718f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27193 4d7 00 00 00 00 
27197 4d8 00 00       | 	byte	$00[6]
27199 4d9 18 18 18 18 
2719d 4da 18          | 	byte	$18[5]
2719e 4da 0C 04 00 00 
271a2 4db 00 00 00 00 
271a6 4dc 7E 7E 00 00 
271aa 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
271ae 4de 00 00 00 00 
271b2 4df 00 00 00 00 
271b6 4e0 00 00 00 00 
271ba 4e1 00          | 	byte	$00[13]
271bb 4e1 18 18 18 00 
271bf 4e2 00 00 00 60 
271c3 4e3 60 60 30 30 
271c7 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
271cb 4e5 06 06 06 00 
271cf 4e6 00 00 00 3C 
271d3 4e7 7E 66 66 66 
271d7 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
271db 4e9 66 7E 3C 00 
271df 4ea 00 00 00 18 
271e3 4eb 18 1C 1C 18 
271e7 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
271eb 4ed 18 7E 7E 00 
271ef 4ee 00 00 00 3C 
271f3 4ef 7E 66 66 30 
271f7 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
271fb 4f1 0C 7E 7E 00 
271ff 4f2 00 00 00 7E 
27203 4f3 7E 30 30 18 
27207 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
2720b 4f5 66 7E 3C 00 
2720f 4f6 00 00 00 30 
27213 4f7 30 38 38 3C 
27217 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
2721b 4f9 7E 30 30 00 
2721f 4fa 00 00 00 7E 
27223 4fb 7E 06 06 3E 
27227 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
2722b 4fd 66 7E 3C 00 
2722f 4fe 00 00 00 38 
27233 4ff 3C 0E 06 06 
27237 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
2723b 501 66 7E 3C 00 
2723f 502 00 00 00 7E 
27243 503 7E 60 60 30 
27247 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
2724b 505 0C 0C 0C 00 
2724f 506 00 00 00 3C 
27253 507 7E 66 66 3C 
27257 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
2725b 509 66 7E 3C 00 
2725f 50a 00 00 00 3C 
27263 50b 7E 66 66 7E 
27267 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
2726b 50d 70 3C 1C 00 
2726f 50e 00 00 00 00 
27273 50f 00 00 18 18 
27277 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
2727b 511 18 18 18 00 
2727f 512 00 00 00 00 
27283 513 00 00 18 18 
27287 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
2728b 515 18 18 18 0C 
2728f 516 04 00 00 00 
27293 517 70 38 1C 0E 
27297 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
2729b 519 70 00 00 00 
2729f 51a 00 00 00 00 
272a3 51b 00 00 7E 7E 
272a7 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
272ab 51d 00 00 00 00 
272af 51e 00 00 00 00 | 	byte	$00[8]
272b3 51f 0E 1C 38 70 
272b7 520 E0 70 38 1C 
272bb 521 0E 00 00 00 
272bf 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
272c3 523 7E 66 66 30 
272c7 524 30 18 18 18 
272cb 525 00 18 18 00 
272cf 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
272d3 527 7E 66 66 66 
272d7 528 66 36 06 66 
272db 529 66 7E 3C 00 
272df 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
272e3 52b 3C 7E 66 66 
272e7 52c 66 7E 7E 66 
272eb 52d 66 66 66 00 
272ef 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
272f3 52f 7E 66 66 7E 
272f7 530 3E 66 66 66 
272fb 531 66 7E 3E 00 
272ff 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
27303 533 7E 66 66 06 
27307 534 06 06 06 66 
2730b 535 66 7E 3C 00 
2730f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
27313 537 7E 66 66 66 
27317 538 66 66 66 66 
2731b 539 66 7E 3E 00 
2731f 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
27323 53b 7E 06 06 3E 
27327 53c 3E 06 06 06 
2732b 53d 06 7E 7E 00 
2732f 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
27333 53f 7E 06 06 3E 
27337 540 3E 06 06 06 
2733b 541 06 06 06 00 
2733f 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
27343 543 7E 06 06 76 
27347 544 76 66 66 66 
2734b 545 66 7E 3C 00 
2734f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
27353 547 66 66 66 7E 
27357 548 7E 66 66 66 
2735b 549 66 66 66 00 
2735f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
27363 54b 7E 18 18 18 
27367 54c 18 18 18 18 
2736b 54d 18 7E 7E 00 
2736f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
27373 54f 60 60 60 60 
27377 550 60 60 60    | 	byte	$60[7]
2737a 551 66 66 7E 3C 
2737e 552 00 00 00 00 
27382 553 66 66 36 36 
27386 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
2738a 555 66 66 C6 C6 
2738e 556 00 00 00 00 
27392 557 06 06 06 06 
27396 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
2739a 559 06 06 7E 7E 
2739e 55a 00 00 00 00 
273a2 55b C6 C6 EE EE 
273a6 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
273aa 55d C6 C6 C6 C6 
273ae 55e 00 00 00 00 
273b2 55f 66 66 66 6E 
273b6 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
273ba 561 76 66 66 66 
273be 562 00 00 00 00 
273c2 563 3C 7E 66 66 
273c6 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
273ca 565 66 66 7E 3C 
273ce 566 00 00 00 00 
273d2 567 3E 7E 66 66 
273d6 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
273da 569 06 06 06 06 
273de 56a 00 00 00 00 
273e2 56b 3C 7E 66 66 
273e6 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
273ea 56d 66 56 3E 6C 
273ee 56e 00 00 00 00 
273f2 56f 3E 7E 66 66 
273f6 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
273fa 571 66 66 C6 C6 
273fe 572 00 00 00 00 
27402 573 7C 7E 06 06 
27406 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
2740a 575 60 60 7E 3E 
2740e 576 00 00 00 00 
27412 577 7E 7E 18 18 
27416 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
2741a 579 18 18 18 18 
2741e 57a 00 00 00 00 
27422 57b 66 66 66 66 
27426 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2742a 57d 66 66 7E 3C 
2742e 57e 00 00 00 00 
27432 57f 66 66 66 66 
27436 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
2743a 581 3C 3C 18 18 
2743e 582 00 00 00 00 
27442 583 C6 C6 C6 C6 
27446 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
2744a 585 FE EE C6 82 
2744e 586 00 00 00 00 
27452 587 66 66 66 3C 
27456 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
2745a 589 3C 66 66 66 
2745e 58a 00 00 00 00 
27462 58b 66 66 66 66 
27466 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
2746a 58d 18 18 18 18 
2746e 58e 00 00 00 00 
27472 58f 7E 7E 30 30 
27476 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
2747a 591 06 06 7E 7E 
2747e 592 00 00 00 00 
27482 593 3C 3C 0C 0C 
27486 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
2748a 595 0C 0C 3C 3C 
2748e 596 00 00 00 00 
27492 597 06 06 0C 0C 
27496 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
2749a 599 60 60 C0 C0 
2749e 59a 00 00 00 00 
274a2 59b 3C 3C 30 30 
274a6 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
274aa 59d 30 30 3C 3C 
274ae 59e 00 00 00 00 
274b2 59f 18 18 3C 3C 
274b6 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
274ba 5a1 00 00 00 00 
274be 5a2 00 00 00 00 
274c2 5a3 00 00 00 00 
274c6 5a4 00 00 00 00 
274ca 5a5 00 00       | 	byte	$00[18]
274cc 5a6 FE FE 00 00 
274d0 5a7 00 00 0C 0C 
274d4 5a8 18 18 00 00 
274d8 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
274dc 5aa 00 00 00 00 
274e0 5ab 00 00 00 00 
274e4 5ac 00          | 	byte	$00[9]
274e5 5ac 3C 7C 60 7C 
274e9 5ad 7E 66 66 7E 
274ed 5ae 7C 00 00 00 
274f1 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
274f5 5b0 3E 7E 66 66 
274f9 5b1 66 66 66 7E 
274fd 5b2 3E 00 00 00 
27501 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
27505 5b4 3C 3E 06 06 
27509 5b5 06 06 06 7E 
2750d 5b6 7C 00 00 00 
27511 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
27515 5b8 7C 7E 66 66 
27519 5b9 66 66 66 7E 
2751d 5ba 7C 00 00 00 
27521 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
27525 5bc 3C 7E 66 66 
27529 5bd 7E 06 06 7E 
2752d 5be 7C 00 00 00 
27531 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
27535 5c0 18 7E 7E 18 
27539 5c1 18 18 18 18 
2753d 5c2 18 00 00 00 
27541 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
27545 5c4 7C 7E 66 66 
27549 5c5 66 66 7E 7C 
2754d 5c6 60 7E 3E 00 
27551 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
27555 5c8 3E 7E 66 66 
27559 5c9 66 66 66 66 
2755d 5ca 66 00 00 00 
27561 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
27565 5cc 1C 1C 18 18 
27569 5cd 18 18 18 3C 
2756d 5ce 3C 00 00 00 
27571 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
27575 5d0 30 30 30 30 
27579 5d1 30 30 30 30 
2757d 5d2 30          | 	byte	$30[9]
2757e 5d2 3E 1E 00 00 
27582 5d3 06 06 06 36 
27586 5d4 36 1E 1E 1E 
2758a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2758e 5d6 00 00 00 00 
27592 5d7 1C 1C 18 18 
27596 5d8 18 18 18 18 
2759a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2759e 5da 00 00 00 00 
275a2 5db 00 00 00    | 	byte	$00[7]
275a5 5dc 6C FE FE D6 
275a9 5dd D6 C6 C6 C6 
275ad 5de C6 00 00 00 
275b1 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
275b5 5e0 3E 7E 66 66 
275b9 5e1 66 66 66 66 
275bd 5e2 66 00 00 00 
275c1 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
275c5 5e4 3C 7E 66 66 
275c9 5e5 66 66 66 7E 
275cd 5e6 3C 00 00 00 
275d1 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
275d5 5e8 3E 7E 66 66 
275d9 5e9 66 66 66 7E 
275dd 5ea 3E 06 06 00 
275e1 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
275e5 5ec 7C 7E 66 66 
275e9 5ed 66 66 66 7E 
275ed 5ee 7C 60 60 00 
275f1 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
275f5 5f0 3E 7E 66 06 
275f9 5f1 06 06 06 06 
275fd 5f2 06 00 00 00 
27601 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
27605 5f4 7C 7E 06 0E 
27609 5f5 3C 70 60 7E 
2760d 5f6 3E 00 00 00 
27611 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
27615 5f8 7E 7E 18 18 
27619 5f9 18 18 18 78 
2761d 5fa 70 00 00 00 
27621 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
27625 5fc 66 66 66 66 
27629 5fd 66 66 66    | 	byte	$66[7]
2762c 5fe 7E 7C 00 00 
27630 5ff 00 00 00 00 
27634 600 00 66 66 66 
27638 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
2763c 602 18 18 00 00 
27640 603 00 00 00 00 
27644 604 00 C6 C6 D6 
27648 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
2764c 606 C6 82 00 00 
27650 607 00 00 00 00 
27654 608 00 66 66 3C 
27658 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
2765c 60a 66 66 00 00 
27660 60b 00 00 00 00 
27664 60c 00 66 66 66 
27668 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
2766c 60e 7C 60 7E 3E 
27670 60f 00 00 00 00 
27674 610 00 7E 7E 30 
27678 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
2767c 612 7E 7E 00 00 
27680 613 00 00 30 18 
27684 614 18 18 18 0C 
27688 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
2768c 616 18 30 00 00 
27690 617 00 00 18 18 
27694 618 18 18 18 18 
27698 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
2769c 61a 18 18 00 00 
276a0 61b 00 00 0C 18 
276a4 61c 18 18 18 30 
276a8 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
276ac 61e 18 0C 00 00 
276b0 61f 00 00 6C 7E 
276b4 620 36 00 00 00 
276b8 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
276bc 622 00 00 00 00 
276c0 623 00 00 00 00 
276c4 624 00          | 	byte	$00[9]
276c5 624 18 18 18 18 
276c9 625 18 18 00 00 
276cd 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
276d0 627             | 'amiga_font     file "amigafont.def"
276d0 627 00 6C FE FE 
276d4 628 7C 38 10 00 
276d8 629 18 18 18 F8 
276dc 62a F8 18 18 18 | a8_font        file "atari8.fnt"
276e0 62b C0 C0 C0 C0 
276e4 62c C0 C0 C0 C0 | 	byte	$c0[8]
276e8 62d 18 18 18 1F 
276ec 62e 1F 00 00 00 
276f0 62f 18 18 18 1F 
276f4 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
276f8 631 00 00 00 1F 
276fc 632 1F 18 18 18 
27700 633 C0 E0 70 38 
27704 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
27708 635 03 07 0E 1C 
2770c 636 38 70 E0 C0 
27710 637 80 C0 E0 F0 
27714 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
27718 639 00 00 00 00 
2771c 63a F0 F0 F0 F0 
27720 63b 01 03 07 0F 
27724 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
27728 63d F0 F0 F0 F0 
2772c 63e 00 00 00 00 
27730 63f 0F 0F 0F 0F 
27734 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
27738 641 FF FF 00 00 
2773c 642 00 00 00 00 
27740 643 00 00 00 00 
27744 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
27748 645 00 00 00 00 
2774c 646 0F 0F 0F 0F 
27750 647 00 38 38 EE 
27754 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
27758 649 00 00 00 F8 
2775c 64a F8 18 18 18 
27760 64b 00 00 00 FF 
27764 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
27768 64d 18 18 18 FF 
2776c 64e FF 18 18 18 
27770 64f 00 00 3C 7E 
27774 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
27778 651 00 00 00 00 
2777c 652 FF FF FF FF 
27780 653 03 03 03 03 
27784 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
27788 655 00 00 00 FF 
2778c 656 FF 18 18 18 
27790 657 18 18 18 FF 
27794 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
27798 659 0F 0F 0F 0F 
2779c 65a 0F 0F 0F 0F | 	byte	$0f[8]
277a0 65b 18 18 18 F8 
277a4 65c F8 00 00 00 
277a8 65d 1E 06 1E 06 
277ac 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
277b0 65f 00 18 3C 7E 
277b4 660 18 18 18 00 
277b8 661 00 18 18 18 
277bc 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
277c0 663 00 18 0C 7E 
277c4 664 0C 18 00 00 
277c8 665 00 18 30 7E 
277cc 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
277d0 667 00 00 00 00 
277d4 668 00 00 00 00 
277d8 669 00          | 	byte	$00[9]
277d9 669 18 18 18 18 
277dd 66a 00 18 00 00 
277e1 66b 66 66 66 00 
277e5 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
277e9 66d 66 FF 66 66 
277ed 66e FF 66 00 18 
277f1 66f 7C 06 3C 60 
277f5 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
277f9 671 66 36 18 0C 
277fd 672 66 62 00 38 
27801 673 6C 38 1C F6 
27805 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
27809 675 18 18 18 00 
2780d 676 00 00 00 00 
27811 677 70 38 18 18 
27815 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
27819 679 0E 1C 18 18 
2781d 67a 1C 0E 00 00 
27821 67b 66 3C FF 3C 
27825 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
27829 67d 18 18 7E 18 
2782d 67e 18 00 00 00 
27831 67f 00 00 00 00 
27835 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
27839 681 00 00 7E 00 
2783d 682 00 00 00 00 
27841 683 00 00 00 00 
27845 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
27849 685 60 30 18 0C 
2784d 686 06 02 00 00 
27851 687 3C 66 76 6E 
27855 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
27859 689 18 1C 18 18 
2785d 68a 18 7E 00 00 
27861 68b 3C 66 30 18 
27865 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
27869 68d 7E 30 18 30 
2786d 68e 66 3C 00 00 
27871 68f 30 38 3C 36 
27875 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
27879 691 7E 06 3E 60 
2787d 692 66 3C 00 00 
27881 693 3C 06 3E 66 
27885 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
27889 695 7E 60 30 18 
2788d 696 0C 0C 00 00 
27891 697 3C 66 3C 66 
27895 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
27899 699 3C 66 7C 60 
2789d 69a 30 1C 00 00 
278a1 69b 00 18 18 00 
278a5 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
278a9 69d 00 18 18 00 
278ad 69e 18 18 0C 60 
278b1 69f 30 18 0C 18 
278b5 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
278b9 6a1 00 7E 00 00 
278bd 6a2 7E 00 00 06 
278c1 6a3 0C 18 30 18 
278c5 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
278c9 6a5 3C 66 30 18 
278cd 6a6 00 18 00 00 
278d1 6a7 3C 66 76 76 
278d5 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
278d9 6a9 18 3C 66 66 
278dd 6aa 7E 66 00 00 
278e1 6ab 3E 66 3E 66 
278e5 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
278e9 6ad 3C 66 06 06 
278ed 6ae 66 3C 00 00 
278f1 6af 1E 36 66 66 
278f5 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
278f9 6b1 7E 06 3E 06 
278fd 6b2 06 7E 00 00 
27901 6b3 7E 06 3E 06 
27905 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
27909 6b5 7C 06 06 76 
2790d 6b6 66 7C 00 00 
27911 6b7 66 66 7E 66 
27915 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
27919 6b9 7E 18 18 18 
2791d 6ba 18 7E 00 00 
27921 6bb 60 60 60 60 
27925 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
27929 6bd 66 36 1E 1E 
2792d 6be 36 66 00 00 
27931 6bf 06 06 06 06 
27935 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
27939 6c1 C6 EE FE D6 
2793d 6c2 C6 C6 00 00 
27941 6c3 66 6E 7E 7E 
27945 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
27949 6c5 3C 66 66 66 
2794d 6c6 66 3C 00 00 
27951 6c7 3E 66 66 3E 
27955 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
27959 6c9 3C 66 66 66 
2795d 6ca 36 6C 00 00 
27961 6cb 3E 66 66 3E 
27965 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
27969 6cd 3C 06 3C 60 
2796d 6ce 60 3C 00 00 
27971 6cf 7E 18 18 18 
27975 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
27979 6d1 66 66 66 66 
2797d 6d2 66          | 	byte	$66[5]
2797e 6d2 7E 00 00 66 
27982 6d3 66 66 66 3C 
27986 6d4 18 00 00 C6 
2798a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2798e 6d6 C6 00 00 66 
27992 6d7 66 3C 3C 66 
27996 6d8 66 00 00 66 
2799a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2799e 6da 18 00 00 7E 
279a2 6db 30 18 0C 06 
279a6 6dc 7E 00 00 78 
279aa 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
279ae 6de 78 00 00 02 
279b2 6df 06 0C 18 30 
279b6 6e0 60 00 00 1E 
279ba 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
279be 6e2 1E 00 00 10 
279c2 6e3 38 6C C6 00 
279c6 6e4 00 00 00 00 
279ca 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
279ce 6e6 FF 00 00 18 
279d2 6e7 3C 7E 7E 3C 
279d6 6e8 18 00 00 00 
279da 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
279de 6ea 7C 00 00 06 
279e2 6eb 06 3E 66 66 
279e6 6ec 3E 00 00 00 
279ea 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
279ee 6ee 3C 00 00 60 
279f2 6ef 60 7C 66 66 
279f6 6f0 7C 00 00 00 
279fa 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
279fe 6f2 3C 00 00 70 
27a02 6f3 18 7C 18 18 
27a06 6f4 18 00 00 00 
27a0a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
27a0e 6f6 60 3E 00 06 
27a12 6f7 06 3E 66 66 
27a16 6f8 66 00 00 18 
27a1a 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
27a1e 6fa 3C 00 00 60 
27a22 6fb 00 60 60 60 
27a26 6fc 60 3C 00 06 
27a2a 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
27a2e 6fe 66 00 00 1C 
27a32 6ff 18 18 18 18 
27a36 700 3C 00 00 00 
27a3a 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
27a3e 702 C6 00 00 00 
27a42 703 3E 66 66 66 
27a46 704 66 00 00 00 
27a4a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
27a4e 706 3C 00 00 00 
27a52 707 3E 66 66 3E 
27a56 708 06 06 00 00 
27a5a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
27a5e 70a 60 60 00 00 
27a62 70b 3E 66 06 06 
27a66 70c 06 00 00 00 
27a6a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
27a6e 70e 3E 00 00 18 
27a72 70f 7E 18 18 18 
27a76 710 70 00 00 00 
27a7a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
27a7e 712 7C 00 00 00 
27a82 713 66 66 66 3C 
27a86 714 18 00 00 00 
27a8a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
27a8e 716 6C 00 00 00 
27a92 717 66 3C 18 3C 
27a96 718 66 00 00 00 
27a9a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
27a9e 71a 30 1E 00 00 
27aa2 71b 7E 30 18 0C 
27aa6 71c 7E 00 00 18 
27aaa 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
27aae 71e 3C 00 18 18 
27ab2 71f 18 18 18 18 
27ab6 720 18 18 00 7E 
27aba 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
27abe 722 60 00 10 18 
27ac2 723 1C 1E 1C 18 
27ac6 724 10 00 08 18 
27aca 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
27ace 726 08 00       | 	byte	$08, $00
27ad0 727 00 00 00 00 
27ad4 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
27ad5 728 80 00 00 00 
27ad9 729 00 80 00 00 
27add 72a 80 80 00 00 
27ae1 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
27ae5 72c 80 00 80 00 
27ae9 72d 00 40 80 00 
27aed 72e AA AA AA 00 
27af1 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
27af5 730 FF 00 00 00 
27af9 731 00 FF 00 00 
27afd 732 FF FF 00 00 
27b01 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
27b05 734 FF 00 FF 00 
27b09 735 00 FF FF 00 
27b0d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
27b10 737 00 00 00 00 
27b14 738 00          | ataripalette   file "ataripalettep2.def"
27b15 738 11 11 11 00 
27b19 739 22 22 22 00 
27b1d 73a 33 33 33 00 
27b21 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
27b25 73c 55 55 55 00 
27b29 73d 66 66 66 00 
27b2d 73e 77 77 77 00 
27b31 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
27b35 740 99 99 99 00 
27b39 741 AA AA AA 00 
27b3d 742 BB BB BB 00 
27b41 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
27b45 744 DD DD DD 00 
27b49 745 EE EE EE 00 
27b4d 746 FF FF FF 00 
27b51 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
27b55 748 00 14 40 00 
27b59 749 00 1E 60 00 
27b5d 74a 00 28 80 00 
27b61 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
27b65 74c 00 3C BF 00 
27b69 74d 00 46 DF 00 
27b6d 74e 00 50 FF 00 
27b71 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
27b75 750 39 77 FF 00 
27b79 751 55 8A FF 00 
27b7d 752 71 9E FF 00 
27b81 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
27b85 754 AA C5 FF 00 
27b89 755 C6 D8 FF 00 
27b8d 756 E3 EC FF 00 
27b91 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
27b95 758 00 00 40 00 
27b99 759 00 00 60 00 
27b9d 75a 00 00 80 00 
27ba1 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
27ba5 75c 00 00 BF 00 
27ba9 75d 00 00 DF 00 
27bad 75e 00 00 FF 00 
27bb1 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
27bb5 760 39 39 FF 00 
27bb9 761 55 55 FF 00 
27bbd 762 71 71 FF 00 
27bc1 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
27bc5 764 AA AA FF 00 
27bc9 765 C6 C6 FF 00 
27bcd 766 E3 E3 FF 00 
27bd1 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
27bd5 768 20 00 40 00 
27bd9 769 30 00 60 00 
27bdd 76a 40 00 80 00 
27be1 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
27be5 76c 60 00 BF 00 
27be9 76d 70 00 DF 00 
27bed 76e 80 00 FF 00 
27bf1 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
27bf5 770 9C 39 FF 00 
27bf9 771 AA 55 FF 00 
27bfd 772 B8 71 FF 00 
27c01 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
27c05 774 D5 AA FF 00 
27c09 775 E3 C6 FF 00 
27c0d 776 F1 E3 FF 00 
27c11 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
27c15 778 40 00 40 00 
27c19 779 60 00 60 00 
27c1d 77a 80 00 80 00 
27c21 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
27c25 77c BF 00 BF 00 
27c29 77d DF 00 DF 00 
27c2d 77e FF 00 FF 00 
27c31 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
27c35 780 FF 39 FF 00 
27c39 781 FF 55 FF 00 
27c3d 782 FF 71 FF 00 
27c41 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
27c45 784 FF AA FF 00 
27c49 785 FF C6 FF 00 
27c4d 786 FF E3 FF 00 
27c51 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
27c55 788 40 00 20 00 
27c59 789 60 00 30 00 
27c5d 78a 80 00 40 00 
27c61 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
27c65 78c BF 00 60 00 
27c69 78d DF 00 70 00 
27c6d 78e FF 00 80 00 
27c71 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
27c75 790 FF 39 9C 00 
27c79 791 FF 55 AA 00 
27c7d 792 FF 71 B8 00 
27c81 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
27c85 794 FF AA D5 00 
27c89 795 FF C6 E3 00 
27c8d 796 FF E3 F1 00 
27c91 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
27c95 798 40 00 00 00 
27c99 799 60 00 00 00 
27c9d 79a 80 00 00 00 
27ca1 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
27ca5 79c BF 00 00 00 
27ca9 79d DF 00 00 00 
27cad 79e FF 00 00 00 
27cb1 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
27cb5 7a0 FF 39 39 00 
27cb9 7a1 FF 55 55 00 
27cbd 7a2 FF 71 71 00 
27cc1 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
27cc5 7a4 FF AA AA 00 
27cc9 7a5 FF C6 C6 00 
27ccd 7a6 FF E3 E3 00 
27cd1 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
27cd5 7a8 40 10 00 00 
27cd9 7a9 60 18 00 00 
27cdd 7aa 80 20 00 00 
27ce1 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
27ce5 7ac BF 30 00 00 
27ce9 7ad DF 38 00 00 
27ced 7ae FF 40 00 00 
27cf1 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
27cf5 7b0 FF 6A 39 00 
27cf9 7b1 FF 80 55 00 
27cfd 7b2 FF 95 71 00 
27d01 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
27d05 7b4 FF BF AA 00 
27d09 7b5 FF D5 C6 00 
27d0d 7b6 FF EA E3 00 
27d11 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
27d15 7b8 40 20 00 00 
27d19 7b9 60 30 00 00 
27d1d 7ba 80 40 00 00 
27d21 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
27d25 7bc BF 60 00 00 
27d29 7bd DF 70 00 00 
27d2d 7be FF 80 00 00 
27d31 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
27d35 7c0 FF 9C 39 00 
27d39 7c1 FF AA 55 00 
27d3d 7c2 FF B8 71 00 
27d41 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
27d45 7c4 FF D5 AA 00 
27d49 7c5 FF E3 C6 00 
27d4d 7c6 FF F1 E3 00 
27d51 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
27d55 7c8 40 30 00 00 
27d59 7c9 60 48 00 00 
27d5d 7ca 80 60 00 00 
27d61 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
27d65 7cc BF 90 00 00 
27d69 7cd DF A8 00 00 
27d6d 7ce FF C0 00 00 
27d71 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
27d75 7d0 FF CE 39 00 
27d79 7d1 FF D5 55 00 
27d7d 7d2 FF DC 71 00 
27d81 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
27d85 7d4 FF EA AA 00 
27d89 7d5 FF F1 C6 00 
27d8d 7d6 FF F8 E3 00 
27d91 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
27d95 7d8 30 40 00 00 
27d99 7d9 48 60 00 00 
27d9d 7da 60 80 00 00 
27da1 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
27da5 7dc 90 BF 00 00 
27da9 7dd A8 DF 00 00 
27dad 7de C0 FF 00 00 
27db1 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
27db5 7e0 CE FF 39 00 
27db9 7e1 D5 FF 55 00 
27dbd 7e2 DC FF 71 00 
27dc1 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
27dc5 7e4 EA FF AA 00 
27dc9 7e5 F1 FF C6 00 
27dcd 7e6 F8 FF E3 00 
27dd1 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
27dd5 7e8 00 40 00 00 
27dd9 7e9 00 60 00 00 
27ddd 7ea 00 80 00 00 
27de1 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
27de5 7ec 00 BF 00 00 
27de9 7ed 00 DF 00 00 
27ded 7ee 00 FF 00 00 
27df1 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
27df5 7f0 39 FF 39 00 
27df9 7f1 55 FF 55 00 
27dfd 7f2 71 FF 71 00 
27e01 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
27e05 7f4 AA FF AA 00 
27e09 7f5 C6 FF C6 00 
27e0d 7f6 E3 FF E3 00 
27e11 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
27e15 7f8 00 40 14 00 
27e19 7f9 00 60 1E 00 
27e1d 7fa 00 80 28 00 
27e21 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
27e25 7fc 00 BF 3C 00 
27e29 7fd 00 DF 46 00 
27e2d 7fe 00 FF 50 00 
27e31 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
27e35 800 39 FF 77 00 
27e39 801 55 FF 8A 00 
27e3d 802 71 FF 9E 00 
27e41 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
27e45 804 AA FF C5 00 
27e49 805 C6 FF D8 00 
27e4d 806 E3 FF EC 00 
27e51 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
27e55 808 00 40 28 00 
27e59 809 00 60 3C 00 
27e5d 80a 00 80 50 00 
27e61 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
27e65 80c 00 BF 78 00 
27e69 80d 00 DF 8C 00 
27e6d 80e 00 FF A0 00 
27e71 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
27e75 810 39 FF B5 00 
27e79 811 55 FF C0 00 
27e7d 812 71 FF CA 00 
27e81 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
27e85 814 AA FF DF 00 
27e89 815 C6 FF EA 00 
27e8d 816 E3 FF F4 00 
27e91 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
27e95 818 00 40 40 00 
27e99 819 00 60 60 00 
27e9d 81a 00 80 80 00 
27ea1 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
27ea5 81c 00 BF BF 00 
27ea9 81d 00 DF DF 00 
27ead 81e 00 FF FF 00 
27eb1 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
27eb5 820 39 FF FF 00 
27eb9 821 55 FF FF 00 
27ebd 822 71 FF FF 00 
27ec1 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
27ec5 824 AA FF FF 00 
27ec9 825 C6 FF FF 00 
27ecd 826 E3 FF FF 00 
27ed1 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
27ed5 828 00 28 40 00 
27ed9 829 00 3C 60 00 
27edd 82a 00 50 80 00 
27ee1 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
27ee5 82c 00 78 BF 00 
27ee9 82d 00 8C DF 00 
27eed 82e 00 A0 FF 00 
27ef1 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
27ef5 830 39 B5 FF 00 
27ef9 831 55 C0 FF 00 
27efd 832 71 CA FF 00 
27f01 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
27f05 834 AA DF FF 00 
27f09 835 C6 EA FF 00 
27f0d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
27f10 837             | 
27f10 837             | '**********************************************************************************
27f10 837             | '
27f10 837             | '        Timings and colors definitions
27f10 837             | '
27f10 837             | '**********************************************************************************
27f10 837             | 
27f10 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
27f10 837 10 00 00 00 
27f14 838 50 00 00 00 
27f18 839 0C 00 00 00 
27f1c 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
27f20 83b 08 00 00 00 
27f24 83c 04 00 00 00 
27f28 83d 08 00 00 00 
27f2c 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
27f30 83f 40 02 00 00 
27f34 840 6A 8C 15 14 
27f38 841 FB 06 B7 01 
27f3c 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
27f40 843 00 00 00 00 
27f44 844 C0 00 00 00 
27f48 845 00 00 00 00 
27f4c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27f50 847 00 75 C7 97 
27f54 848 27 47 F6 0A 
27f58 849 05 79 CB 9B 
27f5c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
27f60 84b             | 
27f60 84b             | ''--------  Initialization  ----------------------------------------------------------------
27f60 84b             | 
27f60 84b 28 0C 64 FD | hdmi            setq    #6
27f64 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
27f68 84d 28 10 64 FD |                 setq    #8
27f6c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
27f70 84f             | 
27f70 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
27f74 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
27f78 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
27f7c 852 D6 C6 01 F1 |                 add     t1,hbase
27f80 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
27f84 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
27f88 855 7B 0B 80 5F 
27f8c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
27f90 857 66 66 86 FF 
27f94 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
27f98 859             | '
27f98 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
27f9c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
27fa0 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
27fa4 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
27fa8 85d             | 
27fa8 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
27fac 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
27fb0 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
27fb4 860             | 
27fb4 860             | ''--------  frame rendering main loop  ---------------------------------------------------
27fb4 860             | 
27fb4 860 28 06 64 FD | p101            setq 	#3
27fb8 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
27fbc 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
27fc0 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
27fc4 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
27fc8 865 00 A0 05 F6 |                 mov     dlinum, #0
27fcc 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
27fd0 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
27fd4 868             | 
27fd4 868             | 
27fd4 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
27fd8 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
27fdc 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
27fe0 86b             |                 
27fe0 86b             | 
27fe0 86b             | 
27fe0 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
27fe0 86b             |   
27fe0 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
27fe4 86c 29 FE 65 3D |          if_nc  setq2   #255
27fe8 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
27fec 86e             | 
27fec 86e             | '' -----   up porch (before the picture)
27fec 86e             | 
27fec 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
27ff0 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
27ff4 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
27ff8 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
27ffc 872             |  
27ffc 872             |    
27ffc 872             |  
27ffc 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
28000 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
28004 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
28008 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2800c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
28010 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
28014 878             | 
28014 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
28018 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
2801c 87a 48 00 B0 FD | 		call    #dli
28020 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
28024 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
28028 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
2802c 87e             |                 	
2802c 87e             |                 
2802c 87e             | 
2802c 87e             |  
2802c 87e             | '' ------- the main screen drawing starts here
2802c 87e             | 
2802c 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
28030 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
28034 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
28038 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
2803c 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
28040 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
28044 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
28048 885             |               
28048 885             | 
28048 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
2804c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
28050 887             | 
28050 887             | ' ---------------- All visible lines displayed now, start vblank  
28050 887             | 
28050 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
28054 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
28058 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
2805c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
28060 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
28064 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
28068 88d             | 
28068 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
28068 88d             | 
28068 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
28068 88d             | 
28068 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
2806c 88e             | 
2806c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
28070 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
28074 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
28078 891             | 
28078 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
2807c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
28080 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
28084 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
28088 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2808c 896             | 
2808c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
28090 897 DD C6 41 F8 |                 getnib  t1,dl,#0
28094 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
28098 899 70 00 90 AD |     if_z        jmp     #preload
2809c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
280a0 89b 94 00 90 AD |     if_z        jmp     #preload2
280a4 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
280a8 89d 0C 00 90 AD |     if_z        jmp     #p390
280ac 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
280b0 89f 28 00 90 AD |     if_z        jmp     #p391  
280b4 8a0             | 
280b4 8a0 2D 00 64 FD | p308            ret
280b8 8a1             |    
280b8 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
280bc 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
280c0 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
280c4 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
280c8 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
280cc 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
280d0 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
280d4 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
280d8 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
280dc 8aa             |  
280dc 8aa             | '' --------  Reload palette. To do 
280dc 8aa             | 
280dc 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
280e0 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
280e4 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
280e8 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
280ec 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
280f0 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
280f4 8b0 70 FF 9F FD |         	jmp     #dli                
280f8 8b1             |       
280f8 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
280f8 8b1             | 
280f8 8b1             | 
280f8 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
280f8 8b1             | 
280f8 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
280fc 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
28100 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
28104 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
28108 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2810c 8b6             |         
2810c 8b6             | '' -------------- Preload a line from PSRAM        
2810c 8b6             |         
2810c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
28110 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
28114 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
28118 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2811c 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
28120 8bb             | 
28120 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
28124 8bc 32 B7 01 F6 |                 mov     buf2,a1024
28128 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2812c 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
28130 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
28134 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
28138 8c1             |  
28138 8c1             |  
28138 8c1             | preload2      '  incmod  dlinum,#3
28138 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2813c 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
28140 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
28144 8c4 28 02 64 FD |                 setq	#1
28148 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2814c 8c6             |                 
2814c 8c6             | 
2814c 8c6             | '' -------------- Draw sprites
2814c 8c6             | 
2814c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
28150 8c7 10 5C 0E F5 | 		and t8,#16 wz
28154 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
28158 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2815c 8ca             | 		
2815c 8ca             | 
2815c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
28160 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
28164 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
28168 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2816c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
28170 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
28174 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
28178 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2817c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
28180 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
28184 8d4 01 52 86 F1 |                 sub     sprite_h,#1
28188 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2818c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
28190 8d7             | 
28190 8d7             | 
28190 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
28194 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
28198 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2819c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
281a0 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
281a4 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
281a8 8dd 00 5E 06 F6 |                 mov 	t9,#0
281ac 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
281b0 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
281b4 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
281b8 8e1             |      
281b8 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
281bc 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
281c0 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
281c4 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
281c8 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
281cc 8e6             |                 
281cc 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
281d0 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
281d4 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
281d8 8e9             |   		
281d8 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
281dc 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
281e0 8eb             | 
281e0 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
281e4 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
281e8 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
281ec 8ee             |  
281ec 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
281f0 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
281f4 8f0 10 00 90 CD |      if_c 	jmp     #p899		
281f8 8f1             | 	
281f8 8f1             | 	
281f8 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
281fc 8f2 28 CD 01 F1 | 		add	t4,sprite_w
28200 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
28204 8f4             | 
28204 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
28208 8f5             | 
28208 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2820c 8f6 01 58 86 F1 | 	 	sub     t6,#1
28210 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
28214 8f8             | 
28214 8f8 28 58 62 FD |                 setq   	t6
28218 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2821c 8fa 28 5D 02 F6 |                 mov t8,sprite_w
28220 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
28224 8fc 24 00 90 AD |         if_z    jmp #p898
28228 8fd             |          
28228 8fd             |         
28228 8fd 70 5F 06 F6 |                 mov  t9,#368
2822c 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
28230 8ff             | 
28230 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
28234 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
28238 901 FF FF 7F FF 
2823c 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
28240 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
28244 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
28248 905 2D 01 00 F5 |                 and 0-0, t7
2824c 906             |                
2824c 906             | 
2824c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
28250 907 E5 E0 7A FA |                 wmlong 368,t3				
28254 908             |                 
28254 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
28258 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2825c 90a 2D 00 64 FD |                 ret
28260 90b             | 	
28260 90b             | 	
28260 90b             |                
28260 90b             |  
28260 90b             | '' -------------- Graphics line ------------------------------------------------------------
28260 90b             |  
28260 90b             | 
28260 90b             | '' consts and vars
28260 90b             | 
28260 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
28264 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
28268 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2826c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
28270 90f             | 
28270 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
28274 910             | 
28274 910             | '------ these longs will be set by setmode function
28274 910             | 
28274 910 00 00 00 00 | m_bs            long    0        'blanks before sync
28278 911 00 00 00 00 | m_sn            long    0        'sync
2827c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
28280 913 00 00 00 00 | m_vi            long    0        'visible pixels #
28284 914             | 'm_border        long    0        'left/right borders
28284 914 00 00 00 00 | i_upporch       long    0        'up porch lines
28288 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2828c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
28290 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
28294 918 00 00 00 00 | i_totalvis      long    0
28298 919             | 
28298 919             | '-------------------------------------
28298 919             |  
28298 919 00 00 00 00 | linenum         long    0
2829c 91a 00 00 00 00 | frames          long    0
282a0 91b 00 00 00 00 | dlinum long 0
282a4 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
282a8 91d             | 
282a8 91d 00 00 00 00 | vblankptr       long    0
282ac 91e 00 00 00 00 | modeptr         long    0
282b0 91f 00 00 00 00 | paletteptr      long    0
282b4 920 00 00 00 00 | dlptr           long    0
282b8 921 01 00 00 00 | hbase           long    1
282bc 922 00 00 00 00 | mailbox         long    0
282c0 923 00 00 00 00 | spriteptr          long 0
282c4 924             | 
282c4 924 00 00 00 00 | cmd             long    0
282c8 925 00 B0 07 00 | buf1            long    $80000-16384-4096
282cc 926 00 04 00 00 | buf2            long    1024
282d0 927 01 00 00 00 | dlptr2          long    1
282d4 928 01 00 00 00 | dl              long    1
282d8 929             | 
282d8 929 00 00 00 00 | buf1c long 0
282dc 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
282e0 92b 01 00 00 00 | framebuf2       long    1
282e4 92c 01 00 00 00 | hsync0          long    1
282e8 92d 01 00 00 00 | hsync1          long    1
282ec 92e             | 
282ec 92e 01 00 00 00 | t1              long    1
282f0 92f 00 00 00 00 | t2 long 0
282f4 930 00 00 00 00 | t3 long 0
282f8 931 00 00 00 00 | t4 long 0
282fc 932             | 
282fc 932 00 00 00 00 | rcnt            long    0  'dl repeat count
28300 933 00 00 00 00 | rcnt2           long    0
28304 934 00 00 00 00 | rcnt2a          long    0
28308 935 00 00 00 00 | roffset         long    0
2830c 936 00 00 00 00 | rdl             long    0  'dl repeat line
28310 937 00 00 00 00 | dlc             long    0  'dl command
28314 938             | 
28314 938 FF FF FF FF | affffffff       long    $ffffffff
28318 939 00 00 00 00 | sprite1pointer long 0
2831c 93a 00 00 00 00 | sprite1xy      long 0
28320 93b 00 00 00 00 | sprite1wh      long 0
28324 93c 00 00 00 00 | sprite2pointer long 0
28328 93d 00 00 00 00 | sprite2xy      long 0
2832c 93e 00 00 00 00 | sprite2wh      long 0
28330 93f 00 00 00 00 | sprite3pointer long 0
28334 940 00 00 00 00 | sprite3xy      long 0
28338 941 00 00 00 00 | sprite3wh      long 0
2833c 942 00 00 00 00 | sprite4pointer long 0
28340 943 00 00 00 00 | sprite4xy      long 0
28344 944 00 00 00 00 | sprite4wh      long 0
28348 945 00 00 00 00 | sprite5pointer long 0
2834c 946 00 00 00 00 | sprite5xy      long 0
28350 947 00 00 00 00 | sprite5wh      long 0
28354 948 00 00 00 00 | sprite6pointer long 0
28358 949 00 00 00 00 | sprite6xy      long 0
2835c 94a 00 00 00 00 | sprite6wh      long 0
28360 94b 00 00 00 00 | sprite7pointer long 0
28364 94c 00 00 00 00 | sprite7xy      long 0
28368 94d 00 00 00 00 | sprite7wh      long 0
2836c 94e 00 00 00 00 | sprite8pointer long 0
28370 94f 00 00 00 00 | sprite8xy      long 0
28374 950 00 00 00 00 | sprite8wh      long 0
28378 951 00 00 00 00 | sprite9pointer long 0
2837c 952 00 00 00 00 | sprite9xy      long 0
28380 953 00 00 00 00 | sprite9wh      long 0
28384 954 00 00 00 00 | sprite10pointer long 0
28388 955 00 00 00 00 | sprite10xy      long 0
2838c 956 00 00 00 00 | sprite10wh      long 0
28390 957 00 00 00 00 | sprite11pointer long 0
28394 958 00 00 00 00 | sprite11xy      long 0
28398 959 00 00 00 00 | sprite11wh      long 0
2839c 95a 00 00 00 00 | sprite12pointer long 0
283a0 95b 00 00 00 00 | sprite12xy      long 0
283a4 95c 00 00 00 00 | sprite12wh      long 0
283a8 95d 00 00 00 00 | sprite13pointer long 0
283ac 95e 00 00 00 00 | sprite13xy      long 0
283b0 95f 00 00 00 00 | sprite13wh      long 0
283b4 960 00 00 00 00 | sprite14pointer long 0
283b8 961 00 00 00 00 | sprite14xy      long 0
283bc 962 00 00 00 00 | sprite14wh      long 0
283c0 963 00 00 00 00 | sprite15pointer long 0
283c4 964 00 00 00 00 | sprite15xy      long 0
283c8 965 00 00 00 00 | sprite15wh      long 0
283cc 966 00 00 00 00 | sprite16pointer long 0
283d0 967 00 00 00 00 | sprite16xy      long 0
283d4 968 00 00 00 00 | sprite16wh      long 0
283d8 969 00 00 00 00 | sprite17pointer long 0
283dc 96a 00 00 00 00 | sprite17xy      long 0
283e0 96b 00 00 00 00 | sprite17wh      long 0
283e4 96c 00 00 00 00 | sprite18pointer long 0
283e8 96d 00 00 00 00 | sprite18xy      long 0
283ec 96e 00 00 00 00 | sprite18wh      long 0
283f0 96f 00 00 00 00 | spritenum long 0
283f4 970             | 
283f4 970 00 00 00 00 | spriteline long 0
283f8 971 84 03 00 00 | sprite_x long 900
283fc 972 00 00 00 00 | sprite_y long 0
28400 973 10 00 00 00 | sprite_w long 16
28404 974 40 00 00 00 | sprite_h long 64
28408 975 00 00 00 00 | l2 long 0
2840c 976 00 00 00 00 | t5 long 0
28410 977 00 00 00 00 | t6 long 0
28414 978 00 00 00 00 | t7 long 0
28418 979 00 00 00 00 | t8 long 0
2841c 97a 00 00 00 00 | t9 long 0
28420 97b 00 00 00 00 | preloadaddr long 0
28424 97c 00 00 00 00 | preloadlineaddr long 0
28428 97d 00 04 00 00 | a1024 long 1024
2842c 97e             | 
2842c 97e E0 03 00 00 | aa long 992
28430 97f FF 03 00 00 | a1023 long 1023
28434 980 00 10 00 00 | a4096 long 4096
28438 981             |  fit 368
28438 981             | _psram_spin2_dat_
28438 981 00 00 00 00 
      ...             
28530 9bf 00 00 00 00 
28534 9c0 00 00 00 00 |     listdata long 0[8*8]
28538 9c1             |             orgh
28538                 | 
28538                 | ' driver state
28538     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2853c     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
28540                 | 
28540                 | ' delay profile
28540     07 00 00 00 
28544     00 CF 7B 05 
28548     80 D1 F0 08 
2854c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
28550     80 C4 60 0F 
28554     80 39 7A 12 
28558     40 2D D9 13 
2855c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
28560                 | 
28560                 | ' data to be passed to driver when starting it
28560                 | startupData
28560     00 00 00 00 |     long    0           ' current frequency
28564     00 00 00 00 |     long    FLAGS       ' optional flags for driver
28568     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2856c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
28570     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
28574     80 85 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
28578     00 86 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2857c     20 86 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
28580                 | 
28580                 | ' data for memory
28580                 | deviceData
28580                 |     ' 16 bank parameters follow (16MB per bank)
28580     00 00 00 00 
      ...             
285b8     00 00 00 00 
285bc     00 00 00 00 |     long    0[16]                               ' banks 0-15
285c0                 |     ' 16 banks of pin parameters follow
285c0     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
285c4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
285c8     FF FF FF FF 
      ...             
285f8     FF FF FF FF 
285fc     FF FF FF FF |     long    -1[14]                              ' banks 2-15
28600                 | 
28600                 | ' data for COG polling
28600                 | qosData 
28600     00 00 FF FF 
28604     00 00 FF FF 
28608     00 00 FF FF 
2860c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
28610     00 00 FF FF 
28614     00 00 FF FF 
28618     00 00 FF FF 
2861c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
28620                 |     
28620                 | ' mailbox storage
28620                 | 
28620                 | mailboxes
28620     00 00 00 00 
      ...             
28678     00 00 00 00 
2867c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
28680                 | 	alignl
28680                 | _psram16drv_spin2_dat_
28680                 |                             orgh
28680     00 00 00 00 
      ...             
28698     00 00 00 00 
2869c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
286a0                 | 
286a0                 | driver_start
286a0                 |                             org
286a0 000             | '..................................................................................................
286a0 000             | ' Memory layout for COG RAM once operational:
286a0 000             | '
286a0 000             | '  COG RAM address      Usage
286a0 000             | '  ---------------      ----
286a0 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
286a0 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
286a0 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
286a0 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
286a0 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
286a0 000             | '  ~$198-$1F3           State and register variables
286a0 000             | '
286a0 000             | ' Also during driver COG startup:
286a0 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
286a0 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
286a0 000             | '..................................................................................................
286a0 000             |                             
286a0 000             | ' Mailbox storage after vector initialization
286a0 000             | 
286a0 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
286a4 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
286a8 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
286ac 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
286b0 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
286b4 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
286b8 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
286bc 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
286c0 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
286c4 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
286c8 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
286cc 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
286d0 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
286d4 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
286d8 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
286dc 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
286e0 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
286e4 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
286e8 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
286ec 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
286f0 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
286f4 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
286f8 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
286fc 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
28700 018             | 
28700 018             | ' Mailbox parameter addresses per COG once patched
28700 018             |                             
28700 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
28704 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
28708 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2870c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
28710 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
28714 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
28718 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2871c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
28720 020             | 
28720 020             | '..................................................................................................
28720 020             | ' Per COG request and state setup and service branching
28720 020             |         
28720 020             | cog0                 
28720 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
28724 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
28728 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2872c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
28730 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28734 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28738 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2873c 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
28740 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
28744 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28748 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2874c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
28750 02c             | cog1                        
28750 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
28754 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
28758 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2875c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
28760 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28764 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28768 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2876c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
28770 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
28774 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28778 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2877c 037 33 CA 63 FD |                             execf   request-0               'jump to service
28780 038             | cog2                         
28780 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
28784 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
28788 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2878c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
28790 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28794 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28798 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2879c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
287a0 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
287a4 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
287a8 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
287ac 043 33 CA 63 FD |                             execf   request-0               'jump to service
287b0 044             | cog3                        
287b0 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
287b4 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
287b8 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
287bc 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
287c0 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
287c4 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
287c8 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
287cc 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
287d0 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
287d4 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
287d8 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
287dc 04f 33 CA 63 FD |                             execf   request-0               'jump to service
287e0 050             | cog4                        
287e0 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
287e4 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
287e8 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
287ec 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
287f0 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
287f4 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
287f8 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
287fc 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
28800 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
28804 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28808 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2880c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
28810 05c             | cog5                        
28810 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
28814 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
28818 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2881c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
28820 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28824 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28828 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2882c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
28830 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
28834 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28838 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2883c 067 33 CA 63 FD |                             execf   request-0               'jump to service
28840 068             | cog6                        
28840 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
28844 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
28848 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2884c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
28850 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28854 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28858 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2885c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
28860 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
28864 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28868 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2886c 073 33 CA 63 FD |                             execf   request-0               'jump to service
28870 074             | cog7                        
28870 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
28874 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
28878 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2887c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
28880 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
28884 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
28888 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2888c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
28890 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
28894 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
28898 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2889c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
288a0 080             |                             fit     128
288a0 080             | 
288a0 080             |                             fit     128
288a0 080             | pad                         long    0[128-$]                'align init code to $80
288a0 080             | 
288a0 080             | '..................................................................................................
288a0 080             | 
288a0 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
288a0 080             | 
288a0 080             | init                        
288a0 080             |                             ' get driver scratch long address in hub
288a0 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
288a4 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
288a8 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
288ac 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
288b0 084             |                     
288b0 084             |                             ' read in the additional LUT RAM code
288b0 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
288b4 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
288b8 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
288bc 087             | 
288bc 087             |                             ' read the startup parameters
288bc 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
288c0 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
288c4 089             | 
288c4 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
288c4 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
288c8 08a             | 
288c8 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
288cc 08b 01 00 00 5F 
288d0 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
288d4 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
288d8 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
288dc 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
288e0 090             | 
288e0 090             |                             ' setup data pin modes and data bus pin group in streamer commands
288e0 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
288e4 091 01 00 00 FF 
288e8 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
288ec 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
288f0 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
288f4 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
288f8 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
288fc 097 08 DE 47 F5 |                             or      a, #8
28900 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
28904 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
28908 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2890c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
28910 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
28914 09d 01 DE 07 F1 |                             add     a, #1
28918 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2891c 09f             |  
2891c 09f             |                             ' setup device control pin states
2891c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
28920 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
28924 0a1 01 00 00 FF 
28928 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2892c 0a3             | 
2892c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
28930 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
28934 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
28938 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2893c 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
28940 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
28944 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
28948 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2894c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
28950 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
28954 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
28958 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2895c 0af             | pinloop
2895c 0af             |                             ' generate minimum CE high time before access
2895c 0af A1 07 00 FF 
28960 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
28964 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
28968 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2896c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
28970 0b4 1F DE 63 FD |                             waitx   a                       'delay
28974 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
28978 0b6             | 
28978 0b6             |                             ' setup the COG mailboxes and addresses 
28978 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2897c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
28980 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
28984 0b9             | 
28984 0b9 28 2E 64 FD |                             setq    #24-1
28988 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2898c 0bb             | 
2898c 0bb             |                             ' setup the polling loop for active COGs 
2898c 0bb 01 C2 63 FD |                             cogid   id
28990 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
28994 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
28998 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2899c 0bf 0A F0 07 F6 |                             mov     ptra, #10
289a0 0c0 E1 F1 03 FA |                             mul     ptra, id
289a4 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
289a8 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
289ac 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
289b0 0c4 03 C2 07 FA |                             mul     id, #3
289b4 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
289b8 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
289bc 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
289c0 0c8 D8 01 B0 FD |                             call    #reloadcogs
289c4 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
289c8 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
289cc 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
289cc 0cb D8 E5 B7 F9 |                             setd    d, #addr1
289d0 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
289d4 0cd 08 04 DC FC |                             rep     #2, #8
289d8 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
289dc 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
289e0 0d0             | 
289e0 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
289e0 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
289e0 0d0 01 C2 63 FD |                             cogid   id
289e4 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
289e8 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
289ec 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
289f0 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
289f4 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
289f8 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
289fc 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
28a00 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
28a04 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
28a08 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
28a0c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
28a10 0dc 00 00 00 F6 |                             mov     0-0, 0-0
28a14 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
28a18 0de A5 E5 03 F1 |                             add     d, const512
28a1c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
28a20 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
28a24 0e1 00 00 00 F6 |                             mov     0-0, 0-0
28a28 0e2             |                             
28a28 0e2             |                             ' setup register values for control vector loop setup after we return
28a28 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
28a2c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
28a30 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
28a34 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
28a38 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
28a3c 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
28a40 0e8 D0 C3 8F F9 |                             altd    id, #id0
28a44 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
28a48 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
28a4c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
28a50 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
28a54 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
28a58 0ee             |  
28a58 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
28a5c 0ef 07 CA 07 F5 |                             and     request, #7
28a60 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
28a64 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
28a68 0f2             |                             fit     $100                    'ensure all init code fits this space
28a68 0f2             | 
28a68 0f2             |                             fit     $100                    'ensure all init code fits this space
28a68 0f2             | 
28a68 0f2 00 00 00 00 
      ...             
28a98 0fe 00 00 00 00 
28a9c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
28aa0 100             | 
28aa0 100             | '..................................................................................................
28aa0 100             | ' Error result handling and COG notification of request completion
28aa0 100             | 
28aa0 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
28aa4 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
28aa8 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
28aac 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
28ab0 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
28ab4 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
28ab8 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
28abc 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
28ac0 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
28ac4 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
28ac8 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
28acc 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
28ad0 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
28ad4 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
28ad8 10e             | ' Poller re-starts here after a COG is serviced
28ad8 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
28adc 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
28ae0 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
28ae4 111             | ' Main dynamic polling loop repeats until a request arrives
28ae4 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
28ae8 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
28aec 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
28af0 114             | 
28af0 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
28af4 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
28af8 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
28afc 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
28b00 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
28b04 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
28b08 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
28b0c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
28b10 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
28b14 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
28b18 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
28b1c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
28b20 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
28b24 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
28b28 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
28b2c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
28b30 124             | 
28b30 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
28b34 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
28b38 126             |  
28b38 126             | '..................................................................................................
28b38 126             | ' List handler                               
28b38 126             | 
28b38 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
28b3c 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
28b40 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
28b44 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
28b48 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
28b4c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
28b50 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
28b54 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
28b58 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
28b5c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
28b60 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
28b64 131 33 00 60 FD |                             execf   0-0                     'process the request 
28b68 132             | 
28b68 132             | '..................................................................................................
28b68 132             | ' Restoring per COG state and resuming where we left off
28b68 132             | 
28b68 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
28b6c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
28b70 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
28b74 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
28b78 136 D8 CB FB F8 |                             getbyte request, addr1, #3
28b7c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
28b80 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
28b84 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
28b88 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
28b8c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
28b90 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
28b94 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
28b98 13e             |                    
28b98 13e             | '..................................................................................................
28b98 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
28b98 13e             | 
28b98 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
28b9c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
28ba0 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
28ba4 141 D0 DF B7 F9 |                             setd    a, #id0
28ba8 142 D8 DF BF F9 |                             sets    a, #addr1
28bac 143 FE FF FF FF 
28bb0 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
28bb4 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
28bb8 146 3F DE A7 F9 |                             alti    a, #%111_111 
28bbc 147 00 00 F0 F9 |                             muxq    0-0, 0-0
28bc0 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
28bc4 149 01 E2 63 FD |                             cogid   c
28bc8 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
28bcc 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
28bd0 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
28bd4 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
28bd8 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
28bdc 14f 00 E0 03 F6 |                             mov     b, 0-0
28be0 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
28be4 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
28be8 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
28bec 153 0C 00 90 AD |             if_z            jmp     #excluded               
28bf0 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
28bf4 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
28bf8 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
28bfc 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
28c00 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
28c04 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
28c08 15a             | 
28c08 15a             | 'determine priority cogs and build instructions for the polling sequence
28c08 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
28c0c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
28c10 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
28c14 15d             | 
28c14 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
28c18 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
28c1c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
28c20 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
28c24 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
28c28 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
28c2c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
28c30 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
28c34 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
28c38 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
28c3c 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
28c40 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
28c44 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
28c48 16a             | endprioloop
28c48 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
28c4c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
28c50 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
28c54 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
28c58 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
28c5c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
28c60 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
28c64 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
28c68 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
28c6c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
28c70 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
28c74 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
28c78 176             | 
28c78 176             | ' populate the round robin COG polling instructions
28c78 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
28c7c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
28c80 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
28c84 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
28c88 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
28c8c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
28c90 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
28c94 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
28c98 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
28c9c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
28ca0 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
28ca4 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
28ca8 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
28cac 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
28cb0 184             | '..................................................................................................
28cb0 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
28cb0 184             | 
28cb0 184             | set_latency                                                 '            (a) set latency
28cb0 184             | get_latency                                                 '            (b) get latency
28cb0 184             | set_burst                                                   '            (c) set burst size of bank
28cb0 184             | get_burst                                                   '            (d) get burst size of bank
28cb0 184             |                                                             '            (e) dump state
28cb0 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
28cb4 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
28cb8 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
28cbc 187             |                                                             ' | | | | e  account for following AUGS
28cbc 187 04 00 00 FF 
28cc0 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
28cc4 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
28cc8 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
28ccc 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
28cd0 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
28cd4 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
28cd8 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
28cdc 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
28ce0 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
28ce4 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
28ce8 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
28cec 193             | 
28cec 193             | '..................................................................................................
28cec 193             | ' Misc EXECF code
28cec 193             | 
28cec 193 33 72 63 FD | start_read_exec             execf   newburstr
28cf0 194 33 7C 63 FD | start_write_exec            execf   resumewrites
28cf4 195 33 78 63 FD | continue_read_exec          execf   lockedreads
28cf8 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
28cfc 197             | 
28cfc 197             | '..................................................................................................
28cfc 197             | ' Variables
28cfc 197             | 
28cfc 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
28d00 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
28d04 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
28d08 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
28d0c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
28d10 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
28d14 19d             | 
28d14 19d 00 00 00 80 | xfreq1          long    $80000000
28d18 19e 00 00 00 40 | xfreq2          long    $40000000
28d1c 19f 03 00 00 00 | delay           long    3
28d20 1a0             | 
28d20 1a0             | lutcodeaddr                 
28d20 1a0             | startupparams
28d20 1a0             | excludedcogs                                    'careful: shared register use!
28d20 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
28d24 1a1 00 00 00 00 | flags           long    0
28d28 1a2             | mask                                            'careful: shared register use!
28d28 1a2 00 00 00 00 | resetmaskA      long    0
28d2c 1a3             | limit                                           'careful: shared register use!
28d2c 1a3 00 00 00 00 | resetmaskB      long    0
28d30 1a4 00 00 00 00 | datapins        long    0
28d34 1a5             | const512                                        'careful: shared register use!
28d34 1a5 00 00 00 00 | devicelist      long    0
28d38 1a6 00 00 00 00 | coglist         long    0
28d3c 1a7 00 00 00 00 | mbox            long    0 
28d40 1a8             | 
28d40 1a8             | clkpin                                          'shared with code patched during init
28d40 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
28d44 1a9             | cspin                                           'shared with code patched during init
28d44 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
28d48 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
28d4c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
28d50 1ac 01 00 00 00 | clkdelay        long    1
28d54 1ad 00 00 00 00 | regdatabus      long    0
28d58 1ae             | 
28d58 1ae 10 00 00 00 | deviceaddr      long    $10
28d5c 1af             | rrcounter
28d5c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
28d60 1b0             | 
28d60 1b0             | ' jump addresses for the per COG handlers
28d60 1b0 20 00 00 00 | cog0_handler    long    cog0
28d64 1b1 2C 00 00 00 | cog1_handler    long    cog1
28d68 1b2 38 00 00 00 | cog2_handler    long    cog2
28d6c 1b3 44 00 00 00 | cog3_handler    long    cog3
28d70 1b4 50 00 00 00 | cog4_handler    long    cog4
28d74 1b5 5C 00 00 00 | cog5_handler    long    cog5
28d78 1b6 68 00 00 00 | cog6_handler    long    cog6
28d7c 1b7 74 00 00 00 | cog7_handler    long    cog7
28d80 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
28d84 1b9             | 
28d84 1b9             | ' EXECF sequences
28d84 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
28d88 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
28d8c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
28d90 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
28d94 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
28d98 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
28d9c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
28da0 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
28da0 1c0             | 
28da0 1c0             | 
28da0 1c0             | ' SKIPF sequences
28da0 1c0             | skiptable
28da0 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
28da4 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
28da8 1c2 00 00 00 00 |                 long    0                      ' read modify write long
28dac 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
28db0 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
28db4 1c5 00 00 00 00 | pattern2        long    0
28db8 1c6 00 00 00 00 | pattern3        long    0
28dbc 1c7 77 02 00 00 | singlelong      long    %1001110111  
28dc0 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
28dc4 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
28dc8 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
28dcc 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
28dd0 1cc             | 
28dd0 1cc             | ' LUT RAM address values
28dd0 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
28dd4 1cd DD 02 00 00 | continue_read   long    continue_read_lut
28dd8 1ce DB 02 00 00 | continue_write  long    continue_write_lut
28ddc 1cf F6 02 00 00 | noread          long    noread_lut
28de0 1d0             | 
28de0 1d0 00 00 00 00 | id0             long    0
28de4 1d1 01 00 00 00 | id1             long    1
28de8 1d2 02 00 00 00 | id2             long    2
28dec 1d3 03 00 00 00 | id3             long    3
28df0 1d4 04 00 00 00 | id4             long    4
28df4 1d5 05 00 00 00 | id5             long    5
28df8 1d6 06 00 00 00 | id6             long    6
28dfc 1d7 07 00 00 00 | id7             long    7
28e00 1d8             | 
28e00 1d8             | 'These next 10 request registers below are also temporarily reused during init 
28e00 1d8             | 'and COG updates and need to follow immediately after id0-id7
28e00 1d8 00 00 00 00 | addr1           long    0
28e04 1d9 00 00 00 00 | hubdata         long    0
28e08 1da 00 00 00 00 | count           long    0
28e0c 1db 00 00 00 00 | addr2           long    0
28e10 1dc 00 00 00 00 | total           long    0
28e14 1dd 00 00 00 00 | offset1         long    0
28e18 1de 00 00 00 00 | offset2         long    0
28e1c 1df 00 00 00 00 | link            long    0
28e20 1e0             | 
28e20 1e0             | burstwrite                                      'note shared register use during init
28e20 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
28e24 1e1 00 00 00 00 | id              long    0
28e28 1e2             | 
28e28 1e2 00 00 00 00 | header          long    0
28e2c 1e3 00 00 00 00 | trailer         long    0
28e30 1e4 00 00 00 00 | cmdaddr         long    0
28e34 1e5 00 00 00 00 | request         long    0
28e38 1e6 00 00 00 00 | rrlimit         long    0
28e3c 1e7 00 00 00 00 | pinconfig       long    0
28e40 1e8 00 00 00 00 | clks            long    0
28e44 1e9 00 00 00 00 | resume          long    0
28e48 1ea 00 00 00 00 | orighubsize     long    0
28e4c 1eb 00 00 00 00 | wrclks          long    0
28e50 1ec             | 
28e50 1ec 00 00 00 00 | pattern         long    0
28e54 1ed 00 00 00 00 | hubscratch      long    0
28e58 1ee 00 10 00 00 | val4k           long    4096
28e5c 1ef             | 
28e5c 1ef             | ' temporary general purpose regs
28e5c 1ef 00 00 00 00 | a               long    0
28e60 1f0 00 00 00 00 | b               long    0
28e64 1f1 00 00 00 00 | c               long    0
28e68 1f2 00 00 00 00 | d               long    0
28e6c 1f3             |                 fit     502
28e6c 1f3             | 
28e6c 1f3             |                 fit     502
28e6c 1f3             | 
28e6c 1f3             | '..................................................................................................
28e6c 1f3             | 
28e6c 1f3             |             orgh
28e6c                 | 
28e6c                 | lut_code
28e6c                 | 'HW init code up to 80 longs
28e6c                 | 
28e6c                 | '..................................................................................................
28e6c                 | ' Memory layout for LUT RAM once operational:
28e6c                 | '
28e6c                 | '  LUT RAM address      Usage
28e6c                 | '  ---------------      ----
28e6c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
28e6c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
28e6c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
28e6c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
28e6c                 | '
28e6c                 | ' Also during driver COG startup:
28e6c                 | ' $230-$24F is used for HW init setup
28e6c                 | ' $250-$26F is used as temporary vector storage 
28e6c                 | '..................................................................................................
28e6c                 | 
28e6c                 |                 org $230    
28e6c 230             | 
28e6c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
28e6c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
28e70 231 24 16 60 FD |                             pollxfi
28e74 232 FF AA 2A FF 
28e78 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
28e7c 234 28 00 B0 FD |                             call    #sendqspi
28e80 235 07 F8 07 FF 
28e84 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
28e88 237 28 00 B0 FD |                             call    #sendspi
28e8c 238 F8 07 78 FF 
28e90 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
28e94 23a 1C 00 B0 FD |                             call    #sendspi
28e98 23b 7F 78 78 FF 
28e9c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
28ea0 23d 10 00 B0 FD |                             call    #sendspi 
28ea4 23e 2D 00 64 FD |                             ret
28ea8 23f             | 
28ea8 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
28eac 240 32 0C 64 FD |                             skipf   #%110
28eb0 241 9C EF 03 F6 |                             mov     pb, xsendimm
28eb4 242             | 
28eb4 242 10 D0 07 F6 | sendspi                     mov     clks, #16
28eb8 243 97 EF 03 F6 |                             mov     pb, ximm8lut
28ebc 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
28ec0 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
28ec4 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
28ec8 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
28ecc 248 24 36 60 FD |                             waitxfi                         'wait for the completion
28ed0 249 50 48 63 FD |                             fltl    datapins                'float data bus
28ed4 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
28ed8 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
28edc 24c             | 
28edc 24c 00 00 00 00 
28ee0 24d 00 00 00 00 
28ee4 24e 00 00 00 00 
28ee8 24f 00 00 00 00 |                 long    0[$270-32-$]
28eec 250             |                 fit     $270-32  ' keep room for 32 vector longs
28eec 250             |     
28eec 250             |                 fit     $270-32  ' keep room for 32 vector longs
28eec 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
28eec 250             | rw_vect ' PSRAM jump vectors
28eec 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28ef0 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28ef4 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
28ef8 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
28efc 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
28f00 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
28f04 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
28f08 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
28f0c 258             | ro_vect ' R/O PSRAM jump vectors
28f0c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28f10 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
28f14 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
28f18 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
28f1c 25c 00 01 00 00 |                 long    unsupported
28f20 25d 00 01 00 00 |                 long    unsupported
28f24 25e 00 01 00 00 |                 long    unsupported
28f28 25f 00 01 00 00 |                 long    unsupported
28f2c 260             | ctrl_vect ' Control jump vectors
28f2c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
28f30 261 00 01 00 00 |                 long    unsupported
28f34 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
28f38 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
28f3c 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
28f40 265 00 01 00 00 |                 long    unsupported
28f44 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
28f48 267 3E 01 00 00 |                 long    reconfig 
28f4c 268             | no_vect ' Invalid bank jump vectors
28f4c 268 01 01 00 00 |                 long    invalidbank
28f50 269 01 01 00 00 |                 long    invalidbank
28f54 26a 01 01 00 00 |                 long    invalidbank
28f58 26b 01 01 00 00 |                 long    invalidbank
28f5c 26c 01 01 00 00 |                 long    invalidbank
28f60 26d 01 01 00 00 |                 long    invalidbank
28f64 26e 01 01 00 00 |                 long    invalidbank
28f68 26f 01 01 00 00 |                 long    invalidbank
28f6c 270             |                 fit     $270
28f6c 270             | 
28f6c 270             |                 fit     $270
28f6c 270             | '..................................................................................................
28f6c 270             | ' PSRAM READS
28f6c 270             |                                                             ' a b c d e f
28f6c 270             |                                                             ' B W L B R L  (a) byte read
28f6c 270             |                                                             ' Y O O U E O  (b) word read
28f6c 270             |                                                             ' T R N R S C  (c) long read
28f6c 270             |                                                             ' E D G S U K  (d) new burst read
28f6c 270             |                                                             '       T M E  (e) resumed sub-burst
28f6c 270             |                                                             '         E D  (f) locked sub-burst
28f6c 270             | 
28f6c 270             | 
28f6c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
28f70 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
28f74 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
28f78 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
28f7c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
28f80 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
28f84 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
28f88 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
28f8c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
28f90 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
28f94 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
28f98 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
28f9c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
28fa0 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
28fa4 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
28fa8 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
28fac 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
28fb0 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
28fb4 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
28fb8 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
28fbc 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
28fc0 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
28fc4 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
28fc8 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
28fcc 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
28fd0 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
28fd4 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
28fd8 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
28fdc 28c             | 
28fdc 28c             |                             ' fall through to read bursts
28fdc 28c             |                         
28fdc 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
28fdc 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
28fe0 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
28fe4 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
28fe8 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
28fec 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
28ff0 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
28ff4 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
28ff8 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
28ffc 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
29000 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
29004 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
29008 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2900c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
29010 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
29014 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
29018 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2901c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
29020 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
29024 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
29028 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2902c 2a0 E8 D1 03 F1 |                             add     clks, clks
29030 2a1             | readcommon
29030 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
29034 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
29038 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2903c 2a4             | 
2903c 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29040 2a5 69 C8 63 FD |                             rev     cmdaddr
29044 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29048 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2904c 2a8             | 
2904c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
29050 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
29054 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
29054 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
29058 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2905c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
29060 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
29064 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
29064 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
29068 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2906c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
29070 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
29074 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
29078 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2907c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2907c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
29080 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
29084 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
29088 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2908c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
29090 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
29094 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
29098 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2909c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
290a0 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
290a4 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
290a8 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
290ac 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
290b0 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
290b4 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
290b4 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
290b8 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
290bc 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
290c0 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
290c4 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
290c8 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
290cc 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
290d0 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
290d4 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
290d8 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
290dc 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
290e0 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
290e4 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
290e8 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
290ec 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
290f0 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
290f4 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
290f8 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
290fc 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
29100 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
29104 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
29108 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2910c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
29110 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
29114 2da 10 03 90 FD |                             jmp     #writecommon
29118 2db             | 
29118 2db             | '..................................................................................................
29118 2db             | ' Burst continuation testing
29118 2db             | 
29118 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2911c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
29120 2dd             | continue_read_lut          
29120 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
29124 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
29128 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2912c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
29130 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
29134 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
29138 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2913c 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
29140 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
29144 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
29148 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2914c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
29150 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
29154 2ea             | 
29154 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
29158 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2915c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
29160 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
29164 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
29168 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2916c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
29170 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
29174 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
29178 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2917c 2f4 2A 1C 66 0D |             _ret_           push    #poller
29180 2f5             | 
29180 2f5             | 
29180 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
29184 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
29184 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
29188 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2918c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
29190 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
29194 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
29198 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2919c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
291a0 2fd 2D 00 64 FD |                             ret                             ' | continue processing
291a4 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
291a8 2ff             | '..................................................................................................
291a8 2ff             | ' Completion of requests
291a8 2ff             | 
291a8 2ff             | complete_rw_lut             
291a8 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
291ac 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
291b0 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
291b4 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
291b8 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
291bc 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
291c0 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
291c4 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
291c8 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
291cc 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
291d0 309 32 62 64 AD |             if_z            skipf   #%110001
291d4 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
291d8 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
291dc 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
291e0 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
291e4 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
291e8 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
291ec 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
291f0 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
291f4 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
291f8 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
291fc 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
29200 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
29204 316             |                                                             ' skipcase (a) gfx copy to/from hub
29204 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
29204 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
29204 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
29208 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2920c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
29210 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
29214 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
29218 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2921c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
29220 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
29224 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
29228 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2922c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
29230 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
29234 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
29238 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2923c 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
29240 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
29244 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
29248 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2924c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
29250 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
29254 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
29258 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2925c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
29260 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
29264 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
29268 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2926c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
29270 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
29274 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
29278 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2927c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
29280 335 DF B7 03 A6 |             if_z            mov     addr2, link
29284 336 34 FF 9F AD |             if_z            jmp     #checknext
29288 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2928c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
29290 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
29294 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
29298 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2929c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
292a0 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
292a4 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
292a8 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
292ac 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
292b0 341             | 
292b0 341             | '..................................................................................................
292b0 341             | ' PSRAM WRITES
292b0 341             |                                                             '  a b c d e f g h
292b0 341             | 
292b0 341             |                                                             '  B W L F B R L L (a) byte write(s)
292b0 341             |                                                             '  Y O O I U E O O (b) word write(s)
292b0 341             |                                                             '  T R N L R S C C (c) long write(s)
292b0 341             |                                                             '  E D G L S U K K (d) resumed fill
292b0 341             |                                                             '          T M E E (e) new burst write
292b0 341             |                                                             '            E D D (f) resumed burst
292b0 341             |                                                             '              F B (g) locked fill
292b0 341             |                                                             '              I U (h) locked burst write
292b0 341             |                                                             '              L R 
292b0 341             |                                                             '              L S 
292b0 341             |                                                             '                T 
292b0 341             | 
292b0 341             | w_single                   
292b0 341             | w_fill_cont           
292b0 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
292b4 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
292b8 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
292bc 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
292c0 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
292c4 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
292c8 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
292cc 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
292d0 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
292d4 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
292d8 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
292dc 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
292e0 34d             |                ' disable call to r_resume_burst for single longs when z=0
292e0 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
292e4 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
292e8 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
292ec 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
292f0 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
292f4 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
292f8 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
292fc 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
29300 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
29304 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
29308 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2930c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
29310 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
29314 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
29318 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2931c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
29320 35d             |         
29320 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
29320 35d             |             '
29320 35d             |             '  At least one of these 3 optional components will be sent
29320 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
29320 35d             |             '     body - N x full longs of data
29320 35d             |             '     trailer - last partial long of data
29320 35d             |             '
29320 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
29320 35d             |             '
29320 35d             |             'Case    Type                           Sends
29320 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
29320 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
29320 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
29320 35d             |             ' 4)     Multiple long fill             body only
29320 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
29320 35d             | 
29320 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
29320 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
29324 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
29328 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2932c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
29330 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
29334 362 13 8C 07 F6 |                             mov     pattern3, #%10011
29338 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2933c 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
29340 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
29344 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
29348 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2934c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
29350 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
29354 36a             |                             
29354 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29358 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2935c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
29360 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
29364 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
29368 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2936c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
29370 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
29374 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
29378 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2937c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
29380 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
29384 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
29388 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2938c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
29390 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
29394 37a             | 
29394 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
29398 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2939c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
293a0 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
293a4 37e             |                  
293a4 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
293a8 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
293ac 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
293b0 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
293b4 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
293b8 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
293bc 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
293c0 385             | 
293c0 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
293c4 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
293c8 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
293cc 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
293d0 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
293d4 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
293d8 38b             | 
293d8 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
293d8 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
293dc 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
293e0 38d 2A B0 63 FD |                             push    addr1                   'save address
293e4 38e             | 
293e4 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
293e4 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
293e8 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
293ec 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
293f0 391             |             
293f0 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
293f4 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
293f8 393 2B B0 63 FD |                             pop     addr1                   'restore address
293fc 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
29400 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
29404 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
29408 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2940c 398             | 
2940c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
29410 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
29414 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
29418 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2941c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
29420 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
29424 39e             | 
29424 39e             |                             'trailer is done
29424 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
29428 39f             | 
29428 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2942c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
29430 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
29434 3a2             | 
29434 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
29438 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2943c 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
29440 3a5 61 C8 63 FD |                             mergeb  cmdaddr
29444 3a6             |                             
29444 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
29448 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2944c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
29450 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
29454 3aa             |                                                          
29454 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
29458 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2945c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
29460 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
29464 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
29468 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2946c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
29470 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
29474 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
29478 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2947c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
29480 3b5             |  
29480 3b5 59 52 63 FD |                             drvh    cspin
29484 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
29488 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2948c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
29490 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
29494 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
29498 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2949c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
294a0 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
294a4 3be EA E5 03 F6 |                             mov     d, orighubsize
294a8 3bf EF E5 63 F0 |                             shl     d, a
294ac 3c0 F2 E3 83 F1 |                             sub     c, d
294b0 3c1 DD E3 03 F1 |                             add     c, offset1
294b4 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
294b8 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
294bc 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
294c0 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
294c4 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
294c8 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
294cc 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
294d0 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
294d4 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
294d8 3cb BB D3 03 F6 |                             mov     resume, restorefill
294dc 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
294e0 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
294e4 3ce 6C FC BF CD |             if_c            call    #yield
294e8 3cf 2D 00 64 FD |                             ret
294ec 3d0             |                            
294ec 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
294ec 3d0             |                       '     rczl    pa                      'rotate left into address offset
294ec 3d0             |                       '     rczl    c wcz                   'restore count and flags
294ec 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
294f0 3d1 02 EC 67 F0 |                             shl     pa, #2
294f4 3d2 28 06 64 AD |             if_z            setq    #3
294f8 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
294fc 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
29500 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
29504 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
29508 3d7             | 
29508 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2950c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
29510 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
29514 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
29518 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2951c 3dc             |                 fit 1024-32
2951c 3dc             |         
2951c 3dc             | 
2951c 3dc             | '..................................................................................................
2951c 3dc             | 
2951c 3dc             |                 fit 1024-32
2951c 3dc 00 00 00 00 
29520 3dd 00 00 00 00 
29524 3de 00 00 00 00 
29528 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2952c 3e0             |                 org 1024-32
2952c 000             | 
2952c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2952c 000 00 00 00 00 |                 long $0000
29530 001 11 11 00 00 |                 long $1111
29534 002 22 22 00 00 |                 long $2222
29538 003 33 33 00 00 |                 long $3333
2953c 004 44 44 00 00 |                 long $4444
29540 005 55 55 00 00 |                 long $5555
29544 006 66 66 00 00 |                 long $6666
29548 007 77 77 00 00 |                 long $7777
2954c 008 88 88 00 00 |                 long $8888
29550 009 99 99 00 00 |                 long $9999
29554 00a AA AA 00 00 |                 long $aaaa
29558 00b BB BB 00 00 |                 long $bbbb
2955c 00c CC CC 00 00 |                 long $cccc
29560 00d DD DD 00 00 |                 long $dddd
29564 00e EE EE 00 00 |                 long $eeee
29568 00f FF FF 00 00 |                 long $ffff
2956c 010             | 
2956c 010             | 'masks
2956c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
29570 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
29574 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
29578 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2957c 014             | 
2957c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
29580 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
29584 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
29588 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2958c 018             | 
2958c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
29590 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
29594 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
29598 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2959c 01c             | 
2959c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
295a0 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
295a4 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
295a8 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
295ac 020             |         fit 1024
295ac 020             | 
295ac 020             |         fit 1024
295ac 020             | 
295ac 020             | '--------------------------------------------------------------------------------------------------
295ac 020             |         orgh
295ac                 | 
295ac                 | gfxexpansion
295ac                 |                             'simple line drawing graphics expansion of memory driver
295ac                 |                             'jmp     #donerepeats                'just return for now
295ac                 | 
295ac     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
295b0     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
295b4     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
295b8     DD E1 03 F6 |                             mov     b, offset1              'get error term
295bc     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
295c0     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
295c4     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
295c8     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
295cc     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
295d0     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
295d4     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
295d8     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
295dc     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
295e0     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
295e4     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
295e8     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
295ec     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
295f0     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
295f4     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
295f8     DC E5 33 F9 |                             getword d, total, #0            'get line width
295fc     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
29600     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
29604     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
29608     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2960c     C3 03 80 FD |                             jmp     #readmask               'continue filling
29610                 | 	alignl
29610                 | _usbnew_spin2_dat_
29610                 |                 org     $000
29610 000             | 
29610 000             | usb_host_start
29610 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
29614 001             | 
29614 001 03 00 00 FF 
29618 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2961c 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
29620 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
29624 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
29628 006 29 70 63 FD |                 setq2   htmp
2962c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
29630 008             | 
29630 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
29634 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
29638 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2963c 00b             | 
2963c 00b             | '------------------------------------------------------------------------------
2963c 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2963c 00b             | ' special because the receiving function must not respond with either STALL or
2963c 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2963c 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2963c 00b             | ' corrupt packet, it must ignore the transaction
2963c 00b             | '------------------------------------------------------------------------------
2963c 00b             | ' On entry:
2963c 00b             | '   PTRA - start address of the SETUP data struct.
2963c 00b             | ' On exit:
2963c 00b             | '   retval - PID_ACK on success, otherwise error code.
2963c 00b             | '------------------------------------------------------------------------------
2963c 00b             | txn_setup
2963c 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
29640 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
29644 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
29648 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2964c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
29650 010             | .setup
29650 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
29654 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29658 012 2D 00 64 AD |         if_z    ret
2965c 013 7C 0B B0 FD |                 call    #retry_wait
29660 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29664 015 2D 00 64 AD |         if_z    ret
29668 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2966c 017 E0 FF 9F FD |                 jmp     #.setup
29670 018             | 
29670 018             | '------------------------------------------------------------------------------
29670 018             | ' IN/INTERRUPT transaction.
29670 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
29670 018             | '------------------------------------------------------------------------------
29670 018             | ' On entry:
29670 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
29670 018             | '     CRC(b19..23).
29670 018             | ' On exit:
29670 018             | '------------------------------------------------------------------------------
29670 018             | txn_in
29670 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
29674 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
29678 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2967c 01b             | 
2967c 01b             |                 ' Fall through to urx_packet
2967c 01b             | 
2967c 01b             | '------------------------------------------------------------------------------
2967c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2967c 01b             | ' received are handshakes and IN DATAx.
2967c 01b             | '------------------------------------------------------------------------------
2967c 01b             | ' On entry:
2967c 01b             | ' On exit:
2967c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2967c 01b             | '     returned.
2967c 01b             | '------------------------------------------------------------------------------
2967c 01b             | urx_packet
2967c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
29680 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29684 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
29688 01e 1A 92 63 FD |                 getct   hct2
2968c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
29690 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
29694 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
29698 022             | .wait_sop
29698 022 22 A7 8A FA |                 rdpin   urx, dm
2969c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
296a0 024 08 00 90 CD |         if_c    jmp     #.get_pid
296a4 025 FC 25 CC FB |                 jnct2   #.wait_sop
296a8 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
296ac 027             | .get_pid
296ac 027 28 02 B0 FD |                 call    #urx_next
296b0 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
296b4 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
296b8 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
296bc 02b             | .chk_pid
296bc 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
296c0 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
296c4 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
296c8 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
296cc 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
296d0 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
296d4 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
296d8 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
296dc 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
296e0 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
296e4 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
296e8 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
296ec 037             | .ack_resend
296ec 037 22 A7 82 FA |                 rqpin   urx, dm
296f0 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
296f4 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
296f8 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
296fc 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
29700 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
29704 03d             | .chk_eop
29704 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29708 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2970c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
29710 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
29714 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
29718 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2971c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
29720 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
29724 045 2D 00 64 FD |                 ret
29728 046             | .idle
29728 046 22 A7 82 FA |                 rqpin   urx, dm
2972c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29730 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
29734 049 2D 00 64 FD |                 ret
29738 04a             | 
29738 04a             | '------------------------------------------------------------------------------
29738 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
29738 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
29738 04a             | ' if one is required.
29738 04a             | '------------------------------------------------------------------------------
29738 04a             | ' On entry:
29738 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
29738 04a             | ' On exit:
29738 04a             | '------------------------------------------------------------------------------
29738 04a             | utx_token
29738 04a 22 A7 82 FA |                 rqpin   urx, dm
2973c 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
29740 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
29744 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
29748 04e 34 0D B0 CD |         if_c    call    #utx_pre
2974c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
29750 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
29754 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
29758 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2975c 053             | .next_byte
2975c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
29760 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
29764 055             | .wait
29764 055 40 46 72 FD |                 testp   dp                      wc
29768 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2976c 057 23 03 08 FC |                 akpin   dp
29770 058 22 A5 22 FC |                 wypin   utx, dm
29774 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
29778 05a             | 
29778 05a             | '------------------------------------------------------------------------------
29778 05a             | ' SETUP/OUT/INTERRUPT transaction.
29778 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
29778 05a             | '------------------------------------------------------------------------------
29778 05a             | ' On entry:
29778 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
29778 05a             | '     CRC(b19..23).
29778 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
29778 05a             | '   pkt_data - count of DATAx payload bytes to send.
29778 05a             | ' On exit:
29778 05a             | '------------------------------------------------------------------------------
29778 05a             | txn_out
29778 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2977c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
29780 05c 00 00 C0 FF 
29784 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
29788 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2978c 05f             | 
2978c 05f             |                 ' Fall through to utx_data
2978c 05f             | 
2978c 05f             | '------------------------------------------------------------------------------
2978c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2978c 05f             | ' calculated while the data byte is being shifted out. Since data stage
2978c 05f             | ' success/fail is not determined until the status stage of the transaction,
2978c 05f             | ' this routine is only concerned about the current DATAx packet.
2978c 05f             | '------------------------------------------------------------------------------
2978c 05f             | ' On entry:
2978c 05f             | '   PTRA - hub start address of the data to read.
2978c 05f             | '   pkt_cnt - data payload size.
2978c 05f             | ' On exit:
2978c 05f             | '------------------------------------------------------------------------------
2978c 05f             | utx_data
2978c 05f 22 A7 82 FA |                 rqpin   urx, dm
29790 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
29794 061 F4 FF 9F CD |         if_c    jmp     #utx_data
29798 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2979c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
297a0 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
297a4 065 D8 0C B0 CD |         if_c    call    #utx_pre
297a8 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
297ac 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
297b0 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
297b4 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
297b8 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
297bc 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
297c0 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
297c4 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
297c8 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
297cc 06f             | .read_byte
297cc 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
297d0 070 F0 00 B0 FD |                 call    #utx_byte
297d4 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
297d8 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
297dc 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
297e0 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
297e4 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
297e8 076             | .send_crc
297e8 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
297ec 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
297f0 078 D0 00 B0 FD |                 call    #utx_byte
297f4 079 5D A5 EA F8 |                 getbyte utx, crc, #1
297f8 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
297fc 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
29800 07c             | 
29800 07c             | '------------------------------------------------------------------------------
29800 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
29800 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
29800 07c             | ' expects that the packet includes at least the CRC word.
29800 07c             | '
29800 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
29800 07c             | ' was requested, which makes it difficult to determine where the data stops
29800 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
29800 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
29800 07c             | ' USB-16 expected residual value of 0xB001.
29800 07c             | '
29800 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
29800 07c             | ' so the caller can verify IN success before writing the data to its final
29800 07c             | ' destination.
29800 07c             | '------------------------------------------------------------------------------
29800 07c             | ' On entry:
29800 07c             | '   pkt_data - max byte count expected to be in the packet.
29800 07c             | '   newb_flg - signals new byte ready when toggled.
29800 07c             | ' On exit:
29800 07c             | '   pkt_cnt - actual number of bytes read.
29800 07c             | '------------------------------------------------------------------------------
29800 07c             | urx_data
29800 07c F7 75 03 F6 |                 mov     htmp2, pb
29804 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
29808 07e 00 00 C0 FF 
2980c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
29810 080 BA EF 03 F6 |                 mov     pb, htmp2
29814 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
29818 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2981c 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
29820 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
29824 085             | .wait_byte
29824 085             | ' In-line rx for max speed
29824 085 22 A7 82 FA |                 rqpin   urx, dm
29828 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2982c 087 53 A5 02 F5 |                 and     utx, urx
29830 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
29834 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
29838 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2983c 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
29840 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
29844 08d DC FF 9F FD |                 jmp     #.wait_byte
29848 08e             | .get_byte
29848 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2984c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
29850 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
29854 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
29858 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2985c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
29860 094             | .end_crc
29860 094 01 B8 06 F1 |                 add     pkt_cnt, #1
29864 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
29868 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2986c 097 2D 00 64 1D |         if_a    ret
29870 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
29870 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
29870 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
29870 098             | ' to miss it, so cheat a bit and look for SOP clear here.
29870 098 22 A7 82 FA |                 rqpin   urx, dm
29874 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
29878 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2987c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2987c 09b             | .chk_crc
2987c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
29880 09c 58 00 00 FF 
29884 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
29888 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2988c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
29890 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
29894 0a1 34 09 B0 FD |                 call    #poll_waitx
29898 0a2             | 
29898 0a2             |                 ' Fall through to utx_handshake
29898 0a2             | 
29898 0a2             | '------------------------------------------------------------------------------
29898 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
29898 0a2             | ' the appropriate IP delay has been inserted.
29898 0a2             | '------------------------------------------------------------------------------
29898 0a2             | ' On entry:
29898 0a2             | '   retval - handshake PID to send.
29898 0a2             | ' On exit:
29898 0a2             | '   retval unchanged.
29898 0a2             | '------------------------------------------------------------------------------
29898 0a2             | utx_handshake
29898 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2989c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
298a0 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
298a4 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
298a8 0a6 5F A5 02 F6 |                 mov     utx, retval
298ac 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
298b0 0a8             | .idle
298b0 0a8 22 A7 82 FA |                 rqpin   urx, dm
298b4 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
298b8 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
298bc 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
298c0 0ac 08 09 90 FD |                 jmp     #poll_waitx
298c4 0ad             | 
298c4 0ad             | '------------------------------------------------------------------------------
298c4 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
298c4 0ad             | '------------------------------------------------------------------------------
298c4 0ad             | ' On entry:
298c4 0ad             | '   utx - byte to transmit.
298c4 0ad             | ' On exit:
298c4 0ad             | '------------------------------------------------------------------------------
298c4 0ad             | utx_byte
298c4 0ad 40 46 72 FD |                 testp   dp                      wc
298c8 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
298cc 0af 23 03 08 FC |                 akpin   dp
298d0 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
298d4 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
298d8 0b2             | 
298d8 0b2             | '------------------------------------------------------------------------------
298d8 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
298d8 0b2             | '------------------------------------------------------------------------------
298d8 0b2             | ' On entry:
298d8 0b2             | ' On exit:
298d8 0b2             | '   retval - the byte read.
298d8 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
298d8 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
298d8 0b2             | '     received.
298d8 0b2             | '------------------------------------------------------------------------------
298d8 0b2             | urx_next
298d8 0b2 22 A7 8A FA |                 rdpin   urx, dm
298dc 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
298e0 0b4 53 A5 02 F5 |                 and     utx, urx
298e4 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
298e8 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
298ec 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
298f0 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
298f4 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
298f8 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
298fc 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
29900 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
29904 0bd 2D 00 64 FD |                 ret
29908 0be             | 
29908 0be             | '------------------------------------------------------------------------------
29908 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
29908 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
29908 0be             | ' length, and the PID is not included in the CRC calculation:
29908 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
29908 0be             | '  CRC5  ENDP ADDRESS PID
29908 0be             | ' %00000_1111_1111111_xxxxxxxx
29908 0be             | '------------------------------------------------------------------------------
29908 0be             | ' On entry:
29908 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
29908 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
29908 0be             | ' On exit:
29908 0be             | '   ep_addr_pid - CRC value appended to the packet.
29908 0be             | '------------------------------------------------------------------------------
29908 0be             | calc_crc5
29908 0be FF 03 00 FF 
2990c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
29910 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
29914 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
29918 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2991c 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
29920 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
29924 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
29928 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2992c 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
29930 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
29934 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
29938 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2993c 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
29940 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
29944 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
29948 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2994c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
29950 0d0             | 
29950 0d0             | '------------------------------------------------------------------------------
29950 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
29950 0d0             | '------------------------------------------------------------------------------
29950 0d0             | isr1_fsframe
29950 0d0 1A 92 62 FD |                 getct   iframe_ct_base
29954 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29958 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2995c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
29960 0d4             | .wait
29960 0d4 40 46 72 FD |                 testp   dp                      wc
29964 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
29968 0d6 23 03 08 FC |                 akpin   dp
2996c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
29970 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
29974 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
29978 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2997c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
29980 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
29984 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
29988 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2998c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
29990 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
29994 0e1 2C FF BF FD |                 call    #utx_byte
29998 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2999c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
299a0 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
299a4 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
299a8 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
299ac 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
299b0 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
299b4 0e9 5B A5 42 F5 |                 or      utx, icrc
299b8 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
299bc 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
299c0 0ec 20 00 90 FD |                 jmp     #isr1_wait
299c4 0ed             | isr1_lsframe
299c4 0ed 1A 92 62 FD |                 getct   iframe_ct_base
299c8 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
299cc 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
299d0 0f0             | .wait
299d0 0f0 40 46 72 FD |                 testp   dp                      wc
299d4 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
299d8 0f2 23 03 08 FC |                 akpin   dp
299dc 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
299e0 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
299e4 0f5             | isr1_wait
299e4 0f5 22 A5 82 FA |                 rqpin   utx, dm
299e8 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
299ec 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
299f0 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
299f4 0f9 03 00 00 FF 
299f8 0fa FF B3 06 F5 |                 and     frame, ##$7ff
299fc 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
29a00 0fc F5 FF 3B FB |                 reti1
29a04 0fd             | 
29a04 0fd             | '------------------------------------------------------------------------------
29a04 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
29a04 0fd             | ' transaction will complete before the next frame is triggered.
29a04 0fd             | '------------------------------------------------------------------------------
29a04 0fd             | ' On entry:
29a04 0fd             | ' On exit:
29a04 0fd             | '------------------------------------------------------------------------------
29a04 0fd             | wait_txn_ok
29a04 0fd 1A 74 63 FD |                 getct   htmp2
29a08 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
29a0c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29a10 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
29a14 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
29a18 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
29a1c 103 2D 00 64 FD |                 ret
29a20 104             | 
29a20 104             | '------------------------------------------------------------------------------
29a20 104             | ' A device connection was detected, or a bus reset was requested by the USB
29a20 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
29a20 104             | ' and perform a reset sequence prior to device enumeration.
29a20 104             | '------------------------------------------------------------------------------
29a20 104             | dev_reset
29a20 104 22 A7 82 FA |                 rqpin   urx, dm
29a24 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
29a28 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
29a2c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
29a30 108             | reset
29a30 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
29a34 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
29a38 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
29a3c 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
29a40 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
29a44 10d 1A 92 62 FD |                 getct   iframe_ct_base
29a48 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
29a4c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
29a50 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
29a54 111 24 70 07 F1 |                 add     htmp, #36
29a58 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
29a5c 113             | .framewait
29a5c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
29a60 114 F8 FF 9F CD |         if_b    jmp     #.framewait
29a64 115 2D 00 64 FD |                 ret
29a68 116             | 
29a68 116             | '------------------------------------------------------------------------------
29a68 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
29a68 116             | '------------------------------------------------------------------------------
29a68 116             | ' On entry:
29a68 116             | '   PTRA - source address.
29a68 116             | '   PB - destination address.
29a68 116             | '   hr0 - length of copy, in bytes.
29a68 116             | ' On exit:
29a68 116             | '------------------------------------------------------------------------------
29a68 116             | hmemcpy
29a68 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
29a6c 117 F7 71 43 FC |                 wrbyte  htmp, pb
29a70 118 01 EE 07 F1 |                 add     pb, #1
29a74 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
29a78 11a             | 
29a78 11a             | '------------------------------------------------------------------------------
29a78 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
29a78 11a             | ' loop until the errant device is disconnected.
29a78 11a             | '------------------------------------------------------------------------------
29a78 11a             | ' On entry:
29a78 11a             | ' On exit:
29a78 11a             | '------------------------------------------------------------------------------
29a78 11a             | host_error
29a78 11a             |           if ERROR_LED >= 0
29a78 11a             |           end
29a78 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
29a7c 11b             | 
29a7c 11b             | '------------------------------------------------------------------------------
29a7c 11b             | ' Get HID descriptor buffer for current port
29a7c 11b             | '------------------------------------------------------------------------------
29a7c 11b             | ' On entry:
29a7c 11b             | ' On exit:
29a7c 11b             | '   PB - HID descriptor buffer pointer
29a7c 11b             | '------------------------------------------------------------------------------
29a7c 11b             | get_hid_descr_buffer
29a7c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
29a80 11c 01 EE E7 F2 |                 cmpsub  pb, #1
29a84 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
29a88 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
29a8c 11f             | 
29a8c 11f             | 
29a8c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
29a90 120             | 
29a90 120             | ' USB commands and error codes
29a90 120 00 00 00 00 | cmd_data        long    0
29a94 121 00 00 00 00 | usb_err_code    long    ERR_NONE
29a98 122             | 
29a98 122             | ' Parameters block assigned at cog startup
29a98 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
29a9c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
29aa0 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
29aa4 125             | if ACTIVITY_LED >= 0
29aa4 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
29aa4 125             | end
29aa4 125             | if ERROR_LED >= 0
29aa4 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
29aa4 125             | end
29aa4 125 00 00 00 00 | hid_descr_p     long    0
29aa8 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
29aa8 126             | 'hkbd_report_p   long    0
29aa8 126 00 00 00 00 | hub_descr_p     long    0
29aac 127 00 00 00 00 | urx_buff_p      long    0
29ab0 128 00 00 00 00 | dev_desc_buff_p long    0
29ab4 129 00 00 00 00 | con_desc_buff_p long    0
29ab8 12a 00 00 00 00 | cache_start_p   long    0
29abc 12b 00 00 00 00 | cache_end_p     long    0
29ac0 12c             | if EMUPAD_MAX_PLAYER > 0
29ac0 12c             | emupad_out_ptr  long    0
29ac0 12c             | end
29ac0 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
29ac4 12d             | 
29ac4 12d             | hdev_init_start
29ac4 12d             | hdev_port       res     1
29ac4 12d             | hdev_port       res     1
29ac4 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
29ac4 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
29ac4 12d             | kbm_next_datax  res     1
29ac4 12d             | kbm_next_datax  res     1
29ac4 12d             | hub_intf_num    res     1
29ac4 12d             | hub_intf_num    res     1
29ac4 12d             | hub_next_datax  res     1
29ac4 12d             | hub_next_datax  res     1
29ac4 12d             | hub_status_chg  res     1
29ac4 12d             | hub_status_chg  res     1
29ac4 12d             | hub_port_status res     1
29ac4 12d             | hub_port_status res     1
29ac4 12d             | if HAVE_MOUSE
29ac4 12d             | ms_intf_num     res     1
29ac4 12d             | ms_intf_num     res     1
29ac4 12d             | ms_in_max_pkt   res     1
29ac4 12d             | ms_in_max_pkt   res     1
29ac4 12d             | end
29ac4 12d             | kb_intf_num     res     1
29ac4 12d             | kb_intf_num     res     1
29ac4 12d             | kb_interval     res     1
29ac4 12d             | kb_interval     res     1
29ac4 12d             | kb_in_max_pkt   res     1
29ac4 12d             | kb_in_max_pkt   res     1
29ac4 12d             | kb_max_index    res     1
29ac4 12d             | kb_max_index    res     1
29ac4 12d             | kb_led_states   res     1
29ac4 12d             | kb_led_states   res     1
29ac4 12d             | gp_intf_num     res     1
29ac4 12d             | gp_intf_num     res     1
29ac4 12d             | gp_interval     res     1
29ac4 12d             | gp_interval     res     1
29ac4 12d             | gp_max_index    res     1
29ac4 12d             | gp_max_index    res     1
29ac4 12d             | gp_descr_len    res     1+MAX_DEVICES
29ac4 12d             | gp_descr_len    res     1+MAX_DEVICES
29ac4 12d             | hdev_init_end
29ac4 12d             | 
29ac4 12d             | ' Initialized at cog startup:
29ac4 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
29ac4 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
29ac4 12d             | iframe_ct_new   res     1
29ac4 12d             | iframe_ct_new   res     1
29ac4 12d             | iframe_ct_base  res     1
29ac4 12d             | iframe_ct_base  res     1
29ac4 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
29ac4 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
29ac4 12d             | 
29ac4 12d             | ' This register block is reset to zero when a USB device connects
29ac4 12d             | hreg_init_start
29ac4 12d             | hstatus         res     1         ' Host status flags
29ac4 12d             | hstatus         res     1         ' Host status flags
29ac4 12d             | hctwait         res     1         ' Poll-based wait clocks
29ac4 12d             | hctwait         res     1         ' Poll-based wait clocks
29ac4 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
29ac4 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
29ac4 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
29ac4 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
29ac4 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
29ac4 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
29ac4 12d             | xfer_retry      res     1         ' Control transfer retry count
29ac4 12d             | xfer_retry      res     1         ' Control transfer retry count
29ac4 12d             | retry           res     1         ' Transaction retry count
29ac4 12d             | retry           res     1         ' Transaction retry count
29ac4 12d             | utx             res     1         ' Byte to transmit on USB
29ac4 12d             | utx             res     1         ' Byte to transmit on USB
29ac4 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
29ac4 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
29ac4 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
29ac4 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
29ac4 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
29ac4 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
29ac4 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
29ac4 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
29ac4 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
29ac4 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
29ac4 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
29ac4 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
29ac4 12d             | frame           res     1         ' USB 1ms frame counter value
29ac4 12d             | frame           res     1         ' USB 1ms frame counter value
29ac4 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
29ac4 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
29ac4 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
29ac4 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
29ac4 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
29ac4 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
29ac4 12d             | crc             res     1         ' Used for CRC16 calculation
29ac4 12d             | crc             res     1         ' Used for CRC16 calculation
29ac4 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
29ac4 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
29ac4 12d             | retval          res     1         ' Global success/fail return parameter
29ac4 12d             | retval          res     1         ' Global success/fail return parameter
29ac4 12d             | context_retval  res     1         ' Operation contextual return parameter
29ac4 12d             | context_retval  res     1         ' Operation contextual return parameter
29ac4 12d             | ' Device stuff
29ac4 12d             | hdev_id         res     1+MAX_DEVICES
29ac4 12d             | hdev_id         res     1+MAX_DEVICES
29ac4 12d             | hdev_bcd        res     1
29ac4 12d             | hdev_bcd        res     1
29ac4 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
29ac4 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
29ac4 12d             | ' Keyboard/mouse stuff
29ac4 12d             | hctrl_ep_addr   res     1
29ac4 12d             | hctrl_ep_addr   res     1
29ac4 12d             | hctrl_max_pkt   res     1
29ac4 12d             | hctrl_max_pkt   res     1
29ac4 12d             | hconfig_base    res     1
29ac4 12d             | hconfig_base    res     1
29ac4 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
29ac4 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
29ac4 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
29ac4 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
29ac4 12d             | hdev_class      res     1
29ac4 12d             | hdev_class      res     1
29ac4 12d             | hdev_subclass   res     1
29ac4 12d             | hdev_subclass   res     1
29ac4 12d             | hdev_protocol   res     1
29ac4 12d             | hdev_protocol   res     1
29ac4 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
29ac4 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
29ac4 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
29ac4 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
29ac4 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
29ac4 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
29ac4 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
29ac4 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
29ac4 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
29ac4 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
29ac4 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
29ac4 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
29ac4 12d             | if HAVE_MOUSE
29ac4 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
29ac4 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
29ac4 12d             | end
29ac4 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
29ac4 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
29ac4 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
29ac4 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
29ac4 12d             | hdev_ep_addr    res     1+MAX_DEVICES
29ac4 12d             | hdev_ep_addr    res     1+MAX_DEVICES
29ac4 12d             | hdev_out_addr   res     1
29ac4 12d             | hdev_out_addr   res     1
29ac4 12d             | 
29ac4 12d             | if EMUPAD_MAX_PLAYER > 0
29ac4 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
29ac4 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
29ac4 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
29ac4 12d             | end
29ac4 12d             | 
29ac4 12d             | hreg_init_end
29ac4 12d             | 
29ac4 12d             | hidr_start
29ac4 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
29ac4 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
29ac4 12d             | hidr_flags      res     1
29ac4 12d             | hidr_flags      res     1
29ac4 12d             | hidr_axis       res     3
29ac4 12d             | hidr_axis       res     3
29ac4 12d             | hidr_buttons    res     1
29ac4 12d             | hidr_buttons    res     1
29ac4 12d             | hidr_hats       res     1
29ac4 12d             | hidr_hats       res     1
29ac4 12d             | '' Above are actually useful values, 6 longs
29ac4 12d             | hidr_id         res     1
29ac4 12d             | hidr_id         res     1
29ac4 12d             | hidr_state      res     1
29ac4 12d             | hidr_state      res     1
29ac4 12d             | hidr_size       res     1
29ac4 12d             | hidr_size       res     1
29ac4 12d             | hidr_count      res     1
29ac4 12d             | hidr_count      res     1
29ac4 12d             | hidr_offset     res     1
29ac4 12d             | hidr_offset     res     1
29ac4 12d             | hidr_usage_idx  res     1
29ac4 12d             | hidr_usage_idx  res     1
29ac4 12d             | hidr_lminmax    res     1
29ac4 12d             | hidr_lminmax    res     1
29ac4 12d             | hidr_pminmax    res     1
29ac4 12d             | hidr_pminmax    res     1
29ac4 12d             | hidr_type       res     1
29ac4 12d             | hidr_type       res     1
29ac4 12d             | hidr_end
29ac4 12d             | 
29ac4 12d             | ' Variables dependent on the system freqency
29ac4 12d             | _var_64_lower_  res     1
29ac4 12d             | _var_64_lower_  res     1
29ac4 12d             | _var_64_upper_  res     1
29ac4 12d             | _var_64_upper_  res     1
29ac4 12d             | _12Mbps_        res     1
29ac4 12d             | _12Mbps_        res     1
29ac4 12d             | _1_5Mbps_       res     1
29ac4 12d             | _1_5Mbps_       res     1
29ac4 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
29ac4 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
29ac4 12d             | _1us_           res     1         ' 1us
29ac4 12d             | _1us_           res     1         ' 1us
29ac4 12d             | _10us_          res     1         ' 10us
29ac4 12d             | _10us_          res     1         ' 10us
29ac4 12d             | _33us_          res     1         ' 33us
29ac4 12d             | _33us_          res     1         ' 33us
29ac4 12d             | _txn_err_       res     1         ' 250us
29ac4 12d             | _txn_err_       res     1         ' 250us
29ac4 12d             | _500us_         res     1         ' 500us
29ac4 12d             | _500us_         res     1         ' 500us
29ac4 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
29ac4 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
29ac4 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
29ac4 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
29ac4 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
29ac4 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
29ac4 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
29ac4 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
29ac4 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
29ac4 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
29ac4 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
29ac4 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
29ac4 12d             | _preamble_wait_ res     1
29ac4 12d             | _preamble_wait_ res     1
29ac4 12d             | _1ms_           res     1         ' 1ms
29ac4 12d             | _1ms_           res     1         ' 1ms
29ac4 12d             | _2ms_           res     1         ' 2ms
29ac4 12d             | _2ms_           res     1         ' 2ms
29ac4 12d             | _suspend_wait_  res     1         ' 3ms
29ac4 12d             | _suspend_wait_  res     1         ' 3ms
29ac4 12d             | _4ms_           res     1         ' 4ms
29ac4 12d             | _4ms_           res     1         ' 4ms
29ac4 12d             | _xfer_wait_     res     1         ' 5ms
29ac4 12d             | _xfer_wait_     res     1         ' 5ms
29ac4 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
29ac4 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
29ac4 12d             | _reset_hold_    res     1         ' 15ms
29ac4 12d             | _reset_hold_    res     1         ' 15ms
29ac4 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
29ac4 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
29ac4 12d             | _21ms_          res     1         ' 21ms
29ac4 12d             | _21ms_          res     1         ' 21ms
29ac4 12d             | _100ms_         res     1         ' 100ms
29ac4 12d             | _100ms_         res     1         ' 100ms
29ac4 12d             | _500ms_         res     1         ' 500ms
29ac4 12d             | _500ms_         res     1         ' 500ms
29ac4 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
29ac4 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
29ac4 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
29ac4 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
29ac4 12d             | '------------------------------------------------------------------------------
29ac4 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
29ac4 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
29ac4 12d             | _usb_d_ls_nco_  res     1
29ac4 12d             | _usb_d_ls_nco_  res     1
29ac4 12d             | _usb_h_fs_nco_  res     1
29ac4 12d             | _usb_h_fs_nco_  res     1
29ac4 12d             | _usb_d_fs_nco_  res     1
29ac4 12d             | _usb_d_fs_nco_  res     1
29ac4 12d             | '------------------------------------------------------------------------------
29ac4 12d             | ' Scratch registers
29ac4 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
29ac4 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
29ac4 12d             | htmp1           res     1
29ac4 12d             | htmp1           res     1
29ac4 12d             | htmp2           res     1
29ac4 12d             | htmp2           res     1
29ac4 12d             | htmp3           res     1
29ac4 12d             | htmp3           res     1
29ac4 12d             | hrep            res     1         ' Repeat count
29ac4 12d             | hrep            res     1         ' Repeat count
29ac4 12d             | hsave0          res     1         ' Subroutine parameter saves
29ac4 12d             | hsave0          res     1         ' Subroutine parameter saves
29ac4 12d             | hsave1          res     1
29ac4 12d             | hsave1          res     1
29ac4 12d             | hsave2          res     1
29ac4 12d             | hsave2          res     1
29ac4 12d             | isrtmp1         res     1
29ac4 12d             | isrtmp1         res     1
29ac4 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
29ac4 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
29ac4 12d             | hr0             res     1         ' Multi-purpose registers
29ac4 12d             | hr0             res     1         ' Multi-purpose registers
29ac4 12d             | hr1             res     1
29ac4 12d             | hr1             res     1
29ac4 12d             | hr2             res     1
29ac4 12d             | hr2             res     1
29ac4 12d             | hr3             res     1
29ac4 12d             | hr3             res     1
29ac4 12d             | hpar1           res     1         ' Routine entry/exit parameters
29ac4 12d             | hpar1           res     1         ' Routine entry/exit parameters
29ac4 12d             | hpar2           res     1
29ac4 12d             | hpar2           res     1
29ac4 12d             | hpar3           res     1
29ac4 12d             | hpar3           res     1
29ac4 12d             | hct2            res     1         ' Function response bus turn-around timer
29ac4 12d             | hct2            res     1         ' Function response bus turn-around timer
29ac4 12d             | hct3            res     1         ' Keyboard/mouse poll timer
29ac4 12d             | hct3            res     1         ' Keyboard/mouse poll timer
29ac4 12d             | mod_cnt         res     1         ' Used in idle loops
29ac4 12d             | mod_cnt         res     1         ' Used in idle loops
29ac4 12d             |                 fit     $1F0
29ac4 12d             |                 org     $200
29ac4 200             | hlut_start
29ac4 200             | 
29ac4 200             | '------------------------------------------------------------------------------
29ac4 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
29ac4 200             | ' settings to startup defaults.
29ac4 200             | '------------------------------------------------------------------------------
29ac4 200             | ' On entry:
29ac4 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
29ac4 200             | '------------------------------------------------------------------------------
29ac4 200             | set_speed_full
29ac4 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
29ac8 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
29acc 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
29ad0 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
29ad4 204             | '                ret                             wcz     ' Restore caller flags on exit
29ad4 204             | 
29ad4 204             | '------------------------------------------------------------------------------
29ad4 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
29ad4 204             | ' is a downstream hub connected (not yet implemented), the baud generator
29ad4 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
29ad4 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
29ad4 204             | ' putting the smart pins into reset.
29ad4 204             | '------------------------------------------------------------------------------
29ad4 204             | ' On entry:
29ad4 204             | ' On exit: CZ flags restored to caller states
29ad4 204             | '------------------------------------------------------------------------------
29ad4 204             | set_speed_low
29ad4 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
29ad8 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
29adc 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
29ae0 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
29ae4 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
29ae8 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
29aec 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
29af0 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
29af4 20c             | 
29af4 20c             | '------------------------------------------------------------------------------
29af4 20c             | ' Perform configuration stuff required when a device intitially connects.
29af4 20c             | '------------------------------------------------------------------------------
29af4 20c             | ' On entry:
29af4 20c             | ' On exit:
29af4 20c             | '------------------------------------------------------------------------------
29af4 20c             | on_connect
29af4 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
29af8 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
29afc 20e             | .retry
29afc 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
29b00 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
29b04 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
29b08 211 00 08 00 FF 
29b0c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
29b10 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
29b14 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
29b18 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
29b1c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
29b20 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
29b24 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29b28 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
29b2c 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
29b30 21b 4C 03 B0 FD |                 call    #poll_waitx
29b34 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
29b38 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
29b3c 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
29b40 21f B8 FF 9F FD |                 jmp     #.retry
29b44 220             | .get_dev_desc
29b44 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
29b48 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
29b4c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
29b50 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
29b54 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
29b58 225 88 FB BF FD |                 call    #reset
29b5c 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
29b60 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
29b64 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
29b68 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
29b6c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29b70 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
29b74 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
29b78 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
29b7c 22e 04 00 00 FF 
29b80 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
29b84 230 34 FA BF FD |                 call    #calc_crc5
29b88 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
29b8c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
29b90 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
29b94 234 F7 AD C2 FA |                 rdbyte  total_data, pb
29b98 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
29b9c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
29ba0 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29ba4 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
29ba8 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
29bac 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
29bb0 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
29bb4 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
29bb8 23d C4 02 B0 FD |                 call    #poll_waitx
29bbc 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
29bc0 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
29bc4 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
29bc8 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
29bcc 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
29bd0 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29bd4 244 2D 00 64 5D |         if_nz   ret
29bd8 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
29bdc 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
29be0 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
29be4 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
29be8 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
29bec 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
29bf0 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
29bf4 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
29bf8 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
29bfc 24e 2C FB 9F CD |         if_b    jmp     #host_error
29c00 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
29c04 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
29c08 251 2D EC 63 FD |                 call    pa
29c0c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
29c10 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
29c14 254 2C EC 63 FD |                 jmp     pa
29c18 255             | 
29c18 255             | '------------------------------------------------------------------------------
29c18 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
29c18 255             | ' Status reporting is always in the function-to-host direction.
29c18 255             | '------------------------------------------------------------------------------
29c18 255             | ' On entry:
29c18 255             | '   PTRA - start address of the SETUP data in hub.
29c18 255             | '   PB - start address of the buffer/struct to be written to during the IN data
29c18 255             | '     stage.
29c18 255             | '   ep_addr_pid - device address, endpoint and CRC5.
29c18 255             | ' On exit:
29c18 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
29c18 255             | '     contains the count of data stage bytes actually received, which must
29c18 255             | '     always be <= the count requested.
29c18 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
29c18 255             | '     more specific USB operation error code.
29c18 255             | '------------------------------------------------------------------------------
29c18 255             | control_read
29c18 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
29c1c 256 F8 8F 03 F6 |                 mov     hpar2, ptra
29c20 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
29c24 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
29c28 259             | .xfer_start
29c28 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
29c2c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
29c30 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29c34 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
29c38 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
29c3c 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
29c40 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
29c44 260 61 00 00 FF 
29c48 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
29c4c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
29c50 263             | .data
29c50 263 56 B1 02 F6 |                 mov     pkt_data, total_data
29c54 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
29c58 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
29c5c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
29c60 267             | .nak_retry
29c60 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
29c64 268             | .in_retry
29c64 268 BC F6 BF FD |                 call    #txn_in
29c68 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
29c6c 26a 28 00 90 AD |         if_z    jmp     #.commit
29c70 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
29c74 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
29c78 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
29c7c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
29c80 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
29c84 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
29c88 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
29c8c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29c90 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
29c94 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
29c98 275             | .commit
29c98 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
29c9c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
29ca0 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
29ca4 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
29ca8 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
29cac 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
29cb0 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
29cb4 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
29cb8 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
29cbc 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
29cc0 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
29cc4 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
29cc8 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
29ccc 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
29cd0 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
29cd4 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
29cd8 285             | .pre_status
29cd8 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
29cdc 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
29ce0 287 00 B0 06 F6 |                 mov     pkt_data, #0
29ce4 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
29ce8 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
29cec 28a 61 00 00 FF 
29cf0 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
29cf4 28c             | .out_retry
29cf4 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
29cf8 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29cfc 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
29d00 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
29d04 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
29d08 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
29d0c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
29d10 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
29d14 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29d18 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
29d1c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
29d20 297             | ' I've encountered transfer STALL, even though the data looks correct, and
29d20 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
29d20 297             | ' ControlRead() transfer gets things unstuck most of the time...
29d20 297             | .xfer_retry
29d20 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
29d24 298 58 01 B0 FD |                 call    #poll_waitx
29d28 299 8C F9 BF FD |                 call    #wait_txn_ok
29d2c 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
29d30 29b C7 F1 03 F6 |                 mov     ptra, hpar2
29d34 29c C8 EF 03 F6 |                 mov     pb, hpar3
29d38 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
29d3c 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
29d40 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
29d44 2a0             | 
29d44 2a0             | '------------------------------------------------------------------------------
29d44 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
29d44 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
29d44 2a0             | ' the SETUP data struct is filled with the required values.
29d44 2a0             | '------------------------------------------------------------------------------
29d44 2a0             | ' On entry:
29d44 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
29d44 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
29d44 2a0             | '     stage.
29d44 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
29d44 2a0             | ' On exit:
29d44 2a0             | '   retval - used to convey the success/failure of each stage.
29d44 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
29d44 2a0             | '     more specific USB operation error code.
29d44 2a0             | '------------------------------------------------------------------------------
29d44 2a0             | control_write
29d44 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
29d48 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
29d4c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
29d50 2a3             | 
29d50 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
29d54 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
29d58 2a5 F7 91 03 F6 |                 mov     hpar3, pb
29d5c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
29d60 2a7             | .xfer_start
29d60 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
29d64 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
29d68 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
29d6c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29d70 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
29d74 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
29d78 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
29d7c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
29d80 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
29d84 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
29d88 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
29d8c 2b2             | .data
29d8c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
29d90 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
29d94 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
29d98 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
29d9c 2b6             | .out_retry
29d9c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
29da0 2b7 88 F6 BF FD |                 call    #txn_out
29da4 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
29da8 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
29dac 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
29db0 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
29db4 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
29db8 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
29dbc 2be             | .commit
29dbc 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
29dc0 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
29dc4 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
29dc8 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
29dcc 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
29dd0 2c3             | pre_status_in
29dd0 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
29dd4 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
29dd8 2c5             | .status_retry
29dd8 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
29ddc 2c6 44 F5 BF FD |                 call    #txn_in
29de0 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
29de4 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
29de8 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
29dec 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
29df0 2cb 2D 00 64 AD |         if_z    ret
29df4 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
29df8 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29dfc 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
29e00 2cf             | '               ret                                     ' Caller must handle transfer retirement
29e00 2cf             | 
29e00 2cf             | '------------------------------------------------------------------------------
29e00 2cf             | ' Execute an IN interrupt transaction.
29e00 2cf             | '------------------------------------------------------------------------------
29e00 2cf             | ' On entry:
29e00 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
29e00 2cf             | '   hpar2 - Address of the IN data buffer
29e00 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
29e00 2cf             | ' On exit:
29e00 2cf             | '   retval - the result of the operation.
29e00 2cf             | '   hpar3 - the count of IN data bytes actually received.
29e00 2cf             | '------------------------------------------------------------------------------
29e00 2cf             | do_int_in
29e00 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
29e04 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
29e08 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
29e0c 2d2             | 
29e0c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
29e10 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
29e14 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
29e18 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
29e1c 2d6             | .retry
29e1c 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
29e20 2d7 00 F5 BF FD |                 call    #txn_in
29e24 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
29e28 2d9 1C 00 90 AD |         if_z    jmp     #.commit
29e2c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
29e30 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
29e34 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
29e38 2dd 54 00 B0 FD |                 call    #retry_wait
29e3c 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
29e40 2df 18 00 90 AD |         if_z    jmp     #.post_ret
29e44 2e0 D4 FF 9F FD |                 jmp     #.retry
29e48 2e1             | .commit
29e48 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
29e4c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
29e50 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
29e54 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
29e58 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
29e5c 2e6             | .post_ret
29e5c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
29e60 2e7             | 
29e60 2e7             | 
29e60 2e7             | '------------------------------------------------------------------------------
29e60 2e7             | ' Resets the downstream hub port to FS
29e60 2e7             | '------------------------------------------------------------------------------
29e60 2e7             | dwnstream_reset
29e60 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
29e64 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
29e68 2e9             | 
29e68 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
29e6c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
29e70 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
29e74 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
29e78 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
29e7c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
29e80 2ef             | 
29e80 2ef             | '------------------------------------------------------------------------------
29e80 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
29e80 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
29e80 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
29e80 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
29e80 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
29e80 2ef             | '------------------------------------------------------------------------------
29e80 2ef             | ' On entry:
29e80 2ef             | '   hctwait - wait interval in sysclocks.
29e80 2ef             | ' On exit:
29e80 2ef             | '------------------------------------------------------------------------------
29e80 2ef             | poll_waitx
29e80 2ef 1A 92 63 FD |                 getct   hct2
29e84 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
29e88 2f1             | .wait
29e88 2f1 FF 25 CC FB |                 jnct2   #.wait
29e8c 2f2 2D 00 64 FD |                 ret
29e90 2f3             | 
29e90 2f3             | '------------------------------------------------------------------------------
29e90 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
29e90 2f3             | '------------------------------------------------------------------------------
29e90 2f3             | ' On entry:
29e90 2f3             | '   retval - transaction response PID or error code.
29e90 2f3             | ' On exit:
29e90 2f3             | '------------------------------------------------------------------------------
29e90 2f3             | retry_wait
29e90 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
29e94 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
29e98 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
29e9c 2f6 14 00 90 AD |         if_z    jmp     #.nak
29ea0 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
29ea4 2f8 D8 FF BF FD |                 call    #poll_waitx
29ea8 2f9             | .dec
29ea8 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
29eac 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
29eb0 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
29eb4 2fc             | .nak
29eb4 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
29eb8 2fd C4 FF BF FD |                 call    #poll_waitx
29ebc 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
29ec0 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
29ec4 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
29ec8 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
29ecc 302 2D 00 64 FD |                 ret
29ed0 303             | 
29ed0 303             | host_reset
29ed0 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
29ed4 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
29ed8 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
29ed8 305 BD 01 05 FF 
29edc 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
29ee0 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
29ee4 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
29ee8 309             | ' Check to see if the system clock has been changed.
29ee8 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
29eec 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
29ef0 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
29ef4 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
29ef8 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
29efc 30e 40 46 62 FD |                 dirl    dp
29f00 30f             | 
29f00 30f 28 02 64 FD |                 setq    #1
29f04 310 80 00 80 FF 
29f08 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
29f0c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
29f10 313             | .enable
29f10 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
29f14 314 41 46 62 FD |                 dirh    dp
29f18 315 1F 36 63 FD |                 waitx   _1us_
29f1c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
29f20 317             | 
29f20 317             |                 ' Handle Port protection enable and startup delay
29f20 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
29f24 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
29f28 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
29f2c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
29f30 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
29f34 31c             | 
29f34 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
29f38 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
29f3c 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
29f40 31f 00 00 04 F6 |                 mov     0-0, #0
29f44 320             | .regloop
29f44 320             | 
29f44 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
29f44 320             | 
29f44 320             | discon_entry
29f44 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
29f48 321             | 
29f48 321             |               
29f48 321             |         if HAVE_HIDPAD
29f48 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
29f4c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
29f50 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
29f54 324 F7 01 68 FC |                 wrlong  #0,pb
29f58 325             |         end
29f58 325             |         if EMUPAD_MAX_PLAYER > 0
29f58 325             |         end
29f58 325             | 
29f58 325             |                 ' Fall through to disconnected loop
29f58 325             | 
29f58 325             | '-----------------------------------------------------------------------------------------------------------------
29f58 325             | ' Device connect handling (Section 7.1.7.3).
29f58 325             | '-----------------------------------------------------------------------------------------------------------------
29f58 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
29f58 325             | ' device to connect (Section 7.1.7.3).
29f58 325             | '-----------------------------------------------------------------------------------------------------------------
29f58 325             | disconnected
29f58 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
29f5c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
29f60 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
29f64 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
29f68 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
29f6c 32a             |         if ACTIVITY_LED >= 0
29f6c 32a             |         end
29f6c 32a 22 A7 82 FA |                 rqpin   urx, dm
29f70 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
29f74 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
29f78 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
29f7c 32e             | .se1_test
29f7c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
29f80 32f FC FE BF FD |                 call    #poll_waitx
29f84 330 22 A7 82 FA |                 rqpin   urx, dm
29f88 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
29f8c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
29f90 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
29f94 334             | .se1            'SE1 is a fatal error condition
29f94 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
29f98 335 E4 FE BF FD |                 call    #poll_waitx
29f9c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
29fa0 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
29fa4 338             | .connect_test                                           ' Test lines until stable J/K state seen
29fa4 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
29fa8 339 22 A7 82 FA |                 rqpin   urx, dm
29fac 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
29fb0 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
29fb4 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
29fb8 33d             | connected
29fb8 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
29fbc 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
29fc0 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
29fc4 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
29fc8 341             | .set_pulse
29fc8 341 1A 64 63 FD |                 getct   _pulse_time_
29fcc 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
29fd0 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
29fd0 343             | ' of 1ms and make a correction, if necessary.
29fd0 343             | '                mov     htmp, _1ms_
29fd0 343             | '                subs    htmp, iframe_delta
29fd0 343             | '                adds    _frame1ms_clks_, htmp
29fd0 343             | '                debug(udec(_frame1ms_clks_))
29fd0 343             | 
29fd0 343             |                 ' Fall through to idle/processing loop
29fd0 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
29fd4 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
29fd8 345             | 
29fd8 345             | hidle
29fd8 345 22 A7 82 FA |                 rqpin   urx, dm
29fdc 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
29fe0 347 98 00 90 CD |         if_c    jmp     #.se0_test
29fe4 348 24 06 70 FD |                 pollct3                         wc
29fe8 349 68 00 90 3D |         if_nc   jmp     #.nopoll
29fec 34a 1A 94 63 FD |                 getct   hct3
29ff0 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
29ff4 34c             | 
29ff4 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
29ff8 34d 00 70 E3 F8 |                 getbyte htmp
29ffc 34e             | 
29ffc 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2a000 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2a004 350 40 00 90 AD |         if_z    jmp     #.poll
2a008 351             | 
2a008 351             |         if _HAVE_GAMEPAD
2a008 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2a00c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2a010 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2a014 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2a018 355 2C 00 90 AD |         if_z    jmp     #.poll
2a01c 356             |         end
2a01c 356             | 
2a01c 356             |         if HAVE_MOUSE
2a01c 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2a020 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a024 358 20 00 90 AD |         if_z    jmp     #.poll
2a028 359             |         end
2a028 359             | 
2a028 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2a02c 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2a030 35b 14 00 90 AD |         if_z    jmp     #.poll
2a034 35c             | 
2a034 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2a038 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2a03c 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2a040 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2a044 360             |         if HAVE_MOUSE
2a044 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2a048 361             |         else
2a048 361             |         end
2a048 361             | 
2a048 361             | .poll
2a048 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2a04c 362 2D EC 63 FD |                 call    pa
2a050 363             | .skip_poll
2a050 363             | 
2a050 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2a054 364             | 
2a054 364             | .nopoll
2a054 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2a058 365 44 00 90 AD |         if_z    jmp     #hsuspend
2a05c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2a060 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2a064 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2a068 369 1A 84 63 FD |                 getct   hr0
2a06c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2a070 36b             |         if ACTIVITY_LED >= 0
2a070 36b             |         end
2a070 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2a074 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2a078 36d 5C FF 9F FD |                 jmp     #hidle
2a07c 36e             | ' Check for extended SE0 state on the bus
2a07c 36e             | .se0_test
2a07c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2a080 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2a084 370 22 A7 82 FA |                 rqpin   urx, dm
2a088 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2a08c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2a090 373 24 F6 BF FD |                 call    #wait_txn_ok
2a094 374 00 00 80 FF 
2a098 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2a09c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2a09c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2a0a0 377             | 
2a0a0 377             | hsuspend
2a0a0 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2a0a4 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2a0a8 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2a0ac 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2a0b0 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2a0b4 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2a0b8 37d             | 
2a0b8 37d             |                 ' Fall through to resume wait loop
2a0b8 37d             | 
2a0b8 37d             | hwait_resume
2a0b8 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2a0bc 37e 02 86 47 F0 |                 shr     hr1, #2
2a0c0 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2a0c4 380             |         if ACTIVITY_LED >= 0
2a0c4 380             |         end
2a0c4 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2a0c8 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2a0cc 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2a0d0 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2a0d4 384 18 00 90 AD |         if_z    jmp     #.resume
2a0d8 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2a0dc 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2a0e0 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2a0e4 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2a0e8 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2a0ec 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2a0f0 38b             | .resume
2a0f0 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2a0f4 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2a0f8 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2a0fc 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2a100 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2a104 390 1F 70 63 FD |                 waitx   htmp
2a108 391 22 07 28 FC |                 wypin   #OUT_J, dm
2a10c 392 01 70 47 F0 |                 shr     htmp, #1
2a110 393 1F 70 63 FD |                 waitx   htmp
2a114 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a118 395 1A 92 62 FD |                 getct   iframe_ct_base
2a11c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2a120 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2a124 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2a128 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2a12c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2a130 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2a134 39c             | 
2a134 39c             | '------------------------------------------------------------------------------
2a134 39c             | ' Send preamble to enable low-speed HUB ports
2a134 39c             | '------------------------------------------------------------------------------
2a134 39c             | ' On entry:
2a134 39c             | ' On exit:
2a134 39c             | '   USB baud rate set to low-speed
2a134 39c             | '------------------------------------------------------------------------------
2a134 39c             | utx_pre
2a134 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a138 39d 40 46 62 FD |                 dirl    dp
2a13c 39e 28 02 64 FD |                 setq    #1
2a140 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2a144 3a0 58 44 62 FD |                 drvl    dm
2a148 3a1 59 46 62 FD |                 drvh    dp
2a14c 3a2             | 
2a14c 3a2 1E 00 00 FF 
2a150 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2a154 3a4             | 
2a154 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2a158 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2a15c 3a6 28 02 64 3D |         if_nc   setq    #1
2a160 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2a164 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2a168 3a9             | .l1
2a168 3a9             | 
2a168 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2a16c 3aa 40 46 62 FD |                 dirl    dp
2a170 3ab 28 02 64 FD |                 setq    #1
2a174 3ac 80 00 80 FF 
2a178 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2a17c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2a180 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2a184 3b0 41 46 62 FD |                 dirh    dp
2a188 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2a18c 3b2             | 
2a18c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2a190 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2a194 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2a198 3b5             | 
2a198 3b5             | hlut_end
2a198 3b5             |                 fit     $400
2a198 3b5             |                 orgh
2a198                 | if OVERLAP_MEMORY
2a198                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2a198                 | end
2a198                 | '------------------------------------------------------------------------------
2a198                 | ' Routines called from cog space.
2a198                 | '------------------------------------------------------------------------------
2a198                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2a198                 | '------------------------------------------------------------------------------
2a198                 | 
2a198                 | '------------------------------------------------------------------------------
2a198                 | ' USB host cog initialization.
2a198                 | '------------------------------------------------------------------------------
2a198                 | usb_host_init
2a198                 |                 ' Initialize buffer pointers
2a198                 |         if OVERLAP_MEMORY
2a198                 |         else
2a198     40 15 B0 FE |                 loc     pb, #hid_descr
2a19c                 |         end
2a19c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2a1a0                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2a1a0                 |                 {
2a1a0                 |                 }
2a1a0                 |         
2a1a0                 |                 {
2a1a0                 |                 }
2a1a0                 |                 'loc     pb,#hkbd_report
2a1a0                 |                 'mov     hkbd_report_p,pb
2a1a0                 | 
2a1a0     08 1D B0 FE |                 loc     pb, #hub_descr
2a1a4     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2a1a8     1D 1D B0 FE |                 loc     pb, #urx_buff
2a1ac     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2a1b0     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2a1b4     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2a1b8     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2a1bc     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2a1c0     18 15 B0 FE |                 loc     pb, #usb_cache_start
2a1c4     F7 55 02 F6 |                 mov     cache_start_p, pb
2a1c8     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2a1cc     F7 57 02 F6 |                 mov     cache_end_p, pb
2a1d0                 | 
2a1d0                 |         if ERROR_LED >= 0
2a1d0                 |         end
2a1d0                 | 
2a1d0                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2a1d0                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2a1d0                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2a1d0                 | ' Configure and enable the Serial Host USB port.
2a1d0     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2a1d4                 | 
2a1d4                 | '------------------------------------------------------------------------------
2a1d4                 | ' Timing calculations happen before any interrupt(s) are enabled.
2a1d4                 | '------------------------------------------------------------------------------
2a1d4                 | ' On entry:
2a1d4                 | '   htmp - current CLKFREQ value.
2a1d4                 | '------------------------------------------------------------------------------
2a1d4                 | hinit_usb_timings
2a1d4                 | '                getct   htmp2
2a1d4     B8 59 02 F6 |                 mov     save_sysclk, htmp
2a1d8     8D 5B 80 FF 
2a1dc     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2a1e0     18 30 63 FD |                 getqx   _12Mbps_
2a1e4     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2a1e8     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2a1ec     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2a1f0     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2a1f4     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2a1f8     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2a1fc     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2a200     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2a204     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2a208     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2a20c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2a210     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2a214     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2a218     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2a21c     80 00 00 FF 
2a220     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2a224     18 2C 63 FD |                 getqx   _var_64_lower_
2a228     19 2E 63 FD |                 getqy   _var_64_upper_
2a22c     28 2C 63 FD |                 setq    _var_64_lower_
2a230     65 CD 1D FF 
2a234     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2a238     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2a23c     01 00 00 FF 
2a240     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2a244     18 2C 63 FD |                 getqx   _var_64_lower_
2a248     19 2E 63 FD |                 getqy   _var_64_upper_
2a24c     28 2C 63 FD |                 setq    _var_64_lower_
2a250     A1 07 00 FF 
2a254     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2a258     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2a25c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2a260     09 36 57 F0 |                 shr     _1us_, #9               wc
2a264     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2a268     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2a26c     18 38 63 FD |                 getqx   _10us_
2a270     09 38 57 F0 |                 shr     _10us_, #9              wc
2a274     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2a278     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2a27c     18 3A 63 FD |                 getqx   _33us_
2a280     09 3A 57 F0 |                 shr     _33us_, #9              wc
2a284     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2a288     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2a28c     18 3C 63 FD |                 getqx   _txn_err_
2a290     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2a294     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2a298     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2a29c     18 3E 63 FD |                 getqx   _500us_
2a2a0     09 3E 57 F0 |                 shr     _500us_, #9             wc
2a2a4     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2a2a8     01 00 00 FF 
2a2ac     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2a2b0     18 40 63 FD |                 getqx   _txn_ok_ls_
2a2b4     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2a2b8     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2a2bc     01 00 00 FF 
2a2c0     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2a2c4     18 42 63 FD |                 getqx   _txn_ok_fs_
2a2c8     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2a2cc     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2a2d0     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2a2d4     05 00 00 FF 
2a2d8     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2a2dc     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2a2e0     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2a2e4     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2a2e8     1C 00 00 FF 
2a2ec     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2a2f0     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2a2f4     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2a2f8     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2a2fc     00 00 00 FF 
2a300     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2a304     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2a308     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2a30c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2a310     04 00 00 FF 
2a314     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2a318     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2a31c     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2a320     8D 5B 00 FF 
2a324     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2a328     18 4C 63 FD |                 getqx   _preamble_wait_
2a32c     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2a330     01 00 00 FF 
2a334     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2a338     18 2C 63 FD |                 getqx   _var_64_lower_
2a33c     19 2E 63 FD |                 getqy   _var_64_upper_
2a340     28 2C 63 FD |                 setq    _var_64_lower_
2a344     01 00 00 FF 
2a348     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2a34c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2a350     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2a354     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2a358     FF FF 7F FF 
2a35c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2a360     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2a364     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2a368     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2a36c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2a370     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2a374     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2a378     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2a37c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2a380     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2a384     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2a388     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2a38c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2a390     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2a394     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2a398     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2a39c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2a3a0     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2a3a4     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2a3a8     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2a3ac     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2a3b0     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2a3b4     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2a3b8     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2a3bc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2a3c0     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2a3c4     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2a3c8                 | '        _ret_   mov     _1sec_, save_sysclk
2a3c8                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2a3c8                 | '                ret
2a3c8                 | {
2a3c8                 | }
2a3c8                 | 
2a3c8                 | '------------------------------------------------------------------------------
2a3c8                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2a3c8                 | ' one. If it is, start the task progression that will configure the device for
2a3c8                 | ' use.
2a3c8                 | '------------------------------------------------------------------------------
2a3c8                 | ' On entry:
2a3c8                 | '   hconfig_base - start address of the cached config descriptor chain.
2a3c8                 | ' On exit:
2a3c8                 | '------------------------------------------------------------------------------
2a3c8                 | hparse_con_desc
2a3c8     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2a3cc     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2a3d0     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2a3d4     4E 70 FF F9 |                 movbyts htmp,#%%1032
2a3d8     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2a3dc                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2a3dc                 | 
2a3dc     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2a3e0     6E ED 03 F1 |                 add     pa, hconfig_base
2a3e4     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2a3e8                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2a3e8                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2a3e8                 | ' that defines a keyboard and/or mouse.
2a3e8     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2a3ec                 | .next_intf
2a3ec     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2a3f0     BC 01 90 3D |         if_ae   jmp     #hset_config
2a3f4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2a3f8     75 F3 03 F1 |                 add     ptrb, hnext_desc
2a3fc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2a400     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2a404     0C 00 90 AD |         if_z    jmp     #.intf
2a408     80 71 C7 FA |                 rdbyte  htmp, ptrb
2a40c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2a410     D8 FF 9F FD |                 jmp     #.next_intf
2a414                 | .intf
2a414     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2a418     00 90 07 F6 |                 mov     hpar3, #0
2a41c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2a420     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2a424     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2a428     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2a42c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2a42c                 | 
2a42c                 | .endp
2a42c     80 71 C7 FA |                 rdbyte  htmp, ptrb
2a430     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2a434     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2a438     78 00 90 3D |         if_ae   jmp     #.get_device
2a43c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2a440     75 F3 03 F1 |                 add     ptrb, hnext_desc
2a444     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2a448     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2a44c     64 00 90 AD |         if_z    jmp     #.get_device
2a450     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2a454     04 00 90 AD |         if_z    jmp     #.get_ep
2a458     D0 FF 9F FD |                 jmp     #.endp
2a45c                 | .get_ep
2a45c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2a460     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2a464     0F 86 67 F0 |                 shl     hr1, #8 + 7
2a468     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2a46c     3F 00 00 FF 
2a470     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2a474     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2a478     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2a47c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2a480     00 90 0F F2 |                 cmp     hpar3, #0               wz
2a484     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2a488     A0 FF 9F FD |                 jmp     #.endp
2a48c                 | .in_ep
2a48c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2a490     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2a494                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2a494     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2a498     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2a49c     8C FF 9F FD |                 jmp     #.endp
2a4a0                 | .out_ep
2a4a0     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2a4a4     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2a4a8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2a4a8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2a4ac     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2a4b0     78 FF 9F FD |                 jmp     #.endp
2a4b4                 | 
2a4b4                 | .get_device
2a4b4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2a4b8     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2a4bc     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2a4c0     68 00 90 AD |         if_z    jmp     #.gamepad
2a4c4     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2a4c8     AC 00 90 AD |         if_z    jmp     #.hub
2a4cc     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2a4d0     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2a4d4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2a4d8     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2a4dc     4C 00 90 AD |         if_z    jmp     #.gamepad
2a4e0     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2a4e4     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2a4e8                 | .keyboard
2a4e8     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2a4ec                 |         if HAVE_MOUSE
2a4ec     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2a4f0                 |         else
2a4f0                 |         end
2a4f0     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2a4f4     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2a4f8     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a4fc     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2a500     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2a504     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2a508                 |                 'debug(udec(kb_intf_num))
2a508                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2a508     E0 FE 9F FD |                 jmp     #.next_intf
2a50c                 | if HAVE_MOUSE
2a50c                 | .mouse
2a50c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2a510     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2a514     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2a518     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2a51c     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a520                 |                 'getbyte ms_interval, hr2, #3
2a520     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2a524     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2a528                 |                 'debug(udec(kb_intf_num))
2a528                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2a528     C0 FE 9F FD |                 jmp     #.next_intf
2a52c                 | end
2a52c                 | .gamepad
2a52c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2a530     C7 71 63 F5 |                 xor     htmp, hpar2
2a534     3F 00 00 FF 
2a538     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a53c     AC FE 9F AD |         if_z    jmp     #.next_intf
2a540                 |         if HAVE_MOUSE
2a540     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2a544     C7 71 63 F5 |                 xor     htmp, hpar2
2a548     3F 00 00 FF 
2a54c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a550     98 FE 9F AD |         if_z    jmp     #.next_intf
2a554                 |         end
2a554     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2a558     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2a55c     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2a560                 | 
2a560     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2a564     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2a568     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a56c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2a570     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2a574                 |                 'debug(udec(gp_intf_num))
2a574                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2a574     74 FE 9F FD |                 jmp     #.next_intf
2a578                 | .hub
2a578     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2a57c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2a580     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2a584     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2a588     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2a58c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2a590     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2a594     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2a598     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2a59c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2a5a0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a5a4     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2a5a8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2a5ac                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2a5ac     3C FE 9F FD |                 jmp     #.next_intf
2a5b0                 | 
2a5b0                 | '------------------------------------------------------------------------------
2a5b0                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2a5b0                 | ' it according to its function, or functions. In the case of this boot protocol
2a5b0                 | ' keyboard/mouse class driver:
2a5b0                 | ' - SetConfiguration(config_num)
2a5b0                 | ' - SetProtocol(boot)
2a5b0                 | ' - SetIdle(indefinite)
2a5b0                 | ' - Enter the device interrupt IN polling task stage.
2a5b0                 | '------------------------------------------------------------------------------
2a5b0                 | ' On entry:
2a5b0                 | ' On exit:
2a5b0                 | '------------------------------------------------------------------------------
2a5b0                 | hset_config
2a5b0                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2a5b0                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2a5b0     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2a5b4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a5b8     00 00 0C F2 |                 cmp     0-0, #0                 wz
2a5bc     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2a5c0                 |         if HAVE_MOUSE
2a5c0     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2a5c4                 |         end
2a5c4     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2a5c8     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2a5cc                 | .set_config
2a5cc     6C 0E D0 FE |                 loc     ptra, #set_config
2a5d0     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2a5d4     6E ED 03 F1 |                 add     pa, hconfig_base
2a5d8     F6 8D C3 FA |                 rdbyte  hpar1, pa
2a5dc     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2a5e0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2a5e4     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2a5e8     A0 02 A0 FD |                 call    #control_write
2a5ec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a5f0     2D 00 64 5D |         if_nz   ret
2a5f4                 | .kbd_config
2a5f4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2a5f8     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2a5fc                 | 
2a5fc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2a600     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a604     3F 00 00 FF 
2a608     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a60c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2a610                 | 
2a610     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2a614     34 0E D0 FE |                 loc     ptra, #set_protocol
2a618     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2a61c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a620     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2a624     A0 02 A0 FD |                 call    #control_write
2a628     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a62c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2a630     E4 02 90 5D |         if_nz   jmp     #.notify_client
2a634     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2a638     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2a63c     30 03 B0 FD |                 call    #hset_idle
2a640                 |                 'cmp     retval, #PID_ACK        wz
2a640                 |         'if_nz   mov     hkbd_ep_addr, #0
2a640                 |         'if_nz   jmp     #.notify_client
2a640     A8 99 02 F6 |                 mov     hctwait, _2ms_
2a644     EF 02 A0 FD |                 call    #poll_waitx
2a648     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2a64c     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2a650     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2a654     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2a658     2C 03 B0 FD |                 call    #hset_kbdled_report
2a65c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a660     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2a664     B0 02 90 5D |         if_nz   jmp     #.notify_client
2a668     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2a66c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a670     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a674     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2a678     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2a67c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2a680     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2a684     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2a688     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2a68c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2a690     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2a694                 |         if !!HAVE_MOUSE
2a694                 |         end
2a694                 | 
2a694                 | .mouse_config
2a694                 | if HAVE_MOUSE
2a694     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2a698     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2a69c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2a6a0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a6a4     3F 00 00 FF 
2a6a8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a6ac     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2a6b0                 | 
2a6b0                 |                 debug("mouse passed addr check")
2a6b0                 | 
2a6b0     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2a6b4     00 00 80 FF 
2a6b8     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2a6bc     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2a6c0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a6c4     55 02 A0 FD |                 call    #control_read
2a6c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a6cc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2a6d0     44 02 90 5D |         if_nz   jmp     #.notify_client
2a6d4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2a6d8     56 01 00 F6 |                 mov     0-0, total_data
2a6dc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a6e0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2a6e0                 | 
2a6e0     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2a6e4     64 0D D0 FE |                 loc     ptra, #set_protocol
2a6e8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2a6ec     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a6f0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2a6f4     A0 02 A0 FD |                 call    #control_write
2a6f8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a6fc     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2a700     14 02 90 5D |         if_nz   jmp     #.notify_client
2a704                 |                 debug("mouse passed SetProtocol")
2a704     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2a708     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2a70c     60 02 B0 FD |                 call    #hset_idle
2a710                 |                 'cmp     retval, #PID_ACK        wz
2a710                 |         'if_nz   mov     hmouse_ep_addr, #0
2a710                 |         'if_nz   jmp     #.notify_client
2a710                 |                 debug("mouse passed SetIdle")
2a710     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2a714     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a718     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a71c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2a720     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2a724     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2a728     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2a72c     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2a730     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2a734     3F 00 00 FF 
2a738     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2a73c     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2a740     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2a744     D0 01 90 FD |                 jmp     #.notify_client
2a748                 | end
2a748                 | .gamepad_config
2a748                 | if _HAVE_GAMEPAD
2a748     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a74c     00 00 0C F2 |                 cmp     0-0, #0                 wz
2a750     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2a754     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2a758     00 70 03 F6 |                 mov     htmp, 0-0
2a75c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a760     3F 00 00 FF 
2a764     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a768     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2a76c                 | 
2a76c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2a770     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2a774     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a778     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a77c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2a780     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2a784     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2a788     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2a78c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2a790     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2a794     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2a798     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2a79c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2a7a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2a7a4                 | 
2a7a4                 |                 if EMUPAD_MAX_PLAYER > 0
2a7a4                 |                 
2a7a4                 | .rule_loop           
2a7a4                 |                 end
2a7a4                 | 
2a7a4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2a7a8     5C 00 90 AD |         if_e    jmp     #.xinput
2a7ac     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2a7b0     00 70 03 F6 |                 mov     htmp,0-0
2a7b4     01 A6 02 FF 
2a7b8     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2a7bc     7C 00 90 AD |         if_e    jmp     #.ps3
2a7c0                 | 
2a7c0     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2a7c4     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2a7c8     00 00 80 5F 
2a7cc     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2a7d0     03 00 80 AF 
2a7d4     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2a7d8     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2a7dc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a7e0     55 02 A0 FD |                 call    #control_read
2a7e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a7e8     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2a7ec     00 00 04 56 |         if_nz   mov     0-0, #0
2a7f0     24 01 90 5D |         if_nz   jmp     #.notify_client
2a7f4     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2a7f8     56 01 00 F6 |                 mov     0-0, total_data
2a7fc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2a800                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2a800                 | 
2a800     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2a804     10 01 90 FD |                 jmp     #.notify_client
2a808                 | .xinput
2a808     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2a80c     2D EF 03 F6 |                 mov     pb,hdev_port
2a810     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2a814     03 EE 27 F3 |                 fle     pb,#3
2a818     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2a81c     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2a820                 | 
2a820     03 B0 06 F6 |                 mov     pkt_data, #3
2a824     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2a828     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2a82c     5A 00 A0 FD |                 call    #txn_out
2a830     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2a834                 | 
2a834     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2a838     DC 00 90 FD |                 jmp     #.notify_client
2a83c                 | .ps3
2a83c     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2a840     2D EF 03 F6 |                 mov     pb,hdev_port
2a844     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2a848     04 EE 27 F3 |                 fle     pb,#4
2a84c     F7 EF C3 F9 |                 decod   pb
2a850     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2a854                 | 
2a854     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2a858     00 0C D0 FE |                 loc     ptra, #set_report
2a85c     01 00 80 FF 
2a860     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2a864     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a868     03 61 5C FC |                 wrword  #48, ptra[wLength]
2a86c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2a870     A0 02 A0 FD |                 call    #control_write
2a874                 | 
2a874     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2a878     E0 0B D0 FE |                 loc     ptra, #set_report
2a87c     01 00 80 FF 
2a880     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2a884     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a888     03 09 5C FC |                 wrword  #4, ptra[wLength]
2a88c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2a890     A0 02 A0 FD |                 call    #control_write
2a894     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2a898     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2a89c     00 00 04 56 |         if_nz   mov     0-0, #0
2a8a0     74 00 90 5D |         if_nz   jmp     #.notify_client
2a8a4                 | 
2a8a4     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2a8a8     6C 00 90 FD |                 jmp     #.notify_client
2a8ac                 | end
2a8ac                 | 
2a8ac                 | .hub_config
2a8ac     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2a8b0     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2a8b4     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2a8b8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2a8bc     3F 00 00 FF 
2a8c0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2a8c4     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2a8c8                 | 
2a8c8     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2a8cc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2a8d0     26 EF 03 F6 |                 mov     pb, hub_descr_p
2a8d4     55 02 A0 FD |                 call    #control_read
2a8d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a8dc     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2a8e0     34 00 90 5D |         if_nz   jmp     #.notify_client
2a8e4                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2a8e4                 | 
2a8e4     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2a8e8     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2a8ec     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2a8f0                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2a8f0                 | .pwr_loop
2a8f0     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2a8f4     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2a8f8     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2a8fc     A0 02 A0 FD |                 call    #control_write
2a900     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2a904                 | 
2a904     B1 99 02 F6 |                 mov     hctwait, _500ms_
2a908     B0 99 02 F1 |                 add     hctwait, _100ms_
2a90c     EF 02 A0 FD |                 call    #poll_waitx
2a910                 | 
2a910     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2a914     00 00 90 FD |                 jmp     #.notify_client
2a918                 | 
2a918                 | .notify_client
2a918     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2a91c     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2a920                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2a920                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2a920     2D 00 64 FD |                 ret
2a924                 | 
2a924                 | '------------------------------------------------------------------------------
2a924                 | ' Initialize the keyboard/mouse data area to start-up values.
2a924                 | '------------------------------------------------------------------------------
2a924                 | ' On entry:
2a924                 | ' On exit:
2a924                 | '------------------------------------------------------------------------------
2a924                 | init_kbdm_data
2a924     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2a928     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2a92c                 | 
2a92c     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2a930     2B ED 03 F6 |                 mov     pa, cache_end_p
2a934                 | .loop
2a934     61 01 4C FC |                 wrbyte  #0, ptra++
2a938     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2a93c     F4 FF 9F CD |         if_b    jmp     #.loop
2a940                 |         
2a940                 |         if EMUPAD_MAX_PLAYER > 0
2a940                 |         end
2a940                 | 
2a940                 | 
2a940     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2a944                 | .regloop
2a944     00 EC 8F F9 |                 altd    pa
2a948     00 00 04 F6 |                 mov     0-0, #0
2a94c     01 EC 07 F1 |                 add     pa, #1
2a950     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2a954     EC FF 9F 5D |         if_nz   jmp     #.regloop
2a958                 | 
2a958     E1 E1 61 FF 
2a95c     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2a960     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2a964     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2a968     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2a96c                 | 
2a96c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2a970                 | 
2a970                 | '------------------------------------------------------------------------------
2a970                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2a970                 | ' function.
2a970                 | '------------------------------------------------------------------------------
2a970                 | ' On entry:
2a970                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2a970                 | '   hpar2 - index number of the target interface.
2a970                 | ' On exit:
2a970                 | '------------------------------------------------------------------------------
2a970                 | hset_idle
2a970     A8 99 02 F6 |                 mov     hctwait, _2ms_
2a974     EF 02 A0 FD |                 call    #poll_waitx
2a978     D8 0A D0 FE |                 loc     ptra, #set_idle
2a97c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2a980     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2a984     A0 02 80 FD |                 jmp     #control_write
2a988                 | 
2a988                 | '------------------------------------------------------------------------------
2a988                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2a988                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2a988                 | '------------------------------------------------------------------------------
2a988                 | ' On entry:
2a988                 | '   ep_addr_pid - device address and enpoint for the request.
2a988                 | ' On exit:
2a988                 | '   retval - transaction result.
2a988                 | '------------------------------------------------------------------------------
2a988                 | hset_kbdled_report
2a988     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2a98c     CC 0A D0 FE |                 loc     ptra, #set_report
2a990     01 00 80 FF 
2a994     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2a998     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2a99c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2a9a0     27 EF 03 F6 |                 mov     pb, urx_buff_p
2a9a4     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2a9a8     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2a9ac                 | 
2a9ac                 | '------------------------------------------------------------------------------
2a9ac                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2a9ac                 | '------------------------------------------------------------------------------
2a9ac                 | ' On entry:
2a9ac                 | ' On exit:
2a9ac                 | '------------------------------------------------------------------------------
2a9ac                 | hget_kbd_in_report
2a9ac     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2a9b0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2a9b4     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2a9b8     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2a9bc     CF 02 A0 FD |                 call    #do_int_in
2a9c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2a9c4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2a9c8                 | 
2a9c8     00 90 0F F2 |                 cmp     hpar3, #0               wz
2a9cc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2a9d0                 | 
2a9d0     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2a9d4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2a9d8     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2a9dc     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2a9e0                 | 
2a9e0     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2a9e4     18 00 B0 FD |                 call    #hkbd_compare
2a9e8                 |         if EMUPAD_MAX_PLAYER > 0
2a9e8                 |         end
2a9e8                 | 
2a9e8                 | .led_check
2a9e8     3B 71 03 F6 |                 mov     htmp, kb_led_states
2a9ec     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2a9f0     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2a9f4     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2a9f8     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2a9fc     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2aa00                 | 
2aa00                 | '------------------------------------------------------------------------------
2aa00                 | ' Compare current and previous keyboard data buffers for keypress changes.
2aa00                 | '------------------------------------------------------------------------------
2aa00                 | hkbd_compare
2aa00     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2aa04     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2aa08     61 73 07 FB |                 rdlong  htmp1, ptra++
2aa0c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2aa10     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2aa14     61 73 07 FB |                 rdlong  htmp1, ptra++
2aa18     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2aa1c     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2aa20     2D 00 64 AD |         if_z    ret
2aa24                 | 
2aa24     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2aa28                 | 
2aa28                 |                 ' Handle modifiers
2aa28     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2aa2c     00 87 C7 FA |                 rdbyte  hr1, ptra
2aa30     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2aa34     63 86 63 FD |                 mergew  hr1
2aa38     08 EC 07 F6 |                 mov     pa,#8
2aa3c                 | .modloop
2aa3c     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2aa40     E8 8C 07 F6 |                 mov     hpar1,#$E8
2aa44     F6 8D 83 F1 |                 sub     hpar1,pa
2aa48     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2aa4c     FB ED 6F FB |                 djnz    pa,#.modloop
2aa50                 | 
2aa50     6F E0 75 FD | .release        modc    _set    wc
2aa54                 |                 'alts    hdev_port, #hid_report_p
2aa54                 |                 'mov     ptra, hid_report_p
2aa54     02 F0 07 F1 |                 add     ptra, #2
2aa58     06 EC 07 F6 |                 mov     pa, #6
2aa5c     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2aa60     20 00 90 AD |         if_z    jmp     #.rl3
2aa64     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2aa68     02 F2 07 F1 |                 add     ptrb, #2
2aa6c     06 EE 07 F6 |                 mov     pb, #6
2aa70     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2aa74     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2aa78     08 00 90 AD |         if_z    jmp     #.rl3
2aa7c     FC EF 6F FB |                 djnz    pb, #.rl2
2aa80     68 00 B0 FD |                 call    #hkbd_translate
2aa84     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2aa88                 | 
2aa88     00 90 07 F6 |                 mov     hpar3, #0
2aa8c     1F 90 27 F4 |                 bith    hpar3, #31
2aa90                 | 
2aa90     6F 00 74 FD | .press          modc    _clr    wc
2aa94     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2aa98     02 F0 07 F1 |                 add     ptra, #2
2aa9c     06 EC 07 F6 |                 mov     pa, #6
2aaa0     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2aaa4     20 00 90 AD |         if_z    jmp     #.pl3
2aaa8     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2aaac     02 F2 07 F1 |                 add     ptrb, #2
2aab0     06 EE 07 F6 |                 mov     pb, #6
2aab4     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2aab8     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2aabc     08 00 90 AD |         if_z    jmp     #.pl3
2aac0     FC EF 6F FB |                 djnz    pb, #.pl2
2aac4     24 00 B0 FD |                 call    #hkbd_translate
2aac8     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2aacc                 | 
2aacc     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2aad0     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2aad4     28 02 64 FD |                 setq #1
2aad8     61 73 07 FB |                 rdlong  htmp1, ptra++
2aadc     28 02 64 FD |                 setq #1
2aae0     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2aae4     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2aae8                 | 
2aae8     2D 00 64 FD |                 ret
2aaec                 | 
2aaec                 | '------------------------------------------------------------------------------
2aaec                 | ' Translate keyboard scancode to ASCII
2aaec                 | '------------------------------------------------------------------------------
2aaec                 | ' On entry:
2aaec                 | '   hpar1 - scancode
2aaec                 | '   hpar2 - key modifiers state
2aaec                 | '       c - pressed (0) or released (1) flag
2aaec                 | ' On exit:
2aaec                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2aaec                 | '               30..17 = unused
2aaec                 | '                   18 = scroll-lock state 
2aaec                 | '                   17 = caps-lock state
2aaec                 | '                   16 = num-lock state 
2aaec                 | '                15..8 = key modifiers state
2aaec                 | '                 7..0 = scancode
2aaec                 | '------------------------------------------------------------------------------
2aaec                 | hkbd_translate
2aaec     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2aaf0     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2aaf4     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2aaf8     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2aafc     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2ab00     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2ab04                 | 
2ab04                 |         if EMUPAD_MAX_PLAYER > 0
2ab04                 | 
2ab04                 |         if EMUPAD_BT0_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT1_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT2_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT3_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT4_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT5_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT6_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT7_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT8_BIT >= 0
2ab04                 |         end
2ab04                 |         if EMUPAD_BT9_BIT >= 0
2ab04                 |         end
2ab04                 | 
2ab04                 |         end
2ab04     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2ab08     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2ab0c     1F 8C 47 F4 |                 bitc    hpar1, #31
2ab10                 |         if KEYQUEUE_SIZE > 0
2ab10     C4 09 B0 FE |                 loc pb,#keyq_head
2ab14     F7 71 E3 FA |                 rdword htmp,pb
2ab18     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2ab1c     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2ab20     B8 75 03 F6 |                 mov htmp2,htmp
2ab24     04 74 07 FA |                 mul htmp2,#4
2ab28     F7 75 03 F1 |                 add htmp2,pb
2ab2c     02 74 07 F1 |                 add htmp2,#2
2ab30     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2ab34     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2ab38     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2ab3c     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2ab40                 |         end
2ab40     2D 00 7C FD |                 ret wcz
2ab44                 | 
2ab44                 | if HAVE_MOUSE
2ab44                 | '------------------------------------------------------------------------------
2ab44                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2ab44                 | '------------------------------------------------------------------------------
2ab44                 | ' On entry:
2ab44                 | ' On exit:
2ab44                 | '------------------------------------------------------------------------------
2ab44                 | hget_mouse_in_report
2ab44     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2ab48     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2ab4c     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2ab50     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2ab54     CF 02 A0 FD |                 call    #do_int_in
2ab58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ab5c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2ab60                 | 
2ab60     00 90 0F F2 |                 cmp     hpar3, #0               wz
2ab64     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2ab68                 | 
2ab68     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2ab6c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2ab70     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2ab74     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2ab78                 | 
2ab78     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2ab7c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2ab80     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2ab84     01 90 87 31 |         if_ae   sub     hpar3, #1
2ab88                 | 
2ab88     40 09 90 FE |                 loc     pa, #mouse_limits
2ab8c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2ab90                 | 
2ab90                 |                 ' load xacc,yacc,zacc
2ab90     28 04 64 FD |                 setq    #3-1
2ab94     80 87 07 FB |                 rdlong  hr1,ptrb
2ab98                 |                 ' load limits and outptr
2ab98     28 04 64 FD |                 setq    #3-1
2ab9c     F6 73 03 FB |                 rdlong  htmp1,pa
2aba0                 | 
2aba0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2aba4     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2aba8     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2abac     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2abb0     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2abb4     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2abb8     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2abbc     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2abc0                 |               
2abc0                 | 
2abc0     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2abc4     07 70 67 F7 |                 signx   htmp, #7
2abc8     B8 87 03 F1 |                 add     hr1,htmp
2abcc     00 72 0F F2 |                 cmp     htmp1,#0 wz
2abd0     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2abd4     00 86 47 53 |         if_ne   fges    hr1,#0
2abd8                 | 
2abd8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2abdc     07 70 67 F7 |                 signx   htmp, #7
2abe0     B8 89 03 F1 |                 add     hr2,htmp
2abe4     00 74 0F F2 |                 cmp     htmp2,#0 wz
2abe8     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2abec     00 88 47 53 |         if_ne   fges    hr2,#0
2abf0                 |                 
2abf0                 | 
2abf0     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2abf4     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2abf8     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2abfc     B8 8B 03 A1 |         if_z    add     hr3,htmp
2ac00                 | 
2ac00     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2ac04     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2ac08                 | 
2ac08                 |                 ' write back accumulators
2ac08     28 04 64 FD |                 setq    #3-1
2ac0c     80 87 67 FC |                 wrlong  hr1,ptrb
2ac10                 |                 ' if outptr set, write X/Y words
2ac10     00 76 0F F2 |                 cmp htmp3,#0                    wz
2ac14     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2ac18     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2ac1c     2D 00 64 FD |                 ret
2ac20                 | end
2ac20                 | 
2ac20                 | '------------------------------------------------------------------------------
2ac20                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2ac20                 | '------------------------------------------------------------------------------
2ac20                 | ' On entry:
2ac20                 | ' On exit:
2ac20                 | '------------------------------------------------------------------------------
2ac20                 | if _HAVE_GAMEPAD
2ac20                 | hget_gp_in_report
2ac20     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2ac24     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2ac28                 | 
2ac28     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2ac2c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2ac30     00 90 E3 F8 |                 getbyte hpar3
2ac34     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2ac38     CF 02 A0 FD |                 call    #do_int_in
2ac3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2ac40     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2ac44                 | 
2ac44     00 90 0F F2 |                 cmp     hpar3, #0               wz
2ac48     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2ac4c                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2ac4c                 | 
2ac4c     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2ac50     00 70 E3 F8 |                 getbyte htmp                            ' |
2ac54     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2ac58     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2ac5c     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2ac60     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2ac64     B8 01 C0 F8 |                 setbyte htmp                            ' |
2ac68                 | 
2ac68                 | ' Note: the following code compares the current and previous reports
2ac68                 | ' and process the data if there are changes to ease the debug output.
2ac68                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2ac68                 | ' gpPreReport buffer.
2ac68                 | 
2ac68                 |                 ' ----- start of block to remove
2ac68                 |                 {
2ac68                 |                 }
2ac68                 |                 ' ----- end of block to remove
2ac68     F4 04 90 FE |                 loc pa,#hpad_translate
2ac6c     2A EC 63 FD |                 push pa
2ac70                 | 
2ac70                 |                 ' FALL THROUGH !!!!
2ac70                 | 
2ac70                 | '------------------------------------------------------------------------------
2ac70                 | ' Decode controller report
2ac70                 | '------------------------------------------------------------------------------
2ac70                 | hid_decode
2ac70                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2ac70     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2ac74     00 04 00 FF 
2ac78     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2ac7c                 | 
2ac7c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2ac80                 | 
2ac80     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2ac84     00 2A E3 F8 |                 getbyte hidr_type
2ac88     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2ac8c     34 02 90 AD |         if_z    jmp     #hpad_xinput
2ac90     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2ac94     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2ac98     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2ac9c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2aca0     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2aca4                 |                 
2aca4                 | 
2aca4                 | '------------------------------------------------------------------------------
2aca4                 | ' Handle HID controller (or mouse now
2aca4                 | ' On entry:
2aca4                 | '   ptrb - controller report
2aca4                 | '------------------------------------------------------------------------------
2aca4                 | hpad_hid
2aca4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2aca8     F7 F1 03 F6 |                 mov     ptra, pb
2acac     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2acb0     00 EC 03 F6 |                 mov     pa, 0-0
2acb4                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2acb4     19 2A 3B FF 
2acb8     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2acbc                 | 
2acbc                 | .next
2acbc     00 EC 5F F2 |                 cmps    pa, #0      wcz
2acc0     2D 00 7C ED |         if_be   ret     wcz
2acc4                 | 
2acc4     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2acc8     01 EC 87 F1 |                 sub     pa, #1
2accc     00 8E 07 F6 |                 mov     hpar2, #0
2acd0                 | 
2acd0     C6 71 03 F6 |                 mov     htmp, hpar1
2acd4     03 70 07 F5 |                 and     htmp, #$03
2acd8     01 70 0F F2 |                 cmp     htmp, #1    wz
2acdc     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2ace0     07 8E 67 A7 |         if_z    signx   hpar2,#7
2ace4     01 EC 87 A1 |         if_z    sub     pa, #1
2ace8     02 70 0F F2 |                 cmp     htmp, #2    wz
2acec     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2acf0     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2acf4     02 EC 87 A1 |         if_z    sub     pa, #2
2acf8     03 70 0F F2 |                 cmp     htmp, #3    wz
2acfc     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2ad00     04 EC 87 A1 |         if_z    sub     pa, #4
2ad04                 | 
2ad04     FC 8C 07 F5 |                 and     hpar1, #$FC
2ad08                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2ad08                 | 
2ad08     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2ad0c     0C 01 90 AD |         if_z    jmp     #.report_id
2ad10     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2ad14     24 01 90 AD |         if_z    jmp     #.usage_page
2ad18     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2ad1c     2C 01 90 AD |         if_z    jmp     #.usage
2ad20     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2ad24     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2ad28     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2ad2c     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2ad30     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2ad34     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2ad38     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2ad3c     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2ad40     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2ad44     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2ad48     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2ad4c     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2ad50     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2ad54     64 FF 9F 5D |         if_nz   jmp     #.next
2ad58                 | 
2ad58     D8 1D A7 FB |                 tjf     hidr_state,#.next
2ad5c                 | 
2ad5c     03 8E 07 F5 |                 and     hpar2, #$03
2ad60     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2ad64     18 00 90 5D |         if_nz   jmp     #.skip
2ad68                 | 
2ad68     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2ad6c     20 00 90 AD |         if_z    jmp     #.axes
2ad70     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2ad74     5C 00 90 AD |         if_z    jmp     #.hats
2ad78     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2ad7c     70 00 90 AD |         if_z    jmp     #.buttons
2ad80                 | .skip
2ad80     8F 71 03 F6 |                 mov     htmp, hidr_size
2ad84     90 71 03 FA |                 mul     htmp, hidr_count
2ad88     B8 23 03 F1 |                 add     hidr_offset, htmp
2ad8c     2C FF 9F FD |                 jmp     #.next
2ad90                 | .axes
2ad90                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2ad90     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2ad94     90 87 03 F6 |                 mov     hr1, hidr_count
2ad98                 | .l1
2ad98     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2ad9c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2ada0     04 03 B0 FD |                 call    #hpad_getbits
2ada4     64 03 B0 FD |                 call    #hpad_normalize
2ada8     06 84 1F F2 |                 cmp     hr0, #6         wcz
2adac     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2adb0     00 88 43 C8 |         if_b    getnib  hr2
2adb4     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2adb8     5F 01 20 C9 |         if_b    setword retval
2adbc     01 84 07 C1 |         if_b    add     hr0, #1
2adc0     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2adc4     F4 87 6F FB |                 djnz    hr1, #.l1
2adc8                 | 
2adc8     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2adcc     01 1C 07 F6 |                 mov     hidr_state, #1
2add0     E8 FE 9F FD |                 jmp     #.next
2add4                 | .hats
2add4                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2add4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2add8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2addc     C8 02 B0 FD |                 call    #hpad_getbits
2ade0     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2ade4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2ade8     01 1C 07 F6 |                 mov     hidr_state, #1
2adec     90 FF 9F FD |                 jmp     #.skip
2adf0                 | .buttons
2adf0                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2adf0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2adf4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2adf8     90 8F 03 FA |                 mul     hpar2, hidr_count
2adfc     A8 02 B0 FD |                 call    #hpad_getbits
2ae00     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2ae04     B8 BF 62 F0 |                 shl     retval, htmp
2ae08     5F 17 43 F5 |                 or      hidr_buttons, retval
2ae0c     90 71 03 F1 |                 add     htmp, hidr_count
2ae10     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2ae14     01 1C 07 F6 |                 mov     hidr_state, #1
2ae18     64 FF 9F FD |                 jmp     #.skip
2ae1c                 | .report_id
2ae1c     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2ae20     2D 00 7C 5D |         if_nz   ret     wcz
2ae24     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2ae28     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2ae2c     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2ae30     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2ae34     01 F2 87 51 |         if_nz   sub     ptrb,#1
2ae38     80 FE 9F FD |                 jmp     #.next
2ae3c                 | .usage_page
2ae3c     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2ae40     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2ae44     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2ae48     70 FE 9F FD |                 jmp     #.next
2ae4c                 | .usage
2ae4c     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2ae50     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2ae54     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2ae58     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ae5c     5C FE 9F AD |         if_z    jmp     #.next
2ae60     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2ae64     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2ae68     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2ae6c     4C FE 9F AD |         if_z    jmp     #.next
2ae70     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2ae74     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2ae78     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2ae7c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2ae80     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2ae84     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2ae88     10 00 90 AD |         if_z    jmp     #.usage_axis
2ae8c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2ae90     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2ae94     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2ae98     20 FE 9F FD |                 jmp     #.next
2ae9c                 | .usage_axis
2ae9c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2aea0     18 FE 9F CD |         if_b    jmp     #.next
2aea4     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2aea8     C7 01 00 F8 |                 setnib  hpar2
2aeac                 | 
2aeac     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2aeb0     C7 8F C3 F9 |                 decod   hpar2
2aeb4     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2aeb8                 | 
2aeb8     01 24 07 F1 |                 add     hidr_usage_idx, #1
2aebc     02 1C 07 F6 |                 mov     hidr_state, #2
2aec0     F8 FD 9F FD |                 jmp     #.next
2aec4                 | 
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | ' Handle XInput controller
2aec4                 | ' On entry:
2aec4                 | '   ptrb - controller report
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | '   Default implementation translates the report to a pseudo-defacto hid
2aec4                 | '   standard and jumps to hpad_translate for actions.
2aec4                 | '   Implementors may take specific actions for this kind of controller.
2aec4                 | '------------------------------------------------------------------------------
2aec4                 | hpad_xinput
2aec4     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2aec8     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2aecc     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2aed0     14 70 0F F2 |                 cmp     htmp, #$14      wz
2aed4     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2aed8                 | 
2aed8                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2aed8                 | 
2aed8     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2aedc     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2aee0                 | 
2aee0     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2aee4     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2aee8     5F BF 22 F6 |                 not     retval
2aeec     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2aef0     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2aef4     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2aef8     5F BF 22 F6 |                 not     retval
2aefc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2af00                 | 
2af00     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2af04     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2af08     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2af0c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2af10     F8 01 B0 FD |                 call    #hpad_normalize
2af14     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2af18     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2af1c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2af20     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2af24     E4 01 B0 FD |                 call    #hpad_normalize
2af28     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2af2c                 | 
2af2c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2af30     81 BF E6 FA |                 rdword  retval, ptrb[1]
2af34     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2af38     00 16 47 F4 |                 bitc    hidr_buttons, #0
2af3c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2af40     01 16 47 F4 |                 bitc    hidr_buttons, #1
2af44     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2af48     02 16 47 F4 |                 bitc    hidr_buttons, #2
2af4c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2af50     03 16 47 F4 |                 bitc    hidr_buttons, #3
2af54     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2af58     04 16 47 F4 |                 bitc    hidr_buttons, #4
2af5c     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2af60     05 16 47 F4 |                 bitc    hidr_buttons, #5
2af64     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2af68     08 16 47 F4 |                 bitc    hidr_buttons, #8
2af6c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2af70     09 16 47 F4 |                 bitc    hidr_buttons, #9
2af74     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2af78     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2af7c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2af80     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2af84     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2af88     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2af8c                 | 
2af8c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2af90     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2af94     7A BB 7A FF 
2af98     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2af9c     F9 FF 7F FF 
2afa0     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2afa4     B9 71 5F F9 |                 altgn   htmp, #htmp1
2afa8     00 70 43 F8 |                 getnib  htmp
2afac     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2afb0                 | 
2afb0     AC 01 90 FD |                 jmp     #hpad_translate
2afb4                 | 
2afb4                 | '------------------------------------------------------------------------------
2afb4                 | ' Handle PS3 controller
2afb4                 | ' On entry:
2afb4                 | '   ptrb - controller report
2afb4                 | '------------------------------------------------------------------------------
2afb4                 | '   Default implementation translates the report to a pseudo-defacto hid
2afb4                 | '   standard and jumps to hpad_translate for actions.
2afb4                 | '   Implementors may take specific actions for this kind of controller.
2afb4                 | '------------------------------------------------------------------------------
2afb4                 | hpad_ps3
2afb4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2afb8     01 70 0F F2 |                 cmp     htmp, #$01      wz
2afbc     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2afc0                 | 
2afc0                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2afc0                 | 
2afc0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2afc4     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2afc8     40 01 B0 FD |                 call    #hpad_normalize
2afcc     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2afd0     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2afd4     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2afd8     30 01 B0 FD |                 call    #hpad_normalize
2afdc     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2afe0     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2afe4     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2afe8     20 01 B0 FD |                 call    #hpad_normalize
2afec     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2aff0     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2aff4     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2aff8     10 01 B0 FD |                 call    #hpad_normalize
2affc     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2b000     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2b004     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2b008                 | 
2b008     08 8C 07 F6 |                 mov     hpar1, #8
2b00c     13 8E 07 F6 |                 mov     hpar2, #19
2b010     94 00 B0 FD |                 call    #hpad_getbits
2b014                 | 
2b014     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2b018     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2b01c     00 16 47 F4 |                 bitc    hidr_buttons, #0
2b020     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2b024     01 16 47 F4 |                 bitc    hidr_buttons, #1
2b028     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2b02c     02 16 47 F4 |                 bitc    hidr_buttons, #2
2b030     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2b034     03 16 47 F4 |                 bitc    hidr_buttons, #3
2b038     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2b03c     04 16 47 F4 |                 bitc    hidr_buttons, #4
2b040     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2b044     05 16 47 F4 |                 bitc    hidr_buttons, #5
2b048     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2b04c     06 16 47 F4 |                 bitc    hidr_buttons, #6
2b050     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2b054     07 16 47 F4 |                 bitc    hidr_buttons, #7
2b058     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2b05c     08 16 47 F4 |                 bitc    hidr_buttons, #8
2b060     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2b064     09 16 47 F4 |                 bitc    hidr_buttons, #9
2b068     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2b06c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2b070     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2b074     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2b078     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2b07c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2b080                 | 
2b080     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2b084     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2b088     09 FA 79 FF 
2b08c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2b090     FF FA 7F FF 
2b094     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2b098     B9 71 5F F9 |                 altgn   htmp, #htmp1
2b09c     00 70 43 F8 |                 getnib  htmp
2b0a0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2b0a4                 | 
2b0a4     B8 00 90 FD |                 jmp     #hpad_translate
2b0a8                 | 
2b0a8                 | '------------------------------------------------------------------------------
2b0a8                 | ' Read bits from report data buffer
2b0a8                 | '------------------------------------------------------------------------------
2b0a8                 | ' On entry:
2b0a8                 | '   PTRB - report buffer
2b0a8                 | '   hpar1 - start bit
2b0a8                 | '   hpar2 - number of bits
2b0a8                 | ' On exit:
2b0a8                 | '   retval - bits
2b0a8                 | '------------------------------------------------------------------------------
2b0a8                 | hpad_getbits
2b0a8     C6 71 03 F6 |                 mov     htmp, hpar1
2b0ac     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2b0b0     F9 71 03 F1 |                 add     htmp, ptrb
2b0b4     B8 BF 02 FB |                 rdlong  retval, htmp
2b0b8                 | 
2b0b8     C6 73 03 F6 |                 mov     htmp1, hpar1
2b0bc     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2b0c0     B9 BF 42 F0 |                 shr     retval, htmp1
2b0c4                 | 
2b0c4     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2b0c8     10 00 90 1D |         if_a    jmp     #.l1
2b0cc                 | 
2b0cc     C7 8F C3 F9 |                 decod   hpar2
2b0d0     01 8E 87 F1 |                 sub     hpar2, #1
2b0d4     C7 BF 02 F5 |                 and     retval, hpar2
2b0d8     2D 00 64 FD |                 ret
2b0dc                 | .l1
2b0dc     FF 7F 00 FF 
2b0e0     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2b0e4     03 70 07 F1 |                 add     htmp, #3
2b0e8     B8 75 03 FB |                 rdlong  htmp2, htmp
2b0ec     18 8E 87 F1 |                 sub     hpar2, #24
2b0f0     C7 8F C3 F9 |                 decod   hpar2
2b0f4     01 8E 87 F1 |                 sub     hpar2, #1
2b0f8     B9 75 43 F0 |                 shr     htmp2, htmp1
2b0fc     C7 75 03 F5 |                 and     htmp2, hpar2
2b100     18 74 67 F0 |                 shl     htmp2, #24
2b104     BA BF 42 F5 |                 or      retval, htmp2
2b108     2D 00 64 FD |                 ret
2b10c                 | 
2b10c                 | '------------------------------------------------------------------------------
2b10c                 | ' Normalize value to signed word (-32768 / 32767)
2b10c                 | '------------------------------------------------------------------------------
2b10c                 | ' On entry:
2b10c                 | '   retval - value to normalize
2b10c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2b10c                 | '   - or -
2b10c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2b10c                 | '   hidr_size - value bits length
2b10c                 | ' On exit:
2b10c                 | '   retval - normalized value
2b10c                 | '------------------------------------------------------------------------------
2b10c                 | hpad_normalize
2b10c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2b110     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2b114     2D 00 64 AD |         if_z    ret
2b118     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2b11c     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2b120     0F 72 77 F7 |                 signx   htmp1, #15      wc
2b124     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2b128     00 BE 66 C7 |         if_c    signx   retval, #0-0
2b12c     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2b130     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2b134     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2b138     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2b13c     B8 71 53 F6 |                 abs     htmp            wc
2b140     1F BE 0E F4 |                 testb   retval, #31     wz
2b144     5F BF 42 F6 |                 abs     retval
2b148     B8 BF 12 FD |                 qdiv    retval, htmp
2b14c     18 BE 62 FD |                 getqx   retval
2b150     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2b154     C0 FF 7F FF 
2b158     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2b15c     2D 00 64 FD |                 ret
2b160                 | 
2b160                 | '------------------------------------------------------------------------------
2b160                 | ' Perform controller actions
2b160                 | ' On entry:
2b160                 | '    hidr_id        report id
2b160                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2b160                 | '                      X = hidr_axis+0, #0
2b160                 | '                      Y = hidr_axis+0, #1
2b160                 | '                      Z = hidr_axis+1, #0
2b160                 | '                     RX = hidr_axis+1, #1
2b160                 | '                     RY = hidr_axis+2, #0
2b160                 | '                     RZ = hidr_axis+2, #1
2b160                 | '    hidr_buttons   buttons state (bits 0 to 31)
2b160                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2b160                 | '
2b160                 | '                     -------3 -------2 -------1 -------0 byte
2b160                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2b160                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2b160                 | '                                zyx||| |||||||| ++++++++ n. buttons
2b160                 | '                                |||||| ||||++++--------- n. axes
2b160                 | '                                |||||| ++++------------- n. hats
2b160                 | '                                ++++++------------------ valid axes
2b160                 | '------------------------------------------------------------------------------
2b160                 | hpad_translate
2b160                 | 
2b160                 | 
2b160                 |         if HAVE_HIDPAD
2b160     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2b164     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2b168     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2b16c     01 70 E7 F2 |                 cmpsub  htmp,#1
2b170     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2b174     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2b178     2D 00 7C 3D |         if_ae   ret     wcz
2b17c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2b180     B8 F3 03 F1 |                 add     ptrb,htmp
2b184     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2b188     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2b18c     28 0C 64 FD |                 setq    #7-1
2b190     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2b194                 |         end
2b194                 | 
2b194                 | 
2b194                 |         if EMUPAD_MAX_PLAYER > 0
2b194                 | .emupad_no_hat
2b194                 |         if EMUPAD_BT0_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT1_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT2_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT3_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT4_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT5_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT6_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT7_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT8_BIT >= 0
2b194                 |         end
2b194                 |         if EMUPAD_BT9_BIT >= 0
2b194                 |         end
2b194                 | .emupad_slot_over
2b194                 |         end
2b194                 | 
2b194                 |         if 0
2b194                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2b194                 | 
2b194                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2b194                 | 
2b194                 |         end
2b194     2D 00 64 FD |                 ret
2b198                 | end
2b198                 | 
2b198                 | if EMUPAD_MAX_PLAYER > 0
2b198                 | '------------------------------------------------------------------------------
2b198                 | ' Clear EmuPad state
2b198                 | '------------------------------------------------------------------------------
2b198                 | emupad_reset
2b198                 | 
2b198                 | '------------------------------------------------------------------------------
2b198                 | ' Get EmuPad Player number for current device (into retval)
2b198                 | ' Z flag is also set if current device is valid
2b198                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2b198                 | '------------------------------------------------------------------------------
2b198                 | emupad_getnum
2b198                 | .loop
2b198                 | '------------------------------------------------------------------------------
2b198                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2b198                 | '------------------------------------------------------------------------------
2b198                 | emupad_discon
2b198                 | .loop         
2b198                 |         
2b198                 |         ' FALL THROUGH!!!
2b198                 | 
2b198                 | '------------------------------------------------------------------------------
2b198                 | ' Update EmuPad reports (all of them...)
2b198                 | '------------------------------------------------------------------------------
2b198                 | emupad_write_reports
2b198                 | .devloop
2b198                 | 
2b198                 | end
2b198                 | 
2b198                 | 
2b198                 | '------------------------------------------------------------------------------
2b198                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2b198                 | '------------------------------------------------------------------------------
2b198                 | ' On entry:
2b198                 | ' On exit:
2b198                 | '------------------------------------------------------------------------------
2b198                 | hget_hub_status
2b198     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2b19c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2b1a0     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2b1a4     01 90 2F F9 |                 setword hpar3, #1, #1
2b1a8     CF 02 A0 FD |                 call    #do_int_in
2b1ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b1b0     0C 00 90 AD |         if_z    jmp     #.data
2b1b4     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2b1b8     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2b1bc     2D 00 64 FD |                 ret
2b1c0                 | .data
2b1c0     00 90 0F F2 |                 cmp     hpar3, #0               wz
2b1c4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2b1c8                 | 
2b1c8     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2b1cc     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2b1d0     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2b1d4     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2b1d8                 |                 debug(ubin_long(hub_status_chg))
2b1d8                 | 
2b1d8     01 5A 06 F6 |                 mov     hdev_port, #1
2b1dc                 | .loop
2b1dc     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2b1e0     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2b1e4     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2b1e8     F0 FF 9F 3D |         if_nc   jmp     #.loop
2b1ec     2D 00 64 FD |                 ret
2b1f0                 | 
2b1f0                 | hub_port_handler
2b1f0     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2b1f4     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b1f8     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b1fc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b200     55 02 A0 FD |                 call    #control_read
2b204     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2b208                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2b208                 | 
2b208     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2b20c     50 01 90 5D |         if_x0   jmp     #.other
2b210     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2b214     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2b218     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b21c     A0 02 A0 FD |                 call    #control_write
2b220     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2b224     7C 01 90 5D |         if_x0   jmp     #.disconnect
2b228     B0 99 02 F6 |                 mov     hctwait, _100ms_
2b22c     EF 02 A0 FD |                 call    #poll_waitx
2b230                 | 
2b230     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2b234     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2b238     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b23c     A0 02 A0 FD |                 call    #control_write
2b240                 | 
2b240     02 76 07 F6 |                 mov     htmp3, #2
2b244                 | .wait_reset
2b244     AC 99 02 F6 |                 mov     hctwait, _8ms_
2b248     EF 02 A0 FD |                 call    #poll_waitx
2b24c     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b250     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b254     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b258     55 02 A0 FD |                 call    #control_read
2b25c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2b260     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2b264     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2b268                 | 
2b268     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2b26c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2b270     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b274     A0 02 A0 FD |                 call    #control_write
2b278                 | 
2b278     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2b27c                 | .wait_recover
2b27c     A7 99 02 F6 |                 mov     hctwait, _1ms_
2b280     EF 02 A0 FD |                 call    #poll_waitx
2b284     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2b288                 | 
2b288     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2b28c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2b290     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2b294                 | 
2b294     00 08 00 FF 
2b298     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2b29c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2b2a0     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2b2a4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2b2a8     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2b2ac     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b2b0     48 01 90 5D |         if_nz   jmp     #.done
2b2b4                 | .get_dev_desc
2b2b4     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2b2b8     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2b2bc     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2b2c0     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2b2c4     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2b2c8     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2b2cc     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2b2d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b2d4     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b2d8     AC 99 02 F6 |                 mov     hctwait, _8ms_
2b2dc     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2b2e0     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2b2e4     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2b2e8     BE 00 A0 FD |                 call    #calc_crc5
2b2ec     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2b2f0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2b2f4     F7 AD C2 FA |                 rdbyte  total_data, pb
2b2f8     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2b2fc     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2b300     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b304     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2b308     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2b30c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2b310                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2b310     9F 99 02 F6 |                 mov     hctwait, _500us_
2b314     EF 02 A0 FD |                 call    #poll_waitx
2b318     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2b31c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2b320     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2b324     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2b328     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b32c     CC 00 90 5D |         if_nz   jmp     #.done
2b330     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2b334     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2b338     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2b33c     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2b340     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2b344     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2b348     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2b34c     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2b350     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2b354     A4 00 90 CD |         if_b    jmp     #.done
2b358     6C F0 BF FD |                 call    #hparse_con_desc
2b35c     9C 00 90 FD |                 jmp     #.done
2b360                 | 
2b360                 | .other
2b360     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2b364     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2b368     28 00 90 AD |         if_x1   jmp     #.reset_feature
2b36c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2b370     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2b374     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2b378     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2b37c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2b380     10 00 90 AD |         if_x1   jmp     #.reset_feature
2b384     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2b388     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2b38c     04 00 90 AD |         if_x1   jmp     #.reset_feature
2b390     68 00 90 FD |                 jmp     #.done
2b394                 | .reset_feature
2b394     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2b398     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b39c     A0 02 A0 FD |                 call    #control_write
2b3a0     58 00 90 FD |                 jmp     #.done
2b3a4                 | .disconnect
2b3a4                 | 
2b3a4     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2b3a8     00 70 E3 F8 |                 getbyte htmp
2b3ac     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2b3b0     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2b3b4     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2b3b8     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2b3bc     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2b3c0     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2b3c4                 |         if EMUPAD_MAX_PLAYER > 0
2b3c4                 |         end
2b3c4                 |         if HAVE_MOUSE
2b3c4     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2b3c8     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2b3cc     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2b3d0                 |         end
2b3d0                 |         if HAVE_HIDPAD
2b3d0     14 0A F0 FE |                 loc ptrb,#hidpad_report
2b3d4     2D 71 03 F6 |                 mov htmp,hdev_port
2b3d8     01 70 E7 F2 |                 cmpsub htmp,#1
2b3dc     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2b3e0     B8 F3 03 F1 |                 add ptrb,htmp
2b3e4     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2b3e8     80 01 6C FC |                 wrlong #0,ptrb
2b3ec                 |         end
2b3ec                 | 
2b3ec     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2b3f0     00 00 C4 F8 |                 setbyte #0
2b3f4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2b3f8     00 00 04 F6 |                 mov     0-0, #0
2b3fc                 | 
2b3fc                 | .done
2b3fc     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2b400     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2b404     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2b408     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2b40c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2b410     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2b414                 | 
2b414     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2b418     27 EF 03 F6 |                 mov     pb, urx_buff_p
2b41c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2b420     55 02 A0 FD |                 call    #control_read
2b424     00 69 06 FB |                 rdlong  hub_port_status, ptra
2b428                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2b428     2D 00 64 FD |                 ret
2b42c                 | 
2b42c                 | '------------------------------------------------------------------------------
2b42c                 | ' Partially populated SETUP packets
2b42c                 | '------------------------------------------------------------------------------
2b42c     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2b42d     06          |                 byte    REQ_GET_DESC
2b42e     00 01       |                 word    TYPE_DEVICE << 8
2b430     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b432     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b434     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2b435     06          |                 byte    REQ_GET_DESC
2b436     00 02       |                 word    TYPE_CONFIG << 8
2b438     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b43a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b43c     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2b43d     09          |                 byte    REQ_SET_CONFIG
2b43e     00 00       |                 word    0       ' Configuration value
2b440     00 00       |                 word    0       ' Zero
2b442     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2b444     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2b445     05          |                 byte    REQ_SET_ADDR
2b446     00 00       |                 word    0       ' Zero
2b448     00 00       |                 word    0       ' Zero
2b44a     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2b44c                 | '------------------------------------------------------------------------------
2b44c                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2b44c                 | ' wValue field dictates which protocol should be used.
2b44c                 | '
2b44c                 | ' When initialized, all devices default to report protocol. However the host
2b44c                 | ' should not make any assumptions about the device state and should set the
2b44c                 | ' desired protocol whenever initializing a device.
2b44c                 | '------------------------------------------------------------------------------
2b44c     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b44d     0B          |                 byte    HID_SET_PROTO
2b44e     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2b450                 |                                                 ' (HID 1.11 Section 7.2.6).
2b450     00 00       |                 word    0               ' Interface index number.
2b452     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2b454                 | '------------------------------------------------------------------------------
2b454     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b455     0A          |                 byte    HID_SET_IDLE
2b456     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2b458                 |                                         ' reporting until a change is detected in the report data
2b458                 | 
2b458                 |                                         ' (HID 1.11 Section 7.2.4).
2b458     00 00       |                 word    0       ' Interface index number.
2b45a     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2b45c     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2b45d     09          |                 byte    HID_SET_REPORT
2b45e     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2b460                 |                                         ' (HID 1.11 Section 7.2.2).
2b460     00 00       |                 word    0       ' Interface index number.
2b462     00 00       |                 word    0       ' Size of the report, in bytes.
2b464     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2b465     06          |                 byte    REQ_GET_DESC
2b466     00 22       |                 word    TYPE_REPORT << 8
2b468     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b46a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b46c                 | '------------------------------------------------------------------------------
2b46c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2b46d     06          |                 byte    REQ_GET_DESC
2b46e     00 29       |                 word    TYPE_HUB << 8
2b470     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2b472     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b474     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2b475     03          |                 byte    REQ_SET_FEATURE
2b476     00 00       |                 word    0       ' port power
2b478     01 00       |                 word    1       ' Port index number (1+)
2b47a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b47c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2b47d     01          |                 byte    REQ_CLEAR_FEATURE
2b47e     00 00       |                 word    0       ' port power
2b480     01 00       |                 word    1       ' Port index number (1+)
2b482     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2b484     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2b485     00          |                 byte    REQ_GET_STATUS
2b486     00 00       |                 word    0
2b488     01 00       |                 word    1       ' Port index number (1+)
2b48a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2b48c                 | '------------------------------------------------------------------------------
2b48c                 | if _HAVE_GAMEPAD
2b48c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2b490                 | ps3_command_buff
2b490     00 00 00 00 
2b494     00          |                 byte    $00, $00, $00, $00, $00
2b495     00 00 00 00 
2b499     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2b49a     FF 27 10 00 
2b49e     32          |                 byte    $FF, $27, $10, $00, $32
2b49f     FF 27 10 00 
2b4a3     32          |                 byte    $FF, $27, $10, $00, $32
2b4a4     FF 27 10 00 
2b4a8     32          |                 byte    $FF, $27, $10, $00, $32
2b4a9     FF 27 10 00 
2b4ad     32          |                 byte    $FF, $27, $10, $00, $32
2b4ae     00 00 00 00 
2b4b2     00          |                 byte    $00, $00, $00, $00, $00
2b4b3     00 00 00 00 
2b4b7     00          |                 byte    $00, $00, $00, $00, $00
2b4b8     00 00 00 00 
2b4bc     00          |                 byte    $00, $00, $00, $00, $00
2b4bd     00 00 00    |                 byte    $00, $00, $00
2b4c0                 | '------------------------------------------------------------------------------
2b4c0     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2b4c3                 |                                         ' 0x01 All blinking
2b4c3                 |                                         ' 0x02 1 flashes, then on
2b4c3                 |                                         ' 0x03 2 flashes, then on
2b4c3                 |                                         ' 0x04 3 flashes, then on
2b4c3                 |                                         ' 0x05 4 flashes, then on
2b4c3                 |                                         ' 0x06 1 on
2b4c3                 |                                         ' 0x07 2 on
2b4c3                 |                                         ' 0x08 3 on
2b4c3                 |                                         ' 0x09 4 on
2b4c3                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2b4c3                 |                                         ' 0x0B Blinking*
2b4c3                 |                                         ' 0x0C Slow blinking*
2b4c3                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2b4c3     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2b4c6     00          |                 byte    $00             ' Left rumble
2b4c7     00          |                 byte    $00             ' Right rumble
2b4c8     00 00 00    |                 byte    $00, $00, $00
2b4cb     00          | end
2b4cc                 | alignl
2b4cc                 | 
2b4cc                 | if HAVE_MOUSE
2b4cc     00 00 00 00 
2b4d0     00 00 00 00 | mouse_limits long 0[2]
2b4d4     00 00 00 00 | mouse_outptr long 0
2b4d8                 | end
2b4d8                 | 
2b4d8                 | if KEYQUEUE_SIZE > 0
2b4d8     00          | keyq_head byte 0
2b4d9     00          | keyq_tail byte 0
2b4da     00 00 00 00 
      ...             
2b6d6     00 00 00 00 
2b6da     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2b6dc                 | alignl
2b6dc                 | end
2b6dc                 | 
2b6dc                 | if EMUPAD_MAX_PLAYER > 0
2b6dc                 | emupad_rule_buffer
2b6dc                 | if EMUPAD_BUILTIN_RULES
2b6dc                 | file "padmap_builtin.dat"
2b6dc                 | end
2b6dc                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2b6dc                 | '' Default rule directly follows!
2b6dc                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2b6dc                 | end
2b6dc                 | 
2b6dc                 | '------------------------------------------------------------------------------
2b6dc                 | ' The USB data cache area gets zero-filled at every device disconnect
2b6dc                 | '------------------------------------------------------------------------------
2b6dc                 | usb_cache_start
2b6dc                 | 
2b6dc                 | ' HID descriptor and report buffers
2b6dc                 | if !!OVERLAP_MEMORY
2b6dc     00 00 00 00 
      ...             
2bdd4     00 00 00 00 
2bdd8     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2bddc                 | end
2bddc     00 00 00 00 
2bde0     00 00 00 00 | hkbd_report     byte    0[8]
2bde4     00 00 00 00 | hkbd_led_rep    byte    0
2bde8                 | alignl
2bde8                 | 
2bde8                 | if HAVE_HIDPAD
2bde8     00 00 00 00 
      ...             
2bea4     00 00 00 00 
2bea8     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2beac                 | end
2beac                 | 
2beac                 | ' HUB descriptor
2beac     00          | hub_descr       byte    0   ' bDescLength
2bead     00          |                 byte    0   ' bDescriptorType
2beae     00          |                 byte    0   ' bNbrPorts
2beaf     00 00       |                 word    0   ' wHubCharacteristics
2beb1     00          |                 byte    0   ' bPwrOn2PwrGood
2beb2     00          |                 byte    0   ' bHubContrCurrent
2beb3     00          |                 byte    0   ' DeviceRemoveable
2beb4     00          |                 byte    0   ' PortPwrCtrlMask
2beb5                 | 
2beb5                 | usb_cache_end
2beb5                 | 
2beb5                 | if HAVE_MOUSE
2beb5     00 00 00 00 | mouse_xacc      long 0
2beb9     00 00 00 00 | mouse_yacc      long 0
2bebd     00 00 00 00 | mouse_zacc      long 0
2bec1     00          | mouse_bstate    byte 0
2bec2     00          | mouse_lpending  byte 0
2bec3     00          | mouse_rpending  byte 0
2bec4     00          | mouse_mpending  byte 0
2bec5     00          | mouse_lock      byte 0
2bec6     00 00 00    |                 byte 0[3] ' padding
2bec9                 | end
2bec9                 | 
2bec9     00 00 00 00 
      ...             
2bf41     00 00 00 00 
2bf45     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2bf49     00 00 00 00 
2bf4d     00 00 00 00 
2bf51     00 00 00 00 
2bf55     00 00 00 00 
2bf59     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2bf5b     00 00 00 00 
      ...             
2c053     00 00 00 00 
2c057     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2c05b                 | 
2c05b     00          | driver_cog      byte    0                       ' Current driver cog + 1
2c05c                 | 	alignl
2c05c                 | _Audio093b_8_sc_spin2_dat_
2c05c                 | 
2c05c                 | audio       org     0
2c05c                 | 
2c05c     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2c060     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2c064     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2c068                 | 
2c068     01 EC 63 FD |             cogid   pa                   ' compute cogid
2c06c     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2c070     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2c074     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2c078                 | 
2c078     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2c07c     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2c080     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2c084     0F CA 05 FC |             wrpin   dac,#right
2c088     0F BE 1C FC |             wxpin   #95,#right    
2c08c     41 9C 64 FD |             dirh    #left addpins 1
2c090     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2c094     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2c098     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2c09c                 |             
2c09c                 | '---------------------------------------------------------------------------------        
2c09c                 | '----------------- The main loop -------------------------------------------------
2c09c                 | '---------------------------------------------------------------------------------
2c09c                 | 
2c09c     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2c0a0     10 00 90 CD |       if_c  jmp     #loop1
2c0a4                 |   
2c0a4     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2c0a8     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2c0ac     B1 00 80 F1 |             sub     0-0,a40000000
2c0b0     FD A9 6D FB |             djnz    cn,#p402
2c0b4                 |     
2c0b4     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2c0b8     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2c0bc     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2c0c0     01 A8 05 C6 |     if_c    mov     cn,#1
2c0c4     B6 AA 39 F3 |             fle     ct,time3 wcz
2c0c8     02 A8 05 C6 |     if_c    mov     cn,#2     
2c0cc     B7 AA 39 F3 |             fle     ct,time4 wcz
2c0d0     03 A8 05 C6 |     if_c    mov     cn,#3
2c0d4     B8 AA 39 F3 |             fle     ct,time5 wcz
2c0d8     04 A8 05 C6 |     if_c    mov     cn,#4
2c0dc     B9 AA 39 F3 |             fle     ct,time6 wcz
2c0e0     05 A8 05 C6 |     if_c    mov     cn,#5
2c0e4     BA AA 39 F3 |             fle     ct,time7 wcz
2c0e8     06 A8 05 C6 |     if_c    mov     cn,#6
2c0ec     BB AA 39 F3 |             fle     ct,time8 wcz
2c0f0     07 A8 05 C6 |     if_c    mov     cn,#7
2c0f4                 | 
2c0f4                 | 
2c0f4                 | '----------------------------------------------------------------------------------
2c0f4                 | '------------- Compute channel samples --------------------------------------------
2c0f4                 | '----------------------------------------------------------------------------------
2c0f4                 | 
2c0f4                 | 
2c0f4     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2c0f8     05 78 65 F0 |             shl     channeladd,#5
2c0fc     BC F0 03 F1 |             add     ptra,channeladd
2c100                 | 
2c100     28 0E 64 FD |             setq    #7                        ' read parameters
2c104     00 8F 05 FB |             rdlong  pointer0,ptra
2c108                 | '            testb   command0,#29 wz
2c108                 | '    if_nz   jmp     #p408
2c108                 | '    	    getword envptr,command0,#0
2c108                 | '    	    getbyte envspeed,command0,#2
2c108                 | '    	    jmp     #p404                     'if envelope then no sample rate
2c108                 |     	    
2c108     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2c10c     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2c110     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2c114     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2c118     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2c11c     00 7C 0D F2 |             cmp     qq,#0 wz                         
2c120     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2c124     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2c128                 |             
2c128     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2c12c     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2c130     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2c134                 | 
2c134                 | 
2c134     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2c138     C8 B0 39 F9 |             getword oldrs,sample0,#1
2c13c     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2c140     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2c144     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2c148     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2c14c                 | 
2c14c     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2c150     00 AC 01 F6 |             mov     dt0,0-0    
2c154     B3 AC 81 F1 |             sub     dt0,time0
2c158                 |             
2c158     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2c15c     CF 00 00 F1 |             add     0-0,afreq0  	
2c160                 | 
2c160     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2c164     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2c168     08 8E 45 F0 |             shr     pointer0,#8
2c16c                 |          
2c16c     1F 92 0D F4 |             testb   sstart0,#31 wz            
2c170     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2c174     1C 92 0D F4 |             testb   sstart0,#28 wz            
2c178     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2c17c                 |             
2c17c     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2c180     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2c184     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2c188                 |             
2c188     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2c18c     C9 7C 01 F1 |             add     qq,sstart0            
2c190                 | 
2c190                 | 
2c190                 | 
2c190     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2c194     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2c198     04 01 B0 1D |     if_gt   call    #cache_read
2c19c                 |          
2c19c                 |          
2c19c                 |  
2c19c                 |          
2c19c     1F 92 0D F4 |             testb   sstart0,#31 wz 
2c1a0     08 7E 65 50 |     if_nz   shl     spl,#8
2c1a4     08 8E 65 50 |     if_nz   shl     pointer0,#8
2c1a8     07 8E 65 A0 |     if_z    shl     pointer0,#7
2c1ac     1C 92 0D F4 |             testb   sstart0,#28 wz            
2c1b0     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2c1b4     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2c1b8                 |     
2c1b8                 | 
2c1b8     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2c1bc     00 7E 01 F6 |             mov     spl,0-0
2c1c0                 |  
2c1c0     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2c1c4     00 B2 01 F6 |             mov     ls0,0-0
2c1c8     20 00 00 FF 
2c1cc     00 7C 05 F6 |             mov     qq,##16384
2c1d0     D2 7C 81 F1 |             sub     qq,apan0
2c1d4     BE 7E 31 FA |             scas    spl,qq
2c1d8     00 B4 01 F6 |             mov     rs0, 0-0
2c1dc                 | 
2c1dc     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2c1e0     DA B8 01 F1 |             add     rs,rs0
2c1e4     D7 B6 81 F1 |             sub     ls,oldls
2c1e8     D9 B6 01 F1 |             add     ls,ls0
2c1ec                 |    
2c1ec     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2c1f0     D9 90 21 F9 |             setword sample0,ls0,#0
2c1f4                 |             
2c1f4     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2c1f8     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2c1fc     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2c200     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2c204     04 00 00 AF 
2c208     00 68 05 A1 |     if_z    add     time1,##2048
2c20c     B4 6A 01 A6 |     if_z    mov     time2,time1
2c210     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2c214                 |             
2c214     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2c218     00 8F 65 FC |             wrlong  pointer0,ptra
2c21c     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2c220                 |                       
2c220     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2c224     FF 7B 25 A7 |     if_z    decmod  front, #511          
2c228                 |          
2c228     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2c22c     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2c230     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2c234     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2c238                 | 	    
2c238                 | 		    
2c238     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2c23c     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2c240     D8 BC 01 F6 |             mov     newsample, oldrs       
2c244                 | 
2c244     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2c248     D6 66 01 F1 |             add     time0,dt0    
2c24c                 |                                      
2c24c     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2c250     60 FE 9F AD |     if_z    jmp     #loop1
2c254     D6 7C 01 F6 |             mov     qq,dt0
2c258                 |   
2c258     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2c25c     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2c260     F4 FF 9F AD |     if_e    jmp     #p301    
2c264                 | 		
2c264     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2c268     20 00 90 AD |     if_z    jmp #p302	   
2c26c                 |  
2c26c                 |  
2c26c     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2c270     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2c274     02 C6 65 C0 |     if_c    shl scptr2,#2
2c278     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2c27c     60 C6 65 FC |             wrlong scptr2,#$60
2c280     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2c284     01 00 00 CF 
2c288     7F C4 05 C7 |     if_c    incmod scptr,##639
2c28c                 | 			    
2c28c     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2c290     00 00 00 FF 
2c294     FF 7B 05 F7 |             incmod  front, ##511
2c298     EF 7D 6D FB |             djnz    qq,#p301
2c29c                 |             
2c29c     FC FD 9F FD |             jmp     #loop            'loop
2c2a0                 | 
2c2a0                 | '----------------------------------------------------------------------------------
2c2a0                 | '------------- This is the end of the main loop -----------------------------------
2c2a0                 | '----------------------------------------------------------------------------------
2c2a0                 | 
2c2a0                 | '----------------------------------------------------------------------------------
2c2a0                 | '------------- PSRAM cache ----------- --------------------------------------------
2c2a0                 | '----------------------------------------------------------------------------------
2c2a0                 | 
2c2a0                 | ' There are 8 cache pointers for 8 channels
2c2a0                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2c2a0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2c2a0                 | 
2c2a0                 | 
2c2a0     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2c2a4                 |             
2c2a4     BE E8 01 F6 | 	    mov     addrhi,qq		
2c2a8     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2c2ac     E8 A8 95 F9 | 	    alts    cn,#cache1            
2c2b0     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2c2b4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2c2b8                 | 	
2c2b8     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2c2bc     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2c2c0     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2c2c4     08 E0 65 F0 | 	    shl     cmd,#8
2c2c8     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2c2cc     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2c2d0     08 E2 65 F0 |             shl     hubaddr,#8                  '
2c2d4     E7 E2 01 F1 |             add     hubaddr,hubptr 
2c2d8     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2c2dc     28 04 64 FD |             setq    #2                          ' write 3 longs
2c2e0     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2c2e4     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2c2e8     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2c2ec                 |             
2c2ec                 | 	
2c2ec     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2c2f0     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2c2f4     E7 7C 01 F1 | 	    add     qq,hubptr
2c2f8     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2c2fc     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2c300                 |           
2c300                 | 
2c300                 | '--------------------------------------------------------------------------
2c300                 | '------ Interrupt service -------------------------------------------------
2c300                 | '------ Output the sample, get the next one if exists ---------------------
2c300                 | '--------------------------------------------------------------------------
2c300                 | 
2c300     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2c304     0F 88 25 FC |             wypin   rsample,#right       '4
2c308     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2c30c     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2c310     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2c314     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2c318     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2c31c                 |     
2c31c     F5 FF 3B FB |             reti1                        '17/19 
2c320                 |           
2c320                 | '---------------------------------------------------------------------------
2c320                 | '-------- End of interrupt -------------------------------------------------
2c320                 | '---------------------------------------------------------------------------    
2c320                 | 
2c320                 | 
2c320                 | '---------------------------------------------------------------------------
2c320                 | '------- Variables ---------------------------------------------------------
2c320                 | '---------------------------------------------------------------------------
2c320                 | 
2c320                 | ' constants
2c320                 | 
2c320     00 00 00 40 | a40000000   long $40000000
2c324     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2c328                 | 
2c328                 | ' Time variables
2c328                 | 
2c328     00 00 00 00 | time0       long 0    ' Global sample computing time
2c32c     01 00 00 00 | time1       long 1    ' Local channels time
2c330     02 00 00 00 | time2       long 2
2c334     03 00 00 00 | time3       long 3
2c338     04 00 00 00 | time4       long 4
2c33c     05 00 00 00 | time5       long 5
2c340     06 00 00 00 | time6       long 6
2c344     07 00 00 00 | time7       long 7
2c348     08 00 00 00 | time8       long 8
2c34c                 | 
2c34c     00 00 00 00 | channeladd long 0
2c350                 | 
2c350     00 00 00 00 | front       long 0
2c354                 | 
2c354                 | ' temporary variables 
2c354     00 00 00 00 | qq          long 0
2c358     00 00 00 00 | spl         long 0
2c35c     00 00 00 00 | zero        long 0
2c360     00 00 00 00 | mailbox     long 0
2c364     00 00 00 00 | mailbox2 long 0
2c368                 | 
2c368                 | ' Interrupt ISR variables
2c368                 | 
2c368     00 00 00 00 | lsample     long 0
2c36c     00 00 00 00 | rsample     long 0
2c370     00 00 00 00 | lsnext      long 0
2c374     00 00 00 00 | rsnext      long 0 
2c378                 | 
2c378                 | ' channel parameter block
2c378                 | 
2c378     00 00 00 00 | pointer0    long 0     
2c37c     00 00 00 00 | sample0     long 0
2c380     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2c384     00 00 00 00 | lstart0     long 0
2c388     00 00 00 00 | lend0       long 0
2c38c     00 00 00 00 | volpan0     long 0
2c390     00 00 00 00 | freqskip0   long 0
2c394     00 00 00 00 | command0    long 0
2c398                 | 
2c398     00 00 00 00 | afreq0      long 0
2c39c     00 00 00 00 | askip0      long 0
2c3a0     00 00 00 00 | avol0       long 0
2c3a4     00 00 00 00 | apan0       long 0
2c3a8                 | 
2c3a8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2c3ac     00 00 00 00 | cn          long 0
2c3b0     00 00 00 00 | ct          long 0
2c3b4     00 00 00 00 | dt0         long 0
2c3b8                 | 
2c3b8                 | ' Samples
2c3b8     00 00 00 00 | oldls       long 0
2c3bc     00 00 00 00 | oldrs       long 0
2c3c0                 | 
2c3c0     00 00 00 00 | ls0         long 0
2c3c4     00 00 00 00 | rs0         long 0
2c3c8                 | 
2c3c8     00 00 00 00 | ls          long 0    
2c3cc     00 00 00 00 | rs          long 0
2c3d0                 | 
2c3d0     00 00 00 00 | oldsample   long 0
2c3d4     00 00 00 00 | newsample   long 0
2c3d8                 | 
2c3d8     00 00 00 00 | nrsample    long 0
2c3dc     00 00 00 00 | nlsample    long 0
2c3e0                 | 
2c3e0     00 00 00 00 | scbase long 0
2c3e4     00 00 00 00 | scptr long 0
2c3e8     00 00 00 00 | scptr2 long 0
2c3ec     00 00 00 00 | scope long 0
2c3f0                 | 
2c3f0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2c3f4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2c3f8                 | 
2c3f8     00 18 07 00 | hubptr      long $71800
2c3fc     00 00 00 00 | cache1      long 0
2c400     00 00 00 00 | cache2      long 0
2c404     00 00 00 00 | cache3      long 0
2c408     00 00 00 00 | cache4      long 0
2c40c     00 00 00 00 | cache5      long 0
2c410     00 00 00 00 | cache6      long 0
2c414     00 00 00 00 | cache7      long 0
2c418     00 00 00 00 | cache8      long 0
2c41c                 | 
2c41c                 | 
2c41c     00 00 00 00 | cmd         long 0
2c420     00 00 00 00 | hubaddr     long 0
2c424     00 01 00 00 | count       long 256
2c428     00 00 00 00 | addrlo long 0
2c42c     00 00 00 00 | addrhi long 0
2c430     00 00 00 00 | pointer00 long 0
2c434     00 00 00 00 
2c438     00 00 00 00 | null  			long 	0,0           ' for channel reset
2c43c                 | 	alignl
2c43c                 | __system__dat_
2c43c     00 00 00 00 
2c440     00 00 00 00 | 	byte	$00[8]
2c444     03 00 00 00 
2c448     00 00 00 00 
2c44c     00 00 00 00 
2c450     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c454     00 00 00 00 
      ...             
2c6e0     00 00 00 00 
2c6e4     00 00 00 00 | 	byte	$00[660]
2c6e8     00 00 10 05 | 	long	(81 {__system____root_opendir})<<20
2c6ec     00 00 20 05 | 	long	(82 {__system____root_closedir})<<20
2c6f0     00 00 30 05 | 	long	(83 {__system____root_readdir})<<20
2c6f4     00 00 40 05 | 	long	(84 {__system____root_stat})<<20
2c6f8     00 00 00 00 
2c6fc     00 00 00 00 
2c700     00 00 00 00 
2c704     00 00 00 00 
2c708     00 00 00 00 
2c70c     00 00 00 00 
2c710     00 00 00 00 | 	byte	$00[28]
2c714     7C C7 02 00 | 	long	@@@__system__dat_ + 832
2c718     7F C7 02 00 | 	long	@@@__system__dat_ + 835
2c71c     A0 C7 02 00 | 	long	@@@__system__dat_ + 868
2c720     B9 C7 02 00 | 	long	@@@__system__dat_ + 893
2c724     D4 C7 02 00 | 	long	@@@__system__dat_ + 920
2c728     EE C7 02 00 | 	long	@@@__system__dat_ + 946
2c72c     FE C7 02 00 | 	long	@@@__system__dat_ + 962
2c730     10 C8 02 00 | 	long	@@@__system__dat_ + 980
2c734     22 C8 02 00 | 	long	@@@__system__dat_ + 998
2c738     34 C8 02 00 | 	long	@@@__system__dat_ + 1016
2c73c     40 C8 02 00 | 	long	@@@__system__dat_ + 1028
2c740     51 C8 02 00 | 	long	@@@__system__dat_ + 1045
2c744     65 C8 02 00 | 	long	@@@__system__dat_ + 1065
2c748     6F C8 02 00 | 	long	@@@__system__dat_ + 1075
2c74c     7F C8 02 00 | 	long	@@@__system__dat_ + 1091
2c750     8E C8 02 00 | 	long	@@@__system__dat_ + 1106
2c754     A4 C8 02 00 | 	long	@@@__system__dat_ + 1128
2c758     BD C8 02 00 | 	long	@@@__system__dat_ + 1153
2c75c     D1 C8 02 00 | 	long	@@@__system__dat_ + 1173
2c760     DF C8 02 00 | 	long	@@@__system__dat_ + 1187
2c764     F3 C8 02 00 | 	long	@@@__system__dat_ + 1207
2c768     FF C8 02 00 | 	long	@@@__system__dat_ + 1219
2c76c     11 C9 02 00 | 	long	@@@__system__dat_ + 1237
2c770     29 C9 02 00 | 	long	@@@__system__dat_ + 1261
2c774     3B C9 02 00 | 	long	@@@__system__dat_ + 1279
2c778     4E C9 02 00 | 	long	@@@__system__dat_ + 1298
2c77c     4F 4B 00 4E 
2c780     75 6D 65 72 
2c784     69 63 61 6C 
2c788     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2c78c     75 6D 65 6E 
2c790     74 20 6F 75 
2c794     74 20 6F 66 
2c798     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2c79c     61 69 6E 00 
2c7a0     52 65 73 75 
2c7a4     6C 74 20 6E 
2c7a8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2c7ac     65 70 72 65 
2c7b0     73 65 6E 74 
2c7b4     61 62 6C 65 
2c7b8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2c7bc     65 67 61 6C 
2c7c0     20 6D 75 6C 
2c7c4     74 69 62 79 
2c7c8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2c7cc     65 71 75 65 
2c7d0     6E 63 65 00 
2c7d4     4E 6F 20 73 
2c7d8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2c7dc     66 69 6C 65 
2c7e0     20 6F 72 20 
2c7e4     64 69 72 65 
2c7e8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2c7ec     79 00 42 61 
2c7f0     64 20 66 69 
2c7f4     6C 65 20 6E 
2c7f8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2c7fc     72 00 50 65 
2c800     72 6D 69 73 
2c804     73 69 6F 6E 
2c808     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2c80c     69 65 64 00 
2c810     4E 6F 74 20 
2c814     65 6E 6F 75 
2c818     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2c81c     65 6D 6F 72 
2c820     79 00 54 65 
2c824     6D 70 6F 72 
2c828     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2c82c     66 61 69 6C 
2c830     75 72 65 00 
2c834     46 69 6C 65 
2c838     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2c83c     73 74 73 00 
2c840     49 6E 76 61 
2c844     6C 69 64 20 
2c848     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2c84c     6D 65 6E 74 
2c850     00 54 6F 6F 
2c854     20 6D 61 6E 
2c858     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2c85c     65 6E 20 66 
2c860     69 6C 65 73 
2c864     00 49 2F 4F 
2c868     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2c86c     6F 72 00 4E 
2c870     6F 74 20 61 
2c874     20 64 69 72 
2c878     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2c87c     72 79 00 49 
2c880     73 20 61 20 
2c884     64 69 72 65 
2c888     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2c88c     79 00 52 65 
2c890     61 64 20 6F 
2c894     6E 6C 79 20 
2c898     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2c89c     20 73 79 73 
2c8a0     74 65 6D 00 
2c8a4     46 75 6E 63 
2c8a8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2c8ac     20 6E 6F 74 
2c8b0     20 69 6D 70 
2c8b4     6C 65 6D 65 
2c8b8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2c8bc     00 44 69 72 
2c8c0     65 63 74 6F 
2c8c4     72 79 20 6E 
2c8c8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2c8cc     6D 70 74 79 
2c8d0     00 4E 61 6D 
2c8d4     65 20 74 6F 
2c8d8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2c8dc     6E 67 00 44 
2c8e0     65 76 69 63 
2c8e4     65 20 6E 6F 
2c8e8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2c8ec     65 6B 61 62 
2c8f0     6C 65 00 42 
2c8f4     61 64 20 61 
2c8f8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2c8fc     73 73 00 42 
2c900     72 6F 6B 65 
2c904     6E 20 63 6F 
2c908     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2c90c     74 69 6F 6E 
2c910     00 44 65 76 
2c914     69 63 65 20 
2c918     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2c91c     65 73 6F 75 
2c920     72 63 65 20 
2c924     62 75 73 79 
2c928     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2c92c     73 73 20 64 
2c930     65 76 69 63 
2c934     65 20 6C 69 
2c938     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2c93c     6F 20 73 70 
2c940     61 63 65 20 
2c944     6F 6E 20 64 
2c948     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2c94c     65 00 55 6E 
2c950     6B 6E 6F 77 
2c954     6E 20 65 72 
2c958     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2c95c     00 00 00 00 
2c960     00 00 00 00 | 	byte	$00[8]
2c964     05 00 00 00 
2c968     00 00 00 00 
2c96c     00 00 00 00 
2c970     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c974     00 00 00 00 | 	byte	$00, $00, $00, $00
2c978     00 00 90 06 | 	long	(105 {__system___tx})<<20
2c97c     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2c980     00 00 00 00 | 	byte	$00, $00, $00, $00
2c984     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0505})<<20
2c988     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0506})<<20
2c98c     00 00 00 00 
2c990     00 00 00 00 | 	byte	$00[8]
2c994     01 00 00 00 
2c998     06 00 00 00 
2c99c     00 00 00 00 
2c9a0     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c9a4     00 00 00 00 
2c9a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2c9ac     00 00 90 06 | 	long	(105 {__system___tx})<<20
2c9b0     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2c9b4     00 00 00 00 | 	byte	$00, $00, $00, $00
2c9b8     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0505})<<20
2c9bc     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0506})<<20
2c9c0     00 00 00 00 
2c9c4     00 00 00 00 | 	byte	$00[8]
2c9c8     01 00 00 00 
2c9cc     06 00 00 00 
2c9d0     00 00 00 00 
2c9d4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2c9d8     00 00 00 00 
2c9dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2c9e0     00 00 90 06 | 	long	(105 {__system___tx})<<20
2c9e4     00 00 A0 06 | 	long	(106 {__system___rx})<<20
2c9e8     00 00 00 00 | 	byte	$00, $00, $00, $00
2c9ec     00 00 B0 06 | 	long	(107 {__system___rxtxioctl_0505})<<20
2c9f0     00 00 C0 06 | 	long	(108 {__system____dummy_flush_0506})<<20
2c9f4     00 00 00 00 
      ...             
2cb64     00 00 00 00 
2cb68     00 00 00 00 | 	byte	$00[376]
2cb6c     70 CB 02 00 | 	long	@@@__system__dat_ + 1844
2cb70     00 00 00 00 
2cb74     00 00 00 00 
2cb78     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2cb7c                 | 	alignl
2cb7c                 | _fatfs_cc_dat_
2cb7c     C7 00 FC 00 
2cb80     E9 00 E2 00 
2cb84     E4 00 E0 00 
2cb88     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2cb8c     EA 00 EB 00 
2cb90     E8 00 EF 00 
2cb94     EE 00 EC 00 
2cb98     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2cb9c     C9 00 E6 00 
2cba0     C6 00 F4 00 
2cba4     F6 00 F2 00 
2cba8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2cbac     FF 00 D6 00 
2cbb0     DC 00 F8 00 
2cbb4     A3 00 D8 00 
2cbb8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2cbbc     E1 00 ED 00 
2cbc0     F3 00 FA 00 
2cbc4     F1 00 D1 00 
2cbc8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2cbcc     BF 00 AE 00 
2cbd0     AC 00 BD 00 
2cbd4     BC 00 A1 00 
2cbd8     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2cbdc     91 25 92 25 
2cbe0     93 25 02 25 
2cbe4     24 25 C1 00 
2cbe8     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2cbec     A9 00 63 25 
2cbf0     51 25 57 25 
2cbf4     5D 25 A2 00 
2cbf8     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2cbfc     14 25 34 25 
2cc00     2C 25 1C 25 
2cc04     00 25 3C 25 
2cc08     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2cc0c     5A 25 54 25 
2cc10     69 25 66 25 
2cc14     60 25 50 25 
2cc18     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2cc1c     F0 00 D0 00 
2cc20     CA 00 CB 00 
2cc24     C8 00 31 01 
2cc28     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2cc2c     CF 00 18 25 
2cc30     0C 25 88 25 
2cc34     84 25 A6 00 
2cc38     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2cc3c     D3 00 DF 00 
2cc40     D4 00 D2 00 
2cc44     F5 00 D5 00 
2cc48     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2cc4c     DE 00 DA 00 
2cc50     DB 00 D9 00 
2cc54     FD 00 DD 00 
2cc58     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2cc5c     AD 00 B1 00 
2cc60     17 20 BE 00 
2cc64     B6 00 A7 00 
2cc68     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2cc6c     B0 00 A8 00 
2cc70     B7 00 B9 00 
2cc74     B3 00 B2 00 
2cc78     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2cc7c     61 00 1A 03 
2cc80     E0 00 17 03 
2cc84     F8 00 07 03 
2cc88     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2cc8c     78 01 00 01 
2cc90     30 01 32 01 
2cc94     06 01 39 01 
2cc98     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2cc9c     2E 01 79 01 
2cca0     06 01 80 01 
2cca4     4D 00 43 02 
2cca8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2ccac     82 01 84 01 
2ccb0     84 01 86 01 
2ccb4     87 01 87 01 
2ccb8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2ccbc     8B 01 8B 01 
2ccc0     8D 01 8E 01 
2ccc4     8F 01 90 01 
2ccc8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2cccc     93 01 94 01 
2ccd0     F6 01 96 01 
2ccd4     97 01 98 01 
2ccd8     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2ccdc     9B 01 9C 01 
2cce0     9D 01 20 02 
2cce4     9F 01 A0 01 
2cce8     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2ccec     A2 01 A4 01 
2ccf0     A4 01 A6 01 
2ccf4     A7 01 A7 01 
2ccf8     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2ccfc     AB 01 AC 01 
2cd00     AC 01 AE 01 
2cd04     AF 01 AF 01 
2cd08     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2cd0c     B3 01 B3 01 
2cd10     B5 01 B5 01 
2cd14     B7 01 B8 01 
2cd18     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2cd1c     BB 01 BC 01 
2cd20     BC 01 BE 01 
2cd24     F7 01 C0 01 
2cd28     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2cd2c     C3 01 C4 01 
2cd30     C5 01 C4 01 
2cd34     C7 01 C8 01 
2cd38     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2cd3c     CB 01 CA 01 
2cd40     CD 01 10 01 
2cd44     DD 01 01 00 
2cd48     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2cd4c     12 01 F3 01 
2cd50     03 00 F1 01 
2cd54     F4 01 F4 01 
2cd58     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2cd5c     22 02 12 01 
2cd60     3A 02 09 00 
2cd64     65 2C 3B 02 
2cd68     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2cd6c     66 2C 3F 02 
2cd70     40 02 41 02 
2cd74     41 02 46 02 
2cd78     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2cd7c     40 00 81 01 
2cd80     86 01 55 02 
2cd84     89 01 8A 01 
2cd88     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2cd8c     5A 02 90 01 
2cd90     5C 02 5D 02 
2cd94     5E 02 5F 02 
2cd98     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2cd9c     62 02 94 01 
2cda0     64 02 65 02 
2cda4     66 02 67 02 
2cda8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2cdac     6A 02 62 2C 
2cdb0     6C 02 6D 02 
2cdb4     6E 02 9C 01 
2cdb8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2cdbc     9D 01 73 02 
2cdc0     74 02 9F 01 
2cdc4     76 02 77 02 
2cdc8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2cdcc     7A 02 7B 02 
2cdd0     7C 02 64 2C 
2cdd4     7E 02 7F 02 
2cdd8     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2cddc     82 02 A9 01 
2cde0     84 02 85 02 
2cde4     86 02 87 02 
2cde8     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2cdec     B1 01 B2 01 
2cdf0     45 02 8D 02 
2cdf4     8E 02 8F 02 
2cdf8     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2cdfc     B7 01 7B 03 
2ce00     03 00 FD 03 
2ce04     FE 03 FF 03 
2ce08     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2ce0c     86 03 88 03 
2ce10     89 03 8A 03 
2ce14     B1 03 11 03 
2ce18     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2ce1c     A3 03 A3 03 
2ce20     C4 03 08 03 
2ce24     CC 03 03 00 
2ce28     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2ce2c     8F 03 D8 03 
2ce30     18 01 F2 03 
2ce34     0A 00 F9 03 
2ce38     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2ce3c     F5 03 F6 03 
2ce40     F7 03 F7 03 
2ce44     F9 03 FA 03 
2ce48     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2ce4c     20 03 50 04 
2ce50     10 07 60 04 
2ce54     22 01 8A 04 
2ce58     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2ce5c     0E 01 CF 04 
2ce60     01 00 C0 04 
2ce64     D0 04 44 01 
2ce68     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2ce6c     00 00 7D 1D 
2ce70     01 00 63 2C 
2ce74     00 1E 96 01 
2ce78     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2ce7c     00 1F 08 06 
2ce80     10 1F 06 06 
2ce84     20 1F 08 06 
2ce88     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2ce8c     40 1F 06 06 
2ce90     51 1F 07 00 
2ce94     59 1F 52 1F 
2ce98     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2ce9c     5D 1F 56 1F 
2cea0     5F 1F 60 1F 
2cea4     08 06 70 1F 
2cea8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2ceac     BB 1F C8 1F 
2ceb0     C9 1F CA 1F 
2ceb4     CB 1F DA 1F 
2ceb8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2cebc     F9 1F EA 1F 
2cec0     EB 1F FA 1F 
2cec4     FB 1F 80 1F 
2cec8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2cecc     08 06 A0 1F 
2ced0     08 06 B0 1F 
2ced4     04 00 B8 1F 
2ced8     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2cedc     BC 1F CC 1F 
2cee0     01 00 C3 1F 
2cee4     D0 1F 02 06 
2cee8     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2ceec     E5 1F 01 00 
2cef0     EC 1F F3 1F 
2cef4     01 00 FC 1F 
2cef8     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2cefc     32 21 70 21 
2cf00     10 02 84 21 
2cf04     01 00 83 21 
2cf08     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2cf0c     30 2C 2F 04 
2cf10     60 2C 02 01 
2cf14     67 2C 06 01 
2cf18     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2cf1c     80 2C 64 01 
2cf20     00 2D 26 08 
2cf24     41 FF 1A 03 
2cf28     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2cf2c     05 07 09 0E 
2cf30     10 12 14 16 
2cf34     18 1C 1E 43 
2cf38     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2cf3c     41 41 43 45 
2cf40     45 45 49 49 
2cf44     49 41 41 45 
2cf48     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2cf4c     4F 55 55 59 
2cf50     4F 55 4F 9C 
2cf54     4F 9E 9F 41 
2cf58     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2cf5c     A5 A6 A7 A8 
2cf60     A9 AA AB AC 
2cf64     AD AE AF B0 
2cf68     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2cf6c     41 41 41 B8 
2cf70     B9 BA BB BC 
2cf74     BD BE BF C0 
2cf78     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2cf7c     C5 41 41 C8 
2cf80     C9 CA CB CC 
2cf84     CD CE CF D1 
2cf88     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2cf8c     49 49 49 49 
2cf90     D9 DA DB DC 
2cf94     DD 49 DF 4F 
2cf98     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2cf9c     4F E6 E8 E8 
2cfa0     55 55 55 59 
2cfa4     59 EE EF F0 
2cfa8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2cfac     F5 F6 F7 F8 
2cfb0     F9 FA FB FC 
2cfb4     FD FE FF 00 
2cfb8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2cfbc     00 00 00 00 | 	byte	$00, $00, $00, $00
2cfc0     00 00 80 05 | 	long	(88 {_fatfs_cc_v_close})<<20
2cfc4     00 00 90 05 | 	long	(89 {_fatfs_cc_v_read})<<20
2cfc8     00 00 A0 05 | 	long	(90 {_fatfs_cc_v_write})<<20
2cfcc     00 00 B0 05 | 	long	(91 {_fatfs_cc_v_lseek})<<20
2cfd0     00 00 C0 05 | 	long	(92 {_fatfs_cc_v_ioctl})<<20
2cfd4     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_flush})<<20
2cfd8     00 00 00 00 
2cfdc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2cfe0     00 00 D0 05 | 	long	(93 {_fatfs_cc_v_open})<<20
2cfe4     00 00 E0 05 | 	long	(94 {_fatfs_cc_v_creat})<<20
2cfe8     00 00 F0 05 | 	long	(95 {_fatfs_cc_v_opendir})<<20
2cfec     00 00 00 06 | 	long	(96 {_fatfs_cc_v_closedir})<<20
2cff0     00 00 10 06 | 	long	(97 {_fatfs_cc_v_readdir})<<20
2cff4     00 00 20 06 | 	long	(98 {_fatfs_cc_v_stat})<<20
2cff8     00 00 30 06 | 	long	(99 {_fatfs_cc_v_mkdir})<<20
2cffc     00 00 40 06 | 	long	(100 {_fatfs_cc_v_rmdir})<<20
2d000     00 00 50 06 | 	long	(101 {_fatfs_cc_v_remove})<<20
2d004     00 00 60 06 | 	long	(102 {_fatfs_cc_v_rename})<<20
2d008     00 00 70 06 | 	long	(103 {_fatfs_cc_v_init})<<20
2d00c     00 00 80 06 | 	long	(104 {_fatfs_cc_v_deinit})<<20
2d010     FF FF FF FF 
2d014     1F 00 00 00 
2d018     1C 00 00 00 
2d01c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2d020     1E 00 00 00 
2d024     1F 00 00 00 
2d028     1E 00 00 00 
2d02c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2d030     1F 00 00 00 
2d034     1E 00 00 00 
2d038     1F 00 00 00 
2d03c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2d040     1F 00 00 00 
2d044     00 00 00 00 
2d048     1F 00 00 00 
2d04c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2d050     5A 00 00 00 
2d054     78 00 00 00 
2d058     97 00 00 00 
2d05c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2d060     D4 00 00 00 
2d064     F3 00 00 00 
2d068     11 01 00 00 
2d06c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2d070     4E 01 00 00 
2d074     6D 01 00 00 
2d078     FF FF FF FF 
2d07c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2d080     00 00 00 00 
      ...             
2d098     00 00 00 00 
2d09c     00 00 00 00 | 	byte	$00[32]
2d0a0     BE D0 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2d0a4     C2 D0 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2d0a8     00 00 00 00 
2d0ac     00 00 00 00 
2d0b0     00 00 00 00 
2d0b4     00 00 00 00 
2d0b8     00 00       | 	byte	$00[18]
2d0ba     3F 3F 3F 00 
2d0be     55 43 54 00 
2d0c2     55 43 54 00 
2d0c6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2d0ca     00 00 00 00 
2d0ce     00 00 00    | 	byte	$00[7]
2d0d1     CA 9A 3B 00 
2d0d5     00 00 00 01 
2d0d9     01 01 01 01 
2d0dd     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d0e1     91 11 11 11 
2d0e5     11 01 01 01 
2d0e9     01 01 01 01 
2d0ed     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2d0f1     01 01 01 01 
2d0f5     01 01 01    | 	byte	$01[7]
2d0f8     90 20 20 20 
2d0fc     20 20 20 20 
2d100     20 20 20 20 
2d104     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2d108     42 42 42 42 
2d10c     42 42 42 42 
2d110     42 42       | 	byte	$42[10]
2d112     20 20 20 20 
2d116     20 20 20    | 	byte	$20[7]
2d119     44 44 44 44 
2d11d     44 44       | 	byte	$44[6]
2d11f     04 04 04 04 
2d123     04 04 04 04 
2d127     04 04 04 04 
2d12b     04 04 04 04 
2d12f     04 04 04 04 | 	byte	$04[20]
2d133     20 20 20 20 
2d137     20 20       | 	byte	$20[6]
2d139     48 48 48 48 
2d13d     48 48       | 	byte	$48[6]
2d13f     08 08 08 08 
2d143     08 08 08 08 
2d147     08 08 08 08 
2d14b     08 08 08 08 
2d14f     08 08 08 08 | 	byte	$08[20]
2d153     20 20 20 20 
2d157     01 00 00 00 
2d15b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2d15c                 | __methodtable__
2d15c     48 0C 01 00 | 	long	@_do_no_command
2d160     38 B1 00 00 | 	long	@_do_plus
2d164     18 B5 00 00 | 	long	@_do_minus
2d168     E0 B9 00 00 | 	long	@_do_or
2d16c     F8 BA 00 00 | 	long	@_do_mul
2d170     84 C0 00 00 | 	long	@_do_fdiv
2d174     C8 B8 00 00 | 	long	@_do_and
2d178     64 BE 00 00 | 	long	@_do_div
2d17c     4C C2 00 00 | 	long	@_do_mod
2d180     6C C4 00 00 | 	long	@_do_shl
2d184     84 C5 00 00 | 	long	@_do_shr
2d188     9C C6 00 00 | 	long	@_do_power
2d18c     AC AB 00 00 | 	long	@_do_getvar
2d190     0C 89 00 00 | 	long	@_do_push
2d194     F4 A4 00 00 | 	long	@_do_assign
2d198     A0 EE 00 00 | 	long	@_do_cls
2d19c     24 9F 00 00 | 	long	@_do_new
2d1a0     44 EF 00 00 | 	long	@_do_plot
2d1a4     7C F0 00 00 | 	long	@_do_draw
2d1a8     64 FA 00 00 | 	long	@_do_print
2d1ac     5C F3 00 00 | 	long	@_do_circle
2d1b0     E4 F1 00 00 | 	long	@_do_fcircle
2d1b4     D4 F4 00 00 | 	long	@_do_box
2d1b8     7C F8 00 00 | 	long	@_do_frame
2d1bc     0C EF 00 00 | 	long	@_do_color
2d1c0     10 69 00 00 | 	long	@_do_for
2d1c4     3C 6B 00 00 | 	long	@_do_next
2d1c8     88 9C 00 00 | 	long	@_do_list
2d1cc     5C 99 00 00 | 	long	@_do_run
2d1d0     B0 A3 00 00 | 	long	@_do_error
2d1d4     AC A0 00 00 | 	long	@_do_fast_goto
2d1d8     9C A1 00 00 | 	long	@_do_find_goto
2d1dc     AC A3 00 00 | 	long	@_do_slow_goto
2d1e0     D4 DE 00 00 | 	long	@_do_converttoint
2d1e4     50 8F 00 00 | 	long	@_test_csave
2d1e8     A4 92 00 00 | 	long	@_do_save
2d1ec     90 95 00 00 | 	long	@_do_load
2d1f0     00 03 01 00 | 	long	@_do_pinwrite
2d1f4     18 03 01 00 | 	long	@_do_waitms
2d1f8     54 04 01 00 | 	long	@_do_waitvbl
2d1fc     5C 07 01 00 | 	long	@_do_if
2d200     40 08 01 00 | 	long	@_do_else
2d204     64 08 01 00 | 	long	@_do_nothing
2d208     64 C8 00 00 | 	long	@_do_eq
2d20c     94 D3 00 00 | 	long	@_do_ge
2d210     54 D7 00 00 | 	long	@_do_le
2d214     24 CC 00 00 | 	long	@_do_gt
2d218     E4 CF 00 00 | 	long	@_do_lt
2d21c     14 DB 00 00 | 	long	@_do_ne
2d220     A4 E0 00 00 | 	long	@_do_rnd
2d224     68 08 01 00 | 	long	@_do_brun
2d228     34 0B 01 00 | 	long	@_do_beep
2d22c     84 04 01 00 | 	long	@_do_dir
2d230     10 FF 00 00 | 	long	@_do_paper
2d234     98 FF 00 00 | 	long	@_do_ink
2d238     34 00 01 00 | 	long	@_do_font
2d23c     B0 00 01 00 | 	long	@_do_mode
2d240     A0 0A 01 00 | 	long	@_do_mouse
2d244     38 EE 00 00 | 	long	@_do_gettime
2d248     D4 0A 01 00 | 	long	@_do_cursor
2d24c     08 0B 01 00 | 	long	@_do_click
2d250     28 ED 00 00 | 	long	@_do_mousex
2d254     6C ED 00 00 | 	long	@_do_mousey
2d258     F4 ED 00 00 | 	long	@_do_mousek
2d25c     B0 ED 00 00 | 	long	@_do_mousew
2d260     6C E2 00 00 | 	long	@_do_sin
2d264     54 E4 00 00 | 	long	@_do_stick
2d268     D8 E5 00 00 | 	long	@_do_strig
2d26c     3C EC 00 00 | 	long	@_do_sprite
2d270     AC E8 00 00 | 	long	@_do_defsprite
2d274     5C E7 00 00 | 	long	@_do_getpixel
2d278     60 04 01 00 | 	long	@_do_waitclock
2d27c     54 0C 01 00 | 	long	@_do_negative
2d280     BC F6 00 00 | 	long	@_do_fill
2d284     D4 3C 01 00 | 	long	@_hg010b_spin2_putchar
2d288     0C 40 02 00 | 	long	@__struct___bas_wrap_sender_tx
2d28c     50 40 02 00 | 	long	@__struct___bas_wrap_sender_rx
2d290     98 40 02 00 | 	long	@__struct___bas_wrap_sender_close
2d294     3C 3F 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2d298     AC 3F 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2d29c     F4 3E 02 00 | 	long	@___strs_cl_pfunc
2d2a0     54 9E 01 00 | 	long	@__system____root_opendir
2d2a4     F0 9E 01 00 | 	long	@__system____root_closedir
2d2a8     6C 9E 01 00 | 	long	@__system____root_readdir
2d2ac     F8 9E 01 00 | 	long	@__system____root_stat
2d2b0     80 97 01 00 | 	long	@__system____default_putc
2d2b4     04 97 01 00 | 	long	@__system____default_getc
2d2b8     28 98 01 00 | 	long	@__system____default_flush
2d2bc     FC 29 02 00 | 	long	@_fatfs_cc_v_close
2d2c0     18 2E 02 00 | 	long	@_fatfs_cc_v_read
2d2c4     2C 2F 02 00 | 	long	@_fatfs_cc_v_write
2d2c8     0C 30 02 00 | 	long	@_fatfs_cc_v_lseek
2d2cc     94 30 02 00 | 	long	@_fatfs_cc_v_ioctl
2d2d0     E8 30 02 00 | 	long	@_fatfs_cc_v_open
2d2d4     60 29 02 00 | 	long	@_fatfs_cc_v_creat
2d2d8     40 2A 02 00 | 	long	@_fatfs_cc_v_opendir
2d2dc     B4 2A 02 00 | 	long	@_fatfs_cc_v_closedir
2d2e0     F4 2A 02 00 | 	long	@_fatfs_cc_v_readdir
2d2e4     28 2C 02 00 | 	long	@_fatfs_cc_v_stat
2d2e8     A8 30 02 00 | 	long	@_fatfs_cc_v_mkdir
2d2ec     C8 30 02 00 | 	long	@_fatfs_cc_v_rmdir
2d2f0     B8 30 02 00 | 	long	@_fatfs_cc_v_remove
2d2f4     D8 30 02 00 | 	long	@_fatfs_cc_v_rename
2d2f8     F8 31 02 00 | 	long	@_fatfs_cc_v_init
2d2fc     00 32 02 00 | 	long	@_fatfs_cc_v_deinit
2d300     0C 50 01 00 | 	long	@__system___tx
2d304     4C 50 01 00 | 	long	@__system___rx
2d308     64 AA 01 00 | 	long	@__system___rxtxioctl_0505
2d30c     BC AA 01 00 | 	long	@__system____dummy_flush_0506
2d310     C8 31 02 00 | 	long	@_fatfs_cc_v_flush
2d314                 | __heap_base
2d314     00 00 00 00 
      ...             
6bb14     00 00 00 00 
6bb18     00 00 00 00 | 	long	0[64002]
6bb1c                 | objmem
6bb1c     00 00 00 00 
      ...             
75fc4     00 00 00 00 
75fc8     00 00 00 00 | 	long	0[10540]
75fcc                 | stackspace
75fcc     00 00 00 00 | 	long	0[1]
75fd0 100             | 	org	COG_BSS_START
75fd0 100             | _var01
75fd0 100             | 	res	1
75fd0 101             | _var02
75fd0 101             | 	res	1
75fd0 102             | _var03
75fd0 102             | 	res	1
75fd0 103             | _var04
75fd0 103             | 	res	1
75fd0 104             | _var05
75fd0 104             | 	res	1
75fd0 105             | _var06
75fd0 105             | 	res	1
75fd0 106             | _var07
75fd0 106             | 	res	1
75fd0 107             | _var08
75fd0 107             | 	res	1
75fd0 108             | _var09
75fd0 108             | 	res	1
75fd0 109             | arg01
75fd0 109             | 	res	1
75fd0 10a             | arg02
75fd0 10a             | 	res	1
75fd0 10b             | arg03
75fd0 10b             | 	res	1
75fd0 10c             | arg04
75fd0 10c             | 	res	1
75fd0 10d             | arg05
75fd0 10d             | 	res	1
75fd0 10e             | arg06
75fd0 10e             | 	res	1
75fd0 10f             | local01
75fd0 10f             | 	res	1
75fd0 110             | local02
75fd0 110             | 	res	1
75fd0 111             | local03
75fd0 111             | 	res	1
75fd0 112             | local04
75fd0 112             | 	res	1
75fd0 113             | local05
75fd0 113             | 	res	1
75fd0 114             | local06
75fd0 114             | 	res	1
75fd0 115             | local07
75fd0 115             | 	res	1
75fd0 116             | local08
75fd0 116             | 	res	1
75fd0 117             | local09
75fd0 117             | 	res	1
75fd0 118             | local10
75fd0 118             | 	res	1
75fd0 119             | local11
75fd0 119             | 	res	1
75fd0 11a             | local12
75fd0 11a             | 	res	1
75fd0 11b             | local13
75fd0 11b             | 	res	1
75fd0 11c             | local14
75fd0 11c             | 	res	1
75fd0 11d             | local15
75fd0 11d             | 	res	1
75fd0 11e             | local16
75fd0 11e             | 	res	1
75fd0 11f             | local17
75fd0 11f             | 	res	1
75fd0 120             | local18
75fd0 120             | 	res	1
75fd0 121             | local19
75fd0 121             | 	res	1
75fd0 122             | local20
75fd0 122             | 	res	1
75fd0 123             | local21
75fd0 123             | 	res	1
75fd0 124             | local22
75fd0 124             | 	res	1
75fd0 125             | local23
75fd0 125             | 	res	1
75fd0 126             | local24
75fd0 126             | 	res	1
75fd0 127             | local25
75fd0 127             | 	res	1
75fd0 128             | local26
75fd0 128             | 	res	1
75fd0 129             | local27
75fd0 129             | 	res	1
75fd0 12a             | local28
75fd0 12a             | 	res	1
75fd0 12b             | local29
75fd0 12b             | 	res	1
75fd0 12c             | local30
75fd0 12c             | 	res	1
75fd0 12d             | local31
75fd0 12d             | 	res	1
75fd0 12e             | local32
75fd0 12e             | 	res	1
75fd0 12f             | muldiva_
75fd0 12f             | 	res	1
75fd0 130             | muldivb_
75fd0 130             | 	res	1
75fd0 131             | 	fit	480
75fd0 131             | 
