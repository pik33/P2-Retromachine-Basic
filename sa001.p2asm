con
	_clkfreq = 340000000
	_clkmode = 16781563
' 
' _clkfreq=340000000
' left= 14
	left = 14
' right=15
	right = 15
' 
' c4=262
	c4 = 262
' d4=294
	d4 = 294
' e4=330
	e4 = 330
' f4=349
	f4 = 349
' g4=392
	g4 = 392
' a4=440
	a4 = 440
' h4=494
	h4 = 494
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 340000000
	long	0 ' clock mode: will default to $10010fb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16781560
	waitx	##200000
	mov	pa, ##16781563
	hubset	pa
	wrlong	pa, #24
	wrlong	##340000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_test
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra++
	rdlong	result1, ptra++
	setq	#3
	rdlong	arg01, ptra
	sub	ptra, #4
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    mov	fcache_tmpb_,ptrb
    pop	ptrb
    altd	pa,ret_instr_
    mov	 0-0, ret_instr_
    setq	pa
    rdlong	$0, ptrb++
    push	ptrb
    mov ptrb,fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    _ret_ cmp inb,#0
fcache_tmpb_
    long 0
fcache_load_ptr_
    long FCACHE_LOAD_
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    altd  COUNT_, #511
    setq #0-0
    wrlong local01, ptra++
pushregs_done_
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra++
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    setq   #2
    rdlong COUNT_, --ptra
    djf    COUNT_, #popregs__ret
    setq   COUNT_
    rdlong local01, --ptra
popregs__ret
    push   RETADDR_
    jmp    pa

objptr
	long	@objmem
ptr__dat__
	long	@_dat_
ptr_stackspace_
	long	@stackspace
result1
	long	0
result2
	long	1
COG_BSS_START
	fit	480
	orgh
hubentry

' 
' 
' pub test()
_test
' 
' start(0,0,0)
	mov	arg01, #0
	mov	arg02, #0
	mov	arg03, #0
	call	#_start
' longmove($60000,@sinewave+16,512)
	add	ptr__dat__, ##704
	mov	arg02, ptr__dat__
	sub	ptr__dat__, ##704
	add	arg02, #16
	mov	arg01, ##393216
	decod	arg03, #9
	call	#__system__longmove
' play(2,$60000,$0051_1111,16384,1024,0)  
	mov	arg01, #2
	mov	arg02, ##393216
	mov	arg03, ##5312785
	decod	arg04, #14
	decod	arg05, #10
	mov	arg06, #0
	call	#_play
_test_ret
	ret

' 
' '--------------------------------------------------------------
' '---------- Init the variables, start the cog. ----------------
' '--------------------------------------------------------------
' 
' pub start(mbox,scope,cache) :cog,base | iii
_start
	mov	COUNT_, #3
	call	#pushregs_
' 
' ' mbox: PSRAM mailbox or 0 if no PSRAM
' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
' 
' base:=@channel1[0]
	mov	local01, objptr
' 
' repeat iii from 0 to 7
	mov	local02, #0
	add	ptr__dat__, ##696
	callpa	#(@LR__0002-@LR__0001)>>2,fcache_load_ptr_
LR__0001
'   long[base+64*iii]:=0
	mov	result2, local01
	mov	result1, local02
	shl	result1, #6
	add	result2, result1
	wrlong	#0, result2
'   long[base+64*iii+4]:=0
	mov	result2, local01
	mov	result1, local02
	shl	result1, #6
	add	result2, result1
	add	result2, #4
	wrlong	#0, result2
'   long[base+64*iii+12]:=0
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #12
	wrlong	#0, local03
'   long[base+64*iii+16]:=0
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #16
	wrlong	#0, local03
'   word[base+64*iii+20]:=0
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #20
	wrword	#0, local03
'   word[base+64*iii+22]:=8192
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #22
	wrword	##8192, local03
'   long[base+64*iii+24]:=1
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #24
	wrlong	#1, local03
'   long[base+64*iii+8]:= @null | $C0000000
	mov	result2, ptr__dat__
	bith	result2, #62
	mov	local03, local01
	mov	arg01, local02
	shl	arg01, #6
	add	local03, arg01
	add	local03, #8
	wrlong	result2, local03
'   long[base+64*iii+32]:=0
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #32
	wrlong	#0, local03
'   long[base+64*iii+36]:=0
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #36
	wrlong	#0, local03
'   long[base+64*iii+40]:=0
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #40
	wrlong	#0, local03
'   long[base+64*iii+44]:=0
	mov	local03, local01
	mov	result2, local02
	shl	result2, #6
	add	local03, result2
	add	local03, #44
	wrlong	#0, local03
'   long[base+64*iii+28]:=0
	mov	local03, local01
	mov	arg01, local02
	shl	arg01, #6
	add	local03, arg01
	add	local03, #28
	wrlong	#0, local03
	add	local02, #1
	cmps	local02, #8 wc
 if_b	jmp	#LR__0001
LR__0002
	sub	ptr__dat__, ##696
'   
' cog:=coginit(16,@audio,base)
	mov	arg02, ptr__dat__
	mov	arg03, local01
	mov	local03, #16
	setq	arg03
	coginit	local03, arg02 wc
 if_b	neg	local03, #1
' waitms(100)
	mov	arg01, #100
	call	#__system___waitms
' return cog,base
	mov	result2, local01
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_start_ret
	ret

' 
' ' a simple play procedure to not poke everything. 
' 
' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
_play
' 
' base2:=@channel1[0]+64*channel
	shl	arg01, #6
	mov	_var01, objptr
	add	_var01, arg01
' 
' 
' word[base2+20]:=vol
	mov	arg01, _var01
	add	arg01, #20
	wrword	arg04, arg01
' long[base2+24]:=splfreq
	mov	arg04, _var01
	add	arg04, #24
	wrlong	arg03, arg04
' 
' long[base2+28]:=0 
	mov	arg03, _var01
	add	arg03, #28
	wrlong	#0, arg03
' long[base2+32]:=0    
	mov	arg03, _var01
	add	arg03, #32
	wrlong	#0, arg03
' long[base2+36]:=0    
	mov	_var02, _var01
	add	_var02, #36
	wrlong	#0, _var02
' long[base2+40]:=0    
	mov	_var02, _var01
	add	_var02, #40
	wrlong	#0, _var02
' long[base2+44]:=0    
	mov	_var02, _var01
	add	_var02, #44
	wrlong	#0, _var02
' long[base2+8]:=sample+$C0000000     
	add	arg02, ##-1073741824
	add	_var01, #8
	wrlong	arg02, _var01
_play_ret
	ret
hubexit
	jmp	#cogexit

__system__longmove
	mov	_var01, arg01
	cmps	arg01, arg02 wc
 if_ae	jmp	#LR__0014
	mov	_var02, arg03 wz
 if_e	jmp	#LR__0020
	callpa	#(@LR__0012-@LR__0010)>>2,fcache_load_ptr_
LR__0010
	rep	@LR__0013, _var02
LR__0011
	rdlong	_var02, arg02
	wrlong	_var02, arg01
	add	arg01, #4
	add	arg02, #4
LR__0012
LR__0013
	jmp	#LR__0020
LR__0014
	mov	_var02, arg03
	shl	_var02, #2
	add	arg01, _var02
	mov	_var03, arg03
	shl	_var03, #2
	add	arg02, _var03
	mov	_var04, arg03 wz
 if_e	jmp	#LR__0019
	callpa	#(@LR__0017-@LR__0015)>>2,fcache_load_ptr_
LR__0015
	rep	@LR__0018, _var04
LR__0016
	sub	arg01, #4
	sub	arg02, #4
	rdlong	_var04, arg02
	wrlong	_var04, arg01
LR__0017
LR__0018
LR__0019
LR__0020
	mov	result1, _var01
__system__longmove_ret
	ret

__system___waitms
	mov	_var01, arg01
	getct	_var02
	rdlong	_var03, #20
	callpa	#(@LR__0031-@LR__0030)>>2,fcache_load_ptr_
LR__0030
	cmps	_var01, ##1000 wc
 if_b	jmp	#LR__0032
	add	_var02, _var03
	mov	arg01, _var02
	addct1	arg01, #0
	waitct1
	sub	_var01, ##1000
	jmp	#LR__0030
LR__0031
LR__0032
	cmps	_var01, #1 wc
 if_b	jmp	#LR__0033
	qmul	_var01, _var03
	mov	arg03, ##1000
	getqy	result1
	getqx	arg01
	setq	result1
	qdiv	arg01, arg03
	getqx	arg01
	addct1	arg01, _var02
	waitct1
LR__0033
__system___waitms_ret
	ret
	alignl
_dat_
'-' 
'-' audio		org   	0
'-' 
'-'             	wrpin   dac2,#left           	' PWM DAC at 264600=6*44100
	byte	$0e, $2e, $05, $fc
'-'             	wxpin   ##6*256,#left       	' Set DACs sample rate. 
	byte	$03, $00, $80, $ff, $0e, $00, $1c, $fc
'-'             	wrpin   dac2,#right
	byte	$0f, $2e, $05, $fc
'-'             	wxpin   ##6*256,#right    
	byte	$03, $00, $80, $ff, $0f, $00, $1c, $fc
'-'             	dirh    #left addpins 1
	byte	$41, $9c, $64, $fd
'-'             	setse1  #%001<<6 + left      	' Set the event - DAC empty
	byte	$20, $9c, $64, $fd
'-'             	mov     cn,#0
	byte	$00, $0a, $05, $f6
'-'             
'-' '---------------------------------------------------------------------------------        
'-' '----------------- The main loop -------------------------------------------------
'-' '---------------------------------------------------------------------------------
'-' 
'-' loop       	incmod 	cn,#7 wcz
	byte	$07, $0a, $1d, $f7
'-' 	if_nz	jmp 	#p401
	byte	$1c, $00, $90, $5d
'-'  ' waitx ##34_000_000*1
'-' 	   	waitse1
	byte	$24, $28, $60, $fd
'-' 	   	bitnot  ls,#15                	' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
	byte	$0f, $18, $e5, $f4
'-'             	bitnot  rs,#15		     	' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
	byte	$0f, $1a, $e5, $f4
'-' 	   	wypin 	ls,#left
	byte	$0e, $18, $25, $fc
'-'            	wypin 	rs,#right
	byte	$0f, $1a, $25, $fc
'-'             	mov 	ls,#0
	byte	$00, $18, $05, $f6
'-'            	mov 	rs,#0
	byte	$00, $1a, $05, $f6
'-'            
'-' '----------------------------------------------------------------------------------
'-' '------------- Compute channel samples --------------------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' 
'-' p401            mov     channeladd,cn           ' compute the pointer to channel parameters block
	byte	$85, $c8, $00, $f6
'-'             	shl     channeladd,#6
	byte	$06, $c8, $64, $f0
'-'             	add     ptra,channeladd
	byte	$64, $f0, $03, $f1
'-' 
'-'             	setq    #11                     ' read parameters
	byte	$28, $16, $64, $fd
'-'             	rdlong  pointer0,ptra
	byte	$00, $e1, $04, $fb
'-' 
'-' p405        	getword apan0,volpan0,#1       	' extract vol,pan,skip and freq from longs 
	byte	$75, $06, $39, $f9
'-'     	    	getword avol0,volpan0,#0
	byte	$75, $04, $31, $f9
'-' 
'-' '---- envelopes
'-'             
'-'             	cmp  	envptr0,#0 wcz    	' read the pointer
	byte	$00, $f2, $1c, $f2
'-'     	if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
	byte	$20, $00, $00, $af, $00, $54, $05, $a6
'-'     	if_z    jmp     #p410			' and run away	
	byte	$54, $00, $90, $ad
'-' 
'-'             	add     envph0,envspd0 
	byte	$7a, $f0, $00, $f1
'-'       	    	mov     envhi, envph0		' move phase acc to high part of env pointer
	byte	$78, $50, $01, $f6
'-' 	    	shr     envhi,#6		' leave 10 bits in hi
	byte	$06, $50, $45, $f0
'-' 	    	getword envlo,envhi,#0          ' and 16 bit in lo
	byte	$a8, $52, $31, $f9
'-' 	    	shr     envhi,#16		' move 10 bits of hi to the lower word
	byte	$10, $50, $45, $f0
'-' 	    	cmp     envhi,envlen0 wcz	' compare this to envelope length
	byte	$7b, $50, $19, $f2
'-'     	if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
	byte	$7b, $50, $01, $36
'-'     	if_ge   mov     envlo,#0
	byte	$00, $52, $05, $36
'-'     	if_ge   mov     envph0,envlen0
	byte	$7b, $f0, $00, $36
'-'     	if_ge   shl     envph0,#22
	byte	$16, $f0, $64, $30
'-' 
'-'             	mov     envs1,envhi		' get the phase acc
	byte	$a8, $54, $01, $f6
'-'             	shl     envs1,#1		' env defs are words, so phase acc*=2
	byte	$01, $54, $65, $f0
'-'             	add     envs1,envptr0		' and add the pointer
	byte	$79, $54, $01, $f1
'-'             	rdlong  envs1,envs1		' then read 2 entries
	byte	$aa, $54, $01, $fb
'-'             	getword envs2,envs1,#1		' next value
	byte	$aa, $56, $39, $f9
'-'             	getword envs1,envs1,#0		' current value
	byte	$aa, $54, $31, $f9
'-'             	mul     envs2,envlo		' linear interpolate : new val x envlo
	byte	$a9, $56, $01, $fa
'-'             	not     envlo			' sum of envlo and not envlo is always $FFFF
	byte	$a9, $52, $21, $f6
'-'             	mul     envs1,envlo
	byte	$a9, $54, $01, $fa
'-'             	add     envs1,envs2
	byte	$ab, $54, $01, $f1
'-'             	shr     envs1,#18		' normalize it to $4000
	byte	$12, $54, $45, $f0
'-'             
'-' p410        	testb   sstart0, #27 wz		' bit 27 set=noise channel TODO noise freq will not work now, correct this
	byte	$1b, $e4, $0c, $f4
'-'     	if_z    getrnd  spl
	byte	$1b, $ce, $60, $ad
'-'     	if_z    jmp     #p406
	byte	$54, $00, $90, $ad
'-'  
'-'                 add     pointer0,freq0          ' compute the pointer to the next sample       
	byte	$76, $e0, $00, $f1
'-'             	mov 	pointer00,pointer0
	byte	$70, $4c, $01, $f6
'-'          	shr 	pointer00,#22	   
	byte	$16, $4c, $45, $f0
'-'          	shl	pointer00,#1		' align to word, for 16-bit samples   
	byte	$01, $4c, $65, $f0
'-'                 cmp     pointer00,##2046 wz
	byte	$03, $00, $00, $ff, $fe, $4d, $0d, $f2
'-'      		add	pointer00,sstart0
	byte	$72, $4c, $01, $f1
'-'      		
'-' 		rdlong	spl,pointer00
	byte	$a6, $ce, $00, $fb
'-' 	if_nz	getword spl2,spl,#1
	byte	$67, $d0, $38, $59
'-' 		getword spl,spl,#0		' clean high bits
	byte	$67, $ce, $30, $f9
'-' 	if_z	rdword	spl2,sstart0
	byte	$72, $d0, $e0, $aa
'-' 	
'-' 	 	mov 	pointer00,pointer0
	byte	$70, $4c, $01, $f6
'-' 	 	shl	pointer00,#10		' get rid of 10 high bits
	byte	$0a, $4c, $65, $f0
'-' 	 	shr	pointer00,#18		' normalize the rest to 14 bit for SCAS
	byte	$12, $4c, $45, $f0
'-' 	 	mov     pointer01,##16384
	byte	$20, $00, $00, $ff, $00, $4e, $05, $f6
'-' 	 	sub	pointer01,pointer00
	byte	$a6, $4e, $81, $f1
'-' 
'-' p999	 	scas 	spl,pointer01
	byte	$a7, $ce, $30, $fa
'-' 	 	mov 	spl,0-0
	byte	$00, $ce, $00, $f6
'-' 	 	scas	spl2,pointer00
	byte	$a6, $d0, $30, $fa
'-' 	 	add	spl,0-0
	byte	$00, $ce, $00, $f1
'-' 
'-' 
'-' 
'-' p406       	scas    spl,envs1			' apply envelope
	byte	$aa, $ce, $30, $fa
'-'            	mov     spl,0-0
	byte	$00, $ce, $00, $f6
'-'             	scas    spl,avol0                 	' apply volume
	byte	$82, $ce, $30, $fa
'-'             	mov     spl,0-0
	byte	$00, $ce, $00, $f6
'-' 
'-'             	scas    spl,apan0                 	' apply pan
	byte	$83, $ce, $30, $fa
'-'             	mov     ls0,0-0
	byte	$00, $14, $01, $f6
'-'             	mov     qq,##16384
	byte	$20, $00, $00, $ff, $00, $cc, $04, $f6
'-'           	sub     qq,apan0
	byte	$83, $cc, $80, $f1
'-'             	scas    spl,qq
	byte	$66, $ce, $30, $fa
'-'             	mov     rs0, 0-0
	byte	$00, $16, $01, $f6
'-'       
'-' 
'-' 		add	rs,rs0
	byte	$8b, $1a, $01, $f1
'-' 		add 	ls,ls0
	byte	$8a, $18, $01, $f1
'-' 		
'-' 	
'-'    
'-'             	setword sample0,rs0,#1           	' pack samples into long
	byte	$8b, $e2, $28, $f9
'-'             	setword sample0,ls0,#0
	byte	$8a, $e2, $20, $f9
'-'             
'-'             	bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
	byte	$1e, $e4, $1c, $f4
'-'     	if_z    mov     pointer0, #0  		
	byte	$00, $e0, $04, $a6
'-'     	if_z    mov     envph0, #0  			' reset also envelope pha 
	byte	$00, $f0, $04, $a6
'-' 	if_z    wrlong  sstart0, ptra[2]      
	byte	$02, $e5, $64, $ac
'-' 
'-' 
'-' p403        	setq    #1                         	' write new pointer and sample value to the hub
	byte	$28, $02, $64, $fd
'-'             	wrlong  pointer0,ptra
	byte	$00, $e1, $64, $fc
'-'             	wrlong  envph0,ptra[8]			' todo: env pha has to be at the start of the block to avoid 2 wrlongs
	byte	$08, $f1, $64, $fc
'-'             	sub     ptra, channeladd         	' reset the pointer to channel parameters
	byte	$64, $f0, $83, $f1
'-'                       
'-' p302        	jmp     #loop            'loop
	byte	$9c, $fe, $9f, $fd
'-' 
'-' '----------------------------------------------------------------------------------
'-' '------------- This is the end of the main loop -----------------------------------
'-' '----------------------------------------------------------------------------------
'-' 
'-' 
'-'           
'-' 
'-' 
'-' 
'-' '---------------------------------------------------------------------------
'-' '------- Variables ---------------------------------------------------------
'-' '---------------------------------------------------------------------------
'-' 
'-' ' constants
'-' 
'-' a40000000   long $40000000
	byte	$00, $00, $00, $40
'-' a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
	byte	$00, $00, $00, $41
'-' 
'-' ' Time variables
'-' 
'-' 
'-' channeladd long 0
	byte	$00, $00, $00, $00
'-' 
'-' front       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' temporary variables 
'-' qq          long 0
	byte	$00, $00, $00, $00
'-' spl         long 0
	byte	$00, $00, $00, $00
'-' spl2		long 0
	byte	$00, $00, $00, $00
'-' zero        long 0
	byte	$00, $00, $00, $00
'-' mailbox     long 0
	byte	$00, $00, $00, $00
'-' mailbox2 long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Interrupt ISR variables
'-' 
'-' lsample     long 0
	byte	$00, $00, $00, $00
'-' rsample     long 0
	byte	$00, $00, $00, $00
'-' lsnext      long 0
	byte	$00, $00, $00, $00
'-' rsnext      long 0 
	byte	$00, $00, $00, $00
'-' 
'-' ' channel parameter block
'-' 
'-' pointer0    long 0     
	byte	$00, $00, $00, $00
'-' sample0     long 0
	byte	$00, $00, $00, $00
'-' sstart0     long 0     ' start pointer and type at bit 31
	byte	$00, $00, $00, $00
'-' lstart0     long 0
	byte	$00, $00, $00, $00
'-' lend0       long 0
	byte	$00, $00, $00, $00
'-' volpan0     long 0
	byte	$00, $00, $00, $00
'-' freq0       long 0
	byte	$00, $00, $00, $00
'-' command0    long 0
	byte	$00, $00, $00, $00
'-' envph0	    long 0
	byte	$00, $00, $00, $00
'-' envptr0	    long 0
	byte	$00, $00, $00, $00
'-' envspd0	    long 0
	byte	$00, $00, $00, $00
'-' envlen0	    long 0
	byte	$00, $00, $00, $00
'-' res5	    long 0
	byte	$00, $00, $00, $00
'-' res6	    long 0
	byte	$00, $00, $00, $00
'-' res7	    long 0
	byte	$00, $00, $00, $00
'-' res8	    long 0
	byte	$00, $00, $00, $00
'-' 
'-' afreq0      long 0
	byte	$00, $00, $00, $00
'-' askip0      long 0
	byte	$00, $00, $00, $00
'-' avol0       long 0
	byte	$00, $00, $00, $00
'-' apan0       long 0
	byte	$00, $00, $00, $00
'-' 
'-' oldt0       long $FFFFFFFF    'Temporary time variables
	byte	$ff, $ff, $ff, $ff
'-' cn          long 0
	byte	$00, $00, $00, $00
'-' ct          long 0
	byte	$00, $00, $00, $00
'-' dt0         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ' Samples
'-' oldls       long 0
	byte	$00, $00, $00, $00
'-' oldrs       long 0
	byte	$00, $00, $00, $00
'-' 
'-' ls0         long 0
	byte	$00, $00, $00, $00
'-' rs0         long 0
	byte	$00, $00, $00, $00
'-' 
'-' ls          long 0    
	byte	$00, $00, $00, $00
'-' rs          long 0
	byte	$00, $00, $00, $00
'-' 
'-' oldsample   long 0
	byte	$00, $00, $00, $00
'-' newsample   long 0
	byte	$00, $00, $00, $00
'-' 
'-' nrsample    long 0
	byte	$00, $00, $00, $00
'-' nlsample    long 0
	byte	$00, $00, $00, $00
'-' 
'-' scbase long 0
	byte	$00, $00, $00, $00
'-' scptr long 0
	byte	$00, $00, $00, $00
'-' scptr2 long 0
	byte	$00, $00, $00, $00
'-' scope long 0
	byte	$00, $00, $00, $00
'-' 
'-' dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
	byte	$44, $00, $17, $00
'-' dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
	byte	$46, $00, $17, $00
'-' 
'-' hubptr      long $71800
	byte	$00, $18, $07, $00
'-' cache1      long 0
	byte	$00, $00, $00, $00
'-' cache2      long 0
	byte	$00, $00, $00, $00
'-' cache3      long 0
	byte	$00, $00, $00, $00
'-' cache4      long 0
	byte	$00, $00, $00, $00
'-' cache5      long 0
	byte	$00, $00, $00, $00
'-' cache6      long 0
	byte	$00, $00, $00, $00
'-' cache7      long 0
	byte	$00, $00, $00, $00
'-' cache8      long 0
	byte	$00, $00, $00, $00
'-' 
'-' 
'-' cmd         long 0
	byte	$00, $00, $00, $00
'-' hubaddr     long 0
	byte	$00, $00, $00, $00
'-' count       long 256
	byte	$00, $01, $00, $00
'-' addrlo long 0
	byte	$00, $00, $00, $00
'-' addrhi long 0
	byte	$00, $00, $00, $00
'-' pointer00 long 0
	byte	$00, $00, $00, $00
'-' pointer01 long 0
	byte	$00, $00, $00, $00
'-' envhi long 0
	byte	$00, $00, $00, $00
'-' envlo long 0
	byte	$00, $00, $00, $00
'-' envs1 long 0
	byte	$00, $00, $00, $00
'-' envs2 long 0
	byte	$00, $00, $00, $00
'-' noise0 long 0
	byte	$00, $00, $00, $00
'-' dropper long %10010010_10010010_10010010_10010010
	byte	$92, $92, $92, $92
'-' null  			long 	0,0           ' for channel reset
	byte	$00, $00, $00, $00, $00, $00, $00, $00
'-' sinewave 		file 	"/s/lauta.s2"    ' for testing
	byte	$73, $32, $00, $04, $00, $00, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $90, $06, $1c, $0d, $9e, $13, $12, $1a, $73, $20, $bc, $26, $e9, $2c
	byte	$f7, $32, $df, $38, $a0, $3e, $33, $44, $97, $49, $c7, $4e, $c0, $53, $7f, $58
	byte	$02, $5d, $45, $61, $47, $65, $05, $69, $7e, $6c, $b0, $6f, $9a, $72, $3b, $75
	byte	$92, $77, $a0, $79, $63, $7b, $dc, $7c, $0c, $7e, $f4, $7e, $93, $7f, $ec, $7f
	byte	$ff, $7f, $cf, $7f, $5d, $7f, $aa, $7e, $bb, $7d, $90, $7c, $2c, $7b, $91, $79
	byte	$c4, $77, $c5, $75, $99, $73, $42, $71, $c3, $6e, $1f, $6c, $5a, $69, $76, $66
	byte	$76, $63, $5e, $60, $31, $5d, $f1, $59, $a2, $56, $45, $53, $df, $4f, $71, $4c
	byte	$ff, $48, $8a, $45, $14, $42, $a1, $3e, $32, $3b, $ca, $37, $69, $34, $11, $31
	byte	$c5, $2d, $86, $2a, $54, $27, $32, $24, $1f, $21, $1e, $1e, $2e, $1b, $51, $18
	byte	$87, $15, $d0, $12, $2d, $10, $9f, $0d, $25, $0b, $c0, $08, $6f, $06, $34, $04
	byte	$0d, $02, $fa, $ff, $fc, $fd, $13, $fc, $3e, $fa, $7d, $f8, $d0, $f6, $37, $f5
	byte	$b2, $f3, $40, $f2, $e1, $f0, $95, $ef, $5d, $ee, $38, $ed, $25, $ec, $25, $eb
	byte	$38, $ea, $5e, $e9, $97, $e8, $e2, $e7, $40, $e7, $b1, $e6, $35, $e6, $cd, $e5
	byte	$77, $e5, $35, $e5, $06, $e5, $eb, $e4, $e3, $e4, $f0, $e4, $10, $e5, $44, $e5
	byte	$8c, $e5, $e8, $e5, $58, $e6, $dc, $e6, $74, $e7, $20, $e8, $df, $e8, $b2, $e9
	byte	$97, $ea, $90, $eb, $9b, $ec, $b8, $ed, $e7, $ee, $26, $f0, $77, $f1, $d7, $f2
	byte	$46, $f4, $c3, $f5, $4e, $f7, $e6, $f8, $8a, $fa, $3a, $fc, $f3, $fd, $b5, $ff
	byte	$80, $01, $51, $03, $29, $05, $06, $07, $e7, $08, $cb, $0a, $b0, $0c, $97, $0e
	byte	$7e, $10, $63, $12, $47, $14, $27, $16, $03, $18, $db, $19, $ad, $1b, $78, $1d
	byte	$3c, $1f, $f8, $20, $ac, $22, $56, $24, $f7, $25, $8d, $27, $18, $29, $99, $2a
	byte	$0e, $2c, $77, $2d, $d4, $2e, $25, $30, $6a, $31, $a3, $32, $cf, $33, $ee, $34
	byte	$02, $36, $08, $37, $03, $38, $f1, $38, $d4, $39, $aa, $3a, $74, $3b, $33, $3c
	byte	$e6, $3c, $8d, $3d, $2a, $3e, $bb, $3e, $41, $3f, $bc, $3f, $2b, $40, $90, $40
	byte	$ea, $40, $39, $41, $7d, $41, $b5, $41, $e3, $41, $05, $42, $1b, $42, $26, $42
	byte	$24, $42, $17, $42, $fc, $41, $d5, $41, $a1, $41, $5f, $41, $0f, $41, $b1, $40
	byte	$44, $40, $c9, $3f, $3e, $3f, $a4, $3e, $fa, $3d, $41, $3d, $76, $3c, $9c, $3b
	byte	$b1, $3a, $b5, $39, $a8, $38, $8b, $37, $5d, $36, $1f, $35, $d0, $33, $72, $32
	byte	$04, $31, $87, $2f, $fb, $2d, $61, $2c, $ba, $2a, $07, $29, $47, $27, $7d, $25
	byte	$aa, $23, $cd, $21, $ea, $1f, $ff, $1d, $10, $1c, $1d, $1a, $28, $18, $32, $16
	byte	$3d, $14, $4a, $12, $5a, $10, $70, $0e, $8c, $0c, $b1, $0a, $df, $08, $19, $07
	byte	$60, $05, $b5, $03, $19, $02, $8f, $00, $17, $ff, $b2, $fd, $63, $fc, $29, $fb
	byte	$06, $fa, $fa, $f8, $07, $f8, $2e, $f7, $6d, $f6, $c8, $f5, $3c, $f5, $cb, $f4
	byte	$75, $f4, $3a, $f4, $1a, $f4, $14, $f4, $27, $f4, $54, $f4, $9a, $f4, $f8, $f4
	byte	$6d, $f5, $f9, $f5, $99, $f6, $4e, $f7, $15, $f8, $ee, $f8, $d6, $f9, $ce, $fa
	byte	$d2, $fb, $e2, $fc, $fc, $fd, $1f, $ff, $48, $00, $77, $01, $a9, $02, $dd, $03
	byte	$12, $05, $45, $06, $76, $07, $a3, $08, $ca, $09, $ea, $0a, $02, $0c, $11, $0d
	byte	$16, $0e, $0e, $0f, $fb, $0f, $da, $10, $ac, $11, $6e, $12, $22, $13, $c6, $13
	byte	$5a, $14, $de, $14, $52, $15, $b5, $15, $08, $16, $4c, $16, $7f, $16, $a3, $16
	byte	$b9, $16, $bf, $16, $b8, $16, $a4, $16, $84, $16, $57, $16, $20, $16, $df, $15
	byte	$95, $15, $42, $15, $e8, $14, $88, $14, $22, $14, $b7, $13, $49, $13, $d8, $12
	byte	$66, $12, $f2, $11, $7e, $11, $0a, $11, $98, $10, $28, $10, $ba, $0f, $4f, $0f
	byte	$e8, $0e, $84, $0e, $25, $0e, $cb, $0d, $76, $0d, $26, $0d, $db, $0c, $95, $0c
	byte	$55, $0c, $1a, $0c, $e4, $0b, $b3, $0b, $87, $0b, $60, $0b, $3d, $0b, $1e, $0b
	byte	$03, $0b, $eb, $0a, $d6, $0a, $c4, $0a, $b3, $0a, $a5, $0a, $98, $0a, $8b, $0a
	byte	$7f, $0a, $73, $0a, $67, $0a, $5a, $0a, $4d, $0a, $3d, $0a, $2d, $0a, $1a, $0a
	byte	$05, $0a, $ee, $09, $d4, $09, $b7, $09, $98, $09, $76, $09, $51, $09, $29, $09
	byte	$ff, $08, $d1, $08, $a1, $08, $6e, $08, $39, $08, $01, $08, $c7, $07, $8b, $07
	byte	$4d, $07, $0e, $07, $cd, $06, $8b, $06, $47, $06, $03, $06, $be, $05, $79, $05
	byte	$33, $05, $ed, $04, $a7, $04, $61, $04, $1b, $04, $d5, $03, $8f, $03, $4a, $03
	byte	$04, $03, $bf, $02, $7a, $02, $36, $02, $f1, $01, $ac, $01, $66, $01, $21, $01
	byte	$db, $00, $94, $00, $4c, $00, $03, $00, $b9, $ff, $6e, $ff, $22, $ff, $d4, $fe
	byte	$84, $fe, $33, $fe, $e0, $fd, $8b, $fd, $34, $fd, $dc, $fc, $82, $fc, $26, $fc
	byte	$c9, $fb, $6b, $fb, $0c, $fb, $ac, $fa, $4d, $fa, $ed, $f9, $8e, $f9, $30, $f9
	byte	$d4, $f8, $7b, $f8, $24, $f8, $d1, $f7, $82, $f7, $38, $f7, $f3, $f6, $b6, $f6
	byte	$80, $f6, $52, $f6, $2c, $f6, $11, $f6, $00, $f6, $fb, $f5, $02, $f6, $16, $f6
	byte	$37, $f6, $66, $f6, $a4, $f6, $f2, $f6, $4f, $f7, $bd, $f7, $3b, $f8, $c9, $f8
	byte	$69, $f9, $1a, $fa, $db, $fa, $ad, $fb, $90, $fc, $83, $fd, $86, $fe, $97, $ff
	byte	$b8, $00, $e5, $01, $20, $03, $66, $04, $b6, $05, $10, $07, $72, $08, $db, $09
	byte	$49, $0b, $ba, $0c, $2d, $0e, $a1, $0f, $13, $11, $82, $12, $eb, $13, $4e, $15
	byte	$a7, $16, $f6, $17, $39, $19, $6d, $1a, $91, $1b, $a3, $1c, $a1, $1d, $89, $1e
	byte	$5b, $1f, $15, $20, $b5, $20, $39, $21, $a2, $21, $ed, $21, $1a, $22, $29, $22
	byte	$17, $22, $e6, $21, $95, $21, $23, $21, $90, $20, $de, $1f, $0b, $1f, $19, $1e
	byte	$08, $1d, $da, $1b, $8e, $1a, $27, $19, $a5, $17, $0a, $16, $58, $14, $90, $12
	byte	$b4, $10, $c6, $0e, $c8, $0c, $bc, $0a, $a5, $08, $84, $06, $5c, $04, $2f, $02
	byte	$00, $00, $d1, $fd, $a4, $fb, $7c, $f9, $5b, $f7, $44, $f5, $38, $f3, $3a, $f1
	byte	$4c, $ef, $70, $ed, $a8, $eb, $f6, $e9, $5b, $e8, $d9, $e6, $72, $e5, $26, $e4
	byte	$f8, $e2, $e7, $e1, $f5, $e0, $22, $e0, $70, $df, $dd, $de, $6b, $de, $1a, $de
	byte	$e9, $dd, $d7, $dd, $e6, $dd, $13, $de, $5e, $de, $c7, $de, $4b, $df, $eb, $df
	byte	$a5, $e0, $77, $e1, $5f, $e2, $5d, $e3, $6f, $e4, $93, $e5, $c7, $e6, $0a, $e8
	byte	$59, $e9, $b2, $ea, $15, $ec, $7e, $ed, $ed, $ee, $5f, $f0, $d3, $f1, $46, $f3
	byte	$b7, $f4, $25, $f6, $8e, $f7, $f0, $f8, $4a, $fa, $9a, $fb, $e0, $fc, $1b, $fe
	byte	$48, $ff, $69, $00, $7a, $01, $7d, $02, $70, $03, $53, $04, $25, $05, $e6, $05
	byte	$97, $06, $37, $07, $c5, $07, $43, $08, $b1, $08, $0e, $09, $5c, $09, $9a, $09
	byte	$c9, $09, $ea, $09, $fe, $09, $05, $0a, $00, $0a, $ef, $09, $d4, $09, $ae, $09
	byte	$80, $09, $4a, $09, $0d, $09, $c8, $08, $7e, $08, $2f, $08, $dc, $07, $85, $07
	byte	$2c, $07, $d0, $06, $72, $06, $13, $06, $b3, $05, $54, $05, $f4, $04, $95, $04
	byte	$37, $04, $da, $03, $7e, $03, $24, $03, $cc, $02, $75, $02, $20, $02, $cd, $01
	byte	$7c, $01, $2c, $01, $de, $00, $92, $00, $47, $00, $fd, $ff, $b4, $ff, $6c, $ff
	byte	$25, $ff, $df, $fe, $9a, $fe, $54, $fe, $0f, $fe, $ca, $fd, $86, $fd, $41, $fd
	byte	$fc, $fc, $b6, $fc, $71, $fc, $2b, $fc, $e5, $fb, $9f, $fb, $59, $fb, $13, $fb
	byte	$cd, $fa, $87, $fa, $42, $fa, $fd, $f9, $b9, $f9, $75, $f9, $33, $f9, $f2, $f8
	byte	$b3, $f8, $75, $f8, $39, $f8, $ff, $f7, $c7, $f7, $92, $f7, $5f, $f7, $2f, $f7
	byte	$01, $f7, $d7, $f6, $af, $f6, $8a, $f6, $68, $f6, $49, $f6, $2c, $f6, $12, $f6
	byte	$fb, $f5, $e6, $f5, $d3, $f5, $c3, $f5, $b3, $f5, $a6, $f5, $99, $f5, $8d, $f5
	byte	$81, $f5, $75, $f5, $68, $f5, $5b, $f5, $4d, $f5, $3c, $f5, $2a, $f5, $15, $f5
	byte	$fd, $f4, $e2, $f4, $c3, $f4, $a0, $f4, $79, $f4, $4d, $f4, $1c, $f4, $e6, $f3
	byte	$ab, $f3, $6b, $f3, $25, $f3, $da, $f2, $8a, $f2, $35, $f2, $db, $f1, $7c, $f1
	byte	$18, $f1, $b1, $f0, $46, $f0, $d8, $ef, $68, $ef, $f6, $ee, $82, $ee, $0e, $ee
	byte	$9a, $ed, $28, $ed, $b7, $ec, $49, $ec, $de, $eb, $78, $eb, $18, $eb, $be, $ea
	byte	$6b, $ea, $21, $ea, $e0, $e9, $a9, $e9, $7c, $e9, $5c, $e9, $48, $e9, $41, $e9
	byte	$47, $e9, $5d, $e9, $81, $e9, $b4, $e9, $f8, $e9, $4b, $ea, $ae, $ea, $22, $eb
	byte	$a6, $eb, $3a, $ec, $de, $ec, $92, $ed, $54, $ee, $26, $ef, $05, $f0, $f2, $f0
	byte	$ea, $f1, $ef, $f2, $fe, $f3, $16, $f5, $36, $f6, $5d, $f7, $8a, $f8, $bb, $f9
	byte	$ee, $fa, $23, $fc, $57, $fd, $89, $fe, $b8, $ff, $e1, $00, $04, $02, $1e, $03
	byte	$2e, $04, $32, $05, $2a, $06, $12, $07, $eb, $07, $b2, $08, $67, $09, $07, $0a
	byte	$93, $0a, $08, $0b, $66, $0b, $ac, $0b, $d9, $0b, $ec, $0b, $e6, $0b, $c6, $0b
	byte	$8b, $0b, $35, $0b, $c4, $0a, $38, $0a, $93, $09, $d2, $08, $f9, $07, $06, $07
	byte	$fa, $05, $d7, $04, $9d, $03, $4e, $02, $e9, $00, $71, $ff, $e7, $fd, $4b, $fc
	byte	$a0, $fa, $e7, $f8, $21, $f7, $4f, $f5, $74, $f3, $90, $f1, $a6, $ef, $b6, $ed
	byte	$c3, $eb, $ce, $e9, $d8, $e7, $e3, $e5, $f0, $e3, $01, $e2, $16, $e0, $33, $de
	byte	$56, $dc, $83, $da, $b9, $d8, $f9, $d6, $46, $d5, $9f, $d3, $05, $d2, $79, $d0
	byte	$fc, $ce, $8e, $cd, $30, $cc, $e1, $ca, $a3, $c9, $75, $c8, $58, $c7, $4b, $c6
	byte	$4f, $c5, $64, $c4, $8a, $c3, $bf, $c2, $06, $c2, $5c, $c1, $c2, $c0, $37, $c0
	byte	$bc, $bf, $4f, $bf, $f1, $be, $a1, $be, $5f, $be, $2b, $be, $04, $be, $e9, $bd
	byte	$dc, $bd, $da, $bd, $e5, $bd, $fb, $bd, $1d, $be, $4b, $be, $83, $be, $c7, $be
	byte	$16, $bf, $70, $bf, $d5, $bf, $44, $c0, $bf, $c0, $45, $c1, $d6, $c1, $73, $c2
	byte	$1a, $c3, $cd, $c3, $8c, $c4, $56, $c5, $2c, $c6, $0f, $c7, $fd, $c7, $f8, $c8
	byte	$fe, $c9, $12, $cb, $31, $cc, $5d, $cd, $96, $ce, $db, $cf, $2c, $d1, $89, $d2
	byte	$f2, $d3, $67, $d5, $e8, $d6, $73, $d8, $09, $da, $aa, $db, $54, $dd, $08, $df
	byte	$c4, $e0, $88, $e2, $53, $e4, $25, $e6, $fd, $e7, $d9, $e9, $b9, $eb, $9d, $ed
	byte	$82, $ef, $69, $f1, $50, $f3, $35, $f5, $19, $f7, $fa, $f8, $d7, $fa, $af, $fc
	byte	$80, $fe, $4b, $00, $0d, $02, $c6, $03, $76, $05, $1a, $07, $b2, $08, $3d, $0a
	byte	$ba, $0b, $29, $0d, $89, $0e, $da, $0f, $19, $11, $48, $12, $65, $13, $70, $14
	byte	$69, $15, $4e, $16, $21, $17, $e0, $17, $8c, $18, $24, $19, $a8, $19, $18, $1a
	byte	$74, $1a, $bc, $1a, $f0, $1a, $10, $1b, $1d, $1b, $15, $1b, $fa, $1a, $cb, $1a
	byte	$89, $1a, $33, $1a, $cb, $19, $4f, $19, $c0, $18, $1e, $18, $69, $17, $a2, $16
	byte	$c8, $15, $db, $14, $db, $13, $c8, $12, $a3, $11, $6b, $10, $1f, $0f, $c0, $0d
	byte	$4e, $0c, $c9, $0a, $30, $09, $83, $07, $c2, $05, $ed, $03, $04, $02, $06, $00
	byte	$f3, $fd, $cc, $fb, $91, $f9, $40, $f7, $db, $f4, $61, $f2, $d3, $ef, $30, $ed
	byte	$79, $ea, $af, $e7, $d2, $e4, $e2, $e1, $e1, $de, $ce, $db, $ac, $d8, $7a, $d5
	byte	$3b, $d2, $ef, $ce, $97, $cb, $36, $c8, $ce, $c4, $5f, $c1, $ec, $bd, $76, $ba
	byte	$01, $b7, $8f, $b3, $21, $b0, $bb, $ac, $5e, $a9, $0f, $a6, $cf, $a2, $a2, $9f
	byte	$8a, $9c, $8a, $99, $a6, $96, $e1, $93, $3d, $91, $be, $8e, $67, $8c, $3b, $8a
	byte	$3c, $88, $6f, $86, $d4, $84, $70, $83, $45, $82, $56, $81, $a3, $80, $31, $80
	byte	$01, $80, $14, $80, $6d, $80, $0c, $81, $f4, $81, $24, $83, $9d, $84, $60, $86
	byte	$6e, $88, $c5, $8a, $66, $8d, $50, $90, $82, $93, $fb, $96, $b9, $9a, $bb, $9e
	byte	$fe, $a2, $81, $a7, $40, $ac, $39, $b1, $69, $b6, $cd, $bb, $60, $c1, $21, $c7
	byte	$09, $cd, $17, $d3, $44, $d9, $8d, $df, $ee, $e5, $62, $ec, $e4, $f2, $70, $f9
objmem
	long	0[128]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
arg06
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
	fit	480
