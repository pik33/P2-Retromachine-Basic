00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic029.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 29
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 0C AD A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 50 98 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed B0 95 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 58 86 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 90 88 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 F4 83 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 F4 F0 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 D0 8F 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 68 22 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 18 4A 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D0 47 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A8 59 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc C4 3A 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     59 00 00 FF 
00818     6B E5 05 F1 | 	add	objptr, ##45931
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     59 00 00 FF 
0082c     B4 E5 85 F1 | 	sub	objptr, ##46004
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     84 E8 B1 FD | 	call	#__system___waitms
0083c     59 00 00 FF 
00840     B4 E5 05 F1 | 	add	objptr, ##46004
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     59 00 00 FF 
00854     B4 E5 85 F1 | 	sub	objptr, ##46004
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     5C E8 B1 FD | 	call	#__system___waitms
00864     59 00 00 FF 
00868     B4 E5 05 F1 | 	add	objptr, ##46004
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     59 00 00 FF 
0087c     B4 E5 85 F1 | 	sub	objptr, ##46004
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     34 E8 B1 FD | 	call	#__system___waitms
0088c     59 00 00 FF 
00890     B4 E5 05 F1 | 	add	objptr, ##46004
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     59 00 00 FF 
008a4     B4 E5 85 F1 | 	sub	objptr, ##46004
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     59 00 00 FF 
008d4     2C E5 05 F1 | 	add	objptr, ##45868
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     59 00 00 FF 
00914     34 E5 85 F1 | 	sub	objptr, ##45876
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     8C DD B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     DC DD B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     CC DD B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     59 00 00 FF 
00980     3C E5 05 F1 | 	add	objptr, ##45884
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     59 00 00 FF 
009ac     58 E5 85 F1 | 	sub	objptr, ##45912
009b0     30 DD B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     59 00 00 FF 
009e0     3C E5 05 F1 | 	add	objptr, ##45884
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     59 00 00 FF 
00a08     58 E5 85 F1 | 	sub	objptr, ##45912
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     37 00 00 FF 
00a30     4C E4 05 F1 | 	add	objptr, ##28236
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     37 00 00 FF 
00a3c     4C E4 85 F1 | 	sub	objptr, ##28236
00a40     28 08 B2 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     60 07 B2 FD | 	call	#__system__LTrim_S
00a4c     37 00 00 FF 
00a50     50 E4 05 F1 | 	add	objptr, ##28240
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     22 00 00 FF 
00a68     7C E5 05 F1 | 	add	objptr, ##17788
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     0F 00 00 FF 
00a74     24 E5 85 F1 | 	sub	objptr, ##7972
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     4A 00 00 FF 
00a80     AC E4 85 F1 | 	sub	objptr, ##38060
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     35 00 00 FF 
00abc     3C E4 05 F1 | 	add	objptr, ##27196
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     72 01 00 FF 
00ad4     12 16 06 F6 | 	mov	arg03, ##@LR__4787
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     37 00 00 FF 
00b14     4C E4 85 F1 | 	sub	objptr, ##28236
00b18     50 07 B2 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     88 06 B2 FD | 	call	#__system__LTrim_S
00b24     37 00 00 FF 
00b28     4C E4 05 F1 | 	add	objptr, ##28236
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     72 01 00 FF 
00b34     13 24 06 F6 | 	mov	local04, ##@LR__4788
00b38     22 00 00 FF 
00b3c     C4 E5 05 F1 | 	add	objptr, ##17860
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     22 00 00 FF 
00b48     C4 E5 85 F1 | 	sub	objptr, ##17860
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     37 00 00 FF 
00b54     4C E4 85 F1 | 	sub	objptr, ##28236
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     5A 00 00 FF 
00b74     14 E4 05 F1 | 	add	objptr, ##46100
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     5A 00 00 FF 
00b80     14 E4 85 F1 | 	sub	objptr, ##46100
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     5A 00 00 FF 
00b8c     18 E4 05 F1 | 	add	objptr, ##46104
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     22 00 00 FF 
00b9c     CC E5 85 F1 | 	sub	objptr, ##17868
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     37 00 00 FF 
00ba8     4C E4 85 F1 | 	sub	objptr, ##28236
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     37 00 00 FF 
00bd8     4C E4 05 F1 | 	add	objptr, ##28236
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     37 00 00 FF 
00be4     4C E4 85 F1 | 	sub	objptr, ##28236
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     00 03 B2 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     72 01 00 FF 
00bfc     14 14 06 F6 | 	mov	arg02, ##@LR__4789
00c00     F0 E1 B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     5A 00 00 FF 
00c10     18 E4 05 F1 | 	add	objptr, ##46104
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     5A 00 00 FF 
00c1c     18 E4 85 F1 | 	sub	objptr, ##46104
00c20     5A 00 00 AF 
00c24     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     5A 00 00 AF 
00c30     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     37 00 00 FF 
00c3c     4C E4 05 F1 | 	add	objptr, ##28236
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     37 00 00 FF 
00c48     4C E4 85 F1 | 	sub	objptr, ##28236
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     9C 02 B2 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     72 01 00 FF 
00c60     16 14 06 F6 | 	mov	arg02, ##@LR__4790
00c64     8C E1 B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     5A 00 00 AF 
00c70     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     5A 00 00 AF 
00c7c     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     5A 00 00 AF 
00c88     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     5A 00 00 AF 
00c94     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     35 00 00 FF 
00ca4     3C E4 05 F1 | 	add	objptr, ##27196
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     24 00 00 FF 
00cb4     DC E5 05 F1 | 	add	objptr, ##18908
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     5A 00 00 FF 
00cc0     18 E4 85 F1 | 	sub	objptr, ##46104
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     37 00 00 FF 
00cdc     4C E4 05 F1 | 	add	objptr, ##28236
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     37 00 00 FF 
00ce8     4C E4 85 F1 | 	sub	objptr, ##28236
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     FC 01 B2 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     72 01 00 FF 
00d00     18 2E 06 F6 | 	mov	local09, ##@LR__4791
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     E8 E0 B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     35 00 00 FF 
00d20     3C E4 05 F1 | 	add	objptr, ##27196
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     35 00 00 FF 
00d40     3C E4 85 F1 | 	sub	objptr, ##27196
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     5A 00 00 FF 
00d4c     14 E4 05 F1 | 	add	objptr, ##46100
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     5A 00 00 FF 
00d58     14 E4 85 F1 | 	sub	objptr, ##46100
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     5A 00 00 FF 
00d70     14 E4 05 F1 | 	add	objptr, ##46100
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     5A 00 00 FF 
00d7c     14 E4 85 F1 | 	sub	objptr, ##46100
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     37 00 00 FF 
00d8c     4C E4 05 F1 | 	add	objptr, ##28236
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     37 00 00 FF 
00d98     4C E4 85 F1 | 	sub	objptr, ##28236
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     9C 00 B2 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     9C 04 B2 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     D4 03 B2 FD | 	call	#__system__LTrim_S
00dd8     5A 00 00 FF 
00ddc     1C E4 05 F1 | 	add	objptr, ##46108
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     22 00 00 FF 
00de8     D0 E5 85 F1 | 	sub	objptr, ##17872
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     37 00 00 FF 
00df4     4C E4 85 F1 | 	sub	objptr, ##28236
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     D8 FF B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     60 04 B2 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     98 03 B2 FD | 	call	#__system__LTrim_S
00e14     37 00 00 FF 
00e18     4C E4 05 F1 | 	add	objptr, ##28236
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     37 00 00 FF 
00e24     4C E4 85 F1 | 	sub	objptr, ##28236
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     72 01 00 FF 
00e30     1A 24 06 F6 | 	mov	local04, ##@LR__4792
00e34     5A 00 00 FF 
00e38     1C E4 05 F1 | 	add	objptr, ##46108
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     5A 00 00 FF 
00e44     1C E4 85 F1 | 	sub	objptr, ##46108
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     37 00 00 FF 
00e4c     54 E4 05 F1 | 	add	objptr, ##28244
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     37 00 00 FF 
00e58     54 E4 85 F1 | 	sub	objptr, ##28244
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     5A 00 00 FF 
00e6c     1C E4 05 F1 | 	add	objptr, ##46108
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     5A 00 00 FF 
00e78     1C E4 85 F1 | 	sub	objptr, ##46108
00e7c     72 01 00 FF 
00e80     1B 14 06 F6 | 	mov	arg02, ##@LR__4793
00e84     6C DF B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     37 00 00 5F 
00e90     54 E4 05 51 |  if_ne	add	objptr, ##28244
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     37 00 00 5F 
00e9c     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     37 00 00 FF 
00ea8     54 E4 05 F1 | 	add	objptr, ##28244
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     37 00 00 FF 
00eb4     54 E4 85 F1 | 	sub	objptr, ##28244
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     5A 00 00 FF 
00ec8     1C E4 05 F1 | 	add	objptr, ##46108
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     5A 00 00 FF 
00ed4     1C E4 85 F1 | 	sub	objptr, ##46108
00ed8     72 01 00 FF 
00edc     1C 14 06 F6 | 	mov	arg02, ##@LR__4794
00ee0     10 DF B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     37 00 00 AF 
00eec     54 E4 05 A1 |  if_e	add	objptr, ##28244
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     37 00 00 AF 
00ef8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     37 00 00 FF 
00f04     54 E4 05 F1 | 	add	objptr, ##28244
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     37 00 00 FF 
00f10     54 E4 85 F1 | 	sub	objptr, ##28244
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     5A 00 00 FF 
00f20     1C E4 05 F1 | 	add	objptr, ##46108
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     5A 00 00 FF 
00f2c     1C E4 85 F1 | 	sub	objptr, ##46108
00f30     72 01 00 FF 
00f34     1D 14 06 F6 | 	mov	arg02, ##@LR__4795
00f38     B8 DE B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     37 00 00 5F 
00f44     54 E4 05 51 |  if_ne	add	objptr, ##28244
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     37 00 00 5F 
00f50     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     37 00 00 FF 
00f5c     54 E4 05 F1 | 	add	objptr, ##28244
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     37 00 00 FF 
00f68     54 E4 85 F1 | 	sub	objptr, ##28244
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     5A 00 00 FF 
00f78     1C E4 05 F1 | 	add	objptr, ##46108
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     5A 00 00 FF 
00f84     1C E4 85 F1 | 	sub	objptr, ##46108
00f88     72 01 00 FF 
00f8c     1E 14 06 F6 | 	mov	arg02, ##@LR__4796
00f90     60 DE B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     37 00 00 AF 
00f9c     54 E4 05 A1 |  if_e	add	objptr, ##28244
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     37 00 00 AF 
00fa8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     37 00 00 FF 
00fc8     4C E4 05 F1 | 	add	objptr, ##28236
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     37 00 00 FF 
00fd4     4C E4 85 F1 | 	sub	objptr, ##28236
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     10 FF B1 FD | 	call	#__system__Mid_S
00fe4     5A 00 00 FF 
00fe8     20 E4 05 F1 | 	add	objptr, ##46112
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     5A 00 00 FF 
00ff8     20 E4 85 F1 | 	sub	objptr, ##46112
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     5A 00 00 FF 
01028     14 E4 05 F1 | 	add	objptr, ##46100
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     5A 00 00 FF 
01034     14 E4 85 F1 | 	sub	objptr, ##46100
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     5A 00 00 FF 
01084     28 E4 05 F1 | 	add	objptr, ##46120
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     5A 00 00 FF 
010b8     28 E4 85 F1 | 	sub	objptr, ##46120
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     37 00 00 FF 
010cc     4C E4 05 F1 | 	add	objptr, ##28236
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     22 00 00 FF 
010d8     DC E5 05 F1 | 	add	objptr, ##17884
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     5A 00 00 FF 
010e4     28 E4 85 F1 | 	sub	objptr, ##46120
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     04 FE B1 FD | 	call	#__system__Mid_S
010f0     5A 00 00 FF 
010f4     30 E4 05 F1 | 	add	objptr, ##46128
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     5A 00 00 FF 
01100     30 E4 85 F1 | 	sub	objptr, ##46128
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     72 01 00 FF 
0110c     1F 14 06 F6 | 	mov	arg02, ##@LR__4797
01110     E0 DC B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     35 00 00 FF 
01128     3C E4 05 F1 | 	add	objptr, ##27196
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     24 00 00 FF 
01134     F4 E5 05 F1 | 	add	objptr, ##18932
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     5A 00 00 FF 
01140     30 E4 85 F1 | 	sub	objptr, ##46128
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     37 00 00 FF 
01150     4C E4 05 F1 | 	add	objptr, ##28236
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     22 00 00 FF 
0115c     DC E5 05 F1 | 	add	objptr, ##17884
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     5A 00 00 FF 
0117c     28 E4 85 F1 | 	sub	objptr, ##46120
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     64 FD B1 FD | 	call	#__system__Mid_S
01190     5A 00 00 FF 
01194     30 E4 05 F1 | 	add	objptr, ##46128
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     5A 00 00 FF 
011a0     30 E4 85 F1 | 	sub	objptr, ##46128
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     72 01 00 FF 
011ac     20 14 06 F6 | 	mov	arg02, ##@LR__4798
011b0     40 DC B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     35 00 00 FF 
011c8     3C E4 05 F1 | 	add	objptr, ##27196
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     24 00 00 FF 
011d4     F4 E5 05 F1 | 	add	objptr, ##18932
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     5A 00 00 FF 
011e0     30 E4 85 F1 | 	sub	objptr, ##46128
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     35 00 00 FF 
01204     3C E4 05 F1 | 	add	objptr, ##27196
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     72 01 00 FF 
01214     21 14 06 F6 | 	mov	arg02, ##@LR__4799
01218     35 00 00 FF 
0121c     3C E4 85 F1 | 	sub	objptr, ##27196
01220     D0 DB B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     35 00 00 FF 
01244     3C E4 05 F1 | 	add	objptr, ##27196
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     24 00 00 FF 
01254     F4 E5 05 F1 | 	add	objptr, ##18932
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     24 00 00 FF 
01268     F4 E5 85 F1 | 	sub	objptr, ##18932
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     35 00 00 FF 
01284     3C E4 85 F1 | 	sub	objptr, ##27196
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     94 DB B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     35 00 00 FF 
012c4     3C E4 05 F1 | 	add	objptr, ##27196
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     35 00 00 FF 
0131c     3C E4 85 F1 | 	sub	objptr, ##27196
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     5A 00 00 FF 
0132c     30 E4 05 F1 | 	add	objptr, ##46128
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     5A 00 00 FF 
01338     30 E4 85 F1 | 	sub	objptr, ##46128
0133c     72 01 00 FF 
01340     23 14 06 F6 | 	mov	arg02, ##@LR__4800
01344     AC DA B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     5A 00 00 FF 
01358     30 E4 05 F1 | 	add	objptr, ##46128
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     5A 00 00 FF 
01364     30 E4 85 F1 | 	sub	objptr, ##46128
01368     72 01 00 FF 
0136c     25 14 06 F6 | 	mov	arg02, ##@LR__4801
01370     80 DA B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     35 00 00 FF 
01398     3C E4 05 F1 | 	add	objptr, ##27196
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     35 00 00 FF 
013ac     3C E4 85 F1 | 	sub	objptr, ##27196
013b0     B0 FA B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     72 01 00 FF 
013bc     27 14 06 F6 | 	mov	arg02, ##@LR__4802
013c0     30 DA B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     35 00 00 FF 
013dc     3C E4 05 F1 | 	add	objptr, ##27196
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     35 00 00 FF 
013f4     3C E4 85 F1 | 	sub	objptr, ##27196
013f8     E0 F9 B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     72 01 00 FF 
01404     29 14 06 F6 | 	mov	arg02, ##@LR__4803
01408     E8 D9 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     35 00 00 FF 
01420     3C E4 05 F1 | 	add	objptr, ##27196
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     35 00 00 FF 
0146c     3C E4 85 F1 | 	sub	objptr, ##27196
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     C8 F9 B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     7C D9 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     35 00 00 FF 
014dc     3C E4 05 F1 | 	add	objptr, ##27196
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     35 00 00 FF 
01534     3C E4 85 F1 | 	sub	objptr, ##27196
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     35 00 00 FF 
01560     3C E4 05 F1 | 	add	objptr, ##27196
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     24 00 00 FF 
01570     FC E5 05 F1 | 	add	objptr, ##18940
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     24 00 00 FF 
01588     FC E5 85 F1 | 	sub	objptr, ##18940
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     25 00 00 FF 
01598     00 E4 05 F1 | 	add	objptr, ##18944
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     5A 00 00 FF 
015ac     38 E4 85 F1 | 	sub	objptr, ##46136
015b0     72 01 00 FF 
015b4     2B 14 06 F6 | 	mov	arg02, ##@LR__4804
015b8     38 D8 B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     5A 00 00 FF 
015c8     38 E4 05 F1 | 	add	objptr, ##46136
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     5A 00 00 FF 
015d4     38 E4 85 F1 | 	sub	objptr, ##46136
015d8     72 01 00 FF 
015dc     2D 14 06 F6 | 	mov	arg02, ##@LR__4805
015e0     10 D8 B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     5A 00 00 FF 
015f0     38 E4 05 F1 | 	add	objptr, ##46136
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     5A 00 00 FF 
015fc     38 E4 85 F1 | 	sub	objptr, ##46136
01600     72 01 00 FF 
01604     2F 14 06 F6 | 	mov	arg02, ##@LR__4806
01608     E8 D7 B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     5A 00 00 FF 
01618     38 E4 05 F1 | 	add	objptr, ##46136
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     5A 00 00 FF 
01624     38 E4 85 F1 | 	sub	objptr, ##46136
01628     72 01 00 FF 
0162c     31 32 06 F6 | 	mov	local11, ##@LR__4807
01630     19 15 02 F6 | 	mov	arg02, local11
01634     BC D7 B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     5A 00 00 FF 
01644     38 E4 05 F1 | 	add	objptr, ##46136
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     5A 00 00 FF 
01650     38 E4 85 F1 | 	sub	objptr, ##46136
01654     72 01 00 FF 
01658     33 30 06 F6 | 	mov	local10, ##@LR__4808
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     8C D7 B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     5A 00 00 FF 
01674     38 E4 05 F1 | 	add	objptr, ##46136
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     5A 00 00 FF 
01680     38 E4 85 F1 | 	sub	objptr, ##46136
01684     72 01 00 FF 
01688     35 30 06 F6 | 	mov	local10, ##@LR__4809
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     60 D7 B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     5A 00 00 FF 
016a0     38 E4 05 F1 | 	add	objptr, ##46136
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     5A 00 00 FF 
016ac     38 E4 85 F1 | 	sub	objptr, ##46136
016b0     72 01 00 FF 
016b4     37 36 06 F6 | 	mov	local13, ##@LR__4810
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     34 D7 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     5A 00 00 FF 
016cc     3C E4 05 F1 | 	add	objptr, ##46140
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     5A 00 00 FF 
016d8     3C E4 85 F1 | 	sub	objptr, ##46140
016dc     72 01 00 FF 
016e0     39 4A 06 F6 | 	mov	local23, ##@LR__4811
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     04 D7 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     5A 00 00 FF 
016fc     38 E4 05 F1 | 	add	objptr, ##46136
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     5A 00 00 FF 
01708     38 E4 85 F1 | 	sub	objptr, ##46136
0170c     72 01 00 FF 
01710     3B 4A 06 F6 | 	mov	local23, ##@LR__4812
01714     25 15 02 F6 | 	mov	arg02, local23
01718     D8 D6 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     5A 00 00 FF 
01728     3C E4 05 F1 | 	add	objptr, ##46140
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     5A 00 00 FF 
01734     3C E4 85 F1 | 	sub	objptr, ##46140
01738     72 01 00 FF 
0173c     3D 44 06 F6 | 	mov	local20, ##@LR__4813
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     A8 D6 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     5A 00 00 FF 
01758     38 E4 05 F1 | 	add	objptr, ##46136
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     5A 00 00 FF 
01764     38 E4 85 F1 | 	sub	objptr, ##46136
01768     72 01 00 FF 
0176c     3F 44 06 F6 | 	mov	local20, ##@LR__4814
01770     22 15 02 F6 | 	mov	arg02, local20
01774     7C D6 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     5A 00 00 FF 
01784     3C E4 05 F1 | 	add	objptr, ##46140
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     5A 00 00 FF 
01790     3C E4 85 F1 | 	sub	objptr, ##46140
01794     72 01 00 FF 
01798     41 4C 06 F6 | 	mov	local24, ##@LR__4815
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     4C D6 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     5A 00 00 FF 
017b4     38 E4 05 F1 | 	add	objptr, ##46136
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     5A 00 00 FF 
017c0     38 E4 85 F1 | 	sub	objptr, ##46136
017c4     72 01 00 FF 
017c8     43 4E 06 F6 | 	mov	local25, ##@LR__4816
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     1C D6 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     5A 00 00 FF 
017e4     3C E4 05 F1 | 	add	objptr, ##46140
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     5A 00 00 FF 
017f0     3C E4 85 F1 | 	sub	objptr, ##46140
017f4     72 01 00 FF 
017f8     45 50 06 F6 | 	mov	local26, ##@LR__4817
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     EC D5 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     35 00 00 FF 
0181c     3C E4 05 F1 | 	add	objptr, ##27196
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     24 00 00 FF 
01828     FC E5 05 F1 | 	add	objptr, ##18940
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     5A 00 00 FF 
0183c     3C E4 85 F1 | 	sub	objptr, ##46140
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     DC D5 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     35 00 00 FF 
0187c     3C E4 05 F1 | 	add	objptr, ##27196
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     35 00 00 FF 
018e0     3C E4 85 F1 | 	sub	objptr, ##27196
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     35 00 00 FF 
0191c     3C E4 05 F1 | 	add	objptr, ##27196
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     35 00 00 FF 
01944     3C E4 85 F1 | 	sub	objptr, ##27196
01948     20 F9 B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     58 F8 B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     35 00 00 FF 
01978     3C E4 05 F1 | 	add	objptr, ##27196
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     35 00 00 FF 
01988     3C E4 85 F1 | 	sub	objptr, ##27196
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     35 00 00 FF 
019ec     3C E4 05 F1 | 	add	objptr, ##27196
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     35 00 00 FF 
01a54     3C E4 85 F1 | 	sub	objptr, ##27196
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     35 00 00 FF 
01a98     3C E4 05 F1 | 	add	objptr, ##27196
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     35 00 00 FF 
01aac     3C E4 85 F1 | 	sub	objptr, ##27196
01ab0     28 F3 B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     72 01 00 FF 
01abc     47 14 06 F6 | 	mov	arg02, ##@LR__4818
01ac0     30 D3 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     35 00 00 FF 
01ad8     3C E4 05 F1 | 	add	objptr, ##27196
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     35 00 00 FF 
01aec     3C E4 85 F1 | 	sub	objptr, ##27196
01af0     70 F3 B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     72 01 00 FF 
01afc     49 14 06 F6 | 	mov	arg02, ##@LR__4819
01b00     F0 D2 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     35 00 00 FF 
01b18     3C E4 05 F1 | 	add	objptr, ##27196
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     35 00 00 FF 
01b38     3C E4 85 F1 | 	sub	objptr, ##27196
01b3c     AC F5 B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     35 00 00 FF 
01b70     3C E4 05 F1 | 	add	objptr, ##27196
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     35 00 00 FF 
01b8c     3C E4 85 F1 | 	sub	objptr, ##27196
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     35 00 00 FF 
01b98     3C E4 05 F1 | 	add	objptr, ##27196
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     35 00 00 FF 
01ba4     3C E4 85 F1 | 	sub	objptr, ##27196
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     35 00 00 FF 
01bc8     3C E4 05 F1 | 	add	objptr, ##27196
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     35 00 00 FF 
01bd4     3C E4 85 F1 | 	sub	objptr, ##27196
01bd8     00 38 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     5A 00 00 5F 
01be4     40 E4 05 51 |  if_ne	add	objptr, ##46144
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     5A 00 00 FF 
01bf0     40 E4 E5 F3 | 	sumnz	objptr, ##46144
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     5A 00 00 AF 
01bfc     40 E4 85 A1 |  if_e	sub	objptr, ##46144
01c00     5A 00 00 FF 
01c04     40 E4 05 F1 | 	add	objptr, ##46144
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     25 00 00 FF 
01c14     04 E4 85 F1 | 	sub	objptr, ##18948
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     25 00 00 FF 
01c24     08 E4 05 F1 | 	add	objptr, ##18952
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     25 00 00 FF 
01c3c     04 E4 85 F1 | 	sub	objptr, ##18948
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     72 01 00 FF 
01c50     4B 16 06 F6 | 	mov	arg03, ##@LR__4820
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     35 00 00 FF 
01c5c     3C E4 85 F1 | 	sub	objptr, ##27196
01c60     C0 F6 B1 FD | 	call	#__system__Instr
01c64     5A 00 00 FF 
01c68     48 E4 05 F1 | 	add	objptr, ##46152
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     5A 00 00 FF 
01c78     48 E4 85 F1 | 	sub	objptr, ##46152
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     5A 00 00 FF 
01c88     40 E4 05 F1 | 	add	objptr, ##46144
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     25 00 00 FF 
01c98     04 E4 85 F1 | 	sub	objptr, ##18948
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     35 00 00 FF 
01cac     3C E4 85 F1 | 	sub	objptr, ##27196
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     5A 00 00 FF 
01cd0     48 E4 05 F1 | 	add	objptr, ##46152
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     5A 00 00 FF 
01cdc     48 E4 85 F1 | 	sub	objptr, ##46152
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     5A 00 00 FF 
01cf4     40 E4 05 F1 | 	add	objptr, ##46144
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     25 00 00 FF 
01d04     04 E4 85 F1 | 	sub	objptr, ##18948
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     25 00 00 FF 
01d6c     04 E4 05 F1 | 	add	objptr, ##18948
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     25 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##18948
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     25 00 00 FF 
01d9c     04 E4 05 F1 | 	add	objptr, ##18948
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     25 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##18948
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     35 00 00 FF 
01dc4     3C E4 85 F1 | 	sub	objptr, ##27196
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     5A 00 00 FF 
01de8     48 E4 05 F1 | 	add	objptr, ##46152
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     5A 00 00 FF 
01df4     48 E4 85 F1 | 	sub	objptr, ##46152
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     60 F0 B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     5A 00 00 FF 
01e0c     40 E4 05 F1 | 	add	objptr, ##46144
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     25 00 00 FF 
01e20     04 E4 85 F1 | 	sub	objptr, ##18948
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     25 00 00 FF 
01e40     0C E4 05 F1 | 	add	objptr, ##18956
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     5A 00 00 FF 
01e4c     48 E4 85 F1 | 	sub	objptr, ##46152
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     80 EF B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     5A 00 00 FF 
01e64     40 E4 05 F1 | 	add	objptr, ##46144
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     25 00 00 FF 
01e74     04 E4 85 F1 | 	sub	objptr, ##18948
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     35 00 00 FF 
01e88     3C E4 85 F1 | 	sub	objptr, ##27196
01e8c     4C EF B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     72 01 00 FF 
01e98     4D 14 06 F6 | 	mov	arg02, ##@LR__4821
01e9c     54 CF B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     5A 00 00 FF 
01eac     40 E4 05 F1 | 	add	objptr, ##46144
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     25 00 00 FF 
01ebc     04 E4 85 F1 | 	sub	objptr, ##18948
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     35 00 00 FF 
01ed0     3C E4 85 F1 | 	sub	objptr, ##27196
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     5A 00 00 FF 
01f00     40 E4 05 F1 | 	add	objptr, ##46144
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     25 00 00 FF 
01f10     04 E4 85 F1 | 	sub	objptr, ##18948
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     25 00 00 FF 
01f78     04 E4 05 F1 | 	add	objptr, ##18948
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     25 00 00 FF 
01f90     04 E4 85 F1 | 	sub	objptr, ##18948
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     25 00 00 FF 
01fa8     04 E4 05 F1 | 	add	objptr, ##18948
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     25 00 00 FF 
01fc4     04 E4 85 F1 | 	sub	objptr, ##18948
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     35 00 00 FF 
01fd8     3C E4 85 F1 | 	sub	objptr, ##27196
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     54 EE B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     5A 00 00 FF 
02018     40 E4 05 F1 | 	add	objptr, ##46144
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     25 00 00 FF 
02028     04 E4 85 F1 | 	sub	objptr, ##18948
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     72 01 00 FF 
02034     4F 32 06 F6 | 	mov	local11, ##@LR__4822
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     35 00 00 FF 
02040     3C E4 85 F1 | 	sub	objptr, ##27196
02044                 | LR__0107
02044     5A 00 00 FF 
02048     40 E4 05 F1 | 	add	objptr, ##46144
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     25 00 00 FF 
02058     04 E4 85 F1 | 	sub	objptr, ##18948
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     25 00 00 FF 
02068     08 E4 05 F1 | 	add	objptr, ##18952
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     5A 00 00 FF 
02074     44 E4 85 F1 | 	sub	objptr, ##46148
02078     72 01 00 FF 
0207c     51 14 06 F6 | 	mov	arg02, ##@LR__4823
02080     19 13 02 F6 | 	mov	arg01, local11
02084     6C CD B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     5A 00 00 FF 
02094     44 E4 05 F1 | 	add	objptr, ##46148
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     5A 00 00 FF 
020a0     44 E4 85 F1 | 	sub	objptr, ##46148
020a4     72 01 00 FF 
020a8     57 14 06 F6 | 	mov	arg02, ##@LR__4824
020ac     44 CD B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     5A 00 00 FF 
020bc     44 E4 05 F1 | 	add	objptr, ##46148
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     5A 00 00 FF 
020c8     44 E4 85 F1 | 	sub	objptr, ##46148
020cc     72 01 00 FF 
020d0     5E 14 06 F6 | 	mov	arg02, ##@LR__4825
020d4     1C CD B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     5A 00 00 FF 
020e4     40 E4 05 F1 | 	add	objptr, ##46144
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     25 00 00 FF 
020f8     04 E4 85 F1 | 	sub	objptr, ##18948
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     72 01 00 FF 
02108     64 14 06 F6 | 	mov	arg02, ##@LR__4826
0210c     35 00 00 FF 
02110     3C E4 85 F1 | 	sub	objptr, ##27196
02114     DC CC B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     5A 00 00 FF 
02124     40 E4 05 F1 | 	add	objptr, ##46144
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     25 00 00 FF 
02138     04 E4 85 F1 | 	sub	objptr, ##18948
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     72 01 00 FF 
02144     67 32 06 F6 | 	mov	local11, ##@LR__4827
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     25 00 00 FF 
02150     04 E4 05 F1 | 	add	objptr, ##18948
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     25 00 00 FF 
02164     04 E4 85 F1 | 	sub	objptr, ##18948
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     35 00 00 FF 
0217c     3C E4 85 F1 | 	sub	objptr, ##27196
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     5A 00 00 FF 
02184     40 E4 05 F1 | 	add	objptr, ##46144
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     25 00 00 FF 
02198     04 E4 85 F1 | 	sub	objptr, ##18948
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     72 01 00 FF 
021ac     69 14 06 F6 | 	mov	arg02, ##@LR__4828
021b0     35 00 00 FF 
021b4     3C E4 85 F1 | 	sub	objptr, ##27196
021b8     38 CC B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     5A 00 00 FF 
021c8     40 E4 05 F1 | 	add	objptr, ##46144
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     25 00 00 FF 
021dc     04 E4 85 F1 | 	sub	objptr, ##18948
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     72 01 00 FF 
021e8     6D 32 06 F6 | 	mov	local11, ##@LR__4829
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     25 00 00 FF 
021f4     04 E4 05 F1 | 	add	objptr, ##18948
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     25 00 00 FF 
02208     04 E4 85 F1 | 	sub	objptr, ##18948
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     35 00 00 FF 
02224     3C E4 85 F1 | 	sub	objptr, ##27196
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     5A 00 00 FF 
0222c     44 E4 05 F1 | 	add	objptr, ##46148
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     5A 00 00 FF 
02238     44 E4 85 F1 | 	sub	objptr, ##46148
0223c     72 01 00 FF 
02240     6F 14 06 F6 | 	mov	arg02, ##@LR__4830
02244     AC CB B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     5A 00 00 FF 
02254     44 E4 05 F1 | 	add	objptr, ##46148
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     5A 00 00 FF 
02260     44 E4 85 F1 | 	sub	objptr, ##46148
02264     72 01 00 FF 
02268     74 14 06 F6 | 	mov	arg02, ##@LR__4831
0226c     84 CB B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     5A 00 00 FF 
0227c     40 E4 05 F1 | 	add	objptr, ##46144
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     25 00 00 FF 
02290     04 E4 85 F1 | 	sub	objptr, ##18948
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     72 01 00 FF 
022a0     77 14 06 F6 | 	mov	arg02, ##@LR__4832
022a4     35 00 00 FF 
022a8     3C E4 85 F1 | 	sub	objptr, ##27196
022ac     44 CB B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     5A 00 00 FF 
022bc     40 E4 05 F1 | 	add	objptr, ##46144
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     25 00 00 FF 
022d0     04 E4 85 F1 | 	sub	objptr, ##18948
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     72 01 00 FF 
022dc     7D 32 06 F6 | 	mov	local11, ##@LR__4833
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     35 00 00 FF 
022e8     3C E4 85 F1 | 	sub	objptr, ##27196
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     5A 00 00 FF 
022f0     40 E4 05 F1 | 	add	objptr, ##46144
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     25 00 00 FF 
02304     04 E4 85 F1 | 	sub	objptr, ##18948
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     72 01 00 FF 
02314     7F 14 06 F6 | 	mov	arg02, ##@LR__4834
02318     35 00 00 FF 
0231c     3C E4 85 F1 | 	sub	objptr, ##27196
02320     D0 CA B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     5A 00 00 FF 
02330     40 E4 05 F1 | 	add	objptr, ##46144
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     25 00 00 FF 
02344     04 E4 85 F1 | 	sub	objptr, ##18948
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     72 01 00 FF 
02350     88 32 06 F6 | 	mov	local11, ##@LR__4835
02354     13 33 62 FC | 	wrlong	local11, local05
02358     35 00 00 FF 
0235c     3C E4 85 F1 | 	sub	objptr, ##27196
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     5A 00 00 FF 
02364     40 E4 05 F1 | 	add	objptr, ##46144
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     25 00 00 FF 
02378     04 E4 85 F1 | 	sub	objptr, ##18948
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     72 01 00 FF 
02388     8A 14 06 F6 | 	mov	arg02, ##@LR__4836
0238c     35 00 00 FF 
02390     3C E4 85 F1 | 	sub	objptr, ##27196
02394     5C CA B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     5A 00 00 FF 
023a4     40 E4 05 F1 | 	add	objptr, ##46144
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     25 00 00 FF 
023b8     04 E4 85 F1 | 	sub	objptr, ##18948
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     72 01 00 FF 
023c4     93 32 06 F6 | 	mov	local11, ##@LR__4837
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     35 00 00 FF 
023d0     3C E4 85 F1 | 	sub	objptr, ##27196
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     5A 00 00 FF 
023d8     40 E4 05 F1 | 	add	objptr, ##46144
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     25 00 00 FF 
023ec     04 E4 85 F1 | 	sub	objptr, ##18948
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     72 01 00 FF 
023fc     95 14 06 F6 | 	mov	arg02, ##@LR__4838
02400     35 00 00 FF 
02404     3C E4 85 F1 | 	sub	objptr, ##27196
02408     E8 C9 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     5A 00 00 FF 
02418     40 E4 05 F1 | 	add	objptr, ##46144
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     25 00 00 FF 
0242c     04 E4 85 F1 | 	sub	objptr, ##18948
02430     F2 26 02 F1 | 	add	local05, objptr
02434     72 01 00 FF 
02438     9E 32 06 F6 | 	mov	local11, ##@LR__4839
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     35 00 00 FF 
02444     3C E4 85 F1 | 	sub	objptr, ##27196
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     5A 00 00 FF 
0244c     40 E4 05 F1 | 	add	objptr, ##46144
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     25 00 00 FF 
02460     04 E4 85 F1 | 	sub	objptr, ##18948
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     72 01 00 FF 
02474     A0 14 06 F6 | 	mov	arg02, ##@LR__4840
02478     35 00 00 FF 
0247c     3C E4 85 F1 | 	sub	objptr, ##27196
02480     70 C9 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     5A 00 00 FF 
02490     40 E4 05 F1 | 	add	objptr, ##46144
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     25 00 00 FF 
024a4     04 E4 85 F1 | 	sub	objptr, ##18948
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     72 01 00 FF 
024b0     A3 32 06 F6 | 	mov	local11, ##@LR__4841
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     35 00 00 FF 
024bc     3C E4 85 F1 | 	sub	objptr, ##27196
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     35 00 00 FF 
024dc     3C E4 05 F1 | 	add	objptr, ##27196
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     35 00 00 FF 
02500     3C E4 85 F1 | 	sub	objptr, ##27196
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     35 00 00 FF 
02520     3C E4 05 F1 | 	add	objptr, ##27196
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     35 00 00 FF 
02538     3C E4 85 F1 | 	sub	objptr, ##27196
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     35 00 00 FF 
0254c     3C E4 05 F1 | 	add	objptr, ##27196
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     35 00 00 FF 
02570     3C E4 85 F1 | 	sub	objptr, ##27196
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     35 00 00 FF 
02590     3C E4 05 F1 | 	add	objptr, ##27196
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     35 00 00 FF 
025a8     3C E4 85 F1 | 	sub	objptr, ##27196
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     35 00 00 FF 
025bc     3C E4 05 F1 | 	add	objptr, ##27196
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     35 00 00 FF 
025e0     3C E4 85 F1 | 	sub	objptr, ##27196
025e4                 | ' 
025e4                 | ' select case s
025e4     72 01 00 FF 
025e8     84 15 06 F6 | 	mov	arg02, ##@LR__4912
025ec     04 C8 B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     35 00 00 FF 
02614     3C E4 05 F1 | 	add	objptr, ##27196
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     35 00 00 FF 
0262c     3C E4 85 F1 | 	sub	objptr, ##27196
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     35 00 00 FF 
02640     3C E4 05 F1 | 	add	objptr, ##27196
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     35 00 00 FF 
02664     3C E4 85 F1 | 	sub	objptr, ##27196
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     35 00 00 FF 
02684     3C E4 05 F1 | 	add	objptr, ##27196
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     35 00 00 FF 
0269c     3C E4 85 F1 | 	sub	objptr, ##27196
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     35 00 00 FF 
026b0     3C E4 05 F1 | 	add	objptr, ##27196
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     35 00 00 FF 
026d4     3C E4 85 F1 | 	sub	objptr, ##27196
026d8     FC 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     35 00 00 FF 
026f4     3C E4 05 F1 | 	add	objptr, ##27196
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     35 00 00 FF 
0270c     3C E4 85 F1 | 	sub	objptr, ##27196
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     35 00 00 FF 
02720     3C E4 05 F1 | 	add	objptr, ##27196
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     35 00 00 FF 
02744     3C E4 85 F1 | 	sub	objptr, ##27196
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     35 00 00 FF 
02760     3C E4 05 F1 | 	add	objptr, ##27196
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     35 00 00 FF 
02778     3C E4 85 F1 | 	sub	objptr, ##27196
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     35 00 00 FF 
0278c     3C E4 05 F1 | 	add	objptr, ##27196
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     35 00 00 FF 
027a4     3C E4 85 F1 | 	sub	objptr, ##27196
027a8     C0 7D B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     35 00 00 FF 
027bc     3C E4 05 F1 | 	add	objptr, ##27196
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     35 00 00 FF 
027cc     3C E4 85 F1 | 	sub	objptr, ##27196
027d0     00 E8 B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     35 00 00 FF 
027e8     3C E4 05 F1 | 	add	objptr, ##27196
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     35 00 00 FF 
02800     3C E4 85 F1 | 	sub	objptr, ##27196
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     35 00 00 FF 
02814     3C E4 05 F1 | 	add	objptr, ##27196
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     35 00 00 FF 
02824     3C E4 85 F1 | 	sub	objptr, ##27196
02828     80 27 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     5A 00 00 FF 
02834     4C E4 05 F1 | 	add	objptr, ##46156
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     25 00 00 FF 
02848     10 E4 85 F1 | 	sub	objptr, ##18960
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     35 00 00 FF 
02858     3C E4 85 F1 | 	sub	objptr, ##27196
0285c     24 2A B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     5A 00 00 FF 
02868     50 E4 05 F1 | 	add	objptr, ##46160
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     25 00 00 FF 
0287c     14 E4 85 F1 | 	sub	objptr, ##18964
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     35 00 00 FF 
02890     3C E4 85 F1 | 	sub	objptr, ##27196
02894     44 2B B0 FD | 	call	#_isdec
02898     5A 00 00 FF 
0289c     54 E4 05 F1 | 	add	objptr, ##46164
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     5A 00 00 FF 
028b0     4C E4 85 F1 | 	sub	objptr, ##46156
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     5A 00 00 FF 
028bc     50 E4 05 F1 | 	add	objptr, ##46160
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     5A 00 00 FF 
028c8     50 E4 85 F1 | 	sub	objptr, ##46160
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     5A 00 00 FF 
028d4     54 E4 05 F1 | 	add	objptr, ##46164
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     5A 00 00 FF 
028e0     54 E4 85 F1 | 	sub	objptr, ##46164
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     35 00 00 FF 
028f8     3C E4 05 F1 | 	add	objptr, ##27196
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     35 00 00 FF 
02910     3C E4 85 F1 | 	sub	objptr, ##27196
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     5A 00 00 FF 
0291c     4C E4 05 F1 | 	add	objptr, ##46156
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     5A 00 00 FF 
02928     4C E4 85 F1 | 	sub	objptr, ##46156
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     5A 00 00 FF 
02934     50 E4 05 F1 | 	add	objptr, ##46160
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     5A 00 00 FF 
02940     50 E4 85 F1 | 	sub	objptr, ##46160
02944     5A 00 00 5F 
02948     54 E4 05 51 |  if_ne	add	objptr, ##46164
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     5A 00 00 5F 
02954     54 E4 85 51 |  if_ne	sub	objptr, ##46164
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     35 00 00 FF 
02974     3C E4 05 F1 | 	add	objptr, ##27196
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     35 00 00 FF 
0298c     3C E4 85 F1 | 	sub	objptr, ##27196
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     5A 00 00 FF 
02998     4C E4 05 F1 | 	add	objptr, ##46156
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     5A 00 00 FF 
029a4     4C E4 85 F1 | 	sub	objptr, ##46156
029a8     5A 00 00 5F 
029ac     50 E4 05 51 |  if_ne	add	objptr, ##46160
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     5A 00 00 5F 
029b8     50 E4 85 51 |  if_ne	sub	objptr, ##46160
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     5A 00 00 5F 
029c8     54 E4 05 51 |  if_ne	add	objptr, ##46164
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     5A 00 00 5F 
029d4     54 E4 85 51 |  if_ne	sub	objptr, ##46164
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     35 00 00 FF 
029f4     3C E4 05 F1 | 	add	objptr, ##27196
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     35 00 00 FF 
02a0c     3C E4 85 F1 | 	sub	objptr, ##27196
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     35 00 00 FF 
02a20     3C E4 05 F1 | 	add	objptr, ##27196
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     35 00 00 FF 
02a30     3C E4 85 F1 | 	sub	objptr, ##27196
02a34     64 2A B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     35 00 00 FF 
02a4c     3C E4 05 F1 | 	add	objptr, ##27196
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     35 00 00 FF 
02aa4     3C E4 85 F1 | 	sub	objptr, ##27196
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     1C E4 B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     35 00 00 FF 
02af0     3C E4 05 F1 | 	add	objptr, ##27196
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     35 00 00 FF 
02b00     3C E4 85 F1 | 	sub	objptr, ##27196
02b04     30 22 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     35 00 00 FF 
02b20     3C E4 05 F1 | 	add	objptr, ##27196
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     35 00 00 FF 
02b38     3C E4 85 F1 | 	sub	objptr, ##27196
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     35 00 00 FF 
02b50     3C E4 05 F1 | 	add	objptr, ##27196
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     72 01 00 FF 
02b74     A5 28 06 F6 | 	mov	local06, ##@LR__4842
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     14 00 00 FF 
02b8c     B4 E5 05 F1 | 	add	objptr, ##10676
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     5A 00 00 FF 
02b98     44 E4 85 F1 | 	sub	objptr, ##46148
02b9c     72 01 00 FF 
02ba0     A6 2E 06 F6 | 	mov	local09, ##@LR__4843
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     48 C2 B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     5A 00 00 FF 
02bb8     44 E4 05 F1 | 	add	objptr, ##46148
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     5A 00 00 FF 
02bc4     44 E4 85 F1 | 	sub	objptr, ##46148
02bc8     72 01 00 FF 
02bcc     AB 26 06 F6 | 	mov	local05, ##@LR__4844
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     18 C2 B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     5A 00 00 FF 
02be8     44 E4 05 F1 | 	add	objptr, ##46148
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     5A 00 00 FF 
02bf4     44 E4 85 F1 | 	sub	objptr, ##46148
02bf8     72 01 00 FF 
02bfc     B0 28 06 F6 | 	mov	local06, ##@LR__4845
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     E8 C1 B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     5A 00 00 FF 
02c18     44 E4 05 F1 | 	add	objptr, ##46148
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     5A 00 00 FF 
02c24     44 E4 85 F1 | 	sub	objptr, ##46148
02c28     72 01 00 FF 
02c2c     B5 32 06 F6 | 	mov	local11, ##@LR__4846
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     B8 C1 B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     5A 00 00 FF 
02c48     44 E4 05 F1 | 	add	objptr, ##46148
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     5A 00 00 FF 
02c54     44 E4 85 F1 | 	sub	objptr, ##46148
02c58     72 01 00 FF 
02c5c     B9 30 06 F6 | 	mov	local10, ##@LR__4847
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     88 C1 B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     5A 00 00 FF 
02c78     44 E4 05 F1 | 	add	objptr, ##46148
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     5A 00 00 FF 
02c84     44 E4 85 F1 | 	sub	objptr, ##46148
02c88     72 01 00 FF 
02c8c     BD 30 06 F6 | 	mov	local10, ##@LR__4848
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     5C C1 B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     5A 00 00 FF 
02ca4     44 E4 05 F1 | 	add	objptr, ##46148
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     5A 00 00 FF 
02cb0     44 E4 85 F1 | 	sub	objptr, ##46148
02cb4     72 01 00 FF 
02cb8     C0 34 06 F6 | 	mov	local12, ##@LR__4849
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     2C C1 B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     5A 00 00 FF 
02cd4     40 E4 05 F1 | 	add	objptr, ##46144
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     25 00 00 FF 
02cf4     04 E4 85 F1 | 	sub	objptr, ##18948
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     35 00 00 FF 
02d1c     3C E4 85 F1 | 	sub	objptr, ##27196
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     5A 00 00 FF 
02d28     40 E4 05 F1 | 	add	objptr, ##46144
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     25 00 00 FF 
02d40     04 E4 85 F1 | 	sub	objptr, ##18948
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     35 00 00 FF 
02d68     3C E4 85 F1 | 	sub	objptr, ##27196
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     35 00 00 FF 
02d70     3C E4 05 F1 | 	add	objptr, ##27196
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     35 00 00 FF 
02d7c     3C E4 85 F1 | 	sub	objptr, ##27196
02d80     58 26 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     35 00 00 FF 
02d90     3C E4 05 F1 | 	add	objptr, ##27196
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     35 00 00 FF 
02d9c     3C E4 85 F1 | 	sub	objptr, ##27196
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     E4 F1 B1 FD | 	call	#__system____builtin_atoi
02da8     59 00 00 FF 
02dac     D0 E5 05 F1 | 	add	objptr, ##46032
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     59 00 00 FF 
02db8     D0 E5 85 F1 | 	sub	objptr, ##46032
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     59 00 00 FF 
02dc0     D0 E5 05 F1 | 	add	objptr, ##46032
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     59 00 00 FF 
02dcc     D0 E5 85 F1 | 	sub	objptr, ##46032
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     37 00 00 AF 
02de0     54 E4 05 A1 |  if_e	add	objptr, ##28244
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     37 00 00 AF 
02dec     54 E4 85 A1 |  if_e	sub	objptr, ##28244
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     59 00 00 FF 
02dfc     D0 E5 05 F1 | 	add	objptr, ##46032
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     59 00 00 FF 
02e08     D0 E5 85 F1 | 	sub	objptr, ##46032
02e0c     F0 26 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     59 00 00 FF 
02e18     D0 E5 05 F1 | 	add	objptr, ##46032
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     59 00 00 FF 
02e24     D0 E5 85 F1 | 	sub	objptr, ##46032
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     37 00 00 FF 
02e34     54 E4 05 F1 | 	add	objptr, ##28244
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     37 00 00 FF 
02e40     54 E4 85 F1 | 	sub	objptr, ##28244
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     37 00 00 FF 
02e50     54 E4 05 F1 | 	add	objptr, ##28244
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     37 00 00 FF 
02e5c     54 E4 85 F1 | 	sub	objptr, ##28244
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     35 00 00 FF 
02e70     50 E4 05 F1 | 	add	objptr, ##27216
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     35 00 00 FF 
02e7c     50 E4 85 F1 | 	sub	objptr, ##27216
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     59 00 00 FF 
02e90     D0 E5 05 F1 | 	add	objptr, ##46032
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     22 00 00 FF 
02e9c     7C E5 85 F1 | 	sub	objptr, ##17788
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     37 00 00 FF 
02ea8     54 E4 85 F1 | 	sub	objptr, ##28244
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     CC 3A B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     60 7A B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     5A 00 00 FF 
02ecc     1C E4 05 F1 | 	add	objptr, ##46108
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     5A 00 00 FF 
02ed8     1C E4 85 F1 | 	sub	objptr, ##46108
02edc     72 01 00 FF 
02ee0     C4 14 06 F6 | 	mov	arg02, ##@LR__4850
02ee4     0C BF B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     5A 00 00 FF 
02ef4     1C E4 05 F1 | 	add	objptr, ##46108
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     22 00 00 FF 
02f00     D0 E5 85 F1 | 	sub	objptr, ##17872
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     37 00 00 FF 
02f14     54 E4 85 F1 | 	sub	objptr, ##28244
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     59 00 00 FF 
02f20     D0 E5 05 F1 | 	add	objptr, ##46032
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     59 00 00 FF 
02f2c     D0 E5 85 F1 | 	sub	objptr, ##46032
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     37 00 00 FF 
02f3c     54 E4 05 F1 | 	add	objptr, ##28244
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     37 00 00 FF 
02f48     54 E4 85 F1 | 	sub	objptr, ##28244
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     37 00 00 FF 
02f58     54 E4 05 F1 | 	add	objptr, ##28244
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     37 00 00 FF 
02f64     54 E4 85 F1 | 	sub	objptr, ##28244
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     35 00 00 FF 
02f78     48 E4 05 F1 | 	add	objptr, ##27208
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     35 00 00 FF 
02f84     48 E4 85 F1 | 	sub	objptr, ##27208
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     59 00 00 FF 
02f98     D0 E5 05 F1 | 	add	objptr, ##46032
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     22 00 00 FF 
02fa4     7C E5 85 F1 | 	sub	objptr, ##17788
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     37 00 00 FF 
02fb0     54 E4 85 F1 | 	sub	objptr, ##28244
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     C4 39 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     58 79 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     5A 00 00 FF 
02fd4     1C E4 05 F1 | 	add	objptr, ##46108
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     5A 00 00 FF 
02fe0     1C E4 85 F1 | 	sub	objptr, ##46108
02fe4     72 01 00 FF 
02fe8     C5 14 06 F6 | 	mov	arg02, ##@LR__4851
02fec     04 BE B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     5A 00 00 FF 
02ffc     1C E4 05 F1 | 	add	objptr, ##46108
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     22 00 00 FF 
03008     D0 E5 85 F1 | 	sub	objptr, ##17872
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     37 00 00 FF 
0301c     54 E4 85 F1 | 	sub	objptr, ##28244
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     59 00 00 FF 
03028     D0 E5 05 F1 | 	add	objptr, ##46032
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     59 00 00 FF 
03034     D0 E5 85 F1 | 	sub	objptr, ##46032
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     37 00 00 FF 
03044     54 E4 05 F1 | 	add	objptr, ##28244
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     37 00 00 FF 
03050     54 E4 85 F1 | 	sub	objptr, ##28244
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     37 00 00 FF 
0305c     54 E4 05 F1 | 	add	objptr, ##28244
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     37 00 00 FF 
03068     54 E4 85 F1 | 	sub	objptr, ##28244
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     35 00 00 FF 
0307c     50 E4 05 F1 | 	add	objptr, ##27216
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     35 00 00 FF 
03088     50 E4 85 F1 | 	sub	objptr, ##27216
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     59 00 00 FF 
0309c     D0 E5 05 F1 | 	add	objptr, ##46032
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     22 00 00 FF 
030a8     7C E5 85 F1 | 	sub	objptr, ##17788
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     37 00 00 FF 
030b4     54 E4 85 F1 | 	sub	objptr, ##28244
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     90 39 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     5A 00 00 FF 
030c4     1C E4 05 F1 | 	add	objptr, ##46108
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     5A 00 00 FF 
030d0     1C E4 85 F1 | 	sub	objptr, ##46108
030d4     72 01 00 FF 
030d8     C6 14 06 F6 | 	mov	arg02, ##@LR__4852
030dc     14 BD B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     5A 00 00 FF 
030ec     1C E4 05 F1 | 	add	objptr, ##46108
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     22 00 00 FF 
030f8     D0 E5 85 F1 | 	sub	objptr, ##17872
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     37 00 00 FF 
0310c     54 E4 85 F1 | 	sub	objptr, ##28244
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     59 00 00 FF 
03118     D0 E5 05 F1 | 	add	objptr, ##46032
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     59 00 00 FF 
03124     D0 E5 85 F1 | 	sub	objptr, ##46032
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     37 00 00 FF 
03134     54 E4 05 F1 | 	add	objptr, ##28244
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     37 00 00 FF 
03140     54 E4 85 F1 | 	sub	objptr, ##28244
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     37 00 00 5F 
0314c     54 E4 05 51 |  if_ne	add	objptr, ##28244
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     37 00 00 5F 
03158     54 E4 85 51 |  if_ne	sub	objptr, ##28244
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     35 00 00 AF 
03164     48 E4 05 A1 |  if_e	add	objptr, ##27208
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     35 00 00 AF 
03170     48 E4 85 A1 |  if_e	sub	objptr, ##27208
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     59 00 00 FF 
03184     D0 E5 05 F1 | 	add	objptr, ##46032
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     22 00 00 FF 
03190     7C E5 85 F1 | 	sub	objptr, ##17788
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     37 00 00 FF 
0319c     54 E4 85 F1 | 	sub	objptr, ##28244
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     A8 38 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     5A 00 00 FF 
031ac     1C E4 05 F1 | 	add	objptr, ##46108
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     5A 00 00 FF 
031b8     1C E4 85 F1 | 	sub	objptr, ##46108
031bc     72 01 00 FF 
031c0     C7 14 06 F6 | 	mov	arg02, ##@LR__4853
031c4     2C BC B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     5A 00 00 FF 
031d4     1C E4 05 F1 | 	add	objptr, ##46108
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     22 00 00 FF 
031e0     D0 E5 85 F1 | 	sub	objptr, ##17872
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     37 00 00 FF 
031f4     54 E4 85 F1 | 	sub	objptr, ##28244
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     35 00 00 FF 
03200     40 E4 05 F1 | 	add	objptr, ##27200
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     35 00 00 FF 
0320c     40 E4 85 F1 | 	sub	objptr, ##27200
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     35 00 00 AF 
0321c     48 E4 05 A1 |  if_e	add	objptr, ##27208
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     35 00 00 AF 
03228     48 E4 85 A1 |  if_e	sub	objptr, ##27208
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     0C 38 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     35 00 00 FF 
0324c     40 E4 05 F1 | 	add	objptr, ##27200
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     35 00 00 FF 
03258     40 E4 85 F1 | 	sub	objptr, ##27200
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     35 00 00 AF 
03268     48 E4 05 A1 |  if_e	add	objptr, ##27208
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     35 00 00 AF 
03274     48 E4 85 A1 |  if_e	sub	objptr, ##27208
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     DC 14 B2 FD | 	call	#__system___getiolock_0485
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     3C BB B1 FD | 	call	#__system___lockmem
03290     72 01 00 FF 
03294     C8 14 06 F6 | 	mov	arg02, ##@LR__4854
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     1C C8 B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     B4 C7 B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     A8 14 B2 FD | 	call	#__system___getiolock_0485
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     AC 36 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     AC 74 B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     30 76 B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     5A 00 00 FF 
032f8     1C E4 05 F1 | 	add	objptr, ##46108
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     5A 00 00 FF 
03304     1C E4 85 F1 | 	sub	objptr, ##46108
03308     72 01 00 FF 
0330c     F7 14 06 F6 | 	mov	arg02, ##@LR__4855
03310     E0 BA B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     5A 00 00 FF 
03320     1C E4 05 F1 | 	add	objptr, ##46108
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     22 00 00 FF 
0332c     D0 E5 85 F1 | 	sub	objptr, ##17872
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     37 00 00 FF 
03338     4C E4 85 F1 | 	sub	objptr, ##28236
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     72 01 00 FF 
03344     F8 12 06 F6 | 	mov	arg01, ##@LR__4856
03348                 | ' 
03348                 | ' write(text)
03348     98 A7 B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     60 AA B1 FD | 	call	#_hg010b_spin2_crlf
03350     72 01 00 FF 
03354     F9 12 06 F6 | 	mov	arg01, ##@LR__4857
03358                 | ' 
03358                 | ' write(text)
03358     88 A7 B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     50 AA B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     72 01 00 FF 
0337c     FF 14 06 F6 | 	mov	arg02, ##@LR__4858
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     6C BA B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     72 01 00 FF 
03394     01 15 06 F6 | 	mov	arg02, ##@LR__4859
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     54 BA B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     72 01 00 FF 
033ac     03 15 06 F6 | 	mov	arg02, ##@LR__4860
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     3C BA B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     72 01 00 FF 
033c4     06 15 06 F6 | 	mov	arg02, ##@LR__4861
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     24 BA B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     72 01 00 FF 
033dc     0A 15 06 F6 | 	mov	arg02, ##@LR__4862
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     0C BA B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     72 01 00 FF 
033f4     0C 15 06 F6 | 	mov	arg02, ##@LR__4863
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     F4 B9 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     72 01 00 FF 
0340c     0E 15 06 F6 | 	mov	arg02, ##@LR__4864
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     DC B9 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     72 01 00 FF 
03424     12 15 06 F6 | 	mov	arg02, ##@LR__4865
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     C4 B9 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     72 01 00 FF 
0343c     16 15 06 F6 | 	mov	arg02, ##@LR__4866
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     AC B9 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     72 01 00 FF 
03454     1A 15 06 F6 | 	mov	arg02, ##@LR__4867
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     94 B9 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     72 01 00 FF 
0346c     1E 15 06 F6 | 	mov	arg02, ##@LR__4868
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     7C B9 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     72 01 00 FF 
03484     22 15 06 F6 | 	mov	arg02, ##@LR__4869
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     64 B9 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     72 01 00 FF 
0349c     24 15 06 F6 | 	mov	arg02, ##@LR__4870
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     4C B9 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     72 01 00 FF 
034b4     28 15 06 F6 | 	mov	arg02, ##@LR__4871
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     34 B9 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     72 01 00 FF 
034cc     2A 15 06 F6 | 	mov	arg02, ##@LR__4872
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     1C B9 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     72 01 00 FF 
034e4     2C 15 06 F6 | 	mov	arg02, ##@LR__4873
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     04 B9 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     72 01 00 FF 
034fc     2F 15 06 F6 | 	mov	arg02, ##@LR__4874
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     EC B8 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     72 01 00 FF 
03514     32 15 06 F6 | 	mov	arg02, ##@LR__4875
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     D4 B8 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     72 01 00 FF 
0352c     34 15 06 F6 | 	mov	arg02, ##@LR__4876
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     BC B8 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     72 01 00 FF 
03544     36 15 06 F6 | 	mov	arg02, ##@LR__4877
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     A4 B8 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     72 01 00 FF 
0355c     39 15 06 F6 | 	mov	arg02, ##@LR__4878
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     8C B8 B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     72 01 00 FF 
03574     3C 15 06 F6 | 	mov	arg02, ##@LR__4879
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     74 B8 B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     7C D7 B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     72 01 00 FF 
03668     3F 15 06 F6 | 	mov	arg02, ##@LR__4880
0366c     84 B7 B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     68 D8 B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     72 01 00 FF 
03694     41 15 06 F6 | 	mov	arg02, ##@LR__4881
03698     58 B7 B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     40 D8 B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     28 D8 B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     F4 D7 B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     72 01 00 FF 
03708     43 15 06 F6 | 	mov	arg02, ##@LR__4882
0370c     E4 B6 B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     40 D7 B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     D0 E9 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     A4 E6 B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     18 D7 B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     A8 E9 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     B0 E1 B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     6C E6 B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     DC D6 B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     72 01 00 FF 
03790     45 15 06 F6 | 	mov	arg02, ##@LR__4883
03794     5C B6 B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     72 01 00 FF 
037a8     47 15 06 F6 | 	mov	arg02, ##@LR__4884
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     40 B6 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     72 01 00 FF 
037c0     49 15 06 F6 | 	mov	arg02, ##@LR__4885
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     28 B6 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     72 01 00 FF 
037d8     4C 15 06 F6 | 	mov	arg02, ##@LR__4886
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     10 B6 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     72 01 00 FF 
037f0     4E 15 06 F6 | 	mov	arg02, ##@LR__4887
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     F8 B5 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     72 01 00 FF 
03808     51 15 06 F6 | 	mov	arg02, ##@LR__4888
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     E0 B5 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     72 01 00 FF 
03820     53 15 06 F6 | 	mov	arg02, ##@LR__4889
03824     13 13 02 F6 | 	mov	arg01, local05
03828     C8 B5 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     72 01 00 FF 
03838     55 15 06 F6 | 	mov	arg02, ##@LR__4890
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     B0 B5 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     72 01 00 FF 
03850     58 15 06 F6 | 	mov	arg02, ##@LR__4891
03854     13 13 02 F6 | 	mov	arg01, local05
03858     98 B5 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     72 01 00 FF 
03868     5A 15 06 F6 | 	mov	arg02, ##@LR__4892
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     80 B5 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     72 01 00 FF 
03880     5D 15 06 F6 | 	mov	arg02, ##@LR__4893
03884     13 13 02 F6 | 	mov	arg01, local05
03888     68 B5 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     72 01 00 FF 
03898     5F 15 06 F6 | 	mov	arg02, ##@LR__4894
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     50 B5 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     72 01 00 FF 
038b0     62 15 06 F6 | 	mov	arg02, ##@LR__4895
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     38 B5 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     72 01 00 FF 
038c8     64 15 06 F6 | 	mov	arg02, ##@LR__4896
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     20 B5 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     72 01 00 FF 
039c8     66 15 06 F6 | 	mov	arg02, ##@LR__4897
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     20 B4 B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     72 01 00 FF 
039e0     68 15 06 F6 | 	mov	arg02, ##@LR__4898
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     08 B4 B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     72 01 00 FF 
039f8     6A 15 06 F6 | 	mov	arg02, ##@LR__4899
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     F0 B3 B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     72 01 00 FF 
03a10     6C 15 06 F6 | 	mov	arg02, ##@LR__4900
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     D8 B3 B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     72 01 00 FF 
03a28     6E 15 06 F6 | 	mov	arg02, ##@LR__4901
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     C0 B3 B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     72 01 00 FF 
03a40     70 15 06 F6 | 	mov	arg02, ##@LR__4902
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     A8 B3 B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     72 01 00 FF 
03a58     72 15 06 F6 | 	mov	arg02, ##@LR__4903
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     90 B3 B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     72 01 00 FF 
03a70     74 15 06 F6 | 	mov	arg02, ##@LR__4904
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     78 B3 B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     72 01 00 FF 
03a88     76 15 06 F6 | 	mov	arg02, ##@LR__4905
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     60 B3 B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     72 01 00 FF 
03aa0     78 15 06 F6 | 	mov	arg02, ##@LR__4906
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     48 B3 B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     72 01 00 FF 
03ab8     7A 15 06 F6 | 	mov	arg02, ##@LR__4907
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     30 B3 B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     72 01 00 FF 
03ad0     7C 15 06 F6 | 	mov	arg02, ##@LR__4908
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     18 B3 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     72 01 00 FF 
03ae8     7E 15 06 F6 | 	mov	arg02, ##@LR__4909
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     00 B3 B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     72 01 00 FF 
03b00     80 15 06 F6 | 	mov	arg02, ##@LR__4910
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     E8 B2 B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     72 01 00 FF 
03b18     82 15 06 F6 | 	mov	arg02, ##@LR__4911
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     D0 B2 B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     72 01 00 FF 
03bc8     86 15 06 F6 | 	mov	arg02, ##@LR__4913
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     20 B2 B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     EC 08 90 AD |  if_e	jmp	#LR__0240
03bdc     72 01 00 FF 
03be0     8B 15 06 F6 | 	mov	arg02, ##@LR__4914
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     08 B2 B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     DC 08 90 AD |  if_e	jmp	#LR__0241
03bf4     72 01 00 FF 
03bf8     8E 15 06 F6 | 	mov	arg02, ##@LR__4915
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     F0 B1 B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     CC 08 90 AD |  if_e	jmp	#LR__0242
03c0c     72 01 00 FF 
03c10     92 15 06 F6 | 	mov	arg02, ##@LR__4916
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     D8 B1 B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     BC 08 90 AD |  if_e	jmp	#LR__0243
03c24     72 01 00 FF 
03c28     97 15 06 F6 | 	mov	arg02, ##@LR__4917
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     C0 B1 B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     AC 08 90 AD |  if_e	jmp	#LR__0244
03c3c     72 01 00 FF 
03c40     9B 15 06 F6 | 	mov	arg02, ##@LR__4918
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     A8 B1 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     9C 08 90 AD |  if_e	jmp	#LR__0245
03c54     72 01 00 FF 
03c58     A2 15 06 F6 | 	mov	arg02, ##@LR__4919
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     90 B1 B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     8C 08 90 AD |  if_e	jmp	#LR__0246
03c6c     72 01 00 FF 
03c70     A6 15 06 F6 | 	mov	arg02, ##@LR__4920
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     78 B1 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     7C 08 90 AD |  if_e	jmp	#LR__0247
03c84     72 01 00 FF 
03c88     AC 15 06 F6 | 	mov	arg02, ##@LR__4921
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     60 B1 B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     6C 08 90 AD |  if_e	jmp	#LR__0248
03c9c     72 01 00 FF 
03ca0     B0 15 06 F6 | 	mov	arg02, ##@LR__4922
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     48 B1 B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     5C 08 90 AD |  if_e	jmp	#LR__0249
03cb4     72 01 00 FF 
03cb8     B6 15 06 F6 | 	mov	arg02, ##@LR__4923
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     30 B1 B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     4C 08 90 AD |  if_e	jmp	#LR__0250
03ccc     72 01 00 FF 
03cd0     B9 15 06 F6 | 	mov	arg02, ##@LR__4924
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     18 B1 B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     3C 08 90 AD |  if_e	jmp	#LR__0251
03ce4     72 01 00 FF 
03ce8     BF 15 06 F6 | 	mov	arg02, ##@LR__4925
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     00 B1 B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     2C 08 90 AD |  if_e	jmp	#LR__0252
03cfc     72 01 00 FF 
03d00     C3 15 06 F6 | 	mov	arg02, ##@LR__4926
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     E8 B0 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     1C 08 90 AD |  if_e	jmp	#LR__0253
03d14     72 01 00 FF 
03d18     CA 15 06 F6 | 	mov	arg02, ##@LR__4927
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     D0 B0 B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     0C 08 90 AD |  if_e	jmp	#LR__0254
03d2c     72 01 00 FF 
03d30     D1 15 06 F6 | 	mov	arg02, ##@LR__4928
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     B8 B0 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     FC 07 90 AD |  if_e	jmp	#LR__0255
03d44     72 01 00 FF 
03d48     D8 15 06 F6 | 	mov	arg02, ##@LR__4929
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     A0 B0 B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     EC 07 90 AD |  if_e	jmp	#LR__0256
03d5c     72 01 00 FF 
03d60     E2 15 06 F6 | 	mov	arg02, ##@LR__4930
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     88 B0 B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     DC 07 90 AD |  if_e	jmp	#LR__0257
03d74     72 01 00 FF 
03d78     E6 15 06 F6 | 	mov	arg02, ##@LR__4931
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     70 B0 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     CC 07 90 AD |  if_e	jmp	#LR__0258
03d8c     72 01 00 FF 
03d90     EA 15 06 F6 | 	mov	arg02, ##@LR__4932
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     58 B0 B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     BC 07 90 AD |  if_e	jmp	#LR__0259
03da4     72 01 00 FF 
03da8     EE 15 06 F6 | 	mov	arg02, ##@LR__4933
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     40 B0 B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     AC 07 90 AD |  if_e	jmp	#LR__0260
03dbc     72 01 00 FF 
03dc0     F2 15 06 F6 | 	mov	arg02, ##@LR__4934
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     28 B0 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     9C 07 90 AD |  if_e	jmp	#LR__0261
03dd4     72 01 00 FF 
03dd8     F8 15 06 F6 | 	mov	arg02, ##@LR__4935
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     10 B0 B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     8C 07 90 AD |  if_e	jmp	#LR__0262
03dec     72 01 00 FF 
03df0     FD 15 06 F6 | 	mov	arg02, ##@LR__4936
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     F8 AF B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     7C 07 90 AD |  if_e	jmp	#LR__0263
03e04     73 01 00 FF 
03e08     01 14 06 F6 | 	mov	arg02, ##@LR__4937
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     E0 AF B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     6C 07 90 AD |  if_e	jmp	#LR__0264
03e1c     73 01 00 FF 
03e20     06 14 06 F6 | 	mov	arg02, ##@LR__4938
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     C8 AF B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     5C 07 90 AD |  if_e	jmp	#LR__0265
03e34     73 01 00 FF 
03e38     0A 14 06 F6 | 	mov	arg02, ##@LR__4939
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     B0 AF B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     4C 07 90 AD |  if_e	jmp	#LR__0266
03e4c     73 01 00 FF 
03e50     12 14 06 F6 | 	mov	arg02, ##@LR__4940
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     98 AF B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     3C 07 90 AD |  if_e	jmp	#LR__0267
03e64     73 01 00 FF 
03e68     16 14 06 F6 | 	mov	arg02, ##@LR__4941
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     80 AF B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     2C 07 90 AD |  if_e	jmp	#LR__0268
03e7c     73 01 00 FF 
03e80     1B 14 06 F6 | 	mov	arg02, ##@LR__4942
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     68 AF B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     1C 07 90 AD |  if_e	jmp	#LR__0269
03e94     73 01 00 FF 
03e98     1F 14 06 F6 | 	mov	arg02, ##@LR__4943
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     50 AF B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     0C 07 90 AD |  if_e	jmp	#LR__0270
03eac     73 01 00 FF 
03eb0     24 14 06 F6 | 	mov	arg02, ##@LR__4944
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     38 AF B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     FC 06 90 AD |  if_e	jmp	#LR__0271
03ec4     73 01 00 FF 
03ec8     28 14 06 F6 | 	mov	arg02, ##@LR__4945
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     20 AF B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     EC 06 90 AD |  if_e	jmp	#LR__0272
03edc     73 01 00 FF 
03ee0     2B 14 06 F6 | 	mov	arg02, ##@LR__4946
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     08 AF B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     DC 06 90 AD |  if_e	jmp	#LR__0273
03ef4     73 01 00 FF 
03ef8     31 14 06 F6 | 	mov	arg02, ##@LR__4947
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     F0 AE B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     CC 06 90 AD |  if_e	jmp	#LR__0274
03f0c     73 01 00 FF 
03f10     35 14 06 F6 | 	mov	arg02, ##@LR__4948
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     D8 AE B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     BC 06 90 AD |  if_e	jmp	#LR__0275
03f24     73 01 00 FF 
03f28     3B 14 06 F6 | 	mov	arg02, ##@LR__4949
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     C0 AE B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     AC 06 90 AD |  if_e	jmp	#LR__0276
03f3c     73 01 00 FF 
03f40     40 14 06 F6 | 	mov	arg02, ##@LR__4950
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     A8 AE B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     9C 06 90 AD |  if_e	jmp	#LR__0277
03f54     73 01 00 FF 
03f58     43 14 06 F6 | 	mov	arg02, ##@LR__4951
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     90 AE B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     8C 06 90 AD |  if_e	jmp	#LR__0278
03f6c     73 01 00 FF 
03f70     46 14 06 F6 | 	mov	arg02, ##@LR__4952
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     78 AE B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     7C 06 90 AD |  if_e	jmp	#LR__0279
03f84     73 01 00 FF 
03f88     4A 14 06 F6 | 	mov	arg02, ##@LR__4953
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     60 AE B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     6C 06 90 AD |  if_e	jmp	#LR__0280
03f9c     73 01 00 FF 
03fa0     4D 14 06 F6 | 	mov	arg02, ##@LR__4954
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     48 AE B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     5C 06 90 AD |  if_e	jmp	#LR__0281
03fb4     73 01 00 FF 
03fb8     51 14 06 F6 | 	mov	arg02, ##@LR__4955
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     30 AE B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     4C 06 90 AD |  if_e	jmp	#LR__0282
03fcc     73 01 00 FF 
03fd0     56 14 06 F6 | 	mov	arg02, ##@LR__4956
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     18 AE B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     3C 06 90 AD |  if_e	jmp	#LR__0283
03fe4     73 01 00 FF 
03fe8     59 14 06 F6 | 	mov	arg02, ##@LR__4957
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     00 AE B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     2C 06 90 AD |  if_e	jmp	#LR__0284
03ffc     73 01 00 FF 
04000     5E 14 06 F6 | 	mov	arg02, ##@LR__4958
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     E8 AD B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     1C 06 90 AD |  if_e	jmp	#LR__0285
04014     73 01 00 FF 
04018     62 14 06 F6 | 	mov	arg02, ##@LR__4959
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     D0 AD B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     0C 06 90 AD |  if_e	jmp	#LR__0286
0402c     73 01 00 FF 
04030     68 14 06 F6 | 	mov	arg02, ##@LR__4960
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     B8 AD B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     FC 05 90 AD |  if_e	jmp	#LR__0287
04044     73 01 00 FF 
04048     6D 14 06 F6 | 	mov	arg02, ##@LR__4961
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     A0 AD B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     EC 05 90 AD |  if_e	jmp	#LR__0288
0405c     73 01 00 FF 
04060     70 14 06 F6 | 	mov	arg02, ##@LR__4962
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     88 AD B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     DC 05 90 AD |  if_e	jmp	#LR__0289
04074     73 01 00 FF 
04078     76 14 06 F6 | 	mov	arg02, ##@LR__4963
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     70 AD B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     CC 05 90 AD |  if_e	jmp	#LR__0290
0408c     73 01 00 FF 
04090     7A 14 06 F6 | 	mov	arg02, ##@LR__4964
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     58 AD B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     BC 05 90 AD |  if_e	jmp	#LR__0291
040a4     73 01 00 FF 
040a8     7F 14 06 F6 | 	mov	arg02, ##@LR__4965
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     40 AD B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     AC 05 90 AD |  if_e	jmp	#LR__0292
040bc     73 01 00 FF 
040c0     82 14 06 F6 | 	mov	arg02, ##@LR__4966
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     28 AD B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     9C 05 90 AD |  if_e	jmp	#LR__0293
040d4     73 01 00 FF 
040d8     88 14 06 F6 | 	mov	arg02, ##@LR__4967
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     10 AD B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     8C 05 90 AD |  if_e	jmp	#LR__0294
040ec     73 01 00 FF 
040f0     8C 14 06 F6 | 	mov	arg02, ##@LR__4968
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     F8 AC B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     7C 05 90 AD |  if_e	jmp	#LR__0295
04104     73 01 00 FF 
04108     95 14 06 F6 | 	mov	arg02, ##@LR__4969
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     E0 AC B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     6C 05 90 AD |  if_e	jmp	#LR__0296
0411c     73 01 00 FF 
04120     9B 14 06 F6 | 	mov	arg02, ##@LR__4970
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     C8 AC B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     5C 05 90 AD |  if_e	jmp	#LR__0297
04134     73 01 00 FF 
04138     A1 14 06 F6 | 	mov	arg02, ##@LR__4971
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     B0 AC B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     4C 05 90 AD |  if_e	jmp	#LR__0298
0414c     73 01 00 FF 
04150     AA 14 06 F6 | 	mov	arg02, ##@LR__4972
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     98 AC B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     3C 05 90 AD |  if_e	jmp	#LR__0299
04164     73 01 00 FF 
04168     B4 14 06 F6 | 	mov	arg02, ##@LR__4973
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     80 AC B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     2C 05 90 AD |  if_e	jmp	#LR__0300
0417c     73 01 00 FF 
04180     BD 14 06 F6 | 	mov	arg02, ##@LR__4974
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     68 AC B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     1C 05 90 AD |  if_e	jmp	#LR__0301
04194     73 01 00 FF 
04198     C2 14 06 F6 | 	mov	arg02, ##@LR__4975
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     50 AC B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     0C 05 90 AD |  if_e	jmp	#LR__0302
041ac     73 01 00 FF 
041b0     C5 14 06 F6 | 	mov	arg02, ##@LR__4976
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     38 AC B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     FC 04 90 AD |  if_e	jmp	#LR__0303
041c4     73 01 00 FF 
041c8     CA 14 06 F6 | 	mov	arg02, ##@LR__4977
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     20 AC B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     EC 04 90 AD |  if_e	jmp	#LR__0304
041dc     73 01 00 FF 
041e0     CE 14 06 F6 | 	mov	arg02, ##@LR__4978
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     08 AC B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     DC 04 90 AD |  if_e	jmp	#LR__0305
041f4     73 01 00 FF 
041f8     D3 14 06 F6 | 	mov	arg02, ##@LR__4979
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     F0 AB B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     CC 04 90 AD |  if_e	jmp	#LR__0306
0420c     73 01 00 FF 
04210     D7 14 06 F6 | 	mov	arg02, ##@LR__4980
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     D8 AB B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     BC 04 90 AD |  if_e	jmp	#LR__0307
04224     73 01 00 FF 
04228     E0 14 06 F6 | 	mov	arg02, ##@LR__4981
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     C0 AB B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     AC 04 90 AD |  if_e	jmp	#LR__0308
0423c     73 01 00 FF 
04240     E5 14 06 F6 | 	mov	arg02, ##@LR__4982
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     A8 AB B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     9C 04 90 AD |  if_e	jmp	#LR__0309
04254     73 01 00 FF 
04258     EB 14 06 F6 | 	mov	arg02, ##@LR__4983
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     90 AB B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     8C 04 90 AD |  if_e	jmp	#LR__0310
0426c     73 01 00 FF 
04270     ED 14 06 F6 | 	mov	arg02, ##@LR__4984
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     78 AB B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     7C 04 90 AD |  if_e	jmp	#LR__0311
04284     73 01 00 FF 
04288     F1 14 06 F6 | 	mov	arg02, ##@LR__4985
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     60 AB B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     6C 04 90 AD |  if_e	jmp	#LR__0312
0429c     73 01 00 FF 
042a0     F9 14 06 F6 | 	mov	arg02, ##@LR__4986
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     48 AB B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     5C 04 90 AD |  if_e	jmp	#LR__0313
042b4     73 01 00 FF 
042b8     00 15 06 F6 | 	mov	arg02, ##@LR__4987
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     30 AB B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     4C 04 90 AD |  if_e	jmp	#LR__0314
042cc     73 01 00 FF 
042d0     04 15 06 F6 | 	mov	arg02, ##@LR__4988
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     18 AB B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     3C 04 90 AD |  if_e	jmp	#LR__0315
042e4     73 01 00 FF 
042e8     09 15 06 F6 | 	mov	arg02, ##@LR__4989
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     00 AB B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     2C 04 90 AD |  if_e	jmp	#LR__0316
042fc     73 01 00 FF 
04300     0C 15 06 F6 | 	mov	arg02, ##@LR__4990
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     E8 AA B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     1C 04 90 AD |  if_e	jmp	#LR__0317
04314     73 01 00 FF 
04318     15 15 06 F6 | 	mov	arg02, ##@LR__4991
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     D0 AA B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     0C 04 90 AD |  if_e	jmp	#LR__0318
0432c     73 01 00 FF 
04330     1C 15 06 F6 | 	mov	arg02, ##@LR__4992
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     B8 AA B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     FC 03 90 AD |  if_e	jmp	#LR__0319
04344     73 01 00 FF 
04348     23 15 06 F6 | 	mov	arg02, ##@LR__4993
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     A0 AA B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     EC 03 90 AD |  if_e	jmp	#LR__0320
0435c     73 01 00 FF 
04360     2A 15 06 F6 | 	mov	arg02, ##@LR__4994
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     88 AA B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     DC 03 90 AD |  if_e	jmp	#LR__0321
04374     73 01 00 FF 
04378     35 15 06 F6 | 	mov	arg02, ##@LR__4995
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     70 AA B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     CC 03 90 AD |  if_e	jmp	#LR__0322
0438c     73 01 00 FF 
04390     3C 15 06 F6 | 	mov	arg02, ##@LR__4996
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     58 AA B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     BC 03 90 AD |  if_e	jmp	#LR__0323
043a4     73 01 00 FF 
043a8     44 15 06 F6 | 	mov	arg02, ##@LR__4997
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     40 AA B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     AC 03 90 AD |  if_e	jmp	#LR__0324
043bc     73 01 00 FF 
043c0     4A 15 06 F6 | 	mov	arg02, ##@LR__4998
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     28 AA B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     9C 03 90 AD |  if_e	jmp	#LR__0325
043d4     73 01 00 FF 
043d8     4E 15 06 F6 | 	mov	arg02, ##@LR__4999
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     10 AA B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     8C 03 90 AD |  if_e	jmp	#LR__0326
043ec     73 01 00 FF 
043f0     55 15 06 F6 | 	mov	arg02, ##@LR__5000
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     F8 A9 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     7C 03 90 AD |  if_e	jmp	#LR__0327
04404     73 01 00 FF 
04408     59 15 06 F6 | 	mov	arg02, ##@LR__5001
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     E0 A9 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     6C 03 90 AD |  if_e	jmp	#LR__0328
0441c     73 01 00 FF 
04420     5E 15 06 F6 | 	mov	arg02, ##@LR__5002
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     C8 A9 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     5C 03 90 AD |  if_e	jmp	#LR__0329
04434     73 01 00 FF 
04438     65 15 06 F6 | 	mov	arg02, ##@LR__5003
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     B0 A9 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     4C 03 90 AD |  if_e	jmp	#LR__0330
0444c     73 01 00 FF 
04450     6F 15 06 F6 | 	mov	arg02, ##@LR__5004
04454     0F 13 02 F6 | 	mov	arg01, local01
04458     98 A9 B1 FD | 	call	#__system___string_cmp
0445c     00 FA 0D F2 | 	cmp	result1, #0 wz
04460     3C 03 90 AD |  if_e	jmp	#LR__0331
04464     73 01 00 FF 
04468     73 15 06 F6 | 	mov	arg02, ##@LR__5005
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     80 A9 B1 FD | 	call	#__system___string_cmp
04474     00 FA 0D F2 | 	cmp	result1, #0 wz
04478     2C 03 90 AD |  if_e	jmp	#LR__0332
0447c     73 01 00 FF 
04480     7B 15 06 F6 | 	mov	arg02, ##@LR__5006
04484     0F 13 02 F6 | 	mov	arg01, local01
04488     68 A9 B1 FD | 	call	#__system___string_cmp
0448c     00 FA 0D F2 | 	cmp	result1, #0 wz
04490     1C 03 90 AD |  if_e	jmp	#LR__0333
04494     73 01 00 FF 
04498     7F 15 06 F6 | 	mov	arg02, ##@LR__5007
0449c     0F 13 02 F6 | 	mov	arg01, local01
044a0     50 A9 B1 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     0C 03 90 AD |  if_e	jmp	#LR__0334
044ac     73 01 00 FF 
044b0     85 15 06 F6 | 	mov	arg02, ##@LR__5008
044b4     0F 13 02 F6 | 	mov	arg01, local01
044b8     38 A9 B1 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     FC 02 90 AD |  if_e	jmp	#LR__0335
044c4     00 03 90 FD | 	jmp	#LR__0336
044c8                 | LR__0240
044c8     5C FA 05 F6 | 	mov	result1, #92
044cc     FC 02 90 FD | 	jmp	#LR__0337
044d0                 | LR__0241
044d0     5C FA 05 F6 | 	mov	result1, #92
044d4     F4 02 90 FD | 	jmp	#LR__0337
044d8                 | LR__0242
044d8     47 FA 05 F6 | 	mov	result1, #71
044dc     EC 02 90 FD | 	jmp	#LR__0337
044e0                 | LR__0243
044e0     59 FA 05 F6 | 	mov	result1, #89
044e4     E4 02 90 FD | 	jmp	#LR__0337
044e8                 | LR__0244
044e8     59 FA 05 F6 | 	mov	result1, #89
044ec     DC 02 90 FD | 	jmp	#LR__0337
044f0                 | LR__0245
044f0     45 FA 05 F6 | 	mov	result1, #69
044f4     D4 02 90 FD | 	jmp	#LR__0337
044f8                 | LR__0246
044f8     45 FA 05 F6 | 	mov	result1, #69
044fc     CC 02 90 FD | 	jmp	#LR__0337
04500                 | LR__0247
04500     69 FA 05 F6 | 	mov	result1, #105
04504     C4 02 90 FD | 	jmp	#LR__0337
04508                 | LR__0248
04508     40 FA 05 F6 | 	mov	result1, #64
0450c     BC 02 90 FD | 	jmp	#LR__0337
04510                 | LR__0249
04510     49 FA 05 F6 | 	mov	result1, #73
04514     B4 02 90 FD | 	jmp	#LR__0337
04518                 | LR__0250
04518     49 FA 05 F6 | 	mov	result1, #73
0451c     AC 02 90 FD | 	jmp	#LR__0337
04520                 | LR__0251
04520     50 FA 05 F6 | 	mov	result1, #80
04524     A4 02 90 FD | 	jmp	#LR__0337
04528                 | LR__0252
04528     50 FA 05 F6 | 	mov	result1, #80
0452c     9C 02 90 FD | 	jmp	#LR__0337
04530                 | LR__0253
04530     68 FA 05 F6 | 	mov	result1, #104
04534     94 02 90 FD | 	jmp	#LR__0337
04538                 | LR__0254
04538     73 FA 05 F6 | 	mov	result1, #115
0453c     8C 02 90 FD | 	jmp	#LR__0337
04540                 | LR__0255
04540     74 FA 05 F6 | 	mov	result1, #116
04544     84 02 90 FD | 	jmp	#LR__0337
04548                 | LR__0256
04548     6C FA 05 F6 | 	mov	result1, #108
0454c     7C 02 90 FD | 	jmp	#LR__0337
04550                 | LR__0257
04550     6C FA 05 F6 | 	mov	result1, #108
04554     74 02 90 FD | 	jmp	#LR__0337
04558                 | LR__0258
04558     89 FA 05 F6 | 	mov	result1, #137
0455c     6C 02 90 FD | 	jmp	#LR__0337
04560                 | LR__0259
04560     72 FA 05 F6 | 	mov	result1, #114
04564     64 02 90 FD | 	jmp	#LR__0337
04568                 | LR__0260
04568     5D FA 05 F6 | 	mov	result1, #93
0456c     5C 02 90 FD | 	jmp	#LR__0337
04570                 | LR__0261
04570     96 FA 05 F6 | 	mov	result1, #150
04574     54 02 90 FD | 	jmp	#LR__0337
04578                 | LR__0262
04578     43 FA 05 F6 | 	mov	result1, #67
0457c     4C 02 90 FD | 	jmp	#LR__0337
04580                 | LR__0263
04580     43 FA 05 F6 | 	mov	result1, #67
04584     44 02 90 FD | 	jmp	#LR__0337
04588                 | LR__0264
04588     5A FA 05 F6 | 	mov	result1, #90
0458c     3C 02 90 FD | 	jmp	#LR__0337
04590                 | LR__0265
04590     AB FA 05 F6 | 	mov	result1, #171
04594     34 02 90 FD | 	jmp	#LR__0337
04598                 | LR__0266
04598     46 FA 05 F6 | 	mov	result1, #70
0459c     2C 02 90 FD | 	jmp	#LR__0337
045a0                 | LR__0267
045a0     46 FA 05 F6 | 	mov	result1, #70
045a4     24 02 90 FD | 	jmp	#LR__0337
045a8                 | LR__0268
045a8     71 FA 05 F6 | 	mov	result1, #113
045ac     1C 02 90 FD | 	jmp	#LR__0337
045b0                 | LR__0269
045b0     71 FA 05 F6 | 	mov	result1, #113
045b4     14 02 90 FD | 	jmp	#LR__0337
045b8                 | LR__0270
045b8     60 FA 05 F6 | 	mov	result1, #96
045bc     0C 02 90 FD | 	jmp	#LR__0337
045c0                 | LR__0271
045c0     4A FA 05 F6 | 	mov	result1, #74
045c4     04 02 90 FD | 	jmp	#LR__0337
045c8                 | LR__0272
045c8     4A FA 05 F6 | 	mov	result1, #74
045cc     FC 01 90 FD | 	jmp	#LR__0337
045d0                 | LR__0273
045d0     48 FA 05 F6 | 	mov	result1, #72
045d4     F4 01 90 FD | 	jmp	#LR__0337
045d8                 | LR__0274
045d8     48 FA 05 F6 | 	mov	result1, #72
045dc     EC 01 90 FD | 	jmp	#LR__0337
045e0                 | LR__0275
045e0     A9 FA 05 F6 | 	mov	result1, #169
045e4     E4 01 90 FD | 	jmp	#LR__0337
045e8                 | LR__0276
045e8     4E FA 05 F6 | 	mov	result1, #78
045ec     DC 01 90 FD | 	jmp	#LR__0337
045f0                 | LR__0277
045f0     4E FA 05 F6 | 	mov	result1, #78
045f4     D4 01 90 FD | 	jmp	#LR__0337
045f8                 | LR__0278
045f8     58 FA 05 F6 | 	mov	result1, #88
045fc     CC 01 90 FD | 	jmp	#LR__0337
04600                 | LR__0279
04600     5F FA 05 F6 | 	mov	result1, #95
04604     C4 01 90 FD | 	jmp	#LR__0337
04608                 | LR__0280
04608     5F FA 05 F6 | 	mov	result1, #95
0460c     BC 01 90 FD | 	jmp	#LR__0337
04610                 | LR__0281
04610     8A FA 05 F6 | 	mov	result1, #138
04614     B4 01 90 FD | 	jmp	#LR__0337
04618                 | LR__0282
04618     4C FA 05 F6 | 	mov	result1, #76
0461c     AC 01 90 FD | 	jmp	#LR__0337
04620                 | LR__0283
04620     4C FA 05 F6 | 	mov	result1, #76
04624     A4 01 90 FD | 	jmp	#LR__0337
04628                 | LR__0284
04628     52 FA 05 F6 | 	mov	result1, #82
0462c     9C 01 90 FD | 	jmp	#LR__0337
04630                 | LR__0285
04630     52 FA 05 F6 | 	mov	result1, #82
04634     94 01 90 FD | 	jmp	#LR__0337
04638                 | LR__0286
04638     97 FA 05 F6 | 	mov	result1, #151
0463c     8C 01 90 FD | 	jmp	#LR__0337
04640                 | LR__0287
04640     61 FA 05 F6 | 	mov	result1, #97
04644     84 01 90 FD | 	jmp	#LR__0337
04648                 | LR__0288
04648     61 FA 05 F6 | 	mov	result1, #97
0464c     7C 01 90 FD | 	jmp	#LR__0337
04650                 | LR__0289
04650     63 FA 05 F6 | 	mov	result1, #99
04654     74 01 90 FD | 	jmp	#LR__0337
04658                 | LR__0290
04658     41 FA 05 F6 | 	mov	result1, #65
0465c     6C 01 90 FD | 	jmp	#LR__0337
04660                 | LR__0291
04660     4B FA 05 F6 | 	mov	result1, #75
04664     64 01 90 FD | 	jmp	#LR__0337
04668                 | LR__0292
04668     4B FA 05 F6 | 	mov	result1, #75
0466c     5C 01 90 FD | 	jmp	#LR__0337
04670                 | LR__0293
04670     5E FA 05 F6 | 	mov	result1, #94
04674     54 01 90 FD | 	jmp	#LR__0337
04678                 | LR__0294
04678     5E FA 05 F6 | 	mov	result1, #94
0467c     4C 01 90 FD | 	jmp	#LR__0337
04680                 | LR__0295
04680     7C FA 05 F6 | 	mov	result1, #124
04684     44 01 90 FD | 	jmp	#LR__0337
04688                 | LR__0296
04688     7E FA 05 F6 | 	mov	result1, #126
0468c     3C 01 90 FD | 	jmp	#LR__0337
04690                 | LR__0297
04690     7D FA 05 F6 | 	mov	result1, #125
04694     34 01 90 FD | 	jmp	#LR__0337
04698                 | LR__0298
04698     7F FA 05 F6 | 	mov	result1, #127
0469c     2C 01 90 FD | 	jmp	#LR__0337
046a0                 | LR__0299
046a0     80 FA 05 F6 | 	mov	result1, #128
046a4     24 01 90 FD | 	jmp	#LR__0337
046a8                 | LR__0300
046a8     55 FA 05 F6 | 	mov	result1, #85
046ac     1C 01 90 FD | 	jmp	#LR__0337
046b0                 | LR__0301
046b0     75 FA 05 F6 | 	mov	result1, #117
046b4     14 01 90 FD | 	jmp	#LR__0337
046b8                 | LR__0302
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     0C 01 90 FD | 	jmp	#LR__0337
046c0                 | LR__0303
046c0     42 FA 05 F6 | 	mov	result1, #66
046c4     04 01 90 FD | 	jmp	#LR__0337
046c8                 | LR__0304
046c8     42 FA 05 F6 | 	mov	result1, #66
046cc     FC 00 90 FD | 	jmp	#LR__0337
046d0                 | LR__0305
046d0     95 FA 05 F6 | 	mov	result1, #149
046d4     F4 00 90 FD | 	jmp	#LR__0337
046d8                 | LR__0306
046d8     AC FA 05 F6 | 	mov	result1, #172
046dc     EC 00 90 FD | 	jmp	#LR__0337
046e0                 | LR__0307
046e0     81 FA 05 F6 | 	mov	result1, #129
046e4     E4 00 90 FD | 	jmp	#LR__0337
046e8                 | LR__0308
046e8     81 FA 05 F6 | 	mov	result1, #129
046ec     DC 00 90 FD | 	jmp	#LR__0337
046f0                 | LR__0309
046f0     44 FA 05 F6 | 	mov	result1, #68
046f4     D4 00 90 FD | 	jmp	#LR__0337
046f8                 | LR__0310
046f8     44 FA 05 F6 | 	mov	result1, #68
046fc     CC 00 90 FD | 	jmp	#LR__0337
04700                 | LR__0311
04700     88 FA 05 F6 | 	mov	result1, #136
04704     C4 00 90 FD | 	jmp	#LR__0337
04708                 | LR__0312
04708     92 FA 05 F6 | 	mov	result1, #146
0470c     BC 00 90 FD | 	jmp	#LR__0337
04710                 | LR__0313
04710     AA FA 05 F6 | 	mov	result1, #170
04714     B4 00 90 FD | 	jmp	#LR__0337
04718                 | LR__0314
04718     4D FA 05 F6 | 	mov	result1, #77
0471c     AC 00 90 FD | 	jmp	#LR__0337
04720                 | LR__0315
04720     51 FA 05 F6 | 	mov	result1, #81
04724     A4 00 90 FD | 	jmp	#LR__0337
04728                 | LR__0316
04728     51 FA 05 F6 | 	mov	result1, #81
0472c     9C 00 90 FD | 	jmp	#LR__0337
04730                 | LR__0317
04730     8E FA 05 F6 | 	mov	result1, #142
04734     94 00 90 FD | 	jmp	#LR__0337
04738                 | LR__0318
04738     90 FA 05 F6 | 	mov	result1, #144
0473c     8C 00 90 FD | 	jmp	#LR__0337
04740                 | LR__0319
04740     8D FA 05 F6 | 	mov	result1, #141
04744     84 00 90 FD | 	jmp	#LR__0337
04748                 | LR__0320
04748     8C FA 05 F6 | 	mov	result1, #140
0474c     7C 00 90 FD | 	jmp	#LR__0337
04750                 | LR__0321
04750     91 FA 05 F6 | 	mov	result1, #145
04754     74 00 90 FD | 	jmp	#LR__0337
04758                 | LR__0322
04758     8B FA 05 F6 | 	mov	result1, #139
0475c     6C 00 90 FD | 	jmp	#LR__0337
04760                 | LR__0323
04760     8F FA 05 F6 | 	mov	result1, #143
04764     64 00 90 FD | 	jmp	#LR__0337
04768                 | LR__0324
04768     75 FA 05 F6 | 	mov	result1, #117
0476c     5C 00 90 FD | 	jmp	#LR__0337
04770                 | LR__0325
04770     75 FA 05 F6 | 	mov	result1, #117
04774     54 00 90 FD | 	jmp	#LR__0337
04778                 | LR__0326
04778     6D FA 05 F6 | 	mov	result1, #109
0477c     4C 00 90 FD | 	jmp	#LR__0337
04780                 | LR__0327
04780     6D FA 05 F6 | 	mov	result1, #109
04784     44 00 90 FD | 	jmp	#LR__0337
04788                 | LR__0328
04788     5B FA 05 F6 | 	mov	result1, #91
0478c     3C 00 90 FD | 	jmp	#LR__0337
04790                 | LR__0329
04790     56 FA 05 F6 | 	mov	result1, #86
04794     34 00 90 FD | 	jmp	#LR__0337
04798                 | LR__0330
04798     70 FA 05 F6 | 	mov	result1, #112
0479c     2C 00 90 FD | 	jmp	#LR__0337
047a0                 | LR__0331
047a0     70 FA 05 F6 | 	mov	result1, #112
047a4     24 00 90 FD | 	jmp	#LR__0337
047a8                 | LR__0332
047a8     57 FA 05 F6 | 	mov	result1, #87
047ac     1C 00 90 FD | 	jmp	#LR__0337
047b0                 | LR__0333
047b0     57 FA 05 F6 | 	mov	result1, #87
047b4     14 00 90 FD | 	jmp	#LR__0337
047b8                 | LR__0334
047b8     77 FA 05 F6 | 	mov	result1, #119
047bc     0C 00 90 FD | 	jmp	#LR__0337
047c0                 | LR__0335
047c0     78 FA 05 F6 | 	mov	result1, #120
047c4     04 00 90 FD | 	jmp	#LR__0337
047c8                 | LR__0336
047c8     00 FA 05 F6 | 	mov	result1, #0
047cc                 | LR__0337
047cc     A7 F0 03 F6 | 	mov	ptra, fp
047d0     B2 00 A0 FD | 	call	#popregs_
047d4                 | _iscommand_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | ' 
047d8                 | ' function isfunction(s as string) as ubyte
047d8                 | _isfunction
047d8     01 4A 05 F6 | 	mov	COUNT_, #1
047dc     A8 00 A0 FD | 	call	#pushregs_
047e0                 | ' 
047e0                 | ' select case s
047e0     09 1F 02 F6 | 	mov	local01, arg01
047e4     73 01 00 FF 
047e8     8B 15 06 F6 | 	mov	arg02, ##@LR__5009
047ec     0F 13 02 F6 | 	mov	arg01, local01
047f0     00 A6 B1 FD | 	call	#__system___string_cmp
047f4     00 FA 0D F2 | 	cmp	result1, #0 wz
047f8     DC 03 90 AD |  if_e	jmp	#LR__0340
047fc     73 01 00 FF 
04800     8F 15 06 F6 | 	mov	arg02, ##@LR__5010
04804     0F 13 02 F6 | 	mov	arg01, local01
04808     E8 A5 B1 FD | 	call	#__system___string_cmp
0480c     00 FA 0D F2 | 	cmp	result1, #0 wz
04810     CC 03 90 AD |  if_e	jmp	#LR__0341
04814     73 01 00 FF 
04818     94 15 06 F6 | 	mov	arg02, ##@LR__5011
0481c     0F 13 02 F6 | 	mov	arg01, local01
04820     D0 A5 B1 FD | 	call	#__system___string_cmp
04824     00 FA 0D F2 | 	cmp	result1, #0 wz
04828     BC 03 90 AD |  if_e	jmp	#LR__0342
0482c     73 01 00 FF 
04830     98 15 06 F6 | 	mov	arg02, ##@LR__5012
04834     0F 13 02 F6 | 	mov	arg01, local01
04838     B8 A5 B1 FD | 	call	#__system___string_cmp
0483c     00 FA 0D F2 | 	cmp	result1, #0 wz
04840     AC 03 90 AD |  if_e	jmp	#LR__0343
04844     73 01 00 FF 
04848     9D 15 06 F6 | 	mov	arg02, ##@LR__5013
0484c     0F 13 02 F6 | 	mov	arg01, local01
04850     A0 A5 B1 FD | 	call	#__system___string_cmp
04854     00 FA 0D F2 | 	cmp	result1, #0 wz
04858     9C 03 90 AD |  if_e	jmp	#LR__0344
0485c     73 01 00 FF 
04860     A1 15 06 F6 | 	mov	arg02, ##@LR__5014
04864     0F 13 02 F6 | 	mov	arg01, local01
04868     88 A5 B1 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     8C 03 90 AD |  if_e	jmp	#LR__0345
04874     73 01 00 FF 
04878     A6 15 06 F6 | 	mov	arg02, ##@LR__5015
0487c     0F 13 02 F6 | 	mov	arg01, local01
04880     70 A5 B1 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     7C 03 90 AD |  if_e	jmp	#LR__0346
0488c     73 01 00 FF 
04890     AA 15 06 F6 | 	mov	arg02, ##@LR__5016
04894     0F 13 02 F6 | 	mov	arg01, local01
04898     58 A5 B1 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     6C 03 90 AD |  if_e	jmp	#LR__0347
048a4     73 01 00 FF 
048a8     AF 15 06 F6 | 	mov	arg02, ##@LR__5017
048ac     0F 13 02 F6 | 	mov	arg01, local01
048b0     40 A5 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     5C 03 90 AD |  if_e	jmp	#LR__0348
048bc     73 01 00 FF 
048c0     B4 15 06 F6 | 	mov	arg02, ##@LR__5018
048c4     0F 13 02 F6 | 	mov	arg01, local01
048c8     28 A5 B1 FD | 	call	#__system___string_cmp
048cc     00 FA 0D F2 | 	cmp	result1, #0 wz
048d0     4C 03 90 AD |  if_e	jmp	#LR__0349
048d4     73 01 00 FF 
048d8     B8 15 06 F6 | 	mov	arg02, ##@LR__5019
048dc     0F 13 02 F6 | 	mov	arg01, local01
048e0     10 A5 B1 FD | 	call	#__system___string_cmp
048e4     00 FA 0D F2 | 	cmp	result1, #0 wz
048e8     3C 03 90 AD |  if_e	jmp	#LR__0350
048ec     73 01 00 FF 
048f0     BE 15 06 F6 | 	mov	arg02, ##@LR__5020
048f4     0F 13 02 F6 | 	mov	arg01, local01
048f8     F8 A4 B1 FD | 	call	#__system___string_cmp
048fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04900     2C 03 90 AD |  if_e	jmp	#LR__0351
04904     73 01 00 FF 
04908     C2 15 06 F6 | 	mov	arg02, ##@LR__5021
0490c     0F 13 02 F6 | 	mov	arg01, local01
04910     E0 A4 B1 FD | 	call	#__system___string_cmp
04914     00 FA 0D F2 | 	cmp	result1, #0 wz
04918     1C 03 90 AD |  if_e	jmp	#LR__0352
0491c     73 01 00 FF 
04920     CB 15 06 F6 | 	mov	arg02, ##@LR__5022
04924     0F 13 02 F6 | 	mov	arg01, local01
04928     C8 A4 B1 FD | 	call	#__system___string_cmp
0492c     00 FA 0D F2 | 	cmp	result1, #0 wz
04930     0C 03 90 AD |  if_e	jmp	#LR__0353
04934     73 01 00 FF 
04938     CF 15 06 F6 | 	mov	arg02, ##@LR__5023
0493c     0F 13 02 F6 | 	mov	arg01, local01
04940     B0 A4 B1 FD | 	call	#__system___string_cmp
04944     00 FA 0D F2 | 	cmp	result1, #0 wz
04948     FC 02 90 AD |  if_e	jmp	#LR__0354
0494c     73 01 00 FF 
04950     DD 15 06 F6 | 	mov	arg02, ##@LR__5024
04954     0F 13 02 F6 | 	mov	arg01, local01
04958     98 A4 B1 FD | 	call	#__system___string_cmp
0495c     00 FA 0D F2 | 	cmp	result1, #0 wz
04960     EC 02 90 AD |  if_e	jmp	#LR__0355
04964     73 01 00 FF 
04968     EA 15 06 F6 | 	mov	arg02, ##@LR__5025
0496c     0F 13 02 F6 | 	mov	arg01, local01
04970     80 A4 B1 FD | 	call	#__system___string_cmp
04974     00 FA 0D F2 | 	cmp	result1, #0 wz
04978     DC 02 90 AD |  if_e	jmp	#LR__0356
0497c     73 01 00 FF 
04980     F2 15 06 F6 | 	mov	arg02, ##@LR__5026
04984     0F 13 02 F6 | 	mov	arg01, local01
04988     68 A4 B1 FD | 	call	#__system___string_cmp
0498c     00 FA 0D F2 | 	cmp	result1, #0 wz
04990     CC 02 90 AD |  if_e	jmp	#LR__0357
04994     73 01 00 FF 
04998     F7 15 06 F6 | 	mov	arg02, ##@LR__5027
0499c     0F 13 02 F6 | 	mov	arg01, local01
049a0     50 A4 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     BC 02 90 AD |  if_e	jmp	#LR__0358
049ac     73 01 00 FF 
049b0     FE 15 06 F6 | 	mov	arg02, ##@LR__5028
049b4     0F 13 02 F6 | 	mov	arg01, local01
049b8     38 A4 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     AC 02 90 AD |  if_e	jmp	#LR__0359
049c4     74 01 00 FF 
049c8     04 14 06 F6 | 	mov	arg02, ##@LR__5029
049cc     0F 13 02 F6 | 	mov	arg01, local01
049d0     20 A4 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     9C 02 90 AD |  if_e	jmp	#LR__0360
049dc     74 01 00 FF 
049e0     08 14 06 F6 | 	mov	arg02, ##@LR__5030
049e4     0F 13 02 F6 | 	mov	arg01, local01
049e8     08 A4 B1 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     8C 02 90 AD |  if_e	jmp	#LR__0361
049f4     74 01 00 FF 
049f8     0C 14 06 F6 | 	mov	arg02, ##@LR__5031
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     F0 A3 B1 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     7C 02 90 AD |  if_e	jmp	#LR__0362
04a0c     74 01 00 FF 
04a10     12 14 06 F6 | 	mov	arg02, ##@LR__5032
04a14     0F 13 02 F6 | 	mov	arg01, local01
04a18     D8 A3 B1 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     6C 02 90 AD |  if_e	jmp	#LR__0363
04a24     74 01 00 FF 
04a28     17 14 06 F6 | 	mov	arg02, ##@LR__5033
04a2c     0F 13 02 F6 | 	mov	arg01, local01
04a30     C0 A3 B1 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     5C 02 90 AD |  if_e	jmp	#LR__0364
04a3c     74 01 00 FF 
04a40     1E 14 06 F6 | 	mov	arg02, ##@LR__5034
04a44     0F 13 02 F6 | 	mov	arg01, local01
04a48     A8 A3 B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     4C 02 90 AD |  if_e	jmp	#LR__0365
04a54     74 01 00 FF 
04a58     25 14 06 F6 | 	mov	arg02, ##@LR__5035
04a5c     0F 13 02 F6 | 	mov	arg01, local01
04a60     90 A3 B1 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     3C 02 90 AD |  if_e	jmp	#LR__0366
04a6c     74 01 00 FF 
04a70     2C 14 06 F6 | 	mov	arg02, ##@LR__5036
04a74     0F 13 02 F6 | 	mov	arg01, local01
04a78     78 A3 B1 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     2C 02 90 AD |  if_e	jmp	#LR__0367
04a84     74 01 00 FF 
04a88     33 14 06 F6 | 	mov	arg02, ##@LR__5037
04a8c     0F 13 02 F6 | 	mov	arg01, local01
04a90     60 A3 B1 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     1C 02 90 AD |  if_e	jmp	#LR__0368
04a9c     74 01 00 FF 
04aa0     38 14 06 F6 | 	mov	arg02, ##@LR__5038
04aa4     0F 13 02 F6 | 	mov	arg01, local01
04aa8     48 A3 B1 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     0C 02 90 AD |  if_e	jmp	#LR__0369
04ab4     74 01 00 FF 
04ab8     40 14 06 F6 | 	mov	arg02, ##@LR__5039
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     30 A3 B1 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     FC 01 90 AD |  if_e	jmp	#LR__0370
04acc     74 01 00 FF 
04ad0     46 14 06 F6 | 	mov	arg02, ##@LR__5040
04ad4     0F 13 02 F6 | 	mov	arg01, local01
04ad8     18 A3 B1 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     EC 01 90 AD |  if_e	jmp	#LR__0371
04ae4     74 01 00 FF 
04ae8     4D 14 06 F6 | 	mov	arg02, ##@LR__5041
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     00 A3 B1 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     DC 01 90 AD |  if_e	jmp	#LR__0372
04afc     74 01 00 FF 
04b00     53 14 06 F6 | 	mov	arg02, ##@LR__5042
04b04     0F 13 02 F6 | 	mov	arg01, local01
04b08     E8 A2 B1 FD | 	call	#__system___string_cmp
04b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b10     CC 01 90 AD |  if_e	jmp	#LR__0373
04b14     74 01 00 FF 
04b18     57 14 06 F6 | 	mov	arg02, ##@LR__5043
04b1c     0F 13 02 F6 | 	mov	arg01, local01
04b20     D0 A2 B1 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     BC 01 90 AD |  if_e	jmp	#LR__0374
04b2c     74 01 00 FF 
04b30     5B 14 06 F6 | 	mov	arg02, ##@LR__5044
04b34     0F 13 02 F6 | 	mov	arg01, local01
04b38     B8 A2 B1 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     AC 01 90 AD |  if_e	jmp	#LR__0375
04b44     74 01 00 FF 
04b48     5F 14 06 F6 | 	mov	arg02, ##@LR__5045
04b4c     0F 13 02 F6 | 	mov	arg01, local01
04b50     A0 A2 B1 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     9C 01 90 AD |  if_e	jmp	#LR__0376
04b5c     74 01 00 FF 
04b60     65 14 06 F6 | 	mov	arg02, ##@LR__5046
04b64     0F 13 02 F6 | 	mov	arg01, local01
04b68     88 A2 B1 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     8C 01 90 AD |  if_e	jmp	#LR__0377
04b74     74 01 00 FF 
04b78     6B 14 06 F6 | 	mov	arg02, ##@LR__5047
04b7c     0F 13 02 F6 | 	mov	arg01, local01
04b80     70 A2 B1 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     7C 01 90 AD |  if_e	jmp	#LR__0378
04b8c     74 01 00 FF 
04b90     70 14 06 F6 | 	mov	arg02, ##@LR__5048
04b94     0F 13 02 F6 | 	mov	arg01, local01
04b98     58 A2 B1 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     6C 01 90 AD |  if_e	jmp	#LR__0379
04ba4     74 01 00 FF 
04ba8     74 14 06 F6 | 	mov	arg02, ##@LR__5049
04bac     0F 13 02 F6 | 	mov	arg01, local01
04bb0     40 A2 B1 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     5C 01 90 AD |  if_e	jmp	#LR__0380
04bbc     74 01 00 FF 
04bc0     78 14 06 F6 | 	mov	arg02, ##@LR__5050
04bc4     0F 13 02 F6 | 	mov	arg01, local01
04bc8     28 A2 B1 FD | 	call	#__system___string_cmp
04bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd0     4C 01 90 AD |  if_e	jmp	#LR__0381
04bd4     50 01 90 FD | 	jmp	#LR__0382
04bd8                 | LR__0340
04bd8     9E FA 05 F6 | 	mov	result1, #158
04bdc     4C 01 90 FD | 	jmp	#LR__0383
04be0                 | LR__0341
04be0     85 FA 05 F6 | 	mov	result1, #133
04be4     44 01 90 FD | 	jmp	#LR__0383
04be8                 | LR__0342
04be8     9B FA 05 F6 | 	mov	result1, #155
04bec     3C 01 90 FD | 	jmp	#LR__0383
04bf0                 | LR__0343
04bf0     9B FA 05 F6 | 	mov	result1, #155
04bf4     34 01 90 FD | 	jmp	#LR__0383
04bf8                 | LR__0344
04bf8     A7 FA 05 F6 | 	mov	result1, #167
04bfc     2C 01 90 FD | 	jmp	#LR__0383
04c00                 | LR__0345
04c00     84 FA 05 F6 | 	mov	result1, #132
04c04     24 01 90 FD | 	jmp	#LR__0383
04c08                 | LR__0346
04c08     86 FA 05 F6 | 	mov	result1, #134
04c0c     1C 01 90 FD | 	jmp	#LR__0383
04c10                 | LR__0347
04c10     A2 FA 05 F6 | 	mov	result1, #162
04c14     14 01 90 FD | 	jmp	#LR__0383
04c18                 | LR__0348
04c18     9F FA 05 F6 | 	mov	result1, #159
04c1c     0C 01 90 FD | 	jmp	#LR__0383
04c20                 | LR__0349
04c20     82 FA 05 F6 | 	mov	result1, #130
04c24     04 01 90 FD | 	jmp	#LR__0383
04c28                 | LR__0350
04c28     99 FA 05 F6 | 	mov	result1, #153
04c2c     FC 00 90 FD | 	jmp	#LR__0383
04c30                 | LR__0351
04c30     9C FA 05 F6 | 	mov	result1, #156
04c34     F4 00 90 FD | 	jmp	#LR__0383
04c38                 | LR__0352
04c38     6F FA 05 F6 | 	mov	result1, #111
04c3c     EC 00 90 FD | 	jmp	#LR__0383
04c40                 | LR__0353
04c40     6F FA 05 F6 | 	mov	result1, #111
04c44     E4 00 90 FD | 	jmp	#LR__0383
04c48                 | LR__0354
04c48     93 FA 05 F6 | 	mov	result1, #147
04c4c     DC 00 90 FD | 	jmp	#LR__0383
04c50                 | LR__0355
04c50     94 FA 05 F6 | 	mov	result1, #148
04c54     D4 00 90 FD | 	jmp	#LR__0383
04c58                 | LR__0356
04c58     62 FA 05 F6 | 	mov	result1, #98
04c5c     CC 00 90 FD | 	jmp	#LR__0383
04c60                 | LR__0357
04c60     A3 FA 05 F6 | 	mov	result1, #163
04c64     C4 00 90 FD | 	jmp	#LR__0383
04c68                 | LR__0358
04c68     9D FA 05 F6 | 	mov	result1, #157
04c6c     BC 00 90 FD | 	jmp	#LR__0383
04c70                 | LR__0359
04c70     A4 FA 05 F6 | 	mov	result1, #164
04c74     B4 00 90 FD | 	jmp	#LR__0383
04c78                 | LR__0360
04c78     A8 FA 05 F6 | 	mov	result1, #168
04c7c     AC 00 90 FD | 	jmp	#LR__0383
04c80                 | LR__0361
04c80     AD FA 05 F6 | 	mov	result1, #173
04c84     A4 00 90 FD | 	jmp	#LR__0383
04c88                 | LR__0362
04c88     9A FA 05 F6 | 	mov	result1, #154
04c8c     9C 00 90 FD | 	jmp	#LR__0383
04c90                 | LR__0363
04c90     A6 FA 05 F6 | 	mov	result1, #166
04c94     94 00 90 FD | 	jmp	#LR__0383
04c98                 | LR__0364
04c98     66 FA 05 F6 | 	mov	result1, #102
04c9c     8C 00 90 FD | 	jmp	#LR__0383
04ca0                 | LR__0365
04ca0     67 FA 05 F6 | 	mov	result1, #103
04ca4     84 00 90 FD | 	jmp	#LR__0383
04ca8                 | LR__0366
04ca8     64 FA 05 F6 | 	mov	result1, #100
04cac     7C 00 90 FD | 	jmp	#LR__0383
04cb0                 | LR__0367
04cb0     65 FA 05 F6 | 	mov	result1, #101
04cb4     74 00 90 FD | 	jmp	#LR__0383
04cb8                 | LR__0368
04cb8     98 FA 05 F6 | 	mov	result1, #152
04cbc     6C 00 90 FD | 	jmp	#LR__0383
04cc0                 | LR__0369
04cc0     7B FA 05 F6 | 	mov	result1, #123
04cc4     64 00 90 FD | 	jmp	#LR__0383
04cc8                 | LR__0370
04cc8     76 FA 05 F6 | 	mov	result1, #118
04ccc     5C 00 90 FD | 	jmp	#LR__0383
04cd0                 | LR__0371
04cd0     A5 FA 05 F6 | 	mov	result1, #165
04cd4     54 00 90 FD | 	jmp	#LR__0383
04cd8                 | LR__0372
04cd8     7A FA 05 F6 | 	mov	result1, #122
04cdc     4C 00 90 FD | 	jmp	#LR__0383
04ce0                 | LR__0373
04ce0     54 FA 05 F6 | 	mov	result1, #84
04ce4     44 00 90 FD | 	jmp	#LR__0383
04ce8                 | LR__0374
04ce8     6B FA 05 F6 | 	mov	result1, #107
04cec     3C 00 90 FD | 	jmp	#LR__0383
04cf0                 | LR__0375
04cf0     87 FA 05 F6 | 	mov	result1, #135
04cf4     34 00 90 FD | 	jmp	#LR__0383
04cf8                 | LR__0376
04cf8     6A FA 05 F6 | 	mov	result1, #106
04cfc     2C 00 90 FD | 	jmp	#LR__0383
04d00                 | LR__0377
04d00     6E FA 05 F6 | 	mov	result1, #110
04d04     24 00 90 FD | 	jmp	#LR__0383
04d08                 | LR__0378
04d08     A1 FA 05 F6 | 	mov	result1, #161
04d0c     1C 00 90 FD | 	jmp	#LR__0383
04d10                 | LR__0379
04d10     83 FA 05 F6 | 	mov	result1, #131
04d14     14 00 90 FD | 	jmp	#LR__0383
04d18                 | LR__0380
04d18     A0 FA 05 F6 | 	mov	result1, #160
04d1c     0C 00 90 FD | 	jmp	#LR__0383
04d20                 | LR__0381
04d20     9B FA 05 F6 | 	mov	result1, #155
04d24     04 00 90 FD | 	jmp	#LR__0383
04d28                 | LR__0382
04d28     00 FA 05 F6 | 	mov	result1, #0
04d2c                 | LR__0383
04d2c     A7 F0 03 F6 | 	mov	ptra, fp
04d30     B2 00 A0 FD | 	call	#popregs_
04d34                 | _isfunction_ret
04d34     2D 00 64 FD | 	ret
04d38                 | 
04d38                 | ' 
04d38                 | ' function isname(s as string) as boolean
04d38                 | _isname
04d38     0D 4A 05 F6 | 	mov	COUNT_, #13
04d3c     A8 00 A0 FD | 	call	#pushregs_
04d40     09 1F 02 F6 | 	mov	local01, arg01
04d44     09 21 02 F6 | 	mov	local02, arg01
04d48     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04d4c                 | LR__0390
04d4c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04d50     01 20 06 51 |  if_ne	add	local02, #1
04d54     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04d58                 | LR__0391
04d58     09 21 82 F1 | 	sub	local02, arg01
04d5c     10 FB 01 F6 | 	mov	result1, local02
04d60     FD 22 0A F6 | 	mov	local03, result1 wz
04d64     00 FA 05 A6 |  if_e	mov	result1, #0
04d68     34 02 90 AD |  if_e	jmp	#LR__0403
04d6c     0F 13 02 F6 | 	mov	arg01, local01
04d70     01 14 06 F6 | 	mov	arg02, #1
04d74     01 16 06 F6 | 	mov	arg03, #1
04d78     78 C1 B1 FD | 	call	#__system__Mid_S
04d7c     FD 24 02 F6 | 	mov	local04, result1
04d80                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04d80     74 01 00 FF 
04d84     7F 14 06 F6 | 	mov	arg02, ##@LR__5051
04d88     12 13 02 F6 | 	mov	arg01, local04
04d8c     64 A0 B1 FD | 	call	#__system___string_cmp
04d90     00 FA 55 F2 | 	cmps	result1, #0 wc
04d94     18 00 90 CD |  if_b	jmp	#LR__0392
04d98     74 01 00 FF 
04d9c     81 14 06 F6 | 	mov	arg02, ##@LR__5052
04da0     12 13 02 F6 | 	mov	arg01, local04
04da4     4C A0 B1 FD | 	call	#__system___string_cmp
04da8     01 FA 55 F2 | 	cmps	result1, #1 wc
04dac     1C 00 90 CD |  if_b	jmp	#LR__0393
04db0                 | LR__0392
04db0     74 01 00 FF 
04db4     83 14 06 F6 | 	mov	arg02, ##@LR__5053
04db8     12 13 02 F6 | 	mov	arg01, local04
04dbc     34 A0 B1 FD | 	call	#__system___string_cmp
04dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc4     00 FA 05 56 |  if_ne	mov	result1, #0
04dc8     D4 01 90 5D |  if_ne	jmp	#LR__0403
04dcc                 | LR__0393
04dcc                 | ' if l>2 then 
04dcc     03 22 56 F2 | 	cmps	local03, #3 wc
04dd0     C8 01 90 CD |  if_b	jmp	#LR__0402
04dd4                 | '   for i=2 to l
04dd4     02 26 06 F6 | 	mov	local05, #2
04dd8     11 29 02 F6 | 	mov	local06, local03
04ddc     01 28 06 F1 | 	add	local06, #1
04de0                 | LR__0394
04de0     14 27 52 F2 | 	cmps	local05, local06 wc
04de4     B4 01 90 3D |  if_ae	jmp	#LR__0401
04de8     0F 13 02 F6 | 	mov	arg01, local01
04dec     13 15 02 F6 | 	mov	arg02, local05
04df0     01 16 06 F6 | 	mov	arg03, #1
04df4     FC C0 B1 FD | 	call	#__system__Mid_S
04df8     FD 24 02 F6 | 	mov	local04, result1
04dfc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04dfc     11 27 52 F2 | 	cmps	local05, local03 wc
04e00     9C 00 90 3D |  if_ae	jmp	#LR__0397
04e04     74 01 00 FF 
04e08     85 14 06 F6 | 	mov	arg02, ##@LR__5054
04e0c     12 13 02 F6 | 	mov	arg01, local04
04e10     E0 9F B1 FD | 	call	#__system___string_cmp
04e14     00 FA 55 F2 | 	cmps	result1, #0 wc
04e18     18 00 90 CD |  if_b	jmp	#LR__0395
04e1c     74 01 00 FF 
04e20     87 14 06 F6 | 	mov	arg02, ##@LR__5055
04e24     12 13 02 F6 | 	mov	arg01, local04
04e28     C8 9F B1 FD | 	call	#__system___string_cmp
04e2c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e30     6C 00 90 CD |  if_b	jmp	#LR__0397
04e34                 | LR__0395
04e34     74 01 00 FF 
04e38     89 14 06 F6 | 	mov	arg02, ##@LR__5056
04e3c     12 13 02 F6 | 	mov	arg01, local04
04e40     B0 9F B1 FD | 	call	#__system___string_cmp
04e44     00 FA 55 F2 | 	cmps	result1, #0 wc
04e48     18 00 90 CD |  if_b	jmp	#LR__0396
04e4c     74 01 00 FF 
04e50     8B 14 06 F6 | 	mov	arg02, ##@LR__5057
04e54     12 13 02 F6 | 	mov	arg01, local04
04e58     98 9F B1 FD | 	call	#__system___string_cmp
04e5c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e60     3C 00 90 CD |  if_b	jmp	#LR__0397
04e64                 | LR__0396
04e64     74 01 00 FF 
04e68     8D 2A 06 F6 | 	mov	local07, ##@LR__5058
04e6c     12 13 02 F6 | 	mov	arg01, local04
04e70     15 15 02 F6 | 	mov	arg02, local07
04e74     7C 9F B1 FD | 	call	#__system___string_cmp
04e78     00 FA 0D F2 | 	cmp	result1, #0 wz
04e7c     20 00 90 AD |  if_e	jmp	#LR__0397
04e80     74 01 00 FF 
04e84     8F 2C 06 F6 | 	mov	local08, ##@LR__5059
04e88     12 13 02 F6 | 	mov	arg01, local04
04e8c     16 15 02 F6 | 	mov	arg02, local08
04e90     60 9F B1 FD | 	call	#__system___string_cmp
04e94     FD 2E 0A F6 | 	mov	local09, result1 wz
04e98     00 FA 05 56 |  if_ne	mov	result1, #0
04e9c     00 01 90 5D |  if_ne	jmp	#LR__0403
04ea0                 | LR__0397
04ea0                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04ea0     11 27 0A F2 | 	cmp	local05, local03 wz
04ea4     EC 00 90 5D |  if_ne	jmp	#LR__0400
04ea8     74 01 00 FF 
04eac     91 30 06 F6 | 	mov	local10, ##@LR__5060
04eb0     12 13 02 F6 | 	mov	arg01, local04
04eb4     18 15 02 F6 | 	mov	arg02, local10
04eb8     38 9F B1 FD | 	call	#__system___string_cmp
04ebc     FD 32 02 F6 | 	mov	local11, result1
04ec0     00 32 56 F2 | 	cmps	local11, #0 wc
04ec4     1C 00 90 CD |  if_b	jmp	#LR__0398
04ec8     74 01 00 FF 
04ecc     93 14 06 F6 | 	mov	arg02, ##@LR__5061
04ed0     12 13 02 F6 | 	mov	arg01, local04
04ed4     1C 9F B1 FD | 	call	#__system___string_cmp
04ed8     FD 30 02 F6 | 	mov	local10, result1
04edc     01 30 56 F2 | 	cmps	local10, #1 wc
04ee0     B0 00 90 CD |  if_b	jmp	#LR__0400
04ee4                 | LR__0398
04ee4     74 01 00 FF 
04ee8     95 14 06 F6 | 	mov	arg02, ##@LR__5062
04eec     12 13 02 F6 | 	mov	arg01, local04
04ef0     00 9F B1 FD | 	call	#__system___string_cmp
04ef4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ef8     1C 00 90 CD |  if_b	jmp	#LR__0399
04efc     74 01 00 FF 
04f00     97 2E 06 F6 | 	mov	local09, ##@LR__5063
04f04     12 13 02 F6 | 	mov	arg01, local04
04f08     17 15 02 F6 | 	mov	arg02, local09
04f0c     E4 9E B1 FD | 	call	#__system___string_cmp
04f10     01 FA 55 F2 | 	cmps	result1, #1 wc
04f14     7C 00 90 CD |  if_b	jmp	#LR__0400
04f18                 | LR__0399
04f18     74 01 00 FF 
04f1c     99 2E 06 F6 | 	mov	local09, ##@LR__5064
04f20     12 13 02 F6 | 	mov	arg01, local04
04f24     17 15 02 F6 | 	mov	arg02, local09
04f28     C8 9E B1 FD | 	call	#__system___string_cmp
04f2c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f30     60 00 90 AD |  if_e	jmp	#LR__0400
04f34     74 01 00 FF 
04f38     9B 2C 06 F6 | 	mov	local08, ##@LR__5065
04f3c     12 13 02 F6 | 	mov	arg01, local04
04f40     16 15 02 F6 | 	mov	arg02, local08
04f44     AC 9E B1 FD | 	call	#__system___string_cmp
04f48     FD 2E 0A F6 | 	mov	local09, result1 wz
04f4c     44 00 90 AD |  if_e	jmp	#LR__0400
04f50     74 01 00 FF 
04f54     9D 34 06 F6 | 	mov	local12, ##@LR__5066
04f58     1A 2D 02 F6 | 	mov	local08, local12
04f5c     12 13 02 F6 | 	mov	arg01, local04
04f60     16 15 02 F6 | 	mov	arg02, local08
04f64     8C 9E B1 FD | 	call	#__system___string_cmp
04f68     FD 2A 0A F6 | 	mov	local07, result1 wz
04f6c     24 00 90 AD |  if_e	jmp	#LR__0400
04f70     74 01 00 FF 
04f74     9F 36 06 F6 | 	mov	local13, ##@LR__5067
04f78     1B 35 02 F6 | 	mov	local12, local13
04f7c     12 13 02 F6 | 	mov	arg01, local04
04f80     1A 15 02 F6 | 	mov	arg02, local12
04f84     6C 9E B1 FD | 	call	#__system___string_cmp
04f88     FD 2C 0A F6 | 	mov	local08, result1 wz
04f8c     00 FA 05 56 |  if_ne	mov	result1, #0
04f90     0C 00 90 5D |  if_ne	jmp	#LR__0403
04f94                 | LR__0400
04f94     01 26 06 F1 | 	add	local05, #1
04f98     44 FE 9F FD | 	jmp	#LR__0394
04f9c                 | LR__0401
04f9c                 | LR__0402
04f9c                 | ' return true
04f9c     01 FA 65 F6 | 	neg	result1, #1
04fa0                 | LR__0403
04fa0     A7 F0 03 F6 | 	mov	ptra, fp
04fa4     B2 00 A0 FD | 	call	#popregs_
04fa8                 | _isname_ret
04fa8     2D 00 64 FD | 	ret
04fac                 | 
04fac                 | ' 
04fac                 | ' function isnum(s as string) as boolean
04fac                 | _isnum
04fac     0D 4A 05 F6 | 	mov	COUNT_, #13
04fb0     A8 00 A0 FD | 	call	#pushregs_
04fb4     09 1F 02 F6 | 	mov	local01, arg01
04fb8     00 20 06 F6 | 	mov	local02, #0
04fbc     00 22 06 F6 | 	mov	local03, #0
04fc0     0F 13 02 F6 | 	mov	arg01, local01
04fc4     09 25 02 F6 | 	mov	local04, arg01
04fc8     97 06 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
04fcc                 | LR__0410
04fcc     12 FB C9 FA | 	rdbyte	result1, local04 wz
04fd0     01 24 06 51 |  if_ne	add	local04, #1
04fd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0410
04fd8                 | LR__0411
04fd8     09 25 82 F1 | 	sub	local04, arg01
04fdc     12 FB 01 F6 | 	mov	result1, local04
04fe0     FD 26 0A F6 | 	mov	local05, result1 wz
04fe4     00 FA 05 A6 |  if_e	mov	result1, #0
04fe8     8C 02 90 AD |  if_e	jmp	#LR__0422
04fec     0F 13 02 F6 | 	mov	arg01, local01
04ff0     01 14 06 F6 | 	mov	arg02, #1
04ff4     01 16 06 F6 | 	mov	arg03, #1
04ff8     F8 BE B1 FD | 	call	#__system__Mid_S
04ffc     FD 28 02 F6 | 	mov	local06, result1
05000                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05000     74 01 00 FF 
05004     A1 14 06 F6 | 	mov	arg02, ##@LR__5068
05008     14 13 02 F6 | 	mov	arg01, local06
0500c     E4 9D B1 FD | 	call	#__system___string_cmp
05010     00 FA 55 F2 | 	cmps	result1, #0 wc
05014     18 00 90 CD |  if_b	jmp	#LR__0412
05018     74 01 00 FF 
0501c     A3 14 06 F6 | 	mov	arg02, ##@LR__5069
05020     14 13 02 F6 | 	mov	arg01, local06
05024     CC 9D B1 FD | 	call	#__system___string_cmp
05028     01 FA 55 F2 | 	cmps	result1, #1 wc
0502c     78 00 90 CD |  if_b	jmp	#LR__0413
05030                 | LR__0412
05030     74 01 00 FF 
05034     A5 14 06 F6 | 	mov	arg02, ##@LR__5070
05038     14 13 02 F6 | 	mov	arg01, local06
0503c     B4 9D B1 FD | 	call	#__system___string_cmp
05040     00 FA 0D F2 | 	cmp	result1, #0 wz
05044     60 00 90 AD |  if_e	jmp	#LR__0413
05048     74 01 00 FF 
0504c     A7 2A 06 F6 | 	mov	local07, ##@LR__5071
05050     14 13 02 F6 | 	mov	arg01, local06
05054     15 15 02 F6 | 	mov	arg02, local07
05058     98 9D B1 FD | 	call	#__system___string_cmp
0505c     00 FA 0D F2 | 	cmp	result1, #0 wz
05060     44 00 90 AD |  if_e	jmp	#LR__0413
05064     74 01 00 FF 
05068     A9 2C 06 F6 | 	mov	local08, ##@LR__5072
0506c     16 2B 02 F6 | 	mov	local07, local08
05070     14 13 02 F6 | 	mov	arg01, local06
05074     15 15 02 F6 | 	mov	arg02, local07
05078     78 9D B1 FD | 	call	#__system___string_cmp
0507c     00 FA 4D F2 | 	cmps	result1, #0 wz
05080     24 00 90 AD |  if_e	jmp	#LR__0413
05084     74 01 00 FF 
05088     AB 2E 06 F6 | 	mov	local09, ##@LR__5073
0508c     17 2D 02 F6 | 	mov	local08, local09
05090     14 13 02 F6 | 	mov	arg01, local06
05094     16 15 02 F6 | 	mov	arg02, local08
05098     58 9D B1 FD | 	call	#__system___string_cmp
0509c     FD 2A 0A F6 | 	mov	local07, result1 wz
050a0     00 FA 05 56 |  if_ne	mov	result1, #0
050a4     D0 01 90 5D |  if_ne	jmp	#LR__0422
050a8                 | LR__0413
050a8                 | ' if m$="." then ds=1
050a8     74 01 00 FF 
050ac     AD 14 06 F6 | 	mov	arg02, ##@LR__5074
050b0     14 13 02 F6 | 	mov	arg01, local06
050b4     3C 9D B1 FD | 	call	#__system___string_cmp
050b8     00 FA 0D F2 | 	cmp	result1, #0 wz
050bc     01 20 06 A6 |  if_e	mov	local02, #1
050c0                 | ' if l>1 then 
050c0     02 26 56 F2 | 	cmps	local05, #2 wc
050c4     AC 01 90 CD |  if_b	jmp	#LR__0421
050c8                 | '   for i=2 to l
050c8     02 30 06 F6 | 	mov	local10, #2
050cc     13 33 02 F6 | 	mov	local11, local05
050d0     01 32 06 F1 | 	add	local11, #1
050d4                 | LR__0414
050d4     19 31 52 F2 | 	cmps	local10, local11 wc
050d8     98 01 90 3D |  if_ae	jmp	#LR__0420
050dc     0F 13 02 F6 | 	mov	arg01, local01
050e0     18 15 02 F6 | 	mov	arg02, local10
050e4     01 16 06 F6 | 	mov	arg03, #1
050e8     08 BE B1 FD | 	call	#__system__Mid_S
050ec     FD 28 02 F6 | 	mov	local06, result1
050f0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
050f0     74 01 00 FF 
050f4     AF 14 06 F6 | 	mov	arg02, ##@LR__5075
050f8     14 13 02 F6 | 	mov	arg01, local06
050fc     F4 9C B1 FD | 	call	#__system___string_cmp
05100     00 FA 55 F2 | 	cmps	result1, #0 wc
05104     18 00 90 CD |  if_b	jmp	#LR__0415
05108     74 01 00 FF 
0510c     B1 14 06 F6 | 	mov	arg02, ##@LR__5076
05110     14 13 02 F6 | 	mov	arg01, local06
05114     DC 9C B1 FD | 	call	#__system___string_cmp
05118     01 FA 55 F2 | 	cmps	result1, #1 wc
0511c     98 00 90 CD |  if_b	jmp	#LR__0416
05120                 | LR__0415
05120     74 01 00 FF 
05124     B3 14 06 F6 | 	mov	arg02, ##@LR__5077
05128     14 13 02 F6 | 	mov	arg01, local06
0512c     C4 9C B1 FD | 	call	#__system___string_cmp
05130     00 FA 0D F2 | 	cmp	result1, #0 wz
05134     80 00 90 AD |  if_e	jmp	#LR__0416
05138     74 01 00 FF 
0513c     B5 2A 06 F6 | 	mov	local07, ##@LR__5078
05140     14 13 02 F6 | 	mov	arg01, local06
05144     15 15 02 F6 | 	mov	arg02, local07
05148     A8 9C B1 FD | 	call	#__system___string_cmp
0514c     00 FA 4D F2 | 	cmps	result1, #0 wz
05150     64 00 90 AD |  if_e	jmp	#LR__0416
05154     74 01 00 FF 
05158     B7 2C 06 F6 | 	mov	local08, ##@LR__5079
0515c     16 2B 02 F6 | 	mov	local07, local08
05160     14 13 02 F6 | 	mov	arg01, local06
05164     15 15 02 F6 | 	mov	arg02, local07
05168     88 9C B1 FD | 	call	#__system___string_cmp
0516c     FD 34 0A F6 | 	mov	local12, result1 wz
05170     44 00 90 AD |  if_e	jmp	#LR__0416
05174     74 01 00 FF 
05178     B9 2E 06 F6 | 	mov	local09, ##@LR__5080
0517c     17 2D 02 F6 | 	mov	local08, local09
05180     14 13 02 F6 | 	mov	arg01, local06
05184     16 15 02 F6 | 	mov	arg02, local08
05188     68 9C B1 FD | 	call	#__system___string_cmp
0518c     FD 2A 0A F6 | 	mov	local07, result1 wz
05190     24 00 90 AD |  if_e	jmp	#LR__0416
05194     74 01 00 FF 
05198     BB 36 06 F6 | 	mov	local13, ##@LR__5081
0519c     1B 2F 02 F6 | 	mov	local09, local13
051a0     14 13 02 F6 | 	mov	arg01, local06
051a4     17 15 02 F6 | 	mov	arg02, local09
051a8     48 9C B1 FD | 	call	#__system___string_cmp
051ac     FD 2C 0A F6 | 	mov	local08, result1 wz
051b0     00 FA 05 56 |  if_ne	mov	result1, #0
051b4     C0 00 90 5D |  if_ne	jmp	#LR__0422
051b8                 | LR__0416
051b8                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
051b8     74 01 00 FF 
051bc     BD 14 06 F6 | 	mov	arg02, ##@LR__5082
051c0     14 13 02 F6 | 	mov	arg01, local06
051c4     2C 9C B1 FD | 	call	#__system___string_cmp
051c8     00 FA 0D F2 | 	cmp	result1, #0 wz
051cc     38 00 90 5D |  if_ne	jmp	#LR__0417
051d0     18 15 02 F6 | 	mov	arg02, local10
051d4     01 14 86 F1 | 	sub	arg02, #1
051d8     0F 13 02 F6 | 	mov	arg01, local01
051dc     01 16 06 F6 | 	mov	arg03, #1
051e0     10 BD B1 FD | 	call	#__system__Mid_S
051e4     FD 12 02 F6 | 	mov	arg01, result1
051e8     00 BF B1 FD | 	call	#__system__LCase_S
051ec     FD 12 02 F6 | 	mov	arg01, result1
051f0     74 01 00 FF 
051f4     BF 14 06 F6 | 	mov	arg02, ##@LR__5083
051f8     F8 9B B1 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     00 FA 05 56 |  if_ne	mov	result1, #0
05204     70 00 90 5D |  if_ne	jmp	#LR__0422
05208                 | LR__0417
05208                 | '     if m$="." then ds+=1: if ds>1 then return false
05208     74 01 00 FF 
0520c     C1 14 06 F6 | 	mov	arg02, ##@LR__5084
05210     14 13 02 F6 | 	mov	arg01, local06
05214     DC 9B B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     01 20 06 A1 |  if_e	add	local02, #1
05220     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05224     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05228     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0422
0522c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0522c     74 01 00 FF 
05230     C3 14 06 F6 | 	mov	arg02, ##@LR__5085
05234     14 13 02 F6 | 	mov	arg01, local06
05238     B8 9B B1 FD | 	call	#__system___string_cmp
0523c     00 FA 4D F2 | 	cmps	result1, #0 wz
05240     18 00 90 AD |  if_e	jmp	#LR__0418
05244     74 01 00 FF 
05248     C5 14 06 F6 | 	mov	arg02, ##@LR__5086
0524c     14 13 02 F6 | 	mov	arg01, local06
05250     A0 9B B1 FD | 	call	#__system___string_cmp
05254     00 FA 4D F2 | 	cmps	result1, #0 wz
05258     10 00 90 5D |  if_ne	jmp	#LR__0419
0525c                 | LR__0418
0525c     01 22 06 F1 | 	add	local03, #1
05260     02 22 56 F2 | 	cmps	local03, #2 wc
05264     00 FA 05 36 |  if_ae	mov	result1, #0
05268     0C 00 90 3D |  if_ae	jmp	#LR__0422
0526c                 | LR__0419
0526c     01 30 06 F1 | 	add	local10, #1
05270     60 FE 9F FD | 	jmp	#LR__0414
05274                 | LR__0420
05274                 | LR__0421
05274                 | ' return true
05274     01 FA 65 F6 | 	neg	result1, #1
05278                 | LR__0422
05278     A7 F0 03 F6 | 	mov	ptra, fp
0527c     B2 00 A0 FD | 	call	#popregs_
05280                 | _isnum_ret
05280     2D 00 64 FD | 	ret
05284                 | 
05284                 | '   
05284                 | ' function isint(s as string) as boolean
05284                 | _isint
05284     05 4A 05 F6 | 	mov	COUNT_, #5
05288     A8 00 A0 FD | 	call	#pushregs_
0528c     09 1F 02 F6 | 	mov	local01, arg01
05290     09 21 02 F6 | 	mov	local02, arg01
05294     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
05298                 | LR__0430
05298     10 FB C9 FA | 	rdbyte	result1, local02 wz
0529c     01 20 06 51 |  if_ne	add	local02, #1
052a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
052a4                 | LR__0431
052a4     09 21 82 F1 | 	sub	local02, arg01
052a8     10 FB 01 F6 | 	mov	result1, local02
052ac     FD 20 0A F6 | 	mov	local02, result1 wz
052b0     00 FA 05 A6 |  if_e	mov	result1, #0
052b4     18 01 90 AD |  if_e	jmp	#LR__0439
052b8     0F 13 02 F6 | 	mov	arg01, local01
052bc     01 14 06 F6 | 	mov	arg02, #1
052c0     01 16 06 F6 | 	mov	arg03, #1
052c4     2C BC B1 FD | 	call	#__system__Mid_S
052c8     FD 22 02 F6 | 	mov	local03, result1
052cc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
052cc     74 01 00 FF 
052d0     C7 14 06 F6 | 	mov	arg02, ##@LR__5087
052d4     11 13 02 F6 | 	mov	arg01, local03
052d8     18 9B B1 FD | 	call	#__system___string_cmp
052dc     00 FA 55 F2 | 	cmps	result1, #0 wc
052e0     18 00 90 CD |  if_b	jmp	#LR__0432
052e4     74 01 00 FF 
052e8     C9 14 06 F6 | 	mov	arg02, ##@LR__5088
052ec     11 13 02 F6 | 	mov	arg01, local03
052f0     00 9B B1 FD | 	call	#__system___string_cmp
052f4     01 FA 55 F2 | 	cmps	result1, #1 wc
052f8     4C 00 90 CD |  if_b	jmp	#LR__0433
052fc                 | LR__0432
052fc     74 01 00 FF 
05300     CB 14 06 F6 | 	mov	arg02, ##@LR__5089
05304     11 13 02 F6 | 	mov	arg01, local03
05308     E8 9A B1 FD | 	call	#__system___string_cmp
0530c     00 FA 0D F2 | 	cmp	result1, #0 wz
05310     34 00 90 AD |  if_e	jmp	#LR__0433
05314     74 01 00 FF 
05318     CD 14 06 F6 | 	mov	arg02, ##@LR__5090
0531c     11 13 02 F6 | 	mov	arg01, local03
05320     D0 9A B1 FD | 	call	#__system___string_cmp
05324     00 FA 0D F2 | 	cmp	result1, #0 wz
05328     1C 00 90 AD |  if_e	jmp	#LR__0433
0532c     74 01 00 FF 
05330     CF 14 06 F6 | 	mov	arg02, ##@LR__5091
05334     11 13 02 F6 | 	mov	arg01, local03
05338     B8 9A B1 FD | 	call	#__system___string_cmp
0533c     00 FA 0D F2 | 	cmp	result1, #0 wz
05340     00 FA 05 56 |  if_ne	mov	result1, #0
05344     88 00 90 5D |  if_ne	jmp	#LR__0439
05348                 | LR__0433
05348                 | ' 
05348                 | ' if l>1 then 
05348     02 20 56 F2 | 	cmps	local02, #2 wc
0534c     7C 00 90 CD |  if_b	jmp	#LR__0438
05350                 | '   for i=2 to l
05350     02 24 06 F6 | 	mov	local04, #2
05354     10 27 02 F6 | 	mov	local05, local02
05358     01 26 06 F1 | 	add	local05, #1
0535c                 | LR__0434
0535c     13 25 52 F2 | 	cmps	local04, local05 wc
05360     68 00 90 3D |  if_ae	jmp	#LR__0437
05364     0F 13 02 F6 | 	mov	arg01, local01
05368     12 15 02 F6 | 	mov	arg02, local04
0536c     01 16 06 F6 | 	mov	arg03, #1
05370     80 BB B1 FD | 	call	#__system__Mid_S
05374     FD 22 02 F6 | 	mov	local03, result1
05378                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05378     74 01 00 FF 
0537c     D1 14 06 F6 | 	mov	arg02, ##@LR__5092
05380     11 13 02 F6 | 	mov	arg01, local03
05384     6C 9A B1 FD | 	call	#__system___string_cmp
05388     00 FA 55 F2 | 	cmps	result1, #0 wc
0538c     18 00 90 CD |  if_b	jmp	#LR__0435
05390     74 01 00 FF 
05394     D3 14 06 F6 | 	mov	arg02, ##@LR__5093
05398     11 13 02 F6 | 	mov	arg01, local03
0539c     54 9A B1 FD | 	call	#__system___string_cmp
053a0     01 FA 55 F2 | 	cmps	result1, #1 wc
053a4     1C 00 90 CD |  if_b	jmp	#LR__0436
053a8                 | LR__0435
053a8     74 01 00 FF 
053ac     D5 14 06 F6 | 	mov	arg02, ##@LR__5094
053b0     11 13 02 F6 | 	mov	arg01, local03
053b4     3C 9A B1 FD | 	call	#__system___string_cmp
053b8     00 FA 0D F2 | 	cmp	result1, #0 wz
053bc     00 FA 05 56 |  if_ne	mov	result1, #0
053c0     0C 00 90 5D |  if_ne	jmp	#LR__0439
053c4                 | LR__0436
053c4     01 24 06 F1 | 	add	local04, #1
053c8     90 FF 9F FD | 	jmp	#LR__0434
053cc                 | LR__0437
053cc                 | LR__0438
053cc                 | ' return true
053cc     01 FA 65 F6 | 	neg	result1, #1
053d0                 | LR__0439
053d0     A7 F0 03 F6 | 	mov	ptra, fp
053d4     B2 00 A0 FD | 	call	#popregs_
053d8                 | _isint_ret
053d8     2D 00 64 FD | 	ret
053dc                 | 
053dc                 | ' 
053dc                 | ' function isdec(s as string) as boolean
053dc                 | _isdec
053dc     05 4A 05 F6 | 	mov	COUNT_, #5
053e0     A8 00 A0 FD | 	call	#pushregs_
053e4     09 1F 02 F6 | 	mov	local01, arg01
053e8     09 21 02 F6 | 	mov	local02, arg01
053ec     97 06 48 FB | 	callpa	#(@LR__0441-@LR__0440)>>2,fcache_load_ptr_
053f0                 | LR__0440
053f0     10 FB C9 FA | 	rdbyte	result1, local02 wz
053f4     01 20 06 51 |  if_ne	add	local02, #1
053f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
053fc                 | LR__0441
053fc     09 21 82 F1 | 	sub	local02, arg01
05400     10 FB 01 F6 | 	mov	result1, local02
05404     FD 20 0A F6 | 	mov	local02, result1 wz
05408     00 FA 05 A6 |  if_e	mov	result1, #0
0540c     80 00 90 AD |  if_e	jmp	#LR__0446
05410                 | ' for i=1 to l
05410     01 22 06 F6 | 	mov	local03, #1
05414     10 25 02 F6 | 	mov	local04, local02
05418     01 24 06 F1 | 	add	local04, #1
0541c                 | LR__0442
0541c     12 23 52 F2 | 	cmps	local03, local04 wc
05420     68 00 90 3D |  if_ae	jmp	#LR__0445
05424     0F 13 02 F6 | 	mov	arg01, local01
05428     11 15 02 F6 | 	mov	arg02, local03
0542c     01 16 06 F6 | 	mov	arg03, #1
05430     C0 BA B1 FD | 	call	#__system__Mid_S
05434     FD 26 02 F6 | 	mov	local05, result1
05438                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05438     74 01 00 FF 
0543c     D7 14 06 F6 | 	mov	arg02, ##@LR__5095
05440     13 13 02 F6 | 	mov	arg01, local05
05444     AC 99 B1 FD | 	call	#__system___string_cmp
05448     00 FA 55 F2 | 	cmps	result1, #0 wc
0544c     18 00 90 CD |  if_b	jmp	#LR__0443
05450     74 01 00 FF 
05454     D9 14 06 F6 | 	mov	arg02, ##@LR__5096
05458     13 13 02 F6 | 	mov	arg01, local05
0545c     94 99 B1 FD | 	call	#__system___string_cmp
05460     01 FA 55 F2 | 	cmps	result1, #1 wc
05464     1C 00 90 CD |  if_b	jmp	#LR__0444
05468                 | LR__0443
05468     74 01 00 FF 
0546c     DB 14 06 F6 | 	mov	arg02, ##@LR__5097
05470     13 13 02 F6 | 	mov	arg01, local05
05474     7C 99 B1 FD | 	call	#__system___string_cmp
05478     00 FA 0D F2 | 	cmp	result1, #0 wz
0547c     00 FA 05 56 |  if_ne	mov	result1, #0
05480     0C 00 90 5D |  if_ne	jmp	#LR__0446
05484                 | LR__0444
05484     01 22 06 F1 | 	add	local03, #1
05488     90 FF 9F FD | 	jmp	#LR__0442
0548c                 | LR__0445
0548c                 | ' return true
0548c     01 FA 65 F6 | 	neg	result1, #1
05490                 | LR__0446
05490     A7 F0 03 F6 | 	mov	ptra, fp
05494     B2 00 A0 FD | 	call	#popregs_
05498                 | _isdec_ret
05498     2D 00 64 FD | 	ret
0549c                 | 
0549c                 | ' 
0549c                 | ' function isstring(s as string) as boolean
0549c                 | _isstring
0549c     01 4A 05 F6 | 	mov	COUNT_, #1
054a0     A8 00 A0 FD | 	call	#pushregs_
054a4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
054a4     09 1F 02 F6 | 	mov	local01, arg01
054a8     01 14 06 F6 | 	mov	arg02, #1
054ac     2C B9 B1 FD | 	call	#__system__Left_S
054b0     FD 12 02 F6 | 	mov	arg01, result1
054b4     74 01 00 FF 
054b8     DD 14 06 F6 | 	mov	arg02, ##@LR__5098
054bc     34 99 B1 FD | 	call	#__system___string_cmp
054c0     00 FA 4D F2 | 	cmps	result1, #0 wz
054c4     28 00 90 5D |  if_ne	jmp	#LR__0450
054c8     0F 13 02 F6 | 	mov	arg01, local01
054cc     01 14 06 F6 | 	mov	arg02, #1
054d0     90 B9 B1 FD | 	call	#__system__Right_S
054d4     FD 12 02 F6 | 	mov	arg01, result1
054d8     74 01 00 FF 
054dc     DF 14 06 F6 | 	mov	arg02, ##@LR__5099
054e0     10 99 B1 FD | 	call	#__system___string_cmp
054e4     00 FA 4D F2 | 	cmps	result1, #0 wz
054e8     01 FA 65 A6 |  if_e	neg	result1, #1
054ec     04 00 90 AD |  if_e	jmp	#LR__0451
054f0                 | LR__0450
054f0     00 FA 05 F6 | 	mov	result1, #0
054f4                 | LR__0451
054f4     A7 F0 03 F6 | 	mov	ptra, fp
054f8     B2 00 A0 FD | 	call	#popregs_
054fc                 | _isstring_ret
054fc     2D 00 64 FD | 	ret
05500                 | 
05500                 | ' 
05500                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
05500                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05500                 | ' 
05500                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05500                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
05500                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05500                 | ' 
05500                 | ' '----- delete a line from a program
05500                 | ' 
05500                 | ' function deleteline(aline as ulong) as integer
05500                 | _deleteline
05500     03 4A 05 F6 | 	mov	COUNT_, #3
05504     A8 00 A0 FD | 	call	#pushregs_
05508     2C F0 07 F1 | 	add	ptra, #44
0550c     04 4E 05 F1 | 	add	fp, #4
05510     A7 12 62 FC | 	wrlong	arg01, fp
05514     4A 00 00 FF 
05518     B4 E4 05 F1 | 	add	objptr, ##38068
0551c     F2 1E 02 FB | 	rdlong	local01, objptr
05520     0C 4E 05 F1 | 	add	fp, #12
05524     A7 1E 62 FC | 	wrlong	local01, fp
05528     10 4E 85 F1 | 	sub	fp, #16
0552c                 | ' 
0552c                 | ' 
0552c                 | ' searchptr=programstart
0552c                 | ' 
0552c                 | ' do
0552c     3E 00 00 FF 
05530     E8 E5 85 F1 | 	sub	objptr, ##32232
05534                 | LR__0460
05534     14 4E 05 F1 | 	add	fp, #20
05538     A7 12 02 F6 | 	mov	arg01, fp
0553c     04 4E 85 F1 | 	sub	fp, #4
05540     A7 14 02 FB | 	rdlong	arg02, fp
05544     10 4E 85 F1 | 	sub	fp, #16
05548     18 16 06 F6 | 	mov	arg03, #24
0554c     3C 8C B1 FD | 	call	#_psram_spin2_read1
05550     10 4E 05 F1 | 	add	fp, #16
05554     A7 1E 02 FB | 	rdlong	local01, fp
05558     08 4E 85 F1 | 	sub	fp, #8
0555c     A7 1E 62 FC | 	wrlong	local01, fp
05560     20 4E 05 F1 | 	add	fp, #32
05564     A7 1E 02 FB | 	rdlong	local01, fp
05568     18 4E 85 F1 | 	sub	fp, #24
0556c     A7 1E 62 FC | 	wrlong	local01, fp
05570     04 4E 05 F1 | 	add	fp, #4
05574     A7 1E 02 FB | 	rdlong	local01, fp
05578     10 4E 85 F1 | 	sub	fp, #16
0557c     A7 16 02 FB | 	rdlong	arg03, fp
05580     04 4E 85 F1 | 	sub	fp, #4
05584     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05588     28 4E 05 C1 |  if_b	add	fp, #40
0558c     A7 20 02 CB |  if_b	rdlong	local02, fp
05590     28 4E 85 C1 |  if_b	sub	fp, #40
05594     FF FF 3F CF 
05598     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0559c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0460
055a0     0B 00 00 FF 
055a4     CC E4 85 F1 | 	sub	objptr, ##5836
055a8                 | ' 
055a8                 | ' 
055a8                 | ' if header(0)<>aline then return -1
055a8     14 4E 05 F1 | 	add	fp, #20
055ac     A7 1E 02 FB | 	rdlong	local01, fp
055b0     10 4E 85 F1 | 	sub	fp, #16
055b4     A7 22 02 FB | 	rdlong	local03, fp
055b8     04 4E 85 F1 | 	sub	fp, #4
055bc     11 1F 0A F2 | 	cmp	local01, local03 wz
055c0     01 FA 65 56 |  if_ne	neg	result1, #1
055c4     D8 02 90 5D |  if_ne	jmp	#LR__0466
055c8     08 4E 05 F1 | 	add	fp, #8
055cc     A7 12 02 FB | 	rdlong	arg01, fp
055d0     08 4E 85 F1 | 	sub	fp, #8
055d4     01 14 66 F6 | 	neg	arg02, #1
055d8     AC 54 B1 FD | 	call	#_pslpoke
055dc                 | ' 
055dc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
055dc                 | ' 
055dc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
055dc     28 4E 05 F1 | 	add	fp, #40
055e0     A7 1E 02 FB | 	rdlong	local01, fp
055e4     28 4E 85 F1 | 	sub	fp, #40
055e8     FF FF 3F FF 
055ec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
055f0     24 4E 05 A1 |  if_e	add	fp, #36
055f4     A7 22 02 AB |  if_e	rdlong	local03, fp
055f8     24 4E 85 A1 |  if_e	sub	fp, #36
055fc     FF FF 7F AF 
05600     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
05604     88 00 90 5D |  if_ne	jmp	#LR__0461
05608     4A 00 00 FF 
0560c     B4 E4 05 F1 | 	add	objptr, ##38068
05610     00 04 80 FF 
05614     F2 00 68 FC | 	wrlong	##524288, objptr
05618     07 00 00 FF 
0561c     28 E4 85 F1 | 	sub	objptr, ##3624
05620     00 04 80 FF 
05624     F2 00 68 FC | 	wrlong	##524288, objptr
05628     07 00 00 FF 
0562c     2C E4 05 F1 | 	add	objptr, ##3628
05630     F2 00 68 FC | 	wrlong	#0, objptr
05634     04 E4 05 F1 | 	add	objptr, #4
05638     FF FF FF FF 
0563c     F2 FE 6B FC | 	wrlong	##-1, objptr
05640     4A 00 00 FF 
05644     BC E4 85 F1 | 	sub	objptr, ##38076
05648     00 12 06 F6 | 	mov	arg01, #0
0564c     01 14 66 F6 | 	neg	arg02, #1
05650     34 54 B1 FD | 	call	#_pslpoke
05654     10 12 06 F6 | 	mov	arg01, #16
05658     01 14 66 F6 | 	neg	arg02, #1
0565c     28 54 B1 FD | 	call	#_pslpoke
05660     14 12 06 F6 | 	mov	arg01, #20
05664     1E 14 CE F9 | 	bmask	arg02, #30
05668     1C 54 B1 FD | 	call	#_pslpoke
0566c     58 00 00 FF 
05670     EC E4 05 F1 | 	add	objptr, ##45292
05674     00 04 80 FF 
05678     F2 00 68 FC | 	wrlong	##524288, objptr
0567c     04 E4 05 F1 | 	add	objptr, #4
05680     00 04 80 FF 
05684     F2 00 68 FC | 	wrlong	##524288, objptr
05688     58 00 00 FF 
0568c     F0 E4 85 F1 | 	sub	objptr, ##45296
05690                 | LR__0461
05690                 | ' 
05690                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05690     28 4E 05 F1 | 	add	fp, #40
05694     A7 1E 02 FB | 	rdlong	local01, fp
05698     28 4E 85 F1 | 	sub	fp, #40
0569c     FF FF 3F FF 
056a0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
056a4     74 00 90 5D |  if_ne	jmp	#LR__0462
056a8     24 4E 05 F1 | 	add	fp, #36
056ac     A7 22 02 FB | 	rdlong	local03, fp
056b0     24 4E 85 F1 | 	sub	fp, #36
056b4     FF FF 7F FF 
056b8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
056bc     5C 00 90 AD |  if_e	jmp	#LR__0462
056c0     24 4E 05 F1 | 	add	fp, #36
056c4     A7 12 02 FB | 	rdlong	arg01, fp
056c8     24 4E 85 F1 | 	sub	fp, #36
056cc     14 12 06 F1 | 	add	arg01, #20
056d0     1E 14 CE F9 | 	bmask	arg02, #30
056d4     B0 53 B1 FD | 	call	#_pslpoke
056d8     24 4E 05 F1 | 	add	fp, #36
056dc     A7 1E 02 FB | 	rdlong	local01, fp
056e0     4A 00 00 FF 
056e4     BC E4 05 F1 | 	add	objptr, ##38076
056e8     F2 1E 62 FC | 	wrlong	local01, objptr
056ec     4A 00 00 FF 
056f0     BC E4 85 F1 | 	sub	objptr, ##38076
056f4     A7 12 02 FB | 	rdlong	arg01, fp
056f8     24 4E 85 F1 | 	sub	fp, #36
056fc     B8 54 B1 FD | 	call	#_pslpeek
05700     4A 00 00 FF 
05704     B8 E4 05 F1 | 	add	objptr, ##38072
05708     F2 FA 61 FC | 	wrlong	result1, objptr
0570c     4A 00 00 FF 
05710     B8 E4 85 F1 | 	sub	objptr, ##38072
05714                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
05714                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
05714                 | '   lastline=pslpeek(header(4))
05714                 | '   return 0
05714     00 FA 05 F6 | 	mov	result1, #0
05718     84 01 90 FD | 	jmp	#LR__0466
0571c                 | LR__0462
0571c                 | ' 
0571c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
0571c     28 4E 05 F1 | 	add	fp, #40
05720     A7 1E 02 FB | 	rdlong	local01, fp
05724     28 4E 85 F1 | 	sub	fp, #40
05728     FF FF 3F FF 
0572c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05730     58 00 90 AD |  if_e	jmp	#LR__0463
05734     24 4E 05 F1 | 	add	fp, #36
05738     A7 22 02 FB | 	rdlong	local03, fp
0573c     24 4E 85 F1 | 	sub	fp, #36
05740     FF FF 7F FF 
05744     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05748     40 00 90 5D |  if_ne	jmp	#LR__0463
0574c     28 4E 05 F1 | 	add	fp, #40
05750     A7 12 02 FB | 	rdlong	arg01, fp
05754     28 4E 85 F1 | 	sub	fp, #40
05758     10 12 06 F1 | 	add	arg01, #16
0575c     01 14 66 F6 | 	neg	arg02, #1
05760     24 53 B1 FD | 	call	#_pslpoke
05764     28 4E 05 F1 | 	add	fp, #40
05768     A7 1E 02 FB | 	rdlong	local01, fp
0576c     28 4E 85 F1 | 	sub	fp, #40
05770     4A 00 00 FF 
05774     B4 E4 05 F1 | 	add	objptr, ##38068
05778     F2 1E 62 FC | 	wrlong	local01, objptr
0577c     4A 00 00 FF 
05780     B4 E4 85 F1 | 	sub	objptr, ##38068
05784                 | ' '   print "deleted first line"
05784                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05784                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05784                 | '   return 0
05784     00 FA 05 F6 | 	mov	result1, #0
05788     14 01 90 FD | 	jmp	#LR__0466
0578c                 | LR__0463
0578c                 | ' 
0578c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0578c     28 4E 05 F1 | 	add	fp, #40
05790     A7 1E 02 FB | 	rdlong	local01, fp
05794     28 4E 85 F1 | 	sub	fp, #40
05798     FF FF 3F FF 
0579c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
057a0     24 4E 05 51 |  if_ne	add	fp, #36
057a4     A7 22 02 5B |  if_ne	rdlong	local03, fp
057a8     24 4E 85 51 |  if_ne	sub	fp, #36
057ac     FF FF 7F 5F 
057b0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
057b4     40 00 90 AD |  if_e	jmp	#LR__0464
057b8     28 4E 05 F1 | 	add	fp, #40
057bc     A7 12 02 FB | 	rdlong	arg01, fp
057c0     10 12 06 F1 | 	add	arg01, #16
057c4     04 4E 85 F1 | 	sub	fp, #4
057c8     A7 14 02 FB | 	rdlong	arg02, fp
057cc     24 4E 85 F1 | 	sub	fp, #36
057d0     B4 52 B1 FD | 	call	#_pslpoke
057d4     24 4E 05 F1 | 	add	fp, #36
057d8     A7 12 02 FB | 	rdlong	arg01, fp
057dc     14 12 06 F1 | 	add	arg01, #20
057e0     04 4E 05 F1 | 	add	fp, #4
057e4     A7 14 02 FB | 	rdlong	arg02, fp
057e8     28 4E 85 F1 | 	sub	fp, #40
057ec     98 52 B1 FD | 	call	#_pslpoke
057f0                 | '    pslpoke(header(5)+16,header(4))  
057f0                 | '    pslpoke(header(4)+20, header(5))
057f0                 | '    return 0
057f0     00 FA 05 F6 | 	mov	result1, #0
057f4     A8 00 90 FD | 	jmp	#LR__0466
057f8                 | LR__0464
057f8     10 4E 05 F1 | 	add	fp, #16
057fc     A7 1E 02 FB | 	rdlong	local01, fp
05800     08 4E 85 F1 | 	sub	fp, #8
05804     A7 1E 62 FC | 	wrlong	local01, fp
05808     4A 00 00 FF 
0580c     B4 E4 05 F1 | 	add	objptr, ##38068
05810     F2 1E 02 FB | 	rdlong	local01, objptr
05814     08 4E 05 F1 | 	add	fp, #8
05818     A7 1E 62 FC | 	wrlong	local01, fp
0581c     10 4E 85 F1 | 	sub	fp, #16
05820                 | ' 
05820                 | ' 
05820                 | ' 
05820                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05820                 | ' 
05820                 | ' lineptr2=searchptr
05820                 | ' searchptr=programstart
05820                 | ' 
05820                 | ' do
05820     3E 00 00 FF 
05824     E8 E5 85 F1 | 	sub	objptr, ##32232
05828                 | LR__0465
05828     14 4E 05 F1 | 	add	fp, #20
0582c     A7 12 02 F6 | 	mov	arg01, fp
05830     04 4E 85 F1 | 	sub	fp, #4
05834     A7 14 02 FB | 	rdlong	arg02, fp
05838     10 4E 85 F1 | 	sub	fp, #16
0583c     18 16 06 F6 | 	mov	arg03, #24
05840     48 89 B1 FD | 	call	#_psram_spin2_read1
05844     10 4E 05 F1 | 	add	fp, #16
05848     A7 1E 02 FB | 	rdlong	local01, fp
0584c     08 4E 85 F1 | 	sub	fp, #8
05850     A7 1E 62 FC | 	wrlong	local01, fp
05854     20 4E 05 F1 | 	add	fp, #32
05858     A7 1E 02 FB | 	rdlong	local01, fp
0585c     18 4E 85 F1 | 	sub	fp, #24
05860     A7 1E 62 FC | 	wrlong	local01, fp
05864     04 4E 05 F1 | 	add	fp, #4
05868     A7 1E 02 FB | 	rdlong	local01, fp
0586c     10 4E 85 F1 | 	sub	fp, #16
05870     A7 22 02 FB | 	rdlong	local03, fp
05874     04 4E 85 F1 | 	sub	fp, #4
05878     11 1F 12 F2 | 	cmp	local01, local03 wc
0587c     28 4E 05 C1 |  if_b	add	fp, #40
05880     A7 20 02 CB |  if_b	rdlong	local02, fp
05884     28 4E 85 C1 |  if_b	sub	fp, #40
05888     FF FF 3F CF 
0588c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05890     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0465
05894     0B 00 00 FF 
05898     CC E4 85 F1 | 	sub	objptr, ##5836
0589c     00 FA 05 F6 | 	mov	result1, #0
058a0                 | LR__0466
058a0     A7 F0 03 F6 | 	mov	ptra, fp
058a4     B2 00 A0 FD | 	call	#popregs_
058a8                 | _deleteline_ret
058a8     2D 00 64 FD | 	ret
058ac                 | 
058ac                 | ' 
058ac                 | ' sub save_line
058ac                 | _save_line
058ac     03 4A 05 F6 | 	mov	COUNT_, #3
058b0     A8 00 A0 FD | 	call	#pushregs_
058b4     4A 00 00 FF 
058b8     AC E4 05 F1 | 	add	objptr, ##38060
058bc     F2 16 02 FB | 	rdlong	arg03, objptr
058c0     01 16 06 F1 | 	add	arg03, #1
058c4     05 00 00 FF 
058c8     18 E4 85 F1 | 	sub	objptr, ##2584
058cc     F2 14 02 FB | 	rdlong	arg02, objptr
058d0     0B 15 02 FD | 	qmul	arg02, arg03
058d4     0E 00 00 FF 
058d8     44 E4 85 F1 | 	sub	objptr, ##7236
058dc     F2 12 02 FB | 	rdlong	arg01, objptr
058e0     37 00 00 FF 
058e4     50 E4 85 F1 | 	sub	objptr, ##28240
058e8     09 1F 02 F6 | 	mov	local01, arg01
058ec     18 20 62 FD | 	getqx	local02
058f0     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
058f4                 | LR__0470
058f4     0F FB C9 FA | 	rdbyte	result1, local01 wz
058f8     01 1E 06 51 |  if_ne	add	local01, #1
058fc     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
05900                 | LR__0471
05900     09 1F 82 F1 | 	sub	local01, arg01
05904     03 1E CE F7 | 	test	local01, #3 wz
05908     02 1E 46 50 |  if_ne	shr	local01, #2
0590c     01 1E 06 51 |  if_ne	add	local01, #1
05910     02 1E 66 50 |  if_ne	shl	local01, #2
05914     10 23 02 F6 | 	mov	local03, local02
05918     0F 23 02 F1 | 	add	local03, local01
0591c     43 00 00 FF 
05920     8C E4 05 F1 | 	add	objptr, ##34444
05924     F2 16 02 FB | 	rdlong	arg03, objptr
05928     10 17 02 F1 | 	add	arg03, local02
0592c     04 00 00 FF 
05930     28 E4 05 F1 | 	add	objptr, ##2088
05934     F2 16 62 FC | 	wrlong	arg03, objptr
05938     04 E4 05 F1 | 	add	objptr, #4
0593c     F2 1E 62 FC | 	wrlong	local01, objptr
05940     0C E4 85 F1 | 	sub	objptr, #12
05944     F2 12 02 F6 | 	mov	arg01, objptr
05948     04 00 00 FF 
0594c     20 E4 85 F1 | 	sub	objptr, ##2080
05950     F2 14 02 FB | 	rdlong	arg02, objptr
05954     10 17 02 F6 | 	mov	arg03, local02
05958     37 00 00 FF 
0595c     C0 E5 85 F1 | 	sub	objptr, ##28608
05960     C4 88 B1 FD | 	call	#_psram_spin2_write
05964     2B 00 00 FF 
05968     84 E5 05 F1 | 	add	objptr, ##22404
0596c     F2 12 02 FB | 	rdlong	arg01, objptr
05970     0C 00 00 FF 
05974     3C E4 05 F1 | 	add	objptr, ##6204
05978     F2 14 02 FB | 	rdlong	arg02, objptr
0597c     10 15 02 F1 | 	add	arg02, local02
05980     0F 17 02 F6 | 	mov	arg03, local01
05984     37 00 00 FF 
05988     C0 E5 85 F1 | 	sub	objptr, ##28608
0598c     98 88 B1 FD | 	call	#_psram_spin2_write
05990     37 00 00 FF 
05994     C0 E5 05 F1 | 	add	objptr, ##28608
05998     F2 1E 02 FB | 	rdlong	local01, objptr
0599c     11 1F 02 F1 | 	add	local01, local03
059a0     F2 1E 62 FC | 	wrlong	local01, objptr
059a4     43 00 00 FF 
059a8     8C E4 85 F1 | 	sub	objptr, ##34444
059ac     A7 F0 03 F6 | 	mov	ptra, fp
059b0     B2 00 A0 FD | 	call	#popregs_
059b4                 | _save_line_ret
059b4     2D 00 64 FD | 	ret
059b8                 | 
059b8                 | ' 
059b8                 | ' 
059b8                 | ' function insertline(aline as ulong) as integer
059b8                 | _insertline
059b8     02 4A 05 F6 | 	mov	COUNT_, #2
059bc     A8 00 A0 FD | 	call	#pushregs_
059c0     28 F0 07 F1 | 	add	ptra, #40
059c4     04 4E 05 F1 | 	add	fp, #4
059c8     A7 12 62 FC | 	wrlong	arg01, fp
059cc     4A 00 00 FF 
059d0     B4 E4 05 F1 | 	add	objptr, ##38068
059d4     F2 1E 02 FB | 	rdlong	local01, objptr
059d8     04 4E 05 F1 | 	add	fp, #4
059dc     A7 1E 62 FC | 	wrlong	local01, fp
059e0     08 4E 85 F1 | 	sub	fp, #8
059e4                 | ' 
059e4                 | ' do
059e4     3E 00 00 FF 
059e8     E8 E5 85 F1 | 	sub	objptr, ##32232
059ec                 | LR__0480
059ec     10 4E 05 F1 | 	add	fp, #16
059f0     A7 12 02 F6 | 	mov	arg01, fp
059f4     08 4E 85 F1 | 	sub	fp, #8
059f8     A7 14 02 FB | 	rdlong	arg02, fp
059fc     08 4E 85 F1 | 	sub	fp, #8
05a00     18 16 06 F6 | 	mov	arg03, #24
05a04     84 87 B1 FD | 	call	#_psram_spin2_read1
05a08     08 4E 05 F1 | 	add	fp, #8
05a0c     A7 1E 02 FB | 	rdlong	local01, fp
05a10     04 4E 05 F1 | 	add	fp, #4
05a14     A7 1E 62 FC | 	wrlong	local01, fp
05a18     18 4E 05 F1 | 	add	fp, #24
05a1c     A7 1E 02 FB | 	rdlong	local01, fp
05a20     1C 4E 85 F1 | 	sub	fp, #28
05a24     A7 1E 62 FC | 	wrlong	local01, fp
05a28     08 4E 05 F1 | 	add	fp, #8
05a2c     A7 1E 02 FB | 	rdlong	local01, fp
05a30     0C 4E 85 F1 | 	sub	fp, #12
05a34     A7 16 02 FB | 	rdlong	arg03, fp
05a38     04 4E 85 F1 | 	sub	fp, #4
05a3c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a40     24 4E 05 C1 |  if_b	add	fp, #36
05a44     A7 20 02 CB |  if_b	rdlong	local02, fp
05a48     24 4E 85 C1 |  if_b	sub	fp, #36
05a4c     FF FF 3F CF 
05a50     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05a54     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0480
05a58     0B 00 00 FF 
05a5c     CC E4 85 F1 | 	sub	objptr, ##5836
05a60                 | ' 
05a60                 | ' if header(0)=aline then return -1 ' delete it first
05a60     10 4E 05 F1 | 	add	fp, #16
05a64     A7 1E 02 FB | 	rdlong	local01, fp
05a68     0C 4E 85 F1 | 	sub	fp, #12
05a6c     A7 20 02 FB | 	rdlong	local02, fp
05a70     04 4E 85 F1 | 	sub	fp, #4
05a74     10 1F 0A F2 | 	cmp	local01, local02 wz
05a78     01 FA 65 A6 |  if_e	neg	result1, #1
05a7c     48 01 90 AD |  if_e	jmp	#LR__0483
05a80                 | ' if header(0)<aline then return -2 ' end of program reached
05a80     10 4E 05 F1 | 	add	fp, #16
05a84     A7 1E 02 FB | 	rdlong	local01, fp
05a88     0C 4E 85 F1 | 	sub	fp, #12
05a8c     A7 16 02 FB | 	rdlong	arg03, fp
05a90     04 4E 85 F1 | 	sub	fp, #4
05a94     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a98     02 FA 65 C6 |  if_b	neg	result1, #2
05a9c     28 01 90 CD |  if_b	jmp	#LR__0483
05aa0                 | ' 
05aa0                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05aa0     20 4E 05 F1 | 	add	fp, #32
05aa4     A7 1E 02 FB | 	rdlong	local01, fp
05aa8     20 4E 85 F1 | 	sub	fp, #32
05aac     FF FF 7F FF 
05ab0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05ab4     78 00 90 5D |  if_ne	jmp	#LR__0481
05ab8     43 00 00 FF 
05abc     8C E4 05 F1 | 	add	objptr, ##34444
05ac0     F2 1E 02 FB | 	rdlong	local01, objptr
05ac4     07 00 00 FF 
05ac8     28 E4 05 F1 | 	add	objptr, ##3624
05acc     F2 1E 62 FC | 	wrlong	local01, objptr
05ad0     0C 4E 05 F1 | 	add	fp, #12
05ad4     A7 12 02 FB | 	rdlong	arg01, fp
05ad8     0C 4E 85 F1 | 	sub	fp, #12
05adc     10 12 06 F1 | 	add	arg01, #16
05ae0     07 00 00 FF 
05ae4     28 E4 85 F1 | 	sub	objptr, ##3624
05ae8     F2 14 02 FB | 	rdlong	arg02, objptr
05aec     43 00 00 FF 
05af0     8C E4 85 F1 | 	sub	objptr, ##34444
05af4     90 4F B1 FD | 	call	#_pslpoke
05af8     47 00 00 FF 
05afc     BC E4 05 F1 | 	add	objptr, ##36540
05b00     FF FF FF FF 
05b04     F2 FE 6B FC | 	wrlong	##-1, objptr
05b08     0C 4E 05 F1 | 	add	fp, #12
05b0c     A7 1E 02 FB | 	rdlong	local01, fp
05b10     0C 4E 85 F1 | 	sub	fp, #12
05b14     04 E4 05 F1 | 	add	objptr, #4
05b18     F2 1E 62 FC | 	wrlong	local01, objptr
05b1c     47 00 00 FF 
05b20     C0 E4 85 F1 | 	sub	objptr, ##36544
05b24     84 FD BF FD | 	call	#_save_line
05b28                 | '   programstart=programptr
05b28                 | '   pslpoke(lineptr2+16,programptr)
05b28                 | '   ucompiledline(4)=$FFFF_FFFF
05b28                 | '   ucompiledline(5)=lineptr2
05b28                 | '   save_line
05b28                 | '   return 0
05b28     00 FA 05 F6 | 	mov	result1, #0
05b2c     98 00 90 FD | 	jmp	#LR__0483
05b30                 | LR__0481
05b30                 | ' 
05b30                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05b30     20 4E 05 F1 | 	add	fp, #32
05b34     A7 1E 02 FB | 	rdlong	local01, fp
05b38     20 4E 85 F1 | 	sub	fp, #32
05b3c     FF FF 7F FF 
05b40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05b44     7C 00 90 AD |  if_e	jmp	#LR__0482
05b48     20 4E 05 F1 | 	add	fp, #32
05b4c     A7 1E 02 FB | 	rdlong	local01, fp
05b50     47 00 00 FF 
05b54     BC E4 05 F1 | 	add	objptr, ##36540
05b58     F2 1E 62 FC | 	wrlong	local01, objptr
05b5c     14 4E 85 F1 | 	sub	fp, #20
05b60     A7 1E 02 FB | 	rdlong	local01, fp
05b64     04 E4 05 F1 | 	add	objptr, #4
05b68     F2 1E 62 FC | 	wrlong	local01, objptr
05b6c     A7 12 02 FB | 	rdlong	arg01, fp
05b70     0C 4E 85 F1 | 	sub	fp, #12
05b74     10 12 06 F1 | 	add	arg01, #16
05b78     04 00 00 FF 
05b7c     34 E4 85 F1 | 	sub	objptr, ##2100
05b80     F2 14 02 FB | 	rdlong	arg02, objptr
05b84     43 00 00 FF 
05b88     8C E4 85 F1 | 	sub	objptr, ##34444
05b8c     F8 4E B1 FD | 	call	#_pslpoke
05b90     20 4E 05 F1 | 	add	fp, #32
05b94     A7 12 02 FB | 	rdlong	arg01, fp
05b98     20 4E 85 F1 | 	sub	fp, #32
05b9c     14 12 06 F1 | 	add	arg01, #20
05ba0     43 00 00 FF 
05ba4     8C E4 05 F1 | 	add	objptr, ##34444
05ba8     F2 14 02 FB | 	rdlong	arg02, objptr
05bac     43 00 00 FF 
05bb0     8C E4 85 F1 | 	sub	objptr, ##34444
05bb4     D0 4E B1 FD | 	call	#_pslpoke
05bb8     F0 FC BF FD | 	call	#_save_line
05bbc                 | '   ucompiledline(4)=header(4)
05bbc                 | '   ucompiledline(5)=lineptr2
05bbc                 | '   pslpoke(lineptr2+16,programptr)
05bbc                 | '   pslpoke(header(4)+20,programptr)
05bbc                 | '   save_line
05bbc                 | '   return 0
05bbc     00 FA 05 F6 | 	mov	result1, #0
05bc0     04 00 90 FD | 	jmp	#LR__0483
05bc4                 | LR__0482
05bc4     00 FA 05 F6 | 	mov	result1, #0
05bc8                 | LR__0483
05bc8     A7 F0 03 F6 | 	mov	ptra, fp
05bcc     B2 00 A0 FD | 	call	#popregs_
05bd0                 | _insertline_ret
05bd0     2D 00 64 FD | 	ret
05bd4                 | 
05bd4                 | ' 
05bd4                 | ' sub add_line_at_end(aline) 
05bd4                 | _add_line_at_end
05bd4     4A 00 00 FF 
05bd8     B8 E4 05 F1 | 	add	objptr, ##38072
05bdc     F2 12 62 FC | 	wrlong	arg01, objptr
05be0     04 E4 05 F1 | 	add	objptr, #4
05be4     F2 14 02 FB | 	rdlong	arg02, objptr
05be8     03 00 00 FF 
05bec     00 E4 85 F1 | 	sub	objptr, ##1536
05bf0     F2 14 62 FC | 	wrlong	arg02, objptr
05bf4     03 00 00 FF 
05bf8     00 E4 05 F1 | 	add	objptr, ##1536
05bfc     F2 12 02 FB | 	rdlong	arg01, objptr
05c00     14 12 06 F1 | 	add	arg01, #20
05c04     07 00 00 FF 
05c08     30 E4 85 F1 | 	sub	objptr, ##3632
05c0c     F2 14 02 FB | 	rdlong	arg02, objptr
05c10     43 00 00 FF 
05c14     8C E4 85 F1 | 	sub	objptr, ##34444
05c18     6C 4E B1 FD | 	call	#_pslpoke
05c1c     43 00 00 FF 
05c20     8C E4 05 F1 | 	add	objptr, ##34444
05c24     F2 14 02 FB | 	rdlong	arg02, objptr
05c28     07 00 00 FF 
05c2c     30 E4 05 F1 | 	add	objptr, ##3632
05c30     F2 14 62 FC | 	wrlong	arg02, objptr
05c34     02 00 00 FF 
05c38     FC E5 85 F1 | 	sub	objptr, ##1532
05c3c     FF FF BF FF 
05c40     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05c44                 | ' 
05c44                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05c44                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
05c44     04 00 00 FF 
05c48     34 E4 85 F1 | 	sub	objptr, ##2100
05c4c     F2 14 02 FB | 	rdlong	arg02, objptr
05c50     43 00 00 FF 
05c54     8C E4 85 F1 | 	sub	objptr, ##34444
05c58     00 04 00 FF 
05c5c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
05c60     47 00 00 AF 
05c64     BC E4 05 A1 |  if_e	add	objptr, ##36540
05c68     FF FF FF AF 
05c6c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05c70     47 00 00 AF 
05c74     BC E4 85 A1 |  if_e	sub	objptr, ##36540
05c78     30 FC BF FD | 	call	#_save_line
05c7c     43 00 00 FF 
05c80     8C E4 05 F1 | 	add	objptr, ##34444
05c84     F2 12 02 FB | 	rdlong	arg01, objptr
05c88     43 00 00 FF 
05c8c     8C E4 85 F1 | 	sub	objptr, ##34444
05c90     01 14 66 F6 | 	neg	arg02, #1
05c94     F0 4D B1 FD | 	call	#_pslpoke
05c98                 | _add_line_at_end_ret
05c98     2D 00 64 FD | 	ret
05c9c                 | 
05c9c                 | ' 
05c9c                 | ' function compile_immediate(linetype as ulong) as integer
05c9c                 | _compile_immediate
05c9c     09 4A 05 F6 | 	mov	COUNT_, #9
05ca0     A8 00 A0 FD | 	call	#pushregs_
05ca4                 | _compile_immediate_enter
05ca4     09 25 0A F6 | 	mov	local04, arg01 wz
05ca8     00 26 06 F6 | 	mov	local05, #0
05cac     00 28 06 F6 | 	mov	local06, #0
05cb0                 | ' 
05cb0                 | ' ' linetype=cont+1, linetype=0 immediate
05cb0                 | ' '  : 1: this is the first part of the line that will continue
05cb0                 | ' ' 2 - this is the continuation of the line
05cb0                 | ' ' 3 - this is the last continued line
05cb0                 | ' ' 4 - this is the one and only part
05cb0                 | ' 
05cb0                 | ' err=0
05cb0                 | ' cmd=0
05cb0                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05cb0     30 00 90 5D |  if_ne	jmp	#LR__0490
05cb4     35 00 00 FF 
05cb8     40 E4 05 F1 | 	add	objptr, ##27200
05cbc     F2 28 02 FB | 	rdlong	local06, objptr
05cc0     02 00 00 FF 
05cc4     34 E4 05 F1 | 	add	objptr, ##1076
05cc8     F2 02 68 FC | 	wrlong	#1, objptr
05ccc     00 2A 06 F6 | 	mov	local07, #0
05cd0     13 00 00 FF 
05cd4     38 E4 05 F1 | 	add	objptr, ##9784
05cd8     F2 00 68 FC | 	wrlong	#0, objptr
05cdc     4A 00 00 FF 
05ce0     AC E4 85 F1 | 	sub	objptr, ##38060
05ce4                 | LR__0490
05ce4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05ce4     02 24 0E F2 | 	cmp	local04, #2 wz
05ce8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05cec     24 00 90 5D |  if_ne	jmp	#LR__0491
05cf0     35 00 00 FF 
05cf4     40 E4 05 F1 | 	add	objptr, ##27200
05cf8     F2 28 02 FB | 	rdlong	local06, objptr
05cfc     01 2A 06 F6 | 	mov	local07, #1
05d00     02 00 00 FF 
05d04     34 E4 05 F1 | 	add	objptr, ##1076
05d08     F2 02 68 FC | 	wrlong	#1, objptr
05d0c     37 00 00 FF 
05d10     74 E4 85 F1 | 	sub	objptr, ##28276
05d14                 | LR__0491
05d14                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05d14     04 24 0E F2 | 	cmp	local04, #4 wz
05d18     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05d1c     30 00 90 5D |  if_ne	jmp	#LR__0492
05d20     35 00 00 FF 
05d24     48 E4 05 F1 | 	add	objptr, ##27208
05d28     F2 28 02 FB | 	rdlong	local06, objptr
05d2c     02 2A 06 F6 | 	mov	local07, #2
05d30     02 00 00 FF 
05d34     2C E4 05 F1 | 	add	objptr, ##1068
05d38     F2 04 68 FC | 	wrlong	#2, objptr
05d3c     13 00 00 FF 
05d40     38 E4 05 F1 | 	add	objptr, ##9784
05d44     F2 04 68 FC | 	wrlong	#2, objptr
05d48     4A 00 00 FF 
05d4c     AC E4 85 F1 | 	sub	objptr, ##38060
05d50                 | LR__0492
05d50                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05d50     05 24 0E F2 | 	cmp	local04, #5 wz
05d54     44 00 90 5D |  if_ne	jmp	#LR__0493
05d58     37 00 00 FF 
05d5c     74 E4 05 F1 | 	add	objptr, ##28276
05d60     F2 FA 01 FB | 	rdlong	result1, objptr
05d64     FD 2A 02 F6 | 	mov	local07, result1
05d68     03 2A 66 F0 | 	shl	local07, #3
05d6c     02 00 00 FF 
05d70     38 E4 85 F1 | 	sub	objptr, ##1080
05d74     F2 2A 02 F1 | 	add	local07, objptr
05d78     04 2A 06 F1 | 	add	local07, #4
05d7c     15 29 02 FB | 	rdlong	local06, local07
05d80     FD 2A 02 F6 | 	mov	local07, result1
05d84     01 2A 06 F1 | 	add	local07, #1
05d88     02 00 00 FF 
05d8c     38 E4 05 F1 | 	add	objptr, ##1080
05d90     F2 2A 62 FC | 	wrlong	local07, objptr
05d94     37 00 00 FF 
05d98     74 E4 85 F1 | 	sub	objptr, ##28276
05d9c                 | LR__0493
05d9c     00 2C 06 F6 | 	mov	local08, #0
05da0                 | ' vars=0
05da0                 | ' 'print  "In compile_immediate cmd=:", cmd
05da0                 | ' 451 select case cmd
05da0     5C 28 0E F2 | 	cmp	local06, #92 wz
05da4     28 02 90 AD |  if_e	jmp	#LR__0494
05da8     47 28 0E F2 | 	cmp	local06, #71 wz
05dac     2C 02 90 AD |  if_e	jmp	#LR__0495
05db0     59 28 0E F2 | 	cmp	local06, #89 wz
05db4     30 02 90 AD |  if_e	jmp	#LR__0496
05db8     45 28 0E F2 | 	cmp	local06, #69 wz
05dbc     34 02 90 AD |  if_e	jmp	#LR__0497
05dc0     69 28 0E F2 | 	cmp	local06, #105 wz
05dc4     38 02 90 AD |  if_e	jmp	#LR__0498
05dc8     40 28 0E F2 | 	cmp	local06, #64 wz
05dcc     B8 04 90 AD |  if_e	jmp	#LR__0555
05dd0     49 28 0E F2 | 	cmp	local06, #73 wz
05dd4     34 02 90 AD |  if_e	jmp	#LR__0499
05dd8     50 28 0E F2 | 	cmp	local06, #80 wz
05ddc     38 02 90 AD |  if_e	jmp	#LR__0500
05de0     68 28 0E F2 | 	cmp	local06, #104 wz
05de4     3C 02 90 AD |  if_e	jmp	#LR__0501
05de8     74 28 0E F2 | 	cmp	local06, #116 wz
05dec     40 02 90 AD |  if_e	jmp	#LR__0502
05df0     73 28 0E F2 | 	cmp	local06, #115 wz
05df4     44 02 90 AD |  if_e	jmp	#LR__0503
05df8     6C 28 0E F2 | 	cmp	local06, #108 wz
05dfc     48 02 90 AD |  if_e	jmp	#LR__0504
05e00     89 28 0E F2 | 	cmp	local06, #137 wz
05e04     80 04 90 AD |  if_e	jmp	#LR__0555
05e08     72 28 0E F2 | 	cmp	local06, #114 wz
05e0c     44 02 90 AD |  if_e	jmp	#LR__0505
05e10     5D 28 0E F2 | 	cmp	local06, #93 wz
05e14     70 04 90 AD |  if_e	jmp	#LR__0555
05e18     96 28 0E F2 | 	cmp	local06, #150 wz
05e1c     3C 02 90 AD |  if_e	jmp	#LR__0506
05e20     43 28 0E F2 | 	cmp	local06, #67 wz
05e24     3C 02 90 AD |  if_e	jmp	#LR__0507
05e28     5A 28 0E F2 | 	cmp	local06, #90 wz
05e2c     40 02 90 AD |  if_e	jmp	#LR__0508
05e30     AB 28 0E F2 | 	cmp	local06, #171 wz
05e34     50 04 90 AD |  if_e	jmp	#LR__0555
05e38     4E 28 0E F2 | 	cmp	local06, #78 wz
05e3c     38 02 90 AD |  if_e	jmp	#LR__0509
05e40     A9 28 0E F2 | 	cmp	local06, #169 wz
05e44     4C 02 90 AD |  if_e	jmp	#LR__0511
05e48     46 28 0E F2 | 	cmp	local06, #70 wz
05e4c     4C 02 90 AD |  if_e	jmp	#LR__0512
05e50     71 28 0E F2 | 	cmp	local06, #113 wz
05e54     50 02 90 AD |  if_e	jmp	#LR__0513
05e58     60 28 0E F2 | 	cmp	local06, #96 wz
05e5c     54 02 90 AD |  if_e	jmp	#LR__0514
05e60     4A 28 0E F2 | 	cmp	local06, #74 wz
05e64     58 02 90 AD |  if_e	jmp	#LR__0515
05e68     48 28 0E F2 | 	cmp	local06, #72 wz
05e6c     58 02 90 AD |  if_e	jmp	#LR__0516
05e70     58 28 0E F2 | 	cmp	local06, #88 wz
05e74     5C 02 90 AD |  if_e	jmp	#LR__0517
05e78     5F 28 0E F2 | 	cmp	local06, #95 wz
05e7c     5C 02 90 AD |  if_e	jmp	#LR__0518
05e80     8A 28 0E F2 | 	cmp	local06, #138 wz
05e84     60 02 90 AD |  if_e	jmp	#LR__0519
05e88     4C 28 0E F2 | 	cmp	local06, #76 wz
05e8c     64 02 90 AD |  if_e	jmp	#LR__0520
05e90     52 28 0E F2 | 	cmp	local06, #82 wz
05e94     68 02 90 AD |  if_e	jmp	#LR__0521
05e98     97 28 0E F2 | 	cmp	local06, #151 wz
05e9c     6C 02 90 AD |  if_e	jmp	#LR__0522
05ea0     61 28 0E F2 | 	cmp	local06, #97 wz
05ea4     70 02 90 AD |  if_e	jmp	#LR__0523
05ea8     63 28 0E F2 | 	cmp	local06, #99 wz
05eac     74 02 90 AD |  if_e	jmp	#LR__0524
05eb0     41 28 0E F2 | 	cmp	local06, #65 wz
05eb4     D0 03 90 AD |  if_e	jmp	#LR__0555
05eb8     4B 28 0E F2 | 	cmp	local06, #75 wz
05ebc     70 02 90 AD |  if_e	jmp	#LR__0525
05ec0     5E 28 0E F2 | 	cmp	local06, #94 wz
05ec4     70 02 90 AD |  if_e	jmp	#LR__0526
05ec8     7C 28 0E F2 | 	cmp	local06, #124 wz
05ecc     74 02 90 AD |  if_e	jmp	#LR__0527
05ed0     7D 28 0E F2 | 	cmp	local06, #125 wz
05ed4     78 02 90 AD |  if_e	jmp	#LR__0528
05ed8     7E 28 0E F2 | 	cmp	local06, #126 wz
05edc     7C 02 90 AD |  if_e	jmp	#LR__0529
05ee0     7F 28 0E F2 | 	cmp	local06, #127 wz
05ee4     80 02 90 AD |  if_e	jmp	#LR__0530
05ee8     80 28 0E F2 | 	cmp	local06, #128 wz
05eec     84 02 90 AD |  if_e	jmp	#LR__0531
05ef0     55 28 0E F2 | 	cmp	local06, #85 wz
05ef4     88 02 90 AD |  if_e	jmp	#LR__0532
05ef8     75 28 0E F2 | 	cmp	local06, #117 wz
05efc     8C 02 90 AD |  if_e	jmp	#LR__0533
05f00     42 28 0E F2 | 	cmp	local06, #66 wz
05f04     90 02 90 AD |  if_e	jmp	#LR__0534
05f08     95 28 0E F2 | 	cmp	local06, #149 wz
05f0c     94 02 90 AD |  if_e	jmp	#LR__0535
05f10     AC 28 0E F2 | 	cmp	local06, #172 wz
05f14     70 03 90 AD |  if_e	jmp	#LR__0555
05f18     81 28 0E F2 | 	cmp	local06, #129 wz
05f1c     90 02 90 AD |  if_e	jmp	#LR__0536
05f20     44 28 0E F2 | 	cmp	local06, #68 wz
05f24     94 02 90 AD |  if_e	jmp	#LR__0537
05f28     88 28 0E F2 | 	cmp	local06, #136 wz
05f2c     58 03 90 AD |  if_e	jmp	#LR__0555
05f30     92 28 0E F2 | 	cmp	local06, #146 wz
05f34     90 02 90 AD |  if_e	jmp	#LR__0538
05f38     AA 28 0E F2 | 	cmp	local06, #170 wz
05f3c     48 03 90 AD |  if_e	jmp	#LR__0555
05f40     4D 28 0E F2 | 	cmp	local06, #77 wz
05f44     88 02 90 AD |  if_e	jmp	#LR__0539
05f48     51 28 0E F2 | 	cmp	local06, #81 wz
05f4c     8C 02 90 AD |  if_e	jmp	#LR__0540
05f50     8E 28 0E F2 | 	cmp	local06, #142 wz
05f54     90 02 90 AD |  if_e	jmp	#LR__0541
05f58     90 28 0E F2 | 	cmp	local06, #144 wz
05f5c     94 02 90 AD |  if_e	jmp	#LR__0542
05f60     8D 28 0E F2 | 	cmp	local06, #141 wz
05f64     98 02 90 AD |  if_e	jmp	#LR__0543
05f68     8C 28 0E F2 | 	cmp	local06, #140 wz
05f6c     9C 02 90 AD |  if_e	jmp	#LR__0544
05f70     91 28 0E F2 | 	cmp	local06, #145 wz
05f74     A0 02 90 AD |  if_e	jmp	#LR__0545
05f78     8B 28 0E F2 | 	cmp	local06, #139 wz
05f7c     A4 02 90 AD |  if_e	jmp	#LR__0546
05f80     8F 28 0E F2 | 	cmp	local06, #143 wz
05f84     A8 02 90 AD |  if_e	jmp	#LR__0547
05f88     6D 28 0E F2 | 	cmp	local06, #109 wz
05f8c     AC 02 90 AD |  if_e	jmp	#LR__0548
05f90     70 28 0E F2 | 	cmp	local06, #112 wz
05f94     F0 02 90 AD |  if_e	jmp	#LR__0555
05f98     56 28 0E F2 | 	cmp	local06, #86 wz
05f9c     A8 02 90 AD |  if_e	jmp	#LR__0549
05fa0     57 28 0E F2 | 	cmp	local06, #87 wz
05fa4     E0 02 90 AD |  if_e	jmp	#LR__0555
05fa8     79 28 0E F2 | 	cmp	local06, #121 wz
05fac     A4 02 90 AD |  if_e	jmp	#LR__0550
05fb0     77 28 0E F2 | 	cmp	local06, #119 wz
05fb4     A8 02 90 AD |  if_e	jmp	#LR__0551
05fb8     78 28 0E F2 | 	cmp	local06, #120 wz
05fbc     AC 02 90 AD |  if_e	jmp	#LR__0552
05fc0     01 00 00 FF 
05fc4     04 28 0E F2 | 	cmp	local06, ##516 wz
05fc8     AC 02 90 AD |  if_e	jmp	#LR__0553
05fcc     B0 02 90 FD | 	jmp	#LR__0554
05fd0                 | LR__0494
05fd0     B4 0C B0 FD | 	call	#_compile_fun_2p
05fd4     FD 26 02 F6 | 	mov	local05, result1
05fd8     AC 02 90 FD | 	jmp	#LR__0555
05fdc                 | LR__0495
05fdc     E8 0D B0 FD | 	call	#_compile_fun_4p
05fe0     FD 26 02 F6 | 	mov	local05, result1
05fe4     A0 02 90 FD | 	jmp	#LR__0555
05fe8                 | LR__0496
05fe8     6C 32 B0 FD | 	call	#_expr
05fec                 | ' expr()
05fec                 | ' return 0
05fec     00 26 06 F6 | 	mov	local05, #0
05ff0     94 02 90 FD | 	jmp	#LR__0555
05ff4                 | LR__0497
05ff4     04 0D B0 FD | 	call	#_compile_fun_3p
05ff8     FD 26 02 F6 | 	mov	local05, result1
05ffc     88 02 90 FD | 	jmp	#LR__0555
06000                 | LR__0498
06000     54 32 B0 FD | 	call	#_expr
06004                 | ' expr()
06004                 | ' return 0
06004     00 26 06 F6 | 	mov	local05, #0
06008     7C 02 90 FD | 	jmp	#LR__0555
0600c                 | LR__0499
0600c     48 32 B0 FD | 	call	#_expr
06010                 | ' expr()
06010                 | ' return 0
06010     00 26 06 F6 | 	mov	local05, #0
06014     70 02 90 FD | 	jmp	#LR__0555
06018                 | LR__0500
06018     4C 10 B0 FD | 	call	#_compile_fun_varp
0601c     FD 2C 02 F6 | 	mov	local08, result1
06020     64 02 90 FD | 	jmp	#LR__0555
06024                 | LR__0501
06024     30 32 B0 FD | 	call	#_expr
06028                 | ' expr()
06028                 | ' return 0
06028     00 26 06 F6 | 	mov	local05, #0
0602c     58 02 90 FD | 	jmp	#LR__0555
06030                 | LR__0502
06030     34 10 B0 FD | 	call	#_compile_fun_varp
06034     FD 2C 02 F6 | 	mov	local08, result1
06038     4C 02 90 FD | 	jmp	#LR__0555
0603c                 | LR__0503
0603c     28 10 B0 FD | 	call	#_compile_fun_varp
06040     FD 2C 02 F6 | 	mov	local08, result1
06044     40 02 90 FD | 	jmp	#LR__0555
06048                 | LR__0504
06048     A0 0E B0 FD | 	call	#_compile_fun_5p
0604c     FD 26 02 F6 | 	mov	local05, result1
06050     34 02 90 FD | 	jmp	#LR__0555
06054                 | LR__0505
06054     FC 19 B0 FD | 	call	#_compile_dim
06058     E8 02 90 FD | 	jmp	#LR__0556
0605c                 | LR__0506
0605c     28 0C B0 FD | 	call	#_compile_fun_2p
06060     24 02 90 FD | 	jmp	#LR__0555
06064                 | LR__0507
06064     20 0C B0 FD | 	call	#_compile_fun_2p
06068     FD 26 02 F6 | 	mov	local05, result1
0606c     18 02 90 FD | 	jmp	#LR__0555
06070                 | LR__0508
06070     B8 18 B0 FD | 	call	#_compile_else
06074     CC 02 90 FD | 	jmp	#LR__0556
06078                 | LR__0509
06078     01 24 16 F2 | 	cmp	local04, #1 wc
0607c     08 00 90 CD |  if_b	jmp	#LR__0510
06080     E4 2D B0 FD | 	call	#_compile_goto
06084     BC 02 90 FD | 	jmp	#LR__0556
06088                 | LR__0510
06088     19 12 06 F6 | 	mov	arg01, #25
0608c     94 48 B1 FD | 	call	#_printerror
06090     B0 02 90 FD | 	jmp	#LR__0556
06094                 | LR__0511
06094     68 2D B0 FD | 	call	#_compile_gosub
06098     A8 02 90 FD | 	jmp	#LR__0556
0609c                 | LR__0512
0609c     5C 0C B0 FD | 	call	#_compile_fun_3p
060a0     FD 26 02 F6 | 	mov	local05, result1
060a4     E0 01 90 FD | 	jmp	#LR__0555
060a8                 | LR__0513
060a8     1C 0D B0 FD | 	call	#_compile_fun_4p
060ac     FD 26 02 F6 | 	mov	local05, result1
060b0     D4 01 90 FD | 	jmp	#LR__0555
060b4                 | LR__0514
060b4     A0 31 B0 FD | 	call	#_expr
060b8                 | ' expr()
060b8                 | ' return 0
060b8     00 26 06 F6 | 	mov	local05, #0
060bc     C8 01 90 FD | 	jmp	#LR__0555
060c0                 | LR__0515
060c0     A0 20 B0 FD | 	call	#_compile_for
060c4     7C 02 90 FD | 	jmp	#LR__0556
060c8                 | LR__0516
060c8     FC 0C B0 FD | 	call	#_compile_fun_4p
060cc     FD 26 02 F6 | 	mov	local05, result1
060d0     B4 01 90 FD | 	jmp	#LR__0555
060d4                 | LR__0517
060d4     14 17 B0 FD | 	call	#_compile_if
060d8     68 02 90 FD | 	jmp	#LR__0556
060dc                 | LR__0518
060dc     78 31 B0 FD | 	call	#_expr
060e0                 | ' expr()
060e0                 | ' return 0
060e0     00 26 06 F6 | 	mov	local05, #0
060e4     A0 01 90 FD | 	jmp	#LR__0555
060e8                 | LR__0519
060e8     6C 31 B0 FD | 	call	#_expr
060ec                 | ' expr()
060ec                 | ' return 0
060ec     00 26 06 F6 | 	mov	local05, #0
060f0     94 01 90 FD | 	jmp	#LR__0555
060f4                 | LR__0520
060f4     70 0F B0 FD | 	call	#_compile_fun_varp
060f8     FD 2C 02 F6 | 	mov	local08, result1
060fc     88 01 90 FD | 	jmp	#LR__0555
06100                 | LR__0521
06100     64 0F B0 FD | 	call	#_compile_fun_varp
06104     FD 2C 02 F6 | 	mov	local08, result1
06108     7C 01 90 FD | 	jmp	#LR__0555
0610c                 | LR__0522
0610c     78 0B B0 FD | 	call	#_compile_fun_2p
06110     FD 26 02 F6 | 	mov	local05, result1
06114     70 01 90 FD | 	jmp	#LR__0555
06118                 | LR__0523
06118     3C 31 B0 FD | 	call	#_expr
0611c                 | ' expr()
0611c                 | ' return 0
0611c     00 26 06 F6 | 	mov	local05, #0
06120     64 01 90 FD | 	jmp	#LR__0555
06124                 | LR__0524
06124     30 31 B0 FD | 	call	#_expr
06128                 | ' expr()
06128                 | ' return 0
06128     00 26 06 F6 | 	mov	local05, #0
0612c     58 01 90 FD | 	jmp	#LR__0555
06130                 | LR__0525
06130     1C 2B B0 FD | 	call	#_compile_next
06134     0C 02 90 FD | 	jmp	#LR__0556
06138                 | LR__0526
06138     1C 31 B0 FD | 	call	#_expr
0613c                 | ' expr()
0613c                 | ' return 0
0613c     00 26 06 F6 | 	mov	local05, #0
06140     44 01 90 FD | 	jmp	#LR__0555
06144                 | LR__0527
06144     10 31 B0 FD | 	call	#_expr
06148                 | ' expr()
06148                 | ' return 0
06148     00 26 06 F6 | 	mov	local05, #0
0614c     38 01 90 FD | 	jmp	#LR__0555
06150                 | LR__0528
06150     04 31 B0 FD | 	call	#_expr
06154                 | ' expr()
06154                 | ' return 0
06154     00 26 06 F6 | 	mov	local05, #0
06158     2C 01 90 FD | 	jmp	#LR__0555
0615c                 | LR__0529
0615c     F8 30 B0 FD | 	call	#_expr
06160                 | ' expr()
06160                 | ' return 0
06160     00 26 06 F6 | 	mov	local05, #0
06164     20 01 90 FD | 	jmp	#LR__0555
06168                 | LR__0530
06168     5C 0C B0 FD | 	call	#_compile_fun_4p
0616c     FD 26 02 F6 | 	mov	local05, result1
06170     14 01 90 FD | 	jmp	#LR__0555
06174                 | LR__0531
06174     E0 30 B0 FD | 	call	#_expr
06178                 | ' expr()
06178                 | ' return 0
06178     00 26 06 F6 | 	mov	local05, #0
0617c     08 01 90 FD | 	jmp	#LR__0555
06180                 | LR__0532
06180     04 0B B0 FD | 	call	#_compile_fun_2p
06184     FD 26 02 F6 | 	mov	local05, result1
06188     FC 00 90 FD | 	jmp	#LR__0555
0618c                 | LR__0533
0618c     D8 0E B0 FD | 	call	#_compile_fun_varp
06190     FD 2C 02 F6 | 	mov	local08, result1
06194     F0 00 90 FD | 	jmp	#LR__0555
06198                 | LR__0534
06198     EC 0A B0 FD | 	call	#_compile_fun_2p
0619c     FD 26 02 F6 | 	mov	local05, result1
061a0     E4 00 90 FD | 	jmp	#LR__0555
061a4                 | LR__0535
061a4     E0 0A B0 FD | 	call	#_compile_fun_2p
061a8     FD 26 02 F6 | 	mov	local05, result1
061ac     D8 00 90 FD | 	jmp	#LR__0555
061b0                 | LR__0536
061b0     D4 0A B0 FD | 	call	#_compile_fun_2p
061b4     FD 26 02 F6 | 	mov	local05, result1
061b8     CC 00 90 FD | 	jmp	#LR__0555
061bc                 | LR__0537
061bc     54 0F B0 FD | 	call	#_compile_print
061c0     FD 26 02 F6 | 	mov	local05, result1
061c4     7C 01 90 FD | 	jmp	#LR__0556
061c8                 | LR__0538
061c8     8C 30 B0 FD | 	call	#_expr
061cc                 | ' expr()
061cc                 | ' return 0
061cc     B8 00 90 FD | 	jmp	#LR__0555
061d0                 | LR__0539
061d0     94 0E B0 FD | 	call	#_compile_fun_varp
061d4     FD 2C 02 F6 | 	mov	local08, result1
061d8     AC 00 90 FD | 	jmp	#LR__0555
061dc                 | LR__0540
061dc     88 0E B0 FD | 	call	#_compile_fun_varp
061e0     FD 2C 02 F6 | 	mov	local08, result1
061e4     A0 00 90 FD | 	jmp	#LR__0555
061e8                 | LR__0541
061e8     9C 0A B0 FD | 	call	#_compile_fun_2p
061ec     FD 26 02 F6 | 	mov	local05, result1
061f0     94 00 90 FD | 	jmp	#LR__0555
061f4                 | LR__0542
061f4     90 0A B0 FD | 	call	#_compile_fun_2p
061f8     FD 26 02 F6 | 	mov	local05, result1
061fc     88 00 90 FD | 	jmp	#LR__0555
06200                 | LR__0543
06200     84 0A B0 FD | 	call	#_compile_fun_2p
06204     FD 26 02 F6 | 	mov	local05, result1
06208     7C 00 90 FD | 	jmp	#LR__0555
0620c                 | LR__0544
0620c     78 0A B0 FD | 	call	#_compile_fun_2p
06210     FD 26 02 F6 | 	mov	local05, result1
06214     70 00 90 FD | 	jmp	#LR__0555
06218                 | LR__0545
06218     6C 0A B0 FD | 	call	#_compile_fun_2p
0621c     FD 26 02 F6 | 	mov	local05, result1
06220     64 00 90 FD | 	jmp	#LR__0555
06224                 | LR__0546
06224     60 0A B0 FD | 	call	#_compile_fun_2p
06228     FD 26 02 F6 | 	mov	local05, result1
0622c     58 00 90 FD | 	jmp	#LR__0555
06230                 | LR__0547
06230     54 0A B0 FD | 	call	#_compile_fun_2p
06234     FD 26 02 F6 | 	mov	local05, result1
06238     4C 00 90 FD | 	jmp	#LR__0555
0623c                 | LR__0548
0623c     BC 0A B0 FD | 	call	#_compile_fun_3p
06240     FD 26 02 F6 | 	mov	local05, result1
06244     40 00 90 FD | 	jmp	#LR__0555
06248                 | LR__0549
06248     0C 30 B0 FD | 	call	#_expr
0624c                 | ' expr()
0624c                 | ' return 0
0624c     00 26 06 F6 | 	mov	local05, #0
06250     34 00 90 FD | 	jmp	#LR__0555
06254                 | LR__0550
06254     30 0A B0 FD | 	call	#_compile_fun_2p
06258     FD 26 02 F6 | 	mov	local05, result1
0625c     28 00 90 FD | 	jmp	#LR__0555
06260                 | LR__0551
06260     24 0A B0 FD | 	call	#_compile_fun_2p
06264     FD 26 02 F6 | 	mov	local05, result1
06268     1C 00 90 FD | 	jmp	#LR__0555
0626c                 | LR__0552
0626c     18 0A B0 FD | 	call	#_compile_fun_2p
06270     FD 26 02 F6 | 	mov	local05, result1
06274     10 00 90 FD | 	jmp	#LR__0555
06278                 | LR__0553
06278     E8 01 B0 FD | 	call	#_compile_array_assign
0627c     C4 00 90 FD | 	jmp	#LR__0556
06280                 | LR__0554
06280     48 09 B0 FD | 	call	#_compile_unknown
06284     BC 00 90 FD | 	jmp	#LR__0556
06288                 | LR__0555
06288     14 23 02 F6 | 	mov	local03, local06
0628c     16 1F 02 F6 | 	mov	local01, local08
06290     0F 2B 02 F6 | 	mov	local07, local01
06294     10 2F 02 F6 | 	mov	local09, local02
06298     11 29 02 F6 | 	mov	local06, local03
0629c     4A 00 00 FF 
062a0     AC E4 05 F1 | 	add	objptr, ##38060
062a4     F2 1E 02 FB | 	rdlong	local01, objptr
062a8     0F 2D 02 F6 | 	mov	local08, local01
062ac     01 2C 66 F0 | 	shl	local08, #1
062b0     0F 2D 02 F1 | 	add	local08, local01
062b4     02 2C 66 F0 | 	shl	local08, #2
062b8     03 00 00 FF 
062bc     00 E4 85 F1 | 	sub	objptr, ##1536
062c0     F2 2C 02 F1 | 	add	local08, objptr
062c4     16 2B 62 FC | 	wrlong	local07, local08
062c8     03 00 00 FF 
062cc     00 E4 05 F1 | 	add	objptr, ##1536
062d0     F2 1E 02 FB | 	rdlong	local01, objptr
062d4     0F 2D 02 F6 | 	mov	local08, local01
062d8     01 2C 66 F0 | 	shl	local08, #1
062dc     0F 2D 02 F1 | 	add	local08, local01
062e0     02 2C 66 F0 | 	shl	local08, #2
062e4     03 00 00 FF 
062e8     00 E4 85 F1 | 	sub	objptr, ##1536
062ec     F2 2C 02 F1 | 	add	local08, objptr
062f0     04 2C 06 F1 | 	add	local08, #4
062f4     16 2F 62 FC | 	wrlong	local09, local08
062f8     03 00 00 FF 
062fc     00 E4 05 F1 | 	add	objptr, ##1536
06300     F2 1E 02 FB | 	rdlong	local01, objptr
06304     0F 2D 02 F6 | 	mov	local08, local01
06308     01 2C 66 F0 | 	shl	local08, #1
0630c     0F 2D 02 F1 | 	add	local08, local01
06310     02 2C 66 F0 | 	shl	local08, #2
06314     03 00 00 FF 
06318     00 E4 85 F1 | 	sub	objptr, ##1536
0631c     F2 2C 02 F1 | 	add	local08, objptr
06320     08 2C 06 F1 | 	add	local08, #8
06324     16 29 62 FC | 	wrlong	local06, local08
06328     03 00 00 FF 
0632c     00 E4 05 F1 | 	add	objptr, ##1536
06330     F2 2A 02 FB | 	rdlong	local07, objptr
06334     01 2A 06 F1 | 	add	local07, #1
06338     F2 2A 62 FC | 	wrlong	local07, objptr
0633c     4A 00 00 FF 
06340     AC E4 85 F1 | 	sub	objptr, ##38060
06344                 | LR__0556
06344                 | ' 
06344                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
06344                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
06344     00 24 0E F2 | 	cmp	local04, #0 wz
06348     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0634c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06350     38 00 90 5D |  if_ne	jmp	#LR__0557
06354     4A 00 00 FF 
06358     AC E4 05 F1 | 	add	objptr, ##38060
0635c     F2 2C 02 FB | 	rdlong	local08, objptr
06360     16 1F 02 F6 | 	mov	local01, local08
06364     01 1E 66 F0 | 	shl	local01, #1
06368     16 1F 02 F1 | 	add	local01, local08
0636c     02 1E 66 F0 | 	shl	local01, #2
06370     03 00 00 FF 
06374     00 E4 85 F1 | 	sub	objptr, ##1536
06378     F2 1E 02 F1 | 	add	local01, objptr
0637c     08 1E 06 F1 | 	add	local01, #8
06380     0F FD 6B FC | 	wrlong	#510, local01
06384     47 00 00 FF 
06388     AC E4 85 F1 | 	sub	objptr, ##36524
0638c                 | LR__0557
0638c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0638c     4A 00 00 FF 
06390     AC E4 05 F1 | 	add	objptr, ##38060
06394     F2 1E 02 FB | 	rdlong	local01, objptr
06398     4A 00 00 FF 
0639c     AC E4 85 F1 | 	sub	objptr, ##38060
063a0     97 58 48 FB | 	callpa	#(@LR__0560-@LR__0558)>>2,fcache_load_ptr_
063a4                 | LR__0558
063a4     0F 2D 02 F6 | 	mov	local08, local01
063a8     01 2C 66 F0 | 	shl	local08, #1
063ac     0F 2D 02 F1 | 	add	local08, local01
063b0     02 2C 66 F0 | 	shl	local08, #2
063b4     47 00 00 FF 
063b8     AC E4 05 F1 | 	add	objptr, ##36524
063bc     F2 2C 02 F1 | 	add	local08, objptr
063c0     08 2C 06 F1 | 	add	local08, #8
063c4     16 2D 02 FB | 	rdlong	local08, local08
063c8     9B 2C 0E F2 | 	cmp	local08, #155 wz
063cc     47 00 00 FF 
063d0     AC E4 85 F1 | 	sub	objptr, ##36524
063d4     70 00 90 5D |  if_ne	jmp	#LR__0559
063d8     0F 2D 02 F6 | 	mov	local08, local01
063dc     01 2C 86 F1 | 	sub	local08, #1
063e0     16 2F 02 F6 | 	mov	local09, local08
063e4     01 2E 66 F0 | 	shl	local09, #1
063e8     16 2F 02 F1 | 	add	local09, local08
063ec     02 2E 66 F0 | 	shl	local09, #2
063f0     47 00 00 FF 
063f4     AC E4 05 F1 | 	add	objptr, ##36524
063f8     F2 2E 02 F1 | 	add	local09, objptr
063fc     08 2E 06 F1 | 	add	local09, #8
06400     17 2D 02 FB | 	rdlong	local08, local09
06404     11 2C 0E F2 | 	cmp	local08, #17 wz
06408     47 00 00 FF 
0640c     AC E4 85 F1 | 	sub	objptr, ##36524
06410     34 00 90 5D |  if_ne	jmp	#LR__0559
06414     0F 2F 02 F6 | 	mov	local09, local01
06418     01 2E 86 F1 | 	sub	local09, #1
0641c     17 2D 02 F6 | 	mov	local08, local09
06420     01 2C 66 F0 | 	shl	local08, #1
06424     17 2D 02 F1 | 	add	local08, local09
06428     02 2C 66 F0 | 	shl	local08, #2
0642c     47 00 00 FF 
06430     AC E4 05 F1 | 	add	objptr, ##36524
06434     F2 2C 02 F1 | 	add	local08, objptr
06438     08 2C 06 F1 | 	add	local08, #8
0643c     16 25 68 FC | 	wrlong	#18, local08
06440     47 00 00 FF 
06444     AC E4 85 F1 | 	sub	objptr, ##36524
06448                 | LR__0559
06448     01 1E 86 F1 | 	sub	local01, #1
0644c     01 1E 56 F2 | 	cmps	local01, #1 wc
06450     50 FF 9F 3D |  if_ae	jmp	#LR__0558
06454                 | LR__0560
06454                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
06454                 | ' return err
06454     13 FB 01 F6 | 	mov	result1, local05
06458     A7 F0 03 F6 | 	mov	ptra, fp
0645c     B2 00 A0 FD | 	call	#popregs_
06460                 | _compile_immediate_ret
06460     2D 00 64 FD | 	ret
06464                 | 
06464                 | ' 
06464                 | ' sub compile_array_assign
06464                 | _compile_array_assign
06464     0A 4A 05 F6 | 	mov	COUNT_, #10
06468     A8 00 A0 FD | 	call	#pushregs_
0646c     00 24 06 F6 | 	mov	local04, #0
06470     37 00 00 FF 
06474     74 E4 05 F1 | 	add	objptr, ##28276
06478     F2 26 02 FB | 	rdlong	local05, objptr
0647c     13 FB 01 F6 | 	mov	result1, local05
06480     01 FA 85 F1 | 	sub	result1, #1
06484     03 FA 65 F0 | 	shl	result1, #3
06488     02 00 00 FF 
0648c     38 E4 85 F1 | 	sub	objptr, ##1080
06490     F2 FA 01 F1 | 	add	result1, objptr
06494     FD 28 02 FB | 	rdlong	local06, result1
06498                 | ' numpar=0
06498                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06498                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06498                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06498                 | ' if lparts(ct).token=token_lpar then
06498     03 26 66 F0 | 	shl	local05, #3
0649c     F2 26 02 F1 | 	add	local05, objptr
064a0     04 26 06 F1 | 	add	local05, #4
064a4     13 27 02 FB | 	rdlong	local05, local05
064a8     15 26 0E F2 | 	cmp	local05, #21 wz
064ac     35 00 00 FF 
064b0     3C E4 85 F1 | 	sub	objptr, ##27196
064b4     D4 01 90 5D |  if_ne	jmp	#LR__0574
064b8     37 00 00 FF 
064bc     74 E4 05 F1 | 	add	objptr, ##28276
064c0     F2 2A 02 FB | 	rdlong	local07, objptr
064c4     01 2A 06 F1 | 	add	local07, #1
064c8     F2 2A 62 FC | 	wrlong	local07, objptr
064cc     37 00 00 FF 
064d0     74 E4 85 F1 | 	sub	objptr, ##28276
064d4                 | '   ct+=1 											' omit this lpar, this is for expr list
064d4                 | '   do
064d4                 | LR__0570
064d4     80 2D B0 FD | 	call	#_expr
064d8     37 00 00 FF 
064dc     74 E4 05 F1 | 	add	objptr, ##28276
064e0     F2 26 02 FB | 	rdlong	local05, objptr
064e4     01 26 06 F1 | 	add	local05, #1
064e8     F2 26 62 FC | 	wrlong	local05, objptr
064ec     01 24 06 F1 | 	add	local04, #1
064f0     01 26 86 F1 | 	sub	local05, #1
064f4     03 26 66 F0 | 	shl	local05, #3
064f8     02 00 00 FF 
064fc     38 E4 85 F1 | 	sub	objptr, ##1080
06500     F2 26 02 F1 | 	add	local05, objptr
06504     04 26 06 F1 | 	add	local05, #4
06508     13 2B 02 FB | 	rdlong	local07, local05
0650c     14 2A 0E F2 | 	cmp	local07, #20 wz
06510     35 00 00 FF 
06514     3C E4 85 F1 | 	sub	objptr, ##27196
06518     34 00 90 AD |  if_e	jmp	#LR__0571
0651c     37 00 00 FF 
06520     74 E4 05 F1 | 	add	objptr, ##28276
06524     F2 2A 02 FB | 	rdlong	local07, objptr
06528     03 2A 66 F0 | 	shl	local07, #3
0652c     02 00 00 FF 
06530     38 E4 85 F1 | 	sub	objptr, ##1080
06534     F2 2A 02 F1 | 	add	local07, objptr
06538     04 2A 06 F1 | 	add	local07, #4
0653c     15 2B 02 FB | 	rdlong	local07, local07
06540     FE 2B 0E F2 | 	cmp	local07, #510 wz
06544     35 00 00 FF 
06548     3C E4 85 F1 | 	sub	objptr, ##27196
0654c     84 FF 9F 5D |  if_ne	jmp	#LR__0570
06550                 | LR__0571
06550     37 00 00 FF 
06554     74 E4 05 F1 | 	add	objptr, ##28276
06558     F2 2A 02 FB | 	rdlong	local07, objptr
0655c     01 2A 06 F1 | 	add	local07, #1
06560     F2 2A 62 FC | 	wrlong	local07, objptr
06564     37 00 00 FF 
06568     74 E4 85 F1 | 	sub	objptr, ##28276
0656c     E8 2C B0 FD | 	call	#_expr
06570     01 2C 66 F6 | 	neg	local08, #1
06574     00 2E 06 F6 | 	mov	local09, #0
06578                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06578                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06578                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06578                 | ' ct+=1 : expr()
06578                 | ' ' now find the vae
06578                 | ' 
06578                 | ' j=-1 : i=0 : do : 
06578                 | LR__0572
06578                 | '   if variables(i).name=varname$ then j=i: exit loop
06578     17 27 02 F6 | 	mov	local05, local09
0657c     04 26 66 F0 | 	shl	local05, #4
06580     15 00 00 FF 
06584     28 E4 05 F1 | 	add	objptr, ##10792
06588     F2 26 02 F1 | 	add	local05, objptr
0658c     13 13 02 FB | 	rdlong	arg01, local05
06590     14 15 02 F6 | 	mov	arg02, local06
06594     15 00 00 FF 
06598     28 E4 85 F1 | 	sub	objptr, ##10792
0659c     54 88 B1 FD | 	call	#__system___string_cmp
065a0     00 FA 0D F2 | 	cmp	result1, #0 wz
065a4     17 2D 02 A6 |  if_e	mov	local08, local09
065a8     20 00 90 AD |  if_e	jmp	#LR__0573
065ac     01 2E 06 F1 | 	add	local09, #1
065b0     35 00 00 FF 
065b4     38 E4 05 F1 | 	add	objptr, ##27192
065b8     F2 2A 02 FB | 	rdlong	local07, objptr
065bc     35 00 00 FF 
065c0     38 E4 85 F1 | 	sub	objptr, ##27192
065c4     15 2F 5A F2 | 	cmps	local09, local07 wcz
065c8     AC FF 9F ED |  if_be	jmp	#LR__0572
065cc                 | LR__0573
065cc     16 1F 02 F6 | 	mov	local01, local08
065d0     12 21 02 F6 | 	mov	local02, local04
065d4     17 22 06 F6 | 	mov	local03, #23
065d8     0F 2B 02 F6 | 	mov	local07, local01
065dc     10 31 02 F6 | 	mov	local10, local02
065e0     11 2D 02 F6 | 	mov	local08, local03
065e4     4A 00 00 FF 
065e8     AC E4 05 F1 | 	add	objptr, ##38060
065ec     F2 1E 02 FB | 	rdlong	local01, objptr
065f0     0F 2F 02 F6 | 	mov	local09, local01
065f4     01 2E 66 F0 | 	shl	local09, #1
065f8     0F 2F 02 F1 | 	add	local09, local01
065fc     02 2E 66 F0 | 	shl	local09, #2
06600     03 00 00 FF 
06604     00 E4 85 F1 | 	sub	objptr, ##1536
06608     F2 2E 02 F1 | 	add	local09, objptr
0660c     17 2B 62 FC | 	wrlong	local07, local09
06610     03 00 00 FF 
06614     00 E4 05 F1 | 	add	objptr, ##1536
06618     F2 1E 02 FB | 	rdlong	local01, objptr
0661c     0F 2F 02 F6 | 	mov	local09, local01
06620     01 2E 66 F0 | 	shl	local09, #1
06624     0F 2F 02 F1 | 	add	local09, local01
06628     02 2E 66 F0 | 	shl	local09, #2
0662c     03 00 00 FF 
06630     00 E4 85 F1 | 	sub	objptr, ##1536
06634     F2 2E 02 F1 | 	add	local09, objptr
06638     04 2E 06 F1 | 	add	local09, #4
0663c     17 31 62 FC | 	wrlong	local10, local09
06640     03 00 00 FF 
06644     00 E4 05 F1 | 	add	objptr, ##1536
06648     F2 30 02 FB | 	rdlong	local10, objptr
0664c     18 1F 02 F6 | 	mov	local01, local10
06650     01 1E 66 F0 | 	shl	local01, #1
06654     18 1F 02 F1 | 	add	local01, local10
06658     02 1E 66 F0 | 	shl	local01, #2
0665c     03 00 00 FF 
06660     00 E4 85 F1 | 	sub	objptr, ##1536
06664     F2 1E 02 F1 | 	add	local01, objptr
06668     08 1E 06 F1 | 	add	local01, #8
0666c     0F 2D 62 FC | 	wrlong	local08, local01
06670     03 00 00 FF 
06674     00 E4 05 F1 | 	add	objptr, ##1536
06678     F2 2A 02 FB | 	rdlong	local07, objptr
0667c     01 2A 06 F1 | 	add	local07, #1
06680     F2 2A 62 FC | 	wrlong	local07, objptr
06684     4A 00 00 FF 
06688     AC E4 85 F1 | 	sub	objptr, ##38060
0668c                 | LR__0574
0668c     A7 F0 03 F6 | 	mov	ptra, fp
06690     B2 00 A0 FD | 	call	#popregs_
06694                 | _compile_array_assign_ret
06694     2D 00 64 FD | 	ret
06698                 | 
06698                 | ' 
06698                 | ' 
06698                 | ' sub compile_immediate_assign(linetype as ulong)
06698                 | _compile_immediate_assign
06698     09 4A 05 F6 | 	mov	COUNT_, #9
0669c     A8 00 A0 FD | 	call	#pushregs_
066a0     09 25 0A F6 | 	mov	local04, arg01 wz
066a4     FF 22 06 F6 | 	mov	local03, #255
066a8     01 26 66 F6 | 	neg	local05, #1
066ac                 | ' 
066ac                 | ' t1.result_type=result_error : t1.result.uresult=0
066ac                 | ' i=-1: j=-1
066ac                 | ' 
066ac                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
066ac     2C 00 90 5D |  if_ne	jmp	#LR__0580
066b0     35 00 00 FF 
066b4     3C E4 05 F1 | 	add	objptr, ##27196
066b8     F2 28 02 FB | 	rdlong	local06, objptr
066bc     02 00 00 FF 
066c0     38 E4 05 F1 | 	add	objptr, ##1080
066c4     F2 04 68 FC | 	wrlong	#2, objptr
066c8     13 00 00 FF 
066cc     38 E4 05 F1 | 	add	objptr, ##9784
066d0     F2 00 68 FC | 	wrlong	#0, objptr
066d4     4A 00 00 FF 
066d8     AC E4 85 F1 | 	sub	objptr, ##38060
066dc                 | LR__0580
066dc                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
066dc     02 24 0E F2 | 	cmp	local04, #2 wz
066e0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066e4     35 00 00 AF 
066e8     3C E4 05 A1 |  if_e	add	objptr, ##27196
066ec     F2 28 02 AB |  if_e	rdlong	local06, objptr
066f0     02 00 00 AF 
066f4     38 E4 05 A1 |  if_e	add	objptr, ##1080
066f8     F2 04 68 AC |  if_e	wrlong	#2, objptr
066fc     37 00 00 AF 
06700     74 E4 85 A1 |  if_e	sub	objptr, ##28276
06704                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
06704     04 24 0E F2 | 	cmp	local04, #4 wz
06708     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0670c     2C 00 90 5D |  if_ne	jmp	#LR__0581
06710     35 00 00 FF 
06714     44 E4 05 F1 | 	add	objptr, ##27204
06718     F2 28 02 FB | 	rdlong	local06, objptr
0671c     02 00 00 FF 
06720     30 E4 05 F1 | 	add	objptr, ##1072
06724     F2 06 68 FC | 	wrlong	#3, objptr
06728     13 00 00 FF 
0672c     38 E4 05 F1 | 	add	objptr, ##9784
06730     F2 04 68 FC | 	wrlong	#2, objptr
06734     4A 00 00 FF 
06738     AC E4 85 F1 | 	sub	objptr, ##38060
0673c                 | LR__0581
0673c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0673c     05 24 0E F2 | 	cmp	local04, #5 wz
06740     3C 00 90 5D |  if_ne	jmp	#LR__0582
06744     37 00 00 FF 
06748     74 E4 05 F1 | 	add	objptr, ##28276
0674c     F2 FA 01 FB | 	rdlong	result1, objptr
06750     FD 28 02 F6 | 	mov	local06, result1
06754     03 28 66 F0 | 	shl	local06, #3
06758     02 00 00 FF 
0675c     38 E4 85 F1 | 	sub	objptr, ##1080
06760     F2 28 02 F1 | 	add	local06, objptr
06764     14 29 02 FB | 	rdlong	local06, local06
06768     02 FA 05 F1 | 	add	result1, #2
0676c     02 00 00 FF 
06770     38 E4 05 F1 | 	add	objptr, ##1080
06774     F2 FA 61 FC | 	wrlong	result1, objptr
06778     37 00 00 FF 
0677c     74 E4 85 F1 | 	sub	objptr, ##28276
06780                 | LR__0582
06780     14 13 02 F6 | 	mov	arg01, local06
06784     01 14 06 F6 | 	mov	arg02, #1
06788     D8 A6 B1 FD | 	call	#__system__Right_S
0678c     C8 2A B0 FD | 	call	#_expr
06790                 | '  
06790                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06790                 | ' 
06790                 | ' suffix2$=right$(varname2$,1)
06790                 | ' expr()
06790                 | ' 
06790                 | ' 
06790                 | ' if varnum>0 then
06790     35 00 00 FF 
06794     38 E4 05 F1 | 	add	objptr, ##27192
06798     F2 2A 02 FB | 	rdlong	local07, objptr
0679c     35 00 00 FF 
067a0     38 E4 85 F1 | 	sub	objptr, ##27192
067a4     01 2A 56 F2 | 	cmps	local07, #1 wc
067a8     58 00 90 CD |  if_b	jmp	#LR__0585
067ac                 | '   for i=0 to varnum-1
067ac     00 2C 06 F6 | 	mov	local08, #0
067b0     35 00 00 FF 
067b4     38 E4 05 F1 | 	add	objptr, ##27192
067b8     F2 2E 02 FB | 	rdlong	local09, objptr
067bc     35 00 00 FF 
067c0     38 E4 85 F1 | 	sub	objptr, ##27192
067c4                 | LR__0583
067c4     17 2D 52 F2 | 	cmps	local08, local09 wc
067c8     38 00 90 3D |  if_ae	jmp	#LR__0584
067cc                 | '     if variables(i).name=varname2$ then j=i : exit
067cc     16 2B 02 F6 | 	mov	local07, local08
067d0     04 2A 66 F0 | 	shl	local07, #4
067d4     15 00 00 FF 
067d8     28 E4 05 F1 | 	add	objptr, ##10792
067dc     F2 2A 02 F1 | 	add	local07, objptr
067e0     15 13 02 FB | 	rdlong	arg01, local07
067e4     14 15 02 F6 | 	mov	arg02, local06
067e8     15 00 00 FF 
067ec     28 E4 85 F1 | 	sub	objptr, ##10792
067f0     00 86 B1 FD | 	call	#__system___string_cmp
067f4     00 FA 0D F2 | 	cmp	result1, #0 wz
067f8     16 27 02 A6 |  if_e	mov	local05, local08
067fc     01 2C 06 51 |  if_ne	add	local08, #1
06800     C0 FF 9F 5D |  if_ne	jmp	#LR__0583
06804                 | LR__0584
06804                 | LR__0585
06804                 | ' if  j=-1 andalso varnum<maxvars then   
06804     FF FF 7F FF 
06808     FF 27 0E F2 | 	cmp	local05, ##-1 wz
0680c     60 00 90 5D |  if_ne	jmp	#LR__0586
06810     35 00 00 FF 
06814     38 E4 05 F1 | 	add	objptr, ##27192
06818     F2 2A 02 FB | 	rdlong	local07, objptr
0681c     35 00 00 FF 
06820     38 E4 85 F1 | 	sub	objptr, ##27192
06824     02 00 00 FF 
06828     00 2A 56 F2 | 	cmps	local07, ##1024 wc
0682c     40 00 90 3D |  if_ae	jmp	#LR__0586
06830     35 00 00 FF 
06834     38 E4 05 F1 | 	add	objptr, ##27192
06838     F2 2E 02 FB | 	rdlong	local09, objptr
0683c     04 2E 66 F0 | 	shl	local09, #4
06840     20 00 00 FF 
06844     10 E4 85 F1 | 	sub	objptr, ##16400
06848     F2 2E 02 F1 | 	add	local09, objptr
0684c     17 29 62 FC | 	wrlong	local06, local09
06850     20 00 00 FF 
06854     10 E4 05 F1 | 	add	objptr, ##16400
06858     F2 2A 02 FB | 	rdlong	local07, objptr
0685c     15 27 02 F6 | 	mov	local05, local07
06860     01 2A 06 F1 | 	add	local07, #1
06864     F2 2A 62 FC | 	wrlong	local07, objptr
06868     35 00 00 FF 
0686c     38 E4 85 F1 | 	sub	objptr, ##27192
06870                 | LR__0586
06870     13 1F 02 F6 | 	mov	local01, local05
06874     17 22 06 F6 | 	mov	local03, #23
06878     0F 2B 02 F6 | 	mov	local07, local01
0687c     10 2F 02 F6 | 	mov	local09, local02
06880     11 1F 02 F6 | 	mov	local01, local03
06884     4A 00 00 FF 
06888     AC E4 05 F1 | 	add	objptr, ##38060
0688c     F2 2C 02 FB | 	rdlong	local08, objptr
06890     16 29 02 F6 | 	mov	local06, local08
06894     01 28 66 F0 | 	shl	local06, #1
06898     16 29 02 F1 | 	add	local06, local08
0689c     02 28 66 F0 | 	shl	local06, #2
068a0     03 00 00 FF 
068a4     00 E4 85 F1 | 	sub	objptr, ##1536
068a8     F2 28 02 F1 | 	add	local06, objptr
068ac     14 2B 62 FC | 	wrlong	local07, local06
068b0     03 00 00 FF 
068b4     00 E4 05 F1 | 	add	objptr, ##1536
068b8     F2 2C 02 FB | 	rdlong	local08, objptr
068bc     16 2B 02 F6 | 	mov	local07, local08
068c0     01 2A 66 F0 | 	shl	local07, #1
068c4     16 2B 02 F1 | 	add	local07, local08
068c8     02 2A 66 F0 | 	shl	local07, #2
068cc     03 00 00 FF 
068d0     00 E4 85 F1 | 	sub	objptr, ##1536
068d4     F2 2A 02 F1 | 	add	local07, objptr
068d8     04 2A 06 F1 | 	add	local07, #4
068dc     15 2F 62 FC | 	wrlong	local09, local07
068e0     03 00 00 FF 
068e4     00 E4 05 F1 | 	add	objptr, ##1536
068e8     F2 2E 02 FB | 	rdlong	local09, objptr
068ec     17 2D 02 F6 | 	mov	local08, local09
068f0     01 2C 66 F0 | 	shl	local08, #1
068f4     17 2D 02 F1 | 	add	local08, local09
068f8     02 2C 66 F0 | 	shl	local08, #2
068fc     03 00 00 FF 
06900     00 E4 85 F1 | 	sub	objptr, ##1536
06904     F2 2C 02 F1 | 	add	local08, objptr
06908     08 2C 06 F1 | 	add	local08, #8
0690c     16 1F 62 FC | 	wrlong	local01, local08
06910     03 00 00 FF 
06914     00 E4 05 F1 | 	add	objptr, ##1536
06918     F2 2A 02 FB | 	rdlong	local07, objptr
0691c     01 2A 06 F1 | 	add	local07, #1
06920     F2 2A 62 FC | 	wrlong	local07, objptr
06924     4A 00 00 FF 
06928     AC E4 85 F1 | 	sub	objptr, ##38060
0692c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
0692c                 | ' 
0692c                 | ' 
0692c                 | ' 
0692c                 | ' 
0692c                 | ' 
0692c                 | ' 
0692c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
0692c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0692c     00 24 0E F2 | 	cmp	local04, #0 wz
06930     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06934     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06938     38 00 90 5D |  if_ne	jmp	#LR__0587
0693c     4A 00 00 FF 
06940     AC E4 05 F1 | 	add	objptr, ##38060
06944     F2 1E 02 FB | 	rdlong	local01, objptr
06948     0F 2F 02 F6 | 	mov	local09, local01
0694c     01 2E 66 F0 | 	shl	local09, #1
06950     0F 2F 02 F1 | 	add	local09, local01
06954     02 2E 66 F0 | 	shl	local09, #2
06958     03 00 00 FF 
0695c     00 E4 85 F1 | 	sub	objptr, ##1536
06960     F2 2E 02 F1 | 	add	local09, objptr
06964     08 2E 06 F1 | 	add	local09, #8
06968     17 FD 6B FC | 	wrlong	#510, local09
0696c     47 00 00 FF 
06970     AC E4 85 F1 | 	sub	objptr, ##36524
06974                 | LR__0587
06974     A7 F0 03 F6 | 	mov	ptra, fp
06978     B2 00 A0 FD | 	call	#popregs_
0697c                 | _compile_immediate_assign_ret
0697c     2D 00 64 FD | 	ret
06980                 | 
06980                 | ' 
06980                 | ' ' ------------------ compile the line that is calling a command 
06980                 | ' 
06980                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06980                 | _compile
06980     04 4A 05 F6 | 	mov	COUNT_, #4
06984     A8 00 A0 FD | 	call	#pushregs_
06988     09 1F 0A F6 | 	mov	local01, arg01 wz
0698c     0A 21 02 F6 | 	mov	local02, arg02
06990     0B 23 02 F6 | 	mov	local03, arg03
06994                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06994                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06994                 | '  
06994                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06994                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06994     0C 00 90 5D |  if_ne	jmp	#LR__0590
06998     00 12 06 F6 | 	mov	arg01, #0
0699c     FC F2 BF FD | 	call	#_compile_immediate
069a0     A0 00 90 FD | 	jmp	#LR__0597
069a4                 | LR__0590
069a4     47 00 00 FF 
069a8     AC E4 05 F1 | 	add	objptr, ##36524
069ac     F2 1E 62 FC | 	wrlong	local01, objptr
069b0     04 E4 05 F1 | 	add	objptr, #4
069b4     F2 20 62 FC | 	wrlong	local02, objptr
069b8     47 00 00 FF 
069bc     B0 E4 85 F1 | 	sub	objptr, ##36528
069c0     11 13 02 F6 | 	mov	arg01, local03
069c4     01 12 06 F1 | 	add	arg01, #1
069c8     D0 F2 BF FD | 	call	#_compile_immediate
069cc     FD 24 0A F6 | 	mov	local04, result1 wz
069d0                 | ' 
069d0                 | ' ucompiledline(0)=alinemajor
069d0                 | ' ucompiledline(1)=alineminor
069d0                 | ' 
069d0                 | ' 
069d0                 | ' ' cont: 0: this is the first part of the line that will continue
069d0                 | ' ' 1 - this is the continuation of the line
069d0                 | ' ' 2 - this is the last continued line
069d0                 | ' ' 3 - this is the ome and only part
069d0                 | ' 
069d0                 | ' err=compile_immediate(cont+1) 
069d0                 | ' if err=0 then
069d0     6C 00 90 5D |  if_ne	jmp	#LR__0596
069d4                 | '   if cont=3 orelse cont=2 then 
069d4     03 22 0E F2 | 	cmp	local03, #3 wz
069d8     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
069dc     60 00 90 5D |  if_ne	jmp	#LR__0595
069e0                 | '     if alinemajor >lastline then 
069e0     4A 00 00 FF 
069e4     B8 E4 05 F1 | 	add	objptr, ##38072
069e8     F2 16 02 FB | 	rdlong	arg03, objptr
069ec     4A 00 00 FF 
069f0     B8 E4 85 F1 | 	sub	objptr, ##38072
069f4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069f8     0C 00 90 ED |  if_be	jmp	#LR__0591
069fc     0F 13 02 F6 | 	mov	arg01, local01
06a00     D0 F1 BF FD | 	call	#_add_line_at_end
06a04     38 00 90 FD | 	jmp	#LR__0594
06a08                 | LR__0591
06a08     0F 13 02 F6 | 	mov	arg01, local01
06a0c     F0 EA BF FD | 	call	#_deleteline
06a10                 | '       deleteline(alinemajor)  
06a10                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
06a10     4A 00 00 FF 
06a14     B8 E4 05 F1 | 	add	objptr, ##38072
06a18     F2 16 02 FB | 	rdlong	arg03, objptr
06a1c     4A 00 00 FF 
06a20     B8 E4 85 F1 | 	sub	objptr, ##38072
06a24     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06a28     0C 00 90 ED |  if_be	jmp	#LR__0592
06a2c     0F 13 02 F6 | 	mov	arg01, local01
06a30     A0 F1 BF FD | 	call	#_add_line_at_end
06a34     08 00 90 FD | 	jmp	#LR__0593
06a38                 | LR__0592
06a38     0F 13 02 F6 | 	mov	arg01, local01
06a3c     78 EF BF FD | 	call	#_insertline
06a40                 | LR__0593
06a40                 | LR__0594
06a40                 | LR__0595
06a40                 | LR__0596
06a40                 | ' return err
06a40     12 FB 01 F6 | 	mov	result1, local04
06a44                 | LR__0597
06a44     A7 F0 03 F6 | 	mov	ptra, fp
06a48     B2 00 A0 FD | 	call	#popregs_
06a4c                 | _compile_ret
06a4c     2D 00 64 FD | 	ret
06a50                 | 
06a50                 | ' 
06a50                 | ' ' ------------------ compile the line that is assigning to a variable
06a50                 | ' 
06a50                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06a50                 | _compile_assign
06a50     03 4A 05 F6 | 	mov	COUNT_, #3
06a54     A8 00 A0 FD | 	call	#pushregs_
06a58     09 1F 0A F6 | 	mov	local01, arg01 wz
06a5c     0A 21 02 F6 | 	mov	local02, arg02
06a60     0B 23 02 F6 | 	mov	local03, arg03
06a64                 | ' 
06a64                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06a64                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06a64     0C 00 90 5D |  if_ne	jmp	#LR__0600
06a68     00 12 06 F6 | 	mov	arg01, #0
06a6c     28 FC BF FD | 	call	#_compile_immediate_assign
06a70     94 00 90 FD | 	jmp	#LR__0606
06a74                 | LR__0600
06a74     47 00 00 FF 
06a78     AC E4 05 F1 | 	add	objptr, ##36524
06a7c     F2 1E 62 FC | 	wrlong	local01, objptr
06a80     04 E4 05 F1 | 	add	objptr, #4
06a84     F2 20 62 FC | 	wrlong	local02, objptr
06a88     47 00 00 FF 
06a8c     B0 E4 85 F1 | 	sub	objptr, ##36528
06a90     11 13 02 F6 | 	mov	arg01, local03
06a94     01 12 06 F1 | 	add	arg01, #1
06a98     FC FB BF FD | 	call	#_compile_immediate_assign
06a9c                 | ' 
06a9c                 | ' ucompiledline(0)=alinemajor
06a9c                 | ' ucompiledline(1)=alineminor
06a9c                 | ' 
06a9c                 | ' compile_immediate_assign(cont+1) 
06a9c                 | ' 
06a9c                 | ' if cont=3 orelse cont=2 then 
06a9c     03 22 0E F2 | 	cmp	local03, #3 wz
06aa0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06aa4     60 00 90 5D |  if_ne	jmp	#LR__0605
06aa8                 | '   if alinemajor >lastline then 
06aa8     4A 00 00 FF 
06aac     B8 E4 05 F1 | 	add	objptr, ##38072
06ab0     F2 16 02 FB | 	rdlong	arg03, objptr
06ab4     4A 00 00 FF 
06ab8     B8 E4 85 F1 | 	sub	objptr, ##38072
06abc     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06ac0     0C 00 90 ED |  if_be	jmp	#LR__0601
06ac4     0F 13 02 F6 | 	mov	arg01, local01
06ac8     08 F1 BF FD | 	call	#_add_line_at_end
06acc     38 00 90 FD | 	jmp	#LR__0604
06ad0                 | LR__0601
06ad0     0F 13 02 F6 | 	mov	arg01, local01
06ad4     28 EA BF FD | 	call	#_deleteline
06ad8                 | '     deleteline(alinemajor)  
06ad8                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06ad8     4A 00 00 FF 
06adc     B8 E4 05 F1 | 	add	objptr, ##38072
06ae0     F2 16 02 FB | 	rdlong	arg03, objptr
06ae4     4A 00 00 FF 
06ae8     B8 E4 85 F1 | 	sub	objptr, ##38072
06aec     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06af0     0C 00 90 ED |  if_be	jmp	#LR__0602
06af4     0F 13 02 F6 | 	mov	arg01, local01
06af8     D8 F0 BF FD | 	call	#_add_line_at_end
06afc     08 00 90 FD | 	jmp	#LR__0603
06b00                 | LR__0602
06b00     0F 13 02 F6 | 	mov	arg01, local01
06b04     B0 EE BF FD | 	call	#_insertline
06b08                 | LR__0603
06b08                 | LR__0604
06b08                 | LR__0605
06b08                 | LR__0606
06b08     A7 F0 03 F6 | 	mov	ptra, fp
06b0c     B2 00 A0 FD | 	call	#popregs_
06b10                 | _compile_assign_ret
06b10     2D 00 64 FD | 	ret
06b14                 | 
06b14                 | ' 
06b14                 | ' sub compile_error(errno)
06b14                 | _compile_error
06b14     FF 04 06 F6 | 	mov	_var03, #255
06b18     01 07 02 F6 | 	mov	_var04, _var02
06b1c     02 09 02 F6 | 	mov	_var05, _var03
06b20     4A 00 00 FF 
06b24     AC E4 05 F1 | 	add	objptr, ##38060
06b28     F2 0A 02 FB | 	rdlong	_var06, objptr
06b2c     05 0D 02 F6 | 	mov	_var07, _var06
06b30     01 0C 66 F0 | 	shl	_var07, #1
06b34     05 0D 02 F1 | 	add	_var07, _var06
06b38     02 0C 66 F0 | 	shl	_var07, #2
06b3c     03 00 00 FF 
06b40     00 E4 85 F1 | 	sub	objptr, ##1536
06b44     F2 0C 02 F1 | 	add	_var07, objptr
06b48     06 13 62 FC | 	wrlong	arg01, _var07
06b4c     03 00 00 FF 
06b50     00 E4 05 F1 | 	add	objptr, ##1536
06b54     F2 0C 02 FB | 	rdlong	_var07, objptr
06b58     06 0B 02 F6 | 	mov	_var06, _var07
06b5c     01 0A 66 F0 | 	shl	_var06, #1
06b60     06 0B 02 F1 | 	add	_var06, _var07
06b64     02 0A 66 F0 | 	shl	_var06, #2
06b68     03 00 00 FF 
06b6c     00 E4 85 F1 | 	sub	objptr, ##1536
06b70     F2 0A 02 F1 | 	add	_var06, objptr
06b74     04 0A 06 F1 | 	add	_var06, #4
06b78     05 07 62 FC | 	wrlong	_var04, _var06
06b7c     03 00 00 FF 
06b80     00 E4 05 F1 | 	add	objptr, ##1536
06b84     F2 0C 02 FB | 	rdlong	_var07, objptr
06b88     06 0B 02 F6 | 	mov	_var06, _var07
06b8c     01 0A 66 F0 | 	shl	_var06, #1
06b90     06 0B 02 F1 | 	add	_var06, _var07
06b94     02 0A 66 F0 | 	shl	_var06, #2
06b98     03 00 00 FF 
06b9c     00 E4 85 F1 | 	sub	objptr, ##1536
06ba0     F2 0A 02 F1 | 	add	_var06, objptr
06ba4     08 0A 06 F1 | 	add	_var06, #8
06ba8     05 09 62 FC | 	wrlong	_var05, _var06
06bac     03 00 00 FF 
06bb0     00 E4 05 F1 | 	add	objptr, ##1536
06bb4     F2 12 02 FB | 	rdlong	arg01, objptr
06bb8     01 12 06 F1 | 	add	arg01, #1
06bbc     F2 12 62 FC | 	wrlong	arg01, objptr
06bc0     4A 00 00 FF 
06bc4     AC E4 85 F1 | 	sub	objptr, ##38060
06bc8                 | _compile_error_ret
06bc8     2D 00 64 FD | 	ret
06bcc                 | 
06bcc                 | ' 
06bcc                 | ' sub compile_unknown() 
06bcc                 | _compile_unknown
06bcc     FF 04 06 F6 | 	mov	_var03, #255
06bd0     17 00 06 F6 | 	mov	_var01, #23
06bd4     01 07 02 F6 | 	mov	_var04, _var02
06bd8     02 01 02 F6 | 	mov	_var01, _var03
06bdc     4A 00 00 FF 
06be0     AC E4 05 F1 | 	add	objptr, ##38060
06be4     F2 08 02 FB | 	rdlong	_var05, objptr
06be8     04 0B 02 F6 | 	mov	_var06, _var05
06bec     01 0A 66 F0 | 	shl	_var06, #1
06bf0     04 0B 02 F1 | 	add	_var06, _var05
06bf4     02 0A 66 F0 | 	shl	_var06, #2
06bf8     03 00 00 FF 
06bfc     00 E4 85 F1 | 	sub	objptr, ##1536
06c00     F2 0A 02 F1 | 	add	_var06, objptr
06c04     05 2F 68 FC | 	wrlong	#23, _var06
06c08     03 00 00 FF 
06c0c     00 E4 05 F1 | 	add	objptr, ##1536
06c10     F2 0A 02 FB | 	rdlong	_var06, objptr
06c14     05 09 02 F6 | 	mov	_var05, _var06
06c18     01 08 66 F0 | 	shl	_var05, #1
06c1c     05 09 02 F1 | 	add	_var05, _var06
06c20     02 08 66 F0 | 	shl	_var05, #2
06c24     03 00 00 FF 
06c28     00 E4 85 F1 | 	sub	objptr, ##1536
06c2c     F2 08 02 F1 | 	add	_var05, objptr
06c30     04 08 06 F1 | 	add	_var05, #4
06c34     04 07 62 FC | 	wrlong	_var04, _var05
06c38     03 00 00 FF 
06c3c     00 E4 05 F1 | 	add	objptr, ##1536
06c40     F2 0A 02 FB | 	rdlong	_var06, objptr
06c44     05 09 02 F6 | 	mov	_var05, _var06
06c48     01 08 66 F0 | 	shl	_var05, #1
06c4c     05 09 02 F1 | 	add	_var05, _var06
06c50     02 08 66 F0 | 	shl	_var05, #2
06c54     03 00 00 FF 
06c58     00 E4 85 F1 | 	sub	objptr, ##1536
06c5c     F2 08 02 F1 | 	add	_var05, objptr
06c60     08 08 06 F1 | 	add	_var05, #8
06c64     04 01 62 FC | 	wrlong	_var01, _var05
06c68     03 00 00 FF 
06c6c     00 E4 05 F1 | 	add	objptr, ##1536
06c70     F2 0A 02 FB | 	rdlong	_var06, objptr
06c74     01 0A 06 F1 | 	add	_var06, #1
06c78     F2 0A 62 FC | 	wrlong	_var06, objptr
06c7c     4A 00 00 FF 
06c80     AC E4 85 F1 | 	sub	objptr, ##38060
06c84                 | _compile_unknown_ret
06c84     2D 00 64 FD | 	ret
06c88                 | 
06c88                 | ' 
06c88                 | ' function compile_fun_2p() as ulong
06c88                 | _compile_fun_2p
06c88     01 4A 05 F6 | 	mov	COUNT_, #1
06c8c     A8 00 A0 FD | 	call	#pushregs_
06c90     C4 25 B0 FD | 	call	#_expr
06c94                 | ' 
06c94                 | ' expr()
06c94                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c94     37 00 00 FF 
06c98     74 E4 05 F1 | 	add	objptr, ##28276
06c9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ca0     03 1E 66 F0 | 	shl	local01, #3
06ca4     02 00 00 FF 
06ca8     38 E4 85 F1 | 	sub	objptr, ##1080
06cac     F2 1E 02 F1 | 	add	local01, objptr
06cb0     04 1E 06 F1 | 	add	local01, #4
06cb4     0F 1F 02 FB | 	rdlong	local01, local01
06cb8     11 1E 0E F2 | 	cmp	local01, #17 wz
06cbc     35 00 00 FF 
06cc0     3C E4 85 F1 | 	sub	objptr, ##27196
06cc4     15 FA 05 56 |  if_ne	mov	result1, #21
06cc8     24 00 90 5D |  if_ne	jmp	#LR__0610
06ccc     37 00 00 FF 
06cd0     74 E4 05 F1 | 	add	objptr, ##28276
06cd4     F2 1E 02 FB | 	rdlong	local01, objptr
06cd8     01 1E 06 F1 | 	add	local01, #1
06cdc     F2 1E 62 FC | 	wrlong	local01, objptr
06ce0     37 00 00 FF 
06ce4     74 E4 85 F1 | 	sub	objptr, ##28276
06ce8     6C 25 B0 FD | 	call	#_expr
06cec     00 FA 05 F6 | 	mov	result1, #0
06cf0                 | LR__0610
06cf0     A7 F0 03 F6 | 	mov	ptra, fp
06cf4     B2 00 A0 FD | 	call	#popregs_
06cf8                 | _compile_fun_2p_ret
06cf8     2D 00 64 FD | 	ret
06cfc                 | 
06cfc                 | ' 
06cfc                 | ' function compile_fun_3p() as ulong
06cfc                 | _compile_fun_3p
06cfc     01 4A 05 F6 | 	mov	COUNT_, #1
06d00     A8 00 A0 FD | 	call	#pushregs_
06d04     50 25 B0 FD | 	call	#_expr
06d08                 | ' 
06d08                 | ' expr()
06d08                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d08     37 00 00 FF 
06d0c     74 E4 05 F1 | 	add	objptr, ##28276
06d10     F2 1E 02 FB | 	rdlong	local01, objptr
06d14     03 1E 66 F0 | 	shl	local01, #3
06d18     02 00 00 FF 
06d1c     38 E4 85 F1 | 	sub	objptr, ##1080
06d20     F2 1E 02 F1 | 	add	local01, objptr
06d24     04 1E 06 F1 | 	add	local01, #4
06d28     0F 1F 02 FB | 	rdlong	local01, local01
06d2c     11 1E 0E F2 | 	cmp	local01, #17 wz
06d30     35 00 00 FF 
06d34     3C E4 85 F1 | 	sub	objptr, ##27196
06d38     15 FA 05 56 |  if_ne	mov	result1, #21
06d3c     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d40     37 00 00 FF 
06d44     74 E4 05 F1 | 	add	objptr, ##28276
06d48     F2 1E 02 FB | 	rdlong	local01, objptr
06d4c     01 1E 06 F1 | 	add	local01, #1
06d50     F2 1E 62 FC | 	wrlong	local01, objptr
06d54     37 00 00 FF 
06d58     74 E4 85 F1 | 	sub	objptr, ##28276
06d5c     F8 24 B0 FD | 	call	#_expr
06d60                 | ' expr()
06d60                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d60     37 00 00 FF 
06d64     74 E4 05 F1 | 	add	objptr, ##28276
06d68     F2 1E 02 FB | 	rdlong	local01, objptr
06d6c     03 1E 66 F0 | 	shl	local01, #3
06d70     02 00 00 FF 
06d74     38 E4 85 F1 | 	sub	objptr, ##1080
06d78     F2 1E 02 F1 | 	add	local01, objptr
06d7c     04 1E 06 F1 | 	add	local01, #4
06d80     0F 1F 02 FB | 	rdlong	local01, local01
06d84     11 1E 0E F2 | 	cmp	local01, #17 wz
06d88     35 00 00 FF 
06d8c     3C E4 85 F1 | 	sub	objptr, ##27196
06d90     15 FA 05 56 |  if_ne	mov	result1, #21
06d94     24 00 90 5D |  if_ne	jmp	#LR__0620
06d98     37 00 00 FF 
06d9c     74 E4 05 F1 | 	add	objptr, ##28276
06da0     F2 1E 02 FB | 	rdlong	local01, objptr
06da4     01 1E 06 F1 | 	add	local01, #1
06da8     F2 1E 62 FC | 	wrlong	local01, objptr
06dac     37 00 00 FF 
06db0     74 E4 85 F1 | 	sub	objptr, ##28276
06db4     A0 24 B0 FD | 	call	#_expr
06db8     00 FA 05 F6 | 	mov	result1, #0
06dbc                 | LR__0620
06dbc     A7 F0 03 F6 | 	mov	ptra, fp
06dc0     B2 00 A0 FD | 	call	#popregs_
06dc4                 | _compile_fun_3p_ret
06dc4     2D 00 64 FD | 	ret
06dc8                 | 
06dc8                 | ' 
06dc8                 | ' function compile_fun_4p() as ulong
06dc8                 | _compile_fun_4p
06dc8     01 4A 05 F6 | 	mov	COUNT_, #1
06dcc     A8 00 A0 FD | 	call	#pushregs_
06dd0     84 24 B0 FD | 	call	#_expr
06dd4                 | ' 
06dd4                 | ' expr()
06dd4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06dd4     37 00 00 FF 
06dd8     74 E4 05 F1 | 	add	objptr, ##28276
06ddc     F2 1E 02 FB | 	rdlong	local01, objptr
06de0     03 1E 66 F0 | 	shl	local01, #3
06de4     02 00 00 FF 
06de8     38 E4 85 F1 | 	sub	objptr, ##1080
06dec     F2 1E 02 F1 | 	add	local01, objptr
06df0     04 1E 06 F1 | 	add	local01, #4
06df4     0F 1F 02 FB | 	rdlong	local01, local01
06df8     11 1E 0E F2 | 	cmp	local01, #17 wz
06dfc     35 00 00 FF 
06e00     3C E4 85 F1 | 	sub	objptr, ##27196
06e04     15 FA 05 56 |  if_ne	mov	result1, #21
06e08     D4 00 90 5D |  if_ne	jmp	#LR__0630
06e0c     37 00 00 FF 
06e10     74 E4 05 F1 | 	add	objptr, ##28276
06e14     F2 1E 02 FB | 	rdlong	local01, objptr
06e18     01 1E 06 F1 | 	add	local01, #1
06e1c     F2 1E 62 FC | 	wrlong	local01, objptr
06e20     37 00 00 FF 
06e24     74 E4 85 F1 | 	sub	objptr, ##28276
06e28     2C 24 B0 FD | 	call	#_expr
06e2c                 | ' expr()
06e2c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e2c     37 00 00 FF 
06e30     74 E4 05 F1 | 	add	objptr, ##28276
06e34     F2 1E 02 FB | 	rdlong	local01, objptr
06e38     03 1E 66 F0 | 	shl	local01, #3
06e3c     02 00 00 FF 
06e40     38 E4 85 F1 | 	sub	objptr, ##1080
06e44     F2 1E 02 F1 | 	add	local01, objptr
06e48     04 1E 06 F1 | 	add	local01, #4
06e4c     0F 1F 02 FB | 	rdlong	local01, local01
06e50     11 1E 0E F2 | 	cmp	local01, #17 wz
06e54     35 00 00 FF 
06e58     3C E4 85 F1 | 	sub	objptr, ##27196
06e5c     15 FA 05 56 |  if_ne	mov	result1, #21
06e60     7C 00 90 5D |  if_ne	jmp	#LR__0630
06e64     37 00 00 FF 
06e68     74 E4 05 F1 | 	add	objptr, ##28276
06e6c     F2 1E 02 FB | 	rdlong	local01, objptr
06e70     01 1E 06 F1 | 	add	local01, #1
06e74     F2 1E 62 FC | 	wrlong	local01, objptr
06e78     37 00 00 FF 
06e7c     74 E4 85 F1 | 	sub	objptr, ##28276
06e80     D4 23 B0 FD | 	call	#_expr
06e84                 | ' expr()
06e84                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e84     37 00 00 FF 
06e88     74 E4 05 F1 | 	add	objptr, ##28276
06e8c     F2 1E 02 FB | 	rdlong	local01, objptr
06e90     03 1E 66 F0 | 	shl	local01, #3
06e94     02 00 00 FF 
06e98     38 E4 85 F1 | 	sub	objptr, ##1080
06e9c     F2 1E 02 F1 | 	add	local01, objptr
06ea0     04 1E 06 F1 | 	add	local01, #4
06ea4     0F 1F 02 FB | 	rdlong	local01, local01
06ea8     11 1E 0E F2 | 	cmp	local01, #17 wz
06eac     35 00 00 FF 
06eb0     3C E4 85 F1 | 	sub	objptr, ##27196
06eb4     15 FA 05 56 |  if_ne	mov	result1, #21
06eb8     24 00 90 5D |  if_ne	jmp	#LR__0630
06ebc     37 00 00 FF 
06ec0     74 E4 05 F1 | 	add	objptr, ##28276
06ec4     F2 1E 02 FB | 	rdlong	local01, objptr
06ec8     01 1E 06 F1 | 	add	local01, #1
06ecc     F2 1E 62 FC | 	wrlong	local01, objptr
06ed0     37 00 00 FF 
06ed4     74 E4 85 F1 | 	sub	objptr, ##28276
06ed8     7C 23 B0 FD | 	call	#_expr
06edc     00 FA 05 F6 | 	mov	result1, #0
06ee0                 | LR__0630
06ee0     A7 F0 03 F6 | 	mov	ptra, fp
06ee4     B2 00 A0 FD | 	call	#popregs_
06ee8                 | _compile_fun_4p_ret
06ee8     2D 00 64 FD | 	ret
06eec                 | 
06eec                 | ' 
06eec                 | ' 
06eec                 | ' function compile_fun_5p() as ulong
06eec                 | _compile_fun_5p
06eec     01 4A 05 F6 | 	mov	COUNT_, #1
06ef0     A8 00 A0 FD | 	call	#pushregs_
06ef4     60 23 B0 FD | 	call	#_expr
06ef8                 | ' 
06ef8                 | ' expr()
06ef8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ef8     37 00 00 FF 
06efc     74 E4 05 F1 | 	add	objptr, ##28276
06f00     F2 1E 02 FB | 	rdlong	local01, objptr
06f04     03 1E 66 F0 | 	shl	local01, #3
06f08     02 00 00 FF 
06f0c     38 E4 85 F1 | 	sub	objptr, ##1080
06f10     F2 1E 02 F1 | 	add	local01, objptr
06f14     04 1E 06 F1 | 	add	local01, #4
06f18     0F 1F 02 FB | 	rdlong	local01, local01
06f1c     11 1E 0E F2 | 	cmp	local01, #17 wz
06f20     35 00 00 FF 
06f24     3C E4 85 F1 | 	sub	objptr, ##27196
06f28     15 FA 05 56 |  if_ne	mov	result1, #21
06f2c     2C 01 90 5D |  if_ne	jmp	#LR__0640
06f30     37 00 00 FF 
06f34     74 E4 05 F1 | 	add	objptr, ##28276
06f38     F2 1E 02 FB | 	rdlong	local01, objptr
06f3c     01 1E 06 F1 | 	add	local01, #1
06f40     F2 1E 62 FC | 	wrlong	local01, objptr
06f44     37 00 00 FF 
06f48     74 E4 85 F1 | 	sub	objptr, ##28276
06f4c     08 23 B0 FD | 	call	#_expr
06f50                 | ' expr()
06f50                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f50     37 00 00 FF 
06f54     74 E4 05 F1 | 	add	objptr, ##28276
06f58     F2 1E 02 FB | 	rdlong	local01, objptr
06f5c     03 1E 66 F0 | 	shl	local01, #3
06f60     02 00 00 FF 
06f64     38 E4 85 F1 | 	sub	objptr, ##1080
06f68     F2 1E 02 F1 | 	add	local01, objptr
06f6c     04 1E 06 F1 | 	add	local01, #4
06f70     0F 1F 02 FB | 	rdlong	local01, local01
06f74     11 1E 0E F2 | 	cmp	local01, #17 wz
06f78     35 00 00 FF 
06f7c     3C E4 85 F1 | 	sub	objptr, ##27196
06f80     15 FA 05 56 |  if_ne	mov	result1, #21
06f84     D4 00 90 5D |  if_ne	jmp	#LR__0640
06f88     37 00 00 FF 
06f8c     74 E4 05 F1 | 	add	objptr, ##28276
06f90     F2 1E 02 FB | 	rdlong	local01, objptr
06f94     01 1E 06 F1 | 	add	local01, #1
06f98     F2 1E 62 FC | 	wrlong	local01, objptr
06f9c     37 00 00 FF 
06fa0     74 E4 85 F1 | 	sub	objptr, ##28276
06fa4     B0 22 B0 FD | 	call	#_expr
06fa8                 | ' expr()
06fa8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06fa8     37 00 00 FF 
06fac     74 E4 05 F1 | 	add	objptr, ##28276
06fb0     F2 1E 02 FB | 	rdlong	local01, objptr
06fb4     03 1E 66 F0 | 	shl	local01, #3
06fb8     02 00 00 FF 
06fbc     38 E4 85 F1 | 	sub	objptr, ##1080
06fc0     F2 1E 02 F1 | 	add	local01, objptr
06fc4     04 1E 06 F1 | 	add	local01, #4
06fc8     0F 1F 02 FB | 	rdlong	local01, local01
06fcc     11 1E 0E F2 | 	cmp	local01, #17 wz
06fd0     35 00 00 FF 
06fd4     3C E4 85 F1 | 	sub	objptr, ##27196
06fd8     15 FA 05 56 |  if_ne	mov	result1, #21
06fdc     7C 00 90 5D |  if_ne	jmp	#LR__0640
06fe0     37 00 00 FF 
06fe4     74 E4 05 F1 | 	add	objptr, ##28276
06fe8     F2 1E 02 FB | 	rdlong	local01, objptr
06fec     01 1E 06 F1 | 	add	local01, #1
06ff0     F2 1E 62 FC | 	wrlong	local01, objptr
06ff4     37 00 00 FF 
06ff8     74 E4 85 F1 | 	sub	objptr, ##28276
06ffc     58 22 B0 FD | 	call	#_expr
07000                 | ' expr()
07000                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07000     37 00 00 FF 
07004     74 E4 05 F1 | 	add	objptr, ##28276
07008     F2 1E 02 FB | 	rdlong	local01, objptr
0700c     03 1E 66 F0 | 	shl	local01, #3
07010     02 00 00 FF 
07014     38 E4 85 F1 | 	sub	objptr, ##1080
07018     F2 1E 02 F1 | 	add	local01, objptr
0701c     04 1E 06 F1 | 	add	local01, #4
07020     0F 1F 02 FB | 	rdlong	local01, local01
07024     11 1E 0E F2 | 	cmp	local01, #17 wz
07028     35 00 00 FF 
0702c     3C E4 85 F1 | 	sub	objptr, ##27196
07030     15 FA 05 56 |  if_ne	mov	result1, #21
07034     24 00 90 5D |  if_ne	jmp	#LR__0640
07038     37 00 00 FF 
0703c     74 E4 05 F1 | 	add	objptr, ##28276
07040     F2 1E 02 FB | 	rdlong	local01, objptr
07044     01 1E 06 F1 | 	add	local01, #1
07048     F2 1E 62 FC | 	wrlong	local01, objptr
0704c     37 00 00 FF 
07050     74 E4 85 F1 | 	sub	objptr, ##28276
07054     00 22 B0 FD | 	call	#_expr
07058     00 FA 05 F6 | 	mov	result1, #0
0705c                 | LR__0640
0705c     A7 F0 03 F6 | 	mov	ptra, fp
07060     B2 00 A0 FD | 	call	#popregs_
07064                 | _compile_fun_5p_ret
07064     2D 00 64 FD | 	ret
07068                 | 
07068                 | ' 
07068                 | ' function compile_fun_varp() as ulong 
07068                 | _compile_fun_varp
07068     02 4A 05 F6 | 	mov	COUNT_, #2
0706c     A8 00 A0 FD | 	call	#pushregs_
07070     00 1E 06 F6 | 	mov	local01, #0
07074                 | ' i=0
07074                 | ' if lparts(ct).token<>token_end then
07074     37 00 00 FF 
07078     74 E4 05 F1 | 	add	objptr, ##28276
0707c     F2 20 02 FB | 	rdlong	local02, objptr
07080     03 20 66 F0 | 	shl	local02, #3
07084     02 00 00 FF 
07088     38 E4 85 F1 | 	sub	objptr, ##1080
0708c     F2 20 02 F1 | 	add	local02, objptr
07090     04 20 06 F1 | 	add	local02, #4
07094     10 21 02 FB | 	rdlong	local02, local02
07098     FE 21 0E F2 | 	cmp	local02, #510 wz
0709c     35 00 00 FF 
070a0     3C E4 85 F1 | 	sub	objptr, ##27196
070a4     5C 00 90 AD |  if_e	jmp	#LR__0652
070a8                 | '   do
070a8                 | LR__0650
070a8     AC 21 B0 FD | 	call	#_expr
070ac     01 1E 06 F1 | 	add	local01, #1
070b0                 | '   expr()
070b0                 | '    i+=1
070b0                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
070b0     37 00 00 FF 
070b4     74 E4 05 F1 | 	add	objptr, ##28276
070b8     F2 20 02 FB | 	rdlong	local02, objptr
070bc     03 20 66 F0 | 	shl	local02, #3
070c0     02 00 00 FF 
070c4     38 E4 85 F1 | 	sub	objptr, ##1080
070c8     F2 20 02 F1 | 	add	local02, objptr
070cc     04 20 06 F1 | 	add	local02, #4
070d0     10 21 02 FB | 	rdlong	local02, local02
070d4     11 20 0E F2 | 	cmp	local02, #17 wz
070d8     35 00 00 FF 
070dc     3C E4 85 F1 | 	sub	objptr, ##27196
070e0     20 00 90 5D |  if_ne	jmp	#LR__0651
070e4     37 00 00 FF 
070e8     74 E4 05 F1 | 	add	objptr, ##28276
070ec     F2 20 02 FB | 	rdlong	local02, objptr
070f0     01 20 06 F1 | 	add	local02, #1
070f4     F2 20 62 FC | 	wrlong	local02, objptr
070f8     37 00 00 FF 
070fc     74 E4 85 F1 | 	sub	objptr, ##28276
07100     A4 FF 9F FD | 	jmp	#LR__0650
07104                 | LR__0651
07104                 | LR__0652
07104                 | ' return i
07104     0F FB 01 F6 | 	mov	result1, local01
07108     A7 F0 03 F6 | 	mov	ptra, fp
0710c     B2 00 A0 FD | 	call	#popregs_
07110                 | _compile_fun_varp_ret
07110     2D 00 64 FD | 	ret
07114                 | 
07114                 | ' 
07114                 | ' 
07114                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
07114                 | _compile_print
07114     0B 4A 05 F6 | 	mov	COUNT_, #11
07118     A8 00 A0 FD | 	call	#pushregs_
0711c     00 1E 06 F6 | 	mov	local01, #0
07120     1D 22 06 F6 | 	mov	local03, #29
07124                 | ' t1.result.uresult=0 : t1.result_type=result_uint
07124                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
07124     37 00 00 FF 
07128     74 E4 05 F1 | 	add	objptr, ##28276
0712c     F2 24 02 FB | 	rdlong	local04, objptr
07130     03 24 66 F0 | 	shl	local04, #3
07134     02 00 00 FF 
07138     38 E4 85 F1 | 	sub	objptr, ##1080
0713c     F2 24 02 F1 | 	add	local04, objptr
07140     04 24 06 F1 | 	add	local04, #4
07144     12 25 02 FB | 	rdlong	local04, local04
07148     FE 25 0E F2 | 	cmp	local04, #510 wz
0714c     35 00 00 FF 
07150     3C E4 85 F1 | 	sub	objptr, ##27196
07154     68 01 90 5D |  if_ne	jmp	#LR__0660
07158     20 22 06 F6 | 	mov	local03, #32
0715c     0F 27 02 F6 | 	mov	local05, local01
07160     10 29 02 F6 | 	mov	local06, local02
07164     11 2B 02 F6 | 	mov	local07, local03
07168     4A 00 00 FF 
0716c     AC E4 05 F1 | 	add	objptr, ##38060
07170     F2 2C 02 FB | 	rdlong	local08, objptr
07174     16 2F 02 F6 | 	mov	local09, local08
07178     01 2E 66 F0 | 	shl	local09, #1
0717c     16 2F 02 F1 | 	add	local09, local08
07180     02 2E 66 F0 | 	shl	local09, #2
07184     03 00 00 FF 
07188     00 E4 85 F1 | 	sub	objptr, ##1536
0718c     F2 2E 02 F1 | 	add	local09, objptr
07190     17 27 62 FC | 	wrlong	local05, local09
07194     03 00 00 FF 
07198     00 E4 05 F1 | 	add	objptr, ##1536
0719c     F2 26 02 FB | 	rdlong	local05, objptr
071a0     13 31 02 F6 | 	mov	local10, local05
071a4     01 30 66 F0 | 	shl	local10, #1
071a8     13 31 02 F1 | 	add	local10, local05
071ac     02 30 66 F0 | 	shl	local10, #2
071b0     03 00 00 FF 
071b4     00 E4 85 F1 | 	sub	objptr, ##1536
071b8     F2 30 02 F1 | 	add	local10, objptr
071bc     04 30 06 F1 | 	add	local10, #4
071c0     18 29 62 FC | 	wrlong	local06, local10
071c4     03 00 00 FF 
071c8     00 E4 05 F1 | 	add	objptr, ##1536
071cc     F2 26 02 FB | 	rdlong	local05, objptr
071d0     13 33 02 F6 | 	mov	local11, local05
071d4     01 32 66 F0 | 	shl	local11, #1
071d8     13 33 02 F1 | 	add	local11, local05
071dc     02 32 66 F0 | 	shl	local11, #2
071e0     03 00 00 FF 
071e4     00 E4 85 F1 | 	sub	objptr, ##1536
071e8     F2 32 02 F1 | 	add	local11, objptr
071ec     08 32 06 F1 | 	add	local11, #8
071f0     19 2B 62 FC | 	wrlong	local07, local11
071f4     03 00 00 FF 
071f8     00 E4 05 F1 | 	add	objptr, ##1536
071fc     F2 26 02 FB | 	rdlong	local05, objptr
07200     01 26 06 F1 | 	add	local05, #1
07204     F2 26 62 FC | 	wrlong	local05, objptr
07208     44 22 06 F6 | 	mov	local03, #68
0720c     0F 27 02 F6 | 	mov	local05, local01
07210     10 29 02 F6 | 	mov	local06, local02
07214     11 2B 02 F6 | 	mov	local07, local03
07218     F2 2C 02 FB | 	rdlong	local08, objptr
0721c     16 2F 02 F6 | 	mov	local09, local08
07220     01 2E 66 F0 | 	shl	local09, #1
07224     16 2F 02 F1 | 	add	local09, local08
07228     02 2E 66 F0 | 	shl	local09, #2
0722c     03 00 00 FF 
07230     00 E4 85 F1 | 	sub	objptr, ##1536
07234     F2 2E 02 F1 | 	add	local09, objptr
07238     17 27 62 FC | 	wrlong	local05, local09
0723c     03 00 00 FF 
07240     00 E4 05 F1 | 	add	objptr, ##1536
07244     F2 32 02 FB | 	rdlong	local11, objptr
07248     19 31 02 F6 | 	mov	local10, local11
0724c     01 30 66 F0 | 	shl	local10, #1
07250     19 31 02 F1 | 	add	local10, local11
07254     02 30 66 F0 | 	shl	local10, #2
07258     03 00 00 FF 
0725c     00 E4 85 F1 | 	sub	objptr, ##1536
07260     F2 30 02 F1 | 	add	local10, objptr
07264     04 30 06 F1 | 	add	local10, #4
07268     18 29 62 FC | 	wrlong	local06, local10
0726c     03 00 00 FF 
07270     00 E4 05 F1 | 	add	objptr, ##1536
07274     F2 30 02 FB | 	rdlong	local10, objptr
07278     18 33 02 F6 | 	mov	local11, local10
0727c     01 32 66 F0 | 	shl	local11, #1
07280     18 33 02 F1 | 	add	local11, local10
07284     02 32 66 F0 | 	shl	local11, #2
07288     03 00 00 FF 
0728c     00 E4 85 F1 | 	sub	objptr, ##1536
07290     F2 32 02 F1 | 	add	local11, objptr
07294     08 32 06 F1 | 	add	local11, #8
07298     19 2B 62 FC | 	wrlong	local07, local11
0729c     03 00 00 FF 
072a0     00 E4 05 F1 | 	add	objptr, ##1536
072a4     F2 26 02 FB | 	rdlong	local05, objptr
072a8     01 26 06 F1 | 	add	local05, #1
072ac     F2 26 62 FC | 	wrlong	local05, objptr
072b0     4A 00 00 FF 
072b4     AC E4 85 F1 | 	sub	objptr, ##38060
072b8     00 FA 05 F6 | 	mov	result1, #0
072bc     20 05 90 FD | 	jmp	#LR__0667
072c0                 | LR__0660
072c0                 | ' do
072c0                 | LR__0661
072c0     94 1F B0 FD | 	call	#_expr
072c4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
072c4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
072c4     37 00 00 FF 
072c8     74 E4 05 F1 | 	add	objptr, ##28276
072cc     F2 24 02 FB | 	rdlong	local04, objptr
072d0     03 24 66 F0 | 	shl	local04, #3
072d4     02 00 00 FF 
072d8     38 E4 85 F1 | 	sub	objptr, ##1080
072dc     F2 24 02 F1 | 	add	local04, objptr
072e0     04 24 06 F1 | 	add	local04, #4
072e4     12 2D 02 FB | 	rdlong	local08, local04
072e8     11 2C 0E F2 | 	cmp	local08, #17 wz
072ec     35 00 00 FF 
072f0     3C E4 85 F1 | 	sub	objptr, ##27196
072f4     60 01 90 5D |  if_ne	jmp	#LR__0662
072f8     21 22 06 F6 | 	mov	local03, #33
072fc     0F 27 02 F6 | 	mov	local05, local01
07300     10 29 02 F6 | 	mov	local06, local02
07304     11 2B 02 F6 | 	mov	local07, local03
07308     4A 00 00 FF 
0730c     AC E4 05 F1 | 	add	objptr, ##38060
07310     F2 2C 02 FB | 	rdlong	local08, objptr
07314     16 2F 02 F6 | 	mov	local09, local08
07318     01 2E 66 F0 | 	shl	local09, #1
0731c     16 2F 02 F1 | 	add	local09, local08
07320     02 2E 66 F0 | 	shl	local09, #2
07324     03 00 00 FF 
07328     00 E4 85 F1 | 	sub	objptr, ##1536
0732c     F2 2E 02 F1 | 	add	local09, objptr
07330     17 27 62 FC | 	wrlong	local05, local09
07334     03 00 00 FF 
07338     00 E4 05 F1 | 	add	objptr, ##1536
0733c     F2 32 02 FB | 	rdlong	local11, objptr
07340     19 31 02 F6 | 	mov	local10, local11
07344     01 30 66 F0 | 	shl	local10, #1
07348     19 31 02 F1 | 	add	local10, local11
0734c     02 30 66 F0 | 	shl	local10, #2
07350     03 00 00 FF 
07354     00 E4 85 F1 | 	sub	objptr, ##1536
07358     F2 30 02 F1 | 	add	local10, objptr
0735c     04 30 06 F1 | 	add	local10, #4
07360     18 29 62 FC | 	wrlong	local06, local10
07364     03 00 00 FF 
07368     00 E4 05 F1 | 	add	objptr, ##1536
0736c     F2 26 02 FB | 	rdlong	local05, objptr
07370     13 33 02 F6 | 	mov	local11, local05
07374     01 32 66 F0 | 	shl	local11, #1
07378     13 33 02 F1 | 	add	local11, local05
0737c     02 32 66 F0 | 	shl	local11, #2
07380     03 00 00 FF 
07384     00 E4 85 F1 | 	sub	objptr, ##1536
07388     F2 32 02 F1 | 	add	local11, objptr
0738c     08 32 06 F1 | 	add	local11, #8
07390     19 2B 62 FC | 	wrlong	local07, local11
07394     03 00 00 FF 
07398     00 E4 05 F1 | 	add	objptr, ##1536
0739c     F2 26 02 FB | 	rdlong	local05, objptr
073a0     01 26 06 F1 | 	add	local05, #1
073a4     F2 26 62 FC | 	wrlong	local05, objptr
073a8     44 22 06 F6 | 	mov	local03, #68
073ac     0F 27 02 F6 | 	mov	local05, local01
073b0     10 29 02 F6 | 	mov	local06, local02
073b4     11 2B 02 F6 | 	mov	local07, local03
073b8     F2 2C 02 FB | 	rdlong	local08, objptr
073bc     16 2F 02 F6 | 	mov	local09, local08
073c0     01 2E 66 F0 | 	shl	local09, #1
073c4     16 2F 02 F1 | 	add	local09, local08
073c8     02 2E 66 F0 | 	shl	local09, #2
073cc     03 00 00 FF 
073d0     00 E4 85 F1 | 	sub	objptr, ##1536
073d4     F2 2E 02 F1 | 	add	local09, objptr
073d8     17 27 62 FC | 	wrlong	local05, local09
073dc     03 00 00 FF 
073e0     00 E4 05 F1 | 	add	objptr, ##1536
073e4     F2 32 02 FB | 	rdlong	local11, objptr
073e8     19 31 02 F6 | 	mov	local10, local11
073ec     01 30 66 F0 | 	shl	local10, #1
073f0     19 31 02 F1 | 	add	local10, local11
073f4     02 30 66 F0 | 	shl	local10, #2
073f8     03 00 00 FF 
073fc     00 E4 85 F1 | 	sub	objptr, ##1536
07400     F2 30 02 F1 | 	add	local10, objptr
07404     04 30 06 F1 | 	add	local10, #4
07408     18 29 62 FC | 	wrlong	local06, local10
0740c     03 00 00 FF 
07410     00 E4 05 F1 | 	add	objptr, ##1536
07414     F2 30 02 FB | 	rdlong	local10, objptr
07418     18 33 02 F6 | 	mov	local11, local10
0741c     01 32 66 F0 | 	shl	local11, #1
07420     18 33 02 F1 | 	add	local11, local10
07424     02 32 66 F0 | 	shl	local11, #2
07428     03 00 00 FF 
0742c     00 E4 85 F1 | 	sub	objptr, ##1536
07430     F2 32 02 F1 | 	add	local11, objptr
07434     08 32 06 F1 | 	add	local11, #8
07438     19 2B 62 FC | 	wrlong	local07, local11
0743c     03 00 00 FF 
07440     00 E4 05 F1 | 	add	objptr, ##1536
07444     F2 26 02 FB | 	rdlong	local05, objptr
07448     01 26 06 F1 | 	add	local05, #1
0744c     F2 26 62 FC | 	wrlong	local05, objptr
07450     4A 00 00 FF 
07454     AC E4 85 F1 | 	sub	objptr, ##38060
07458                 | LR__0662
07458                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07458     37 00 00 FF 
0745c     74 E4 05 F1 | 	add	objptr, ##28276
07460     F2 24 02 FB | 	rdlong	local04, objptr
07464     03 24 66 F0 | 	shl	local04, #3
07468     02 00 00 FF 
0746c     38 E4 85 F1 | 	sub	objptr, ##1080
07470     F2 24 02 F1 | 	add	local04, objptr
07474     04 24 06 F1 | 	add	local04, #4
07478     12 2D 02 FB | 	rdlong	local08, local04
0747c     12 2C 0E F2 | 	cmp	local08, #18 wz
07480     35 00 00 FF 
07484     3C E4 85 F1 | 	sub	objptr, ##27196
07488     60 01 90 5D |  if_ne	jmp	#LR__0663
0748c     22 22 06 F6 | 	mov	local03, #34
07490     0F 27 02 F6 | 	mov	local05, local01
07494     10 29 02 F6 | 	mov	local06, local02
07498     11 2B 02 F6 | 	mov	local07, local03
0749c     4A 00 00 FF 
074a0     AC E4 05 F1 | 	add	objptr, ##38060
074a4     F2 2C 02 FB | 	rdlong	local08, objptr
074a8     16 2F 02 F6 | 	mov	local09, local08
074ac     01 2E 66 F0 | 	shl	local09, #1
074b0     16 2F 02 F1 | 	add	local09, local08
074b4     02 2E 66 F0 | 	shl	local09, #2
074b8     03 00 00 FF 
074bc     00 E4 85 F1 | 	sub	objptr, ##1536
074c0     F2 2E 02 F1 | 	add	local09, objptr
074c4     17 27 62 FC | 	wrlong	local05, local09
074c8     03 00 00 FF 
074cc     00 E4 05 F1 | 	add	objptr, ##1536
074d0     F2 32 02 FB | 	rdlong	local11, objptr
074d4     19 31 02 F6 | 	mov	local10, local11
074d8     01 30 66 F0 | 	shl	local10, #1
074dc     19 31 02 F1 | 	add	local10, local11
074e0     02 30 66 F0 | 	shl	local10, #2
074e4     03 00 00 FF 
074e8     00 E4 85 F1 | 	sub	objptr, ##1536
074ec     F2 30 02 F1 | 	add	local10, objptr
074f0     04 30 06 F1 | 	add	local10, #4
074f4     18 29 62 FC | 	wrlong	local06, local10
074f8     03 00 00 FF 
074fc     00 E4 05 F1 | 	add	objptr, ##1536
07500     F2 26 02 FB | 	rdlong	local05, objptr
07504     13 33 02 F6 | 	mov	local11, local05
07508     01 32 66 F0 | 	shl	local11, #1
0750c     13 33 02 F1 | 	add	local11, local05
07510     02 32 66 F0 | 	shl	local11, #2
07514     03 00 00 FF 
07518     00 E4 85 F1 | 	sub	objptr, ##1536
0751c     F2 32 02 F1 | 	add	local11, objptr
07520     08 32 06 F1 | 	add	local11, #8
07524     19 2B 62 FC | 	wrlong	local07, local11
07528     03 00 00 FF 
0752c     00 E4 05 F1 | 	add	objptr, ##1536
07530     F2 26 02 FB | 	rdlong	local05, objptr
07534     01 26 06 F1 | 	add	local05, #1
07538     F2 26 62 FC | 	wrlong	local05, objptr
0753c     44 22 06 F6 | 	mov	local03, #68
07540     0F 27 02 F6 | 	mov	local05, local01
07544     10 29 02 F6 | 	mov	local06, local02
07548     11 2B 02 F6 | 	mov	local07, local03
0754c     F2 2C 02 FB | 	rdlong	local08, objptr
07550     16 2F 02 F6 | 	mov	local09, local08
07554     01 2E 66 F0 | 	shl	local09, #1
07558     16 2F 02 F1 | 	add	local09, local08
0755c     02 2E 66 F0 | 	shl	local09, #2
07560     03 00 00 FF 
07564     00 E4 85 F1 | 	sub	objptr, ##1536
07568     F2 2E 02 F1 | 	add	local09, objptr
0756c     17 27 62 FC | 	wrlong	local05, local09
07570     03 00 00 FF 
07574     00 E4 05 F1 | 	add	objptr, ##1536
07578     F2 32 02 FB | 	rdlong	local11, objptr
0757c     19 31 02 F6 | 	mov	local10, local11
07580     01 30 66 F0 | 	shl	local10, #1
07584     19 31 02 F1 | 	add	local10, local11
07588     02 30 66 F0 | 	shl	local10, #2
0758c     03 00 00 FF 
07590     00 E4 85 F1 | 	sub	objptr, ##1536
07594     F2 30 02 F1 | 	add	local10, objptr
07598     04 30 06 F1 | 	add	local10, #4
0759c     18 29 62 FC | 	wrlong	local06, local10
075a0     03 00 00 FF 
075a4     00 E4 05 F1 | 	add	objptr, ##1536
075a8     F2 30 02 FB | 	rdlong	local10, objptr
075ac     18 33 02 F6 | 	mov	local11, local10
075b0     01 32 66 F0 | 	shl	local11, #1
075b4     18 33 02 F1 | 	add	local11, local10
075b8     02 32 66 F0 | 	shl	local11, #2
075bc     03 00 00 FF 
075c0     00 E4 85 F1 | 	sub	objptr, ##1536
075c4     F2 32 02 F1 | 	add	local11, objptr
075c8     08 32 06 F1 | 	add	local11, #8
075cc     19 2B 62 FC | 	wrlong	local07, local11
075d0     03 00 00 FF 
075d4     00 E4 05 F1 | 	add	objptr, ##1536
075d8     F2 26 02 FB | 	rdlong	local05, objptr
075dc     01 26 06 F1 | 	add	local05, #1
075e0     F2 26 62 FC | 	wrlong	local05, objptr
075e4     4A 00 00 FF 
075e8     AC E4 85 F1 | 	sub	objptr, ##38060
075ec                 | LR__0663
075ec                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
075ec     37 00 00 FF 
075f0     74 E4 05 F1 | 	add	objptr, ##28276
075f4     F2 24 02 FB | 	rdlong	local04, objptr
075f8     03 24 66 F0 | 	shl	local04, #3
075fc     02 00 00 FF 
07600     38 E4 85 F1 | 	sub	objptr, ##1080
07604     F2 24 02 F1 | 	add	local04, objptr
07608     04 24 06 F1 | 	add	local04, #4
0760c     12 2D 02 FB | 	rdlong	local08, local04
07610     FE 2D 0E F2 | 	cmp	local08, #510 wz
07614     35 00 00 FF 
07618     3C E4 85 F1 | 	sub	objptr, ##27196
0761c     B8 00 90 5D |  if_ne	jmp	#LR__0664
07620     44 22 06 F6 | 	mov	local03, #68
07624     0F 27 02 F6 | 	mov	local05, local01
07628     10 29 02 F6 | 	mov	local06, local02
0762c     11 2B 02 F6 | 	mov	local07, local03
07630     4A 00 00 FF 
07634     AC E4 05 F1 | 	add	objptr, ##38060
07638     F2 2C 02 FB | 	rdlong	local08, objptr
0763c     16 2F 02 F6 | 	mov	local09, local08
07640     01 2E 66 F0 | 	shl	local09, #1
07644     16 2F 02 F1 | 	add	local09, local08
07648     02 2E 66 F0 | 	shl	local09, #2
0764c     03 00 00 FF 
07650     00 E4 85 F1 | 	sub	objptr, ##1536
07654     F2 2E 02 F1 | 	add	local09, objptr
07658     17 27 62 FC | 	wrlong	local05, local09
0765c     03 00 00 FF 
07660     00 E4 05 F1 | 	add	objptr, ##1536
07664     F2 32 02 FB | 	rdlong	local11, objptr
07668     19 31 02 F6 | 	mov	local10, local11
0766c     01 30 66 F0 | 	shl	local10, #1
07670     19 31 02 F1 | 	add	local10, local11
07674     02 30 66 F0 | 	shl	local10, #2
07678     03 00 00 FF 
0767c     00 E4 85 F1 | 	sub	objptr, ##1536
07680     F2 30 02 F1 | 	add	local10, objptr
07684     04 30 06 F1 | 	add	local10, #4
07688     18 29 62 FC | 	wrlong	local06, local10
0768c     03 00 00 FF 
07690     00 E4 05 F1 | 	add	objptr, ##1536
07694     F2 30 02 FB | 	rdlong	local10, objptr
07698     18 33 02 F6 | 	mov	local11, local10
0769c     01 32 66 F0 | 	shl	local11, #1
076a0     18 33 02 F1 | 	add	local11, local10
076a4     02 32 66 F0 | 	shl	local11, #2
076a8     03 00 00 FF 
076ac     00 E4 85 F1 | 	sub	objptr, ##1536
076b0     F2 32 02 F1 | 	add	local11, objptr
076b4     08 32 06 F1 | 	add	local11, #8
076b8     19 2B 62 FC | 	wrlong	local07, local11
076bc     03 00 00 FF 
076c0     00 E4 05 F1 | 	add	objptr, ##1536
076c4     F2 26 02 FB | 	rdlong	local05, objptr
076c8     01 26 06 F1 | 	add	local05, #1
076cc     F2 26 62 FC | 	wrlong	local05, objptr
076d0     4A 00 00 FF 
076d4     AC E4 85 F1 | 	sub	objptr, ##38060
076d8                 | LR__0664
076d8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
076d8     37 00 00 FF 
076dc     74 E4 05 F1 | 	add	objptr, ##28276
076e0     F2 24 02 FB | 	rdlong	local04, objptr
076e4     03 24 66 F0 | 	shl	local04, #3
076e8     02 00 00 FF 
076ec     38 E4 85 F1 | 	sub	objptr, ##1080
076f0     F2 24 02 F1 | 	add	local04, objptr
076f4     04 24 06 F1 | 	add	local04, #4
076f8     12 2D 02 FB | 	rdlong	local08, local04
076fc     11 2C 0E F2 | 	cmp	local08, #17 wz
07700     35 00 00 FF 
07704     3C E4 85 F1 | 	sub	objptr, ##27196
07708     6C 00 90 AD |  if_e	jmp	#LR__0665
0770c     37 00 00 FF 
07710     74 E4 05 F1 | 	add	objptr, ##28276
07714     F2 2C 02 FB | 	rdlong	local08, objptr
07718     03 2C 66 F0 | 	shl	local08, #3
0771c     02 00 00 FF 
07720     38 E4 85 F1 | 	sub	objptr, ##1080
07724     F2 2C 02 F1 | 	add	local08, objptr
07728     04 2C 06 F1 | 	add	local08, #4
0772c     16 2D 02 FB | 	rdlong	local08, local08
07730     12 2C 0E F2 | 	cmp	local08, #18 wz
07734     35 00 00 FF 
07738     3C E4 85 F1 | 	sub	objptr, ##27196
0773c     38 00 90 AD |  if_e	jmp	#LR__0665
07740     37 00 00 FF 
07744     74 E4 05 F1 | 	add	objptr, ##28276
07748     F2 32 02 FB | 	rdlong	local11, objptr
0774c     03 32 66 F0 | 	shl	local11, #3
07750     02 00 00 FF 
07754     38 E4 85 F1 | 	sub	objptr, ##1080
07758     F2 32 02 F1 | 	add	local11, objptr
0775c     04 32 06 F1 | 	add	local11, #4
07760     19 33 02 FB | 	rdlong	local11, local11
07764     FE 33 0E F2 | 	cmp	local11, #510 wz
07768     35 00 00 FF 
0776c     3C E4 85 F1 | 	sub	objptr, ##27196
07770     16 FA 05 56 |  if_ne	mov	result1, #22
07774     68 00 90 5D |  if_ne	jmp	#LR__0667
07778                 | LR__0665
07778     37 00 00 FF 
0777c     74 E4 05 F1 | 	add	objptr, ##28276
07780     F2 24 02 FB | 	rdlong	local04, objptr
07784     01 24 06 F1 | 	add	local04, #1
07788     F2 24 62 FC | 	wrlong	local04, objptr
0778c     03 24 66 F0 | 	shl	local04, #3
07790     02 00 00 FF 
07794     38 E4 85 F1 | 	sub	objptr, ##1080
07798     F2 24 02 F1 | 	add	local04, objptr
0779c     04 24 06 F1 | 	add	local04, #4
077a0     12 2D 02 FB | 	rdlong	local08, local04
077a4     FE 2D 0E F2 | 	cmp	local08, #510 wz
077a8     35 00 00 FF 
077ac     3C E4 85 F1 | 	sub	objptr, ##27196
077b0     28 00 90 AD |  if_e	jmp	#LR__0666
077b4     37 00 00 FF 
077b8     74 E4 05 F1 | 	add	objptr, ##28276
077bc     F2 32 02 FB | 	rdlong	local11, objptr
077c0     0E 00 00 FF 
077c4     1C E4 05 F1 | 	add	objptr, ##7196
077c8     F2 30 02 FB | 	rdlong	local10, objptr
077cc     45 00 00 FF 
077d0     90 E4 85 F1 | 	sub	objptr, ##35472
077d4     18 33 52 F2 | 	cmps	local11, local10 wc
077d8     E4 FA 9F CD |  if_b	jmp	#LR__0661
077dc                 | LR__0666
077dc                 | ' return 0
077dc     00 FA 05 F6 | 	mov	result1, #0
077e0                 | LR__0667
077e0     A7 F0 03 F6 | 	mov	ptra, fp
077e4     B2 00 A0 FD | 	call	#popregs_
077e8                 | _compile_print_ret
077e8     2D 00 64 FD | 	ret
077ec                 | 
077ec                 | ' 
077ec                 | ' function compile_if() as ulong  
077ec                 | _compile_if
077ec     05 4A 05 F6 | 	mov	COUNT_, #5
077f0     A8 00 A0 FD | 	call	#pushregs_
077f4                 | _compile_if_enter
077f4     60 1A B0 FD | 	call	#_expr
077f8                 | ' expr()
077f8                 | ' return 0
077f8     37 00 00 FF 
077fc     74 E4 05 F1 | 	add	objptr, ##28276
07800     F2 FA 01 FB | 	rdlong	result1, objptr
07804     01 FA 05 F1 | 	add	result1, #1
07808     F2 FA 61 FC | 	wrlong	result1, objptr
0780c     58 22 06 F6 | 	mov	local03, #88
07810     0F 25 02 F6 | 	mov	local04, local01
07814     10 27 02 F6 | 	mov	local05, local02
07818     11 1F 02 F6 | 	mov	local01, local03
0781c     13 00 00 FF 
07820     38 E4 05 F1 | 	add	objptr, ##9784
07824     F2 12 02 FB | 	rdlong	arg01, objptr
07828     09 FB 01 F6 | 	mov	result1, arg01
0782c     01 FA 65 F0 | 	shl	result1, #1
07830     09 FB 01 F1 | 	add	result1, arg01
07834     02 FA 65 F0 | 	shl	result1, #2
07838     03 00 00 FF 
0783c     00 E4 85 F1 | 	sub	objptr, ##1536
07840     F2 FA 01 F1 | 	add	result1, objptr
07844     FD 24 62 FC | 	wrlong	local04, result1
07848     03 00 00 FF 
0784c     00 E4 05 F1 | 	add	objptr, ##1536
07850     F2 12 02 FB | 	rdlong	arg01, objptr
07854     09 25 02 F6 | 	mov	local04, arg01
07858     01 24 66 F0 | 	shl	local04, #1
0785c     09 25 02 F1 | 	add	local04, arg01
07860     02 24 66 F0 | 	shl	local04, #2
07864     03 00 00 FF 
07868     00 E4 85 F1 | 	sub	objptr, ##1536
0786c     F2 24 02 F1 | 	add	local04, objptr
07870     04 24 06 F1 | 	add	local04, #4
07874     12 27 62 FC | 	wrlong	local05, local04
07878     03 00 00 FF 
0787c     00 E4 05 F1 | 	add	objptr, ##1536
07880     F2 24 02 FB | 	rdlong	local04, objptr
07884     12 27 02 F6 | 	mov	local05, local04
07888     01 26 66 F0 | 	shl	local05, #1
0788c     12 27 02 F1 | 	add	local05, local04
07890     02 26 66 F0 | 	shl	local05, #2
07894     03 00 00 FF 
07898     00 E4 85 F1 | 	sub	objptr, ##1536
0789c     F2 26 02 F1 | 	add	local05, objptr
078a0     08 26 06 F1 | 	add	local05, #8
078a4     13 1F 62 FC | 	wrlong	local01, local05
078a8     03 00 00 FF 
078ac     00 E4 05 F1 | 	add	objptr, ##1536
078b0     F2 24 02 FB | 	rdlong	local04, objptr
078b4     01 24 06 F1 | 	add	local04, #1
078b8     F2 24 62 FC | 	wrlong	local04, objptr
078bc                 | ' 
078bc                 | ' 'print "In compile_if"
078bc                 | ' compile_fun_1p()
078bc                 | ' cmd=lparts(ct).token : ct+=1
078bc                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
078bc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
078bc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
078bc     13 00 00 FF 
078c0     38 E4 85 F1 | 	sub	objptr, ##9784
078c4     F2 26 02 FB | 	rdlong	local05, objptr
078c8     01 26 06 F1 | 	add	local05, #1
078cc     03 26 66 F0 | 	shl	local05, #3
078d0     02 00 00 FF 
078d4     38 E4 85 F1 | 	sub	objptr, ##1080
078d8     F2 26 02 F1 | 	add	local05, objptr
078dc     13 13 02 FB | 	rdlong	arg01, local05
078e0     35 00 00 FF 
078e4     3C E4 85 F1 | 	sub	objptr, ##27196
078e8                 | ' 
078e8                 | ' select case s
078e8     72 01 00 FF 
078ec     84 15 06 F6 | 	mov	arg02, ##@LR__4912
078f0     00 75 B1 FD | 	call	#__system___string_cmp
078f4     00 FA 0D F2 | 	cmp	result1, #0 wz
078f8     1B FA 05 A6 |  if_e	mov	result1, #27
078fc     00 FA 05 56 |  if_ne	mov	result1, #0
07900     00 FA 0D F2 | 	cmp	result1, #0 wz
07904     0C 00 90 AD |  if_e	jmp	#LR__0670
07908     05 12 06 F6 | 	mov	arg01, #5
0790c     88 ED BF FD | 	call	#_compile_immediate_assign
07910     08 00 90 FD | 	jmp	#LR__0671
07914                 | LR__0670
07914     05 12 06 F6 | 	mov	arg01, #5
07918     80 E3 BF FD | 	call	#_compile_immediate
0791c                 | LR__0671
0791c                 | ' 
0791c                 | ' 
0791c                 | ' return 0
0791c     00 FA 05 F6 | 	mov	result1, #0
07920     A7 F0 03 F6 | 	mov	ptra, fp
07924     B2 00 A0 FD | 	call	#popregs_
07928                 | _compile_if_ret
07928     2D 00 64 FD | 	ret
0792c                 | 
0792c                 | ' 
0792c                 | ' function compile_else() as ulong  
0792c                 | _compile_else
0792c     05 4A 05 F6 | 	mov	COUNT_, #5
07930     A8 00 A0 FD | 	call	#pushregs_
07934                 | _compile_else_enter
07934     5A 22 06 F6 | 	mov	local03, #90
07938     0F 25 02 F6 | 	mov	local04, local01
0793c     10 27 02 F6 | 	mov	local05, local02
07940     11 1F 02 F6 | 	mov	local01, local03
07944     4A 00 00 FF 
07948     AC E4 05 F1 | 	add	objptr, ##38060
0794c     F2 12 02 FB | 	rdlong	arg01, objptr
07950     09 FB 01 F6 | 	mov	result1, arg01
07954     01 FA 65 F0 | 	shl	result1, #1
07958     09 FB 01 F1 | 	add	result1, arg01
0795c     02 FA 65 F0 | 	shl	result1, #2
07960     03 00 00 FF 
07964     00 E4 85 F1 | 	sub	objptr, ##1536
07968     F2 FA 01 F1 | 	add	result1, objptr
0796c     FD 24 62 FC | 	wrlong	local04, result1
07970     03 00 00 FF 
07974     00 E4 05 F1 | 	add	objptr, ##1536
07978     F2 FA 01 FB | 	rdlong	result1, objptr
0797c     FD 24 02 F6 | 	mov	local04, result1
07980     01 24 66 F0 | 	shl	local04, #1
07984     FD 24 02 F1 | 	add	local04, result1
07988     02 24 66 F0 | 	shl	local04, #2
0798c     03 00 00 FF 
07990     00 E4 85 F1 | 	sub	objptr, ##1536
07994     F2 24 02 F1 | 	add	local04, objptr
07998     04 24 06 F1 | 	add	local04, #4
0799c     12 27 62 FC | 	wrlong	local05, local04
079a0     03 00 00 FF 
079a4     00 E4 05 F1 | 	add	objptr, ##1536
079a8     F2 24 02 FB | 	rdlong	local04, objptr
079ac     12 27 02 F6 | 	mov	local05, local04
079b0     01 26 66 F0 | 	shl	local05, #1
079b4     12 27 02 F1 | 	add	local05, local04
079b8     02 26 66 F0 | 	shl	local05, #2
079bc     03 00 00 FF 
079c0     00 E4 85 F1 | 	sub	objptr, ##1536
079c4     F2 26 02 F1 | 	add	local05, objptr
079c8     08 26 06 F1 | 	add	local05, #8
079cc     13 1F 62 FC | 	wrlong	local01, local05
079d0     03 00 00 FF 
079d4     00 E4 05 F1 | 	add	objptr, ##1536
079d8     F2 24 02 FB | 	rdlong	local04, objptr
079dc     01 24 06 F1 | 	add	local04, #1
079e0     F2 24 62 FC | 	wrlong	local04, objptr
079e4                 | ' 
079e4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
079e4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
079e4     13 00 00 FF 
079e8     38 E4 85 F1 | 	sub	objptr, ##9784
079ec     F2 26 02 FB | 	rdlong	local05, objptr
079f0     01 26 06 F1 | 	add	local05, #1
079f4     03 26 66 F0 | 	shl	local05, #3
079f8     02 00 00 FF 
079fc     38 E4 85 F1 | 	sub	objptr, ##1080
07a00     F2 26 02 F1 | 	add	local05, objptr
07a04     13 13 02 FB | 	rdlong	arg01, local05
07a08     35 00 00 FF 
07a0c     3C E4 85 F1 | 	sub	objptr, ##27196
07a10                 | ' 
07a10                 | ' select case s
07a10     72 01 00 FF 
07a14     84 15 06 F6 | 	mov	arg02, ##@LR__4912
07a18     D8 73 B1 FD | 	call	#__system___string_cmp
07a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
07a20     1B FA 05 A6 |  if_e	mov	result1, #27
07a24     00 FA 05 56 |  if_ne	mov	result1, #0
07a28     00 FA 0D F2 | 	cmp	result1, #0 wz
07a2c     0C 00 90 AD |  if_e	jmp	#LR__0680
07a30     05 12 06 F6 | 	mov	arg01, #5
07a34     60 EC BF FD | 	call	#_compile_immediate_assign
07a38     08 00 90 FD | 	jmp	#LR__0681
07a3c                 | LR__0680
07a3c     05 12 06 F6 | 	mov	arg01, #5
07a40     58 E2 BF FD | 	call	#_compile_immediate
07a44                 | LR__0681
07a44                 | ' 
07a44                 | ' 
07a44                 | ' return 0
07a44     00 FA 05 F6 | 	mov	result1, #0
07a48     A7 F0 03 F6 | 	mov	ptra, fp
07a4c     B2 00 A0 FD | 	call	#popregs_
07a50                 | _compile_else_ret
07a50     2D 00 64 FD | 	ret
07a54                 | 
07a54                 | ' 
07a54                 | ' 
07a54                 | ' function compile_dim() as ulong  
07a54                 | _compile_dim
07a54     11 4A 05 F6 | 	mov	COUNT_, #17
07a58     A8 00 A0 FD | 	call	#pushregs_
07a5c     01 1E 06 F6 | 	mov	local01, #1
07a60     01 20 06 F6 | 	mov	local02, #1
07a64     01 22 06 F6 | 	mov	local03, #1
07a68                 | ' 
07a68                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07a68                 | ' 
07a68                 | ' if isname(lparts(ct).part$) then 
07a68     37 00 00 FF 
07a6c     74 E4 05 F1 | 	add	objptr, ##28276
07a70     F2 18 02 FB | 	rdlong	arg04, objptr
07a74     03 18 66 F0 | 	shl	arg04, #3
07a78     02 00 00 FF 
07a7c     38 E4 85 F1 | 	sub	objptr, ##1080
07a80     F2 18 02 F1 | 	add	arg04, objptr
07a84     0C 13 02 FB | 	rdlong	arg01, arg04
07a88     35 00 00 FF 
07a8c     3C E4 85 F1 | 	sub	objptr, ##27196
07a90     A4 D2 BF FD | 	call	#_isname
07a94     00 FA 0D F2 | 	cmp	result1, #0 wz
07a98     AC 05 90 AD |  if_e	jmp	#LR__0714
07a9c     37 00 00 FF 
07aa0     74 E4 05 F1 | 	add	objptr, ##28276
07aa4     F2 24 02 FB | 	rdlong	local04, objptr
07aa8     03 24 66 F0 | 	shl	local04, #3
07aac     02 00 00 FF 
07ab0     38 E4 85 F1 | 	sub	objptr, ##1080
07ab4     F2 24 02 F1 | 	add	local04, objptr
07ab8     12 27 02 FB | 	rdlong	local05, local04
07abc     01 28 66 F6 | 	neg	local06, #1
07ac0                 | '   varname2$=lparts(ct).part$ 
07ac0                 | '   j=-1
07ac0                 | '   if varnum>0 then
07ac0     04 E4 85 F1 | 	sub	objptr, #4
07ac4     F2 2A 02 FB | 	rdlong	local07, objptr
07ac8     35 00 00 FF 
07acc     38 E4 85 F1 | 	sub	objptr, ##27192
07ad0     01 2A 56 F2 | 	cmps	local07, #1 wc
07ad4     58 00 90 CD |  if_b	jmp	#LR__0692
07ad8                 | '  '   print "in dim, varnum=";varnum
07ad8                 | '     for i=0 to varnum-1
07ad8     00 2C 06 F6 | 	mov	local08, #0
07adc     35 00 00 FF 
07ae0     38 E4 05 F1 | 	add	objptr, ##27192
07ae4     F2 2E 02 FB | 	rdlong	local09, objptr
07ae8     35 00 00 FF 
07aec     38 E4 85 F1 | 	sub	objptr, ##27192
07af0                 | LR__0690
07af0     17 2D 52 F2 | 	cmps	local08, local09 wc
07af4     38 00 90 3D |  if_ae	jmp	#LR__0691
07af8                 | '       if variables(i).name=varname2$ then j=i : exit
07af8     16 25 02 F6 | 	mov	local04, local08
07afc     04 24 66 F0 | 	shl	local04, #4
07b00     15 00 00 FF 
07b04     28 E4 05 F1 | 	add	objptr, ##10792
07b08     F2 24 02 F1 | 	add	local04, objptr
07b0c     12 13 02 FB | 	rdlong	arg01, local04
07b10     13 15 02 F6 | 	mov	arg02, local05
07b14     15 00 00 FF 
07b18     28 E4 85 F1 | 	sub	objptr, ##10792
07b1c     D4 72 B1 FD | 	call	#__system___string_cmp
07b20     00 FA 0D F2 | 	cmp	result1, #0 wz
07b24     16 29 02 A6 |  if_e	mov	local06, local08
07b28     01 2C 06 51 |  if_ne	add	local08, #1
07b2c     C0 FF 9F 5D |  if_ne	jmp	#LR__0690
07b30                 | LR__0691
07b30                 | LR__0692
07b30                 | ' '  if j<>-1 then printerror (42) : return 42
07b30                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07b30     FF FF 7F FF 
07b34     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07b38     35 00 00 AF 
07b3c     38 E4 05 A1 |  if_e	add	objptr, ##27192
07b40     F2 28 02 AB |  if_e	rdlong	local06, objptr
07b44     35 00 00 AF 
07b48     38 E4 85 A1 |  if_e	sub	objptr, ##27192
07b4c     78 00 90 AD |  if_e	jmp	#LR__0693
07b50     00 12 06 F6 | 	mov	arg01, #0
07b54     0C CC B1 FD | 	call	#__system___getiolock_0485
07b58     FD 12 02 F6 | 	mov	arg01, result1
07b5c     6C 72 B1 FD | 	call	#__system___lockmem
07b60     74 01 00 FF 
07b64     E1 14 06 F6 | 	mov	arg02, ##@LR__5100
07b68     00 12 06 F6 | 	mov	arg01, #0
07b6c     00 16 06 F6 | 	mov	arg03, #0
07b70     4C 7F B1 FD | 	call	#__system___basic_print_string
07b74     59 00 00 FF 
07b78     D0 E5 05 F1 | 	add	objptr, ##46032
07b7c     F2 14 02 FB | 	rdlong	arg02, objptr
07b80     59 00 00 FF 
07b84     D0 E5 85 F1 | 	sub	objptr, ##46032
07b88     00 12 06 F6 | 	mov	arg01, #0
07b8c     00 16 06 F6 | 	mov	arg03, #0
07b90     0A 18 06 F6 | 	mov	arg04, #10
07b94     AC 7F B1 FD | 	call	#__system___basic_print_unsigned
07b98     74 01 00 FF 
07b9c     EF 14 06 F6 | 	mov	arg02, ##@LR__5101
07ba0     00 12 06 F6 | 	mov	arg01, #0
07ba4     00 16 06 F6 | 	mov	arg03, #0
07ba8     14 7F B1 FD | 	call	#__system___basic_print_string
07bac     00 12 06 F6 | 	mov	arg01, #0
07bb0     0A 14 06 F6 | 	mov	arg02, #10
07bb4     00 16 06 F6 | 	mov	arg03, #0
07bb8     AC 7E B1 FD | 	call	#__system___basic_print_char
07bbc     00 12 06 F6 | 	mov	arg01, #0
07bc0     A0 CB B1 FD | 	call	#__system___getiolock_0485
07bc4     FD 00 68 FC | 	wrlong	#0, result1
07bc8                 | LR__0693
07bc8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07bc8     37 00 00 FF 
07bcc     74 E4 05 F1 | 	add	objptr, ##28276
07bd0     F2 18 02 FB | 	rdlong	arg04, objptr
07bd4     01 18 06 F1 | 	add	arg04, #1
07bd8     03 18 66 F0 | 	shl	arg04, #3
07bdc     02 00 00 FF 
07be0     38 E4 85 F1 | 	sub	objptr, ##1080
07be4     F2 18 02 F1 | 	add	arg04, objptr
07be8     0C 13 02 FB | 	rdlong	arg01, arg04
07bec     74 01 00 FF 
07bf0     10 15 06 F6 | 	mov	arg02, ##@LR__5102
07bf4     35 00 00 FF 
07bf8     3C E4 85 F1 | 	sub	objptr, ##27196
07bfc     F4 71 B1 FD | 	call	#__system___string_cmp
07c00     00 FA 0D F2 | 	cmp	result1, #0 wz
07c04     50 00 90 AD |  if_e	jmp	#LR__0694
07c08     37 00 00 FF 
07c0c     74 E4 05 F1 | 	add	objptr, ##28276
07c10     F2 2E 02 FB | 	rdlong	local09, objptr
07c14     01 2E 06 F1 | 	add	local09, #1
07c18     03 2E 66 F0 | 	shl	local09, #3
07c1c     02 00 00 FF 
07c20     38 E4 85 F1 | 	sub	objptr, ##1080
07c24     F2 2E 02 F1 | 	add	local09, objptr
07c28     17 13 02 FB | 	rdlong	arg01, local09
07c2c     74 01 00 FF 
07c30     12 15 06 F6 | 	mov	arg02, ##@LR__5103
07c34     35 00 00 FF 
07c38     3C E4 85 F1 | 	sub	objptr, ##27196
07c3c     B4 71 B1 FD | 	call	#__system___string_cmp
07c40     00 FA 0D F2 | 	cmp	result1, #0 wz
07c44     10 00 90 AD |  if_e	jmp	#LR__0694
07c48     2B 12 06 F6 | 	mov	arg01, #43
07c4c     D4 2C B1 FD | 	call	#_printerror
07c50     2B FA 05 F6 | 	mov	result1, #43
07c54     00 05 90 FD | 	jmp	#LR__0716
07c58                 | LR__0694
07c58                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07c58     37 00 00 FF 
07c5c     74 E4 05 F1 | 	add	objptr, ##28276
07c60     F2 14 02 FB | 	rdlong	arg02, objptr
07c64     01 14 06 F1 | 	add	arg02, #1
07c68     03 14 66 F0 | 	shl	arg02, #3
07c6c     02 00 00 FF 
07c70     38 E4 85 F1 | 	sub	objptr, ##1080
07c74     F2 14 02 F1 | 	add	arg02, objptr
07c78     0A 13 02 FB | 	rdlong	arg01, arg02
07c7c     74 01 00 FF 
07c80     15 15 06 F6 | 	mov	arg02, ##@LR__5104
07c84     35 00 00 FF 
07c88     3C E4 85 F1 | 	sub	objptr, ##27196
07c8c     64 71 B1 FD | 	call	#__system___string_cmp
07c90     00 FA 0D F2 | 	cmp	result1, #0 wz
07c94     37 00 00 AF 
07c98     74 E4 05 A1 |  if_e	add	objptr, ##28276
07c9c     F2 30 02 AB |  if_e	rdlong	local10, objptr
07ca0     37 00 00 AF 
07ca4     74 E4 85 A1 |  if_e	sub	objptr, ##28276
07ca8     01 30 06 A1 |  if_e	add	local10, #1
07cac     7C 01 90 AD |  if_e	jmp	#LR__0700
07cb0     37 00 00 FF 
07cb4     74 E4 05 F1 | 	add	objptr, ##28276
07cb8     F2 30 02 FB | 	rdlong	local10, objptr
07cbc     37 00 00 FF 
07cc0     74 E4 85 F1 | 	sub	objptr, ##28276
07cc4     02 30 06 F1 | 	add	local10, #2
07cc8     00 32 06 F6 | 	mov	local11, #0
07ccc                 | '   l=ct+2 : m=0 : do
07ccc                 | LR__0695
07ccc                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07ccc                 | '     if isdec(lparts(l).part$) then 
07ccc     18 25 02 F6 | 	mov	local04, local10
07cd0     03 24 66 F0 | 	shl	local04, #3
07cd4     35 00 00 FF 
07cd8     3C E4 05 F1 | 	add	objptr, ##27196
07cdc     F2 24 02 F1 | 	add	local04, objptr
07ce0     12 13 02 FB | 	rdlong	arg01, local04
07ce4     35 00 00 FF 
07ce8     3C E4 85 F1 | 	sub	objptr, ##27196
07cec     EC D6 BF FD | 	call	#_isdec
07cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cf4     44 00 90 AD |  if_e	jmp	#LR__0696
07cf8     19 35 02 F6 | 	mov	local12, local11
07cfc     0F 35 06 F1 | 	add	local12, #local01
07d00     18 2F 02 F6 | 	mov	local09, local10
07d04     03 2E 66 F0 | 	shl	local09, #3
07d08     35 00 00 FF 
07d0c     3C E4 05 F1 | 	add	objptr, ##27196
07d10     F2 2E 02 F1 | 	add	local09, objptr
07d14     17 13 02 FB | 	rdlong	arg01, local09
07d18     00 14 06 F6 | 	mov	arg02, #0
07d1c     35 00 00 FF 
07d20     3C E4 85 F1 | 	sub	objptr, ##27196
07d24     64 A2 B1 FD | 	call	#__system____builtin_atoi
07d28     FD 36 02 F6 | 	mov	local13, result1
07d2c                 | 	'.live	local13
07d2c                 | 	'.live	local12
07d2c     00 34 8E F9 | 	altd	local12, #0
07d30     1B 35 02 F6 | 	mov	local12, local13
07d34     01 32 06 F1 | 	add	local11, #1
07d38     10 00 90 FD | 	jmp	#LR__0697
07d3c                 | LR__0696
07d3c     11 12 06 F6 | 	mov	arg01, #17
07d40     E0 2B B1 FD | 	call	#_printerror
07d44                 | '       printerror (17)  : return(17)
07d44     11 FA 05 F6 | 	mov	result1, #17
07d48     0C 04 90 FD | 	jmp	#LR__0716
07d4c                 | LR__0697
07d4c                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07d4c     18 25 02 F6 | 	mov	local04, local10
07d50     01 24 06 F1 | 	add	local04, #1
07d54     03 24 66 F0 | 	shl	local04, #3
07d58     35 00 00 FF 
07d5c     3C E4 05 F1 | 	add	objptr, ##27196
07d60     F2 24 02 F1 | 	add	local04, objptr
07d64     12 13 02 FB | 	rdlong	arg01, local04
07d68     74 01 00 FF 
07d6c     18 15 06 F6 | 	mov	arg02, ##@LR__5105
07d70     35 00 00 FF 
07d74     3C E4 85 F1 | 	sub	objptr, ##27196
07d78     78 70 B1 FD | 	call	#__system___string_cmp
07d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d80     48 00 90 AD |  if_e	jmp	#LR__0698
07d84     18 37 02 F6 | 	mov	local13, local10
07d88     01 36 06 F1 | 	add	local13, #1
07d8c     03 36 66 F0 | 	shl	local13, #3
07d90     35 00 00 FF 
07d94     3C E4 05 F1 | 	add	objptr, ##27196
07d98     F2 36 02 F1 | 	add	local13, objptr
07d9c     1B 13 02 FB | 	rdlong	arg01, local13
07da0     74 01 00 FF 
07da4     1A 15 06 F6 | 	mov	arg02, ##@LR__5106
07da8     35 00 00 FF 
07dac     3C E4 85 F1 | 	sub	objptr, ##27196
07db0     40 70 B1 FD | 	call	#__system___string_cmp
07db4     00 FA 0D F2 | 	cmp	result1, #0 wz
07db8     10 00 90 AD |  if_e	jmp	#LR__0698
07dbc     2C 12 06 F6 | 	mov	arg01, #44
07dc0     60 2B B1 FD | 	call	#_printerror
07dc4     2C FA 05 F6 | 	mov	result1, #44
07dc8     8C 03 90 FD | 	jmp	#LR__0716
07dcc                 | LR__0698
07dcc     02 30 06 F1 | 	add	local10, #2
07dd0     18 25 02 F6 | 	mov	local04, local10
07dd4     01 24 86 F1 | 	sub	local04, #1
07dd8     03 24 66 F0 | 	shl	local04, #3
07ddc     35 00 00 FF 
07de0     3C E4 05 F1 | 	add	objptr, ##27196
07de4     F2 24 02 F1 | 	add	local04, objptr
07de8     12 13 02 FB | 	rdlong	arg01, local04
07dec     74 01 00 FF 
07df0     1C 15 06 F6 | 	mov	arg02, ##@LR__5107
07df4     35 00 00 FF 
07df8     3C E4 85 F1 | 	sub	objptr, ##27196
07dfc     F4 6F B1 FD | 	call	#__system___string_cmp
07e00     00 FA 0D F2 | 	cmp	result1, #0 wz
07e04     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07e08     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0695
07e0c                 | '   if m>3 then printerror(45): return(45)
07e0c     04 32 56 F2 | 	cmps	local11, #4 wc
07e10     10 00 90 CD |  if_b	jmp	#LR__0699
07e14     2D 12 06 F6 | 	mov	arg01, #45
07e18     08 2B B1 FD | 	call	#_printerror
07e1c     2D FA 05 F6 | 	mov	result1, #45
07e20     34 03 90 FD | 	jmp	#LR__0716
07e24                 | LR__0699
07e24     00 39 06 F6 | 	mov	local14, #256
07e28     0C 3A 06 F6 | 	mov	local15, #12
07e2c                 | LR__0700
07e2c                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07e2c                 | '   arraytype=array_no_type : esize=12
07e2c                 | ' 1350 
07e2c                 | '   if lparts(l).part$="as" then
07e2c     18 25 02 F6 | 	mov	local04, local10
07e30     03 24 66 F0 | 	shl	local04, #3
07e34     35 00 00 FF 
07e38     3C E4 05 F1 | 	add	objptr, ##27196
07e3c     F2 24 02 F1 | 	add	local04, objptr
07e40     12 13 02 FB | 	rdlong	arg01, local04
07e44     74 01 00 FF 
07e48     1E 15 06 F6 | 	mov	arg02, ##@LR__5108
07e4c     35 00 00 FF 
07e50     3C E4 85 F1 | 	sub	objptr, ##27196
07e54     9C 6F B1 FD | 	call	#__system___string_cmp
07e58     00 FA 0D F2 | 	cmp	result1, #0 wz
07e5c     F8 01 90 5D |  if_ne	jmp	#LR__0715
07e60                 | '     select case lparts(l+1).part$
07e60     18 35 02 F6 | 	mov	local12, local10
07e64     01 34 06 F1 | 	add	local12, #1
07e68     03 34 66 F0 | 	shl	local12, #3
07e6c     35 00 00 FF 
07e70     3C E4 05 F1 | 	add	objptr, ##27196
07e74     F2 34 02 F1 | 	add	local12, objptr
07e78     1A 3D 02 FB | 	rdlong	local16, local12
07e7c     74 01 00 FF 
07e80     21 15 06 F6 | 	mov	arg02, ##@LR__5109
07e84     1E 13 02 F6 | 	mov	arg01, local16
07e88     35 00 00 FF 
07e8c     3C E4 85 F1 | 	sub	objptr, ##27196
07e90     60 6F B1 FD | 	call	#__system___string_cmp
07e94     00 FA 0D F2 | 	cmp	result1, #0 wz
07e98     0C 01 90 AD |  if_e	jmp	#LR__0701
07e9c     74 01 00 FF 
07ea0     26 15 06 F6 | 	mov	arg02, ##@LR__5110
07ea4     1E 13 02 F6 | 	mov	arg01, local16
07ea8     48 6F B1 FD | 	call	#__system___string_cmp
07eac     00 FA 0D F2 | 	cmp	result1, #0 wz
07eb0     00 01 90 AD |  if_e	jmp	#LR__0702
07eb4     74 01 00 FF 
07eb8     2C 15 06 F6 | 	mov	arg02, ##@LR__5111
07ebc     1E 13 02 F6 | 	mov	arg01, local16
07ec0     30 6F B1 FD | 	call	#__system___string_cmp
07ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ec8     F4 00 90 AD |  if_e	jmp	#LR__0703
07ecc     74 01 00 FF 
07ed0     32 15 06 F6 | 	mov	arg02, ##@LR__5112
07ed4     1E 13 02 F6 | 	mov	arg01, local16
07ed8     18 6F B1 FD | 	call	#__system___string_cmp
07edc     00 FA 0D F2 | 	cmp	result1, #0 wz
07ee0     E8 00 90 AD |  if_e	jmp	#LR__0704
07ee4     74 01 00 FF 
07ee8     39 15 06 F6 | 	mov	arg02, ##@LR__5113
07eec     1E 13 02 F6 | 	mov	arg01, local16
07ef0     00 6F B1 FD | 	call	#__system___string_cmp
07ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ef8     DC 00 90 AD |  if_e	jmp	#LR__0705
07efc     74 01 00 FF 
07f00     3E 15 06 F6 | 	mov	arg02, ##@LR__5114
07f04     1E 13 02 F6 | 	mov	arg01, local16
07f08     E8 6E B1 FD | 	call	#__system___string_cmp
07f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f10     D0 00 90 AD |  if_e	jmp	#LR__0706
07f14     74 01 00 FF 
07f18     46 15 06 F6 | 	mov	arg02, ##@LR__5115
07f1c     1E 13 02 F6 | 	mov	arg01, local16
07f20     D0 6E B1 FD | 	call	#__system___string_cmp
07f24     00 FA 0D F2 | 	cmp	result1, #0 wz
07f28     C4 00 90 AD |  if_e	jmp	#LR__0707
07f2c     74 01 00 FF 
07f30     4C 15 06 F6 | 	mov	arg02, ##@LR__5116
07f34     1E 13 02 F6 | 	mov	arg01, local16
07f38     B8 6E B1 FD | 	call	#__system___string_cmp
07f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f40     B8 00 90 AD |  if_e	jmp	#LR__0708
07f44     74 01 00 FF 
07f48     52 15 06 F6 | 	mov	arg02, ##@LR__5117
07f4c     1E 13 02 F6 | 	mov	arg01, local16
07f50     A0 6E B1 FD | 	call	#__system___string_cmp
07f54     00 FA 0D F2 | 	cmp	result1, #0 wz
07f58     AC 00 90 AD |  if_e	jmp	#LR__0709
07f5c     74 01 00 FF 
07f60     59 15 06 F6 | 	mov	arg02, ##@LR__5118
07f64     1E 13 02 F6 | 	mov	arg01, local16
07f68     88 6E B1 FD | 	call	#__system___string_cmp
07f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f70     A0 00 90 AD |  if_e	jmp	#LR__0710
07f74     74 01 00 FF 
07f78     60 15 06 F6 | 	mov	arg02, ##@LR__5119
07f7c     1E 13 02 F6 | 	mov	arg01, local16
07f80     70 6E B1 FD | 	call	#__system___string_cmp
07f84     00 FA 0D F2 | 	cmp	result1, #0 wz
07f88     94 00 90 AD |  if_e	jmp	#LR__0711
07f8c     74 01 00 FF 
07f90     67 15 06 F6 | 	mov	arg02, ##@LR__5120
07f94     1E 13 02 F6 | 	mov	arg01, local16
07f98     58 6E B1 FD | 	call	#__system___string_cmp
07f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
07fa0     88 00 90 AD |  if_e	jmp	#LR__0712
07fa4     90 00 90 FD | 	jmp	#LR__0713
07fa8                 | LR__0701
07fa8     01 39 06 F6 | 	mov	local14, #257
07fac     01 3A 06 F6 | 	mov	local15, #1
07fb0     A4 00 90 FD | 	jmp	#LR__0715
07fb4                 | LR__0702
07fb4     02 39 06 F6 | 	mov	local14, #258
07fb8     01 3A 06 F6 | 	mov	local15, #1
07fbc     98 00 90 FD | 	jmp	#LR__0715
07fc0                 | LR__0703
07fc0     03 39 06 F6 | 	mov	local14, #259
07fc4     02 3A 06 F6 | 	mov	local15, #2
07fc8     8C 00 90 FD | 	jmp	#LR__0715
07fcc                 | LR__0704
07fcc     04 39 06 F6 | 	mov	local14, #260
07fd0     02 3A 06 F6 | 	mov	local15, #2
07fd4     80 00 90 FD | 	jmp	#LR__0715
07fd8                 | LR__0705
07fd8     05 39 06 F6 | 	mov	local14, #261
07fdc     04 3A 06 F6 | 	mov	local15, #4
07fe0     74 00 90 FD | 	jmp	#LR__0715
07fe4                 | LR__0706
07fe4     05 39 06 F6 | 	mov	local14, #261
07fe8     04 3A 06 F6 | 	mov	local15, #4
07fec     68 00 90 FD | 	jmp	#LR__0715
07ff0                 | LR__0707
07ff0     06 39 06 F6 | 	mov	local14, #262
07ff4     04 3A 06 F6 | 	mov	local15, #4
07ff8     5C 00 90 FD | 	jmp	#LR__0715
07ffc                 | LR__0708
07ffc     07 39 06 F6 | 	mov	local14, #263
08000     08 3A 06 F6 | 	mov	local15, #8
08004     50 00 90 FD | 	jmp	#LR__0715
08008                 | LR__0709
08008     08 39 06 F6 | 	mov	local14, #264
0800c     08 3A 06 F6 | 	mov	local15, #8
08010     44 00 90 FD | 	jmp	#LR__0715
08014                 | LR__0710
08014     09 39 06 F6 | 	mov	local14, #265
08018     04 3A 06 F6 | 	mov	local15, #4
0801c     38 00 90 FD | 	jmp	#LR__0715
08020                 | LR__0711
08020     0A 39 06 F6 | 	mov	local14, #266
08024     08 3A 06 F6 | 	mov	local15, #8
08028     2C 00 90 FD | 	jmp	#LR__0715
0802c                 | LR__0712
0802c     0B 39 06 F6 | 	mov	local14, #267
08030     04 3A 06 F6 | 	mov	local15, #4
08034     20 00 90 FD | 	jmp	#LR__0715
08038                 | LR__0713
08038     2F 12 06 F6 | 	mov	arg01, #47
0803c     E4 28 B1 FD | 	call	#_printerror
08040     2F FA 05 F6 | 	mov	result1, #47
08044     10 01 90 FD | 	jmp	#LR__0716
08048                 | LR__0714
08048     2E 12 06 F6 | 	mov	arg01, #46
0804c     D4 28 B1 FD | 	call	#_printerror
08050                 | '   printerror(46): return 46
08050     2E FA 05 F6 | 	mov	result1, #46
08054     00 01 90 FD | 	jmp	#LR__0716
08058                 | LR__0715
08058     0F 3B 02 FD | 	qmul	local15, local01
0805c     18 2A 62 FD | 	getqx	local07
08060     10 2B 02 FD | 	qmul	local07, local02
08064     18 3C 62 FD | 	getqx	local16
08068     11 3D 02 FD | 	qmul	local16, local03
0806c     59 00 00 FF 
08070     B8 E5 05 F1 | 	add	objptr, ##46008
08074     F2 3E 02 FB | 	rdlong	local17, objptr
08078     1C 15 02 F6 | 	mov	arg02, local14
0807c     18 3C 62 FD | 	getqx	local16
08080     1E 3F 82 F1 | 	sub	local17, local16
08084     10 3E 86 F1 | 	sub	local17, #16
08088     0F 3E 26 F5 | 	andn	local17, #15
0808c     F2 3E 62 FC | 	wrlong	local17, objptr
08090     59 00 00 FF 
08094     B8 E5 85 F1 | 	sub	objptr, ##46008
08098     1F 13 02 F6 | 	mov	arg01, local17
0809c     30 2A B1 FD | 	call	#_psdpoke
080a0     1F 13 02 F6 | 	mov	arg01, local17
080a4     02 12 06 F1 | 	add	arg01, #2
080a8     1D 15 02 F6 | 	mov	arg02, local15
080ac     20 2A B1 FD | 	call	#_psdpoke
080b0     1F 13 02 F6 | 	mov	arg01, local17
080b4     04 12 06 F1 | 	add	arg01, #4
080b8     0F 15 02 F6 | 	mov	arg02, local01
080bc     C8 29 B1 FD | 	call	#_pslpoke
080c0     1F 13 02 F6 | 	mov	arg01, local17
080c4     08 12 06 F1 | 	add	arg01, #8
080c8     10 15 02 F6 | 	mov	arg02, local02
080cc     B8 29 B1 FD | 	call	#_pslpoke
080d0     1F 13 02 F6 | 	mov	arg01, local17
080d4     0C 12 06 F1 | 	add	arg01, #12
080d8     11 15 02 F6 | 	mov	arg02, local03
080dc     A8 29 B1 FD | 	call	#_pslpoke
080e0     14 35 02 F6 | 	mov	local12, local06
080e4     04 34 66 F0 | 	shl	local12, #4
080e8     15 00 00 FF 
080ec     28 E4 05 F1 | 	add	objptr, ##10792
080f0     F2 34 02 F1 | 	add	local12, objptr
080f4     1A 27 62 FC | 	wrlong	local05, local12
080f8     14 35 02 F6 | 	mov	local12, local06
080fc     04 34 66 F0 | 	shl	local12, #4
08100     F2 34 02 F1 | 	add	local12, objptr
08104     04 34 06 F1 | 	add	local12, #4
08108     1A 3F 62 FC | 	wrlong	local17, local12
0810c     14 35 02 F6 | 	mov	local12, local06
08110     04 34 66 F0 | 	shl	local12, #4
08114     F2 34 02 F1 | 	add	local12, objptr
08118     0C 34 06 F1 | 	add	local12, #12
0811c     1A 39 62 FC | 	wrlong	local14, local12
08120                 | ' memtop=arrayptr
08120                 | ' 
08120                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
08120                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
08120                 | ' pslpoke arrayptr+4,dims(0)
08120                 | ' pslpoke arrayptr+8,dims(1)
08120                 | ' pslpoke arrayptr+12,dims(2)
08120                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
08120                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
08120                 | ' 
08120                 | ' 
08120                 | ' variables(j).name=varname2$
08120                 | ' variables(j).value.uresult=arrayptr
08120                 | ' variables(j).vartype=arraytype
08120                 | ' if j=varnum then varnum+=1
08120     20 00 00 FF 
08124     10 E4 05 F1 | 	add	objptr, ##16400
08128     F2 2A 02 FB | 	rdlong	local07, objptr
0812c     35 00 00 FF 
08130     38 E4 85 F1 | 	sub	objptr, ##27192
08134     15 29 0A F2 | 	cmp	local06, local07 wz
08138     35 00 00 AF 
0813c     38 E4 05 A1 |  if_e	add	objptr, ##27192
08140     F2 2A 02 AB |  if_e	rdlong	local07, objptr
08144     01 2A 06 A1 |  if_e	add	local07, #1
08148     F2 2A 62 AC |  if_e	wrlong	local07, objptr
0814c     35 00 00 AF 
08150     38 E4 85 A1 |  if_e	sub	objptr, ##27192
08154                 | ' 
08154                 | ' return 0
08154     00 FA 05 F6 | 	mov	result1, #0
08158                 | LR__0716
08158     A7 F0 03 F6 | 	mov	ptra, fp
0815c     B2 00 A0 FD | 	call	#popregs_
08160                 | _compile_dim_ret
08160     2D 00 64 FD | 	ret
08164                 | 
08164                 | ' 
08164                 | ' 
08164                 | ' function compile_for() as ulong  
08164                 | _compile_for
08164     07 4A 05 F6 | 	mov	COUNT_, #7
08168     A8 00 A0 FD | 	call	#pushregs_
0816c                 | ' 
0816c                 | ' 
0816c                 | ' 
0816c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
0816c     37 00 00 FF 
08170     74 E4 05 F1 | 	add	objptr, ##28276
08174     F2 14 02 FB | 	rdlong	arg02, objptr
08178     01 14 06 F1 | 	add	arg02, #1
0817c     03 14 66 F0 | 	shl	arg02, #3
08180     02 00 00 FF 
08184     38 E4 85 F1 | 	sub	objptr, ##1080
08188     F2 14 02 F1 | 	add	arg02, objptr
0818c     0A 13 02 FB | 	rdlong	arg01, arg02
08190     35 00 00 FF 
08194     3C E4 85 F1 | 	sub	objptr, ##27196
08198                 | ' 
08198                 | ' select case s
08198     72 01 00 FF 
0819c     84 15 06 F6 | 	mov	arg02, ##@LR__4912
081a0     50 6C B1 FD | 	call	#__system___string_cmp
081a4     00 FA 0D F2 | 	cmp	result1, #0 wz
081a8     1B FA 05 A6 |  if_e	mov	result1, #27
081ac     00 FA 05 56 |  if_ne	mov	result1, #0
081b0     00 FA 0D F2 | 	cmp	result1, #0 wz
081b4     0C 00 90 AD |  if_e	jmp	#LR__0720
081b8     05 12 06 F6 | 	mov	arg01, #5
081bc     D8 E4 BF FD | 	call	#_compile_immediate_assign
081c0     10 00 90 FD | 	jmp	#LR__0721
081c4                 | LR__0720
081c4     20 12 06 F6 | 	mov	arg01, #32
081c8     48 E9 BF FD | 	call	#_compile_error
081cc     20 FA 05 F6 | 	mov	result1, #32
081d0     E8 02 90 FD | 	jmp	#LR__0727
081d4                 | LR__0721
081d4     4A 00 00 FF 
081d8     AC E4 05 F1 | 	add	objptr, ##38060
081dc     F2 12 02 FB | 	rdlong	arg01, objptr
081e0     09 25 02 F6 | 	mov	local04, arg01
081e4     01 24 86 F1 | 	sub	local04, #1
081e8     12 15 02 F6 | 	mov	arg02, local04
081ec     01 14 66 F0 | 	shl	arg02, #1
081f0     12 15 02 F1 | 	add	arg02, local04
081f4     02 14 66 F0 | 	shl	arg02, #2
081f8     03 00 00 FF 
081fc     00 E4 85 F1 | 	sub	objptr, ##1536
08200     F2 14 02 F1 | 	add	arg02, objptr
08204     0A 1F 02 FB | 	rdlong	local01, arg02
08208     04 14 06 F1 | 	add	arg02, #4
0820c     0A 27 02 FB | 	rdlong	local05, arg02
08210     01 12 86 F1 | 	sub	arg01, #1
08214     09 29 02 F6 | 	mov	local06, arg01
08218     01 28 66 F0 | 	shl	local06, #1
0821c     09 29 02 F1 | 	add	local06, arg01
08220     02 28 66 F0 | 	shl	local06, #2
08224     F2 28 02 F1 | 	add	local06, objptr
08228     08 28 06 F1 | 	add	local06, #8
0822c     14 13 02 FB | 	rdlong	arg01, local06
08230     13 21 02 F6 | 	mov	local02, local05
08234     09 23 02 F6 | 	mov	local03, arg01
08238                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
08238                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
08238     17 22 0E F2 | 	cmp	local03, #23 wz
0823c     47 00 00 FF 
08240     AC E4 85 F1 | 	sub	objptr, ##36524
08244     10 00 90 AD |  if_e	jmp	#LR__0722
08248     22 12 06 F6 | 	mov	arg01, #34
0824c     C4 E8 BF FD | 	call	#_compile_error
08250     22 FA 05 F6 | 	mov	result1, #34
08254     64 02 90 FD | 	jmp	#LR__0727
08258                 | LR__0722
08258     0F 2B 02 F6 | 	mov	local07, local01
0825c                 | ' varnum=t1.result.uresult
0825c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
0825c     37 00 00 FF 
08260     74 E4 05 F1 | 	add	objptr, ##28276
08264     F2 24 02 FB | 	rdlong	local04, objptr
08268     03 24 66 F0 | 	shl	local04, #3
0826c     02 00 00 FF 
08270     38 E4 85 F1 | 	sub	objptr, ##1080
08274     F2 24 02 F1 | 	add	local04, objptr
08278     12 13 02 FB | 	rdlong	arg01, local04
0827c     74 01 00 FF 
08280     6E 15 06 F6 | 	mov	arg02, ##@LR__5121
08284     35 00 00 FF 
08288     3C E4 85 F1 | 	sub	objptr, ##27196
0828c     64 6B B1 FD | 	call	#__system___string_cmp
08290     00 FA 0D F2 | 	cmp	result1, #0 wz
08294     10 00 90 AD |  if_e	jmp	#LR__0723
08298     21 12 06 F6 | 	mov	arg01, #33
0829c     74 E8 BF FD | 	call	#_compile_error
082a0     21 FA 05 F6 | 	mov	result1, #33
082a4     14 02 90 FD | 	jmp	#LR__0727
082a8                 | LR__0723
082a8     37 00 00 FF 
082ac     74 E4 05 F1 | 	add	objptr, ##28276
082b0     F2 24 02 FB | 	rdlong	local04, objptr
082b4     01 24 06 F1 | 	add	local04, #1
082b8     F2 24 62 FC | 	wrlong	local04, objptr
082bc     37 00 00 FF 
082c0     74 E4 85 F1 | 	sub	objptr, ##28276
082c4     90 0F B0 FD | 	call	#_expr
082c8                 | ' ct+=1
082c8                 | ' expr()  ' there is "to" value pushed on the stack
082c8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
082c8     37 00 00 FF 
082cc     74 E4 05 F1 | 	add	objptr, ##28276
082d0     F2 24 02 FB | 	rdlong	local04, objptr
082d4     03 24 66 F0 | 	shl	local04, #3
082d8     02 00 00 FF 
082dc     38 E4 85 F1 | 	sub	objptr, ##1080
082e0     F2 24 02 F1 | 	add	local04, objptr
082e4     12 13 02 FB | 	rdlong	arg01, local04
082e8     74 01 00 FF 
082ec     71 15 06 F6 | 	mov	arg02, ##@LR__5122
082f0     35 00 00 FF 
082f4     3C E4 85 F1 | 	sub	objptr, ##27196
082f8     F8 6A B1 FD | 	call	#__system___string_cmp
082fc     00 FA 0D F2 | 	cmp	result1, #0 wz
08300     3C 00 90 AD |  if_e	jmp	#LR__0724
08304     37 00 00 FF 
08308     74 E4 05 F1 | 	add	objptr, ##28276
0830c     F2 28 02 FB | 	rdlong	local06, objptr
08310     03 28 66 F0 | 	shl	local06, #3
08314     02 00 00 FF 
08318     38 E4 85 F1 | 	sub	objptr, ##1080
0831c     F2 28 02 F1 | 	add	local06, objptr
08320     14 13 02 FB | 	rdlong	arg01, local06
08324     74 01 00 FF 
08328     76 15 06 F6 | 	mov	arg02, ##@LR__5123
0832c     35 00 00 FF 
08330     3C E4 85 F1 | 	sub	objptr, ##27196
08334     BC 6A B1 FD | 	call	#__system___string_cmp
08338     00 FA 0D F2 | 	cmp	result1, #0 wz
0833c     24 00 90 5D |  if_ne	jmp	#LR__0725
08340                 | LR__0724
08340     37 00 00 FF 
08344     74 E4 05 F1 | 	add	objptr, ##28276
08348     F2 28 02 FB | 	rdlong	local06, objptr
0834c     01 28 06 F1 | 	add	local06, #1
08350     F2 28 62 FC | 	wrlong	local06, objptr
08354     37 00 00 FF 
08358     74 E4 85 F1 | 	sub	objptr, ##28276
0835c     F8 0E B0 FD | 	call	#_expr
08360     78 00 90 FD | 	jmp	#LR__0726
08364                 | LR__0725
08364     4A 00 00 FF 
08368     AC E4 05 F1 | 	add	objptr, ##38060
0836c     F2 28 02 FB | 	rdlong	local06, objptr
08370     14 27 02 F6 | 	mov	local05, local06
08374     01 26 66 F0 | 	shl	local05, #1
08378     14 27 02 F1 | 	add	local05, local06
0837c     02 26 66 F0 | 	shl	local05, #2
08380     03 00 00 FF 
08384     00 E4 85 F1 | 	sub	objptr, ##1536
08388     F2 26 02 F1 | 	add	local05, objptr
0838c     08 26 06 F1 | 	add	local05, #8
08390     13 39 68 FC | 	wrlong	#28, local05
08394     03 00 00 FF 
08398     00 E4 05 F1 | 	add	objptr, ##1536
0839c     F2 28 02 FB | 	rdlong	local06, objptr
083a0     14 27 02 F6 | 	mov	local05, local06
083a4     01 26 66 F0 | 	shl	local05, #1
083a8     14 27 02 F1 | 	add	local05, local06
083ac     02 26 66 F0 | 	shl	local05, #2
083b0     03 00 00 FF 
083b4     00 E4 85 F1 | 	sub	objptr, ##1536
083b8     F2 26 02 F1 | 	add	local05, objptr
083bc     13 03 68 FC | 	wrlong	#1, local05
083c0     03 00 00 FF 
083c4     00 E4 05 F1 | 	add	objptr, ##1536
083c8     F2 28 02 FB | 	rdlong	local06, objptr
083cc     01 28 06 F1 | 	add	local06, #1
083d0     F2 28 62 FC | 	wrlong	local06, objptr
083d4     4A 00 00 FF 
083d8     AC E4 85 F1 | 	sub	objptr, ##38060
083dc                 | LR__0726
083dc     4A 00 00 FF 
083e0     AC E4 05 F1 | 	add	objptr, ##38060
083e4     F2 28 02 FB | 	rdlong	local06, objptr
083e8     14 27 02 F6 | 	mov	local05, local06
083ec     01 26 66 F0 | 	shl	local05, #1
083f0     14 27 02 F1 | 	add	local05, local06
083f4     02 26 66 F0 | 	shl	local05, #2
083f8     03 00 00 FF 
083fc     00 E4 85 F1 | 	sub	objptr, ##1536
08400     F2 26 02 F1 | 	add	local05, objptr
08404     08 26 06 F1 | 	add	local05, #8
08408     13 39 68 FC | 	wrlong	#28, local05
0840c     03 00 00 FF 
08410     00 E4 05 F1 | 	add	objptr, ##1536
08414     F2 28 02 FB | 	rdlong	local06, objptr
08418     14 27 02 F6 | 	mov	local05, local06
0841c     01 26 66 F0 | 	shl	local05, #1
08420     14 27 02 F1 | 	add	local05, local06
08424     02 26 66 F0 | 	shl	local05, #2
08428     03 00 00 FF 
0842c     00 E4 85 F1 | 	sub	objptr, ##1536
08430     F2 26 02 F1 | 	add	local05, objptr
08434     13 2B 62 FC | 	wrlong	local07, local05
08438     03 00 00 FF 
0843c     00 E4 05 F1 | 	add	objptr, ##1536
08440     F2 2A 02 FB | 	rdlong	local07, objptr
08444     01 2A 06 F1 | 	add	local07, #1
08448     F2 2A 62 FC | 	wrlong	local07, objptr
0844c     15 29 02 F6 | 	mov	local06, local07
08450     01 28 66 F0 | 	shl	local06, #1
08454     15 29 02 F1 | 	add	local06, local07
08458     02 28 66 F0 | 	shl	local06, #2
0845c     03 00 00 FF 
08460     00 E4 85 F1 | 	sub	objptr, ##1536
08464     F2 28 02 F1 | 	add	local06, objptr
08468     08 28 06 F1 | 	add	local06, #8
0846c     14 95 68 FC | 	wrlong	#74, local06
08470     03 00 00 FF 
08474     00 E4 05 F1 | 	add	objptr, ##1536
08478     F2 2A 02 FB | 	rdlong	local07, objptr
0847c     15 29 02 F6 | 	mov	local06, local07
08480     01 28 66 F0 | 	shl	local06, #1
08484     15 29 02 F1 | 	add	local06, local07
08488     02 28 66 F0 | 	shl	local06, #2
0848c     03 00 00 FF 
08490     00 E4 85 F1 | 	sub	objptr, ##1536
08494     F2 28 02 F1 | 	add	local06, objptr
08498     14 01 68 FC | 	wrlong	#0, local06
0849c     03 00 00 FF 
084a0     00 E4 05 F1 | 	add	objptr, ##1536
084a4     F2 2A 02 FB | 	rdlong	local07, objptr
084a8     01 2A 06 F1 | 	add	local07, #1
084ac     F2 2A 62 FC | 	wrlong	local07, objptr
084b0     4A 00 00 FF 
084b4     AC E4 85 F1 | 	sub	objptr, ##38060
084b8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
084b8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
084b8                 | ' 
084b8                 | ' 
084b8                 | ' return 0
084b8     00 FA 05 F6 | 	mov	result1, #0
084bc                 | LR__0727
084bc     A7 F0 03 F6 | 	mov	ptra, fp
084c0     B2 00 A0 FD | 	call	#popregs_
084c4                 | _compile_for_ret
084c4     2D 00 64 FD | 	ret
084c8                 | 
084c8                 | ' 
084c8                 | ' 
084c8                 | ' sub do_gosub()
084c8                 | _do_gosub
084c8     58 00 00 FF 
084cc     18 E5 05 F1 | 	add	objptr, ##45336
084d0     F2 00 02 FB | 	rdlong	_var01, objptr
084d4     01 00 06 F1 | 	add	_var01, #1
084d8     F2 00 62 FC | 	wrlong	_var01, objptr
084dc                 | ' gosubtop+=1
084dc                 | ' if compiledline(lineptr_e+1).result_type=token_end then
084dc     0E 00 00 FF 
084e0     68 E4 85 F1 | 	sub	objptr, ##7272
084e4     F2 00 02 FB | 	rdlong	_var01, objptr
084e8     01 00 06 F1 | 	add	_var01, #1
084ec     00 03 02 F6 | 	mov	_var02, _var01
084f0     01 02 66 F0 | 	shl	_var02, #1
084f4     00 03 02 F1 | 	add	_var02, _var01
084f8     02 02 66 F0 | 	shl	_var02, #2
084fc     03 00 00 FF 
08500     04 E4 85 F1 | 	sub	objptr, ##1540
08504     F2 02 02 F1 | 	add	_var02, objptr
08508     08 02 06 F1 | 	add	_var02, #8
0850c     01 03 02 FB | 	rdlong	_var02, _var02
08510     FE 03 0E F2 | 	cmp	_var02, #510 wz
08514     47 00 00 FF 
08518     AC E4 85 F1 | 	sub	objptr, ##36524
0851c     58 00 90 5D |  if_ne	jmp	#LR__0730
08520     58 00 00 FF 
08524     18 E5 05 F1 | 	add	objptr, ##45336
08528     F2 02 02 FB | 	rdlong	_var02, objptr
0852c     03 02 66 F0 | 	shl	_var02, #3
08530     03 00 00 FF 
08534     38 E5 85 F1 | 	sub	objptr, ##1848
08538     F2 02 02 F1 | 	add	_var02, objptr
0853c     03 00 00 FF 
08540     0C E5 05 F1 | 	add	objptr, ##1804
08544     F2 00 02 FB | 	rdlong	_var01, objptr
08548     01 01 62 FC | 	wrlong	_var01, _var02
0854c     2C E4 05 F1 | 	add	objptr, #44
08550     F2 02 02 FB | 	rdlong	_var02, objptr
08554     03 02 66 F0 | 	shl	_var02, #3
08558     03 00 00 FF 
0855c     38 E5 85 F1 | 	sub	objptr, ##1848
08560     F2 02 02 F1 | 	add	_var02, objptr
08564     04 02 06 F1 | 	add	_var02, #4
08568     01 01 68 FC | 	wrlong	#0, _var02
0856c     54 00 00 FF 
08570     E0 E5 85 F1 | 	sub	objptr, ##43488
08574     64 00 90 FD | 	jmp	#LR__0731
08578                 | LR__0730
08578     58 00 00 FF 
0857c     18 E5 05 F1 | 	add	objptr, ##45336
08580     F2 02 02 FB | 	rdlong	_var02, objptr
08584     03 02 66 F0 | 	shl	_var02, #3
08588     03 00 00 FF 
0858c     38 E5 85 F1 | 	sub	objptr, ##1848
08590     F2 02 02 F1 | 	add	_var02, objptr
08594     03 00 00 FF 
08598     14 E5 05 F1 | 	add	objptr, ##1812
0859c     F2 00 02 FB | 	rdlong	_var01, objptr
085a0     01 01 62 FC | 	wrlong	_var01, _var02
085a4     24 E4 05 F1 | 	add	objptr, #36
085a8     F2 02 02 FB | 	rdlong	_var02, objptr
085ac     03 02 66 F0 | 	shl	_var02, #3
085b0     03 00 00 FF 
085b4     38 E5 85 F1 | 	sub	objptr, ##1848
085b8     F2 02 02 F1 | 	add	_var02, objptr
085bc     0A 00 00 FF 
085c0     30 E5 85 F1 | 	sub	objptr, ##5424
085c4     F2 00 02 FB | 	rdlong	_var01, objptr
085c8     4A 00 00 FF 
085cc     B0 E4 85 F1 | 	sub	objptr, ##38064
085d0     02 00 06 F1 | 	add	_var01, #2
085d4     04 02 06 F1 | 	add	_var02, #4
085d8     01 01 62 FC | 	wrlong	_var01, _var02
085dc                 | LR__0731
085dc                 | _do_gosub_ret
085dc     2D 00 64 FD | 	ret
085e0                 | 
085e0                 | ' 
085e0                 | ' 
085e0                 | ' sub do_for()
085e0                 | _do_for
085e0     01 4A 05 F6 | 	mov	COUNT_, #1
085e4     A8 00 A0 FD | 	call	#pushregs_
085e8     10 F0 07 F1 | 	add	ptra, #16
085ec     58 00 00 FF 
085f0     14 E5 05 F1 | 	add	objptr, ##45332
085f4     F2 12 02 FB | 	rdlong	arg01, objptr
085f8     01 12 06 F1 | 	add	arg01, #1
085fc     F2 12 62 FC | 	wrlong	arg01, objptr
08600     58 00 00 FF 
08604     14 E5 85 F1 | 	sub	objptr, ##45332
08608     8C 22 B0 FD | 	call	#_pop
0860c     A7 FA 61 FC | 	wrlong	result1, fp
08610     04 4E 05 F1 | 	add	fp, #4
08614     A7 FC 61 FC | 	wrlong	result2, fp
08618     04 4E 05 F1 | 	add	fp, #4
0861c     A7 FE 61 FC | 	wrlong	result3, fp
08620     08 4E 85 F1 | 	sub	fp, #8
08624     58 00 00 FF 
08628     14 E5 05 F1 | 	add	objptr, ##45332
0862c     F2 12 02 FB | 	rdlong	arg01, objptr
08630     09 1F 02 F6 | 	mov	local01, arg01
08634     02 1E 66 F0 | 	shl	local01, #2
08638     09 1F 02 F1 | 	add	local01, arg01
0863c     02 1E 66 F0 | 	shl	local01, #2
08640     06 00 00 FF 
08644     48 E4 85 F1 | 	sub	objptr, ##3144
08648     F2 1E 02 F1 | 	add	local01, objptr
0864c     A7 12 02 FB | 	rdlong	arg01, fp
08650     08 1E 06 F1 | 	add	local01, #8
08654     0F 13 62 FC | 	wrlong	arg01, local01
08658     52 00 00 FF 
0865c     CC E4 85 F1 | 	sub	objptr, ##42188
08660     34 22 B0 FD | 	call	#_pop
08664     A7 FA 61 FC | 	wrlong	result1, fp
08668     04 4E 05 F1 | 	add	fp, #4
0866c     A7 FC 61 FC | 	wrlong	result2, fp
08670     04 4E 05 F1 | 	add	fp, #4
08674     A7 FE 61 FC | 	wrlong	result3, fp
08678     08 4E 85 F1 | 	sub	fp, #8
0867c     58 00 00 FF 
08680     14 E5 05 F1 | 	add	objptr, ##45332
08684     F2 12 02 FB | 	rdlong	arg01, objptr
08688     09 1F 02 F6 | 	mov	local01, arg01
0868c     02 1E 66 F0 | 	shl	local01, #2
08690     09 1F 02 F1 | 	add	local01, arg01
08694     02 1E 66 F0 | 	shl	local01, #2
08698     06 00 00 FF 
0869c     48 E4 85 F1 | 	sub	objptr, ##3144
086a0     F2 1E 02 F1 | 	add	local01, objptr
086a4     A7 12 02 F6 | 	mov	arg01, fp
086a8     52 00 00 FF 
086ac     CC E4 85 F1 | 	sub	objptr, ##42188
086b0     80 AE B0 FD | 	call	#_converttoint
086b4     FD 12 02 F6 | 	mov	arg01, result1
086b8     0C 1E 06 F1 | 	add	local01, #12
086bc     0F 13 62 FC | 	wrlong	arg01, local01
086c0     D4 21 B0 FD | 	call	#_pop
086c4     A7 FA 61 FC | 	wrlong	result1, fp
086c8     04 4E 05 F1 | 	add	fp, #4
086cc     A7 FC 61 FC | 	wrlong	result2, fp
086d0     04 4E 05 F1 | 	add	fp, #4
086d4     A7 FE 61 FC | 	wrlong	result3, fp
086d8     08 4E 85 F1 | 	sub	fp, #8
086dc     58 00 00 FF 
086e0     14 E5 05 F1 | 	add	objptr, ##45332
086e4     F2 12 02 FB | 	rdlong	arg01, objptr
086e8     09 1F 02 F6 | 	mov	local01, arg01
086ec     02 1E 66 F0 | 	shl	local01, #2
086f0     09 1F 02 F1 | 	add	local01, arg01
086f4     02 1E 66 F0 | 	shl	local01, #2
086f8     06 00 00 FF 
086fc     48 E4 85 F1 | 	sub	objptr, ##3144
08700     F2 1E 02 F1 | 	add	local01, objptr
08704     A7 12 02 F6 | 	mov	arg01, fp
08708     52 00 00 FF 
0870c     CC E4 85 F1 | 	sub	objptr, ##42188
08710     20 AE B0 FD | 	call	#_converttoint
08714     10 1E 06 F1 | 	add	local01, #16
08718     0F FB 61 FC | 	wrlong	result1, local01
0871c                 | ' fortop+=1
0871c                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
0871c                 | ' 'if i> maxfor then printerror(36) : return
0871c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
0871c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
0871c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
0871c                 | ' if compiledline(lineptr_e).result_type=token_end then
0871c     4A 00 00 FF 
08720     B0 E4 05 F1 | 	add	objptr, ##38064
08724     F2 12 02 FB | 	rdlong	arg01, objptr
08728     09 1F 02 F6 | 	mov	local01, arg01
0872c     01 1E 66 F0 | 	shl	local01, #1
08730     09 1F 02 F1 | 	add	local01, arg01
08734     02 1E 66 F0 | 	shl	local01, #2
08738     03 00 00 FF 
0873c     04 E4 85 F1 | 	sub	objptr, ##1540
08740     F2 1E 02 F1 | 	add	local01, objptr
08744     08 1E 06 F1 | 	add	local01, #8
08748     0F 1F 02 FB | 	rdlong	local01, local01
0874c     FE 1F 0E F2 | 	cmp	local01, #510 wz
08750     47 00 00 FF 
08754     AC E4 85 F1 | 	sub	objptr, ##36524
08758     70 00 90 5D |  if_ne	jmp	#LR__0740
0875c     58 00 00 FF 
08760     14 E5 05 F1 | 	add	objptr, ##45332
08764     F2 12 02 FB | 	rdlong	arg01, objptr
08768     09 1F 02 F6 | 	mov	local01, arg01
0876c     02 1E 66 F0 | 	shl	local01, #2
08770     09 1F 02 F1 | 	add	local01, arg01
08774     02 1E 66 F0 | 	shl	local01, #2
08778     06 00 00 FF 
0877c     48 E4 85 F1 | 	sub	objptr, ##3144
08780     F2 1E 02 F1 | 	add	local01, objptr
08784     06 00 00 FF 
08788     20 E4 05 F1 | 	add	objptr, ##3104
0878c     F2 12 02 FB | 	rdlong	arg01, objptr
08790     0F 13 62 FC | 	wrlong	arg01, local01
08794     28 E4 05 F1 | 	add	objptr, #40
08798     F2 12 02 FB | 	rdlong	arg01, objptr
0879c     09 1F 02 F6 | 	mov	local01, arg01
087a0     02 1E 66 F0 | 	shl	local01, #2
087a4     09 1F 02 F1 | 	add	local01, arg01
087a8     02 1E 66 F0 | 	shl	local01, #2
087ac     06 00 00 FF 
087b0     48 E4 85 F1 | 	sub	objptr, ##3144
087b4     F2 1E 02 F1 | 	add	local01, objptr
087b8     04 1E 06 F1 | 	add	local01, #4
087bc     0F 01 68 FC | 	wrlong	#0, local01
087c0     52 00 00 FF 
087c4     CC E4 85 F1 | 	sub	objptr, ##42188
087c8     7C 00 90 FD | 	jmp	#LR__0741
087cc                 | LR__0740
087cc     58 00 00 FF 
087d0     14 E5 05 F1 | 	add	objptr, ##45332
087d4     F2 12 02 FB | 	rdlong	arg01, objptr
087d8     09 1F 02 F6 | 	mov	local01, arg01
087dc     02 1E 66 F0 | 	shl	local01, #2
087e0     09 1F 02 F1 | 	add	local01, arg01
087e4     02 1E 66 F0 | 	shl	local01, #2
087e8     06 00 00 FF 
087ec     48 E4 85 F1 | 	sub	objptr, ##3144
087f0     F2 1E 02 F1 | 	add	local01, objptr
087f4     06 00 00 FF 
087f8     28 E4 05 F1 | 	add	objptr, ##3112
087fc     F2 12 02 FB | 	rdlong	arg01, objptr
08800     0F 13 62 FC | 	wrlong	arg01, local01
08804     20 E4 05 F1 | 	add	objptr, #32
08808     F2 12 02 FB | 	rdlong	arg01, objptr
0880c     09 1F 02 F6 | 	mov	local01, arg01
08810     02 1E 66 F0 | 	shl	local01, #2
08814     09 1F 02 F1 | 	add	local01, arg01
08818     02 1E 66 F0 | 	shl	local01, #2
0881c     06 00 00 FF 
08820     48 E4 85 F1 | 	sub	objptr, ##3144
08824     F2 1E 02 F1 | 	add	local01, objptr
08828     08 00 00 FF 
0882c     1C E4 85 F1 | 	sub	objptr, ##4124
08830     F2 12 02 FB | 	rdlong	arg01, objptr
08834     4A 00 00 FF 
08838     B0 E4 85 F1 | 	sub	objptr, ##38064
0883c     01 12 06 F1 | 	add	arg01, #1
08840     04 1E 06 F1 | 	add	local01, #4
08844     0F 13 62 FC | 	wrlong	arg01, local01
08848                 | LR__0741
08848     A7 F0 03 F6 | 	mov	ptra, fp
0884c     B2 00 A0 FD | 	call	#popregs_
08850                 | _do_for_ret
08850     2D 00 64 FD | 	ret
08854                 | 
08854                 | ' 
08854                 | ' ' now do_next todo
08854                 | ' 
08854                 | ' sub do_return()
08854                 | _do_return
08854                 | ' if gosubtop>0 then
08854     58 00 00 FF 
08858     18 E5 05 F1 | 	add	objptr, ##45336
0885c     F2 00 02 FB | 	rdlong	_var01, objptr
08860     58 00 00 FF 
08864     18 E5 85 F1 | 	sub	objptr, ##45336
08868     01 00 56 F2 | 	cmps	_var01, #1 wc
0886c     8C 00 90 CD |  if_b	jmp	#LR__0750
08870     58 00 00 FF 
08874     18 E5 05 F1 | 	add	objptr, ##45336
08878     F2 00 02 FB | 	rdlong	_var01, objptr
0887c     03 00 66 F0 | 	shl	_var01, #3
08880     03 00 00 FF 
08884     38 E5 85 F1 | 	sub	objptr, ##1848
08888     F2 00 02 F1 | 	add	_var01, objptr
0888c     00 01 02 FB | 	rdlong	_var01, _var01
08890     03 00 00 FF 
08894     0C E5 05 F1 | 	add	objptr, ##1804
08898     F2 00 62 FC | 	wrlong	_var01, objptr
0889c     2C E4 05 F1 | 	add	objptr, #44
088a0     F2 00 02 FB | 	rdlong	_var01, objptr
088a4     03 00 66 F0 | 	shl	_var01, #3
088a8     03 00 00 FF 
088ac     38 E5 85 F1 | 	sub	objptr, ##1848
088b0     F2 00 02 F1 | 	add	_var01, objptr
088b4     04 00 06 F1 | 	add	_var01, #4
088b8     00 01 02 FB | 	rdlong	_var01, _var01
088bc     03 00 00 FF 
088c0     10 E5 05 F1 | 	add	objptr, ##1808
088c4     F2 00 62 FC | 	wrlong	_var01, objptr
088c8     0E 00 00 FF 
088cc     44 E4 85 F1 | 	sub	objptr, ##7236
088d0     F2 00 02 FB | 	rdlong	_var01, objptr
088d4     01 00 86 F1 | 	sub	_var01, #1
088d8     04 E4 05 F1 | 	add	objptr, #4
088dc     F2 00 62 FC | 	wrlong	_var01, objptr
088e0     0E 00 00 FF 
088e4     68 E4 05 F1 | 	add	objptr, ##7272
088e8     F2 00 02 FB | 	rdlong	_var01, objptr
088ec     01 00 86 F1 | 	sub	_var01, #1
088f0     F2 00 62 FC | 	wrlong	_var01, objptr
088f4     58 00 00 FF 
088f8     18 E5 85 F1 | 	sub	objptr, ##45336
088fc                 | LR__0750
088fc                 | _do_return_ret
088fc     2D 00 64 FD | 	ret
08900                 | 
08900                 | ' 
08900                 | ' sub do_pop()
08900                 | _do_pop
08900                 | ' if gosubtop>0 then  gosubtop -=1 
08900     58 00 00 FF 
08904     18 E5 05 F1 | 	add	objptr, ##45336
08908     F2 00 02 FB | 	rdlong	_var01, objptr
0890c     58 00 00 FF 
08910     18 E5 85 F1 | 	sub	objptr, ##45336
08914     01 00 56 F2 | 	cmps	_var01, #1 wc
08918     58 00 00 3F 
0891c     18 E5 05 31 |  if_ae	add	objptr, ##45336
08920     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
08924     01 00 86 31 |  if_ae	sub	_var01, #1
08928     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
0892c     58 00 00 3F 
08930     18 E5 85 31 |  if_ae	sub	objptr, ##45336
08934                 | _do_pop_ret
08934     2D 00 64 FD | 	ret
08938                 | 
08938                 | ' 
08938                 | ' sub do_next()
08938                 | _do_next
08938     04 4A 05 F6 | 	mov	COUNT_, #4
0893c     A8 00 A0 FD | 	call	#pushregs_
08940     54 1F B0 FD | 	call	#_pop
08944     FD 1E 02 F6 | 	mov	local01, result1
08948     FE 20 02 F6 | 	mov	local02, result2
0894c     FF 22 02 F6 | 	mov	local03, result3
08950                 | ' 
08950                 | ' t1=pop() :varnum=t1.result.uresult
08950                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08950     58 00 00 FF 
08954     14 E5 05 F1 | 	add	objptr, ##45332
08958     F2 12 02 FB | 	rdlong	arg01, objptr
0895c     09 15 02 F6 | 	mov	arg02, arg01
08960     02 14 66 F0 | 	shl	arg02, #2
08964     09 15 02 F1 | 	add	arg02, arg01
08968     02 14 66 F0 | 	shl	arg02, #2
0896c     06 00 00 FF 
08970     48 E4 85 F1 | 	sub	objptr, ##3144
08974     F2 14 02 F1 | 	add	arg02, objptr
08978     08 14 06 F1 | 	add	arg02, #8
0897c     0A 15 02 FB | 	rdlong	arg02, arg02
08980     0F 15 0A F2 | 	cmp	arg02, local01 wz
08984     52 00 00 FF 
08988     CC E4 85 F1 | 	sub	objptr, ##42188
0898c     0C 00 90 AD |  if_e	jmp	#LR__0760
08990     25 12 06 F6 | 	mov	arg01, #37
08994     8C 1F B1 FD | 	call	#_printerror
08998     A8 02 90 FD | 	jmp	#LR__0765
0899c                 | LR__0760
0899c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
0899c     0F 15 02 F6 | 	mov	arg02, local01
089a0     04 14 66 F0 | 	shl	arg02, #4
089a4     15 00 00 FF 
089a8     28 E4 05 F1 | 	add	objptr, ##10792
089ac     F2 14 02 F1 | 	add	arg02, objptr
089b0     0C 14 06 F1 | 	add	arg02, #12
089b4     0A 15 02 FB | 	rdlong	arg02, arg02
089b8     1E 14 0E F2 | 	cmp	arg02, #30 wz
089bc     15 00 00 FF 
089c0     28 E4 85 F1 | 	sub	objptr, ##10792
089c4     54 00 90 5D |  if_ne	jmp	#LR__0761
089c8     0F 15 02 F6 | 	mov	arg02, local01
089cc     04 14 66 F0 | 	shl	arg02, #4
089d0     15 00 00 FF 
089d4     28 E4 05 F1 | 	add	objptr, ##10792
089d8     F2 14 02 F1 | 	add	arg02, objptr
089dc     0C 14 06 F1 | 	add	arg02, #12
089e0     0A 39 68 FC | 	wrlong	#28, arg02
089e4     0F 25 02 F6 | 	mov	local04, local01
089e8     04 24 66 F0 | 	shl	local04, #4
089ec     F2 24 02 F1 | 	add	local04, objptr
089f0     0F 13 02 F6 | 	mov	arg01, local01
089f4     04 12 66 F0 | 	shl	arg01, #4
089f8     F2 12 02 F1 | 	add	arg01, objptr
089fc     04 12 06 F1 | 	add	arg01, #4
08a00     09 13 02 FB | 	rdlong	arg01, arg01
08a04     15 00 00 FF 
08a08     28 E4 85 F1 | 	sub	objptr, ##10792
08a0c     01 14 06 F6 | 	mov	arg02, #1
08a10     C8 93 B1 FD | 	call	#__system___float_tointeger
08a14     04 24 06 F1 | 	add	local04, #4
08a18     12 FB 61 FC | 	wrlong	result1, local04
08a1c                 | LR__0761
08a1c     58 00 00 FF 
08a20     14 E5 05 F1 | 	add	objptr, ##45332
08a24     F2 12 02 FB | 	rdlong	arg01, objptr
08a28     09 25 02 F6 | 	mov	local04, arg01
08a2c     02 24 66 F0 | 	shl	local04, #2
08a30     09 25 02 F1 | 	add	local04, arg01
08a34     02 24 66 F0 | 	shl	local04, #2
08a38     06 00 00 FF 
08a3c     48 E4 85 F1 | 	sub	objptr, ##3144
08a40     F2 24 02 F1 | 	add	local04, objptr
08a44     0C 24 06 F1 | 	add	local04, #12
08a48     12 25 02 FB | 	rdlong	local04, local04
08a4c     0F 13 02 F6 | 	mov	arg01, local01
08a50     04 12 66 F0 | 	shl	arg01, #4
08a54     3D 00 00 FF 
08a58     A4 E4 85 F1 | 	sub	objptr, ##31396
08a5c     F2 12 02 F1 | 	add	arg01, objptr
08a60     0F FF 01 F6 | 	mov	result3, local01
08a64     04 FE 65 F0 | 	shl	result3, #4
08a68     F2 FE 01 F1 | 	add	result3, objptr
08a6c     04 FE 05 F1 | 	add	result3, #4
08a70     FF FE 01 FB | 	rdlong	result3, result3
08a74     12 FF 01 F1 | 	add	result3, local04
08a78     04 12 06 F1 | 	add	arg01, #4
08a7c     09 FF 61 FC | 	wrlong	result3, arg01
08a80                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08a80                 | ' if fortable(fortop).stepval>=0 then
08a80     43 00 00 FF 
08a84     EC E4 05 F1 | 	add	objptr, ##34540
08a88     F2 12 02 FB | 	rdlong	arg01, objptr
08a8c     09 25 02 F6 | 	mov	local04, arg01
08a90     02 24 66 F0 | 	shl	local04, #2
08a94     09 25 02 F1 | 	add	local04, arg01
08a98     02 24 66 F0 | 	shl	local04, #2
08a9c     06 00 00 FF 
08aa0     48 E4 85 F1 | 	sub	objptr, ##3144
08aa4     F2 24 02 F1 | 	add	local04, objptr
08aa8     0C 24 06 F1 | 	add	local04, #12
08aac     12 25 02 FB | 	rdlong	local04, local04
08ab0     00 24 56 F2 | 	cmps	local04, #0 wc
08ab4     52 00 00 FF 
08ab8     CC E4 85 F1 | 	sub	objptr, ##42188
08abc     78 00 90 CD |  if_b	jmp	#LR__0762
08ac0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08ac0     04 1E 66 F0 | 	shl	local01, #4
08ac4     15 00 00 FF 
08ac8     28 E4 05 F1 | 	add	objptr, ##10792
08acc     F2 1E 02 F1 | 	add	local01, objptr
08ad0     43 00 00 FF 
08ad4     EC E4 05 F1 | 	add	objptr, ##34540
08ad8     F2 24 02 FB | 	rdlong	local04, objptr
08adc     12 13 02 F6 | 	mov	arg01, local04
08ae0     02 12 66 F0 | 	shl	arg01, #2
08ae4     12 13 02 F1 | 	add	arg01, local04
08ae8     02 12 66 F0 | 	shl	arg01, #2
08aec     06 00 00 FF 
08af0     48 E4 85 F1 | 	sub	objptr, ##3144
08af4     F2 12 02 F1 | 	add	arg01, objptr
08af8     04 1E 06 F1 | 	add	local01, #4
08afc     0F 25 02 FB | 	rdlong	local04, local01
08b00     10 12 06 F1 | 	add	arg01, #16
08b04     09 13 02 FB | 	rdlong	arg01, arg01
08b08     09 25 5A F2 | 	cmps	local04, arg01 wcz
08b0c     52 00 00 FF 
08b10     CC E4 85 F1 | 	sub	objptr, ##42188
08b14     9C 00 90 ED |  if_be	jmp	#LR__0764
08b18     58 00 00 FF 
08b1c     14 E5 05 F1 | 	add	objptr, ##45332
08b20     F2 24 02 FB | 	rdlong	local04, objptr
08b24     01 24 86 F1 | 	sub	local04, #1
08b28     F2 24 62 FC | 	wrlong	local04, objptr
08b2c     58 00 00 FF 
08b30     14 E5 85 F1 | 	sub	objptr, ##45332
08b34     0C 01 90 FD | 	jmp	#LR__0765
08b38                 | LR__0762
08b38                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08b38     0F 13 02 F6 | 	mov	arg01, local01
08b3c     04 12 66 F0 | 	shl	arg01, #4
08b40     15 00 00 FF 
08b44     28 E4 05 F1 | 	add	objptr, ##10792
08b48     F2 12 02 F1 | 	add	arg01, objptr
08b4c     43 00 00 FF 
08b50     EC E4 05 F1 | 	add	objptr, ##34540
08b54     F2 24 02 FB | 	rdlong	local04, objptr
08b58     12 1F 02 F6 | 	mov	local01, local04
08b5c     02 1E 66 F0 | 	shl	local01, #2
08b60     12 1F 02 F1 | 	add	local01, local04
08b64     02 1E 66 F0 | 	shl	local01, #2
08b68     06 00 00 FF 
08b6c     48 E4 85 F1 | 	sub	objptr, ##3144
08b70     F2 1E 02 F1 | 	add	local01, objptr
08b74     04 12 06 F1 | 	add	arg01, #4
08b78     09 13 02 FB | 	rdlong	arg01, arg01
08b7c     10 1E 06 F1 | 	add	local01, #16
08b80     0F 1F 02 FB | 	rdlong	local01, local01
08b84     0F 13 52 F2 | 	cmps	arg01, local01 wc
08b88     52 00 00 FF 
08b8c     CC E4 85 F1 | 	sub	objptr, ##42188
08b90     20 00 90 3D |  if_ae	jmp	#LR__0763
08b94     58 00 00 FF 
08b98     14 E5 05 F1 | 	add	objptr, ##45332
08b9c     F2 24 02 FB | 	rdlong	local04, objptr
08ba0     01 24 86 F1 | 	sub	local04, #1
08ba4     F2 24 62 FC | 	wrlong	local04, objptr
08ba8     58 00 00 FF 
08bac     14 E5 85 F1 | 	sub	objptr, ##45332
08bb0     90 00 90 FD | 	jmp	#LR__0765
08bb4                 | LR__0763
08bb4                 | LR__0764
08bb4     58 00 00 FF 
08bb8     14 E5 05 F1 | 	add	objptr, ##45332
08bbc     F2 1E 02 FB | 	rdlong	local01, objptr
08bc0     0F 25 02 F6 | 	mov	local04, local01
08bc4     02 24 66 F0 | 	shl	local04, #2
08bc8     0F 25 02 F1 | 	add	local04, local01
08bcc     02 24 66 F0 | 	shl	local04, #2
08bd0     06 00 00 FF 
08bd4     48 E4 85 F1 | 	sub	objptr, ##3144
08bd8     F2 24 02 F1 | 	add	local04, objptr
08bdc     12 25 02 FB | 	rdlong	local04, local04
08be0     06 00 00 FF 
08be4     20 E4 05 F1 | 	add	objptr, ##3104
08be8     F2 24 62 FC | 	wrlong	local04, objptr
08bec     28 E4 05 F1 | 	add	objptr, #40
08bf0     F2 1E 02 FB | 	rdlong	local01, objptr
08bf4     0F 25 02 F6 | 	mov	local04, local01
08bf8     02 24 66 F0 | 	shl	local04, #2
08bfc     0F 25 02 F1 | 	add	local04, local01
08c00     02 24 66 F0 | 	shl	local04, #2
08c04     06 00 00 FF 
08c08     48 E4 85 F1 | 	sub	objptr, ##3144
08c0c     F2 24 02 F1 | 	add	local04, objptr
08c10     04 24 06 F1 | 	add	local04, #4
08c14     12 25 02 FB | 	rdlong	local04, local04
08c18     06 00 00 FF 
08c1c     24 E4 05 F1 | 	add	objptr, ##3108
08c20     F2 24 62 FC | 	wrlong	local04, objptr
08c24     0E 00 00 FF 
08c28     44 E4 85 F1 | 	sub	objptr, ##7236
08c2c     F2 24 02 FB | 	rdlong	local04, objptr
08c30     01 24 86 F1 | 	sub	local04, #1
08c34     04 E4 05 F1 | 	add	objptr, #4
08c38     F2 24 62 FC | 	wrlong	local04, objptr
08c3c     4A 00 00 FF 
08c40     B0 E4 85 F1 | 	sub	objptr, ##38064
08c44                 | LR__0765
08c44     A7 F0 03 F6 | 	mov	ptra, fp
08c48     B2 00 A0 FD | 	call	#popregs_
08c4c                 | _do_next_ret
08c4c     2D 00 64 FD | 	ret
08c50                 | 
08c50                 | ' 
08c50                 | ' 
08c50                 | ' function compile_next() as ulong
08c50                 | _compile_next
08c50     04 4A 05 F6 | 	mov	COUNT_, #4
08c54     A8 00 A0 FD | 	call	#pushregs_
08c58     37 00 00 FF 
08c5c     74 E4 05 F1 | 	add	objptr, ##28276
08c60     F2 12 02 FB | 	rdlong	arg01, objptr
08c64     03 12 66 F0 | 	shl	arg01, #3
08c68     02 00 00 FF 
08c6c     38 E4 85 F1 | 	sub	objptr, ##1080
08c70     F2 12 02 F1 | 	add	arg01, objptr
08c74     09 1F 02 FB | 	rdlong	local01, arg01
08c78                 | ' 
08c78                 | ' varname$=lparts(ct).part$ 
08c78                 | ' 'suffix$=right$(varname$,1)
08c78                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08c78                 | ' if varnum=0 then compile_error(35)  : return 35
08c78     04 E4 85 F1 | 	sub	objptr, #4
08c7c     F2 14 0A FB | 	rdlong	arg02, objptr wz
08c80     35 00 00 FF 
08c84     38 E4 85 F1 | 	sub	objptr, ##27192
08c88     10 00 90 5D |  if_ne	jmp	#LR__0770
08c8c     23 12 06 F6 | 	mov	arg01, #35
08c90     80 DE BF FD | 	call	#_compile_error
08c94     23 FA 05 F6 | 	mov	result1, #35
08c98     58 01 90 FD | 	jmp	#LR__0774
08c9c                 | LR__0770
08c9c     01 20 66 F6 | 	neg	local02, #1
08ca0                 | ' j=-1
08ca0                 | ' for i=0 to varnum-1
08ca0     00 22 06 F6 | 	mov	local03, #0
08ca4     35 00 00 FF 
08ca8     38 E4 05 F1 | 	add	objptr, ##27192
08cac     F2 24 02 FB | 	rdlong	local04, objptr
08cb0     35 00 00 FF 
08cb4     38 E4 85 F1 | 	sub	objptr, ##27192
08cb8                 | LR__0771
08cb8     12 23 12 F2 | 	cmp	local03, local04 wc
08cbc     38 00 90 3D |  if_ae	jmp	#LR__0772
08cc0                 | '   if variables(i).name=varname$ then j=i : exit
08cc0     11 15 02 F6 | 	mov	arg02, local03
08cc4     04 14 66 F0 | 	shl	arg02, #4
08cc8     15 00 00 FF 
08ccc     28 E4 05 F1 | 	add	objptr, ##10792
08cd0     F2 14 02 F1 | 	add	arg02, objptr
08cd4     0A 13 02 FB | 	rdlong	arg01, arg02
08cd8     0F 15 02 F6 | 	mov	arg02, local01
08cdc     15 00 00 FF 
08ce0     28 E4 85 F1 | 	sub	objptr, ##10792
08ce4     0C 61 B1 FD | 	call	#__system___string_cmp
08ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
08cec     11 21 02 A6 |  if_e	mov	local02, local03
08cf0     01 22 06 51 |  if_ne	add	local03, #1
08cf4     C0 FF 9F 5D |  if_ne	jmp	#LR__0771
08cf8                 | LR__0772
08cf8                 | ' if j=-1 then compile_error(35) : return 35
08cf8     FF FF 7F FF 
08cfc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08d00     10 00 90 5D |  if_ne	jmp	#LR__0773
08d04     23 12 06 F6 | 	mov	arg01, #35
08d08     08 DE BF FD | 	call	#_compile_error
08d0c     23 FA 05 F6 | 	mov	result1, #35
08d10     E0 00 90 FD | 	jmp	#LR__0774
08d14                 | LR__0773
08d14     4A 00 00 FF 
08d18     AC E4 05 F1 | 	add	objptr, ##38060
08d1c     F2 24 02 FB | 	rdlong	local04, objptr
08d20     12 23 02 F6 | 	mov	local03, local04
08d24     01 22 66 F0 | 	shl	local03, #1
08d28     12 23 02 F1 | 	add	local03, local04
08d2c     02 22 66 F0 | 	shl	local03, #2
08d30     03 00 00 FF 
08d34     00 E4 85 F1 | 	sub	objptr, ##1536
08d38     F2 22 02 F1 | 	add	local03, objptr
08d3c     08 22 06 F1 | 	add	local03, #8
08d40     11 39 68 FC | 	wrlong	#28, local03
08d44     03 00 00 FF 
08d48     00 E4 05 F1 | 	add	objptr, ##1536
08d4c     F2 24 02 FB | 	rdlong	local04, objptr
08d50     12 23 02 F6 | 	mov	local03, local04
08d54     01 22 66 F0 | 	shl	local03, #1
08d58     12 23 02 F1 | 	add	local03, local04
08d5c     02 22 66 F0 | 	shl	local03, #2
08d60     03 00 00 FF 
08d64     00 E4 85 F1 | 	sub	objptr, ##1536
08d68     F2 22 02 F1 | 	add	local03, objptr
08d6c     11 21 62 FC | 	wrlong	local02, local03
08d70     03 00 00 FF 
08d74     00 E4 05 F1 | 	add	objptr, ##1536
08d78     F2 24 02 FB | 	rdlong	local04, objptr
08d7c     01 24 06 F1 | 	add	local04, #1
08d80     F2 24 62 FC | 	wrlong	local04, objptr
08d84     12 23 02 F6 | 	mov	local03, local04
08d88     01 22 66 F0 | 	shl	local03, #1
08d8c     12 23 02 F1 | 	add	local03, local04
08d90     02 22 66 F0 | 	shl	local03, #2
08d94     03 00 00 FF 
08d98     00 E4 85 F1 | 	sub	objptr, ##1536
08d9c     F2 22 02 F1 | 	add	local03, objptr
08da0     08 22 06 F1 | 	add	local03, #8
08da4     11 97 68 FC | 	wrlong	#75, local03
08da8     03 00 00 FF 
08dac     00 E4 05 F1 | 	add	objptr, ##1536
08db0     F2 24 02 FB | 	rdlong	local04, objptr
08db4     12 23 02 F6 | 	mov	local03, local04
08db8     01 22 66 F0 | 	shl	local03, #1
08dbc     12 23 02 F1 | 	add	local03, local04
08dc0     02 22 66 F0 | 	shl	local03, #2
08dc4     03 00 00 FF 
08dc8     00 E4 85 F1 | 	sub	objptr, ##1536
08dcc     F2 22 02 F1 | 	add	local03, objptr
08dd0     11 01 68 FC | 	wrlong	#0, local03
08dd4     03 00 00 FF 
08dd8     00 E4 05 F1 | 	add	objptr, ##1536
08ddc     F2 24 02 FB | 	rdlong	local04, objptr
08de0     01 24 06 F1 | 	add	local04, #1
08de4     F2 24 62 FC | 	wrlong	local04, objptr
08de8     4A 00 00 FF 
08dec     AC E4 85 F1 | 	sub	objptr, ##38060
08df0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08df0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08df0                 | ' return 0
08df0     00 FA 05 F6 | 	mov	result1, #0
08df4                 | LR__0774
08df4     A7 F0 03 F6 | 	mov	ptra, fp
08df8     B2 00 A0 FD | 	call	#popregs_
08dfc                 | _compile_next_ret
08dfc     2D 00 64 FD | 	ret
08e00                 | 
08e00                 | ' 
08e00                 | ' 
08e00                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08e00                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08e00                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08e00                 | ' 
08e00                 | ' function compile_gosub() as ulong
08e00                 | _compile_gosub
08e00     01 4A 05 F6 | 	mov	COUNT_, #1
08e04     A8 00 A0 FD | 	call	#pushregs_
08e08     4A 00 00 FF 
08e0c     AC E4 05 F1 | 	add	objptr, ##38060
08e10     F2 1E 02 FB | 	rdlong	local01, objptr
08e14     0F FB 01 F6 | 	mov	result1, local01
08e18     01 FA 65 F0 | 	shl	result1, #1
08e1c     0F FB 01 F1 | 	add	result1, local01
08e20     02 FA 65 F0 | 	shl	result1, #2
08e24     03 00 00 FF 
08e28     00 E4 85 F1 | 	sub	objptr, ##1536
08e2c     F2 FA 01 F1 | 	add	result1, objptr
08e30     08 FA 05 F1 | 	add	result1, #8
08e34     FD 52 69 FC | 	wrlong	#169, result1
08e38     03 00 00 FF 
08e3c     00 E4 05 F1 | 	add	objptr, ##1536
08e40     F2 1E 02 FB | 	rdlong	local01, objptr
08e44     01 1E 06 F1 | 	add	local01, #1
08e48     F2 1E 62 FC | 	wrlong	local01, objptr
08e4c     4A 00 00 FF 
08e50     AC E4 85 F1 | 	sub	objptr, ##38060
08e54     10 00 B0 FD | 	call	#_compile_goto
08e58                 | ' 
08e58                 | ' compiledline(lineptr).result_type=token_gosub
08e58                 | ' lineptr+=1
08e58                 | ' compile_goto()
08e58                 | ' return 0
08e58     00 FA 05 F6 | 	mov	result1, #0
08e5c     A7 F0 03 F6 | 	mov	ptra, fp
08e60     B2 00 A0 FD | 	call	#popregs_
08e64                 | _compile_gosub_ret
08e64     2D 00 64 FD | 	ret
08e68                 | 
08e68                 | ' 
08e68                 | ' function compile_goto( ) as ulong
08e68                 | _compile_goto
08e68     03 4A 05 F6 | 	mov	COUNT_, #3
08e6c     A8 00 A0 FD | 	call	#pushregs_
08e70     34 F0 07 F1 | 	add	ptra, #52
08e74                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08e74     37 00 00 FF 
08e78     74 E4 05 F1 | 	add	objptr, ##28276
08e7c     F2 16 02 FB | 	rdlong	arg03, objptr
08e80     03 16 66 F0 | 	shl	arg03, #3
08e84     02 00 00 FF 
08e88     38 E4 85 F1 | 	sub	objptr, ##1080
08e8c     F2 16 02 F1 | 	add	arg03, objptr
08e90     04 16 06 F1 | 	add	arg03, #4
08e94     0B 17 02 FB | 	rdlong	arg03, arg03
08e98     01 00 00 FF 
08e9c     00 16 0E F2 | 	cmp	arg03, ##512 wz
08ea0     35 00 00 FF 
08ea4     3C E4 85 F1 | 	sub	objptr, ##27196
08ea8     CC 02 90 5D |  if_ne	jmp	#LR__0785
08eac     37 00 00 FF 
08eb0     74 E4 05 F1 | 	add	objptr, ##28276
08eb4     F2 16 02 FB | 	rdlong	arg03, objptr
08eb8     01 16 06 F1 | 	add	arg03, #1
08ebc     03 16 66 F0 | 	shl	arg03, #3
08ec0     02 00 00 FF 
08ec4     38 E4 85 F1 | 	sub	objptr, ##1080
08ec8     F2 16 02 F1 | 	add	arg03, objptr
08ecc     04 16 06 F1 | 	add	arg03, #4
08ed0     0B 17 02 FB | 	rdlong	arg03, arg03
08ed4     FE 17 0E F2 | 	cmp	arg03, #510 wz
08ed8     35 00 00 FF 
08edc     3C E4 85 F1 | 	sub	objptr, ##27196
08ee0     94 02 90 5D |  if_ne	jmp	#LR__0785
08ee4     37 00 00 FF 
08ee8     74 E4 05 F1 | 	add	objptr, ##28276
08eec     F2 16 02 FB | 	rdlong	arg03, objptr
08ef0     03 16 66 F0 | 	shl	arg03, #3
08ef4     02 00 00 FF 
08ef8     38 E4 85 F1 | 	sub	objptr, ##1080
08efc     F2 16 02 F1 | 	add	arg03, objptr
08f00     0B 13 02 FB | 	rdlong	arg01, arg03
08f04     00 14 06 F6 | 	mov	arg02, #0
08f08     35 00 00 FF 
08f0c     3C E4 85 F1 | 	sub	objptr, ##27196
08f10     78 90 B1 FD | 	call	#__system____builtin_atoi
08f14     04 4E 05 F1 | 	add	fp, #4
08f18     A7 FA 61 FC | 	wrlong	result1, fp
08f1c     4A 00 00 FF 
08f20     AC E4 05 F1 | 	add	objptr, ##38060
08f24     F2 1E 02 FB | 	rdlong	local01, objptr
08f28     0F 21 02 F6 | 	mov	local02, local01
08f2c     01 20 66 F0 | 	shl	local02, #1
08f30     0F 21 02 F1 | 	add	local02, local01
08f34     02 20 66 F0 | 	shl	local02, #2
08f38     03 00 00 FF 
08f3c     00 E4 85 F1 | 	sub	objptr, ##1536
08f40     F2 20 02 F1 | 	add	local02, objptr
08f44     08 20 06 F1 | 	add	local02, #8
08f48     10 9D 68 FC | 	wrlong	#78, local02
08f4c     03 00 00 FF 
08f50     08 E4 05 F1 | 	add	objptr, ##1544
08f54     F2 22 02 FB | 	rdlong	local03, objptr
08f58     4A 00 00 FF 
08f5c     B4 E4 85 F1 | 	sub	objptr, ##38068
08f60     04 4E 05 F1 | 	add	fp, #4
08f64     A7 22 62 FC | 	wrlong	local03, fp
08f68     08 4E 85 F1 | 	sub	fp, #8
08f6c                 | ' 
08f6c                 | '   gotoline=val%(lparts(ct).part$) 
08f6c                 | '   compiledline(lineptr).result_type=token_fast_goto
08f6c                 | ' ' now find a pointer to goto
08f6c                 | '   gotoptr=programstart
08f6c                 | '   do
08f6c                 | LR__0780
08f6c     10 4E 05 F1 | 	add	fp, #16
08f70     A7 12 02 F6 | 	mov	arg01, fp
08f74     08 4E 85 F1 | 	sub	fp, #8
08f78     A7 14 02 FB | 	rdlong	arg02, fp
08f7c     08 4E 85 F1 | 	sub	fp, #8
08f80     18 16 06 F6 | 	mov	arg03, #24
08f84     0B 00 00 FF 
08f88     CC E4 05 F1 | 	add	objptr, ##5836
08f8c     FC 51 B1 FD | 	call	#_psram_spin2_read1
08f90     0B 00 00 FF 
08f94     CC E4 85 F1 | 	sub	objptr, ##5836
08f98                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08f98                 | '     if gotoheader(0)<>$FFFFFFFF then
08f98     10 4E 05 F1 | 	add	fp, #16
08f9c     A7 22 02 FB | 	rdlong	local03, fp
08fa0     10 4E 85 F1 | 	sub	fp, #16
08fa4     FF FF 7F FF 
08fa8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08fac     24 00 90 AD |  if_e	jmp	#LR__0781
08fb0     08 4E 05 F1 | 	add	fp, #8
08fb4     A7 22 02 FB | 	rdlong	local03, fp
08fb8     04 4E 05 F1 | 	add	fp, #4
08fbc     A7 22 62 FC | 	wrlong	local03, fp
08fc0     18 4E 05 F1 | 	add	fp, #24
08fc4     A7 22 02 FB | 	rdlong	local03, fp
08fc8     1C 4E 85 F1 | 	sub	fp, #28
08fcc     A7 22 62 FC | 	wrlong	local03, fp
08fd0     08 4E 85 F1 | 	sub	fp, #8
08fd4                 | LR__0781
08fd4     24 4E 05 F1 | 	add	fp, #36
08fd8     A7 22 02 FB | 	rdlong	local03, fp
08fdc     24 4E 85 F1 | 	sub	fp, #36
08fe0     FF FF 3F FF 
08fe4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08fe8     10 4E 05 51 |  if_ne	add	fp, #16
08fec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08ff0     10 4E 85 51 |  if_ne	sub	fp, #16
08ff4     FF FF 7F 5F 
08ff8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08ffc     1C 00 90 AD |  if_e	jmp	#LR__0782
09000     10 4E 05 F1 | 	add	fp, #16
09004     A7 22 02 FB | 	rdlong	local03, fp
09008     0C 4E 85 F1 | 	sub	fp, #12
0900c     A7 20 02 FB | 	rdlong	local02, fp
09010     04 4E 85 F1 | 	sub	fp, #4
09014     10 23 0A F2 | 	cmp	local03, local02 wz
09018     50 FF 9F 5D |  if_ne	jmp	#LR__0780
0901c                 | LR__0782
0901c                 | '   if gotoheader(0)=gotoline then
0901c     10 4E 05 F1 | 	add	fp, #16
09020     A7 22 02 FB | 	rdlong	local03, fp
09024     0C 4E 85 F1 | 	sub	fp, #12
09028     A7 1E 02 FB | 	rdlong	local01, fp
0902c     04 4E 85 F1 | 	sub	fp, #4
09030     0F 23 0A F2 | 	cmp	local03, local01 wz
09034     7C 00 90 5D |  if_ne	jmp	#LR__0783
09038     4A 00 00 FF 
0903c     AC E4 05 F1 | 	add	objptr, ##38060
09040     F2 1E 02 FB | 	rdlong	local01, objptr
09044     0F 21 02 F6 | 	mov	local02, local01
09048     01 20 66 F0 | 	shl	local02, #1
0904c     0F 21 02 F1 | 	add	local02, local01
09050     02 20 66 F0 | 	shl	local02, #2
09054     03 00 00 FF 
09058     00 E4 85 F1 | 	sub	objptr, ##1536
0905c     F2 20 02 F1 | 	add	local02, objptr
09060     0C 4E 05 F1 | 	add	fp, #12
09064     A7 22 02 FB | 	rdlong	local03, fp
09068     10 23 62 FC | 	wrlong	local03, local02
0906c     03 00 00 FF 
09070     00 E4 05 F1 | 	add	objptr, ##1536
09074     F2 1E 02 FB | 	rdlong	local01, objptr
09078     0F 21 02 F6 | 	mov	local02, local01
0907c     01 20 66 F0 | 	shl	local02, #1
09080     0F 21 02 F1 | 	add	local02, local01
09084     02 20 66 F0 | 	shl	local02, #2
09088     03 00 00 FF 
0908c     00 E4 85 F1 | 	sub	objptr, ##1536
09090     F2 20 02 F1 | 	add	local02, objptr
09094     08 4E 85 F1 | 	sub	fp, #8
09098     A7 22 02 FB | 	rdlong	local03, fp
0909c     04 4E 85 F1 | 	sub	fp, #4
090a0     04 20 06 F1 | 	add	local02, #4
090a4     10 23 62 FC | 	wrlong	local03, local02
090a8     47 00 00 FF 
090ac     AC E4 85 F1 | 	sub	objptr, ##36524
090b0     A4 00 90 FD | 	jmp	#LR__0784
090b4                 | LR__0783
090b4     4A 00 00 FF 
090b8     AC E4 05 F1 | 	add	objptr, ##38060
090bc     F2 1E 02 FB | 	rdlong	local01, objptr
090c0     0F 21 02 F6 | 	mov	local02, local01
090c4     01 20 66 F0 | 	shl	local02, #1
090c8     0F 21 02 F1 | 	add	local02, local01
090cc     02 20 66 F0 | 	shl	local02, #2
090d0     03 00 00 FF 
090d4     00 E4 85 F1 | 	sub	objptr, ##1536
090d8     F2 20 02 F1 | 	add	local02, objptr
090dc     00 00 C0 FF 
090e0     10 01 68 FC | 	wrlong	##-2147483648, local02
090e4     03 00 00 FF 
090e8     00 E4 05 F1 | 	add	objptr, ##1536
090ec     F2 1E 02 FB | 	rdlong	local01, objptr
090f0     0F 21 02 F6 | 	mov	local02, local01
090f4     01 20 66 F0 | 	shl	local02, #1
090f8     0F 21 02 F1 | 	add	local02, local01
090fc     02 20 66 F0 | 	shl	local02, #2
09100     03 00 00 FF 
09104     00 E4 85 F1 | 	sub	objptr, ##1536
09108     F2 20 02 F1 | 	add	local02, objptr
0910c     04 4E 05 F1 | 	add	fp, #4
09110     A7 22 02 FB | 	rdlong	local03, fp
09114     04 4E 85 F1 | 	sub	fp, #4
09118     04 20 06 F1 | 	add	local02, #4
0911c     10 23 62 FC | 	wrlong	local03, local02
09120     03 00 00 FF 
09124     00 E4 05 F1 | 	add	objptr, ##1536
09128     F2 1E 02 FB | 	rdlong	local01, objptr
0912c     0F 21 02 F6 | 	mov	local02, local01
09130     01 20 66 F0 | 	shl	local02, #1
09134     0F 21 02 F1 | 	add	local02, local01
09138     02 20 66 F0 | 	shl	local02, #2
0913c     03 00 00 FF 
09140     00 E4 85 F1 | 	sub	objptr, ##1536
09144     F2 20 02 F1 | 	add	local02, objptr
09148     08 20 06 F1 | 	add	local02, #8
0914c     10 A7 68 FC | 	wrlong	#83, local02
09150     47 00 00 FF 
09154     AC E4 85 F1 | 	sub	objptr, ##36524
09158                 | LR__0784
09158     4A 00 00 FF 
0915c     AC E4 05 F1 | 	add	objptr, ##38060
09160     F2 22 02 FB | 	rdlong	local03, objptr
09164     01 22 06 F1 | 	add	local03, #1
09168     F2 22 62 FC | 	wrlong	local03, objptr
0916c     4A 00 00 FF 
09170     AC E4 85 F1 | 	sub	objptr, ##38060
09174     D0 00 90 FD | 	jmp	#LR__0786
09178                 | LR__0785
09178     DC 00 B0 FD | 	call	#_expr
0917c     30 4E 05 F1 | 	add	fp, #48
09180     A7 9E 68 FC | 	wrlong	#79, fp
09184     08 4E 85 F1 | 	sub	fp, #8
09188     A7 00 68 FC | 	wrlong	#0, fp
0918c     04 4E 05 F1 | 	add	fp, #4
09190     A7 22 02 FB | 	rdlong	local03, fp
09194     04 4E 05 F1 | 	add	fp, #4
09198     A7 1E 02 FB | 	rdlong	local01, fp
0919c     30 4E 85 F1 | 	sub	fp, #48
091a0     4A 00 00 FF 
091a4     AC E4 05 F1 | 	add	objptr, ##38060
091a8     F2 20 02 FB | 	rdlong	local02, objptr
091ac     10 17 02 F6 | 	mov	arg03, local02
091b0     01 16 66 F0 | 	shl	arg03, #1
091b4     10 17 02 F1 | 	add	arg03, local02
091b8     02 16 66 F0 | 	shl	arg03, #2
091bc     03 00 00 FF 
091c0     00 E4 85 F1 | 	sub	objptr, ##1536
091c4     F2 16 02 F1 | 	add	arg03, objptr
091c8     0B 01 68 FC | 	wrlong	#0, arg03
091cc     03 00 00 FF 
091d0     00 E4 05 F1 | 	add	objptr, ##1536
091d4     F2 20 02 FB | 	rdlong	local02, objptr
091d8     10 17 02 F6 | 	mov	arg03, local02
091dc     01 16 66 F0 | 	shl	arg03, #1
091e0     10 17 02 F1 | 	add	arg03, local02
091e4     02 16 66 F0 | 	shl	arg03, #2
091e8     03 00 00 FF 
091ec     00 E4 85 F1 | 	sub	objptr, ##1536
091f0     F2 16 02 F1 | 	add	arg03, objptr
091f4     04 16 06 F1 | 	add	arg03, #4
091f8     0B 23 62 FC | 	wrlong	local03, arg03
091fc     03 00 00 FF 
09200     00 E4 05 F1 | 	add	objptr, ##1536
09204     F2 22 02 FB | 	rdlong	local03, objptr
09208     11 21 02 F6 | 	mov	local02, local03
0920c     01 20 66 F0 | 	shl	local02, #1
09210     11 21 02 F1 | 	add	local02, local03
09214     02 20 66 F0 | 	shl	local02, #2
09218     03 00 00 FF 
0921c     00 E4 85 F1 | 	sub	objptr, ##1536
09220     F2 20 02 F1 | 	add	local02, objptr
09224     08 20 06 F1 | 	add	local02, #8
09228     10 1F 62 FC | 	wrlong	local01, local02
0922c     03 00 00 FF 
09230     00 E4 05 F1 | 	add	objptr, ##1536
09234     F2 22 02 FB | 	rdlong	local03, objptr
09238     01 22 06 F1 | 	add	local03, #1
0923c     F2 22 62 FC | 	wrlong	local03, objptr
09240     4A 00 00 FF 
09244     AC E4 85 F1 | 	sub	objptr, ##38060
09248                 | LR__0786
09248                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
09248                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
09248                 | ' return 0
09248     00 FA 05 F6 | 	mov	result1, #0
0924c     A7 F0 03 F6 | 	mov	ptra, fp
09250     B2 00 A0 FD | 	call	#popregs_
09254                 | _compile_goto_ret
09254     2D 00 64 FD | 	ret
09258                 | 
09258                 | ' 
09258                 | ' 
09258                 | ' 
09258                 | ' 
09258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09258                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
09258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09258                 | ' 
09258                 | ' 
09258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09258                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
09258                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09258                 | ' 
09258                 | ' 
09258                 | ' function expr() as integer 
09258                 | _expr
09258     07 4A 05 F6 | 	mov	COUNT_, #7
0925c     A8 00 A0 FD | 	call	#pushregs_
09260                 | _expr_enter
09260     37 00 00 FF 
09264     74 E4 05 F1 | 	add	objptr, ##28276
09268     F2 24 02 FB | 	rdlong	local04, objptr
0926c     03 24 66 F0 | 	shl	local04, #3
09270     02 00 00 FF 
09274     38 E4 85 F1 | 	sub	objptr, ##1080
09278     F2 24 02 F1 | 	add	local04, objptr
0927c     04 24 06 F1 | 	add	local04, #4
09280     12 27 02 FB | 	rdlong	local05, local04
09284                 | ' 
09284                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09284     FE 27 0E F2 | 	cmp	local05, #510 wz
09288     35 00 00 FF 
0928c     3C E4 85 F1 | 	sub	objptr, ##27196
09290     C4 00 90 5D |  if_ne	jmp	#LR__0790
09294     1D 1E 06 F6 | 	mov	local01, #29
09298     FF 22 06 F6 | 	mov	local03, #255
0929c     0F 29 02 F6 | 	mov	local06, local01
092a0     10 2B 02 F6 | 	mov	local07, local02
092a4     11 1F 02 F6 | 	mov	local01, local03
092a8     4A 00 00 FF 
092ac     AC E4 05 F1 | 	add	objptr, ##38060
092b0     F2 26 02 FB | 	rdlong	local05, objptr
092b4     13 25 02 F6 | 	mov	local04, local05
092b8     01 24 66 F0 | 	shl	local04, #1
092bc     13 25 02 F1 | 	add	local04, local05
092c0     02 24 66 F0 | 	shl	local04, #2
092c4     03 00 00 FF 
092c8     00 E4 85 F1 | 	sub	objptr, ##1536
092cc     F2 24 02 F1 | 	add	local04, objptr
092d0     12 29 62 FC | 	wrlong	local06, local04
092d4     03 00 00 FF 
092d8     00 E4 05 F1 | 	add	objptr, ##1536
092dc     F2 28 02 FB | 	rdlong	local06, objptr
092e0     14 27 02 F6 | 	mov	local05, local06
092e4     01 26 66 F0 | 	shl	local05, #1
092e8     14 27 02 F1 | 	add	local05, local06
092ec     02 26 66 F0 | 	shl	local05, #2
092f0     03 00 00 FF 
092f4     00 E4 85 F1 | 	sub	objptr, ##1536
092f8     F2 26 02 F1 | 	add	local05, objptr
092fc     04 26 06 F1 | 	add	local05, #4
09300     13 2B 62 FC | 	wrlong	local07, local05
09304     03 00 00 FF 
09308     00 E4 05 F1 | 	add	objptr, ##1536
0930c     F2 2A 02 FB | 	rdlong	local07, objptr
09310     15 29 02 F6 | 	mov	local06, local07
09314     01 28 66 F0 | 	shl	local06, #1
09318     15 29 02 F1 | 	add	local06, local07
0931c     02 28 66 F0 | 	shl	local06, #2
09320     03 00 00 FF 
09324     00 E4 85 F1 | 	sub	objptr, ##1536
09328     F2 28 02 F1 | 	add	local06, objptr
0932c     08 28 06 F1 | 	add	local06, #8
09330     14 1F 62 FC | 	wrlong	local01, local06
09334     03 00 00 FF 
09338     00 E4 05 F1 | 	add	objptr, ##1536
0933c     F2 28 02 FB | 	rdlong	local06, objptr
09340     01 28 06 F1 | 	add	local06, #1
09344     F2 28 62 FC | 	wrlong	local06, objptr
09348     4A 00 00 FF 
0934c     AC E4 85 F1 | 	sub	objptr, ##38060
09350     1D FA 05 F6 | 	mov	result1, #29
09354     54 01 90 FD | 	jmp	#LR__0793
09358                 | LR__0790
09358     00 1E 06 F6 | 	mov	local01, #0
0935c     58 01 B0 FD | 	call	#_addsub
09360     37 00 00 FF 
09364     74 E4 05 F1 | 	add	objptr, ##28276
09368     F2 24 02 FB | 	rdlong	local04, objptr
0936c     03 24 66 F0 | 	shl	local04, #3
09370     02 00 00 FF 
09374     38 E4 85 F1 | 	sub	objptr, ##1080
09378     F2 24 02 F1 | 	add	local04, objptr
0937c     04 24 06 F1 | 	add	local04, #4
09380     12 27 02 FB | 	rdlong	local05, local04
09384                 | ' t3.result.uresult=0
09384                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
09384                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
09384                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09384     35 00 00 FF 
09388     3C E4 85 F1 | 	sub	objptr, ##27196
0938c                 | LR__0791
0938c     1B 26 0E F2 | 	cmp	local05, #27 wz
09390     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09394     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09398     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0939c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
093a0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
093a4     00 01 90 5D |  if_ne	jmp	#LR__0792
093a8     37 00 00 FF 
093ac     74 E4 05 F1 | 	add	objptr, ##28276
093b0     F2 28 02 FB | 	rdlong	local06, objptr
093b4     01 28 06 F1 | 	add	local06, #1
093b8     F2 28 62 FC | 	wrlong	local06, objptr
093bc     37 00 00 FF 
093c0     74 E4 85 F1 | 	sub	objptr, ##28276
093c4     F0 00 B0 FD | 	call	#_addsub
093c8     13 23 02 F6 | 	mov	local03, local05
093cc     0F 29 02 F6 | 	mov	local06, local01
093d0     10 2B 02 F6 | 	mov	local07, local02
093d4     11 27 02 F6 | 	mov	local05, local03
093d8     4A 00 00 FF 
093dc     AC E4 05 F1 | 	add	objptr, ##38060
093e0     F2 24 02 FB | 	rdlong	local04, objptr
093e4     12 FB 01 F6 | 	mov	result1, local04
093e8     01 FA 65 F0 | 	shl	result1, #1
093ec     12 FB 01 F1 | 	add	result1, local04
093f0     02 FA 65 F0 | 	shl	result1, #2
093f4     03 00 00 FF 
093f8     00 E4 85 F1 | 	sub	objptr, ##1536
093fc     F2 FA 01 F1 | 	add	result1, objptr
09400     FD 28 62 FC | 	wrlong	local06, result1
09404     03 00 00 FF 
09408     00 E4 05 F1 | 	add	objptr, ##1536
0940c     F2 28 02 FB | 	rdlong	local06, objptr
09410     14 25 02 F6 | 	mov	local04, local06
09414     01 24 66 F0 | 	shl	local04, #1
09418     14 25 02 F1 | 	add	local04, local06
0941c     02 24 66 F0 | 	shl	local04, #2
09420     03 00 00 FF 
09424     00 E4 85 F1 | 	sub	objptr, ##1536
09428     F2 24 02 F1 | 	add	local04, objptr
0942c     04 24 06 F1 | 	add	local04, #4
09430     12 2B 62 FC | 	wrlong	local07, local04
09434     03 00 00 FF 
09438     00 E4 05 F1 | 	add	objptr, ##1536
0943c     F2 2A 02 FB | 	rdlong	local07, objptr
09440     15 29 02 F6 | 	mov	local06, local07
09444     01 28 66 F0 | 	shl	local06, #1
09448     15 29 02 F1 | 	add	local06, local07
0944c     02 28 66 F0 | 	shl	local06, #2
09450     03 00 00 FF 
09454     00 E4 85 F1 | 	sub	objptr, ##1536
09458     F2 28 02 F1 | 	add	local06, objptr
0945c     08 28 06 F1 | 	add	local06, #8
09460     14 27 62 FC | 	wrlong	local05, local06
09464     03 00 00 FF 
09468     00 E4 05 F1 | 	add	objptr, ##1536
0946c     F2 28 02 FB | 	rdlong	local06, objptr
09470     01 28 06 F1 | 	add	local06, #1
09474     F2 28 62 FC | 	wrlong	local06, objptr
09478     13 00 00 FF 
0947c     38 E4 85 F1 | 	sub	objptr, ##9784
09480     F2 24 02 FB | 	rdlong	local04, objptr
09484     03 24 66 F0 | 	shl	local04, #3
09488     02 00 00 FF 
0948c     38 E4 85 F1 | 	sub	objptr, ##1080
09490     F2 24 02 F1 | 	add	local04, objptr
09494     04 24 06 F1 | 	add	local04, #4
09498     12 27 02 FB | 	rdlong	local05, local04
0949c     35 00 00 FF 
094a0     3C E4 85 F1 | 	sub	objptr, ##27196
094a4     E4 FE 9F FD | 	jmp	#LR__0791
094a8                 | LR__0792
094a8                 | ' return 0  
094a8     00 FA 05 F6 | 	mov	result1, #0
094ac                 | LR__0793
094ac     A7 F0 03 F6 | 	mov	ptra, fp
094b0     B2 00 A0 FD | 	call	#popregs_
094b4                 | _expr_ret
094b4     2D 00 64 FD | 	ret
094b8                 | 
094b8                 | ' 
094b8                 | ' 
094b8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
094b8                 | ' 
094b8                 | ' function addsub() as integer 
094b8                 | _addsub
094b8     07 4A 05 F6 | 	mov	COUNT_, #7
094bc     A8 00 A0 FD | 	call	#pushregs_
094c0                 | _addsub_enter
094c0     00 1E 06 F6 | 	mov	local01, #0
094c4     50 01 B0 FD | 	call	#_muldiv
094c8     37 00 00 FF 
094cc     74 E4 05 F1 | 	add	objptr, ##28276
094d0     F2 24 02 FB | 	rdlong	local04, objptr
094d4     03 24 66 F0 | 	shl	local04, #3
094d8     02 00 00 FF 
094dc     38 E4 85 F1 | 	sub	objptr, ##1080
094e0     F2 24 02 F1 | 	add	local04, objptr
094e4     04 24 06 F1 | 	add	local04, #4
094e8     12 27 02 FB | 	rdlong	local05, local04
094ec                 | ' t3.result.uresult=0
094ec                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
094ec                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
094ec                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
094ec     35 00 00 FF 
094f0     3C E4 85 F1 | 	sub	objptr, ##27196
094f4                 | LR__0800
094f4     01 26 0E F2 | 	cmp	local05, #1 wz
094f8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
094fc     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09500     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09504     00 01 90 5D |  if_ne	jmp	#LR__0801
09508     37 00 00 FF 
0950c     74 E4 05 F1 | 	add	objptr, ##28276
09510     F2 24 02 FB | 	rdlong	local04, objptr
09514     01 24 06 F1 | 	add	local04, #1
09518     F2 24 62 FC | 	wrlong	local04, objptr
0951c     37 00 00 FF 
09520     74 E4 85 F1 | 	sub	objptr, ##28276
09524     F0 00 B0 FD | 	call	#_muldiv
09528     13 23 02 F6 | 	mov	local03, local05
0952c     0F 29 02 F6 | 	mov	local06, local01
09530     10 2B 02 F6 | 	mov	local07, local02
09534     11 27 02 F6 | 	mov	local05, local03
09538     4A 00 00 FF 
0953c     AC E4 05 F1 | 	add	objptr, ##38060
09540     F2 24 02 FB | 	rdlong	local04, objptr
09544     12 FB 01 F6 | 	mov	result1, local04
09548     01 FA 65 F0 | 	shl	result1, #1
0954c     12 FB 01 F1 | 	add	result1, local04
09550     02 FA 65 F0 | 	shl	result1, #2
09554     03 00 00 FF 
09558     00 E4 85 F1 | 	sub	objptr, ##1536
0955c     F2 FA 01 F1 | 	add	result1, objptr
09560     FD 28 62 FC | 	wrlong	local06, result1
09564     03 00 00 FF 
09568     00 E4 05 F1 | 	add	objptr, ##1536
0956c     F2 28 02 FB | 	rdlong	local06, objptr
09570     14 25 02 F6 | 	mov	local04, local06
09574     01 24 66 F0 | 	shl	local04, #1
09578     14 25 02 F1 | 	add	local04, local06
0957c     02 24 66 F0 | 	shl	local04, #2
09580     03 00 00 FF 
09584     00 E4 85 F1 | 	sub	objptr, ##1536
09588     F2 24 02 F1 | 	add	local04, objptr
0958c     04 24 06 F1 | 	add	local04, #4
09590     12 2B 62 FC | 	wrlong	local07, local04
09594     03 00 00 FF 
09598     00 E4 05 F1 | 	add	objptr, ##1536
0959c     F2 2A 02 FB | 	rdlong	local07, objptr
095a0     15 29 02 F6 | 	mov	local06, local07
095a4     01 28 66 F0 | 	shl	local06, #1
095a8     15 29 02 F1 | 	add	local06, local07
095ac     02 28 66 F0 | 	shl	local06, #2
095b0     03 00 00 FF 
095b4     00 E4 85 F1 | 	sub	objptr, ##1536
095b8     F2 28 02 F1 | 	add	local06, objptr
095bc     08 28 06 F1 | 	add	local06, #8
095c0     14 27 62 FC | 	wrlong	local05, local06
095c4     03 00 00 FF 
095c8     00 E4 05 F1 | 	add	objptr, ##1536
095cc     F2 28 02 FB | 	rdlong	local06, objptr
095d0     01 28 06 F1 | 	add	local06, #1
095d4     F2 28 62 FC | 	wrlong	local06, objptr
095d8     13 00 00 FF 
095dc     38 E4 85 F1 | 	sub	objptr, ##9784
095e0     F2 24 02 FB | 	rdlong	local04, objptr
095e4     03 24 66 F0 | 	shl	local04, #3
095e8     02 00 00 FF 
095ec     38 E4 85 F1 | 	sub	objptr, ##1080
095f0     F2 24 02 F1 | 	add	local04, objptr
095f4     04 24 06 F1 | 	add	local04, #4
095f8     12 27 02 FB | 	rdlong	local05, local04
095fc     35 00 00 FF 
09600     3C E4 85 F1 | 	sub	objptr, ##27196
09604     EC FE 9F FD | 	jmp	#LR__0800
09608                 | LR__0801
09608                 | '   return 0
09608     00 FA 05 F6 | 	mov	result1, #0
0960c     A7 F0 03 F6 | 	mov	ptra, fp
09610     B2 00 A0 FD | 	call	#popregs_
09614                 | _addsub_ret
09614     2D 00 64 FD | 	ret
09618                 | 
09618                 | ' 
09618                 | ' sub muldiv()
09618                 | _muldiv
09618     08 4A 05 F6 | 	mov	COUNT_, #8
0961c     A8 00 A0 FD | 	call	#pushregs_
09620                 | _muldiv_enter
09620     00 1E 06 F6 | 	mov	local01, #0
09624     58 01 B0 FD | 	call	#_getvalue
09628     37 00 00 FF 
0962c     74 E4 05 F1 | 	add	objptr, ##28276
09630     F2 24 02 FB | 	rdlong	local04, objptr
09634     03 24 66 F0 | 	shl	local04, #3
09638     02 00 00 FF 
0963c     38 E4 85 F1 | 	sub	objptr, ##1080
09640     F2 24 02 F1 | 	add	local04, objptr
09644     04 24 06 F1 | 	add	local04, #4
09648     12 27 02 FB | 	rdlong	local05, local04
0964c                 | ' t3.result.uresult=0
0964c                 | ' getvalue()    
0964c                 | ' op = lparts(ct).token
0964c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0964c     35 00 00 FF 
09650     3C E4 85 F1 | 	sub	objptr, ##27196
09654                 | LR__0810
09654     05 26 0E F2 | 	cmp	local05, #5 wz
09658     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0965c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09660     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09664     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09668     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0966c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09670     00 01 90 5D |  if_ne	jmp	#LR__0811
09674     37 00 00 FF 
09678     74 E4 05 F1 | 	add	objptr, ##28276
0967c     F2 24 02 FB | 	rdlong	local04, objptr
09680     01 24 06 F1 | 	add	local04, #1
09684     F2 24 62 FC | 	wrlong	local04, objptr
09688     37 00 00 FF 
0968c     74 E4 85 F1 | 	sub	objptr, ##28276
09690     EC 00 B0 FD | 	call	#_getvalue
09694     13 23 02 F6 | 	mov	local03, local05
09698     0F 29 02 F6 | 	mov	local06, local01
0969c     10 2B 02 F6 | 	mov	local07, local02
096a0     11 27 02 F6 | 	mov	local05, local03
096a4     4A 00 00 FF 
096a8     AC E4 05 F1 | 	add	objptr, ##38060
096ac     F2 24 02 FB | 	rdlong	local04, objptr
096b0     12 2D 02 F6 | 	mov	local08, local04
096b4     01 2C 66 F0 | 	shl	local08, #1
096b8     12 2D 02 F1 | 	add	local08, local04
096bc     02 2C 66 F0 | 	shl	local08, #2
096c0     03 00 00 FF 
096c4     00 E4 85 F1 | 	sub	objptr, ##1536
096c8     F2 2C 02 F1 | 	add	local08, objptr
096cc     16 29 62 FC | 	wrlong	local06, local08
096d0     03 00 00 FF 
096d4     00 E4 05 F1 | 	add	objptr, ##1536
096d8     F2 2C 02 FB | 	rdlong	local08, objptr
096dc     16 29 02 F6 | 	mov	local06, local08
096e0     01 28 66 F0 | 	shl	local06, #1
096e4     16 29 02 F1 | 	add	local06, local08
096e8     02 28 66 F0 | 	shl	local06, #2
096ec     03 00 00 FF 
096f0     00 E4 85 F1 | 	sub	objptr, ##1536
096f4     F2 28 02 F1 | 	add	local06, objptr
096f8     04 28 06 F1 | 	add	local06, #4
096fc     14 2B 62 FC | 	wrlong	local07, local06
09700     03 00 00 FF 
09704     00 E4 05 F1 | 	add	objptr, ##1536
09708     F2 2C 02 FB | 	rdlong	local08, objptr
0970c     16 2B 02 F6 | 	mov	local07, local08
09710     01 2A 66 F0 | 	shl	local07, #1
09714     16 2B 02 F1 | 	add	local07, local08
09718     02 2A 66 F0 | 	shl	local07, #2
0971c     03 00 00 FF 
09720     00 E4 85 F1 | 	sub	objptr, ##1536
09724     F2 2A 02 F1 | 	add	local07, objptr
09728     08 2A 06 F1 | 	add	local07, #8
0972c     15 27 62 FC | 	wrlong	local05, local07
09730     03 00 00 FF 
09734     00 E4 05 F1 | 	add	objptr, ##1536
09738     F2 28 02 FB | 	rdlong	local06, objptr
0973c     01 28 06 F1 | 	add	local06, #1
09740     F2 28 62 FC | 	wrlong	local06, objptr
09744     13 00 00 FF 
09748     38 E4 85 F1 | 	sub	objptr, ##9784
0974c     F2 24 02 FB | 	rdlong	local04, objptr
09750     03 24 66 F0 | 	shl	local04, #3
09754     02 00 00 FF 
09758     38 E4 85 F1 | 	sub	objptr, ##1080
0975c     F2 24 02 F1 | 	add	local04, objptr
09760     04 24 06 F1 | 	add	local04, #4
09764     12 27 02 FB | 	rdlong	local05, local04
09768     35 00 00 FF 
0976c     3C E4 85 F1 | 	sub	objptr, ##27196
09770     E0 FE 9F FD | 	jmp	#LR__0810
09774                 | LR__0811
09774     A7 F0 03 F6 | 	mov	ptra, fp
09778     B2 00 A0 FD | 	call	#popregs_
0977c                 | _muldiv_ret
0977c     2D 00 64 FD | 	ret
09780                 | 
09780                 | ' 
09780                 | ' sub getvalue() 
09780                 | _getvalue
09780     0B 4A 05 F6 | 	mov	COUNT_, #11
09784     A8 00 A0 FD | 	call	#pushregs_
09788                 | _getvalue_enter
09788     01 24 06 F6 | 	mov	local04, #1
0978c     00 1E 06 F6 | 	mov	local01, #0
09790     1D 22 06 F6 | 	mov	local03, #29
09794     37 00 00 FF 
09798     74 E4 05 F1 | 	add	objptr, ##28276
0979c     F2 16 02 FB | 	rdlong	arg03, objptr
097a0     03 16 66 F0 | 	shl	arg03, #3
097a4     02 00 00 FF 
097a8     38 E4 85 F1 | 	sub	objptr, ##1080
097ac     F2 16 02 F1 | 	add	arg03, objptr
097b0     04 16 06 F1 | 	add	arg03, #4
097b4     0B 27 02 FB | 	rdlong	local05, arg03
097b8                 | ' m=1
097b8                 | ' t1.result.uresult=0: t1.result_type=result_uint
097b8                 | ' op=lparts(ct).token
097b8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
097b8     02 26 0E F2 | 	cmp	local05, #2 wz
097bc     35 00 00 FF 
097c0     3C E4 85 F1 | 	sub	objptr, ##27196
097c4     38 00 90 5D |  if_ne	jmp	#LR__0820
097c8     01 24 66 F6 | 	neg	local04, #1
097cc     37 00 00 FF 
097d0     74 E4 05 F1 | 	add	objptr, ##28276
097d4     F2 26 02 FB | 	rdlong	local05, objptr
097d8     01 26 06 F1 | 	add	local05, #1
097dc     F2 26 62 FC | 	wrlong	local05, objptr
097e0     03 26 66 F0 | 	shl	local05, #3
097e4     02 00 00 FF 
097e8     38 E4 85 F1 | 	sub	objptr, ##1080
097ec     F2 26 02 F1 | 	add	local05, objptr
097f0     04 26 06 F1 | 	add	local05, #4
097f4     13 27 02 FB | 	rdlong	local05, local05
097f8     35 00 00 FF 
097fc     3C E4 85 F1 | 	sub	objptr, ##27196
09800                 | LR__0820
09800                 | ' select case op
09800     01 00 00 FF 
09804     00 26 0E F2 | 	cmp	local05, ##512 wz
09808     3C 00 90 AD |  if_e	jmp	#LR__0821
0980c     01 00 00 FF 
09810     01 26 0E F2 | 	cmp	local05, ##513 wz
09814     88 01 90 AD |  if_e	jmp	#LR__0824
09818     01 00 00 FF 
0981c     02 26 0E F2 | 	cmp	local05, ##514 wz
09820     3C 04 90 AD |  if_e	jmp	#LR__0831
09824     01 00 00 FF 
09828     03 26 0E F2 | 	cmp	local05, ##515 wz
0982c     A0 05 90 AD |  if_e	jmp	#LR__0834
09830     01 00 00 FF 
09834     04 26 0E F2 | 	cmp	local05, ##516 wz
09838     70 07 90 AD |  if_e	jmp	#LR__0839
0983c     15 26 0E F2 | 	cmp	local05, #21 wz
09840     90 07 90 AD |  if_e	jmp	#LR__0840
09844     00 08 90 FD | 	jmp	#LR__0841
09848                 | LR__0821
09848                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09848     01 24 0E F2 | 	cmp	local04, #1 wz
0984c     3C 00 90 5D |  if_ne	jmp	#LR__0822
09850     37 00 00 FF 
09854     74 E4 05 F1 | 	add	objptr, ##28276
09858     F2 26 02 FB | 	rdlong	local05, objptr
0985c     03 26 66 F0 | 	shl	local05, #3
09860     02 00 00 FF 
09864     38 E4 85 F1 | 	sub	objptr, ##1080
09868     F2 26 02 F1 | 	add	local05, objptr
0986c     13 13 02 FB | 	rdlong	arg01, local05
09870     00 14 06 F6 | 	mov	arg02, #0
09874     35 00 00 FF 
09878     3C E4 85 F1 | 	sub	objptr, ##27196
0987c     0C 87 B1 FD | 	call	#__system____builtin_atoi
09880     FD 24 02 FD | 	qmul	local04, result1
09884     18 1E 62 FD | 	getqx	local01
09888     1C 22 06 F6 | 	mov	local03, #28
0988c                 | LR__0822
0988c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0988c     FF FF 7F FF 
09890     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09894     3C 00 90 5D |  if_ne	jmp	#LR__0823
09898     37 00 00 FF 
0989c     74 E4 05 F1 | 	add	objptr, ##28276
098a0     F2 26 02 FB | 	rdlong	local05, objptr
098a4     03 26 66 F0 | 	shl	local05, #3
098a8     02 00 00 FF 
098ac     38 E4 85 F1 | 	sub	objptr, ##1080
098b0     F2 26 02 F1 | 	add	local05, objptr
098b4     13 13 02 FB | 	rdlong	arg01, local05
098b8     00 14 06 F6 | 	mov	arg02, #0
098bc     35 00 00 FF 
098c0     3C E4 85 F1 | 	sub	objptr, ##27196
098c4     C4 86 B1 FD | 	call	#__system____builtin_atoi
098c8     FD 24 02 FD | 	qmul	local04, result1
098cc     18 1E 62 FD | 	getqx	local01
098d0     1C 22 06 F6 | 	mov	local03, #28
098d4                 | LR__0823
098d4     0F 29 02 F6 | 	mov	local06, local01
098d8     10 2B 02 F6 | 	mov	local07, local02
098dc     11 27 02 F6 | 	mov	local05, local03
098e0     4A 00 00 FF 
098e4     AC E4 05 F1 | 	add	objptr, ##38060
098e8     F2 1E 02 FB | 	rdlong	local01, objptr
098ec     0F 25 02 F6 | 	mov	local04, local01
098f0     01 24 66 F0 | 	shl	local04, #1
098f4     0F 25 02 F1 | 	add	local04, local01
098f8     02 24 66 F0 | 	shl	local04, #2
098fc     03 00 00 FF 
09900     00 E4 85 F1 | 	sub	objptr, ##1536
09904     F2 24 02 F1 | 	add	local04, objptr
09908     12 29 62 FC | 	wrlong	local06, local04
0990c     03 00 00 FF 
09910     00 E4 05 F1 | 	add	objptr, ##1536
09914     F2 28 02 FB | 	rdlong	local06, objptr
09918     14 1F 02 F6 | 	mov	local01, local06
0991c     01 1E 66 F0 | 	shl	local01, #1
09920     14 1F 02 F1 | 	add	local01, local06
09924     02 1E 66 F0 | 	shl	local01, #2
09928     03 00 00 FF 
0992c     00 E4 85 F1 | 	sub	objptr, ##1536
09930     F2 1E 02 F1 | 	add	local01, objptr
09934     04 1E 06 F1 | 	add	local01, #4
09938     0F 2B 62 FC | 	wrlong	local07, local01
0993c     03 00 00 FF 
09940     00 E4 05 F1 | 	add	objptr, ##1536
09944     F2 2A 02 FB | 	rdlong	local07, objptr
09948     15 29 02 F6 | 	mov	local06, local07
0994c     01 28 66 F0 | 	shl	local06, #1
09950     15 29 02 F1 | 	add	local06, local07
09954     02 28 66 F0 | 	shl	local06, #2
09958     03 00 00 FF 
0995c     00 E4 85 F1 | 	sub	objptr, ##1536
09960     F2 28 02 F1 | 	add	local06, objptr
09964     08 28 06 F1 | 	add	local06, #8
09968     14 27 62 FC | 	wrlong	local05, local06
0996c     03 00 00 FF 
09970     00 E4 05 F1 | 	add	objptr, ##1536
09974     F2 28 02 FB | 	rdlong	local06, objptr
09978     01 28 06 F1 | 	add	local06, #1
0997c     F2 28 62 FC | 	wrlong	local06, objptr
09980     13 00 00 FF 
09984     38 E4 85 F1 | 	sub	objptr, ##9784
09988     F2 28 02 FB | 	rdlong	local06, objptr
0998c     01 28 06 F1 | 	add	local06, #1
09990     F2 28 62 FC | 	wrlong	local06, objptr
09994     37 00 00 FF 
09998     74 E4 85 F1 | 	sub	objptr, ##28276
0999c     CC 06 90 FD | 	jmp	#LR__0842
099a0                 | LR__0824
099a0                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
099a0     37 00 00 FF 
099a4     74 E4 05 F1 | 	add	objptr, ##28276
099a8     F2 16 02 FB | 	rdlong	arg03, objptr
099ac     03 16 66 F0 | 	shl	arg03, #3
099b0     02 00 00 FF 
099b4     38 E4 85 F1 | 	sub	objptr, ##1080
099b8     F2 16 02 F1 | 	add	arg03, objptr
099bc     0B 13 02 FB | 	rdlong	arg01, arg03
099c0     01 14 06 F6 | 	mov	arg02, #1
099c4     35 00 00 FF 
099c8     3C E4 85 F1 | 	sub	objptr, ##27196
099cc     0C 74 B1 FD | 	call	#__system__Left_S
099d0     FD 12 02 F6 | 	mov	arg01, result1
099d4     74 01 00 FF 
099d8     79 15 06 F6 | 	mov	arg02, ##@LR__5124
099dc     14 54 B1 FD | 	call	#__system___string_cmp
099e0     00 FA 0D F2 | 	cmp	result1, #0 wz
099e4     94 00 90 5D |  if_ne	jmp	#LR__0827
099e8     37 00 00 FF 
099ec     74 E4 05 F1 | 	add	objptr, ##28276
099f0     F2 2A 02 FB | 	rdlong	local07, objptr
099f4     15 29 02 F6 | 	mov	local06, local07
099f8     03 28 66 F0 | 	shl	local06, #3
099fc     02 00 00 FF 
09a00     38 E4 85 F1 | 	sub	objptr, ##1080
09a04     F2 28 02 F1 | 	add	local06, objptr
09a08     74 01 00 FF 
09a0c     7B 27 06 F6 | 	mov	local05, ##@LR__5125
09a10     03 2A 66 F0 | 	shl	local07, #3
09a14     F2 2A 02 F1 | 	add	local07, objptr
09a18     15 2B 02 FB | 	rdlong	local07, local07
09a1c     02 00 00 FF 
09a20     38 E4 05 F1 | 	add	objptr, ##1080
09a24     F2 1E 02 FB | 	rdlong	local01, objptr
09a28     03 1E 66 F0 | 	shl	local01, #3
09a2c     02 00 00 FF 
09a30     38 E4 85 F1 | 	sub	objptr, ##1080
09a34     F2 1E 02 F1 | 	add	local01, objptr
09a38     0F 13 02 FB | 	rdlong	arg01, local01
09a3c     35 00 00 FF 
09a40     3C E4 85 F1 | 	sub	objptr, ##27196
09a44     09 2D 02 F6 | 	mov	local08, arg01
09a48     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
09a4c                 | LR__0825
09a4c     16 FB C9 FA | 	rdbyte	result1, local08 wz
09a50     01 2C 06 51 |  if_ne	add	local08, #1
09a54     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
09a58                 | LR__0826
09a58     09 2D 82 F1 | 	sub	local08, arg01
09a5c     16 15 02 F6 | 	mov	arg02, local08
09a60     01 14 86 F1 | 	sub	arg02, #1
09a64     15 13 02 F6 | 	mov	arg01, local07
09a68     F8 73 B1 FD | 	call	#__system__Right_S
09a6c     FD 14 02 F6 | 	mov	arg02, result1
09a70     13 13 02 F6 | 	mov	arg01, local05
09a74     B0 53 B1 FD | 	call	#__system___string_concat
09a78     14 FB 61 FC | 	wrlong	result1, local06
09a7c                 | LR__0827
09a7c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09a7c     37 00 00 FF 
09a80     74 E4 05 F1 | 	add	objptr, ##28276
09a84     F2 16 02 FB | 	rdlong	arg03, objptr
09a88     03 16 66 F0 | 	shl	arg03, #3
09a8c     02 00 00 FF 
09a90     38 E4 85 F1 | 	sub	objptr, ##1080
09a94     F2 16 02 F1 | 	add	arg03, objptr
09a98     0B 13 02 FB | 	rdlong	arg01, arg03
09a9c     01 14 06 F6 | 	mov	arg02, #1
09aa0     35 00 00 FF 
09aa4     3C E4 85 F1 | 	sub	objptr, ##27196
09aa8     30 73 B1 FD | 	call	#__system__Left_S
09aac     FD 12 02 F6 | 	mov	arg01, result1
09ab0     74 01 00 FF 
09ab4     7E 15 06 F6 | 	mov	arg02, ##@LR__5126
09ab8     38 53 B1 FD | 	call	#__system___string_cmp
09abc     00 FA 0D F2 | 	cmp	result1, #0 wz
09ac0     94 00 90 5D |  if_ne	jmp	#LR__0830
09ac4     37 00 00 FF 
09ac8     74 E4 05 F1 | 	add	objptr, ##28276
09acc     F2 2A 02 FB | 	rdlong	local07, objptr
09ad0     15 29 02 F6 | 	mov	local06, local07
09ad4     03 28 66 F0 | 	shl	local06, #3
09ad8     02 00 00 FF 
09adc     38 E4 85 F1 | 	sub	objptr, ##1080
09ae0     F2 28 02 F1 | 	add	local06, objptr
09ae4     74 01 00 FF 
09ae8     80 27 06 F6 | 	mov	local05, ##@LR__5127
09aec     03 2A 66 F0 | 	shl	local07, #3
09af0     F2 2A 02 F1 | 	add	local07, objptr
09af4     15 2B 02 FB | 	rdlong	local07, local07
09af8     02 00 00 FF 
09afc     38 E4 05 F1 | 	add	objptr, ##1080
09b00     F2 1E 02 FB | 	rdlong	local01, objptr
09b04     03 1E 66 F0 | 	shl	local01, #3
09b08     02 00 00 FF 
09b0c     38 E4 85 F1 | 	sub	objptr, ##1080
09b10     F2 1E 02 F1 | 	add	local01, objptr
09b14     0F 13 02 FB | 	rdlong	arg01, local01
09b18     35 00 00 FF 
09b1c     3C E4 85 F1 | 	sub	objptr, ##27196
09b20     09 2D 02 F6 | 	mov	local08, arg01
09b24     97 06 48 FB | 	callpa	#(@LR__0829-@LR__0828)>>2,fcache_load_ptr_
09b28                 | LR__0828
09b28     16 FB C9 FA | 	rdbyte	result1, local08 wz
09b2c     01 2C 06 51 |  if_ne	add	local08, #1
09b30     F4 FF 9F 5D |  if_ne	jmp	#LR__0828
09b34                 | LR__0829
09b34     09 2D 82 F1 | 	sub	local08, arg01
09b38     16 15 02 F6 | 	mov	arg02, local08
09b3c     01 14 86 F1 | 	sub	arg02, #1
09b40     15 13 02 F6 | 	mov	arg01, local07
09b44     1C 73 B1 FD | 	call	#__system__Right_S
09b48     FD 14 02 F6 | 	mov	arg02, result1
09b4c     13 13 02 F6 | 	mov	arg01, local05
09b50     D4 52 B1 FD | 	call	#__system___string_concat
09b54     14 FB 61 FC | 	wrlong	result1, local06
09b58                 | LR__0830
09b58     37 00 00 FF 
09b5c     74 E4 05 F1 | 	add	objptr, ##28276
09b60     F2 28 02 FB | 	rdlong	local06, objptr
09b64     03 28 66 F0 | 	shl	local06, #3
09b68     02 00 00 FF 
09b6c     38 E4 85 F1 | 	sub	objptr, ##1080
09b70     F2 28 02 F1 | 	add	local06, objptr
09b74     14 13 02 FB | 	rdlong	arg01, local06
09b78     00 14 06 F6 | 	mov	arg02, #0
09b7c     35 00 00 FF 
09b80     3C E4 85 F1 | 	sub	objptr, ##27196
09b84     04 84 B1 FD | 	call	#__system____builtin_atoi
09b88     FD 24 02 FD | 	qmul	local04, result1
09b8c     4A 00 00 FF 
09b90     AC E4 05 F1 | 	add	objptr, ##38060
09b94     F2 28 02 FB | 	rdlong	local06, objptr
09b98     14 2F 02 F6 | 	mov	local09, local06
09b9c     01 2E 66 F0 | 	shl	local09, #1
09ba0     14 2F 02 F1 | 	add	local09, local06
09ba4     02 2E 66 F0 | 	shl	local09, #2
09ba8     03 00 00 FF 
09bac     00 E4 85 F1 | 	sub	objptr, ##1536
09bb0     F2 2E 02 F1 | 	add	local09, objptr
09bb4     03 00 00 FF 
09bb8     00 E4 05 F1 | 	add	objptr, ##1536
09bbc     18 1E 62 FD | 	getqx	local01
09bc0     1C 22 06 F6 | 	mov	local03, #28
09bc4     0F 29 02 F6 | 	mov	local06, local01
09bc8     10 2B 02 F6 | 	mov	local07, local02
09bcc     17 29 62 FC | 	wrlong	local06, local09
09bd0     11 2F 02 F6 | 	mov	local09, local03
09bd4     F2 28 02 FB | 	rdlong	local06, objptr
09bd8     14 27 02 F6 | 	mov	local05, local06
09bdc     01 26 66 F0 | 	shl	local05, #1
09be0     14 27 02 F1 | 	add	local05, local06
09be4     02 26 66 F0 | 	shl	local05, #2
09be8     03 00 00 FF 
09bec     00 E4 85 F1 | 	sub	objptr, ##1536
09bf0     F2 26 02 F1 | 	add	local05, objptr
09bf4     04 26 06 F1 | 	add	local05, #4
09bf8     13 2B 62 FC | 	wrlong	local07, local05
09bfc     03 00 00 FF 
09c00     00 E4 05 F1 | 	add	objptr, ##1536
09c04     F2 2A 02 FB | 	rdlong	local07, objptr
09c08     15 29 02 F6 | 	mov	local06, local07
09c0c     01 28 66 F0 | 	shl	local06, #1
09c10     15 29 02 F1 | 	add	local06, local07
09c14     02 28 66 F0 | 	shl	local06, #2
09c18     03 00 00 FF 
09c1c     00 E4 85 F1 | 	sub	objptr, ##1536
09c20     F2 28 02 F1 | 	add	local06, objptr
09c24     08 28 06 F1 | 	add	local06, #8
09c28     14 2F 62 FC | 	wrlong	local09, local06
09c2c     03 00 00 FF 
09c30     00 E4 05 F1 | 	add	objptr, ##1536
09c34     F2 28 02 FB | 	rdlong	local06, objptr
09c38     01 28 06 F1 | 	add	local06, #1
09c3c     F2 28 62 FC | 	wrlong	local06, objptr
09c40     13 00 00 FF 
09c44     38 E4 85 F1 | 	sub	objptr, ##9784
09c48     F2 28 02 FB | 	rdlong	local06, objptr
09c4c     01 28 06 F1 | 	add	local06, #1
09c50     F2 28 62 FC | 	wrlong	local06, objptr
09c54     37 00 00 FF 
09c58     74 E4 85 F1 | 	sub	objptr, ##28276
09c5c     0C 04 90 FD | 	jmp	#LR__0842
09c60                 | LR__0831
09c60                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09c60     01 24 0E F2 | 	cmp	local04, #1 wz
09c64     48 00 90 5D |  if_ne	jmp	#LR__0832
09c68     00 C0 1F FF 
09c6c     00 28 06 F6 | 	mov	local06, ##1065353216
09c70     37 00 00 FF 
09c74     74 E4 05 F1 | 	add	objptr, ##28276
09c78     F2 2E 02 FB | 	rdlong	local09, objptr
09c7c     03 2E 66 F0 | 	shl	local09, #3
09c80     02 00 00 FF 
09c84     38 E4 85 F1 | 	sub	objptr, ##1080
09c88     F2 2E 02 F1 | 	add	local09, objptr
09c8c     17 13 02 FB | 	rdlong	arg01, local09
09c90     35 00 00 FF 
09c94     3C E4 85 F1 | 	sub	objptr, ##27196
09c98     60 84 B1 FD | 	call	#__system____builtin_atof
09c9c     FD 14 02 F6 | 	mov	arg02, result1
09ca0     14 13 02 F6 | 	mov	arg01, local06
09ca4     6C 7C B1 FD | 	call	#__system___float_mul
09ca8     FD 1E 02 F6 | 	mov	local01, result1
09cac     1E 22 06 F6 | 	mov	local03, #30
09cb0                 | LR__0832
09cb0                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
09cb0     FF FF 7F FF 
09cb4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09cb8     48 00 90 5D |  if_ne	jmp	#LR__0833
09cbc     00 C0 5F FF 
09cc0     00 28 06 F6 | 	mov	local06, ##-1082130432
09cc4     37 00 00 FF 
09cc8     74 E4 05 F1 | 	add	objptr, ##28276
09ccc     F2 2E 02 FB | 	rdlong	local09, objptr
09cd0     03 2E 66 F0 | 	shl	local09, #3
09cd4     02 00 00 FF 
09cd8     38 E4 85 F1 | 	sub	objptr, ##1080
09cdc     F2 2E 02 F1 | 	add	local09, objptr
09ce0     17 13 02 FB | 	rdlong	arg01, local09
09ce4     35 00 00 FF 
09ce8     3C E4 85 F1 | 	sub	objptr, ##27196
09cec     0C 84 B1 FD | 	call	#__system____builtin_atof
09cf0     FD 14 02 F6 | 	mov	arg02, result1
09cf4     14 13 02 F6 | 	mov	arg01, local06
09cf8     18 7C B1 FD | 	call	#__system___float_mul
09cfc     FD 1E 02 F6 | 	mov	local01, result1
09d00     1E 22 06 F6 | 	mov	local03, #30
09d04                 | LR__0833
09d04     0F 29 02 F6 | 	mov	local06, local01
09d08     10 2B 02 F6 | 	mov	local07, local02
09d0c     11 27 02 F6 | 	mov	local05, local03
09d10     4A 00 00 FF 
09d14     AC E4 05 F1 | 	add	objptr, ##38060
09d18     F2 1E 02 FB | 	rdlong	local01, objptr
09d1c     0F 2F 02 F6 | 	mov	local09, local01
09d20     01 2E 66 F0 | 	shl	local09, #1
09d24     0F 2F 02 F1 | 	add	local09, local01
09d28     02 2E 66 F0 | 	shl	local09, #2
09d2c     03 00 00 FF 
09d30     00 E4 85 F1 | 	sub	objptr, ##1536
09d34     F2 2E 02 F1 | 	add	local09, objptr
09d38     17 29 62 FC | 	wrlong	local06, local09
09d3c     03 00 00 FF 
09d40     00 E4 05 F1 | 	add	objptr, ##1536
09d44     F2 2E 02 FB | 	rdlong	local09, objptr
09d48     17 29 02 F6 | 	mov	local06, local09
09d4c     01 28 66 F0 | 	shl	local06, #1
09d50     17 29 02 F1 | 	add	local06, local09
09d54     02 28 66 F0 | 	shl	local06, #2
09d58     03 00 00 FF 
09d5c     00 E4 85 F1 | 	sub	objptr, ##1536
09d60     F2 28 02 F1 | 	add	local06, objptr
09d64     04 28 06 F1 | 	add	local06, #4
09d68     14 2B 62 FC | 	wrlong	local07, local06
09d6c     03 00 00 FF 
09d70     00 E4 05 F1 | 	add	objptr, ##1536
09d74     F2 2E 02 FB | 	rdlong	local09, objptr
09d78     17 2B 02 F6 | 	mov	local07, local09
09d7c     01 2A 66 F0 | 	shl	local07, #1
09d80     17 2B 02 F1 | 	add	local07, local09
09d84     02 2A 66 F0 | 	shl	local07, #2
09d88     03 00 00 FF 
09d8c     00 E4 85 F1 | 	sub	objptr, ##1536
09d90     F2 2A 02 F1 | 	add	local07, objptr
09d94     08 2A 06 F1 | 	add	local07, #8
09d98     15 27 62 FC | 	wrlong	local05, local07
09d9c     03 00 00 FF 
09da0     00 E4 05 F1 | 	add	objptr, ##1536
09da4     F2 28 02 FB | 	rdlong	local06, objptr
09da8     01 28 06 F1 | 	add	local06, #1
09dac     F2 28 62 FC | 	wrlong	local06, objptr
09db0     13 00 00 FF 
09db4     38 E4 85 F1 | 	sub	objptr, ##9784
09db8     F2 28 02 FB | 	rdlong	local06, objptr
09dbc     01 28 06 F1 | 	add	local06, #1
09dc0     F2 28 62 FC | 	wrlong	local06, objptr
09dc4     37 00 00 FF 
09dc8     74 E4 85 F1 | 	sub	objptr, ##28276
09dcc     9C 02 90 FD | 	jmp	#LR__0842
09dd0                 | LR__0834
09dd0     1F 22 06 F6 | 	mov	local03, #31
09dd4     37 00 00 FF 
09dd8     74 E4 05 F1 | 	add	objptr, ##28276
09ddc     F2 16 02 FB | 	rdlong	arg03, objptr
09de0     03 16 66 F0 | 	shl	arg03, #3
09de4     02 00 00 FF 
09de8     38 E4 85 F1 | 	sub	objptr, ##1080
09dec     F2 16 02 F1 | 	add	arg03, objptr
09df0     0B 13 02 FB | 	rdlong	arg01, arg03
09df4     35 00 00 FF 
09df8     3C E4 85 F1 | 	sub	objptr, ##27196
09dfc     09 2D 02 F6 | 	mov	local08, arg01
09e00     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
09e04                 | LR__0835
09e04     16 FB C9 FA | 	rdbyte	result1, local08 wz
09e08     01 2C 06 51 |  if_ne	add	local08, #1
09e0c     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
09e10                 | LR__0836
09e10     09 2D 82 F1 | 	sub	local08, arg01
09e14     16 FB 01 F6 | 	mov	result1, local08
09e18     5A 00 00 FF 
09e1c     14 E4 05 F1 | 	add	objptr, ##46100
09e20     F2 FA 61 FC | 	wrlong	result1, objptr
09e24     5C E4 85 F1 | 	sub	objptr, #92
09e28     F2 12 02 FB | 	rdlong	arg01, objptr
09e2c     FD 12 82 F1 | 	sub	arg01, result1
09e30     04 12 86 F1 | 	sub	arg01, #4
09e34     03 12 26 F5 | 	andn	arg01, #3
09e38     F2 12 62 FC | 	wrlong	arg01, objptr
09e3c     5C E4 05 F1 | 	add	objptr, #92
09e40     F2 14 02 FB | 	rdlong	arg02, objptr
09e44     5A 00 00 FF 
09e48     14 E4 85 F1 | 	sub	objptr, ##46100
09e4c     38 0C B1 FD | 	call	#_pslpoke
09e50                 | '     pslpoke memtop,l
09e50                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09e50     01 30 06 F6 | 	mov	local10, #1
09e54     5A 00 00 FF 
09e58     14 E4 05 F1 | 	add	objptr, ##46100
09e5c     F2 32 02 FB | 	rdlong	local11, objptr
09e60     5A 00 00 FF 
09e64     14 E4 85 F1 | 	sub	objptr, ##46100
09e68     01 32 06 F1 | 	add	local11, #1
09e6c                 | LR__0837
09e6c     19 31 52 F2 | 	cmps	local10, local11 wc
09e70     5C 00 90 3D |  if_ae	jmp	#LR__0838
09e74     59 00 00 FF 
09e78     B8 E5 05 F1 | 	add	objptr, ##46008
09e7c     F2 2A 02 FB | 	rdlong	local07, objptr
09e80     03 2A 06 F1 | 	add	local07, #3
09e84     18 2B 02 F1 | 	add	local07, local10
09e88     22 00 00 FF 
09e8c     44 E5 85 F1 | 	sub	objptr, ##17732
09e90     F2 2E 02 FB | 	rdlong	local09, objptr
09e94     03 2E 66 F0 | 	shl	local09, #3
09e98     02 00 00 FF 
09e9c     38 E4 85 F1 | 	sub	objptr, ##1080
09ea0     F2 2E 02 F1 | 	add	local09, objptr
09ea4     17 13 02 FB | 	rdlong	arg01, local09
09ea8     18 15 02 F6 | 	mov	arg02, local10
09eac     01 16 06 F6 | 	mov	arg03, #1
09eb0     35 00 00 FF 
09eb4     3C E4 85 F1 | 	sub	objptr, ##27196
09eb8     38 70 B1 FD | 	call	#__system__Mid_S
09ebc     FD 14 C2 FA | 	rdbyte	arg02, result1
09ec0     15 13 02 F6 | 	mov	arg01, local07
09ec4     50 0C B1 FD | 	call	#_pspoke
09ec8     01 30 06 F1 | 	add	local10, #1
09ecc     9C FF 9F FD | 	jmp	#LR__0837
09ed0                 | LR__0838
09ed0     59 00 00 FF 
09ed4     B8 E5 05 F1 | 	add	objptr, ##46008
09ed8     F2 1E 02 FB | 	rdlong	local01, objptr
09edc     2B 22 06 F6 | 	mov	local03, #43
09ee0     0F 29 02 F6 | 	mov	local06, local01
09ee4     10 2B 02 F6 | 	mov	local07, local02
09ee8     11 33 02 F6 | 	mov	local11, local03
09eec     0F 00 00 FF 
09ef0     0C E5 85 F1 | 	sub	objptr, ##7948
09ef4     F2 30 02 FB | 	rdlong	local10, objptr
09ef8     18 2F 02 F6 | 	mov	local09, local10
09efc     01 2E 66 F0 | 	shl	local09, #1
09f00     18 2F 02 F1 | 	add	local09, local10
09f04     02 2E 66 F0 | 	shl	local09, #2
09f08     03 00 00 FF 
09f0c     00 E4 85 F1 | 	sub	objptr, ##1536
09f10     F2 2E 02 F1 | 	add	local09, objptr
09f14     17 29 62 FC | 	wrlong	local06, local09
09f18     03 00 00 FF 
09f1c     00 E4 05 F1 | 	add	objptr, ##1536
09f20     F2 30 02 FB | 	rdlong	local10, objptr
09f24     18 2F 02 F6 | 	mov	local09, local10
09f28     01 2E 66 F0 | 	shl	local09, #1
09f2c     18 2F 02 F1 | 	add	local09, local10
09f30     02 2E 66 F0 | 	shl	local09, #2
09f34     03 00 00 FF 
09f38     00 E4 85 F1 | 	sub	objptr, ##1536
09f3c     F2 2E 02 F1 | 	add	local09, objptr
09f40     04 2E 06 F1 | 	add	local09, #4
09f44     17 2B 62 FC | 	wrlong	local07, local09
09f48     03 00 00 FF 
09f4c     00 E4 05 F1 | 	add	objptr, ##1536
09f50     F2 30 02 FB | 	rdlong	local10, objptr
09f54     18 2F 02 F6 | 	mov	local09, local10
09f58     01 2E 66 F0 | 	shl	local09, #1
09f5c     18 2F 02 F1 | 	add	local09, local10
09f60     02 2E 66 F0 | 	shl	local09, #2
09f64     03 00 00 FF 
09f68     00 E4 85 F1 | 	sub	objptr, ##1536
09f6c     F2 2E 02 F1 | 	add	local09, objptr
09f70     08 2E 06 F1 | 	add	local09, #8
09f74     17 33 62 FC | 	wrlong	local11, local09
09f78     03 00 00 FF 
09f7c     00 E4 05 F1 | 	add	objptr, ##1536
09f80     F2 28 02 FB | 	rdlong	local06, objptr
09f84     01 28 06 F1 | 	add	local06, #1
09f88     F2 28 62 FC | 	wrlong	local06, objptr
09f8c     13 00 00 FF 
09f90     38 E4 85 F1 | 	sub	objptr, ##9784
09f94     F2 28 02 FB | 	rdlong	local06, objptr
09f98     01 28 06 F1 | 	add	local06, #1
09f9c     F2 28 62 FC | 	wrlong	local06, objptr
09fa0     37 00 00 FF 
09fa4     74 E4 85 F1 | 	sub	objptr, ##28276
09fa8     C0 00 90 FD | 	jmp	#LR__0842
09fac                 | LR__0839
09fac     12 13 02 F6 | 	mov	arg01, local04
09fb0     B8 03 B0 FD | 	call	#_getvar
09fb4     37 00 00 FF 
09fb8     74 E4 05 F1 | 	add	objptr, ##28276
09fbc     F2 28 02 FB | 	rdlong	local06, objptr
09fc0     01 28 06 F1 | 	add	local06, #1
09fc4     F2 28 62 FC | 	wrlong	local06, objptr
09fc8     37 00 00 FF 
09fcc     74 E4 85 F1 | 	sub	objptr, ##28276
09fd0     98 00 90 FD | 	jmp	#LR__0842
09fd4                 | LR__0840
09fd4     37 00 00 FF 
09fd8     74 E4 05 F1 | 	add	objptr, ##28276
09fdc     F2 28 02 FB | 	rdlong	local06, objptr
09fe0     01 28 06 F1 | 	add	local06, #1
09fe4     F2 28 62 FC | 	wrlong	local06, objptr
09fe8     37 00 00 FF 
09fec     74 E4 85 F1 | 	sub	objptr, ##28276
09ff0     64 F2 BF FD | 	call	#_expr
09ff4                 | '     ct+=1
09ff4                 | '     expr() 
09ff4                 | '     if lparts(ct).token=token_rpar then ct+=1
09ff4     37 00 00 FF 
09ff8     74 E4 05 F1 | 	add	objptr, ##28276
09ffc     F2 32 02 FB | 	rdlong	local11, objptr
0a000     03 32 66 F0 | 	shl	local11, #3
0a004     02 00 00 FF 
0a008     38 E4 85 F1 | 	sub	objptr, ##1080
0a00c     F2 32 02 F1 | 	add	local11, objptr
0a010     04 32 06 F1 | 	add	local11, #4
0a014     19 33 02 FB | 	rdlong	local11, local11
0a018     14 32 0E F2 | 	cmp	local11, #20 wz
0a01c     35 00 00 FF 
0a020     3C E4 85 F1 | 	sub	objptr, ##27196
0a024     44 00 90 5D |  if_ne	jmp	#LR__0842
0a028     37 00 00 FF 
0a02c     74 E4 05 F1 | 	add	objptr, ##28276
0a030     F2 28 02 FB | 	rdlong	local06, objptr
0a034     01 28 06 F1 | 	add	local06, #1
0a038     F2 28 62 FC | 	wrlong	local06, objptr
0a03c     37 00 00 FF 
0a040     74 E4 85 F1 | 	sub	objptr, ##28276
0a044     24 00 90 FD | 	jmp	#LR__0842
0a048                 | LR__0841
0a048     12 13 02 F6 | 	mov	arg01, local04
0a04c     28 00 B0 FD | 	call	#_getfun
0a050     37 00 00 FF 
0a054     74 E4 05 F1 | 	add	objptr, ##28276
0a058     F2 28 02 FB | 	rdlong	local06, objptr
0a05c     01 28 06 F1 | 	add	local06, #1
0a060     F2 28 62 FC | 	wrlong	local06, objptr
0a064     37 00 00 FF 
0a068     74 E4 85 F1 | 	sub	objptr, ##28276
0a06c                 | LR__0842
0a06c     A7 F0 03 F6 | 	mov	ptra, fp
0a070     B2 00 A0 FD | 	call	#popregs_
0a074                 | _getvalue_ret
0a074     2D 00 64 FD | 	ret
0a078                 | 
0a078                 | ' 
0a078                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0a078                 | _getfun
0a078     0A 4A 05 F6 | 	mov	COUNT_, #10
0a07c     A8 00 A0 FD | 	call	#pushregs_
0a080                 | _getfun_enter
0a080     09 25 02 F6 | 	mov	local04, arg01
0a084     37 00 00 FF 
0a088     74 E4 05 F1 | 	add	objptr, ##28276
0a08c     F2 26 02 FB | 	rdlong	local05, objptr
0a090     13 29 02 F6 | 	mov	local06, local05
0a094     00 2A 06 F6 | 	mov	local07, #0
0a098                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0a098                 | ' oldct=ct
0a098                 | ' numpar=0
0a098                 | '   
0a098                 | ' if lparts(ct+1).token=token_lpar then
0a098     01 26 06 F1 | 	add	local05, #1
0a09c     03 26 66 F0 | 	shl	local05, #3
0a0a0     02 00 00 FF 
0a0a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0a8     F2 26 02 F1 | 	add	local05, objptr
0a0ac     04 26 06 F1 | 	add	local05, #4
0a0b0     13 27 02 FB | 	rdlong	local05, local05
0a0b4     15 26 0E F2 | 	cmp	local05, #21 wz
0a0b8     35 00 00 FF 
0a0bc     3C E4 85 F1 | 	sub	objptr, ##27196
0a0c0     08 01 90 5D |  if_ne	jmp	#LR__0854
0a0c4     37 00 00 FF 
0a0c8     74 E4 05 F1 | 	add	objptr, ##28276
0a0cc     F2 2C 02 FB | 	rdlong	local08, objptr
0a0d0     01 2C 06 F1 | 	add	local08, #1
0a0d4     F2 2C 62 FC | 	wrlong	local08, objptr
0a0d8     37 00 00 FF 
0a0dc     74 E4 85 F1 | 	sub	objptr, ##28276
0a0e0                 | '   ct+=1 											' omit this lpar, this is for expr list
0a0e0                 | '   do
0a0e0                 | LR__0850
0a0e0     37 00 00 FF 
0a0e4     74 E4 05 F1 | 	add	objptr, ##28276
0a0e8     F2 26 02 FB | 	rdlong	local05, objptr
0a0ec     01 26 06 F1 | 	add	local05, #1
0a0f0     F2 26 62 FC | 	wrlong	local05, objptr
0a0f4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a0f4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a0f4     03 26 66 F0 | 	shl	local05, #3
0a0f8     02 00 00 FF 
0a0fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a100     F2 26 02 F1 | 	add	local05, objptr
0a104     04 26 06 F1 | 	add	local05, #4
0a108     13 2D 02 FB | 	rdlong	local08, local05
0a10c     15 2C 0E F2 | 	cmp	local08, #21 wz
0a110     35 00 00 FF 
0a114     3C E4 85 F1 | 	sub	objptr, ##27196
0a118     40 00 90 5D |  if_ne	jmp	#LR__0851
0a11c     37 00 00 FF 
0a120     74 E4 05 F1 | 	add	objptr, ##28276
0a124     F2 2C 02 FB | 	rdlong	local08, objptr
0a128     01 2C 06 F1 | 	add	local08, #1
0a12c     F2 2C 62 FC | 	wrlong	local08, objptr
0a130     37 00 00 FF 
0a134     74 E4 85 F1 | 	sub	objptr, ##28276
0a138     1C F1 BF FD | 	call	#_expr
0a13c     37 00 00 FF 
0a140     74 E4 05 F1 | 	add	objptr, ##28276
0a144     F2 2C 02 FB | 	rdlong	local08, objptr
0a148     01 2C 06 F1 | 	add	local08, #1
0a14c     F2 2C 62 FC | 	wrlong	local08, objptr
0a150     37 00 00 FF 
0a154     74 E4 85 F1 | 	sub	objptr, ##28276
0a158     04 00 90 FD | 	jmp	#LR__0852
0a15c                 | LR__0851
0a15c     F8 F0 BF FD | 	call	#_expr
0a160                 | LR__0852
0a160     01 2A 06 F1 | 	add	local07, #1
0a164     37 00 00 FF 
0a168     74 E4 05 F1 | 	add	objptr, ##28276
0a16c     F2 26 02 FB | 	rdlong	local05, objptr
0a170     03 26 66 F0 | 	shl	local05, #3
0a174     02 00 00 FF 
0a178     38 E4 85 F1 | 	sub	objptr, ##1080
0a17c     F2 26 02 F1 | 	add	local05, objptr
0a180     04 26 06 F1 | 	add	local05, #4
0a184     13 2D 02 FB | 	rdlong	local08, local05
0a188     14 2C 0E F2 | 	cmp	local08, #20 wz
0a18c     35 00 00 FF 
0a190     3C E4 85 F1 | 	sub	objptr, ##27196
0a194     34 00 90 AD |  if_e	jmp	#LR__0853
0a198     37 00 00 FF 
0a19c     74 E4 05 F1 | 	add	objptr, ##28276
0a1a0     F2 2C 02 FB | 	rdlong	local08, objptr
0a1a4     03 2C 66 F0 | 	shl	local08, #3
0a1a8     02 00 00 FF 
0a1ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a1b0     F2 2C 02 F1 | 	add	local08, objptr
0a1b4     04 2C 06 F1 | 	add	local08, #4
0a1b8     16 2D 02 FB | 	rdlong	local08, local08
0a1bc     FE 2D 0E F2 | 	cmp	local08, #510 wz
0a1c0     35 00 00 FF 
0a1c4     3C E4 85 F1 | 	sub	objptr, ##27196
0a1c8     14 FF 9F 5D |  if_ne	jmp	#LR__0850
0a1cc                 | LR__0853
0a1cc                 | LR__0854
0a1cc     15 1F 02 F6 | 	mov	local01, local07
0a1d0     03 28 66 F0 | 	shl	local06, #3
0a1d4     35 00 00 FF 
0a1d8     3C E4 05 F1 | 	add	objptr, ##27196
0a1dc     F2 28 02 F1 | 	add	local06, objptr
0a1e0     04 28 06 F1 | 	add	local06, #4
0a1e4     14 23 02 FB | 	rdlong	local03, local06
0a1e8     0F 2D 02 F6 | 	mov	local08, local01
0a1ec     10 2B 02 F6 | 	mov	local07, local02
0a1f0     11 29 02 F6 | 	mov	local06, local03
0a1f4     15 00 00 FF 
0a1f8     70 E4 05 F1 | 	add	objptr, ##10864
0a1fc     F2 26 02 FB | 	rdlong	local05, objptr
0a200     13 13 02 F6 | 	mov	arg01, local05
0a204     01 12 66 F0 | 	shl	arg01, #1
0a208     13 13 02 F1 | 	add	arg01, local05
0a20c     02 12 66 F0 | 	shl	arg01, #2
0a210     03 00 00 FF 
0a214     00 E4 85 F1 | 	sub	objptr, ##1536
0a218     F2 12 02 F1 | 	add	arg01, objptr
0a21c     09 2D 62 FC | 	wrlong	local08, arg01
0a220     03 00 00 FF 
0a224     00 E4 05 F1 | 	add	objptr, ##1536
0a228     F2 2C 02 FB | 	rdlong	local08, objptr
0a22c     16 2F 02 F6 | 	mov	local09, local08
0a230     01 2E 66 F0 | 	shl	local09, #1
0a234     16 2F 02 F1 | 	add	local09, local08
0a238     02 2E 66 F0 | 	shl	local09, #2
0a23c     03 00 00 FF 
0a240     00 E4 85 F1 | 	sub	objptr, ##1536
0a244     F2 2E 02 F1 | 	add	local09, objptr
0a248     04 2E 06 F1 | 	add	local09, #4
0a24c     17 2B 62 FC | 	wrlong	local07, local09
0a250     03 00 00 FF 
0a254     00 E4 05 F1 | 	add	objptr, ##1536
0a258     F2 2C 02 FB | 	rdlong	local08, objptr
0a25c     16 31 02 F6 | 	mov	local10, local08
0a260     01 30 66 F0 | 	shl	local10, #1
0a264     16 31 02 F1 | 	add	local10, local08
0a268     02 30 66 F0 | 	shl	local10, #2
0a26c     03 00 00 FF 
0a270     00 E4 85 F1 | 	sub	objptr, ##1536
0a274     F2 30 02 F1 | 	add	local10, objptr
0a278     08 30 06 F1 | 	add	local10, #8
0a27c     18 29 62 FC | 	wrlong	local06, local10
0a280     03 00 00 FF 
0a284     00 E4 05 F1 | 	add	objptr, ##1536
0a288     F2 2C 02 FB | 	rdlong	local08, objptr
0a28c     01 2C 06 F1 | 	add	local08, #1
0a290     F2 2C 62 FC | 	wrlong	local08, objptr
0a294     4A 00 00 FF 
0a298     AC E4 85 F1 | 	sub	objptr, ##38060
0a29c                 | ' 
0a29c                 | ' t2.result.uresult=numpar
0a29c                 | ' 
0a29c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0a29c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a29c                 | ' 
0a29c                 | '   
0a29c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a29c     FF FF 7F FF 
0a2a0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a2a4     B8 00 90 5D |  if_ne	jmp	#LR__0855
0a2a8     15 22 06 F6 | 	mov	local03, #21
0a2ac     0F 2D 02 F6 | 	mov	local08, local01
0a2b0     10 2B 02 F6 | 	mov	local07, local02
0a2b4     11 29 02 F6 | 	mov	local06, local03
0a2b8     4A 00 00 FF 
0a2bc     AC E4 05 F1 | 	add	objptr, ##38060
0a2c0     F2 26 02 FB | 	rdlong	local05, objptr
0a2c4     13 13 02 F6 | 	mov	arg01, local05
0a2c8     01 12 66 F0 | 	shl	arg01, #1
0a2cc     13 13 02 F1 | 	add	arg01, local05
0a2d0     02 12 66 F0 | 	shl	arg01, #2
0a2d4     03 00 00 FF 
0a2d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a2dc     F2 12 02 F1 | 	add	arg01, objptr
0a2e0     09 2D 62 FC | 	wrlong	local08, arg01
0a2e4     03 00 00 FF 
0a2e8     00 E4 05 F1 | 	add	objptr, ##1536
0a2ec     F2 30 02 FB | 	rdlong	local10, objptr
0a2f0     18 2F 02 F6 | 	mov	local09, local10
0a2f4     01 2E 66 F0 | 	shl	local09, #1
0a2f8     18 2F 02 F1 | 	add	local09, local10
0a2fc     02 2E 66 F0 | 	shl	local09, #2
0a300     03 00 00 FF 
0a304     00 E4 85 F1 | 	sub	objptr, ##1536
0a308     F2 2E 02 F1 | 	add	local09, objptr
0a30c     04 2E 06 F1 | 	add	local09, #4
0a310     17 2B 62 FC | 	wrlong	local07, local09
0a314     03 00 00 FF 
0a318     00 E4 05 F1 | 	add	objptr, ##1536
0a31c     F2 2E 02 FB | 	rdlong	local09, objptr
0a320     17 31 02 F6 | 	mov	local10, local09
0a324     01 30 66 F0 | 	shl	local10, #1
0a328     17 31 02 F1 | 	add	local10, local09
0a32c     02 30 66 F0 | 	shl	local10, #2
0a330     03 00 00 FF 
0a334     00 E4 85 F1 | 	sub	objptr, ##1536
0a338     F2 30 02 F1 | 	add	local10, objptr
0a33c     08 30 06 F1 | 	add	local10, #8
0a340     18 29 62 FC | 	wrlong	local06, local10
0a344     03 00 00 FF 
0a348     00 E4 05 F1 | 	add	objptr, ##1536
0a34c     F2 2C 02 FB | 	rdlong	local08, objptr
0a350     01 2C 06 F1 | 	add	local08, #1
0a354     F2 2C 62 FC | 	wrlong	local08, objptr
0a358     4A 00 00 FF 
0a35c     AC E4 85 F1 | 	sub	objptr, ##38060
0a360                 | LR__0855
0a360     A7 F0 03 F6 | 	mov	ptra, fp
0a364     B2 00 A0 FD | 	call	#popregs_
0a368                 | _getfun_ret
0a368     2D 00 64 FD | 	ret
0a36c                 | 
0a36c                 | '   
0a36c                 | '   
0a36c                 | ' sub getvar(m as integer) 
0a36c                 | _getvar
0a36c     0A 4A 05 F6 | 	mov	COUNT_, #10
0a370     A8 00 A0 FD | 	call	#pushregs_
0a374                 | _getvar_enter
0a374     09 25 02 F6 | 	mov	local04, arg01
0a378     37 00 00 FF 
0a37c     74 E4 05 F1 | 	add	objptr, ##28276
0a380     F2 14 02 FB | 	rdlong	arg02, objptr
0a384     03 14 66 F0 | 	shl	arg02, #3
0a388     02 00 00 FF 
0a38c     38 E4 85 F1 | 	sub	objptr, ##1080
0a390     F2 14 02 F1 | 	add	arg02, objptr
0a394     0A 27 02 FB | 	rdlong	local05, arg02
0a398     13 13 02 F6 | 	mov	arg01, local05
0a39c     01 14 06 F6 | 	mov	arg02, #1
0a3a0     35 00 00 FF 
0a3a4     3C E4 85 F1 | 	sub	objptr, ##27196
0a3a8     B8 6A B1 FD | 	call	#__system__Right_S
0a3ac     FD 28 02 F6 | 	mov	local06, result1
0a3b0     01 2A 66 F6 | 	neg	local07, #1
0a3b4                 | ' 
0a3b4                 | ' varname$=lparts(ct).part$
0a3b4                 | ' suffix$=right$(varname$,1)
0a3b4                 | ' j=-1
0a3b4                 | ' 
0a3b4                 | ' for i=0 to varnum-1
0a3b4     00 2C 06 F6 | 	mov	local08, #0
0a3b8     35 00 00 FF 
0a3bc     38 E4 05 F1 | 	add	objptr, ##27192
0a3c0     F2 2E 02 FB | 	rdlong	local09, objptr
0a3c4     35 00 00 FF 
0a3c8     38 E4 85 F1 | 	sub	objptr, ##27192
0a3cc                 | LR__0860
0a3cc     17 2D 52 F2 | 	cmps	local08, local09 wc
0a3d0     38 00 90 3D |  if_ae	jmp	#LR__0861
0a3d4                 | '   if variables(i).name=varname$ then j=i : exit
0a3d4     16 15 02 F6 | 	mov	arg02, local08
0a3d8     04 14 66 F0 | 	shl	arg02, #4
0a3dc     15 00 00 FF 
0a3e0     28 E4 05 F1 | 	add	objptr, ##10792
0a3e4     F2 14 02 F1 | 	add	arg02, objptr
0a3e8     0A 13 02 FB | 	rdlong	arg01, arg02
0a3ec     13 15 02 F6 | 	mov	arg02, local05
0a3f0     15 00 00 FF 
0a3f4     28 E4 85 F1 | 	sub	objptr, ##10792
0a3f8     F8 49 B1 FD | 	call	#__system___string_cmp
0a3fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a400     16 2B 02 A6 |  if_e	mov	local07, local08
0a404     01 2C 06 51 |  if_ne	add	local08, #1
0a408     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
0a40c                 | LR__0861
0a40c                 | ' if  j=-1 andalso varnum<maxvars then   
0a40c     FF FF 7F FF 
0a410     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0a414     A8 00 90 5D |  if_ne	jmp	#LR__0862
0a418     35 00 00 FF 
0a41c     38 E4 05 F1 | 	add	objptr, ##27192
0a420     F2 2E 02 FB | 	rdlong	local09, objptr
0a424     35 00 00 FF 
0a428     38 E4 85 F1 | 	sub	objptr, ##27192
0a42c     02 00 00 FF 
0a430     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0a434     88 00 90 3D |  if_ae	jmp	#LR__0862
0a438     35 00 00 FF 
0a43c     38 E4 05 F1 | 	add	objptr, ##27192
0a440     F2 2E 02 FB | 	rdlong	local09, objptr
0a444     04 2E 66 F0 | 	shl	local09, #4
0a448     20 00 00 FF 
0a44c     10 E4 85 F1 | 	sub	objptr, ##16400
0a450     F2 2E 02 F1 | 	add	local09, objptr
0a454     17 27 62 FC | 	wrlong	local05, local09
0a458     20 00 00 FF 
0a45c     10 E4 05 F1 | 	add	objptr, ##16400
0a460     F2 2E 02 FB | 	rdlong	local09, objptr
0a464     04 2E 66 F0 | 	shl	local09, #4
0a468     20 00 00 FF 
0a46c     10 E4 85 F1 | 	sub	objptr, ##16400
0a470     F2 2E 02 F1 | 	add	local09, objptr
0a474     04 2E 06 F1 | 	add	local09, #4
0a478     17 01 68 FC | 	wrlong	#0, local09
0a47c     20 00 00 FF 
0a480     10 E4 05 F1 | 	add	objptr, ##16400
0a484     F2 2E 02 FB | 	rdlong	local09, objptr
0a488     04 2E 66 F0 | 	shl	local09, #4
0a48c     20 00 00 FF 
0a490     10 E4 85 F1 | 	sub	objptr, ##16400
0a494     F2 2E 02 F1 | 	add	local09, objptr
0a498     0C 2E 06 F1 | 	add	local09, #12
0a49c     17 39 68 FC | 	wrlong	#28, local09
0a4a0     20 00 00 FF 
0a4a4     10 E4 05 F1 | 	add	objptr, ##16400
0a4a8     F2 2E 02 FB | 	rdlong	local09, objptr
0a4ac     17 2B 02 F6 | 	mov	local07, local09
0a4b0     01 2E 06 F1 | 	add	local09, #1
0a4b4     F2 2E 62 FC | 	wrlong	local09, objptr
0a4b8     35 00 00 FF 
0a4bc     38 E4 85 F1 | 	sub	objptr, ##27192
0a4c0                 | LR__0862
0a4c0     00 2E 06 F6 | 	mov	local09, #0
0a4c4                 | ' numpar=0
0a4c4                 | ' ' check if it is an array
0a4c4                 | ' 
0a4c4                 | ' if lparts(ct+1).token=token_lpar then
0a4c4     37 00 00 FF 
0a4c8     74 E4 05 F1 | 	add	objptr, ##28276
0a4cc     F2 2C 02 FB | 	rdlong	local08, objptr
0a4d0     01 2C 06 F1 | 	add	local08, #1
0a4d4     03 2C 66 F0 | 	shl	local08, #3
0a4d8     02 00 00 FF 
0a4dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a4e0     F2 2C 02 F1 | 	add	local08, objptr
0a4e4     04 2C 06 F1 | 	add	local08, #4
0a4e8     16 2D 02 FB | 	rdlong	local08, local08
0a4ec     15 2C 0E F2 | 	cmp	local08, #21 wz
0a4f0     35 00 00 FF 
0a4f4     3C E4 85 F1 | 	sub	objptr, ##27196
0a4f8     08 01 90 5D |  if_ne	jmp	#LR__0867
0a4fc     37 00 00 FF 
0a500     74 E4 05 F1 | 	add	objptr, ##28276
0a504     F2 30 02 FB | 	rdlong	local10, objptr
0a508     01 30 06 F1 | 	add	local10, #1
0a50c     F2 30 62 FC | 	wrlong	local10, objptr
0a510     37 00 00 FF 
0a514     74 E4 85 F1 | 	sub	objptr, ##28276
0a518                 | '   ct+=1 											' omit this lpar, this is for expr list
0a518                 | '   do
0a518                 | LR__0863
0a518     37 00 00 FF 
0a51c     74 E4 05 F1 | 	add	objptr, ##28276
0a520     F2 2C 02 FB | 	rdlong	local08, objptr
0a524     01 2C 06 F1 | 	add	local08, #1
0a528     F2 2C 62 FC | 	wrlong	local08, objptr
0a52c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a52c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a52c     03 2C 66 F0 | 	shl	local08, #3
0a530     02 00 00 FF 
0a534     38 E4 85 F1 | 	sub	objptr, ##1080
0a538     F2 2C 02 F1 | 	add	local08, objptr
0a53c     04 2C 06 F1 | 	add	local08, #4
0a540     16 31 02 FB | 	rdlong	local10, local08
0a544     15 30 0E F2 | 	cmp	local10, #21 wz
0a548     35 00 00 FF 
0a54c     3C E4 85 F1 | 	sub	objptr, ##27196
0a550     40 00 90 5D |  if_ne	jmp	#LR__0864
0a554     37 00 00 FF 
0a558     74 E4 05 F1 | 	add	objptr, ##28276
0a55c     F2 30 02 FB | 	rdlong	local10, objptr
0a560     01 30 06 F1 | 	add	local10, #1
0a564     F2 30 62 FC | 	wrlong	local10, objptr
0a568     37 00 00 FF 
0a56c     74 E4 85 F1 | 	sub	objptr, ##28276
0a570     E4 EC BF FD | 	call	#_expr
0a574     37 00 00 FF 
0a578     74 E4 05 F1 | 	add	objptr, ##28276
0a57c     F2 30 02 FB | 	rdlong	local10, objptr
0a580     01 30 06 F1 | 	add	local10, #1
0a584     F2 30 62 FC | 	wrlong	local10, objptr
0a588     37 00 00 FF 
0a58c     74 E4 85 F1 | 	sub	objptr, ##28276
0a590     04 00 90 FD | 	jmp	#LR__0865
0a594                 | LR__0864
0a594     C0 EC BF FD | 	call	#_expr
0a598                 | LR__0865
0a598     01 2E 06 F1 | 	add	local09, #1
0a59c     37 00 00 FF 
0a5a0     74 E4 05 F1 | 	add	objptr, ##28276
0a5a4     F2 2C 02 FB | 	rdlong	local08, objptr
0a5a8     03 2C 66 F0 | 	shl	local08, #3
0a5ac     02 00 00 FF 
0a5b0     38 E4 85 F1 | 	sub	objptr, ##1080
0a5b4     F2 2C 02 F1 | 	add	local08, objptr
0a5b8     04 2C 06 F1 | 	add	local08, #4
0a5bc     16 31 02 FB | 	rdlong	local10, local08
0a5c0     14 30 0E F2 | 	cmp	local10, #20 wz
0a5c4     35 00 00 FF 
0a5c8     3C E4 85 F1 | 	sub	objptr, ##27196
0a5cc     34 00 90 AD |  if_e	jmp	#LR__0866
0a5d0     37 00 00 FF 
0a5d4     74 E4 05 F1 | 	add	objptr, ##28276
0a5d8     F2 30 02 FB | 	rdlong	local10, objptr
0a5dc     03 30 66 F0 | 	shl	local10, #3
0a5e0     02 00 00 FF 
0a5e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5e8     F2 30 02 F1 | 	add	local10, objptr
0a5ec     04 30 06 F1 | 	add	local10, #4
0a5f0     18 31 02 FB | 	rdlong	local10, local10
0a5f4     FE 31 0E F2 | 	cmp	local10, #510 wz
0a5f8     35 00 00 FF 
0a5fc     3C E4 85 F1 | 	sub	objptr, ##27196
0a600     14 FF 9F 5D |  if_ne	jmp	#LR__0863
0a604                 | LR__0866
0a604                 | LR__0867
0a604     17 21 02 F6 | 	mov	local02, local09
0a608     11 22 06 F6 | 	mov	local03, #17
0a60c     15 1F 02 F6 | 	mov	local01, local07
0a610     0F 31 02 F6 | 	mov	local10, local01
0a614     10 2F 02 F6 | 	mov	local09, local02
0a618     11 2D 02 F6 | 	mov	local08, local03
0a61c     4A 00 00 FF 
0a620     AC E4 05 F1 | 	add	objptr, ##38060
0a624     F2 2A 02 FB | 	rdlong	local07, objptr
0a628     15 29 02 F6 | 	mov	local06, local07
0a62c     01 28 66 F0 | 	shl	local06, #1
0a630     15 29 02 F1 | 	add	local06, local07
0a634     02 28 66 F0 | 	shl	local06, #2
0a638     03 00 00 FF 
0a63c     00 E4 85 F1 | 	sub	objptr, ##1536
0a640     F2 28 02 F1 | 	add	local06, objptr
0a644     14 31 62 FC | 	wrlong	local10, local06
0a648     03 00 00 FF 
0a64c     00 E4 05 F1 | 	add	objptr, ##1536
0a650     F2 30 02 FB | 	rdlong	local10, objptr
0a654     18 27 02 F6 | 	mov	local05, local10
0a658     01 26 66 F0 | 	shl	local05, #1
0a65c     18 27 02 F1 | 	add	local05, local10
0a660     02 26 66 F0 | 	shl	local05, #2
0a664     03 00 00 FF 
0a668     00 E4 85 F1 | 	sub	objptr, ##1536
0a66c     F2 26 02 F1 | 	add	local05, objptr
0a670     04 26 06 F1 | 	add	local05, #4
0a674     13 2F 62 FC | 	wrlong	local09, local05
0a678     03 00 00 FF 
0a67c     00 E4 05 F1 | 	add	objptr, ##1536
0a680     F2 30 02 FB | 	rdlong	local10, objptr
0a684     18 FB 01 F6 | 	mov	result1, local10
0a688     01 FA 65 F0 | 	shl	result1, #1
0a68c     18 FB 01 F1 | 	add	result1, local10
0a690     02 FA 65 F0 | 	shl	result1, #2
0a694     03 00 00 FF 
0a698     00 E4 85 F1 | 	sub	objptr, ##1536
0a69c     F2 FA 01 F1 | 	add	result1, objptr
0a6a0     08 FA 05 F1 | 	add	result1, #8
0a6a4     FD 2C 62 FC | 	wrlong	local08, result1
0a6a8     03 00 00 FF 
0a6ac     00 E4 05 F1 | 	add	objptr, ##1536
0a6b0     F2 30 02 FB | 	rdlong	local10, objptr
0a6b4     01 30 06 F1 | 	add	local10, #1
0a6b8     F2 30 62 FC | 	wrlong	local10, objptr
0a6bc     4A 00 00 FF 
0a6c0     AC E4 85 F1 | 	sub	objptr, ##38060
0a6c4                 | ' 
0a6c4                 | ' t2.result.twowords(1)=numpar
0a6c4                 | ' 
0a6c4                 | ' 
0a6c4                 | ' 
0a6c4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a6c4                 | ' 
0a6c4                 | ' 
0a6c4                 | '  
0a6c4                 | ' 
0a6c4                 | ' 701 
0a6c4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a6c4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a6c4     FF FF 7F FF 
0a6c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a6cc     B8 00 90 5D |  if_ne	jmp	#LR__0868
0a6d0     15 22 06 F6 | 	mov	local03, #21
0a6d4     0F 31 02 F6 | 	mov	local10, local01
0a6d8     10 2F 02 F6 | 	mov	local09, local02
0a6dc     11 2D 02 F6 | 	mov	local08, local03
0a6e0     4A 00 00 FF 
0a6e4     AC E4 05 F1 | 	add	objptr, ##38060
0a6e8     F2 2A 02 FB | 	rdlong	local07, objptr
0a6ec     15 29 02 F6 | 	mov	local06, local07
0a6f0     01 28 66 F0 | 	shl	local06, #1
0a6f4     15 29 02 F1 | 	add	local06, local07
0a6f8     02 28 66 F0 | 	shl	local06, #2
0a6fc     03 00 00 FF 
0a700     00 E4 85 F1 | 	sub	objptr, ##1536
0a704     F2 28 02 F1 | 	add	local06, objptr
0a708     14 31 62 FC | 	wrlong	local10, local06
0a70c     03 00 00 FF 
0a710     00 E4 05 F1 | 	add	objptr, ##1536
0a714     F2 1E 02 FB | 	rdlong	local01, objptr
0a718     0F 27 02 F6 | 	mov	local05, local01
0a71c     01 26 66 F0 | 	shl	local05, #1
0a720     0F 27 02 F1 | 	add	local05, local01
0a724     02 26 66 F0 | 	shl	local05, #2
0a728     03 00 00 FF 
0a72c     00 E4 85 F1 | 	sub	objptr, ##1536
0a730     F2 26 02 F1 | 	add	local05, objptr
0a734     04 26 06 F1 | 	add	local05, #4
0a738     13 2F 62 FC | 	wrlong	local09, local05
0a73c     03 00 00 FF 
0a740     00 E4 05 F1 | 	add	objptr, ##1536
0a744     F2 1E 02 FB | 	rdlong	local01, objptr
0a748     0F FB 01 F6 | 	mov	result1, local01
0a74c     01 FA 65 F0 | 	shl	result1, #1
0a750     0F FB 01 F1 | 	add	result1, local01
0a754     02 FA 65 F0 | 	shl	result1, #2
0a758     03 00 00 FF 
0a75c     00 E4 85 F1 | 	sub	objptr, ##1536
0a760     F2 FA 01 F1 | 	add	result1, objptr
0a764     08 FA 05 F1 | 	add	result1, #8
0a768     FD 2C 62 FC | 	wrlong	local08, result1
0a76c     03 00 00 FF 
0a770     00 E4 05 F1 | 	add	objptr, ##1536
0a774     F2 30 02 FB | 	rdlong	local10, objptr
0a778     01 30 06 F1 | 	add	local10, #1
0a77c     F2 30 62 FC | 	wrlong	local10, objptr
0a780     4A 00 00 FF 
0a784     AC E4 85 F1 | 	sub	objptr, ##38060
0a788                 | LR__0868
0a788     A7 F0 03 F6 | 	mov	ptra, fp
0a78c     B2 00 A0 FD | 	call	#popregs_
0a790                 | _getvar_ret
0a790     2D 00 64 FD | 	ret
0a794                 | 
0a794                 | ' 
0a794                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a794                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a794                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a794                 | ' 
0a794                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a794                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a794                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a794                 | ' 
0a794                 | ' function execute_line (astart=0 as integer) as integer
0a794                 | _execute_line
0a794     04 4A 05 F6 | 	mov	COUNT_, #4
0a798     A8 00 A0 FD | 	call	#pushregs_
0a79c     58 00 00 FF 
0a7a0     F0 E4 05 F1 | 	add	objptr, ##45296
0a7a4     F2 00 68 FC | 	wrlong	#0, objptr
0a7a8                 | ' runptr2=0
0a7a8                 | ' for lineptr_e=astart to lineptr-1
0a7a8     0E 00 00 FF 
0a7ac     40 E4 85 F1 | 	sub	objptr, ##7232
0a7b0     F2 12 62 FC | 	wrlong	arg01, objptr
0a7b4     04 E4 85 F1 | 	sub	objptr, #4
0a7b8     F2 1E 02 FB | 	rdlong	local01, objptr
0a7bc     4A 00 00 FF 
0a7c0     AC E4 85 F1 | 	sub	objptr, ##38060
0a7c4                 | LR__0870
0a7c4     4A 00 00 FF 
0a7c8     B0 E4 05 F1 | 	add	objptr, ##38064
0a7cc     F2 FA 01 FB | 	rdlong	result1, objptr
0a7d0     4A 00 00 FF 
0a7d4     B0 E4 85 F1 | 	sub	objptr, ##38064
0a7d8     0F FB 51 F2 | 	cmps	result1, local01 wc
0a7dc     98 00 90 3D |  if_ae	jmp	#LR__0871
0a7e0     4A 00 00 FF 
0a7e4     B0 E4 05 F1 | 	add	objptr, ##38064
0a7e8     F2 FA 01 FB | 	rdlong	result1, objptr
0a7ec     FD 20 02 F6 | 	mov	local02, result1
0a7f0     01 20 66 F0 | 	shl	local02, #1
0a7f4     FD 20 02 F1 | 	add	local02, result1
0a7f8     02 20 66 F0 | 	shl	local02, #2
0a7fc     03 00 00 FF 
0a800     04 E4 85 F1 | 	sub	objptr, ##1540
0a804     F2 20 02 F1 | 	add	local02, objptr
0a808     08 20 06 F1 | 	add	local02, #8
0a80c     10 21 02 FB | 	rdlong	local02, local02
0a810     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a814     02 20 66 F0 | 	shl	local02, #2
0a818     04 00 00 FF 
0a81c     1C E4 85 F1 | 	sub	objptr, ##2076
0a820     F2 20 02 F1 | 	add	local02, objptr
0a824     10 21 02 FB | 	rdlong	local02, local02
0a828     10 23 02 F6 | 	mov	local03, local02
0a82c     13 20 46 F7 | 	zerox	local02, #19
0a830     14 22 46 F0 | 	shr	local03, #20
0a834     02 22 66 F0 | 	shl	local03, #2
0a838     ED 22 02 F1 | 	add	local03, __methods__
0a83c     11 23 02 FB | 	rdlong	local03, local03
0a840     43 00 00 FF 
0a844     90 E4 85 F1 | 	sub	objptr, ##34448
0a848     F2 24 02 F6 | 	mov	local04, objptr
0a84c     10 E5 01 F6 | 	mov	objptr, local02
0a850     2D 22 62 FD | 	call	local03
0a854     12 E5 01 F6 | 	mov	objptr, local04
0a858     4A 00 00 FF 
0a85c     B0 E4 05 F1 | 	add	objptr, ##38064
0a860     F2 24 02 FB | 	rdlong	local04, objptr
0a864     01 24 06 F1 | 	add	local04, #1
0a868     F2 24 62 FC | 	wrlong	local04, objptr
0a86c     4A 00 00 FF 
0a870     B0 E4 85 F1 | 	sub	objptr, ##38064
0a874     4C FF 9F FD | 	jmp	#LR__0870
0a878                 | LR__0871
0a878                 | ' return runptr2
0a878     58 00 00 FF 
0a87c     F0 E4 05 F1 | 	add	objptr, ##45296
0a880     F2 FA 01 FB | 	rdlong	result1, objptr
0a884     58 00 00 FF 
0a888     F0 E4 85 F1 | 	sub	objptr, ##45296
0a88c     A7 F0 03 F6 | 	mov	ptra, fp
0a890     B2 00 A0 FD | 	call	#popregs_
0a894                 | _execute_line_ret
0a894     2D 00 64 FD | 	ret
0a898                 | 
0a898                 | ' 
0a898                 | ' 
0a898                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a898                 | ' 
0a898                 | ' function pop() as expr_result
0a898                 | _pop
0a898                 | ' 
0a898                 | ' if stackpointer=0 then
0a898     43 00 00 FF 
0a89c     88 E4 05 F1 | 	add	objptr, ##34440
0a8a0     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a8a4     43 00 00 FF 
0a8a8     88 E4 85 F1 | 	sub	objptr, ##34440
0a8ac     FF 04 06 A6 |  if_e	mov	_var03, #255
0a8b0     18 00 06 A6 |  if_e	mov	_var01, #24
0a8b4     68 00 90 AD |  if_e	jmp	#LR__0880
0a8b8     43 00 00 FF 
0a8bc     88 E4 05 F1 | 	add	objptr, ##34440
0a8c0     F2 FA 01 FB | 	rdlong	result1, objptr
0a8c4     01 FA 85 F1 | 	sub	result1, #1
0a8c8     F2 FA 61 FC | 	wrlong	result1, objptr
0a8cc     FD FE 01 F6 | 	mov	result3, result1
0a8d0     01 FE 65 F0 | 	shl	result3, #1
0a8d4     FD FE 01 F1 | 	add	result3, result1
0a8d8     02 FE 65 F0 | 	shl	result3, #2
0a8dc     0C 00 00 FF 
0a8e0     0C E4 85 F1 | 	sub	objptr, ##6156
0a8e4     F2 FE 01 F1 | 	add	result3, objptr
0a8e8     FF 00 02 FB | 	rdlong	_var01, result3
0a8ec     04 FE 05 F1 | 	add	result3, #4
0a8f0     FF FE 01 FB | 	rdlong	result3, result3
0a8f4     FD FC 01 F6 | 	mov	result2, result1
0a8f8     01 FC 65 F0 | 	shl	result2, #1
0a8fc     FD FC 01 F1 | 	add	result2, result1
0a900     02 FC 65 F0 | 	shl	result2, #2
0a904     F2 FC 01 F1 | 	add	result2, objptr
0a908     08 FC 05 F1 | 	add	result2, #8
0a90c     FE FA 01 FB | 	rdlong	result1, result2
0a910     FF 02 02 F6 | 	mov	_var02, result3
0a914     FD 04 02 F6 | 	mov	_var03, result1
0a918     37 00 00 FF 
0a91c     7C E4 85 F1 | 	sub	objptr, ##28284
0a920                 | LR__0880
0a920                 | ' return t1
0a920     01 FD 01 F6 | 	mov	result2, _var02
0a924     02 FF 01 F6 | 	mov	result3, _var03
0a928     00 FB 01 F6 | 	mov	result1, _var01
0a92c                 | _pop_ret
0a92c     2D 00 64 FD | 	ret
0a930                 | 
0a930                 | ' 
0a930                 | ' sub push(t1 as expr_result )
0a930                 | _push
0a930                 | ' 
0a930                 | ' 'print "In push: "; t1.result_type
0a930                 | ' 'print "In push: "; t1.result.uresult
0a930                 | ' 
0a930                 | ' if stackpointer<maxstack then 
0a930     43 00 00 FF 
0a934     88 E4 05 F1 | 	add	objptr, ##34440
0a938     F2 00 02 FB | 	rdlong	_var01, objptr
0a93c     43 00 00 FF 
0a940     88 E4 85 F1 | 	sub	objptr, ##34440
0a944     01 00 00 FF 
0a948     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a94c     BC 00 90 3D |  if_ae	jmp	#LR__0890
0a950     09 01 02 FB | 	rdlong	_var01, arg01
0a954     04 12 06 F1 | 	add	arg01, #4
0a958     09 03 02 FB | 	rdlong	_var02, arg01
0a95c     04 12 06 F1 | 	add	arg01, #4
0a960     09 13 02 FB | 	rdlong	arg01, arg01
0a964     43 00 00 FF 
0a968     88 E4 05 F1 | 	add	objptr, ##34440
0a96c     F2 04 02 FB | 	rdlong	_var03, objptr
0a970     02 07 02 F6 | 	mov	_var04, _var03
0a974     01 06 66 F0 | 	shl	_var04, #1
0a978     02 07 02 F1 | 	add	_var04, _var03
0a97c     02 06 66 F0 | 	shl	_var04, #2
0a980     0C 00 00 FF 
0a984     0C E4 85 F1 | 	sub	objptr, ##6156
0a988     F2 06 02 F1 | 	add	_var04, objptr
0a98c     03 01 62 FC | 	wrlong	_var01, _var04
0a990     0C 00 00 FF 
0a994     0C E4 05 F1 | 	add	objptr, ##6156
0a998     F2 06 02 FB | 	rdlong	_var04, objptr
0a99c     03 05 02 F6 | 	mov	_var03, _var04
0a9a0     01 04 66 F0 | 	shl	_var03, #1
0a9a4     03 05 02 F1 | 	add	_var03, _var04
0a9a8     02 04 66 F0 | 	shl	_var03, #2
0a9ac     0C 00 00 FF 
0a9b0     0C E4 85 F1 | 	sub	objptr, ##6156
0a9b4     F2 04 02 F1 | 	add	_var03, objptr
0a9b8     04 04 06 F1 | 	add	_var03, #4
0a9bc     02 03 62 FC | 	wrlong	_var02, _var03
0a9c0     0C 00 00 FF 
0a9c4     0C E4 05 F1 | 	add	objptr, ##6156
0a9c8     F2 06 02 FB | 	rdlong	_var04, objptr
0a9cc     03 05 02 F6 | 	mov	_var03, _var04
0a9d0     01 04 66 F0 | 	shl	_var03, #1
0a9d4     03 05 02 F1 | 	add	_var03, _var04
0a9d8     02 04 66 F0 | 	shl	_var03, #2
0a9dc     0C 00 00 FF 
0a9e0     0C E4 85 F1 | 	sub	objptr, ##6156
0a9e4     F2 04 02 F1 | 	add	_var03, objptr
0a9e8     08 04 06 F1 | 	add	_var03, #8
0a9ec     02 13 62 FC | 	wrlong	arg01, _var03
0a9f0     0C 00 00 FF 
0a9f4     0C E4 05 F1 | 	add	objptr, ##6156
0a9f8     F2 00 02 FB | 	rdlong	_var01, objptr
0a9fc     01 00 06 F1 | 	add	_var01, #1
0aa00     F2 00 62 FC | 	wrlong	_var01, objptr
0aa04     43 00 00 FF 
0aa08     88 E4 85 F1 | 	sub	objptr, ##34440
0aa0c                 | LR__0890
0aa0c                 | _push_ret
0aa0c     2D 00 64 FD | 	ret
0aa10                 | 
0aa10                 | ' 
0aa10                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0aa10                 | ' 
0aa10                 | ' sub do_push
0aa10                 | _do_push
0aa10                 | ' if stackpointer<maxstack then 
0aa10     43 00 00 FF 
0aa14     88 E4 05 F1 | 	add	objptr, ##34440
0aa18     F2 00 02 FB | 	rdlong	_var01, objptr
0aa1c     43 00 00 FF 
0aa20     88 E4 85 F1 | 	sub	objptr, ##34440
0aa24     01 00 00 FF 
0aa28     00 00 56 F2 | 	cmps	_var01, ##512 wc
0aa2c     F8 00 90 3D |  if_ae	jmp	#LR__0900
0aa30     4A 00 00 FF 
0aa34     B0 E4 05 F1 | 	add	objptr, ##38064
0aa38     F2 02 02 FB | 	rdlong	_var02, objptr
0aa3c     01 05 02 F6 | 	mov	_var03, _var02
0aa40     01 04 66 F0 | 	shl	_var03, #1
0aa44     01 05 02 F1 | 	add	_var03, _var02
0aa48     02 04 66 F0 | 	shl	_var03, #2
0aa4c     03 00 00 FF 
0aa50     04 E4 85 F1 | 	sub	objptr, ##1540
0aa54     F2 04 02 F1 | 	add	_var03, objptr
0aa58     02 01 02 FB | 	rdlong	_var01, _var03
0aa5c     04 04 06 F1 | 	add	_var03, #4
0aa60     02 07 02 FB | 	rdlong	_var04, _var03
0aa64     01 05 02 F6 | 	mov	_var03, _var02
0aa68     01 04 66 F0 | 	shl	_var03, #1
0aa6c     01 05 02 F1 | 	add	_var03, _var02
0aa70     02 04 66 F0 | 	shl	_var03, #2
0aa74     F2 04 02 F1 | 	add	_var03, objptr
0aa78     08 04 06 F1 | 	add	_var03, #8
0aa7c     02 03 02 FB | 	rdlong	_var02, _var03
0aa80     04 00 00 FF 
0aa84     24 E4 85 F1 | 	sub	objptr, ##2084
0aa88     F2 04 02 FB | 	rdlong	_var03, objptr
0aa8c     02 09 02 F6 | 	mov	_var05, _var03
0aa90     01 08 66 F0 | 	shl	_var05, #1
0aa94     02 09 02 F1 | 	add	_var05, _var03
0aa98     02 08 66 F0 | 	shl	_var05, #2
0aa9c     0C 00 00 FF 
0aaa0     0C E4 85 F1 | 	sub	objptr, ##6156
0aaa4     F2 08 02 F1 | 	add	_var05, objptr
0aaa8     04 01 62 FC | 	wrlong	_var01, _var05
0aaac     0C 00 00 FF 
0aab0     0C E4 05 F1 | 	add	objptr, ##6156
0aab4     F2 08 02 FB | 	rdlong	_var05, objptr
0aab8     04 05 02 F6 | 	mov	_var03, _var05
0aabc     01 04 66 F0 | 	shl	_var03, #1
0aac0     04 05 02 F1 | 	add	_var03, _var05
0aac4     02 04 66 F0 | 	shl	_var03, #2
0aac8     0C 00 00 FF 
0aacc     0C E4 85 F1 | 	sub	objptr, ##6156
0aad0     F2 04 02 F1 | 	add	_var03, objptr
0aad4     04 04 06 F1 | 	add	_var03, #4
0aad8     02 07 62 FC | 	wrlong	_var04, _var03
0aadc     0C 00 00 FF 
0aae0     0C E4 05 F1 | 	add	objptr, ##6156
0aae4     F2 08 02 FB | 	rdlong	_var05, objptr
0aae8     04 07 02 F6 | 	mov	_var04, _var05
0aaec     01 06 66 F0 | 	shl	_var04, #1
0aaf0     04 07 02 F1 | 	add	_var04, _var05
0aaf4     02 06 66 F0 | 	shl	_var04, #2
0aaf8     0C 00 00 FF 
0aafc     0C E4 85 F1 | 	sub	objptr, ##6156
0ab00     F2 06 02 F1 | 	add	_var04, objptr
0ab04     08 06 06 F1 | 	add	_var04, #8
0ab08     03 03 62 FC | 	wrlong	_var02, _var04
0ab0c     0C 00 00 FF 
0ab10     0C E4 05 F1 | 	add	objptr, ##6156
0ab14     F2 00 02 FB | 	rdlong	_var01, objptr
0ab18     01 00 06 F1 | 	add	_var01, #1
0ab1c     F2 00 62 FC | 	wrlong	_var01, objptr
0ab20     43 00 00 FF 
0ab24     88 E4 85 F1 | 	sub	objptr, ##34440
0ab28                 | LR__0900
0ab28                 | _do_push_ret
0ab28     2D 00 64 FD | 	ret
0ab2c                 | 
0ab2c                 | ' 
0ab2c                 | '   
0ab2c                 | ' sub csave_block(address as ulong)
0ab2c                 | _csave_block
0ab2c     09 01 02 F6 | 	mov	_var01, arg01
0ab30                 | ' 
0ab30                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0ab30                 | ' ' we enter it at the state of playing 1 kHz header tone
0ab30                 | ' 
0ab30                 | ' for i=0 to 63 step 2
0ab30     00 02 06 F6 | 	mov	_var02, #0
0ab34                 | LR__0910
0ab34                 | '   do: loop until lpeek(base+32*7)>32768
0ab34     37 00 00 FF 
0ab38     40 E4 05 F1 | 	add	objptr, ##28224
0ab3c     97 0C 48 FB | 	callpa	#(@LR__0912-@LR__0911)>>2,fcache_load_ptr_
0ab40                 | LR__0911
0ab40     F2 12 02 FB | 	rdlong	arg01, objptr
0ab44     E0 12 06 F1 | 	add	arg01, #224
0ab48     09 FB 01 FB | 	rdlong	result1, arg01
0ab4c     40 00 00 FF 
0ab50     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ab54     E8 FF 9F CD |  if_b	jmp	#LR__0911
0ab58                 | LR__0912
0ab58     00 13 02 F6 | 	mov	arg01, _var01
0ab5c     01 05 02 F6 | 	mov	_var03, _var02
0ab60     02 04 66 F0 | 	shl	_var03, #2
0ab64     02 13 02 F1 | 	add	arg01, _var03
0ab68     09 07 02 FB | 	rdlong	_var04, arg01
0ab6c     22 00 00 FF 
0ab70     F4 E5 05 F1 | 	add	objptr, ##17908
0ab74     F2 06 62 FC | 	wrlong	_var04, objptr
0ab78     5A 00 00 FF 
0ab7c     34 E4 85 F1 | 	sub	objptr, ##46132
0ab80                 | '   q=lpeek(address+4*i)
0ab80                 | '      for bit=0 to 31
0ab80     00 08 06 F6 | 	mov	_var05, #0
0ab84     97 84 48 FB | 	callpa	#(@LR__0917-@LR__0913)>>2,fcache_load_ptr_
0ab88                 | LR__0913
0ab88                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0ab88     5A 00 00 FF 
0ab8c     34 E4 05 F1 | 	add	objptr, ##46132
0ab90     F2 06 02 FB | 	rdlong	_var04, objptr
0ab94     5A 00 00 FF 
0ab98     34 E4 85 F1 | 	sub	objptr, ##46132
0ab9c     04 05 C2 F9 | 	decod	_var03, _var05
0aba0     02 07 CA F7 | 	test	_var04, _var03 wz
0aba4     60 00 90 AD |  if_e	jmp	#LR__0914
0aba8     04 05 02 F6 | 	mov	_var03, _var05
0abac     02 04 66 F0 | 	shl	_var03, #2
0abb0     55 00 00 FF 
0abb4     E8 E5 05 F1 | 	add	objptr, ##44008
0abb8     F2 04 02 F1 | 	add	_var03, objptr
0abbc     02 FF 48 FC | 	wrbyte	#127, _var03
0abc0     04 05 02 F6 | 	mov	_var03, _var05
0abc4     02 04 66 F0 | 	shl	_var03, #2
0abc8     01 04 06 F1 | 	add	_var03, #1
0abcc     F2 04 02 F1 | 	add	_var03, objptr
0abd0     02 01 49 FC | 	wrbyte	#128, _var03
0abd4     04 05 02 F6 | 	mov	_var03, _var05
0abd8     02 04 66 F0 | 	shl	_var03, #2
0abdc     02 04 06 F1 | 	add	_var03, #2
0abe0     F2 04 02 F1 | 	add	_var03, objptr
0abe4     02 FF 48 FC | 	wrbyte	#127, _var03
0abe8     04 05 02 F6 | 	mov	_var03, _var05
0abec     02 04 66 F0 | 	shl	_var03, #2
0abf0     03 04 06 F1 | 	add	_var03, #3
0abf4     F2 04 02 F1 | 	add	_var03, objptr
0abf8     02 01 49 FC | 	wrbyte	#128, _var03
0abfc     55 00 00 FF 
0ac00     E8 E5 85 F1 | 	sub	objptr, ##44008
0ac04     5C 00 90 FD | 	jmp	#LR__0915
0ac08                 | LR__0914
0ac08     04 05 02 F6 | 	mov	_var03, _var05
0ac0c     02 04 66 F0 | 	shl	_var03, #2
0ac10     55 00 00 FF 
0ac14     E8 E5 05 F1 | 	add	objptr, ##44008
0ac18     F2 04 02 F1 | 	add	_var03, objptr
0ac1c     02 01 49 FC | 	wrbyte	#128, _var03
0ac20     04 05 02 F6 | 	mov	_var03, _var05
0ac24     02 04 66 F0 | 	shl	_var03, #2
0ac28     01 04 06 F1 | 	add	_var03, #1
0ac2c     F2 04 02 F1 | 	add	_var03, objptr
0ac30     02 01 49 FC | 	wrbyte	#128, _var03
0ac34     04 05 02 F6 | 	mov	_var03, _var05
0ac38     02 04 66 F0 | 	shl	_var03, #2
0ac3c     02 04 06 F1 | 	add	_var03, #2
0ac40     F2 04 02 F1 | 	add	_var03, objptr
0ac44     02 FF 48 FC | 	wrbyte	#127, _var03
0ac48     04 05 02 F6 | 	mov	_var03, _var05
0ac4c     02 04 66 F0 | 	shl	_var03, #2
0ac50     03 04 06 F1 | 	add	_var03, #3
0ac54     F2 04 02 F1 | 	add	_var03, objptr
0ac58     02 FF 48 FC | 	wrbyte	#127, _var03
0ac5c     55 00 00 FF 
0ac60     E8 E5 85 F1 | 	sub	objptr, ##44008
0ac64                 | LR__0915
0ac64     01 08 06 F1 | 	add	_var05, #1
0ac68     20 08 56 F2 | 	cmps	_var05, #32 wc
0ac6c     18 FF 9F CD |  if_b	jmp	#LR__0913
0ac70                 | '   do: loop until lpeek(base+32*7)<32768
0ac70     37 00 00 FF 
0ac74     40 E4 05 F1 | 	add	objptr, ##28224
0ac78                 | LR__0916
0ac78     F2 12 02 FB | 	rdlong	arg01, objptr
0ac7c     E0 12 06 F1 | 	add	arg01, #224
0ac80     09 FB 01 FB | 	rdlong	result1, arg01
0ac84     40 00 00 FF 
0ac88     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ac8c     E8 FF 9F 3D |  if_ae	jmp	#LR__0916
0ac90                 | LR__0917
0ac90     00 13 02 F6 | 	mov	arg01, _var01
0ac94     04 12 06 F1 | 	add	arg01, #4
0ac98     01 05 02 F6 | 	mov	_var03, _var02
0ac9c     02 04 66 F0 | 	shl	_var03, #2
0aca0     02 13 02 F1 | 	add	arg01, _var03
0aca4     09 07 02 FB | 	rdlong	_var04, arg01
0aca8     22 00 00 FF 
0acac     F4 E5 05 F1 | 	add	objptr, ##17908
0acb0     F2 06 62 FC | 	wrlong	_var04, objptr
0acb4     5A 00 00 FF 
0acb8     34 E4 85 F1 | 	sub	objptr, ##46132
0acbc                 | '   q=lpeek(address+4+4*i)
0acbc                 | '      for bit=0 to 31
0acbc     00 08 06 F6 | 	mov	_var05, #0
0acc0     97 94 48 FB | 	callpa	#(@LR__0921-@LR__0918)>>2,fcache_load_ptr_
0acc4                 | LR__0918
0acc4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0acc4     5A 00 00 FF 
0acc8     34 E4 05 F1 | 	add	objptr, ##46132
0accc     F2 06 02 FB | 	rdlong	_var04, objptr
0acd0     5A 00 00 FF 
0acd4     34 E4 85 F1 | 	sub	objptr, ##46132
0acd8     04 05 C2 F9 | 	decod	_var03, _var05
0acdc     02 07 CA F7 | 	test	_var04, _var03 wz
0ace0     80 00 90 AD |  if_e	jmp	#LR__0919
0ace4     04 0B 02 F6 | 	mov	_var06, _var05
0ace8     02 0A 66 F0 | 	shl	_var06, #2
0acec     80 04 06 F6 | 	mov	_var03, #128
0acf0     05 05 02 F1 | 	add	_var03, _var06
0acf4     55 00 00 FF 
0acf8     E8 E5 05 F1 | 	add	objptr, ##44008
0acfc     F2 04 02 F1 | 	add	_var03, objptr
0ad00     02 FF 48 FC | 	wrbyte	#127, _var03
0ad04     04 0B 02 F6 | 	mov	_var06, _var05
0ad08     02 0A 66 F0 | 	shl	_var06, #2
0ad0c     80 04 06 F6 | 	mov	_var03, #128
0ad10     05 05 02 F1 | 	add	_var03, _var06
0ad14     01 04 06 F1 | 	add	_var03, #1
0ad18     F2 04 02 F1 | 	add	_var03, objptr
0ad1c     02 01 49 FC | 	wrbyte	#128, _var03
0ad20     04 0B 02 F6 | 	mov	_var06, _var05
0ad24     02 0A 66 F0 | 	shl	_var06, #2
0ad28     80 04 06 F6 | 	mov	_var03, #128
0ad2c     05 05 02 F1 | 	add	_var03, _var06
0ad30     02 04 06 F1 | 	add	_var03, #2
0ad34     F2 04 02 F1 | 	add	_var03, objptr
0ad38     02 FF 48 FC | 	wrbyte	#127, _var03
0ad3c     04 0B 02 F6 | 	mov	_var06, _var05
0ad40     02 0A 66 F0 | 	shl	_var06, #2
0ad44     80 04 06 F6 | 	mov	_var03, #128
0ad48     05 05 02 F1 | 	add	_var03, _var06
0ad4c     03 04 06 F1 | 	add	_var03, #3
0ad50     F2 04 02 F1 | 	add	_var03, objptr
0ad54     02 01 49 FC | 	wrbyte	#128, _var03
0ad58     55 00 00 FF 
0ad5c     E8 E5 85 F1 | 	sub	objptr, ##44008
0ad60     7C 00 90 FD | 	jmp	#LR__0920
0ad64                 | LR__0919
0ad64     04 0B 02 F6 | 	mov	_var06, _var05
0ad68     02 0A 66 F0 | 	shl	_var06, #2
0ad6c     80 04 06 F6 | 	mov	_var03, #128
0ad70     05 05 02 F1 | 	add	_var03, _var06
0ad74     55 00 00 FF 
0ad78     E8 E5 05 F1 | 	add	objptr, ##44008
0ad7c     F2 04 02 F1 | 	add	_var03, objptr
0ad80     02 01 49 FC | 	wrbyte	#128, _var03
0ad84     04 0B 02 F6 | 	mov	_var06, _var05
0ad88     02 0A 66 F0 | 	shl	_var06, #2
0ad8c     80 04 06 F6 | 	mov	_var03, #128
0ad90     05 05 02 F1 | 	add	_var03, _var06
0ad94     01 04 06 F1 | 	add	_var03, #1
0ad98     F2 04 02 F1 | 	add	_var03, objptr
0ad9c     02 01 49 FC | 	wrbyte	#128, _var03
0ada0     04 0B 02 F6 | 	mov	_var06, _var05
0ada4     02 0A 66 F0 | 	shl	_var06, #2
0ada8     80 04 06 F6 | 	mov	_var03, #128
0adac     05 05 02 F1 | 	add	_var03, _var06
0adb0     02 04 06 F1 | 	add	_var03, #2
0adb4     F2 04 02 F1 | 	add	_var03, objptr
0adb8     02 FF 48 FC | 	wrbyte	#127, _var03
0adbc     04 0B 02 F6 | 	mov	_var06, _var05
0adc0     02 0A 66 F0 | 	shl	_var06, #2
0adc4     80 04 06 F6 | 	mov	_var03, #128
0adc8     05 05 02 F1 | 	add	_var03, _var06
0adcc     03 04 06 F1 | 	add	_var03, #3
0add0     F2 04 02 F1 | 	add	_var03, objptr
0add4     02 FF 48 FC | 	wrbyte	#127, _var03
0add8     55 00 00 FF 
0addc     E8 E5 85 F1 | 	sub	objptr, ##44008
0ade0                 | LR__0920
0ade0     01 08 06 F1 | 	add	_var05, #1
0ade4     20 08 56 F2 | 	cmps	_var05, #32 wc
0ade8     D8 FE 9F CD |  if_b	jmp	#LR__0918
0adec                 | LR__0921
0adec     02 02 06 F1 | 	add	_var02, #2
0adf0     40 02 56 F2 | 	cmps	_var02, #64 wc
0adf4     3C FD 9F CD |  if_b	jmp	#LR__0910
0adf8                 | ' do: loop until lpeek(base+32*7)>32768
0adf8     37 00 00 FF 
0adfc     40 E4 05 F1 | 	add	objptr, ##28224
0ae00     97 84 48 FB | 	callpa	#(@LR__0930-@LR__0922)>>2,fcache_load_ptr_
0ae04                 | LR__0922
0ae04     F2 12 02 FB | 	rdlong	arg01, objptr
0ae08     E0 12 06 F1 | 	add	arg01, #224
0ae0c     09 FB 01 FB | 	rdlong	result1, arg01
0ae10     40 00 00 FF 
0ae14     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ae18     E8 FF 9F CD |  if_b	jmp	#LR__0922
0ae1c     37 00 00 FF 
0ae20     40 E4 85 F1 | 	sub	objptr, ##28224
0ae24                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ae24     00 02 06 F6 | 	mov	_var02, #0
0ae28                 | LR__0923
0ae28     01 07 52 F6 | 	abs	_var04, _var02 wc
0ae2c     07 06 06 F5 | 	and	_var04, #7
0ae30     03 07 82 F6 | 	negc	_var04, _var04
0ae34     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae38     20 00 90 3D |  if_ae	jmp	#LR__0924
0ae3c     01 0B 02 F6 | 	mov	_var06, _var02
0ae40     55 00 00 FF 
0ae44     E8 E5 05 F1 | 	add	objptr, ##44008
0ae48     F2 0A 02 F1 | 	add	_var06, objptr
0ae4c     05 FF 48 FC | 	wrbyte	#127, _var06
0ae50     55 00 00 FF 
0ae54     E8 E5 85 F1 | 	sub	objptr, ##44008
0ae58     1C 00 90 FD | 	jmp	#LR__0925
0ae5c                 | LR__0924
0ae5c     01 0B 02 F6 | 	mov	_var06, _var02
0ae60     55 00 00 FF 
0ae64     E8 E5 05 F1 | 	add	objptr, ##44008
0ae68     F2 0A 02 F1 | 	add	_var06, objptr
0ae6c     05 01 49 FC | 	wrbyte	#128, _var06
0ae70     55 00 00 FF 
0ae74     E8 E5 85 F1 | 	sub	objptr, ##44008
0ae78                 | LR__0925
0ae78     01 02 06 F1 | 	add	_var02, #1
0ae7c     80 02 56 F2 | 	cmps	_var02, #128 wc
0ae80     A4 FF 9F CD |  if_b	jmp	#LR__0923
0ae84                 | ' 
0ae84                 | ' do: loop until lpeek(base+32*7)<32768
0ae84     37 00 00 FF 
0ae88     40 E4 05 F1 | 	add	objptr, ##28224
0ae8c                 | LR__0926
0ae8c     F2 12 02 FB | 	rdlong	arg01, objptr
0ae90     E0 12 06 F1 | 	add	arg01, #224
0ae94     09 FB 01 FB | 	rdlong	result1, arg01
0ae98     40 00 00 FF 
0ae9c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0aea0     E8 FF 9F 3D |  if_ae	jmp	#LR__0926
0aea4     37 00 00 FF 
0aea8     40 E4 85 F1 | 	sub	objptr, ##28224
0aeac                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0aeac     80 02 06 F6 | 	mov	_var02, #128
0aeb0                 | LR__0927
0aeb0     01 07 52 F6 | 	abs	_var04, _var02 wc
0aeb4     07 06 06 F5 | 	and	_var04, #7
0aeb8     03 07 82 F6 | 	negc	_var04, _var04
0aebc     04 06 56 F2 | 	cmps	_var04, #4 wc
0aec0     20 00 90 3D |  if_ae	jmp	#LR__0928
0aec4     01 0B 02 F6 | 	mov	_var06, _var02
0aec8     55 00 00 FF 
0aecc     E8 E5 05 F1 | 	add	objptr, ##44008
0aed0     F2 0A 02 F1 | 	add	_var06, objptr
0aed4     05 FF 48 FC | 	wrbyte	#127, _var06
0aed8     55 00 00 FF 
0aedc     E8 E5 85 F1 | 	sub	objptr, ##44008
0aee0     1C 00 90 FD | 	jmp	#LR__0929
0aee4                 | LR__0928
0aee4     01 0B 02 F6 | 	mov	_var06, _var02
0aee8     55 00 00 FF 
0aeec     E8 E5 05 F1 | 	add	objptr, ##44008
0aef0     F2 0A 02 F1 | 	add	_var06, objptr
0aef4     05 01 49 FC | 	wrbyte	#128, _var06
0aef8     55 00 00 FF 
0aefc     E8 E5 85 F1 | 	sub	objptr, ##44008
0af00                 | LR__0929
0af00     01 02 06 F1 | 	add	_var02, #1
0af04     00 03 16 F2 | 	cmp	_var02, #256 wc
0af08     A4 FF 9F CD |  if_b	jmp	#LR__0927
0af0c                 | LR__0930
0af0c                 | _csave_block_ret
0af0c     2D 00 64 FD | 	ret
0af10                 | 
0af10                 | ' 
0af10                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0af10                 | _csave_addtoblock
0af10     04 4A 05 F6 | 	mov	COUNT_, #4
0af14     A8 00 A0 FD | 	call	#pushregs_
0af18     09 1F 02 F6 | 	mov	local01, arg01
0af1c                 | ' 
0af1c                 | ' 
0af1c                 | ' if force=0 then
0af1c     07 14 4E F7 | 	zerox	arg02, #7 wz
0af20     78 00 90 5D |  if_ne	jmp	#LR__0940
0af24     58 00 00 FF 
0af28     E8 E4 05 F1 | 	add	objptr, ##45288
0af2c     F2 14 02 FB | 	rdlong	arg02, objptr
0af30     02 00 00 FF 
0af34     00 E4 85 F1 | 	sub	objptr, ##1024
0af38     F2 14 02 F1 | 	add	arg02, objptr
0af3c     0A 1F 42 FC | 	wrbyte	local01, arg02
0af40     02 00 00 FF 
0af44     00 E4 05 F1 | 	add	objptr, ##1024
0af48     F2 1E 02 FB | 	rdlong	local01, objptr
0af4c     01 1E 06 F1 | 	add	local01, #1
0af50     F2 1E 62 FC | 	wrlong	local01, objptr
0af54                 | '   block(blockptr)=d
0af54                 | '   blockptr+=1
0af54                 | '   if blockptr>=255 then
0af54     58 00 00 FF 
0af58     E8 E4 85 F1 | 	sub	objptr, ##45288
0af5c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0af60     E4 00 90 CD |  if_b	jmp	#LR__0944
0af64     56 00 00 FF 
0af68     E8 E4 05 F1 | 	add	objptr, ##44264
0af6c     F2 12 02 F6 | 	mov	arg01, objptr
0af70     56 00 00 FF 
0af74     E8 E4 85 F1 | 	sub	objptr, ##44264
0af78     B0 FB BF FD | 	call	#_csave_block
0af7c     58 00 00 FF 
0af80     E8 E4 05 F1 | 	add	objptr, ##45288
0af84     F2 00 68 FC | 	wrlong	#0, objptr
0af88     58 00 00 FF 
0af8c     E8 E4 85 F1 | 	sub	objptr, ##45288
0af90     2C 13 06 F6 | 	mov	arg01, #300
0af94     28 41 B1 FD | 	call	#__system___waitms
0af98     AC 00 90 FD | 	jmp	#LR__0944
0af9c                 | LR__0940
0af9c     58 00 00 FF 
0afa0     E8 E4 05 F1 | 	add	objptr, ##45288
0afa4     F2 20 02 FB | 	rdlong	local02, objptr
0afa8     02 00 00 FF 
0afac     00 E4 85 F1 | 	sub	objptr, ##1024
0afb0     F2 20 02 F1 | 	add	local02, objptr
0afb4     10 1F 42 FC | 	wrbyte	local01, local02
0afb8                 | '   block(blockptr)=d
0afb8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0afb8     02 00 00 FF 
0afbc     00 E4 05 F1 | 	add	objptr, ##1024
0afc0     F2 22 02 FB | 	rdlong	local03, objptr
0afc4     58 00 00 FF 
0afc8     E8 E4 85 F1 | 	sub	objptr, ##45288
0afcc     FF 22 16 F2 | 	cmp	local03, #255 wc
0afd0     40 00 90 3D |  if_ae	jmp	#LR__0943
0afd4     58 00 00 FF 
0afd8     E8 E4 05 F1 | 	add	objptr, ##45288
0afdc     F2 24 02 FB | 	rdlong	local04, objptr
0afe0     58 00 00 FF 
0afe4     E8 E4 85 F1 | 	sub	objptr, ##45288
0afe8                 | LR__0941
0afe8     00 25 56 F2 | 	cmps	local04, #256 wc
0afec     24 00 90 3D |  if_ae	jmp	#LR__0942
0aff0     12 21 02 F6 | 	mov	local02, local04
0aff4     56 00 00 FF 
0aff8     E8 E4 05 F1 | 	add	objptr, ##44264
0affc     F2 20 02 F1 | 	add	local02, objptr
0b000     10 01 48 FC | 	wrbyte	#0, local02
0b004     01 24 06 F1 | 	add	local04, #1
0b008     56 00 00 FF 
0b00c     E8 E4 85 F1 | 	sub	objptr, ##44264
0b010     D4 FF 9F FD | 	jmp	#LR__0941
0b014                 | LR__0942
0b014                 | LR__0943
0b014     56 00 00 FF 
0b018     E8 E4 05 F1 | 	add	objptr, ##44264
0b01c     F2 12 02 F6 | 	mov	arg01, objptr
0b020     56 00 00 FF 
0b024     E8 E4 85 F1 | 	sub	objptr, ##44264
0b028     00 FB BF FD | 	call	#_csave_block
0b02c     58 00 00 FF 
0b030     E8 E4 05 F1 | 	add	objptr, ##45288
0b034     F2 00 68 FC | 	wrlong	#0, objptr
0b038     58 00 00 FF 
0b03c     E8 E4 85 F1 | 	sub	objptr, ##45288
0b040     2C 13 06 F6 | 	mov	arg01, #300
0b044     78 40 B1 FD | 	call	#__system___waitms
0b048                 | LR__0944
0b048     A7 F0 03 F6 | 	mov	ptra, fp
0b04c     B2 00 A0 FD | 	call	#popregs_
0b050                 | _csave_addtoblock_ret
0b050     2D 00 64 FD | 	ret
0b054                 | 
0b054                 | ' 
0b054                 | ' sub test_csave
0b054                 | _test_csave
0b054     04 4A 05 F6 | 	mov	COUNT_, #4
0b058     A8 00 A0 FD | 	call	#pushregs_
0b05c     C0 F0 07 F1 | 	add	ptra, #192
0b060                 | ' 'dim fileheader,savestart, saveptr as ulong
0b060                 | ' 
0b060                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b060     4A 00 00 FF 
0b064     B4 E4 05 F1 | 	add	objptr, ##38068
0b068     F2 12 02 FB | 	rdlong	arg01, objptr
0b06c     4A 00 00 FF 
0b070     B4 E4 85 F1 | 	sub	objptr, ##38068
0b074     40 FB B0 FD | 	call	#_pslpeek
0b078     FF FF 7F FF 
0b07c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b080     0C 00 90 5D |  if_ne	jmp	#LR__0950
0b084     1B 12 06 F6 | 	mov	arg01, #27
0b088     98 F8 B0 FD | 	call	#_printerror
0b08c     1C 03 90 FD | 	jmp	#LR__0964
0b090                 | LR__0950
0b090     04 F8 BF FD | 	call	#_pop
0b094     90 4E 05 F1 | 	add	fp, #144
0b098     A7 FA 61 FC | 	wrlong	result1, fp
0b09c     04 4E 05 F1 | 	add	fp, #4
0b0a0     A7 FC 61 FC | 	wrlong	result2, fp
0b0a4     04 4E 05 F1 | 	add	fp, #4
0b0a8     A7 FE 61 FC | 	wrlong	result3, fp
0b0ac                 | ' t1=pop()
0b0ac                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0b0ac     98 4E 85 F1 | 	sub	fp, #152
0b0b0     1F FE 0D F2 | 	cmp	result3, #31 wz
0b0b4     24 00 90 AD |  if_e	jmp	#LR__0951
0b0b8     59 00 00 FF 
0b0bc     E4 E5 05 F1 | 	add	objptr, ##46052
0b0c0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b0c4     59 00 00 FF 
0b0c8     E4 E5 85 F1 | 	sub	objptr, ##46052
0b0cc     8C 4E 05 F1 | 	add	fp, #140
0b0d0     A7 1C 62 FC | 	wrlong	arg06, fp
0b0d4     8C 4E 85 F1 | 	sub	fp, #140
0b0d8     14 00 90 FD | 	jmp	#LR__0952
0b0dc                 | LR__0951
0b0dc     90 4E 05 F1 | 	add	fp, #144
0b0e0     A7 1C 02 FB | 	rdlong	arg06, fp
0b0e4     04 4E 85 F1 | 	sub	fp, #4
0b0e8     A7 1C 62 FC | 	wrlong	arg06, fp
0b0ec     8C 4E 85 F1 | 	sub	fp, #140
0b0f0                 | LR__0952
0b0f0                 | ' 
0b0f0                 | ' ' prepare 1 kHz header wave
0b0f0                 | ' 
0b0f0                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b0f0     A7 00 68 FC | 	wrlong	#0, fp
0b0f4     97 34 48 FB | 	callpa	#(@LR__0956-@LR__0953)>>2,fcache_load_ptr_
0b0f8                 | LR__0953
0b0f8     A7 1C 02 FB | 	rdlong	arg06, fp
0b0fc     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0b100     07 1A 06 F5 | 	and	arg05, #7
0b104     0D 1B 82 F6 | 	negc	arg05, arg05
0b108     04 1A 56 F2 | 	cmps	arg05, #4 wc
0b10c     20 00 90 3D |  if_ae	jmp	#LR__0954
0b110     A7 1A 02 FB | 	rdlong	arg05, fp
0b114     55 00 00 FF 
0b118     E8 E5 05 F1 | 	add	objptr, ##44008
0b11c     F2 1A 02 F1 | 	add	arg05, objptr
0b120     0D FF 48 FC | 	wrbyte	#127, arg05
0b124     55 00 00 FF 
0b128     E8 E5 85 F1 | 	sub	objptr, ##44008
0b12c     1C 00 90 FD | 	jmp	#LR__0955
0b130                 | LR__0954
0b130     A7 1A 02 FB | 	rdlong	arg05, fp
0b134     55 00 00 FF 
0b138     E8 E5 05 F1 | 	add	objptr, ##44008
0b13c     F2 1A 02 F1 | 	add	arg05, objptr
0b140     0D 01 49 FC | 	wrbyte	#128, arg05
0b144     55 00 00 FF 
0b148     E8 E5 85 F1 | 	sub	objptr, ##44008
0b14c                 | LR__0955
0b14c     A7 1A 02 FB | 	rdlong	arg05, fp
0b150     01 1A 06 F1 | 	add	arg05, #1
0b154     A7 1A 62 FC | 	wrlong	arg05, fp
0b158     00 1B 56 F2 | 	cmps	arg05, #256 wc
0b15c     98 FF 9F CD |  if_b	jmp	#LR__0953
0b160                 | LR__0956
0b160     55 00 00 FF 
0b164     E8 E5 05 F1 | 	add	objptr, ##44008
0b168     F2 14 02 F6 | 	mov	arg02, objptr
0b16c     07 12 06 F6 | 	mov	arg01, #7
0b170     0F 00 00 FF 
0b174     40 17 06 F6 | 	mov	arg03, ##8000
0b178     0E 18 C6 F9 | 	decod	arg04, #14
0b17c     00 1B 06 F6 | 	mov	arg05, #256
0b180     00 1C 06 F6 | 	mov	arg06, #0
0b184     4A 00 00 FF 
0b188     1C E5 85 F1 | 	sub	objptr, ##38172
0b18c     98 38 B1 FD | 	call	#_audio096_spin2_play8
0b190     0B 00 00 FF 
0b194     CC E4 85 F1 | 	sub	objptr, ##5836
0b198     05 00 00 FF 
0b19c     B8 13 06 F6 | 	mov	arg01, ##3000
0b1a0     1C 3F B1 FD | 	call	#__system___waitms
0b1a4     58 00 00 FF 
0b1a8     E8 E4 05 F1 | 	add	objptr, ##45288
0b1ac     F2 00 68 FC | 	wrlong	#0, objptr
0b1b0     58 00 00 FF 
0b1b4     E8 E4 85 F1 | 	sub	objptr, ##45288
0b1b8     72 12 06 F6 | 	mov	arg01, #114
0b1bc     00 14 06 F6 | 	mov	arg02, #0
0b1c0     4C FD BF FD | 	call	#_csave_addtoblock
0b1c4     62 12 06 F6 | 	mov	arg01, #98
0b1c8     00 14 06 F6 | 	mov	arg02, #0
0b1cc     40 FD BF FD | 	call	#_csave_addtoblock
0b1d0     61 12 06 F6 | 	mov	arg01, #97
0b1d4     00 14 06 F6 | 	mov	arg02, #0
0b1d8     34 FD BF FD | 	call	#_csave_addtoblock
0b1dc     0D 12 06 F6 | 	mov	arg01, #13
0b1e0     00 14 06 F6 | 	mov	arg02, #0
0b1e4     28 FD BF FD | 	call	#_csave_addtoblock
0b1e8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0b1e8                 | ' waitms 3000 
0b1e8                 | ' 
0b1e8                 | ' blockptr=0
0b1e8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0b1e8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0b1e8     A7 02 68 FC | 	wrlong	#1, fp
0b1ec     8C 4E 05 F1 | 	add	fp, #140
0b1f0     A7 12 02 FB | 	rdlong	arg01, fp
0b1f4     8C 4E 85 F1 | 	sub	fp, #140
0b1f8     09 1F 02 F6 | 	mov	local01, arg01
0b1fc     97 06 48 FB | 	callpa	#(@LR__0958-@LR__0957)>>2,fcache_load_ptr_
0b200                 | LR__0957
0b200     0F FB C9 FA | 	rdbyte	result1, local01 wz
0b204     01 1E 06 51 |  if_ne	add	local01, #1
0b208     F4 FF 9F 5D |  if_ne	jmp	#LR__0957
0b20c                 | LR__0958
0b20c     09 1F 82 F1 | 	sub	local01, arg01
0b210     0F 21 02 F6 | 	mov	local02, local01
0b214     01 20 06 F1 | 	add	local02, #1
0b218                 | LR__0959
0b218     A7 1A 02 FB | 	rdlong	arg05, fp
0b21c     10 1B 52 F2 | 	cmps	arg05, local02 wc
0b220     34 00 90 3D |  if_ae	jmp	#LR__0960
0b224     8C 4E 05 F1 | 	add	fp, #140
0b228     A7 12 02 FB | 	rdlong	arg01, fp
0b22c     8C 4E 85 F1 | 	sub	fp, #140
0b230     A7 14 02 FB | 	rdlong	arg02, fp
0b234     01 16 06 F6 | 	mov	arg03, #1
0b238     B8 5C B1 FD | 	call	#__system__Mid_S
0b23c     FD 12 C2 FA | 	rdbyte	arg01, result1
0b240     00 14 06 F6 | 	mov	arg02, #0
0b244     C8 FC BF FD | 	call	#_csave_addtoblock
0b248     A7 1A 02 FB | 	rdlong	arg05, fp
0b24c     01 1A 06 F1 | 	add	arg05, #1
0b250     A7 1A 62 FC | 	wrlong	arg05, fp
0b254     C0 FF 9F FD | 	jmp	#LR__0959
0b258                 | LR__0960
0b258     00 12 06 F6 | 	mov	arg01, #0
0b25c     00 14 06 F6 | 	mov	arg02, #0
0b260     AC FC BF FD | 	call	#_csave_addtoblock
0b264     72 12 06 F6 | 	mov	arg01, #114
0b268     00 14 06 F6 | 	mov	arg02, #0
0b26c     A0 FC BF FD | 	call	#_csave_addtoblock
0b270     62 12 06 F6 | 	mov	arg01, #98
0b274     00 14 06 F6 | 	mov	arg02, #0
0b278     94 FC BF FD | 	call	#_csave_addtoblock
0b27c     73 12 06 F6 | 	mov	arg01, #115
0b280     00 14 06 F6 | 	mov	arg02, #0
0b284     88 FC BF FD | 	call	#_csave_addtoblock
0b288     0D 12 06 F6 | 	mov	arg01, #13
0b28c     00 14 06 F6 | 	mov	arg02, #0
0b290     7C FC BF FD | 	call	#_csave_addtoblock
0b294     4A 00 00 FF 
0b298     B4 E4 05 F1 | 	add	objptr, ##38068
0b29c     F2 22 02 FB | 	rdlong	local03, objptr
0b2a0     4A 00 00 FF 
0b2a4     B4 E4 85 F1 | 	sub	objptr, ##38068
0b2a8     9C 4E 05 F1 | 	add	fp, #156
0b2ac     A7 22 62 FC | 	wrlong	local03, fp
0b2b0     9C 4E 85 F1 | 	sub	fp, #156
0b2b4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0b2b4                 | ' 
0b2b4                 | ' saveptr=programstart
0b2b4                 | ' do
0b2b4                 | LR__0961
0b2b4     A0 4E 05 F1 | 	add	fp, #160
0b2b8     A7 12 02 F6 | 	mov	arg01, fp
0b2bc     04 4E 85 F1 | 	sub	fp, #4
0b2c0     A7 14 02 FB | 	rdlong	arg02, fp
0b2c4     9C 4E 85 F1 | 	sub	fp, #156
0b2c8     18 16 06 F6 | 	mov	arg03, #24
0b2cc     0B 00 00 FF 
0b2d0     CC E4 05 F1 | 	add	objptr, ##5836
0b2d4     B4 2E B1 FD | 	call	#_psram_spin2_read1
0b2d8     0C 4E 05 F1 | 	add	fp, #12
0b2dc     A7 12 02 F6 | 	mov	arg01, fp
0b2e0     9C 4E 05 F1 | 	add	fp, #156
0b2e4     A7 14 02 FB | 	rdlong	arg02, fp
0b2e8     04 4E 05 F1 | 	add	fp, #4
0b2ec     A7 16 02 FB | 	rdlong	arg03, fp
0b2f0     AC 4E 85 F1 | 	sub	fp, #172
0b2f4     94 2E B1 FD | 	call	#_psram_spin2_read1
0b2f8     0B 00 00 FF 
0b2fc     CC E4 85 F1 | 	sub	objptr, ##5836
0b300     AC 4E 05 F1 | 	add	fp, #172
0b304     A7 12 02 FB | 	rdlong	arg01, fp
0b308     AC 4E 85 F1 | 	sub	fp, #172
0b30c     00 14 06 F6 | 	mov	arg02, #0
0b310     FC FB BF FD | 	call	#_csave_addtoblock
0b314                 | '   psram.read1(varptr(header(0)),saveptr,24)
0b314                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0b314                 | '   csave_addtoblock(header(3),0) ' that's always <255
0b314                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0b314     A7 00 68 FC | 	wrlong	#0, fp
0b318     AC 4E 05 F1 | 	add	fp, #172
0b31c     A7 24 02 FB | 	rdlong	local04, fp
0b320     AC 4E 85 F1 | 	sub	fp, #172
0b324                 | LR__0962
0b324     A7 22 02 FB | 	rdlong	local03, fp
0b328     12 23 52 F2 | 	cmps	local03, local04 wc
0b32c     2C 00 90 3D |  if_ae	jmp	#LR__0963
0b330     A7 22 02 FB | 	rdlong	local03, fp
0b334     0C 4E 05 F1 | 	add	fp, #12
0b338     A7 22 02 F1 | 	add	local03, fp
0b33c     11 13 C2 FA | 	rdbyte	arg01, local03
0b340     00 14 06 F6 | 	mov	arg02, #0
0b344     0C 4E 85 F1 | 	sub	fp, #12
0b348     C4 FB BF FD | 	call	#_csave_addtoblock
0b34c     A7 22 02 FB | 	rdlong	local03, fp
0b350     01 22 06 F1 | 	add	local03, #1
0b354     A7 22 62 FC | 	wrlong	local03, fp
0b358     C8 FF 9F FD | 	jmp	#LR__0962
0b35c                 | LR__0963
0b35c     B4 4E 05 F1 | 	add	fp, #180
0b360     A7 22 02 FB | 	rdlong	local03, fp
0b364     18 4E 85 F1 | 	sub	fp, #24
0b368     A7 22 62 FC | 	wrlong	local03, fp
0b36c     18 4E 05 F1 | 	add	fp, #24
0b370     A7 22 02 FB | 	rdlong	local03, fp
0b374     B4 4E 85 F1 | 	sub	fp, #180
0b378     FF FF 3F FF 
0b37c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b380     30 FF 9F 5D |  if_ne	jmp	#LR__0961
0b384     00 12 06 F6 | 	mov	arg01, #0
0b388     01 14 06 F6 | 	mov	arg02, #1
0b38c     80 FB BF FD | 	call	#_csave_addtoblock
0b390     37 00 00 FF 
0b394     40 E4 05 F1 | 	add	objptr, ##28224
0b398     F2 12 02 FB | 	rdlong	arg01, objptr
0b39c     37 00 00 FF 
0b3a0     40 E4 85 F1 | 	sub	objptr, ##28224
0b3a4     F4 12 06 F1 | 	add	arg01, #244
0b3a8     09 01 58 FC | 	wrword	#0, arg01
0b3ac                 | LR__0964
0b3ac     A7 F0 03 F6 | 	mov	ptra, fp
0b3b0     B2 00 A0 FD | 	call	#popregs_
0b3b4                 | _test_csave_ret
0b3b4     2D 00 64 FD | 	ret
0b3b8                 | 
0b3b8                 | ' 
0b3b8                 | ' ' ----------------- Save the program
0b3b8                 | ' 
0b3b8                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0b3b8                 | _do_save
0b3b8     04 4A 05 F6 | 	mov	COUNT_, #4
0b3bc     A8 00 A0 FD | 	call	#pushregs_
0b3c0     01 00 00 FF 
0b3c4     C0 F0 07 F1 | 	add	ptra, ##704
0b3c8     4A 00 00 FF 
0b3cc     B0 E4 05 F1 | 	add	objptr, ##38064
0b3d0     F2 1E 02 FB | 	rdlong	local01, objptr
0b3d4     0F 21 02 F6 | 	mov	local02, local01
0b3d8     01 20 66 F0 | 	shl	local02, #1
0b3dc     0F 21 02 F1 | 	add	local02, local01
0b3e0     02 20 66 F0 | 	shl	local02, #2
0b3e4     03 00 00 FF 
0b3e8     04 E4 85 F1 | 	sub	objptr, ##1540
0b3ec     F2 20 02 F1 | 	add	local02, objptr
0b3f0     10 23 02 FB | 	rdlong	local03, local02
0b3f4     01 00 00 FF 
0b3f8     10 4E 05 F1 | 	add	fp, ##528
0b3fc     A7 22 62 FC | 	wrlong	local03, fp
0b400                 | ' 
0b400                 | ' numpar=compiledline(lineptr_e).result.uresult
0b400                 | ' 
0b400                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b400     01 00 00 FF 
0b404     10 4E 85 F1 | 	sub	fp, ##528
0b408     01 22 56 F2 | 	cmps	local03, #1 wc
0b40c     47 00 00 FF 
0b410     AC E4 85 F1 | 	sub	objptr, ##36524
0b414     20 00 90 CD |  if_b	jmp	#LR__0970
0b418     7C F4 BF FD | 	call	#_pop
0b41c     A7 FA 61 FC | 	wrlong	result1, fp
0b420     04 4E 05 F1 | 	add	fp, #4
0b424     A7 FC 61 FC | 	wrlong	result2, fp
0b428     04 4E 05 F1 | 	add	fp, #4
0b42c     A7 FE 61 FC | 	wrlong	result3, fp
0b430     08 4E 85 F1 | 	sub	fp, #8
0b434     24 00 90 FD | 	jmp	#LR__0971
0b438                 | LR__0970
0b438     59 00 00 FF 
0b43c     E4 E5 05 F1 | 	add	objptr, ##46052
0b440     F2 22 02 FB | 	rdlong	local03, objptr
0b444     59 00 00 FF 
0b448     E4 E5 85 F1 | 	sub	objptr, ##46052
0b44c     A7 22 62 FC | 	wrlong	local03, fp
0b450     08 4E 05 F1 | 	add	fp, #8
0b454     A7 3E 68 FC | 	wrlong	#31, fp
0b458     08 4E 85 F1 | 	sub	fp, #8
0b45c                 | LR__0971
0b45c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b45c     4A 00 00 FF 
0b460     B4 E4 05 F1 | 	add	objptr, ##38068
0b464     F2 12 02 FB | 	rdlong	arg01, objptr
0b468     4A 00 00 FF 
0b46c     B4 E4 85 F1 | 	sub	objptr, ##38068
0b470     44 F7 B0 FD | 	call	#_pslpeek
0b474     FF FF 7F FF 
0b478     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b47c     0C 00 90 5D |  if_ne	jmp	#LR__0972
0b480     1B 12 06 F6 | 	mov	arg01, #27
0b484     9C F4 B0 FD | 	call	#_printerror
0b488     1C 03 90 FD | 	jmp	#LR__0978
0b48c                 | LR__0972
0b48c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0b48c     08 4E 05 F1 | 	add	fp, #8
0b490     A7 22 02 FB | 	rdlong	local03, fp
0b494     08 4E 85 F1 | 	sub	fp, #8
0b498     2B 22 0E F2 | 	cmp	local03, #43 wz
0b49c     18 00 90 5D |  if_ne	jmp	#LR__0973
0b4a0     A7 12 02 FB | 	rdlong	arg01, fp
0b4a4     68 38 B0 FD | 	call	#_convertstring
0b4a8     A7 FA 61 FC | 	wrlong	result1, fp
0b4ac     08 4E 05 F1 | 	add	fp, #8
0b4b0     A7 3E 68 FC | 	wrlong	#31, fp
0b4b4     08 4E 85 F1 | 	sub	fp, #8
0b4b8                 | LR__0973
0b4b8                 | ' if t1.result_type=result_string then
0b4b8     08 4E 05 F1 | 	add	fp, #8
0b4bc     A7 22 02 FB | 	rdlong	local03, fp
0b4c0     08 4E 85 F1 | 	sub	fp, #8
0b4c4     1F 22 0E F2 | 	cmp	local03, #31 wz
0b4c8     DC 02 90 5D |  if_ne	jmp	#LR__0977
0b4cc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b4cc     A7 12 02 FB | 	rdlong	arg01, fp
0b4d0     74 01 00 FF 
0b4d4     83 15 06 F6 | 	mov	arg02, ##@LR__5128
0b4d8     18 39 B1 FD | 	call	#__system___string_cmp
0b4dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4e0     59 00 00 AF 
0b4e4     E4 E5 05 A1 |  if_e	add	objptr, ##46052
0b4e8     F2 22 02 AB |  if_e	rdlong	local03, objptr
0b4ec     A7 22 62 AC |  if_e	wrlong	local03, fp
0b4f0     59 00 00 AF 
0b4f4     E4 E5 85 A1 |  if_e	sub	objptr, ##46052
0b4f8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b4fc     59 00 00 5F 
0b500     E4 E5 05 51 |  if_ne	add	objptr, ##46052
0b504     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0b508     59 00 00 5F 
0b50c     E4 E5 85 51 |  if_ne	sub	objptr, ##46052
0b510                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0b510     09 12 06 F6 | 	mov	arg01, #9
0b514     7C 88 B1 FD | 	call	#__system__close
0b518     09 22 06 F6 | 	mov	local03, #9
0b51c     52 00 00 FF 
0b520     C8 E4 05 F1 | 	add	objptr, ##42184
0b524     F2 12 02 FB | 	rdlong	arg01, objptr
0b528     52 00 00 FF 
0b52c     C8 E4 85 F1 | 	sub	objptr, ##42184
0b530     74 01 00 FF 
0b534     84 15 06 F6 | 	mov	arg02, ##@LR__5129
0b538     EC 38 B1 FD | 	call	#__system___string_concat
0b53c     FD 12 02 F6 | 	mov	arg01, result1
0b540     A7 14 02 FB | 	rdlong	arg02, fp
0b544     E0 38 B1 FD | 	call	#__system___string_concat
0b548     FD 14 02 F6 | 	mov	arg02, result1
0b54c     11 13 02 F6 | 	mov	arg01, local03
0b550     0D 16 06 F6 | 	mov	arg03, #13
0b554     78 44 B1 FD | 	call	#__system___basic_open_string
0b558     01 00 00 FF 
0b55c     0C 4E 05 F1 | 	add	fp, ##524
0b560     A7 0A 68 FC | 	wrlong	#5, fp
0b564     4A 00 00 FF 
0b568     B4 E4 05 F1 | 	add	objptr, ##38068
0b56c     F2 22 02 FB | 	rdlong	local03, objptr
0b570     4A 00 00 FF 
0b574     B4 E4 85 F1 | 	sub	objptr, ##38068
0b578     10 4E 05 F1 | 	add	fp, #16
0b57c     A7 22 62 FC | 	wrlong	local03, fp
0b580     01 00 00 FF 
0b584     1C 4E 85 F1 | 	sub	fp, ##540
0b588                 | ' '  put #9,1,fileheader,1
0b588                 | '   i=5
0b588                 | '   saveptr=programstart
0b588                 | '   do
0b588                 | LR__0974
0b588     01 00 00 FF 
0b58c     20 4E 05 F1 | 	add	fp, ##544
0b590     A7 12 02 F6 | 	mov	arg01, fp
0b594     04 4E 85 F1 | 	sub	fp, #4
0b598     A7 14 02 FB | 	rdlong	arg02, fp
0b59c     01 00 00 FF 
0b5a0     1C 4E 85 F1 | 	sub	fp, ##540
0b5a4     18 16 06 F6 | 	mov	arg03, #24
0b5a8     0B 00 00 FF 
0b5ac     CC E4 05 F1 | 	add	objptr, ##5836
0b5b0     D8 2B B1 FD | 	call	#_psram_spin2_read1
0b5b4     01 00 00 FF 
0b5b8     38 4E 05 F1 | 	add	fp, ##568
0b5bc     A7 12 02 F6 | 	mov	arg01, fp
0b5c0     10 4E 85 F1 | 	sub	fp, #16
0b5c4     A7 14 02 FB | 	rdlong	arg02, fp
0b5c8     04 4E 05 F1 | 	add	fp, #4
0b5cc     A7 16 02 FB | 	rdlong	arg03, fp
0b5d0     01 00 00 FF 
0b5d4     2C 4E 85 F1 | 	sub	fp, ##556
0b5d8     B0 2B B1 FD | 	call	#_psram_spin2_read1
0b5dc     0B 00 00 FF 
0b5e0     CC E4 85 F1 | 	sub	objptr, ##5836
0b5e4     74 01 00 FF 
0b5e8     86 23 06 F6 | 	mov	local03, ##@LR__5130
0b5ec     01 00 00 FF 
0b5f0     B8 4E 05 F1 | 	add	fp, ##696
0b5f4     A7 22 62 FC | 	wrlong	local03, fp
0b5f8                 | '     psram.read1(varptr(header(0)),saveptr,24)
0b5f8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0b5f8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0b5f8     AC 4E 85 F1 | 	sub	fp, #172
0b5fc     A7 02 68 FC | 	wrlong	#1, fp
0b600     20 4E 05 F1 | 	add	fp, #32
0b604     A7 24 02 FB | 	rdlong	local04, fp
0b608     01 00 00 FF 
0b60c     2C 4E 85 F1 | 	sub	fp, ##556
0b610     01 24 06 F1 | 	add	local04, #1
0b614                 | LR__0975
0b614     01 00 00 FF 
0b618     0C 4E 05 F1 | 	add	fp, ##524
0b61c     A7 22 02 FB | 	rdlong	local03, fp
0b620     01 00 00 FF 
0b624     0C 4E 85 F1 | 	sub	fp, ##524
0b628     12 23 52 F2 | 	cmps	local03, local04 wc
0b62c     64 00 90 3D |  if_ae	jmp	#LR__0976
0b630     01 00 00 FF 
0b634     B8 4E 05 F1 | 	add	fp, ##696
0b638     A7 1E 02 FB | 	rdlong	local01, fp
0b63c     AC 4E 85 F1 | 	sub	fp, #172
0b640     A7 22 02 FB | 	rdlong	local03, fp
0b644     01 22 86 F1 | 	sub	local03, #1
0b648     2C 4E 05 F1 | 	add	fp, #44
0b64c     A7 22 02 F1 | 	add	local03, fp
0b650     11 13 C2 FA | 	rdbyte	arg01, local03
0b654     01 00 00 FF 
0b658     38 4E 85 F1 | 	sub	fp, ##568
0b65c     40 59 B1 FD | 	call	#__system__Chr_S
0b660     FD 14 02 F6 | 	mov	arg02, result1
0b664     0F 13 02 F6 | 	mov	arg01, local01
0b668     BC 37 B1 FD | 	call	#__system___string_concat
0b66c     01 00 00 FF 
0b670     B8 4E 05 F1 | 	add	fp, ##696
0b674     A7 FA 61 FC | 	wrlong	result1, fp
0b678     AC 4E 85 F1 | 	sub	fp, #172
0b67c     A7 22 02 FB | 	rdlong	local03, fp
0b680     01 22 06 F1 | 	add	local03, #1
0b684     A7 22 62 FC | 	wrlong	local03, fp
0b688     01 00 00 FF 
0b68c     0C 4E 85 F1 | 	sub	fp, ##524
0b690     80 FF 9F FD | 	jmp	#LR__0975
0b694                 | LR__0976
0b694                 | '  '   put #9,i,header(3),1 : i+=4
0b694                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0b694                 | '      print #9, saveline$
0b694     09 12 06 F6 | 	mov	arg01, #9
0b698     C8 90 B1 FD | 	call	#__system___getiolock_0485
0b69c     FD 12 02 F6 | 	mov	arg01, result1
0b6a0     28 37 B1 FD | 	call	#__system___lockmem
0b6a4     01 00 00 FF 
0b6a8     B8 4E 05 F1 | 	add	fp, ##696
0b6ac     A7 14 02 FB | 	rdlong	arg02, fp
0b6b0     01 00 00 FF 
0b6b4     B8 4E 85 F1 | 	sub	fp, ##696
0b6b8     09 12 06 F6 | 	mov	arg01, #9
0b6bc     00 16 06 F6 | 	mov	arg03, #0
0b6c0     FC 43 B1 FD | 	call	#__system___basic_print_string
0b6c4     09 12 06 F6 | 	mov	arg01, #9
0b6c8     0A 14 06 F6 | 	mov	arg02, #10
0b6cc     00 16 06 F6 | 	mov	arg03, #0
0b6d0     94 43 B1 FD | 	call	#__system___basic_print_char
0b6d4     09 12 06 F6 | 	mov	arg01, #9
0b6d8     88 90 B1 FD | 	call	#__system___getiolock_0485
0b6dc     FD 00 68 FC | 	wrlong	#0, result1
0b6e0     01 00 00 FF 
0b6e4     34 4E 05 F1 | 	add	fp, ##564
0b6e8     A7 22 02 FB | 	rdlong	local03, fp
0b6ec     18 4E 85 F1 | 	sub	fp, #24
0b6f0     A7 22 62 FC | 	wrlong	local03, fp
0b6f4     18 4E 05 F1 | 	add	fp, #24
0b6f8     A7 22 02 FB | 	rdlong	local03, fp
0b6fc     01 00 00 FF 
0b700     34 4E 85 F1 | 	sub	fp, ##564
0b704     FF FF 3F FF 
0b708     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b70c     78 FE 9F 5D |  if_ne	jmp	#LR__0974
0b710                 | '   close #9  
0b710     09 12 06 F6 | 	mov	arg01, #9
0b714     7C 86 B1 FD | 	call	#__system__close
0b718                 | '   print "Saved as ";currentdir$+"/"+loadname
0b718     00 12 06 F6 | 	mov	arg01, #0
0b71c     44 90 B1 FD | 	call	#__system___getiolock_0485
0b720     FD 12 02 F6 | 	mov	arg01, result1
0b724     A4 36 B1 FD | 	call	#__system___lockmem
0b728     74 01 00 FF 
0b72c     87 15 06 F6 | 	mov	arg02, ##@LR__5131
0b730     00 12 06 F6 | 	mov	arg01, #0
0b734     00 16 06 F6 | 	mov	arg03, #0
0b738     84 43 B1 FD | 	call	#__system___basic_print_string
0b73c     00 20 06 F6 | 	mov	local02, #0
0b740     52 00 00 FF 
0b744     C8 E4 05 F1 | 	add	objptr, ##42184
0b748     F2 12 02 FB | 	rdlong	arg01, objptr
0b74c     52 00 00 FF 
0b750     C8 E4 85 F1 | 	sub	objptr, ##42184
0b754     74 01 00 FF 
0b758     91 15 06 F6 | 	mov	arg02, ##@LR__5132
0b75c     C8 36 B1 FD | 	call	#__system___string_concat
0b760     FD 12 02 F6 | 	mov	arg01, result1
0b764     59 00 00 FF 
0b768     E4 E5 05 F1 | 	add	objptr, ##46052
0b76c     F2 14 02 FB | 	rdlong	arg02, objptr
0b770     59 00 00 FF 
0b774     E4 E5 85 F1 | 	sub	objptr, ##46052
0b778     AC 36 B1 FD | 	call	#__system___string_concat
0b77c     FD 14 02 F6 | 	mov	arg02, result1
0b780     10 13 02 F6 | 	mov	arg01, local02
0b784     00 16 06 F6 | 	mov	arg03, #0
0b788     34 43 B1 FD | 	call	#__system___basic_print_string
0b78c     00 12 06 F6 | 	mov	arg01, #0
0b790     0A 14 06 F6 | 	mov	arg02, #10
0b794     00 16 06 F6 | 	mov	arg03, #0
0b798     CC 42 B1 FD | 	call	#__system___basic_print_char
0b79c     00 12 06 F6 | 	mov	arg01, #0
0b7a0     C0 8F B1 FD | 	call	#__system___getiolock_0485
0b7a4     FD 00 68 FC | 	wrlong	#0, result1
0b7a8                 | LR__0977
0b7a8                 | LR__0978
0b7a8     A7 F0 03 F6 | 	mov	ptra, fp
0b7ac     B2 00 A0 FD | 	call	#popregs_
0b7b0                 | _do_save_ret
0b7b0     2D 00 64 FD | 	ret
0b7b4                 | 
0b7b4                 | ' 
0b7b4                 | ' '----------------- Load the program
0b7b4                 | ' 'lo todo: errors while loading
0b7b4                 | ' sub do_load
0b7b4                 | _do_load
0b7b4     01 4A 05 F6 | 	mov	COUNT_, #1
0b7b8     A8 00 A0 FD | 	call	#pushregs_
0b7bc     A8 F0 07 F1 | 	add	ptra, #168
0b7c0     4A 00 00 FF 
0b7c4     B0 E4 05 F1 | 	add	objptr, ##38064
0b7c8     F2 14 02 FB | 	rdlong	arg02, objptr
0b7cc     0A 13 02 F6 | 	mov	arg01, arg02
0b7d0     01 12 66 F0 | 	shl	arg01, #1
0b7d4     0A 13 02 F1 | 	add	arg01, arg02
0b7d8     02 12 66 F0 | 	shl	arg01, #2
0b7dc     03 00 00 FF 
0b7e0     04 E4 85 F1 | 	sub	objptr, ##1540
0b7e4     F2 12 02 F1 | 	add	arg01, objptr
0b7e8     09 15 02 FB | 	rdlong	arg02, arg01
0b7ec     18 4E 05 F1 | 	add	fp, #24
0b7f0     A7 14 62 FC | 	wrlong	arg02, fp
0b7f4     8C 4E 05 F1 | 	add	fp, #140
0b7f8     A7 12 02 F6 | 	mov	arg01, fp
0b7fc     47 00 00 FF 
0b800     AC E4 85 F1 | 	sub	objptr, ##36524
0b804     80 4E 85 F1 | 	sub	fp, #128
0b808     09 4F 61 FC | 	wrlong	fp, arg01
0b80c                 | ' numpar=compiledline(lineptr_e).result.uresult
0b80c                 | ' lpoke varptr(line2$),varptr(line2)
0b80c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b80c     0C 4E 85 F1 | 	sub	fp, #12
0b810     A7 1E 02 FB | 	rdlong	local01, fp
0b814     18 4E 85 F1 | 	sub	fp, #24
0b818     01 1E 56 F2 | 	cmps	local01, #1 wc
0b81c     20 00 90 CD |  if_b	jmp	#LR__0980
0b820     74 F0 BF FD | 	call	#_pop
0b824     A7 FA 61 FC | 	wrlong	result1, fp
0b828     04 4E 05 F1 | 	add	fp, #4
0b82c     A7 FC 61 FC | 	wrlong	result2, fp
0b830     04 4E 05 F1 | 	add	fp, #4
0b834     A7 FE 61 FC | 	wrlong	result3, fp
0b838     08 4E 85 F1 | 	sub	fp, #8
0b83c     24 00 90 FD | 	jmp	#LR__0981
0b840                 | LR__0980
0b840     59 00 00 FF 
0b844     E4 E5 05 F1 | 	add	objptr, ##46052
0b848     F2 1E 02 FB | 	rdlong	local01, objptr
0b84c     59 00 00 FF 
0b850     E4 E5 85 F1 | 	sub	objptr, ##46052
0b854     A7 1E 62 FC | 	wrlong	local01, fp
0b858     08 4E 05 F1 | 	add	fp, #8
0b85c     A7 3E 68 FC | 	wrlong	#31, fp
0b860     08 4E 85 F1 | 	sub	fp, #8
0b864                 | LR__0981
0b864                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b864                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b864     08 4E 05 F1 | 	add	fp, #8
0b868     A7 1E 02 FB | 	rdlong	local01, fp
0b86c     08 4E 85 F1 | 	sub	fp, #8
0b870     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b874     18 00 90 5D |  if_ne	jmp	#LR__0982
0b878     A7 12 02 FB | 	rdlong	arg01, fp
0b87c     90 34 B0 FD | 	call	#_convertstring
0b880     A7 FA 61 FC | 	wrlong	result1, fp
0b884     08 4E 05 F1 | 	add	fp, #8
0b888     A7 3E 68 FC | 	wrlong	#31, fp
0b88c     08 4E 85 F1 | 	sub	fp, #8
0b890                 | LR__0982
0b890                 | ' if t1.result_type=result_string then
0b890     08 4E 05 F1 | 	add	fp, #8
0b894     A7 1E 02 FB | 	rdlong	local01, fp
0b898     08 4E 85 F1 | 	sub	fp, #8
0b89c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b8a0     20 04 90 5D |  if_ne	jmp	#LR__0990
0b8a4     20 2D B0 FD | 	call	#_do_new
0b8a8                 | '   do_new
0b8a8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b8a8     A7 12 02 FB | 	rdlong	arg01, fp
0b8ac     74 01 00 FF 
0b8b0     93 15 06 F6 | 	mov	arg02, ##@LR__5133
0b8b4     3C 35 B1 FD | 	call	#__system___string_cmp
0b8b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0b8bc     59 00 00 AF 
0b8c0     E4 E5 05 A1 |  if_e	add	objptr, ##46052
0b8c4     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b8c8     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b8cc     59 00 00 AF 
0b8d0     E4 E5 85 A1 |  if_e	sub	objptr, ##46052
0b8d4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b8d8     59 00 00 5F 
0b8dc     E4 E5 05 51 |  if_ne	add	objptr, ##46052
0b8e0     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b8e4     59 00 00 5F 
0b8e8     E4 E5 85 51 |  if_ne	sub	objptr, ##46052
0b8ec                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b8ec     09 12 06 F6 | 	mov	arg01, #9
0b8f0     A0 84 B1 FD | 	call	#__system__close
0b8f4     09 1E 06 F6 | 	mov	local01, #9
0b8f8     52 00 00 FF 
0b8fc     C8 E4 05 F1 | 	add	objptr, ##42184
0b900     F2 12 02 FB | 	rdlong	arg01, objptr
0b904     52 00 00 FF 
0b908     C8 E4 85 F1 | 	sub	objptr, ##42184
0b90c     74 01 00 FF 
0b910     94 15 06 F6 | 	mov	arg02, ##@LR__5134
0b914     10 35 B1 FD | 	call	#__system___string_concat
0b918     FD 12 02 F6 | 	mov	arg01, result1
0b91c     A7 14 02 FB | 	rdlong	arg02, fp
0b920     04 35 B1 FD | 	call	#__system___string_concat
0b924     FD 14 02 F6 | 	mov	arg02, result1
0b928     0F 13 02 F6 | 	mov	arg01, local01
0b92c     00 16 06 F6 | 	mov	arg03, #0
0b930     9C 40 B1 FD | 	call	#__system___basic_open_string
0b934     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b938     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b93c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b940     10 4E 05 F1 | 	add	fp, #16
0b944     A7 FA 61 FC | 	wrlong	result1, fp
0b948                 | '   r=geterr() 
0b948                 | '   if r then 
0b948     10 4E 85 F1 | 	sub	fp, #16
0b94c     48 01 90 AD |  if_e	jmp	#LR__0984
0b950                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b950     09 12 06 F6 | 	mov	arg01, #9
0b954     3C 84 B1 FD | 	call	#__system__close
0b958     09 1E 06 F6 | 	mov	local01, #9
0b95c     52 00 00 FF 
0b960     C8 E4 05 F1 | 	add	objptr, ##42184
0b964     F2 12 02 FB | 	rdlong	arg01, objptr
0b968     52 00 00 FF 
0b96c     C8 E4 85 F1 | 	sub	objptr, ##42184
0b970     74 01 00 FF 
0b974     96 15 06 F6 | 	mov	arg02, ##@LR__5135
0b978     AC 34 B1 FD | 	call	#__system___string_concat
0b97c     FD 12 02 F6 | 	mov	arg01, result1
0b980     A7 14 02 FB | 	rdlong	arg02, fp
0b984     A0 34 B1 FD | 	call	#__system___string_concat
0b988     FD 12 02 F6 | 	mov	arg01, result1
0b98c     74 01 00 FF 
0b990     98 15 06 F6 | 	mov	arg02, ##@LR__5136
0b994     90 34 B1 FD | 	call	#__system___string_concat
0b998     FD 14 02 F6 | 	mov	arg02, result1
0b99c     0F 13 02 F6 | 	mov	arg01, local01
0b9a0     00 16 06 F6 | 	mov	arg03, #0
0b9a4     28 40 B1 FD | 	call	#__system___basic_open_string
0b9a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b9ac     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b9b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b9b4     10 4E 05 F1 | 	add	fp, #16
0b9b8     A7 FA 61 FC | 	wrlong	result1, fp
0b9bc                 | '     r=geterr() 
0b9bc                 | '     if r then 
0b9bc     10 4E 85 F1 | 	sub	fp, #16
0b9c0     A0 00 90 AD |  if_e	jmp	#LR__0983
0b9c4                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b9c4     00 12 06 F6 | 	mov	arg01, #0
0b9c8     98 8D B1 FD | 	call	#__system___getiolock_0485
0b9cc     FD 12 02 F6 | 	mov	arg01, result1
0b9d0     F8 33 B1 FD | 	call	#__system___lockmem
0b9d4     74 01 00 FF 
0b9d8     9D 15 06 F6 | 	mov	arg02, ##@LR__5137
0b9dc     00 12 06 F6 | 	mov	arg01, #0
0b9e0     00 16 06 F6 | 	mov	arg03, #0
0b9e4     D8 40 B1 FD | 	call	#__system___basic_print_string
0b9e8     10 4E 05 F1 | 	add	fp, #16
0b9ec     A7 14 02 FB | 	rdlong	arg02, fp
0b9f0     10 4E 85 F1 | 	sub	fp, #16
0b9f4     00 12 06 F6 | 	mov	arg01, #0
0b9f8     00 16 06 F6 | 	mov	arg03, #0
0b9fc     0A 18 06 F6 | 	mov	arg04, #10
0ba00     00 41 B1 FD | 	call	#__system___basic_print_integer
0ba04     74 01 00 FF 
0ba08     AB 15 06 F6 | 	mov	arg02, ##@LR__5138
0ba0c     00 12 06 F6 | 	mov	arg01, #0
0ba10     00 16 06 F6 | 	mov	arg03, #0
0ba14     A8 40 B1 FD | 	call	#__system___basic_print_string
0ba18     00 1E 06 F6 | 	mov	local01, #0
0ba1c     10 4E 05 F1 | 	add	fp, #16
0ba20     A7 12 02 FB | 	rdlong	arg01, fp
0ba24     10 4E 85 F1 | 	sub	fp, #16
0ba28     FC 59 B1 FD | 	call	#__system___strerror
0ba2c     FD 14 02 F6 | 	mov	arg02, result1
0ba30     0F 13 02 F6 | 	mov	arg01, local01
0ba34     00 16 06 F6 | 	mov	arg03, #0
0ba38     84 40 B1 FD | 	call	#__system___basic_print_string
0ba3c     00 12 06 F6 | 	mov	arg01, #0
0ba40     0A 14 06 F6 | 	mov	arg02, #10
0ba44     00 16 06 F6 | 	mov	arg03, #0
0ba48     1C 40 B1 FD | 	call	#__system___basic_print_char
0ba4c     00 12 06 F6 | 	mov	arg01, #0
0ba50     10 8D B1 FD | 	call	#__system___getiolock_0485
0ba54     FD 00 68 FC | 	wrlong	#0, result1
0ba58     09 12 06 F6 | 	mov	arg01, #9
0ba5c     34 83 B1 FD | 	call	#__system__close
0ba60     F8 02 90 FD | 	jmp	#LR__0992
0ba64                 | LR__0983
0ba64     59 00 00 FF 
0ba68     E4 E5 05 F1 | 	add	objptr, ##46052
0ba6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba70     59 00 00 FF 
0ba74     E4 E5 85 F1 | 	sub	objptr, ##46052
0ba78     74 01 00 FF 
0ba7c     AE 15 06 F6 | 	mov	arg02, ##@LR__5139
0ba80     A4 33 B1 FD | 	call	#__system___string_concat
0ba84     59 00 00 FF 
0ba88     E4 E5 05 F1 | 	add	objptr, ##46052
0ba8c     F2 FA 61 FC | 	wrlong	result1, objptr
0ba90     59 00 00 FF 
0ba94     E4 E5 85 F1 | 	sub	objptr, ##46052
0ba98                 | LR__0984
0ba98     0C 4E 05 F1 | 	add	fp, #12
0ba9c     A7 0A 68 FC | 	wrlong	#5, fp
0baa0                 | '   i=5
0baa0                 | '   get #9,1,header,1   
0baa0     10 4E 05 F1 | 	add	fp, #16
0baa4     A7 16 02 F6 | 	mov	arg03, fp
0baa8     1C 4E 85 F1 | 	sub	fp, #28
0baac     09 12 06 F6 | 	mov	arg01, #9
0bab0     01 14 06 F6 | 	mov	arg02, #1
0bab4     01 18 06 F6 | 	mov	arg04, #1
0bab8     04 1A 06 F6 | 	mov	arg05, #4
0babc     10 41 B1 FD | 	call	#__system___basic_get
0bac0                 | '   
0bac0                 | '   if header<>$0D616272 then 
0bac0     1C 4E 05 F1 | 	add	fp, #28
0bac4     A7 1E 02 FB | 	rdlong	local01, fp
0bac8     1C 4E 85 F1 | 	sub	fp, #28
0bacc     B1 B0 06 FF 
0bad0     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0bad4     00 01 90 AD |  if_e	jmp	#LR__0987
0bad8                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0bad8     09 12 06 F6 | 	mov	arg01, #9
0badc     B4 82 B1 FD | 	call	#__system__close
0bae0     09 1E 06 F6 | 	mov	local01, #9
0bae4     52 00 00 FF 
0bae8     C8 E4 05 F1 | 	add	objptr, ##42184
0baec     F2 12 02 FB | 	rdlong	arg01, objptr
0baf0     52 00 00 FF 
0baf4     C8 E4 85 F1 | 	sub	objptr, ##42184
0baf8     74 01 00 FF 
0bafc     B3 15 06 F6 | 	mov	arg02, ##@LR__5140
0bb00     24 33 B1 FD | 	call	#__system___string_concat
0bb04     FD 12 02 F6 | 	mov	arg01, result1
0bb08     59 00 00 FF 
0bb0c     E4 E5 05 F1 | 	add	objptr, ##46052
0bb10     F2 14 02 FB | 	rdlong	arg02, objptr
0bb14     59 00 00 FF 
0bb18     E4 E5 85 F1 | 	sub	objptr, ##46052
0bb1c     08 33 B1 FD | 	call	#__system___string_concat
0bb20     FD 14 02 F6 | 	mov	arg02, result1
0bb24     0F 13 02 F6 | 	mov	arg01, local01
0bb28     00 16 06 F6 | 	mov	arg03, #0
0bb2c     A0 3E B1 FD | 	call	#__system___basic_open_string
0bb30                 | '     do
0bb30                 | LR__0985
0bb30     09 12 06 F6 | 	mov	arg01, #9
0bb34     A0 34 B1 FD | 	call	#__system___basic_read_line
0bb38     37 00 00 FF 
0bb3c     4C E4 05 F1 | 	add	objptr, ##28236
0bb40     F2 FA 61 FC | 	wrlong	result1, objptr
0bb44                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0bb44     37 00 00 FF 
0bb48     4C E4 85 F1 | 	sub	objptr, ##28236
0bb4c     FD 12 02 F6 | 	mov	arg01, result1
0bb50     01 14 06 F6 | 	mov	arg02, #1
0bb54     84 52 B1 FD | 	call	#__system__Left_S
0bb58     FD 12 02 F6 | 	mov	arg01, result1
0bb5c     74 01 00 FF 
0bb60     B5 15 06 F6 | 	mov	arg02, ##@LR__5141
0bb64     8C 32 B1 FD | 	call	#__system___string_cmp
0bb68     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb6c     34 00 90 CD |  if_b	jmp	#LR__0986
0bb70     37 00 00 FF 
0bb74     4C E4 05 F1 | 	add	objptr, ##28236
0bb78     F2 12 02 FB | 	rdlong	arg01, objptr
0bb7c     37 00 00 FF 
0bb80     4C E4 85 F1 | 	sub	objptr, ##28236
0bb84     01 14 06 F6 | 	mov	arg02, #1
0bb88     50 52 B1 FD | 	call	#__system__Left_S
0bb8c     FD 12 02 F6 | 	mov	arg01, result1
0bb90     74 01 00 FF 
0bb94     B7 15 06 F6 | 	mov	arg02, ##@LR__5142
0bb98     58 32 B1 FD | 	call	#__system___string_cmp
0bb9c     01 FA 55 F2 | 	cmps	result1, #1 wc
0bba0     78 4E BF CD |  if_b	call	#_interpret
0bba4                 | LR__0986
0bba4     37 00 00 FF 
0bba8     4C E4 05 F1 | 	add	objptr, ##28236
0bbac     F2 12 02 FB | 	rdlong	arg01, objptr
0bbb0     37 00 00 FF 
0bbb4     4C E4 85 F1 | 	sub	objptr, ##28236
0bbb8     74 01 00 FF 
0bbbc     B9 15 06 F6 | 	mov	arg02, ##@LR__5143
0bbc0     30 32 B1 FD | 	call	#__system___string_cmp
0bbc4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bbc8     64 FF 9F 5D |  if_ne	jmp	#LR__0985
0bbcc                 | '     close #9
0bbcc     09 12 06 F6 | 	mov	arg01, #9
0bbd0     C0 81 B1 FD | 	call	#__system__close
0bbd4     F4 00 90 FD | 	jmp	#LR__0991
0bbd8                 | LR__0987
0bbd8                 | '   'printerror(26) : close #9 : return
0bbd8                 | '     do
0bbd8                 | LR__0988
0bbd8                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0bbd8     0C 4E 05 F1 | 	add	fp, #12
0bbdc     A7 14 02 FB | 	rdlong	arg02, fp
0bbe0     14 4E 05 F1 | 	add	fp, #20
0bbe4     A7 16 02 F6 | 	mov	arg03, fp
0bbe8     20 4E 85 F1 | 	sub	fp, #32
0bbec     09 12 06 F6 | 	mov	arg01, #9
0bbf0     01 18 06 F6 | 	mov	arg04, #1
0bbf4     04 1A 06 F6 | 	mov	arg05, #4
0bbf8     D4 3F B1 FD | 	call	#__system___basic_get
0bbfc     14 4E 05 F1 | 	add	fp, #20
0bc00     A7 FA 61 FC | 	wrlong	result1, fp
0bc04     08 4E 85 F1 | 	sub	fp, #8
0bc08     A7 1E 02 FB | 	rdlong	local01, fp
0bc0c     04 1E 06 F1 | 	add	local01, #4
0bc10     A7 1E 62 FC | 	wrlong	local01, fp
0bc14     14 4E 05 F1 | 	add	fp, #20
0bc18     A7 1E 02 FB | 	rdlong	local01, fp
0bc1c     04 4E 05 F1 | 	add	fp, #4
0bc20     A7 1E 02 F1 | 	add	local01, fp
0bc24     0F 01 48 FC | 	wrbyte	#0, local01
0bc28                 | '       if amount=1 then  
0bc28     10 4E 85 F1 | 	sub	fp, #16
0bc2c     A7 1E 02 FB | 	rdlong	local01, fp
0bc30     14 4E 85 F1 | 	sub	fp, #20
0bc34     01 1E 0E F2 | 	cmp	local01, #1 wz
0bc38     68 00 90 5D |  if_ne	jmp	#LR__0989
0bc3c                 | '         get #9,i,line2(0),linelength : i+=linelength
0bc3c     0C 4E 05 F1 | 	add	fp, #12
0bc40     A7 14 02 FB | 	rdlong	arg02, fp
0bc44     18 4E 05 F1 | 	add	fp, #24
0bc48     A7 16 02 F6 | 	mov	arg03, fp
0bc4c     04 4E 85 F1 | 	sub	fp, #4
0bc50     A7 18 02 FB | 	rdlong	arg04, fp
0bc54     20 4E 85 F1 | 	sub	fp, #32
0bc58     09 12 06 F6 | 	mov	arg01, #9
0bc5c     01 1A 06 F6 | 	mov	arg05, #1
0bc60     6C 3F B1 FD | 	call	#__system___basic_get
0bc64     0C 4E 05 F1 | 	add	fp, #12
0bc68     A7 1E 02 FB | 	rdlong	local01, fp
0bc6c     14 4E 05 F1 | 	add	fp, #20
0bc70     A7 1A 02 FB | 	rdlong	arg05, fp
0bc74     0D 1F 02 F1 | 	add	local01, arg05
0bc78     14 4E 85 F1 | 	sub	fp, #20
0bc7c     A7 1E 62 FC | 	wrlong	local01, fp
0bc80     98 4E 05 F1 | 	add	fp, #152
0bc84     A7 1E 02 FB | 	rdlong	local01, fp
0bc88     A4 4E 85 F1 | 	sub	fp, #164
0bc8c     37 00 00 FF 
0bc90     4C E4 05 F1 | 	add	objptr, ##28236
0bc94     F2 1E 62 FC | 	wrlong	local01, objptr
0bc98     37 00 00 FF 
0bc9c     4C E4 85 F1 | 	sub	objptr, ##28236
0bca0     78 4D BF FD | 	call	#_interpret
0bca4                 | LR__0989
0bca4     14 4E 05 F1 | 	add	fp, #20
0bca8     A7 1E 02 FB | 	rdlong	local01, fp
0bcac     14 4E 85 F1 | 	sub	fp, #20
0bcb0     01 1E 56 F2 | 	cmps	local01, #1 wc
0bcb4     20 FF 9F 3D |  if_ae	jmp	#LR__0988
0bcb8                 | '     close #9 
0bcb8     09 12 06 F6 | 	mov	arg01, #9
0bcbc     D4 80 B1 FD | 	call	#__system__close
0bcc0     08 00 90 FD | 	jmp	#LR__0991
0bcc4                 | LR__0990
0bcc4     1E 12 06 F6 | 	mov	arg01, #30
0bcc8     58 EC B0 FD | 	call	#_printerror
0bccc                 | LR__0991
0bccc                 | '   print "Loaded ";currentdir$+"/"+loadname
0bccc     00 12 06 F6 | 	mov	arg01, #0
0bcd0     90 8A B1 FD | 	call	#__system___getiolock_0485
0bcd4     FD 12 02 F6 | 	mov	arg01, result1
0bcd8     F0 30 B1 FD | 	call	#__system___lockmem
0bcdc     74 01 00 FF 
0bce0     BA 15 06 F6 | 	mov	arg02, ##@LR__5144
0bce4     00 12 06 F6 | 	mov	arg01, #0
0bce8     00 16 06 F6 | 	mov	arg03, #0
0bcec     D0 3D B1 FD | 	call	#__system___basic_print_string
0bcf0     00 1E 06 F6 | 	mov	local01, #0
0bcf4     52 00 00 FF 
0bcf8     C8 E4 05 F1 | 	add	objptr, ##42184
0bcfc     F2 12 02 FB | 	rdlong	arg01, objptr
0bd00     52 00 00 FF 
0bd04     C8 E4 85 F1 | 	sub	objptr, ##42184
0bd08     74 01 00 FF 
0bd0c     C2 15 06 F6 | 	mov	arg02, ##@LR__5145
0bd10     14 31 B1 FD | 	call	#__system___string_concat
0bd14     FD 12 02 F6 | 	mov	arg01, result1
0bd18     59 00 00 FF 
0bd1c     E4 E5 05 F1 | 	add	objptr, ##46052
0bd20     F2 14 02 FB | 	rdlong	arg02, objptr
0bd24     59 00 00 FF 
0bd28     E4 E5 85 F1 | 	sub	objptr, ##46052
0bd2c     F8 30 B1 FD | 	call	#__system___string_concat
0bd30     FD 14 02 F6 | 	mov	arg02, result1
0bd34     0F 13 02 F6 | 	mov	arg01, local01
0bd38     00 16 06 F6 | 	mov	arg03, #0
0bd3c     80 3D B1 FD | 	call	#__system___basic_print_string
0bd40     00 12 06 F6 | 	mov	arg01, #0
0bd44     0A 14 06 F6 | 	mov	arg02, #10
0bd48     00 16 06 F6 | 	mov	arg03, #0
0bd4c     18 3D B1 FD | 	call	#__system___basic_print_char
0bd50     00 12 06 F6 | 	mov	arg01, #0
0bd54     0C 8A B1 FD | 	call	#__system___getiolock_0485
0bd58     FD 00 68 FC | 	wrlong	#0, result1
0bd5c                 | LR__0992
0bd5c     A7 F0 03 F6 | 	mov	ptra, fp
0bd60     B2 00 A0 FD | 	call	#popregs_
0bd64                 | _do_load_ret
0bd64     2D 00 64 FD | 	ret
0bd68                 | 
0bd68                 | ' 
0bd68                 | ' sub do_end
0bd68                 | _do_end
0bd68     4A 00 00 FF 
0bd6c     AC E4 05 F1 | 	add	objptr, ##38060
0bd70     F2 00 02 FB | 	rdlong	_var01, objptr
0bd74     01 00 86 F1 | 	sub	_var01, #1
0bd78     04 E4 05 F1 | 	add	objptr, #4
0bd7c     F2 00 62 FC | 	wrlong	_var01, objptr
0bd80     0E 00 00 FF 
0bd84     3C E4 05 F1 | 	add	objptr, ##7228
0bd88     FF FF BF FF 
0bd8c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0bd90     58 00 00 FF 
0bd94     EC E4 85 F1 | 	sub	objptr, ##45292
0bd98                 | _do_end_ret
0bd98     2D 00 64 FD | 	ret
0bd9c                 | 
0bd9c                 | ' 
0bd9c                 | ' '----------------- Run the program 
0bd9c                 | ' 
0bd9c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0bd9c                 | ' 
0bd9c                 | ' sub do_run
0bd9c                 | _do_run
0bd9c     01 4A 05 F6 | 	mov	COUNT_, #1
0bda0     A8 00 A0 FD | 	call	#pushregs_
0bda4     4A 00 00 FF 
0bda8     B0 E4 05 F1 | 	add	objptr, ##38064
0bdac     F2 18 02 FB | 	rdlong	arg04, objptr
0bdb0     0C 17 02 F6 | 	mov	arg03, arg04
0bdb4     01 16 66 F0 | 	shl	arg03, #1
0bdb8     0C 17 02 F1 | 	add	arg03, arg04
0bdbc     02 16 66 F0 | 	shl	arg03, #2
0bdc0     03 00 00 FF 
0bdc4     04 E4 85 F1 | 	sub	objptr, ##1540
0bdc8     F2 16 02 F1 | 	add	arg03, objptr
0bdcc     0B 15 02 FB | 	rdlong	arg02, arg03
0bdd0                 | ' numpar=compiledline(lineptr_e).result.uresult
0bdd0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0bdd0     01 14 0E F2 | 	cmp	arg02, #1 wz
0bdd4     47 00 00 FF 
0bdd8     AC E4 85 F1 | 	sub	objptr, ##36524
0bddc     D4 F9 BF AD |  if_e	call	#_do_load
0bde0     4A 00 00 FF 
0bde4     B4 E4 05 F1 | 	add	objptr, ##38068
0bde8     F2 18 02 FB | 	rdlong	arg04, objptr
0bdec     0E 00 00 FF 
0bdf0     38 E4 05 F1 | 	add	objptr, ##7224
0bdf4     F2 18 62 FC | 	wrlong	arg04, objptr
0bdf8     04 E4 05 F1 | 	add	objptr, #4
0bdfc     F2 00 68 FC | 	wrlong	#0, objptr
0be00     04 E4 05 F1 | 	add	objptr, #4
0be04     FF FF FF FF 
0be08     F2 FE 6B FC | 	wrlong	##-1, objptr
0be0c                 | ' if inrun>0 then 
0be0c     04 E4 05 F1 | 	add	objptr, #4
0be10     F2 18 02 FB | 	rdlong	arg04, objptr
0be14     58 00 00 FF 
0be18     F8 E4 85 F1 | 	sub	objptr, ##45304
0be1c     01 18 16 F2 | 	cmp	arg04, #1 wc
0be20     30 00 90 CD |  if_b	jmp	#LR__1000
0be24     58 00 00 FF 
0be28     FC E4 05 F1 | 	add	objptr, ##45308
0be2c     F2 12 02 F6 | 	mov	arg01, objptr
0be30     10 E4 85 F1 | 	sub	objptr, #16
0be34     F2 14 02 FB | 	rdlong	arg02, objptr
0be38     18 16 06 F6 | 	mov	arg03, #24
0be3c     4D 00 00 FF 
0be40     20 E4 85 F1 | 	sub	objptr, ##39456
0be44     44 23 B1 FD | 	call	#_psram_spin2_read1
0be48     0B 00 00 FF 
0be4c     CC E4 85 F1 | 	sub	objptr, ##5836
0be50                 | '   psram.read1(varptr(runheader),runptr,24)  
0be50                 | '   return
0be50     88 02 90 FD | 	jmp	#LR__1006
0be54                 | LR__1000
0be54     58 00 00 FF 
0be58     F8 E4 05 F1 | 	add	objptr, ##45304
0be5c     F2 02 68 FC | 	wrlong	#1, objptr
0be60     04 E4 05 F1 | 	add	objptr, #4
0be64     F2 12 02 F6 | 	mov	arg01, objptr
0be68     10 E4 85 F1 | 	sub	objptr, #16
0be6c     F2 14 02 FB | 	rdlong	arg02, objptr
0be70     18 16 06 F6 | 	mov	arg03, #24
0be74     4D 00 00 FF 
0be78     20 E4 85 F1 | 	sub	objptr, ##39456
0be7c     0C 23 B1 FD | 	call	#_psram_spin2_read1
0be80                 | ' inrun=1
0be80                 | ' psram.read1(varptr(runheader),runptr,24) 
0be80                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0be80     4D 00 00 FF 
0be84     30 E4 05 F1 | 	add	objptr, ##39472
0be88     F2 1E 02 FB | 	rdlong	local01, objptr
0be8c     58 00 00 FF 
0be90     FC E4 85 F1 | 	sub	objptr, ##45308
0be94     FF FF 7F FF 
0be98     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0be9c     58 00 00 AF 
0bea0     F8 E4 05 A1 |  if_e	add	objptr, ##45304
0bea4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0bea8     58 00 00 AF 
0beac     F8 E4 85 A1 |  if_e	sub	objptr, ##45304
0beb0     28 02 90 AD |  if_e	jmp	#LR__1006
0beb4                 | ' do 
0beb4                 | LR__1001
0beb4                 | '   if runptr<>oldrunptr then
0beb4     58 00 00 FF 
0beb8     EC E4 05 F1 | 	add	objptr, ##45292
0bebc     F2 1E 02 FB | 	rdlong	local01, objptr
0bec0     08 E4 05 F1 | 	add	objptr, #8
0bec4     F2 18 02 FB | 	rdlong	arg04, objptr
0bec8     58 00 00 FF 
0becc     F4 E4 85 F1 | 	sub	objptr, ##45300
0bed0     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0bed4     CC 00 90 AD |  if_e	jmp	#LR__1002
0bed8     58 00 00 FF 
0bedc     FC E4 05 F1 | 	add	objptr, ##45308
0bee0     F2 12 02 F6 | 	mov	arg01, objptr
0bee4     10 E4 85 F1 | 	sub	objptr, #16
0bee8     F2 14 02 FB | 	rdlong	arg02, objptr
0beec     18 16 06 F6 | 	mov	arg03, #24
0bef0     4D 00 00 FF 
0bef4     20 E4 85 F1 | 	sub	objptr, ##39456
0bef8     90 22 B1 FD | 	call	#_psram_spin2_read1
0befc     3B 00 00 FF 
0bf00     E0 E5 05 F1 | 	add	objptr, ##30688
0bf04     F2 12 02 F6 | 	mov	arg01, objptr
0bf08     11 00 00 FF 
0bf0c     40 E4 05 F1 | 	add	objptr, ##8768
0bf10     F2 14 02 FB | 	rdlong	arg02, objptr
0bf14     13 00 00 FF 
0bf18     58 E4 85 F1 | 	sub	objptr, ##9816
0bf1c     F2 1E 02 FB | 	rdlong	local01, objptr
0bf20     01 1E 66 F0 | 	shl	local01, #1
0bf24     0F 15 02 F1 | 	add	arg02, local01
0bf28     13 00 00 FF 
0bf2c     70 E4 05 F1 | 	add	objptr, ##9840
0bf30     F2 16 02 FB | 	rdlong	arg03, objptr
0bf34     18 E4 85 F1 | 	sub	objptr, #24
0bf38     F2 1E 02 FB | 	rdlong	local01, objptr
0bf3c     0F 17 82 F1 | 	sub	arg03, local01
0bf40     4D 00 00 FF 
0bf44     20 E4 85 F1 | 	sub	objptr, ##39456
0bf48     40 22 B1 FD | 	call	#_psram_spin2_read1
0bf4c     4D 00 00 FF 
0bf50     38 E4 05 F1 | 	add	objptr, ##39480
0bf54     F2 1E 02 FB | 	rdlong	local01, objptr
0bf58     18 E4 85 F1 | 	sub	objptr, #24
0bf5c     F2 FA 01 FB | 	rdlong	result1, objptr
0bf60     FD 1E 82 F1 | 	sub	local01, result1
0bf64     13 00 00 FF 
0bf68     58 E4 85 F1 | 	sub	objptr, ##9816
0bf6c     F2 FA 01 FB | 	rdlong	result1, objptr
0bf70     FD 1E 12 FD | 	qdiv	local01, result1
0bf74     05 00 00 FF 
0bf78     18 E4 05 F1 | 	add	objptr, ##2584
0bf7c     18 1E 62 FD | 	getqx	local01
0bf80     03 1E 86 F1 | 	sub	local01, #3
0bf84     F2 1E 62 FC | 	wrlong	local01, objptr
0bf88     0E 00 00 FF 
0bf8c     40 E4 05 F1 | 	add	objptr, ##7232
0bf90     F2 1E 02 FB | 	rdlong	local01, objptr
0bf94     08 E4 05 F1 | 	add	objptr, #8
0bf98     F2 1E 62 FC | 	wrlong	local01, objptr
0bf9c     58 00 00 FF 
0bfa0     F4 E4 85 F1 | 	sub	objptr, ##45300
0bfa4                 | LR__1002
0bfa4     58 00 00 FF 
0bfa8     10 E5 05 F1 | 	add	objptr, ##45328
0bfac     F2 1E 02 FB | 	rdlong	local01, objptr
0bfb0     24 E4 85 F1 | 	sub	objptr, #36
0bfb4     F2 1E 62 FC | 	wrlong	local01, objptr
0bfb8     04 E4 05 F1 | 	add	objptr, #4
0bfbc     F2 12 02 FB | 	rdlong	arg01, objptr
0bfc0     58 00 00 FF 
0bfc4     F0 E4 85 F1 | 	sub	objptr, ##45296
0bfc8     C8 E7 BF FD | 	call	#_execute_line
0bfcc     58 00 00 FF 
0bfd0     F0 E4 05 F1 | 	add	objptr, ##45296
0bfd4     F2 FA 61 FC | 	wrlong	result1, objptr
0bfd8     04 E4 85 F1 | 	sub	objptr, #4
0bfdc     F2 1E 02 FB | 	rdlong	local01, objptr
0bfe0     58 00 00 FF 
0bfe4     EC E4 85 F1 | 	sub	objptr, ##45292
0bfe8     FF FF 3F FF 
0bfec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0bff0     30 00 90 AD |  if_e	jmp	#LR__1004
0bff4     E0 12 06 F6 | 	mov	arg01, #224
0bff8     20 25 B1 FD | 	call	#_usbnew_spin2_keystate
0bffc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c000     10 00 90 5D |  if_ne	jmp	#LR__1003
0c004     E4 12 06 F6 | 	mov	arg01, #228
0c008     10 25 B1 FD | 	call	#_usbnew_spin2_keystate
0c00c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c010     A0 FE 9F AD |  if_e	jmp	#LR__1001
0c014                 | LR__1003
0c014     06 12 06 F6 | 	mov	arg01, #6
0c018     00 25 B1 FD | 	call	#_usbnew_spin2_keystate
0c01c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c020     90 FE 9F AD |  if_e	jmp	#LR__1001
0c024                 | LR__1004
0c024                 | '   ''do whatever kbm.peek_latest_key()=$106 
0c024                 | ' if runptr<>$7FFF_FFFF then 
0c024     58 00 00 FF 
0c028     EC E4 05 F1 | 	add	objptr, ##45292
0c02c     F2 1E 02 FB | 	rdlong	local01, objptr
0c030     58 00 00 FF 
0c034     EC E4 85 F1 | 	sub	objptr, ##45292
0c038     FF FF 3F FF 
0c03c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c040     64 00 90 AD |  if_e	jmp	#LR__1005
0c044                 | '     print "Stopped at line ";runheader(0)
0c044     00 12 06 F6 | 	mov	arg01, #0
0c048     18 87 B1 FD | 	call	#__system___getiolock_0485
0c04c     FD 12 02 F6 | 	mov	arg01, result1
0c050     78 2D B1 FD | 	call	#__system___lockmem
0c054     74 01 00 FF 
0c058     C4 15 06 F6 | 	mov	arg02, ##@LR__5146
0c05c     00 12 06 F6 | 	mov	arg01, #0
0c060     00 16 06 F6 | 	mov	arg03, #0
0c064     58 3A B1 FD | 	call	#__system___basic_print_string
0c068     58 00 00 FF 
0c06c     FC E4 05 F1 | 	add	objptr, ##45308
0c070     F2 14 02 FB | 	rdlong	arg02, objptr
0c074     58 00 00 FF 
0c078     FC E4 85 F1 | 	sub	objptr, ##45308
0c07c     00 12 06 F6 | 	mov	arg01, #0
0c080     00 16 06 F6 | 	mov	arg03, #0
0c084     0A 18 06 F6 | 	mov	arg04, #10
0c088     B8 3A B1 FD | 	call	#__system___basic_print_unsigned
0c08c     00 12 06 F6 | 	mov	arg01, #0
0c090     0A 14 06 F6 | 	mov	arg02, #10
0c094     00 16 06 F6 | 	mov	arg03, #0
0c098     CC 39 B1 FD | 	call	#__system___basic_print_char
0c09c     00 12 06 F6 | 	mov	arg01, #0
0c0a0     C0 86 B1 FD | 	call	#__system___getiolock_0485
0c0a4     FD 00 68 FC | 	wrlong	#0, result1
0c0a8                 | LR__1005
0c0a8     58 00 00 FF 
0c0ac     F8 E4 05 F1 | 	add	objptr, ##45304
0c0b0     F2 00 68 FC | 	wrlong	#0, objptr
0c0b4     58 00 00 FF 
0c0b8     F8 E4 85 F1 | 	sub	objptr, ##45304
0c0bc     11 12 06 F6 | 	mov	arg01, #17
0c0c0     08 14 06 F6 | 	mov	arg02, #8
0c0c4     10 16 06 F6 | 	mov	arg03, #16
0c0c8     38 09 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c0cc     10 12 06 F6 | 	mov	arg01, #16
0c0d0     20 14 06 F6 | 	mov	arg02, #32
0c0d4     20 16 06 F6 | 	mov	arg03, #32
0c0d8     28 09 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c0dc                 | LR__1006
0c0dc     A7 F0 03 F6 | 	mov	ptra, fp
0c0e0     B2 00 A0 FD | 	call	#popregs_
0c0e4                 | _do_run_ret
0c0e4     2D 00 64 FD | 	ret
0c0e8                 | 
0c0e8                 | ' 
0c0e8                 | ' 
0c0e8                 | ' 
0c0e8                 | ' 
0c0e8                 | ' 
0c0e8                 | ' 
0c0e8                 | ' 
0c0e8                 | ' sub do_defenv
0c0e8                 | _do_defenv
0c0e8     08 4A 05 F6 | 	mov	COUNT_, #8
0c0ec     A8 00 A0 FD | 	call	#pushregs_
0c0f0     B4 F0 07 F1 | 	add	ptra, #180
0c0f4     4A 00 00 FF 
0c0f8     B0 E4 05 F1 | 	add	objptr, ##38064
0c0fc     F2 1E 02 FB | 	rdlong	local01, objptr
0c100     0F 1B 02 F6 | 	mov	arg05, local01
0c104     01 1A 66 F0 | 	shl	arg05, #1
0c108     0F 1B 02 F1 | 	add	arg05, local01
0c10c     02 1A 66 F0 | 	shl	arg05, #2
0c110     03 00 00 FF 
0c114     04 E4 85 F1 | 	sub	objptr, ##1540
0c118     F2 20 02 F6 | 	mov	local02, objptr
0c11c     F2 1A 02 F1 | 	add	arg05, objptr
0c120     0D 1B 02 FB | 	rdlong	arg05, arg05
0c124     10 4E 05 F1 | 	add	fp, #16
0c128     A7 1A 62 FC | 	wrlong	arg05, fp
0c12c                 | ' 
0c12c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c12c                 | ' 
0c12c                 | ' 
0c12c                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0c12c                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0c12c                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0c12c                 | ' 
0c12c                 | ' 
0c12c                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0c12c     10 4E 85 F1 | 	sub	fp, #16
0c130     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c134     47 00 00 FF 
0c138     AC E4 85 F1 | 	sub	objptr, ##36524
0c13c     10 4E 05 51 |  if_ne	add	fp, #16
0c140     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c144     10 4E 85 51 |  if_ne	sub	fp, #16
0c148     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c14c     10 4E 05 51 |  if_ne	add	fp, #16
0c150     0F 21 02 56 |  if_ne	mov	local02, local01
0c154     10 4E 85 51 |  if_ne	sub	fp, #16
0c158     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0c15c     10 0C 90 5D |  if_ne	jmp	#LR__1031
0c160                 | ' 
0c160                 | '  
0c160                 | ' if numpar=2 then
0c160     10 4E 05 F1 | 	add	fp, #16
0c164     A7 20 02 FB | 	rdlong	local02, fp
0c168     10 4E 85 F1 | 	sub	fp, #16
0c16c     02 20 0E F2 | 	cmp	local02, #2 wz
0c170     24 04 90 5D |  if_ne	jmp	#LR__1023
0c174     20 E7 BF FD | 	call	#_pop
0c178     FF 1A 02 F6 | 	mov	arg05, result3
0c17c     5C 4E 05 F1 | 	add	fp, #92
0c180     A7 FA 61 FC | 	wrlong	result1, fp
0c184     04 4E 05 F1 | 	add	fp, #4
0c188     A7 FC 61 FC | 	wrlong	result2, fp
0c18c     04 4E 05 F1 | 	add	fp, #4
0c190     A7 1A 62 FC | 	wrlong	arg05, fp
0c194                 | '   t1=pop()
0c194                 | '   if t1.result_type=result_string2 then 
0c194     64 4E 85 F1 | 	sub	fp, #100
0c198     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c19c     20 00 90 5D |  if_ne	jmp	#LR__1010
0c1a0     5C 4E 05 F1 | 	add	fp, #92
0c1a4     A7 12 02 FB | 	rdlong	arg01, fp
0c1a8     5C 4E 85 F1 | 	sub	fp, #92
0c1ac     60 2B B0 FD | 	call	#_convertstring
0c1b0     68 4E 05 F1 | 	add	fp, #104
0c1b4     A7 FA 61 FC | 	wrlong	result1, fp
0c1b8     68 4E 85 F1 | 	sub	fp, #104
0c1bc     58 00 90 FD | 	jmp	#LR__1013
0c1c0                 | LR__1010
0c1c0     64 4E 05 F1 | 	add	fp, #100
0c1c4     A7 20 02 FB | 	rdlong	local02, fp
0c1c8     64 4E 85 F1 | 	sub	fp, #100
0c1cc     1F 20 0E F2 | 	cmp	local02, #31 wz
0c1d0     18 00 90 5D |  if_ne	jmp	#LR__1011
0c1d4     5C 4E 05 F1 | 	add	fp, #92
0c1d8     A7 20 02 FB | 	rdlong	local02, fp
0c1dc     0C 4E 05 F1 | 	add	fp, #12
0c1e0     A7 20 62 FC | 	wrlong	local02, fp
0c1e4     68 4E 85 F1 | 	sub	fp, #104
0c1e8     2C 00 90 FD | 	jmp	#LR__1012
0c1ec                 | LR__1011
0c1ec     74 01 00 FF 
0c1f0     D5 21 06 F6 | 	mov	local02, ##@LR__5147
0c1f4     68 4E 05 F1 | 	add	fp, #104
0c1f8     A7 20 62 FC | 	wrlong	local02, fp
0c1fc     0C 4E 85 F1 | 	sub	fp, #12
0c200     A7 12 02 F6 | 	mov	arg01, fp
0c204     5C 4E 85 F1 | 	sub	fp, #92
0c208     28 73 B0 FD | 	call	#_converttoint
0c20c     24 4E 05 F1 | 	add	fp, #36
0c210     A7 FA 61 FC | 	wrlong	result1, fp
0c214     24 4E 85 F1 | 	sub	fp, #36
0c218                 | LR__1012
0c218                 | LR__1013
0c218                 | ' 
0c218                 | '     
0c218                 | '   if s1<>"" then 
0c218     68 4E 05 F1 | 	add	fp, #104
0c21c     A7 12 02 FB | 	rdlong	arg01, fp
0c220     68 4E 85 F1 | 	sub	fp, #104
0c224     74 01 00 FF 
0c228     D6 15 06 F6 | 	mov	arg02, ##@LR__5148
0c22c     C4 2B B1 FD | 	call	#__system___string_cmp
0c230     00 FA 0D F2 | 	cmp	result1, #0 wz
0c234     24 02 90 AD |  if_e	jmp	#LR__1017
0c238     5C E6 BF FD | 	call	#_pop
0c23c     FF 1E 02 F6 | 	mov	local01, result3
0c240     5C 4E 05 F1 | 	add	fp, #92
0c244     A7 FA 61 FC | 	wrlong	result1, fp
0c248     04 4E 05 F1 | 	add	fp, #4
0c24c     A7 FC 61 FC | 	wrlong	result2, fp
0c250     04 4E 05 F1 | 	add	fp, #4
0c254     A7 1E 62 FC | 	wrlong	local01, fp
0c258     08 4E 85 F1 | 	sub	fp, #8
0c25c     A7 12 02 F6 | 	mov	arg01, fp
0c260     5C 4E 85 F1 | 	sub	fp, #92
0c264     CC 72 B0 FD | 	call	#_converttoint
0c268     20 4E 05 F1 | 	add	fp, #32
0c26c     A7 FA 61 FC | 	wrlong	result1, fp
0c270     20 4E 85 F1 | 	sub	fp, #32
0c274                 | '     t1=pop()
0c274                 | '     channel=converttoint(t1) 
0c274                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c274     09 12 06 F6 | 	mov	arg01, #9
0c278     18 7B B1 FD | 	call	#__system__close
0c27c     09 20 06 F6 | 	mov	local02, #9
0c280     74 01 00 FF 
0c284     D7 13 06 F6 | 	mov	arg01, ##@LR__5149
0c288     68 4E 05 F1 | 	add	fp, #104
0c28c     A7 14 02 FB | 	rdlong	arg02, fp
0c290     68 4E 85 F1 | 	sub	fp, #104
0c294     90 2B B1 FD | 	call	#__system___string_concat
0c298     FD 14 02 F6 | 	mov	arg02, result1
0c29c     10 13 02 F6 | 	mov	arg01, local02
0c2a0     00 16 06 F6 | 	mov	arg03, #0
0c2a4     28 37 B1 FD | 	call	#__system___basic_open_string
0c2a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c2ac     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c2b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c2b4     0C 4E 05 F1 | 	add	fp, #12
0c2b8     A7 FA 61 FC | 	wrlong	result1, fp
0c2bc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c2bc     0C 4E 85 F1 | 	sub	fp, #12
0c2c0     A0 00 90 AD |  if_e	jmp	#LR__1014
0c2c4     00 12 06 F6 | 	mov	arg01, #0
0c2c8     98 84 B1 FD | 	call	#__system___getiolock_0485
0c2cc     FD 12 02 F6 | 	mov	arg01, result1
0c2d0     F8 2A B1 FD | 	call	#__system___lockmem
0c2d4     74 01 00 FF 
0c2d8     E4 15 06 F6 | 	mov	arg02, ##@LR__5150
0c2dc     00 12 06 F6 | 	mov	arg01, #0
0c2e0     00 16 06 F6 | 	mov	arg03, #0
0c2e4     D8 37 B1 FD | 	call	#__system___basic_print_string
0c2e8     0C 4E 05 F1 | 	add	fp, #12
0c2ec     A7 14 02 FB | 	rdlong	arg02, fp
0c2f0     0C 4E 85 F1 | 	sub	fp, #12
0c2f4     00 12 06 F6 | 	mov	arg01, #0
0c2f8     00 16 06 F6 | 	mov	arg03, #0
0c2fc     0A 18 06 F6 | 	mov	arg04, #10
0c300     00 38 B1 FD | 	call	#__system___basic_print_integer
0c304     74 01 00 FF 
0c308     F2 15 06 F6 | 	mov	arg02, ##@LR__5151
0c30c     00 12 06 F6 | 	mov	arg01, #0
0c310     00 16 06 F6 | 	mov	arg03, #0
0c314     A8 37 B1 FD | 	call	#__system___basic_print_string
0c318     00 20 06 F6 | 	mov	local02, #0
0c31c     0C 4E 05 F1 | 	add	fp, #12
0c320     A7 12 02 FB | 	rdlong	arg01, fp
0c324     0C 4E 85 F1 | 	sub	fp, #12
0c328     FC 50 B1 FD | 	call	#__system___strerror
0c32c     FD 14 02 F6 | 	mov	arg02, result1
0c330     10 13 02 F6 | 	mov	arg01, local02
0c334     00 16 06 F6 | 	mov	arg03, #0
0c338     84 37 B1 FD | 	call	#__system___basic_print_string
0c33c     00 12 06 F6 | 	mov	arg01, #0
0c340     0A 14 06 F6 | 	mov	arg02, #10
0c344     00 16 06 F6 | 	mov	arg03, #0
0c348     1C 37 B1 FD | 	call	#__system___basic_print_char
0c34c     00 12 06 F6 | 	mov	arg01, #0
0c350     10 84 B1 FD | 	call	#__system___getiolock_0485
0c354     FD 00 68 FC | 	wrlong	#0, result1
0c358     09 12 06 F6 | 	mov	arg01, #9
0c35c     34 7A B1 FD | 	call	#__system__close
0c360     0C 0A 90 FD | 	jmp	#LR__1031
0c364                 | LR__1014
0c364                 | '     get #9,17,envbuf8(channel,0),256
0c364     20 4E 05 F1 | 	add	fp, #32
0c368     A7 1A 02 FB | 	rdlong	arg05, fp
0c36c     20 4E 85 F1 | 	sub	fp, #32
0c370     0D 17 02 F6 | 	mov	arg03, arg05
0c374     09 16 66 F0 | 	shl	arg03, #9
0c378     0D 17 02 F1 | 	add	arg03, arg05
0c37c     0C 00 00 FF 
0c380     D8 E4 05 F1 | 	add	objptr, ##6360
0c384     F2 16 02 F1 | 	add	arg03, objptr
0c388     09 12 06 F6 | 	mov	arg01, #9
0c38c     11 14 06 F6 | 	mov	arg02, #17
0c390     00 19 06 F6 | 	mov	arg04, #256
0c394     01 1A 06 F6 | 	mov	arg05, #1
0c398     0C 00 00 FF 
0c39c     D8 E4 85 F1 | 	sub	objptr, ##6360
0c3a0     2C 38 B1 FD | 	call	#__system___basic_get
0c3a4                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0c3a4     14 4E 05 F1 | 	add	fp, #20
0c3a8     A7 FE 69 FC | 	wrlong	#255, fp
0c3ac     14 4E 85 F1 | 	sub	fp, #20
0c3b0     0C 00 00 FF 
0c3b4     D8 E4 05 F1 | 	add	objptr, ##6360
0c3b8     97 30 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c3bc                 | LR__1015
0c3bc     20 4E 05 F1 | 	add	fp, #32
0c3c0     A7 18 02 FB | 	rdlong	arg04, fp
0c3c4     0C 21 02 F6 | 	mov	local02, arg04
0c3c8     09 20 66 F0 | 	shl	local02, #9
0c3cc     F2 20 02 F1 | 	add	local02, objptr
0c3d0     0C 4E 85 F1 | 	sub	fp, #12
0c3d4     A7 1E 02 FB | 	rdlong	local01, fp
0c3d8     0F 1B 02 F6 | 	mov	arg05, local01
0c3dc     01 1A 66 F0 | 	shl	arg05, #1
0c3e0     10 1B 02 F1 | 	add	arg05, local02
0c3e4     0C 21 02 F6 | 	mov	local02, arg04
0c3e8     09 20 66 F0 | 	shl	local02, #9
0c3ec     0C 21 02 F1 | 	add	local02, arg04
0c3f0     F2 20 02 F1 | 	add	local02, objptr
0c3f4     10 1F 02 F1 | 	add	local01, local02
0c3f8     0F 21 C2 FA | 	rdbyte	local02, local01
0c3fc     00 21 06 FA | 	mul	local02, #256
0c400     0D 21 52 FC | 	wrword	local02, arg05
0c404     A7 20 02 FB | 	rdlong	local02, fp
0c408     01 20 86 F1 | 	sub	local02, #1
0c40c     A7 20 62 FC | 	wrlong	local02, fp
0c410     14 4E 85 F1 | 	sub	fp, #20
0c414     00 20 56 F2 | 	cmps	local02, #0 wc
0c418     A0 FF 9F 3D |  if_ae	jmp	#LR__1015
0c41c                 | LR__1016
0c41c     0C 00 00 FF 
0c420     D8 E4 85 F1 | 	sub	objptr, ##6360
0c424                 | '     close #9
0c424     09 12 06 F6 | 	mov	arg01, #9
0c428     68 79 B1 FD | 	call	#__system__close
0c42c     20 4E 05 F1 | 	add	fp, #32
0c430     A7 20 02 FB | 	rdlong	local02, fp
0c434     20 4E 85 F1 | 	sub	fp, #32
0c438     09 20 66 F0 | 	shl	local02, #9
0c43c     0C 00 00 FF 
0c440     D8 E4 05 F1 | 	add	objptr, ##6360
0c444     F2 20 02 F1 | 	add	local02, objptr
0c448     FE 21 06 F1 | 	add	local02, #510
0c44c     10 01 58 FC | 	wrword	#0, local02
0c450                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0c450                 | '     return
0c450     0C 00 00 FF 
0c454     D8 E4 85 F1 | 	sub	objptr, ##6360
0c458     14 09 90 FD | 	jmp	#LR__1031
0c45c                 | LR__1017
0c45c                 | '     if wptr < ($80000 - 2048) then 
0c45c     24 4E 05 F1 | 	add	fp, #36
0c460     A7 22 02 FB | 	rdlong	local03, fp
0c464     24 4E 85 F1 | 	sub	fp, #36
0c468     FC 03 00 FF 
0c46c     00 22 56 F2 | 	cmps	local03, ##522240 wc
0c470     7C 00 90 3D |  if_ae	jmp	#LR__1020
0c474                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c474     14 4E 05 F1 | 	add	fp, #20
0c478     A7 00 68 FC | 	wrlong	#0, fp
0c47c     14 4E 85 F1 | 	sub	fp, #20
0c480     0C 00 00 FF 
0c484     D8 E4 05 F1 | 	add	objptr, ##6360
0c488     97 2C 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c48c                 | LR__1018
0c48c     20 4E 05 F1 | 	add	fp, #32
0c490     A7 22 02 FB | 	rdlong	local03, fp
0c494     09 22 66 F0 | 	shl	local03, #9
0c498     F2 22 02 F1 | 	add	local03, objptr
0c49c     0C 4E 85 F1 | 	sub	fp, #12
0c4a0     A7 20 02 FB | 	rdlong	local02, fp
0c4a4     10 1F 02 F6 | 	mov	local01, local02
0c4a8     01 1E 66 F0 | 	shl	local01, #1
0c4ac     11 1F 02 F1 | 	add	local01, local03
0c4b0     10 4E 05 F1 | 	add	fp, #16
0c4b4     A7 12 02 FB | 	rdlong	arg01, fp
0c4b8     01 20 66 F0 | 	shl	local02, #1
0c4bc     10 13 02 F1 | 	add	arg01, local02
0c4c0     09 FB E1 FA | 	rdword	result1, arg01
0c4c4     0F FB 51 FC | 	wrword	result1, local01
0c4c8     10 4E 85 F1 | 	sub	fp, #16
0c4cc     A7 22 02 FB | 	rdlong	local03, fp
0c4d0     01 22 06 F1 | 	add	local03, #1
0c4d4     A7 22 62 FC | 	wrlong	local03, fp
0c4d8     14 4E 85 F1 | 	sub	fp, #20
0c4dc     00 23 56 F2 | 	cmps	local03, #256 wc
0c4e0     A8 FF 9F CD |  if_b	jmp	#LR__1018
0c4e4                 | LR__1019
0c4e4     0C 00 00 FF 
0c4e8     D8 E4 85 F1 | 	sub	objptr, ##6360
0c4ec     78 00 90 FD | 	jmp	#LR__1022
0c4f0                 | LR__1020
0c4f0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c4f0     14 4E 05 F1 | 	add	fp, #20
0c4f4     A7 00 68 FC | 	wrlong	#0, fp
0c4f8     14 4E 85 F1 | 	sub	fp, #20
0c4fc                 | LR__1021
0c4fc     20 4E 05 F1 | 	add	fp, #32
0c500     A7 22 02 FB | 	rdlong	local03, fp
0c504     09 22 66 F0 | 	shl	local03, #9
0c508     0C 00 00 FF 
0c50c     D8 E4 05 F1 | 	add	objptr, ##6360
0c510     F2 22 02 F1 | 	add	local03, objptr
0c514     0C 4E 85 F1 | 	sub	fp, #12
0c518     A7 20 02 FB | 	rdlong	local02, fp
0c51c     10 1F 02 F6 | 	mov	local01, local02
0c520     01 1E 66 F0 | 	shl	local01, #1
0c524     11 1F 02 F1 | 	add	local01, local03
0c528     10 4E 05 F1 | 	add	fp, #16
0c52c     A7 12 02 FB | 	rdlong	arg01, fp
0c530     24 4E 85 F1 | 	sub	fp, #36
0c534     01 20 66 F0 | 	shl	local02, #1
0c538     10 13 02 F1 | 	add	arg01, local02
0c53c     0C 00 00 FF 
0c540     D8 E4 85 F1 | 	sub	objptr, ##6360
0c544     C8 E6 B0 FD | 	call	#_psdpeek
0c548     0F FB 51 FC | 	wrword	result1, local01
0c54c     14 4E 05 F1 | 	add	fp, #20
0c550     A7 22 02 FB | 	rdlong	local03, fp
0c554     01 22 06 F1 | 	add	local03, #1
0c558     A7 22 62 FC | 	wrlong	local03, fp
0c55c     14 4E 85 F1 | 	sub	fp, #20
0c560     00 23 56 F2 | 	cmps	local03, #256 wc
0c564     94 FF 9F CD |  if_b	jmp	#LR__1021
0c568                 | LR__1022
0c568     20 4E 05 F1 | 	add	fp, #32
0c56c     A7 22 02 FB | 	rdlong	local03, fp
0c570     20 4E 85 F1 | 	sub	fp, #32
0c574     09 22 66 F0 | 	shl	local03, #9
0c578     0C 00 00 FF 
0c57c     D8 E4 05 F1 | 	add	objptr, ##6360
0c580     F2 22 02 F1 | 	add	local03, objptr
0c584     FE 23 06 F1 | 	add	local03, #510
0c588     11 01 58 FC | 	wrword	#0, local03
0c58c                 | '     envbuf(channel,255)=0
0c58c                 | '     return   
0c58c     0C 00 00 FF 
0c590     D8 E4 85 F1 | 	sub	objptr, ##6360
0c594     D8 07 90 FD | 	jmp	#LR__1031
0c598                 | LR__1023
0c598                 | ' 
0c598                 | ' if numpar=5 then    'simple adsr
0c598     10 4E 05 F1 | 	add	fp, #16
0c59c     A7 22 02 FB | 	rdlong	local03, fp
0c5a0     10 4E 85 F1 | 	sub	fp, #16
0c5a4     05 22 0E F2 | 	cmp	local03, #5 wz
0c5a8     98 07 90 5D |  if_ne	jmp	#LR__1030
0c5ac     E8 E2 BF FD | 	call	#_pop
0c5b0     FF 1E 02 F6 | 	mov	local01, result3
0c5b4     5C 4E 05 F1 | 	add	fp, #92
0c5b8     A7 FA 61 FC | 	wrlong	result1, fp
0c5bc     04 4E 05 F1 | 	add	fp, #4
0c5c0     A7 FC 61 FC | 	wrlong	result2, fp
0c5c4     04 4E 05 F1 | 	add	fp, #4
0c5c8     A7 1E 62 FC | 	wrlong	local01, fp
0c5cc     08 4E 85 F1 | 	sub	fp, #8
0c5d0     A7 12 02 F6 | 	mov	arg01, fp
0c5d4     5C 4E 85 F1 | 	sub	fp, #92
0c5d8     04 70 B0 FD | 	call	#_converttofloat
0c5dc     FD 22 02 F6 | 	mov	local03, result1
0c5e0     34 4E 05 F1 | 	add	fp, #52
0c5e4     A7 22 62 FC | 	wrlong	local03, fp
0c5e8     34 4E 85 F1 | 	sub	fp, #52
0c5ec     A8 E2 BF FD | 	call	#_pop
0c5f0     FF 1E 02 F6 | 	mov	local01, result3
0c5f4     5C 4E 05 F1 | 	add	fp, #92
0c5f8     A7 FA 61 FC | 	wrlong	result1, fp
0c5fc     04 4E 05 F1 | 	add	fp, #4
0c600     A7 FC 61 FC | 	wrlong	result2, fp
0c604     04 4E 05 F1 | 	add	fp, #4
0c608     A7 1E 62 FC | 	wrlong	local01, fp
0c60c     08 4E 85 F1 | 	sub	fp, #8
0c610     A7 12 02 F6 | 	mov	arg01, fp
0c614     5C 4E 85 F1 | 	sub	fp, #92
0c618     C4 6F B0 FD | 	call	#_converttofloat
0c61c     FD 22 02 F6 | 	mov	local03, result1
0c620     30 4E 05 F1 | 	add	fp, #48
0c624     A7 22 62 FC | 	wrlong	local03, fp
0c628     30 4E 85 F1 | 	sub	fp, #48
0c62c     68 E2 BF FD | 	call	#_pop
0c630     FF 1E 02 F6 | 	mov	local01, result3
0c634     5C 4E 05 F1 | 	add	fp, #92
0c638     A7 FA 61 FC | 	wrlong	result1, fp
0c63c     04 4E 05 F1 | 	add	fp, #4
0c640     A7 FC 61 FC | 	wrlong	result2, fp
0c644     04 4E 05 F1 | 	add	fp, #4
0c648     A7 1E 62 FC | 	wrlong	local01, fp
0c64c     08 4E 85 F1 | 	sub	fp, #8
0c650     A7 12 02 F6 | 	mov	arg01, fp
0c654     5C 4E 85 F1 | 	sub	fp, #92
0c658     84 6F B0 FD | 	call	#_converttofloat
0c65c     FD 22 02 F6 | 	mov	local03, result1
0c660     2C 4E 05 F1 | 	add	fp, #44
0c664     A7 22 62 FC | 	wrlong	local03, fp
0c668     2C 4E 85 F1 | 	sub	fp, #44
0c66c     28 E2 BF FD | 	call	#_pop
0c670     FF 1E 02 F6 | 	mov	local01, result3
0c674     5C 4E 05 F1 | 	add	fp, #92
0c678     A7 FA 61 FC | 	wrlong	result1, fp
0c67c     04 4E 05 F1 | 	add	fp, #4
0c680     A7 FC 61 FC | 	wrlong	result2, fp
0c684     04 4E 05 F1 | 	add	fp, #4
0c688     A7 1E 62 FC | 	wrlong	local01, fp
0c68c     08 4E 85 F1 | 	sub	fp, #8
0c690     A7 12 02 F6 | 	mov	arg01, fp
0c694     5C 4E 85 F1 | 	sub	fp, #92
0c698     44 6F B0 FD | 	call	#_converttofloat
0c69c     FD 22 02 F6 | 	mov	local03, result1
0c6a0     28 4E 05 F1 | 	add	fp, #40
0c6a4     A7 22 62 FC | 	wrlong	local03, fp
0c6a8     28 4E 85 F1 | 	sub	fp, #40
0c6ac     E8 E1 BF FD | 	call	#_pop
0c6b0     FF 1E 02 F6 | 	mov	local01, result3
0c6b4     5C 4E 05 F1 | 	add	fp, #92
0c6b8     A7 FA 61 FC | 	wrlong	result1, fp
0c6bc     04 4E 05 F1 | 	add	fp, #4
0c6c0     A7 FC 61 FC | 	wrlong	result2, fp
0c6c4     04 4E 05 F1 | 	add	fp, #4
0c6c8     A7 1E 62 FC | 	wrlong	local01, fp
0c6cc     08 4E 85 F1 | 	sub	fp, #8
0c6d0     A7 12 02 F6 | 	mov	arg01, fp
0c6d4     5C 4E 85 F1 | 	sub	fp, #92
0c6d8     58 6E B0 FD | 	call	#_converttoint
0c6dc     20 4E 05 F1 | 	add	fp, #32
0c6e0     A7 FA 61 FC | 	wrlong	result1, fp
0c6e4                 | ' 
0c6e4                 | '   t1=pop() : rr=converttofloat(t1)
0c6e4                 | '   t1=pop() : ss=converttofloat(t1) 
0c6e4                 | '   t1=pop() : dd=converttofloat(t1)
0c6e4                 | '   t1=pop() : aa=converttofloat(t1)
0c6e4                 | '   t1=pop() : channel=converttoint(t1)
0c6e4                 | '   if ss<0.0 then ss=0.0 
0c6e4     10 4E 05 F1 | 	add	fp, #16
0c6e8     A7 12 02 FB | 	rdlong	arg01, fp
0c6ec     30 4E 85 F1 | 	sub	fp, #48
0c6f0     00 14 06 F6 | 	mov	arg02, #0
0c6f4     01 16 06 F6 | 	mov	arg03, #1
0c6f8     4C 56 B1 FD | 	call	#__system___float_cmp
0c6fc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c700     30 4E 05 C1 |  if_b	add	fp, #48
0c704     A7 00 68 CC |  if_b	wrlong	#0, fp
0c708     30 4E 85 C1 |  if_b	sub	fp, #48
0c70c                 | '   if ss>1.0 then ss=1.0
0c70c     30 4E 05 F1 | 	add	fp, #48
0c710     A7 12 02 FB | 	rdlong	arg01, fp
0c714     30 4E 85 F1 | 	sub	fp, #48
0c718     00 C0 1F FF 
0c71c     00 14 06 F6 | 	mov	arg02, ##1065353216
0c720     01 16 66 F6 | 	neg	arg03, #1
0c724     20 56 B1 FD | 	call	#__system___float_cmp
0c728     01 FA 55 F2 | 	cmps	result1, #1 wc
0c72c     30 4E 05 31 |  if_ae	add	fp, #48
0c730     00 C0 9F 3F 
0c734     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c738     30 4E 85 31 |  if_ae	sub	fp, #48
0c73c     28 4E 05 F1 | 	add	fp, #40
0c740     A7 12 02 FB | 	rdlong	arg01, fp
0c744     04 4E 05 F1 | 	add	fp, #4
0c748     A7 14 02 FB | 	rdlong	arg02, fp
0c74c     2C 4E 85 F1 | 	sub	fp, #44
0c750     F0 4D B1 FD | 	call	#__system___float_add
0c754     FD 12 02 F6 | 	mov	arg01, result1
0c758     34 4E 05 F1 | 	add	fp, #52
0c75c     A7 14 02 FB | 	rdlong	arg02, fp
0c760     34 4E 85 F1 | 	sub	fp, #52
0c764     DC 4D B1 FD | 	call	#__system___float_add
0c768     4C 4E 05 F1 | 	add	fp, #76
0c76c     A7 FA 61 FC | 	wrlong	result1, fp
0c770     FD 14 02 F6 | 	mov	arg02, result1
0c774     4C 4E 85 F1 | 	sub	fp, #76
0c778     00 C0 21 FF 
0c77c     00 12 06 F6 | 	mov	arg01, ##1132462080
0c780     94 53 B1 FD | 	call	#__system___float_div
0c784     50 4E 05 F1 | 	add	fp, #80
0c788     A7 FA 61 FC | 	wrlong	result1, fp
0c78c     28 4E 85 F1 | 	sub	fp, #40
0c790     A7 12 02 FB | 	rdlong	arg01, fp
0c794     FD 14 02 F6 | 	mov	arg02, result1
0c798     28 4E 85 F1 | 	sub	fp, #40
0c79c     74 51 B1 FD | 	call	#__system___float_mul
0c7a0     FD 12 02 F6 | 	mov	arg01, result1
0c7a4     01 14 06 F6 | 	mov	arg02, #1
0c7a8     30 56 B1 FD | 	call	#__system___float_tointeger
0c7ac     A7 FA 61 FC | 	wrlong	result1, fp
0c7b0     2C 4E 05 F1 | 	add	fp, #44
0c7b4     A7 12 02 FB | 	rdlong	arg01, fp
0c7b8     24 4E 05 F1 | 	add	fp, #36
0c7bc     A7 14 02 FB | 	rdlong	arg02, fp
0c7c0     50 4E 85 F1 | 	sub	fp, #80
0c7c4     4C 51 B1 FD | 	call	#__system___float_mul
0c7c8     FD 12 02 F6 | 	mov	arg01, result1
0c7cc     01 14 06 F6 | 	mov	arg02, #1
0c7d0     08 56 B1 FD | 	call	#__system___float_tointeger
0c7d4     04 4E 05 F1 | 	add	fp, #4
0c7d8     A7 FA 61 FC | 	wrlong	result1, fp
0c7dc     30 4E 05 F1 | 	add	fp, #48
0c7e0     A7 12 02 FB | 	rdlong	arg01, fp
0c7e4     1C 4E 05 F1 | 	add	fp, #28
0c7e8     A7 14 02 FB | 	rdlong	arg02, fp
0c7ec     50 4E 85 F1 | 	sub	fp, #80
0c7f0     20 51 B1 FD | 	call	#__system___float_mul
0c7f4     FD 12 02 F6 | 	mov	arg01, result1
0c7f8     01 14 06 F6 | 	mov	arg02, #1
0c7fc     DC 55 B1 FD | 	call	#__system___float_tointeger
0c800     FD 22 02 F6 | 	mov	local03, result1
0c804     0C 4E 05 F1 | 	add	fp, #12
0c808     A7 22 62 FC | 	wrlong	local03, fp
0c80c     0C 4E 85 F1 | 	sub	fp, #12
0c810                 | '   fulltime=aa+dd+rr
0c810                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c810     00 12 06 F6 | 	mov	arg01, #0
0c814     4C 7F B1 FD | 	call	#__system___getiolock_0485
0c818     FD 12 02 F6 | 	mov	arg01, result1
0c81c     AC 25 B1 FD | 	call	#__system___lockmem
0c820     A7 14 02 FB | 	rdlong	arg02, fp
0c824     00 12 06 F6 | 	mov	arg01, #0
0c828     00 16 06 F6 | 	mov	arg03, #0
0c82c     0A 18 06 F6 | 	mov	arg04, #10
0c830     D0 32 B1 FD | 	call	#__system___basic_print_integer
0c834     00 12 06 F6 | 	mov	arg01, #0
0c838     09 14 06 F6 | 	mov	arg02, #9
0c83c     00 16 06 F6 | 	mov	arg03, #0
0c840     24 32 B1 FD | 	call	#__system___basic_print_char
0c844     04 4E 05 F1 | 	add	fp, #4
0c848     A7 14 02 FB | 	rdlong	arg02, fp
0c84c     04 4E 85 F1 | 	sub	fp, #4
0c850     00 12 06 F6 | 	mov	arg01, #0
0c854     00 16 06 F6 | 	mov	arg03, #0
0c858     0A 18 06 F6 | 	mov	arg04, #10
0c85c     A4 32 B1 FD | 	call	#__system___basic_print_integer
0c860     00 12 06 F6 | 	mov	arg01, #0
0c864     09 14 06 F6 | 	mov	arg02, #9
0c868     00 16 06 F6 | 	mov	arg03, #0
0c86c     F8 31 B1 FD | 	call	#__system___basic_print_char
0c870     0C 4E 05 F1 | 	add	fp, #12
0c874     A7 14 02 FB | 	rdlong	arg02, fp
0c878     0C 4E 85 F1 | 	sub	fp, #12
0c87c     00 12 06 F6 | 	mov	arg01, #0
0c880     00 16 06 F6 | 	mov	arg03, #0
0c884     0A 18 06 F6 | 	mov	arg04, #10
0c888     78 32 B1 FD | 	call	#__system___basic_print_integer
0c88c     00 12 06 F6 | 	mov	arg01, #0
0c890     09 14 06 F6 | 	mov	arg02, #9
0c894     00 16 06 F6 | 	mov	arg03, #0
0c898     CC 31 B1 FD | 	call	#__system___basic_print_char
0c89c     A7 14 02 FB | 	rdlong	arg02, fp
0c8a0     04 4E 05 F1 | 	add	fp, #4
0c8a4     A7 22 02 FB | 	rdlong	local03, fp
0c8a8     11 15 02 F1 | 	add	arg02, local03
0c8ac     08 4E 05 F1 | 	add	fp, #8
0c8b0     A7 22 02 FB | 	rdlong	local03, fp
0c8b4     0C 4E 85 F1 | 	sub	fp, #12
0c8b8     11 15 02 F1 | 	add	arg02, local03
0c8bc     00 12 06 F6 | 	mov	arg01, #0
0c8c0     00 16 06 F6 | 	mov	arg03, #0
0c8c4     0A 18 06 F6 | 	mov	arg04, #10
0c8c8     38 32 B1 FD | 	call	#__system___basic_print_integer
0c8cc     00 12 06 F6 | 	mov	arg01, #0
0c8d0     0A 14 06 F6 | 	mov	arg02, #10
0c8d4     00 16 06 F6 | 	mov	arg03, #0
0c8d8     8C 31 B1 FD | 	call	#__system___basic_print_char
0c8dc     00 12 06 F6 | 	mov	arg01, #0
0c8e0     80 7E B1 FD | 	call	#__system___getiolock_0485
0c8e4     FD 00 68 FC | 	wrlong	#0, result1
0c8e8     F8 BF 23 FF 
0c8ec     00 22 06 F6 | 	mov	local03, ##1199566848
0c8f0     A7 12 02 FB | 	rdlong	arg01, fp
0c8f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8f8     1F 24 C6 C9 |  if_b	decod	local04, #31
0c8fc     00 24 06 36 |  if_ae	mov	local04, #0
0c900     0C 4C B1 FD | 	call	#__system___float_fromuns
0c904     12 FB 61 F5 | 	xor	result1, local04
0c908     FD 14 02 F6 | 	mov	arg02, result1
0c90c     11 13 02 F6 | 	mov	arg01, local03
0c910     04 52 B1 FD | 	call	#__system___float_div
0c914     54 4E 05 F1 | 	add	fp, #84
0c918     A7 FA 61 FC | 	wrlong	result1, fp
0c91c     F8 BF 23 FF 
0c920     00 22 06 F6 | 	mov	local03, ##1199566848
0c924     24 4E 85 F1 | 	sub	fp, #36
0c928     A7 14 02 FB | 	rdlong	arg02, fp
0c92c     30 4E 85 F1 | 	sub	fp, #48
0c930     F8 BF 23 FF 
0c934     00 12 06 F6 | 	mov	arg01, ##1199566848
0c938     D8 4F B1 FD | 	call	#__system___float_mul
0c93c     FD 14 02 F6 | 	mov	arg02, result1
0c940     11 13 02 F6 | 	mov	arg01, local03
0c944     1F 14 E6 F4 | 	bitnot	arg02, #31
0c948     F8 4B B1 FD | 	call	#__system___float_add
0c94c     FD 22 02 F6 | 	mov	local03, result1
0c950     04 4E 05 F1 | 	add	fp, #4
0c954     A7 12 02 FB | 	rdlong	arg01, fp
0c958     04 4E 85 F1 | 	sub	fp, #4
0c95c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c960     1F 24 C6 C9 |  if_b	decod	local04, #31
0c964     00 24 06 36 |  if_ae	mov	local04, #0
0c968     A4 4B B1 FD | 	call	#__system___float_fromuns
0c96c     12 FB 61 F5 | 	xor	result1, local04
0c970     FD 14 02 F6 | 	mov	arg02, result1
0c974     11 13 02 F6 | 	mov	arg01, local03
0c978     9C 51 B1 FD | 	call	#__system___float_div
0c97c     2C 4E 05 F1 | 	add	fp, #44
0c980     A7 FA 61 FC | 	wrlong	result1, fp
0c984     04 4E 05 F1 | 	add	fp, #4
0c988     A7 14 02 FB | 	rdlong	arg02, fp
0c98c     30 4E 85 F1 | 	sub	fp, #48
0c990     F8 BF 23 FF 
0c994     00 12 06 F6 | 	mov	arg01, ##1199566848
0c998     78 4F B1 FD | 	call	#__system___float_mul
0c99c     FD 22 02 F6 | 	mov	local03, result1
0c9a0     0C 4E 05 F1 | 	add	fp, #12
0c9a4     A7 12 02 FB | 	rdlong	arg01, fp
0c9a8     0C 4E 85 F1 | 	sub	fp, #12
0c9ac     09 13 52 F6 | 	abs	arg01, arg01 wc
0c9b0     1F 24 C6 C9 |  if_b	decod	local04, #31
0c9b4     00 24 06 36 |  if_ae	mov	local04, #0
0c9b8     54 4B B1 FD | 	call	#__system___float_fromuns
0c9bc     12 FB 61 F5 | 	xor	result1, local04
0c9c0     FD 14 02 F6 | 	mov	arg02, result1
0c9c4     11 13 02 F6 | 	mov	arg01, local03
0c9c8     4C 51 B1 FD | 	call	#__system___float_div
0c9cc     FD 22 02 F6 | 	mov	local03, result1
0c9d0     58 4E 05 F1 | 	add	fp, #88
0c9d4     A7 22 62 FC | 	wrlong	local03, fp
0c9d8     58 4E 85 F1 | 	sub	fp, #88
0c9dc                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c9dc     00 12 06 F6 | 	mov	arg01, #0
0c9e0     80 7D B1 FD | 	call	#__system___getiolock_0485
0c9e4     FD 12 02 F6 | 	mov	arg01, result1
0c9e8     E0 23 B1 FD | 	call	#__system___lockmem
0c9ec     54 4E 05 F1 | 	add	fp, #84
0c9f0     A7 14 02 FB | 	rdlong	arg02, fp
0c9f4     54 4E 85 F1 | 	sub	fp, #84
0c9f8     00 12 06 F6 | 	mov	arg01, #0
0c9fc     00 16 06 F6 | 	mov	arg03, #0
0ca00     23 18 06 F6 | 	mov	arg04, #35
0ca04     24 55 B1 FD | 	call	#__system___basic_print_float
0ca08     00 12 06 F6 | 	mov	arg01, #0
0ca0c     09 14 06 F6 | 	mov	arg02, #9
0ca10     00 16 06 F6 | 	mov	arg03, #0
0ca14     50 30 B1 FD | 	call	#__system___basic_print_char
0ca18     2C 4E 05 F1 | 	add	fp, #44
0ca1c     A7 14 02 FB | 	rdlong	arg02, fp
0ca20     2C 4E 85 F1 | 	sub	fp, #44
0ca24     00 12 06 F6 | 	mov	arg01, #0
0ca28     00 16 06 F6 | 	mov	arg03, #0
0ca2c     23 18 06 F6 | 	mov	arg04, #35
0ca30     F8 54 B1 FD | 	call	#__system___basic_print_float
0ca34     00 12 06 F6 | 	mov	arg01, #0
0ca38     09 14 06 F6 | 	mov	arg02, #9
0ca3c     00 16 06 F6 | 	mov	arg03, #0
0ca40     24 30 B1 FD | 	call	#__system___basic_print_char
0ca44     58 4E 05 F1 | 	add	fp, #88
0ca48     A7 14 02 FB | 	rdlong	arg02, fp
0ca4c     58 4E 85 F1 | 	sub	fp, #88
0ca50     00 12 06 F6 | 	mov	arg01, #0
0ca54     00 16 06 F6 | 	mov	arg03, #0
0ca58     23 18 06 F6 | 	mov	arg04, #35
0ca5c     CC 54 B1 FD | 	call	#__system___basic_print_float
0ca60     00 12 06 F6 | 	mov	arg01, #0
0ca64     0A 14 06 F6 | 	mov	arg02, #10
0ca68     00 16 06 F6 | 	mov	arg03, #0
0ca6c     F8 2F B1 FD | 	call	#__system___basic_print_char
0ca70     00 12 06 F6 | 	mov	arg01, #0
0ca74     EC 7C B1 FD | 	call	#__system___getiolock_0485
0ca78     FD 00 68 FC | 	wrlong	#0, result1
0ca7c     20 4E 05 F1 | 	add	fp, #32
0ca80     A7 26 02 FB | 	rdlong	local05, fp
0ca84     20 4E 85 F1 | 	sub	fp, #32
0ca88     01 26 66 F0 | 	shl	local05, #1
0ca8c     59 00 00 FF 
0ca90     D4 E5 05 F1 | 	add	objptr, ##46036
0ca94     F2 26 02 F1 | 	add	local05, objptr
0ca98     A7 28 02 FB | 	rdlong	local06, fp
0ca9c     04 4E 05 F1 | 	add	fp, #4
0caa0     A7 22 02 FB | 	rdlong	local03, fp
0caa4     11 29 02 F1 | 	add	local06, local03
0caa8     13 29 52 FC | 	wrword	local06, local05
0caac     24 4E 05 F1 | 	add	fp, #36
0cab0     A7 00 68 FC | 	wrlong	#0, fp
0cab4                 | '   suspoints(channel)=a+d
0cab4                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0cab4     14 4E 85 F1 | 	sub	fp, #20
0cab8     A7 00 68 FC | 	wrlong	#0, fp
0cabc     14 4E 85 F1 | 	sub	fp, #20
0cac0     A7 2A 02 FB | 	rdlong	local07, fp
0cac4     59 00 00 FF 
0cac8     D4 E5 85 F1 | 	sub	objptr, ##46036
0cacc                 | LR__1024
0cacc     14 4E 05 F1 | 	add	fp, #20
0cad0     A7 22 02 FB | 	rdlong	local03, fp
0cad4     14 4E 85 F1 | 	sub	fp, #20
0cad8     15 23 52 F2 | 	cmps	local03, local07 wc
0cadc     80 00 90 3D |  if_ae	jmp	#LR__1025
0cae0     20 4E 05 F1 | 	add	fp, #32
0cae4     A7 28 02 FB | 	rdlong	local06, fp
0cae8     09 28 66 F0 | 	shl	local06, #9
0caec     0C 00 00 FF 
0caf0     D8 E4 05 F1 | 	add	objptr, ##6360
0caf4     F2 28 02 F1 | 	add	local06, objptr
0caf8     0C 4E 85 F1 | 	sub	fp, #12
0cafc     A7 26 02 FB | 	rdlong	local05, fp
0cb00     01 26 66 F0 | 	shl	local05, #1
0cb04     14 27 02 F1 | 	add	local05, local06
0cb08     14 4E 05 F1 | 	add	fp, #20
0cb0c     A7 12 02 FB | 	rdlong	arg01, fp
0cb10     28 4E 85 F1 | 	sub	fp, #40
0cb14     0C 00 00 FF 
0cb18     D8 E4 85 F1 | 	sub	objptr, ##6360
0cb1c     01 14 06 F6 | 	mov	arg02, #1
0cb20     B8 52 B1 FD | 	call	#__system___float_tointeger
0cb24     13 FB 51 FC | 	wrword	result1, local05
0cb28     28 4E 05 F1 | 	add	fp, #40
0cb2c     A7 12 02 FB | 	rdlong	arg01, fp
0cb30     2C 4E 05 F1 | 	add	fp, #44
0cb34     A7 14 02 FB | 	rdlong	arg02, fp
0cb38     54 4E 85 F1 | 	sub	fp, #84
0cb3c     04 4A B1 FD | 	call	#__system___float_add
0cb40     28 4E 05 F1 | 	add	fp, #40
0cb44     A7 FA 61 FC | 	wrlong	result1, fp
0cb48     14 4E 85 F1 | 	sub	fp, #20
0cb4c     A7 20 02 FB | 	rdlong	local02, fp
0cb50     01 20 06 F1 | 	add	local02, #1
0cb54     A7 20 62 FC | 	wrlong	local02, fp
0cb58     14 4E 85 F1 | 	sub	fp, #20
0cb5c     6C FF 9F FD | 	jmp	#LR__1024
0cb60                 | LR__1025
0cb60                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0cb60     A7 22 02 FB | 	rdlong	local03, fp
0cb64     14 4E 05 F1 | 	add	fp, #20
0cb68     A7 22 62 FC | 	wrlong	local03, fp
0cb6c     14 4E 85 F1 | 	sub	fp, #20
0cb70     A7 2C 02 FB | 	rdlong	local08, fp
0cb74     04 4E 05 F1 | 	add	fp, #4
0cb78     A7 22 02 FB | 	rdlong	local03, fp
0cb7c     04 4E 85 F1 | 	sub	fp, #4
0cb80     11 2D 02 F1 | 	add	local08, local03
0cb84                 | LR__1026
0cb84     14 4E 05 F1 | 	add	fp, #20
0cb88     A7 22 02 FB | 	rdlong	local03, fp
0cb8c     14 4E 85 F1 | 	sub	fp, #20
0cb90     16 23 52 F2 | 	cmps	local03, local08 wc
0cb94     A8 00 90 3D |  if_ae	jmp	#LR__1027
0cb98     20 4E 05 F1 | 	add	fp, #32
0cb9c     A7 2A 02 FB | 	rdlong	local07, fp
0cba0     09 2A 66 F0 | 	shl	local07, #9
0cba4     0C 00 00 FF 
0cba8     D8 E4 05 F1 | 	add	objptr, ##6360
0cbac     F2 2A 02 F1 | 	add	local07, objptr
0cbb0     0C 4E 85 F1 | 	sub	fp, #12
0cbb4     A7 28 02 FB | 	rdlong	local06, fp
0cbb8     01 28 66 F0 | 	shl	local06, #1
0cbbc     15 29 02 F1 | 	add	local06, local07
0cbc0     14 4E 05 F1 | 	add	fp, #20
0cbc4     A7 12 02 FB | 	rdlong	arg01, fp
0cbc8     28 4E 85 F1 | 	sub	fp, #40
0cbcc     0C 00 00 FF 
0cbd0     D8 E4 85 F1 | 	sub	objptr, ##6360
0cbd4     01 14 06 F6 | 	mov	arg02, #1
0cbd8     00 52 B1 FD | 	call	#__system___float_tointeger
0cbdc     14 FB 51 FC | 	wrword	result1, local06
0cbe0     28 4E 05 F1 | 	add	fp, #40
0cbe4     A7 12 02 FB | 	rdlong	arg01, fp
0cbe8     04 4E 05 F1 | 	add	fp, #4
0cbec     A7 14 02 FB | 	rdlong	arg02, fp
0cbf0     2C 4E 85 F1 | 	sub	fp, #44
0cbf4     1F 14 E6 F4 | 	bitnot	arg02, #31
0cbf8     48 49 B1 FD | 	call	#__system___float_add
0cbfc     28 4E 05 F1 | 	add	fp, #40
0cc00     A7 FA 61 FC | 	wrlong	result1, fp
0cc04     28 4E 85 F1 | 	sub	fp, #40
0cc08     FD 12 02 F6 | 	mov	arg01, result1
0cc0c     00 14 06 F6 | 	mov	arg02, #0
0cc10     01 16 06 F6 | 	mov	arg03, #1
0cc14     30 51 B1 FD | 	call	#__system___float_cmp
0cc18     00 FA 55 F2 | 	cmps	result1, #0 wc
0cc1c     28 4E 05 C1 |  if_b	add	fp, #40
0cc20     A7 00 68 CC |  if_b	wrlong	#0, fp
0cc24     28 4E 85 C1 |  if_b	sub	fp, #40
0cc28     14 4E 05 F1 | 	add	fp, #20
0cc2c     A7 20 02 FB | 	rdlong	local02, fp
0cc30     01 20 06 F1 | 	add	local02, #1
0cc34     A7 20 62 FC | 	wrlong	local02, fp
0cc38     14 4E 85 F1 | 	sub	fp, #20
0cc3c     44 FF 9F FD | 	jmp	#LR__1026
0cc40                 | LR__1027
0cc40                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0cc40     A7 22 02 FB | 	rdlong	local03, fp
0cc44     04 4E 05 F1 | 	add	fp, #4
0cc48     A7 2C 02 FB | 	rdlong	local08, fp
0cc4c     16 23 02 F1 | 	add	local03, local08
0cc50     10 4E 05 F1 | 	add	fp, #16
0cc54     A7 22 62 FC | 	wrlong	local03, fp
0cc58     14 4E 85 F1 | 	sub	fp, #20
0cc5c                 | LR__1028
0cc5c     14 4E 05 F1 | 	add	fp, #20
0cc60     A7 26 02 FB | 	rdlong	local05, fp
0cc64     14 4E 85 F1 | 	sub	fp, #20
0cc68     00 27 56 F2 | 	cmps	local05, #256 wc
0cc6c     A8 00 90 3D |  if_ae	jmp	#LR__1029
0cc70     20 4E 05 F1 | 	add	fp, #32
0cc74     A7 2C 02 FB | 	rdlong	local08, fp
0cc78     09 2C 66 F0 | 	shl	local08, #9
0cc7c     0C 00 00 FF 
0cc80     D8 E4 05 F1 | 	add	objptr, ##6360
0cc84     F2 2C 02 F1 | 	add	local08, objptr
0cc88     0C 4E 85 F1 | 	sub	fp, #12
0cc8c     A7 2A 02 FB | 	rdlong	local07, fp
0cc90     01 2A 66 F0 | 	shl	local07, #1
0cc94     16 2B 02 F1 | 	add	local07, local08
0cc98     14 4E 05 F1 | 	add	fp, #20
0cc9c     A7 12 02 FB | 	rdlong	arg01, fp
0cca0     28 4E 85 F1 | 	sub	fp, #40
0cca4     0C 00 00 FF 
0cca8     D8 E4 85 F1 | 	sub	objptr, ##6360
0ccac     01 14 06 F6 | 	mov	arg02, #1
0ccb0     28 51 B1 FD | 	call	#__system___float_tointeger
0ccb4     15 FB 51 FC | 	wrword	result1, local07
0ccb8     28 4E 05 F1 | 	add	fp, #40
0ccbc     A7 12 02 FB | 	rdlong	arg01, fp
0ccc0     30 4E 05 F1 | 	add	fp, #48
0ccc4     A7 14 02 FB | 	rdlong	arg02, fp
0ccc8     58 4E 85 F1 | 	sub	fp, #88
0cccc     1F 14 E6 F4 | 	bitnot	arg02, #31
0ccd0     70 48 B1 FD | 	call	#__system___float_add
0ccd4     28 4E 05 F1 | 	add	fp, #40
0ccd8     A7 FA 61 FC | 	wrlong	result1, fp
0ccdc     28 4E 85 F1 | 	sub	fp, #40
0cce0     FD 12 02 F6 | 	mov	arg01, result1
0cce4     00 14 06 F6 | 	mov	arg02, #0
0cce8     01 16 06 F6 | 	mov	arg03, #1
0ccec     58 50 B1 FD | 	call	#__system___float_cmp
0ccf0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ccf4     28 4E 05 C1 |  if_b	add	fp, #40
0ccf8     A7 00 68 CC |  if_b	wrlong	#0, fp
0ccfc     28 4E 85 C1 |  if_b	sub	fp, #40
0cd00     14 4E 05 F1 | 	add	fp, #20
0cd04     A7 2C 02 FB | 	rdlong	local08, fp
0cd08     01 2C 06 F1 | 	add	local08, #1
0cd0c     A7 2C 62 FC | 	wrlong	local08, fp
0cd10     14 4E 85 F1 | 	sub	fp, #20
0cd14     44 FF 9F FD | 	jmp	#LR__1028
0cd18                 | LR__1029
0cd18     20 4E 05 F1 | 	add	fp, #32
0cd1c     A7 26 02 FB | 	rdlong	local05, fp
0cd20     20 4E 85 F1 | 	sub	fp, #32
0cd24     09 26 66 F0 | 	shl	local05, #9
0cd28     0C 00 00 FF 
0cd2c     D8 E4 05 F1 | 	add	objptr, ##6360
0cd30     F2 26 02 F1 | 	add	local05, objptr
0cd34     FE 27 06 F1 | 	add	local05, #510
0cd38     13 01 58 FC | 	wrword	#0, local05
0cd3c     0C 00 00 FF 
0cd40     D8 E4 85 F1 | 	sub	objptr, ##6360
0cd44                 | LR__1030
0cd44     20 4E 05 F1 | 	add	fp, #32
0cd48     A7 26 02 FB | 	rdlong	local05, fp
0cd4c     20 4E 85 F1 | 	sub	fp, #32
0cd50     09 26 66 F0 | 	shl	local05, #9
0cd54     0C 00 00 FF 
0cd58     D8 E4 05 F1 | 	add	objptr, ##6360
0cd5c     F2 26 02 F1 | 	add	local05, objptr
0cd60     FE 27 06 F1 | 	add	local05, #510
0cd64     13 01 58 FC | 	wrword	#0, local05
0cd68     0C 00 00 FF 
0cd6c     D8 E4 85 F1 | 	sub	objptr, ##6360
0cd70                 | LR__1031
0cd70     A7 F0 03 F6 | 	mov	ptra, fp
0cd74     B2 00 A0 FD | 	call	#popregs_
0cd78                 | _do_defenv_ret
0cd78     2D 00 64 FD | 	ret
0cd7c                 | 
0cd7c                 | ' 
0cd7c                 | ' 
0cd7c                 | ' sub do_play
0cd7c                 | _do_play
0cd7c     06 4A 05 F6 | 	mov	COUNT_, #6
0cd80     A8 00 A0 FD | 	call	#pushregs_
0cd84     7C F0 07 F1 | 	add	ptra, #124
0cd88     68 4E 05 F1 | 	add	fp, #104
0cd8c     AB CB A1 FF 
0cd90     A7 D6 6B FC | 	wrlong	##1133991915, fp
0cd94                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0cd94                 | ' 
0cd94                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0cd94     64 4E 85 F1 | 	sub	fp, #100
0cd98     A7 00 68 FC | 	wrlong	#0, fp
0cd9c     97 18 48 FB | 	callpa	#(@LR__1041-@LR__1040)>>2,fcache_load_ptr_
0cda0                 | LR__1040
0cda0     A7 16 02 FB | 	rdlong	arg03, fp
0cda4     02 16 66 F0 | 	shl	arg03, #2
0cda8     34 4E 05 F1 | 	add	fp, #52
0cdac     A7 16 02 F1 | 	add	arg03, fp
0cdb0     00 00 E0 FF 
0cdb4     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0cdb8     34 4E 85 F1 | 	sub	fp, #52
0cdbc     A7 1E 02 FB | 	rdlong	local01, fp
0cdc0     01 1E 06 F1 | 	add	local01, #1
0cdc4     A7 1E 62 FC | 	wrlong	local01, fp
0cdc8     09 1E 56 F2 | 	cmps	local01, #9 wc
0cdcc     D0 FF 9F CD |  if_b	jmp	#LR__1040
0cdd0                 | LR__1041
0cdd0     04 4E 85 F1 | 	sub	fp, #4
0cdd4     4A 00 00 FF 
0cdd8     B0 E4 05 F1 | 	add	objptr, ##38064
0cddc     F2 20 02 FB | 	rdlong	local02, objptr
0cde0     10 23 02 F6 | 	mov	local03, local02
0cde4     01 22 66 F0 | 	shl	local03, #1
0cde8     10 23 02 F1 | 	add	local03, local02
0cdec     02 22 66 F0 | 	shl	local03, #2
0cdf0     03 00 00 FF 
0cdf4     04 E4 85 F1 | 	sub	objptr, ##1540
0cdf8     F2 22 02 F1 | 	add	local03, objptr
0cdfc     11 25 02 FB | 	rdlong	local04, local03
0ce00     A7 24 62 FC | 	wrlong	local04, fp
0ce04                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0ce04                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0ce04                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce04                 | ' for i=numpar to 1 step -1 
0ce04     04 4E 05 F1 | 	add	fp, #4
0ce08     A7 24 62 FC | 	wrlong	local04, fp
0ce0c     04 4E 85 F1 | 	sub	fp, #4
0ce10     47 00 00 FF 
0ce14     AC E4 85 F1 | 	sub	objptr, ##36524
0ce18                 | LR__1042
0ce18     7C DA BF FD | 	call	#_pop
0ce1c     5C 4E 05 F1 | 	add	fp, #92
0ce20     A7 FA 61 FC | 	wrlong	result1, fp
0ce24     04 4E 05 F1 | 	add	fp, #4
0ce28     A7 FC 61 FC | 	wrlong	result2, fp
0ce2c     04 4E 05 F1 | 	add	fp, #4
0ce30     A7 FE 61 FC | 	wrlong	result3, fp
0ce34     60 4E 85 F1 | 	sub	fp, #96
0ce38     A7 22 02 FB | 	rdlong	local03, fp
0ce3c     01 22 86 F1 | 	sub	local03, #1
0ce40     02 22 66 F0 | 	shl	local03, #2
0ce44     34 4E 05 F1 | 	add	fp, #52
0ce48     A7 22 02 F1 | 	add	local03, fp
0ce4c     24 4E 05 F1 | 	add	fp, #36
0ce50     A7 26 02 F6 | 	mov	local05, fp
0ce54     13 13 02 F6 | 	mov	arg01, local05
0ce58     5C 4E 85 F1 | 	sub	fp, #92
0ce5c     80 67 B0 FD | 	call	#_converttofloat
0ce60     11 FB 61 FC | 	wrlong	result1, local03
0ce64     04 4E 05 F1 | 	add	fp, #4
0ce68     A7 1E 02 FB | 	rdlong	local01, fp
0ce6c     01 1E 86 F1 | 	sub	local01, #1
0ce70     A7 1E 62 FC | 	wrlong	local01, fp
0ce74     04 4E 85 F1 | 	sub	fp, #4
0ce78     01 1E 56 F2 | 	cmps	local01, #1 wc
0ce7c     98 FF 9F 3D |  if_ae	jmp	#LR__1042
0ce80                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0ce80     38 4E 05 F1 | 	add	fp, #56
0ce84     A7 12 02 FB | 	rdlong	arg01, fp
0ce88     38 4E 85 F1 | 	sub	fp, #56
0ce8c     00 14 06 F6 | 	mov	arg02, #0
0ce90     01 16 06 F6 | 	mov	arg03, #1
0ce94     B0 4E B1 FD | 	call	#__system___float_cmp
0ce98     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce9c     0C 4E 05 C1 |  if_b	add	fp, #12
0cea0     A7 00 68 CC |  if_b	wrlong	#0, fp
0cea4     0C 4E 85 C1 |  if_b	sub	fp, #12
0cea8     20 00 90 CD |  if_b	jmp	#LR__1043
0ceac     38 4E 05 F1 | 	add	fp, #56
0ceb0     A7 12 02 FB | 	rdlong	arg01, fp
0ceb4     38 4E 85 F1 | 	sub	fp, #56
0ceb8     01 14 06 F6 | 	mov	arg02, #1
0cebc     1C 4F B1 FD | 	call	#__system___float_tointeger
0cec0     0C 4E 05 F1 | 	add	fp, #12
0cec4     A7 FA 61 FC | 	wrlong	result1, fp
0cec8     0C 4E 85 F1 | 	sub	fp, #12
0cecc                 | LR__1043
0cecc                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0cecc     3C 4E 05 F1 | 	add	fp, #60
0ced0     A7 12 02 FB | 	rdlong	arg01, fp
0ced4     3C 4E 85 F1 | 	sub	fp, #60
0ced8     00 14 06 F6 | 	mov	arg02, #0
0cedc     01 16 06 F6 | 	mov	arg03, #1
0cee0     64 4E B1 FD | 	call	#__system___float_cmp
0cee4     00 FA 55 F2 | 	cmps	result1, #0 wc
0cee8     40 00 90 3D |  if_ae	jmp	#LR__1044
0ceec     0C 4E 05 F1 | 	add	fp, #12
0cef0     A7 20 02 FB | 	rdlong	local02, fp
0cef4     10 23 02 F6 | 	mov	local03, local02
0cef8     01 22 66 F0 | 	shl	local03, #1
0cefc     10 23 02 F1 | 	add	local03, local02
0cf00     03 22 66 F0 | 	shl	local03, #3
0cf04     14 00 00 FF 
0cf08     68 E5 05 F1 | 	add	objptr, ##10600
0cf0c     F2 22 02 F1 | 	add	local03, objptr
0cf10     11 23 02 FB | 	rdlong	local03, local03
0cf14     60 4E 05 F1 | 	add	fp, #96
0cf18     A7 22 62 FC | 	wrlong	local03, fp
0cf1c     6C 4E 85 F1 | 	sub	fp, #108
0cf20     14 00 00 FF 
0cf24     68 E5 85 F1 | 	sub	objptr, ##10600
0cf28     44 00 90 FD | 	jmp	#LR__1045
0cf2c                 | LR__1044
0cf2c     3C 4E 05 F1 | 	add	fp, #60
0cf30     A7 24 02 FB | 	rdlong	local04, fp
0cf34     30 4E 05 F1 | 	add	fp, #48
0cf38     A7 24 62 FC | 	wrlong	local04, fp
0cf3c     60 4E 85 F1 | 	sub	fp, #96
0cf40     A7 20 02 FB | 	rdlong	local02, fp
0cf44     10 23 02 F6 | 	mov	local03, local02
0cf48     01 22 66 F0 | 	shl	local03, #1
0cf4c     10 23 02 F1 | 	add	local03, local02
0cf50     03 22 66 F0 | 	shl	local03, #3
0cf54     14 00 00 FF 
0cf58     68 E5 05 F1 | 	add	objptr, ##10600
0cf5c     F2 22 02 F1 | 	add	local03, objptr
0cf60     0C 4E 85 F1 | 	sub	fp, #12
0cf64     11 25 62 FC | 	wrlong	local04, local03
0cf68     14 00 00 FF 
0cf6c     68 E5 85 F1 | 	sub	objptr, ##10600
0cf70                 | LR__1045
0cf70                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0cf70     44 4E 05 F1 | 	add	fp, #68
0cf74     A7 12 02 FB | 	rdlong	arg01, fp
0cf78     44 4E 85 F1 | 	sub	fp, #68
0cf7c     00 14 06 F6 | 	mov	arg02, #0
0cf80     01 16 06 F6 | 	mov	arg03, #1
0cf84     C0 4D B1 FD | 	call	#__system___float_cmp
0cf88     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf8c     24 00 90 CD |  if_b	jmp	#LR__1046
0cf90     44 4E 05 F1 | 	add	fp, #68
0cf94     A7 12 02 FB | 	rdlong	arg01, fp
0cf98     44 4E 85 F1 | 	sub	fp, #68
0cf9c     89 C1 20 FF 
0cfa0     6F 14 06 F6 | 	mov	arg02, ##1099108975
0cfa4     01 16 66 F6 | 	neg	arg03, #1
0cfa8     9C 4D B1 FD | 	call	#__system___float_cmp
0cfac     01 FA 55 F2 | 	cmps	result1, #1 wc
0cfb0     44 00 90 CD |  if_b	jmp	#LR__1047
0cfb4                 | LR__1046
0cfb4     0C 4E 05 F1 | 	add	fp, #12
0cfb8     A7 20 02 FB | 	rdlong	local02, fp
0cfbc     10 23 02 F6 | 	mov	local03, local02
0cfc0     01 22 66 F0 | 	shl	local03, #1
0cfc4     10 23 02 F1 | 	add	local03, local02
0cfc8     03 22 66 F0 | 	shl	local03, #3
0cfcc     14 00 00 FF 
0cfd0     68 E5 05 F1 | 	add	objptr, ##10600
0cfd4     F2 22 02 F1 | 	add	local03, objptr
0cfd8     0C 22 06 F1 | 	add	local03, #12
0cfdc     11 23 02 FB | 	rdlong	local03, local03
0cfe0     68 4E 05 F1 | 	add	fp, #104
0cfe4     A7 22 62 FC | 	wrlong	local03, fp
0cfe8     74 4E 85 F1 | 	sub	fp, #116
0cfec     14 00 00 FF 
0cff0     68 E5 85 F1 | 	sub	objptr, ##10600
0cff4     48 00 90 FD | 	jmp	#LR__1048
0cff8                 | LR__1047
0cff8     44 4E 05 F1 | 	add	fp, #68
0cffc     A7 24 02 FB | 	rdlong	local04, fp
0d000     30 4E 05 F1 | 	add	fp, #48
0d004     A7 24 62 FC | 	wrlong	local04, fp
0d008     68 4E 85 F1 | 	sub	fp, #104
0d00c     A7 20 02 FB | 	rdlong	local02, fp
0d010     10 23 02 F6 | 	mov	local03, local02
0d014     01 22 66 F0 | 	shl	local03, #1
0d018     10 23 02 F1 | 	add	local03, local02
0d01c     03 22 66 F0 | 	shl	local03, #3
0d020     14 00 00 FF 
0d024     68 E5 05 F1 | 	add	objptr, ##10600
0d028     F2 22 02 F1 | 	add	local03, objptr
0d02c     0C 4E 85 F1 | 	sub	fp, #12
0d030     0C 22 06 F1 | 	add	local03, #12
0d034     11 25 62 FC | 	wrlong	local04, local03
0d038     14 00 00 FF 
0d03c     68 E5 85 F1 | 	sub	objptr, ##10600
0d040                 | LR__1048
0d040                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0d040     48 4E 05 F1 | 	add	fp, #72
0d044     A7 12 02 FB | 	rdlong	arg01, fp
0d048     48 4E 85 F1 | 	sub	fp, #72
0d04c     00 14 06 F6 | 	mov	arg02, #0
0d050     01 16 06 F6 | 	mov	arg03, #1
0d054     F0 4C B1 FD | 	call	#__system___float_cmp
0d058     00 FA 55 F2 | 	cmps	result1, #0 wc
0d05c     24 00 90 CD |  if_b	jmp	#LR__1049
0d060     48 4E 05 F1 | 	add	fp, #72
0d064     A7 12 02 FB | 	rdlong	arg01, fp
0d068     48 4E 85 F1 | 	sub	fp, #72
0d06c     00 80 20 FF 
0d070     00 14 06 F6 | 	mov	arg02, ##1090519040
0d074     01 16 66 F6 | 	neg	arg03, #1
0d078     CC 4C B1 FD | 	call	#__system___float_cmp
0d07c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d080     48 00 90 CD |  if_b	jmp	#LR__1050
0d084                 | LR__1049
0d084     0C 4E 05 F1 | 	add	fp, #12
0d088     A7 22 02 FB | 	rdlong	local03, fp
0d08c     11 27 02 F6 | 	mov	local05, local03
0d090     01 26 66 F0 | 	shl	local05, #1
0d094     11 27 02 F1 | 	add	local05, local03
0d098     03 26 66 F0 | 	shl	local05, #3
0d09c     14 00 00 FF 
0d0a0     68 E5 05 F1 | 	add	objptr, ##10600
0d0a4     F2 26 02 F1 | 	add	local05, objptr
0d0a8     04 26 06 F1 | 	add	local05, #4
0d0ac     13 27 C2 FA | 	rdbyte	local05, local05
0d0b0     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d0b4     14 4E 05 F1 | 	add	fp, #20
0d0b8     A7 24 62 FC | 	wrlong	local04, fp
0d0bc     20 4E 85 F1 | 	sub	fp, #32
0d0c0     14 00 00 FF 
0d0c4     68 E5 85 F1 | 	sub	objptr, ##10600
0d0c8     54 00 90 FD | 	jmp	#LR__1051
0d0cc                 | LR__1050
0d0cc     48 4E 05 F1 | 	add	fp, #72
0d0d0     A7 12 02 FB | 	rdlong	arg01, fp
0d0d4     48 4E 85 F1 | 	sub	fp, #72
0d0d8     01 14 06 F6 | 	mov	arg02, #1
0d0dc     FC 4C B1 FD | 	call	#__system___float_tointeger
0d0e0     20 4E 05 F1 | 	add	fp, #32
0d0e4     A7 FA 61 FC | 	wrlong	result1, fp
0d0e8     14 4E 85 F1 | 	sub	fp, #20
0d0ec     A7 20 02 FB | 	rdlong	local02, fp
0d0f0     10 23 02 F6 | 	mov	local03, local02
0d0f4     01 22 66 F0 | 	shl	local03, #1
0d0f8     10 23 02 F1 | 	add	local03, local02
0d0fc     03 22 66 F0 | 	shl	local03, #3
0d100     14 00 00 FF 
0d104     68 E5 05 F1 | 	add	objptr, ##10600
0d108     F2 22 02 F1 | 	add	local03, objptr
0d10c     0C 4E 85 F1 | 	sub	fp, #12
0d110     04 22 06 F1 | 	add	local03, #4
0d114     11 FB 41 FC | 	wrbyte	result1, local03
0d118     14 00 00 FF 
0d11c     68 E5 85 F1 | 	sub	objptr, ##10600
0d120                 | LR__1051
0d120                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0d120     4C 4E 05 F1 | 	add	fp, #76
0d124     A7 12 02 FB | 	rdlong	arg01, fp
0d128     4C 4E 85 F1 | 	sub	fp, #76
0d12c     00 14 06 F6 | 	mov	arg02, #0
0d130     01 16 06 F6 | 	mov	arg03, #1
0d134     10 4C B1 FD | 	call	#__system___float_cmp
0d138     00 FA 55 F2 | 	cmps	result1, #0 wc
0d13c     24 00 90 CD |  if_b	jmp	#LR__1052
0d140     4C 4E 05 F1 | 	add	fp, #76
0d144     A7 12 02 FB | 	rdlong	arg01, fp
0d148     4C 4E 85 F1 | 	sub	fp, #76
0d14c     00 80 20 FF 
0d150     00 14 06 F6 | 	mov	arg02, ##1090519040
0d154     01 16 66 F6 | 	neg	arg03, #1
0d158     EC 4B B1 FD | 	call	#__system___float_cmp
0d15c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d160     48 00 90 CD |  if_b	jmp	#LR__1053
0d164                 | LR__1052
0d164     0C 4E 05 F1 | 	add	fp, #12
0d168     A7 22 02 FB | 	rdlong	local03, fp
0d16c     11 27 02 F6 | 	mov	local05, local03
0d170     01 26 66 F0 | 	shl	local05, #1
0d174     11 27 02 F1 | 	add	local05, local03
0d178     03 26 66 F0 | 	shl	local05, #3
0d17c     14 00 00 FF 
0d180     68 E5 05 F1 | 	add	objptr, ##10600
0d184     F2 26 02 F1 | 	add	local05, objptr
0d188     05 26 06 F1 | 	add	local05, #5
0d18c     13 27 C2 FA | 	rdbyte	local05, local05
0d190     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d194     18 4E 05 F1 | 	add	fp, #24
0d198     A7 24 62 FC | 	wrlong	local04, fp
0d19c     24 4E 85 F1 | 	sub	fp, #36
0d1a0     14 00 00 FF 
0d1a4     68 E5 85 F1 | 	sub	objptr, ##10600
0d1a8     54 00 90 FD | 	jmp	#LR__1054
0d1ac                 | LR__1053
0d1ac     4C 4E 05 F1 | 	add	fp, #76
0d1b0     A7 12 02 FB | 	rdlong	arg01, fp
0d1b4     4C 4E 85 F1 | 	sub	fp, #76
0d1b8     01 14 06 F6 | 	mov	arg02, #1
0d1bc     1C 4C B1 FD | 	call	#__system___float_tointeger
0d1c0     24 4E 05 F1 | 	add	fp, #36
0d1c4     A7 FA 61 FC | 	wrlong	result1, fp
0d1c8     18 4E 85 F1 | 	sub	fp, #24
0d1cc     A7 20 02 FB | 	rdlong	local02, fp
0d1d0     10 23 02 F6 | 	mov	local03, local02
0d1d4     01 22 66 F0 | 	shl	local03, #1
0d1d8     10 23 02 F1 | 	add	local03, local02
0d1dc     03 22 66 F0 | 	shl	local03, #3
0d1e0     14 00 00 FF 
0d1e4     68 E5 05 F1 | 	add	objptr, ##10600
0d1e8     F2 22 02 F1 | 	add	local03, objptr
0d1ec     0C 4E 85 F1 | 	sub	fp, #12
0d1f0     05 22 06 F1 | 	add	local03, #5
0d1f4     11 FB 41 FC | 	wrbyte	result1, local03
0d1f8     14 00 00 FF 
0d1fc     68 E5 85 F1 | 	sub	objptr, ##10600
0d200                 | LR__1054
0d200                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0d200     50 4E 05 F1 | 	add	fp, #80
0d204     A7 12 02 FB | 	rdlong	arg01, fp
0d208     50 4E 85 F1 | 	sub	fp, #80
0d20c     00 14 06 F6 | 	mov	arg02, #0
0d210     01 16 06 F6 | 	mov	arg03, #1
0d214     30 4B B1 FD | 	call	#__system___float_cmp
0d218     00 FA 55 F2 | 	cmps	result1, #0 wc
0d21c     24 00 90 CD |  if_b	jmp	#LR__1055
0d220     50 4E 05 F1 | 	add	fp, #80
0d224     A7 12 02 FB | 	rdlong	arg01, fp
0d228     50 4E 85 F1 | 	sub	fp, #80
0d22c     00 3D 22 FF 
0d230     00 14 06 F6 | 	mov	arg02, ##1148846080
0d234     01 16 66 F6 | 	neg	arg03, #1
0d238     0C 4B B1 FD | 	call	#__system___float_cmp
0d23c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d240     44 00 90 CD |  if_b	jmp	#LR__1056
0d244                 | LR__1055
0d244     0C 4E 05 F1 | 	add	fp, #12
0d248     A7 20 02 FB | 	rdlong	local02, fp
0d24c     10 23 02 F6 | 	mov	local03, local02
0d250     01 22 66 F0 | 	shl	local03, #1
0d254     10 23 02 F1 | 	add	local03, local02
0d258     03 22 66 F0 | 	shl	local03, #3
0d25c     14 00 00 FF 
0d260     68 E5 05 F1 | 	add	objptr, ##10600
0d264     F2 22 02 F1 | 	add	local03, objptr
0d268     08 22 06 F1 | 	add	local03, #8
0d26c     11 25 02 FB | 	rdlong	local04, local03
0d270     6C 4E 05 F1 | 	add	fp, #108
0d274     A7 24 62 FC | 	wrlong	local04, fp
0d278     78 4E 85 F1 | 	sub	fp, #120
0d27c     14 00 00 FF 
0d280     68 E5 85 F1 | 	sub	objptr, ##10600
0d284     48 00 90 FD | 	jmp	#LR__1057
0d288                 | LR__1056
0d288     50 4E 05 F1 | 	add	fp, #80
0d28c     A7 24 02 FB | 	rdlong	local04, fp
0d290     28 4E 05 F1 | 	add	fp, #40
0d294     A7 24 62 FC | 	wrlong	local04, fp
0d298     6C 4E 85 F1 | 	sub	fp, #108
0d29c     A7 20 02 FB | 	rdlong	local02, fp
0d2a0     10 23 02 F6 | 	mov	local03, local02
0d2a4     01 22 66 F0 | 	shl	local03, #1
0d2a8     10 23 02 F1 | 	add	local03, local02
0d2ac     03 22 66 F0 | 	shl	local03, #3
0d2b0     14 00 00 FF 
0d2b4     68 E5 05 F1 | 	add	objptr, ##10600
0d2b8     F2 22 02 F1 | 	add	local03, objptr
0d2bc     0C 4E 85 F1 | 	sub	fp, #12
0d2c0     08 22 06 F1 | 	add	local03, #8
0d2c4     11 25 62 FC | 	wrlong	local04, local03
0d2c8     14 00 00 FF 
0d2cc     68 E5 85 F1 | 	sub	objptr, ##10600
0d2d0                 | LR__1057
0d2d0                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0d2d0     40 4E 05 F1 | 	add	fp, #64
0d2d4     A7 12 02 FB | 	rdlong	arg01, fp
0d2d8     40 4E 85 F1 | 	sub	fp, #64
0d2dc     00 14 06 F6 | 	mov	arg02, #0
0d2e0     01 16 06 F6 | 	mov	arg03, #1
0d2e4     60 4A B1 FD | 	call	#__system___float_cmp
0d2e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d2ec     24 00 90 CD |  if_b	jmp	#LR__1058
0d2f0     40 4E 05 F1 | 	add	fp, #64
0d2f4     A7 12 02 FB | 	rdlong	arg01, fp
0d2f8     40 4E 85 F1 | 	sub	fp, #64
0d2fc     20 0E 23 FF 
0d300     00 14 06 F6 | 	mov	arg02, ##1176256512
0d304     01 16 66 F6 | 	neg	arg03, #1
0d308     3C 4A B1 FD | 	call	#__system___float_cmp
0d30c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d310     44 00 90 CD |  if_b	jmp	#LR__1059
0d314                 | LR__1058
0d314     0C 4E 05 F1 | 	add	fp, #12
0d318     A7 22 02 FB | 	rdlong	local03, fp
0d31c     11 25 02 F6 | 	mov	local04, local03
0d320     01 24 66 F0 | 	shl	local04, #1
0d324     11 25 02 F1 | 	add	local04, local03
0d328     03 24 66 F0 | 	shl	local04, #3
0d32c     14 00 00 FF 
0d330     68 E5 05 F1 | 	add	objptr, ##10600
0d334     F2 24 02 F1 | 	add	local04, objptr
0d338     06 24 06 F1 | 	add	local04, #6
0d33c     12 25 E2 FA | 	rdword	local04, local04
0d340     1C 4E 05 F1 | 	add	fp, #28
0d344     A7 24 62 FC | 	wrlong	local04, fp
0d348     28 4E 85 F1 | 	sub	fp, #40
0d34c     14 00 00 FF 
0d350     68 E5 85 F1 | 	sub	objptr, ##10600
0d354     54 00 90 FD | 	jmp	#LR__1060
0d358                 | LR__1059
0d358     40 4E 05 F1 | 	add	fp, #64
0d35c     A7 12 02 FB | 	rdlong	arg01, fp
0d360     40 4E 85 F1 | 	sub	fp, #64
0d364     01 14 06 F6 | 	mov	arg02, #1
0d368     70 4A B1 FD | 	call	#__system___float_tointeger
0d36c     28 4E 05 F1 | 	add	fp, #40
0d370     A7 FA 61 FC | 	wrlong	result1, fp
0d374     1C 4E 85 F1 | 	sub	fp, #28
0d378     A7 20 02 FB | 	rdlong	local02, fp
0d37c     10 23 02 F6 | 	mov	local03, local02
0d380     01 22 66 F0 | 	shl	local03, #1
0d384     10 23 02 F1 | 	add	local03, local02
0d388     03 22 66 F0 | 	shl	local03, #3
0d38c     14 00 00 FF 
0d390     68 E5 05 F1 | 	add	objptr, ##10600
0d394     F2 22 02 F1 | 	add	local03, objptr
0d398     0C 4E 85 F1 | 	sub	fp, #12
0d39c     06 22 06 F1 | 	add	local03, #6
0d3a0     11 FB 51 FC | 	wrword	result1, local03
0d3a4     14 00 00 FF 
0d3a8     68 E5 85 F1 | 	sub	objptr, ##10600
0d3ac                 | LR__1060
0d3ac                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0d3ac     54 4E 05 F1 | 	add	fp, #84
0d3b0     A7 12 02 FB | 	rdlong	arg01, fp
0d3b4     54 4E 85 F1 | 	sub	fp, #84
0d3b8     00 C0 5F FF 
0d3bc     00 14 06 F6 | 	mov	arg02, ##-1082130432
0d3c0     01 16 06 F6 | 	mov	arg03, #1
0d3c4     80 49 B1 FD | 	call	#__system___float_cmp
0d3c8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3cc     24 00 90 CD |  if_b	jmp	#LR__1061
0d3d0     54 4E 05 F1 | 	add	fp, #84
0d3d4     A7 12 02 FB | 	rdlong	arg01, fp
0d3d8     54 4E 85 F1 | 	sub	fp, #84
0d3dc     00 C0 1F FF 
0d3e0     00 14 06 F6 | 	mov	arg02, ##1065353216
0d3e4     01 16 66 F6 | 	neg	arg03, #1
0d3e8     5C 49 B1 FD | 	call	#__system___float_cmp
0d3ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0d3f0     44 00 90 CD |  if_b	jmp	#LR__1062
0d3f4                 | LR__1061
0d3f4     0C 4E 05 F1 | 	add	fp, #12
0d3f8     A7 20 02 FB | 	rdlong	local02, fp
0d3fc     10 23 02 F6 | 	mov	local03, local02
0d400     01 22 66 F0 | 	shl	local03, #1
0d404     10 23 02 F1 | 	add	local03, local02
0d408     03 22 66 F0 | 	shl	local03, #3
0d40c     14 00 00 FF 
0d410     68 E5 05 F1 | 	add	objptr, ##10600
0d414     F2 22 02 F1 | 	add	local03, objptr
0d418     10 22 06 F1 | 	add	local03, #16
0d41c     11 25 02 FB | 	rdlong	local04, local03
0d420     64 4E 05 F1 | 	add	fp, #100
0d424     A7 24 62 FC | 	wrlong	local04, fp
0d428     70 4E 85 F1 | 	sub	fp, #112
0d42c     14 00 00 FF 
0d430     68 E5 85 F1 | 	sub	objptr, ##10600
0d434     48 00 90 FD | 	jmp	#LR__1063
0d438                 | LR__1062
0d438     54 4E 05 F1 | 	add	fp, #84
0d43c     A7 26 02 FB | 	rdlong	local05, fp
0d440     1C 4E 05 F1 | 	add	fp, #28
0d444     A7 26 62 FC | 	wrlong	local05, fp
0d448     64 4E 85 F1 | 	sub	fp, #100
0d44c     A7 20 02 FB | 	rdlong	local02, fp
0d450     10 23 02 F6 | 	mov	local03, local02
0d454     01 22 66 F0 | 	shl	local03, #1
0d458     10 23 02 F1 | 	add	local03, local02
0d45c     03 22 66 F0 | 	shl	local03, #3
0d460     14 00 00 FF 
0d464     68 E5 05 F1 | 	add	objptr, ##10600
0d468     F2 22 02 F1 | 	add	local03, objptr
0d46c     0C 4E 85 F1 | 	sub	fp, #12
0d470     10 22 06 F1 | 	add	local03, #16
0d474     11 27 62 FC | 	wrlong	local05, local03
0d478     14 00 00 FF 
0d47c     68 E5 85 F1 | 	sub	objptr, ##10600
0d480                 | LR__1063
0d480                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0d480     58 4E 05 F1 | 	add	fp, #88
0d484     A7 12 02 FB | 	rdlong	arg01, fp
0d488     58 4E 85 F1 | 	sub	fp, #88
0d48c     00 14 06 F6 | 	mov	arg02, #0
0d490     01 16 06 F6 | 	mov	arg03, #1
0d494     B0 48 B1 FD | 	call	#__system___float_cmp
0d498     00 FA 55 F2 | 	cmps	result1, #0 wc
0d49c     24 00 90 CD |  if_b	jmp	#LR__1064
0d4a0     58 4E 05 F1 | 	add	fp, #88
0d4a4     A7 12 02 FB | 	rdlong	arg01, fp
0d4a8     58 4E 85 F1 | 	sub	fp, #88
0d4ac     80 BF 21 FF 
0d4b0     00 14 06 F6 | 	mov	arg02, ##1132396544
0d4b4     01 16 66 F6 | 	neg	arg03, #1
0d4b8     8C 48 B1 FD | 	call	#__system___float_cmp
0d4bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4c0     44 00 90 CD |  if_b	jmp	#LR__1065
0d4c4                 | LR__1064
0d4c4     0C 4E 05 F1 | 	add	fp, #12
0d4c8     A7 22 02 FB | 	rdlong	local03, fp
0d4cc     11 27 02 F6 | 	mov	local05, local03
0d4d0     01 26 66 F0 | 	shl	local05, #1
0d4d4     11 27 02 F1 | 	add	local05, local03
0d4d8     03 26 66 F0 | 	shl	local05, #3
0d4dc     14 00 00 FF 
0d4e0     68 E5 05 F1 | 	add	objptr, ##10600
0d4e4     F2 26 02 F1 | 	add	local05, objptr
0d4e8     14 26 06 F1 | 	add	local05, #20
0d4ec     13 25 E2 FA | 	rdword	local04, local05
0d4f0     20 4E 05 F1 | 	add	fp, #32
0d4f4     A7 24 62 FC | 	wrlong	local04, fp
0d4f8     2C 4E 85 F1 | 	sub	fp, #44
0d4fc     14 00 00 FF 
0d500     68 E5 85 F1 | 	sub	objptr, ##10600
0d504     54 00 90 FD | 	jmp	#LR__1066
0d508                 | LR__1065
0d508     58 4E 05 F1 | 	add	fp, #88
0d50c     A7 12 02 FB | 	rdlong	arg01, fp
0d510     58 4E 85 F1 | 	sub	fp, #88
0d514     01 14 06 F6 | 	mov	arg02, #1
0d518     C0 48 B1 FD | 	call	#__system___float_tointeger
0d51c     2C 4E 05 F1 | 	add	fp, #44
0d520     A7 FA 61 FC | 	wrlong	result1, fp
0d524     20 4E 85 F1 | 	sub	fp, #32
0d528     A7 20 02 FB | 	rdlong	local02, fp
0d52c     10 23 02 F6 | 	mov	local03, local02
0d530     01 22 66 F0 | 	shl	local03, #1
0d534     10 23 02 F1 | 	add	local03, local02
0d538     03 22 66 F0 | 	shl	local03, #3
0d53c     14 00 00 FF 
0d540     68 E5 05 F1 | 	add	objptr, ##10600
0d544     F2 22 02 F1 | 	add	local03, objptr
0d548     0C 4E 85 F1 | 	sub	fp, #12
0d54c     14 22 06 F1 | 	add	local03, #20
0d550     11 FB 51 FC | 	wrword	result1, local03
0d554     14 00 00 FF 
0d558     68 E5 85 F1 | 	sub	objptr, ##10600
0d55c                 | LR__1066
0d55c     6C 4E 05 F1 | 	add	fp, #108
0d560     A7 14 02 FB | 	rdlong	arg02, fp
0d564     6C 4E 85 F1 | 	sub	fp, #108
0d568     FC 16 20 FF 
0d56c     54 12 06 F6 | 	mov	arg01, ##1076754516
0d570     4C 53 B1 FD | 	call	#__system____builtin_logbase
0d574     FD 24 02 F6 | 	mov	local04, result1
0d578     1E 14 C6 F9 | 	decod	arg02, #30
0d57c     FC 16 20 FF 
0d580     54 12 06 F6 | 	mov	arg01, ##1076754516
0d584     38 53 B1 FD | 	call	#__system____builtin_logbase
0d588     FD 14 02 F6 | 	mov	arg02, result1
0d58c     12 13 02 F6 | 	mov	arg01, local04
0d590     84 45 B1 FD | 	call	#__system___float_div
0d594     FD 12 02 F6 | 	mov	arg01, result1
0d598     00 14 06 F6 | 	mov	arg02, #0
0d59c     3C 48 B1 FD | 	call	#__system___float_tointeger
0d5a0     30 4E 05 F1 | 	add	fp, #48
0d5a4     A7 FA 61 FC | 	wrlong	result1, fp
0d5a8     1E 24 C6 F9 | 	decod	local04, #30
0d5ac     FD 12 02 F6 | 	mov	arg01, result1
0d5b0     30 4E 85 F1 | 	sub	fp, #48
0d5b4     05 12 06 F1 | 	add	arg01, #5
0d5b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5bc     1F 28 C6 C9 |  if_b	decod	local06, #31
0d5c0     00 28 06 36 |  if_ae	mov	local06, #0
0d5c4     48 3F B1 FD | 	call	#__system___float_fromuns
0d5c8     14 FB 61 F5 | 	xor	result1, local06
0d5cc     FD 14 02 F6 | 	mov	arg02, result1
0d5d0     12 13 02 F6 | 	mov	arg01, local04
0d5d4     20 52 B1 FD | 	call	#__system____builtin_powf
0d5d8     FD 12 02 F6 | 	mov	arg01, result1
0d5dc     01 14 06 F6 | 	mov	arg02, #1
0d5e0     F8 47 B1 FD | 	call	#__system___float_tointeger
0d5e4     10 4E 05 F1 | 	add	fp, #16
0d5e8     A7 FA 61 FC | 	wrlong	result1, fp
0d5ec                 | ' skip=round(2^(lfreq+5))
0d5ec                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0d5ec     10 4E 85 F1 | 	sub	fp, #16
0d5f0     40 00 00 FF 
0d5f4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d5f8     30 00 90 CD |  if_b	jmp	#LR__1067
0d5fc     10 4E 05 F1 | 	add	fp, #16
0d600     A7 1E 02 FB | 	rdlong	local01, fp
0d604     0F 25 52 F6 | 	abs	local04, local01 wc
0d608     0F 24 46 F0 | 	shr	local04, #15
0d60c     12 25 82 F6 | 	negc	local04, local04
0d610     0C 4E 85 F1 | 	sub	fp, #12
0d614     A7 24 62 FC | 	wrlong	local04, fp
0d618     0C 4E 05 F1 | 	add	fp, #12
0d61c     40 00 80 FF 
0d620     A7 00 68 FC | 	wrlong	##32768, fp
0d624     10 4E 85 F1 | 	sub	fp, #16
0d628     0C 00 90 FD | 	jmp	#LR__1068
0d62c                 | LR__1067
0d62c     04 4E 05 F1 | 	add	fp, #4
0d630     A7 02 68 FC | 	wrlong	#1, fp
0d634     04 4E 85 F1 | 	sub	fp, #4
0d638                 | LR__1068
0d638     6C 4E 05 F1 | 	add	fp, #108
0d63c     A7 14 02 FB | 	rdlong	arg02, fp
0d640     6C 4E 85 F1 | 	sub	fp, #108
0d644     3E 2C 25 FF 
0d648     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d64c     C8 44 B1 FD | 	call	#__system___float_div
0d650     FD 24 02 F6 | 	mov	local04, result1
0d654     04 4E 05 F1 | 	add	fp, #4
0d658     A7 12 02 FB | 	rdlong	arg01, fp
0d65c     04 4E 85 F1 | 	sub	fp, #4
0d660     09 13 52 F6 | 	abs	arg01, arg01 wc
0d664     1F 28 C6 C9 |  if_b	decod	local06, #31
0d668     00 28 06 36 |  if_ae	mov	local06, #0
0d66c     A0 3E B1 FD | 	call	#__system___float_fromuns
0d670     14 FB 61 F5 | 	xor	result1, local06
0d674     FD 1E 02 F6 | 	mov	local01, result1
0d678     1E 20 C6 F9 | 	decod	local02, #30
0d67c     0D 12 06 F6 | 	mov	arg01, #13
0d680     30 4E 05 F1 | 	add	fp, #48
0d684     A7 26 02 FB | 	rdlong	local05, fp
0d688     30 4E 85 F1 | 	sub	fp, #48
0d68c     13 13 82 F1 | 	sub	arg01, local05
0d690     09 13 52 F6 | 	abs	arg01, arg01 wc
0d694     1F 28 C6 C9 |  if_b	decod	local06, #31
0d698     00 28 06 36 |  if_ae	mov	local06, #0
0d69c     70 3E B1 FD | 	call	#__system___float_fromuns
0d6a0     14 FB 61 F5 | 	xor	result1, local06
0d6a4     FD 14 02 F6 | 	mov	arg02, result1
0d6a8     10 13 02 F6 | 	mov	arg01, local02
0d6ac     48 51 B1 FD | 	call	#__system____builtin_powf
0d6b0     FD 14 02 F6 | 	mov	arg02, result1
0d6b4     0F 13 02 F6 | 	mov	arg01, local01
0d6b8     58 42 B1 FD | 	call	#__system___float_mul
0d6bc     FD 14 02 F6 | 	mov	arg02, result1
0d6c0     12 13 02 F6 | 	mov	arg01, local04
0d6c4     50 44 B1 FD | 	call	#__system___float_div
0d6c8     FD 12 02 F6 | 	mov	arg01, result1
0d6cc     01 14 06 F6 | 	mov	arg02, #1
0d6d0     08 47 B1 FD | 	call	#__system___float_tointeger
0d6d4     34 4E 05 F1 | 	add	fp, #52
0d6d8     A7 FA 61 FC | 	wrlong	result1, fp
0d6dc     34 4E 05 F1 | 	add	fp, #52
0d6e0     A7 12 02 FB | 	rdlong	arg01, fp
0d6e4     10 4E 05 F1 | 	add	fp, #16
0d6e8     A7 14 02 FB | 	rdlong	arg02, fp
0d6ec     78 4E 85 F1 | 	sub	fp, #120
0d6f0     24 44 B1 FD | 	call	#__system___float_div
0d6f4     FD 12 02 F6 | 	mov	arg01, result1
0d6f8     01 14 06 F6 | 	mov	arg02, #1
0d6fc     DC 46 B1 FD | 	call	#__system___float_tointeger
0d700     FD 24 02 F6 | 	mov	local04, result1
0d704     14 4E 05 F1 | 	add	fp, #20
0d708     A7 24 62 FC | 	wrlong	local04, fp
0d70c     5C 4E 05 F1 | 	add	fp, #92
0d710     A7 14 02 FB | 	rdlong	arg02, fp
0d714     70 4E 85 F1 | 	sub	fp, #112
0d718     00 00 23 FF 
0d71c     00 12 06 F6 | 	mov	arg01, ##1174405120
0d720     F0 41 B1 FD | 	call	#__system___float_mul
0d724     FD 12 02 F6 | 	mov	arg01, result1
0d728     01 14 06 F6 | 	mov	arg02, #1
0d72c     AC 46 B1 FD | 	call	#__system___float_tointeger
0d730     0D 24 C6 F9 | 	decod	local04, #13
0d734     FD 24 02 F1 | 	add	local04, result1
0d738     18 4E 05 F1 | 	add	fp, #24
0d73c     A7 24 62 FC | 	wrlong	local04, fp
0d740     5C 4E 05 F1 | 	add	fp, #92
0d744     A7 14 02 FB | 	rdlong	arg02, fp
0d748     74 4E 85 F1 | 	sub	fp, #116
0d74c     00 3D 22 FF 
0d750     00 12 06 F6 | 	mov	arg01, ##1148846080
0d754     BC 41 B1 FD | 	call	#__system___float_mul
0d758     FD 12 02 F6 | 	mov	arg01, result1
0d75c     01 14 06 F6 | 	mov	arg02, #1
0d760     78 46 B1 FD | 	call	#__system___float_tointeger
0d764     1C 4E 05 F1 | 	add	fp, #28
0d768     A7 FA 61 FC | 	wrlong	result1, fp
0d76c     37 00 00 FF 
0d770     40 E4 05 F1 | 	add	objptr, ##28224
0d774     F2 24 02 FB | 	rdlong	local04, objptr
0d778     37 00 00 FF 
0d77c     40 E4 85 F1 | 	sub	objptr, ##28224
0d780     10 4E 85 F1 | 	sub	fp, #16
0d784     A7 20 02 FB | 	rdlong	local02, fp
0d788     06 20 66 F0 | 	shl	local02, #6
0d78c     10 25 02 F1 | 	add	local04, local02
0d790     04 4E 85 F1 | 	sub	fp, #4
0d794     A7 24 62 FC | 	wrlong	local04, fp
0d798                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0d798                 | '  
0d798                 | '   
0d798                 | ' 'print period,skip
0d798                 | ' speed=round(speed_coeff/slen)
0d798                 | ' ipan=8192+round(8192*pan)
0d798                 | ' ivol=round(1000.0*vol)
0d798                 | ' base2=base+64*channel
0d798                 | ' 'skip=round(freq*3.9827219) 
0d798                 | ' if wave <32 then 
0d798     18 4E 05 F1 | 	add	fp, #24
0d79c     A7 24 02 FB | 	rdlong	local04, fp
0d7a0     20 4E 85 F1 | 	sub	fp, #32
0d7a4     20 24 56 F2 | 	cmps	local04, #32 wc
0d7a8     2C 00 90 3D |  if_ae	jmp	#LR__1069
0d7ac     08 4E 05 F1 | 	add	fp, #8
0d7b0     A7 12 02 FB | 	rdlong	arg01, fp
0d7b4     08 12 06 F1 | 	add	arg01, #8
0d7b8     18 4E 05 F1 | 	add	fp, #24
0d7bc     A7 14 02 FB | 	rdlong	arg02, fp
0d7c0     20 4E 85 F1 | 	sub	fp, #32
0d7c4     0B 14 66 F0 | 	shl	arg02, #11
0d7c8     00 00 60 FF 
0d7cc     00 14 06 F1 | 	add	arg02, ##-1073741824
0d7d0     09 15 62 FC | 	wrlong	arg02, arg01
0d7d4     18 00 90 FD | 	jmp	#LR__1070
0d7d8                 | LR__1069
0d7d8     08 4E 05 F1 | 	add	fp, #8
0d7dc     A7 12 02 FB | 	rdlong	arg01, fp
0d7e0     08 4E 85 F1 | 	sub	fp, #8
0d7e4     08 12 06 F1 | 	add	arg01, #8
0d7e8     00 00 E4 FF 
0d7ec     09 01 68 FC | 	wrlong	##-939524096, arg01
0d7f0                 | LR__1070
0d7f0     08 4E 05 F1 | 	add	fp, #8
0d7f4     A7 12 02 FB | 	rdlong	arg01, fp
0d7f8     10 12 06 F1 | 	add	arg01, #16
0d7fc     04 00 80 FF 
0d800     09 01 68 FC | 	wrlong	##2048, arg01
0d804     A7 12 02 FB | 	rdlong	arg01, fp
0d808     0C 12 06 F1 | 	add	arg01, #12
0d80c     09 01 68 FC | 	wrlong	#0, arg01
0d810     A7 12 02 FB | 	rdlong	arg01, fp
0d814     14 12 06 F1 | 	add	arg01, #20
0d818     14 4E 05 F1 | 	add	fp, #20
0d81c     A7 14 02 FB | 	rdlong	arg02, fp
0d820     09 15 52 FC | 	wrword	arg02, arg01
0d824     14 4E 85 F1 | 	sub	fp, #20
0d828     A7 12 02 FB | 	rdlong	arg01, fp
0d82c     16 12 06 F1 | 	add	arg01, #22
0d830     10 4E 05 F1 | 	add	fp, #16
0d834     A7 14 02 FB | 	rdlong	arg02, fp
0d838     09 15 52 FC | 	wrword	arg02, arg01
0d83c                 | ' lpoke base2+16,2048
0d83c                 | ' lpoke base2+12,0
0d83c                 | ' dpoke base2+20,ivol 
0d83c                 | ' dpoke base2+22,ipan 
0d83c                 | ' if wave<32 then
0d83c     08 4E 05 F1 | 	add	fp, #8
0d840     A7 24 02 FB | 	rdlong	local04, fp
0d844     20 4E 85 F1 | 	sub	fp, #32
0d848     20 24 56 F2 | 	cmps	local04, #32 wc
0d84c     38 00 90 3D |  if_ae	jmp	#LR__1071
0d850     08 4E 05 F1 | 	add	fp, #8
0d854     A7 12 02 FB | 	rdlong	arg01, fp
0d858     18 12 06 F1 | 	add	arg01, #24
0d85c     2C 4E 05 F1 | 	add	fp, #44
0d860     A7 14 02 FB | 	rdlong	arg02, fp
0d864     09 15 52 FC | 	wrword	arg02, arg01
0d868     2C 4E 85 F1 | 	sub	fp, #44
0d86c     A7 12 02 FB | 	rdlong	arg01, fp
0d870     1A 12 06 F1 | 	add	arg01, #26
0d874     08 4E 05 F1 | 	add	fp, #8
0d878     A7 14 02 FB | 	rdlong	arg02, fp
0d87c     10 4E 85 F1 | 	sub	fp, #16
0d880     09 15 52 FC | 	wrword	arg02, arg01
0d884     48 00 90 FD | 	jmp	#LR__1072
0d888                 | LR__1071
0d888     08 4E 05 F1 | 	add	fp, #8
0d88c     A7 24 02 FB | 	rdlong	local04, fp
0d890     18 24 06 F1 | 	add	local04, #24
0d894     64 4E 05 F1 | 	add	fp, #100
0d898     A7 14 02 FB | 	rdlong	arg02, fp
0d89c     6C 4E 85 F1 | 	sub	fp, #108
0d8a0     3E 2C 25 FF 
0d8a4     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d8a8     6C 42 B1 FD | 	call	#__system___float_div
0d8ac     FD 12 02 F6 | 	mov	arg01, result1
0d8b0     01 14 06 F6 | 	mov	arg02, #1
0d8b4     24 45 B1 FD | 	call	#__system___float_tointeger
0d8b8     12 FB 51 FC | 	wrword	result1, local04
0d8bc     08 4E 05 F1 | 	add	fp, #8
0d8c0     A7 12 02 FB | 	rdlong	arg01, fp
0d8c4     08 4E 85 F1 | 	sub	fp, #8
0d8c8     1A 12 06 F1 | 	add	arg01, #26
0d8cc     09 01 5A FC | 	wrword	#256, arg01
0d8d0                 | LR__1072
0d8d0     08 4E 05 F1 | 	add	fp, #8
0d8d4     A7 12 02 FB | 	rdlong	arg01, fp
0d8d8     1C 12 06 F1 | 	add	arg01, #28
0d8dc     09 01 68 FC | 	wrlong	#0, arg01
0d8e0     A7 12 02 FB | 	rdlong	arg01, fp
0d8e4     20 12 06 F1 | 	add	arg01, #32
0d8e8     09 01 68 FC | 	wrlong	#0, arg01
0d8ec                 | ' lpoke base2+28,$0000_0000
0d8ec                 | ' lpoke base2+32,0 
0d8ec                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d8ec     1C 4E 05 F1 | 	add	fp, #28
0d8f0     A7 24 02 FB | 	rdlong	local04, fp
0d8f4     24 4E 85 F1 | 	sub	fp, #36
0d8f8     08 24 0E F2 | 	cmp	local04, #8 wz
0d8fc     18 00 90 5D |  if_ne	jmp	#LR__1073
0d900     08 4E 05 F1 | 	add	fp, #8
0d904     A7 12 02 FB | 	rdlong	arg01, fp
0d908     08 4E 85 F1 | 	sub	fp, #8
0d90c     24 12 06 F1 | 	add	arg01, #36
0d910     09 01 68 FC | 	wrlong	#0, arg01
0d914     34 00 90 FD | 	jmp	#LR__1074
0d918                 | LR__1073
0d918     08 4E 05 F1 | 	add	fp, #8
0d91c     A7 12 02 FB | 	rdlong	arg01, fp
0d920     24 12 06 F1 | 	add	arg01, #36
0d924     1C 4E 05 F1 | 	add	fp, #28
0d928     A7 14 02 FB | 	rdlong	arg02, fp
0d92c     24 4E 85 F1 | 	sub	fp, #36
0d930     09 14 66 F0 | 	shl	arg02, #9
0d934     0C 00 00 FF 
0d938     D8 E4 05 F1 | 	add	objptr, ##6360
0d93c     F2 14 02 F1 | 	add	arg02, objptr
0d940     0C 00 00 FF 
0d944     D8 E4 85 F1 | 	sub	objptr, ##6360
0d948     09 15 62 FC | 	wrlong	arg02, arg01
0d94c                 | LR__1074
0d94c     08 4E 05 F1 | 	add	fp, #8
0d950     A7 12 02 FB | 	rdlong	arg01, fp
0d954     28 12 06 F1 | 	add	arg01, #40
0d958     0C 4E 05 F1 | 	add	fp, #12
0d95c     A7 14 02 FB | 	rdlong	arg02, fp
0d960     09 15 62 FC | 	wrlong	arg02, arg01
0d964     0C 4E 85 F1 | 	sub	fp, #12
0d968     A7 12 02 FB | 	rdlong	arg01, fp
0d96c     2C 12 06 F1 | 	add	arg01, #44
0d970     24 4E 05 F1 | 	add	fp, #36
0d974     A7 14 02 FB | 	rdlong	arg02, fp
0d978     09 15 62 FC | 	wrlong	arg02, arg01
0d97c                 | ' lpoke base2+40,speed' speed
0d97c                 | ' lpoke base2+44,sus 'len
0d97c                 | ' 
0d97c                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d97c     04 4E 85 F1 | 	sub	fp, #4
0d980     A7 24 02 FB | 	rdlong	local04, fp
0d984     28 4E 85 F1 | 	sub	fp, #40
0d988     01 24 56 F2 | 	cmps	local04, #1 wc
0d98c     28 4E 05 31 |  if_ae	add	fp, #40
0d990     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d994     28 4E 85 31 |  if_ae	sub	fp, #40
0d998     24 17 B1 3D |  if_ae	call	#__system___waitms
0d99c     A7 F0 03 F6 | 	mov	ptra, fp
0d9a0     B2 00 A0 FD | 	call	#popregs_
0d9a4                 | _do_play_ret
0d9a4     2D 00 64 FD | 	ret
0d9a8                 | 
0d9a8                 | ' 
0d9a8                 | ' sub do_release
0d9a8                 | _do_release
0d9a8     00 4A 05 F6 | 	mov	COUNT_, #0
0d9ac     A8 00 A0 FD | 	call	#pushregs_
0d9b0     10 F0 07 F1 | 	add	ptra, #16
0d9b4     E0 CE BF FD | 	call	#_pop
0d9b8     FF 14 02 F6 | 	mov	arg02, result3
0d9bc     A7 FA 61 FC | 	wrlong	result1, fp
0d9c0     04 4E 05 F1 | 	add	fp, #4
0d9c4     A7 FC 61 FC | 	wrlong	result2, fp
0d9c8     04 4E 05 F1 | 	add	fp, #4
0d9cc     A7 14 62 FC | 	wrlong	arg02, fp
0d9d0     08 4E 85 F1 | 	sub	fp, #8
0d9d4     A7 12 02 F6 | 	mov	arg01, fp
0d9d8     58 5B B0 FD | 	call	#_converttoint
0d9dc     0C 4E 05 F1 | 	add	fp, #12
0d9e0     A7 FA 61 FC | 	wrlong	result1, fp
0d9e4                 | ' t1=pop()
0d9e4                 | ' channel=converttoint(t1)
0d9e4                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d9e4     0C 4E 85 F1 | 	sub	fp, #12
0d9e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d9ec     44 00 90 CD |  if_b	jmp	#LR__1080
0d9f0     0C 4E 05 F1 | 	add	fp, #12
0d9f4     A7 14 02 FB | 	rdlong	arg02, fp
0d9f8     0C 4E 85 F1 | 	sub	fp, #12
0d9fc     08 14 56 F2 | 	cmps	arg02, #8 wc
0da00     30 00 90 3D |  if_ae	jmp	#LR__1080
0da04     37 00 00 FF 
0da08     40 E4 05 F1 | 	add	objptr, ##28224
0da0c     F2 12 02 FB | 	rdlong	arg01, objptr
0da10     37 00 00 FF 
0da14     40 E4 85 F1 | 	sub	objptr, ##28224
0da18     0C 4E 05 F1 | 	add	fp, #12
0da1c     A7 14 02 FB | 	rdlong	arg02, fp
0da20     0C 4E 85 F1 | 	sub	fp, #12
0da24     06 14 66 F0 | 	shl	arg02, #6
0da28     0A 13 02 F1 | 	add	arg01, arg02
0da2c     2C 12 06 F1 | 	add	arg01, #44
0da30     09 FF 69 FC | 	wrlong	#255, arg01
0da34                 | LR__1080
0da34     A7 F0 03 F6 | 	mov	ptra, fp
0da38     B2 00 A0 FD | 	call	#popregs_
0da3c                 | _do_release_ret
0da3c     2D 00 64 FD | 	ret
0da40                 | 
0da40                 | ' 
0da40                 | ' 
0da40                 | ' sub do_defsnd
0da40                 | _do_defsnd
0da40     04 4A 05 F6 | 	mov	COUNT_, #4
0da44     A8 00 A0 FD | 	call	#pushregs_
0da48     88 F0 07 F1 | 	add	ptra, #136
0da4c     4A 00 00 FF 
0da50     B0 E4 05 F1 | 	add	objptr, ##38064
0da54     F2 1A 02 FB | 	rdlong	arg05, objptr
0da58     0D 19 02 F6 | 	mov	arg04, arg05
0da5c     01 18 66 F0 | 	shl	arg04, #1
0da60     0D 19 02 F1 | 	add	arg04, arg05
0da64     02 18 66 F0 | 	shl	arg04, #2
0da68     03 00 00 FF 
0da6c     04 E4 85 F1 | 	sub	objptr, ##1540
0da70     F2 18 02 F1 | 	add	arg04, objptr
0da74     0C 1B 02 FB | 	rdlong	arg05, arg04
0da78     A7 1A 62 FC | 	wrlong	arg05, fp
0da7c                 | ' 
0da7c                 | ' numpar=compiledline(lineptr_e).result.uresult
0da7c                 | ' 
0da7c                 | ' 
0da7c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0da7c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0da7c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0da7c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0da7c                 | ' 
0da7c                 | ' if numpar<2 then return
0da7c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0da80     47 00 00 FF 
0da84     AC E4 85 F1 | 	sub	objptr, ##36524
0da88     94 08 90 CD |  if_b	jmp	#LR__1113
0da8c                 | ' 
0da8c                 | '   
0da8c                 | ' if numpar=2 then
0da8c     A7 1A 02 FB | 	rdlong	arg05, fp
0da90     02 1A 0E F2 | 	cmp	arg05, #2 wz
0da94     A0 03 90 5D |  if_ne	jmp	#LR__1100
0da98     FC CD BF FD | 	call	#_pop
0da9c     FF 1A 02 F6 | 	mov	arg05, result3
0daa0     2C 4E 05 F1 | 	add	fp, #44
0daa4     A7 FA 61 FC | 	wrlong	result1, fp
0daa8     04 4E 05 F1 | 	add	fp, #4
0daac     A7 FC 61 FC | 	wrlong	result2, fp
0dab0     04 4E 05 F1 | 	add	fp, #4
0dab4     A7 1A 62 FC | 	wrlong	arg05, fp
0dab8                 | '   t1=pop()
0dab8                 | '   if t1.result_type=result_string2 then 
0dab8     34 4E 85 F1 | 	sub	fp, #52
0dabc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0dac0     20 00 90 5D |  if_ne	jmp	#LR__1090
0dac4     2C 4E 05 F1 | 	add	fp, #44
0dac8     A7 12 02 FB | 	rdlong	arg01, fp
0dacc     2C 4E 85 F1 | 	sub	fp, #44
0dad0     3C 12 B0 FD | 	call	#_convertstring
0dad4     38 4E 05 F1 | 	add	fp, #56
0dad8     A7 FA 61 FC | 	wrlong	result1, fp
0dadc     38 4E 85 F1 | 	sub	fp, #56
0dae0     58 00 90 FD | 	jmp	#LR__1093
0dae4                 | LR__1090
0dae4     34 4E 05 F1 | 	add	fp, #52
0dae8     A7 1A 02 FB | 	rdlong	arg05, fp
0daec     34 4E 85 F1 | 	sub	fp, #52
0daf0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0daf4     18 00 90 5D |  if_ne	jmp	#LR__1091
0daf8     2C 4E 05 F1 | 	add	fp, #44
0dafc     A7 1A 02 FB | 	rdlong	arg05, fp
0db00     0C 4E 05 F1 | 	add	fp, #12
0db04     A7 1A 62 FC | 	wrlong	arg05, fp
0db08     38 4E 85 F1 | 	sub	fp, #56
0db0c     2C 00 90 FD | 	jmp	#LR__1092
0db10                 | LR__1091
0db10     74 01 00 FF 
0db14     F5 1B 06 F6 | 	mov	arg05, ##@LR__5152
0db18     38 4E 05 F1 | 	add	fp, #56
0db1c     A7 1A 62 FC | 	wrlong	arg05, fp
0db20     0C 4E 85 F1 | 	sub	fp, #12
0db24     A7 12 02 F6 | 	mov	arg01, fp
0db28     2C 4E 85 F1 | 	sub	fp, #44
0db2c     04 5A B0 FD | 	call	#_converttoint
0db30     14 4E 05 F1 | 	add	fp, #20
0db34     A7 FA 61 FC | 	wrlong	result1, fp
0db38     14 4E 85 F1 | 	sub	fp, #20
0db3c                 | LR__1092
0db3c                 | LR__1093
0db3c                 | ' 
0db3c                 | '     
0db3c                 | '   if s<>"" then 
0db3c     38 4E 05 F1 | 	add	fp, #56
0db40     A7 12 02 FB | 	rdlong	arg01, fp
0db44     38 4E 85 F1 | 	sub	fp, #56
0db48     74 01 00 FF 
0db4c     F6 15 06 F6 | 	mov	arg02, ##@LR__5153
0db50     A0 12 B1 FD | 	call	#__system___string_cmp
0db54     00 FA 0D F2 | 	cmp	result1, #0 wz
0db58     E0 01 90 AD |  if_e	jmp	#LR__1096
0db5c     38 CD BF FD | 	call	#_pop
0db60     FF 1A 02 F6 | 	mov	arg05, result3
0db64     2C 4E 05 F1 | 	add	fp, #44
0db68     A7 FA 61 FC | 	wrlong	result1, fp
0db6c     04 4E 05 F1 | 	add	fp, #4
0db70     A7 FC 61 FC | 	wrlong	result2, fp
0db74     04 4E 05 F1 | 	add	fp, #4
0db78     A7 1A 62 FC | 	wrlong	arg05, fp
0db7c     08 4E 85 F1 | 	sub	fp, #8
0db80     A7 12 02 F6 | 	mov	arg01, fp
0db84     2C 4E 85 F1 | 	sub	fp, #44
0db88     A8 59 B0 FD | 	call	#_converttoint
0db8c     10 4E 05 F1 | 	add	fp, #16
0db90     A7 FA 61 FC | 	wrlong	result1, fp
0db94                 | '     t1=pop()
0db94                 | '     channel=converttoint(t1) : if channel>31 then return
0db94     FD 1A 02 F6 | 	mov	arg05, result1
0db98     10 4E 85 F1 | 	sub	fp, #16
0db9c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0dba0     7C 07 90 3D |  if_ae	jmp	#LR__1113
0dba4                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0dba4     09 12 06 F6 | 	mov	arg01, #9
0dba8     E8 61 B1 FD | 	call	#__system__close
0dbac     09 1E 06 F6 | 	mov	local01, #9
0dbb0     74 01 00 FF 
0dbb4     F7 13 06 F6 | 	mov	arg01, ##@LR__5154
0dbb8     38 4E 05 F1 | 	add	fp, #56
0dbbc     A7 14 02 FB | 	rdlong	arg02, fp
0dbc0     38 4E 85 F1 | 	sub	fp, #56
0dbc4     60 12 B1 FD | 	call	#__system___string_concat
0dbc8     FD 14 02 F6 | 	mov	arg02, result1
0dbcc     0F 13 02 F6 | 	mov	arg01, local01
0dbd0     00 16 06 F6 | 	mov	arg03, #0
0dbd4     F8 1D B1 FD | 	call	#__system___basic_open_string
0dbd8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0dbdc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0dbe0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0dbe4     5A 00 00 FF 
0dbe8     60 E4 05 F1 | 	add	objptr, ##46176
0dbec     F2 FA 61 FC | 	wrlong	result1, objptr
0dbf0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0dbf0     5A 00 00 FF 
0dbf4     60 E4 85 F1 | 	sub	objptr, ##46176
0dbf8     B0 00 90 AD |  if_e	jmp	#LR__1094
0dbfc     00 12 06 F6 | 	mov	arg01, #0
0dc00     60 6B B1 FD | 	call	#__system___getiolock_0485
0dc04     FD 12 02 F6 | 	mov	arg01, result1
0dc08     C0 11 B1 FD | 	call	#__system___lockmem
0dc0c     75 01 00 FF 
0dc10     04 14 06 F6 | 	mov	arg02, ##@LR__5155
0dc14     00 12 06 F6 | 	mov	arg01, #0
0dc18     00 16 06 F6 | 	mov	arg03, #0
0dc1c     A0 1E B1 FD | 	call	#__system___basic_print_string
0dc20     5A 00 00 FF 
0dc24     60 E4 05 F1 | 	add	objptr, ##46176
0dc28     F2 14 02 FB | 	rdlong	arg02, objptr
0dc2c     5A 00 00 FF 
0dc30     60 E4 85 F1 | 	sub	objptr, ##46176
0dc34     00 12 06 F6 | 	mov	arg01, #0
0dc38     00 16 06 F6 | 	mov	arg03, #0
0dc3c     0A 18 06 F6 | 	mov	arg04, #10
0dc40     C0 1E B1 FD | 	call	#__system___basic_print_integer
0dc44     75 01 00 FF 
0dc48     12 14 06 F6 | 	mov	arg02, ##@LR__5156
0dc4c     00 12 06 F6 | 	mov	arg01, #0
0dc50     00 16 06 F6 | 	mov	arg03, #0
0dc54     68 1E B1 FD | 	call	#__system___basic_print_string
0dc58     00 1E 06 F6 | 	mov	local01, #0
0dc5c     5A 00 00 FF 
0dc60     60 E4 05 F1 | 	add	objptr, ##46176
0dc64     F2 12 02 FB | 	rdlong	arg01, objptr
0dc68     5A 00 00 FF 
0dc6c     60 E4 85 F1 | 	sub	objptr, ##46176
0dc70     B4 37 B1 FD | 	call	#__system___strerror
0dc74     FD 14 02 F6 | 	mov	arg02, result1
0dc78     0F 13 02 F6 | 	mov	arg01, local01
0dc7c     00 16 06 F6 | 	mov	arg03, #0
0dc80     3C 1E B1 FD | 	call	#__system___basic_print_string
0dc84     00 12 06 F6 | 	mov	arg01, #0
0dc88     0A 14 06 F6 | 	mov	arg02, #10
0dc8c     00 16 06 F6 | 	mov	arg03, #0
0dc90     D4 1D B1 FD | 	call	#__system___basic_print_char
0dc94     00 12 06 F6 | 	mov	arg01, #0
0dc98     C8 6A B1 FD | 	call	#__system___getiolock_0485
0dc9c     FD 00 68 FC | 	wrlong	#0, result1
0dca0     09 12 06 F6 | 	mov	arg01, #9
0dca4     EC 60 B1 FD | 	call	#__system__close
0dca8     74 06 90 FD | 	jmp	#LR__1113
0dcac                 | LR__1094
0dcac                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0dcac     04 4E 05 F1 | 	add	fp, #4
0dcb0     A7 00 68 FC | 	wrlong	#0, fp
0dcb4                 | LR__1095
0dcb4     A7 1E 02 FB | 	rdlong	local01, fp
0dcb8     01 1E 66 F0 | 	shl	local01, #1
0dcbc     11 14 06 F6 | 	mov	arg02, #17
0dcc0     0F 15 02 F1 | 	add	arg02, local01
0dcc4     78 4E 05 F1 | 	add	fp, #120
0dcc8     A7 16 02 F6 | 	mov	arg03, fp
0dccc     7C 4E 85 F1 | 	sub	fp, #124
0dcd0     09 12 06 F6 | 	mov	arg01, #9
0dcd4     01 18 06 F6 | 	mov	arg04, #1
0dcd8     02 1A 06 F6 | 	mov	arg05, #2
0dcdc     F0 1E B1 FD | 	call	#__system___basic_get
0dce0     10 4E 05 F1 | 	add	fp, #16
0dce4     A7 12 02 FB | 	rdlong	arg01, fp
0dce8     0B 12 66 F0 | 	shl	arg01, #11
0dcec     0C 4E 85 F1 | 	sub	fp, #12
0dcf0     A7 1E 02 FB | 	rdlong	local01, fp
0dcf4     01 1E 66 F0 | 	shl	local01, #1
0dcf8     0F 13 02 F1 | 	add	arg01, local01
0dcfc     78 4E 05 F1 | 	add	fp, #120
0dd00     A7 14 E2 FA | 	rdword	arg02, fp
0dd04     7C 4E 85 F1 | 	sub	fp, #124
0dd08     0F 14 66 F7 | 	signx	arg02, #15
0dd0c     C0 CD B0 FD | 	call	#_psdpoke
0dd10     04 4E 05 F1 | 	add	fp, #4
0dd14     A7 1E 02 FB | 	rdlong	local01, fp
0dd18     01 1E 06 F1 | 	add	local01, #1
0dd1c     A7 1E 62 FC | 	wrlong	local01, fp
0dd20     02 00 00 FF 
0dd24     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0dd28     88 FF 9F CD |  if_b	jmp	#LR__1095
0dd2c     04 4E 85 F1 | 	sub	fp, #4
0dd30                 | '     close #9
0dd30     09 12 06 F6 | 	mov	arg01, #9
0dd34     5C 60 B1 FD | 	call	#__system__close
0dd38                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dd38                 | '     return
0dd38     E4 05 90 FD | 	jmp	#LR__1113
0dd3c                 | LR__1096
0dd3c                 | '     if wptr < ($80000 - 2048) then 
0dd3c     14 4E 05 F1 | 	add	fp, #20
0dd40     A7 1E 02 FB | 	rdlong	local01, fp
0dd44     14 4E 85 F1 | 	sub	fp, #20
0dd48     FC 03 00 FF 
0dd4c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0dd50     70 00 90 3D |  if_ae	jmp	#LR__1098
0dd54                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0dd54     04 4E 05 F1 | 	add	fp, #4
0dd58     A7 00 68 FC | 	wrlong	#0, fp
0dd5c     04 4E 85 F1 | 	sub	fp, #4
0dd60                 | LR__1097
0dd60     10 4E 05 F1 | 	add	fp, #16
0dd64     A7 1E 02 FB | 	rdlong	local01, fp
0dd68     0B 1E 66 F0 | 	shl	local01, #11
0dd6c     0C 4E 85 F1 | 	sub	fp, #12
0dd70     A7 1A 02 FB | 	rdlong	arg05, fp
0dd74     0D 19 02 F6 | 	mov	arg04, arg05
0dd78     01 18 66 F0 | 	shl	arg04, #1
0dd7c     0C 1F 02 F1 | 	add	local01, arg04
0dd80     10 4E 05 F1 | 	add	fp, #16
0dd84     A7 12 02 FB | 	rdlong	arg01, fp
0dd88     14 4E 85 F1 | 	sub	fp, #20
0dd8c     01 1A 66 F0 | 	shl	arg05, #1
0dd90     0D 13 02 F1 | 	add	arg01, arg05
0dd94     09 15 E2 FA | 	rdword	arg02, arg01
0dd98     0F 13 02 F6 | 	mov	arg01, local01
0dd9c     30 CD B0 FD | 	call	#_psdpoke
0dda0     04 4E 05 F1 | 	add	fp, #4
0dda4     A7 1E 02 FB | 	rdlong	local01, fp
0dda8     01 1E 06 F1 | 	add	local01, #1
0ddac     A7 1E 62 FC | 	wrlong	local01, fp
0ddb0     04 4E 85 F1 | 	sub	fp, #4
0ddb4     02 00 00 FF 
0ddb8     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0ddbc     A0 FF 9F CD |  if_b	jmp	#LR__1097
0ddc0     5C 05 90 FD | 	jmp	#LR__1113
0ddc4                 | LR__1098
0ddc4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0ddc4     04 4E 05 F1 | 	add	fp, #4
0ddc8     A7 00 68 FC | 	wrlong	#0, fp
0ddcc     04 4E 85 F1 | 	sub	fp, #4
0ddd0                 | LR__1099
0ddd0     10 4E 05 F1 | 	add	fp, #16
0ddd4     A7 1E 02 FB | 	rdlong	local01, fp
0ddd8     0B 1E 66 F0 | 	shl	local01, #11
0dddc     0C 4E 85 F1 | 	sub	fp, #12
0dde0     A7 1A 02 FB | 	rdlong	arg05, fp
0dde4     0D 19 02 F6 | 	mov	arg04, arg05
0dde8     01 18 66 F0 | 	shl	arg04, #1
0ddec     0C 1F 02 F1 | 	add	local01, arg04
0ddf0     10 4E 05 F1 | 	add	fp, #16
0ddf4     A7 12 02 FB | 	rdlong	arg01, fp
0ddf8     14 4E 85 F1 | 	sub	fp, #20
0ddfc     01 1A 66 F0 | 	shl	arg05, #1
0de00     0D 13 02 F1 | 	add	arg01, arg05
0de04     08 CE B0 FD | 	call	#_psdpeek
0de08     FD 14 02 F6 | 	mov	arg02, result1
0de0c     0F 13 02 F6 | 	mov	arg01, local01
0de10     BC CC B0 FD | 	call	#_psdpoke
0de14     04 4E 05 F1 | 	add	fp, #4
0de18     A7 1E 02 FB | 	rdlong	local01, fp
0de1c     01 1E 06 F1 | 	add	local01, #1
0de20     A7 1E 62 FC | 	wrlong	local01, fp
0de24     04 4E 85 F1 | 	sub	fp, #4
0de28     02 00 00 FF 
0de2c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0de30     9C FF 9F CD |  if_b	jmp	#LR__1099
0de34                 | '     return 
0de34     E8 04 90 FD | 	jmp	#LR__1113
0de38                 | '   
0de38                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0de38                 | '   return
0de38                 | LR__1100
0de38                 | ' for i=0 to 15 : harm(i)=0: next i  
0de38     04 4E 05 F1 | 	add	fp, #4
0de3c     A7 00 68 FC | 	wrlong	#0, fp
0de40     97 16 48 FB | 	callpa	#(@LR__1102-@LR__1101)>>2,fcache_load_ptr_
0de44                 | LR__1101
0de44     A7 1E 02 FB | 	rdlong	local01, fp
0de48     02 1E 66 F0 | 	shl	local01, #2
0de4c     38 4E 05 F1 | 	add	fp, #56
0de50     A7 1E 02 F1 | 	add	local01, fp
0de54     0F 01 68 FC | 	wrlong	#0, local01
0de58     38 4E 85 F1 | 	sub	fp, #56
0de5c     A7 1E 02 FB | 	rdlong	local01, fp
0de60     01 1E 06 F1 | 	add	local01, #1
0de64     A7 1E 62 FC | 	wrlong	local01, fp
0de68     10 1E 56 F2 | 	cmps	local01, #16 wc
0de6c     D4 FF 9F CD |  if_b	jmp	#LR__1101
0de70                 | LR__1102
0de70     04 4E 85 F1 | 	sub	fp, #4
0de74                 | ' for i=numpar to 2 step -1 
0de74     A7 1E 02 FB | 	rdlong	local01, fp
0de78     04 4E 05 F1 | 	add	fp, #4
0de7c     A7 1E 62 FC | 	wrlong	local01, fp
0de80     04 4E 85 F1 | 	sub	fp, #4
0de84                 | LR__1103
0de84     10 CA BF FD | 	call	#_pop
0de88     2C 4E 05 F1 | 	add	fp, #44
0de8c     A7 FA 61 FC | 	wrlong	result1, fp
0de90     04 4E 05 F1 | 	add	fp, #4
0de94     A7 FC 61 FC | 	wrlong	result2, fp
0de98     04 4E 05 F1 | 	add	fp, #4
0de9c     A7 FE 61 FC | 	wrlong	result3, fp
0dea0     30 4E 85 F1 | 	sub	fp, #48
0dea4     A7 1E 02 FB | 	rdlong	local01, fp
0dea8     02 1E 86 F1 | 	sub	local01, #2
0deac     02 1E 66 F0 | 	shl	local01, #2
0deb0     38 4E 05 F1 | 	add	fp, #56
0deb4     A7 1E 02 F1 | 	add	local01, fp
0deb8     10 4E 85 F1 | 	sub	fp, #16
0debc     A7 12 02 F6 | 	mov	arg01, fp
0dec0     2C 4E 85 F1 | 	sub	fp, #44
0dec4     18 57 B0 FD | 	call	#_converttofloat
0dec8     0F FB 61 FC | 	wrlong	result1, local01
0decc     04 4E 05 F1 | 	add	fp, #4
0ded0     A7 1E 02 FB | 	rdlong	local01, fp
0ded4     01 1E 86 F1 | 	sub	local01, #1
0ded8     A7 1E 62 FC | 	wrlong	local01, fp
0dedc     04 4E 85 F1 | 	sub	fp, #4
0dee0     02 1E 56 F2 | 	cmps	local01, #2 wc
0dee4     9C FF 9F 3D |  if_ae	jmp	#LR__1103
0dee8     AC C9 BF FD | 	call	#_pop
0deec     FF 1E 02 F6 | 	mov	local01, result3
0def0     2C 4E 05 F1 | 	add	fp, #44
0def4     A7 FA 61 FC | 	wrlong	result1, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 FC 61 FC | 	wrlong	result2, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 1E 62 FC | 	wrlong	local01, fp
0df08     08 4E 85 F1 | 	sub	fp, #8
0df0c     A7 12 02 F6 | 	mov	arg01, fp
0df10     2C 4E 85 F1 | 	sub	fp, #44
0df14     1C 56 B0 FD | 	call	#_converttoint
0df18     10 4E 05 F1 | 	add	fp, #16
0df1c     A7 FA 61 FC | 	wrlong	result1, fp
0df20                 | ' t1=pop()
0df20                 | ' channel=converttoint(t1) : : if channel>31 then return
0df20     FD 1E 02 F6 | 	mov	local01, result1
0df24     10 4E 85 F1 | 	sub	fp, #16
0df28     20 1E 56 F2 | 	cmps	local01, #32 wc
0df2c     F0 03 90 3D |  if_ae	jmp	#LR__1113
0df30     20 4E 05 F1 | 	add	fp, #32
0df34     A7 00 68 FC | 	wrlong	#0, fp
0df38                 | ' max=0
0df38                 | ' if harm(0)<0 then
0df38     1C 4E 05 F1 | 	add	fp, #28
0df3c     A7 12 02 FB | 	rdlong	arg01, fp
0df40     3C 4E 85 F1 | 	sub	fp, #60
0df44     00 14 06 F6 | 	mov	arg02, #0
0df48     01 16 06 F6 | 	mov	arg03, #1
0df4c     F8 3D B1 FD | 	call	#__system___float_cmp
0df50     00 FA 55 F2 | 	cmps	result1, #0 wc
0df54     04 01 90 3D |  if_ae	jmp	#LR__1106
0df58     3C 4E 05 F1 | 	add	fp, #60
0df5c     A7 FA 01 FB | 	rdlong	result1, fp
0df60     1F FA 05 F4 | 	bitl	result1, #31
0df64     24 4E 85 F1 | 	sub	fp, #36
0df68     A7 FA 61 FC | 	wrlong	result1, fp
0df6c     28 4E 05 F1 | 	add	fp, #40
0df70     A7 FA 01 FB | 	rdlong	result1, fp
0df74     1F FA 05 F4 | 	bitl	result1, #31
0df78     24 4E 85 F1 | 	sub	fp, #36
0df7c     A7 FA 61 FC | 	wrlong	result1, fp
0df80     20 4E 05 F1 | 	add	fp, #32
0df84     00 C0 9F FF 
0df88     A7 00 68 FC | 	wrlong	##1065353216, fp
0df8c     24 4E 85 F1 | 	sub	fp, #36
0df90     A7 1E 02 FB | 	rdlong	local01, fp
0df94     28 4E 05 F1 | 	add	fp, #40
0df98     A7 1E 62 FC | 	wrlong	local01, fp
0df9c     24 4E 85 F1 | 	sub	fp, #36
0dfa0     A7 1E 02 FB | 	rdlong	local01, fp
0dfa4     28 4E 05 F1 | 	add	fp, #40
0dfa8     A7 1E 62 FC | 	wrlong	local01, fp
0dfac                 | '   harm(0)=1
0dfac                 | '   harm(1)=even
0dfac                 | '   harm(2)=odd
0dfac                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0dfac     40 4E 85 F1 | 	sub	fp, #64
0dfb0     A7 06 68 FC | 	wrlong	#3, fp
0dfb4                 | LR__1104
0dfb4     A7 1A 02 FB | 	rdlong	arg05, fp
0dfb8     0D 21 02 F6 | 	mov	local02, arg05
0dfbc     02 20 66 F0 | 	shl	local02, #2
0dfc0     38 4E 05 F1 | 	add	fp, #56
0dfc4     A7 20 02 F1 | 	add	local02, fp
0dfc8     02 1A 86 F1 | 	sub	arg05, #2
0dfcc     02 1A 66 F0 | 	shl	arg05, #2
0dfd0     A7 1A 02 F1 | 	add	arg05, fp
0dfd4     0D 13 02 FB | 	rdlong	arg01, arg05
0dfd8     24 4E 85 F1 | 	sub	fp, #36
0dfdc     A7 14 02 FB | 	rdlong	arg02, fp
0dfe0     18 4E 85 F1 | 	sub	fp, #24
0dfe4     2C 39 B1 FD | 	call	#__system___float_mul
0dfe8     10 FB 61 FC | 	wrlong	result1, local02
0dfec     04 4E 05 F1 | 	add	fp, #4
0dff0     A7 22 02 FB | 	rdlong	local03, fp
0dff4     02 22 06 F1 | 	add	local03, #2
0dff8     A7 22 62 FC | 	wrlong	local03, fp
0dffc     10 22 56 F2 | 	cmps	local03, #16 wc
0e000     B0 FF 9F CD |  if_b	jmp	#LR__1104
0e004                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0e004     A7 08 68 FC | 	wrlong	#4, fp
0e008                 | LR__1105
0e008     A7 22 02 FB | 	rdlong	local03, fp
0e00c     11 21 02 F6 | 	mov	local02, local03
0e010     02 20 66 F0 | 	shl	local02, #2
0e014     38 4E 05 F1 | 	add	fp, #56
0e018     A7 20 02 F1 | 	add	local02, fp
0e01c     02 22 86 F1 | 	sub	local03, #2
0e020     02 22 66 F0 | 	shl	local03, #2
0e024     A7 22 02 F1 | 	add	local03, fp
0e028     11 13 02 FB | 	rdlong	arg01, local03
0e02c     20 4E 85 F1 | 	sub	fp, #32
0e030     A7 14 02 FB | 	rdlong	arg02, fp
0e034     1C 4E 85 F1 | 	sub	fp, #28
0e038     D8 38 B1 FD | 	call	#__system___float_mul
0e03c     10 FB 61 FC | 	wrlong	result1, local02
0e040     04 4E 05 F1 | 	add	fp, #4
0e044     A7 22 02 FB | 	rdlong	local03, fp
0e048     02 22 06 F1 | 	add	local03, #2
0e04c     A7 22 62 FC | 	wrlong	local03, fp
0e050     0F 22 56 F2 | 	cmps	local03, #15 wc
0e054     B0 FF 9F CD |  if_b	jmp	#LR__1105
0e058     04 4E 85 F1 | 	sub	fp, #4
0e05c                 | LR__1106
0e05c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e05c     3C 4E 05 F1 | 	add	fp, #60
0e060     A7 12 02 FB | 	rdlong	arg01, fp
0e064     3C 4E 85 F1 | 	sub	fp, #60
0e068     00 14 06 F6 | 	mov	arg02, #0
0e06c     01 16 66 F6 | 	neg	arg03, #1
0e070     D4 3C B1 FD | 	call	#__system___float_cmp
0e074     00 FA 55 F2 | 	cmps	result1, #0 wc
0e078     A4 02 90 CD |  if_b	jmp	#LR__1112
0e07c                 | '   for i=0 to 1023
0e07c     04 4E 05 F1 | 	add	fp, #4
0e080     A7 00 68 FC | 	wrlong	#0, fp
0e084     04 4E 85 F1 | 	sub	fp, #4
0e088                 | LR__1107
0e088     24 4E 05 F1 | 	add	fp, #36
0e08c     A7 00 68 FC | 	wrlong	#0, fp
0e090                 | '     spl=0
0e090                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e090     1C 4E 85 F1 | 	sub	fp, #28
0e094     A7 00 68 FC | 	wrlong	#0, fp
0e098                 | LR__1108
0e098     A7 20 02 FB | 	rdlong	local02, fp
0e09c     02 20 66 F0 | 	shl	local02, #2
0e0a0     34 4E 05 F1 | 	add	fp, #52
0e0a4     A7 20 02 F1 | 	add	local02, fp
0e0a8     10 23 02 FB | 	rdlong	local03, local02
0e0ac     87 E4 1D FF 
0e0b0     DB 21 06 F6 | 	mov	local02, ##1003032539
0e0b4     38 4E 85 F1 | 	sub	fp, #56
0e0b8     A7 12 02 FB | 	rdlong	arg01, fp
0e0bc     04 4E 85 F1 | 	sub	fp, #4
0e0c0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0c4     1F 24 C6 C9 |  if_b	decod	local04, #31
0e0c8     00 24 06 36 |  if_ae	mov	local04, #0
0e0cc     40 34 B1 FD | 	call	#__system___float_fromuns
0e0d0     12 FB 61 F5 | 	xor	result1, local04
0e0d4     FD 14 02 F6 | 	mov	arg02, result1
0e0d8     10 13 02 F6 | 	mov	arg01, local02
0e0dc     34 38 B1 FD | 	call	#__system___float_mul
0e0e0     FD 20 02 F6 | 	mov	local02, result1
0e0e4     08 4E 05 F1 | 	add	fp, #8
0e0e8     A7 12 02 FB | 	rdlong	arg01, fp
0e0ec     08 4E 85 F1 | 	sub	fp, #8
0e0f0     01 12 06 F1 | 	add	arg01, #1
0e0f4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0f8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e0fc     00 24 06 36 |  if_ae	mov	local04, #0
0e100     0C 34 B1 FD | 	call	#__system___float_fromuns
0e104     12 FB 61 F5 | 	xor	result1, local04
0e108     FD 14 02 F6 | 	mov	arg02, result1
0e10c     10 13 02 F6 | 	mov	arg01, local02
0e110     00 38 B1 FD | 	call	#__system___float_mul
0e114     FD 12 02 F6 | 	mov	arg01, result1
0e118     34 41 B1 FD | 	call	#__system____builtin_sinf
0e11c     FD 14 02 F6 | 	mov	arg02, result1
0e120     11 13 02 F6 | 	mov	arg01, local03
0e124     EC 37 B1 FD | 	call	#__system___float_mul
0e128     FD 14 02 F6 | 	mov	arg02, result1
0e12c     24 4E 05 F1 | 	add	fp, #36
0e130     A7 12 02 FB | 	rdlong	arg01, fp
0e134     24 4E 85 F1 | 	sub	fp, #36
0e138     08 34 B1 FD | 	call	#__system___float_add
0e13c     24 4E 05 F1 | 	add	fp, #36
0e140     A7 FA 61 FC | 	wrlong	result1, fp
0e144     1C 4E 85 F1 | 	sub	fp, #28
0e148     A7 16 02 FB | 	rdlong	arg03, fp
0e14c     01 16 06 F1 | 	add	arg03, #1
0e150     A7 16 62 FC | 	wrlong	arg03, fp
0e154     10 16 56 F2 | 	cmps	arg03, #16 wc
0e158     3C FF 9F CD |  if_b	jmp	#LR__1108
0e15c                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0e15c     1C 4E 05 F1 | 	add	fp, #28
0e160     A7 12 02 FB | 	rdlong	arg01, fp
0e164     1F 12 06 F4 | 	bitl	arg01, #31
0e168     04 4E 85 F1 | 	sub	fp, #4
0e16c     A7 14 02 FB | 	rdlong	arg02, fp
0e170     20 4E 85 F1 | 	sub	fp, #32
0e174     01 16 66 F6 | 	neg	arg03, #1
0e178     CC 3B B1 FD | 	call	#__system___float_cmp
0e17c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e180     18 00 90 CD |  if_b	jmp	#LR__1109
0e184     24 4E 05 F1 | 	add	fp, #36
0e188     A7 FA 01 FB | 	rdlong	result1, fp
0e18c     1F FA 05 F4 | 	bitl	result1, #31
0e190     04 4E 85 F1 | 	sub	fp, #4
0e194     A7 FA 61 FC | 	wrlong	result1, fp
0e198     20 4E 85 F1 | 	sub	fp, #32
0e19c                 | LR__1109
0e19c     04 4E 05 F1 | 	add	fp, #4
0e1a0     A7 22 02 FB | 	rdlong	local03, fp
0e1a4     01 22 06 F1 | 	add	local03, #1
0e1a8     A7 22 62 FC | 	wrlong	local03, fp
0e1ac     04 4E 85 F1 | 	sub	fp, #4
0e1b0     02 00 00 FF 
0e1b4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e1b8     CC FE 9F CD |  if_b	jmp	#LR__1107
0e1bc                 | '   for i=0 to 1023
0e1bc     04 4E 05 F1 | 	add	fp, #4
0e1c0     A7 00 68 FC | 	wrlong	#0, fp
0e1c4     04 4E 85 F1 | 	sub	fp, #4
0e1c8                 | LR__1110
0e1c8     24 4E 05 F1 | 	add	fp, #36
0e1cc     A7 00 68 FC | 	wrlong	#0, fp
0e1d0                 | '     spl=0
0e1d0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0e1d0     1C 4E 85 F1 | 	sub	fp, #28
0e1d4     A7 00 68 FC | 	wrlong	#0, fp
0e1d8                 | LR__1111
0e1d8     A7 22 02 FB | 	rdlong	local03, fp
0e1dc     02 22 66 F0 | 	shl	local03, #2
0e1e0     34 4E 05 F1 | 	add	fp, #52
0e1e4     A7 22 02 F1 | 	add	local03, fp
0e1e8     11 23 02 FB | 	rdlong	local03, local03
0e1ec     1C 4E 85 F1 | 	sub	fp, #28
0e1f0     A7 14 02 FB | 	rdlong	arg02, fp
0e1f4     20 4E 85 F1 | 	sub	fp, #32
0e1f8     58 7F 23 FF 
0e1fc     00 12 06 F6 | 	mov	arg01, ##1191096320
0e200     14 39 B1 FD | 	call	#__system___float_div
0e204     FD 14 02 F6 | 	mov	arg02, result1
0e208     11 13 02 F6 | 	mov	arg01, local03
0e20c     04 37 B1 FD | 	call	#__system___float_mul
0e210     FD 22 02 F6 | 	mov	local03, result1
0e214     87 E4 1D FF 
0e218     DB 21 06 F6 | 	mov	local02, ##1003032539
0e21c     04 4E 05 F1 | 	add	fp, #4
0e220     A7 12 02 FB | 	rdlong	arg01, fp
0e224     04 4E 85 F1 | 	sub	fp, #4
0e228     09 13 52 F6 | 	abs	arg01, arg01 wc
0e22c     1F 24 C6 C9 |  if_b	decod	local04, #31
0e230     00 24 06 36 |  if_ae	mov	local04, #0
0e234     D8 32 B1 FD | 	call	#__system___float_fromuns
0e238     12 FB 61 F5 | 	xor	result1, local04
0e23c     FD 14 02 F6 | 	mov	arg02, result1
0e240     10 13 02 F6 | 	mov	arg01, local02
0e244     CC 36 B1 FD | 	call	#__system___float_mul
0e248     FD 20 02 F6 | 	mov	local02, result1
0e24c     08 4E 05 F1 | 	add	fp, #8
0e250     A7 12 02 FB | 	rdlong	arg01, fp
0e254     08 4E 85 F1 | 	sub	fp, #8
0e258     01 12 06 F1 | 	add	arg01, #1
0e25c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e260     1F 24 C6 C9 |  if_b	decod	local04, #31
0e264     00 24 06 36 |  if_ae	mov	local04, #0
0e268     A4 32 B1 FD | 	call	#__system___float_fromuns
0e26c     12 FB 61 F5 | 	xor	result1, local04
0e270     FD 14 02 F6 | 	mov	arg02, result1
0e274     10 13 02 F6 | 	mov	arg01, local02
0e278     98 36 B1 FD | 	call	#__system___float_mul
0e27c     FD 12 02 F6 | 	mov	arg01, result1
0e280     CC 3F B1 FD | 	call	#__system____builtin_sinf
0e284     FD 14 02 F6 | 	mov	arg02, result1
0e288     11 13 02 F6 | 	mov	arg01, local03
0e28c     84 36 B1 FD | 	call	#__system___float_mul
0e290     FD 14 02 F6 | 	mov	arg02, result1
0e294     24 4E 05 F1 | 	add	fp, #36
0e298     A7 12 02 FB | 	rdlong	arg01, fp
0e29c     24 4E 85 F1 | 	sub	fp, #36
0e2a0     A0 32 B1 FD | 	call	#__system___float_add
0e2a4     24 4E 05 F1 | 	add	fp, #36
0e2a8     A7 FA 61 FC | 	wrlong	result1, fp
0e2ac     1C 4E 85 F1 | 	sub	fp, #28
0e2b0     A7 22 02 FB | 	rdlong	local03, fp
0e2b4     01 22 06 F1 | 	add	local03, #1
0e2b8     A7 22 62 FC | 	wrlong	local03, fp
0e2bc     10 22 56 F2 | 	cmps	local03, #16 wc
0e2c0     14 FF 9F CD |  if_b	jmp	#LR__1111
0e2c4     08 4E 05 F1 | 	add	fp, #8
0e2c8     A7 22 02 FB | 	rdlong	local03, fp
0e2cc     0B 22 66 F0 | 	shl	local03, #11
0e2d0     0C 4E 85 F1 | 	sub	fp, #12
0e2d4     A7 20 02 FB | 	rdlong	local02, fp
0e2d8     01 20 66 F0 | 	shl	local02, #1
0e2dc     10 23 02 F1 | 	add	local03, local02
0e2e0     20 4E 05 F1 | 	add	fp, #32
0e2e4     A7 12 02 FB | 	rdlong	arg01, fp
0e2e8     24 4E 85 F1 | 	sub	fp, #36
0e2ec     01 14 06 F6 | 	mov	arg02, #1
0e2f0     E8 3A B1 FD | 	call	#__system___float_tointeger
0e2f4     FD 14 02 F6 | 	mov	arg02, result1
0e2f8     11 13 02 F6 | 	mov	arg01, local03
0e2fc     D0 C7 B0 FD | 	call	#_psdpoke
0e300     04 4E 05 F1 | 	add	fp, #4
0e304     A7 22 02 FB | 	rdlong	local03, fp
0e308     01 22 06 F1 | 	add	local03, #1
0e30c     A7 22 62 FC | 	wrlong	local03, fp
0e310     04 4E 85 F1 | 	sub	fp, #4
0e314     02 00 00 FF 
0e318     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e31c     A8 FE 9F CD |  if_b	jmp	#LR__1110
0e320                 | LR__1112
0e320                 | LR__1113
0e320     A7 F0 03 F6 | 	mov	ptra, fp
0e324     B2 00 A0 FD | 	call	#popregs_
0e328                 | _do_defsnd_ret
0e328     2D 00 64 FD | 	ret
0e32c                 | 
0e32c                 | ' 
0e32c                 | ' ' ---------------  List the program. 
0e32c                 | ' 
0e32c                 | ' sub do_list
0e32c                 | _do_list
0e32c     02 4A 05 F6 | 	mov	COUNT_, #2
0e330     A8 00 A0 FD | 	call	#pushregs_
0e334     B8 F0 07 F1 | 	add	ptra, #184
0e338     04 4E 05 F1 | 	add	fp, #4
0e33c     A7 00 68 FC | 	wrlong	#0, fp
0e340     04 4E 05 F1 | 	add	fp, #4
0e344     FF FF BF FF 
0e348     A7 FE 6B FC | 	wrlong	##2147483647, fp
0e34c     08 4E 85 F1 | 	sub	fp, #8
0e350     4A 00 00 FF 
0e354     B0 E4 05 F1 | 	add	objptr, ##38064
0e358     F2 1E 02 FB | 	rdlong	local01, objptr
0e35c     0F 17 02 F6 | 	mov	arg03, local01
0e360     01 16 66 F0 | 	shl	arg03, #1
0e364     0F 17 02 F1 | 	add	arg03, local01
0e368     02 16 66 F0 | 	shl	arg03, #2
0e36c     03 00 00 FF 
0e370     04 E4 85 F1 | 	sub	objptr, ##1540
0e374     F2 16 02 F1 | 	add	arg03, objptr
0e378     0B 17 02 FB | 	rdlong	arg03, arg03
0e37c     A7 16 62 FC | 	wrlong	arg03, fp
0e380                 | ' 
0e380                 | ' startline=0 : endline=$7FFFFFFF
0e380                 | ' numpar=compiledline(lineptr_e).result.uresult
0e380                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0e380     01 16 0E F2 | 	cmp	arg03, #1 wz
0e384     47 00 00 FF 
0e388     AC E4 85 F1 | 	sub	objptr, ##36524
0e38c     3C 00 90 5D |  if_ne	jmp	#LR__1120
0e390     04 C5 BF FD | 	call	#_pop
0e394     FF 1E 02 F6 | 	mov	local01, result3
0e398     0C 4E 05 F1 | 	add	fp, #12
0e39c     A7 FA 61 FC | 	wrlong	result1, fp
0e3a0     04 4E 05 F1 | 	add	fp, #4
0e3a4     A7 FC 61 FC | 	wrlong	result2, fp
0e3a8     04 4E 05 F1 | 	add	fp, #4
0e3ac     A7 1E 62 FC | 	wrlong	local01, fp
0e3b0     08 4E 85 F1 | 	sub	fp, #8
0e3b4     A7 12 02 F6 | 	mov	arg01, fp
0e3b8     0C 4E 85 F1 | 	sub	fp, #12
0e3bc     74 51 B0 FD | 	call	#_converttoint
0e3c0     04 4E 05 F1 | 	add	fp, #4
0e3c4     A7 FA 61 FC | 	wrlong	result1, fp
0e3c8     04 4E 85 F1 | 	sub	fp, #4
0e3cc                 | LR__1120
0e3cc                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0e3cc     A7 16 02 FB | 	rdlong	arg03, fp
0e3d0     02 16 0E F2 | 	cmp	arg03, #2 wz
0e3d4     7C 00 90 5D |  if_ne	jmp	#LR__1121
0e3d8     BC C4 BF FD | 	call	#_pop
0e3dc     FF 1E 02 F6 | 	mov	local01, result3
0e3e0     0C 4E 05 F1 | 	add	fp, #12
0e3e4     A7 FA 61 FC | 	wrlong	result1, fp
0e3e8     04 4E 05 F1 | 	add	fp, #4
0e3ec     A7 FC 61 FC | 	wrlong	result2, fp
0e3f0     04 4E 05 F1 | 	add	fp, #4
0e3f4     A7 1E 62 FC | 	wrlong	local01, fp
0e3f8     08 4E 85 F1 | 	sub	fp, #8
0e3fc     A7 12 02 F6 | 	mov	arg01, fp
0e400     0C 4E 85 F1 | 	sub	fp, #12
0e404     2C 51 B0 FD | 	call	#_converttoint
0e408     FD 1E 02 F6 | 	mov	local01, result1
0e40c     08 4E 05 F1 | 	add	fp, #8
0e410     A7 1E 62 FC | 	wrlong	local01, fp
0e414     08 4E 85 F1 | 	sub	fp, #8
0e418     7C C4 BF FD | 	call	#_pop
0e41c     FF 1E 02 F6 | 	mov	local01, result3
0e420     0C 4E 05 F1 | 	add	fp, #12
0e424     A7 FA 61 FC | 	wrlong	result1, fp
0e428     04 4E 05 F1 | 	add	fp, #4
0e42c     A7 FC 61 FC | 	wrlong	result2, fp
0e430     04 4E 05 F1 | 	add	fp, #4
0e434     A7 1E 62 FC | 	wrlong	local01, fp
0e438     08 4E 85 F1 | 	sub	fp, #8
0e43c     A7 12 02 F6 | 	mov	arg01, fp
0e440     0C 4E 85 F1 | 	sub	fp, #12
0e444     EC 50 B0 FD | 	call	#_converttoint
0e448     04 4E 05 F1 | 	add	fp, #4
0e44c     A7 FA 61 FC | 	wrlong	result1, fp
0e450     04 4E 85 F1 | 	sub	fp, #4
0e454                 | LR__1121
0e454                 | ' 
0e454                 | ' 
0e454                 | ' print
0e454     00 12 06 F6 | 	mov	arg01, #0
0e458     08 63 B1 FD | 	call	#__system___getiolock_0485
0e45c     FD 12 02 F6 | 	mov	arg01, result1
0e460     68 09 B1 FD | 	call	#__system___lockmem
0e464     00 12 06 F6 | 	mov	arg01, #0
0e468     0A 14 06 F6 | 	mov	arg02, #10
0e46c     00 16 06 F6 | 	mov	arg03, #0
0e470     F4 15 B1 FD | 	call	#__system___basic_print_char
0e474     00 12 06 F6 | 	mov	arg01, #0
0e478     E8 62 B1 FD | 	call	#__system___getiolock_0485
0e47c     FD 00 68 FC | 	wrlong	#0, result1
0e480     4A 00 00 FF 
0e484     B4 E4 05 F1 | 	add	objptr, ##38068
0e488     F2 20 02 FB | 	rdlong	local02, objptr
0e48c     0F 00 00 FF 
0e490     A4 E5 05 F1 | 	add	objptr, ##8100
0e494     F2 20 62 FC | 	wrlong	local02, objptr
0e498     5A 00 00 FF 
0e49c     58 E4 85 F1 | 	sub	objptr, ##46168
0e4a0                 | ' do 
0e4a0                 | LR__1122
0e4a0     20 4E 05 F1 | 	add	fp, #32
0e4a4     A7 12 02 F6 | 	mov	arg01, fp
0e4a8     20 4E 85 F1 | 	sub	fp, #32
0e4ac     5A 00 00 FF 
0e4b0     58 E4 05 F1 | 	add	objptr, ##46168
0e4b4     F2 14 02 FB | 	rdlong	arg02, objptr
0e4b8     18 16 06 F6 | 	mov	arg03, #24
0e4bc     4E 00 00 FF 
0e4c0     8C E5 85 F1 | 	sub	objptr, ##40332
0e4c4     C4 FC B0 FD | 	call	#_psram_spin2_read1
0e4c8     0B 00 00 FF 
0e4cc     CC E4 85 F1 | 	sub	objptr, ##5836
0e4d0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0e4d0                 | '   
0e4d0                 | '   if header(0)<> $FFFFFFFF then
0e4d0     20 4E 05 F1 | 	add	fp, #32
0e4d4     A7 20 02 FB | 	rdlong	local02, fp
0e4d8     20 4E 85 F1 | 	sub	fp, #32
0e4dc     FF FF 7F FF 
0e4e0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0e4e4     A8 00 90 AD |  if_e	jmp	#LR__1124
0e4e8     38 4E 05 F1 | 	add	fp, #56
0e4ec     3F 16 06 F6 | 	mov	arg03, #63
0e4f0     28 16 62 FD | 	setq	arg03
0e4f4     A7 00 68 FC | 	wrlong	#0, fp
0e4f8     A7 12 02 F6 | 	mov	arg01, fp
0e4fc     10 4E 85 F1 | 	sub	fp, #16
0e500     A7 14 02 FB | 	rdlong	arg02, fp
0e504     04 4E 05 F1 | 	add	fp, #4
0e508     A7 16 02 FB | 	rdlong	arg03, fp
0e50c     2C 4E 85 F1 | 	sub	fp, #44
0e510     0B 00 00 FF 
0e514     CC E4 05 F1 | 	add	objptr, ##5836
0e518     70 FC B0 FD | 	call	#_psram_spin2_read1
0e51c     0B 00 00 FF 
0e520     CC E4 85 F1 | 	sub	objptr, ##5836
0e524                 | '     longfill(linebuf,0,64)
0e524                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0e524                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0e524     20 4E 05 F1 | 	add	fp, #32
0e528     A7 20 02 FB | 	rdlong	local02, fp
0e52c     1C 4E 85 F1 | 	sub	fp, #28
0e530     A7 1E 02 FB | 	rdlong	local01, fp
0e534     04 4E 85 F1 | 	sub	fp, #4
0e538     0F 21 52 F2 | 	cmps	local02, local01 wc
0e53c     30 00 90 CD |  if_b	jmp	#LR__1123
0e540     20 4E 05 F1 | 	add	fp, #32
0e544     A7 20 02 FB | 	rdlong	local02, fp
0e548     18 4E 85 F1 | 	sub	fp, #24
0e54c     A7 16 02 FB | 	rdlong	arg03, fp
0e550     08 4E 85 F1 | 	sub	fp, #8
0e554     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0e558     14 00 90 1D |  if_a	jmp	#LR__1123
0e55c     38 4E 05 F1 | 	add	fp, #56
0e560     A7 12 02 F6 | 	mov	arg01, fp
0e564     38 4E 85 F1 | 	sub	fp, #56
0e568                 | ' 
0e568                 | ' write(text)
0e568     78 F5 B0 FD | 	call	#_hg010b_spin2_write
0e56c                 | ' crlf
0e56c     40 F8 B0 FD | 	call	#_hg010b_spin2_crlf
0e570                 | LR__1123
0e570     34 4E 05 F1 | 	add	fp, #52
0e574     A7 20 02 FB | 	rdlong	local02, fp
0e578     34 4E 85 F1 | 	sub	fp, #52
0e57c     5A 00 00 FF 
0e580     58 E4 05 F1 | 	add	objptr, ##46168
0e584     F2 20 62 FC | 	wrlong	local02, objptr
0e588     5A 00 00 FF 
0e58c     58 E4 85 F1 | 	sub	objptr, ##46168
0e590                 | LR__1124
0e590     34 4E 05 F1 | 	add	fp, #52
0e594     A7 20 02 FB | 	rdlong	local02, fp
0e598     34 4E 85 F1 | 	sub	fp, #52
0e59c     FF FF 3F FF 
0e5a0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e5a4     20 4E 05 51 |  if_ne	add	fp, #32
0e5a8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e5ac     20 4E 85 51 |  if_ne	sub	fp, #32
0e5b0     FF FF 7F 5F 
0e5b4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e5b8     E4 FE 9F 5D |  if_ne	jmp	#LR__1122
0e5bc     A7 F0 03 F6 | 	mov	ptra, fp
0e5c0     B2 00 A0 FD | 	call	#popregs_
0e5c4                 | _do_list_ret
0e5c4     2D 00 64 FD | 	ret
0e5c8                 | 
0e5c8                 | ' 
0e5c8                 | ' '---------------- Clear the program
0e5c8                 | ' 
0e5c8                 | ' sub do_new
0e5c8                 | _do_new
0e5c8     03 4A 05 F6 | 	mov	COUNT_, #3
0e5cc     A8 00 A0 FD | 	call	#pushregs_
0e5d0     13 12 C6 F9 | 	decod	arg01, #19
0e5d4     01 14 66 F6 | 	neg	arg02, #1
0e5d8     AC C4 B0 FD | 	call	#_pslpoke
0e5dc     35 00 00 FF 
0e5e0     38 E4 05 F1 | 	add	objptr, ##27192
0e5e4     F2 00 68 FC | 	wrlong	#0, objptr
0e5e8     15 00 00 FF 
0e5ec     7C E4 05 F1 | 	add	objptr, ##10876
0e5f0     00 04 80 FF 
0e5f4     F2 00 68 FC | 	wrlong	##524288, objptr
0e5f8     0E 00 00 FF 
0e5fc     38 E4 05 F1 | 	add	objptr, ##7224
0e600     00 04 80 FF 
0e604     F2 00 68 FC | 	wrlong	##524288, objptr
0e608     04 E4 05 F1 | 	add	objptr, #4
0e60c     00 04 80 FF 
0e610     F2 00 68 FC | 	wrlong	##524288, objptr
0e614     15 00 00 FF 
0e618     68 E4 85 F1 | 	sub	objptr, ##10856
0e61c     F2 00 68 FC | 	wrlong	#0, objptr
0e620     07 00 00 FF 
0e624     24 E4 05 F1 | 	add	objptr, ##3620
0e628     F2 00 68 FC | 	wrlong	#0, objptr
0e62c     07 00 00 FF 
0e630     20 E4 85 F1 | 	sub	objptr, ##3616
0e634     00 04 80 FF 
0e638     F2 00 68 FC | 	wrlong	##524288, objptr
0e63c     0F 00 00 FF 
0e640     38 E4 05 F1 | 	add	objptr, ##7736
0e644     F2 00 68 FC | 	wrlong	#0, objptr
0e648     08 00 00 FF 
0e64c     0C E4 85 F1 | 	sub	objptr, ##4108
0e650     F2 00 68 FC | 	wrlong	#0, objptr
0e654     04 E4 05 F1 | 	add	objptr, #4
0e658     FF FF FF FF 
0e65c     F2 FE 6B FC | 	wrlong	##-1, objptr
0e660     0E 00 00 FF 
0e664     58 E4 05 F1 | 	add	objptr, ##7256
0e668     F2 00 68 FC | 	wrlong	#0, objptr
0e66c     04 E4 05 F1 | 	add	objptr, #4
0e670     F2 00 68 FC | 	wrlong	#0, objptr
0e674                 | ' 
0e674                 | ' pslpoke(memlo,$FFFFFFFF)
0e674                 | ' varnum=0
0e674                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0e674                 | ' stackpointer=0
0e674                 | ' lineptr=0 
0e674                 | ' programptr=memlo : stringptr=0
0e674                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0e674                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0e674     00 1E 06 F6 | 	mov	local01, #0
0e678     06 00 00 FF 
0e67c     4C E4 85 F1 | 	sub	objptr, ##3148
0e680     97 16 48 FB | 	callpa	#(@LR__1131-@LR__1130)>>2,fcache_load_ptr_
0e684                 | LR__1130
0e684     0F 21 02 F6 | 	mov	local02, local01
0e688     02 20 66 F0 | 	shl	local02, #2
0e68c     0F 21 02 F1 | 	add	local02, local01
0e690     02 20 66 F0 | 	shl	local02, #2
0e694     F2 20 02 F1 | 	add	local02, objptr
0e698     08 20 06 F1 | 	add	local02, #8
0e69c     FF FF FF FF 
0e6a0     10 FF 6B FC | 	wrlong	##-1, local02
0e6a4     01 1E 06 F1 | 	add	local01, #1
0e6a8     41 1E 56 F2 | 	cmps	local01, #65 wc
0e6ac     D4 FF 9F CD |  if_b	jmp	#LR__1130
0e6b0                 | LR__1131
0e6b0     52 00 00 FF 
0e6b4     CC E4 85 F1 | 	sub	objptr, ##42188
0e6b8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0e6b8     00 1E 06 F6 | 	mov	local01, #0
0e6bc                 | LR__1132
0e6bc     0F 21 02 F6 | 	mov	local02, local01
0e6c0     02 20 66 F0 | 	shl	local02, #2
0e6c4     59 00 00 FF 
0e6c8     74 E5 05 F1 | 	add	objptr, ##45940
0e6cc     F2 20 02 F1 | 	add	local02, objptr
0e6d0     10 21 0A FB | 	rdlong	local02, local02 wz
0e6d4     59 00 00 FF 
0e6d8     74 E5 85 F1 | 	sub	objptr, ##45940
0e6dc     34 00 90 AD |  if_e	jmp	#LR__1133
0e6e0     0F 13 02 F6 | 	mov	arg01, local01
0e6e4     00 14 06 F6 | 	mov	arg02, #0
0e6e8     00 16 06 F6 | 	mov	arg03, #0
0e6ec     14 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e6f0     0F 21 02 F6 | 	mov	local02, local01
0e6f4     02 20 66 F0 | 	shl	local02, #2
0e6f8     59 00 00 FF 
0e6fc     74 E5 05 F1 | 	add	objptr, ##45940
0e700     F2 20 02 F1 | 	add	local02, objptr
0e704     10 13 02 FB | 	rdlong	arg01, local02
0e708     59 00 00 FF 
0e70c     74 E5 85 F1 | 	sub	objptr, ##45940
0e710     40 46 B1 FD | 	call	#__system___gc_free
0e714                 | LR__1133
0e714     01 1E 06 F1 | 	add	local01, #1
0e718     10 1E 56 F2 | 	cmps	local01, #16 wc
0e71c     9C FF 9F CD |  if_b	jmp	#LR__1132
0e720     59 00 00 FF 
0e724     C8 E5 05 F1 | 	add	objptr, ##46024
0e728     00 C0 9F FF 
0e72c     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e730     04 E4 05 F1 | 	add	objptr, #4
0e734     00 C0 9F FF 
0e738     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e73c     59 00 00 FF 
0e740     C8 E5 85 F1 | 	sub	objptr, ##46024
0e744     F2 22 02 FB | 	rdlong	local03, objptr
0e748     59 00 00 FF 
0e74c     B4 E5 05 F1 | 	add	objptr, ##46004
0e750     F2 22 62 FC | 	wrlong	local03, objptr
0e754     59 00 00 FF 
0e758     B8 E5 85 F1 | 	sub	objptr, ##46008
0e75c     11 12 06 F6 | 	mov	arg01, #17
0e760     08 14 06 F6 | 	mov	arg02, #8
0e764     10 16 06 F6 | 	mov	arg03, #16
0e768     98 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e76c     10 12 06 F6 | 	mov	arg01, #16
0e770     20 14 06 F6 | 	mov	arg02, #32
0e774     20 16 06 F6 | 	mov	arg03, #32
0e778     88 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e77c     75 01 00 FF 
0e780     15 22 06 F6 | 	mov	local03, ##@LR__5157
0e784     59 00 00 FF 
0e788     E4 E5 05 F1 | 	add	objptr, ##46052
0e78c     F2 22 62 FC | 	wrlong	local03, objptr
0e790     59 00 00 FF 
0e794     E4 E5 85 F1 | 	sub	objptr, ##46052
0e798     58 B5 B0 FD | 	call	#_init_audio
0e79c     A7 F0 03 F6 | 	mov	ptra, fp
0e7a0     B2 00 A0 FD | 	call	#popregs_
0e7a4                 | _do_new_ret
0e7a4     2D 00 64 FD | 	ret
0e7a8                 | 
0e7a8                 | ' 
0e7a8                 | ' '----------------------- goto
0e7a8                 | ' sub do_fast_goto
0e7a8                 | _do_fast_goto
0e7a8     02 4A 05 F6 | 	mov	COUNT_, #2
0e7ac     A8 00 A0 FD | 	call	#pushregs_
0e7b0                 | _do_fast_goto_enter
0e7b0     4A 00 00 FF 
0e7b4     B0 E4 05 F1 | 	add	objptr, ##38064
0e7b8     F2 12 02 FB | 	rdlong	arg01, objptr
0e7bc     09 1F 02 F6 | 	mov	local01, arg01
0e7c0     01 1E 66 F0 | 	shl	local01, #1
0e7c4     09 1F 02 F1 | 	add	local01, arg01
0e7c8     02 1E 66 F0 | 	shl	local01, #2
0e7cc     03 00 00 FF 
0e7d0     04 E4 85 F1 | 	sub	objptr, ##1540
0e7d4     F2 1E 02 F1 | 	add	local01, objptr
0e7d8     0F 21 02 FB | 	rdlong	local02, local01
0e7dc     10 13 02 F6 | 	mov	arg01, local02
0e7e0     47 00 00 FF 
0e7e4     AC E4 85 F1 | 	sub	objptr, ##36524
0e7e8     CC C3 B0 FD | 	call	#_pslpeek
0e7ec     FD 12 02 F6 | 	mov	arg01, result1
0e7f0                 | ' 
0e7f0                 | ' testptr=compiledline(lineptr_e).result.uresult
0e7f0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e7f0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e7f0     4A 00 00 FF 
0e7f4     B0 E4 05 F1 | 	add	objptr, ##38064
0e7f8     F2 FA 01 FB | 	rdlong	result1, objptr
0e7fc     FD 1E 02 F6 | 	mov	local01, result1
0e800     01 1E 66 F0 | 	shl	local01, #1
0e804     FD 1E 02 F1 | 	add	local01, result1
0e808     02 1E 66 F0 | 	shl	local01, #2
0e80c     03 00 00 FF 
0e810     04 E4 85 F1 | 	sub	objptr, ##1540
0e814     F2 1E 02 F1 | 	add	local01, objptr
0e818     04 1E 06 F1 | 	add	local01, #4
0e81c     0F 1F 02 FB | 	rdlong	local01, local01
0e820     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e824     47 00 00 FF 
0e828     AC E4 85 F1 | 	sub	objptr, ##36524
0e82c     58 00 90 5D |  if_ne	jmp	#LR__1140
0e830     58 00 00 FF 
0e834     EC E4 05 F1 | 	add	objptr, ##45292
0e838     F2 20 62 FC | 	wrlong	local02, objptr
0e83c     0E 00 00 FF 
0e840     40 E4 85 F1 | 	sub	objptr, ##7232
0e844     F2 20 02 FB | 	rdlong	local02, objptr
0e848     01 20 86 F1 | 	sub	local02, #1
0e84c     04 E4 05 F1 | 	add	objptr, #4
0e850     F2 20 62 FC | 	wrlong	local02, objptr
0e854                 | '   runptr=testptr
0e854                 | '   lineptr_e=lineptr-1
0e854                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e854     0E 00 00 FF 
0e858     60 E4 05 F1 | 	add	objptr, ##7264
0e85c     F2 20 02 FB | 	rdlong	local02, objptr
0e860     58 00 00 FF 
0e864     10 E5 85 F1 | 	sub	objptr, ##45328
0e868     FF FF 3F FF 
0e86c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e870     58 00 00 AF 
0e874     10 E5 05 A1 |  if_e	add	objptr, ##45328
0e878     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e87c     58 00 00 AF 
0e880     10 E5 85 A1 |  if_e	sub	objptr, ##45328
0e884     04 00 90 FD | 	jmp	#LR__1141
0e888                 | LR__1140
0e888     0C 00 B0 FD | 	call	#_do_find_goto
0e88c                 | LR__1141
0e88c     A7 F0 03 F6 | 	mov	ptra, fp
0e890     B2 00 A0 FD | 	call	#popregs_
0e894                 | _do_fast_goto_ret
0e894     2D 00 64 FD | 	ret
0e898                 | 
0e898                 | ' 
0e898                 | ' 
0e898                 | ' 
0e898                 | ' 
0e898                 | ' sub do_find_goto
0e898                 | _do_find_goto
0e898     03 4A 05 F6 | 	mov	COUNT_, #3
0e89c     A8 00 A0 FD | 	call	#pushregs_
0e8a0     24 F0 07 F1 | 	add	ptra, #36
0e8a4                 | _do_find_goto_enter
0e8a4     4A 00 00 FF 
0e8a8     B0 E4 05 F1 | 	add	objptr, ##38064
0e8ac     F2 1E 02 FB | 	rdlong	local01, objptr
0e8b0     0F 21 02 F6 | 	mov	local02, local01
0e8b4     01 20 66 F0 | 	shl	local02, #1
0e8b8     0F 21 02 F1 | 	add	local02, local01
0e8bc     02 20 66 F0 | 	shl	local02, #2
0e8c0     03 00 00 FF 
0e8c4     04 E4 85 F1 | 	sub	objptr, ##1540
0e8c8     F2 20 02 F1 | 	add	local02, objptr
0e8cc     04 20 06 F1 | 	add	local02, #4
0e8d0     10 21 02 FB | 	rdlong	local02, local02
0e8d4     A7 20 62 FC | 	wrlong	local02, fp
0e8d8     03 00 00 FF 
0e8dc     08 E4 05 F1 | 	add	objptr, ##1544
0e8e0     F2 22 02 FB | 	rdlong	local03, objptr
0e8e4     4A 00 00 FF 
0e8e8     B4 E4 85 F1 | 	sub	objptr, ##38068
0e8ec     04 4E 05 F1 | 	add	fp, #4
0e8f0     A7 22 62 FC | 	wrlong	local03, fp
0e8f4     04 4E 85 F1 | 	sub	fp, #4
0e8f8                 | ' 
0e8f8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e8f8                 | '  ' print "find goto"                                                                     'print gotoline 
0e8f8                 | ' gotoptr=programstart
0e8f8                 | ' do
0e8f8                 | LR__1150
0e8f8     0C 4E 05 F1 | 	add	fp, #12
0e8fc     A7 12 02 F6 | 	mov	arg01, fp
0e900     08 4E 85 F1 | 	sub	fp, #8
0e904     A7 14 02 FB | 	rdlong	arg02, fp
0e908     04 4E 85 F1 | 	sub	fp, #4
0e90c     18 16 06 F6 | 	mov	arg03, #24
0e910     0B 00 00 FF 
0e914     CC E4 05 F1 | 	add	objptr, ##5836
0e918     70 F8 B0 FD | 	call	#_psram_spin2_read1
0e91c     0B 00 00 FF 
0e920     CC E4 85 F1 | 	sub	objptr, ##5836
0e924                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e924                 | '   if gotoheader(0)<>$FFFFFFFF then
0e924     0C 4E 05 F1 | 	add	fp, #12
0e928     A7 22 02 FB | 	rdlong	local03, fp
0e92c     0C 4E 85 F1 | 	sub	fp, #12
0e930     FF FF 7F FF 
0e934     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e938     24 00 90 AD |  if_e	jmp	#LR__1151
0e93c     04 4E 05 F1 | 	add	fp, #4
0e940     A7 22 02 FB | 	rdlong	local03, fp
0e944     04 4E 05 F1 | 	add	fp, #4
0e948     A7 22 62 FC | 	wrlong	local03, fp
0e94c     18 4E 05 F1 | 	add	fp, #24
0e950     A7 22 02 FB | 	rdlong	local03, fp
0e954     1C 4E 85 F1 | 	sub	fp, #28
0e958     A7 22 62 FC | 	wrlong	local03, fp
0e95c     04 4E 85 F1 | 	sub	fp, #4
0e960                 | LR__1151
0e960     20 4E 05 F1 | 	add	fp, #32
0e964     A7 22 02 FB | 	rdlong	local03, fp
0e968     20 4E 85 F1 | 	sub	fp, #32
0e96c     FF FF 3F FF 
0e970     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e974     0C 4E 05 51 |  if_ne	add	fp, #12
0e978     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e97c     0C 4E 85 51 |  if_ne	sub	fp, #12
0e980     FF FF 7F 5F 
0e984     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e988     18 00 90 AD |  if_e	jmp	#LR__1152
0e98c     0C 4E 05 F1 | 	add	fp, #12
0e990     A7 22 02 FB | 	rdlong	local03, fp
0e994     0C 4E 85 F1 | 	sub	fp, #12
0e998     A7 20 02 FB | 	rdlong	local02, fp
0e99c     10 23 0A F2 | 	cmp	local03, local02 wz
0e9a0     54 FF 9F 5D |  if_ne	jmp	#LR__1150
0e9a4                 | LR__1152
0e9a4                 | ' 
0e9a4                 | ' if gotoheader(0)=gotoline then
0e9a4     0C 4E 05 F1 | 	add	fp, #12
0e9a8     A7 22 02 FB | 	rdlong	local03, fp
0e9ac     0C 4E 85 F1 | 	sub	fp, #12
0e9b0     A7 1E 02 FB | 	rdlong	local01, fp
0e9b4     0F 23 0A F2 | 	cmp	local03, local01 wz
0e9b8     D8 00 90 5D |  if_ne	jmp	#LR__1153
0e9bc     4A 00 00 FF 
0e9c0     B0 E4 05 F1 | 	add	objptr, ##38064
0e9c4     F2 1E 02 FB | 	rdlong	local01, objptr
0e9c8     0F 21 02 F6 | 	mov	local02, local01
0e9cc     01 20 66 F0 | 	shl	local02, #1
0e9d0     0F 21 02 F1 | 	add	local02, local01
0e9d4     02 20 66 F0 | 	shl	local02, #2
0e9d8     03 00 00 FF 
0e9dc     04 E4 85 F1 | 	sub	objptr, ##1540
0e9e0     F2 20 02 F1 | 	add	local02, objptr
0e9e4     08 4E 05 F1 | 	add	fp, #8
0e9e8     A7 22 02 FB | 	rdlong	local03, fp
0e9ec     10 23 62 FC | 	wrlong	local03, local02
0e9f0     03 00 00 FF 
0e9f4     04 E4 05 F1 | 	add	objptr, ##1540
0e9f8     F2 1E 02 FB | 	rdlong	local01, objptr
0e9fc     0F 21 02 F6 | 	mov	local02, local01
0ea00     01 20 66 F0 | 	shl	local02, #1
0ea04     0F 21 02 F1 | 	add	local02, local01
0ea08     02 20 66 F0 | 	shl	local02, #2
0ea0c     03 00 00 FF 
0ea10     04 E4 85 F1 | 	sub	objptr, ##1540
0ea14     F2 20 02 F1 | 	add	local02, objptr
0ea18     08 20 06 F1 | 	add	local02, #8
0ea1c     10 9D 68 FC | 	wrlong	#78, local02
0ea20     03 00 00 FF 
0ea24     04 E4 05 F1 | 	add	objptr, ##1540
0ea28     F2 20 02 FB | 	rdlong	local02, objptr
0ea2c     10 13 02 F6 | 	mov	arg01, local02
0ea30     01 12 66 F0 | 	shl	arg01, #1
0ea34     10 13 02 F1 | 	add	arg01, local02
0ea38     02 12 66 F0 | 	shl	arg01, #2
0ea3c     03 00 00 FF 
0ea40     04 E4 85 F1 | 	sub	objptr, ##1540
0ea44     F2 12 02 F1 | 	add	arg01, objptr
0ea48     11 00 00 FF 
0ea4c     48 E4 05 F1 | 	add	objptr, ##8776
0ea50     F2 14 02 FB | 	rdlong	arg02, objptr
0ea54     02 22 06 F6 | 	mov	local03, #2
0ea58     10 23 02 F1 | 	add	local03, local02
0ea5c     13 00 00 FF 
0ea60     60 E4 85 F1 | 	sub	objptr, ##9824
0ea64     F2 16 02 FB | 	rdlong	arg03, objptr
0ea68     0B 23 02 FD | 	qmul	local03, arg03
0ea6c     08 4E 85 F1 | 	sub	fp, #8
0ea70     39 00 00 FF 
0ea74     C8 E5 85 F1 | 	sub	objptr, ##29640
0ea78     18 22 62 FD | 	getqx	local03
0ea7c     11 15 02 F1 | 	add	arg02, local03
0ea80     A4 F7 B0 FD | 	call	#_psram_spin2_write
0ea84     0B 00 00 FF 
0ea88     CC E4 85 F1 | 	sub	objptr, ##5836
0ea8c     18 FD BF FD | 	call	#_do_fast_goto
0ea90     08 00 90 FD | 	jmp	#LR__1154
0ea94                 | LR__1153
0ea94     26 12 06 F6 | 	mov	arg01, #38
0ea98     88 BE B0 FD | 	call	#_printerror
0ea9c                 | LR__1154
0ea9c     A7 F0 03 F6 | 	mov	ptra, fp
0eaa0     B2 00 A0 FD | 	call	#popregs_
0eaa4                 | _do_find_goto_ret
0eaa4     2D 00 64 FD | 	ret
0eaa8                 | 
0eaa8                 | ' 
0eaa8                 | ' sub do_slow_goto
0eaa8                 | _do_slow_goto
0eaa8     02 4A 05 F6 | 	mov	COUNT_, #2
0eaac     A8 00 A0 FD | 	call	#pushregs_
0eab0     30 F0 07 F1 | 	add	ptra, #48
0eab4     E0 BD BF FD | 	call	#_pop
0eab8     FF 1E 02 F6 | 	mov	local01, result3
0eabc     24 4E 05 F1 | 	add	fp, #36
0eac0     A7 FA 61 FC | 	wrlong	result1, fp
0eac4     04 4E 05 F1 | 	add	fp, #4
0eac8     A7 FC 61 FC | 	wrlong	result2, fp
0eacc     04 4E 05 F1 | 	add	fp, #4
0ead0     A7 1E 62 FC | 	wrlong	local01, fp
0ead4     08 4E 85 F1 | 	sub	fp, #8
0ead8     A7 12 02 F6 | 	mov	arg01, fp
0eadc     24 4E 85 F1 | 	sub	fp, #36
0eae0     50 4A B0 FD | 	call	#_converttoint
0eae4     A7 FA 61 FC | 	wrlong	result1, fp
0eae8     4A 00 00 FF 
0eaec     B4 E4 05 F1 | 	add	objptr, ##38068
0eaf0     F2 20 02 FB | 	rdlong	local02, objptr
0eaf4     4A 00 00 FF 
0eaf8     B4 E4 85 F1 | 	sub	objptr, ##38068
0eafc     04 4E 05 F1 | 	add	fp, #4
0eb00     A7 20 62 FC | 	wrlong	local02, fp
0eb04     04 4E 85 F1 | 	sub	fp, #4
0eb08                 | ' 
0eb08                 | ' t1=pop() : gotoline=converttoint(t1)
0eb08                 | ' gotoptr=programstart
0eb08                 | ' do
0eb08                 | LR__1160
0eb08     0C 4E 05 F1 | 	add	fp, #12
0eb0c     A7 12 02 F6 | 	mov	arg01, fp
0eb10     08 4E 85 F1 | 	sub	fp, #8
0eb14     A7 14 02 FB | 	rdlong	arg02, fp
0eb18     04 4E 85 F1 | 	sub	fp, #4
0eb1c     18 16 06 F6 | 	mov	arg03, #24
0eb20     0B 00 00 FF 
0eb24     CC E4 05 F1 | 	add	objptr, ##5836
0eb28     60 F6 B0 FD | 	call	#_psram_spin2_read1
0eb2c     0B 00 00 FF 
0eb30     CC E4 85 F1 | 	sub	objptr, ##5836
0eb34                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0eb34                 | '   if gotoheader(0)<>$FFFFFFFF then
0eb34     0C 4E 05 F1 | 	add	fp, #12
0eb38     A7 20 02 FB | 	rdlong	local02, fp
0eb3c     0C 4E 85 F1 | 	sub	fp, #12
0eb40     FF FF 7F FF 
0eb44     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0eb48     24 00 90 AD |  if_e	jmp	#LR__1161
0eb4c     04 4E 05 F1 | 	add	fp, #4
0eb50     A7 20 02 FB | 	rdlong	local02, fp
0eb54     04 4E 05 F1 | 	add	fp, #4
0eb58     A7 20 62 FC | 	wrlong	local02, fp
0eb5c     18 4E 05 F1 | 	add	fp, #24
0eb60     A7 20 02 FB | 	rdlong	local02, fp
0eb64     1C 4E 85 F1 | 	sub	fp, #28
0eb68     A7 20 62 FC | 	wrlong	local02, fp
0eb6c     04 4E 85 F1 | 	sub	fp, #4
0eb70                 | LR__1161
0eb70     20 4E 05 F1 | 	add	fp, #32
0eb74     A7 20 02 FB | 	rdlong	local02, fp
0eb78     20 4E 85 F1 | 	sub	fp, #32
0eb7c     FF FF 3F FF 
0eb80     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0eb84     0C 4E 05 51 |  if_ne	add	fp, #12
0eb88     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eb8c     0C 4E 85 51 |  if_ne	sub	fp, #12
0eb90     FF FF 7F 5F 
0eb94     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0eb98     18 00 90 AD |  if_e	jmp	#LR__1162
0eb9c     0C 4E 05 F1 | 	add	fp, #12
0eba0     A7 20 02 FB | 	rdlong	local02, fp
0eba4     0C 4E 85 F1 | 	sub	fp, #12
0eba8     A7 16 02 FB | 	rdlong	arg03, fp
0ebac     0B 21 0A F2 | 	cmp	local02, arg03 wz
0ebb0     54 FF 9F 5D |  if_ne	jmp	#LR__1160
0ebb4                 | LR__1162
0ebb4                 | ' if gotoheader(0)=gotoline then  
0ebb4     0C 4E 05 F1 | 	add	fp, #12
0ebb8     A7 20 02 FB | 	rdlong	local02, fp
0ebbc     0C 4E 85 F1 | 	sub	fp, #12
0ebc0     A7 1E 02 FB | 	rdlong	local01, fp
0ebc4     0F 21 0A F2 | 	cmp	local02, local01 wz
0ebc8     60 00 90 5D |  if_ne	jmp	#LR__1163
0ebcc     08 4E 05 F1 | 	add	fp, #8
0ebd0     A7 20 02 FB | 	rdlong	local02, fp
0ebd4     08 4E 85 F1 | 	sub	fp, #8
0ebd8     58 00 00 FF 
0ebdc     EC E4 05 F1 | 	add	objptr, ##45292
0ebe0     F2 20 62 FC | 	wrlong	local02, objptr
0ebe4     0E 00 00 FF 
0ebe8     40 E4 85 F1 | 	sub	objptr, ##7232
0ebec     F2 20 02 FB | 	rdlong	local02, objptr
0ebf0     01 20 86 F1 | 	sub	local02, #1
0ebf4     04 E4 05 F1 | 	add	objptr, #4
0ebf8     F2 20 62 FC | 	wrlong	local02, objptr
0ebfc                 | '    runptr=oldgotoptr
0ebfc                 | '    lineptr_e=lineptr-1
0ebfc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
0ebfc     0E 00 00 FF 
0ec00     60 E4 05 F1 | 	add	objptr, ##7264
0ec04     F2 20 02 FB | 	rdlong	local02, objptr
0ec08     58 00 00 FF 
0ec0c     10 E5 85 F1 | 	sub	objptr, ##45328
0ec10     FF FF 3F FF 
0ec14     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ec18     58 00 00 AF 
0ec1c     10 E5 05 A1 |  if_e	add	objptr, ##45328
0ec20     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ec24     58 00 00 AF 
0ec28     10 E5 85 A1 |  if_e	sub	objptr, ##45328
0ec2c                 | LR__1163
0ec2c     A7 F0 03 F6 | 	mov	ptra, fp
0ec30     B2 00 A0 FD | 	call	#popregs_
0ec34                 | _do_slow_goto_ret
0ec34     2D 00 64 FD | 	ret
0ec38                 | 
0ec38                 | ' 
0ec38                 | ' '----------------------- Error processing
0ec38                 | ' 
0ec38                 | ' sub do_error
0ec38                 | _do_error
0ec38     01 4A 05 F6 | 	mov	COUNT_, #1
0ec3c     A8 00 A0 FD | 	call	#pushregs_
0ec40     4A 00 00 FF 
0ec44     B0 E4 05 F1 | 	add	objptr, ##38064
0ec48     F2 18 02 FB | 	rdlong	arg04, objptr
0ec4c     0C 17 02 F6 | 	mov	arg03, arg04
0ec50     01 16 66 F0 | 	shl	arg03, #1
0ec54     0C 17 02 F1 | 	add	arg03, arg04
0ec58     02 16 66 F0 | 	shl	arg03, #2
0ec5c     03 00 00 FF 
0ec60     04 E4 85 F1 | 	sub	objptr, ##1540
0ec64     F2 16 02 F1 | 	add	arg03, objptr
0ec68     0B 1F 02 FB | 	rdlong	local01, arg03
0ec6c                 | ' r=compiledline(lineptr_e).result.uresult
0ec6c                 | ' print "Error ";r;": ";errors$(r)
0ec6c     00 12 06 F6 | 	mov	arg01, #0
0ec70     47 00 00 FF 
0ec74     AC E4 85 F1 | 	sub	objptr, ##36524
0ec78     E8 5A B1 FD | 	call	#__system___getiolock_0485
0ec7c     FD 12 02 F6 | 	mov	arg01, result1
0ec80     48 01 B1 FD | 	call	#__system___lockmem
0ec84     75 01 00 FF 
0ec88     20 14 06 F6 | 	mov	arg02, ##@LR__5158
0ec8c     00 12 06 F6 | 	mov	arg01, #0
0ec90     00 16 06 F6 | 	mov	arg03, #0
0ec94     28 0E B1 FD | 	call	#__system___basic_print_string
0ec98     00 12 06 F6 | 	mov	arg01, #0
0ec9c     0F 15 02 F6 | 	mov	arg02, local01
0eca0     00 16 06 F6 | 	mov	arg03, #0
0eca4     0A 18 06 F6 | 	mov	arg04, #10
0eca8     98 0E B1 FD | 	call	#__system___basic_print_unsigned
0ecac     75 01 00 FF 
0ecb0     27 14 06 F6 | 	mov	arg02, ##@LR__5159
0ecb4     00 12 06 F6 | 	mov	arg01, #0
0ecb8     00 16 06 F6 | 	mov	arg03, #0
0ecbc     00 0E B1 FD | 	call	#__system___basic_print_string
0ecc0     02 1E 66 F0 | 	shl	local01, #2
0ecc4     45 00 00 FF 
0ecc8     AC E4 05 F1 | 	add	objptr, ##35500
0eccc     F2 1E 02 F1 | 	add	local01, objptr
0ecd0     0F 15 02 FB | 	rdlong	arg02, local01
0ecd4     00 12 06 F6 | 	mov	arg01, #0
0ecd8     00 16 06 F6 | 	mov	arg03, #0
0ecdc     45 00 00 FF 
0ece0     AC E4 85 F1 | 	sub	objptr, ##35500
0ece4     D8 0D B1 FD | 	call	#__system___basic_print_string
0ece8     00 12 06 F6 | 	mov	arg01, #0
0ecec     0A 14 06 F6 | 	mov	arg02, #10
0ecf0     00 16 06 F6 | 	mov	arg03, #0
0ecf4     70 0D B1 FD | 	call	#__system___basic_print_char
0ecf8     00 12 06 F6 | 	mov	arg01, #0
0ecfc     64 5A B1 FD | 	call	#__system___getiolock_0485
0ed00     FD 00 68 FC | 	wrlong	#0, result1
0ed04     A7 F0 03 F6 | 	mov	ptra, fp
0ed08     B2 00 A0 FD | 	call	#popregs_
0ed0c                 | _do_error_ret
0ed0c     2D 00 64 FD | 	ret
0ed10                 | 
0ed10                 | ' 
0ed10                 | ' 
0ed10                 | ' '------------------ Assigning to a variable  
0ed10                 | ' 
0ed10                 | ' function  convertstring(psaddr as ulong) as string
0ed10                 | _convertstring
0ed10     04 4A 05 F6 | 	mov	COUNT_, #4
0ed14     A8 00 A0 FD | 	call	#pushregs_
0ed18     09 1F 02 F6 | 	mov	local01, arg01
0ed1c     98 BE B0 FD | 	call	#_pslpeek
0ed20     FD 20 02 F6 | 	mov	local02, result1
0ed24     75 01 00 FF 
0ed28     2A 22 06 F6 | 	mov	local03, ##@LR__5160
0ed2c                 | ' 'print "in convertstring: psaddr=";psaddr
0ed2c                 | ' l=pslpeek(psaddr)
0ed2c                 | ' 'print "in convertstring: len=";l
0ed2c                 | ' s="" 
0ed2c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ed2c     01 24 06 F6 | 	mov	local04, #1
0ed30     01 20 06 F1 | 	add	local02, #1
0ed34                 | LR__1170
0ed34     10 25 52 F2 | 	cmps	local04, local02 wc
0ed38     30 00 90 3D |  if_ae	jmp	#LR__1171
0ed3c     0F 13 02 F6 | 	mov	arg01, local01
0ed40     03 12 06 F1 | 	add	arg01, #3
0ed44     12 13 02 F1 | 	add	arg01, local04
0ed48     14 BE B0 FD | 	call	#_pspeek
0ed4c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ed50     4C 22 B1 FD | 	call	#__system__Chr_S
0ed54     FD 14 02 F6 | 	mov	arg02, result1
0ed58     11 13 02 F6 | 	mov	arg01, local03
0ed5c     C8 00 B1 FD | 	call	#__system___string_concat
0ed60     FD 22 02 F6 | 	mov	local03, result1
0ed64     01 24 06 F1 | 	add	local04, #1
0ed68     C8 FF 9F FD | 	jmp	#LR__1170
0ed6c                 | LR__1171
0ed6c                 | ' 'print "in convertstring: str=";s
0ed6c                 | ' return s
0ed6c     11 FB 01 F6 | 	mov	result1, local03
0ed70     A7 F0 03 F6 | 	mov	ptra, fp
0ed74     B2 00 A0 FD | 	call	#popregs_
0ed78                 | _convertstring_ret
0ed78     2D 00 64 FD | 	ret
0ed7c                 | 
0ed7c                 | ' 
0ed7c                 | ' sub do_assign
0ed7c                 | _do_assign
0ed7c     05 4A 05 F6 | 	mov	COUNT_, #5
0ed80     A8 00 A0 FD | 	call	#pushregs_
0ed84     44 F0 07 F1 | 	add	ptra, #68
0ed88     4A 00 00 FF 
0ed8c     B0 E4 05 F1 | 	add	objptr, ##38064
0ed90     F2 16 02 FB | 	rdlong	arg03, objptr
0ed94     0B 15 02 F6 | 	mov	arg02, arg03
0ed98     01 14 66 F0 | 	shl	arg02, #1
0ed9c     0B 15 02 F1 | 	add	arg02, arg03
0eda0     02 14 66 F0 | 	shl	arg02, #2
0eda4     03 00 00 FF 
0eda8     04 E4 85 F1 | 	sub	objptr, ##1540
0edac     F2 14 02 F1 | 	add	arg02, objptr
0edb0     0A 15 02 FB | 	rdlong	arg02, arg02
0edb4     18 4E 05 F1 | 	add	fp, #24
0edb8     A7 14 62 FC | 	wrlong	arg02, fp
0edbc                 | ' 
0edbc                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0edbc                 | ' 
0edbc                 | ' if variables(varnum).vartype<array_no_type then 
0edbc     18 4E 85 F1 | 	sub	fp, #24
0edc0     04 14 66 F0 | 	shl	arg02, #4
0edc4     32 00 00 FF 
0edc8     84 E4 85 F1 | 	sub	objptr, ##25732
0edcc     F2 14 02 F1 | 	add	arg02, objptr
0edd0     0C 14 06 F1 | 	add	arg02, #12
0edd4     0A 17 02 FB | 	rdlong	arg03, arg02
0edd8     00 17 16 F2 | 	cmp	arg03, #256 wc
0eddc     15 00 00 FF 
0ede0     28 E4 85 F1 | 	sub	objptr, ##10792
0ede4     18 01 90 3D |  if_ae	jmp	#LR__1180
0ede8     AC BA BF FD | 	call	#_pop
0edec     A7 FA 61 FC | 	wrlong	result1, fp
0edf0     04 4E 05 F1 | 	add	fp, #4
0edf4     A7 FC 61 FC | 	wrlong	result2, fp
0edf8     04 4E 05 F1 | 	add	fp, #4
0edfc     A7 FE 61 FC | 	wrlong	result3, fp
0ee00     08 4E 85 F1 | 	sub	fp, #8
0ee04     A7 16 02 FB | 	rdlong	arg03, fp
0ee08     04 4E 05 F1 | 	add	fp, #4
0ee0c     A7 14 02 FB | 	rdlong	arg02, fp
0ee10     14 4E 05 F1 | 	add	fp, #20
0ee14     A7 12 02 FB | 	rdlong	arg01, fp
0ee18     04 12 66 F0 | 	shl	arg01, #4
0ee1c     15 00 00 FF 
0ee20     28 E4 05 F1 | 	add	objptr, ##10792
0ee24     F2 12 02 F1 | 	add	arg01, objptr
0ee28     04 12 06 F1 | 	add	arg01, #4
0ee2c     09 17 62 FC | 	wrlong	arg03, arg01
0ee30     A7 16 02 FB | 	rdlong	arg03, fp
0ee34     04 16 66 F0 | 	shl	arg03, #4
0ee38     F2 16 02 F1 | 	add	arg03, objptr
0ee3c     08 16 06 F1 | 	add	arg03, #8
0ee40     0B 15 62 FC | 	wrlong	arg02, arg03
0ee44     A7 16 02 FB | 	rdlong	arg03, fp
0ee48     04 16 66 F0 | 	shl	arg03, #4
0ee4c     F2 16 02 F1 | 	add	arg03, objptr
0ee50     10 4E 85 F1 | 	sub	fp, #16
0ee54     A7 14 02 FB | 	rdlong	arg02, fp
0ee58     0C 16 06 F1 | 	add	arg03, #12
0ee5c     0B 15 62 FC | 	wrlong	arg02, arg03
0ee60                 | '   t1=pop() 
0ee60                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0ee60                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0ee60                 | '   if variables(varnum).vartype<>result_string2 then return
0ee60     10 4E 05 F1 | 	add	fp, #16
0ee64     A7 16 02 FB | 	rdlong	arg03, fp
0ee68     18 4E 85 F1 | 	sub	fp, #24
0ee6c     04 16 66 F0 | 	shl	arg03, #4
0ee70     F2 16 02 F1 | 	add	arg03, objptr
0ee74     0C 16 06 F1 | 	add	arg03, #12
0ee78     0B 17 02 FB | 	rdlong	arg03, arg03
0ee7c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ee80     15 00 00 FF 
0ee84     28 E4 85 F1 | 	sub	objptr, ##10792
0ee88     E4 04 90 5D |  if_ne	jmp	#LR__1203
0ee8c     18 4E 05 F1 | 	add	fp, #24
0ee90     A7 16 02 FB | 	rdlong	arg03, fp
0ee94     0B 1F 02 F6 | 	mov	local01, arg03
0ee98     04 1E 66 F0 | 	shl	local01, #4
0ee9c     15 00 00 FF 
0eea0     28 E4 05 F1 | 	add	objptr, ##10792
0eea4     F2 1E 02 F1 | 	add	local01, objptr
0eea8     18 4E 85 F1 | 	sub	fp, #24
0eeac     04 16 66 F0 | 	shl	arg03, #4
0eeb0     F2 16 02 F1 | 	add	arg03, objptr
0eeb4     04 16 06 F1 | 	add	arg03, #4
0eeb8     0B 13 02 FB | 	rdlong	arg01, arg03
0eebc     15 00 00 FF 
0eec0     28 E4 85 F1 | 	sub	objptr, ##10792
0eec4     48 FE BF FD | 	call	#_convertstring
0eec8     04 1E 06 F1 | 	add	local01, #4
0eecc     0F FB 61 FC | 	wrlong	result1, local01
0eed0     18 4E 05 F1 | 	add	fp, #24
0eed4     A7 1E 02 FB | 	rdlong	local01, fp
0eed8     18 4E 85 F1 | 	sub	fp, #24
0eedc     04 1E 66 F0 | 	shl	local01, #4
0eee0     15 00 00 FF 
0eee4     28 E4 05 F1 | 	add	objptr, ##10792
0eee8     F2 1E 02 F1 | 	add	local01, objptr
0eeec     0C 1E 06 F1 | 	add	local01, #12
0eef0     0F 3F 68 FC | 	wrlong	#31, local01
0eef4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0eef4                 | '   variables(varnum).vartype=result_string
0eef4                 | '   return
0eef4     15 00 00 FF 
0eef8     28 E4 85 F1 | 	sub	objptr, ##10792
0eefc     70 04 90 FD | 	jmp	#LR__1203
0ef00                 | LR__1180
0ef00                 | ' for i=0 to 2 : arrid(i)=0 : next i
0ef00     1C 4E 05 F1 | 	add	fp, #28
0ef04     A7 00 68 FC | 	wrlong	#0, fp
0ef08     97 16 48 FB | 	callpa	#(@LR__1182-@LR__1181)>>2,fcache_load_ptr_
0ef0c                 | LR__1181
0ef0c     A7 1E 02 FB | 	rdlong	local01, fp
0ef10     02 1E 66 F0 | 	shl	local01, #2
0ef14     18 4E 05 F1 | 	add	fp, #24
0ef18     A7 1E 02 F1 | 	add	local01, fp
0ef1c     0F 01 68 FC | 	wrlong	#0, local01
0ef20     18 4E 85 F1 | 	sub	fp, #24
0ef24     A7 1E 02 FB | 	rdlong	local01, fp
0ef28     01 1E 06 F1 | 	add	local01, #1
0ef2c     A7 1E 62 FC | 	wrlong	local01, fp
0ef30     03 1E 16 F2 | 	cmp	local01, #3 wc
0ef34     D4 FF 9F CD |  if_b	jmp	#LR__1181
0ef38                 | LR__1182
0ef38     4A 00 00 FF 
0ef3c     B0 E4 05 F1 | 	add	objptr, ##38064
0ef40     F2 16 02 FB | 	rdlong	arg03, objptr
0ef44     0B 1F 02 F6 | 	mov	local01, arg03
0ef48     01 1E 66 F0 | 	shl	local01, #1
0ef4c     0B 1F 02 F1 | 	add	local01, arg03
0ef50     02 1E 66 F0 | 	shl	local01, #2
0ef54     03 00 00 FF 
0ef58     04 E4 85 F1 | 	sub	objptr, ##1540
0ef5c     F2 1E 02 F1 | 	add	local01, objptr
0ef60     04 1E 06 F1 | 	add	local01, #4
0ef64     0F 21 02 FB | 	rdlong	local02, local01
0ef68     04 4E 05 F1 | 	add	fp, #4
0ef6c     A7 20 62 FC | 	wrlong	local02, fp
0ef70     20 4E 85 F1 | 	sub	fp, #32
0ef74     47 00 00 FF 
0ef78     AC E4 85 F1 | 	sub	objptr, ##36524
0ef7c     18 B9 BF FD | 	call	#_pop
0ef80     A7 FA 61 FC | 	wrlong	result1, fp
0ef84     04 4E 05 F1 | 	add	fp, #4
0ef88     A7 FC 61 FC | 	wrlong	result2, fp
0ef8c     04 4E 05 F1 | 	add	fp, #4
0ef90     A7 FE 61 FC | 	wrlong	result3, fp
0ef94                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0ef94                 | ' t1=pop() ' var value
0ef94                 | ' if numpar>0 then
0ef94     18 4E 05 F1 | 	add	fp, #24
0ef98     A7 22 02 FB | 	rdlong	local03, fp
0ef9c     20 4E 85 F1 | 	sub	fp, #32
0efa0     01 22 16 F2 | 	cmp	local03, #1 wc
0efa4     78 00 90 CD |  if_b	jmp	#LR__1185
0efa8                 | '   for i=numpar to 1 step -1
0efa8     20 4E 05 F1 | 	add	fp, #32
0efac     A7 24 0A FB | 	rdlong	local04, fp wz
0efb0     04 4E 85 F1 | 	sub	fp, #4
0efb4     A7 24 62 FC | 	wrlong	local04, fp
0efb8     1C 4E 85 F1 | 	sub	fp, #28
0efbc     60 00 90 AD |  if_e	jmp	#LR__1184
0efc0                 | LR__1183
0efc0     D4 B8 BF FD | 	call	#_pop
0efc4     0C 4E 05 F1 | 	add	fp, #12
0efc8     A7 FA 61 FC | 	wrlong	result1, fp
0efcc     04 4E 05 F1 | 	add	fp, #4
0efd0     A7 FC 61 FC | 	wrlong	result2, fp
0efd4     04 4E 05 F1 | 	add	fp, #4
0efd8     A7 FE 61 FC | 	wrlong	result3, fp
0efdc     08 4E 05 F1 | 	add	fp, #8
0efe0     A7 22 02 FB | 	rdlong	local03, fp
0efe4     01 22 86 F1 | 	sub	local03, #1
0efe8     02 22 66 F0 | 	shl	local03, #2
0efec     18 4E 05 F1 | 	add	fp, #24
0eff0     A7 22 02 F1 | 	add	local03, fp
0eff4     28 4E 85 F1 | 	sub	fp, #40
0eff8     A7 12 02 F6 | 	mov	arg01, fp
0effc     0C 4E 85 F1 | 	sub	fp, #12
0f000     30 45 B0 FD | 	call	#_converttoint
0f004     11 FB 61 FC | 	wrlong	result1, local03
0f008     1C 4E 05 F1 | 	add	fp, #28
0f00c     A7 24 02 FB | 	rdlong	local04, fp
0f010     01 24 8E F1 | 	sub	local04, #1 wz
0f014     A7 24 62 FC | 	wrlong	local04, fp
0f018     1C 4E 85 F1 | 	sub	fp, #28
0f01c     A0 FF 9F 5D |  if_ne	jmp	#LR__1183
0f020                 | LR__1184
0f020                 | LR__1185
0f020     18 4E 05 F1 | 	add	fp, #24
0f024     A7 1E 02 FB | 	rdlong	local01, fp
0f028     04 1E 66 F0 | 	shl	local01, #4
0f02c     15 00 00 FF 
0f030     28 E4 05 F1 | 	add	objptr, ##10792
0f034     F2 1E 02 F1 | 	add	local01, objptr
0f038     04 1E 06 F1 | 	add	local01, #4
0f03c     0F 13 02 FB | 	rdlong	arg01, local01
0f040     0C 4E 05 F1 | 	add	fp, #12
0f044     A7 12 62 FC | 	wrlong	arg01, fp
0f048     24 4E 85 F1 | 	sub	fp, #36
0f04c     15 00 00 FF 
0f050     28 E4 85 F1 | 	sub	objptr, ##10792
0f054     60 BB B0 FD | 	call	#_pslpeek
0f058     FD 24 32 F9 | 	getword	local04, result1, #0
0f05c     28 4E 05 F1 | 	add	fp, #40
0f060     A7 24 62 FC | 	wrlong	local04, fp
0f064     04 4E 85 F1 | 	sub	fp, #4
0f068     A7 12 02 FB | 	rdlong	arg01, fp
0f06c     24 4E 85 F1 | 	sub	fp, #36
0f070     02 12 06 F1 | 	add	arg01, #2
0f074     E8 BA B0 FD | 	call	#_pspeek
0f078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f07c     2C 4E 05 F1 | 	add	fp, #44
0f080     A7 FA 61 FC | 	wrlong	result1, fp
0f084                 | ' esize=pspeek(arrptr+2)
0f084                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0f084     08 4E 85 F1 | 	sub	fp, #8
0f088     A7 12 02 FB | 	rdlong	arg01, fp
0f08c     24 4E 85 F1 | 	sub	fp, #36
0f090     04 12 06 F1 | 	add	arg01, #4
0f094     20 BB B0 FD | 	call	#_pslpeek
0f098     FD 24 02 F6 | 	mov	local04, result1
0f09c     34 4E 05 F1 | 	add	fp, #52
0f0a0     A7 1E 02 FB | 	rdlong	local01, fp
0f0a4     34 4E 85 F1 | 	sub	fp, #52
0f0a8     12 1F 12 F2 | 	cmp	local01, local04 wc
0f0ac     54 00 90 3D |  if_ae	jmp	#LR__1186
0f0b0     24 4E 05 F1 | 	add	fp, #36
0f0b4     A7 12 02 FB | 	rdlong	arg01, fp
0f0b8     24 4E 85 F1 | 	sub	fp, #36
0f0bc     08 12 06 F1 | 	add	arg01, #8
0f0c0     F4 BA B0 FD | 	call	#_pslpeek
0f0c4     FD 1E 02 F6 | 	mov	local01, result1
0f0c8     38 4E 05 F1 | 	add	fp, #56
0f0cc     A7 24 02 FB | 	rdlong	local04, fp
0f0d0     38 4E 85 F1 | 	sub	fp, #56
0f0d4     0F 25 12 F2 | 	cmp	local04, local01 wc
0f0d8     28 00 90 3D |  if_ae	jmp	#LR__1186
0f0dc     24 4E 05 F1 | 	add	fp, #36
0f0e0     A7 12 02 FB | 	rdlong	arg01, fp
0f0e4     24 4E 85 F1 | 	sub	fp, #36
0f0e8     0C 12 06 F1 | 	add	arg01, #12
0f0ec     C8 BA B0 FD | 	call	#_pslpeek
0f0f0     3C 4E 05 F1 | 	add	fp, #60
0f0f4     A7 24 02 FB | 	rdlong	local04, fp
0f0f8     3C 4E 85 F1 | 	sub	fp, #60
0f0fc     FD 24 12 F2 | 	cmp	local04, result1 wc
0f100     0C 00 90 CD |  if_b	jmp	#LR__1187
0f104                 | LR__1186
0f104     31 12 06 F6 | 	mov	arg01, #49
0f108     18 B8 B0 FD | 	call	#_printerror
0f10c     60 02 90 FD | 	jmp	#LR__1203
0f110                 | LR__1187
0f110     24 4E 05 F1 | 	add	fp, #36
0f114     A7 12 02 FB | 	rdlong	arg01, fp
0f118     09 25 02 F6 | 	mov	local04, arg01
0f11c     10 24 06 F1 | 	add	local04, #16
0f120     24 4E 85 F1 | 	sub	fp, #36
0f124     04 12 06 F1 | 	add	arg01, #4
0f128     8C BA B0 FD | 	call	#_pslpeek
0f12c     FD 1E 02 F6 | 	mov	local01, result1
0f130     38 4E 05 F1 | 	add	fp, #56
0f134     A7 20 02 FB | 	rdlong	local02, fp
0f138     10 1F 02 FD | 	qmul	local01, local02
0f13c     04 4E 85 F1 | 	sub	fp, #4
0f140     A7 22 02 FB | 	rdlong	local03, fp
0f144     10 4E 85 F1 | 	sub	fp, #16
0f148     A7 12 02 FB | 	rdlong	arg01, fp
0f14c     24 4E 85 F1 | 	sub	fp, #36
0f150     08 12 06 F1 | 	add	arg01, #8
0f154     18 20 62 FD | 	getqx	local02
0f158     10 23 02 F1 | 	add	local03, local02
0f15c     58 BA B0 FD | 	call	#_pslpeek
0f160     FD 20 02 F6 | 	mov	local02, result1
0f164     24 4E 05 F1 | 	add	fp, #36
0f168     A7 12 02 FB | 	rdlong	arg01, fp
0f16c     24 4E 85 F1 | 	sub	fp, #36
0f170     04 12 06 F1 | 	add	arg01, #4
0f174     40 BA B0 FD | 	call	#_pslpeek
0f178     FD 20 02 FD | 	qmul	local02, result1
0f17c     3C 4E 05 F1 | 	add	fp, #60
0f180     A7 20 02 FB | 	rdlong	local02, fp
0f184     18 1E 62 FD | 	getqx	local01
0f188     10 1F 02 FD | 	qmul	local01, local02
0f18c     10 4E 85 F1 | 	sub	fp, #16
0f190     A7 20 02 FB | 	rdlong	local02, fp
0f194     18 1E 62 FD | 	getqx	local01
0f198     0F 23 02 F1 | 	add	local03, local01
0f19c     11 21 02 FD | 	qmul	local02, local03
0f1a0     04 4E 05 F1 | 	add	fp, #4
0f1a4                 | ' 
0f1a4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0f1a4                 | ' select case arrtype
0f1a4     18 22 62 FD | 	getqx	local03
0f1a8     11 25 02 F1 | 	add	local04, local03
0f1ac     A7 24 62 FC | 	wrlong	local04, fp
0f1b0     08 4E 85 F1 | 	sub	fp, #8
0f1b4     A7 26 02 FB | 	rdlong	local05, fp
0f1b8     28 4E 85 F1 | 	sub	fp, #40
0f1bc     00 27 86 F1 | 	sub	local05, #256
0f1c0     0C 26 26 F3 | 	fle	local05, #12
0f1c4     30 26 62 FD | 	jmprel	local05
0f1c8                 | LR__1188
0f1c8     30 00 90 FD | 	jmp	#LR__1189
0f1cc     58 00 90 FD | 	jmp	#LR__1190
0f1d0     6C 00 90 FD | 	jmp	#LR__1191
0f1d4     80 00 90 FD | 	jmp	#LR__1192
0f1d8     B0 00 90 FD | 	jmp	#LR__1193
0f1dc     E0 00 90 FD | 	jmp	#LR__1194
0f1e0     F4 00 90 FD | 	jmp	#LR__1195
0f1e4     08 01 90 FD | 	jmp	#LR__1196
0f1e8     1C 01 90 FD | 	jmp	#LR__1197
0f1ec     30 01 90 FD | 	jmp	#LR__1198
0f1f0     44 01 90 FD | 	jmp	#LR__1199
0f1f4     58 01 90 FD | 	jmp	#LR__1200
0f1f8     6C 01 90 FD | 	jmp	#LR__1201
0f1fc                 | LR__1189
0f1fc     A7 12 02 F6 | 	mov	arg01, fp
0f200     30 4E 05 F1 | 	add	fp, #48
0f204     A7 14 02 FB | 	rdlong	arg02, fp
0f208     30 4E 85 F1 | 	sub	fp, #48
0f20c     0C 16 06 F6 | 	mov	arg03, #12
0f210     0B 00 00 FF 
0f214     CC E4 05 F1 | 	add	objptr, ##5836
0f218     0C F0 B0 FD | 	call	#_psram_spin2_write
0f21c     0B 00 00 FF 
0f220     CC E4 85 F1 | 	sub	objptr, ##5836
0f224     48 01 90 FD | 	jmp	#LR__1202
0f228                 | LR__1190
0f228     30 4E 05 F1 | 	add	fp, #48
0f22c     A7 12 02 FB | 	rdlong	arg01, fp
0f230     30 4E 85 F1 | 	sub	fp, #48
0f234     A7 14 02 FB | 	rdlong	arg02, fp
0f238     DC B8 B0 FD | 	call	#_pspoke
0f23c     30 01 90 FD | 	jmp	#LR__1202
0f240                 | LR__1191
0f240     30 4E 05 F1 | 	add	fp, #48
0f244     A7 12 02 FB | 	rdlong	arg01, fp
0f248     30 4E 85 F1 | 	sub	fp, #48
0f24c     A7 14 02 FB | 	rdlong	arg02, fp
0f250     C4 B8 B0 FD | 	call	#_pspoke
0f254     18 01 90 FD | 	jmp	#LR__1202
0f258                 | LR__1192
0f258     30 4E 05 F1 | 	add	fp, #48
0f25c     A7 12 02 FB | 	rdlong	arg01, fp
0f260     30 4E 85 F1 | 	sub	fp, #48
0f264     A7 14 02 FB | 	rdlong	arg02, fp
0f268     AC B8 B0 FD | 	call	#_pspoke
0f26c     30 4E 05 F1 | 	add	fp, #48
0f270     A7 12 02 FB | 	rdlong	arg01, fp
0f274     30 4E 85 F1 | 	sub	fp, #48
0f278     01 12 06 F1 | 	add	arg01, #1
0f27c     A7 14 02 FB | 	rdlong	arg02, fp
0f280     08 14 46 F0 | 	shr	arg02, #8
0f284     90 B8 B0 FD | 	call	#_pspoke
0f288     E4 00 90 FD | 	jmp	#LR__1202
0f28c                 | LR__1193
0f28c     30 4E 05 F1 | 	add	fp, #48
0f290     A7 12 02 FB | 	rdlong	arg01, fp
0f294     30 4E 85 F1 | 	sub	fp, #48
0f298     A7 14 02 FB | 	rdlong	arg02, fp
0f29c     78 B8 B0 FD | 	call	#_pspoke
0f2a0     30 4E 05 F1 | 	add	fp, #48
0f2a4     A7 12 02 FB | 	rdlong	arg01, fp
0f2a8     30 4E 85 F1 | 	sub	fp, #48
0f2ac     01 12 06 F1 | 	add	arg01, #1
0f2b0     A7 14 02 FB | 	rdlong	arg02, fp
0f2b4     08 14 46 F0 | 	shr	arg02, #8
0f2b8     5C B8 B0 FD | 	call	#_pspoke
0f2bc     B0 00 90 FD | 	jmp	#LR__1202
0f2c0                 | LR__1194
0f2c0     30 4E 05 F1 | 	add	fp, #48
0f2c4     A7 12 02 FB | 	rdlong	arg01, fp
0f2c8     30 4E 85 F1 | 	sub	fp, #48
0f2cc     A7 14 02 FB | 	rdlong	arg02, fp
0f2d0     B4 B7 B0 FD | 	call	#_pslpoke
0f2d4     98 00 90 FD | 	jmp	#LR__1202
0f2d8                 | LR__1195
0f2d8     30 4E 05 F1 | 	add	fp, #48
0f2dc     A7 12 02 FB | 	rdlong	arg01, fp
0f2e0     30 4E 85 F1 | 	sub	fp, #48
0f2e4     A7 14 02 FB | 	rdlong	arg02, fp
0f2e8     9C B7 B0 FD | 	call	#_pslpoke
0f2ec     80 00 90 FD | 	jmp	#LR__1202
0f2f0                 | LR__1196
0f2f0     30 4E 05 F1 | 	add	fp, #48
0f2f4     A7 12 02 FB | 	rdlong	arg01, fp
0f2f8     30 4E 85 F1 | 	sub	fp, #48
0f2fc     A7 14 02 FB | 	rdlong	arg02, fp
0f300     84 B7 B0 FD | 	call	#_pslpoke
0f304     68 00 90 FD | 	jmp	#LR__1202
0f308                 | LR__1197
0f308     30 4E 05 F1 | 	add	fp, #48
0f30c     A7 12 02 FB | 	rdlong	arg01, fp
0f310     30 4E 85 F1 | 	sub	fp, #48
0f314     A7 14 02 FB | 	rdlong	arg02, fp
0f318     6C B7 B0 FD | 	call	#_pslpoke
0f31c     50 00 90 FD | 	jmp	#LR__1202
0f320                 | LR__1198
0f320     30 4E 05 F1 | 	add	fp, #48
0f324     A7 12 02 FB | 	rdlong	arg01, fp
0f328     30 4E 85 F1 | 	sub	fp, #48
0f32c     A7 14 02 FB | 	rdlong	arg02, fp
0f330     54 B7 B0 FD | 	call	#_pslpoke
0f334     38 00 90 FD | 	jmp	#LR__1202
0f338                 | LR__1199
0f338     30 4E 05 F1 | 	add	fp, #48
0f33c     A7 12 02 FB | 	rdlong	arg01, fp
0f340     30 4E 85 F1 | 	sub	fp, #48
0f344     A7 14 02 FB | 	rdlong	arg02, fp
0f348     3C B7 B0 FD | 	call	#_pslpoke
0f34c     20 00 90 FD | 	jmp	#LR__1202
0f350                 | LR__1200
0f350     30 4E 05 F1 | 	add	fp, #48
0f354     A7 12 02 FB | 	rdlong	arg01, fp
0f358     30 4E 85 F1 | 	sub	fp, #48
0f35c     A7 14 02 FB | 	rdlong	arg02, fp
0f360     24 B7 B0 FD | 	call	#_pslpoke
0f364     08 00 90 FD | 	jmp	#LR__1202
0f368                 | LR__1201
0f368     2F 12 06 F6 | 	mov	arg01, #47
0f36c     B4 B5 B0 FD | 	call	#_printerror
0f370                 | LR__1202
0f370                 | LR__1203
0f370     A7 F0 03 F6 | 	mov	ptra, fp
0f374     B2 00 A0 FD | 	call	#popregs_
0f378                 | _do_assign_ret
0f378     2D 00 64 FD | 	ret
0f37c                 | 
0f37c                 | ' 
0f37c                 | ' 
0f37c                 | ' ' --------------------- Read a variable and push to the stack
0f37c                 | ' 
0f37c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0f37c                 | ' 
0f37c                 | ' sub do_getvar
0f37c                 | _do_getvar
0f37c     04 4A 05 F6 | 	mov	COUNT_, #4
0f380     A8 00 A0 FD | 	call	#pushregs_
0f384     3C F0 07 F1 | 	add	ptra, #60
0f388                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f388                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f388     4A 00 00 FF 
0f38c     B0 E4 05 F1 | 	add	objptr, ##38064
0f390     F2 1E 02 FB | 	rdlong	local01, objptr
0f394     0F 17 02 F6 | 	mov	arg03, local01
0f398     01 16 66 F0 | 	shl	arg03, #1
0f39c     0F 17 02 F1 | 	add	arg03, local01
0f3a0     02 16 66 F0 | 	shl	arg03, #2
0f3a4     03 00 00 FF 
0f3a8     04 E4 85 F1 | 	sub	objptr, ##1540
0f3ac     F2 16 02 F1 | 	add	arg03, objptr
0f3b0     04 16 06 F1 | 	add	arg03, #4
0f3b4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f3b8     47 00 00 FF 
0f3bc     AC E4 85 F1 | 	sub	objptr, ##36524
0f3c0     C4 00 90 5D |  if_ne	jmp	#LR__1211
0f3c4     4A 00 00 FF 
0f3c8     B0 E4 05 F1 | 	add	objptr, ##38064
0f3cc     F2 1E 02 FB | 	rdlong	local01, objptr
0f3d0     0F 13 02 F6 | 	mov	arg01, local01
0f3d4     01 12 66 F0 | 	shl	arg01, #1
0f3d8     0F 13 02 F1 | 	add	arg01, local01
0f3dc     02 12 66 F0 | 	shl	arg01, #2
0f3e0     03 00 00 FF 
0f3e4     04 E4 85 F1 | 	sub	objptr, ##1540
0f3e8     F2 12 02 F1 | 	add	arg01, objptr
0f3ec     09 1F 02 FB | 	rdlong	local01, arg01
0f3f0     04 1E 66 F0 | 	shl	local01, #4
0f3f4     32 00 00 FF 
0f3f8     84 E4 85 F1 | 	sub	objptr, ##25732
0f3fc     F2 1E 02 F1 | 	add	local01, objptr
0f400     04 1E 06 F1 | 	add	local01, #4
0f404     0F 13 02 FB | 	rdlong	arg01, local01
0f408     04 1E 06 F1 | 	add	local01, #4
0f40c     0F 1F 02 FB | 	rdlong	local01, local01
0f410     A7 12 62 FC | 	wrlong	arg01, fp
0f414     04 4E 05 F1 | 	add	fp, #4
0f418     A7 1E 62 FC | 	wrlong	local01, fp
0f41c     35 00 00 FF 
0f420     88 E4 05 F1 | 	add	objptr, ##27272
0f424     F2 1E 02 FB | 	rdlong	local01, objptr
0f428     0F 13 02 F6 | 	mov	arg01, local01
0f42c     01 12 66 F0 | 	shl	arg01, #1
0f430     0F 13 02 F1 | 	add	arg01, local01
0f434     02 12 66 F0 | 	shl	arg01, #2
0f438     03 00 00 FF 
0f43c     04 E4 85 F1 | 	sub	objptr, ##1540
0f440     F2 12 02 F1 | 	add	arg01, objptr
0f444     09 1F 02 FB | 	rdlong	local01, arg01
0f448     04 1E 66 F0 | 	shl	local01, #4
0f44c     32 00 00 FF 
0f450     84 E4 85 F1 | 	sub	objptr, ##25732
0f454     F2 1E 02 F1 | 	add	local01, objptr
0f458     0C 1E 06 F1 | 	add	local01, #12
0f45c     0F 1F 02 FB | 	rdlong	local01, local01
0f460     04 4E 05 F1 | 	add	fp, #4
0f464     A7 1E 62 FC | 	wrlong	local01, fp
0f468                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0f468                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f468                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0f468     08 4E 85 F1 | 	sub	fp, #8
0f46c     00 1F 16 F2 | 	cmp	local01, #256 wc
0f470     15 00 00 FF 
0f474     28 E4 85 F1 | 	sub	objptr, ##10792
0f478     0C 00 90 3D |  if_ae	jmp	#LR__1210
0f47c     A7 12 02 F6 | 	mov	arg01, fp
0f480     AC B4 BF FD | 	call	#_push
0f484     A0 04 90 FD | 	jmp	#LR__1232
0f488                 | LR__1210
0f488                 | LR__1211
0f488     4A 00 00 FF 
0f48c     B0 E4 05 F1 | 	add	objptr, ##38064
0f490     F2 16 02 FB | 	rdlong	arg03, objptr
0f494     0B 15 02 F6 | 	mov	arg02, arg03
0f498     01 14 66 F0 | 	shl	arg02, #1
0f49c     0B 15 02 F1 | 	add	arg02, arg03
0f4a0     02 14 66 F0 | 	shl	arg02, #2
0f4a4     03 00 00 FF 
0f4a8     04 E4 85 F1 | 	sub	objptr, ##1540
0f4ac     F2 14 02 F1 | 	add	arg02, objptr
0f4b0     0A 17 02 FB | 	rdlong	arg03, arg02
0f4b4     04 16 66 F0 | 	shl	arg03, #4
0f4b8     32 00 00 FF 
0f4bc     84 E4 85 F1 | 	sub	objptr, ##25732
0f4c0     F2 16 02 F1 | 	add	arg03, objptr
0f4c4     04 16 06 F1 | 	add	arg03, #4
0f4c8     0B 13 02 FB | 	rdlong	arg01, arg03
0f4cc     0C 4E 05 F1 | 	add	fp, #12
0f4d0     A7 12 62 FC | 	wrlong	arg01, fp
0f4d4     0C 4E 85 F1 | 	sub	fp, #12
0f4d8     15 00 00 FF 
0f4dc     28 E4 85 F1 | 	sub	objptr, ##10792
0f4e0     D4 B6 B0 FD | 	call	#_pslpeek
0f4e4     FD FA 31 F9 | 	getword	result1, result1, #0
0f4e8     10 4E 05 F1 | 	add	fp, #16
0f4ec     A7 FA 61 FC | 	wrlong	result1, fp
0f4f0     4A 00 00 FF 
0f4f4     B0 E4 05 F1 | 	add	objptr, ##38064
0f4f8     F2 16 02 FB | 	rdlong	arg03, objptr
0f4fc     0B 15 02 F6 | 	mov	arg02, arg03
0f500     01 14 66 F0 | 	shl	arg02, #1
0f504     0B 15 02 F1 | 	add	arg02, arg03
0f508     02 14 66 F0 | 	shl	arg02, #2
0f50c     03 00 00 FF 
0f510     04 E4 85 F1 | 	sub	objptr, ##1540
0f514     F2 14 02 F1 | 	add	arg02, objptr
0f518     04 14 06 F1 | 	add	arg02, #4
0f51c     0A 17 02 FB | 	rdlong	arg03, arg02
0f520     04 4E 05 F1 | 	add	fp, #4
0f524     A7 16 62 FC | 	wrlong	arg03, fp
0f528     08 4E 85 F1 | 	sub	fp, #8
0f52c     A7 12 02 FB | 	rdlong	arg01, fp
0f530     0C 4E 85 F1 | 	sub	fp, #12
0f534     02 12 06 F1 | 	add	arg01, #2
0f538     47 00 00 FF 
0f53c     AC E4 85 F1 | 	sub	objptr, ##36524
0f540     1C B6 B0 FD | 	call	#_pspeek
0f544     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f548     18 4E 05 F1 | 	add	fp, #24
0f54c     A7 FA 61 FC | 	wrlong	result1, fp
0f550     0C 4E 85 F1 | 	sub	fp, #12
0f554     A7 12 02 FB | 	rdlong	arg01, fp
0f558     0C 4E 85 F1 | 	sub	fp, #12
0f55c     04 12 06 F1 | 	add	arg01, #4
0f560     54 B6 B0 FD | 	call	#_pslpeek
0f564     1C 4E 05 F1 | 	add	fp, #28
0f568     A7 FA 61 FC | 	wrlong	result1, fp
0f56c     10 4E 85 F1 | 	sub	fp, #16
0f570     A7 12 02 FB | 	rdlong	arg01, fp
0f574     0C 4E 85 F1 | 	sub	fp, #12
0f578     08 12 06 F1 | 	add	arg01, #8
0f57c     38 B6 B0 FD | 	call	#_pslpeek
0f580     20 4E 05 F1 | 	add	fp, #32
0f584     A7 FA 61 FC | 	wrlong	result1, fp
0f588     14 4E 85 F1 | 	sub	fp, #20
0f58c     A7 12 02 FB | 	rdlong	arg01, fp
0f590     0C 4E 85 F1 | 	sub	fp, #12
0f594     0C 12 06 F1 | 	add	arg01, #12
0f598     1C B6 B0 FD | 	call	#_pslpeek
0f59c     24 4E 05 F1 | 	add	fp, #36
0f5a0     A7 FA 61 FC | 	wrlong	result1, fp
0f5a4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f5a4                 | ' esize=pspeek(arrptr+2)
0f5a4                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f5a4                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f5a4                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f5a4                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f5a4     10 4E 85 F1 | 	sub	fp, #16
0f5a8     A7 16 02 FB | 	rdlong	arg03, fp
0f5ac     14 4E 85 F1 | 	sub	fp, #20
0f5b0     03 16 16 F2 | 	cmp	arg03, #3 wc
0f5b4     38 00 90 CD |  if_b	jmp	#LR__1212
0f5b8     DC B2 BF FD | 	call	#_pop
0f5bc     FF 16 02 F6 | 	mov	arg03, result3
0f5c0     A7 FA 61 FC | 	wrlong	result1, fp
0f5c4     04 4E 05 F1 | 	add	fp, #4
0f5c8     A7 FC 61 FC | 	wrlong	result2, fp
0f5cc     04 4E 05 F1 | 	add	fp, #4
0f5d0     A7 16 62 FC | 	wrlong	arg03, fp
0f5d4     08 4E 85 F1 | 	sub	fp, #8
0f5d8     A7 12 02 F6 | 	mov	arg01, fp
0f5dc     54 3F B0 FD | 	call	#_converttoint
0f5e0     30 4E 05 F1 | 	add	fp, #48
0f5e4     A7 FA 61 FC | 	wrlong	result1, fp
0f5e8     30 4E 85 F1 | 	sub	fp, #48
0f5ec     0C 00 90 FD | 	jmp	#LR__1213
0f5f0                 | LR__1212
0f5f0     30 4E 05 F1 | 	add	fp, #48
0f5f4     A7 00 68 FC | 	wrlong	#0, fp
0f5f8     30 4E 85 F1 | 	sub	fp, #48
0f5fc                 | LR__1213
0f5fc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f5fc     14 4E 05 F1 | 	add	fp, #20
0f600     A7 16 02 FB | 	rdlong	arg03, fp
0f604     14 4E 85 F1 | 	sub	fp, #20
0f608     02 16 16 F2 | 	cmp	arg03, #2 wc
0f60c     38 00 90 CD |  if_b	jmp	#LR__1214
0f610     84 B2 BF FD | 	call	#_pop
0f614     FF 16 02 F6 | 	mov	arg03, result3
0f618     A7 FA 61 FC | 	wrlong	result1, fp
0f61c     04 4E 05 F1 | 	add	fp, #4
0f620     A7 FC 61 FC | 	wrlong	result2, fp
0f624     04 4E 05 F1 | 	add	fp, #4
0f628     A7 16 62 FC | 	wrlong	arg03, fp
0f62c     08 4E 85 F1 | 	sub	fp, #8
0f630     A7 12 02 F6 | 	mov	arg01, fp
0f634     FC 3E B0 FD | 	call	#_converttoint
0f638     2C 4E 05 F1 | 	add	fp, #44
0f63c     A7 FA 61 FC | 	wrlong	result1, fp
0f640     2C 4E 85 F1 | 	sub	fp, #44
0f644     0C 00 90 FD | 	jmp	#LR__1215
0f648                 | LR__1214
0f648     2C 4E 05 F1 | 	add	fp, #44
0f64c     A7 00 68 FC | 	wrlong	#0, fp
0f650     2C 4E 85 F1 | 	sub	fp, #44
0f654                 | LR__1215
0f654                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f654     14 4E 05 F1 | 	add	fp, #20
0f658     A7 16 02 FB | 	rdlong	arg03, fp
0f65c     14 4E 85 F1 | 	sub	fp, #20
0f660     01 16 16 F2 | 	cmp	arg03, #1 wc
0f664     38 00 90 CD |  if_b	jmp	#LR__1216
0f668     2C B2 BF FD | 	call	#_pop
0f66c     FF 16 02 F6 | 	mov	arg03, result3
0f670     A7 FA 61 FC | 	wrlong	result1, fp
0f674     04 4E 05 F1 | 	add	fp, #4
0f678     A7 FC 61 FC | 	wrlong	result2, fp
0f67c     04 4E 05 F1 | 	add	fp, #4
0f680     A7 16 62 FC | 	wrlong	arg03, fp
0f684     08 4E 85 F1 | 	sub	fp, #8
0f688     A7 12 02 F6 | 	mov	arg01, fp
0f68c     A4 3E B0 FD | 	call	#_converttoint
0f690     28 4E 05 F1 | 	add	fp, #40
0f694     A7 FA 61 FC | 	wrlong	result1, fp
0f698     28 4E 85 F1 | 	sub	fp, #40
0f69c     0C 00 90 FD | 	jmp	#LR__1217
0f6a0                 | LR__1216
0f6a0     28 4E 05 F1 | 	add	fp, #40
0f6a4     A7 00 68 FC | 	wrlong	#0, fp
0f6a8     28 4E 85 F1 | 	sub	fp, #40
0f6ac                 | LR__1217
0f6ac     0C 4E 05 F1 | 	add	fp, #12
0f6b0     A7 20 02 FB | 	rdlong	local02, fp
0f6b4     1C 4E 05 F1 | 	add	fp, #28
0f6b8     A7 22 02 FB | 	rdlong	local03, fp
0f6bc     04 4E 05 F1 | 	add	fp, #4
0f6c0     A7 FC 01 FB | 	rdlong	result2, fp
0f6c4     10 4E 85 F1 | 	sub	fp, #16
0f6c8     A7 FE 01 FB | 	rdlong	result3, fp
0f6cc     FF FC 01 FD | 	qmul	result2, result3
0f6d0     10 20 06 F1 | 	add	local02, #16
0f6d4     14 4E 05 F1 | 	add	fp, #20
0f6d8     A7 FC 01 FB | 	rdlong	result2, fp
0f6dc     18 FA 61 FD | 	getqx	result1
0f6e0     FF FC 01 FD | 	qmul	result2, result3
0f6e4     FD 22 02 F1 | 	add	local03, result1
0f6e8     10 4E 85 F1 | 	sub	fp, #16
0f6ec     A7 FE 01 FB | 	rdlong	result3, fp
0f6f0     18 FC 61 FD | 	getqx	result2
0f6f4     FF FC 01 FD | 	qmul	result2, result3
0f6f8     08 4E 85 F1 | 	sub	fp, #8
0f6fc     A7 FE 01 FB | 	rdlong	result3, fp
0f700     18 FC 61 FD | 	getqx	result2
0f704     FE 22 02 F1 | 	add	local03, result2
0f708     FF 22 02 FD | 	qmul	local03, result3
0f70c     1C 4E 05 F1 | 	add	fp, #28
0f710                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f710                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0f710                 | ' 
0f710                 | ' select case vartype
0f710     18 FC 61 FD | 	getqx	result2
0f714     FE 20 02 F1 | 	add	local02, result2
0f718     A7 20 62 FC | 	wrlong	local02, fp
0f71c     24 4E 85 F1 | 	sub	fp, #36
0f720     A7 24 02 FB | 	rdlong	local04, fp
0f724     10 4E 85 F1 | 	sub	fp, #16
0f728     00 25 86 F1 | 	sub	local04, #256
0f72c     0C 24 26 F3 | 	fle	local04, #12
0f730     30 24 62 FD | 	jmprel	local04
0f734                 | LR__1218
0f734     30 00 90 FD | 	jmp	#LR__1219
0f738     58 00 90 FD | 	jmp	#LR__1220
0f73c     8C 00 90 FD | 	jmp	#LR__1221
0f740     AC 00 90 FD | 	jmp	#LR__1222
0f744     E8 00 90 FD | 	jmp	#LR__1223
0f748     08 01 90 FD | 	jmp	#LR__1224
0f74c     24 01 90 FD | 	jmp	#LR__1225
0f750     40 01 90 FD | 	jmp	#LR__1226
0f754     50 01 90 FD | 	jmp	#LR__1227
0f758     60 01 90 FD | 	jmp	#LR__1228
0f75c     7C 01 90 FD | 	jmp	#LR__1229
0f760     8C 01 90 FD | 	jmp	#LR__1230
0f764     B8 01 90 FD | 	jmp	#LR__1231
0f768                 | LR__1219
0f768     A7 12 02 F6 | 	mov	arg01, fp
0f76c     34 4E 05 F1 | 	add	fp, #52
0f770     A7 14 02 FB | 	rdlong	arg02, fp
0f774     34 4E 85 F1 | 	sub	fp, #52
0f778     0C 16 06 F6 | 	mov	arg03, #12
0f77c     0B 00 00 FF 
0f780     CC E4 05 F1 | 	add	objptr, ##5836
0f784     04 EA B0 FD | 	call	#_psram_spin2_read1
0f788     0B 00 00 FF 
0f78c     CC E4 85 F1 | 	sub	objptr, ##5836
0f790     8C 01 90 FD | 	jmp	#LR__1231
0f794                 | LR__1220
0f794     08 4E 05 F1 | 	add	fp, #8
0f798     A7 38 68 FC | 	wrlong	#28, fp
0f79c     2C 4E 05 F1 | 	add	fp, #44
0f7a0     A7 12 02 FB | 	rdlong	arg01, fp
0f7a4     34 4E 85 F1 | 	sub	fp, #52
0f7a8     B4 B3 B0 FD | 	call	#_pspeek
0f7ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f7b0     A7 FA 61 FC | 	wrlong	result1, fp
0f7b4     80 FA 15 F2 | 	cmp	result1, #128 wc
0f7b8     00 1F 66 36 |  if_ae	neg	local01, #256
0f7bc     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f7c0     11 1F 42 35 |  if_ae	or	local01, local03
0f7c4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f7c8     54 01 90 FD | 	jmp	#LR__1231
0f7cc                 | LR__1221
0f7cc     08 4E 05 F1 | 	add	fp, #8
0f7d0     A7 3A 68 FC | 	wrlong	#29, fp
0f7d4     2C 4E 05 F1 | 	add	fp, #44
0f7d8     A7 12 02 FB | 	rdlong	arg01, fp
0f7dc     34 4E 85 F1 | 	sub	fp, #52
0f7e0     7C B3 B0 FD | 	call	#_pspeek
0f7e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f7e8     A7 FA 61 FC | 	wrlong	result1, fp
0f7ec     30 01 90 FD | 	jmp	#LR__1231
0f7f0                 | LR__1222
0f7f0     08 4E 05 F1 | 	add	fp, #8
0f7f4     A7 38 68 FC | 	wrlong	#28, fp
0f7f8     2C 4E 05 F1 | 	add	fp, #44
0f7fc     A7 12 02 FB | 	rdlong	arg01, fp
0f800     34 4E 85 F1 | 	sub	fp, #52
0f804     B0 B3 B0 FD | 	call	#_pslpeek
0f808     FD FA 31 F9 | 	getword	result1, result1, #0
0f80c     A7 FA 61 FC | 	wrlong	result1, fp
0f810     40 00 00 FF 
0f814     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0f818     FF 7F 00 3F 
0f81c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0f820     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f824     11 1F 42 35 |  if_ae	or	local01, local03
0f828     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f82c     F0 00 90 FD | 	jmp	#LR__1231
0f830                 | LR__1223
0f830     08 4E 05 F1 | 	add	fp, #8
0f834     A7 3A 68 FC | 	wrlong	#29, fp
0f838     2C 4E 05 F1 | 	add	fp, #44
0f83c     A7 12 02 FB | 	rdlong	arg01, fp
0f840     34 4E 85 F1 | 	sub	fp, #52
0f844     70 B3 B0 FD | 	call	#_pslpeek
0f848     FD FA 31 F9 | 	getword	result1, result1, #0
0f84c     A7 FA 61 FC | 	wrlong	result1, fp
0f850     CC 00 90 FD | 	jmp	#LR__1231
0f854                 | LR__1224
0f854     08 4E 05 F1 | 	add	fp, #8
0f858     A7 38 68 FC | 	wrlong	#28, fp
0f85c     2C 4E 05 F1 | 	add	fp, #44
0f860     A7 12 02 FB | 	rdlong	arg01, fp
0f864     34 4E 85 F1 | 	sub	fp, #52
0f868     4C B3 B0 FD | 	call	#_pslpeek
0f86c     A7 FA 61 FC | 	wrlong	result1, fp
0f870     AC 00 90 FD | 	jmp	#LR__1231
0f874                 | LR__1225
0f874     08 4E 05 F1 | 	add	fp, #8
0f878     A7 3A 68 FC | 	wrlong	#29, fp
0f87c     2C 4E 05 F1 | 	add	fp, #44
0f880     A7 12 02 FB | 	rdlong	arg01, fp
0f884     34 4E 85 F1 | 	sub	fp, #52
0f888     2C B3 B0 FD | 	call	#_pslpeek
0f88c     A7 FA 61 FC | 	wrlong	result1, fp
0f890     8C 00 90 FD | 	jmp	#LR__1231
0f894                 | LR__1226
0f894     08 4E 05 F1 | 	add	fp, #8
0f898     A7 FE 69 FC | 	wrlong	#255, fp
0f89c     08 4E 85 F1 | 	sub	fp, #8
0f8a0     A7 60 68 FC | 	wrlong	#48, fp
0f8a4     78 00 90 FD | 	jmp	#LR__1231
0f8a8                 | LR__1227
0f8a8     08 4E 05 F1 | 	add	fp, #8
0f8ac     A7 FE 69 FC | 	wrlong	#255, fp
0f8b0     08 4E 85 F1 | 	sub	fp, #8
0f8b4     A7 60 68 FC | 	wrlong	#48, fp
0f8b8     64 00 90 FD | 	jmp	#LR__1231
0f8bc                 | LR__1228
0f8bc     08 4E 05 F1 | 	add	fp, #8
0f8c0     A7 3C 68 FC | 	wrlong	#30, fp
0f8c4     2C 4E 05 F1 | 	add	fp, #44
0f8c8     A7 12 02 FB | 	rdlong	arg01, fp
0f8cc     34 4E 85 F1 | 	sub	fp, #52
0f8d0     E4 B2 B0 FD | 	call	#_pslpeek
0f8d4     A7 FA 61 FC | 	wrlong	result1, fp
0f8d8     44 00 90 FD | 	jmp	#LR__1231
0f8dc                 | LR__1229
0f8dc     08 4E 05 F1 | 	add	fp, #8
0f8e0     A7 FE 69 FC | 	wrlong	#255, fp
0f8e4     08 4E 85 F1 | 	sub	fp, #8
0f8e8     A7 60 68 FC | 	wrlong	#48, fp
0f8ec     30 00 90 FD | 	jmp	#LR__1231
0f8f0                 | LR__1230
0f8f0     08 4E 05 F1 | 	add	fp, #8
0f8f4     A7 3E 68 FC | 	wrlong	#31, fp
0f8f8     2C 4E 05 F1 | 	add	fp, #44
0f8fc     A7 12 02 FB | 	rdlong	arg01, fp
0f900     34 4E 85 F1 | 	sub	fp, #52
0f904     B0 B2 B0 FD | 	call	#_pslpeek
0f908     A7 FA 61 FC | 	wrlong	result1, fp
0f90c     00 04 00 FF 
0f910     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f914     08 4E 05 31 |  if_ae	add	fp, #8
0f918     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f91c     08 4E 85 31 |  if_ae	sub	fp, #8
0f920                 | LR__1231
0f920     A7 12 02 F6 | 	mov	arg01, fp
0f924     08 B0 BF FD | 	call	#_push
0f928                 | LR__1232
0f928     A7 F0 03 F6 | 	mov	ptra, fp
0f92c     B2 00 A0 FD | 	call	#popregs_
0f930                 | _do_getvar_ret
0f930     2D 00 64 FD | 	ret
0f934                 | 
0f934                 | ' 
0f934                 | ' 
0f934                 | ' sub do_getaddr
0f934                 | _do_getaddr
0f934     01 4A 05 F6 | 	mov	COUNT_, #1
0f938     A8 00 A0 FD | 	call	#pushregs_
0f93c     38 F0 07 F1 | 	add	ptra, #56
0f940                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f940                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f940     4A 00 00 FF 
0f944     B0 E4 05 F1 | 	add	objptr, ##38064
0f948     F2 12 02 FB | 	rdlong	arg01, objptr
0f94c     09 FD 01 F6 | 	mov	result2, arg01
0f950     01 FC 65 F0 | 	shl	result2, #1
0f954     09 FD 01 F1 | 	add	result2, arg01
0f958     02 FC 65 F0 | 	shl	result2, #2
0f95c     03 00 00 FF 
0f960     04 E4 85 F1 | 	sub	objptr, ##1540
0f964     F2 FC 01 F1 | 	add	result2, objptr
0f968     04 FC 05 F1 | 	add	result2, #4
0f96c     FE FC 09 FB | 	rdlong	result2, result2 wz
0f970     47 00 00 FF 
0f974     AC E4 85 F1 | 	sub	objptr, ##36524
0f978     C4 00 90 5D |  if_ne	jmp	#LR__1240
0f97c     4A 00 00 FF 
0f980     B0 E4 05 F1 | 	add	objptr, ##38064
0f984     F2 12 02 FB | 	rdlong	arg01, objptr
0f988     09 FD 01 F6 | 	mov	result2, arg01
0f98c     01 FC 65 F0 | 	shl	result2, #1
0f990     09 FD 01 F1 | 	add	result2, arg01
0f994     02 FC 65 F0 | 	shl	result2, #2
0f998     03 00 00 FF 
0f99c     04 E4 85 F1 | 	sub	objptr, ##1540
0f9a0     F2 FC 01 F1 | 	add	result2, objptr
0f9a4     FE 12 02 FB | 	rdlong	arg01, result2
0f9a8     04 12 66 F0 | 	shl	arg01, #4
0f9ac     32 00 00 FF 
0f9b0     84 E4 85 F1 | 	sub	objptr, ##25732
0f9b4     F2 12 02 F1 | 	add	arg01, objptr
0f9b8     0C 12 06 F1 | 	add	arg01, #12
0f9bc     09 13 02 FB | 	rdlong	arg01, arg01
0f9c0     08 4E 05 F1 | 	add	fp, #8
0f9c4     A7 12 62 FC | 	wrlong	arg01, fp
0f9c8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f9c8                 | '    if t1.result_type>=array_no_type then goto 2200
0f9c8     08 4E 85 F1 | 	sub	fp, #8
0f9cc     00 13 16 F2 | 	cmp	arg01, #256 wc
0f9d0     15 00 00 FF 
0f9d4     28 E4 85 F1 | 	sub	objptr, ##10792
0f9d8     64 00 90 3D |  if_ae	jmp	#LR__1241
0f9dc     4A 00 00 FF 
0f9e0     B0 E4 05 F1 | 	add	objptr, ##38064
0f9e4     F2 12 02 FB | 	rdlong	arg01, objptr
0f9e8     09 FB 01 F6 | 	mov	result1, arg01
0f9ec     01 FA 65 F0 | 	shl	result1, #1
0f9f0     09 FB 01 F1 | 	add	result1, arg01
0f9f4     02 FA 65 F0 | 	shl	result1, #2
0f9f8     03 00 00 FF 
0f9fc     04 E4 85 F1 | 	sub	objptr, ##1540
0fa00     F2 FA 01 F1 | 	add	result1, objptr
0fa04     FD FA 01 FB | 	rdlong	result1, result1
0fa08     04 FA 65 F0 | 	shl	result1, #4
0fa0c     32 00 00 FF 
0fa10     84 E4 85 F1 | 	sub	objptr, ##25732
0fa14     F2 FA 01 F1 | 	add	result1, objptr
0fa18     04 FA 05 F1 | 	add	result1, #4
0fa1c     15 00 00 FF 
0fa20     28 E4 85 F1 | 	sub	objptr, ##10792
0fa24     A7 FA 61 FC | 	wrlong	result1, fp
0fa28     08 4E 05 F1 | 	add	fp, #8
0fa2c     A7 3A 68 FC | 	wrlong	#29, fp
0fa30     08 4E 85 F1 | 	sub	fp, #8
0fa34     A7 12 02 F6 | 	mov	arg01, fp
0fa38     F4 AE BF FD | 	call	#_push
0fa3c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0fa3c                 | '   t1.result_type=result_uint
0fa3c                 | '   push t1 : return
0fa3c     D8 02 90 FD | 	jmp	#LR__1250
0fa40                 | LR__1240
0fa40                 | LR__1241
0fa40     4A 00 00 FF 
0fa44     B0 E4 05 F1 | 	add	objptr, ##38064
0fa48     F2 FE 01 FB | 	rdlong	result3, objptr
0fa4c     FF 12 02 F6 | 	mov	arg01, result3
0fa50     01 12 66 F0 | 	shl	arg01, #1
0fa54     FF 12 02 F1 | 	add	arg01, result3
0fa58     02 12 66 F0 | 	shl	arg01, #2
0fa5c     03 00 00 FF 
0fa60     04 E4 85 F1 | 	sub	objptr, ##1540
0fa64     F2 12 02 F1 | 	add	arg01, objptr
0fa68     09 13 02 FB | 	rdlong	arg01, arg01
0fa6c     04 12 66 F0 | 	shl	arg01, #4
0fa70     32 00 00 FF 
0fa74     84 E4 85 F1 | 	sub	objptr, ##25732
0fa78     F2 12 02 F1 | 	add	arg01, objptr
0fa7c     04 12 06 F1 | 	add	arg01, #4
0fa80     09 13 02 FB | 	rdlong	arg01, arg01
0fa84     0C 4E 05 F1 | 	add	fp, #12
0fa88     A7 12 62 FC | 	wrlong	arg01, fp
0fa8c     0C 4E 85 F1 | 	sub	fp, #12
0fa90     15 00 00 FF 
0fa94     28 E4 85 F1 | 	sub	objptr, ##10792
0fa98     1C B1 B0 FD | 	call	#_pslpeek
0fa9c     FD FA 31 F9 | 	getword	result1, result1, #0
0faa0     10 4E 05 F1 | 	add	fp, #16
0faa4     A7 FA 61 FC | 	wrlong	result1, fp
0faa8     4A 00 00 FF 
0faac     B0 E4 05 F1 | 	add	objptr, ##38064
0fab0     F2 FE 01 FB | 	rdlong	result3, objptr
0fab4     FF 12 02 F6 | 	mov	arg01, result3
0fab8     01 12 66 F0 | 	shl	arg01, #1
0fabc     FF 12 02 F1 | 	add	arg01, result3
0fac0     02 12 66 F0 | 	shl	arg01, #2
0fac4     03 00 00 FF 
0fac8     04 E4 85 F1 | 	sub	objptr, ##1540
0facc     F2 12 02 F1 | 	add	arg01, objptr
0fad0     04 12 06 F1 | 	add	arg01, #4
0fad4     09 13 02 FB | 	rdlong	arg01, arg01
0fad8     04 4E 05 F1 | 	add	fp, #4
0fadc     A7 12 62 FC | 	wrlong	arg01, fp
0fae0     08 4E 85 F1 | 	sub	fp, #8
0fae4     A7 12 02 FB | 	rdlong	arg01, fp
0fae8     0C 4E 85 F1 | 	sub	fp, #12
0faec     02 12 06 F1 | 	add	arg01, #2
0faf0     47 00 00 FF 
0faf4     AC E4 85 F1 | 	sub	objptr, ##36524
0faf8     64 B0 B0 FD | 	call	#_pspeek
0fafc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0fb00     18 4E 05 F1 | 	add	fp, #24
0fb04     A7 FA 61 FC | 	wrlong	result1, fp
0fb08     0C 4E 85 F1 | 	sub	fp, #12
0fb0c     A7 12 02 FB | 	rdlong	arg01, fp
0fb10     0C 4E 85 F1 | 	sub	fp, #12
0fb14     04 12 06 F1 | 	add	arg01, #4
0fb18     9C B0 B0 FD | 	call	#_pslpeek
0fb1c     1C 4E 05 F1 | 	add	fp, #28
0fb20     A7 FA 61 FC | 	wrlong	result1, fp
0fb24     10 4E 85 F1 | 	sub	fp, #16
0fb28     A7 12 02 FB | 	rdlong	arg01, fp
0fb2c     0C 4E 85 F1 | 	sub	fp, #12
0fb30     08 12 06 F1 | 	add	arg01, #8
0fb34     80 B0 B0 FD | 	call	#_pslpeek
0fb38     20 4E 05 F1 | 	add	fp, #32
0fb3c     A7 FA 61 FC | 	wrlong	result1, fp
0fb40     14 4E 85 F1 | 	sub	fp, #20
0fb44     A7 12 02 FB | 	rdlong	arg01, fp
0fb48     0C 4E 85 F1 | 	sub	fp, #12
0fb4c     0C 12 06 F1 | 	add	arg01, #12
0fb50     64 B0 B0 FD | 	call	#_pslpeek
0fb54     24 4E 05 F1 | 	add	fp, #36
0fb58     A7 FA 61 FC | 	wrlong	result1, fp
0fb5c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0fb5c                 | ' esize=pspeek(arrptr+2)
0fb5c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0fb5c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0fb5c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0fb5c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0fb5c     10 4E 85 F1 | 	sub	fp, #16
0fb60     A7 12 02 FB | 	rdlong	arg01, fp
0fb64     14 4E 85 F1 | 	sub	fp, #20
0fb68     03 12 16 F2 | 	cmp	arg01, #3 wc
0fb6c     34 00 90 CD |  if_b	jmp	#LR__1242
0fb70     24 AD BF FD | 	call	#_pop
0fb74     A7 FA 61 FC | 	wrlong	result1, fp
0fb78     04 4E 05 F1 | 	add	fp, #4
0fb7c     A7 FC 61 FC | 	wrlong	result2, fp
0fb80     04 4E 05 F1 | 	add	fp, #4
0fb84     A7 FE 61 FC | 	wrlong	result3, fp
0fb88     08 4E 85 F1 | 	sub	fp, #8
0fb8c     A7 12 02 F6 | 	mov	arg01, fp
0fb90     A0 39 B0 FD | 	call	#_converttoint
0fb94     30 4E 05 F1 | 	add	fp, #48
0fb98     A7 FA 61 FC | 	wrlong	result1, fp
0fb9c     30 4E 85 F1 | 	sub	fp, #48
0fba0     0C 00 90 FD | 	jmp	#LR__1243
0fba4                 | LR__1242
0fba4     30 4E 05 F1 | 	add	fp, #48
0fba8     A7 00 68 FC | 	wrlong	#0, fp
0fbac     30 4E 85 F1 | 	sub	fp, #48
0fbb0                 | LR__1243
0fbb0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0fbb0     14 4E 05 F1 | 	add	fp, #20
0fbb4     A7 12 02 FB | 	rdlong	arg01, fp
0fbb8     14 4E 85 F1 | 	sub	fp, #20
0fbbc     02 12 16 F2 | 	cmp	arg01, #2 wc
0fbc0     34 00 90 CD |  if_b	jmp	#LR__1244
0fbc4     D0 AC BF FD | 	call	#_pop
0fbc8     A7 FA 61 FC | 	wrlong	result1, fp
0fbcc     04 4E 05 F1 | 	add	fp, #4
0fbd0     A7 FC 61 FC | 	wrlong	result2, fp
0fbd4     04 4E 05 F1 | 	add	fp, #4
0fbd8     A7 FE 61 FC | 	wrlong	result3, fp
0fbdc     08 4E 85 F1 | 	sub	fp, #8
0fbe0     A7 12 02 F6 | 	mov	arg01, fp
0fbe4     4C 39 B0 FD | 	call	#_converttoint
0fbe8     2C 4E 05 F1 | 	add	fp, #44
0fbec     A7 FA 61 FC | 	wrlong	result1, fp
0fbf0     2C 4E 85 F1 | 	sub	fp, #44
0fbf4     0C 00 90 FD | 	jmp	#LR__1245
0fbf8                 | LR__1244
0fbf8     2C 4E 05 F1 | 	add	fp, #44
0fbfc     A7 00 68 FC | 	wrlong	#0, fp
0fc00     2C 4E 85 F1 | 	sub	fp, #44
0fc04                 | LR__1245
0fc04                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0fc04     14 4E 05 F1 | 	add	fp, #20
0fc08     A7 12 02 FB | 	rdlong	arg01, fp
0fc0c     14 4E 85 F1 | 	sub	fp, #20
0fc10     01 12 16 F2 | 	cmp	arg01, #1 wc
0fc14     34 00 90 CD |  if_b	jmp	#LR__1246
0fc18     7C AC BF FD | 	call	#_pop
0fc1c     A7 FA 61 FC | 	wrlong	result1, fp
0fc20     04 4E 05 F1 | 	add	fp, #4
0fc24     A7 FC 61 FC | 	wrlong	result2, fp
0fc28     04 4E 05 F1 | 	add	fp, #4
0fc2c     A7 FE 61 FC | 	wrlong	result3, fp
0fc30     08 4E 85 F1 | 	sub	fp, #8
0fc34     A7 12 02 F6 | 	mov	arg01, fp
0fc38     F8 38 B0 FD | 	call	#_converttoint
0fc3c     28 4E 05 F1 | 	add	fp, #40
0fc40     A7 FA 61 FC | 	wrlong	result1, fp
0fc44     28 4E 85 F1 | 	sub	fp, #40
0fc48     0C 00 90 FD | 	jmp	#LR__1247
0fc4c                 | LR__1246
0fc4c     28 4E 05 F1 | 	add	fp, #40
0fc50     A7 00 68 FC | 	wrlong	#0, fp
0fc54     28 4E 85 F1 | 	sub	fp, #40
0fc58                 | LR__1247
0fc58                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0fc58                 | ' if numpar>0 then
0fc58     14 4E 05 F1 | 	add	fp, #20
0fc5c     A7 FE 01 FB | 	rdlong	result3, fp
0fc60     14 4E 85 F1 | 	sub	fp, #20
0fc64     01 FE 15 F2 | 	cmp	result3, #1 wc
0fc68     8C 00 90 CD |  if_b	jmp	#LR__1248
0fc6c     0C 4E 05 F1 | 	add	fp, #12
0fc70     A7 FC 01 FB | 	rdlong	result2, fp
0fc74     1C 4E 05 F1 | 	add	fp, #28
0fc78     A7 FE 01 FB | 	rdlong	result3, fp
0fc7c     04 4E 05 F1 | 	add	fp, #4
0fc80     A7 12 02 FB | 	rdlong	arg01, fp
0fc84     10 4E 85 F1 | 	sub	fp, #16
0fc88     A7 FA 01 FB | 	rdlong	result1, fp
0fc8c     FD 12 02 FD | 	qmul	arg01, result1
0fc90     10 FC 05 F1 | 	add	result2, #16
0fc94     14 4E 05 F1 | 	add	fp, #20
0fc98     A7 1E 02 FB | 	rdlong	local01, fp
0fc9c     18 12 62 FD | 	getqx	arg01
0fca0     FD 1E 02 FD | 	qmul	local01, result1
0fca4     09 FF 01 F1 | 	add	result3, arg01
0fca8     10 4E 85 F1 | 	sub	fp, #16
0fcac     A7 1E 02 FB | 	rdlong	local01, fp
0fcb0     18 FA 61 FD | 	getqx	result1
0fcb4     0F FB 01 FD | 	qmul	result1, local01
0fcb8     08 4E 85 F1 | 	sub	fp, #8
0fcbc     A7 1E 02 FB | 	rdlong	local01, fp
0fcc0     18 FA 61 FD | 	getqx	result1
0fcc4     FD FE 01 F1 | 	add	result3, result1
0fcc8     0F FF 01 FD | 	qmul	result3, local01
0fccc     1C 4E 05 F1 | 	add	fp, #28
0fcd0     18 1E 62 FD | 	getqx	local01
0fcd4     0F FD 01 F1 | 	add	result2, local01
0fcd8     A7 FC 61 FC | 	wrlong	result2, fp
0fcdc     2C 4E 85 F1 | 	sub	fp, #44
0fce0     A7 3A 68 FC | 	wrlong	#29, fp
0fce4     2C 4E 05 F1 | 	add	fp, #44
0fce8     A7 1E 02 FB | 	rdlong	local01, fp
0fcec     34 4E 85 F1 | 	sub	fp, #52
0fcf0     A7 1E 62 FC | 	wrlong	local01, fp
0fcf4     18 00 90 FD | 	jmp	#LR__1249
0fcf8                 | LR__1248
0fcf8     08 4E 05 F1 | 	add	fp, #8
0fcfc     A7 3A 68 FC | 	wrlong	#29, fp
0fd00     04 4E 05 F1 | 	add	fp, #4
0fd04     A7 1E 02 FB | 	rdlong	local01, fp
0fd08     0C 4E 85 F1 | 	sub	fp, #12
0fd0c     A7 1E 62 FC | 	wrlong	local01, fp
0fd10                 | LR__1249
0fd10     A7 12 02 F6 | 	mov	arg01, fp
0fd14     18 AC BF FD | 	call	#_push
0fd18                 | LR__1250
0fd18     A7 F0 03 F6 | 	mov	ptra, fp
0fd1c     B2 00 A0 FD | 	call	#popregs_
0fd20                 | _do_getaddr_ret
0fd20     2D 00 64 FD | 	ret
0fd24                 | 
0fd24                 | ' 
0fd24                 | ' 
0fd24                 | ' sub do_inkey
0fd24                 | _do_inkey
0fd24     02 4A 05 F6 | 	mov	COUNT_, #2
0fd28     A8 00 A0 FD | 	call	#pushregs_
0fd2c     0C F0 07 F1 | 	add	ptra, #12
0fd30     84 E8 B0 FD | 	call	#_usbnew_spin2_get_key
0fd34     45 00 00 FF 
0fd38     A4 E4 05 F1 | 	add	objptr, ##35492
0fd3c     F2 FA 61 FC | 	wrlong	result1, objptr
0fd40                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0fd40     45 00 00 FF 
0fd44     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd48     00 FA 0D F2 | 	cmp	result1, #0 wz
0fd4c     94 00 90 AD |  if_e	jmp	#LR__1261
0fd50     45 00 00 FF 
0fd54     A4 E4 05 F1 | 	add	objptr, ##35492
0fd58     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd5c     45 00 00 FF 
0fd60     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd64     00 00 40 FF 
0fd68     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fd6c     45 00 00 CF 
0fd70     A4 E4 05 C1 |  if_b	add	objptr, ##35492
0fd74     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fd78     45 00 00 CF 
0fd7c     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
0fd80     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fd84     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fd88     58 00 90 3D |  if_ae	jmp	#LR__1261
0fd8c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0fd8c     58 00 00 FF 
0fd90     20 E5 05 F1 | 	add	objptr, ##45344
0fd94     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd98     58 00 00 FF 
0fd9c     20 E5 85 F1 | 	sub	objptr, ##45344
0fda0     01 1C 0E F2 | 	cmp	arg06, #1 wz
0fda4     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fda8     59 00 00 FF 
0fdac     C4 E5 05 F1 | 	add	objptr, ##46020
0fdb0     F2 14 02 FB | 	rdlong	arg02, objptr
0fdb4     04 E4 85 F1 | 	sub	objptr, #4
0fdb8     F2 1A 02 FB | 	rdlong	arg05, objptr
0fdbc     07 12 06 F6 | 	mov	arg01, #7
0fdc0     56 00 00 FF 
0fdc4     44 16 06 F6 | 	mov	arg03, ##44100
0fdc8     0C 18 C6 F9 | 	decod	arg04, #12
0fdcc     01 1C 66 F6 | 	neg	arg06, #1
0fdd0     4E 00 00 FF 
0fdd4     F4 E4 85 F1 | 	sub	objptr, ##40180
0fdd8     80 EB B0 FD | 	call	#_audio096_spin2_play
0fddc     0B 00 00 FF 
0fde0     CC E4 85 F1 | 	sub	objptr, ##5836
0fde4                 | LR__1260
0fde4                 | LR__1261
0fde4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0fde4     45 00 00 FF 
0fde8     A4 E4 05 F1 | 	add	objptr, ##35492
0fdec     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0fdf0     45 00 00 FF 
0fdf4     A4 E4 85 F1 | 	sub	objptr, ##35492
0fdf8     D4 01 90 AD |  if_e	jmp	#LR__1270
0fdfc     45 00 00 FF 
0fe00     A4 E4 05 F1 | 	add	objptr, ##35492
0fe04     F2 1C 02 FB | 	rdlong	arg06, objptr
0fe08     45 00 00 FF 
0fe0c     A4 E4 85 F1 | 	sub	objptr, ##35492
0fe10     00 00 40 FF 
0fe14     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fe18     45 00 00 CF 
0fe1c     A4 E4 05 C1 |  if_b	add	objptr, ##35492
0fe20     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fe24     45 00 00 CF 
0fe28     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
0fe2c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fe30     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fe34     98 01 90 3D |  if_ae	jmp	#LR__1270
0fe38                 | '   if leds and 2 = 2 then 
0fe38     59 00 00 FF 
0fe3c     EC E5 05 F1 | 	add	objptr, ##46060
0fe40     F2 1E 0A FB | 	rdlong	local01, objptr wz
0fe44     59 00 00 FF 
0fe48     EC E5 85 F1 | 	sub	objptr, ##46060
0fe4c     58 01 90 AD |  if_e	jmp	#LR__1269
0fe50                 | '     if key>96 andalso key<123 then
0fe50     45 00 00 FF 
0fe54     A4 E4 05 F1 | 	add	objptr, ##35492
0fe58     F2 1E 02 FB | 	rdlong	local01, objptr
0fe5c     45 00 00 FF 
0fe60     A4 E4 85 F1 | 	sub	objptr, ##35492
0fe64     61 1E 16 F2 | 	cmp	local01, #97 wc
0fe68     3C 00 90 CD |  if_b	jmp	#LR__1262
0fe6c     45 00 00 FF 
0fe70     A4 E4 05 F1 | 	add	objptr, ##35492
0fe74     F2 1E 02 FB | 	rdlong	local01, objptr
0fe78     45 00 00 FF 
0fe7c     A4 E4 85 F1 | 	sub	objptr, ##35492
0fe80     7B 1E 16 F2 | 	cmp	local01, #123 wc
0fe84     20 00 90 3D |  if_ae	jmp	#LR__1262
0fe88     45 00 00 FF 
0fe8c     A4 E4 05 F1 | 	add	objptr, ##35492
0fe90     F2 1E 02 FB | 	rdlong	local01, objptr
0fe94     20 1E 86 F1 | 	sub	local01, #32
0fe98     F2 1E 62 FC | 	wrlong	local01, objptr
0fe9c     45 00 00 FF 
0fea0     A4 E4 85 F1 | 	sub	objptr, ##35492
0fea4     00 01 90 FD | 	jmp	#LR__1268
0fea8                 | LR__1262
0fea8     45 00 00 FF 
0feac     A4 E4 05 F1 | 	add	objptr, ##35492
0feb0     F2 1E 02 FB | 	rdlong	local01, objptr
0feb4     45 00 00 FF 
0feb8     A4 E4 85 F1 | 	sub	objptr, ##35492
0febc     41 1E 16 F2 | 	cmp	local01, #65 wc
0fec0     3C 00 90 CD |  if_b	jmp	#LR__1263
0fec4     45 00 00 FF 
0fec8     A4 E4 05 F1 | 	add	objptr, ##35492
0fecc     F2 1E 02 FB | 	rdlong	local01, objptr
0fed0     45 00 00 FF 
0fed4     A4 E4 85 F1 | 	sub	objptr, ##35492
0fed8     5B 1E 16 F2 | 	cmp	local01, #91 wc
0fedc     20 00 90 3D |  if_ae	jmp	#LR__1263
0fee0     45 00 00 FF 
0fee4     A4 E4 05 F1 | 	add	objptr, ##35492
0fee8     F2 1E 02 FB | 	rdlong	local01, objptr
0feec     20 1E 06 F1 | 	add	local01, #32
0fef0     F2 1E 62 FC | 	wrlong	local01, objptr
0fef4     45 00 00 FF 
0fef8     A4 E4 85 F1 | 	sub	objptr, ##35492
0fefc     A8 00 90 FD | 	jmp	#LR__1267
0ff00                 | LR__1263
0ff00     45 00 00 FF 
0ff04     A4 E4 05 F1 | 	add	objptr, ##35492
0ff08     F2 1E 02 FB | 	rdlong	local01, objptr
0ff0c     45 00 00 FF 
0ff10     A4 E4 85 F1 | 	sub	objptr, ##35492
0ff14     17 1E 16 F2 | 	cmp	local01, #23 wc
0ff18     3C 00 90 CD |  if_b	jmp	#LR__1264
0ff1c     45 00 00 FF 
0ff20     A4 E4 05 F1 | 	add	objptr, ##35492
0ff24     F2 1E 02 FB | 	rdlong	local01, objptr
0ff28     45 00 00 FF 
0ff2c     A4 E4 85 F1 | 	sub	objptr, ##35492
0ff30     20 1E 16 F2 | 	cmp	local01, #32 wc
0ff34     20 00 90 3D |  if_ae	jmp	#LR__1264
0ff38     45 00 00 FF 
0ff3c     A4 E4 05 F1 | 	add	objptr, ##35492
0ff40     F2 1E 02 FB | 	rdlong	local01, objptr
0ff44     09 1E 86 F1 | 	sub	local01, #9
0ff48     F2 1E 62 FC | 	wrlong	local01, objptr
0ff4c     45 00 00 FF 
0ff50     A4 E4 85 F1 | 	sub	objptr, ##35492
0ff54     50 00 90 FD | 	jmp	#LR__1266
0ff58                 | LR__1264
0ff58     45 00 00 FF 
0ff5c     A4 E4 05 F1 | 	add	objptr, ##35492
0ff60     F2 20 02 FB | 	rdlong	local02, objptr
0ff64     45 00 00 FF 
0ff68     A4 E4 85 F1 | 	sub	objptr, ##35492
0ff6c     0E 20 16 F2 | 	cmp	local02, #14 wc
0ff70     34 00 90 CD |  if_b	jmp	#LR__1265
0ff74     45 00 00 FF 
0ff78     A4 E4 05 F1 | 	add	objptr, ##35492
0ff7c     F2 1E 02 FB | 	rdlong	local01, objptr
0ff80     45 00 00 FF 
0ff84     A4 E4 85 F1 | 	sub	objptr, ##35492
0ff88     17 1E 16 F2 | 	cmp	local01, #23 wc
0ff8c     59 00 00 CF 
0ff90     FC E5 05 C1 |  if_b	add	objptr, ##46076
0ff94     F2 20 02 CB |  if_b	rdlong	local02, objptr
0ff98     27 20 06 C1 |  if_b	add	local02, #39
0ff9c     F2 20 62 CC |  if_b	wrlong	local02, objptr
0ffa0     59 00 00 CF 
0ffa4     FC E5 85 C1 |  if_b	sub	objptr, ##46076
0ffa8                 | LR__1265
0ffa8                 | LR__1266
0ffa8                 | LR__1267
0ffa8                 | LR__1268
0ffa8                 | LR__1269
0ffa8     45 00 00 FF 
0ffac     A4 E4 05 F1 | 	add	objptr, ##35492
0ffb0     F2 12 02 FB | 	rdlong	arg01, objptr
0ffb4     45 00 00 FF 
0ffb8     A4 E4 85 F1 | 	sub	objptr, ##35492
0ffbc     A8 AC B0 FD | 	call	#_scantochar
0ffc0     FD 12 02 F6 | 	mov	arg01, result1
0ffc4     D8 0F B1 FD | 	call	#__system__Chr_S
0ffc8     A7 FA 61 FC | 	wrlong	result1, fp
0ffcc     0C 00 90 FD | 	jmp	#LR__1271
0ffd0                 | LR__1270
0ffd0     75 01 00 FF 
0ffd4     2B 20 06 F6 | 	mov	local02, ##@LR__5161
0ffd8     A7 20 62 FC | 	wrlong	local02, fp
0ffdc                 | LR__1271
0ffdc     08 4E 05 F1 | 	add	fp, #8
0ffe0     A7 3E 68 FC | 	wrlong	#31, fp
0ffe4     08 4E 85 F1 | 	sub	fp, #8
0ffe8     A7 12 02 F6 | 	mov	arg01, fp
0ffec     40 A9 BF FD | 	call	#_push
0fff0     A7 F0 03 F6 | 	mov	ptra, fp
0fff4     B2 00 A0 FD | 	call	#popregs_
0fff8                 | _do_inkey_ret
0fff8     2D 00 64 FD | 	ret
0fffc                 | 
0fffc                 | '  
0fffc                 | ' '------------------------ Operators 
0fffc                 | ' 
0fffc                 | ' sub do_plus 
0fffc                 | _do_plus
0fffc     05 4A 05 F6 | 	mov	COUNT_, #5
10000     A8 00 A0 FD | 	call	#pushregs_
10004     18 F0 07 F1 | 	add	ptra, #24
10008     8C A8 BF FD | 	call	#_pop
1000c     FD 1E 02 F6 | 	mov	local01, result1
10010     FE 20 02 F6 | 	mov	local02, result2
10014     FF 22 02 F6 | 	mov	local03, result3
10018     0C 4E 05 F1 | 	add	fp, #12
1001c     A7 1E 62 FC | 	wrlong	local01, fp
10020     04 4E 05 F1 | 	add	fp, #4
10024     A7 20 62 FC | 	wrlong	local02, fp
10028     04 4E 05 F1 | 	add	fp, #4
1002c     A7 22 62 FC | 	wrlong	local03, fp
10030     14 4E 85 F1 | 	sub	fp, #20
10034     60 A8 BF FD | 	call	#_pop
10038     FF 22 02 F6 | 	mov	local03, result3
1003c     A7 FA 61 FC | 	wrlong	result1, fp
10040     04 4E 05 F1 | 	add	fp, #4
10044     A7 FC 61 FC | 	wrlong	result2, fp
10048     04 4E 05 F1 | 	add	fp, #4
1004c     A7 22 62 FC | 	wrlong	local03, fp
10050                 | ' 
10050                 | ' t2=pop()
10050                 | ' t1=pop()
10050                 | ' 
10050                 | ' 
10050                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
10050     08 4E 85 F1 | 	sub	fp, #8
10054     1D 22 0E F2 | 	cmp	local03, #29 wz
10058     14 4E 05 A1 |  if_e	add	fp, #20
1005c     A7 24 02 AB |  if_e	rdlong	local04, fp
10060     14 4E 85 A1 |  if_e	sub	fp, #20
10064     12 23 02 A6 |  if_e	mov	local03, local04
10068     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1006c     1C 00 90 5D |  if_ne	jmp	#LR__1280
10070     A7 1E 02 FB | 	rdlong	local01, fp
10074     0C 4E 05 F1 | 	add	fp, #12
10078     A7 20 02 FB | 	rdlong	local02, fp
1007c     0C 4E 85 F1 | 	sub	fp, #12
10080     10 1F 02 F1 | 	add	local01, local02
10084     A7 1E 62 FC | 	wrlong	local01, fp
10088     48 04 90 FD | 	jmp	#LR__1295
1008c                 | LR__1280
1008c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1008c     08 4E 05 F1 | 	add	fp, #8
10090     A7 1E 02 FB | 	rdlong	local01, fp
10094     08 4E 85 F1 | 	sub	fp, #8
10098     1D 1E 0E F2 | 	cmp	local01, #29 wz
1009c     14 4E 05 A1 |  if_e	add	fp, #20
100a0     A7 24 02 AB |  if_e	rdlong	local04, fp
100a4     14 4E 85 A1 |  if_e	sub	fp, #20
100a8     12 23 02 A6 |  if_e	mov	local03, local04
100ac     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
100b0     28 00 90 5D |  if_ne	jmp	#LR__1281
100b4     A7 1E 02 FB | 	rdlong	local01, fp
100b8     0C 4E 05 F1 | 	add	fp, #12
100bc     A7 20 02 FB | 	rdlong	local02, fp
100c0     0C 4E 85 F1 | 	sub	fp, #12
100c4     10 1F 02 F1 | 	add	local01, local02
100c8     A7 1E 62 FC | 	wrlong	local01, fp
100cc     08 4E 05 F1 | 	add	fp, #8
100d0     A7 38 68 FC | 	wrlong	#28, fp
100d4     08 4E 85 F1 | 	sub	fp, #8
100d8     F8 03 90 FD | 	jmp	#LR__1295
100dc                 | LR__1281
100dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
100dc     08 4E 05 F1 | 	add	fp, #8
100e0     A7 1E 02 FB | 	rdlong	local01, fp
100e4     08 4E 85 F1 | 	sub	fp, #8
100e8     1D 1E 0E F2 | 	cmp	local01, #29 wz
100ec     14 4E 05 A1 |  if_e	add	fp, #20
100f0     A7 24 02 AB |  if_e	rdlong	local04, fp
100f4     14 4E 85 A1 |  if_e	sub	fp, #20
100f8     12 23 02 A6 |  if_e	mov	local03, local04
100fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10100     30 00 90 5D |  if_ne	jmp	#LR__1282
10104     A7 12 02 FB | 	rdlong	arg01, fp
10108     04 14 B1 FD | 	call	#__system___float_fromuns
1010c     FD 12 02 F6 | 	mov	arg01, result1
10110     0C 4E 05 F1 | 	add	fp, #12
10114     A7 14 02 FB | 	rdlong	arg02, fp
10118     0C 4E 85 F1 | 	sub	fp, #12
1011c     24 14 B1 FD | 	call	#__system___float_add
10120     A7 FA 61 FC | 	wrlong	result1, fp
10124     08 4E 05 F1 | 	add	fp, #8
10128     A7 3C 68 FC | 	wrlong	#30, fp
1012c     08 4E 85 F1 | 	sub	fp, #8
10130     A0 03 90 FD | 	jmp	#LR__1295
10134                 | LR__1282
10134                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
10134     08 4E 05 F1 | 	add	fp, #8
10138     A7 1E 02 FB | 	rdlong	local01, fp
1013c     08 4E 85 F1 | 	sub	fp, #8
10140     1C 1E 0E F2 | 	cmp	local01, #28 wz
10144     14 4E 05 A1 |  if_e	add	fp, #20
10148     A7 24 02 AB |  if_e	rdlong	local04, fp
1014c     14 4E 85 A1 |  if_e	sub	fp, #20
10150     12 23 02 A6 |  if_e	mov	local03, local04
10154     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10158     1C 00 90 5D |  if_ne	jmp	#LR__1283
1015c     A7 1E 02 FB | 	rdlong	local01, fp
10160     0C 4E 05 F1 | 	add	fp, #12
10164     A7 20 02 FB | 	rdlong	local02, fp
10168     0C 4E 85 F1 | 	sub	fp, #12
1016c     10 1F 02 F1 | 	add	local01, local02
10170     A7 1E 62 FC | 	wrlong	local01, fp
10174     5C 03 90 FD | 	jmp	#LR__1295
10178                 | LR__1283
10178                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
10178     08 4E 05 F1 | 	add	fp, #8
1017c     A7 1E 02 FB | 	rdlong	local01, fp
10180     08 4E 85 F1 | 	sub	fp, #8
10184     1C 1E 0E F2 | 	cmp	local01, #28 wz
10188     14 4E 05 A1 |  if_e	add	fp, #20
1018c     A7 24 02 AB |  if_e	rdlong	local04, fp
10190     14 4E 85 A1 |  if_e	sub	fp, #20
10194     12 23 02 A6 |  if_e	mov	local03, local04
10198     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1019c     1C 00 90 5D |  if_ne	jmp	#LR__1284
101a0     A7 1E 02 FB | 	rdlong	local01, fp
101a4     0C 4E 05 F1 | 	add	fp, #12
101a8     A7 20 02 FB | 	rdlong	local02, fp
101ac     0C 4E 85 F1 | 	sub	fp, #12
101b0     10 1F 02 F1 | 	add	local01, local02
101b4     A7 1E 62 FC | 	wrlong	local01, fp
101b8     18 03 90 FD | 	jmp	#LR__1295
101bc                 | LR__1284
101bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
101bc     08 4E 05 F1 | 	add	fp, #8
101c0     A7 1E 02 FB | 	rdlong	local01, fp
101c4     08 4E 85 F1 | 	sub	fp, #8
101c8     1C 1E 0E F2 | 	cmp	local01, #28 wz
101cc     14 4E 05 A1 |  if_e	add	fp, #20
101d0     A7 24 02 AB |  if_e	rdlong	local04, fp
101d4     14 4E 85 A1 |  if_e	sub	fp, #20
101d8     12 23 02 A6 |  if_e	mov	local03, local04
101dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
101e0     40 00 90 5D |  if_ne	jmp	#LR__1285
101e4     A7 12 02 FB | 	rdlong	arg01, fp
101e8     09 13 52 F6 | 	abs	arg01, arg01 wc
101ec     1F 26 C6 C9 |  if_b	decod	local05, #31
101f0     00 26 06 36 |  if_ae	mov	local05, #0
101f4     18 13 B1 FD | 	call	#__system___float_fromuns
101f8     13 FB 61 F5 | 	xor	result1, local05
101fc     FD 12 02 F6 | 	mov	arg01, result1
10200     0C 4E 05 F1 | 	add	fp, #12
10204     A7 14 02 FB | 	rdlong	arg02, fp
10208     0C 4E 85 F1 | 	sub	fp, #12
1020c     34 13 B1 FD | 	call	#__system___float_add
10210     A7 FA 61 FC | 	wrlong	result1, fp
10214     08 4E 05 F1 | 	add	fp, #8
10218     A7 3C 68 FC | 	wrlong	#30, fp
1021c     08 4E 85 F1 | 	sub	fp, #8
10220     B0 02 90 FD | 	jmp	#LR__1295
10224                 | LR__1285
10224                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
10224     08 4E 05 F1 | 	add	fp, #8
10228     A7 1E 02 FB | 	rdlong	local01, fp
1022c     08 4E 85 F1 | 	sub	fp, #8
10230     1E 1E 0E F2 | 	cmp	local01, #30 wz
10234     14 4E 05 A1 |  if_e	add	fp, #20
10238     A7 24 02 AB |  if_e	rdlong	local04, fp
1023c     14 4E 85 A1 |  if_e	sub	fp, #20
10240     12 23 02 A6 |  if_e	mov	local03, local04
10244     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10248     28 00 90 5D |  if_ne	jmp	#LR__1286
1024c     A7 1E 02 FB | 	rdlong	local01, fp
10250     0C 4E 05 F1 | 	add	fp, #12
10254     A7 12 02 FB | 	rdlong	arg01, fp
10258     0C 4E 85 F1 | 	sub	fp, #12
1025c     B0 12 B1 FD | 	call	#__system___float_fromuns
10260     FD 14 02 F6 | 	mov	arg02, result1
10264     0F 13 02 F6 | 	mov	arg01, local01
10268     D8 12 B1 FD | 	call	#__system___float_add
1026c     A7 FA 61 FC | 	wrlong	result1, fp
10270     60 02 90 FD | 	jmp	#LR__1295
10274                 | LR__1286
10274                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
10274     08 4E 05 F1 | 	add	fp, #8
10278     A7 1E 02 FB | 	rdlong	local01, fp
1027c     08 4E 85 F1 | 	sub	fp, #8
10280     1E 1E 0E F2 | 	cmp	local01, #30 wz
10284     14 4E 05 A1 |  if_e	add	fp, #20
10288     A7 24 02 AB |  if_e	rdlong	local04, fp
1028c     14 4E 85 A1 |  if_e	sub	fp, #20
10290     12 23 02 A6 |  if_e	mov	local03, local04
10294     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10298     38 00 90 5D |  if_ne	jmp	#LR__1287
1029c     A7 1E 02 FB | 	rdlong	local01, fp
102a0     0C 4E 05 F1 | 	add	fp, #12
102a4     A7 12 02 FB | 	rdlong	arg01, fp
102a8     0C 4E 85 F1 | 	sub	fp, #12
102ac     09 13 52 F6 | 	abs	arg01, arg01 wc
102b0     1F 26 C6 C9 |  if_b	decod	local05, #31
102b4     00 26 06 36 |  if_ae	mov	local05, #0
102b8     54 12 B1 FD | 	call	#__system___float_fromuns
102bc     13 FB 61 F5 | 	xor	result1, local05
102c0     FD 14 02 F6 | 	mov	arg02, result1
102c4     0F 13 02 F6 | 	mov	arg01, local01
102c8     78 12 B1 FD | 	call	#__system___float_add
102cc     A7 FA 61 FC | 	wrlong	result1, fp
102d0     00 02 90 FD | 	jmp	#LR__1295
102d4                 | LR__1287
102d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
102d4     08 4E 05 F1 | 	add	fp, #8
102d8     A7 1E 02 FB | 	rdlong	local01, fp
102dc     08 4E 85 F1 | 	sub	fp, #8
102e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
102e4     14 4E 05 A1 |  if_e	add	fp, #20
102e8     A7 24 02 AB |  if_e	rdlong	local04, fp
102ec     14 4E 85 A1 |  if_e	sub	fp, #20
102f0     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
102f4     1C 00 90 5D |  if_ne	jmp	#LR__1288
102f8     A7 12 02 FB | 	rdlong	arg01, fp
102fc     0C 4E 05 F1 | 	add	fp, #12
10300     A7 14 02 FB | 	rdlong	arg02, fp
10304     0C 4E 85 F1 | 	sub	fp, #12
10308     38 12 B1 FD | 	call	#__system___float_add
1030c     A7 FA 61 FC | 	wrlong	result1, fp
10310     C0 01 90 FD | 	jmp	#LR__1295
10314                 | LR__1288
10314                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
10314     08 4E 05 F1 | 	add	fp, #8
10318     A7 1E 02 FB | 	rdlong	local01, fp
1031c     08 4E 85 F1 | 	sub	fp, #8
10320     1F 1E 0E F2 | 	cmp	local01, #31 wz
10324     24 00 90 5D |  if_ne	jmp	#LR__1289
10328     14 4E 05 F1 | 	add	fp, #20
1032c     A7 22 02 FB | 	rdlong	local03, fp
10330     14 4E 85 F1 | 	sub	fp, #20
10334     1F 22 0E F2 | 	cmp	local03, #31 wz
10338     A7 04 68 5C |  if_ne	wrlong	#2, fp
1033c     08 4E 05 51 |  if_ne	add	fp, #8
10340     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10344     08 4E 85 51 |  if_ne	sub	fp, #8
10348     88 01 90 5D |  if_ne	jmp	#LR__1295
1034c                 | LR__1289
1034c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1034c     14 4E 05 F1 | 	add	fp, #20
10350     A7 1E 02 FB | 	rdlong	local01, fp
10354     14 4E 85 F1 | 	sub	fp, #20
10358     1F 1E 0E F2 | 	cmp	local01, #31 wz
1035c     24 00 90 5D |  if_ne	jmp	#LR__1290
10360     08 4E 05 F1 | 	add	fp, #8
10364     A7 22 02 FB | 	rdlong	local03, fp
10368     08 4E 85 F1 | 	sub	fp, #8
1036c     1F 22 0E F2 | 	cmp	local03, #31 wz
10370     A7 04 68 5C |  if_ne	wrlong	#2, fp
10374     08 4E 05 51 |  if_ne	add	fp, #8
10378     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1037c     08 4E 85 51 |  if_ne	sub	fp, #8
10380     50 01 90 5D |  if_ne	jmp	#LR__1295
10384                 | LR__1290
10384                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
10384     08 4E 05 F1 | 	add	fp, #8
10388     A7 1E 02 FB | 	rdlong	local01, fp
1038c     08 4E 85 F1 | 	sub	fp, #8
10390     1F 1E 0E F2 | 	cmp	local01, #31 wz
10394     14 4E 05 A1 |  if_e	add	fp, #20
10398     A7 22 02 AB |  if_e	rdlong	local03, fp
1039c     14 4E 85 A1 |  if_e	sub	fp, #20
103a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
103a4     1C 00 90 5D |  if_ne	jmp	#LR__1291
103a8     A7 12 02 FB | 	rdlong	arg01, fp
103ac     0C 4E 05 F1 | 	add	fp, #12
103b0     A7 14 02 FB | 	rdlong	arg02, fp
103b4     0C 4E 85 F1 | 	sub	fp, #12
103b8     6C EA B0 FD | 	call	#__system___string_concat
103bc     A7 FA 61 FC | 	wrlong	result1, fp
103c0     10 01 90 FD | 	jmp	#LR__1295
103c4                 | LR__1291
103c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
103c4     08 4E 05 F1 | 	add	fp, #8
103c8     A7 1E 02 FB | 	rdlong	local01, fp
103cc     08 4E 85 F1 | 	sub	fp, #8
103d0     2B 1E 0E F2 | 	cmp	local01, #43 wz
103d4     14 4E 05 A1 |  if_e	add	fp, #20
103d8     A7 22 02 AB |  if_e	rdlong	local03, fp
103dc     14 4E 85 A1 |  if_e	sub	fp, #20
103e0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
103e4     30 00 90 5D |  if_ne	jmp	#LR__1292
103e8     A7 12 02 FB | 	rdlong	arg01, fp
103ec     20 E9 BF FD | 	call	#_convertstring
103f0     FD 12 02 F6 | 	mov	arg01, result1
103f4     0C 4E 05 F1 | 	add	fp, #12
103f8     A7 14 02 FB | 	rdlong	arg02, fp
103fc     0C 4E 85 F1 | 	sub	fp, #12
10400     24 EA B0 FD | 	call	#__system___string_concat
10404     A7 FA 61 FC | 	wrlong	result1, fp
10408     08 4E 05 F1 | 	add	fp, #8
1040c     A7 3E 68 FC | 	wrlong	#31, fp
10410     08 4E 85 F1 | 	sub	fp, #8
10414     BC 00 90 FD | 	jmp	#LR__1295
10418                 | LR__1292
10418                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
10418     08 4E 05 F1 | 	add	fp, #8
1041c     A7 1E 02 FB | 	rdlong	local01, fp
10420     08 4E 85 F1 | 	sub	fp, #8
10424     1F 1E 0E F2 | 	cmp	local01, #31 wz
10428     14 4E 05 A1 |  if_e	add	fp, #20
1042c     A7 22 02 AB |  if_e	rdlong	local03, fp
10430     14 4E 85 A1 |  if_e	sub	fp, #20
10434     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10438     28 00 90 5D |  if_ne	jmp	#LR__1293
1043c     A7 1E 02 FB | 	rdlong	local01, fp
10440     0C 4E 05 F1 | 	add	fp, #12
10444     A7 12 02 FB | 	rdlong	arg01, fp
10448     0C 4E 85 F1 | 	sub	fp, #12
1044c     C0 E8 BF FD | 	call	#_convertstring
10450     FD 14 02 F6 | 	mov	arg02, result1
10454     0F 13 02 F6 | 	mov	arg01, local01
10458     CC E9 B0 FD | 	call	#__system___string_concat
1045c     A7 FA 61 FC | 	wrlong	result1, fp
10460     70 00 90 FD | 	jmp	#LR__1295
10464                 | LR__1293
10464                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
10464     08 4E 05 F1 | 	add	fp, #8
10468     A7 1E 02 FB | 	rdlong	local01, fp
1046c     08 4E 85 F1 | 	sub	fp, #8
10470     2B 1E 0E F2 | 	cmp	local01, #43 wz
10474     14 4E 05 A1 |  if_e	add	fp, #20
10478     A7 22 02 AB |  if_e	rdlong	local03, fp
1047c     14 4E 85 A1 |  if_e	sub	fp, #20
10480     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10484     3C 00 90 5D |  if_ne	jmp	#LR__1294
10488     A7 12 02 FB | 	rdlong	arg01, fp
1048c     80 E8 BF FD | 	call	#_convertstring
10490     FD 1E 02 F6 | 	mov	local01, result1
10494     0C 4E 05 F1 | 	add	fp, #12
10498     A7 12 02 FB | 	rdlong	arg01, fp
1049c     0C 4E 85 F1 | 	sub	fp, #12
104a0     6C E8 BF FD | 	call	#_convertstring
104a4     FD 14 02 F6 | 	mov	arg02, result1
104a8     0F 13 02 F6 | 	mov	arg01, local01
104ac     78 E9 B0 FD | 	call	#__system___string_concat
104b0     A7 FA 61 FC | 	wrlong	result1, fp
104b4     08 4E 05 F1 | 	add	fp, #8
104b8     A7 3E 68 FC | 	wrlong	#31, fp
104bc     08 4E 85 F1 | 	sub	fp, #8
104c0     10 00 90 FD | 	jmp	#LR__1295
104c4                 | LR__1294
104c4     A7 08 68 FC | 	wrlong	#4, fp
104c8     08 4E 05 F1 | 	add	fp, #8
104cc     A7 FE 69 FC | 	wrlong	#255, fp
104d0     08 4E 85 F1 | 	sub	fp, #8
104d4                 | LR__1295
104d4     A7 12 02 F6 | 	mov	arg01, fp
104d8     54 A4 BF FD | 	call	#_push
104dc     A7 F0 03 F6 | 	mov	ptra, fp
104e0     B2 00 A0 FD | 	call	#popregs_
104e4                 | _do_plus_ret
104e4     2D 00 64 FD | 	ret
104e8                 | 
104e8                 | ' 
104e8                 | ' sub do_minus
104e8                 | _do_minus
104e8     05 4A 05 F6 | 	mov	COUNT_, #5
104ec     A8 00 A0 FD | 	call	#pushregs_
104f0     18 F0 07 F1 | 	add	ptra, #24
104f4     A0 A3 BF FD | 	call	#_pop
104f8     FD 1E 02 F6 | 	mov	local01, result1
104fc     FE 20 02 F6 | 	mov	local02, result2
10500     FF 22 02 F6 | 	mov	local03, result3
10504     0C 4E 05 F1 | 	add	fp, #12
10508     A7 1E 62 FC | 	wrlong	local01, fp
1050c     04 4E 05 F1 | 	add	fp, #4
10510     A7 20 62 FC | 	wrlong	local02, fp
10514     04 4E 05 F1 | 	add	fp, #4
10518     A7 22 62 FC | 	wrlong	local03, fp
1051c     14 4E 85 F1 | 	sub	fp, #20
10520     74 A3 BF FD | 	call	#_pop
10524     FF 22 02 F6 | 	mov	local03, result3
10528     A7 FA 61 FC | 	wrlong	result1, fp
1052c     04 4E 05 F1 | 	add	fp, #4
10530     A7 FC 61 FC | 	wrlong	result2, fp
10534     04 4E 05 F1 | 	add	fp, #4
10538     A7 22 62 FC | 	wrlong	local03, fp
1053c                 | ' 
1053c                 | ' t2=pop()
1053c                 | ' t1=pop()
1053c                 | ' 
1053c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1053c     08 4E 85 F1 | 	sub	fp, #8
10540     1D 22 0E F2 | 	cmp	local03, #29 wz
10544     14 4E 05 A1 |  if_e	add	fp, #20
10548     A7 24 02 AB |  if_e	rdlong	local04, fp
1054c     14 4E 85 A1 |  if_e	sub	fp, #20
10550     12 23 02 A6 |  if_e	mov	local03, local04
10554     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10558     5C 00 90 5D |  if_ne	jmp	#LR__1301
1055c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1055c     0C 4E 05 F1 | 	add	fp, #12
10560     A7 1E 02 FB | 	rdlong	local01, fp
10564     0C 4E 85 F1 | 	sub	fp, #12
10568     A7 22 02 FB | 	rdlong	local03, fp
1056c     11 1F 12 F2 | 	cmp	local01, local03 wc
10570     1C 00 90 3D |  if_ae	jmp	#LR__1300
10574     A7 1E 02 FB | 	rdlong	local01, fp
10578     0C 4E 05 F1 | 	add	fp, #12
1057c     A7 20 02 FB | 	rdlong	local02, fp
10580     0C 4E 85 F1 | 	sub	fp, #12
10584     10 1F 82 F1 | 	sub	local01, local02
10588     A7 1E 62 FC | 	wrlong	local01, fp
1058c     F4 02 90 FD | 	jmp	#LR__1310
10590                 | LR__1300
10590     A7 1E 02 FB | 	rdlong	local01, fp
10594     0C 4E 05 F1 | 	add	fp, #12
10598     A7 20 02 FB | 	rdlong	local02, fp
1059c     0C 4E 85 F1 | 	sub	fp, #12
105a0     10 1F 82 F1 | 	sub	local01, local02
105a4     A7 1E 62 FC | 	wrlong	local01, fp
105a8     08 4E 05 F1 | 	add	fp, #8
105ac     A7 38 68 FC | 	wrlong	#28, fp
105b0     08 4E 85 F1 | 	sub	fp, #8
105b4     CC 02 90 FD | 	jmp	#LR__1310
105b8                 | LR__1301
105b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
105b8     08 4E 05 F1 | 	add	fp, #8
105bc     A7 1E 02 FB | 	rdlong	local01, fp
105c0     08 4E 85 F1 | 	sub	fp, #8
105c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
105c8     14 4E 05 A1 |  if_e	add	fp, #20
105cc     A7 24 02 AB |  if_e	rdlong	local04, fp
105d0     14 4E 85 A1 |  if_e	sub	fp, #20
105d4     12 23 02 A6 |  if_e	mov	local03, local04
105d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
105dc     28 00 90 5D |  if_ne	jmp	#LR__1302
105e0     A7 1E 02 FB | 	rdlong	local01, fp
105e4     0C 4E 05 F1 | 	add	fp, #12
105e8     A7 20 02 FB | 	rdlong	local02, fp
105ec     0C 4E 85 F1 | 	sub	fp, #12
105f0     10 1F 82 F1 | 	sub	local01, local02
105f4     A7 1E 62 FC | 	wrlong	local01, fp
105f8     08 4E 05 F1 | 	add	fp, #8
105fc     A7 38 68 FC | 	wrlong	#28, fp
10600     08 4E 85 F1 | 	sub	fp, #8
10604     7C 02 90 FD | 	jmp	#LR__1310
10608                 | LR__1302
10608                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
10608     08 4E 05 F1 | 	add	fp, #8
1060c     A7 1E 02 FB | 	rdlong	local01, fp
10610     08 4E 85 F1 | 	sub	fp, #8
10614     1D 1E 0E F2 | 	cmp	local01, #29 wz
10618     14 4E 05 A1 |  if_e	add	fp, #20
1061c     A7 24 02 AB |  if_e	rdlong	local04, fp
10620     14 4E 85 A1 |  if_e	sub	fp, #20
10624     12 23 02 A6 |  if_e	mov	local03, local04
10628     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1062c     34 00 90 5D |  if_ne	jmp	#LR__1303
10630     A7 12 02 FB | 	rdlong	arg01, fp
10634     D8 0E B1 FD | 	call	#__system___float_fromuns
10638     FD 12 02 F6 | 	mov	arg01, result1
1063c     0C 4E 05 F1 | 	add	fp, #12
10640     A7 14 02 FB | 	rdlong	arg02, fp
10644     0C 4E 85 F1 | 	sub	fp, #12
10648     1F 14 E6 F4 | 	bitnot	arg02, #31
1064c     F4 0E B1 FD | 	call	#__system___float_add
10650     A7 FA 61 FC | 	wrlong	result1, fp
10654     08 4E 05 F1 | 	add	fp, #8
10658     A7 3C 68 FC | 	wrlong	#30, fp
1065c     08 4E 85 F1 | 	sub	fp, #8
10660     20 02 90 FD | 	jmp	#LR__1310
10664                 | LR__1303
10664                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
10664     08 4E 05 F1 | 	add	fp, #8
10668     A7 1E 02 FB | 	rdlong	local01, fp
1066c     08 4E 85 F1 | 	sub	fp, #8
10670     1C 1E 0E F2 | 	cmp	local01, #28 wz
10674     14 4E 05 A1 |  if_e	add	fp, #20
10678     A7 24 02 AB |  if_e	rdlong	local04, fp
1067c     14 4E 85 A1 |  if_e	sub	fp, #20
10680     12 23 02 A6 |  if_e	mov	local03, local04
10684     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10688     1C 00 90 5D |  if_ne	jmp	#LR__1304
1068c     A7 1E 02 FB | 	rdlong	local01, fp
10690     0C 4E 05 F1 | 	add	fp, #12
10694     A7 20 02 FB | 	rdlong	local02, fp
10698     0C 4E 85 F1 | 	sub	fp, #12
1069c     10 1F 82 F1 | 	sub	local01, local02
106a0     A7 1E 62 FC | 	wrlong	local01, fp
106a4     DC 01 90 FD | 	jmp	#LR__1310
106a8                 | LR__1304
106a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
106a8     08 4E 05 F1 | 	add	fp, #8
106ac     A7 1E 02 FB | 	rdlong	local01, fp
106b0     08 4E 85 F1 | 	sub	fp, #8
106b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
106b8     14 4E 05 A1 |  if_e	add	fp, #20
106bc     A7 24 02 AB |  if_e	rdlong	local04, fp
106c0     14 4E 85 A1 |  if_e	sub	fp, #20
106c4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
106c8     1C 00 90 5D |  if_ne	jmp	#LR__1305
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     0C 4E 05 F1 | 	add	fp, #12
106d4     A7 20 02 FB | 	rdlong	local02, fp
106d8     0C 4E 85 F1 | 	sub	fp, #12
106dc     10 1F 82 F1 | 	sub	local01, local02
106e0     A7 1E 62 FC | 	wrlong	local01, fp
106e4     9C 01 90 FD | 	jmp	#LR__1310
106e8                 | LR__1305
106e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
106e8     08 4E 05 F1 | 	add	fp, #8
106ec     A7 1E 02 FB | 	rdlong	local01, fp
106f0     08 4E 85 F1 | 	sub	fp, #8
106f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
106f8     14 4E 05 A1 |  if_e	add	fp, #20
106fc     A7 22 02 AB |  if_e	rdlong	local03, fp
10700     14 4E 85 A1 |  if_e	sub	fp, #20
10704     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10708     44 00 90 5D |  if_ne	jmp	#LR__1306
1070c     A7 12 02 FB | 	rdlong	arg01, fp
10710     09 13 52 F6 | 	abs	arg01, arg01 wc
10714     1F 26 C6 C9 |  if_b	decod	local05, #31
10718     00 26 06 36 |  if_ae	mov	local05, #0
1071c     F0 0D B1 FD | 	call	#__system___float_fromuns
10720     13 FB 61 F5 | 	xor	result1, local05
10724     FD 12 02 F6 | 	mov	arg01, result1
10728     0C 4E 05 F1 | 	add	fp, #12
1072c     A7 14 02 FB | 	rdlong	arg02, fp
10730     0C 4E 85 F1 | 	sub	fp, #12
10734     1F 14 E6 F4 | 	bitnot	arg02, #31
10738     08 0E B1 FD | 	call	#__system___float_add
1073c     A7 FA 61 FC | 	wrlong	result1, fp
10740     08 4E 05 F1 | 	add	fp, #8
10744     A7 3C 68 FC | 	wrlong	#30, fp
10748     08 4E 85 F1 | 	sub	fp, #8
1074c     34 01 90 FD | 	jmp	#LR__1310
10750                 | LR__1306
10750                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
10750     08 4E 05 F1 | 	add	fp, #8
10754     A7 1E 02 FB | 	rdlong	local01, fp
10758     08 4E 85 F1 | 	sub	fp, #8
1075c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10760     14 4E 05 A1 |  if_e	add	fp, #20
10764     A7 22 02 AB |  if_e	rdlong	local03, fp
10768     14 4E 85 A1 |  if_e	sub	fp, #20
1076c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10770     2C 00 90 5D |  if_ne	jmp	#LR__1307
10774     A7 1E 02 FB | 	rdlong	local01, fp
10778     0C 4E 05 F1 | 	add	fp, #12
1077c     A7 12 02 FB | 	rdlong	arg01, fp
10780     0C 4E 85 F1 | 	sub	fp, #12
10784     88 0D B1 FD | 	call	#__system___float_fromuns
10788     FD 14 02 F6 | 	mov	arg02, result1
1078c     0F 13 02 F6 | 	mov	arg01, local01
10790     1F 14 E6 F4 | 	bitnot	arg02, #31
10794     AC 0D B1 FD | 	call	#__system___float_add
10798     A7 FA 61 FC | 	wrlong	result1, fp
1079c     E4 00 90 FD | 	jmp	#LR__1310
107a0                 | LR__1307
107a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
107a0     08 4E 05 F1 | 	add	fp, #8
107a4     A7 1E 02 FB | 	rdlong	local01, fp
107a8     08 4E 85 F1 | 	sub	fp, #8
107ac     1E 1E 0E F2 | 	cmp	local01, #30 wz
107b0     14 4E 05 A1 |  if_e	add	fp, #20
107b4     A7 22 02 AB |  if_e	rdlong	local03, fp
107b8     14 4E 85 A1 |  if_e	sub	fp, #20
107bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
107c0     3C 00 90 5D |  if_ne	jmp	#LR__1308
107c4     A7 1E 02 FB | 	rdlong	local01, fp
107c8     0C 4E 05 F1 | 	add	fp, #12
107cc     A7 12 02 FB | 	rdlong	arg01, fp
107d0     0C 4E 85 F1 | 	sub	fp, #12
107d4     09 13 52 F6 | 	abs	arg01, arg01 wc
107d8     1F 26 C6 C9 |  if_b	decod	local05, #31
107dc     00 26 06 36 |  if_ae	mov	local05, #0
107e0     2C 0D B1 FD | 	call	#__system___float_fromuns
107e4     13 FB 61 F5 | 	xor	result1, local05
107e8     FD 14 02 F6 | 	mov	arg02, result1
107ec     0F 13 02 F6 | 	mov	arg01, local01
107f0     1F 14 E6 F4 | 	bitnot	arg02, #31
107f4     4C 0D B1 FD | 	call	#__system___float_add
107f8     A7 FA 61 FC | 	wrlong	result1, fp
107fc     84 00 90 FD | 	jmp	#LR__1310
10800                 | LR__1308
10800                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
10800     08 4E 05 F1 | 	add	fp, #8
10804     A7 1E 02 FB | 	rdlong	local01, fp
10808     08 4E 85 F1 | 	sub	fp, #8
1080c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10810     14 4E 05 A1 |  if_e	add	fp, #20
10814     A7 22 02 AB |  if_e	rdlong	local03, fp
10818     14 4E 85 A1 |  if_e	sub	fp, #20
1081c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10820     20 00 90 5D |  if_ne	jmp	#LR__1309
10824     A7 12 02 FB | 	rdlong	arg01, fp
10828     0C 4E 05 F1 | 	add	fp, #12
1082c     A7 14 02 FB | 	rdlong	arg02, fp
10830     0C 4E 85 F1 | 	sub	fp, #12
10834     1F 14 E6 F4 | 	bitnot	arg02, #31
10838     08 0D B1 FD | 	call	#__system___float_add
1083c     A7 FA 61 FC | 	wrlong	result1, fp
10840     40 00 90 FD | 	jmp	#LR__1310
10844                 | LR__1309
10844                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
10844     08 4E 05 F1 | 	add	fp, #8
10848     A7 1E 02 FB | 	rdlong	local01, fp
1084c     08 4E 85 F1 | 	sub	fp, #8
10850     1F 1E 0E F2 | 	cmp	local01, #31 wz
10854     14 4E 05 51 |  if_ne	add	fp, #20
10858     A7 22 02 5B |  if_ne	rdlong	local03, fp
1085c     14 4E 85 51 |  if_ne	sub	fp, #20
10860     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10864     A7 06 68 AC |  if_e	wrlong	#3, fp
10868     08 4E 05 A1 |  if_e	add	fp, #8
1086c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10870     08 4E 85 A1 |  if_e	sub	fp, #8
10874     A7 0A 68 5C |  if_ne	wrlong	#5, fp
10878     08 4E 05 51 |  if_ne	add	fp, #8
1087c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10880     08 4E 85 51 |  if_ne	sub	fp, #8
10884                 | LR__1310
10884     A7 12 02 F6 | 	mov	arg01, fp
10888     A4 A0 BF FD | 	call	#_push
1088c     A7 F0 03 F6 | 	mov	ptra, fp
10890     B2 00 A0 FD | 	call	#popregs_
10894                 | _do_minus_ret
10894     2D 00 64 FD | 	ret
10898                 | 
10898                 | ' 
10898                 | ' sub do_and 
10898                 | _do_and
10898     03 4A 05 F6 | 	mov	COUNT_, #3
1089c     A8 00 A0 FD | 	call	#pushregs_
108a0     18 F0 07 F1 | 	add	ptra, #24
108a4     F0 9F BF FD | 	call	#_pop
108a8     FD 12 02 F6 | 	mov	arg01, result1
108ac     FE 1E 02 F6 | 	mov	local01, result2
108b0     FF 20 02 F6 | 	mov	local02, result3
108b4     0C 4E 05 F1 | 	add	fp, #12
108b8     A7 12 62 FC | 	wrlong	arg01, fp
108bc     04 4E 05 F1 | 	add	fp, #4
108c0     A7 1E 62 FC | 	wrlong	local01, fp
108c4     04 4E 05 F1 | 	add	fp, #4
108c8     A7 20 62 FC | 	wrlong	local02, fp
108cc     14 4E 85 F1 | 	sub	fp, #20
108d0     C4 9F BF FD | 	call	#_pop
108d4     FF 22 02 F6 | 	mov	local03, result3
108d8     A7 FA 61 FC | 	wrlong	result1, fp
108dc     04 4E 05 F1 | 	add	fp, #4
108e0     A7 FC 61 FC | 	wrlong	result2, fp
108e4     04 4E 05 F1 | 	add	fp, #4
108e8     A7 22 62 FC | 	wrlong	local03, fp
108ec                 | ' 
108ec                 | ' t2=pop()
108ec                 | ' t1=pop()
108ec                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
108ec     08 4E 85 F1 | 	sub	fp, #8
108f0     1C 22 0E F2 | 	cmp	local03, #28 wz
108f4     A7 22 02 AB |  if_e	rdlong	local03, fp
108f8     A7 22 62 AC |  if_e	wrlong	local03, fp
108fc     08 4E 05 A1 |  if_e	add	fp, #8
10900     A7 3A 68 AC |  if_e	wrlong	#29, fp
10904     08 4E 85 A1 |  if_e	sub	fp, #8
10908                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10908     14 4E 05 F1 | 	add	fp, #20
1090c     A7 22 02 FB | 	rdlong	local03, fp
10910     14 4E 85 F1 | 	sub	fp, #20
10914     1C 22 0E F2 | 	cmp	local03, #28 wz
10918     18 00 90 5D |  if_ne	jmp	#LR__1320
1091c     0C 4E 05 F1 | 	add	fp, #12
10920     A7 22 02 FB | 	rdlong	local03, fp
10924     A7 22 62 FC | 	wrlong	local03, fp
10928     08 4E 05 F1 | 	add	fp, #8
1092c     A7 3A 68 FC | 	wrlong	#29, fp
10930     14 4E 85 F1 | 	sub	fp, #20
10934                 | LR__1320
10934                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
10934     08 4E 05 F1 | 	add	fp, #8
10938     A7 22 02 FB | 	rdlong	local03, fp
1093c     08 4E 85 F1 | 	sub	fp, #8
10940     1F 22 0E F2 | 	cmp	local03, #31 wz
10944     14 4E 05 51 |  if_ne	add	fp, #20
10948     A7 20 02 5B |  if_ne	rdlong	local02, fp
1094c     14 4E 85 51 |  if_ne	sub	fp, #20
10950     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10954     08 4E 05 51 |  if_ne	add	fp, #8
10958     A7 22 02 5B |  if_ne	rdlong	local03, fp
1095c     08 4E 85 51 |  if_ne	sub	fp, #8
10960     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10964     14 4E 05 51 |  if_ne	add	fp, #20
10968     14 4E 85 51 |  if_ne	sub	fp, #20
1096c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10970     A7 0C 68 AC |  if_e	wrlong	#6, fp
10974     08 4E 05 A1 |  if_e	add	fp, #8
10978     A7 FE 69 AC |  if_e	wrlong	#255, fp
1097c     08 4E 85 A1 |  if_e	sub	fp, #8
10980     18 00 90 AD |  if_e	jmp	#LR__1321
10984     A7 22 02 FB | 	rdlong	local03, fp
10988     0C 4E 05 F1 | 	add	fp, #12
1098c     A7 1E 02 FB | 	rdlong	local01, fp
10990     0C 4E 85 F1 | 	sub	fp, #12
10994     0F 23 02 F5 | 	and	local03, local01
10998     A7 22 62 FC | 	wrlong	local03, fp
1099c                 | LR__1321
1099c     A7 12 02 F6 | 	mov	arg01, fp
109a0     8C 9F BF FD | 	call	#_push
109a4     A7 F0 03 F6 | 	mov	ptra, fp
109a8     B2 00 A0 FD | 	call	#popregs_
109ac                 | _do_and_ret
109ac     2D 00 64 FD | 	ret
109b0                 | 
109b0                 | ' 
109b0                 | ' sub do_or 
109b0                 | _do_or
109b0     03 4A 05 F6 | 	mov	COUNT_, #3
109b4     A8 00 A0 FD | 	call	#pushregs_
109b8     18 F0 07 F1 | 	add	ptra, #24
109bc     D8 9E BF FD | 	call	#_pop
109c0     FD 12 02 F6 | 	mov	arg01, result1
109c4     FE 1E 02 F6 | 	mov	local01, result2
109c8     FF 20 02 F6 | 	mov	local02, result3
109cc     0C 4E 05 F1 | 	add	fp, #12
109d0     A7 12 62 FC | 	wrlong	arg01, fp
109d4     04 4E 05 F1 | 	add	fp, #4
109d8     A7 1E 62 FC | 	wrlong	local01, fp
109dc     04 4E 05 F1 | 	add	fp, #4
109e0     A7 20 62 FC | 	wrlong	local02, fp
109e4     14 4E 85 F1 | 	sub	fp, #20
109e8     AC 9E BF FD | 	call	#_pop
109ec     FF 22 02 F6 | 	mov	local03, result3
109f0     A7 FA 61 FC | 	wrlong	result1, fp
109f4     04 4E 05 F1 | 	add	fp, #4
109f8     A7 FC 61 FC | 	wrlong	result2, fp
109fc     04 4E 05 F1 | 	add	fp, #4
10a00     A7 22 62 FC | 	wrlong	local03, fp
10a04                 | ' 
10a04                 | ' t2=pop()
10a04                 | ' t1=pop()
10a04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10a04     08 4E 85 F1 | 	sub	fp, #8
10a08     1C 22 0E F2 | 	cmp	local03, #28 wz
10a0c     A7 22 02 AB |  if_e	rdlong	local03, fp
10a10     A7 22 62 AC |  if_e	wrlong	local03, fp
10a14     08 4E 05 A1 |  if_e	add	fp, #8
10a18     A7 3A 68 AC |  if_e	wrlong	#29, fp
10a1c     08 4E 85 A1 |  if_e	sub	fp, #8
10a20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10a20     14 4E 05 F1 | 	add	fp, #20
10a24     A7 22 02 FB | 	rdlong	local03, fp
10a28     14 4E 85 F1 | 	sub	fp, #20
10a2c     1C 22 0E F2 | 	cmp	local03, #28 wz
10a30     18 00 90 5D |  if_ne	jmp	#LR__1330
10a34     0C 4E 05 F1 | 	add	fp, #12
10a38     A7 22 02 FB | 	rdlong	local03, fp
10a3c     A7 22 62 FC | 	wrlong	local03, fp
10a40     08 4E 05 F1 | 	add	fp, #8
10a44     A7 3A 68 FC | 	wrlong	#29, fp
10a48     14 4E 85 F1 | 	sub	fp, #20
10a4c                 | LR__1330
10a4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
10a4c     08 4E 05 F1 | 	add	fp, #8
10a50     A7 22 02 FB | 	rdlong	local03, fp
10a54     08 4E 85 F1 | 	sub	fp, #8
10a58     1F 22 0E F2 | 	cmp	local03, #31 wz
10a5c     14 4E 05 51 |  if_ne	add	fp, #20
10a60     A7 20 02 5B |  if_ne	rdlong	local02, fp
10a64     14 4E 85 51 |  if_ne	sub	fp, #20
10a68     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10a6c     08 4E 05 51 |  if_ne	add	fp, #8
10a70     A7 22 02 5B |  if_ne	rdlong	local03, fp
10a74     08 4E 85 51 |  if_ne	sub	fp, #8
10a78     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10a7c     14 4E 05 51 |  if_ne	add	fp, #20
10a80     14 4E 85 51 |  if_ne	sub	fp, #20
10a84     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10a88     A7 0C 68 AC |  if_e	wrlong	#6, fp
10a8c     08 4E 05 A1 |  if_e	add	fp, #8
10a90     A7 FE 69 AC |  if_e	wrlong	#255, fp
10a94     08 4E 85 A1 |  if_e	sub	fp, #8
10a98     18 00 90 AD |  if_e	jmp	#LR__1331
10a9c     A7 22 02 FB | 	rdlong	local03, fp
10aa0     0C 4E 05 F1 | 	add	fp, #12
10aa4     A7 1E 02 FB | 	rdlong	local01, fp
10aa8     0C 4E 85 F1 | 	sub	fp, #12
10aac     0F 23 42 F5 | 	or	local03, local01
10ab0     A7 22 62 FC | 	wrlong	local03, fp
10ab4                 | LR__1331
10ab4     A7 12 02 F6 | 	mov	arg01, fp
10ab8     74 9E BF FD | 	call	#_push
10abc     A7 F0 03 F6 | 	mov	ptra, fp
10ac0     B2 00 A0 FD | 	call	#popregs_
10ac4                 | _do_or_ret
10ac4     2D 00 64 FD | 	ret
10ac8                 | 
10ac8                 | ' 
10ac8                 | ' sub do_mul
10ac8                 | _do_mul
10ac8     05 4A 05 F6 | 	mov	COUNT_, #5
10acc     A8 00 A0 FD | 	call	#pushregs_
10ad0     18 F0 07 F1 | 	add	ptra, #24
10ad4     C0 9D BF FD | 	call	#_pop
10ad8     FD 1E 02 F6 | 	mov	local01, result1
10adc     FE 20 02 F6 | 	mov	local02, result2
10ae0     FF 22 02 F6 | 	mov	local03, result3
10ae4     0C 4E 05 F1 | 	add	fp, #12
10ae8     A7 1E 62 FC | 	wrlong	local01, fp
10aec     04 4E 05 F1 | 	add	fp, #4
10af0     A7 20 62 FC | 	wrlong	local02, fp
10af4     04 4E 05 F1 | 	add	fp, #4
10af8     A7 22 62 FC | 	wrlong	local03, fp
10afc     14 4E 85 F1 | 	sub	fp, #20
10b00     94 9D BF FD | 	call	#_pop
10b04     FF 22 02 F6 | 	mov	local03, result3
10b08     A7 FA 61 FC | 	wrlong	result1, fp
10b0c     04 4E 05 F1 | 	add	fp, #4
10b10     A7 FC 61 FC | 	wrlong	result2, fp
10b14     04 4E 05 F1 | 	add	fp, #4
10b18     A7 22 62 FC | 	wrlong	local03, fp
10b1c                 | ' 
10b1c                 | ' t2=pop()
10b1c                 | ' t1=pop()
10b1c                 | ' 
10b1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10b1c     08 4E 85 F1 | 	sub	fp, #8
10b20     1D 22 0E F2 | 	cmp	local03, #29 wz
10b24     14 4E 05 A1 |  if_e	add	fp, #20
10b28     A7 24 02 AB |  if_e	rdlong	local04, fp
10b2c     14 4E 85 A1 |  if_e	sub	fp, #20
10b30     12 23 02 A6 |  if_e	mov	local03, local04
10b34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b38     20 00 90 5D |  if_ne	jmp	#LR__1340
10b3c     A7 20 02 FB | 	rdlong	local02, fp
10b40     0C 4E 05 F1 | 	add	fp, #12
10b44     A7 22 02 FB | 	rdlong	local03, fp
10b48     11 21 02 FD | 	qmul	local02, local03
10b4c     0C 4E 85 F1 | 	sub	fp, #12
10b50     18 1E 62 FD | 	getqx	local01
10b54     A7 1E 62 FC | 	wrlong	local01, fp
10b58     C4 02 90 FD | 	jmp	#LR__1349
10b5c                 | LR__1340
10b5c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
10b5c     08 4E 05 F1 | 	add	fp, #8
10b60     A7 1E 02 FB | 	rdlong	local01, fp
10b64     08 4E 85 F1 | 	sub	fp, #8
10b68     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b6c     14 4E 05 A1 |  if_e	add	fp, #20
10b70     A7 24 02 AB |  if_e	rdlong	local04, fp
10b74     14 4E 85 A1 |  if_e	sub	fp, #20
10b78     12 23 02 A6 |  if_e	mov	local03, local04
10b7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b80     2C 00 90 5D |  if_ne	jmp	#LR__1341
10b84     A7 20 02 FB | 	rdlong	local02, fp
10b88     0C 4E 05 F1 | 	add	fp, #12
10b8c     A7 22 02 FB | 	rdlong	local03, fp
10b90     11 21 02 FD | 	qmul	local02, local03
10b94     0C 4E 85 F1 | 	sub	fp, #12
10b98     18 1E 62 FD | 	getqx	local01
10b9c     A7 1E 62 FC | 	wrlong	local01, fp
10ba0     08 4E 05 F1 | 	add	fp, #8
10ba4     A7 38 68 FC | 	wrlong	#28, fp
10ba8     08 4E 85 F1 | 	sub	fp, #8
10bac     70 02 90 FD | 	jmp	#LR__1349
10bb0                 | LR__1341
10bb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10bb0     08 4E 05 F1 | 	add	fp, #8
10bb4     A7 1E 02 FB | 	rdlong	local01, fp
10bb8     08 4E 85 F1 | 	sub	fp, #8
10bbc     1D 1E 0E F2 | 	cmp	local01, #29 wz
10bc0     14 4E 05 A1 |  if_e	add	fp, #20
10bc4     A7 24 02 AB |  if_e	rdlong	local04, fp
10bc8     14 4E 85 A1 |  if_e	sub	fp, #20
10bcc     12 23 02 A6 |  if_e	mov	local03, local04
10bd0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10bd4     30 00 90 5D |  if_ne	jmp	#LR__1342
10bd8     A7 12 02 FB | 	rdlong	arg01, fp
10bdc     30 09 B1 FD | 	call	#__system___float_fromuns
10be0     FD 12 02 F6 | 	mov	arg01, result1
10be4     0C 4E 05 F1 | 	add	fp, #12
10be8     A7 14 02 FB | 	rdlong	arg02, fp
10bec     0C 4E 85 F1 | 	sub	fp, #12
10bf0     20 0D B1 FD | 	call	#__system___float_mul
10bf4     A7 FA 61 FC | 	wrlong	result1, fp
10bf8     08 4E 05 F1 | 	add	fp, #8
10bfc     A7 3C 68 FC | 	wrlong	#30, fp
10c00     08 4E 85 F1 | 	sub	fp, #8
10c04     18 02 90 FD | 	jmp	#LR__1349
10c08                 | LR__1342
10c08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
10c08     08 4E 05 F1 | 	add	fp, #8
10c0c     A7 1E 02 FB | 	rdlong	local01, fp
10c10     08 4E 85 F1 | 	sub	fp, #8
10c14     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c18     14 4E 05 A1 |  if_e	add	fp, #20
10c1c     A7 24 02 AB |  if_e	rdlong	local04, fp
10c20     14 4E 85 A1 |  if_e	sub	fp, #20
10c24     12 23 02 A6 |  if_e	mov	local03, local04
10c28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10c2c     20 00 90 5D |  if_ne	jmp	#LR__1343
10c30     A7 20 02 FB | 	rdlong	local02, fp
10c34     0C 4E 05 F1 | 	add	fp, #12
10c38     A7 22 02 FB | 	rdlong	local03, fp
10c3c     11 21 02 FD | 	qmul	local02, local03
10c40     0C 4E 85 F1 | 	sub	fp, #12
10c44     18 1E 62 FD | 	getqx	local01
10c48     A7 1E 62 FC | 	wrlong	local01, fp
10c4c     D0 01 90 FD | 	jmp	#LR__1349
10c50                 | LR__1343
10c50                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10c50     08 4E 05 F1 | 	add	fp, #8
10c54     A7 1E 02 FB | 	rdlong	local01, fp
10c58     08 4E 85 F1 | 	sub	fp, #8
10c5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c60     14 4E 05 A1 |  if_e	add	fp, #20
10c64     A7 24 02 AB |  if_e	rdlong	local04, fp
10c68     14 4E 85 A1 |  if_e	sub	fp, #20
10c6c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10c70     20 00 90 5D |  if_ne	jmp	#LR__1344
10c74     A7 20 02 FB | 	rdlong	local02, fp
10c78     0C 4E 05 F1 | 	add	fp, #12
10c7c     A7 22 02 FB | 	rdlong	local03, fp
10c80     11 21 02 FD | 	qmul	local02, local03
10c84     0C 4E 85 F1 | 	sub	fp, #12
10c88     18 1E 62 FD | 	getqx	local01
10c8c     A7 1E 62 FC | 	wrlong	local01, fp
10c90     8C 01 90 FD | 	jmp	#LR__1349
10c94                 | LR__1344
10c94                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10c94     08 4E 05 F1 | 	add	fp, #8
10c98     A7 1E 02 FB | 	rdlong	local01, fp
10c9c     08 4E 85 F1 | 	sub	fp, #8
10ca0     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ca4     14 4E 05 A1 |  if_e	add	fp, #20
10ca8     A7 22 02 AB |  if_e	rdlong	local03, fp
10cac     14 4E 85 A1 |  if_e	sub	fp, #20
10cb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10cb4     40 00 90 5D |  if_ne	jmp	#LR__1345
10cb8     A7 12 02 FB | 	rdlong	arg01, fp
10cbc     09 13 52 F6 | 	abs	arg01, arg01 wc
10cc0     1F 26 C6 C9 |  if_b	decod	local05, #31
10cc4     00 26 06 36 |  if_ae	mov	local05, #0
10cc8     44 08 B1 FD | 	call	#__system___float_fromuns
10ccc     13 FB 61 F5 | 	xor	result1, local05
10cd0     FD 12 02 F6 | 	mov	arg01, result1
10cd4     0C 4E 05 F1 | 	add	fp, #12
10cd8     A7 14 02 FB | 	rdlong	arg02, fp
10cdc     0C 4E 85 F1 | 	sub	fp, #12
10ce0     30 0C B1 FD | 	call	#__system___float_mul
10ce4     A7 FA 61 FC | 	wrlong	result1, fp
10ce8     08 4E 05 F1 | 	add	fp, #8
10cec     A7 3C 68 FC | 	wrlong	#30, fp
10cf0     08 4E 85 F1 | 	sub	fp, #8
10cf4     28 01 90 FD | 	jmp	#LR__1349
10cf8                 | LR__1345
10cf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10cf8     08 4E 05 F1 | 	add	fp, #8
10cfc     A7 1E 02 FB | 	rdlong	local01, fp
10d00     08 4E 85 F1 | 	sub	fp, #8
10d04     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d08     14 4E 05 A1 |  if_e	add	fp, #20
10d0c     A7 22 02 AB |  if_e	rdlong	local03, fp
10d10     14 4E 85 A1 |  if_e	sub	fp, #20
10d14     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10d18     28 00 90 5D |  if_ne	jmp	#LR__1346
10d1c     A7 1E 02 FB | 	rdlong	local01, fp
10d20     0C 4E 05 F1 | 	add	fp, #12
10d24     A7 12 02 FB | 	rdlong	arg01, fp
10d28     0C 4E 85 F1 | 	sub	fp, #12
10d2c     E0 07 B1 FD | 	call	#__system___float_fromuns
10d30     FD 14 02 F6 | 	mov	arg02, result1
10d34     0F 13 02 F6 | 	mov	arg01, local01
10d38     D8 0B B1 FD | 	call	#__system___float_mul
10d3c     A7 FA 61 FC | 	wrlong	result1, fp
10d40     DC 00 90 FD | 	jmp	#LR__1349
10d44                 | LR__1346
10d44                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10d44     08 4E 05 F1 | 	add	fp, #8
10d48     A7 1E 02 FB | 	rdlong	local01, fp
10d4c     08 4E 85 F1 | 	sub	fp, #8
10d50     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d54     14 4E 05 A1 |  if_e	add	fp, #20
10d58     A7 22 02 AB |  if_e	rdlong	local03, fp
10d5c     14 4E 85 A1 |  if_e	sub	fp, #20
10d60     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10d64     38 00 90 5D |  if_ne	jmp	#LR__1347
10d68     A7 1E 02 FB | 	rdlong	local01, fp
10d6c     0C 4E 05 F1 | 	add	fp, #12
10d70     A7 12 02 FB | 	rdlong	arg01, fp
10d74     0C 4E 85 F1 | 	sub	fp, #12
10d78     09 13 52 F6 | 	abs	arg01, arg01 wc
10d7c     1F 26 C6 C9 |  if_b	decod	local05, #31
10d80     00 26 06 36 |  if_ae	mov	local05, #0
10d84     88 07 B1 FD | 	call	#__system___float_fromuns
10d88     13 FB 61 F5 | 	xor	result1, local05
10d8c     FD 14 02 F6 | 	mov	arg02, result1
10d90     0F 13 02 F6 | 	mov	arg01, local01
10d94     7C 0B B1 FD | 	call	#__system___float_mul
10d98     A7 FA 61 FC | 	wrlong	result1, fp
10d9c     80 00 90 FD | 	jmp	#LR__1349
10da0                 | LR__1347
10da0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
10da0     08 4E 05 F1 | 	add	fp, #8
10da4     A7 1E 02 FB | 	rdlong	local01, fp
10da8     08 4E 85 F1 | 	sub	fp, #8
10dac     1E 1E 0E F2 | 	cmp	local01, #30 wz
10db0     14 4E 05 A1 |  if_e	add	fp, #20
10db4     A7 22 02 AB |  if_e	rdlong	local03, fp
10db8     14 4E 85 A1 |  if_e	sub	fp, #20
10dbc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10dc0     1C 00 90 5D |  if_ne	jmp	#LR__1348
10dc4     A7 12 02 FB | 	rdlong	arg01, fp
10dc8     0C 4E 05 F1 | 	add	fp, #12
10dcc     A7 14 02 FB | 	rdlong	arg02, fp
10dd0     0C 4E 85 F1 | 	sub	fp, #12
10dd4     3C 0B B1 FD | 	call	#__system___float_mul
10dd8     A7 FA 61 FC | 	wrlong	result1, fp
10ddc     40 00 90 FD | 	jmp	#LR__1349
10de0                 | LR__1348
10de0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
10de0     08 4E 05 F1 | 	add	fp, #8
10de4     A7 1E 02 FB | 	rdlong	local01, fp
10de8     08 4E 85 F1 | 	sub	fp, #8
10dec     1F 1E 0E F2 | 	cmp	local01, #31 wz
10df0     14 4E 05 51 |  if_ne	add	fp, #20
10df4     A7 22 02 5B |  if_ne	rdlong	local03, fp
10df8     14 4E 85 51 |  if_ne	sub	fp, #20
10dfc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10e00     A7 10 68 AC |  if_e	wrlong	#8, fp
10e04     08 4E 05 A1 |  if_e	add	fp, #8
10e08     A7 FE 69 AC |  if_e	wrlong	#255, fp
10e0c     08 4E 85 A1 |  if_e	sub	fp, #8
10e10     A7 12 68 5C |  if_ne	wrlong	#9, fp
10e14     08 4E 05 51 |  if_ne	add	fp, #8
10e18     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10e1c     08 4E 85 51 |  if_ne	sub	fp, #8
10e20                 | LR__1349
10e20     A7 12 02 F6 | 	mov	arg01, fp
10e24     08 9B BF FD | 	call	#_push
10e28     A7 F0 03 F6 | 	mov	ptra, fp
10e2c     B2 00 A0 FD | 	call	#popregs_
10e30                 | _do_mul_ret
10e30     2D 00 64 FD | 	ret
10e34                 | 
10e34                 | ' 
10e34                 | ' sub do_div 
10e34                 | _do_div
10e34     01 4A 05 F6 | 	mov	COUNT_, #1
10e38     A8 00 A0 FD | 	call	#pushregs_
10e3c     18 F0 07 F1 | 	add	ptra, #24
10e40     54 9A BF FD | 	call	#_pop
10e44     FD 66 02 F6 | 	mov	muldivb_, result1
10e48     FE 64 02 F6 | 	mov	muldiva_, result2
10e4c     FF 1E 02 F6 | 	mov	local01, result3
10e50     0C 4E 05 F1 | 	add	fp, #12
10e54     A7 66 62 FC | 	wrlong	muldivb_, fp
10e58     04 4E 05 F1 | 	add	fp, #4
10e5c     A7 64 62 FC | 	wrlong	muldiva_, fp
10e60     04 4E 05 F1 | 	add	fp, #4
10e64     A7 1E 62 FC | 	wrlong	local01, fp
10e68     14 4E 85 F1 | 	sub	fp, #20
10e6c     28 9A BF FD | 	call	#_pop
10e70     A7 FA 61 FC | 	wrlong	result1, fp
10e74     04 4E 05 F1 | 	add	fp, #4
10e78     A7 FC 61 FC | 	wrlong	result2, fp
10e7c     04 4E 05 F1 | 	add	fp, #4
10e80     A7 FE 61 FC | 	wrlong	result3, fp
10e84                 | ' 
10e84                 | ' t2=pop()
10e84                 | ' t1=pop()
10e84                 | ' 
10e84                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
10e84     08 4E 85 F1 | 	sub	fp, #8
10e88     1F FE 0D F2 | 	cmp	result3, #31 wz
10e8c     14 4E 05 51 |  if_ne	add	fp, #20
10e90     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10e94     14 4E 85 51 |  if_ne	sub	fp, #20
10e98     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
10e9c     A7 14 68 AC |  if_e	wrlong	#10, fp
10ea0     08 4E 05 A1 |  if_e	add	fp, #8
10ea4     A7 FE 69 AC |  if_e	wrlong	#255, fp
10ea8     08 4E 85 A1 |  if_e	sub	fp, #8
10eac     90 01 90 AD |  if_e	jmp	#LR__1356
10eb0                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10eb0     08 4E 05 F1 | 	add	fp, #8
10eb4     A7 66 02 FB | 	rdlong	muldivb_, fp
10eb8     08 4E 85 F1 | 	sub	fp, #8
10ebc     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10ec0     1C 00 90 5D |  if_ne	jmp	#LR__1350
10ec4     08 4E 05 F1 | 	add	fp, #8
10ec8     A7 38 68 FC | 	wrlong	#28, fp
10ecc     08 4E 85 F1 | 	sub	fp, #8
10ed0     A7 12 02 FB | 	rdlong	arg01, fp
10ed4     00 14 06 F6 | 	mov	arg02, #0
10ed8     00 0F B1 FD | 	call	#__system___float_tointeger
10edc     A7 FA 61 FC | 	wrlong	result1, fp
10ee0                 | LR__1350
10ee0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10ee0     14 4E 05 F1 | 	add	fp, #20
10ee4     A7 66 02 FB | 	rdlong	muldivb_, fp
10ee8     14 4E 85 F1 | 	sub	fp, #20
10eec     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10ef0     28 00 90 5D |  if_ne	jmp	#LR__1351
10ef4     14 4E 05 F1 | 	add	fp, #20
10ef8     A7 38 68 FC | 	wrlong	#28, fp
10efc     08 4E 85 F1 | 	sub	fp, #8
10f00     A7 12 02 FB | 	rdlong	arg01, fp
10f04     0C 4E 85 F1 | 	sub	fp, #12
10f08     00 14 06 F6 | 	mov	arg02, #0
10f0c     CC 0E B1 FD | 	call	#__system___float_tointeger
10f10     0C 4E 05 F1 | 	add	fp, #12
10f14     A7 FA 61 FC | 	wrlong	result1, fp
10f18     0C 4E 85 F1 | 	sub	fp, #12
10f1c                 | LR__1351
10f1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10f1c     08 4E 05 F1 | 	add	fp, #8
10f20     A7 66 02 FB | 	rdlong	muldivb_, fp
10f24     08 4E 85 F1 | 	sub	fp, #8
10f28     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10f2c     14 4E 05 A1 |  if_e	add	fp, #20
10f30     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f34     14 4E 85 A1 |  if_e	sub	fp, #20
10f38     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10f3c     20 00 90 5D |  if_ne	jmp	#LR__1352
10f40     0C 4E 05 F1 | 	add	fp, #12
10f44     A7 1E 02 FB | 	rdlong	local01, fp
10f48     0C 4E 85 F1 | 	sub	fp, #12
10f4c     A7 66 02 FB | 	rdlong	muldivb_, fp
10f50     0F 67 12 FD | 	qdiv	muldivb_, local01
10f54     18 1E 62 FD | 	getqx	local01
10f58     A7 1E 62 FC | 	wrlong	local01, fp
10f5c     E0 00 90 FD | 	jmp	#LR__1356
10f60                 | LR__1352
10f60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
10f60     08 4E 05 F1 | 	add	fp, #8
10f64     A7 66 02 FB | 	rdlong	muldivb_, fp
10f68     08 4E 85 F1 | 	sub	fp, #8
10f6c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10f70     14 4E 05 A1 |  if_e	add	fp, #20
10f74     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f78     14 4E 85 A1 |  if_e	sub	fp, #20
10f7c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10f80     2C 00 90 5D |  if_ne	jmp	#LR__1353
10f84     0C 4E 05 F1 | 	add	fp, #12
10f88     A7 1E 02 FB | 	rdlong	local01, fp
10f8c     0C 4E 85 F1 | 	sub	fp, #12
10f90     A7 66 02 FB | 	rdlong	muldivb_, fp
10f94     0F 67 12 FD | 	qdiv	muldivb_, local01
10f98     18 1E 62 FD | 	getqx	local01
10f9c     A7 1E 62 FC | 	wrlong	local01, fp
10fa0     08 4E 05 F1 | 	add	fp, #8
10fa4     A7 38 68 FC | 	wrlong	#28, fp
10fa8     08 4E 85 F1 | 	sub	fp, #8
10fac     90 00 90 FD | 	jmp	#LR__1356
10fb0                 | LR__1353
10fb0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
10fb0     08 4E 05 F1 | 	add	fp, #8
10fb4     A7 66 02 FB | 	rdlong	muldivb_, fp
10fb8     08 4E 85 F1 | 	sub	fp, #8
10fbc     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10fc0     14 4E 05 A1 |  if_e	add	fp, #20
10fc4     A7 1E 02 AB |  if_e	rdlong	local01, fp
10fc8     14 4E 85 A1 |  if_e	sub	fp, #20
10fcc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10fd0     1C 00 90 5D |  if_ne	jmp	#LR__1354
10fd4     A7 64 02 FB | 	rdlong	muldiva_, fp
10fd8     0C 4E 05 F1 | 	add	fp, #12
10fdc     A7 66 02 FB | 	rdlong	muldivb_, fp
10fe0     0C 4E 85 F1 | 	sub	fp, #12
10fe4     BA 00 A0 FD | 	call	#divide_
10fe8     A7 66 62 FC | 	wrlong	muldivb_, fp
10fec     50 00 90 FD | 	jmp	#LR__1356
10ff0                 | LR__1354
10ff0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10ff0     08 4E 05 F1 | 	add	fp, #8
10ff4     A7 66 02 FB | 	rdlong	muldivb_, fp
10ff8     08 4E 85 F1 | 	sub	fp, #8
10ffc     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
11000     14 4E 05 A1 |  if_e	add	fp, #20
11004     A7 1E 02 AB |  if_e	rdlong	local01, fp
11008     14 4E 85 A1 |  if_e	sub	fp, #20
1100c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11010     1C 00 90 5D |  if_ne	jmp	#LR__1355
11014     A7 64 02 FB | 	rdlong	muldiva_, fp
11018     0C 4E 05 F1 | 	add	fp, #12
1101c     A7 66 02 FB | 	rdlong	muldivb_, fp
11020     0C 4E 85 F1 | 	sub	fp, #12
11024     BA 00 A0 FD | 	call	#divide_
11028     A7 66 62 FC | 	wrlong	muldivb_, fp
1102c     10 00 90 FD | 	jmp	#LR__1356
11030                 | LR__1355
11030     A7 16 68 FC | 	wrlong	#11, fp
11034     08 4E 05 F1 | 	add	fp, #8
11038     A7 FE 69 FC | 	wrlong	#255, fp
1103c     08 4E 85 F1 | 	sub	fp, #8
11040                 | LR__1356
11040     A7 12 02 F6 | 	mov	arg01, fp
11044     E8 98 BF FD | 	call	#_push
11048     A7 F0 03 F6 | 	mov	ptra, fp
1104c     B2 00 A0 FD | 	call	#popregs_
11050                 | _do_div_ret
11050     2D 00 64 FD | 	ret
11054                 | 
11054                 | ' 
11054                 | ' sub do_fdiv 
11054                 | _do_fdiv
11054     02 4A 05 F6 | 	mov	COUNT_, #2
11058     A8 00 A0 FD | 	call	#pushregs_
1105c     18 F0 07 F1 | 	add	ptra, #24
11060     34 98 BF FD | 	call	#_pop
11064     FD 14 02 F6 | 	mov	arg02, result1
11068     FE 12 02 F6 | 	mov	arg01, result2
1106c     FF 1E 02 F6 | 	mov	local01, result3
11070     0C 4E 05 F1 | 	add	fp, #12
11074     A7 14 62 FC | 	wrlong	arg02, fp
11078     04 4E 05 F1 | 	add	fp, #4
1107c     A7 12 62 FC | 	wrlong	arg01, fp
11080     04 4E 05 F1 | 	add	fp, #4
11084     A7 1E 62 FC | 	wrlong	local01, fp
11088     14 4E 85 F1 | 	sub	fp, #20
1108c     08 98 BF FD | 	call	#_pop
11090     A7 FA 61 FC | 	wrlong	result1, fp
11094     04 4E 05 F1 | 	add	fp, #4
11098     A7 FC 61 FC | 	wrlong	result2, fp
1109c     04 4E 05 F1 | 	add	fp, #4
110a0     A7 FE 61 FC | 	wrlong	result3, fp
110a4                 | ' 
110a4                 | ' t2=pop()
110a4                 | ' t1=pop()
110a4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
110a4     08 4E 85 F1 | 	sub	fp, #8
110a8     1F FE 0D F2 | 	cmp	result3, #31 wz
110ac     14 4E 05 51 |  if_ne	add	fp, #20
110b0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
110b4     14 4E 85 51 |  if_ne	sub	fp, #20
110b8     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
110bc     A7 14 68 AC |  if_e	wrlong	#10, fp
110c0     08 4E 05 A1 |  if_e	add	fp, #8
110c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
110c8     08 4E 85 A1 |  if_e	sub	fp, #8
110cc     38 01 90 AD |  if_e	jmp	#LR__1365
110d0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
110d0     08 4E 05 F1 | 	add	fp, #8
110d4     A7 14 02 FB | 	rdlong	arg02, fp
110d8     08 4E 85 F1 | 	sub	fp, #8
110dc     1C 14 0E F2 | 	cmp	arg02, #28 wz
110e0     28 00 90 5D |  if_ne	jmp	#LR__1360
110e4     08 4E 05 F1 | 	add	fp, #8
110e8     A7 3C 68 FC | 	wrlong	#30, fp
110ec     08 4E 85 F1 | 	sub	fp, #8
110f0     A7 12 02 FB | 	rdlong	arg01, fp
110f4     09 13 52 F6 | 	abs	arg01, arg01 wc
110f8     1F 20 C6 C9 |  if_b	decod	local02, #31
110fc     00 20 06 36 |  if_ae	mov	local02, #0
11100     0C 04 B1 FD | 	call	#__system___float_fromuns
11104     10 FB 61 F5 | 	xor	result1, local02
11108     A7 FA 61 FC | 	wrlong	result1, fp
1110c                 | LR__1360
1110c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1110c     08 4E 05 F1 | 	add	fp, #8
11110     A7 14 02 FB | 	rdlong	arg02, fp
11114     08 4E 85 F1 | 	sub	fp, #8
11118     1D 14 0E F2 | 	cmp	arg02, #29 wz
1111c     18 00 90 5D |  if_ne	jmp	#LR__1361
11120     08 4E 05 F1 | 	add	fp, #8
11124     A7 3C 68 FC | 	wrlong	#30, fp
11128     08 4E 85 F1 | 	sub	fp, #8
1112c     A7 12 02 FB | 	rdlong	arg01, fp
11130     DC 03 B1 FD | 	call	#__system___float_fromuns
11134     A7 FA 61 FC | 	wrlong	result1, fp
11138                 | LR__1361
11138                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
11138     14 4E 05 F1 | 	add	fp, #20
1113c     A7 14 02 FB | 	rdlong	arg02, fp
11140     14 4E 85 F1 | 	sub	fp, #20
11144     1C 14 0E F2 | 	cmp	arg02, #28 wz
11148     34 00 90 5D |  if_ne	jmp	#LR__1362
1114c     14 4E 05 F1 | 	add	fp, #20
11150     A7 3C 68 FC | 	wrlong	#30, fp
11154     08 4E 85 F1 | 	sub	fp, #8
11158     A7 12 02 FB | 	rdlong	arg01, fp
1115c     0C 4E 85 F1 | 	sub	fp, #12
11160     09 13 52 F6 | 	abs	arg01, arg01 wc
11164     1F 20 C6 C9 |  if_b	decod	local02, #31
11168     00 20 06 36 |  if_ae	mov	local02, #0
1116c     A0 03 B1 FD | 	call	#__system___float_fromuns
11170     10 FB 61 F5 | 	xor	result1, local02
11174     0C 4E 05 F1 | 	add	fp, #12
11178     A7 FA 61 FC | 	wrlong	result1, fp
1117c     0C 4E 85 F1 | 	sub	fp, #12
11180                 | LR__1362
11180                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11180     14 4E 05 F1 | 	add	fp, #20
11184     A7 14 02 FB | 	rdlong	arg02, fp
11188     14 4E 85 F1 | 	sub	fp, #20
1118c     1D 14 0E F2 | 	cmp	arg02, #29 wz
11190     24 00 90 5D |  if_ne	jmp	#LR__1363
11194     14 4E 05 F1 | 	add	fp, #20
11198     A7 3C 68 FC | 	wrlong	#30, fp
1119c     08 4E 85 F1 | 	sub	fp, #8
111a0     A7 12 02 FB | 	rdlong	arg01, fp
111a4     0C 4E 85 F1 | 	sub	fp, #12
111a8     64 03 B1 FD | 	call	#__system___float_fromuns
111ac     0C 4E 05 F1 | 	add	fp, #12
111b0     A7 FA 61 FC | 	wrlong	result1, fp
111b4     0C 4E 85 F1 | 	sub	fp, #12
111b8                 | LR__1363
111b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
111b8     08 4E 05 F1 | 	add	fp, #8
111bc     A7 14 02 FB | 	rdlong	arg02, fp
111c0     08 4E 85 F1 | 	sub	fp, #8
111c4     1E 14 0E F2 | 	cmp	arg02, #30 wz
111c8     14 4E 05 A1 |  if_e	add	fp, #20
111cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
111d0     14 4E 85 A1 |  if_e	sub	fp, #20
111d4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
111d8     1C 00 90 5D |  if_ne	jmp	#LR__1364
111dc     A7 12 02 FB | 	rdlong	arg01, fp
111e0     0C 4E 05 F1 | 	add	fp, #12
111e4     A7 14 02 FB | 	rdlong	arg02, fp
111e8     0C 4E 85 F1 | 	sub	fp, #12
111ec     28 09 B1 FD | 	call	#__system___float_div
111f0     A7 FA 61 FC | 	wrlong	result1, fp
111f4     10 00 90 FD | 	jmp	#LR__1365
111f8                 | LR__1364
111f8     A7 16 68 FC | 	wrlong	#11, fp
111fc     08 4E 05 F1 | 	add	fp, #8
11200     A7 FE 69 FC | 	wrlong	#255, fp
11204     08 4E 85 F1 | 	sub	fp, #8
11208                 | LR__1365
11208     A7 12 02 F6 | 	mov	arg01, fp
1120c     20 97 BF FD | 	call	#_push
11210     A7 F0 03 F6 | 	mov	ptra, fp
11214     B2 00 A0 FD | 	call	#popregs_
11218                 | _do_fdiv_ret
11218     2D 00 64 FD | 	ret
1121c                 | 
1121c                 | ' 
1121c                 | ' 
1121c                 | ' sub do_mod 
1121c                 | _do_mod
1121c     01 4A 05 F6 | 	mov	COUNT_, #1
11220     A8 00 A0 FD | 	call	#pushregs_
11224     18 F0 07 F1 | 	add	ptra, #24
11228     6C 96 BF FD | 	call	#_pop
1122c     FD 66 02 F6 | 	mov	muldivb_, result1
11230     FE 64 02 F6 | 	mov	muldiva_, result2
11234     FF 1E 02 F6 | 	mov	local01, result3
11238     0C 4E 05 F1 | 	add	fp, #12
1123c     A7 66 62 FC | 	wrlong	muldivb_, fp
11240     04 4E 05 F1 | 	add	fp, #4
11244     A7 64 62 FC | 	wrlong	muldiva_, fp
11248     04 4E 05 F1 | 	add	fp, #4
1124c     A7 1E 62 FC | 	wrlong	local01, fp
11250     14 4E 85 F1 | 	sub	fp, #20
11254     40 96 BF FD | 	call	#_pop
11258     A7 FA 61 FC | 	wrlong	result1, fp
1125c     04 4E 05 F1 | 	add	fp, #4
11260     A7 FC 61 FC | 	wrlong	result2, fp
11264     04 4E 05 F1 | 	add	fp, #4
11268     A7 FE 61 FC | 	wrlong	result3, fp
1126c                 | ' 
1126c                 | ' t2=pop()
1126c                 | ' t1=pop()
1126c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1126c     08 4E 85 F1 | 	sub	fp, #8
11270     1F FE 0D F2 | 	cmp	result3, #31 wz
11274     14 4E 05 51 |  if_ne	add	fp, #20
11278     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1127c     14 4E 85 51 |  if_ne	sub	fp, #20
11280     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
11284     A7 14 68 AC |  if_e	wrlong	#10, fp
11288     08 4E 05 A1 |  if_e	add	fp, #8
1128c     A7 FE 69 AC |  if_e	wrlong	#255, fp
11290     08 4E 85 A1 |  if_e	sub	fp, #8
11294     90 01 90 AD |  if_e	jmp	#LR__1376
11298                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
11298     08 4E 05 F1 | 	add	fp, #8
1129c     A7 66 02 FB | 	rdlong	muldivb_, fp
112a0     08 4E 85 F1 | 	sub	fp, #8
112a4     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
112a8     1C 00 90 5D |  if_ne	jmp	#LR__1370
112ac     08 4E 05 F1 | 	add	fp, #8
112b0     A7 38 68 FC | 	wrlong	#28, fp
112b4     08 4E 85 F1 | 	sub	fp, #8
112b8     A7 12 02 FB | 	rdlong	arg01, fp
112bc     00 14 06 F6 | 	mov	arg02, #0
112c0     18 0B B1 FD | 	call	#__system___float_tointeger
112c4     A7 FA 61 FC | 	wrlong	result1, fp
112c8                 | LR__1370
112c8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
112c8     14 4E 05 F1 | 	add	fp, #20
112cc     A7 66 02 FB | 	rdlong	muldivb_, fp
112d0     14 4E 85 F1 | 	sub	fp, #20
112d4     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
112d8     28 00 90 5D |  if_ne	jmp	#LR__1371
112dc     14 4E 05 F1 | 	add	fp, #20
112e0     A7 38 68 FC | 	wrlong	#28, fp
112e4     08 4E 85 F1 | 	sub	fp, #8
112e8     A7 12 02 FB | 	rdlong	arg01, fp
112ec     0C 4E 85 F1 | 	sub	fp, #12
112f0     00 14 06 F6 | 	mov	arg02, #0
112f4     E4 0A B1 FD | 	call	#__system___float_tointeger
112f8     0C 4E 05 F1 | 	add	fp, #12
112fc     A7 FA 61 FC | 	wrlong	result1, fp
11300     0C 4E 85 F1 | 	sub	fp, #12
11304                 | LR__1371
11304                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
11304     08 4E 05 F1 | 	add	fp, #8
11308     A7 66 02 FB | 	rdlong	muldivb_, fp
1130c     08 4E 85 F1 | 	sub	fp, #8
11310     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11314     14 4E 05 A1 |  if_e	add	fp, #20
11318     A7 1E 02 AB |  if_e	rdlong	local01, fp
1131c     14 4E 85 A1 |  if_e	sub	fp, #20
11320     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
11324     20 00 90 5D |  if_ne	jmp	#LR__1372
11328     0C 4E 05 F1 | 	add	fp, #12
1132c     A7 1E 02 FB | 	rdlong	local01, fp
11330     0C 4E 85 F1 | 	sub	fp, #12
11334     A7 66 02 FB | 	rdlong	muldivb_, fp
11338     0F 67 12 FD | 	qdiv	muldivb_, local01
1133c     19 1E 62 FD | 	getqy	local01
11340     A7 1E 62 FC | 	wrlong	local01, fp
11344     E0 00 90 FD | 	jmp	#LR__1376
11348                 | LR__1372
11348                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
11348     08 4E 05 F1 | 	add	fp, #8
1134c     A7 66 02 FB | 	rdlong	muldivb_, fp
11350     08 4E 85 F1 | 	sub	fp, #8
11354     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11358     14 4E 05 A1 |  if_e	add	fp, #20
1135c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11360     14 4E 85 A1 |  if_e	sub	fp, #20
11364     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11368     2C 00 90 5D |  if_ne	jmp	#LR__1373
1136c     0C 4E 05 F1 | 	add	fp, #12
11370     A7 1E 02 FB | 	rdlong	local01, fp
11374     0C 4E 85 F1 | 	sub	fp, #12
11378     A7 66 02 FB | 	rdlong	muldivb_, fp
1137c     0F 67 12 FD | 	qdiv	muldivb_, local01
11380     19 1E 62 FD | 	getqy	local01
11384     A7 1E 62 FC | 	wrlong	local01, fp
11388     08 4E 05 F1 | 	add	fp, #8
1138c     A7 38 68 FC | 	wrlong	#28, fp
11390     08 4E 85 F1 | 	sub	fp, #8
11394     90 00 90 FD | 	jmp	#LR__1376
11398                 | LR__1373
11398                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
11398     08 4E 05 F1 | 	add	fp, #8
1139c     A7 66 02 FB | 	rdlong	muldivb_, fp
113a0     08 4E 85 F1 | 	sub	fp, #8
113a4     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
113a8     14 4E 05 A1 |  if_e	add	fp, #20
113ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
113b0     14 4E 85 A1 |  if_e	sub	fp, #20
113b4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
113b8     1C 00 90 5D |  if_ne	jmp	#LR__1374
113bc     A7 64 02 FB | 	rdlong	muldiva_, fp
113c0     0C 4E 05 F1 | 	add	fp, #12
113c4     A7 66 02 FB | 	rdlong	muldivb_, fp
113c8     0C 4E 85 F1 | 	sub	fp, #12
113cc     BA 00 A0 FD | 	call	#divide_
113d0     A7 64 62 FC | 	wrlong	muldiva_, fp
113d4     50 00 90 FD | 	jmp	#LR__1376
113d8                 | LR__1374
113d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
113d8     08 4E 05 F1 | 	add	fp, #8
113dc     A7 66 02 FB | 	rdlong	muldivb_, fp
113e0     08 4E 85 F1 | 	sub	fp, #8
113e4     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
113e8     14 4E 05 A1 |  if_e	add	fp, #20
113ec     A7 1E 02 AB |  if_e	rdlong	local01, fp
113f0     14 4E 85 A1 |  if_e	sub	fp, #20
113f4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
113f8     1C 00 90 5D |  if_ne	jmp	#LR__1375
113fc     A7 64 02 FB | 	rdlong	muldiva_, fp
11400     0C 4E 05 F1 | 	add	fp, #12
11404     A7 66 02 FB | 	rdlong	muldivb_, fp
11408     0C 4E 85 F1 | 	sub	fp, #12
1140c     BA 00 A0 FD | 	call	#divide_
11410     A7 64 62 FC | 	wrlong	muldiva_, fp
11414     10 00 90 FD | 	jmp	#LR__1376
11418                 | LR__1375
11418     A7 16 68 FC | 	wrlong	#11, fp
1141c     08 4E 05 F1 | 	add	fp, #8
11420     A7 FE 69 FC | 	wrlong	#255, fp
11424     08 4E 85 F1 | 	sub	fp, #8
11428                 | LR__1376
11428     A7 12 02 F6 | 	mov	arg01, fp
1142c     00 95 BF FD | 	call	#_push
11430     A7 F0 03 F6 | 	mov	ptra, fp
11434     B2 00 A0 FD | 	call	#popregs_
11438                 | _do_mod_ret
11438     2D 00 64 FD | 	ret
1143c                 | 
1143c                 | ' 
1143c                 | ' sub do_shl 
1143c                 | _do_shl
1143c     03 4A 05 F6 | 	mov	COUNT_, #3
11440     A8 00 A0 FD | 	call	#pushregs_
11444     18 F0 07 F1 | 	add	ptra, #24
11448     4C 94 BF FD | 	call	#_pop
1144c     FD 12 02 F6 | 	mov	arg01, result1
11450     FE 1E 02 F6 | 	mov	local01, result2
11454     FF 20 02 F6 | 	mov	local02, result3
11458     0C 4E 05 F1 | 	add	fp, #12
1145c     A7 12 62 FC | 	wrlong	arg01, fp
11460     04 4E 05 F1 | 	add	fp, #4
11464     A7 1E 62 FC | 	wrlong	local01, fp
11468     04 4E 05 F1 | 	add	fp, #4
1146c     A7 20 62 FC | 	wrlong	local02, fp
11470     14 4E 85 F1 | 	sub	fp, #20
11474     20 94 BF FD | 	call	#_pop
11478     FF 22 02 F6 | 	mov	local03, result3
1147c     A7 FA 61 FC | 	wrlong	result1, fp
11480     04 4E 05 F1 | 	add	fp, #4
11484     A7 FC 61 FC | 	wrlong	result2, fp
11488     04 4E 05 F1 | 	add	fp, #4
1148c     A7 22 62 FC | 	wrlong	local03, fp
11490                 | ' 
11490                 | ' t2=pop()
11490                 | ' t1=pop()
11490                 | ' 
11490                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11490     08 4E 85 F1 | 	sub	fp, #8
11494     1C 22 0E F2 | 	cmp	local03, #28 wz
11498     A7 22 02 AB |  if_e	rdlong	local03, fp
1149c     A7 22 62 AC |  if_e	wrlong	local03, fp
114a0     08 4E 05 A1 |  if_e	add	fp, #8
114a4     A7 3A 68 AC |  if_e	wrlong	#29, fp
114a8     08 4E 85 A1 |  if_e	sub	fp, #8
114ac                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
114ac     14 4E 05 F1 | 	add	fp, #20
114b0     A7 22 02 FB | 	rdlong	local03, fp
114b4     14 4E 85 F1 | 	sub	fp, #20
114b8     1C 22 0E F2 | 	cmp	local03, #28 wz
114bc     18 00 90 5D |  if_ne	jmp	#LR__1380
114c0     0C 4E 05 F1 | 	add	fp, #12
114c4     A7 22 02 FB | 	rdlong	local03, fp
114c8     A7 22 62 FC | 	wrlong	local03, fp
114cc     08 4E 05 F1 | 	add	fp, #8
114d0     A7 3A 68 FC | 	wrlong	#29, fp
114d4     14 4E 85 F1 | 	sub	fp, #20
114d8                 | LR__1380
114d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
114d8     08 4E 05 F1 | 	add	fp, #8
114dc     A7 22 02 FB | 	rdlong	local03, fp
114e0     08 4E 85 F1 | 	sub	fp, #8
114e4     1F 22 0E F2 | 	cmp	local03, #31 wz
114e8     14 4E 05 51 |  if_ne	add	fp, #20
114ec     A7 20 02 5B |  if_ne	rdlong	local02, fp
114f0     14 4E 85 51 |  if_ne	sub	fp, #20
114f4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
114f8     08 4E 05 51 |  if_ne	add	fp, #8
114fc     A7 22 02 5B |  if_ne	rdlong	local03, fp
11500     08 4E 85 51 |  if_ne	sub	fp, #8
11504     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
11508     14 4E 05 51 |  if_ne	add	fp, #20
1150c     14 4E 85 51 |  if_ne	sub	fp, #20
11510     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
11514     A7 0C 68 AC |  if_e	wrlong	#6, fp
11518     08 4E 05 A1 |  if_e	add	fp, #8
1151c     A7 FE 69 AC |  if_e	wrlong	#255, fp
11520     08 4E 85 A1 |  if_e	sub	fp, #8
11524     18 00 90 AD |  if_e	jmp	#LR__1381
11528     A7 22 02 FB | 	rdlong	local03, fp
1152c     0C 4E 05 F1 | 	add	fp, #12
11530     A7 1E 02 FB | 	rdlong	local01, fp
11534     0C 4E 85 F1 | 	sub	fp, #12
11538     0F 23 62 F0 | 	shl	local03, local01
1153c     A7 22 62 FC | 	wrlong	local03, fp
11540                 | LR__1381
11540     A7 12 02 F6 | 	mov	arg01, fp
11544     E8 93 BF FD | 	call	#_push
11548     A7 F0 03 F6 | 	mov	ptra, fp
1154c     B2 00 A0 FD | 	call	#popregs_
11550                 | _do_shl_ret
11550     2D 00 64 FD | 	ret
11554                 | 
11554                 | ' 
11554                 | ' sub do_shr 
11554                 | _do_shr
11554     03 4A 05 F6 | 	mov	COUNT_, #3
11558     A8 00 A0 FD | 	call	#pushregs_
1155c     18 F0 07 F1 | 	add	ptra, #24
11560     34 93 BF FD | 	call	#_pop
11564     FD 12 02 F6 | 	mov	arg01, result1
11568     FE 1E 02 F6 | 	mov	local01, result2
1156c     FF 20 02 F6 | 	mov	local02, result3
11570     0C 4E 05 F1 | 	add	fp, #12
11574     A7 12 62 FC | 	wrlong	arg01, fp
11578     04 4E 05 F1 | 	add	fp, #4
1157c     A7 1E 62 FC | 	wrlong	local01, fp
11580     04 4E 05 F1 | 	add	fp, #4
11584     A7 20 62 FC | 	wrlong	local02, fp
11588     14 4E 85 F1 | 	sub	fp, #20
1158c     08 93 BF FD | 	call	#_pop
11590     FF 22 02 F6 | 	mov	local03, result3
11594     A7 FA 61 FC | 	wrlong	result1, fp
11598     04 4E 05 F1 | 	add	fp, #4
1159c     A7 FC 61 FC | 	wrlong	result2, fp
115a0     04 4E 05 F1 | 	add	fp, #4
115a4     A7 22 62 FC | 	wrlong	local03, fp
115a8                 | ' t2=pop()
115a8                 | ' t1=pop()
115a8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
115a8     08 4E 85 F1 | 	sub	fp, #8
115ac     1C 22 0E F2 | 	cmp	local03, #28 wz
115b0     A7 22 02 AB |  if_e	rdlong	local03, fp
115b4     A7 22 62 AC |  if_e	wrlong	local03, fp
115b8     08 4E 05 A1 |  if_e	add	fp, #8
115bc     A7 3A 68 AC |  if_e	wrlong	#29, fp
115c0     08 4E 85 A1 |  if_e	sub	fp, #8
115c4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
115c4     14 4E 05 F1 | 	add	fp, #20
115c8     A7 22 02 FB | 	rdlong	local03, fp
115cc     14 4E 85 F1 | 	sub	fp, #20
115d0     1C 22 0E F2 | 	cmp	local03, #28 wz
115d4     18 00 90 5D |  if_ne	jmp	#LR__1390
115d8     0C 4E 05 F1 | 	add	fp, #12
115dc     A7 22 02 FB | 	rdlong	local03, fp
115e0     A7 22 62 FC | 	wrlong	local03, fp
115e4     08 4E 05 F1 | 	add	fp, #8
115e8     A7 3A 68 FC | 	wrlong	#29, fp
115ec     14 4E 85 F1 | 	sub	fp, #20
115f0                 | LR__1390
115f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
115f0     08 4E 05 F1 | 	add	fp, #8
115f4     A7 22 02 FB | 	rdlong	local03, fp
115f8     08 4E 85 F1 | 	sub	fp, #8
115fc     1F 22 0E F2 | 	cmp	local03, #31 wz
11600     14 4E 05 51 |  if_ne	add	fp, #20
11604     A7 20 02 5B |  if_ne	rdlong	local02, fp
11608     14 4E 85 51 |  if_ne	sub	fp, #20
1160c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
11610     08 4E 05 51 |  if_ne	add	fp, #8
11614     A7 22 02 5B |  if_ne	rdlong	local03, fp
11618     08 4E 85 51 |  if_ne	sub	fp, #8
1161c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
11620     14 4E 05 51 |  if_ne	add	fp, #20
11624     14 4E 85 51 |  if_ne	sub	fp, #20
11628     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1162c     A7 0C 68 AC |  if_e	wrlong	#6, fp
11630     08 4E 05 A1 |  if_e	add	fp, #8
11634     A7 FE 69 AC |  if_e	wrlong	#255, fp
11638     08 4E 85 A1 |  if_e	sub	fp, #8
1163c     18 00 90 AD |  if_e	jmp	#LR__1391
11640     A7 22 02 FB | 	rdlong	local03, fp
11644     0C 4E 05 F1 | 	add	fp, #12
11648     A7 1E 02 FB | 	rdlong	local01, fp
1164c     0C 4E 85 F1 | 	sub	fp, #12
11650     0F 23 42 F0 | 	shr	local03, local01
11654     A7 22 62 FC | 	wrlong	local03, fp
11658                 | LR__1391
11658     A7 12 02 F6 | 	mov	arg01, fp
1165c     D0 92 BF FD | 	call	#_push
11660     A7 F0 03 F6 | 	mov	ptra, fp
11664     B2 00 A0 FD | 	call	#popregs_
11668                 | _do_shr_ret
11668     2D 00 64 FD | 	ret
1166c                 | 
1166c                 | ' 
1166c                 | ' sub do_power 
1166c                 | _do_power
1166c     02 4A 05 F6 | 	mov	COUNT_, #2
11670     A8 00 A0 FD | 	call	#pushregs_
11674     18 F0 07 F1 | 	add	ptra, #24
11678     1C 92 BF FD | 	call	#_pop
1167c     FD 14 02 F6 | 	mov	arg02, result1
11680     FE 12 02 F6 | 	mov	arg01, result2
11684     FF 1E 02 F6 | 	mov	local01, result3
11688     0C 4E 05 F1 | 	add	fp, #12
1168c     A7 14 62 FC | 	wrlong	arg02, fp
11690     04 4E 05 F1 | 	add	fp, #4
11694     A7 12 62 FC | 	wrlong	arg01, fp
11698     04 4E 05 F1 | 	add	fp, #4
1169c     A7 1E 62 FC | 	wrlong	local01, fp
116a0     14 4E 85 F1 | 	sub	fp, #20
116a4     F0 91 BF FD | 	call	#_pop
116a8     A7 FA 61 FC | 	wrlong	result1, fp
116ac     04 4E 05 F1 | 	add	fp, #4
116b0     A7 FC 61 FC | 	wrlong	result2, fp
116b4     04 4E 05 F1 | 	add	fp, #4
116b8     A7 FE 61 FC | 	wrlong	result3, fp
116bc                 | ' t2=pop()
116bc                 | ' t1=pop()
116bc                 | ' 
116bc                 | ' 
116bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
116bc     08 4E 85 F1 | 	sub	fp, #8
116c0     1F FE 0D F2 | 	cmp	result3, #31 wz
116c4     14 4E 05 51 |  if_ne	add	fp, #20
116c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
116cc     14 4E 85 51 |  if_ne	sub	fp, #20
116d0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
116d4     A7 18 68 AC |  if_e	wrlong	#12, fp
116d8     08 4E 05 A1 |  if_e	add	fp, #8
116dc     A7 FE 69 AC |  if_e	wrlong	#255, fp
116e0     08 4E 85 A1 |  if_e	sub	fp, #8
116e4     38 01 90 AD |  if_e	jmp	#LR__1405
116e8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
116e8     08 4E 05 F1 | 	add	fp, #8
116ec     A7 14 02 FB | 	rdlong	arg02, fp
116f0     08 4E 85 F1 | 	sub	fp, #8
116f4     1C 14 0E F2 | 	cmp	arg02, #28 wz
116f8     28 00 90 5D |  if_ne	jmp	#LR__1400
116fc     08 4E 05 F1 | 	add	fp, #8
11700     A7 3C 68 FC | 	wrlong	#30, fp
11704     08 4E 85 F1 | 	sub	fp, #8
11708     A7 12 02 FB | 	rdlong	arg01, fp
1170c     09 13 52 F6 | 	abs	arg01, arg01 wc
11710     1F 20 C6 C9 |  if_b	decod	local02, #31
11714     00 20 06 36 |  if_ae	mov	local02, #0
11718     F4 FD B0 FD | 	call	#__system___float_fromuns
1171c     10 FB 61 F5 | 	xor	result1, local02
11720     A7 FA 61 FC | 	wrlong	result1, fp
11724                 | LR__1400
11724                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
11724     08 4E 05 F1 | 	add	fp, #8
11728     A7 14 02 FB | 	rdlong	arg02, fp
1172c     08 4E 85 F1 | 	sub	fp, #8
11730     1D 14 0E F2 | 	cmp	arg02, #29 wz
11734     18 00 90 5D |  if_ne	jmp	#LR__1401
11738     08 4E 05 F1 | 	add	fp, #8
1173c     A7 3C 68 FC | 	wrlong	#30, fp
11740     08 4E 85 F1 | 	sub	fp, #8
11744     A7 12 02 FB | 	rdlong	arg01, fp
11748     C4 FD B0 FD | 	call	#__system___float_fromuns
1174c     A7 FA 61 FC | 	wrlong	result1, fp
11750                 | LR__1401
11750                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
11750     14 4E 05 F1 | 	add	fp, #20
11754     A7 14 02 FB | 	rdlong	arg02, fp
11758     14 4E 85 F1 | 	sub	fp, #20
1175c     1C 14 0E F2 | 	cmp	arg02, #28 wz
11760     34 00 90 5D |  if_ne	jmp	#LR__1402
11764     14 4E 05 F1 | 	add	fp, #20
11768     A7 3C 68 FC | 	wrlong	#30, fp
1176c     08 4E 85 F1 | 	sub	fp, #8
11770     A7 12 02 FB | 	rdlong	arg01, fp
11774     0C 4E 85 F1 | 	sub	fp, #12
11778     09 13 52 F6 | 	abs	arg01, arg01 wc
1177c     1F 20 C6 C9 |  if_b	decod	local02, #31
11780     00 20 06 36 |  if_ae	mov	local02, #0
11784     88 FD B0 FD | 	call	#__system___float_fromuns
11788     10 FB 61 F5 | 	xor	result1, local02
1178c     0C 4E 05 F1 | 	add	fp, #12
11790     A7 FA 61 FC | 	wrlong	result1, fp
11794     0C 4E 85 F1 | 	sub	fp, #12
11798                 | LR__1402
11798                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11798     14 4E 05 F1 | 	add	fp, #20
1179c     A7 14 02 FB | 	rdlong	arg02, fp
117a0     14 4E 85 F1 | 	sub	fp, #20
117a4     1D 14 0E F2 | 	cmp	arg02, #29 wz
117a8     24 00 90 5D |  if_ne	jmp	#LR__1403
117ac     14 4E 05 F1 | 	add	fp, #20
117b0     A7 3C 68 FC | 	wrlong	#30, fp
117b4     08 4E 85 F1 | 	sub	fp, #8
117b8     A7 12 02 FB | 	rdlong	arg01, fp
117bc     0C 4E 85 F1 | 	sub	fp, #12
117c0     4C FD B0 FD | 	call	#__system___float_fromuns
117c4     0C 4E 05 F1 | 	add	fp, #12
117c8     A7 FA 61 FC | 	wrlong	result1, fp
117cc     0C 4E 85 F1 | 	sub	fp, #12
117d0                 | LR__1403
117d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
117d0     08 4E 05 F1 | 	add	fp, #8
117d4     A7 14 02 FB | 	rdlong	arg02, fp
117d8     08 4E 85 F1 | 	sub	fp, #8
117dc     1E 14 0E F2 | 	cmp	arg02, #30 wz
117e0     14 4E 05 A1 |  if_e	add	fp, #20
117e4     A7 1E 02 AB |  if_e	rdlong	local01, fp
117e8     14 4E 85 A1 |  if_e	sub	fp, #20
117ec     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
117f0     1C 00 90 5D |  if_ne	jmp	#LR__1404
117f4     A7 12 02 FB | 	rdlong	arg01, fp
117f8     0C 4E 05 F1 | 	add	fp, #12
117fc     A7 14 02 FB | 	rdlong	arg02, fp
11800     0C 4E 85 F1 | 	sub	fp, #12
11804     F0 0F B1 FD | 	call	#__system____builtin_powf
11808     A7 FA 61 FC | 	wrlong	result1, fp
1180c     10 00 90 FD | 	jmp	#LR__1405
11810                 | LR__1404
11810     A7 1A 68 FC | 	wrlong	#13, fp
11814     08 4E 05 F1 | 	add	fp, #8
11818     A7 FE 69 FC | 	wrlong	#255, fp
1181c     08 4E 85 F1 | 	sub	fp, #8
11820                 | LR__1405
11820     A7 12 02 F6 | 	mov	arg01, fp
11824     08 91 BF FD | 	call	#_push
11828     A7 F0 03 F6 | 	mov	ptra, fp
1182c     B2 00 A0 FD | 	call	#popregs_
11830                 | _do_power_ret
11830     2D 00 64 FD | 	ret
11834                 | 
11834                 | ' 
11834                 | ' 
11834                 | ' sub do_eq
11834                 | _do_eq
11834     05 4A 05 F6 | 	mov	COUNT_, #5
11838     A8 00 A0 FD | 	call	#pushregs_
1183c     18 F0 07 F1 | 	add	ptra, #24
11840     54 90 BF FD | 	call	#_pop
11844     FD 1E 02 F6 | 	mov	local01, result1
11848     FE 20 02 F6 | 	mov	local02, result2
1184c     FF 22 02 F6 | 	mov	local03, result3
11850     0C 4E 05 F1 | 	add	fp, #12
11854     A7 1E 62 FC | 	wrlong	local01, fp
11858     04 4E 05 F1 | 	add	fp, #4
1185c     A7 20 62 FC | 	wrlong	local02, fp
11860     04 4E 05 F1 | 	add	fp, #4
11864     A7 22 62 FC | 	wrlong	local03, fp
11868     14 4E 85 F1 | 	sub	fp, #20
1186c     28 90 BF FD | 	call	#_pop
11870     FF 22 02 F6 | 	mov	local03, result3
11874     A7 FA 61 FC | 	wrlong	result1, fp
11878     04 4E 05 F1 | 	add	fp, #4
1187c     A7 FC 61 FC | 	wrlong	result2, fp
11880     04 4E 05 F1 | 	add	fp, #4
11884     A7 22 62 FC | 	wrlong	local03, fp
11888                 | ' t2=pop()
11888                 | ' t1=pop()
11888                 | ' 
11888                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
11888     08 4E 85 F1 | 	sub	fp, #8
1188c     1F 22 0E F2 | 	cmp	local03, #31 wz
11890     14 4E 05 A1 |  if_e	add	fp, #20
11894     A7 24 02 AB |  if_e	rdlong	local04, fp
11898     14 4E 85 A1 |  if_e	sub	fp, #20
1189c     12 23 02 A6 |  if_e	mov	local03, local04
118a0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
118a4     28 00 90 5D |  if_ne	jmp	#LR__1410
118a8     00 1E 06 F6 | 	mov	local01, #0
118ac     A7 12 02 FB | 	rdlong	arg01, fp
118b0     0C 4E 05 F1 | 	add	fp, #12
118b4     A7 14 02 FB | 	rdlong	arg02, fp
118b8     0C 4E 85 F1 | 	sub	fp, #12
118bc     34 D5 B0 FD | 	call	#__system___string_cmp
118c0     00 FA 0D F2 | 	cmp	result1, #0 wz
118c4     00 1E 26 A6 |  if_e	not	local01, #0
118c8     A7 1E 62 FC | 	wrlong	local01, fp
118cc     1C 04 90 FD | 	jmp	#LR__1423
118d0                 | LR__1410
118d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
118d0     08 4E 05 F1 | 	add	fp, #8
118d4     A7 1E 02 FB | 	rdlong	local01, fp
118d8     08 4E 85 F1 | 	sub	fp, #8
118dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
118e0     14 4E 05 A1 |  if_e	add	fp, #20
118e4     A7 24 02 AB |  if_e	rdlong	local04, fp
118e8     14 4E 85 A1 |  if_e	sub	fp, #20
118ec     12 23 02 A6 |  if_e	mov	local03, local04
118f0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
118f4     2C 00 90 5D |  if_ne	jmp	#LR__1411
118f8     00 1E 06 F6 | 	mov	local01, #0
118fc     A7 12 02 FB | 	rdlong	arg01, fp
11900     0C 4E 05 F1 | 	add	fp, #12
11904     A7 14 02 FB | 	rdlong	arg02, fp
11908     0C 4E 85 F1 | 	sub	fp, #12
1190c     01 16 06 F6 | 	mov	arg03, #1
11910     34 04 B1 FD | 	call	#__system___float_cmp
11914     00 FA 0D F2 | 	cmp	result1, #0 wz
11918     00 1E 26 A6 |  if_e	not	local01, #0
1191c     A7 1E 62 FC | 	wrlong	local01, fp
11920     C8 03 90 FD | 	jmp	#LR__1423
11924                 | LR__1411
11924                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
11924     08 4E 05 F1 | 	add	fp, #8
11928     A7 1E 02 FB | 	rdlong	local01, fp
1192c     08 4E 85 F1 | 	sub	fp, #8
11930     1E 1E 0E F2 | 	cmp	local01, #30 wz
11934     14 4E 05 A1 |  if_e	add	fp, #20
11938     A7 24 02 AB |  if_e	rdlong	local04, fp
1193c     14 4E 85 A1 |  if_e	sub	fp, #20
11940     12 23 02 A6 |  if_e	mov	local03, local04
11944     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11948     48 00 90 5D |  if_ne	jmp	#LR__1412
1194c     00 1E 06 F6 | 	mov	local01, #0
11950     A7 20 02 FB | 	rdlong	local02, fp
11954     0C 4E 05 F1 | 	add	fp, #12
11958     A7 12 02 FB | 	rdlong	arg01, fp
1195c     0C 4E 85 F1 | 	sub	fp, #12
11960     09 13 52 F6 | 	abs	arg01, arg01 wc
11964     1F 26 C6 C9 |  if_b	decod	local05, #31
11968     00 26 06 36 |  if_ae	mov	local05, #0
1196c     A0 FB B0 FD | 	call	#__system___float_fromuns
11970     13 FB 61 F5 | 	xor	result1, local05
11974     FD 14 02 F6 | 	mov	arg02, result1
11978     10 13 02 F6 | 	mov	arg01, local02
1197c     01 16 06 F6 | 	mov	arg03, #1
11980     C4 03 B1 FD | 	call	#__system___float_cmp
11984     00 FA 0D F2 | 	cmp	result1, #0 wz
11988     00 1E 26 A6 |  if_e	not	local01, #0
1198c     A7 1E 62 FC | 	wrlong	local01, fp
11990     58 03 90 FD | 	jmp	#LR__1423
11994                 | LR__1412
11994                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
11994     08 4E 05 F1 | 	add	fp, #8
11998     A7 1E 02 FB | 	rdlong	local01, fp
1199c     08 4E 85 F1 | 	sub	fp, #8
119a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
119a4     14 4E 05 A1 |  if_e	add	fp, #20
119a8     A7 24 02 AB |  if_e	rdlong	local04, fp
119ac     14 4E 85 A1 |  if_e	sub	fp, #20
119b0     12 23 02 A6 |  if_e	mov	local03, local04
119b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
119b8     38 00 90 5D |  if_ne	jmp	#LR__1413
119bc     00 1E 06 F6 | 	mov	local01, #0
119c0     A7 20 02 FB | 	rdlong	local02, fp
119c4     0C 4E 05 F1 | 	add	fp, #12
119c8     A7 12 02 FB | 	rdlong	arg01, fp
119cc     0C 4E 85 F1 | 	sub	fp, #12
119d0     3C FB B0 FD | 	call	#__system___float_fromuns
119d4     FD 14 02 F6 | 	mov	arg02, result1
119d8     10 13 02 F6 | 	mov	arg01, local02
119dc     01 16 06 F6 | 	mov	arg03, #1
119e0     64 03 B1 FD | 	call	#__system___float_cmp
119e4     00 FA 0D F2 | 	cmp	result1, #0 wz
119e8     00 1E 26 A6 |  if_e	not	local01, #0
119ec     A7 1E 62 FC | 	wrlong	local01, fp
119f0     F8 02 90 FD | 	jmp	#LR__1423
119f4                 | LR__1413
119f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
119f4     08 4E 05 F1 | 	add	fp, #8
119f8     A7 1E 02 FB | 	rdlong	local01, fp
119fc     08 4E 85 F1 | 	sub	fp, #8
11a00     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a04     14 4E 05 A1 |  if_e	add	fp, #20
11a08     A7 24 02 AB |  if_e	rdlong	local04, fp
11a0c     14 4E 85 A1 |  if_e	sub	fp, #20
11a10     12 23 02 A6 |  if_e	mov	local03, local04
11a14     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11a18     44 00 90 5D |  if_ne	jmp	#LR__1414
11a1c     00 1E 06 F6 | 	mov	local01, #0
11a20     A7 12 02 FB | 	rdlong	arg01, fp
11a24     09 13 52 F6 | 	abs	arg01, arg01 wc
11a28     1F 26 C6 C9 |  if_b	decod	local05, #31
11a2c     00 26 06 36 |  if_ae	mov	local05, #0
11a30     DC FA B0 FD | 	call	#__system___float_fromuns
11a34     13 FB 61 F5 | 	xor	result1, local05
11a38     FD 12 02 F6 | 	mov	arg01, result1
11a3c     0C 4E 05 F1 | 	add	fp, #12
11a40     A7 14 02 FB | 	rdlong	arg02, fp
11a44     0C 4E 85 F1 | 	sub	fp, #12
11a48     01 16 06 F6 | 	mov	arg03, #1
11a4c     F8 02 B1 FD | 	call	#__system___float_cmp
11a50     00 FA 0D F2 | 	cmp	result1, #0 wz
11a54     00 1E 26 A6 |  if_e	not	local01, #0
11a58     A7 1E 62 FC | 	wrlong	local01, fp
11a5c     8C 02 90 FD | 	jmp	#LR__1423
11a60                 | LR__1414
11a60                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
11a60     08 4E 05 F1 | 	add	fp, #8
11a64     A7 1E 02 FB | 	rdlong	local01, fp
11a68     08 4E 85 F1 | 	sub	fp, #8
11a6c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a70     14 4E 05 A1 |  if_e	add	fp, #20
11a74     A7 24 02 AB |  if_e	rdlong	local04, fp
11a78     14 4E 85 A1 |  if_e	sub	fp, #20
11a7c     12 23 02 A6 |  if_e	mov	local03, local04
11a80     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a84     24 00 90 5D |  if_ne	jmp	#LR__1415
11a88     00 1E 06 F6 | 	mov	local01, #0
11a8c     A7 20 02 FB | 	rdlong	local02, fp
11a90     0C 4E 05 F1 | 	add	fp, #12
11a94     A7 22 02 FB | 	rdlong	local03, fp
11a98     0C 4E 85 F1 | 	sub	fp, #12
11a9c     11 21 0A F2 | 	cmp	local02, local03 wz
11aa0     01 1E 66 A6 |  if_e	neg	local01, #1
11aa4     A7 1E 62 FC | 	wrlong	local01, fp
11aa8     40 02 90 FD | 	jmp	#LR__1423
11aac                 | LR__1415
11aac                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
11aac     08 4E 05 F1 | 	add	fp, #8
11ab0     A7 1E 02 FB | 	rdlong	local01, fp
11ab4     08 4E 85 F1 | 	sub	fp, #8
11ab8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11abc     14 4E 05 A1 |  if_e	add	fp, #20
11ac0     A7 24 02 AB |  if_e	rdlong	local04, fp
11ac4     14 4E 85 A1 |  if_e	sub	fp, #20
11ac8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11acc     24 00 90 5D |  if_ne	jmp	#LR__1416
11ad0     00 1E 06 F6 | 	mov	local01, #0
11ad4     A7 20 02 FB | 	rdlong	local02, fp
11ad8     0C 4E 05 F1 | 	add	fp, #12
11adc     A7 22 02 FB | 	rdlong	local03, fp
11ae0     0C 4E 85 F1 | 	sub	fp, #12
11ae4     11 21 0A F2 | 	cmp	local02, local03 wz
11ae8     01 1E 66 A6 |  if_e	neg	local01, #1
11aec     A7 1E 62 FC | 	wrlong	local01, fp
11af0     F8 01 90 FD | 	jmp	#LR__1423
11af4                 | LR__1416
11af4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11af4     08 4E 05 F1 | 	add	fp, #8
11af8     A7 1E 02 FB | 	rdlong	local01, fp
11afc     08 4E 85 F1 | 	sub	fp, #8
11b00     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b04     14 4E 05 A1 |  if_e	add	fp, #20
11b08     A7 22 02 AB |  if_e	rdlong	local03, fp
11b0c     14 4E 85 A1 |  if_e	sub	fp, #20
11b10     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11b14     34 00 90 5D |  if_ne	jmp	#LR__1417
11b18     00 1E 06 F6 | 	mov	local01, #0
11b1c     A7 12 02 FB | 	rdlong	arg01, fp
11b20     EC F9 B0 FD | 	call	#__system___float_fromuns
11b24     FD 12 02 F6 | 	mov	arg01, result1
11b28     0C 4E 05 F1 | 	add	fp, #12
11b2c     A7 14 02 FB | 	rdlong	arg02, fp
11b30     0C 4E 85 F1 | 	sub	fp, #12
11b34     01 16 06 F6 | 	mov	arg03, #1
11b38     0C 02 B1 FD | 	call	#__system___float_cmp
11b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
11b40     00 1E 26 A6 |  if_e	not	local01, #0
11b44     A7 1E 62 FC | 	wrlong	local01, fp
11b48     A0 01 90 FD | 	jmp	#LR__1423
11b4c                 | LR__1417
11b4c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
11b4c     08 4E 05 F1 | 	add	fp, #8
11b50     A7 1E 02 FB | 	rdlong	local01, fp
11b54     08 4E 85 F1 | 	sub	fp, #8
11b58     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b5c     14 4E 05 A1 |  if_e	add	fp, #20
11b60     A7 22 02 AB |  if_e	rdlong	local03, fp
11b64     14 4E 85 A1 |  if_e	sub	fp, #20
11b68     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b6c     24 00 90 5D |  if_ne	jmp	#LR__1418
11b70     00 1E 06 F6 | 	mov	local01, #0
11b74     A7 20 02 FB | 	rdlong	local02, fp
11b78     0C 4E 05 F1 | 	add	fp, #12
11b7c     A7 22 02 FB | 	rdlong	local03, fp
11b80     0C 4E 85 F1 | 	sub	fp, #12
11b84     11 21 0A F2 | 	cmp	local02, local03 wz
11b88     01 1E 66 A6 |  if_e	neg	local01, #1
11b8c     A7 1E 62 FC | 	wrlong	local01, fp
11b90     58 01 90 FD | 	jmp	#LR__1423
11b94                 | LR__1418
11b94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
11b94     08 4E 05 F1 | 	add	fp, #8
11b98     A7 1E 02 FB | 	rdlong	local01, fp
11b9c     08 4E 85 F1 | 	sub	fp, #8
11ba0     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ba4     14 4E 05 A1 |  if_e	add	fp, #20
11ba8     A7 22 02 AB |  if_e	rdlong	local03, fp
11bac     14 4E 85 A1 |  if_e	sub	fp, #20
11bb0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11bb4     24 00 90 5D |  if_ne	jmp	#LR__1419
11bb8     00 1E 06 F6 | 	mov	local01, #0
11bbc     A7 20 02 FB | 	rdlong	local02, fp
11bc0     0C 4E 05 F1 | 	add	fp, #12
11bc4     A7 22 02 FB | 	rdlong	local03, fp
11bc8     0C 4E 85 F1 | 	sub	fp, #12
11bcc     11 21 0A F2 | 	cmp	local02, local03 wz
11bd0     01 1E 66 A6 |  if_e	neg	local01, #1
11bd4     A7 1E 62 FC | 	wrlong	local01, fp
11bd8     10 01 90 FD | 	jmp	#LR__1423
11bdc                 | LR__1419
11bdc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11bdc     08 4E 05 F1 | 	add	fp, #8
11be0     A7 1E 02 FB | 	rdlong	local01, fp
11be4     08 4E 85 F1 | 	sub	fp, #8
11be8     2B 1E 0E F2 | 	cmp	local01, #43 wz
11bec     14 4E 05 A1 |  if_e	add	fp, #20
11bf0     A7 22 02 AB |  if_e	rdlong	local03, fp
11bf4     14 4E 85 A1 |  if_e	sub	fp, #20
11bf8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11bfc     30 00 90 5D |  if_ne	jmp	#LR__1420
11c00     00 1E 06 F6 | 	mov	local01, #0
11c04     A7 12 02 FB | 	rdlong	arg01, fp
11c08     04 D1 BF FD | 	call	#_convertstring
11c0c     FD 12 02 F6 | 	mov	arg01, result1
11c10     0C 4E 05 F1 | 	add	fp, #12
11c14     A7 14 02 FB | 	rdlong	arg02, fp
11c18     0C 4E 85 F1 | 	sub	fp, #12
11c1c     D4 D1 B0 FD | 	call	#__system___string_cmp
11c20     00 FA 0D F2 | 	cmp	result1, #0 wz
11c24     00 1E 26 A6 |  if_e	not	local01, #0
11c28     A7 1E 62 FC | 	wrlong	local01, fp
11c2c     BC 00 90 FD | 	jmp	#LR__1423
11c30                 | LR__1420
11c30                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
11c30     08 4E 05 F1 | 	add	fp, #8
11c34     A7 1E 02 FB | 	rdlong	local01, fp
11c38     08 4E 85 F1 | 	sub	fp, #8
11c3c     1F 1E 0E F2 | 	cmp	local01, #31 wz
11c40     14 4E 05 A1 |  if_e	add	fp, #20
11c44     A7 22 02 AB |  if_e	rdlong	local03, fp
11c48     14 4E 85 A1 |  if_e	sub	fp, #20
11c4c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c50     34 00 90 5D |  if_ne	jmp	#LR__1421
11c54     00 1E 06 F6 | 	mov	local01, #0
11c58     A7 20 02 FB | 	rdlong	local02, fp
11c5c     0C 4E 05 F1 | 	add	fp, #12
11c60     A7 12 02 FB | 	rdlong	arg01, fp
11c64     0C 4E 85 F1 | 	sub	fp, #12
11c68     A4 D0 BF FD | 	call	#_convertstring
11c6c     FD 14 02 F6 | 	mov	arg02, result1
11c70     10 13 02 F6 | 	mov	arg01, local02
11c74     7C D1 B0 FD | 	call	#__system___string_cmp
11c78     00 FA 0D F2 | 	cmp	result1, #0 wz
11c7c     00 1E 26 A6 |  if_e	not	local01, #0
11c80     A7 1E 62 FC | 	wrlong	local01, fp
11c84     64 00 90 FD | 	jmp	#LR__1423
11c88                 | LR__1421
11c88                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
11c88     08 4E 05 F1 | 	add	fp, #8
11c8c     A7 1E 02 FB | 	rdlong	local01, fp
11c90     08 4E 85 F1 | 	sub	fp, #8
11c94     2B 1E 0E F2 | 	cmp	local01, #43 wz
11c98     14 4E 05 A1 |  if_e	add	fp, #20
11c9c     A7 22 02 AB |  if_e	rdlong	local03, fp
11ca0     14 4E 85 A1 |  if_e	sub	fp, #20
11ca4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11ca8     3C 00 90 5D |  if_ne	jmp	#LR__1422
11cac     00 1E 06 F6 | 	mov	local01, #0
11cb0     A7 12 02 FB | 	rdlong	arg01, fp
11cb4     58 D0 BF FD | 	call	#_convertstring
11cb8     FD 20 02 F6 | 	mov	local02, result1
11cbc     0C 4E 05 F1 | 	add	fp, #12
11cc0     A7 12 02 FB | 	rdlong	arg01, fp
11cc4     0C 4E 85 F1 | 	sub	fp, #12
11cc8     44 D0 BF FD | 	call	#_convertstring
11ccc     FD 14 02 F6 | 	mov	arg02, result1
11cd0     10 13 02 F6 | 	mov	arg01, local02
11cd4     1C D1 B0 FD | 	call	#__system___string_cmp
11cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
11cdc     00 1E 26 A6 |  if_e	not	local01, #0
11ce0     A7 1E 62 FC | 	wrlong	local01, fp
11ce4     04 00 90 FD | 	jmp	#LR__1423
11ce8                 | LR__1422
11ce8     A7 00 68 FC | 	wrlong	#0, fp
11cec                 | LR__1423
11cec     08 4E 05 F1 | 	add	fp, #8
11cf0     A7 38 68 FC | 	wrlong	#28, fp
11cf4     08 4E 85 F1 | 	sub	fp, #8
11cf8     A7 12 02 F6 | 	mov	arg01, fp
11cfc     30 8C BF FD | 	call	#_push
11d00     A7 F0 03 F6 | 	mov	ptra, fp
11d04     B2 00 A0 FD | 	call	#popregs_
11d08                 | _do_eq_ret
11d08     2D 00 64 FD | 	ret
11d0c                 | 
11d0c                 | ' 
11d0c                 | ' sub do_gt
11d0c                 | _do_gt
11d0c     05 4A 05 F6 | 	mov	COUNT_, #5
11d10     A8 00 A0 FD | 	call	#pushregs_
11d14     18 F0 07 F1 | 	add	ptra, #24
11d18     7C 8B BF FD | 	call	#_pop
11d1c     FD 1E 02 F6 | 	mov	local01, result1
11d20     FE 20 02 F6 | 	mov	local02, result2
11d24     FF 22 02 F6 | 	mov	local03, result3
11d28     0C 4E 05 F1 | 	add	fp, #12
11d2c     A7 1E 62 FC | 	wrlong	local01, fp
11d30     04 4E 05 F1 | 	add	fp, #4
11d34     A7 20 62 FC | 	wrlong	local02, fp
11d38     04 4E 05 F1 | 	add	fp, #4
11d3c     A7 22 62 FC | 	wrlong	local03, fp
11d40     14 4E 85 F1 | 	sub	fp, #20
11d44     50 8B BF FD | 	call	#_pop
11d48     FF 22 02 F6 | 	mov	local03, result3
11d4c     A7 FA 61 FC | 	wrlong	result1, fp
11d50     04 4E 05 F1 | 	add	fp, #4
11d54     A7 FC 61 FC | 	wrlong	result2, fp
11d58     04 4E 05 F1 | 	add	fp, #4
11d5c     A7 22 62 FC | 	wrlong	local03, fp
11d60                 | ' t2=pop()
11d60                 | ' t1=pop()
11d60                 | ' 
11d60                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
11d60     08 4E 85 F1 | 	sub	fp, #8
11d64     1F 22 0E F2 | 	cmp	local03, #31 wz
11d68     14 4E 05 A1 |  if_e	add	fp, #20
11d6c     A7 24 02 AB |  if_e	rdlong	local04, fp
11d70     14 4E 85 A1 |  if_e	sub	fp, #20
11d74     12 23 02 A6 |  if_e	mov	local03, local04
11d78     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11d7c     28 00 90 5D |  if_ne	jmp	#LR__1430
11d80     00 1E 06 F6 | 	mov	local01, #0
11d84     A7 12 02 FB | 	rdlong	arg01, fp
11d88     0C 4E 05 F1 | 	add	fp, #12
11d8c     A7 14 02 FB | 	rdlong	arg02, fp
11d90     0C 4E 85 F1 | 	sub	fp, #12
11d94     5C D0 B0 FD | 	call	#__system___string_cmp
11d98     01 FA 55 F2 | 	cmps	result1, #1 wc
11d9c     00 1E 26 36 |  if_ae	not	local01, #0
11da0     A7 1E 62 FC | 	wrlong	local01, fp
11da4     1C 04 90 FD | 	jmp	#LR__1443
11da8                 | LR__1430
11da8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11da8     08 4E 05 F1 | 	add	fp, #8
11dac     A7 1E 02 FB | 	rdlong	local01, fp
11db0     08 4E 85 F1 | 	sub	fp, #8
11db4     1E 1E 0E F2 | 	cmp	local01, #30 wz
11db8     14 4E 05 A1 |  if_e	add	fp, #20
11dbc     A7 24 02 AB |  if_e	rdlong	local04, fp
11dc0     14 4E 85 A1 |  if_e	sub	fp, #20
11dc4     12 23 02 A6 |  if_e	mov	local03, local04
11dc8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11dcc     2C 00 90 5D |  if_ne	jmp	#LR__1431
11dd0     00 1E 06 F6 | 	mov	local01, #0
11dd4     A7 12 02 FB | 	rdlong	arg01, fp
11dd8     0C 4E 05 F1 | 	add	fp, #12
11ddc     A7 14 02 FB | 	rdlong	arg02, fp
11de0     0C 4E 85 F1 | 	sub	fp, #12
11de4     01 16 66 F6 | 	neg	arg03, #1
11de8     5C FF B0 FD | 	call	#__system___float_cmp
11dec     01 FA 55 F2 | 	cmps	result1, #1 wc
11df0     00 1E 26 36 |  if_ae	not	local01, #0
11df4     A7 1E 62 FC | 	wrlong	local01, fp
11df8     C8 03 90 FD | 	jmp	#LR__1443
11dfc                 | LR__1431
11dfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11dfc     08 4E 05 F1 | 	add	fp, #8
11e00     A7 1E 02 FB | 	rdlong	local01, fp
11e04     08 4E 85 F1 | 	sub	fp, #8
11e08     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e0c     14 4E 05 A1 |  if_e	add	fp, #20
11e10     A7 24 02 AB |  if_e	rdlong	local04, fp
11e14     14 4E 85 A1 |  if_e	sub	fp, #20
11e18     12 23 02 A6 |  if_e	mov	local03, local04
11e1c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11e20     48 00 90 5D |  if_ne	jmp	#LR__1432
11e24     00 1E 06 F6 | 	mov	local01, #0
11e28     A7 20 02 FB | 	rdlong	local02, fp
11e2c     0C 4E 05 F1 | 	add	fp, #12
11e30     A7 12 02 FB | 	rdlong	arg01, fp
11e34     0C 4E 85 F1 | 	sub	fp, #12
11e38     09 13 52 F6 | 	abs	arg01, arg01 wc
11e3c     1F 26 C6 C9 |  if_b	decod	local05, #31
11e40     00 26 06 36 |  if_ae	mov	local05, #0
11e44     C8 F6 B0 FD | 	call	#__system___float_fromuns
11e48     13 FB 61 F5 | 	xor	result1, local05
11e4c     FD 14 02 F6 | 	mov	arg02, result1
11e50     10 13 02 F6 | 	mov	arg01, local02
11e54     01 16 66 F6 | 	neg	arg03, #1
11e58     EC FE B0 FD | 	call	#__system___float_cmp
11e5c     01 FA 55 F2 | 	cmps	result1, #1 wc
11e60     00 1E 26 36 |  if_ae	not	local01, #0
11e64     A7 1E 62 FC | 	wrlong	local01, fp
11e68     58 03 90 FD | 	jmp	#LR__1443
11e6c                 | LR__1432
11e6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
11e6c     08 4E 05 F1 | 	add	fp, #8
11e70     A7 1E 02 FB | 	rdlong	local01, fp
11e74     08 4E 85 F1 | 	sub	fp, #8
11e78     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e7c     14 4E 05 A1 |  if_e	add	fp, #20
11e80     A7 24 02 AB |  if_e	rdlong	local04, fp
11e84     14 4E 85 A1 |  if_e	sub	fp, #20
11e88     12 23 02 A6 |  if_e	mov	local03, local04
11e8c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11e90     38 00 90 5D |  if_ne	jmp	#LR__1433
11e94     00 1E 06 F6 | 	mov	local01, #0
11e98     A7 20 02 FB | 	rdlong	local02, fp
11e9c     0C 4E 05 F1 | 	add	fp, #12
11ea0     A7 12 02 FB | 	rdlong	arg01, fp
11ea4     0C 4E 85 F1 | 	sub	fp, #12
11ea8     64 F6 B0 FD | 	call	#__system___float_fromuns
11eac     FD 14 02 F6 | 	mov	arg02, result1
11eb0     10 13 02 F6 | 	mov	arg01, local02
11eb4     01 16 66 F6 | 	neg	arg03, #1
11eb8     8C FE B0 FD | 	call	#__system___float_cmp
11ebc     01 FA 55 F2 | 	cmps	result1, #1 wc
11ec0     00 1E 26 36 |  if_ae	not	local01, #0
11ec4     A7 1E 62 FC | 	wrlong	local01, fp
11ec8     F8 02 90 FD | 	jmp	#LR__1443
11ecc                 | LR__1433
11ecc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11ecc     08 4E 05 F1 | 	add	fp, #8
11ed0     A7 1E 02 FB | 	rdlong	local01, fp
11ed4     08 4E 85 F1 | 	sub	fp, #8
11ed8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11edc     14 4E 05 A1 |  if_e	add	fp, #20
11ee0     A7 24 02 AB |  if_e	rdlong	local04, fp
11ee4     14 4E 85 A1 |  if_e	sub	fp, #20
11ee8     12 23 02 A6 |  if_e	mov	local03, local04
11eec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ef0     44 00 90 5D |  if_ne	jmp	#LR__1434
11ef4     00 1E 06 F6 | 	mov	local01, #0
11ef8     A7 12 02 FB | 	rdlong	arg01, fp
11efc     09 13 52 F6 | 	abs	arg01, arg01 wc
11f00     1F 26 C6 C9 |  if_b	decod	local05, #31
11f04     00 26 06 36 |  if_ae	mov	local05, #0
11f08     04 F6 B0 FD | 	call	#__system___float_fromuns
11f0c     13 FB 61 F5 | 	xor	result1, local05
11f10     FD 12 02 F6 | 	mov	arg01, result1
11f14     0C 4E 05 F1 | 	add	fp, #12
11f18     A7 14 02 FB | 	rdlong	arg02, fp
11f1c     0C 4E 85 F1 | 	sub	fp, #12
11f20     01 16 66 F6 | 	neg	arg03, #1
11f24     20 FE B0 FD | 	call	#__system___float_cmp
11f28     01 FA 55 F2 | 	cmps	result1, #1 wc
11f2c     00 1E 26 36 |  if_ae	not	local01, #0
11f30     A7 1E 62 FC | 	wrlong	local01, fp
11f34     8C 02 90 FD | 	jmp	#LR__1443
11f38                 | LR__1434
11f38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11f38     08 4E 05 F1 | 	add	fp, #8
11f3c     A7 1E 02 FB | 	rdlong	local01, fp
11f40     08 4E 85 F1 | 	sub	fp, #8
11f44     1C 1E 0E F2 | 	cmp	local01, #28 wz
11f48     14 4E 05 A1 |  if_e	add	fp, #20
11f4c     A7 24 02 AB |  if_e	rdlong	local04, fp
11f50     14 4E 85 A1 |  if_e	sub	fp, #20
11f54     12 23 02 A6 |  if_e	mov	local03, local04
11f58     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11f5c     24 00 90 5D |  if_ne	jmp	#LR__1435
11f60     00 1E 06 F6 | 	mov	local01, #0
11f64     A7 20 02 FB | 	rdlong	local02, fp
11f68     0C 4E 05 F1 | 	add	fp, #12
11f6c     A7 22 02 FB | 	rdlong	local03, fp
11f70     0C 4E 85 F1 | 	sub	fp, #12
11f74     11 21 5A F2 | 	cmps	local02, local03 wcz
11f78     01 1E 66 16 |  if_a	neg	local01, #1
11f7c     A7 1E 62 FC | 	wrlong	local01, fp
11f80     40 02 90 FD | 	jmp	#LR__1443
11f84                 | LR__1435
11f84                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
11f84     08 4E 05 F1 | 	add	fp, #8
11f88     A7 1E 02 FB | 	rdlong	local01, fp
11f8c     08 4E 85 F1 | 	sub	fp, #8
11f90     1C 1E 0E F2 | 	cmp	local01, #28 wz
11f94     14 4E 05 A1 |  if_e	add	fp, #20
11f98     A7 24 02 AB |  if_e	rdlong	local04, fp
11f9c     14 4E 85 A1 |  if_e	sub	fp, #20
11fa0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11fa4     24 00 90 5D |  if_ne	jmp	#LR__1436
11fa8     00 1E 06 F6 | 	mov	local01, #0
11fac     A7 20 02 FB | 	rdlong	local02, fp
11fb0     0C 4E 05 F1 | 	add	fp, #12
11fb4     A7 22 02 FB | 	rdlong	local03, fp
11fb8     0C 4E 85 F1 | 	sub	fp, #12
11fbc     11 21 5A F2 | 	cmps	local02, local03 wcz
11fc0     01 1E 66 16 |  if_a	neg	local01, #1
11fc4     A7 1E 62 FC | 	wrlong	local01, fp
11fc8     F8 01 90 FD | 	jmp	#LR__1443
11fcc                 | LR__1436
11fcc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11fcc     08 4E 05 F1 | 	add	fp, #8
11fd0     A7 1E 02 FB | 	rdlong	local01, fp
11fd4     08 4E 85 F1 | 	sub	fp, #8
11fd8     1D 1E 0E F2 | 	cmp	local01, #29 wz
11fdc     14 4E 05 A1 |  if_e	add	fp, #20
11fe0     A7 22 02 AB |  if_e	rdlong	local03, fp
11fe4     14 4E 85 A1 |  if_e	sub	fp, #20
11fe8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fec     34 00 90 5D |  if_ne	jmp	#LR__1437
11ff0     00 1E 06 F6 | 	mov	local01, #0
11ff4     A7 12 02 FB | 	rdlong	arg01, fp
11ff8     14 F5 B0 FD | 	call	#__system___float_fromuns
11ffc     FD 12 02 F6 | 	mov	arg01, result1
12000     0C 4E 05 F1 | 	add	fp, #12
12004     A7 14 02 FB | 	rdlong	arg02, fp
12008     0C 4E 85 F1 | 	sub	fp, #12
1200c     01 16 66 F6 | 	neg	arg03, #1
12010     34 FD B0 FD | 	call	#__system___float_cmp
12014     01 FA 55 F2 | 	cmps	result1, #1 wc
12018     00 1E 26 36 |  if_ae	not	local01, #0
1201c     A7 1E 62 FC | 	wrlong	local01, fp
12020     A0 01 90 FD | 	jmp	#LR__1443
12024                 | LR__1437
12024                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
12024     08 4E 05 F1 | 	add	fp, #8
12028     A7 1E 02 FB | 	rdlong	local01, fp
1202c     08 4E 85 F1 | 	sub	fp, #8
12030     1D 1E 0E F2 | 	cmp	local01, #29 wz
12034     14 4E 05 A1 |  if_e	add	fp, #20
12038     A7 22 02 AB |  if_e	rdlong	local03, fp
1203c     14 4E 85 A1 |  if_e	sub	fp, #20
12040     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12044     24 00 90 5D |  if_ne	jmp	#LR__1438
12048     00 1E 06 F6 | 	mov	local01, #0
1204c     A7 20 02 FB | 	rdlong	local02, fp
12050     0C 4E 05 F1 | 	add	fp, #12
12054     A7 22 02 FB | 	rdlong	local03, fp
12058     0C 4E 85 F1 | 	sub	fp, #12
1205c     11 21 5A F2 | 	cmps	local02, local03 wcz
12060     01 1E 66 16 |  if_a	neg	local01, #1
12064     A7 1E 62 FC | 	wrlong	local01, fp
12068     58 01 90 FD | 	jmp	#LR__1443
1206c                 | LR__1438
1206c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1206c     08 4E 05 F1 | 	add	fp, #8
12070     A7 1E 02 FB | 	rdlong	local01, fp
12074     08 4E 85 F1 | 	sub	fp, #8
12078     1D 1E 0E F2 | 	cmp	local01, #29 wz
1207c     14 4E 05 A1 |  if_e	add	fp, #20
12080     A7 22 02 AB |  if_e	rdlong	local03, fp
12084     14 4E 85 A1 |  if_e	sub	fp, #20
12088     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1208c     24 00 90 5D |  if_ne	jmp	#LR__1439
12090     00 1E 06 F6 | 	mov	local01, #0
12094     A7 20 02 FB | 	rdlong	local02, fp
12098     0C 4E 05 F1 | 	add	fp, #12
1209c     A7 22 02 FB | 	rdlong	local03, fp
120a0     0C 4E 85 F1 | 	sub	fp, #12
120a4     11 21 1A F2 | 	cmp	local02, local03 wcz
120a8     01 1E 66 16 |  if_a	neg	local01, #1
120ac     A7 1E 62 FC | 	wrlong	local01, fp
120b0     10 01 90 FD | 	jmp	#LR__1443
120b4                 | LR__1439
120b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
120b4     08 4E 05 F1 | 	add	fp, #8
120b8     A7 1E 02 FB | 	rdlong	local01, fp
120bc     08 4E 85 F1 | 	sub	fp, #8
120c0     2B 1E 0E F2 | 	cmp	local01, #43 wz
120c4     14 4E 05 A1 |  if_e	add	fp, #20
120c8     A7 22 02 AB |  if_e	rdlong	local03, fp
120cc     14 4E 85 A1 |  if_e	sub	fp, #20
120d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
120d4     30 00 90 5D |  if_ne	jmp	#LR__1440
120d8     00 1E 06 F6 | 	mov	local01, #0
120dc     A7 12 02 FB | 	rdlong	arg01, fp
120e0     2C CC BF FD | 	call	#_convertstring
120e4     FD 12 02 F6 | 	mov	arg01, result1
120e8     0C 4E 05 F1 | 	add	fp, #12
120ec     A7 14 02 FB | 	rdlong	arg02, fp
120f0     0C 4E 85 F1 | 	sub	fp, #12
120f4     FC CC B0 FD | 	call	#__system___string_cmp
120f8     01 FA 55 F2 | 	cmps	result1, #1 wc
120fc     00 1E 26 36 |  if_ae	not	local01, #0
12100     A7 1E 62 FC | 	wrlong	local01, fp
12104     BC 00 90 FD | 	jmp	#LR__1443
12108                 | LR__1440
12108                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
12108     08 4E 05 F1 | 	add	fp, #8
1210c     A7 1E 02 FB | 	rdlong	local01, fp
12110     08 4E 85 F1 | 	sub	fp, #8
12114     1F 1E 0E F2 | 	cmp	local01, #31 wz
12118     14 4E 05 A1 |  if_e	add	fp, #20
1211c     A7 22 02 AB |  if_e	rdlong	local03, fp
12120     14 4E 85 A1 |  if_e	sub	fp, #20
12124     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12128     34 00 90 5D |  if_ne	jmp	#LR__1441
1212c     00 1E 06 F6 | 	mov	local01, #0
12130     A7 20 02 FB | 	rdlong	local02, fp
12134     0C 4E 05 F1 | 	add	fp, #12
12138     A7 12 02 FB | 	rdlong	arg01, fp
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     CC CB BF FD | 	call	#_convertstring
12144     FD 14 02 F6 | 	mov	arg02, result1
12148     10 13 02 F6 | 	mov	arg01, local02
1214c     A4 CC B0 FD | 	call	#__system___string_cmp
12150     01 FA 55 F2 | 	cmps	result1, #1 wc
12154     00 1E 26 36 |  if_ae	not	local01, #0
12158     A7 1E 62 FC | 	wrlong	local01, fp
1215c     64 00 90 FD | 	jmp	#LR__1443
12160                 | LR__1441
12160                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
12160     08 4E 05 F1 | 	add	fp, #8
12164     A7 1E 02 FB | 	rdlong	local01, fp
12168     08 4E 85 F1 | 	sub	fp, #8
1216c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12170     14 4E 05 A1 |  if_e	add	fp, #20
12174     A7 22 02 AB |  if_e	rdlong	local03, fp
12178     14 4E 85 A1 |  if_e	sub	fp, #20
1217c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12180     3C 00 90 5D |  if_ne	jmp	#LR__1442
12184     00 1E 06 F6 | 	mov	local01, #0
12188     A7 12 02 FB | 	rdlong	arg01, fp
1218c     80 CB BF FD | 	call	#_convertstring
12190     FD 20 02 F6 | 	mov	local02, result1
12194     0C 4E 05 F1 | 	add	fp, #12
12198     A7 12 02 FB | 	rdlong	arg01, fp
1219c     0C 4E 85 F1 | 	sub	fp, #12
121a0     6C CB BF FD | 	call	#_convertstring
121a4     FD 14 02 F6 | 	mov	arg02, result1
121a8     10 13 02 F6 | 	mov	arg01, local02
121ac     44 CC B0 FD | 	call	#__system___string_cmp
121b0     01 FA 55 F2 | 	cmps	result1, #1 wc
121b4     00 1E 26 36 |  if_ae	not	local01, #0
121b8     A7 1E 62 FC | 	wrlong	local01, fp
121bc     04 00 90 FD | 	jmp	#LR__1443
121c0                 | LR__1442
121c0     A7 00 68 FC | 	wrlong	#0, fp
121c4                 | LR__1443
121c4     08 4E 05 F1 | 	add	fp, #8
121c8     A7 38 68 FC | 	wrlong	#28, fp
121cc     08 4E 85 F1 | 	sub	fp, #8
121d0     A7 12 02 F6 | 	mov	arg01, fp
121d4     58 87 BF FD | 	call	#_push
121d8     A7 F0 03 F6 | 	mov	ptra, fp
121dc     B2 00 A0 FD | 	call	#popregs_
121e0                 | _do_gt_ret
121e0     2D 00 64 FD | 	ret
121e4                 | 
121e4                 | ' 
121e4                 | ' sub do_lt
121e4                 | _do_lt
121e4     05 4A 05 F6 | 	mov	COUNT_, #5
121e8     A8 00 A0 FD | 	call	#pushregs_
121ec     18 F0 07 F1 | 	add	ptra, #24
121f0     A4 86 BF FD | 	call	#_pop
121f4     FD 1E 02 F6 | 	mov	local01, result1
121f8     FE 20 02 F6 | 	mov	local02, result2
121fc     FF 22 02 F6 | 	mov	local03, result3
12200     0C 4E 05 F1 | 	add	fp, #12
12204     A7 1E 62 FC | 	wrlong	local01, fp
12208     04 4E 05 F1 | 	add	fp, #4
1220c     A7 20 62 FC | 	wrlong	local02, fp
12210     04 4E 05 F1 | 	add	fp, #4
12214     A7 22 62 FC | 	wrlong	local03, fp
12218     14 4E 85 F1 | 	sub	fp, #20
1221c     78 86 BF FD | 	call	#_pop
12220     FF 22 02 F6 | 	mov	local03, result3
12224     A7 FA 61 FC | 	wrlong	result1, fp
12228     04 4E 05 F1 | 	add	fp, #4
1222c     A7 FC 61 FC | 	wrlong	result2, fp
12230     04 4E 05 F1 | 	add	fp, #4
12234     A7 22 62 FC | 	wrlong	local03, fp
12238                 | ' t2=pop()
12238                 | ' t1=pop()
12238                 | ' 
12238                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
12238     08 4E 85 F1 | 	sub	fp, #8
1223c     1F 22 0E F2 | 	cmp	local03, #31 wz
12240     14 4E 05 A1 |  if_e	add	fp, #20
12244     A7 24 02 AB |  if_e	rdlong	local04, fp
12248     14 4E 85 A1 |  if_e	sub	fp, #20
1224c     12 23 02 A6 |  if_e	mov	local03, local04
12250     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12254     28 00 90 5D |  if_ne	jmp	#LR__1450
12258     00 1E 06 F6 | 	mov	local01, #0
1225c     A7 12 02 FB | 	rdlong	arg01, fp
12260     0C 4E 05 F1 | 	add	fp, #12
12264     A7 14 02 FB | 	rdlong	arg02, fp
12268     0C 4E 85 F1 | 	sub	fp, #12
1226c     84 CB B0 FD | 	call	#__system___string_cmp
12270     00 FA 55 F2 | 	cmps	result1, #0 wc
12274     00 1E 26 C6 |  if_b	not	local01, #0
12278     A7 1E 62 FC | 	wrlong	local01, fp
1227c     0C 04 90 FD | 	jmp	#LR__1463
12280                 | LR__1450
12280                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
12280     08 4E 05 F1 | 	add	fp, #8
12284     A7 1E 02 FB | 	rdlong	local01, fp
12288     08 4E 85 F1 | 	sub	fp, #8
1228c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12290     14 4E 05 A1 |  if_e	add	fp, #20
12294     A7 24 02 AB |  if_e	rdlong	local04, fp
12298     14 4E 85 A1 |  if_e	sub	fp, #20
1229c     12 23 02 A6 |  if_e	mov	local03, local04
122a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
122a4     2C 00 90 5D |  if_ne	jmp	#LR__1451
122a8     00 1E 06 F6 | 	mov	local01, #0
122ac     A7 12 02 FB | 	rdlong	arg01, fp
122b0     0C 4E 05 F1 | 	add	fp, #12
122b4     A7 14 02 FB | 	rdlong	arg02, fp
122b8     0C 4E 85 F1 | 	sub	fp, #12
122bc     01 16 06 F6 | 	mov	arg03, #1
122c0     84 FA B0 FD | 	call	#__system___float_cmp
122c4     00 FA 55 F2 | 	cmps	result1, #0 wc
122c8     00 1E 26 C6 |  if_b	not	local01, #0
122cc     A7 1E 62 FC | 	wrlong	local01, fp
122d0     B8 03 90 FD | 	jmp	#LR__1463
122d4                 | LR__1451
122d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
122d4     08 4E 05 F1 | 	add	fp, #8
122d8     A7 1E 02 FB | 	rdlong	local01, fp
122dc     08 4E 85 F1 | 	sub	fp, #8
122e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
122e4     14 4E 05 A1 |  if_e	add	fp, #20
122e8     A7 24 02 AB |  if_e	rdlong	local04, fp
122ec     14 4E 85 A1 |  if_e	sub	fp, #20
122f0     12 23 02 A6 |  if_e	mov	local03, local04
122f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
122f8     48 00 90 5D |  if_ne	jmp	#LR__1452
122fc     00 1E 06 F6 | 	mov	local01, #0
12300     A7 20 02 FB | 	rdlong	local02, fp
12304     0C 4E 05 F1 | 	add	fp, #12
12308     A7 12 02 FB | 	rdlong	arg01, fp
1230c     0C 4E 85 F1 | 	sub	fp, #12
12310     09 13 52 F6 | 	abs	arg01, arg01 wc
12314     1F 26 C6 C9 |  if_b	decod	local05, #31
12318     00 26 06 36 |  if_ae	mov	local05, #0
1231c     F0 F1 B0 FD | 	call	#__system___float_fromuns
12320     13 FB 61 F5 | 	xor	result1, local05
12324     FD 14 02 F6 | 	mov	arg02, result1
12328     10 13 02 F6 | 	mov	arg01, local02
1232c     01 16 06 F6 | 	mov	arg03, #1
12330     14 FA B0 FD | 	call	#__system___float_cmp
12334     00 FA 55 F2 | 	cmps	result1, #0 wc
12338     00 1E 26 C6 |  if_b	not	local01, #0
1233c     A7 1E 62 FC | 	wrlong	local01, fp
12340     48 03 90 FD | 	jmp	#LR__1463
12344                 | LR__1452
12344                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
12344     08 4E 05 F1 | 	add	fp, #8
12348     A7 1E 02 FB | 	rdlong	local01, fp
1234c     08 4E 85 F1 | 	sub	fp, #8
12350     1E 1E 0E F2 | 	cmp	local01, #30 wz
12354     14 4E 05 A1 |  if_e	add	fp, #20
12358     A7 24 02 AB |  if_e	rdlong	local04, fp
1235c     14 4E 85 A1 |  if_e	sub	fp, #20
12360     12 23 02 A6 |  if_e	mov	local03, local04
12364     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12368     38 00 90 5D |  if_ne	jmp	#LR__1453
1236c     00 1E 06 F6 | 	mov	local01, #0
12370     A7 20 02 FB | 	rdlong	local02, fp
12374     0C 4E 05 F1 | 	add	fp, #12
12378     A7 12 02 FB | 	rdlong	arg01, fp
1237c     0C 4E 85 F1 | 	sub	fp, #12
12380     8C F1 B0 FD | 	call	#__system___float_fromuns
12384     FD 14 02 F6 | 	mov	arg02, result1
12388     10 13 02 F6 | 	mov	arg01, local02
1238c     01 16 06 F6 | 	mov	arg03, #1
12390     B4 F9 B0 FD | 	call	#__system___float_cmp
12394     00 FA 55 F2 | 	cmps	result1, #0 wc
12398     00 1E 26 C6 |  if_b	not	local01, #0
1239c     A7 1E 62 FC | 	wrlong	local01, fp
123a0     E8 02 90 FD | 	jmp	#LR__1463
123a4                 | LR__1453
123a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
123a4     08 4E 05 F1 | 	add	fp, #8
123a8     A7 1E 02 FB | 	rdlong	local01, fp
123ac     08 4E 85 F1 | 	sub	fp, #8
123b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
123b4     14 4E 05 A1 |  if_e	add	fp, #20
123b8     A7 24 02 AB |  if_e	rdlong	local04, fp
123bc     14 4E 85 A1 |  if_e	sub	fp, #20
123c0     12 23 02 A6 |  if_e	mov	local03, local04
123c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
123c8     44 00 90 5D |  if_ne	jmp	#LR__1454
123cc     00 1E 06 F6 | 	mov	local01, #0
123d0     A7 12 02 FB | 	rdlong	arg01, fp
123d4     09 13 52 F6 | 	abs	arg01, arg01 wc
123d8     1F 26 C6 C9 |  if_b	decod	local05, #31
123dc     00 26 06 36 |  if_ae	mov	local05, #0
123e0     2C F1 B0 FD | 	call	#__system___float_fromuns
123e4     13 FB 61 F5 | 	xor	result1, local05
123e8     FD 12 02 F6 | 	mov	arg01, result1
123ec     0C 4E 05 F1 | 	add	fp, #12
123f0     A7 14 02 FB | 	rdlong	arg02, fp
123f4     0C 4E 85 F1 | 	sub	fp, #12
123f8     01 16 06 F6 | 	mov	arg03, #1
123fc     48 F9 B0 FD | 	call	#__system___float_cmp
12400     00 FA 55 F2 | 	cmps	result1, #0 wc
12404     00 1E 26 C6 |  if_b	not	local01, #0
12408     A7 1E 62 FC | 	wrlong	local01, fp
1240c     7C 02 90 FD | 	jmp	#LR__1463
12410                 | LR__1454
12410                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
12410     08 4E 05 F1 | 	add	fp, #8
12414     A7 1E 02 FB | 	rdlong	local01, fp
12418     08 4E 85 F1 | 	sub	fp, #8
1241c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12420     14 4E 05 A1 |  if_e	add	fp, #20
12424     A7 24 02 AB |  if_e	rdlong	local04, fp
12428     14 4E 85 A1 |  if_e	sub	fp, #20
1242c     12 23 02 A6 |  if_e	mov	local03, local04
12430     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12434     20 00 90 5D |  if_ne	jmp	#LR__1455
12438     A7 20 02 FB | 	rdlong	local02, fp
1243c     0C 4E 05 F1 | 	add	fp, #12
12440     A7 22 02 FB | 	rdlong	local03, fp
12444     0C 4E 85 F1 | 	sub	fp, #12
12448     11 21 52 F2 | 	cmps	local02, local03 wc
1244c     0F 1F A2 F1 | 	subx	local01, local01
12450     A7 1E 62 FC | 	wrlong	local01, fp
12454     34 02 90 FD | 	jmp	#LR__1463
12458                 | LR__1455
12458                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
12458     08 4E 05 F1 | 	add	fp, #8
1245c     A7 1E 02 FB | 	rdlong	local01, fp
12460     08 4E 85 F1 | 	sub	fp, #8
12464     1C 1E 0E F2 | 	cmp	local01, #28 wz
12468     14 4E 05 A1 |  if_e	add	fp, #20
1246c     A7 24 02 AB |  if_e	rdlong	local04, fp
12470     14 4E 85 A1 |  if_e	sub	fp, #20
12474     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12478     20 00 90 5D |  if_ne	jmp	#LR__1456
1247c     A7 20 02 FB | 	rdlong	local02, fp
12480     0C 4E 05 F1 | 	add	fp, #12
12484     A7 22 02 FB | 	rdlong	local03, fp
12488     0C 4E 85 F1 | 	sub	fp, #12
1248c     11 21 52 F2 | 	cmps	local02, local03 wc
12490     0F 1F A2 F1 | 	subx	local01, local01
12494     A7 1E 62 FC | 	wrlong	local01, fp
12498     F0 01 90 FD | 	jmp	#LR__1463
1249c                 | LR__1456
1249c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1249c     08 4E 05 F1 | 	add	fp, #8
124a0     A7 1E 02 FB | 	rdlong	local01, fp
124a4     08 4E 85 F1 | 	sub	fp, #8
124a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
124ac     14 4E 05 A1 |  if_e	add	fp, #20
124b0     A7 22 02 AB |  if_e	rdlong	local03, fp
124b4     14 4E 85 A1 |  if_e	sub	fp, #20
124b8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
124bc     34 00 90 5D |  if_ne	jmp	#LR__1457
124c0     00 1E 06 F6 | 	mov	local01, #0
124c4     A7 12 02 FB | 	rdlong	arg01, fp
124c8     44 F0 B0 FD | 	call	#__system___float_fromuns
124cc     FD 12 02 F6 | 	mov	arg01, result1
124d0     0C 4E 05 F1 | 	add	fp, #12
124d4     A7 14 02 FB | 	rdlong	arg02, fp
124d8     0C 4E 85 F1 | 	sub	fp, #12
124dc     01 16 06 F6 | 	mov	arg03, #1
124e0     64 F8 B0 FD | 	call	#__system___float_cmp
124e4     00 FA 55 F2 | 	cmps	result1, #0 wc
124e8     00 1E 26 C6 |  if_b	not	local01, #0
124ec     A7 1E 62 FC | 	wrlong	local01, fp
124f0     98 01 90 FD | 	jmp	#LR__1463
124f4                 | LR__1457
124f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
124f4     08 4E 05 F1 | 	add	fp, #8
124f8     A7 1E 02 FB | 	rdlong	local01, fp
124fc     08 4E 85 F1 | 	sub	fp, #8
12500     1D 1E 0E F2 | 	cmp	local01, #29 wz
12504     14 4E 05 A1 |  if_e	add	fp, #20
12508     A7 22 02 AB |  if_e	rdlong	local03, fp
1250c     14 4E 85 A1 |  if_e	sub	fp, #20
12510     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12514     20 00 90 5D |  if_ne	jmp	#LR__1458
12518     A7 20 02 FB | 	rdlong	local02, fp
1251c     0C 4E 05 F1 | 	add	fp, #12
12520     A7 22 02 FB | 	rdlong	local03, fp
12524     0C 4E 85 F1 | 	sub	fp, #12
12528     11 21 52 F2 | 	cmps	local02, local03 wc
1252c     0F 1F A2 F1 | 	subx	local01, local01
12530     A7 1E 62 FC | 	wrlong	local01, fp
12534     54 01 90 FD | 	jmp	#LR__1463
12538                 | LR__1458
12538                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
12538     08 4E 05 F1 | 	add	fp, #8
1253c     A7 1E 02 FB | 	rdlong	local01, fp
12540     08 4E 85 F1 | 	sub	fp, #8
12544     1D 1E 0E F2 | 	cmp	local01, #29 wz
12548     14 4E 05 A1 |  if_e	add	fp, #20
1254c     A7 22 02 AB |  if_e	rdlong	local03, fp
12550     14 4E 85 A1 |  if_e	sub	fp, #20
12554     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12558     20 00 90 5D |  if_ne	jmp	#LR__1459
1255c     A7 20 02 FB | 	rdlong	local02, fp
12560     0C 4E 05 F1 | 	add	fp, #12
12564     A7 22 02 FB | 	rdlong	local03, fp
12568     0C 4E 85 F1 | 	sub	fp, #12
1256c     11 21 12 F2 | 	cmp	local02, local03 wc
12570     0F 1F A2 F1 | 	subx	local01, local01
12574     A7 1E 62 FC | 	wrlong	local01, fp
12578     10 01 90 FD | 	jmp	#LR__1463
1257c                 | LR__1459
1257c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1257c     08 4E 05 F1 | 	add	fp, #8
12580     A7 1E 02 FB | 	rdlong	local01, fp
12584     08 4E 85 F1 | 	sub	fp, #8
12588     2B 1E 0E F2 | 	cmp	local01, #43 wz
1258c     14 4E 05 A1 |  if_e	add	fp, #20
12590     A7 22 02 AB |  if_e	rdlong	local03, fp
12594     14 4E 85 A1 |  if_e	sub	fp, #20
12598     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1259c     30 00 90 5D |  if_ne	jmp	#LR__1460
125a0     00 1E 06 F6 | 	mov	local01, #0
125a4     A7 12 02 FB | 	rdlong	arg01, fp
125a8     64 C7 BF FD | 	call	#_convertstring
125ac     FD 12 02 F6 | 	mov	arg01, result1
125b0     0C 4E 05 F1 | 	add	fp, #12
125b4     A7 14 02 FB | 	rdlong	arg02, fp
125b8     0C 4E 85 F1 | 	sub	fp, #12
125bc     34 C8 B0 FD | 	call	#__system___string_cmp
125c0     00 FA 55 F2 | 	cmps	result1, #0 wc
125c4     00 1E 26 C6 |  if_b	not	local01, #0
125c8     A7 1E 62 FC | 	wrlong	local01, fp
125cc     BC 00 90 FD | 	jmp	#LR__1463
125d0                 | LR__1460
125d0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
125d0     08 4E 05 F1 | 	add	fp, #8
125d4     A7 1E 02 FB | 	rdlong	local01, fp
125d8     08 4E 85 F1 | 	sub	fp, #8
125dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
125e0     14 4E 05 A1 |  if_e	add	fp, #20
125e4     A7 22 02 AB |  if_e	rdlong	local03, fp
125e8     14 4E 85 A1 |  if_e	sub	fp, #20
125ec     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
125f0     34 00 90 5D |  if_ne	jmp	#LR__1461
125f4     00 1E 06 F6 | 	mov	local01, #0
125f8     A7 20 02 FB | 	rdlong	local02, fp
125fc     0C 4E 05 F1 | 	add	fp, #12
12600     A7 12 02 FB | 	rdlong	arg01, fp
12604     0C 4E 85 F1 | 	sub	fp, #12
12608     04 C7 BF FD | 	call	#_convertstring
1260c     FD 14 02 F6 | 	mov	arg02, result1
12610     10 13 02 F6 | 	mov	arg01, local02
12614     DC C7 B0 FD | 	call	#__system___string_cmp
12618     00 FA 55 F2 | 	cmps	result1, #0 wc
1261c     00 1E 26 C6 |  if_b	not	local01, #0
12620     A7 1E 62 FC | 	wrlong	local01, fp
12624     64 00 90 FD | 	jmp	#LR__1463
12628                 | LR__1461
12628                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
12628     08 4E 05 F1 | 	add	fp, #8
1262c     A7 1E 02 FB | 	rdlong	local01, fp
12630     08 4E 85 F1 | 	sub	fp, #8
12634     2B 1E 0E F2 | 	cmp	local01, #43 wz
12638     14 4E 05 A1 |  if_e	add	fp, #20
1263c     A7 22 02 AB |  if_e	rdlong	local03, fp
12640     14 4E 85 A1 |  if_e	sub	fp, #20
12644     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12648     3C 00 90 5D |  if_ne	jmp	#LR__1462
1264c     00 1E 06 F6 | 	mov	local01, #0
12650     A7 12 02 FB | 	rdlong	arg01, fp
12654     B8 C6 BF FD | 	call	#_convertstring
12658     FD 20 02 F6 | 	mov	local02, result1
1265c     0C 4E 05 F1 | 	add	fp, #12
12660     A7 12 02 FB | 	rdlong	arg01, fp
12664     0C 4E 85 F1 | 	sub	fp, #12
12668     A4 C6 BF FD | 	call	#_convertstring
1266c     FD 14 02 F6 | 	mov	arg02, result1
12670     10 13 02 F6 | 	mov	arg01, local02
12674     7C C7 B0 FD | 	call	#__system___string_cmp
12678     00 FA 55 F2 | 	cmps	result1, #0 wc
1267c     00 1E 26 C6 |  if_b	not	local01, #0
12680     A7 1E 62 FC | 	wrlong	local01, fp
12684     04 00 90 FD | 	jmp	#LR__1463
12688                 | LR__1462
12688     A7 00 68 FC | 	wrlong	#0, fp
1268c                 | LR__1463
1268c     08 4E 05 F1 | 	add	fp, #8
12690     A7 38 68 FC | 	wrlong	#28, fp
12694     08 4E 85 F1 | 	sub	fp, #8
12698     A7 12 02 F6 | 	mov	arg01, fp
1269c     90 82 BF FD | 	call	#_push
126a0     A7 F0 03 F6 | 	mov	ptra, fp
126a4     B2 00 A0 FD | 	call	#popregs_
126a8                 | _do_lt_ret
126a8     2D 00 64 FD | 	ret
126ac                 | 
126ac                 | ' 
126ac                 | ' sub do_ge
126ac                 | _do_ge
126ac     05 4A 05 F6 | 	mov	COUNT_, #5
126b0     A8 00 A0 FD | 	call	#pushregs_
126b4     18 F0 07 F1 | 	add	ptra, #24
126b8     DC 81 BF FD | 	call	#_pop
126bc     FD 1E 02 F6 | 	mov	local01, result1
126c0     FE 20 02 F6 | 	mov	local02, result2
126c4     FF 22 02 F6 | 	mov	local03, result3
126c8     0C 4E 05 F1 | 	add	fp, #12
126cc     A7 1E 62 FC | 	wrlong	local01, fp
126d0     04 4E 05 F1 | 	add	fp, #4
126d4     A7 20 62 FC | 	wrlong	local02, fp
126d8     04 4E 05 F1 | 	add	fp, #4
126dc     A7 22 62 FC | 	wrlong	local03, fp
126e0     14 4E 85 F1 | 	sub	fp, #20
126e4     B0 81 BF FD | 	call	#_pop
126e8     FF 22 02 F6 | 	mov	local03, result3
126ec     A7 FA 61 FC | 	wrlong	result1, fp
126f0     04 4E 05 F1 | 	add	fp, #4
126f4     A7 FC 61 FC | 	wrlong	result2, fp
126f8     04 4E 05 F1 | 	add	fp, #4
126fc     A7 22 62 FC | 	wrlong	local03, fp
12700                 | ' t2=pop()
12700                 | ' t1=pop()
12700                 | ' 
12700                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
12700     08 4E 85 F1 | 	sub	fp, #8
12704     1F 22 0E F2 | 	cmp	local03, #31 wz
12708     14 4E 05 A1 |  if_e	add	fp, #20
1270c     A7 24 02 AB |  if_e	rdlong	local04, fp
12710     14 4E 85 A1 |  if_e	sub	fp, #20
12714     12 23 02 A6 |  if_e	mov	local03, local04
12718     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1271c     28 00 90 5D |  if_ne	jmp	#LR__1470
12720     00 1E 06 F6 | 	mov	local01, #0
12724     A7 12 02 FB | 	rdlong	arg01, fp
12728     0C 4E 05 F1 | 	add	fp, #12
1272c     A7 14 02 FB | 	rdlong	arg02, fp
12730     0C 4E 85 F1 | 	sub	fp, #12
12734     BC C6 B0 FD | 	call	#__system___string_cmp
12738     00 FA 55 F2 | 	cmps	result1, #0 wc
1273c     00 1E 26 36 |  if_ae	not	local01, #0
12740     A7 1E 62 FC | 	wrlong	local01, fp
12744     1C 04 90 FD | 	jmp	#LR__1483
12748                 | LR__1470
12748                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
12748     08 4E 05 F1 | 	add	fp, #8
1274c     A7 1E 02 FB | 	rdlong	local01, fp
12750     08 4E 85 F1 | 	sub	fp, #8
12754     1E 1E 0E F2 | 	cmp	local01, #30 wz
12758     14 4E 05 A1 |  if_e	add	fp, #20
1275c     A7 24 02 AB |  if_e	rdlong	local04, fp
12760     14 4E 85 A1 |  if_e	sub	fp, #20
12764     12 23 02 A6 |  if_e	mov	local03, local04
12768     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1276c     2C 00 90 5D |  if_ne	jmp	#LR__1471
12770     00 1E 06 F6 | 	mov	local01, #0
12774     A7 12 02 FB | 	rdlong	arg01, fp
12778     0C 4E 05 F1 | 	add	fp, #12
1277c     A7 14 02 FB | 	rdlong	arg02, fp
12780     0C 4E 85 F1 | 	sub	fp, #12
12784     01 16 66 F6 | 	neg	arg03, #1
12788     BC F5 B0 FD | 	call	#__system___float_cmp
1278c     00 FA 55 F2 | 	cmps	result1, #0 wc
12790     00 1E 26 36 |  if_ae	not	local01, #0
12794     A7 1E 62 FC | 	wrlong	local01, fp
12798     C8 03 90 FD | 	jmp	#LR__1483
1279c                 | LR__1471
1279c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1279c     08 4E 05 F1 | 	add	fp, #8
127a0     A7 1E 02 FB | 	rdlong	local01, fp
127a4     08 4E 85 F1 | 	sub	fp, #8
127a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
127ac     14 4E 05 A1 |  if_e	add	fp, #20
127b0     A7 24 02 AB |  if_e	rdlong	local04, fp
127b4     14 4E 85 A1 |  if_e	sub	fp, #20
127b8     12 23 02 A6 |  if_e	mov	local03, local04
127bc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
127c0     48 00 90 5D |  if_ne	jmp	#LR__1472
127c4     00 1E 06 F6 | 	mov	local01, #0
127c8     A7 20 02 FB | 	rdlong	local02, fp
127cc     0C 4E 05 F1 | 	add	fp, #12
127d0     A7 12 02 FB | 	rdlong	arg01, fp
127d4     0C 4E 85 F1 | 	sub	fp, #12
127d8     09 13 52 F6 | 	abs	arg01, arg01 wc
127dc     1F 26 C6 C9 |  if_b	decod	local05, #31
127e0     00 26 06 36 |  if_ae	mov	local05, #0
127e4     28 ED B0 FD | 	call	#__system___float_fromuns
127e8     13 FB 61 F5 | 	xor	result1, local05
127ec     FD 14 02 F6 | 	mov	arg02, result1
127f0     10 13 02 F6 | 	mov	arg01, local02
127f4     01 16 66 F6 | 	neg	arg03, #1
127f8     4C F5 B0 FD | 	call	#__system___float_cmp
127fc     00 FA 55 F2 | 	cmps	result1, #0 wc
12800     00 1E 26 36 |  if_ae	not	local01, #0
12804     A7 1E 62 FC | 	wrlong	local01, fp
12808     58 03 90 FD | 	jmp	#LR__1483
1280c                 | LR__1472
1280c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1280c     08 4E 05 F1 | 	add	fp, #8
12810     A7 1E 02 FB | 	rdlong	local01, fp
12814     08 4E 85 F1 | 	sub	fp, #8
12818     1E 1E 0E F2 | 	cmp	local01, #30 wz
1281c     14 4E 05 A1 |  if_e	add	fp, #20
12820     A7 24 02 AB |  if_e	rdlong	local04, fp
12824     14 4E 85 A1 |  if_e	sub	fp, #20
12828     12 23 02 A6 |  if_e	mov	local03, local04
1282c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12830     38 00 90 5D |  if_ne	jmp	#LR__1473
12834     00 1E 06 F6 | 	mov	local01, #0
12838     A7 20 02 FB | 	rdlong	local02, fp
1283c     0C 4E 05 F1 | 	add	fp, #12
12840     A7 12 02 FB | 	rdlong	arg01, fp
12844     0C 4E 85 F1 | 	sub	fp, #12
12848     C4 EC B0 FD | 	call	#__system___float_fromuns
1284c     FD 14 02 F6 | 	mov	arg02, result1
12850     10 13 02 F6 | 	mov	arg01, local02
12854     01 16 66 F6 | 	neg	arg03, #1
12858     EC F4 B0 FD | 	call	#__system___float_cmp
1285c     00 FA 55 F2 | 	cmps	result1, #0 wc
12860     00 1E 26 36 |  if_ae	not	local01, #0
12864     A7 1E 62 FC | 	wrlong	local01, fp
12868     F8 02 90 FD | 	jmp	#LR__1483
1286c                 | LR__1473
1286c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1286c     08 4E 05 F1 | 	add	fp, #8
12870     A7 1E 02 FB | 	rdlong	local01, fp
12874     08 4E 85 F1 | 	sub	fp, #8
12878     1C 1E 0E F2 | 	cmp	local01, #28 wz
1287c     14 4E 05 A1 |  if_e	add	fp, #20
12880     A7 24 02 AB |  if_e	rdlong	local04, fp
12884     14 4E 85 A1 |  if_e	sub	fp, #20
12888     12 23 02 A6 |  if_e	mov	local03, local04
1288c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12890     44 00 90 5D |  if_ne	jmp	#LR__1474
12894     00 1E 06 F6 | 	mov	local01, #0
12898     A7 12 02 FB | 	rdlong	arg01, fp
1289c     09 13 52 F6 | 	abs	arg01, arg01 wc
128a0     1F 26 C6 C9 |  if_b	decod	local05, #31
128a4     00 26 06 36 |  if_ae	mov	local05, #0
128a8     64 EC B0 FD | 	call	#__system___float_fromuns
128ac     13 FB 61 F5 | 	xor	result1, local05
128b0     FD 12 02 F6 | 	mov	arg01, result1
128b4     0C 4E 05 F1 | 	add	fp, #12
128b8     A7 14 02 FB | 	rdlong	arg02, fp
128bc     0C 4E 85 F1 | 	sub	fp, #12
128c0     01 16 66 F6 | 	neg	arg03, #1
128c4     80 F4 B0 FD | 	call	#__system___float_cmp
128c8     00 FA 55 F2 | 	cmps	result1, #0 wc
128cc     00 1E 26 36 |  if_ae	not	local01, #0
128d0     A7 1E 62 FC | 	wrlong	local01, fp
128d4     8C 02 90 FD | 	jmp	#LR__1483
128d8                 | LR__1474
128d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
128d8     08 4E 05 F1 | 	add	fp, #8
128dc     A7 1E 02 FB | 	rdlong	local01, fp
128e0     08 4E 85 F1 | 	sub	fp, #8
128e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
128e8     14 4E 05 A1 |  if_e	add	fp, #20
128ec     A7 24 02 AB |  if_e	rdlong	local04, fp
128f0     14 4E 85 A1 |  if_e	sub	fp, #20
128f4     12 23 02 A6 |  if_e	mov	local03, local04
128f8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128fc     24 00 90 5D |  if_ne	jmp	#LR__1475
12900     00 1E 06 F6 | 	mov	local01, #0
12904     A7 20 02 FB | 	rdlong	local02, fp
12908     0C 4E 05 F1 | 	add	fp, #12
1290c     A7 22 02 FB | 	rdlong	local03, fp
12910     0C 4E 85 F1 | 	sub	fp, #12
12914     11 21 52 F2 | 	cmps	local02, local03 wc
12918     01 1E 66 36 |  if_ae	neg	local01, #1
1291c     A7 1E 62 FC | 	wrlong	local01, fp
12920     40 02 90 FD | 	jmp	#LR__1483
12924                 | LR__1475
12924                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
12924     08 4E 05 F1 | 	add	fp, #8
12928     A7 1E 02 FB | 	rdlong	local01, fp
1292c     08 4E 85 F1 | 	sub	fp, #8
12930     1C 1E 0E F2 | 	cmp	local01, #28 wz
12934     14 4E 05 A1 |  if_e	add	fp, #20
12938     A7 24 02 AB |  if_e	rdlong	local04, fp
1293c     14 4E 85 A1 |  if_e	sub	fp, #20
12940     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12944     24 00 90 5D |  if_ne	jmp	#LR__1476
12948     00 1E 06 F6 | 	mov	local01, #0
1294c     A7 20 02 FB | 	rdlong	local02, fp
12950     0C 4E 05 F1 | 	add	fp, #12
12954     A7 22 02 FB | 	rdlong	local03, fp
12958     0C 4E 85 F1 | 	sub	fp, #12
1295c     11 21 52 F2 | 	cmps	local02, local03 wc
12960     01 1E 66 36 |  if_ae	neg	local01, #1
12964     A7 1E 62 FC | 	wrlong	local01, fp
12968     F8 01 90 FD | 	jmp	#LR__1483
1296c                 | LR__1476
1296c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1296c     08 4E 05 F1 | 	add	fp, #8
12970     A7 1E 02 FB | 	rdlong	local01, fp
12974     08 4E 85 F1 | 	sub	fp, #8
12978     1D 1E 0E F2 | 	cmp	local01, #29 wz
1297c     14 4E 05 A1 |  if_e	add	fp, #20
12980     A7 22 02 AB |  if_e	rdlong	local03, fp
12984     14 4E 85 A1 |  if_e	sub	fp, #20
12988     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1298c     34 00 90 5D |  if_ne	jmp	#LR__1477
12990     00 1E 06 F6 | 	mov	local01, #0
12994     A7 12 02 FB | 	rdlong	arg01, fp
12998     74 EB B0 FD | 	call	#__system___float_fromuns
1299c     FD 12 02 F6 | 	mov	arg01, result1
129a0     0C 4E 05 F1 | 	add	fp, #12
129a4     A7 14 02 FB | 	rdlong	arg02, fp
129a8     0C 4E 85 F1 | 	sub	fp, #12
129ac     01 16 66 F6 | 	neg	arg03, #1
129b0     94 F3 B0 FD | 	call	#__system___float_cmp
129b4     00 FA 55 F2 | 	cmps	result1, #0 wc
129b8     00 1E 26 36 |  if_ae	not	local01, #0
129bc     A7 1E 62 FC | 	wrlong	local01, fp
129c0     A0 01 90 FD | 	jmp	#LR__1483
129c4                 | LR__1477
129c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
129c4     08 4E 05 F1 | 	add	fp, #8
129c8     A7 1E 02 FB | 	rdlong	local01, fp
129cc     08 4E 85 F1 | 	sub	fp, #8
129d0     1D 1E 0E F2 | 	cmp	local01, #29 wz
129d4     14 4E 05 A1 |  if_e	add	fp, #20
129d8     A7 22 02 AB |  if_e	rdlong	local03, fp
129dc     14 4E 85 A1 |  if_e	sub	fp, #20
129e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129e4     24 00 90 5D |  if_ne	jmp	#LR__1478
129e8     00 1E 06 F6 | 	mov	local01, #0
129ec     A7 20 02 FB | 	rdlong	local02, fp
129f0     0C 4E 05 F1 | 	add	fp, #12
129f4     A7 22 02 FB | 	rdlong	local03, fp
129f8     0C 4E 85 F1 | 	sub	fp, #12
129fc     11 21 52 F2 | 	cmps	local02, local03 wc
12a00     01 1E 66 36 |  if_ae	neg	local01, #1
12a04     A7 1E 62 FC | 	wrlong	local01, fp
12a08     58 01 90 FD | 	jmp	#LR__1483
12a0c                 | LR__1478
12a0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
12a0c     08 4E 05 F1 | 	add	fp, #8
12a10     A7 1E 02 FB | 	rdlong	local01, fp
12a14     08 4E 85 F1 | 	sub	fp, #8
12a18     1D 1E 0E F2 | 	cmp	local01, #29 wz
12a1c     14 4E 05 A1 |  if_e	add	fp, #20
12a20     A7 22 02 AB |  if_e	rdlong	local03, fp
12a24     14 4E 85 A1 |  if_e	sub	fp, #20
12a28     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12a2c     24 00 90 5D |  if_ne	jmp	#LR__1479
12a30     00 1E 06 F6 | 	mov	local01, #0
12a34     A7 20 02 FB | 	rdlong	local02, fp
12a38     0C 4E 05 F1 | 	add	fp, #12
12a3c     A7 22 02 FB | 	rdlong	local03, fp
12a40     0C 4E 85 F1 | 	sub	fp, #12
12a44     11 21 12 F2 | 	cmp	local02, local03 wc
12a48     01 1E 66 36 |  if_ae	neg	local01, #1
12a4c     A7 1E 62 FC | 	wrlong	local01, fp
12a50     10 01 90 FD | 	jmp	#LR__1483
12a54                 | LR__1479
12a54                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
12a54     08 4E 05 F1 | 	add	fp, #8
12a58     A7 1E 02 FB | 	rdlong	local01, fp
12a5c     08 4E 85 F1 | 	sub	fp, #8
12a60     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a64     14 4E 05 A1 |  if_e	add	fp, #20
12a68     A7 22 02 AB |  if_e	rdlong	local03, fp
12a6c     14 4E 85 A1 |  if_e	sub	fp, #20
12a70     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a74     30 00 90 5D |  if_ne	jmp	#LR__1480
12a78     00 1E 06 F6 | 	mov	local01, #0
12a7c     A7 12 02 FB | 	rdlong	arg01, fp
12a80     8C C2 BF FD | 	call	#_convertstring
12a84     FD 12 02 F6 | 	mov	arg01, result1
12a88     0C 4E 05 F1 | 	add	fp, #12
12a8c     A7 14 02 FB | 	rdlong	arg02, fp
12a90     0C 4E 85 F1 | 	sub	fp, #12
12a94     5C C3 B0 FD | 	call	#__system___string_cmp
12a98     00 FA 55 F2 | 	cmps	result1, #0 wc
12a9c     00 1E 26 36 |  if_ae	not	local01, #0
12aa0     A7 1E 62 FC | 	wrlong	local01, fp
12aa4     BC 00 90 FD | 	jmp	#LR__1483
12aa8                 | LR__1480
12aa8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
12aa8     08 4E 05 F1 | 	add	fp, #8
12aac     A7 1E 02 FB | 	rdlong	local01, fp
12ab0     08 4E 85 F1 | 	sub	fp, #8
12ab4     1F 1E 0E F2 | 	cmp	local01, #31 wz
12ab8     14 4E 05 A1 |  if_e	add	fp, #20
12abc     A7 22 02 AB |  if_e	rdlong	local03, fp
12ac0     14 4E 85 A1 |  if_e	sub	fp, #20
12ac4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12ac8     34 00 90 5D |  if_ne	jmp	#LR__1481
12acc     00 1E 06 F6 | 	mov	local01, #0
12ad0     A7 20 02 FB | 	rdlong	local02, fp
12ad4     0C 4E 05 F1 | 	add	fp, #12
12ad8     A7 12 02 FB | 	rdlong	arg01, fp
12adc     0C 4E 85 F1 | 	sub	fp, #12
12ae0     2C C2 BF FD | 	call	#_convertstring
12ae4     FD 14 02 F6 | 	mov	arg02, result1
12ae8     10 13 02 F6 | 	mov	arg01, local02
12aec     04 C3 B0 FD | 	call	#__system___string_cmp
12af0     00 FA 55 F2 | 	cmps	result1, #0 wc
12af4     00 1E 26 36 |  if_ae	not	local01, #0
12af8     A7 1E 62 FC | 	wrlong	local01, fp
12afc     64 00 90 FD | 	jmp	#LR__1483
12b00                 | LR__1481
12b00                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
12b00     08 4E 05 F1 | 	add	fp, #8
12b04     A7 1E 02 FB | 	rdlong	local01, fp
12b08     08 4E 85 F1 | 	sub	fp, #8
12b0c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12b10     14 4E 05 A1 |  if_e	add	fp, #20
12b14     A7 22 02 AB |  if_e	rdlong	local03, fp
12b18     14 4E 85 A1 |  if_e	sub	fp, #20
12b1c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12b20     3C 00 90 5D |  if_ne	jmp	#LR__1482
12b24     00 1E 06 F6 | 	mov	local01, #0
12b28     A7 12 02 FB | 	rdlong	arg01, fp
12b2c     E0 C1 BF FD | 	call	#_convertstring
12b30     FD 20 02 F6 | 	mov	local02, result1
12b34     0C 4E 05 F1 | 	add	fp, #12
12b38     A7 12 02 FB | 	rdlong	arg01, fp
12b3c     0C 4E 85 F1 | 	sub	fp, #12
12b40     CC C1 BF FD | 	call	#_convertstring
12b44     FD 14 02 F6 | 	mov	arg02, result1
12b48     10 13 02 F6 | 	mov	arg01, local02
12b4c     A4 C2 B0 FD | 	call	#__system___string_cmp
12b50     00 FA 55 F2 | 	cmps	result1, #0 wc
12b54     00 1E 26 36 |  if_ae	not	local01, #0
12b58     A7 1E 62 FC | 	wrlong	local01, fp
12b5c     04 00 90 FD | 	jmp	#LR__1483
12b60                 | LR__1482
12b60     A7 00 68 FC | 	wrlong	#0, fp
12b64                 | LR__1483
12b64     08 4E 05 F1 | 	add	fp, #8
12b68     A7 38 68 FC | 	wrlong	#28, fp
12b6c     08 4E 85 F1 | 	sub	fp, #8
12b70     A7 12 02 F6 | 	mov	arg01, fp
12b74     B8 7D BF FD | 	call	#_push
12b78     A7 F0 03 F6 | 	mov	ptra, fp
12b7c     B2 00 A0 FD | 	call	#popregs_
12b80                 | _do_ge_ret
12b80     2D 00 64 FD | 	ret
12b84                 | 
12b84                 | ' 
12b84                 | ' sub do_le
12b84                 | _do_le
12b84     05 4A 05 F6 | 	mov	COUNT_, #5
12b88     A8 00 A0 FD | 	call	#pushregs_
12b8c     18 F0 07 F1 | 	add	ptra, #24
12b90     04 7D BF FD | 	call	#_pop
12b94     FD 1E 02 F6 | 	mov	local01, result1
12b98     FE 20 02 F6 | 	mov	local02, result2
12b9c     FF 22 02 F6 | 	mov	local03, result3
12ba0     0C 4E 05 F1 | 	add	fp, #12
12ba4     A7 1E 62 FC | 	wrlong	local01, fp
12ba8     04 4E 05 F1 | 	add	fp, #4
12bac     A7 20 62 FC | 	wrlong	local02, fp
12bb0     04 4E 05 F1 | 	add	fp, #4
12bb4     A7 22 62 FC | 	wrlong	local03, fp
12bb8     14 4E 85 F1 | 	sub	fp, #20
12bbc     D8 7C BF FD | 	call	#_pop
12bc0     FF 22 02 F6 | 	mov	local03, result3
12bc4     A7 FA 61 FC | 	wrlong	result1, fp
12bc8     04 4E 05 F1 | 	add	fp, #4
12bcc     A7 FC 61 FC | 	wrlong	result2, fp
12bd0     04 4E 05 F1 | 	add	fp, #4
12bd4     A7 22 62 FC | 	wrlong	local03, fp
12bd8                 | ' t2=pop()
12bd8                 | ' t1=pop()
12bd8                 | ' 
12bd8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
12bd8     08 4E 85 F1 | 	sub	fp, #8
12bdc     1F 22 0E F2 | 	cmp	local03, #31 wz
12be0     14 4E 05 A1 |  if_e	add	fp, #20
12be4     A7 24 02 AB |  if_e	rdlong	local04, fp
12be8     14 4E 85 A1 |  if_e	sub	fp, #20
12bec     12 23 02 A6 |  if_e	mov	local03, local04
12bf0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12bf4     28 00 90 5D |  if_ne	jmp	#LR__1490
12bf8     00 1E 06 F6 | 	mov	local01, #0
12bfc     A7 12 02 FB | 	rdlong	arg01, fp
12c00     0C 4E 05 F1 | 	add	fp, #12
12c04     A7 14 02 FB | 	rdlong	arg02, fp
12c08     0C 4E 85 F1 | 	sub	fp, #12
12c0c     E4 C1 B0 FD | 	call	#__system___string_cmp
12c10     01 FA 55 F2 | 	cmps	result1, #1 wc
12c14     00 1E 26 C6 |  if_b	not	local01, #0
12c18     A7 1E 62 FC | 	wrlong	local01, fp
12c1c     1C 04 90 FD | 	jmp	#LR__1503
12c20                 | LR__1490
12c20                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
12c20     08 4E 05 F1 | 	add	fp, #8
12c24     A7 1E 02 FB | 	rdlong	local01, fp
12c28     08 4E 85 F1 | 	sub	fp, #8
12c2c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c30     14 4E 05 A1 |  if_e	add	fp, #20
12c34     A7 24 02 AB |  if_e	rdlong	local04, fp
12c38     14 4E 85 A1 |  if_e	sub	fp, #20
12c3c     12 23 02 A6 |  if_e	mov	local03, local04
12c40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c44     2C 00 90 5D |  if_ne	jmp	#LR__1491
12c48     00 1E 06 F6 | 	mov	local01, #0
12c4c     A7 12 02 FB | 	rdlong	arg01, fp
12c50     0C 4E 05 F1 | 	add	fp, #12
12c54     A7 14 02 FB | 	rdlong	arg02, fp
12c58     0C 4E 85 F1 | 	sub	fp, #12
12c5c     01 16 06 F6 | 	mov	arg03, #1
12c60     E4 F0 B0 FD | 	call	#__system___float_cmp
12c64     01 FA 55 F2 | 	cmps	result1, #1 wc
12c68     00 1E 26 C6 |  if_b	not	local01, #0
12c6c     A7 1E 62 FC | 	wrlong	local01, fp
12c70     C8 03 90 FD | 	jmp	#LR__1503
12c74                 | LR__1491
12c74                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
12c74     08 4E 05 F1 | 	add	fp, #8
12c78     A7 1E 02 FB | 	rdlong	local01, fp
12c7c     08 4E 85 F1 | 	sub	fp, #8
12c80     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c84     14 4E 05 A1 |  if_e	add	fp, #20
12c88     A7 24 02 AB |  if_e	rdlong	local04, fp
12c8c     14 4E 85 A1 |  if_e	sub	fp, #20
12c90     12 23 02 A6 |  if_e	mov	local03, local04
12c94     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c98     48 00 90 5D |  if_ne	jmp	#LR__1492
12c9c     00 1E 06 F6 | 	mov	local01, #0
12ca0     A7 20 02 FB | 	rdlong	local02, fp
12ca4     0C 4E 05 F1 | 	add	fp, #12
12ca8     A7 12 02 FB | 	rdlong	arg01, fp
12cac     0C 4E 85 F1 | 	sub	fp, #12
12cb0     09 13 52 F6 | 	abs	arg01, arg01 wc
12cb4     1F 26 C6 C9 |  if_b	decod	local05, #31
12cb8     00 26 06 36 |  if_ae	mov	local05, #0
12cbc     50 E8 B0 FD | 	call	#__system___float_fromuns
12cc0     13 FB 61 F5 | 	xor	result1, local05
12cc4     FD 14 02 F6 | 	mov	arg02, result1
12cc8     10 13 02 F6 | 	mov	arg01, local02
12ccc     01 16 06 F6 | 	mov	arg03, #1
12cd0     74 F0 B0 FD | 	call	#__system___float_cmp
12cd4     01 FA 55 F2 | 	cmps	result1, #1 wc
12cd8     00 1E 26 C6 |  if_b	not	local01, #0
12cdc     A7 1E 62 FC | 	wrlong	local01, fp
12ce0     58 03 90 FD | 	jmp	#LR__1503
12ce4                 | LR__1492
12ce4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12ce4     08 4E 05 F1 | 	add	fp, #8
12ce8     A7 1E 02 FB | 	rdlong	local01, fp
12cec     08 4E 85 F1 | 	sub	fp, #8
12cf0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12cf4     14 4E 05 A1 |  if_e	add	fp, #20
12cf8     A7 24 02 AB |  if_e	rdlong	local04, fp
12cfc     14 4E 85 A1 |  if_e	sub	fp, #20
12d00     12 23 02 A6 |  if_e	mov	local03, local04
12d04     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12d08     38 00 90 5D |  if_ne	jmp	#LR__1493
12d0c     00 1E 06 F6 | 	mov	local01, #0
12d10     A7 20 02 FB | 	rdlong	local02, fp
12d14     0C 4E 05 F1 | 	add	fp, #12
12d18     A7 12 02 FB | 	rdlong	arg01, fp
12d1c     0C 4E 85 F1 | 	sub	fp, #12
12d20     EC E7 B0 FD | 	call	#__system___float_fromuns
12d24     FD 14 02 F6 | 	mov	arg02, result1
12d28     10 13 02 F6 | 	mov	arg01, local02
12d2c     01 16 06 F6 | 	mov	arg03, #1
12d30     14 F0 B0 FD | 	call	#__system___float_cmp
12d34     01 FA 55 F2 | 	cmps	result1, #1 wc
12d38     00 1E 26 C6 |  if_b	not	local01, #0
12d3c     A7 1E 62 FC | 	wrlong	local01, fp
12d40     F8 02 90 FD | 	jmp	#LR__1503
12d44                 | LR__1493
12d44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12d44     08 4E 05 F1 | 	add	fp, #8
12d48     A7 1E 02 FB | 	rdlong	local01, fp
12d4c     08 4E 85 F1 | 	sub	fp, #8
12d50     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d54     14 4E 05 A1 |  if_e	add	fp, #20
12d58     A7 24 02 AB |  if_e	rdlong	local04, fp
12d5c     14 4E 85 A1 |  if_e	sub	fp, #20
12d60     12 23 02 A6 |  if_e	mov	local03, local04
12d64     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d68     44 00 90 5D |  if_ne	jmp	#LR__1494
12d6c     00 1E 06 F6 | 	mov	local01, #0
12d70     A7 12 02 FB | 	rdlong	arg01, fp
12d74     09 13 52 F6 | 	abs	arg01, arg01 wc
12d78     1F 26 C6 C9 |  if_b	decod	local05, #31
12d7c     00 26 06 36 |  if_ae	mov	local05, #0
12d80     8C E7 B0 FD | 	call	#__system___float_fromuns
12d84     13 FB 61 F5 | 	xor	result1, local05
12d88     FD 12 02 F6 | 	mov	arg01, result1
12d8c     0C 4E 05 F1 | 	add	fp, #12
12d90     A7 14 02 FB | 	rdlong	arg02, fp
12d94     0C 4E 85 F1 | 	sub	fp, #12
12d98     01 16 06 F6 | 	mov	arg03, #1
12d9c     A8 EF B0 FD | 	call	#__system___float_cmp
12da0     01 FA 55 F2 | 	cmps	result1, #1 wc
12da4     00 1E 26 C6 |  if_b	not	local01, #0
12da8     A7 1E 62 FC | 	wrlong	local01, fp
12dac     8C 02 90 FD | 	jmp	#LR__1503
12db0                 | LR__1494
12db0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
12db0     08 4E 05 F1 | 	add	fp, #8
12db4     A7 1E 02 FB | 	rdlong	local01, fp
12db8     08 4E 85 F1 | 	sub	fp, #8
12dbc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12dc0     14 4E 05 A1 |  if_e	add	fp, #20
12dc4     A7 24 02 AB |  if_e	rdlong	local04, fp
12dc8     14 4E 85 A1 |  if_e	sub	fp, #20
12dcc     12 23 02 A6 |  if_e	mov	local03, local04
12dd0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12dd4     24 00 90 5D |  if_ne	jmp	#LR__1495
12dd8     00 1E 06 F6 | 	mov	local01, #0
12ddc     A7 20 02 FB | 	rdlong	local02, fp
12de0     0C 4E 05 F1 | 	add	fp, #12
12de4     A7 22 02 FB | 	rdlong	local03, fp
12de8     0C 4E 85 F1 | 	sub	fp, #12
12dec     11 21 5A F2 | 	cmps	local02, local03 wcz
12df0     01 1E 66 E6 |  if_be	neg	local01, #1
12df4     A7 1E 62 FC | 	wrlong	local01, fp
12df8     40 02 90 FD | 	jmp	#LR__1503
12dfc                 | LR__1495
12dfc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12dfc     08 4E 05 F1 | 	add	fp, #8
12e00     A7 1E 02 FB | 	rdlong	local01, fp
12e04     08 4E 85 F1 | 	sub	fp, #8
12e08     1C 1E 0E F2 | 	cmp	local01, #28 wz
12e0c     14 4E 05 A1 |  if_e	add	fp, #20
12e10     A7 24 02 AB |  if_e	rdlong	local04, fp
12e14     14 4E 85 A1 |  if_e	sub	fp, #20
12e18     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12e1c     24 00 90 5D |  if_ne	jmp	#LR__1496
12e20     00 1E 06 F6 | 	mov	local01, #0
12e24     A7 20 02 FB | 	rdlong	local02, fp
12e28     0C 4E 05 F1 | 	add	fp, #12
12e2c     A7 22 02 FB | 	rdlong	local03, fp
12e30     0C 4E 85 F1 | 	sub	fp, #12
12e34     11 21 5A F2 | 	cmps	local02, local03 wcz
12e38     01 1E 66 E6 |  if_be	neg	local01, #1
12e3c     A7 1E 62 FC | 	wrlong	local01, fp
12e40     F8 01 90 FD | 	jmp	#LR__1503
12e44                 | LR__1496
12e44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12e44     08 4E 05 F1 | 	add	fp, #8
12e48     A7 1E 02 FB | 	rdlong	local01, fp
12e4c     08 4E 85 F1 | 	sub	fp, #8
12e50     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e54     14 4E 05 A1 |  if_e	add	fp, #20
12e58     A7 22 02 AB |  if_e	rdlong	local03, fp
12e5c     14 4E 85 A1 |  if_e	sub	fp, #20
12e60     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e64     34 00 90 5D |  if_ne	jmp	#LR__1497
12e68     00 1E 06 F6 | 	mov	local01, #0
12e6c     A7 12 02 FB | 	rdlong	arg01, fp
12e70     9C E6 B0 FD | 	call	#__system___float_fromuns
12e74     FD 12 02 F6 | 	mov	arg01, result1
12e78     0C 4E 05 F1 | 	add	fp, #12
12e7c     A7 14 02 FB | 	rdlong	arg02, fp
12e80     0C 4E 85 F1 | 	sub	fp, #12
12e84     01 16 06 F6 | 	mov	arg03, #1
12e88     BC EE B0 FD | 	call	#__system___float_cmp
12e8c     01 FA 55 F2 | 	cmps	result1, #1 wc
12e90     00 1E 26 C6 |  if_b	not	local01, #0
12e94     A7 1E 62 FC | 	wrlong	local01, fp
12e98     A0 01 90 FD | 	jmp	#LR__1503
12e9c                 | LR__1497
12e9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
12e9c     08 4E 05 F1 | 	add	fp, #8
12ea0     A7 1E 02 FB | 	rdlong	local01, fp
12ea4     08 4E 85 F1 | 	sub	fp, #8
12ea8     1D 1E 0E F2 | 	cmp	local01, #29 wz
12eac     14 4E 05 A1 |  if_e	add	fp, #20
12eb0     A7 22 02 AB |  if_e	rdlong	local03, fp
12eb4     14 4E 85 A1 |  if_e	sub	fp, #20
12eb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12ebc     24 00 90 5D |  if_ne	jmp	#LR__1498
12ec0     00 1E 06 F6 | 	mov	local01, #0
12ec4     A7 20 02 FB | 	rdlong	local02, fp
12ec8     0C 4E 05 F1 | 	add	fp, #12
12ecc     A7 22 02 FB | 	rdlong	local03, fp
12ed0     0C 4E 85 F1 | 	sub	fp, #12
12ed4     11 21 5A F2 | 	cmps	local02, local03 wcz
12ed8     01 1E 66 E6 |  if_be	neg	local01, #1
12edc     A7 1E 62 FC | 	wrlong	local01, fp
12ee0     58 01 90 FD | 	jmp	#LR__1503
12ee4                 | LR__1498
12ee4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12ee4     08 4E 05 F1 | 	add	fp, #8
12ee8     A7 1E 02 FB | 	rdlong	local01, fp
12eec     08 4E 85 F1 | 	sub	fp, #8
12ef0     1D 1E 0E F2 | 	cmp	local01, #29 wz
12ef4     14 4E 05 A1 |  if_e	add	fp, #20
12ef8     A7 22 02 AB |  if_e	rdlong	local03, fp
12efc     14 4E 85 A1 |  if_e	sub	fp, #20
12f00     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12f04     24 00 90 5D |  if_ne	jmp	#LR__1499
12f08     00 1E 06 F6 | 	mov	local01, #0
12f0c     A7 20 02 FB | 	rdlong	local02, fp
12f10     0C 4E 05 F1 | 	add	fp, #12
12f14     A7 22 02 FB | 	rdlong	local03, fp
12f18     0C 4E 85 F1 | 	sub	fp, #12
12f1c     11 21 1A F2 | 	cmp	local02, local03 wcz
12f20     01 1E 66 E6 |  if_be	neg	local01, #1
12f24     A7 1E 62 FC | 	wrlong	local01, fp
12f28     10 01 90 FD | 	jmp	#LR__1503
12f2c                 | LR__1499
12f2c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12f2c     08 4E 05 F1 | 	add	fp, #8
12f30     A7 1E 02 FB | 	rdlong	local01, fp
12f34     08 4E 85 F1 | 	sub	fp, #8
12f38     2B 1E 0E F2 | 	cmp	local01, #43 wz
12f3c     14 4E 05 A1 |  if_e	add	fp, #20
12f40     A7 22 02 AB |  if_e	rdlong	local03, fp
12f44     14 4E 85 A1 |  if_e	sub	fp, #20
12f48     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12f4c     30 00 90 5D |  if_ne	jmp	#LR__1500
12f50     00 1E 06 F6 | 	mov	local01, #0
12f54     A7 12 02 FB | 	rdlong	arg01, fp
12f58     B4 BD BF FD | 	call	#_convertstring
12f5c     FD 12 02 F6 | 	mov	arg01, result1
12f60     0C 4E 05 F1 | 	add	fp, #12
12f64     A7 14 02 FB | 	rdlong	arg02, fp
12f68     0C 4E 85 F1 | 	sub	fp, #12
12f6c     84 BE B0 FD | 	call	#__system___string_cmp
12f70     01 FA 55 F2 | 	cmps	result1, #1 wc
12f74     00 1E 26 C6 |  if_b	not	local01, #0
12f78     A7 1E 62 FC | 	wrlong	local01, fp
12f7c     BC 00 90 FD | 	jmp	#LR__1503
12f80                 | LR__1500
12f80                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
12f80     08 4E 05 F1 | 	add	fp, #8
12f84     A7 1E 02 FB | 	rdlong	local01, fp
12f88     08 4E 85 F1 | 	sub	fp, #8
12f8c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f90     14 4E 05 A1 |  if_e	add	fp, #20
12f94     A7 22 02 AB |  if_e	rdlong	local03, fp
12f98     14 4E 85 A1 |  if_e	sub	fp, #20
12f9c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12fa0     34 00 90 5D |  if_ne	jmp	#LR__1501
12fa4     00 1E 06 F6 | 	mov	local01, #0
12fa8     A7 20 02 FB | 	rdlong	local02, fp
12fac     0C 4E 05 F1 | 	add	fp, #12
12fb0     A7 12 02 FB | 	rdlong	arg01, fp
12fb4     0C 4E 85 F1 | 	sub	fp, #12
12fb8     54 BD BF FD | 	call	#_convertstring
12fbc     FD 14 02 F6 | 	mov	arg02, result1
12fc0     10 13 02 F6 | 	mov	arg01, local02
12fc4     2C BE B0 FD | 	call	#__system___string_cmp
12fc8     01 FA 55 F2 | 	cmps	result1, #1 wc
12fcc     00 1E 26 C6 |  if_b	not	local01, #0
12fd0     A7 1E 62 FC | 	wrlong	local01, fp
12fd4     64 00 90 FD | 	jmp	#LR__1503
12fd8                 | LR__1501
12fd8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12fd8     08 4E 05 F1 | 	add	fp, #8
12fdc     A7 1E 02 FB | 	rdlong	local01, fp
12fe0     08 4E 85 F1 | 	sub	fp, #8
12fe4     2B 1E 0E F2 | 	cmp	local01, #43 wz
12fe8     14 4E 05 A1 |  if_e	add	fp, #20
12fec     A7 22 02 AB |  if_e	rdlong	local03, fp
12ff0     14 4E 85 A1 |  if_e	sub	fp, #20
12ff4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12ff8     3C 00 90 5D |  if_ne	jmp	#LR__1502
12ffc     00 1E 06 F6 | 	mov	local01, #0
13000     A7 12 02 FB | 	rdlong	arg01, fp
13004     08 BD BF FD | 	call	#_convertstring
13008     FD 20 02 F6 | 	mov	local02, result1
1300c     0C 4E 05 F1 | 	add	fp, #12
13010     A7 12 02 FB | 	rdlong	arg01, fp
13014     0C 4E 85 F1 | 	sub	fp, #12
13018     F4 BC BF FD | 	call	#_convertstring
1301c     FD 14 02 F6 | 	mov	arg02, result1
13020     10 13 02 F6 | 	mov	arg01, local02
13024     CC BD B0 FD | 	call	#__system___string_cmp
13028     01 FA 55 F2 | 	cmps	result1, #1 wc
1302c     00 1E 26 C6 |  if_b	not	local01, #0
13030     A7 1E 62 FC | 	wrlong	local01, fp
13034     04 00 90 FD | 	jmp	#LR__1503
13038                 | LR__1502
13038     A7 00 68 FC | 	wrlong	#0, fp
1303c                 | LR__1503
1303c     08 4E 05 F1 | 	add	fp, #8
13040     A7 38 68 FC | 	wrlong	#28, fp
13044     08 4E 85 F1 | 	sub	fp, #8
13048     A7 12 02 F6 | 	mov	arg01, fp
1304c     E0 78 BF FD | 	call	#_push
13050     A7 F0 03 F6 | 	mov	ptra, fp
13054     B2 00 A0 FD | 	call	#popregs_
13058                 | _do_le_ret
13058     2D 00 64 FD | 	ret
1305c                 | 
1305c                 | ' 
1305c                 | ' 
1305c                 | ' sub do_ne
1305c                 | _do_ne
1305c     05 4A 05 F6 | 	mov	COUNT_, #5
13060     A8 00 A0 FD | 	call	#pushregs_
13064     18 F0 07 F1 | 	add	ptra, #24
13068     2C 78 BF FD | 	call	#_pop
1306c     FD 1E 02 F6 | 	mov	local01, result1
13070     FE 20 02 F6 | 	mov	local02, result2
13074     FF 22 02 F6 | 	mov	local03, result3
13078     0C 4E 05 F1 | 	add	fp, #12
1307c     A7 1E 62 FC | 	wrlong	local01, fp
13080     04 4E 05 F1 | 	add	fp, #4
13084     A7 20 62 FC | 	wrlong	local02, fp
13088     04 4E 05 F1 | 	add	fp, #4
1308c     A7 22 62 FC | 	wrlong	local03, fp
13090     14 4E 85 F1 | 	sub	fp, #20
13094     00 78 BF FD | 	call	#_pop
13098     FF 22 02 F6 | 	mov	local03, result3
1309c     A7 FA 61 FC | 	wrlong	result1, fp
130a0     04 4E 05 F1 | 	add	fp, #4
130a4     A7 FC 61 FC | 	wrlong	result2, fp
130a8     04 4E 05 F1 | 	add	fp, #4
130ac     A7 22 62 FC | 	wrlong	local03, fp
130b0                 | ' t2=pop()
130b0                 | ' t1=pop()
130b0                 | ' 
130b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
130b0     08 4E 85 F1 | 	sub	fp, #8
130b4     1F 22 0E F2 | 	cmp	local03, #31 wz
130b8     14 4E 05 A1 |  if_e	add	fp, #20
130bc     A7 24 02 AB |  if_e	rdlong	local04, fp
130c0     14 4E 85 A1 |  if_e	sub	fp, #20
130c4     12 23 02 A6 |  if_e	mov	local03, local04
130c8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
130cc     28 00 90 5D |  if_ne	jmp	#LR__1510
130d0     00 1E 06 F6 | 	mov	local01, #0
130d4     A7 12 02 FB | 	rdlong	arg01, fp
130d8     0C 4E 05 F1 | 	add	fp, #12
130dc     A7 14 02 FB | 	rdlong	arg02, fp
130e0     0C 4E 85 F1 | 	sub	fp, #12
130e4     0C BD B0 FD | 	call	#__system___string_cmp
130e8     00 FA 0D F2 | 	cmp	result1, #0 wz
130ec     00 1E 26 56 |  if_ne	not	local01, #0
130f0     A7 1E 62 FC | 	wrlong	local01, fp
130f4     1C 04 90 FD | 	jmp	#LR__1523
130f8                 | LR__1510
130f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
130f8     08 4E 05 F1 | 	add	fp, #8
130fc     A7 1E 02 FB | 	rdlong	local01, fp
13100     08 4E 85 F1 | 	sub	fp, #8
13104     1E 1E 0E F2 | 	cmp	local01, #30 wz
13108     14 4E 05 A1 |  if_e	add	fp, #20
1310c     A7 24 02 AB |  if_e	rdlong	local04, fp
13110     14 4E 85 A1 |  if_e	sub	fp, #20
13114     12 23 02 A6 |  if_e	mov	local03, local04
13118     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1311c     2C 00 90 5D |  if_ne	jmp	#LR__1511
13120     00 1E 06 F6 | 	mov	local01, #0
13124     A7 12 02 FB | 	rdlong	arg01, fp
13128     0C 4E 05 F1 | 	add	fp, #12
1312c     A7 14 02 FB | 	rdlong	arg02, fp
13130     0C 4E 85 F1 | 	sub	fp, #12
13134     01 16 06 F6 | 	mov	arg03, #1
13138     0C EC B0 FD | 	call	#__system___float_cmp
1313c     00 FA 0D F2 | 	cmp	result1, #0 wz
13140     00 1E 26 56 |  if_ne	not	local01, #0
13144     A7 1E 62 FC | 	wrlong	local01, fp
13148     C8 03 90 FD | 	jmp	#LR__1523
1314c                 | LR__1511
1314c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1314c     08 4E 05 F1 | 	add	fp, #8
13150     A7 1E 02 FB | 	rdlong	local01, fp
13154     08 4E 85 F1 | 	sub	fp, #8
13158     1E 1E 0E F2 | 	cmp	local01, #30 wz
1315c     14 4E 05 A1 |  if_e	add	fp, #20
13160     A7 24 02 AB |  if_e	rdlong	local04, fp
13164     14 4E 85 A1 |  if_e	sub	fp, #20
13168     12 23 02 A6 |  if_e	mov	local03, local04
1316c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13170     48 00 90 5D |  if_ne	jmp	#LR__1512
13174     00 1E 06 F6 | 	mov	local01, #0
13178     A7 20 02 FB | 	rdlong	local02, fp
1317c     0C 4E 05 F1 | 	add	fp, #12
13180     A7 12 02 FB | 	rdlong	arg01, fp
13184     0C 4E 85 F1 | 	sub	fp, #12
13188     09 13 52 F6 | 	abs	arg01, arg01 wc
1318c     1F 26 C6 C9 |  if_b	decod	local05, #31
13190     00 26 06 36 |  if_ae	mov	local05, #0
13194     78 E3 B0 FD | 	call	#__system___float_fromuns
13198     13 FB 61 F5 | 	xor	result1, local05
1319c     FD 14 02 F6 | 	mov	arg02, result1
131a0     10 13 02 F6 | 	mov	arg01, local02
131a4     01 16 06 F6 | 	mov	arg03, #1
131a8     9C EB B0 FD | 	call	#__system___float_cmp
131ac     00 FA 0D F2 | 	cmp	result1, #0 wz
131b0     00 1E 26 56 |  if_ne	not	local01, #0
131b4     A7 1E 62 FC | 	wrlong	local01, fp
131b8     58 03 90 FD | 	jmp	#LR__1523
131bc                 | LR__1512
131bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
131bc     08 4E 05 F1 | 	add	fp, #8
131c0     A7 1E 02 FB | 	rdlong	local01, fp
131c4     08 4E 85 F1 | 	sub	fp, #8
131c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
131cc     14 4E 05 A1 |  if_e	add	fp, #20
131d0     A7 24 02 AB |  if_e	rdlong	local04, fp
131d4     14 4E 85 A1 |  if_e	sub	fp, #20
131d8     12 23 02 A6 |  if_e	mov	local03, local04
131dc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
131e0     38 00 90 5D |  if_ne	jmp	#LR__1513
131e4     00 1E 06 F6 | 	mov	local01, #0
131e8     A7 20 02 FB | 	rdlong	local02, fp
131ec     0C 4E 05 F1 | 	add	fp, #12
131f0     A7 12 02 FB | 	rdlong	arg01, fp
131f4     0C 4E 85 F1 | 	sub	fp, #12
131f8     14 E3 B0 FD | 	call	#__system___float_fromuns
131fc     FD 14 02 F6 | 	mov	arg02, result1
13200     10 13 02 F6 | 	mov	arg01, local02
13204     01 16 06 F6 | 	mov	arg03, #1
13208     3C EB B0 FD | 	call	#__system___float_cmp
1320c     00 FA 0D F2 | 	cmp	result1, #0 wz
13210     00 1E 26 56 |  if_ne	not	local01, #0
13214     A7 1E 62 FC | 	wrlong	local01, fp
13218     F8 02 90 FD | 	jmp	#LR__1523
1321c                 | LR__1513
1321c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1321c     08 4E 05 F1 | 	add	fp, #8
13220     A7 1E 02 FB | 	rdlong	local01, fp
13224     08 4E 85 F1 | 	sub	fp, #8
13228     1C 1E 0E F2 | 	cmp	local01, #28 wz
1322c     14 4E 05 A1 |  if_e	add	fp, #20
13230     A7 24 02 AB |  if_e	rdlong	local04, fp
13234     14 4E 85 A1 |  if_e	sub	fp, #20
13238     12 23 02 A6 |  if_e	mov	local03, local04
1323c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13240     44 00 90 5D |  if_ne	jmp	#LR__1514
13244     00 1E 06 F6 | 	mov	local01, #0
13248     A7 12 02 FB | 	rdlong	arg01, fp
1324c     09 13 52 F6 | 	abs	arg01, arg01 wc
13250     1F 26 C6 C9 |  if_b	decod	local05, #31
13254     00 26 06 36 |  if_ae	mov	local05, #0
13258     B4 E2 B0 FD | 	call	#__system___float_fromuns
1325c     13 FB 61 F5 | 	xor	result1, local05
13260     FD 12 02 F6 | 	mov	arg01, result1
13264     0C 4E 05 F1 | 	add	fp, #12
13268     A7 14 02 FB | 	rdlong	arg02, fp
1326c     0C 4E 85 F1 | 	sub	fp, #12
13270     01 16 06 F6 | 	mov	arg03, #1
13274     D0 EA B0 FD | 	call	#__system___float_cmp
13278     00 FA 0D F2 | 	cmp	result1, #0 wz
1327c     00 1E 26 56 |  if_ne	not	local01, #0
13280     A7 1E 62 FC | 	wrlong	local01, fp
13284     8C 02 90 FD | 	jmp	#LR__1523
13288                 | LR__1514
13288                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
13288     08 4E 05 F1 | 	add	fp, #8
1328c     A7 1E 02 FB | 	rdlong	local01, fp
13290     08 4E 85 F1 | 	sub	fp, #8
13294     1C 1E 0E F2 | 	cmp	local01, #28 wz
13298     14 4E 05 A1 |  if_e	add	fp, #20
1329c     A7 24 02 AB |  if_e	rdlong	local04, fp
132a0     14 4E 85 A1 |  if_e	sub	fp, #20
132a4     12 23 02 A6 |  if_e	mov	local03, local04
132a8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
132ac     24 00 90 5D |  if_ne	jmp	#LR__1515
132b0     00 1E 06 F6 | 	mov	local01, #0
132b4     A7 20 02 FB | 	rdlong	local02, fp
132b8     0C 4E 05 F1 | 	add	fp, #12
132bc     A7 22 02 FB | 	rdlong	local03, fp
132c0     0C 4E 85 F1 | 	sub	fp, #12
132c4     11 21 0A F2 | 	cmp	local02, local03 wz
132c8     01 1E 66 56 |  if_ne	neg	local01, #1
132cc     A7 1E 62 FC | 	wrlong	local01, fp
132d0     40 02 90 FD | 	jmp	#LR__1523
132d4                 | LR__1515
132d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
132d4     08 4E 05 F1 | 	add	fp, #8
132d8     A7 1E 02 FB | 	rdlong	local01, fp
132dc     08 4E 85 F1 | 	sub	fp, #8
132e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
132e4     14 4E 05 A1 |  if_e	add	fp, #20
132e8     A7 24 02 AB |  if_e	rdlong	local04, fp
132ec     14 4E 85 A1 |  if_e	sub	fp, #20
132f0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
132f4     24 00 90 5D |  if_ne	jmp	#LR__1516
132f8     00 1E 06 F6 | 	mov	local01, #0
132fc     A7 20 02 FB | 	rdlong	local02, fp
13300     0C 4E 05 F1 | 	add	fp, #12
13304     A7 22 02 FB | 	rdlong	local03, fp
13308     0C 4E 85 F1 | 	sub	fp, #12
1330c     11 21 0A F2 | 	cmp	local02, local03 wz
13310     01 1E 66 56 |  if_ne	neg	local01, #1
13314     A7 1E 62 FC | 	wrlong	local01, fp
13318     F8 01 90 FD | 	jmp	#LR__1523
1331c                 | LR__1516
1331c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1331c     08 4E 05 F1 | 	add	fp, #8
13320     A7 1E 02 FB | 	rdlong	local01, fp
13324     08 4E 85 F1 | 	sub	fp, #8
13328     1D 1E 0E F2 | 	cmp	local01, #29 wz
1332c     14 4E 05 A1 |  if_e	add	fp, #20
13330     A7 22 02 AB |  if_e	rdlong	local03, fp
13334     14 4E 85 A1 |  if_e	sub	fp, #20
13338     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1333c     34 00 90 5D |  if_ne	jmp	#LR__1517
13340     00 1E 06 F6 | 	mov	local01, #0
13344     A7 12 02 FB | 	rdlong	arg01, fp
13348     C4 E1 B0 FD | 	call	#__system___float_fromuns
1334c     FD 12 02 F6 | 	mov	arg01, result1
13350     0C 4E 05 F1 | 	add	fp, #12
13354     A7 14 02 FB | 	rdlong	arg02, fp
13358     0C 4E 85 F1 | 	sub	fp, #12
1335c     01 16 06 F6 | 	mov	arg03, #1
13360     E4 E9 B0 FD | 	call	#__system___float_cmp
13364     00 FA 0D F2 | 	cmp	result1, #0 wz
13368     00 1E 26 56 |  if_ne	not	local01, #0
1336c     A7 1E 62 FC | 	wrlong	local01, fp
13370     A0 01 90 FD | 	jmp	#LR__1523
13374                 | LR__1517
13374                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
13374     08 4E 05 F1 | 	add	fp, #8
13378     A7 1E 02 FB | 	rdlong	local01, fp
1337c     08 4E 85 F1 | 	sub	fp, #8
13380     1D 1E 0E F2 | 	cmp	local01, #29 wz
13384     14 4E 05 A1 |  if_e	add	fp, #20
13388     A7 22 02 AB |  if_e	rdlong	local03, fp
1338c     14 4E 85 A1 |  if_e	sub	fp, #20
13390     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13394     24 00 90 5D |  if_ne	jmp	#LR__1518
13398     00 1E 06 F6 | 	mov	local01, #0
1339c     A7 20 02 FB | 	rdlong	local02, fp
133a0     0C 4E 05 F1 | 	add	fp, #12
133a4     A7 22 02 FB | 	rdlong	local03, fp
133a8     0C 4E 85 F1 | 	sub	fp, #12
133ac     11 21 0A F2 | 	cmp	local02, local03 wz
133b0     01 1E 66 56 |  if_ne	neg	local01, #1
133b4     A7 1E 62 FC | 	wrlong	local01, fp
133b8     58 01 90 FD | 	jmp	#LR__1523
133bc                 | LR__1518
133bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
133bc     08 4E 05 F1 | 	add	fp, #8
133c0     A7 1E 02 FB | 	rdlong	local01, fp
133c4     08 4E 85 F1 | 	sub	fp, #8
133c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
133cc     14 4E 05 A1 |  if_e	add	fp, #20
133d0     A7 22 02 AB |  if_e	rdlong	local03, fp
133d4     14 4E 85 A1 |  if_e	sub	fp, #20
133d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
133dc     24 00 90 5D |  if_ne	jmp	#LR__1519
133e0     00 1E 06 F6 | 	mov	local01, #0
133e4     A7 20 02 FB | 	rdlong	local02, fp
133e8     0C 4E 05 F1 | 	add	fp, #12
133ec     A7 22 02 FB | 	rdlong	local03, fp
133f0     0C 4E 85 F1 | 	sub	fp, #12
133f4     11 21 0A F2 | 	cmp	local02, local03 wz
133f8     01 1E 66 56 |  if_ne	neg	local01, #1
133fc     A7 1E 62 FC | 	wrlong	local01, fp
13400     10 01 90 FD | 	jmp	#LR__1523
13404                 | LR__1519
13404                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
13404     08 4E 05 F1 | 	add	fp, #8
13408     A7 1E 02 FB | 	rdlong	local01, fp
1340c     08 4E 85 F1 | 	sub	fp, #8
13410     2B 1E 0E F2 | 	cmp	local01, #43 wz
13414     14 4E 05 A1 |  if_e	add	fp, #20
13418     A7 22 02 AB |  if_e	rdlong	local03, fp
1341c     14 4E 85 A1 |  if_e	sub	fp, #20
13420     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13424     30 00 90 5D |  if_ne	jmp	#LR__1520
13428     00 1E 06 F6 | 	mov	local01, #0
1342c     A7 12 02 FB | 	rdlong	arg01, fp
13430     DC B8 BF FD | 	call	#_convertstring
13434     FD 12 02 F6 | 	mov	arg01, result1
13438     0C 4E 05 F1 | 	add	fp, #12
1343c     A7 14 02 FB | 	rdlong	arg02, fp
13440     0C 4E 85 F1 | 	sub	fp, #12
13444     AC B9 B0 FD | 	call	#__system___string_cmp
13448     00 FA 0D F2 | 	cmp	result1, #0 wz
1344c     00 1E 26 56 |  if_ne	not	local01, #0
13450     A7 1E 62 FC | 	wrlong	local01, fp
13454     BC 00 90 FD | 	jmp	#LR__1523
13458                 | LR__1520
13458                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
13458     08 4E 05 F1 | 	add	fp, #8
1345c     A7 1E 02 FB | 	rdlong	local01, fp
13460     08 4E 85 F1 | 	sub	fp, #8
13464     1F 1E 0E F2 | 	cmp	local01, #31 wz
13468     14 4E 05 A1 |  if_e	add	fp, #20
1346c     A7 22 02 AB |  if_e	rdlong	local03, fp
13470     14 4E 85 A1 |  if_e	sub	fp, #20
13474     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13478     34 00 90 5D |  if_ne	jmp	#LR__1521
1347c     00 1E 06 F6 | 	mov	local01, #0
13480     A7 20 02 FB | 	rdlong	local02, fp
13484     0C 4E 05 F1 | 	add	fp, #12
13488     A7 12 02 FB | 	rdlong	arg01, fp
1348c     0C 4E 85 F1 | 	sub	fp, #12
13490     7C B8 BF FD | 	call	#_convertstring
13494     FD 14 02 F6 | 	mov	arg02, result1
13498     10 13 02 F6 | 	mov	arg01, local02
1349c     54 B9 B0 FD | 	call	#__system___string_cmp
134a0     00 FA 0D F2 | 	cmp	result1, #0 wz
134a4     00 1E 26 56 |  if_ne	not	local01, #0
134a8     A7 1E 62 FC | 	wrlong	local01, fp
134ac     64 00 90 FD | 	jmp	#LR__1523
134b0                 | LR__1521
134b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
134b0     08 4E 05 F1 | 	add	fp, #8
134b4     A7 1E 02 FB | 	rdlong	local01, fp
134b8     08 4E 85 F1 | 	sub	fp, #8
134bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
134c0     14 4E 05 A1 |  if_e	add	fp, #20
134c4     A7 22 02 AB |  if_e	rdlong	local03, fp
134c8     14 4E 85 A1 |  if_e	sub	fp, #20
134cc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
134d0     3C 00 90 5D |  if_ne	jmp	#LR__1522
134d4     00 1E 06 F6 | 	mov	local01, #0
134d8     A7 12 02 FB | 	rdlong	arg01, fp
134dc     30 B8 BF FD | 	call	#_convertstring
134e0     FD 20 02 F6 | 	mov	local02, result1
134e4     0C 4E 05 F1 | 	add	fp, #12
134e8     A7 12 02 FB | 	rdlong	arg01, fp
134ec     0C 4E 85 F1 | 	sub	fp, #12
134f0     1C B8 BF FD | 	call	#_convertstring
134f4     FD 14 02 F6 | 	mov	arg02, result1
134f8     10 13 02 F6 | 	mov	arg01, local02
134fc     F4 B8 B0 FD | 	call	#__system___string_cmp
13500     00 FA 0D F2 | 	cmp	result1, #0 wz
13504     00 1E 26 56 |  if_ne	not	local01, #0
13508     A7 1E 62 FC | 	wrlong	local01, fp
1350c     04 00 90 FD | 	jmp	#LR__1523
13510                 | LR__1522
13510     A7 00 68 FC | 	wrlong	#0, fp
13514                 | LR__1523
13514     08 4E 05 F1 | 	add	fp, #8
13518     A7 38 68 FC | 	wrlong	#28, fp
1351c     08 4E 85 F1 | 	sub	fp, #8
13520     A7 12 02 F6 | 	mov	arg01, fp
13524     08 74 BF FD | 	call	#_push
13528     A7 F0 03 F6 | 	mov	ptra, fp
1352c     B2 00 A0 FD | 	call	#popregs_
13530                 | _do_ne_ret
13530     2D 00 64 FD | 	ret
13534                 | 
13534                 | ' 
13534                 | ' 
13534                 | ' 
13534                 | ' ' -------------------   convert a variable on the top of stack to integer
13534                 | ' 
13534                 | ' 'sub do_converttoint'
13534                 | ' 
13534                 | ' 'dim t1 as expr_result 
13534                 | ' 'dim a1,r as integer
13534                 | ' 't1=pop() 
13534                 | ' 'select case t1.result_type
13534                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
13534                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
13534                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
13534                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
13534                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
13534                 | ' '  case result_error: a1=0: r=t1.result.uresult
13534                 | ' '  case else : a1=0 : r=1
13534                 | ' 
13534                 | ' 'end select
13534                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
13534                 | ' 
13534                 | ' 'end sub
13534                 | ' 
13534                 | ' function converttoint (t1 as expr_result) as integer
13534                 | _converttoint
13534     02 4A 05 F6 | 	mov	COUNT_, #2
13538     A8 00 A0 FD | 	call	#pushregs_
1353c     09 1F 02 F6 | 	mov	local01, arg01
13540                 | ' 
13540                 | ' select case t1.result_type
13540     08 1E 06 F1 | 	add	local01, #8
13544     0F 21 02 FB | 	rdlong	local02, local01
13548     08 1E 86 F1 | 	sub	local01, #8
1354c     1C 20 0E F2 | 	cmp	local02, #28 wz
13550     24 00 90 AD |  if_e	jmp	#LR__1530
13554     1D 20 0E F2 | 	cmp	local02, #29 wz
13558     24 00 90 AD |  if_e	jmp	#LR__1531
1355c     1E 20 0E F2 | 	cmp	local02, #30 wz
13560     24 00 90 AD |  if_e	jmp	#LR__1532
13564     1F 20 0E F2 | 	cmp	local02, #31 wz
13568     2C 00 90 AD |  if_e	jmp	#LR__1533
1356c     2B 20 0E F2 | 	cmp	local02, #43 wz
13570     3C 00 90 AD |  if_e	jmp	#LR__1534
13574     58 00 90 FD | 	jmp	#LR__1535
13578                 | LR__1530
13578     0F FB 01 FB | 	rdlong	result1, local01
1357c     54 00 90 FD | 	jmp	#LR__1536
13580                 | LR__1531
13580     0F FB 01 FB | 	rdlong	result1, local01
13584     4C 00 90 FD | 	jmp	#LR__1536
13588                 | LR__1532
13588     0F 13 02 FB | 	rdlong	arg01, local01
1358c     01 14 06 F6 | 	mov	arg02, #1
13590     48 E8 B0 FD | 	call	#__system___float_tointeger
13594     3C 00 90 FD | 	jmp	#LR__1536
13598                 | LR__1533
13598     0F 13 02 FB | 	rdlong	arg01, local01
1359c     5C EB B0 FD | 	call	#__system____builtin_atof
135a0     FD 12 02 F6 | 	mov	arg01, result1
135a4     00 14 06 F6 | 	mov	arg02, #0
135a8     30 E8 B0 FD | 	call	#__system___float_tointeger
135ac     24 00 90 FD | 	jmp	#LR__1536
135b0                 | LR__1534
135b0     0F 13 02 FB | 	rdlong	arg01, local01
135b4     58 B7 BF FD | 	call	#_convertstring
135b8     FD 12 02 F6 | 	mov	arg01, result1
135bc     3C EB B0 FD | 	call	#__system____builtin_atof
135c0     FD 12 02 F6 | 	mov	arg01, result1
135c4     00 14 06 F6 | 	mov	arg02, #0
135c8     10 E8 B0 FD | 	call	#__system___float_tointeger
135cc     04 00 90 FD | 	jmp	#LR__1536
135d0                 | LR__1535
135d0     00 FA 05 F6 | 	mov	result1, #0
135d4                 | LR__1536
135d4     A7 F0 03 F6 | 	mov	ptra, fp
135d8     B2 00 A0 FD | 	call	#popregs_
135dc                 | _converttoint_ret
135dc     2D 00 64 FD | 	ret
135e0                 | 
135e0                 | ' 
135e0                 | ' function converttofloat (t1 as expr_result) as single
135e0                 | _converttofloat
135e0     03 4A 05 F6 | 	mov	COUNT_, #3
135e4     A8 00 A0 FD | 	call	#pushregs_
135e8     09 1F 02 F6 | 	mov	local01, arg01
135ec                 | ' 
135ec                 | ' select case t1.result_type
135ec     08 1E 06 F1 | 	add	local01, #8
135f0     0F 21 02 FB | 	rdlong	local02, local01
135f4     08 1E 86 F1 | 	sub	local01, #8
135f8     1C 20 0E F2 | 	cmp	local02, #28 wz
135fc     24 00 90 AD |  if_e	jmp	#LR__1540
13600     1D 20 0E F2 | 	cmp	local02, #29 wz
13604     38 00 90 AD |  if_e	jmp	#LR__1541
13608     1E 20 0E F2 | 	cmp	local02, #30 wz
1360c     3C 00 90 AD |  if_e	jmp	#LR__1542
13610     1F 20 0E F2 | 	cmp	local02, #31 wz
13614     3C 00 90 AD |  if_e	jmp	#LR__1543
13618     2B 20 0E F2 | 	cmp	local02, #43 wz
1361c     40 00 90 AD |  if_e	jmp	#LR__1544
13620     50 00 90 FD | 	jmp	#LR__1545
13624                 | LR__1540
13624     0F 13 02 FB | 	rdlong	arg01, local01
13628     09 13 52 F6 | 	abs	arg01, arg01 wc
1362c     1F 22 C6 C9 |  if_b	decod	local03, #31
13630     00 22 06 36 |  if_ae	mov	local03, #0
13634     D8 DE B0 FD | 	call	#__system___float_fromuns
13638     11 FB 61 F5 | 	xor	result1, local03
1363c     38 00 90 FD | 	jmp	#LR__1546
13640                 | LR__1541
13640     0F 13 02 FB | 	rdlong	arg01, local01
13644     C8 DE B0 FD | 	call	#__system___float_fromuns
13648     2C 00 90 FD | 	jmp	#LR__1546
1364c                 | LR__1542
1364c     0F FB 01 FB | 	rdlong	result1, local01
13650     24 00 90 FD | 	jmp	#LR__1546
13654                 | LR__1543
13654     0F 13 02 FB | 	rdlong	arg01, local01
13658     A0 EA B0 FD | 	call	#__system____builtin_atof
1365c     18 00 90 FD | 	jmp	#LR__1546
13660                 | LR__1544
13660     0F 13 02 FB | 	rdlong	arg01, local01
13664     A8 B6 BF FD | 	call	#_convertstring
13668     FD 12 02 F6 | 	mov	arg01, result1
1366c     8C EA B0 FD | 	call	#__system____builtin_atof
13670     04 00 90 FD | 	jmp	#LR__1546
13674                 | LR__1545
13674     00 FA 05 F6 | 	mov	result1, #0
13678                 | LR__1546
13678     A7 F0 03 F6 | 	mov	ptra, fp
1367c     B2 00 A0 FD | 	call	#popregs_
13680                 | _converttofloat_ret
13680     2D 00 64 FD | 	ret
13684                 | 
13684                 | ' 
13684                 | ' sub do_rnd
13684                 | _do_rnd
13684     01 4A 05 F6 | 	mov	COUNT_, #1
13688     A8 00 A0 FD | 	call	#pushregs_
1368c     10 F0 07 F1 | 	add	ptra, #16
13690     4A 00 00 FF 
13694     B0 E4 05 F1 | 	add	objptr, ##38064
13698     F2 1E 02 FB | 	rdlong	local01, objptr
1369c     0F 17 02 F6 | 	mov	arg03, local01
136a0     01 16 66 F0 | 	shl	arg03, #1
136a4     0F 17 02 F1 | 	add	arg03, local01
136a8     02 16 66 F0 | 	shl	arg03, #2
136ac     03 00 00 FF 
136b0     04 E4 85 F1 | 	sub	objptr, ##1540
136b4     F2 16 02 F1 | 	add	arg03, objptr
136b8     0B 17 02 FB | 	rdlong	arg03, arg03
136bc     0C 4E 05 F1 | 	add	fp, #12
136c0     A7 16 62 FC | 	wrlong	arg03, fp
136c4                 | ' 
136c4                 | ' numpar=compiledline(lineptr_e).result.uresult
136c4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
136c4     0C 4E 85 F1 | 	sub	fp, #12
136c8     02 16 16 F2 | 	cmp	arg03, #2 wc
136cc     47 00 00 FF 
136d0     AC E4 85 F1 | 	sub	objptr, ##36524
136d4     3C 00 90 CD |  if_b	jmp	#LR__1550
136d8     00 12 06 F6 | 	mov	arg01, #0
136dc     84 10 B1 FD | 	call	#__system___getiolock_0485
136e0     FD 12 02 F6 | 	mov	arg01, result1
136e4     E4 B6 B0 FD | 	call	#__system___lockmem
136e8     75 01 00 FF 
136ec     2C 14 06 F6 | 	mov	arg02, ##@LR__5162
136f0     00 12 06 F6 | 	mov	arg01, #0
136f4     00 16 06 F6 | 	mov	arg03, #0
136f8     C4 C3 B0 FD | 	call	#__system___basic_print_string
136fc     00 12 06 F6 | 	mov	arg01, #0
13700     60 10 B1 FD | 	call	#__system___getiolock_0485
13704     FD 00 68 FC | 	wrlong	#0, result1
13708     27 12 06 F6 | 	mov	arg01, #39
1370c     14 72 B0 FD | 	call	#_printerror
13710     2C 01 90 FD | 	jmp	#LR__1557
13714                 | LR__1550
13714                 | ' if numpar=0 then
13714     0C 4E 05 F1 | 	add	fp, #12
13718     A7 FE 09 FB | 	rdlong	result3, fp wz
1371c     0C 4E 85 F1 | 	sub	fp, #12
13720     20 00 90 5D |  if_ne	jmp	#LR__1551
13724     08 4E 05 F1 | 	add	fp, #8
13728     A7 3A 68 FC | 	wrlong	#29, fp
1372c     08 4E 85 F1 | 	sub	fp, #8
13730     1B FA 61 FD | 	getrnd	result1
13734     A7 FA 61 FC | 	wrlong	result1, fp
13738     A7 12 02 F6 | 	mov	arg01, fp
1373c     F0 71 BF FD | 	call	#_push
13740     FC 00 90 FD | 	jmp	#LR__1556
13744                 | LR__1551
13744     50 71 BF FD | 	call	#_pop
13748     A7 FA 61 FC | 	wrlong	result1, fp
1374c     04 4E 05 F1 | 	add	fp, #4
13750     A7 FC 61 FC | 	wrlong	result2, fp
13754     04 4E 05 F1 | 	add	fp, #4
13758     A7 FE 61 FC | 	wrlong	result3, fp
1375c                 | '   t1=pop()
1375c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1375c     08 4E 85 F1 | 	sub	fp, #8
13760     1C FE 0D F2 | 	cmp	result3, #28 wz
13764     08 4E 05 51 |  if_ne	add	fp, #8
13768     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1376c     08 4E 85 51 |  if_ne	sub	fp, #8
13770     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13774     2C 00 90 5D |  if_ne	jmp	#LR__1552
13778     1B FA 61 FD | 	getrnd	result1
1377c     A7 1E 02 FB | 	rdlong	local01, fp
13780     0F FB 11 FD | 	qdiv	result1, local01
13784     A7 12 02 F6 | 	mov	arg01, fp
13788     19 1E 62 FD | 	getqy	local01
1378c     A7 1E 62 FC | 	wrlong	local01, fp
13790     08 4E 05 F1 | 	add	fp, #8
13794     A7 3A 68 FC | 	wrlong	#29, fp
13798     08 4E 85 F1 | 	sub	fp, #8
1379c     90 71 BF FD | 	call	#_push
137a0     9C 00 90 FD | 	jmp	#LR__1555
137a4                 | LR__1552
137a4     08 4E 05 F1 | 	add	fp, #8
137a8     A7 1E 02 FB | 	rdlong	local01, fp
137ac     08 4E 85 F1 | 	sub	fp, #8
137b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
137b4     48 00 90 5D |  if_ne	jmp	#LR__1553
137b8     A7 12 02 FB | 	rdlong	arg01, fp
137bc     00 C0 24 FF 
137c0     00 14 06 F6 | 	mov	arg02, ##1233125376
137c4     50 E3 B0 FD | 	call	#__system___float_div
137c8     FD 1E 02 F6 | 	mov	local01, result1
137cc     1B 12 62 FD | 	getrnd	arg01
137d0     74 13 06 F4 | 	bitl	arg01, #372
137d4     38 DD B0 FD | 	call	#__system___float_fromuns
137d8     FD 14 02 F6 | 	mov	arg02, result1
137dc     0F 13 02 F6 | 	mov	arg01, local01
137e0     30 E1 B0 FD | 	call	#__system___float_mul
137e4     A7 FA 61 FC | 	wrlong	result1, fp
137e8     08 4E 05 F1 | 	add	fp, #8
137ec     A7 3C 68 FC | 	wrlong	#30, fp
137f0     08 4E 85 F1 | 	sub	fp, #8
137f4     A7 12 02 F6 | 	mov	arg01, fp
137f8     34 71 BF FD | 	call	#_push
137fc     40 00 90 FD | 	jmp	#LR__1554
13800                 | LR__1553
13800                 | '     print "rnd: "; : printerror(40) 
13800     00 12 06 F6 | 	mov	arg01, #0
13804     5C 0F B1 FD | 	call	#__system___getiolock_0485
13808     FD 12 02 F6 | 	mov	arg01, result1
1380c     BC B5 B0 FD | 	call	#__system___lockmem
13810     75 01 00 FF 
13814     32 14 06 F6 | 	mov	arg02, ##@LR__5163
13818     00 12 06 F6 | 	mov	arg01, #0
1381c     00 16 06 F6 | 	mov	arg03, #0
13820     9C C2 B0 FD | 	call	#__system___basic_print_string
13824     00 12 06 F6 | 	mov	arg01, #0
13828     38 0F B1 FD | 	call	#__system___getiolock_0485
1382c     FD 00 68 FC | 	wrlong	#0, result1
13830     28 12 06 F6 | 	mov	arg01, #40
13834     EC 70 B0 FD | 	call	#_printerror
13838     A7 12 02 F6 | 	mov	arg01, fp
1383c     F0 70 BF FD | 	call	#_push
13840                 | LR__1554
13840                 | LR__1555
13840                 | LR__1556
13840                 | LR__1557
13840     A7 F0 03 F6 | 	mov	ptra, fp
13844     B2 00 A0 FD | 	call	#popregs_
13848                 | _do_rnd_ret
13848     2D 00 64 FD | 	ret
1384c                 | 
1384c                 | ' 
1384c                 | ' sub do_getenvsustain
1384c                 | _do_getenvsustain
1384c     01 4A 05 F6 | 	mov	COUNT_, #1
13850     A8 00 A0 FD | 	call	#pushregs_
13854     10 F0 07 F1 | 	add	ptra, #16
13858     4A 00 00 FF 
1385c     B0 E4 05 F1 | 	add	objptr, ##38064
13860     F2 1E 02 FB | 	rdlong	local01, objptr
13864     0F 17 02 F6 | 	mov	arg03, local01
13868     01 16 66 F0 | 	shl	arg03, #1
1386c     0F 17 02 F1 | 	add	arg03, local01
13870     02 16 66 F0 | 	shl	arg03, #2
13874     03 00 00 FF 
13878     04 E4 85 F1 | 	sub	objptr, ##1540
1387c     F2 16 02 F1 | 	add	arg03, objptr
13880     0B 17 02 FB | 	rdlong	arg03, arg03
13884     0C 4E 05 F1 | 	add	fp, #12
13888     A7 16 62 FC | 	wrlong	arg03, fp
1388c                 | ' 
1388c                 | ' numpar=compiledline(lineptr_e).result.uresult
1388c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1388c     0C 4E 85 F1 | 	sub	fp, #12
13890     02 16 16 F2 | 	cmp	arg03, #2 wc
13894     47 00 00 FF 
13898     AC E4 85 F1 | 	sub	objptr, ##36524
1389c     0C 4E 05 C1 |  if_b	add	fp, #12
138a0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
138a4     0C 4E 85 C1 |  if_b	sub	fp, #12
138a8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
138ac     00 12 06 F6 | 	mov	arg01, #0
138b0     B0 0E B1 FD | 	call	#__system___getiolock_0485
138b4     FD 12 02 F6 | 	mov	arg01, result1
138b8     10 B5 B0 FD | 	call	#__system___lockmem
138bc     75 01 00 FF 
138c0     38 14 06 F6 | 	mov	arg02, ##@LR__5164
138c4     00 12 06 F6 | 	mov	arg01, #0
138c8     00 16 06 F6 | 	mov	arg03, #0
138cc     F0 C1 B0 FD | 	call	#__system___basic_print_string
138d0     00 12 06 F6 | 	mov	arg01, #0
138d4     8C 0E B1 FD | 	call	#__system___getiolock_0485
138d8     FD 00 68 FC | 	wrlong	#0, result1
138dc     27 12 06 F6 | 	mov	arg01, #39
138e0     40 70 B0 FD | 	call	#_printerror
138e4     64 00 90 FD | 	jmp	#LR__1561
138e8                 | LR__1560
138e8     AC 6F BF FD | 	call	#_pop
138ec     FD 1E 02 F6 | 	mov	local01, result1
138f0     FE 16 02 F6 | 	mov	arg03, result2
138f4     A7 1E 62 FC | 	wrlong	local01, fp
138f8     04 4E 05 F1 | 	add	fp, #4
138fc     A7 16 62 FC | 	wrlong	arg03, fp
13900     04 4E 05 F1 | 	add	fp, #4
13904     A7 FE 61 FC | 	wrlong	result3, fp
13908     08 4E 85 F1 | 	sub	fp, #8
1390c     A7 12 02 F6 | 	mov	arg01, fp
13910     20 FC BF FD | 	call	#_converttoint
13914     FD 1E 02 F6 | 	mov	local01, result1
13918     01 1E 66 F0 | 	shl	local01, #1
1391c     59 00 00 FF 
13920     D4 E5 05 F1 | 	add	objptr, ##46036
13924     F2 1E 02 F1 | 	add	local01, objptr
13928     0F 1F E2 FA | 	rdword	local01, local01
1392c     A7 1E 62 FC | 	wrlong	local01, fp
13930     08 4E 05 F1 | 	add	fp, #8
13934     A7 38 68 FC | 	wrlong	#28, fp
13938     08 4E 85 F1 | 	sub	fp, #8
1393c     A7 12 02 F6 | 	mov	arg01, fp
13940     59 00 00 FF 
13944     D4 E5 85 F1 | 	sub	objptr, ##46036
13948     E4 6F BF FD | 	call	#_push
1394c                 | LR__1561
1394c     A7 F0 03 F6 | 	mov	ptra, fp
13950     B2 00 A0 FD | 	call	#popregs_
13954                 | _do_getenvsustain_ret
13954     2D 00 64 FD | 	ret
13958                 | 
13958                 | ' 
13958                 | ' sub do_sin
13958                 | _do_sin
13958     01 4A 05 F6 | 	mov	COUNT_, #1
1395c     A8 00 A0 FD | 	call	#pushregs_
13960     10 F0 07 F1 | 	add	ptra, #16
13964     4A 00 00 FF 
13968     B0 E4 05 F1 | 	add	objptr, ##38064
1396c     F2 1E 02 FB | 	rdlong	local01, objptr
13970     0F 17 02 F6 | 	mov	arg03, local01
13974     01 16 66 F0 | 	shl	arg03, #1
13978     0F 17 02 F1 | 	add	arg03, local01
1397c     02 16 66 F0 | 	shl	arg03, #2
13980     03 00 00 FF 
13984     04 E4 85 F1 | 	sub	objptr, ##1540
13988     F2 16 02 F1 | 	add	arg03, objptr
1398c     0B 17 02 FB | 	rdlong	arg03, arg03
13990     0C 4E 05 F1 | 	add	fp, #12
13994     A7 16 62 FC | 	wrlong	arg03, fp
13998                 | ' 
13998                 | ' numpar=compiledline(lineptr_e).result.uresult
13998                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
13998     0C 4E 85 F1 | 	sub	fp, #12
1399c     02 16 16 F2 | 	cmp	arg03, #2 wc
139a0     47 00 00 FF 
139a4     AC E4 85 F1 | 	sub	objptr, ##36524
139a8     0C 4E 05 C1 |  if_b	add	fp, #12
139ac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
139b0     0C 4E 85 C1 |  if_b	sub	fp, #12
139b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
139b8     00 12 06 F6 | 	mov	arg01, #0
139bc     A4 0D B1 FD | 	call	#__system___getiolock_0485
139c0     FD 12 02 F6 | 	mov	arg01, result1
139c4     04 B4 B0 FD | 	call	#__system___lockmem
139c8     75 01 00 FF 
139cc     48 14 06 F6 | 	mov	arg02, ##@LR__5165
139d0     00 12 06 F6 | 	mov	arg01, #0
139d4     00 16 06 F6 | 	mov	arg03, #0
139d8     E4 C0 B0 FD | 	call	#__system___basic_print_string
139dc     00 12 06 F6 | 	mov	arg01, #0
139e0     80 0D B1 FD | 	call	#__system___getiolock_0485
139e4     FD 00 68 FC | 	wrlong	#0, result1
139e8     27 12 06 F6 | 	mov	arg01, #39
139ec     34 6F B0 FD | 	call	#_printerror
139f0     64 00 90 FD | 	jmp	#LR__1571
139f4                 | LR__1570
139f4     A0 6E BF FD | 	call	#_pop
139f8     A7 FA 61 FC | 	wrlong	result1, fp
139fc     04 4E 05 F1 | 	add	fp, #4
13a00     A7 FC 61 FC | 	wrlong	result2, fp
13a04     04 4E 05 F1 | 	add	fp, #4
13a08     A7 FE 61 FC | 	wrlong	result3, fp
13a0c     08 4E 85 F1 | 	sub	fp, #8
13a10     59 00 00 FF 
13a14     C8 E5 05 F1 | 	add	objptr, ##46024
13a18     F2 1E 02 FB | 	rdlong	local01, objptr
13a1c     59 00 00 FF 
13a20     C8 E5 85 F1 | 	sub	objptr, ##46024
13a24     A7 12 02 F6 | 	mov	arg01, fp
13a28     B4 FB BF FD | 	call	#_converttofloat
13a2c     FD 14 02 F6 | 	mov	arg02, result1
13a30     0F 13 02 F6 | 	mov	arg01, local01
13a34     DC DE B0 FD | 	call	#__system___float_mul
13a38     FD 12 02 F6 | 	mov	arg01, result1
13a3c     10 E8 B0 FD | 	call	#__system____builtin_sinf
13a40     A7 FA 61 FC | 	wrlong	result1, fp
13a44     08 4E 05 F1 | 	add	fp, #8
13a48     A7 3C 68 FC | 	wrlong	#30, fp
13a4c     08 4E 85 F1 | 	sub	fp, #8
13a50     A7 12 02 F6 | 	mov	arg01, fp
13a54     D8 6E BF FD | 	call	#_push
13a58                 | LR__1571
13a58     A7 F0 03 F6 | 	mov	ptra, fp
13a5c     B2 00 A0 FD | 	call	#popregs_
13a60                 | _do_sin_ret
13a60     2D 00 64 FD | 	ret
13a64                 | 
13a64                 | ' 
13a64                 | ' 
13a64                 | ' sub do_mid
13a64                 | _do_mid
13a64     00 4A 05 F6 | 	mov	COUNT_, #0
13a68     A8 00 A0 FD | 	call	#pushregs_
13a6c     18 F0 07 F1 | 	add	ptra, #24
13a70     4A 00 00 FF 
13a74     B0 E4 05 F1 | 	add	objptr, ##38064
13a78     F2 16 02 FB | 	rdlong	arg03, objptr
13a7c     0B 15 02 F6 | 	mov	arg02, arg03
13a80     01 14 66 F0 | 	shl	arg02, #1
13a84     0B 15 02 F1 | 	add	arg02, arg03
13a88     02 14 66 F0 | 	shl	arg02, #2
13a8c     03 00 00 FF 
13a90     04 E4 85 F1 | 	sub	objptr, ##1540
13a94     F2 14 02 F1 | 	add	arg02, objptr
13a98     0A 17 02 FB | 	rdlong	arg03, arg02
13a9c     0C 4E 05 F1 | 	add	fp, #12
13aa0     A7 16 62 FC | 	wrlong	arg03, fp
13aa4                 | ' 
13aa4                 | ' numpar=compiledline(lineptr_e).result.uresult
13aa4                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
13aa4     0C 4E 85 F1 | 	sub	fp, #12
13aa8     03 16 0E F2 | 	cmp	arg03, #3 wz
13aac     47 00 00 FF 
13ab0     AC E4 85 F1 | 	sub	objptr, ##36524
13ab4     3C 00 90 AD |  if_e	jmp	#LR__1580
13ab8     00 12 06 F6 | 	mov	arg01, #0
13abc     A4 0C B1 FD | 	call	#__system___getiolock_0485
13ac0     FD 12 02 F6 | 	mov	arg01, result1
13ac4     04 B3 B0 FD | 	call	#__system___lockmem
13ac8     75 01 00 FF 
13acc     4E 14 06 F6 | 	mov	arg02, ##@LR__5166
13ad0     00 12 06 F6 | 	mov	arg01, #0
13ad4     00 16 06 F6 | 	mov	arg03, #0
13ad8     E4 BF B0 FD | 	call	#__system___basic_print_string
13adc     00 12 06 F6 | 	mov	arg01, #0
13ae0     80 0C B1 FD | 	call	#__system___getiolock_0485
13ae4     FD 00 68 FC | 	wrlong	#0, result1
13ae8     27 12 06 F6 | 	mov	arg01, #39
13aec     34 6E B0 FD | 	call	#_printerror
13af0     28 01 90 FD | 	jmp	#LR__1583
13af4                 | LR__1580
13af4     A0 6D BF FD | 	call	#_pop
13af8     FF 16 02 F6 | 	mov	arg03, result3
13afc     A7 FA 61 FC | 	wrlong	result1, fp
13b00     04 4E 05 F1 | 	add	fp, #4
13b04     A7 FC 61 FC | 	wrlong	result2, fp
13b08     04 4E 05 F1 | 	add	fp, #4
13b0c     A7 16 62 FC | 	wrlong	arg03, fp
13b10     08 4E 85 F1 | 	sub	fp, #8
13b14     A7 12 02 F6 | 	mov	arg01, fp
13b18     18 FA BF FD | 	call	#_converttoint
13b1c     FD 16 02 F6 | 	mov	arg03, result1
13b20     14 4E 05 F1 | 	add	fp, #20
13b24     A7 16 62 FC | 	wrlong	arg03, fp
13b28     14 4E 85 F1 | 	sub	fp, #20
13b2c     68 6D BF FD | 	call	#_pop
13b30     FF 16 02 F6 | 	mov	arg03, result3
13b34     A7 FA 61 FC | 	wrlong	result1, fp
13b38     04 4E 05 F1 | 	add	fp, #4
13b3c     A7 FC 61 FC | 	wrlong	result2, fp
13b40     04 4E 05 F1 | 	add	fp, #4
13b44     A7 16 62 FC | 	wrlong	arg03, fp
13b48     08 4E 85 F1 | 	sub	fp, #8
13b4c     A7 12 02 F6 | 	mov	arg01, fp
13b50     E0 F9 BF FD | 	call	#_converttoint
13b54     FD 16 02 F6 | 	mov	arg03, result1
13b58     10 4E 05 F1 | 	add	fp, #16
13b5c     A7 16 62 FC | 	wrlong	arg03, fp
13b60     10 4E 85 F1 | 	sub	fp, #16
13b64     30 6D BF FD | 	call	#_pop
13b68     FF 16 02 F6 | 	mov	arg03, result3
13b6c     A7 FA 61 FC | 	wrlong	result1, fp
13b70     04 4E 05 F1 | 	add	fp, #4
13b74     A7 FC 61 FC | 	wrlong	result2, fp
13b78     04 4E 05 F1 | 	add	fp, #4
13b7c     A7 16 62 FC | 	wrlong	arg03, fp
13b80                 | ' t1=pop() : arg2=converttoint(t1)
13b80                 | ' t1=pop() : arg1=converttoint(t1)
13b80                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13b80     08 4E 85 F1 | 	sub	fp, #8
13b84     2B 16 0E F2 | 	cmp	arg03, #43 wz
13b88     18 00 90 5D |  if_ne	jmp	#LR__1581
13b8c     A7 12 02 FB | 	rdlong	arg01, fp
13b90     7C B1 BF FD | 	call	#_convertstring
13b94     A7 FA 61 FC | 	wrlong	result1, fp
13b98     08 4E 05 F1 | 	add	fp, #8
13b9c     A7 3E 68 FC | 	wrlong	#31, fp
13ba0     08 4E 85 F1 | 	sub	fp, #8
13ba4                 | LR__1581
13ba4                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13ba4     08 4E 05 F1 | 	add	fp, #8
13ba8     A7 16 02 FB | 	rdlong	arg03, fp
13bac     08 4E 85 F1 | 	sub	fp, #8
13bb0     1F 16 0E F2 | 	cmp	arg03, #31 wz
13bb4     3C 00 90 AD |  if_e	jmp	#LR__1582
13bb8     00 12 06 F6 | 	mov	arg01, #0
13bbc     A4 0B B1 FD | 	call	#__system___getiolock_0485
13bc0     FD 12 02 F6 | 	mov	arg01, result1
13bc4     04 B2 B0 FD | 	call	#__system___lockmem
13bc8     75 01 00 FF 
13bcc     55 14 06 F6 | 	mov	arg02, ##@LR__5167
13bd0     00 12 06 F6 | 	mov	arg01, #0
13bd4     00 16 06 F6 | 	mov	arg03, #0
13bd8     E4 BE B0 FD | 	call	#__system___basic_print_string
13bdc     00 12 06 F6 | 	mov	arg01, #0
13be0     80 0B B1 FD | 	call	#__system___getiolock_0485
13be4     FD 00 68 FC | 	wrlong	#0, result1
13be8     0F 12 06 F6 | 	mov	arg01, #15
13bec     34 6D B0 FD | 	call	#_printerror
13bf0     28 00 90 FD | 	jmp	#LR__1583
13bf4                 | LR__1582
13bf4     A7 12 02 FB | 	rdlong	arg01, fp
13bf8     10 4E 05 F1 | 	add	fp, #16
13bfc     A7 14 02 FB | 	rdlong	arg02, fp
13c00     04 4E 05 F1 | 	add	fp, #4
13c04     A7 16 02 FB | 	rdlong	arg03, fp
13c08     14 4E 85 F1 | 	sub	fp, #20
13c0c     E4 D2 B0 FD | 	call	#__system__Mid_S
13c10     A7 FA 61 FC | 	wrlong	result1, fp
13c14     A7 12 02 F6 | 	mov	arg01, fp
13c18     14 6D BF FD | 	call	#_push
13c1c                 | LR__1583
13c1c     A7 F0 03 F6 | 	mov	ptra, fp
13c20     B2 00 A0 FD | 	call	#popregs_
13c24                 | _do_mid_ret
13c24     2D 00 64 FD | 	ret
13c28                 | 
13c28                 | ' 
13c28                 | ' sub do_right
13c28                 | _do_right
13c28     00 4A 05 F6 | 	mov	COUNT_, #0
13c2c     A8 00 A0 FD | 	call	#pushregs_
13c30     14 F0 07 F1 | 	add	ptra, #20
13c34     4A 00 00 FF 
13c38     B0 E4 05 F1 | 	add	objptr, ##38064
13c3c     F2 16 02 FB | 	rdlong	arg03, objptr
13c40     0B 15 02 F6 | 	mov	arg02, arg03
13c44     01 14 66 F0 | 	shl	arg02, #1
13c48     0B 15 02 F1 | 	add	arg02, arg03
13c4c     02 14 66 F0 | 	shl	arg02, #2
13c50     03 00 00 FF 
13c54     04 E4 85 F1 | 	sub	objptr, ##1540
13c58     F2 14 02 F1 | 	add	arg02, objptr
13c5c     0A 17 02 FB | 	rdlong	arg03, arg02
13c60     0C 4E 05 F1 | 	add	fp, #12
13c64     A7 16 62 FC | 	wrlong	arg03, fp
13c68                 | ' 
13c68                 | ' numpar=compiledline(lineptr_e).result.uresult
13c68                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
13c68     0C 4E 85 F1 | 	sub	fp, #12
13c6c     02 16 0E F2 | 	cmp	arg03, #2 wz
13c70     47 00 00 FF 
13c74     AC E4 85 F1 | 	sub	objptr, ##36524
13c78     3C 00 90 AD |  if_e	jmp	#LR__1590
13c7c     00 12 06 F6 | 	mov	arg01, #0
13c80     E0 0A B1 FD | 	call	#__system___getiolock_0485
13c84     FD 12 02 F6 | 	mov	arg01, result1
13c88     40 B1 B0 FD | 	call	#__system___lockmem
13c8c     75 01 00 FF 
13c90     5C 14 06 F6 | 	mov	arg02, ##@LR__5168
13c94     00 12 06 F6 | 	mov	arg01, #0
13c98     00 16 06 F6 | 	mov	arg03, #0
13c9c     20 BE B0 FD | 	call	#__system___basic_print_string
13ca0     00 12 06 F6 | 	mov	arg01, #0
13ca4     BC 0A B1 FD | 	call	#__system___getiolock_0485
13ca8     FD 00 68 FC | 	wrlong	#0, result1
13cac     27 12 06 F6 | 	mov	arg01, #39
13cb0     70 6C B0 FD | 	call	#_printerror
13cb4     E8 00 90 FD | 	jmp	#LR__1593
13cb8                 | LR__1590
13cb8     DC 6B BF FD | 	call	#_pop
13cbc     FF 16 02 F6 | 	mov	arg03, result3
13cc0     A7 FA 61 FC | 	wrlong	result1, fp
13cc4     04 4E 05 F1 | 	add	fp, #4
13cc8     A7 FC 61 FC | 	wrlong	result2, fp
13ccc     04 4E 05 F1 | 	add	fp, #4
13cd0     A7 16 62 FC | 	wrlong	arg03, fp
13cd4     08 4E 85 F1 | 	sub	fp, #8
13cd8     A7 12 02 F6 | 	mov	arg01, fp
13cdc     54 F8 BF FD | 	call	#_converttoint
13ce0     FD 16 02 F6 | 	mov	arg03, result1
13ce4     10 4E 05 F1 | 	add	fp, #16
13ce8     A7 16 62 FC | 	wrlong	arg03, fp
13cec     10 4E 85 F1 | 	sub	fp, #16
13cf0     A4 6B BF FD | 	call	#_pop
13cf4     FF 16 02 F6 | 	mov	arg03, result3
13cf8     A7 FA 61 FC | 	wrlong	result1, fp
13cfc     04 4E 05 F1 | 	add	fp, #4
13d00     A7 FC 61 FC | 	wrlong	result2, fp
13d04     04 4E 05 F1 | 	add	fp, #4
13d08     A7 16 62 FC | 	wrlong	arg03, fp
13d0c                 | ' t1=pop() : arg=converttoint(t1)
13d0c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13d0c     08 4E 85 F1 | 	sub	fp, #8
13d10     2B 16 0E F2 | 	cmp	arg03, #43 wz
13d14     18 00 90 5D |  if_ne	jmp	#LR__1591
13d18     A7 12 02 FB | 	rdlong	arg01, fp
13d1c     F0 AF BF FD | 	call	#_convertstring
13d20     A7 FA 61 FC | 	wrlong	result1, fp
13d24     08 4E 05 F1 | 	add	fp, #8
13d28     A7 3E 68 FC | 	wrlong	#31, fp
13d2c     08 4E 85 F1 | 	sub	fp, #8
13d30                 | LR__1591
13d30                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
13d30     08 4E 05 F1 | 	add	fp, #8
13d34     A7 16 02 FB | 	rdlong	arg03, fp
13d38     08 4E 85 F1 | 	sub	fp, #8
13d3c     1F 16 0E F2 | 	cmp	arg03, #31 wz
13d40     3C 00 90 AD |  if_e	jmp	#LR__1592
13d44     00 12 06 F6 | 	mov	arg01, #0
13d48     18 0A B1 FD | 	call	#__system___getiolock_0485
13d4c     FD 12 02 F6 | 	mov	arg01, result1
13d50     78 B0 B0 FD | 	call	#__system___lockmem
13d54     75 01 00 FF 
13d58     65 14 06 F6 | 	mov	arg02, ##@LR__5169
13d5c     00 12 06 F6 | 	mov	arg01, #0
13d60     00 16 06 F6 | 	mov	arg03, #0
13d64     58 BD B0 FD | 	call	#__system___basic_print_string
13d68     00 12 06 F6 | 	mov	arg01, #0
13d6c     F4 09 B1 FD | 	call	#__system___getiolock_0485
13d70     FD 00 68 FC | 	wrlong	#0, result1
13d74     0F 12 06 F6 | 	mov	arg01, #15
13d78     A8 6B B0 FD | 	call	#_printerror
13d7c     20 00 90 FD | 	jmp	#LR__1593
13d80                 | LR__1592
13d80     A7 12 02 FB | 	rdlong	arg01, fp
13d84     10 4E 05 F1 | 	add	fp, #16
13d88     A7 14 02 FB | 	rdlong	arg02, fp
13d8c     10 4E 85 F1 | 	sub	fp, #16
13d90     D0 D0 B0 FD | 	call	#__system__Right_S
13d94     A7 FA 61 FC | 	wrlong	result1, fp
13d98     A7 12 02 F6 | 	mov	arg01, fp
13d9c     90 6B BF FD | 	call	#_push
13da0                 | LR__1593
13da0     A7 F0 03 F6 | 	mov	ptra, fp
13da4     B2 00 A0 FD | 	call	#popregs_
13da8                 | _do_right_ret
13da8     2D 00 64 FD | 	ret
13dac                 | 
13dac                 | ' 
13dac                 | ' sub do_left
13dac                 | _do_left
13dac     00 4A 05 F6 | 	mov	COUNT_, #0
13db0     A8 00 A0 FD | 	call	#pushregs_
13db4     14 F0 07 F1 | 	add	ptra, #20
13db8     4A 00 00 FF 
13dbc     B0 E4 05 F1 | 	add	objptr, ##38064
13dc0     F2 16 02 FB | 	rdlong	arg03, objptr
13dc4     0B 15 02 F6 | 	mov	arg02, arg03
13dc8     01 14 66 F0 | 	shl	arg02, #1
13dcc     0B 15 02 F1 | 	add	arg02, arg03
13dd0     02 14 66 F0 | 	shl	arg02, #2
13dd4     03 00 00 FF 
13dd8     04 E4 85 F1 | 	sub	objptr, ##1540
13ddc     F2 14 02 F1 | 	add	arg02, objptr
13de0     0A 17 02 FB | 	rdlong	arg03, arg02
13de4     0C 4E 05 F1 | 	add	fp, #12
13de8     A7 16 62 FC | 	wrlong	arg03, fp
13dec                 | ' 
13dec                 | ' numpar=compiledline(lineptr_e).result.uresult
13dec                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13dec     0C 4E 85 F1 | 	sub	fp, #12
13df0     02 16 0E F2 | 	cmp	arg03, #2 wz
13df4     47 00 00 FF 
13df8     AC E4 85 F1 | 	sub	objptr, ##36524
13dfc     3C 00 90 AD |  if_e	jmp	#LR__1600
13e00     00 12 06 F6 | 	mov	arg01, #0
13e04     5C 09 B1 FD | 	call	#__system___getiolock_0485
13e08     FD 12 02 F6 | 	mov	arg01, result1
13e0c     BC AF B0 FD | 	call	#__system___lockmem
13e10     75 01 00 FF 
13e14     6E 14 06 F6 | 	mov	arg02, ##@LR__5170
13e18     00 12 06 F6 | 	mov	arg01, #0
13e1c     00 16 06 F6 | 	mov	arg03, #0
13e20     9C BC B0 FD | 	call	#__system___basic_print_string
13e24     00 12 06 F6 | 	mov	arg01, #0
13e28     38 09 B1 FD | 	call	#__system___getiolock_0485
13e2c     FD 00 68 FC | 	wrlong	#0, result1
13e30     27 12 06 F6 | 	mov	arg01, #39
13e34     EC 6A B0 FD | 	call	#_printerror
13e38     E8 00 90 FD | 	jmp	#LR__1603
13e3c                 | LR__1600
13e3c     58 6A BF FD | 	call	#_pop
13e40     FF 16 02 F6 | 	mov	arg03, result3
13e44     A7 FA 61 FC | 	wrlong	result1, fp
13e48     04 4E 05 F1 | 	add	fp, #4
13e4c     A7 FC 61 FC | 	wrlong	result2, fp
13e50     04 4E 05 F1 | 	add	fp, #4
13e54     A7 16 62 FC | 	wrlong	arg03, fp
13e58     08 4E 85 F1 | 	sub	fp, #8
13e5c     A7 12 02 F6 | 	mov	arg01, fp
13e60     D0 F6 BF FD | 	call	#_converttoint
13e64     FD 16 02 F6 | 	mov	arg03, result1
13e68     10 4E 05 F1 | 	add	fp, #16
13e6c     A7 16 62 FC | 	wrlong	arg03, fp
13e70     10 4E 85 F1 | 	sub	fp, #16
13e74     20 6A BF FD | 	call	#_pop
13e78     FF 16 02 F6 | 	mov	arg03, result3
13e7c     A7 FA 61 FC | 	wrlong	result1, fp
13e80     04 4E 05 F1 | 	add	fp, #4
13e84     A7 FC 61 FC | 	wrlong	result2, fp
13e88     04 4E 05 F1 | 	add	fp, #4
13e8c     A7 16 62 FC | 	wrlong	arg03, fp
13e90                 | ' t1=pop() : arg=converttoint(t1)
13e90                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13e90     08 4E 85 F1 | 	sub	fp, #8
13e94     2B 16 0E F2 | 	cmp	arg03, #43 wz
13e98     18 00 90 5D |  if_ne	jmp	#LR__1601
13e9c     A7 12 02 FB | 	rdlong	arg01, fp
13ea0     6C AE BF FD | 	call	#_convertstring
13ea4     A7 FA 61 FC | 	wrlong	result1, fp
13ea8     08 4E 05 F1 | 	add	fp, #8
13eac     A7 3E 68 FC | 	wrlong	#31, fp
13eb0     08 4E 85 F1 | 	sub	fp, #8
13eb4                 | LR__1601
13eb4                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
13eb4     08 4E 05 F1 | 	add	fp, #8
13eb8     A7 16 02 FB | 	rdlong	arg03, fp
13ebc     08 4E 85 F1 | 	sub	fp, #8
13ec0     1F 16 0E F2 | 	cmp	arg03, #31 wz
13ec4     3C 00 90 AD |  if_e	jmp	#LR__1602
13ec8     00 12 06 F6 | 	mov	arg01, #0
13ecc     94 08 B1 FD | 	call	#__system___getiolock_0485
13ed0     FD 12 02 F6 | 	mov	arg01, result1
13ed4     F4 AE B0 FD | 	call	#__system___lockmem
13ed8     75 01 00 FF 
13edc     76 14 06 F6 | 	mov	arg02, ##@LR__5171
13ee0     00 12 06 F6 | 	mov	arg01, #0
13ee4     00 16 06 F6 | 	mov	arg03, #0
13ee8     D4 BB B0 FD | 	call	#__system___basic_print_string
13eec     00 12 06 F6 | 	mov	arg01, #0
13ef0     70 08 B1 FD | 	call	#__system___getiolock_0485
13ef4     FD 00 68 FC | 	wrlong	#0, result1
13ef8     0F 12 06 F6 | 	mov	arg01, #15
13efc     24 6A B0 FD | 	call	#_printerror
13f00     20 00 90 FD | 	jmp	#LR__1603
13f04                 | LR__1602
13f04     A7 12 02 FB | 	rdlong	arg01, fp
13f08     10 4E 05 F1 | 	add	fp, #16
13f0c     A7 14 02 FB | 	rdlong	arg02, fp
13f10     10 4E 85 F1 | 	sub	fp, #16
13f14     C4 CE B0 FD | 	call	#__system__Left_S
13f18     A7 FA 61 FC | 	wrlong	result1, fp
13f1c     A7 12 02 F6 | 	mov	arg01, fp
13f20     0C 6A BF FD | 	call	#_push
13f24                 | LR__1603
13f24     A7 F0 03 F6 | 	mov	ptra, fp
13f28     B2 00 A0 FD | 	call	#popregs_
13f2c                 | _do_left_ret
13f2c     2D 00 64 FD | 	ret
13f30                 | 
13f30                 | ' 
13f30                 | ' sub do_asc
13f30                 | _do_asc
13f30     01 4A 05 F6 | 	mov	COUNT_, #1
13f34     A8 00 A0 FD | 	call	#pushregs_
13f38     14 F0 07 F1 | 	add	ptra, #20
13f3c     4A 00 00 FF 
13f40     B0 E4 05 F1 | 	add	objptr, ##38064
13f44     F2 1E 02 FB | 	rdlong	local01, objptr
13f48     0F 17 02 F6 | 	mov	arg03, local01
13f4c     01 16 66 F0 | 	shl	arg03, #1
13f50     0F 17 02 F1 | 	add	arg03, local01
13f54     02 16 66 F0 | 	shl	arg03, #2
13f58     03 00 00 FF 
13f5c     04 E4 85 F1 | 	sub	objptr, ##1540
13f60     F2 16 02 F1 | 	add	arg03, objptr
13f64     0B 17 02 FB | 	rdlong	arg03, arg03
13f68     0C 4E 05 F1 | 	add	fp, #12
13f6c     A7 16 62 FC | 	wrlong	arg03, fp
13f70                 | ' 
13f70                 | ' numpar=compiledline(lineptr_e).result.uresult
13f70                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
13f70     0C 4E 85 F1 | 	sub	fp, #12
13f74     02 16 16 F2 | 	cmp	arg03, #2 wc
13f78     47 00 00 FF 
13f7c     AC E4 85 F1 | 	sub	objptr, ##36524
13f80     0C 4E 05 C1 |  if_b	add	fp, #12
13f84     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13f88     0C 4E 85 C1 |  if_b	sub	fp, #12
13f8c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1610
13f90     00 12 06 F6 | 	mov	arg01, #0
13f94     CC 07 B1 FD | 	call	#__system___getiolock_0485
13f98     FD 12 02 F6 | 	mov	arg01, result1
13f9c     2C AE B0 FD | 	call	#__system___lockmem
13fa0     75 01 00 FF 
13fa4     7E 14 06 F6 | 	mov	arg02, ##@LR__5172
13fa8     00 12 06 F6 | 	mov	arg01, #0
13fac     00 16 06 F6 | 	mov	arg03, #0
13fb0     0C BB B0 FD | 	call	#__system___basic_print_string
13fb4     00 12 06 F6 | 	mov	arg01, #0
13fb8     A8 07 B1 FD | 	call	#__system___getiolock_0485
13fbc     FD 00 68 FC | 	wrlong	#0, result1
13fc0     27 12 06 F6 | 	mov	arg01, #39
13fc4     5C 69 B0 FD | 	call	#_printerror
13fc8     B0 00 90 FD | 	jmp	#LR__1613
13fcc                 | LR__1610
13fcc     C8 68 BF FD | 	call	#_pop
13fd0     FF 16 02 F6 | 	mov	arg03, result3
13fd4     A7 FA 61 FC | 	wrlong	result1, fp
13fd8     04 4E 05 F1 | 	add	fp, #4
13fdc     A7 FC 61 FC | 	wrlong	result2, fp
13fe0     04 4E 05 F1 | 	add	fp, #4
13fe4     A7 16 62 FC | 	wrlong	arg03, fp
13fe8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13fe8     08 4E 85 F1 | 	sub	fp, #8
13fec     2B 16 0E F2 | 	cmp	arg03, #43 wz
13ff0     18 00 90 5D |  if_ne	jmp	#LR__1611
13ff4     A7 12 02 FB | 	rdlong	arg01, fp
13ff8     14 AD BF FD | 	call	#_convertstring
13ffc     A7 FA 61 FC | 	wrlong	result1, fp
14000     08 4E 05 F1 | 	add	fp, #8
14004     A7 3E 68 FC | 	wrlong	#31, fp
14008     08 4E 85 F1 | 	sub	fp, #8
1400c                 | LR__1611
1400c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
1400c     08 4E 05 F1 | 	add	fp, #8
14010     A7 16 02 FB | 	rdlong	arg03, fp
14014     08 4E 85 F1 | 	sub	fp, #8
14018     1F 16 0E F2 | 	cmp	arg03, #31 wz
1401c     3C 00 90 AD |  if_e	jmp	#LR__1612
14020     00 12 06 F6 | 	mov	arg01, #0
14024     3C 07 B1 FD | 	call	#__system___getiolock_0485
14028     FD 12 02 F6 | 	mov	arg01, result1
1402c     9C AD B0 FD | 	call	#__system___lockmem
14030     75 01 00 FF 
14034     84 14 06 F6 | 	mov	arg02, ##@LR__5173
14038     00 12 06 F6 | 	mov	arg01, #0
1403c     00 16 06 F6 | 	mov	arg03, #0
14040     7C BA B0 FD | 	call	#__system___basic_print_string
14044     00 12 06 F6 | 	mov	arg01, #0
14048     18 07 B1 FD | 	call	#__system___getiolock_0485
1404c     FD 00 68 FC | 	wrlong	#0, result1
14050     0F 12 06 F6 | 	mov	arg01, #15
14054     CC 68 B0 FD | 	call	#_printerror
14058     20 00 90 FD | 	jmp	#LR__1613
1405c                 | LR__1612
1405c     A7 1E 02 FB | 	rdlong	local01, fp
14060     0F 1F C2 FA | 	rdbyte	local01, local01
14064     A7 1E 62 FC | 	wrlong	local01, fp
14068     08 4E 05 F1 | 	add	fp, #8
1406c     A7 38 68 FC | 	wrlong	#28, fp
14070     08 4E 85 F1 | 	sub	fp, #8
14074     A7 12 02 F6 | 	mov	arg01, fp
14078     B4 68 BF FD | 	call	#_push
1407c                 | LR__1613
1407c     A7 F0 03 F6 | 	mov	ptra, fp
14080     B2 00 A0 FD | 	call	#popregs_
14084                 | _do_asc_ret
14084     2D 00 64 FD | 	ret
14088                 | 
14088                 | ' 
14088                 | ' sub do_len
14088                 | _do_len
14088     02 4A 05 F6 | 	mov	COUNT_, #2
1408c     A8 00 A0 FD | 	call	#pushregs_
14090     14 F0 07 F1 | 	add	ptra, #20
14094     4A 00 00 FF 
14098     B0 E4 05 F1 | 	add	objptr, ##38064
1409c     F2 1E 02 FB | 	rdlong	local01, objptr
140a0     0F 17 02 F6 | 	mov	arg03, local01
140a4     01 16 66 F0 | 	shl	arg03, #1
140a8     0F 17 02 F1 | 	add	arg03, local01
140ac     02 16 66 F0 | 	shl	arg03, #2
140b0     03 00 00 FF 
140b4     04 E4 85 F1 | 	sub	objptr, ##1540
140b8     F2 16 02 F1 | 	add	arg03, objptr
140bc     0B 17 02 FB | 	rdlong	arg03, arg03
140c0     0C 4E 05 F1 | 	add	fp, #12
140c4     A7 16 62 FC | 	wrlong	arg03, fp
140c8                 | ' 
140c8                 | ' numpar=compiledline(lineptr_e).result.uresult
140c8                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
140c8     0C 4E 85 F1 | 	sub	fp, #12
140cc     02 16 16 F2 | 	cmp	arg03, #2 wc
140d0     47 00 00 FF 
140d4     AC E4 85 F1 | 	sub	objptr, ##36524
140d8     0C 4E 05 C1 |  if_b	add	fp, #12
140dc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
140e0     0C 4E 85 C1 |  if_b	sub	fp, #12
140e4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1620
140e8     00 12 06 F6 | 	mov	arg01, #0
140ec     74 06 B1 FD | 	call	#__system___getiolock_0485
140f0     FD 12 02 F6 | 	mov	arg01, result1
140f4     D4 AC B0 FD | 	call	#__system___lockmem
140f8     75 01 00 FF 
140fc     8A 14 06 F6 | 	mov	arg02, ##@LR__5174
14100     00 12 06 F6 | 	mov	arg01, #0
14104     00 16 06 F6 | 	mov	arg03, #0
14108     B4 B9 B0 FD | 	call	#__system___basic_print_string
1410c     00 12 06 F6 | 	mov	arg01, #0
14110     50 06 B1 FD | 	call	#__system___getiolock_0485
14114     FD 00 68 FC | 	wrlong	#0, result1
14118     27 12 06 F6 | 	mov	arg01, #39
1411c     04 68 B0 FD | 	call	#_printerror
14120     C4 00 90 FD | 	jmp	#LR__1625
14124                 | LR__1620
14124     70 67 BF FD | 	call	#_pop
14128     FF 16 02 F6 | 	mov	arg03, result3
1412c     A7 FA 61 FC | 	wrlong	result1, fp
14130     04 4E 05 F1 | 	add	fp, #4
14134     A7 FC 61 FC | 	wrlong	result2, fp
14138     04 4E 05 F1 | 	add	fp, #4
1413c     A7 16 62 FC | 	wrlong	arg03, fp
14140                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14140     08 4E 85 F1 | 	sub	fp, #8
14144     2B 16 0E F2 | 	cmp	arg03, #43 wz
14148     18 00 90 5D |  if_ne	jmp	#LR__1621
1414c     A7 12 02 FB | 	rdlong	arg01, fp
14150     BC AB BF FD | 	call	#_convertstring
14154     A7 FA 61 FC | 	wrlong	result1, fp
14158     08 4E 05 F1 | 	add	fp, #8
1415c     A7 3E 68 FC | 	wrlong	#31, fp
14160     08 4E 85 F1 | 	sub	fp, #8
14164                 | LR__1621
14164                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14164     08 4E 05 F1 | 	add	fp, #8
14168     A7 16 02 FB | 	rdlong	arg03, fp
1416c     08 4E 85 F1 | 	sub	fp, #8
14170     1F 16 0E F2 | 	cmp	arg03, #31 wz
14174     3C 00 90 AD |  if_e	jmp	#LR__1622
14178     00 12 06 F6 | 	mov	arg01, #0
1417c     E4 05 B1 FD | 	call	#__system___getiolock_0485
14180     FD 12 02 F6 | 	mov	arg01, result1
14184     44 AC B0 FD | 	call	#__system___lockmem
14188     75 01 00 FF 
1418c     90 14 06 F6 | 	mov	arg02, ##@LR__5175
14190     00 12 06 F6 | 	mov	arg01, #0
14194     00 16 06 F6 | 	mov	arg03, #0
14198     24 B9 B0 FD | 	call	#__system___basic_print_string
1419c     00 12 06 F6 | 	mov	arg01, #0
141a0     C0 05 B1 FD | 	call	#__system___getiolock_0485
141a4     FD 00 68 FC | 	wrlong	#0, result1
141a8     0F 12 06 F6 | 	mov	arg01, #15
141ac     74 67 B0 FD | 	call	#_printerror
141b0     34 00 90 FD | 	jmp	#LR__1625
141b4                 | LR__1622
141b4     A7 12 02 FB | 	rdlong	arg01, fp
141b8     09 21 02 F6 | 	mov	local02, arg01
141bc     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
141c0                 | LR__1623
141c0     10 FB C9 FA | 	rdbyte	result1, local02 wz
141c4     01 20 06 51 |  if_ne	add	local02, #1
141c8     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
141cc                 | LR__1624
141cc     09 21 82 F1 | 	sub	local02, arg01
141d0     A7 20 62 FC | 	wrlong	local02, fp
141d4     08 4E 05 F1 | 	add	fp, #8
141d8     A7 38 68 FC | 	wrlong	#28, fp
141dc     08 4E 85 F1 | 	sub	fp, #8
141e0     A7 12 02 F6 | 	mov	arg01, fp
141e4     48 67 BF FD | 	call	#_push
141e8                 | LR__1625
141e8     A7 F0 03 F6 | 	mov	ptra, fp
141ec     B2 00 A0 FD | 	call	#popregs_
141f0                 | _do_len_ret
141f0     2D 00 64 FD | 	ret
141f4                 | 
141f4                 | ' 
141f4                 | ' sub do_chr
141f4                 | _do_chr
141f4     01 4A 05 F6 | 	mov	COUNT_, #1
141f8     A8 00 A0 FD | 	call	#pushregs_
141fc     14 F0 07 F1 | 	add	ptra, #20
14200     4A 00 00 FF 
14204     B0 E4 05 F1 | 	add	objptr, ##38064
14208     F2 1E 02 FB | 	rdlong	local01, objptr
1420c     0F 17 02 F6 | 	mov	arg03, local01
14210     01 16 66 F0 | 	shl	arg03, #1
14214     0F 17 02 F1 | 	add	arg03, local01
14218     02 16 66 F0 | 	shl	arg03, #2
1421c     03 00 00 FF 
14220     04 E4 85 F1 | 	sub	objptr, ##1540
14224     F2 16 02 F1 | 	add	arg03, objptr
14228     0B 17 02 FB | 	rdlong	arg03, arg03
1422c     0C 4E 05 F1 | 	add	fp, #12
14230     A7 16 62 FC | 	wrlong	arg03, fp
14234                 | ' 
14234                 | ' numpar=compiledline(lineptr_e).result.uresult
14234                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
14234     0C 4E 85 F1 | 	sub	fp, #12
14238     02 16 16 F2 | 	cmp	arg03, #2 wc
1423c     47 00 00 FF 
14240     AC E4 85 F1 | 	sub	objptr, ##36524
14244     0C 4E 05 C1 |  if_b	add	fp, #12
14248     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1424c     0C 4E 85 C1 |  if_b	sub	fp, #12
14250     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1630
14254     00 12 06 F6 | 	mov	arg01, #0
14258     08 05 B1 FD | 	call	#__system___getiolock_0485
1425c     FD 12 02 F6 | 	mov	arg01, result1
14260     68 AB B0 FD | 	call	#__system___lockmem
14264     75 01 00 FF 
14268     96 14 06 F6 | 	mov	arg02, ##@LR__5176
1426c     00 12 06 F6 | 	mov	arg01, #0
14270     00 16 06 F6 | 	mov	arg03, #0
14274     48 B8 B0 FD | 	call	#__system___basic_print_string
14278     00 12 06 F6 | 	mov	arg01, #0
1427c     E4 04 B1 FD | 	call	#__system___getiolock_0485
14280     FD 00 68 FC | 	wrlong	#0, result1
14284     27 12 06 F6 | 	mov	arg01, #39
14288     98 66 B0 FD | 	call	#_printerror
1428c     54 00 90 FD | 	jmp	#LR__1631
14290                 | LR__1630
14290     04 66 BF FD | 	call	#_pop
14294     FF 1E 02 F6 | 	mov	local01, result3
14298     A7 FA 61 FC | 	wrlong	result1, fp
1429c     04 4E 05 F1 | 	add	fp, #4
142a0     A7 FC 61 FC | 	wrlong	result2, fp
142a4     04 4E 05 F1 | 	add	fp, #4
142a8     A7 1E 62 FC | 	wrlong	local01, fp
142ac     08 4E 85 F1 | 	sub	fp, #8
142b0     A7 12 02 F6 | 	mov	arg01, fp
142b4     7C F2 BF FD | 	call	#_converttoint
142b8     10 4E 05 F1 | 	add	fp, #16
142bc     A7 FA 61 FC | 	wrlong	result1, fp
142c0     FD 12 02 F6 | 	mov	arg01, result1
142c4     10 4E 85 F1 | 	sub	fp, #16
142c8     D4 CC B0 FD | 	call	#__system__Chr_S
142cc     A7 FA 61 FC | 	wrlong	result1, fp
142d0     08 4E 05 F1 | 	add	fp, #8
142d4     A7 3E 68 FC | 	wrlong	#31, fp
142d8     08 4E 85 F1 | 	sub	fp, #8
142dc     A7 12 02 F6 | 	mov	arg01, fp
142e0     4C 66 BF FD | 	call	#_push
142e4                 | LR__1631
142e4     A7 F0 03 F6 | 	mov	ptra, fp
142e8     B2 00 A0 FD | 	call	#popregs_
142ec                 | _do_chr_ret
142ec     2D 00 64 FD | 	ret
142f0                 | 
142f0                 | ' 
142f0                 | ' sub do_val
142f0                 | _do_val
142f0     03 4A 05 F6 | 	mov	COUNT_, #3
142f4     A8 00 A0 FD | 	call	#pushregs_
142f8     20 F0 07 F1 | 	add	ptra, #32
142fc     4A 00 00 FF 
14300     B0 E4 05 F1 | 	add	objptr, ##38064
14304     F2 16 02 FB | 	rdlong	arg03, objptr
14308     0B 1F 02 F6 | 	mov	local01, arg03
1430c     01 1E 66 F0 | 	shl	local01, #1
14310     0B 1F 02 F1 | 	add	local01, arg03
14314     02 1E 66 F0 | 	shl	local01, #2
14318     03 00 00 FF 
1431c     04 E4 85 F1 | 	sub	objptr, ##1540
14320     F2 1E 02 F1 | 	add	local01, objptr
14324     0F 17 02 FB | 	rdlong	arg03, local01
14328     0C 4E 05 F1 | 	add	fp, #12
1432c     A7 16 62 FC | 	wrlong	arg03, fp
14330                 | ' 
14330                 | ' numpar=compiledline(lineptr_e).result.uresult
14330                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
14330     0C 4E 85 F1 | 	sub	fp, #12
14334     02 16 16 F2 | 	cmp	arg03, #2 wc
14338     47 00 00 FF 
1433c     AC E4 85 F1 | 	sub	objptr, ##36524
14340     0C 4E 05 C1 |  if_b	add	fp, #12
14344     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14348     0C 4E 85 C1 |  if_b	sub	fp, #12
1434c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1640
14350     00 12 06 F6 | 	mov	arg01, #0
14354     0C 04 B1 FD | 	call	#__system___getiolock_0485
14358     FD 12 02 F6 | 	mov	arg01, result1
1435c     6C AA B0 FD | 	call	#__system___lockmem
14360     75 01 00 FF 
14364     9D 14 06 F6 | 	mov	arg02, ##@LR__5177
14368     00 12 06 F6 | 	mov	arg01, #0
1436c     00 16 06 F6 | 	mov	arg03, #0
14370     4C B7 B0 FD | 	call	#__system___basic_print_string
14374     00 12 06 F6 | 	mov	arg01, #0
14378     E8 03 B1 FD | 	call	#__system___getiolock_0485
1437c     FD 00 68 FC | 	wrlong	#0, result1
14380     27 12 06 F6 | 	mov	arg01, #39
14384     9C 65 B0 FD | 	call	#_printerror
14388     5C 02 90 FD | 	jmp	#LR__1653
1438c                 | LR__1640
1438c     08 65 BF FD | 	call	#_pop
14390     FF 16 02 F6 | 	mov	arg03, result3
14394     A7 FA 61 FC | 	wrlong	result1, fp
14398     04 4E 05 F1 | 	add	fp, #4
1439c     A7 FC 61 FC | 	wrlong	result2, fp
143a0     04 4E 05 F1 | 	add	fp, #4
143a4     A7 16 62 FC | 	wrlong	arg03, fp
143a8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
143a8     08 4E 85 F1 | 	sub	fp, #8
143ac     2B 16 0E F2 | 	cmp	arg03, #43 wz
143b0     18 00 90 5D |  if_ne	jmp	#LR__1641
143b4     A7 12 02 FB | 	rdlong	arg01, fp
143b8     54 A9 BF FD | 	call	#_convertstring
143bc     A7 FA 61 FC | 	wrlong	result1, fp
143c0     08 4E 05 F1 | 	add	fp, #8
143c4     A7 3E 68 FC | 	wrlong	#31, fp
143c8     08 4E 85 F1 | 	sub	fp, #8
143cc                 | LR__1641
143cc                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
143cc     08 4E 05 F1 | 	add	fp, #8
143d0     A7 16 02 FB | 	rdlong	arg03, fp
143d4     08 4E 85 F1 | 	sub	fp, #8
143d8     1F 16 0E F2 | 	cmp	arg03, #31 wz
143dc     3C 00 90 AD |  if_e	jmp	#LR__1642
143e0     00 12 06 F6 | 	mov	arg01, #0
143e4     7C 03 B1 FD | 	call	#__system___getiolock_0485
143e8     FD 12 02 F6 | 	mov	arg01, result1
143ec     DC A9 B0 FD | 	call	#__system___lockmem
143f0     75 01 00 FF 
143f4     A3 14 06 F6 | 	mov	arg02, ##@LR__5178
143f8     00 12 06 F6 | 	mov	arg01, #0
143fc     00 16 06 F6 | 	mov	arg03, #0
14400     BC B6 B0 FD | 	call	#__system___basic_print_string
14404     00 12 06 F6 | 	mov	arg01, #0
14408     58 03 B1 FD | 	call	#__system___getiolock_0485
1440c     FD 00 68 FC | 	wrlong	#0, result1
14410     0F 12 06 F6 | 	mov	arg01, #15
14414     0C 65 B0 FD | 	call	#_printerror
14418     CC 01 90 FD | 	jmp	#LR__1653
1441c                 | LR__1642
1441c                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1441c     A7 12 02 FB | 	rdlong	arg01, fp
14420     01 14 06 F6 | 	mov	arg02, #1
14424     B4 C9 B0 FD | 	call	#__system__Left_S
14428     FD 12 02 F6 | 	mov	arg01, result1
1442c     75 01 00 FF 
14430     A9 14 06 F6 | 	mov	arg02, ##@LR__5179
14434     BC A9 B0 FD | 	call	#__system___string_cmp
14438     00 FA 0D F2 | 	cmp	result1, #0 wz
1443c     48 00 90 5D |  if_ne	jmp	#LR__1645
14440     75 01 00 FF 
14444     AB 1E 06 F6 | 	mov	local01, ##@LR__5180
14448     A7 16 02 FB | 	rdlong	arg03, fp
1444c     0B 13 02 F6 | 	mov	arg01, arg03
14450     09 21 02 F6 | 	mov	local02, arg01
14454     97 06 48 FB | 	callpa	#(@LR__1644-@LR__1643)>>2,fcache_load_ptr_
14458                 | LR__1643
14458     10 FB C9 FA | 	rdbyte	result1, local02 wz
1445c     01 20 06 51 |  if_ne	add	local02, #1
14460     F4 FF 9F 5D |  if_ne	jmp	#LR__1643
14464                 | LR__1644
14464     09 21 82 F1 | 	sub	local02, arg01
14468     10 15 02 F6 | 	mov	arg02, local02
1446c     01 14 86 F1 | 	sub	arg02, #1
14470     0B 13 02 F6 | 	mov	arg01, arg03
14474     EC C9 B0 FD | 	call	#__system__Right_S
14478     FD 14 02 F6 | 	mov	arg02, result1
1447c     0F 13 02 F6 | 	mov	arg01, local01
14480     A4 A9 B0 FD | 	call	#__system___string_concat
14484     A7 FA 61 FC | 	wrlong	result1, fp
14488                 | LR__1645
14488                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
14488     A7 12 02 FB | 	rdlong	arg01, fp
1448c     01 14 06 F6 | 	mov	arg02, #1
14490     48 C9 B0 FD | 	call	#__system__Left_S
14494     FD 12 02 F6 | 	mov	arg01, result1
14498     75 01 00 FF 
1449c     AE 14 06 F6 | 	mov	arg02, ##@LR__5181
144a0     50 A9 B0 FD | 	call	#__system___string_cmp
144a4     00 FA 0D F2 | 	cmp	result1, #0 wz
144a8     48 00 90 5D |  if_ne	jmp	#LR__1648
144ac     75 01 00 FF 
144b0     B0 1E 06 F6 | 	mov	local01, ##@LR__5182
144b4     A7 16 02 FB | 	rdlong	arg03, fp
144b8     0B 13 02 F6 | 	mov	arg01, arg03
144bc     09 21 02 F6 | 	mov	local02, arg01
144c0     97 06 48 FB | 	callpa	#(@LR__1647-@LR__1646)>>2,fcache_load_ptr_
144c4                 | LR__1646
144c4     10 FB C9 FA | 	rdbyte	result1, local02 wz
144c8     01 20 06 51 |  if_ne	add	local02, #1
144cc     F4 FF 9F 5D |  if_ne	jmp	#LR__1646
144d0                 | LR__1647
144d0     09 21 82 F1 | 	sub	local02, arg01
144d4     10 15 02 F6 | 	mov	arg02, local02
144d8     01 14 86 F1 | 	sub	arg02, #1
144dc     0B 13 02 F6 | 	mov	arg01, arg03
144e0     80 C9 B0 FD | 	call	#__system__Right_S
144e4     FD 14 02 F6 | 	mov	arg02, result1
144e8     0F 13 02 F6 | 	mov	arg01, local01
144ec     38 A9 B0 FD | 	call	#__system___string_concat
144f0     A7 FA 61 FC | 	wrlong	result1, fp
144f4                 | LR__1648
144f4     A7 12 02 FB | 	rdlong	arg01, fp
144f8     00 DC B0 FD | 	call	#__system____builtin_atof
144fc     1C 4E 05 F1 | 	add	fp, #28
14500     A7 FA 61 FC | 	wrlong	result1, fp
14504     1C 4E 85 F1 | 	sub	fp, #28
14508     A7 12 02 FB | 	rdlong	arg01, fp
1450c     00 14 06 F6 | 	mov	arg02, #0
14510     78 DA B0 FD | 	call	#__system____builtin_atoi
14514     18 4E 05 F1 | 	add	fp, #24
14518     A7 FA 61 FC | 	wrlong	result1, fp
1451c                 | ' fval=val(t1.result.sresult)
1451c                 | ' ival=val%(t1.result.sresult)
1451c                 | ' if fval=ival then
1451c     04 4E 05 F1 | 	add	fp, #4
14520     A7 1E 02 FB | 	rdlong	local01, fp
14524     1C 4E 85 F1 | 	sub	fp, #28
14528     FD 12 52 F6 | 	abs	arg01, result1 wc
1452c     1F 22 C6 C9 |  if_b	decod	local03, #31
14530     00 22 06 36 |  if_ae	mov	local03, #0
14534     D8 CF B0 FD | 	call	#__system___float_fromuns
14538     11 FB 61 F5 | 	xor	result1, local03
1453c     FD 14 02 F6 | 	mov	arg02, result1
14540     0F 13 02 F6 | 	mov	arg01, local01
14544     01 16 06 F6 | 	mov	arg03, #1
14548     FC D7 B0 FD | 	call	#__system___float_cmp
1454c     00 FA 0D F2 | 	cmp	result1, #0 wz
14550     20 00 90 5D |  if_ne	jmp	#LR__1649
14554     18 4E 05 F1 | 	add	fp, #24
14558     A7 1E 02 FB | 	rdlong	local01, fp
1455c     18 4E 85 F1 | 	sub	fp, #24
14560     A7 1E 62 FC | 	wrlong	local01, fp
14564     08 4E 05 F1 | 	add	fp, #8
14568     A7 38 68 FC | 	wrlong	#28, fp
1456c     08 4E 85 F1 | 	sub	fp, #8
14570     6C 00 90 FD | 	jmp	#LR__1652
14574                 | LR__1649
14574                 | '   if fval=0 andalso ival<>0 then
14574     1C 4E 05 F1 | 	add	fp, #28
14578     A7 12 02 FB | 	rdlong	arg01, fp
1457c     1C 4E 85 F1 | 	sub	fp, #28
14580     00 14 06 F6 | 	mov	arg02, #0
14584     01 16 06 F6 | 	mov	arg03, #1
14588     BC D7 B0 FD | 	call	#__system___float_cmp
1458c     00 FA 0D F2 | 	cmp	result1, #0 wz
14590     30 00 90 5D |  if_ne	jmp	#LR__1650
14594     18 4E 05 F1 | 	add	fp, #24
14598     A7 1E 0A FB | 	rdlong	local01, fp wz
1459c     18 4E 85 F1 | 	sub	fp, #24
145a0     20 00 90 AD |  if_e	jmp	#LR__1650
145a4     18 4E 05 F1 | 	add	fp, #24
145a8     A7 1E 02 FB | 	rdlong	local01, fp
145ac     18 4E 85 F1 | 	sub	fp, #24
145b0     A7 1E 62 FC | 	wrlong	local01, fp
145b4     08 4E 05 F1 | 	add	fp, #8
145b8     A7 38 68 FC | 	wrlong	#28, fp
145bc     08 4E 85 F1 | 	sub	fp, #8
145c0     1C 00 90 FD | 	jmp	#LR__1651
145c4                 | LR__1650
145c4     1C 4E 05 F1 | 	add	fp, #28
145c8     A7 1E 02 FB | 	rdlong	local01, fp
145cc     1C 4E 85 F1 | 	sub	fp, #28
145d0     A7 1E 62 FC | 	wrlong	local01, fp
145d4     08 4E 05 F1 | 	add	fp, #8
145d8     A7 3C 68 FC | 	wrlong	#30, fp
145dc     08 4E 85 F1 | 	sub	fp, #8
145e0                 | LR__1651
145e0                 | LR__1652
145e0     A7 12 02 F6 | 	mov	arg01, fp
145e4     48 63 BF FD | 	call	#_push
145e8                 | LR__1653
145e8     A7 F0 03 F6 | 	mov	ptra, fp
145ec     B2 00 A0 FD | 	call	#popregs_
145f0                 | _do_val_ret
145f0     2D 00 64 FD | 	ret
145f4                 | 
145f4                 | ' 
145f4                 | ' 
145f4                 | ' sub do_hex
145f4                 | _do_hex
145f4     01 4A 05 F6 | 	mov	COUNT_, #1
145f8     A8 00 A0 FD | 	call	#pushregs_
145fc     18 F0 07 F1 | 	add	ptra, #24
14600     4A 00 00 FF 
14604     B0 E4 05 F1 | 	add	objptr, ##38064
14608     F2 1E 02 FB | 	rdlong	local01, objptr
1460c     0F 17 02 F6 | 	mov	arg03, local01
14610     01 16 66 F0 | 	shl	arg03, #1
14614     0F 17 02 F1 | 	add	arg03, local01
14618     02 16 66 F0 | 	shl	arg03, #2
1461c     03 00 00 FF 
14620     04 E4 85 F1 | 	sub	objptr, ##1540
14624     F2 16 02 F1 | 	add	arg03, objptr
14628     0B 17 02 FB | 	rdlong	arg03, arg03
1462c     0C 4E 05 F1 | 	add	fp, #12
14630     A7 16 62 FC | 	wrlong	arg03, fp
14634                 | ' 
14634                 | ' numpar=compiledline(lineptr_e).result.uresult
14634                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
14634     0C 4E 85 F1 | 	sub	fp, #12
14638     03 16 16 F2 | 	cmp	arg03, #3 wc
1463c     47 00 00 FF 
14640     AC E4 85 F1 | 	sub	objptr, ##36524
14644     0C 4E 05 C1 |  if_b	add	fp, #12
14648     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1464c     0C 4E 85 C1 |  if_b	sub	fp, #12
14650     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1660
14654     00 12 06 F6 | 	mov	arg01, #0
14658     08 01 B1 FD | 	call	#__system___getiolock_0485
1465c     FD 12 02 F6 | 	mov	arg01, result1
14660     68 A7 B0 FD | 	call	#__system___lockmem
14664     75 01 00 FF 
14668     B3 14 06 F6 | 	mov	arg02, ##@LR__5183
1466c     00 12 06 F6 | 	mov	arg01, #0
14670     00 16 06 F6 | 	mov	arg03, #0
14674     48 B4 B0 FD | 	call	#__system___basic_print_string
14678     00 12 06 F6 | 	mov	arg01, #0
1467c     E4 00 B1 FD | 	call	#__system___getiolock_0485
14680     FD 00 68 FC | 	wrlong	#0, result1
14684     27 12 06 F6 | 	mov	arg01, #39
14688     98 62 B0 FD | 	call	#_printerror
1468c     B8 00 90 FD | 	jmp	#LR__1663
14690                 | LR__1660
14690                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14690     0C 4E 05 F1 | 	add	fp, #12
14694     A7 1E 02 FB | 	rdlong	local01, fp
14698     0C 4E 85 F1 | 	sub	fp, #12
1469c     02 1E 0E F2 | 	cmp	local01, #2 wz
146a0     38 00 90 5D |  if_ne	jmp	#LR__1661
146a4     F0 61 BF FD | 	call	#_pop
146a8     FF 1E 02 F6 | 	mov	local01, result3
146ac     A7 FA 61 FC | 	wrlong	result1, fp
146b0     04 4E 05 F1 | 	add	fp, #4
146b4     A7 FC 61 FC | 	wrlong	result2, fp
146b8     04 4E 05 F1 | 	add	fp, #4
146bc     A7 1E 62 FC | 	wrlong	local01, fp
146c0     08 4E 85 F1 | 	sub	fp, #8
146c4     A7 12 02 F6 | 	mov	arg01, fp
146c8     68 EE BF FD | 	call	#_converttoint
146cc     14 4E 05 F1 | 	add	fp, #20
146d0     A7 FA 61 FC | 	wrlong	result1, fp
146d4     14 4E 85 F1 | 	sub	fp, #20
146d8     0C 00 90 FD | 	jmp	#LR__1662
146dc                 | LR__1661
146dc     14 4E 05 F1 | 	add	fp, #20
146e0     A7 10 68 FC | 	wrlong	#8, fp
146e4     14 4E 85 F1 | 	sub	fp, #20
146e8                 | LR__1662
146e8     AC 61 BF FD | 	call	#_pop
146ec     FF 1E 02 F6 | 	mov	local01, result3
146f0     A7 FA 61 FC | 	wrlong	result1, fp
146f4     04 4E 05 F1 | 	add	fp, #4
146f8     A7 FC 61 FC | 	wrlong	result2, fp
146fc     04 4E 05 F1 | 	add	fp, #4
14700     A7 1E 62 FC | 	wrlong	local01, fp
14704     08 4E 85 F1 | 	sub	fp, #8
14708     A7 12 02 F6 | 	mov	arg01, fp
1470c     24 EE BF FD | 	call	#_converttoint
14710     10 4E 05 F1 | 	add	fp, #16
14714     A7 FA 61 FC | 	wrlong	result1, fp
14718     FD 12 02 F6 | 	mov	arg01, result1
1471c     04 4E 05 F1 | 	add	fp, #4
14720     A7 14 02 FB | 	rdlong	arg02, fp
14724     14 4E 85 F1 | 	sub	fp, #20
14728     10 16 06 F6 | 	mov	arg03, #16
1472c     00 C9 B0 FD | 	call	#__system__Number_S
14730     A7 FA 61 FC | 	wrlong	result1, fp
14734     08 4E 05 F1 | 	add	fp, #8
14738     A7 3E 68 FC | 	wrlong	#31, fp
1473c     08 4E 85 F1 | 	sub	fp, #8
14740     A7 12 02 F6 | 	mov	arg01, fp
14744     E8 61 BF FD | 	call	#_push
14748                 | LR__1663
14748     A7 F0 03 F6 | 	mov	ptra, fp
1474c     B2 00 A0 FD | 	call	#popregs_
14750                 | _do_hex_ret
14750     2D 00 64 FD | 	ret
14754                 | 
14754                 | ' 
14754                 | ' sub do_bin
14754                 | _do_bin
14754     01 4A 05 F6 | 	mov	COUNT_, #1
14758     A8 00 A0 FD | 	call	#pushregs_
1475c     18 F0 07 F1 | 	add	ptra, #24
14760     4A 00 00 FF 
14764     B0 E4 05 F1 | 	add	objptr, ##38064
14768     F2 1E 02 FB | 	rdlong	local01, objptr
1476c     0F 17 02 F6 | 	mov	arg03, local01
14770     01 16 66 F0 | 	shl	arg03, #1
14774     0F 17 02 F1 | 	add	arg03, local01
14778     02 16 66 F0 | 	shl	arg03, #2
1477c     03 00 00 FF 
14780     04 E4 85 F1 | 	sub	objptr, ##1540
14784     F2 16 02 F1 | 	add	arg03, objptr
14788     0B 17 02 FB | 	rdlong	arg03, arg03
1478c     0C 4E 05 F1 | 	add	fp, #12
14790     A7 16 62 FC | 	wrlong	arg03, fp
14794                 | ' 
14794                 | ' numpar=compiledline(lineptr_e).result.uresult
14794                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
14794     0C 4E 85 F1 | 	sub	fp, #12
14798     03 16 16 F2 | 	cmp	arg03, #3 wc
1479c     47 00 00 FF 
147a0     AC E4 85 F1 | 	sub	objptr, ##36524
147a4     0C 4E 05 C1 |  if_b	add	fp, #12
147a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
147ac     0C 4E 85 C1 |  if_b	sub	fp, #12
147b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1670
147b4     00 12 06 F6 | 	mov	arg01, #0
147b8     A8 FF B0 FD | 	call	#__system___getiolock_0485
147bc     FD 12 02 F6 | 	mov	arg01, result1
147c0     08 A6 B0 FD | 	call	#__system___lockmem
147c4     75 01 00 FF 
147c8     BA 14 06 F6 | 	mov	arg02, ##@LR__5184
147cc     00 12 06 F6 | 	mov	arg01, #0
147d0     00 16 06 F6 | 	mov	arg03, #0
147d4     E8 B2 B0 FD | 	call	#__system___basic_print_string
147d8     00 12 06 F6 | 	mov	arg01, #0
147dc     84 FF B0 FD | 	call	#__system___getiolock_0485
147e0     FD 00 68 FC | 	wrlong	#0, result1
147e4     27 12 06 F6 | 	mov	arg01, #39
147e8     38 61 B0 FD | 	call	#_printerror
147ec     B8 00 90 FD | 	jmp	#LR__1673
147f0                 | LR__1670
147f0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
147f0     0C 4E 05 F1 | 	add	fp, #12
147f4     A7 1E 02 FB | 	rdlong	local01, fp
147f8     0C 4E 85 F1 | 	sub	fp, #12
147fc     02 1E 0E F2 | 	cmp	local01, #2 wz
14800     38 00 90 5D |  if_ne	jmp	#LR__1671
14804     90 60 BF FD | 	call	#_pop
14808     FF 1E 02 F6 | 	mov	local01, result3
1480c     A7 FA 61 FC | 	wrlong	result1, fp
14810     04 4E 05 F1 | 	add	fp, #4
14814     A7 FC 61 FC | 	wrlong	result2, fp
14818     04 4E 05 F1 | 	add	fp, #4
1481c     A7 1E 62 FC | 	wrlong	local01, fp
14820     08 4E 85 F1 | 	sub	fp, #8
14824     A7 12 02 F6 | 	mov	arg01, fp
14828     08 ED BF FD | 	call	#_converttoint
1482c     14 4E 05 F1 | 	add	fp, #20
14830     A7 FA 61 FC | 	wrlong	result1, fp
14834     14 4E 85 F1 | 	sub	fp, #20
14838     0C 00 90 FD | 	jmp	#LR__1672
1483c                 | LR__1671
1483c     14 4E 05 F1 | 	add	fp, #20
14840     A7 00 68 FC | 	wrlong	#0, fp
14844     14 4E 85 F1 | 	sub	fp, #20
14848                 | LR__1672
14848     4C 60 BF FD | 	call	#_pop
1484c     FF 1E 02 F6 | 	mov	local01, result3
14850     A7 FA 61 FC | 	wrlong	result1, fp
14854     04 4E 05 F1 | 	add	fp, #4
14858     A7 FC 61 FC | 	wrlong	result2, fp
1485c     04 4E 05 F1 | 	add	fp, #4
14860     A7 1E 62 FC | 	wrlong	local01, fp
14864     08 4E 85 F1 | 	sub	fp, #8
14868     A7 12 02 F6 | 	mov	arg01, fp
1486c     C4 EC BF FD | 	call	#_converttoint
14870     10 4E 05 F1 | 	add	fp, #16
14874     A7 FA 61 FC | 	wrlong	result1, fp
14878     FD 12 02 F6 | 	mov	arg01, result1
1487c     04 4E 05 F1 | 	add	fp, #4
14880     A7 14 02 FB | 	rdlong	arg02, fp
14884     14 4E 85 F1 | 	sub	fp, #20
14888     02 16 06 F6 | 	mov	arg03, #2
1488c     A0 C7 B0 FD | 	call	#__system__Number_S
14890     A7 FA 61 FC | 	wrlong	result1, fp
14894     08 4E 05 F1 | 	add	fp, #8
14898     A7 3E 68 FC | 	wrlong	#31, fp
1489c     08 4E 85 F1 | 	sub	fp, #8
148a0     A7 12 02 F6 | 	mov	arg01, fp
148a4     88 60 BF FD | 	call	#_push
148a8                 | LR__1673
148a8     A7 F0 03 F6 | 	mov	ptra, fp
148ac     B2 00 A0 FD | 	call	#popregs_
148b0                 | _do_bin_ret
148b0     2D 00 64 FD | 	ret
148b4                 | 
148b4                 | ' 
148b4                 | ' sub do_cos
148b4                 | _do_cos
148b4     01 4A 05 F6 | 	mov	COUNT_, #1
148b8     A8 00 A0 FD | 	call	#pushregs_
148bc     10 F0 07 F1 | 	add	ptra, #16
148c0     4A 00 00 FF 
148c4     B0 E4 05 F1 | 	add	objptr, ##38064
148c8     F2 1E 02 FB | 	rdlong	local01, objptr
148cc     0F 17 02 F6 | 	mov	arg03, local01
148d0     01 16 66 F0 | 	shl	arg03, #1
148d4     0F 17 02 F1 | 	add	arg03, local01
148d8     02 16 66 F0 | 	shl	arg03, #2
148dc     03 00 00 FF 
148e0     04 E4 85 F1 | 	sub	objptr, ##1540
148e4     F2 16 02 F1 | 	add	arg03, objptr
148e8     0B 17 02 FB | 	rdlong	arg03, arg03
148ec     0C 4E 05 F1 | 	add	fp, #12
148f0     A7 16 62 FC | 	wrlong	arg03, fp
148f4                 | ' 
148f4                 | ' numpar=compiledline(lineptr_e).result.uresult
148f4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
148f4     0C 4E 85 F1 | 	sub	fp, #12
148f8     02 16 16 F2 | 	cmp	arg03, #2 wc
148fc     47 00 00 FF 
14900     AC E4 85 F1 | 	sub	objptr, ##36524
14904     0C 4E 05 C1 |  if_b	add	fp, #12
14908     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1490c     0C 4E 85 C1 |  if_b	sub	fp, #12
14910     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14914     00 12 06 F6 | 	mov	arg01, #0
14918     48 FE B0 FD | 	call	#__system___getiolock_0485
1491c     FD 12 02 F6 | 	mov	arg01, result1
14920     A8 A4 B0 FD | 	call	#__system___lockmem
14924     75 01 00 FF 
14928     C1 14 06 F6 | 	mov	arg02, ##@LR__5185
1492c     00 12 06 F6 | 	mov	arg01, #0
14930     00 16 06 F6 | 	mov	arg03, #0
14934     88 B1 B0 FD | 	call	#__system___basic_print_string
14938     00 12 06 F6 | 	mov	arg01, #0
1493c     24 FE B0 FD | 	call	#__system___getiolock_0485
14940     FD 00 68 FC | 	wrlong	#0, result1
14944     27 12 06 F6 | 	mov	arg01, #39
14948     D8 5F B0 FD | 	call	#_printerror
1494c     78 00 90 FD | 	jmp	#LR__1681
14950                 | LR__1680
14950     44 5F BF FD | 	call	#_pop
14954     A7 FA 61 FC | 	wrlong	result1, fp
14958     04 4E 05 F1 | 	add	fp, #4
1495c     A7 FC 61 FC | 	wrlong	result2, fp
14960     04 4E 05 F1 | 	add	fp, #4
14964     A7 FE 61 FC | 	wrlong	result3, fp
14968     08 4E 85 F1 | 	sub	fp, #8
1496c     59 00 00 FF 
14970     C8 E5 05 F1 | 	add	objptr, ##46024
14974     F2 1E 02 FB | 	rdlong	local01, objptr
14978     59 00 00 FF 
1497c     C8 E5 85 F1 | 	sub	objptr, ##46024
14980     A7 12 02 F6 | 	mov	arg01, fp
14984     58 EC BF FD | 	call	#_converttofloat
14988     FD 14 02 F6 | 	mov	arg02, result1
1498c     0F 13 02 F6 | 	mov	arg01, local01
14990     80 CF B0 FD | 	call	#__system___float_mul
14994     FD 14 02 F6 | 	mov	arg02, result1
14998     87 E4 1F FF 
1499c     DB 13 06 F6 | 	mov	arg01, ##1070141403
149a0     1F 14 E6 F4 | 	bitnot	arg02, #31
149a4     9C CB B0 FD | 	call	#__system___float_add
149a8     FD 12 02 F6 | 	mov	arg01, result1
149ac     A0 D8 B0 FD | 	call	#__system____builtin_sinf
149b0     A7 FA 61 FC | 	wrlong	result1, fp
149b4     08 4E 05 F1 | 	add	fp, #8
149b8     A7 3C 68 FC | 	wrlong	#30, fp
149bc     08 4E 85 F1 | 	sub	fp, #8
149c0     A7 12 02 F6 | 	mov	arg01, fp
149c4     68 5F BF FD | 	call	#_push
149c8                 | LR__1681
149c8     A7 F0 03 F6 | 	mov	ptra, fp
149cc     B2 00 A0 FD | 	call	#popregs_
149d0                 | _do_cos_ret
149d0     2D 00 64 FD | 	ret
149d4                 | 
149d4                 | ' 
149d4                 | ' sub do_tan
149d4                 | _do_tan
149d4     01 4A 05 F6 | 	mov	COUNT_, #1
149d8     A8 00 A0 FD | 	call	#pushregs_
149dc     10 F0 07 F1 | 	add	ptra, #16
149e0     4A 00 00 FF 
149e4     B0 E4 05 F1 | 	add	objptr, ##38064
149e8     F2 1E 02 FB | 	rdlong	local01, objptr
149ec     0F 17 02 F6 | 	mov	arg03, local01
149f0     01 16 66 F0 | 	shl	arg03, #1
149f4     0F 17 02 F1 | 	add	arg03, local01
149f8     02 16 66 F0 | 	shl	arg03, #2
149fc     03 00 00 FF 
14a00     04 E4 85 F1 | 	sub	objptr, ##1540
14a04     F2 16 02 F1 | 	add	arg03, objptr
14a08     0B 17 02 FB | 	rdlong	arg03, arg03
14a0c     0C 4E 05 F1 | 	add	fp, #12
14a10     A7 16 62 FC | 	wrlong	arg03, fp
14a14                 | ' 
14a14                 | ' numpar=compiledline(lineptr_e).result.uresult
14a14                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
14a14     0C 4E 85 F1 | 	sub	fp, #12
14a18     02 16 16 F2 | 	cmp	arg03, #2 wc
14a1c     47 00 00 FF 
14a20     AC E4 85 F1 | 	sub	objptr, ##36524
14a24     0C 4E 05 C1 |  if_b	add	fp, #12
14a28     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14a2c     0C 4E 85 C1 |  if_b	sub	fp, #12
14a30     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14a34     00 12 06 F6 | 	mov	arg01, #0
14a38     28 FD B0 FD | 	call	#__system___getiolock_0485
14a3c     FD 12 02 F6 | 	mov	arg01, result1
14a40     88 A3 B0 FD | 	call	#__system___lockmem
14a44     75 01 00 FF 
14a48     C7 14 06 F6 | 	mov	arg02, ##@LR__5186
14a4c     00 12 06 F6 | 	mov	arg01, #0
14a50     00 16 06 F6 | 	mov	arg03, #0
14a54     68 B0 B0 FD | 	call	#__system___basic_print_string
14a58     00 12 06 F6 | 	mov	arg01, #0
14a5c     04 FD B0 FD | 	call	#__system___getiolock_0485
14a60     FD 00 68 FC | 	wrlong	#0, result1
14a64     27 12 06 F6 | 	mov	arg01, #39
14a68     B8 5E B0 FD | 	call	#_printerror
14a6c     64 00 90 FD | 	jmp	#LR__1691
14a70                 | LR__1690
14a70     24 5E BF FD | 	call	#_pop
14a74     A7 FA 61 FC | 	wrlong	result1, fp
14a78     04 4E 05 F1 | 	add	fp, #4
14a7c     A7 FC 61 FC | 	wrlong	result2, fp
14a80     04 4E 05 F1 | 	add	fp, #4
14a84     A7 FE 61 FC | 	wrlong	result3, fp
14a88     08 4E 85 F1 | 	sub	fp, #8
14a8c     59 00 00 FF 
14a90     C8 E5 05 F1 | 	add	objptr, ##46024
14a94     F2 1E 02 FB | 	rdlong	local01, objptr
14a98     59 00 00 FF 
14a9c     C8 E5 85 F1 | 	sub	objptr, ##46024
14aa0     A7 12 02 F6 | 	mov	arg01, fp
14aa4     38 EB BF FD | 	call	#_converttofloat
14aa8     FD 14 02 F6 | 	mov	arg02, result1
14aac     0F 13 02 F6 | 	mov	arg01, local01
14ab0     60 CE B0 FD | 	call	#__system___float_mul
14ab4     FD 12 02 F6 | 	mov	arg01, result1
14ab8     E0 D8 B0 FD | 	call	#__system____builtin_tanf
14abc     A7 FA 61 FC | 	wrlong	result1, fp
14ac0     08 4E 05 F1 | 	add	fp, #8
14ac4     A7 3C 68 FC | 	wrlong	#30, fp
14ac8     08 4E 85 F1 | 	sub	fp, #8
14acc     A7 12 02 F6 | 	mov	arg01, fp
14ad0     5C 5E BF FD | 	call	#_push
14ad4                 | LR__1691
14ad4     A7 F0 03 F6 | 	mov	ptra, fp
14ad8     B2 00 A0 FD | 	call	#popregs_
14adc                 | _do_tan_ret
14adc     2D 00 64 FD | 	ret
14ae0                 | 
14ae0                 | ' 
14ae0                 | ' sub do_asin
14ae0                 | _do_asin
14ae0     01 4A 05 F6 | 	mov	COUNT_, #1
14ae4     A8 00 A0 FD | 	call	#pushregs_
14ae8     10 F0 07 F1 | 	add	ptra, #16
14aec     4A 00 00 FF 
14af0     B0 E4 05 F1 | 	add	objptr, ##38064
14af4     F2 1E 02 FB | 	rdlong	local01, objptr
14af8     0F 17 02 F6 | 	mov	arg03, local01
14afc     01 16 66 F0 | 	shl	arg03, #1
14b00     0F 17 02 F1 | 	add	arg03, local01
14b04     02 16 66 F0 | 	shl	arg03, #2
14b08     03 00 00 FF 
14b0c     04 E4 85 F1 | 	sub	objptr, ##1540
14b10     F2 16 02 F1 | 	add	arg03, objptr
14b14     0B 17 02 FB | 	rdlong	arg03, arg03
14b18     0C 4E 05 F1 | 	add	fp, #12
14b1c     A7 16 62 FC | 	wrlong	arg03, fp
14b20                 | ' 
14b20                 | ' numpar=compiledline(lineptr_e).result.uresult
14b20                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
14b20     0C 4E 85 F1 | 	sub	fp, #12
14b24     02 16 16 F2 | 	cmp	arg03, #2 wc
14b28     47 00 00 FF 
14b2c     AC E4 85 F1 | 	sub	objptr, ##36524
14b30     0C 4E 05 C1 |  if_b	add	fp, #12
14b34     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14b38     0C 4E 85 C1 |  if_b	sub	fp, #12
14b3c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1700
14b40     00 12 06 F6 | 	mov	arg01, #0
14b44     1C FC B0 FD | 	call	#__system___getiolock_0485
14b48     FD 12 02 F6 | 	mov	arg01, result1
14b4c     7C A2 B0 FD | 	call	#__system___lockmem
14b50     75 01 00 FF 
14b54     CD 14 06 F6 | 	mov	arg02, ##@LR__5187
14b58     00 12 06 F6 | 	mov	arg01, #0
14b5c     00 16 06 F6 | 	mov	arg03, #0
14b60     5C AF B0 FD | 	call	#__system___basic_print_string
14b64     00 12 06 F6 | 	mov	arg01, #0
14b68     F8 FB B0 FD | 	call	#__system___getiolock_0485
14b6c     FD 00 68 FC | 	wrlong	#0, result1
14b70     27 12 06 F6 | 	mov	arg01, #39
14b74     AC 5D B0 FD | 	call	#_printerror
14b78     64 00 90 FD | 	jmp	#LR__1701
14b7c                 | LR__1700
14b7c     18 5D BF FD | 	call	#_pop
14b80     FF 1E 02 F6 | 	mov	local01, result3
14b84     A7 FA 61 FC | 	wrlong	result1, fp
14b88     04 4E 05 F1 | 	add	fp, #4
14b8c     A7 FC 61 FC | 	wrlong	result2, fp
14b90     04 4E 05 F1 | 	add	fp, #4
14b94     A7 1E 62 FC | 	wrlong	local01, fp
14b98     08 4E 85 F1 | 	sub	fp, #8
14b9c     A7 12 02 F6 | 	mov	arg01, fp
14ba0     3C EA BF FD | 	call	#_converttofloat
14ba4     FD 12 02 F6 | 	mov	arg01, result1
14ba8     38 D8 B0 FD | 	call	#__system____builtin_asinf
14bac     FD 12 02 F6 | 	mov	arg01, result1
14bb0     59 00 00 FF 
14bb4     CC E5 05 F1 | 	add	objptr, ##46028
14bb8     F2 14 02 FB | 	rdlong	arg02, objptr
14bbc     59 00 00 FF 
14bc0     CC E5 85 F1 | 	sub	objptr, ##46028
14bc4     4C CD B0 FD | 	call	#__system___float_mul
14bc8     A7 FA 61 FC | 	wrlong	result1, fp
14bcc     08 4E 05 F1 | 	add	fp, #8
14bd0     A7 3C 68 FC | 	wrlong	#30, fp
14bd4     08 4E 85 F1 | 	sub	fp, #8
14bd8     A7 12 02 F6 | 	mov	arg01, fp
14bdc     50 5D BF FD | 	call	#_push
14be0                 | LR__1701
14be0     A7 F0 03 F6 | 	mov	ptra, fp
14be4     B2 00 A0 FD | 	call	#popregs_
14be8                 | _do_asin_ret
14be8     2D 00 64 FD | 	ret
14bec                 | 
14bec                 | ' 
14bec                 | ' sub do_acos
14bec                 | _do_acos
14bec     01 4A 05 F6 | 	mov	COUNT_, #1
14bf0     A8 00 A0 FD | 	call	#pushregs_
14bf4     10 F0 07 F1 | 	add	ptra, #16
14bf8     4A 00 00 FF 
14bfc     B0 E4 05 F1 | 	add	objptr, ##38064
14c00     F2 1E 02 FB | 	rdlong	local01, objptr
14c04     0F 17 02 F6 | 	mov	arg03, local01
14c08     01 16 66 F0 | 	shl	arg03, #1
14c0c     0F 17 02 F1 | 	add	arg03, local01
14c10     02 16 66 F0 | 	shl	arg03, #2
14c14     03 00 00 FF 
14c18     04 E4 85 F1 | 	sub	objptr, ##1540
14c1c     F2 16 02 F1 | 	add	arg03, objptr
14c20     0B 17 02 FB | 	rdlong	arg03, arg03
14c24     0C 4E 05 F1 | 	add	fp, #12
14c28     A7 16 62 FC | 	wrlong	arg03, fp
14c2c                 | ' 
14c2c                 | ' numpar=compiledline(lineptr_e).result.uresult
14c2c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
14c2c     0C 4E 85 F1 | 	sub	fp, #12
14c30     02 16 16 F2 | 	cmp	arg03, #2 wc
14c34     47 00 00 FF 
14c38     AC E4 85 F1 | 	sub	objptr, ##36524
14c3c     0C 4E 05 C1 |  if_b	add	fp, #12
14c40     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14c44     0C 4E 85 C1 |  if_b	sub	fp, #12
14c48     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1710
14c4c     00 12 06 F6 | 	mov	arg01, #0
14c50     10 FB B0 FD | 	call	#__system___getiolock_0485
14c54     FD 12 02 F6 | 	mov	arg01, result1
14c58     70 A1 B0 FD | 	call	#__system___lockmem
14c5c     75 01 00 FF 
14c60     D4 14 06 F6 | 	mov	arg02, ##@LR__5188
14c64     00 12 06 F6 | 	mov	arg01, #0
14c68     00 16 06 F6 | 	mov	arg03, #0
14c6c     50 AE B0 FD | 	call	#__system___basic_print_string
14c70     00 12 06 F6 | 	mov	arg01, #0
14c74     EC FA B0 FD | 	call	#__system___getiolock_0485
14c78     FD 00 68 FC | 	wrlong	#0, result1
14c7c     27 12 06 F6 | 	mov	arg01, #39
14c80     A0 5C B0 FD | 	call	#_printerror
14c84     64 00 90 FD | 	jmp	#LR__1711
14c88                 | LR__1710
14c88     0C 5C BF FD | 	call	#_pop
14c8c     FF 1E 02 F6 | 	mov	local01, result3
14c90     A7 FA 61 FC | 	wrlong	result1, fp
14c94     04 4E 05 F1 | 	add	fp, #4
14c98     A7 FC 61 FC | 	wrlong	result2, fp
14c9c     04 4E 05 F1 | 	add	fp, #4
14ca0     A7 1E 62 FC | 	wrlong	local01, fp
14ca4     08 4E 85 F1 | 	sub	fp, #8
14ca8     A7 12 02 F6 | 	mov	arg01, fp
14cac     30 E9 BF FD | 	call	#_converttofloat
14cb0     FD 12 02 F6 | 	mov	arg01, result1
14cb4     78 D7 B0 FD | 	call	#__system____builtin_acosf
14cb8     FD 12 02 F6 | 	mov	arg01, result1
14cbc     59 00 00 FF 
14cc0     CC E5 05 F1 | 	add	objptr, ##46028
14cc4     F2 14 02 FB | 	rdlong	arg02, objptr
14cc8     59 00 00 FF 
14ccc     CC E5 85 F1 | 	sub	objptr, ##46028
14cd0     40 CC B0 FD | 	call	#__system___float_mul
14cd4     A7 FA 61 FC | 	wrlong	result1, fp
14cd8     08 4E 05 F1 | 	add	fp, #8
14cdc     A7 3C 68 FC | 	wrlong	#30, fp
14ce0     08 4E 85 F1 | 	sub	fp, #8
14ce4     A7 12 02 F6 | 	mov	arg01, fp
14ce8     44 5C BF FD | 	call	#_push
14cec                 | LR__1711
14cec     A7 F0 03 F6 | 	mov	ptra, fp
14cf0     B2 00 A0 FD | 	call	#popregs_
14cf4                 | _do_acos_ret
14cf4     2D 00 64 FD | 	ret
14cf8                 | 
14cf8                 | ' 
14cf8                 | ' sub do_atn
14cf8                 | _do_atn
14cf8     01 4A 05 F6 | 	mov	COUNT_, #1
14cfc     A8 00 A0 FD | 	call	#pushregs_
14d00     10 F0 07 F1 | 	add	ptra, #16
14d04     4A 00 00 FF 
14d08     B0 E4 05 F1 | 	add	objptr, ##38064
14d0c     F2 1E 02 FB | 	rdlong	local01, objptr
14d10     0F 17 02 F6 | 	mov	arg03, local01
14d14     01 16 66 F0 | 	shl	arg03, #1
14d18     0F 17 02 F1 | 	add	arg03, local01
14d1c     02 16 66 F0 | 	shl	arg03, #2
14d20     03 00 00 FF 
14d24     04 E4 85 F1 | 	sub	objptr, ##1540
14d28     F2 16 02 F1 | 	add	arg03, objptr
14d2c     0B 17 02 FB | 	rdlong	arg03, arg03
14d30     0C 4E 05 F1 | 	add	fp, #12
14d34     A7 16 62 FC | 	wrlong	arg03, fp
14d38                 | ' 
14d38                 | ' numpar=compiledline(lineptr_e).result.uresult
14d38                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
14d38     0C 4E 85 F1 | 	sub	fp, #12
14d3c     02 16 16 F2 | 	cmp	arg03, #2 wc
14d40     47 00 00 FF 
14d44     AC E4 85 F1 | 	sub	objptr, ##36524
14d48     0C 4E 05 C1 |  if_b	add	fp, #12
14d4c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14d50     0C 4E 85 C1 |  if_b	sub	fp, #12
14d54     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14d58     00 12 06 F6 | 	mov	arg01, #0
14d5c     04 FA B0 FD | 	call	#__system___getiolock_0485
14d60     FD 12 02 F6 | 	mov	arg01, result1
14d64     64 A0 B0 FD | 	call	#__system___lockmem
14d68     75 01 00 FF 
14d6c     DB 14 06 F6 | 	mov	arg02, ##@LR__5189
14d70     00 12 06 F6 | 	mov	arg01, #0
14d74     00 16 06 F6 | 	mov	arg03, #0
14d78     44 AD B0 FD | 	call	#__system___basic_print_string
14d7c     00 12 06 F6 | 	mov	arg01, #0
14d80     E0 F9 B0 FD | 	call	#__system___getiolock_0485
14d84     FD 00 68 FC | 	wrlong	#0, result1
14d88     27 12 06 F6 | 	mov	arg01, #39
14d8c     94 5B B0 FD | 	call	#_printerror
14d90     6C 00 90 FD | 	jmp	#LR__1721
14d94                 | LR__1720
14d94     00 5B BF FD | 	call	#_pop
14d98     FF 1E 02 F6 | 	mov	local01, result3
14d9c     A7 FA 61 FC | 	wrlong	result1, fp
14da0     04 4E 05 F1 | 	add	fp, #4
14da4     A7 FC 61 FC | 	wrlong	result2, fp
14da8     04 4E 05 F1 | 	add	fp, #4
14dac     A7 1E 62 FC | 	wrlong	local01, fp
14db0     08 4E 85 F1 | 	sub	fp, #8
14db4     A7 12 02 F6 | 	mov	arg01, fp
14db8     24 E8 BF FD | 	call	#_converttofloat
14dbc     FD 12 02 F6 | 	mov	arg01, result1
14dc0     00 C0 1F FF 
14dc4     00 14 06 F6 | 	mov	arg02, ##1065353216
14dc8     B0 D6 B0 FD | 	call	#__system____builtin_atan2f
14dcc     FD 12 02 F6 | 	mov	arg01, result1
14dd0     59 00 00 FF 
14dd4     CC E5 05 F1 | 	add	objptr, ##46028
14dd8     F2 14 02 FB | 	rdlong	arg02, objptr
14ddc     59 00 00 FF 
14de0     CC E5 85 F1 | 	sub	objptr, ##46028
14de4     2C CB B0 FD | 	call	#__system___float_mul
14de8     A7 FA 61 FC | 	wrlong	result1, fp
14dec     08 4E 05 F1 | 	add	fp, #8
14df0     A7 3C 68 FC | 	wrlong	#30, fp
14df4     08 4E 85 F1 | 	sub	fp, #8
14df8     A7 12 02 F6 | 	mov	arg01, fp
14dfc     30 5B BF FD | 	call	#_push
14e00                 | LR__1721
14e00     A7 F0 03 F6 | 	mov	ptra, fp
14e04     B2 00 A0 FD | 	call	#popregs_
14e08                 | _do_atn_ret
14e08     2D 00 64 FD | 	ret
14e0c                 | 
14e0c                 | ' 
14e0c                 | ' sub do_sqr
14e0c                 | _do_sqr
14e0c     01 4A 05 F6 | 	mov	COUNT_, #1
14e10     A8 00 A0 FD | 	call	#pushregs_
14e14     10 F0 07 F1 | 	add	ptra, #16
14e18     4A 00 00 FF 
14e1c     B0 E4 05 F1 | 	add	objptr, ##38064
14e20     F2 1E 02 FB | 	rdlong	local01, objptr
14e24     0F 17 02 F6 | 	mov	arg03, local01
14e28     01 16 66 F0 | 	shl	arg03, #1
14e2c     0F 17 02 F1 | 	add	arg03, local01
14e30     02 16 66 F0 | 	shl	arg03, #2
14e34     03 00 00 FF 
14e38     04 E4 85 F1 | 	sub	objptr, ##1540
14e3c     F2 16 02 F1 | 	add	arg03, objptr
14e40     0B 17 02 FB | 	rdlong	arg03, arg03
14e44     0C 4E 05 F1 | 	add	fp, #12
14e48     A7 16 62 FC | 	wrlong	arg03, fp
14e4c                 | ' 
14e4c                 | ' numpar=compiledline(lineptr_e).result.uresult
14e4c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
14e4c     0C 4E 85 F1 | 	sub	fp, #12
14e50     02 16 16 F2 | 	cmp	arg03, #2 wc
14e54     47 00 00 FF 
14e58     AC E4 85 F1 | 	sub	objptr, ##36524
14e5c     0C 4E 05 C1 |  if_b	add	fp, #12
14e60     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14e64     0C 4E 85 C1 |  if_b	sub	fp, #12
14e68     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1730
14e6c     00 12 06 F6 | 	mov	arg01, #0
14e70     F0 F8 B0 FD | 	call	#__system___getiolock_0485
14e74     FD 12 02 F6 | 	mov	arg01, result1
14e78     50 9F B0 FD | 	call	#__system___lockmem
14e7c     75 01 00 FF 
14e80     E1 14 06 F6 | 	mov	arg02, ##@LR__5190
14e84     00 12 06 F6 | 	mov	arg01, #0
14e88     00 16 06 F6 | 	mov	arg03, #0
14e8c     30 AC B0 FD | 	call	#__system___basic_print_string
14e90     00 12 06 F6 | 	mov	arg01, #0
14e94     CC F8 B0 FD | 	call	#__system___getiolock_0485
14e98     FD 00 68 FC | 	wrlong	#0, result1
14e9c     27 12 06 F6 | 	mov	arg01, #39
14ea0     80 5A B0 FD | 	call	#_printerror
14ea4     48 00 90 FD | 	jmp	#LR__1731
14ea8                 | LR__1730
14ea8     EC 59 BF FD | 	call	#_pop
14eac     FF 1E 02 F6 | 	mov	local01, result3
14eb0     A7 FA 61 FC | 	wrlong	result1, fp
14eb4     04 4E 05 F1 | 	add	fp, #4
14eb8     A7 FC 61 FC | 	wrlong	result2, fp
14ebc     04 4E 05 F1 | 	add	fp, #4
14ec0     A7 1E 62 FC | 	wrlong	local01, fp
14ec4     08 4E 85 F1 | 	sub	fp, #8
14ec8     A7 12 02 F6 | 	mov	arg01, fp
14ecc     10 E7 BF FD | 	call	#_converttofloat
14ed0     FD 12 02 F6 | 	mov	arg01, result1
14ed4     64 C9 B0 FD | 	call	#__system___float_sqrt
14ed8     A7 FA 61 FC | 	wrlong	result1, fp
14edc     08 4E 05 F1 | 	add	fp, #8
14ee0     A7 3C 68 FC | 	wrlong	#30, fp
14ee4     08 4E 85 F1 | 	sub	fp, #8
14ee8     A7 12 02 F6 | 	mov	arg01, fp
14eec     40 5A BF FD | 	call	#_push
14ef0                 | LR__1731
14ef0     A7 F0 03 F6 | 	mov	ptra, fp
14ef4     B2 00 A0 FD | 	call	#popregs_
14ef8                 | _do_sqr_ret
14ef8     2D 00 64 FD | 	ret
14efc                 | 
14efc                 | ' 
14efc                 | ' sub do_stick
14efc                 | _do_stick
14efc     01 4A 05 F6 | 	mov	COUNT_, #1
14f00     A8 00 A0 FD | 	call	#pushregs_
14f04     10 F0 07 F1 | 	add	ptra, #16
14f08     4A 00 00 FF 
14f0c     B0 E4 05 F1 | 	add	objptr, ##38064
14f10     F2 1E 02 FB | 	rdlong	local01, objptr
14f14     0F 17 02 F6 | 	mov	arg03, local01
14f18     01 16 66 F0 | 	shl	arg03, #1
14f1c     0F 17 02 F1 | 	add	arg03, local01
14f20     02 16 66 F0 | 	shl	arg03, #2
14f24     03 00 00 FF 
14f28     04 E4 85 F1 | 	sub	objptr, ##1540
14f2c     F2 16 02 F1 | 	add	arg03, objptr
14f30     0B 17 02 FB | 	rdlong	arg03, arg03
14f34     0C 4E 05 F1 | 	add	fp, #12
14f38     A7 16 62 FC | 	wrlong	arg03, fp
14f3c                 | ' 
14f3c                 | ' numpar=compiledline(lineptr_e).result.uresult
14f3c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
14f3c     0C 4E 85 F1 | 	sub	fp, #12
14f40     02 16 16 F2 | 	cmp	arg03, #2 wc
14f44     47 00 00 FF 
14f48     AC E4 85 F1 | 	sub	objptr, ##36524
14f4c     3C 00 90 CD |  if_b	jmp	#LR__1740
14f50     00 12 06 F6 | 	mov	arg01, #0
14f54     0C F8 B0 FD | 	call	#__system___getiolock_0485
14f58     FD 12 02 F6 | 	mov	arg01, result1
14f5c     6C 9E B0 FD | 	call	#__system___lockmem
14f60     75 01 00 FF 
14f64     E7 14 06 F6 | 	mov	arg02, ##@LR__5191
14f68     00 12 06 F6 | 	mov	arg01, #0
14f6c     00 16 06 F6 | 	mov	arg03, #0
14f70     4C AB B0 FD | 	call	#__system___basic_print_string
14f74     00 12 06 F6 | 	mov	arg01, #0
14f78     E8 F7 B0 FD | 	call	#__system___getiolock_0485
14f7c     FD 00 68 FC | 	wrlong	#0, result1
14f80     27 12 06 F6 | 	mov	arg01, #39
14f84     9C 59 B0 FD | 	call	#_printerror
14f88     E8 00 90 FD | 	jmp	#LR__1744
14f8c                 | LR__1740
14f8c                 | ' 
14f8c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
14f8c     0C 4E 05 F1 | 	add	fp, #12
14f90     A7 FE 09 FB | 	rdlong	result3, fp wz
14f94     0C 4E 85 F1 | 	sub	fp, #12
14f98     30 00 90 5D |  if_ne	jmp	#LR__1741
14f9c     59 00 00 FF 
14fa0     3C E5 05 F1 | 	add	objptr, ##45884
14fa4     F2 1E 02 FB | 	rdlong	local01, objptr
14fa8     59 00 00 FF 
14fac     3C E5 85 F1 | 	sub	objptr, ##45884
14fb0     A7 1E 62 FC | 	wrlong	local01, fp
14fb4     08 4E 05 F1 | 	add	fp, #8
14fb8     A7 3A 68 FC | 	wrlong	#29, fp
14fbc     08 4E 85 F1 | 	sub	fp, #8
14fc0     A7 12 02 F6 | 	mov	arg01, fp
14fc4     68 59 BF FD | 	call	#_push
14fc8     A8 00 90 FD | 	jmp	#LR__1744
14fcc                 | LR__1741
14fcc     C8 58 BF FD | 	call	#_pop
14fd0     A7 FA 61 FC | 	wrlong	result1, fp
14fd4     04 4E 05 F1 | 	add	fp, #4
14fd8     A7 FC 61 FC | 	wrlong	result2, fp
14fdc     04 4E 05 F1 | 	add	fp, #4
14fe0     A7 FE 61 FC | 	wrlong	result3, fp
14fe4                 | ' 
14fe4                 | ' t1=pop()
14fe4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14fe4     08 4E 85 F1 | 	sub	fp, #8
14fe8     1C FE 0D F2 | 	cmp	result3, #28 wz
14fec     08 4E 05 51 |  if_ne	add	fp, #8
14ff0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14ff4     08 4E 85 51 |  if_ne	sub	fp, #8
14ff8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14ffc     6C 00 90 5D |  if_ne	jmp	#LR__1743
15000     A7 1E 02 FB | 	rdlong	local01, fp
15004     5A 00 00 FF 
15008     34 E4 05 F1 | 	add	objptr, ##46132
1500c     F2 1E 62 FC | 	wrlong	local01, objptr
15010                 | '   q=t1.result.uresult
15010                 | '   if q<7 then 
15010     5A 00 00 FF 
15014     34 E4 85 F1 | 	sub	objptr, ##46132
15018     07 1E 56 F2 | 	cmps	local01, #7 wc
1501c     40 00 90 3D |  if_ae	jmp	#LR__1742
15020     5A 00 00 FF 
15024     34 E4 05 F1 | 	add	objptr, ##46132
15028     F2 1E 02 FB | 	rdlong	local01, objptr
1502c     02 1E 66 F0 | 	shl	local01, #2
15030     F8 E4 85 F1 | 	sub	objptr, #248
15034     F2 1E 02 F1 | 	add	local01, objptr
15038     0F 1F 02 FB | 	rdlong	local01, local01
1503c     A7 1E 62 FC | 	wrlong	local01, fp
15040     08 4E 05 F1 | 	add	fp, #8
15044     A7 3A 68 FC | 	wrlong	#29, fp
15048     08 4E 85 F1 | 	sub	fp, #8
1504c     A7 12 02 F6 | 	mov	arg01, fp
15050     59 00 00 FF 
15054     3C E5 85 F1 | 	sub	objptr, ##45884
15058     D4 58 BF FD | 	call	#_push
1505c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1505c     14 00 90 FD | 	jmp	#LR__1744
15060                 | LR__1742
15060     29 12 06 F6 | 	mov	arg01, #41
15064     BC 58 B0 FD | 	call	#_printerror
15068                 | '      printerror(41) : return
15068     08 00 90 FD | 	jmp	#LR__1744
1506c                 | LR__1743
1506c     29 12 06 F6 | 	mov	arg01, #41
15070     B0 58 B0 FD | 	call	#_printerror
15074                 | LR__1744
15074     A7 F0 03 F6 | 	mov	ptra, fp
15078     B2 00 A0 FD | 	call	#popregs_
1507c                 | _do_stick_ret
1507c     2D 00 64 FD | 	ret
15080                 | 
15080                 | ' 
15080                 | ' sub do_strig
15080                 | _do_strig
15080     01 4A 05 F6 | 	mov	COUNT_, #1
15084     A8 00 A0 FD | 	call	#pushregs_
15088     10 F0 07 F1 | 	add	ptra, #16
1508c     4A 00 00 FF 
15090     B0 E4 05 F1 | 	add	objptr, ##38064
15094     F2 1E 02 FB | 	rdlong	local01, objptr
15098     0F 17 02 F6 | 	mov	arg03, local01
1509c     01 16 66 F0 | 	shl	arg03, #1
150a0     0F 17 02 F1 | 	add	arg03, local01
150a4     02 16 66 F0 | 	shl	arg03, #2
150a8     03 00 00 FF 
150ac     04 E4 85 F1 | 	sub	objptr, ##1540
150b0     F2 16 02 F1 | 	add	arg03, objptr
150b4     0B 17 02 FB | 	rdlong	arg03, arg03
150b8     0C 4E 05 F1 | 	add	fp, #12
150bc     A7 16 62 FC | 	wrlong	arg03, fp
150c0                 | ' 
150c0                 | ' numpar=compiledline(lineptr_e).result.uresult
150c0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
150c0     0C 4E 85 F1 | 	sub	fp, #12
150c4     02 16 16 F2 | 	cmp	arg03, #2 wc
150c8     47 00 00 FF 
150cc     AC E4 85 F1 | 	sub	objptr, ##36524
150d0     3C 00 90 CD |  if_b	jmp	#LR__1750
150d4     00 12 06 F6 | 	mov	arg01, #0
150d8     88 F6 B0 FD | 	call	#__system___getiolock_0485
150dc     FD 12 02 F6 | 	mov	arg01, result1
150e0     E8 9C B0 FD | 	call	#__system___lockmem
150e4     75 01 00 FF 
150e8     EF 14 06 F6 | 	mov	arg02, ##@LR__5192
150ec     00 12 06 F6 | 	mov	arg01, #0
150f0     00 16 06 F6 | 	mov	arg03, #0
150f4     C8 A9 B0 FD | 	call	#__system___basic_print_string
150f8     00 12 06 F6 | 	mov	arg01, #0
150fc     64 F6 B0 FD | 	call	#__system___getiolock_0485
15100     FD 00 68 FC | 	wrlong	#0, result1
15104     27 12 06 F6 | 	mov	arg01, #39
15108     18 58 B0 FD | 	call	#_printerror
1510c     E8 00 90 FD | 	jmp	#LR__1754
15110                 | LR__1750
15110                 | ' 
15110                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
15110     0C 4E 05 F1 | 	add	fp, #12
15114     A7 FE 09 FB | 	rdlong	result3, fp wz
15118     0C 4E 85 F1 | 	sub	fp, #12
1511c     30 00 90 5D |  if_ne	jmp	#LR__1751
15120     59 00 00 FF 
15124     58 E5 05 F1 | 	add	objptr, ##45912
15128     F2 1E 02 FB | 	rdlong	local01, objptr
1512c     59 00 00 FF 
15130     58 E5 85 F1 | 	sub	objptr, ##45912
15134     A7 1E 62 FC | 	wrlong	local01, fp
15138     08 4E 05 F1 | 	add	fp, #8
1513c     A7 3A 68 FC | 	wrlong	#29, fp
15140     08 4E 85 F1 | 	sub	fp, #8
15144     A7 12 02 F6 | 	mov	arg01, fp
15148     E4 57 BF FD | 	call	#_push
1514c     A8 00 90 FD | 	jmp	#LR__1754
15150                 | LR__1751
15150     44 57 BF FD | 	call	#_pop
15154     A7 FA 61 FC | 	wrlong	result1, fp
15158     04 4E 05 F1 | 	add	fp, #4
1515c     A7 FC 61 FC | 	wrlong	result2, fp
15160     04 4E 05 F1 | 	add	fp, #4
15164     A7 FE 61 FC | 	wrlong	result3, fp
15168                 | ' 
15168                 | ' t1=pop()
15168                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15168     08 4E 85 F1 | 	sub	fp, #8
1516c     1C FE 0D F2 | 	cmp	result3, #28 wz
15170     08 4E 05 51 |  if_ne	add	fp, #8
15174     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15178     08 4E 85 51 |  if_ne	sub	fp, #8
1517c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15180     6C 00 90 5D |  if_ne	jmp	#LR__1753
15184     A7 1E 02 FB | 	rdlong	local01, fp
15188     5A 00 00 FF 
1518c     34 E4 05 F1 | 	add	objptr, ##46132
15190     F2 1E 62 FC | 	wrlong	local01, objptr
15194                 | '   q=t1.result.uresult
15194                 | '   if q<7 then 
15194     5A 00 00 FF 
15198     34 E4 85 F1 | 	sub	objptr, ##46132
1519c     07 1E 56 F2 | 	cmps	local01, #7 wc
151a0     40 00 90 3D |  if_ae	jmp	#LR__1752
151a4     5A 00 00 FF 
151a8     34 E4 05 F1 | 	add	objptr, ##46132
151ac     F2 1E 02 FB | 	rdlong	local01, objptr
151b0     02 1E 66 F0 | 	shl	local01, #2
151b4     DC E4 85 F1 | 	sub	objptr, #220
151b8     F2 1E 02 F1 | 	add	local01, objptr
151bc     0F 1F 02 FB | 	rdlong	local01, local01
151c0     A7 1E 62 FC | 	wrlong	local01, fp
151c4     08 4E 05 F1 | 	add	fp, #8
151c8     A7 3A 68 FC | 	wrlong	#29, fp
151cc     08 4E 85 F1 | 	sub	fp, #8
151d0     A7 12 02 F6 | 	mov	arg01, fp
151d4     59 00 00 FF 
151d8     58 E5 85 F1 | 	sub	objptr, ##45912
151dc     50 57 BF FD | 	call	#_push
151e0                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
151e0     14 00 90 FD | 	jmp	#LR__1754
151e4                 | LR__1752
151e4     29 12 06 F6 | 	mov	arg01, #41
151e8     38 57 B0 FD | 	call	#_printerror
151ec                 | '      printerror(41) : return
151ec     08 00 90 FD | 	jmp	#LR__1754
151f0                 | LR__1753
151f0     29 12 06 F6 | 	mov	arg01, #41
151f4     2C 57 B0 FD | 	call	#_printerror
151f8                 | LR__1754
151f8     A7 F0 03 F6 | 	mov	ptra, fp
151fc     B2 00 A0 FD | 	call	#popregs_
15200                 | _do_strig_ret
15200     2D 00 64 FD | 	ret
15204                 | 
15204                 | ' 
15204                 | ' sub do_getpixel
15204                 | _do_getpixel
15204     00 4A 05 F6 | 	mov	COUNT_, #0
15208     A8 00 A0 FD | 	call	#pushregs_
1520c     24 F0 07 F1 | 	add	ptra, #36
15210     4A 00 00 FF 
15214     B0 E4 05 F1 | 	add	objptr, ##38064
15218     F2 16 02 FB | 	rdlong	arg03, objptr
1521c     0B 15 02 F6 | 	mov	arg02, arg03
15220     01 14 66 F0 | 	shl	arg02, #1
15224     0B 15 02 F1 | 	add	arg02, arg03
15228     02 14 66 F0 | 	shl	arg02, #2
1522c     03 00 00 FF 
15230     04 E4 85 F1 | 	sub	objptr, ##1540
15234     F2 14 02 F1 | 	add	arg02, objptr
15238     0A 17 02 FB | 	rdlong	arg03, arg02
1523c     18 4E 05 F1 | 	add	fp, #24
15240     A7 16 62 FC | 	wrlong	arg03, fp
15244                 | ' 
15244                 | ' numpar=compiledline(lineptr_e).result.uresult
15244                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
15244     18 4E 85 F1 | 	sub	fp, #24
15248     02 16 0E F2 | 	cmp	arg03, #2 wz
1524c     47 00 00 FF 
15250     AC E4 85 F1 | 	sub	objptr, ##36524
15254     3C 00 90 AD |  if_e	jmp	#LR__1760
15258     00 12 06 F6 | 	mov	arg01, #0
1525c     04 F5 B0 FD | 	call	#__system___getiolock_0485
15260     FD 12 02 F6 | 	mov	arg01, result1
15264     64 9B B0 FD | 	call	#__system___lockmem
15268     75 01 00 FF 
1526c     F7 14 06 F6 | 	mov	arg02, ##@LR__5193
15270     00 12 06 F6 | 	mov	arg01, #0
15274     00 16 06 F6 | 	mov	arg03, #0
15278     44 A8 B0 FD | 	call	#__system___basic_print_string
1527c     00 12 06 F6 | 	mov	arg01, #0
15280     E0 F4 B0 FD | 	call	#__system___getiolock_0485
15284     FD 00 68 FC | 	wrlong	#0, result1
15288     27 12 06 F6 | 	mov	arg01, #39
1528c     94 56 B0 FD | 	call	#_printerror
15290     B4 00 90 FD | 	jmp	#LR__1761
15294                 | LR__1760
15294     00 56 BF FD | 	call	#_pop
15298     FD 16 02 F6 | 	mov	arg03, result1
1529c     FE 14 02 F6 | 	mov	arg02, result2
152a0     FF 12 02 F6 | 	mov	arg01, result3
152a4     0C 4E 05 F1 | 	add	fp, #12
152a8     A7 16 62 FC | 	wrlong	arg03, fp
152ac     04 4E 05 F1 | 	add	fp, #4
152b0     A7 14 62 FC | 	wrlong	arg02, fp
152b4     04 4E 05 F1 | 	add	fp, #4
152b8     A7 12 62 FC | 	wrlong	arg01, fp
152bc     14 4E 85 F1 | 	sub	fp, #20
152c0     D4 55 BF FD | 	call	#_pop
152c4     FF 16 02 F6 | 	mov	arg03, result3
152c8     A7 FA 61 FC | 	wrlong	result1, fp
152cc     04 4E 05 F1 | 	add	fp, #4
152d0     A7 FC 61 FC | 	wrlong	result2, fp
152d4     04 4E 05 F1 | 	add	fp, #4
152d8     A7 16 62 FC | 	wrlong	arg03, fp
152dc     08 4E 85 F1 | 	sub	fp, #8
152e0     A7 12 02 F6 | 	mov	arg01, fp
152e4     4C E2 BF FD | 	call	#_converttoint
152e8     1C 4E 05 F1 | 	add	fp, #28
152ec     A7 FA 61 FC | 	wrlong	result1, fp
152f0     10 4E 85 F1 | 	sub	fp, #16
152f4     A7 12 02 F6 | 	mov	arg01, fp
152f8     0C 4E 85 F1 | 	sub	fp, #12
152fc     34 E2 BF FD | 	call	#_converttoint
15300     FD 16 02 F6 | 	mov	arg03, result1
15304     20 4E 05 F1 | 	add	fp, #32
15308     A7 16 62 FC | 	wrlong	arg03, fp
1530c     F2 12 02 FB | 	rdlong	arg01, objptr
15310     04 4E 85 F1 | 	sub	fp, #4
15314     A7 FE 01 FB | 	rdlong	result3, fp
15318     FF 12 02 F1 | 	add	arg01, result3
1531c     1C 4E 85 F1 | 	sub	fp, #28
15320     0A 16 66 F0 | 	shl	arg03, #10
15324     0B 13 02 F1 | 	add	arg01, arg03
15328     34 58 B0 FD | 	call	#_pspeek
1532c     FD FA E1 F8 | 	getbyte	result1, result1, #0
15330     A7 FA 61 FC | 	wrlong	result1, fp
15334     08 4E 05 F1 | 	add	fp, #8
15338     A7 3A 68 FC | 	wrlong	#29, fp
1533c     08 4E 85 F1 | 	sub	fp, #8
15340     A7 12 02 F6 | 	mov	arg01, fp
15344     E8 55 BF FD | 	call	#_push
15348                 | LR__1761
15348     A7 F0 03 F6 | 	mov	ptra, fp
1534c     B2 00 A0 FD | 	call	#popregs_
15350                 | _do_getpixel_ret
15350     2D 00 64 FD | 	ret
15354                 | 
15354                 | ' 
15354                 | ' sub do_log
15354                 | _do_log
15354     01 4A 05 F6 | 	mov	COUNT_, #1
15358     A8 00 A0 FD | 	call	#pushregs_
1535c     14 F0 07 F1 | 	add	ptra, #20
15360     4A 00 00 FF 
15364     B0 E4 05 F1 | 	add	objptr, ##38064
15368     F2 1E 02 FB | 	rdlong	local01, objptr
1536c     0F 17 02 F6 | 	mov	arg03, local01
15370     01 16 66 F0 | 	shl	arg03, #1
15374     0F 17 02 F1 | 	add	arg03, local01
15378     02 16 66 F0 | 	shl	arg03, #2
1537c     03 00 00 FF 
15380     04 E4 85 F1 | 	sub	objptr, ##1540
15384     F2 16 02 F1 | 	add	arg03, objptr
15388     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1538c     0C 4E 05 F1 | 	add	fp, #12
15390     A7 16 62 FC | 	wrlong	arg03, fp
15394                 | ' 
15394                 | ' numpar=compiledline(lineptr_e).result.uresult
15394                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15394     0C 4E 85 F1 | 	sub	fp, #12
15398     47 00 00 FF 
1539c     AC E4 85 F1 | 	sub	objptr, ##36524
153a0     0C 4E 05 51 |  if_ne	add	fp, #12
153a4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
153a8     0C 4E 85 51 |  if_ne	sub	fp, #12
153ac     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
153b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
153b4     00 12 06 F6 | 	mov	arg01, #0
153b8     A8 F3 B0 FD | 	call	#__system___getiolock_0485
153bc     FD 12 02 F6 | 	mov	arg01, result1
153c0     08 9A B0 FD | 	call	#__system___lockmem
153c4     75 01 00 FF 
153c8     02 15 06 F6 | 	mov	arg02, ##@LR__5194
153cc     00 12 06 F6 | 	mov	arg01, #0
153d0     00 16 06 F6 | 	mov	arg03, #0
153d4     E8 A6 B0 FD | 	call	#__system___basic_print_string
153d8     00 12 06 F6 | 	mov	arg01, #0
153dc     84 F3 B0 FD | 	call	#__system___getiolock_0485
153e0     FD 00 68 FC | 	wrlong	#0, result1
153e4     27 12 06 F6 | 	mov	arg01, #39
153e8     38 55 B0 FD | 	call	#_printerror
153ec     D0 00 90 FD | 	jmp	#LR__1773
153f0                 | LR__1770
153f0                 | ' 
153f0                 | ' if numpar=2 then 
153f0     0C 4E 05 F1 | 	add	fp, #12
153f4     A7 1E 02 FB | 	rdlong	local01, fp
153f8     0C 4E 85 F1 | 	sub	fp, #12
153fc     02 1E 0E F2 | 	cmp	local01, #2 wz
15400     48 00 90 5D |  if_ne	jmp	#LR__1771
15404     90 54 BF FD | 	call	#_pop
15408     FF 1E 02 F6 | 	mov	local01, result3
1540c     A7 FA 61 FC | 	wrlong	result1, fp
15410     04 4E 05 F1 | 	add	fp, #4
15414     A7 FC 61 FC | 	wrlong	result2, fp
15418     04 4E 05 F1 | 	add	fp, #4
1541c     A7 1E 62 FC | 	wrlong	local01, fp
15420     08 4E 85 F1 | 	sub	fp, #8
15424     A7 12 02 F6 | 	mov	arg01, fp
15428     B4 E1 BF FD | 	call	#_converttofloat
1542c     FD 14 02 F6 | 	mov	arg02, result1
15430     FC 16 20 FF 
15434     54 12 06 F6 | 	mov	arg01, ##1076754516
15438     84 D4 B0 FD | 	call	#__system____builtin_logbase
1543c     10 4E 05 F1 | 	add	fp, #16
15440     A7 FA 61 FC | 	wrlong	result1, fp
15444     10 4E 85 F1 | 	sub	fp, #16
15448     10 00 90 FD | 	jmp	#LR__1772
1544c                 | LR__1771
1544c     10 4E 05 F1 | 	add	fp, #16
15450     00 C0 9F FF 
15454     A7 00 68 FC | 	wrlong	##1065353216, fp
15458     10 4E 85 F1 | 	sub	fp, #16
1545c                 | LR__1772
1545c     38 54 BF FD | 	call	#_pop
15460     FF 1E 02 F6 | 	mov	local01, result3
15464     A7 FA 61 FC | 	wrlong	result1, fp
15468     04 4E 05 F1 | 	add	fp, #4
1546c     A7 FC 61 FC | 	wrlong	result2, fp
15470     04 4E 05 F1 | 	add	fp, #4
15474     A7 1E 62 FC | 	wrlong	local01, fp
15478     08 4E 85 F1 | 	sub	fp, #8
1547c     A7 12 02 F6 | 	mov	arg01, fp
15480     5C E1 BF FD | 	call	#_converttofloat
15484     FD 14 02 F6 | 	mov	arg02, result1
15488     FC 16 20 FF 
1548c     54 12 06 F6 | 	mov	arg01, ##1076754516
15490     2C D4 B0 FD | 	call	#__system____builtin_logbase
15494     FD 12 02 F6 | 	mov	arg01, result1
15498     10 4E 05 F1 | 	add	fp, #16
1549c     A7 14 02 FB | 	rdlong	arg02, fp
154a0     10 4E 85 F1 | 	sub	fp, #16
154a4     70 C6 B0 FD | 	call	#__system___float_div
154a8     A7 FA 61 FC | 	wrlong	result1, fp
154ac     08 4E 05 F1 | 	add	fp, #8
154b0     A7 3C 68 FC | 	wrlong	#30, fp
154b4     08 4E 85 F1 | 	sub	fp, #8
154b8     A7 12 02 F6 | 	mov	arg01, fp
154bc     70 54 BF FD | 	call	#_push
154c0                 | LR__1773
154c0     A7 F0 03 F6 | 	mov	ptra, fp
154c4     B2 00 A0 FD | 	call	#popregs_
154c8                 | _do_log_ret
154c8     2D 00 64 FD | 	ret
154cc                 | 
154cc                 | ' 
154cc                 | ' sub do_defsprite
154cc                 | _do_defsprite
154cc     07 4A 05 F6 | 	mov	COUNT_, #7
154d0     A8 00 A0 FD | 	call	#pushregs_
154d4     60 F0 07 F1 | 	add	ptra, #96
154d8     BC 53 BF FD | 	call	#_pop
154dc     FD 16 02 F6 | 	mov	arg03, result1
154e0     FE 14 02 F6 | 	mov	arg02, result2
154e4     FF 12 02 F6 | 	mov	arg01, result3
154e8     30 4E 05 F1 | 	add	fp, #48
154ec     A7 16 62 FC | 	wrlong	arg03, fp
154f0     04 4E 05 F1 | 	add	fp, #4
154f4     A7 14 62 FC | 	wrlong	arg02, fp
154f8     04 4E 05 F1 | 	add	fp, #4
154fc     A7 12 62 FC | 	wrlong	arg01, fp
15500     38 4E 85 F1 | 	sub	fp, #56
15504     90 53 BF FD | 	call	#_pop
15508     FD 16 02 F6 | 	mov	arg03, result1
1550c     FE 14 02 F6 | 	mov	arg02, result2
15510     FF 12 02 F6 | 	mov	arg01, result3
15514     24 4E 05 F1 | 	add	fp, #36
15518     A7 16 62 FC | 	wrlong	arg03, fp
1551c     04 4E 05 F1 | 	add	fp, #4
15520     A7 14 62 FC | 	wrlong	arg02, fp
15524     04 4E 05 F1 | 	add	fp, #4
15528     A7 12 62 FC | 	wrlong	arg01, fp
1552c     2C 4E 85 F1 | 	sub	fp, #44
15530     64 53 BF FD | 	call	#_pop
15534     FD 16 02 F6 | 	mov	arg03, result1
15538     FE 14 02 F6 | 	mov	arg02, result2
1553c     FF 12 02 F6 | 	mov	arg01, result3
15540     18 4E 05 F1 | 	add	fp, #24
15544     A7 16 62 FC | 	wrlong	arg03, fp
15548     04 4E 05 F1 | 	add	fp, #4
1554c     A7 14 62 FC | 	wrlong	arg02, fp
15550     04 4E 05 F1 | 	add	fp, #4
15554     A7 12 62 FC | 	wrlong	arg01, fp
15558     20 4E 85 F1 | 	sub	fp, #32
1555c     38 53 BF FD | 	call	#_pop
15560     FD 16 02 F6 | 	mov	arg03, result1
15564     FE 14 02 F6 | 	mov	arg02, result2
15568     FF 12 02 F6 | 	mov	arg01, result3
1556c     0C 4E 05 F1 | 	add	fp, #12
15570     A7 16 62 FC | 	wrlong	arg03, fp
15574     04 4E 05 F1 | 	add	fp, #4
15578     A7 14 62 FC | 	wrlong	arg02, fp
1557c     04 4E 05 F1 | 	add	fp, #4
15580     A7 12 62 FC | 	wrlong	arg01, fp
15584     14 4E 85 F1 | 	sub	fp, #20
15588     0C 53 BF FD | 	call	#_pop
1558c     FF 16 02 F6 | 	mov	arg03, result3
15590     A7 FA 61 FC | 	wrlong	result1, fp
15594     04 4E 05 F1 | 	add	fp, #4
15598     A7 FC 61 FC | 	wrlong	result2, fp
1559c     04 4E 05 F1 | 	add	fp, #4
155a0     A7 16 62 FC | 	wrlong	arg03, fp
155a4     08 4E 85 F1 | 	sub	fp, #8
155a8     A7 12 02 F6 | 	mov	arg01, fp
155ac     84 DF BF FD | 	call	#_converttoint
155b0     3C 4E 05 F1 | 	add	fp, #60
155b4     A7 FA 61 FC | 	wrlong	result1, fp
155b8     30 4E 85 F1 | 	sub	fp, #48
155bc     A7 12 02 F6 | 	mov	arg01, fp
155c0     0C 4E 85 F1 | 	sub	fp, #12
155c4     6C DF BF FD | 	call	#_converttoint
155c8     40 4E 05 F1 | 	add	fp, #64
155cc     A7 FA 61 FC | 	wrlong	result1, fp
155d0     28 4E 85 F1 | 	sub	fp, #40
155d4     A7 12 02 F6 | 	mov	arg01, fp
155d8     18 4E 85 F1 | 	sub	fp, #24
155dc     54 DF BF FD | 	call	#_converttoint
155e0     44 4E 05 F1 | 	add	fp, #68
155e4     A7 FA 61 FC | 	wrlong	result1, fp
155e8     20 4E 85 F1 | 	sub	fp, #32
155ec     A7 12 02 F6 | 	mov	arg01, fp
155f0     24 4E 85 F1 | 	sub	fp, #36
155f4     3C DF BF FD | 	call	#_converttoint
155f8     48 4E 05 F1 | 	add	fp, #72
155fc     A7 FA 61 FC | 	wrlong	result1, fp
15600     18 4E 85 F1 | 	sub	fp, #24
15604     A7 12 02 F6 | 	mov	arg01, fp
15608     30 4E 85 F1 | 	sub	fp, #48
1560c     24 DF BF FD | 	call	#_converttoint
15610     4C 4E 05 F1 | 	add	fp, #76
15614     A7 FA 61 FC | 	wrlong	result1, fp
15618                 | ' 
15618                 | ' t5=pop()
15618                 | ' t4=pop()
15618                 | ' t3=pop()
15618                 | ' t2=pop()
15618                 | ' t1=pop()
15618                 | ' 
15618                 | ' ' do convert, defsprite is not a racing command
15618                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
15618                 | '  
15618                 | ' ' todo: check parameters for linits
15618                 | ' if sprite(a1)<> nil then delete(sprite(a1))
15618     10 4E 85 F1 | 	sub	fp, #16
1561c     A7 16 02 FB | 	rdlong	arg03, fp
15620     3C 4E 85 F1 | 	sub	fp, #60
15624     02 16 66 F0 | 	shl	arg03, #2
15628     59 00 00 FF 
1562c     74 E5 05 F1 | 	add	objptr, ##45940
15630     F2 16 02 F1 | 	add	arg03, objptr
15634     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15638     59 00 00 FF 
1563c     74 E5 85 F1 | 	sub	objptr, ##45940
15640     2C 00 90 AD |  if_e	jmp	#LR__1780
15644     3C 4E 05 F1 | 	add	fp, #60
15648     A7 16 02 FB | 	rdlong	arg03, fp
1564c     3C 4E 85 F1 | 	sub	fp, #60
15650     02 16 66 F0 | 	shl	arg03, #2
15654     59 00 00 FF 
15658     74 E5 05 F1 | 	add	objptr, ##45940
1565c     F2 16 02 F1 | 	add	arg03, objptr
15660     0B 13 02 FB | 	rdlong	arg01, arg03
15664     59 00 00 FF 
15668     74 E5 85 F1 | 	sub	objptr, ##45940
1566c     E4 D6 B0 FD | 	call	#__system___gc_free
15670                 | LR__1780
15670     3C 4E 05 F1 | 	add	fp, #60
15674     A7 1E 02 FB | 	rdlong	local01, fp
15678     0C 4E 05 F1 | 	add	fp, #12
1567c     A7 16 02 FB | 	rdlong	arg03, fp
15680     04 4E 05 F1 | 	add	fp, #4
15684     A7 14 02 FB | 	rdlong	arg02, fp
15688     0A 17 02 FD | 	qmul	arg03, arg02
1568c     02 1E 66 F0 | 	shl	local01, #2
15690     59 00 00 FF 
15694     74 E5 05 F1 | 	add	objptr, ##45940
15698     F2 1E 02 F1 | 	add	local01, objptr
1569c     4C 4E 85 F1 | 	sub	fp, #76
156a0     59 00 00 FF 
156a4     74 E5 85 F1 | 	sub	objptr, ##45940
156a8     18 12 62 FD | 	getqx	arg01
156ac     68 D5 B0 FD | 	call	#__system___gc_alloc_managed
156b0     0F FB 61 FC | 	wrlong	result1, local01
156b4                 | ' for y=a3 to a3+a5-1
156b4     44 4E 05 F1 | 	add	fp, #68
156b8     A7 20 02 FB | 	rdlong	local02, fp
156bc     0C 4E 05 F1 | 	add	fp, #12
156c0     A7 20 62 FC | 	wrlong	local02, fp
156c4     0C 4E 85 F1 | 	sub	fp, #12
156c8     A7 22 02 FB | 	rdlong	local03, fp
156cc     08 4E 05 F1 | 	add	fp, #8
156d0     A7 24 02 FB | 	rdlong	local04, fp
156d4     4C 4E 85 F1 | 	sub	fp, #76
156d8     12 23 02 F1 | 	add	local03, local04
156dc                 | LR__1781
156dc     50 4E 05 F1 | 	add	fp, #80
156e0     A7 20 02 FB | 	rdlong	local02, fp
156e4     50 4E 85 F1 | 	sub	fp, #80
156e8     11 21 52 F2 | 	cmps	local02, local03 wc
156ec     F4 00 90 3D |  if_ae	jmp	#LR__1784
156f0                 | '   for x=a2 to a4+a2-1
156f0     40 4E 05 F1 | 	add	fp, #64
156f4     A7 1E 02 FB | 	rdlong	local01, fp
156f8     14 4E 05 F1 | 	add	fp, #20
156fc     A7 1E 62 FC | 	wrlong	local01, fp
15700     0C 4E 85 F1 | 	sub	fp, #12
15704     A7 26 02 FB | 	rdlong	local05, fp
15708     08 4E 85 F1 | 	sub	fp, #8
1570c     A7 28 02 FB | 	rdlong	local06, fp
15710     40 4E 85 F1 | 	sub	fp, #64
15714     14 27 02 F1 | 	add	local05, local06
15718                 | LR__1782
15718     54 4E 05 F1 | 	add	fp, #84
1571c     A7 1E 02 FB | 	rdlong	local01, fp
15720     54 4E 85 F1 | 	sub	fp, #84
15724     13 1F 52 F2 | 	cmps	local01, local05 wc
15728     A0 00 90 3D |  if_ae	jmp	#LR__1783
1572c     3C 4E 05 F1 | 	add	fp, #60
15730     A7 28 02 FB | 	rdlong	local06, fp
15734     18 4E 05 F1 | 	add	fp, #24
15738     A7 24 02 FB | 	rdlong	local04, fp
1573c     14 4E 85 F1 | 	sub	fp, #20
15740     A7 20 02 FB | 	rdlong	local02, fp
15744     10 4E 05 F1 | 	add	fp, #16
15748     A7 1E 02 FB | 	rdlong	local01, fp
1574c     0F 17 02 F6 | 	mov	arg03, local01
15750     0C 4E 85 F1 | 	sub	fp, #12
15754     A7 14 02 FB | 	rdlong	arg02, fp
15758     0A 17 82 F1 | 	sub	arg03, arg02
1575c     04 4E 05 F1 | 	add	fp, #4
15760     A7 14 02 FB | 	rdlong	arg02, fp
15764     0A 17 02 FD | 	qmul	arg03, arg02
15768     02 28 66 F0 | 	shl	local06, #2
1576c     59 00 00 FF 
15770     74 E5 05 F1 | 	add	objptr, ##45940
15774     F2 28 02 F1 | 	add	local06, objptr
15778     14 29 02 FB | 	rdlong	local06, local06
1577c     12 2B 02 F6 | 	mov	local07, local04
15780     10 2B 82 F1 | 	sub	local07, local02
15784     59 00 00 FF 
15788     74 E5 85 F1 | 	sub	objptr, ##45940
1578c     F2 12 02 FB | 	rdlong	arg01, objptr
15790     12 13 02 F1 | 	add	arg01, local04
15794     48 4E 85 F1 | 	sub	fp, #72
15798     0A 1E 66 F0 | 	shl	local01, #10
1579c     0F 13 02 F1 | 	add	arg01, local01
157a0     18 24 62 FD | 	getqx	local04
157a4     12 2B 02 F1 | 	add	local07, local04
157a8     14 2B 02 F1 | 	add	local07, local06
157ac     B0 53 B0 FD | 	call	#_pspeek
157b0     15 FB 41 FC | 	wrbyte	result1, local07
157b4     54 4E 05 F1 | 	add	fp, #84
157b8     A7 2A 02 FB | 	rdlong	local07, fp
157bc     01 2A 06 F1 | 	add	local07, #1
157c0     A7 2A 62 FC | 	wrlong	local07, fp
157c4     54 4E 85 F1 | 	sub	fp, #84
157c8     4C FF 9F FD | 	jmp	#LR__1782
157cc                 | LR__1783
157cc     50 4E 05 F1 | 	add	fp, #80
157d0     A7 2A 02 FB | 	rdlong	local07, fp
157d4     01 2A 06 F1 | 	add	local07, #1
157d8     A7 2A 62 FC | 	wrlong	local07, fp
157dc     50 4E 85 F1 | 	sub	fp, #80
157e0     F8 FE 9F FD | 	jmp	#LR__1781
157e4                 | LR__1784
157e4     3C 4E 05 F1 | 	add	fp, #60
157e8     A7 2A 02 FB | 	rdlong	local07, fp
157ec     15 13 02 F6 | 	mov	arg01, local07
157f0     3C 4E 85 F1 | 	sub	fp, #60
157f4     02 2A 66 F0 | 	shl	local07, #2
157f8     59 00 00 FF 
157fc     74 E5 05 F1 | 	add	objptr, ##45940
15800     F2 2A 02 F1 | 	add	local07, objptr
15804     15 15 02 FB | 	rdlong	arg02, local07
15808     59 00 00 FF 
1580c     74 E5 85 F1 | 	sub	objptr, ##45940
15810     60 71 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15814     3C 4E 05 F1 | 	add	fp, #60
15818     A7 12 02 FB | 	rdlong	arg01, fp
1581c     0C 4E 05 F1 | 	add	fp, #12
15820     A7 14 02 FB | 	rdlong	arg02, fp
15824     04 4E 05 F1 | 	add	fp, #4
15828     A7 16 02 FB | 	rdlong	arg03, fp
1582c     4C 4E 85 F1 | 	sub	fp, #76
15830     D0 71 B0 FD | 	call	#_hg010b_spin2_setspritesize
15834     A7 F0 03 F6 | 	mov	ptra, fp
15838     B2 00 A0 FD | 	call	#popregs_
1583c                 | _do_defsprite_ret
1583c     2D 00 64 FD | 	ret
15840                 | 
15840                 | ' 
15840                 | ' sub do_sprite
15840                 | _do_sprite
15840     00 4A 05 F6 | 	mov	COUNT_, #0
15844     A8 00 A0 FD | 	call	#pushregs_
15848     30 F0 07 F1 | 	add	ptra, #48
1584c     48 50 BF FD | 	call	#_pop
15850     FD 16 02 F6 | 	mov	arg03, result1
15854     FE 14 02 F6 | 	mov	arg02, result2
15858     FF 12 02 F6 | 	mov	arg01, result3
1585c     18 4E 05 F1 | 	add	fp, #24
15860     A7 16 62 FC | 	wrlong	arg03, fp
15864     04 4E 05 F1 | 	add	fp, #4
15868     A7 14 62 FC | 	wrlong	arg02, fp
1586c     04 4E 05 F1 | 	add	fp, #4
15870     A7 12 62 FC | 	wrlong	arg01, fp
15874     20 4E 85 F1 | 	sub	fp, #32
15878     1C 50 BF FD | 	call	#_pop
1587c     FD 16 02 F6 | 	mov	arg03, result1
15880     FE 14 02 F6 | 	mov	arg02, result2
15884     FF 12 02 F6 | 	mov	arg01, result3
15888     0C 4E 05 F1 | 	add	fp, #12
1588c     A7 16 62 FC | 	wrlong	arg03, fp
15890     04 4E 05 F1 | 	add	fp, #4
15894     A7 14 62 FC | 	wrlong	arg02, fp
15898     04 4E 05 F1 | 	add	fp, #4
1589c     A7 12 62 FC | 	wrlong	arg01, fp
158a0     14 4E 85 F1 | 	sub	fp, #20
158a4     F0 4F BF FD | 	call	#_pop
158a8     FF 16 02 F6 | 	mov	arg03, result3
158ac     A7 FA 61 FC | 	wrlong	result1, fp
158b0     04 4E 05 F1 | 	add	fp, #4
158b4     A7 FC 61 FC | 	wrlong	result2, fp
158b8     04 4E 05 F1 | 	add	fp, #4
158bc     A7 16 62 FC | 	wrlong	arg03, fp
158c0     08 4E 85 F1 | 	sub	fp, #8
158c4     A7 12 02 F6 | 	mov	arg01, fp
158c8     68 DC BF FD | 	call	#_converttoint
158cc     24 4E 05 F1 | 	add	fp, #36
158d0     A7 FA 61 FC | 	wrlong	result1, fp
158d4     18 4E 85 F1 | 	sub	fp, #24
158d8     A7 12 02 F6 | 	mov	arg01, fp
158dc     0C 4E 85 F1 | 	sub	fp, #12
158e0     50 DC BF FD | 	call	#_converttoint
158e4     28 4E 05 F1 | 	add	fp, #40
158e8     A7 FA 61 FC | 	wrlong	result1, fp
158ec     10 4E 85 F1 | 	sub	fp, #16
158f0     A7 12 02 F6 | 	mov	arg01, fp
158f4     18 4E 85 F1 | 	sub	fp, #24
158f8     38 DC BF FD | 	call	#_converttoint
158fc     2C 4E 05 F1 | 	add	fp, #44
15900     A7 FA 61 FC | 	wrlong	result1, fp
15904     08 4E 85 F1 | 	sub	fp, #8
15908     A7 12 02 FB | 	rdlong	arg01, fp
1590c     04 4E 05 F1 | 	add	fp, #4
15910     A7 14 02 FB | 	rdlong	arg02, fp
15914     FD 16 02 F6 | 	mov	arg03, result1
15918     28 4E 85 F1 | 	sub	fp, #40
1591c     7C 70 B0 FD | 	call	#_hg010b_spin2_setspritepos
15920     A7 F0 03 F6 | 	mov	ptra, fp
15924     B2 00 A0 FD | 	call	#popregs_
15928                 | _do_sprite_ret
15928     2D 00 64 FD | 	ret
1592c                 | 
1592c                 | ' 
1592c                 | ' sub do_mousex
1592c                 | _do_mousex
1592c     00 4A 05 F6 | 	mov	COUNT_, #0
15930     A8 00 A0 FD | 	call	#pushregs_
15934     0C F0 07 F1 | 	add	ptra, #12
15938     08 4E 05 F1 | 	add	fp, #8
1593c     A7 3A 68 FC | 	wrlong	#29, fp
15940     08 4E 85 F1 | 	sub	fp, #8
15944     59 00 00 FF 
15948     2C E5 05 F1 | 	add	objptr, ##45868
1594c     F2 12 02 FB | 	rdlong	arg01, objptr
15950     59 00 00 FF 
15954     2C E5 85 F1 | 	sub	objptr, ##45868
15958     A7 12 62 FC | 	wrlong	arg01, fp
1595c     A7 12 02 F6 | 	mov	arg01, fp
15960     CC 4F BF FD | 	call	#_push
15964     A7 F0 03 F6 | 	mov	ptra, fp
15968     B2 00 A0 FD | 	call	#popregs_
1596c                 | _do_mousex_ret
1596c     2D 00 64 FD | 	ret
15970                 | 
15970                 | ' 
15970                 | ' sub do_mousey
15970                 | _do_mousey
15970     00 4A 05 F6 | 	mov	COUNT_, #0
15974     A8 00 A0 FD | 	call	#pushregs_
15978     0C F0 07 F1 | 	add	ptra, #12
1597c     08 4E 05 F1 | 	add	fp, #8
15980     A7 3A 68 FC | 	wrlong	#29, fp
15984     08 4E 85 F1 | 	sub	fp, #8
15988     59 00 00 FF 
1598c     30 E5 05 F1 | 	add	objptr, ##45872
15990     F2 12 02 FB | 	rdlong	arg01, objptr
15994     59 00 00 FF 
15998     30 E5 85 F1 | 	sub	objptr, ##45872
1599c     A7 12 62 FC | 	wrlong	arg01, fp
159a0     A7 12 02 F6 | 	mov	arg01, fp
159a4     88 4F BF FD | 	call	#_push
159a8     A7 F0 03 F6 | 	mov	ptra, fp
159ac     B2 00 A0 FD | 	call	#popregs_
159b0                 | _do_mousey_ret
159b0     2D 00 64 FD | 	ret
159b4                 | 
159b4                 | ' 
159b4                 | ' sub do_mousew
159b4                 | _do_mousew
159b4     00 4A 05 F6 | 	mov	COUNT_, #0
159b8     A8 00 A0 FD | 	call	#pushregs_
159bc     0C F0 07 F1 | 	add	ptra, #12
159c0     08 4E 05 F1 | 	add	fp, #8
159c4     A7 38 68 FC | 	wrlong	#28, fp
159c8     08 4E 85 F1 | 	sub	fp, #8
159cc     59 00 00 FF 
159d0     38 E5 05 F1 | 	add	objptr, ##45880
159d4     F2 12 02 FB | 	rdlong	arg01, objptr
159d8     59 00 00 FF 
159dc     38 E5 85 F1 | 	sub	objptr, ##45880
159e0     A7 12 62 FC | 	wrlong	arg01, fp
159e4     A7 12 02 F6 | 	mov	arg01, fp
159e8     44 4F BF FD | 	call	#_push
159ec     A7 F0 03 F6 | 	mov	ptra, fp
159f0     B2 00 A0 FD | 	call	#popregs_
159f4                 | _do_mousew_ret
159f4     2D 00 64 FD | 	ret
159f8                 | 
159f8                 | ' 
159f8                 | ' sub do_mousek
159f8                 | _do_mousek
159f8     00 4A 05 F6 | 	mov	COUNT_, #0
159fc     A8 00 A0 FD | 	call	#pushregs_
15a00     0C F0 07 F1 | 	add	ptra, #12
15a04     08 4E 05 F1 | 	add	fp, #8
15a08     A7 3A 68 FC | 	wrlong	#29, fp
15a0c     08 4E 85 F1 | 	sub	fp, #8
15a10     59 00 00 FF 
15a14     34 E5 05 F1 | 	add	objptr, ##45876
15a18     F2 12 02 FB | 	rdlong	arg01, objptr
15a1c     59 00 00 FF 
15a20     34 E5 85 F1 | 	sub	objptr, ##45876
15a24     A7 12 62 FC | 	wrlong	arg01, fp
15a28     A7 12 02 F6 | 	mov	arg01, fp
15a2c     00 4F BF FD | 	call	#_push
15a30     A7 F0 03 F6 | 	mov	ptra, fp
15a34     B2 00 A0 FD | 	call	#popregs_
15a38                 | _do_mousek_ret
15a38     2D 00 64 FD | 	ret
15a3c                 | 
15a3c                 | ' 
15a3c                 | ' 
15a3c                 | ' sub do_rdpin
15a3c                 | _do_rdpin
15a3c     00 4A 05 F6 | 	mov	COUNT_, #0
15a40     A8 00 A0 FD | 	call	#pushregs_
15a44     0C F0 07 F1 | 	add	ptra, #12
15a48     4C 4E BF FD | 	call	#_pop
15a4c     A7 FA 61 FC | 	wrlong	result1, fp
15a50     04 4E 05 F1 | 	add	fp, #4
15a54     A7 FC 61 FC | 	wrlong	result2, fp
15a58     04 4E 05 F1 | 	add	fp, #4
15a5c     A7 FE 61 FC | 	wrlong	result3, fp
15a60     08 4E 85 F1 | 	sub	fp, #8
15a64     A7 12 02 F6 | 	mov	arg01, fp
15a68     C8 DA BF FD | 	call	#_converttoint
15a6c     FD FA 89 FA | 	rdpin	result1, result1
15a70     5A 00 00 FF 
15a74     60 E4 05 F1 | 	add	objptr, ##46176
15a78     F2 FA 61 FC | 	wrlong	result1, objptr
15a7c     5A 00 00 FF 
15a80     60 E4 85 F1 | 	sub	objptr, ##46176
15a84     08 4E 05 F1 | 	add	fp, #8
15a88     A7 3A 68 FC | 	wrlong	#29, fp
15a8c     08 4E 85 F1 | 	sub	fp, #8
15a90     A7 08 68 FC | 	wrlong	#4, fp
15a94     A7 12 02 F6 | 	mov	arg01, fp
15a98     94 4E BF FD | 	call	#_push
15a9c     A7 F0 03 F6 | 	mov	ptra, fp
15aa0     B2 00 A0 FD | 	call	#popregs_
15aa4                 | _do_rdpin_ret
15aa4     2D 00 64 FD | 	ret
15aa8                 | 
15aa8                 | ' 
15aa8                 | ' sub do_rqpin
15aa8                 | _do_rqpin
15aa8     00 4A 05 F6 | 	mov	COUNT_, #0
15aac     A8 00 A0 FD | 	call	#pushregs_
15ab0     0C F0 07 F1 | 	add	ptra, #12
15ab4     E0 4D BF FD | 	call	#_pop
15ab8     A7 FA 61 FC | 	wrlong	result1, fp
15abc     04 4E 05 F1 | 	add	fp, #4
15ac0     A7 FC 61 FC | 	wrlong	result2, fp
15ac4     04 4E 05 F1 | 	add	fp, #4
15ac8     A7 FE 61 FC | 	wrlong	result3, fp
15acc     08 4E 85 F1 | 	sub	fp, #8
15ad0     A7 12 02 F6 | 	mov	arg01, fp
15ad4     5C DA BF FD | 	call	#_converttoint
15ad8     FD 12 02 F6 | 	mov	arg01, result1
15adc     00 FA 05 F6 | 	mov	result1, #0
15ae0     09 FB 81 FA | 	rqpin	result1, arg01
15ae4     5A 00 00 FF 
15ae8     60 E4 05 F1 | 	add	objptr, ##46176
15aec     F2 FA 61 FC | 	wrlong	result1, objptr
15af0     5A 00 00 FF 
15af4     60 E4 85 F1 | 	sub	objptr, ##46176
15af8     08 4E 05 F1 | 	add	fp, #8
15afc     A7 3A 68 FC | 	wrlong	#29, fp
15b00     08 4E 85 F1 | 	sub	fp, #8
15b04     A7 08 68 FC | 	wrlong	#4, fp
15b08     A7 12 02 F6 | 	mov	arg01, fp
15b0c     20 4E BF FD | 	call	#_push
15b10     A7 F0 03 F6 | 	mov	ptra, fp
15b14     B2 00 A0 FD | 	call	#popregs_
15b18                 | _do_rqpin_ret
15b18     2D 00 64 FD | 	ret
15b1c                 | 
15b1c                 | ' 
15b1c                 | ' sub do_pinread
15b1c                 | _do_pinread
15b1c     00 4A 05 F6 | 	mov	COUNT_, #0
15b20     A8 00 A0 FD | 	call	#pushregs_
15b24     0C F0 07 F1 | 	add	ptra, #12
15b28     6C 4D BF FD | 	call	#_pop
15b2c     A7 FA 61 FC | 	wrlong	result1, fp
15b30     04 4E 05 F1 | 	add	fp, #4
15b34     A7 FC 61 FC | 	wrlong	result2, fp
15b38     04 4E 05 F1 | 	add	fp, #4
15b3c     A7 FE 61 FC | 	wrlong	result3, fp
15b40     08 4E 85 F1 | 	sub	fp, #8
15b44     A7 12 02 F6 | 	mov	arg01, fp
15b48     E8 D9 BF FD | 	call	#_converttoint
15b4c     FD 12 02 F6 | 	mov	arg01, result1
15b50     20 12 CE F7 | 	test	arg01, #32 wz
15b54     FF FB 01 56 |  if_ne	mov	result1, inb
15b58     FE FB 01 A6 |  if_e	mov	result1, ina
15b5c     09 FB 41 F0 | 	shr	result1, arg01
15b60     06 12 46 F0 | 	shr	arg01, #6
15b64     09 FB 41 F7 | 	zerox	result1, arg01
15b68     5A 00 00 FF 
15b6c     60 E4 05 F1 | 	add	objptr, ##46176
15b70     F2 FA 61 FC | 	wrlong	result1, objptr
15b74     5A 00 00 FF 
15b78     60 E4 85 F1 | 	sub	objptr, ##46176
15b7c     08 4E 05 F1 | 	add	fp, #8
15b80     A7 3A 68 FC | 	wrlong	#29, fp
15b84     08 4E 85 F1 | 	sub	fp, #8
15b88     A7 08 68 FC | 	wrlong	#4, fp
15b8c     A7 12 02 F6 | 	mov	arg01, fp
15b90     9C 4D BF FD | 	call	#_push
15b94     A7 F0 03 F6 | 	mov	ptra, fp
15b98     B2 00 A0 FD | 	call	#popregs_
15b9c                 | _do_pinread_ret
15b9c     2D 00 64 FD | 	ret
15ba0                 | 
15ba0                 | ' 
15ba0                 | ' sub do_gettime
15ba0                 | _do_gettime
15ba0     02 4A 05 F6 | 	mov	COUNT_, #2
15ba4     A8 00 A0 FD | 	call	#pushregs_
15ba8     14 F0 07 F1 | 	add	ptra, #20
15bac                 | ' 
15bac                 | ' const asm 
15bac     1A 1E 72 FD | 	getct	local01 wc
15bb0     1A 20 62 FD | 	getct	local02
15bb4                 | ' 
15bb4                 | ' return hi1, lo1
15bb4     10 FD 01 F6 | 	mov	result2, local02
15bb8     A7 1E 62 FC | 	wrlong	local01, fp
15bbc     04 4E 05 F1 | 	add	fp, #4
15bc0     A7 FC 61 FC | 	wrlong	result2, fp
15bc4     0C 4E 05 F1 | 	add	fp, #12
15bc8     A7 3A 68 FC | 	wrlong	#29, fp
15bcc     0C 4E 85 F1 | 	sub	fp, #12
15bd0     A7 12 02 FB | 	rdlong	arg01, fp
15bd4     04 4E 05 F1 | 	add	fp, #4
15bd8     A7 12 62 FC | 	wrlong	arg01, fp
15bdc     08 4E 85 F1 | 	sub	fp, #8
15be0     A7 12 02 FB | 	rdlong	arg01, fp
15be4     0C 4E 05 F1 | 	add	fp, #12
15be8     A7 12 62 FC | 	wrlong	arg01, fp
15bec     04 4E 85 F1 | 	sub	fp, #4
15bf0     A7 12 02 F6 | 	mov	arg01, fp
15bf4     08 4E 85 F1 | 	sub	fp, #8
15bf8     34 4D BF FD | 	call	#_push
15bfc     A7 F0 03 F6 | 	mov	ptra, fp
15c00     B2 00 A0 FD | 	call	#popregs_
15c04                 | _do_gettime_ret
15c04     2D 00 64 FD | 	ret
15c08                 | 
15c08                 | '    
15c08                 | ' 
15c08                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
15c08                 | ' 
15c08                 | ' '' ----------------------------- Clear the screen
15c08                 | ' 
15c08                 | ' sub do_cls
15c08                 | _do_cls
15c08     37 00 00 FF 
15c0c     6C E4 05 F1 | 	add	objptr, ##28268
15c10     F2 12 02 FB | 	rdlong	arg01, objptr
15c14     04 E4 85 F1 | 	sub	objptr, #4
15c18     F2 14 02 FB | 	rdlong	arg02, objptr
15c1c     37 00 00 FF 
15c20     68 E4 85 F1 | 	sub	objptr, ##28264
15c24     FC 7A B0 FD | 	call	#_hg010b_spin2_cls
15c28     37 00 00 FF 
15c2c     6C E4 05 F1 | 	add	objptr, ##28268
15c30     F2 14 02 FB | 	rdlong	arg02, objptr
15c34     14 E4 85 F1 | 	sub	objptr, #20
15c38     F2 14 62 FC | 	wrlong	arg02, objptr
15c3c     37 00 00 FF 
15c40     58 E4 85 F1 | 	sub	objptr, ##28248
15c44                 | _do_cls_ret
15c44     2D 00 64 FD | 	ret
15c48                 | 
15c48                 | ' 
15c48                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
15c48                 | ' 
15c48                 | ' sub do_color
15c48                 | _do_color
15c48     03 4A 05 F6 | 	mov	COUNT_, #3
15c4c     A8 00 A0 FD | 	call	#pushregs_
15c50     44 4C BF FD | 	call	#_pop
15c54     FD 1E 02 F6 | 	mov	local01, result1
15c58     FE 20 02 F6 | 	mov	local02, result2
15c5c     FF 22 02 F6 | 	mov	local03, result3
15c60     37 00 00 FF 
15c64     58 E4 05 F1 | 	add	objptr, ##28248
15c68     F2 1E 62 FC | 	wrlong	local01, objptr
15c6c     37 00 00 FF 
15c70     58 E4 85 F1 | 	sub	objptr, ##28248
15c74     A7 F0 03 F6 | 	mov	ptra, fp
15c78     B2 00 A0 FD | 	call	#popregs_
15c7c                 | _do_color_ret
15c7c     2D 00 64 FD | 	ret
15c80                 | 
15c80                 | ' 
15c80                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
15c80                 | ' 
15c80                 | ' sub do_plot
15c80                 | _do_plot
15c80     00 4A 05 F6 | 	mov	COUNT_, #0
15c84     A8 00 A0 FD | 	call	#pushregs_
15c88     20 F0 07 F1 | 	add	ptra, #32
15c8c     08 4C BF FD | 	call	#_pop
15c90     FD 16 02 F6 | 	mov	arg03, result1
15c94     FE 14 02 F6 | 	mov	arg02, result2
15c98     FF 12 02 F6 | 	mov	arg01, result3
15c9c     0C 4E 05 F1 | 	add	fp, #12
15ca0     A7 16 62 FC | 	wrlong	arg03, fp
15ca4     04 4E 05 F1 | 	add	fp, #4
15ca8     A7 14 62 FC | 	wrlong	arg02, fp
15cac     04 4E 05 F1 | 	add	fp, #4
15cb0     A7 12 62 FC | 	wrlong	arg01, fp
15cb4     14 4E 85 F1 | 	sub	fp, #20
15cb8     DC 4B BF FD | 	call	#_pop
15cbc     FF 16 02 F6 | 	mov	arg03, result3
15cc0     A7 FA 61 FC | 	wrlong	result1, fp
15cc4     04 4E 05 F1 | 	add	fp, #4
15cc8     A7 FC 61 FC | 	wrlong	result2, fp
15ccc     04 4E 05 F1 | 	add	fp, #4
15cd0     A7 16 62 FC | 	wrlong	arg03, fp
15cd4     08 4E 85 F1 | 	sub	fp, #8
15cd8     A7 12 02 F6 | 	mov	arg01, fp
15cdc     54 D8 BF FD | 	call	#_converttoint
15ce0     18 4E 05 F1 | 	add	fp, #24
15ce4     A7 FA 61 FC | 	wrlong	result1, fp
15ce8     0C 4E 85 F1 | 	sub	fp, #12
15cec     A7 12 02 F6 | 	mov	arg01, fp
15cf0     0C 4E 85 F1 | 	sub	fp, #12
15cf4     3C D8 BF FD | 	call	#_converttoint
15cf8     1C 4E 05 F1 | 	add	fp, #28
15cfc     A7 FA 61 FC | 	wrlong	result1, fp
15d00     04 4E 85 F1 | 	sub	fp, #4
15d04     A7 16 02 FB | 	rdlong	arg03, fp
15d08     37 00 00 FF 
15d0c     5C E4 05 F1 | 	add	objptr, ##28252
15d10     F2 16 62 FC | 	wrlong	arg03, objptr
15d14     04 4E 05 F1 | 	add	fp, #4
15d18     A7 14 02 FB | 	rdlong	arg02, fp
15d1c     1C 4E 85 F1 | 	sub	fp, #28
15d20     04 E4 05 F1 | 	add	objptr, #4
15d24     F2 14 62 FC | 	wrlong	arg02, objptr
15d28     04 E4 85 F1 | 	sub	objptr, #4
15d2c     F2 12 02 FB | 	rdlong	arg01, objptr
15d30     04 E4 85 F1 | 	sub	objptr, #4
15d34     F2 16 02 FB | 	rdlong	arg03, objptr
15d38     37 00 00 FF 
15d3c     58 E4 85 F1 | 	sub	objptr, ##28248
15d40     0C 6D B0 FD | 	call	#_hg010b_spin2_putpixel
15d44     A7 F0 03 F6 | 	mov	ptra, fp
15d48     B2 00 A0 FD | 	call	#popregs_
15d4c                 | _do_plot_ret
15d4c     2D 00 64 FD | 	ret
15d50                 | 
15d50                 | ' 
15d50                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
15d50                 | ' 
15d50                 | ' sub do_draw
15d50                 | _do_draw
15d50     00 4A 05 F6 | 	mov	COUNT_, #0
15d54     A8 00 A0 FD | 	call	#pushregs_
15d58     20 F0 07 F1 | 	add	ptra, #32
15d5c     38 4B BF FD | 	call	#_pop
15d60     FD 1A 02 F6 | 	mov	arg05, result1
15d64     FE 18 02 F6 | 	mov	arg04, result2
15d68     FF 16 02 F6 | 	mov	arg03, result3
15d6c     0C 4E 05 F1 | 	add	fp, #12
15d70     A7 1A 62 FC | 	wrlong	arg05, fp
15d74     04 4E 05 F1 | 	add	fp, #4
15d78     A7 18 62 FC | 	wrlong	arg04, fp
15d7c     04 4E 05 F1 | 	add	fp, #4
15d80     A7 16 62 FC | 	wrlong	arg03, fp
15d84     14 4E 85 F1 | 	sub	fp, #20
15d88     0C 4B BF FD | 	call	#_pop
15d8c     FF 1A 02 F6 | 	mov	arg05, result3
15d90     A7 FA 61 FC | 	wrlong	result1, fp
15d94     04 4E 05 F1 | 	add	fp, #4
15d98     A7 FC 61 FC | 	wrlong	result2, fp
15d9c     04 4E 05 F1 | 	add	fp, #4
15da0     A7 1A 62 FC | 	wrlong	arg05, fp
15da4     08 4E 85 F1 | 	sub	fp, #8
15da8     A7 12 02 F6 | 	mov	arg01, fp
15dac     84 D7 BF FD | 	call	#_converttoint
15db0     18 4E 05 F1 | 	add	fp, #24
15db4     A7 FA 61 FC | 	wrlong	result1, fp
15db8     0C 4E 85 F1 | 	sub	fp, #12
15dbc     A7 12 02 F6 | 	mov	arg01, fp
15dc0     0C 4E 85 F1 | 	sub	fp, #12
15dc4     6C D7 BF FD | 	call	#_converttoint
15dc8     1C 4E 05 F1 | 	add	fp, #28
15dcc     A7 FA 61 FC | 	wrlong	result1, fp
15dd0     37 00 00 FF 
15dd4     5C E4 05 F1 | 	add	objptr, ##28252
15dd8     F2 12 02 FB | 	rdlong	arg01, objptr
15ddc     04 E4 05 F1 | 	add	objptr, #4
15de0     F2 14 02 FB | 	rdlong	arg02, objptr
15de4     04 4E 85 F1 | 	sub	fp, #4
15de8     A7 16 02 FB | 	rdlong	arg03, fp
15dec     FD 18 02 F6 | 	mov	arg04, result1
15df0     18 4E 85 F1 | 	sub	fp, #24
15df4     08 E4 85 F1 | 	sub	objptr, #8
15df8     F2 1A 02 FB | 	rdlong	arg05, objptr
15dfc     37 00 00 FF 
15e00     58 E4 85 F1 | 	sub	objptr, ##28248
15e04     F8 6E B0 FD | 	call	#_hg010b_spin2_draw
15e08     18 4E 05 F1 | 	add	fp, #24
15e0c     A7 1A 02 FB | 	rdlong	arg05, fp
15e10     37 00 00 FF 
15e14     5C E4 05 F1 | 	add	objptr, ##28252
15e18     F2 1A 62 FC | 	wrlong	arg05, objptr
15e1c     04 4E 05 F1 | 	add	fp, #4
15e20     A7 1A 02 FB | 	rdlong	arg05, fp
15e24     1C 4E 85 F1 | 	sub	fp, #28
15e28     04 E4 05 F1 | 	add	objptr, #4
15e2c     F2 1A 62 FC | 	wrlong	arg05, objptr
15e30     37 00 00 FF 
15e34     60 E4 85 F1 | 	sub	objptr, ##28256
15e38     A7 F0 03 F6 | 	mov	ptra, fp
15e3c     B2 00 A0 FD | 	call	#popregs_
15e40                 | _do_draw_ret
15e40     2D 00 64 FD | 	ret
15e44                 | 
15e44                 | ' 
15e44                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
15e44                 | ' 
15e44                 | ' sub do_fcircle
15e44                 | _do_fcircle
15e44     02 4A 05 F6 | 	mov	COUNT_, #2
15e48     A8 00 A0 FD | 	call	#pushregs_
15e4c     24 F0 07 F1 | 	add	ptra, #36
15e50     44 4A BF FD | 	call	#_pop
15e54     FD 18 02 F6 | 	mov	arg04, result1
15e58     FE 16 02 F6 | 	mov	arg03, result2
15e5c     FF 14 02 F6 | 	mov	arg02, result3
15e60     18 4E 05 F1 | 	add	fp, #24
15e64     A7 18 62 FC | 	wrlong	arg04, fp
15e68     04 4E 05 F1 | 	add	fp, #4
15e6c     A7 16 62 FC | 	wrlong	arg03, fp
15e70     04 4E 05 F1 | 	add	fp, #4
15e74     A7 14 62 FC | 	wrlong	arg02, fp
15e78     20 4E 85 F1 | 	sub	fp, #32
15e7c     18 4A BF FD | 	call	#_pop
15e80     FD 18 02 F6 | 	mov	arg04, result1
15e84     FE 16 02 F6 | 	mov	arg03, result2
15e88     FF 1E 02 F6 | 	mov	local01, result3
15e8c     0C 4E 05 F1 | 	add	fp, #12
15e90     A7 18 62 FC | 	wrlong	arg04, fp
15e94     04 4E 05 F1 | 	add	fp, #4
15e98     A7 16 62 FC | 	wrlong	arg03, fp
15e9c     04 4E 05 F1 | 	add	fp, #4
15ea0     A7 1E 62 FC | 	wrlong	local01, fp
15ea4     14 4E 85 F1 | 	sub	fp, #20
15ea8     EC 49 BF FD | 	call	#_pop
15eac     A7 FA 61 FC | 	wrlong	result1, fp
15eb0     04 4E 05 F1 | 	add	fp, #4
15eb4     A7 FC 61 FC | 	wrlong	result2, fp
15eb8     04 4E 05 F1 | 	add	fp, #4
15ebc     A7 FE 61 FC | 	wrlong	result3, fp
15ec0                 | ' 
15ec0                 | ' t3=pop()
15ec0                 | ' t2=pop()
15ec0                 | ' t1=pop()
15ec0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15ec0     FF 18 02 F6 | 	mov	arg04, result3
15ec4     08 4E 85 F1 | 	sub	fp, #8
15ec8     1C 18 0E F2 | 	cmp	arg04, #28 wz
15ecc     08 4E 05 51 |  if_ne	add	fp, #8
15ed0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15ed4     08 4E 85 51 |  if_ne	sub	fp, #8
15ed8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15edc     7C 00 90 5D |  if_ne	jmp	#LR__1790
15ee0     14 4E 05 F1 | 	add	fp, #20
15ee4     A7 1E 02 FB | 	rdlong	local01, fp
15ee8     14 4E 85 F1 | 	sub	fp, #20
15eec     1C 1E 0E F2 | 	cmp	local01, #28 wz
15ef0     14 4E 05 51 |  if_ne	add	fp, #20
15ef4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15ef8     14 4E 85 51 |  if_ne	sub	fp, #20
15efc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15f00     58 00 90 5D |  if_ne	jmp	#LR__1790
15f04     20 4E 05 F1 | 	add	fp, #32
15f08     A7 1E 02 FB | 	rdlong	local01, fp
15f0c     20 4E 85 F1 | 	sub	fp, #32
15f10     1C 1E 0E F2 | 	cmp	local01, #28 wz
15f14     20 4E 05 51 |  if_ne	add	fp, #32
15f18     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15f1c     20 4E 85 51 |  if_ne	sub	fp, #32
15f20     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15f24     34 00 90 5D |  if_ne	jmp	#LR__1790
15f28     A7 12 02 FB | 	rdlong	arg01, fp
15f2c     0C 4E 05 F1 | 	add	fp, #12
15f30     A7 14 02 FB | 	rdlong	arg02, fp
15f34     0C 4E 05 F1 | 	add	fp, #12
15f38     A7 16 02 FB | 	rdlong	arg03, fp
15f3c     18 4E 85 F1 | 	sub	fp, #24
15f40     37 00 00 FF 
15f44     58 E4 05 F1 | 	add	objptr, ##28248
15f48     F2 18 02 FB | 	rdlong	arg04, objptr
15f4c     37 00 00 FF 
15f50     58 E4 85 F1 | 	sub	objptr, ##28248
15f54     2C 72 B0 FD | 	call	#_hg010b_spin2_fcircle
15f58                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15f58     54 00 90 FD | 	jmp	#LR__1791
15f5c                 | LR__1790
15f5c     A7 12 02 F6 | 	mov	arg01, fp
15f60     D0 D5 BF FD | 	call	#_converttoint
15f64     FD 1E 02 F6 | 	mov	local01, result1
15f68     0C 4E 05 F1 | 	add	fp, #12
15f6c     A7 12 02 F6 | 	mov	arg01, fp
15f70     0C 4E 85 F1 | 	sub	fp, #12
15f74     BC D5 BF FD | 	call	#_converttoint
15f78     FD 20 02 F6 | 	mov	local02, result1
15f7c     18 4E 05 F1 | 	add	fp, #24
15f80     A7 12 02 F6 | 	mov	arg01, fp
15f84     18 4E 85 F1 | 	sub	fp, #24
15f88     A8 D5 BF FD | 	call	#_converttoint
15f8c     FD 16 02 F6 | 	mov	arg03, result1
15f90     37 00 00 FF 
15f94     58 E4 05 F1 | 	add	objptr, ##28248
15f98     F2 18 02 FB | 	rdlong	arg04, objptr
15f9c     37 00 00 FF 
15fa0     58 E4 85 F1 | 	sub	objptr, ##28248
15fa4     0F 13 02 F6 | 	mov	arg01, local01
15fa8     10 15 02 F6 | 	mov	arg02, local02
15fac     D4 71 B0 FD | 	call	#_hg010b_spin2_fcircle
15fb0                 | LR__1791
15fb0     A7 F0 03 F6 | 	mov	ptra, fp
15fb4     B2 00 A0 FD | 	call	#popregs_
15fb8                 | _do_fcircle_ret
15fb8     2D 00 64 FD | 	ret
15fbc                 | 
15fbc                 | ' 
15fbc                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
15fbc                 | ' 
15fbc                 | ' sub do_circle
15fbc                 | _do_circle
15fbc     02 4A 05 F6 | 	mov	COUNT_, #2
15fc0     A8 00 A0 FD | 	call	#pushregs_
15fc4     24 F0 07 F1 | 	add	ptra, #36
15fc8     CC 48 BF FD | 	call	#_pop
15fcc     FD 18 02 F6 | 	mov	arg04, result1
15fd0     FE 16 02 F6 | 	mov	arg03, result2
15fd4     FF 14 02 F6 | 	mov	arg02, result3
15fd8     18 4E 05 F1 | 	add	fp, #24
15fdc     A7 18 62 FC | 	wrlong	arg04, fp
15fe0     04 4E 05 F1 | 	add	fp, #4
15fe4     A7 16 62 FC | 	wrlong	arg03, fp
15fe8     04 4E 05 F1 | 	add	fp, #4
15fec     A7 14 62 FC | 	wrlong	arg02, fp
15ff0     20 4E 85 F1 | 	sub	fp, #32
15ff4     A0 48 BF FD | 	call	#_pop
15ff8     FD 18 02 F6 | 	mov	arg04, result1
15ffc     FE 16 02 F6 | 	mov	arg03, result2
16000     FF 1E 02 F6 | 	mov	local01, result3
16004     0C 4E 05 F1 | 	add	fp, #12
16008     A7 18 62 FC | 	wrlong	arg04, fp
1600c     04 4E 05 F1 | 	add	fp, #4
16010     A7 16 62 FC | 	wrlong	arg03, fp
16014     04 4E 05 F1 | 	add	fp, #4
16018     A7 1E 62 FC | 	wrlong	local01, fp
1601c     14 4E 85 F1 | 	sub	fp, #20
16020     74 48 BF FD | 	call	#_pop
16024     A7 FA 61 FC | 	wrlong	result1, fp
16028     04 4E 05 F1 | 	add	fp, #4
1602c     A7 FC 61 FC | 	wrlong	result2, fp
16030     04 4E 05 F1 | 	add	fp, #4
16034     A7 FE 61 FC | 	wrlong	result3, fp
16038                 | ' 
16038                 | ' t3=pop()
16038                 | ' t2=pop()
16038                 | ' t1=pop()
16038                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
16038     FF 18 02 F6 | 	mov	arg04, result3
1603c     08 4E 85 F1 | 	sub	fp, #8
16040     1C 18 0E F2 | 	cmp	arg04, #28 wz
16044     08 4E 05 51 |  if_ne	add	fp, #8
16048     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1604c     08 4E 85 51 |  if_ne	sub	fp, #8
16050     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16054     7C 00 90 5D |  if_ne	jmp	#LR__1800
16058     14 4E 05 F1 | 	add	fp, #20
1605c     A7 1E 02 FB | 	rdlong	local01, fp
16060     14 4E 85 F1 | 	sub	fp, #20
16064     1C 1E 0E F2 | 	cmp	local01, #28 wz
16068     14 4E 05 51 |  if_ne	add	fp, #20
1606c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16070     14 4E 85 51 |  if_ne	sub	fp, #20
16074     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16078     58 00 90 5D |  if_ne	jmp	#LR__1800
1607c     20 4E 05 F1 | 	add	fp, #32
16080     A7 1E 02 FB | 	rdlong	local01, fp
16084     20 4E 85 F1 | 	sub	fp, #32
16088     1C 1E 0E F2 | 	cmp	local01, #28 wz
1608c     20 4E 05 51 |  if_ne	add	fp, #32
16090     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16094     20 4E 85 51 |  if_ne	sub	fp, #32
16098     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1609c     34 00 90 5D |  if_ne	jmp	#LR__1800
160a0     A7 12 02 FB | 	rdlong	arg01, fp
160a4     0C 4E 05 F1 | 	add	fp, #12
160a8     A7 14 02 FB | 	rdlong	arg02, fp
160ac     0C 4E 05 F1 | 	add	fp, #12
160b0     A7 16 02 FB | 	rdlong	arg03, fp
160b4     18 4E 85 F1 | 	sub	fp, #24
160b8     37 00 00 FF 
160bc     58 E4 05 F1 | 	add	objptr, ##28248
160c0     F2 18 02 FB | 	rdlong	arg04, objptr
160c4     37 00 00 FF 
160c8     58 E4 85 F1 | 	sub	objptr, ##28248
160cc     C0 71 B0 FD | 	call	#_hg010b_spin2_circle
160d0                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
160d0     54 00 90 FD | 	jmp	#LR__1801
160d4                 | LR__1800
160d4     A7 12 02 F6 | 	mov	arg01, fp
160d8     58 D4 BF FD | 	call	#_converttoint
160dc     FD 1E 02 F6 | 	mov	local01, result1
160e0     0C 4E 05 F1 | 	add	fp, #12
160e4     A7 12 02 F6 | 	mov	arg01, fp
160e8     0C 4E 85 F1 | 	sub	fp, #12
160ec     44 D4 BF FD | 	call	#_converttoint
160f0     FD 20 02 F6 | 	mov	local02, result1
160f4     18 4E 05 F1 | 	add	fp, #24
160f8     A7 12 02 F6 | 	mov	arg01, fp
160fc     18 4E 85 F1 | 	sub	fp, #24
16100     30 D4 BF FD | 	call	#_converttoint
16104     FD 16 02 F6 | 	mov	arg03, result1
16108     37 00 00 FF 
1610c     58 E4 05 F1 | 	add	objptr, ##28248
16110     F2 18 02 FB | 	rdlong	arg04, objptr
16114     37 00 00 FF 
16118     58 E4 85 F1 | 	sub	objptr, ##28248
1611c     0F 13 02 F6 | 	mov	arg01, local01
16120     10 15 02 F6 | 	mov	arg02, local02
16124     68 71 B0 FD | 	call	#_hg010b_spin2_circle
16128                 | LR__1801
16128     A7 F0 03 F6 | 	mov	ptra, fp
1612c     B2 00 A0 FD | 	call	#popregs_
16130                 | _do_circle_ret
16130     2D 00 64 FD | 	ret
16134                 | 
16134                 | ' 
16134                 | ' ' -------------------------- Draw a rectangle
16134                 | ' 
16134                 | ' sub do_box
16134                 | _do_box
16134     03 4A 05 F6 | 	mov	COUNT_, #3
16138     A8 00 A0 FD | 	call	#pushregs_
1613c     30 F0 07 F1 | 	add	ptra, #48
16140     54 47 BF FD | 	call	#_pop
16144     FD 1A 02 F6 | 	mov	arg05, result1
16148     FE 18 02 F6 | 	mov	arg04, result2
1614c     FF 16 02 F6 | 	mov	arg03, result3
16150     24 4E 05 F1 | 	add	fp, #36
16154     A7 1A 62 FC | 	wrlong	arg05, fp
16158     04 4E 05 F1 | 	add	fp, #4
1615c     A7 18 62 FC | 	wrlong	arg04, fp
16160     04 4E 05 F1 | 	add	fp, #4
16164     A7 16 62 FC | 	wrlong	arg03, fp
16168     2C 4E 85 F1 | 	sub	fp, #44
1616c     28 47 BF FD | 	call	#_pop
16170     FD 1A 02 F6 | 	mov	arg05, result1
16174     FE 18 02 F6 | 	mov	arg04, result2
16178     FF 16 02 F6 | 	mov	arg03, result3
1617c     18 4E 05 F1 | 	add	fp, #24
16180     A7 1A 62 FC | 	wrlong	arg05, fp
16184     04 4E 05 F1 | 	add	fp, #4
16188     A7 18 62 FC | 	wrlong	arg04, fp
1618c     04 4E 05 F1 | 	add	fp, #4
16190     A7 16 62 FC | 	wrlong	arg03, fp
16194     20 4E 85 F1 | 	sub	fp, #32
16198     FC 46 BF FD | 	call	#_pop
1619c     FD 1A 02 F6 | 	mov	arg05, result1
161a0     FE 18 02 F6 | 	mov	arg04, result2
161a4     FF 1E 02 F6 | 	mov	local01, result3
161a8     0C 4E 05 F1 | 	add	fp, #12
161ac     A7 1A 62 FC | 	wrlong	arg05, fp
161b0     04 4E 05 F1 | 	add	fp, #4
161b4     A7 18 62 FC | 	wrlong	arg04, fp
161b8     04 4E 05 F1 | 	add	fp, #4
161bc     A7 1E 62 FC | 	wrlong	local01, fp
161c0     14 4E 85 F1 | 	sub	fp, #20
161c4     D0 46 BF FD | 	call	#_pop
161c8     A7 FA 61 FC | 	wrlong	result1, fp
161cc     04 4E 05 F1 | 	add	fp, #4
161d0     A7 FC 61 FC | 	wrlong	result2, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 FE 61 FC | 	wrlong	result3, fp
161dc                 | ' 
161dc                 | ' t4=pop()
161dc                 | ' t3=pop()
161dc                 | ' t2=pop()
161dc                 | ' t1=pop()
161dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
161dc     FF 1A 02 F6 | 	mov	arg05, result3
161e0     08 4E 85 F1 | 	sub	fp, #8
161e4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
161e8     08 4E 05 51 |  if_ne	add	fp, #8
161ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
161f0     08 4E 85 51 |  if_ne	sub	fp, #8
161f4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
161f8     A8 00 90 5D |  if_ne	jmp	#LR__1810
161fc     14 4E 05 F1 | 	add	fp, #20
16200     A7 1E 02 FB | 	rdlong	local01, fp
16204     14 4E 85 F1 | 	sub	fp, #20
16208     1C 1E 0E F2 | 	cmp	local01, #28 wz
1620c     14 4E 05 51 |  if_ne	add	fp, #20
16210     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16214     14 4E 85 51 |  if_ne	sub	fp, #20
16218     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1621c     84 00 90 5D |  if_ne	jmp	#LR__1810
16220     20 4E 05 F1 | 	add	fp, #32
16224     A7 1E 02 FB | 	rdlong	local01, fp
16228     20 4E 85 F1 | 	sub	fp, #32
1622c     1C 1E 0E F2 | 	cmp	local01, #28 wz
16230     20 4E 05 51 |  if_ne	add	fp, #32
16234     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16238     20 4E 85 51 |  if_ne	sub	fp, #32
1623c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16240     60 00 90 5D |  if_ne	jmp	#LR__1810
16244     2C 4E 05 F1 | 	add	fp, #44
16248     A7 1E 02 FB | 	rdlong	local01, fp
1624c     2C 4E 85 F1 | 	sub	fp, #44
16250     1C 1E 0E F2 | 	cmp	local01, #28 wz
16254     2C 4E 05 51 |  if_ne	add	fp, #44
16258     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1625c     2C 4E 85 51 |  if_ne	sub	fp, #44
16260     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16264     3C 00 90 5D |  if_ne	jmp	#LR__1810
16268     A7 12 02 FB | 	rdlong	arg01, fp
1626c     0C 4E 05 F1 | 	add	fp, #12
16270     A7 14 02 FB | 	rdlong	arg02, fp
16274     0C 4E 05 F1 | 	add	fp, #12
16278     A7 16 02 FB | 	rdlong	arg03, fp
1627c     0C 4E 05 F1 | 	add	fp, #12
16280     A7 18 02 FB | 	rdlong	arg04, fp
16284     24 4E 85 F1 | 	sub	fp, #36
16288     37 00 00 FF 
1628c     58 E4 05 F1 | 	add	objptr, ##28248
16290     F2 1A 02 FB | 	rdlong	arg05, objptr
16294     37 00 00 FF 
16298     58 E4 85 F1 | 	sub	objptr, ##28248
1629c     BC 71 B0 FD | 	call	#_hg010b_spin2_box
162a0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
162a0     6C 00 90 FD | 	jmp	#LR__1811
162a4                 | LR__1810
162a4     A7 12 02 F6 | 	mov	arg01, fp
162a8     88 D2 BF FD | 	call	#_converttoint
162ac     FD 20 02 F6 | 	mov	local02, result1
162b0     0C 4E 05 F1 | 	add	fp, #12
162b4     A7 12 02 F6 | 	mov	arg01, fp
162b8     0C 4E 85 F1 | 	sub	fp, #12
162bc     74 D2 BF FD | 	call	#_converttoint
162c0     FD 22 02 F6 | 	mov	local03, result1
162c4     18 4E 05 F1 | 	add	fp, #24
162c8     A7 12 02 F6 | 	mov	arg01, fp
162cc     18 4E 85 F1 | 	sub	fp, #24
162d0     60 D2 BF FD | 	call	#_converttoint
162d4     FD 1E 02 F6 | 	mov	local01, result1
162d8     24 4E 05 F1 | 	add	fp, #36
162dc     A7 12 02 F6 | 	mov	arg01, fp
162e0     24 4E 85 F1 | 	sub	fp, #36
162e4     4C D2 BF FD | 	call	#_converttoint
162e8     FD 18 02 F6 | 	mov	arg04, result1
162ec     37 00 00 FF 
162f0     58 E4 05 F1 | 	add	objptr, ##28248
162f4     F2 1A 02 FB | 	rdlong	arg05, objptr
162f8     37 00 00 FF 
162fc     58 E4 85 F1 | 	sub	objptr, ##28248
16300     10 13 02 F6 | 	mov	arg01, local02
16304     11 15 02 F6 | 	mov	arg02, local03
16308     0F 17 02 F6 | 	mov	arg03, local01
1630c     4C 71 B0 FD | 	call	#_hg010b_spin2_box
16310                 | LR__1811
16310     A7 F0 03 F6 | 	mov	ptra, fp
16314     B2 00 A0 FD | 	call	#popregs_
16318                 | _do_box_ret
16318     2D 00 64 FD | 	ret
1631c                 | 
1631c                 | ' 
1631c                 | ' sub do_fill
1631c                 | _do_fill
1631c     03 4A 05 F6 | 	mov	COUNT_, #3
16320     A8 00 A0 FD | 	call	#pushregs_
16324     30 F0 07 F1 | 	add	ptra, #48
16328     6C 45 BF FD | 	call	#_pop
1632c     FD 18 02 F6 | 	mov	arg04, result1
16330     FE 16 02 F6 | 	mov	arg03, result2
16334     FF 14 02 F6 | 	mov	arg02, result3
16338     24 4E 05 F1 | 	add	fp, #36
1633c     A7 18 62 FC | 	wrlong	arg04, fp
16340     04 4E 05 F1 | 	add	fp, #4
16344     A7 16 62 FC | 	wrlong	arg03, fp
16348     04 4E 05 F1 | 	add	fp, #4
1634c     A7 14 62 FC | 	wrlong	arg02, fp
16350     2C 4E 85 F1 | 	sub	fp, #44
16354     40 45 BF FD | 	call	#_pop
16358     FD 18 02 F6 | 	mov	arg04, result1
1635c     FE 16 02 F6 | 	mov	arg03, result2
16360     FF 14 02 F6 | 	mov	arg02, result3
16364     18 4E 05 F1 | 	add	fp, #24
16368     A7 18 62 FC | 	wrlong	arg04, fp
1636c     04 4E 05 F1 | 	add	fp, #4
16370     A7 16 62 FC | 	wrlong	arg03, fp
16374     04 4E 05 F1 | 	add	fp, #4
16378     A7 14 62 FC | 	wrlong	arg02, fp
1637c     20 4E 85 F1 | 	sub	fp, #32
16380     14 45 BF FD | 	call	#_pop
16384     FD 18 02 F6 | 	mov	arg04, result1
16388     FE 16 02 F6 | 	mov	arg03, result2
1638c     FF 1E 02 F6 | 	mov	local01, result3
16390     0C 4E 05 F1 | 	add	fp, #12
16394     A7 18 62 FC | 	wrlong	arg04, fp
16398     04 4E 05 F1 | 	add	fp, #4
1639c     A7 16 62 FC | 	wrlong	arg03, fp
163a0     04 4E 05 F1 | 	add	fp, #4
163a4     A7 1E 62 FC | 	wrlong	local01, fp
163a8     14 4E 85 F1 | 	sub	fp, #20
163ac     E8 44 BF FD | 	call	#_pop
163b0     A7 FA 61 FC | 	wrlong	result1, fp
163b4     04 4E 05 F1 | 	add	fp, #4
163b8     A7 FC 61 FC | 	wrlong	result2, fp
163bc     04 4E 05 F1 | 	add	fp, #4
163c0     A7 FE 61 FC | 	wrlong	result3, fp
163c4                 | ' 
163c4                 | ' t4=pop()
163c4                 | ' t3=pop()
163c4                 | ' t2=pop()
163c4                 | ' t1=pop()
163c4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
163c4     FF 18 02 F6 | 	mov	arg04, result3
163c8     08 4E 85 F1 | 	sub	fp, #8
163cc     1C 18 0E F2 | 	cmp	arg04, #28 wz
163d0     08 4E 05 51 |  if_ne	add	fp, #8
163d4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
163d8     08 4E 85 51 |  if_ne	sub	fp, #8
163dc     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
163e0     94 00 90 5D |  if_ne	jmp	#LR__1820
163e4     14 4E 05 F1 | 	add	fp, #20
163e8     A7 1E 02 FB | 	rdlong	local01, fp
163ec     14 4E 85 F1 | 	sub	fp, #20
163f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
163f4     14 4E 05 51 |  if_ne	add	fp, #20
163f8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
163fc     14 4E 85 51 |  if_ne	sub	fp, #20
16400     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16404     70 00 90 5D |  if_ne	jmp	#LR__1820
16408     20 4E 05 F1 | 	add	fp, #32
1640c     A7 1E 02 FB | 	rdlong	local01, fp
16410     20 4E 85 F1 | 	sub	fp, #32
16414     1C 1E 0E F2 | 	cmp	local01, #28 wz
16418     20 4E 05 51 |  if_ne	add	fp, #32
1641c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16420     20 4E 85 51 |  if_ne	sub	fp, #32
16424     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16428     4C 00 90 5D |  if_ne	jmp	#LR__1820
1642c     2C 4E 05 F1 | 	add	fp, #44
16430     A7 1E 02 FB | 	rdlong	local01, fp
16434     2C 4E 85 F1 | 	sub	fp, #44
16438     1C 1E 0E F2 | 	cmp	local01, #28 wz
1643c     2C 4E 05 51 |  if_ne	add	fp, #44
16440     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16444     2C 4E 85 51 |  if_ne	sub	fp, #44
16448     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1644c     28 00 90 5D |  if_ne	jmp	#LR__1820
16450     A7 12 02 FB | 	rdlong	arg01, fp
16454     0C 4E 05 F1 | 	add	fp, #12
16458     A7 14 02 FB | 	rdlong	arg02, fp
1645c     0C 4E 05 F1 | 	add	fp, #12
16460     A7 16 02 FB | 	rdlong	arg03, fp
16464     0C 4E 05 F1 | 	add	fp, #12
16468     A7 18 02 FB | 	rdlong	arg04, fp
1646c     24 4E 85 F1 | 	sub	fp, #36
16470     7C 6A B0 FD | 	call	#_hg010b_spin2_fill
16474                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
16474     58 00 90 FD | 	jmp	#LR__1821
16478                 | LR__1820
16478     A7 12 02 F6 | 	mov	arg01, fp
1647c     B4 D0 BF FD | 	call	#_converttoint
16480     FD 20 02 F6 | 	mov	local02, result1
16484     0C 4E 05 F1 | 	add	fp, #12
16488     A7 12 02 F6 | 	mov	arg01, fp
1648c     0C 4E 85 F1 | 	sub	fp, #12
16490     A0 D0 BF FD | 	call	#_converttoint
16494     FD 22 02 F6 | 	mov	local03, result1
16498     18 4E 05 F1 | 	add	fp, #24
1649c     A7 12 02 F6 | 	mov	arg01, fp
164a0     18 4E 85 F1 | 	sub	fp, #24
164a4     8C D0 BF FD | 	call	#_converttoint
164a8     FD 1E 02 F6 | 	mov	local01, result1
164ac     24 4E 05 F1 | 	add	fp, #36
164b0     A7 12 02 F6 | 	mov	arg01, fp
164b4     24 4E 85 F1 | 	sub	fp, #36
164b8     78 D0 BF FD | 	call	#_converttoint
164bc     FD 18 02 F6 | 	mov	arg04, result1
164c0     10 13 02 F6 | 	mov	arg01, local02
164c4     11 15 02 F6 | 	mov	arg02, local03
164c8     0F 17 02 F6 | 	mov	arg03, local01
164cc     20 6A B0 FD | 	call	#_hg010b_spin2_fill
164d0                 | LR__1821
164d0     A7 F0 03 F6 | 	mov	ptra, fp
164d4     B2 00 A0 FD | 	call	#popregs_
164d8                 | _do_fill_ret
164d8     2D 00 64 FD | 	ret
164dc                 | 
164dc                 | ' 
164dc                 | ' ' -------------------------- Draw a frane
164dc                 | ' 
164dc                 | ' sub do_frame
164dc                 | _do_frame
164dc     03 4A 05 F6 | 	mov	COUNT_, #3
164e0     A8 00 A0 FD | 	call	#pushregs_
164e4     30 F0 07 F1 | 	add	ptra, #48
164e8     AC 43 BF FD | 	call	#_pop
164ec     FD 1A 02 F6 | 	mov	arg05, result1
164f0     FE 18 02 F6 | 	mov	arg04, result2
164f4     FF 16 02 F6 | 	mov	arg03, result3
164f8     24 4E 05 F1 | 	add	fp, #36
164fc     A7 1A 62 FC | 	wrlong	arg05, fp
16500     04 4E 05 F1 | 	add	fp, #4
16504     A7 18 62 FC | 	wrlong	arg04, fp
16508     04 4E 05 F1 | 	add	fp, #4
1650c     A7 16 62 FC | 	wrlong	arg03, fp
16510     2C 4E 85 F1 | 	sub	fp, #44
16514     80 43 BF FD | 	call	#_pop
16518     FD 1A 02 F6 | 	mov	arg05, result1
1651c     FE 18 02 F6 | 	mov	arg04, result2
16520     FF 16 02 F6 | 	mov	arg03, result3
16524     18 4E 05 F1 | 	add	fp, #24
16528     A7 1A 62 FC | 	wrlong	arg05, fp
1652c     04 4E 05 F1 | 	add	fp, #4
16530     A7 18 62 FC | 	wrlong	arg04, fp
16534     04 4E 05 F1 | 	add	fp, #4
16538     A7 16 62 FC | 	wrlong	arg03, fp
1653c     20 4E 85 F1 | 	sub	fp, #32
16540     54 43 BF FD | 	call	#_pop
16544     FD 1A 02 F6 | 	mov	arg05, result1
16548     FE 18 02 F6 | 	mov	arg04, result2
1654c     FF 1E 02 F6 | 	mov	local01, result3
16550     0C 4E 05 F1 | 	add	fp, #12
16554     A7 1A 62 FC | 	wrlong	arg05, fp
16558     04 4E 05 F1 | 	add	fp, #4
1655c     A7 18 62 FC | 	wrlong	arg04, fp
16560     04 4E 05 F1 | 	add	fp, #4
16564     A7 1E 62 FC | 	wrlong	local01, fp
16568     14 4E 85 F1 | 	sub	fp, #20
1656c     28 43 BF FD | 	call	#_pop
16570     A7 FA 61 FC | 	wrlong	result1, fp
16574     04 4E 05 F1 | 	add	fp, #4
16578     A7 FC 61 FC | 	wrlong	result2, fp
1657c     04 4E 05 F1 | 	add	fp, #4
16580     A7 FE 61 FC | 	wrlong	result3, fp
16584                 | ' 
16584                 | ' t4=pop()
16584                 | ' t3=pop()
16584                 | ' t2=pop()
16584                 | ' t1=pop()
16584                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16584     FF 1A 02 F6 | 	mov	arg05, result3
16588     08 4E 85 F1 | 	sub	fp, #8
1658c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
16590     08 4E 05 51 |  if_ne	add	fp, #8
16594     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16598     08 4E 85 51 |  if_ne	sub	fp, #8
1659c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
165a0     A8 00 90 5D |  if_ne	jmp	#LR__1830
165a4     14 4E 05 F1 | 	add	fp, #20
165a8     A7 1E 02 FB | 	rdlong	local01, fp
165ac     14 4E 85 F1 | 	sub	fp, #20
165b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
165b4     14 4E 05 51 |  if_ne	add	fp, #20
165b8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
165bc     14 4E 85 51 |  if_ne	sub	fp, #20
165c0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
165c4     84 00 90 5D |  if_ne	jmp	#LR__1830
165c8     20 4E 05 F1 | 	add	fp, #32
165cc     A7 1E 02 FB | 	rdlong	local01, fp
165d0     20 4E 85 F1 | 	sub	fp, #32
165d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
165d8     20 4E 05 51 |  if_ne	add	fp, #32
165dc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
165e0     20 4E 85 51 |  if_ne	sub	fp, #32
165e4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
165e8     60 00 90 5D |  if_ne	jmp	#LR__1830
165ec     2C 4E 05 F1 | 	add	fp, #44
165f0     A7 1E 02 FB | 	rdlong	local01, fp
165f4     2C 4E 85 F1 | 	sub	fp, #44
165f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
165fc     2C 4E 05 51 |  if_ne	add	fp, #44
16600     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16604     2C 4E 85 51 |  if_ne	sub	fp, #44
16608     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1660c     3C 00 90 5D |  if_ne	jmp	#LR__1830
16610     A7 12 02 FB | 	rdlong	arg01, fp
16614     0C 4E 05 F1 | 	add	fp, #12
16618     A7 14 02 FB | 	rdlong	arg02, fp
1661c     0C 4E 05 F1 | 	add	fp, #12
16620     A7 16 02 FB | 	rdlong	arg03, fp
16624     0C 4E 05 F1 | 	add	fp, #12
16628     A7 18 02 FB | 	rdlong	arg04, fp
1662c     24 4E 85 F1 | 	sub	fp, #36
16630     37 00 00 FF 
16634     58 E4 05 F1 | 	add	objptr, ##28248
16638     F2 1A 02 FB | 	rdlong	arg05, objptr
1663c     37 00 00 FF 
16640     58 E4 85 F1 | 	sub	objptr, ##28248
16644     94 6D B0 FD | 	call	#_hg010b_spin2_frame
16648                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
16648     6C 00 90 FD | 	jmp	#LR__1831
1664c                 | LR__1830
1664c     A7 12 02 F6 | 	mov	arg01, fp
16650     E0 CE BF FD | 	call	#_converttoint
16654     FD 20 02 F6 | 	mov	local02, result1
16658     0C 4E 05 F1 | 	add	fp, #12
1665c     A7 12 02 F6 | 	mov	arg01, fp
16660     0C 4E 85 F1 | 	sub	fp, #12
16664     CC CE BF FD | 	call	#_converttoint
16668     FD 22 02 F6 | 	mov	local03, result1
1666c     18 4E 05 F1 | 	add	fp, #24
16670     A7 12 02 F6 | 	mov	arg01, fp
16674     18 4E 85 F1 | 	sub	fp, #24
16678     B8 CE BF FD | 	call	#_converttoint
1667c     FD 1E 02 F6 | 	mov	local01, result1
16680     24 4E 05 F1 | 	add	fp, #36
16684     A7 12 02 F6 | 	mov	arg01, fp
16688     24 4E 85 F1 | 	sub	fp, #36
1668c     A4 CE BF FD | 	call	#_converttoint
16690     FD 18 02 F6 | 	mov	arg04, result1
16694     37 00 00 FF 
16698     58 E4 05 F1 | 	add	objptr, ##28248
1669c     F2 1A 02 FB | 	rdlong	arg05, objptr
166a0     37 00 00 FF 
166a4     58 E4 85 F1 | 	sub	objptr, ##28248
166a8     10 13 02 F6 | 	mov	arg01, local02
166ac     11 15 02 F6 | 	mov	arg02, local03
166b0     0F 17 02 F6 | 	mov	arg03, local01
166b4     24 6D B0 FD | 	call	#_hg010b_spin2_frame
166b8                 | LR__1831
166b8     A7 F0 03 F6 | 	mov	ptra, fp
166bc     B2 00 A0 FD | 	call	#popregs_
166c0                 | _do_frame_ret
166c0     2D 00 64 FD | 	ret
166c4                 | 
166c4                 | ' 
166c4                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
166c4                 | ' 
166c4                 | ' ' ------------------------- Print to the screem
166c4                 | ' 
166c4                 | ' sub do_print  
166c4                 | _do_print
166c4     0A 4A 05 F6 | 	mov	COUNT_, #10
166c8     A8 00 A0 FD | 	call	#pushregs_
166cc     00 24 06 F6 | 	mov	local04, #0
166d0     C4 41 BF FD | 	call	#_pop
166d4     FD 26 02 F6 | 	mov	local05, result1
166d8     FE 28 02 F6 | 	mov	local06, result2
166dc     FF 2A 02 F6 | 	mov	local07, result3
166e0     13 1F 02 F6 | 	mov	local01, local05
166e4     14 21 02 F6 | 	mov	local02, local06
166e8     15 23 02 F6 | 	mov	local03, local07
166ec                 | '  
166ec                 | ' r=0
166ec                 | ' t1=pop() 
166ec                 | ' 'print t1.result_type,t1.result.uresult
166ec                 | ' 
166ec                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
166ec     21 22 0E F2 | 	cmp	local03, #33 wz
166f0     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
166f4     20 00 90 5D |  if_ne	jmp	#LR__1840
166f8     11 25 02 F6 | 	mov	local04, local03
166fc     98 41 BF FD | 	call	#_pop
16700     FD 26 02 F6 | 	mov	local05, result1
16704     FE 28 02 F6 | 	mov	local06, result2
16708     FF 2A 02 F6 | 	mov	local07, result3
1670c     13 1F 02 F6 | 	mov	local01, local05
16710     14 21 02 F6 | 	mov	local02, local06
16714     15 23 02 F6 | 	mov	local03, local07
16718                 | LR__1840
16718                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
16718     20 22 0E F2 | 	cmp	local03, #32 wz
1671c     11 25 02 A6 |  if_e	mov	local04, local03
16720                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
16720     FF 22 0E F2 | 	cmp	local03, #255 wz
16724     0C 00 90 5D |  if_ne	jmp	#LR__1841
16728     0F 13 02 F6 | 	mov	arg01, local01
1672c     F4 41 B0 FD | 	call	#_printerror
16730     4C 04 90 FD | 	jmp	#LR__1859
16734                 | LR__1841
16734                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
16734     2B 22 0E F2 | 	cmp	local03, #43 wz
16738     14 00 90 5D |  if_ne	jmp	#LR__1842
1673c     0F 13 02 F6 | 	mov	arg01, local01
16740     CC 85 BF FD | 	call	#_convertstring
16744     FD 26 02 F6 | 	mov	local05, result1
16748     13 1F 02 F6 | 	mov	local01, local05
1674c     1F 22 06 F6 | 	mov	local03, #31
16750                 | LR__1842
16750                 | ' 
16750                 | ' if r=print_mod_comma  then
16750     21 24 0E F2 | 	cmp	local04, #33 wz
16754     AC 01 90 5D |  if_ne	jmp	#LR__1847
16758                 | '   if t1.result_type=result_int then print t1.result.iresult,
16758     1C 22 0E F2 | 	cmp	local03, #28 wz
1675c     64 00 90 5D |  if_ne	jmp	#LR__1843
16760     00 12 06 F6 | 	mov	arg01, #0
16764     FC DF B0 FD | 	call	#__system___getiolock_0485
16768     FD 12 02 F6 | 	mov	arg01, result1
1676c     5C 86 B0 FD | 	call	#__system___lockmem
16770     00 28 06 F6 | 	mov	local06, #0
16774     00 12 06 F6 | 	mov	arg01, #0
16778     0F 15 02 F6 | 	mov	arg02, local01
1677c     00 16 06 F6 | 	mov	arg03, #0
16780     0A 18 06 F6 | 	mov	arg04, #10
16784     7C 93 B0 FD | 	call	#__system___basic_print_integer
16788     FD 2A 02 F6 | 	mov	local07, result1
1678c     14 27 02 F6 | 	mov	local05, local06
16790     15 27 02 F1 | 	add	local05, local07
16794     00 2C 06 F6 | 	mov	local08, #0
16798     00 12 06 F6 | 	mov	arg01, #0
1679c     09 14 06 F6 | 	mov	arg02, #9
167a0     00 16 06 F6 | 	mov	arg03, #0
167a4     C0 92 B0 FD | 	call	#__system___basic_print_char
167a8     FD 2E 02 F6 | 	mov	local09, result1
167ac     FD 26 02 F1 | 	add	local05, result1
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     AC DF B0 FD | 	call	#__system___getiolock_0485
167b8     FD 00 68 FC | 	wrlong	#0, result1
167bc     00 FA 05 F6 | 	mov	result1, #0
167c0     00 30 06 F6 | 	mov	local10, #0
167c4                 | LR__1843
167c4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
167c4     1D 22 0E F2 | 	cmp	local03, #29 wz
167c8     64 00 90 5D |  if_ne	jmp	#LR__1844
167cc     00 12 06 F6 | 	mov	arg01, #0
167d0     90 DF B0 FD | 	call	#__system___getiolock_0485
167d4     FD 12 02 F6 | 	mov	arg01, result1
167d8     F0 85 B0 FD | 	call	#__system___lockmem
167dc     00 28 06 F6 | 	mov	local06, #0
167e0     00 12 06 F6 | 	mov	arg01, #0
167e4     0F 15 02 F6 | 	mov	arg02, local01
167e8     00 16 06 F6 | 	mov	arg03, #0
167ec     0A 18 06 F6 | 	mov	arg04, #10
167f0     50 93 B0 FD | 	call	#__system___basic_print_unsigned
167f4     FD 2A 02 F6 | 	mov	local07, result1
167f8     14 27 02 F6 | 	mov	local05, local06
167fc     15 27 02 F1 | 	add	local05, local07
16800     00 2C 06 F6 | 	mov	local08, #0
16804     00 12 06 F6 | 	mov	arg01, #0
16808     09 14 06 F6 | 	mov	arg02, #9
1680c     00 16 06 F6 | 	mov	arg03, #0
16810     54 92 B0 FD | 	call	#__system___basic_print_char
16814     FD 2E 02 F6 | 	mov	local09, result1
16818     FD 26 02 F1 | 	add	local05, result1
1681c     00 12 06 F6 | 	mov	arg01, #0
16820     40 DF B0 FD | 	call	#__system___getiolock_0485
16824     FD 00 68 FC | 	wrlong	#0, result1
16828     00 FA 05 F6 | 	mov	result1, #0
1682c     00 30 06 F6 | 	mov	local10, #0
16830                 | LR__1844
16830                 | '   if t1.result_type=result_float then print t1.result.fresult,
16830     1E 22 0E F2 | 	cmp	local03, #30 wz
16834     64 00 90 5D |  if_ne	jmp	#LR__1845
16838     00 12 06 F6 | 	mov	arg01, #0
1683c     24 DF B0 FD | 	call	#__system___getiolock_0485
16840     FD 12 02 F6 | 	mov	arg01, result1
16844     84 85 B0 FD | 	call	#__system___lockmem
16848     00 28 06 F6 | 	mov	local06, #0
1684c     00 12 06 F6 | 	mov	arg01, #0
16850     0F 15 02 F6 | 	mov	arg02, local01
16854     00 16 06 F6 | 	mov	arg03, #0
16858     23 18 06 F6 | 	mov	arg04, #35
1685c     CC B6 B0 FD | 	call	#__system___basic_print_float
16860     FD 2A 02 F6 | 	mov	local07, result1
16864     14 27 02 F6 | 	mov	local05, local06
16868     15 27 02 F1 | 	add	local05, local07
1686c     00 2C 06 F6 | 	mov	local08, #0
16870     00 12 06 F6 | 	mov	arg01, #0
16874     09 14 06 F6 | 	mov	arg02, #9
16878     00 16 06 F6 | 	mov	arg03, #0
1687c     E8 91 B0 FD | 	call	#__system___basic_print_char
16880     FD 2E 02 F6 | 	mov	local09, result1
16884     FD 26 02 F1 | 	add	local05, result1
16888     00 12 06 F6 | 	mov	arg01, #0
1688c     D4 DE B0 FD | 	call	#__system___getiolock_0485
16890     FD 00 68 FC | 	wrlong	#0, result1
16894     00 FA 05 F6 | 	mov	result1, #0
16898     00 30 06 F6 | 	mov	local10, #0
1689c                 | LR__1845
1689c                 | '   if t1.result_type=result_string then print t1.result.sresult,
1689c     1F 22 0E F2 | 	cmp	local03, #31 wz
168a0     60 00 90 5D |  if_ne	jmp	#LR__1846
168a4     00 12 06 F6 | 	mov	arg01, #0
168a8     B8 DE B0 FD | 	call	#__system___getiolock_0485
168ac     FD 12 02 F6 | 	mov	arg01, result1
168b0     18 85 B0 FD | 	call	#__system___lockmem
168b4     00 28 06 F6 | 	mov	local06, #0
168b8     00 12 06 F6 | 	mov	arg01, #0
168bc     0F 15 02 F6 | 	mov	arg02, local01
168c0     00 16 06 F6 | 	mov	arg03, #0
168c4     F8 91 B0 FD | 	call	#__system___basic_print_string
168c8     FD 2A 02 F6 | 	mov	local07, result1
168cc     14 27 02 F6 | 	mov	local05, local06
168d0     15 27 02 F1 | 	add	local05, local07
168d4     00 2C 06 F6 | 	mov	local08, #0
168d8     00 12 06 F6 | 	mov	arg01, #0
168dc     09 14 06 F6 | 	mov	arg02, #9
168e0     00 16 06 F6 | 	mov	arg03, #0
168e4     80 91 B0 FD | 	call	#__system___basic_print_char
168e8     FD 2E 02 F6 | 	mov	local09, result1
168ec     FD 26 02 F1 | 	add	local05, result1
168f0     00 12 06 F6 | 	mov	arg01, #0
168f4     6C DE B0 FD | 	call	#__system___getiolock_0485
168f8     FD 00 68 FC | 	wrlong	#0, result1
168fc     00 FA 05 F6 | 	mov	result1, #0
16900     00 30 06 F6 | 	mov	local10, #0
16904                 | LR__1846
16904                 | LR__1847
16904                 | ' if r=print_mod_semicolon then 
16904     22 24 0E F2 | 	cmp	local04, #34 wz
16908     1C 01 90 5D |  if_ne	jmp	#LR__1852
1690c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1690c     1C 22 0E F2 | 	cmp	local03, #28 wz
16910     50 00 90 5D |  if_ne	jmp	#LR__1848
16914     00 12 06 F6 | 	mov	arg01, #0
16918     48 DE B0 FD | 	call	#__system___getiolock_0485
1691c     FD 12 02 F6 | 	mov	arg01, result1
16920     A8 84 B0 FD | 	call	#__system___lockmem
16924     00 28 06 F6 | 	mov	local06, #0
16928     00 30 06 F6 | 	mov	local10, #0
1692c     0A 2C 06 F6 | 	mov	local08, #10
16930     00 12 06 F6 | 	mov	arg01, #0
16934     0F 15 02 F6 | 	mov	arg02, local01
16938     00 16 06 F6 | 	mov	arg03, #0
1693c     0A 18 06 F6 | 	mov	arg04, #10
16940     C0 91 B0 FD | 	call	#__system___basic_print_integer
16944     FD 2A 02 F6 | 	mov	local07, result1
16948     14 27 02 F6 | 	mov	local05, local06
1694c     15 27 02 F1 | 	add	local05, local07
16950     00 12 06 F6 | 	mov	arg01, #0
16954     0C DE B0 FD | 	call	#__system___getiolock_0485
16958     FD 00 68 FC | 	wrlong	#0, result1
1695c     00 FA 05 F6 | 	mov	result1, #0
16960     00 2E 06 F6 | 	mov	local09, #0
16964                 | LR__1848
16964                 | '   if t1.result_type=result_uint then print t1.result.uresult;
16964     1D 22 0E F2 | 	cmp	local03, #29 wz
16968     50 00 90 5D |  if_ne	jmp	#LR__1849
1696c     00 12 06 F6 | 	mov	arg01, #0
16970     F0 DD B0 FD | 	call	#__system___getiolock_0485
16974     FD 12 02 F6 | 	mov	arg01, result1
16978     50 84 B0 FD | 	call	#__system___lockmem
1697c     00 28 06 F6 | 	mov	local06, #0
16980     00 30 06 F6 | 	mov	local10, #0
16984     0A 2C 06 F6 | 	mov	local08, #10
16988     00 12 06 F6 | 	mov	arg01, #0
1698c     0F 15 02 F6 | 	mov	arg02, local01
16990     00 16 06 F6 | 	mov	arg03, #0
16994     0A 18 06 F6 | 	mov	arg04, #10
16998     A8 91 B0 FD | 	call	#__system___basic_print_unsigned
1699c     FD 2A 02 F6 | 	mov	local07, result1
169a0     14 27 02 F6 | 	mov	local05, local06
169a4     15 27 02 F1 | 	add	local05, local07
169a8     00 12 06 F6 | 	mov	arg01, #0
169ac     B4 DD B0 FD | 	call	#__system___getiolock_0485
169b0     FD 00 68 FC | 	wrlong	#0, result1
169b4     00 FA 05 F6 | 	mov	result1, #0
169b8     00 2E 06 F6 | 	mov	local09, #0
169bc                 | LR__1849
169bc                 | '   if t1.result_type=result_float then print t1.result.fresult;
169bc     1E 22 0E F2 | 	cmp	local03, #30 wz
169c0     30 00 90 5D |  if_ne	jmp	#LR__1850
169c4     00 12 06 F6 | 	mov	arg01, #0
169c8     98 DD B0 FD | 	call	#__system___getiolock_0485
169cc     FD 12 02 F6 | 	mov	arg01, result1
169d0     F8 83 B0 FD | 	call	#__system___lockmem
169d4     00 12 06 F6 | 	mov	arg01, #0
169d8     0F 15 02 F6 | 	mov	arg02, local01
169dc     00 16 06 F6 | 	mov	arg03, #0
169e0     23 18 06 F6 | 	mov	arg04, #35
169e4     44 B5 B0 FD | 	call	#__system___basic_print_float
169e8     00 12 06 F6 | 	mov	arg01, #0
169ec     74 DD B0 FD | 	call	#__system___getiolock_0485
169f0     FD 00 68 FC | 	wrlong	#0, result1
169f4                 | LR__1850
169f4                 | '   if t1.result_type=result_string then print t1.result.sresult;
169f4     1F 22 0E F2 | 	cmp	local03, #31 wz
169f8     2C 00 90 5D |  if_ne	jmp	#LR__1851
169fc     00 12 06 F6 | 	mov	arg01, #0
16a00     60 DD B0 FD | 	call	#__system___getiolock_0485
16a04     FD 12 02 F6 | 	mov	arg01, result1
16a08     C0 83 B0 FD | 	call	#__system___lockmem
16a0c     00 12 06 F6 | 	mov	arg01, #0
16a10     0F 15 02 F6 | 	mov	arg02, local01
16a14     00 16 06 F6 | 	mov	arg03, #0
16a18     A4 90 B0 FD | 	call	#__system___basic_print_string
16a1c     00 12 06 F6 | 	mov	arg01, #0
16a20     40 DD B0 FD | 	call	#__system___getiolock_0485
16a24     FD 00 68 FC | 	wrlong	#0, result1
16a28                 | LR__1851
16a28                 | LR__1852
16a28                 | ' if r=0 then 
16a28     00 24 0E F2 | 	cmp	local04, #0 wz
16a2c     1C 01 90 5D |  if_ne	jmp	#LR__1857
16a30                 | '   if t1.result_type=result_int then print t1.result.iresult
16a30     1C 22 0E F2 | 	cmp	local03, #28 wz
16a34     40 00 90 5D |  if_ne	jmp	#LR__1853
16a38     00 12 06 F6 | 	mov	arg01, #0
16a3c     24 DD B0 FD | 	call	#__system___getiolock_0485
16a40     FD 12 02 F6 | 	mov	arg01, result1
16a44     84 83 B0 FD | 	call	#__system___lockmem
16a48     00 12 06 F6 | 	mov	arg01, #0
16a4c     0F 15 02 F6 | 	mov	arg02, local01
16a50     00 16 06 F6 | 	mov	arg03, #0
16a54     0A 18 06 F6 | 	mov	arg04, #10
16a58     A8 90 B0 FD | 	call	#__system___basic_print_integer
16a5c     00 12 06 F6 | 	mov	arg01, #0
16a60     0A 14 06 F6 | 	mov	arg02, #10
16a64     00 16 06 F6 | 	mov	arg03, #0
16a68     FC 8F B0 FD | 	call	#__system___basic_print_char
16a6c     00 12 06 F6 | 	mov	arg01, #0
16a70     F0 DC B0 FD | 	call	#__system___getiolock_0485
16a74     FD 00 68 FC | 	wrlong	#0, result1
16a78                 | LR__1853
16a78                 | '   if t1.result_type=result_uint then print t1.result.uresult
16a78     1D 22 0E F2 | 	cmp	local03, #29 wz
16a7c     40 00 90 5D |  if_ne	jmp	#LR__1854
16a80     00 12 06 F6 | 	mov	arg01, #0
16a84     DC DC B0 FD | 	call	#__system___getiolock_0485
16a88     FD 12 02 F6 | 	mov	arg01, result1
16a8c     3C 83 B0 FD | 	call	#__system___lockmem
16a90     00 12 06 F6 | 	mov	arg01, #0
16a94     0F 15 02 F6 | 	mov	arg02, local01
16a98     00 16 06 F6 | 	mov	arg03, #0
16a9c     0A 18 06 F6 | 	mov	arg04, #10
16aa0     A0 90 B0 FD | 	call	#__system___basic_print_unsigned
16aa4     00 12 06 F6 | 	mov	arg01, #0
16aa8     0A 14 06 F6 | 	mov	arg02, #10
16aac     00 16 06 F6 | 	mov	arg03, #0
16ab0     B4 8F B0 FD | 	call	#__system___basic_print_char
16ab4     00 12 06 F6 | 	mov	arg01, #0
16ab8     A8 DC B0 FD | 	call	#__system___getiolock_0485
16abc     FD 00 68 FC | 	wrlong	#0, result1
16ac0                 | LR__1854
16ac0                 | '   if t1.result_type=result_float then print t1.result.fresult
16ac0     1E 22 0E F2 | 	cmp	local03, #30 wz
16ac4     40 00 90 5D |  if_ne	jmp	#LR__1855
16ac8     00 12 06 F6 | 	mov	arg01, #0
16acc     94 DC B0 FD | 	call	#__system___getiolock_0485
16ad0     FD 12 02 F6 | 	mov	arg01, result1
16ad4     F4 82 B0 FD | 	call	#__system___lockmem
16ad8     00 12 06 F6 | 	mov	arg01, #0
16adc     0F 15 02 F6 | 	mov	arg02, local01
16ae0     00 16 06 F6 | 	mov	arg03, #0
16ae4     23 18 06 F6 | 	mov	arg04, #35
16ae8     40 B4 B0 FD | 	call	#__system___basic_print_float
16aec     00 12 06 F6 | 	mov	arg01, #0
16af0     0A 14 06 F6 | 	mov	arg02, #10
16af4     00 16 06 F6 | 	mov	arg03, #0
16af8     6C 8F B0 FD | 	call	#__system___basic_print_char
16afc     00 12 06 F6 | 	mov	arg01, #0
16b00     60 DC B0 FD | 	call	#__system___getiolock_0485
16b04     FD 00 68 FC | 	wrlong	#0, result1
16b08                 | LR__1855
16b08                 | '   if t1.result_type=result_string then print t1.result.sresult
16b08     1F 22 0E F2 | 	cmp	local03, #31 wz
16b0c     3C 00 90 5D |  if_ne	jmp	#LR__1856
16b10     00 12 06 F6 | 	mov	arg01, #0
16b14     4C DC B0 FD | 	call	#__system___getiolock_0485
16b18     FD 12 02 F6 | 	mov	arg01, result1
16b1c     AC 82 B0 FD | 	call	#__system___lockmem
16b20     00 12 06 F6 | 	mov	arg01, #0
16b24     0F 15 02 F6 | 	mov	arg02, local01
16b28     00 16 06 F6 | 	mov	arg03, #0
16b2c     90 8F B0 FD | 	call	#__system___basic_print_string
16b30     00 12 06 F6 | 	mov	arg01, #0
16b34     0A 14 06 F6 | 	mov	arg02, #10
16b38     00 16 06 F6 | 	mov	arg03, #0
16b3c     28 8F B0 FD | 	call	#__system___basic_print_char
16b40     00 12 06 F6 | 	mov	arg01, #0
16b44     1C DC B0 FD | 	call	#__system___getiolock_0485
16b48     FD 00 68 FC | 	wrlong	#0, result1
16b4c                 | LR__1856
16b4c                 | LR__1857
16b4c                 | ' if r=print_mod_empty then print
16b4c     20 24 0E F2 | 	cmp	local04, #32 wz
16b50     2C 00 90 5D |  if_ne	jmp	#LR__1858
16b54     00 12 06 F6 | 	mov	arg01, #0
16b58     08 DC B0 FD | 	call	#__system___getiolock_0485
16b5c     FD 12 02 F6 | 	mov	arg01, result1
16b60     68 82 B0 FD | 	call	#__system___lockmem
16b64     00 12 06 F6 | 	mov	arg01, #0
16b68     0A 14 06 F6 | 	mov	arg02, #10
16b6c     00 16 06 F6 | 	mov	arg03, #0
16b70     F4 8E B0 FD | 	call	#__system___basic_print_char
16b74     00 12 06 F6 | 	mov	arg01, #0
16b78     E8 DB B0 FD | 	call	#__system___getiolock_0485
16b7c     FD 00 68 FC | 	wrlong	#0, result1
16b80                 | LR__1858
16b80                 | LR__1859
16b80     A7 F0 03 F6 | 	mov	ptra, fp
16b84     B2 00 A0 FD | 	call	#popregs_
16b88                 | _do_print_ret
16b88     2D 00 64 FD | 	ret
16b8c                 | 
16b8c                 | ' 
16b8c                 | ' 
16b8c                 | ' sub do_paper
16b8c                 | _do_paper
16b8c     03 4A 05 F6 | 	mov	COUNT_, #3
16b90     A8 00 A0 FD | 	call	#pushregs_
16b94     00 3D BF FD | 	call	#_pop
16b98     FD 1E 02 F6 | 	mov	local01, result1
16b9c     FE 20 02 F6 | 	mov	local02, result2
16ba0     FF 22 02 F6 | 	mov	local03, result3
16ba4                 | ' t1=pop() 
16ba4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16ba4     1E 22 0E F2 | 	cmp	local03, #30 wz
16ba8     10 00 90 5D |  if_ne	jmp	#LR__1860
16bac     0F 13 02 F6 | 	mov	arg01, local01
16bb0     00 14 06 F6 | 	mov	arg02, #0
16bb4     24 B2 B0 FD | 	call	#__system___float_tointeger
16bb8     FD 1E 02 F6 | 	mov	local01, result1
16bbc                 | LR__1860
16bbc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16bbc     1F 22 0E F2 | 	cmp	local03, #31 wz
16bc0     18 00 90 5D |  if_ne	jmp	#LR__1861
16bc4     0F 13 02 F6 | 	mov	arg01, local01
16bc8     30 B5 B0 FD | 	call	#__system____builtin_atof
16bcc     FD 12 02 F6 | 	mov	arg01, result1
16bd0     00 14 06 F6 | 	mov	arg02, #0
16bd4     04 B2 B0 FD | 	call	#__system___float_tointeger
16bd8     FD 1E 02 F6 | 	mov	local01, result1
16bdc                 | LR__1861
16bdc     37 00 00 FF 
16be0     68 E4 05 F1 | 	add	objptr, ##28264
16be4     F2 1E 62 FC | 	wrlong	local01, objptr
16be8     04 E4 05 F1 | 	add	objptr, #4
16bec     F2 12 02 FB | 	rdlong	arg01, objptr
16bf0                 | ' 
16bf0                 | ' write_color:=ff
16bf0     37 00 00 FF 
16bf4     2B E4 85 F1 | 	sub	objptr, ##28203
16bf8     F2 12 62 FC | 	wrlong	arg01, objptr
16bfc                 | ' write_background:=bb
16bfc     04 E4 05 F1 | 	add	objptr, #4
16c00     F2 1E 62 FC | 	wrlong	local01, objptr
16c04     45 E4 85 F1 | 	sub	objptr, #69
16c08     A7 F0 03 F6 | 	mov	ptra, fp
16c0c     B2 00 A0 FD | 	call	#popregs_
16c10                 | _do_paper_ret
16c10     2D 00 64 FD | 	ret
16c14                 | 
16c14                 | ' 
16c14                 | ' sub do_ink
16c14                 | _do_ink
16c14     03 4A 05 F6 | 	mov	COUNT_, #3
16c18     A8 00 A0 FD | 	call	#pushregs_
16c1c     78 3C BF FD | 	call	#_pop
16c20     FD 1E 02 F6 | 	mov	local01, result1
16c24     FE 20 02 F6 | 	mov	local02, result2
16c28     FF 22 02 F6 | 	mov	local03, result3
16c2c                 | ' t1=pop() 
16c2c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16c2c     1E 22 0E F2 | 	cmp	local03, #30 wz
16c30     10 00 90 5D |  if_ne	jmp	#LR__1870
16c34     0F 13 02 F6 | 	mov	arg01, local01
16c38     00 14 06 F6 | 	mov	arg02, #0
16c3c     9C B1 B0 FD | 	call	#__system___float_tointeger
16c40     FD 1E 02 F6 | 	mov	local01, result1
16c44                 | LR__1870
16c44                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16c44     1F 22 0E F2 | 	cmp	local03, #31 wz
16c48     18 00 90 5D |  if_ne	jmp	#LR__1871
16c4c     0F 13 02 F6 | 	mov	arg01, local01
16c50     A8 B4 B0 FD | 	call	#__system____builtin_atof
16c54     FD 12 02 F6 | 	mov	arg01, result1
16c58     00 14 06 F6 | 	mov	arg02, #0
16c5c     7C B1 B0 FD | 	call	#__system___float_tointeger
16c60     FD 1E 02 F6 | 	mov	local01, result1
16c64                 | LR__1871
16c64     37 00 00 FF 
16c68     6C E4 05 F1 | 	add	objptr, ##28268
16c6c     F2 1E 62 FC | 	wrlong	local01, objptr
16c70     04 E4 85 F1 | 	sub	objptr, #4
16c74     F2 14 02 FB | 	rdlong	arg02, objptr
16c78                 | ' 
16c78                 | ' write_color:=ff
16c78     37 00 00 FF 
16c7c     27 E4 85 F1 | 	sub	objptr, ##28199
16c80     F2 1E 62 FC | 	wrlong	local01, objptr
16c84                 | ' write_background:=bb
16c84     04 E4 05 F1 | 	add	objptr, #4
16c88     F2 14 62 FC | 	wrlong	arg02, objptr
16c8c     37 00 00 FF 
16c90     27 E4 05 F1 | 	add	objptr, ##28199
16c94     F2 12 02 FB | 	rdlong	arg01, objptr
16c98     37 00 00 FF 
16c9c     6C E4 85 F1 | 	sub	objptr, ##28268
16ca0     EC 58 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
16ca4     A7 F0 03 F6 | 	mov	ptra, fp
16ca8     B2 00 A0 FD | 	call	#popregs_
16cac                 | _do_ink_ret
16cac     2D 00 64 FD | 	ret
16cb0                 | 
16cb0                 | ' 
16cb0                 | ' 
16cb0                 | ' sub do_font
16cb0                 | _do_font
16cb0     03 4A 05 F6 | 	mov	COUNT_, #3
16cb4     A8 00 A0 FD | 	call	#pushregs_
16cb8     DC 3B BF FD | 	call	#_pop
16cbc     FD 1E 02 F6 | 	mov	local01, result1
16cc0     FE 20 02 F6 | 	mov	local02, result2
16cc4     FF 22 02 F6 | 	mov	local03, result3
16cc8                 | ' t1=pop() 
16cc8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16cc8     1E 22 0E F2 | 	cmp	local03, #30 wz
16ccc     10 00 90 5D |  if_ne	jmp	#LR__1880
16cd0     0F 13 02 F6 | 	mov	arg01, local01
16cd4     00 14 06 F6 | 	mov	arg02, #0
16cd8     00 B1 B0 FD | 	call	#__system___float_tointeger
16cdc     FD 1E 02 F6 | 	mov	local01, result1
16ce0                 | LR__1880
16ce0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16ce0     1F 22 0E F2 | 	cmp	local03, #31 wz
16ce4     18 00 90 5D |  if_ne	jmp	#LR__1881
16ce8     0F 13 02 F6 | 	mov	arg01, local01
16cec     0C B4 B0 FD | 	call	#__system____builtin_atof
16cf0     FD 12 02 F6 | 	mov	arg01, result1
16cf4     00 14 06 F6 | 	mov	arg02, #0
16cf8     E0 B0 B0 FD | 	call	#__system___float_tointeger
16cfc     FD 1E 02 F6 | 	mov	local01, result1
16d00                 | LR__1881
16d00     37 00 00 FF 
16d04     70 E4 05 F1 | 	add	objptr, ##28272
16d08     F2 1E 62 FC | 	wrlong	local01, objptr
16d0c     37 00 00 FF 
16d10     70 E4 85 F1 | 	sub	objptr, ##28272
16d14     02 1E 66 F0 | 	shl	local01, #2
16d18     0F 13 02 F6 | 	mov	arg01, local01
16d1c     B4 68 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16d20     A7 F0 03 F6 | 	mov	ptra, fp
16d24     B2 00 A0 FD | 	call	#popregs_
16d28                 | _do_font_ret
16d28     2D 00 64 FD | 	ret
16d2c                 | 
16d2c                 | ' 
16d2c                 | ' sub do_mode
16d2c                 | _do_mode
16d2c     05 4A 05 F6 | 	mov	COUNT_, #5
16d30     A8 00 A0 FD | 	call	#pushregs_
16d34     60 3B BF FD | 	call	#_pop
16d38     FD 1E 02 F6 | 	mov	local01, result1
16d3c     FE 20 02 F6 | 	mov	local02, result2
16d40     FF 22 02 F6 | 	mov	local03, result3
16d44                 | ' t1=pop() 
16d44                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16d44     1E 22 0E F2 | 	cmp	local03, #30 wz
16d48     10 00 90 5D |  if_ne	jmp	#LR__1890
16d4c     0F 13 02 F6 | 	mov	arg01, local01
16d50     00 14 06 F6 | 	mov	arg02, #0
16d54     84 B0 B0 FD | 	call	#__system___float_tointeger
16d58     FD 1E 02 F6 | 	mov	local01, result1
16d5c                 | LR__1890
16d5c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16d5c     1F 22 0E F2 | 	cmp	local03, #31 wz
16d60     18 00 90 5D |  if_ne	jmp	#LR__1891
16d64     0F 13 02 F6 | 	mov	arg01, local01
16d68     90 B3 B0 FD | 	call	#__system____builtin_atof
16d6c     FD 12 02 F6 | 	mov	arg01, result1
16d70     00 14 06 F6 | 	mov	arg02, #0
16d74     64 B0 B0 FD | 	call	#__system___float_tointeger
16d78     FD 1E 02 F6 | 	mov	local01, result1
16d7c                 | LR__1891
16d7c                 | ' select case t1.result.iresult
16d7c     0F 25 02 F6 | 	mov	local04, local01
16d80     05 24 26 F3 | 	fle	local04, #5
16d84     30 24 62 FD | 	jmprel	local04
16d88                 | LR__1892
16d88     14 00 90 FD | 	jmp	#LR__1893
16d8c     A8 00 90 FD | 	jmp	#LR__1894
16d90     10 01 90 FD | 	jmp	#LR__1895
16d94     78 01 90 FD | 	jmp	#LR__1896
16d98     E0 01 90 FD | 	jmp	#LR__1897
16d9c     70 02 90 FD | 	jmp	#LR__1898
16da0                 | LR__1893
16da0     37 00 00 FF 
16da4     70 E4 05 F1 | 	add	objptr, ##28272
16da8     F2 02 68 FC | 	wrlong	#1, objptr
16dac     04 E4 85 F1 | 	sub	objptr, #4
16db0     F2 34 69 FC | 	wrlong	#154, objptr
16db4     21 00 00 FF 
16db8     B4 E4 05 F1 | 	add	objptr, ##17076
16dbc     F2 02 68 FC | 	wrlong	#1, objptr
16dc0     21 00 00 FF 
16dc4     B8 E4 85 F1 | 	sub	objptr, ##17080
16dc8     F2 26 69 FC | 	wrlong	#147, objptr
16dcc     37 00 00 FF 
16dd0     68 E4 85 F1 | 	sub	objptr, ##28264
16dd4     04 12 06 F6 | 	mov	arg01, #4
16dd8     F8 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16ddc     37 00 00 FF 
16de0     6C E4 05 F1 | 	add	objptr, ##28268
16de4     F2 12 02 FB | 	rdlong	arg01, objptr
16de8     04 E4 85 F1 | 	sub	objptr, #4
16dec     F2 14 02 FB | 	rdlong	arg02, objptr
16df0                 | ' 
16df0                 | ' write_color:=ff
16df0     37 00 00 FF 
16df4     27 E4 85 F1 | 	sub	objptr, ##28199
16df8     F2 12 62 FC | 	wrlong	arg01, objptr
16dfc                 | ' write_background:=bb
16dfc     04 E4 05 F1 | 	add	objptr, #4
16e00     F2 14 62 FC | 	wrlong	arg02, objptr
16e04     01 00 00 FF 
16e08     00 EA 05 F1 | 	add	ptr__dat__, ##512
16e0c     59 00 00 FF 
16e10     7F E5 05 F1 | 	add	objptr, ##45951
16e14     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16e18     04 E4 85 F1 | 	sub	objptr, #4
16e1c     03 00 80 FF 
16e20     F2 30 69 FC | 	wrlong	##1688, objptr
16e24     59 00 00 FF 
16e28     C0 E5 85 F1 | 	sub	objptr, ##46016
16e2c     01 00 00 FF 
16e30     00 EA 85 F1 | 	sub	ptr__dat__, ##512
16e34     D8 01 90 FD | 	jmp	#LR__1898
16e38                 | LR__1894
16e38     37 00 00 FF 
16e3c     70 E4 05 F1 | 	add	objptr, ##28272
16e40     F2 00 68 FC | 	wrlong	#0, objptr
16e44     04 E4 85 F1 | 	sub	objptr, #4
16e48     F2 2E 68 FC | 	wrlong	#23, objptr
16e4c     21 00 00 FF 
16e50     B4 E4 05 F1 | 	add	objptr, ##17076
16e54     F2 00 68 FC | 	wrlong	#0, objptr
16e58     21 00 00 FF 
16e5c     B8 E4 85 F1 | 	sub	objptr, ##17080
16e60     F2 00 68 FC | 	wrlong	#0, objptr
16e64     37 00 00 FF 
16e68     68 E4 85 F1 | 	sub	objptr, ##28264
16e6c     00 12 06 F6 | 	mov	arg01, #0
16e70     60 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16e74     37 00 00 FF 
16e78     6C E4 05 F1 | 	add	objptr, ##28268
16e7c     F2 12 02 FB | 	rdlong	arg01, objptr
16e80     04 E4 85 F1 | 	sub	objptr, #4
16e84     F2 14 02 FB | 	rdlong	arg02, objptr
16e88                 | ' 
16e88                 | ' write_color:=ff
16e88     37 00 00 FF 
16e8c     27 E4 85 F1 | 	sub	objptr, ##28199
16e90     F2 12 62 FC | 	wrlong	arg01, objptr
16e94                 | ' write_background:=bb
16e94     04 E4 05 F1 | 	add	objptr, #4
16e98     F2 14 62 FC | 	wrlong	arg02, objptr
16e9c     45 E4 85 F1 | 	sub	objptr, #69
16ea0     6C 01 90 FD | 	jmp	#LR__1898
16ea4                 | LR__1895
16ea4     37 00 00 FF 
16ea8     70 E4 05 F1 | 	add	objptr, ##28272
16eac     F2 00 68 FC | 	wrlong	#0, objptr
16eb0     04 E4 85 F1 | 	sub	objptr, #4
16eb4     F2 6A 69 FC | 	wrlong	#181, objptr
16eb8     21 00 00 FF 
16ebc     B4 E4 05 F1 | 	add	objptr, ##17076
16ec0     F2 00 68 FC | 	wrlong	#0, objptr
16ec4     21 00 00 FF 
16ec8     B8 E4 85 F1 | 	sub	objptr, ##17080
16ecc     F2 00 68 FC | 	wrlong	#0, objptr
16ed0     37 00 00 FF 
16ed4     68 E4 85 F1 | 	sub	objptr, ##28264
16ed8     00 12 06 F6 | 	mov	arg01, #0
16edc     F4 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16ee0     37 00 00 FF 
16ee4     6C E4 05 F1 | 	add	objptr, ##28268
16ee8     F2 12 02 FB | 	rdlong	arg01, objptr
16eec     04 E4 85 F1 | 	sub	objptr, #4
16ef0     F2 14 02 FB | 	rdlong	arg02, objptr
16ef4                 | ' 
16ef4                 | ' write_color:=ff
16ef4     37 00 00 FF 
16ef8     27 E4 85 F1 | 	sub	objptr, ##28199
16efc     F2 12 62 FC | 	wrlong	arg01, objptr
16f00                 | ' write_background:=bb
16f00     04 E4 05 F1 | 	add	objptr, #4
16f04     F2 14 62 FC | 	wrlong	arg02, objptr
16f08     45 E4 85 F1 | 	sub	objptr, #69
16f0c     00 01 90 FD | 	jmp	#LR__1898
16f10                 | LR__1896
16f10     37 00 00 FF 
16f14     70 E4 05 F1 | 	add	objptr, ##28272
16f18     F2 00 68 FC | 	wrlong	#0, objptr
16f1c     04 E4 85 F1 | 	sub	objptr, #4
16f20     F2 1E 68 FC | 	wrlong	#15, objptr
16f24     21 00 00 FF 
16f28     B4 E4 05 F1 | 	add	objptr, ##17076
16f2c     F2 00 68 FC | 	wrlong	#0, objptr
16f30     21 00 00 FF 
16f34     B8 E4 85 F1 | 	sub	objptr, ##17080
16f38     F2 00 68 FC | 	wrlong	#0, objptr
16f3c     37 00 00 FF 
16f40     68 E4 85 F1 | 	sub	objptr, ##28264
16f44     00 12 06 F6 | 	mov	arg01, #0
16f48     88 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16f4c     37 00 00 FF 
16f50     6C E4 05 F1 | 	add	objptr, ##28268
16f54     F2 12 02 FB | 	rdlong	arg01, objptr
16f58     04 E4 85 F1 | 	sub	objptr, #4
16f5c     F2 14 02 FB | 	rdlong	arg02, objptr
16f60                 | ' 
16f60                 | ' write_color:=ff
16f60     37 00 00 FF 
16f64     27 E4 85 F1 | 	sub	objptr, ##28199
16f68     F2 12 62 FC | 	wrlong	arg01, objptr
16f6c                 | ' write_background:=bb
16f6c     04 E4 05 F1 | 	add	objptr, #4
16f70     F2 14 62 FC | 	wrlong	arg02, objptr
16f74     45 E4 85 F1 | 	sub	objptr, #69
16f78     94 00 90 FD | 	jmp	#LR__1898
16f7c                 | LR__1897
16f7c     37 00 00 FF 
16f80     70 E4 05 F1 | 	add	objptr, ##28272
16f84     F2 02 68 FC | 	wrlong	#1, objptr
16f88     04 E4 85 F1 | 	sub	objptr, #4
16f8c     F2 02 68 FC | 	wrlong	#1, objptr
16f90     21 00 00 FF 
16f94     B4 E4 05 F1 | 	add	objptr, ##17076
16f98     F2 02 68 FC | 	wrlong	#1, objptr
16f9c     21 00 00 FF 
16fa0     B8 E4 85 F1 | 	sub	objptr, ##17080
16fa4     F2 1C 68 FC | 	wrlong	#14, objptr
16fa8     37 00 00 FF 
16fac     68 E4 85 F1 | 	sub	objptr, ##28264
16fb0     04 12 06 F6 | 	mov	arg01, #4
16fb4     1C 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16fb8     37 00 00 FF 
16fbc     6C E4 05 F1 | 	add	objptr, ##28268
16fc0     F2 12 02 FB | 	rdlong	arg01, objptr
16fc4     04 E4 85 F1 | 	sub	objptr, #4
16fc8     F2 14 02 FB | 	rdlong	arg02, objptr
16fcc                 | ' 
16fcc                 | ' write_color:=ff
16fcc     37 00 00 FF 
16fd0     27 E4 85 F1 | 	sub	objptr, ##28199
16fd4     F2 12 62 FC | 	wrlong	arg01, objptr
16fd8                 | ' write_background:=bb
16fd8     04 E4 05 F1 | 	add	objptr, #4
16fdc     F2 14 62 FC | 	wrlong	arg02, objptr
16fe0     07 00 00 FF 
16fe4     8A EB 05 F1 | 	add	ptr__dat__, ##3978
16fe8     59 00 00 FF 
16fec     7F E5 05 F1 | 	add	objptr, ##45951
16ff0     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16ff4     04 E4 85 F1 | 	sub	objptr, #4
16ff8     03 00 80 FF 
16ffc     F2 30 69 FC | 	wrlong	##1688, objptr
17000     59 00 00 FF 
17004     C0 E5 85 F1 | 	sub	objptr, ##46016
17008     07 00 00 FF 
1700c     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
17010                 | LR__1898
17010     59 00 00 FF 
17014     BC E5 05 F1 | 	add	objptr, ##46012
17018     F2 1E 62 FC | 	wrlong	local01, objptr
1701c     04 E4 85 F1 | 	sub	objptr, #4
17020     F2 12 02 FB | 	rdlong	arg01, objptr
17024     16 00 00 FF 
17028     2C E5 85 F1 | 	sub	objptr, ##11564
1702c     F2 26 02 FB | 	rdlong	local05, objptr
17030     43 00 00 FF 
17034     8C E4 85 F1 | 	sub	objptr, ##34444
17038     13 13 82 F1 | 	sub	arg01, local05
1703c     00 14 06 F6 | 	mov	arg02, #0
17040     0A 16 06 F6 | 	mov	arg03, #10
17044     E8 9F B0 FD | 	call	#__system__Number_S
17048     FD 12 02 F6 | 	mov	arg01, result1
1704c     75 01 00 FF 
17050     08 15 06 F6 | 	mov	arg02, ##@LR__5195
17054     D0 7D B0 FD | 	call	#__system___string_concat
17058     58 00 00 FF 
1705c     1C E5 05 F1 | 	add	objptr, ##45340
17060     F2 FA 61 FC | 	wrlong	result1, objptr
17064     21 00 00 FF 
17068     B0 E4 85 F1 | 	sub	objptr, ##17072
1706c     F2 12 02 FB | 	rdlong	arg01, objptr
17070     04 E4 85 F1 | 	sub	objptr, #4
17074     F2 14 02 FB | 	rdlong	arg02, objptr
17078     37 00 00 FF 
1707c     68 E4 85 F1 | 	sub	objptr, ##28264
17080     A0 66 B0 FD | 	call	#_hg010b_spin2_cls
17084     75 01 00 FF 
17088     1A 13 06 F6 | 	mov	arg01, ##@LR__5196
1708c                 | ' 
1708c                 | ' write(text)
1708c     54 6A B0 FD | 	call	#_hg010b_spin2_write
17090                 | ' crlf
17090     1C 6D B0 FD | 	call	#_hg010b_spin2_crlf
17094     18 00 00 FF 
17098     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1709c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
170a0     18 00 00 FF 
170a4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
170a8                 | ' 
170a8                 | ' write(text)
170a8     38 6A B0 FD | 	call	#_hg010b_spin2_write
170ac                 | ' crlf
170ac     00 6D B0 FD | 	call	#_hg010b_spin2_crlf
170b0     58 00 00 FF 
170b4     1C E5 05 F1 | 	add	objptr, ##45340
170b8     F2 12 02 FB | 	rdlong	arg01, objptr
170bc     58 00 00 FF 
170c0     1C E5 85 F1 | 	sub	objptr, ##45340
170c4                 | ' 
170c4                 | ' write(text)
170c4     1C 6A B0 FD | 	call	#_hg010b_spin2_write
170c8                 | ' crlf
170c8     E4 6C B0 FD | 	call	#_hg010b_spin2_crlf
170cc     A7 F0 03 F6 | 	mov	ptra, fp
170d0     B2 00 A0 FD | 	call	#popregs_
170d4                 | _do_mode_ret
170d4     2D 00 64 FD | 	ret
170d8                 | 
170d8                 | ' 
170d8                 | ' sub do_setwave
170d8                 | _do_setwave
170d8     02 4A 05 F6 | 	mov	COUNT_, #2
170dc     A8 00 A0 FD | 	call	#pushregs_
170e0     18 F0 07 F1 | 	add	ptra, #24
170e4     B0 37 BF FD | 	call	#_pop
170e8     FD 12 02 F6 | 	mov	arg01, result1
170ec     FE 1E 02 F6 | 	mov	local01, result2
170f0     FF 20 02 F6 | 	mov	local02, result3
170f4     A7 12 62 FC | 	wrlong	arg01, fp
170f8     04 4E 05 F1 | 	add	fp, #4
170fc     A7 1E 62 FC | 	wrlong	local01, fp
17100     04 4E 05 F1 | 	add	fp, #4
17104     A7 20 62 FC | 	wrlong	local02, fp
17108     08 4E 85 F1 | 	sub	fp, #8
1710c     88 37 BF FD | 	call	#_pop
17110     FD 20 02 F6 | 	mov	local02, result1
17114     0C 4E 05 F1 | 	add	fp, #12
17118     A7 20 62 FC | 	wrlong	local02, fp
1711c     04 4E 05 F1 | 	add	fp, #4
17120     A7 FC 61 FC | 	wrlong	result2, fp
17124     04 4E 05 F1 | 	add	fp, #4
17128     A7 FE 61 FC | 	wrlong	result3, fp
1712c     08 4E 85 F1 | 	sub	fp, #8
17130     A7 12 02 F6 | 	mov	arg01, fp
17134     0C 4E 85 F1 | 	sub	fp, #12
17138     F8 C3 BF FD | 	call	#_converttoint
1713c     FD 20 02 F6 | 	mov	local02, result1
17140     10 1F 02 F6 | 	mov	local01, local02
17144     01 1E 66 F0 | 	shl	local01, #1
17148     10 1F 02 F1 | 	add	local01, local02
1714c     03 1E 66 F0 | 	shl	local01, #3
17150     14 00 00 FF 
17154     68 E5 05 F1 | 	add	objptr, ##10600
17158     F2 1E 02 F1 | 	add	local01, objptr
1715c     A7 12 02 F6 | 	mov	arg01, fp
17160     14 00 00 FF 
17164     68 E5 85 F1 | 	sub	objptr, ##10600
17168     C8 C3 BF FD | 	call	#_converttoint
1716c     04 1E 06 F1 | 	add	local01, #4
17170     0F FB 41 FC | 	wrbyte	result1, local01
17174     A7 F0 03 F6 | 	mov	ptra, fp
17178     B2 00 A0 FD | 	call	#popregs_
1717c                 | _do_setwave_ret
1717c     2D 00 64 FD | 	ret
17180                 | 
17180                 | ' 
17180                 | ' sub do_setsustain
17180                 | _do_setsustain
17180     02 4A 05 F6 | 	mov	COUNT_, #2
17184     A8 00 A0 FD | 	call	#pushregs_
17188     18 F0 07 F1 | 	add	ptra, #24
1718c     08 37 BF FD | 	call	#_pop
17190     FD 12 02 F6 | 	mov	arg01, result1
17194     FE 1E 02 F6 | 	mov	local01, result2
17198     FF 20 02 F6 | 	mov	local02, result3
1719c     A7 12 62 FC | 	wrlong	arg01, fp
171a0     04 4E 05 F1 | 	add	fp, #4
171a4     A7 1E 62 FC | 	wrlong	local01, fp
171a8     04 4E 05 F1 | 	add	fp, #4
171ac     A7 20 62 FC | 	wrlong	local02, fp
171b0     08 4E 85 F1 | 	sub	fp, #8
171b4     E0 36 BF FD | 	call	#_pop
171b8     FD 20 02 F6 | 	mov	local02, result1
171bc     0C 4E 05 F1 | 	add	fp, #12
171c0     A7 20 62 FC | 	wrlong	local02, fp
171c4     04 4E 05 F1 | 	add	fp, #4
171c8     A7 FC 61 FC | 	wrlong	result2, fp
171cc     04 4E 05 F1 | 	add	fp, #4
171d0     A7 FE 61 FC | 	wrlong	result3, fp
171d4     08 4E 85 F1 | 	sub	fp, #8
171d8     A7 12 02 F6 | 	mov	arg01, fp
171dc     0C 4E 85 F1 | 	sub	fp, #12
171e0     50 C3 BF FD | 	call	#_converttoint
171e4     FD 20 02 F6 | 	mov	local02, result1
171e8     10 1F 02 F6 | 	mov	local01, local02
171ec     01 1E 66 F0 | 	shl	local01, #1
171f0     10 1F 02 F1 | 	add	local01, local02
171f4     03 1E 66 F0 | 	shl	local01, #3
171f8     14 00 00 FF 
171fc     68 E5 05 F1 | 	add	objptr, ##10600
17200     F2 1E 02 F1 | 	add	local01, objptr
17204     A7 12 02 F6 | 	mov	arg01, fp
17208     14 00 00 FF 
1720c     68 E5 85 F1 | 	sub	objptr, ##10600
17210     20 C3 BF FD | 	call	#_converttoint
17214     14 1E 06 F1 | 	add	local01, #20
17218     0F FB 51 FC | 	wrword	result1, local01
1721c     A7 F0 03 F6 | 	mov	ptra, fp
17220     B2 00 A0 FD | 	call	#popregs_
17224                 | _do_setsustain_ret
17224     2D 00 64 FD | 	ret
17228                 | 
17228                 | ' 
17228                 | ' sub do_setenv
17228                 | _do_setenv
17228     02 4A 05 F6 | 	mov	COUNT_, #2
1722c     A8 00 A0 FD | 	call	#pushregs_
17230     18 F0 07 F1 | 	add	ptra, #24
17234     60 36 BF FD | 	call	#_pop
17238     FD 12 02 F6 | 	mov	arg01, result1
1723c     FE 1E 02 F6 | 	mov	local01, result2
17240     FF 20 02 F6 | 	mov	local02, result3
17244     A7 12 62 FC | 	wrlong	arg01, fp
17248     04 4E 05 F1 | 	add	fp, #4
1724c     A7 1E 62 FC | 	wrlong	local01, fp
17250     04 4E 05 F1 | 	add	fp, #4
17254     A7 20 62 FC | 	wrlong	local02, fp
17258     08 4E 85 F1 | 	sub	fp, #8
1725c     38 36 BF FD | 	call	#_pop
17260     FD 20 02 F6 | 	mov	local02, result1
17264     0C 4E 05 F1 | 	add	fp, #12
17268     A7 20 62 FC | 	wrlong	local02, fp
1726c     04 4E 05 F1 | 	add	fp, #4
17270     A7 FC 61 FC | 	wrlong	result2, fp
17274     04 4E 05 F1 | 	add	fp, #4
17278     A7 FE 61 FC | 	wrlong	result3, fp
1727c     08 4E 85 F1 | 	sub	fp, #8
17280     A7 12 02 F6 | 	mov	arg01, fp
17284     0C 4E 85 F1 | 	sub	fp, #12
17288     A8 C2 BF FD | 	call	#_converttoint
1728c     FD 20 02 F6 | 	mov	local02, result1
17290     10 1F 02 F6 | 	mov	local01, local02
17294     01 1E 66 F0 | 	shl	local01, #1
17298     10 1F 02 F1 | 	add	local01, local02
1729c     03 1E 66 F0 | 	shl	local01, #3
172a0     14 00 00 FF 
172a4     68 E5 05 F1 | 	add	objptr, ##10600
172a8     F2 1E 02 F1 | 	add	local01, objptr
172ac     A7 12 02 F6 | 	mov	arg01, fp
172b0     14 00 00 FF 
172b4     68 E5 85 F1 | 	sub	objptr, ##10600
172b8     78 C2 BF FD | 	call	#_converttoint
172bc     05 1E 06 F1 | 	add	local01, #5
172c0     0F FB 41 FC | 	wrbyte	result1, local01
172c4     A7 F0 03 F6 | 	mov	ptra, fp
172c8     B2 00 A0 FD | 	call	#popregs_
172cc                 | _do_setenv_ret
172cc     2D 00 64 FD | 	ret
172d0                 | 
172d0                 | ' 
172d0                 | ' sub do_setdelay
172d0                 | _do_setdelay
172d0     02 4A 05 F6 | 	mov	COUNT_, #2
172d4     A8 00 A0 FD | 	call	#pushregs_
172d8     18 F0 07 F1 | 	add	ptra, #24
172dc     B8 35 BF FD | 	call	#_pop
172e0     FD 12 02 F6 | 	mov	arg01, result1
172e4     FE 1E 02 F6 | 	mov	local01, result2
172e8     FF 20 02 F6 | 	mov	local02, result3
172ec     A7 12 62 FC | 	wrlong	arg01, fp
172f0     04 4E 05 F1 | 	add	fp, #4
172f4     A7 1E 62 FC | 	wrlong	local01, fp
172f8     04 4E 05 F1 | 	add	fp, #4
172fc     A7 20 62 FC | 	wrlong	local02, fp
17300     08 4E 85 F1 | 	sub	fp, #8
17304     90 35 BF FD | 	call	#_pop
17308     FD 20 02 F6 | 	mov	local02, result1
1730c     0C 4E 05 F1 | 	add	fp, #12
17310     A7 20 62 FC | 	wrlong	local02, fp
17314     04 4E 05 F1 | 	add	fp, #4
17318     A7 FC 61 FC | 	wrlong	result2, fp
1731c     04 4E 05 F1 | 	add	fp, #4
17320     A7 FE 61 FC | 	wrlong	result3, fp
17324     08 4E 85 F1 | 	sub	fp, #8
17328     A7 12 02 F6 | 	mov	arg01, fp
1732c     0C 4E 85 F1 | 	sub	fp, #12
17330     00 C2 BF FD | 	call	#_converttoint
17334     FD 20 02 F6 | 	mov	local02, result1
17338     10 1F 02 F6 | 	mov	local01, local02
1733c     01 1E 66 F0 | 	shl	local01, #1
17340     10 1F 02 F1 | 	add	local01, local02
17344     03 1E 66 F0 | 	shl	local01, #3
17348     14 00 00 FF 
1734c     68 E5 05 F1 | 	add	objptr, ##10600
17350     F2 1E 02 F1 | 	add	local01, objptr
17354     A7 12 02 F6 | 	mov	arg01, fp
17358     14 00 00 FF 
1735c     68 E5 85 F1 | 	sub	objptr, ##10600
17360     D0 C1 BF FD | 	call	#_converttoint
17364     06 1E 06 F1 | 	add	local01, #6
17368     0F FB 51 FC | 	wrword	result1, local01
1736c     A7 F0 03 F6 | 	mov	ptra, fp
17370     B2 00 A0 FD | 	call	#popregs_
17374                 | _do_setdelay_ret
17374     2D 00 64 FD | 	ret
17378                 | 
17378                 | ' 
17378                 | ' sub do_setlen
17378                 | _do_setlen
17378     02 4A 05 F6 | 	mov	COUNT_, #2
1737c     A8 00 A0 FD | 	call	#pushregs_
17380     18 F0 07 F1 | 	add	ptra, #24
17384     10 35 BF FD | 	call	#_pop
17388     FD 12 02 F6 | 	mov	arg01, result1
1738c     FE 1E 02 F6 | 	mov	local01, result2
17390     FF 20 02 F6 | 	mov	local02, result3
17394     A7 12 62 FC | 	wrlong	arg01, fp
17398     04 4E 05 F1 | 	add	fp, #4
1739c     A7 1E 62 FC | 	wrlong	local01, fp
173a0     04 4E 05 F1 | 	add	fp, #4
173a4     A7 20 62 FC | 	wrlong	local02, fp
173a8     08 4E 85 F1 | 	sub	fp, #8
173ac     E8 34 BF FD | 	call	#_pop
173b0     FD 20 02 F6 | 	mov	local02, result1
173b4     0C 4E 05 F1 | 	add	fp, #12
173b8     A7 20 62 FC | 	wrlong	local02, fp
173bc     04 4E 05 F1 | 	add	fp, #4
173c0     A7 FC 61 FC | 	wrlong	result2, fp
173c4     04 4E 05 F1 | 	add	fp, #4
173c8     A7 FE 61 FC | 	wrlong	result3, fp
173cc     08 4E 85 F1 | 	sub	fp, #8
173d0     A7 12 02 F6 | 	mov	arg01, fp
173d4     0C 4E 85 F1 | 	sub	fp, #12
173d8     58 C1 BF FD | 	call	#_converttoint
173dc     FD 20 02 F6 | 	mov	local02, result1
173e0     10 1F 02 F6 | 	mov	local01, local02
173e4     01 1E 66 F0 | 	shl	local01, #1
173e8     10 1F 02 F1 | 	add	local01, local02
173ec     03 1E 66 F0 | 	shl	local01, #3
173f0     14 00 00 FF 
173f4     68 E5 05 F1 | 	add	objptr, ##10600
173f8     F2 1E 02 F1 | 	add	local01, objptr
173fc     A7 12 02 F6 | 	mov	arg01, fp
17400     14 00 00 FF 
17404     68 E5 85 F1 | 	sub	objptr, ##10600
17408     D4 C1 BF FD | 	call	#_converttofloat
1740c     08 1E 06 F1 | 	add	local01, #8
17410     0F FB 61 FC | 	wrlong	result1, local01
17414     A7 F0 03 F6 | 	mov	ptra, fp
17418     B2 00 A0 FD | 	call	#popregs_
1741c                 | _do_setlen_ret
1741c     2D 00 64 FD | 	ret
17420                 | 
17420                 | ' 
17420                 | ' sub do_setvol
17420                 | _do_setvol
17420     02 4A 05 F6 | 	mov	COUNT_, #2
17424     A8 00 A0 FD | 	call	#pushregs_
17428     18 F0 07 F1 | 	add	ptra, #24
1742c     68 34 BF FD | 	call	#_pop
17430     FD 12 02 F6 | 	mov	arg01, result1
17434     FE 1E 02 F6 | 	mov	local01, result2
17438     FF 20 02 F6 | 	mov	local02, result3
1743c     A7 12 62 FC | 	wrlong	arg01, fp
17440     04 4E 05 F1 | 	add	fp, #4
17444     A7 1E 62 FC | 	wrlong	local01, fp
17448     04 4E 05 F1 | 	add	fp, #4
1744c     A7 20 62 FC | 	wrlong	local02, fp
17450     08 4E 85 F1 | 	sub	fp, #8
17454     40 34 BF FD | 	call	#_pop
17458     FD 20 02 F6 | 	mov	local02, result1
1745c     0C 4E 05 F1 | 	add	fp, #12
17460     A7 20 62 FC | 	wrlong	local02, fp
17464     04 4E 05 F1 | 	add	fp, #4
17468     A7 FC 61 FC | 	wrlong	result2, fp
1746c     04 4E 05 F1 | 	add	fp, #4
17470     A7 FE 61 FC | 	wrlong	result3, fp
17474     08 4E 85 F1 | 	sub	fp, #8
17478     A7 12 02 F6 | 	mov	arg01, fp
1747c     0C 4E 85 F1 | 	sub	fp, #12
17480     B0 C0 BF FD | 	call	#_converttoint
17484     FD 20 02 F6 | 	mov	local02, result1
17488     10 1F 02 F6 | 	mov	local01, local02
1748c     01 1E 66 F0 | 	shl	local01, #1
17490     10 1F 02 F1 | 	add	local01, local02
17494     03 1E 66 F0 | 	shl	local01, #3
17498     14 00 00 FF 
1749c     68 E5 05 F1 | 	add	objptr, ##10600
174a0     F2 1E 02 F1 | 	add	local01, objptr
174a4     A7 12 02 F6 | 	mov	arg01, fp
174a8     14 00 00 FF 
174ac     68 E5 85 F1 | 	sub	objptr, ##10600
174b0     2C C1 BF FD | 	call	#_converttofloat
174b4     0C 1E 06 F1 | 	add	local01, #12
174b8     0F FB 61 FC | 	wrlong	result1, local01
174bc     A7 F0 03 F6 | 	mov	ptra, fp
174c0     B2 00 A0 FD | 	call	#popregs_
174c4                 | _do_setvol_ret
174c4     2D 00 64 FD | 	ret
174c8                 | 
174c8                 | ' 
174c8                 | ' sub do_setpan
174c8                 | _do_setpan
174c8     02 4A 05 F6 | 	mov	COUNT_, #2
174cc     A8 00 A0 FD | 	call	#pushregs_
174d0     18 F0 07 F1 | 	add	ptra, #24
174d4     C0 33 BF FD | 	call	#_pop
174d8     FD 12 02 F6 | 	mov	arg01, result1
174dc     FE 1E 02 F6 | 	mov	local01, result2
174e0     FF 20 02 F6 | 	mov	local02, result3
174e4     A7 12 62 FC | 	wrlong	arg01, fp
174e8     04 4E 05 F1 | 	add	fp, #4
174ec     A7 1E 62 FC | 	wrlong	local01, fp
174f0     04 4E 05 F1 | 	add	fp, #4
174f4     A7 20 62 FC | 	wrlong	local02, fp
174f8     08 4E 85 F1 | 	sub	fp, #8
174fc     98 33 BF FD | 	call	#_pop
17500     FD 20 02 F6 | 	mov	local02, result1
17504     0C 4E 05 F1 | 	add	fp, #12
17508     A7 20 62 FC | 	wrlong	local02, fp
1750c     04 4E 05 F1 | 	add	fp, #4
17510     A7 FC 61 FC | 	wrlong	result2, fp
17514     04 4E 05 F1 | 	add	fp, #4
17518     A7 FE 61 FC | 	wrlong	result3, fp
1751c     08 4E 85 F1 | 	sub	fp, #8
17520     A7 12 02 F6 | 	mov	arg01, fp
17524     0C 4E 85 F1 | 	sub	fp, #12
17528     08 C0 BF FD | 	call	#_converttoint
1752c     FD 20 02 F6 | 	mov	local02, result1
17530     10 1F 02 F6 | 	mov	local01, local02
17534     01 1E 66 F0 | 	shl	local01, #1
17538     10 1F 02 F1 | 	add	local01, local02
1753c     03 1E 66 F0 | 	shl	local01, #3
17540     14 00 00 FF 
17544     68 E5 05 F1 | 	add	objptr, ##10600
17548     F2 1E 02 F1 | 	add	local01, objptr
1754c     A7 12 02 F6 | 	mov	arg01, fp
17550     14 00 00 FF 
17554     68 E5 85 F1 | 	sub	objptr, ##10600
17558     84 C0 BF FD | 	call	#_converttofloat
1755c     10 1E 06 F1 | 	add	local01, #16
17560     0F FB 61 FC | 	wrlong	result1, local01
17564     A7 F0 03 F6 | 	mov	ptra, fp
17568     B2 00 A0 FD | 	call	#popregs_
1756c                 | _do_setpan_ret
1756c     2D 00 64 FD | 	ret
17570                 | 
17570                 | ' 
17570                 | ' 
17570                 | ' sub do_pinwrite
17570                 | _do_pinwrite
17570     01 4A 05 F6 | 	mov	COUNT_, #1
17574     A8 00 A0 FD | 	call	#pushregs_
17578     18 F0 07 F1 | 	add	ptra, #24
1757c     18 33 BF FD | 	call	#_pop
17580     FD 14 02 F6 | 	mov	arg02, result1
17584     FE 12 02 F6 | 	mov	arg01, result2
17588     FF 1E 02 F6 | 	mov	local01, result3
1758c     A7 14 62 FC | 	wrlong	arg02, fp
17590     04 4E 05 F1 | 	add	fp, #4
17594     A7 12 62 FC | 	wrlong	arg01, fp
17598     04 4E 05 F1 | 	add	fp, #4
1759c     A7 1E 62 FC | 	wrlong	local01, fp
175a0     08 4E 85 F1 | 	sub	fp, #8
175a4     F0 32 BF FD | 	call	#_pop
175a8     FF 1E 02 F6 | 	mov	local01, result3
175ac     0C 4E 05 F1 | 	add	fp, #12
175b0     A7 FA 61 FC | 	wrlong	result1, fp
175b4     04 4E 05 F1 | 	add	fp, #4
175b8     A7 FC 61 FC | 	wrlong	result2, fp
175bc     04 4E 05 F1 | 	add	fp, #4
175c0     A7 1E 62 FC | 	wrlong	local01, fp
175c4     08 4E 85 F1 | 	sub	fp, #8
175c8     A7 12 02 F6 | 	mov	arg01, fp
175cc     0C 4E 85 F1 | 	sub	fp, #12
175d0     60 BF BF FD | 	call	#_converttoint
175d4     FD 1E 02 F6 | 	mov	local01, result1
175d8     A7 12 02 F6 | 	mov	arg01, fp
175dc     54 BF BF FD | 	call	#_converttoint
175e0     FD 14 02 F6 | 	mov	arg02, result1
175e4     0F 13 02 F6 | 	mov	arg01, local01
175e8     94 79 B0 FD | 	call	#__system___pinwrite
175ec     A7 F0 03 F6 | 	mov	ptra, fp
175f0     B2 00 A0 FD | 	call	#popregs_
175f4                 | _do_pinwrite_ret
175f4     2D 00 64 FD | 	ret
175f8                 | 
175f8                 | ' 
175f8                 | ' sub do_pinfloat
175f8                 | _do_pinfloat
175f8     00 4A 05 F6 | 	mov	COUNT_, #0
175fc     A8 00 A0 FD | 	call	#pushregs_
17600     0C F0 07 F1 | 	add	ptra, #12
17604     90 32 BF FD | 	call	#_pop
17608     A7 FA 61 FC | 	wrlong	result1, fp
1760c     04 4E 05 F1 | 	add	fp, #4
17610     A7 FC 61 FC | 	wrlong	result2, fp
17614     04 4E 05 F1 | 	add	fp, #4
17618     A7 FE 61 FC | 	wrlong	result3, fp
1761c     08 4E 85 F1 | 	sub	fp, #8
17620     A7 12 02 F6 | 	mov	arg01, fp
17624     0C BF BF FD | 	call	#_converttoint
17628     50 FA 61 FD | 	fltl	result1
1762c     A7 F0 03 F6 | 	mov	ptra, fp
17630     B2 00 A0 FD | 	call	#popregs_
17634                 | _do_pinfloat_ret
17634     2D 00 64 FD | 	ret
17638                 | 
17638                 | ' 
17638                 | ' sub do_pinlo
17638                 | _do_pinlo
17638     00 4A 05 F6 | 	mov	COUNT_, #0
1763c     A8 00 A0 FD | 	call	#pushregs_
17640     0C F0 07 F1 | 	add	ptra, #12
17644     50 32 BF FD | 	call	#_pop
17648     A7 FA 61 FC | 	wrlong	result1, fp
1764c     04 4E 05 F1 | 	add	fp, #4
17650     A7 FC 61 FC | 	wrlong	result2, fp
17654     04 4E 05 F1 | 	add	fp, #4
17658     A7 FE 61 FC | 	wrlong	result3, fp
1765c     08 4E 85 F1 | 	sub	fp, #8
17660     A7 12 02 F6 | 	mov	arg01, fp
17664     CC BE BF FD | 	call	#_converttoint
17668     58 FA 61 FD | 	drvl	result1
1766c     A7 F0 03 F6 | 	mov	ptra, fp
17670     B2 00 A0 FD | 	call	#popregs_
17674                 | _do_pinlo_ret
17674     2D 00 64 FD | 	ret
17678                 | 
17678                 | ' 
17678                 | ' sub do_pinhi
17678                 | _do_pinhi
17678     00 4A 05 F6 | 	mov	COUNT_, #0
1767c     A8 00 A0 FD | 	call	#pushregs_
17680     0C F0 07 F1 | 	add	ptra, #12
17684     10 32 BF FD | 	call	#_pop
17688     A7 FA 61 FC | 	wrlong	result1, fp
1768c     04 4E 05 F1 | 	add	fp, #4
17690     A7 FC 61 FC | 	wrlong	result2, fp
17694     04 4E 05 F1 | 	add	fp, #4
17698     A7 FE 61 FC | 	wrlong	result3, fp
1769c     08 4E 85 F1 | 	sub	fp, #8
176a0     A7 12 02 F6 | 	mov	arg01, fp
176a4     8C BE BF FD | 	call	#_converttoint
176a8     59 FA 61 FD | 	drvh	result1
176ac     A7 F0 03 F6 | 	mov	ptra, fp
176b0     B2 00 A0 FD | 	call	#popregs_
176b4                 | _do_pinhi_ret
176b4     2D 00 64 FD | 	ret
176b8                 | 
176b8                 | ' 
176b8                 | ' sub do_pintoggle
176b8                 | _do_pintoggle
176b8     00 4A 05 F6 | 	mov	COUNT_, #0
176bc     A8 00 A0 FD | 	call	#pushregs_
176c0     0C F0 07 F1 | 	add	ptra, #12
176c4     D0 31 BF FD | 	call	#_pop
176c8     A7 FA 61 FC | 	wrlong	result1, fp
176cc     04 4E 05 F1 | 	add	fp, #4
176d0     A7 FC 61 FC | 	wrlong	result2, fp
176d4     04 4E 05 F1 | 	add	fp, #4
176d8     A7 FE 61 FC | 	wrlong	result3, fp
176dc     08 4E 85 F1 | 	sub	fp, #8
176e0     A7 12 02 F6 | 	mov	arg01, fp
176e4     4C BE BF FD | 	call	#_converttoint
176e8     5F FA 61 FD | 	drvnot	result1
176ec     A7 F0 03 F6 | 	mov	ptra, fp
176f0     B2 00 A0 FD | 	call	#popregs_
176f4                 | _do_pintoggle_ret
176f4     2D 00 64 FD | 	ret
176f8                 | 
176f8                 | ' 
176f8                 | ' 
176f8                 | ' sub do_pinstart
176f8                 | _do_pinstart
176f8     03 4A 05 F6 | 	mov	COUNT_, #3
176fc     A8 00 A0 FD | 	call	#pushregs_
17700     30 F0 07 F1 | 	add	ptra, #48
17704     90 31 BF FD | 	call	#_pop
17708     FD 16 02 F6 | 	mov	arg03, result1
1770c     FE 14 02 F6 | 	mov	arg02, result2
17710     FF 18 02 F6 | 	mov	arg04, result3
17714     A7 16 62 FC | 	wrlong	arg03, fp
17718     04 4E 05 F1 | 	add	fp, #4
1771c     A7 14 62 FC | 	wrlong	arg02, fp
17720     04 4E 05 F1 | 	add	fp, #4
17724     A7 18 62 FC | 	wrlong	arg04, fp
17728     08 4E 85 F1 | 	sub	fp, #8
1772c     68 31 BF FD | 	call	#_pop
17730     FD 16 02 F6 | 	mov	arg03, result1
17734     FE 14 02 F6 | 	mov	arg02, result2
17738     FF 18 02 F6 | 	mov	arg04, result3
1773c     0C 4E 05 F1 | 	add	fp, #12
17740     A7 16 62 FC | 	wrlong	arg03, fp
17744     04 4E 05 F1 | 	add	fp, #4
17748     A7 14 62 FC | 	wrlong	arg02, fp
1774c     04 4E 05 F1 | 	add	fp, #4
17750     A7 18 62 FC | 	wrlong	arg04, fp
17754     14 4E 85 F1 | 	sub	fp, #20
17758     3C 31 BF FD | 	call	#_pop
1775c     FD 16 02 F6 | 	mov	arg03, result1
17760     FE 14 02 F6 | 	mov	arg02, result2
17764     FF 18 02 F6 | 	mov	arg04, result3
17768     18 4E 05 F1 | 	add	fp, #24
1776c     A7 16 62 FC | 	wrlong	arg03, fp
17770     04 4E 05 F1 | 	add	fp, #4
17774     A7 14 62 FC | 	wrlong	arg02, fp
17778     04 4E 05 F1 | 	add	fp, #4
1777c     A7 18 62 FC | 	wrlong	arg04, fp
17780     20 4E 85 F1 | 	sub	fp, #32
17784     10 31 BF FD | 	call	#_pop
17788     FF 16 02 F6 | 	mov	arg03, result3
1778c     24 4E 05 F1 | 	add	fp, #36
17790     A7 FA 61 FC | 	wrlong	result1, fp
17794     04 4E 05 F1 | 	add	fp, #4
17798     A7 FC 61 FC | 	wrlong	result2, fp
1779c     04 4E 05 F1 | 	add	fp, #4
177a0     A7 16 62 FC | 	wrlong	arg03, fp
177a4     08 4E 85 F1 | 	sub	fp, #8
177a8     A7 12 02 F6 | 	mov	arg01, fp
177ac     24 4E 85 F1 | 	sub	fp, #36
177b0     80 BD BF FD | 	call	#_converttoint
177b4     FD 1E 02 F6 | 	mov	local01, result1
177b8     18 4E 05 F1 | 	add	fp, #24
177bc     A7 12 02 F6 | 	mov	arg01, fp
177c0     18 4E 85 F1 | 	sub	fp, #24
177c4     6C BD BF FD | 	call	#_converttoint
177c8     FD 20 02 F6 | 	mov	local02, result1
177cc     0C 4E 05 F1 | 	add	fp, #12
177d0     A7 12 02 F6 | 	mov	arg01, fp
177d4     0C 4E 85 F1 | 	sub	fp, #12
177d8     58 BD BF FD | 	call	#_converttoint
177dc     FD 22 02 F6 | 	mov	local03, result1
177e0     A7 12 02 F6 | 	mov	arg01, fp
177e4     4C BD BF FD | 	call	#_converttoint
177e8     40 1E 62 FD | 	dirl	local01
177ec     0F 21 02 FC | 	wrpin	local02, local01
177f0     0F 23 12 FC | 	wxpin	local03, local01
177f4     0F FB 21 FC | 	wypin	result1, local01
177f8     41 1E 62 FD | 	dirh	local01
177fc     A7 F0 03 F6 | 	mov	ptra, fp
17800     B2 00 A0 FD | 	call	#popregs_
17804                 | _do_pinstart_ret
17804     2D 00 64 FD | 	ret
17808                 | 
17808                 | ' 
17808                 | ' 
17808                 | ' sub do_wrpin
17808                 | _do_wrpin
17808     01 4A 05 F6 | 	mov	COUNT_, #1
1780c     A8 00 A0 FD | 	call	#pushregs_
17810     18 F0 07 F1 | 	add	ptra, #24
17814     80 30 BF FD | 	call	#_pop
17818     FD 14 02 F6 | 	mov	arg02, result1
1781c     FE 12 02 F6 | 	mov	arg01, result2
17820     FF 1E 02 F6 | 	mov	local01, result3
17824     A7 14 62 FC | 	wrlong	arg02, fp
17828     04 4E 05 F1 | 	add	fp, #4
1782c     A7 12 62 FC | 	wrlong	arg01, fp
17830     04 4E 05 F1 | 	add	fp, #4
17834     A7 1E 62 FC | 	wrlong	local01, fp
17838     08 4E 85 F1 | 	sub	fp, #8
1783c     58 30 BF FD | 	call	#_pop
17840     FF 1E 02 F6 | 	mov	local01, result3
17844     0C 4E 05 F1 | 	add	fp, #12
17848     A7 FA 61 FC | 	wrlong	result1, fp
1784c     04 4E 05 F1 | 	add	fp, #4
17850     A7 FC 61 FC | 	wrlong	result2, fp
17854     04 4E 05 F1 | 	add	fp, #4
17858     A7 1E 62 FC | 	wrlong	local01, fp
1785c     08 4E 85 F1 | 	sub	fp, #8
17860     A7 12 02 F6 | 	mov	arg01, fp
17864     0C 4E 85 F1 | 	sub	fp, #12
17868     C8 BC BF FD | 	call	#_converttoint
1786c     FD 1E 02 F6 | 	mov	local01, result1
17870     A7 12 02 F6 | 	mov	arg01, fp
17874     BC BC BF FD | 	call	#_converttoint
17878     0F FB 01 FC | 	wrpin	result1, local01
1787c     A7 F0 03 F6 | 	mov	ptra, fp
17880     B2 00 A0 FD | 	call	#popregs_
17884                 | _do_wrpin_ret
17884     2D 00 64 FD | 	ret
17888                 | 
17888                 | ' 
17888                 | ' sub do_wxpin
17888                 | _do_wxpin
17888     01 4A 05 F6 | 	mov	COUNT_, #1
1788c     A8 00 A0 FD | 	call	#pushregs_
17890     18 F0 07 F1 | 	add	ptra, #24
17894     00 30 BF FD | 	call	#_pop
17898     FD 14 02 F6 | 	mov	arg02, result1
1789c     FE 12 02 F6 | 	mov	arg01, result2
178a0     FF 1E 02 F6 | 	mov	local01, result3
178a4     A7 14 62 FC | 	wrlong	arg02, fp
178a8     04 4E 05 F1 | 	add	fp, #4
178ac     A7 12 62 FC | 	wrlong	arg01, fp
178b0     04 4E 05 F1 | 	add	fp, #4
178b4     A7 1E 62 FC | 	wrlong	local01, fp
178b8     08 4E 85 F1 | 	sub	fp, #8
178bc     D8 2F BF FD | 	call	#_pop
178c0     FF 1E 02 F6 | 	mov	local01, result3
178c4     0C 4E 05 F1 | 	add	fp, #12
178c8     A7 FA 61 FC | 	wrlong	result1, fp
178cc     04 4E 05 F1 | 	add	fp, #4
178d0     A7 FC 61 FC | 	wrlong	result2, fp
178d4     04 4E 05 F1 | 	add	fp, #4
178d8     A7 1E 62 FC | 	wrlong	local01, fp
178dc     08 4E 85 F1 | 	sub	fp, #8
178e0     A7 12 02 F6 | 	mov	arg01, fp
178e4     0C 4E 85 F1 | 	sub	fp, #12
178e8     48 BC BF FD | 	call	#_converttoint
178ec     FD 1E 02 F6 | 	mov	local01, result1
178f0     A7 12 02 F6 | 	mov	arg01, fp
178f4     3C BC BF FD | 	call	#_converttoint
178f8     0F FB 11 FC | 	wxpin	result1, local01
178fc     A7 F0 03 F6 | 	mov	ptra, fp
17900     B2 00 A0 FD | 	call	#popregs_
17904                 | _do_wxpin_ret
17904     2D 00 64 FD | 	ret
17908                 | 
17908                 | ' 
17908                 | ' sub do_wypin
17908                 | _do_wypin
17908     01 4A 05 F6 | 	mov	COUNT_, #1
1790c     A8 00 A0 FD | 	call	#pushregs_
17910     18 F0 07 F1 | 	add	ptra, #24
17914     80 2F BF FD | 	call	#_pop
17918     FD 14 02 F6 | 	mov	arg02, result1
1791c     FE 12 02 F6 | 	mov	arg01, result2
17920     FF 1E 02 F6 | 	mov	local01, result3
17924     A7 14 62 FC | 	wrlong	arg02, fp
17928     04 4E 05 F1 | 	add	fp, #4
1792c     A7 12 62 FC | 	wrlong	arg01, fp
17930     04 4E 05 F1 | 	add	fp, #4
17934     A7 1E 62 FC | 	wrlong	local01, fp
17938     08 4E 85 F1 | 	sub	fp, #8
1793c     58 2F BF FD | 	call	#_pop
17940     FF 1E 02 F6 | 	mov	local01, result3
17944     0C 4E 05 F1 | 	add	fp, #12
17948     A7 FA 61 FC | 	wrlong	result1, fp
1794c     04 4E 05 F1 | 	add	fp, #4
17950     A7 FC 61 FC | 	wrlong	result2, fp
17954     04 4E 05 F1 | 	add	fp, #4
17958     A7 1E 62 FC | 	wrlong	local01, fp
1795c     08 4E 85 F1 | 	sub	fp, #8
17960     A7 12 02 F6 | 	mov	arg01, fp
17964     0C 4E 85 F1 | 	sub	fp, #12
17968     C8 BB BF FD | 	call	#_converttoint
1796c     FD 1E 02 F6 | 	mov	local01, result1
17970     A7 12 02 F6 | 	mov	arg01, fp
17974     BC BB BF FD | 	call	#_converttoint
17978     0F FB 21 FC | 	wypin	result1, local01
1797c     A7 F0 03 F6 | 	mov	ptra, fp
17980     B2 00 A0 FD | 	call	#popregs_
17984                 | _do_wypin_ret
17984     2D 00 64 FD | 	ret
17988                 | 
17988                 | ' 
17988                 | ' sub do_position
17988                 | _do_position
17988     01 4A 05 F6 | 	mov	COUNT_, #1
1798c     A8 00 A0 FD | 	call	#pushregs_
17990     18 F0 07 F1 | 	add	ptra, #24
17994     00 2F BF FD | 	call	#_pop
17998     FD 14 02 F6 | 	mov	arg02, result1
1799c     FE 12 02 F6 | 	mov	arg01, result2
179a0     FF 1E 02 F6 | 	mov	local01, result3
179a4     A7 14 62 FC | 	wrlong	arg02, fp
179a8     04 4E 05 F1 | 	add	fp, #4
179ac     A7 12 62 FC | 	wrlong	arg01, fp
179b0     04 4E 05 F1 | 	add	fp, #4
179b4     A7 1E 62 FC | 	wrlong	local01, fp
179b8     08 4E 85 F1 | 	sub	fp, #8
179bc     D8 2E BF FD | 	call	#_pop
179c0     FF 1E 02 F6 | 	mov	local01, result3
179c4     0C 4E 05 F1 | 	add	fp, #12
179c8     A7 FA 61 FC | 	wrlong	result1, fp
179cc     04 4E 05 F1 | 	add	fp, #4
179d0     A7 FC 61 FC | 	wrlong	result2, fp
179d4     04 4E 05 F1 | 	add	fp, #4
179d8     A7 1E 62 FC | 	wrlong	local01, fp
179dc     08 4E 85 F1 | 	sub	fp, #8
179e0     A7 12 02 F6 | 	mov	arg01, fp
179e4     0C 4E 85 F1 | 	sub	fp, #12
179e8     48 BB BF FD | 	call	#_converttoint
179ec     FD 1E 02 F6 | 	mov	local01, result1
179f0     A7 12 02 F6 | 	mov	arg01, fp
179f4     3C BB BF FD | 	call	#_converttoint
179f8     FD 14 02 F6 | 	mov	arg02, result1
179fc     0F 13 02 F6 | 	mov	arg01, local01
17a00     10 5C B0 FD | 	call	#_hg010b_spin2_setcursorpos
17a04     A7 F0 03 F6 | 	mov	ptra, fp
17a08     B2 00 A0 FD | 	call	#popregs_
17a0c                 | _do_position_ret
17a0c     2D 00 64 FD | 	ret
17a10                 | 
17a10                 | ' 
17a10                 | ' sub do_poke
17a10                 | _do_poke
17a10     01 4A 05 F6 | 	mov	COUNT_, #1
17a14     A8 00 A0 FD | 	call	#pushregs_
17a18     20 F0 07 F1 | 	add	ptra, #32
17a1c     78 2E BF FD | 	call	#_pop
17a20     FD 14 02 F6 | 	mov	arg02, result1
17a24     FE 12 02 F6 | 	mov	arg01, result2
17a28     FF 1E 02 F6 | 	mov	local01, result3
17a2c     A7 14 62 FC | 	wrlong	arg02, fp
17a30     04 4E 05 F1 | 	add	fp, #4
17a34     A7 12 62 FC | 	wrlong	arg01, fp
17a38     04 4E 05 F1 | 	add	fp, #4
17a3c     A7 1E 62 FC | 	wrlong	local01, fp
17a40     08 4E 85 F1 | 	sub	fp, #8
17a44     50 2E BF FD | 	call	#_pop
17a48     FF 1E 02 F6 | 	mov	local01, result3
17a4c     0C 4E 05 F1 | 	add	fp, #12
17a50     A7 FA 61 FC | 	wrlong	result1, fp
17a54     04 4E 05 F1 | 	add	fp, #4
17a58     A7 FC 61 FC | 	wrlong	result2, fp
17a5c     04 4E 05 F1 | 	add	fp, #4
17a60     A7 1E 62 FC | 	wrlong	local01, fp
17a64     08 4E 85 F1 | 	sub	fp, #8
17a68     A7 12 02 F6 | 	mov	arg01, fp
17a6c     0C 4E 85 F1 | 	sub	fp, #12
17a70     C0 BA BF FD | 	call	#_converttoint
17a74     18 4E 05 F1 | 	add	fp, #24
17a78     A7 FA 61 FC | 	wrlong	result1, fp
17a7c     18 4E 85 F1 | 	sub	fp, #24
17a80     A7 12 02 F6 | 	mov	arg01, fp
17a84     AC BA BF FD | 	call	#_converttoint
17a88     1C 4E 05 F1 | 	add	fp, #28
17a8c     A7 FA 61 FC | 	wrlong	result1, fp
17a90                 | ' t1=pop() 'value
17a90                 | ' t2=pop() 
17a90                 | ' a=converttoint(t2) : v=converttoint(t1)
17a90                 | ' if a<$80000 then poke a,v else pspoke a,v
17a90     04 4E 85 F1 | 	sub	fp, #4
17a94     A7 1E 02 FB | 	rdlong	local01, fp
17a98     18 4E 85 F1 | 	sub	fp, #24
17a9c     00 04 00 FF 
17aa0     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17aa4     1C 00 90 3D |  if_ae	jmp	#LR__1900
17aa8     18 4E 05 F1 | 	add	fp, #24
17aac     A7 12 02 FB | 	rdlong	arg01, fp
17ab0     04 4E 05 F1 | 	add	fp, #4
17ab4     A7 14 02 FB | 	rdlong	arg02, fp
17ab8     1C 4E 85 F1 | 	sub	fp, #28
17abc     09 15 42 FC | 	wrbyte	arg02, arg01
17ac0     18 00 90 FD | 	jmp	#LR__1901
17ac4                 | LR__1900
17ac4     18 4E 05 F1 | 	add	fp, #24
17ac8     A7 12 02 FB | 	rdlong	arg01, fp
17acc     04 4E 05 F1 | 	add	fp, #4
17ad0     A7 14 02 FB | 	rdlong	arg02, fp
17ad4     1C 4E 85 F1 | 	sub	fp, #28
17ad8     3C 30 B0 FD | 	call	#_pspoke
17adc                 | LR__1901
17adc     A7 F0 03 F6 | 	mov	ptra, fp
17ae0     B2 00 A0 FD | 	call	#popregs_
17ae4                 | _do_poke_ret
17ae4     2D 00 64 FD | 	ret
17ae8                 | 
17ae8                 | ' 
17ae8                 | ' sub do_dpoke
17ae8                 | _do_dpoke
17ae8     01 4A 05 F6 | 	mov	COUNT_, #1
17aec     A8 00 A0 FD | 	call	#pushregs_
17af0     20 F0 07 F1 | 	add	ptra, #32
17af4     A0 2D BF FD | 	call	#_pop
17af8     FD 14 02 F6 | 	mov	arg02, result1
17afc     FE 12 02 F6 | 	mov	arg01, result2
17b00     FF 1E 02 F6 | 	mov	local01, result3
17b04     A7 14 62 FC | 	wrlong	arg02, fp
17b08     04 4E 05 F1 | 	add	fp, #4
17b0c     A7 12 62 FC | 	wrlong	arg01, fp
17b10     04 4E 05 F1 | 	add	fp, #4
17b14     A7 1E 62 FC | 	wrlong	local01, fp
17b18     08 4E 85 F1 | 	sub	fp, #8
17b1c     78 2D BF FD | 	call	#_pop
17b20     FF 1E 02 F6 | 	mov	local01, result3
17b24     0C 4E 05 F1 | 	add	fp, #12
17b28     A7 FA 61 FC | 	wrlong	result1, fp
17b2c     04 4E 05 F1 | 	add	fp, #4
17b30     A7 FC 61 FC | 	wrlong	result2, fp
17b34     04 4E 05 F1 | 	add	fp, #4
17b38     A7 1E 62 FC | 	wrlong	local01, fp
17b3c     08 4E 85 F1 | 	sub	fp, #8
17b40     A7 12 02 F6 | 	mov	arg01, fp
17b44     0C 4E 85 F1 | 	sub	fp, #12
17b48     E8 B9 BF FD | 	call	#_converttoint
17b4c     18 4E 05 F1 | 	add	fp, #24
17b50     A7 FA 61 FC | 	wrlong	result1, fp
17b54     18 4E 85 F1 | 	sub	fp, #24
17b58     A7 12 02 F6 | 	mov	arg01, fp
17b5c     D4 B9 BF FD | 	call	#_converttoint
17b60     1C 4E 05 F1 | 	add	fp, #28
17b64     A7 FA 61 FC | 	wrlong	result1, fp
17b68                 | ' t1=pop() 'value
17b68                 | ' t2=pop() 
17b68                 | ' a=converttoint(t2) : v=converttoint(t1)
17b68                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
17b68     04 4E 85 F1 | 	sub	fp, #4
17b6c     A7 1E 02 FB | 	rdlong	local01, fp
17b70     18 4E 85 F1 | 	sub	fp, #24
17b74     00 04 00 FF 
17b78     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17b7c     1C 00 90 3D |  if_ae	jmp	#LR__1910
17b80     18 4E 05 F1 | 	add	fp, #24
17b84     A7 12 02 FB | 	rdlong	arg01, fp
17b88     04 4E 05 F1 | 	add	fp, #4
17b8c     A7 14 02 FB | 	rdlong	arg02, fp
17b90     1C 4E 85 F1 | 	sub	fp, #28
17b94     09 15 52 FC | 	wrword	arg02, arg01
17b98     18 00 90 FD | 	jmp	#LR__1911
17b9c                 | LR__1910
17b9c     18 4E 05 F1 | 	add	fp, #24
17ba0     A7 12 02 FB | 	rdlong	arg01, fp
17ba4     04 4E 05 F1 | 	add	fp, #4
17ba8     A7 14 02 FB | 	rdlong	arg02, fp
17bac     1C 4E 85 F1 | 	sub	fp, #28
17bb0     1C 2F B0 FD | 	call	#_psdpoke
17bb4                 | LR__1911
17bb4     A7 F0 03 F6 | 	mov	ptra, fp
17bb8     B2 00 A0 FD | 	call	#popregs_
17bbc                 | _do_dpoke_ret
17bbc     2D 00 64 FD | 	ret
17bc0                 | 
17bc0                 | ' 
17bc0                 | ' sub do_lpoke
17bc0                 | _do_lpoke
17bc0     01 4A 05 F6 | 	mov	COUNT_, #1
17bc4     A8 00 A0 FD | 	call	#pushregs_
17bc8     20 F0 07 F1 | 	add	ptra, #32
17bcc     C8 2C BF FD | 	call	#_pop
17bd0     FD 14 02 F6 | 	mov	arg02, result1
17bd4     FE 12 02 F6 | 	mov	arg01, result2
17bd8     FF 1E 02 F6 | 	mov	local01, result3
17bdc     A7 14 62 FC | 	wrlong	arg02, fp
17be0     04 4E 05 F1 | 	add	fp, #4
17be4     A7 12 62 FC | 	wrlong	arg01, fp
17be8     04 4E 05 F1 | 	add	fp, #4
17bec     A7 1E 62 FC | 	wrlong	local01, fp
17bf0     08 4E 85 F1 | 	sub	fp, #8
17bf4     A0 2C BF FD | 	call	#_pop
17bf8     FF 1E 02 F6 | 	mov	local01, result3
17bfc     0C 4E 05 F1 | 	add	fp, #12
17c00     A7 FA 61 FC | 	wrlong	result1, fp
17c04     04 4E 05 F1 | 	add	fp, #4
17c08     A7 FC 61 FC | 	wrlong	result2, fp
17c0c     04 4E 05 F1 | 	add	fp, #4
17c10     A7 1E 62 FC | 	wrlong	local01, fp
17c14     08 4E 85 F1 | 	sub	fp, #8
17c18     A7 12 02 F6 | 	mov	arg01, fp
17c1c     0C 4E 85 F1 | 	sub	fp, #12
17c20     10 B9 BF FD | 	call	#_converttoint
17c24     18 4E 05 F1 | 	add	fp, #24
17c28     A7 FA 61 FC | 	wrlong	result1, fp
17c2c     18 4E 85 F1 | 	sub	fp, #24
17c30     A7 12 02 F6 | 	mov	arg01, fp
17c34     FC B8 BF FD | 	call	#_converttoint
17c38     1C 4E 05 F1 | 	add	fp, #28
17c3c     A7 FA 61 FC | 	wrlong	result1, fp
17c40                 | ' t1=pop() 'value
17c40                 | ' t2=pop() 
17c40                 | ' a=converttoint(t2) : v=converttoint(t1)
17c40                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
17c40     04 4E 85 F1 | 	sub	fp, #4
17c44     A7 1E 02 FB | 	rdlong	local01, fp
17c48     18 4E 85 F1 | 	sub	fp, #24
17c4c     00 04 00 FF 
17c50     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17c54     1C 00 90 3D |  if_ae	jmp	#LR__1920
17c58     18 4E 05 F1 | 	add	fp, #24
17c5c     A7 12 02 FB | 	rdlong	arg01, fp
17c60     04 4E 05 F1 | 	add	fp, #4
17c64     A7 14 02 FB | 	rdlong	arg02, fp
17c68     1C 4E 85 F1 | 	sub	fp, #28
17c6c     09 15 62 FC | 	wrlong	arg02, arg01
17c70     18 00 90 FD | 	jmp	#LR__1921
17c74                 | LR__1920
17c74     18 4E 05 F1 | 	add	fp, #24
17c78     A7 12 02 FB | 	rdlong	arg01, fp
17c7c     04 4E 05 F1 | 	add	fp, #4
17c80     A7 14 02 FB | 	rdlong	arg02, fp
17c84     1C 4E 85 F1 | 	sub	fp, #28
17c88     FC 2D B0 FD | 	call	#_pslpoke
17c8c                 | LR__1921
17c8c     A7 F0 03 F6 | 	mov	ptra, fp
17c90     B2 00 A0 FD | 	call	#popregs_
17c94                 | _do_lpoke_ret
17c94     2D 00 64 FD | 	ret
17c98                 | 
17c98                 | ' 
17c98                 | ' sub do_peek
17c98                 | _do_peek
17c98     00 4A 05 F6 | 	mov	COUNT_, #0
17c9c     A8 00 A0 FD | 	call	#pushregs_
17ca0     14 F0 07 F1 | 	add	ptra, #20
17ca4     F0 2B BF FD | 	call	#_pop
17ca8     A7 FA 61 FC | 	wrlong	result1, fp
17cac     04 4E 05 F1 | 	add	fp, #4
17cb0     A7 FC 61 FC | 	wrlong	result2, fp
17cb4     04 4E 05 F1 | 	add	fp, #4
17cb8     A7 FE 61 FC | 	wrlong	result3, fp
17cbc     08 4E 85 F1 | 	sub	fp, #8
17cc0     A7 12 02 F6 | 	mov	arg01, fp
17cc4     6C B8 BF FD | 	call	#_converttoint
17cc8     0C 4E 05 F1 | 	add	fp, #12
17ccc     A7 FA 61 FC | 	wrlong	result1, fp
17cd0                 | ' t1=pop()
17cd0                 | ' a=converttoint(t1)
17cd0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17cd0     0C 4E 85 F1 | 	sub	fp, #12
17cd4     00 04 00 FF 
17cd8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17cdc     1C 00 90 3D |  if_ae	jmp	#LR__1930
17ce0     0C 4E 05 F1 | 	add	fp, #12
17ce4     A7 12 02 FB | 	rdlong	arg01, fp
17ce8     09 FB C1 FA | 	rdbyte	result1, arg01
17cec     04 4E 05 F1 | 	add	fp, #4
17cf0     A7 FA 61 FC | 	wrlong	result1, fp
17cf4     10 4E 85 F1 | 	sub	fp, #16
17cf8     20 00 90 FD | 	jmp	#LR__1931
17cfc                 | LR__1930
17cfc     0C 4E 05 F1 | 	add	fp, #12
17d00     A7 12 02 FB | 	rdlong	arg01, fp
17d04     0C 4E 85 F1 | 	sub	fp, #12
17d08     54 2E B0 FD | 	call	#_pspeek
17d0c     FD FA E1 F8 | 	getbyte	result1, result1, #0
17d10     10 4E 05 F1 | 	add	fp, #16
17d14     A7 FA 61 FC | 	wrlong	result1, fp
17d18     10 4E 85 F1 | 	sub	fp, #16
17d1c                 | LR__1931
17d1c     08 4E 05 F1 | 	add	fp, #8
17d20     A7 3A 68 FC | 	wrlong	#29, fp
17d24     08 4E 05 F1 | 	add	fp, #8
17d28     A7 12 02 FB | 	rdlong	arg01, fp
17d2c     10 4E 85 F1 | 	sub	fp, #16
17d30     A7 12 62 FC | 	wrlong	arg01, fp
17d34     A7 12 02 F6 | 	mov	arg01, fp
17d38     F4 2B BF FD | 	call	#_push
17d3c     A7 F0 03 F6 | 	mov	ptra, fp
17d40     B2 00 A0 FD | 	call	#popregs_
17d44                 | _do_peek_ret
17d44     2D 00 64 FD | 	ret
17d48                 | 
17d48                 | ' 
17d48                 | ' sub do_dpeek
17d48                 | _do_dpeek
17d48     00 4A 05 F6 | 	mov	COUNT_, #0
17d4c     A8 00 A0 FD | 	call	#pushregs_
17d50     14 F0 07 F1 | 	add	ptra, #20
17d54     40 2B BF FD | 	call	#_pop
17d58     A7 FA 61 FC | 	wrlong	result1, fp
17d5c     04 4E 05 F1 | 	add	fp, #4
17d60     A7 FC 61 FC | 	wrlong	result2, fp
17d64     04 4E 05 F1 | 	add	fp, #4
17d68     A7 FE 61 FC | 	wrlong	result3, fp
17d6c     08 4E 85 F1 | 	sub	fp, #8
17d70     A7 12 02 F6 | 	mov	arg01, fp
17d74     BC B7 BF FD | 	call	#_converttoint
17d78     0C 4E 05 F1 | 	add	fp, #12
17d7c     A7 FA 61 FC | 	wrlong	result1, fp
17d80                 | ' t1=pop()
17d80                 | ' a=converttoint(t1)
17d80                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
17d80     0C 4E 85 F1 | 	sub	fp, #12
17d84     00 04 00 FF 
17d88     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17d8c     1C 00 90 3D |  if_ae	jmp	#LR__1940
17d90     0C 4E 05 F1 | 	add	fp, #12
17d94     A7 12 02 FB | 	rdlong	arg01, fp
17d98     09 FB E1 FA | 	rdword	result1, arg01
17d9c     04 4E 05 F1 | 	add	fp, #4
17da0     A7 FA 61 FC | 	wrlong	result1, fp
17da4     10 4E 85 F1 | 	sub	fp, #16
17da8     1C 00 90 FD | 	jmp	#LR__1941
17dac                 | LR__1940
17dac     0C 4E 05 F1 | 	add	fp, #12
17db0     A7 12 02 FB | 	rdlong	arg01, fp
17db4     0C 4E 85 F1 | 	sub	fp, #12
17db8     54 2E B0 FD | 	call	#_psdpeek
17dbc     10 4E 05 F1 | 	add	fp, #16
17dc0     A7 FA 61 FC | 	wrlong	result1, fp
17dc4     10 4E 85 F1 | 	sub	fp, #16
17dc8                 | LR__1941
17dc8     08 4E 05 F1 | 	add	fp, #8
17dcc     A7 3A 68 FC | 	wrlong	#29, fp
17dd0     08 4E 05 F1 | 	add	fp, #8
17dd4     A7 12 02 FB | 	rdlong	arg01, fp
17dd8     10 4E 85 F1 | 	sub	fp, #16
17ddc     A7 12 62 FC | 	wrlong	arg01, fp
17de0     A7 12 02 F6 | 	mov	arg01, fp
17de4     48 2B BF FD | 	call	#_push
17de8     A7 F0 03 F6 | 	mov	ptra, fp
17dec     B2 00 A0 FD | 	call	#popregs_
17df0                 | _do_dpeek_ret
17df0     2D 00 64 FD | 	ret
17df4                 | 
17df4                 | ' 
17df4                 | ' 
17df4                 | ' sub do_lpeek
17df4                 | _do_lpeek
17df4     00 4A 05 F6 | 	mov	COUNT_, #0
17df8     A8 00 A0 FD | 	call	#pushregs_
17dfc     14 F0 07 F1 | 	add	ptra, #20
17e00     94 2A BF FD | 	call	#_pop
17e04     A7 FA 61 FC | 	wrlong	result1, fp
17e08     04 4E 05 F1 | 	add	fp, #4
17e0c     A7 FC 61 FC | 	wrlong	result2, fp
17e10     04 4E 05 F1 | 	add	fp, #4
17e14     A7 FE 61 FC | 	wrlong	result3, fp
17e18     08 4E 85 F1 | 	sub	fp, #8
17e1c     A7 12 02 F6 | 	mov	arg01, fp
17e20     10 B7 BF FD | 	call	#_converttoint
17e24     0C 4E 05 F1 | 	add	fp, #12
17e28     A7 FA 61 FC | 	wrlong	result1, fp
17e2c                 | ' t1=pop()
17e2c                 | ' a=converttoint(t1)
17e2c                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
17e2c     0C 4E 85 F1 | 	sub	fp, #12
17e30     00 04 00 FF 
17e34     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17e38     1C 00 90 3D |  if_ae	jmp	#LR__1950
17e3c     0C 4E 05 F1 | 	add	fp, #12
17e40     A7 12 02 FB | 	rdlong	arg01, fp
17e44     09 FB 01 FB | 	rdlong	result1, arg01
17e48     04 4E 05 F1 | 	add	fp, #4
17e4c     A7 FA 61 FC | 	wrlong	result1, fp
17e50     10 4E 85 F1 | 	sub	fp, #16
17e54     1C 00 90 FD | 	jmp	#LR__1951
17e58                 | LR__1950
17e58     0C 4E 05 F1 | 	add	fp, #12
17e5c     A7 12 02 FB | 	rdlong	arg01, fp
17e60     0C 4E 85 F1 | 	sub	fp, #12
17e64     50 2D B0 FD | 	call	#_pslpeek
17e68     10 4E 05 F1 | 	add	fp, #16
17e6c     A7 FA 61 FC | 	wrlong	result1, fp
17e70     10 4E 85 F1 | 	sub	fp, #16
17e74                 | LR__1951
17e74     08 4E 05 F1 | 	add	fp, #8
17e78     A7 3A 68 FC | 	wrlong	#29, fp
17e7c     08 4E 05 F1 | 	add	fp, #8
17e80     A7 12 02 FB | 	rdlong	arg01, fp
17e84     10 4E 85 F1 | 	sub	fp, #16
17e88     A7 12 62 FC | 	wrlong	arg01, fp
17e8c     A7 12 02 F6 | 	mov	arg01, fp
17e90     9C 2A BF FD | 	call	#_push
17e94     A7 F0 03 F6 | 	mov	ptra, fp
17e98     B2 00 A0 FD | 	call	#popregs_
17e9c                 | _do_lpeek_ret
17e9c     2D 00 64 FD | 	ret
17ea0                 | 
17ea0                 | ' 
17ea0                 | ' sub do_fre
17ea0                 | _do_fre
17ea0     01 4A 05 F6 | 	mov	COUNT_, #1
17ea4     A8 00 A0 FD | 	call	#pushregs_
17ea8     0C F0 07 F1 | 	add	ptra, #12
17eac     59 00 00 FF 
17eb0     B8 E5 05 F1 | 	add	objptr, ##46008
17eb4     F2 12 02 FB | 	rdlong	arg01, objptr
17eb8     16 00 00 FF 
17ebc     2C E5 85 F1 | 	sub	objptr, ##11564
17ec0     F2 1E 02 FB | 	rdlong	local01, objptr
17ec4     0F 13 82 F1 | 	sub	arg01, local01
17ec8     16 00 00 FF 
17ecc     D4 E5 05 F1 | 	add	objptr, ##11732
17ed0     F2 12 62 FC | 	wrlong	arg01, objptr
17ed4     08 4E 05 F1 | 	add	fp, #8
17ed8     A7 3A 68 FC | 	wrlong	#29, fp
17edc     08 4E 85 F1 | 	sub	fp, #8
17ee0     F2 1E 02 FB | 	rdlong	local01, objptr
17ee4     5A 00 00 FF 
17ee8     60 E4 85 F1 | 	sub	objptr, ##46176
17eec     A7 1E 62 FC | 	wrlong	local01, fp
17ef0     A7 12 02 F6 | 	mov	arg01, fp
17ef4     38 2A BF FD | 	call	#_push
17ef8     A7 F0 03 F6 | 	mov	ptra, fp
17efc     B2 00 A0 FD | 	call	#popregs_
17f00                 | _do_fre_ret
17f00     2D 00 64 FD | 	ret
17f04                 | 
17f04                 | ' 
17f04                 | ' sub do_adr
17f04                 | _do_adr
17f04                 | _do_adr_ret
17f04     2D 00 64 FD | 	ret
17f08                 | 
17f08                 | ' 
17f08                 | ' sub do_getnotevalue
17f08                 | _do_getnotevalue
17f08     01 4A 05 F6 | 	mov	COUNT_, #1
17f0c     A8 00 A0 FD | 	call	#pushregs_
17f10     1C F0 07 F1 | 	add	ptra, #28
17f14     80 29 BF FD | 	call	#_pop
17f18     FF 14 02 F6 | 	mov	arg02, result3
17f1c     10 4E 05 F1 | 	add	fp, #16
17f20     A7 FA 61 FC | 	wrlong	result1, fp
17f24     04 4E 05 F1 | 	add	fp, #4
17f28     A7 FC 61 FC | 	wrlong	result2, fp
17f2c     04 4E 05 F1 | 	add	fp, #4
17f30     A7 14 62 FC | 	wrlong	arg02, fp
17f34     08 4E 85 F1 | 	sub	fp, #8
17f38     A7 12 02 F6 | 	mov	arg01, fp
17f3c     10 4E 85 F1 | 	sub	fp, #16
17f40     F0 B5 BF FD | 	call	#_converttoint
17f44     FD 14 52 F6 | 	abs	arg02, result1 wc
17f48     0C 14 16 FD | 	qdiv	arg02, #12
17f4c     0C 4E 05 F1 | 	add	fp, #12
17f50     A7 FA 61 FC | 	wrlong	result1, fp
17f54     14 00 00 FF 
17f58     D8 E4 05 F1 | 	add	objptr, ##10456
17f5c     08 4E 85 F1 | 	sub	fp, #8
17f60     19 14 62 FD | 	getqy	arg02
17f64     0A 15 82 F6 | 	negc	arg02, arg02
17f68     02 14 66 F0 | 	shl	arg02, #2
17f6c     F2 14 02 F1 | 	add	arg02, objptr
17f70     0A 15 02 FB | 	rdlong	arg02, arg02
17f74     A7 14 62 FC | 	wrlong	arg02, fp
17f78     08 4E 05 F1 | 	add	fp, #8
17f7c     A7 14 02 FB | 	rdlong	arg02, fp
17f80     0A 15 52 F6 | 	abs	arg02, arg02 wc
17f84     0C 14 16 FD | 	qdiv	arg02, #12
17f88     0C 4E 85 F1 | 	sub	fp, #12
17f8c     14 00 00 FF 
17f90     D8 E4 85 F1 | 	sub	objptr, ##10456
17f94     18 14 62 FD | 	getqx	arg02
17f98     0A 13 82 F6 | 	negc	arg01, arg02
17f9c     09 13 52 F6 | 	abs	arg01, arg01 wc
17fa0     1F 1E C6 C9 |  if_b	decod	local01, #31
17fa4     00 1E 06 36 |  if_ae	mov	local01, #0
17fa8     64 95 B0 FD | 	call	#__system___float_fromuns
17fac     0F FB 61 F5 | 	xor	result1, local01
17fb0     08 4E 05 F1 | 	add	fp, #8
17fb4     A7 FA 61 FC | 	wrlong	result1, fp
17fb8     FD 14 02 F6 | 	mov	arg02, result1
17fbc     08 4E 85 F1 | 	sub	fp, #8
17fc0     1E 12 C6 F9 | 	decod	arg01, #30
17fc4     30 A8 B0 FD | 	call	#__system____builtin_powf
17fc8     FD 12 02 F6 | 	mov	arg01, result1
17fcc     04 4E 05 F1 | 	add	fp, #4
17fd0     A7 14 02 FB | 	rdlong	arg02, fp
17fd4     04 4E 85 F1 | 	sub	fp, #4
17fd8     38 99 B0 FD | 	call	#__system___float_mul
17fdc     A7 FA 61 FC | 	wrlong	result1, fp
17fe0     10 4E 05 F1 | 	add	fp, #16
17fe4     A7 FA 61 FC | 	wrlong	result1, fp
17fe8     08 4E 05 F1 | 	add	fp, #8
17fec     A7 3C 68 FC | 	wrlong	#30, fp
17ff0     08 4E 85 F1 | 	sub	fp, #8
17ff4     A7 12 02 F6 | 	mov	arg01, fp
17ff8     10 4E 85 F1 | 	sub	fp, #16
17ffc     30 29 BF FD | 	call	#_push
18000     A7 F0 03 F6 | 	mov	ptra, fp
18004     B2 00 A0 FD | 	call	#popregs_
18008                 | _do_getnotevalue_ret
18008     2D 00 64 FD | 	ret
1800c                 | 
1800c                 | ' 
1800c                 | ' 
1800c                 | ' sub do_waitms
1800c                 | _do_waitms
1800c     01 4A 05 F6 | 	mov	COUNT_, #1
18010     A8 00 A0 FD | 	call	#pushregs_
18014     18 F0 07 F1 | 	add	ptra, #24
18018     7C 28 BF FD | 	call	#_pop
1801c     A7 FA 61 FC | 	wrlong	result1, fp
18020     04 4E 05 F1 | 	add	fp, #4
18024     A7 FC 61 FC | 	wrlong	result2, fp
18028     04 4E 05 F1 | 	add	fp, #4
1802c     A7 FE 61 FC | 	wrlong	result3, fp
18030                 | ' 
18030                 | ' t1=pop() 'value
18030                 | ' 
18030                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
18030     08 4E 85 F1 | 	sub	fp, #8
18034     1C FE 0D F2 | 	cmp	result3, #28 wz
18038     08 4E 05 51 |  if_ne	add	fp, #8
1803c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
18040     08 4E 85 51 |  if_ne	sub	fp, #8
18044     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
18048     A7 12 02 AB |  if_e	rdlong	arg01, fp
1804c     0C 4E 05 A1 |  if_e	add	fp, #12
18050     A7 12 62 AC |  if_e	wrlong	arg01, fp
18054     0C 4E 85 A1 |  if_e	sub	fp, #12
18058     14 00 90 AD |  if_e	jmp	#LR__1960
1805c     A7 12 02 F6 | 	mov	arg01, fp
18060     D0 B4 BF FD | 	call	#_converttoint
18064     0C 4E 05 F1 | 	add	fp, #12
18068     A7 FA 61 FC | 	wrlong	result1, fp
1806c     0C 4E 85 F1 | 	sub	fp, #12
18070                 | LR__1960
18070                 | ' if t<0 then return
18070     0C 4E 05 F1 | 	add	fp, #12
18074     A7 12 02 FB | 	rdlong	arg01, fp
18078     0C 4E 85 F1 | 	sub	fp, #12
1807c     00 12 56 F2 | 	cmps	arg01, #0 wc
18080     B8 00 90 CD |  if_b	jmp	#LR__1965
18084                 | ' if t < 5000 then 
18084     0C 4E 05 F1 | 	add	fp, #12
18088     A7 12 02 FB | 	rdlong	arg01, fp
1808c     0C 4E 85 F1 | 	sub	fp, #12
18090     09 00 00 FF 
18094     88 13 56 F2 | 	cmps	arg01, ##5000 wc
18098     14 00 90 3D |  if_ae	jmp	#LR__1961
1809c     0C 4E 05 F1 | 	add	fp, #12
180a0     A7 12 02 FB | 	rdlong	arg01, fp
180a4     0C 4E 85 F1 | 	sub	fp, #12
180a8     14 70 B0 FD | 	call	#__system___waitms
180ac     8C 00 90 FD | 	jmp	#LR__1964
180b0                 | LR__1961
180b0     10 4E 05 F1 | 	add	fp, #16
180b4     A7 02 68 FC | 	wrlong	#1, fp
180b8     04 4E 85 F1 | 	sub	fp, #4
180bc     A7 12 02 FB | 	rdlong	arg01, fp
180c0     09 13 52 F6 | 	abs	arg01, arg01 wc
180c4     09 00 00 FF 
180c8     88 13 16 FD | 	qdiv	arg01, ##5000
180cc                 | '   for i=1 to t/5000
180cc     0C 4E 85 F1 | 	sub	fp, #12
180d0     18 1E 62 FD | 	getqx	local01
180d4     0F 1F 82 F6 | 	negc	local01, local01
180d8     01 1E 06 F1 | 	add	local01, #1
180dc                 | LR__1962
180dc     10 4E 05 F1 | 	add	fp, #16
180e0     A7 12 02 FB | 	rdlong	arg01, fp
180e4     10 4E 85 F1 | 	sub	fp, #16
180e8     0F 13 52 F2 | 	cmps	arg01, local01 wc
180ec     28 00 90 3D |  if_ae	jmp	#LR__1963
180f0     0C 4E 05 F1 | 	add	fp, #12
180f4     A7 12 02 FB | 	rdlong	arg01, fp
180f8     0C 4E 85 F1 | 	sub	fp, #12
180fc     C0 6F B0 FD | 	call	#__system___waitms
18100     10 4E 05 F1 | 	add	fp, #16
18104     A7 12 02 FB | 	rdlong	arg01, fp
18108     01 12 06 F1 | 	add	arg01, #1
1810c     A7 12 62 FC | 	wrlong	arg01, fp
18110     10 4E 85 F1 | 	sub	fp, #16
18114     C4 FF 9F FD | 	jmp	#LR__1962
18118                 | LR__1963
18118     0C 4E 05 F1 | 	add	fp, #12
1811c     A7 1E 02 FB | 	rdlong	local01, fp
18120     0F 1F 52 F6 | 	abs	local01, local01 wc
18124     09 00 00 FF 
18128     88 1F 16 FD | 	qdiv	local01, ##5000
1812c     0C 4E 85 F1 | 	sub	fp, #12
18130     19 1E 62 FD | 	getqy	local01
18134     0F 13 82 F6 | 	negc	arg01, local01
18138     84 6F B0 FD | 	call	#__system___waitms
1813c                 | LR__1964
1813c                 | LR__1965
1813c     A7 F0 03 F6 | 	mov	ptra, fp
18140     B2 00 A0 FD | 	call	#popregs_
18144                 | _do_waitms_ret
18144     2D 00 64 FD | 	ret
18148                 | 
18148                 | ' 
18148                 | ' sub do_waitvbl
18148                 | _do_waitvbl
18148     01 12 06 F6 | 	mov	arg01, #1
1814c     64 55 B0 FD | 	call	#_hg010b_spin2_waitvbl
18150                 | _do_waitvbl_ret
18150     2D 00 64 FD | 	ret
18154                 | 
18154                 | ' 
18154                 | ' sub do_waitclock
18154                 | _do_waitclock
18154     59 00 00 FF 
18158     B4 E5 05 F1 | 	add	objptr, ##46004
1815c     F2 00 02 FB | 	rdlong	_var01, objptr
18160                 | ' c=hkcnt
18160                 | ' do: loop until hkcnt<>c
18160                 | LR__1970
18160     F2 02 02 FB | 	rdlong	_var02, objptr
18164     00 03 0A F2 | 	cmp	_var02, _var01 wz
18168     F4 FF 9F AD |  if_e	jmp	#LR__1970
1816c     59 00 00 FF 
18170     B4 E5 85 F1 | 	sub	objptr, ##46004
18174                 | _do_waitclock_ret
18174     2D 00 64 FD | 	ret
18178                 | 
18178                 | ' 
18178                 | ' sub do_dir
18178                 | _do_dir
18178     05 4A 05 F6 | 	mov	COUNT_, #5
1817c     A8 00 A0 FD | 	call	#pushregs_
18180     75 01 00 FF 
18184     1B 13 06 F6 | 	mov	arg01, ##@LR__5197
18188     CC 72 B0 FD | 	call	#__system___chdir
1818c                 | ' chdir("/sd/bas")       ' set working directory
1818c                 | ' print "Working directory: "; currentdir$ 
1818c     00 12 06 F6 | 	mov	arg01, #0
18190     D0 C5 B0 FD | 	call	#__system___getiolock_0485
18194     FD 12 02 F6 | 	mov	arg01, result1
18198     30 6C B0 FD | 	call	#__system___lockmem
1819c     75 01 00 FF 
181a0     23 15 06 F6 | 	mov	arg02, ##@LR__5198
181a4     00 12 06 F6 | 	mov	arg01, #0
181a8     00 16 06 F6 | 	mov	arg03, #0
181ac     10 79 B0 FD | 	call	#__system___basic_print_string
181b0     52 00 00 FF 
181b4     C8 E4 05 F1 | 	add	objptr, ##42184
181b8     F2 14 02 FB | 	rdlong	arg02, objptr
181bc     52 00 00 FF 
181c0     C8 E4 85 F1 | 	sub	objptr, ##42184
181c4     00 12 06 F6 | 	mov	arg01, #0
181c8     00 16 06 F6 | 	mov	arg03, #0
181cc     F0 78 B0 FD | 	call	#__system___basic_print_string
181d0     00 12 06 F6 | 	mov	arg01, #0
181d4     0A 14 06 F6 | 	mov	arg02, #10
181d8     00 16 06 F6 | 	mov	arg03, #0
181dc     88 78 B0 FD | 	call	#__system___basic_print_char
181e0     00 12 06 F6 | 	mov	arg01, #0
181e4     7C C5 B0 FD | 	call	#__system___getiolock_0485
181e8     FD 00 68 FC | 	wrlong	#0, result1
181ec     00 1E 06 F6 | 	mov	local01, #0
181f0     75 01 00 FF 
181f4     37 13 06 F6 | 	mov	arg01, ##@LR__5199
181f8     10 14 06 F6 | 	mov	arg02, #16
181fc     9C C6 B0 FD | 	call	#__system___basic_dir
18200     FD 20 02 F6 | 	mov	local02, result1
18204                 | ' px=0:
18204                 | ' filename=dir$("*", fbDirectory)
18204                 | ' while filename <> "" and filename <> nil
18204                 | LR__1980
18204     00 22 06 F6 | 	mov	local03, #0
18208     75 01 00 FF 
1820c     39 15 06 F6 | 	mov	arg02, ##@LR__5200
18210     10 13 02 F6 | 	mov	arg01, local02
18214     DC 6B B0 FD | 	call	#__system___string_cmp
18218     00 FA 0D F2 | 	cmp	result1, #0 wz
1821c     00 22 26 56 |  if_ne	not	local03, #0
18220     00 24 06 F6 | 	mov	local04, #0
18224     10 13 02 F6 | 	mov	arg01, local02
18228     00 14 06 F6 | 	mov	arg02, #0
1822c     C4 6B B0 FD | 	call	#__system___string_cmp
18230     00 FA 0D F2 | 	cmp	result1, #0 wz
18234     00 24 26 56 |  if_ne	not	local04, #0
18238     12 23 CA F7 | 	test	local03, local04 wz
1823c     9C 00 90 AD |  if_e	jmp	#LR__1982
18240                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
18240     00 12 06 F6 | 	mov	arg01, #0
18244     1C C5 B0 FD | 	call	#__system___getiolock_0485
18248     FD 12 02 F6 | 	mov	arg01, result1
1824c     7C 6B B0 FD | 	call	#__system___lockmem
18250     75 01 00 FF 
18254     3A 15 06 F6 | 	mov	arg02, ##@LR__5201
18258     00 12 06 F6 | 	mov	arg01, #0
1825c     00 16 06 F6 | 	mov	arg03, #0
18260     5C 78 B0 FD | 	call	#__system___basic_print_string
18264     00 26 06 F6 | 	mov	local05, #0
18268     00 12 06 F6 | 	mov	arg01, #0
1826c     10 15 02 F6 | 	mov	arg02, local02
18270     00 16 06 F6 | 	mov	arg03, #0
18274     48 78 B0 FD | 	call	#__system___basic_print_string
18278     00 12 06 F6 | 	mov	arg01, #0
1827c     E4 C4 B0 FD | 	call	#__system___getiolock_0485
18280     FD 00 68 FC | 	wrlong	#0, result1
18284     40 1E 06 F1 | 	add	local01, #64
18288     0F 13 02 F6 | 	mov	arg01, local01
1828c     C0 53 B0 FD | 	call	#_hg010b_spin2_setcursorx
18290     00 1F 56 F2 | 	cmps	local01, #256 wc
18294     30 00 90 CD |  if_b	jmp	#LR__1981
18298     00 1E 06 F6 | 	mov	local01, #0
1829c     00 12 06 F6 | 	mov	arg01, #0
182a0     C0 C4 B0 FD | 	call	#__system___getiolock_0485
182a4     FD 12 02 F6 | 	mov	arg01, result1
182a8     20 6B B0 FD | 	call	#__system___lockmem
182ac     00 12 06 F6 | 	mov	arg01, #0
182b0     0A 14 06 F6 | 	mov	arg02, #10
182b4     00 16 06 F6 | 	mov	arg03, #0
182b8     AC 77 B0 FD | 	call	#__system___basic_print_char
182bc     00 12 06 F6 | 	mov	arg01, #0
182c0     A0 C4 B0 FD | 	call	#__system___getiolock_0485
182c4     FD 00 68 FC | 	wrlong	#0, result1
182c8                 | LR__1981
182c8     00 12 06 F6 | 	mov	arg01, #0
182cc     00 14 06 F6 | 	mov	arg02, #0
182d0     C8 C5 B0 FD | 	call	#__system___basic_dir
182d4     FD 20 02 F6 | 	mov	local02, result1
182d8     28 FF 9F FD | 	jmp	#LR__1980
182dc                 | LR__1982
182dc                 | ' print
182dc     00 12 06 F6 | 	mov	arg01, #0
182e0     80 C4 B0 FD | 	call	#__system___getiolock_0485
182e4     FD 12 02 F6 | 	mov	arg01, result1
182e8     E0 6A B0 FD | 	call	#__system___lockmem
182ec     00 12 06 F6 | 	mov	arg01, #0
182f0     0A 14 06 F6 | 	mov	arg02, #10
182f4     00 16 06 F6 | 	mov	arg03, #0
182f8     6C 77 B0 FD | 	call	#__system___basic_print_char
182fc     00 12 06 F6 | 	mov	arg01, #0
18300     60 C4 B0 FD | 	call	#__system___getiolock_0485
18304     FD 00 68 FC | 	wrlong	#0, result1
18308     00 1E 06 F6 | 	mov	local01, #0
1830c                 | ' return cursor_y
1830c     75 01 00 FF 
18310     41 13 06 F6 | 	mov	arg01, ##@LR__5202
18314     21 14 06 F6 | 	mov	arg02, #33
18318     80 C5 B0 FD | 	call	#__system___basic_dir
1831c     FD 20 02 F6 | 	mov	local02, result1
18320                 | ' px=0: py=v.getcursory()
18320                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
18320                 | ' do while filename <> "" and filename <> nil
18320                 | LR__1983
18320     00 22 06 F6 | 	mov	local03, #0
18324     75 01 00 FF 
18328     43 15 06 F6 | 	mov	arg02, ##@LR__5203
1832c     10 13 02 F6 | 	mov	arg01, local02
18330     C0 6A B0 FD | 	call	#__system___string_cmp
18334     00 FA 0D F2 | 	cmp	result1, #0 wz
18338     00 22 26 56 |  if_ne	not	local03, #0
1833c     00 24 06 F6 | 	mov	local04, #0
18340     10 13 02 F6 | 	mov	arg01, local02
18344     00 14 06 F6 | 	mov	arg02, #0
18348     A8 6A B0 FD | 	call	#__system___string_cmp
1834c     00 FA 0D F2 | 	cmp	result1, #0 wz
18350     00 24 26 56 |  if_ne	not	local04, #0
18354     12 23 CA F7 | 	test	local03, local04 wz
18358     80 01 90 AD |  if_e	jmp	#LR__1988
1835c                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1835c     00 12 06 F6 | 	mov	arg01, #0
18360     00 C4 B0 FD | 	call	#__system___getiolock_0485
18364     FD 12 02 F6 | 	mov	arg01, result1
18368     60 6A B0 FD | 	call	#__system___lockmem
1836c     00 12 06 F6 | 	mov	arg01, #0
18370     10 15 02 F6 | 	mov	arg02, local02
18374     00 16 06 F6 | 	mov	arg03, #0
18378     44 77 B0 FD | 	call	#__system___basic_print_string
1837c     00 12 06 F6 | 	mov	arg01, #0
18380     E0 C3 B0 FD | 	call	#__system___getiolock_0485
18384     FD 00 68 FC | 	wrlong	#0, result1
18388     40 1E 06 F1 | 	add	local01, #64
1838c     0F 13 02 F6 | 	mov	arg01, local01
18390     BC 52 B0 FD | 	call	#_hg010b_spin2_setcursorx
18394     00 1F 56 F2 | 	cmps	local01, #256 wc
18398     30 00 90 CD |  if_b	jmp	#LR__1984
1839c     00 1E 06 F6 | 	mov	local01, #0
183a0     00 12 06 F6 | 	mov	arg01, #0
183a4     BC C3 B0 FD | 	call	#__system___getiolock_0485
183a8     FD 12 02 F6 | 	mov	arg01, result1
183ac     1C 6A B0 FD | 	call	#__system___lockmem
183b0     00 12 06 F6 | 	mov	arg01, #0
183b4     0A 14 06 F6 | 	mov	arg02, #10
183b8     00 16 06 F6 | 	mov	arg03, #0
183bc     A8 76 B0 FD | 	call	#__system___basic_print_char
183c0     00 12 06 F6 | 	mov	arg01, #0
183c4     9C C3 B0 FD | 	call	#__system___getiolock_0485
183c8     FD 00 68 FC | 	wrlong	#0, result1
183cc                 | LR__1984
183cc     00 12 06 F6 | 	mov	arg01, #0
183d0     00 14 06 F6 | 	mov	arg02, #0
183d4     C4 C4 B0 FD | 	call	#__system___basic_dir
183d8     FD 20 02 F6 | 	mov	local02, result1
183dc                 | '   filename = dir$()      ' continue scan
183dc                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
183dc                 | ' return cursor_y
183dc     3E E4 05 F1 | 	add	objptr, #62
183e0     F2 FA C1 FA | 	rdbyte	result1, objptr
183e4     3E E4 85 F1 | 	sub	objptr, #62
183e8     22 FA 0D F2 | 	cmp	result1, #34 wz
183ec     30 FF 9F 5D |  if_ne	jmp	#LR__1983
183f0                 | '     print "-----more, press any key";
183f0     00 12 06 F6 | 	mov	arg01, #0
183f4     6C C3 B0 FD | 	call	#__system___getiolock_0485
183f8     FD 12 02 F6 | 	mov	arg01, result1
183fc     CC 69 B0 FD | 	call	#__system___lockmem
18400     75 01 00 FF 
18404     44 15 06 F6 | 	mov	arg02, ##@LR__5204
18408     00 12 06 F6 | 	mov	arg01, #0
1840c     00 16 06 F6 | 	mov	arg03, #0
18410     AC 76 B0 FD | 	call	#__system___basic_print_string
18414     00 12 06 F6 | 	mov	arg01, #0
18418     48 C3 B0 FD | 	call	#__system___getiolock_0485
1841c     FD 00 68 FC | 	wrlong	#0, result1
18420                 | '     do 
18420                 | LR__1985
18420     94 61 B0 FD | 	call	#_usbnew_spin2_get_key
18424     00 FA 0D F2 | 	cmp	result1, #0 wz
18428     F4 FF 9F 5D |  if_ne	jmp	#LR__1985
1842c                 | '     do
1842c                 | LR__1986
1842c     88 61 B0 FD | 	call	#_usbnew_spin2_get_key
18430     00 FA 0D F2 | 	cmp	result1, #0 wz
18434     F4 FF 9F AD |  if_e	jmp	#LR__1986
18438                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
18438     58 00 00 FF 
1843c     20 E5 05 F1 | 	add	objptr, ##45344
18440     F2 22 02 FB | 	rdlong	local03, objptr
18444     58 00 00 FF 
18448     20 E5 85 F1 | 	sub	objptr, ##45344
1844c     01 22 0E F2 | 	cmp	local03, #1 wz
18450     3C 00 90 5D |  if_ne	jmp	#LR__1987
18454     59 00 00 FF 
18458     C4 E5 05 F1 | 	add	objptr, ##46020
1845c     F2 14 02 FB | 	rdlong	arg02, objptr
18460     04 E4 85 F1 | 	sub	objptr, #4
18464     F2 1A 02 FB | 	rdlong	arg05, objptr
18468     07 12 06 F6 | 	mov	arg01, #7
1846c     56 00 00 FF 
18470     44 16 06 F6 | 	mov	arg03, ##44100
18474     0C 18 C6 F9 | 	decod	arg04, #12
18478     01 1C 66 F6 | 	neg	arg06, #1
1847c     4E 00 00 FF 
18480     F4 E4 85 F1 | 	sub	objptr, ##40180
18484     D4 64 B0 FD | 	call	#_audio096_spin2_play
18488     0B 00 00 FF 
1848c     CC E4 85 F1 | 	sub	objptr, ##5836
18490                 | LR__1987
18490     00 12 06 F6 | 	mov	arg01, #0
18494     23 14 06 F6 | 	mov	arg02, #35
18498     78 51 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1849c                 | '     position 0,35: print "                             ";: position 4,35  
1849c     00 12 06 F6 | 	mov	arg01, #0
184a0     C0 C2 B0 FD | 	call	#__system___getiolock_0485
184a4     FD 12 02 F6 | 	mov	arg01, result1
184a8     20 69 B0 FD | 	call	#__system___lockmem
184ac     75 01 00 FF 
184b0     5D 15 06 F6 | 	mov	arg02, ##@LR__5205
184b4     00 12 06 F6 | 	mov	arg01, #0
184b8     00 16 06 F6 | 	mov	arg03, #0
184bc     00 76 B0 FD | 	call	#__system___basic_print_string
184c0     00 12 06 F6 | 	mov	arg01, #0
184c4     9C C2 B0 FD | 	call	#__system___getiolock_0485
184c8     FD 00 68 FC | 	wrlong	#0, result1
184cc     04 12 06 F6 | 	mov	arg01, #4
184d0     23 14 06 F6 | 	mov	arg02, #35
184d4     3C 51 B0 FD | 	call	#_hg010b_spin2_setcursorpos
184d8     44 FE 9F FD | 	jmp	#LR__1983
184dc                 | LR__1988
184dc     A7 F0 03 F6 | 	mov	ptra, fp
184e0     B2 00 A0 FD | 	call	#popregs_
184e4                 | _do_dir_ret
184e4     2D 00 64 FD | 	ret
184e8                 | 
184e8                 | ' 
184e8                 | ' sub do_if
184e8                 | _do_if
184e8     05 4A 05 F6 | 	mov	COUNT_, #5
184ec     A8 00 A0 FD | 	call	#pushregs_
184f0     A4 23 BF FD | 	call	#_pop
184f4     FD 1E 0A F6 | 	mov	local01, result1 wz
184f8     FE 20 02 F6 | 	mov	local02, result2
184fc     FF 22 02 F6 | 	mov	local03, result3
18500                 | ' t1=pop()
18500                 | ' ' if uresult=0, jump over else
18500                 | ' if t1.result.uresult = 0 then 
18500     BC 00 90 5D |  if_ne	jmp	#LR__1992
18504                 | '   for i=lineptr_e to lineptr-1
18504     4A 00 00 FF 
18508     B0 E4 05 F1 | 	add	objptr, ##38064
1850c     F2 24 02 FB | 	rdlong	local04, objptr
18510     04 E4 85 F1 | 	sub	objptr, #4
18514     F2 26 02 FB | 	rdlong	local05, objptr
18518     4A 00 00 FF 
1851c     AC E4 85 F1 | 	sub	objptr, ##38060
18520                 | LR__1990
18520     13 25 52 F2 | 	cmps	local04, local05 wc
18524     78 00 90 3D |  if_ae	jmp	#LR__1991
18528     12 FF 01 F6 | 	mov	result3, local04
1852c     01 FE 65 F0 | 	shl	result3, #1
18530     12 FF 01 F1 | 	add	result3, local04
18534     02 FE 65 F0 | 	shl	result3, #2
18538     47 00 00 FF 
1853c     AC E4 05 F1 | 	add	objptr, ##36524
18540     F2 FE 01 F1 | 	add	result3, objptr
18544     FF 1E 02 FB | 	rdlong	local01, result3
18548     04 FE 05 F1 | 	add	result3, #4
1854c     FF FC 01 FB | 	rdlong	result2, result3
18550     12 FF 01 F6 | 	mov	result3, local04
18554     01 FE 65 F0 | 	shl	result3, #1
18558     12 FF 01 F1 | 	add	result3, local04
1855c     02 FE 65 F0 | 	shl	result3, #2
18560     F2 FE 01 F1 | 	add	result3, objptr
18564     08 FE 05 F1 | 	add	result3, #8
18568     FF FE 01 FB | 	rdlong	result3, result3
1856c     FE 20 02 F6 | 	mov	local02, result2
18570     FF 22 02 F6 | 	mov	local03, result3
18574                 | '     t1=compiledline(i)
18574                 | '     if t1.result_type=token_else then lineptr_e=i : return
18574     5A 22 0E F2 | 	cmp	local03, #90 wz
18578     47 00 00 FF 
1857c     AC E4 85 F1 | 	sub	objptr, ##36524
18580     4A 00 00 AF 
18584     B0 E4 05 A1 |  if_e	add	objptr, ##38064
18588     F2 24 62 AC |  if_e	wrlong	local04, objptr
1858c     4A 00 00 AF 
18590     B0 E4 85 A1 |  if_e	sub	objptr, ##38064
18594     28 00 90 AD |  if_e	jmp	#LR__1993
18598     01 24 06 F1 | 	add	local04, #1
1859c     80 FF 9F FD | 	jmp	#LR__1990
185a0                 | LR__1991
185a0     4A 00 00 FF 
185a4     AC E4 05 F1 | 	add	objptr, ##38060
185a8     F2 26 02 FB | 	rdlong	local05, objptr
185ac     01 26 86 F1 | 	sub	local05, #1
185b0     04 E4 05 F1 | 	add	objptr, #4
185b4     F2 26 62 FC | 	wrlong	local05, objptr
185b8     4A 00 00 FF 
185bc     B0 E4 85 F1 | 	sub	objptr, ##38064
185c0                 | LR__1992
185c0                 | LR__1993
185c0     A7 F0 03 F6 | 	mov	ptra, fp
185c4     B2 00 A0 FD | 	call	#popregs_
185c8                 | _do_if_ret
185c8     2D 00 64 FD | 	ret
185cc                 | 
185cc                 | ' 
185cc                 | ' sub do_else
185cc                 | _do_else
185cc     4A 00 00 FF 
185d0     AC E4 05 F1 | 	add	objptr, ##38060
185d4     F2 00 02 FB | 	rdlong	_var01, objptr
185d8     01 00 86 F1 | 	sub	_var01, #1
185dc     04 E4 05 F1 | 	add	objptr, #4
185e0     F2 00 62 FC | 	wrlong	_var01, objptr
185e4     4A 00 00 FF 
185e8     B0 E4 85 F1 | 	sub	objptr, ##38064
185ec                 | _do_else_ret
185ec     2D 00 64 FD | 	ret
185f0                 | 
185f0                 | ' 
185f0                 | ' sub do_rad
185f0                 | _do_rad
185f0     59 00 00 FF 
185f4     C8 E5 05 F1 | 	add	objptr, ##46024
185f8     00 C0 9F FF 
185fc     F2 00 68 FC | 	wrlong	##1065353216, objptr
18600     04 E4 05 F1 | 	add	objptr, #4
18604     00 C0 9F FF 
18608     F2 00 68 FC | 	wrlong	##1065353216, objptr
1860c     59 00 00 FF 
18610     CC E5 85 F1 | 	sub	objptr, ##46028
18614                 | _do_rad_ret
18614     2D 00 64 FD | 	ret
18618                 | 
18618                 | ' 
18618                 | ' sub do_deg
18618                 | _do_deg
18618     59 00 00 FF 
1861c     C8 E5 05 F1 | 	add	objptr, ##46024
18620     7D 47 9E FF 
18624     F2 6A 68 FC | 	wrlong	##1016003125, objptr
18628     04 E4 05 F1 | 	add	objptr, #4
1862c     97 32 A1 FF 
18630     F2 C2 69 FC | 	wrlong	##1113927393, objptr
18634     59 00 00 FF 
18638     CC E5 85 F1 | 	sub	objptr, ##46028
1863c                 | _do_deg_ret
1863c     2D 00 64 FD | 	ret
18640                 | 
18640                 | ' 
18640                 | ' sub do_int
18640                 | _do_int
18640     00 4A 05 F6 | 	mov	COUNT_, #0
18644     A8 00 A0 FD | 	call	#pushregs_
18648     0C F0 07 F1 | 	add	ptra, #12
1864c     48 22 BF FD | 	call	#_pop
18650     A7 FA 61 FC | 	wrlong	result1, fp
18654     04 4E 05 F1 | 	add	fp, #4
18658     A7 FC 61 FC | 	wrlong	result2, fp
1865c     04 4E 05 F1 | 	add	fp, #4
18660     A7 FE 61 FC | 	wrlong	result3, fp
18664     08 4E 85 F1 | 	sub	fp, #8
18668     A7 12 02 F6 | 	mov	arg01, fp
1866c     C4 AE BF FD | 	call	#_converttoint
18670     A7 FA 61 FC | 	wrlong	result1, fp
18674     08 4E 05 F1 | 	add	fp, #8
18678     A7 38 68 FC | 	wrlong	#28, fp
1867c     08 4E 85 F1 | 	sub	fp, #8
18680     A7 12 02 F6 | 	mov	arg01, fp
18684     A8 22 BF FD | 	call	#_push
18688     A7 F0 03 F6 | 	mov	ptra, fp
1868c     B2 00 A0 FD | 	call	#popregs_
18690                 | _do_int_ret
18690     2D 00 64 FD | 	ret
18694                 | 
18694                 | ' 
18694                 | ' sub do_nothing
18694                 | _do_nothing
18694                 | _do_nothing_ret
18694     2D 00 64 FD | 	ret
18698                 | 
18698                 | ' 
18698                 | ' sub do_brun
18698                 | _do_brun
18698     08 4A 05 F6 | 	mov	COUNT_, #8
1869c     A8 00 A0 FD | 	call	#pushregs_
186a0     F4 21 BF FD | 	call	#_pop
186a4     FE 1A 02 F6 | 	mov	arg05, result2
186a8     FF 18 02 F6 | 	mov	arg04, result3
186ac     FD 1E 02 F6 | 	mov	local01, result1
186b0     0D 21 02 F6 | 	mov	local02, arg05
186b4     0C 23 02 F6 | 	mov	local03, arg04
186b8                 | ' 
186b8                 | ' t1=pop() 
186b8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
186b8     2B 22 0E F2 | 	cmp	local03, #43 wz
186bc     10 00 90 5D |  if_ne	jmp	#LR__2000
186c0     0F 13 02 F6 | 	mov	arg01, local01
186c4     48 66 BF FD | 	call	#_convertstring
186c8     FD 1E 02 F6 | 	mov	local01, result1
186cc     1F 22 06 F6 | 	mov	local03, #31
186d0                 | LR__2000
186d0                 | ' if t1.result_type=result_string then
186d0     1F 22 0E F2 | 	cmp	local03, #31 wz
186d4     EC 01 90 5D |  if_ne	jmp	#LR__2004
186d8     0F 25 02 F6 | 	mov	local04, local01
186dc                 | '   filename=t1.result.sresult
186dc                 | '   if left$(filename,1)="/" then 
186dc     12 13 02 F6 | 	mov	arg01, local04
186e0     01 14 06 F6 | 	mov	arg02, #1
186e4     F4 86 B0 FD | 	call	#__system__Left_S
186e8     FD 12 02 F6 | 	mov	arg01, result1
186ec     75 01 00 FF 
186f0     7B 15 06 F6 | 	mov	arg02, ##@LR__5206
186f4     FC 66 B0 FD | 	call	#__system___string_cmp
186f8     00 FA 0D F2 | 	cmp	result1, #0 wz
186fc     12 27 02 A6 |  if_e	mov	local05, local04
18700     14 00 90 AD |  if_e	jmp	#LR__2001
18704     75 01 00 FF 
18708     7D 13 06 F6 | 	mov	arg01, ##@LR__5207
1870c     12 15 02 F6 | 	mov	arg02, local04
18710     14 67 B0 FD | 	call	#__system___string_concat
18714     FD 26 02 F6 | 	mov	local05, result1
18718                 | LR__2001
18718                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
18718                 | '   open fullfilename for input as #9
18718     09 12 06 F6 | 	mov	arg01, #9
1871c     13 15 02 F6 | 	mov	arg02, local05
18720     00 16 06 F6 | 	mov	arg03, #0
18724     A8 72 B0 FD | 	call	#__system___basic_open_string
18728     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1872c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
18730     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
18734     FD 28 0A F6 | 	mov	local06, result1 wz
18738                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
18738     8C 00 90 AD |  if_e	jmp	#LR__2002
1873c     00 12 06 F6 | 	mov	arg01, #0
18740     20 C0 B0 FD | 	call	#__system___getiolock_0485
18744     FD 12 02 F6 | 	mov	arg01, result1
18748     80 66 B0 FD | 	call	#__system___lockmem
1874c     75 01 00 FF 
18750     86 15 06 F6 | 	mov	arg02, ##@LR__5208
18754     00 12 06 F6 | 	mov	arg01, #0
18758     00 16 06 F6 | 	mov	arg03, #0
1875c     60 73 B0 FD | 	call	#__system___basic_print_string
18760     00 12 06 F6 | 	mov	arg01, #0
18764     14 15 02 F6 | 	mov	arg02, local06
18768     00 16 06 F6 | 	mov	arg03, #0
1876c     0A 18 06 F6 | 	mov	arg04, #10
18770     90 73 B0 FD | 	call	#__system___basic_print_integer
18774     75 01 00 FF 
18778     94 15 06 F6 | 	mov	arg02, ##@LR__5209
1877c     00 12 06 F6 | 	mov	arg01, #0
18780     00 16 06 F6 | 	mov	arg03, #0
18784     38 73 B0 FD | 	call	#__system___basic_print_string
18788     14 13 02 F6 | 	mov	arg01, local06
1878c     98 8C B0 FD | 	call	#__system___strerror
18790     FD 14 02 F6 | 	mov	arg02, result1
18794     00 12 06 F6 | 	mov	arg01, #0
18798     00 16 06 F6 | 	mov	arg03, #0
1879c     20 73 B0 FD | 	call	#__system___basic_print_string
187a0     00 12 06 F6 | 	mov	arg01, #0
187a4     0A 14 06 F6 | 	mov	arg02, #10
187a8     00 16 06 F6 | 	mov	arg03, #0
187ac     B8 72 B0 FD | 	call	#__system___basic_print_char
187b0     00 12 06 F6 | 	mov	arg01, #0
187b4     AC BF B0 FD | 	call	#__system___getiolock_0485
187b8     FD 00 68 FC | 	wrlong	#0, result1
187bc     09 12 06 F6 | 	mov	arg01, #9
187c0     D0 B5 B0 FD | 	call	#__system__close
187c4     FC 00 90 FD | 	jmp	#LR__2005
187c8                 | LR__2002
187c8     01 2A 06 F6 | 	mov	local07, #1
187cc     00 2C 06 F6 | 	mov	local08, #0
187d0                 | '   do
187d0                 | LR__2003
187d0                 | '     get #9,pos,block(0),1024,r : pos+=r	
187d0     56 00 00 FF 
187d4     E8 E4 05 F1 | 	add	objptr, ##44264
187d8     F2 16 02 F6 | 	mov	arg03, objptr
187dc     56 00 00 FF 
187e0     E8 E4 85 F1 | 	sub	objptr, ##44264
187e4     09 12 06 F6 | 	mov	arg01, #9
187e8     15 15 02 F6 | 	mov	arg02, local07
187ec     0A 18 C6 F9 | 	decod	arg04, #10
187f0     01 1A 06 F6 | 	mov	arg05, #1
187f4     D8 73 B0 FD | 	call	#__system___basic_get
187f8     FD 28 02 F6 | 	mov	local06, result1
187fc     FD 2A 02 F1 | 	add	local07, result1
18800     56 00 00 FF 
18804     E8 E4 05 F1 | 	add	objptr, ##44264
18808     F2 12 02 F6 | 	mov	arg01, objptr
1880c     16 15 02 F6 | 	mov	arg02, local08
18810     0A 16 C6 F9 | 	decod	arg03, #10
18814     4B 00 00 FF 
18818     1C E4 85 F1 | 	sub	objptr, ##38428
1881c     08 5A B0 FD | 	call	#_psram_spin2_write
18820     0B 00 00 FF 
18824     CC E4 85 F1 | 	sub	objptr, ##5836
18828     14 2D 02 F1 | 	add	local08, local06
1882c     02 00 00 FF 
18830     00 28 0E F2 | 	cmp	local06, ##1024 wz
18834     E0 03 00 AF 
18838     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1883c     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2003
18840     37 00 00 FF 
18844     2C E4 05 F1 | 	add	objptr, ##28204
18848     F2 12 02 FB | 	rdlong	arg01, objptr
1884c     03 12 62 FD | 	cogstop	arg01
18850     04 E4 05 F1 | 	add	objptr, #4
18854     F2 12 02 FB | 	rdlong	arg01, objptr
18858     03 12 62 FD | 	cogstop	arg01
1885c     04 E4 05 F1 | 	add	objptr, #4
18860     F2 12 02 FB | 	rdlong	arg01, objptr
18864     03 12 62 FD | 	cogstop	arg01
18868     21 00 00 FF 
1886c     F0 E4 05 F1 | 	add	objptr, ##17136
18870     F2 12 02 FB | 	rdlong	arg01, objptr
18874     03 12 62 FD | 	cogstop	arg01
18878     18 00 00 FF 
1887c     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
18880     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18884     18 00 00 FF 
18888     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1888c     21 00 00 FF 
18890     E8 E4 85 F1 | 	sub	objptr, ##17128
18894     1E 2C 06 F6 | 	mov	local08, #30
18898     28 E4 61 FD | 	setq	objptr
1889c     0A 2D F2 FC | 	coginit	local08, arg02 wc
188a0     01 2C 66 C6 |  if_b	neg	local08, #1
188a4     23 00 00 FF 
188a8     2C E4 05 F1 | 	add	objptr, ##17964
188ac     F2 2C 62 FC | 	wrlong	local08, objptr
188b0     5A 00 00 FF 
188b4     68 E4 85 F1 | 	sub	objptr, ##46184
188b8     00 12 06 F6 | 	mov	arg01, #0
188bc     01 12 62 FD | 	cogid	arg01
188c0     03 12 62 FD | 	cogstop	arg01
188c4                 | LR__2004
188c4                 | LR__2005
188c4     A7 F0 03 F6 | 	mov	ptra, fp
188c8     B2 00 A0 FD | 	call	#popregs_
188cc                 | _do_brun_ret
188cc     2D 00 64 FD | 	ret
188d0                 | 
188d0                 | ' 
188d0                 | ' 
188d0                 | ' sub do_mouse
188d0                 | _do_mouse
188d0     C4 1F BF FD | 	call	#_pop
188d4     00 FA 4D F2 | 	cmps	result1, #0 wz
188d8                 | ' t1=pop()
188d8                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
188d8     14 00 90 5D |  if_ne	jmp	#LR__2010
188dc     10 12 06 F6 | 	mov	arg01, #16
188e0     00 14 06 F6 | 	mov	arg02, #0
188e4     00 16 06 F6 | 	mov	arg03, #0
188e8     18 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
188ec     10 00 90 FD | 	jmp	#LR__2011
188f0                 | LR__2010
188f0     10 12 06 F6 | 	mov	arg01, #16
188f4     20 14 06 F6 | 	mov	arg02, #32
188f8     20 16 06 F6 | 	mov	arg03, #32
188fc     04 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
18900                 | LR__2011
18900                 | _do_mouse_ret
18900     2D 00 64 FD | 	ret
18904                 | 
18904                 | ' 
18904                 | ' sub do_cursor
18904                 | _do_cursor
18904     90 1F BF FD | 	call	#_pop
18908     00 FA 4D F2 | 	cmps	result1, #0 wz
1890c                 | ' t1=pop()
1890c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1890c     14 00 90 5D |  if_ne	jmp	#LR__2020
18910     11 12 06 F6 | 	mov	arg01, #17
18914     00 14 06 F6 | 	mov	arg02, #0
18918     00 16 06 F6 | 	mov	arg03, #0
1891c     E4 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18920     10 00 90 FD | 	jmp	#LR__2021
18924                 | LR__2020
18924     11 12 06 F6 | 	mov	arg01, #17
18928     08 14 06 F6 | 	mov	arg02, #8
1892c     10 16 06 F6 | 	mov	arg03, #16
18930     D0 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18934                 | LR__2021
18934                 | _do_cursor_ret
18934     2D 00 64 FD | 	ret
18938                 | 
18938                 | ' 
18938                 | ' 
18938                 | ' sub do_click
18938                 | _do_click
18938     5C 1F BF FD | 	call	#_pop
1893c     00 FA 4D F2 | 	cmps	result1, #0 wz
18940                 | ' t1=pop()
18940                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
18940     58 00 00 AF 
18944     20 E5 05 A1 |  if_e	add	objptr, ##45344
18948     F2 00 68 AC |  if_e	wrlong	#0, objptr
1894c     58 00 00 FF 
18950     20 E5 C5 F3 | 	sumz	objptr, ##45344
18954     F2 02 68 5C |  if_ne	wrlong	#1, objptr
18958     58 00 00 5F 
1895c     20 E5 85 51 |  if_ne	sub	objptr, ##45344
18960                 | _do_click_ret
18960     2D 00 64 FD | 	ret
18964                 | 
18964                 | ' 
18964                 | ' 
18964                 | ' sub do_beep
18964                 | _do_beep
18964     02 4A 05 F6 | 	mov	COUNT_, #2
18968     A8 00 A0 FD | 	call	#pushregs_
1896c     20 F0 07 F1 | 	add	ptra, #32
18970     24 1F BF FD | 	call	#_pop
18974     FD 1E 02 F6 | 	mov	local01, result1
18978     FE 1C 02 F6 | 	mov	arg06, result2
1897c     FF 20 02 F6 | 	mov	local02, result3
18980     0C 4E 05 F1 | 	add	fp, #12
18984     A7 1E 62 FC | 	wrlong	local01, fp
18988     04 4E 05 F1 | 	add	fp, #4
1898c     A7 1C 62 FC | 	wrlong	arg06, fp
18990     04 4E 05 F1 | 	add	fp, #4
18994     A7 20 62 FC | 	wrlong	local02, fp
18998     14 4E 85 F1 | 	sub	fp, #20
1899c     F8 1E BF FD | 	call	#_pop
189a0     A7 FA 61 FC | 	wrlong	result1, fp
189a4     04 4E 05 F1 | 	add	fp, #4
189a8     A7 FC 61 FC | 	wrlong	result2, fp
189ac     04 4E 05 F1 | 	add	fp, #4
189b0     A7 FE 61 FC | 	wrlong	result3, fp
189b4                 | ' 
189b4                 | ' t2=pop()
189b4                 | ' t1=pop()
189b4                 | ' 
189b4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
189b4     08 4E 85 F1 | 	sub	fp, #8
189b8     1C FE 0D F2 | 	cmp	result3, #28 wz
189bc     08 4E 05 51 |  if_ne	add	fp, #8
189c0     A7 20 02 5B |  if_ne	rdlong	local02, fp
189c4     08 4E 85 51 |  if_ne	sub	fp, #8
189c8     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
189cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
189d0     18 4E 05 A1 |  if_e	add	fp, #24
189d4     A7 1E 62 AC |  if_e	wrlong	local01, fp
189d8     18 4E 85 A1 |  if_e	sub	fp, #24
189dc     14 00 90 AD |  if_e	jmp	#LR__2030
189e0     A7 12 02 F6 | 	mov	arg01, fp
189e4     4C AB BF FD | 	call	#_converttoint
189e8     18 4E 05 F1 | 	add	fp, #24
189ec     A7 FA 61 FC | 	wrlong	result1, fp
189f0     18 4E 85 F1 | 	sub	fp, #24
189f4                 | LR__2030
189f4     1C 4E 05 F1 | 	add	fp, #28
189f8     A7 FE 48 FC | 	wrbyte	#127, fp
189fc     01 4E 05 F1 | 	add	fp, #1
18a00     A7 00 49 FC | 	wrbyte	#128, fp
18a04     01 4E 85 F1 | 	sub	fp, #1
18a08     A7 14 02 F6 | 	mov	arg02, fp
18a0c     04 4E 85 F1 | 	sub	fp, #4
18a10     A7 16 02 FB | 	rdlong	arg03, fp
18a14     18 4E 85 F1 | 	sub	fp, #24
18a18     01 16 66 F0 | 	shl	arg03, #1
18a1c     07 12 06 F6 | 	mov	arg01, #7
18a20     0E 18 C6 F9 | 	decod	arg04, #14
18a24     02 1A 06 F6 | 	mov	arg05, #2
18a28     00 1C 06 F6 | 	mov	arg06, #0
18a2c     0B 00 00 FF 
18a30     CC E4 05 F1 | 	add	objptr, ##5836
18a34     F0 5F B0 FD | 	call	#_audio096_spin2_play8
18a38     0B 00 00 FF 
18a3c     CC E4 85 F1 | 	sub	objptr, ##5836
18a40     0C 4E 05 F1 | 	add	fp, #12
18a44     A7 12 02 F6 | 	mov	arg01, fp
18a48     0C 4E 85 F1 | 	sub	fp, #12
18a4c     E0 1E BF FD | 	call	#_push
18a50     B8 F5 BF FD | 	call	#_do_waitms
18a54     07 12 06 F6 | 	mov	arg01, #7
18a58     0B 00 00 FF 
18a5c     CC E4 05 F1 | 	add	objptr, ##5836
18a60     68 60 B0 FD | 	call	#_audio096_spin2_stop
18a64     0B 00 00 FF 
18a68     CC E4 85 F1 | 	sub	objptr, ##5836
18a6c     A7 F0 03 F6 | 	mov	ptra, fp
18a70     B2 00 A0 FD | 	call	#popregs_
18a74                 | _do_beep_ret
18a74     2D 00 64 FD | 	ret
18a78                 | 
18a78                 | ' 
18a78                 | ' sub do_no_command
18a78                 | _do_no_command
18a78     17 12 06 F6 | 	mov	arg01, #23
18a7c     A4 1E B0 FD | 	call	#_printerror
18a80                 | _do_no_command_ret
18a80     2D 00 64 FD | 	ret
18a84                 | 
18a84                 | ' 
18a84                 | ' sub do_negative
18a84                 | _do_negative
18a84     02 4A 05 F6 | 	mov	COUNT_, #2
18a88     A8 00 A0 FD | 	call	#pushregs_
18a8c     0C F0 07 F1 | 	add	ptra, #12
18a90     04 1E BF FD | 	call	#_pop
18a94     FF 1E 02 F6 | 	mov	local01, result3
18a98     A7 FA 61 FC | 	wrlong	result1, fp
18a9c     04 4E 05 F1 | 	add	fp, #4
18aa0     A7 FC 61 FC | 	wrlong	result2, fp
18aa4     04 4E 05 F1 | 	add	fp, #4
18aa8     A7 1E 62 FC | 	wrlong	local01, fp
18aac                 | ' t1=pop()
18aac                 | ' if t1.result_type=result_int then 
18aac     08 4E 85 F1 | 	sub	fp, #8
18ab0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18ab4     A7 20 02 AB |  if_e	rdlong	local02, fp
18ab8     10 1F 62 A6 |  if_e	neg	local01, local02
18abc     A7 1E 62 AC |  if_e	wrlong	local01, fp
18ac0     5C 00 90 AD |  if_e	jmp	#LR__2042
18ac4     08 4E 05 F1 | 	add	fp, #8
18ac8     A7 1E 02 FB | 	rdlong	local01, fp
18acc     08 4E 85 F1 | 	sub	fp, #8
18ad0     1D 1E 0E F2 | 	cmp	local01, #29 wz
18ad4     1C 00 90 5D |  if_ne	jmp	#LR__2040
18ad8     A7 20 02 FB | 	rdlong	local02, fp
18adc     10 1F 62 F6 | 	neg	local01, local02
18ae0     A7 1E 62 FC | 	wrlong	local01, fp
18ae4     08 4E 05 F1 | 	add	fp, #8
18ae8     A7 38 68 FC | 	wrlong	#28, fp
18aec     08 4E 85 F1 | 	sub	fp, #8
18af0     2C 00 90 FD | 	jmp	#LR__2041
18af4                 | LR__2040
18af4     08 4E 05 F1 | 	add	fp, #8
18af8     A7 1E 02 FB | 	rdlong	local01, fp
18afc     08 4E 85 F1 | 	sub	fp, #8
18b00     1E 1E 0E F2 | 	cmp	local01, #30 wz
18b04     A7 FA 01 AB |  if_e	rdlong	result1, fp
18b08     1F FA E5 A4 |  if_e	bitnot	result1, #31
18b0c     A7 FA 61 AC |  if_e	wrlong	result1, fp
18b10     08 4E 05 51 |  if_ne	add	fp, #8
18b14     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18b18     08 4E 85 51 |  if_ne	sub	fp, #8
18b1c     A7 50 68 5C |  if_ne	wrlong	#40, fp
18b20                 | LR__2041
18b20                 | LR__2042
18b20     A7 12 02 F6 | 	mov	arg01, fp
18b24     08 1E BF FD | 	call	#_push
18b28     A7 F0 03 F6 | 	mov	ptra, fp
18b2c     B2 00 A0 FD | 	call	#popregs_
18b30                 | _do_negative_ret
18b30     2D 00 64 FD | 	ret
18b34                 | 
18b34                 | ' 
18b34                 | ' sub do_abs
18b34                 | _do_abs
18b34     01 4A 05 F6 | 	mov	COUNT_, #1
18b38     A8 00 A0 FD | 	call	#pushregs_
18b3c     0C F0 07 F1 | 	add	ptra, #12
18b40     54 1D BF FD | 	call	#_pop
18b44     FF 1E 02 F6 | 	mov	local01, result3
18b48     A7 FA 61 FC | 	wrlong	result1, fp
18b4c     04 4E 05 F1 | 	add	fp, #4
18b50     A7 FC 61 FC | 	wrlong	result2, fp
18b54     04 4E 05 F1 | 	add	fp, #4
18b58     A7 1E 62 FC | 	wrlong	local01, fp
18b5c                 | ' t1=pop()
18b5c                 | ' if t1.result_type=result_int then 
18b5c     08 4E 85 F1 | 	sub	fp, #8
18b60     1C 1E 0E F2 | 	cmp	local01, #28 wz
18b64     A7 12 02 AB |  if_e	rdlong	arg01, fp
18b68     09 1F 42 A6 |  if_e	abs	local01, arg01
18b6c     A7 1E 62 AC |  if_e	wrlong	local01, fp
18b70     2C 00 90 AD |  if_e	jmp	#LR__2050
18b74     08 4E 05 F1 | 	add	fp, #8
18b78     A7 1E 02 FB | 	rdlong	local01, fp
18b7c     08 4E 85 F1 | 	sub	fp, #8
18b80     1E 1E 0E F2 | 	cmp	local01, #30 wz
18b84     A7 FA 01 AB |  if_e	rdlong	result1, fp
18b88     1F FA 05 A4 |  if_e	bitl	result1, #31
18b8c     A7 FA 61 AC |  if_e	wrlong	result1, fp
18b90     08 4E 05 51 |  if_ne	add	fp, #8
18b94     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18b98     08 4E 85 51 |  if_ne	sub	fp, #8
18b9c     A7 50 68 5C |  if_ne	wrlong	#40, fp
18ba0                 | LR__2050
18ba0     A7 12 02 F6 | 	mov	arg01, fp
18ba4     88 1D BF FD | 	call	#_push
18ba8     A7 F0 03 F6 | 	mov	ptra, fp
18bac     B2 00 A0 FD | 	call	#popregs_
18bb0                 | _do_abs_ret
18bb0     2D 00 64 FD | 	ret
18bb4                 | 
18bb4                 | ' 
18bb4                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
18bb4                 | ' 
18bb4                 | ' ''----------------------------------------------------------------------------------------------------
18bb4                 | ' ''------------------ Initialization procedures -------------------------------------------------------
18bb4                 | ' ''----------------------------------------------------------------------------------------------------
18bb4                 | ' 
18bb4                 | ' ''--------------------------- Command function pointers
18bb4                 | ' 
18bb4                 | ' sub init_commands
18bb4                 | _init_commands
18bb4                 | ' 
18bb4                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
18bb4     00 00 06 F6 | 	mov	_var01, #0
18bb8     97 16 48 FB | 	callpa	#(@LR__2061-@LR__2060)>>2,fcache_load_ptr_
18bbc                 | LR__2060
18bbc     00 FB 01 F6 | 	mov	result1, _var01
18bc0     02 FA 65 F0 | 	shl	result1, #2
18bc4     43 00 00 FF 
18bc8     90 E4 05 F1 | 	add	objptr, ##34448
18bcc     F2 FA 01 F1 | 	add	result1, objptr
18bd0     43 00 00 FF 
18bd4     90 E4 85 F1 | 	sub	objptr, ##34448
18bd8     FD E4 61 FC | 	wrlong	objptr, result1
18bdc     01 00 06 F1 | 	add	_var01, #1
18be0     00 01 56 F2 | 	cmps	_var01, #256 wc
18be4     D4 FF 9F CD |  if_b	jmp	#LR__2060
18be8                 | LR__2061
18be8     F2 FA 01 F6 | 	mov	result1, objptr
18bec     14 FA 25 F4 | 	bith	result1, #20
18bf0     43 00 00 FF 
18bf4     94 E4 05 F1 | 	add	objptr, ##34452
18bf8     F2 FA 61 FC | 	wrlong	result1, objptr
18bfc     43 00 00 FF 
18c00     94 E4 85 F1 | 	sub	objptr, ##34452
18c04     F2 FA 01 F6 | 	mov	result1, objptr
18c08     15 FA 25 F4 | 	bith	result1, #21
18c0c     43 00 00 FF 
18c10     98 E4 05 F1 | 	add	objptr, ##34456
18c14     F2 FA 61 FC | 	wrlong	result1, objptr
18c18     43 00 00 FF 
18c1c     98 E4 85 F1 | 	sub	objptr, ##34456
18c20     F2 FA 01 F6 | 	mov	result1, objptr
18c24     34 FA 25 F4 | 	bith	result1, #52
18c28     43 00 00 FF 
18c2c     9C E4 05 F1 | 	add	objptr, ##34460
18c30     F2 FA 61 FC | 	wrlong	result1, objptr
18c34     43 00 00 FF 
18c38     9C E4 85 F1 | 	sub	objptr, ##34460
18c3c     F2 FA 01 F6 | 	mov	result1, objptr
18c40     16 FA 25 F4 | 	bith	result1, #22
18c44     43 00 00 FF 
18c48     A4 E4 05 F1 | 	add	objptr, ##34468
18c4c     F2 FA 61 FC | 	wrlong	result1, objptr
18c50     43 00 00 FF 
18c54     A4 E4 85 F1 | 	sub	objptr, ##34468
18c58     F2 FA 01 F6 | 	mov	result1, objptr
18c5c     00 28 00 FF 
18c60     00 FA 45 F5 | 	or	result1, ##5242880
18c64     43 00 00 FF 
18c68     A8 E4 05 F1 | 	add	objptr, ##34472
18c6c     F2 FA 61 FC | 	wrlong	result1, objptr
18c70     43 00 00 FF 
18c74     A8 E4 85 F1 | 	sub	objptr, ##34472
18c78     F2 FA 01 F6 | 	mov	result1, objptr
18c7c     35 FA 25 F4 | 	bith	result1, #53
18c80     43 00 00 FF 
18c84     AC E4 05 F1 | 	add	objptr, ##34476
18c88     F2 FA 61 FC | 	wrlong	result1, objptr
18c8c     43 00 00 FF 
18c90     AC E4 85 F1 | 	sub	objptr, ##34476
18c94     F2 FA 01 F6 | 	mov	result1, objptr
18c98     54 FA 25 F4 | 	bith	result1, #84
18c9c     43 00 00 FF 
18ca0     B0 E4 05 F1 | 	add	objptr, ##34480
18ca4     F2 FA 61 FC | 	wrlong	result1, objptr
18ca8     43 00 00 FF 
18cac     B0 E4 85 F1 | 	sub	objptr, ##34480
18cb0     F2 FA 01 F6 | 	mov	result1, objptr
18cb4     17 FA 25 F4 | 	bith	result1, #23
18cb8     43 00 00 FF 
18cbc     B4 E4 05 F1 | 	add	objptr, ##34484
18cc0     F2 FA 61 FC | 	wrlong	result1, objptr
18cc4     43 00 00 FF 
18cc8     B4 E4 85 F1 | 	sub	objptr, ##34484
18ccc     F2 FA 01 F6 | 	mov	result1, objptr
18cd0     00 48 00 FF 
18cd4     00 FA 45 F5 | 	or	result1, ##9437184
18cd8     43 00 00 FF 
18cdc     B8 E4 05 F1 | 	add	objptr, ##34488
18ce0     F2 FA 61 FC | 	wrlong	result1, objptr
18ce4     43 00 00 FF 
18ce8     B8 E4 85 F1 | 	sub	objptr, ##34488
18cec     F2 FA 01 F6 | 	mov	result1, objptr
18cf0     00 50 00 FF 
18cf4     00 FA 45 F5 | 	or	result1, ##10485760
18cf8     43 00 00 FF 
18cfc     BC E4 05 F1 | 	add	objptr, ##34492
18d00     F2 FA 61 FC | 	wrlong	result1, objptr
18d04     43 00 00 FF 
18d08     BC E4 85 F1 | 	sub	objptr, ##34492
18d0c     F2 FA 01 F6 | 	mov	result1, objptr
18d10     00 58 00 FF 
18d14     00 FA 45 F5 | 	or	result1, ##11534336
18d18     43 00 00 FF 
18d1c     C0 E4 05 F1 | 	add	objptr, ##34496
18d20     F2 FA 61 FC | 	wrlong	result1, objptr
18d24     43 00 00 FF 
18d28     C0 E4 85 F1 | 	sub	objptr, ##34496
18d2c     F2 FA 01 F6 | 	mov	result1, objptr
18d30     36 FA 25 F4 | 	bith	result1, #54
18d34     43 00 00 FF 
18d38     D4 E4 05 F1 | 	add	objptr, ##34516
18d3c     F2 FA 61 FC | 	wrlong	result1, objptr
18d40     43 00 00 FF 
18d44     D4 E4 85 F1 | 	sub	objptr, ##34516
18d48     F2 FA 01 F6 | 	mov	result1, objptr
18d4c     00 68 00 FF 
18d50     00 FA 45 F5 | 	or	result1, ##13631488
18d54     43 00 00 FF 
18d58     04 E5 05 F1 | 	add	objptr, ##34564
18d5c     F2 FA 61 FC | 	wrlong	result1, objptr
18d60     43 00 00 FF 
18d64     04 E5 85 F1 | 	sub	objptr, ##34564
18d68     F2 FA 01 F6 | 	mov	result1, objptr
18d6c     00 68 00 FF 
18d70     00 FA 45 F5 | 	or	result1, ##13631488
18d74     43 00 00 FF 
18d78     00 E5 05 F1 | 	add	objptr, ##34560
18d7c     F2 FA 61 FC | 	wrlong	result1, objptr
18d80     43 00 00 FF 
18d84     00 E5 85 F1 | 	sub	objptr, ##34560
18d88     F2 FA 01 F6 | 	mov	result1, objptr
18d8c     00 68 00 FF 
18d90     00 FA 45 F5 | 	or	result1, ##13631488
18d94     43 00 00 FF 
18d98     08 E5 05 F1 | 	add	objptr, ##34568
18d9c     F2 FA 61 FC | 	wrlong	result1, objptr
18da0     43 00 00 FF 
18da4     08 E5 85 F1 | 	sub	objptr, ##34568
18da8     F2 FA 01 F6 | 	mov	result1, objptr
18dac     00 68 00 FF 
18db0     00 FA 45 F5 | 	or	result1, ##13631488
18db4     43 00 00 FF 
18db8     0C E5 05 F1 | 	add	objptr, ##34572
18dbc     F2 FA 61 FC | 	wrlong	result1, objptr
18dc0     43 00 00 FF 
18dc4     0C E5 85 F1 | 	sub	objptr, ##34572
18dc8     F2 FA 01 F6 | 	mov	result1, objptr
18dcc     00 68 00 FF 
18dd0     00 FA 45 F5 | 	or	result1, ##13631488
18dd4     43 00 00 FF 
18dd8     3C E5 05 F1 | 	add	objptr, ##34620
18ddc     F2 FA 61 FC | 	wrlong	result1, objptr
18de0     43 00 00 FF 
18de4     3C E5 85 F1 | 	sub	objptr, ##34620
18de8     F2 FA 01 F6 | 	mov	result1, objptr
18dec     55 FA 25 F4 | 	bith	result1, #85
18df0     43 00 00 FF 
18df4     EC E4 05 F1 | 	add	objptr, ##34540
18df8     F2 FA 61 FC | 	wrlong	result1, objptr
18dfc     43 00 00 FF 
18e00     EC E4 85 F1 | 	sub	objptr, ##34540
18e04     F2 FA 01 F6 | 	mov	result1, objptr
18e08     00 68 00 FF 
18e0c     00 FA 45 F5 | 	or	result1, ##13631488
18e10     43 00 00 FF 
18e14     10 E5 05 F1 | 	add	objptr, ##34576
18e18     F2 FA 61 FC | 	wrlong	result1, objptr
18e1c     43 00 00 FF 
18e20     10 E5 85 F1 | 	sub	objptr, ##34576
18e24     F2 FA 01 F6 | 	mov	result1, objptr
18e28     00 68 00 FF 
18e2c     00 FA 45 F5 | 	or	result1, ##13631488
18e30     43 00 00 FF 
18e34     14 E5 05 F1 | 	add	objptr, ##34580
18e38     F2 FA 61 FC | 	wrlong	result1, objptr
18e3c     43 00 00 FF 
18e40     14 E5 85 F1 | 	sub	objptr, ##34580
18e44     F2 FA 01 F6 | 	mov	result1, objptr
18e48     00 68 00 FF 
18e4c     00 FA 45 F5 | 	or	result1, ##13631488
18e50     43 00 00 FF 
18e54     18 E5 05 F1 | 	add	objptr, ##34584
18e58     F2 FA 61 FC | 	wrlong	result1, objptr
18e5c     43 00 00 FF 
18e60     18 E5 85 F1 | 	sub	objptr, ##34584
18e64     F2 FA 01 F6 | 	mov	result1, objptr
18e68     74 FA 25 F4 | 	bith	result1, #116
18e6c     43 00 00 FF 
18e70     90 E5 05 F1 | 	add	objptr, ##34704
18e74     F2 FA 61 FC | 	wrlong	result1, objptr
18e78     43 00 00 FF 
18e7c     90 E5 85 F1 | 	sub	objptr, ##34704
18e80     F2 FA 01 F6 | 	mov	result1, objptr
18e84     18 FA 25 F4 | 	bith	result1, #24
18e88     43 00 00 FF 
18e8c     94 E5 05 F1 | 	add	objptr, ##34708
18e90     F2 FA 61 FC | 	wrlong	result1, objptr
18e94     43 00 00 FF 
18e98     94 E5 85 F1 | 	sub	objptr, ##34708
18e9c     F2 FA 01 F6 | 	mov	result1, objptr
18ea0     00 88 00 FF 
18ea4     00 FA 45 F5 | 	or	result1, ##17825792
18ea8     43 00 00 FF 
18eac     98 E5 05 F1 | 	add	objptr, ##34712
18eb0     F2 FA 61 FC | 	wrlong	result1, objptr
18eb4     43 00 00 FF 
18eb8     98 E5 85 F1 | 	sub	objptr, ##34712
18ebc     F2 FA 01 F6 | 	mov	result1, objptr
18ec0     00 90 00 FF 
18ec4     00 FA 45 F5 | 	or	result1, ##18874368
18ec8     43 00 00 FF 
18ecc     9C E5 05 F1 | 	add	objptr, ##34716
18ed0     F2 FA 61 FC | 	wrlong	result1, objptr
18ed4     43 00 00 FF 
18ed8     9C E5 85 F1 | 	sub	objptr, ##34716
18edc     F2 FA 01 F6 | 	mov	result1, objptr
18ee0     00 98 00 FF 
18ee4     00 FA 45 F5 | 	or	result1, ##19922944
18ee8     43 00 00 FF 
18eec     A0 E5 05 F1 | 	add	objptr, ##34720
18ef0     F2 FA 61 FC | 	wrlong	result1, objptr
18ef4     43 00 00 FF 
18ef8     A0 E5 85 F1 | 	sub	objptr, ##34720
18efc     F2 FA 01 F6 | 	mov	result1, objptr
18f00     00 A0 00 FF 
18f04     00 FA 45 F5 | 	or	result1, ##20971520
18f08     43 00 00 FF 
18f0c     A4 E5 05 F1 | 	add	objptr, ##34724
18f10     F2 FA 61 FC | 	wrlong	result1, objptr
18f14     43 00 00 FF 
18f18     A4 E5 85 F1 | 	sub	objptr, ##34724
18f1c     F2 FA 01 F6 | 	mov	result1, objptr
18f20     00 A8 00 FF 
18f24     00 FA 45 F5 | 	or	result1, ##22020096
18f28     43 00 00 FF 
18f2c     A8 E5 05 F1 | 	add	objptr, ##34728
18f30     F2 FA 61 FC | 	wrlong	result1, objptr
18f34     43 00 00 FF 
18f38     A8 E5 85 F1 | 	sub	objptr, ##34728
18f3c     F2 FA 01 F6 | 	mov	result1, objptr
18f40     00 B0 00 FF 
18f44     00 FA 45 F5 | 	or	result1, ##23068672
18f48     43 00 00 FF 
18f4c     AC E5 05 F1 | 	add	objptr, ##34732
18f50     F2 FA 61 FC | 	wrlong	result1, objptr
18f54     43 00 00 FF 
18f58     AC E5 85 F1 | 	sub	objptr, ##34732
18f5c     F2 FA 01 F6 | 	mov	result1, objptr
18f60     00 B8 00 FF 
18f64     00 FA 45 F5 | 	or	result1, ##24117248
18f68     43 00 00 FF 
18f6c     B0 E5 05 F1 | 	add	objptr, ##34736
18f70     F2 FA 61 FC | 	wrlong	result1, objptr
18f74     43 00 00 FF 
18f78     B0 E5 85 F1 | 	sub	objptr, ##34736
18f7c     F2 FA 01 F6 | 	mov	result1, objptr
18f80     37 FA 25 F4 | 	bith	result1, #55
18f84     43 00 00 FF 
18f88     B4 E5 05 F1 | 	add	objptr, ##34740
18f8c     F2 FA 61 FC | 	wrlong	result1, objptr
18f90     43 00 00 FF 
18f94     B4 E5 85 F1 | 	sub	objptr, ##34740
18f98     F2 FA 01 F6 | 	mov	result1, objptr
18f9c     00 C8 00 FF 
18fa0     00 FA 45 F5 | 	or	result1, ##26214400
18fa4     43 00 00 FF 
18fa8     B8 E5 05 F1 | 	add	objptr, ##34744
18fac     F2 FA 61 FC | 	wrlong	result1, objptr
18fb0     43 00 00 FF 
18fb4     B8 E5 85 F1 | 	sub	objptr, ##34744
18fb8     F2 FA 01 F6 | 	mov	result1, objptr
18fbc     00 D0 00 FF 
18fc0     00 FA 45 F5 | 	or	result1, ##27262976
18fc4     43 00 00 FF 
18fc8     BC E5 05 F1 | 	add	objptr, ##34748
18fcc     F2 FA 61 FC | 	wrlong	result1, objptr
18fd0     43 00 00 FF 
18fd4     BC E5 85 F1 | 	sub	objptr, ##34748
18fd8     F2 FA 01 F6 | 	mov	result1, objptr
18fdc     00 D8 00 FF 
18fe0     00 FA 45 F5 | 	or	result1, ##28311552
18fe4     43 00 00 FF 
18fe8     C0 E5 05 F1 | 	add	objptr, ##34752
18fec     F2 FA 61 FC | 	wrlong	result1, objptr
18ff0     43 00 00 FF 
18ff4     C0 E5 85 F1 | 	sub	objptr, ##34752
18ff8     F2 FA 01 F6 | 	mov	result1, objptr
18ffc     56 FA 25 F4 | 	bith	result1, #86
19000     43 00 00 FF 
19004     C4 E5 05 F1 | 	add	objptr, ##34756
19008     F2 FA 61 FC | 	wrlong	result1, objptr
1900c     43 00 00 FF 
19010     C4 E5 85 F1 | 	sub	objptr, ##34756
19014     F2 FA 01 F6 | 	mov	result1, objptr
19018     00 E8 00 FF 
1901c     00 FA 45 F5 | 	or	result1, ##30408704
19020     45 00 00 FF 
19024     8C E4 05 F1 | 	add	objptr, ##35468
19028     F2 FA 61 FC | 	wrlong	result1, objptr
1902c     45 00 00 FF 
19030     8C E4 85 F1 | 	sub	objptr, ##35468
19034     F2 FA 01 F6 | 	mov	result1, objptr
19038     75 FA 25 F4 | 	bith	result1, #117
1903c     43 00 00 FF 
19040     C8 E5 05 F1 | 	add	objptr, ##34760
19044     F2 FA 61 FC | 	wrlong	result1, objptr
19048     43 00 00 FF 
1904c     C8 E5 85 F1 | 	sub	objptr, ##34760
19050     F2 FA 01 F6 | 	mov	result1, objptr
19054     94 FA 25 F4 | 	bith	result1, #148
19058     43 00 00 FF 
1905c     DC E5 05 F1 | 	add	objptr, ##34780
19060     F2 FA 61 FC | 	wrlong	result1, objptr
19064     43 00 00 FF 
19068     DC E5 85 F1 | 	sub	objptr, ##34780
1906c     F2 FA 01 F6 | 	mov	result1, objptr
19070     19 FA 25 F4 | 	bith	result1, #25
19074     43 00 00 FF 
19078     CC E5 05 F1 | 	add	objptr, ##34764
1907c     F2 FA 61 FC | 	wrlong	result1, objptr
19080     43 00 00 FF 
19084     CC E5 85 F1 | 	sub	objptr, ##34764
19088     F2 FA 01 F6 | 	mov	result1, objptr
1908c     00 08 01 FF 
19090     00 FA 45 F5 | 	or	result1, ##34603008
19094     43 00 00 FF 
19098     E8 E4 05 F1 | 	add	objptr, ##34536
1909c     F2 FA 61 FC | 	wrlong	result1, objptr
190a0     43 00 00 FF 
190a4     E8 E4 85 F1 | 	sub	objptr, ##34536
190a8     F2 FA 01 F6 | 	mov	result1, objptr
190ac     00 10 01 FF 
190b0     00 FA 45 F5 | 	or	result1, ##35651584
190b4     43 00 00 FF 
190b8     D0 E5 05 F1 | 	add	objptr, ##34768
190bc     F2 FA 61 FC | 	wrlong	result1, objptr
190c0     43 00 00 FF 
190c4     D0 E5 85 F1 | 	sub	objptr, ##34768
190c8     F2 FA 01 F6 | 	mov	result1, objptr
190cc     00 18 01 FF 
190d0     00 FA 45 F5 | 	or	result1, ##36700160
190d4     43 00 00 FF 
190d8     D4 E5 05 F1 | 	add	objptr, ##34772
190dc     F2 FA 61 FC | 	wrlong	result1, objptr
190e0     43 00 00 FF 
190e4     D4 E5 85 F1 | 	sub	objptr, ##34772
190e8     F2 FA 01 F6 | 	mov	result1, objptr
190ec     00 20 01 FF 
190f0     00 FA 45 F5 | 	or	result1, ##37748736
190f4     43 00 00 FF 
190f8     D8 E5 05 F1 | 	add	objptr, ##34776
190fc     F2 FA 61 FC | 	wrlong	result1, objptr
19100     43 00 00 FF 
19104     D8 E5 85 F1 | 	sub	objptr, ##34776
19108     F2 FA 01 F6 | 	mov	result1, objptr
1910c     00 28 01 FF 
19110     00 FA 45 F5 | 	or	result1, ##38797312
19114     43 00 00 FF 
19118     E4 E5 05 F1 | 	add	objptr, ##34788
1911c     F2 FA 61 FC | 	wrlong	result1, objptr
19120     43 00 00 FF 
19124     E4 E5 85 F1 | 	sub	objptr, ##34788
19128     F2 FA 01 F6 | 	mov	result1, objptr
1912c     00 30 01 FF 
19130     00 FA 45 F5 | 	or	result1, ##39845888
19134     43 00 00 FF 
19138     E8 E5 05 F1 | 	add	objptr, ##34792
1913c     F2 FA 61 FC | 	wrlong	result1, objptr
19140     43 00 00 FF 
19144     E8 E5 85 F1 | 	sub	objptr, ##34792
19148     F2 FA 01 F6 | 	mov	result1, objptr
1914c     00 38 01 FF 
19150     00 FA 45 F5 | 	or	result1, ##40894464
19154     43 00 00 FF 
19158     EC E5 05 F1 | 	add	objptr, ##34796
1915c     F2 FA 61 FC | 	wrlong	result1, objptr
19160     43 00 00 FF 
19164     EC E5 85 F1 | 	sub	objptr, ##34796
19168     F2 FA 01 F6 | 	mov	result1, objptr
1916c     00 40 01 FF 
19170     00 FA 45 F5 | 	or	result1, ##41943040
19174     43 00 00 FF 
19178     F0 E5 05 F1 | 	add	objptr, ##34800
1917c     F2 FA 61 FC | 	wrlong	result1, objptr
19180     43 00 00 FF 
19184     F0 E5 85 F1 | 	sub	objptr, ##34800
19188     F2 FA 01 F6 | 	mov	result1, objptr
1918c     00 48 01 FF 
19190     00 FA 45 F5 | 	or	result1, ##42991616
19194     43 00 00 FF 
19198     F8 E5 05 F1 | 	add	objptr, ##34808
1919c     F2 FA 61 FC | 	wrlong	result1, objptr
191a0     43 00 00 FF 
191a4     F8 E5 85 F1 | 	sub	objptr, ##34808
191a8     F2 FA 01 F6 | 	mov	result1, objptr
191ac     00 08 01 FF 
191b0     00 FA 45 F5 | 	or	result1, ##34603008
191b4     43 00 00 FF 
191b8     FC E5 05 F1 | 	add	objptr, ##34812
191bc     F2 FA 61 FC | 	wrlong	result1, objptr
191c0     43 00 00 FF 
191c4     FC E5 85 F1 | 	sub	objptr, ##34812
191c8     F2 FA 01 F6 | 	mov	result1, objptr
191cc     00 50 01 FF 
191d0     00 FA 45 F5 | 	or	result1, ##44040192
191d4     43 00 00 FF 
191d8     FC E4 05 F1 | 	add	objptr, ##34556
191dc     F2 FA 61 FC | 	wrlong	result1, objptr
191e0     43 00 00 FF 
191e4     FC E4 85 F1 | 	sub	objptr, ##34556
191e8     F2 FA 01 F6 | 	mov	result1, objptr
191ec     00 58 01 FF 
191f0     00 FA 45 F5 | 	or	result1, ##45088768
191f4     43 00 00 FF 
191f8     2C E5 05 F1 | 	add	objptr, ##34604
191fc     F2 FA 61 FC | 	wrlong	result1, objptr
19200     43 00 00 FF 
19204     2C E5 85 F1 | 	sub	objptr, ##34604
19208     F2 FA 01 F6 | 	mov	result1, objptr
1920c     00 60 01 FF 
19210     00 FA 45 F5 | 	or	result1, ##46137344
19214     43 00 00 FF 
19218     28 E5 05 F1 | 	add	objptr, ##34600
1921c     F2 FA 61 FC | 	wrlong	result1, objptr
19220     43 00 00 FF 
19224     28 E5 85 F1 | 	sub	objptr, ##34600
19228     F2 FA 01 F6 | 	mov	result1, objptr
1922c     00 68 01 FF 
19230     00 FA 45 F5 | 	or	result1, ##47185920
19234     43 00 00 FF 
19238     CC E4 05 F1 | 	add	objptr, ##34508
1923c     F2 FA 61 FC | 	wrlong	result1, objptr
19240     43 00 00 FF 
19244     CC E4 85 F1 | 	sub	objptr, ##34508
19248     F2 FA 01 F6 | 	mov	result1, objptr
1924c     00 70 01 FF 
19250     00 FA 45 F5 | 	or	result1, ##48234496
19254     43 00 00 FF 
19258     D0 E4 05 F1 | 	add	objptr, ##34512
1925c     F2 FA 61 FC | 	wrlong	result1, objptr
19260     43 00 00 FF 
19264     D0 E4 85 F1 | 	sub	objptr, ##34512
19268     F2 FA 01 F6 | 	mov	result1, objptr
1926c     00 78 01 FF 
19270     00 FA 45 F5 | 	or	result1, ##49283072
19274     43 00 00 FF 
19278     38 E5 05 F1 | 	add	objptr, ##34616
1927c     F2 FA 61 FC | 	wrlong	result1, objptr
19280     43 00 00 FF 
19284     38 E5 85 F1 | 	sub	objptr, ##34616
19288     F2 FA 01 F6 | 	mov	result1, objptr
1928c     38 FA 25 F4 | 	bith	result1, #56
19290     43 00 00 FF 
19294     E0 E5 05 F1 | 	add	objptr, ##34784
19298     F2 FA 61 FC | 	wrlong	result1, objptr
1929c     43 00 00 FF 
192a0     E0 E5 85 F1 | 	sub	objptr, ##34784
192a4     F2 FA 01 F6 | 	mov	result1, objptr
192a8     00 88 01 FF 
192ac     00 FA 45 F5 | 	or	result1, ##51380224
192b0     43 00 00 FF 
192b4     F4 E5 05 F1 | 	add	objptr, ##34804
192b8     F2 FA 61 FC | 	wrlong	result1, objptr
192bc     43 00 00 FF 
192c0     F4 E5 85 F1 | 	sub	objptr, ##34804
192c4     F2 FA 01 F6 | 	mov	result1, objptr
192c8     00 90 01 FF 
192cc     00 FA 45 F5 | 	or	result1, ##52428800
192d0     44 00 00 FF 
192d4     00 E4 05 F1 | 	add	objptr, ##34816
192d8     F2 FA 61 FC | 	wrlong	result1, objptr
192dc     44 00 00 FF 
192e0     00 E4 85 F1 | 	sub	objptr, ##34816
192e4     F2 FA 01 F6 | 	mov	result1, objptr
192e8     00 98 01 FF 
192ec     00 FA 45 F5 | 	or	result1, ##53477376
192f0     44 00 00 FF 
192f4     04 E4 05 F1 | 	add	objptr, ##34820
192f8     F2 FA 61 FC | 	wrlong	result1, objptr
192fc     44 00 00 FF 
19300     04 E4 85 F1 | 	sub	objptr, ##34820
19304     F2 FA 01 F6 | 	mov	result1, objptr
19308     00 A0 01 FF 
1930c     00 FA 45 F5 | 	or	result1, ##54525952
19310     44 00 00 FF 
19314     08 E4 05 F1 | 	add	objptr, ##34824
19318     F2 FA 61 FC | 	wrlong	result1, objptr
1931c     44 00 00 FF 
19320     08 E4 85 F1 | 	sub	objptr, ##34824
19324     F2 FA 01 F6 | 	mov	result1, objptr
19328     00 A8 01 FF 
1932c     00 FA 45 F5 | 	or	result1, ##55574528
19330     44 00 00 FF 
19334     0C E4 05 F1 | 	add	objptr, ##34828
19338     F2 FA 61 FC | 	wrlong	result1, objptr
1933c     44 00 00 FF 
19340     0C E4 85 F1 | 	sub	objptr, ##34828
19344     F2 FA 01 F6 | 	mov	result1, objptr
19348     00 B0 01 FF 
1934c     00 FA 45 F5 | 	or	result1, ##56623104
19350     44 00 00 FF 
19354     10 E4 05 F1 | 	add	objptr, ##34832
19358     F2 FA 61 FC | 	wrlong	result1, objptr
1935c     44 00 00 FF 
19360     10 E4 85 F1 | 	sub	objptr, ##34832
19364     F2 FA 01 F6 | 	mov	result1, objptr
19368     00 B8 01 FF 
1936c     00 FA 45 F5 | 	or	result1, ##57671680
19370     44 00 00 FF 
19374     14 E4 05 F1 | 	add	objptr, ##34836
19378     F2 FA 61 FC | 	wrlong	result1, objptr
1937c     44 00 00 FF 
19380     14 E4 85 F1 | 	sub	objptr, ##34836
19384     F2 FA 01 F6 | 	mov	result1, objptr
19388     94 FA 25 F4 | 	bith	result1, #148
1938c     43 00 00 FF 
19390     DC E5 05 F1 | 	add	objptr, ##34780
19394     F2 FA 61 FC | 	wrlong	result1, objptr
19398     43 00 00 FF 
1939c     DC E5 85 F1 | 	sub	objptr, ##34780
193a0     F2 FA 01 F6 | 	mov	result1, objptr
193a4     57 FA 25 F4 | 	bith	result1, #87
193a8     44 00 00 FF 
193ac     1C E4 05 F1 | 	add	objptr, ##34844
193b0     F2 FA 61 FC | 	wrlong	result1, objptr
193b4     44 00 00 FF 
193b8     1C E4 85 F1 | 	sub	objptr, ##34844
193bc     F2 FA 01 F6 | 	mov	result1, objptr
193c0     00 C8 01 FF 
193c4     00 FA 45 F5 | 	or	result1, ##59768832
193c8     44 00 00 FF 
193cc     18 E4 05 F1 | 	add	objptr, ##34840
193d0     F2 FA 61 FC | 	wrlong	result1, objptr
193d4     44 00 00 FF 
193d8     18 E4 85 F1 | 	sub	objptr, ##34840
193dc     F2 FA 01 F6 | 	mov	result1, objptr
193e0     00 D0 01 FF 
193e4     00 FA 45 F5 | 	or	result1, ##60817408
193e8     44 00 00 FF 
193ec     30 E4 05 F1 | 	add	objptr, ##34864
193f0     F2 FA 61 FC | 	wrlong	result1, objptr
193f4     44 00 00 FF 
193f8     30 E4 85 F1 | 	sub	objptr, ##34864
193fc     F2 FA 01 F6 | 	mov	result1, objptr
19400     00 D8 01 FF 
19404     00 FA 45 F5 | 	or	result1, ##61865984
19408     44 00 00 FF 
1940c     34 E4 05 F1 | 	add	objptr, ##34868
19410     F2 FA 61 FC | 	wrlong	result1, objptr
19414     44 00 00 FF 
19418     34 E4 85 F1 | 	sub	objptr, ##34868
1941c     F2 FA 01 F6 | 	mov	result1, objptr
19420     76 FA 25 F4 | 	bith	result1, #118
19424     44 00 00 FF 
19428     20 E4 05 F1 | 	add	objptr, ##34848
1942c     F2 FA 61 FC | 	wrlong	result1, objptr
19430     44 00 00 FF 
19434     20 E4 85 F1 | 	sub	objptr, ##34848
19438     F2 FA 01 F6 | 	mov	result1, objptr
1943c     00 E8 01 FF 
19440     00 FA 45 F5 | 	or	result1, ##63963136
19444     44 00 00 FF 
19448     24 E4 05 F1 | 	add	objptr, ##34852
1944c     F2 FA 61 FC | 	wrlong	result1, objptr
19450     44 00 00 FF 
19454     24 E4 85 F1 | 	sub	objptr, ##34852
19458     F2 FA 01 F6 | 	mov	result1, objptr
1945c     95 FA 25 F4 | 	bith	result1, #149
19460     44 00 00 FF 
19464     28 E4 05 F1 | 	add	objptr, ##34856
19468     F2 FA 61 FC | 	wrlong	result1, objptr
1946c     44 00 00 FF 
19470     28 E4 85 F1 | 	sub	objptr, ##34856
19474     F2 FA 01 F6 | 	mov	result1, objptr
19478     B4 FA 25 F4 | 	bith	result1, #180
1947c     44 00 00 FF 
19480     2C E4 05 F1 | 	add	objptr, ##34860
19484     F2 FA 61 FC | 	wrlong	result1, objptr
19488     44 00 00 FF 
1948c     2C E4 85 F1 | 	sub	objptr, ##34860
19490     F2 FA 01 F6 | 	mov	result1, objptr
19494     1A FA 25 F4 | 	bith	result1, #26
19498     44 00 00 FF 
1949c     3C E4 05 F1 | 	add	objptr, ##34876
194a0     F2 FA 61 FC | 	wrlong	result1, objptr
194a4     44 00 00 FF 
194a8     3C E4 85 F1 | 	sub	objptr, ##34876
194ac     F2 FA 01 F6 | 	mov	result1, objptr
194b0     00 08 02 FF 
194b4     00 FA 45 F5 | 	or	result1, ##68157440
194b8     44 00 00 FF 
194bc     38 E4 05 F1 | 	add	objptr, ##34872
194c0     F2 FA 61 FC | 	wrlong	result1, objptr
194c4     44 00 00 FF 
194c8     38 E4 85 F1 | 	sub	objptr, ##34872
194cc     F2 FA 01 F6 | 	mov	result1, objptr
194d0     00 10 02 FF 
194d4     00 FA 45 F5 | 	or	result1, ##69206016
194d8     44 00 00 FF 
194dc     48 E4 05 F1 | 	add	objptr, ##34888
194e0     F2 FA 61 FC | 	wrlong	result1, objptr
194e4     44 00 00 FF 
194e8     48 E4 85 F1 | 	sub	objptr, ##34888
194ec     F2 FA 01 F6 | 	mov	result1, objptr
194f0     00 18 02 FF 
194f4     00 FA 45 F5 | 	or	result1, ##70254592
194f8     44 00 00 FF 
194fc     44 E4 05 F1 | 	add	objptr, ##34884
19500     F2 FA 61 FC | 	wrlong	result1, objptr
19504     44 00 00 FF 
19508     44 E4 85 F1 | 	sub	objptr, ##34884
1950c     F2 FA 01 F6 | 	mov	result1, objptr
19510     00 20 02 FF 
19514     00 FA 45 F5 | 	or	result1, ##71303168
19518     44 00 00 FF 
1951c     40 E4 05 F1 | 	add	objptr, ##34880
19520     F2 FA 61 FC | 	wrlong	result1, objptr
19524     44 00 00 FF 
19528     40 E4 85 F1 | 	sub	objptr, ##34880
1952c     F2 FA 01 F6 | 	mov	result1, objptr
19530     00 28 02 FF 
19534     00 FA 45 F5 | 	or	result1, ##72351744
19538     44 00 00 FF 
1953c     4C E4 05 F1 | 	add	objptr, ##34892
19540     F2 FA 61 FC | 	wrlong	result1, objptr
19544     44 00 00 FF 
19548     4C E4 85 F1 | 	sub	objptr, ##34892
1954c     F2 FA 01 F6 | 	mov	result1, objptr
19550     00 30 02 FF 
19554     00 FA 45 F5 | 	or	result1, ##73400320
19558     44 00 00 FF 
1955c     50 E4 05 F1 | 	add	objptr, ##34896
19560     F2 FA 61 FC | 	wrlong	result1, objptr
19564     44 00 00 FF 
19568     50 E4 85 F1 | 	sub	objptr, ##34896
1956c     F2 FA 01 F6 | 	mov	result1, objptr
19570     00 38 02 FF 
19574     00 FA 45 F5 | 	or	result1, ##74448896
19578     43 00 00 FF 
1957c     E4 E4 05 F1 | 	add	objptr, ##34532
19580     F2 FA 61 FC | 	wrlong	result1, objptr
19584     43 00 00 FF 
19588     E4 E4 85 F1 | 	sub	objptr, ##34532
1958c     F2 FA 01 F6 | 	mov	result1, objptr
19590     00 40 02 FF 
19594     00 FA 45 F5 | 	or	result1, ##75497472
19598     44 00 00 FF 
1959c     68 E4 05 F1 | 	add	objptr, ##34920
195a0     F2 FA 61 FC | 	wrlong	result1, objptr
195a4     44 00 00 FF 
195a8     68 E4 85 F1 | 	sub	objptr, ##34920
195ac     F2 FA 01 F6 | 	mov	result1, objptr
195b0     00 48 02 FF 
195b4     00 FA 45 F5 | 	or	result1, ##76546048
195b8     44 00 00 FF 
195bc     78 E4 05 F1 | 	add	objptr, ##34936
195c0     F2 FA 61 FC | 	wrlong	result1, objptr
195c4     44 00 00 FF 
195c8     78 E4 85 F1 | 	sub	objptr, ##34936
195cc     F2 FA 01 F6 | 	mov	result1, objptr
195d0     00 50 02 FF 
195d4     00 FA 45 F5 | 	or	result1, ##77594624
195d8     44 00 00 FF 
195dc     7C E4 05 F1 | 	add	objptr, ##34940
195e0     F2 FA 61 FC | 	wrlong	result1, objptr
195e4     44 00 00 FF 
195e8     7C E4 85 F1 | 	sub	objptr, ##34940
195ec     F2 FA 01 F6 | 	mov	result1, objptr
195f0     00 58 02 FF 
195f4     00 FA 45 F5 | 	or	result1, ##78643200
195f8     44 00 00 FF 
195fc     74 E4 05 F1 | 	add	objptr, ##34932
19600     F2 FA 61 FC | 	wrlong	result1, objptr
19604     44 00 00 FF 
19608     74 E4 85 F1 | 	sub	objptr, ##34932
1960c     F2 FA 01 F6 | 	mov	result1, objptr
19610     00 60 02 FF 
19614     00 FA 45 F5 | 	or	result1, ##79691776
19618     44 00 00 FF 
1961c     6C E4 05 F1 | 	add	objptr, ##34924
19620     F2 FA 61 FC | 	wrlong	result1, objptr
19624     44 00 00 FF 
19628     6C E4 85 F1 | 	sub	objptr, ##34924
1962c     F2 FA 01 F6 | 	mov	result1, objptr
19630     00 68 02 FF 
19634     00 FA 45 F5 | 	or	result1, ##80740352
19638     44 00 00 FF 
1963c     70 E4 05 F1 | 	add	objptr, ##34928
19640     F2 FA 61 FC | 	wrlong	result1, objptr
19644     44 00 00 FF 
19648     70 E4 85 F1 | 	sub	objptr, ##34928
1964c     F2 FA 01 F6 | 	mov	result1, objptr
19650     00 70 02 FF 
19654     00 FA 45 F5 | 	or	result1, ##81788928
19658     44 00 00 FF 
1965c     80 E4 05 F1 | 	add	objptr, ##34944
19660     F2 FA 61 FC | 	wrlong	result1, objptr
19664     44 00 00 FF 
19668     80 E4 85 F1 | 	sub	objptr, ##34944
1966c     F2 FA 01 F6 | 	mov	result1, objptr
19670     00 78 02 FF 
19674     00 FA 45 F5 | 	or	result1, ##82837504
19678     44 00 00 FF 
1967c     84 E4 05 F1 | 	add	objptr, ##34948
19680     F2 FA 61 FC | 	wrlong	result1, objptr
19684     44 00 00 FF 
19688     84 E4 85 F1 | 	sub	objptr, ##34948
1968c     F2 FA 01 F6 | 	mov	result1, objptr
19690     00 80 02 FF 
19694     00 FA 45 F5 | 	or	result1, ##83886080
19698     44 00 00 FF 
1969c     88 E4 05 F1 | 	add	objptr, ##34952
196a0     F2 FA 61 FC | 	wrlong	result1, objptr
196a4     44 00 00 FF 
196a8     88 E4 85 F1 | 	sub	objptr, ##34952
196ac     F2 FA 01 F6 | 	mov	result1, objptr
196b0     00 88 02 FF 
196b4     00 FA 45 F5 | 	or	result1, ##84934656
196b8     44 00 00 FF 
196bc     8C E4 05 F1 | 	add	objptr, ##34956
196c0     F2 FA 61 FC | 	wrlong	result1, objptr
196c4     44 00 00 FF 
196c8     8C E4 85 F1 | 	sub	objptr, ##34956
196cc     F2 FA 01 F6 | 	mov	result1, objptr
196d0     00 90 02 FF 
196d4     00 FA 45 F5 | 	or	result1, ##85983232
196d8     44 00 00 FF 
196dc     90 E4 05 F1 | 	add	objptr, ##34960
196e0     F2 FA 61 FC | 	wrlong	result1, objptr
196e4     44 00 00 FF 
196e8     90 E4 85 F1 | 	sub	objptr, ##34960
196ec     F2 FA 01 F6 | 	mov	result1, objptr
196f0     00 98 02 FF 
196f4     00 FA 45 F5 | 	or	result1, ##87031808
196f8     44 00 00 FF 
196fc     94 E4 05 F1 | 	add	objptr, ##34964
19700     F2 FA 61 FC | 	wrlong	result1, objptr
19704     44 00 00 FF 
19708     94 E4 85 F1 | 	sub	objptr, ##34964
1970c     F2 FA 01 F6 | 	mov	result1, objptr
19710     00 A0 02 FF 
19714     00 FA 45 F5 | 	or	result1, ##88080384
19718     44 00 00 FF 
1971c     98 E4 05 F1 | 	add	objptr, ##34968
19720     F2 FA 61 FC | 	wrlong	result1, objptr
19724     44 00 00 FF 
19728     98 E4 85 F1 | 	sub	objptr, ##34968
1972c     F2 FA 01 F6 | 	mov	result1, objptr
19730     00 A8 02 FF 
19734     00 FA 45 F5 | 	or	result1, ##89128960
19738     44 00 00 FF 
1973c     9C E4 05 F1 | 	add	objptr, ##34972
19740     F2 FA 61 FC | 	wrlong	result1, objptr
19744     44 00 00 FF 
19748     9C E4 85 F1 | 	sub	objptr, ##34972
1974c     F2 FA 01 F6 | 	mov	result1, objptr
19750     00 B0 02 FF 
19754     00 FA 45 F5 | 	or	result1, ##90177536
19758     44 00 00 FF 
1975c     A8 E4 05 F1 | 	add	objptr, ##34984
19760     F2 FA 61 FC | 	wrlong	result1, objptr
19764     44 00 00 FF 
19768     A8 E4 85 F1 | 	sub	objptr, ##34984
1976c     F2 FA 01 F6 | 	mov	result1, objptr
19770     00 B8 02 FF 
19774     00 FA 45 F5 | 	or	result1, ##91226112
19778     44 00 00 FF 
1977c     A0 E4 05 F1 | 	add	objptr, ##34976
19780     F2 FA 61 FC | 	wrlong	result1, objptr
19784     44 00 00 FF 
19788     A0 E4 85 F1 | 	sub	objptr, ##34976
1978c     F2 FA 01 F6 | 	mov	result1, objptr
19790     00 C0 02 FF 
19794     00 FA 45 F5 | 	or	result1, ##92274688
19798     44 00 00 FF 
1979c     A4 E4 05 F1 | 	add	objptr, ##34980
197a0     F2 FA 61 FC | 	wrlong	result1, objptr
197a4     44 00 00 FF 
197a8     A4 E4 85 F1 | 	sub	objptr, ##34980
197ac     F2 FA 01 F6 | 	mov	result1, objptr
197b0     00 C8 02 FF 
197b4     00 FA 45 F5 | 	or	result1, ##93323264
197b8     44 00 00 FF 
197bc     AC E4 05 F1 | 	add	objptr, ##34988
197c0     F2 FA 61 FC | 	wrlong	result1, objptr
197c4     44 00 00 FF 
197c8     AC E4 85 F1 | 	sub	objptr, ##34988
197cc     F2 FA 01 F6 | 	mov	result1, objptr
197d0     00 D0 02 FF 
197d4     00 FA 45 F5 | 	or	result1, ##94371840
197d8     44 00 00 FF 
197dc     54 E4 05 F1 | 	add	objptr, ##34900
197e0     F2 FA 61 FC | 	wrlong	result1, objptr
197e4     44 00 00 FF 
197e8     54 E4 85 F1 | 	sub	objptr, ##34900
197ec     F2 FA 01 F6 | 	mov	result1, objptr
197f0     00 D8 02 FF 
197f4     00 FA 45 F5 | 	or	result1, ##95420416
197f8     44 00 00 FF 
197fc     5C E4 05 F1 | 	add	objptr, ##34908
19800     F2 FA 61 FC | 	wrlong	result1, objptr
19804     44 00 00 FF 
19808     5C E4 85 F1 | 	sub	objptr, ##34908
1980c     F2 FA 01 F6 | 	mov	result1, objptr
19810     00 E0 02 FF 
19814     00 FA 45 F5 | 	or	result1, ##96468992
19818     44 00 00 FF 
1981c     60 E4 05 F1 | 	add	objptr, ##34912
19820     F2 FA 61 FC | 	wrlong	result1, objptr
19824     44 00 00 FF 
19828     60 E4 85 F1 | 	sub	objptr, ##34912
1982c     F2 FA 01 F6 | 	mov	result1, objptr
19830     00 E8 02 FF 
19834     00 FA 45 F5 | 	or	result1, ##97517568
19838     44 00 00 FF 
1983c     B0 E4 05 F1 | 	add	objptr, ##34992
19840     F2 FA 61 FC | 	wrlong	result1, objptr
19844     44 00 00 FF 
19848     B0 E4 85 F1 | 	sub	objptr, ##34992
1984c     F2 FA 01 F6 | 	mov	result1, objptr
19850     00 F0 02 FF 
19854     00 FA 45 F5 | 	or	result1, ##98566144
19858     44 00 00 FF 
1985c     B4 E4 05 F1 | 	add	objptr, ##34996
19860     F2 FA 61 FC | 	wrlong	result1, objptr
19864     44 00 00 FF 
19868     B4 E4 85 F1 | 	sub	objptr, ##34996
1986c     F2 FA 01 F6 | 	mov	result1, objptr
19870     00 F8 02 FF 
19874     00 FA 45 F5 | 	or	result1, ##99614720
19878     44 00 00 FF 
1987c     B8 E4 05 F1 | 	add	objptr, ##35000
19880     F2 FA 61 FC | 	wrlong	result1, objptr
19884     44 00 00 FF 
19888     B8 E4 85 F1 | 	sub	objptr, ##35000
1988c     F2 FA 01 F6 | 	mov	result1, objptr
19890     39 FA 25 F4 | 	bith	result1, #57
19894     44 00 00 FF 
19898     64 E4 05 F1 | 	add	objptr, ##34916
1989c     F2 FA 61 FC | 	wrlong	result1, objptr
198a0     44 00 00 FF 
198a4     64 E4 85 F1 | 	sub	objptr, ##34916
198a8     F2 FA 01 F6 | 	mov	result1, objptr
198ac     00 08 03 FF 
198b0     00 FA 45 F5 | 	or	result1, ##101711872
198b4     44 00 00 FF 
198b8     C8 E4 05 F1 | 	add	objptr, ##35016
198bc     F2 FA 61 FC | 	wrlong	result1, objptr
198c0     44 00 00 FF 
198c4     C8 E4 85 F1 | 	sub	objptr, ##35016
198c8     F2 FA 01 F6 | 	mov	result1, objptr
198cc     00 10 03 FF 
198d0     00 FA 45 F5 | 	or	result1, ##102760448
198d4     44 00 00 FF 
198d8     D0 E4 05 F1 | 	add	objptr, ##35024
198dc     F2 FA 61 FC | 	wrlong	result1, objptr
198e0     44 00 00 FF 
198e4     D0 E4 85 F1 | 	sub	objptr, ##35024
198e8     F2 FA 01 F6 | 	mov	result1, objptr
198ec     00 18 03 FF 
198f0     00 FA 45 F5 | 	or	result1, ##103809024
198f4     44 00 00 FF 
198f8     C4 E4 05 F1 | 	add	objptr, ##35012
198fc     F2 FA 61 FC | 	wrlong	result1, objptr
19900     44 00 00 FF 
19904     C4 E4 85 F1 | 	sub	objptr, ##35012
19908     F2 FA 01 F6 | 	mov	result1, objptr
1990c     00 20 03 FF 
19910     00 FA 45 F5 | 	or	result1, ##104857600
19914     44 00 00 FF 
19918     C0 E4 05 F1 | 	add	objptr, ##35008
1991c     F2 FA 61 FC | 	wrlong	result1, objptr
19920     44 00 00 FF 
19924     C0 E4 85 F1 | 	sub	objptr, ##35008
19928     F2 FA 01 F6 | 	mov	result1, objptr
1992c     00 28 03 FF 
19930     00 FA 45 F5 | 	or	result1, ##105906176
19934     44 00 00 FF 
19938     BC E4 05 F1 | 	add	objptr, ##35004
1993c     F2 FA 61 FC | 	wrlong	result1, objptr
19940     44 00 00 FF 
19944     BC E4 85 F1 | 	sub	objptr, ##35004
19948     F2 FA 01 F6 | 	mov	result1, objptr
1994c     00 30 03 FF 
19950     00 FA 45 F5 | 	or	result1, ##106954752
19954     44 00 00 FF 
19958     CC E4 05 F1 | 	add	objptr, ##35020
1995c     F2 FA 61 FC | 	wrlong	result1, objptr
19960     44 00 00 FF 
19964     CC E4 85 F1 | 	sub	objptr, ##35020
19968     F2 FA 01 F6 | 	mov	result1, objptr
1996c     00 38 03 FF 
19970     00 FA 45 F5 | 	or	result1, ##108003328
19974     44 00 00 FF 
19978     D4 E4 05 F1 | 	add	objptr, ##35028
1997c     F2 FA 61 FC | 	wrlong	result1, objptr
19980     44 00 00 FF 
19984     D4 E4 85 F1 | 	sub	objptr, ##35028
19988     F2 FA 01 F6 | 	mov	result1, objptr
1998c     00 40 03 FF 
19990     00 FA 45 F5 | 	or	result1, ##109051904
19994     44 00 00 FF 
19998     D8 E4 05 F1 | 	add	objptr, ##35032
1999c     F2 FA 61 FC | 	wrlong	result1, objptr
199a0     44 00 00 FF 
199a4     D8 E4 85 F1 | 	sub	objptr, ##35032
199a8     F2 FA 01 F6 | 	mov	result1, objptr
199ac     00 48 03 FF 
199b0     00 FA 45 F5 | 	or	result1, ##110100480
199b4     44 00 00 FF 
199b8     DC E4 05 F1 | 	add	objptr, ##35036
199bc     F2 FA 61 FC | 	wrlong	result1, objptr
199c0     44 00 00 FF 
199c4     DC E4 85 F1 | 	sub	objptr, ##35036
199c8     F2 FA 01 F6 | 	mov	result1, objptr
199cc     00 50 03 FF 
199d0     00 FA 45 F5 | 	or	result1, ##111149056
199d4     44 00 00 FF 
199d8     E4 E4 05 F1 | 	add	objptr, ##35044
199dc     F2 FA 61 FC | 	wrlong	result1, objptr
199e0     44 00 00 FF 
199e4     E4 E4 85 F1 | 	sub	objptr, ##35044
199e8     F2 FA 01 F6 | 	mov	result1, objptr
199ec     00 58 03 FF 
199f0     00 FA 45 F5 | 	or	result1, ##112197632
199f4     44 00 00 FF 
199f8     E8 E4 05 F1 | 	add	objptr, ##35048
199fc     F2 FA 61 FC | 	wrlong	result1, objptr
19a00     44 00 00 FF 
19a04     E8 E4 85 F1 | 	sub	objptr, ##35048
19a08     F2 FA 01 F6 | 	mov	result1, objptr
19a0c     00 60 03 FF 
19a10     00 FA 45 F5 | 	or	result1, ##113246208
19a14     44 00 00 FF 
19a18     EC E4 05 F1 | 	add	objptr, ##35052
19a1c     F2 FA 61 FC | 	wrlong	result1, objptr
19a20     44 00 00 FF 
19a24     EC E4 85 F1 | 	sub	objptr, ##35052
19a28     F2 FA 01 F6 | 	mov	result1, objptr
19a2c     00 68 03 FF 
19a30     00 FA 45 F5 | 	or	result1, ##114294784
19a34     44 00 00 FF 
19a38     F0 E4 05 F1 | 	add	objptr, ##35056
19a3c     F2 FA 61 FC | 	wrlong	result1, objptr
19a40     44 00 00 FF 
19a44     F0 E4 85 F1 | 	sub	objptr, ##35056
19a48     F2 FA 01 F6 | 	mov	result1, objptr
19a4c     00 70 03 FF 
19a50     00 FA 45 F5 | 	or	result1, ##115343360
19a54     44 00 00 FF 
19a58     F4 E4 05 F1 | 	add	objptr, ##35060
19a5c     F2 FA 61 FC | 	wrlong	result1, objptr
19a60     44 00 00 FF 
19a64     F4 E4 85 F1 | 	sub	objptr, ##35060
19a68     F2 FA 01 F6 | 	mov	result1, objptr
19a6c     00 78 03 FF 
19a70     00 FA 45 F5 | 	or	result1, ##116391936
19a74     44 00 00 FF 
19a78     F8 E4 05 F1 | 	add	objptr, ##35064
19a7c     F2 FA 61 FC | 	wrlong	result1, objptr
19a80     44 00 00 FF 
19a84     F8 E4 85 F1 | 	sub	objptr, ##35064
19a88     F2 FA 01 F6 | 	mov	result1, objptr
19a8c     58 FA 25 F4 | 	bith	result1, #88
19a90     44 00 00 FF 
19a94     FC E4 05 F1 | 	add	objptr, ##35068
19a98     F2 FA 61 FC | 	wrlong	result1, objptr
19a9c     44 00 00 FF 
19aa0     FC E4 85 F1 | 	sub	objptr, ##35068
19aa4     F2 FA 01 F6 | 	mov	result1, objptr
19aa8     00 88 03 FF 
19aac     00 FA 45 F5 | 	or	result1, ##118489088
19ab0     44 00 00 FF 
19ab4     00 E5 05 F1 | 	add	objptr, ##35072
19ab8     F2 FA 61 FC | 	wrlong	result1, objptr
19abc     44 00 00 FF 
19ac0     00 E5 85 F1 | 	sub	objptr, ##35072
19ac4     F2 FA 01 F6 | 	mov	result1, objptr
19ac8     00 90 03 FF 
19acc     00 FA 45 F5 | 	or	result1, ##119537664
19ad0     44 00 00 FF 
19ad4     E0 E4 05 F1 | 	add	objptr, ##35040
19ad8     F2 FA 61 FC | 	wrlong	result1, objptr
19adc     44 00 00 FF 
19ae0     E0 E4 85 F1 | 	sub	objptr, ##35040
19ae4     F2 FA 01 F6 | 	mov	result1, objptr
19ae8     00 98 03 FF 
19aec     00 FA 45 F5 | 	or	result1, ##120586240
19af0     43 00 00 FF 
19af4     D8 E4 05 F1 | 	add	objptr, ##34520
19af8     F2 FA 61 FC | 	wrlong	result1, objptr
19afc     43 00 00 FF 
19b00     D8 E4 85 F1 | 	sub	objptr, ##34520
19b04     F2 FA 01 F6 | 	mov	result1, objptr
19b08     00 A0 03 FF 
19b0c     00 FA 45 F5 | 	or	result1, ##121634816
19b10     44 00 00 FF 
19b14     04 E5 05 F1 | 	add	objptr, ##35076
19b18     F2 FA 61 FC | 	wrlong	result1, objptr
19b1c     44 00 00 FF 
19b20     04 E5 85 F1 | 	sub	objptr, ##35076
19b24     F2 FA 01 F6 | 	mov	result1, objptr
19b28     00 A8 03 FF 
19b2c     00 FA 45 F5 | 	or	result1, ##122683392
19b30     44 00 00 FF 
19b34     08 E5 05 F1 | 	add	objptr, ##35080
19b38     F2 FA 61 FC | 	wrlong	result1, objptr
19b3c     44 00 00 FF 
19b40     08 E5 85 F1 | 	sub	objptr, ##35080
19b44     F2 FA 01 F6 | 	mov	result1, objptr
19b48     00 B0 03 FF 
19b4c     00 FA 45 F5 | 	or	result1, ##123731968
19b50     44 00 00 FF 
19b54     1C E5 05 F1 | 	add	objptr, ##35100
19b58     F2 FA 61 FC | 	wrlong	result1, objptr
19b5c     44 00 00 FF 
19b60     1C E5 85 F1 | 	sub	objptr, ##35100
19b64     F2 FA 01 F6 | 	mov	result1, objptr
19b68     00 B8 03 FF 
19b6c     00 FA 45 F5 | 	or	result1, ##124780544
19b70     44 00 00 FF 
19b74     18 E5 05 F1 | 	add	objptr, ##35096
19b78     F2 FA 61 FC | 	wrlong	result1, objptr
19b7c     44 00 00 FF 
19b80     18 E5 85 F1 | 	sub	objptr, ##35096
19b84     F2 FA 01 F6 | 	mov	result1, objptr
19b88     77 FA 25 F4 | 	bith	result1, #119
19b8c     44 00 00 FF 
19b90     10 E5 05 F1 | 	add	objptr, ##35088
19b94     F2 FA 61 FC | 	wrlong	result1, objptr
19b98     44 00 00 FF 
19b9c     10 E5 85 F1 | 	sub	objptr, ##35088
19ba0     F2 FA 01 F6 | 	mov	result1, objptr
19ba4     00 C8 03 FF 
19ba8     00 FA 45 F5 | 	or	result1, ##126877696
19bac     44 00 00 FF 
19bb0     0C E5 05 F1 | 	add	objptr, ##35084
19bb4     F2 FA 61 FC | 	wrlong	result1, objptr
19bb8     44 00 00 FF 
19bbc     0C E5 85 F1 | 	sub	objptr, ##35084
19bc0     F2 FA 01 F6 | 	mov	result1, objptr
19bc4     00 D0 03 FF 
19bc8     00 FA 45 F5 | 	or	result1, ##127926272
19bcc     44 00 00 FF 
19bd0     2C E5 05 F1 | 	add	objptr, ##35116
19bd4     F2 FA 61 FC | 	wrlong	result1, objptr
19bd8     44 00 00 FF 
19bdc     2C E5 85 F1 | 	sub	objptr, ##35116
19be0     F2 FA 01 F6 | 	mov	result1, objptr
19be4     00 D8 03 FF 
19be8     00 FA 45 F5 | 	or	result1, ##128974848
19bec     44 00 00 FF 
19bf0     20 E5 05 F1 | 	add	objptr, ##35104
19bf4     F2 FA 61 FC | 	wrlong	result1, objptr
19bf8     44 00 00 FF 
19bfc     20 E5 85 F1 | 	sub	objptr, ##35104
19c00     F2 FA 01 F6 | 	mov	result1, objptr
19c04     96 FA 25 F4 | 	bith	result1, #150
19c08     44 00 00 FF 
19c0c     24 E5 05 F1 | 	add	objptr, ##35108
19c10     F2 FA 61 FC | 	wrlong	result1, objptr
19c14     44 00 00 FF 
19c18     24 E5 85 F1 | 	sub	objptr, ##35108
19c1c     F2 FA 01 F6 | 	mov	result1, objptr
19c20     00 E8 03 FF 
19c24     00 FA 45 F5 | 	or	result1, ##131072000
19c28     44 00 00 FF 
19c2c     28 E5 05 F1 | 	add	objptr, ##35112
19c30     F2 FA 61 FC | 	wrlong	result1, objptr
19c34     44 00 00 FF 
19c38     28 E5 85 F1 | 	sub	objptr, ##35112
19c3c     F2 FA 01 F6 | 	mov	result1, objptr
19c40     B5 FA 25 F4 | 	bith	result1, #181
19c44     44 00 00 FF 
19c48     30 E5 05 F1 | 	add	objptr, ##35120
19c4c     F2 FA 61 FC | 	wrlong	result1, objptr
19c50     44 00 00 FF 
19c54     30 E5 85 F1 | 	sub	objptr, ##35120
19c58     F2 FA 01 F6 | 	mov	result1, objptr
19c5c     D4 FA 25 F4 | 	bith	result1, #212
19c60     44 00 00 FF 
19c64     34 E5 05 F1 | 	add	objptr, ##35124
19c68     F2 FA 61 FC | 	wrlong	result1, objptr
19c6c     44 00 00 FF 
19c70     34 E5 85 F1 | 	sub	objptr, ##35124
19c74     F2 FA 01 F6 | 	mov	result1, objptr
19c78     1B FA 25 F4 | 	bith	result1, #27
19c7c     44 00 00 FF 
19c80     38 E5 05 F1 | 	add	objptr, ##35128
19c84     F2 FA 61 FC | 	wrlong	result1, objptr
19c88     44 00 00 FF 
19c8c     38 E5 85 F1 | 	sub	objptr, ##35128
19c90     F2 FA 01 F6 | 	mov	result1, objptr
19c94     00 08 04 FF 
19c98     00 FA 45 F5 | 	or	result1, ##135266304
19c9c     44 00 00 FF 
19ca0     3C E5 05 F1 | 	add	objptr, ##35132
19ca4     F2 FA 61 FC | 	wrlong	result1, objptr
19ca8     44 00 00 FF 
19cac     3C E5 85 F1 | 	sub	objptr, ##35132
19cb0     F2 FA 01 F6 | 	mov	result1, objptr
19cb4     00 10 04 FF 
19cb8     00 FA 45 F5 | 	or	result1, ##136314880
19cbc     44 00 00 FF 
19cc0     40 E5 05 F1 | 	add	objptr, ##35136
19cc4     F2 FA 61 FC | 	wrlong	result1, objptr
19cc8     44 00 00 FF 
19ccc     40 E5 85 F1 | 	sub	objptr, ##35136
19cd0     F2 FA 01 F6 | 	mov	result1, objptr
19cd4     00 18 04 FF 
19cd8     00 FA 45 F5 | 	or	result1, ##137363456
19cdc     44 00 00 FF 
19ce0     44 E5 05 F1 | 	add	objptr, ##35140
19ce4     F2 FA 61 FC | 	wrlong	result1, objptr
19ce8     44 00 00 FF 
19cec     44 E5 85 F1 | 	sub	objptr, ##35140
19cf0                 | _init_commands_ret
19cf0     2D 00 64 FD | 	ret
19cf4                 | 
19cf4                 | ' 
19cf4                 | ' ''--------------------------------Error strings -------------------------------------
19cf4                 | ' sub init_audio
19cf4                 | _init_audio
19cf4     06 4A 05 F6 | 	mov	COUNT_, #6
19cf8     A8 00 A0 FD | 	call	#pushregs_
19cfc     00 C0 1F FF 
19d00     00 1E 06 F6 | 	mov	local01, ##1065353216
19d04                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
19d04                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
19d04                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
19d04                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
19d04                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
19d04                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
19d04                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
19d04                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
19d04                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
19d04     00 20 06 F6 | 	mov	local02, #0
19d08                 | LR__2070
19d08     10 23 02 F6 | 	mov	local03, local02
19d0c     01 22 66 F0 | 	shl	local03, #1
19d10     58 7F 23 FF 
19d14     00 24 06 F6 | 	mov	local04, ##1191096320
19d18     10 13 52 F6 | 	abs	arg01, local02 wc
19d1c     1F 26 C6 C9 |  if_b	decod	local05, #31
19d20     00 26 06 36 |  if_ae	mov	local05, #0
19d24     E8 77 B0 FD | 	call	#__system___float_fromuns
19d28     13 FB 61 F5 | 	xor	result1, local05
19d2c     FD 12 02 F6 | 	mov	arg01, result1
19d30     87 24 20 FF 
19d34     DB 15 06 F6 | 	mov	arg02, ##1078530011
19d38     D8 7B B0 FD | 	call	#__system___float_mul
19d3c     FD 12 02 F6 | 	mov	arg01, result1
19d40     00 00 22 FF 
19d44     00 14 06 F6 | 	mov	arg02, ##1140850688
19d48     CC 7D B0 FD | 	call	#__system___float_div
19d4c     FD 12 02 F6 | 	mov	arg01, result1
19d50     FC 84 B0 FD | 	call	#__system____builtin_sinf
19d54     FD 14 02 F6 | 	mov	arg02, result1
19d58     12 13 02 F6 | 	mov	arg01, local04
19d5c     B4 7B B0 FD | 	call	#__system___float_mul
19d60     FD 12 02 F6 | 	mov	arg01, result1
19d64     01 14 06 F6 | 	mov	arg02, #1
19d68     70 80 B0 FD | 	call	#__system___float_tointeger
19d6c     FD 14 02 F6 | 	mov	arg02, result1
19d70     11 13 02 F6 | 	mov	arg01, local03
19d74     58 0D B0 FD | 	call	#_psdpoke
19d78     01 20 06 F1 | 	add	local02, #1
19d7c     02 00 00 FF 
19d80     00 20 56 F2 | 	cmps	local02, ##1024 wc
19d84     80 FF 9F CD |  if_b	jmp	#LR__2070
19d88                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
19d88     00 20 06 F6 | 	mov	local02, #0
19d8c                 | LR__2071
19d8c     10 15 02 F6 | 	mov	arg02, local02
19d90     01 14 66 F0 | 	shl	arg02, #1
19d94     0B 12 C6 F9 | 	decod	arg01, #11
19d98     0A 13 02 F1 | 	add	arg01, arg02
19d9c     10 25 02 F6 | 	mov	local04, local02
19da0     07 24 66 F0 | 	shl	local04, #7
19da4     10 25 82 F1 | 	sub	local04, local02
19da8     C0 FF 7F FF 
19dac     00 15 06 F6 | 	mov	arg02, ##-32512
19db0     12 15 02 F1 | 	add	arg02, local04
19db4     18 0D B0 FD | 	call	#_psdpoke
19db8     09 24 C6 F9 | 	decod	local04, #9
19dbc     10 25 02 F1 | 	add	local04, local02
19dc0     01 24 66 F0 | 	shl	local04, #1
19dc4     0B 12 C6 F9 | 	decod	arg01, #11
19dc8     12 13 02 F1 | 	add	arg01, local04
19dcc     10 27 02 F6 | 	mov	local05, local02
19dd0     07 26 66 F0 | 	shl	local05, #7
19dd4     10 27 82 F1 | 	sub	local05, local02
19dd8     3F 00 00 FF 
19ddc     00 15 06 F6 | 	mov	arg02, ##32512
19de0     13 15 82 F1 | 	sub	arg02, local05
19de4     E8 0C B0 FD | 	call	#_psdpoke
19de8     01 20 06 F1 | 	add	local02, #1
19dec     01 00 00 FF 
19df0     00 20 56 F2 | 	cmps	local02, ##512 wc
19df4     94 FF 9F CD |  if_b	jmp	#LR__2071
19df8                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
19df8     00 20 06 F6 | 	mov	local02, #0
19dfc                 | LR__2072
19dfc     10 27 02 F6 | 	mov	local05, local02
19e00     01 26 66 F0 | 	shl	local05, #1
19e04     0C 12 C6 F9 | 	decod	arg01, #12
19e08     13 13 02 F1 | 	add	arg01, local05
19e0c     10 27 02 F6 | 	mov	local05, local02
19e10     06 26 66 F0 | 	shl	local05, #6
19e14     10 27 82 F1 | 	sub	local05, local02
19e18     C1 FF 7F FF 
19e1c     00 14 06 F6 | 	mov	arg02, ##-32256
19e20     13 15 02 F1 | 	add	arg02, local05
19e24     A8 0C B0 FD | 	call	#_psdpoke
19e28     01 20 06 F1 | 	add	local02, #1
19e2c     02 00 00 FF 
19e30     00 20 56 F2 | 	cmps	local02, ##1024 wc
19e34     C4 FF 9F CD |  if_b	jmp	#LR__2072
19e38                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
19e38     00 20 06 F6 | 	mov	local02, #0
19e3c                 | LR__2073
19e3c     10 27 02 F6 | 	mov	local05, local02
19e40     01 26 66 F0 | 	shl	local05, #1
19e44     0C 00 00 FF 
19e48     00 12 06 F6 | 	mov	arg01, ##6144
19e4c     13 13 02 F1 | 	add	arg01, local05
19e50     C0 FF 7F FF 
19e54     A8 14 06 F6 | 	mov	arg02, ##-32600
19e58     74 0C B0 FD | 	call	#_psdpoke
19e5c     01 20 06 F1 | 	add	local02, #1
19e60     80 20 56 F2 | 	cmps	local02, #128 wc
19e64     D4 FF 9F CD |  if_b	jmp	#LR__2073
19e68     80 20 06 F6 | 	mov	local02, #128
19e6c                 | LR__2074
19e6c     10 27 02 F6 | 	mov	local05, local02
19e70     01 26 66 F0 | 	shl	local05, #1
19e74     0C 00 00 FF 
19e78     00 12 06 F6 | 	mov	arg01, ##6144
19e7c     13 13 02 F1 | 	add	arg01, local05
19e80     3F 00 00 FF 
19e84     58 15 06 F6 | 	mov	arg02, ##32600
19e88     44 0C B0 FD | 	call	#_psdpoke
19e8c     01 20 06 F1 | 	add	local02, #1
19e90     02 00 00 FF 
19e94     00 20 16 F2 | 	cmp	local02, ##1024 wc
19e98     D0 FF 9F CD |  if_b	jmp	#LR__2074
19e9c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
19e9c     00 20 06 F6 | 	mov	local02, #0
19ea0                 | LR__2075
19ea0     10 27 02 F6 | 	mov	local05, local02
19ea4     01 26 66 F0 | 	shl	local05, #1
19ea8     0D 12 C6 F9 | 	decod	arg01, #13
19eac     13 13 02 F1 | 	add	arg01, local05
19eb0     C0 FF 7F FF 
19eb4     A8 14 06 F6 | 	mov	arg02, ##-32600
19eb8     14 0C B0 FD | 	call	#_psdpoke
19ebc     01 20 06 F1 | 	add	local02, #1
19ec0     01 00 00 FF 
19ec4     00 20 56 F2 | 	cmps	local02, ##512 wc
19ec8     D4 FF 9F CD |  if_b	jmp	#LR__2075
19ecc     09 20 C6 F9 | 	decod	local02, #9
19ed0                 | LR__2076
19ed0     10 27 02 F6 | 	mov	local05, local02
19ed4     01 26 66 F0 | 	shl	local05, #1
19ed8     0D 12 C6 F9 | 	decod	arg01, #13
19edc     13 13 02 F1 | 	add	arg01, local05
19ee0     3F 00 00 FF 
19ee4     58 15 06 F6 | 	mov	arg02, ##32600
19ee8     E4 0B B0 FD | 	call	#_psdpoke
19eec     01 20 06 F1 | 	add	local02, #1
19ef0     02 00 00 FF 
19ef4     00 20 16 F2 | 	cmp	local02, ##1024 wc
19ef8     D4 FF 9F CD |  if_b	jmp	#LR__2076
19efc                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
19efc     00 20 06 F6 | 	mov	local02, #0
19f00                 | LR__2077
19f00     10 27 02 F6 | 	mov	local05, local02
19f04     01 26 66 F0 | 	shl	local05, #1
19f08     14 00 00 FF 
19f0c     00 12 06 F6 | 	mov	arg01, ##10240
19f10     13 13 02 F1 | 	add	arg01, local05
19f14     C0 FF 7F FF 
19f18     A8 14 06 F6 | 	mov	arg02, ##-32600
19f1c     B0 0B B0 FD | 	call	#_psdpoke
19f20     01 20 06 F1 | 	add	local02, #1
19f24     00 21 56 F2 | 	cmps	local02, #256 wc
19f28     D4 FF 9F CD |  if_b	jmp	#LR__2077
19f2c     00 21 06 F6 | 	mov	local02, #256
19f30                 | LR__2078
19f30     10 27 02 F6 | 	mov	local05, local02
19f34     01 26 66 F0 | 	shl	local05, #1
19f38     14 00 00 FF 
19f3c     00 12 06 F6 | 	mov	arg01, ##10240
19f40     13 13 02 F1 | 	add	arg01, local05
19f44     3F 00 00 FF 
19f48     58 15 06 F6 | 	mov	arg02, ##32600
19f4c     80 0B B0 FD | 	call	#_psdpoke
19f50     01 20 06 F1 | 	add	local02, #1
19f54     02 00 00 FF 
19f58     00 20 16 F2 | 	cmp	local02, ##1024 wc
19f5c     D0 FF 9F CD |  if_b	jmp	#LR__2078
19f60                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
19f60     18 00 00 FF 
19f64     00 20 06 F6 | 	mov	local02, ##12288
19f68                 | LR__2079
19f68     10 13 02 F6 | 	mov	arg01, local02
19f6c     00 14 06 F6 | 	mov	arg02, #0
19f70     14 0B B0 FD | 	call	#_pslpoke
19f74     04 20 06 F1 | 	add	local02, #4
19f78     77 00 00 FF 
19f7c     FD 21 56 F2 | 	cmps	local02, ##61437 wc
19f80     E4 FF 9F CD |  if_b	jmp	#LR__2079
19f84                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
19f84     00 20 06 F6 | 	mov	local02, #0
19f88                 | LR__2080
19f88     10 27 02 F6 | 	mov	local05, local02
19f8c     01 26 66 F0 | 	shl	local05, #1
19f90     78 00 00 FF 
19f94     00 22 06 F6 | 	mov	local03, ##61440
19f98     13 23 02 F1 | 	add	local03, local05
19f9c     14 00 00 FF 
19fa0     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
19fa4     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19fa8     14 00 00 FF 
19fac     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
19fb0     10 12 06 F1 | 	add	arg01, #16
19fb4     10 15 02 F6 | 	mov	arg02, local02
19fb8     01 14 66 F0 | 	shl	arg02, #1
19fbc     0A 13 02 F1 | 	add	arg01, arg02
19fc0     09 15 E2 FA | 	rdword	arg02, arg01
19fc4     11 13 02 F6 | 	mov	arg01, local03
19fc8     04 0B B0 FD | 	call	#_psdpoke
19fcc     01 20 06 F1 | 	add	local02, #1
19fd0     02 00 00 FF 
19fd4     00 20 56 F2 | 	cmps	local02, ##1024 wc
19fd8     AC FF 9F CD |  if_b	jmp	#LR__2080
19fdc                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
19fdc     00 20 06 F6 | 	mov	local02, #0
19fe0                 | LR__2081
19fe0     10 27 02 F6 | 	mov	local05, local02
19fe4     01 26 66 F0 | 	shl	local05, #1
19fe8     7C 00 00 FF 
19fec     00 22 06 F6 | 	mov	local03, ##63488
19ff0     13 23 02 F1 | 	add	local03, local05
19ff4     10 00 00 FF 
19ff8     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
19ffc     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1a000     10 00 00 FF 
1a004     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1a008     10 12 06 F1 | 	add	arg01, #16
1a00c     10 15 02 F6 | 	mov	arg02, local02
1a010     01 14 66 F0 | 	shl	arg02, #1
1a014     0A 13 02 F1 | 	add	arg01, arg02
1a018     09 15 E2 FA | 	rdword	arg02, arg01
1a01c     11 13 02 F6 | 	mov	arg01, local03
1a020     AC 0A B0 FD | 	call	#_psdpoke
1a024     01 20 06 F1 | 	add	local02, #1
1a028     02 00 00 FF 
1a02c     00 20 56 F2 | 	cmps	local02, ##1024 wc
1a030     AC FF 9F CD |  if_b	jmp	#LR__2081
1a034                 | ' 
1a034                 | ' 
1a034                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1a034     00 20 06 F6 | 	mov	local02, #0
1a038     0C 00 00 FF 
1a03c     D8 E4 05 F1 | 	add	objptr, ##6360
1a040     97 18 48 FB | 	callpa	#(@LR__2083-@LR__2082)>>2,fcache_load_ptr_
1a044                 | LR__2082
1a044     10 27 02 F6 | 	mov	local05, local02
1a048     01 26 66 F0 | 	shl	local05, #1
1a04c     F2 26 02 F1 | 	add	local05, objptr
1a050     10 23 02 F6 | 	mov	local03, local02
1a054     08 22 66 F0 | 	shl	local03, #8
1a058     7F 00 00 FF 
1a05c     00 29 06 F6 | 	mov	local06, ##65280
1a060     11 29 82 F1 | 	sub	local06, local03
1a064     13 29 52 FC | 	wrword	local06, local05
1a068     01 20 06 F1 | 	add	local02, #1
1a06c     00 21 56 F2 | 	cmps	local02, #256 wc
1a070     D0 FF 9F CD |  if_b	jmp	#LR__2082
1a074                 | LR__2083
1a074     0C 00 00 FF 
1a078     D8 E4 85 F1 | 	sub	objptr, ##6360
1a07c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1a07c     00 20 06 F6 | 	mov	local02, #0
1a080                 | LR__2084
1a080     10 27 02 F6 | 	mov	local05, local02
1a084     01 26 66 F0 | 	shl	local05, #1
1a088     0D 00 00 FF 
1a08c     D8 E4 05 F1 | 	add	objptr, ##6872
1a090     F2 26 02 F1 | 	add	local05, objptr
1a094     80 BF 23 FF 
1a098     00 12 06 F6 | 	mov	arg01, ##1199505408
1a09c     0F 15 02 F6 | 	mov	arg02, local01
1a0a0     0D 00 00 FF 
1a0a4     D8 E4 85 F1 | 	sub	objptr, ##6872
1a0a8     68 78 B0 FD | 	call	#__system___float_mul
1a0ac     FD 12 02 F6 | 	mov	arg01, result1
1a0b0     01 14 06 F6 | 	mov	arg02, #1
1a0b4     24 7D B0 FD | 	call	#__system___float_tointeger
1a0b8     13 FB 51 FC | 	wrword	result1, local05
1a0bc     0F 13 02 F6 | 	mov	arg01, local01
1a0c0     CC BC 1F FF 
1a0c4     9A 15 06 F6 | 	mov	arg02, ##1064933786
1a0c8     48 78 B0 FD | 	call	#__system___float_mul
1a0cc     FD 1E 02 F6 | 	mov	local01, result1
1a0d0     01 20 06 F1 | 	add	local02, #1
1a0d4     00 21 56 F2 | 	cmps	local02, #256 wc
1a0d8     A4 FF 9F CD |  if_b	jmp	#LR__2084
1a0dc     0E 00 00 FF 
1a0e0     D6 E4 05 F1 | 	add	objptr, ##7382
1a0e4     F2 00 58 FC | 	wrword	#0, objptr
1a0e8                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1a0e8     00 20 06 F6 | 	mov	local02, #0
1a0ec     02 E4 05 F1 | 	add	objptr, #2
1a0f0     97 10 48 FB | 	callpa	#(@LR__2086-@LR__2085)>>2,fcache_load_ptr_
1a0f4                 | LR__2085
1a0f4     10 27 02 F6 | 	mov	local05, local02
1a0f8     01 26 66 F0 | 	shl	local05, #1
1a0fc     F2 26 02 F1 | 	add	local05, objptr
1a100     7F 00 80 FF 
1a104     13 01 5A FC | 	wrword	##65280, local05
1a108     01 20 06 F1 | 	add	local02, #1
1a10c     FF 20 56 F2 | 	cmps	local02, #255 wc
1a110     E0 FF 9F CD |  if_b	jmp	#LR__2085
1a114                 | LR__2086
1a114     FE E5 05 F1 | 	add	objptr, #510
1a118     F2 00 58 FC | 	wrword	#0, objptr
1a11c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1a11c     00 20 06 F6 | 	mov	local02, #0
1a120     02 E4 05 F1 | 	add	objptr, #2
1a124     97 52 48 FB | 	callpa	#(@LR__2091-@LR__2087)>>2,fcache_load_ptr_
1a128                 | LR__2087
1a128     10 27 02 F6 | 	mov	local05, local02
1a12c     01 26 66 F0 | 	shl	local05, #1
1a130     F2 26 02 F1 | 	add	local05, objptr
1a134     10 29 02 F6 | 	mov	local06, local02
1a138     0C 28 66 F0 | 	shl	local06, #12
1a13c     13 29 52 FC | 	wrword	local06, local05
1a140     01 20 06 F1 | 	add	local02, #1
1a144     10 20 56 F2 | 	cmps	local02, #16 wc
1a148     DC FF 9F CD |  if_b	jmp	#LR__2087
1a14c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1a14c     10 20 06 F6 | 	mov	local02, #16
1a150                 | LR__2088
1a150     10 27 02 F6 | 	mov	local05, local02
1a154     01 26 66 F0 | 	shl	local05, #1
1a158     F2 26 02 F1 | 	add	local05, objptr
1a15c     7F 00 80 FF 
1a160     13 01 5A FC | 	wrword	##65280, local05
1a164     01 20 06 F1 | 	add	local02, #1
1a168     F0 20 16 F2 | 	cmp	local02, #240 wc
1a16c     E0 FF 9F CD |  if_b	jmp	#LR__2088
1a170                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1a170     F0 20 06 F6 | 	mov	local02, #240
1a174                 | LR__2089
1a174     10 27 02 F6 | 	mov	local05, local02
1a178     01 26 66 F0 | 	shl	local05, #1
1a17c     F2 26 02 F1 | 	add	local05, objptr
1a180     FF 22 06 F6 | 	mov	local03, #255
1a184     10 23 82 F1 | 	sub	local03, local02
1a188     0C 22 66 F0 | 	shl	local03, #12
1a18c     13 23 52 FC | 	wrword	local03, local05
1a190     01 20 06 F1 | 	add	local02, #1
1a194     00 21 16 F2 | 	cmp	local02, #256 wc
1a198     D8 FF 9F CD |  if_b	jmp	#LR__2089
1a19c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1a19c     00 20 06 F6 | 	mov	local02, #0
1a1a0     01 00 00 FF 
1a1a4     00 E4 05 F1 | 	add	objptr, ##512
1a1a8                 | LR__2090
1a1a8     10 27 02 F6 | 	mov	local05, local02
1a1ac     01 26 66 F0 | 	shl	local05, #1
1a1b0     F2 26 02 F1 | 	add	local05, objptr
1a1b4     10 29 02 F6 | 	mov	local06, local02
1a1b8     08 28 66 F0 | 	shl	local06, #8
1a1bc     13 29 52 FC | 	wrword	local06, local05
1a1c0     01 20 06 F1 | 	add	local02, #1
1a1c4     00 21 56 F2 | 	cmps	local02, #256 wc
1a1c8     DC FF 9F CD |  if_b	jmp	#LR__2090
1a1cc                 | LR__2091
1a1cc     FE E5 05 F1 | 	add	objptr, #510
1a1d0     F2 00 58 FC | 	wrword	#0, objptr
1a1d4                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1a1d4     00 20 06 F6 | 	mov	local02, #0
1a1d8     02 E4 05 F1 | 	add	objptr, #2
1a1dc     97 6A 48 FB | 	callpa	#(@LR__2096-@LR__2092)>>2,fcache_load_ptr_
1a1e0                 | LR__2092
1a1e0     10 27 02 F6 | 	mov	local05, local02
1a1e4     01 26 66 F0 | 	shl	local05, #1
1a1e8     F2 26 02 F1 | 	add	local05, objptr
1a1ec     10 29 02 F6 | 	mov	local06, local02
1a1f0     04 28 66 F0 | 	shl	local06, #4
1a1f4     10 29 02 F1 | 	add	local06, local02
1a1f8     04 28 66 F0 | 	shl	local06, #4
1a1fc     13 29 52 FC | 	wrword	local06, local05
1a200     01 20 06 F1 | 	add	local02, #1
1a204     F0 20 56 F2 | 	cmps	local02, #240 wc
1a208     D4 FF 9F CD |  if_b	jmp	#LR__2092
1a20c     F0 20 06 F6 | 	mov	local02, #240
1a210                 | LR__2093
1a210     10 27 02 F6 | 	mov	local05, local02
1a214     01 26 66 F0 | 	shl	local05, #1
1a218     F2 26 02 F1 | 	add	local05, objptr
1a21c     FF 22 06 F6 | 	mov	local03, #255
1a220     10 23 82 F1 | 	sub	local03, local02
1a224     0C 22 66 F0 | 	shl	local03, #12
1a228     13 23 52 FC | 	wrword	local03, local05
1a22c     01 20 06 F1 | 	add	local02, #1
1a230     00 21 16 F2 | 	cmp	local02, #256 wc
1a234     D8 FF 9F CD |  if_b	jmp	#LR__2093
1a238                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1a238     00 20 06 F6 | 	mov	local02, #0
1a23c     01 00 00 FF 
1a240     00 E4 05 F1 | 	add	objptr, ##512
1a244                 | LR__2094
1a244     10 27 02 F6 | 	mov	local05, local02
1a248     01 26 66 F0 | 	shl	local05, #1
1a24c     F2 26 02 F1 | 	add	local05, objptr
1a250     10 29 02 F6 | 	mov	local06, local02
1a254     09 28 66 F0 | 	shl	local06, #9
1a258     13 29 52 FC | 	wrword	local06, local05
1a25c     FF 26 06 F6 | 	mov	local05, #255
1a260     10 27 82 F1 | 	sub	local05, local02
1a264     01 26 66 F0 | 	shl	local05, #1
1a268     F2 26 02 F1 | 	add	local05, objptr
1a26c     10 29 02 F6 | 	mov	local06, local02
1a270     09 28 66 F0 | 	shl	local06, #9
1a274     13 29 52 FC | 	wrword	local06, local05
1a278     01 20 06 F1 | 	add	local02, #1
1a27c     80 20 56 F2 | 	cmps	local02, #128 wc
1a280     C0 FF 9F CD |  if_b	jmp	#LR__2094
1a284                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1a284     00 20 06 F6 | 	mov	local02, #0
1a288     01 00 00 FF 
1a28c     00 E4 05 F1 | 	add	objptr, ##512
1a290                 | LR__2095
1a290     10 27 02 F6 | 	mov	local05, local02
1a294     01 26 66 F0 | 	shl	local05, #1
1a298     F2 26 02 F1 | 	add	local05, objptr
1a29c     10 29 02 F6 | 	mov	local06, local02
1a2a0     0D 28 66 F0 | 	shl	local06, #13
1a2a4     13 29 52 FC | 	wrword	local06, local05
1a2a8     01 20 06 F1 | 	add	local02, #1
1a2ac     08 20 56 F2 | 	cmps	local02, #8 wc
1a2b0     DC FF 9F CD |  if_b	jmp	#LR__2095
1a2b4                 | LR__2096
1a2b4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1a2b4     08 20 06 F6 | 	mov	local02, #8
1a2b8     97 42 48 FB | 	callpa	#(@LR__2100-@LR__2097)>>2,fcache_load_ptr_
1a2bc                 | LR__2097
1a2bc     10 27 02 F6 | 	mov	local05, local02
1a2c0     01 26 66 F0 | 	shl	local05, #1
1a2c4     F2 26 02 F1 | 	add	local05, objptr
1a2c8     10 1F 02 F6 | 	mov	local01, local02
1a2cc     08 1E 86 F1 | 	sub	local01, #8
1a2d0     0B 1E 66 F0 | 	shl	local01, #11
1a2d4     7F 00 00 FF 
1a2d8     00 29 06 F6 | 	mov	local06, ##65280
1a2dc     0F 29 82 F1 | 	sub	local06, local01
1a2e0     13 29 52 FC | 	wrword	local06, local05
1a2e4     01 20 06 F1 | 	add	local02, #1
1a2e8     18 20 16 F2 | 	cmp	local02, #24 wc
1a2ec     CC FF 9F CD |  if_b	jmp	#LR__2097
1a2f0                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1a2f0     18 20 06 F6 | 	mov	local02, #24
1a2f4                 | LR__2098
1a2f4     10 27 02 F6 | 	mov	local05, local02
1a2f8     01 26 66 F0 | 	shl	local05, #1
1a2fc     F2 26 02 F1 | 	add	local05, objptr
1a300     40 00 80 FF 
1a304     13 01 58 FC | 	wrword	##32768, local05
1a308     01 20 06 F1 | 	add	local02, #1
1a30c     81 20 16 F2 | 	cmp	local02, #129 wc
1a310     E0 FF 9F CD |  if_b	jmp	#LR__2098
1a314                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1a314     81 20 06 F6 | 	mov	local02, #129
1a318                 | LR__2099
1a318     10 27 02 F6 | 	mov	local05, local02
1a31c     01 26 66 F0 | 	shl	local05, #1
1a320     F2 26 02 F1 | 	add	local05, objptr
1a324     FF 22 06 F6 | 	mov	local03, #255
1a328     10 23 82 F1 | 	sub	local03, local02
1a32c     08 22 66 F0 | 	shl	local03, #8
1a330     13 23 52 FC | 	wrword	local03, local05
1a334     01 20 06 F1 | 	add	local02, #1
1a338     00 21 16 F2 | 	cmp	local02, #256 wc
1a33c     D8 FF 9F CD |  if_b	jmp	#LR__2099
1a340                 | LR__2100
1a340     46 00 00 FF 
1a344     0A E5 05 F1 | 	add	objptr, ##36106
1a348     F2 00 59 FC | 	wrword	#128, objptr
1a34c     59 00 00 FF 
1a350     E2 E5 85 F1 | 	sub	objptr, ##46050
1a354                 | ' for i=0 to 7
1a354     00 20 06 F6 | 	mov	local02, #0
1a358     97 8E 48 FB | 	callpa	#(@LR__2102-@LR__2101)>>2,fcache_load_ptr_
1a35c                 | LR__2101
1a35c     10 27 02 F6 | 	mov	local05, local02
1a360     01 26 66 F0 | 	shl	local05, #1
1a364     10 27 02 F1 | 	add	local05, local02
1a368     03 26 66 F0 | 	shl	local05, #3
1a36c     14 00 00 FF 
1a370     68 E5 05 F1 | 	add	objptr, ##10600
1a374     F2 26 02 F1 | 	add	local05, objptr
1a378     00 EE A1 FF 
1a37c     13 01 68 FC | 	wrlong	##1138491392, local05
1a380     10 27 02 F6 | 	mov	local05, local02
1a384     01 26 66 F0 | 	shl	local05, #1
1a388     10 27 02 F1 | 	add	local05, local02
1a38c     03 26 66 F0 | 	shl	local05, #3
1a390     F2 26 02 F1 | 	add	local05, objptr
1a394     04 26 06 F1 | 	add	local05, #4
1a398     13 21 42 FC | 	wrbyte	local02, local05
1a39c     10 27 02 F6 | 	mov	local05, local02
1a3a0     01 26 66 F0 | 	shl	local05, #1
1a3a4     10 27 02 F1 | 	add	local05, local02
1a3a8     03 26 66 F0 | 	shl	local05, #3
1a3ac     F2 26 02 F1 | 	add	local05, objptr
1a3b0     05 26 06 F1 | 	add	local05, #5
1a3b4     13 21 42 FC | 	wrbyte	local02, local05
1a3b8     10 27 02 F6 | 	mov	local05, local02
1a3bc     01 26 66 F0 | 	shl	local05, #1
1a3c0     10 27 02 F1 | 	add	local05, local02
1a3c4     03 26 66 F0 | 	shl	local05, #3
1a3c8     F2 26 02 F1 | 	add	local05, objptr
1a3cc     06 26 06 F1 | 	add	local05, #6
1a3d0     13 01 58 FC | 	wrword	#0, local05
1a3d4     10 27 02 F6 | 	mov	local05, local02
1a3d8     01 26 66 F0 | 	shl	local05, #1
1a3dc     10 27 02 F1 | 	add	local05, local02
1a3e0     03 26 66 F0 | 	shl	local05, #3
1a3e4     F2 26 02 F1 | 	add	local05, objptr
1a3e8     08 26 06 F1 | 	add	local05, #8
1a3ec     00 C0 9F FF 
1a3f0     13 01 68 FC | 	wrlong	##1065353216, local05
1a3f4     10 27 02 F6 | 	mov	local05, local02
1a3f8     01 26 66 F0 | 	shl	local05, #1
1a3fc     10 27 02 F1 | 	add	local05, local02
1a400     03 26 66 F0 | 	shl	local05, #3
1a404     F2 26 02 F1 | 	add	local05, objptr
1a408     0C 26 06 F1 | 	add	local05, #12
1a40c     00 40 A0 FF 
1a410     13 01 68 FC | 	wrlong	##1082130432, local05
1a414     10 27 02 F6 | 	mov	local05, local02
1a418     01 26 66 F0 | 	shl	local05, #1
1a41c     10 27 02 F1 | 	add	local05, local02
1a420     03 26 66 F0 | 	shl	local05, #3
1a424     F2 26 02 F1 | 	add	local05, objptr
1a428     10 26 06 F1 | 	add	local05, #16
1a42c     13 01 68 FC | 	wrlong	#0, local05
1a430     10 27 02 F6 | 	mov	local05, local02
1a434     01 26 66 F0 | 	shl	local05, #1
1a438     10 27 02 F1 | 	add	local05, local02
1a43c     03 26 66 F0 | 	shl	local05, #3
1a440     F2 26 02 F1 | 	add	local05, objptr
1a444     14 26 06 F1 | 	add	local05, #20
1a448     13 FF 59 FC | 	wrword	#255, local05
1a44c     10 27 02 F6 | 	mov	local05, local02
1a450     01 26 66 F0 | 	shl	local05, #1
1a454     45 00 00 FF 
1a458     6C E4 05 F1 | 	add	objptr, ##35436
1a45c     F2 26 02 F1 | 	add	local05, objptr
1a460     13 FF 59 FC | 	wrword	#255, local05
1a464     01 20 06 F1 | 	add	local02, #1
1a468     08 20 56 F2 | 	cmps	local02, #8 wc
1a46c     59 00 00 FF 
1a470     D4 E5 85 F1 | 	sub	objptr, ##46036
1a474     E4 FE 9F CD |  if_b	jmp	#LR__2101
1a478                 | LR__2102
1a478     00 6E 20 FF 
1a47c     00 28 06 F6 | 	mov	local06, ##1088159744
1a480                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1a480     03 26 06 F6 | 	mov	local05, #3
1a484                 | LR__2103
1a484     14 13 02 F6 | 	mov	arg01, local06
1a488     CE C3 1F FF 
1a48c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a490     80 74 B0 FD | 	call	#__system___float_mul
1a494     FD 28 02 F6 | 	mov	local06, result1
1a498     FA 27 6E FB | 	djnz	local05, #LR__2103
1a49c     00 20 06 F6 | 	mov	local02, #0
1a4a0                 | LR__2104
1a4a0     10 25 02 F6 | 	mov	local04, local02
1a4a4     02 24 66 F0 | 	shl	local04, #2
1a4a8     14 00 00 FF 
1a4ac     D8 E4 05 F1 | 	add	objptr, ##10456
1a4b0     F2 24 02 F1 | 	add	local04, objptr
1a4b4     12 29 62 FC | 	wrlong	local06, local04
1a4b8     14 13 02 F6 | 	mov	arg01, local06
1a4bc     CE C3 1F FF 
1a4c0     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a4c4     14 00 00 FF 
1a4c8     D8 E4 85 F1 | 	sub	objptr, ##10456
1a4cc     44 74 B0 FD | 	call	#__system___float_mul
1a4d0     FD 28 02 F6 | 	mov	local06, result1
1a4d4     01 20 06 F1 | 	add	local02, #1
1a4d8     0C 20 56 F2 | 	cmps	local02, #12 wc
1a4dc     C0 FF 9F CD |  if_b	jmp	#LR__2104
1a4e0     14 00 00 FF 
1a4e4     38 E5 05 F1 | 	add	objptr, ##10552
1a4e8     F2 50 6B FC | 	wrlong	#424, objptr
1a4ec     04 E4 05 F1 | 	add	objptr, #4
1a4f0     F2 20 6B FC | 	wrlong	#400, objptr
1a4f4     04 E4 05 F1 | 	add	objptr, #4
1a4f8     F2 F2 6A FC | 	wrlong	#377, objptr
1a4fc     04 E4 05 F1 | 	add	objptr, #4
1a500     F2 C8 6A FC | 	wrlong	#356, objptr
1a504     04 E4 05 F1 | 	add	objptr, #4
1a508     F2 A0 6A FC | 	wrlong	#336, objptr
1a50c     04 E4 05 F1 | 	add	objptr, #4
1a510     F2 7A 6A FC | 	wrlong	#317, objptr
1a514     04 E4 05 F1 | 	add	objptr, #4
1a518     F2 58 6A FC | 	wrlong	#300, objptr
1a51c     04 E4 05 F1 | 	add	objptr, #4
1a520     F2 36 6A FC | 	wrlong	#283, objptr
1a524     04 E4 05 F1 | 	add	objptr, #4
1a528     F2 16 6A FC | 	wrlong	#267, objptr
1a52c     04 E4 05 F1 | 	add	objptr, #4
1a530     F2 F8 69 FC | 	wrlong	#252, objptr
1a534     04 E4 05 F1 | 	add	objptr, #4
1a538     F2 DC 69 FC | 	wrlong	#238, objptr
1a53c     04 E4 05 F1 | 	add	objptr, #4
1a540     F2 C0 69 FC | 	wrlong	#224, objptr
1a544     45 00 00 FF 
1a548     7E E4 05 F1 | 	add	objptr, ##35454
1a54c     F2 00 59 FC | 	wrword	#128, objptr
1a550     02 E4 85 F1 | 	sub	objptr, #2
1a554     F2 00 59 FC | 	wrword	#128, objptr
1a558     59 00 00 FF 
1a55c     E0 E5 85 F1 | 	sub	objptr, ##46048
1a560     A7 F0 03 F6 | 	mov	ptra, fp
1a564     B2 00 A0 FD | 	call	#popregs_
1a568                 | _init_audio_ret
1a568     2D 00 64 FD | 	ret
1a56c                 | 
1a56c                 | ' 
1a56c                 | ' 
1a56c                 | ' function getnoteval(token) as single
1a56c                 | _getnoteval
1a56c     02 4A 05 F6 | 	mov	COUNT_, #2
1a570     A8 00 A0 FD | 	call	#pushregs_
1a574     01 00 00 FF 
1a578     00 13 86 F1 | 	sub	arg01, ##768
1a57c     09 15 52 F6 | 	abs	arg02, arg01 wc
1a580     0C 14 16 FD | 	qdiv	arg02, #12
1a584     14 00 00 FF 
1a588     D8 E4 05 F1 | 	add	objptr, ##10456
1a58c     19 14 62 FD | 	getqy	arg02
1a590     0A 15 82 F6 | 	negc	arg02, arg02
1a594     02 14 66 F0 | 	shl	arg02, #2
1a598     F2 14 02 F1 | 	add	arg02, objptr
1a59c     0A 1F 02 FB | 	rdlong	local01, arg02
1a5a0     09 15 52 F6 | 	abs	arg02, arg01 wc
1a5a4     0C 14 16 FD | 	qdiv	arg02, #12
1a5a8     14 00 00 FF 
1a5ac     D8 E4 85 F1 | 	sub	objptr, ##10456
1a5b0     01 12 06 F6 | 	mov	arg01, #1
1a5b4                 | ' noteexp=1+(note/12) 
1a5b4                 | ' return (2.0^noteexp)*notebase
1a5b4     18 14 62 FD | 	getqx	arg02
1a5b8     0A 13 82 F3 | 	sumc	arg01, arg02
1a5bc     09 13 52 F6 | 	abs	arg01, arg01 wc
1a5c0     1F 20 C6 C9 |  if_b	decod	local02, #31
1a5c4     00 20 06 36 |  if_ae	mov	local02, #0
1a5c8     44 6F B0 FD | 	call	#__system___float_fromuns
1a5cc     10 FB 61 F5 | 	xor	result1, local02
1a5d0     FD 14 02 F6 | 	mov	arg02, result1
1a5d4     1E 12 C6 F9 | 	decod	arg01, #30
1a5d8     1C 82 B0 FD | 	call	#__system____builtin_powf
1a5dc     FD 12 02 F6 | 	mov	arg01, result1
1a5e0     0F 15 02 F6 | 	mov	arg02, local01
1a5e4     2C 73 B0 FD | 	call	#__system___float_mul
1a5e8     A7 F0 03 F6 | 	mov	ptra, fp
1a5ec     B2 00 A0 FD | 	call	#popregs_
1a5f0                 | _getnoteval_ret
1a5f0     2D 00 64 FD | 	ret
1a5f4                 | 
1a5f4                 | ' 
1a5f4                 | ' 
1a5f4                 | ' 
1a5f4                 | ' sub init_error_strings
1a5f4                 | _init_error_strings
1a5f4     75 01 00 FF 
1a5f8     97 01 06 F6 | 	mov	_var01, ##@LR__5210
1a5fc     45 00 00 FF 
1a600     AC E4 05 F1 | 	add	objptr, ##35500
1a604     F2 00 62 FC | 	wrlong	_var01, objptr
1a608     75 01 00 FF 
1a60c     98 01 06 F6 | 	mov	_var01, ##@LR__5211
1a610     04 E4 05 F1 | 	add	objptr, #4
1a614     F2 00 62 FC | 	wrlong	_var01, objptr
1a618     75 01 00 FF 
1a61c     BD 01 06 F6 | 	mov	_var01, ##@LR__5212
1a620     04 E4 05 F1 | 	add	objptr, #4
1a624     F2 00 62 FC | 	wrlong	_var01, objptr
1a628     75 01 00 FF 
1a62c     DE 01 06 F6 | 	mov	_var01, ##@LR__5213
1a630     04 E4 05 F1 | 	add	objptr, #4
1a634     F2 00 62 FC | 	wrlong	_var01, objptr
1a638     75 01 00 FF 
1a63c     F8 01 06 F6 | 	mov	_var01, ##@LR__5214
1a640     04 E4 05 F1 | 	add	objptr, #4
1a644     F2 00 62 FC | 	wrlong	_var01, objptr
1a648     76 01 00 FF 
1a64c     14 00 06 F6 | 	mov	_var01, ##@LR__5215
1a650     04 E4 05 F1 | 	add	objptr, #4
1a654     F2 00 62 FC | 	wrlong	_var01, objptr
1a658     76 01 00 FF 
1a65c     36 00 06 F6 | 	mov	_var01, ##@LR__5216
1a660     04 E4 05 F1 | 	add	objptr, #4
1a664     F2 00 62 FC | 	wrlong	_var01, objptr
1a668     76 01 00 FF 
1a66c     64 00 06 F6 | 	mov	_var01, ##@LR__5217
1a670     04 E4 05 F1 | 	add	objptr, #4
1a674     F2 00 62 FC | 	wrlong	_var01, objptr
1a678     76 01 00 FF 
1a67c     8F 00 06 F6 | 	mov	_var01, ##@LR__5218
1a680     04 E4 05 F1 | 	add	objptr, #4
1a684     F2 00 62 FC | 	wrlong	_var01, objptr
1a688     76 01 00 FF 
1a68c     A8 00 06 F6 | 	mov	_var01, ##@LR__5219
1a690     04 E4 05 F1 | 	add	objptr, #4
1a694     F2 00 62 FC | 	wrlong	_var01, objptr
1a698     76 01 00 FF 
1a69c     C9 00 06 F6 | 	mov	_var01, ##@LR__5220
1a6a0     04 E4 05 F1 | 	add	objptr, #4
1a6a4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6a8     76 01 00 FF 
1a6ac     E0 00 06 F6 | 	mov	_var01, ##@LR__5221
1a6b0     04 E4 05 F1 | 	add	objptr, #4
1a6b4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6b8     76 01 00 FF 
1a6bc     FE 00 06 F6 | 	mov	_var01, ##@LR__5222
1a6c0     04 E4 05 F1 | 	add	objptr, #4
1a6c4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6c8     76 01 00 FF 
1a6cc     22 01 06 F6 | 	mov	_var01, ##@LR__5223
1a6d0     04 E4 05 F1 | 	add	objptr, #4
1a6d4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6d8     76 01 00 FF 
1a6dc     49 01 06 F6 | 	mov	_var01, ##@LR__5224
1a6e0     04 E4 05 F1 | 	add	objptr, #4
1a6e4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6e8     76 01 00 FF 
1a6ec     65 01 06 F6 | 	mov	_var01, ##@LR__5225
1a6f0     04 E4 05 F1 | 	add	objptr, #4
1a6f4     F2 00 62 FC | 	wrlong	_var01, objptr
1a6f8     76 01 00 FF 
1a6fc     76 01 06 F6 | 	mov	_var01, ##@LR__5226
1a700     04 E4 05 F1 | 	add	objptr, #4
1a704     F2 00 62 FC | 	wrlong	_var01, objptr
1a708     76 01 00 FF 
1a70c     86 01 06 F6 | 	mov	_var01, ##@LR__5227
1a710     04 E4 05 F1 | 	add	objptr, #4
1a714     F2 00 62 FC | 	wrlong	_var01, objptr
1a718     76 01 00 FF 
1a71c     A1 01 06 F6 | 	mov	_var01, ##@LR__5228
1a720     04 E4 05 F1 | 	add	objptr, #4
1a724     F2 00 62 FC | 	wrlong	_var01, objptr
1a728     76 01 00 FF 
1a72c     B3 01 06 F6 | 	mov	_var01, ##@LR__5229
1a730     04 E4 05 F1 | 	add	objptr, #4
1a734     F2 00 62 FC | 	wrlong	_var01, objptr
1a738     76 01 00 FF 
1a73c     CB 01 06 F6 | 	mov	_var01, ##@LR__5230
1a740     04 E4 05 F1 | 	add	objptr, #4
1a744     F2 00 62 FC | 	wrlong	_var01, objptr
1a748     76 01 00 FF 
1a74c     DF 01 06 F6 | 	mov	_var01, ##@LR__5231
1a750     04 E4 05 F1 | 	add	objptr, #4
1a754     F2 00 62 FC | 	wrlong	_var01, objptr
1a758     76 01 00 FF 
1a75c     EF 01 06 F6 | 	mov	_var01, ##@LR__5232
1a760     04 E4 05 F1 | 	add	objptr, #4
1a764     F2 00 62 FC | 	wrlong	_var01, objptr
1a768     77 01 00 FF 
1a76c     0C 00 06 F6 | 	mov	_var01, ##@LR__5233
1a770     04 E4 05 F1 | 	add	objptr, #4
1a774     F2 00 62 FC | 	wrlong	_var01, objptr
1a778     77 01 00 FF 
1a77c     1D 00 06 F6 | 	mov	_var01, ##@LR__5234
1a780     04 E4 05 F1 | 	add	objptr, #4
1a784     F2 00 62 FC | 	wrlong	_var01, objptr
1a788     77 01 00 FF 
1a78c     2E 00 06 F6 | 	mov	_var01, ##@LR__5235
1a790     04 E4 05 F1 | 	add	objptr, #4
1a794     F2 00 62 FC | 	wrlong	_var01, objptr
1a798     77 01 00 FF 
1a79c     59 00 06 F6 | 	mov	_var01, ##@LR__5236
1a7a0     04 E4 05 F1 | 	add	objptr, #4
1a7a4     F2 00 62 FC | 	wrlong	_var01, objptr
1a7a8     77 01 00 FF 
1a7ac     75 00 06 F6 | 	mov	_var01, ##@LR__5237
1a7b0     04 E4 05 F1 | 	add	objptr, #4
1a7b4     F2 00 62 FC | 	wrlong	_var01, objptr
1a7b8     77 01 00 FF 
1a7bc     8B 00 06 F6 | 	mov	_var01, ##@LR__5238
1a7c0     04 E4 05 F1 | 	add	objptr, #4
1a7c4     F2 00 62 FC | 	wrlong	_var01, objptr
1a7c8     77 01 00 FF 
1a7cc     98 00 06 F6 | 	mov	_var01, ##@LR__5239
1a7d0     04 E4 05 F1 | 	add	objptr, #4
1a7d4     F2 00 62 FC | 	wrlong	_var01, objptr
1a7d8     77 01 00 FF 
1a7dc     AA 00 06 F6 | 	mov	_var01, ##@LR__5240
1a7e0     04 E4 05 F1 | 	add	objptr, #4
1a7e4     F2 00 62 FC | 	wrlong	_var01, objptr
1a7e8     77 01 00 FF 
1a7ec     BB 00 06 F6 | 	mov	_var01, ##@LR__5241
1a7f0     04 E4 05 F1 | 	add	objptr, #4
1a7f4     F2 00 62 FC | 	wrlong	_var01, objptr
1a7f8     77 01 00 FF 
1a7fc     D7 00 06 F6 | 	mov	_var01, ##@LR__5242
1a800     04 E4 05 F1 | 	add	objptr, #4
1a804     F2 00 62 FC | 	wrlong	_var01, objptr
1a808     77 01 00 FF 
1a80c     E8 00 06 F6 | 	mov	_var01, ##@LR__5243
1a810     04 E4 05 F1 | 	add	objptr, #4
1a814     F2 00 62 FC | 	wrlong	_var01, objptr
1a818     77 01 00 FF 
1a81c     F7 00 06 F6 | 	mov	_var01, ##@LR__5244
1a820     04 E4 05 F1 | 	add	objptr, #4
1a824     F2 00 62 FC | 	wrlong	_var01, objptr
1a828     77 01 00 FF 
1a82c     12 01 06 F6 | 	mov	_var01, ##@LR__5245
1a830     04 E4 05 F1 | 	add	objptr, #4
1a834     F2 00 62 FC | 	wrlong	_var01, objptr
1a838     77 01 00 FF 
1a83c     46 01 06 F6 | 	mov	_var01, ##@LR__5246
1a840     04 E4 05 F1 | 	add	objptr, #4
1a844     F2 00 62 FC | 	wrlong	_var01, objptr
1a848     77 01 00 FF 
1a84c     5F 01 06 F6 | 	mov	_var01, ##@LR__5247
1a850     04 E4 05 F1 | 	add	objptr, #4
1a854     F2 00 62 FC | 	wrlong	_var01, objptr
1a858     77 01 00 FF 
1a85c     7B 01 06 F6 | 	mov	_var01, ##@LR__5248
1a860     04 E4 05 F1 | 	add	objptr, #4
1a864     F2 00 62 FC | 	wrlong	_var01, objptr
1a868     77 01 00 FF 
1a86c     99 01 06 F6 | 	mov	_var01, ##@LR__5249
1a870     04 E4 05 F1 | 	add	objptr, #4
1a874     F2 00 62 FC | 	wrlong	_var01, objptr
1a878     77 01 00 FF 
1a87c     B2 01 06 F6 | 	mov	_var01, ##@LR__5250
1a880     04 E4 05 F1 | 	add	objptr, #4
1a884     F2 00 62 FC | 	wrlong	_var01, objptr
1a888     77 01 00 FF 
1a88c     D1 01 06 F6 | 	mov	_var01, ##@LR__5251
1a890     04 E4 05 F1 | 	add	objptr, #4
1a894     F2 00 62 FC | 	wrlong	_var01, objptr
1a898     77 01 00 FF 
1a89c     E0 01 06 F6 | 	mov	_var01, ##@LR__5252
1a8a0     04 E4 05 F1 | 	add	objptr, #4
1a8a4     F2 00 62 FC | 	wrlong	_var01, objptr
1a8a8     78 01 00 FF 
1a8ac     0E 00 06 F6 | 	mov	_var01, ##@LR__5253
1a8b0     04 E4 05 F1 | 	add	objptr, #4
1a8b4     F2 00 62 FC | 	wrlong	_var01, objptr
1a8b8     78 01 00 FF 
1a8bc     1C 00 06 F6 | 	mov	_var01, ##@LR__5254
1a8c0     04 E4 05 F1 | 	add	objptr, #4
1a8c4     F2 00 62 FC | 	wrlong	_var01, objptr
1a8c8     78 01 00 FF 
1a8cc     31 00 06 F6 | 	mov	_var01, ##@LR__5255
1a8d0     04 E4 05 F1 | 	add	objptr, #4
1a8d4     F2 00 62 FC | 	wrlong	_var01, objptr
1a8d8     78 01 00 FF 
1a8dc     55 00 06 F6 | 	mov	_var01, ##@LR__5256
1a8e0     04 E4 05 F1 | 	add	objptr, #4
1a8e4     F2 00 62 FC | 	wrlong	_var01, objptr
1a8e8     78 01 00 FF 
1a8ec     6C 00 06 F6 | 	mov	_var01, ##@LR__5257
1a8f0     04 E4 05 F1 | 	add	objptr, #4
1a8f4     F2 00 62 FC | 	wrlong	_var01, objptr
1a8f8     78 01 00 FF 
1a8fc     7F 00 06 F6 | 	mov	_var01, ##@LR__5258
1a900     04 E4 05 F1 | 	add	objptr, #4
1a904     F2 00 62 FC | 	wrlong	_var01, objptr
1a908     78 01 00 FF 
1a90c     96 00 06 F6 | 	mov	_var01, ##@LR__5259
1a910     04 E4 05 F1 | 	add	objptr, #4
1a914     F2 00 62 FC | 	wrlong	_var01, objptr
1a918     45 00 00 FF 
1a91c     70 E5 85 F1 | 	sub	objptr, ##35696
1a920                 | _init_error_strings_ret
1a920     2D 00 64 FD | 	ret
1a924                 | 
1a924                 | '         
1a924                 | ' sub printerror(err as integer)
1a924                 | _printerror
1a924     01 4A 05 F6 | 	mov	COUNT_, #1
1a928     A8 00 A0 FD | 	call	#pushregs_
1a92c     09 1F 02 F6 | 	mov	local01, arg01
1a930     78 01 00 FF 
1a934     AF 12 06 F6 | 	mov	arg01, ##@LR__5260
1a938     A8 31 B0 FD | 	call	#_hg010b_spin2_write
1a93c     0F 13 02 F6 | 	mov	arg01, local01
1a940     10 35 B0 FD | 	call	#_hg010b_spin2_inttostr
1a944     FD 12 02 F6 | 	mov	arg01, result1
1a948     98 31 B0 FD | 	call	#_hg010b_spin2_write
1a94c     78 01 00 FF 
1a950     B6 12 06 F6 | 	mov	arg01, ##@LR__5261
1a954     8C 31 B0 FD | 	call	#_hg010b_spin2_write
1a958     02 1E 66 F0 | 	shl	local01, #2
1a95c     45 00 00 FF 
1a960     AC E4 05 F1 | 	add	objptr, ##35500
1a964     F2 1E 02 F1 | 	add	local01, objptr
1a968     0F 13 02 FB | 	rdlong	arg01, local01
1a96c     45 00 00 FF 
1a970     AC E4 85 F1 | 	sub	objptr, ##35500
1a974                 | ' 
1a974                 | ' write(text)
1a974     6C 31 B0 FD | 	call	#_hg010b_spin2_write
1a978                 | ' crlf
1a978     34 34 B0 FD | 	call	#_hg010b_spin2_crlf
1a97c     A7 F0 03 F6 | 	mov	ptra, fp
1a980     B2 00 A0 FD | 	call	#popregs_
1a984                 | _printerror_ret
1a984     2D 00 64 FD | 	ret
1a988                 | 
1a988                 | ' 
1a988                 | ' '' ------------------------------- Hardware start/stop/initialization 
1a988                 | ' 
1a988                 | ' sub startpsram
1a988                 | _startpsram
1a988     00 12 06 F6 | 	mov	arg01, #0
1a98c     0A 14 C6 F9 | 	decod	arg02, #10
1a990     0B 16 06 F6 | 	mov	arg03, #11
1a994     07 18 06 F6 | 	mov	arg04, #7
1a998     0B 00 00 FF 
1a99c     CC E4 05 F1 | 	add	objptr, ##5836
1a9a0     BC 35 B0 FD | 	call	#_psram_spin2_startx
1a9a4     2B 00 00 FF 
1a9a8     6C E5 05 F1 | 	add	objptr, ##22380
1a9ac     F2 FA 61 FC | 	wrlong	result1, objptr
1a9b0                 | '     return $7FF00 + cog*12
1a9b0     0C E4 05 F1 | 	add	objptr, #12
1a9b4     FF 03 80 FF 
1a9b8     F2 00 6A FC | 	wrlong	##524032, objptr
1a9bc     37 00 00 FF 
1a9c0     44 E4 85 F1 | 	sub	objptr, ##28228
1a9c4                 | _startpsram_ret
1a9c4     2D 00 64 FD | 	ret
1a9c8                 | 
1a9c8                 | ' 
1a9c8                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1a9c8                 | _startvideo
1a9c8     01 4A 05 F6 | 	mov	COUNT_, #1
1a9cc     A8 00 A0 FD | 	call	#pushregs_
1a9d0     37 00 00 FF 
1a9d4     44 E4 05 F1 | 	add	objptr, ##28228
1a9d8     F2 18 02 FB | 	rdlong	arg04, objptr
1a9dc     37 00 00 FF 
1a9e0     44 E4 85 F1 | 	sub	objptr, ##28228
1a9e4     0A 13 02 F6 | 	mov	arg01, arg02
1a9e8     0C 15 02 F6 | 	mov	arg02, arg04
1a9ec     EC 18 B0 FD | 	call	#_hg010b_spin2_start
1a9f0     37 00 00 FF 
1a9f4     30 E4 05 F1 | 	add	objptr, ##28208
1a9f8     F2 FA 61 FC | 	wrlong	result1, objptr
1a9fc                 | ' 
1a9fc                 | ' videocog=v.start(pin,mbox)
1a9fc                 | ' 
1a9fc                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1a9fc     00 1E 06 F6 | 	mov	local01, #0
1aa00     2B 00 00 FF 
1aa04     64 E5 85 F1 | 	sub	objptr, ##22372
1aa08                 | LR__2110
1aa08     0F 13 02 F6 | 	mov	arg01, local01
1aa0c     00 28 00 FF 
1aa10     00 14 06 F6 | 	mov	arg02, ##5242880
1aa14     A0 39 B0 FD | 	call	#_psram_spin2_setQos
1aa18     01 1E 06 F1 | 	add	local01, #1
1aa1c     08 1E 56 F2 | 	cmps	local01, #8 wc
1aa20     E4 FF 9F CD |  if_b	jmp	#LR__2110
1aa24     2B 00 00 FF 
1aa28     64 E5 05 F1 | 	add	objptr, ##22372
1aa2c     F2 12 02 FB | 	rdlong	arg01, objptr
1aa30     7A 00 02 FF 
1aa34     00 14 06 F6 | 	mov	arg02, ##67171328
1aa38     2B 00 00 FF 
1aa3c     64 E5 85 F1 | 	sub	objptr, ##22372
1aa40     74 39 B0 FD | 	call	#_psram_spin2_setQos
1aa44     0B 00 00 FF 
1aa48     CC E4 85 F1 | 	sub	objptr, ##5836
1aa4c                 | ' psram.setQoS(videocog, $0400f400) 
1aa4c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1aa4c     F2 14 02 F6 | 	mov	arg02, objptr
1aa50     00 20 04 FF 
1aa54     00 14 46 F5 | 	or	arg02, ##138412032
1aa58     00 16 06 F6 | 	mov	arg03, #0
1aa5c     00 18 06 F6 | 	mov	arg04, #0
1aa60     00 12 06 F6 | 	mov	arg01, #0
1aa64     0C 4E B0 FD | 	call	#__system___basic_open
1aa68                 | ' return videocog
1aa68     37 00 00 FF 
1aa6c     30 E4 05 F1 | 	add	objptr, ##28208
1aa70     F2 FA 01 FB | 	rdlong	result1, objptr
1aa74     37 00 00 FF 
1aa78     30 E4 85 F1 | 	sub	objptr, ##28208
1aa7c     A7 F0 03 F6 | 	mov	ptra, fp
1aa80     B2 00 A0 FD | 	call	#popregs_
1aa84                 | _startvideo_ret
1aa84     2D 00 64 FD | 	ret
1aa88                 | 
1aa88                 | ' 
1aa88                 | ' 
1aa88                 | ' 
1aa88                 | ' 
1aa88                 | ' '' ------------------------------- Convenient psram peek/poke
1aa88                 | ' 
1aa88                 | ' sub pslpoke(addr as ulong,value as ulong)
1aa88                 | _pslpoke
1aa88     00 4A 05 F6 | 	mov	COUNT_, #0
1aa8c     A8 00 A0 FD | 	call	#pushregs_
1aa90     08 F0 07 F1 | 	add	ptra, #8
1aa94     A7 12 62 FC | 	wrlong	arg01, fp
1aa98     04 4E 05 F1 | 	add	fp, #4
1aa9c     A7 14 62 FC | 	wrlong	arg02, fp
1aaa0     A7 12 02 F6 | 	mov	arg01, fp
1aaa4     04 4E 85 F1 | 	sub	fp, #4
1aaa8     A7 14 02 FB | 	rdlong	arg02, fp
1aaac     04 16 06 F6 | 	mov	arg03, #4
1aab0     0B 00 00 FF 
1aab4     CC E4 05 F1 | 	add	objptr, ##5836
1aab8     6C 37 B0 FD | 	call	#_psram_spin2_write
1aabc     0B 00 00 FF 
1aac0     CC E4 85 F1 | 	sub	objptr, ##5836
1aac4     A7 F0 03 F6 | 	mov	ptra, fp
1aac8     B2 00 A0 FD | 	call	#popregs_
1aacc                 | _pslpoke_ret
1aacc     2D 00 64 FD | 	ret
1aad0                 | 
1aad0                 | ' 
1aad0                 | ' sub psdpoke(addr as ulong,value as ulong)
1aad0                 | _psdpoke
1aad0     00 4A 05 F6 | 	mov	COUNT_, #0
1aad4     A8 00 A0 FD | 	call	#pushregs_
1aad8     08 F0 07 F1 | 	add	ptra, #8
1aadc     A7 12 62 FC | 	wrlong	arg01, fp
1aae0     04 4E 05 F1 | 	add	fp, #4
1aae4     A7 14 62 FC | 	wrlong	arg02, fp
1aae8     A7 12 02 F6 | 	mov	arg01, fp
1aaec     04 4E 85 F1 | 	sub	fp, #4
1aaf0     A7 14 02 FB | 	rdlong	arg02, fp
1aaf4     02 16 06 F6 | 	mov	arg03, #2
1aaf8     0B 00 00 FF 
1aafc     CC E4 05 F1 | 	add	objptr, ##5836
1ab00     24 37 B0 FD | 	call	#_psram_spin2_write
1ab04     0B 00 00 FF 
1ab08     CC E4 85 F1 | 	sub	objptr, ##5836
1ab0c     A7 F0 03 F6 | 	mov	ptra, fp
1ab10     B2 00 A0 FD | 	call	#popregs_
1ab14                 | _psdpoke_ret
1ab14     2D 00 64 FD | 	ret
1ab18                 | 
1ab18                 | ' 
1ab18                 | ' sub pspoke(addr as ulong,value as ulong)
1ab18                 | _pspoke
1ab18     00 4A 05 F6 | 	mov	COUNT_, #0
1ab1c     A8 00 A0 FD | 	call	#pushregs_
1ab20     08 F0 07 F1 | 	add	ptra, #8
1ab24     A7 12 62 FC | 	wrlong	arg01, fp
1ab28     04 4E 05 F1 | 	add	fp, #4
1ab2c     A7 14 62 FC | 	wrlong	arg02, fp
1ab30     A7 12 02 F6 | 	mov	arg01, fp
1ab34     04 4E 85 F1 | 	sub	fp, #4
1ab38     A7 14 02 FB | 	rdlong	arg02, fp
1ab3c     01 16 06 F6 | 	mov	arg03, #1
1ab40     0B 00 00 FF 
1ab44     CC E4 05 F1 | 	add	objptr, ##5836
1ab48     DC 36 B0 FD | 	call	#_psram_spin2_write
1ab4c     0B 00 00 FF 
1ab50     CC E4 85 F1 | 	sub	objptr, ##5836
1ab54     A7 F0 03 F6 | 	mov	ptra, fp
1ab58     B2 00 A0 FD | 	call	#popregs_
1ab5c                 | _pspoke_ret
1ab5c     2D 00 64 FD | 	ret
1ab60                 | 
1ab60                 | ' 
1ab60                 | ' function pspeek(adr as ulong) as ubyte
1ab60                 | _pspeek
1ab60     00 4A 05 F6 | 	mov	COUNT_, #0
1ab64     A8 00 A0 FD | 	call	#pushregs_
1ab68     0C F0 07 F1 | 	add	ptra, #12
1ab6c     04 4E 05 F1 | 	add	fp, #4
1ab70     A7 12 62 FC | 	wrlong	arg01, fp
1ab74     04 4E 05 F1 | 	add	fp, #4
1ab78     A7 12 02 F6 | 	mov	arg01, fp
1ab7c     04 4E 85 F1 | 	sub	fp, #4
1ab80     A7 14 02 FB | 	rdlong	arg02, fp
1ab84     04 4E 85 F1 | 	sub	fp, #4
1ab88     01 16 06 F6 | 	mov	arg03, #1
1ab8c     0B 00 00 FF 
1ab90     CC E4 05 F1 | 	add	objptr, ##5836
1ab94     F4 35 B0 FD | 	call	#_psram_spin2_read1
1ab98     0B 00 00 FF 
1ab9c     CC E4 85 F1 | 	sub	objptr, ##5836
1aba0                 | ' psram.read1(varptr(res),adr,1)
1aba0                 | ' return res
1aba0     08 4E 05 F1 | 	add	fp, #8
1aba4     A7 FA C1 FA | 	rdbyte	result1, fp
1aba8     08 4E 85 F1 | 	sub	fp, #8
1abac     A7 F0 03 F6 | 	mov	ptra, fp
1abb0     B2 00 A0 FD | 	call	#popregs_
1abb4                 | _pspeek_ret
1abb4     2D 00 64 FD | 	ret
1abb8                 | 
1abb8                 | ' 
1abb8                 | ' function pslpeek(adr as ulong) as ulong
1abb8                 | _pslpeek
1abb8     00 4A 05 F6 | 	mov	COUNT_, #0
1abbc     A8 00 A0 FD | 	call	#pushregs_
1abc0     0C F0 07 F1 | 	add	ptra, #12
1abc4     04 4E 05 F1 | 	add	fp, #4
1abc8     A7 12 62 FC | 	wrlong	arg01, fp
1abcc     04 4E 05 F1 | 	add	fp, #4
1abd0     A7 12 02 F6 | 	mov	arg01, fp
1abd4     04 4E 85 F1 | 	sub	fp, #4
1abd8     A7 14 02 FB | 	rdlong	arg02, fp
1abdc     04 4E 85 F1 | 	sub	fp, #4
1abe0     04 16 06 F6 | 	mov	arg03, #4
1abe4     0B 00 00 FF 
1abe8     CC E4 05 F1 | 	add	objptr, ##5836
1abec     9C 35 B0 FD | 	call	#_psram_spin2_read1
1abf0     0B 00 00 FF 
1abf4     CC E4 85 F1 | 	sub	objptr, ##5836
1abf8                 | ' psram.read1(varptr(res),adr,4)
1abf8                 | ' return res
1abf8     08 4E 05 F1 | 	add	fp, #8
1abfc     A7 FA 01 FB | 	rdlong	result1, fp
1ac00     08 4E 85 F1 | 	sub	fp, #8
1ac04     A7 F0 03 F6 | 	mov	ptra, fp
1ac08     B2 00 A0 FD | 	call	#popregs_
1ac0c                 | _pslpeek_ret
1ac0c     2D 00 64 FD | 	ret
1ac10                 | 
1ac10                 | ' 
1ac10                 | ' function psdpeek(adr as ulong) as ulong
1ac10                 | _psdpeek
1ac10     00 4A 05 F6 | 	mov	COUNT_, #0
1ac14     A8 00 A0 FD | 	call	#pushregs_
1ac18     0C F0 07 F1 | 	add	ptra, #12
1ac1c     04 4E 05 F1 | 	add	fp, #4
1ac20     A7 12 62 FC | 	wrlong	arg01, fp
1ac24     04 4E 05 F1 | 	add	fp, #4
1ac28     A7 12 02 F6 | 	mov	arg01, fp
1ac2c     04 4E 85 F1 | 	sub	fp, #4
1ac30     A7 14 02 FB | 	rdlong	arg02, fp
1ac34     04 4E 85 F1 | 	sub	fp, #4
1ac38     02 16 06 F6 | 	mov	arg03, #2
1ac3c     0B 00 00 FF 
1ac40     CC E4 05 F1 | 	add	objptr, ##5836
1ac44     44 35 B0 FD | 	call	#_psram_spin2_read1
1ac48     0B 00 00 FF 
1ac4c     CC E4 85 F1 | 	sub	objptr, ##5836
1ac50                 | ' psram.read1(varptr(res),adr,2)
1ac50                 | ' return res
1ac50     08 4E 05 F1 | 	add	fp, #8
1ac54     A7 FA E1 FA | 	rdword	result1, fp
1ac58     08 4E 85 F1 | 	sub	fp, #8
1ac5c     A7 F0 03 F6 | 	mov	ptra, fp
1ac60     B2 00 A0 FD | 	call	#popregs_
1ac64                 | _psdpeek_ret
1ac64     2D 00 64 FD | 	ret
1ac68                 | 
1ac68                 | ' 
1ac68                 | ' '' ------------------------------- USB keyboard scan to char translator
1ac68                 | ' 
1ac68                 | ' function scantochar(key)
1ac68                 | _scantochar
1ac68                 | ' 
1ac68                 | ' select case (key shr 8) and 255
1ac68     09 01 02 F6 | 	mov	_var01, arg01
1ac6c     08 00 C6 F0 | 	sar	_var01, #8
1ac70     FF 00 0E F5 | 	and	_var01, #255 wz
1ac74     24 00 90 AD |  if_e	jmp	#LR__2120
1ac78     02 00 0E F2 | 	cmp	_var01, #2 wz
1ac7c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1ac80     30 00 90 AD |  if_e	jmp	#LR__2121
1ac84     40 00 0E F2 | 	cmp	_var01, #64 wz
1ac88     44 00 90 AD |  if_e	jmp	#LR__2122
1ac8c     42 00 0E F2 | 	cmp	_var01, #66 wz
1ac90     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1ac94     70 00 90 5D |  if_ne	jmp	#LR__2124
1ac98     50 00 90 FD | 	jmp	#LR__2123
1ac9c                 | LR__2120
1ac9c     09 FB 01 F6 | 	mov	result1, arg01
1aca0     7F FA 05 F5 | 	and	result1, #127
1aca4     02 FA 65 F0 | 	shl	result1, #2
1aca8     F5 FA 01 F1 | 	add	result1, ptr__dat__
1acac     FD FA C1 FA | 	rdbyte	result1, result1
1acb0     54 00 90 FD | 	jmp	#_scantochar_ret
1acb4                 | LR__2121
1acb4     09 FB 01 F6 | 	mov	result1, arg01
1acb8     7F FA 05 F5 | 	and	result1, #127
1acbc     02 FA 65 F0 | 	shl	result1, #2
1acc0     01 FA 05 F1 | 	add	result1, #1
1acc4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1acc8     FD FA C1 FA | 	rdbyte	result1, result1
1accc     38 00 90 FD | 	jmp	#_scantochar_ret
1acd0                 | LR__2122
1acd0     09 FB 01 F6 | 	mov	result1, arg01
1acd4     7F FA 05 F5 | 	and	result1, #127
1acd8     02 FA 65 F0 | 	shl	result1, #2
1acdc     02 FA 05 F1 | 	add	result1, #2
1ace0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1ace4     FD FA C1 FA | 	rdbyte	result1, result1
1ace8     1C 00 90 FD | 	jmp	#_scantochar_ret
1acec                 | LR__2123
1acec     09 FB 01 F6 | 	mov	result1, arg01
1acf0     7F FA 05 F5 | 	and	result1, #127
1acf4     02 FA 65 F0 | 	shl	result1, #2
1acf8     03 FA 05 F1 | 	add	result1, #3
1acfc     F5 FA 01 F1 | 	add	result1, ptr__dat__
1ad00     FD FA C1 FA | 	rdbyte	result1, result1
1ad04     00 00 90 FD | 	jmp	#_scantochar_ret
1ad08                 | LR__2124
1ad08                 | _scantochar_ret
1ad08     2D 00 64 FD | 	ret
1ad0c                 | 
1ad0c                 | _program
1ad0c     13 4A 05 F6 | 	mov	COUNT_, #19
1ad10     A8 00 A0 FD | 	call	#pushregs_
1ad14     70 FC BF FD | 	call	#_startpsram
1ad18     40 12 06 F6 | 	mov	arg01, #64
1ad1c     00 14 06 F6 | 	mov	arg02, #0
1ad20     00 16 06 F6 | 	mov	arg03, #0
1ad24     A0 FC BF FD | 	call	#_startvideo
1ad28     37 00 00 FF 
1ad2c     44 E4 05 F1 | 	add	objptr, ##28228
1ad30     F2 12 02 FB | 	rdlong	arg01, objptr
1ad34     00 14 06 F6 | 	mov	arg02, #0
1ad38     FB 03 00 FF 
1ad3c     00 17 06 F6 | 	mov	arg03, ##521984
1ad40     2B 00 00 FF 
1ad44     78 E5 85 F1 | 	sub	objptr, ##22392
1ad48     1C 3A B0 FD | 	call	#_audio096_spin2_start
1ad4c     FE 1C 02 F6 | 	mov	arg06, result2
1ad50     2B 00 00 FF 
1ad54     60 E5 05 F1 | 	add	objptr, ##22368
1ad58     F2 FA 61 FC | 	wrlong	result1, objptr
1ad5c     14 E4 05 F1 | 	add	objptr, #20
1ad60     F2 1C 62 FC | 	wrlong	arg06, objptr
1ad64     37 00 00 FF 
1ad68     40 E4 85 F1 | 	sub	objptr, ##28224
1ad6c     32 12 06 F6 | 	mov	arg01, #50
1ad70     4C 43 B0 FD | 	call	#__system___waitms
1ad74     37 00 00 FF 
1ad78     40 E4 05 F1 | 	add	objptr, ##28224
1ad7c     F2 12 02 FB | 	rdlong	arg01, objptr
1ad80     37 00 00 FF 
1ad84     40 E4 85 F1 | 	sub	objptr, ##28224
1ad88     14 12 06 F1 | 	add	arg01, #20
1ad8c     20 00 80 FF 
1ad90     09 01 58 FC | 	wrword	##16384, arg01
1ad94     28 37 B0 FD | 	call	#_usbnew_spin2_start
1ad98     37 00 00 FF 
1ad9c     34 E4 05 F1 | 	add	objptr, ##28212
1ada0     F2 FA 61 FC | 	wrlong	result1, objptr
1ada4                 | '   mouse_limits[0] := xlim
1ada4     0F 00 00 FF 
1ada8     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1adac     01 00 80 FF 
1adb0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1adb4                 | '   mouse_limits[1] := ylim
1adb4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1adb8     01 00 80 FF 
1adbc     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1adc0     36 00 00 FF 
1adc4     23 E5 85 F1 | 	sub	objptr, ##27939
1adc8     F2 12 02 F6 | 	mov	arg01, objptr
1adcc     11 E5 85 F1 | 	sub	objptr, #273
1add0     C4 12 06 F1 | 	add	arg01, #196
1add4                 | '   mouse_outptr := ptr
1add4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1add8     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1addc     0F 00 00 FF 
1ade0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1ade4     0E 00 00 FF 
1ade8     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1adec     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1adf0     0E 00 00 FF 
1adf4     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1adf8     10 12 06 F6 | 	mov	arg01, #16
1adfc     74 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ae00     10 12 06 F6 | 	mov	arg01, #16
1ae04     20 14 06 F6 | 	mov	arg02, #32
1ae08     20 16 06 F6 | 	mov	arg03, #32
1ae0c     F4 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1ae10     09 12 C6 F9 | 	decod	arg01, #9
1ae14     2C 15 06 F6 | 	mov	arg02, #300
1ae18     FC 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1ae1c     F2 1C 02 F6 | 	mov	arg06, objptr
1ae20     58 00 00 FF 
1ae24     28 E5 05 F1 | 	add	objptr, ##45352
1ae28     F2 1A 02 F6 | 	mov	arg05, objptr
1ae2c     0D 1D 62 FC | 	wrlong	arg06, arg05
1ae30     04 1A 06 F1 | 	add	arg05, #4
1ae34     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1ae38     EF 14 02 F6 | 	mov	arg02, entryptr__
1ae3c     F2 1E 02 F6 | 	mov	local01, objptr
1ae40     1E FA 05 F6 | 	mov	result1, #30
1ae44     28 1E 62 FD | 	setq	local01
1ae48     0A FB F1 FC | 	coginit	result1, arg02 wc
1ae4c     01 FA 65 C6 |  if_b	neg	result1, #1
1ae50     04 E4 85 F1 | 	sub	objptr, #4
1ae54     F2 FA 61 FC | 	wrlong	result1, objptr
1ae58     01 00 00 FF 
1ae5c     90 E4 05 F1 | 	add	objptr, ##656
1ae60     F2 00 68 FC | 	wrlong	#0, objptr
1ae64     22 00 00 FF 
1ae68     50 E5 85 F1 | 	sub	objptr, ##17744
1ae6c     F2 04 68 FC | 	wrlong	#2, objptr
1ae70     04 E4 05 F1 | 	add	objptr, #4
1ae74     F2 26 69 FC | 	wrlong	#147, objptr
1ae78     04 E4 05 F1 | 	add	objptr, #4
1ae7c     F2 34 69 FC | 	wrlong	#154, objptr
1ae80     04 E4 05 F1 | 	add	objptr, #4
1ae84     F2 08 68 FC | 	wrlong	#4, objptr
1ae88     04 E4 85 F1 | 	sub	objptr, #4
1ae8c     F2 1C 02 FB | 	rdlong	arg06, objptr
1ae90     14 E4 85 F1 | 	sub	objptr, #20
1ae94     F2 1C 62 FC | 	wrlong	arg06, objptr
1ae98     04 E4 05 F1 | 	add	objptr, #4
1ae9c     F2 00 68 FC | 	wrlong	#0, objptr
1aea0     04 E4 05 F1 | 	add	objptr, #4
1aea4     F2 00 68 FC | 	wrlong	#0, objptr
1aea8     21 00 00 FF 
1aeac     C0 E4 05 F1 | 	add	objptr, ##17088
1aeb0     F2 02 68 FC | 	wrlong	#1, objptr
1aeb4     01 00 00 FF 
1aeb8     9C E4 05 F1 | 	add	objptr, ##668
1aebc     F2 00 68 FC | 	wrlong	#0, objptr
1aec0     01 00 00 FF 
1aec4     00 EA 05 F1 | 	add	ptr__dat__, ##512
1aec8     08 E4 05 F1 | 	add	objptr, #8
1aecc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1aed0     04 E4 85 F1 | 	sub	objptr, #4
1aed4     03 00 80 FF 
1aed8     F2 3C 69 FC | 	wrlong	##1694, objptr
1aedc     14 00 00 FF 
1aee0     2C E5 85 F1 | 	sub	objptr, ##10540
1aee4     F2 18 68 FC | 	wrlong	#12, objptr
1aee8     45 00 00 FF 
1aeec     94 E4 85 F1 | 	sub	objptr, ##35476
1aef0     01 00 00 FF 
1aef4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1aef8     B8 DC BF FD | 	call	#_init_commands
1aefc     F4 F6 BF FD | 	call	#_init_error_strings
1af00     F0 ED BF FD | 	call	#_init_audio
1af04     C0 36 BF FD | 	call	#_do_new
1af08     37 00 00 FF 
1af0c     6C E4 05 F1 | 	add	objptr, ##28268
1af10     F2 12 02 FB | 	rdlong	arg01, objptr
1af14     04 E4 85 F1 | 	sub	objptr, #4
1af18     F2 14 02 FB | 	rdlong	arg02, objptr
1af1c     37 00 00 FF 
1af20     68 E4 85 F1 | 	sub	objptr, ##28264
1af24     FC 27 B0 FD | 	call	#_hg010b_spin2_cls
1af28     37 00 00 FF 
1af2c     70 E4 05 F1 | 	add	objptr, ##28272
1af30     F2 12 02 FB | 	rdlong	arg01, objptr
1af34     37 00 00 FF 
1af38     70 E4 85 F1 | 	sub	objptr, ##28272
1af3c     94 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1af40                 | ' 
1af40                 | ' leading_spaces:=amount
1af40     01 00 00 FF 
1af44     B6 E4 05 F1 | 	add	objptr, ##694
1af48     F2 04 68 FC | 	wrlong	#2, objptr
1af4c     01 00 00 FF 
1af50     B6 E4 85 F1 | 	sub	objptr, ##694
1af54     78 01 00 FF 
1af58     B9 20 06 F6 | 	mov	local02, ##@LR__5262
1af5c     3D 12 06 F6 | 	mov	arg01, #61
1af60     3C 14 06 F6 | 	mov	arg02, #60
1af64     3B 16 06 F6 | 	mov	arg03, #59
1af68     3A 18 06 F6 | 	mov	arg04, #58
1af6c     8C 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1af70     FD 14 02 F6 | 	mov	arg02, result1
1af74     10 13 02 F6 | 	mov	arg01, local02
1af78     1C 42 B0 FD | 	call	#__system___mount
1af7c     78 01 00 FF 
1af80     BD 12 06 F6 | 	mov	arg01, ##@LR__5263
1af84     D0 44 B0 FD | 	call	#__system___chdir
1af88     78 01 00 FF 
1af8c     C5 20 06 F6 | 	mov	local02, ##@LR__5264
1af90     52 00 00 FF 
1af94     C8 E4 05 F1 | 	add	objptr, ##42184
1af98     F2 20 62 FC | 	wrlong	local02, objptr
1af9c     1B 00 00 FF 
1afa0     64 E4 85 F1 | 	sub	objptr, ##13924
1afa4     F2 12 02 FB | 	rdlong	arg01, objptr
1afa8     37 00 00 FF 
1afac     64 E4 85 F1 | 	sub	objptr, ##28260
1afb0     01 12 66 F0 | 	shl	arg01, #1
1afb4     01 14 06 F6 | 	mov	arg02, #1
1afb8     58 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1afbc                 | ' 
1afbc                 | ' init_commands
1afbc                 | ' init_error_strings
1afbc                 | ' init_audio
1afbc                 | ' do_new
1afbc                 | ' 
1afbc                 | ' 
1afbc                 | ' cls(ink, paper)
1afbc                 | ' v.setfontfamily(font) 				' use ST Mono font
1afbc                 | ' v.setleadingspaces(2)
1afbc                 | ' mount "/sd", _vfs_open_sdcard()
1afbc                 | ' chdir "/sd/bas"
1afbc                 | ' 
1afbc                 | ' currentdir$="/sd/bas"
1afbc                 | ' 
1afbc                 | ' position 2*editor_spaces,1 : print ver$
1afbc     00 12 06 F6 | 	mov	arg01, #0
1afc0     A0 97 B0 FD | 	call	#__system___getiolock_0485
1afc4     FD 12 02 F6 | 	mov	arg01, result1
1afc8     00 3E B0 FD | 	call	#__system___lockmem
1afcc     18 00 00 FF 
1afd0     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1afd4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1afd8     18 00 00 FF 
1afdc     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1afe0     00 12 06 F6 | 	mov	arg01, #0
1afe4     00 16 06 F6 | 	mov	arg03, #0
1afe8     D4 4A B0 FD | 	call	#__system___basic_print_string
1afec     00 12 06 F6 | 	mov	arg01, #0
1aff0     0A 14 06 F6 | 	mov	arg02, #10
1aff4     00 16 06 F6 | 	mov	arg03, #0
1aff8     6C 4A B0 FD | 	call	#__system___basic_print_char
1affc     00 12 06 F6 | 	mov	arg01, #0
1b000     60 97 B0 FD | 	call	#__system___getiolock_0485
1b004     FD 00 68 FC | 	wrlong	#0, result1
1b008     59 00 00 FF 
1b00c     B8 E5 05 F1 | 	add	objptr, ##46008
1b010     F2 12 02 FB | 	rdlong	arg01, objptr
1b014     16 00 00 FF 
1b018     2C E5 85 F1 | 	sub	objptr, ##11564
1b01c     F2 20 02 FB | 	rdlong	local02, objptr
1b020     43 00 00 FF 
1b024     8C E4 85 F1 | 	sub	objptr, ##34444
1b028     10 13 82 F1 | 	sub	arg01, local02
1b02c     00 14 06 F6 | 	mov	arg02, #0
1b030     0A 16 06 F6 | 	mov	arg03, #10
1b034     F8 5F B0 FD | 	call	#__system__Number_S
1b038     FD 12 02 F6 | 	mov	arg01, result1
1b03c     78 01 00 FF 
1b040     CD 14 06 F6 | 	mov	arg02, ##@LR__5265
1b044     E0 3D B0 FD | 	call	#__system___string_concat
1b048     FD 20 02 F6 | 	mov	local02, result1
1b04c     58 00 00 FF 
1b050     1C E5 05 F1 | 	add	objptr, ##45340
1b054     F2 20 62 FC | 	wrlong	local02, objptr
1b058     58 00 00 FF 
1b05c     1C E5 85 F1 | 	sub	objptr, ##45340
1b060                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1b060     00 12 06 F6 | 	mov	arg01, #0
1b064     FC 96 B0 FD | 	call	#__system___getiolock_0485
1b068     FD 12 02 F6 | 	mov	arg01, result1
1b06c     5C 3D B0 FD | 	call	#__system___lockmem
1b070     58 00 00 FF 
1b074     1C E5 05 F1 | 	add	objptr, ##45340
1b078     F2 14 02 FB | 	rdlong	arg02, objptr
1b07c     58 00 00 FF 
1b080     1C E5 85 F1 | 	sub	objptr, ##45340
1b084     00 12 06 F6 | 	mov	arg01, #0
1b088     00 16 06 F6 | 	mov	arg03, #0
1b08c     30 4A B0 FD | 	call	#__system___basic_print_string
1b090     00 12 06 F6 | 	mov	arg01, #0
1b094     0A 14 06 F6 | 	mov	arg02, #10
1b098     00 16 06 F6 | 	mov	arg03, #0
1b09c     C8 49 B0 FD | 	call	#__system___basic_print_char
1b0a0     00 12 06 F6 | 	mov	arg01, #0
1b0a4     BC 96 B0 FD | 	call	#__system___getiolock_0485
1b0a8     FD 00 68 FC | 	wrlong	#0, result1
1b0ac     37 00 00 FF 
1b0b0     64 E4 05 F1 | 	add	objptr, ##28260
1b0b4     F2 12 02 FB | 	rdlong	arg01, objptr
1b0b8     37 00 00 FF 
1b0bc     64 E4 85 F1 | 	sub	objptr, ##28260
1b0c0     01 12 66 F0 | 	shl	arg01, #1
1b0c4     04 14 06 F6 | 	mov	arg02, #4
1b0c8     48 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1b0cc                 | ' position 2*editor_spaces,4 : print "Ready"
1b0cc     00 12 06 F6 | 	mov	arg01, #0
1b0d0     90 96 B0 FD | 	call	#__system___getiolock_0485
1b0d4     FD 12 02 F6 | 	mov	arg01, result1
1b0d8     F0 3C B0 FD | 	call	#__system___lockmem
1b0dc     78 01 00 FF 
1b0e0     DF 14 06 F6 | 	mov	arg02, ##@LR__5266
1b0e4     00 12 06 F6 | 	mov	arg01, #0
1b0e8     00 16 06 F6 | 	mov	arg03, #0
1b0ec     D0 49 B0 FD | 	call	#__system___basic_print_string
1b0f0     FD 22 02 F6 | 	mov	local03, result1
1b0f4     00 12 06 F6 | 	mov	arg01, #0
1b0f8     0A 14 06 F6 | 	mov	arg02, #10
1b0fc     00 16 06 F6 | 	mov	arg03, #0
1b100     64 49 B0 FD | 	call	#__system___basic_print_char
1b104     01 24 06 F6 | 	mov	local04, #1
1b108     00 12 06 F6 | 	mov	arg01, #0
1b10c     54 96 B0 FD | 	call	#__system___getiolock_0485
1b110     FD 00 68 FC | 	wrlong	#0, result1
1b114     00 26 06 F6 | 	mov	local05, #0
1b118     00 14 06 F6 | 	mov	arg02, #0
1b11c     01 14 D6 F7 | 	test	arg02, #1 wc
1b120     5A 4C 64 FD | 	drvc	#38
1b124     01 14 D6 F7 | 	test	arg02, #1 wc
1b128     5A 4E 64 FD | 	drvc	#39
1b12c     78 01 00 FF 
1b130     E5 20 06 F6 | 	mov	local02, ##@LR__5267
1b134     59 00 00 FF 
1b138     E4 E5 05 F1 | 	add	objptr, ##46052
1b13c     F2 20 62 FC | 	wrlong	local02, objptr
1b140     04 E4 05 F1 | 	add	objptr, #4
1b144     FF FF FF FF 
1b148     F2 FE 6B FC | 	wrlong	##-1, objptr
1b14c     59 00 00 FF 
1b150     E8 E5 85 F1 | 	sub	objptr, ##46056
1b154                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1b154                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1b154                 | ' 
1b154                 | ' loadname="noname.bas"
1b154                 | ' do_insert=-1
1b154                 | ' 
1b154                 | ' 
1b154                 | ' '-------------------------------------------------------------------------------------------------------- 
1b154                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1b154                 | ' '--------------------------------------------------------------------------------------------------------
1b154                 | ' 
1b154                 | ' do
1b154                 | LR__2130
1b154     01 12 06 F6 | 	mov	arg01, #1
1b158     58 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1b15c     07 12 06 F6 | 	mov	arg01, #7
1b160     0B 00 00 FF 
1b164     CC E4 05 F1 | 	add	objptr, ##5836
1b168     60 39 B0 FD | 	call	#_audio096_spin2_stop
1b16c     0B 00 00 FF 
1b170     CC E4 85 F1 | 	sub	objptr, ##5836
1b174     40 34 B0 FD | 	call	#_usbnew_spin2_get_key
1b178     45 00 00 FF 
1b17c     A4 E4 05 F1 | 	add	objptr, ##35492
1b180     F2 FA 61 FC | 	wrlong	result1, objptr
1b184                 | '   return hkbd_led_rep
1b184     13 00 00 FF 
1b188     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1b18c     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1b190     13 00 00 FF 
1b194     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1b198     14 00 00 FF 
1b19c     48 E5 05 F1 | 	add	objptr, ##10568
1b1a0     F2 FA 61 FC | 	wrlong	result1, objptr
1b1a4                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1b1a4     14 00 00 FF 
1b1a8     48 E5 85 F1 | 	sub	objptr, ##10568
1b1ac     F2 20 02 FB | 	rdlong	local02, objptr
1b1b0     45 00 00 FF 
1b1b4     A4 E4 85 F1 | 	sub	objptr, ##35492
1b1b8     01 20 16 F2 | 	cmp	local02, #1 wc
1b1bc     BC 00 90 CD |  if_b	jmp	#LR__2131
1b1c0     45 00 00 FF 
1b1c4     A4 E4 05 F1 | 	add	objptr, ##35492
1b1c8     F2 24 02 FB | 	rdlong	local04, objptr
1b1cc     45 00 00 FF 
1b1d0     A4 E4 85 F1 | 	sub	objptr, ##35492
1b1d4     12 23 02 F6 | 	mov	local03, local04
1b1d8     04 22 16 F2 | 	cmp	local03, #4 wc
1b1dc     9C 00 90 3D |  if_ae	jmp	#LR__2131
1b1e0     58 00 00 FF 
1b1e4     20 E5 05 F1 | 	add	objptr, ##45344
1b1e8     F2 1E 02 FB | 	rdlong	local01, objptr
1b1ec     58 00 00 FF 
1b1f0     20 E5 85 F1 | 	sub	objptr, ##45344
1b1f4     0F 27 02 F6 | 	mov	local05, local01
1b1f8     01 26 0E F2 | 	cmp	local05, #1 wz
1b1fc     7C 00 90 5D |  if_ne	jmp	#LR__2131
1b200     04 00 00 FF 
1b204     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b208     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b20c     04 00 00 FF 
1b210     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b214     56 00 00 FF 
1b218     44 22 06 F6 | 	mov	local03, ##44100
1b21c     0C 24 C6 F9 | 	decod	local04, #12
1b220     00 26 06 F6 | 	mov	local05, #0
1b224     03 00 00 FF 
1b228     DE 1E 06 F6 | 	mov	local01, ##1758
1b22c     07 12 06 F6 | 	mov	arg01, #7
1b230     56 00 00 FF 
1b234     44 16 06 F6 | 	mov	arg03, ##44100
1b238     0C 18 C6 F9 | 	decod	arg04, #12
1b23c     00 1A 06 F6 | 	mov	arg05, #0
1b240     03 00 00 FF 
1b244     DE 1C 06 F6 | 	mov	arg06, ##1758
1b248     0B 00 00 FF 
1b24c     CC E4 05 F1 | 	add	objptr, ##5836
1b250     08 37 B0 FD | 	call	#_audio096_spin2_play
1b254     0B 00 00 FF 
1b258     CC E4 85 F1 | 	sub	objptr, ##5836
1b25c     0A 12 06 F6 | 	mov	arg01, #10
1b260     5C 3E B0 FD | 	call	#__system___waitms
1b264     07 12 06 F6 | 	mov	arg01, #7
1b268     0B 00 00 FF 
1b26c     CC E4 05 F1 | 	add	objptr, ##5836
1b270     58 38 B0 FD | 	call	#_audio096_spin2_stop
1b274     0B 00 00 FF 
1b278     CC E4 85 F1 | 	sub	objptr, ##5836
1b27c                 | LR__2131
1b27c                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1b27c     45 00 00 FF 
1b280     A4 E4 05 F1 | 	add	objptr, ##35492
1b284     F2 20 02 FB | 	rdlong	local02, objptr
1b288     45 00 00 FF 
1b28c     A4 E4 85 F1 | 	sub	objptr, ##35492
1b290     04 20 16 F2 | 	cmp	local02, #4 wc
1b294     80 00 90 CD |  if_b	jmp	#LR__2132
1b298     45 00 00 FF 
1b29c     A4 E4 05 F1 | 	add	objptr, ##35492
1b2a0     F2 24 02 FB | 	rdlong	local04, objptr
1b2a4     45 00 00 FF 
1b2a8     A4 E4 85 F1 | 	sub	objptr, ##35492
1b2ac     12 23 02 F6 | 	mov	local03, local04
1b2b0     00 00 40 FF 
1b2b4     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1b2b8     45 00 00 CF 
1b2bc     A4 E4 05 C1 |  if_b	add	objptr, ##35492
1b2c0     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1b2c4     45 00 00 CF 
1b2c8     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
1b2cc     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1b2d0     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1b2d4     40 00 90 3D |  if_ae	jmp	#LR__2132
1b2d8     45 00 00 FF 
1b2dc     A4 E4 05 F1 | 	add	objptr, ##35492
1b2e0     F2 20 02 FB | 	rdlong	local02, objptr
1b2e4     04 E4 05 F1 | 	add	objptr, #4
1b2e8     F2 20 62 FC | 	wrlong	local02, objptr
1b2ec     14 00 00 FF 
1b2f0     48 E5 05 F1 | 	add	objptr, ##10568
1b2f4     F2 02 68 FC | 	wrlong	#1, objptr
1b2f8     14 00 00 FF 
1b2fc     48 E5 85 F1 | 	sub	objptr, ##10568
1b300     F2 20 02 FB | 	rdlong	local02, objptr
1b304     14 00 00 FF 
1b308     4C E5 05 F1 | 	add	objptr, ##10572
1b30c     F2 20 62 FC | 	wrlong	local02, objptr
1b310     59 00 00 FF 
1b314     F4 E5 85 F1 | 	sub	objptr, ##46068
1b318                 | LR__2132
1b318                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1b318     45 00 00 FF 
1b31c     A4 E4 05 F1 | 	add	objptr, ##35492
1b320     F2 20 02 FB | 	rdlong	local02, objptr
1b324     45 00 00 FF 
1b328     A4 E4 85 F1 | 	sub	objptr, ##35492
1b32c     00 00 40 FF 
1b330     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1b334     59 00 00 3F 
1b338     F8 E5 05 31 |  if_ae	add	objptr, ##46072
1b33c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b340     08 E4 85 31 |  if_ae	sub	objptr, #8
1b344     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b348     59 00 00 3F 
1b34c     F0 E5 85 31 |  if_ae	sub	objptr, ##46064
1b350                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1b350     45 00 00 FF 
1b354     A4 E4 05 F1 | 	add	objptr, ##35492
1b358     F2 20 0A FB | 	rdlong	local02, objptr wz
1b35c     45 00 00 FF 
1b360     A4 E4 85 F1 | 	sub	objptr, ##35492
1b364     59 00 00 AF 
1b368     F0 E5 05 A1 |  if_e	add	objptr, ##46064
1b36c     F2 24 02 AB |  if_e	rdlong	local04, objptr
1b370     59 00 00 AF 
1b374     F0 E5 85 A1 |  if_e	sub	objptr, ##46064
1b378     12 23 02 A6 |  if_e	mov	local03, local04
1b37c     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1b380     59 00 00 AF 
1b384     F8 E5 05 A1 |  if_e	add	objptr, ##46072
1b388     F2 20 02 AB |  if_e	rdlong	local02, objptr
1b38c     01 20 06 A1 |  if_e	add	local02, #1
1b390     F2 20 62 AC |  if_e	wrlong	local02, objptr
1b394     59 00 00 AF 
1b398     F8 E5 85 A1 |  if_e	sub	objptr, ##46072
1b39c                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1b39c     45 00 00 FF 
1b3a0     A4 E4 05 F1 | 	add	objptr, ##35492
1b3a4     F2 20 02 FB | 	rdlong	local02, objptr
1b3a8     45 00 00 FF 
1b3ac     A4 E4 85 F1 | 	sub	objptr, ##35492
1b3b0     00 00 40 FF 
1b3b4     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1b3b8     44 00 90 3D |  if_ae	jmp	#LR__2134
1b3bc     59 00 00 FF 
1b3c0     F8 E5 05 F1 | 	add	objptr, ##46072
1b3c4     F2 20 02 FB | 	rdlong	local02, objptr
1b3c8     59 00 00 FF 
1b3cc     F8 E5 85 F1 | 	sub	objptr, ##46072
1b3d0     19 20 0E F2 | 	cmp	local02, #25 wz
1b3d4     28 00 90 5D |  if_ne	jmp	#LR__2133
1b3d8     45 00 00 FF 
1b3dc     A8 E4 05 F1 | 	add	objptr, ##35496
1b3e0     F2 20 02 FB | 	rdlong	local02, objptr
1b3e4     14 00 00 FF 
1b3e8     4C E5 05 F1 | 	add	objptr, ##10572
1b3ec     F2 20 62 FC | 	wrlong	local02, objptr
1b3f0     04 E4 05 F1 | 	add	objptr, #4
1b3f4     F2 2A 68 FC | 	wrlong	#21, objptr
1b3f8     59 00 00 FF 
1b3fc     F8 E5 85 F1 | 	sub	objptr, ##46072
1b400                 | LR__2133
1b400                 | LR__2134
1b400                 | ' 
1b400                 | ' 
1b400                 | ' if key3<>0 then
1b400     59 00 00 FF 
1b404     F4 E5 05 F1 | 	add	objptr, ##46068
1b408     F2 28 0A FB | 	rdlong	local06, objptr wz
1b40c     59 00 00 FF 
1b410     F4 E5 85 F1 | 	sub	objptr, ##46068
1b414     3C FD 9F AD |  if_e	jmp	#LR__2130
1b418                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1b418     58 00 00 FF 
1b41c     20 E5 05 F1 | 	add	objptr, ##45344
1b420     F2 20 02 FB | 	rdlong	local02, objptr
1b424     58 00 00 FF 
1b428     20 E5 85 F1 | 	sub	objptr, ##45344
1b42c     01 20 0E F2 | 	cmp	local02, #1 wz
1b430     50 00 90 5D |  if_ne	jmp	#LR__2135
1b434     59 00 00 FF 
1b438     C4 E5 05 F1 | 	add	objptr, ##46020
1b43c     F2 14 02 FB | 	rdlong	arg02, objptr
1b440     56 00 00 FF 
1b444     44 22 06 F6 | 	mov	local03, ##44100
1b448     0C 24 C6 F9 | 	decod	local04, #12
1b44c     04 E4 85 F1 | 	sub	objptr, #4
1b450     F2 26 02 FB | 	rdlong	local05, objptr
1b454     01 1E 66 F6 | 	neg	local01, #1
1b458     07 12 06 F6 | 	mov	arg01, #7
1b45c     56 00 00 FF 
1b460     44 16 06 F6 | 	mov	arg03, ##44100
1b464     0C 18 C6 F9 | 	decod	arg04, #12
1b468     13 1B 02 F6 | 	mov	arg05, local05
1b46c     01 1C 66 F6 | 	neg	arg06, #1
1b470     4E 00 00 FF 
1b474     F4 E4 85 F1 | 	sub	objptr, ##40180
1b478     E0 34 B0 FD | 	call	#_audio096_spin2_play
1b47c     0B 00 00 FF 
1b480     CC E4 85 F1 | 	sub	objptr, ##5836
1b484                 | LR__2135
1b484     59 00 00 FF 
1b488     F4 E5 05 F1 | 	add	objptr, ##46068
1b48c     F2 12 02 FB | 	rdlong	arg01, objptr
1b490     59 00 00 FF 
1b494     F4 E5 85 F1 | 	sub	objptr, ##46068
1b498     CC F7 BF FD | 	call	#_scantochar
1b49c     59 00 00 FF 
1b4a0     FC E5 05 F1 | 	add	objptr, ##46076
1b4a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b4a8                 | '   if leds and 2 = 2 then 
1b4a8     10 E4 85 F1 | 	sub	objptr, #16
1b4ac     F2 20 0A FB | 	rdlong	local02, objptr wz
1b4b0     59 00 00 FF 
1b4b4     EC E5 85 F1 | 	sub	objptr, ##46060
1b4b8     68 01 90 AD |  if_e	jmp	#LR__2143
1b4bc                 | '     if key4>96 andalso key4<123 then
1b4bc     59 00 00 FF 
1b4c0     FC E5 05 F1 | 	add	objptr, ##46076
1b4c4     F2 20 02 FB | 	rdlong	local02, objptr
1b4c8     59 00 00 FF 
1b4cc     FC E5 85 F1 | 	sub	objptr, ##46076
1b4d0     61 20 56 F2 | 	cmps	local02, #97 wc
1b4d4     40 00 90 CD |  if_b	jmp	#LR__2136
1b4d8     59 00 00 FF 
1b4dc     FC E5 05 F1 | 	add	objptr, ##46076
1b4e0     F2 24 02 FB | 	rdlong	local04, objptr
1b4e4     59 00 00 FF 
1b4e8     FC E5 85 F1 | 	sub	objptr, ##46076
1b4ec     12 23 02 F6 | 	mov	local03, local04
1b4f0     7B 22 56 F2 | 	cmps	local03, #123 wc
1b4f4     20 00 90 3D |  if_ae	jmp	#LR__2136
1b4f8     59 00 00 FF 
1b4fc     FC E5 05 F1 | 	add	objptr, ##46076
1b500     F2 20 02 FB | 	rdlong	local02, objptr
1b504     20 20 86 F1 | 	sub	local02, #32
1b508     F2 20 62 FC | 	wrlong	local02, objptr
1b50c     59 00 00 FF 
1b510     FC E5 85 F1 | 	sub	objptr, ##46076
1b514     0C 01 90 FD | 	jmp	#LR__2142
1b518                 | LR__2136
1b518     59 00 00 FF 
1b51c     FC E5 05 F1 | 	add	objptr, ##46076
1b520     F2 20 02 FB | 	rdlong	local02, objptr
1b524     59 00 00 FF 
1b528     FC E5 85 F1 | 	sub	objptr, ##46076
1b52c     41 20 56 F2 | 	cmps	local02, #65 wc
1b530     40 00 90 CD |  if_b	jmp	#LR__2137
1b534     59 00 00 FF 
1b538     FC E5 05 F1 | 	add	objptr, ##46076
1b53c     F2 24 02 FB | 	rdlong	local04, objptr
1b540     59 00 00 FF 
1b544     FC E5 85 F1 | 	sub	objptr, ##46076
1b548     12 23 02 F6 | 	mov	local03, local04
1b54c     5B 22 56 F2 | 	cmps	local03, #91 wc
1b550     20 00 90 3D |  if_ae	jmp	#LR__2137
1b554     59 00 00 FF 
1b558     FC E5 05 F1 | 	add	objptr, ##46076
1b55c     F2 20 02 FB | 	rdlong	local02, objptr
1b560     20 20 06 F1 | 	add	local02, #32
1b564     F2 20 62 FC | 	wrlong	local02, objptr
1b568     59 00 00 FF 
1b56c     FC E5 85 F1 | 	sub	objptr, ##46076
1b570     B0 00 90 FD | 	jmp	#LR__2141
1b574                 | LR__2137
1b574     59 00 00 FF 
1b578     FC E5 05 F1 | 	add	objptr, ##46076
1b57c     F2 20 02 FB | 	rdlong	local02, objptr
1b580     59 00 00 FF 
1b584     FC E5 85 F1 | 	sub	objptr, ##46076
1b588     17 20 56 F2 | 	cmps	local02, #23 wc
1b58c     40 00 90 CD |  if_b	jmp	#LR__2138
1b590     59 00 00 FF 
1b594     FC E5 05 F1 | 	add	objptr, ##46076
1b598     F2 24 02 FB | 	rdlong	local04, objptr
1b59c     59 00 00 FF 
1b5a0     FC E5 85 F1 | 	sub	objptr, ##46076
1b5a4     12 23 02 F6 | 	mov	local03, local04
1b5a8     20 22 56 F2 | 	cmps	local03, #32 wc
1b5ac     20 00 90 3D |  if_ae	jmp	#LR__2138
1b5b0     59 00 00 FF 
1b5b4     FC E5 05 F1 | 	add	objptr, ##46076
1b5b8     F2 20 02 FB | 	rdlong	local02, objptr
1b5bc     09 20 86 F1 | 	sub	local02, #9
1b5c0     F2 20 62 FC | 	wrlong	local02, objptr
1b5c4     59 00 00 FF 
1b5c8     FC E5 85 F1 | 	sub	objptr, ##46076
1b5cc     54 00 90 FD | 	jmp	#LR__2140
1b5d0                 | LR__2138
1b5d0     59 00 00 FF 
1b5d4     FC E5 05 F1 | 	add	objptr, ##46076
1b5d8     F2 20 02 FB | 	rdlong	local02, objptr
1b5dc     59 00 00 FF 
1b5e0     FC E5 85 F1 | 	sub	objptr, ##46076
1b5e4     0E 20 56 F2 | 	cmps	local02, #14 wc
1b5e8     38 00 90 CD |  if_b	jmp	#LR__2139
1b5ec     59 00 00 FF 
1b5f0     FC E5 05 F1 | 	add	objptr, ##46076
1b5f4     F2 24 02 FB | 	rdlong	local04, objptr
1b5f8     59 00 00 FF 
1b5fc     FC E5 85 F1 | 	sub	objptr, ##46076
1b600     12 23 02 F6 | 	mov	local03, local04
1b604     17 22 56 F2 | 	cmps	local03, #23 wc
1b608     59 00 00 CF 
1b60c     FC E5 05 C1 |  if_b	add	objptr, ##46076
1b610     F2 20 02 CB |  if_b	rdlong	local02, objptr
1b614     27 20 06 C1 |  if_b	add	local02, #39
1b618     F2 20 62 CC |  if_b	wrlong	local02, objptr
1b61c     59 00 00 CF 
1b620     FC E5 85 C1 |  if_b	sub	objptr, ##46076
1b624                 | LR__2139
1b624                 | LR__2140
1b624                 | LR__2141
1b624                 | LR__2142
1b624                 | LR__2143
1b624                 | '  
1b624                 | '  
1b624                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1b624     59 00 00 FF 
1b628     FC E5 05 F1 | 	add	objptr, ##46076
1b62c     F2 20 02 FB | 	rdlong	local02, objptr
1b630     59 00 00 FF 
1b634     FC E5 85 F1 | 	sub	objptr, ##46076
1b638     01 20 56 F2 | 	cmps	local02, #1 wc
1b63c     E8 01 90 CD |  if_b	jmp	#LR__2148
1b640     59 00 00 FF 
1b644     FC E5 05 F1 | 	add	objptr, ##46076
1b648     F2 24 02 FB | 	rdlong	local04, objptr
1b64c     59 00 00 FF 
1b650     FC E5 85 F1 | 	sub	objptr, ##46076
1b654     12 23 02 F6 | 	mov	local03, local04
1b658     7F 22 56 F2 | 	cmps	local03, #127 wc
1b65c     3C E4 05 C1 |  if_b	add	objptr, #60
1b660     F2 1E E2 CA |  if_b	rdword	local01, objptr
1b664     3C E4 85 C1 |  if_b	sub	objptr, #60
1b668     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1b66c     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1b670     B4 01 90 3D |  if_ae	jmp	#LR__2148
1b674                 | '     if do_insert then
1b674     59 00 00 FF 
1b678     E8 E5 05 F1 | 	add	objptr, ##46056
1b67c     F2 20 0A FB | 	rdlong	local02, objptr wz
1b680     59 00 00 FF 
1b684     E8 E5 85 F1 | 	sub	objptr, ##46056
1b688     84 01 90 AD |  if_e	jmp	#LR__2147
1b68c                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
1b68c     3E E4 05 F1 | 	add	objptr, #62
1b690     F2 22 C2 FA | 	rdbyte	local03, objptr
1b694     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b698     80 24 06 FA | 	mul	local04, #128
1b69c     3A E4 85 F1 | 	sub	objptr, #58
1b6a0     F2 2A 02 FB | 	rdlong	local07, objptr
1b6a4     15 2D 02 F6 | 	mov	local08, local07
1b6a8     12 2D 02 F1 | 	add	local08, local04
1b6ac     7F 2C 06 F1 | 	add	local08, #127
1b6b0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b6b4     80 22 06 FA | 	mul	local03, #128
1b6b8     11 2B 02 F1 | 	add	local07, local03
1b6bc     38 E4 05 F1 | 	add	objptr, #56
1b6c0     F2 26 E2 FA | 	rdword	local05, objptr
1b6c4     3C E4 85 F1 | 	sub	objptr, #60
1b6c8     13 2F 52 F6 | 	abs	local09, local05 wc
1b6cc     01 2E 46 F0 | 	shr	local09, #1
1b6d0     17 2B 82 F3 | 	sumc	local07, local09
1b6d4     01 2A 06 F1 | 	add	local07, #1
1b6d8                 | LR__2144
1b6d8     16 31 02 F6 | 	mov	local10, local08
1b6dc     01 30 86 F1 | 	sub	local10, #1
1b6e0     18 13 02 F6 | 	mov	arg01, local10
1b6e4     78 F4 BF FD | 	call	#_pspeek
1b6e8     FD 32 02 F6 | 	mov	local11, result1
1b6ec     19 35 E2 F8 | 	getbyte	local12, local11, #0
1b6f0     1A 37 02 F6 | 	mov	local13, local12
1b6f4     16 13 02 F6 | 	mov	arg01, local08
1b6f8     1B 15 02 F6 | 	mov	arg02, local13
1b6fc     18 F4 BF FD | 	call	#_pspoke
1b700     01 2C 86 F1 | 	sub	local08, #1
1b704     15 2D 52 F2 | 	cmps	local08, local07 wc
1b708     CC FF 9F 3D |  if_ae	jmp	#LR__2144
1b70c     5A 00 00 FF 
1b710     00 E4 05 F1 | 	add	objptr, ##46080
1b714     F2 00 68 FC | 	wrlong	#0, objptr
1b718     59 00 00 FF 
1b71c     C2 E5 85 F1 | 	sub	objptr, ##46018
1b720     F2 22 C2 FA | 	rdbyte	local03, objptr
1b724     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b728     80 24 06 FA | 	mul	local04, #128
1b72c     3A E4 85 F1 | 	sub	objptr, #58
1b730     F2 26 02 FB | 	rdlong	local05, objptr
1b734     13 2D 02 F6 | 	mov	local08, local05
1b738     12 2D 02 F1 | 	add	local08, local04
1b73c     38 E4 05 F1 | 	add	objptr, #56
1b740     F2 2E E2 FA | 	rdword	local09, objptr
1b744     17 1F 32 F9 | 	getword	local01, local09, #0
1b748     0F 39 52 F6 | 	abs	local14, local01 wc
1b74c     01 38 46 F0 | 	shr	local14, #1
1b750     1C 39 82 F6 | 	negc	local14, local14
1b754     1C 2D 02 F1 | 	add	local08, local14
1b758     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b75c     80 22 06 FA | 	mul	local03, #128
1b760     13 25 02 F6 | 	mov	local04, local05
1b764     3C E4 85 F1 | 	sub	objptr, #60
1b768     12 3B 02 F6 | 	mov	local15, local04
1b76c     11 3B 02 F1 | 	add	local15, local03
1b770     80 3A 06 F1 | 	add	local15, #128
1b774                 | LR__2145
1b774     1D 2D 52 F2 | 	cmps	local08, local15 wc
1b778     94 00 90 3D |  if_ae	jmp	#LR__2146
1b77c     3C E4 05 F1 | 	add	objptr, #60
1b780     F2 20 E2 FA | 	rdword	local02, objptr
1b784     59 00 00 FF 
1b788     C4 E5 05 F1 | 	add	objptr, ##46020
1b78c     F2 24 02 FB | 	rdlong	local04, objptr
1b790     01 24 66 F0 | 	shl	local04, #1
1b794     12 21 02 F1 | 	add	local02, local04
1b798     59 00 00 FF 
1b79c     C2 E5 85 F1 | 	sub	objptr, ##46018
1b7a0     F2 28 C2 FA | 	rdbyte	local06, objptr
1b7a4     3E E4 85 F1 | 	sub	objptr, #62
1b7a8     10 28 06 FA | 	mul	local06, #16
1b7ac     04 28 06 F1 | 	add	local06, #4
1b7b0     16 13 02 F6 | 	mov	arg01, local08
1b7b4     A8 F3 BF FD | 	call	#_pspeek
1b7b8     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1b7bc     41 E4 05 F1 | 	add	objptr, #65
1b7c0     F2 24 02 FB | 	rdlong	local04, objptr
1b7c4     04 E4 05 F1 | 	add	objptr, #4
1b7c8     F2 1E 02 FB | 	rdlong	local01, objptr
1b7cc     45 E4 85 F1 | 	sub	objptr, #69
1b7d0     0F 27 02 F6 | 	mov	local05, local01
1b7d4     10 13 02 F6 | 	mov	arg01, local02
1b7d8     14 15 02 F6 | 	mov	arg02, local06
1b7dc     11 17 02 F6 | 	mov	arg03, local03
1b7e0     12 19 02 F6 | 	mov	arg04, local04
1b7e4     13 1B 02 F6 | 	mov	arg05, local05
1b7e8     C4 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1b7ec     5A 00 00 FF 
1b7f0     00 E4 05 F1 | 	add	objptr, ##46080
1b7f4     F2 20 02 FB | 	rdlong	local02, objptr
1b7f8     01 20 06 F1 | 	add	local02, #1
1b7fc     F2 20 62 FC | 	wrlong	local02, objptr
1b800     5A 00 00 FF 
1b804     00 E4 85 F1 | 	sub	objptr, ##46080
1b808     01 2C 06 F1 | 	add	local08, #1
1b80c     64 FF 9F FD | 	jmp	#LR__2145
1b810                 | LR__2146
1b810                 | LR__2147
1b810     59 00 00 FF 
1b814     FC E5 05 F1 | 	add	objptr, ##46076
1b818     F2 12 02 FB | 	rdlong	arg01, objptr
1b81c     59 00 00 FF 
1b820     FC E5 85 F1 | 	sub	objptr, ##46076
1b824     D0 1F B0 FD | 	call	#_hg010b_spin2_putchar
1b828                 | LR__2148
1b828                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1b828     59 00 00 FF 
1b82c     FC E5 05 F1 | 	add	objptr, ##46076
1b830     F2 20 02 FB | 	rdlong	local02, objptr
1b834     59 00 00 FF 
1b838     FC E5 85 F1 | 	sub	objptr, ##46076
1b83c     01 20 56 F2 | 	cmps	local02, #1 wc
1b840     D0 00 90 CD |  if_b	jmp	#LR__2149
1b844     59 00 00 FF 
1b848     FC E5 05 F1 | 	add	objptr, ##46076
1b84c     F2 24 02 FB | 	rdlong	local04, objptr
1b850     59 00 00 FF 
1b854     FC E5 85 F1 | 	sub	objptr, ##46076
1b858     12 23 02 F6 | 	mov	local03, local04
1b85c     7F 22 56 F2 | 	cmps	local03, #127 wc
1b860     B0 00 90 3D |  if_ae	jmp	#LR__2149
1b864     3C E4 05 F1 | 	add	objptr, #60
1b868     F2 1E E2 FA | 	rdword	local01, objptr
1b86c     3C E4 85 F1 | 	sub	objptr, #60
1b870     0F 27 32 F9 | 	getword	local05, local01, #0
1b874     FE 26 0E F2 | 	cmp	local05, #254 wz
1b878     58 00 00 AF 
1b87c     20 E5 05 A1 |  if_e	add	objptr, ##45344
1b880     F2 38 02 AB |  if_e	rdlong	local14, objptr
1b884     58 00 00 AF 
1b888     20 E5 85 A1 |  if_e	sub	objptr, ##45344
1b88c     1C 2F 02 A6 |  if_e	mov	local09, local14
1b890     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1b894     7C 00 90 5D |  if_ne	jmp	#LR__2149
1b898     04 00 00 FF 
1b89c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b8a0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b8a4     04 00 00 FF 
1b8a8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b8ac     56 00 00 FF 
1b8b0     44 22 06 F6 | 	mov	local03, ##44100
1b8b4     0C 24 C6 F9 | 	decod	local04, #12
1b8b8     00 26 06 F6 | 	mov	local05, #0
1b8bc     03 00 00 FF 
1b8c0     DE 1E 06 F6 | 	mov	local01, ##1758
1b8c4     07 12 06 F6 | 	mov	arg01, #7
1b8c8     56 00 00 FF 
1b8cc     44 16 06 F6 | 	mov	arg03, ##44100
1b8d0     0C 18 C6 F9 | 	decod	arg04, #12
1b8d4     00 1A 06 F6 | 	mov	arg05, #0
1b8d8     03 00 00 FF 
1b8dc     DE 1C 06 F6 | 	mov	arg06, ##1758
1b8e0     0B 00 00 FF 
1b8e4     CC E4 05 F1 | 	add	objptr, ##5836
1b8e8     70 30 B0 FD | 	call	#_audio096_spin2_play
1b8ec     0B 00 00 FF 
1b8f0     CC E4 85 F1 | 	sub	objptr, ##5836
1b8f4     2C 13 06 F6 | 	mov	arg01, #300
1b8f8     C4 37 B0 FD | 	call	#__system___waitms
1b8fc     07 12 06 F6 | 	mov	arg01, #7
1b900     0B 00 00 FF 
1b904     CC E4 05 F1 | 	add	objptr, ##5836
1b908     C0 31 B0 FD | 	call	#_audio096_spin2_stop
1b90c     0B 00 00 FF 
1b910     CC E4 85 F1 | 	sub	objptr, ##5836
1b914                 | LR__2149
1b914                 | '  
1b914                 | '   if key4=key_enter then 
1b914     59 00 00 FF 
1b918     FC E5 05 F1 | 	add	objptr, ##46076
1b91c     F2 20 02 FB | 	rdlong	local02, objptr
1b920     59 00 00 FF 
1b924     FC E5 85 F1 | 	sub	objptr, ##46076
1b928     8D 20 0E F2 | 	cmp	local02, #141 wz
1b92c     F0 00 90 5D |  if_ne	jmp	#LR__2152
1b930     78 01 00 FF 
1b934     F0 20 06 F6 | 	mov	local02, ##@LR__5268
1b938     37 00 00 FF 
1b93c     4C E4 05 F1 | 	add	objptr, ##28236
1b940     F2 20 62 FC | 	wrlong	local02, objptr
1b944                 | ' 
1b944                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1b944                 | '     line$="" : for i=editor_spaces to 127
1b944     18 E4 05 F1 | 	add	objptr, #24
1b948     F2 2C 02 FB | 	rdlong	local08, objptr
1b94c     37 00 00 FF 
1b950     64 E4 85 F1 | 	sub	objptr, ##28260
1b954                 | LR__2150
1b954     80 2C 56 F2 | 	cmps	local08, #128 wc
1b958     8C 00 90 3D |  if_ae	jmp	#LR__2151
1b95c     3E E4 05 F1 | 	add	objptr, #62
1b960     F2 1E C2 FA | 	rdbyte	local01, objptr
1b964     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1b968     13 2F 02 F6 | 	mov	local09, local05
1b96c     80 2E 06 FA | 	mul	local09, #128
1b970     3A E4 85 F1 | 	sub	objptr, #58
1b974     F2 38 02 FB | 	rdlong	local14, objptr
1b978     04 E4 85 F1 | 	sub	objptr, #4
1b97c     1C 13 02 F6 | 	mov	arg01, local14
1b980     17 13 02 F1 | 	add	arg01, local09
1b984     16 13 02 F1 | 	add	arg01, local08
1b988     D4 F1 BF FD | 	call	#_pspeek
1b98c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b990     5A 00 00 FF 
1b994     04 E4 05 F1 | 	add	objptr, ##46084
1b998     F2 24 62 FC | 	wrlong	local04, objptr
1b99c     22 00 00 FF 
1b9a0     B8 E5 85 F1 | 	sub	objptr, ##17848
1b9a4     F2 28 02 FB | 	rdlong	local06, objptr
1b9a8     37 00 00 FF 
1b9ac     4C E4 85 F1 | 	sub	objptr, ##28236
1b9b0     12 13 02 F6 | 	mov	arg01, local04
1b9b4     E8 55 B0 FD | 	call	#__system__Chr_S
1b9b8     FD 14 02 F6 | 	mov	arg02, result1
1b9bc     14 13 02 F6 | 	mov	arg01, local06
1b9c0     64 34 B0 FD | 	call	#__system___string_concat
1b9c4     37 00 00 FF 
1b9c8     4C E4 05 F1 | 	add	objptr, ##28236
1b9cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b9d0     37 00 00 FF 
1b9d4     4C E4 85 F1 | 	sub	objptr, ##28236
1b9d8     16 23 02 F6 | 	mov	local03, local08
1b9dc     01 22 06 F1 | 	add	local03, #1
1b9e0     11 2D 02 F6 | 	mov	local08, local03
1b9e4     6C FF 9F FD | 	jmp	#LR__2150
1b9e8                 | LR__2151
1b9e8     C4 23 B0 FD | 	call	#_hg010b_spin2_crlf
1b9ec     2C 50 BE FD | 	call	#_interpret
1b9f0     78 01 00 FF 
1b9f4     F1 20 06 F6 | 	mov	local02, ##@LR__5269
1b9f8     37 00 00 FF 
1b9fc     4C E4 05 F1 | 	add	objptr, ##28236
1ba00     F2 20 62 FC | 	wrlong	local02, objptr
1ba04     22 00 00 FF 
1ba08     A4 E5 05 F1 | 	add	objptr, ##17828
1ba0c     F2 00 68 FC | 	wrlong	#0, objptr
1ba10     08 E4 05 F1 | 	add	objptr, #8
1ba14     F2 00 68 FC | 	wrlong	#0, objptr
1ba18     59 00 00 FF 
1ba1c     F8 E5 85 F1 | 	sub	objptr, ##46072
1ba20                 | LR__2152
1ba20     59 00 00 FF 
1ba24     F4 E5 05 F1 | 	add	objptr, ##46068
1ba28     F2 20 02 FB | 	rdlong	local02, objptr
1ba2c     10 21 E2 F8 | 	getbyte	local02, local02, #0
1ba30     08 E4 05 F1 | 	add	objptr, #8
1ba34     F2 20 62 FC | 	wrlong	local02, objptr
1ba38                 | '   'tab
1ba38                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1ba38     59 00 00 FF 
1ba3c     FC E5 85 F1 | 	sub	objptr, ##46076
1ba40     2B 20 0E F2 | 	cmp	local02, #43 wz
1ba44     B4 00 90 5D |  if_ne	jmp	#LR__2153
1ba48     3C E4 05 F1 | 	add	objptr, #60
1ba4c     F2 24 E2 FA | 	rdword	local04, objptr
1ba50     3C E4 85 F1 | 	sub	objptr, #60
1ba54     12 23 32 F9 | 	getword	local03, local04, #0
1ba58     F0 22 16 F2 | 	cmp	local03, #240 wc
1ba5c     9C 00 90 CD |  if_b	jmp	#LR__2153
1ba60     58 00 00 FF 
1ba64     20 E5 05 F1 | 	add	objptr, ##45344
1ba68     F2 1E 02 FB | 	rdlong	local01, objptr
1ba6c     58 00 00 FF 
1ba70     20 E5 85 F1 | 	sub	objptr, ##45344
1ba74     0F 27 02 F6 | 	mov	local05, local01
1ba78     01 26 0E F2 | 	cmp	local05, #1 wz
1ba7c     7C 00 90 5D |  if_ne	jmp	#LR__2153
1ba80     04 00 00 FF 
1ba84     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1ba88     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1ba8c     04 00 00 FF 
1ba90     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1ba94     56 00 00 FF 
1ba98     44 22 06 F6 | 	mov	local03, ##44100
1ba9c     0E 24 C6 F9 | 	decod	local04, #14
1baa0     00 26 06 F6 | 	mov	local05, #0
1baa4     03 00 00 FF 
1baa8     DE 1E 06 F6 | 	mov	local01, ##1758
1baac     00 12 06 F6 | 	mov	arg01, #0
1bab0     56 00 00 FF 
1bab4     44 16 06 F6 | 	mov	arg03, ##44100
1bab8     0E 18 C6 F9 | 	decod	arg04, #14
1babc     00 1A 06 F6 | 	mov	arg05, #0
1bac0     03 00 00 FF 
1bac4     DE 1C 06 F6 | 	mov	arg06, ##1758
1bac8     0B 00 00 FF 
1bacc     CC E4 05 F1 | 	add	objptr, ##5836
1bad0     88 2E B0 FD | 	call	#_audio096_spin2_play
1bad4     0B 00 00 FF 
1bad8     CC E4 85 F1 | 	sub	objptr, ##5836
1badc     2C 13 06 F6 | 	mov	arg01, #300
1bae0     DC 35 B0 FD | 	call	#__system___waitms
1bae4     00 12 06 F6 | 	mov	arg01, #0
1bae8     0B 00 00 FF 
1baec     CC E4 05 F1 | 	add	objptr, ##5836
1baf0     D8 2F B0 FD | 	call	#_audio096_spin2_stop
1baf4     0B 00 00 FF 
1baf8     CC E4 85 F1 | 	sub	objptr, ##5836
1bafc                 | LR__2153
1bafc                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1bafc     59 00 00 FF 
1bb00     FC E5 05 F1 | 	add	objptr, ##46076
1bb04     F2 20 02 FB | 	rdlong	local02, objptr
1bb08     59 00 00 FF 
1bb0c     FC E5 85 F1 | 	sub	objptr, ##46076
1bb10     2B 20 0E F2 | 	cmp	local02, #43 wz
1bb14     34 00 90 5D |  if_ne	jmp	#LR__2154
1bb18     3C E4 05 F1 | 	add	objptr, #60
1bb1c     F2 24 E2 FA | 	rdword	local04, objptr
1bb20     3C E4 85 F1 | 	sub	objptr, #60
1bb24     12 23 32 F9 | 	getword	local03, local04, #0
1bb28     F0 22 16 F2 | 	cmp	local03, #240 wc
1bb2c     1C 00 90 3D |  if_ae	jmp	#LR__2154
1bb30     3C E4 05 F1 | 	add	objptr, #60
1bb34     F2 22 E2 FA | 	rdword	local03, objptr
1bb38     3C E4 85 F1 | 	sub	objptr, #60
1bb3c     11 13 32 F9 | 	getword	arg01, local03, #0
1bb40     08 12 06 F1 | 	add	arg01, #8
1bb44     F8 12 06 F5 | 	and	arg01, #248
1bb48     04 1B B0 FD | 	call	#_hg010b_spin2_setcursorx
1bb4c                 | LR__2154
1bb4c                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1bb4c                 | '   if key4=77 then i=127 : do: 
1bb4c     59 00 00 FF 
1bb50     FC E5 05 F1 | 	add	objptr, ##46076
1bb54     F2 20 02 FB | 	rdlong	local02, objptr
1bb58     59 00 00 FF 
1bb5c     FC E5 85 F1 | 	sub	objptr, ##46076
1bb60     4D 20 0E F2 | 	cmp	local02, #77 wz
1bb64     90 00 90 5D |  if_ne	jmp	#LR__2159
1bb68     7F 2C 06 F6 | 	mov	local08, #127
1bb6c                 | LR__2155
1bb6c                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
1bb6c     3E E4 05 F1 | 	add	objptr, #62
1bb70     F2 26 C2 FA | 	rdbyte	local05, objptr
1bb74     13 25 E2 F8 | 	getbyte	local04, local05, #0
1bb78     12 1F 02 F6 | 	mov	local01, local04
1bb7c     80 1E 06 FA | 	mul	local01, #128
1bb80     3A E4 85 F1 | 	sub	objptr, #58
1bb84     F2 2E 02 FB | 	rdlong	local09, objptr
1bb88     04 E4 85 F1 | 	sub	objptr, #4
1bb8c     17 23 02 F6 | 	mov	local03, local09
1bb90     0F 23 02 F1 | 	add	local03, local01
1bb94     16 23 02 F1 | 	add	local03, local08
1bb98     11 13 02 F6 | 	mov	arg01, local03
1bb9c     C0 EF BF FD | 	call	#_pspeek
1bba0     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1bba4     20 20 0E F2 | 	cmp	local02, #32 wz
1bba8     2C 00 90 AD |  if_e	jmp	#LR__2157
1bbac                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
1bbac     7F 2C 56 F2 | 	cmps	local08, #127 wc
1bbb0     18 00 90 3D |  if_ae	jmp	#LR__2156
1bbb4     16 23 02 F6 | 	mov	local03, local08
1bbb8     01 22 66 F0 | 	shl	local03, #1
1bbbc     11 13 02 F6 | 	mov	arg01, local03
1bbc0     02 12 06 F1 | 	add	arg01, #2
1bbc4     88 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1bbc8     2C 00 90 FD | 	jmp	#LR__2158
1bbcc                 | LR__2156
1bbcc     FE 12 06 F6 | 	mov	arg01, #254
1bbd0     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1bbd4     20 00 90 FD | 	jmp	#LR__2158
1bbd8                 | LR__2157
1bbd8     01 2C 86 F1 | 	sub	local08, #1
1bbdc     37 00 00 FF 
1bbe0     64 E4 05 F1 | 	add	objptr, ##28260
1bbe4     F2 20 02 FB | 	rdlong	local02, objptr
1bbe8     37 00 00 FF 
1bbec     64 E4 85 F1 | 	sub	objptr, ##28260
1bbf0     10 2D 0A F2 | 	cmp	local08, local02 wz
1bbf4     74 FF 9F 5D |  if_ne	jmp	#LR__2155
1bbf8                 | LR__2158
1bbf8                 | LR__2159
1bbf8                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1bbf8     37 00 00 FF 
1bbfc     64 E4 05 F1 | 	add	objptr, ##28260
1bc00     F2 20 02 FB | 	rdlong	local02, objptr
1bc04     37 00 00 FF 
1bc08     64 E4 85 F1 | 	sub	objptr, ##28260
1bc0c     10 2D 0A F2 | 	cmp	local08, local02 wz
1bc10     24 00 90 5D |  if_ne	jmp	#LR__2160
1bc14     37 00 00 FF 
1bc18     64 E4 05 F1 | 	add	objptr, ##28260
1bc1c     F2 24 02 FB | 	rdlong	local04, objptr
1bc20     37 00 00 FF 
1bc24     64 E4 85 F1 | 	sub	objptr, ##28260
1bc28     12 23 02 F6 | 	mov	local03, local04
1bc2c     11 13 02 F6 | 	mov	arg01, local03
1bc30     01 12 66 F0 | 	shl	arg01, #1
1bc34     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1bc38                 | LR__2160
1bc38                 | '   
1bc38                 | '   
1bc38                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1bc38     59 00 00 FF 
1bc3c     FC E5 05 F1 | 	add	objptr, ##46076
1bc40     F2 20 02 FB | 	rdlong	local02, objptr
1bc44     59 00 00 FF 
1bc48     FC E5 85 F1 | 	sub	objptr, ##46076
1bc4c     4A 20 0E F2 | 	cmp	local02, #74 wz
1bc50     24 00 90 5D |  if_ne	jmp	#LR__2161
1bc54     37 00 00 FF 
1bc58     64 E4 05 F1 | 	add	objptr, ##28260
1bc5c     F2 24 02 FB | 	rdlong	local04, objptr
1bc60     37 00 00 FF 
1bc64     64 E4 85 F1 | 	sub	objptr, ##28260
1bc68     12 23 02 F6 | 	mov	local03, local04
1bc6c     11 13 02 F6 | 	mov	arg01, local03
1bc70     01 12 66 F0 | 	shl	arg01, #1
1bc74     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bc78                 | LR__2161
1bc78                 | '   if key4=75 then v.setcursory(0)
1bc78     59 00 00 FF 
1bc7c     FC E5 05 F1 | 	add	objptr, ##46076
1bc80     F2 20 02 FB | 	rdlong	local02, objptr
1bc84     59 00 00 FF 
1bc88     FC E5 85 F1 | 	sub	objptr, ##46076
1bc8c     4B 20 0E F2 | 	cmp	local02, #75 wz
1bc90     00 12 06 A6 |  if_e	mov	arg01, #0
1bc94     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1bc98                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1bc98     59 00 00 FF 
1bc9c     FC E5 05 F1 | 	add	objptr, ##46076
1bca0     F2 20 02 FB | 	rdlong	local02, objptr
1bca4     59 00 00 FF 
1bca8     FC E5 85 F1 | 	sub	objptr, ##46076
1bcac     4E 20 0E F2 | 	cmp	local02, #78 wz
1bcb0     24 12 06 A6 |  if_e	mov	arg01, #36
1bcb4     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1bcb8                 | '   
1bcb8                 | '   if key4=76 then 'del
1bcb8     59 00 00 FF 
1bcbc     FC E5 05 F1 | 	add	objptr, ##46076
1bcc0     F2 20 02 FB | 	rdlong	local02, objptr
1bcc4     59 00 00 FF 
1bcc8     FC E5 85 F1 | 	sub	objptr, ##46076
1bccc     4C 20 0E F2 | 	cmp	local02, #76 wz
1bcd0     9C 01 90 5D |  if_ne	jmp	#LR__2166
1bcd4                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1bcd4     3E E4 05 F1 | 	add	objptr, #62
1bcd8     F2 22 C2 FA | 	rdbyte	local03, objptr
1bcdc     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bce0     80 24 06 FA | 	mul	local04, #128
1bce4     3A E4 85 F1 | 	sub	objptr, #58
1bce8     F2 3C 02 FB | 	rdlong	local16, objptr
1bcec     1E 2D 02 F6 | 	mov	local08, local16
1bcf0     12 2D 02 F1 | 	add	local08, local04
1bcf4     38 E4 05 F1 | 	add	objptr, #56
1bcf8     F2 1E E2 FA | 	rdword	local01, objptr
1bcfc     0F 39 52 F6 | 	abs	local14, local01 wc
1bd00     01 38 46 F0 | 	shr	local14, #1
1bd04     1C 2D 82 F3 | 	sumc	local08, local14
1bd08     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bd0c     80 22 06 FA | 	mul	local03, #128
1bd10     3C E4 85 F1 | 	sub	objptr, #60
1bd14     11 3D 02 F1 | 	add	local16, local03
1bd18     80 3C 06 F1 | 	add	local16, #128
1bd1c                 | LR__2162
1bd1c     1E 2D 52 F2 | 	cmps	local08, local16 wc
1bd20     20 00 90 3D |  if_ae	jmp	#LR__2163
1bd24     16 13 02 F6 | 	mov	arg01, local08
1bd28     01 12 06 F1 | 	add	arg01, #1
1bd2c     30 EE BF FD | 	call	#_pspeek
1bd30     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1bd34     16 13 02 F6 | 	mov	arg01, local08
1bd38     DC ED BF FD | 	call	#_pspoke
1bd3c     01 2C 06 F1 | 	add	local08, #1
1bd40     D8 FF 9F FD | 	jmp	#LR__2162
1bd44                 | LR__2163
1bd44     3E E4 05 F1 | 	add	objptr, #62
1bd48     F2 26 C2 FA | 	rdbyte	local05, objptr
1bd4c     80 26 06 FA | 	mul	local05, #128
1bd50     3A E4 85 F1 | 	sub	objptr, #58
1bd54     F2 12 02 FB | 	rdlong	arg01, objptr
1bd58     04 E4 85 F1 | 	sub	objptr, #4
1bd5c     13 13 02 F1 | 	add	arg01, local05
1bd60     7F 12 06 F1 | 	add	arg01, #127
1bd64     20 14 06 F6 | 	mov	arg02, #32
1bd68     AC ED BF FD | 	call	#_pspoke
1bd6c     5A 00 00 FF 
1bd70     00 E4 05 F1 | 	add	objptr, ##46080
1bd74     F2 00 68 FC | 	wrlong	#0, objptr
1bd78     59 00 00 FF 
1bd7c     C2 E5 85 F1 | 	sub	objptr, ##46018
1bd80     F2 22 C2 FA | 	rdbyte	local03, objptr
1bd84     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bd88     80 24 06 FA | 	mul	local04, #128
1bd8c     3A E4 85 F1 | 	sub	objptr, #58
1bd90     F2 26 02 FB | 	rdlong	local05, objptr
1bd94     13 2D 02 F6 | 	mov	local08, local05
1bd98     12 2D 02 F1 | 	add	local08, local04
1bd9c     38 E4 05 F1 | 	add	objptr, #56
1bda0     F2 2E E2 FA | 	rdword	local09, objptr
1bda4     17 1F 32 F9 | 	getword	local01, local09, #0
1bda8     0F 39 52 F6 | 	abs	local14, local01 wc
1bdac     01 38 46 F0 | 	shr	local14, #1
1bdb0     1C 39 82 F6 | 	negc	local14, local14
1bdb4     1C 2D 02 F1 | 	add	local08, local14
1bdb8     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bdbc     80 22 06 FA | 	mul	local03, #128
1bdc0     13 25 02 F6 | 	mov	local04, local05
1bdc4     3C E4 85 F1 | 	sub	objptr, #60
1bdc8     12 3F 02 F6 | 	mov	local17, local04
1bdcc     11 3F 02 F1 | 	add	local17, local03
1bdd0     80 3E 06 F1 | 	add	local17, #128
1bdd4                 | LR__2164
1bdd4     1F 2D 52 F2 | 	cmps	local08, local17 wc
1bdd8     94 00 90 3D |  if_ae	jmp	#LR__2165
1bddc     3C E4 05 F1 | 	add	objptr, #60
1bde0     F2 20 E2 FA | 	rdword	local02, objptr
1bde4     59 00 00 FF 
1bde8     C4 E5 05 F1 | 	add	objptr, ##46020
1bdec     F2 24 02 FB | 	rdlong	local04, objptr
1bdf0     01 24 66 F0 | 	shl	local04, #1
1bdf4     12 21 02 F1 | 	add	local02, local04
1bdf8     59 00 00 FF 
1bdfc     C2 E5 85 F1 | 	sub	objptr, ##46018
1be00     F2 28 C2 FA | 	rdbyte	local06, objptr
1be04     3E E4 85 F1 | 	sub	objptr, #62
1be08     10 28 06 FA | 	mul	local06, #16
1be0c     04 28 06 F1 | 	add	local06, #4
1be10     16 13 02 F6 | 	mov	arg01, local08
1be14     48 ED BF FD | 	call	#_pspeek
1be18     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1be1c     41 E4 05 F1 | 	add	objptr, #65
1be20     F2 24 02 FB | 	rdlong	local04, objptr
1be24     04 E4 05 F1 | 	add	objptr, #4
1be28     F2 1E 02 FB | 	rdlong	local01, objptr
1be2c     45 E4 85 F1 | 	sub	objptr, #69
1be30     0F 27 02 F6 | 	mov	local05, local01
1be34     10 13 02 F6 | 	mov	arg01, local02
1be38     14 15 02 F6 | 	mov	arg02, local06
1be3c     11 17 02 F6 | 	mov	arg03, local03
1be40     12 19 02 F6 | 	mov	arg04, local04
1be44     13 1B 02 F6 | 	mov	arg05, local05
1be48     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1be4c     5A 00 00 FF 
1be50     00 E4 05 F1 | 	add	objptr, ##46080
1be54     F2 20 02 FB | 	rdlong	local02, objptr
1be58     01 20 06 F1 | 	add	local02, #1
1be5c     F2 20 62 FC | 	wrlong	local02, objptr
1be60     5A 00 00 FF 
1be64     00 E4 85 F1 | 	sub	objptr, ##46080
1be68     01 2C 06 F1 | 	add	local08, #1
1be6c     64 FF 9F FD | 	jmp	#LR__2164
1be70                 | LR__2165
1be70                 | LR__2166
1be70                 | '    
1be70                 | '   'backspace
1be70                 | '   if key4 = 42 then 
1be70     59 00 00 FF 
1be74     FC E5 05 F1 | 	add	objptr, ##46076
1be78     F2 20 02 FB | 	rdlong	local02, objptr
1be7c     59 00 00 FF 
1be80     FC E5 85 F1 | 	sub	objptr, ##46076
1be84     2A 20 0E F2 | 	cmp	local02, #42 wz
1be88     0C 02 90 5D |  if_ne	jmp	#LR__2172
1be8c                 | '       if v.cursor_x>editor_spaces*2 then 
1be8c     3C E4 05 F1 | 	add	objptr, #60
1be90     F2 20 E2 FA | 	rdword	local02, objptr
1be94     37 00 00 FF 
1be98     28 E4 05 F1 | 	add	objptr, ##28200
1be9c     F2 26 02 FB | 	rdlong	local05, objptr
1bea0     37 00 00 FF 
1bea4     64 E4 85 F1 | 	sub	objptr, ##28260
1bea8     13 25 02 F6 | 	mov	local04, local05
1beac     12 23 02 F6 | 	mov	local03, local04
1beb0     01 22 66 F0 | 	shl	local03, #1
1beb4     11 21 5A F2 | 	cmps	local02, local03 wcz
1beb8     B8 01 90 ED |  if_be	jmp	#LR__2170
1bebc     3C E4 05 F1 | 	add	objptr, #60
1bec0     F2 12 E2 FA | 	rdword	arg01, objptr
1bec4     02 12 86 F1 | 	sub	arg01, #2
1bec8     02 E4 05 F1 | 	add	objptr, #2
1becc     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bed0     3E E4 85 F1 | 	sub	objptr, #62
1bed4     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1bed8                 | '          position v.cursor_x-2,v.cursor_y
1bed8                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1bed8     3E E4 05 F1 | 	add	objptr, #62
1bedc     F2 22 C2 FA | 	rdbyte	local03, objptr
1bee0     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bee4     80 24 06 FA | 	mul	local04, #128
1bee8     3A E4 85 F1 | 	sub	objptr, #58
1beec     F2 40 02 FB | 	rdlong	local18, objptr
1bef0     20 2D 02 F6 | 	mov	local08, local18
1bef4     12 2D 02 F1 | 	add	local08, local04
1bef8     38 E4 05 F1 | 	add	objptr, #56
1befc     F2 1E E2 FA | 	rdword	local01, objptr
1bf00     0F 39 52 F6 | 	abs	local14, local01 wc
1bf04     01 38 46 F0 | 	shr	local14, #1
1bf08     1C 2D 82 F3 | 	sumc	local08, local14
1bf0c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bf10     80 22 06 FA | 	mul	local03, #128
1bf14     3C E4 85 F1 | 	sub	objptr, #60
1bf18     11 41 02 F1 | 	add	local18, local03
1bf1c     80 40 06 F1 | 	add	local18, #128
1bf20                 | LR__2167
1bf20     20 2D 52 F2 | 	cmps	local08, local18 wc
1bf24     20 00 90 3D |  if_ae	jmp	#LR__2168
1bf28     16 13 02 F6 | 	mov	arg01, local08
1bf2c     01 12 06 F1 | 	add	arg01, #1
1bf30     2C EC BF FD | 	call	#_pspeek
1bf34     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1bf38     16 13 02 F6 | 	mov	arg01, local08
1bf3c     D8 EB BF FD | 	call	#_pspoke
1bf40     01 2C 06 F1 | 	add	local08, #1
1bf44     D8 FF 9F FD | 	jmp	#LR__2167
1bf48                 | LR__2168
1bf48     3E E4 05 F1 | 	add	objptr, #62
1bf4c     F2 26 C2 FA | 	rdbyte	local05, objptr
1bf50     80 26 06 FA | 	mul	local05, #128
1bf54     3A E4 85 F1 | 	sub	objptr, #58
1bf58     F2 12 02 FB | 	rdlong	arg01, objptr
1bf5c     04 E4 85 F1 | 	sub	objptr, #4
1bf60     13 13 02 F1 | 	add	arg01, local05
1bf64     7F 12 06 F1 | 	add	arg01, #127
1bf68     20 14 06 F6 | 	mov	arg02, #32
1bf6c     A8 EB BF FD | 	call	#_pspoke
1bf70     5A 00 00 FF 
1bf74     00 E4 05 F1 | 	add	objptr, ##46080
1bf78     F2 00 68 FC | 	wrlong	#0, objptr
1bf7c     59 00 00 FF 
1bf80     C2 E5 85 F1 | 	sub	objptr, ##46018
1bf84     F2 22 C2 FA | 	rdbyte	local03, objptr
1bf88     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bf8c     80 24 06 FA | 	mul	local04, #128
1bf90     3A E4 85 F1 | 	sub	objptr, #58
1bf94     F2 26 02 FB | 	rdlong	local05, objptr
1bf98     13 2D 02 F6 | 	mov	local08, local05
1bf9c     12 2D 02 F1 | 	add	local08, local04
1bfa0     38 E4 05 F1 | 	add	objptr, #56
1bfa4     F2 2E E2 FA | 	rdword	local09, objptr
1bfa8     17 1F 32 F9 | 	getword	local01, local09, #0
1bfac     0F 39 52 F6 | 	abs	local14, local01 wc
1bfb0     01 38 46 F0 | 	shr	local14, #1
1bfb4     1C 39 82 F6 | 	negc	local14, local14
1bfb8     1C 2D 02 F1 | 	add	local08, local14
1bfbc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bfc0     80 22 06 FA | 	mul	local03, #128
1bfc4     13 25 02 F6 | 	mov	local04, local05
1bfc8     3C E4 85 F1 | 	sub	objptr, #60
1bfcc     12 43 02 F6 | 	mov	local19, local04
1bfd0     11 43 02 F1 | 	add	local19, local03
1bfd4     80 42 06 F1 | 	add	local19, #128
1bfd8                 | LR__2169
1bfd8     21 2D 52 F2 | 	cmps	local08, local19 wc
1bfdc     B8 00 90 3D |  if_ae	jmp	#LR__2171
1bfe0     3C E4 05 F1 | 	add	objptr, #60
1bfe4     F2 20 E2 FA | 	rdword	local02, objptr
1bfe8     59 00 00 FF 
1bfec     C4 E5 05 F1 | 	add	objptr, ##46020
1bff0     F2 24 02 FB | 	rdlong	local04, objptr
1bff4     01 24 66 F0 | 	shl	local04, #1
1bff8     12 21 02 F1 | 	add	local02, local04
1bffc     59 00 00 FF 
1c000     C2 E5 85 F1 | 	sub	objptr, ##46018
1c004     F2 28 C2 FA | 	rdbyte	local06, objptr
1c008     3E E4 85 F1 | 	sub	objptr, #62
1c00c     10 28 06 FA | 	mul	local06, #16
1c010     04 28 06 F1 | 	add	local06, #4
1c014     16 13 02 F6 | 	mov	arg01, local08
1c018     44 EB BF FD | 	call	#_pspeek
1c01c     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1c020     41 E4 05 F1 | 	add	objptr, #65
1c024     F2 24 02 FB | 	rdlong	local04, objptr
1c028     04 E4 05 F1 | 	add	objptr, #4
1c02c     F2 1E 02 FB | 	rdlong	local01, objptr
1c030     45 E4 85 F1 | 	sub	objptr, #69
1c034     0F 27 02 F6 | 	mov	local05, local01
1c038     10 13 02 F6 | 	mov	arg01, local02
1c03c     14 15 02 F6 | 	mov	arg02, local06
1c040     11 17 02 F6 | 	mov	arg03, local03
1c044     12 19 02 F6 | 	mov	arg04, local04
1c048     13 1B 02 F6 | 	mov	arg05, local05
1c04c     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1c050     5A 00 00 FF 
1c054     00 E4 05 F1 | 	add	objptr, ##46080
1c058     F2 20 02 FB | 	rdlong	local02, objptr
1c05c     01 20 06 F1 | 	add	local02, #1
1c060     F2 20 62 FC | 	wrlong	local02, objptr
1c064     5A 00 00 FF 
1c068     00 E4 85 F1 | 	sub	objptr, ##46080
1c06c     01 2C 06 F1 | 	add	local08, #1
1c070     64 FF 9F FD | 	jmp	#LR__2169
1c074                 | LR__2170
1c074     78 01 00 FF 
1c078     F2 20 06 F6 | 	mov	local02, ##@LR__5270
1c07c     37 00 00 FF 
1c080     4C E4 05 F1 | 	add	objptr, ##28236
1c084     F2 20 62 FC | 	wrlong	local02, objptr
1c088     37 00 00 FF 
1c08c     10 E4 85 F1 | 	sub	objptr, ##28176
1c090     F2 08 58 FC | 	wrword	#4, objptr
1c094     3C E4 85 F1 | 	sub	objptr, #60
1c098                 | LR__2171
1c098                 | LR__2172
1c098                 | '      if key4= 82 then 
1c098     59 00 00 FF 
1c09c     FC E5 05 F1 | 	add	objptr, ##46076
1c0a0     F2 20 02 FB | 	rdlong	local02, objptr
1c0a4     59 00 00 FF 
1c0a8     FC E5 85 F1 | 	sub	objptr, ##46076
1c0ac     52 20 0E F2 | 	cmp	local02, #82 wz
1c0b0     50 00 90 5D |  if_ne	jmp	#LR__2173
1c0b4                 | ' return cursor_y
1c0b4     3E E4 05 F1 | 	add	objptr, #62
1c0b8     F2 20 C2 FA | 	rdbyte	local02, objptr
1c0bc     01 20 86 F1 | 	sub	local02, #1
1c0c0     59 00 00 FF 
1c0c4     CA E5 05 F1 | 	add	objptr, ##46026
1c0c8     F2 20 62 FC | 	wrlong	local02, objptr
1c0cc     5A 00 00 FF 
1c0d0     08 E4 85 F1 | 	sub	objptr, ##46088
1c0d4     00 20 56 F2 | 	cmps	local02, #0 wc
1c0d8     5A 00 00 CF 
1c0dc     08 E4 05 C1 |  if_b	add	objptr, ##46088
1c0e0     F2 00 68 CC |  if_b	wrlong	#0, objptr
1c0e4     5A 00 00 CF 
1c0e8     08 E4 85 C1 |  if_b	sub	objptr, ##46088
1c0ec     5A 00 00 FF 
1c0f0     08 E4 05 F1 | 	add	objptr, ##46088
1c0f4     F2 12 02 FB | 	rdlong	arg01, objptr
1c0f8     5A 00 00 FF 
1c0fc     08 E4 85 F1 | 	sub	objptr, ##46088
1c100     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1c104                 | LR__2173
1c104                 | '    if key4= 81 then
1c104     59 00 00 FF 
1c108     FC E5 05 F1 | 	add	objptr, ##46076
1c10c     F2 20 02 FB | 	rdlong	local02, objptr
1c110     59 00 00 FF 
1c114     FC E5 85 F1 | 	sub	objptr, ##46076
1c118     51 20 0E F2 | 	cmp	local02, #81 wz
1c11c     50 00 90 5D |  if_ne	jmp	#LR__2174
1c120                 | ' return cursor_y
1c120     3E E4 05 F1 | 	add	objptr, #62
1c124     F2 20 C2 FA | 	rdbyte	local02, objptr
1c128     01 20 06 F1 | 	add	local02, #1
1c12c     59 00 00 FF 
1c130     CA E5 05 F1 | 	add	objptr, ##46026
1c134     F2 20 62 FC | 	wrlong	local02, objptr
1c138     5A 00 00 FF 
1c13c     08 E4 85 F1 | 	sub	objptr, ##46088
1c140     25 20 56 F2 | 	cmps	local02, #37 wc
1c144     5A 00 00 3F 
1c148     08 E4 05 31 |  if_ae	add	objptr, ##46088
1c14c     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1c150     5A 00 00 3F 
1c154     08 E4 85 31 |  if_ae	sub	objptr, ##46088
1c158     5A 00 00 FF 
1c15c     08 E4 05 F1 | 	add	objptr, ##46088
1c160     F2 12 02 FB | 	rdlong	arg01, objptr
1c164     5A 00 00 FF 
1c168     08 E4 85 F1 | 	sub	objptr, ##46088
1c16c     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1c170                 | LR__2174
1c170                 | '    if key4= 80 then
1c170     59 00 00 FF 
1c174     FC E5 05 F1 | 	add	objptr, ##46076
1c178     F2 20 02 FB | 	rdlong	local02, objptr
1c17c     59 00 00 FF 
1c180     FC E5 85 F1 | 	sub	objptr, ##46076
1c184     50 20 0E F2 | 	cmp	local02, #80 wz
1c188     6C 00 90 5D |  if_ne	jmp	#LR__2175
1c18c                 | ' return cursor_x
1c18c     3C E4 05 F1 | 	add	objptr, #60
1c190     F2 20 E2 FA | 	rdword	local02, objptr
1c194     02 20 86 F1 | 	sub	local02, #2
1c198     59 00 00 FF 
1c19c     D0 E5 05 F1 | 	add	objptr, ##46032
1c1a0     F2 20 62 FC | 	wrlong	local02, objptr
1c1a4                 | '      if cx<editor_spaces then cx=editor_spaces
1c1a4     22 00 00 FF 
1c1a8     A8 E5 85 F1 | 	sub	objptr, ##17832
1c1ac     F2 24 02 FB | 	rdlong	local04, objptr
1c1b0     37 00 00 FF 
1c1b4     64 E4 85 F1 | 	sub	objptr, ##28260
1c1b8     12 23 02 F6 | 	mov	local03, local04
1c1bc     11 21 52 F2 | 	cmps	local02, local03 wc
1c1c0     37 00 00 CF 
1c1c4     64 E4 05 C1 |  if_b	add	objptr, ##28260
1c1c8     F2 20 02 CB |  if_b	rdlong	local02, objptr
1c1cc     22 00 00 CF 
1c1d0     A8 E5 05 C1 |  if_b	add	objptr, ##17832
1c1d4     F2 20 62 CC |  if_b	wrlong	local02, objptr
1c1d8     5A 00 00 CF 
1c1dc     0C E4 85 C1 |  if_b	sub	objptr, ##46092
1c1e0     5A 00 00 FF 
1c1e4     0C E4 05 F1 | 	add	objptr, ##46092
1c1e8     F2 12 02 FB | 	rdlong	arg01, objptr
1c1ec     5A 00 00 FF 
1c1f0     0C E4 85 F1 | 	sub	objptr, ##46092
1c1f4     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1c1f8                 | LR__2175
1c1f8                 | '    if key4= 79 then
1c1f8     59 00 00 FF 
1c1fc     FC E5 05 F1 | 	add	objptr, ##46076
1c200     F2 20 02 FB | 	rdlong	local02, objptr
1c204     59 00 00 FF 
1c208     FC E5 85 F1 | 	sub	objptr, ##46076
1c20c     4F 20 0E F2 | 	cmp	local02, #79 wz
1c210     50 00 90 5D |  if_ne	jmp	#LR__2176
1c214                 | ' return cursor_x
1c214     3C E4 05 F1 | 	add	objptr, #60
1c218     F2 20 E2 FA | 	rdword	local02, objptr
1c21c     02 20 06 F1 | 	add	local02, #2
1c220     59 00 00 FF 
1c224     D0 E5 05 F1 | 	add	objptr, ##46032
1c228     F2 20 62 FC | 	wrlong	local02, objptr
1c22c                 | '      if cx>254  then cx=254 
1c22c     5A 00 00 FF 
1c230     0C E4 85 F1 | 	sub	objptr, ##46092
1c234     FF 20 56 F2 | 	cmps	local02, #255 wc
1c238     5A 00 00 3F 
1c23c     0C E4 05 31 |  if_ae	add	objptr, ##46092
1c240     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1c244     5A 00 00 3F 
1c248     0C E4 85 31 |  if_ae	sub	objptr, ##46092
1c24c     5A 00 00 FF 
1c250     0C E4 05 F1 | 	add	objptr, ##46092
1c254     F2 12 02 FB | 	rdlong	arg01, objptr
1c258     5A 00 00 FF 
1c25c     0C E4 85 F1 | 	sub	objptr, ##46092
1c260     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1c264                 | LR__2176
1c264                 | '   ' print key3 and 255
1c264                 | '    
1c264                 | '    if key4=73 then ' ins
1c264     59 00 00 FF 
1c268     FC E5 05 F1 | 	add	objptr, ##46076
1c26c     F2 28 02 FB | 	rdlong	local06, objptr
1c270     59 00 00 FF 
1c274     FC E5 85 F1 | 	sub	objptr, ##46076
1c278     49 28 0E F2 | 	cmp	local06, #73 wz
1c27c     38 00 90 5D |  if_ne	jmp	#LR__2179
1c280     59 00 00 FF 
1c284     E8 E5 05 F1 | 	add	objptr, ##46056
1c288     F2 20 02 FB | 	rdlong	local02, objptr
1c28c     10 29 22 F6 | 	not	local06, local02
1c290     F2 28 62 FC | 	wrlong	local06, objptr
1c294                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1c294     59 00 00 FF 
1c298     E8 E5 85 F1 | 	sub	objptr, ##46056
1c29c     00 28 0E F2 | 	cmp	local06, #0 wz
1c2a0     0C 00 90 AD |  if_e	jmp	#LR__2177
1c2a4     0E 12 06 F6 | 	mov	arg01, #14
1c2a8     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c2ac     08 00 90 FD | 	jmp	#LR__2178
1c2b0                 | LR__2177
1c2b0     00 12 06 F6 | 	mov	arg01, #0
1c2b4     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c2b8                 | LR__2178
1c2b8                 | LR__2179
1c2b8     59 00 00 FF 
1c2bc     F4 E5 05 F1 | 	add	objptr, ##46068
1c2c0     F2 00 68 FC | 	wrlong	#0, objptr
1c2c4     59 00 00 FF 
1c2c8     F4 E5 85 F1 | 	sub	objptr, ##46068
1c2cc     84 EE 9F FD | 	jmp	#LR__2130
1c2d0     A7 F0 03 F6 | 	mov	ptra, fp
1c2d4     B2 00 A0 FD | 	call	#popregs_
1c2d8                 | _program_ret
1c2d8     2D 00 64 FD | 	ret
1c2dc                 | 
1c2dc                 | ' '' this is not a main program.
1c2dc                 | ' 
1c2dc                 | ' '****************************************************************************************************************
1c2dc                 | ' '                                                                                                             	*
1c2dc                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1c2dc                 | ' '                                                                                                            	*
1c2dc                 | ' ' base - HDMI base pin												*
1c2dc                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1c2dc                 | ' '														*
1c2dc                 | ' '														*
1c2dc                 | ' '****************************************************************************************************************
1c2dc                 | ' 
1c2dc                 | ' pub start(base,mb):result |i
1c2dc                 | _hg010b_spin2_start
1c2dc                 | ' 
1c2dc                 | ' '--------------------------- initialize pointers and variables
1c2dc                 | ' 
1c2dc                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1c2dc     34 E4 05 F1 | 	add	objptr, #52
1c2e0     F2 FA 01 F6 | 	mov	result1, objptr
1c2e4     28 E4 85 F1 | 	sub	objptr, #40
1c2e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c2ec                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1c2ec                 | ' hdmibase:=base							' HDMI base pin, 8*n
1c2ec     18 E4 05 F1 | 	add	objptr, #24
1c2f0     F2 12 62 FC | 	wrlong	arg01, objptr
1c2f4                 | ' mailbox_ptr:=mb		
1c2f4     04 E4 05 F1 | 	add	objptr, #4
1c2f8     F2 14 62 FC | 	wrlong	arg02, objptr
1c2fc                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1c2fc     C1 E5 05 F1 | 	add	objptr, #449
1c300     F2 14 62 FC | 	wrlong	arg02, objptr
1c304                 | ' sprite_ptr:=@spr1ptr
1c304     D8 E4 85 F1 | 	sub	objptr, #216
1c308     F2 FA 01 F6 | 	mov	result1, objptr
1c30c     E5 E4 85 F1 | 	sub	objptr, #229
1c310     F2 FA 61 FC | 	wrlong	result1, objptr
1c314                 | ' 
1c314                 | ' 		'
1c314                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1c314     E5 E4 05 F1 | 	add	objptr, #229
1c318     F2 FA 01 FB | 	rdlong	result1, objptr
1c31c     D0 FA 05 F1 | 	add	result1, #208
1c320     FD 10 58 FC | 	wrword	#8, result1
1c324                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1c324     F2 16 02 FB | 	rdlong	arg03, objptr
1c328     D2 16 06 F1 | 	add	arg03, #210
1c32c     0B 21 58 FC | 	wrword	#16, arg03
1c330                 | ' leading_spaces:=0				'
1c330     A5 E5 05 F1 | 	add	objptr, #421
1c334     F2 00 68 FC | 	wrlong	#0, objptr
1c338                 | ' 
1c338                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1c338     99 E4 85 F1 | 	sub	objptr, #153
1c33c     00 00 A0 FF 
1c340     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1c344                 | ' emptydl[1]:=0
1c344     04 E4 05 F1 | 	add	objptr, #4
1c348     F2 00 68 FC | 	wrlong	#0, objptr
1c34c                 | ' 
1c34c                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1c34c                 | ' 
1c34c                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1c34c     28 E5 85 F1 | 	sub	objptr, #296
1c350     F2 02 68 FC | 	wrlong	#1, objptr
1c354                 | ' if s_debug<>0
1c354                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1c354     20 00 80 FF 
1c358     F2 00 68 FC | 	wrlong	##16384, objptr
1c35c     F9 E4 85 F1 | 	sub	objptr, #249
1c360                 | ' setmode()							' set the mode, see below
1c360     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1c364                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1c364     49 E4 05 F1 | 	add	objptr, #73
1c368     F2 FA 01 F6 | 	mov	result1, objptr
1c36c     35 E4 85 F1 | 	sub	objptr, #53
1c370     F2 FA 61 FC | 	wrlong	result1, objptr
1c374                 | ' cursor_ptr:=@cursor_x						
1c374     28 E4 05 F1 | 	add	objptr, #40
1c378     F2 16 02 F6 | 	mov	arg03, objptr
1c37c     2C E4 85 F1 | 	sub	objptr, #44
1c380     F2 16 62 FC | 	wrlong	arg03, objptr
1c384                 | ' fontnum:=0  							' start with a PC type font 
1c384     55 E4 05 F1 | 	add	objptr, #85
1c388     F2 00 68 FC | 	wrlong	#0, objptr
1c38c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1c38c     1C E4 05 F1 | 	add	objptr, #28
1c390     F2 12 02 F6 | 	mov	arg01, objptr
1c394     81 E4 85 F1 | 	sub	objptr, #129
1c398     10 00 00 FF 
1c39c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1c3a0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c3a4     10 00 00 FF 
1c3a8     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1c3ac     10 16 06 F6 | 	mov	arg03, #16
1c3b0     38 29 B0 FD | 	call	#__system____builtin_memmove
1c3b4                 | ' leading_spaces:=0
1c3b4     01 00 00 FF 
1c3b8     B6 E4 05 F1 | 	add	objptr, ##694
1c3bc     F2 00 68 FC | 	wrlong	#0, objptr
1c3c0     01 00 00 FF 
1c3c4     B6 E4 85 F1 | 	sub	objptr, ##694
1c3c8                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c3c8                 | ' 
1c3c8                 | ' initcursor(154)
1c3c8     9A 12 06 F6 | 	mov	arg01, #154
1c3cc     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1c3d0                 | ' 
1c3d0                 | ' '---------------------------- start the cog
1c3d0                 | ' 
1c3d0                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1c3d0     10 00 00 FF 
1c3d4     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1c3d8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c3dc     10 00 00 FF 
1c3e0     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1c3e4     14 E4 05 F1 | 	add	objptr, #20
1c3e8     10 FA 05 F6 | 	mov	result1, #16
1c3ec     28 E4 61 FD | 	setq	objptr
1c3f0     0A FB F1 FC | 	coginit	result1, arg02 wc
1c3f4     01 FA 65 C6 |  if_b	neg	result1, #1
1c3f8     1C E4 05 F1 | 	add	objptr, #28
1c3fc     F2 FA 61 FC | 	wrlong	result1, objptr
1c400     30 E4 85 F1 | 	sub	objptr, #48
1c404                 | ' waitms(40)							' wait for stabilize
1c404     28 12 06 F6 | 	mov	arg01, #40
1c408     B4 2C B0 FD | 	call	#__system___waitms
1c40c                 | ' return cog							' return the driver's cog #
1c40c     30 E4 05 F1 | 	add	objptr, #48
1c410     F2 FA 01 FB | 	rdlong	result1, objptr
1c414     30 E4 85 F1 | 	sub	objptr, #48
1c418                 | _hg010b_spin2_start_ret
1c418     2D 00 64 FD | 	ret
1c41c                 | 
1c41c                 | ' 
1c41c                 | ' 
1c41c                 | ' '**************************************************************************************************************** 
1c41c                 | ' '                                                                                                             	*
1c41c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1c41c                 | ' '  Mode number - see start() above or bits below								*
1c41c                 | ' '                                                                                                             	*
1c41c                 | ' '****************************************************************************************************************
1c41c                 | ' 
1c41c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c41c                 | ' pub initcursor(color) |i
1c41c                 | _hg010b_spin2_initcursor
1c41c     03 4A 05 F6 | 	mov	COUNT_, #3
1c420     A8 00 A0 FD | 	call	#pushregs_
1c424     09 1F 02 F6 | 	mov	local01, arg01
1c428                 | ' 
1c428                 | ' cursor_x:=0							' place the cursor at 0:0
1c428     3C E4 05 F1 | 	add	objptr, #60
1c42c     F2 00 58 FC | 	wrword	#0, objptr
1c430                 | ' cursor_y:=0
1c430     02 E4 05 F1 | 	add	objptr, #2
1c434     F2 00 48 FC | 	wrbyte	#0, objptr
1c438                 | ' repeat i from 0 to 111
1c438     00 20 06 F6 | 	mov	local02, #0
1c43c     F8 E5 05 F1 | 	add	objptr, #504
1c440     97 1A 48 FB | 	callpa	#(@LR__2182-@LR__2180)>>2,fcache_load_ptr_
1c444                 | LR__2180
1c444                 | '   cursor[i]:=0
1c444     10 23 02 F6 | 	mov	local03, local02
1c448     F2 22 02 F1 | 	add	local03, objptr
1c44c     11 01 48 FC | 	wrbyte	#0, local03
1c450     01 20 06 F1 | 	add	local02, #1
1c454     70 20 56 F2 | 	cmps	local02, #112 wc
1c458     E8 FF 9F CD |  if_b	jmp	#LR__2180
1c45c                 | ' repeat i from 112 to 127
1c45c     70 20 06 F6 | 	mov	local02, #112
1c460                 | LR__2181
1c460                 | '   cursor[i]:=color  
1c460     10 23 02 F6 | 	mov	local03, local02
1c464     F2 22 02 F1 | 	add	local03, objptr
1c468     11 1F 42 FC | 	wrbyte	local01, local03
1c46c     01 20 06 F1 | 	add	local02, #1
1c470     80 20 16 F2 | 	cmp	local02, #128 wc
1c474     E8 FF 9F CD |  if_b	jmp	#LR__2181
1c478                 | LR__2182
1c478                 | ' 'repeat i from 0 to 127
1c478                 | ' '  if ((i/8)//2)
1c478                 | ' '    cursor[i]:=15
1c478                 | ' '  else
1c478                 | ' '    cursor[i]:=0
1c478                 | ' '  if i>=120    
1c478                 | ' '    cursor[i]:=40
1c478                 | ' setspriteptr(17,@cursor)
1c478     F2 14 02 F6 | 	mov	arg02, objptr
1c47c     01 00 00 FF 
1c480     36 E4 85 F1 | 	sub	objptr, ##566
1c484     11 12 06 F6 | 	mov	arg01, #17
1c488     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1c48c                 | ' setspritesize(17,8,16)
1c48c     11 12 06 F6 | 	mov	arg01, #17
1c490     08 14 06 F6 | 	mov	arg02, #8
1c494     10 16 06 F6 | 	mov	arg03, #16
1c498     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c49c                 | ' setspritepos(17,0,0)
1c49c     11 12 06 F6 | 	mov	arg01, #17
1c4a0     00 14 06 F6 | 	mov	arg02, #0
1c4a4     00 16 06 F6 | 	mov	arg03, #0
1c4a8     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c4ac                 | ' cursorshape:=14
1c4ac     0B 00 00 FF 
1c4b0     C6 E4 05 F1 | 	add	objptr, ##5830
1c4b4     F2 1C 68 FC | 	wrlong	#14, objptr
1c4b8                 | ' cursorcolor:=color
1c4b8     04 E4 85 F1 | 	sub	objptr, #4
1c4bc     F2 1E 62 FC | 	wrlong	local01, objptr
1c4c0     0B 00 00 FF 
1c4c4     C2 E4 85 F1 | 	sub	objptr, ##5826
1c4c8     A7 F0 03 F6 | 	mov	ptra, fp
1c4cc     B2 00 A0 FD | 	call	#popregs_
1c4d0                 | _hg010b_spin2_initcursor_ret
1c4d0     2D 00 64 FD | 	ret
1c4d4                 | 
1c4d4                 | ' 
1c4d4                 | ' pub setcursorshape(shape) | i
1c4d4                 | _hg010b_spin2_setcursorshape
1c4d4                 | ' 
1c4d4                 | ' cursorshape:=shape
1c4d4     0B 00 00 FF 
1c4d8     C6 E4 05 F1 | 	add	objptr, ##5830
1c4dc     F2 12 62 FC | 	wrlong	arg01, objptr
1c4e0                 | ' repeat i from 0 to (8*cursorshape)-1
1c4e0     00 00 06 F6 | 	mov	_var01, #0
1c4e4     09 03 02 F6 | 	mov	_var02, arg01
1c4e8     03 02 66 F0 | 	shl	_var02, #3
1c4ec     01 02 86 F1 | 	sub	_var02, #1
1c4f0     00 02 56 F2 | 	cmps	_var02, #0 wc
1c4f4     01 04 86 F6 | 	negc	_var03, #1
1c4f8     02 07 02 F6 | 	mov	_var04, _var03
1c4fc     02 03 02 F1 | 	add	_var02, _var03
1c500     0A 00 00 FF 
1c504     90 E4 85 F1 | 	sub	objptr, ##5264
1c508     97 0C 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1c50c                 | LR__2190
1c50c                 | '   cursor[i]:=0
1c50c     00 05 02 F6 | 	mov	_var03, _var01
1c510     F2 04 02 F1 | 	add	_var03, objptr
1c514     02 01 48 FC | 	wrbyte	#0, _var03
1c518     03 01 02 F1 | 	add	_var01, _var04
1c51c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c520     E8 FF 9F 5D |  if_ne	jmp	#LR__2190
1c524                 | LR__2191
1c524                 | ' repeat i from 8*cursorshape to 127
1c524     0A 00 00 FF 
1c528     90 E4 05 F1 | 	add	objptr, ##5264
1c52c     F2 06 02 FB | 	rdlong	_var04, objptr
1c530     03 01 02 F6 | 	mov	_var01, _var04
1c534     03 00 66 F0 | 	shl	_var01, #3
1c538     0B 00 00 FF 
1c53c     C6 E4 85 F1 | 	sub	objptr, ##5830
1c540     03 06 66 F0 | 	shl	_var04, #3
1c544     80 06 56 F2 | 	cmps	_var04, #128 wc
1c548     01 04 A6 F6 | 	negnc	_var03, #1
1c54c     7F 02 06 F6 | 	mov	_var02, #127
1c550     02 03 02 F1 | 	add	_var02, _var03
1c554     97 1A 48 FB | 	callpa	#(@LR__2193-@LR__2192)>>2,fcache_load_ptr_
1c558                 | LR__2192
1c558                 | '   cursor[i]:=cursorcolor
1c558     00 07 02 F6 | 	mov	_var04, _var01
1c55c     01 00 00 FF 
1c560     36 E4 05 F1 | 	add	objptr, ##566
1c564     F2 06 02 F1 | 	add	_var04, objptr
1c568     0A 00 00 FF 
1c56c     8C E4 05 F1 | 	add	objptr, ##5260
1c570     F2 12 02 FB | 	rdlong	arg01, objptr
1c574     0B 00 00 FF 
1c578     C2 E4 85 F1 | 	sub	objptr, ##5826
1c57c     03 13 42 FC | 	wrbyte	arg01, _var04
1c580     02 01 02 F1 | 	add	_var01, _var03
1c584     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c588     CC FF 9F 5D |  if_ne	jmp	#LR__2192
1c58c                 | LR__2193
1c58c                 | _hg010b_spin2_setcursorshape_ret
1c58c     2D 00 64 FD | 	ret
1c590                 | 
1c590                 | ' 
1c590                 | ' pub setcursorcolor(color) | i
1c590                 | _hg010b_spin2_setcursorcolor
1c590                 | ' 
1c590                 | ' cursorcolor:=color
1c590     0B 00 00 FF 
1c594     C2 E4 05 F1 | 	add	objptr, ##5826
1c598     F2 12 62 FC | 	wrlong	arg01, objptr
1c59c                 | ' repeat i from 0 to (8*cursorshape)-1
1c59c     00 12 06 F6 | 	mov	arg01, #0
1c5a0     04 E4 05 F1 | 	add	objptr, #4
1c5a4     F2 00 02 FB | 	rdlong	_var01, objptr
1c5a8     03 00 66 F0 | 	shl	_var01, #3
1c5ac     01 00 86 F1 | 	sub	_var01, #1
1c5b0     00 00 56 F2 | 	cmps	_var01, #0 wc
1c5b4     01 02 86 F6 | 	negc	_var02, #1
1c5b8     01 05 02 F6 | 	mov	_var03, _var02
1c5bc     01 01 02 F1 | 	add	_var01, _var02
1c5c0     0A 00 00 FF 
1c5c4     90 E4 85 F1 | 	sub	objptr, ##5264
1c5c8     97 0C 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1c5cc                 | LR__2200
1c5cc                 | '   cursor[i]:=0
1c5cc     09 03 02 F6 | 	mov	_var02, arg01
1c5d0     F2 02 02 F1 | 	add	_var02, objptr
1c5d4     01 01 48 FC | 	wrbyte	#0, _var02
1c5d8     02 13 02 F1 | 	add	arg01, _var03
1c5dc     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c5e0     E8 FF 9F 5D |  if_ne	jmp	#LR__2200
1c5e4                 | LR__2201
1c5e4                 | ' repeat i from 8*cursorshape to 127
1c5e4     0A 00 00 FF 
1c5e8     90 E4 05 F1 | 	add	objptr, ##5264
1c5ec     F2 04 02 FB | 	rdlong	_var03, objptr
1c5f0     02 13 02 F6 | 	mov	arg01, _var03
1c5f4     03 12 66 F0 | 	shl	arg01, #3
1c5f8     0B 00 00 FF 
1c5fc     C6 E4 85 F1 | 	sub	objptr, ##5830
1c600     03 04 66 F0 | 	shl	_var03, #3
1c604     80 04 56 F2 | 	cmps	_var03, #128 wc
1c608     01 02 A6 F6 | 	negnc	_var02, #1
1c60c     7F 00 06 F6 | 	mov	_var01, #127
1c610     01 01 02 F1 | 	add	_var01, _var02
1c614     97 1A 48 FB | 	callpa	#(@LR__2203-@LR__2202)>>2,fcache_load_ptr_
1c618                 | LR__2202
1c618                 | '   cursor[i]:=cursorcolor
1c618     09 05 02 F6 | 	mov	_var03, arg01
1c61c     01 00 00 FF 
1c620     36 E4 05 F1 | 	add	objptr, ##566
1c624     F2 04 02 F1 | 	add	_var03, objptr
1c628     0A 00 00 FF 
1c62c     8C E4 05 F1 | 	add	objptr, ##5260
1c630     F2 06 02 FB | 	rdlong	_var04, objptr
1c634     0B 00 00 FF 
1c638     C2 E4 85 F1 | 	sub	objptr, ##5826
1c63c     02 07 42 FC | 	wrbyte	_var04, _var03
1c640     01 13 02 F1 | 	add	arg01, _var02
1c644     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c648     CC FF 9F 5D |  if_ne	jmp	#LR__2202
1c64c                 | LR__2203
1c64c                 | _hg010b_spin2_setcursorcolor_ret
1c64c     2D 00 64 FD | 	ret
1c650                 | 
1c650                 | '   
1c650                 | '   
1c650                 | '   
1c650                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1c650                 | _hg010b_spin2_setmode
1c650     02 4A 05 F6 | 	mov	COUNT_, #2
1c654     A8 00 A0 FD | 	call	#pushregs_
1c658                 | ' 
1c658                 | ' 
1c658                 | ' dl_ptr:=@emptydl[0]
1c658     01 00 00 FF 
1c65c     1D E4 05 F1 | 	add	objptr, ##541
1c660     F2 1A 02 F6 | 	mov	arg05, objptr
1c664     FD E5 85 F1 | 	sub	objptr, #509
1c668     F2 1A 62 FC | 	wrlong	arg05, objptr
1c66c                 | ' 
1c66c                 | ' if cog>0 
1c66c     10 E4 05 F1 | 	add	objptr, #16
1c670     F2 1A 02 FB | 	rdlong	arg05, objptr
1c674     30 E4 85 F1 | 	sub	objptr, #48
1c678     01 1A 56 F2 | 	cmps	arg05, #1 wc
1c67c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1c67c     01 12 06 36 |  if_ae	mov	arg01, #1
1c680     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1c684                 | ' xres:=1024
1c684     01 00 00 FF 
1c688     26 E4 05 F1 | 	add	objptr, ##550
1c68c     02 00 80 FF 
1c690     F2 00 68 FC | 	wrlong	##1024, objptr
1c694                 | ' yres:=600
1c694     04 E4 05 F1 | 	add	objptr, #4
1c698     01 00 80 FF 
1c69c     F2 B0 68 FC | 	wrlong	##600, objptr
1c6a0                 | ' ppl:=(timings[3])
1c6a0     10 00 00 FF 
1c6a4     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1c6a8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c6ac     51 E5 85 F1 | 	sub	objptr, #337
1c6b0     F2 1A 62 FC | 	wrlong	arg05, objptr
1c6b4                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1c6b4     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1c6b8     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c6bc     01 1E 66 F0 | 	shl	local01, #1
1c6c0     80 E4 85 F1 | 	sub	objptr, #128
1c6c4     F2 1E 62 FC | 	wrlong	local01, objptr
1c6c8                 | ' cpl1:=cpl '' todo remove
1c6c8     04 E4 05 F1 | 	add	objptr, #4
1c6cc     F2 1E 62 FC | 	wrlong	local01, objptr
1c6d0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1c6d0     02 00 00 FF 
1c6d4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1c6d8     41 E4 85 F1 | 	sub	objptr, #65
1c6dc     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c6e0                 | ' repeat i from 0 to 3
1c6e0     00 20 06 F6 | 	mov	local02, #0
1c6e4     02 00 00 FF 
1c6e8     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1c6ec     08 E4 05 F1 | 	add	objptr, #8
1c6f0     97 20 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1c6f4                 | LR__2210
1c6f4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1c6f4     10 1F 02 F6 | 	mov	local01, local02
1c6f8     02 1E 66 F0 | 	shl	local01, #2
1c6fc     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1c700     F2 1A 02 FB | 	rdlong	arg05, objptr
1c704     11 1A 66 F0 | 	shl	arg05, #17
1c708     0F 1F 02 FB | 	rdlong	local01, local01
1c70c     0D 1F 02 F1 | 	add	local01, arg05
1c710     80 40 38 FF 
1c714     00 1E 06 F1 | 	add	local01, ##1887502336
1c718     10 1B 02 F6 | 	mov	arg05, local02
1c71c     02 1A 66 F0 | 	shl	arg05, #2
1c720     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1c724     0D 1F 62 FC | 	wrlong	local01, arg05
1c728     01 20 06 F1 | 	add	local02, #1
1c72c     04 20 56 F2 | 	cmps	local02, #4 wc
1c730     C0 FF 9F CD |  if_b	jmp	#LR__2210
1c734                 | LR__2211
1c734     24 E4 85 F1 | 	sub	objptr, #36
1c738                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1c738     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1c73c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c740     14 1E 66 FC | 	wrlong	local01, #20
1c744                 | ' hubset(timings[10])
1c744     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1c748     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1c74c     10 00 00 FF 
1c750     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1c754     00 12 62 FD | 	hubset	arg01
1c758                 | ' waitms(1)                                                   	' wait for stabilization
1c758     01 12 06 F6 | 	mov	arg01, #1
1c75c     60 29 B0 FD | 	call	#__system___waitms
1c760     10 00 00 FF 
1c764     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1c768     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1c76c     61 E4 05 F1 | 	add	objptr, #97
1c770     F2 20 62 FC | 	wrlong	local02, objptr
1c774     10 1F 52 F6 | 	abs	local01, local02 wc
1c778     04 1E 46 F0 | 	shr	local01, #4
1c77c     0F 1F 82 F6 | 	negc	local01, local01
1c780     9C E4 05 F1 | 	add	objptr, #156
1c784     F2 1E 62 FC | 	wrlong	local01, objptr
1c788     A4 E4 85 F1 | 	sub	objptr, #164
1c78c     F2 20 02 FB | 	rdlong	local02, objptr
1c790     08 E4 05 F1 | 	add	objptr, #8
1c794     F2 1E 02 FB | 	rdlong	local01, objptr
1c798     0F 21 02 FD | 	qmul	local02, local01
1c79c                 | ' lines:=timings[11]
1c79c                 | ' t_lines:=lines/16
1c79c                 | ' buflen:=cpl*lines						' framebuffer length in longs
1c79c     29 E4 85 F1 | 	sub	objptr, #41
1c7a0     19 1E C6 F9 | 	decod	local01, #25
1c7a4     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1c7a8     18 20 62 FD | 	getqx	local02
1c7ac     F2 20 62 FC | 	wrlong	local02, objptr
1c7b0     38 E4 85 F1 | 	sub	objptr, #56
1c7b4     02 20 66 F0 | 	shl	local02, #2
1c7b8     10 1F 82 F1 | 	sub	local01, local02
1c7bc     F2 1E 62 FC | 	wrlong	local01, objptr
1c7c0     FD E4 05 F1 | 	add	objptr, #253
1c7c4     F2 20 02 FB | 	rdlong	local02, objptr
1c7c8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c7cc     0D 21 02 FD | 	qmul	local02, arg05
1c7d0                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1c7d0                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1c7d0     F9 E4 85 F1 | 	sub	objptr, #249
1c7d4                 | ' mode_ptr:=@timings						' set pointers to timings
1c7d4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1c7d8                 | ' graphmode:=1024+512+192+48							' det global variable
1c7d8                 | ' makedl(graphmode)							' make a DL for the mode
1c7d8     03 00 00 FF 
1c7dc     F0 12 06 F6 | 	mov	arg01, ##1776
1c7e0     18 20 62 FD | 	getqx	local02
1c7e4     10 1F 82 F1 | 	sub	local01, local02
1c7e8     F2 1E 62 FC | 	wrlong	local01, objptr
1c7ec     14 E4 05 F1 | 	add	objptr, #20
1c7f0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c7f4     79 E4 05 F1 | 	add	objptr, #121
1c7f8     03 00 80 FF 
1c7fc     F2 E0 69 FC | 	wrlong	##1776, objptr
1c800     91 E4 85 F1 | 	sub	objptr, #145
1c804     10 00 00 FF 
1c808     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1c80c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1c810                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1c810     F2 1E 02 FB | 	rdlong	local01, objptr
1c814     DD E4 05 F1 | 	add	objptr, #221
1c818     F2 1E 62 FC | 	wrlong	local01, objptr
1c81c                 | ' s_font_ptr:=font_ptr
1c81c     D5 E4 85 F1 | 	sub	objptr, #213
1c820     F2 1E 02 FB | 	rdlong	local01, objptr
1c824     D9 E4 05 F1 | 	add	objptr, #217
1c828     F2 1E 62 FC | 	wrlong	local01, objptr
1c82c                 | ' s_lines:=lines
1c82c     80 E4 85 F1 | 	sub	objptr, #128
1c830     F2 1E 02 FB | 	rdlong	local01, objptr
1c834     84 E4 05 F1 | 	add	objptr, #132
1c838     F2 1E 62 FC | 	wrlong	local01, objptr
1c83c                 | ' s_buflen:=buflen
1c83c     AD E4 85 F1 | 	sub	objptr, #173
1c840     F2 1E 02 FB | 	rdlong	local01, objptr
1c844     B5 E4 05 F1 | 	add	objptr, #181
1c848     F2 1E 62 FC | 	wrlong	local01, objptr
1c84c                 | ' s_cpl:=cpl
1c84c     94 E4 85 F1 | 	sub	objptr, #148
1c850     F2 1E 02 FB | 	rdlong	local01, objptr
1c854     90 E4 05 F1 | 	add	objptr, #144
1c858     F2 1E 62 FC | 	wrlong	local01, objptr
1c85c                 | ' s_cpl1:=cpl
1c85c     90 E4 85 F1 | 	sub	objptr, #144
1c860     F2 1E 02 FB | 	rdlong	local01, objptr
1c864     98 E4 05 F1 | 	add	objptr, #152
1c868     F2 1E 62 FC | 	wrlong	local01, objptr
1c86c                 | ' st_lines:=t_lines
1c86c     0C E4 05 F1 | 	add	objptr, #12
1c870     F2 1E 02 FB | 	rdlong	local01, objptr
1c874     04 E4 05 F1 | 	add	objptr, #4
1c878     F2 1E 62 FC | 	wrlong	local01, objptr
1c87c                 | ' ppl:=ppl/xzoom  
1c87c     28 E4 85 F1 | 	sub	objptr, #40
1c880     F2 64 02 FB | 	rdlong	muldiva_, objptr
1c884     2C E4 05 F1 | 	add	objptr, #44
1c888     F2 66 02 FB | 	rdlong	muldivb_, objptr
1c88c     05 E5 85 F1 | 	sub	objptr, #261
1c890     BA 00 A0 FD | 	call	#divide_
1c894     D9 E4 05 F1 | 	add	objptr, #217
1c898     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c89c                 | ' s_ppl:=ppl
1c89c     1C E4 05 F1 | 	add	objptr, #28
1c8a0     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c8a4     F5 E4 85 F1 | 	sub	objptr, #245
1c8a8                 | ' waitms(20)							' wait 
1c8a8     14 12 06 F6 | 	mov	arg01, #20
1c8ac     10 28 B0 FD | 	call	#__system___waitms
1c8b0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1c8b0     04 E4 05 F1 | 	add	objptr, #4
1c8b4     F2 12 02 FB | 	rdlong	arg01, objptr
1c8b8     04 E4 85 F1 | 	sub	objptr, #4
1c8bc     F2 16 02 FB | 	rdlong	arg03, objptr
1c8c0     09 17 82 F1 | 	sub	arg03, arg01
1c8c4     20 14 06 F6 | 	mov	arg02, #32
1c8c8     00 18 06 F6 | 	mov	arg04, #0
1c8cc     01 1A 06 F6 | 	mov	arg05, #1
1c8d0     0B 00 00 FF 
1c8d4     CC E4 05 F1 | 	add	objptr, ##5836
1c8d8     E8 19 B0 FD | 	call	#_psram_spin2_fill
1c8dc     0B 00 00 FF 
1c8e0     CC E4 85 F1 | 	sub	objptr, ##5836
1c8e4     A7 F0 03 F6 | 	mov	ptra, fp
1c8e8     B2 00 A0 FD | 	call	#popregs_
1c8ec                 | _hg010b_spin2_setmode_ret
1c8ec     2D 00 64 FD | 	ret
1c8f0                 | 
1c8f0                 | ' 
1c8f0                 | ' '****************************************************************************************************************
1c8f0                 | ' '                                                                                                             	*
1c8f0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1c8f0                 | ' '                                                                                                             	*
1c8f0                 | ' '****************************************************************************************************************
1c8f0                 | ' 
1c8f0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1c8f0                 | _hg010b_spin2_makedl
1c8f0                 | ' 
1c8f0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1c8f0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1c8f0                 | ' repeat i from 0 to 11                                                           ' clear DL
1c8f0     00 00 06 F6 | 	mov	_var01, #0
1c8f4     ED E5 05 F1 | 	add	objptr, #493
1c8f8     97 0E 48 FB | 	callpa	#(@LR__2221-@LR__2220)>>2,fcache_load_ptr_
1c8fc                 | LR__2220
1c8fc                 | '   displaylist[i]:=0 
1c8fc     00 03 02 F6 | 	mov	_var02, _var01
1c900     02 02 66 F0 | 	shl	_var02, #2
1c904     F2 02 02 F1 | 	add	_var02, objptr
1c908     01 01 68 FC | 	wrlong	#0, _var02
1c90c     01 00 06 F1 | 	add	_var01, #1
1c910     0C 00 56 F2 | 	cmps	_var01, #12 wc
1c914     E4 FF 9F CD |  if_b	jmp	#LR__2220
1c918                 | LR__2221
1c918                 | '                         ' 
1c918                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1c918     8C E5 85 F1 | 	sub	objptr, #396
1c91c     F2 02 02 FB | 	rdlong	_var02, objptr
1c920     14 02 66 F0 | 	shl	_var02, #20
1c924     01 02 06 F1 | 	add	_var02, #1
1c928     04 E4 85 F1 | 	sub	objptr, #4
1c92c     F2 00 02 FB | 	rdlong	_var01, objptr
1c930     02 00 66 F0 | 	shl	_var01, #2
1c934     04 00 66 F0 | 	shl	_var01, #4
1c938     00 03 02 F1 | 	add	_var02, _var01
1c93c     90 E5 05 F1 | 	add	objptr, #400
1c940     F2 02 62 FC | 	wrlong	_var02, objptr
1c944     ED E5 85 F1 | 	sub	objptr, #493
1c948                 | ' displaylist[1]:=buf_ptr<<4+%10  
1c948     F2 02 02 FB | 	rdlong	_var02, objptr
1c94c     04 02 66 F0 | 	shl	_var02, #4
1c950     02 02 06 F1 | 	add	_var02, #2
1c954     F1 E5 05 F1 | 	add	objptr, #497
1c958     F2 02 62 FC | 	wrlong	_var02, objptr
1c95c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1c95c     04 E4 85 F1 | 	sub	objptr, #4
1c960     F2 02 02 F6 | 	mov	_var02, objptr
1c964     CD E5 85 F1 | 	sub	objptr, #461
1c968     F2 02 62 FC | 	wrlong	_var02, objptr
1c96c     20 E4 85 F1 | 	sub	objptr, #32
1c970                 | _hg010b_spin2_makedl_ret
1c970     2D 00 64 FD | 	ret
1c974                 | 
1c974                 | ' 
1c974                 | ' 
1c974                 | ' '****************************************************************************************************************
1c974                 | ' '                                                                        					*
1c974                 | ' '  Graphic primitives                                                    					*
1c974                 | ' '                                                                        					*
1c974                 | ' '****************************************************************************************************************
1c974                 | ' 
1c974                 | ' pub setspriteptr(num,ptr)
1c974                 | _hg010b_spin2_setspriteptr
1c974                 | ' long[@spr1ptr+12*num]:=ptr
1c974     11 E5 05 F1 | 	add	objptr, #273
1c978     F2 00 02 F6 | 	mov	_var01, objptr
1c97c     09 03 02 F6 | 	mov	_var02, arg01
1c980     01 02 66 F0 | 	shl	_var02, #1
1c984     09 03 02 F1 | 	add	_var02, arg01
1c988     02 02 66 F0 | 	shl	_var02, #2
1c98c     01 01 02 F1 | 	add	_var01, _var02
1c990     00 15 62 FC | 	wrlong	arg02, _var01
1c994     11 E5 85 F1 | 	sub	objptr, #273
1c998                 | _hg010b_spin2_setspriteptr_ret
1c998     2D 00 64 FD | 	ret
1c99c                 | 
1c99c                 | ' 
1c99c                 | ' pub setspritepos(num,x,y)
1c99c                 | _hg010b_spin2_setspritepos
1c99c                 | ' if y>601
1c99c     01 00 00 FF 
1c9a0     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1c9a4                 | '   y:=601
1c9a4     01 00 00 3F 
1c9a8     59 16 06 36 |  if_ae	mov	arg03, ##601
1c9ac                 | ' if x>1024
1c9ac     02 00 00 FF 
1c9b0     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1c9b4                 | '   x:=1024
1c9b4     0A 14 C6 39 |  if_ae	decod	arg02, #10
1c9b8                 | ' word[@spr1ptr+12*num+4]:=x
1c9b8     11 E5 05 F1 | 	add	objptr, #273
1c9bc     F2 00 02 F6 | 	mov	_var01, objptr
1c9c0     09 03 02 F6 | 	mov	_var02, arg01
1c9c4     01 02 66 F0 | 	shl	_var02, #1
1c9c8     09 03 02 F1 | 	add	_var02, arg01
1c9cc     02 02 66 F0 | 	shl	_var02, #2
1c9d0     01 01 02 F1 | 	add	_var01, _var02
1c9d4     04 00 06 F1 | 	add	_var01, #4
1c9d8     00 15 52 FC | 	wrword	arg02, _var01
1c9dc                 | ' word[@spr1ptr+12*num+6]:=y
1c9dc     F2 00 02 F6 | 	mov	_var01, objptr
1c9e0     09 03 02 F6 | 	mov	_var02, arg01
1c9e4     01 02 66 F0 | 	shl	_var02, #1
1c9e8     09 03 02 F1 | 	add	_var02, arg01
1c9ec     02 02 66 F0 | 	shl	_var02, #2
1c9f0     01 01 02 F1 | 	add	_var01, _var02
1c9f4     06 00 06 F1 | 	add	_var01, #6
1c9f8     00 17 52 FC | 	wrword	arg03, _var01
1c9fc     11 E5 85 F1 | 	sub	objptr, #273
1ca00                 | _hg010b_spin2_setspritepos_ret
1ca00     2D 00 64 FD | 	ret
1ca04                 | 
1ca04                 | ' 
1ca04                 | ' pub setspritesize(num,w,h)
1ca04                 | _hg010b_spin2_setspritesize
1ca04                 | ' word[@spr1ptr+12*num+8]:=w
1ca04     11 E5 05 F1 | 	add	objptr, #273
1ca08     F2 00 02 F6 | 	mov	_var01, objptr
1ca0c     09 03 02 F6 | 	mov	_var02, arg01
1ca10     01 02 66 F0 | 	shl	_var02, #1
1ca14     09 03 02 F1 | 	add	_var02, arg01
1ca18     02 02 66 F0 | 	shl	_var02, #2
1ca1c     01 01 02 F1 | 	add	_var01, _var02
1ca20     08 00 06 F1 | 	add	_var01, #8
1ca24     00 15 52 FC | 	wrword	arg02, _var01
1ca28                 | ' word[@spr1ptr+12*num+10]:=h
1ca28     F2 00 02 F6 | 	mov	_var01, objptr
1ca2c     09 03 02 F6 | 	mov	_var02, arg01
1ca30     01 02 66 F0 | 	shl	_var02, #1
1ca34     09 03 02 F1 | 	add	_var02, arg01
1ca38     02 02 66 F0 | 	shl	_var02, #2
1ca3c     01 01 02 F1 | 	add	_var01, _var02
1ca40     0A 00 06 F1 | 	add	_var01, #10
1ca44     00 17 52 FC | 	wrword	arg03, _var01
1ca48     11 E5 85 F1 | 	sub	objptr, #273
1ca4c                 | _hg010b_spin2_setspritesize_ret
1ca4c     2D 00 64 FD | 	ret
1ca50                 | 
1ca50                 | ' 
1ca50                 | ' 
1ca50                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1ca50                 | ' 
1ca50                 | ' 
1ca50                 | ' pub putpixel(x,y,c)
1ca50                 | _hg010b_spin2_putpixel
1ca50     04 4A 05 F6 | 	mov	COUNT_, #4
1ca54     A8 00 A0 FD | 	call	#pushregs_
1ca58     09 1F 02 F6 | 	mov	local01, arg01
1ca5c                 | ' 
1ca5c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1ca5c     00 20 06 F6 | 	mov	local02, #0
1ca60     00 1E 56 F2 | 	cmps	local01, #0 wc
1ca64     01 20 66 36 |  if_ae	neg	local02, #1
1ca68     E9 E4 05 F1 | 	add	objptr, #233
1ca6c     F2 1A 02 FB | 	rdlong	arg05, objptr
1ca70     02 1A 66 F0 | 	shl	arg05, #2
1ca74     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1ca78     11 23 A2 F1 | 	subx	local03, local03
1ca7c     11 21 02 F5 | 	and	local02, local03
1ca80     00 22 06 F6 | 	mov	local03, #0
1ca84     00 14 56 F2 | 	cmps	arg02, #0 wc
1ca88     01 22 66 36 |  if_ae	neg	local03, #1
1ca8c     11 21 02 F5 | 	and	local02, local03
1ca90     04 E4 85 F1 | 	sub	objptr, #4
1ca94     F2 22 02 FB | 	rdlong	local03, objptr
1ca98     E5 E4 85 F1 | 	sub	objptr, #229
1ca9c     11 15 52 F2 | 	cmps	arg02, local03 wc
1caa0     12 25 A2 F1 | 	subx	local04, local04
1caa4     12 21 CA F7 | 	test	local02, local04 wz
1caa8     48 00 90 AD |  if_e	jmp	#LR__2230
1caac     DD E4 05 F1 | 	add	objptr, #221
1cab0     F2 12 02 FB | 	rdlong	arg01, objptr
1cab4     14 E4 05 F1 | 	add	objptr, #20
1cab8     F2 24 02 FB | 	rdlong	local04, objptr
1cabc     02 24 66 F0 | 	shl	local04, #2
1cac0     0A 25 02 FD | 	qmul	local04, arg02
1cac4                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1cac4     0B 15 02 F6 | 	mov	arg02, arg03
1cac8     01 16 06 F6 | 	mov	arg03, #1
1cacc     00 18 06 F6 | 	mov	arg04, #0
1cad0     01 1A 06 F6 | 	mov	arg05, #1
1cad4     0A 00 00 FF 
1cad8     DB E5 05 F1 | 	add	objptr, ##5595
1cadc     18 24 62 FD | 	getqx	local04
1cae0     0F 25 02 F1 | 	add	local04, local01
1cae4     12 13 02 F1 | 	add	arg01, local04
1cae8     D8 17 B0 FD | 	call	#_psram_spin2_fill
1caec     0B 00 00 FF 
1caf0     CC E4 85 F1 | 	sub	objptr, ##5836
1caf4                 | LR__2230
1caf4     A7 F0 03 F6 | 	mov	ptra, fp
1caf8     B2 00 A0 FD | 	call	#popregs_
1cafc                 | _hg010b_spin2_putpixel_ret
1cafc     2D 00 64 FD | 	ret
1cb00                 | 
1cb00                 | ' 
1cb00                 | ' pub putpixel2(x,y,c)
1cb00                 | _hg010b_spin2_putpixel2
1cb00     02 4A 05 F6 | 	mov	COUNT_, #2
1cb04     A8 00 A0 FD | 	call	#pushregs_
1cb08     DD E4 05 F1 | 	add	objptr, #221
1cb0c     F2 1E 02 FB | 	rdlong	local01, objptr
1cb10     14 E4 05 F1 | 	add	objptr, #20
1cb14     F2 1A 02 FB | 	rdlong	arg05, objptr
1cb18     02 1A 66 F0 | 	shl	arg05, #2
1cb1c     0A 1B 02 FD | 	qmul	arg05, arg02
1cb20                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1cb20     0B 15 02 F6 | 	mov	arg02, arg03
1cb24     01 16 06 F6 | 	mov	arg03, #1
1cb28     00 18 06 F6 | 	mov	arg04, #0
1cb2c     01 1A 06 F6 | 	mov	arg05, #1
1cb30     0A 00 00 FF 
1cb34     DB E5 05 F1 | 	add	objptr, ##5595
1cb38     18 20 62 FD | 	getqx	local02
1cb3c     09 21 02 F1 | 	add	local02, arg01
1cb40     10 1F 02 F1 | 	add	local01, local02
1cb44     0F 13 02 F6 | 	mov	arg01, local01
1cb48     78 17 B0 FD | 	call	#_psram_spin2_fill
1cb4c     0B 00 00 FF 
1cb50     CC E4 85 F1 | 	sub	objptr, ##5836
1cb54     A7 F0 03 F6 | 	mov	ptra, fp
1cb58     B2 00 A0 FD | 	call	#popregs_
1cb5c                 | _hg010b_spin2_putpixel2_ret
1cb5c     2D 00 64 FD | 	ret
1cb60                 | 
1cb60                 | ' 
1cb60                 | ' pub getpixel2(x,y): c 
1cb60                 | _hg010b_spin2_getpixel2
1cb60     02 4A 05 F6 | 	mov	COUNT_, #2
1cb64     A8 00 A0 FD | 	call	#pushregs_
1cb68     0C F0 07 F1 | 	add	ptra, #12
1cb6c     04 4E 05 F1 | 	add	fp, #4
1cb70     A7 12 62 FC | 	wrlong	arg01, fp
1cb74     04 4E 05 F1 | 	add	fp, #4
1cb78     A7 14 62 FC | 	wrlong	arg02, fp
1cb7c     08 4E 85 F1 | 	sub	fp, #8
1cb80     A7 00 68 FC | 	wrlong	#0, fp
1cb84     A7 12 02 F6 | 	mov	arg01, fp
1cb88     DD E4 05 F1 | 	add	objptr, #221
1cb8c     F2 14 02 FB | 	rdlong	arg02, objptr
1cb90     14 E4 05 F1 | 	add	objptr, #20
1cb94     F2 16 02 FB | 	rdlong	arg03, objptr
1cb98     02 16 66 F0 | 	shl	arg03, #2
1cb9c     08 4E 05 F1 | 	add	fp, #8
1cba0     A7 FA 01 FB | 	rdlong	result1, fp
1cba4     FD 16 02 FD | 	qmul	arg03, result1
1cba8                 | ' 
1cba8                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1cba8     04 4E 85 F1 | 	sub	fp, #4
1cbac     A7 1E 02 FB | 	rdlong	local01, fp
1cbb0     04 4E 85 F1 | 	sub	fp, #4
1cbb4     01 16 06 F6 | 	mov	arg03, #1
1cbb8     0A 00 00 FF 
1cbbc     DB E5 05 F1 | 	add	objptr, ##5595
1cbc0     18 20 62 FD | 	getqx	local02
1cbc4     0F 21 02 F1 | 	add	local02, local01
1cbc8     10 15 02 F1 | 	add	arg02, local02
1cbcc     BC 15 B0 FD | 	call	#_psram_spin2_read1
1cbd0     0B 00 00 FF 
1cbd4     CC E4 85 F1 | 	sub	objptr, ##5836
1cbd8                 | ' return c
1cbd8     A7 FA 01 FB | 	rdlong	result1, fp
1cbdc     A7 F0 03 F6 | 	mov	ptra, fp
1cbe0     B2 00 A0 FD | 	call	#popregs_
1cbe4                 | _hg010b_spin2_getpixel2_ret
1cbe4     2D 00 64 FD | 	ret
1cbe8                 | 
1cbe8                 | '   
1cbe8                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1cbe8                 | ' 
1cbe8                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1cbe8                 | _hg010b_spin2_fastline
1cbe8     02 4A 05 F6 | 	mov	COUNT_, #2
1cbec     A8 00 A0 FD | 	call	#pushregs_
1cbf0     09 1F 02 F6 | 	mov	local01, arg01
1cbf4     0A 21 02 F6 | 	mov	local02, arg02
1cbf8                 | ' 
1cbf8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1cbf8     00 16 56 F2 | 	cmps	arg03, #0 wc
1cbfc     F4 00 90 CD |  if_b	jmp	#LR__2240
1cc00     01 00 00 FF 
1cc04     2A E4 05 F1 | 	add	objptr, ##554
1cc08     F2 1A 02 FB | 	rdlong	arg05, objptr
1cc0c     01 00 00 FF 
1cc10     2A E4 85 F1 | 	sub	objptr, ##554
1cc14     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1cc18     D8 00 90 3D |  if_ae	jmp	#LR__2240
1cc1c     00 1E 56 F2 | 	cmps	local01, #0 wc
1cc20     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1cc24     CC 00 90 CD |  if_b	jmp	#LR__2240
1cc28     01 00 00 FF 
1cc2c     26 E4 05 F1 | 	add	objptr, ##550
1cc30     F2 1A 02 FB | 	rdlong	arg05, objptr
1cc34     01 00 00 FF 
1cc38     26 E4 85 F1 | 	sub	objptr, ##550
1cc3c     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1cc40     01 00 00 1F 
1cc44     26 E4 05 11 |  if_a	add	objptr, ##550
1cc48     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1cc4c     01 00 00 1F 
1cc50     26 E4 85 11 |  if_a	sub	objptr, ##550
1cc54     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1cc58                 | '   return
1cc58     98 00 90 1D |  if_a	jmp	#LR__2240
1cc5c     10 1F 5A F2 | 	cmps	local01, local02 wcz
1cc60     0F 1B 02 16 |  if_a	mov	arg05, local01
1cc64     10 1F 02 16 |  if_a	mov	local01, local02
1cc68     0D 21 02 16 |  if_a	mov	local02, arg05
1cc6c     00 1E 56 F2 | 	cmps	local01, #0 wc
1cc70     00 1E 06 C6 |  if_b	mov	local01, #0
1cc74     01 00 00 FF 
1cc78     26 E4 05 F1 | 	add	objptr, ##550
1cc7c     F2 1A 02 FB | 	rdlong	arg05, objptr
1cc80     01 00 00 FF 
1cc84     26 E4 85 F1 | 	sub	objptr, ##550
1cc88     0D 21 52 F2 | 	cmps	local02, arg05 wc
1cc8c     01 00 00 3F 
1cc90     26 E4 05 31 |  if_ae	add	objptr, ##550
1cc94     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1cc98     01 00 00 3F 
1cc9c     26 E4 85 31 |  if_ae	sub	objptr, ##550
1cca0     DD E4 05 F1 | 	add	objptr, #221
1cca4     F2 12 02 FB | 	rdlong	arg01, objptr
1cca8     14 E4 05 F1 | 	add	objptr, #20
1ccac     F2 1A 02 FB | 	rdlong	arg05, objptr
1ccb0     02 1A 66 F0 | 	shl	arg05, #2
1ccb4     0B 1B 02 FD | 	qmul	arg05, arg03
1ccb8                 | ' if x1>x2
1ccb8                 | '   x1,x2:=x2,x1
1ccb8                 | ' if x1<0 
1ccb8                 | '   x1:=0
1ccb8                 | ' if x2>=xres
1ccb8                 | '   x2:=xres-1  
1ccb8     01 20 86 31 |  if_ae	sub	local02, #1
1ccbc                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1ccbc     01 16 06 F6 | 	mov	arg03, #1
1ccc0     10 17 02 F1 | 	add	arg03, local02
1ccc4     0F 17 82 F1 | 	sub	arg03, local01
1ccc8     0C 15 02 F6 | 	mov	arg02, arg04
1cccc     00 18 06 F6 | 	mov	arg04, #0
1ccd0     01 1A 06 F6 | 	mov	arg05, #1
1ccd4     0A 00 00 FF 
1ccd8     DB E5 05 F1 | 	add	objptr, ##5595
1ccdc     18 20 62 FD | 	getqx	local02
1cce0     0F 21 02 F1 | 	add	local02, local01
1cce4     10 13 02 F1 | 	add	arg01, local02
1cce8     D8 15 B0 FD | 	call	#_psram_spin2_fill
1ccec     0B 00 00 FF 
1ccf0     CC E4 85 F1 | 	sub	objptr, ##5836
1ccf4                 | LR__2240
1ccf4     A7 F0 03 F6 | 	mov	ptra, fp
1ccf8     B2 00 A0 FD | 	call	#popregs_
1ccfc                 | _hg010b_spin2_fastline_ret
1ccfc     2D 00 64 FD | 	ret
1cd00                 | 
1cd00                 | ' 
1cd00                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1cd00                 | _hg010b_spin2_draw
1cd00     0E 4A 05 F6 | 	mov	COUNT_, #14
1cd04     A8 00 A0 FD | 	call	#pushregs_
1cd08     09 1F 02 F6 | 	mov	local01, arg01
1cd0c     0A 21 02 F6 | 	mov	local02, arg02
1cd10     0B 23 02 F6 | 	mov	local03, arg03
1cd14     0C 25 02 F6 | 	mov	local04, arg04
1cd18     0D 27 02 F6 | 	mov	local05, arg05
1cd1c                 | ' 
1cd1c                 | ' if (y1==y2)
1cd1c     12 21 0A F2 | 	cmp	local02, local04 wz
1cd20     18 00 90 5D |  if_ne	jmp	#LR__2250
1cd24                 | '   fastline(x1,x2,y1,c)
1cd24     0F 13 02 F6 | 	mov	arg01, local01
1cd28     11 15 02 F6 | 	mov	arg02, local03
1cd2c     10 17 02 F6 | 	mov	arg03, local02
1cd30     13 19 02 F6 | 	mov	arg04, local05
1cd34     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1cd38     F8 00 90 FD | 	jmp	#LR__2256
1cd3c                 | LR__2250
1cd3c                 | ' else  
1cd3c                 | '   x:=x1
1cd3c     0F 29 02 F6 | 	mov	local06, local01
1cd40                 | '   y:=y1
1cd40     10 2B 02 F6 | 	mov	local07, local02
1cd44                 | ' 
1cd44                 | '   if (x1<x2) 
1cd44     11 1F 52 F2 | 	cmps	local01, local03 wc
1cd48                 | '     xi:=1
1cd48     01 2C 06 C6 |  if_b	mov	local08, #1
1cd4c                 | '     dx:=x2-x1
1cd4c     11 2F 02 C6 |  if_b	mov	local09, local03
1cd50     0F 2F 82 C1 |  if_b	sub	local09, local01
1cd54                 | '   else
1cd54                 | '     xi:=-1
1cd54     01 2C 66 36 |  if_ae	neg	local08, #1
1cd58                 | '     dx:=x1-x2
1cd58     11 1F 82 31 |  if_ae	sub	local01, local03
1cd5c     0F 2F 02 36 |  if_ae	mov	local09, local01
1cd60                 | '   
1cd60                 | '   if (y1<y2) 
1cd60     12 21 52 F2 | 	cmps	local02, local04 wc
1cd64                 | '     yi:=1
1cd64     01 30 06 C6 |  if_b	mov	local10, #1
1cd68                 | '     dy:=y2-y1
1cd68     12 33 02 C6 |  if_b	mov	local11, local04
1cd6c     10 33 82 C1 |  if_b	sub	local11, local02
1cd70                 | '   else
1cd70                 | '     yi:=-1
1cd70     01 30 66 36 |  if_ae	neg	local10, #1
1cd74                 | '     dy:=y1-y2
1cd74     12 21 82 31 |  if_ae	sub	local02, local04
1cd78     10 33 02 36 |  if_ae	mov	local11, local02
1cd7c                 | ' 
1cd7c                 | '   putpixel(x,y,c)
1cd7c     13 17 02 F6 | 	mov	arg03, local05
1cd80     14 13 02 F6 | 	mov	arg01, local06
1cd84     15 15 02 F6 | 	mov	arg02, local07
1cd88     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cd8c                 | ' 
1cd8c                 | '   if (dx>dy)
1cd8c     19 2F 5A F2 | 	cmps	local09, local11 wcz
1cd90     50 00 90 ED |  if_be	jmp	#LR__2252
1cd94                 | '     ai:=(dy-dx)*2
1cd94     19 35 02 F6 | 	mov	local12, local11
1cd98     17 35 82 F1 | 	sub	local12, local09
1cd9c     01 34 66 F0 | 	shl	local12, #1
1cda0                 | '     bi:=dy*2
1cda0     01 32 66 F0 | 	shl	local11, #1
1cda4     19 37 02 F6 | 	mov	local13, local11
1cda8                 | '     d:= bi-dx
1cda8     1B 39 02 F6 | 	mov	local14, local13
1cdac     17 39 82 F1 | 	sub	local14, local09
1cdb0                 | '     repeat while (x<>x2) 
1cdb0                 | LR__2251
1cdb0     11 29 0A F2 | 	cmp	local06, local03 wz
1cdb4     7C 00 90 AD |  if_e	jmp	#LR__2255
1cdb8                 | '       if (d>=0) 
1cdb8     00 38 56 F2 | 	cmps	local14, #0 wc
1cdbc                 | '         x+=xi
1cdbc     16 29 02 31 |  if_ae	add	local06, local08
1cdc0                 | '         y+=yi
1cdc0     18 2B 02 31 |  if_ae	add	local07, local10
1cdc4                 | '         d+=ai
1cdc4     1A 39 02 31 |  if_ae	add	local14, local12
1cdc8                 | '       else
1cdc8                 | '         d+=bi
1cdc8     1B 39 02 C1 |  if_b	add	local14, local13
1cdcc                 | '         x+=xi
1cdcc     16 29 02 C1 |  if_b	add	local06, local08
1cdd0                 | '       putpixel(x,y,c)
1cdd0     14 13 02 F6 | 	mov	arg01, local06
1cdd4     15 15 02 F6 | 	mov	arg02, local07
1cdd8     13 17 02 F6 | 	mov	arg03, local05
1cddc     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cde0     CC FF 9F FD | 	jmp	#LR__2251
1cde4                 | LR__2252
1cde4                 | '   else
1cde4                 | '     ai:=(dx-dy)*2
1cde4     17 35 02 F6 | 	mov	local12, local09
1cde8     19 35 82 F1 | 	sub	local12, local11
1cdec     01 34 66 F0 | 	shl	local12, #1
1cdf0                 | '     bi:=dx*2
1cdf0     01 2E 66 F0 | 	shl	local09, #1
1cdf4     17 37 02 F6 | 	mov	local13, local09
1cdf8                 | '     d:=bi-dy
1cdf8     1B 39 02 F6 | 	mov	local14, local13
1cdfc     19 39 82 F1 | 	sub	local14, local11
1ce00                 | '     repeat while (y<>y2)
1ce00                 | LR__2253
1ce00     12 2B 0A F2 | 	cmp	local07, local04 wz
1ce04     2C 00 90 AD |  if_e	jmp	#LR__2254
1ce08                 | '       if (d>=0)
1ce08     00 38 56 F2 | 	cmps	local14, #0 wc
1ce0c                 | '         x+=xi
1ce0c     16 29 02 31 |  if_ae	add	local06, local08
1ce10                 | '         y+=yi
1ce10     18 2B 02 31 |  if_ae	add	local07, local10
1ce14                 | '         d+=ai
1ce14     1A 39 02 31 |  if_ae	add	local14, local12
1ce18                 | '       else
1ce18                 | '         d+=bi
1ce18     1B 39 02 C1 |  if_b	add	local14, local13
1ce1c                 | '         y+=yi
1ce1c     18 2B 02 C1 |  if_b	add	local07, local10
1ce20                 | '       putpixel(x, y,c)
1ce20     14 13 02 F6 | 	mov	arg01, local06
1ce24     15 15 02 F6 | 	mov	arg02, local07
1ce28     13 17 02 F6 | 	mov	arg03, local05
1ce2c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ce30     CC FF 9F FD | 	jmp	#LR__2253
1ce34                 | LR__2254
1ce34                 | LR__2255
1ce34                 | LR__2256
1ce34     A7 F0 03 F6 | 	mov	ptra, fp
1ce38     B2 00 A0 FD | 	call	#popregs_
1ce3c                 | _hg010b_spin2_draw_ret
1ce3c     2D 00 64 FD | 	ret
1ce40                 | 
1ce40                 | '  
1ce40                 | ' pub fillpush(val) 
1ce40                 | _hg010b_spin2_fillpush
1ce40                 | ' fillstack[fillptr]:=val
1ce40     0B 00 00 FF 
1ce44     BA E4 05 F1 | 	add	objptr, ##5818
1ce48     F2 00 02 FB | 	rdlong	_var01, objptr
1ce4c     02 00 66 F0 | 	shl	_var01, #2
1ce50     0A 00 00 FF 
1ce54     00 E4 85 F1 | 	sub	objptr, ##5120
1ce58     F2 00 02 F1 | 	add	_var01, objptr
1ce5c     00 13 62 FC | 	wrlong	arg01, _var01
1ce60                 | ' fillptr+=1   
1ce60     0A 00 00 FF 
1ce64     00 E4 05 F1 | 	add	objptr, ##5120
1ce68     F2 00 02 FB | 	rdlong	_var01, objptr
1ce6c     01 00 06 F1 | 	add	_var01, #1
1ce70     F2 00 62 FC | 	wrlong	_var01, objptr
1ce74     0B 00 00 FF 
1ce78     BA E4 85 F1 | 	sub	objptr, ##5818
1ce7c                 | _hg010b_spin2_fillpush_ret
1ce7c     2D 00 64 FD | 	ret
1ce80                 | 
1ce80                 | ' 
1ce80                 | '     
1ce80                 | ' pub fillpop() : val
1ce80                 | _hg010b_spin2_fillpop
1ce80                 | ' 
1ce80                 | ' fillptr-=1
1ce80     0B 00 00 FF 
1ce84     BA E4 05 F1 | 	add	objptr, ##5818
1ce88     F2 FA 01 FB | 	rdlong	result1, objptr
1ce8c     01 FA 85 F1 | 	sub	result1, #1
1ce90     F2 FA 61 FC | 	wrlong	result1, objptr
1ce94                 | ' if fillptr<0
1ce94     0B 00 00 FF 
1ce98     BA E4 85 F1 | 	sub	objptr, ##5818
1ce9c     00 FA 55 F2 | 	cmps	result1, #0 wc
1cea0                 | '   fillptr:=0
1cea0     0B 00 00 CF 
1cea4     BA E4 05 C1 |  if_b	add	objptr, ##5818
1cea8     F2 00 68 CC |  if_b	wrlong	#0, objptr
1ceac     0B 00 00 CF 
1ceb0     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1ceb4                 | '   val:=-12345
1ceb4     E7 FF 7F CF 
1ceb8     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1cebc     28 00 90 CD |  if_b	jmp	#LR__2260
1cec0                 | ' else 
1cec0                 | '   val:=fillstack[fillptr]
1cec0     0B 00 00 FF 
1cec4     BA E4 05 F1 | 	add	objptr, ##5818
1cec8     F2 00 02 FB | 	rdlong	_var01, objptr
1cecc     02 00 66 F0 | 	shl	_var01, #2
1ced0     0A 00 00 FF 
1ced4     00 E4 85 F1 | 	sub	objptr, ##5120
1ced8     F2 00 02 F1 | 	add	_var01, objptr
1cedc     00 01 02 FB | 	rdlong	_var01, _var01
1cee0     01 00 00 FF 
1cee4     BA E4 85 F1 | 	sub	objptr, ##698
1cee8                 | LR__2260
1cee8                 | ' return val
1cee8     00 FB 01 F6 | 	mov	result1, _var01
1ceec                 | _hg010b_spin2_fillpop_ret
1ceec     2D 00 64 FD | 	ret
1cef0                 | 
1cef0                 | ' 
1cef0                 | '       
1cef0                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1cef0                 | _hg010b_spin2_fill
1cef0     0B 4A 05 F6 | 	mov	COUNT_, #11
1cef4     A8 00 A0 FD | 	call	#pushregs_
1cef8                 | ' 
1cef8                 | ' newcolor:=newcolor & 255
1cef8     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1cefc                 | ' oldcolor:=oldcolor & 255
1cefc     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1cf00                 | ' 
1cf00                 | ' if (oldcolor == newcolor) 
1cf00     0F 21 0A F2 | 	cmp	local02, local01 wz
1cf04                 | '   return
1cf04     70 02 90 AD |  if_e	jmp	#LR__2279
1cf08                 | ' 
1cf08                 | ' fillptr:=0
1cf08     0B 00 00 FF 
1cf0c     BA E4 05 F1 | 	add	objptr, ##5818
1cf10     F2 00 68 FC | 	wrlong	#0, objptr
1cf14                 | ' fillmax:=0
1cf14     04 E4 05 F1 | 	add	objptr, #4
1cf18     F2 00 68 FC | 	wrlong	#0, objptr
1cf1c     0B 00 00 FF 
1cf20     BE E4 85 F1 | 	sub	objptr, ##5822
1cf24                 | ' fillpush(x)
1cf24     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1cf28                 | ' fillpush(y)
1cf28     0A 13 02 F6 | 	mov	arg01, arg02
1cf2c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1cf30                 | ' y:=fillpop()
1cf30     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1cf34     FD 22 02 F6 | 	mov	local03, result1
1cf38                 | ' x:=fillpop()
1cf38     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1cf3c     FD 24 02 F6 | 	mov	local04, result1
1cf40                 | ' 'pinhigh(38)
1cf40                 | ' repeat while (x>-1)       
1cf40                 | LR__2270
1cf40     00 24 56 F2 | 	cmps	local04, #0 wc
1cf44     30 02 90 CD |  if_b	jmp	#LR__2278
1cf48                 | '  ' pintoggle(39)
1cf48                 | '   x1 := x
1cf48     12 27 02 F6 | 	mov	local05, local04
1cf4c                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1cf4c                 | LR__2271
1cf4c     00 28 06 F6 | 	mov	local06, #0
1cf50     00 2A 06 F6 | 	mov	local07, #0
1cf54     00 26 56 F2 | 	cmps	local05, #0 wc
1cf58     01 2A 66 36 |  if_ae	neg	local07, #1
1cf5c     00 2A 0E F2 | 	cmp	local07, #0 wz
1cf60     00 28 26 56 |  if_ne	not	local06, #0
1cf64     00 2C 06 F6 | 	mov	local08, #0
1cf68     00 2E 06 F6 | 	mov	local09, #0
1cf6c     11 15 02 F6 | 	mov	arg02, local03
1cf70     13 13 02 F6 | 	mov	arg01, local05
1cf74     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cf78     10 FB 09 F2 | 	cmp	result1, local02 wz
1cf7c     00 2E 26 A6 |  if_e	not	local09, #0
1cf80     00 2E 0E F2 | 	cmp	local09, #0 wz
1cf84     00 2C 26 56 |  if_ne	not	local08, #0
1cf88     16 29 CA F7 | 	test	local06, local08 wz
1cf8c                 | '     x1--
1cf8c     01 26 86 51 |  if_ne	sub	local05, #1
1cf90     B8 FF 9F 5D |  if_ne	jmp	#LR__2271
1cf94                 | '   x1++
1cf94     01 26 06 F1 | 	add	local05, #1
1cf98                 | '   spanabove := 0
1cf98     00 30 06 F6 | 	mov	local10, #0
1cf9c                 | '   spanbelow := 0
1cf9c     00 32 06 F6 | 	mov	local11, #0
1cfa0                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1cfa0                 | LR__2272
1cfa0     00 28 06 F6 | 	mov	local06, #0
1cfa4     02 00 00 FF 
1cfa8     00 26 56 F2 | 	cmps	local05, ##1024 wc
1cfac     00 28 26 C6 |  if_b	not	local06, #0
1cfb0     00 2C 06 F6 | 	mov	local08, #0
1cfb4     00 2E 06 F6 | 	mov	local09, #0
1cfb8     11 15 02 F6 | 	mov	arg02, local03
1cfbc     13 13 02 F6 | 	mov	arg01, local05
1cfc0     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cfc4     10 FB 09 F2 | 	cmp	result1, local02 wz
1cfc8     00 2E 26 A6 |  if_e	not	local09, #0
1cfcc     00 2E 0E F2 | 	cmp	local09, #0 wz
1cfd0     00 2C 26 56 |  if_ne	not	local08, #0
1cfd4     16 29 CA F7 | 	test	local06, local08 wz
1cfd8     88 01 90 AD |  if_e	jmp	#LR__2277
1cfdc                 | '     putpixel2 (x1,y, newcolor & 255)
1cfdc     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1cfe0     13 13 02 F6 | 	mov	arg01, local05
1cfe4     11 15 02 F6 | 	mov	arg02, local03
1cfe8     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1cfec                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1cfec     00 28 06 F6 | 	mov	local06, #0
1cff0     00 2A 06 F6 | 	mov	local07, #0
1cff4     00 30 0E F2 | 	cmp	local10, #0 wz
1cff8     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1cffc     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1d000     00 2A 0E F2 | 	cmp	local07, #0 wz
1d004     00 28 26 56 |  if_ne	not	local06, #0
1d008     00 2C 06 F6 | 	mov	local08, #0
1d00c     00 2E 06 F6 | 	mov	local09, #0
1d010     11 15 02 F6 | 	mov	arg02, local03
1d014     01 14 86 F1 | 	sub	arg02, #1
1d018     13 13 02 F6 | 	mov	arg01, local05
1d01c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1d020     10 FB 09 F2 | 	cmp	result1, local02 wz
1d024     00 2E 26 A6 |  if_e	not	local09, #0
1d028     00 2E 0E F2 | 	cmp	local09, #0 wz
1d02c     00 2C 26 56 |  if_ne	not	local08, #0
1d030     16 29 CA F7 | 	test	local06, local08 wz
1d034     1C 00 90 AD |  if_e	jmp	#LR__2273
1d038                 | '       fillpush(x1)
1d038     13 13 02 F6 | 	mov	arg01, local05
1d03c     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1d040                 | '       fillpush(y-1)
1d040     11 13 02 F6 | 	mov	arg01, local03
1d044     01 12 86 F1 | 	sub	arg01, #1
1d048     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1d04c                 | '       spanabove := 1 
1d04c     01 30 06 F6 | 	mov	local10, #1
1d050     4C 00 90 FD | 	jmp	#LR__2274
1d054                 | LR__2273
1d054                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1d054     00 28 06 F6 | 	mov	local06, #0
1d058     00 2A 06 F6 | 	mov	local07, #0
1d05c     00 30 0E F2 | 	cmp	local10, #0 wz
1d060     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1d064     01 2A 66 16 |  if_a	neg	local07, #1
1d068     00 2A 0E F2 | 	cmp	local07, #0 wz
1d06c     00 28 26 56 |  if_ne	not	local06, #0
1d070     00 2C 06 F6 | 	mov	local08, #0
1d074     00 2E 06 F6 | 	mov	local09, #0
1d078     11 15 02 F6 | 	mov	arg02, local03
1d07c     01 14 86 F1 | 	sub	arg02, #1
1d080     13 13 02 F6 | 	mov	arg01, local05
1d084     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1d088     10 FB 09 F2 | 	cmp	result1, local02 wz
1d08c     00 2E 26 56 |  if_ne	not	local09, #0
1d090     00 2E 0E F2 | 	cmp	local09, #0 wz
1d094     00 2C 26 56 |  if_ne	not	local08, #0
1d098     16 29 CA F7 | 	test	local06, local08 wz
1d09c                 | '       spanabove := 0 
1d09c     00 30 06 56 |  if_ne	mov	local10, #0
1d0a0                 | LR__2274
1d0a0                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1d0a0     00 28 06 F6 | 	mov	local06, #0
1d0a4     00 2A 06 F6 | 	mov	local07, #0
1d0a8     00 32 0E F2 | 	cmp	local11, #0 wz
1d0ac     01 00 00 AF 
1d0b0     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1d0b4     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1d0b8     00 2A 0E F2 | 	cmp	local07, #0 wz
1d0bc     00 28 26 56 |  if_ne	not	local06, #0
1d0c0     00 2C 06 F6 | 	mov	local08, #0
1d0c4     00 2E 06 F6 | 	mov	local09, #0
1d0c8     11 15 02 F6 | 	mov	arg02, local03
1d0cc     01 14 06 F1 | 	add	arg02, #1
1d0d0     13 13 02 F6 | 	mov	arg01, local05
1d0d4     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1d0d8     10 FB 09 F2 | 	cmp	result1, local02 wz
1d0dc     00 2E 26 A6 |  if_e	not	local09, #0
1d0e0     00 2E 0E F2 | 	cmp	local09, #0 wz
1d0e4     00 2C 26 56 |  if_ne	not	local08, #0
1d0e8     16 29 CA F7 | 	test	local06, local08 wz
1d0ec     1C 00 90 AD |  if_e	jmp	#LR__2275
1d0f0                 | '       fillpush(x1)
1d0f0     13 13 02 F6 | 	mov	arg01, local05
1d0f4     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1d0f8                 | '       fillpush(y + 1)
1d0f8     11 13 02 F6 | 	mov	arg01, local03
1d0fc     01 12 06 F1 | 	add	arg01, #1
1d100     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1d104                 | '       spanBelow := 1
1d104     01 32 06 F6 | 	mov	local11, #1
1d108     50 00 90 FD | 	jmp	#LR__2276
1d10c                 | LR__2275
1d10c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1d10c     00 28 06 F6 | 	mov	local06, #0
1d110     00 2A 06 F6 | 	mov	local07, #0
1d114     00 32 0E F2 | 	cmp	local11, #0 wz
1d118     01 00 00 5F 
1d11c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1d120     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1d124     00 2A 0E F2 | 	cmp	local07, #0 wz
1d128     00 28 26 56 |  if_ne	not	local06, #0
1d12c     00 2C 06 F6 | 	mov	local08, #0
1d130     00 2E 06 F6 | 	mov	local09, #0
1d134     11 15 02 F6 | 	mov	arg02, local03
1d138     01 14 06 F1 | 	add	arg02, #1
1d13c     13 13 02 F6 | 	mov	arg01, local05
1d140     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1d144     10 FB 09 F2 | 	cmp	result1, local02 wz
1d148     00 2E 26 56 |  if_ne	not	local09, #0
1d14c     00 2E 0E F2 | 	cmp	local09, #0 wz
1d150     00 2C 26 56 |  if_ne	not	local08, #0
1d154     16 29 CA F7 | 	test	local06, local08 wz
1d158                 | '       spanbelow := 0
1d158     00 32 06 56 |  if_ne	mov	local11, #0
1d15c                 | LR__2276
1d15c                 | '     x1++
1d15c     01 26 06 F1 | 	add	local05, #1
1d160     3C FE 9F FD | 	jmp	#LR__2272
1d164                 | LR__2277
1d164                 | '   y:=fillpop()
1d164     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1d168     FD 22 02 F6 | 	mov	local03, result1
1d16c                 | '   x:=fillpop()
1d16c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1d170     FD 24 02 F6 | 	mov	local04, result1
1d174     C8 FD 9F FD | 	jmp	#LR__2270
1d178                 | LR__2278
1d178                 | LR__2279
1d178     A7 F0 03 F6 | 	mov	ptra, fp
1d17c     B2 00 A0 FD | 	call	#popregs_
1d180                 | _hg010b_spin2_fill_ret
1d180     2D 00 64 FD | 	ret
1d184                 | 
1d184                 | ' 'pinlow(38)    
1d184                 | ' 
1d184                 | ' '-- A filled circle -----------------------------------------------------
1d184                 | ' 
1d184                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1d184                 | _hg010b_spin2_fcircle
1d184     08 4A 05 F6 | 	mov	COUNT_, #8
1d188     A8 00 A0 FD | 	call	#pushregs_
1d18c     0B 1F 02 F6 | 	mov	local01, arg03
1d190     FF FF 7F FF 
1d194     FE 1F 06 FD | 	qmul	local01, ##-2
1d198     09 21 02 F6 | 	mov	local02, arg01
1d19c     0A 23 02 F6 | 	mov	local03, arg02
1d1a0     0C 25 02 F6 | 	mov	local04, arg04
1d1a4                 | ' 
1d1a4                 | ' d:=5-4*r
1d1a4     0F 19 02 F6 | 	mov	arg04, local01
1d1a8     02 18 66 F0 | 	shl	arg04, #2
1d1ac     05 26 06 F6 | 	mov	local05, #5
1d1b0     0C 27 82 F1 | 	sub	local05, arg04
1d1b4                 | ' x:=0
1d1b4     00 28 06 F6 | 	mov	local06, #0
1d1b8                 | ' y:=r
1d1b8                 | ' da:=(-2*r+5)*4
1d1b8                 | ' db:=3*4
1d1b8     0C 2A 06 F6 | 	mov	local07, #12
1d1bc                 | ' repeat while (x<=y) 
1d1bc     18 2C 62 FD | 	getqx	local08
1d1c0     05 2C 06 F1 | 	add	local08, #5
1d1c4     02 2C 66 F0 | 	shl	local08, #2
1d1c8                 | LR__2280
1d1c8     0F 29 5A F2 | 	cmps	local06, local01 wcz
1d1cc     B4 00 90 1D |  if_a	jmp	#LR__2282
1d1d0                 | '   fastline(x0-x,x0+x,y0-y,c)
1d1d0     10 13 02 F6 | 	mov	arg01, local02
1d1d4     14 13 82 F1 | 	sub	arg01, local06
1d1d8     10 15 02 F6 | 	mov	arg02, local02
1d1dc     14 15 02 F1 | 	add	arg02, local06
1d1e0     11 17 02 F6 | 	mov	arg03, local03
1d1e4     0F 17 82 F1 | 	sub	arg03, local01
1d1e8     12 19 02 F6 | 	mov	arg04, local04
1d1ec     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1d1f0                 | '   fastline(x0-x,x0+x,y0+y,c)
1d1f0     10 13 02 F6 | 	mov	arg01, local02
1d1f4     14 13 82 F1 | 	sub	arg01, local06
1d1f8     10 15 02 F6 | 	mov	arg02, local02
1d1fc     14 15 02 F1 | 	add	arg02, local06
1d200     11 17 02 F6 | 	mov	arg03, local03
1d204     0F 17 02 F1 | 	add	arg03, local01
1d208     12 19 02 F6 | 	mov	arg04, local04
1d20c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1d210                 | '   fastline(x0-y,x0+y,y0-x,c)
1d210     10 13 02 F6 | 	mov	arg01, local02
1d214     0F 13 82 F1 | 	sub	arg01, local01
1d218     10 15 02 F6 | 	mov	arg02, local02
1d21c     0F 15 02 F1 | 	add	arg02, local01
1d220     11 17 02 F6 | 	mov	arg03, local03
1d224     14 17 82 F1 | 	sub	arg03, local06
1d228     12 19 02 F6 | 	mov	arg04, local04
1d22c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1d230                 | '   fastline(x0-y,x0+y,y0+x,c)
1d230     10 13 02 F6 | 	mov	arg01, local02
1d234     0F 13 82 F1 | 	sub	arg01, local01
1d238     10 15 02 F6 | 	mov	arg02, local02
1d23c     0F 15 02 F1 | 	add	arg02, local01
1d240     11 17 02 F6 | 	mov	arg03, local03
1d244     14 17 02 F1 | 	add	arg03, local06
1d248     12 19 02 F6 | 	mov	arg04, local04
1d24c     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1d250                 | '   if d>0 
1d250     01 26 56 F2 | 	cmps	local05, #1 wc
1d254     18 00 90 CD |  if_b	jmp	#LR__2281
1d258                 | '     d+=da
1d258     16 27 02 F1 | 	add	local05, local08
1d25c                 | '     y-=1
1d25c     01 1E 86 F1 | 	sub	local01, #1
1d260                 | '     x+=1
1d260     01 28 06 F1 | 	add	local06, #1
1d264                 | '     da+=4*4
1d264     10 2C 06 F1 | 	add	local08, #16
1d268                 | '     db+=2*4
1d268     08 2A 06 F1 | 	add	local07, #8
1d26c     58 FF 9F FD | 	jmp	#LR__2280
1d270                 | LR__2281
1d270                 | '   else
1d270                 | '     d+=db
1d270     15 27 02 F1 | 	add	local05, local07
1d274                 | '     x+=1
1d274     01 28 06 F1 | 	add	local06, #1
1d278                 | '     da+=2*4
1d278     08 2C 06 F1 | 	add	local08, #8
1d27c                 | '     db+=2*4
1d27c     08 2A 06 F1 | 	add	local07, #8
1d280     44 FF 9F FD | 	jmp	#LR__2280
1d284                 | LR__2282
1d284     A7 F0 03 F6 | 	mov	ptra, fp
1d288     B2 00 A0 FD | 	call	#popregs_
1d28c                 | _hg010b_spin2_fcircle_ret
1d28c     2D 00 64 FD | 	ret
1d290                 | 
1d290                 | '  
1d290                 | ' '-- A circle ------------------------------------------------------------ 
1d290                 | '  
1d290                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1d290                 | _hg010b_spin2_circle
1d290     08 4A 05 F6 | 	mov	COUNT_, #8
1d294     A8 00 A0 FD | 	call	#pushregs_
1d298     0B 1F 02 F6 | 	mov	local01, arg03
1d29c     FF FF 7F FF 
1d2a0     FE 1F 06 FD | 	qmul	local01, ##-2
1d2a4     09 21 02 F6 | 	mov	local02, arg01
1d2a8     0A 23 02 F6 | 	mov	local03, arg02
1d2ac     0C 25 02 F6 | 	mov	local04, arg04
1d2b0                 | ' 
1d2b0                 | '  
1d2b0                 | ' d:=5-4*r
1d2b0     0F 19 02 F6 | 	mov	arg04, local01
1d2b4     02 18 66 F0 | 	shl	arg04, #2
1d2b8     05 26 06 F6 | 	mov	local05, #5
1d2bc     0C 27 82 F1 | 	sub	local05, arg04
1d2c0                 | ' x:=0
1d2c0     00 28 06 F6 | 	mov	local06, #0
1d2c4                 | ' y:=r
1d2c4                 | ' da:=(-2*r+5)*4
1d2c4                 | ' db:=3*4
1d2c4     0C 2A 06 F6 | 	mov	local07, #12
1d2c8                 | ' repeat while (x<=y) 
1d2c8     18 2C 62 FD | 	getqx	local08
1d2cc     05 2C 06 F1 | 	add	local08, #5
1d2d0     02 2C 66 F0 | 	shl	local08, #2
1d2d4                 | LR__2290
1d2d4     0F 29 5A F2 | 	cmps	local06, local01 wcz
1d2d8     F4 00 90 1D |  if_a	jmp	#LR__2292
1d2dc                 | '   putpixel(x0-x,y0-y,c)
1d2dc     10 13 02 F6 | 	mov	arg01, local02
1d2e0     14 13 82 F1 | 	sub	arg01, local06
1d2e4     11 15 02 F6 | 	mov	arg02, local03
1d2e8     0F 15 82 F1 | 	sub	arg02, local01
1d2ec     12 17 02 F6 | 	mov	arg03, local04
1d2f0     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d2f4                 | '   putpixel(x0-x,y0+y,c)
1d2f4     10 13 02 F6 | 	mov	arg01, local02
1d2f8     14 13 82 F1 | 	sub	arg01, local06
1d2fc     11 15 02 F6 | 	mov	arg02, local03
1d300     0F 15 02 F1 | 	add	arg02, local01
1d304     12 17 02 F6 | 	mov	arg03, local04
1d308     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d30c                 | '   putpixel(x0+x,y0-y,c)
1d30c     10 13 02 F6 | 	mov	arg01, local02
1d310     14 13 02 F1 | 	add	arg01, local06
1d314     11 15 02 F6 | 	mov	arg02, local03
1d318     0F 15 82 F1 | 	sub	arg02, local01
1d31c     12 17 02 F6 | 	mov	arg03, local04
1d320     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d324                 | '   putpixel(x0+x,y0+y,c)
1d324     10 13 02 F6 | 	mov	arg01, local02
1d328     14 13 02 F1 | 	add	arg01, local06
1d32c     11 15 02 F6 | 	mov	arg02, local03
1d330     0F 15 02 F1 | 	add	arg02, local01
1d334     12 17 02 F6 | 	mov	arg03, local04
1d338     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d33c                 | '   putpixel(x0-y,y0-x,c)
1d33c     10 13 02 F6 | 	mov	arg01, local02
1d340     0F 13 82 F1 | 	sub	arg01, local01
1d344     11 15 02 F6 | 	mov	arg02, local03
1d348     14 15 82 F1 | 	sub	arg02, local06
1d34c     12 17 02 F6 | 	mov	arg03, local04
1d350     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d354                 | '   putpixel(x0-y,y0+x,c)
1d354     10 13 02 F6 | 	mov	arg01, local02
1d358     0F 13 82 F1 | 	sub	arg01, local01
1d35c     11 15 02 F6 | 	mov	arg02, local03
1d360     14 15 02 F1 | 	add	arg02, local06
1d364     12 17 02 F6 | 	mov	arg03, local04
1d368     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d36c                 | '   putpixel(x0+y,y0-x,c)
1d36c     10 13 02 F6 | 	mov	arg01, local02
1d370     0F 13 02 F1 | 	add	arg01, local01
1d374     11 15 02 F6 | 	mov	arg02, local03
1d378     14 15 82 F1 | 	sub	arg02, local06
1d37c     12 17 02 F6 | 	mov	arg03, local04
1d380     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d384                 | '   putpixel(x0+y,y0+x,c)
1d384     10 13 02 F6 | 	mov	arg01, local02
1d388     0F 13 02 F1 | 	add	arg01, local01
1d38c     11 15 02 F6 | 	mov	arg02, local03
1d390     14 15 02 F1 | 	add	arg02, local06
1d394     12 17 02 F6 | 	mov	arg03, local04
1d398     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d39c                 | '   if d>0 
1d39c     01 26 56 F2 | 	cmps	local05, #1 wc
1d3a0     18 00 90 CD |  if_b	jmp	#LR__2291
1d3a4                 | '     d+=da
1d3a4     16 27 02 F1 | 	add	local05, local08
1d3a8                 | '     y-=1
1d3a8     01 1E 86 F1 | 	sub	local01, #1
1d3ac                 | '     x+=1
1d3ac     01 28 06 F1 | 	add	local06, #1
1d3b0                 | '     da+=4*4
1d3b0     10 2C 06 F1 | 	add	local08, #16
1d3b4                 | '     db+=2*4
1d3b4     08 2A 06 F1 | 	add	local07, #8
1d3b8     18 FF 9F FD | 	jmp	#LR__2290
1d3bc                 | LR__2291
1d3bc                 | '   else
1d3bc                 | '     d+=db
1d3bc     15 27 02 F1 | 	add	local05, local07
1d3c0                 | '     x+=1
1d3c0     01 28 06 F1 | 	add	local06, #1
1d3c4                 | '     da+=2*4
1d3c4     08 2C 06 F1 | 	add	local08, #8
1d3c8                 | '     db+=2*4
1d3c8     08 2A 06 F1 | 	add	local07, #8
1d3cc     04 FF 9F FD | 	jmp	#LR__2290
1d3d0                 | LR__2292
1d3d0     A7 F0 03 F6 | 	mov	ptra, fp
1d3d4     B2 00 A0 FD | 	call	#popregs_
1d3d8                 | _hg010b_spin2_circle_ret
1d3d8     2D 00 64 FD | 	ret
1d3dc                 | 
1d3dc                 | '     
1d3dc                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1d3dc                 | ' 
1d3dc                 | ' pub frame(x1,y1,x2,y2,c)
1d3dc                 | _hg010b_spin2_frame
1d3dc     05 4A 05 F6 | 	mov	COUNT_, #5
1d3e0     A8 00 A0 FD | 	call	#pushregs_
1d3e4     09 1F 02 F6 | 	mov	local01, arg01
1d3e8     0A 21 02 F6 | 	mov	local02, arg02
1d3ec     0B 23 02 F6 | 	mov	local03, arg03
1d3f0     0C 25 02 F6 | 	mov	local04, arg04
1d3f4     0D 27 02 F6 | 	mov	local05, arg05
1d3f8                 | ' 
1d3f8                 | ' fastline(x1,x2,y1,c)
1d3f8     0F 13 02 F6 | 	mov	arg01, local01
1d3fc     11 15 02 F6 | 	mov	arg02, local03
1d400     10 17 02 F6 | 	mov	arg03, local02
1d404     13 19 02 F6 | 	mov	arg04, local05
1d408     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1d40c                 | ' fastline(x1,x2,y2,c)
1d40c     0F 13 02 F6 | 	mov	arg01, local01
1d410     11 15 02 F6 | 	mov	arg02, local03
1d414     12 17 02 F6 | 	mov	arg03, local04
1d418     13 19 02 F6 | 	mov	arg04, local05
1d41c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d420                 | ' line(x1,y1,x1,y2,c)
1d420     0F 13 02 F6 | 	mov	arg01, local01
1d424     10 15 02 F6 | 	mov	arg02, local02
1d428     0F 17 02 F6 | 	mov	arg03, local01
1d42c     12 19 02 F6 | 	mov	arg04, local04
1d430     13 1B 02 F6 | 	mov	arg05, local05
1d434                 | ' draw(x1,y1,x2,y2,c)
1d434     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1d438                 | ' line(x2,y1,x2,y2,c)
1d438     11 13 02 F6 | 	mov	arg01, local03
1d43c     10 15 02 F6 | 	mov	arg02, local02
1d440     11 17 02 F6 | 	mov	arg03, local03
1d444     12 19 02 F6 | 	mov	arg04, local04
1d448     13 1B 02 F6 | 	mov	arg05, local05
1d44c                 | ' draw(x1,y1,x2,y2,c)
1d44c     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1d450     A7 F0 03 F6 | 	mov	ptra, fp
1d454     B2 00 A0 FD | 	call	#popregs_
1d458                 | _hg010b_spin2_frame_ret
1d458     2D 00 64 FD | 	ret
1d45c                 | 
1d45c                 | ' 
1d45c                 | ' '-- A box (a filled rectangle) ----------------------------------------
1d45c                 | ' 
1d45c                 | ' pub box(x1,y1,x2,y2,c) |yy
1d45c                 | _hg010b_spin2_box
1d45c     06 4A 05 F6 | 	mov	COUNT_, #6
1d460     A8 00 A0 FD | 	call	#pushregs_
1d464     09 1F 02 F6 | 	mov	local01, arg01
1d468     0A 21 02 F6 | 	mov	local02, arg02
1d46c     0B 23 02 F6 | 	mov	local03, arg03
1d470     0C 25 02 F6 | 	mov	local04, arg04
1d474     0D 27 02 F6 | 	mov	local05, arg05
1d478                 | ' 
1d478                 | ' repeat yy from y1 to y2
1d478     10 25 52 F2 | 	cmps	local04, local02 wc
1d47c     01 28 86 F6 | 	negc	local06, #1
1d480     14 25 02 F1 | 	add	local04, local06
1d484                 | LR__2300
1d484                 | '   fastline(x1,x2,yy,c)
1d484     0F 13 02 F6 | 	mov	arg01, local01
1d488     11 15 02 F6 | 	mov	arg02, local03
1d48c     13 19 02 F6 | 	mov	arg04, local05
1d490     10 17 02 F6 | 	mov	arg03, local02
1d494     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d498     14 21 02 F1 | 	add	local02, local06
1d49c     12 21 0A F2 | 	cmp	local02, local04 wz
1d4a0     E0 FF 9F 5D |  if_ne	jmp	#LR__2300
1d4a4     A7 F0 03 F6 | 	mov	ptra, fp
1d4a8     B2 00 A0 FD | 	call	#popregs_
1d4ac                 | _hg010b_spin2_box_ret
1d4ac     2D 00 64 FD | 	ret
1d4b0                 | 
1d4b0                 | '       
1d4b0                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1d4b0                 | _hg010b_spin2_putcharxycgf
1d4b0                 | ' 
1d4b0                 | '  
1d4b0                 | ' repeat yy from 0 to 15
1d4b0     00 00 06 F6 | 	mov	_var01, #0
1d4b4     97 8C 48 FB | 	callpa	#(@LR__2312-@LR__2310)>>2,fcache_load_ptr_
1d4b8                 | LR__2310
1d4b8                 | ' 
1d4b8                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1d4b8     95 E4 05 F1 | 	add	objptr, #149
1d4bc     F2 02 02 FB | 	rdlong	_var02, objptr
1d4c0     0A 02 66 F0 | 	shl	_var02, #10
1d4c4     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1d4c8     01 05 02 F1 | 	add	_var03, _var02
1d4cc     0B 03 02 F6 | 	mov	_var02, arg03
1d4d0     04 02 66 F0 | 	shl	_var02, #4
1d4d4     01 05 02 F1 | 	add	_var03, _var02
1d4d8     00 05 02 F1 | 	add	_var03, _var01
1d4dc     02 05 C2 FA | 	rdbyte	_var03, _var03
1d4e0                 | '   asm
1d4e0     00 04 0E F4 | 	testb	_var03, #0 wz
1d4e4     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1d4e8     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1d4ec     01 04 0E F4 | 	testb	_var03, #1 wz
1d4f0     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1d4f4     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1d4f8     02 04 0E F4 | 	testb	_var03, #2 wz
1d4fc     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1d500     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1d504     03 04 0E F4 | 	testb	_var03, #3 wz
1d508     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1d50c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1d510     04 04 0E F4 | 	testb	_var03, #4 wz
1d514     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1d518     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1d51c     05 04 0E F4 | 	testb	_var03, #5 wz
1d520     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1d524     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1d528     06 04 0E F4 | 	testb	_var03, #6 wz
1d52c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1d530     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1d534     07 04 0E F4 | 	testb	_var03, #7 wz
1d538     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1d53c     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1d540                 | '   
1d540                 | '   ccc[0]:=c1
1d540     99 E5 05 F1 | 	add	objptr, #409
1d544     F2 06 62 FC | 	wrlong	_var04, objptr
1d548                 | '   ccc[1]:=c2 
1d548     04 E4 05 F1 | 	add	objptr, #4
1d54c     F2 08 62 FC | 	wrlong	_var05, objptr
1d550                 | '   long[mailbox0][2]:=8
1d550     49 E4 85 F1 | 	sub	objptr, #73
1d554     F2 04 02 FB | 	rdlong	_var03, objptr
1d558     08 04 06 F1 | 	add	_var03, #8
1d55c     02 11 68 FC | 	wrlong	#8, _var03
1d560                 | '   long[mailbox0][1]:=@ccc
1d560     45 E4 05 F1 | 	add	objptr, #69
1d564     F2 04 02 F6 | 	mov	_var03, objptr
1d568     45 E4 85 F1 | 	sub	objptr, #69
1d56c     F2 02 02 FB | 	rdlong	_var02, objptr
1d570     04 02 06 F1 | 	add	_var02, #4
1d574     01 05 62 FC | 	wrlong	_var03, _var02
1d578                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1d578     0C E5 85 F1 | 	sub	objptr, #268
1d57c     F2 04 02 FB | 	rdlong	_var03, objptr
1d580     0A 03 02 F6 | 	mov	_var02, arg02
1d584     00 03 02 F1 | 	add	_var02, _var01
1d588     0A 02 66 F0 | 	shl	_var02, #10
1d58c     09 0B 02 F6 | 	mov	_var06, arg01
1d590     02 0A 66 F0 | 	shl	_var06, #2
1d594     05 03 02 F1 | 	add	_var02, _var06
1d598     01 05 02 F1 | 	add	_var03, _var02
1d59c     00 00 78 FF 
1d5a0     00 04 06 F1 | 	add	_var03, ##-268435456
1d5a4     0C E5 05 F1 | 	add	objptr, #268
1d5a8     F2 0A 02 FB | 	rdlong	_var06, objptr
1d5ac     05 05 62 FC | 	wrlong	_var03, _var06
1d5b0                 | '   repeat
1d5b0                 | LR__2311
1d5b0     F2 04 02 FB | 	rdlong	_var03, objptr
1d5b4     02 03 02 FB | 	rdlong	_var02, _var03
1d5b8     00 02 56 F2 | 	cmps	_var02, #0 wc
1d5bc     F0 FF 9F CD |  if_b	jmp	#LR__2311
1d5c0     E9 E5 85 F1 | 	sub	objptr, #489
1d5c4     01 00 06 F1 | 	add	_var01, #1
1d5c8     10 00 56 F2 | 	cmps	_var01, #16 wc
1d5cc     E8 FE 9F CD |  if_b	jmp	#LR__2310
1d5d0                 | LR__2312
1d5d0                 | _hg010b_spin2_putcharxycgf_ret
1d5d0     2D 00 64 FD | 	ret
1d5d4                 | 
1d5d4                 | ' 
1d5d4                 | ' 
1d5d4                 | ' '**********************************************************************r***
1d5d4                 | ' '                                                                        *
1d5d4                 | ' ' Font related functions                                                 *
1d5d4                 | ' '                                                                        *
1d5d4                 | ' '*************************************************************************
1d5d4                 | ' 
1d5d4                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1d5d4                 | ' 
1d5d4                 | ' pub setfontfamily(afontnum)
1d5d4                 | _hg010b_spin2_setfontfamily
1d5d4                 | ' 
1d5d4                 | ' font_family:=afontnum
1d5d4     95 E4 05 F1 | 	add	objptr, #149
1d5d8     F2 12 62 FC | 	wrlong	arg01, objptr
1d5dc     95 E4 85 F1 | 	sub	objptr, #149
1d5e0                 | ' 'if afontnum==8
1d5e0                 | ' '  font_ptr:=@amiga_font
1d5e0                 | ' 
1d5e0                 | ' if afontnum==4
1d5e0     04 12 0E F2 | 	cmp	arg01, #4 wz
1d5e4                 | '   font_ptr:=@st_font
1d5e4     08 00 00 AF 
1d5e8     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1d5ec     08 E4 05 A1 |  if_e	add	objptr, #8
1d5f0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d5f4     08 E4 85 A1 |  if_e	sub	objptr, #8
1d5f8     08 00 00 AF 
1d5fc     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1d600                 | ' if afontnum==0
1d600     00 12 0E F2 | 	cmp	arg01, #0 wz
1d604                 | '   font_ptr:=@vga_font
1d604     08 E4 05 A1 |  if_e	add	objptr, #8
1d608     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d60c     08 E4 85 A1 |  if_e	sub	objptr, #8
1d610                 | _hg010b_spin2_setfontfamily_ret
1d610     2D 00 64 FD | 	ret
1d614                 | 
1d614                 | ' 
1d614                 | ' '*************************************************************************
1d614                 | ' '                                                                        *
1d614                 | ' '  Cursor functions                                                      *
1d614                 | ' '                                                                        *
1d614                 | ' '*************************************************************************
1d614                 | ' 
1d614                 | ' 
1d614                 | ' pub setcursorpos(x,y)
1d614                 | _hg010b_spin2_setcursorpos
1d614                 | ' 
1d614                 | ' ''---------- Set the (x,y) position of cursor
1d614                 | ' 
1d614                 | ' cursor_x:=x
1d614     3C E4 05 F1 | 	add	objptr, #60
1d618     F2 12 52 FC | 	wrword	arg01, objptr
1d61c                 | ' cursor_y:=y
1d61c     02 E4 05 F1 | 	add	objptr, #2
1d620     F2 14 42 FC | 	wrbyte	arg02, objptr
1d624                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d624     02 E4 85 F1 | 	sub	objptr, #2
1d628     F2 14 E2 FA | 	rdword	arg02, objptr
1d62c     02 14 66 F0 | 	shl	arg02, #2
1d630     02 E4 05 F1 | 	add	objptr, #2
1d634     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d638     3E E4 85 F1 | 	sub	objptr, #62
1d63c     04 16 66 F0 | 	shl	arg03, #4
1d640     04 16 06 F1 | 	add	arg03, #4
1d644     11 12 06 F6 | 	mov	arg01, #17
1d648     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d64c                 | _hg010b_spin2_setcursorpos_ret
1d64c     2D 00 64 FD | 	ret
1d650                 | 
1d650                 | ' 
1d650                 | ' pub setcursorx(x)
1d650                 | _hg010b_spin2_setcursorx
1d650                 | ' cursor_x:=x
1d650     3C E4 05 F1 | 	add	objptr, #60
1d654     F2 12 52 FC | 	wrword	arg01, objptr
1d658                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d658     F2 14 E2 FA | 	rdword	arg02, objptr
1d65c     02 14 66 F0 | 	shl	arg02, #2
1d660     02 E4 05 F1 | 	add	objptr, #2
1d664     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d668     3E E4 85 F1 | 	sub	objptr, #62
1d66c     04 16 66 F0 | 	shl	arg03, #4
1d670     04 16 06 F1 | 	add	arg03, #4
1d674     11 12 06 F6 | 	mov	arg01, #17
1d678     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d67c                 | _hg010b_spin2_setcursorx_ret
1d67c     2D 00 64 FD | 	ret
1d680                 | 
1d680                 | ' 
1d680                 | ' pub setcursory(y) 
1d680                 | _hg010b_spin2_setcursory
1d680                 | ' cursor_y:=y
1d680     3E E4 05 F1 | 	add	objptr, #62
1d684     F2 12 42 FC | 	wrbyte	arg01, objptr
1d688                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1d688     02 E4 85 F1 | 	sub	objptr, #2
1d68c     F2 14 E2 FA | 	rdword	arg02, objptr
1d690     02 14 66 F0 | 	shl	arg02, #2
1d694     02 E4 05 F1 | 	add	objptr, #2
1d698     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d69c     3E E4 85 F1 | 	sub	objptr, #62
1d6a0     04 16 66 F0 | 	shl	arg03, #4
1d6a4     04 16 06 F1 | 	add	arg03, #4
1d6a8     11 12 06 F6 | 	mov	arg01, #17
1d6ac     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1d6b0                 | _hg010b_spin2_setcursory_ret
1d6b0     2D 00 64 FD | 	ret
1d6b4                 | 
1d6b4                 | ' 
1d6b4                 | ' '*************************************************************************
1d6b4                 | ' '                                                                        *
1d6b4                 | ' '  VBlank functions                                                      *
1d6b4                 | ' '                                                                        *
1d6b4                 | ' '*************************************************************************
1d6b4                 | ' 
1d6b4                 | ' pub waitvbl(amount) | i
1d6b4                 | _hg010b_spin2_waitvbl
1d6b4     03 4A 05 F6 | 	mov	COUNT_, #3
1d6b8     A8 00 A0 FD | 	call	#pushregs_
1d6bc     09 1F 02 F6 | 	mov	local01, arg01
1d6c0                 | ' 
1d6c0                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1d6c0                 | ' 
1d6c0                 | ' repeat i from 1 to amount
1d6c0     01 20 06 F6 | 	mov	local02, #1
1d6c4     01 1E 56 F2 | 	cmps	local01, #1 wc
1d6c8     01 22 86 F6 | 	negc	local03, #1
1d6cc     11 1F 02 F1 | 	add	local01, local03
1d6d0                 | LR__2320
1d6d0                 | '   repeat until vblank==0
1d6d0                 | LR__2321
1d6d0     49 E4 05 F1 | 	add	objptr, #73
1d6d4     F2 12 0A FB | 	rdlong	arg01, objptr wz
1d6d8     49 E4 85 F1 | 	sub	objptr, #73
1d6dc     0C 00 90 AD |  if_e	jmp	#LR__2322
1d6e0                 | '     waitus(100)
1d6e0     64 12 06 F6 | 	mov	arg01, #100
1d6e4     44 1A B0 FD | 	call	#__system___waitus
1d6e8     E4 FF 9F FD | 	jmp	#LR__2321
1d6ec                 | LR__2322
1d6ec                 | '   repeat until vblank==1
1d6ec                 | LR__2323
1d6ec     49 E4 05 F1 | 	add	objptr, #73
1d6f0     F2 12 02 FB | 	rdlong	arg01, objptr
1d6f4     49 E4 85 F1 | 	sub	objptr, #73
1d6f8     01 12 0E F2 | 	cmp	arg01, #1 wz
1d6fc     0C 00 90 AD |  if_e	jmp	#LR__2324
1d700                 | '     waitus(100)
1d700     64 12 06 F6 | 	mov	arg01, #100
1d704     24 1A B0 FD | 	call	#__system___waitus
1d708     E0 FF 9F FD | 	jmp	#LR__2323
1d70c                 | LR__2324
1d70c     11 21 02 F1 | 	add	local02, local03
1d710     0F 21 0A F2 | 	cmp	local02, local01 wz
1d714     B8 FF 9F 5D |  if_ne	jmp	#LR__2320
1d718     A7 F0 03 F6 | 	mov	ptra, fp
1d71c     B2 00 A0 FD | 	call	#popregs_
1d720                 | _hg010b_spin2_waitvbl_ret
1d720     2D 00 64 FD | 	ret
1d724                 | 
1d724                 | ' 
1d724                 | ' 
1d724                 | ' pub cls(fc,bc)   :c,i
1d724                 | _hg010b_spin2_cls
1d724     02 4A 05 F6 | 	mov	COUNT_, #2
1d728     A8 00 A0 FD | 	call	#pushregs_
1d72c     09 1F 02 F6 | 	mov	local01, arg01
1d730     0A 21 02 F6 | 	mov	local02, arg02
1d734                 | ' 
1d734                 | ' c:=bc
1d734                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1d734     DD E4 05 F1 | 	add	objptr, #221
1d738     F2 12 02 FB | 	rdlong	arg01, objptr
1d73c     A5 E4 85 F1 | 	sub	objptr, #165
1d740     F2 16 02 FB | 	rdlong	arg03, objptr
1d744     02 16 66 F0 | 	shl	arg03, #2
1d748     10 15 02 F6 | 	mov	arg02, local02
1d74c     00 18 06 F6 | 	mov	arg04, #0
1d750     01 1A 06 F6 | 	mov	arg05, #1
1d754     0B 00 00 FF 
1d758     94 E4 05 F1 | 	add	objptr, ##5780
1d75c     64 0B B0 FD | 	call	#_psram_spin2_fill
1d760                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1d760     0B 00 00 FF 
1d764     C8 E4 85 F1 | 	sub	objptr, ##5832
1d768     F2 12 02 FB | 	rdlong	arg01, objptr
1d76c     04 E4 85 F1 | 	sub	objptr, #4
1d770     F2 16 02 FB | 	rdlong	arg03, objptr
1d774     09 17 82 F1 | 	sub	arg03, arg01
1d778     20 14 06 F6 | 	mov	arg02, #32
1d77c     00 18 06 F6 | 	mov	arg04, #0
1d780     01 1A 06 F6 | 	mov	arg05, #1
1d784     0B 00 00 FF 
1d788     CC E4 05 F1 | 	add	objptr, ##5836
1d78c     34 0B B0 FD | 	call	#_psram_spin2_fill
1d790                 | ' setwritecolors(fc,bc)
1d790                 | ' 
1d790                 | ' write_color:=ff
1d790     0B 00 00 FF 
1d794     8B E4 85 F1 | 	sub	objptr, ##5771
1d798     F2 1E 62 FC | 	wrlong	local01, objptr
1d79c                 | ' write_background:=bb
1d79c     04 E4 05 F1 | 	add	objptr, #4
1d7a0     F2 20 62 FC | 	wrlong	local02, objptr
1d7a4                 | ' cursor_x:=0
1d7a4     09 E4 85 F1 | 	sub	objptr, #9
1d7a8     F2 00 58 FC | 	wrword	#0, objptr
1d7ac                 | ' cursor_y:=0
1d7ac     02 E4 05 F1 | 	add	objptr, #2
1d7b0     F2 00 48 FC | 	wrbyte	#0, objptr
1d7b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d7b4     02 E4 85 F1 | 	sub	objptr, #2
1d7b8     F2 14 E2 FA | 	rdword	arg02, objptr
1d7bc     02 14 66 F0 | 	shl	arg02, #2
1d7c0     02 E4 05 F1 | 	add	objptr, #2
1d7c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d7c8     3E E4 85 F1 | 	sub	objptr, #62
1d7cc     04 16 66 F0 | 	shl	arg03, #4
1d7d0     04 16 06 F1 | 	add	arg03, #4
1d7d4     11 12 06 F6 | 	mov	arg01, #17
1d7d8     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1d7dc                 | ' setcursorcolor(fc)
1d7dc     0F 13 02 F6 | 	mov	arg01, local01
1d7e0     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1d7e4     10 FB 01 F6 | 	mov	result1, local02
1d7e8     00 FC 05 F6 | 	mov	result2, #0
1d7ec     A7 F0 03 F6 | 	mov	ptra, fp
1d7f0     B2 00 A0 FD | 	call	#popregs_
1d7f4                 | _hg010b_spin2_cls_ret
1d7f4     2D 00 64 FD | 	ret
1d7f8                 | 
1d7f8                 | ' 
1d7f8                 | ' ''---------- Output a char at the cursor position, move the cursor 
1d7f8                 | ' 
1d7f8                 | ' pub putchar(achar) | c,x,y,l,newcpl
1d7f8                 | _hg010b_spin2_putchar
1d7f8     02 4A 05 F6 | 	mov	COUNT_, #2
1d7fc     A8 00 A0 FD | 	call	#pushregs_
1d800     09 1F 02 F6 | 	mov	local01, arg01
1d804                 | ' 
1d804                 | ' if achar==10
1d804     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d808                 | '   crlf()
1d808     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1d80c                 | ' if achar==9
1d80c     09 1E 0E F2 | 	cmp	local01, #9 wz
1d810     18 00 90 5D |  if_ne	jmp	#LR__2330
1d814                 | '   cursor_x:=(cursor_x& %11110000)+16
1d814     3C E4 05 F1 | 	add	objptr, #60
1d818     F2 16 E2 FA | 	rdword	arg03, objptr
1d81c     F0 16 06 F5 | 	and	arg03, #240
1d820     10 16 06 F1 | 	add	arg03, #16
1d824     F2 16 52 FC | 	wrword	arg03, objptr
1d828     3C E4 85 F1 | 	sub	objptr, #60
1d82c                 | LR__2330
1d82c                 | '   
1d82c                 | ' if (achar<>9) && (achar<>10) 
1d82c     09 1E 0E F2 | 	cmp	local01, #9 wz
1d830     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1d834     A8 00 90 AD |  if_e	jmp	#LR__2331
1d838                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d838     3C E4 05 F1 | 	add	objptr, #60
1d83c     F2 12 E2 FA | 	rdword	arg01, objptr
1d840     02 E4 05 F1 | 	add	objptr, #2
1d844     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d848     04 14 66 F0 | 	shl	arg02, #4
1d84c     04 14 06 F1 | 	add	arg02, #4
1d850     03 E4 05 F1 | 	add	objptr, #3
1d854     F2 18 02 FB | 	rdlong	arg04, objptr
1d858     04 E4 05 F1 | 	add	objptr, #4
1d85c     F2 1A 02 FB | 	rdlong	arg05, objptr
1d860     45 E4 85 F1 | 	sub	objptr, #69
1d864     0F 17 02 F6 | 	mov	arg03, local01
1d868     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d86c     04 E4 05 F1 | 	add	objptr, #4
1d870     F2 12 02 FB | 	rdlong	arg01, objptr
1d874     10 00 00 FF 
1d878     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d87c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d880     3A E4 05 F1 | 	add	objptr, #58
1d884     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d888     0D 17 02 FD | 	qmul	arg03, arg05
1d88c                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d88c     10 00 00 FF 
1d890     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d894     02 E4 85 F1 | 	sub	objptr, #2
1d898     F2 20 E2 FA | 	rdword	local02, objptr
1d89c     01 20 46 F0 | 	shr	local02, #1
1d8a0     0F 15 02 F6 | 	mov	arg02, local01
1d8a4     01 16 06 F6 | 	mov	arg03, #1
1d8a8     00 18 06 F6 | 	mov	arg04, #0
1d8ac     01 1A 06 F6 | 	mov	arg05, #1
1d8b0     0B 00 00 FF 
1d8b4     90 E4 05 F1 | 	add	objptr, ##5776
1d8b8     18 1E 62 FD | 	getqx	local01
1d8bc     10 1F 02 F1 | 	add	local01, local02
1d8c0     0F 13 02 F1 | 	add	arg01, local01
1d8c4     FC 09 B0 FD | 	call	#_psram_spin2_fill
1d8c8                 | '   cursor_x+=2
1d8c8     0B 00 00 FF 
1d8cc     90 E4 85 F1 | 	sub	objptr, ##5776
1d8d0     F2 20 E2 FA | 	rdword	local02, objptr
1d8d4     02 20 06 F1 | 	add	local02, #2
1d8d8     F2 20 52 FC | 	wrword	local02, objptr
1d8dc     3C E4 85 F1 | 	sub	objptr, #60
1d8e0                 | LR__2331
1d8e0                 | ' 
1d8e0                 | ' if cursor_x>=256
1d8e0     3C E4 05 F1 | 	add	objptr, #60
1d8e4     F2 20 E2 FA | 	rdword	local02, objptr
1d8e8     3C E4 85 F1 | 	sub	objptr, #60
1d8ec     00 21 56 F2 | 	cmps	local02, #256 wc
1d8f0     64 00 90 CD |  if_b	jmp	#LR__2333
1d8f4                 | '   cursor_x:=0
1d8f4     3C E4 05 F1 | 	add	objptr, #60
1d8f8     F2 00 58 FC | 	wrword	#0, objptr
1d8fc                 | '   cursor_y+=1
1d8fc     02 E4 05 F1 | 	add	objptr, #2
1d900     F2 20 C2 FA | 	rdbyte	local02, objptr
1d904     01 20 06 F1 | 	add	local02, #1
1d908     F2 20 42 FC | 	wrbyte	local02, objptr
1d90c                 | '   if cursor_y>st_lines-1
1d90c     C3 E4 05 F1 | 	add	objptr, #195
1d910     F2 20 02 FB | 	rdlong	local02, objptr
1d914     01 20 86 F1 | 	sub	local02, #1
1d918     C3 E4 85 F1 | 	sub	objptr, #195
1d91c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d920     3E E4 85 F1 | 	sub	objptr, #62
1d924     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d928     2C 00 90 ED |  if_be	jmp	#LR__2332
1d92c                 | '     scrollup2()
1d92c     00 12 06 F6 | 	mov	arg01, #0
1d930     01 00 00 FF 
1d934     58 14 06 F6 | 	mov	arg02, ##600
1d938     10 16 06 F6 | 	mov	arg03, #16
1d93c     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d940                 | '     cursor_y:=st_lines-1
1d940     01 E5 05 F1 | 	add	objptr, #257
1d944     F2 20 02 FB | 	rdlong	local02, objptr
1d948     01 20 86 F1 | 	sub	local02, #1
1d94c     C3 E4 85 F1 | 	sub	objptr, #195
1d950     F2 20 42 FC | 	wrbyte	local02, objptr
1d954     3E E4 85 F1 | 	sub	objptr, #62
1d958                 | LR__2332
1d958                 | LR__2333
1d958                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d958     3C E4 05 F1 | 	add	objptr, #60
1d95c     F2 14 E2 FA | 	rdword	arg02, objptr
1d960     02 14 66 F0 | 	shl	arg02, #2
1d964     02 E4 05 F1 | 	add	objptr, #2
1d968     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d96c     3E E4 85 F1 | 	sub	objptr, #62
1d970     04 16 66 F0 | 	shl	arg03, #4
1d974     04 16 06 F1 | 	add	arg03, #4
1d978     11 12 06 F6 | 	mov	arg01, #17
1d97c     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1d980     A7 F0 03 F6 | 	mov	ptra, fp
1d984     B2 00 A0 FD | 	call	#popregs_
1d988                 | _hg010b_spin2_putchar_ret
1d988     2D 00 64 FD | 	ret
1d98c                 | 
1d98c                 | '     
1d98c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1d98c                 | ' 
1d98c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1d98c                 | _hg010b_spin2_putchar2
1d98c     02 4A 05 F6 | 	mov	COUNT_, #2
1d990     A8 00 A0 FD | 	call	#pushregs_
1d994     09 1F 02 F6 | 	mov	local01, arg01
1d998                 | ' 
1d998                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d998     3C E4 05 F1 | 	add	objptr, #60
1d99c     F2 12 E2 FA | 	rdword	arg01, objptr
1d9a0     02 E4 05 F1 | 	add	objptr, #2
1d9a4     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d9a8     04 14 66 F0 | 	shl	arg02, #4
1d9ac     04 14 06 F1 | 	add	arg02, #4
1d9b0     03 E4 05 F1 | 	add	objptr, #3
1d9b4     F2 18 02 FB | 	rdlong	arg04, objptr
1d9b8     04 E4 05 F1 | 	add	objptr, #4
1d9bc     F2 1A 02 FB | 	rdlong	arg05, objptr
1d9c0     45 E4 85 F1 | 	sub	objptr, #69
1d9c4     0F 17 02 F6 | 	mov	arg03, local01
1d9c8     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d9cc     04 E4 05 F1 | 	add	objptr, #4
1d9d0     F2 12 02 FB | 	rdlong	arg01, objptr
1d9d4     10 00 00 FF 
1d9d8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d9dc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d9e0     3A E4 05 F1 | 	add	objptr, #58
1d9e4     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d9e8     0D 17 02 FD | 	qmul	arg03, arg05
1d9ec                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d9ec     10 00 00 FF 
1d9f0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d9f4     02 E4 85 F1 | 	sub	objptr, #2
1d9f8     F2 20 E2 FA | 	rdword	local02, objptr
1d9fc     01 20 46 F0 | 	shr	local02, #1
1da00     0F 15 02 F6 | 	mov	arg02, local01
1da04     01 16 06 F6 | 	mov	arg03, #1
1da08     00 18 06 F6 | 	mov	arg04, #0
1da0c     01 1A 06 F6 | 	mov	arg05, #1
1da10     0B 00 00 FF 
1da14     90 E4 05 F1 | 	add	objptr, ##5776
1da18     18 1E 62 FD | 	getqx	local01
1da1c     10 1F 02 F1 | 	add	local01, local02
1da20     0F 13 02 F1 | 	add	arg01, local01
1da24     9C 08 B0 FD | 	call	#_psram_spin2_fill
1da28                 | ' 
1da28                 | ' cursor_x+=2
1da28     0B 00 00 FF 
1da2c     90 E4 85 F1 | 	sub	objptr, ##5776
1da30     F2 20 E2 FA | 	rdword	local02, objptr
1da34     02 20 06 F1 | 	add	local02, #2
1da38     F2 20 52 FC | 	wrword	local02, objptr
1da3c                 | ' if cursor_x>=256
1da3c     F2 20 E2 FA | 	rdword	local02, objptr
1da40     3C E4 85 F1 | 	sub	objptr, #60
1da44     00 21 56 F2 | 	cmps	local02, #256 wc
1da48     64 00 90 CD |  if_b	jmp	#LR__2341
1da4c                 | '   cursor_x:=0
1da4c     3C E4 05 F1 | 	add	objptr, #60
1da50     F2 00 58 FC | 	wrword	#0, objptr
1da54                 | '   cursor_y+=1
1da54     02 E4 05 F1 | 	add	objptr, #2
1da58     F2 20 C2 FA | 	rdbyte	local02, objptr
1da5c     01 20 06 F1 | 	add	local02, #1
1da60     F2 20 42 FC | 	wrbyte	local02, objptr
1da64                 | '   if cursor_y>st_lines-1
1da64     C3 E4 05 F1 | 	add	objptr, #195
1da68     F2 20 02 FB | 	rdlong	local02, objptr
1da6c     01 20 86 F1 | 	sub	local02, #1
1da70     C3 E4 85 F1 | 	sub	objptr, #195
1da74     F2 16 C2 FA | 	rdbyte	arg03, objptr
1da78     3E E4 85 F1 | 	sub	objptr, #62
1da7c     10 17 5A F2 | 	cmps	arg03, local02 wcz
1da80     2C 00 90 ED |  if_be	jmp	#LR__2340
1da84                 | '     scrollup2()
1da84     00 12 06 F6 | 	mov	arg01, #0
1da88     01 00 00 FF 
1da8c     58 14 06 F6 | 	mov	arg02, ##600
1da90     10 16 06 F6 | 	mov	arg03, #16
1da94     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1da98                 | '     cursor_y:=st_lines-1
1da98     01 E5 05 F1 | 	add	objptr, #257
1da9c     F2 20 02 FB | 	rdlong	local02, objptr
1daa0     01 20 86 F1 | 	sub	local02, #1
1daa4     C3 E4 85 F1 | 	sub	objptr, #195
1daa8     F2 20 42 FC | 	wrbyte	local02, objptr
1daac     3E E4 85 F1 | 	sub	objptr, #62
1dab0                 | LR__2340
1dab0                 | LR__2341
1dab0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1dab0     3C E4 05 F1 | 	add	objptr, #60
1dab4     F2 14 E2 FA | 	rdword	arg02, objptr
1dab8     02 14 66 F0 | 	shl	arg02, #2
1dabc     02 E4 05 F1 | 	add	objptr, #2
1dac0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dac4     3E E4 85 F1 | 	sub	objptr, #62
1dac8     04 16 66 F0 | 	shl	arg03, #4
1dacc     04 16 06 F1 | 	add	arg03, #4
1dad0     11 12 06 F6 | 	mov	arg01, #17
1dad4     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1dad8     A7 F0 03 F6 | 	mov	ptra, fp
1dadc     B2 00 A0 FD | 	call	#popregs_
1dae0                 | _hg010b_spin2_putchar2_ret
1dae0     2D 00 64 FD | 	ret
1dae4                 | 
1dae4                 | ' ''--------- Output a string at the cursor position, move the cursor  
1dae4                 | ' 
1dae4                 | ' pub write(text) | iii,c,ncx,ncy
1dae4                 | _hg010b_spin2_write
1dae4     04 4A 05 F6 | 	mov	COUNT_, #4
1dae8     A8 00 A0 FD | 	call	#pushregs_
1daec     09 1F 02 F6 | 	mov	local01, arg01
1daf0                 | ' 
1daf0                 | ' repeat iii from 0 to strsize(text)-1
1daf0     00 20 06 F6 | 	mov	local02, #0
1daf4     0F 13 02 F6 | 	mov	arg01, local01
1daf8     09 23 02 F6 | 	mov	local03, arg01
1dafc     97 06 48 FB | 	callpa	#(@LR__2351-@LR__2350)>>2,fcache_load_ptr_
1db00                 | LR__2350
1db00     11 FB C9 FA | 	rdbyte	result1, local03 wz
1db04     01 22 06 51 |  if_ne	add	local03, #1
1db08     F4 FF 9F 5D |  if_ne	jmp	#LR__2350
1db0c                 | LR__2351
1db0c     09 23 82 F1 | 	sub	local03, arg01
1db10     01 22 86 F1 | 	sub	local03, #1
1db14     00 22 56 F2 | 	cmps	local03, #0 wc
1db18     01 24 86 F6 | 	negc	local04, #1
1db1c     12 23 02 F1 | 	add	local03, local04
1db20                 | LR__2352
1db20                 | '   putchar2(byte[text+iii])
1db20     0F 13 02 F6 | 	mov	arg01, local01
1db24     10 13 02 F1 | 	add	arg01, local02
1db28     09 13 C2 FA | 	rdbyte	arg01, arg01
1db2c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1db30     12 21 02 F1 | 	add	local02, local04
1db34     11 21 0A F2 | 	cmp	local02, local03 wz
1db38     E4 FF 9F 5D |  if_ne	jmp	#LR__2352
1db3c     A7 F0 03 F6 | 	mov	ptra, fp
1db40     B2 00 A0 FD | 	call	#popregs_
1db44                 | _hg010b_spin2_write_ret
1db44     2D 00 64 FD | 	ret
1db48                 | 
1db48                 | '    
1db48                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1db48                 | ' 
1db48                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1db48                 | _hg010b_spin2_scrollup2
1db48     03 4A 05 F6 | 	mov	COUNT_, #3
1db4c     A8 00 A0 FD | 	call	#pushregs_
1db50                 | ' 	
1db50                 | ' repeat i from 4 to 579 
1db50     04 1E 06 F6 | 	mov	local01, #4
1db54                 | LR__2360
1db54     F9 E4 05 F1 | 	add	objptr, #249
1db58     F2 1A 02 FB | 	rdlong	arg05, objptr
1db5c     1C E4 85 F1 | 	sub	objptr, #28
1db60     F2 14 02 FB | 	rdlong	arg02, objptr
1db64     0F 19 02 F6 | 	mov	arg04, local01
1db68     10 18 06 F1 | 	add	arg04, #16
1db6c     02 18 66 F0 | 	shl	arg04, #2
1db70     14 E4 05 F1 | 	add	objptr, #20
1db74     F2 16 02 FB | 	rdlong	arg03, objptr
1db78     0B 19 02 FD | 	qmul	arg04, arg03
1db7c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1db7c     F6 03 00 FF 
1db80     00 12 06 F6 | 	mov	arg01, ##519168
1db84     0D 13 82 F1 | 	sub	arg01, arg05
1db88     02 16 66 F0 | 	shl	arg03, #2
1db8c     0A 00 00 FF 
1db90     DB E5 05 F1 | 	add	objptr, ##5595
1db94     18 1A 62 FD | 	getqx	arg05
1db98     0D 15 02 F1 | 	add	arg02, arg05
1db9c     EC 05 B0 FD | 	call	#_psram_spin2_read1
1dba0     0A 00 00 FF 
1dba4     D3 E5 85 F1 | 	sub	objptr, ##5587
1dba8     F2 1A 02 FB | 	rdlong	arg05, objptr
1dbac     1C E4 85 F1 | 	sub	objptr, #28
1dbb0     F2 14 02 FB | 	rdlong	arg02, objptr
1dbb4     0F 19 02 F6 | 	mov	arg04, local01
1dbb8     02 18 66 F0 | 	shl	arg04, #2
1dbbc     14 E4 05 F1 | 	add	objptr, #20
1dbc0     F2 16 02 FB | 	rdlong	arg03, objptr
1dbc4     0B 19 02 FD | 	qmul	arg04, arg03
1dbc8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1dbc8     F6 03 00 FF 
1dbcc     00 12 06 F6 | 	mov	arg01, ##519168
1dbd0     0D 13 82 F1 | 	sub	arg01, arg05
1dbd4     02 16 66 F0 | 	shl	arg03, #2
1dbd8     0A 00 00 FF 
1dbdc     DB E5 05 F1 | 	add	objptr, ##5595
1dbe0     18 1A 62 FD | 	getqx	arg05
1dbe4     0D 15 02 F1 | 	add	arg02, arg05
1dbe8     3C 06 B0 FD | 	call	#_psram_spin2_write
1dbec     0B 00 00 FF 
1dbf0     CC E4 85 F1 | 	sub	objptr, ##5836
1dbf4     01 1E 06 F1 | 	add	local01, #1
1dbf8     01 00 00 FF 
1dbfc     44 1E 16 F2 | 	cmp	local01, ##580 wc
1dc00     50 FF 9F CD |  if_b	jmp	#LR__2360
1dc04                 | ' 
1dc04                 | ' repeat i from 580 to 599
1dc04     01 00 00 FF 
1dc08     44 1E 06 F6 | 	mov	local01, ##580
1dc0c                 | LR__2361
1dc0c                 | '    fastline(0,1023,i,write_background)   
1dc0c     45 E4 05 F1 | 	add	objptr, #69
1dc10     F2 18 02 FB | 	rdlong	arg04, objptr
1dc14     45 E4 85 F1 | 	sub	objptr, #69
1dc18     00 12 06 F6 | 	mov	arg01, #0
1dc1c     09 14 CE F9 | 	bmask	arg02, #9
1dc20     0F 17 02 F6 | 	mov	arg03, local01
1dc24     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1dc28     01 1E 06 F1 | 	add	local01, #1
1dc2c     01 00 00 FF 
1dc30     58 1E 16 F2 | 	cmp	local01, ##600 wc
1dc34     D4 FF 9F CD |  if_b	jmp	#LR__2361
1dc38                 | ' repeat i from 0 to 3
1dc38     00 1E 06 F6 | 	mov	local01, #0
1dc3c                 | LR__2362
1dc3c                 | '    fastline(0,1023,i,write_background)      
1dc3c     45 E4 05 F1 | 	add	objptr, #69
1dc40     F2 18 02 FB | 	rdlong	arg04, objptr
1dc44     45 E4 85 F1 | 	sub	objptr, #69
1dc48     00 12 06 F6 | 	mov	arg01, #0
1dc4c     09 14 CE F9 | 	bmask	arg02, #9
1dc50     0F 17 02 F6 | 	mov	arg03, local01
1dc54     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1dc58     01 1E 06 F1 | 	add	local01, #1
1dc5c     04 1E 56 F2 | 	cmps	local01, #4 wc
1dc60     D8 FF 9F CD |  if_b	jmp	#LR__2362
1dc64                 | ' 
1dc64                 | ' repeat i from 0 to 35
1dc64     00 1E 06 F6 | 	mov	local01, #0
1dc68                 | LR__2363
1dc68     0F 1B 02 F6 | 	mov	arg05, local01
1dc6c     01 1A 06 F1 | 	add	arg05, #1
1dc70     10 00 00 FF 
1dc74     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1dc78     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1dc7c     0B 1B 02 FD | 	qmul	arg05, arg03
1dc80                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1dc80     F6 03 00 FF 
1dc84     00 12 06 F6 | 	mov	arg01, ##519168
1dc88     F9 E4 05 F1 | 	add	objptr, #249
1dc8c     F2 1A 02 FB | 	rdlong	arg05, objptr
1dc90     0D 13 82 F1 | 	sub	arg01, arg05
1dc94     F5 E4 85 F1 | 	sub	objptr, #245
1dc98     F2 14 02 FB | 	rdlong	arg02, objptr
1dc9c     10 00 00 FF 
1dca0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dca4     0B 00 00 FF 
1dca8     C8 E4 05 F1 | 	add	objptr, ##5832
1dcac     18 1A 62 FD | 	getqx	arg05
1dcb0     0D 15 02 F1 | 	add	arg02, arg05
1dcb4     D4 04 B0 FD | 	call	#_psram_spin2_read1
1dcb8     10 00 00 FF 
1dcbc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1dcc0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1dcc4     0B 1F 02 FD | 	qmul	local01, arg03
1dcc8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1dcc8     F6 03 00 FF 
1dccc     00 12 06 F6 | 	mov	arg01, ##519168
1dcd0     0A 00 00 FF 
1dcd4     D3 E5 85 F1 | 	sub	objptr, ##5587
1dcd8     F2 1A 02 FB | 	rdlong	arg05, objptr
1dcdc     0D 13 82 F1 | 	sub	arg01, arg05
1dce0     F5 E4 85 F1 | 	sub	objptr, #245
1dce4     F2 14 02 FB | 	rdlong	arg02, objptr
1dce8     10 00 00 FF 
1dcec     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dcf0     0B 00 00 FF 
1dcf4     C8 E4 05 F1 | 	add	objptr, ##5832
1dcf8     18 1A 62 FD | 	getqx	arg05
1dcfc     0D 15 02 F1 | 	add	arg02, arg05
1dd00     24 05 B0 FD | 	call	#_psram_spin2_write
1dd04     0B 00 00 FF 
1dd08     CC E4 85 F1 | 	sub	objptr, ##5836
1dd0c     01 1E 06 F1 | 	add	local01, #1
1dd10     24 1E 56 F2 | 	cmps	local01, #36 wc
1dd14     50 FF 9F CD |  if_b	jmp	#LR__2363
1dd18                 | ' repeat i from 0 to timings[7]-1
1dd18     00 1E 06 F6 | 	mov	local01, #0
1dd1c     10 00 00 FF 
1dd20     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1dd24     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1dd28     10 00 00 FF 
1dd2c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dd30     01 20 86 F1 | 	sub	local02, #1
1dd34     00 20 56 F2 | 	cmps	local02, #0 wc
1dd38     01 22 86 F6 | 	negc	local03, #1
1dd3c     11 21 02 F1 | 	add	local02, local03
1dd40                 | LR__2364
1dd40                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1dd40     04 E4 05 F1 | 	add	objptr, #4
1dd44     F2 12 02 FB | 	rdlong	arg01, objptr
1dd48     10 00 00 FF 
1dd4c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1dd50     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1dd54     10 00 00 FF 
1dd58     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dd5c     0D 19 02 F6 | 	mov	arg04, arg05
1dd60     03 18 66 F0 | 	shl	arg04, #3
1dd64     0D 19 02 F1 | 	add	arg04, arg05
1dd68     02 18 66 F0 | 	shl	arg04, #2
1dd6c     0F 19 02 F1 | 	add	arg04, local01
1dd70     0C 13 02 F1 | 	add	arg01, arg04
1dd74     20 14 06 F6 | 	mov	arg02, #32
1dd78     01 16 06 F6 | 	mov	arg03, #1
1dd7c     00 18 06 F6 | 	mov	arg04, #0
1dd80     01 1A 06 F6 | 	mov	arg05, #1
1dd84     0B 00 00 FF 
1dd88     C8 E4 05 F1 | 	add	objptr, ##5832
1dd8c     34 05 B0 FD | 	call	#_psram_spin2_fill
1dd90     0B 00 00 FF 
1dd94     CC E4 85 F1 | 	sub	objptr, ##5836
1dd98     11 1F 02 F1 | 	add	local01, local03
1dd9c     10 1F 0A F2 | 	cmp	local01, local02 wz
1dda0     9C FF 9F 5D |  if_ne	jmp	#LR__2364
1dda4     A7 F0 03 F6 | 	mov	ptra, fp
1dda8     B2 00 A0 FD | 	call	#popregs_
1ddac                 | _hg010b_spin2_scrollup2_ret
1ddac     2D 00 64 FD | 	ret
1ddb0                 | 
1ddb0                 | ' 
1ddb0                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1ddb0                 | ' 
1ddb0                 | ' pub crlf()
1ddb0                 | _hg010b_spin2_crlf
1ddb0                 | ' 
1ddb0                 | ' cursor_x:=leading_spaces*2
1ddb0     01 00 00 FF 
1ddb4     B6 E4 05 F1 | 	add	objptr, ##694
1ddb8     F2 16 02 FB | 	rdlong	arg03, objptr
1ddbc     01 16 66 F0 | 	shl	arg03, #1
1ddc0     01 00 00 FF 
1ddc4     7A E4 85 F1 | 	sub	objptr, ##634
1ddc8     F2 16 52 FC | 	wrword	arg03, objptr
1ddcc                 | ' cursor_y+=1
1ddcc     02 E4 05 F1 | 	add	objptr, #2
1ddd0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ddd4     01 16 06 F1 | 	add	arg03, #1
1ddd8     F2 16 42 FC | 	wrbyte	arg03, objptr
1dddc                 | ' if cursor_y>st_lines-1
1dddc     C3 E4 05 F1 | 	add	objptr, #195
1dde0     F2 16 02 FB | 	rdlong	arg03, objptr
1dde4     01 16 86 F1 | 	sub	arg03, #1
1dde8     C3 E4 85 F1 | 	sub	objptr, #195
1ddec     F2 14 C2 FA | 	rdbyte	arg02, objptr
1ddf0     3E E4 85 F1 | 	sub	objptr, #62
1ddf4     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1ddf8     2C 00 90 ED |  if_be	jmp	#LR__2370
1ddfc                 | '   scrollup2()
1ddfc     00 12 06 F6 | 	mov	arg01, #0
1de00     01 00 00 FF 
1de04     58 14 06 F6 | 	mov	arg02, ##600
1de08     10 16 06 F6 | 	mov	arg03, #16
1de0c     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1de10                 | '   cursor_y:=st_lines-1
1de10     01 E5 05 F1 | 	add	objptr, #257
1de14     F2 16 02 FB | 	rdlong	arg03, objptr
1de18     01 16 86 F1 | 	sub	arg03, #1
1de1c     C3 E4 85 F1 | 	sub	objptr, #195
1de20     F2 16 42 FC | 	wrbyte	arg03, objptr
1de24     3E E4 85 F1 | 	sub	objptr, #62
1de28                 | LR__2370
1de28                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1de28     3C E4 05 F1 | 	add	objptr, #60
1de2c     F2 14 E2 FA | 	rdword	arg02, objptr
1de30     02 14 66 F0 | 	shl	arg02, #2
1de34     02 E4 05 F1 | 	add	objptr, #2
1de38     F2 16 C2 FA | 	rdbyte	arg03, objptr
1de3c     3E E4 85 F1 | 	sub	objptr, #62
1de40     04 16 66 F0 | 	shl	arg03, #4
1de44     04 16 06 F1 | 	add	arg03, #4
1de48     11 12 06 F6 | 	mov	arg01, #17
1de4c     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1de50                 | _hg010b_spin2_crlf_ret
1de50     2D 00 64 FD | 	ret
1de54                 | 
1de54                 | ' 
1de54                 | ' 
1de54                 | ' '*************************************************************************
1de54                 | ' '                                                                        *
1de54                 | ' '  Conversions                                                           *
1de54                 | ' '                                                                        *
1de54                 | ' '*************************************************************************
1de54                 | ' 
1de54                 | ' ''---------- Convert a integer to dec string, return a pointer
1de54                 | ' 
1de54                 | ' pub inttostr(i):result |q,pos,k,j
1de54                 | _hg010b_spin2_inttostr
1de54     03 4A 05 F6 | 	mov	COUNT_, #3
1de58     A8 00 A0 FD | 	call	#pushregs_
1de5c     09 1F 0A F6 | 	mov	local01, arg01 wz
1de60                 | ' 
1de60                 | ' j:=i
1de60                 | ' pos:=10
1de60     0A 20 06 F6 | 	mov	local02, #10
1de64                 | ' k:=0
1de64     00 22 06 F6 | 	mov	local03, #0
1de68                 | ' 
1de68                 | ' if (j==0)
1de68     18 00 90 5D |  if_ne	jmp	#LR__2380
1de6c                 | '   n_string[0]:=48
1de6c     4D E4 05 F1 | 	add	objptr, #77
1de70     F2 60 48 FC | 	wrbyte	#48, objptr
1de74                 | '   n_string[1]:=0
1de74     01 E4 05 F1 | 	add	objptr, #1
1de78     F2 00 48 FC | 	wrbyte	#0, objptr
1de7c     4E E4 85 F1 | 	sub	objptr, #78
1de80     C4 00 90 FD | 	jmp	#LR__2387
1de84                 | LR__2380
1de84                 | ' 
1de84                 | ' else
1de84                 | '   if (j<0)
1de84     0F 1F 52 F6 | 	abs	local01, local01 wc
1de88                 | '     j:=0-j
1de88                 | '     k:=45
1de88     2D 22 06 C6 |  if_b	mov	local03, #45
1de8c                 | ' 
1de8c                 | '   n_string[11]:=0
1de8c     58 E4 05 F1 | 	add	objptr, #88
1de90     F2 00 48 FC | 	wrbyte	#0, objptr
1de94     58 E4 85 F1 | 	sub	objptr, #88
1de98     97 24 48 FB | 	callpa	#(@LR__2382-@LR__2381)>>2,fcache_load_ptr_
1de9c                 | '   repeat while (pos>-1)
1de9c                 | LR__2381
1de9c     00 20 56 F2 | 	cmps	local02, #0 wc
1dea0     40 00 90 CD |  if_b	jmp	#LR__2383
1dea4     0F FB 51 F6 | 	abs	result1, local01 wc
1dea8     0A FA 15 FD | 	qdiv	result1, #10
1deac                 | '     q:=j//10
1deac     19 FA 61 FD | 	getqy	result1
1deb0     FD FA 81 F6 | 	negc	result1, result1
1deb4     0F 1F 52 F6 | 	abs	local01, local01 wc
1deb8     0A 1E 16 FD | 	qdiv	local01, #10
1debc                 | '     q:=48+q
1debc     30 FA 05 F1 | 	add	result1, #48
1dec0                 | '     n_string[pos]:=q
1dec0     10 1F 02 F6 | 	mov	local01, local02
1dec4     4D E4 05 F1 | 	add	objptr, #77
1dec8     F2 1E 02 F1 | 	add	local01, objptr
1decc     0F FB 41 FC | 	wrbyte	result1, local01
1ded0                 | '     j:=j/10
1ded0     4D E4 85 F1 | 	sub	objptr, #77
1ded4                 | '     pos-=1
1ded4     01 20 86 F1 | 	sub	local02, #1
1ded8     18 1E 62 FD | 	getqx	local01
1dedc     0F 1F 82 F6 | 	negc	local01, local01
1dee0     B8 FF 9F FD | 	jmp	#LR__2381
1dee4                 | LR__2382
1dee4                 | LR__2383
1dee4                 | '   repeat while n_string[0]==48
1dee4                 | LR__2384
1dee4     4D E4 05 F1 | 	add	objptr, #77
1dee8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1deec     4D E4 85 F1 | 	sub	objptr, #77
1def0     30 16 0E F2 | 	cmp	arg03, #48 wz
1def4     20 00 90 5D |  if_ne	jmp	#LR__2385
1def8                 | '     bytemove(@n_string,@n_string+1,12)
1def8     4D E4 05 F1 | 	add	objptr, #77
1defc     F2 12 02 F6 | 	mov	arg01, objptr
1df00     F2 14 02 F6 | 	mov	arg02, objptr
1df04     4D E4 85 F1 | 	sub	objptr, #77
1df08     01 14 06 F1 | 	add	arg02, #1
1df0c     0C 16 06 F6 | 	mov	arg03, #12
1df10     D8 0D B0 FD | 	call	#__system____builtin_memmove
1df14     CC FF 9F FD | 	jmp	#LR__2384
1df18                 | LR__2385
1df18                 | ' 
1df18                 | '   if k==45
1df18     2D 22 0E F2 | 	cmp	local03, #45 wz
1df1c     28 00 90 5D |  if_ne	jmp	#LR__2386
1df20                 | '      bytemove(@n_string+1,@n_string,12)
1df20     4D E4 05 F1 | 	add	objptr, #77
1df24     F2 12 02 F6 | 	mov	arg01, objptr
1df28     01 12 06 F1 | 	add	arg01, #1
1df2c     F2 14 02 F6 | 	mov	arg02, objptr
1df30     4D E4 85 F1 | 	sub	objptr, #77
1df34     0C 16 06 F6 | 	mov	arg03, #12
1df38     B0 0D B0 FD | 	call	#__system____builtin_memmove
1df3c                 | '      n_string[0]:=k
1df3c     4D E4 05 F1 | 	add	objptr, #77
1df40     F2 22 42 FC | 	wrbyte	local03, objptr
1df44     4D E4 85 F1 | 	sub	objptr, #77
1df48                 | LR__2386
1df48                 | LR__2387
1df48                 | ' 
1df48                 | ' q:=@n_string
1df48     4D E4 05 F1 | 	add	objptr, #77
1df4c     F2 FA 01 F6 | 	mov	result1, objptr
1df50     4D E4 85 F1 | 	sub	objptr, #77
1df54                 | ' return q
1df54     A7 F0 03 F6 | 	mov	ptra, fp
1df58     B2 00 A0 FD | 	call	#popregs_
1df5c                 | _hg010b_spin2_inttostr_ret
1df5c     2D 00 64 FD | 	ret
1df60                 | 
1df60                 | ' 
1df60                 | ' '..............................................................................
1df60                 | ' 
1df60                 | ' {{
1df60                 | ' }}
1df60                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1df60                 | _psram_spin2_startx
1df60     04 4A 05 F6 | 	mov	COUNT_, #4
1df64     A8 00 A0 FD | 	call	#pushregs_
1df68     09 1F 02 F6 | 	mov	local01, arg01
1df6c     0B 21 02 F6 | 	mov	local02, arg03
1df70     0C 23 02 F6 | 	mov	local03, arg04
1df74                 | '     stop() ' restart driver if required
1df74     54 01 B0 FD | 	call	#_psram_spin2_stop
1df78     00 1E 0E F2 | 	cmp	local01, #0 wz
1df7c     14 1E 06 AB |  if_e	rdlong	local01, #20
1df80     0F 15 52 F6 | 	abs	arg02, local01 wc
1df84     A1 07 00 FF 
1df88     40 14 16 FD | 	qdiv	arg02, ##1000000
1df8c                 | ' 
1df8c                 | '     ' use current frequency if none specified
1df8c                 | ' 
1df8c                 | '     if freq == 0 
1df8c                 | '         freq := clkfreq 
1df8c                 | ' 
1df8c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1df8c                 | ' 
1df8c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1df8c                 | '     if burst < 0
1df8c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1df8c     18 14 62 FD | 	getqx	arg02
1df90     0A 19 82 F6 | 	negc	arg04, arg02
1df94     03 18 66 F0 | 	shl	arg04, #3
1df98     84 18 86 F1 | 	sub	arg04, #132
1df9c     04 18 46 F0 | 	shr	arg04, #4
1dfa0     04 18 66 F0 | 	shl	arg04, #4
1dfa4     00 18 56 F2 | 	cmps	arg04, #0 wc
1dfa8     0E FA 65 C6 |  if_b	neg	result1, #14
1dfac     10 01 90 CD |  if_b	jmp	#LR__2393
1dfb0                 | ' 
1dfb0                 | '     ' compute the input delay
1dfb0                 | ' 
1dfb0                 | '     if delay <= 0
1dfb0     01 20 56 F2 | 	cmps	local02, #1 wc
1dfb4     10 00 90 3D |  if_ae	jmp	#LR__2390
1dfb8                 | '         delay := lookupDelay(freq)
1dfb8     0F 13 02 F6 | 	mov	arg01, local01
1dfbc     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1dfc0     FD 20 02 F6 | 	mov	local02, result1
1dfc4     04 00 90 FD | 	jmp	#LR__2391
1dfc8                 | LR__2390
1dfc8                 | '     else
1dfc8                 | '         delay <#= $f ' limit to 15
1dfc8     0F 20 66 F3 | 	fles	local02, #15
1dfcc                 | LR__2391
1dfcc                 | ' 
1dfcc                 | '     ' create our lock
1dfcc                 | ' 
1dfcc                 | '     driverlock := LOCKNEW()  
1dfcc     00 FA 05 F6 | 	mov	result1, #0
1dfd0     04 FA 61 FD | 	locknew	result1
1dfd4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dfd8     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1dfdc                 | '     if driverlock == -1
1dfdc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1dfe0     FF FF 7F FF 
1dfe4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1dfe8                 | '         return ERR_NO_LOCK
1dfe8     1A FA 65 A6 |  if_e	neg	result1, #26
1dfec     D0 00 90 AD |  if_e	jmp	#LR__2393
1dff0                 | ' 
1dff0                 | '     ' patch in the proper data and HUB addresses to the startup structure
1dff0                 | ' 
1dff0                 | '     long[@startupData][0]:=clkfreq
1dff0     14 1E 06 FB | 	rdlong	local01, #20
1dff4     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1dff8     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1dffc                 | ' '    long[@startupData][1]:=$1000_0000
1dffc                 | '     long[@startupData][5]:=@deviceData
1dffc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1e000     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1e004     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1e008     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1e00c     14 14 06 F1 | 	add	arg02, #20
1e010     0A 1F 62 FC | 	wrlong	local01, arg02
1e014                 | '     long[@startupData][6]:=@qosData
1e014     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1e018     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1e01c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1e020     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1e024     18 14 06 F1 | 	add	arg02, #24
1e028     0A 1F 62 FC | 	wrlong	local01, arg02
1e02c                 | '     long[@startupData][7]:=$7FF00
1e02c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1e030     1C 1E 06 F1 | 	add	local01, #28
1e034     FF 03 80 FF 
1e038     0F 01 6A FC | 	wrlong	##524032, local01
1e03c                 | ' 
1e03c                 | '     ' setup some default bank and QoS parameter values
1e03c                 | ' 
1e03c                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1e03c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1e040     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1e044     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1e048     10 18 66 F0 | 	shl	arg04, #16
1e04c     0C 20 66 F0 | 	shl	local02, #12
1e050     10 19 42 F5 | 	or	arg04, local02
1e054     18 18 46 F5 | 	or	arg04, #24
1e058     0C 15 02 F6 | 	mov	arg02, arg04
1e05c     02 16 06 F6 | 	mov	arg03, #2
1e060     A0 00 A0 FD | 	call	#\builtin_longfill_
1e064                 | '     longfill(@qosData, $FFFF0000, 8)
1e064     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1e068     07 16 06 F6 | 	mov	arg03, #7
1e06c     28 16 62 FD | 	setq	arg03
1e070     80 FF FF FF 
1e074     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1e078                 | ' 
1e078                 | '     ' get the address of the PSRAM memory driver so we can start it
1e078                 | ' 
1e078                 | '     driverAddr:= driver.getDriverAddr()
1e078                 | '     return @driver_start
1e078     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1e07c     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1e080     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1e084                 | ' 
1e084                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1e084                 | ' 
1e084                 | '     if desiredcog < 0
1e084     00 22 56 F2 | 	cmps	local03, #0 wc
1e088                 | '         desiredcog := NEWCOG
1e088     10 22 06 C6 |  if_b	mov	local03, #16
1e08c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1e08c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1e090     11 25 02 F6 | 	mov	local04, local03
1e094     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1e098     0A 25 F2 FC | 	coginit	local04, arg02 wc
1e09c     01 24 66 C6 |  if_b	neg	local04, #1
1e0a0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1e0a4     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1e0a8                 | '     repeat until long[@startupData] == 0 
1e0a8     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1e0ac                 | LR__2392
1e0ac     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1e0b0     F8 FF 9F 5D |  if_ne	jmp	#LR__2392
1e0b4                 | ' 
1e0b4                 | '     return drivercog
1e0b4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1e0b8     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1e0bc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e0c0                 | LR__2393
1e0c0     A7 F0 03 F6 | 	mov	ptra, fp
1e0c4     B2 00 A0 FD | 	call	#popregs_
1e0c8                 | _psram_spin2_startx_ret
1e0c8     2D 00 64 FD | 	ret
1e0cc                 | 
1e0cc                 | ' 
1e0cc                 | ' '..............................................................................
1e0cc                 | ' 
1e0cc                 | ' {{
1e0cc                 | ' }}
1e0cc                 | ' PUB stop() : i
1e0cc                 | _psram_spin2_stop
1e0cc     00 00 06 F6 | 	mov	_var01, #0
1e0d0                 | '     if drivercog <> -1
1e0d0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e0d4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e0d8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e0dc     FF FF 7F FF 
1e0e0     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1e0e4     70 00 90 AD |  if_e	jmp	#LR__2403
1e0e8                 | '         cogstop(drivercog) ' a rather brutal stop
1e0e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e0ec     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e0f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e0f4     03 12 62 FD | 	cogstop	arg01
1e0f8     97 26 48 FB | 	callpa	#(@LR__2402-@LR__2400)>>2,fcache_load_ptr_
1e0fc                 | '         repeat i from 0 to 7
1e0fc                 | LR__2400
1e0fc                 | '             if long[$7FF00][i*3] < 0
1e0fc     00 FB 01 F6 | 	mov	result1, _var01
1e100     01 FA 65 F0 | 	shl	result1, #1
1e104     00 FB 01 F1 | 	add	result1, _var01
1e108     02 FA 65 F0 | 	shl	result1, #2
1e10c     FF 03 00 FF 
1e110     00 FB 05 F1 | 	add	result1, ##524032
1e114     FD FA 01 FB | 	rdlong	result1, result1
1e118     00 FA 55 F2 | 	cmps	result1, #0 wc
1e11c     1C 00 90 3D |  if_ae	jmp	#LR__2401
1e120                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1e120     00 FB 01 F6 | 	mov	result1, _var01
1e124     01 FA 65 F0 | 	shl	result1, #1
1e128     00 FB 01 F1 | 	add	result1, _var01
1e12c     02 FA 65 F0 | 	shl	result1, #2
1e130     FF 03 00 FF 
1e134     00 FB 05 F1 | 	add	result1, ##524032
1e138     FD 20 68 FC | 	wrlong	#16, result1
1e13c                 | LR__2401
1e13c     01 00 06 F1 | 	add	_var01, #1
1e140     08 00 56 F2 | 	cmps	_var01, #8 wc
1e144     B4 FF 9F CD |  if_b	jmp	#LR__2400
1e148                 | LR__2402
1e148                 | '         drivercog := -1
1e148     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e14c     FF FF FF FF 
1e150     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1e154     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e158                 | LR__2403
1e158                 | '     if driverlock <> -1
1e158     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1e15c     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1e160     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e164     FF FF 7F FF 
1e168     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1e16c                 | '         LOCKRET(driverlock)
1e16c     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1e170     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1e174     05 12 62 5D |  if_ne	lockret	arg01
1e178                 | '         driverlock := -1
1e178     FF FF FF 5F 
1e17c     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1e180     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1e184     00 FB 01 F6 | 	mov	result1, _var01
1e188                 | _psram_spin2_stop_ret
1e188     2D 00 64 FD | 	ret
1e18c                 | 
1e18c                 | ' 
1e18c                 | ' '..............................................................................
1e18c                 | ' 
1e18c                 | ' {{
1e18c                 | ' }}
1e18c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1e18c                 | _psram_spin2_read1
1e18c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1e18c                 | '     if drivercog == -1 ' driver must be running
1e18c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e190     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1e194     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e198     FF FF 7F FF 
1e19c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1e1a0                 | '         return ERR_INACTIVE
1e1a0     0F FA 65 A6 |  if_e	neg	result1, #15
1e1a4     7C 00 90 AD |  if_e	jmp	#LR__2411
1e1a8                 | '     if count == 0 ' don't even bother reading
1e1a8     00 16 0E F2 | 	cmp	arg03, #0 wz
1e1ac                 | '         return 0
1e1ac     00 FA 05 A6 |  if_e	mov	result1, #0
1e1b0     70 00 90 AD |  if_e	jmp	#LR__2411
1e1b4                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1e1b4     00 FA 05 F6 | 	mov	result1, #0
1e1b8     01 FA 61 FD | 	cogid	result1
1e1bc     FD 00 02 F6 | 	mov	_var01, result1
1e1c0     01 00 66 F0 | 	shl	_var01, #1
1e1c4     FD 00 02 F1 | 	add	_var01, result1
1e1c8     02 00 66 F0 | 	shl	_var01, #2
1e1cc     FF 03 00 FF 
1e1d0     00 03 06 F6 | 	mov	_var02, ##524032
1e1d4     00 03 02 F1 | 	add	_var02, _var01
1e1d8                 | '     if long[mailbox] < 0
1e1d8     01 01 02 FB | 	rdlong	_var01, _var02
1e1dc     00 00 56 F2 | 	cmps	_var01, #0 wc
1e1e0                 | '         return ERR_MAILBOX_BUSY
1e1e0     1C FA 65 C6 |  if_b	neg	result1, #28
1e1e4     3C 00 90 CD |  if_b	jmp	#LR__2411
1e1e8                 | '     long[mailbox][2] := count
1e1e8     08 02 06 F1 | 	add	_var02, #8
1e1ec     01 17 62 FC | 	wrlong	arg03, _var02
1e1f0                 | '     long[mailbox][1] := dstHubAddr
1e1f0     04 02 86 F1 | 	sub	_var02, #4
1e1f4     01 13 62 FC | 	wrlong	arg01, _var02
1e1f8     04 02 86 F1 | 	sub	_var02, #4
1e1fc                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1e1fc     0A 05 02 F6 | 	mov	_var03, arg02
1e200     D9 04 06 F4 | 	bitl	_var03, #217
1e204     00 00 58 FF 
1e208     00 00 06 F6 | 	mov	_var01, ##-1342177280
1e20c     02 01 02 F1 | 	add	_var01, _var03
1e210     01 01 62 FC | 	wrlong	_var01, _var02
1e214                 | '     repeat
1e214                 | LR__2410
1e214                 | '         result := long[mailbox]    
1e214     01 05 02 FB | 	rdlong	_var03, _var02
1e218     00 04 56 F2 | 	cmps	_var03, #0 wc
1e21c     F4 FF 9F CD |  if_b	jmp	#LR__2410
1e220                 | '     while result < 0   
1e220                 | '     return -result                       'return success or error
1e220     02 FB 61 F6 | 	neg	result1, _var03
1e224                 | LR__2411
1e224                 | _psram_spin2_read1_ret
1e224     2D 00 64 FD | 	ret
1e228                 | 
1e228                 | ' 
1e228                 | ' '..............................................................................
1e228                 | ' 
1e228                 | ' {{
1e228                 | ' }}
1e228                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1e228                 | _psram_spin2_write
1e228                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1e228                 | '     if drivercog == -1 ' driver must be running
1e228     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e22c     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1e230     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e234     FF FF 7F FF 
1e238     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1e23c                 | '         return ERR_INACTIVE
1e23c     0F FA 65 A6 |  if_e	neg	result1, #15
1e240     7C 00 90 AD |  if_e	jmp	#LR__2421
1e244                 | '     if count == 0 ' don't even bother writing
1e244     00 16 0E F2 | 	cmp	arg03, #0 wz
1e248                 | '         return 0
1e248     00 FA 05 A6 |  if_e	mov	result1, #0
1e24c     70 00 90 AD |  if_e	jmp	#LR__2421
1e250                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1e250     00 FA 05 F6 | 	mov	result1, #0
1e254     01 FA 61 FD | 	cogid	result1
1e258     FD 00 02 F6 | 	mov	_var01, result1
1e25c     01 00 66 F0 | 	shl	_var01, #1
1e260     FD 00 02 F1 | 	add	_var01, result1
1e264     02 00 66 F0 | 	shl	_var01, #2
1e268     FF 03 00 FF 
1e26c     00 03 06 F6 | 	mov	_var02, ##524032
1e270     00 03 02 F1 | 	add	_var02, _var01
1e274                 | '     if long[mailbox] < 0
1e274     01 01 02 FB | 	rdlong	_var01, _var02
1e278     00 00 56 F2 | 	cmps	_var01, #0 wc
1e27c                 | '         return ERR_MAILBOX_BUSY
1e27c     1C FA 65 C6 |  if_b	neg	result1, #28
1e280     3C 00 90 CD |  if_b	jmp	#LR__2421
1e284                 | '     long[mailbox][2] := count
1e284     08 02 06 F1 | 	add	_var02, #8
1e288     01 17 62 FC | 	wrlong	arg03, _var02
1e28c                 | '     long[mailbox][1] := srcHubAddr
1e28c     04 02 86 F1 | 	sub	_var02, #4
1e290     01 13 62 FC | 	wrlong	arg01, _var02
1e294     04 02 86 F1 | 	sub	_var02, #4
1e298                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1e298     0A 05 02 F6 | 	mov	_var03, arg02
1e29c     D9 04 06 F4 | 	bitl	_var03, #217
1e2a0     00 00 78 FF 
1e2a4     00 00 06 F6 | 	mov	_var01, ##-268435456
1e2a8     02 01 02 F1 | 	add	_var01, _var03
1e2ac     01 01 62 FC | 	wrlong	_var01, _var02
1e2b0                 | '     repeat
1e2b0                 | LR__2420
1e2b0                 | '         result := long[mailbox]    
1e2b0     01 05 02 FB | 	rdlong	_var03, _var02
1e2b4     00 04 56 F2 | 	cmps	_var03, #0 wc
1e2b8     F4 FF 9F CD |  if_b	jmp	#LR__2420
1e2bc                 | '     while result < 0   
1e2bc                 | '     return -result                       'return success or error
1e2bc     02 FB 61 F6 | 	neg	result1, _var03
1e2c0                 | LR__2421
1e2c0                 | _psram_spin2_write_ret
1e2c0     2D 00 64 FD | 	ret
1e2c4                 | 
1e2c4                 | ' 
1e2c4                 | ' ' generalized fill
1e2c4                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1e2c4                 | _psram_spin2_fill
1e2c4     09 01 02 F6 | 	mov	_var01, arg01
1e2c8     0A 03 02 F6 | 	mov	_var02, arg02
1e2cc     0B 05 02 F6 | 	mov	_var03, arg03
1e2d0     0D 07 02 F6 | 	mov	_var04, arg05
1e2d4                 | '     case datasize 
1e2d4     01 06 86 F1 | 	sub	_var04, #1
1e2d8     04 06 26 F3 | 	fle	_var04, #4
1e2dc     30 06 62 FD | 	jmprel	_var04
1e2e0                 | LR__2430
1e2e0     10 00 90 FD | 	jmp	#LR__2431
1e2e4     18 00 90 FD | 	jmp	#LR__2432
1e2e8     2C 00 90 FD | 	jmp	#LR__2434
1e2ec     1C 00 90 FD | 	jmp	#LR__2433
1e2f0     24 00 90 FD | 	jmp	#LR__2434
1e2f4                 | LR__2431
1e2f4                 | '         1: req := driver.R_WRITEBYTE
1e2f4     00 00 60 FF 
1e2f8     00 08 06 F6 | 	mov	_var05, ##-1073741824
1e2fc     20 00 90 FD | 	jmp	#LR__2435
1e300                 | LR__2432
1e300                 | '         2: req := driver.R_WRITEWORD
1e300     00 00 68 FF 
1e304     00 08 06 F6 | 	mov	_var05, ##-805306368
1e308     14 00 90 FD | 	jmp	#LR__2435
1e30c                 | LR__2433
1e30c                 | '         4: req := driver.R_WRITELONG
1e30c     00 00 70 FF 
1e310     00 08 06 F6 | 	mov	_var05, ##-536870912
1e314     08 00 90 FD | 	jmp	#LR__2435
1e318                 | LR__2434
1e318                 | '         other : return ERR_INVALID
1e318     06 FA 65 F6 | 	neg	result1, #6
1e31c     94 00 90 FD | 	jmp	#LR__2437
1e320                 | LR__2435
1e320                 | '     if count == 0   ' nothing to do
1e320     00 04 0E F2 | 	cmp	_var03, #0 wz
1e324                 | '         return 0
1e324     00 FA 05 A6 |  if_e	mov	result1, #0
1e328     88 00 90 AD |  if_e	jmp	#LR__2437
1e32c                 | '     if drivercog == -1
1e32c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e330     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1e334     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e338     FF FF 7F FF 
1e33c     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1e340                 | '         return ERR_INACTIVE
1e340     0F FA 65 A6 |  if_e	neg	result1, #15
1e344     6C 00 90 AD |  if_e	jmp	#LR__2437
1e348                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1e348     00 FA 05 F6 | 	mov	result1, #0
1e34c     01 FA 61 FD | 	cogid	result1
1e350     FD 06 02 F6 | 	mov	_var04, result1
1e354     01 06 66 F0 | 	shl	_var04, #1
1e358     FD 06 02 F1 | 	add	_var04, result1
1e35c     02 06 66 F0 | 	shl	_var04, #2
1e360     FF 03 00 FF 
1e364     00 0B 06 F6 | 	mov	_var06, ##524032
1e368     03 0B 02 F1 | 	add	_var06, _var04
1e36c                 | '     if long[mailbox] < 0
1e36c     05 07 02 FB | 	rdlong	_var04, _var06
1e370     00 06 56 F2 | 	cmps	_var04, #0 wc
1e374                 | '         return ERR_MAILBOX_BUSY
1e374     1C FA 65 C6 |  if_b	neg	result1, #28
1e378     38 00 90 CD |  if_b	jmp	#LR__2437
1e37c                 | '     long[mailbox][2] := count
1e37c     08 0A 06 F1 | 	add	_var06, #8
1e380     05 05 62 FC | 	wrlong	_var03, _var06
1e384                 | '     long[mailbox][1] := pattern
1e384     04 0A 86 F1 | 	sub	_var06, #4
1e388     05 03 62 FC | 	wrlong	_var02, _var06
1e38c     04 0A 86 F1 | 	sub	_var06, #4
1e390                 | '     long[mailbox] := req + (addr & $1ffffff)
1e390     04 0D 02 F6 | 	mov	_var07, _var05
1e394     00 0F 02 F6 | 	mov	_var08, _var01
1e398     D9 0E 06 F4 | 	bitl	_var08, #217
1e39c     07 0D 02 F1 | 	add	_var07, _var08
1e3a0     05 0D 62 FC | 	wrlong	_var07, _var06
1e3a4                 | '     repeat
1e3a4                 | LR__2436
1e3a4                 | '         r := long[mailbox]
1e3a4     05 0F 02 FB | 	rdlong	_var08, _var06
1e3a8     00 0E 56 F2 | 	cmps	_var08, #0 wc
1e3ac     F4 FF 9F CD |  if_b	jmp	#LR__2436
1e3b0                 | '     while r < 0
1e3b0                 | '     return -r                  ' return 0 for success or negated error code
1e3b0     07 FB 61 F6 | 	neg	result1, _var08
1e3b4                 | LR__2437
1e3b4                 | _psram_spin2_fill_ret
1e3b4     2D 00 64 FD | 	ret
1e3b8                 | 
1e3b8                 | ' 
1e3b8                 | ' '..............................................................................
1e3b8                 | ' 
1e3b8                 | ' {{
1e3b8                 | ' }}
1e3b8                 | ' PUB setQos(cog, qos) : result | mailbox
1e3b8                 | _psram_spin2_setQos
1e3b8     09 01 02 F6 | 	mov	_var01, arg01
1e3bc                 | '     if drivercog == -1 ' driver must be running
1e3bc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e3c0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1e3c4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e3c8     FF FF 7F FF 
1e3cc     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1e3d0                 | '         return ERR_INACTIVE
1e3d0     0F FA 65 A6 |  if_e	neg	result1, #15
1e3d4     9C 00 90 AD |  if_e	jmp	#LR__2444
1e3d8                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1e3d8     00 00 56 F2 | 	cmps	_var01, #0 wc
1e3dc     08 00 90 CD |  if_b	jmp	#LR__2440
1e3e0     08 00 56 F2 | 	cmps	_var01, #8 wc
1e3e4     08 00 90 CD |  if_b	jmp	#LR__2441
1e3e8                 | LR__2440
1e3e8                 | '         return ERR_INVALID
1e3e8     06 FA 65 F6 | 	neg	result1, #6
1e3ec     84 00 90 FD | 	jmp	#LR__2444
1e3f0                 | LR__2441
1e3f0                 | '     long[@qosData][cog] := qos & !$1ff
1e3f0     FF 15 26 F5 | 	andn	arg02, #511
1e3f4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1e3f8     02 00 66 F0 | 	shl	_var01, #2
1e3fc     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1e400     00 15 62 FC | 	wrlong	arg02, _var01
1e404                 | '     mailbox := $7FF00 + drivercog*12
1e404     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1e408     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1e40c     02 07 02 F6 | 	mov	_var04, _var03
1e410     01 06 66 F0 | 	shl	_var04, #1
1e414     02 07 02 F1 | 	add	_var04, _var03
1e418     02 06 66 F0 | 	shl	_var04, #2
1e41c     FF 03 00 FF 
1e420     00 09 06 F6 | 	mov	_var05, ##524032
1e424     03 09 02 F1 | 	add	_var05, _var04
1e428                 | '     repeat until LOCKTRY(driverlock)
1e428     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1e42c                 | LR__2442
1e42c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e430     06 12 72 FD | 	locktry	arg01 wc
1e434     F4 FF 9F 3D |  if_ae	jmp	#LR__2442
1e438     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e43c                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1e43c     00 06 06 F6 | 	mov	_var04, #0
1e440     01 06 62 FD | 	cogid	_var04
1e444     00 00 78 FF 
1e448     00 02 06 F6 | 	mov	_var02, ##-268435456
1e44c     03 03 02 F1 | 	add	_var02, _var04
1e450     04 03 62 FC | 	wrlong	_var02, _var05
1e454                 | '     repeat while long[mailbox] < 0
1e454                 | LR__2443
1e454     04 03 02 FB | 	rdlong	_var02, _var05
1e458     00 02 56 F2 | 	cmps	_var02, #0 wc
1e45c     F4 FF 9F CD |  if_b	jmp	#LR__2443
1e460                 | '     LOCKREL(driverlock)
1e460     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1e464     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e468     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e46c     07 12 72 FD | 	lockrel	arg01 wc
1e470     00 FA 05 F6 | 	mov	result1, #0
1e474                 | LR__2444
1e474                 | _psram_spin2_setQos_ret
1e474     2D 00 64 FD | 	ret
1e478                 | 
1e478                 | ' 
1e478                 | ' '..............................................................................
1e478                 | ' 
1e478                 | ' {{
1e478                 | ' }}
1e478                 | ' PRI lookupDelay(freq) : delay | profile
1e478                 | _psram_spin2_lookupDelay
1e478                 | '     profile := @delayTable
1e478     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1e47c     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1e480                 | '     delay := long[profile][0]
1e480     00 03 02 FB | 	rdlong	_var02, _var01
1e484                 | '     repeat while long[profile][1] 
1e484     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1e488     97 16 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1e48c                 | LR__2450
1e48c     04 00 06 F1 | 	add	_var01, #4
1e490     00 FB 09 FB | 	rdlong	result1, _var01 wz
1e494     04 00 86 F1 | 	sub	_var01, #4
1e498     1C 00 90 AD |  if_e	jmp	#LR__2452
1e49c                 | '         if freq +< long[profile][1] 
1e49c     04 00 06 F1 | 	add	_var01, #4
1e4a0     00 FB 01 FB | 	rdlong	result1, _var01
1e4a4     04 00 86 F1 | 	sub	_var01, #4
1e4a8     FD 12 12 F2 | 	cmp	arg01, result1 wc
1e4ac                 | '             quit
1e4ac                 | '         profile += 4
1e4ac     04 00 06 31 |  if_ae	add	_var01, #4
1e4b0                 | '         delay++
1e4b0     01 02 06 31 |  if_ae	add	_var02, #1
1e4b4     D4 FF 9F 3D |  if_ae	jmp	#LR__2450
1e4b8                 | LR__2451
1e4b8                 | LR__2452
1e4b8     01 FB 01 F6 | 	mov	result1, _var02
1e4bc                 | _psram_spin2_lookupDelay_ret
1e4bc     2D 00 64 FD | 	ret
1e4c0                 | 
1e4c0                 | ' 
1e4c0                 | ' PUB start() : r
1e4c0                 | _usbnew_spin2_start
1e4c0     00 00 06 F6 | 	mov	_var01, #0
1e4c4                 | '   ifnot driver_cog
1e4c4     15 00 00 FF 
1e4c8     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1e4cc     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1e4d0     15 00 00 FF 
1e4d4     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1e4d8     38 00 90 5D |  if_ne	jmp	#LR__2460
1e4dc                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1e4dc     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1e4e0     10 00 06 F6 | 	mov	_var01, #16
1e4e4     00 16 06 F6 | 	mov	arg03, #0
1e4e8     28 16 62 FD | 	setq	arg03
1e4ec     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1e4f0     01 00 66 C6 |  if_b	neg	_var01, #1
1e4f4                 | '     if r >= 0
1e4f4     00 00 56 F2 | 	cmps	_var01, #0 wc
1e4f8                 | '       driver_cog := r+1
1e4f8     00 03 02 36 |  if_ae	mov	_var02, _var01
1e4fc     01 02 06 31 |  if_ae	add	_var02, #1
1e500     15 00 00 3F 
1e504     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1e508     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1e50c     15 00 00 3F 
1e510     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1e514                 | LR__2460
1e514     00 FB 01 F6 | 	mov	result1, _var01
1e518                 | _usbnew_spin2_start_ret
1e518     2D 00 64 FD | 	ret
1e51c                 | 
1e51c                 | '     '' (Always enabled)
1e51c                 | ' 
1e51c                 | ' '' Get current pressed state of a keyboard key
1e51c                 | ' PUB keystate(key) : r | buf[2],tmp
1e51c                 | _usbnew_spin2_keystate
1e51c     00 04 06 F6 | 	mov	_var03, #0
1e520                 | '   if key >= $E0 && key < $E8
1e520     E0 12 56 F2 | 	cmps	arg01, #224 wc
1e524     34 00 90 CD |  if_b	jmp	#LR__2470
1e528     E8 12 56 F2 | 	cmps	arg01, #232 wc
1e52c     2C 00 90 3D |  if_ae	jmp	#LR__2470
1e530                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1e530     00 FA 05 F6 | 	mov	result1, #0
1e534     13 00 00 FF 
1e538     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e53c     09 07 02 F6 | 	mov	_var04, arg01
1e540     E0 06 86 F1 | 	sub	_var04, #224
1e544     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1e548     03 09 4A F0 | 	shr	_var05, _var04 wz
1e54c     13 00 00 FF 
1e550     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e554     01 FA 65 56 |  if_ne	neg	result1, #1
1e558     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1e55c                 | LR__2470
1e55c                 | '   else
1e55c                 | '     '' Do this in inline ASM to ensure atomicity
1e55c                 | '     tmp := @hkbd_report
1e55c     13 00 00 FF 
1e560     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e564     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1e568                 | '     org
1e568     13 00 00 FF 
1e56c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e570     97 1E 48 FB | 	callpa	#(@LR__2472-@LR__2471)>>2,fcache_load_ptr_
1e574                 | LR__2471
1e574 000             | 	org	0
1e574 000 28 02 64 FD | 	setq	#1
1e578 001 04 01 02 FB | 	rdlong	_var01, _var05
1e57c 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1e580 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1e584 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1e588 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e58c 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1e590 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e594 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1e598 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e59c 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1e5a0 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e5a4 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1e5a8 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e5ac 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1e5b0 00f             | LR__2472
1e5b0                 | 	orgh
1e5b0     02 FB 01 F6 | 	mov	result1, _var03
1e5b4                 | _usbnew_spin2_keystate_ret
1e5b4     2D 00 64 FD | 	ret
1e5b8                 | 
1e5b8                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1e5b8                 | ' 
1e5b8                 | ' '' Return key event from buffer if there is one
1e5b8                 | ' PUB get_key() : r | tail
1e5b8                 | _usbnew_spin2_get_key
1e5b8                 | '   tail := keyq_tail
1e5b8     0F 00 00 FF 
1e5bc     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1e5c0     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1e5c4                 | '   if keyq_head == tail
1e5c4     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e5c8     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1e5cc     0F 00 00 FF 
1e5d0     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1e5d4     00 03 0A F2 | 	cmp	_var02, _var01 wz
1e5d8                 | '     return 0 ' No event
1e5d8     00 FA 05 A6 |  if_e	mov	result1, #0
1e5dc     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1e5e0                 | '   r := keyq_data[tail]
1e5e0     00 03 02 F6 | 	mov	_var02, _var01
1e5e4     02 02 66 F0 | 	shl	_var02, #2
1e5e8     0F 00 00 FF 
1e5ec     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1e5f0     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1e5f4     01 FB 01 FB | 	rdlong	result1, _var02
1e5f8                 | '   if ++tail == KEYQUEUE_SIZE
1e5f8     01 00 06 F1 | 	add	_var01, #1
1e5fc     80 00 0E F2 | 	cmp	_var01, #128 wz
1e600                 | '     tail := 0
1e600     00 00 06 A6 |  if_e	mov	_var01, #0
1e604                 | '   keyq_tail := tail
1e604     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e608     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1e60c     0F 00 00 FF 
1e610     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1e614                 | _usbnew_spin2_get_key_ret
1e614     2D 00 64 FD | 	ret
1e618                 | 
1e618                 | ' 
1e618                 | ' '' Emulate mouse movement
1e618                 | ' PUB mouse_move(x,y)
1e618                 | _usbnew_spin2_mouse_move
1e618     02 4A 05 F6 | 	mov	COUNT_, #2
1e61c     A8 00 A0 FD | 	call	#pushregs_
1e620     09 1F 02 F6 | 	mov	local01, arg01
1e624     0A 21 02 F6 | 	mov	local02, arg02
1e628                 | '   mouse_lock := 1
1e628     14 00 00 FF 
1e62c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e630     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1e634     14 00 00 FF 
1e638     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e63c                 | '   waitus(2) ' hope driver is now done
1e63c     02 12 06 F6 | 	mov	arg01, #2
1e640     E8 0A B0 FD | 	call	#__system___waitus
1e644                 | '   mouse_xacc := x
1e644     14 00 00 FF 
1e648     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1e64c     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1e650                 | '   mouse_yacc := y
1e650     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e654     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1e658                 | '   if mouse_outptr
1e658     04 00 00 FF 
1e65c     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1e660     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1e664     0F 00 00 FF 
1e668     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e66c     24 00 90 AD |  if_e	jmp	#LR__2480
1e670                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1e670     10 20 66 F0 | 	shl	local02, #16
1e674     0F 1F 32 F9 | 	getword	local01, local01, #0
1e678     0F 21 42 F5 | 	or	local02, local01
1e67c     0F 00 00 FF 
1e680     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1e684     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1e688     0F 00 00 FF 
1e68c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e690     0F 21 62 FC | 	wrlong	local02, local01
1e694                 | LR__2480
1e694                 | '   mouse_lock := 0
1e694     14 00 00 FF 
1e698     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e69c     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1e6a0     14 00 00 FF 
1e6a4     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e6a8     A7 F0 03 F6 | 	mov	ptra, fp
1e6ac     B2 00 A0 FD | 	call	#popregs_
1e6b0                 | _usbnew_spin2_mouse_move_ret
1e6b0     2D 00 64 FD | 	ret
1e6b4                 | 
1e6b4                 | '     '' Set HAVE_HIDPAD to enable.
1e6b4                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1e6b4                 | ' 
1e6b4                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1e6b4                 | ' PUB hidpad_id(dev) : r
1e6b4                 | _usbnew_spin2_hidpad_id
1e6b4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1e6b4     13 00 00 FF 
1e6b8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e6bc     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e6c0     09 01 02 F6 | 	mov	_var01, arg01
1e6c4     03 00 66 F0 | 	shl	_var01, #3
1e6c8     09 01 82 F1 | 	sub	_var01, arg01
1e6cc     02 00 66 F0 | 	shl	_var01, #2
1e6d0     00 FB 01 F1 | 	add	result1, _var01
1e6d4     FD FA 01 FB | 	rdlong	result1, result1
1e6d8     13 00 00 FF 
1e6dc     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e6e0                 | _usbnew_spin2_hidpad_id_ret
1e6e0     2D 00 64 FD | 	ret
1e6e4                 | 
1e6e4                 | ' 
1e6e4                 | ' '' Get all button states for a device
1e6e4                 | ' PUB hidpad_buttons(dev) : r 
1e6e4                 | _usbnew_spin2_hidpad_buttons
1e6e4                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1e6e4     13 00 00 FF 
1e6e8     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e6ec     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e6f0     09 01 02 F6 | 	mov	_var01, arg01
1e6f4     03 00 66 F0 | 	shl	_var01, #3
1e6f8     09 01 82 F1 | 	sub	_var01, arg01
1e6fc     02 00 66 F0 | 	shl	_var01, #2
1e700     00 FB 01 F1 | 	add	result1, _var01
1e704     14 FA 05 F1 | 	add	result1, #20
1e708     FD FA 01 FB | 	rdlong	result1, result1
1e70c     13 00 00 FF 
1e710     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e714                 | _usbnew_spin2_hidpad_buttons_ret
1e714     2D 00 64 FD | 	ret
1e718                 | 
1e718                 | ' 
1e718                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1e718                 | ' PUB hidpad_axis(dev,axnum) : r
1e718                 | _usbnew_spin2_hidpad_axis
1e718                 | '   if axnum +>= 6
1e718     06 14 16 F2 | 	cmp	arg02, #6 wc
1e71c                 | '     return 0
1e71c     00 FA 05 36 |  if_ae	mov	result1, #0
1e720     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1e724                 | '   else 
1e724                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1e724     13 00 00 FF 
1e728     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e72c     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e730     09 01 02 F6 | 	mov	_var01, arg01
1e734     03 00 66 F0 | 	shl	_var01, #3
1e738     09 01 82 F1 | 	sub	_var01, arg01
1e73c     02 00 66 F0 | 	shl	_var01, #2
1e740     00 FB 01 F1 | 	add	result1, _var01
1e744     04 00 06 F6 | 	mov	_var01, #4
1e748     0A 01 02 F1 | 	add	_var01, arg02
1e74c     01 00 66 F0 | 	shl	_var01, #1
1e750     FD 00 02 F1 | 	add	_var01, result1
1e754     00 FB E1 FA | 	rdword	result1, _var01
1e758     0F FA 65 F7 | 	signx	result1, #15
1e75c     13 00 00 FF 
1e760     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e764                 | _usbnew_spin2_hidpad_axis_ret
1e764     2D 00 64 FD | 	ret
1e768                 | 
1e768                 | ' 
1e768                 | ' 
1e768                 | ' '--------------------------------------------------------------
1e768                 | ' '---------- Init the variables, start the cog. ----------------
1e768                 | ' '--------------------------------------------------------------
1e768                 | ' 
1e768                 | ' pub start(mbox,scope,cache) :cog,base | iii
1e768                 | _audio096_spin2_start
1e768     04 4A 05 F6 | 	mov	COUNT_, #4
1e76c     A8 00 A0 FD | 	call	#pushregs_
1e770     09 1F 02 F6 | 	mov	local01, arg01
1e774                 | ' 
1e774                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1e774                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1e774                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1e774                 | ' 
1e774                 | ' mailboxaddr:=mbox 
1e774     F2 1E 62 FC | 	wrlong	local01, objptr
1e778                 | ' scope_ptr:=scope
1e778     04 E4 05 F1 | 	add	objptr, #4
1e77c     F2 14 62 FC | 	wrlong	arg02, objptr
1e780                 | ' cache_ptr:=cache
1e780     04 E4 05 F1 | 	add	objptr, #4
1e784     F2 16 62 FC | 	wrlong	arg03, objptr
1e788                 | ' base:=@channel1[0]
1e788     04 E4 05 F1 | 	add	objptr, #4
1e78c     F2 20 02 F6 | 	mov	local02, objptr
1e790                 | ' long[$40]:=mbox
1e790     40 1E 66 FC | 	wrlong	local01, #64
1e794                 | ' repeat iii from 0 to 7
1e794     00 22 06 F6 | 	mov	local03, #0
1e798     02 00 00 FF 
1e79c     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1e7a0     0C E4 85 F1 | 	sub	objptr, #12
1e7a4     97 BC 48 FB | 	callpa	#(@LR__2491-@LR__2490)>>2,fcache_load_ptr_
1e7a8                 | LR__2490
1e7a8                 | '   long[base+64*iii]:=0
1e7a8     10 1F 02 F6 | 	mov	local01, local02
1e7ac     11 FD 01 F6 | 	mov	result2, local03
1e7b0     06 FC 65 F0 | 	shl	result2, #6
1e7b4     FE 1E 02 F1 | 	add	local01, result2
1e7b8     0F 01 68 FC | 	wrlong	#0, local01
1e7bc                 | '   long[base+64*iii+4]:=0
1e7bc     10 1F 02 F6 | 	mov	local01, local02
1e7c0     11 FD 01 F6 | 	mov	result2, local03
1e7c4     06 FC 65 F0 | 	shl	result2, #6
1e7c8     FE 1E 02 F1 | 	add	local01, result2
1e7cc     04 1E 06 F1 | 	add	local01, #4
1e7d0     0F 01 68 FC | 	wrlong	#0, local01
1e7d4                 | '   long[base+64*iii+12]:=0
1e7d4     10 25 02 F6 | 	mov	local04, local02
1e7d8     11 1F 02 F6 | 	mov	local01, local03
1e7dc     06 1E 66 F0 | 	shl	local01, #6
1e7e0     0F 25 02 F1 | 	add	local04, local01
1e7e4     0C 24 06 F1 | 	add	local04, #12
1e7e8     12 01 68 FC | 	wrlong	#0, local04
1e7ec                 | '   long[base+64*iii+16]:=2 
1e7ec     10 25 02 F6 | 	mov	local04, local02
1e7f0     11 1F 02 F6 | 	mov	local01, local03
1e7f4     06 1E 66 F0 | 	shl	local01, #6
1e7f8     0F 25 02 F1 | 	add	local04, local01
1e7fc     10 24 06 F1 | 	add	local04, #16
1e800     12 05 68 FC | 	wrlong	#2, local04
1e804                 | '   word[base+64*iii+20]:=0
1e804     10 25 02 F6 | 	mov	local04, local02
1e808     11 1F 02 F6 | 	mov	local01, local03
1e80c     06 1E 66 F0 | 	shl	local01, #6
1e810     0F 25 02 F1 | 	add	local04, local01
1e814     14 24 06 F1 | 	add	local04, #20
1e818     12 01 58 FC | 	wrword	#0, local04
1e81c                 | '   word[base+64*iii+22]:=8192
1e81c     10 25 02 F6 | 	mov	local04, local02
1e820     11 1F 02 F6 | 	mov	local01, local03
1e824     06 1E 66 F0 | 	shl	local01, #6
1e828     0F 25 02 F1 | 	add	local04, local01
1e82c     16 24 06 F1 | 	add	local04, #22
1e830     10 00 80 FF 
1e834     12 01 58 FC | 	wrword	##8192, local04
1e838                 | '   word[base+64*iii+24]:=4000+2*iii
1e838     11 25 02 F6 | 	mov	local04, local03
1e83c     01 24 66 F0 | 	shl	local04, #1
1e840     07 00 00 FF 
1e844     A0 1F 06 F6 | 	mov	local01, ##4000
1e848     12 1F 02 F1 | 	add	local01, local04
1e84c     10 25 02 F6 | 	mov	local04, local02
1e850     11 FD 01 F6 | 	mov	result2, local03
1e854     06 FC 65 F0 | 	shl	result2, #6
1e858     FE 24 02 F1 | 	add	local04, result2
1e85c     18 24 06 F1 | 	add	local04, #24
1e860     12 1F 52 FC | 	wrword	local01, local04
1e864                 | '   word[base+64*iii+26]:=2
1e864     10 25 02 F6 | 	mov	local04, local02
1e868     11 1F 02 F6 | 	mov	local01, local03
1e86c     06 1E 66 F0 | 	shl	local01, #6
1e870     0F 25 02 F1 | 	add	local04, local01
1e874     1A 24 06 F1 | 	add	local04, #26
1e878     12 05 58 FC | 	wrword	#2, local04
1e87c                 | '   long [base+64*iii+8]:=@null | $C0000000
1e87c     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1e880     3E 1E 26 F4 | 	bith	local01, #62
1e884     10 25 02 F6 | 	mov	local04, local02
1e888     11 17 02 F6 | 	mov	arg03, local03
1e88c     06 16 66 F0 | 	shl	arg03, #6
1e890     0B 25 02 F1 | 	add	local04, arg03
1e894     08 24 06 F1 | 	add	local04, #8
1e898     12 1F 62 FC | 	wrlong	local01, local04
1e89c                 | '   long[base+64*iii+32]:=0
1e89c     10 25 02 F6 | 	mov	local04, local02
1e8a0     11 1F 02 F6 | 	mov	local01, local03
1e8a4     06 1E 66 F0 | 	shl	local01, #6
1e8a8     0F 25 02 F1 | 	add	local04, local01
1e8ac     20 24 06 F1 | 	add	local04, #32
1e8b0     12 01 68 FC | 	wrlong	#0, local04
1e8b4                 | '   long[base+64*iii+36]:=0
1e8b4     10 25 02 F6 | 	mov	local04, local02
1e8b8     11 1F 02 F6 | 	mov	local01, local03
1e8bc     06 1E 66 F0 | 	shl	local01, #6
1e8c0     0F 25 02 F1 | 	add	local04, local01
1e8c4     24 24 06 F1 | 	add	local04, #36
1e8c8     12 01 68 FC | 	wrlong	#0, local04
1e8cc                 | '   long[base+64*iii+40]:=0
1e8cc     10 25 02 F6 | 	mov	local04, local02
1e8d0     11 1F 02 F6 | 	mov	local01, local03
1e8d4     06 1E 66 F0 | 	shl	local01, #6
1e8d8     0F 25 02 F1 | 	add	local04, local01
1e8dc     28 24 06 F1 | 	add	local04, #40
1e8e0     12 01 68 FC | 	wrlong	#0, local04
1e8e4                 | '   long[base+64*iii+44]:=0
1e8e4     10 25 02 F6 | 	mov	local04, local02
1e8e8     11 1F 02 F6 | 	mov	local01, local03
1e8ec     06 1E 66 F0 | 	shl	local01, #6
1e8f0     0F 25 02 F1 | 	add	local04, local01
1e8f4     2C 24 06 F1 | 	add	local04, #44
1e8f8     12 01 68 FC | 	wrlong	#0, local04
1e8fc                 | '   long[base+64*iii+28]:=0
1e8fc     10 25 02 F6 | 	mov	local04, local02
1e900     11 1F 02 F6 | 	mov	local01, local03
1e904     06 1E 66 F0 | 	shl	local01, #6
1e908     0F 25 02 F1 | 	add	local04, local01
1e90c     1C 24 06 F1 | 	add	local04, #28
1e910     12 01 68 FC | 	wrlong	#0, local04
1e914     01 22 06 F1 | 	add	local03, #1
1e918     08 22 56 F2 | 	cmps	local03, #8 wc
1e91c     88 FE 9F CD |  if_b	jmp	#LR__2490
1e920                 | LR__2491
1e920     02 00 00 FF 
1e924     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1e928                 | '   
1e928                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1e928     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1e92c     F2 16 02 F6 | 	mov	arg03, objptr
1e930     10 24 06 F6 | 	mov	local04, #16
1e934     28 16 62 FD | 	setq	arg03
1e938     0A 25 F2 FC | 	coginit	local04, arg02 wc
1e93c     01 24 66 C6 |  if_b	neg	local04, #1
1e940                 | ' waitms(100)
1e940     64 12 06 F6 | 	mov	arg01, #100
1e944     78 07 B0 FD | 	call	#__system___waitms
1e948                 | ' return cog,base
1e948     10 FD 01 F6 | 	mov	result2, local02
1e94c     12 FB 01 F6 | 	mov	result1, local04
1e950     A7 F0 03 F6 | 	mov	ptra, fp
1e954     B2 00 A0 FD | 	call	#popregs_
1e958                 | _audio096_spin2_start_ret
1e958     2D 00 64 FD | 	ret
1e95c                 | 
1e95c                 | ' 
1e95c                 | ' ' a simple play procedure to not poke everything. 
1e95c                 | ' 
1e95c                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1e95c                 | _audio096_spin2_play
1e95c     0C E4 05 F1 | 	add	objptr, #12
1e960     F2 00 02 F6 | 	mov	_var01, objptr
1e964     06 12 66 F0 | 	shl	arg01, #6
1e968     09 01 02 F1 | 	add	_var01, arg01
1e96c     00 13 02 F6 | 	mov	arg01, _var01
1e970     0C 12 06 F1 | 	add	arg01, #12
1e974     09 1B 62 FC | 	wrlong	arg05, arg01
1e978     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e97c     00 13 02 36 |  if_ae	mov	arg01, _var01
1e980     10 12 06 31 |  if_ae	add	arg01, #16
1e984     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1e988     02 1A 06 C1 |  if_b	add	arg05, #2
1e98c     00 13 02 C6 |  if_b	mov	arg01, _var01
1e990     10 12 06 C1 |  if_b	add	arg01, #16
1e994     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1e998     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e99c     0F 1B 80 FF 
1e9a0     09 1F 1A FD | 	qdiv	##3546895, arg01
1e9a4                 | ' 
1e9a4                 | ' base2:=@channel1[0]+64*channel
1e9a4                 | ' 
1e9a4                 | ' 
1e9a4                 | ' long[base2+12]:= len
1e9a4                 | ' if loop >=0 
1e9a4                 | '   long[base2+16]:= loop
1e9a4     0C E4 85 F1 | 	sub	objptr, #12
1e9a8                 | ' else
1e9a8                 | '   long[base2+16]:= len+2
1e9a8                 | ' word[base2+20]:=vol
1e9a8     00 13 02 F6 | 	mov	arg01, _var01
1e9ac     14 12 06 F1 | 	add	arg01, #20
1e9b0     09 19 52 FC | 	wrword	arg04, arg01
1e9b4                 | ' word[base2+24]:= 3546895/splfreq 
1e9b4     00 19 02 F6 | 	mov	arg04, _var01
1e9b8     18 18 06 F1 | 	add	arg04, #24
1e9bc                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e9bc                 | ' long[base2+28]:=$40000000    
1e9bc                 | ' long[base2+32]:=0    
1e9bc                 | ' long[base2+36]:=0    
1e9bc                 | ' long[base2+40]:=0    
1e9bc                 | ' long[base2+44]:=0    
1e9bc                 | ' long[base2+8]:=sample+$C0000000     
1e9bc     00 00 60 FF 
1e9c0     00 14 06 F1 | 	add	arg02, ##-1073741824
1e9c4     18 12 62 FD | 	getqx	arg01
1e9c8     09 13 82 F6 | 	negc	arg01, arg01
1e9cc     0C 13 52 FC | 	wrword	arg01, arg04
1e9d0     00 13 02 F6 | 	mov	arg01, _var01
1e9d4     1A 12 06 F1 | 	add	arg01, #26
1e9d8     09 01 5A FC | 	wrword	#256, arg01
1e9dc     00 13 02 F6 | 	mov	arg01, _var01
1e9e0     1C 12 06 F1 | 	add	arg01, #28
1e9e4     00 00 A0 FF 
1e9e8     09 01 68 FC | 	wrlong	##1073741824, arg01
1e9ec     00 13 02 F6 | 	mov	arg01, _var01
1e9f0     20 12 06 F1 | 	add	arg01, #32
1e9f4     09 01 68 FC | 	wrlong	#0, arg01
1e9f8     00 13 02 F6 | 	mov	arg01, _var01
1e9fc     24 12 06 F1 | 	add	arg01, #36
1ea00     09 01 68 FC | 	wrlong	#0, arg01
1ea04     00 13 02 F6 | 	mov	arg01, _var01
1ea08     28 12 06 F1 | 	add	arg01, #40
1ea0c     09 01 68 FC | 	wrlong	#0, arg01
1ea10     00 13 02 F6 | 	mov	arg01, _var01
1ea14     2C 12 06 F1 | 	add	arg01, #44
1ea18     09 01 68 FC | 	wrlong	#0, arg01
1ea1c     08 00 06 F1 | 	add	_var01, #8
1ea20     00 15 62 FC | 	wrlong	arg02, _var01
1ea24                 | _audio096_spin2_play_ret
1ea24     2D 00 64 FD | 	ret
1ea28                 | 
1ea28                 | ' 
1ea28                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1ea28                 | _audio096_spin2_play8
1ea28                 | ' 
1ea28                 | ' base2:=@channel1[0]+64*channel
1ea28     0C E4 05 F1 | 	add	objptr, #12
1ea2c     F2 00 02 F6 | 	mov	_var01, objptr
1ea30     06 12 66 F0 | 	shl	arg01, #6
1ea34     09 01 02 F1 | 	add	_var01, arg01
1ea38                 | ' long[base2]:=0
1ea38     00 01 68 FC | 	wrlong	#0, _var01
1ea3c                 | ' long[base2+8]:=sample+$40000000 
1ea3c     00 00 20 FF 
1ea40     00 14 06 F1 | 	add	arg02, ##1073741824
1ea44     00 13 02 F6 | 	mov	arg01, _var01
1ea48     08 12 06 F1 | 	add	arg01, #8
1ea4c     09 15 62 FC | 	wrlong	arg02, arg01
1ea50                 | ' if loop>=0
1ea50     00 1C 56 F2 | 	cmps	arg06, #0 wc
1ea54     0C E4 85 F1 | 	sub	objptr, #12
1ea58     1C 00 90 CD |  if_b	jmp	#LR__2500
1ea5c                 | '   long[base2+12]:=loop
1ea5c     00 15 02 F6 | 	mov	arg02, _var01
1ea60     0C 14 06 F1 | 	add	arg02, #12
1ea64     0A 1D 62 FC | 	wrlong	arg06, arg02
1ea68                 | '   long[base2+16]:= len
1ea68     00 1D 02 F6 | 	mov	arg06, _var01
1ea6c     10 1C 06 F1 | 	add	arg06, #16
1ea70     0E 1B 62 FC | 	wrlong	arg05, arg06
1ea74     1C 00 90 FD | 	jmp	#LR__2501
1ea78                 | LR__2500
1ea78                 | ' else
1ea78                 | '   long[base2+12]:= len
1ea78     00 1D 02 F6 | 	mov	arg06, _var01
1ea7c     0C 1C 06 F1 | 	add	arg06, #12
1ea80     0E 1B 62 FC | 	wrlong	arg05, arg06
1ea84                 | '   long[base2+16]:= len+1
1ea84     01 1A 06 F1 | 	add	arg05, #1
1ea88     00 13 02 F6 | 	mov	arg01, _var01
1ea8c     10 12 06 F1 | 	add	arg01, #16
1ea90     09 1B 62 FC | 	wrlong	arg05, arg01
1ea94                 | LR__2501
1ea94     0B 17 52 F6 | 	abs	arg03, arg03 wc
1ea98     0B 0A 80 FF 
1ea9c     0B 6D 18 FD | 	qdiv	##1316406, arg03
1eaa0                 | ' word[base2+20]:=vol
1eaa0     00 17 02 F6 | 	mov	arg03, _var01
1eaa4     14 16 06 F1 | 	add	arg03, #20
1eaa8     0B 19 52 FC | 	wrword	arg04, arg03
1eaac                 | ' word[base2+24]:= 1316406 /splfreq 
1eaac     00 13 02 F6 | 	mov	arg01, _var01
1eab0     18 12 06 F1 | 	add	arg01, #24
1eab4                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1eab4     1A 00 06 F1 | 	add	_var01, #26
1eab8     18 18 62 FD | 	getqx	arg04
1eabc     0C 19 82 F6 | 	negc	arg04, arg04
1eac0     09 19 52 FC | 	wrword	arg04, arg01
1eac4     00 01 5A FC | 	wrword	#256, _var01
1eac8                 | _audio096_spin2_play8_ret
1eac8     2D 00 64 FD | 	ret
1eacc                 | 
1eacc                 | ' 'long[base2+28]:=$40000000
1eacc                 | ' 
1eacc                 | '     
1eacc                 | ' pub stop(channel) 'silence it
1eacc                 | _audio096_spin2_stop
1eacc                 | ' 
1eacc                 | ' word[@channel1[0]+64*channel+20]:=0
1eacc     0C E4 05 F1 | 	add	objptr, #12
1ead0     F2 00 02 F6 | 	mov	_var01, objptr
1ead4     09 03 02 F6 | 	mov	_var02, arg01
1ead8     06 02 66 F0 | 	shl	_var02, #6
1eadc     01 01 02 F1 | 	add	_var01, _var02
1eae0     14 00 06 F1 | 	add	_var01, #20
1eae4     00 01 58 FC | 	wrword	#0, _var01
1eae8                 | ' word[@channel1[0]+64*channel+20]:=0
1eae8     F2 00 02 F6 | 	mov	_var01, objptr
1eaec     06 12 66 F0 | 	shl	arg01, #6
1eaf0     09 01 02 F1 | 	add	_var01, arg01
1eaf4     14 00 06 F1 | 	add	_var01, #20
1eaf8     00 01 58 FC | 	wrword	#0, _var01
1eafc     0C E4 85 F1 | 	sub	objptr, #12
1eb00                 | _audio096_spin2_stop_ret
1eb00     2D 00 64 FD | 	ret
1eb04                 | hubexit
1eb04     81 00 80 FD | 	jmp	#cogexit
1eb08                 | 
1eb08                 | __system___setbaud
1eb08     14 64 06 FB | 	rdlong	muldiva_, #20
1eb0c     09 67 02 F6 | 	mov	muldivb_, arg01
1eb10     BA 00 A0 FD | 	call	#divide_
1eb14     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1eb18                 | LR__2510
1eb18     3E FA 9D FA | 	rdpin	result1, #62 wc
1eb1c     FE FC A1 F1 | 	subx	result2, result2
1eb20     F4 FF 9F CD |  if_b	jmp	#LR__2510
1eb24                 | LR__2511
1eb24     40 7C 64 FD | 	dirl	#62
1eb28     40 7E 64 FD | 	dirl	#63
1eb2c     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1eb30     10 66 66 F0 | 	shl	muldivb_, #16
1eb34     07 14 06 F6 | 	mov	arg02, #7
1eb38     33 15 02 F1 | 	add	arg02, muldivb_
1eb3c     3E F8 0C FC | 	wrpin	#124, #62
1eb40     3E 14 16 FC | 	wxpin	arg02, #62
1eb44     3F 7C 0C FC | 	wrpin	#62, #63
1eb48     14 14 06 F1 | 	add	arg02, #20
1eb4c     3F 14 16 FC | 	wxpin	arg02, #63
1eb50     41 7C 64 FD | 	dirh	#62
1eb54     41 7E 64 FD | 	dirh	#63
1eb58                 | __system___setbaud_ret
1eb58     2D 00 64 FD | 	ret
1eb5c                 | 
1eb5c                 | __system___txraw
1eb5c     01 4A 05 F6 | 	mov	COUNT_, #1
1eb60     A8 00 A0 FD | 	call	#pushregs_
1eb64     09 1F 02 F6 | 	mov	local01, arg01
1eb68     97 06 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1eb6c                 | LR__2520
1eb6c     3E FA 9D FA | 	rdpin	result1, #62 wc
1eb70     FE FC A1 F1 | 	subx	result2, result2
1eb74     F4 FF 9F CD |  if_b	jmp	#LR__2520
1eb78                 | LR__2521
1eb78     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1eb7c     C2 01 00 AF 
1eb80     00 12 06 A6 |  if_e	mov	arg01, ##230400
1eb84     80 FF BF AD |  if_e	call	#__system___setbaud
1eb88     58 7C 64 FD | 	drvl	#62
1eb8c     3E 1E 26 FC | 	wypin	local01, #62
1eb90     01 FA 05 F6 | 	mov	result1, #1
1eb94     A7 F0 03 F6 | 	mov	ptra, fp
1eb98     B2 00 A0 FD | 	call	#popregs_
1eb9c                 | __system___txraw_ret
1eb9c     2D 00 64 FD | 	ret
1eba0                 | 
1eba0                 | __system___rxraw
1eba0     0D 4A 05 F6 | 	mov	COUNT_, #13
1eba4     A8 00 A0 FD | 	call	#pushregs_
1eba8     09 1F 02 F6 | 	mov	local01, arg01
1ebac     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1ebb0     C2 01 00 AF 
1ebb4     00 12 06 A6 |  if_e	mov	arg01, ##230400
1ebb8     4C FF BF AD |  if_e	call	#__system___setbaud
1ebbc     00 1E 0E F2 | 	cmp	local01, #0 wz
1ebc0     20 00 90 AD |  if_e	jmp	#LR__2530
1ebc4     14 22 06 FB | 	rdlong	local03, #20
1ebc8     0A 22 46 F0 | 	shr	local03, #10
1ebcc     11 1F 02 FD | 	qmul	local01, local03
1ebd0     1A FA 61 FD | 	getct	result1
1ebd4     18 24 62 FD | 	getqx	local04
1ebd8     12 FB 01 F1 | 	add	result1, local04
1ebdc     FD 26 02 F6 | 	mov	local05, result1
1ebe0     04 00 90 FD | 	jmp	#LR__2531
1ebe4                 | LR__2530
1ebe4     00 26 06 F6 | 	mov	local05, #0
1ebe8                 | LR__2531
1ebe8     01 28 66 F6 | 	neg	local06, #1
1ebec     3F 2A 06 F6 | 	mov	local07, #63
1ebf0     00 2C 06 F6 | 	mov	local08, #0
1ebf4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ebf8     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1ebfc     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1ec00                 | LR__2532
1ec00     08 2E 16 F4 | 	testb	local09, #8 wc
1ec04     09 2E 76 F4 | 	testbn	local09, #9 andc
1ec08     0A 2E 46 F0 | 	shr	local09, #10
1ec0c     01 2C 06 C6 |  if_b	mov	local08, #1
1ec10     40 7E 6C 3D |  if_ae	testp	#63 wz
1ec14     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1ec18     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1ec1c     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1ec20                 | LR__2533
1ec20     00 20 06 F6 | 	mov	local02, #0
1ec24     00 2C 0E F2 | 	cmp	local08, #0 wz
1ec28     01 20 66 56 |  if_ne	neg	local02, #1
1ec2c     00 30 06 F6 | 	mov	local10, #0
1ec30     00 22 06 F6 | 	mov	local03, #0
1ec34     00 1E 0E F2 | 	cmp	local01, #0 wz
1ec38     01 22 66 56 |  if_ne	neg	local03, #1
1ec3c     00 24 06 F6 | 	mov	local04, #0
1ec40     00 32 06 F6 | 	mov	local11, #0
1ec44     1A FA 61 FD | 	getct	result1
1ec48     FD 34 02 F6 | 	mov	local12, result1
1ec4c     1A 37 02 F6 | 	mov	local13, local12
1ec50     13 37 82 F1 | 	sub	local13, local05
1ec54     00 36 56 F2 | 	cmps	local13, #0 wc
1ec58     00 32 26 C6 |  if_b	not	local11, #0
1ec5c     00 32 0E F2 | 	cmp	local11, #0 wz
1ec60     00 24 26 56 |  if_ne	not	local04, #0
1ec64     12 23 CA F7 | 	test	local03, local04 wz
1ec68     00 30 26 56 |  if_ne	not	local10, #0
1ec6c     18 21 4A F5 | 	or	local02, local10 wz
1ec70     8C FF 9F AD |  if_e	jmp	#LR__2532
1ec74     00 2C 0E F2 | 	cmp	local08, #0 wz
1ec78     17 29 02 56 |  if_ne	mov	local06, local09
1ec7c     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1ec80     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ec84     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1ec88     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1ec8c     14 FB 01 F6 | 	mov	result1, local06
1ec90     A7 F0 03 F6 | 	mov	ptra, fp
1ec94     B2 00 A0 FD | 	call	#popregs_
1ec98                 | __system___rxraw_ret
1ec98     2D 00 64 FD | 	ret
1ec9c                 | 
1ec9c                 | __system___getus
1ec9c     1A FC 71 FD | 	getct	result2 wc
1eca0     1A 00 62 FD | 	getct	_var01
1eca4     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1eca8     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1ecac     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ecb0     20 00 90 5D |  if_ne	jmp	#LR__2540
1ecb4     14 02 06 FB | 	rdlong	_var02, #20
1ecb8     A1 07 00 FF 
1ecbc     40 02 16 FD | 	qdiv	_var02, ##1000000
1ecc0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ecc4     18 FA 61 FD | 	getqx	result1
1ecc8     FD 02 02 F6 | 	mov	_var02, result1
1eccc     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ecd0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ecd4                 | LR__2540
1ecd4     01 FD 11 FD | 	qdiv	result2, _var02
1ecd8     19 FC 61 FD | 	getqy	result2
1ecdc     28 FC 61 FD | 	setq	result2
1ece0     01 01 12 FD | 	qdiv	_var01, _var02
1ece4     18 FA 61 FD | 	getqx	result1
1ece8                 | __system___getus_ret
1ece8     2D 00 64 FD | 	ret
1ecec                 | 
1ecec                 | __system____builtin_memmove
1ecec     09 01 02 F6 | 	mov	_var01, arg01
1ecf0     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1ecf4     10 00 90 CD |  if_b	jmp	#LR__2550
1ecf8     0A 03 02 F6 | 	mov	_var02, arg02
1ecfc     0B 03 02 F1 | 	add	_var02, arg03
1ed00     01 13 52 F2 | 	cmps	arg01, _var02 wc
1ed04     48 00 90 CD |  if_b	jmp	#LR__2556
1ed08                 | LR__2550
1ed08     0B 05 02 F6 | 	mov	_var03, arg03
1ed0c     02 04 4E F0 | 	shr	_var03, #2 wz
1ed10     18 00 90 AD |  if_e	jmp	#LR__2555
1ed14     97 0A 48 FB | 	callpa	#(@LR__2553-@LR__2551)>>2,fcache_load_ptr_
1ed18                 | LR__2551
1ed18     02 09 D8 FC | 	rep	@LR__2554, _var03
1ed1c                 | LR__2552
1ed1c     0A 05 02 FB | 	rdlong	_var03, arg02
1ed20     09 05 62 FC | 	wrlong	_var03, arg01
1ed24     04 12 06 F1 | 	add	arg01, #4
1ed28     04 14 06 F1 | 	add	arg02, #4
1ed2c                 | LR__2553
1ed2c                 | LR__2554
1ed2c                 | LR__2555
1ed2c     02 16 CE F7 | 	test	arg03, #2 wz
1ed30     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1ed34     09 03 52 5C |  if_ne	wrword	_var02, arg01
1ed38     02 12 06 51 |  if_ne	add	arg01, #2
1ed3c     02 14 06 51 |  if_ne	add	arg02, #2
1ed40     01 16 CE F7 | 	test	arg03, #1 wz
1ed44     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1ed48     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1ed4c     28 00 90 FD | 	jmp	#LR__2562
1ed50                 | LR__2556
1ed50     0B 13 02 F1 | 	add	arg01, arg03
1ed54     0B 15 02 F1 | 	add	arg02, arg03
1ed58     0B 07 0A F6 | 	mov	_var04, arg03 wz
1ed5c     18 00 90 AD |  if_e	jmp	#LR__2561
1ed60     97 0A 48 FB | 	callpa	#(@LR__2559-@LR__2557)>>2,fcache_load_ptr_
1ed64                 | LR__2557
1ed64     03 09 D8 FC | 	rep	@LR__2560, _var04
1ed68                 | LR__2558
1ed68     01 12 86 F1 | 	sub	arg01, #1
1ed6c     01 14 86 F1 | 	sub	arg02, #1
1ed70     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ed74     09 03 42 FC | 	wrbyte	_var02, arg01
1ed78                 | LR__2559
1ed78                 | LR__2560
1ed78                 | LR__2561
1ed78                 | LR__2562
1ed78     00 FB 01 F6 | 	mov	result1, _var01
1ed7c                 | __system____builtin_memmove_ret
1ed7c     2D 00 64 FD | 	ret
1ed80                 | 
1ed80                 | __system____builtin_strcpy
1ed80     09 01 02 F6 | 	mov	_var01, arg01
1ed84     97 0A 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
1ed88                 | LR__2570
1ed88     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1ed8c     09 FB 41 FC | 	wrbyte	result1, arg01
1ed90     01 14 06 F1 | 	add	arg02, #1
1ed94     01 12 06 F1 | 	add	arg01, #1
1ed98     EC FF 9F 5D |  if_ne	jmp	#LR__2570
1ed9c                 | LR__2571
1ed9c     00 FB 01 F6 | 	mov	result1, _var01
1eda0                 | __system____builtin_strcpy_ret
1eda0     2D 00 64 FD | 	ret
1eda4                 | 
1eda4                 | __system____topofstack
1eda4     00 4A 05 F6 | 	mov	COUNT_, #0
1eda8     A8 00 A0 FD | 	call	#pushregs_
1edac     08 F0 07 F1 | 	add	ptra, #8
1edb0     04 4E 05 F1 | 	add	fp, #4
1edb4     A7 12 62 FC | 	wrlong	arg01, fp
1edb8     A7 FA 01 F6 | 	mov	result1, fp
1edbc     04 4E 85 F1 | 	sub	fp, #4
1edc0     A7 F0 03 F6 | 	mov	ptra, fp
1edc4     B2 00 A0 FD | 	call	#popregs_
1edc8                 | __system____topofstack_ret
1edc8     2D 00 64 FD | 	ret
1edcc                 | 
1edcc                 | __system___lockmem
1edcc     00 FA 05 F6 | 	mov	result1, #0
1edd0     01 FA 61 FD | 	cogid	result1
1edd4     00 FB 05 F1 | 	add	result1, #256
1edd8                 | LR__2580
1edd8     09 01 0A FB | 	rdlong	_var01, arg01 wz
1eddc     09 FB 61 AC |  if_e	wrlong	result1, arg01
1ede0     09 01 02 AB |  if_e	rdlong	_var01, arg01
1ede4     09 01 02 AB |  if_e	rdlong	_var01, arg01
1ede8     FD 00 0A F2 | 	cmp	_var01, result1 wz
1edec     E8 FF 9F 5D |  if_ne	jmp	#LR__2580
1edf0                 | __system___lockmem_ret
1edf0     2D 00 64 FD | 	ret
1edf4                 | 
1edf4                 | __system___string_cmp
1edf4     97 14 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1edf8                 | LR__2590
1edf8     09 01 C2 FA | 	rdbyte	_var01, arg01
1edfc     0A 03 C2 FA | 	rdbyte	_var02, arg02
1ee00     00 05 02 F6 | 	mov	_var03, _var01
1ee04     01 05 8A F1 | 	sub	_var03, _var02 wz
1ee08     01 12 06 F1 | 	add	arg01, #1
1ee0c     01 14 06 F1 | 	add	arg02, #1
1ee10     0C 00 90 5D |  if_ne	jmp	#LR__2592
1ee14     00 00 0E F2 | 	cmp	_var01, #0 wz
1ee18     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1ee1c     D8 FF 9F 5D |  if_ne	jmp	#LR__2590
1ee20                 | LR__2591
1ee20                 | LR__2592
1ee20     02 FB 01 F6 | 	mov	result1, _var03
1ee24                 | __system___string_cmp_ret
1ee24     2D 00 64 FD | 	ret
1ee28                 | 
1ee28                 | __system___string_concat
1ee28     05 4A 05 F6 | 	mov	COUNT_, #5
1ee2c     A8 00 A0 FD | 	call	#pushregs_
1ee30     09 1F 02 F6 | 	mov	local01, arg01
1ee34     0A 21 02 F6 | 	mov	local02, arg02
1ee38     0F 13 02 F6 | 	mov	arg01, local01
1ee3c     09 23 02 F6 | 	mov	local03, arg01
1ee40     97 06 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
1ee44                 | LR__2600
1ee44     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ee48     01 22 06 51 |  if_ne	add	local03, #1
1ee4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2600
1ee50                 | LR__2601
1ee50     09 23 82 F1 | 	sub	local03, arg01
1ee54     11 25 02 F6 | 	mov	local04, local03
1ee58     10 13 02 F6 | 	mov	arg01, local02
1ee5c     09 23 02 F6 | 	mov	local03, arg01
1ee60     97 06 48 FB | 	callpa	#(@LR__2603-@LR__2602)>>2,fcache_load_ptr_
1ee64                 | LR__2602
1ee64     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ee68     01 22 06 51 |  if_ne	add	local03, #1
1ee6c     F4 FF 9F 5D |  if_ne	jmp	#LR__2602
1ee70                 | LR__2603
1ee70     09 23 82 F1 | 	sub	local03, arg01
1ee74     12 13 02 F6 | 	mov	arg01, local04
1ee78     11 13 02 F1 | 	add	arg01, local03
1ee7c     01 12 06 F1 | 	add	arg01, #1
1ee80     94 3D B0 FD | 	call	#__system___gc_alloc_managed
1ee84     FD 26 0A F6 | 	mov	local05, result1 wz
1ee88     28 00 90 AD |  if_e	jmp	#LR__2604
1ee8c     13 13 02 F6 | 	mov	arg01, local05
1ee90     0F 15 02 F6 | 	mov	arg02, local01
1ee94     12 17 02 F6 | 	mov	arg03, local04
1ee98     50 FE BF FD | 	call	#__system____builtin_memmove
1ee9c     13 13 02 F6 | 	mov	arg01, local05
1eea0     12 13 02 F1 | 	add	arg01, local04
1eea4     01 22 06 F1 | 	add	local03, #1
1eea8     10 15 02 F6 | 	mov	arg02, local02
1eeac     11 17 02 F6 | 	mov	arg03, local03
1eeb0     38 FE BF FD | 	call	#__system____builtin_memmove
1eeb4                 | LR__2604
1eeb4     13 FB 01 F6 | 	mov	result1, local05
1eeb8     A7 F0 03 F6 | 	mov	ptra, fp
1eebc     B2 00 A0 FD | 	call	#popregs_
1eec0                 | __system___string_concat_ret
1eec0     2D 00 64 FD | 	ret
1eec4                 | 
1eec4                 | __system___tx
1eec4     02 4A 05 F6 | 	mov	COUNT_, #2
1eec8     A8 00 A0 FD | 	call	#pushregs_
1eecc     09 1F 02 F6 | 	mov	local01, arg01
1eed0     0A 1E 0E F2 | 	cmp	local01, #10 wz
1eed4     18 00 90 5D |  if_ne	jmp	#LR__2610
1eed8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1eedc     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1eee0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1eee4     02 20 CE F7 | 	test	local02, #2 wz
1eee8     0D 12 06 56 |  if_ne	mov	arg01, #13
1eeec     6C FC BF 5D |  if_ne	call	#__system___txraw
1eef0                 | LR__2610
1eef0     0F 13 02 F6 | 	mov	arg01, local01
1eef4     64 FC BF FD | 	call	#__system___txraw
1eef8     A7 F0 03 F6 | 	mov	ptra, fp
1eefc     B2 00 A0 FD | 	call	#popregs_
1ef00                 | __system___tx_ret
1ef00     2D 00 64 FD | 	ret
1ef04                 | 
1ef04                 | __system___rx
1ef04     01 4A 05 F6 | 	mov	COUNT_, #1
1ef08     A8 00 A0 FD | 	call	#pushregs_
1ef0c                 | LR__2620
1ef0c     00 12 06 F6 | 	mov	arg01, #0
1ef10     8C FC BF FD | 	call	#__system___rxraw
1ef14     FD 1E 02 F6 | 	mov	local01, result1
1ef18     FF FF 7F FF 
1ef1c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1ef20     E8 FF 9F AD |  if_e	jmp	#LR__2620
1ef24     0D 1E 0E F2 | 	cmp	local01, #13 wz
1ef28     14 00 90 5D |  if_ne	jmp	#LR__2621
1ef2c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ef30     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ef34     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ef38     02 FA CD F7 | 	test	result1, #2 wz
1ef3c     0A 1E 06 56 |  if_ne	mov	local01, #10
1ef40                 | LR__2621
1ef40     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ef44     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ef48     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ef4c     01 12 CE F7 | 	test	arg01, #1 wz
1ef50     1C 00 90 AD |  if_e	jmp	#LR__2624
1ef54     7F 1E 0E F2 | 	cmp	local01, #127 wz
1ef58     0C 00 90 5D |  if_ne	jmp	#LR__2622
1ef5c     08 12 06 F6 | 	mov	arg01, #8
1ef60     60 FF BF FD | 	call	#__system___tx
1ef64     08 00 90 FD | 	jmp	#LR__2623
1ef68                 | LR__2622
1ef68     0F 13 02 F6 | 	mov	arg01, local01
1ef6c     54 FF BF FD | 	call	#__system___tx
1ef70                 | LR__2623
1ef70                 | LR__2624
1ef70     0F FB 01 F6 | 	mov	result1, local01
1ef74     A7 F0 03 F6 | 	mov	ptra, fp
1ef78     B2 00 A0 FD | 	call	#popregs_
1ef7c                 | __system___rx_ret
1ef7c     2D 00 64 FD | 	ret
1ef80                 | 
1ef80                 | __system___pinwrite
1ef80     09 01 02 F6 | 	mov	_var01, arg01
1ef84     1F 00 06 F5 | 	and	_var01, #31
1ef88     20 12 CE F7 | 	test	arg01, #32 wz
1ef8c     06 12 46 F0 | 	shr	arg01, #6
1ef90     09 13 CA F9 | 	bmask	arg01, arg01
1ef94     00 13 62 F0 | 	shl	arg01, _var01
1ef98     00 15 62 F0 | 	shl	arg02, _var01
1ef9c     1C 00 90 AD |  if_e	jmp	#LR__2630
1efa0     09 F7 43 F5 | 	or	dirb, arg01
1efa4     FD 01 02 F6 | 	mov	_var01, outb
1efa8     09 01 22 F5 | 	andn	_var01, arg01
1efac     09 15 02 F5 | 	and	arg02, arg01
1efb0     0A 01 42 F5 | 	or	_var01, arg02
1efb4     00 FB 03 F6 | 	mov	outb, _var01
1efb8     18 00 90 FD | 	jmp	#LR__2631
1efbc                 | LR__2630
1efbc     09 F5 43 F5 | 	or	dira, arg01
1efc0     FC 01 02 F6 | 	mov	_var01, outa
1efc4     09 01 22 F5 | 	andn	_var01, arg01
1efc8     09 15 02 F5 | 	and	arg02, arg01
1efcc     0A 01 42 F5 | 	or	_var01, arg02
1efd0     00 F9 03 F6 | 	mov	outa, _var01
1efd4                 | LR__2631
1efd4                 | __system___pinwrite_ret
1efd4     2D 00 64 FD | 	ret
1efd8                 | 
1efd8                 | __system___basic_read_line
1efd8     06 4A 05 F6 | 	mov	COUNT_, #6
1efdc     A8 00 A0 FD | 	call	#pushregs_
1efe0     09 1F 02 F6 | 	mov	local01, arg01
1efe4     00 20 06 F6 | 	mov	local02, #0
1efe8     18 22 06 F6 | 	mov	local03, #24
1efec     00 24 06 F6 | 	mov	local04, #0
1eff0     18 12 06 F6 | 	mov	arg01, #24
1eff4     20 3C B0 FD | 	call	#__system___gc_alloc_managed
1eff8     FD 26 0A F6 | 	mov	local05, result1 wz
1effc     13 FB 01 A6 |  if_e	mov	result1, local05
1f000     B0 00 90 AD |  if_e	jmp	#LR__2643
1f004                 | LR__2640
1f004     0F 13 02 F6 | 	mov	arg01, local01
1f008     78 0B B0 FD | 	call	#__system___basic_get_char
1f00c     FD 28 02 F6 | 	mov	local06, result1
1f010     01 28 56 F2 | 	cmps	local06, #1 wc
1f014     8C 00 90 CD |  if_b	jmp	#LR__2642
1f018     0A 28 0E F2 | 	cmp	local06, #10 wz
1f01c     10 00 90 5D |  if_ne	jmp	#LR__2641
1f020     00 24 0E F2 | 	cmp	local04, #0 wz
1f024     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1f028     01 20 86 11 |  if_a	sub	local02, #1
1f02c     74 00 90 FD | 	jmp	#LR__2642
1f030                 | LR__2641
1f030     0D 28 0E F2 | 	cmp	local06, #13 wz
1f034     01 24 06 A6 |  if_e	mov	local04, #1
1f038     00 24 06 56 |  if_ne	mov	local04, #0
1f03c     08 28 0E F2 | 	cmp	local06, #8 wz
1f040     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1f044     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1f048     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1f04c     B4 FF 9F AD |  if_e	jmp	#LR__2640
1f050     13 17 02 F6 | 	mov	arg03, local05
1f054     10 17 02 F1 | 	add	arg03, local02
1f058     0B 29 42 FC | 	wrbyte	local06, arg03
1f05c     01 20 06 F1 | 	add	local02, #1
1f060     11 21 0A F2 | 	cmp	local02, local03 wz
1f064     9C FF 9F 5D |  if_ne	jmp	#LR__2640
1f068     11 13 02 F6 | 	mov	arg01, local03
1f06c     20 12 06 F1 | 	add	arg01, #32
1f070     A4 3B B0 FD | 	call	#__system___gc_alloc_managed
1f074     FD 28 0A F6 | 	mov	local06, result1 wz
1f078     14 FB 01 A6 |  if_e	mov	result1, local06
1f07c     34 00 90 AD |  if_e	jmp	#LR__2643
1f080     14 13 02 F6 | 	mov	arg01, local06
1f084     13 15 02 F6 | 	mov	arg02, local05
1f088     11 17 02 F6 | 	mov	arg03, local03
1f08c     5C FC BF FD | 	call	#__system____builtin_memmove
1f090     20 22 06 F1 | 	add	local03, #32
1f094     13 13 02 F6 | 	mov	arg01, local05
1f098     B8 3C B0 FD | 	call	#__system___gc_free
1f09c     14 27 02 F6 | 	mov	local05, local06
1f0a0     60 FF 9F FD | 	jmp	#LR__2640
1f0a4                 | LR__2642
1f0a4     13 29 02 F6 | 	mov	local06, local05
1f0a8     10 29 02 F1 | 	add	local06, local02
1f0ac     14 01 48 FC | 	wrbyte	#0, local06
1f0b0     13 FB 01 F6 | 	mov	result1, local05
1f0b4                 | LR__2643
1f0b4     A7 F0 03 F6 | 	mov	ptra, fp
1f0b8     B2 00 A0 FD | 	call	#popregs_
1f0bc                 | __system___basic_read_line_ret
1f0bc     2D 00 64 FD | 	ret
1f0c0                 | 
1f0c0                 | __system___waitms
1f0c0     09 01 02 F6 | 	mov	_var01, arg01
1f0c4     1A 02 62 FD | 	getct	_var02
1f0c8     14 04 06 FB | 	rdlong	_var03, #20
1f0cc     97 14 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1f0d0                 | LR__2650
1f0d0     01 00 00 FF 
1f0d4     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1f0d8     1C 00 90 CD |  if_b	jmp	#LR__2652
1f0dc     02 03 02 F1 | 	add	_var02, _var03
1f0e0     01 13 02 F6 | 	mov	arg01, _var02
1f0e4     00 12 66 FA | 	addct1	arg01, #0
1f0e8     24 22 60 FD | 	waitct1
1f0ec     01 00 00 FF 
1f0f0     E8 01 86 F1 | 	sub	_var01, ##1000
1f0f4     D8 FF 9F FD | 	jmp	#LR__2650
1f0f8                 | LR__2651
1f0f8                 | LR__2652
1f0f8     01 00 56 F2 | 	cmps	_var01, #1 wc
1f0fc     28 00 90 CD |  if_b	jmp	#LR__2653
1f100     02 01 02 FD | 	qmul	_var01, _var03
1f104     01 00 00 FF 
1f108     E8 17 06 F6 | 	mov	arg03, ##1000
1f10c     19 FA 61 FD | 	getqy	result1
1f110     18 12 62 FD | 	getqx	arg01
1f114     28 FA 61 FD | 	setq	result1
1f118     0B 13 12 FD | 	qdiv	arg01, arg03
1f11c     18 12 62 FD | 	getqx	arg01
1f120     01 13 62 FA | 	addct1	arg01, _var02
1f124     24 22 60 FD | 	waitct1
1f128                 | LR__2653
1f128                 | __system___waitms_ret
1f128     2D 00 64 FD | 	ret
1f12c                 | 
1f12c                 | __system___waitus
1f12c     09 01 02 F6 | 	mov	_var01, arg01
1f130     1A 02 62 FD | 	getct	_var02
1f134     14 04 06 FB | 	rdlong	_var03, #20
1f138     97 14 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1f13c                 | LR__2660
1f13c     A1 07 00 FF 
1f140     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1f144     1C 00 90 CD |  if_b	jmp	#LR__2662
1f148     02 03 02 F1 | 	add	_var02, _var03
1f14c     01 13 02 F6 | 	mov	arg01, _var02
1f150     00 12 66 FA | 	addct1	arg01, #0
1f154     24 22 60 FD | 	waitct1
1f158     A1 07 00 FF 
1f15c     40 00 86 F1 | 	sub	_var01, ##1000000
1f160     D8 FF 9F FD | 	jmp	#LR__2660
1f164                 | LR__2661
1f164                 | LR__2662
1f164     01 00 56 F2 | 	cmps	_var01, #1 wc
1f168     28 00 90 CD |  if_b	jmp	#LR__2663
1f16c     02 01 02 FD | 	qmul	_var01, _var03
1f170     A1 07 00 FF 
1f174     40 16 06 F6 | 	mov	arg03, ##1000000
1f178     19 FA 61 FD | 	getqy	result1
1f17c     18 12 62 FD | 	getqx	arg01
1f180     28 FA 61 FD | 	setq	result1
1f184     0B 13 12 FD | 	qdiv	arg01, arg03
1f188     18 FA 61 FD | 	getqx	result1
1f18c     FD 02 62 FA | 	addct1	_var02, result1
1f190     24 22 60 FD | 	waitct1
1f194                 | LR__2663
1f194                 | __system___waitus_ret
1f194     2D 00 64 FD | 	ret
1f198                 | 
1f198                 | __system___mount
1f198     0B 4A 05 F6 | 	mov	COUNT_, #11
1f19c     A8 00 A0 FD | 	call	#pushregs_
1f1a0     09 1F 02 F6 | 	mov	local01, arg01
1f1a4     0A 21 0A F6 | 	mov	local02, arg02 wz
1f1a8     01 22 66 F6 | 	neg	local03, #1
1f1ac     01 FA 65 A6 |  if_e	neg	result1, #1
1f1b0     98 02 90 AD |  if_e	jmp	#LR__2685
1f1b4     0F FB C1 FA | 	rdbyte	result1, local01
1f1b8     2F FA 0D F2 | 	cmp	result1, #47 wz
1f1bc     28 00 90 5D |  if_ne	jmp	#LR__2672
1f1c0     0F 13 02 F6 | 	mov	arg01, local01
1f1c4     09 25 02 F6 | 	mov	local04, arg01
1f1c8     97 06 48 FB | 	callpa	#(@LR__2671-@LR__2670)>>2,fcache_load_ptr_
1f1cc                 | LR__2670
1f1cc     12 FB C9 FA | 	rdbyte	result1, local04 wz
1f1d0     01 24 06 51 |  if_ne	add	local04, #1
1f1d4     F4 FF 9F 5D |  if_ne	jmp	#LR__2670
1f1d8                 | LR__2671
1f1d8     09 25 82 F1 | 	sub	local04, arg01
1f1dc     12 FB 01 F6 | 	mov	result1, local04
1f1e0     10 FA 55 F2 | 	cmps	result1, #16 wc
1f1e4     14 00 90 CD |  if_b	jmp	#LR__2673
1f1e8                 | LR__2672
1f1e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f1ec     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1f1f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f1f4     01 FA 65 F6 | 	neg	result1, #1
1f1f8     50 02 90 FD | 	jmp	#LR__2685
1f1fc                 | LR__2673
1f1fc     00 26 06 F6 | 	mov	local05, #0
1f200                 | LR__2674
1f200     04 26 56 F2 | 	cmps	local05, #4 wc
1f204     B0 00 90 3D |  if_ae	jmp	#LR__2679
1f208     13 13 02 F6 | 	mov	arg01, local05
1f20c     02 12 66 F0 | 	shl	arg01, #2
1f210     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f214     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1f218     09 FB 09 FB | 	rdlong	result1, arg01 wz
1f21c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f220     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1f224     13 23 02 86 |  if_c_and_z	mov	local03, local05
1f228     84 00 90 8D |  if_c_and_z	jmp	#LR__2678
1f22c     13 13 02 F6 | 	mov	arg01, local05
1f230     02 12 66 F0 | 	shl	arg01, #2
1f234     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f238     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1f23c     09 13 02 FB | 	rdlong	arg01, arg01
1f240     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f244     09 25 02 F6 | 	mov	local04, arg01
1f248     97 06 48 FB | 	callpa	#(@LR__2676-@LR__2675)>>2,fcache_load_ptr_
1f24c                 | LR__2675
1f24c     12 FB C9 FA | 	rdbyte	result1, local04 wz
1f250     01 24 06 51 |  if_ne	add	local04, #1
1f254     F4 FF 9F 5D |  if_ne	jmp	#LR__2675
1f258                 | LR__2676
1f258     09 25 82 F1 | 	sub	local04, arg01
1f25c     12 29 02 F6 | 	mov	local06, local04
1f260     14 13 02 F6 | 	mov	arg01, local06
1f264     0F 13 02 F1 | 	add	arg01, local01
1f268     09 FB C1 FA | 	rdbyte	result1, arg01
1f26c     2F FA 0D F2 | 	cmp	result1, #47 wz
1f270     14 2B 02 56 |  if_ne	mov	local07, local06
1f274     0F 2B 02 51 |  if_ne	add	local07, local01
1f278     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1f27c     30 00 90 5D |  if_ne	jmp	#LR__2677
1f280     13 17 02 F6 | 	mov	arg03, local05
1f284     02 16 66 F0 | 	shl	arg03, #2
1f288     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f28c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1f290     0B 15 02 FB | 	rdlong	arg02, arg03
1f294     0F 13 02 F6 | 	mov	arg01, local01
1f298     14 17 02 F6 | 	mov	arg03, local06
1f29c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f2a0     B8 4D B0 FD | 	call	#__system__strncmp
1f2a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1f2a8     13 23 02 A6 |  if_e	mov	local03, local05
1f2ac     08 00 90 AD |  if_e	jmp	#LR__2679
1f2b0                 | LR__2677
1f2b0                 | LR__2678
1f2b0     01 26 06 F1 | 	add	local05, #1
1f2b4     48 FF 9F FD | 	jmp	#LR__2674
1f2b8                 | LR__2679
1f2b8     FF FF 7F FF 
1f2bc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1f2c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f2c4     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1f2c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f2cc     01 FA 65 A6 |  if_e	neg	result1, #1
1f2d0     78 01 90 AD |  if_e	jmp	#LR__2685
1f2d4     11 27 02 F6 | 	mov	local05, local03
1f2d8     13 2B 02 F6 | 	mov	local07, local05
1f2dc     02 2A 66 F0 | 	shl	local07, #2
1f2e0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f2e4     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1f2e8     15 29 0A FB | 	rdlong	local06, local07 wz
1f2ec     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f2f0     58 00 90 AD |  if_e	jmp	#LR__2680
1f2f4     4C 28 06 F1 | 	add	local06, #76
1f2f8     14 2B 0A FB | 	rdlong	local07, local06 wz
1f2fc     4C 28 86 F1 | 	sub	local06, #76
1f300     48 00 90 AD |  if_e	jmp	#LR__2680
1f304     4C 28 06 F1 | 	add	local06, #76
1f308     14 2B 02 FB | 	rdlong	local07, local06
1f30c     15 23 02 F6 | 	mov	local03, local07
1f310     13 2A 46 F7 | 	zerox	local07, #19
1f314     14 22 46 F0 | 	shr	local03, #20
1f318     02 22 66 F0 | 	shl	local03, #2
1f31c     ED 22 02 F1 | 	add	local03, __methods__
1f320     11 23 02 FB | 	rdlong	local03, local03
1f324     13 29 02 F6 | 	mov	local06, local05
1f328     02 28 66 F0 | 	shl	local06, #2
1f32c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f330     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f334     14 13 02 FB | 	rdlong	arg01, local06
1f338     F2 28 02 F6 | 	mov	local06, objptr
1f33c     15 E5 01 F6 | 	mov	objptr, local07
1f340     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f344     2D 22 62 FD | 	call	local03
1f348     14 E5 01 F6 | 	mov	objptr, local06
1f34c                 | LR__2680
1f34c     13 2D 02 F6 | 	mov	local08, local05
1f350     02 2C 66 F0 | 	shl	local08, #2
1f354     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f358     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f35c     16 21 62 FC | 	wrlong	local02, local08
1f360     00 20 0E F2 | 	cmp	local02, #0 wz
1f364     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f368     18 00 90 5D |  if_ne	jmp	#LR__2681
1f36c     02 26 66 F0 | 	shl	local05, #2
1f370     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f374     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f378     13 01 68 FC | 	wrlong	#0, local05
1f37c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f380     C4 00 90 FD | 	jmp	#LR__2684
1f384                 | LR__2681
1f384     13 2F 02 F6 | 	mov	local09, local05
1f388     04 2E 66 F0 | 	shl	local09, #4
1f38c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1f390     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1f394     17 13 02 F6 | 	mov	arg01, local09
1f398     0F 15 02 F6 | 	mov	arg02, local01
1f39c     10 16 06 F6 | 	mov	arg03, #16
1f3a0     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1f3a4     08 4C B0 FD | 	call	#__system__strncpy
1f3a8     48 20 06 F1 | 	add	local02, #72
1f3ac     10 2D 0A FB | 	rdlong	local08, local02 wz
1f3b0     48 20 86 F1 | 	sub	local02, #72
1f3b4     7C 00 90 AD |  if_e	jmp	#LR__2683
1f3b8     48 20 06 F1 | 	add	local02, #72
1f3bc     10 2D 02 FB | 	rdlong	local08, local02
1f3c0     16 31 02 F6 | 	mov	local10, local08
1f3c4     13 2C 46 F7 | 	zerox	local08, #19
1f3c8     14 30 46 F0 | 	shr	local10, #20
1f3cc     02 30 66 F0 | 	shl	local10, #2
1f3d0     ED 30 02 F1 | 	add	local10, __methods__
1f3d4     18 31 02 FB | 	rdlong	local10, local10
1f3d8     17 13 02 F6 | 	mov	arg01, local09
1f3dc     F2 32 02 F6 | 	mov	local11, objptr
1f3e0     16 E5 01 F6 | 	mov	objptr, local08
1f3e4     2D 30 62 FD | 	call	local10
1f3e8     19 E5 01 F6 | 	mov	objptr, local11
1f3ec     FD 12 0A F6 | 	mov	arg01, result1 wz
1f3f0     40 00 90 AD |  if_e	jmp	#LR__2682
1f3f4     13 2D 02 F6 | 	mov	local08, local05
1f3f8     02 2C 66 F0 | 	shl	local08, #2
1f3fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f400     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f404     16 01 68 FC | 	wrlong	#0, local08
1f408     02 26 66 F0 | 	shl	local05, #2
1f40c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1f410     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f414     13 01 68 FC | 	wrlong	#0, local05
1f418     09 13 6A F6 | 	neg	arg01, arg01 wz
1f41c     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1f420     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f424     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f428     01 FA 65 56 |  if_ne	neg	result1, #1
1f42c     00 FA 05 A6 |  if_e	mov	result1, #0
1f430     18 00 90 FD | 	jmp	#LR__2685
1f434                 | LR__2682
1f434                 | LR__2683
1f434     02 26 66 F0 | 	shl	local05, #2
1f438     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f43c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f440     13 2F 62 FC | 	wrlong	local09, local05
1f444     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f448                 | LR__2684
1f448     00 FA 05 F6 | 	mov	result1, #0
1f44c                 | LR__2685
1f44c     A7 F0 03 F6 | 	mov	ptra, fp
1f450     B2 00 A0 FD | 	call	#popregs_
1f454                 | __system___mount_ret
1f454     2D 00 64 FD | 	ret
1f458                 | 
1f458                 | __system___chdir
1f458     00 4A 05 F6 | 	mov	COUNT_, #0
1f45c     A8 00 A0 FD | 	call	#pushregs_
1f460     40 F0 07 F1 | 	add	ptra, #64
1f464     04 4E 05 F1 | 	add	fp, #4
1f468     A7 12 62 FC | 	wrlong	arg01, fp
1f46c     04 4E 05 F1 | 	add	fp, #4
1f470     A7 14 02 F6 | 	mov	arg02, fp
1f474     08 4E 85 F1 | 	sub	fp, #8
1f478     14 48 B0 FD | 	call	#__system__stat
1f47c     3C 4E 05 F1 | 	add	fp, #60
1f480     A7 FA 61 FC | 	wrlong	result1, fp
1f484     3C 4E 85 F1 | 	sub	fp, #60
1f488     00 FA 0D F2 | 	cmp	result1, #0 wz
1f48c     3C 4E 05 51 |  if_ne	add	fp, #60
1f490     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1f494     3C 4E 85 51 |  if_ne	sub	fp, #60
1f498     BC 00 90 5D |  if_ne	jmp	#LR__2692
1f49c     10 4E 05 F1 | 	add	fp, #16
1f4a0     A7 12 02 FB | 	rdlong	arg01, fp
1f4a4     10 4E 85 F1 | 	sub	fp, #16
1f4a8     78 00 00 FF 
1f4ac     00 12 06 F5 | 	and	arg01, ##61440
1f4b0     08 00 00 FF 
1f4b4     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1f4b8     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1f4bc     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1f4c0     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1f4c4     01 FA 65 56 |  if_ne	neg	result1, #1
1f4c8     8C 00 90 5D |  if_ne	jmp	#LR__2692
1f4cc     04 4E 05 F1 | 	add	fp, #4
1f4d0     A7 16 02 FB | 	rdlong	arg03, fp
1f4d4     04 4E 85 F1 | 	sub	fp, #4
1f4d8     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f4dc     2F 16 0E F2 | 	cmp	arg03, #47 wz
1f4e0     24 00 90 5D |  if_ne	jmp	#LR__2690
1f4e4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f4e8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f4ec     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f4f0     04 4E 05 F1 | 	add	fp, #4
1f4f4     A7 14 02 FB | 	rdlong	arg02, fp
1f4f8     04 4E 85 F1 | 	sub	fp, #4
1f4fc     00 17 06 F6 | 	mov	arg03, #256
1f500     AC 4A B0 FD | 	call	#__system__strncpy
1f504     4C 00 90 FD | 	jmp	#LR__2691
1f508                 | LR__2690
1f508     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f50c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f510     38 4E 05 F1 | 	add	fp, #56
1f514     A7 12 62 FC | 	wrlong	arg01, fp
1f518     38 4E 85 F1 | 	sub	fp, #56
1f51c     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1f520     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f524     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f528     00 17 06 F6 | 	mov	arg03, #256
1f52c     80 4A B0 FD | 	call	#__system__strncpy
1f530     38 4E 05 F1 | 	add	fp, #56
1f534     A7 12 02 FB | 	rdlong	arg01, fp
1f538     34 4E 85 F1 | 	sub	fp, #52
1f53c     A7 14 02 FB | 	rdlong	arg02, fp
1f540     04 4E 85 F1 | 	sub	fp, #4
1f544     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f548     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1f54c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f550     10 00 B0 FD | 	call	#__system____getvfsforfile
1f554                 | LR__2691
1f554     00 FA 05 F6 | 	mov	result1, #0
1f558                 | LR__2692
1f558     A7 F0 03 F6 | 	mov	ptra, fp
1f55c     B2 00 A0 FD | 	call	#popregs_
1f560                 | __system___chdir_ret
1f560     2D 00 64 FD | 	ret
1f564                 | 
1f564                 | __system____getvfsforfile
1f564     0E 4A 05 F6 | 	mov	COUNT_, #14
1f568     A8 00 A0 FD | 	call	#pushregs_
1f56c     09 1F 02 F6 | 	mov	local01, arg01
1f570     0A 21 02 F6 | 	mov	local02, arg02
1f574     0B 23 02 F6 | 	mov	local03, arg03
1f578     97 10 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1f57c                 | LR__2700
1f57c     10 FB C1 FA | 	rdbyte	result1, local02
1f580     2F FA 0D F2 | 	cmp	result1, #47 wz
1f584     01 20 06 A1 |  if_e	add	local02, #1
1f588     10 25 C2 AA |  if_e	rdbyte	local04, local02
1f58c     01 20 86 A1 |  if_e	sub	local02, #1
1f590     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1f594     01 20 06 A1 |  if_e	add	local02, #1
1f598     E0 FF 9F AD |  if_e	jmp	#LR__2700
1f59c                 | LR__2701
1f59c     10 25 C2 FA | 	rdbyte	local04, local02
1f5a0     2F 24 0E F2 | 	cmp	local04, #47 wz
1f5a4     14 00 90 5D |  if_ne	jmp	#LR__2702
1f5a8     0F 13 02 F6 | 	mov	arg01, local01
1f5ac     10 15 02 F6 | 	mov	arg02, local02
1f5b0     00 17 06 F6 | 	mov	arg03, #256
1f5b4     F8 49 B0 FD | 	call	#__system__strncpy
1f5b8     7C 00 90 FD | 	jmp	#LR__2704
1f5bc                 | LR__2702
1f5bc     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f5c0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f5c4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f5c8     0F 13 02 F6 | 	mov	arg01, local01
1f5cc     00 17 06 F6 | 	mov	arg03, #256
1f5d0     DC 49 B0 FD | 	call	#__system__strncpy
1f5d4     10 25 CA FA | 	rdbyte	local04, local02 wz
1f5d8     5C 00 90 AD |  if_e	jmp	#LR__2703
1f5dc     10 25 C2 FA | 	rdbyte	local04, local02
1f5e0     2E 24 0E F2 | 	cmp	local04, #46 wz
1f5e4     01 20 06 A1 |  if_e	add	local02, #1
1f5e8     10 27 C2 AA |  if_e	rdbyte	local05, local02
1f5ec     01 20 86 A1 |  if_e	sub	local02, #1
1f5f0     13 29 02 A6 |  if_e	mov	local06, local05
1f5f4     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1f5f8     3C 00 90 AD |  if_e	jmp	#LR__2703
1f5fc     0F 27 C2 FA | 	rdbyte	local05, local01
1f600     2F 26 0E F2 | 	cmp	local05, #47 wz
1f604     01 1E 06 A1 |  if_e	add	local01, #1
1f608     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1f60c     01 1E 86 A1 |  if_e	sub	local01, #1
1f610     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1f614     71 01 00 5F 
1f618     80 15 06 56 |  if_ne	mov	arg02, ##@LR__4760
1f61c     0F 13 02 56 |  if_ne	mov	arg01, local01
1f620     00 17 06 56 |  if_ne	mov	arg03, #256
1f624     D4 49 B0 5D |  if_ne	call	#__system__strncat
1f628     0F 13 02 F6 | 	mov	arg01, local01
1f62c     10 15 02 F6 | 	mov	arg02, local02
1f630     00 17 06 F6 | 	mov	arg03, #256
1f634     C4 49 B0 FD | 	call	#__system__strncat
1f638                 | LR__2703
1f638                 | LR__2704
1f638     0F 13 02 F6 | 	mov	arg01, local01
1f63c     7C 4B B0 FD | 	call	#__system___normalizeName
1f640     0F 25 CA FA | 	rdbyte	local04, local01 wz
1f644     1C 00 90 AD |  if_e	jmp	#LR__2705
1f648     0F 25 C2 FA | 	rdbyte	local04, local01
1f64c     2F 24 0E F2 | 	cmp	local04, #47 wz
1f650     01 1E 06 A1 |  if_e	add	local01, #1
1f654     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1f658     01 1E 86 A1 |  if_e	sub	local01, #1
1f65c     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1f660     18 00 90 5D |  if_ne	jmp	#LR__2706
1f664                 | LR__2705
1f664     01 00 00 FF 
1f668     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1f66c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1f670     01 00 00 FF 
1f674     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1f678     EC 01 90 FD | 	jmp	#LR__2720
1f67c                 | LR__2706
1f67c     00 2A 06 F6 | 	mov	local07, #0
1f680                 | LR__2707
1f680     04 2A 56 F2 | 	cmps	local07, #4 wc
1f684     CC 01 90 3D |  if_ae	jmp	#LR__2719
1f688     15 29 02 F6 | 	mov	local06, local07
1f68c     02 28 66 F0 | 	shl	local06, #2
1f690     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f694     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f698     14 29 0A FB | 	rdlong	local06, local06 wz
1f69c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f6a0     A8 01 90 AD |  if_e	jmp	#LR__2718
1f6a4     15 25 02 F6 | 	mov	local04, local07
1f6a8     02 24 66 F0 | 	shl	local04, #2
1f6ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f6b0     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1f6b4     12 13 02 FB | 	rdlong	arg01, local04
1f6b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f6bc     09 2D 02 F6 | 	mov	local08, arg01
1f6c0     97 06 48 FB | 	callpa	#(@LR__2709-@LR__2708)>>2,fcache_load_ptr_
1f6c4                 | LR__2708
1f6c4     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f6c8     01 2C 06 51 |  if_ne	add	local08, #1
1f6cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2708
1f6d0                 | LR__2709
1f6d0     09 2D 82 F1 | 	sub	local08, arg01
1f6d4     16 2F 02 F6 | 	mov	local09, local08
1f6d8     17 25 02 F6 | 	mov	local04, local09
1f6dc     0F 25 02 F1 | 	add	local04, local01
1f6e0     12 29 C2 FA | 	rdbyte	local06, local04
1f6e4     2F 28 0E F2 | 	cmp	local06, #47 wz
1f6e8     17 31 02 56 |  if_ne	mov	local10, local09
1f6ec     0F 31 02 51 |  if_ne	add	local10, local01
1f6f0     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1f6f4     54 01 90 5D |  if_ne	jmp	#LR__2717
1f6f8     15 17 02 F6 | 	mov	arg03, local07
1f6fc     02 16 66 F0 | 	shl	arg03, #2
1f700     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f704     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1f708     0B 15 02 FB | 	rdlong	arg02, arg03
1f70c     17 17 02 F6 | 	mov	arg03, local09
1f710     0F 13 02 F6 | 	mov	arg01, local01
1f714     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f718     40 49 B0 FD | 	call	#__system__strncmp
1f71c     00 FA 4D F2 | 	cmps	result1, #0 wz
1f720     28 01 90 5D |  if_ne	jmp	#LR__2717
1f724     15 33 02 F6 | 	mov	local11, local07
1f728     02 32 66 F0 | 	shl	local11, #2
1f72c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f730     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1f734     19 35 02 FB | 	rdlong	local12, local11
1f738     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f73c     97 22 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
1f740                 | LR__2710
1f740     17 29 02 F6 | 	mov	local06, local09
1f744     01 28 06 F1 | 	add	local06, #1
1f748     0F 29 02 F1 | 	add	local06, local01
1f74c     14 33 C2 FA | 	rdbyte	local11, local06
1f750     2E 32 0E F2 | 	cmp	local11, #46 wz
1f754     2C 00 90 5D |  if_ne	jmp	#LR__2712
1f758     17 33 02 F6 | 	mov	local11, local09
1f75c     02 32 06 F1 | 	add	local11, #2
1f760     0F 33 02 F1 | 	add	local11, local01
1f764     19 31 C2 FA | 	rdbyte	local10, local11
1f768     2F 30 0E F2 | 	cmp	local10, #47 wz
1f76c     17 37 02 56 |  if_ne	mov	local13, local09
1f770     02 36 06 51 |  if_ne	add	local13, #2
1f774     0F 37 02 51 |  if_ne	add	local13, local01
1f778     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1f77c     01 2E 06 A1 |  if_e	add	local09, #1
1f780     BC FF 9F AD |  if_e	jmp	#LR__2710
1f784                 | LR__2711
1f784                 | LR__2712
1f784     00 22 0E F2 | 	cmp	local03, #0 wz
1f788     11 13 02 56 |  if_ne	mov	arg01, local03
1f78c     0F 15 02 56 |  if_ne	mov	arg02, local01
1f790     00 17 06 56 |  if_ne	mov	arg03, #256
1f794     18 48 B0 5D |  if_ne	call	#__system__strncpy
1f798     0F 15 02 F6 | 	mov	arg02, local01
1f79c     17 15 02 F1 | 	add	arg02, local09
1f7a0     01 14 06 F1 | 	add	arg02, #1
1f7a4     0F 13 02 F6 | 	mov	arg01, local01
1f7a8     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1f7ac     0F 13 02 F6 | 	mov	arg01, local01
1f7b0     09 2D 02 F6 | 	mov	local08, arg01
1f7b4     97 06 48 FB | 	callpa	#(@LR__2714-@LR__2713)>>2,fcache_load_ptr_
1f7b8                 | LR__2713
1f7b8     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f7bc     01 2C 06 51 |  if_ne	add	local08, #1
1f7c0     F4 FF 9F 5D |  if_ne	jmp	#LR__2713
1f7c4                 | LR__2714
1f7c4     09 2D 82 F1 | 	sub	local08, arg01
1f7c8     16 2F 02 F6 | 	mov	local09, local08
1f7cc                 | LR__2715
1f7cc     01 2E 56 F2 | 	cmps	local09, #1 wc
1f7d0     70 00 90 CD |  if_b	jmp	#LR__2716
1f7d4     17 25 02 F6 | 	mov	local04, local09
1f7d8     0F 25 02 F1 | 	add	local04, local01
1f7dc     12 33 C2 FA | 	rdbyte	local11, local04
1f7e0     2F 32 0E F2 | 	cmp	local11, #47 wz
1f7e4     17 33 02 A6 |  if_e	mov	local11, local09
1f7e8     0F 33 02 A1 |  if_e	add	local11, local01
1f7ec     19 01 48 AC |  if_e	wrbyte	#0, local11
1f7f0     01 2E 86 A1 |  if_e	sub	local09, #1
1f7f4     D4 FF 9F AD |  if_e	jmp	#LR__2715
1f7f8     17 25 02 F6 | 	mov	local04, local09
1f7fc     0F 25 02 F1 | 	add	local04, local01
1f800     12 33 C2 FA | 	rdbyte	local11, local04
1f804     2E 32 0E F2 | 	cmp	local11, #46 wz
1f808     38 00 90 5D |  if_ne	jmp	#LR__2716
1f80c     02 2E 56 F2 | 	cmps	local09, #2 wc
1f810     30 00 90 CD |  if_b	jmp	#LR__2716
1f814     17 39 02 F6 | 	mov	local14, local09
1f818     01 38 86 F1 | 	sub	local14, #1
1f81c     0F 39 02 F1 | 	add	local14, local01
1f820     1C 27 C2 FA | 	rdbyte	local05, local14
1f824     2F 26 0E F2 | 	cmp	local05, #47 wz
1f828     18 00 90 5D |  if_ne	jmp	#LR__2716
1f82c     17 25 02 F6 | 	mov	local04, local09
1f830     01 24 86 F1 | 	sub	local04, #1
1f834     0F 25 02 F1 | 	add	local04, local01
1f838     12 01 48 FC | 	wrbyte	#0, local04
1f83c     02 2E 86 F1 | 	sub	local09, #2
1f840     88 FF 9F FD | 	jmp	#LR__2715
1f844                 | LR__2716
1f844     1A FB 01 F6 | 	mov	result1, local12
1f848     1C 00 90 FD | 	jmp	#LR__2720
1f84c                 | LR__2717
1f84c                 | LR__2718
1f84c     01 2A 06 F1 | 	add	local07, #1
1f850     2C FE 9F FD | 	jmp	#LR__2707
1f854                 | LR__2719
1f854     03 00 00 FF 
1f858     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1f85c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f860     03 00 00 FF 
1f864     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1f868                 | LR__2720
1f868     A7 F0 03 F6 | 	mov	ptra, fp
1f86c     B2 00 A0 FD | 	call	#popregs_
1f870                 | __system____getvfsforfile_ret
1f870     2D 00 64 FD | 	ret
1f874                 | 
1f874                 | __system___basic_open
1f874     05 4A 05 F6 | 	mov	COUNT_, #5
1f878     A8 00 A0 FD | 	call	#pushregs_
1f87c     0A 1F 02 F6 | 	mov	local01, arg02
1f880     0B 21 02 F6 | 	mov	local02, arg03
1f884     0C 23 02 F6 | 	mov	local03, arg04
1f888     00 24 06 F6 | 	mov	local04, #0
1f88c     F8 46 B0 FD | 	call	#__system____getftab
1f890     FD 26 0A F6 | 	mov	local05, result1 wz
1f894     18 00 90 5D |  if_ne	jmp	#LR__2730
1f898     EE 12 02 F6 | 	mov	arg01, abortchain
1f89c     0C 14 06 F6 | 	mov	arg02, #12
1f8a0     01 16 06 F6 | 	mov	arg03, #1
1f8a4     DA 00 A0 FD | 	call	#__longjmp
1f8a8     01 FA 65 F6 | 	neg	result1, #1
1f8ac     14 01 90 FD | 	jmp	#LR__2739
1f8b0                 | LR__2730
1f8b0     08 26 06 F1 | 	add	local05, #8
1f8b4     13 FB 09 FB | 	rdlong	result1, local05 wz
1f8b8     08 26 86 F1 | 	sub	local05, #8
1f8bc     13 13 02 56 |  if_ne	mov	arg01, local05
1f8c0     54 3E B0 5D |  if_ne	call	#__system___closeraw
1f8c4     00 1E 0E F2 | 	cmp	local01, #0 wz
1f8c8     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1f8cc     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1f8d0     3C 00 90 AD |  if_e	jmp	#LR__2732
1f8d4     0C 12 06 F6 | 	mov	arg01, #12
1f8d8     3C 33 B0 FD | 	call	#__system___gc_alloc_managed
1f8dc     FD 24 0A F6 | 	mov	local04, result1 wz
1f8e0     18 00 90 5D |  if_ne	jmp	#LR__2731
1f8e4     EE 12 02 F6 | 	mov	arg01, abortchain
1f8e8     07 14 06 F6 | 	mov	arg02, #7
1f8ec     01 16 06 F6 | 	mov	arg03, #1
1f8f0     DA 00 A0 FD | 	call	#__longjmp
1f8f4     01 FA 65 F6 | 	neg	result1, #1
1f8f8     C8 00 90 FD | 	jmp	#LR__2739
1f8fc                 | LR__2731
1f8fc     12 01 68 FC | 	wrlong	#0, local04
1f900     04 24 06 F1 | 	add	local04, #4
1f904     12 01 68 FC | 	wrlong	#0, local04
1f908     04 24 86 F1 | 	sub	local04, #4
1f90c     13 25 62 FC | 	wrlong	local04, local05
1f910                 | LR__2732
1f910     00 1E 0E F2 | 	cmp	local01, #0 wz
1f914     20 00 90 AD |  if_e	jmp	#LR__2733
1f918     12 1F 62 FC | 	wrlong	local01, local04
1f91c     12 FB 01 F6 | 	mov	result1, local04
1f920     00 28 04 FF 
1f924     00 FA 45 F5 | 	or	result1, ##139460608
1f928     1C 26 06 F1 | 	add	local05, #28
1f92c     13 FB 61 FC | 	wrlong	result1, local05
1f930     1C 26 86 F1 | 	sub	local05, #28
1f934     0C 00 90 FD | 	jmp	#LR__2734
1f938                 | LR__2733
1f938     1C 26 06 F1 | 	add	local05, #28
1f93c     13 01 68 FC | 	wrlong	#0, local05
1f940     1C 26 86 F1 | 	sub	local05, #28
1f944                 | LR__2734
1f944     00 20 0E F2 | 	cmp	local02, #0 wz
1f948     28 00 90 AD |  if_e	jmp	#LR__2735
1f94c     04 24 06 F1 | 	add	local04, #4
1f950     12 21 62 FC | 	wrlong	local02, local04
1f954     04 24 86 F1 | 	sub	local04, #4
1f958     12 FB 01 F6 | 	mov	result1, local04
1f95c     00 30 04 FF 
1f960     00 FA 45 F5 | 	or	result1, ##140509184
1f964     20 26 06 F1 | 	add	local05, #32
1f968     13 FB 61 FC | 	wrlong	result1, local05
1f96c     20 26 86 F1 | 	sub	local05, #32
1f970     0C 00 90 FD | 	jmp	#LR__2736
1f974                 | LR__2735
1f974     20 26 06 F1 | 	add	local05, #32
1f978     13 01 68 FC | 	wrlong	#0, local05
1f97c     20 26 86 F1 | 	sub	local05, #32
1f980                 | LR__2736
1f980     00 22 0E F2 | 	cmp	local03, #0 wz
1f984     24 00 90 AD |  if_e	jmp	#LR__2737
1f988     08 24 06 F1 | 	add	local04, #8
1f98c     12 23 62 FC | 	wrlong	local03, local04
1f990     08 24 86 F1 | 	sub	local04, #8
1f994     00 38 04 FF 
1f998     00 24 46 F5 | 	or	local04, ##141557760
1f99c     24 26 06 F1 | 	add	local05, #36
1f9a0     13 25 62 FC | 	wrlong	local04, local05
1f9a4     24 26 86 F1 | 	sub	local05, #36
1f9a8     0C 00 90 FD | 	jmp	#LR__2738
1f9ac                 | LR__2737
1f9ac     24 26 06 F1 | 	add	local05, #36
1f9b0     13 01 68 FC | 	wrlong	#0, local05
1f9b4     24 26 86 F1 | 	sub	local05, #36
1f9b8                 | LR__2738
1f9b8     08 26 06 F1 | 	add	local05, #8
1f9bc     13 0F 68 FC | 	wrlong	#7, local05
1f9c0     00 FA 05 F6 | 	mov	result1, #0
1f9c4                 | LR__2739
1f9c4     A7 F0 03 F6 | 	mov	ptra, fp
1f9c8     B2 00 A0 FD | 	call	#popregs_
1f9cc                 | __system___basic_open_ret
1f9cc     2D 00 64 FD | 	ret
1f9d0                 | 
1f9d0                 | __system___basic_open_string
1f9d0     04 4A 05 F6 | 	mov	COUNT_, #4
1f9d4     A8 00 A0 FD | 	call	#pushregs_
1f9d8     0A 1F 02 F6 | 	mov	local01, arg02
1f9dc     0B 21 02 F6 | 	mov	local02, arg03
1f9e0     A4 45 B0 FD | 	call	#__system____getftab
1f9e4     FD 22 0A F6 | 	mov	local03, result1 wz
1f9e8     18 00 90 5D |  if_ne	jmp	#LR__2740
1f9ec     EE 12 02 F6 | 	mov	arg01, abortchain
1f9f0     0C 14 06 F6 | 	mov	arg02, #12
1f9f4     01 16 06 F6 | 	mov	arg03, #1
1f9f8     DA 00 A0 FD | 	call	#__longjmp
1f9fc     01 FA 65 F6 | 	neg	result1, #1
1fa00     58 00 90 FD | 	jmp	#LR__2742
1fa04                 | LR__2740
1fa04     08 22 06 F1 | 	add	local03, #8
1fa08     11 19 0A FB | 	rdlong	arg04, local03 wz
1fa0c     08 22 86 F1 | 	sub	local03, #8
1fa10     11 13 02 56 |  if_ne	mov	arg01, local03
1fa14     00 3D B0 5D |  if_ne	call	#__system___closeraw
1fa18     0F 15 02 F6 | 	mov	arg02, local01
1fa1c     10 17 02 F6 | 	mov	arg03, local02
1fa20     11 13 02 F6 | 	mov	arg01, local03
1fa24     B6 19 06 F6 | 	mov	arg04, #438
1fa28     E8 39 B0 FD | 	call	#__system___openraw
1fa2c     FD 24 02 F6 | 	mov	local04, result1
1fa30     00 24 56 F2 | 	cmps	local04, #0 wc
1fa34     20 00 90 3D |  if_ae	jmp	#LR__2741
1fa38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1fa3c     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1fa40     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1fa44     EE 12 02 F6 | 	mov	arg01, abortchain
1fa48     01 16 06 F6 | 	mov	arg03, #1
1fa4c     DA 00 A0 FD | 	call	#__longjmp
1fa50     01 FA 65 F6 | 	neg	result1, #1
1fa54     04 00 90 FD | 	jmp	#LR__2742
1fa58                 | LR__2741
1fa58     12 FB 01 F6 | 	mov	result1, local04
1fa5c                 | LR__2742
1fa5c     A7 F0 03 F6 | 	mov	ptra, fp
1fa60     B2 00 A0 FD | 	call	#popregs_
1fa64                 | __system___basic_open_string_ret
1fa64     2D 00 64 FD | 	ret
1fa68                 | 
1fa68                 | __system___basic_print_char
1fa68     03 4A 05 F6 | 	mov	COUNT_, #3
1fa6c     A8 00 A0 FD | 	call	#pushregs_
1fa70     0A 1F 02 F6 | 	mov	local01, arg02
1fa74     64 4C B0 FD | 	call	#__system___gettxfunc
1fa78     FD 20 0A F6 | 	mov	local02, result1 wz
1fa7c     00 FA 05 A6 |  if_e	mov	result1, #0
1fa80     30 00 90 AD |  if_e	jmp	#LR__2750
1fa84     10 23 02 F6 | 	mov	local03, local02
1fa88     13 20 46 F7 | 	zerox	local02, #19
1fa8c     14 22 46 F0 | 	shr	local03, #20
1fa90     02 22 66 F0 | 	shl	local03, #2
1fa94     ED 22 02 F1 | 	add	local03, __methods__
1fa98     11 23 02 FB | 	rdlong	local03, local03
1fa9c     0F 13 02 F6 | 	mov	arg01, local01
1faa0     F2 1E 02 F6 | 	mov	local01, objptr
1faa4     10 E5 01 F6 | 	mov	objptr, local02
1faa8     2D 22 62 FD | 	call	local03
1faac     0F E5 01 F6 | 	mov	objptr, local01
1fab0     01 FA 05 F6 | 	mov	result1, #1
1fab4                 | LR__2750
1fab4     A7 F0 03 F6 | 	mov	ptra, fp
1fab8     B2 00 A0 FD | 	call	#popregs_
1fabc                 | __system___basic_print_char_ret
1fabc     2D 00 64 FD | 	ret
1fac0                 | 
1fac0                 | __system___basic_print_string
1fac0     03 4A 05 F6 | 	mov	COUNT_, #3
1fac4     A8 00 A0 FD | 	call	#pushregs_
1fac8     0A 1F 02 F6 | 	mov	local01, arg02
1facc     0B 21 02 F6 | 	mov	local02, arg03
1fad0     08 4C B0 FD | 	call	#__system___gettxfunc
1fad4     FD 22 0A F6 | 	mov	local03, result1 wz
1fad8     00 FA 05 A6 |  if_e	mov	result1, #0
1fadc     18 00 90 AD |  if_e	jmp	#LR__2760
1fae0     00 1E 0E F2 | 	cmp	local01, #0 wz
1fae4     00 FA 05 A6 |  if_e	mov	result1, #0
1fae8     11 13 02 56 |  if_ne	mov	arg01, local03
1faec     10 15 02 56 |  if_ne	mov	arg02, local02
1faf0     0F 17 02 56 |  if_ne	mov	arg03, local01
1faf4     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
1faf8                 | LR__2760
1faf8     A7 F0 03 F6 | 	mov	ptra, fp
1fafc     B2 00 A0 FD | 	call	#popregs_
1fb00                 | __system___basic_print_string_ret
1fb00     2D 00 64 FD | 	ret
1fb04                 | 
1fb04                 | __system___basic_print_integer
1fb04     04 4A 05 F6 | 	mov	COUNT_, #4
1fb08     A8 00 A0 FD | 	call	#pushregs_
1fb0c     0A 1F 02 F6 | 	mov	local01, arg02
1fb10     0B 21 02 F6 | 	mov	local02, arg03
1fb14     0C 23 02 F6 | 	mov	local03, arg04
1fb18     C0 4B B0 FD | 	call	#__system___gettxfunc
1fb1c     FD 24 0A F6 | 	mov	local04, result1 wz
1fb20     00 FA 05 A6 |  if_e	mov	result1, #0
1fb24     12 13 02 56 |  if_ne	mov	arg01, local04
1fb28     10 15 02 56 |  if_ne	mov	arg02, local02
1fb2c     0F 17 02 56 |  if_ne	mov	arg03, local01
1fb30     11 19 02 56 |  if_ne	mov	arg04, local03
1fb34     48 02 B0 5D |  if_ne	call	#__system___fmtnum
1fb38     A7 F0 03 F6 | 	mov	ptra, fp
1fb3c     B2 00 A0 FD | 	call	#popregs_
1fb40                 | __system___basic_print_integer_ret
1fb40     2D 00 64 FD | 	ret
1fb44                 | 
1fb44                 | __system___basic_print_unsigned
1fb44     03 4A 05 F6 | 	mov	COUNT_, #3
1fb48     A8 00 A0 FD | 	call	#pushregs_
1fb4c     0A 1F 02 F6 | 	mov	local01, arg02
1fb50     0B 21 02 F6 | 	mov	local02, arg03
1fb54     0C 23 02 F6 | 	mov	local03, arg04
1fb58     80 4B B0 FD | 	call	#__system___gettxfunc
1fb5c     FD 12 0A F6 | 	mov	arg01, result1 wz
1fb60     00 FA 05 A6 |  if_e	mov	result1, #0
1fb64     3A 20 26 54 |  if_ne	bith	local02, #58
1fb68     10 15 02 56 |  if_ne	mov	arg02, local02
1fb6c     0F 17 02 56 |  if_ne	mov	arg03, local01
1fb70     11 19 02 56 |  if_ne	mov	arg04, local03
1fb74     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1fb78     A7 F0 03 F6 | 	mov	ptra, fp
1fb7c     B2 00 A0 FD | 	call	#popregs_
1fb80                 | __system___basic_print_unsigned_ret
1fb80     2D 00 64 FD | 	ret
1fb84                 | 
1fb84                 | __system___basic_get_char
1fb84     03 4A 05 F6 | 	mov	COUNT_, #3
1fb88     A8 00 A0 FD | 	call	#pushregs_
1fb8c     90 4B B0 FD | 	call	#__system___getrxfunc
1fb90     FD 1E 0A F6 | 	mov	local01, result1 wz
1fb94     01 FA 65 A6 |  if_e	neg	result1, #1
1fb98     28 00 90 AD |  if_e	jmp	#LR__2770
1fb9c     0F 21 02 F6 | 	mov	local02, local01
1fba0     13 1E 46 F7 | 	zerox	local01, #19
1fba4     14 20 46 F0 | 	shr	local02, #20
1fba8     02 20 66 F0 | 	shl	local02, #2
1fbac     ED 20 02 F1 | 	add	local02, __methods__
1fbb0     10 21 02 FB | 	rdlong	local02, local02
1fbb4     F2 22 02 F6 | 	mov	local03, objptr
1fbb8     0F E5 01 F6 | 	mov	objptr, local01
1fbbc     2D 20 62 FD | 	call	local02
1fbc0     11 E5 01 F6 | 	mov	objptr, local03
1fbc4                 | LR__2770
1fbc4     A7 F0 03 F6 | 	mov	ptra, fp
1fbc8     B2 00 A0 FD | 	call	#popregs_
1fbcc                 | __system___basic_get_char_ret
1fbcc     2D 00 64 FD | 	ret
1fbd0                 | 
1fbd0                 | __system___basic_get
1fbd0     04 4A 05 F6 | 	mov	COUNT_, #4
1fbd4     A8 00 A0 FD | 	call	#pushregs_
1fbd8     0D 1F 02 F6 | 	mov	local01, arg05
1fbdc     0F 19 02 FD | 	qmul	arg04, local01
1fbe0     09 21 02 F6 | 	mov	local02, arg01
1fbe4     0B 23 02 F6 | 	mov	local03, arg03
1fbe8     00 14 0E F2 | 	cmp	arg02, #0 wz
1fbec     01 14 86 51 |  if_ne	sub	arg02, #1
1fbf0     10 13 02 56 |  if_ne	mov	arg01, local02
1fbf4     00 16 06 56 |  if_ne	mov	arg03, #0
1fbf8     18 24 62 FD | 	getqx	local04
1fbfc     D0 41 B0 5D |  if_ne	call	#__system__lseek
1fc00     11 15 02 F6 | 	mov	arg02, local03
1fc04     12 17 02 F6 | 	mov	arg03, local04
1fc08     10 13 02 F6 | 	mov	arg01, local02
1fc0c     48 41 B0 FD | 	call	#__system__read
1fc10     FD 24 02 F6 | 	mov	local04, result1
1fc14     01 24 56 F2 | 	cmps	local04, #1 wc
1fc18     10 00 90 CD |  if_b	jmp	#LR__2780
1fc1c     12 65 02 F6 | 	mov	muldiva_, local04
1fc20     0F 67 02 F6 | 	mov	muldivb_, local01
1fc24     BA 00 A0 FD | 	call	#divide_
1fc28     33 25 02 F6 | 	mov	local04, muldivb_
1fc2c                 | LR__2780
1fc2c     12 FB 01 F6 | 	mov	result1, local04
1fc30     A7 F0 03 F6 | 	mov	ptra, fp
1fc34     B2 00 A0 FD | 	call	#popregs_
1fc38                 | __system___basic_get_ret
1fc38     2D 00 64 FD | 	ret
1fc3c                 | 
1fc3c                 | __system___fmtchar
1fc3c     00 4A 05 F6 | 	mov	COUNT_, #0
1fc40     A8 00 A0 FD | 	call	#pushregs_
1fc44     10 F0 07 F1 | 	add	ptra, #16
1fc48     04 4E 05 F1 | 	add	fp, #4
1fc4c     A7 12 62 FC | 	wrlong	arg01, fp
1fc50     04 4E 05 F1 | 	add	fp, #4
1fc54     A7 14 62 FC | 	wrlong	arg02, fp
1fc58     04 4E 05 F1 | 	add	fp, #4
1fc5c     A7 16 62 FC | 	wrlong	arg03, fp
1fc60     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1fc64     A7 16 62 FC | 	wrlong	arg03, fp
1fc68     08 4E 85 F1 | 	sub	fp, #8
1fc6c     A7 12 02 FB | 	rdlong	arg01, fp
1fc70     04 4E 05 F1 | 	add	fp, #4
1fc74     A7 14 02 FB | 	rdlong	arg02, fp
1fc78     04 4E 05 F1 | 	add	fp, #4
1fc7c     A7 16 02 F6 | 	mov	arg03, fp
1fc80     0C 4E 85 F1 | 	sub	fp, #12
1fc84     0C 00 B0 FD | 	call	#__system___fmtstr
1fc88     A7 F0 03 F6 | 	mov	ptra, fp
1fc8c     B2 00 A0 FD | 	call	#popregs_
1fc90                 | __system___fmtchar_ret
1fc90     2D 00 64 FD | 	ret
1fc94                 | 
1fc94                 | __system___fmtstr
1fc94     09 4A 05 F6 | 	mov	COUNT_, #9
1fc98     A8 00 A0 FD | 	call	#pushregs_
1fc9c     09 1F 02 F6 | 	mov	local01, arg01
1fca0     0A 21 02 F6 | 	mov	local02, arg02
1fca4     0B 23 02 F6 | 	mov	local03, arg03
1fca8     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1fcac     11 13 02 F6 | 	mov	arg01, local03
1fcb0     09 25 02 F6 | 	mov	local04, arg01
1fcb4     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
1fcb8                 | LR__2790
1fcb8     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fcbc     01 24 06 51 |  if_ne	add	local04, #1
1fcc0     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
1fcc4                 | LR__2791
1fcc4     09 25 82 F1 | 	sub	local04, arg01
1fcc8     00 18 0E F2 | 	cmp	arg04, #0 wz
1fccc     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1fcd0     10 15 02 F6 | 	mov	arg02, local02
1fcd4     12 17 02 F6 | 	mov	arg03, local04
1fcd8     0F 13 02 F6 | 	mov	arg01, local01
1fcdc     02 18 06 F6 | 	mov	arg04, #2
1fce0     98 46 B0 FD | 	call	#__system___fmtpad
1fce4     FD 26 02 F6 | 	mov	local05, result1
1fce8     00 26 56 F2 | 	cmps	local05, #0 wc
1fcec     13 FB 01 C6 |  if_b	mov	result1, local05
1fcf0     80 00 90 CD |  if_b	jmp	#LR__2794
1fcf4     01 24 56 F2 | 	cmps	local04, #1 wc
1fcf8     50 00 90 CD |  if_b	jmp	#LR__2793
1fcfc     12 29 02 F6 | 	mov	local06, local04
1fd00                 | LR__2792
1fd00     0F 2B 02 F6 | 	mov	local07, local01
1fd04     0F 2D 02 F6 | 	mov	local08, local01
1fd08     13 2A 46 F7 | 	zerox	local07, #19
1fd0c     14 2C 46 F0 | 	shr	local08, #20
1fd10     02 2C 66 F0 | 	shl	local08, #2
1fd14     ED 2C 02 F1 | 	add	local08, __methods__
1fd18     16 2D 02 FB | 	rdlong	local08, local08
1fd1c     11 13 C2 FA | 	rdbyte	arg01, local03
1fd20     F2 2E 02 F6 | 	mov	local09, objptr
1fd24     15 E5 01 F6 | 	mov	objptr, local07
1fd28     01 22 06 F1 | 	add	local03, #1
1fd2c     2D 2C 62 FD | 	call	local08
1fd30     17 E5 01 F6 | 	mov	objptr, local09
1fd34     FD 2E 02 F6 | 	mov	local09, result1
1fd38     00 2E 56 F2 | 	cmps	local09, #0 wc
1fd3c     17 FB 01 C6 |  if_b	mov	result1, local09
1fd40     30 00 90 CD |  if_b	jmp	#LR__2794
1fd44     17 27 02 F1 | 	add	local05, local09
1fd48     ED 29 6E FB | 	djnz	local06, #LR__2792
1fd4c                 | LR__2793
1fd4c     10 15 02 F6 | 	mov	arg02, local02
1fd50     12 17 02 F6 | 	mov	arg03, local04
1fd54     0F 13 02 F6 | 	mov	arg01, local01
1fd58     01 18 06 F6 | 	mov	arg04, #1
1fd5c     1C 46 B0 FD | 	call	#__system___fmtpad
1fd60     FD 2E 02 F6 | 	mov	local09, result1
1fd64     00 2E 56 F2 | 	cmps	local09, #0 wc
1fd68     17 FB 01 C6 |  if_b	mov	result1, local09
1fd6c     17 27 02 31 |  if_ae	add	local05, local09
1fd70     13 FB 01 36 |  if_ae	mov	result1, local05
1fd74                 | LR__2794
1fd74     A7 F0 03 F6 | 	mov	ptra, fp
1fd78     B2 00 A0 FD | 	call	#popregs_
1fd7c                 | __system___fmtstr_ret
1fd7c     2D 00 64 FD | 	ret
1fd80                 | 
1fd80                 | __system___fmtnum
1fd80     0B 4A 05 F6 | 	mov	COUNT_, #11
1fd84     A8 00 A0 FD | 	call	#pushregs_
1fd88     09 1F 02 F6 | 	mov	local01, arg01
1fd8c     0A 21 02 F6 | 	mov	local02, arg02
1fd90     0B 23 02 F6 | 	mov	local03, arg03
1fd94     0C 25 02 F6 | 	mov	local04, arg04
1fd98     F8 27 02 F6 | 	mov	local05, ptra
1fd9c     13 29 02 F6 | 	mov	local06, local05
1fda0     00 2A 06 F6 | 	mov	local07, #0
1fda4     10 2D 02 F6 | 	mov	local08, local02
1fda8     10 2C 46 F0 | 	shr	local08, #16
1fdac     3F 2C 06 F5 | 	and	local08, #63
1fdb0     10 2F E2 F8 | 	getbyte	local09, local02, #0
1fdb4     10 31 02 F6 | 	mov	local10, local02
1fdb8     1A 30 46 F0 | 	shr	local10, #26
1fdbc     03 30 06 F5 | 	and	local10, #3
1fdc0     18 33 02 F6 | 	mov	local11, local10
1fdc4     01 2C 56 F2 | 	cmps	local08, #1 wc
1fdc8     44 F0 07 F1 | 	add	ptra, #68
1fdcc     01 2C 86 31 |  if_ae	sub	local08, #1
1fdd0     41 2E 56 F2 | 	cmps	local09, #65 wc
1fdd4     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1fdd8     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1fddc     03 32 0E F2 | 	cmp	local11, #3 wz
1fde0     00 32 06 A6 |  if_e	mov	local11, #0
1fde4     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1fde8     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1fdec     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1fdf0     00 32 0E F2 | 	cmp	local11, #0 wz
1fdf4     4C 00 90 AD |  if_e	jmp	#LR__2803
1fdf8     01 2A 06 F6 | 	mov	local07, #1
1fdfc     17 2D 0A F2 | 	cmp	local08, local09 wz
1fe00     18 00 90 5D |  if_ne	jmp	#LR__2801
1fe04     05 2C 6E FB | 	djnz	local08, #LR__2800
1fe08     0F 13 02 F6 | 	mov	arg01, local01
1fe0c     10 15 02 F6 | 	mov	arg02, local02
1fe10     23 16 06 F6 | 	mov	arg03, #35
1fe14     24 FE BF FD | 	call	#__system___fmtchar
1fe18     88 00 90 FD | 	jmp	#LR__2807
1fe1c                 | LR__2800
1fe1c                 | LR__2801
1fe1c     02 32 0E F2 | 	cmp	local11, #2 wz
1fe20     14 31 02 A6 |  if_e	mov	local10, local06
1fe24     01 28 06 A1 |  if_e	add	local06, #1
1fe28     18 41 48 AC |  if_e	wrbyte	#32, local10
1fe2c     14 00 90 AD |  if_e	jmp	#LR__2802
1fe30     04 32 0E F2 | 	cmp	local11, #4 wz
1fe34     14 5B 48 AC |  if_e	wrbyte	#45, local06
1fe38     01 28 06 A1 |  if_e	add	local06, #1
1fe3c     14 57 48 5C |  if_ne	wrbyte	#43, local06
1fe40     01 28 06 51 |  if_ne	add	local06, #1
1fe44                 | LR__2802
1fe44                 | LR__2803
1fe44     14 13 02 F6 | 	mov	arg01, local06
1fe48     11 15 02 F6 | 	mov	arg02, local03
1fe4c     12 17 02 F6 | 	mov	arg03, local04
1fe50     16 19 02 F6 | 	mov	arg04, local08
1fe54     00 1A 06 F6 | 	mov	arg05, #0
1fe58     1D 20 2E F4 | 	testbn	local02, #29 wz
1fe5c     01 1A 06 56 |  if_ne	mov	arg05, #1
1fe60     E0 45 B0 FD | 	call	#__system___uitoa
1fe64     FD 2A 02 F1 | 	add	local07, result1
1fe68     17 2B 5A F2 | 	cmps	local07, local09 wcz
1fe6c     24 00 90 ED |  if_be	jmp	#LR__2806
1fe70     97 0E 48 FB | 	callpa	#(@LR__2805-@LR__2804)>>2,fcache_load_ptr_
1fe74                 | LR__2804
1fe74     17 31 02 F6 | 	mov	local10, local09
1fe78     01 30 56 F2 | 	cmps	local10, #1 wc
1fe7c     01 2E 86 F1 | 	sub	local09, #1
1fe80     14 31 02 36 |  if_ae	mov	local10, local06
1fe84     01 28 06 31 |  if_ae	add	local06, #1
1fe88     18 47 48 3C |  if_ae	wrbyte	#35, local10
1fe8c     E4 FF 9F 3D |  if_ae	jmp	#LR__2804
1fe90                 | LR__2805
1fe90     14 01 48 FC | 	wrbyte	#0, local06
1fe94                 | LR__2806
1fe94     0F 13 02 F6 | 	mov	arg01, local01
1fe98     10 15 02 F6 | 	mov	arg02, local02
1fe9c     13 17 02 F6 | 	mov	arg03, local05
1fea0     F0 FD BF FD | 	call	#__system___fmtstr
1fea4                 | LR__2807
1fea4     A7 F0 03 F6 | 	mov	ptra, fp
1fea8     B2 00 A0 FD | 	call	#popregs_
1feac                 | __system___fmtnum_ret
1feac     2D 00 64 FD | 	ret
1feb0                 | 
1feb0                 | __system___fmtfloat
1feb0     10 4A 05 F6 | 	mov	COUNT_, #16
1feb4     A8 00 A0 FD | 	call	#pushregs_
1feb8     24 F1 07 F1 | 	add	ptra, #292
1febc     04 4E 05 F1 | 	add	fp, #4
1fec0     A7 12 62 FC | 	wrlong	arg01, fp
1fec4     04 4E 05 F1 | 	add	fp, #4
1fec8     A7 14 62 FC | 	wrlong	arg02, fp
1fecc     04 4E 05 F1 | 	add	fp, #4
1fed0     A7 16 62 FC | 	wrlong	arg03, fp
1fed4     04 4E 05 F1 | 	add	fp, #4
1fed8     A7 18 62 FC | 	wrlong	arg04, fp
1fedc     0C 4E 05 F1 | 	add	fp, #12
1fee0     A7 14 68 FC | 	wrlong	#10, fp
1fee4     08 4E 05 F1 | 	add	fp, #8
1fee8     A7 00 68 FC | 	wrlong	#0, fp
1feec     08 4E 05 F1 | 	add	fp, #8
1fef0     A7 00 68 FC | 	wrlong	#0, fp
1fef4     08 4E 05 F1 | 	add	fp, #8
1fef8     A7 00 68 FC | 	wrlong	#0, fp
1fefc     04 4E 05 F1 | 	add	fp, #4
1ff00     A7 04 68 FC | 	wrlong	#2, fp
1ff04     04 4E 05 F1 | 	add	fp, #4
1ff08     A7 00 68 FC | 	wrlong	#0, fp
1ff0c     04 4E 05 F1 | 	add	fp, #4
1ff10     A7 00 68 FC | 	wrlong	#0, fp
1ff14     04 4E 05 F1 | 	add	fp, #4
1ff18     A7 00 68 FC | 	wrlong	#0, fp
1ff1c     04 4E 05 F1 | 	add	fp, #4
1ff20     A7 00 68 FC | 	wrlong	#0, fp
1ff24     18 4E 05 F1 | 	add	fp, #24
1ff28     A7 00 68 FC | 	wrlong	#0, fp
1ff2c     68 4E 05 F1 | 	add	fp, #104
1ff30     A7 1E 02 F6 | 	mov	local01, fp
1ff34     08 4E 85 F1 | 	sub	fp, #8
1ff38     A7 1E 62 FC | 	wrlong	local01, fp
1ff3c     04 4E 05 F1 | 	add	fp, #4
1ff40     A7 1E 62 FC | 	wrlong	local01, fp
1ff44     BC 4E 85 F1 | 	sub	fp, #188
1ff48     A7 1E 02 FB | 	rdlong	local01, fp
1ff4c     10 1E 46 F0 | 	shr	local01, #16
1ff50     3F 1E 06 F5 | 	and	local01, #63
1ff54     B0 4E 05 F1 | 	add	fp, #176
1ff58     A7 1E 62 FC | 	wrlong	local01, fp
1ff5c     B0 4E 85 F1 | 	sub	fp, #176
1ff60     A7 1E 02 FB | 	rdlong	local01, fp
1ff64     1C 1E 46 F0 | 	shr	local01, #28
1ff68     01 1E 06 F5 | 	and	local01, #1
1ff6c     08 4F 05 F1 | 	add	fp, #264
1ff70     A7 1E 62 FC | 	wrlong	local01, fp
1ff74     58 4E 85 F1 | 	sub	fp, #88
1ff78     A7 1E 0A FB | 	rdlong	local01, fp wz
1ff7c     B8 4E 85 F1 | 	sub	fp, #184
1ff80     3C 00 90 5D |  if_ne	jmp	#LR__2811
1ff84     10 4E 05 F1 | 	add	fp, #16
1ff88     A7 1E 02 FB | 	rdlong	local01, fp
1ff8c     10 4E 85 F1 | 	sub	fp, #16
1ff90     61 1E 0E F2 | 	cmp	local01, #97 wz
1ff94     18 00 90 5D |  if_ne	jmp	#LR__2810
1ff98     B8 4E 05 F1 | 	add	fp, #184
1ff9c     A7 1A 68 FC | 	wrlong	#13, fp
1ffa0     84 4E 85 F1 | 	sub	fp, #132
1ffa4     A7 02 68 FC | 	wrlong	#1, fp
1ffa8     34 4E 85 F1 | 	sub	fp, #52
1ffac     24 00 90 FD | 	jmp	#LR__2812
1ffb0                 | LR__2810
1ffb0     B8 4E 05 F1 | 	add	fp, #184
1ffb4     A7 0C 68 FC | 	wrlong	#6, fp
1ffb8     B8 4E 85 F1 | 	sub	fp, #184
1ffbc     14 00 90 FD | 	jmp	#LR__2812
1ffc0                 | LR__2811
1ffc0     B8 4E 05 F1 | 	add	fp, #184
1ffc4     A7 1E 02 FB | 	rdlong	local01, fp
1ffc8     01 1E 86 F1 | 	sub	local01, #1
1ffcc     A7 1E 62 FC | 	wrlong	local01, fp
1ffd0     B8 4E 85 F1 | 	sub	fp, #184
1ffd4                 | LR__2812
1ffd4     08 4E 05 F1 | 	add	fp, #8
1ffd8     A7 1E 02 FB | 	rdlong	local01, fp
1ffdc     16 1E 46 F0 | 	shr	local01, #22
1ffe0     03 1E 06 F5 | 	and	local01, #3
1ffe4     04 4F 05 F1 | 	add	fp, #260
1ffe8     A7 1E 62 FC | 	wrlong	local01, fp
1ffec     04 4F 85 F1 | 	sub	fp, #260
1fff0     A7 1E 02 FB | 	rdlong	local01, fp
1fff4     1D 1E 46 F0 | 	shr	local01, #29
1fff8     01 1E 06 F5 | 	and	local01, #1
1fffc     B4 4E 05 F1 | 	add	fp, #180
20000     A7 1E 62 FC | 	wrlong	local01, fp
20004     B4 4E 85 F1 | 	sub	fp, #180
20008     A7 1E 02 FB | 	rdlong	local01, fp
2000c     0F 1F EA F8 | 	getbyte	local01, local01, #1
20010     60 4E 05 F1 | 	add	fp, #96
20014     A7 1E 62 FC | 	wrlong	local01, fp
20018     60 4E 85 F1 | 	sub	fp, #96
2001c     A7 1E 02 FB | 	rdlong	local01, fp
20020     0F 1F E2 F8 | 	getbyte	local01, local01, #0
20024     64 4E 05 F1 | 	add	fp, #100
20028     A7 1E 62 FC | 	wrlong	local01, fp
2002c     00 1E 06 F6 | 	mov	local01, #0
20030     5C 4E 85 F1 | 	sub	fp, #92
20034     A7 1A 02 FB | 	rdlong	arg05, fp
20038     65 1A 0E F2 | 	cmp	arg05, #101 wz
2003c     01 1E 06 A6 |  if_e	mov	local01, #1
20040     14 4E 05 F1 | 	add	fp, #20
20044     A7 1E 62 FC | 	wrlong	local01, fp
20048     98 4E 05 F1 | 	add	fp, #152
2004c     A7 20 0A FB | 	rdlong	local02, fp wz
20050     45 1E 06 56 |  if_ne	mov	local01, #69
20054     65 1E 06 A6 |  if_e	mov	local01, #101
20058     8C 4E 85 F1 | 	sub	fp, #140
2005c     A7 1E 62 FC | 	wrlong	local01, fp
20060     20 4E 85 F1 | 	sub	fp, #32
20064     A7 1E 02 FB | 	rdlong	local01, fp
20068     10 4E 85 F1 | 	sub	fp, #16
2006c     61 1E 0E F2 | 	cmp	local01, #97 wz
20070     4C 00 90 5D |  if_ne	jmp	#LR__2813
20074     24 4E 05 F1 | 	add	fp, #36
20078     A7 02 68 FC | 	wrlong	#1, fp
2007c     98 4E 05 F1 | 	add	fp, #152
20080     A7 20 0A FB | 	rdlong	local02, fp wz
20084     50 1E 06 56 |  if_ne	mov	local01, #80
20088     70 1E 06 A6 |  if_e	mov	local01, #112
2008c     8C 4E 85 F1 | 	sub	fp, #140
20090     A7 1E 62 FC | 	wrlong	local01, fp
20094     14 4E 85 F1 | 	sub	fp, #20
20098     A7 04 68 FC | 	wrlong	#2, fp
2009c     1C 4E 05 F1 | 	add	fp, #28
200a0     A7 02 68 FC | 	wrlong	#1, fp
200a4     84 4E 05 F1 | 	add	fp, #132
200a8     A7 20 0A FB | 	rdlong	local02, fp wz
200ac     58 1E 06 56 |  if_ne	mov	local01, #88
200b0     78 1E 06 A6 |  if_e	mov	local01, #120
200b4     7C 4E 85 F1 | 	sub	fp, #124
200b8     A7 1E 62 FC | 	wrlong	local01, fp
200bc     40 4E 85 F1 | 	sub	fp, #64
200c0                 | LR__2813
200c0     10 4E 05 F1 | 	add	fp, #16
200c4     A7 1E 02 FB | 	rdlong	local01, fp
200c8     10 4E 85 F1 | 	sub	fp, #16
200cc     23 1E 0E F2 | 	cmp	local01, #35 wz
200d0     3C 00 90 5D |  if_ne	jmp	#LR__2816
200d4     48 4E 05 F1 | 	add	fp, #72
200d8     A7 02 68 FC | 	wrlong	#1, fp
200dc     C8 4E 05 F1 | 	add	fp, #200
200e0     A7 1E 0A FB | 	rdlong	local01, fp wz
200e4     10 4F 85 F1 | 	sub	fp, #272
200e8     18 00 90 AD |  if_e	jmp	#LR__2814
200ec     10 4E 05 F1 | 	add	fp, #16
200f0     A7 CC 68 FC | 	wrlong	#102, fp
200f4     00 4F 05 F1 | 	add	fp, #256
200f8     A7 00 68 FC | 	wrlong	#0, fp
200fc     10 4F 85 F1 | 	sub	fp, #272
20100     0C 00 90 FD | 	jmp	#LR__2815
20104                 | LR__2814
20104     10 4F 05 F1 | 	add	fp, #272
20108     A7 02 68 FC | 	wrlong	#1, fp
2010c     10 4F 85 F1 | 	sub	fp, #272
20110                 | LR__2815
20110                 | LR__2816
20110     08 4E 05 F1 | 	add	fp, #8
20114     A7 1E 02 FB | 	rdlong	local01, fp
20118     1A 1E 46 F0 | 	shr	local01, #26
2011c     03 1E 06 F5 | 	and	local01, #3
20120     5C 4E 05 F1 | 	add	fp, #92
20124     A7 1E 62 FC | 	wrlong	local01, fp
20128     58 4E 85 F1 | 	sub	fp, #88
2012c     A7 FA 01 FB | 	rdlong	result1, fp
20130     0C 4E 85 F1 | 	sub	fp, #12
20134     1F FA 4D F0 | 	shr	result1, #31 wz
20138     20 00 90 AD |  if_e	jmp	#LR__2817
2013c     2C 4E 05 F1 | 	add	fp, #44
20140     A7 5A 68 FC | 	wrlong	#45, fp
20144     20 4E 85 F1 | 	sub	fp, #32
20148     A7 FA 01 FB | 	rdlong	result1, fp
2014c     1F FA E5 F4 | 	bitnot	result1, #31
20150     A7 FA 61 FC | 	wrlong	result1, fp
20154     0C 4E 85 F1 | 	sub	fp, #12
20158     3C 00 90 FD | 	jmp	#LR__2819
2015c                 | LR__2817
2015c     64 4E 05 F1 | 	add	fp, #100
20160     A7 1E 02 FB | 	rdlong	local01, fp
20164     64 4E 85 F1 | 	sub	fp, #100
20168     01 1E 0E F2 | 	cmp	local01, #1 wz
2016c     2C 4E 05 A1 |  if_e	add	fp, #44
20170     A7 56 68 AC |  if_e	wrlong	#43, fp
20174     2C 4E 85 A1 |  if_e	sub	fp, #44
20178     1C 00 90 AD |  if_e	jmp	#LR__2818
2017c     64 4E 05 F1 | 	add	fp, #100
20180     A7 1E 02 FB | 	rdlong	local01, fp
20184     64 4E 85 F1 | 	sub	fp, #100
20188     02 1E 0E F2 | 	cmp	local01, #2 wz
2018c     2C 4E 05 A1 |  if_e	add	fp, #44
20190     A7 40 68 AC |  if_e	wrlong	#32, fp
20194     2C 4E 85 A1 |  if_e	sub	fp, #44
20198                 | LR__2818
20198                 | LR__2819
20198     08 4E 05 F1 | 	add	fp, #8
2019c     A7 1E 02 FB | 	rdlong	local01, fp
201a0     18 1E 46 F0 | 	shr	local01, #24
201a4     03 1E 06 F5 | 	and	local01, #3
201a8     3C 4E 05 F1 | 	add	fp, #60
201ac     A7 1E 62 FC | 	wrlong	local01, fp
201b0     00 1E 06 F6 | 	mov	local01, #0
201b4     18 4E 85 F1 | 	sub	fp, #24
201b8     A7 22 0A FB | 	rdlong	local03, fp wz
201bc     2C 4E 85 F1 | 	sub	fp, #44
201c0     18 00 90 5D |  if_ne	jmp	#LR__2820
201c4     1C 4E 05 F1 | 	add	fp, #28
201c8     A7 24 02 FB | 	rdlong	local04, fp
201cc     1C 4E 85 F1 | 	sub	fp, #28
201d0     12 27 02 F6 | 	mov	local05, local04
201d4     0A 26 0E F2 | 	cmp	local05, #10 wz
201d8     04 00 90 AD |  if_e	jmp	#LR__2821
201dc                 | LR__2820
201dc     01 1E 66 F5 | 	xor	local01, #1
201e0                 | LR__2821
201e0     3C 4E 05 F1 | 	add	fp, #60
201e4     A7 1E 62 FC | 	wrlong	local01, fp
201e8     3C 4E 85 F1 | 	sub	fp, #60
201ec     00 1E 0E F2 | 	cmp	local01, #0 wz
201f0     0C 01 90 AD |  if_e	jmp	#LR__2823
201f4     44 4E 05 F1 | 	add	fp, #68
201f8     A7 26 02 FB | 	rdlong	local05, fp
201fc     44 4E 85 F1 | 	sub	fp, #68
20200     13 23 02 F6 | 	mov	local03, local05
20204     02 22 0E F2 | 	cmp	local03, #2 wz
20208     F4 00 90 5D |  if_ne	jmp	#LR__2823
2020c     0C 4F 05 F1 | 	add	fp, #268
20210     A7 28 02 FB | 	rdlong	local06, fp
20214     0C 4F 85 F1 | 	sub	fp, #268
20218     14 25 02 F6 | 	mov	local04, local06
2021c     02 24 0E F2 | 	cmp	local04, #2 wz
20220     DC 00 90 AD |  if_e	jmp	#LR__2823
20224     C0 4E 05 F1 | 	add	fp, #192
20228     A7 12 02 FB | 	rdlong	arg01, fp
2022c     94 4E 85 F1 | 	sub	fp, #148
20230     A7 14 02 FB | 	rdlong	arg02, fp
20234     14 4E 05 F1 | 	add	fp, #20
20238     A7 16 02 FB | 	rdlong	arg03, fp
2023c     40 4E 85 F1 | 	sub	fp, #64
20240     68 44 B0 FD | 	call	#__system__emitsign_0445
20244     14 4F 05 F1 | 	add	fp, #276
20248     A7 FA 61 FC | 	wrlong	result1, fp
2024c     14 4F 85 F1 | 	sub	fp, #276
20250     00 FA 55 F2 | 	cmps	result1, #0 wc
20254     14 4F 05 C1 |  if_b	add	fp, #276
20258     A7 FA 01 CB |  if_b	rdlong	result1, fp
2025c     14 4F 85 C1 |  if_b	sub	fp, #276
20260     6C 0B 90 CD |  if_b	jmp	#LR__2873
20264     C0 4E 05 F1 | 	add	fp, #192
20268     A7 1E 02 FB | 	rdlong	local01, fp
2026c     54 4E 05 F1 | 	add	fp, #84
20270     A7 26 02 FB | 	rdlong	local05, fp
20274     13 23 02 F6 | 	mov	local03, local05
20278     13 1F 02 F1 | 	add	local01, local05
2027c     54 4E 85 F1 | 	sub	fp, #84
20280     A7 1E 62 FC | 	wrlong	local01, fp
20284     58 4E 85 F1 | 	sub	fp, #88
20288     A7 1E 0A FB | 	rdlong	local01, fp wz
2028c     68 4E 85 F1 | 	sub	fp, #104
20290     60 00 90 AD |  if_e	jmp	#LR__2822
20294     68 4E 05 F1 | 	add	fp, #104
20298     A7 1E 02 FB | 	rdlong	local01, fp
2029c     AC 4E 05 F1 | 	add	fp, #172
202a0     A7 22 02 FB | 	rdlong	local03, fp
202a4     11 1F 82 F1 | 	sub	local01, local03
202a8     AC 4E 85 F1 | 	sub	fp, #172
202ac     A7 1E 62 FC | 	wrlong	local01, fp
202b0     68 4E 85 F1 | 	sub	fp, #104
202b4     00 1E 56 F2 | 	cmps	local01, #0 wc
202b8     68 4E 05 C1 |  if_b	add	fp, #104
202bc     A7 00 68 CC |  if_b	wrlong	#0, fp
202c0     68 4E 85 C1 |  if_b	sub	fp, #104
202c4     08 4E 05 F1 | 	add	fp, #8
202c8     A7 1E 02 FB | 	rdlong	local01, fp
202cc     E8 1E 06 F4 | 	bitl	local01, #232
202d0     A7 1E 62 FC | 	wrlong	local01, fp
202d4     60 4E 05 F1 | 	add	fp, #96
202d8     A7 26 02 FB | 	rdlong	local05, fp
202dc     13 23 02 F6 | 	mov	local03, local05
202e0     08 22 66 F0 | 	shl	local03, #8
202e4     11 1F 42 F5 | 	or	local01, local03
202e8     60 4E 85 F1 | 	sub	fp, #96
202ec     A7 1E 62 FC | 	wrlong	local01, fp
202f0     08 4E 85 F1 | 	sub	fp, #8
202f4                 | LR__2822
202f4     3C 4E 05 F1 | 	add	fp, #60
202f8     A7 00 68 FC | 	wrlong	#0, fp
202fc     3C 4E 85 F1 | 	sub	fp, #60
20300                 | LR__2823
20300     0C 4E 05 F1 | 	add	fp, #12
20304     A7 12 02 FB | 	rdlong	arg01, fp
20308     0C 4E 85 F1 | 	sub	fp, #12
2030c     04 1F B0 FD | 	call	#__system____builtin_ilogb
20310     FF FF 3F FF 
20314     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
20318     50 00 90 5D |  if_ne	jmp	#LR__2825
2031c     2C 4E 05 F1 | 	add	fp, #44
20320     A7 1E 0A FB | 	rdlong	local01, fp wz
20324     2C 4E 85 F1 | 	sub	fp, #44
20328     24 00 90 AD |  if_e	jmp	#LR__2824
2032c     C0 4E 05 F1 | 	add	fp, #192
20330     A7 20 02 FB | 	rdlong	local02, fp
20334     10 23 02 F6 | 	mov	local03, local02
20338     01 22 06 F1 | 	add	local03, #1
2033c     A7 22 62 FC | 	wrlong	local03, fp
20340     94 4E 85 F1 | 	sub	fp, #148
20344     A7 24 02 FB | 	rdlong	local04, fp
20348     2C 4E 85 F1 | 	sub	fp, #44
2034c     10 25 42 FC | 	wrbyte	local04, local02
20350                 | LR__2824
20350     C0 4E 05 F1 | 	add	fp, #192
20354     A7 12 02 FB | 	rdlong	arg01, fp
20358     C0 4E 85 F1 | 	sub	fp, #192
2035c     71 01 00 FF 
20360     82 15 06 F6 | 	mov	arg02, ##@LR__4761
20364     18 EA BF FD | 	call	#__system____builtin_strcpy
20368     A4 08 90 FD | 	jmp	#LR__2861
2036c                 | LR__2825
2036c     0C 4E 05 F1 | 	add	fp, #12
20370     A7 20 02 FB | 	rdlong	local02, fp
20374     0C 4E 85 F1 | 	sub	fp, #12
20378     10 13 02 F6 | 	mov	arg01, local02
2037c     94 1E B0 FD | 	call	#__system____builtin_ilogb
20380     00 00 40 FF 
20384     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
20388     50 00 90 5D |  if_ne	jmp	#LR__2827
2038c     2C 4E 05 F1 | 	add	fp, #44
20390     A7 1E 0A FB | 	rdlong	local01, fp wz
20394     2C 4E 85 F1 | 	sub	fp, #44
20398     24 00 90 AD |  if_e	jmp	#LR__2826
2039c     C0 4E 05 F1 | 	add	fp, #192
203a0     A7 20 02 FB | 	rdlong	local02, fp
203a4     10 23 02 F6 | 	mov	local03, local02
203a8     01 22 06 F1 | 	add	local03, #1
203ac     A7 22 62 FC | 	wrlong	local03, fp
203b0     94 4E 85 F1 | 	sub	fp, #148
203b4     A7 24 02 FB | 	rdlong	local04, fp
203b8     2C 4E 85 F1 | 	sub	fp, #44
203bc     10 25 42 FC | 	wrbyte	local04, local02
203c0                 | LR__2826
203c0     C0 4E 05 F1 | 	add	fp, #192
203c4     A7 12 02 FB | 	rdlong	arg01, fp
203c8     C0 4E 85 F1 | 	sub	fp, #192
203cc     71 01 00 FF 
203d0     86 15 06 F6 | 	mov	arg02, ##@LR__4762
203d4     A8 E9 BF FD | 	call	#__system____builtin_strcpy
203d8     34 08 90 FD | 	jmp	#LR__2861
203dc                 | LR__2827
203dc     10 4E 05 F1 | 	add	fp, #16
203e0     A7 1E 02 FB | 	rdlong	local01, fp
203e4     10 4E 85 F1 | 	sub	fp, #16
203e8     67 1E 0E F2 | 	cmp	local01, #103 wz
203ec     10 4E 05 51 |  if_ne	add	fp, #16
203f0     A7 22 02 5B |  if_ne	rdlong	local03, fp
203f4     10 4E 85 51 |  if_ne	sub	fp, #16
203f8     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
203fc     94 01 90 5D |  if_ne	jmp	#LR__2832
20400     0C 4E 05 F1 | 	add	fp, #12
20404     A7 12 02 FB | 	rdlong	arg01, fp
20408     08 4E 05 F1 | 	add	fp, #8
2040c     A7 14 02 F6 | 	mov	arg02, fp
20410     0C 4E 05 F1 | 	add	fp, #12
20414     A7 16 02 F6 | 	mov	arg03, fp
20418     98 4E 05 F1 | 	add	fp, #152
2041c     A7 18 02 FB | 	rdlong	arg04, fp
20420     9C 4E 85 F1 | 	sub	fp, #156
20424     A7 1A 02 FB | 	rdlong	arg05, fp
20428     1C 4E 85 F1 | 	sub	fp, #28
2042c     88 40 B0 FD | 	call	#__system__disassemble_0443
20430     10 4E 05 F1 | 	add	fp, #16
20434     A7 1E 02 FB | 	rdlong	local01, fp
20438     10 4E 85 F1 | 	sub	fp, #16
2043c     23 1E 0E F2 | 	cmp	local01, #35 wz
20440     A0 00 90 5D |  if_ne	jmp	#LR__2829
20444     20 4E 05 F1 | 	add	fp, #32
20448     A7 1E 02 FB | 	rdlong	local01, fp
2044c     98 4E 05 F1 | 	add	fp, #152
20450     A7 22 02 FB | 	rdlong	local03, fp
20454     B8 4E 85 F1 | 	sub	fp, #184
20458     11 1F 5A F2 | 	cmps	local01, local03 wcz
2045c     24 4E 05 11 |  if_a	add	fp, #36
20460     A7 02 68 1C |  if_a	wrlong	#1, fp
20464     24 4E 85 11 |  if_a	sub	fp, #36
20468     A4 01 90 1D |  if_a	jmp	#LR__2835
2046c     20 4E 05 F1 | 	add	fp, #32
20470     A7 1E 02 FB | 	rdlong	local01, fp
20474     20 4E 85 F1 | 	sub	fp, #32
20478     00 1E 56 F2 | 	cmps	local01, #0 wc
2047c     2C 00 90 3D |  if_ae	jmp	#LR__2828
20480     B8 4E 05 F1 | 	add	fp, #184
20484     A7 1E 02 FB | 	rdlong	local01, fp
20488     0F 1F 62 F6 | 	neg	local01, local01
2048c     98 4E 85 F1 | 	sub	fp, #152
20490     A7 22 02 FB | 	rdlong	local03, fp
20494     20 4E 85 F1 | 	sub	fp, #32
20498     0F 23 5A F2 | 	cmps	local03, local01 wcz
2049c     24 4E 05 E1 |  if_be	add	fp, #36
204a0     A7 02 68 EC |  if_be	wrlong	#1, fp
204a4     24 4E 85 E1 |  if_be	sub	fp, #36
204a8     64 01 90 FD | 	jmp	#LR__2835
204ac                 | LR__2828
204ac     20 4E 05 F1 | 	add	fp, #32
204b0     A7 1E 02 FB | 	rdlong	local01, fp
204b4     20 4E 85 F1 | 	sub	fp, #32
204b8     01 1E 56 F2 | 	cmps	local01, #1 wc
204bc     50 01 90 CD |  if_b	jmp	#LR__2835
204c0     B8 4E 05 F1 | 	add	fp, #184
204c4     A7 1E 02 FB | 	rdlong	local01, fp
204c8     98 4E 85 F1 | 	sub	fp, #152
204cc     A7 22 02 FB | 	rdlong	local03, fp
204d0     11 1F 82 F1 | 	sub	local01, local03
204d4     98 4E 05 F1 | 	add	fp, #152
204d8     A7 1E 62 FC | 	wrlong	local01, fp
204dc     B8 4E 85 F1 | 	sub	fp, #184
204e0     2C 01 90 FD | 	jmp	#LR__2835
204e4                 | LR__2829
204e4     00 1E 06 F6 | 	mov	local01, #0
204e8     08 4E 05 F1 | 	add	fp, #8
204ec     A7 20 02 FB | 	rdlong	local02, fp
204f0     1C 20 46 F0 | 	shr	local02, #28
204f4     01 20 0E F5 | 	and	local02, #1 wz
204f8     01 1E 06 A6 |  if_e	mov	local01, #1
204fc     2C 4E 05 F1 | 	add	fp, #44
20500     A7 1E 62 FC | 	wrlong	local01, fp
20504     14 4E 85 F1 | 	sub	fp, #20
20508     A7 1E 02 FB | 	rdlong	local01, fp
2050c     98 4E 05 F1 | 	add	fp, #152
20510     A7 22 02 FB | 	rdlong	local03, fp
20514     B8 4E 85 F1 | 	sub	fp, #184
20518     11 1F 52 F2 | 	cmps	local01, local03 wc
2051c     18 00 90 3D |  if_ae	jmp	#LR__2830
20520     20 4E 05 F1 | 	add	fp, #32
20524     A7 24 02 FB | 	rdlong	local04, fp
20528     20 4E 85 F1 | 	sub	fp, #32
2052c     FF FF 7F FF 
20530     FC 25 56 F2 | 	cmps	local04, ##-4 wc
20534     10 00 90 3D |  if_ae	jmp	#LR__2831
20538                 | LR__2830
20538     24 4E 05 F1 | 	add	fp, #36
2053c     A7 02 68 FC | 	wrlong	#1, fp
20540     24 4E 85 F1 | 	sub	fp, #36
20544     C8 00 90 FD | 	jmp	#LR__2835
20548                 | LR__2831
20548     B8 4E 05 F1 | 	add	fp, #184
2054c     A7 24 02 FB | 	rdlong	local04, fp
20550     98 4E 85 F1 | 	sub	fp, #152
20554     A7 22 02 FB | 	rdlong	local03, fp
20558     11 25 82 F1 | 	sub	local04, local03
2055c     98 4E 05 F1 | 	add	fp, #152
20560     A7 24 62 FC | 	wrlong	local04, fp
20564     AC 4E 85 F1 | 	sub	fp, #172
20568     A7 12 02 FB | 	rdlong	arg01, fp
2056c     08 4E 05 F1 | 	add	fp, #8
20570     A7 14 02 F6 | 	mov	arg02, fp
20574     0C 4E 05 F1 | 	add	fp, #12
20578     A7 16 02 F6 | 	mov	arg03, fp
2057c     12 19 62 F6 | 	neg	arg04, local04
20580     04 4E 85 F1 | 	sub	fp, #4
20584     A7 1A 02 FB | 	rdlong	arg05, fp
20588     1C 4E 85 F1 | 	sub	fp, #28
2058c     28 3F B0 FD | 	call	#__system__disassemble_0443
20590     7C 00 90 FD | 	jmp	#LR__2835
20594                 | LR__2832
20594     24 4E 05 F1 | 	add	fp, #36
20598     A7 1E 0A FB | 	rdlong	local01, fp wz
2059c     24 4E 85 F1 | 	sub	fp, #36
205a0     34 00 90 AD |  if_e	jmp	#LR__2833
205a4     0C 4E 05 F1 | 	add	fp, #12
205a8     A7 12 02 FB | 	rdlong	arg01, fp
205ac     08 4E 05 F1 | 	add	fp, #8
205b0     A7 14 02 F6 | 	mov	arg02, fp
205b4     0C 4E 05 F1 | 	add	fp, #12
205b8     A7 16 02 F6 | 	mov	arg03, fp
205bc     98 4E 05 F1 | 	add	fp, #152
205c0     A7 18 02 FB | 	rdlong	arg04, fp
205c4     9C 4E 85 F1 | 	sub	fp, #156
205c8     A7 1A 02 FB | 	rdlong	arg05, fp
205cc     1C 4E 85 F1 | 	sub	fp, #28
205d0     E4 3E B0 FD | 	call	#__system__disassemble_0443
205d4     38 00 90 FD | 	jmp	#LR__2834
205d8                 | LR__2833
205d8     0C 4E 05 F1 | 	add	fp, #12
205dc     A7 12 02 FB | 	rdlong	arg01, fp
205e0     08 4E 05 F1 | 	add	fp, #8
205e4     A7 14 02 F6 | 	mov	arg02, fp
205e8     0C 4E 05 F1 | 	add	fp, #12
205ec     A7 16 02 F6 | 	mov	arg03, fp
205f0     98 4E 05 F1 | 	add	fp, #152
205f4     A7 24 02 FB | 	rdlong	local04, fp
205f8     01 24 06 F1 | 	add	local04, #1
205fc     12 19 62 F6 | 	neg	arg04, local04
20600     9C 4E 85 F1 | 	sub	fp, #156
20604     A7 1A 02 FB | 	rdlong	arg05, fp
20608     1C 4E 85 F1 | 	sub	fp, #28
2060c     A8 3E B0 FD | 	call	#__system__disassemble_0443
20610                 | LR__2834
20610                 | LR__2835
20610     1C 4E 05 F1 | 	add	fp, #28
20614     A7 1E 02 FB | 	rdlong	local01, fp
20618     1C 4E 85 F1 | 	sub	fp, #28
2061c     02 1E 0E F2 | 	cmp	local01, #2 wz
20620     4C 00 90 5D |  if_ne	jmp	#LR__2838
20624     1C 4E 05 F1 | 	add	fp, #28
20628     A7 20 68 FC | 	wrlong	#16, fp
2062c     1C 4E 85 F1 | 	sub	fp, #28
20630                 | LR__2836
20630     14 4E 05 F1 | 	add	fp, #20
20634     A7 1E 0A FB | 	rdlong	local01, fp wz
20638     14 4E 85 F1 | 	sub	fp, #20
2063c     30 00 90 AD |  if_e	jmp	#LR__2837
20640     14 4E 05 F1 | 	add	fp, #20
20644     A7 22 02 FB | 	rdlong	local03, fp
20648     14 4E 85 F1 | 	sub	fp, #20
2064c     00 80 00 FF 
20650     00 22 16 F2 | 	cmp	local03, ##16777216 wc
20654     18 00 90 3D |  if_ae	jmp	#LR__2837
20658     14 4E 05 F1 | 	add	fp, #20
2065c     A7 1E 02 FB | 	rdlong	local01, fp
20660     01 1E 66 F0 | 	shl	local01, #1
20664     A7 1E 62 FC | 	wrlong	local01, fp
20668     14 4E 85 F1 | 	sub	fp, #20
2066c     C0 FF 9F FD | 	jmp	#LR__2836
20670                 | LR__2837
20670                 | LR__2838
20670     70 4E 05 F1 | 	add	fp, #112
20674     A7 12 02 F6 | 	mov	arg01, fp
20678     5C 4E 85 F1 | 	sub	fp, #92
2067c     A7 14 02 FB | 	rdlong	arg02, fp
20680     08 4E 05 F1 | 	add	fp, #8
20684     A7 16 02 FB | 	rdlong	arg03, fp
20688     A0 4E 05 F1 | 	add	fp, #160
2068c     A7 1A 02 FB | 	rdlong	arg05, fp
20690     BC 4E 85 F1 | 	sub	fp, #188
20694     01 18 06 F6 | 	mov	arg04, #1
20698     A8 3D B0 FD | 	call	#__system___uitoa
2069c     58 4E 05 F1 | 	add	fp, #88
206a0     A7 FA 61 FC | 	wrlong	result1, fp
206a4     38 4E 85 F1 | 	sub	fp, #56
206a8     A7 1E 02 FB | 	rdlong	local01, fp
206ac     20 4E 85 F1 | 	sub	fp, #32
206b0     00 1E 56 F2 | 	cmps	local01, #0 wc
206b4     50 00 90 3D |  if_ae	jmp	#LR__2839
206b8     60 4E 05 F1 | 	add	fp, #96
206bc     A7 5A 68 FC | 	wrlong	#45, fp
206c0     50 4E 05 F1 | 	add	fp, #80
206c4     A7 12 02 F6 | 	mov	arg01, fp
206c8     90 4E 85 F1 | 	sub	fp, #144
206cc     A7 22 02 FB | 	rdlong	local03, fp
206d0     11 15 62 F6 | 	neg	arg02, local03
206d4     18 4E 05 F1 | 	add	fp, #24
206d8     A7 18 02 FB | 	rdlong	arg04, fp
206dc     84 4E 05 F1 | 	add	fp, #132
206e0     A7 28 02 FB | 	rdlong	local06, fp
206e4     BC 4E 85 F1 | 	sub	fp, #188
206e8     14 25 02 F6 | 	mov	local04, local06
206ec     0A 16 06 F6 | 	mov	arg03, #10
206f0     12 1B 02 F6 | 	mov	arg05, local04
206f4     4C 3D B0 FD | 	call	#__system___uitoa
206f8     5C 4E 05 F1 | 	add	fp, #92
206fc     A7 FA 61 FC | 	wrlong	result1, fp
20700     5C 4E 85 F1 | 	sub	fp, #92
20704     48 00 90 FD | 	jmp	#LR__2840
20708                 | LR__2839
20708     60 4E 05 F1 | 	add	fp, #96
2070c     A7 56 68 FC | 	wrlong	#43, fp
20710     50 4E 05 F1 | 	add	fp, #80
20714     A7 12 02 F6 | 	mov	arg01, fp
20718     90 4E 85 F1 | 	sub	fp, #144
2071c     A7 14 02 FB | 	rdlong	arg02, fp
20720     18 4E 05 F1 | 	add	fp, #24
20724     A7 18 02 FB | 	rdlong	arg04, fp
20728     84 4E 05 F1 | 	add	fp, #132
2072c     A7 28 02 FB | 	rdlong	local06, fp
20730     BC 4E 85 F1 | 	sub	fp, #188
20734     14 25 02 F6 | 	mov	local04, local06
20738     0A 16 06 F6 | 	mov	arg03, #10
2073c     12 1B 02 F6 | 	mov	arg05, local04
20740     00 3D B0 FD | 	call	#__system___uitoa
20744     5C 4E 05 F1 | 	add	fp, #92
20748     A7 FA 61 FC | 	wrlong	result1, fp
2074c     5C 4E 85 F1 | 	sub	fp, #92
20750                 | LR__2840
20750     24 4E 05 F1 | 	add	fp, #36
20754     A7 1E 0A FB | 	rdlong	local01, fp wz
20758     24 4E 85 F1 | 	sub	fp, #36
2075c     2C 00 90 AD |  if_e	jmp	#LR__2841
20760     50 4E 05 F1 | 	add	fp, #80
20764     A7 00 68 FC | 	wrlong	#0, fp
20768     04 4E 85 F1 | 	sub	fp, #4
2076c     A7 00 68 FC | 	wrlong	#0, fp
20770     6C 4E 05 F1 | 	add	fp, #108
20774     A7 1E 02 FB | 	rdlong	local01, fp
20778     01 1E 06 F1 | 	add	local01, #1
2077c     64 4E 85 F1 | 	sub	fp, #100
20780     A7 1E 62 FC | 	wrlong	local01, fp
20784     54 4E 85 F1 | 	sub	fp, #84
20788     88 00 90 FD | 	jmp	#LR__2844
2078c                 | LR__2841
2078c     20 4E 05 F1 | 	add	fp, #32
20790     A7 1E 02 FB | 	rdlong	local01, fp
20794     20 4E 85 F1 | 	sub	fp, #32
20798     00 1E 56 F2 | 	cmps	local01, #0 wc
2079c     40 00 90 3D |  if_ae	jmp	#LR__2842
207a0     20 4E 05 F1 | 	add	fp, #32
207a4     A7 20 02 FB | 	rdlong	local02, fp
207a8     30 4E 05 F1 | 	add	fp, #48
207ac     A7 20 62 FC | 	wrlong	local02, fp
207b0     04 4E 85 F1 | 	sub	fp, #4
207b4     A7 20 62 FC | 	wrlong	local02, fp
207b8     2C 4E 85 F1 | 	sub	fp, #44
207bc     A7 1E 02 FB | 	rdlong	local01, fp
207c0     98 4E 05 F1 | 	add	fp, #152
207c4     A7 22 02 FB | 	rdlong	local03, fp
207c8     11 1F 02 F1 | 	add	local01, local03
207cc     01 1E 06 F1 | 	add	local01, #1
207d0     64 4E 85 F1 | 	sub	fp, #100
207d4     A7 1E 62 FC | 	wrlong	local01, fp
207d8     54 4E 85 F1 | 	sub	fp, #84
207dc     34 00 90 FD | 	jmp	#LR__2843
207e0                 | LR__2842
207e0     4C 4E 05 F1 | 	add	fp, #76
207e4     A7 00 68 FC | 	wrlong	#0, fp
207e8     2C 4E 85 F1 | 	sub	fp, #44
207ec     A7 1E 02 FB | 	rdlong	local01, fp
207f0     30 4E 05 F1 | 	add	fp, #48
207f4     A7 1E 62 FC | 	wrlong	local01, fp
207f8     68 4E 05 F1 | 	add	fp, #104
207fc     A7 22 02 FB | 	rdlong	local03, fp
20800     11 1F 02 F1 | 	add	local01, local03
20804     01 1E 06 F1 | 	add	local01, #1
20808     64 4E 85 F1 | 	sub	fp, #100
2080c     A7 1E 62 FC | 	wrlong	local01, fp
20810     54 4E 85 F1 | 	sub	fp, #84
20814                 | LR__2843
20814                 | LR__2844
20814     54 4E 05 F1 | 	add	fp, #84
20818     A7 1E 02 FB | 	rdlong	local01, fp
2081c     08 4E 85 F1 | 	sub	fp, #8
20820     A7 22 02 FB | 	rdlong	local03, fp
20824     11 1F 82 F1 | 	sub	local01, local03
20828     01 1E 06 F1 | 	add	local01, #1
2082c     24 4E 85 F1 | 	sub	fp, #36
20830     A7 1E 62 FC | 	wrlong	local01, fp
20834     04 4E 05 F1 | 	add	fp, #4
20838     A7 1E 0A FB | 	rdlong	local01, fp wz
2083c     2C 4E 85 F1 | 	sub	fp, #44
20840     28 4E 05 51 |  if_ne	add	fp, #40
20844     A7 22 02 5B |  if_ne	rdlong	local03, fp
20848     01 22 06 51 |  if_ne	add	local03, #1
2084c     A7 22 62 5C |  if_ne	wrlong	local03, fp
20850     28 4E 85 51 |  if_ne	sub	fp, #40
20854     1C 4E 05 F1 | 	add	fp, #28
20858     A7 1E 02 FB | 	rdlong	local01, fp
2085c     1C 4E 85 F1 | 	sub	fp, #28
20860     10 1E 0E F2 | 	cmp	local01, #16 wz
20864     28 4E 05 A1 |  if_e	add	fp, #40
20868     A7 1E 02 AB |  if_e	rdlong	local01, fp
2086c     02 1E 06 A1 |  if_e	add	local01, #2
20870     A7 1E 62 AC |  if_e	wrlong	local01, fp
20874     28 4E 85 A1 |  if_e	sub	fp, #40
20878     24 4E 05 F1 | 	add	fp, #36
2087c     A7 1E 0A FB | 	rdlong	local01, fp wz
20880     24 4E 85 F1 | 	sub	fp, #36
20884     28 00 90 AD |  if_e	jmp	#LR__2845
20888     28 4E 05 F1 | 	add	fp, #40
2088c     A7 1E 02 FB | 	rdlong	local01, fp
20890     02 22 06 F6 | 	mov	local03, #2
20894     34 4E 05 F1 | 	add	fp, #52
20898     A7 26 02 FB | 	rdlong	local05, fp
2089c     13 23 02 F1 | 	add	local03, local05
208a0     11 1F 02 F1 | 	add	local01, local03
208a4     34 4E 85 F1 | 	sub	fp, #52
208a8     A7 1E 62 FC | 	wrlong	local01, fp
208ac     28 4E 85 F1 | 	sub	fp, #40
208b0                 | LR__2845
208b0     28 4E 05 F1 | 	add	fp, #40
208b4     A7 1E 02 FB | 	rdlong	local01, fp
208b8     28 4E 85 F1 | 	sub	fp, #40
208bc     41 1E 56 F2 | 	cmps	local01, #65 wc
208c0     01 FA 65 36 |  if_ae	neg	result1, #1
208c4     08 05 90 3D |  if_ae	jmp	#LR__2873
208c8     3C 4E 05 F1 | 	add	fp, #60
208cc     A7 1E 0A FB | 	rdlong	local01, fp wz
208d0     3C 4E 85 F1 | 	sub	fp, #60
208d4     60 00 90 AD |  if_e	jmp	#LR__2846
208d8     C0 4E 05 F1 | 	add	fp, #192
208dc     A7 12 02 FB | 	rdlong	arg01, fp
208e0     94 4E 85 F1 | 	sub	fp, #148
208e4     A7 14 02 FB | 	rdlong	arg02, fp
208e8     14 4E 05 F1 | 	add	fp, #20
208ec     A7 16 02 FB | 	rdlong	arg03, fp
208f0     40 4E 85 F1 | 	sub	fp, #64
208f4     B4 3D B0 FD | 	call	#__system__emitsign_0445
208f8     18 4F 05 F1 | 	add	fp, #280
208fc     A7 FA 61 FC | 	wrlong	result1, fp
20900     18 4F 85 F1 | 	sub	fp, #280
20904     00 FA 55 F2 | 	cmps	result1, #0 wc
20908     18 4F 05 C1 |  if_b	add	fp, #280
2090c     A7 FA 01 CB |  if_b	rdlong	result1, fp
20910     18 4F 85 C1 |  if_b	sub	fp, #280
20914     B8 04 90 CD |  if_b	jmp	#LR__2873
20918     C0 4E 05 F1 | 	add	fp, #192
2091c     A7 1E 02 FB | 	rdlong	local01, fp
20920     58 4E 05 F1 | 	add	fp, #88
20924     A7 22 02 FB | 	rdlong	local03, fp
20928     11 1F 02 F1 | 	add	local01, local03
2092c     58 4E 85 F1 | 	sub	fp, #88
20930     A7 1E 62 FC | 	wrlong	local01, fp
20934     C0 4E 85 F1 | 	sub	fp, #192
20938                 | LR__2846
20938     4C 4E 05 F1 | 	add	fp, #76
2093c     A7 1E 02 FB | 	rdlong	local01, fp
20940     34 4E 85 F1 | 	sub	fp, #52
20944     A7 1E 62 FC | 	wrlong	local01, fp
20948     18 4E 85 F1 | 	sub	fp, #24
2094c     97 9E 48 FB | 	callpa	#(@LR__2852-@LR__2847)>>2,fcache_load_ptr_
20950                 | LR__2847
20950     18 4E 05 F1 | 	add	fp, #24
20954     A7 20 02 FB | 	rdlong	local02, fp
20958     3C 4E 05 F1 | 	add	fp, #60
2095c     A7 26 02 FB | 	rdlong	local05, fp
20960     54 4E 85 F1 | 	sub	fp, #84
20964     13 21 52 F2 | 	cmps	local02, local05 wc
20968     20 01 90 3D |  if_ae	jmp	#LR__2853
2096c     18 4E 05 F1 | 	add	fp, #24
20970     A7 28 02 FB | 	rdlong	local06, fp
20974     18 4E 85 F1 | 	sub	fp, #24
20978     00 28 56 F2 | 	cmps	local06, #0 wc
2097c     58 00 90 CD |  if_b	jmp	#LR__2848
20980     18 4E 05 F1 | 	add	fp, #24
20984     A7 28 02 FB | 	rdlong	local06, fp
20988     40 4E 05 F1 | 	add	fp, #64
2098c     A7 2A 02 FB | 	rdlong	local07, fp
20990     58 4E 85 F1 | 	sub	fp, #88
20994     15 29 52 F2 | 	cmps	local06, local07 wc
20998     3C 00 90 3D |  if_ae	jmp	#LR__2848
2099c     C0 4E 05 F1 | 	add	fp, #192
209a0     A7 2C 02 FB | 	rdlong	local08, fp
209a4     16 2B 02 F6 | 	mov	local07, local08
209a8     01 2A 06 F1 | 	add	local07, #1
209ac     A7 2A 62 FC | 	wrlong	local07, fp
209b0     A8 4E 85 F1 | 	sub	fp, #168
209b4     A7 2A 02 FB | 	rdlong	local07, fp
209b8     15 2F 02 F6 | 	mov	local09, local07
209bc     58 4E 05 F1 | 	add	fp, #88
209c0     A7 30 02 F6 | 	mov	local10, fp
209c4     A7 2E 02 F1 | 	add	local09, fp
209c8     17 33 C2 FA | 	rdbyte	local11, local09
209cc     16 33 42 FC | 	wrbyte	local11, local08
209d0     70 4E 85 F1 | 	sub	fp, #112
209d4     20 00 90 FD | 	jmp	#LR__2849
209d8                 | LR__2848
209d8     C0 4E 05 F1 | 	add	fp, #192
209dc     A7 2C 02 FB | 	rdlong	local08, fp
209e0     16 2F 02 F6 | 	mov	local09, local08
209e4     01 2E 06 F1 | 	add	local09, #1
209e8     A7 2E 62 FC | 	wrlong	local09, fp
209ec     C0 4E 85 F1 | 	sub	fp, #192
209f0     30 2E 06 F6 | 	mov	local09, #48
209f4     16 61 48 FC | 	wrbyte	#48, local08
209f8                 | LR__2849
209f8     18 4E 05 F1 | 	add	fp, #24
209fc     A7 28 02 FB | 	rdlong	local06, fp
20a00     38 4E 05 F1 | 	add	fp, #56
20a04     A7 34 02 FB | 	rdlong	local12, fp
20a08     50 4E 85 F1 | 	sub	fp, #80
20a0c     1A 29 0A F2 | 	cmp	local06, local12 wz
20a10     5C 00 90 5D |  if_ne	jmp	#LR__2851
20a14     10 4F 05 F1 | 	add	fp, #272
20a18     A7 2A 02 FB | 	rdlong	local07, fp
20a1c     10 4F 85 F1 | 	sub	fp, #272
20a20     15 2F 0A F6 | 	mov	local09, local07 wz
20a24     28 00 90 5D |  if_ne	jmp	#LR__2850
20a28     54 4E 05 F1 | 	add	fp, #84
20a2c     A7 32 02 FB | 	rdlong	local11, fp
20a30     19 31 02 F6 | 	mov	local10, local11
20a34     01 30 86 F1 | 	sub	local10, #1
20a38     3C 4E 85 F1 | 	sub	fp, #60
20a3c     A7 36 02 FB | 	rdlong	local13, fp
20a40     18 4E 85 F1 | 	sub	fp, #24
20a44     1B 39 02 F6 | 	mov	local14, local13
20a48     18 39 52 F2 | 	cmps	local14, local10 wc
20a4c     20 00 90 3D |  if_ae	jmp	#LR__2851
20a50                 | LR__2850
20a50     C0 4E 05 F1 | 	add	fp, #192
20a54     A7 2C 02 FB | 	rdlong	local08, fp
20a58     16 35 02 F6 | 	mov	local12, local08
20a5c     01 34 06 F1 | 	add	local12, #1
20a60     A7 34 62 FC | 	wrlong	local12, fp
20a64     C0 4E 85 F1 | 	sub	fp, #192
20a68     2E 2E 06 F6 | 	mov	local09, #46
20a6c     16 5D 48 FC | 	wrbyte	#46, local08
20a70                 | LR__2851
20a70     18 4E 05 F1 | 	add	fp, #24
20a74     A7 3A 02 FB | 	rdlong	local15, fp
20a78     1D 35 02 F6 | 	mov	local12, local15
20a7c     01 34 06 F1 | 	add	local12, #1
20a80     A7 34 62 FC | 	wrlong	local12, fp
20a84     18 4E 85 F1 | 	sub	fp, #24
20a88     C4 FE 9F FD | 	jmp	#LR__2847
20a8c                 | LR__2852
20a8c                 | LR__2853
20a8c     34 4E 05 F1 | 	add	fp, #52
20a90     A7 1E 0A FB | 	rdlong	local01, fp wz
20a94     34 4E 85 F1 | 	sub	fp, #52
20a98     A0 00 90 AD |  if_e	jmp	#LR__2857
20a9c     C0 4E 05 F1 | 	add	fp, #192
20aa0     A7 1E 02 FB | 	rdlong	local01, fp
20aa4     01 1E 86 F1 | 	sub	local01, #1
20aa8     A7 1E 62 FC | 	wrlong	local01, fp
20aac     C0 4E 85 F1 | 	sub	fp, #192
20ab0     97 26 48 FB | 	callpa	#(@LR__2855-@LR__2854)>>2,fcache_load_ptr_
20ab4                 | LR__2854
20ab4     C0 4E 05 F1 | 	add	fp, #192
20ab8     A7 1E 02 FB | 	rdlong	local01, fp
20abc     04 4E 05 F1 | 	add	fp, #4
20ac0     A7 22 02 FB | 	rdlong	local03, fp
20ac4     C4 4E 85 F1 | 	sub	fp, #196
20ac8     11 1F 5A F2 | 	cmps	local01, local03 wcz
20acc     30 00 90 ED |  if_be	jmp	#LR__2856
20ad0     C0 4E 05 F1 | 	add	fp, #192
20ad4     A7 28 02 FB | 	rdlong	local06, fp
20ad8     C0 4E 85 F1 | 	sub	fp, #192
20adc     14 25 C2 FA | 	rdbyte	local04, local06
20ae0     30 24 0E F2 | 	cmp	local04, #48 wz
20ae4     18 00 90 5D |  if_ne	jmp	#LR__2856
20ae8     C0 4E 05 F1 | 	add	fp, #192
20aec     A7 1E 02 FB | 	rdlong	local01, fp
20af0     01 1E 86 F1 | 	sub	local01, #1
20af4     A7 1E 62 FC | 	wrlong	local01, fp
20af8     C0 4E 85 F1 | 	sub	fp, #192
20afc     B4 FF 9F FD | 	jmp	#LR__2854
20b00                 | LR__2855
20b00                 | LR__2856
20b00     C0 4E 05 F1 | 	add	fp, #192
20b04     A7 20 02 FB | 	rdlong	local02, fp
20b08     C0 4E 85 F1 | 	sub	fp, #192
20b0c     10 1F C2 FA | 	rdbyte	local01, local02
20b10     2E 1E 0E F2 | 	cmp	local01, #46 wz
20b14     C0 4E 05 A1 |  if_e	add	fp, #192
20b18     A7 1E 02 AB |  if_e	rdlong	local01, fp
20b1c     01 1E 86 A1 |  if_e	sub	local01, #1
20b20     A7 1E 62 AC |  if_e	wrlong	local01, fp
20b24     C0 4E 85 A1 |  if_e	sub	fp, #192
20b28     C0 4E 05 F1 | 	add	fp, #192
20b2c     A7 22 02 FB | 	rdlong	local03, fp
20b30     01 22 06 F1 | 	add	local03, #1
20b34     A7 22 62 FC | 	wrlong	local03, fp
20b38     C0 4E 85 F1 | 	sub	fp, #192
20b3c                 | LR__2857
20b3c     24 4E 05 F1 | 	add	fp, #36
20b40     A7 1E 0A FB | 	rdlong	local01, fp wz
20b44     24 4E 85 F1 | 	sub	fp, #36
20b48     B4 00 90 AD |  if_e	jmp	#LR__2860
20b4c     C0 4E 05 F1 | 	add	fp, #192
20b50     A7 20 02 FB | 	rdlong	local02, fp
20b54     10 23 02 F6 | 	mov	local03, local02
20b58     01 22 06 F1 | 	add	local03, #1
20b5c     A7 22 62 FC | 	wrlong	local03, fp
20b60     90 4E 85 F1 | 	sub	fp, #144
20b64     A7 24 02 FB | 	rdlong	local04, fp
20b68     10 25 42 FC | 	wrbyte	local04, local02
20b6c     90 4E 05 F1 | 	add	fp, #144
20b70     A7 20 02 FB | 	rdlong	local02, fp
20b74     10 23 02 F6 | 	mov	local03, local02
20b78     01 22 06 F1 | 	add	local03, #1
20b7c     A7 22 62 FC | 	wrlong	local03, fp
20b80     60 4E 85 F1 | 	sub	fp, #96
20b84     A7 24 02 FB | 	rdlong	local04, fp
20b88     10 25 42 FC | 	wrbyte	local04, local02
20b8c     48 4E 85 F1 | 	sub	fp, #72
20b90     A7 00 68 FC | 	wrlong	#0, fp
20b94     18 4E 85 F1 | 	sub	fp, #24
20b98                 | LR__2858
20b98     18 4E 05 F1 | 	add	fp, #24
20b9c     A7 20 02 FB | 	rdlong	local02, fp
20ba0     44 4E 05 F1 | 	add	fp, #68
20ba4     A7 26 02 FB | 	rdlong	local05, fp
20ba8     5C 4E 85 F1 | 	sub	fp, #92
20bac     13 21 52 F2 | 	cmps	local02, local05 wc
20bb0     4C 00 90 3D |  if_ae	jmp	#LR__2859
20bb4     C0 4E 05 F1 | 	add	fp, #192
20bb8     A7 2C 02 FB | 	rdlong	local08, fp
20bbc     16 35 02 F6 | 	mov	local12, local08
20bc0     01 34 06 F1 | 	add	local12, #1
20bc4     A7 34 62 FC | 	wrlong	local12, fp
20bc8     A8 4E 85 F1 | 	sub	fp, #168
20bcc     A7 2A 02 FB | 	rdlong	local07, fp
20bd0     15 2F 02 F6 | 	mov	local09, local07
20bd4     98 4E 05 F1 | 	add	fp, #152
20bd8     A7 30 02 F6 | 	mov	local10, fp
20bdc     A7 2E 02 F1 | 	add	local09, fp
20be0     17 33 C2 FA | 	rdbyte	local11, local09
20be4     16 33 42 FC | 	wrbyte	local11, local08
20be8     98 4E 85 F1 | 	sub	fp, #152
20bec     A7 34 02 FB | 	rdlong	local12, fp
20bf0     01 34 06 F1 | 	add	local12, #1
20bf4     A7 34 62 FC | 	wrlong	local12, fp
20bf8     18 4E 85 F1 | 	sub	fp, #24
20bfc     98 FF 9F FD | 	jmp	#LR__2858
20c00                 | LR__2859
20c00                 | LR__2860
20c00     C0 4E 05 F1 | 	add	fp, #192
20c04     A7 1E 02 FB | 	rdlong	local01, fp
20c08     C0 4E 85 F1 | 	sub	fp, #192
20c0c     0F 01 48 FC | 	wrbyte	#0, local01
20c10                 | LR__2861
20c10     6C 4E 05 F1 | 	add	fp, #108
20c14     A7 1E 0A FB | 	rdlong	local01, fp wz
20c18     6C 4E 85 F1 | 	sub	fp, #108
20c1c     90 01 90 AD |  if_e	jmp	#LR__2872
20c20     48 4E 05 F1 | 	add	fp, #72
20c24     A7 22 0A FB | 	rdlong	local03, fp wz
20c28     48 4E 85 F1 | 	sub	fp, #72
20c2c     80 01 90 AD |  if_e	jmp	#LR__2872
20c30     C4 4E 05 F1 | 	add	fp, #196
20c34     A7 12 02 FB | 	rdlong	arg01, fp
20c38     C4 4E 85 F1 | 	sub	fp, #196
20c3c     09 3D 02 F6 | 	mov	local16, arg01
20c40     97 06 48 FB | 	callpa	#(@LR__2863-@LR__2862)>>2,fcache_load_ptr_
20c44                 | LR__2862
20c44     1E FB C9 FA | 	rdbyte	result1, local16 wz
20c48     01 3C 06 51 |  if_ne	add	local16, #1
20c4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2862
20c50                 | LR__2863
20c50     09 3D 82 F1 | 	sub	local16, arg01
20c54     1E 25 02 F6 | 	mov	local04, local16
20c58     6C 4E 05 F1 | 	add	fp, #108
20c5c     A7 28 02 FB | 	rdlong	local06, fp
20c60     6C 4E 85 F1 | 	sub	fp, #108
20c64     14 25 5A F2 | 	cmps	local04, local06 wcz
20c68     44 01 90 ED |  if_be	jmp	#LR__2872
20c6c     C4 4E 05 F1 | 	add	fp, #196
20c70     A7 1E 02 FB | 	rdlong	local01, fp
20c74     5C 4E 05 F1 | 	add	fp, #92
20c78     A7 1E 62 FC | 	wrlong	local01, fp
20c7c     FC 4E 85 F1 | 	sub	fp, #252
20c80     A7 1E 0A FB | 	rdlong	local01, fp wz
20c84     24 4E 85 F1 | 	sub	fp, #36
20c88     20 00 90 AD |  if_e	jmp	#LR__2864
20c8c     B8 4E 05 F1 | 	add	fp, #184
20c90     A7 00 68 FC | 	wrlong	#0, fp
20c94     4C 4E 85 F1 | 	sub	fp, #76
20c98     A7 1E 02 FB | 	rdlong	local01, fp
20c9c     B0 4E 05 F1 | 	add	fp, #176
20ca0     A7 1E 62 FC | 	wrlong	local01, fp
20ca4     1C 4F 85 F1 | 	sub	fp, #284
20ca8     24 00 90 FD | 	jmp	#LR__2865
20cac                 | LR__2864
20cac     6C 4E 05 F1 | 	add	fp, #108
20cb0     A7 1E 02 FB | 	rdlong	local01, fp
20cb4     01 1E 86 F1 | 	sub	local01, #1
20cb8     4C 4E 05 F1 | 	add	fp, #76
20cbc     A7 22 02 FB | 	rdlong	local03, fp
20cc0     11 1F 82 F1 | 	sub	local01, local03
20cc4     64 4E 05 F1 | 	add	fp, #100
20cc8     A7 1E 62 FC | 	wrlong	local01, fp
20ccc     1C 4F 85 F1 | 	sub	fp, #284
20cd0                 | LR__2865
20cd0     97 20 48 FB | 	callpa	#(@LR__2867-@LR__2866)>>2,fcache_load_ptr_
20cd4                 | LR__2866
20cd4     1C 4F 05 F1 | 	add	fp, #284
20cd8     A7 1E 0A FB | 	rdlong	local01, fp wz
20cdc     1C 4F 85 F1 | 	sub	fp, #284
20ce0     30 00 90 AD |  if_e	jmp	#LR__2868
20ce4     20 4F 05 F1 | 	add	fp, #288
20ce8     A7 20 02 FB | 	rdlong	local02, fp
20cec     10 23 02 F6 | 	mov	local03, local02
20cf0     01 22 06 F1 | 	add	local03, #1
20cf4     A7 22 62 FC | 	wrlong	local03, fp
20cf8     10 55 48 FC | 	wrbyte	#42, local02
20cfc     04 4E 85 F1 | 	sub	fp, #4
20d00     A7 1E 02 FB | 	rdlong	local01, fp
20d04     01 1E 86 F1 | 	sub	local01, #1
20d08     A7 1E 62 FC | 	wrlong	local01, fp
20d0c     1C 4F 85 F1 | 	sub	fp, #284
20d10     C0 FF 9F FD | 	jmp	#LR__2866
20d14                 | LR__2867
20d14                 | LR__2868
20d14     B8 4E 05 F1 | 	add	fp, #184
20d18     A7 1E 0A FB | 	rdlong	local01, fp wz
20d1c     B8 4E 85 F1 | 	sub	fp, #184
20d20     70 00 90 AD |  if_e	jmp	#LR__2871
20d24     20 4F 05 F1 | 	add	fp, #288
20d28     A7 20 02 FB | 	rdlong	local02, fp
20d2c     10 23 02 F6 | 	mov	local03, local02
20d30     01 22 06 F1 | 	add	local03, #1
20d34     A7 22 62 FC | 	wrlong	local03, fp
20d38     10 5D 48 FC | 	wrbyte	#46, local02
20d3c     04 4E 85 F1 | 	sub	fp, #4
20d40     A7 00 68 FC | 	wrlong	#0, fp
20d44     1C 4F 85 F1 | 	sub	fp, #284
20d48                 | LR__2869
20d48     1C 4F 05 F1 | 	add	fp, #284
20d4c     A7 20 02 FB | 	rdlong	local02, fp
20d50     64 4E 85 F1 | 	sub	fp, #100
20d54     A7 26 02 FB | 	rdlong	local05, fp
20d58     B8 4E 85 F1 | 	sub	fp, #184
20d5c     13 21 52 F2 | 	cmps	local02, local05 wc
20d60     30 00 90 3D |  if_ae	jmp	#LR__2870
20d64     20 4F 05 F1 | 	add	fp, #288
20d68     A7 2C 02 FB | 	rdlong	local08, fp
20d6c     16 35 02 F6 | 	mov	local12, local08
20d70     01 34 06 F1 | 	add	local12, #1
20d74     A7 34 62 FC | 	wrlong	local12, fp
20d78     16 55 48 FC | 	wrbyte	#42, local08
20d7c     04 4E 85 F1 | 	sub	fp, #4
20d80     A7 34 02 FB | 	rdlong	local12, fp
20d84     01 34 06 F1 | 	add	local12, #1
20d88     A7 34 62 FC | 	wrlong	local12, fp
20d8c     1C 4F 85 F1 | 	sub	fp, #284
20d90     B4 FF 9F FD | 	jmp	#LR__2869
20d94                 | LR__2870
20d94                 | LR__2871
20d94     20 4F 05 F1 | 	add	fp, #288
20d98     A7 20 02 FB | 	rdlong	local02, fp
20d9c     10 23 02 F6 | 	mov	local03, local02
20da0     01 22 06 F1 | 	add	local03, #1
20da4     A7 22 62 FC | 	wrlong	local03, fp
20da8     20 4F 85 F1 | 	sub	fp, #288
20dac     10 01 48 FC | 	wrbyte	#0, local02
20db0                 | LR__2872
20db0     04 4E 05 F1 | 	add	fp, #4
20db4     A7 12 02 FB | 	rdlong	arg01, fp
20db8     04 4E 05 F1 | 	add	fp, #4
20dbc     A7 14 02 FB | 	rdlong	arg02, fp
20dc0     BC 4E 05 F1 | 	add	fp, #188
20dc4     A7 16 02 FB | 	rdlong	arg03, fp
20dc8     C4 4E 85 F1 | 	sub	fp, #196
20dcc     C4 EE BF FD | 	call	#__system___fmtstr
20dd0                 | LR__2873
20dd0     A7 F0 03 F6 | 	mov	ptra, fp
20dd4     B2 00 A0 FD | 	call	#popregs_
20dd8                 | __system___fmtfloat_ret
20dd8     2D 00 64 FD | 	ret
20ddc                 | 
20ddc                 | __system__Left_S
20ddc     04 4A 05 F6 | 	mov	COUNT_, #4
20de0     A8 00 A0 FD | 	call	#pushregs_
20de4     09 1F 02 F6 | 	mov	local01, arg01
20de8     0A 21 02 F6 | 	mov	local02, arg02
20dec     01 20 56 F2 | 	cmps	local02, #1 wc
20df0     71 01 00 CF 
20df4     8A FB 05 C6 |  if_b	mov	result1, ##@LR__4763
20df8     5C 00 90 CD |  if_b	jmp	#LR__2883
20dfc     0F 13 02 F6 | 	mov	arg01, local01
20e00     09 23 02 F6 | 	mov	local03, arg01
20e04     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20e08                 | LR__2880
20e08     11 FB C9 FA | 	rdbyte	result1, local03 wz
20e0c     01 22 06 51 |  if_ne	add	local03, #1
20e10     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
20e14                 | LR__2881
20e14     09 23 82 F1 | 	sub	local03, arg01
20e18     11 FB 01 F6 | 	mov	result1, local03
20e1c     10 FB 59 F2 | 	cmps	result1, local02 wcz
20e20     0F FB 01 E6 |  if_be	mov	result1, local01
20e24     30 00 90 ED |  if_be	jmp	#LR__2883
20e28     10 13 02 F6 | 	mov	arg01, local02
20e2c     02 12 06 F1 | 	add	arg01, #2
20e30     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
20e34     FD 24 0A F6 | 	mov	local04, result1 wz
20e38     18 00 90 AD |  if_e	jmp	#LR__2882
20e3c     12 13 02 F6 | 	mov	arg01, local04
20e40     0F 15 02 F6 | 	mov	arg02, local01
20e44     10 17 02 F6 | 	mov	arg03, local02
20e48     A0 DE BF FD | 	call	#__system____builtin_memmove
20e4c     12 21 02 F1 | 	add	local02, local04
20e50     10 01 48 FC | 	wrbyte	#0, local02
20e54                 | LR__2882
20e54     12 FB 01 F6 | 	mov	result1, local04
20e58                 | LR__2883
20e58     A7 F0 03 F6 | 	mov	ptra, fp
20e5c     B2 00 A0 FD | 	call	#popregs_
20e60                 | __system__Left_S_ret
20e60     2D 00 64 FD | 	ret
20e64                 | 
20e64                 | __system__Right_S
20e64     05 4A 05 F6 | 	mov	COUNT_, #5
20e68     A8 00 A0 FD | 	call	#pushregs_
20e6c     09 1F 02 F6 | 	mov	local01, arg01
20e70     0A 21 02 F6 | 	mov	local02, arg02
20e74     01 20 56 F2 | 	cmps	local02, #1 wc
20e78     71 01 00 CF 
20e7c     8B FB 05 C6 |  if_b	mov	result1, ##@LR__4764
20e80     64 00 90 CD |  if_b	jmp	#LR__2893
20e84     0F 13 02 F6 | 	mov	arg01, local01
20e88     09 23 02 F6 | 	mov	local03, arg01
20e8c     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20e90                 | LR__2890
20e90     11 FB C9 FA | 	rdbyte	result1, local03 wz
20e94     01 22 06 51 |  if_ne	add	local03, #1
20e98     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20e9c                 | LR__2891
20e9c     09 23 82 F1 | 	sub	local03, arg01
20ea0     11 FB 01 F6 | 	mov	result1, local03
20ea4     FD 24 02 F6 | 	mov	local04, result1
20ea8     10 25 5A F2 | 	cmps	local04, local02 wcz
20eac     0F FB 01 E6 |  if_be	mov	result1, local01
20eb0     34 00 90 ED |  if_be	jmp	#LR__2893
20eb4     10 13 02 F6 | 	mov	arg01, local02
20eb8     02 12 06 F1 | 	add	arg01, #2
20ebc     58 1D B0 FD | 	call	#__system___gc_alloc_managed
20ec0     FD 26 0A F6 | 	mov	local05, result1 wz
20ec4     1C 00 90 AD |  if_e	jmp	#LR__2892
20ec8     10 25 82 F1 | 	sub	local04, local02
20ecc     0F 25 02 F1 | 	add	local04, local01
20ed0     01 20 06 F1 | 	add	local02, #1
20ed4     13 13 02 F6 | 	mov	arg01, local05
20ed8     12 15 02 F6 | 	mov	arg02, local04
20edc     10 17 02 F6 | 	mov	arg03, local02
20ee0     08 DE BF FD | 	call	#__system____builtin_memmove
20ee4                 | LR__2892
20ee4     13 FB 01 F6 | 	mov	result1, local05
20ee8                 | LR__2893
20ee8     A7 F0 03 F6 | 	mov	ptra, fp
20eec     B2 00 A0 FD | 	call	#popregs_
20ef0                 | __system__Right_S_ret
20ef0     2D 00 64 FD | 	ret
20ef4                 | 
20ef4                 | __system__Mid_S
20ef4     05 4A 05 F6 | 	mov	COUNT_, #5
20ef8     A8 00 A0 FD | 	call	#pushregs_
20efc     09 1F 02 F6 | 	mov	local01, arg01
20f00     0A 21 02 F6 | 	mov	local02, arg02
20f04     01 16 56 F2 | 	cmps	arg03, #1 wc
20f08     71 01 00 CF 
20f0c     8C FB 05 C6 |  if_b	mov	result1, ##@LR__4765
20f10     80 00 90 CD |  if_b	jmp	#LR__2903
20f14     01 20 86 F1 | 	sub	local02, #1
20f18     00 20 56 F3 | 	fges	local02, #0 wc
20f1c     0F 13 02 F6 | 	mov	arg01, local01
20f20     09 23 02 F6 | 	mov	local03, arg01
20f24     97 06 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
20f28                 | LR__2900
20f28     11 FB C9 FA | 	rdbyte	result1, local03 wz
20f2c     01 22 06 51 |  if_ne	add	local03, #1
20f30     F4 FF 9F 5D |  if_ne	jmp	#LR__2900
20f34                 | LR__2901
20f34     09 23 82 F1 | 	sub	local03, arg01
20f38     11 FB 01 F6 | 	mov	result1, local03
20f3c     FD 14 02 F6 | 	mov	arg02, result1
20f40     10 15 52 F2 | 	cmps	arg02, local02 wc
20f44     71 01 00 CF 
20f48     8D FB 05 C6 |  if_b	mov	result1, ##@LR__4766
20f4c     44 00 90 CD |  if_b	jmp	#LR__2903
20f50     0A 25 02 F6 | 	mov	local04, arg02
20f54     10 25 82 F1 | 	sub	local04, local02
20f58     0B 25 5A F2 | 	cmps	local04, arg03 wcz
20f5c     0B 25 02 16 |  if_a	mov	local04, arg03
20f60     12 13 02 F6 | 	mov	arg01, local04
20f64     02 12 06 F1 | 	add	arg01, #2
20f68     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
20f6c     FD 26 0A F6 | 	mov	local05, result1 wz
20f70     1C 00 90 AD |  if_e	jmp	#LR__2902
20f74     0F 21 02 F1 | 	add	local02, local01
20f78     13 13 02 F6 | 	mov	arg01, local05
20f7c     10 15 02 F6 | 	mov	arg02, local02
20f80     12 17 02 F6 | 	mov	arg03, local04
20f84     64 DD BF FD | 	call	#__system____builtin_memmove
20f88     13 25 02 F1 | 	add	local04, local05
20f8c     12 01 48 FC | 	wrbyte	#0, local04
20f90                 | LR__2902
20f90     13 FB 01 F6 | 	mov	result1, local05
20f94                 | LR__2903
20f94     A7 F0 03 F6 | 	mov	ptra, fp
20f98     B2 00 A0 FD | 	call	#popregs_
20f9c                 | __system__Mid_S_ret
20f9c     2D 00 64 FD | 	ret
20fa0                 | 
20fa0                 | __system__Chr_S
20fa0     01 4A 05 F6 | 	mov	COUNT_, #1
20fa4     A8 00 A0 FD | 	call	#pushregs_
20fa8     09 1F 02 F6 | 	mov	local01, arg01
20fac     03 12 06 F6 | 	mov	arg01, #3
20fb0     64 1C B0 FD | 	call	#__system___gc_alloc_managed
20fb4     00 FA 4D F2 | 	cmps	result1, #0 wz
20fb8     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
20fbc     01 FA 05 51 |  if_ne	add	result1, #1
20fc0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
20fc4     01 FA 85 51 |  if_ne	sub	result1, #1
20fc8     A7 F0 03 F6 | 	mov	ptra, fp
20fcc     B2 00 A0 FD | 	call	#popregs_
20fd0                 | __system__Chr_S_ret
20fd0     2D 00 64 FD | 	ret
20fd4                 | 
20fd4                 | __system__str_S
20fd4     02 4A 05 F6 | 	mov	COUNT_, #2
20fd8     A8 00 A0 FD | 	call	#pushregs_
20fdc     09 1F 02 F6 | 	mov	local01, arg01
20fe0     10 12 06 F6 | 	mov	arg01, #16
20fe4     30 1C B0 FD | 	call	#__system___gc_alloc_managed
20fe8     FD 20 0A F6 | 	mov	local02, result1 wz
20fec     30 00 90 AD |  if_e	jmp	#LR__2910
20ff0     F8 13 02 F6 | 	mov	arg01, ptra
20ff4     08 F0 07 F1 | 	add	ptra, #8
20ff8     09 21 62 FC | 	wrlong	local02, arg01
20ffc     04 12 06 F1 | 	add	arg01, #4
21000     09 01 68 FC | 	wrlong	#0, arg01
21004     04 12 86 F1 | 	sub	arg01, #4
21008     00 50 04 FF 
2100c     00 12 46 F5 | 	or	arg01, ##144703488
21010     00 14 06 F6 | 	mov	arg02, #0
21014     0F 17 02 F6 | 	mov	arg03, local01
21018     67 18 06 F6 | 	mov	arg04, #103
2101c     90 EE BF FD | 	call	#__system___fmtfloat
21020                 | LR__2910
21020     10 FB 01 F6 | 	mov	result1, local02
21024     A7 F0 03 F6 | 	mov	ptra, fp
21028     B2 00 A0 FD | 	call	#popregs_
2102c                 | __system__str_S_ret
2102c     2D 00 64 FD | 	ret
21030                 | 
21030                 | __system__Number_S
21030     08 4A 05 F6 | 	mov	COUNT_, #8
21034     A8 00 A0 FD | 	call	#pushregs_
21038     09 1F 02 F6 | 	mov	local01, arg01
2103c     0A 21 0A F6 | 	mov	local02, arg02 wz
21040     0B 23 02 F6 | 	mov	local03, arg03
21044     3C 00 90 5D |  if_ne	jmp	#LR__2922
21048     01 20 06 F6 | 	mov	local02, #1
2104c     11 25 02 F6 | 	mov	local04, local03
21050     01 26 06 F6 | 	mov	local05, #1
21054     97 16 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
21058                 | LR__2920
21058     00 28 06 F6 | 	mov	local06, #0
2105c     0F 25 1A F2 | 	cmp	local04, local01 wcz
21060     01 28 66 E6 |  if_be	neg	local06, #1
21064     12 27 12 F2 | 	cmp	local05, local04 wc
21068     15 2B A2 F1 | 	subx	local07, local07
2106c     15 29 CA F7 | 	test	local06, local07 wz
21070     11 25 02 5D |  if_ne	qmul	local04, local03
21074     12 27 02 56 |  if_ne	mov	local05, local04
21078     01 20 06 51 |  if_ne	add	local02, #1
2107c     18 24 62 5D |  if_ne	getqx	local04
21080     D4 FF 9F 5D |  if_ne	jmp	#LR__2920
21084                 | LR__2921
21084                 | LR__2922
21084     20 20 36 F3 | 	fle	local02, #32 wc
21088     10 13 02 F6 | 	mov	arg01, local02
2108c     02 12 06 F1 | 	add	arg01, #2
21090     84 1B B0 FD | 	call	#__system___gc_alloc_managed
21094     FD 28 02 F6 | 	mov	local06, result1
21098     10 2B 02 F6 | 	mov	local07, local02
2109c     14 2B 02 F1 | 	add	local07, local06
210a0     15 01 48 FC | 	wrbyte	#0, local07
210a4     97 1A 48 FB | 	callpa	#(@LR__2924-@LR__2923)>>2,fcache_load_ptr_
210a8                 | LR__2923
210a8     01 20 16 F2 | 	cmp	local02, #1 wc
210ac     2C 00 90 CD |  if_b	jmp	#LR__2925
210b0     11 1F 12 FD | 	qdiv	local01, local03
210b4     01 20 86 F1 | 	sub	local02, #1
210b8     10 2B 02 F6 | 	mov	local07, local02
210bc     14 2B 02 F1 | 	add	local07, local06
210c0     19 2C 62 FD | 	getqy	local08
210c4     0A 2C 16 F2 | 	cmp	local08, #10 wc
210c8     30 2C 06 C1 |  if_b	add	local08, #48
210cc     37 2C 06 31 |  if_ae	add	local08, #55
210d0     15 2D 42 FC | 	wrbyte	local08, local07
210d4     18 1E 62 FD | 	getqx	local01
210d8     CC FF 9F FD | 	jmp	#LR__2923
210dc                 | LR__2924
210dc                 | LR__2925
210dc     14 FB 01 F6 | 	mov	result1, local06
210e0     A7 F0 03 F6 | 	mov	ptra, fp
210e4     B2 00 A0 FD | 	call	#popregs_
210e8                 | __system__Number_S_ret
210e8     2D 00 64 FD | 	ret
210ec                 | 
210ec                 | __system__LCase_S
210ec     07 4A 05 F6 | 	mov	COUNT_, #7
210f0     A8 00 A0 FD | 	call	#pushregs_
210f4     09 1F 02 F6 | 	mov	local01, arg01
210f8     09 21 02 F6 | 	mov	local02, arg01
210fc     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
21100                 | LR__2930
21100     10 FB C9 FA | 	rdbyte	result1, local02 wz
21104     01 20 06 51 |  if_ne	add	local02, #1
21108     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
2110c                 | LR__2931
2110c     09 21 82 F1 | 	sub	local02, arg01
21110     10 FB 01 F6 | 	mov	result1, local02
21114     FD 20 0A F6 | 	mov	local02, result1 wz
21118     71 01 00 AF 
2111c     8E FB 05 A6 |  if_e	mov	result1, ##@LR__4767
21120     7C 00 90 AD |  if_e	jmp	#LR__2937
21124     10 13 02 F6 | 	mov	arg01, local02
21128     02 12 06 F1 | 	add	arg01, #2
2112c     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
21130     FD 22 0A F6 | 	mov	local03, result1 wz
21134     64 00 90 AD |  if_e	jmp	#LR__2936
21138     01 24 66 F6 | 	neg	local04, #1
2113c     97 26 48 FB | 	callpa	#(@LR__2935-@LR__2932)>>2,fcache_load_ptr_
21140                 | LR__2932
21140     01 24 06 F1 | 	add	local04, #1
21144     12 27 02 F6 | 	mov	local05, local04
21148     0F 27 02 F1 | 	add	local05, local01
2114c     13 29 C2 FA | 	rdbyte	local06, local05
21150     41 28 56 F2 | 	cmps	local06, #65 wc
21154     18 00 90 CD |  if_b	jmp	#LR__2933
21158     5B 28 56 F2 | 	cmps	local06, #91 wc
2115c     12 2B 02 C6 |  if_b	mov	local07, local04
21160     11 2B 02 C1 |  if_b	add	local07, local03
21164     20 28 06 C1 |  if_b	add	local06, #32
21168     15 29 42 CC |  if_b	wrbyte	local06, local07
2116c     0C 00 90 CD |  if_b	jmp	#LR__2934
21170                 | LR__2933
21170     12 2B 02 F6 | 	mov	local07, local04
21174     11 2B 02 F1 | 	add	local07, local03
21178     15 29 42 FC | 	wrbyte	local06, local07
2117c                 | LR__2934
2117c     10 29 02 F6 | 	mov	local06, local02
21180     01 28 86 F1 | 	sub	local06, #1
21184     14 25 0A F2 | 	cmp	local04, local06 wz
21188     B4 FF 9F 5D |  if_ne	jmp	#LR__2932
2118c                 | LR__2935
2118c     11 21 02 F1 | 	add	local02, local03
21190     10 01 48 FC | 	wrbyte	#0, local02
21194     11 FB 01 F6 | 	mov	result1, local03
21198     04 00 90 FD | 	jmp	#LR__2937
2119c                 | LR__2936
2119c     11 FB 01 F6 | 	mov	result1, local03
211a0                 | LR__2937
211a0     A7 F0 03 F6 | 	mov	ptra, fp
211a4     B2 00 A0 FD | 	call	#popregs_
211a8                 | __system__LCase_S_ret
211a8     2D 00 64 FD | 	ret
211ac                 | 
211ac                 | __system__LTrim_S
211ac     05 4A 05 F6 | 	mov	COUNT_, #5
211b0     A8 00 A0 FD | 	call	#pushregs_
211b4     09 1F 02 F6 | 	mov	local01, arg01
211b8     09 21 02 F6 | 	mov	local02, arg01
211bc     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
211c0                 | LR__2940
211c0     10 FB C9 FA | 	rdbyte	result1, local02 wz
211c4     01 20 06 51 |  if_ne	add	local02, #1
211c8     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
211cc                 | LR__2941
211cc     09 21 82 F1 | 	sub	local02, arg01
211d0     10 FB 01 F6 | 	mov	result1, local02
211d4     FD 20 0A F6 | 	mov	local02, result1 wz
211d8     71 01 00 AF 
211dc     8F FB 05 A6 |  if_e	mov	result1, ##@LR__4768
211e0     7C 00 90 AD |  if_e	jmp	#LR__2946
211e4     00 22 06 F6 | 	mov	local03, #0
211e8     10 25 02 F6 | 	mov	local04, local02
211ec                 | LR__2942
211ec     12 23 52 F2 | 	cmps	local03, local04 wc
211f0     68 00 90 3D |  if_ae	jmp	#LR__2945
211f4     11 17 02 F6 | 	mov	arg03, local03
211f8     0F 17 02 F1 | 	add	arg03, local01
211fc     0B 17 C2 FA | 	rdbyte	arg03, arg03
21200     20 16 0E F2 | 	cmp	arg03, #32 wz
21204     4C 00 90 AD |  if_e	jmp	#LR__2944
21208     10 13 02 F6 | 	mov	arg01, local02
2120c     11 13 82 F1 | 	sub	arg01, local03
21210     02 12 06 F1 | 	add	arg01, #2
21214     00 1A B0 FD | 	call	#__system___gc_alloc_managed
21218     FD 26 0A F6 | 	mov	local05, result1 wz
2121c     2C 00 90 AD |  if_e	jmp	#LR__2943
21220     11 15 02 F6 | 	mov	arg02, local03
21224     0F 15 02 F1 | 	add	arg02, local01
21228     10 17 02 F6 | 	mov	arg03, local02
2122c     11 17 82 F1 | 	sub	arg03, local03
21230     13 13 02 F6 | 	mov	arg01, local05
21234     B4 DA BF FD | 	call	#__system____builtin_memmove
21238     11 21 82 F1 | 	sub	local02, local03
2123c     13 21 02 F1 | 	add	local02, local05
21240     10 01 48 FC | 	wrbyte	#0, local02
21244     13 FB 01 F6 | 	mov	result1, local05
21248     14 00 90 FD | 	jmp	#LR__2946
2124c                 | LR__2943
2124c     13 FB 01 F6 | 	mov	result1, local05
21250     0C 00 90 FD | 	jmp	#LR__2946
21254                 | LR__2944
21254     01 22 06 F1 | 	add	local03, #1
21258     90 FF 9F FD | 	jmp	#LR__2942
2125c                 | LR__2945
2125c     0F FB 01 F6 | 	mov	result1, local01
21260                 | LR__2946
21260     A7 F0 03 F6 | 	mov	ptra, fp
21264     B2 00 A0 FD | 	call	#popregs_
21268                 | __system__LTrim_S_ret
21268     2D 00 64 FD | 	ret
2126c                 | 
2126c                 | __system__RTrim_S
2126c     04 4A 05 F6 | 	mov	COUNT_, #4
21270     A8 00 A0 FD | 	call	#pushregs_
21274     09 1F 02 F6 | 	mov	local01, arg01
21278     09 21 02 F6 | 	mov	local02, arg01
2127c     97 06 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
21280                 | LR__2950
21280     10 FB C9 FA | 	rdbyte	result1, local02 wz
21284     01 20 06 51 |  if_ne	add	local02, #1
21288     F4 FF 9F 5D |  if_ne	jmp	#LR__2950
2128c                 | LR__2951
2128c     09 21 82 F1 | 	sub	local02, arg01
21290     10 FB 01 F6 | 	mov	result1, local02
21294     FD 20 0A F6 | 	mov	local02, result1 wz
21298     71 01 00 AF 
2129c     90 FB 05 A6 |  if_e	mov	result1, ##@LR__4769
212a0     74 00 90 AD |  if_e	jmp	#LR__2955
212a4     10 23 02 F6 | 	mov	local03, local02
212a8     01 22 86 F1 | 	sub	local03, #1
212ac                 | LR__2952
212ac     11 15 02 F6 | 	mov	arg02, local03
212b0     0F 15 02 F1 | 	add	arg02, local01
212b4     0A 21 C2 FA | 	rdbyte	local02, arg02
212b8     20 20 0E F2 | 	cmp	local02, #32 wz
212bc     44 00 90 AD |  if_e	jmp	#LR__2954
212c0     11 13 02 F6 | 	mov	arg01, local03
212c4     02 12 06 F1 | 	add	arg01, #2
212c8     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
212cc     FD 24 0A F6 | 	mov	local04, result1 wz
212d0     28 00 90 AD |  if_e	jmp	#LR__2953
212d4     11 17 02 F6 | 	mov	arg03, local03
212d8     01 16 06 F1 | 	add	arg03, #1
212dc     12 13 02 F6 | 	mov	arg01, local04
212e0     0F 15 02 F6 | 	mov	arg02, local01
212e4     04 DA BF FD | 	call	#__system____builtin_memmove
212e8     01 22 06 F1 | 	add	local03, #1
212ec     12 23 02 F1 | 	add	local03, local04
212f0     11 01 48 FC | 	wrbyte	#0, local03
212f4     12 FB 01 F6 | 	mov	result1, local04
212f8     1C 00 90 FD | 	jmp	#LR__2955
212fc                 | LR__2953
212fc     12 FB 01 F6 | 	mov	result1, local04
21300     14 00 90 FD | 	jmp	#LR__2955
21304                 | LR__2954
21304     01 22 86 F1 | 	sub	local03, #1
21308     00 22 56 F2 | 	cmps	local03, #0 wc
2130c     9C FF 9F 3D |  if_ae	jmp	#LR__2952
21310     71 01 00 FF 
21314     91 FB 05 F6 | 	mov	result1, ##@LR__4770
21318                 | LR__2955
21318     A7 F0 03 F6 | 	mov	ptra, fp
2131c     B2 00 A0 FD | 	call	#popregs_
21320                 | __system__RTrim_S_ret
21320     2D 00 64 FD | 	ret
21324                 | 
21324                 | __system__Instr
21324     07 4A 05 F6 | 	mov	COUNT_, #7
21328     A8 00 A0 FD | 	call	#pushregs_
2132c     09 1F 02 F6 | 	mov	local01, arg01
21330     0A 21 02 F6 | 	mov	local02, arg02
21334     0B 23 02 F6 | 	mov	local03, arg03
21338     11 13 02 F6 | 	mov	arg01, local03
2133c     09 25 02 F6 | 	mov	local04, arg01
21340     97 06 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
21344                 | LR__2960
21344     12 FB C9 FA | 	rdbyte	result1, local04 wz
21348     01 24 06 51 |  if_ne	add	local04, #1
2134c     F4 FF 9F 5D |  if_ne	jmp	#LR__2960
21350                 | LR__2961
21350     09 25 82 F1 | 	sub	local04, arg01
21354     12 27 02 F6 | 	mov	local05, local04
21358     10 13 02 F6 | 	mov	arg01, local02
2135c     09 25 02 F6 | 	mov	local04, arg01
21360     97 06 48 FB | 	callpa	#(@LR__2963-@LR__2962)>>2,fcache_load_ptr_
21364                 | LR__2962
21364     12 FB C9 FA | 	rdbyte	result1, local04 wz
21368     01 24 06 51 |  if_ne	add	local04, #1
2136c     F4 FF 9F 5D |  if_ne	jmp	#LR__2962
21370                 | LR__2963
21370     09 25 82 F1 | 	sub	local04, arg01
21374     12 FB 01 F6 | 	mov	result1, local04
21378     FD 18 0A F6 | 	mov	arg04, result1 wz
2137c     00 FA 05 A6 |  if_e	mov	result1, #0
21380     98 00 90 AD |  if_e	jmp	#LR__2967
21384     00 26 0E F2 | 	cmp	local05, #0 wz
21388     00 FA 05 A6 |  if_e	mov	result1, #0
2138c     8C 00 90 AD |  if_e	jmp	#LR__2967
21390     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
21394     00 FA 05 16 |  if_a	mov	result1, #0
21398     80 00 90 1D |  if_a	jmp	#LR__2967
2139c     01 1E 56 F2 | 	cmps	local01, #1 wc
213a0     01 1E 06 C6 |  if_b	mov	local01, #1
213a4     11 29 C2 FA | 	rdbyte	local06, local03
213a8     01 26 0E F2 | 	cmp	local05, #1 wz
213ac     18 00 90 5D |  if_ne	jmp	#LR__2964
213b0     10 13 02 F6 | 	mov	arg01, local02
213b4     14 15 02 F6 | 	mov	arg02, local06
213b8     0F 17 02 F6 | 	mov	arg03, local01
213bc     00 18 06 F6 | 	mov	arg04, #0
213c0     F0 33 B0 FD | 	call	#__system____ScanForChar
213c4     54 00 90 FD | 	jmp	#LR__2967
213c8                 | LR__2964
213c8     0F 2B 02 F6 | 	mov	local07, local01
213cc                 | LR__2965
213cc     10 13 02 F6 | 	mov	arg01, local02
213d0     14 15 02 F6 | 	mov	arg02, local06
213d4     15 17 02 F6 | 	mov	arg03, local07
213d8     00 18 06 F6 | 	mov	arg04, #0
213dc     D4 33 B0 FD | 	call	#__system____ScanForChar
213e0     FD 2A 0A F6 | 	mov	local07, result1 wz
213e4     30 00 90 AD |  if_e	jmp	#LR__2966
213e8     13 17 02 F6 | 	mov	arg03, local05
213ec     10 13 02 F6 | 	mov	arg01, local02
213f0     15 15 02 F6 | 	mov	arg02, local07
213f4     FC FA BF FD | 	call	#__system__Mid_S
213f8     FD 12 02 F6 | 	mov	arg01, result1
213fc     11 15 02 F6 | 	mov	arg02, local03
21400     F0 D9 BF FD | 	call	#__system___string_cmp
21404     00 FA 0D F2 | 	cmp	result1, #0 wz
21408     15 FB 01 A6 |  if_e	mov	result1, local07
2140c     0C 00 90 AD |  if_e	jmp	#LR__2967
21410     13 2B 02 F1 | 	add	local07, local05
21414     B4 FF 9F FD | 	jmp	#LR__2965
21418                 | LR__2966
21418     00 FA 05 F6 | 	mov	result1, #0
2141c                 | LR__2967
2141c     A7 F0 03 F6 | 	mov	ptra, fp
21420     B2 00 A0 FD | 	call	#popregs_
21424                 | __system__Instr_ret
21424     2D 00 64 FD | 	ret
21428                 | 
21428                 | __system___strerror
21428     00 12 56 F2 | 	cmps	arg01, #0 wc
2142c     08 00 90 CD |  if_b	jmp	#LR__2970
21430     1A 12 56 F2 | 	cmps	arg01, #26 wc
21434     04 00 90 CD |  if_b	jmp	#LR__2971
21438                 | LR__2970
21438     19 12 06 F6 | 	mov	arg01, #25
2143c                 | LR__2971
2143c     02 12 66 F0 | 	shl	arg01, #2
21440     01 00 00 FF 
21444     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
21448     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2144c     09 FB 01 FB | 	rdlong	result1, arg01
21450     01 00 00 FF 
21454     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
21458                 | __system___strerror_ret
21458     2D 00 64 FD | 	ret
2145c                 | 
2145c                 | __system___int64_shl
2145c     20 16 CE F7 | 	test	arg03, #32 wz
21460     09 15 02 56 |  if_ne	mov	arg02, arg01
21464     00 12 06 56 |  if_ne	mov	arg01, #0
21468     1F 16 CE F7 | 	test	arg03, #31 wz
2146c     18 00 90 AD |  if_e	jmp	#LR__2980
21470     0B 15 62 F0 | 	shl	arg02, arg03
21474     09 FB 01 F6 | 	mov	result1, arg01
21478     0B FD 61 F6 | 	neg	result2, arg03
2147c     FE FA 41 F0 | 	shr	result1, result2
21480     FD 14 42 F5 | 	or	arg02, result1
21484     0B 13 62 F0 | 	shl	arg01, arg03
21488                 | LR__2980
21488     0A FD 01 F6 | 	mov	result2, arg02
2148c     09 FB 01 F6 | 	mov	result1, arg01
21490                 | __system___int64_shl_ret
21490     2D 00 64 FD | 	ret
21494                 | 
21494                 | __system___usepins
21494     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21498     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2149c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
214a0     00 13 CA F7 | 	test	arg01, _var01 wz
214a4     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
214a8     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
214ac     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
214b0     01 15 CA A7 |  if_e	test	arg02, _var02 wz
214b4     00 FA 05 56 |  if_ne	mov	result1, #0
214b8     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
214bc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
214c0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
214c4     09 03 42 F5 | 	or	_var02, arg01
214c8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
214cc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
214d0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
214d4     0A 03 42 F5 | 	or	_var02, arg02
214d8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
214dc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
214e0     01 FA 65 F6 | 	neg	result1, #1
214e4                 | __system___usepins_ret
214e4     2D 00 64 FD | 	ret
214e8                 | 
214e8                 | __system___freepins
214e8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
214ec     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
214f0     09 01 22 F5 | 	andn	_var01, arg01
214f4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
214f8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
214fc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21500     0A 01 22 F5 | 	andn	_var01, arg02
21504     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
21508     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2150c                 | __system___freepins_ret
2150c     2D 00 64 FD | 	ret
21510                 | 
21510                 | __system___float_fromuns
21510     09 17 0A F6 | 	mov	arg03, arg01 wz
21514     0B FB 01 A6 |  if_e	mov	result1, arg03
21518     24 00 90 AD |  if_e	jmp	#LR__2990
2151c     0B 15 92 F7 | 	encod	arg02, arg03 wc
21520     01 14 06 C1 |  if_b	add	arg02, #1
21524     01 14 86 F1 | 	sub	arg02, #1
21528     1F 12 06 F6 | 	mov	arg01, #31
2152c     0A 13 82 F1 | 	sub	arg01, arg02
21530     09 17 62 F0 | 	shl	arg03, arg01
21534     02 16 46 F0 | 	shr	arg03, #2
21538     00 12 06 F6 | 	mov	arg01, #0
2153c     4C 09 B0 FD | 	call	#__system___float_Pack
21540                 | LR__2990
21540                 | __system___float_fromuns_ret
21540     2D 00 64 FD | 	ret
21544                 | 
21544                 | __system___float_add
21544     0F 4A 05 F6 | 	mov	COUNT_, #15
21548     A8 00 A0 FD | 	call	#pushregs_
2154c     09 1F 02 F6 | 	mov	local01, arg01
21550     0A 21 02 F6 | 	mov	local02, arg02
21554     00 22 06 F6 | 	mov	local03, #0
21558     0F 25 02 F6 | 	mov	local04, local01
2155c     12 27 02 F6 | 	mov	local05, local04
21560     16 26 46 F7 | 	zerox	local05, #22
21564     12 29 02 F6 | 	mov	local06, local04
21568     01 28 66 F0 | 	shl	local06, #1
2156c     18 28 46 F0 | 	shr	local06, #24
21570     1F 24 46 F0 | 	shr	local04, #31
21574     10 13 02 F6 | 	mov	arg01, local02
21578     09 FB 01 F6 | 	mov	result1, arg01
2157c     FD 2A 02 F6 | 	mov	local07, result1
21580     15 2D 02 F6 | 	mov	local08, local07
21584     16 2C 46 F7 | 	zerox	local08, #22
21588     15 2F 02 F6 | 	mov	local09, local07
2158c     01 2E 66 F0 | 	shl	local09, #1
21590     18 2E 46 F0 | 	shr	local09, #24
21594     17 31 02 F6 | 	mov	local10, local09
21598     1F 2A 46 F0 | 	shr	local07, #31
2159c     00 32 06 F6 | 	mov	local11, #0
215a0     00 34 06 F6 | 	mov	local12, #0
215a4     18 29 12 F2 | 	cmp	local06, local10 wc
215a8     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
215ac     2C 00 90 1D |  if_a	jmp	#LR__3000
215b0     16 27 12 32 |  if_ae	cmp	local05, local08 wc
215b4     24 00 90 3D |  if_ae	jmp	#LR__3000
215b8     13 37 02 F6 | 	mov	local13, local05
215bc     16 27 02 F6 | 	mov	local05, local08
215c0     1B 2D 02 F6 | 	mov	local08, local13
215c4     14 37 02 F6 | 	mov	local13, local06
215c8     18 29 02 F6 | 	mov	local06, local10
215cc     1B 31 02 F6 | 	mov	local10, local13
215d0     12 37 02 F6 | 	mov	local13, local04
215d4     15 25 02 F6 | 	mov	local04, local07
215d8     1B 2B 02 F6 | 	mov	local07, local13
215dc                 | LR__3000
215dc     FF 28 0E F2 | 	cmp	local06, #255 wz
215e0     70 01 90 AD |  if_e	jmp	#LR__3015
215e4     00 28 0E F2 | 	cmp	local06, #0 wz
215e8     AC 01 90 AD |  if_e	jmp	#LR__3017
215ec     17 26 26 F4 | 	bith	local05, #23
215f0                 | LR__3001
215f0     00 30 0E F2 | 	cmp	local10, #0 wz
215f4     F0 01 90 AD |  if_e	jmp	#LR__3021
215f8     17 2C 26 F4 | 	bith	local08, #23
215fc                 | LR__3002
215fc     7F 28 86 F1 | 	sub	local06, #127
21600     7F 30 86 F1 | 	sub	local10, #127
21604     14 39 02 F6 | 	mov	local14, local06
21608     18 39 82 F1 | 	sub	local14, local10
2160c     97 14 48 FB | 	callpa	#(@LR__3004-@LR__3003)>>2,fcache_load_ptr_
21610                 | LR__3003
21610     20 38 56 F2 | 	cmps	local14, #32 wc
21614     20 00 90 CD |  if_b	jmp	#LR__3005
21618     16 2F 02 F6 | 	mov	local09, local08
2161c     00 32 0E F2 | 	cmp	local11, #0 wz
21620     6F 32 62 FD | 	wrnz	local11
21624     19 2F 42 F5 | 	or	local09, local11
21628     17 33 02 F6 | 	mov	local11, local09
2162c     00 2C 06 F6 | 	mov	local08, #0
21630     20 38 86 F1 | 	sub	local14, #32
21634     D8 FF 9F FD | 	jmp	#LR__3003
21638                 | LR__3004
21638                 | LR__3005
21638     00 38 0E F2 | 	cmp	local14, #0 wz
2163c     38 00 90 AD |  if_e	jmp	#LR__3006
21640     16 37 02 F6 | 	mov	local13, local08
21644     20 30 06 F6 | 	mov	local10, #32
21648     1C 31 82 F1 | 	sub	local10, local14
2164c     18 37 62 F0 | 	shl	local13, local10
21650     19 31 02 F6 | 	mov	local10, local11
21654     20 2E 06 F6 | 	mov	local09, #32
21658     1C 2F 82 F1 | 	sub	local09, local14
2165c     17 31 6A F0 | 	shl	local10, local09 wz
21660     1C 33 42 F0 | 	shr	local11, local14
21664     1C 2D 42 F0 | 	shr	local08, local14
21668     1B 33 42 F5 | 	or	local11, local13
2166c     00 3A 06 F6 | 	mov	local15, #0
21670     01 3A 06 56 |  if_ne	mov	local15, #1
21674     1D 33 42 F5 | 	or	local11, local15
21678                 | LR__3006
21678     12 3B 02 F6 | 	mov	local15, local04
2167c     15 3B 62 F5 | 	xor	local15, local07
21680     01 3A CE F7 | 	test	local15, #1 wz
21684     18 00 90 AD |  if_e	jmp	#LR__3007
21688     16 2D 22 F6 | 	not	local08, local08
2168c     19 33 22 F6 | 	not	local11, local11
21690     01 32 0E F1 | 	add	local11, #1 wz
21694     00 3A 06 F6 | 	mov	local15, #0
21698     01 3A 06 A6 |  if_e	mov	local15, #1
2169c     1D 2D 02 F1 | 	add	local08, local15
216a0                 | LR__3007
216a0     19 35 12 F1 | 	add	local12, local11 wc
216a4     16 27 22 F1 | 	addx	local05, local08
216a8     00 26 56 F2 | 	cmps	local05, #0 wc
216ac     1C 00 90 3D |  if_ae	jmp	#LR__3008
216b0     01 24 66 F5 | 	xor	local04, #1
216b4     13 27 22 F6 | 	not	local05, local05
216b8     1A 35 22 F6 | 	not	local12, local12
216bc     01 34 0E F1 | 	add	local12, #1 wz
216c0     00 3A 06 F6 | 	mov	local15, #0
216c4     01 3A 06 A6 |  if_e	mov	local15, #1
216c8     1D 27 02 F1 | 	add	local05, local15
216cc                 | LR__3008
216cc     00 80 00 FF 
216d0     00 26 16 F2 | 	cmp	local05, ##16777216 wc
216d4     28 00 90 CD |  if_b	jmp	#LR__3009
216d8     01 28 06 F1 | 	add	local06, #1
216dc     1A 39 02 F6 | 	mov	local14, local12
216e0     01 38 06 F5 | 	and	local14, #1
216e4     01 34 46 F0 | 	shr	local12, #1
216e8     13 3B 02 F6 | 	mov	local15, local05
216ec     1F 3A 66 F0 | 	shl	local15, #31
216f0     1D 35 42 F5 | 	or	local12, local15
216f4     1C 35 42 F5 | 	or	local12, local14
216f8     01 26 46 F0 | 	shr	local05, #1
216fc     3C 00 90 FD | 	jmp	#LR__3014
21700                 | LR__3009
21700     00 40 00 FF 
21704     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21708     30 00 90 3D |  if_ae	jmp	#LR__3013
2170c     00 26 0E F2 | 	cmp	local05, #0 wz
21710     00 34 0E A2 |  if_e	cmp	local12, #0 wz
21714     08 24 46 A5 |  if_e	or	local04, #8
21718     01 24 26 A5 |  if_e	andn	local04, #1
2171c     1C 00 90 AD |  if_e	jmp	#LR__3012
21720                 | LR__3010
21720     00 40 00 FF 
21724     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21728     10 00 90 3D |  if_ae	jmp	#LR__3011
2172c     1A 35 12 F1 | 	add	local12, local12 wc
21730     13 27 22 F1 | 	addx	local05, local05
21734     01 28 86 F1 | 	sub	local06, #1
21738     E4 FF 9F FD | 	jmp	#LR__3010
2173c                 | LR__3011
2173c                 | LR__3012
2173c                 | LR__3013
2173c                 | LR__3014
2173c     13 13 02 F6 | 	mov	arg01, local05
21740     1A 15 02 F6 | 	mov	arg02, local12
21744     14 17 02 F6 | 	mov	arg03, local06
21748     12 19 02 F6 | 	mov	arg04, local04
2174c     A8 34 B0 FD | 	call	#__system__pack_0551
21750     DC 00 90 FD | 	jmp	#LR__3025
21754                 | LR__3015
21754     FF 30 0E F2 | 	cmp	local10, #255 wz
21758     10 00 90 5D |  if_ne	jmp	#LR__3016
2175c     12 2B 0A F2 | 	cmp	local07, local04 wz
21760     00 F8 3F 5F 
21764     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
21768     C4 00 90 5D |  if_ne	jmp	#LR__3025
2176c                 | LR__3016
2176c     00 26 0E F2 | 	cmp	local05, #0 wz
21770     00 F8 3F 5F 
21774     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
21778     B4 00 90 5D |  if_ne	jmp	#LR__3025
2177c     1A 15 02 F6 | 	mov	arg02, local12
21780     14 17 02 F6 | 	mov	arg03, local06
21784     12 19 02 F6 | 	mov	arg04, local04
21788     02 18 46 F5 | 	or	arg04, #2
2178c     13 13 02 F6 | 	mov	arg01, local05
21790     64 34 B0 FD | 	call	#__system__pack_0551
21794     98 00 90 FD | 	jmp	#LR__3025
21798                 | LR__3017
21798     00 26 0E F2 | 	cmp	local05, #0 wz
2179c     28 00 90 AD |  if_e	jmp	#LR__3020
217a0     01 26 66 F0 | 	shl	local05, #1
217a4     97 0E 48 FB | 	callpa	#(@LR__3019-@LR__3018)>>2,fcache_load_ptr_
217a8                 | LR__3018
217a8     00 40 00 FF 
217ac     00 26 16 F2 | 	cmp	local05, ##8388608 wc
217b0     14 3B 02 C6 |  if_b	mov	local15, local06
217b4     01 3A 86 C1 |  if_b	sub	local15, #1
217b8     1D 29 02 C6 |  if_b	mov	local06, local15
217bc     01 26 66 C0 |  if_b	shl	local05, #1
217c0     E4 FF 9F CD |  if_b	jmp	#LR__3018
217c4                 | LR__3019
217c4     28 FE 9F FD | 	jmp	#LR__3001
217c8                 | LR__3020
217c8     15 25 02 F5 | 	and	local04, local07
217cc     12 19 02 F6 | 	mov	arg04, local04
217d0     08 18 46 F5 | 	or	arg04, #8
217d4     00 12 06 F6 | 	mov	arg01, #0
217d8     00 14 06 F6 | 	mov	arg02, #0
217dc     00 16 06 F6 | 	mov	arg03, #0
217e0     14 34 B0 FD | 	call	#__system__pack_0551
217e4     48 00 90 FD | 	jmp	#LR__3025
217e8                 | LR__3021
217e8     00 2C 0E F2 | 	cmp	local08, #0 wz
217ec     28 00 90 AD |  if_e	jmp	#LR__3024
217f0     01 2C 66 F0 | 	shl	local08, #1
217f4     97 0E 48 FB | 	callpa	#(@LR__3023-@LR__3022)>>2,fcache_load_ptr_
217f8                 | LR__3022
217f8     00 40 00 FF 
217fc     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
21800     18 3B 02 C6 |  if_b	mov	local15, local10
21804     01 3A 86 C1 |  if_b	sub	local15, #1
21808     1D 31 02 C6 |  if_b	mov	local10, local15
2180c     01 2C 66 C0 |  if_b	shl	local08, #1
21810     E4 FF 9F CD |  if_b	jmp	#LR__3022
21814                 | LR__3023
21814     E4 FD 9F FD | 	jmp	#LR__3002
21818                 | LR__3024
21818     7F 28 86 F1 | 	sub	local06, #127
2181c     13 13 02 F6 | 	mov	arg01, local05
21820     1A 15 02 F6 | 	mov	arg02, local12
21824     14 17 02 F6 | 	mov	arg03, local06
21828     12 19 02 F6 | 	mov	arg04, local04
2182c     C8 33 B0 FD | 	call	#__system__pack_0551
21830                 | LR__3025
21830     A7 F0 03 F6 | 	mov	ptra, fp
21834     B2 00 A0 FD | 	call	#popregs_
21838                 | __system___float_add_ret
21838     2D 00 64 FD | 	ret
2183c                 | 
2183c                 | __system___float_sqrt
2183c     04 4A 05 F6 | 	mov	COUNT_, #4
21840     A8 00 A0 FD | 	call	#pushregs_
21844     09 1F 02 F6 | 	mov	local01, arg01
21848     09 FB 01 F6 | 	mov	result1, arg01
2184c     FD 20 02 F6 | 	mov	local02, result1
21850     10 23 02 F6 | 	mov	local03, local02
21854     16 22 46 F7 | 	zerox	local03, #22
21858     10 25 02 F6 | 	mov	local04, local02
2185c     01 24 66 F0 | 	shl	local04, #1
21860     18 24 4E F0 | 	shr	local04, #24 wz
21864     1F 20 46 F0 | 	shr	local02, #31
21868     70 00 90 AD |  if_e	jmp	#LR__3031
2186c     17 22 26 F4 | 	bith	local03, #23
21870                 | LR__3030
21870     00 20 0E F2 | 	cmp	local02, #0 wz
21874     00 F8 3F 5F 
21878     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2187c     88 00 90 5D |  if_ne	jmp	#LR__3034
21880     FF 24 0E F2 | 	cmp	local04, #255 wz
21884     0F FB 01 A6 |  if_e	mov	result1, local01
21888     7C 00 90 AD |  if_e	jmp	#LR__3034
2188c     7F 24 86 F1 | 	sub	local04, #127
21890     01 24 CE F7 | 	test	local04, #1 wz
21894     01 22 66 50 |  if_ne	shl	local03, #1
21898     05 22 66 F0 | 	shl	local03, #5
2189c     11 01 38 FD | 	qsqrt	#0, local03
218a0     01 24 86 51 |  if_ne	sub	local04, #1
218a4     12 25 52 F6 | 	abs	local04, local04 wc
218a8     01 24 46 F0 | 	shr	local04, #1
218ac     12 17 82 F6 | 	negc	arg03, local04
218b0     10 19 02 F6 | 	mov	arg04, local02
218b4     18 12 62 FD | 	getqx	arg01
218b8     09 15 02 F6 | 	mov	arg02, arg01
218bc     19 14 66 F0 | 	shl	arg02, #25
218c0     07 12 46 F0 | 	shr	arg01, #7
218c4     00 80 00 FF 
218c8     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
218cc     01 16 06 31 |  if_ae	add	arg03, #1
218d0     01 12 46 30 |  if_ae	shr	arg01, #1
218d4     20 33 B0 FD | 	call	#__system__pack_0551
218d8     2C 00 90 FD | 	jmp	#LR__3034
218dc                 | LR__3031
218dc     00 22 0E F2 | 	cmp	local03, #0 wz
218e0     0F FB 01 A6 |  if_e	mov	result1, local01
218e4     20 00 90 AD |  if_e	jmp	#LR__3034
218e8     01 22 66 F0 | 	shl	local03, #1
218ec     97 0A 48 FB | 	callpa	#(@LR__3033-@LR__3032)>>2,fcache_load_ptr_
218f0                 | LR__3032
218f0     00 40 00 FF 
218f4     00 22 16 F2 | 	cmp	local03, ##8388608 wc
218f8     01 24 86 C1 |  if_b	sub	local04, #1
218fc     01 22 66 C0 |  if_b	shl	local03, #1
21900     EC FF 9F CD |  if_b	jmp	#LR__3032
21904                 | LR__3033
21904     68 FF 9F FD | 	jmp	#LR__3030
21908                 | LR__3034
21908     A7 F0 03 F6 | 	mov	ptra, fp
2190c     B2 00 A0 FD | 	call	#popregs_
21910                 | __system___float_sqrt_ret
21910     2D 00 64 FD | 	ret
21914                 | 
21914                 | __system___float_mul
21914     0B 4A 05 F6 | 	mov	COUNT_, #11
21918     A8 00 A0 FD | 	call	#pushregs_
2191c     09 1F 02 F6 | 	mov	local01, arg01
21920     0A 21 02 F6 | 	mov	local02, arg02
21924     0F 23 02 F6 | 	mov	local03, local01
21928     11 25 02 F6 | 	mov	local04, local03
2192c     16 24 46 F7 | 	zerox	local04, #22
21930     11 27 02 F6 | 	mov	local05, local03
21934     01 26 66 F0 | 	shl	local05, #1
21938     18 26 46 F0 | 	shr	local05, #24
2193c     1F 22 46 F0 | 	shr	local03, #31
21940     10 FB 01 F6 | 	mov	result1, local02
21944     FD 28 02 F6 | 	mov	local06, result1
21948     14 2B 02 F6 | 	mov	local07, local06
2194c     16 2A 46 F7 | 	zerox	local07, #22
21950     14 2D 02 F6 | 	mov	local08, local06
21954     01 2C 66 F0 | 	shl	local08, #1
21958     18 2C 46 F0 | 	shr	local08, #24
2195c     1F 28 46 F0 | 	shr	local06, #31
21960     14 23 62 F5 | 	xor	local03, local06
21964     FF 26 0E F2 | 	cmp	local05, #255 wz
21968     90 00 90 AD |  if_e	jmp	#LR__3043
2196c     FF 2C 0E F2 | 	cmp	local08, #255 wz
21970     D8 00 90 AD |  if_e	jmp	#LR__3045
21974     00 26 0E F2 | 	cmp	local05, #0 wz
21978     0C 01 90 AD |  if_e	jmp	#LR__3046
2197c     17 24 26 F4 | 	bith	local04, #23
21980                 | LR__3040
21980     00 2C 0E F2 | 	cmp	local08, #0 wz
21984     44 01 90 AD |  if_e	jmp	#LR__3050
21988     17 2A 26 F4 | 	bith	local07, #23
2198c                 | LR__3041
2198c     12 21 02 F6 | 	mov	local02, local04
21990     04 20 66 F0 | 	shl	local02, #4
21994     15 29 02 F6 | 	mov	local06, local07
21998     05 28 66 F0 | 	shl	local06, #5
2199c     14 21 02 FD | 	qmul	local02, local06
219a0     16 27 02 F1 | 	add	local05, local08
219a4     FE 26 86 F1 | 	sub	local05, #254
219a8     13 2F 02 F6 | 	mov	local09, local05
219ac     04 24 66 F0 | 	shl	local04, #4
219b0     05 2A 66 F0 | 	shl	local07, #5
219b4     18 30 62 FD | 	getqx	local10
219b8     15 25 02 FD | 	qmul	local04, local07
219bc     19 32 62 FD | 	getqy	local11
219c0     00 80 00 FF 
219c4     00 32 16 F2 | 	cmp	local11, ##16777216 wc
219c8     18 00 90 CD |  if_b	jmp	#LR__3042
219cc     01 2E 06 F1 | 	add	local09, #1
219d0     01 30 46 F0 | 	shr	local10, #1
219d4     19 2D 02 F6 | 	mov	local08, local11
219d8     1F 2C 66 F0 | 	shl	local08, #31
219dc     16 31 42 F5 | 	or	local10, local08
219e0     01 32 46 F0 | 	shr	local11, #1
219e4                 | LR__3042
219e4     19 13 02 F6 | 	mov	arg01, local11
219e8     18 15 02 F6 | 	mov	arg02, local10
219ec     17 17 02 F6 | 	mov	arg03, local09
219f0     11 19 02 F6 | 	mov	arg04, local03
219f4     00 32 B0 FD | 	call	#__system__pack_0551
219f8     10 01 90 FD | 	jmp	#LR__3054
219fc                 | LR__3043
219fc     00 24 0E F2 | 	cmp	local04, #0 wz
21a00     0F FB 01 56 |  if_ne	mov	result1, local01
21a04     04 01 90 5D |  if_ne	jmp	#LR__3054
21a08     FF 2C 56 F2 | 	cmps	local08, #255 wc
21a0c     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
21a10     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
21a14     18 00 90 4D |  if_c_and_nz	jmp	#LR__3044
21a18     00 F8 3F CF 
21a1c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
21a20     E8 00 90 CD |  if_b	jmp	#LR__3054
21a24     00 2A 0E F2 | 	cmp	local07, #0 wz
21a28     10 FB 01 56 |  if_ne	mov	result1, local02
21a2c     DC 00 90 5D |  if_ne	jmp	#LR__3054
21a30                 | LR__3044
21a30     02 22 46 F5 | 	or	local03, #2
21a34     00 12 06 F6 | 	mov	arg01, #0
21a38     00 14 06 F6 | 	mov	arg02, #0
21a3c     13 17 02 F6 | 	mov	arg03, local05
21a40     11 19 02 F6 | 	mov	arg04, local03
21a44     B0 31 B0 FD | 	call	#__system__pack_0551
21a48     C0 00 90 FD | 	jmp	#LR__3054
21a4c                 | LR__3045
21a4c     00 26 0E F2 | 	cmp	local05, #0 wz
21a50     00 24 0E A2 |  if_e	cmp	local04, #0 wz
21a54     00 F8 3F AF 
21a58     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21a5c     AC 00 90 AD |  if_e	jmp	#LR__3054
21a60     00 2A 0E F2 | 	cmp	local07, #0 wz
21a64     10 FB 01 56 |  if_ne	mov	result1, local02
21a68     A0 00 90 5D |  if_ne	jmp	#LR__3054
21a6c     16 17 02 F6 | 	mov	arg03, local08
21a70     11 19 02 F6 | 	mov	arg04, local03
21a74     02 18 46 F5 | 	or	arg04, #2
21a78     00 12 06 F6 | 	mov	arg01, #0
21a7c     00 14 06 F6 | 	mov	arg02, #0
21a80     74 31 B0 FD | 	call	#__system__pack_0551
21a84     84 00 90 FD | 	jmp	#LR__3054
21a88                 | LR__3046
21a88     00 24 0E F2 | 	cmp	local04, #0 wz
21a8c     20 00 90 AD |  if_e	jmp	#LR__3049
21a90     01 24 66 F0 | 	shl	local04, #1
21a94     97 0A 48 FB | 	callpa	#(@LR__3048-@LR__3047)>>2,fcache_load_ptr_
21a98                 | LR__3047
21a98     00 40 00 FF 
21a9c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
21aa0     01 26 86 C1 |  if_b	sub	local05, #1
21aa4     01 24 66 C0 |  if_b	shl	local04, #1
21aa8     EC FF 9F CD |  if_b	jmp	#LR__3047
21aac                 | LR__3048
21aac     D0 FE 9F FD | 	jmp	#LR__3040
21ab0                 | LR__3049
21ab0     08 22 46 F5 | 	or	local03, #8
21ab4     00 12 06 F6 | 	mov	arg01, #0
21ab8     00 14 06 F6 | 	mov	arg02, #0
21abc     00 16 06 F6 | 	mov	arg03, #0
21ac0     11 19 02 F6 | 	mov	arg04, local03
21ac4     30 31 B0 FD | 	call	#__system__pack_0551
21ac8     40 00 90 FD | 	jmp	#LR__3054
21acc                 | LR__3050
21acc     00 2A 0E F2 | 	cmp	local07, #0 wz
21ad0     20 00 90 AD |  if_e	jmp	#LR__3053
21ad4     01 2A 66 F0 | 	shl	local07, #1
21ad8     97 0A 48 FB | 	callpa	#(@LR__3052-@LR__3051)>>2,fcache_load_ptr_
21adc                 | LR__3051
21adc     00 40 00 FF 
21ae0     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
21ae4     01 2C 86 C1 |  if_b	sub	local08, #1
21ae8     01 2A 66 C0 |  if_b	shl	local07, #1
21aec     EC FF 9F CD |  if_b	jmp	#LR__3051
21af0                 | LR__3052
21af0     98 FE 9F FD | 	jmp	#LR__3041
21af4                 | LR__3053
21af4     08 22 46 F5 | 	or	local03, #8
21af8     00 12 06 F6 | 	mov	arg01, #0
21afc     00 14 06 F6 | 	mov	arg02, #0
21b00     00 16 06 F6 | 	mov	arg03, #0
21b04     11 19 02 F6 | 	mov	arg04, local03
21b08     EC 30 B0 FD | 	call	#__system__pack_0551
21b0c                 | LR__3054
21b0c     A7 F0 03 F6 | 	mov	ptra, fp
21b10     B2 00 A0 FD | 	call	#popregs_
21b14                 | __system___float_mul_ret
21b14     2D 00 64 FD | 	ret
21b18                 | 
21b18                 | __system___float_div
21b18     0E 4A 05 F6 | 	mov	COUNT_, #14
21b1c     A8 00 A0 FD | 	call	#pushregs_
21b20     09 23 02 F6 | 	mov	local03, arg01
21b24     0A 25 02 F6 | 	mov	local04, arg02
21b28     11 27 02 F6 | 	mov	local05, local03
21b2c     13 29 02 F6 | 	mov	local06, local05
21b30     16 28 46 F7 | 	zerox	local06, #22
21b34     13 2B 02 F6 | 	mov	local07, local05
21b38     01 2A 66 F0 | 	shl	local07, #1
21b3c     18 2A 46 F0 | 	shr	local07, #24
21b40     1F 26 46 F0 | 	shr	local05, #31
21b44     12 FB 01 F6 | 	mov	result1, local04
21b48     FD 2C 02 F6 | 	mov	local08, result1
21b4c     16 2F 02 F6 | 	mov	local09, local08
21b50     16 2E 46 F7 | 	zerox	local09, #22
21b54     16 31 02 F6 | 	mov	local10, local08
21b58     01 30 66 F0 | 	shl	local10, #1
21b5c     18 30 46 F0 | 	shr	local10, #24
21b60     1F 2C 46 F0 | 	shr	local08, #31
21b64     16 27 62 F5 | 	xor	local05, local08
21b68     FF 2A 0E F2 | 	cmp	local07, #255 wz
21b6c     D4 00 90 AD |  if_e	jmp	#LR__3065
21b70     FF 30 0E F2 | 	cmp	local10, #255 wz
21b74     04 01 90 AD |  if_e	jmp	#LR__3066
21b78     00 2A 0E F2 | 	cmp	local07, #0 wz
21b7c     24 01 90 AD |  if_e	jmp	#LR__3067
21b80     17 28 26 F4 | 	bith	local06, #23
21b84                 | LR__3060
21b84     00 30 0E F2 | 	cmp	local10, #0 wz
21b88     70 01 90 AD |  if_e	jmp	#LR__3071
21b8c     17 2E 26 F4 | 	bith	local09, #23
21b90                 | LR__3061
21b90     18 2B 82 F1 | 	sub	local07, local10
21b94     15 33 02 F6 | 	mov	local11, local07
21b98     14 13 02 F6 | 	mov	arg01, local06
21b9c     02 12 46 F0 | 	shr	arg01, #2
21ba0     1E 28 66 F0 | 	shl	local06, #30
21ba4     14 15 02 F6 | 	mov	arg02, local06
21ba8     17 17 02 F6 | 	mov	arg03, local09
21bac     28 12 62 FD | 	setq	arg01
21bb0     0B 15 12 FD | 	qdiv	arg02, arg03
21bb4     00 34 06 F6 | 	mov	local12, #0
21bb8     18 1E 62 FD | 	getqx	local01
21bbc     19 FC 61 FD | 	getqy	result2
21bc0     FE 20 02 F6 | 	mov	local02, result2
21bc4     0F 37 02 F6 | 	mov	local13, local01
21bc8     00 20 4E F2 | 	cmps	local02, #0 wz
21bcc     1B 39 02 F6 | 	mov	local14, local13
21bd0     19 38 66 F0 | 	shl	local14, #25
21bd4     01 34 06 56 |  if_ne	mov	local12, #1
21bd8     1A 39 42 F5 | 	or	local14, local12
21bdc     07 36 46 F0 | 	shr	local13, #7
21be0     00 80 00 FF 
21be4     00 36 16 F2 | 	cmp	local13, ##16777216 wc
21be8     1C 00 90 CD |  if_b	jmp	#LR__3062
21bec     01 32 06 F1 | 	add	local11, #1
21bf0     01 38 46 F0 | 	shr	local14, #1
21bf4     1B 35 02 F6 | 	mov	local12, local13
21bf8     1F 34 66 F0 | 	shl	local12, #31
21bfc     1A 39 42 F5 | 	or	local14, local12
21c00     01 36 46 F0 | 	shr	local13, #1
21c04     24 00 90 FD | 	jmp	#LR__3064
21c08                 | LR__3062
21c08     00 40 00 FF 
21c0c     00 36 16 F2 | 	cmp	local13, ##8388608 wc
21c10     18 00 90 3D |  if_ae	jmp	#LR__3063
21c14     01 32 86 F1 | 	sub	local11, #1
21c18     01 36 66 F0 | 	shl	local13, #1
21c1c     1C 35 02 F6 | 	mov	local12, local14
21c20     1F 34 46 F0 | 	shr	local12, #31
21c24     1A 37 42 F5 | 	or	local13, local12
21c28     01 38 66 F0 | 	shl	local14, #1
21c2c                 | LR__3063
21c2c                 | LR__3064
21c2c     1B 13 02 F6 | 	mov	arg01, local13
21c30     1C 15 02 F6 | 	mov	arg02, local14
21c34     19 17 02 F6 | 	mov	arg03, local11
21c38     13 19 02 F6 | 	mov	arg04, local05
21c3c     B8 2F B0 FD | 	call	#__system__pack_0551
21c40     F8 00 90 FD | 	jmp	#LR__3075
21c44                 | LR__3065
21c44     00 28 0E F2 | 	cmp	local06, #0 wz
21c48     11 FB 01 56 |  if_ne	mov	result1, local03
21c4c     EC 00 90 5D |  if_ne	jmp	#LR__3075
21c50     FF 30 0E F2 | 	cmp	local10, #255 wz
21c54     00 F8 3F AF 
21c58     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21c5c     DC 00 90 AD |  if_e	jmp	#LR__3075
21c60     02 26 46 F5 | 	or	local05, #2
21c64     00 12 06 F6 | 	mov	arg01, #0
21c68     00 14 06 F6 | 	mov	arg02, #0
21c6c     15 17 02 F6 | 	mov	arg03, local07
21c70     13 19 02 F6 | 	mov	arg04, local05
21c74     80 2F B0 FD | 	call	#__system__pack_0551
21c78     C0 00 90 FD | 	jmp	#LR__3075
21c7c                 | LR__3066
21c7c     00 2E 0E F2 | 	cmp	local09, #0 wz
21c80     12 FB 01 56 |  if_ne	mov	result1, local04
21c84     B4 00 90 5D |  if_ne	jmp	#LR__3075
21c88     13 19 02 F6 | 	mov	arg04, local05
21c8c     08 18 46 F5 | 	or	arg04, #8
21c90     00 12 06 F6 | 	mov	arg01, #0
21c94     00 14 06 F6 | 	mov	arg02, #0
21c98     00 16 06 F6 | 	mov	arg03, #0
21c9c     58 2F B0 FD | 	call	#__system__pack_0551
21ca0     98 00 90 FD | 	jmp	#LR__3075
21ca4                 | LR__3067
21ca4     00 28 0E F2 | 	cmp	local06, #0 wz
21ca8     20 00 90 AD |  if_e	jmp	#LR__3070
21cac     01 28 66 F0 | 	shl	local06, #1
21cb0     97 0A 48 FB | 	callpa	#(@LR__3069-@LR__3068)>>2,fcache_load_ptr_
21cb4                 | LR__3068
21cb4     00 40 00 FF 
21cb8     00 28 16 F2 | 	cmp	local06, ##8388608 wc
21cbc     01 2A 86 C1 |  if_b	sub	local07, #1
21cc0     01 28 66 C0 |  if_b	shl	local06, #1
21cc4     EC FF 9F CD |  if_b	jmp	#LR__3068
21cc8                 | LR__3069
21cc8     B8 FE 9F FD | 	jmp	#LR__3060
21ccc                 | LR__3070
21ccc     00 30 0E F2 | 	cmp	local10, #0 wz
21cd0     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
21cd4     00 F8 3F AF 
21cd8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21cdc     5C 00 90 AD |  if_e	jmp	#LR__3075
21ce0     13 19 02 F6 | 	mov	arg04, local05
21ce4     08 18 46 F5 | 	or	arg04, #8
21ce8     00 12 06 F6 | 	mov	arg01, #0
21cec     00 14 06 F6 | 	mov	arg02, #0
21cf0     00 16 06 F6 | 	mov	arg03, #0
21cf4     00 2F B0 FD | 	call	#__system__pack_0551
21cf8     40 00 90 FD | 	jmp	#LR__3075
21cfc                 | LR__3071
21cfc     00 2E 0E F2 | 	cmp	local09, #0 wz
21d00     20 00 90 AD |  if_e	jmp	#LR__3074
21d04     01 2E 66 F0 | 	shl	local09, #1
21d08     97 0A 48 FB | 	callpa	#(@LR__3073-@LR__3072)>>2,fcache_load_ptr_
21d0c                 | LR__3072
21d0c     00 40 00 FF 
21d10     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
21d14     01 30 86 C1 |  if_b	sub	local10, #1
21d18     01 2E 66 C0 |  if_b	shl	local09, #1
21d1c     EC FF 9F CD |  if_b	jmp	#LR__3072
21d20                 | LR__3073
21d20     6C FE 9F FD | 	jmp	#LR__3061
21d24                 | LR__3074
21d24     02 26 46 F5 | 	or	local05, #2
21d28     00 12 06 F6 | 	mov	arg01, #0
21d2c     00 14 06 F6 | 	mov	arg02, #0
21d30     00 16 06 F6 | 	mov	arg03, #0
21d34     13 19 02 F6 | 	mov	arg04, local05
21d38     BC 2E B0 FD | 	call	#__system__pack_0551
21d3c                 | LR__3075
21d3c     A7 F0 03 F6 | 	mov	ptra, fp
21d40     B2 00 A0 FD | 	call	#popregs_
21d44                 | __system___float_div_ret
21d44     2D 00 64 FD | 	ret
21d48                 | 
21d48                 | __system___float_cmp
21d48     00 C0 3F FF 
21d4c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
21d50     00 C0 3F CF 
21d54     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
21d58     0B FB 01 36 |  if_ae	mov	result1, arg03
21d5c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21d60     00 C0 7F FF 
21d64     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
21d68     00 C0 7F CF 
21d6c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
21d70     0B FB 01 36 |  if_ae	mov	result1, arg03
21d74     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21d78     00 12 56 F2 | 	cmps	arg01, #0 wc
21d7c     2C 00 90 3D |  if_ae	jmp	#LR__3080
21d80     00 14 56 F2 | 	cmps	arg02, #0 wc
21d84     0A FB 01 C6 |  if_b	mov	result1, arg02
21d88     09 FB 81 C1 |  if_b	sub	result1, arg01
21d8c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
21d90     00 14 0E F2 | 	cmp	arg02, #0 wz
21d94     00 00 40 AF 
21d98     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
21d9c     00 FA 05 A6 |  if_e	mov	result1, #0
21da0     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21da4     01 FA 65 F6 | 	neg	result1, #1
21da8     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
21dac                 | LR__3080
21dac     00 14 56 F2 | 	cmps	arg02, #0 wc
21db0     1C 00 90 3D |  if_ae	jmp	#LR__3081
21db4     00 12 0E F2 | 	cmp	arg01, #0 wz
21db8     00 00 40 AF 
21dbc     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
21dc0     00 FA 05 A6 |  if_e	mov	result1, #0
21dc4     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21dc8     01 FA 05 F6 | 	mov	result1, #1
21dcc     08 00 90 FD | 	jmp	#__system___float_cmp_ret
21dd0                 | LR__3081
21dd0     0A 13 82 F1 | 	sub	arg01, arg02
21dd4     09 FB 01 F6 | 	mov	result1, arg01
21dd8                 | __system___float_cmp_ret
21dd8     2D 00 64 FD | 	ret
21ddc                 | 
21ddc                 | __system___float_tointeger
21ddc     02 4A 05 F6 | 	mov	COUNT_, #2
21de0     A8 00 A0 FD | 	call	#pushregs_
21de4     50 00 B0 FD | 	call	#__system___float_Unpack
21de8     FF FF 7F FF 
21dec     FF FD 55 F2 | 	cmps	result2, ##-1 wc
21df0     34 00 90 CD |  if_b	jmp	#LR__3090
21df4     1F FC 55 F2 | 	cmps	result2, #31 wc
21df8     2C 00 90 3D |  if_ae	jmp	#LR__3090
21dfc     02 FE 65 F0 | 	shl	result3, #2
21e00     1E 1E 06 F6 | 	mov	local01, #30
21e04     FE 1E 82 F1 | 	sub	local01, result2
21e08     0F FF 41 F0 | 	shr	result3, local01
21e0c     FF 20 02 F6 | 	mov	local02, result3
21e10     0A 21 02 F1 | 	add	local02, arg02
21e14     01 20 46 F0 | 	shr	local02, #1
21e18     00 FA 0D F2 | 	cmp	result1, #0 wz
21e1c     10 21 62 56 |  if_ne	neg	local02, local02
21e20     10 FB 01 F6 | 	mov	result1, local02
21e24     04 00 90 FD | 	jmp	#LR__3091
21e28                 | LR__3090
21e28     00 FA 05 F6 | 	mov	result1, #0
21e2c                 | LR__3091
21e2c     A7 F0 03 F6 | 	mov	ptra, fp
21e30     B2 00 A0 FD | 	call	#popregs_
21e34                 | __system___float_tointeger_ret
21e34     2D 00 64 FD | 	ret
21e38                 | 
21e38                 | __system___float_Unpack
21e38     09 01 02 F6 | 	mov	_var01, arg01
21e3c     1F 00 46 F0 | 	shr	_var01, #31
21e40     09 03 02 F6 | 	mov	_var02, arg01
21e44     01 02 66 F0 | 	shl	_var02, #1
21e48     18 02 4E F0 | 	shr	_var02, #24 wz
21e4c     17 13 06 F4 | 	bitl	arg01, #279
21e50     06 12 66 50 |  if_ne	shl	arg01, #6
21e54     1D 12 26 54 |  if_ne	bith	arg01, #29
21e58     1C 00 90 5D |  if_ne	jmp	#LR__3100
21e5c     09 05 92 F7 | 	encod	_var03, arg01 wc
21e60     01 04 06 C1 |  if_b	add	_var03, #1
21e64     17 04 86 F1 | 	sub	_var03, #23
21e68     02 03 02 F6 | 	mov	_var02, _var03
21e6c     07 FC 05 F6 | 	mov	result2, #7
21e70     02 FD 81 F1 | 	sub	result2, _var03
21e74     FE 12 62 F0 | 	shl	arg01, result2
21e78                 | LR__3100
21e78     7F 02 86 F1 | 	sub	_var02, #127
21e7c     09 FF 01 F6 | 	mov	result3, arg01
21e80     00 FB 01 F6 | 	mov	result1, _var01
21e84     01 FD 01 F6 | 	mov	result2, _var02
21e88                 | __system___float_Unpack_ret
21e88     2D 00 64 FD | 	ret
21e8c                 | 
21e8c                 | __system___float_Pack
21e8c     00 00 06 F6 | 	mov	_var01, #0
21e90     00 16 0E F2 | 	cmp	arg03, #0 wz
21e94     8C 00 90 AD |  if_e	jmp	#LR__3111
21e98     0B 03 92 F7 | 	encod	_var02, arg03 wc
21e9c     01 02 06 C1 |  if_b	add	_var02, #1
21ea0     21 00 06 F6 | 	mov	_var01, #33
21ea4     01 01 82 F1 | 	sub	_var01, _var02
21ea8     00 17 62 F0 | 	shl	arg03, _var01
21eac     03 02 06 F6 | 	mov	_var02, #3
21eb0     00 03 82 F1 | 	sub	_var02, _var01
21eb4     01 15 02 F1 | 	add	arg02, _var02
21eb8     0A 05 02 F6 | 	mov	_var03, arg02
21ebc     00 17 06 F1 | 	add	arg03, #256
21ec0     0B 03 02 F6 | 	mov	_var02, arg03
21ec4     FF 02 2E F5 | 	andn	_var02, #255 wz
21ec8     01 04 06 A1 |  if_e	add	_var03, #1
21ecc     7F 04 06 F1 | 	add	_var03, #127
21ed0     FF FF 7F FF 
21ed4     E9 05 46 F3 | 	fges	_var03, ##-23
21ed8     FF 04 66 F3 | 	fles	_var03, #255
21edc     01 04 56 F2 | 	cmps	_var03, #1 wc
21ee0     1C 00 90 3D |  if_ae	jmp	#LR__3110
21ee4     01 16 46 F0 | 	shr	arg03, #1
21ee8     1F 02 C6 F9 | 	decod	_var02, #31
21eec     0B 03 02 F1 | 	add	_var02, arg03
21ef0     02 05 62 F6 | 	neg	_var03, _var03
21ef4     02 03 42 F0 | 	shr	_var02, _var03
21ef8     01 17 02 F6 | 	mov	arg03, _var02
21efc     00 04 06 F6 | 	mov	_var03, #0
21f00                 | LR__3110
21f00     09 FB 01 F6 | 	mov	result1, arg01
21f04     1F FA 65 F0 | 	shl	result1, #31
21f08     02 03 02 F6 | 	mov	_var02, _var03
21f0c     17 02 66 F0 | 	shl	_var02, #23
21f10     01 FB 41 F5 | 	or	result1, _var02
21f14     0B 07 02 F6 | 	mov	_var04, arg03
21f18     09 06 46 F0 | 	shr	_var04, #9
21f1c     03 FB 41 F5 | 	or	result1, _var04
21f20     04 00 90 FD | 	jmp	#__system___float_Pack_ret
21f24                 | LR__3111
21f24     00 FB 01 F6 | 	mov	result1, _var01
21f28                 | __system___float_Pack_ret
21f28     2D 00 64 FD | 	ret
21f2c                 | 
21f2c                 | __system___basic_print_float
21f2c     05 4A 05 F6 | 	mov	COUNT_, #5
21f30     A8 00 A0 FD | 	call	#pushregs_
21f34     09 1F 02 F6 | 	mov	local01, arg01
21f38     0A 21 02 F6 | 	mov	local02, arg02
21f3c     0B 23 0A F6 | 	mov	local03, arg03 wz
21f40     0C 25 02 F6 | 	mov	local04, arg04
21f44     14 00 90 5D |  if_ne	jmp	#LR__3120
21f48     23 24 0E F2 | 	cmp	local04, #35 wz
21f4c     80 02 10 AF 
21f50     00 26 06 A6 |  if_e	mov	local05, ##537198592
21f54     1D 26 C6 59 |  if_ne	decod	local05, #29
21f58     13 23 02 F6 | 	mov	local03, local05
21f5c                 | LR__3120
21f5c     0F 13 02 F6 | 	mov	arg01, local01
21f60     78 27 B0 FD | 	call	#__system___gettxfunc
21f64     FD 26 0A F6 | 	mov	local05, result1 wz
21f68     00 FA 05 A6 |  if_e	mov	result1, #0
21f6c     13 13 02 56 |  if_ne	mov	arg01, local05
21f70     11 15 02 56 |  if_ne	mov	arg02, local03
21f74     10 17 02 56 |  if_ne	mov	arg03, local02
21f78     12 19 02 56 |  if_ne	mov	arg04, local04
21f7c     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
21f80     A7 F0 03 F6 | 	mov	ptra, fp
21f84     B2 00 A0 FD | 	call	#popregs_
21f88                 | __system___basic_print_float_ret
21f88     2D 00 64 FD | 	ret
21f8c                 | 
21f8c                 | __system____builtin_atoi
21f8c     07 4A 05 F6 | 	mov	COUNT_, #7
21f90     A8 00 A0 FD | 	call	#pushregs_
21f94                 | __system____builtin_atoi_enter
21f94     09 1F 02 F6 | 	mov	local01, arg01
21f98     0A 21 02 F6 | 	mov	local02, arg02
21f9c     00 22 06 F6 | 	mov	local03, #0
21fa0     00 24 06 F6 | 	mov	local04, #0
21fa4     00 26 06 F6 | 	mov	local05, #0
21fa8     97 08 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
21fac                 | LR__3130
21fac     0F 29 C2 FA | 	rdbyte	local06, local01
21fb0     20 28 0E F2 | 	cmp	local06, #32 wz
21fb4     01 1E 06 A1 |  if_e	add	local01, #1
21fb8     F0 FF 9F AD |  if_e	jmp	#LR__3130
21fbc                 | LR__3131
21fbc     0F 2B C2 FA | 	rdbyte	local07, local01
21fc0                 | LR__3132
21fc0     2D 2A 0E F2 | 	cmp	local07, #45 wz
21fc4     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
21fc8     18 00 90 5D |  if_ne	jmp	#LR__3133
21fcc     01 1E 06 F1 | 	add	local01, #1
21fd0     2D 2A 0E F2 | 	cmp	local07, #45 wz
21fd4     01 28 06 A6 |  if_e	mov	local06, #1
21fd8     14 27 C2 A2 |  if_e	subr	local05, local06
21fdc     0F 2B C2 FA | 	rdbyte	local07, local01
21fe0     DC FF 9F FD | 	jmp	#LR__3132
21fe4                 | LR__3133
21fe4     97 48 48 FB | 	callpa	#(@LR__3141-@LR__3134)>>2,fcache_load_ptr_
21fe8                 | LR__3134
21fe8                 | LR__3135
21fe8     0F 2B C2 FA | 	rdbyte	local07, local01
21fec     5F 2A 0E F2 | 	cmp	local07, #95 wz
21ff0     01 1E 06 F1 | 	add	local01, #1
21ff4     F0 FF 9F AD |  if_e	jmp	#LR__3135
21ff8     30 2A 0E F2 | 	cmp	local07, #48 wz
21ffc     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
22000     00 24 06 A6 |  if_e	mov	local04, #0
22004     60 00 90 AD |  if_e	jmp	#LR__3140
22008     31 2A 56 F2 | 	cmps	local07, #49 wc
2200c     18 00 90 CD |  if_b	jmp	#LR__3136
22010     3A 2A 56 F2 | 	cmps	local07, #58 wc
22014     15 25 02 C6 |  if_b	mov	local04, local07
22018     30 24 86 C1 |  if_b	sub	local04, #48
2201c     00 20 0E C2 |  if_b	cmp	local02, #0 wz
22020     0A 20 06 86 |  if_c_and_z	mov	local02, #10
22024     40 00 90 CD |  if_b	jmp	#LR__3139
22028                 | LR__3136
22028     0B 20 56 F2 | 	cmps	local02, #11 wc
2202c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
22030     14 00 90 CD |  if_b	jmp	#LR__3137
22034     67 2A 56 F2 | 	cmps	local07, #103 wc
22038     61 2A 86 C1 |  if_b	sub	local07, #97
2203c     0A 24 06 C6 |  if_b	mov	local04, #10
22040     15 25 02 C1 |  if_b	add	local04, local07
22044     20 00 90 CD |  if_b	jmp	#LR__3138
22048                 | LR__3137
22048     0B 20 56 F2 | 	cmps	local02, #11 wc
2204c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
22050     24 00 90 CD |  if_b	jmp	#LR__3142
22054     47 2A 56 F2 | 	cmps	local07, #71 wc
22058     41 2A 86 C1 |  if_b	sub	local07, #65
2205c     0A 24 06 C6 |  if_b	mov	local04, #10
22060     15 25 02 C1 |  if_b	add	local04, local07
22064     10 00 90 3D |  if_ae	jmp	#LR__3142
22068                 | LR__3138
22068                 | LR__3139
22068                 | LR__3140
22068     11 21 02 FD | 	qmul	local02, local03
2206c     18 22 62 FD | 	getqx	local03
22070     12 23 02 F1 | 	add	local03, local04
22074     70 FF 9F FD | 	jmp	#LR__3134
22078                 | LR__3141
22078                 | LR__3142
22078     00 20 0E F2 | 	cmp	local02, #0 wz
2207c     64 00 90 5D |  if_ne	jmp	#LR__3148
22080     78 2A 0E F2 | 	cmp	local07, #120 wz
22084     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
22088     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
2208c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
22090     14 00 90 5D |  if_ne	jmp	#LR__3143
22094     0F 13 02 F6 | 	mov	arg01, local01
22098     10 14 06 F6 | 	mov	arg02, #16
2209c     EC FE BF FD | 	call	#__system____builtin_atoi
220a0     FD 22 02 F6 | 	mov	local03, result1
220a4     3C 00 90 FD | 	jmp	#LR__3147
220a8                 | LR__3143
220a8     62 2A 0E F2 | 	cmp	local07, #98 wz
220ac     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
220b0     14 00 90 5D |  if_ne	jmp	#LR__3144
220b4     0F 13 02 F6 | 	mov	arg01, local01
220b8     02 14 06 F6 | 	mov	arg02, #2
220bc     CC FE BF FD | 	call	#__system____builtin_atoi
220c0     FD 22 02 F6 | 	mov	local03, result1
220c4     1C 00 90 FD | 	jmp	#LR__3146
220c8                 | LR__3144
220c8     6F 2A 0E F2 | 	cmp	local07, #111 wz
220cc     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
220d0     10 00 90 5D |  if_ne	jmp	#LR__3145
220d4     0F 13 02 F6 | 	mov	arg01, local01
220d8     08 14 06 F6 | 	mov	arg02, #8
220dc     AC FE BF FD | 	call	#__system____builtin_atoi
220e0     FD 22 02 F6 | 	mov	local03, result1
220e4                 | LR__3145
220e4                 | LR__3146
220e4                 | LR__3147
220e4                 | LR__3148
220e4     00 26 0E F2 | 	cmp	local05, #0 wz
220e8     11 23 62 56 |  if_ne	neg	local03, local03
220ec     11 FB 01 F6 | 	mov	result1, local03
220f0     A7 F0 03 F6 | 	mov	ptra, fp
220f4     B2 00 A0 FD | 	call	#popregs_
220f8                 | __system____builtin_atoi_ret
220f8     2D 00 64 FD | 	ret
220fc                 | 
220fc                 | __system____builtin_atof
220fc     07 4A 05 F6 | 	mov	COUNT_, #7
22100     A8 00 A0 FD | 	call	#pushregs_
22104     09 1F 02 F6 | 	mov	local01, arg01
22108     00 20 06 F6 | 	mov	local02, #0
2210c     00 22 06 F6 | 	mov	local03, #0
22110     00 24 06 F6 | 	mov	local04, #0
22114     00 26 06 F6 | 	mov	local05, #0
22118     97 08 48 FB | 	callpa	#(@LR__3151-@LR__3150)>>2,fcache_load_ptr_
2211c                 | LR__3150
2211c     0F 17 C2 FA | 	rdbyte	arg03, local01
22120     20 16 0E F2 | 	cmp	arg03, #32 wz
22124     01 1E 06 A1 |  if_e	add	local01, #1
22128     F0 FF 9F AD |  if_e	jmp	#LR__3150
2212c                 | LR__3151
2212c     0F 29 C2 FA | 	rdbyte	local06, local01
22130                 | LR__3152
22130     2B 28 0E F2 | 	cmp	local06, #43 wz
22134     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
22138     14 00 90 5D |  if_ne	jmp	#LR__3153
2213c     2D 28 0E F2 | 	cmp	local06, #45 wz
22140     1F 24 E6 A4 |  if_e	bitnot	local04, #31
22144     01 1E 06 F1 | 	add	local01, #1
22148     0F 29 C2 FA | 	rdbyte	local06, local01
2214c     E0 FF 9F FD | 	jmp	#LR__3152
22150                 | LR__3153
22150                 | LR__3154
22150     97 08 48 FB | 	callpa	#(@LR__3156-@LR__3155)>>2,fcache_load_ptr_
22154                 | LR__3155
22154     0F 29 C2 FA | 	rdbyte	local06, local01
22158     5F 28 0E F2 | 	cmp	local06, #95 wz
2215c     01 1E 06 F1 | 	add	local01, #1
22160     F0 FF 9F AD |  if_e	jmp	#LR__3155
22164                 | LR__3156
22164     00 28 0E F2 | 	cmp	local06, #0 wz
22168     5C 00 90 AD |  if_e	jmp	#LR__3158
2216c     30 28 56 F2 | 	cmps	local06, #48 wc
22170     44 00 90 CD |  if_b	jmp	#LR__3157
22174     3A 28 56 F2 | 	cmps	local06, #58 wc
22178     3C 00 90 3D |  if_ae	jmp	#LR__3157
2217c     10 13 02 F6 | 	mov	arg01, local02
22180     00 90 20 FF 
22184     00 14 06 F6 | 	mov	arg02, ##1092616192
22188     88 F7 BF FD | 	call	#__system___float_mul
2218c     FD 20 02 F6 | 	mov	local02, result1
22190     30 28 86 F1 | 	sub	local06, #48
22194     14 13 02 F6 | 	mov	arg01, local06
22198     74 F3 BF FD | 	call	#__system___float_fromuns
2219c     FD 14 02 F6 | 	mov	arg02, result1
221a0     10 13 02 F6 | 	mov	arg01, local02
221a4     9C F3 BF FD | 	call	#__system___float_add
221a8     FD 20 02 F6 | 	mov	local02, result1
221ac     00 26 0E F2 | 	cmp	local05, #0 wz
221b0     01 22 86 51 |  if_ne	sub	local03, #1
221b4     98 FF 9F FD | 	jmp	#LR__3154
221b8                 | LR__3157
221b8     2E 28 0E F2 | 	cmp	local06, #46 wz
221bc     00 26 0E A2 |  if_e	cmp	local05, #0 wz
221c0     01 26 06 A6 |  if_e	mov	local05, #1
221c4     88 FF 9F AD |  if_e	jmp	#LR__3154
221c8                 | LR__3158
221c8     45 28 0E F2 | 	cmp	local06, #69 wz
221cc     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
221d0     18 00 90 5D |  if_ne	jmp	#LR__3159
221d4     0F 13 02 F6 | 	mov	arg01, local01
221d8     00 14 06 F6 | 	mov	arg02, #0
221dc     AC FD BF FD | 	call	#__system____builtin_atoi
221e0     11 FB 01 F1 | 	add	result1, local03
221e4     FD 2A 02 F6 | 	mov	local07, result1
221e8     04 00 90 FD | 	jmp	#LR__3160
221ec                 | LR__3159
221ec     11 2B 02 F6 | 	mov	local07, local03
221f0                 | LR__3160
221f0     15 17 02 F6 | 	mov	arg03, local07
221f4     10 13 02 F6 | 	mov	arg01, local02
221f8     00 90 20 FF 
221fc     00 14 06 F6 | 	mov	arg02, ##1092616192
22200     F4 06 B0 FD | 	call	#__system___float_pow_n
22204     12 FB 61 F5 | 	xor	result1, local04
22208     A7 F0 03 F6 | 	mov	ptra, fp
2220c     B2 00 A0 FD | 	call	#popregs_
22210                 | __system____builtin_atof_ret
22210     2D 00 64 FD | 	ret
22214                 | 
22214                 | __system____builtin_ilogb
22214     20 FC BF FD | 	call	#__system___float_Unpack
22218     00 FE 0D F2 | 	cmp	result3, #0 wz
2221c     00 00 40 AF 
22220     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
22224     24 00 90 AD |  if_e	jmp	#LR__3171
22228     80 FC 0D F2 | 	cmp	result2, #128 wz
2222c     18 00 90 5D |  if_ne	jmp	#LR__3170
22230     00 00 10 FF 
22234     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
22238     1E FA CD A9 |  if_e	bmask	result1, #30
2223c     0C 00 90 AD |  if_e	jmp	#LR__3171
22240     1F FA C5 F9 | 	decod	result1, #31
22244     04 00 90 FD | 	jmp	#LR__3171
22248                 | LR__3170
22248     FE FA 01 F6 | 	mov	result1, result2
2224c                 | LR__3171
2224c                 | __system____builtin_ilogb_ret
2224c     2D 00 64 FD | 	ret
22250                 | 
22250                 | __system____builtin_sinf
22250     03 4A 05 F6 | 	mov	COUNT_, #3
22254     A8 00 A0 FD | 	call	#pushregs_
22258     09 1F 02 F6 | 	mov	local01, arg01
2225c     87 64 20 FF 
22260     DB 15 06 F6 | 	mov	arg02, ##1086918619
22264     B0 F8 BF FD | 	call	#__system___float_div
22268     FD 12 02 F6 | 	mov	arg01, result1
2226c     00 14 06 F6 | 	mov	arg02, #0
22270     68 FB BF FD | 	call	#__system___float_tointeger
22274     FD 16 0A F6 | 	mov	arg03, result1 wz
22278     44 00 90 AD |  if_e	jmp	#LR__3180
2227c     0B 13 52 F6 | 	abs	arg01, arg03 wc
22280     1F 20 C6 C9 |  if_b	decod	local02, #31
22284     00 20 06 36 |  if_ae	mov	local02, #0
22288     84 F2 BF FD | 	call	#__system___float_fromuns
2228c     10 FB 61 F5 | 	xor	result1, local02
22290     FD 12 02 F6 | 	mov	arg01, result1
22294     1E 14 C6 F9 | 	decod	arg02, #30
22298     78 F6 BF FD | 	call	#__system___float_mul
2229c     FD 12 02 F6 | 	mov	arg01, result1
222a0     87 24 20 FF 
222a4     DB 15 06 F6 | 	mov	arg02, ##1078530011
222a8     68 F6 BF FD | 	call	#__system___float_mul
222ac     FD 14 02 F6 | 	mov	arg02, result1
222b0     0F 13 02 F6 | 	mov	arg01, local01
222b4     1F 14 E6 F4 | 	bitnot	arg02, #31
222b8     88 F2 BF FD | 	call	#__system___float_add
222bc     FD 1E 02 F6 | 	mov	local01, result1
222c0                 | LR__3180
222c0     0F 13 02 F6 | 	mov	arg01, local01
222c4     66 E6 1E FF 
222c8     CD 14 06 F6 | 	mov	arg02, ##1036831949
222cc     01 16 06 F6 | 	mov	arg03, #1
222d0     74 FA BF FD | 	call	#__system___float_cmp
222d4     00 FA 55 F2 | 	cmps	result1, #0 wc
222d8     5C 00 90 3D |  if_ae	jmp	#LR__3181
222dc     0F 13 02 F6 | 	mov	arg01, local01
222e0     66 E6 5E FF 
222e4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
222e8     01 16 66 F6 | 	neg	arg03, #1
222ec     58 FA BF FD | 	call	#__system___float_cmp
222f0     01 FA 55 F2 | 	cmps	result1, #1 wc
222f4     40 00 90 CD |  if_b	jmp	#LR__3181
222f8     0F 13 02 F6 | 	mov	arg01, local01
222fc     0F 15 02 F6 | 	mov	arg02, local01
22300     10 F6 BF FD | 	call	#__system___float_mul
22304     FD 12 02 F6 | 	mov	arg01, result1
22308     0F 15 02 F6 | 	mov	arg02, local01
2230c     04 F6 BF FD | 	call	#__system___float_mul
22310     FD 12 02 F6 | 	mov	arg01, result1
22314     00 60 20 FF 
22318     00 14 06 F6 | 	mov	arg02, ##1086324736
2231c     F8 F7 BF FD | 	call	#__system___float_div
22320     FD 14 02 F6 | 	mov	arg02, result1
22324     0F 13 02 F6 | 	mov	arg01, local01
22328     1F 14 E6 F4 | 	bitnot	arg02, #31
2232c     14 F2 BF FD | 	call	#__system___float_add
22330     FD 22 02 F6 | 	mov	local03, result1
22334     54 00 90 FD | 	jmp	#LR__3182
22338                 | LR__3181
22338     0F 13 02 F6 | 	mov	arg01, local01
2233c     7C 91 26 FF 
22340     83 15 06 F6 | 	mov	arg02, ##1294137731
22344     CC F5 BF FD | 	call	#__system___float_mul
22348     FD 12 02 F6 | 	mov	arg01, result1
2234c     00 14 06 F6 | 	mov	arg02, #0
22350     88 FA BF FD | 	call	#__system___float_tointeger
22354     02 FA 65 F0 | 	shl	result1, #2
22358     00 00 A0 FF 
2235c     FD 00 48 FD | 	qrotate	##1073741824, result1
22360     19 12 62 FD | 	getqy	arg01
22364     09 13 52 F6 | 	abs	arg01, arg01 wc
22368     1F 20 C6 C9 |  if_b	decod	local02, #31
2236c     00 20 06 36 |  if_ae	mov	local02, #0
22370     9C F1 BF FD | 	call	#__system___float_fromuns
22374     10 FB 61 F5 | 	xor	result1, local02
22378     FD 12 02 F6 | 	mov	arg01, result1
2237c     00 40 27 FF 
22380     00 14 06 F6 | 	mov	arg02, ##1317011456
22384     90 F7 BF FD | 	call	#__system___float_div
22388     FD 22 02 F6 | 	mov	local03, result1
2238c                 | LR__3182
2238c     11 FB 01 F6 | 	mov	result1, local03
22390     A7 F0 03 F6 | 	mov	ptra, fp
22394     B2 00 A0 FD | 	call	#popregs_
22398                 | __system____builtin_sinf_ret
22398     2D 00 64 FD | 	ret
2239c                 | 
2239c                 | __system____builtin_tanf
2239c     02 4A 05 F6 | 	mov	COUNT_, #2
223a0     A8 00 A0 FD | 	call	#pushregs_
223a4     09 1F 02 F6 | 	mov	local01, arg01
223a8     A4 FE BF FD | 	call	#__system____builtin_sinf
223ac     FD 20 02 F6 | 	mov	local02, result1
223b0     0F 15 02 F6 | 	mov	arg02, local01
223b4     87 E4 1F FF 
223b8     DB 13 06 F6 | 	mov	arg01, ##1070141403
223bc     1F 14 E6 F4 | 	bitnot	arg02, #31
223c0     80 F1 BF FD | 	call	#__system___float_add
223c4     FD 12 02 F6 | 	mov	arg01, result1
223c8     84 FE BF FD | 	call	#__system____builtin_sinf
223cc     FD 14 02 F6 | 	mov	arg02, result1
223d0     10 13 02 F6 | 	mov	arg01, local02
223d4     40 F7 BF FD | 	call	#__system___float_div
223d8     A7 F0 03 F6 | 	mov	ptra, fp
223dc     B2 00 A0 FD | 	call	#popregs_
223e0                 | __system____builtin_tanf_ret
223e0     2D 00 64 FD | 	ret
223e4                 | 
223e4                 | __system____builtin_asinf
223e4     01 4A 05 F6 | 	mov	COUNT_, #1
223e8     A8 00 A0 FD | 	call	#pushregs_
223ec     09 1F 02 F6 | 	mov	local01, arg01
223f0     0F 15 02 F6 | 	mov	arg02, local01
223f4     0F 13 02 F6 | 	mov	arg01, local01
223f8     18 F5 BF FD | 	call	#__system___float_mul
223fc     FD 14 02 F6 | 	mov	arg02, result1
22400     00 C0 1F FF 
22404     00 12 06 F6 | 	mov	arg01, ##1065353216
22408     1F 14 E6 F4 | 	bitnot	arg02, #31
2240c     34 F1 BF FD | 	call	#__system___float_add
22410     FD 12 02 F6 | 	mov	arg01, result1
22414     24 F4 BF FD | 	call	#__system___float_sqrt
22418     FD 14 02 F6 | 	mov	arg02, result1
2241c     0F 13 02 F6 | 	mov	arg01, local01
22420     58 00 B0 FD | 	call	#__system____builtin_atan2f
22424     A7 F0 03 F6 | 	mov	ptra, fp
22428     B2 00 A0 FD | 	call	#popregs_
2242c                 | __system____builtin_asinf_ret
2242c     2D 00 64 FD | 	ret
22430                 | 
22430                 | __system____builtin_acosf
22430     01 4A 05 F6 | 	mov	COUNT_, #1
22434     A8 00 A0 FD | 	call	#pushregs_
22438     09 1F 02 F6 | 	mov	local01, arg01
2243c     0F 15 02 F6 | 	mov	arg02, local01
22440     0F 13 02 F6 | 	mov	arg01, local01
22444     CC F4 BF FD | 	call	#__system___float_mul
22448     FD 14 02 F6 | 	mov	arg02, result1
2244c     00 C0 1F FF 
22450     00 12 06 F6 | 	mov	arg01, ##1065353216
22454     1F 14 E6 F4 | 	bitnot	arg02, #31
22458     E8 F0 BF FD | 	call	#__system___float_add
2245c     FD 12 02 F6 | 	mov	arg01, result1
22460     D8 F3 BF FD | 	call	#__system___float_sqrt
22464     FD 12 02 F6 | 	mov	arg01, result1
22468     0F 15 02 F6 | 	mov	arg02, local01
2246c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
22470     A7 F0 03 F6 | 	mov	ptra, fp
22474     B2 00 A0 FD | 	call	#popregs_
22478                 | __system____builtin_acosf_ret
22478     2D 00 64 FD | 	ret
2247c                 | 
2247c                 | __system____builtin_atan2f
2247c     04 4A 05 F6 | 	mov	COUNT_, #4
22480     A8 00 A0 FD | 	call	#pushregs_
22484     09 1F 02 F6 | 	mov	local01, arg01
22488     0A 21 02 F6 | 	mov	local02, arg02
2248c     0F 13 02 F6 | 	mov	arg01, local01
22490     00 14 06 F6 | 	mov	arg02, #0
22494     01 16 06 F6 | 	mov	arg03, #1
22498     AC F8 BF FD | 	call	#__system___float_cmp
2249c     00 FA 0D F2 | 	cmp	result1, #0 wz
224a0     28 00 90 5D |  if_ne	jmp	#LR__3190
224a4     10 13 02 F6 | 	mov	arg01, local02
224a8     00 14 06 F6 | 	mov	arg02, #0
224ac     01 16 06 F6 | 	mov	arg03, #1
224b0     94 F8 BF FD | 	call	#__system___float_cmp
224b4     00 FA 55 F2 | 	cmps	result1, #0 wc
224b8     87 24 60 CF 
224bc     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
224c0     DC 00 90 CD |  if_b	jmp	#LR__3191
224c4     00 FA 05 F6 | 	mov	result1, #0
224c8     D4 00 90 FD | 	jmp	#LR__3191
224cc                 | LR__3190
224cc     10 13 02 F6 | 	mov	arg01, local02
224d0     10 15 02 F6 | 	mov	arg02, local02
224d4     3C F4 BF FD | 	call	#__system___float_mul
224d8     FD 22 02 F6 | 	mov	local03, result1
224dc     0F 13 02 F6 | 	mov	arg01, local01
224e0     0F 15 02 F6 | 	mov	arg02, local01
224e4     2C F4 BF FD | 	call	#__system___float_mul
224e8     FD 14 02 F6 | 	mov	arg02, result1
224ec     11 13 02 F6 | 	mov	arg01, local03
224f0     50 F0 BF FD | 	call	#__system___float_add
224f4     FD 12 02 F6 | 	mov	arg01, result1
224f8     40 F3 BF FD | 	call	#__system___float_sqrt
224fc     FD 22 02 F6 | 	mov	local03, result1
22500     10 13 02 F6 | 	mov	arg01, local02
22504     11 15 02 F6 | 	mov	arg02, local03
22508     0C F6 BF FD | 	call	#__system___float_div
2250c     FD 20 02 F6 | 	mov	local02, result1
22510     0F 13 02 F6 | 	mov	arg01, local01
22514     11 15 02 F6 | 	mov	arg02, local03
22518     FC F5 BF FD | 	call	#__system___float_div
2251c     FD 1E 02 F6 | 	mov	local01, result1
22520     00 40 27 FF 
22524     00 12 06 F6 | 	mov	arg01, ##1317011456
22528     10 15 02 F6 | 	mov	arg02, local02
2252c     E4 F3 BF FD | 	call	#__system___float_mul
22530     FD 12 02 F6 | 	mov	arg01, result1
22534     00 14 06 F6 | 	mov	arg02, #0
22538     A0 F8 BF FD | 	call	#__system___float_tointeger
2253c     FD 22 02 F6 | 	mov	local03, result1
22540     00 40 27 FF 
22544     00 12 06 F6 | 	mov	arg01, ##1317011456
22548     0F 15 02 F6 | 	mov	arg02, local01
2254c     C4 F3 BF FD | 	call	#__system___float_mul
22550     FD 12 02 F6 | 	mov	arg01, result1
22554     00 14 06 F6 | 	mov	arg02, #0
22558     80 F8 BF FD | 	call	#__system___float_tointeger
2255c     FD 22 52 FD | 	qvector	local03, result1
22560     87 24 20 FF 
22564     DB 23 06 F6 | 	mov	local03, ##1078530011
22568     19 12 62 FD | 	getqy	arg01
2256c     01 12 C6 F0 | 	sar	arg01, #1
22570     09 13 52 F6 | 	abs	arg01, arg01 wc
22574     1F 24 C6 C9 |  if_b	decod	local04, #31
22578     00 24 06 36 |  if_ae	mov	local04, #0
2257c     90 EF BF FD | 	call	#__system___float_fromuns
22580     12 FB 61 F5 | 	xor	result1, local04
22584     FD 12 02 F6 | 	mov	arg01, result1
22588     00 40 27 FF 
2258c     00 14 06 F6 | 	mov	arg02, ##1317011456
22590     84 F5 BF FD | 	call	#__system___float_div
22594     FD 14 02 F6 | 	mov	arg02, result1
22598     11 13 02 F6 | 	mov	arg01, local03
2259c     74 F3 BF FD | 	call	#__system___float_mul
225a0                 | LR__3191
225a0     A7 F0 03 F6 | 	mov	ptra, fp
225a4     B2 00 A0 FD | 	call	#popregs_
225a8                 | __system____builtin_atan2f_ret
225a8     2D 00 64 FD | 	ret
225ac                 | 
225ac                 | __system____builtin_exp2f
225ac     04 4A 05 F6 | 	mov	COUNT_, #4
225b0     A8 00 A0 FD | 	call	#pushregs_
225b4     09 1F 02 F6 | 	mov	local01, arg01
225b8     00 7F 21 FF 
225bc     00 14 06 F6 | 	mov	arg02, ##1123942400
225c0     01 16 66 F6 | 	neg	arg03, #1
225c4     80 F7 BF FD | 	call	#__system___float_cmp
225c8     00 FA 55 F2 | 	cmps	result1, #0 wc
225cc     00 C0 3F 3F 
225d0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
225d4     DC 00 90 3D |  if_ae	jmp	#LR__3201
225d8     0F 13 02 F6 | 	mov	arg01, local01
225dc     00 7F 61 FF 
225e0     00 14 06 F6 | 	mov	arg02, ##-1023541248
225e4     01 16 06 F6 | 	mov	arg03, #1
225e8     5C F7 BF FD | 	call	#__system___float_cmp
225ec     00 FA 55 F2 | 	cmps	result1, #0 wc
225f0     00 FA 05 C6 |  if_b	mov	result1, #0
225f4     BC 00 90 CD |  if_b	jmp	#LR__3201
225f8     0F 13 02 F6 | 	mov	arg01, local01
225fc     00 14 06 F6 | 	mov	arg02, #0
22600     D8 F7 BF FD | 	call	#__system___float_tointeger
22604     FD 20 02 F6 | 	mov	local02, result1
22608     10 13 52 F6 | 	abs	arg01, local02 wc
2260c     1F 22 C6 C9 |  if_b	decod	local03, #31
22610     00 22 06 36 |  if_ae	mov	local03, #0
22614     F8 EE BF FD | 	call	#__system___float_fromuns
22618     11 FB 61 F5 | 	xor	result1, local03
2261c     FD 14 02 F6 | 	mov	arg02, result1
22620     0F 13 02 F6 | 	mov	arg01, local01
22624     1F 14 E6 F4 | 	bitnot	arg02, #31
22628     18 EF BF FD | 	call	#__system___float_add
2262c     FD 24 02 F6 | 	mov	local04, result1
22630     12 13 02 F6 | 	mov	arg01, local04
22634     00 14 06 F6 | 	mov	arg02, #0
22638     01 16 06 F6 | 	mov	arg03, #1
2263c     08 F7 BF FD | 	call	#__system___float_cmp
22640     00 FA 55 F2 | 	cmps	result1, #0 wc
22644     18 00 90 3D |  if_ae	jmp	#LR__3200
22648     12 13 02 F6 | 	mov	arg01, local04
2264c     00 C0 1F FF 
22650     00 14 06 F6 | 	mov	arg02, ##1065353216
22654     EC EE BF FD | 	call	#__system___float_add
22658     FD 24 02 F6 | 	mov	local04, result1
2265c     01 20 86 F1 | 	sub	local02, #1
22660                 | LR__3200
22660     7F 20 06 F1 | 	add	local02, #127
22664     17 20 66 F0 | 	shl	local02, #23
22668     12 13 02 F6 | 	mov	arg01, local04
2266c     00 80 26 FF 
22670     00 14 06 F6 | 	mov	arg02, ##1291845632
22674     9C F2 BF FD | 	call	#__system___float_mul
22678     FD 12 02 F6 | 	mov	arg01, result1
2267c     00 14 06 F6 | 	mov	arg02, #0
22680     58 F7 BF FD | 	call	#__system___float_tointeger
22684     FD 24 0A F6 | 	mov	local04, result1 wz
22688     10 FB 01 A6 |  if_e	mov	result1, local02
2268c     24 00 90 AD |  if_e	jmp	#LR__3201
22690     3E 24 26 F4 | 	bith	local04, #62
22694     0F 24 62 FD | 	qexp	local04
22698     10 13 02 F6 | 	mov	arg01, local02
2269c     18 14 62 FD | 	getqx	arg02
226a0     01 14 06 F1 | 	add	arg02, #1
226a4     01 14 46 F0 | 	shr	arg02, #1
226a8     00 80 1F FF 
226ac     00 14 06 F1 | 	add	arg02, ##1056964608
226b0     60 F2 BF FD | 	call	#__system___float_mul
226b4                 | LR__3201
226b4     A7 F0 03 F6 | 	mov	ptra, fp
226b8     B2 00 A0 FD | 	call	#popregs_
226bc                 | __system____builtin_exp2f_ret
226bc     2D 00 64 FD | 	ret
226c0                 | 
226c0                 | __system____builtin_log2f
226c0     06 4A 05 F6 | 	mov	COUNT_, #6
226c4     A8 00 A0 FD | 	call	#pushregs_
226c8     09 1F 02 F6 | 	mov	local01, arg01
226cc     09 21 0A F6 | 	mov	local02, arg01 wz
226d0     00 00 40 5F 
226d4     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
226d8     00 40 00 AF 
226dc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
226e0     08 01 90 AD |  if_e	jmp	#LR__3214
226e4     00 20 56 F2 | 	cmps	local02, #0 wc
226e8     00 E0 3F CF 
226ec     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
226f0     F8 00 90 CD |  if_b	jmp	#LR__3214
226f4     0F 13 02 F6 | 	mov	arg01, local01
226f8     00 90 20 FF 
226fc     00 14 06 F6 | 	mov	arg02, ##1092616192
22700     01 16 06 F6 | 	mov	arg03, #1
22704     40 F6 BF FD | 	call	#__system___float_cmp
22708     00 FA 0D F2 | 	cmp	result1, #0 wz
2270c     4D 2A 20 AF 
22710     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
22714     D4 00 90 AD |  if_e	jmp	#LR__3214
22718     0F 13 02 F6 | 	mov	arg01, local01
2271c     FC 16 20 FF 
22720     54 14 06 F6 | 	mov	arg02, ##1076754516
22724     01 16 06 F6 | 	mov	arg03, #1
22728     1C F6 BF FD | 	call	#__system___float_cmp
2272c     00 FA 0D F2 | 	cmp	result1, #0 wz
22730     55 DC 1F AF 
22734     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
22738     B0 00 90 AD |  if_e	jmp	#LR__3214
2273c     10 23 02 F6 | 	mov	local03, local02
22740     17 22 46 F0 | 	shr	local03, #23
22744     11 23 E2 F8 | 	getbyte	local03, local03, #0
22748     17 21 06 F4 | 	bitl	local02, #279
2274c     10 25 02 F6 | 	mov	local04, local02
22750     FF 22 0E F2 | 	cmp	local03, #255 wz
22754     1C 00 90 5D |  if_ne	jmp	#LR__3210
22758     00 24 0E F2 | 	cmp	local04, #0 wz
2275c     00 C0 3F 5F 
22760     00 26 06 56 |  if_ne	mov	local05, ##2139095040
22764     00 E0 3F AF 
22768     00 26 06 A6 |  if_e	mov	local05, ##2143289344
2276c     13 FB 01 F6 | 	mov	result1, local05
22770     78 00 90 FD | 	jmp	#LR__3214
22774                 | LR__3210
22774     00 22 0E F2 | 	cmp	local03, #0 wz
22778     17 24 26 54 |  if_ne	bith	local04, #23
2277c     7F 22 86 51 |  if_ne	sub	local03, #127
22780     28 00 90 5D |  if_ne	jmp	#LR__3213
22784     00 24 0E F2 | 	cmp	local04, #0 wz
22788     00 40 00 AF 
2278c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
22790     58 00 90 AD |  if_e	jmp	#LR__3214
22794     7E 22 66 F6 | 	neg	local03, #126
22798     97 08 48 FB | 	callpa	#(@LR__3212-@LR__3211)>>2,fcache_load_ptr_
2279c                 | LR__3211
2279c     17 24 2E F4 | 	testbn	local04, #23 wz
227a0     01 24 66 A0 |  if_e	shl	local04, #1
227a4     01 22 06 A1 |  if_e	add	local03, #1
227a8     F0 FF 9F AD |  if_e	jmp	#LR__3211
227ac                 | LR__3212
227ac                 | LR__3213
227ac     0E 24 62 FD | 	qlog	local04
227b0     01 22 86 F1 | 	sub	local03, #1
227b4     11 13 52 F6 | 	abs	arg01, local03 wc
227b8     1F 28 C6 C9 |  if_b	decod	local06, #31
227bc     00 28 06 36 |  if_ae	mov	local06, #0
227c0     18 26 62 FD | 	getqx	local05
227c4     9B 26 06 F4 | 	bitl	local05, #155
227c8     08 26 06 F1 | 	add	local05, #8
227cc     04 26 46 F0 | 	shr	local05, #4
227d0     00 C0 1F FF 
227d4     00 26 06 F1 | 	add	local05, ##1065353216
227d8     34 ED BF FD | 	call	#__system___float_fromuns
227dc     14 FB 61 F5 | 	xor	result1, local06
227e0     FD 14 02 F6 | 	mov	arg02, result1
227e4     13 13 02 F6 | 	mov	arg01, local05
227e8     58 ED BF FD | 	call	#__system___float_add
227ec                 | LR__3214
227ec     A7 F0 03 F6 | 	mov	ptra, fp
227f0     B2 00 A0 FD | 	call	#popregs_
227f4                 | __system____builtin_log2f_ret
227f4     2D 00 64 FD | 	ret
227f8                 | 
227f8                 | __system____builtin_powf
227f8     04 4A 05 F6 | 	mov	COUNT_, #4
227fc     A8 00 A0 FD | 	call	#pushregs_
22800     09 1F 02 F6 | 	mov	local01, arg01
22804     0A 21 02 F6 | 	mov	local02, arg02
22808     10 13 02 F6 | 	mov	arg01, local02
2280c     00 14 06 F6 | 	mov	arg02, #0
22810     C8 F5 BF FD | 	call	#__system___float_tointeger
22814     FD 22 02 F6 | 	mov	local03, result1
22818     11 13 52 F6 | 	abs	arg01, local03 wc
2281c     1F 24 C6 C9 |  if_b	decod	local04, #31
22820     00 24 06 36 |  if_ae	mov	local04, #0
22824     E8 EC BF FD | 	call	#__system___float_fromuns
22828     12 FB 61 F5 | 	xor	result1, local04
2282c     FD 12 02 F6 | 	mov	arg01, result1
22830     10 15 02 F6 | 	mov	arg02, local02
22834     01 16 06 F6 | 	mov	arg03, #1
22838     0C F5 BF FD | 	call	#__system___float_cmp
2283c     00 FA 0D F2 | 	cmp	result1, #0 wz
22840     18 00 90 5D |  if_ne	jmp	#LR__3220
22844     00 C0 1F FF 
22848     00 12 06 F6 | 	mov	arg01, ##1065353216
2284c     0F 15 02 F6 | 	mov	arg02, local01
22850     11 17 02 F6 | 	mov	arg03, local03
22854     A0 00 B0 FD | 	call	#__system___float_pow_n
22858     58 00 90 FD | 	jmp	#LR__3221
2285c                 | LR__3220
2285c     0F 13 02 F6 | 	mov	arg01, local01
22860     00 14 06 F6 | 	mov	arg02, #0
22864     01 16 06 F6 | 	mov	arg03, #1
22868     DC F4 BF FD | 	call	#__system___float_cmp
2286c     00 FA 55 F2 | 	cmps	result1, #0 wc
22870     00 E0 3F CF 
22874     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
22878     38 00 90 CD |  if_b	jmp	#LR__3221
2287c     0F 13 02 F6 | 	mov	arg01, local01
22880     00 14 06 F6 | 	mov	arg02, #0
22884     01 16 06 F6 | 	mov	arg03, #1
22888     BC F4 BF FD | 	call	#__system___float_cmp
2288c     00 FA 0D F2 | 	cmp	result1, #0 wz
22890     00 FA 05 A6 |  if_e	mov	result1, #0
22894     1C 00 90 AD |  if_e	jmp	#LR__3221
22898     0F 13 02 F6 | 	mov	arg01, local01
2289c     20 FE BF FD | 	call	#__system____builtin_log2f
228a0     FD 12 02 F6 | 	mov	arg01, result1
228a4     10 15 02 F6 | 	mov	arg02, local02
228a8     68 F0 BF FD | 	call	#__system___float_mul
228ac     FD 12 02 F6 | 	mov	arg01, result1
228b0     F8 FC BF FD | 	call	#__system____builtin_exp2f
228b4                 | LR__3221
228b4     A7 F0 03 F6 | 	mov	ptra, fp
228b8     B2 00 A0 FD | 	call	#popregs_
228bc                 | __system____builtin_powf_ret
228bc     2D 00 64 FD | 	ret
228c0                 | 
228c0                 | __system____builtin_logbase
228c0     02 4A 05 F6 | 	mov	COUNT_, #2
228c4     A8 00 A0 FD | 	call	#pushregs_
228c8     09 1F 02 F6 | 	mov	local01, arg01
228cc     0A 13 02 F6 | 	mov	arg01, arg02
228d0     EC FD BF FD | 	call	#__system____builtin_log2f
228d4     FD 20 02 F6 | 	mov	local02, result1
228d8     0F 13 02 F6 | 	mov	arg01, local01
228dc     E0 FD BF FD | 	call	#__system____builtin_log2f
228e0     FD 14 02 F6 | 	mov	arg02, result1
228e4     10 13 02 F6 | 	mov	arg01, local02
228e8     2C F2 BF FD | 	call	#__system___float_div
228ec     A7 F0 03 F6 | 	mov	ptra, fp
228f0     B2 00 A0 FD | 	call	#popregs_
228f4                 | __system____builtin_logbase_ret
228f4     2D 00 64 FD | 	ret
228f8                 | 
228f8                 | __system___float_pow_n
228f8     05 4A 05 F6 | 	mov	COUNT_, #5
228fc     A8 00 A0 FD | 	call	#pushregs_
22900     09 1F 02 F6 | 	mov	local01, arg01
22904     0A 21 02 F6 | 	mov	local02, arg02
22908     0B 23 02 F6 | 	mov	local03, arg03
2290c     00 22 56 F2 | 	cmps	local03, #0 wc
22910     18 00 90 3D |  if_ae	jmp	#LR__3230
22914     01 24 06 F6 | 	mov	local04, #1
22918     11 23 62 F6 | 	neg	local03, local03
2291c     00 22 56 F2 | 	cmps	local03, #0 wc
22920     00 FA 05 C6 |  if_b	mov	result1, #0
22924     94 00 90 CD |  if_b	jmp	#LR__3238
22928     04 00 90 FD | 	jmp	#LR__3231
2292c                 | LR__3230
2292c     00 24 06 F6 | 	mov	local04, #0
22930                 | LR__3231
22930     00 C0 1F FF 
22934     00 26 06 F6 | 	mov	local05, ##1065353216
22938                 | LR__3232
22938     01 22 56 F2 | 	cmps	local03, #1 wc
2293c     30 00 90 CD |  if_b	jmp	#LR__3234
22940     01 22 CE F7 | 	test	local03, #1 wz
22944     10 00 90 AD |  if_e	jmp	#LR__3233
22948     13 13 02 F6 | 	mov	arg01, local05
2294c     10 15 02 F6 | 	mov	arg02, local02
22950     C0 EF BF FD | 	call	#__system___float_mul
22954     FD 26 02 F6 | 	mov	local05, result1
22958                 | LR__3233
22958     01 22 C6 F0 | 	sar	local03, #1
2295c     10 13 02 F6 | 	mov	arg01, local02
22960     10 15 02 F6 | 	mov	arg02, local02
22964     AC EF BF FD | 	call	#__system___float_mul
22968     FD 20 02 F6 | 	mov	local02, result1
2296c     C8 FF 9F FD | 	jmp	#LR__3232
22970                 | LR__3234
22970     00 24 0E F2 | 	cmp	local04, #0 wz
22974     14 00 90 AD |  if_e	jmp	#LR__3235
22978     0F 13 02 F6 | 	mov	arg01, local01
2297c     13 15 02 F6 | 	mov	arg02, local05
22980     94 F1 BF FD | 	call	#__system___float_div
22984     FD 26 02 F6 | 	mov	local05, result1
22988     2C 00 90 FD | 	jmp	#LR__3237
2298c                 | LR__3235
2298c     0F 13 02 F6 | 	mov	arg01, local01
22990     00 C0 1F FF 
22994     00 14 06 F6 | 	mov	arg02, ##1065353216
22998     01 16 06 F6 | 	mov	arg03, #1
2299c     A8 F3 BF FD | 	call	#__system___float_cmp
229a0     00 FA 0D F2 | 	cmp	result1, #0 wz
229a4     10 00 90 AD |  if_e	jmp	#LR__3236
229a8     0F 13 02 F6 | 	mov	arg01, local01
229ac     13 15 02 F6 | 	mov	arg02, local05
229b0     60 EF BF FD | 	call	#__system___float_mul
229b4     FD 26 02 F6 | 	mov	local05, result1
229b8                 | LR__3236
229b8                 | LR__3237
229b8     13 FB 01 F6 | 	mov	result1, local05
229bc                 | LR__3238
229bc     A7 F0 03 F6 | 	mov	ptra, fp
229c0     B2 00 A0 FD | 	call	#popregs_
229c4                 | __system___float_pow_n_ret
229c4     2D 00 64 FD | 	ret
229c8                 | 
229c8                 | __system___gc_ptrs
229c8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
229cc     00 03 02 F6 | 	mov	_var02, _var01
229d0     76 01 00 FF 
229d4     F8 03 06 F1 | 	add	_var02, ##191992
229d8     00 FD 09 FB | 	rdlong	result2, _var01 wz
229dc     74 00 90 5D |  if_ne	jmp	#LR__3240
229e0     01 FD 01 F6 | 	mov	result2, _var02
229e4     00 FD 81 F1 | 	sub	result2, _var01
229e8     00 03 58 FC | 	wrword	#1, _var01
229ec     00 FB 01 F6 | 	mov	result1, _var01
229f0     02 FA 05 F1 | 	add	result1, #2
229f4     36 00 80 FF 
229f8     FD 20 59 FC | 	wrword	##27792, result1
229fc     00 FB 01 F6 | 	mov	result1, _var01
22a00     04 FA 05 F1 | 	add	result1, #4
22a04     FD 00 58 FC | 	wrword	#0, result1
22a08     00 FB 01 F6 | 	mov	result1, _var01
22a0c     06 FA 05 F1 | 	add	result1, #6
22a10     FD 02 58 FC | 	wrword	#1, result1
22a14     10 00 06 F1 | 	add	_var01, #16
22a18     FE FC 51 F6 | 	abs	result2, result2 wc
22a1c     04 FC 45 F0 | 	shr	result2, #4
22a20     FE FC 81 F6 | 	negc	result2, result2
22a24     00 FD 51 FC | 	wrword	result2, _var01
22a28     00 FD 01 F6 | 	mov	result2, _var01
22a2c     02 FC 05 F1 | 	add	result2, #2
22a30     36 00 80 FF 
22a34     FE 1E 59 FC | 	wrword	##27791, result2
22a38     00 FD 01 F6 | 	mov	result2, _var01
22a3c     04 FC 05 F1 | 	add	result2, #4
22a40     FE 00 58 FC | 	wrword	#0, result2
22a44     00 FD 01 F6 | 	mov	result2, _var01
22a48     06 FC 05 F1 | 	add	result2, #6
22a4c     FE 00 58 FC | 	wrword	#0, result2
22a50     10 00 86 F1 | 	sub	_var01, #16
22a54                 | LR__3240
22a54     00 FB 01 F6 | 	mov	result1, _var01
22a58     01 FD 01 F6 | 	mov	result2, _var02
22a5c                 | __system___gc_ptrs_ret
22a5c     2D 00 64 FD | 	ret
22a60                 | 
22a60                 | __system___gc_tryalloc
22a60     0B 4A 05 F6 | 	mov	COUNT_, #11
22a64     A8 00 A0 FD | 	call	#pushregs_
22a68     09 1F 02 F6 | 	mov	local01, arg01
22a6c     0A 21 02 F6 | 	mov	local02, arg02
22a70     54 FF BF FD | 	call	#__system___gc_ptrs
22a74     FD 22 02 F6 | 	mov	local03, result1
22a78     FE 24 02 F6 | 	mov	local04, result2
22a7c     11 27 02 F6 | 	mov	local05, local03
22a80     00 28 06 F6 | 	mov	local06, #0
22a84     97 1E 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
22a88                 | LR__3250
22a88     13 2B 02 F6 | 	mov	local07, local05
22a8c     06 26 06 F1 | 	add	local05, #6
22a90     13 15 EA FA | 	rdword	arg02, local05 wz
22a94     11 13 02 F6 | 	mov	arg01, local03
22a98     00 FA 05 A6 |  if_e	mov	result1, #0
22a9c     04 14 66 50 |  if_ne	shl	arg02, #4
22aa0     0A 13 02 51 |  if_ne	add	arg01, arg02
22aa4     09 FB 01 56 |  if_ne	mov	result1, arg01
22aa8     FD 26 0A F6 | 	mov	local05, result1 wz
22aac     13 29 E2 5A |  if_ne	rdword	local06, local05
22ab0     00 26 0E F2 | 	cmp	local05, #0 wz
22ab4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
22ab8     08 00 90 1D |  if_a	jmp	#LR__3252
22abc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
22ac0     C4 FF 9F 1D |  if_a	jmp	#LR__3250
22ac4                 | LR__3251
22ac4                 | LR__3252
22ac4     00 26 0E F2 | 	cmp	local05, #0 wz
22ac8     13 FB 01 A6 |  if_e	mov	result1, local05
22acc     3C 01 90 AD |  if_e	jmp	#LR__3255
22ad0     13 FD 01 F6 | 	mov	result2, local05
22ad4     06 FC 05 F1 | 	add	result2, #6
22ad8     FE 2C E2 FA | 	rdword	local08, result2
22adc     14 1F 52 F2 | 	cmps	local01, local06 wc
22ae0     C0 00 90 3D |  if_ae	jmp	#LR__3254
22ae4     13 1F 52 FC | 	wrword	local01, local05
22ae8     13 13 02 F6 | 	mov	arg01, local05
22aec     0F 2D 02 F6 | 	mov	local08, local01
22af0     04 2C 66 F0 | 	shl	local08, #4
22af4     16 13 02 F1 | 	add	arg01, local08
22af8     0F 29 82 F1 | 	sub	local06, local01
22afc     09 29 52 FC | 	wrword	local06, arg01
22b00     09 2D 02 F6 | 	mov	local08, arg01
22b04     02 2C 06 F1 | 	add	local08, #2
22b08     36 00 80 FF 
22b0c     16 1F 59 FC | 	wrword	##27791, local08
22b10     13 15 0A F6 | 	mov	arg02, local05 wz
22b14     00 FA 05 A6 |  if_e	mov	result1, #0
22b18     11 15 82 51 |  if_ne	sub	arg02, local03
22b1c     04 14 46 50 |  if_ne	shr	arg02, #4
22b20     0A FB 01 56 |  if_ne	mov	result1, arg02
22b24     09 2D 02 F6 | 	mov	local08, arg01
22b28     04 2C 06 F1 | 	add	local08, #4
22b2c     16 FB 51 FC | 	wrword	result1, local08
22b30     13 2D 02 F6 | 	mov	local08, local05
22b34     06 2C 06 F1 | 	add	local08, #6
22b38     09 15 02 F6 | 	mov	arg02, arg01
22b3c     16 2D E2 FA | 	rdword	local08, local08
22b40     06 14 06 F1 | 	add	arg02, #6
22b44     0A 2D 52 FC | 	wrword	local08, arg02
22b48     09 2F 02 F6 | 	mov	local09, arg01
22b4c     17 15 0A F6 | 	mov	arg02, local09 wz
22b50     00 FA 05 A6 |  if_e	mov	result1, #0
22b54     11 15 82 51 |  if_ne	sub	arg02, local03
22b58     04 14 46 50 |  if_ne	shr	arg02, #4
22b5c     0A FB 01 56 |  if_ne	mov	result1, arg02
22b60     FD 2C 02 F6 | 	mov	local08, result1
22b64     09 31 EA FA | 	rdword	local10, arg01 wz
22b68     00 FA 05 A6 |  if_e	mov	result1, #0
22b6c     04 30 66 50 |  if_ne	shl	local10, #4
22b70     18 13 02 51 |  if_ne	add	arg01, local10
22b74     09 FB 01 56 |  if_ne	mov	result1, arg01
22b78     FD 32 0A F6 | 	mov	local11, result1 wz
22b7c     24 00 90 AD |  if_e	jmp	#LR__3253
22b80     12 33 52 F2 | 	cmps	local11, local04 wc
22b84     1C 00 90 3D |  if_ae	jmp	#LR__3253
22b88     17 15 0A F6 | 	mov	arg02, local09 wz
22b8c     00 FA 05 A6 |  if_e	mov	result1, #0
22b90     11 15 82 51 |  if_ne	sub	arg02, local03
22b94     04 14 46 50 |  if_ne	shr	arg02, #4
22b98     0A FB 01 56 |  if_ne	mov	result1, arg02
22b9c     04 32 06 F1 | 	add	local11, #4
22ba0     19 FB 51 FC | 	wrword	result1, local11
22ba4                 | LR__3253
22ba4                 | LR__3254
22ba4     06 2A 06 F1 | 	add	local07, #6
22ba8     15 2D 52 FC | 	wrword	local08, local07
22bac     36 00 00 FF 
22bb0     80 2E 06 F6 | 	mov	local09, ##27776
22bb4     10 2F 42 F5 | 	or	local09, local02
22bb8     00 FA 05 F6 | 	mov	result1, #0
22bbc     01 FA 61 FD | 	cogid	result1
22bc0     FD 2E 42 F5 | 	or	local09, result1
22bc4     13 33 02 F6 | 	mov	local11, local05
22bc8     02 32 06 F1 | 	add	local11, #2
22bcc     19 2F 52 FC | 	wrword	local09, local11
22bd0     11 2F 02 F6 | 	mov	local09, local03
22bd4     08 2E 06 F1 | 	add	local09, #8
22bd8     13 33 02 F6 | 	mov	local11, local05
22bdc     17 2F E2 FA | 	rdword	local09, local09
22be0     06 32 06 F1 | 	add	local11, #6
22be4     19 2F 52 FC | 	wrword	local09, local11
22be8     13 15 0A F6 | 	mov	arg02, local05 wz
22bec     00 FA 05 A6 |  if_e	mov	result1, #0
22bf0     11 15 82 51 |  if_ne	sub	arg02, local03
22bf4     04 14 46 50 |  if_ne	shr	arg02, #4
22bf8     0A FB 01 56 |  if_ne	mov	result1, arg02
22bfc     08 22 06 F1 | 	add	local03, #8
22c00     11 FB 51 FC | 	wrword	result1, local03
22c04     08 26 06 F1 | 	add	local05, #8
22c08     13 FB 01 F6 | 	mov	result1, local05
22c0c                 | LR__3255
22c0c     A7 F0 03 F6 | 	mov	ptra, fp
22c10     B2 00 A0 FD | 	call	#popregs_
22c14                 | __system___gc_tryalloc_ret
22c14     2D 00 64 FD | 	ret
22c18                 | 
22c18                 | __system___gc_alloc_managed
22c18     01 4A 05 F6 | 	mov	COUNT_, #1
22c1c     A8 00 A0 FD | 	call	#pushregs_
22c20     09 1F 02 F6 | 	mov	local01, arg01
22c24     00 14 06 F6 | 	mov	arg02, #0
22c28     1C 00 B0 FD | 	call	#__system___gc_doalloc
22c2c     FD 14 0A F6 | 	mov	arg02, result1 wz
22c30     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
22c34     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
22c38     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
22c3c     A7 F0 03 F6 | 	mov	ptra, fp
22c40     B2 00 A0 FD | 	call	#popregs_
22c44                 | __system___gc_alloc_managed_ret
22c44     2D 00 64 FD | 	ret
22c48                 | 
22c48                 | __system___gc_doalloc
22c48     06 4A 05 F6 | 	mov	COUNT_, #6
22c4c     A8 00 A0 FD | 	call	#pushregs_
22c50     09 1F 0A F6 | 	mov	local01, arg01 wz
22c54     0A 21 02 F6 | 	mov	local02, arg02
22c58     00 FA 05 A6 |  if_e	mov	result1, #0
22c5c     8C 00 90 AD |  if_e	jmp	#LR__3267
22c60     17 1E 06 F1 | 	add	local01, #23
22c64     0F 1E 26 F5 | 	andn	local01, #15
22c68     04 1E 46 F0 | 	shr	local01, #4
22c6c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22c70     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22c74     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22c78     50 C1 BF FD | 	call	#__system___lockmem
22c7c     0F 13 02 F6 | 	mov	arg01, local01
22c80     10 15 02 F6 | 	mov	arg02, local02
22c84     D8 FD BF FD | 	call	#__system___gc_tryalloc
22c88     FD 22 0A F6 | 	mov	local03, result1 wz
22c8c     14 00 90 5D |  if_ne	jmp	#LR__3260
22c90     70 03 B0 FD | 	call	#__system___gc_docollect
22c94     0F 13 02 F6 | 	mov	arg01, local01
22c98     10 15 02 F6 | 	mov	arg02, local02
22c9c     C0 FD BF FD | 	call	#__system___gc_tryalloc
22ca0     FD 22 02 F6 | 	mov	local03, result1
22ca4                 | LR__3260
22ca4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22ca8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22cac     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22cb0     09 01 68 FC | 	wrlong	#0, arg01
22cb4     00 22 0E F2 | 	cmp	local03, #0 wz
22cb8     2C 00 90 AD |  if_e	jmp	#LR__3266
22cbc     04 1E 66 F0 | 	shl	local01, #4
22cc0     08 1E 86 F1 | 	sub	local01, #8
22cc4     0F 25 52 F6 | 	abs	local04, local01 wc
22cc8     02 24 46 F0 | 	shr	local04, #2
22ccc     12 27 8A F6 | 	negc	local05, local04 wz
22cd0     11 29 02 F6 | 	mov	local06, local03
22cd4     10 00 90 AD |  if_e	jmp	#LR__3265
22cd8     97 06 48 FB | 	callpa	#(@LR__3263-@LR__3261)>>2,fcache_load_ptr_
22cdc                 | LR__3261
22cdc     13 05 D8 FC | 	rep	@LR__3264, local05
22ce0                 | LR__3262
22ce0     14 01 68 FC | 	wrlong	#0, local06
22ce4     04 28 06 F1 | 	add	local06, #4
22ce8                 | LR__3263
22ce8                 | LR__3264
22ce8                 | LR__3265
22ce8                 | LR__3266
22ce8     11 FB 01 F6 | 	mov	result1, local03
22cec                 | LR__3267
22cec     A7 F0 03 F6 | 	mov	ptra, fp
22cf0     B2 00 A0 FD | 	call	#popregs_
22cf4                 | __system___gc_doalloc_ret
22cf4     2D 00 64 FD | 	ret
22cf8                 | 
22cf8                 | __system___gc_isvalidptr
22cf8     F8 16 06 F4 | 	bitl	arg03, #248
22cfc     08 16 86 F1 | 	sub	arg03, #8
22d00     09 17 52 F2 | 	cmps	arg03, arg01 wc
22d04     08 00 90 CD |  if_b	jmp	#LR__3270
22d08     0A 17 52 F2 | 	cmps	arg03, arg02 wc
22d0c     08 00 90 CD |  if_b	jmp	#LR__3271
22d10                 | LR__3270
22d10     00 FA 05 F6 | 	mov	result1, #0
22d14     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
22d18                 | LR__3271
22d18     0B 01 02 F6 | 	mov	_var01, arg03
22d1c     09 01 62 F5 | 	xor	_var01, arg01
22d20     0F 00 CE F7 | 	test	_var01, #15 wz
22d24     00 FA 05 56 |  if_ne	mov	result1, #0
22d28     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
22d2c     0B 01 02 F6 | 	mov	_var01, arg03
22d30     02 00 06 F1 | 	add	_var01, #2
22d34     00 01 E2 FA | 	rdword	_var01, _var01
22d38     7F 00 00 FF 
22d3c     C0 01 06 F5 | 	and	_var01, ##65472
22d40     36 00 00 FF 
22d44     80 00 0E F2 | 	cmp	_var01, ##27776 wz
22d48     00 FA 05 56 |  if_ne	mov	result1, #0
22d4c     0B FB 01 A6 |  if_e	mov	result1, arg03
22d50                 | __system___gc_isvalidptr_ret
22d50     2D 00 64 FD | 	ret
22d54                 | 
22d54                 | __system___gc_free
22d54     09 17 02 F6 | 	mov	arg03, arg01
22d58     6C FC BF FD | 	call	#__system___gc_ptrs
22d5c     FD 12 02 F6 | 	mov	arg01, result1
22d60     FE 14 02 F6 | 	mov	arg02, result2
22d64     90 FF BF FD | 	call	#__system___gc_isvalidptr
22d68     FD 14 0A F6 | 	mov	arg02, result1 wz
22d6c     28 00 90 AD |  if_e	jmp	#LR__3280
22d70     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22d74     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22d78     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22d7c     4C C0 BF FD | 	call	#__system___lockmem
22d80     0A 13 02 F6 | 	mov	arg01, arg02
22d84     14 00 B0 FD | 	call	#__system___gc_dofree
22d88     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22d8c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22d90     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22d94     09 01 68 FC | 	wrlong	#0, arg01
22d98                 | LR__3280
22d98                 | __system___gc_free_ret
22d98     2D 00 64 FD | 	ret
22d9c                 | 
22d9c                 | __system___gc_dofree
22d9c     06 4A 05 F6 | 	mov	COUNT_, #6
22da0     A8 00 A0 FD | 	call	#pushregs_
22da4     09 1F 02 F6 | 	mov	local01, arg01
22da8     1C FC BF FD | 	call	#__system___gc_ptrs
22dac     FD 20 02 F6 | 	mov	local02, result1
22db0     FE 22 02 F6 | 	mov	local03, result2
22db4     0F 15 02 F6 | 	mov	arg02, local01
22db8     02 14 06 F1 | 	add	arg02, #2
22dbc     36 00 80 FF 
22dc0     0A 1F 59 FC | 	wrword	##27791, arg02
22dc4     0F 25 02 F6 | 	mov	local04, local01
22dc8     0F 13 02 F6 | 	mov	arg01, local01
22dcc     09 27 EA FA | 	rdword	local05, arg01 wz
22dd0     00 FA 05 A6 |  if_e	mov	result1, #0
22dd4     04 26 66 50 |  if_ne	shl	local05, #4
22dd8     13 13 02 51 |  if_ne	add	arg01, local05
22ddc     09 FB 01 56 |  if_ne	mov	result1, arg01
22de0     FD 28 02 F6 | 	mov	local06, result1
22de4     97 24 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
22de8                 | LR__3290
22de8     04 24 06 F1 | 	add	local04, #4
22dec     12 15 EA FA | 	rdword	arg02, local04 wz
22df0     10 13 02 F6 | 	mov	arg01, local02
22df4     00 FA 05 A6 |  if_e	mov	result1, #0
22df8     04 14 66 50 |  if_ne	shl	arg02, #4
22dfc     0A 13 02 51 |  if_ne	add	arg01, arg02
22e00     09 FB 01 56 |  if_ne	mov	result1, arg01
22e04     FD 24 0A F6 | 	mov	local04, result1 wz
22e08     24 00 90 AD |  if_e	jmp	#LR__3292
22e0c     12 13 02 F6 | 	mov	arg01, local04
22e10     00 FA 05 F6 | 	mov	result1, #0
22e14     02 12 06 F1 | 	add	arg01, #2
22e18     09 13 E2 FA | 	rdword	arg01, arg01
22e1c     36 00 00 FF 
22e20     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22e24     01 FA 65 A6 |  if_e	neg	result1, #1
22e28     00 FA 0D F2 | 	cmp	result1, #0 wz
22e2c     B8 FF 9F AD |  if_e	jmp	#LR__3290
22e30                 | LR__3291
22e30                 | LR__3292
22e30     00 24 0E F2 | 	cmp	local04, #0 wz
22e34     10 25 02 A6 |  if_e	mov	local04, local02
22e38     12 15 02 F6 | 	mov	arg02, local04
22e3c     06 14 06 F1 | 	add	arg02, #6
22e40     0F 13 02 F6 | 	mov	arg01, local01
22e44     0A 15 E2 FA | 	rdword	arg02, arg02
22e48     06 12 06 F1 | 	add	arg01, #6
22e4c     09 15 52 FC | 	wrword	arg02, arg01
22e50     0F 15 0A F6 | 	mov	arg02, local01 wz
22e54     00 FA 05 A6 |  if_e	mov	result1, #0
22e58     10 15 82 51 |  if_ne	sub	arg02, local02
22e5c     04 14 46 50 |  if_ne	shr	arg02, #4
22e60     0A FB 01 56 |  if_ne	mov	result1, arg02
22e64     12 15 02 F6 | 	mov	arg02, local04
22e68     06 14 06 F1 | 	add	arg02, #6
22e6c     0A FB 51 FC | 	wrword	result1, arg02
22e70     10 25 0A F2 | 	cmp	local04, local02 wz
22e74     A4 00 90 AD |  if_e	jmp	#LR__3295
22e78     12 13 02 F6 | 	mov	arg01, local04
22e7c     09 27 EA FA | 	rdword	local05, arg01 wz
22e80     00 FA 05 A6 |  if_e	mov	result1, #0
22e84     04 26 66 50 |  if_ne	shl	local05, #4
22e88     13 13 02 51 |  if_ne	add	arg01, local05
22e8c     09 FB 01 56 |  if_ne	mov	result1, arg01
22e90     0F FB 09 F2 | 	cmp	result1, local01 wz
22e94     84 00 90 5D |  if_ne	jmp	#LR__3294
22e98     12 29 E2 FA | 	rdword	local06, local04
22e9c     0F 15 E2 FA | 	rdword	arg02, local01
22ea0     0A 29 02 F1 | 	add	local06, arg02
22ea4     12 29 52 FC | 	wrword	local06, local04
22ea8     0F 29 02 F6 | 	mov	local06, local01
22eac     02 28 06 F1 | 	add	local06, #2
22eb0     14 01 58 FC | 	wrword	#0, local06
22eb4     0F 13 02 F6 | 	mov	arg01, local01
22eb8     09 27 EA FA | 	rdword	local05, arg01 wz
22ebc     00 FA 05 A6 |  if_e	mov	result1, #0
22ec0     04 26 66 50 |  if_ne	shl	local05, #4
22ec4     13 13 02 51 |  if_ne	add	arg01, local05
22ec8     09 FB 01 56 |  if_ne	mov	result1, arg01
22ecc     FD 28 02 F6 | 	mov	local06, result1
22ed0     11 29 52 F2 | 	cmps	local06, local03 wc
22ed4     20 00 90 3D |  if_ae	jmp	#LR__3293
22ed8     12 15 0A F6 | 	mov	arg02, local04 wz
22edc     00 FA 05 A6 |  if_e	mov	result1, #0
22ee0     10 15 82 51 |  if_ne	sub	arg02, local02
22ee4     04 14 46 50 |  if_ne	shr	arg02, #4
22ee8     0A FB 01 56 |  if_ne	mov	result1, arg02
22eec     14 15 02 F6 | 	mov	arg02, local06
22ef0     04 14 06 F1 | 	add	arg02, #4
22ef4     0A FB 51 FC | 	wrword	result1, arg02
22ef8                 | LR__3293
22ef8     0F 15 02 F6 | 	mov	arg02, local01
22efc     06 14 06 F1 | 	add	arg02, #6
22f00     12 FD 01 F6 | 	mov	result2, local04
22f04     0A 15 E2 FA | 	rdword	arg02, arg02
22f08     06 FC 05 F1 | 	add	result2, #6
22f0c     FE 14 52 FC | 	wrword	arg02, result2
22f10     06 1E 06 F1 | 	add	local01, #6
22f14     0F 01 58 FC | 	wrword	#0, local01
22f18     12 1F 02 F6 | 	mov	local01, local04
22f1c                 | LR__3294
22f1c                 | LR__3295
22f1c     0F 13 02 F6 | 	mov	arg01, local01
22f20     09 27 EA FA | 	rdword	local05, arg01 wz
22f24     00 FA 05 A6 |  if_e	mov	result1, #0
22f28     04 26 66 50 |  if_ne	shl	local05, #4
22f2c     13 13 02 51 |  if_ne	add	arg01, local05
22f30     09 FB 01 56 |  if_ne	mov	result1, arg01
22f34     FD 14 0A F6 | 	mov	arg02, result1 wz
22f38     B8 00 90 AD |  if_e	jmp	#LR__3297
22f3c     11 15 52 F2 | 	cmps	arg02, local03 wc
22f40     B0 00 90 3D |  if_ae	jmp	#LR__3297
22f44     0A 13 02 F6 | 	mov	arg01, arg02
22f48     00 FA 05 F6 | 	mov	result1, #0
22f4c     02 12 06 F1 | 	add	arg01, #2
22f50     09 13 E2 FA | 	rdword	arg01, arg01
22f54     36 00 00 FF 
22f58     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22f5c     01 FA 65 A6 |  if_e	neg	result1, #1
22f60     00 FA 0D F2 | 	cmp	result1, #0 wz
22f64     8C 00 90 AD |  if_e	jmp	#LR__3297
22f68     0F 25 02 F6 | 	mov	local04, local01
22f6c     12 29 E2 FA | 	rdword	local06, local04
22f70     0A 13 02 F6 | 	mov	arg01, arg02
22f74     09 1F E2 FA | 	rdword	local01, arg01
22f78     0F 29 02 F1 | 	add	local06, local01
22f7c     12 29 52 FC | 	wrword	local06, local04
22f80     09 29 02 F6 | 	mov	local06, arg01
22f84     06 28 06 F1 | 	add	local06, #6
22f88     12 1F 02 F6 | 	mov	local01, local04
22f8c     14 29 E2 FA | 	rdword	local06, local06
22f90     06 1E 06 F1 | 	add	local01, #6
22f94     0F 29 52 FC | 	wrword	local06, local01
22f98     09 29 02 F6 | 	mov	local06, arg01
22f9c     02 28 06 F1 | 	add	local06, #2
22fa0     14 55 59 FC | 	wrword	#170, local06
22fa4     09 29 02 F6 | 	mov	local06, arg01
22fa8     06 28 06 F1 | 	add	local06, #6
22fac     14 01 58 FC | 	wrword	#0, local06
22fb0     09 27 EA FA | 	rdword	local05, arg01 wz
22fb4     00 FA 05 A6 |  if_e	mov	result1, #0
22fb8     04 26 66 50 |  if_ne	shl	local05, #4
22fbc     13 13 02 51 |  if_ne	add	arg01, local05
22fc0     09 FB 01 56 |  if_ne	mov	result1, arg01
22fc4     FD 28 0A F6 | 	mov	local06, result1 wz
22fc8     28 00 90 AD |  if_e	jmp	#LR__3296
22fcc     11 29 52 F2 | 	cmps	local06, local03 wc
22fd0     20 00 90 3D |  if_ae	jmp	#LR__3296
22fd4     12 15 0A F6 | 	mov	arg02, local04 wz
22fd8     00 FA 05 A6 |  if_e	mov	result1, #0
22fdc     10 15 82 51 |  if_ne	sub	arg02, local02
22fe0     04 14 46 50 |  if_ne	shr	arg02, #4
22fe4     0A FB 01 56 |  if_ne	mov	result1, arg02
22fe8     14 25 02 F6 | 	mov	local04, local06
22fec     04 24 06 F1 | 	add	local04, #4
22ff0     12 FB 51 FC | 	wrword	result1, local04
22ff4                 | LR__3296
22ff4                 | LR__3297
22ff4     14 FB 01 F6 | 	mov	result1, local06
22ff8     A7 F0 03 F6 | 	mov	ptra, fp
22ffc     B2 00 A0 FD | 	call	#popregs_
23000                 | __system___gc_dofree_ret
23000     2D 00 64 FD | 	ret
23004                 | 
23004                 | __system___gc_docollect
23004     05 4A 05 F6 | 	mov	COUNT_, #5
23008     A8 00 A0 FD | 	call	#pushregs_
2300c     B8 F9 BF FD | 	call	#__system___gc_ptrs
23010     FE 1E 02 F6 | 	mov	local01, result2
23014     FD 20 02 F6 | 	mov	local02, result1
23018     10 13 02 F6 | 	mov	arg01, local02
2301c     09 23 EA FA | 	rdword	local03, arg01 wz
23020     00 FA 05 A6 |  if_e	mov	result1, #0
23024     04 22 66 50 |  if_ne	shl	local03, #4
23028     11 13 02 51 |  if_ne	add	arg01, local03
2302c     09 FB 01 56 |  if_ne	mov	result1, arg01
23030     FD 24 0A F6 | 	mov	local04, result1 wz
23034     00 FA 05 F6 | 	mov	result1, #0
23038     01 FA 61 FD | 	cogid	result1
2303c     FD 26 02 F6 | 	mov	local05, result1
23040     48 00 90 AD |  if_e	jmp	#LR__3302
23044     97 22 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
23048                 | LR__3300
23048     0F 25 52 F2 | 	cmps	local04, local01 wc
2304c     3C 00 90 3D |  if_ae	jmp	#LR__3302
23050     12 15 02 F6 | 	mov	arg02, local04
23054     02 14 06 F1 | 	add	arg02, #2
23058     0A 15 E2 FA | 	rdword	arg02, arg02
2305c     20 14 26 F5 | 	andn	arg02, #32
23060     12 13 02 F6 | 	mov	arg01, local04
23064     02 12 06 F1 | 	add	arg01, #2
23068     09 15 52 FC | 	wrword	arg02, arg01
2306c     12 13 02 F6 | 	mov	arg01, local04
23070     09 23 EA FA | 	rdword	local03, arg01 wz
23074     00 FA 05 A6 |  if_e	mov	result1, #0
23078     04 22 66 50 |  if_ne	shl	local03, #4
2307c     11 13 02 51 |  if_ne	add	arg01, local03
23080     09 FB 01 56 |  if_ne	mov	result1, arg01
23084     FD 24 0A F6 | 	mov	local04, result1 wz
23088     BC FF 9F 5D |  if_ne	jmp	#LR__3300
2308c                 | LR__3301
2308c                 | LR__3302
2308c     00 22 06 F6 | 	mov	local03, #0
23090     00 12 06 F6 | 	mov	arg01, #0
23094     0C BD BF FD | 	call	#__system____topofstack
23098     FD 14 02 F6 | 	mov	arg02, result1
2309c     11 13 02 F6 | 	mov	arg01, local03
230a0     90 00 B0 FD | 	call	#__system___gc_markhub
230a4     1C 01 B0 FD | 	call	#__system___gc_markcog
230a8     10 13 02 F6 | 	mov	arg01, local02
230ac     09 23 EA FA | 	rdword	local03, arg01 wz
230b0     00 FA 05 A6 |  if_e	mov	result1, #0
230b4     04 22 66 50 |  if_ne	shl	local03, #4
230b8     11 13 02 51 |  if_ne	add	arg01, local03
230bc     09 FB 01 56 |  if_ne	mov	result1, arg01
230c0     FD 20 0A F6 | 	mov	local02, result1 wz
230c4     60 00 90 AD |  if_e	jmp	#LR__3306
230c8                 | LR__3303
230c8     10 25 02 F6 | 	mov	local04, local02
230cc     12 13 02 F6 | 	mov	arg01, local04
230d0     09 23 EA FA | 	rdword	local03, arg01 wz
230d4     00 FA 05 A6 |  if_e	mov	result1, #0
230d8     04 22 66 50 |  if_ne	shl	local03, #4
230dc     11 13 02 51 |  if_ne	add	arg01, local03
230e0     09 FB 01 56 |  if_ne	mov	result1, arg01
230e4     FD 20 02 F6 | 	mov	local02, result1
230e8     12 15 02 F6 | 	mov	arg02, local04
230ec     02 14 06 F1 | 	add	arg02, #2
230f0     0A 15 E2 FA | 	rdword	arg02, arg02
230f4     20 14 CE F7 | 	test	arg02, #32 wz
230f8     10 14 CE A7 |  if_e	test	arg02, #16 wz
230fc     1C 00 90 5D |  if_ne	jmp	#LR__3305
23100     0A 15 42 F8 | 	getnib	arg02, arg02, #0
23104     13 15 0A F2 | 	cmp	arg02, local05 wz
23108     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2310c     0C 00 90 5D |  if_ne	jmp	#LR__3304
23110     12 13 02 F6 | 	mov	arg01, local04
23114     84 FC BF FD | 	call	#__system___gc_dofree
23118     FD 20 02 F6 | 	mov	local02, result1
2311c                 | LR__3304
2311c                 | LR__3305
2311c     00 20 0E F2 | 	cmp	local02, #0 wz
23120     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
23124     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3303
23128                 | LR__3306
23128     A7 F0 03 F6 | 	mov	ptra, fp
2312c     B2 00 A0 FD | 	call	#popregs_
23130                 | __system___gc_docollect_ret
23130     2D 00 64 FD | 	ret
23134                 | 
23134                 | __system___gc_markhub
23134     04 4A 05 F6 | 	mov	COUNT_, #4
23138     A8 00 A0 FD | 	call	#pushregs_
2313c     09 1F 02 F6 | 	mov	local01, arg01
23140     0A 21 02 F6 | 	mov	local02, arg02
23144     80 F8 BF FD | 	call	#__system___gc_ptrs
23148     FD 22 02 F6 | 	mov	local03, result1
2314c     FE 24 02 F6 | 	mov	local04, result2
23150                 | LR__3310
23150     10 1F 52 F2 | 	cmps	local01, local02 wc
23154     60 00 90 3D |  if_ae	jmp	#LR__3311
23158     0F 17 02 FB | 	rdlong	arg03, local01
2315c     04 1E 06 F1 | 	add	local01, #4
23160     12 15 02 F6 | 	mov	arg02, local04
23164     11 13 02 F6 | 	mov	arg01, local03
23168     8C FB BF FD | 	call	#__system___gc_isvalidptr
2316c     FD 16 0A F6 | 	mov	arg03, result1 wz
23170     DC FF 9F AD |  if_e	jmp	#LR__3310
23174     0B 13 02 F6 | 	mov	arg01, arg03
23178     00 FA 05 F6 | 	mov	result1, #0
2317c     02 12 06 F1 | 	add	arg01, #2
23180     09 13 E2 FA | 	rdword	arg01, arg01
23184     36 00 00 FF 
23188     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2318c     01 FA 65 A6 |  if_e	neg	result1, #1
23190     00 FA 0D F2 | 	cmp	result1, #0 wz
23194     B8 FF 9F 5D |  if_ne	jmp	#LR__3310
23198     0B FD 01 F6 | 	mov	result2, arg03
2319c     02 FC 05 F1 | 	add	result2, #2
231a0     FE FC E1 FA | 	rdword	result2, result2
231a4     0F FC 25 F5 | 	andn	result2, #15
231a8     2E FC 45 F5 | 	or	result2, #46
231ac     02 16 06 F1 | 	add	arg03, #2
231b0     0B FD 51 FC | 	wrword	result2, arg03
231b4     98 FF 9F FD | 	jmp	#LR__3310
231b8                 | LR__3311
231b8     A7 F0 03 F6 | 	mov	ptra, fp
231bc     B2 00 A0 FD | 	call	#popregs_
231c0                 | __system___gc_markhub_ret
231c0     2D 00 64 FD | 	ret
231c4                 | 
231c4                 | __system___gc_markcog
231c4     04 4A 05 F6 | 	mov	COUNT_, #4
231c8     A8 00 A0 FD | 	call	#pushregs_
231cc     F8 F7 BF FD | 	call	#__system___gc_ptrs
231d0     FD 1E 02 F6 | 	mov	local01, result1
231d4     FE 20 02 F6 | 	mov	local02, result2
231d8     EF 23 06 F6 | 	mov	local03, #495
231dc                 | LR__3320
231dc                 | 	'.live	local03
231dc     00 22 96 F9 | 	alts	local03, #0
231e0     11 25 02 F6 | 	mov	local04, local03
231e4     0F 13 02 F6 | 	mov	arg01, local01
231e8     10 15 02 F6 | 	mov	arg02, local02
231ec     12 17 02 F6 | 	mov	arg03, local04
231f0     04 FB BF FD | 	call	#__system___gc_isvalidptr
231f4     00 FA 0D F2 | 	cmp	result1, #0 wz
231f8     18 00 90 AD |  if_e	jmp	#LR__3321
231fc     FD 24 02 F6 | 	mov	local04, result1
23200     02 24 06 F1 | 	add	local04, #2
23204     12 25 E2 FA | 	rdword	local04, local04
23208     20 24 46 F5 | 	or	local04, #32
2320c     02 FA 05 F1 | 	add	result1, #2
23210     FD 24 52 FC | 	wrword	local04, result1
23214                 | LR__3321
23214     01 22 86 F1 | 	sub	local03, #1
23218     00 22 56 F2 | 	cmps	local03, #0 wc
2321c     BC FF 9F 3D |  if_ae	jmp	#LR__3320
23220     A7 F0 03 F6 | 	mov	ptra, fp
23224     B2 00 A0 FD | 	call	#popregs_
23228                 | __system___gc_markcog_ret
23228     2D 00 64 FD | 	ret
2322c                 | 
2322c                 | __system__opendir
2322c     06 4A 05 F6 | 	mov	COUNT_, #6
23230     A8 00 A0 FD | 	call	#pushregs_
23234     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23238     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
2323c     09 15 02 F6 | 	mov	arg02, arg01
23240     0F 13 02 F6 | 	mov	arg01, local01
23244     00 16 06 F6 | 	mov	arg03, #0
23248     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2324c     14 C3 BF FD | 	call	#__system____getvfsforfile
23250     FD 20 0A F6 | 	mov	local02, result1 wz
23254     10 00 90 AD |  if_e	jmp	#LR__3330
23258     28 20 06 F1 | 	add	local02, #40
2325c     10 17 0A FB | 	rdlong	arg03, local02 wz
23260     28 20 86 F1 | 	sub	local02, #40
23264     14 00 90 5D |  if_ne	jmp	#LR__3331
23268                 | LR__3330
23268     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2326c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23270     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23274     00 FA 05 F6 | 	mov	result1, #0
23278     90 00 90 FD | 	jmp	#LR__3333
2327c                 | LR__3331
2327c     5C 12 06 F6 | 	mov	arg01, #92
23280     10 14 06 F6 | 	mov	arg02, #16
23284     C0 F9 BF FD | 	call	#__system___gc_doalloc
23288     FD 22 0A F6 | 	mov	local03, result1 wz
2328c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23290     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23294     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23298     00 FA 05 A6 |  if_e	mov	result1, #0
2329c     6C 00 90 AD |  if_e	jmp	#LR__3333
232a0     28 20 06 F1 | 	add	local02, #40
232a4     10 25 02 FB | 	rdlong	local04, local02
232a8     12 27 02 F6 | 	mov	local05, local04
232ac     28 20 86 F1 | 	sub	local02, #40
232b0     13 26 46 F7 | 	zerox	local05, #19
232b4     14 24 46 F0 | 	shr	local04, #20
232b8     02 24 66 F0 | 	shl	local04, #2
232bc     ED 24 02 F1 | 	add	local04, __methods__
232c0     12 25 02 FB | 	rdlong	local04, local04
232c4     11 13 02 F6 | 	mov	arg01, local03
232c8     0F 15 02 F6 | 	mov	arg02, local01
232cc     F2 28 02 F6 | 	mov	local06, objptr
232d0     13 E5 01 F6 | 	mov	objptr, local05
232d4     2D 24 62 FD | 	call	local04
232d8     14 E5 01 F6 | 	mov	objptr, local06
232dc     FD 16 0A F6 | 	mov	arg03, result1 wz
232e0     20 00 90 AD |  if_e	jmp	#LR__3332
232e4     00 16 4E F2 | 	cmps	arg03, #0 wz
232e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
232ec     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
232f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
232f4     11 13 02 F6 | 	mov	arg01, local03
232f8     58 FA BF FD | 	call	#__system___gc_free
232fc     00 FA 05 F6 | 	mov	result1, #0
23300     08 00 90 FD | 	jmp	#LR__3333
23304                 | LR__3332
23304     11 21 62 FC | 	wrlong	local02, local03
23308     11 FB 01 F6 | 	mov	result1, local03
2330c                 | LR__3333
2330c     A7 F0 03 F6 | 	mov	ptra, fp
23310     B2 00 A0 FD | 	call	#popregs_
23314                 | __system__opendir_ret
23314     2D 00 64 FD | 	ret
23318                 | 
23318                 | __system__closedir
23318     04 4A 05 F6 | 	mov	COUNT_, #4
2331c     A8 00 A0 FD | 	call	#pushregs_
23320     09 1F 02 F6 | 	mov	local01, arg01
23324     0F 13 02 FB | 	rdlong	arg01, local01
23328     2C 12 06 F1 | 	add	arg01, #44
2332c     09 21 02 FB | 	rdlong	local02, arg01
23330     10 23 02 F6 | 	mov	local03, local02
23334     13 22 46 F7 | 	zerox	local03, #19
23338     14 20 46 F0 | 	shr	local02, #20
2333c     02 20 66 F0 | 	shl	local02, #2
23340     ED 20 02 F1 | 	add	local02, __methods__
23344     10 21 02 FB | 	rdlong	local02, local02
23348     0F 13 02 F6 | 	mov	arg01, local01
2334c     F2 24 02 F6 | 	mov	local04, objptr
23350     11 E5 01 F6 | 	mov	objptr, local03
23354     2D 20 62 FD | 	call	local02
23358     12 E5 01 F6 | 	mov	objptr, local04
2335c     FD 24 02 F6 | 	mov	local04, result1
23360     0F 13 02 F6 | 	mov	arg01, local01
23364     EC F9 BF FD | 	call	#__system___gc_free
23368     00 24 4E F2 | 	cmps	local04, #0 wz
2336c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23370     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
23374     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23378     01 FA 65 56 |  if_ne	neg	result1, #1
2337c     00 FA 05 A6 |  if_e	mov	result1, #0
23380     A7 F0 03 F6 | 	mov	ptra, fp
23384     B2 00 A0 FD | 	call	#popregs_
23388                 | __system__closedir_ret
23388     2D 00 64 FD | 	ret
2338c                 | 
2338c                 | __system__readdir
2338c     04 4A 05 F6 | 	mov	COUNT_, #4
23390     A8 00 A0 FD | 	call	#pushregs_
23394     09 15 0A FB | 	rdlong	arg02, arg01 wz
23398     08 12 06 F1 | 	add	arg01, #8
2339c     09 1F 02 F6 | 	mov	local01, arg01
233a0     08 12 86 F1 | 	sub	arg01, #8
233a4     00 FA 05 A6 |  if_e	mov	result1, #0
233a8     5C 00 90 AD |  if_e	jmp	#LR__3341
233ac     30 14 06 F1 | 	add	arg02, #48
233b0     0A 21 02 FB | 	rdlong	local02, arg02
233b4     10 23 02 F6 | 	mov	local03, local02
233b8     13 22 46 F7 | 	zerox	local03, #19
233bc     14 20 46 F0 | 	shr	local02, #20
233c0     02 20 66 F0 | 	shl	local02, #2
233c4     ED 20 02 F1 | 	add	local02, __methods__
233c8     10 21 02 FB | 	rdlong	local02, local02
233cc     0F 15 02 F6 | 	mov	arg02, local01
233d0     F2 24 02 F6 | 	mov	local04, objptr
233d4     11 E5 01 F6 | 	mov	objptr, local03
233d8     2D 20 62 FD | 	call	local02
233dc     12 E5 01 F6 | 	mov	objptr, local04
233e0     00 FA 4D F2 | 	cmps	result1, #0 wz
233e4     1C 00 90 AD |  if_e	jmp	#LR__3340
233e8     01 FA 55 F2 | 	cmps	result1, #1 wc
233ec     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
233f0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
233f4     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
233f8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
233fc     00 FA 05 F6 | 	mov	result1, #0
23400     04 00 90 FD | 	jmp	#LR__3341
23404                 | LR__3340
23404     0F FB 01 F6 | 	mov	result1, local01
23408                 | LR__3341
23408     A7 F0 03 F6 | 	mov	ptra, fp
2340c     B2 00 A0 FD | 	call	#popregs_
23410                 | __system__readdir_ret
23410     2D 00 64 FD | 	ret
23414                 | 
23414                 | __system___openraw
23414     15 4A 05 F6 | 	mov	COUNT_, #21
23418     A8 00 A0 FD | 	call	#pushregs_
2341c     09 1F 02 F6 | 	mov	local01, arg01
23420     0A 21 02 F6 | 	mov	local02, arg02
23424     0B 23 02 F6 | 	mov	local03, arg03
23428     0C 25 02 F6 | 	mov	local04, arg04
2342c     04 26 06 F6 | 	mov	local05, #4
23430     0F 29 02 F6 | 	mov	local06, local01
23434     00 2A 06 F6 | 	mov	local07, #0
23438     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2343c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
23440     16 13 02 F6 | 	mov	arg01, local08
23444     10 15 02 F6 | 	mov	arg02, local02
23448     00 16 06 F6 | 	mov	arg03, #0
2344c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23450     10 C1 BF FD | 	call	#__system____getvfsforfile
23454     FD 2E 0A F6 | 	mov	local09, result1 wz
23458     10 00 90 AD |  if_e	jmp	#LR__3350
2345c     20 2E 06 F1 | 	add	local09, #32
23460     17 FB 09 FB | 	rdlong	result1, local09 wz
23464     20 2E 86 F1 | 	sub	local09, #32
23468     14 00 90 5D |  if_ne	jmp	#LR__3351
2346c                 | LR__3350
2346c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23470     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23474     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23478     01 FA 65 F6 | 	neg	result1, #1
2347c     8C 02 90 FD | 	jmp	#LR__3364
23480                 | LR__3351
23480     14 13 02 F6 | 	mov	arg01, local06
23484     00 14 06 F6 | 	mov	arg02, #0
23488     34 16 06 F6 | 	mov	arg03, #52
2348c     09 31 02 F6 | 	mov	local10, arg01
23490     98 00 A0 FD | 	call	#\builtin_bytefill_
23494     20 2E 06 F1 | 	add	local09, #32
23498     17 33 02 FB | 	rdlong	local11, local09
2349c     19 35 02 F6 | 	mov	local12, local11
234a0     19 37 02 F6 | 	mov	local13, local11
234a4     20 2E 86 F1 | 	sub	local09, #32
234a8     1B 39 02 F6 | 	mov	local14, local13
234ac     13 34 46 F7 | 	zerox	local12, #19
234b0     14 38 46 F0 | 	shr	local14, #20
234b4     02 38 66 F0 | 	shl	local14, #2
234b8     ED 38 02 F1 | 	add	local14, __methods__
234bc     1C 39 02 FB | 	rdlong	local14, local14
234c0     14 3B 02 F6 | 	mov	local15, local06
234c4     16 3D 02 F6 | 	mov	local16, local08
234c8     11 3F 02 F6 | 	mov	local17, local03
234cc     1D 13 02 F6 | 	mov	arg01, local15
234d0     1E 15 02 F6 | 	mov	arg02, local16
234d4     1F 17 02 F6 | 	mov	arg03, local17
234d8     F2 40 02 F6 | 	mov	local18, objptr
234dc     1A E5 01 F6 | 	mov	objptr, local12
234e0     2D 38 62 FD | 	call	local14
234e4     20 E5 01 F6 | 	mov	objptr, local18
234e8     FD 42 0A F6 | 	mov	local19, result1 wz
234ec     04 22 CE 57 |  if_ne	test	local03, #4 wz
234f0     58 00 90 AD |  if_e	jmp	#LR__3352
234f4     24 2E 06 F1 | 	add	local09, #36
234f8     17 33 02 FB | 	rdlong	local11, local09
234fc     19 35 02 F6 | 	mov	local12, local11
23500     19 37 02 F6 | 	mov	local13, local11
23504     24 2E 86 F1 | 	sub	local09, #36
23508     1B 39 02 F6 | 	mov	local14, local13
2350c     13 34 46 F7 | 	zerox	local12, #19
23510     14 38 46 F0 | 	shr	local14, #20
23514     02 38 66 F0 | 	shl	local14, #2
23518     ED 38 02 F1 | 	add	local14, __methods__
2351c     1C 39 02 FB | 	rdlong	local14, local14
23520     14 3B 02 F6 | 	mov	local15, local06
23524     16 3D 02 F6 | 	mov	local16, local08
23528     12 3F 02 F6 | 	mov	local17, local04
2352c     1D 13 02 F6 | 	mov	arg01, local15
23530     1E 15 02 F6 | 	mov	arg02, local16
23534     1F 17 02 F6 | 	mov	arg03, local17
23538     F2 40 02 F6 | 	mov	local18, objptr
2353c     1A E5 01 F6 | 	mov	objptr, local12
23540     2D 38 62 FD | 	call	local14
23544     20 E5 01 F6 | 	mov	objptr, local18
23548     FD 42 02 F6 | 	mov	local19, result1
2354c                 | LR__3352
2354c     00 42 0E F2 | 	cmp	local19, #0 wz
23550     8C 01 90 5D |  if_ne	jmp	#LR__3362
23554     11 45 02 F6 | 	mov	local20, local03
23558     03 44 0E F5 | 	and	local20, #3 wz
2355c     02 26 46 55 |  if_ne	or	local05, #2
23560     01 44 0E F2 | 	cmp	local20, #1 wz
23564     01 26 46 55 |  if_ne	or	local05, #1
23568     20 22 CE F7 | 	test	local03, #32 wz
2356c     C0 26 46 55 |  if_ne	or	local05, #192
23570     08 28 06 F1 | 	add	local06, #8
23574     14 27 62 FC | 	wrlong	local05, local06
23578     0C 28 06 F1 | 	add	local06, #12
2357c     14 47 0A FB | 	rdlong	local21, local06 wz
23580     14 28 86 F1 | 	sub	local06, #20
23584     18 00 90 5D |  if_ne	jmp	#LR__3353
23588     04 2E 06 F1 | 	add	local09, #4
2358c     17 47 02 FB | 	rdlong	local21, local09
23590     04 2E 86 F1 | 	sub	local09, #4
23594     14 28 06 F1 | 	add	local06, #20
23598     14 47 62 FC | 	wrlong	local21, local06
2359c     14 28 86 F1 | 	sub	local06, #20
235a0                 | LR__3353
235a0     18 28 06 F1 | 	add	local06, #24
235a4     14 47 0A FB | 	rdlong	local21, local06 wz
235a8     18 28 86 F1 | 	sub	local06, #24
235ac     18 00 90 5D |  if_ne	jmp	#LR__3354
235b0     08 2E 06 F1 | 	add	local09, #8
235b4     17 47 02 FB | 	rdlong	local21, local09
235b8     08 2E 86 F1 | 	sub	local09, #8
235bc     18 28 06 F1 | 	add	local06, #24
235c0     14 47 62 FC | 	wrlong	local21, local06
235c4     18 28 86 F1 | 	sub	local06, #24
235c8                 | LR__3354
235c8     24 28 06 F1 | 	add	local06, #36
235cc     14 47 0A FB | 	rdlong	local21, local06 wz
235d0     24 28 86 F1 | 	sub	local06, #36
235d4     17 47 02 AB |  if_e	rdlong	local21, local09
235d8     24 28 06 A1 |  if_e	add	local06, #36
235dc     14 47 62 AC |  if_e	wrlong	local21, local06
235e0     24 28 86 A1 |  if_e	sub	local06, #36
235e4     28 28 06 F1 | 	add	local06, #40
235e8     14 47 0A FB | 	rdlong	local21, local06 wz
235ec     28 28 86 F1 | 	sub	local06, #40
235f0     18 00 90 5D |  if_ne	jmp	#LR__3355
235f4     10 2E 06 F1 | 	add	local09, #16
235f8     17 47 02 FB | 	rdlong	local21, local09
235fc     10 2E 86 F1 | 	sub	local09, #16
23600     28 28 06 F1 | 	add	local06, #40
23604     14 47 62 FC | 	wrlong	local21, local06
23608     28 28 86 F1 | 	sub	local06, #40
2360c                 | LR__3355
2360c     30 28 06 F1 | 	add	local06, #48
23610     14 47 0A FB | 	rdlong	local21, local06 wz
23614     30 28 86 F1 | 	sub	local06, #48
23618     18 00 90 5D |  if_ne	jmp	#LR__3356
2361c     0C 2E 06 F1 | 	add	local09, #12
23620     17 47 02 FB | 	rdlong	local21, local09
23624     0C 2E 86 F1 | 	sub	local09, #12
23628     30 28 06 F1 | 	add	local06, #48
2362c     14 47 62 FC | 	wrlong	local21, local06
23630     30 28 86 F1 | 	sub	local06, #48
23634                 | LR__3356
23634     1C 28 06 F1 | 	add	local06, #28
23638     14 47 0A FB | 	rdlong	local21, local06 wz
2363c     1C 28 86 F1 | 	sub	local06, #28
23640     1C 00 90 5D |  if_ne	jmp	#LR__3357
23644     01 2A 06 F6 | 	mov	local07, #1
23648     F2 12 02 F6 | 	mov	arg01, objptr
2364c     00 78 04 FF 
23650     00 12 46 F5 | 	or	arg01, ##149946368
23654     1C 28 06 F1 | 	add	local06, #28
23658     14 13 62 FC | 	wrlong	arg01, local06
2365c     1C 28 86 F1 | 	sub	local06, #28
23660                 | LR__3357
23660     20 28 06 F1 | 	add	local06, #32
23664     14 47 0A FB | 	rdlong	local21, local06 wz
23668     20 28 86 F1 | 	sub	local06, #32
2366c     1C 00 90 5D |  if_ne	jmp	#LR__3358
23670     01 2A 06 F6 | 	mov	local07, #1
23674     F2 12 02 F6 | 	mov	arg01, objptr
23678     00 80 04 FF 
2367c     00 12 46 F5 | 	or	arg01, ##150994944
23680     20 28 06 F1 | 	add	local06, #32
23684     14 13 62 FC | 	wrlong	arg01, local06
23688     20 28 86 F1 | 	sub	local06, #32
2368c                 | LR__3358
2368c     2C 28 06 F1 | 	add	local06, #44
23690     14 47 0A FB | 	rdlong	local21, local06 wz
23694     2C 28 86 F1 | 	sub	local06, #44
23698     44 00 90 5D |  if_ne	jmp	#LR__3361
2369c     14 2E 06 F1 | 	add	local09, #20
236a0     17 47 0A FB | 	rdlong	local21, local09 wz
236a4     14 2E 86 F1 | 	sub	local09, #20
236a8     18 00 90 AD |  if_e	jmp	#LR__3359
236ac     14 2E 06 F1 | 	add	local09, #20
236b0     17 47 02 FB | 	rdlong	local21, local09
236b4     2C 28 06 F1 | 	add	local06, #44
236b8     14 47 62 FC | 	wrlong	local21, local06
236bc     2C 28 86 F1 | 	sub	local06, #44
236c0     1C 00 90 FD | 	jmp	#LR__3360
236c4                 | LR__3359
236c4     01 2A 06 F6 | 	mov	local07, #1
236c8     F2 12 02 F6 | 	mov	arg01, objptr
236cc     00 88 04 FF 
236d0     00 12 46 F5 | 	or	arg01, ##152043520
236d4     2C 28 06 F1 | 	add	local06, #44
236d8     14 13 62 FC | 	wrlong	arg01, local06
236dc     2C 28 86 F1 | 	sub	local06, #44
236e0                 | LR__3360
236e0                 | LR__3361
236e0                 | LR__3362
236e0     00 2A 0E F2 | 	cmp	local07, #0 wz
236e4     14 13 02 56 |  if_ne	mov	arg01, local06
236e8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
236ec     00 42 0E F2 | 	cmp	local19, #0 wz
236f0     00 12 06 A6 |  if_e	mov	arg01, #0
236f4     10 00 90 5D |  if_ne	jmp	#LR__3363
236f8     00 12 4E F2 | 	cmps	arg01, #0 wz
236fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23700     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23704     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23708                 | LR__3363
23708     21 FB 01 F6 | 	mov	result1, local19
2370c                 | LR__3364
2370c     A7 F0 03 F6 | 	mov	ptra, fp
23710     B2 00 A0 FD | 	call	#popregs_
23714                 | __system___openraw_ret
23714     2D 00 64 FD | 	ret
23718                 | 
23718                 | __system___closeraw
23718     05 4A 05 F6 | 	mov	COUNT_, #5
2371c     A8 00 A0 FD | 	call	#pushregs_
23720     09 1F 02 F6 | 	mov	local01, arg01
23724     00 20 06 F6 | 	mov	local02, #0
23728     08 1E 06 F1 | 	add	local01, #8
2372c     0F FB 09 FB | 	rdlong	result1, local01 wz
23730     08 1E 86 F1 | 	sub	local01, #8
23734     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23738     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2373c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23740     01 FA 65 A6 |  if_e	neg	result1, #1
23744     A8 00 90 AD |  if_e	jmp	#LR__3372
23748     2C 1E 06 F1 | 	add	local01, #44
2374c     0F FB 09 FB | 	rdlong	result1, local01 wz
23750     2C 1E 86 F1 | 	sub	local01, #44
23754     38 00 90 AD |  if_e	jmp	#LR__3370
23758     2C 1E 06 F1 | 	add	local01, #44
2375c     0F 23 02 FB | 	rdlong	local03, local01
23760     11 25 02 F6 | 	mov	local04, local03
23764     2C 1E 86 F1 | 	sub	local01, #44
23768     13 24 46 F7 | 	zerox	local04, #19
2376c     14 22 46 F0 | 	shr	local03, #20
23770     02 22 66 F0 | 	shl	local03, #2
23774     ED 22 02 F1 | 	add	local03, __methods__
23778     11 23 02 FB | 	rdlong	local03, local03
2377c     0F 13 02 F6 | 	mov	arg01, local01
23780     F2 26 02 F6 | 	mov	local05, objptr
23784     12 E5 01 F6 | 	mov	objptr, local04
23788     2D 22 62 FD | 	call	local03
2378c     13 E5 01 F6 | 	mov	objptr, local05
23790                 | LR__3370
23790     24 1E 06 F1 | 	add	local01, #36
23794     0F 27 0A FB | 	rdlong	local05, local01 wz
23798     24 1E 86 F1 | 	sub	local01, #36
2379c     3C 00 90 AD |  if_e	jmp	#LR__3371
237a0     24 1E 06 F1 | 	add	local01, #36
237a4     0F 23 02 FB | 	rdlong	local03, local01
237a8     11 25 02 F6 | 	mov	local04, local03
237ac     24 1E 86 F1 | 	sub	local01, #36
237b0     13 24 46 F7 | 	zerox	local04, #19
237b4     14 22 46 F0 | 	shr	local03, #20
237b8     02 22 66 F0 | 	shl	local03, #2
237bc     ED 22 02 F1 | 	add	local03, __methods__
237c0     11 23 02 FB | 	rdlong	local03, local03
237c4     0F 13 02 F6 | 	mov	arg01, local01
237c8     F2 26 02 F6 | 	mov	local05, objptr
237cc     12 E5 01 F6 | 	mov	objptr, local04
237d0     2D 22 62 FD | 	call	local03
237d4     13 E5 01 F6 | 	mov	objptr, local05
237d8     FD 20 02 F6 | 	mov	local02, result1
237dc                 | LR__3371
237dc     0F 13 02 F6 | 	mov	arg01, local01
237e0     00 14 06 F6 | 	mov	arg02, #0
237e4     34 16 06 F6 | 	mov	arg03, #52
237e8     98 00 A0 FD | 	call	#\builtin_bytefill_
237ec     10 FB 01 F6 | 	mov	result1, local02
237f0                 | LR__3372
237f0     A7 F0 03 F6 | 	mov	ptra, fp
237f4     B2 00 A0 FD | 	call	#popregs_
237f8                 | __system___closeraw_ret
237f8     2D 00 64 FD | 	ret
237fc                 | 
237fc                 | __system___vfs_open_sdcardx
237fc     0B 4A 05 F6 | 	mov	COUNT_, #11
23800     A8 00 A0 FD | 	call	#pushregs_
23804     09 23 02 F6 | 	mov	local03, arg01
23808     0A 25 02 F6 | 	mov	local04, arg02
2380c     0B 27 02 F6 | 	mov	local05, arg03
23810     0C 29 02 F6 | 	mov	local06, arg04
23814     01 00 00 FF 
23818     24 12 06 F6 | 	mov	arg01, ##548
2381c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
23820     FD 2A 02 F6 | 	mov	local07, result1
23824     01 00 00 FF 
23828     34 12 06 F6 | 	mov	arg01, ##564
2382c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
23830     FD 2C 02 F6 | 	mov	local08, result1
23834     11 19 02 F6 | 	mov	arg04, local03
23838     1F 18 C6 F0 | 	sar	arg04, #31
2383c     11 17 02 F6 | 	mov	arg03, local03
23840     01 12 06 F6 | 	mov	arg01, #1
23844     00 14 06 F6 | 	mov	arg02, #0
23848     10 DC BF FD | 	call	#__system___int64_shl
2384c     FD 1E 02 F6 | 	mov	local01, result1
23850     FE 2E 02 F6 | 	mov	local09, result2
23854     12 19 02 F6 | 	mov	arg04, local04
23858     1F 18 C6 F0 | 	sar	arg04, #31
2385c     12 17 02 F6 | 	mov	arg03, local04
23860     01 12 06 F6 | 	mov	arg01, #1
23864     00 14 06 F6 | 	mov	arg02, #0
23868     F0 DB BF FD | 	call	#__system___int64_shl
2386c     FD 1E 42 F5 | 	or	local01, result1
23870     FE 2E 42 F5 | 	or	local09, result2
23874     13 19 02 F6 | 	mov	arg04, local05
23878     1F 18 C6 F0 | 	sar	arg04, #31
2387c     13 17 02 F6 | 	mov	arg03, local05
23880     01 12 06 F6 | 	mov	arg01, #1
23884     00 14 06 F6 | 	mov	arg02, #0
23888     D0 DB BF FD | 	call	#__system___int64_shl
2388c     FD 1E 42 F5 | 	or	local01, result1
23890     FE 2E 42 F5 | 	or	local09, result2
23894     14 19 02 F6 | 	mov	arg04, local06
23898     1F 18 C6 F0 | 	sar	arg04, #31
2389c     14 17 02 F6 | 	mov	arg03, local06
238a0     01 12 06 F6 | 	mov	arg01, #1
238a4     00 14 06 F6 | 	mov	arg02, #0
238a8     B0 DB BF FD | 	call	#__system___int64_shl
238ac     17 15 02 F6 | 	mov	arg02, local09
238b0     FD 1E 42 F5 | 	or	local01, result1
238b4     0A FD 41 F5 | 	or	result2, arg02
238b8     FE 20 02 F6 | 	mov	local02, result2
238bc     0F 13 02 F6 | 	mov	arg01, local01
238c0     10 15 02 F6 | 	mov	arg02, local02
238c4     CC DB BF FD | 	call	#__system___usepins
238c8     00 FA 0D F2 | 	cmp	result1, #0 wz
238cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
238d0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
238d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
238d8     00 FA 05 A6 |  if_e	mov	result1, #0
238dc     B4 00 90 AD |  if_e	jmp	#LR__3382
238e0     0F 31 02 F6 | 	mov	local10, local01
238e4     10 2F 02 F6 | 	mov	local09, local02
238e8     01 00 00 FF 
238ec     08 2A 06 F1 | 	add	local07, ##520
238f0     15 31 62 FC | 	wrlong	local10, local07
238f4     04 2A 06 F1 | 	add	local07, #4
238f8     15 2F 62 FC | 	wrlong	local09, local07
238fc     01 00 00 FF 
23900     0C 2A 86 F1 | 	sub	local07, ##524
23904     14 1B 02 F6 | 	mov	arg05, local06
23908     00 12 06 F6 | 	mov	arg01, #0
2390c     11 15 02 F6 | 	mov	arg02, local03
23910     12 17 02 F6 | 	mov	arg03, local04
23914     13 19 02 F6 | 	mov	arg04, local05
23918     F2 30 02 F6 | 	mov	local10, objptr
2391c     15 E5 01 F6 | 	mov	objptr, local07
23920     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
23924     18 E5 01 F6 | 	mov	objptr, local10
23928     FD 32 0A F6 | 	mov	local11, result1 wz
2392c     24 00 90 5D |  if_ne	jmp	#LR__3380
23930     71 01 00 FF 
23934     EA 15 06 F6 | 	mov	arg02, ##@LR__4777
23938     16 13 02 F6 | 	mov	arg01, local08
2393c     00 16 06 F6 | 	mov	arg03, #0
23940     F2 32 02 F6 | 	mov	local11, objptr
23944     15 E5 01 F6 | 	mov	objptr, local07
23948     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
2394c     19 E5 01 F6 | 	mov	objptr, local11
23950     FD 32 02 F6 | 	mov	local11, result1
23954                 | LR__3380
23954     00 32 0E F2 | 	cmp	local11, #0 wz
23958     24 00 90 AD |  if_e	jmp	#LR__3381
2395c     0F 13 02 F6 | 	mov	arg01, local01
23960     10 15 02 F6 | 	mov	arg02, local02
23964     80 DB BF FD | 	call	#__system___freepins
23968     19 13 6A F6 | 	neg	arg01, local11 wz
2396c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23970     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23974     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23978     00 FA 05 F6 | 	mov	result1, #0
2397c     14 00 90 FD | 	jmp	#LR__3382
23980                 | LR__3381
23980     15 13 02 F6 | 	mov	arg01, local07
23984     F2 32 02 F6 | 	mov	local11, objptr
23988     15 E5 01 F6 | 	mov	objptr, local07
2398c     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
23990     19 E5 01 F6 | 	mov	objptr, local11
23994                 | LR__3382
23994     A7 F0 03 F6 | 	mov	ptra, fp
23998     B2 00 A0 FD | 	call	#popregs_
2399c                 | __system___vfs_open_sdcardx_ret
2399c     2D 00 64 FD | 	ret
239a0                 | 
239a0                 | __system____default_getc
239a0     03 4A 05 F6 | 	mov	COUNT_, #3
239a4     A8 00 A0 FD | 	call	#pushregs_
239a8     09 1F 02 F6 | 	mov	local01, arg01
239ac     0F 21 02 FB | 	rdlong	local02, local01
239b0     08 20 06 F1 | 	add	local02, #8
239b4     10 23 02 FB | 	rdlong	local03, local02
239b8     02 22 CE F7 | 	test	local03, #2 wz
239bc     0F 13 02 56 |  if_ne	mov	arg01, local01
239c0     00 01 B0 5D |  if_ne	call	#__system____default_flush
239c4     10 23 02 FB | 	rdlong	local03, local02
239c8     01 22 46 F5 | 	or	local03, #1
239cc     10 23 62 FC | 	wrlong	local03, local02
239d0     08 20 86 F1 | 	sub	local02, #8
239d4     10 23 0A FB | 	rdlong	local03, local02 wz
239d8     0C 00 90 5D |  if_ne	jmp	#LR__3390
239dc     0F 13 02 F6 | 	mov	arg01, local01
239e0     64 16 B0 FD | 	call	#__system____default_filbuf
239e4     FD 22 02 F6 | 	mov	local03, result1
239e8                 | LR__3390
239e8     01 22 56 F2 | 	cmps	local03, #1 wc
239ec     01 FA 65 C6 |  if_b	neg	result1, #1
239f0     1C 00 90 CD |  if_b	jmp	#LR__3391
239f4     01 22 86 F1 | 	sub	local03, #1
239f8     10 23 62 FC | 	wrlong	local03, local02
239fc     04 20 06 F1 | 	add	local02, #4
23a00     10 23 02 FB | 	rdlong	local03, local02
23a04     11 FB C1 FA | 	rdbyte	result1, local03
23a08     01 22 06 F1 | 	add	local03, #1
23a0c     10 23 62 FC | 	wrlong	local03, local02
23a10                 | LR__3391
23a10     A7 F0 03 F6 | 	mov	ptra, fp
23a14     B2 00 A0 FD | 	call	#popregs_
23a18                 | __system____default_getc_ret
23a18     2D 00 64 FD | 	ret
23a1c                 | 
23a1c                 | __system____default_putc
23a1c     06 4A 05 F6 | 	mov	COUNT_, #6
23a20     A8 00 A0 FD | 	call	#pushregs_
23a24     09 1F 02 F6 | 	mov	local01, arg01
23a28     0A 21 02 F6 | 	mov	local02, arg02
23a2c     10 23 02 FB | 	rdlong	local03, local02
23a30     08 22 06 F1 | 	add	local03, #8
23a34     11 FB 01 FB | 	rdlong	result1, local03
23a38     01 FA CD F7 | 	test	result1, #1 wz
23a3c     10 13 02 56 |  if_ne	mov	arg01, local02
23a40     80 00 B0 5D |  if_ne	call	#__system____default_flush
23a44     11 25 02 FB | 	rdlong	local04, local03
23a48     02 24 46 F5 | 	or	local04, #2
23a4c     11 25 62 FC | 	wrlong	local04, local03
23a50     08 22 86 F1 | 	sub	local03, #8
23a54     11 27 02 FB | 	rdlong	local05, local03
23a58     10 22 06 F1 | 	add	local03, #16
23a5c     11 15 02 FB | 	rdlong	arg02, local03
23a60     10 22 86 F1 | 	sub	local03, #16
23a64     13 FB 01 F6 | 	mov	result1, local05
23a68     0A FB 01 F1 | 	add	result1, arg02
23a6c     FD 1E 42 FC | 	wrbyte	local01, result1
23a70     0F 1F E2 F8 | 	getbyte	local01, local01, #0
23a74     01 26 06 F1 | 	add	local05, #1
23a78     11 27 62 FC | 	wrlong	local05, local03
23a7c     06 20 06 F1 | 	add	local02, #6
23a80     10 29 EA FA | 	rdword	local06, local02 wz
23a84     06 20 86 F1 | 	sub	local02, #6
23a88     0C 22 06 51 |  if_ne	add	local03, #12
23a8c     11 25 02 5B |  if_ne	rdlong	local04, local03
23a90     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
23a94     0C 00 90 AD |  if_e	jmp	#LR__3400
23a98     0A 1E 0E F2 | 	cmp	local01, #10 wz
23a9c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
23aa0     10 00 90 5D |  if_ne	jmp	#LR__3401
23aa4                 | LR__3400
23aa4     10 13 02 F6 | 	mov	arg01, local02
23aa8     18 00 B0 FD | 	call	#__system____default_flush
23aac     00 FA 0D F2 | 	cmp	result1, #0 wz
23ab0     01 1E 66 56 |  if_ne	neg	local01, #1
23ab4                 | LR__3401
23ab4     0F FB 01 F6 | 	mov	result1, local01
23ab8     A7 F0 03 F6 | 	mov	ptra, fp
23abc     B2 00 A0 FD | 	call	#popregs_
23ac0                 | __system____default_putc_ret
23ac0     2D 00 64 FD | 	ret
23ac4                 | 
23ac4                 | __system____default_flush
23ac4     06 4A 05 F6 | 	mov	COUNT_, #6
23ac8     A8 00 A0 FD | 	call	#pushregs_
23acc     09 1F 02 F6 | 	mov	local01, arg01
23ad0     0F 21 02 FB | 	rdlong	local02, local01
23ad4     10 23 02 FB | 	rdlong	local03, local02
23ad8     08 20 06 F1 | 	add	local02, #8
23adc     10 FB 01 FB | 	rdlong	result1, local02
23ae0     08 20 86 F1 | 	sub	local02, #8
23ae4     02 FA CD F7 | 	test	result1, #2 wz
23ae8     D0 00 90 AD |  if_e	jmp	#LR__3412
23aec     01 22 56 F2 | 	cmps	local03, #1 wc
23af0     20 01 90 CD |  if_b	jmp	#LR__3414
23af4     08 1E 06 F1 | 	add	local01, #8
23af8     0F FB 01 FB | 	rdlong	result1, local01
23afc     08 1E 86 F1 | 	sub	local01, #8
23b00     40 FA CD F7 | 	test	result1, #64 wz
23b04     68 00 90 AD |  if_e	jmp	#LR__3411
23b08     08 1E 06 F1 | 	add	local01, #8
23b0c     0F 17 02 FB | 	rdlong	arg03, local01
23b10     08 1E 86 F1 | 	sub	local01, #8
23b14     80 16 CE F7 | 	test	arg03, #128 wz
23b18     54 00 90 AD |  if_e	jmp	#LR__3410
23b1c     30 1E 06 F1 | 	add	local01, #48
23b20     0F 25 02 FB | 	rdlong	local04, local01
23b24     12 27 02 F6 | 	mov	local05, local04
23b28     30 1E 86 F1 | 	sub	local01, #48
23b2c     13 26 46 F7 | 	zerox	local05, #19
23b30     14 24 46 F0 | 	shr	local04, #20
23b34     02 24 66 F0 | 	shl	local04, #2
23b38     ED 24 02 F1 | 	add	local04, __methods__
23b3c     12 25 02 FB | 	rdlong	local04, local04
23b40     0F 13 02 F6 | 	mov	arg01, local01
23b44     00 14 06 F6 | 	mov	arg02, #0
23b48     02 16 06 F6 | 	mov	arg03, #2
23b4c     F2 28 02 F6 | 	mov	local06, objptr
23b50     13 E5 01 F6 | 	mov	objptr, local05
23b54     2D 24 62 FD | 	call	local04
23b58     14 E5 01 F6 | 	mov	objptr, local06
23b5c     08 1E 06 F1 | 	add	local01, #8
23b60     0F 29 02 FB | 	rdlong	local06, local01
23b64     80 28 26 F5 | 	andn	local06, #128
23b68     0F 29 62 FC | 	wrlong	local06, local01
23b6c     08 1E 86 F1 | 	sub	local01, #8
23b70                 | LR__3410
23b70                 | LR__3411
23b70     18 1E 06 F1 | 	add	local01, #24
23b74     0F 25 02 FB | 	rdlong	local04, local01
23b78     12 27 02 F6 | 	mov	local05, local04
23b7c     18 1E 86 F1 | 	sub	local01, #24
23b80     13 26 46 F7 | 	zerox	local05, #19
23b84     14 24 46 F0 | 	shr	local04, #20
23b88     02 24 66 F0 | 	shl	local04, #2
23b8c     ED 24 02 F1 | 	add	local04, __methods__
23b90     12 25 02 FB | 	rdlong	local04, local04
23b94     10 20 06 F1 | 	add	local02, #16
23b98     10 15 02 FB | 	rdlong	arg02, local02
23b9c     10 20 86 F1 | 	sub	local02, #16
23ba0     0F 13 02 F6 | 	mov	arg01, local01
23ba4     11 17 02 F6 | 	mov	arg03, local03
23ba8     F2 28 02 F6 | 	mov	local06, objptr
23bac     13 E5 01 F6 | 	mov	objptr, local05
23bb0     2D 24 62 FD | 	call	local04
23bb4     14 E5 01 F6 | 	mov	objptr, local06
23bb8     58 00 90 FD | 	jmp	#LR__3414
23bbc                 | LR__3412
23bbc     08 20 06 F1 | 	add	local02, #8
23bc0     10 29 02 FB | 	rdlong	local06, local02
23bc4     08 20 86 F1 | 	sub	local02, #8
23bc8     01 28 CE F7 | 	test	local06, #1 wz
23bcc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
23bd0     40 00 90 AD |  if_e	jmp	#LR__3413
23bd4     30 1E 06 F1 | 	add	local01, #48
23bd8     0F 25 02 FB | 	rdlong	local04, local01
23bdc     12 27 02 F6 | 	mov	local05, local04
23be0     30 1E 86 F1 | 	sub	local01, #48
23be4     13 26 46 F7 | 	zerox	local05, #19
23be8     14 24 46 F0 | 	shr	local04, #20
23bec     02 24 66 F0 | 	shl	local04, #2
23bf0     ED 24 02 F1 | 	add	local04, __methods__
23bf4     12 25 02 FB | 	rdlong	local04, local04
23bf8     0F 13 02 F6 | 	mov	arg01, local01
23bfc     11 15 62 F6 | 	neg	arg02, local03
23c00     01 16 06 F6 | 	mov	arg03, #1
23c04     F2 28 02 F6 | 	mov	local06, objptr
23c08     13 E5 01 F6 | 	mov	objptr, local05
23c0c     2D 24 62 FD | 	call	local04
23c10     14 E5 01 F6 | 	mov	objptr, local06
23c14                 | LR__3413
23c14                 | LR__3414
23c14     10 01 68 FC | 	wrlong	#0, local02
23c18     04 20 06 F1 | 	add	local02, #4
23c1c     10 01 68 FC | 	wrlong	#0, local02
23c20     04 20 06 F1 | 	add	local02, #4
23c24     10 01 68 FC | 	wrlong	#0, local02
23c28     00 FA 05 F6 | 	mov	result1, #0
23c2c     A7 F0 03 F6 | 	mov	ptra, fp
23c30     B2 00 A0 FD | 	call	#popregs_
23c34                 | __system____default_flush_ret
23c34     2D 00 64 FD | 	ret
23c38                 | 
23c38                 | __system____default_buffer_init
23c38     02 4A 05 F6 | 	mov	COUNT_, #2
23c3c     A8 00 A0 FD | 	call	#pushregs_
23c40     09 1F 02 F6 | 	mov	local01, arg01
23c44     0F 21 02 FB | 	rdlong	local02, local01
23c48     0F 13 02 F6 | 	mov	arg01, local01
23c4c     F8 02 B0 FD | 	call	#__system___isatty
23c50     00 FA 0D F2 | 	cmp	result1, #0 wz
23c54     06 1E 06 51 |  if_ne	add	local01, #6
23c58     0F 0B 58 5C |  if_ne	wrword	#5, local01
23c5c     06 1E 06 A1 |  if_e	add	local01, #6
23c60     0F 0D 58 AC |  if_e	wrword	#6, local01
23c64     14 20 06 F1 | 	add	local02, #20
23c68     10 1F 02 F6 | 	mov	local01, local02
23c6c     04 20 86 F1 | 	sub	local02, #4
23c70     10 1F 62 FC | 	wrlong	local01, local02
23c74     04 20 86 F1 | 	sub	local02, #4
23c78     02 00 80 FF 
23c7c     10 01 68 FC | 	wrlong	##1024, local02
23c80     00 FA 05 F6 | 	mov	result1, #0
23c84     A7 F0 03 F6 | 	mov	ptra, fp
23c88     B2 00 A0 FD | 	call	#popregs_
23c8c                 | __system____default_buffer_init_ret
23c8c     2D 00 64 FD | 	ret
23c90                 | 
23c90                 | __system__stat
23c90     04 4A 05 F6 | 	mov	COUNT_, #4
23c94     A8 00 A0 FD | 	call	#pushregs_
23c98     0A 1F 02 F6 | 	mov	local01, arg02
23c9c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23ca0     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
23ca4     09 15 02 F6 | 	mov	arg02, arg01
23ca8     10 13 02 F6 | 	mov	arg01, local02
23cac     00 16 06 F6 | 	mov	arg03, #0
23cb0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23cb4     AC B8 BF FD | 	call	#__system____getvfsforfile
23cb8     FD 22 0A F6 | 	mov	local03, result1 wz
23cbc     10 00 90 AD |  if_e	jmp	#LR__3420
23cc0     34 22 06 F1 | 	add	local03, #52
23cc4     11 17 0A FB | 	rdlong	arg03, local03 wz
23cc8     34 22 86 F1 | 	sub	local03, #52
23ccc     14 00 90 5D |  if_ne	jmp	#LR__3421
23cd0                 | LR__3420
23cd0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23cd4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23cd8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23cdc     01 FA 65 F6 | 	neg	result1, #1
23ce0     68 00 90 FD | 	jmp	#LR__3422
23ce4                 | LR__3421
23ce4     0F 13 02 F6 | 	mov	arg01, local01
23ce8     00 14 06 F6 | 	mov	arg02, #0
23cec     30 16 06 F6 | 	mov	arg03, #48
23cf0     09 25 02 F6 | 	mov	local04, arg01
23cf4     98 00 A0 FD | 	call	#\builtin_bytefill_
23cf8     12 FB 01 F6 | 	mov	result1, local04
23cfc     10 13 CA FA | 	rdbyte	arg01, local02 wz
23d00     08 1E 06 A1 |  if_e	add	local01, #8
23d04     08 00 80 AF 
23d08     0F FF 6B AC |  if_e	wrlong	##4607, local01
23d0c     00 FA 05 A6 |  if_e	mov	result1, #0
23d10     38 00 90 AD |  if_e	jmp	#LR__3422
23d14     34 22 06 F1 | 	add	local03, #52
23d18     11 23 02 FB | 	rdlong	local03, local03
23d1c     11 25 02 F6 | 	mov	local04, local03
23d20     13 22 46 F7 | 	zerox	local03, #19
23d24     14 24 46 F0 | 	shr	local04, #20
23d28     02 24 66 F0 | 	shl	local04, #2
23d2c     ED 24 02 F1 | 	add	local04, __methods__
23d30     12 25 02 FB | 	rdlong	local04, local04
23d34     10 13 02 F6 | 	mov	arg01, local02
23d38     0F 15 02 F6 | 	mov	arg02, local01
23d3c     F2 20 02 F6 | 	mov	local02, objptr
23d40     11 E5 01 F6 | 	mov	objptr, local03
23d44     2D 24 62 FD | 	call	local04
23d48     10 E5 01 F6 | 	mov	objptr, local02
23d4c                 | LR__3422
23d4c     A7 F0 03 F6 | 	mov	ptra, fp
23d50     B2 00 A0 FD | 	call	#popregs_
23d54                 | __system__stat_ret
23d54     2D 00 64 FD | 	ret
23d58                 | 
23d58                 | __system__read
23d58     0A 12 16 F2 | 	cmp	arg01, #10 wc
23d5c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23d60     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23d64     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23d68     01 FA 65 36 |  if_ae	neg	result1, #1
23d6c     20 00 90 3D |  if_ae	jmp	#LR__3430
23d70     34 12 06 FD | 	qmul	arg01, #52
23d74     02 00 00 FF 
23d78     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23d7c     18 12 62 FD | 	getqx	arg01
23d80     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23d84     02 00 00 FF 
23d88     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23d8c     D0 0F B0 FD | 	call	#__system___vfsread
23d90                 | LR__3430
23d90                 | __system__read_ret
23d90     2D 00 64 FD | 	ret
23d94                 | 
23d94                 | __system__close
23d94     0A 12 16 F2 | 	cmp	arg01, #10 wc
23d98     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23d9c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23da0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23da4     01 FA 65 36 |  if_ae	neg	result1, #1
23da8     20 00 90 3D |  if_ae	jmp	#LR__3440
23dac     34 12 06 FD | 	qmul	arg01, #52
23db0     02 00 00 FF 
23db4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23db8     18 12 62 FD | 	getqx	arg01
23dbc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23dc0     02 00 00 FF 
23dc4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23dc8     4C F9 BF FD | 	call	#__system___closeraw
23dcc                 | LR__3440
23dcc                 | __system__close_ret
23dcc     2D 00 64 FD | 	ret
23dd0                 | 
23dd0                 | __system__lseek
23dd0     06 4A 05 F6 | 	mov	COUNT_, #6
23dd4     A8 00 A0 FD | 	call	#pushregs_
23dd8     0A 12 16 F2 | 	cmp	arg01, #10 wc
23ddc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23de0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23de4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23de8     01 FA 65 36 |  if_ae	neg	result1, #1
23dec     C4 00 90 3D |  if_ae	jmp	#LR__3451
23df0     34 12 06 FD | 	qmul	arg01, #52
23df4     02 00 00 FF 
23df8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23dfc     18 1E 62 FD | 	getqx	local01
23e00     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
23e04     30 1E 06 F1 | 	add	local01, #48
23e08     0F 13 0A FB | 	rdlong	arg01, local01 wz
23e0c     30 1E 86 F1 | 	sub	local01, #48
23e10     02 00 00 FF 
23e14     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23e18     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23e1c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23e20     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23e24     01 FA 65 A6 |  if_e	neg	result1, #1
23e28     88 00 90 AD |  if_e	jmp	#LR__3451
23e2c     08 1E 06 F1 | 	add	local01, #8
23e30     0F 21 02 FB | 	rdlong	local02, local01
23e34     08 1E 86 F1 | 	sub	local01, #8
23e38     40 20 CE F7 | 	test	local02, #64 wz
23e3c     08 1E 06 51 |  if_ne	add	local01, #8
23e40     0F 21 02 5B |  if_ne	rdlong	local02, local01
23e44     80 20 46 55 |  if_ne	or	local02, #128
23e48     0F 21 62 5C |  if_ne	wrlong	local02, local01
23e4c     08 1E 86 51 |  if_ne	sub	local01, #8
23e50     30 1E 06 F1 | 	add	local01, #48
23e54     0F 23 02 FB | 	rdlong	local03, local01
23e58     11 25 02 F6 | 	mov	local04, local03
23e5c     30 1E 86 F1 | 	sub	local01, #48
23e60     13 24 46 F7 | 	zerox	local04, #19
23e64     14 22 46 F0 | 	shr	local03, #20
23e68     02 22 66 F0 | 	shl	local03, #2
23e6c     ED 22 02 F1 | 	add	local03, __methods__
23e70     11 23 02 FB | 	rdlong	local03, local03
23e74     0F 13 02 F6 | 	mov	arg01, local01
23e78     F2 26 02 F6 | 	mov	local05, objptr
23e7c     12 E5 01 F6 | 	mov	objptr, local04
23e80     2D 22 62 FD | 	call	local03
23e84     13 E5 01 F6 | 	mov	objptr, local05
23e88     FD 28 02 F6 | 	mov	local06, result1
23e8c     00 28 56 F2 | 	cmps	local06, #0 wc
23e90     1C 00 90 3D |  if_ae	jmp	#LR__3450
23e94     14 13 6A F6 | 	neg	arg01, local06 wz
23e98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23e9c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23ea0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23ea4     01 FA 65 56 |  if_ne	neg	result1, #1
23ea8     00 FA 05 A6 |  if_e	mov	result1, #0
23eac     04 00 90 FD | 	jmp	#LR__3451
23eb0                 | LR__3450
23eb0     14 FB 01 F6 | 	mov	result1, local06
23eb4                 | LR__3451
23eb4     A7 F0 03 F6 | 	mov	ptra, fp
23eb8     B2 00 A0 FD | 	call	#popregs_
23ebc                 | __system__lseek_ret
23ebc     2D 00 64 FD | 	ret
23ec0                 | 
23ec0                 | __system___ioctl
23ec0     03 4A 05 F6 | 	mov	COUNT_, #3
23ec4     A8 00 A0 FD | 	call	#pushregs_
23ec8     00 12 4E F2 | 	cmps	arg01, #0 wz
23ecc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23ed0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23ed4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23ed8     01 FA 65 A6 |  if_e	neg	result1, #1
23edc     5C 00 90 AD |  if_e	jmp	#LR__3461
23ee0     28 12 06 F1 | 	add	arg01, #40
23ee4     09 1F 02 FB | 	rdlong	local01, arg01
23ee8     0F 21 02 F6 | 	mov	local02, local01
23eec     28 12 86 F1 | 	sub	arg01, #40
23ef0     13 20 46 F7 | 	zerox	local02, #19
23ef4     14 1E 46 F0 | 	shr	local01, #20
23ef8     02 1E 66 F0 | 	shl	local01, #2
23efc     ED 1E 02 F1 | 	add	local01, __methods__
23f00     0F 1F 02 FB | 	rdlong	local01, local01
23f04     F2 22 02 F6 | 	mov	local03, objptr
23f08     10 E5 01 F6 | 	mov	objptr, local02
23f0c     2D 1E 62 FD | 	call	local01
23f10     11 E5 01 F6 | 	mov	objptr, local03
23f14     FD 12 0A F6 | 	mov	arg01, result1 wz
23f18     1C 00 90 AD |  if_e	jmp	#LR__3460
23f1c     00 12 4E F2 | 	cmps	arg01, #0 wz
23f20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23f24     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23f28     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23f2c     01 FA 65 56 |  if_ne	neg	result1, #1
23f30     00 FA 05 A6 |  if_e	mov	result1, #0
23f34     04 00 90 FD | 	jmp	#LR__3461
23f38                 | LR__3460
23f38     00 FA 05 F6 | 	mov	result1, #0
23f3c                 | LR__3461
23f3c     A7 F0 03 F6 | 	mov	ptra, fp
23f40     B2 00 A0 FD | 	call	#popregs_
23f44                 | __system___ioctl_ret
23f44     2D 00 64 FD | 	ret
23f48                 | 
23f48                 | __system___isatty
23f48     00 4A 05 F6 | 	mov	COUNT_, #0
23f4c     A8 00 A0 FD | 	call	#pushregs_
23f50     0C F0 07 F1 | 	add	ptra, #12
23f54     04 4E 05 F1 | 	add	fp, #4
23f58     A7 12 62 FC | 	wrlong	arg01, fp
23f5c     04 4E 05 F1 | 	add	fp, #4
23f60     A7 16 02 F6 | 	mov	arg03, fp
23f64     08 4E 85 F1 | 	sub	fp, #8
23f68     00 15 06 F6 | 	mov	arg02, #256
23f6c     50 FF BF FD | 	call	#__system___ioctl
23f70     00 FA 0D F2 | 	cmp	result1, #0 wz
23f74     01 FA 05 A6 |  if_e	mov	result1, #1
23f78     00 FA 05 56 |  if_ne	mov	result1, #0
23f7c     A7 F0 03 F6 | 	mov	ptra, fp
23f80     B2 00 A0 FD | 	call	#popregs_
23f84                 | __system___isatty_ret
23f84     2D 00 64 FD | 	ret
23f88                 | 
23f88                 | __system____getftab
23f88     0A 12 16 F2 | 	cmp	arg01, #10 wc
23f8c     34 12 06 CD |  if_b	qmul	arg01, #52
23f90     00 FA 05 36 |  if_ae	mov	result1, #0
23f94     02 00 00 CF 
23f98     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
23f9c     18 FA 61 CD |  if_b	getqx	result1
23fa0     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
23fa4     02 00 00 CF 
23fa8     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
23fac                 | __system____getftab_ret
23fac     2D 00 64 FD | 	ret
23fb0                 | 
23fb0                 | __system__strncpy
23fb0     09 01 02 F6 | 	mov	_var01, arg01
23fb4                 | LR__3470
23fb4     01 16 86 F1 | 	sub	arg03, #1
23fb8     00 16 56 F2 | 	cmps	arg03, #0 wc
23fbc     18 00 90 CD |  if_b	jmp	#LR__3471
23fc0     0A FB C1 FA | 	rdbyte	result1, arg02
23fc4     00 FB 41 FC | 	wrbyte	result1, _var01
23fc8     01 14 06 F1 | 	add	arg02, #1
23fcc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23fd0     01 00 06 F1 | 	add	_var01, #1
23fd4     DC FF 9F 5D |  if_ne	jmp	#LR__3470
23fd8                 | LR__3471
23fd8     97 0C 48 FB | 	callpa	#(@LR__3473-@LR__3472)>>2,fcache_load_ptr_
23fdc                 | LR__3472
23fdc     01 16 86 F1 | 	sub	arg03, #1
23fe0     00 16 56 F2 | 	cmps	arg03, #0 wc
23fe4     00 03 02 36 |  if_ae	mov	_var02, _var01
23fe8     01 00 06 31 |  if_ae	add	_var01, #1
23fec     01 01 48 3C |  if_ae	wrbyte	#0, _var02
23ff0     E8 FF 9F 3D |  if_ae	jmp	#LR__3472
23ff4                 | LR__3473
23ff4     09 FB 01 F6 | 	mov	result1, arg01
23ff8                 | __system__strncpy_ret
23ff8     2D 00 64 FD | 	ret
23ffc                 | 
23ffc                 | __system__strncat
23ffc     00 14 4E F2 | 	cmps	arg02, #0 wz
24000     50 00 90 AD |  if_e	jmp	#LR__3484
24004     01 16 16 F2 | 	cmp	arg03, #1 wc
24008     48 00 90 CD |  if_b	jmp	#LR__3484
2400c     09 01 02 F6 | 	mov	_var01, arg01
24010     97 1E 48 FB | 	callpa	#(@LR__3482-@LR__3480)>>2,fcache_load_ptr_
24014                 | LR__3480
24014     00 FB C9 FA | 	rdbyte	result1, _var01 wz
24018     01 00 06 51 |  if_ne	add	_var01, #1
2401c     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
24020     0B 03 02 F6 | 	mov	_var02, arg03
24024                 | LR__3481
24024     0A 05 C2 FA | 	rdbyte	_var03, arg02
24028     02 07 02 F6 | 	mov	_var04, _var03
2402c     07 06 4E F7 | 	zerox	_var04, #7 wz
24030     01 14 06 F1 | 	add	arg02, #1
24034     18 00 90 AD |  if_e	jmp	#LR__3483
24038     01 02 86 F1 | 	sub	_var02, #1
2403c     00 02 56 F2 | 	cmps	_var02, #0 wc
24040     00 07 02 36 |  if_ae	mov	_var04, _var01
24044     01 00 06 31 |  if_ae	add	_var01, #1
24048     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2404c     D4 FF 9F 3D |  if_ae	jmp	#LR__3481
24050                 | LR__3482
24050                 | LR__3483
24050     00 01 48 FC | 	wrbyte	#0, _var01
24054                 | LR__3484
24054     09 FB 01 F6 | 	mov	result1, arg01
24058                 | __system__strncat_ret
24058     2D 00 64 FD | 	ret
2405c                 | 
2405c                 | __system__strncmp
2405c     09 01 0A F6 | 	mov	_var01, arg01 wz
24060     14 00 90 5D |  if_ne	jmp	#LR__3490
24064     00 14 0E F2 | 	cmp	arg02, #0 wz
24068     01 02 66 56 |  if_ne	neg	_var02, #1
2406c     00 02 06 A6 |  if_e	mov	_var02, #0
24070     01 FB 01 F6 | 	mov	result1, _var02
24074     74 00 90 FD | 	jmp	#__system__strncmp_ret
24078                 | LR__3490
24078     00 14 0E F2 | 	cmp	arg02, #0 wz
2407c     01 FA 05 A6 |  if_e	mov	result1, #1
24080     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
24084     0B 05 02 F6 | 	mov	_var03, arg03
24088     97 16 48 FB | 	callpa	#(@LR__3492-@LR__3491)>>2,fcache_load_ptr_
2408c                 | LR__3491
2408c     00 07 C2 FA | 	rdbyte	_var04, _var01
24090     0A 09 02 F6 | 	mov	_var05, arg02
24094     04 0B C2 FA | 	rdbyte	_var06, _var05
24098     01 04 86 F1 | 	sub	_var03, #1
2409c     00 04 56 F2 | 	cmps	_var03, #0 wc
240a0     01 00 06 F1 | 	add	_var01, #1
240a4     01 14 06 F1 | 	add	arg02, #1
240a8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
240ac     08 00 90 2D |  if_nc_and_z	jmp	#LR__3493
240b0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
240b4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3491
240b8                 | LR__3492
240b8                 | LR__3493
240b8     00 04 56 F2 | 	cmps	_var03, #0 wc
240bc     00 FA 05 C6 |  if_b	mov	result1, #0
240c0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
240c4     05 07 0A F2 | 	cmp	_var04, _var06 wz
240c8     00 FA 05 A6 |  if_e	mov	result1, #0
240cc     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
240d0     00 06 0E F2 | 	cmp	_var04, #0 wz
240d4     01 FA 65 A6 |  if_e	neg	result1, #1
240d8     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
240dc     00 0A 0E F2 | 	cmp	_var06, #0 wz
240e0     01 FA 05 A6 |  if_e	mov	result1, #1
240e4     03 FB 01 56 |  if_ne	mov	result1, _var04
240e8     05 FB 81 51 |  if_ne	sub	result1, _var06
240ec                 | __system__strncmp_ret
240ec     2D 00 64 FD | 	ret
240f0                 | 
240f0                 | __system____root_opendir
240f0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
240f4     04 12 06 F1 | 	add	arg01, #4
240f8     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
240fc     00 FA 05 F6 | 	mov	result1, #0
24100     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
24104                 | __system____root_opendir_ret
24104     2D 00 64 FD | 	ret
24108                 | 
24108                 | __system____root_readdir
24108     03 4A 05 F6 | 	mov	COUNT_, #3
2410c     A8 00 A0 FD | 	call	#pushregs_
24110     09 1F 02 F6 | 	mov	local01, arg01
24114     0A 21 02 F6 | 	mov	local02, arg02
24118     04 1E 06 F1 | 	add	local01, #4
2411c     0F 23 02 FB | 	rdlong	local03, local01
24120     04 1E 86 F1 | 	sub	local01, #4
24124                 | LR__3500
24124     74 E6 05 F1 | 	add	ptr___system__dat__, #116
24128     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2412c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
24130     01 FA 65 A6 |  if_e	neg	result1, #1
24134     48 00 90 AD |  if_e	jmp	#LR__3501
24138     11 17 0A FB | 	rdlong	arg03, local03 wz
2413c     04 22 06 A1 |  if_e	add	local03, #4
24140     E0 FF 9F AD |  if_e	jmp	#LR__3500
24144     11 15 02 FB | 	rdlong	arg02, local03
24148     01 14 06 F1 | 	add	arg02, #1
2414c     10 13 02 F6 | 	mov	arg01, local02
24150     40 16 06 F6 | 	mov	arg03, #64
24154     58 FE BF FD | 	call	#__system__strncpy
24158     50 20 06 F1 | 	add	local02, #80
2415c     10 03 48 FC | 	wrbyte	#1, local02
24160     08 20 86 F1 | 	sub	local02, #8
24164     10 01 68 FC | 	wrlong	#0, local02
24168     04 20 06 F1 | 	add	local02, #4
2416c     10 01 68 FC | 	wrlong	#0, local02
24170     04 22 06 F1 | 	add	local03, #4
24174     04 1E 06 F1 | 	add	local01, #4
24178     0F 23 62 FC | 	wrlong	local03, local01
2417c     00 FA 05 F6 | 	mov	result1, #0
24180                 | LR__3501
24180     A7 F0 03 F6 | 	mov	ptra, fp
24184     B2 00 A0 FD | 	call	#popregs_
24188                 | __system____root_readdir_ret
24188     2D 00 64 FD | 	ret
2418c                 | 
2418c                 | __system____root_closedir
2418c     00 FA 05 F6 | 	mov	result1, #0
24190                 | __system____root_closedir_ret
24190     2D 00 64 FD | 	ret
24194                 | 
24194                 | __system____root_stat
24194     0A 01 02 F6 | 	mov	_var01, arg02
24198     00 13 02 F6 | 	mov	arg01, _var01
2419c     00 14 06 F6 | 	mov	arg02, #0
241a0     30 16 06 F6 | 	mov	arg03, #48
241a4     98 00 A0 FD | 	call	#\builtin_bytefill_
241a8     08 00 06 F1 | 	add	_var01, #8
241ac     08 00 80 FF 
241b0     00 FF 6B FC | 	wrlong	##4607, _var01
241b4     00 FA 05 F6 | 	mov	result1, #0
241b8                 | __system____root_stat_ret
241b8     2D 00 64 FD | 	ret
241bc                 | 
241bc                 | __system___normalizeName
241bc     00 00 06 F6 | 	mov	_var01, #0
241c0     09 03 02 F6 | 	mov	_var02, arg01
241c4     01 05 02 F6 | 	mov	_var03, _var02
241c8                 | LR__3510
241c8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
241cc     5C 01 90 AD |  if_e	jmp	#LR__3529
241d0     00 00 0E F2 | 	cmp	_var01, #0 wz
241d4     02 07 02 56 |  if_ne	mov	_var04, _var03
241d8     01 04 06 51 |  if_ne	add	_var03, #1
241dc     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
241e0     00 00 06 56 |  if_ne	mov	_var01, #0
241e4     01 07 C2 FA | 	rdbyte	_var04, _var02
241e8     2E 06 0E F2 | 	cmp	_var04, #46 wz
241ec     D8 00 90 5D |  if_ne	jmp	#LR__3522
241f0     01 02 06 F1 | 	add	_var02, #1
241f4     01 07 C2 FA | 	rdbyte	_var04, _var02
241f8     01 02 86 F1 | 	sub	_var02, #1
241fc     2F 06 0E F2 | 	cmp	_var04, #47 wz
24200     18 00 90 AD |  if_e	jmp	#LR__3511
24204     01 02 06 F1 | 	add	_var02, #1
24208     01 09 C2 FA | 	rdbyte	_var05, _var02
2420c     01 02 86 F1 | 	sub	_var02, #1
24210     04 0B 02 F6 | 	mov	_var06, _var05
24214     07 0A 4E F7 | 	zerox	_var06, #7 wz
24218     10 00 90 5D |  if_ne	jmp	#LR__3512
2421c                 | LR__3511
2421c     01 0D 02 F6 | 	mov	_var07, _var02
24220     01 0C 06 F1 | 	add	_var07, #1
24224     06 03 02 F6 | 	mov	_var02, _var07
24228     E0 00 90 FD | 	jmp	#LR__3526
2422c                 | LR__3512
2422c     01 02 06 F1 | 	add	_var02, #1
24230     01 0D C2 FA | 	rdbyte	_var07, _var02
24234     01 02 86 F1 | 	sub	_var02, #1
24238     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2423c     2E 06 0E F2 | 	cmp	_var04, #46 wz
24240     84 00 90 5D |  if_ne	jmp	#LR__3521
24244     02 02 06 F1 | 	add	_var02, #2
24248     01 0D C2 FA | 	rdbyte	_var07, _var02
2424c     02 02 86 F1 | 	sub	_var02, #2
24250     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
24254     2F 06 0E F2 | 	cmp	_var04, #47 wz
24258     18 00 90 AD |  if_e	jmp	#LR__3513
2425c     02 02 06 F1 | 	add	_var02, #2
24260     01 09 C2 FA | 	rdbyte	_var05, _var02
24264     02 02 86 F1 | 	sub	_var02, #2
24268     04 0B 02 F6 | 	mov	_var06, _var05
2426c     07 0A 4E F7 | 	zerox	_var06, #7 wz
24270     54 00 90 5D |  if_ne	jmp	#LR__3520
24274                 | LR__3513
24274     02 02 06 F1 | 	add	_var02, #2
24278     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2427c     40 00 90 ED |  if_be	jmp	#LR__3519
24280     02 0F 02 F6 | 	mov	_var08, _var03
24284     01 0E 86 F1 | 	sub	_var08, #1
24288                 | LR__3514
24288     07 07 C2 FA | 	rdbyte	_var04, _var08
2428c     2F 06 0E F2 | 	cmp	_var04, #47 wz
24290     0C 00 90 5D |  if_ne	jmp	#LR__3515
24294     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
24298     01 0E 86 11 |  if_a	sub	_var08, #1
2429c     E8 FF 9F 1D |  if_a	jmp	#LR__3514
242a0                 | LR__3515
242a0     97 0C 48 FB | 	callpa	#(@LR__3517-@LR__3516)>>2,fcache_load_ptr_
242a4                 | LR__3516
242a4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
242a8     10 00 90 ED |  if_be	jmp	#LR__3518
242ac     07 07 C2 FA | 	rdbyte	_var04, _var08
242b0     2F 06 0E F2 | 	cmp	_var04, #47 wz
242b4     01 0E 86 51 |  if_ne	sub	_var08, #1
242b8     E8 FF 9F 5D |  if_ne	jmp	#LR__3516
242bc                 | LR__3517
242bc                 | LR__3518
242bc     07 05 02 F6 | 	mov	_var03, _var08
242c0                 | LR__3519
242c0     01 00 06 F6 | 	mov	_var01, #1
242c4     44 00 90 FD | 	jmp	#LR__3526
242c8                 | LR__3520
242c8                 | LR__3521
242c8                 | LR__3522
242c8     97 18 48 FB | 	callpa	#(@LR__3524-@LR__3523)>>2,fcache_load_ptr_
242cc                 | LR__3523
242cc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
242d0     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
242d4     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
242d8     20 00 90 AD |  if_e	jmp	#LR__3525
242dc     01 0B 02 F6 | 	mov	_var06, _var02
242e0     01 09 02 F6 | 	mov	_var05, _var02
242e4     01 08 06 F1 | 	add	_var05, #1
242e8     05 11 C2 FA | 	rdbyte	_var09, _var06
242ec     04 03 02 F6 | 	mov	_var02, _var05
242f0     02 11 42 FC | 	wrbyte	_var09, _var03
242f4     01 04 06 F1 | 	add	_var03, #1
242f8     D0 FF 9F FD | 	jmp	#LR__3523
242fc                 | LR__3524
242fc                 | LR__3525
242fc     01 07 C2 FA | 	rdbyte	_var04, _var02
24300     2F 06 0E F2 | 	cmp	_var04, #47 wz
24304     C0 FE 9F 5D |  if_ne	jmp	#LR__3510
24308     01 00 06 F6 | 	mov	_var01, #1
2430c                 | LR__3526
2430c     97 0C 48 FB | 	callpa	#(@LR__3528-@LR__3527)>>2,fcache_load_ptr_
24310                 | LR__3527
24310     01 07 C2 FA | 	rdbyte	_var04, _var02
24314     2F 06 0E F2 | 	cmp	_var04, #47 wz
24318     01 0D 02 A6 |  if_e	mov	_var07, _var02
2431c     01 0C 06 A1 |  if_e	add	_var07, #1
24320     06 03 02 A6 |  if_e	mov	_var02, _var07
24324     E8 FF 9F AD |  if_e	jmp	#LR__3527
24328                 | LR__3528
24328     9C FE 9F FD | 	jmp	#LR__3510
2432c                 | LR__3529
2432c     02 01 48 FC | 	wrbyte	#0, _var03
24330                 | __system___normalizeName_ret
24330     2D 00 64 FD | 	ret
24334                 | 
24334                 | __system___strrev
24334     09 01 CA FA | 	rdbyte	_var01, arg01 wz
24338     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2433c     09 03 02 F6 | 	mov	_var02, arg01
24340     97 1A 48 FB | 	callpa	#(@LR__3532-@LR__3530)>>2,fcache_load_ptr_
24344                 | LR__3530
24344     01 01 CA FA | 	rdbyte	_var01, _var02 wz
24348     01 02 06 51 |  if_ne	add	_var02, #1
2434c     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
24350     01 02 86 F1 | 	sub	_var02, #1
24354                 | LR__3531
24354     09 03 5A F2 | 	cmps	_var02, arg01 wcz
24358     1C 00 90 ED |  if_be	jmp	#LR__3533
2435c     09 01 C2 FA | 	rdbyte	_var01, arg01
24360     01 05 C2 FA | 	rdbyte	_var03, _var02
24364     09 05 42 FC | 	wrbyte	_var03, arg01
24368     01 01 42 FC | 	wrbyte	_var01, _var02
2436c     01 12 06 F1 | 	add	arg01, #1
24370     01 02 86 F1 | 	sub	_var02, #1
24374     DC FF 9F FD | 	jmp	#LR__3531
24378                 | LR__3532
24378                 | LR__3533
24378                 | __system___strrev_ret
24378     2D 00 64 FD | 	ret
2437c                 | 
2437c                 | __system___fmtpad
2437c     06 4A 05 F6 | 	mov	COUNT_, #6
24380     A8 00 A0 FD | 	call	#pushregs_
24384     09 1F 02 F6 | 	mov	local01, arg01
24388     0A 21 02 F6 | 	mov	local02, arg02
2438c     0B 23 02 F6 | 	mov	local03, arg03
24390     10 13 EA F8 | 	getbyte	arg01, local02, #1
24394     16 20 46 F0 | 	shr	local02, #22
24398     03 20 0E F5 | 	and	local02, #3 wz
2439c     00 24 06 F6 | 	mov	local04, #0
243a0     01 20 06 A6 |  if_e	mov	local02, #1
243a4     0C 21 CA F7 | 	test	local02, arg04 wz
243a8     00 FA 05 A6 |  if_e	mov	result1, #0
243ac     88 00 90 AD |  if_e	jmp	#LR__3543
243b0     09 23 C2 F2 | 	subr	local03, arg01
243b4     01 22 56 F2 | 	cmps	local03, #1 wc
243b8     00 FA 05 C6 |  if_b	mov	result1, #0
243bc     78 00 90 CD |  if_b	jmp	#LR__3543
243c0     03 20 0E F2 | 	cmp	local02, #3 wz
243c4     18 00 90 5D |  if_ne	jmp	#LR__3540
243c8     01 18 0E F2 | 	cmp	arg04, #1 wz
243cc     6E 20 62 FD | 	wrz	local02
243d0     10 23 02 F1 | 	add	local03, local02
243d4     11 23 52 F6 | 	abs	local03, local03 wc
243d8     01 22 46 F0 | 	shr	local03, #1
243dc     11 23 82 F6 | 	negc	local03, local03
243e0                 | LR__3540
243e0     01 22 56 F2 | 	cmps	local03, #1 wc
243e4     4C 00 90 CD |  if_b	jmp	#LR__3542
243e8     11 27 02 F6 | 	mov	local05, local03
243ec                 | LR__3541
243ec     0F 21 02 F6 | 	mov	local02, local01
243f0     0F 29 02 F6 | 	mov	local06, local01
243f4     13 20 46 F7 | 	zerox	local02, #19
243f8     14 28 46 F0 | 	shr	local06, #20
243fc     02 28 66 F0 | 	shl	local06, #2
24400     ED 28 02 F1 | 	add	local06, __methods__
24404     14 29 02 FB | 	rdlong	local06, local06
24408     20 12 06 F6 | 	mov	arg01, #32
2440c     F2 22 02 F6 | 	mov	local03, objptr
24410     10 E5 01 F6 | 	mov	objptr, local02
24414     2D 28 62 FD | 	call	local06
24418     11 E5 01 F6 | 	mov	objptr, local03
2441c     FD 28 02 F6 | 	mov	local06, result1
24420     00 28 56 F2 | 	cmps	local06, #0 wc
24424     14 FB 01 C6 |  if_b	mov	result1, local06
24428     0C 00 90 CD |  if_b	jmp	#LR__3543
2442c     14 25 02 F1 | 	add	local04, local06
24430     EE 27 6E FB | 	djnz	local05, #LR__3541
24434                 | LR__3542
24434     12 FB 01 F6 | 	mov	result1, local04
24438                 | LR__3543
24438     A7 F0 03 F6 | 	mov	ptra, fp
2443c     B2 00 A0 FD | 	call	#popregs_
24440                 | __system___fmtpad_ret
24440     2D 00 64 FD | 	ret
24444                 | 
24444                 | __system___uitoa
24444     04 4A 05 F6 | 	mov	COUNT_, #4
24448     A8 00 A0 FD | 	call	#pushregs_
2444c     09 1F 02 F6 | 	mov	local01, arg01
24450     00 1A 4E F2 | 	cmps	arg05, #0 wz
24454     0F 1B 02 F6 | 	mov	arg05, local01
24458     00 20 06 F6 | 	mov	local02, #0
2445c     37 22 06 56 |  if_ne	mov	local03, #55
24460     57 22 06 A6 |  if_e	mov	local03, #87
24464                 | LR__3550
24464     0B 15 12 FD | 	qdiv	arg02, arg03
24468     19 24 62 FD | 	getqy	local04
2446c     0B 15 12 FD | 	qdiv	arg02, arg03
24470     0A 24 16 F2 | 	cmp	local04, #10 wc
24474     30 24 06 C1 |  if_b	add	local04, #48
24478     11 25 02 31 |  if_ae	add	local04, local03
2447c     0D 25 42 FC | 	wrbyte	local04, arg05
24480     01 1A 06 F1 | 	add	arg05, #1
24484     01 20 06 F1 | 	add	local02, #1
24488     18 14 62 FD | 	getqx	arg02
2448c     00 14 0E F2 | 	cmp	arg02, #0 wz
24490     D0 FF 9F 5D |  if_ne	jmp	#LR__3550
24494     0C 21 12 F2 | 	cmp	local02, arg04 wc
24498     C8 FF 9F CD |  if_b	jmp	#LR__3550
2449c     0D 01 48 FC | 	wrbyte	#0, arg05
244a0     0F 13 02 F6 | 	mov	arg01, local01
244a4     8C FE BF FD | 	call	#__system___strrev
244a8     10 FB 01 F6 | 	mov	result1, local02
244ac     A7 F0 03 F6 | 	mov	ptra, fp
244b0     B2 00 A0 FD | 	call	#popregs_
244b4                 | __system___uitoa_ret
244b4     2D 00 64 FD | 	ret
244b8                 | 
244b8                 | __system__disassemble_0443
244b8     10 4A 05 F6 | 	mov	COUNT_, #16
244bc     A8 00 A0 FD | 	call	#pushregs_
244c0     09 1F 02 F6 | 	mov	local01, arg01
244c4     0A 21 02 F6 | 	mov	local02, arg02
244c8     0B 23 02 F6 | 	mov	local03, arg03
244cc     0C 25 02 F6 | 	mov	local04, arg04
244d0     0D 27 02 F6 | 	mov	local05, arg05
244d4     13 13 52 F6 | 	abs	arg01, local05 wc
244d8     1F 28 C6 C9 |  if_b	decod	local06, #31
244dc     00 28 06 36 |  if_ae	mov	local06, #0
244e0     2C D0 BF FD | 	call	#__system___float_fromuns
244e4     14 FB 61 F5 | 	xor	result1, local06
244e8     FD 2A 02 F6 | 	mov	local07, result1
244ec     00 2C 06 F6 | 	mov	local08, #0
244f0     0F 13 02 F6 | 	mov	arg01, local01
244f4     00 14 06 F6 | 	mov	arg02, #0
244f8     01 16 06 F6 | 	mov	arg03, #1
244fc     48 D8 BF FD | 	call	#__system___float_cmp
24500     00 FA 0D F2 | 	cmp	result1, #0 wz
24504     00 2E 06 A6 |  if_e	mov	local09, #0
24508     10 01 68 AC |  if_e	wrlong	#0, local02
2450c     11 2F 62 AC |  if_e	wrlong	local09, local03
24510     8C 01 90 AD |  if_e	jmp	#LR__3572
24514     0F 13 02 F6 | 	mov	arg01, local01
24518     F8 DC BF FD | 	call	#__system____builtin_ilogb
2451c     FD 30 02 F6 | 	mov	local10, result1
24520     0A 26 0E F2 | 	cmp	local05, #10 wz
24524     24 00 90 5D |  if_ne	jmp	#LR__3560
24528     18 2F 02 F6 | 	mov	local09, local10
2452c     01 2E 66 F0 | 	shl	local09, #1
24530     18 2F 02 F1 | 	add	local09, local10
24534     17 31 52 F6 | 	abs	local10, local09 wc
24538     0A 30 16 FD | 	qdiv	local10, #10
2453c     09 32 06 F6 | 	mov	local11, #9
24540     18 30 62 FD | 	getqx	local10
24544     18 31 82 F6 | 	negc	local10, local10
24548     04 00 90 FD | 	jmp	#LR__3561
2454c                 | LR__3560
2454c     18 32 06 F6 | 	mov	local11, #24
24550                 | LR__3561
24550                 | LR__3562
24550     08 2C 56 F2 | 	cmps	local08, #8 wc
24554     01 2C 06 F1 | 	add	local08, #1
24558     60 00 90 3D |  if_ae	jmp	#LR__3563
2455c     00 C0 1F FF 
24560     00 12 06 F6 | 	mov	arg01, ##1065353216
24564     15 15 02 F6 | 	mov	arg02, local07
24568     18 17 02 F6 | 	mov	arg03, local10
2456c     88 E3 BF FD | 	call	#__system___float_pow_n
24570     FD 14 02 F6 | 	mov	arg02, result1
24574     0F 13 02 F6 | 	mov	arg01, local01
24578     9C D5 BF FD | 	call	#__system___float_div
2457c     FD 34 02 F6 | 	mov	local12, result1
24580     1A 13 02 F6 | 	mov	arg01, local12
24584     00 C0 1F FF 
24588     00 14 06 F6 | 	mov	arg02, ##1065353216
2458c     01 16 06 F6 | 	mov	arg03, #1
24590     B4 D7 BF FD | 	call	#__system___float_cmp
24594     00 FA 55 F2 | 	cmps	result1, #0 wc
24598     01 30 86 C1 |  if_b	sub	local10, #1
2459c     B0 FF 9F CD |  if_b	jmp	#LR__3562
245a0     15 15 02 F6 | 	mov	arg02, local07
245a4     1A 13 02 F6 | 	mov	arg01, local12
245a8     01 16 66 F6 | 	neg	arg03, #1
245ac     98 D7 BF FD | 	call	#__system___float_cmp
245b0     00 FA 55 F2 | 	cmps	result1, #0 wc
245b4     01 30 06 31 |  if_ae	add	local10, #1
245b8     94 FF 9F 3D |  if_ae	jmp	#LR__3562
245bc                 | LR__3563
245bc     1A 13 02 F6 | 	mov	arg01, local12
245c0     50 DC BF FD | 	call	#__system____builtin_ilogb
245c4     FD 36 02 F6 | 	mov	local13, result1
245c8     1A 39 02 F6 | 	mov	local14, local12
245cc     17 39 06 F4 | 	bitl	local14, #279
245d0     17 38 26 F4 | 	bith	local14, #23
245d4     1B 39 62 F0 | 	shl	local14, local13
245d8     02 26 0E F2 | 	cmp	local05, #2 wz
245dc     02 24 66 A0 |  if_e	shl	local04, #2
245e0     00 3A 06 F6 | 	mov	local15, #0
245e4     00 24 56 F2 | 	cmps	local04, #0 wc
245e8     10 00 90 3D |  if_ae	jmp	#LR__3564
245ec     18 25 C2 F2 | 	subr	local04, local10
245f0     00 24 56 F2 | 	cmps	local04, #0 wc
245f4     A0 00 90 CD |  if_b	jmp	#LR__3571
245f8     04 00 90 FD | 	jmp	#LR__3565
245fc                 | LR__3564
245fc     01 24 06 F1 | 	add	local04, #1
24600                 | LR__3565
24600     19 25 7A F3 | 	fles	local04, local11 wcz
24604     01 3C 06 F6 | 	mov	local16, #1
24608     97 22 48 FB | 	callpa	#(@LR__3567-@LR__3566)>>2,fcache_load_ptr_
2460c                 | LR__3566
2460c     00 40 00 FF 
24610     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
24614     38 00 90 3D |  if_ae	jmp	#LR__3568
24618     01 24 56 F2 | 	cmps	local04, #1 wc
2461c     01 24 86 F1 | 	sub	local04, #1
24620     2C 00 90 CD |  if_b	jmp	#LR__3568
24624     13 3B 02 FD | 	qmul	local15, local05
24628     1C 37 02 F6 | 	mov	local13, local14
2462c     17 36 46 F0 | 	shr	local13, #23
24630     17 39 06 F4 | 	bitl	local14, #279
24634     18 3A 62 FD | 	getqx	local15
24638     13 3D 02 FD | 	qmul	local16, local05
2463c     18 3C 62 FD | 	getqx	local16
24640     13 39 02 FD | 	qmul	local14, local05
24644     1B 3B 02 F1 | 	add	local15, local13
24648     18 38 62 FD | 	getqx	local14
2464c     BC FF 9F FD | 	jmp	#LR__3566
24650                 | LR__3567
24650                 | LR__3568
24650     13 2F 02 F6 | 	mov	local09, local05
24654     17 2E 66 F0 | 	shl	local09, #23
24658     17 37 52 F6 | 	abs	local13, local09 wc
2465c     01 36 46 F0 | 	shr	local13, #1
24660     1B 37 82 F6 | 	negc	local13, local13
24664     1B 39 1A F2 | 	cmp	local14, local13 wcz
24668     20 00 90 1D |  if_a	jmp	#LR__3569
2466c     17 26 66 F0 | 	shl	local05, #23
24670     13 37 52 F6 | 	abs	local13, local05 wc
24674     01 36 46 F0 | 	shr	local13, #1
24678     1B 37 82 F6 | 	negc	local13, local13
2467c     1B 39 0A F2 | 	cmp	local14, local13 wz
24680     14 00 90 5D |  if_ne	jmp	#LR__3570
24684     01 3A CE F7 | 	test	local15, #1 wz
24688     0C 00 90 AD |  if_e	jmp	#LR__3570
2468c                 | LR__3569
2468c     01 3A 06 F1 | 	add	local15, #1
24690     1E 3B 0A F2 | 	cmp	local15, local16 wz
24694     01 30 06 A1 |  if_e	add	local10, #1
24698                 | LR__3570
24698                 | LR__3571
24698     10 3B 62 FC | 	wrlong	local15, local02
2469c     11 31 62 FC | 	wrlong	local10, local03
246a0                 | LR__3572
246a0     A7 F0 03 F6 | 	mov	ptra, fp
246a4     B2 00 A0 FD | 	call	#popregs_
246a8                 | __system__disassemble_0443_ret
246a8     2D 00 64 FD | 	ret
246ac                 | 
246ac                 | __system__emitsign_0445
246ac     00 FA 05 F6 | 	mov	result1, #0
246b0     00 14 0E F2 | 	cmp	arg02, #0 wz
246b4     09 01 02 56 |  if_ne	mov	_var01, arg01
246b8     01 12 06 51 |  if_ne	add	arg01, #1
246bc     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
246c0     01 FA 05 56 |  if_ne	mov	result1, #1
246c4     00 16 0E F2 | 	cmp	arg03, #0 wz
246c8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
246cc     01 12 06 51 |  if_ne	add	arg01, #1
246d0     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
246d4     02 FA 05 51 |  if_ne	add	result1, #2
246d8                 | __system__emitsign_0445_ret
246d8     2D 00 64 FD | 	ret
246dc                 | 
246dc                 | __system___gettxfunc
246dc     01 4A 05 F6 | 	mov	COUNT_, #1
246e0     A8 00 A0 FD | 	call	#pushregs_
246e4     A0 F8 BF FD | 	call	#__system____getftab
246e8     FD 1E 0A F6 | 	mov	local01, result1 wz
246ec     10 00 90 AD |  if_e	jmp	#LR__3580
246f0     08 1E 06 F1 | 	add	local01, #8
246f4     0F 15 0A FB | 	rdlong	arg02, local01 wz
246f8     08 1E 86 F1 | 	sub	local01, #8
246fc     08 00 90 5D |  if_ne	jmp	#LR__3581
24700                 | LR__3580
24700     00 FA 05 F6 | 	mov	result1, #0
24704     0C 00 90 FD | 	jmp	#LR__3582
24708                 | LR__3581
24708     00 40 04 FF 
2470c     00 1E 46 F5 | 	or	local01, ##142606336
24710     0F FB 01 F6 | 	mov	result1, local01
24714                 | LR__3582
24714     A7 F0 03 F6 | 	mov	ptra, fp
24718     B2 00 A0 FD | 	call	#popregs_
2471c                 | __system___gettxfunc_ret
2471c     2D 00 64 FD | 	ret
24720                 | 
24720                 | __system___getrxfunc
24720     01 4A 05 F6 | 	mov	COUNT_, #1
24724     A8 00 A0 FD | 	call	#pushregs_
24728     5C F8 BF FD | 	call	#__system____getftab
2472c     FD 1E 0A F6 | 	mov	local01, result1 wz
24730     10 00 90 AD |  if_e	jmp	#LR__3590
24734     08 1E 06 F1 | 	add	local01, #8
24738     0F 15 0A FB | 	rdlong	arg02, local01 wz
2473c     08 1E 86 F1 | 	sub	local01, #8
24740     08 00 90 5D |  if_ne	jmp	#LR__3591
24744                 | LR__3590
24744     00 FA 05 F6 | 	mov	result1, #0
24748     0C 00 90 FD | 	jmp	#LR__3592
2474c                 | LR__3591
2474c     00 48 04 FF 
24750     00 1E 46 F5 | 	or	local01, ##143654912
24754     0F FB 01 F6 | 	mov	result1, local01
24758                 | LR__3592
24758     A7 F0 03 F6 | 	mov	ptra, fp
2475c     B2 00 A0 FD | 	call	#popregs_
24760                 | __system___getrxfunc_ret
24760     2D 00 64 FD | 	ret
24764                 | 
24764                 | __system___getiolock_0485
24764     01 4A 05 F6 | 	mov	COUNT_, #1
24768     A8 00 A0 FD | 	call	#pushregs_
2476c     18 F8 BF FD | 	call	#__system____getftab
24770     FD 1E 0A F6 | 	mov	local01, result1 wz
24774     10 00 90 AD |  if_e	jmp	#LR__3600
24778     08 1E 06 F1 | 	add	local01, #8
2477c     0F FB 09 FB | 	rdlong	result1, local01 wz
24780     08 1E 86 F1 | 	sub	local01, #8
24784     18 00 90 5D |  if_ne	jmp	#LR__3601
24788                 | LR__3600
24788     01 00 00 FF 
2478c     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
24790     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
24794     01 00 00 FF 
24798     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2479c     08 00 90 FD | 	jmp	#LR__3602
247a0                 | LR__3601
247a0     0C 1E 06 F1 | 	add	local01, #12
247a4     0F FB 01 F6 | 	mov	result1, local01
247a8                 | LR__3602
247a8     A7 F0 03 F6 | 	mov	ptra, fp
247ac     B2 00 A0 FD | 	call	#popregs_
247b0                 | __system___getiolock_0485_ret
247b0     2D 00 64 FD | 	ret
247b4                 | 
247b4                 | __system____ScanForChar
247b4     09 01 02 F6 | 	mov	_var01, arg01
247b8     09 03 02 F6 | 	mov	_var02, arg01
247bc     97 06 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
247c0                 | LR__3610
247c0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
247c4     01 02 06 51 |  if_ne	add	_var02, #1
247c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3610
247cc                 | LR__3611
247cc     09 03 82 F1 | 	sub	_var02, arg01
247d0     01 FB 01 F6 | 	mov	result1, _var02
247d4     FD 12 0A F6 | 	mov	arg01, result1 wz
247d8     00 FA 05 A6 |  if_e	mov	result1, #0
247dc     B8 00 90 AD |  if_e	jmp	#LR__3618
247e0     0A 05 02 F6 | 	mov	_var03, arg02
247e4     07 04 4E F7 | 	zerox	_var03, #7 wz
247e8     00 FA 05 A6 |  if_e	mov	result1, #0
247ec     A8 00 90 AD |  if_e	jmp	#LR__3618
247f0     01 16 16 F2 | 	cmp	arg03, #1 wc
247f4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
247f8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
247fc     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
24800     94 00 90 4D |  if_c_and_nz	jmp	#LR__3618
24804     09 17 1A F2 | 	cmp	arg03, arg01 wcz
24808     10 00 90 ED |  if_be	jmp	#LR__3612
2480c     00 18 0E F2 | 	cmp	arg04, #0 wz
24810     00 FA 05 A6 |  if_e	mov	result1, #0
24814     80 00 90 AD |  if_e	jmp	#LR__3618
24818     09 17 02 F6 | 	mov	arg03, arg01
2481c                 | LR__3612
2481c     01 16 86 F1 | 	sub	arg03, #1
24820     00 18 0E F2 | 	cmp	arg04, #0 wz
24824     38 00 90 5D |  if_ne	jmp	#LR__3614
24828     0B 07 02 F6 | 	mov	_var04, arg03
2482c     09 09 02 F6 | 	mov	_var05, arg01
24830                 | LR__3613
24830     04 07 12 F2 | 	cmp	_var04, _var05 wc
24834     5C 00 90 3D |  if_ae	jmp	#LR__3617
24838     03 05 02 F6 | 	mov	_var03, _var04
2483c     00 05 02 F1 | 	add	_var03, _var01
24840     02 05 C2 FA | 	rdbyte	_var03, _var03
24844     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
24848     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2484c     01 06 06 A1 |  if_e	add	_var04, #1
24850     03 FB 01 A6 |  if_e	mov	result1, _var04
24854     40 00 90 AD |  if_e	jmp	#LR__3618
24858     01 06 06 F1 | 	add	_var04, #1
2485c     D0 FF 9F FD | 	jmp	#LR__3613
24860                 | LR__3614
24860     0B 07 02 F6 | 	mov	_var04, arg03
24864                 | LR__3615
24864     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
24868     28 00 90 1D |  if_a	jmp	#LR__3616
2486c     03 09 02 F6 | 	mov	_var05, _var04
24870     00 09 02 F1 | 	add	_var05, _var01
24874     04 05 C2 FA | 	rdbyte	_var03, _var05
24878     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2487c     04 05 0A F2 | 	cmp	_var03, _var05 wz
24880     01 06 06 A1 |  if_e	add	_var04, #1
24884     03 FB 01 A6 |  if_e	mov	result1, _var04
24888     0C 00 90 AD |  if_e	jmp	#LR__3618
2488c     01 06 86 F1 | 	sub	_var04, #1
24890     D0 FF 9F FD | 	jmp	#LR__3615
24894                 | LR__3616
24894                 | LR__3617
24894     00 FA 05 F6 | 	mov	result1, #0
24898                 | LR__3618
24898                 | __system____ScanForChar_ret
24898     2D 00 64 FD | 	ret
2489c                 | 
2489c                 | __system___basic_dir
2489c     05 4A 05 F6 | 	mov	COUNT_, #5
248a0     A8 00 A0 FD | 	call	#pushregs_
248a4     4C F0 07 F1 | 	add	ptra, #76
248a8     04 4E 05 F1 | 	add	fp, #4
248ac     A7 12 62 FC | 	wrlong	arg01, fp
248b0     04 4E 05 F1 | 	add	fp, #4
248b4     A7 14 62 FC | 	wrlong	arg02, fp
248b8     04 4E 85 F1 | 	sub	fp, #4
248bc     A7 14 0A FB | 	rdlong	arg02, fp wz
248c0     04 4E 85 F1 | 	sub	fp, #4
248c4     04 4E 05 51 |  if_ne	add	fp, #4
248c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
248cc     04 4E 85 51 |  if_ne	sub	fp, #4
248d0     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
248d4     70 00 90 AD |  if_e	jmp	#LR__3620
248d8     03 00 00 FF 
248dc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
248e0     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
248e4     03 00 00 FF 
248e8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
248ec     03 00 00 5F 
248f0     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
248f4     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
248f8     03 00 00 5F 
248fc     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
24900     14 EA BF 5D |  if_ne	call	#__system__closedir
24904     71 01 00 FF 
24908     EC 13 06 F6 | 	mov	arg01, ##@LR__4778
2490c     1C E9 BF FD | 	call	#__system__opendir
24910     03 00 00 FF 
24914     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24918     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2491c     08 4E 05 F1 | 	add	fp, #8
24920     A7 20 02 FB | 	rdlong	local02, fp
24924     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24928     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2492c     04 4E 85 F1 | 	sub	fp, #4
24930     A7 20 02 FB | 	rdlong	local02, fp
24934     04 4E 85 F1 | 	sub	fp, #4
24938     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2493c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
24940     03 00 00 FF 
24944     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
24948                 | LR__3620
24948     03 00 00 FF 
2494c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24950     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24954     03 00 00 FF 
24958     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2495c     71 01 00 AF 
24960     EE FB 05 A6 |  if_e	mov	result1, ##@LR__4779
24964     84 02 90 AD |  if_e	jmp	#LR__3633
24968                 | LR__3621
24968     03 00 00 FF 
2496c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24970     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
24974     03 00 00 FF 
24978     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2497c     0C EA BF FD | 	call	#__system__readdir
24980     0C 4E 05 F1 | 	add	fp, #12
24984     A7 FA 61 FC | 	wrlong	result1, fp
24988     0C 4E 85 F1 | 	sub	fp, #12
2498c     00 FA 0D F2 | 	cmp	result1, #0 wz
24990     38 00 90 5D |  if_ne	jmp	#LR__3622
24994     03 00 00 FF 
24998     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2499c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
249a0     03 00 00 FF 
249a4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
249a8     6C E9 BF FD | 	call	#__system__closedir
249ac     03 00 00 FF 
249b0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
249b4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
249b8     03 00 00 FF 
249bc     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
249c0     71 01 00 FF 
249c4     F0 FB 05 F6 | 	mov	result1, ##@LR__4780
249c8     20 02 90 FD | 	jmp	#LR__3633
249cc                 | LR__3622
249cc     0C 4E 05 F1 | 	add	fp, #12
249d0     A7 12 02 FB | 	rdlong	arg01, fp
249d4     0C 4E 85 F1 | 	sub	fp, #12
249d8     03 00 00 FF 
249dc     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
249e0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
249e4     03 00 00 FF 
249e8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
249ec     48 07 B0 FD | 	call	#__system___pat_match
249f0     00 FA 0D F2 | 	cmp	result1, #0 wz
249f4     70 FF 9F AD |  if_e	jmp	#LR__3621
249f8     03 00 00 FF 
249fc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
24a00     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24a04     03 00 00 FF 
24a08     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
24a0c     78 01 90 AD |  if_e	jmp	#LR__3629
24a10     0C 4E 05 F1 | 	add	fp, #12
24a14     A7 12 02 FB | 	rdlong	arg01, fp
24a18     04 4E 05 F1 | 	add	fp, #4
24a1c     A7 14 02 F6 | 	mov	arg02, fp
24a20     10 4E 85 F1 | 	sub	fp, #16
24a24     68 F2 BF FD | 	call	#__system__stat
24a28     40 4E 05 F1 | 	add	fp, #64
24a2c     A7 FA 61 FC | 	wrlong	result1, fp
24a30     40 4E 85 F1 | 	sub	fp, #64
24a34     00 FA 0D F2 | 	cmp	result1, #0 wz
24a38     71 01 00 5F 
24a3c     F2 FB 05 56 |  if_ne	mov	result1, ##@LR__4781
24a40     A8 01 90 5D |  if_ne	jmp	#LR__3633
24a44     18 4E 05 F1 | 	add	fp, #24
24a48     A7 20 02 FB | 	rdlong	local02, fp
24a4c     78 00 00 FF 
24a50     00 20 06 F5 | 	and	local02, ##61440
24a54     2C 4E 05 F1 | 	add	fp, #44
24a58     A7 20 62 FC | 	wrlong	local02, fp
24a5c     38 4E 85 F1 | 	sub	fp, #56
24a60     A7 20 02 FB | 	rdlong	local02, fp
24a64     0C 4E 85 F1 | 	sub	fp, #12
24a68     10 21 C2 FA | 	rdbyte	local02, local02
24a6c     2E 20 0E F2 | 	cmp	local02, #46 wz
24a70     08 4E 05 A1 |  if_e	add	fp, #8
24a74     A7 04 68 AC |  if_e	wrlong	#2, fp
24a78     08 4E C5 F3 | 	sumz	fp, #8
24a7c     A7 00 68 5C |  if_ne	wrlong	#0, fp
24a80     08 4E 85 51 |  if_ne	sub	fp, #8
24a84     44 4E 05 F1 | 	add	fp, #68
24a88     A7 20 02 FB | 	rdlong	local02, fp
24a8c     44 4E 85 F1 | 	sub	fp, #68
24a90     08 00 00 FF 
24a94     00 20 0E F2 | 	cmp	local02, ##4096 wz
24a98     18 00 90 5D |  if_ne	jmp	#LR__3623
24a9c     08 4E 05 F1 | 	add	fp, #8
24aa0     A7 20 02 FB | 	rdlong	local02, fp
24aa4     10 20 46 F5 | 	or	local02, #16
24aa8     A7 20 62 FC | 	wrlong	local02, fp
24aac     08 4E 85 F1 | 	sub	fp, #8
24ab0     AC 00 90 FD | 	jmp	#LR__3628
24ab4                 | LR__3623
24ab4     44 4E 05 F1 | 	add	fp, #68
24ab8     A7 20 02 FB | 	rdlong	local02, fp
24abc     44 4E 85 F1 | 	sub	fp, #68
24ac0     10 00 00 FF 
24ac4     00 20 0E F2 | 	cmp	local02, ##8192 wz
24ac8     44 4E 05 51 |  if_ne	add	fp, #68
24acc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24ad0     44 4E 85 51 |  if_ne	sub	fp, #68
24ad4     18 00 00 5F 
24ad8     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
24adc     44 4E 05 51 |  if_ne	add	fp, #68
24ae0     0F 23 02 56 |  if_ne	mov	local03, local01
24ae4     44 4E 85 51 |  if_ne	sub	fp, #68
24ae8     20 00 00 5F 
24aec     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
24af0     18 00 90 5D |  if_ne	jmp	#LR__3624
24af4     08 4E 05 F1 | 	add	fp, #8
24af8     A7 20 02 FB | 	rdlong	local02, fp
24afc     04 20 46 F5 | 	or	local02, #4
24b00     A7 20 62 FC | 	wrlong	local02, fp
24b04     08 4E 85 F1 | 	sub	fp, #8
24b08     54 00 90 FD | 	jmp	#LR__3627
24b0c                 | LR__3624
24b0c     18 4E 05 F1 | 	add	fp, #24
24b10     A7 20 02 FB | 	rdlong	local02, fp
24b14     18 4E 85 F1 | 	sub	fp, #24
24b18     92 20 CE F7 | 	test	local02, #146 wz
24b1c     18 00 90 5D |  if_ne	jmp	#LR__3625
24b20     08 4E 05 F1 | 	add	fp, #8
24b24     A7 20 02 FB | 	rdlong	local02, fp
24b28     01 20 46 F5 | 	or	local02, #1
24b2c     A7 20 62 FC | 	wrlong	local02, fp
24b30     08 4E 85 F1 | 	sub	fp, #8
24b34     28 00 90 FD | 	jmp	#LR__3626
24b38                 | LR__3625
24b38     44 4E 05 F1 | 	add	fp, #68
24b3c     A7 24 02 FB | 	rdlong	local04, fp
24b40     44 4E 85 F1 | 	sub	fp, #68
24b44     08 00 00 FF 
24b48     00 24 0E F2 | 	cmp	local04, ##4096 wz
24b4c     08 4E 05 51 |  if_ne	add	fp, #8
24b50     A7 24 02 5B |  if_ne	rdlong	local04, fp
24b54     20 24 46 55 |  if_ne	or	local04, #32
24b58     A7 24 62 5C |  if_ne	wrlong	local04, fp
24b5c     08 4E 85 51 |  if_ne	sub	fp, #8
24b60                 | LR__3626
24b60                 | LR__3627
24b60                 | LR__3628
24b60     08 4E 05 F1 | 	add	fp, #8
24b64     A7 24 02 FB | 	rdlong	local04, fp
24b68     08 4E 85 F1 | 	sub	fp, #8
24b6c     03 00 00 FF 
24b70     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
24b74     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
24b78     03 00 00 FF 
24b7c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
24b80     0F 25 CA F7 | 	test	local04, local01 wz
24b84     E0 FD 9F AD |  if_e	jmp	#LR__3621
24b88                 | LR__3629
24b88     0C 4E 05 F1 | 	add	fp, #12
24b8c     A7 12 02 FB | 	rdlong	arg01, fp
24b90     0C 4E 85 F1 | 	sub	fp, #12
24b94     09 27 02 F6 | 	mov	local05, arg01
24b98     97 06 48 FB | 	callpa	#(@LR__3631-@LR__3630)>>2,fcache_load_ptr_
24b9c                 | LR__3630
24b9c     13 FB C9 FA | 	rdbyte	result1, local05 wz
24ba0     01 26 06 51 |  if_ne	add	local05, #1
24ba4     F4 FF 9F 5D |  if_ne	jmp	#LR__3630
24ba8                 | LR__3631
24ba8     13 13 C2 F2 | 	subr	arg01, local05
24bac     01 12 06 F1 | 	add	arg01, #1
24bb0     64 E0 BF FD | 	call	#__system___gc_alloc_managed
24bb4     48 4E 05 F1 | 	add	fp, #72
24bb8     A7 FA 61 FC | 	wrlong	result1, fp
24bbc     48 4E 85 F1 | 	sub	fp, #72
24bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
24bc4     18 00 90 AD |  if_e	jmp	#LR__3632
24bc8     48 4E 05 F1 | 	add	fp, #72
24bcc     A7 12 02 FB | 	rdlong	arg01, fp
24bd0     3C 4E 85 F1 | 	sub	fp, #60
24bd4     A7 14 02 FB | 	rdlong	arg02, fp
24bd8     0C 4E 85 F1 | 	sub	fp, #12
24bdc     A0 A1 BF FD | 	call	#__system____builtin_strcpy
24be0                 | LR__3632
24be0     48 4E 05 F1 | 	add	fp, #72
24be4     A7 FA 01 FB | 	rdlong	result1, fp
24be8     48 4E 85 F1 | 	sub	fp, #72
24bec                 | LR__3633
24bec     A7 F0 03 F6 | 	mov	ptra, fp
24bf0     B2 00 A0 FD | 	call	#popregs_
24bf4                 | __system___basic_dir_ret
24bf4     2D 00 64 FD | 	ret
24bf8                 | 
24bf8                 | __system__pack_0551
24bf8     09 01 02 F6 | 	mov	_var01, arg01
24bfc     7F 16 06 F1 | 	add	arg03, #127
24c00     04 18 CE F7 | 	test	arg04, #4 wz
24c04     10 00 90 AD |  if_e	jmp	#LR__3640
24c08     00 00 0E F2 | 	cmp	_var01, #0 wz
24c0c     16 00 C6 A9 |  if_e	decod	_var01, #22
24c10     F7 00 26 F4 | 	bith	_var01, #247
24c14     B4 00 90 FD | 	jmp	#LR__3649
24c18                 | LR__3640
24c18     02 18 CE F7 | 	test	arg04, #2 wz
24c1c     00 C0 3F 5F 
24c20     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
24c24     00 14 06 56 |  if_ne	mov	arg02, #0
24c28     A0 00 90 5D |  if_ne	jmp	#LR__3648
24c2c     08 18 CE F7 | 	test	arg04, #8 wz
24c30     00 00 06 56 |  if_ne	mov	_var01, #0
24c34     94 00 90 5D |  if_ne	jmp	#LR__3647
24c38     FF 16 56 F2 | 	cmps	arg03, #255 wc
24c3c     00 C0 3F 3F 
24c40     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
24c44     00 14 06 36 |  if_ae	mov	arg02, #0
24c48     80 00 90 3D |  if_ae	jmp	#LR__3646
24c4c     01 16 56 F2 | 	cmps	arg03, #1 wc
24c50     6C 00 90 3D |  if_ae	jmp	#LR__3644
24c54     01 14 46 F0 | 	shr	arg02, #1
24c58     00 03 02 F6 | 	mov	_var02, _var01
24c5c     01 02 06 F5 | 	and	_var02, #1
24c60     1F 02 66 F0 | 	shl	_var02, #31
24c64     01 15 42 F5 | 	or	arg02, _var02
24c68     01 00 46 F0 | 	shr	_var01, #1
24c6c     97 1E 48 FB | 	callpa	#(@LR__3642-@LR__3641)>>2,fcache_load_ptr_
24c70                 | LR__3641
24c70     00 16 56 F2 | 	cmps	arg03, #0 wc
24c74     34 00 90 3D |  if_ae	jmp	#LR__3643
24c78     00 00 0E F2 | 	cmp	_var01, #0 wz
24c7c     2C 00 90 AD |  if_e	jmp	#LR__3643
24c80     0A 13 02 F6 | 	mov	arg01, arg02
24c84     01 12 06 F5 | 	and	arg01, #1
24c88     01 16 06 F1 | 	add	arg03, #1
24c8c     01 14 46 F0 | 	shr	arg02, #1
24c90     00 03 02 F6 | 	mov	_var02, _var01
24c94     01 02 06 F5 | 	and	_var02, #1
24c98     1F 02 66 F0 | 	shl	_var02, #31
24c9c     01 15 42 F5 | 	or	arg02, _var02
24ca0     09 15 42 F5 | 	or	arg02, arg01
24ca4     01 00 46 F0 | 	shr	_var01, #1
24ca8     C4 FF 9F FD | 	jmp	#LR__3641
24cac                 | LR__3642
24cac                 | LR__3643
24cac     00 16 56 F2 | 	cmps	arg03, #0 wc
24cb0     18 00 90 3D |  if_ae	jmp	#LR__3645
24cb4     00 14 0E F2 | 	cmp	arg02, #0 wz
24cb8     6F 14 62 FD | 	wrnz	arg02
24cbc     0C 00 90 FD | 	jmp	#LR__3645
24cc0                 | LR__3644
24cc0     17 01 06 F4 | 	bitl	_var01, #279
24cc4     17 16 66 F0 | 	shl	arg03, #23
24cc8     0B 01 42 F5 | 	or	_var01, arg03
24ccc                 | LR__3645
24ccc                 | LR__3646
24ccc                 | LR__3647
24ccc                 | LR__3648
24ccc                 | LR__3649
24ccc     01 00 CE F7 | 	test	_var01, #1 wz
24cd0     01 14 46 55 |  if_ne	or	arg02, #1
24cd4     0A 17 02 F6 | 	mov	arg03, arg02
24cd8     00 02 06 F6 | 	mov	_var02, #0
24cdc     FF FF 3F FF 
24ce0     FF 15 06 F1 | 	add	arg02, ##2147483647
24ce4     0B 15 12 F2 | 	cmp	arg02, arg03 wc
24ce8     01 02 06 C6 |  if_b	mov	_var02, #1
24cec     01 01 02 F1 | 	add	_var01, _var02
24cf0     01 18 CE F7 | 	test	arg04, #1 wz
24cf4     1F 00 26 54 |  if_ne	bith	_var01, #31
24cf8     00 FB 01 F6 | 	mov	result1, _var01
24cfc                 | __system__pack_0551_ret
24cfc     2D 00 64 FD | 	ret
24d00                 | 
24d00                 | __system___rxtxioctl_0641
24d00     00 15 0E F2 | 	cmp	arg02, #256 wz
24d04     0C 00 90 AD |  if_e	jmp	#LR__3650
24d08     01 15 0E F2 | 	cmp	arg02, #257 wz
24d0c     1C 00 90 AD |  if_e	jmp	#LR__3651
24d10     30 00 90 FD | 	jmp	#LR__3652
24d14                 | LR__3650
24d14     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24d18     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24d1c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24d20     0B FB 61 FC | 	wrlong	result1, arg03
24d24     00 FA 05 F6 | 	mov	result1, #0
24d28     28 00 90 FD | 	jmp	#LR__3653
24d2c                 | LR__3651
24d2c     0B 13 02 FB | 	rdlong	arg01, arg03
24d30     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24d34     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24d38     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24d3c     00 FA 05 F6 | 	mov	result1, #0
24d40     10 00 90 FD | 	jmp	#LR__3653
24d44                 | LR__3652
24d44     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24d48     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
24d4c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24d50     01 FA 65 F6 | 	neg	result1, #1
24d54                 | LR__3653
24d54                 | __system___rxtxioctl_0641_ret
24d54     2D 00 64 FD | 	ret
24d58                 | 
24d58                 | __system____dummy_flush_0642
24d58     00 FA 05 F6 | 	mov	result1, #0
24d5c                 | __system____dummy_flush_0642_ret
24d5c     2D 00 64 FD | 	ret
24d60                 | 
24d60                 | __system___vfsread
24d60     03 4A 05 F6 | 	mov	COUNT_, #3
24d64     A8 00 A0 FD | 	call	#pushregs_
24d68     28 F0 07 F1 | 	add	ptra, #40
24d6c     04 4E 05 F1 | 	add	fp, #4
24d70     A7 12 62 FC | 	wrlong	arg01, fp
24d74     04 4E 05 F1 | 	add	fp, #4
24d78     A7 14 62 FC | 	wrlong	arg02, fp
24d7c     04 4E 05 F1 | 	add	fp, #4
24d80     A7 16 62 FC | 	wrlong	arg03, fp
24d84     04 4E 85 F1 | 	sub	fp, #4
24d88     A7 FA 01 FB | 	rdlong	result1, fp
24d8c     14 4E 05 F1 | 	add	fp, #20
24d90     A7 FA 61 FC | 	wrlong	result1, fp
24d94     04 4E 05 F1 | 	add	fp, #4
24d98     A7 00 68 FC | 	wrlong	#0, fp
24d9c     1C 4E 85 F1 | 	sub	fp, #28
24da0     A7 12 02 FB | 	rdlong	arg01, fp
24da4     04 4E 85 F1 | 	sub	fp, #4
24da8     08 12 06 F1 | 	add	arg01, #8
24dac     09 FB 01 FB | 	rdlong	result1, arg01
24db0     01 FA CD F7 | 	test	result1, #1 wz
24db4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24db8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24dbc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24dc0     01 FA 65 A6 |  if_e	neg	result1, #1
24dc4     74 02 90 AD |  if_e	jmp	#LR__3666
24dc8     04 4E 05 F1 | 	add	fp, #4
24dcc     A7 12 02 FB | 	rdlong	arg01, fp
24dd0     04 4E 85 F1 | 	sub	fp, #4
24dd4     14 12 06 F1 | 	add	arg01, #20
24dd8     09 FB 09 FB | 	rdlong	result1, arg01 wz
24ddc     B8 00 90 AD |  if_e	jmp	#LR__3661
24de0     04 4E 05 F1 | 	add	fp, #4
24de4     A7 12 02 FB | 	rdlong	arg01, fp
24de8     09 17 02 F6 | 	mov	arg03, arg01
24dec     14 16 06 F1 | 	add	arg03, #20
24df0     0B 1F 02 FB | 	rdlong	local01, arg03
24df4     0F 21 02 F6 | 	mov	local02, local01
24df8     13 1E 46 F7 | 	zerox	local01, #19
24dfc     14 20 46 F0 | 	shr	local02, #20
24e00     02 20 66 F0 | 	shl	local02, #2
24e04     ED 20 02 F1 | 	add	local02, __methods__
24e08     10 21 02 FB | 	rdlong	local02, local02
24e0c     04 4E 05 F1 | 	add	fp, #4
24e10     A7 14 02 FB | 	rdlong	arg02, fp
24e14     04 4E 05 F1 | 	add	fp, #4
24e18     A7 16 02 FB | 	rdlong	arg03, fp
24e1c     0C 4E 85 F1 | 	sub	fp, #12
24e20     F2 22 02 F6 | 	mov	local03, objptr
24e24     0F E5 01 F6 | 	mov	objptr, local01
24e28     2D 20 62 FD | 	call	local02
24e2c     11 E5 01 F6 | 	mov	objptr, local03
24e30     10 4E 05 F1 | 	add	fp, #16
24e34     A7 FA 61 FC | 	wrlong	result1, fp
24e38     10 4E 85 F1 | 	sub	fp, #16
24e3c     00 FA 55 F2 | 	cmps	result1, #0 wc
24e40     44 00 90 3D |  if_ae	jmp	#LR__3660
24e44     04 4E 05 F1 | 	add	fp, #4
24e48     A7 22 02 FB | 	rdlong	local03, fp
24e4c     11 1F 02 F6 | 	mov	local01, local03
24e50     08 22 06 F1 | 	add	local03, #8
24e54     11 21 02 FB | 	rdlong	local02, local03
24e58     20 20 46 F5 | 	or	local02, #32
24e5c     08 1E 06 F1 | 	add	local01, #8
24e60     0F 21 62 FC | 	wrlong	local02, local01
24e64     0C 4E 05 F1 | 	add	fp, #12
24e68     A7 12 0A FB | 	rdlong	arg01, fp wz
24e6c     10 4E 85 F1 | 	sub	fp, #16
24e70     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e74     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24e78     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e7c     01 FA 65 56 |  if_ne	neg	result1, #1
24e80     00 FA 05 A6 |  if_e	mov	result1, #0
24e84     B4 01 90 FD | 	jmp	#LR__3666
24e88                 | LR__3660
24e88     10 4E 05 F1 | 	add	fp, #16
24e8c     A7 FA 01 FB | 	rdlong	result1, fp
24e90     10 4E 85 F1 | 	sub	fp, #16
24e94     A4 01 90 FD | 	jmp	#LR__3666
24e98                 | LR__3661
24e98     04 4E 05 F1 | 	add	fp, #4
24e9c     A7 12 02 FB | 	rdlong	arg01, fp
24ea0     20 12 06 F1 | 	add	arg01, #32
24ea4     09 13 0A FB | 	rdlong	arg01, arg01 wz
24ea8     14 4E 05 F1 | 	add	fp, #20
24eac     A7 12 62 FC | 	wrlong	arg01, fp
24eb0     18 4E 85 F1 | 	sub	fp, #24
24eb4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24eb8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24ebc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24ec0     01 FA 65 A6 |  if_e	neg	result1, #1
24ec4     74 01 90 AD |  if_e	jmp	#LR__3666
24ec8     04 4E 05 F1 | 	add	fp, #4
24ecc     A7 22 02 FB | 	rdlong	local03, fp
24ed0     04 4E 85 F1 | 	sub	fp, #4
24ed4     28 22 06 F1 | 	add	local03, #40
24ed8     11 21 0A FB | 	rdlong	local02, local03 wz
24edc     7C 00 90 AD |  if_e	jmp	#LR__3663
24ee0     04 4E 05 F1 | 	add	fp, #4
24ee4     A7 12 02 FB | 	rdlong	arg01, fp
24ee8     09 23 02 F6 | 	mov	local03, arg01
24eec     28 22 06 F1 | 	add	local03, #40
24ef0     11 1F 02 FB | 	rdlong	local01, local03
24ef4     0F 21 02 F6 | 	mov	local02, local01
24ef8     13 1E 46 F7 | 	zerox	local01, #19
24efc     14 20 46 F0 | 	shr	local02, #20
24f00     02 20 66 F0 | 	shl	local02, #2
24f04     ED 20 02 F1 | 	add	local02, __methods__
24f08     10 21 02 FB | 	rdlong	local02, local02
24f0c     20 4E 05 F1 | 	add	fp, #32
24f10     A7 16 02 F6 | 	mov	arg03, fp
24f14     24 4E 85 F1 | 	sub	fp, #36
24f18     00 15 06 F6 | 	mov	arg02, #256
24f1c     F2 22 02 F6 | 	mov	local03, objptr
24f20     0F E5 01 F6 | 	mov	objptr, local01
24f24     2D 20 62 FD | 	call	local02
24f28     11 E5 01 F6 | 	mov	objptr, local03
24f2c     10 4E 05 F1 | 	add	fp, #16
24f30     A7 FA 61 FC | 	wrlong	result1, fp
24f34     00 FA 4D F2 | 	cmps	result1, #0 wz
24f38     10 4E 85 F1 | 	sub	fp, #16
24f3c     1C 00 90 5D |  if_ne	jmp	#LR__3662
24f40     24 4E 05 F1 | 	add	fp, #36
24f44     A7 20 02 FB | 	rdlong	local02, fp
24f48     24 4E 85 F1 | 	sub	fp, #36
24f4c     02 20 CE F7 | 	test	local02, #2 wz
24f50     20 4E 05 51 |  if_ne	add	fp, #32
24f54     A7 02 68 5C |  if_ne	wrlong	#1, fp
24f58     20 4E 85 51 |  if_ne	sub	fp, #32
24f5c                 | LR__3662
24f5c                 | LR__3663
24f5c     10 4E 05 F1 | 	add	fp, #16
24f60     A7 00 68 FC | 	wrlong	#0, fp
24f64     10 4E 85 F1 | 	sub	fp, #16
24f68                 | LR__3664
24f68     0C 4E 05 F1 | 	add	fp, #12
24f6c     A7 22 02 FB | 	rdlong	local03, fp
24f70     0C 4E 85 F1 | 	sub	fp, #12
24f74     01 22 16 F2 | 	cmp	local03, #1 wc
24f78     B4 00 90 CD |  if_b	jmp	#LR__3665
24f7c     18 4E 05 F1 | 	add	fp, #24
24f80     A7 20 02 FB | 	rdlong	local02, fp
24f84     10 23 02 F6 | 	mov	local03, local02
24f88     13 22 46 F7 | 	zerox	local03, #19
24f8c     14 20 46 F0 | 	shr	local02, #20
24f90     02 20 66 F0 | 	shl	local02, #2
24f94     ED 20 02 F1 | 	add	local02, __methods__
24f98     10 21 02 FB | 	rdlong	local02, local02
24f9c     14 4E 85 F1 | 	sub	fp, #20
24fa0     A7 12 02 FB | 	rdlong	arg01, fp
24fa4     04 4E 85 F1 | 	sub	fp, #4
24fa8     F2 1E 02 F6 | 	mov	local01, objptr
24fac     11 E5 01 F6 | 	mov	objptr, local03
24fb0     2D 20 62 FD | 	call	local02
24fb4     0F E5 01 F6 | 	mov	objptr, local01
24fb8     14 4E 05 F1 | 	add	fp, #20
24fbc     A7 FA 61 FC | 	wrlong	result1, fp
24fc0     14 4E 85 F1 | 	sub	fp, #20
24fc4     00 FA 55 F2 | 	cmps	result1, #0 wc
24fc8     64 00 90 CD |  if_b	jmp	#LR__3665
24fcc     1C 4E 05 F1 | 	add	fp, #28
24fd0     A7 22 02 FB | 	rdlong	local03, fp
24fd4     11 21 02 F6 | 	mov	local02, local03
24fd8     01 20 06 F1 | 	add	local02, #1
24fdc     A7 20 62 FC | 	wrlong	local02, fp
24fe0     08 4E 85 F1 | 	sub	fp, #8
24fe4     A7 20 02 FB | 	rdlong	local02, fp
24fe8     11 21 42 FC | 	wrbyte	local02, local03
24fec     04 4E 85 F1 | 	sub	fp, #4
24ff0     A7 22 02 FB | 	rdlong	local03, fp
24ff4     01 22 06 F1 | 	add	local03, #1
24ff8     A7 22 62 FC | 	wrlong	local03, fp
24ffc     04 4E 85 F1 | 	sub	fp, #4
25000     A7 22 02 FB | 	rdlong	local03, fp
25004     01 22 86 F1 | 	sub	local03, #1
25008     A7 22 62 FC | 	wrlong	local03, fp
2500c     14 4E 05 F1 | 	add	fp, #20
25010     A7 22 0A FB | 	rdlong	local03, fp wz
25014     20 4E 85 F1 | 	sub	fp, #32
25018     4C FF 9F AD |  if_e	jmp	#LR__3664
2501c     14 4E 05 F1 | 	add	fp, #20
25020     A7 20 02 FB | 	rdlong	local02, fp
25024     14 4E 85 F1 | 	sub	fp, #20
25028     0A 20 0E F2 | 	cmp	local02, #10 wz
2502c     38 FF 9F 5D |  if_ne	jmp	#LR__3664
25030                 | LR__3665
25030     10 4E 05 F1 | 	add	fp, #16
25034     A7 FA 01 FB | 	rdlong	result1, fp
25038     10 4E 85 F1 | 	sub	fp, #16
2503c                 | LR__3666
2503c     A7 F0 03 F6 | 	mov	ptra, fp
25040     B2 00 A0 FD | 	call	#popregs_
25044                 | __system___vfsread_ret
25044     2D 00 64 FD | 	ret
25048                 | 
25048                 | __system____default_filbuf
25048     04 4A 05 F6 | 	mov	COUNT_, #4
2504c     A8 00 A0 FD | 	call	#pushregs_
25050     09 1F 02 F6 | 	mov	local01, arg01
25054     0F 21 02 FB | 	rdlong	local02, local01
25058     0C 20 06 F1 | 	add	local02, #12
2505c     10 FB 09 FB | 	rdlong	result1, local02 wz
25060     0C 20 86 F1 | 	sub	local02, #12
25064     20 00 90 5D |  if_ne	jmp	#LR__3670
25068     14 20 06 F1 | 	add	local02, #20
2506c     10 FB 01 F6 | 	mov	result1, local02
25070     04 20 86 F1 | 	sub	local02, #4
25074     10 FB 61 FC | 	wrlong	result1, local02
25078     04 20 86 F1 | 	sub	local02, #4
2507c     02 00 80 FF 
25080     10 01 68 FC | 	wrlong	##1024, local02
25084     0C 20 86 F1 | 	sub	local02, #12
25088                 | LR__3670
25088     14 1E 06 F1 | 	add	local01, #20
2508c     0F 23 02 FB | 	rdlong	local03, local01
25090     11 25 02 F6 | 	mov	local04, local03
25094     14 1E 86 F1 | 	sub	local01, #20
25098     13 24 46 F7 | 	zerox	local04, #19
2509c     14 22 46 F0 | 	shr	local03, #20
250a0     02 22 66 F0 | 	shl	local03, #2
250a4     ED 22 02 F1 | 	add	local03, __methods__
250a8     11 23 02 FB | 	rdlong	local03, local03
250ac     10 20 06 F1 | 	add	local02, #16
250b0     10 15 02 FB | 	rdlong	arg02, local02
250b4     04 20 86 F1 | 	sub	local02, #4
250b8     10 17 02 FB | 	rdlong	arg03, local02
250bc     0C 20 86 F1 | 	sub	local02, #12
250c0     0F 13 02 F6 | 	mov	arg01, local01
250c4     F2 1E 02 F6 | 	mov	local01, objptr
250c8     12 E5 01 F6 | 	mov	objptr, local04
250cc     2D 22 62 FD | 	call	local03
250d0     0F E5 01 F6 | 	mov	objptr, local01
250d4     FD 24 02 F6 | 	mov	local04, result1
250d8     00 24 56 F2 | 	cmps	local04, #0 wc
250dc     01 FA 65 C6 |  if_b	neg	result1, #1
250e0     28 00 90 CD |  if_b	jmp	#LR__3671
250e4     10 25 62 FC | 	wrlong	local04, local02
250e8     10 20 06 F1 | 	add	local02, #16
250ec     10 23 02 FB | 	rdlong	local03, local02
250f0     0C 20 86 F1 | 	sub	local02, #12
250f4     10 23 62 FC | 	wrlong	local03, local02
250f8     04 20 06 F1 | 	add	local02, #4
250fc     10 23 02 FB | 	rdlong	local03, local02
25100     01 22 46 F5 | 	or	local03, #1
25104     10 23 62 FC | 	wrlong	local03, local02
25108     12 FB 01 F6 | 	mov	result1, local04
2510c                 | LR__3671
2510c     A7 F0 03 F6 | 	mov	ptra, fp
25110     B2 00 A0 FD | 	call	#popregs_
25114                 | __system____default_filbuf_ret
25114     2D 00 64 FD | 	ret
25118                 | 
25118                 | __system__getlower_1027
25118     41 12 56 F2 | 	cmps	arg01, #65 wc
2511c     10 00 90 CD |  if_b	jmp	#LR__3680
25120     5B 12 56 F2 | 	cmps	arg01, #91 wc
25124     09 FB 01 C6 |  if_b	mov	result1, arg01
25128     20 FA 05 C1 |  if_b	add	result1, #32
2512c     04 00 90 CD |  if_b	jmp	#__system__getlower_1027_ret
25130                 | LR__3680
25130     09 FB 01 F6 | 	mov	result1, arg01
25134                 | __system__getlower_1027_ret
25134     2D 00 64 FD | 	ret
25138                 | 
25138                 | __system___pat_match
25138     08 4A 05 F6 | 	mov	COUNT_, #8
2513c     A8 00 A0 FD | 	call	#pushregs_
25140     09 1F 02 F6 | 	mov	local01, arg01
25144                 | LR__3690
25144     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
25148     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2514c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
25150     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
25154     2C 00 90 AD |  if_e	jmp	#LR__3691
25158     0A 13 C2 FA | 	rdbyte	arg01, arg02
2515c     B8 FF BF FD | 	call	#__system__getlower_1027
25160     FD 22 02 F6 | 	mov	local03, result1
25164     0F 13 C2 FA | 	rdbyte	arg01, local01
25168     AC FF BF FD | 	call	#__system__getlower_1027
2516c     11 FB 09 F2 | 	cmp	result1, local03 wz
25170     00 FA 05 56 |  if_ne	mov	result1, #0
25174     FC 00 90 5D |  if_ne	jmp	#LR__3699
25178     01 1E 06 F1 | 	add	local01, #1
2517c     01 14 06 F1 | 	add	arg02, #1
25180     C0 FF 9F FD | 	jmp	#LR__3690
25184                 | LR__3691
25184     0A 23 C2 FA | 	rdbyte	local03, arg02
25188     2A 22 0E F2 | 	cmp	local03, #42 wz
2518c     D4 00 90 5D |  if_ne	jmp	#LR__3698
25190     01 14 06 F1 | 	add	arg02, #1
25194     0A 21 C2 FA | 	rdbyte	local02, arg02
25198     01 14 86 F1 | 	sub	arg02, #1
2519c     2E 20 0E F2 | 	cmp	local02, #46 wz
251a0     28 00 90 5D |  if_ne	jmp	#LR__3692
251a4     02 14 06 F1 | 	add	arg02, #2
251a8     0A 21 C2 FA | 	rdbyte	local02, arg02
251ac     02 14 86 F1 | 	sub	arg02, #2
251b0     2A 20 0E F2 | 	cmp	local02, #42 wz
251b4     03 14 06 A1 |  if_e	add	arg02, #3
251b8     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
251bc     03 14 86 A1 |  if_e	sub	arg02, #3
251c0     12 27 0A A6 |  if_e	mov	local05, local04 wz
251c4     01 FA 05 A6 |  if_e	mov	result1, #1
251c8     A8 00 90 AD |  if_e	jmp	#LR__3699
251cc                 | LR__3692
251cc     01 14 06 F1 | 	add	arg02, #1
251d0     00 28 06 F6 | 	mov	local06, #0
251d4     97 1E 48 FB | 	callpa	#(@LR__3695-@LR__3693)>>2,fcache_load_ptr_
251d8                 | LR__3693
251d8     14 2B 02 F6 | 	mov	local07, local06
251dc     0A 2B 02 F1 | 	add	local07, arg02
251e0     15 2B CA FA | 	rdbyte	local07, local07 wz
251e4     14 27 02 56 |  if_ne	mov	local05, local06
251e8     01 26 06 51 |  if_ne	add	local05, #1
251ec     13 29 02 56 |  if_ne	mov	local06, local05
251f0     E4 FF 9F 5D |  if_ne	jmp	#LR__3693
251f4     00 2C 06 F6 | 	mov	local08, #0
251f8                 | LR__3694
251f8     16 2B 02 F6 | 	mov	local07, local08
251fc     0F 2B 02 F1 | 	add	local07, local01
25200     15 2B CA FA | 	rdbyte	local07, local07 wz
25204     16 27 02 56 |  if_ne	mov	local05, local08
25208     01 26 06 51 |  if_ne	add	local05, #1
2520c     13 2D 02 56 |  if_ne	mov	local08, local05
25210     E4 FF 9F 5D |  if_ne	jmp	#LR__3694
25214                 | LR__3695
25214     14 2D 52 F2 | 	cmps	local08, local06 wc
25218     00 FA 05 C6 |  if_b	mov	result1, #0
2521c     54 00 90 CD |  if_b	jmp	#LR__3699
25220     16 21 02 F6 | 	mov	local02, local08
25224     14 21 82 F1 | 	sub	local02, local06
25228     10 1F 02 F1 | 	add	local01, local02
2522c                 | LR__3696
2522c     01 28 56 F2 | 	cmps	local06, #1 wc
25230     30 00 90 CD |  if_b	jmp	#LR__3697
25234     0F 13 C2 FA | 	rdbyte	arg01, local01
25238     DC FE BF FD | 	call	#__system__getlower_1027
2523c     FD 2C 02 F6 | 	mov	local08, result1
25240     0A 13 C2 FA | 	rdbyte	arg01, arg02
25244     D0 FE BF FD | 	call	#__system__getlower_1027
25248     FD 2C 0A F2 | 	cmp	local08, result1 wz
2524c     00 FA 05 56 |  if_ne	mov	result1, #0
25250     20 00 90 5D |  if_ne	jmp	#LR__3699
25254     01 1E 06 F1 | 	add	local01, #1
25258     01 14 06 F1 | 	add	arg02, #1
2525c     01 28 86 F1 | 	sub	local06, #1
25260     C8 FF 9F FD | 	jmp	#LR__3696
25264                 | LR__3697
25264                 | LR__3698
25264     0A 2D CA FA | 	rdbyte	local08, arg02 wz
25268     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
2526c     01 FA 05 A6 |  if_e	mov	result1, #1
25270     00 FA 05 56 |  if_ne	mov	result1, #0
25274                 | LR__3699
25274     A7 F0 03 F6 | 	mov	ptra, fp
25278     B2 00 A0 FD | 	call	#popregs_
2527c                 | __system___pat_match_ret
2527c     2D 00 64 FD | 	ret
25280                 | 
25280                 | _fatfs_cc_ff_uni2oem
25280     00 00 06 F6 | 	mov	_var01, #0
25284     80 12 16 F2 | 	cmp	arg01, #128 wc
25288     09 01 02 C6 |  if_b	mov	_var01, arg01
2528c     58 00 90 CD |  if_b	jmp	#LR__3704
25290     80 00 00 FF 
25294     00 12 16 F2 | 	cmp	arg01, ##65536 wc
25298     4C 00 90 3D |  if_ae	jmp	#LR__3703
2529c     0A FB 31 F9 | 	getword	result1, arg02, #0
252a0     01 00 00 FF 
252a4     52 FB 0D F2 | 	cmp	result1, ##850 wz
252a8     3C 00 90 5D |  if_ne	jmp	#LR__3703
252ac                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
252ac     00 00 06 F6 | 	mov	_var01, #0
252b0     97 14 48 FB | 	callpa	#(@LR__3701-@LR__3700)>>2,fcache_load_ptr_
252b4                 | LR__3700
252b4     00 FB 31 F9 | 	getword	result1, _var01, #0
252b8     80 FA 15 F2 | 	cmp	result1, #128 wc
252bc     1C 00 90 3D |  if_ae	jmp	#LR__3702
252c0     00 FB 31 F9 | 	getword	result1, _var01, #0
252c4     01 FA 65 F0 | 	shl	result1, #1
252c8     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
252cc     FD FA E1 FA | 	rdword	result1, result1
252d0     FD 12 0A F2 | 	cmp	arg01, result1 wz
252d4     01 00 06 51 |  if_ne	add	_var01, #1
252d8     D8 FF 9F 5D |  if_ne	jmp	#LR__3700
252dc                 | LR__3701
252dc                 | LR__3702
252dc     00 01 32 F9 | 	getword	_var01, _var01, #0
252e0     80 00 06 F1 | 	add	_var01, #128
252e4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
252e8                 | LR__3703
252e8                 | LR__3704
252e8                 | ' 			c = (c + 0x80) & 0xFF;
252e8                 | ' 		}
252e8                 | ' 	}
252e8                 | ' 
252e8                 | ' 	return c;
252e8     00 FB 01 F6 | 	mov	result1, _var01
252ec                 | _fatfs_cc_ff_uni2oem_ret
252ec     2D 00 64 FD | 	ret
252f0                 | 
252f0                 | _fatfs_cc_ff_oem2uni
252f0     00 00 06 F6 | 	mov	_var01, #0
252f4     09 FB 31 F9 | 	getword	result1, arg01, #0
252f8     80 FA 15 F2 | 	cmp	result1, #128 wc
252fc     09 01 02 C6 |  if_b	mov	_var01, arg01
25300     2C 00 90 CD |  if_b	jmp	#LR__3711
25304     0A 15 32 F9 | 	getword	arg02, arg02, #0
25308     01 00 00 FF 
2530c     52 15 0E F2 | 	cmp	arg02, ##850 wz
25310     1C 00 90 5D |  if_ne	jmp	#LR__3710
25314     09 FB 31 F9 | 	getword	result1, arg01, #0
25318     00 FB 15 F2 | 	cmp	result1, #256 wc
2531c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
25320     80 12 86 C1 |  if_b	sub	arg01, #128
25324     01 12 66 C0 |  if_b	shl	arg01, #1
25328     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2532c     09 01 E2 CA |  if_b	rdword	_var01, arg01
25330                 | LR__3710
25330                 | LR__3711
25330                 | ' 		}
25330                 | ' 	}
25330                 | ' 
25330                 | ' 	return c;
25330     00 FB 01 F6 | 	mov	result1, _var01
25334                 | _fatfs_cc_ff_oem2uni_ret
25334     2D 00 64 FD | 	ret
25338                 | 
25338                 | _fatfs_cc_ff_wtoupper
25338     09 01 02 F6 | 	mov	_var01, arg01
2533c     80 00 00 FF 
25340     00 00 16 F2 | 	cmp	_var01, ##65536 wc
25344     60 01 90 3D |  if_ae	jmp	#LR__3733
25348     00 03 02 F6 | 	mov	_var02, _var01
2534c     01 01 32 F9 | 	getword	_var01, _var02, #0
25350     08 00 00 FF 
25354     00 00 16 F2 | 	cmp	_var01, ##4096 wc
25358     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2535c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
25360     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
25364     01 00 00 3F 
25368     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2536c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
25370     01 00 00 3F 
25374     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
25378     02 07 02 F6 | 	mov	_var04, _var03
2537c                 | ' 		uc = (WORD)uni;
2537c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2537c                 | ' 		for (;;) {
2537c                 | LR__3720
2537c     03 09 E2 FA | 	rdword	_var05, _var04
25380     04 05 02 F6 | 	mov	_var03, _var05
25384     0F 04 4E F7 | 	zerox	_var03, #15 wz
25388     02 06 06 F1 | 	add	_var04, #2
2538c     14 01 90 AD |  if_e	jmp	#LR__3732
25390     01 05 32 F9 | 	getword	_var03, _var02, #0
25394     04 01 32 F9 | 	getword	_var01, _var05, #0
25398     00 05 12 F2 | 	cmp	_var03, _var01 wc
2539c     04 01 90 CD |  if_b	jmp	#LR__3732
253a0     03 0B E2 FA | 	rdword	_var06, _var04
253a4     05 0D 32 F9 | 	getword	_var07, _var06, #0
253a8     08 0C 46 F0 | 	shr	_var07, #8
253ac     05 0B 32 F9 | 	getword	_var06, _var06, #0
253b0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
253b4     01 05 32 F9 | 	getword	_var03, _var02, #0
253b8     04 0F 32 F9 | 	getword	_var08, _var05, #0
253bc     05 01 32 F9 | 	getword	_var01, _var06, #0
253c0     00 0F 02 F1 | 	add	_var08, _var01
253c4     07 05 52 F2 | 	cmps	_var03, _var08 wc
253c8     02 06 06 F1 | 	add	_var04, #2
253cc     C4 00 90 3D |  if_ae	jmp	#LR__3731
253d0                 | ' 				switch (cmd) {
253d0     06 11 32 F9 | 	getword	_var09, _var07, #0
253d4     09 10 26 F3 | 	fle	_var09, #9
253d8     30 10 62 FD | 	jmprel	_var09
253dc                 | LR__3721
253dc     24 00 90 FD | 	jmp	#LR__3722
253e0     3C 00 90 FD | 	jmp	#LR__3723
253e4     54 00 90 FD | 	jmp	#LR__3724
253e8     5C 00 90 FD | 	jmp	#LR__3725
253ec     64 00 90 FD | 	jmp	#LR__3726
253f0     6C 00 90 FD | 	jmp	#LR__3727
253f4     74 00 90 FD | 	jmp	#LR__3728
253f8     7C 00 90 FD | 	jmp	#LR__3729
253fc     84 00 90 FD | 	jmp	#LR__3730
25400     A0 00 90 FD | 	jmp	#LR__3732
25404                 | LR__3722
25404     01 03 32 F9 | 	getword	_var02, _var02, #0
25408     04 09 32 F9 | 	getword	_var05, _var05, #0
2540c     04 03 82 F1 | 	sub	_var02, _var05
25410     01 02 66 F0 | 	shl	_var02, #1
25414     03 03 02 F1 | 	add	_var02, _var04
25418     01 03 E2 FA | 	rdword	_var02, _var02
2541c     84 00 90 FD | 	jmp	#LR__3732
25420                 | LR__3723
25420     01 05 32 F9 | 	getword	_var03, _var02, #0
25424     01 03 32 F9 | 	getword	_var02, _var02, #0
25428     04 09 32 F9 | 	getword	_var05, _var05, #0
2542c     04 03 82 F1 | 	sub	_var02, _var05
25430     01 02 06 F5 | 	and	_var02, #1
25434     02 03 C2 F2 | 	subr	_var02, _var03
25438     68 00 90 FD | 	jmp	#LR__3732
2543c                 | LR__3724
2543c     01 03 32 F9 | 	getword	_var02, _var02, #0
25440     10 02 86 F1 | 	sub	_var02, #16
25444     5C 00 90 FD | 	jmp	#LR__3732
25448                 | LR__3725
25448     01 03 32 F9 | 	getword	_var02, _var02, #0
2544c     20 02 86 F1 | 	sub	_var02, #32
25450     50 00 90 FD | 	jmp	#LR__3732
25454                 | LR__3726
25454     01 03 32 F9 | 	getword	_var02, _var02, #0
25458     30 02 86 F1 | 	sub	_var02, #48
2545c     44 00 90 FD | 	jmp	#LR__3732
25460                 | LR__3727
25460     01 03 32 F9 | 	getword	_var02, _var02, #0
25464     1A 02 86 F1 | 	sub	_var02, #26
25468     38 00 90 FD | 	jmp	#LR__3732
2546c                 | LR__3728
2546c     01 03 32 F9 | 	getword	_var02, _var02, #0
25470     08 02 06 F1 | 	add	_var02, #8
25474     2C 00 90 FD | 	jmp	#LR__3732
25478                 | LR__3729
25478     01 03 32 F9 | 	getword	_var02, _var02, #0
2547c     50 02 86 F1 | 	sub	_var02, #80
25480     20 00 90 FD | 	jmp	#LR__3732
25484                 | LR__3730
25484     01 03 32 F9 | 	getword	_var02, _var02, #0
25488     0E 00 00 FF 
2548c     60 02 86 F1 | 	sub	_var02, ##7264
25490                 | ' 				}
25490                 | ' 				break;
25490     10 00 90 FD | 	jmp	#LR__3732
25494                 | LR__3731
25494     0F 0C 4E F7 | 	zerox	_var07, #15 wz
25498     02 0A 06 AA |  if_e	mul	_var06, #2
2549c     05 07 02 A1 |  if_e	add	_var04, _var06
254a0     D8 FE 9F FD | 	jmp	#LR__3720
254a4                 | LR__3732
254a4     01 01 32 F9 | 	getword	_var01, _var02, #0
254a8                 | LR__3733
254a8                 | ' 		}
254a8                 | ' 		uni = uc;
254a8                 | ' 	}
254a8                 | ' 
254a8                 | ' 	return uni;
254a8     00 FB 01 F6 | 	mov	result1, _var01
254ac                 | _fatfs_cc_ff_wtoupper_ret
254ac     2D 00 64 FD | 	ret
254b0                 | 
254b0                 | _fatfs_cc_strncpy
254b0     09 01 02 F6 | 	mov	_var01, arg01
254b4     97 12 48 FB | 	callpa	#(@LR__3741-@LR__3740)>>2,fcache_load_ptr_
254b8                 | ' 
254b8                 | ' 	dscan = dst;
254b8                 | ' 	sscan = src;
254b8                 | ' 	count = n;
254b8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
254b8                 | LR__3740
254b8     01 16 86 F1 | 	sub	arg03, #1
254bc     00 16 56 F2 | 	cmps	arg03, #0 wc
254c0     18 00 90 CD |  if_b	jmp	#LR__3742
254c4     0A FB C1 FA | 	rdbyte	result1, arg02
254c8     00 FB 41 FC | 	wrbyte	result1, _var01
254cc     01 14 06 F1 | 	add	arg02, #1
254d0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
254d4                 | ' 		continue;
254d4     01 00 06 F1 | 	add	_var01, #1
254d8     DC FF 9F 5D |  if_ne	jmp	#LR__3740
254dc                 | LR__3741
254dc                 | LR__3742
254dc     97 0C 48 FB | 	callpa	#(@LR__3744-@LR__3743)>>2,fcache_load_ptr_
254e0                 | ' 	while (--count >= 0)
254e0                 | LR__3743
254e0     01 16 86 F1 | 	sub	arg03, #1
254e4     00 16 56 F2 | 	cmps	arg03, #0 wc
254e8     00 03 02 36 |  if_ae	mov	_var02, _var01
254ec     01 00 06 31 |  if_ae	add	_var01, #1
254f0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
254f4     E8 FF 9F 3D |  if_ae	jmp	#LR__3743
254f8                 | LR__3744
254f8                 | ' 		*dscan++ = '\0';
254f8                 | ' 	return(dst);
254f8     09 FB 01 F6 | 	mov	result1, arg01
254fc                 | _fatfs_cc_strncpy_ret
254fc     2D 00 64 FD | 	ret
25500                 | 
25500                 | _fatfs_cc_memcmp
25500                 | ' 	for (n = size; n > 0; n--)
25500     00 16 0E F2 | 	cmp	arg03, #0 wz
25504     28 00 90 AD |  if_e	jmp	#LR__3751
25508                 | LR__3750
25508     09 01 C2 FA | 	rdbyte	_var01, arg01
2550c     0A 03 C2 FA | 	rdbyte	_var02, arg02
25510     01 01 0A F2 | 	cmp	_var01, _var02 wz
25514     01 12 06 A1 |  if_e	add	arg01, #1
25518     01 14 06 A1 |  if_e	add	arg02, #1
2551c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2551c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
25520     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25524     01 FB 81 51 |  if_ne	sub	result1, _var02
25528     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2552c     F6 17 6E FB | 	djnz	arg03, #LR__3750
25530                 | LR__3751
25530                 | ' 
25530                 | ' 	return(0);
25530     00 FA 05 F6 | 	mov	result1, #0
25534                 | _fatfs_cc_memcmp_ret
25534     2D 00 64 FD | 	ret
25538                 | 
25538                 | _fatfs_cc_strncmp
25538     09 01 0A F6 | 	mov	_var01, arg01 wz
2553c     14 00 90 5D |  if_ne	jmp	#LR__3760
25540                 | ' 		return scan2 ? -1 : 0;
25540     00 14 0E F2 | 	cmp	arg02, #0 wz
25544     01 02 66 56 |  if_ne	neg	_var02, #1
25548     00 02 06 A6 |  if_e	mov	_var02, #0
2554c     01 FB 01 F6 | 	mov	result1, _var02
25550     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
25554                 | LR__3760
25554     00 14 0E F2 | 	cmp	arg02, #0 wz
25558     01 FA 05 A6 |  if_e	mov	result1, #1
2555c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25560     0B 05 02 F6 | 	mov	_var03, arg03
25564     97 16 48 FB | 	callpa	#(@LR__3762-@LR__3761)>>2,fcache_load_ptr_
25568                 | ' 	count = n;
25568                 | ' 	do {
25568                 | LR__3761
25568     00 07 C2 FA | 	rdbyte	_var04, _var01
2556c     0A 09 02 F6 | 	mov	_var05, arg02
25570     04 0B C2 FA | 	rdbyte	_var06, _var05
25574     01 04 86 F1 | 	sub	_var03, #1
25578     00 04 56 F2 | 	cmps	_var03, #0 wc
2557c     01 00 06 F1 | 	add	_var01, #1
25580     01 14 06 F1 | 	add	arg02, #1
25584     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25588     08 00 90 2D |  if_nc_and_z	jmp	#LR__3763
2558c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25590     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3761
25594                 | LR__3762
25594                 | LR__3763
25594     00 04 56 F2 | 	cmps	_var03, #0 wc
25598                 | ' 		return(0);
25598     00 FA 05 C6 |  if_b	mov	result1, #0
2559c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
255a0     05 07 0A F2 | 	cmp	_var04, _var06 wz
255a4                 | ' 		return(0);
255a4     00 FA 05 A6 |  if_e	mov	result1, #0
255a8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
255ac     00 06 0E F2 | 	cmp	_var04, #0 wz
255b0                 | ' 		return(-1);
255b0     01 FA 65 A6 |  if_e	neg	result1, #1
255b4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
255b8     00 0A 0E F2 | 	cmp	_var06, #0 wz
255bc                 | ' 		return(1);
255bc     01 FA 05 A6 |  if_e	mov	result1, #1
255c0                 | ' 		return(c1 - c2);
255c0     03 FB 01 56 |  if_ne	mov	result1, _var04
255c4     05 FB 81 51 |  if_ne	sub	result1, _var06
255c8                 | _fatfs_cc_strncmp_ret
255c8     2D 00 64 FD | 	ret
255cc                 | 
255cc                 | _fatfs_cc_strchr
255cc                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
255cc                 | ' 	while ((c = *s++) != (char) charwanted)
255cc                 | LR__3770
255cc     09 01 02 F6 | 	mov	_var01, arg01
255d0     00 03 C2 FA | 	rdbyte	_var02, _var01
255d4     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
255d8     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
255dc     03 05 0A F2 | 	cmp	_var03, _var04 wz
255e0     01 12 06 F1 | 	add	arg01, #1
255e4     14 00 90 AD |  if_e	jmp	#LR__3771
255e8     01 05 02 F6 | 	mov	_var03, _var02
255ec     07 04 4E F7 | 	zerox	_var03, #7 wz
255f0     00 FA 05 A6 |  if_e	mov	result1, #0
255f4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
255f8     D0 FF 9F FD | 	jmp	#LR__3770
255fc                 | LR__3771
255fc                 | ' 	return((char *)--s);
255fc     01 12 86 F1 | 	sub	arg01, #1
25600     09 FB 01 F6 | 	mov	result1, arg01
25604                 | _fatfs_cc_strchr_ret
25604     2D 00 64 FD | 	ret
25608                 | 
25608                 | _fatfs_cc_disk_initialize
25608     04 4A 05 F6 | 	mov	COUNT_, #4
2560c     A8 00 A0 FD | 	call	#pushregs_
25610     40 F0 07 F1 | 	add	ptra, #64
25614     04 4E 05 F1 | 	add	fp, #4
25618     A7 12 42 FC | 	wrbyte	arg01, fp
2561c     01 00 00 FF 
25620     14 E4 05 F1 | 	add	objptr, ##532
25624     F2 18 02 FB | 	rdlong	arg04, objptr
25628     2C 4E 05 F1 | 	add	fp, #44
2562c     A7 18 62 FC | 	wrlong	arg04, fp
25630     04 E4 85 F1 | 	sub	objptr, #4
25634     F2 18 02 FB | 	rdlong	arg04, objptr
25638     04 4E 05 F1 | 	add	fp, #4
2563c     A7 18 62 FC | 	wrlong	arg04, fp
25640     08 E4 05 F1 | 	add	objptr, #8
25644     F2 18 02 FB | 	rdlong	arg04, objptr
25648     04 4E 05 F1 | 	add	fp, #4
2564c     A7 18 62 FC | 	wrlong	arg04, fp
25650     04 E4 05 F1 | 	add	objptr, #4
25654     F2 18 02 FB | 	rdlong	arg04, objptr
25658     04 4E 05 F1 | 	add	fp, #4
2565c     A7 18 62 FC | 	wrlong	arg04, fp
25660     04 E4 05 F1 | 	add	objptr, #4
25664     F2 02 48 FC | 	wrbyte	#1, objptr
25668     01 00 00 FF 
2566c     20 E4 85 F1 | 	sub	objptr, ##544
25670     38 4E 85 F1 | 	sub	fp, #56
25674     A7 18 CA FA | 	rdbyte	arg04, fp wz
25678     04 4E 85 F1 | 	sub	fp, #4
2567c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2567c                 | '             return RES_NOTRDY;
2567c     03 FA 05 56 |  if_ne	mov	result1, #3
25680     D8 05 90 5D |  if_ne	jmp	#LR__3798
25684     13 00 00 FF 
25688     10 13 06 F6 | 	mov	arg01, ##10000
2568c     9C 9A BF FD | 	call	#__system___waitus
25690     30 4E 05 F1 | 	add	fp, #48
25694     A7 12 02 FB | 	rdlong	arg01, fp
25698     09 01 08 FC | 	wrpin	#0, arg01
2569c     04 4E 05 F1 | 	add	fp, #4
256a0     A7 12 02 FB | 	rdlong	arg01, fp
256a4     09 01 08 FC | 	wrpin	#0, arg01
256a8     04 4E 05 F1 | 	add	fp, #4
256ac     A7 12 02 FB | 	rdlong	arg01, fp
256b0     09 01 08 FC | 	wrpin	#0, arg01
256b4     04 4E 05 F1 | 	add	fp, #4
256b8     A7 12 02 FB | 	rdlong	arg01, fp
256bc     09 00 80 FF 
256c0     09 01 08 FC | 	wrpin	##4608, arg01
256c4     0C 4E 85 F1 | 	sub	fp, #12
256c8     A7 12 02 FB | 	rdlong	arg01, fp
256cc     59 12 62 FD | 	drvh	arg01
256d0     04 4E 05 F1 | 	add	fp, #4
256d4     A7 12 02 FB | 	rdlong	arg01, fp
256d8     59 12 62 FD | 	drvh	arg01
256dc     04 4E 05 F1 | 	add	fp, #4
256e0     A7 12 02 FB | 	rdlong	arg01, fp
256e4     59 12 62 FD | 	drvh	arg01
256e8     04 4E 05 F1 | 	add	fp, #4
256ec     A7 12 02 FB | 	rdlong	arg01, fp
256f0     59 12 62 FD | 	drvh	arg01
256f4     20 4E 85 F1 | 	sub	fp, #32
256f8     00 04 80 FF 
256fc     A7 20 68 FC | 	wrlong	##524304, fp
25700     04 4E 05 F1 | 	add	fp, #4
25704     20 03 80 FF 
25708     A7 90 68 FC | 	wrlong	##409672, fp
2570c     14 4E 05 F1 | 	add	fp, #20
25710     A7 1E 02 FB | 	rdlong	local01, fp
25714     18 4E 85 F1 | 	sub	fp, #24
25718     A7 16 02 FB | 	rdlong	arg03, fp
2571c     40 1E 62 FD | 	dirl	local01
25720     A0 03 80 FF 
25724     0F 91 08 FC | 	wrpin	##475208, local01
25728     0F 17 12 FC | 	wxpin	arg03, local01
2572c     0F 01 28 FC | 	wypin	#0, local01
25730     41 1E 62 FD | 	dirh	local01
25734     1C 4E 05 F1 | 	add	fp, #28
25738     A7 20 02 FB | 	rdlong	local02, fp
2573c     10 1F 82 F1 | 	sub	local01, local02
25740     07 1E 06 F5 | 	and	local01, #7
25744     18 1E 66 F0 | 	shl	local01, #24
25748     78 14 06 F6 | 	mov	arg02, #120
2574c     0F 15 42 F5 | 	or	arg02, local01
25750     14 4E 85 F1 | 	sub	fp, #20
25754     A7 14 62 FC | 	wrlong	arg02, fp
25758     14 4E 05 F1 | 	add	fp, #20
2575c     A7 12 02 FB | 	rdlong	arg01, fp
25760     10 14 26 F4 | 	bith	arg02, #16
25764     40 12 62 FD | 	dirl	arg01
25768     09 15 02 FC | 	wrpin	arg02, arg01
2576c     09 3F 18 FC | 	wxpin	#31, arg01
25770     FF FF FF FF 
25774     09 FF 2B FC | 	wypin	##-1, arg01
25778     41 12 62 FD | 	dirh	arg01
2577c     04 4E 85 F1 | 	sub	fp, #4
25780     A7 14 02 FB | 	rdlong	arg02, fp
25784     08 4E 05 F1 | 	add	fp, #8
25788     A7 22 02 FB | 	rdlong	local03, fp
2578c     11 15 82 F1 | 	sub	arg02, local03
25790     07 14 06 F5 | 	and	arg02, #7
25794     18 14 66 F0 | 	shl	arg02, #24
25798     14 4E 85 F1 | 	sub	fp, #20
2579c     A7 14 62 FC | 	wrlong	arg02, fp
257a0     29 00 00 FF 
257a4     7A 14 46 F5 | 	or	arg02, ##21114
257a8     A7 14 62 FC | 	wrlong	arg02, fp
257ac     14 4E 05 F1 | 	add	fp, #20
257b0     A7 12 02 FB | 	rdlong	arg01, fp
257b4     40 12 62 FD | 	dirl	arg01
257b8     09 15 02 FC | 	wrpin	arg02, arg01
257bc     09 4F 18 FC | 	wxpin	#39, arg01
257c0     09 01 28 FC | 	wypin	#0, arg01
257c4     41 12 62 FD | 	dirh	arg01
257c8     28 4E 85 F1 | 	sub	fp, #40
257cc     A7 12 02 F6 | 	mov	arg01, fp
257d0     14 4E 85 F1 | 	sub	fp, #20
257d4     0A 14 06 F6 | 	mov	arg02, #10
257d8     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1061
257dc     00 12 06 F6 | 	mov	arg01, #0
257e0     00 14 06 F6 | 	mov	arg02, #0
257e4     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
257e8     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1071
257ec     64 12 06 F6 | 	mov	arg01, #100
257f0     38 99 BF FD | 	call	#__system___waitus
257f4     14 4E 05 F1 | 	add	fp, #20
257f8     A7 12 02 F6 | 	mov	arg01, fp
257fc     14 4E 85 F1 | 	sub	fp, #20
25800     0A 14 06 F6 | 	mov	arg02, #10
25804     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1061
25808     0C 4E 05 F1 | 	add	fp, #12
2580c     A7 00 48 FC | 	wrbyte	#0, fp
25810     0C 4E 85 F1 | 	sub	fp, #12
25814     00 12 06 F6 | 	mov	arg01, #0
25818     00 14 06 F6 | 	mov	arg02, #0
2581c     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25820     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
25824     01 18 0E F2 | 	cmp	arg04, #1 wz
25828     B8 03 90 5D |  if_ne	jmp	#LR__3797
2582c     08 12 06 F6 | 	mov	arg01, #8
25830     AA 15 06 F6 | 	mov	arg02, #426
25834     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25838     FD FA E1 F8 | 	getbyte	result1, result1, #0
2583c     01 FA 0D F2 | 	cmp	result1, #1 wz
25840     98 01 90 5D |  if_ne	jmp	#LR__3783
25844     14 4E 05 F1 | 	add	fp, #20
25848     A7 12 02 F6 | 	mov	arg01, fp
2584c     14 4E 85 F1 | 	sub	fp, #20
25850     04 14 06 F6 | 	mov	arg02, #4
25854     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1061
25858     16 4E 05 F1 | 	add	fp, #22
2585c     A7 24 C2 FA | 	rdbyte	local04, fp
25860     16 4E 85 F1 | 	sub	fp, #22
25864     01 24 0E F2 | 	cmp	local04, #1 wz
25868     17 4E 05 A1 |  if_e	add	fp, #23
2586c     A7 22 C2 AA |  if_e	rdbyte	local03, fp
25870     17 4E 85 A1 |  if_e	sub	fp, #23
25874     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
25878     68 03 90 5D |  if_ne	jmp	#LR__3796
2587c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2587c     18 4E 05 F1 | 	add	fp, #24
25880     01 00 80 FF 
25884     A7 D0 6B FC | 	wrlong	##1000, fp
25888     18 4E 85 F1 | 	sub	fp, #24
2588c                 | LR__3780
2588c     18 4E 05 F1 | 	add	fp, #24
25890     A7 1E 0A FB | 	rdlong	local01, fp wz
25894     18 4E 85 F1 | 	sub	fp, #24
25898     3C 00 90 AD |  if_e	jmp	#LR__3781
2589c     A9 12 06 F6 | 	mov	arg01, #169
258a0     1E 14 C6 F9 | 	decod	arg02, #30
258a4     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
258a8     FD 24 02 F6 | 	mov	local04, result1
258ac     07 24 4E F7 | 	zerox	local04, #7 wz
258b0     24 00 90 AD |  if_e	jmp	#LR__3781
258b4     01 00 00 FF 
258b8     E8 13 06 F6 | 	mov	arg01, ##1000
258bc     6C 98 BF FD | 	call	#__system___waitus
258c0     18 4E 05 F1 | 	add	fp, #24
258c4     A7 24 02 FB | 	rdlong	local04, fp
258c8     01 24 86 F1 | 	sub	local04, #1
258cc     A7 24 62 FC | 	wrlong	local04, fp
258d0     18 4E 85 F1 | 	sub	fp, #24
258d4     B4 FF 9F FD | 	jmp	#LR__3780
258d8                 | LR__3781
258d8     18 4E 05 F1 | 	add	fp, #24
258dc     A7 24 0A FB | 	rdlong	local04, fp wz
258e0     18 4E 85 F1 | 	sub	fp, #24
258e4     4C 00 90 AD |  if_e	jmp	#LR__3782
258e8     3A 12 06 F6 | 	mov	arg01, #58
258ec     00 14 06 F6 | 	mov	arg02, #0
258f0     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
258f4     FD 22 02 F6 | 	mov	local03, result1
258f8     07 22 4E F7 | 	zerox	local03, #7 wz
258fc     34 00 90 5D |  if_ne	jmp	#LR__3782
25900     14 4E 05 F1 | 	add	fp, #20
25904     A7 12 02 F6 | 	mov	arg01, fp
25908     14 4E 85 F1 | 	sub	fp, #20
2590c     04 14 06 F6 | 	mov	arg02, #4
25910     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1061
25914     14 4E 05 F1 | 	add	fp, #20
25918     A7 1E C2 FA | 	rdbyte	local01, fp
2591c     40 1E CE F7 | 	test	local01, #64 wz
25920     0C 24 06 56 |  if_ne	mov	local04, #12
25924     04 24 06 A6 |  if_e	mov	local04, #4
25928     08 4E 85 F1 | 	sub	fp, #8
2592c     A7 24 42 FC | 	wrbyte	local04, fp
25930     0C 4E 85 F1 | 	sub	fp, #12
25934                 | LR__3782
25934     14 24 06 FB | 	rdlong	local04, #20
25938     18 4E 05 F1 | 	add	fp, #24
2593c     A7 24 62 FC | 	wrlong	local04, fp
25940     0C 4E 05 F1 | 	add	fp, #12
25944     A7 24 02 FB | 	rdlong	local04, fp
25948     1B 24 26 F4 | 	bith	local04, #27
2594c     A7 24 62 FC | 	wrlong	local04, fp
25950     0C 4E 85 F1 | 	sub	fp, #12
25954     A7 24 02 FB | 	rdlong	local04, fp
25958     18 4E 85 F1 | 	sub	fp, #24
2595c     68 78 04 FF 
25960     81 25 16 F2 | 	cmp	local04, ##150000001 wc
25964     1C 4E 05 C1 |  if_b	add	fp, #28
25968     00 01 80 CF 
2596c     A7 08 68 CC |  if_b	wrlong	##131076, fp
25970     1C 4E 85 C1 |  if_b	sub	fp, #28
25974     6C 02 90 CD |  if_b	jmp	#LR__3796
25978     18 4E 05 F1 | 	add	fp, #24
2597c     A7 24 02 FB | 	rdlong	local04, fp
25980     18 4E 85 F1 | 	sub	fp, #24
25984     E1 F5 05 FF 
25988     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2598c     1C 4E 05 C1 |  if_b	add	fp, #28
25990     00 01 80 CF 
25994     A7 0A 68 CC |  if_b	wrlong	##131077, fp
25998     1C 4E 85 C1 |  if_b	sub	fp, #28
2599c     44 02 90 CD |  if_b	jmp	#LR__3796
259a0     18 4E 05 F1 | 	add	fp, #24
259a4     A7 24 02 FB | 	rdlong	local04, fp
259a8     18 4E 85 F1 | 	sub	fp, #24
259ac     3B 58 08 FF 
259b0     01 24 16 F2 | 	cmp	local04, ##280000001 wc
259b4     1C 4E 05 C1 |  if_b	add	fp, #28
259b8     00 01 80 CF 
259bc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
259c0     1C 4E 85 C1 |  if_b	sub	fp, #28
259c4     1C 02 90 CD |  if_b	jmp	#LR__3796
259c8     1C 4E 05 F1 | 	add	fp, #28
259cc     80 01 80 FF 
259d0     A7 10 68 FC | 	wrlong	##196616, fp
259d4     1C 4E 85 F1 | 	sub	fp, #28
259d8     08 02 90 FD | 	jmp	#LR__3796
259dc                 | LR__3783
259dc     A9 12 06 F6 | 	mov	arg01, #169
259e0     00 14 06 F6 | 	mov	arg02, #0
259e4     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
259e8     FD 24 E2 F8 | 	getbyte	local04, result1, #0
259ec     02 24 16 F2 | 	cmp	local04, #2 wc
259f0     18 00 90 3D |  if_ae	jmp	#LR__3784
259f4     0C 4E 05 F1 | 	add	fp, #12
259f8     A7 04 48 FC | 	wrbyte	#2, fp
259fc     04 4E 05 F1 | 	add	fp, #4
25a00     A7 52 49 FC | 	wrbyte	#169, fp
25a04     10 4E 85 F1 | 	sub	fp, #16
25a08     14 00 90 FD | 	jmp	#LR__3785
25a0c                 | LR__3784
25a0c     0C 4E 05 F1 | 	add	fp, #12
25a10     A7 02 48 FC | 	wrbyte	#1, fp
25a14     04 4E 05 F1 | 	add	fp, #4
25a18     A7 02 48 FC | 	wrbyte	#1, fp
25a1c     10 4E 85 F1 | 	sub	fp, #16
25a20                 | LR__3785
25a20                 | ' 				ty =  0x01 ; cmd =  (1) ;
25a20                 | ' 			}
25a20                 | ' 			for (tmr = 1000; tmr; tmr--) {
25a20     18 4E 05 F1 | 	add	fp, #24
25a24     01 00 80 FF 
25a28     A7 D0 6B FC | 	wrlong	##1000, fp
25a2c     18 4E 85 F1 | 	sub	fp, #24
25a30                 | LR__3786
25a30     18 4E 05 F1 | 	add	fp, #24
25a34     A7 22 0A FB | 	rdlong	local03, fp wz
25a38     18 4E 85 F1 | 	sub	fp, #24
25a3c     44 00 90 AD |  if_e	jmp	#LR__3787
25a40     10 4E 05 F1 | 	add	fp, #16
25a44     A7 12 C2 FA | 	rdbyte	arg01, fp
25a48     10 4E 85 F1 | 	sub	fp, #16
25a4c     00 14 06 F6 | 	mov	arg02, #0
25a50     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25a54     FD 24 02 F6 | 	mov	local04, result1
25a58     07 24 4E F7 | 	zerox	local04, #7 wz
25a5c     24 00 90 AD |  if_e	jmp	#LR__3787
25a60     01 00 00 FF 
25a64     E8 13 06 F6 | 	mov	arg01, ##1000
25a68     C0 96 BF FD | 	call	#__system___waitus
25a6c     18 4E 05 F1 | 	add	fp, #24
25a70     A7 24 02 FB | 	rdlong	local04, fp
25a74     01 24 86 F1 | 	sub	local04, #1
25a78     A7 24 62 FC | 	wrlong	local04, fp
25a7c     18 4E 85 F1 | 	sub	fp, #24
25a80     AC FF 9F FD | 	jmp	#LR__3786
25a84                 | LR__3787
25a84     18 4E 05 F1 | 	add	fp, #24
25a88     A7 24 0A FB | 	rdlong	local04, fp wz
25a8c     18 4E 85 F1 | 	sub	fp, #24
25a90     14 00 90 AD |  if_e	jmp	#LR__3788
25a94     10 12 06 F6 | 	mov	arg01, #16
25a98     09 14 C6 F9 | 	decod	arg02, #9
25a9c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25aa0     07 FA 4D F7 | 	zerox	result1, #7 wz
25aa4     0C 00 90 AD |  if_e	jmp	#LR__3789
25aa8                 | LR__3788
25aa8     0C 4E 05 F1 | 	add	fp, #12
25aac     A7 00 48 FC | 	wrbyte	#0, fp
25ab0     0C 4E 85 F1 | 	sub	fp, #12
25ab4                 | LR__3789
25ab4     14 24 06 FB | 	rdlong	local04, #20
25ab8     18 4E 05 F1 | 	add	fp, #24
25abc     A7 24 62 FC | 	wrlong	local04, fp
25ac0     18 4E 85 F1 | 	sub	fp, #24
25ac4     F0 FA 02 FF 
25ac8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25acc     18 00 90 3D |  if_ae	jmp	#LR__3790
25ad0     24 4E 05 F1 | 	add	fp, #36
25ad4     A7 24 02 FB | 	rdlong	local04, fp
25ad8     1B 24 26 F4 | 	bith	local04, #27
25adc     A7 24 62 FC | 	wrlong	local04, fp
25ae0     24 4E 85 F1 | 	sub	fp, #36
25ae4     2C 00 90 FD | 	jmp	#LR__3791
25ae8                 | LR__3790
25ae8     18 4E 05 F1 | 	add	fp, #24
25aec     A7 24 02 FB | 	rdlong	local04, fp
25af0     18 4E 85 F1 | 	sub	fp, #24
25af4     E1 F5 05 FF 
25af8     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25afc     24 4E 05 C1 |  if_b	add	fp, #36
25b00     A7 24 02 CB |  if_b	rdlong	local04, fp
25b04     80 00 04 CF 
25b08     00 24 46 C5 |  if_b	or	local04, ##134283264
25b0c     A7 24 62 CC |  if_b	wrlong	local04, fp
25b10     24 4E 85 C1 |  if_b	sub	fp, #36
25b14                 | LR__3791
25b14     18 4E 05 F1 | 	add	fp, #24
25b18     A7 24 02 FB | 	rdlong	local04, fp
25b1c     18 4E 85 F1 | 	sub	fp, #24
25b20     F0 FA 02 FF 
25b24     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25b28     1C 4E 05 C1 |  if_b	add	fp, #28
25b2c     00 01 80 CF 
25b30     A7 08 68 CC |  if_b	wrlong	##131076, fp
25b34     1C 4E 85 C1 |  if_b	sub	fp, #28
25b38     A8 00 90 CD |  if_b	jmp	#LR__3795
25b3c     18 4E 05 F1 | 	add	fp, #24
25b40     A7 24 02 FB | 	rdlong	local04, fp
25b44     18 4E 85 F1 | 	sub	fp, #24
25b48     68 78 04 FF 
25b4c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
25b50     1C 4E 05 C1 |  if_b	add	fp, #28
25b54     80 01 80 CF 
25b58     A7 0C 68 CC |  if_b	wrlong	##196614, fp
25b5c     1C 4E 85 C1 |  if_b	sub	fp, #28
25b60     80 00 90 CD |  if_b	jmp	#LR__3794
25b64     18 4E 05 F1 | 	add	fp, #24
25b68     A7 24 02 FB | 	rdlong	local04, fp
25b6c     18 4E 85 F1 | 	sub	fp, #24
25b70     E1 F5 05 FF 
25b74     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25b78     1C 4E 05 C1 |  if_b	add	fp, #28
25b7c     00 02 80 CF 
25b80     A7 10 68 CC |  if_b	wrlong	##262152, fp
25b84     1C 4E 85 C1 |  if_b	sub	fp, #28
25b88     58 00 90 CD |  if_b	jmp	#LR__3793
25b8c     18 4E 05 F1 | 	add	fp, #24
25b90     A7 24 02 FB | 	rdlong	local04, fp
25b94     18 4E 85 F1 | 	sub	fp, #24
25b98     59 73 07 FF 
25b9c     81 24 16 F2 | 	cmp	local04, ##250000001 wc
25ba0     1C 4E 05 C1 |  if_b	add	fp, #28
25ba4     80 02 80 CF 
25ba8     A7 14 68 CC |  if_b	wrlong	##327690, fp
25bac     1C 4E 85 C1 |  if_b	sub	fp, #28
25bb0     30 00 90 CD |  if_b	jmp	#LR__3792
25bb4     18 4E 05 F1 | 	add	fp, #24
25bb8     A7 24 02 FB | 	rdlong	local04, fp
25bbc     18 4E 85 F1 | 	sub	fp, #24
25bc0     D1 F0 08 FF 
25bc4     01 25 16 F2 | 	cmp	local04, ##300000001 wc
25bc8     1C 4E 05 C1 |  if_b	add	fp, #28
25bcc     00 03 80 CF 
25bd0     A7 18 68 CC |  if_b	wrlong	##393228, fp
25bd4     1C 4E 85 F3 | 	sumc	fp, #28
25bd8     80 03 80 3F 
25bdc     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
25be0     1C 4E 85 31 |  if_ae	sub	fp, #28
25be4                 | LR__3792
25be4                 | LR__3793
25be4                 | LR__3794
25be4                 | LR__3795
25be4                 | LR__3796
25be4                 | LR__3797
25be4     0C 4E 05 F1 | 	add	fp, #12
25be8     A7 24 C2 FA | 	rdbyte	local04, fp
25bec     01 00 00 FF 
25bf0     21 E4 05 F1 | 	add	objptr, ##545
25bf4     F2 24 42 FC | 	wrbyte	local04, objptr
25bf8     A7 1E CA FA | 	rdbyte	local01, fp wz
25bfc     00 24 06 56 |  if_ne	mov	local04, #0
25c00     01 24 06 A6 |  if_e	mov	local04, #1
25c04     20 4E 05 F1 | 	add	fp, #32
25c08     A7 24 42 FC | 	wrbyte	local04, fp
25c0c     A7 24 C2 FA | 	rdbyte	local04, fp
25c10     2C 4E 85 F1 | 	sub	fp, #44
25c14     01 E4 85 F1 | 	sub	objptr, #1
25c18     F2 24 42 FC | 	wrbyte	local04, objptr
25c1c     01 00 00 FF 
25c20     20 E4 85 F1 | 	sub	objptr, ##544
25c24     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1071
25c28     34 4E 05 F1 | 	add	fp, #52
25c2c     A7 12 02 FB | 	rdlong	arg01, fp
25c30     18 4E 85 F1 | 	sub	fp, #24
25c34     A7 14 02 FB | 	rdlong	arg02, fp
25c38     09 15 12 FC | 	wxpin	arg02, arg01
25c3c     1C 4E 05 F1 | 	add	fp, #28
25c40     A7 12 02 FB | 	rdlong	arg01, fp
25c44     14 4E 85 F1 | 	sub	fp, #20
25c48     A7 14 02 FB | 	rdlong	arg02, fp
25c4c     09 15 02 FC | 	wrpin	arg02, arg01
25c50                 | ' 
25c50                 | ' 		}
25c50                 | ' 	}
25c50                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
25c50                 | ' 	CardType = ty;
25c50                 | ' 	s = ty ? 0 :  0x01 ;
25c50                 | ' 	Stat = s;
25c50                 | ' 
25c50                 | ' 	deselect();
25c50                 | ' 
25c50                 | ' 
25c50                 | ' 	_wxpin( PIN_CLK, ck_div );
25c50                 | ' 	_wrpin( PIN_DI, spm_tx );
25c50                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
25c50                 | ' 	return s;
25c50     08 4E 05 F1 | 	add	fp, #8
25c54     A7 FA C1 FA | 	rdbyte	result1, fp
25c58     2C 4E 85 F1 | 	sub	fp, #44
25c5c                 | LR__3798
25c5c     A7 F0 03 F6 | 	mov	ptra, fp
25c60     B2 00 A0 FD | 	call	#popregs_
25c64                 | _fatfs_cc_disk_initialize_ret
25c64     2D 00 64 FD | 	ret
25c68                 | 
25c68                 | _fatfs_cc_disk_read
25c68     05 4A 05 F6 | 	mov	COUNT_, #5
25c6c     A8 00 A0 FD | 	call	#pushregs_
25c70     0A 1F 02 F6 | 	mov	local01, arg02
25c74     0B 21 02 F6 | 	mov	local02, arg03
25c78     0C 23 02 F6 | 	mov	local03, arg04
25c7c     00 12 0E F2 | 	cmp	arg01, #0 wz
25c80     01 FA 05 56 |  if_ne	mov	result1, #1
25c84                 | ' 
25c84                 | ' 	return Stat;
25c84     01 00 00 AF 
25c88     20 E4 05 A1 |  if_e	add	objptr, ##544
25c8c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25c90     01 00 00 AF 
25c94     20 E4 85 A1 |  if_e	sub	objptr, ##544
25c98     FD FA E1 F8 | 	getbyte	result1, result1, #0
25c9c     01 FA CD F7 | 	test	result1, #1 wz
25ca0     03 FA 05 56 |  if_ne	mov	result1, #3
25ca4     84 00 90 5D |  if_ne	jmp	#LR__3802
25ca8     01 00 00 FF 
25cac     21 E4 05 F1 | 	add	objptr, ##545
25cb0     F2 24 C2 FA | 	rdbyte	local04, objptr
25cb4     01 00 00 FF 
25cb8     21 E4 85 F1 | 	sub	objptr, ##545
25cbc     08 24 CE F7 | 	test	local04, #8 wz
25cc0     09 20 66 A0 |  if_e	shl	local02, #9
25cc4     02 22 16 F2 | 	cmp	local03, #2 wc
25cc8     12 24 06 36 |  if_ae	mov	local04, #18
25ccc     11 24 06 C6 |  if_b	mov	local04, #17
25cd0     10 15 02 F6 | 	mov	arg02, local02
25cd4     12 13 02 F6 | 	mov	arg01, local04
25cd8     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25cdc     FD 26 02 F6 | 	mov	local05, result1
25ce0     07 26 4E F7 | 	zerox	local05, #7 wz
25ce4     30 00 90 5D |  if_ne	jmp	#LR__3801
25ce8                 | ' 		do {
25ce8                 | LR__3800
25ce8     0F 13 02 F6 | 	mov	arg01, local01
25cec     09 14 C6 F9 | 	decod	arg02, #9
25cf0     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1079
25cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
25cf8     01 00 00 5F 
25cfc     00 1E 06 51 |  if_ne	add	local01, ##512
25d00     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3800
25d04     12 25 E2 F8 | 	getbyte	local04, local04, #0
25d08     12 24 0E F2 | 	cmp	local04, #18 wz
25d0c     0C 12 06 A6 |  if_e	mov	arg01, #12
25d10     00 14 06 A6 |  if_e	mov	arg02, #0
25d14     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1085
25d18                 | LR__3801
25d18     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1071
25d1c                 | ' 	}
25d1c                 | ' 	deselect();
25d1c                 | ' 
25d1c                 | ' 	return count ? RES_ERROR : RES_OK;
25d1c     00 22 0E F2 | 	cmp	local03, #0 wz
25d20     01 26 06 56 |  if_ne	mov	local05, #1
25d24     00 26 06 A6 |  if_e	mov	local05, #0
25d28     13 FB 01 F6 | 	mov	result1, local05
25d2c                 | LR__3802
25d2c     A7 F0 03 F6 | 	mov	ptra, fp
25d30     B2 00 A0 FD | 	call	#popregs_
25d34                 | _fatfs_cc_disk_read_ret
25d34     2D 00 64 FD | 	ret
25d38                 | 
25d38                 | _fatfs_cc_disk_write
25d38     04 4A 05 F6 | 	mov	COUNT_, #4
25d3c     A8 00 A0 FD | 	call	#pushregs_
25d40     0A 1F 02 F6 | 	mov	local01, arg02
25d44     0C 21 02 F6 | 	mov	local02, arg04
25d48     0B 23 02 F6 | 	mov	local03, arg03
25d4c     00 12 0E F2 | 	cmp	arg01, #0 wz
25d50     01 FA 05 56 |  if_ne	mov	result1, #1
25d54                 | ' 
25d54                 | ' 	return Stat;
25d54     01 00 00 AF 
25d58     20 E4 05 A1 |  if_e	add	objptr, ##544
25d5c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25d60     01 00 00 AF 
25d64     20 E4 85 A1 |  if_e	sub	objptr, ##544
25d68     FD FA E1 F8 | 	getbyte	result1, result1, #0
25d6c     01 FA CD F7 | 	test	result1, #1 wz
25d70     03 FA 05 56 |  if_ne	mov	result1, #3
25d74     D4 00 90 5D |  if_ne	jmp	#LR__3814
25d78     01 00 00 FF 
25d7c     21 E4 05 F1 | 	add	objptr, ##545
25d80     F2 16 C2 FA | 	rdbyte	arg03, objptr
25d84     01 00 00 FF 
25d88     21 E4 85 F1 | 	sub	objptr, ##545
25d8c     08 16 CE F7 | 	test	arg03, #8 wz
25d90     09 22 66 A0 |  if_e	shl	local03, #9
25d94     01 20 0E F2 | 	cmp	local02, #1 wz
25d98     30 00 90 5D |  if_ne	jmp	#LR__3810
25d9c     18 12 06 F6 | 	mov	arg01, #24
25da0     11 15 02 F6 | 	mov	arg02, local03
25da4     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25da8     FD 24 02 F6 | 	mov	local04, result1
25dac     07 24 4E F7 | 	zerox	local04, #7 wz
25db0     84 00 90 5D |  if_ne	jmp	#LR__3813
25db4     0F 13 02 F6 | 	mov	arg01, local01
25db8     FE 14 06 F6 | 	mov	arg02, #254
25dbc     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1081
25dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
25dc4     00 20 06 56 |  if_ne	mov	local02, #0
25dc8     6C 00 90 FD | 	jmp	#LR__3813
25dcc                 | LR__3810
25dcc     01 00 00 FF 
25dd0     21 E4 05 F1 | 	add	objptr, ##545
25dd4     F2 24 C2 FA | 	rdbyte	local04, objptr
25dd8     01 00 00 FF 
25ddc     21 E4 85 F1 | 	sub	objptr, ##545
25de0     06 24 CE F7 | 	test	local04, #6 wz
25de4     97 12 06 56 |  if_ne	mov	arg01, #151
25de8     10 15 02 56 |  if_ne	mov	arg02, local02
25dec     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1085
25df0     11 15 02 F6 | 	mov	arg02, local03
25df4     19 12 06 F6 | 	mov	arg01, #25
25df8     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25dfc     FD 24 02 F6 | 	mov	local04, result1
25e00     07 24 4E F7 | 	zerox	local04, #7 wz
25e04     30 00 90 5D |  if_ne	jmp	#LR__3812
25e08                 | ' 			do {
25e08                 | LR__3811
25e08     0F 13 02 F6 | 	mov	arg01, local01
25e0c     FC 14 06 F6 | 	mov	arg02, #252
25e10     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1081
25e14     00 FA 0D F2 | 	cmp	result1, #0 wz
25e18     01 00 00 5F 
25e1c     00 1E 06 51 |  if_ne	add	local01, ##512
25e20     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3811
25e24     00 12 06 F6 | 	mov	arg01, #0
25e28     FD 14 06 F6 | 	mov	arg02, #253
25e2c     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1081
25e30     00 FA 0D F2 | 	cmp	result1, #0 wz
25e34     01 20 06 A6 |  if_e	mov	local02, #1
25e38                 | LR__3812
25e38                 | LR__3813
25e38     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1071
25e3c                 | ' 				count = 1;
25e3c                 | ' 		}
25e3c                 | ' 	}
25e3c                 | ' 	deselect();
25e3c                 | ' 
25e3c                 | ' 	return count ? RES_ERROR : RES_OK;
25e3c     00 20 0E F2 | 	cmp	local02, #0 wz
25e40     01 24 06 56 |  if_ne	mov	local04, #1
25e44     00 24 06 A6 |  if_e	mov	local04, #0
25e48     12 FB 01 F6 | 	mov	result1, local04
25e4c                 | LR__3814
25e4c     A7 F0 03 F6 | 	mov	ptra, fp
25e50     B2 00 A0 FD | 	call	#popregs_
25e54                 | _fatfs_cc_disk_write_ret
25e54     2D 00 64 FD | 	ret
25e58                 | 
25e58                 | _fatfs_cc_disk_ioctl
25e58     01 4A 05 F6 | 	mov	COUNT_, #1
25e5c     A8 00 A0 FD | 	call	#pushregs_
25e60     30 F0 07 F1 | 	add	ptra, #48
25e64     04 4E 05 F1 | 	add	fp, #4
25e68     A7 12 42 FC | 	wrbyte	arg01, fp
25e6c     04 4E 05 F1 | 	add	fp, #4
25e70     A7 14 42 FC | 	wrbyte	arg02, fp
25e74     04 4E 05 F1 | 	add	fp, #4
25e78     A7 16 62 FC | 	wrlong	arg03, fp
25e7c     08 4E 85 F1 | 	sub	fp, #8
25e80     A7 12 CA FA | 	rdbyte	arg01, fp wz
25e84     04 4E 85 F1 | 	sub	fp, #4
25e88     01 FA 05 56 |  if_ne	mov	result1, #1
25e8c                 | ' 
25e8c                 | ' 	return Stat;
25e8c     01 00 00 AF 
25e90     20 E4 05 A1 |  if_e	add	objptr, ##544
25e94     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25e98     01 00 00 AF 
25e9c     20 E4 85 A1 |  if_e	sub	objptr, ##544
25ea0     FD FA E1 F8 | 	getbyte	result1, result1, #0
25ea4     01 FA CD F7 | 	test	result1, #1 wz
25ea8     03 FA 05 56 |  if_ne	mov	result1, #3
25eac     E4 01 90 5D |  if_ne	jmp	#LR__3828
25eb0     10 4E 05 F1 | 	add	fp, #16
25eb4     A7 02 68 FC | 	wrlong	#1, fp
25eb8                 | ' 
25eb8                 | ' 	res = RES_ERROR;
25eb8                 | ' 	switch (ctrl) {
25eb8     08 4E 85 F1 | 	sub	fp, #8
25ebc     A7 1E C2 FA | 	rdbyte	local01, fp
25ec0     08 4E 85 F1 | 	sub	fp, #8
25ec4     04 1E 26 F3 | 	fle	local01, #4
25ec8     30 1E 62 FD | 	jmprel	local01
25ecc                 | LR__3820
25ecc     10 00 90 FD | 	jmp	#LR__3821
25ed0     24 00 90 FD | 	jmp	#LR__3822
25ed4     A0 01 90 FD | 	jmp	#LR__3826
25ed8     80 01 90 FD | 	jmp	#LR__3825
25edc     98 01 90 FD | 	jmp	#LR__3826
25ee0                 | LR__3821
25ee0     B4 79 B0 FD | 	call	#_fatfs_cc_select_1075
25ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
25ee8     10 4E 05 51 |  if_ne	add	fp, #16
25eec     A7 00 68 5C |  if_ne	wrlong	#0, fp
25ef0     10 4E 85 51 |  if_ne	sub	fp, #16
25ef4                 | ' 			break;
25ef4     8C 01 90 FD | 	jmp	#LR__3827
25ef8                 | LR__3822
25ef8     09 12 06 F6 | 	mov	arg01, #9
25efc     00 14 06 F6 | 	mov	arg02, #0
25f00     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1085
25f04     FD 1E 02 F6 | 	mov	local01, result1
25f08     07 1E 4E F7 | 	zerox	local01, #7 wz
25f0c     74 01 90 5D |  if_ne	jmp	#LR__3827
25f10     18 4E 05 F1 | 	add	fp, #24
25f14     A7 12 02 F6 | 	mov	arg01, fp
25f18     18 4E 85 F1 | 	sub	fp, #24
25f1c     10 14 06 F6 | 	mov	arg02, #16
25f20     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1079
25f24     00 FA 0D F2 | 	cmp	result1, #0 wz
25f28     58 01 90 AD |  if_e	jmp	#LR__3827
25f2c     18 4E 05 F1 | 	add	fp, #24
25f30     A7 1E C2 FA | 	rdbyte	local01, fp
25f34     18 4E 85 F1 | 	sub	fp, #24
25f38     06 1E 46 F0 | 	shr	local01, #6
25f3c     01 1E 0E F2 | 	cmp	local01, #1 wz
25f40     5C 00 90 5D |  if_ne	jmp	#LR__3823
25f44     21 4E 05 F1 | 	add	fp, #33
25f48     A7 1E C2 FA | 	rdbyte	local01, fp
25f4c     01 4E 85 F1 | 	sub	fp, #1
25f50     A7 FA C1 FA | 	rdbyte	result1, fp
25f54     FD FA 31 F9 | 	getword	result1, result1, #0
25f58     08 FA 65 F0 | 	shl	result1, #8
25f5c     FD 1E 02 F1 | 	add	local01, result1
25f60     01 4E 85 F1 | 	sub	fp, #1
25f64     A7 FA C1 FA | 	rdbyte	result1, fp
25f68     3F FA 05 F5 | 	and	result1, #63
25f6c     10 FA 65 F0 | 	shl	result1, #16
25f70     FD 1E 02 F1 | 	add	local01, result1
25f74     01 1E 06 F1 | 	add	local01, #1
25f78     09 4E 05 F1 | 	add	fp, #9
25f7c     A7 1E 62 FC | 	wrlong	local01, fp
25f80     1C 4E 85 F1 | 	sub	fp, #28
25f84     A7 1E 02 FB | 	rdlong	local01, fp
25f88     1C 4E 05 F1 | 	add	fp, #28
25f8c     A7 FA 01 FB | 	rdlong	result1, fp
25f90     28 4E 85 F1 | 	sub	fp, #40
25f94     0A FA 65 F0 | 	shl	result1, #10
25f98     0F FB 61 FC | 	wrlong	result1, local01
25f9c     AC 00 90 FD | 	jmp	#LR__3824
25fa0                 | LR__3823
25fa0     1D 4E 05 F1 | 	add	fp, #29
25fa4     A7 1E C2 FA | 	rdbyte	local01, fp
25fa8     0F 1F 42 F8 | 	getnib	local01, local01, #0
25fac     05 4E 05 F1 | 	add	fp, #5
25fb0     A7 FA C1 FA | 	rdbyte	result1, fp
25fb4     80 FA 05 F5 | 	and	result1, #128
25fb8     07 FA C5 F0 | 	sar	result1, #7
25fbc     FD 1E 02 F1 | 	add	local01, result1
25fc0     01 4E 85 F1 | 	sub	fp, #1
25fc4     A7 FA C1 FA | 	rdbyte	result1, fp
25fc8     03 FA 05 F5 | 	and	result1, #3
25fcc     01 FA 65 F0 | 	shl	result1, #1
25fd0     FD 1E 02 F1 | 	add	local01, result1
25fd4     02 1E 06 F1 | 	add	local01, #2
25fd8     0D 4E 85 F1 | 	sub	fp, #13
25fdc     A7 1E 42 FC | 	wrbyte	local01, fp
25fe0     0C 4E 05 F1 | 	add	fp, #12
25fe4     A7 1E C2 FA | 	rdbyte	local01, fp
25fe8     06 1E 46 F0 | 	shr	local01, #6
25fec     01 4E 85 F1 | 	sub	fp, #1
25ff0     A7 FA C1 FA | 	rdbyte	result1, fp
25ff4     FD FA 31 F9 | 	getword	result1, result1, #0
25ff8     02 FA 65 F0 | 	shl	result1, #2
25ffc     FD 1E 02 F1 | 	add	local01, result1
26000     01 4E 85 F1 | 	sub	fp, #1
26004     A7 FA C1 FA | 	rdbyte	result1, fp
26008     03 FA 05 F5 | 	and	result1, #3
2600c     FD FA 31 F9 | 	getword	result1, result1, #0
26010     0A FA 65 F0 | 	shl	result1, #10
26014     FD 1E 02 F1 | 	add	local01, result1
26018     01 1E 06 F1 | 	add	local01, #1
2601c     0A 4E 05 F1 | 	add	fp, #10
26020     A7 1E 62 FC | 	wrlong	local01, fp
26024     1C 4E 85 F1 | 	sub	fp, #28
26028     A7 1E 02 FB | 	rdlong	local01, fp
2602c     1C 4E 05 F1 | 	add	fp, #28
26030     A7 FA 01 FB | 	rdlong	result1, fp
26034     14 4E 85 F1 | 	sub	fp, #20
26038     A7 16 C2 FA | 	rdbyte	arg03, fp
2603c     14 4E 85 F1 | 	sub	fp, #20
26040     09 16 86 F1 | 	sub	arg03, #9
26044     0B FB 61 F0 | 	shl	result1, arg03
26048     0F FB 61 FC | 	wrlong	result1, local01
2604c                 | LR__3824
2604c     10 4E 05 F1 | 	add	fp, #16
26050     A7 00 68 FC | 	wrlong	#0, fp
26054     10 4E 85 F1 | 	sub	fp, #16
26058                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
26058                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
26058                 | ' 					*(LBA_t*)buff = cs << (n - 9);
26058                 | ' 				}
26058                 | ' 				res = RES_OK;
26058                 | ' 			}
26058                 | ' 			break;
26058     28 00 90 FD | 	jmp	#LR__3827
2605c                 | LR__3825
2605c     0C 4E 05 F1 | 	add	fp, #12
26060     A7 1E 02 FB | 	rdlong	local01, fp
26064     0F 01 69 FC | 	wrlong	#128, local01
26068     04 4E 05 F1 | 	add	fp, #4
2606c     A7 00 68 FC | 	wrlong	#0, fp
26070     10 4E 85 F1 | 	sub	fp, #16
26074                 | ' 			*(DWORD*)buff = 128;
26074                 | ' 			res = RES_OK;
26074                 | ' 			break;
26074     0C 00 90 FD | 	jmp	#LR__3827
26078                 | LR__3826
26078     10 4E 05 F1 | 	add	fp, #16
2607c     A7 08 68 FC | 	wrlong	#4, fp
26080     10 4E 85 F1 | 	sub	fp, #16
26084                 | LR__3827
26084     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1071
26088                 | ' 			res = RES_PARERR;
26088                 | ' 	}
26088                 | ' 
26088                 | ' 	deselect();
26088                 | ' 
26088                 | ' 	return res;
26088     10 4E 05 F1 | 	add	fp, #16
2608c     A7 FA 01 FB | 	rdlong	result1, fp
26090     10 4E 85 F1 | 	sub	fp, #16
26094                 | LR__3828
26094     A7 F0 03 F6 | 	mov	ptra, fp
26098     B2 00 A0 FD | 	call	#popregs_
2609c                 | _fatfs_cc_disk_ioctl_ret
2609c     2D 00 64 FD | 	ret
260a0                 | 
260a0                 | _fatfs_cc_disk_setpins
260a0     00 12 0E F2 | 	cmp	arg01, #0 wz
260a4     01 FA 65 56 |  if_ne	neg	result1, #1
260a8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
260ac     01 00 00 FF 
260b0     10 E4 05 F1 | 	add	objptr, ##528
260b4     F2 14 62 FC | 	wrlong	arg02, objptr
260b8     04 E4 05 F1 | 	add	objptr, #4
260bc     F2 16 62 FC | 	wrlong	arg03, objptr
260c0     04 E4 05 F1 | 	add	objptr, #4
260c4     F2 18 62 FC | 	wrlong	arg04, objptr
260c8     04 E4 05 F1 | 	add	objptr, #4
260cc     F2 1A 62 FC | 	wrlong	arg05, objptr
260d0     01 00 00 FF 
260d4     1C E4 85 F1 | 	sub	objptr, ##540
260d8     00 FA 05 F6 | 	mov	result1, #0
260dc                 | _fatfs_cc_disk_setpins_ret
260dc     2D 00 64 FD | 	ret
260e0                 | 
260e0                 | _fatfs_cc_tchar2uni
260e0     09 01 02 FB | 	rdlong	_var01, arg01
260e4     00 03 02 F6 | 	mov	_var02, _var01
260e8     01 00 06 F1 | 	add	_var01, #1
260ec     00 05 02 F6 | 	mov	_var03, _var01
260f0     01 07 C2 FA | 	rdbyte	_var04, _var02
260f4     80 06 CE F7 | 	test	_var04, #128 wz
260f8     E8 00 90 AD |  if_e	jmp	#LR__3837
260fc     03 09 02 F6 | 	mov	_var05, _var04
26100     E0 08 06 F5 | 	and	_var05, #224
26104     C0 08 0E F2 | 	cmp	_var05, #192 wz
26108     1F 06 06 A5 |  if_e	and	_var04, #31
2610c     01 0A 06 A6 |  if_e	mov	_var06, #1
26110     34 00 90 AD |  if_e	jmp	#LR__3831
26114     03 09 02 F6 | 	mov	_var05, _var04
26118     F0 08 06 F5 | 	and	_var05, #240
2611c     E0 08 0E F2 | 	cmp	_var05, #224 wz
26120     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
26124     02 0A 06 A6 |  if_e	mov	_var06, #2
26128     1C 00 90 AD |  if_e	jmp	#LR__3830
2612c     03 09 02 F6 | 	mov	_var05, _var04
26130     F8 08 06 F5 | 	and	_var05, #248
26134     F0 08 0E F2 | 	cmp	_var05, #240 wz
26138     07 06 06 A5 |  if_e	and	_var04, #7
2613c     03 0A 06 A6 |  if_e	mov	_var06, #3
26140                 | ' 			return 0xFFFFFFFF;
26140     01 FA 65 56 |  if_ne	neg	result1, #1
26144     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
26148                 | LR__3830
26148                 | LR__3831
26148                 | ' 		}
26148                 | ' 		do {
26148                 | LR__3832
26148     02 0D C2 FA | 	rdbyte	_var07, _var03
2614c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
26150     C0 08 06 F5 | 	and	_var05, #192
26154     80 08 0E F2 | 	cmp	_var05, #128 wz
26158     01 04 06 F1 | 	add	_var03, #1
2615c     01 FA 65 56 |  if_ne	neg	result1, #1
26160     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
26164     06 06 66 F0 | 	shl	_var04, #6
26168     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2616c     3F 02 06 F5 | 	and	_var02, #63
26170     01 07 42 F5 | 	or	_var04, _var02
26174     F4 0B 6E FB | 	djnz	_var06, #LR__3832
26178     80 06 16 F2 | 	cmp	_var04, #128 wc
2617c     24 00 90 CD |  if_b	jmp	#LR__3834
26180     6C 00 00 FF 
26184     00 06 16 F2 | 	cmp	_var04, ##55296 wc
26188     0C 00 90 CD |  if_b	jmp	#LR__3833
2618c     70 00 00 FF 
26190     00 06 16 F2 | 	cmp	_var04, ##57344 wc
26194     0C 00 90 CD |  if_b	jmp	#LR__3834
26198                 | LR__3833
26198     80 08 00 FF 
2619c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
261a0     08 00 90 CD |  if_b	jmp	#LR__3835
261a4                 | LR__3834
261a4     01 FA 65 F6 | 	neg	result1, #1
261a8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
261ac                 | LR__3835
261ac     80 00 00 FF 
261b0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
261b4     2C 00 90 CD |  if_b	jmp	#LR__3836
261b8     03 03 02 F6 | 	mov	_var02, _var04
261bc     80 00 00 FF 
261c0     00 02 86 F1 | 	sub	_var02, ##65536
261c4     06 02 66 F0 | 	shl	_var02, #6
261c8     80 FF 01 FF 
261cc     00 02 06 F5 | 	and	_var02, ##67043328
261d0     6E 00 6C FF 
261d4     00 08 06 F6 | 	mov	_var05, ##-671032320
261d8     01 09 42 F5 | 	or	_var05, _var02
261dc     09 06 46 F7 | 	zerox	_var04, #9
261e0     04 07 42 F5 | 	or	_var04, _var05
261e4                 | LR__3836
261e4                 | LR__3837
261e4     09 05 62 FC | 	wrlong	_var03, arg01
261e8                 | ' 	}
261e8                 | ' #line 811 "ff.c"
261e8                 | ' 	*str = p;
261e8                 | ' 	return uc;
261e8     03 FB 01 F6 | 	mov	result1, _var04
261ec                 | _fatfs_cc_tchar2uni_ret
261ec     2D 00 64 FD | 	ret
261f0                 | 
261f0                 | _fatfs_cc_put_utf
261f0     80 12 16 F2 | 	cmp	arg01, #128 wc
261f4     18 00 90 3D |  if_ae	jmp	#LR__3840
261f8     01 16 16 F2 | 	cmp	arg03, #1 wc
261fc     00 FA 05 C6 |  if_b	mov	result1, #0
26200     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
26204     0A 13 42 FC | 	wrbyte	arg01, arg02
26208                 | ' 		*buf = (TCHAR)chr;
26208                 | ' 		return 1;
26208     01 FA 05 F6 | 	mov	result1, #1
2620c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26210                 | LR__3840
26210     04 00 00 FF 
26214     00 12 16 F2 | 	cmp	arg01, ##2048 wc
26218     40 00 90 3D |  if_ae	jmp	#LR__3841
2621c     02 16 16 F2 | 	cmp	arg03, #2 wc
26220     00 FA 05 C6 |  if_b	mov	result1, #0
26224     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
26228     09 FB 01 F6 | 	mov	result1, arg01
2622c     06 FA 45 F0 | 	shr	result1, #6
26230     1F FA 05 F5 | 	and	result1, #31
26234     C0 16 06 F6 | 	mov	arg03, #192
26238     FD 16 42 F5 | 	or	arg03, result1
2623c     0A 17 42 FC | 	wrbyte	arg03, arg02
26240     01 14 06 F1 | 	add	arg02, #1
26244     3F 12 06 F5 | 	and	arg01, #63
26248     80 FA 05 F6 | 	mov	result1, #128
2624c     09 FB 41 F5 | 	or	result1, arg01
26250     0A FB 41 FC | 	wrbyte	result1, arg02
26254                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
26254                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
26254                 | ' 		return 2;
26254     02 FA 05 F6 | 	mov	result1, #2
26258     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2625c                 | LR__3841
2625c     80 00 00 FF 
26260     00 12 16 F2 | 	cmp	arg01, ##65536 wc
26264     70 00 90 3D |  if_ae	jmp	#LR__3844
26268     03 16 16 F2 | 	cmp	arg03, #3 wc
2626c     18 00 90 CD |  if_b	jmp	#LR__3842
26270     6C 00 00 FF 
26274     00 12 16 F2 | 	cmp	arg01, ##55296 wc
26278     14 00 90 CD |  if_b	jmp	#LR__3843
2627c     70 00 00 FF 
26280     00 12 16 F2 | 	cmp	arg01, ##57344 wc
26284     08 00 90 3D |  if_ae	jmp	#LR__3843
26288                 | LR__3842
26288     00 FA 05 F6 | 	mov	result1, #0
2628c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26290                 | LR__3843
26290     09 FB 59 F8 | 	getnib	result1, arg01, #3
26294     E0 16 06 F6 | 	mov	arg03, #224
26298     FD 16 42 F5 | 	or	arg03, result1
2629c     0A 17 42 FC | 	wrbyte	arg03, arg02
262a0     01 14 06 F1 | 	add	arg02, #1
262a4     09 FB 01 F6 | 	mov	result1, arg01
262a8     06 FA 45 F0 | 	shr	result1, #6
262ac     3F FA 05 F5 | 	and	result1, #63
262b0     80 16 06 F6 | 	mov	arg03, #128
262b4     FD 16 42 F5 | 	or	arg03, result1
262b8     0A 17 42 FC | 	wrbyte	arg03, arg02
262bc     01 14 06 F1 | 	add	arg02, #1
262c0     3F 12 06 F5 | 	and	arg01, #63
262c4     80 FA 05 F6 | 	mov	result1, #128
262c8     09 FB 41 F5 | 	or	result1, arg01
262cc     0A FB 41 FC | 	wrbyte	result1, arg02
262d0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
262d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
262d0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
262d0                 | ' 		return 3;
262d0     03 FA 05 F6 | 	mov	result1, #3
262d4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
262d8                 | LR__3844
262d8     04 16 16 F2 | 	cmp	arg03, #4 wc
262dc     00 FA 05 C6 |  if_b	mov	result1, #0
262e0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
262e4     09 01 02 F6 | 	mov	_var01, arg01
262e8     E0 01 06 F4 | 	bitl	_var01, #480
262ec     00 00 6C FF 
262f0     00 00 86 F1 | 	sub	_var01, ##-671088640
262f4     06 00 46 F0 | 	shr	_var01, #6
262f8     09 13 32 F9 | 	getword	arg01, arg01, #0
262fc     6E 00 00 FF 
26300     00 12 86 F1 | 	sub	arg01, ##56320
26304     00 08 00 FF 
26308     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2630c     02 00 00 CF 
26310     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
26314     00 FA 05 36 |  if_ae	mov	result1, #0
26318     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2631c     09 01 42 F5 | 	or	_var01, arg01
26320     80 00 00 FF 
26324     00 00 06 F1 | 	add	_var01, ##65536
26328     00 FB 01 F6 | 	mov	result1, _var01
2632c     12 FA 45 F0 | 	shr	result1, #18
26330     07 FA 05 F5 | 	and	result1, #7
26334     F0 16 06 F6 | 	mov	arg03, #240
26338     FD 16 42 F5 | 	or	arg03, result1
2633c     0A 17 42 FC | 	wrbyte	arg03, arg02
26340     01 14 06 F1 | 	add	arg02, #1
26344     00 FB 01 F6 | 	mov	result1, _var01
26348     0C FA 45 F0 | 	shr	result1, #12
2634c     3F FA 05 F5 | 	and	result1, #63
26350     80 16 06 F6 | 	mov	arg03, #128
26354     FD 16 42 F5 | 	or	arg03, result1
26358     0A 17 42 FC | 	wrbyte	arg03, arg02
2635c     01 14 06 F1 | 	add	arg02, #1
26360     00 FB 01 F6 | 	mov	result1, _var01
26364     06 FA 45 F0 | 	shr	result1, #6
26368     3F FA 05 F5 | 	and	result1, #63
2636c     80 16 06 F6 | 	mov	arg03, #128
26370     FD 16 42 F5 | 	or	arg03, result1
26374     0A 17 42 FC | 	wrbyte	arg03, arg02
26378     01 14 06 F1 | 	add	arg02, #1
2637c     3F 00 06 F5 | 	and	_var01, #63
26380     80 FA 05 F6 | 	mov	result1, #128
26384     00 FB 41 F5 | 	or	result1, _var01
26388     0A FB 41 FC | 	wrbyte	result1, arg02
2638c                 | ' 	chr = (hc | chr) + 0x10000;
2638c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2638c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2638c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2638c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2638c                 | ' 	return 4;
2638c     04 FA 05 F6 | 	mov	result1, #4
26390                 | _fatfs_cc_put_utf_ret
26390     2D 00 64 FD | 	ret
26394                 | 
26394                 | _fatfs_cc_sync_window
26394     02 4A 05 F6 | 	mov	COUNT_, #2
26398     A8 00 A0 FD | 	call	#pushregs_
2639c     09 1F 02 F6 | 	mov	local01, arg01
263a0     00 20 06 F6 | 	mov	local02, #0
263a4     03 1E 06 F1 | 	add	local01, #3
263a8     0F FB C9 FA | 	rdbyte	result1, local01 wz
263ac     03 1E 86 F1 | 	sub	local01, #3
263b0     A4 00 90 AD |  if_e	jmp	#LR__3852
263b4     01 1E 06 F1 | 	add	local01, #1
263b8     0F 13 C2 FA | 	rdbyte	arg01, local01
263bc     33 1E 06 F1 | 	add	local01, #51
263c0     0F 15 02 F6 | 	mov	arg02, local01
263c4     04 1E 86 F1 | 	sub	local01, #4
263c8     0F 17 02 FB | 	rdlong	arg03, local01
263cc     30 1E 86 F1 | 	sub	local01, #48
263d0     01 18 06 F6 | 	mov	arg04, #1
263d4     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
263d8     00 FA 0D F2 | 	cmp	result1, #0 wz
263dc     74 00 90 5D |  if_ne	jmp	#LR__3850
263e0     03 1E 06 F1 | 	add	local01, #3
263e4     0F 01 48 FC | 	wrbyte	#0, local01
263e8     2D 1E 06 F1 | 	add	local01, #45
263ec     0F FB 01 FB | 	rdlong	result1, local01
263f0     0C 1E 86 F1 | 	sub	local01, #12
263f4     0F 19 02 FB | 	rdlong	arg04, local01
263f8     0C FB 81 F1 | 	sub	result1, arg04
263fc     08 1E 86 F1 | 	sub	local01, #8
26400     0F 19 02 FB | 	rdlong	arg04, local01
26404     1C 1E 86 F1 | 	sub	local01, #28
26408     0C FB 11 F2 | 	cmp	result1, arg04 wc
2640c     48 00 90 3D |  if_ae	jmp	#LR__3851
26410     02 1E 06 F1 | 	add	local01, #2
26414     0F 19 C2 FA | 	rdbyte	arg04, local01
26418     02 1E 86 F1 | 	sub	local01, #2
2641c     02 18 0E F2 | 	cmp	arg04, #2 wz
26420     34 00 90 5D |  if_ne	jmp	#LR__3851
26424     01 1E 06 F1 | 	add	local01, #1
26428     0F 13 C2 FA | 	rdbyte	arg01, local01
2642c     33 1E 06 F1 | 	add	local01, #51
26430     0F 15 02 F6 | 	mov	arg02, local01
26434     04 1E 86 F1 | 	sub	local01, #4
26438     0F 17 02 FB | 	rdlong	arg03, local01
2643c     14 1E 86 F1 | 	sub	local01, #20
26440     0F 1F 02 FB | 	rdlong	local01, local01
26444     0F 17 02 F1 | 	add	arg03, local01
26448     01 18 06 F6 | 	mov	arg04, #1
2644c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
26450     04 00 90 FD | 	jmp	#LR__3851
26454                 | LR__3850
26454     01 20 06 F6 | 	mov	local02, #1
26458                 | LR__3851
26458                 | LR__3852
26458                 | ' 			res = FR_DISK_ERR;
26458                 | ' 		}
26458                 | ' 	}
26458                 | ' 	return res;
26458     10 FB 01 F6 | 	mov	result1, local02
2645c     A7 F0 03 F6 | 	mov	ptra, fp
26460     B2 00 A0 FD | 	call	#popregs_
26464                 | _fatfs_cc_sync_window_ret
26464     2D 00 64 FD | 	ret
26468                 | 
26468                 | _fatfs_cc_move_window
26468     03 4A 05 F6 | 	mov	COUNT_, #3
2646c     A8 00 A0 FD | 	call	#pushregs_
26470     09 1F 02 F6 | 	mov	local01, arg01
26474     0A 21 02 F6 | 	mov	local02, arg02
26478     00 22 06 F6 | 	mov	local03, #0
2647c     30 1E 06 F1 | 	add	local01, #48
26480     0F 19 02 FB | 	rdlong	arg04, local01
26484     30 1E 86 F1 | 	sub	local01, #48
26488     0C 21 0A F2 | 	cmp	local02, arg04 wz
2648c     40 00 90 AD |  if_e	jmp	#LR__3861
26490     0F 13 02 F6 | 	mov	arg01, local01
26494     FC FE BF FD | 	call	#_fatfs_cc_sync_window
26498     FD 22 0A F6 | 	mov	local03, result1 wz
2649c     30 00 90 5D |  if_ne	jmp	#LR__3860
264a0     01 1E 06 F1 | 	add	local01, #1
264a4     0F 13 C2 FA | 	rdbyte	arg01, local01
264a8     33 1E 06 F1 | 	add	local01, #51
264ac     0F 15 02 F6 | 	mov	arg02, local01
264b0     10 17 02 F6 | 	mov	arg03, local02
264b4     01 18 06 F6 | 	mov	arg04, #1
264b8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
264bc     00 FA 0D F2 | 	cmp	result1, #0 wz
264c0     01 20 66 56 |  if_ne	neg	local02, #1
264c4     01 22 06 56 |  if_ne	mov	local03, #1
264c8     04 1E 86 F1 | 	sub	local01, #4
264cc     0F 21 62 FC | 	wrlong	local02, local01
264d0                 | LR__3860
264d0                 | LR__3861
264d0                 | ' 				sect = (LBA_t)0 - 1;
264d0                 | ' 				res = FR_DISK_ERR;
264d0                 | ' 			}
264d0                 | ' 			fs->winsect = sect;
264d0                 | ' 		}
264d0                 | ' 	}
264d0                 | ' 	return res;
264d0     11 FB 01 F6 | 	mov	result1, local03
264d4     A7 F0 03 F6 | 	mov	ptra, fp
264d8     B2 00 A0 FD | 	call	#popregs_
264dc                 | _fatfs_cc_move_window_ret
264dc     2D 00 64 FD | 	ret
264e0                 | 
264e0                 | _fatfs_cc_sync_fs
264e0     02 4A 05 F6 | 	mov	COUNT_, #2
264e4     A8 00 A0 FD | 	call	#pushregs_
264e8     09 1F 02 F6 | 	mov	local01, arg01
264ec     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
264f0     FD 20 0A F6 | 	mov	local02, result1 wz
264f4     D8 00 90 5D |  if_ne	jmp	#LR__3871
264f8     0F 19 C2 FA | 	rdbyte	arg04, local01
264fc     03 18 0E F2 | 	cmp	arg04, #3 wz
26500     04 1E 06 A1 |  if_e	add	local01, #4
26504     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
26508     04 1E 86 A1 |  if_e	sub	local01, #4
2650c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
26510     A0 00 90 5D |  if_ne	jmp	#LR__3870
26514     34 1E 06 F1 | 	add	local01, #52
26518     0F 13 02 F6 | 	mov	arg01, local01
2651c     00 14 06 F6 | 	mov	arg02, #0
26520     09 16 C6 F9 | 	decod	arg03, #9
26524     98 00 A0 FD | 	call	#\builtin_bytefill_
26528     0F 13 02 F6 | 	mov	arg01, local01
2652c     FE 13 06 F1 | 	add	arg01, #510
26530     55 00 80 FF 
26534     09 AB 58 FC | 	wrword	##43605, arg01
26538     A9 B0 A0 FF 
2653c     0F A5 68 FC | 	wrlong	##1096897106, local01
26540     0F 13 02 F6 | 	mov	arg01, local01
26544     E4 13 06 F1 | 	add	arg01, #484
26548     B9 A0 B0 FF 
2654c     09 E5 68 FC | 	wrlong	##1631679090, arg01
26550     0F 13 02 F6 | 	mov	arg01, local01
26554     E8 13 06 F1 | 	add	arg01, #488
26558     20 1E 86 F1 | 	sub	local01, #32
2655c     0F 15 02 FB | 	rdlong	arg02, local01
26560     09 15 62 FC | 	wrlong	arg02, arg01
26564     20 1E 06 F1 | 	add	local01, #32
26568     0F 13 02 F6 | 	mov	arg01, local01
2656c     EC 13 06 F1 | 	add	arg01, #492
26570     24 1E 86 F1 | 	sub	local01, #36
26574     0F 15 02 FB | 	rdlong	arg02, local01
26578     09 15 62 FC | 	wrlong	arg02, arg01
2657c     10 1E 06 F1 | 	add	local01, #16
26580     0F 17 02 FB | 	rdlong	arg03, local01
26584     01 16 06 F1 | 	add	arg03, #1
26588     10 1E 06 F1 | 	add	local01, #16
2658c     0F 17 62 FC | 	wrlong	arg03, local01
26590     2F 1E 86 F1 | 	sub	local01, #47
26594     0F 13 C2 FA | 	rdbyte	arg01, local01
26598     33 1E 06 F1 | 	add	local01, #51
2659c     0F 15 02 F6 | 	mov	arg02, local01
265a0     01 18 06 F6 | 	mov	arg04, #1
265a4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
265a8     30 1E 86 F1 | 	sub	local01, #48
265ac     0F 01 48 FC | 	wrbyte	#0, local01
265b0     04 1E 86 F1 | 	sub	local01, #4
265b4                 | LR__3870
265b4     01 1E 06 F1 | 	add	local01, #1
265b8     0F 13 C2 FA | 	rdbyte	arg01, local01
265bc     00 14 06 F6 | 	mov	arg02, #0
265c0     00 16 06 F6 | 	mov	arg03, #0
265c4     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
265c8     00 FA 0D F2 | 	cmp	result1, #0 wz
265cc     01 20 06 56 |  if_ne	mov	local02, #1
265d0                 | LR__3871
265d0                 | ' 	}
265d0                 | ' 
265d0                 | ' 	return res;
265d0     10 FB 01 F6 | 	mov	result1, local02
265d4     A7 F0 03 F6 | 	mov	ptra, fp
265d8     B2 00 A0 FD | 	call	#popregs_
265dc                 | _fatfs_cc_sync_fs_ret
265dc     2D 00 64 FD | 	ret
265e0                 | 
265e0                 | _fatfs_cc_clst2sect
265e0     02 14 86 F1 | 	sub	arg02, #2
265e4     18 12 06 F1 | 	add	arg01, #24
265e8     09 01 02 FB | 	rdlong	_var01, arg01
265ec     18 12 86 F1 | 	sub	arg01, #24
265f0     02 00 86 F1 | 	sub	_var01, #2
265f4     00 15 12 F2 | 	cmp	arg02, _var01 wc
265f8     00 FA 05 36 |  if_ae	mov	result1, #0
265fc     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
26600     0A 12 06 F1 | 	add	arg01, #10
26604     09 01 E2 FA | 	rdword	_var01, arg01
26608     0A 01 02 FD | 	qmul	_var01, arg02
2660c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2660c     22 12 06 F1 | 	add	arg01, #34
26610     09 FB 01 FB | 	rdlong	result1, arg01
26614     18 00 62 FD | 	getqx	_var01
26618     00 FB 01 F1 | 	add	result1, _var01
2661c                 | _fatfs_cc_clst2sect_ret
2661c     2D 00 64 FD | 	ret
26620                 | 
26620                 | _fatfs_cc_get_fat
26620     07 4A 05 F6 | 	mov	COUNT_, #7
26624     A8 00 A0 FD | 	call	#pushregs_
26628     0A 1F 02 F6 | 	mov	local01, arg02
2662c     09 21 02 FB | 	rdlong	local02, arg01
26630     02 1E 16 F2 | 	cmp	local01, #2 wc
26634     14 00 90 CD |  if_b	jmp	#LR__3880
26638     18 20 06 F1 | 	add	local02, #24
2663c     10 23 02 FB | 	rdlong	local03, local02
26640     18 20 86 F1 | 	sub	local02, #24
26644     11 1F 12 F2 | 	cmp	local01, local03 wc
26648     08 00 90 CD |  if_b	jmp	#LR__3881
2664c                 | LR__3880
2664c     01 24 06 F6 | 	mov	local04, #1
26650     60 01 90 FD | 	jmp	#LR__3888
26654                 | LR__3881
26654     01 24 66 F6 | 	neg	local04, #1
26658                 | ' 		val = 0xFFFFFFFF;
26658                 | ' 
26658                 | ' 		switch (fs->fs_type) {
26658     10 27 C2 FA | 	rdbyte	local05, local02
2665c     01 26 86 F1 | 	sub	local05, #1
26660     03 26 26 F3 | 	fle	local05, #3
26664     30 26 62 FD | 	jmprel	local05
26668                 | LR__3882
26668     0C 00 90 FD | 	jmp	#LR__3883
2666c     B8 00 90 FD | 	jmp	#LR__3884
26670     F8 00 90 FD | 	jmp	#LR__3885
26674     38 01 90 FD | 	jmp	#LR__3886
26678                 | LR__3883
26678     0F 27 02 F6 | 	mov	local05, local01
2667c     0F 13 02 F6 | 	mov	arg01, local01
26680     01 12 46 F0 | 	shr	arg01, #1
26684     09 27 02 F1 | 	add	local05, arg01
26688     10 13 02 F6 | 	mov	arg01, local02
2668c     13 29 02 F6 | 	mov	local06, local05
26690     09 28 46 F0 | 	shr	local06, #9
26694     24 20 06 F1 | 	add	local02, #36
26698     10 15 02 FB | 	rdlong	arg02, local02
2669c     24 20 86 F1 | 	sub	local02, #36
266a0     14 15 02 F1 | 	add	arg02, local06
266a4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
266a8     00 FA 0D F2 | 	cmp	result1, #0 wz
266ac     04 01 90 5D |  if_ne	jmp	#LR__3887
266b0     13 29 02 F6 | 	mov	local06, local05
266b4     FF 29 06 F5 | 	and	local06, #511
266b8     34 20 06 F1 | 	add	local02, #52
266bc     10 29 02 F1 | 	add	local06, local02
266c0     14 2B C2 FA | 	rdbyte	local07, local06
266c4     34 20 86 F1 | 	sub	local02, #52
266c8     10 13 02 F6 | 	mov	arg01, local02
266cc     01 26 06 F1 | 	add	local05, #1
266d0     13 29 02 F6 | 	mov	local06, local05
266d4     09 28 46 F0 | 	shr	local06, #9
266d8     24 20 06 F1 | 	add	local02, #36
266dc     10 15 02 FB | 	rdlong	arg02, local02
266e0     24 20 86 F1 | 	sub	local02, #36
266e4     14 15 02 F1 | 	add	arg02, local06
266e8     7C FD BF FD | 	call	#_fatfs_cc_move_window
266ec     00 FA 0D F2 | 	cmp	result1, #0 wz
266f0     C0 00 90 5D |  if_ne	jmp	#LR__3887
266f4     FF 27 06 F5 | 	and	local05, #511
266f8     34 20 06 F1 | 	add	local02, #52
266fc     10 27 02 F1 | 	add	local05, local02
26700     13 29 C2 FA | 	rdbyte	local06, local05
26704     08 28 66 F0 | 	shl	local06, #8
26708     14 2B 42 F5 | 	or	local07, local06
2670c     01 1E CE F7 | 	test	local01, #1 wz
26710     04 2A 46 50 |  if_ne	shr	local07, #4
26714     15 23 02 56 |  if_ne	mov	local03, local07
26718     0B 2A 46 A7 |  if_e	zerox	local07, #11
2671c     15 23 02 A6 |  if_e	mov	local03, local07
26720     11 25 02 F6 | 	mov	local04, local03
26724                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
26724                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
26724                 | ' 			break;
26724     8C 00 90 FD | 	jmp	#LR__3887
26728                 | LR__3884
26728     10 13 02 F6 | 	mov	arg01, local02
2672c     0F 29 02 F6 | 	mov	local06, local01
26730     08 28 46 F0 | 	shr	local06, #8
26734     24 20 06 F1 | 	add	local02, #36
26738     10 15 02 FB | 	rdlong	arg02, local02
2673c     24 20 86 F1 | 	sub	local02, #36
26740     14 15 02 F1 | 	add	arg02, local06
26744     20 FD BF FD | 	call	#_fatfs_cc_move_window
26748     00 FA 0D F2 | 	cmp	result1, #0 wz
2674c     64 00 90 5D |  if_ne	jmp	#LR__3887
26750     34 20 06 F1 | 	add	local02, #52
26754     01 1E 66 F0 | 	shl	local01, #1
26758     FF 1F 06 F5 | 	and	local01, #511
2675c     0F 21 02 F1 | 	add	local02, local01
26760                 | ' {
26760                 | ' 
26760                 | ' 	return *((WORD*)ptr);
26760     10 FB E1 FA | 	rdword	result1, local02
26764     FD 24 32 F9 | 	getword	local04, result1, #0
26768                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
26768                 | ' 			break;
26768     48 00 90 FD | 	jmp	#LR__3887
2676c                 | LR__3885
2676c     10 13 02 F6 | 	mov	arg01, local02
26770     0F 29 02 F6 | 	mov	local06, local01
26774     07 28 46 F0 | 	shr	local06, #7
26778     24 20 06 F1 | 	add	local02, #36
2677c     10 15 02 FB | 	rdlong	arg02, local02
26780     24 20 86 F1 | 	sub	local02, #36
26784     14 15 02 F1 | 	add	arg02, local06
26788     DC FC BF FD | 	call	#_fatfs_cc_move_window
2678c     00 FA 0D F2 | 	cmp	result1, #0 wz
26790     20 00 90 5D |  if_ne	jmp	#LR__3887
26794     34 20 06 F1 | 	add	local02, #52
26798     02 1E 66 F0 | 	shl	local01, #2
2679c     FF 1F 06 F5 | 	and	local01, #511
267a0     0F 21 02 F1 | 	add	local02, local01
267a4                 | ' {
267a4                 | ' 
267a4                 | ' 	return *((DWORD*)ptr);
267a4     10 25 02 FB | 	rdlong	local04, local02
267a8     7C 24 06 F4 | 	bitl	local04, #124
267ac                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
267ac                 | ' 			break;
267ac     04 00 90 FD | 	jmp	#LR__3887
267b0                 | LR__3886
267b0     01 24 06 F6 | 	mov	local04, #1
267b4                 | LR__3887
267b4                 | LR__3888
267b4                 | ' 			val = 1;
267b4                 | ' 		}
267b4                 | ' 	}
267b4                 | ' 
267b4                 | ' 	return val;
267b4     12 FB 01 F6 | 	mov	result1, local04
267b8     A7 F0 03 F6 | 	mov	ptra, fp
267bc     B2 00 A0 FD | 	call	#popregs_
267c0                 | _fatfs_cc_get_fat_ret
267c0     2D 00 64 FD | 	ret
267c4                 | 
267c4                 | _fatfs_cc_put_fat
267c4     08 4A 05 F6 | 	mov	COUNT_, #8
267c8     A8 00 A0 FD | 	call	#pushregs_
267cc     09 1F 02 F6 | 	mov	local01, arg01
267d0     0A 21 02 F6 | 	mov	local02, arg02
267d4     0B 23 02 F6 | 	mov	local03, arg03
267d8     02 24 06 F6 | 	mov	local04, #2
267dc     02 20 16 F2 | 	cmp	local02, #2 wc
267e0     E0 01 90 CD |  if_b	jmp	#LR__3897
267e4     18 1E 06 F1 | 	add	local01, #24
267e8     0F 27 02 FB | 	rdlong	local05, local01
267ec     18 1E 86 F1 | 	sub	local01, #24
267f0     13 21 12 F2 | 	cmp	local02, local05 wc
267f4     CC 01 90 3D |  if_ae	jmp	#LR__3897
267f8                 | ' 		switch (fs->fs_type) {
267f8     0F 29 C2 FA | 	rdbyte	local06, local01
267fc     01 28 86 F1 | 	sub	local06, #1
26800     03 28 26 F3 | 	fle	local06, #3
26804     30 28 62 FD | 	jmprel	local06
26808                 | LR__3890
26808     0C 00 90 FD | 	jmp	#LR__3891
2680c     F8 00 90 FD | 	jmp	#LR__3894
26810     40 01 90 FD | 	jmp	#LR__3895
26814     AC 01 90 FD | 	jmp	#LR__3896
26818                 | LR__3891
26818     10 2B 02 F6 | 	mov	local07, local02
2681c     10 27 02 F6 | 	mov	local05, local02
26820     01 26 46 F0 | 	shr	local05, #1
26824     13 2B 02 F1 | 	add	local07, local05
26828     0F 13 02 F6 | 	mov	arg01, local01
2682c     15 29 02 F6 | 	mov	local06, local07
26830     09 28 46 F0 | 	shr	local06, #9
26834     24 1E 06 F1 | 	add	local01, #36
26838     0F 15 02 FB | 	rdlong	arg02, local01
2683c     24 1E 86 F1 | 	sub	local01, #36
26840     14 15 02 F1 | 	add	arg02, local06
26844     20 FC BF FD | 	call	#_fatfs_cc_move_window
26848     FD 24 0A F6 | 	mov	local04, result1 wz
2684c     74 01 90 5D |  if_ne	jmp	#LR__3896
26850     34 1E 06 F1 | 	add	local01, #52
26854     0F 2D 02 F6 | 	mov	local08, local01
26858     15 27 02 F6 | 	mov	local05, local07
2685c     FF 27 06 F5 | 	and	local05, #511
26860     13 2D 02 F1 | 	add	local08, local05
26864     01 20 CE F7 | 	test	local02, #1 wz
26868     34 1E 86 F1 | 	sub	local01, #52
2686c     01 2A 06 F1 | 	add	local07, #1
26870     18 00 90 AD |  if_e	jmp	#LR__3892
26874     16 27 C2 FA | 	rdbyte	local05, local08
26878     13 27 42 F8 | 	getnib	local05, local05, #0
2687c     11 29 E2 F8 | 	getbyte	local06, local03, #0
26880     04 28 66 F0 | 	shl	local06, #4
26884     14 27 42 F5 | 	or	local05, local06
26888     04 00 90 FD | 	jmp	#LR__3893
2688c                 | LR__3892
2688c     11 27 02 F6 | 	mov	local05, local03
26890                 | LR__3893
26890     16 27 42 FC | 	wrbyte	local05, local08
26894     03 1E 06 F1 | 	add	local01, #3
26898     0F 03 48 FC | 	wrbyte	#1, local01
2689c     03 1E 86 F1 | 	sub	local01, #3
268a0     0F 13 02 F6 | 	mov	arg01, local01
268a4     15 2D 02 F6 | 	mov	local08, local07
268a8     09 2C 46 F0 | 	shr	local08, #9
268ac     24 1E 06 F1 | 	add	local01, #36
268b0     0F 15 02 FB | 	rdlong	arg02, local01
268b4     24 1E 86 F1 | 	sub	local01, #36
268b8     16 15 02 F1 | 	add	arg02, local08
268bc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
268c0     FD 24 0A F6 | 	mov	local04, result1 wz
268c4     FC 00 90 5D |  if_ne	jmp	#LR__3896
268c8     34 1E 06 F1 | 	add	local01, #52
268cc     0F 2D 02 F6 | 	mov	local08, local01
268d0     FF 2B 06 F5 | 	and	local07, #511
268d4     15 2D 02 F1 | 	add	local08, local07
268d8     01 20 CE F7 | 	test	local02, #1 wz
268dc     04 22 46 50 |  if_ne	shr	local03, #4
268e0     11 27 02 56 |  if_ne	mov	local05, local03
268e4     16 27 C2 AA |  if_e	rdbyte	local05, local08
268e8     F0 26 06 A5 |  if_e	and	local05, #240
268ec     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
268f0     11 23 42 A8 |  if_e	getnib	local03, local03, #0
268f4     11 27 42 A5 |  if_e	or	local05, local03
268f8     16 27 42 FC | 	wrbyte	local05, local08
268fc     31 1E 86 F1 | 	sub	local01, #49
26900     0F 03 48 FC | 	wrbyte	#1, local01
26904                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
26904                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
26904                 | ' 			fs->wflag = 1;
26904                 | ' 			break;
26904     BC 00 90 FD | 	jmp	#LR__3896
26908                 | LR__3894
26908     0F 13 02 F6 | 	mov	arg01, local01
2690c     10 2D 02 F6 | 	mov	local08, local02
26910     08 2C 46 F0 | 	shr	local08, #8
26914     24 1E 06 F1 | 	add	local01, #36
26918     0F 15 02 FB | 	rdlong	arg02, local01
2691c     24 1E 86 F1 | 	sub	local01, #36
26920     16 15 02 F1 | 	add	arg02, local08
26924     40 FB BF FD | 	call	#_fatfs_cc_move_window
26928     FD 24 0A F6 | 	mov	local04, result1 wz
2692c     94 00 90 5D |  if_ne	jmp	#LR__3896
26930     34 1E 06 F1 | 	add	local01, #52
26934     0F 13 02 F6 | 	mov	arg01, local01
26938     01 20 66 F0 | 	shl	local02, #1
2693c     FF 21 06 F5 | 	and	local02, #511
26940     10 13 02 F1 | 	add	arg01, local02
26944     09 23 52 FC | 	wrword	local03, arg01
26948     31 1E 86 F1 | 	sub	local01, #49
2694c     0F 03 48 FC | 	wrbyte	#1, local01
26950                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
26950                 | ' 			fs->wflag = 1;
26950                 | ' 			break;
26950     70 00 90 FD | 	jmp	#LR__3896
26954                 | LR__3895
26954     0F 13 02 F6 | 	mov	arg01, local01
26958     10 2D 02 F6 | 	mov	local08, local02
2695c     07 2C 46 F0 | 	shr	local08, #7
26960     24 1E 06 F1 | 	add	local01, #36
26964     0F 15 02 FB | 	rdlong	arg02, local01
26968     24 1E 86 F1 | 	sub	local01, #36
2696c     16 15 02 F1 | 	add	arg02, local08
26970     F4 FA BF FD | 	call	#_fatfs_cc_move_window
26974     FD 24 0A F6 | 	mov	local04, result1 wz
26978     48 00 90 5D |  if_ne	jmp	#LR__3896
2697c     7C 22 06 F4 | 	bitl	local03, #124
26980     34 1E 06 F1 | 	add	local01, #52
26984     10 2D 02 F6 | 	mov	local08, local02
26988     02 2C 66 F0 | 	shl	local08, #2
2698c     FF 2D 06 F5 | 	and	local08, #511
26990     0F 13 02 F6 | 	mov	arg01, local01
26994     16 13 02 F1 | 	add	arg01, local08
26998                 | ' {
26998                 | ' 
26998                 | ' 	return *((DWORD*)ptr);
26998     09 2D 02 FB | 	rdlong	local08, arg01
2699c     00 00 78 FF 
269a0     00 2C 06 F5 | 	and	local08, ##-268435456
269a4     16 23 42 F5 | 	or	local03, local08
269a8     0F 13 02 F6 | 	mov	arg01, local01
269ac     02 20 66 F0 | 	shl	local02, #2
269b0     FF 21 06 F5 | 	and	local02, #511
269b4     10 13 02 F1 | 	add	arg01, local02
269b8     09 23 62 FC | 	wrlong	local03, arg01
269bc     31 1E 86 F1 | 	sub	local01, #49
269c0     0F 03 48 FC | 	wrbyte	#1, local01
269c4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
269c4                 | ' 			}
269c4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
269c4                 | ' 			fs->wflag = 1;
269c4                 | ' 			break;
269c4                 | LR__3896
269c4                 | LR__3897
269c4                 | ' 		}
269c4                 | ' 	}
269c4                 | ' 	return res;
269c4     12 FB 01 F6 | 	mov	result1, local04
269c8     A7 F0 03 F6 | 	mov	ptra, fp
269cc     B2 00 A0 FD | 	call	#popregs_
269d0                 | _fatfs_cc_put_fat_ret
269d0     2D 00 64 FD | 	ret
269d4                 | 
269d4                 | _fatfs_cc_remove_chain
269d4     05 4A 05 F6 | 	mov	COUNT_, #5
269d8     A8 00 A0 FD | 	call	#pushregs_
269dc     09 1F 02 F6 | 	mov	local01, arg01
269e0     0A 21 02 F6 | 	mov	local02, arg02
269e4     0B 23 02 F6 | 	mov	local03, arg03
269e8     0F 25 02 FB | 	rdlong	local04, local01
269ec     02 20 16 F2 | 	cmp	local02, #2 wc
269f0     14 00 90 CD |  if_b	jmp	#LR__3900
269f4     18 24 06 F1 | 	add	local04, #24
269f8     12 FB 01 FB | 	rdlong	result1, local04
269fc     18 24 86 F1 | 	sub	local04, #24
26a00     FD 20 12 F2 | 	cmp	local02, result1 wc
26a04     08 00 90 CD |  if_b	jmp	#LR__3901
26a08                 | LR__3900
26a08     02 FA 05 F6 | 	mov	result1, #2
26a0c     CC 00 90 FD | 	jmp	#LR__3906
26a10                 | LR__3901
26a10     00 22 0E F2 | 	cmp	local03, #0 wz
26a14     18 00 90 AD |  if_e	jmp	#LR__3902
26a18     11 15 02 F6 | 	mov	arg02, local03
26a1c     12 13 02 F6 | 	mov	arg01, local04
26a20     01 16 66 F6 | 	neg	arg03, #1
26a24     9C FD BF FD | 	call	#_fatfs_cc_put_fat
26a28     00 FA 0D F2 | 	cmp	result1, #0 wz
26a2c     AC 00 90 5D |  if_ne	jmp	#LR__3906
26a30                 | LR__3902
26a30                 | ' 	}
26a30                 | ' 
26a30                 | ' 
26a30                 | ' 	do {
26a30                 | LR__3903
26a30     10 15 02 F6 | 	mov	arg02, local02
26a34     0F 13 02 F6 | 	mov	arg01, local01
26a38     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
26a3c     FD 26 0A F6 | 	mov	local05, result1 wz
26a40     94 00 90 AD |  if_e	jmp	#LR__3905
26a44     01 26 0E F2 | 	cmp	local05, #1 wz
26a48     02 FA 05 A6 |  if_e	mov	result1, #2
26a4c     8C 00 90 AD |  if_e	jmp	#LR__3906
26a50     FF FF 7F FF 
26a54     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26a58     01 FA 05 A6 |  if_e	mov	result1, #1
26a5c     7C 00 90 AD |  if_e	jmp	#LR__3906
26a60     10 15 02 F6 | 	mov	arg02, local02
26a64     12 13 02 F6 | 	mov	arg01, local04
26a68     00 16 06 F6 | 	mov	arg03, #0
26a6c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
26a70     FD 22 0A F6 | 	mov	local03, result1 wz
26a74     11 FB 01 56 |  if_ne	mov	result1, local03
26a78     60 00 90 5D |  if_ne	jmp	#LR__3906
26a7c     18 24 06 F1 | 	add	local04, #24
26a80     12 23 02 FB | 	rdlong	local03, local04
26a84     02 22 86 F1 | 	sub	local03, #2
26a88     04 24 86 F1 | 	sub	local04, #4
26a8c     12 21 02 FB | 	rdlong	local02, local04
26a90     14 24 86 F1 | 	sub	local04, #20
26a94     11 21 12 F2 | 	cmp	local02, local03 wc
26a98     24 00 90 3D |  if_ae	jmp	#LR__3904
26a9c     14 24 06 F1 | 	add	local04, #20
26aa0     12 23 02 FB | 	rdlong	local03, local04
26aa4     01 22 06 F1 | 	add	local03, #1
26aa8     12 23 62 FC | 	wrlong	local03, local04
26aac     10 24 86 F1 | 	sub	local04, #16
26ab0     12 23 C2 FA | 	rdbyte	local03, local04
26ab4     01 22 46 F5 | 	or	local03, #1
26ab8     12 23 42 FC | 	wrbyte	local03, local04
26abc     04 24 86 F1 | 	sub	local04, #4
26ac0                 | LR__3904
26ac0     13 21 02 F6 | 	mov	local02, local05
26ac4     18 24 06 F1 | 	add	local04, #24
26ac8     12 27 02 FB | 	rdlong	local05, local04
26acc     18 24 86 F1 | 	sub	local04, #24
26ad0     13 21 12 F2 | 	cmp	local02, local05 wc
26ad4     58 FF 9F CD |  if_b	jmp	#LR__3903
26ad8                 | LR__3905
26ad8                 | ' #line 1500 "ff.c"
26ad8                 | ' 	return FR_OK;
26ad8     00 FA 05 F6 | 	mov	result1, #0
26adc                 | LR__3906
26adc     A7 F0 03 F6 | 	mov	ptra, fp
26ae0     B2 00 A0 FD | 	call	#popregs_
26ae4                 | _fatfs_cc_remove_chain_ret
26ae4     2D 00 64 FD | 	ret
26ae8                 | 
26ae8                 | _fatfs_cc_create_chain
26ae8     09 4A 05 F6 | 	mov	COUNT_, #9
26aec     A8 00 A0 FD | 	call	#pushregs_
26af0     09 1F 02 F6 | 	mov	local01, arg01
26af4     0A 21 0A F6 | 	mov	local02, arg02 wz
26af8     0F 23 02 FB | 	rdlong	local03, local01
26afc     28 00 90 5D |  if_ne	jmp	#LR__3910
26b00     10 22 06 F1 | 	add	local03, #16
26b04     11 25 0A FB | 	rdlong	local04, local03 wz
26b08     10 22 86 F1 | 	sub	local03, #16
26b0c     18 22 06 51 |  if_ne	add	local03, #24
26b10     11 27 02 5B |  if_ne	rdlong	local05, local03
26b14     18 22 86 51 |  if_ne	sub	local03, #24
26b18     13 25 12 52 |  if_ne	cmp	local04, local05 wc
26b1c     50 00 90 4D |  if_c_and_nz	jmp	#LR__3911
26b20     01 24 06 F6 | 	mov	local04, #1
26b24     48 00 90 FD | 	jmp	#LR__3911
26b28                 | LR__3910
26b28     10 15 02 F6 | 	mov	arg02, local02
26b2c     0F 13 02 F6 | 	mov	arg01, local01
26b30     EC FA BF FD | 	call	#_fatfs_cc_get_fat
26b34     FD 24 02 F6 | 	mov	local04, result1
26b38     02 24 16 F2 | 	cmp	local04, #2 wc
26b3c     01 FA 05 C6 |  if_b	mov	result1, #1
26b40     BC 01 90 CD |  if_b	jmp	#LR__3921
26b44     FF FF 7F FF 
26b48     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26b4c     12 FB 01 A6 |  if_e	mov	result1, local04
26b50     AC 01 90 AD |  if_e	jmp	#LR__3921
26b54     18 22 06 F1 | 	add	local03, #24
26b58     11 27 02 FB | 	rdlong	local05, local03
26b5c     18 22 86 F1 | 	sub	local03, #24
26b60     13 25 12 F2 | 	cmp	local04, local05 wc
26b64     12 FB 01 C6 |  if_b	mov	result1, local04
26b68     94 01 90 CD |  if_b	jmp	#LR__3921
26b6c     10 25 02 F6 | 	mov	local04, local02
26b70                 | LR__3911
26b70     14 22 06 F1 | 	add	local03, #20
26b74     11 27 0A FB | 	rdlong	local05, local03 wz
26b78     14 22 86 F1 | 	sub	local03, #20
26b7c     00 FA 05 A6 |  if_e	mov	result1, #0
26b80     7C 01 90 AD |  if_e	jmp	#LR__3921
26b84     00 28 06 F6 | 	mov	local06, #0
26b88     10 25 0A F2 | 	cmp	local04, local02 wz
26b8c     74 00 90 5D |  if_ne	jmp	#LR__3914
26b90     12 29 02 F6 | 	mov	local06, local04
26b94     01 28 06 F1 | 	add	local06, #1
26b98     18 22 06 F1 | 	add	local03, #24
26b9c     11 27 02 FB | 	rdlong	local05, local03
26ba0     18 22 86 F1 | 	sub	local03, #24
26ba4     13 29 12 F2 | 	cmp	local06, local05 wc
26ba8     02 28 06 36 |  if_ae	mov	local06, #2
26bac     14 15 02 F6 | 	mov	arg02, local06
26bb0     0F 13 02 F6 | 	mov	arg01, local01
26bb4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
26bb8     FD 26 02 F6 | 	mov	local05, result1
26bbc     01 26 0E F2 | 	cmp	local05, #1 wz
26bc0     FF FF 7F 5F 
26bc4     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
26bc8     13 FB 01 A6 |  if_e	mov	result1, local05
26bcc     30 01 90 AD |  if_e	jmp	#LR__3921
26bd0     00 26 0E F2 | 	cmp	local05, #0 wz
26bd4     2C 00 90 AD |  if_e	jmp	#LR__3913
26bd8     10 22 06 F1 | 	add	local03, #16
26bdc     11 2B 02 FB | 	rdlong	local07, local03
26be0     10 22 86 F1 | 	sub	local03, #16
26be4     02 2A 16 F2 | 	cmp	local07, #2 wc
26be8     14 00 90 CD |  if_b	jmp	#LR__3912
26bec     18 22 06 F1 | 	add	local03, #24
26bf0     11 27 02 FB | 	rdlong	local05, local03
26bf4     18 22 86 F1 | 	sub	local03, #24
26bf8     13 2B 12 F2 | 	cmp	local07, local05 wc
26bfc     15 25 02 C6 |  if_b	mov	local04, local07
26c00                 | LR__3912
26c00     00 28 06 F6 | 	mov	local06, #0
26c04                 | LR__3913
26c04                 | LR__3914
26c04     00 28 0E F2 | 	cmp	local06, #0 wz
26c08     60 00 90 5D |  if_ne	jmp	#LR__3917
26c0c     12 29 02 F6 | 	mov	local06, local04
26c10                 | ' 			ncl = scl;
26c10                 | ' 			for (;;) {
26c10                 | LR__3915
26c10     01 28 06 F1 | 	add	local06, #1
26c14     18 22 06 F1 | 	add	local03, #24
26c18     11 27 02 FB | 	rdlong	local05, local03
26c1c     18 22 86 F1 | 	sub	local03, #24
26c20     13 29 12 F2 | 	cmp	local06, local05 wc
26c24     02 28 06 36 |  if_ae	mov	local06, #2
26c28     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
26c2c     00 FA 05 16 |  if_a	mov	result1, #0
26c30     CC 00 90 1D |  if_a	jmp	#LR__3921
26c34     14 15 02 F6 | 	mov	arg02, local06
26c38     0F 13 02 F6 | 	mov	arg01, local01
26c3c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
26c40     FD 2A 0A F6 | 	mov	local07, result1 wz
26c44     24 00 90 AD |  if_e	jmp	#LR__3916
26c48     01 2A 0E F2 | 	cmp	local07, #1 wz
26c4c     FF FF 7F 5F 
26c50     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
26c54     15 FB 01 A6 |  if_e	mov	result1, local07
26c58     A4 00 90 AD |  if_e	jmp	#LR__3921
26c5c     12 29 0A F2 | 	cmp	local06, local04 wz
26c60     00 FA 05 A6 |  if_e	mov	result1, #0
26c64     98 00 90 AD |  if_e	jmp	#LR__3921
26c68     A4 FF 9F FD | 	jmp	#LR__3915
26c6c                 | LR__3916
26c6c                 | LR__3917
26c6c     11 13 02 F6 | 	mov	arg01, local03
26c70     14 15 02 F6 | 	mov	arg02, local06
26c74     01 16 66 F6 | 	neg	arg03, #1
26c78     48 FB BF FD | 	call	#_fatfs_cc_put_fat
26c7c     FD 2C 0A F6 | 	mov	local08, result1 wz
26c80     1C 00 90 5D |  if_ne	jmp	#LR__3918
26c84     00 20 0E F2 | 	cmp	local02, #0 wz
26c88     14 00 90 AD |  if_e	jmp	#LR__3918
26c8c     11 13 02 F6 | 	mov	arg01, local03
26c90     10 15 02 F6 | 	mov	arg02, local02
26c94     14 17 02 F6 | 	mov	arg03, local06
26c98     28 FB BF FD | 	call	#_fatfs_cc_put_fat
26c9c     FD 2C 02 F6 | 	mov	local08, result1
26ca0                 | LR__3918
26ca0     00 2C 0E F2 | 	cmp	local08, #0 wz
26ca4     4C 00 90 5D |  if_ne	jmp	#LR__3919
26ca8     10 22 06 F1 | 	add	local03, #16
26cac     11 29 62 FC | 	wrlong	local06, local03
26cb0     08 22 06 F1 | 	add	local03, #8
26cb4     11 27 02 FB | 	rdlong	local05, local03
26cb8     02 26 86 F1 | 	sub	local05, #2
26cbc     04 22 86 F1 | 	sub	local03, #4
26cc0     11 2F 02 FB | 	rdlong	local09, local03
26cc4     14 22 86 F1 | 	sub	local03, #20
26cc8     13 2F 1A F2 | 	cmp	local09, local05 wcz
26ccc     14 22 06 E1 |  if_be	add	local03, #20
26cd0     11 2F 02 EB |  if_be	rdlong	local09, local03
26cd4     01 2E 86 E1 |  if_be	sub	local09, #1
26cd8     11 2F 62 EC |  if_be	wrlong	local09, local03
26cdc     14 22 86 E1 |  if_be	sub	local03, #20
26ce0     04 22 06 F1 | 	add	local03, #4
26ce4     11 27 C2 FA | 	rdbyte	local05, local03
26ce8     01 26 46 F5 | 	or	local05, #1
26cec     11 27 42 FC | 	wrbyte	local05, local03
26cf0     08 00 90 FD | 	jmp	#LR__3920
26cf4                 | LR__3919
26cf4     01 2C 0E F2 | 	cmp	local08, #1 wz
26cf8     01 28 C6 F6 | 	negz	local06, #1
26cfc                 | LR__3920
26cfc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
26cfc                 | ' 	}
26cfc                 | ' 
26cfc                 | ' 	return ncl;
26cfc     14 FB 01 F6 | 	mov	result1, local06
26d00                 | LR__3921
26d00     A7 F0 03 F6 | 	mov	ptra, fp
26d04     B2 00 A0 FD | 	call	#popregs_
26d08                 | _fatfs_cc_create_chain_ret
26d08     2D 00 64 FD | 	ret
26d0c                 | 
26d0c                 | _fatfs_cc_dir_clear
26d0c     06 4A 05 F6 | 	mov	COUNT_, #6
26d10     A8 00 A0 FD | 	call	#pushregs_
26d14     09 1F 02 F6 | 	mov	local01, arg01
26d18     0A 21 02 F6 | 	mov	local02, arg02
26d1c     0F 13 02 F6 | 	mov	arg01, local01
26d20     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
26d24     00 FA 0D F2 | 	cmp	result1, #0 wz
26d28     01 FA 05 56 |  if_ne	mov	result1, #1
26d2c     90 00 90 5D |  if_ne	jmp	#LR__3932
26d30     0F 13 02 F6 | 	mov	arg01, local01
26d34     10 15 02 F6 | 	mov	arg02, local02
26d38     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
26d3c     FD 22 02 F6 | 	mov	local03, result1
26d40     30 1E 06 F1 | 	add	local01, #48
26d44     0F 23 62 FC | 	wrlong	local03, local01
26d48     04 1E 06 F1 | 	add	local01, #4
26d4c     0F 13 02 F6 | 	mov	arg01, local01
26d50     00 14 06 F6 | 	mov	arg02, #0
26d54     09 16 C6 F9 | 	decod	arg03, #9
26d58     98 00 A0 FD | 	call	#\builtin_bytefill_
26d5c     0F 25 02 F6 | 	mov	local04, local01
26d60                 | ' #line 1667 "ff.c"
26d60                 | ' 	{
26d60                 | ' 		ibuf = fs->win; szb = 1;
26d60                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
26d60     00 26 06 F6 | 	mov	local05, #0
26d64     34 1E 86 F1 | 	sub	local01, #52
26d68                 | LR__3930
26d68     0A 1E 06 F1 | 	add	local01, #10
26d6c     0F 29 E2 FA | 	rdword	local06, local01
26d70     0A 1E 86 F1 | 	sub	local01, #10
26d74     14 27 12 F2 | 	cmp	local05, local06 wc
26d78     2C 00 90 3D |  if_ae	jmp	#LR__3931
26d7c     01 1E 06 F1 | 	add	local01, #1
26d80     0F 13 C2 FA | 	rdbyte	arg01, local01
26d84     01 1E 86 F1 | 	sub	local01, #1
26d88     12 15 02 F6 | 	mov	arg02, local04
26d8c     11 17 02 F6 | 	mov	arg03, local03
26d90     13 17 02 F1 | 	add	arg03, local05
26d94     01 18 06 F6 | 	mov	arg04, #1
26d98     9C EF BF FD | 	call	#_fatfs_cc_disk_write
26d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
26da0     01 26 06 A1 |  if_e	add	local05, #1
26da4     C0 FF 9F AD |  if_e	jmp	#LR__3930
26da8                 | LR__3931
26da8                 | ' 	}
26da8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
26da8     0A 1E 06 F1 | 	add	local01, #10
26dac     0F 25 E2 FA | 	rdword	local04, local01
26db0     12 27 0A F2 | 	cmp	local05, local04 wz
26db4     00 28 06 A6 |  if_e	mov	local06, #0
26db8     01 28 06 56 |  if_ne	mov	local06, #1
26dbc     14 FB 01 F6 | 	mov	result1, local06
26dc0                 | LR__3932
26dc0     A7 F0 03 F6 | 	mov	ptra, fp
26dc4     B2 00 A0 FD | 	call	#popregs_
26dc8                 | _fatfs_cc_dir_clear_ret
26dc8     2D 00 64 FD | 	ret
26dcc                 | 
26dcc                 | _fatfs_cc_dir_sdi
26dcc     06 4A 05 F6 | 	mov	COUNT_, #6
26dd0     A8 00 A0 FD | 	call	#pushregs_
26dd4     09 1F 02 F6 | 	mov	local01, arg01
26dd8     0A 21 02 F6 | 	mov	local02, arg02
26ddc     0F 23 02 FB | 	rdlong	local03, local01
26de0     00 10 00 FF 
26de4     00 20 16 F2 | 	cmp	local02, ##2097152 wc
26de8     1F 20 CE C7 |  if_b	test	local02, #31 wz
26dec                 | ' 		return FR_INT_ERR;
26dec     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
26df0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3946
26df4     10 1E 06 F1 | 	add	local01, #16
26df8     0F 21 62 FC | 	wrlong	local02, local01
26dfc     08 1E 86 F1 | 	sub	local01, #8
26e00     0F 25 0A FB | 	rdlong	local04, local01 wz
26e04     08 1E 86 F1 | 	sub	local01, #8
26e08     11 27 C2 AA |  if_e	rdbyte	local05, local03
26e0c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
26e10     28 22 06 21 |  if_nc_and_z	add	local03, #40
26e14     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
26e18     28 22 86 21 |  if_nc_and_z	sub	local03, #40
26e1c     00 24 0E F2 | 	cmp	local04, #0 wz
26e20     3C 00 90 5D |  if_ne	jmp	#LR__3940
26e24     10 27 02 F6 | 	mov	local05, local02
26e28     05 26 46 F0 | 	shr	local05, #5
26e2c     08 22 06 F1 | 	add	local03, #8
26e30     11 15 E2 FA | 	rdword	arg02, local03
26e34     08 22 86 F1 | 	sub	local03, #8
26e38     0A 27 12 F2 | 	cmp	local05, arg02 wc
26e3c     02 FA 05 36 |  if_ae	mov	result1, #2
26e40     E4 00 90 3D |  if_ae	jmp	#LR__3946
26e44     28 22 06 F1 | 	add	local03, #40
26e48     11 27 02 FB | 	rdlong	local05, local03
26e4c     28 22 86 F1 | 	sub	local03, #40
26e50     18 1E 06 F1 | 	add	local01, #24
26e54     0F 27 62 FC | 	wrlong	local05, local01
26e58     18 1E 86 F1 | 	sub	local01, #24
26e5c     7C 00 90 FD | 	jmp	#LR__3945
26e60                 | LR__3940
26e60     0A 22 06 F1 | 	add	local03, #10
26e64     11 29 E2 FA | 	rdword	local06, local03
26e68     0A 22 86 F1 | 	sub	local03, #10
26e6c     09 28 66 F0 | 	shl	local06, #9
26e70                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
26e70                 | ' 		while (ofs >= csz) {
26e70                 | LR__3941
26e70     14 21 12 F2 | 	cmp	local02, local06 wc
26e74     4C 00 90 CD |  if_b	jmp	#LR__3944
26e78     0F 13 02 F6 | 	mov	arg01, local01
26e7c     12 15 02 F6 | 	mov	arg02, local04
26e80     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
26e84     FD 24 02 F6 | 	mov	local04, result1
26e88     FF FF 7F FF 
26e8c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26e90     01 FA 05 A6 |  if_e	mov	result1, #1
26e94     90 00 90 AD |  if_e	jmp	#LR__3946
26e98     02 24 16 F2 | 	cmp	local04, #2 wc
26e9c     14 00 90 CD |  if_b	jmp	#LR__3942
26ea0     18 22 06 F1 | 	add	local03, #24
26ea4     11 27 02 FB | 	rdlong	local05, local03
26ea8     18 22 86 F1 | 	sub	local03, #24
26eac     13 25 12 F2 | 	cmp	local04, local05 wc
26eb0     08 00 90 CD |  if_b	jmp	#LR__3943
26eb4                 | LR__3942
26eb4     02 FA 05 F6 | 	mov	result1, #2
26eb8     6C 00 90 FD | 	jmp	#LR__3946
26ebc                 | LR__3943
26ebc     14 21 82 F1 | 	sub	local02, local06
26ec0     AC FF 9F FD | 	jmp	#LR__3941
26ec4                 | LR__3944
26ec4     11 13 02 F6 | 	mov	arg01, local03
26ec8     12 15 02 F6 | 	mov	arg02, local04
26ecc     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
26ed0     18 1E 06 F1 | 	add	local01, #24
26ed4     0F FB 61 FC | 	wrlong	result1, local01
26ed8     18 1E 86 F1 | 	sub	local01, #24
26edc                 | LR__3945
26edc     14 1E 06 F1 | 	add	local01, #20
26ee0     0F 25 62 FC | 	wrlong	local04, local01
26ee4     04 1E 06 F1 | 	add	local01, #4
26ee8     0F 27 0A FB | 	rdlong	local05, local01 wz
26eec     18 1E 86 F1 | 	sub	local01, #24
26ef0     02 FA 05 A6 |  if_e	mov	result1, #2
26ef4     30 00 90 AD |  if_e	jmp	#LR__3946
26ef8     10 29 02 F6 | 	mov	local06, local02
26efc     09 28 46 F0 | 	shr	local06, #9
26f00     18 1E 06 F1 | 	add	local01, #24
26f04     0F 27 02 FB | 	rdlong	local05, local01
26f08     14 27 02 F1 | 	add	local05, local06
26f0c     0F 27 62 FC | 	wrlong	local05, local01
26f10     34 22 06 F1 | 	add	local03, #52
26f14     FF 21 06 F5 | 	and	local02, #511
26f18     10 23 02 F1 | 	add	local03, local02
26f1c     04 1E 06 F1 | 	add	local01, #4
26f20     0F 23 62 FC | 	wrlong	local03, local01
26f24                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
26f24                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
26f24                 | ' 
26f24                 | ' 	return FR_OK;
26f24     00 FA 05 F6 | 	mov	result1, #0
26f28                 | LR__3946
26f28     A7 F0 03 F6 | 	mov	ptra, fp
26f2c     B2 00 A0 FD | 	call	#popregs_
26f30                 | _fatfs_cc_dir_sdi_ret
26f30     2D 00 64 FD | 	ret
26f34                 | 
26f34                 | _fatfs_cc_dir_next
26f34     05 4A 05 F6 | 	mov	COUNT_, #5
26f38     A8 00 A0 FD | 	call	#pushregs_
26f3c     09 1F 02 F6 | 	mov	local01, arg01
26f40     0A 21 02 F6 | 	mov	local02, arg02
26f44     0F 23 02 FB | 	rdlong	local03, local01
26f48     10 1E 06 F1 | 	add	local01, #16
26f4c     0F 25 02 FB | 	rdlong	local04, local01
26f50     10 1E 86 F1 | 	sub	local01, #16
26f54     20 24 06 F1 | 	add	local04, #32
26f58     00 10 00 FF 
26f5c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
26f60     18 1E 06 31 |  if_ae	add	local01, #24
26f64     0F 01 68 3C |  if_ae	wrlong	#0, local01
26f68     18 1E 86 31 |  if_ae	sub	local01, #24
26f6c     18 1E 06 F1 | 	add	local01, #24
26f70     0F 15 0A FB | 	rdlong	arg02, local01 wz
26f74     18 1E 86 F1 | 	sub	local01, #24
26f78     04 FA 05 A6 |  if_e	mov	result1, #4
26f7c     64 01 90 AD |  if_e	jmp	#LR__3955
26f80     FF 25 CE F7 | 	test	local04, #511 wz
26f84     3C 01 90 5D |  if_ne	jmp	#LR__3954
26f88     18 1E 06 F1 | 	add	local01, #24
26f8c     0F 15 02 FB | 	rdlong	arg02, local01
26f90     01 14 06 F1 | 	add	arg02, #1
26f94     0F 15 62 FC | 	wrlong	arg02, local01
26f98     04 1E 86 F1 | 	sub	local01, #4
26f9c     0F 15 0A FB | 	rdlong	arg02, local01 wz
26fa0     14 1E 86 F1 | 	sub	local01, #20
26fa4     2C 00 90 5D |  if_ne	jmp	#LR__3950
26fa8     12 15 02 F6 | 	mov	arg02, local04
26fac     05 14 46 F0 | 	shr	arg02, #5
26fb0     08 22 06 F1 | 	add	local03, #8
26fb4     11 21 E2 FA | 	rdword	local02, local03
26fb8     08 22 86 F1 | 	sub	local03, #8
26fbc     10 15 12 F2 | 	cmp	arg02, local02 wc
26fc0     18 1E 06 31 |  if_ae	add	local01, #24
26fc4     0F 01 68 3C |  if_ae	wrlong	#0, local01
26fc8                 | ' 				dp->sect = 0; return FR_NO_FILE;
26fc8     04 FA 05 36 |  if_ae	mov	result1, #4
26fcc     14 01 90 3D |  if_ae	jmp	#LR__3955
26fd0     F0 00 90 FD | 	jmp	#LR__3953
26fd4                 | LR__3950
26fd4     12 13 02 F6 | 	mov	arg01, local04
26fd8     09 12 46 F0 | 	shr	arg01, #9
26fdc     0A 22 06 F1 | 	add	local03, #10
26fe0     11 15 E2 FA | 	rdword	arg02, local03
26fe4     0A 22 86 F1 | 	sub	local03, #10
26fe8     01 14 86 F1 | 	sub	arg02, #1
26fec     0A 13 CA F7 | 	test	arg01, arg02 wz
26ff0     D0 00 90 5D |  if_ne	jmp	#LR__3952
26ff4     0F 13 02 F6 | 	mov	arg01, local01
26ff8     14 1E 06 F1 | 	add	local01, #20
26ffc     0F 15 02 FB | 	rdlong	arg02, local01
27000     14 1E 86 F1 | 	sub	local01, #20
27004     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
27008     FD 26 02 F6 | 	mov	local05, result1
2700c     02 26 16 F2 | 	cmp	local05, #2 wc
27010     02 FA 05 C6 |  if_b	mov	result1, #2
27014     CC 00 90 CD |  if_b	jmp	#LR__3955
27018     FF FF 7F FF 
2701c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
27020     01 FA 05 A6 |  if_e	mov	result1, #1
27024     BC 00 90 AD |  if_e	jmp	#LR__3955
27028     18 22 06 F1 | 	add	local03, #24
2702c     11 15 02 FB | 	rdlong	arg02, local03
27030     18 22 86 F1 | 	sub	local03, #24
27034     0A 27 12 F2 | 	cmp	local05, arg02 wc
27038     68 00 90 CD |  if_b	jmp	#LR__3951
2703c     00 20 0E F2 | 	cmp	local02, #0 wz
27040     18 1E 06 A1 |  if_e	add	local01, #24
27044     0F 01 68 AC |  if_e	wrlong	#0, local01
27048                 | ' 						dp->sect = 0; return FR_NO_FILE;
27048     04 FA 05 A6 |  if_e	mov	result1, #4
2704c     94 00 90 AD |  if_e	jmp	#LR__3955
27050     0F 13 02 F6 | 	mov	arg01, local01
27054     14 1E 06 F1 | 	add	local01, #20
27058     0F 15 02 FB | 	rdlong	arg02, local01
2705c     14 1E 86 F1 | 	sub	local01, #20
27060     84 FA BF FD | 	call	#_fatfs_cc_create_chain
27064     FD 26 0A F6 | 	mov	local05, result1 wz
27068     07 FA 05 A6 |  if_e	mov	result1, #7
2706c     74 00 90 AD |  if_e	jmp	#LR__3955
27070     01 26 0E F2 | 	cmp	local05, #1 wz
27074     02 FA 05 A6 |  if_e	mov	result1, #2
27078     68 00 90 AD |  if_e	jmp	#LR__3955
2707c     FF FF 7F FF 
27080     FF 27 0E F2 | 	cmp	local05, ##-1 wz
27084     01 FA 05 A6 |  if_e	mov	result1, #1
27088     58 00 90 AD |  if_e	jmp	#LR__3955
2708c     13 15 02 F6 | 	mov	arg02, local05
27090     11 13 02 F6 | 	mov	arg01, local03
27094     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
27098     00 FA 0D F2 | 	cmp	result1, #0 wz
2709c     01 FA 05 56 |  if_ne	mov	result1, #1
270a0     40 00 90 5D |  if_ne	jmp	#LR__3955
270a4                 | LR__3951
270a4     14 1E 06 F1 | 	add	local01, #20
270a8     0F 27 62 FC | 	wrlong	local05, local01
270ac     11 13 02 F6 | 	mov	arg01, local03
270b0     13 15 02 F6 | 	mov	arg02, local05
270b4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
270b8     04 1E 06 F1 | 	add	local01, #4
270bc     0F FB 61 FC | 	wrlong	result1, local01
270c0     18 1E 86 F1 | 	sub	local01, #24
270c4                 | LR__3952
270c4                 | LR__3953
270c4                 | LR__3954
270c4     10 1E 06 F1 | 	add	local01, #16
270c8     0F 25 62 FC | 	wrlong	local04, local01
270cc     34 22 06 F1 | 	add	local03, #52
270d0     FF 25 06 F5 | 	and	local04, #511
270d4     12 23 02 F1 | 	add	local03, local04
270d8     0C 1E 06 F1 | 	add	local01, #12
270dc     0F 23 62 FC | 	wrlong	local03, local01
270e0                 | ' #line 1771 "ff.c"
270e0                 | ' 				}
270e0                 | ' 				dp->clust = clst;
270e0                 | ' 				dp->sect = clst2sect(fs, clst);
270e0                 | ' 			}
270e0                 | ' 		}
270e0                 | ' 	}
270e0                 | ' 	dp->dptr = ofs;
270e0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
270e0                 | ' 
270e0                 | ' 	return FR_OK;
270e0     00 FA 05 F6 | 	mov	result1, #0
270e4                 | LR__3955
270e4     A7 F0 03 F6 | 	mov	ptra, fp
270e8     B2 00 A0 FD | 	call	#popregs_
270ec                 | _fatfs_cc_dir_next_ret
270ec     2D 00 64 FD | 	ret
270f0                 | 
270f0                 | _fatfs_cc_dir_alloc
270f0     08 4A 05 F6 | 	mov	COUNT_, #8
270f4     A8 00 A0 FD | 	call	#pushregs_
270f8     09 1F 02 F6 | 	mov	local01, arg01
270fc     0A 21 02 F6 | 	mov	local02, arg02
27100     0F 23 02 FB | 	rdlong	local03, local01
27104     0F 13 02 F6 | 	mov	arg01, local01
27108     00 14 06 F6 | 	mov	arg02, #0
2710c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
27110     FD 24 0A F6 | 	mov	local04, result1 wz
27114     70 00 90 5D |  if_ne	jmp	#LR__3964
27118     00 26 06 F6 | 	mov	local05, #0
2711c                 | ' 		n = 0;
2711c                 | ' 		do {
2711c                 | LR__3960
2711c     18 1E 06 F1 | 	add	local01, #24
27120     0F 15 02 FB | 	rdlong	arg02, local01
27124     18 1E 86 F1 | 	sub	local01, #24
27128     11 13 02 F6 | 	mov	arg01, local03
2712c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
27130     FD 24 0A F6 | 	mov	local04, result1 wz
27134     50 00 90 5D |  if_ne	jmp	#LR__3963
27138     1C 1E 06 F1 | 	add	local01, #28
2713c     0F 29 02 FB | 	rdlong	local06, local01
27140     1C 1E 86 F1 | 	sub	local01, #28
27144     14 29 C2 FA | 	rdbyte	local06, local06
27148     E5 28 0E F2 | 	cmp	local06, #229 wz
2714c     1C 1E 06 51 |  if_ne	add	local01, #28
27150     0F 2B 02 5B |  if_ne	rdlong	local07, local01
27154     1C 1E 86 51 |  if_ne	sub	local01, #28
27158     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
2715c     10 00 90 5D |  if_ne	jmp	#LR__3961
27160     01 26 06 F1 | 	add	local05, #1
27164     10 27 0A F2 | 	cmp	local05, local02 wz
27168     1C 00 90 AD |  if_e	jmp	#LR__3963
2716c     04 00 90 FD | 	jmp	#LR__3962
27170                 | LR__3961
27170     00 26 06 F6 | 	mov	local05, #0
27174                 | LR__3962
27174     0F 13 02 F6 | 	mov	arg01, local01
27178     01 14 06 F6 | 	mov	arg02, #1
2717c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
27180     FD 24 0A F6 | 	mov	local04, result1 wz
27184     94 FF 9F AD |  if_e	jmp	#LR__3960
27188                 | LR__3963
27188                 | LR__3964
27188     04 24 0E F2 | 	cmp	local04, #4 wz
2718c     07 24 06 A6 |  if_e	mov	local04, #7
27190                 | ' 	return res;
27190     12 FB 01 F6 | 	mov	result1, local04
27194     A7 F0 03 F6 | 	mov	ptra, fp
27198     B2 00 A0 FD | 	call	#popregs_
2719c                 | _fatfs_cc_dir_alloc_ret
2719c     2D 00 64 FD | 	ret
271a0                 | 
271a0                 | _fatfs_cc_ld_clust
271a0     09 01 02 F6 | 	mov	_var01, arg01
271a4     0A 13 02 F6 | 	mov	arg01, arg02
271a8     1A 12 06 F1 | 	add	arg01, #26
271ac                 | ' {
271ac                 | ' 
271ac                 | ' 	return *((WORD*)ptr);
271ac     09 FB E1 FA | 	rdword	result1, arg01
271b0     FD 12 32 F9 | 	getword	arg01, result1, #0
271b4     00 01 C2 FA | 	rdbyte	_var01, _var01
271b8     03 00 0E F2 | 	cmp	_var01, #3 wz
271bc     14 14 06 A1 |  if_e	add	arg02, #20
271c0                 | ' {
271c0                 | ' 
271c0                 | ' 	return *((WORD*)ptr);
271c0     0A FB E1 AA |  if_e	rdword	result1, arg02
271c4     10 FA 65 A0 |  if_e	shl	result1, #16
271c8     FD 12 42 A5 |  if_e	or	arg01, result1
271cc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
271cc                 | ' 	}
271cc                 | ' 
271cc                 | ' 	return cl;
271cc     09 FB 01 F6 | 	mov	result1, arg01
271d0                 | _fatfs_cc_ld_clust_ret
271d0     2D 00 64 FD | 	ret
271d4                 | 
271d4                 | _fatfs_cc_st_clust
271d4     09 01 02 F6 | 	mov	_var01, arg01
271d8     0A 13 02 F6 | 	mov	arg01, arg02
271dc     1A 12 06 F1 | 	add	arg01, #26
271e0     09 17 52 FC | 	wrword	arg03, arg01
271e4     00 01 C2 FA | 	rdbyte	_var01, _var01
271e8     03 00 0E F2 | 	cmp	_var01, #3 wz
271ec     14 14 06 A1 |  if_e	add	arg02, #20
271f0     10 16 46 A0 |  if_e	shr	arg03, #16
271f4     0A 17 52 AC |  if_e	wrword	arg03, arg02
271f8                 | _fatfs_cc_st_clust_ret
271f8     2D 00 64 FD | 	ret
271fc                 | 
271fc                 | _fatfs_cc_cmp_lfn
271fc     07 4A 05 F6 | 	mov	COUNT_, #7
27200     A8 00 A0 FD | 	call	#pushregs_
27204     09 1F 02 F6 | 	mov	local01, arg01
27208     0A 13 02 F6 | 	mov	arg01, arg02
2720c     1A 12 06 F1 | 	add	arg01, #26
27210                 | ' {
27210                 | ' 
27210                 | ' 	return *((WORD*)ptr);
27210     09 FB E9 FA | 	rdword	result1, arg01 wz
27214     00 FA 05 56 |  if_ne	mov	result1, #0
27218     E0 00 90 5D |  if_ne	jmp	#LR__3976
2721c     0A 21 C2 FA | 	rdbyte	local02, arg02
27220     3F 20 06 F5 | 	and	local02, #63
27224     01 20 86 F1 | 	sub	local02, #1
27228     0D 20 06 FD | 	qmul	local02, #13
2722c                 | ' 
2722c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2722c                 | ' 
2722c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2722c     01 22 06 F6 | 	mov	local03, #1
27230     00 24 06 F6 | 	mov	local04, #0
27234     18 26 62 FD | 	getqx	local05
27238                 | LR__3970
27238     0D 24 16 F2 | 	cmp	local04, #13 wc
2723c     9C 00 90 3D |  if_ae	jmp	#LR__3975
27240     0A 13 02 F6 | 	mov	arg01, arg02
27244     12 21 02 F6 | 	mov	local02, local04
27248     01 00 00 FF 
2724c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27250     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
27254     10 21 C2 FA | 	rdbyte	local02, local02
27258     01 20 06 FA | 	mul	local02, #1
2725c     10 13 02 F1 | 	add	arg01, local02
27260     01 00 00 FF 
27264     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
27268                 | ' {
27268                 | ' 
27268                 | ' 	return *((WORD*)ptr);
27268     09 FB E1 FA | 	rdword	result1, arg01
2726c     FD 28 02 F6 | 	mov	local06, result1
27270     11 21 02 F6 | 	mov	local02, local03
27274     0F 20 4E F7 | 	zerox	local02, #15 wz
27278     44 00 90 AD |  if_e	jmp	#LR__3973
2727c     00 27 16 F2 | 	cmp	local05, #256 wc
27280     2C 00 90 3D |  if_ae	jmp	#LR__3971
27284     14 13 32 F9 | 	getword	arg01, local06, #0
27288     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2728c     FD 20 02 F6 | 	mov	local02, result1
27290     13 23 02 F6 | 	mov	local03, local05
27294     01 22 66 F0 | 	shl	local03, #1
27298     0F 23 02 F1 | 	add	local03, local01
2729c     11 13 E2 FA | 	rdword	arg01, local03
272a0     01 26 06 F1 | 	add	local05, #1
272a4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
272a8     FD 20 0A F2 | 	cmp	local02, result1 wz
272ac     08 00 90 AD |  if_e	jmp	#LR__3972
272b0                 | LR__3971
272b0                 | ' 				return 0;
272b0     00 FA 05 F6 | 	mov	result1, #0
272b4     44 00 90 FD | 	jmp	#LR__3976
272b8                 | LR__3972
272b8     14 23 02 F6 | 	mov	local03, local06
272bc     14 00 90 FD | 	jmp	#LR__3974
272c0                 | LR__3973
272c0     14 29 32 F9 | 	getword	local06, local06, #0
272c4     7F 00 00 FF 
272c8     FF 29 0E F2 | 	cmp	local06, ##65535 wz
272cc     00 FA 05 56 |  if_ne	mov	result1, #0
272d0     28 00 90 5D |  if_ne	jmp	#LR__3976
272d4                 | LR__3974
272d4     01 24 06 F1 | 	add	local04, #1
272d8     5C FF 9F FD | 	jmp	#LR__3970
272dc                 | LR__3975
272dc     0A 21 C2 FA | 	rdbyte	local02, arg02
272e0     40 20 CE F7 | 	test	local02, #64 wz
272e4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
272e8     01 26 66 50 |  if_ne	shl	local05, #1
272ec     0F 27 02 51 |  if_ne	add	local05, local01
272f0     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
272f4     00 FA 05 56 |  if_ne	mov	result1, #0
272f8                 | ' 
272f8                 | ' 	return 1;
272f8     01 FA 05 A6 |  if_e	mov	result1, #1
272fc                 | LR__3976
272fc     A7 F0 03 F6 | 	mov	ptra, fp
27300     B2 00 A0 FD | 	call	#popregs_
27304                 | _fatfs_cc_cmp_lfn_ret
27304     2D 00 64 FD | 	ret
27308                 | 
27308                 | _fatfs_cc_pick_lfn
27308     09 01 02 F6 | 	mov	_var01, arg01
2730c     0A 13 02 F6 | 	mov	arg01, arg02
27310     1A 12 06 F1 | 	add	arg01, #26
27314                 | ' {
27314                 | ' 
27314                 | ' 	return *((WORD*)ptr);
27314     09 FB E9 FA | 	rdword	result1, arg01 wz
27318     00 FA 05 56 |  if_ne	mov	result1, #0
2731c     D4 00 90 5D |  if_ne	jmp	#LR__3985
27320     0A 03 C2 FA | 	rdbyte	_var02, arg02
27324     40 02 26 F5 | 	andn	_var02, #64
27328     01 02 86 F1 | 	sub	_var02, #1
2732c     0D 02 06 FD | 	qmul	_var02, #13
27330                 | ' 
27330                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
27330                 | ' 
27330                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
27330     01 04 06 F6 | 	mov	_var03, #1
27334     00 06 06 F6 | 	mov	_var04, #0
27338     18 08 62 FD | 	getqx	_var05
2733c                 | LR__3980
2733c     0D 06 16 F2 | 	cmp	_var04, #13 wc
27340     80 00 90 3D |  if_ae	jmp	#LR__3983
27344     0A 13 02 F6 | 	mov	arg01, arg02
27348     03 03 02 F6 | 	mov	_var02, _var04
2734c     01 00 00 FF 
27350     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27354     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
27358     01 03 C2 FA | 	rdbyte	_var02, _var02
2735c     01 02 06 FA | 	mul	_var02, #1
27360     01 13 02 F1 | 	add	arg01, _var02
27364     01 00 00 FF 
27368     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2736c                 | ' {
2736c                 | ' 
2736c                 | ' 	return *((WORD*)ptr);
2736c     09 FB E1 FA | 	rdword	result1, arg01
27370     FD 0A 02 F6 | 	mov	_var06, result1
27374     02 03 02 F6 | 	mov	_var02, _var03
27378     0F 02 4E F7 | 	zerox	_var02, #15 wz
2737c     28 00 90 AD |  if_e	jmp	#LR__3981
27380     00 09 16 F2 | 	cmp	_var05, #256 wc
27384     00 FA 05 36 |  if_ae	mov	result1, #0
27388     68 00 90 3D |  if_ae	jmp	#LR__3985
2738c     04 03 02 F6 | 	mov	_var02, _var05
27390     01 02 66 F0 | 	shl	_var02, #1
27394     00 03 02 F1 | 	add	_var02, _var01
27398     05 05 02 F6 | 	mov	_var03, _var06
2739c     01 05 52 FC | 	wrword	_var03, _var02
273a0     01 08 06 F1 | 	add	_var05, #1
273a4     14 00 90 FD | 	jmp	#LR__3982
273a8                 | LR__3981
273a8     05 0B 32 F9 | 	getword	_var06, _var06, #0
273ac     7F 00 00 FF 
273b0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
273b4     00 FA 05 56 |  if_ne	mov	result1, #0
273b8     38 00 90 5D |  if_ne	jmp	#LR__3985
273bc                 | LR__3982
273bc     01 06 06 F1 | 	add	_var04, #1
273c0     78 FF 9F FD | 	jmp	#LR__3980
273c4                 | LR__3983
273c4     0A 03 C2 FA | 	rdbyte	_var02, arg02
273c8     40 02 CE F7 | 	test	_var02, #64 wz
273cc     02 0D 02 56 |  if_ne	mov	_var07, _var03
273d0     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
273d4     18 00 90 AD |  if_e	jmp	#LR__3984
273d8     00 09 16 F2 | 	cmp	_var05, #256 wc
273dc     00 FA 05 36 |  if_ae	mov	result1, #0
273e0     10 00 90 3D |  if_ae	jmp	#LR__3985
273e4     01 08 66 F0 | 	shl	_var05, #1
273e8     00 09 02 F1 | 	add	_var05, _var01
273ec     04 01 58 FC | 	wrword	#0, _var05
273f0                 | LR__3984
273f0                 | ' 		lfnbuf[i] = 0;
273f0                 | ' 	}
273f0                 | ' 
273f0                 | ' 	return 1;
273f0     01 FA 05 F6 | 	mov	result1, #1
273f4                 | LR__3985
273f4                 | _fatfs_cc_pick_lfn_ret
273f4     2D 00 64 FD | 	ret
273f8                 | 
273f8                 | _fatfs_cc_put_lfn
273f8     0D 14 06 F1 | 	add	arg02, #13
273fc     0A 19 42 FC | 	wrbyte	arg04, arg02
27400     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
27404     01 18 86 F1 | 	sub	arg04, #1
27408     0D 18 06 FD | 	qmul	arg04, #13
2740c     09 01 02 F6 | 	mov	_var01, arg01
27410     02 14 86 F1 | 	sub	arg02, #2
27414     0A 1F 48 FC | 	wrbyte	#15, arg02
27418     01 14 06 F1 | 	add	arg02, #1
2741c     0A 01 48 FC | 	wrbyte	#0, arg02
27420     0C 14 86 F1 | 	sub	arg02, #12
27424     0A 13 02 F6 | 	mov	arg01, arg02
27428     1A 12 06 F1 | 	add	arg01, #26
2742c     09 01 58 FC | 	wrword	#0, arg01
27430     00 02 06 F6 | 	mov	_var02, #0
27434     00 04 06 F6 | 	mov	_var03, #0
27438                 | ' 	BYTE* dir,
27438                 | ' 	BYTE ord,
27438                 | ' 	BYTE sum
27438                 | ' )
27438                 | ' {
27438                 | ' 	UINT i, s;
27438                 | ' 	WCHAR wc;
27438                 | ' 
27438                 | ' 
27438                 | ' 	dir[ 13 ] = sum;
27438                 | ' 	dir[ 11 ] =  0x0F ;
27438                 | ' 	dir[ 12 ] = 0;
27438                 | ' 	st_word(dir +  26 , 0);
27438                 | ' 
27438                 | ' 	i = (ord - 1) * 13;
27438                 | ' 	s = wc = 0;
27438                 | ' 	do {
27438     01 00 00 FF 
2743c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27440     18 06 62 FD | 	getqx	_var04
27444     97 2A 48 FB | 	callpa	#(@LR__3991-@LR__3990)>>2,fcache_load_ptr_
27448                 | LR__3990
27448     01 19 32 F9 | 	getword	arg04, _var02, #0
2744c     7F 00 00 FF 
27450     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
27454     03 13 02 56 |  if_ne	mov	arg01, _var04
27458     01 06 06 51 |  if_ne	add	_var04, #1
2745c     01 12 66 50 |  if_ne	shl	arg01, #1
27460     00 13 02 51 |  if_ne	add	arg01, _var01
27464     09 03 E2 5A |  if_ne	rdword	_var02, arg01
27468     0A 13 02 F6 | 	mov	arg01, arg02
2746c     02 19 02 F6 | 	mov	arg04, _var03
27470     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
27474     0C 19 C2 FA | 	rdbyte	arg04, arg04
27478     01 18 06 FA | 	mul	arg04, #1
2747c     0C 13 02 F1 | 	add	arg01, arg04
27480     09 03 52 FC | 	wrword	_var02, arg01
27484     01 19 02 F6 | 	mov	arg04, _var02
27488     0F 18 4E F7 | 	zerox	arg04, #15 wz
2748c     0F 02 CE A9 |  if_e	bmask	_var02, #15
27490     01 04 06 F1 | 	add	_var03, #1
27494     0D 04 16 F2 | 	cmp	_var03, #13 wc
27498     AC FF 9F CD |  if_b	jmp	#LR__3990
2749c                 | LR__3991
2749c     01 00 00 FF 
274a0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
274a4     01 03 32 F9 | 	getword	_var02, _var02, #0
274a8     7F 00 00 FF 
274ac     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
274b0     01 06 66 50 |  if_ne	shl	_var04, #1
274b4     00 07 02 51 |  if_ne	add	_var04, _var01
274b8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
274bc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
274c0     40 16 46 A5 |  if_e	or	arg03, #64
274c4     0A 17 42 FC | 	wrbyte	arg03, arg02
274c8                 | _fatfs_cc_put_lfn_ret
274c8     2D 00 64 FD | 	ret
274cc                 | 
274cc                 | _fatfs_cc_gen_numname
274cc     08 4A 05 F6 | 	mov	COUNT_, #8
274d0     A8 00 A0 FD | 	call	#pushregs_
274d4     2C F0 07 F1 | 	add	ptra, #44
274d8     09 1F 02 F6 | 	mov	local01, arg01
274dc     0A 21 02 F6 | 	mov	local02, arg02
274e0     0B 23 02 F6 | 	mov	local03, arg03
274e4     0C 25 02 F6 | 	mov	local04, arg04
274e8     0F 13 02 F6 | 	mov	arg01, local01
274ec     10 15 02 F6 | 	mov	arg02, local02
274f0     0B 16 06 F6 | 	mov	arg03, #11
274f4     F4 77 BF FD | 	call	#__system____builtin_memmove
274f8     06 24 16 F2 | 	cmp	local04, #6 wc
274fc     48 00 90 CD |  if_b	jmp	#LR__4005
27500     12 27 02 F6 | 	mov	local05, local04
27504     97 1E 48 FB | 	callpa	#(@LR__4003-@LR__4000)>>2,fcache_load_ptr_
27508                 | ' 		sreg = seq;
27508                 | ' 		while (*lfn) {
27508                 | LR__4000
27508     11 29 EA FA | 	rdword	local06, local03 wz
2750c     34 00 90 AD |  if_e	jmp	#LR__4004
27510     11 2B E2 FA | 	rdword	local07, local03
27514                 | ' 			wc = *lfn++;
27514                 | ' 			for (i = 0; i < 16; i++) {
27514     02 22 06 F1 | 	add	local03, #2
27518     10 12 DC FC | 	rep	@LR__4002, #16
2751c                 | LR__4001
2751c     01 26 66 F0 | 	shl	local05, #1
27520     15 29 32 F9 | 	getword	local06, local07, #0
27524     01 28 06 F5 | 	and	local06, #1
27528     14 27 02 F1 | 	add	local05, local06
2752c     15 2B 32 F9 | 	getword	local07, local07, #0
27530     01 2A 46 F0 | 	shr	local07, #1
27534     10 26 2E F4 | 	testbn	local05, #16 wz
27538     88 00 00 5F 
2753c     21 26 66 55 |  if_ne	xor	local05, ##69665
27540                 | LR__4002
27540     C4 FF 9F FD | 	jmp	#LR__4000
27544                 | LR__4003
27544                 | LR__4004
27544     13 25 02 F6 | 	mov	local04, local05
27548                 | LR__4005
27548     07 2A 06 F6 | 	mov	local07, #7
2754c                 | ' 			}
2754c                 | ' 		}
2754c                 | ' 		seq = (UINT)sreg;
2754c                 | ' 	}
2754c                 | ' 
2754c                 | ' 
2754c                 | ' 	i = 7;
2754c                 | ' 	do {
2754c     10 4E 05 F1 | 	add	fp, #16
27550     97 1A 48 FB | 	callpa	#(@LR__4007-@LR__4006)>>2,fcache_load_ptr_
27554                 | LR__4006
27554     12 27 42 F8 | 	getnib	local05, local04, #0
27558     30 26 06 F1 | 	add	local05, #48
2755c     04 24 46 F0 | 	shr	local04, #4
27560     13 29 E2 F8 | 	getbyte	local06, local05, #0
27564     3A 28 16 F2 | 	cmp	local06, #58 wc
27568     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
2756c     07 26 06 31 |  if_ae	add	local05, #7
27570     15 29 02 F6 | 	mov	local06, local07
27574     01 2A 8E F1 | 	sub	local07, #1 wz
27578     A7 28 02 F1 | 	add	local06, fp
2757c     14 27 42 FC | 	wrbyte	local05, local06
27580     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
27584     CC FF 9F 5D |  if_ne	jmp	#LR__4006
27588                 | LR__4007
27588     15 29 02 F6 | 	mov	local06, local07
2758c     A7 28 02 F1 | 	add	local06, fp
27590     14 FD 48 FC | 	wrbyte	#126, local06
27594                 | ' 	ns[i] = '~';
27594                 | ' 
27594                 | ' 
27594                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
27594     00 26 06 F6 | 	mov	local05, #0
27598     10 4E 85 F1 | 	sub	fp, #16
2759c     97 2A 48 FB | 	callpa	#(@LR__4010-@LR__4008)>>2,fcache_load_ptr_
275a0                 | LR__4008
275a0     15 27 12 F2 | 	cmp	local05, local07 wc
275a4     4C 00 90 3D |  if_ae	jmp	#LR__4011
275a8     13 29 02 F6 | 	mov	local06, local05
275ac     0F 29 02 F1 | 	add	local06, local01
275b0     14 29 C2 FA | 	rdbyte	local06, local06
275b4     20 28 0E F2 | 	cmp	local06, #32 wz
275b8     38 00 90 AD |  if_e	jmp	#LR__4011
275bc     13 13 02 F6 | 	mov	arg01, local05
275c0     0F 13 02 F1 | 	add	arg01, local01
275c4     09 13 CA FA | 	rdbyte	arg01, arg01 wz
275c8     00 FA 05 56 |  if_ne	mov	result1, #0
275cc                 | ' 
275cc                 | ' 	return 0;
275cc     00 FA 05 A6 |  if_e	mov	result1, #0
275d0     00 FA 0D F2 | 	cmp	result1, #0 wz
275d4     14 00 90 AD |  if_e	jmp	#LR__4009
275d8     15 29 02 F6 | 	mov	local06, local07
275dc     01 28 86 F1 | 	sub	local06, #1
275e0     14 27 0A F2 | 	cmp	local05, local06 wz
275e4     0C 00 90 AD |  if_e	jmp	#LR__4011
275e8     01 26 06 F1 | 	add	local05, #1
275ec                 | LR__4009
275ec     01 26 06 F1 | 	add	local05, #1
275f0     AC FF 9F FD | 	jmp	#LR__4008
275f4                 | LR__4010
275f4                 | LR__4011
275f4     97 20 48 FB | 	callpa	#(@LR__4015-@LR__4012)>>2,fcache_load_ptr_
275f8                 | ' 			j++;
275f8                 | ' 		}
275f8                 | ' 	}
275f8                 | ' 	do {
275f8                 | LR__4012
275f8     13 29 02 F6 | 	mov	local06, local05
275fc     0F 29 02 F1 | 	add	local06, local01
27600     08 2A 16 F2 | 	cmp	local07, #8 wc
27604     01 26 06 F1 | 	add	local05, #1
27608     1C 00 90 3D |  if_ae	jmp	#LR__4013
2760c     15 25 02 F6 | 	mov	local04, local07
27610     10 4E 05 F1 | 	add	fp, #16
27614     A7 24 02 F1 | 	add	local04, fp
27618     12 2D C2 FA | 	rdbyte	local08, local04
2761c     01 2A 06 F1 | 	add	local07, #1
27620     10 4E 85 F1 | 	sub	fp, #16
27624     04 00 90 FD | 	jmp	#LR__4014
27628                 | LR__4013
27628     20 2C 06 F6 | 	mov	local08, #32
2762c                 | LR__4014
2762c     14 2D 42 FC | 	wrbyte	local08, local06
27630     08 26 16 F2 | 	cmp	local05, #8 wc
27634     C0 FF 9F CD |  if_b	jmp	#LR__4012
27638                 | LR__4015
27638     A7 F0 03 F6 | 	mov	ptra, fp
2763c     B2 00 A0 FD | 	call	#popregs_
27640                 | _fatfs_cc_gen_numname_ret
27640     2D 00 64 FD | 	ret
27644                 | 
27644                 | _fatfs_cc_sum_sfn
27644     00 00 06 F6 | 	mov	_var01, #0
27648                 | ' )
27648                 | ' {
27648                 | ' 	BYTE sum = 0;
27648                 | ' 	UINT n = 11;
27648                 | ' 
27648                 | ' 	do {
27648     97 12 48 FB | 	callpa	#(@LR__4022-@LR__4020)>>2,fcache_load_ptr_
2764c                 | LR__4020
2764c     0B 10 DC FC | 	rep	@LR__4023, #11
27650                 | LR__4021
27650     00 FB E1 F8 | 	getbyte	result1, _var01, #0
27654     01 FA 45 F0 | 	shr	result1, #1
27658     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2765c     07 00 66 F0 | 	shl	_var01, #7
27660     00 FB 01 F1 | 	add	result1, _var01
27664     09 01 C2 FA | 	rdbyte	_var01, arg01
27668     FD 00 02 F1 | 	add	_var01, result1
2766c     01 12 06 F1 | 	add	arg01, #1
27670                 | LR__4022
27670                 | LR__4023
27670                 | ' 	return sum;
27670     00 FB 01 F6 | 	mov	result1, _var01
27674                 | _fatfs_cc_sum_sfn_ret
27674     2D 00 64 FD | 	ret
27678                 | 
27678                 | _fatfs_cc_dir_read
27678     0C 4A 05 F6 | 	mov	COUNT_, #12
2767c     A8 00 A0 FD | 	call	#pushregs_
27680     09 1F 02 F6 | 	mov	local01, arg01
27684     0A 21 02 F6 | 	mov	local02, arg02
27688     04 22 06 F6 | 	mov	local03, #4
2768c     0F 25 02 FB | 	rdlong	local04, local01
27690     FF 26 06 F6 | 	mov	local05, #255
27694     FF 28 06 F6 | 	mov	local06, #255
27698                 | ' )
27698                 | ' {
27698                 | ' 	FRESULT res = FR_NO_FILE;
27698                 | ' 	FATFS *fs = dp->obj.fs;
27698                 | ' 	BYTE attr, b;
27698                 | ' 
27698                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
27698                 | ' 
27698                 | ' 
27698                 | ' 	while (dp->sect) {
27698                 | LR__4030
27698     18 1E 06 F1 | 	add	local01, #24
2769c     0F FB 09 FB | 	rdlong	result1, local01 wz
276a0     18 1E 86 F1 | 	sub	local01, #24
276a4     AC 01 90 AD |  if_e	jmp	#LR__4040
276a8     18 1E 06 F1 | 	add	local01, #24
276ac     0F 15 02 FB | 	rdlong	arg02, local01
276b0     18 1E 86 F1 | 	sub	local01, #24
276b4     12 13 02 F6 | 	mov	arg01, local04
276b8     AC ED BF FD | 	call	#_fatfs_cc_move_window
276bc     FD 22 0A F6 | 	mov	local03, result1 wz
276c0     90 01 90 5D |  if_ne	jmp	#LR__4040
276c4     1C 1E 06 F1 | 	add	local01, #28
276c8     0F FB 01 FB | 	rdlong	result1, local01
276cc     1C 1E 86 F1 | 	sub	local01, #28
276d0     FD 2A C2 FA | 	rdbyte	local07, result1
276d4     15 FB 01 F6 | 	mov	result1, local07
276d8     07 FA 4D F7 | 	zerox	result1, #7 wz
276dc     04 22 06 A6 |  if_e	mov	local03, #4
276e0                 | ' 			res = FR_NO_FILE; break;
276e0     70 01 90 AD |  if_e	jmp	#LR__4040
276e4     1C 1E 06 F1 | 	add	local01, #28
276e8     0F 2D 02 FB | 	rdlong	local08, local01
276ec     0B 2C 06 F1 | 	add	local08, #11
276f0     16 2F C2 FA | 	rdbyte	local09, local08
276f4     3F 2E 06 F5 | 	and	local09, #63
276f8     16 1E 86 F1 | 	sub	local01, #22
276fc     0F 2F 42 FC | 	wrbyte	local09, local01
27700     06 1E 86 F1 | 	sub	local01, #6
27704     15 FB E1 F8 | 	getbyte	result1, local07, #0
27708     E5 FA 0D F2 | 	cmp	result1, #229 wz
2770c     15 2D 02 56 |  if_ne	mov	local08, local07
27710     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
27714     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
27718     1C 00 90 AD |  if_e	jmp	#LR__4031
2771c     00 30 06 F6 | 	mov	local10, #0
27720     17 2D E2 F8 | 	getbyte	local08, local09, #0
27724     20 2C 26 F5 | 	andn	local08, #32
27728     08 2C 0E F2 | 	cmp	local08, #8 wz
2772c     01 30 06 A6 |  if_e	mov	local10, #1
27730     10 31 0A F2 | 	cmp	local10, local02 wz
27734     08 00 90 AD |  if_e	jmp	#LR__4032
27738                 | LR__4031
27738     FF 26 06 F6 | 	mov	local05, #255
2773c     00 01 90 FD | 	jmp	#LR__4039
27740                 | LR__4032
27740     17 2F E2 F8 | 	getbyte	local09, local09, #0
27744     0F 2E 0E F2 | 	cmp	local09, #15 wz
27748     B4 00 90 5D |  if_ne	jmp	#LR__4036
2774c     15 33 E2 F8 | 	getbyte	local11, local07, #0
27750     40 32 CE F7 | 	test	local11, #64 wz
27754     30 00 90 AD |  if_e	jmp	#LR__4033
27758     1C 1E 06 F1 | 	add	local01, #28
2775c     0F 33 02 FB | 	rdlong	local11, local01
27760     0D 32 06 F1 | 	add	local11, #13
27764     19 29 C2 FA | 	rdbyte	local06, local11
27768     15 2B E2 F8 | 	getbyte	local07, local07, #0
2776c     BF 2A 06 F5 | 	and	local07, #191
27770     15 27 02 F6 | 	mov	local05, local07
27774     0C 1E 86 F1 | 	sub	local01, #12
27778     0F 33 02 FB | 	rdlong	local11, local01
2777c     1C 1E 06 F1 | 	add	local01, #28
27780     0F 33 62 FC | 	wrlong	local11, local01
27784     2C 1E 86 F1 | 	sub	local01, #44
27788                 | LR__4033
27788     15 2D E2 F8 | 	getbyte	local08, local07, #0
2778c     13 31 E2 F8 | 	getbyte	local10, local05, #0
27790     18 2D 0A F2 | 	cmp	local08, local10 wz
27794     5C 00 90 5D |  if_ne	jmp	#LR__4034
27798     14 31 E2 F8 | 	getbyte	local10, local06, #0
2779c     1C 1E 06 F1 | 	add	local01, #28
277a0     0F 2F 02 FB | 	rdlong	local09, local01
277a4     1C 1E 86 F1 | 	sub	local01, #28
277a8     0D 2E 06 F1 | 	add	local09, #13
277ac     17 2D C2 FA | 	rdbyte	local08, local09
277b0     16 2F E2 F8 | 	getbyte	local09, local08, #0
277b4     17 31 0A F2 | 	cmp	local10, local09 wz
277b8     38 00 90 5D |  if_ne	jmp	#LR__4034
277bc     0C 24 06 F1 | 	add	local04, #12
277c0     12 13 02 FB | 	rdlong	arg01, local04
277c4     0C 24 86 F1 | 	sub	local04, #12
277c8     1C 1E 06 F1 | 	add	local01, #28
277cc     0F 35 02 FB | 	rdlong	local12, local01
277d0     1C 1E 86 F1 | 	sub	local01, #28
277d4     1A 15 02 F6 | 	mov	arg02, local12
277d8     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
277dc     00 FA 4D F2 | 	cmps	result1, #0 wz
277e0     13 35 02 56 |  if_ne	mov	local12, local05
277e4     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
277e8     01 34 86 51 |  if_ne	sub	local12, #1
277ec     1A 33 02 56 |  if_ne	mov	local11, local12
277f0     04 00 90 5D |  if_ne	jmp	#LR__4035
277f4                 | LR__4034
277f4     FF 32 06 F6 | 	mov	local11, #255
277f8                 | LR__4035
277f8     19 27 02 F6 | 	mov	local05, local11
277fc     40 00 90 FD | 	jmp	#LR__4038
27800                 | LR__4036
27800     13 33 02 F6 | 	mov	local11, local05
27804     07 32 4E F7 | 	zerox	local11, #7 wz
27808     20 00 90 5D |  if_ne	jmp	#LR__4037
2780c     14 29 E2 F8 | 	getbyte	local06, local06, #0
27810     1C 1E 06 F1 | 	add	local01, #28
27814     0F 13 02 FB | 	rdlong	arg01, local01
27818     1C 1E 86 F1 | 	sub	local01, #28
2781c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
27820     FD FA E1 F8 | 	getbyte	result1, result1, #0
27824     FD 28 0A F2 | 	cmp	local06, result1 wz
27828     28 00 90 AD |  if_e	jmp	#LR__4040
2782c                 | LR__4037
2782c     2C 1E 06 F1 | 	add	local01, #44
27830     FF FF FF FF 
27834     0F FF 6B FC | 	wrlong	##-1, local01
27838     2C 1E 86 F1 | 	sub	local01, #44
2783c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2783c                 | ' 					}
2783c                 | ' 					break;
2783c     14 00 90 FD | 	jmp	#LR__4040
27840                 | LR__4038
27840                 | LR__4039
27840     0F 13 02 F6 | 	mov	arg01, local01
27844     00 14 06 F6 | 	mov	arg02, #0
27848     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2784c     FD 22 0A F6 | 	mov	local03, result1 wz
27850     44 FE 9F AD |  if_e	jmp	#LR__4030
27854                 | LR__4040
27854     00 22 0E F2 | 	cmp	local03, #0 wz
27858     18 1E 06 51 |  if_ne	add	local01, #24
2785c     0F 01 68 5C |  if_ne	wrlong	#0, local01
27860                 | ' 	return res;
27860     11 FB 01 F6 | 	mov	result1, local03
27864     A7 F0 03 F6 | 	mov	ptra, fp
27868     B2 00 A0 FD | 	call	#popregs_
2786c                 | _fatfs_cc_dir_read_ret
2786c     2D 00 64 FD | 	ret
27870                 | 
27870                 | _fatfs_cc_dir_find
27870     0B 4A 05 F6 | 	mov	COUNT_, #11
27874     A8 00 A0 FD | 	call	#pushregs_
27878     09 1F 02 F6 | 	mov	local01, arg01
2787c     0F 21 02 FB | 	rdlong	local02, local01
27880     0F 13 02 F6 | 	mov	arg01, local01
27884     00 14 06 F6 | 	mov	arg02, #0
27888     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2788c     00 FA 0D F2 | 	cmp	result1, #0 wz
27890     18 02 90 5D |  if_ne	jmp	#LR__4062
27894     FF 22 06 F6 | 	mov	local03, #255
27898     FF 24 06 F6 | 	mov	local04, #255
2789c     2C 1E 06 F1 | 	add	local01, #44
278a0     FF FF FF FF 
278a4     0F FF 6B FC | 	wrlong	##-1, local01
278a8     2C 1E 86 F1 | 	sub	local01, #44
278ac                 | ' #line 2404 "ff.c"
278ac                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
278ac                 | ' 
278ac                 | ' 	do {
278ac                 | LR__4050
278ac     18 1E 06 F1 | 	add	local01, #24
278b0     0F 15 02 FB | 	rdlong	arg02, local01
278b4     18 1E 86 F1 | 	sub	local01, #24
278b8     10 13 02 F6 | 	mov	arg01, local02
278bc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
278c0     FD 26 0A F6 | 	mov	local05, result1 wz
278c4     E0 01 90 5D |  if_ne	jmp	#LR__4061
278c8     1C 1E 06 F1 | 	add	local01, #28
278cc     0F 17 02 FB | 	rdlong	arg03, local01
278d0     1C 1E 86 F1 | 	sub	local01, #28
278d4     0B 29 C2 FA | 	rdbyte	local06, arg03
278d8     14 17 02 F6 | 	mov	arg03, local06
278dc     07 16 4E F7 | 	zerox	arg03, #7 wz
278e0     04 26 06 A6 |  if_e	mov	local05, #4
278e4     C0 01 90 AD |  if_e	jmp	#LR__4061
278e8     1C 1E 06 F1 | 	add	local01, #28
278ec     0F 2B 02 FB | 	rdlong	local07, local01
278f0     15 17 02 F6 | 	mov	arg03, local07
278f4     0B 16 06 F1 | 	add	arg03, #11
278f8     0B 2D C2 FA | 	rdbyte	local08, arg03
278fc     3F 2C 06 F5 | 	and	local08, #63
27900     16 1E 86 F1 | 	sub	local01, #22
27904     0F 2D 42 FC | 	wrbyte	local08, local01
27908     06 1E 86 F1 | 	sub	local01, #6
2790c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
27910     E5 16 0E F2 | 	cmp	arg03, #229 wz
27914     18 00 90 AD |  if_e	jmp	#LR__4051
27918     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2791c     08 16 CE F7 | 	test	arg03, #8 wz
27920     16 2B 02 56 |  if_ne	mov	local07, local08
27924     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
27928     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2792c     18 00 90 AD |  if_e	jmp	#LR__4052
27930                 | LR__4051
27930     FF 24 06 F6 | 	mov	local04, #255
27934     2C 1E 06 F1 | 	add	local01, #44
27938     FF FF FF FF 
2793c     0F FF 6B FC | 	wrlong	##-1, local01
27940     2C 1E 86 F1 | 	sub	local01, #44
27944     4C 01 90 FD | 	jmp	#LR__4060
27948                 | LR__4052
27948     16 2D E2 F8 | 	getbyte	local08, local08, #0
2794c     0F 2C 0E F2 | 	cmp	local08, #15 wz
27950     C8 00 90 5D |  if_ne	jmp	#LR__4056
27954     2B 1E 06 F1 | 	add	local01, #43
27958     0F 2D C2 FA | 	rdbyte	local08, local01
2795c     2B 1E 86 F1 | 	sub	local01, #43
27960     40 2C CE F7 | 	test	local08, #64 wz
27964     2C 01 90 5D |  if_ne	jmp	#LR__4059
27968     14 2F E2 F8 | 	getbyte	local09, local06, #0
2796c     40 2E CE F7 | 	test	local09, #64 wz
27970     30 00 90 AD |  if_e	jmp	#LR__4053
27974     1C 1E 06 F1 | 	add	local01, #28
27978     0F 2F 02 FB | 	rdlong	local09, local01
2797c     0D 2E 06 F1 | 	add	local09, #13
27980     17 23 C2 FA | 	rdbyte	local03, local09
27984     14 29 E2 F8 | 	getbyte	local06, local06, #0
27988     BF 28 06 F5 | 	and	local06, #191
2798c     14 25 02 F6 | 	mov	local04, local06
27990     0C 1E 86 F1 | 	sub	local01, #12
27994     0F 2F 02 FB | 	rdlong	local09, local01
27998     1C 1E 06 F1 | 	add	local01, #28
2799c     0F 2F 62 FC | 	wrlong	local09, local01
279a0     2C 1E 86 F1 | 	sub	local01, #44
279a4                 | LR__4053
279a4     14 31 E2 F8 | 	getbyte	local10, local06, #0
279a8     12 2B E2 F8 | 	getbyte	local07, local04, #0
279ac     15 31 0A F2 | 	cmp	local10, local07 wz
279b0     5C 00 90 5D |  if_ne	jmp	#LR__4054
279b4     11 2D E2 F8 | 	getbyte	local08, local03, #0
279b8     1C 1E 06 F1 | 	add	local01, #28
279bc     0F 2B 02 FB | 	rdlong	local07, local01
279c0     1C 1E 86 F1 | 	sub	local01, #28
279c4     0D 2A 06 F1 | 	add	local07, #13
279c8     15 29 C2 FA | 	rdbyte	local06, local07
279cc     14 2B E2 F8 | 	getbyte	local07, local06, #0
279d0     15 2D 0A F2 | 	cmp	local08, local07 wz
279d4     38 00 90 5D |  if_ne	jmp	#LR__4054
279d8     0C 20 06 F1 | 	add	local02, #12
279dc     10 13 02 FB | 	rdlong	arg01, local02
279e0     0C 20 86 F1 | 	sub	local02, #12
279e4     1C 1E 06 F1 | 	add	local01, #28
279e8     0F 33 02 FB | 	rdlong	local11, local01
279ec     1C 1E 86 F1 | 	sub	local01, #28
279f0     19 15 02 F6 | 	mov	arg02, local11
279f4     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
279f8     00 FA 4D F2 | 	cmps	result1, #0 wz
279fc     12 33 02 56 |  if_ne	mov	local11, local04
27a00     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
27a04     01 32 86 51 |  if_ne	sub	local11, #1
27a08     19 2F 02 56 |  if_ne	mov	local09, local11
27a0c     04 00 90 5D |  if_ne	jmp	#LR__4055
27a10                 | LR__4054
27a10     FF 2E 06 F6 | 	mov	local09, #255
27a14                 | LR__4055
27a14     17 25 02 F6 | 	mov	local04, local09
27a18     78 00 90 FD | 	jmp	#LR__4059
27a1c                 | LR__4056
27a1c     12 2F 02 F6 | 	mov	local09, local04
27a20     07 2E 4E F7 | 	zerox	local09, #7 wz
27a24     20 00 90 5D |  if_ne	jmp	#LR__4057
27a28     11 31 E2 F8 | 	getbyte	local10, local03, #0
27a2c     1C 1E 06 F1 | 	add	local01, #28
27a30     0F 13 02 FB | 	rdlong	arg01, local01
27a34     1C 1E 86 F1 | 	sub	local01, #28
27a38     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
27a3c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27a40     FD 30 0A F2 | 	cmp	local10, result1 wz
27a44     60 00 90 AD |  if_e	jmp	#LR__4061
27a48                 | LR__4057
27a48     2B 1E 06 F1 | 	add	local01, #43
27a4c     0F 2F C2 FA | 	rdbyte	local09, local01
27a50     2B 1E 86 F1 | 	sub	local01, #43
27a54     01 2E CE F7 | 	test	local09, #1 wz
27a58     24 00 90 5D |  if_ne	jmp	#LR__4058
27a5c     1C 1E 06 F1 | 	add	local01, #28
27a60     0F 13 02 FB | 	rdlong	arg01, local01
27a64     04 1E 06 F1 | 	add	local01, #4
27a68     0F 15 02 F6 | 	mov	arg02, local01
27a6c     20 1E 86 F1 | 	sub	local01, #32
27a70     0B 16 06 F6 | 	mov	arg03, #11
27a74     88 DA BF FD | 	call	#_fatfs_cc_memcmp
27a78     00 FA 0D F2 | 	cmp	result1, #0 wz
27a7c     28 00 90 AD |  if_e	jmp	#LR__4061
27a80                 | LR__4058
27a80     FF 24 06 F6 | 	mov	local04, #255
27a84     2C 1E 06 F1 | 	add	local01, #44
27a88     FF FF FF FF 
27a8c     0F FF 6B FC | 	wrlong	##-1, local01
27a90     2C 1E 86 F1 | 	sub	local01, #44
27a94                 | LR__4059
27a94                 | LR__4060
27a94     0F 13 02 F6 | 	mov	arg01, local01
27a98     00 14 06 F6 | 	mov	arg02, #0
27a9c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
27aa0     FD 26 0A F6 | 	mov	local05, result1 wz
27aa4     04 FE 9F AD |  if_e	jmp	#LR__4050
27aa8                 | LR__4061
27aa8                 | ' 
27aa8                 | ' 	return res;
27aa8     13 FB 01 F6 | 	mov	result1, local05
27aac                 | LR__4062
27aac     A7 F0 03 F6 | 	mov	ptra, fp
27ab0     B2 00 A0 FD | 	call	#popregs_
27ab4                 | _fatfs_cc_dir_find_ret
27ab4     2D 00 64 FD | 	ret
27ab8                 | 
27ab8                 | _fatfs_cc_dir_register
27ab8     0A 4A 05 F6 | 	mov	COUNT_, #10
27abc     A8 00 A0 FD | 	call	#pushregs_
27ac0     2C F0 07 F1 | 	add	ptra, #44
27ac4     04 4E 05 F1 | 	add	fp, #4
27ac8     A7 12 62 FC | 	wrlong	arg01, fp
27acc     09 1F 02 FB | 	rdlong	local01, arg01
27ad0     08 4E 05 F1 | 	add	fp, #8
27ad4     A7 1E 62 FC | 	wrlong	local01, fp
27ad8     08 4E 85 F1 | 	sub	fp, #8
27adc     A7 20 02 FB | 	rdlong	local02, fp
27ae0     04 4E 85 F1 | 	sub	fp, #4
27ae4     2B 20 06 F1 | 	add	local02, #43
27ae8     10 21 C2 FA | 	rdbyte	local02, local02
27aec     A0 20 CE F7 | 	test	local02, #160 wz
27af0     06 FA 05 56 |  if_ne	mov	result1, #6
27af4     F8 03 90 5D |  if_ne	jmp	#LR__4085
27af8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
27af8     14 4E 05 F1 | 	add	fp, #20
27afc     A7 00 68 FC | 	wrlong	#0, fp
27b00     14 4E 85 F1 | 	sub	fp, #20
27b04     97 28 48 FB | 	callpa	#(@LR__4071-@LR__4070)>>2,fcache_load_ptr_
27b08                 | LR__4070
27b08     0C 4E 05 F1 | 	add	fp, #12
27b0c     A7 20 02 FB | 	rdlong	local02, fp
27b10     0C 20 06 F1 | 	add	local02, #12
27b14     10 23 02 FB | 	rdlong	local03, local02
27b18     08 4E 05 F1 | 	add	fp, #8
27b1c     A7 24 02 FB | 	rdlong	local04, fp
27b20     14 4E 85 F1 | 	sub	fp, #20
27b24     01 24 66 F0 | 	shl	local04, #1
27b28     11 25 02 F1 | 	add	local04, local03
27b2c     12 21 EA FA | 	rdword	local02, local04 wz
27b30     24 00 90 AD |  if_e	jmp	#LR__4072
27b34     14 4E 05 F1 | 	add	fp, #20
27b38     A7 26 02 FB | 	rdlong	local05, fp
27b3c     13 29 02 F6 | 	mov	local06, local05
27b40     13 2B 02 F6 | 	mov	local07, local05
27b44     15 2D 02 F6 | 	mov	local08, local07
27b48     01 2C 06 F1 | 	add	local08, #1
27b4c     A7 2C 62 FC | 	wrlong	local08, fp
27b50     14 4E 85 F1 | 	sub	fp, #20
27b54     B0 FF 9F FD | 	jmp	#LR__4070
27b58                 | LR__4071
27b58                 | LR__4072
27b58     1C 4E 05 F1 | 	add	fp, #28
27b5c     A7 12 02 F6 | 	mov	arg01, fp
27b60     18 4E 85 F1 | 	sub	fp, #24
27b64     A7 14 02 FB | 	rdlong	arg02, fp
27b68     04 4E 85 F1 | 	sub	fp, #4
27b6c     20 14 06 F1 | 	add	arg02, #32
27b70     0C 16 06 F6 | 	mov	arg03, #12
27b74     74 71 BF FD | 	call	#__system____builtin_memmove
27b78     27 4E 05 F1 | 	add	fp, #39
27b7c     A7 2E C2 FA | 	rdbyte	local09, fp
27b80     27 4E 85 F1 | 	sub	fp, #39
27b84     01 2E CE F7 | 	test	local09, #1 wz
27b88     F4 00 90 AD |  if_e	jmp	#LR__4075
27b8c     04 4E 05 F1 | 	add	fp, #4
27b90     A7 30 02 FB | 	rdlong	local10, fp
27b94     2B 30 06 F1 | 	add	local10, #43
27b98     18 81 48 FC | 	wrbyte	#64, local10
27b9c                 | ' 		dp->fn[ 11 ] =  0x40 ;
27b9c                 | ' 		for (n = 1; n < 100; n++) {
27b9c     0C 4E 05 F1 | 	add	fp, #12
27ba0     A7 02 68 FC | 	wrlong	#1, fp
27ba4     10 4E 85 F1 | 	sub	fp, #16
27ba8                 | LR__4073
27ba8     10 4E 05 F1 | 	add	fp, #16
27bac     A7 20 02 FB | 	rdlong	local02, fp
27bb0     10 4E 85 F1 | 	sub	fp, #16
27bb4     64 20 16 F2 | 	cmp	local02, #100 wc
27bb8     70 00 90 3D |  if_ae	jmp	#LR__4074
27bbc     04 4E 05 F1 | 	add	fp, #4
27bc0     A7 12 02 FB | 	rdlong	arg01, fp
27bc4     20 12 06 F1 | 	add	arg01, #32
27bc8     18 4E 05 F1 | 	add	fp, #24
27bcc     A7 14 02 F6 | 	mov	arg02, fp
27bd0     10 4E 85 F1 | 	sub	fp, #16
27bd4     A7 30 02 FB | 	rdlong	local10, fp
27bd8     0C 30 06 F1 | 	add	local10, #12
27bdc     18 17 02 FB | 	rdlong	arg03, local10
27be0     04 4E 05 F1 | 	add	fp, #4
27be4     A7 18 02 FB | 	rdlong	arg04, fp
27be8     10 4E 85 F1 | 	sub	fp, #16
27bec     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
27bf0     04 4E 05 F1 | 	add	fp, #4
27bf4     A7 12 02 FB | 	rdlong	arg01, fp
27bf8     04 4E 85 F1 | 	sub	fp, #4
27bfc     70 FC BF FD | 	call	#_fatfs_cc_dir_find
27c00     08 4E 05 F1 | 	add	fp, #8
27c04     A7 FA 61 FC | 	wrlong	result1, fp
27c08     00 FA 4D F2 | 	cmps	result1, #0 wz
27c0c     08 4E 85 F1 | 	sub	fp, #8
27c10     18 00 90 5D |  if_ne	jmp	#LR__4074
27c14     10 4E 05 F1 | 	add	fp, #16
27c18     A7 30 02 FB | 	rdlong	local10, fp
27c1c     01 30 06 F1 | 	add	local10, #1
27c20     A7 30 62 FC | 	wrlong	local10, fp
27c24     10 4E 85 F1 | 	sub	fp, #16
27c28     7C FF 9F FD | 	jmp	#LR__4073
27c2c                 | LR__4074
27c2c     10 4E 05 F1 | 	add	fp, #16
27c30     A7 30 02 FB | 	rdlong	local10, fp
27c34     10 4E 85 F1 | 	sub	fp, #16
27c38     64 30 0E F2 | 	cmp	local10, #100 wz
27c3c     07 FA 05 A6 |  if_e	mov	result1, #7
27c40     AC 02 90 AD |  if_e	jmp	#LR__4085
27c44     08 4E 05 F1 | 	add	fp, #8
27c48     A7 30 02 FB | 	rdlong	local10, fp
27c4c     08 4E 85 F1 | 	sub	fp, #8
27c50     04 30 0E F2 | 	cmp	local10, #4 wz
27c54     08 4E 05 51 |  if_ne	add	fp, #8
27c58     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27c5c     08 4E 85 51 |  if_ne	sub	fp, #8
27c60     8C 02 90 5D |  if_ne	jmp	#LR__4085
27c64     04 4E 05 F1 | 	add	fp, #4
27c68     A7 30 02 FB | 	rdlong	local10, fp
27c6c     23 4E 05 F1 | 	add	fp, #35
27c70     A7 1E C2 FA | 	rdbyte	local01, fp
27c74     27 4E 85 F1 | 	sub	fp, #39
27c78     2B 30 06 F1 | 	add	local10, #43
27c7c     18 1F 42 FC | 	wrbyte	local01, local10
27c80                 | LR__4075
27c80     27 4E 05 F1 | 	add	fp, #39
27c84     A7 20 C2 FA | 	rdbyte	local02, fp
27c88     27 4E 85 F1 | 	sub	fp, #39
27c8c     02 20 CE F7 | 	test	local02, #2 wz
27c90     20 00 90 AD |  if_e	jmp	#LR__4076
27c94     14 4E 05 F1 | 	add	fp, #20
27c98     A7 30 02 FB | 	rdlong	local10, fp
27c9c     0C 30 06 F1 | 	add	local10, #12
27ca0     0D 30 16 FD | 	qdiv	local10, #13
27ca4     14 4E 85 F1 | 	sub	fp, #20
27ca8     18 30 62 FD | 	getqx	local10
27cac     01 30 06 F1 | 	add	local10, #1
27cb0     04 00 90 FD | 	jmp	#LR__4077
27cb4                 | LR__4076
27cb4     01 30 06 F6 | 	mov	local10, #1
27cb8                 | LR__4077
27cb8     18 4E 05 F1 | 	add	fp, #24
27cbc     A7 30 62 FC | 	wrlong	local10, fp
27cc0     14 4E 85 F1 | 	sub	fp, #20
27cc4     A7 12 02 FB | 	rdlong	arg01, fp
27cc8     18 15 02 F6 | 	mov	arg02, local10
27ccc     04 4E 85 F1 | 	sub	fp, #4
27cd0     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
27cd4     08 4E 05 F1 | 	add	fp, #8
27cd8     A7 FA 61 FC | 	wrlong	result1, fp
27cdc     08 4E 85 F1 | 	sub	fp, #8
27ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ce4     38 01 90 5D |  if_ne	jmp	#LR__4082
27ce8     18 4E 05 F1 | 	add	fp, #24
27cec     A7 30 02 FB | 	rdlong	local10, fp
27cf0     01 30 8E F1 | 	sub	local10, #1 wz
27cf4     A7 30 62 FC | 	wrlong	local10, fp
27cf8     18 4E 85 F1 | 	sub	fp, #24
27cfc     20 01 90 AD |  if_e	jmp	#LR__4082
27d00     04 4E 05 F1 | 	add	fp, #4
27d04     A7 30 02 FB | 	rdlong	local10, fp
27d08     18 13 02 F6 | 	mov	arg01, local10
27d0c     14 4E 05 F1 | 	add	fp, #20
27d10     A7 18 02 FB | 	rdlong	arg04, fp
27d14     18 4E 85 F1 | 	sub	fp, #24
27d18     05 18 66 F0 | 	shl	arg04, #5
27d1c     10 30 06 F1 | 	add	local10, #16
27d20     18 15 02 FB | 	rdlong	arg02, local10
27d24     0C 15 82 F1 | 	sub	arg02, arg04
27d28     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
27d2c     08 4E 05 F1 | 	add	fp, #8
27d30     A7 FA 61 FC | 	wrlong	result1, fp
27d34     08 4E 85 F1 | 	sub	fp, #8
27d38     00 FA 0D F2 | 	cmp	result1, #0 wz
27d3c     E0 00 90 5D |  if_ne	jmp	#LR__4081
27d40     04 4E 05 F1 | 	add	fp, #4
27d44     A7 12 02 FB | 	rdlong	arg01, fp
27d48     04 4E 85 F1 | 	sub	fp, #4
27d4c     20 12 06 F1 | 	add	arg01, #32
27d50     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
27d54     FD 30 02 F6 | 	mov	local10, result1
27d58     28 4E 05 F1 | 	add	fp, #40
27d5c     A7 30 42 FC | 	wrbyte	local10, fp
27d60     28 4E 85 F1 | 	sub	fp, #40
27d64                 | ' 			sum = sum_sfn(dp->fn);
27d64                 | ' 			do {
27d64                 | LR__4078
27d64     0C 4E 05 F1 | 	add	fp, #12
27d68     A7 12 02 FB | 	rdlong	arg01, fp
27d6c     08 4E 85 F1 | 	sub	fp, #8
27d70     A7 1E 02 FB | 	rdlong	local01, fp
27d74     04 4E 85 F1 | 	sub	fp, #4
27d78     18 1E 06 F1 | 	add	local01, #24
27d7c     0F 15 02 FB | 	rdlong	arg02, local01
27d80     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
27d84     08 4E 05 F1 | 	add	fp, #8
27d88     A7 FA 61 FC | 	wrlong	result1, fp
27d8c     00 FA 4D F2 | 	cmps	result1, #0 wz
27d90     08 4E 85 F1 | 	sub	fp, #8
27d94     88 00 90 5D |  if_ne	jmp	#LR__4080
27d98     0C 4E 05 F1 | 	add	fp, #12
27d9c     A7 20 02 FB | 	rdlong	local02, fp
27da0     0C 20 06 F1 | 	add	local02, #12
27da4     10 13 02 FB | 	rdlong	arg01, local02
27da8     08 4E 85 F1 | 	sub	fp, #8
27dac     A7 1E 02 FB | 	rdlong	local01, fp
27db0     1C 1E 06 F1 | 	add	local01, #28
27db4     0F 15 02 FB | 	rdlong	arg02, local01
27db8     14 4E 05 F1 | 	add	fp, #20
27dbc     A7 16 02 FB | 	rdlong	arg03, fp
27dc0     10 4E 05 F1 | 	add	fp, #16
27dc4     A7 18 C2 FA | 	rdbyte	arg04, fp
27dc8     28 4E 85 F1 | 	sub	fp, #40
27dcc     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
27dd0     0C 4E 05 F1 | 	add	fp, #12
27dd4     A7 30 02 FB | 	rdlong	local10, fp
27dd8     03 30 06 F1 | 	add	local10, #3
27ddc     18 03 48 FC | 	wrbyte	#1, local10
27de0     08 4E 85 F1 | 	sub	fp, #8
27de4     A7 12 02 FB | 	rdlong	arg01, fp
27de8     04 4E 85 F1 | 	sub	fp, #4
27dec     00 14 06 F6 | 	mov	arg02, #0
27df0     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
27df4     08 4E 05 F1 | 	add	fp, #8
27df8     A7 FA 61 FC | 	wrlong	result1, fp
27dfc     00 FA 4D F2 | 	cmps	result1, #0 wz
27e00     08 4E 85 F1 | 	sub	fp, #8
27e04     18 00 90 5D |  if_ne	jmp	#LR__4079
27e08     18 4E 05 F1 | 	add	fp, #24
27e0c     A7 30 02 FB | 	rdlong	local10, fp
27e10     01 30 8E F1 | 	sub	local10, #1 wz
27e14     A7 30 62 FC | 	wrlong	local10, fp
27e18     18 4E 85 F1 | 	sub	fp, #24
27e1c     44 FF 9F 5D |  if_ne	jmp	#LR__4078
27e20                 | LR__4079
27e20                 | LR__4080
27e20                 | LR__4081
27e20                 | LR__4082
27e20     08 4E 05 F1 | 	add	fp, #8
27e24     A7 30 0A FB | 	rdlong	local10, fp wz
27e28     08 4E 85 F1 | 	sub	fp, #8
27e2c     B4 00 90 5D |  if_ne	jmp	#LR__4084
27e30     0C 4E 05 F1 | 	add	fp, #12
27e34     A7 12 02 FB | 	rdlong	arg01, fp
27e38     08 4E 85 F1 | 	sub	fp, #8
27e3c     A7 1E 02 FB | 	rdlong	local01, fp
27e40     04 4E 85 F1 | 	sub	fp, #4
27e44     18 1E 06 F1 | 	add	local01, #24
27e48     0F 15 02 FB | 	rdlong	arg02, local01
27e4c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
27e50     08 4E 05 F1 | 	add	fp, #8
27e54     A7 FA 61 FC | 	wrlong	result1, fp
27e58     08 4E 85 F1 | 	sub	fp, #8
27e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
27e60     80 00 90 5D |  if_ne	jmp	#LR__4083
27e64     04 4E 05 F1 | 	add	fp, #4
27e68     A7 20 02 FB | 	rdlong	local02, fp
27e6c     04 4E 85 F1 | 	sub	fp, #4
27e70     1C 20 06 F1 | 	add	local02, #28
27e74     10 13 02 FB | 	rdlong	arg01, local02
27e78     00 14 06 F6 | 	mov	arg02, #0
27e7c     20 16 06 F6 | 	mov	arg03, #32
27e80     98 00 A0 FD | 	call	#\builtin_bytefill_
27e84     04 4E 05 F1 | 	add	fp, #4
27e88     A7 14 02 FB | 	rdlong	arg02, fp
27e8c     0A 1F 02 F6 | 	mov	local01, arg02
27e90     1C 1E 06 F1 | 	add	local01, #28
27e94     0F 13 02 FB | 	rdlong	arg01, local01
27e98     04 4E 85 F1 | 	sub	fp, #4
27e9c     20 14 06 F1 | 	add	arg02, #32
27ea0     0B 16 06 F6 | 	mov	arg03, #11
27ea4     44 6E BF FD | 	call	#__system____builtin_memmove
27ea8     04 4E 05 F1 | 	add	fp, #4
27eac     A7 2E 02 FB | 	rdlong	local09, fp
27eb0     17 31 02 F6 | 	mov	local10, local09
27eb4     1C 30 06 F1 | 	add	local10, #28
27eb8     18 1F 02 FB | 	rdlong	local01, local10
27ebc     2B 2E 06 F1 | 	add	local09, #43
27ec0     17 31 C2 FA | 	rdbyte	local10, local09
27ec4     18 30 06 F5 | 	and	local10, #24
27ec8     0C 1E 06 F1 | 	add	local01, #12
27ecc     0F 31 42 FC | 	wrbyte	local10, local01
27ed0     08 4E 05 F1 | 	add	fp, #8
27ed4     A7 30 02 FB | 	rdlong	local10, fp
27ed8     0C 4E 85 F1 | 	sub	fp, #12
27edc     03 30 06 F1 | 	add	local10, #3
27ee0     18 03 48 FC | 	wrbyte	#1, local10
27ee4                 | LR__4083
27ee4                 | LR__4084
27ee4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
27ee4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
27ee4                 | ' 
27ee4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
27ee4                 | ' 
27ee4                 | ' 			fs->wflag = 1;
27ee4                 | ' 		}
27ee4                 | ' 	}
27ee4                 | ' 
27ee4                 | ' 	return res;
27ee4     08 4E 05 F1 | 	add	fp, #8
27ee8     A7 FA 01 FB | 	rdlong	result1, fp
27eec     08 4E 85 F1 | 	sub	fp, #8
27ef0                 | LR__4085
27ef0     A7 F0 03 F6 | 	mov	ptra, fp
27ef4     B2 00 A0 FD | 	call	#popregs_
27ef8                 | _fatfs_cc_dir_register_ret
27ef8     2D 00 64 FD | 	ret
27efc                 | 
27efc                 | _fatfs_cc_dir_remove
27efc     05 4A 05 F6 | 	mov	COUNT_, #5
27f00     A8 00 A0 FD | 	call	#pushregs_
27f04     09 1F 02 F6 | 	mov	local01, arg01
27f08     0F 21 02 FB | 	rdlong	local02, local01
27f0c     10 1E 06 F1 | 	add	local01, #16
27f10     0F 23 02 FB | 	rdlong	local03, local01
27f14     1C 1E 06 F1 | 	add	local01, #28
27f18     0F 15 02 FB | 	rdlong	arg02, local01
27f1c     2C 1E 86 F1 | 	sub	local01, #44
27f20     FF FF 7F FF 
27f24     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
27f28     00 24 06 A6 |  if_e	mov	local04, #0
27f2c     18 00 90 AD |  if_e	jmp	#LR__4090
27f30     0F 13 02 F6 | 	mov	arg01, local01
27f34     2C 1E 06 F1 | 	add	local01, #44
27f38     0F 15 02 FB | 	rdlong	arg02, local01
27f3c     2C 1E 86 F1 | 	sub	local01, #44
27f40     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
27f44     FD 24 02 F6 | 	mov	local04, result1
27f48                 | LR__4090
27f48     12 27 0A F6 | 	mov	local05, local04 wz
27f4c     64 00 90 5D |  if_ne	jmp	#LR__4093
27f50                 | ' 		do {
27f50                 | LR__4091
27f50     18 1E 06 F1 | 	add	local01, #24
27f54     0F 15 02 FB | 	rdlong	arg02, local01
27f58     18 1E 86 F1 | 	sub	local01, #24
27f5c     10 13 02 F6 | 	mov	arg01, local02
27f60     04 E5 BF FD | 	call	#_fatfs_cc_move_window
27f64     FD 26 0A F6 | 	mov	local05, result1 wz
27f68     40 00 90 5D |  if_ne	jmp	#LR__4092
27f6c     1C 1E 06 F1 | 	add	local01, #28
27f70     0F 25 02 FB | 	rdlong	local04, local01
27f74     12 CB 49 FC | 	wrbyte	#229, local04
27f78     03 20 06 F1 | 	add	local02, #3
27f7c     10 03 48 FC | 	wrbyte	#1, local02
27f80     03 20 86 F1 | 	sub	local02, #3
27f84     0C 1E 86 F1 | 	sub	local01, #12
27f88     0F 25 02 FB | 	rdlong	local04, local01
27f8c     10 1E 86 F1 | 	sub	local01, #16
27f90     11 25 12 F2 | 	cmp	local04, local03 wc
27f94     14 00 90 3D |  if_ae	jmp	#LR__4092
27f98     0F 13 02 F6 | 	mov	arg01, local01
27f9c     00 14 06 F6 | 	mov	arg02, #0
27fa0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
27fa4     FD 26 0A F6 | 	mov	local05, result1 wz
27fa8     A4 FF 9F AD |  if_e	jmp	#LR__4091
27fac                 | LR__4092
27fac     04 26 0E F2 | 	cmp	local05, #4 wz
27fb0     02 26 06 A6 |  if_e	mov	local05, #2
27fb4                 | LR__4093
27fb4                 | ' 	}
27fb4                 | ' #line 2590 "ff.c"
27fb4                 | ' 	return res;
27fb4     13 FB 01 F6 | 	mov	result1, local05
27fb8     A7 F0 03 F6 | 	mov	ptra, fp
27fbc     B2 00 A0 FD | 	call	#popregs_
27fc0                 | _fatfs_cc_dir_remove_ret
27fc0     2D 00 64 FD | 	ret
27fc4                 | 
27fc4                 | _fatfs_cc_get_fileinfo
27fc4     0F 4A 05 F6 | 	mov	COUNT_, #15
27fc8     A8 00 A0 FD | 	call	#pushregs_
27fcc     09 1F 02 F6 | 	mov	local01, arg01
27fd0     0A 21 02 F6 | 	mov	local02, arg02
27fd4     0F 23 02 FB | 	rdlong	local03, local01
27fd8     1C 20 06 F1 | 	add	local02, #28
27fdc     10 01 48 FC | 	wrbyte	#0, local02
27fe0     1C 20 86 F1 | 	sub	local02, #28
27fe4     18 1E 06 F1 | 	add	local01, #24
27fe8     0F 25 0A FB | 	rdlong	local04, local01 wz
27fec     18 1E 86 F1 | 	sub	local01, #24
27ff0     90 03 90 AD |  if_e	jmp	#LR__4114
27ff4     2C 1E 06 F1 | 	add	local01, #44
27ff8     0F 25 02 FB | 	rdlong	local04, local01
27ffc     2C 1E 86 F1 | 	sub	local01, #44
28000     FF FF 7F FF 
28004     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28008     D8 00 90 AD |  if_e	jmp	#LR__4103
2800c     00 26 06 F6 | 	mov	local05, #0
28010     00 28 06 F6 | 	mov	local06, #0
28014     00 2A 06 F6 | 	mov	local07, #0
28018                 | ' 			si = di = 0;
28018                 | ' 			hs = 0;
28018                 | ' 			while (fs->lfnbuf[si] != 0) {
28018                 | LR__4100
28018     0C 22 06 F1 | 	add	local03, #12
2801c     11 25 02 FB | 	rdlong	local04, local03
28020     0C 22 86 F1 | 	sub	local03, #12
28024     14 2D 02 F6 | 	mov	local08, local06
28028     01 2C 66 F0 | 	shl	local08, #1
2802c     12 2D 02 F1 | 	add	local08, local04
28030     16 25 EA FA | 	rdword	local04, local08 wz
28034     90 00 90 AD |  if_e	jmp	#LR__4102
28038     0C 22 06 F1 | 	add	local03, #12
2803c     11 2F 02 FB | 	rdlong	local09, local03
28040     0C 22 86 F1 | 	sub	local03, #12
28044     14 31 02 F6 | 	mov	local10, local06
28048     01 30 66 F0 | 	shl	local10, #1
2804c     17 31 02 F1 | 	add	local10, local09
28050     18 33 E2 FA | 	rdword	local11, local10
28054     15 25 02 F6 | 	mov	local04, local07
28058     0F 24 4E F7 | 	zerox	local04, #15 wz
2805c     01 28 06 F1 | 	add	local06, #1
28060     24 00 90 5D |  if_ne	jmp	#LR__4101
28064     19 35 32 F9 | 	getword	local12, local11, #0
28068     6C 00 00 FF 
2806c     00 34 16 F2 | 	cmp	local12, ##55296 wc
28070     14 00 90 CD |  if_b	jmp	#LR__4101
28074     19 37 32 F9 | 	getword	local13, local11, #0
28078     70 00 00 FF 
2807c     00 36 16 F2 | 	cmp	local13, ##57344 wc
28080     19 2B 02 C6 |  if_b	mov	local07, local11
28084                 | ' 					hs = wc; continue;
28084     90 FF 9F CD |  if_b	jmp	#LR__4100
28088                 | LR__4101
28088     15 13 32 F9 | 	getword	arg01, local07, #0
2808c     10 12 66 F0 | 	shl	arg01, #16
28090     19 33 32 F9 | 	getword	local11, local11, #0
28094     19 13 42 F5 | 	or	arg01, local11
28098     13 15 02 F6 | 	mov	arg02, local05
2809c     1C 20 06 F1 | 	add	local02, #28
280a0     10 15 02 F1 | 	add	arg02, local02
280a4     FF 16 06 F6 | 	mov	arg03, #255
280a8     13 17 82 F1 | 	sub	arg03, local05
280ac     1C 20 86 F1 | 	sub	local02, #28
280b0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
280b4     FD 38 0A F6 | 	mov	local14, result1 wz
280b8     00 26 06 A6 |  if_e	mov	local05, #0
280bc     1C 27 02 51 |  if_ne	add	local05, local14
280c0     00 2A 06 56 |  if_ne	mov	local07, #0
280c4     50 FF 9F 5D |  if_ne	jmp	#LR__4100
280c8                 | LR__4102
280c8     15 25 02 F6 | 	mov	local04, local07
280cc     0F 24 4E F7 | 	zerox	local04, #15 wz
280d0     00 26 06 56 |  if_ne	mov	local05, #0
280d4     1C 20 06 F1 | 	add	local02, #28
280d8     10 27 02 F1 | 	add	local05, local02
280dc     13 01 48 FC | 	wrbyte	#0, local05
280e0     1C 20 86 F1 | 	sub	local02, #28
280e4                 | LR__4103
280e4     00 26 06 F6 | 	mov	local05, #0
280e8     00 28 06 F6 | 	mov	local06, #0
280ec                 | ' 			fno->fname[di] = 0;
280ec                 | ' 		}
280ec                 | ' 	}
280ec                 | ' 
280ec                 | ' 	si = di = 0;
280ec                 | ' 	while (si < 11) {
280ec                 | LR__4104
280ec     0B 28 16 F2 | 	cmp	local06, #11 wc
280f0     20 01 90 3D |  if_ae	jmp	#LR__4107
280f4     1C 1E 06 F1 | 	add	local01, #28
280f8     0F 2F 02 FB | 	rdlong	local09, local01
280fc     1C 1E 86 F1 | 	sub	local01, #28
28100     14 31 02 F6 | 	mov	local10, local06
28104     17 31 02 F1 | 	add	local10, local09
28108     18 33 C2 FA | 	rdbyte	local11, local10
2810c     19 25 32 F9 | 	getword	local04, local11, #0
28110     20 24 0E F2 | 	cmp	local04, #32 wz
28114     01 28 06 F1 | 	add	local06, #1
28118     D0 FF 9F AD |  if_e	jmp	#LR__4104
2811c     19 25 32 F9 | 	getword	local04, local11, #0
28120     05 24 0E F2 | 	cmp	local04, #5 wz
28124     E5 32 06 A6 |  if_e	mov	local11, #229
28128     09 28 0E F2 | 	cmp	local06, #9 wz
2812c     20 00 90 5D |  if_ne	jmp	#LR__4105
28130     0C 26 16 F2 | 	cmp	local05, #12 wc
28134     18 00 90 3D |  if_ae	jmp	#LR__4105
28138     13 37 02 F6 | 	mov	local13, local05
2813c     0C 20 06 F1 | 	add	local02, #12
28140     10 37 02 F1 | 	add	local13, local02
28144     1B 5D 48 FC | 	wrbyte	#46, local13
28148     01 26 06 F1 | 	add	local05, #1
2814c     0C 20 86 F1 | 	sub	local02, #12
28150                 | LR__4105
28150     19 13 32 F9 | 	getword	arg01, local11, #0
28154     07 12 4E F7 | 	zerox	arg01, #7 wz
28158     00 FA 05 56 |  if_ne	mov	result1, #0
2815c                 | ' 
2815c                 | ' 	return 0;
2815c     00 FA 05 A6 |  if_e	mov	result1, #0
28160     00 FA 0D F2 | 	cmp	result1, #0 wz
28164     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
28168     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2816c     50 00 90 AD |  if_e	jmp	#LR__4106
28170     1C 1E 06 F1 | 	add	local01, #28
28174     0F 31 02 FB | 	rdlong	local10, local01
28178     1C 1E 86 F1 | 	sub	local01, #28
2817c     14 2D 02 F6 | 	mov	local08, local06
28180     18 2D 02 F1 | 	add	local08, local10
28184     16 13 CA FA | 	rdbyte	arg01, local08 wz
28188     00 FA 05 56 |  if_ne	mov	result1, #0
2818c                 | ' 
2818c                 | ' 	return 0;
2818c     00 FA 05 A6 |  if_e	mov	result1, #0
28190     00 FA 0D F2 | 	cmp	result1, #0 wz
28194     28 00 90 AD |  if_e	jmp	#LR__4106
28198     19 33 32 F9 | 	getword	local11, local11, #0
2819c     08 32 66 F0 | 	shl	local11, #8
281a0     1C 1E 06 F1 | 	add	local01, #28
281a4     0F 39 02 FB | 	rdlong	local14, local01
281a8     1C 1E 86 F1 | 	sub	local01, #28
281ac     14 2F 02 F6 | 	mov	local09, local06
281b0     1C 2F 02 F1 | 	add	local09, local14
281b4     17 35 C2 FA | 	rdbyte	local12, local09
281b8     1A 33 42 F5 | 	or	local11, local12
281bc     01 28 06 F1 | 	add	local06, #1
281c0                 | LR__4106
281c0     19 13 02 F6 | 	mov	arg01, local11
281c4     01 00 00 FF 
281c8     52 15 06 F6 | 	mov	arg02, ##850
281cc     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
281d0     FD 32 02 F6 | 	mov	local11, result1
281d4     19 25 02 F6 | 	mov	local04, local11
281d8     0F 24 4E F7 | 	zerox	local04, #15 wz
281dc     00 26 06 A6 |  if_e	mov	local05, #0
281e0     30 00 90 AD |  if_e	jmp	#LR__4107
281e4     19 13 32 F9 | 	getword	arg01, local11, #0
281e8     13 15 02 F6 | 	mov	arg02, local05
281ec     0C 20 06 F1 | 	add	local02, #12
281f0     10 15 02 F1 | 	add	arg02, local02
281f4     0C 16 06 F6 | 	mov	arg03, #12
281f8     13 17 82 F1 | 	sub	arg03, local05
281fc     0C 20 86 F1 | 	sub	local02, #12
28200     EC DF BF FD | 	call	#_fatfs_cc_put_utf
28204     FD 38 0A F6 | 	mov	local14, result1 wz
28208     00 26 06 A6 |  if_e	mov	local05, #0
2820c     1C 27 02 51 |  if_ne	add	local05, local14
28210     D8 FE 9F 5D |  if_ne	jmp	#LR__4104
28214                 | LR__4107
28214     13 25 02 F6 | 	mov	local04, local05
28218     0C 20 06 F1 | 	add	local02, #12
2821c     10 25 02 F1 | 	add	local04, local02
28220     12 01 48 FC | 	wrbyte	#0, local04
28224     10 20 06 F1 | 	add	local02, #16
28228     10 25 CA FA | 	rdbyte	local04, local02 wz
2822c     1C 20 86 F1 | 	sub	local02, #28
28230     F8 00 90 5D |  if_ne	jmp	#LR__4113
28234     00 26 0E F2 | 	cmp	local05, #0 wz
28238     1C 00 90 5D |  if_ne	jmp	#LR__4108
2823c     13 37 02 F6 | 	mov	local13, local05
28240     1C 20 06 F1 | 	add	local02, #28
28244     10 37 02 F1 | 	add	local13, local02
28248     1B 7F 48 FC | 	wrbyte	#63, local13
2824c     01 26 06 F1 | 	add	local05, #1
28250     1C 20 86 F1 | 	sub	local02, #28
28254     A4 00 90 FD | 	jmp	#LR__4112
28258                 | LR__4108
28258                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
28258     00 26 06 F6 | 	mov	local05, #0
2825c     00 28 06 F6 | 	mov	local06, #0
28260     08 3A 06 F6 | 	mov	local15, #8
28264                 | LR__4109
28264     14 25 02 F6 | 	mov	local04, local06
28268     0C 20 06 F1 | 	add	local02, #12
2826c     10 25 02 F1 | 	add	local04, local02
28270     12 37 CA FA | 	rdbyte	local13, local04 wz
28274     0C 20 86 F1 | 	sub	local02, #12
28278     80 00 90 AD |  if_e	jmp	#LR__4111
2827c     14 2D 02 F6 | 	mov	local08, local06
28280     0C 20 06 F1 | 	add	local02, #12
28284     10 2D 02 F1 | 	add	local08, local02
28288     16 33 C2 FA | 	rdbyte	local11, local08
2828c     19 39 32 F9 | 	getword	local14, local11, #0
28290     2E 38 0E F2 | 	cmp	local14, #46 wz
28294     0C 20 86 F1 | 	sub	local02, #12
28298     10 3A 06 A6 |  if_e	mov	local15, #16
2829c     19 39 32 F9 | 	getword	local14, local11, #0
282a0     41 38 16 F2 | 	cmp	local14, #65 wc
282a4     30 00 90 CD |  if_b	jmp	#LR__4110
282a8     19 2D 32 F9 | 	getword	local08, local11, #0
282ac     5B 2C 16 F2 | 	cmp	local08, #91 wc
282b0     24 00 90 3D |  if_ae	jmp	#LR__4110
282b4     1C 1E 06 F1 | 	add	local01, #28
282b8     0F 2F 02 FB | 	rdlong	local09, local01
282bc     1C 1E 86 F1 | 	sub	local01, #28
282c0     0C 2E 06 F1 | 	add	local09, #12
282c4     17 31 C2 FA | 	rdbyte	local10, local09
282c8     1D 39 E2 F8 | 	getbyte	local14, local15, #0
282cc     1C 31 CA F7 | 	test	local10, local14 wz
282d0     19 33 32 59 |  if_ne	getword	local11, local11, #0
282d4     20 32 06 51 |  if_ne	add	local11, #32
282d8                 | LR__4110
282d8     13 39 02 F6 | 	mov	local14, local05
282dc     1C 20 06 F1 | 	add	local02, #28
282e0     10 39 02 F1 | 	add	local14, local02
282e4     19 33 32 F9 | 	getword	local11, local11, #0
282e8     1C 33 42 FC | 	wrbyte	local11, local14
282ec     01 28 06 F1 | 	add	local06, #1
282f0     01 26 06 F1 | 	add	local05, #1
282f4     1C 20 86 F1 | 	sub	local02, #28
282f8     68 FF 9F FD | 	jmp	#LR__4109
282fc                 | LR__4111
282fc                 | LR__4112
282fc     1C 20 06 F1 | 	add	local02, #28
28300     10 27 02 F1 | 	add	local05, local02
28304     13 01 48 FC | 	wrbyte	#0, local05
28308     1C 1E 06 F1 | 	add	local01, #28
2830c     0F 25 02 FB | 	rdlong	local04, local01
28310     1C 1E 86 F1 | 	sub	local01, #28
28314     0C 24 06 F1 | 	add	local04, #12
28318     12 37 CA FA | 	rdbyte	local13, local04 wz
2831c     1C 20 86 F1 | 	sub	local02, #28
28320     0C 20 06 A1 |  if_e	add	local02, #12
28324     10 01 48 AC |  if_e	wrbyte	#0, local02
28328     0C 20 86 A1 |  if_e	sub	local02, #12
2832c                 | LR__4113
2832c     1C 1E 06 F1 | 	add	local01, #28
28330     0F 35 02 FB | 	rdlong	local12, local01
28334     0B 34 06 F1 | 	add	local12, #11
28338     1A 25 C2 FA | 	rdbyte	local04, local12
2833c     3F 24 06 F5 | 	and	local04, #63
28340     08 20 06 F1 | 	add	local02, #8
28344     10 25 42 FC | 	wrbyte	local04, local02
28348     08 20 86 F1 | 	sub	local02, #8
2834c     0F 13 02 FB | 	rdlong	arg01, local01
28350     1C 12 06 F1 | 	add	arg01, #28
28354                 | ' {
28354                 | ' 
28354                 | ' 	return *((DWORD*)ptr);
28354     09 FB 01 FB | 	rdlong	result1, arg01
28358     10 FB 61 FC | 	wrlong	result1, local02
2835c     0F 13 02 FB | 	rdlong	arg01, local01
28360     16 12 06 F1 | 	add	arg01, #22
28364                 | ' {
28364                 | ' 
28364                 | ' 	return *((WORD*)ptr);
28364     09 FB E1 FA | 	rdword	result1, arg01
28368     06 20 06 F1 | 	add	local02, #6
2836c     10 FB 51 FC | 	wrword	result1, local02
28370     0F 13 02 FB | 	rdlong	arg01, local01
28374     18 12 06 F1 | 	add	arg01, #24
28378                 | ' {
28378                 | ' 
28378                 | ' 	return *((WORD*)ptr);
28378     09 FB E1 FA | 	rdword	result1, arg01
2837c     02 20 86 F1 | 	sub	local02, #2
28380     10 FB 51 FC | 	wrword	result1, local02
28384                 | LR__4114
28384     A7 F0 03 F6 | 	mov	ptra, fp
28388     B2 00 A0 FD | 	call	#popregs_
2838c                 | _fatfs_cc_get_fileinfo_ret
2838c     2D 00 64 FD | 	ret
28390                 | 
28390                 | _fatfs_cc_create_name
28390     0D 4A 05 F6 | 	mov	COUNT_, #13
28394     A8 00 A0 FD | 	call	#pushregs_
28398     34 F0 07 F1 | 	add	ptra, #52
2839c     04 4E 05 F1 | 	add	fp, #4
283a0     A7 12 62 FC | 	wrlong	arg01, fp
283a4     04 4E 05 F1 | 	add	fp, #4
283a8     A7 14 62 FC | 	wrlong	arg02, fp
283ac     0A FB 01 FB | 	rdlong	result1, arg02
283b0     28 4E 05 F1 | 	add	fp, #40
283b4     A7 FA 61 FC | 	wrlong	result1, fp
283b8     2C 4E 85 F1 | 	sub	fp, #44
283bc     A7 FA 01 FB | 	rdlong	result1, fp
283c0     FD 1E 02 FB | 	rdlong	local01, result1
283c4     0C 1E 06 F1 | 	add	local01, #12
283c8     0F 21 02 FB | 	rdlong	local02, local01
283cc     14 4E 05 F1 | 	add	fp, #20
283d0     A7 20 62 FC | 	wrlong	local02, fp
283d4     14 4E 05 F1 | 	add	fp, #20
283d8     A7 00 68 FC | 	wrlong	#0, fp
283dc     2C 4E 85 F1 | 	sub	fp, #44
283e0                 | ' 
283e0                 | ' 
283e0                 | ' 
283e0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
283e0                 | ' 	for (;;) {
283e0                 | LR__4120
283e0     30 4E 05 F1 | 	add	fp, #48
283e4     A7 12 02 F6 | 	mov	arg01, fp
283e8     30 4E 85 F1 | 	sub	fp, #48
283ec     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
283f0     1C 4E 05 F1 | 	add	fp, #28
283f4     A7 FA 61 FC | 	wrlong	result1, fp
283f8     1C 4E 85 F1 | 	sub	fp, #28
283fc     FF FF 7F FF 
28400     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28404     06 FA 05 A6 |  if_e	mov	result1, #6
28408     74 08 90 AD |  if_e	jmp	#LR__4160
2840c     1C 4E 05 F1 | 	add	fp, #28
28410     A7 1E 02 FB | 	rdlong	local01, fp
28414     1C 4E 85 F1 | 	sub	fp, #28
28418     80 00 00 FF 
2841c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
28420     3C 00 90 CD |  if_b	jmp	#LR__4121
28424     18 4E 05 F1 | 	add	fp, #24
28428     A7 22 02 FB | 	rdlong	local03, fp
2842c     14 4E 05 F1 | 	add	fp, #20
28430     A7 1E 02 FB | 	rdlong	local01, fp
28434     0F 25 02 F6 | 	mov	local04, local01
28438     01 24 06 F1 | 	add	local04, #1
2843c     A7 24 62 FC | 	wrlong	local04, fp
28440     01 1E 66 F0 | 	shl	local01, #1
28444     11 1F 02 F1 | 	add	local01, local03
28448     10 4E 85 F1 | 	sub	fp, #16
2844c     A7 26 02 FB | 	rdlong	local05, fp
28450     1C 4E 85 F1 | 	sub	fp, #28
28454     13 29 02 F6 | 	mov	local06, local05
28458     10 28 46 F0 | 	shr	local06, #16
2845c     0F 29 52 FC | 	wrword	local06, local01
28460                 | LR__4121
28460     1C 4E 05 F1 | 	add	fp, #28
28464     A7 1E 02 FB | 	rdlong	local01, fp
28468     08 4E 85 F1 | 	sub	fp, #8
2846c     A7 1E 52 FC | 	wrword	local01, fp
28470     A7 1E E2 FA | 	rdword	local01, fp
28474     14 4E 85 F1 | 	sub	fp, #20
28478     20 1E 16 F2 | 	cmp	local01, #32 wc
2847c     B0 00 90 CD |  if_b	jmp	#LR__4123
28480     14 4E 05 F1 | 	add	fp, #20
28484     A7 1E E2 FA | 	rdword	local01, fp
28488     14 4E 85 F1 | 	sub	fp, #20
2848c     2F 1E 0E F2 | 	cmp	local01, #47 wz
28490     14 4E 05 51 |  if_ne	add	fp, #20
28494     A7 24 E2 5A |  if_ne	rdword	local04, fp
28498     14 4E 85 51 |  if_ne	sub	fp, #20
2849c     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
284a0     8C 00 90 AD |  if_e	jmp	#LR__4123
284a4     14 4E 05 F1 | 	add	fp, #20
284a8     A7 12 E2 FA | 	rdword	arg01, fp
284ac     14 4E 85 F1 | 	sub	fp, #20
284b0     80 12 16 F2 | 	cmp	arg01, #128 wc
284b4     24 00 90 3D |  if_ae	jmp	#LR__4122
284b8     71 01 00 FF 
284bc     F4 13 06 F6 | 	mov	arg01, ##@LR__4782
284c0     14 4E 05 F1 | 	add	fp, #20
284c4     A7 14 E2 FA | 	rdword	arg02, fp
284c8     14 4E 85 F1 | 	sub	fp, #20
284cc     FC D0 BF FD | 	call	#_fatfs_cc_strchr
284d0     00 FA 0D F2 | 	cmp	result1, #0 wz
284d4     06 FA 05 56 |  if_ne	mov	result1, #6
284d8     A4 07 90 5D |  if_ne	jmp	#LR__4160
284dc                 | LR__4122
284dc     2C 4E 05 F1 | 	add	fp, #44
284e0     A7 28 02 FB | 	rdlong	local06, fp
284e4     2C 4E 85 F1 | 	sub	fp, #44
284e8     FF 28 16 F2 | 	cmp	local06, #255 wc
284ec     06 FA 05 36 |  if_ae	mov	result1, #6
284f0     8C 07 90 3D |  if_ae	jmp	#LR__4160
284f4     18 4E 05 F1 | 	add	fp, #24
284f8     A7 22 02 FB | 	rdlong	local03, fp
284fc     14 4E 05 F1 | 	add	fp, #20
28500     A7 20 02 FB | 	rdlong	local02, fp
28504     10 25 02 F6 | 	mov	local04, local02
28508     01 24 06 F1 | 	add	local04, #1
2850c     A7 24 62 FC | 	wrlong	local04, fp
28510     10 1F 02 F6 | 	mov	local01, local02
28514     01 1E 66 F0 | 	shl	local01, #1
28518     11 1F 02 F1 | 	add	local01, local03
2851c     18 4E 85 F1 | 	sub	fp, #24
28520     A7 28 E2 FA | 	rdword	local06, fp
28524     14 4E 85 F1 | 	sub	fp, #20
28528     0F 29 52 FC | 	wrword	local06, local01
2852c     B0 FE 9F FD | 	jmp	#LR__4120
28530                 | LR__4123
28530     14 4E 05 F1 | 	add	fp, #20
28534     A7 2A E2 FA | 	rdword	local07, fp
28538     14 4E 85 F1 | 	sub	fp, #20
2853c     20 2A 16 F2 | 	cmp	local07, #32 wc
28540     10 4E 05 C1 |  if_b	add	fp, #16
28544     A7 08 48 CC |  if_b	wrbyte	#4, fp
28548     10 4E 85 C1 |  if_b	sub	fp, #16
2854c     74 00 90 CD |  if_b	jmp	#LR__4128
28550     97 24 48 FB | 	callpa	#(@LR__4126-@LR__4124)>>2,fcache_load_ptr_
28554                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
28554                 | LR__4124
28554     30 4E 05 F1 | 	add	fp, #48
28558     A7 24 02 FB | 	rdlong	local04, fp
2855c     30 4E 85 F1 | 	sub	fp, #48
28560     12 2B C2 FA | 	rdbyte	local07, local04
28564     2F 2A 0E F2 | 	cmp	local07, #47 wz
28568     18 00 90 AD |  if_e	jmp	#LR__4125
2856c     30 4E 05 F1 | 	add	fp, #48
28570     A7 24 02 FB | 	rdlong	local04, fp
28574     30 4E 85 F1 | 	sub	fp, #48
28578     12 21 C2 FA | 	rdbyte	local02, local04
2857c     5C 20 0E F2 | 	cmp	local02, #92 wz
28580     18 00 90 5D |  if_ne	jmp	#LR__4127
28584                 | LR__4125
28584     30 4E 05 F1 | 	add	fp, #48
28588     A7 1E 02 FB | 	rdlong	local01, fp
2858c     01 1E 06 F1 | 	add	local01, #1
28590     A7 1E 62 FC | 	wrlong	local01, fp
28594     30 4E 85 F1 | 	sub	fp, #48
28598     B8 FF 9F FD | 	jmp	#LR__4124
2859c                 | LR__4126
2859c                 | LR__4127
2859c     10 4E 05 F1 | 	add	fp, #16
285a0     A7 00 48 FC | 	wrbyte	#0, fp
285a4     20 4E 05 F1 | 	add	fp, #32
285a8     A7 28 02 FB | 	rdlong	local06, fp
285ac     30 4E 85 F1 | 	sub	fp, #48
285b0     14 2B C2 FA | 	rdbyte	local07, local06
285b4     20 2A 16 F2 | 	cmp	local07, #32 wc
285b8     10 4E 05 C1 |  if_b	add	fp, #16
285bc     A7 08 48 CC |  if_b	wrbyte	#4, fp
285c0     10 4E 85 C1 |  if_b	sub	fp, #16
285c4                 | LR__4128
285c4     08 4E 05 F1 | 	add	fp, #8
285c8     A7 2A 02 FB | 	rdlong	local07, fp
285cc     28 4E 05 F1 | 	add	fp, #40
285d0     A7 1E 02 FB | 	rdlong	local01, fp
285d4     30 4E 85 F1 | 	sub	fp, #48
285d8     15 1F 62 FC | 	wrlong	local01, local07
285dc     97 38 48 FB | 	callpa	#(@LR__4130-@LR__4129)>>2,fcache_load_ptr_
285e0                 | ' 	}
285e0                 | ' 	*path = p;
285e0                 | ' #line 2862 "ff.c"
285e0                 | ' 	while (di) {
285e0                 | LR__4129
285e0     2C 4E 05 F1 | 	add	fp, #44
285e4     A7 2A 0A FB | 	rdlong	local07, fp wz
285e8     2C 4E 85 F1 | 	sub	fp, #44
285ec     60 00 90 AD |  if_e	jmp	#LR__4131
285f0     18 4E 05 F1 | 	add	fp, #24
285f4     A7 28 02 FB | 	rdlong	local06, fp
285f8     14 4E 05 F1 | 	add	fp, #20
285fc     A7 24 02 FB | 	rdlong	local04, fp
28600     01 24 86 F1 | 	sub	local04, #1
28604     01 24 66 F0 | 	shl	local04, #1
28608     14 25 02 F1 | 	add	local04, local06
2860c     12 29 E2 FA | 	rdword	local06, local04
28610     18 4E 85 F1 | 	sub	fp, #24
28614     A7 28 52 FC | 	wrword	local06, fp
28618     A7 2A E2 FA | 	rdword	local07, fp
2861c     14 4E 85 F1 | 	sub	fp, #20
28620     20 2A 0E F2 | 	cmp	local07, #32 wz
28624     14 4E 05 51 |  if_ne	add	fp, #20
28628     A7 1E E2 5A |  if_ne	rdword	local01, fp
2862c     14 4E 85 51 |  if_ne	sub	fp, #20
28630     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
28634     18 00 90 5D |  if_ne	jmp	#LR__4131
28638     2C 4E 05 F1 | 	add	fp, #44
2863c     A7 1E 02 FB | 	rdlong	local01, fp
28640     01 1E 86 F1 | 	sub	local01, #1
28644     A7 1E 62 FC | 	wrlong	local01, fp
28648     2C 4E 85 F1 | 	sub	fp, #44
2864c     90 FF 9F FD | 	jmp	#LR__4129
28650                 | LR__4130
28650                 | LR__4131
28650     18 4E 05 F1 | 	add	fp, #24
28654     A7 2C 02 FB | 	rdlong	local08, fp
28658     14 4E 05 F1 | 	add	fp, #20
2865c     A7 24 02 FB | 	rdlong	local04, fp
28660     01 24 66 F0 | 	shl	local04, #1
28664     16 25 02 F1 | 	add	local04, local08
28668     12 01 58 FC | 	wrword	#0, local04
2866c     A7 2A 0A FB | 	rdlong	local07, fp wz
28670     2C 4E 85 F1 | 	sub	fp, #44
28674     06 FA 05 A6 |  if_e	mov	result1, #6
28678     04 06 90 AD |  if_e	jmp	#LR__4160
2867c                 | ' 
2867c                 | ' 
2867c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2867c     28 4E 05 F1 | 	add	fp, #40
28680     A7 00 68 FC | 	wrlong	#0, fp
28684     28 4E 85 F1 | 	sub	fp, #40
28688     97 22 48 FB | 	callpa	#(@LR__4133-@LR__4132)>>2,fcache_load_ptr_
2868c                 | LR__4132
2868c     18 4E 05 F1 | 	add	fp, #24
28690     A7 2E 02 FB | 	rdlong	local09, fp
28694     10 4E 05 F1 | 	add	fp, #16
28698     A7 30 02 FB | 	rdlong	local10, fp
2869c     28 4E 85 F1 | 	sub	fp, #40
286a0     01 30 66 F0 | 	shl	local10, #1
286a4     17 31 02 F1 | 	add	local10, local09
286a8     18 33 E2 FA | 	rdword	local11, local10
286ac     20 32 0E F2 | 	cmp	local11, #32 wz
286b0     1C 00 90 5D |  if_ne	jmp	#LR__4134
286b4     28 4E 05 F1 | 	add	fp, #40
286b8     A7 34 02 FB | 	rdlong	local12, fp
286bc     1A 27 02 F6 | 	mov	local05, local12
286c0     01 26 06 F1 | 	add	local05, #1
286c4     A7 26 62 FC | 	wrlong	local05, fp
286c8     28 4E 85 F1 | 	sub	fp, #40
286cc     BC FF 9F FD | 	jmp	#LR__4132
286d0                 | LR__4133
286d0                 | LR__4134
286d0     28 4E 05 F1 | 	add	fp, #40
286d4     A7 2A 02 FB | 	rdlong	local07, fp
286d8     28 4E 85 F1 | 	sub	fp, #40
286dc     01 2A 16 F2 | 	cmp	local07, #1 wc
286e0     28 00 90 3D |  if_ae	jmp	#LR__4135
286e4     18 4E 05 F1 | 	add	fp, #24
286e8     A7 22 02 FB | 	rdlong	local03, fp
286ec     10 4E 05 F1 | 	add	fp, #16
286f0     A7 2E 02 FB | 	rdlong	local09, fp
286f4     28 4E 85 F1 | 	sub	fp, #40
286f8     01 2E 66 F0 | 	shl	local09, #1
286fc     11 2F 02 F1 | 	add	local09, local03
28700     17 1F E2 FA | 	rdword	local01, local09
28704     2E 1E 0E F2 | 	cmp	local01, #46 wz
28708     14 00 90 5D |  if_ne	jmp	#LR__4136
2870c                 | LR__4135
2870c     10 4E 05 F1 | 	add	fp, #16
28710     A7 2A C2 FA | 	rdbyte	local07, fp
28714     03 2A 46 F5 | 	or	local07, #3
28718     A7 2A 42 FC | 	wrbyte	local07, fp
2871c     10 4E 85 F1 | 	sub	fp, #16
28720                 | LR__4136
28720     97 2C 48 FB | 	callpa	#(@LR__4138-@LR__4137)>>2,fcache_load_ptr_
28724                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
28724                 | LR__4137
28724     2C 4E 05 F1 | 	add	fp, #44
28728     A7 2A 02 FB | 	rdlong	local07, fp
2872c     2C 4E 85 F1 | 	sub	fp, #44
28730     01 2A 16 F2 | 	cmp	local07, #1 wc
28734     44 00 90 CD |  if_b	jmp	#LR__4139
28738     18 4E 05 F1 | 	add	fp, #24
2873c     A7 28 02 FB | 	rdlong	local06, fp
28740     14 4E 05 F1 | 	add	fp, #20
28744     A7 22 02 FB | 	rdlong	local03, fp
28748     2C 4E 85 F1 | 	sub	fp, #44
2874c     01 22 86 F1 | 	sub	local03, #1
28750     01 22 66 F0 | 	shl	local03, #1
28754     14 23 02 F1 | 	add	local03, local06
28758     11 1F E2 FA | 	rdword	local01, local03
2875c     2E 1E 0E F2 | 	cmp	local01, #46 wz
28760     18 00 90 AD |  if_e	jmp	#LR__4139
28764     2C 4E 05 F1 | 	add	fp, #44
28768     A7 1E 02 FB | 	rdlong	local01, fp
2876c     01 1E 86 F1 | 	sub	local01, #1
28770     A7 1E 62 FC | 	wrlong	local01, fp
28774     2C 4E 85 F1 | 	sub	fp, #44
28778     A8 FF 9F FD | 	jmp	#LR__4137
2877c                 | LR__4138
2877c                 | LR__4139
2877c     04 4E 05 F1 | 	add	fp, #4
28780     A7 12 02 FB | 	rdlong	arg01, fp
28784     04 4E 85 F1 | 	sub	fp, #4
28788     20 12 06 F1 | 	add	arg01, #32
2878c     20 14 06 F6 | 	mov	arg02, #32
28790     0B 16 06 F6 | 	mov	arg03, #11
28794     09 37 02 F6 | 	mov	local13, arg01
28798     98 00 A0 FD | 	call	#\builtin_bytefill_
2879c     1B FB 01 F6 | 	mov	result1, local13
287a0     0C 4E 05 F1 | 	add	fp, #12
287a4     A7 00 48 FC | 	wrbyte	#0, fp
287a8     A7 2A C2 FA | 	rdbyte	local07, fp
287ac     14 4E 05 F1 | 	add	fp, #20
287b0     A7 2A 62 FC | 	wrlong	local07, fp
287b4     04 4E 05 F1 | 	add	fp, #4
287b8     A7 10 68 FC | 	wrlong	#8, fp
287bc     24 4E 85 F1 | 	sub	fp, #36
287c0                 | ' 
287c0                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
287c0                 | ' 	i = b = 0; ni = 8;
287c0                 | ' 	for (;;) {
287c0                 | LR__4140
287c0     18 4E 05 F1 | 	add	fp, #24
287c4     A7 22 02 FB | 	rdlong	local03, fp
287c8     10 4E 05 F1 | 	add	fp, #16
287cc     A7 2E 02 FB | 	rdlong	local09, fp
287d0     17 25 02 F6 | 	mov	local04, local09
287d4     01 24 06 F1 | 	add	local04, #1
287d8     A7 24 62 FC | 	wrlong	local04, fp
287dc     01 2E 66 F0 | 	shl	local09, #1
287e0     11 2F 02 F1 | 	add	local09, local03
287e4     17 29 E2 FA | 	rdword	local06, local09
287e8     14 4E 85 F1 | 	sub	fp, #20
287ec     A7 28 52 FC | 	wrword	local06, fp
287f0     A7 2A EA FA | 	rdword	local07, fp wz
287f4     14 4E 85 F1 | 	sub	fp, #20
287f8     74 03 90 AD |  if_e	jmp	#LR__4156
287fc     14 4E 05 F1 | 	add	fp, #20
28800     A7 2A E2 FA | 	rdword	local07, fp
28804     14 4E 85 F1 | 	sub	fp, #20
28808     20 2A 0E F2 | 	cmp	local07, #32 wz
2880c     30 00 90 AD |  if_e	jmp	#LR__4141
28810     14 4E 05 F1 | 	add	fp, #20
28814     A7 1E E2 FA | 	rdword	local01, fp
28818     14 4E 85 F1 | 	sub	fp, #20
2881c     2E 1E 0E F2 | 	cmp	local01, #46 wz
28820     34 00 90 5D |  if_ne	jmp	#LR__4142
28824     28 4E 05 F1 | 	add	fp, #40
28828     A7 24 02 FB | 	rdlong	local04, fp
2882c     04 4E 05 F1 | 	add	fp, #4
28830     A7 30 02 FB | 	rdlong	local10, fp
28834     2C 4E 85 F1 | 	sub	fp, #44
28838     18 25 0A F2 | 	cmp	local04, local10 wz
2883c     18 00 90 AD |  if_e	jmp	#LR__4142
28840                 | LR__4141
28840     10 4E 05 F1 | 	add	fp, #16
28844     A7 2A C2 FA | 	rdbyte	local07, fp
28848     03 2A 46 F5 | 	or	local07, #3
2884c     A7 2A 42 FC | 	wrbyte	local07, fp
28850     10 4E 85 F1 | 	sub	fp, #16
28854                 | ' 			cf |=  0x01  |  0x02 ;
28854                 | ' 			continue;
28854     68 FF 9F FD | 	jmp	#LR__4140
28858                 | LR__4142
28858     20 4E 05 F1 | 	add	fp, #32
2885c     A7 2A 02 FB | 	rdlong	local07, fp
28860     04 4E 05 F1 | 	add	fp, #4
28864     A7 1E 02 FB | 	rdlong	local01, fp
28868     24 4E 85 F1 | 	sub	fp, #36
2886c     0F 2B 12 F2 | 	cmp	local07, local01 wc
28870     1C 00 90 3D |  if_ae	jmp	#LR__4143
28874     28 4E 05 F1 | 	add	fp, #40
28878     A7 2C 02 FB | 	rdlong	local08, fp
2887c     04 4E 05 F1 | 	add	fp, #4
28880     A7 30 02 FB | 	rdlong	local10, fp
28884     2C 4E 85 F1 | 	sub	fp, #44
28888     18 2D 0A F2 | 	cmp	local08, local10 wz
2888c     B0 00 90 5D |  if_ne	jmp	#LR__4145
28890                 | LR__4143
28890     24 4E 05 F1 | 	add	fp, #36
28894     A7 2A 02 FB | 	rdlong	local07, fp
28898     24 4E 85 F1 | 	sub	fp, #36
2889c     0B 2A 0E F2 | 	cmp	local07, #11 wz
288a0     18 00 90 5D |  if_ne	jmp	#LR__4144
288a4     10 4E 05 F1 | 	add	fp, #16
288a8     A7 2A C2 FA | 	rdbyte	local07, fp
288ac     03 2A 46 F5 | 	or	local07, #3
288b0     A7 2A 42 FC | 	wrbyte	local07, fp
288b4     10 4E 85 F1 | 	sub	fp, #16
288b8                 | ' 				cf |=  0x01  |  0x02 ;
288b8                 | ' 				break;
288b8     B4 02 90 FD | 	jmp	#LR__4156
288bc                 | LR__4144
288bc     28 4E 05 F1 | 	add	fp, #40
288c0     A7 2A 02 FB | 	rdlong	local07, fp
288c4     04 4E 05 F1 | 	add	fp, #4
288c8     A7 1E 02 FB | 	rdlong	local01, fp
288cc     2C 4E 85 F1 | 	sub	fp, #44
288d0     0F 2B 0A F2 | 	cmp	local07, local01 wz
288d4     10 4E 05 51 |  if_ne	add	fp, #16
288d8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
288dc     03 2A 46 55 |  if_ne	or	local07, #3
288e0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
288e4     10 4E 85 51 |  if_ne	sub	fp, #16
288e8     28 4E 05 F1 | 	add	fp, #40
288ec     A7 2A 02 FB | 	rdlong	local07, fp
288f0     04 4E 05 F1 | 	add	fp, #4
288f4     A7 20 02 FB | 	rdlong	local02, fp
288f8     2C 4E 85 F1 | 	sub	fp, #44
288fc     10 2B 1A F2 | 	cmp	local07, local02 wcz
28900     6C 02 90 1D |  if_a	jmp	#LR__4156
28904     2C 4E 05 F1 | 	add	fp, #44
28908     A7 2A 02 FB | 	rdlong	local07, fp
2890c     04 4E 85 F1 | 	sub	fp, #4
28910     A7 2A 62 FC | 	wrlong	local07, fp
28914     08 4E 85 F1 | 	sub	fp, #8
28918     A7 10 68 FC | 	wrlong	#8, fp
2891c     04 4E 05 F1 | 	add	fp, #4
28920     A7 16 68 FC | 	wrlong	#11, fp
28924     18 4E 85 F1 | 	sub	fp, #24
28928     A7 32 C2 FA | 	rdbyte	local11, fp
2892c     19 2B E2 F8 | 	getbyte	local07, local11, #0
28930     02 2A 66 F0 | 	shl	local07, #2
28934     A7 2A 42 FC | 	wrbyte	local07, fp
28938     0C 4E 85 F1 | 	sub	fp, #12
2893c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2893c                 | ' 			continue;
2893c     80 FE 9F FD | 	jmp	#LR__4140
28940                 | LR__4145
28940     14 4E 05 F1 | 	add	fp, #20
28944     A7 2A E2 FA | 	rdword	local07, fp
28948     14 4E 85 F1 | 	sub	fp, #20
2894c     80 2A 16 F2 | 	cmp	local07, #128 wc
28950     6C 00 90 CD |  if_b	jmp	#LR__4147
28954     10 4E 05 F1 | 	add	fp, #16
28958     A7 2A C2 FA | 	rdbyte	local07, fp
2895c     02 2A 46 F5 | 	or	local07, #2
28960     A7 2A 42 FC | 	wrbyte	local07, fp
28964     04 4E 05 F1 | 	add	fp, #4
28968     A7 12 E2 FA | 	rdword	arg01, fp
2896c     14 4E 85 F1 | 	sub	fp, #20
28970     01 00 00 FF 
28974     52 15 06 F6 | 	mov	arg02, ##850
28978     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2897c     14 4E 05 F1 | 	add	fp, #20
28980     A7 FA 51 FC | 	wrword	result1, fp
28984     A7 2A E2 FA | 	rdword	local07, fp
28988     14 4E 85 F1 | 	sub	fp, #20
2898c     80 2A CE F7 | 	test	local07, #128 wz
28990     2C 00 90 AD |  if_e	jmp	#LR__4146
28994     14 4E 05 F1 | 	add	fp, #20
28998     A7 20 E2 FA | 	rdword	local02, fp
2899c     7F 20 06 F5 | 	and	local02, #127
289a0     01 00 00 FF 
289a4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
289a8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
289ac     10 2B C2 FA | 	rdbyte	local07, local02
289b0     A7 2A 52 FC | 	wrword	local07, fp
289b4     14 4E 85 F1 | 	sub	fp, #20
289b8     01 00 00 FF 
289bc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
289c0                 | LR__4146
289c0                 | LR__4147
289c0     14 4E 05 F1 | 	add	fp, #20
289c4     A7 2A E2 FA | 	rdword	local07, fp
289c8     14 4E 85 F1 | 	sub	fp, #20
289cc     00 2B 16 F2 | 	cmp	local07, #256 wc
289d0     88 00 90 CD |  if_b	jmp	#LR__4149
289d4     24 4E 05 F1 | 	add	fp, #36
289d8     A7 2A 02 FB | 	rdlong	local07, fp
289dc     01 2A 86 F1 | 	sub	local07, #1
289e0     04 4E 85 F1 | 	sub	fp, #4
289e4     A7 20 02 FB | 	rdlong	local02, fp
289e8     20 4E 85 F1 | 	sub	fp, #32
289ec     15 21 12 F2 | 	cmp	local02, local07 wc
289f0     2C 00 90 CD |  if_b	jmp	#LR__4148
289f4     10 4E 05 F1 | 	add	fp, #16
289f8     A7 32 C2 FA | 	rdbyte	local11, fp
289fc     19 2B E2 F8 | 	getbyte	local07, local11, #0
28a00     03 2A 46 F5 | 	or	local07, #3
28a04     A7 2A 42 FC | 	wrbyte	local07, fp
28a08     14 4E 05 F1 | 	add	fp, #20
28a0c     A7 2A 02 FB | 	rdlong	local07, fp
28a10     04 4E 85 F1 | 	sub	fp, #4
28a14     A7 2A 62 FC | 	wrlong	local07, fp
28a18     20 4E 85 F1 | 	sub	fp, #32
28a1c                 | ' 				cf |=  0x01  |  0x02 ;
28a1c                 | ' 				i = ni; continue;
28a1c     A0 FD 9F FD | 	jmp	#LR__4140
28a20                 | LR__4148
28a20     04 4E 05 F1 | 	add	fp, #4
28a24     A7 2E 02 FB | 	rdlong	local09, fp
28a28     1C 4E 05 F1 | 	add	fp, #28
28a2c     A7 30 02 FB | 	rdlong	local10, fp
28a30     18 25 02 F6 | 	mov	local04, local10
28a34     01 24 06 F1 | 	add	local04, #1
28a38     A7 24 62 FC | 	wrlong	local04, fp
28a3c     20 2E 06 F1 | 	add	local09, #32
28a40     17 31 02 F1 | 	add	local10, local09
28a44     0C 4E 85 F1 | 	sub	fp, #12
28a48     A7 22 E2 FA | 	rdword	local03, fp
28a4c     14 4E 85 F1 | 	sub	fp, #20
28a50     08 22 46 F0 | 	shr	local03, #8
28a54     18 23 42 FC | 	wrbyte	local03, local10
28a58     D4 00 90 FD | 	jmp	#LR__4155
28a5c                 | LR__4149
28a5c     14 4E 05 F1 | 	add	fp, #20
28a60     A7 2A EA FA | 	rdword	local07, fp wz
28a64     14 4E 85 F1 | 	sub	fp, #20
28a68     20 00 90 AD |  if_e	jmp	#LR__4150
28a6c     71 01 00 FF 
28a70     FD 13 06 F6 | 	mov	arg01, ##@LR__4783
28a74     14 4E 05 F1 | 	add	fp, #20
28a78     A7 14 E2 FA | 	rdword	arg02, fp
28a7c     14 4E 85 F1 | 	sub	fp, #20
28a80     48 CB BF FD | 	call	#_fatfs_cc_strchr
28a84     00 FA 0D F2 | 	cmp	result1, #0 wz
28a88     20 00 90 AD |  if_e	jmp	#LR__4151
28a8c                 | LR__4150
28a8c     14 4E 05 F1 | 	add	fp, #20
28a90     A7 BE 58 FC | 	wrword	#95, fp
28a94     04 4E 85 F1 | 	sub	fp, #4
28a98     A7 2A C2 FA | 	rdbyte	local07, fp
28a9c     03 2A 46 F5 | 	or	local07, #3
28aa0     A7 2A 42 FC | 	wrbyte	local07, fp
28aa4     10 4E 85 F1 | 	sub	fp, #16
28aa8     84 00 90 FD | 	jmp	#LR__4154
28aac                 | LR__4151
28aac     14 4E 05 F1 | 	add	fp, #20
28ab0     A7 2A E2 FA | 	rdword	local07, fp
28ab4     14 4E 85 F1 | 	sub	fp, #20
28ab8     41 2A 16 F2 | 	cmp	local07, #65 wc
28abc     24 00 90 CD |  if_b	jmp	#LR__4152
28ac0     14 4E 05 F1 | 	add	fp, #20
28ac4     A7 1E E2 FA | 	rdword	local01, fp
28ac8     14 4E 85 F1 | 	sub	fp, #20
28acc     5B 1E 16 F2 | 	cmp	local01, #91 wc
28ad0     0C 4E 05 C1 |  if_b	add	fp, #12
28ad4     A7 2A C2 CA |  if_b	rdbyte	local07, fp
28ad8     02 2A 46 C5 |  if_b	or	local07, #2
28adc     A7 2A 42 CC |  if_b	wrbyte	local07, fp
28ae0     0C 4E 85 C1 |  if_b	sub	fp, #12
28ae4                 | LR__4152
28ae4     14 4E 05 F1 | 	add	fp, #20
28ae8     A7 2A E2 FA | 	rdword	local07, fp
28aec     14 4E 85 F1 | 	sub	fp, #20
28af0     61 2A 16 F2 | 	cmp	local07, #97 wc
28af4     38 00 90 CD |  if_b	jmp	#LR__4153
28af8     14 4E 05 F1 | 	add	fp, #20
28afc     A7 1E E2 FA | 	rdword	local01, fp
28b00     14 4E 85 F1 | 	sub	fp, #20
28b04     7B 1E 16 F2 | 	cmp	local01, #123 wc
28b08     24 00 90 3D |  if_ae	jmp	#LR__4153
28b0c     0C 4E 05 F1 | 	add	fp, #12
28b10     A7 2A C2 FA | 	rdbyte	local07, fp
28b14     01 2A 46 F5 | 	or	local07, #1
28b18     A7 2A 42 FC | 	wrbyte	local07, fp
28b1c     08 4E 05 F1 | 	add	fp, #8
28b20     A7 2A E2 FA | 	rdword	local07, fp
28b24     20 2A 86 F1 | 	sub	local07, #32
28b28     A7 2A 52 FC | 	wrword	local07, fp
28b2c     14 4E 85 F1 | 	sub	fp, #20
28b30                 | LR__4153
28b30                 | LR__4154
28b30                 | LR__4155
28b30     04 4E 05 F1 | 	add	fp, #4
28b34     A7 32 02 FB | 	rdlong	local11, fp
28b38     19 2F 02 F6 | 	mov	local09, local11
28b3c     1C 4E 05 F1 | 	add	fp, #28
28b40     A7 20 02 FB | 	rdlong	local02, fp
28b44     10 25 02 F6 | 	mov	local04, local02
28b48     01 24 06 F1 | 	add	local04, #1
28b4c     A7 24 62 FC | 	wrlong	local04, fp
28b50     10 31 02 F6 | 	mov	local10, local02
28b54     20 2E 06 F1 | 	add	local09, #32
28b58     17 31 02 F1 | 	add	local10, local09
28b5c     0C 4E 85 F1 | 	sub	fp, #12
28b60     A7 22 E2 FA | 	rdword	local03, fp
28b64     14 4E 85 F1 | 	sub	fp, #20
28b68     18 23 42 FC | 	wrbyte	local03, local10
28b6c     50 FC 9F FD | 	jmp	#LR__4140
28b70                 | LR__4156
28b70     04 4E 05 F1 | 	add	fp, #4
28b74     A7 32 02 FB | 	rdlong	local11, fp
28b78     04 4E 85 F1 | 	sub	fp, #4
28b7c     20 32 06 F1 | 	add	local11, #32
28b80     19 2B C2 FA | 	rdbyte	local07, local11
28b84     E5 2A 0E F2 | 	cmp	local07, #229 wz
28b88     04 4E 05 A1 |  if_e	add	fp, #4
28b8c     A7 2A 02 AB |  if_e	rdlong	local07, fp
28b90     04 4E 85 A1 |  if_e	sub	fp, #4
28b94     20 2A 06 A1 |  if_e	add	local07, #32
28b98     15 0B 48 AC |  if_e	wrbyte	#5, local07
28b9c     24 4E 05 F1 | 	add	fp, #36
28ba0     A7 2A 02 FB | 	rdlong	local07, fp
28ba4     24 4E 85 F1 | 	sub	fp, #36
28ba8     08 2A 0E F2 | 	cmp	local07, #8 wz
28bac     0C 4E 05 A1 |  if_e	add	fp, #12
28bb0     A7 2A C2 AA |  if_e	rdbyte	local07, fp
28bb4     02 2A 66 A0 |  if_e	shl	local07, #2
28bb8     A7 2A 42 AC |  if_e	wrbyte	local07, fp
28bbc     0C 4E 85 A1 |  if_e	sub	fp, #12
28bc0     0C 4E 05 F1 | 	add	fp, #12
28bc4     A7 2A C2 FA | 	rdbyte	local07, fp
28bc8     0C 4E 85 F1 | 	sub	fp, #12
28bcc     0C 2A 06 F5 | 	and	local07, #12
28bd0     0C 2A 0E F2 | 	cmp	local07, #12 wz
28bd4     18 00 90 AD |  if_e	jmp	#LR__4157
28bd8     0C 4E 05 F1 | 	add	fp, #12
28bdc     A7 1E C2 FA | 	rdbyte	local01, fp
28be0     0C 4E 85 F1 | 	sub	fp, #12
28be4     03 1E 06 F5 | 	and	local01, #3
28be8     03 1E 0E F2 | 	cmp	local01, #3 wz
28bec     14 00 90 5D |  if_ne	jmp	#LR__4158
28bf0                 | LR__4157
28bf0     10 4E 05 F1 | 	add	fp, #16
28bf4     A7 2A C2 FA | 	rdbyte	local07, fp
28bf8     02 2A 46 F5 | 	or	local07, #2
28bfc     A7 2A 42 FC | 	wrbyte	local07, fp
28c00     10 4E 85 F1 | 	sub	fp, #16
28c04                 | LR__4158
28c04     10 4E 05 F1 | 	add	fp, #16
28c08     A7 2A C2 FA | 	rdbyte	local07, fp
28c0c     10 4E 85 F1 | 	sub	fp, #16
28c10     02 2A CE F7 | 	test	local07, #2 wz
28c14     48 00 90 5D |  if_ne	jmp	#LR__4159
28c18     0C 4E 05 F1 | 	add	fp, #12
28c1c     A7 2A C2 FA | 	rdbyte	local07, fp
28c20     0C 4E 85 F1 | 	sub	fp, #12
28c24     01 2A CE F7 | 	test	local07, #1 wz
28c28     10 4E 05 51 |  if_ne	add	fp, #16
28c2c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28c30     10 2A 46 55 |  if_ne	or	local07, #16
28c34     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
28c38     10 4E 85 51 |  if_ne	sub	fp, #16
28c3c     0C 4E 05 F1 | 	add	fp, #12
28c40     A7 2A C2 FA | 	rdbyte	local07, fp
28c44     0C 4E 85 F1 | 	sub	fp, #12
28c48     04 2A CE F7 | 	test	local07, #4 wz
28c4c     10 4E 05 51 |  if_ne	add	fp, #16
28c50     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28c54     08 2A 46 55 |  if_ne	or	local07, #8
28c58     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
28c5c     10 4E 85 51 |  if_ne	sub	fp, #16
28c60                 | LR__4159
28c60     04 4E 05 F1 | 	add	fp, #4
28c64     A7 2A 02 FB | 	rdlong	local07, fp
28c68     0C 4E 05 F1 | 	add	fp, #12
28c6c     A7 1E C2 FA | 	rdbyte	local01, fp
28c70     10 4E 85 F1 | 	sub	fp, #16
28c74     2B 2A 06 F1 | 	add	local07, #43
28c78     15 1F 42 FC | 	wrbyte	local01, local07
28c7c                 | ' 	}
28c7c                 | ' 
28c7c                 | ' 	dp->fn[ 11 ] = cf;
28c7c                 | ' 
28c7c                 | ' 	return FR_OK;
28c7c     00 FA 05 F6 | 	mov	result1, #0
28c80                 | LR__4160
28c80     A7 F0 03 F6 | 	mov	ptra, fp
28c84     B2 00 A0 FD | 	call	#popregs_
28c88                 | _fatfs_cc_create_name_ret
28c88     2D 00 64 FD | 	ret
28c8c                 | 
28c8c                 | _fatfs_cc_follow_path
28c8c     02 4A 05 F6 | 	mov	COUNT_, #2
28c90     A8 00 A0 FD | 	call	#pushregs_
28c94     18 F0 07 F1 | 	add	ptra, #24
28c98     04 4E 05 F1 | 	add	fp, #4
28c9c     A7 12 62 FC | 	wrlong	arg01, fp
28ca0     04 4E 05 F1 | 	add	fp, #4
28ca4     A7 14 62 FC | 	wrlong	arg02, fp
28ca8     04 4E 85 F1 | 	sub	fp, #4
28cac     A7 FA 01 FB | 	rdlong	result1, fp
28cb0     FD 1E 02 FB | 	rdlong	local01, result1
28cb4     10 4E 05 F1 | 	add	fp, #16
28cb8     A7 1E 62 FC | 	wrlong	local01, fp
28cbc     14 4E 85 F1 | 	sub	fp, #20
28cc0     97 24 48 FB | 	callpa	#(@LR__4172-@LR__4170)>>2,fcache_load_ptr_
28cc4                 | ' )
28cc4                 | ' {
28cc4                 | ' 	FRESULT res;
28cc4                 | ' 	BYTE ns;
28cc4                 | ' 	FATFS *fs = dp->obj.fs;
28cc4                 | ' #line 3034 "ff.c"
28cc4                 | ' 	{
28cc4                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
28cc4                 | LR__4170
28cc4     08 4E 05 F1 | 	add	fp, #8
28cc8     A7 1E 02 FB | 	rdlong	local01, fp
28ccc     08 4E 85 F1 | 	sub	fp, #8
28cd0     0F 1F C2 FA | 	rdbyte	local01, local01
28cd4     2F 1E 0E F2 | 	cmp	local01, #47 wz
28cd8     18 00 90 AD |  if_e	jmp	#LR__4171
28cdc     08 4E 05 F1 | 	add	fp, #8
28ce0     A7 1E 02 FB | 	rdlong	local01, fp
28ce4     08 4E 85 F1 | 	sub	fp, #8
28ce8     0F 1F C2 FA | 	rdbyte	local01, local01
28cec     5C 1E 0E F2 | 	cmp	local01, #92 wz
28cf0     18 00 90 5D |  if_ne	jmp	#LR__4173
28cf4                 | LR__4171
28cf4     08 4E 05 F1 | 	add	fp, #8
28cf8     A7 1E 02 FB | 	rdlong	local01, fp
28cfc     01 1E 06 F1 | 	add	local01, #1
28d00     A7 1E 62 FC | 	wrlong	local01, fp
28d04     08 4E 85 F1 | 	sub	fp, #8
28d08     B8 FF 9F FD | 	jmp	#LR__4170
28d0c                 | LR__4172
28d0c                 | LR__4173
28d0c     04 4E 05 F1 | 	add	fp, #4
28d10     A7 1E 02 FB | 	rdlong	local01, fp
28d14     08 1E 06 F1 | 	add	local01, #8
28d18     0F 01 68 FC | 	wrlong	#0, local01
28d1c     04 4E 05 F1 | 	add	fp, #4
28d20     A7 1E 02 FB | 	rdlong	local01, fp
28d24     08 4E 85 F1 | 	sub	fp, #8
28d28     0F 1F C2 FA | 	rdbyte	local01, local01
28d2c     20 1E 16 F2 | 	cmp	local01, #32 wc
28d30     30 00 90 3D |  if_ae	jmp	#LR__4174
28d34     04 4E 05 F1 | 	add	fp, #4
28d38     A7 1E 02 FB | 	rdlong	local01, fp
28d3c     2B 1E 06 F1 | 	add	local01, #43
28d40     0F 01 49 FC | 	wrbyte	#128, local01
28d44     A7 12 02 FB | 	rdlong	arg01, fp
28d48     04 4E 85 F1 | 	sub	fp, #4
28d4c     00 14 06 F6 | 	mov	arg02, #0
28d50     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
28d54     0C 4E 05 F1 | 	add	fp, #12
28d58     A7 FA 61 FC | 	wrlong	result1, fp
28d5c     0C 4E 85 F1 | 	sub	fp, #12
28d60     1C 01 90 FD | 	jmp	#LR__4178
28d64                 | LR__4174
28d64                 | ' 		for (;;) {
28d64                 | LR__4175
28d64     04 4E 05 F1 | 	add	fp, #4
28d68     A7 12 02 FB | 	rdlong	arg01, fp
28d6c     04 4E 05 F1 | 	add	fp, #4
28d70     A7 14 02 F6 | 	mov	arg02, fp
28d74     08 4E 85 F1 | 	sub	fp, #8
28d78     14 F6 BF FD | 	call	#_fatfs_cc_create_name
28d7c     0C 4E 05 F1 | 	add	fp, #12
28d80     A7 FA 61 FC | 	wrlong	result1, fp
28d84     00 FA 4D F2 | 	cmps	result1, #0 wz
28d88     0C 4E 85 F1 | 	sub	fp, #12
28d8c     F0 00 90 5D |  if_ne	jmp	#LR__4177
28d90     04 4E 05 F1 | 	add	fp, #4
28d94     A7 12 02 FB | 	rdlong	arg01, fp
28d98     04 4E 85 F1 | 	sub	fp, #4
28d9c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
28da0     0C 4E 05 F1 | 	add	fp, #12
28da4     A7 FA 61 FC | 	wrlong	result1, fp
28da8     08 4E 85 F1 | 	sub	fp, #8
28dac     A7 1E 02 FB | 	rdlong	local01, fp
28db0     2B 1E 06 F1 | 	add	local01, #43
28db4     0F 1F C2 FA | 	rdbyte	local01, local01
28db8     0C 4E 05 F1 | 	add	fp, #12
28dbc     A7 1E 42 FC | 	wrbyte	local01, fp
28dc0     04 4E 85 F1 | 	sub	fp, #4
28dc4     A7 1E 0A FB | 	rdlong	local01, fp wz
28dc8     0C 4E 85 F1 | 	sub	fp, #12
28dcc     34 00 90 AD |  if_e	jmp	#LR__4176
28dd0     0C 4E 05 F1 | 	add	fp, #12
28dd4     A7 1E 02 FB | 	rdlong	local01, fp
28dd8     0C 4E 85 F1 | 	sub	fp, #12
28ddc     04 1E 0E F2 | 	cmp	local01, #4 wz
28de0     9C 00 90 5D |  if_ne	jmp	#LR__4177
28de4     10 4E 05 F1 | 	add	fp, #16
28de8     A7 1E C2 FA | 	rdbyte	local01, fp
28dec     10 4E 85 F1 | 	sub	fp, #16
28df0     04 1E CE F7 | 	test	local01, #4 wz
28df4     0C 4E 05 A1 |  if_e	add	fp, #12
28df8     A7 0A 68 AC |  if_e	wrlong	#5, fp
28dfc     0C 4E 85 A1 |  if_e	sub	fp, #12
28e00                 | ' 					}
28e00                 | ' 				}
28e00                 | ' 				break;
28e00     7C 00 90 FD | 	jmp	#LR__4177
28e04                 | LR__4176
28e04     10 4E 05 F1 | 	add	fp, #16
28e08     A7 1E C2 FA | 	rdbyte	local01, fp
28e0c     10 4E 85 F1 | 	sub	fp, #16
28e10     04 1E CE F7 | 	test	local01, #4 wz
28e14     68 00 90 5D |  if_ne	jmp	#LR__4177
28e18     04 4E 05 F1 | 	add	fp, #4
28e1c     A7 1E 02 FB | 	rdlong	local01, fp
28e20     04 4E 85 F1 | 	sub	fp, #4
28e24     06 1E 06 F1 | 	add	local01, #6
28e28     0F 1F C2 FA | 	rdbyte	local01, local01
28e2c     10 1E CE F7 | 	test	local01, #16 wz
28e30     0C 4E 05 A1 |  if_e	add	fp, #12
28e34     A7 0A 68 AC |  if_e	wrlong	#5, fp
28e38     0C 4E 85 A1 |  if_e	sub	fp, #12
28e3c                 | ' 				res = FR_NO_PATH; break;
28e3c     40 00 90 AD |  if_e	jmp	#LR__4177
28e40     04 4E 05 F1 | 	add	fp, #4
28e44     A7 20 02 FB | 	rdlong	local02, fp
28e48     10 1F 02 F6 | 	mov	local01, local02
28e4c     10 4E 05 F1 | 	add	fp, #16
28e50     A7 14 02 FB | 	rdlong	arg02, fp
28e54     0A 13 02 F6 | 	mov	arg01, arg02
28e58     34 14 06 F1 | 	add	arg02, #52
28e5c     14 4E 85 F1 | 	sub	fp, #20
28e60     10 20 06 F1 | 	add	local02, #16
28e64     10 21 02 FB | 	rdlong	local02, local02
28e68     FF 21 06 F5 | 	and	local02, #511
28e6c     10 15 02 F1 | 	add	arg02, local02
28e70     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
28e74     08 1E 06 F1 | 	add	local01, #8
28e78     0F FB 61 FC | 	wrlong	result1, local01
28e7c     E4 FE 9F FD | 	jmp	#LR__4175
28e80                 | LR__4177
28e80                 | LR__4178
28e80                 | ' 			}
28e80                 | ' #line 3090 "ff.c"
28e80                 | ' 			{
28e80                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
28e80                 | ' 			}
28e80                 | ' 		}
28e80                 | ' 	}
28e80                 | ' 
28e80                 | ' 	return res;
28e80     0C 4E 05 F1 | 	add	fp, #12
28e84     A7 FA 01 FB | 	rdlong	result1, fp
28e88     0C 4E 85 F1 | 	sub	fp, #12
28e8c     A7 F0 03 F6 | 	mov	ptra, fp
28e90     B2 00 A0 FD | 	call	#popregs_
28e94                 | _fatfs_cc_follow_path_ret
28e94     2D 00 64 FD | 	ret
28e98                 | 
28e98                 | _fatfs_cc_get_ldnumber
28e98     01 00 66 F6 | 	neg	_var01, #1
28e9c     09 03 0A FB | 	rdlong	_var02, arg01 wz
28ea0     01 05 02 F6 | 	mov	_var03, _var02
28ea4     01 FA 65 A6 |  if_e	neg	result1, #1
28ea8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
28eac     97 10 48 FB | 	callpa	#(@LR__4181-@LR__4180)>>2,fcache_load_ptr_
28eb0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
28eb0                 | LR__4180
28eb0     02 07 C2 FA | 	rdbyte	_var04, _var03
28eb4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
28eb8     20 FA 15 F2 | 	cmp	result1, #32 wc
28ebc     01 04 06 F1 | 	add	_var03, #1
28ec0     03 09 02 36 |  if_ae	mov	_var05, _var04
28ec4     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
28ec8     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
28ecc     E0 FF 9F 1D |  if_a	jmp	#LR__4180
28ed0                 | LR__4181
28ed0     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
28ed4     3A 06 0E F2 | 	cmp	_var04, #58 wz
28ed8     40 00 90 5D |  if_ne	jmp	#LR__4183
28edc     01 0A 06 F6 | 	mov	_var06, #1
28ee0     01 09 C2 FA | 	rdbyte	_var05, _var02
28ee4     30 08 16 F2 | 	cmp	_var05, #48 wc
28ee8     1C 00 90 CD |  if_b	jmp	#LR__4182
28eec     01 09 C2 FA | 	rdbyte	_var05, _var02
28ef0     3A 08 16 F2 | 	cmp	_var05, #58 wc
28ef4     01 0D 02 C6 |  if_b	mov	_var07, _var02
28ef8     02 0C 06 C1 |  if_b	add	_var07, #2
28efc     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
28f00     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
28f04     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
28f08                 | LR__4182
28f08     01 0A 56 F2 | 	cmps	_var06, #1 wc
28f0c     05 01 02 C6 |  if_b	mov	_var01, _var06
28f10     09 05 62 CC |  if_b	wrlong	_var03, arg01
28f14                 | ' 			vol = i;
28f14                 | ' 			*path = tt;
28f14                 | ' 		}
28f14                 | ' 		return vol;
28f14     00 FB 01 F6 | 	mov	result1, _var01
28f18     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
28f1c                 | LR__4183
28f1c                 | ' 	}
28f1c                 | ' #line 3170 "ff.c"
28f1c                 | ' 	vol = 0;
28f1c                 | ' 
28f1c                 | ' 	return vol;
28f1c     00 FA 05 F6 | 	mov	result1, #0
28f20                 | _fatfs_cc_get_ldnumber_ret
28f20     2D 00 64 FD | 	ret
28f24                 | 
28f24                 | _fatfs_cc_check_fs
28f24     04 4A 05 F6 | 	mov	COUNT_, #4
28f28     A8 00 A0 FD | 	call	#pushregs_
28f2c     09 1F 02 F6 | 	mov	local01, arg01
28f30     03 1E 06 F1 | 	add	local01, #3
28f34     0F 01 48 FC | 	wrbyte	#0, local01
28f38     2D 1E 06 F1 | 	add	local01, #45
28f3c     FF FF FF FF 
28f40     0F FF 6B FC | 	wrlong	##-1, local01
28f44     30 1E 86 F1 | 	sub	local01, #48
28f48     0F 13 02 F6 | 	mov	arg01, local01
28f4c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
28f50     00 FA 0D F2 | 	cmp	result1, #0 wz
28f54     04 FA 05 56 |  if_ne	mov	result1, #4
28f58     94 01 90 5D |  if_ne	jmp	#LR__4194
28f5c     34 1E 06 F1 | 	add	local01, #52
28f60     0F 13 02 F6 | 	mov	arg01, local01
28f64     FE 13 06 F1 | 	add	arg01, #510
28f68                 | ' {
28f68                 | ' 
28f68                 | ' 	return *((WORD*)ptr);
28f68     09 21 E2 FA | 	rdword	local02, arg01
28f6c     0F 23 C2 FA | 	rdbyte	local03, local01
28f70     34 1E 86 F1 | 	sub	local01, #52
28f74     11 25 E2 F8 | 	getbyte	local04, local03, #0
28f78     EB 24 0E F2 | 	cmp	local04, #235 wz
28f7c     11 17 02 56 |  if_ne	mov	arg03, local03
28f80     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
28f84     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
28f88     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
28f8c     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
28f90     44 01 90 5D |  if_ne	jmp	#LR__4193
28f94     10 25 32 F9 | 	getword	local04, local02, #0
28f98     55 00 00 FF 
28f9c     55 24 0E F2 | 	cmp	local04, ##43605 wz
28fa0     2C 00 90 5D |  if_ne	jmp	#LR__4190
28fa4     34 1E 06 F1 | 	add	local01, #52
28fa8     0F 13 02 F6 | 	mov	arg01, local01
28fac     34 1E 86 F1 | 	sub	local01, #52
28fb0     52 12 06 F1 | 	add	arg01, #82
28fb4     72 01 00 FF 
28fb8     04 14 06 F6 | 	mov	arg02, ##@LR__4784
28fbc     08 16 06 F6 | 	mov	arg03, #8
28fc0     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
28fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
28fc8                 | ' 			return 0;
28fc8     00 FA 05 A6 |  if_e	mov	result1, #0
28fcc     20 01 90 AD |  if_e	jmp	#LR__4194
28fd0                 | LR__4190
28fd0     34 1E 06 F1 | 	add	local01, #52
28fd4     0F 13 02 F6 | 	mov	arg01, local01
28fd8     0B 12 06 F1 | 	add	arg01, #11
28fdc                 | ' {
28fdc                 | ' 
28fdc                 | ' 	return *((WORD*)ptr);
28fdc     09 FB E1 FA | 	rdword	result1, arg01
28fe0     0D 1E 06 F1 | 	add	local01, #13
28fe4     0F 23 C2 FA | 	rdbyte	local03, local01
28fe8     41 1E 86 F1 | 	sub	local01, #65
28fec     FD 24 32 F9 | 	getword	local04, result1, #0
28ff0     FD 14 32 F9 | 	getword	arg02, result1, #0
28ff4     01 14 86 F1 | 	sub	arg02, #1
28ff8     0A 25 CA F7 | 	test	local04, arg02 wz
28ffc     D8 00 90 5D |  if_ne	jmp	#LR__4192
29000     FD 14 32 F9 | 	getword	arg02, result1, #0
29004     01 00 00 FF 
29008     00 14 16 F2 | 	cmp	arg02, ##512 wc
2900c     C8 00 90 CD |  if_b	jmp	#LR__4192
29010     FD 14 32 F9 | 	getword	arg02, result1, #0
29014     01 00 00 FF 
29018     01 14 16 F2 | 	cmp	arg02, ##513 wc
2901c     B8 00 90 3D |  if_ae	jmp	#LR__4192
29020     11 13 02 F6 | 	mov	arg01, local03
29024     07 12 4E F7 | 	zerox	arg01, #7 wz
29028     AC 00 90 AD |  if_e	jmp	#LR__4192
2902c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
29030     11 23 E2 F8 | 	getbyte	local03, local03, #0
29034     01 22 86 F1 | 	sub	local03, #1
29038     11 13 CA F7 | 	test	arg01, local03 wz
2903c     98 00 90 5D |  if_ne	jmp	#LR__4192
29040     34 1E 06 F1 | 	add	local01, #52
29044     0F 13 02 F6 | 	mov	arg01, local01
29048     34 1E 86 F1 | 	sub	local01, #52
2904c     0E 12 06 F1 | 	add	arg01, #14
29050                 | ' {
29050                 | ' 
29050                 | ' 	return *((WORD*)ptr);
29050     09 FB E9 FA | 	rdword	result1, arg01 wz
29054     80 00 90 AD |  if_e	jmp	#LR__4192
29058     44 1E 06 F1 | 	add	local01, #68
2905c     0F 13 C2 FA | 	rdbyte	arg01, local01
29060     44 1E 86 F1 | 	sub	local01, #68
29064     01 12 86 F1 | 	sub	arg01, #1
29068     02 12 16 F2 | 	cmp	arg01, #2 wc
2906c     68 00 90 3D |  if_ae	jmp	#LR__4192
29070     34 1E 06 F1 | 	add	local01, #52
29074     0F 13 02 F6 | 	mov	arg01, local01
29078     34 1E 86 F1 | 	sub	local01, #52
2907c     11 12 06 F1 | 	add	arg01, #17
29080                 | ' {
29080                 | ' 
29080                 | ' 	return *((WORD*)ptr);
29080     09 FB E9 FA | 	rdword	result1, arg01 wz
29084     50 00 90 AD |  if_e	jmp	#LR__4192
29088     34 1E 06 F1 | 	add	local01, #52
2908c     0F 13 02 F6 | 	mov	arg01, local01
29090     34 1E 86 F1 | 	sub	local01, #52
29094     13 12 06 F1 | 	add	arg01, #19
29098                 | ' {
29098                 | ' 
29098                 | ' 	return *((WORD*)ptr);
29098     09 FB E1 FA | 	rdword	result1, arg01
2909c     FD 22 32 F9 | 	getword	local03, result1, #0
290a0     80 22 16 F2 | 	cmp	local03, #128 wc
290a4     20 00 90 3D |  if_ae	jmp	#LR__4191
290a8     34 1E 06 F1 | 	add	local01, #52
290ac     0F 13 02 F6 | 	mov	arg01, local01
290b0     34 1E 86 F1 | 	sub	local01, #52
290b4     20 12 06 F1 | 	add	arg01, #32
290b8                 | ' {
290b8                 | ' 
290b8                 | ' 	return *((DWORD*)ptr);
290b8     09 FB 01 FB | 	rdlong	result1, arg01
290bc     80 00 00 FF 
290c0     00 FA 15 F2 | 	cmp	result1, ##65536 wc
290c4     10 00 90 CD |  if_b	jmp	#LR__4192
290c8                 | LR__4191
290c8     4A 1E 06 F1 | 	add	local01, #74
290cc                 | ' {
290cc                 | ' 
290cc                 | ' 	return *((WORD*)ptr);
290cc     0F FB E9 FA | 	rdword	result1, local01 wz
290d0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
290d0                 | ' 			&& ld_word(fs->win +  14 ) != 0
290d0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
290d0                 | ' 			&& ld_word(fs->win +  17 ) != 0
290d0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
290d0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
290d0                 | ' 				return 0;
290d0     00 FA 05 56 |  if_ne	mov	result1, #0
290d4     18 00 90 5D |  if_ne	jmp	#LR__4194
290d8                 | LR__4192
290d8                 | LR__4193
290d8                 | ' 		}
290d8                 | ' 	}
290d8                 | ' 	return sign == 0xAA55 ? 2 : 3;
290d8     10 23 32 F9 | 	getword	local03, local02, #0
290dc     55 00 00 FF 
290e0     55 22 0E F2 | 	cmp	local03, ##43605 wz
290e4     02 24 06 A6 |  if_e	mov	local04, #2
290e8     03 24 06 56 |  if_ne	mov	local04, #3
290ec     12 FB 01 F6 | 	mov	result1, local04
290f0                 | LR__4194
290f0     A7 F0 03 F6 | 	mov	ptra, fp
290f4     B2 00 A0 FD | 	call	#popregs_
290f8                 | _fatfs_cc_check_fs_ret
290f8     2D 00 64 FD | 	ret
290fc                 | 
290fc                 | _fatfs_cc_find_volume
290fc     05 4A 05 F6 | 	mov	COUNT_, #5
29100     A8 00 A0 FD | 	call	#pushregs_
29104     24 F0 07 F1 | 	add	ptra, #36
29108     09 1F 02 F6 | 	mov	local01, arg01
2910c     0A 21 02 F6 | 	mov	local02, arg02
29110     0F 13 02 F6 | 	mov	arg01, local01
29114     00 14 06 F6 | 	mov	arg02, #0
29118     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2911c     02 FA 0D F2 | 	cmp	result1, #2 wz
29120     0C 00 90 AD |  if_e	jmp	#LR__4200
29124     03 FA 15 F2 | 	cmp	result1, #3 wc
29128     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2912c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4208
29130                 | LR__4200
29130                 | ' 	for (i = 0; i < 4; i++) {
29130     00 22 06 F6 | 	mov	local03, #0
29134     97 26 48 FB | 	callpa	#(@LR__4202-@LR__4201)>>2,fcache_load_ptr_
29138                 | LR__4201
29138     04 22 16 F2 | 	cmp	local03, #4 wc
2913c     44 00 90 3D |  if_ae	jmp	#LR__4203
29140     11 25 02 F6 | 	mov	local04, local03
29144     02 24 66 F0 | 	shl	local04, #2
29148     14 4E 05 F1 | 	add	fp, #20
2914c     A7 24 02 F1 | 	add	local04, fp
29150     34 1E 06 F1 | 	add	local01, #52
29154     0F 13 02 F6 | 	mov	arg01, local01
29158     34 1E 86 F1 | 	sub	local01, #52
2915c     BE 13 06 F1 | 	add	arg01, #446
29160     11 15 02 F6 | 	mov	arg02, local03
29164     04 14 66 F0 | 	shl	arg02, #4
29168     0A 13 02 F1 | 	add	arg01, arg02
2916c     08 12 06 F1 | 	add	arg01, #8
29170                 | ' {
29170                 | ' 
29170                 | ' 	return *((DWORD*)ptr);
29170     09 FB 01 FB | 	rdlong	result1, arg01
29174     14 4E 85 F1 | 	sub	fp, #20
29178     12 FB 61 FC | 	wrlong	result1, local04
2917c     01 22 06 F1 | 	add	local03, #1
29180     B4 FF 9F FD | 	jmp	#LR__4201
29184                 | LR__4202
29184                 | LR__4203
29184     00 20 0E F2 | 	cmp	local02, #0 wz
29188     10 25 02 56 |  if_ne	mov	local04, local02
2918c     01 24 86 51 |  if_ne	sub	local04, #1
29190     00 24 06 A6 |  if_e	mov	local04, #0
29194     12 23 02 F6 | 	mov	local03, local04
29198                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
29198                 | ' 	}
29198                 | ' 	i = part ? part - 1 : 0;
29198                 | ' 	do {
29198                 | LR__4204
29198     11 25 02 F6 | 	mov	local04, local03
2919c     02 24 66 F0 | 	shl	local04, #2
291a0     14 4E 05 F1 | 	add	fp, #20
291a4     A7 24 02 F1 | 	add	local04, fp
291a8     12 25 0A FB | 	rdlong	local04, local04 wz
291ac     14 4E 85 F1 | 	sub	fp, #20
291b0     28 00 90 AD |  if_e	jmp	#LR__4205
291b4     11 25 02 F6 | 	mov	local04, local03
291b8     02 24 66 F0 | 	shl	local04, #2
291bc     14 4E 05 F1 | 	add	fp, #20
291c0     A7 24 02 F1 | 	add	local04, fp
291c4     12 15 02 FB | 	rdlong	arg02, local04
291c8     0F 13 02 F6 | 	mov	arg01, local01
291cc     14 4E 85 F1 | 	sub	fp, #20
291d0     50 FD BF FD | 	call	#_fatfs_cc_check_fs
291d4     FD 24 02 F6 | 	mov	local04, result1
291d8     04 00 90 FD | 	jmp	#LR__4206
291dc                 | LR__4205
291dc     03 24 06 F6 | 	mov	local04, #3
291e0                 | LR__4206
291e0     12 27 02 F6 | 	mov	local05, local04
291e4     00 20 0E F2 | 	cmp	local02, #0 wz
291e8     02 26 16 A2 |  if_e	cmp	local05, #2 wc
291ec     0C 00 90 8D |  if_c_and_z	jmp	#LR__4207
291f0     01 22 06 A1 |  if_e	add	local03, #1
291f4     04 22 16 A2 |  if_e	cmp	local03, #4 wc
291f8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4204
291fc                 | LR__4207
291fc                 | ' 	return fmt;
291fc     13 FB 01 F6 | 	mov	result1, local05
29200                 | LR__4208
29200     A7 F0 03 F6 | 	mov	ptra, fp
29204     B2 00 A0 FD | 	call	#popregs_
29208                 | _fatfs_cc_find_volume_ret
29208     2D 00 64 FD | 	ret
2920c                 | 
2920c                 | _fatfs_cc_mount_volume
2920c     0B 4A 05 F6 | 	mov	COUNT_, #11
29210     A8 00 A0 FD | 	call	#pushregs_
29214     0A 1F 02 F6 | 	mov	local01, arg02
29218     0B 21 02 F6 | 	mov	local02, arg03
2921c     0F 01 68 FC | 	wrlong	#0, local01
29220     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
29224     FD 22 02 F6 | 	mov	local03, result1
29228     00 22 56 F2 | 	cmps	local03, #0 wc
2922c     0B FA 05 C6 |  if_b	mov	result1, #11
29230     3C 05 90 CD |  if_b	jmp	#LR__4220
29234     11 17 02 F6 | 	mov	arg03, local03
29238     02 16 66 F0 | 	shl	arg03, #2
2923c     F2 16 02 F1 | 	add	arg03, objptr
29240     0B 25 0A FB | 	rdlong	local04, arg03 wz
29244     0C FA 05 A6 |  if_e	mov	result1, #12
29248     24 05 90 AD |  if_e	jmp	#LR__4220
2924c     0F 25 62 FC | 	wrlong	local04, local01
29250     10 21 E2 F8 | 	getbyte	local02, local02, #0
29254     FE 20 06 F5 | 	and	local02, #254
29258     12 17 CA FA | 	rdbyte	arg03, local04 wz
2925c     4C 00 90 AD |  if_e	jmp	#LR__4211
29260     01 24 06 F1 | 	add	local04, #1
29264     12 13 CA FA | 	rdbyte	arg01, local04 wz
29268     01 24 86 F1 | 	sub	local04, #1
2926c     01 FA 05 56 |  if_ne	mov	result1, #1
29270                 | ' 
29270                 | ' 	return Stat;
29270     01 00 00 AF 
29274     20 E4 05 A1 |  if_e	add	objptr, ##544
29278     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2927c     01 00 00 AF 
29280     20 E4 85 A1 |  if_e	sub	objptr, ##544
29284     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
29288     01 16 CE F7 | 	test	arg03, #1 wz
2928c     1C 00 90 5D |  if_ne	jmp	#LR__4210
29290     00 20 0E F2 | 	cmp	local02, #0 wz
29294     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
29298     04 FA CD 57 |  if_ne	test	result1, #4 wz
2929c                 | ' 				return FR_WRITE_PROTECTED;
2929c     0A FA 05 56 |  if_ne	mov	result1, #10
292a0     CC 04 90 5D |  if_ne	jmp	#LR__4220
292a4                 | ' 			}
292a4                 | ' 			return FR_OK;
292a4     00 FA 05 F6 | 	mov	result1, #0
292a8     C4 04 90 FD | 	jmp	#LR__4220
292ac                 | LR__4210
292ac                 | LR__4211
292ac     12 01 48 FC | 	wrbyte	#0, local04
292b0     01 24 06 F1 | 	add	local04, #1
292b4     12 23 42 FC | 	wrbyte	local03, local04
292b8     12 13 C2 FA | 	rdbyte	arg01, local04
292bc     01 24 86 F1 | 	sub	local04, #1
292c0     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
292c4     FD 16 02 F6 | 	mov	arg03, result1
292c8     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
292cc     01 26 CE F7 | 	test	local05, #1 wz
292d0                 | ' 		return FR_NOT_READY;
292d0     03 FA 05 56 |  if_ne	mov	result1, #3
292d4     98 04 90 5D |  if_ne	jmp	#LR__4220
292d8     00 20 0E F2 | 	cmp	local02, #0 wz
292dc     0B 27 02 56 |  if_ne	mov	local05, arg03
292e0     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
292e4     04 26 CE 57 |  if_ne	test	local05, #4 wz
292e8                 | ' 		return FR_WRITE_PROTECTED;
292e8     0A FA 05 56 |  if_ne	mov	result1, #10
292ec     80 04 90 5D |  if_ne	jmp	#LR__4220
292f0     12 13 02 F6 | 	mov	arg01, local04
292f4     00 14 06 F6 | 	mov	arg02, #0
292f8     00 FE BF FD | 	call	#_fatfs_cc_find_volume
292fc     FD 12 02 F6 | 	mov	arg01, result1
29300     04 12 0E F2 | 	cmp	arg01, #4 wz
29304     01 FA 05 A6 |  if_e	mov	result1, #1
29308     64 04 90 AD |  if_e	jmp	#LR__4220
2930c     02 12 16 F2 | 	cmp	arg01, #2 wc
29310     0D FA 05 36 |  if_ae	mov	result1, #13
29314     58 04 90 3D |  if_ae	jmp	#LR__4220
29318     30 24 06 F1 | 	add	local04, #48
2931c     12 29 02 FB | 	rdlong	local06, local04
29320     04 24 06 F1 | 	add	local04, #4
29324     12 13 02 F6 | 	mov	arg01, local04
29328     34 24 86 F1 | 	sub	local04, #52
2932c     0B 12 06 F1 | 	add	arg01, #11
29330                 | ' {
29330                 | ' 
29330                 | ' 	return *((WORD*)ptr);
29330     09 FB E1 FA | 	rdword	result1, arg01
29334     01 00 00 FF 
29338     00 FA 0D F2 | 	cmp	result1, ##512 wz
2933c     0D FA 05 56 |  if_ne	mov	result1, #13
29340     2C 04 90 5D |  if_ne	jmp	#LR__4220
29344     34 24 06 F1 | 	add	local04, #52
29348     12 13 02 F6 | 	mov	arg01, local04
2934c     34 24 86 F1 | 	sub	local04, #52
29350     16 12 06 F1 | 	add	arg01, #22
29354                 | ' {
29354                 | ' 
29354                 | ' 	return *((WORD*)ptr);
29354     09 FB E1 FA | 	rdword	result1, arg01
29358     FD 2A 0A F6 | 	mov	local07, result1 wz
2935c     18 00 90 5D |  if_ne	jmp	#LR__4212
29360     34 24 06 F1 | 	add	local04, #52
29364     12 13 02 F6 | 	mov	arg01, local04
29368     34 24 86 F1 | 	sub	local04, #52
2936c     24 12 06 F1 | 	add	arg01, #36
29370                 | ' {
29370                 | ' 
29370                 | ' 	return *((DWORD*)ptr);
29370     09 FB 01 FB | 	rdlong	result1, arg01
29374     FD 2A 02 F6 | 	mov	local07, result1
29378                 | LR__4212
29378     1C 24 06 F1 | 	add	local04, #28
2937c     12 2B 62 FC | 	wrlong	local07, local04
29380     28 24 06 F1 | 	add	local04, #40
29384     12 27 C2 FA | 	rdbyte	local05, local04
29388     42 24 86 F1 | 	sub	local04, #66
2938c     12 27 42 FC | 	wrbyte	local05, local04
29390     12 27 C2 FA | 	rdbyte	local05, local04
29394     02 24 86 F1 | 	sub	local04, #2
29398     01 26 0E F2 | 	cmp	local05, #1 wz
2939c     02 24 06 51 |  if_ne	add	local04, #2
293a0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
293a4     02 24 86 51 |  if_ne	sub	local04, #2
293a8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
293ac     0D FA 05 56 |  if_ne	mov	result1, #13
293b0     BC 03 90 5D |  if_ne	jmp	#LR__4220
293b4     02 24 06 F1 | 	add	local04, #2
293b8     12 27 C2 FA | 	rdbyte	local05, local04
293bc     13 2B 02 FD | 	qmul	local07, local05
293c0     3F 24 06 F1 | 	add	local04, #63
293c4     12 27 C2 FA | 	rdbyte	local05, local04
293c8     37 24 86 F1 | 	sub	local04, #55
293cc     12 27 52 FC | 	wrword	local05, local04
293d0     12 27 EA FA | 	rdword	local05, local04 wz
293d4     0A 24 86 F1 | 	sub	local04, #10
293d8     18 2A 62 FD | 	getqx	local07
293dc     20 00 90 AD |  if_e	jmp	#LR__4213
293e0     0A 24 06 F1 | 	add	local04, #10
293e4     12 27 E2 FA | 	rdword	local05, local04
293e8     13 23 32 F9 | 	getword	local03, local05, #0
293ec     0A 24 86 F1 | 	sub	local04, #10
293f0     13 27 32 F9 | 	getword	local05, local05, #0
293f4     01 26 86 F1 | 	sub	local05, #1
293f8     13 23 CA F7 | 	test	local03, local05 wz
293fc     08 00 90 AD |  if_e	jmp	#LR__4214
29400                 | LR__4213
29400     0D FA 05 F6 | 	mov	result1, #13
29404     68 03 90 FD | 	jmp	#LR__4220
29408                 | LR__4214
29408     34 24 06 F1 | 	add	local04, #52
2940c     12 13 02 F6 | 	mov	arg01, local04
29410     11 12 06 F1 | 	add	arg01, #17
29414                 | ' {
29414                 | ' 
29414                 | ' 	return *((WORD*)ptr);
29414     09 FB E1 FA | 	rdword	result1, arg01
29418     2C 24 86 F1 | 	sub	local04, #44
2941c     12 FB 51 FC | 	wrword	result1, local04
29420     12 27 E2 FA | 	rdword	local05, local04
29424     08 24 86 F1 | 	sub	local04, #8
29428     13 13 52 F6 | 	abs	arg01, local05 wc
2942c     09 13 42 F8 | 	getnib	arg01, arg01, #0
29430     09 13 8A F6 | 	negc	arg01, arg01 wz
29434     0D FA 05 56 |  if_ne	mov	result1, #13
29438     34 03 90 5D |  if_ne	jmp	#LR__4220
2943c     34 24 06 F1 | 	add	local04, #52
29440     12 13 02 F6 | 	mov	arg01, local04
29444     34 24 86 F1 | 	sub	local04, #52
29448     13 12 06 F1 | 	add	arg01, #19
2944c                 | ' {
2944c                 | ' 
2944c                 | ' 	return *((WORD*)ptr);
2944c     09 FB E1 FA | 	rdword	result1, arg01
29450     FD 2C 0A F6 | 	mov	local08, result1 wz
29454     34 24 06 A1 |  if_e	add	local04, #52
29458     12 13 02 A6 |  if_e	mov	arg01, local04
2945c     34 24 86 A1 |  if_e	sub	local04, #52
29460     20 12 06 A1 |  if_e	add	arg01, #32
29464                 | ' {
29464                 | ' 
29464                 | ' 	return *((DWORD*)ptr);
29464     09 2D 02 AB |  if_e	rdlong	local08, arg01
29468     34 24 06 F1 | 	add	local04, #52
2946c     12 13 02 F6 | 	mov	arg01, local04
29470     34 24 86 F1 | 	sub	local04, #52
29474     0E 12 06 F1 | 	add	arg01, #14
29478                 | ' {
29478                 | ' 
29478                 | ' 	return *((WORD*)ptr);
29478     09 FB E1 FA | 	rdword	result1, arg01
2947c     FD 12 02 F6 | 	mov	arg01, result1
29480     09 27 02 F6 | 	mov	local05, arg01
29484     0F 26 4E F7 | 	zerox	local05, #15 wz
29488     0D FA 05 A6 |  if_e	mov	result1, #13
2948c     E0 02 90 AD |  if_e	jmp	#LR__4220
29490     09 2F 32 F9 | 	getword	local09, arg01, #0
29494     15 2F 02 F1 | 	add	local09, local07
29498     08 24 06 F1 | 	add	local04, #8
2949c     12 27 E2 FA | 	rdword	local05, local04
294a0     08 24 86 F1 | 	sub	local04, #8
294a4     13 27 52 F6 | 	abs	local05, local05 wc
294a8     04 26 46 F0 | 	shr	local05, #4
294ac     13 2F 82 F3 | 	sumc	local09, local05
294b0     17 2D 12 F2 | 	cmp	local08, local09 wc
294b4     0D FA 05 C6 |  if_b	mov	result1, #13
294b8     B4 02 90 CD |  if_b	jmp	#LR__4220
294bc     17 2D 82 F1 | 	sub	local08, local09
294c0     0A 24 06 F1 | 	add	local04, #10
294c4     12 27 E2 FA | 	rdword	local05, local04
294c8     13 2D 12 FD | 	qdiv	local08, local05
294cc     0A 24 86 F1 | 	sub	local04, #10
294d0     18 26 62 FD | 	getqx	local05
294d4     00 26 0E F2 | 	cmp	local05, #0 wz
294d8     0D FA 05 A6 |  if_e	mov	result1, #13
294dc     90 02 90 AD |  if_e	jmp	#LR__4220
294e0     00 30 06 F6 | 	mov	local10, #0
294e4     FF FF 07 FF 
294e8     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
294ec     03 30 06 C6 |  if_b	mov	local10, #3
294f0     7F 00 00 FF 
294f4     F6 27 16 F2 | 	cmp	local05, ##65526 wc
294f8     02 30 06 C6 |  if_b	mov	local10, #2
294fc     07 00 00 FF 
29500     F6 27 16 F2 | 	cmp	local05, ##4086 wc
29504     01 30 06 C6 |  if_b	mov	local10, #1
29508     00 30 0E F2 | 	cmp	local10, #0 wz
2950c     0D FA 05 A6 |  if_e	mov	result1, #13
29510     5C 02 90 AD |  if_e	jmp	#LR__4220
29514     02 26 06 F1 | 	add	local05, #2
29518     18 24 06 F1 | 	add	local04, #24
2951c     12 27 62 FC | 	wrlong	local05, local04
29520     08 24 06 F1 | 	add	local04, #8
29524     12 29 62 FC | 	wrlong	local06, local04
29528     14 27 02 F6 | 	mov	local05, local06
2952c     09 13 32 F9 | 	getword	arg01, arg01, #0
29530     09 27 02 F1 | 	add	local05, arg01
29534     04 24 06 F1 | 	add	local04, #4
29538     12 27 62 FC | 	wrlong	local05, local04
2953c     14 27 02 F6 | 	mov	local05, local06
29540     17 27 02 F1 | 	add	local05, local09
29544     08 24 06 F1 | 	add	local04, #8
29548     12 27 62 FC | 	wrlong	local05, local04
2954c     2C 24 86 F1 | 	sub	local04, #44
29550     03 30 0E F2 | 	cmp	local10, #3 wz
29554     5C 00 90 5D |  if_ne	jmp	#LR__4215
29558     34 24 06 F1 | 	add	local04, #52
2955c     12 13 02 F6 | 	mov	arg01, local04
29560     34 24 86 F1 | 	sub	local04, #52
29564     2A 12 06 F1 | 	add	arg01, #42
29568                 | ' {
29568                 | ' 
29568                 | ' 	return *((WORD*)ptr);
29568     09 FB E9 FA | 	rdword	result1, arg01 wz
2956c     0D FA 05 56 |  if_ne	mov	result1, #13
29570     FC 01 90 5D |  if_ne	jmp	#LR__4220
29574     08 24 06 F1 | 	add	local04, #8
29578     12 27 EA FA | 	rdword	local05, local04 wz
2957c     08 24 86 F1 | 	sub	local04, #8
29580     0D FA 05 56 |  if_ne	mov	result1, #13
29584     E8 01 90 5D |  if_ne	jmp	#LR__4220
29588     34 24 06 F1 | 	add	local04, #52
2958c     12 13 02 F6 | 	mov	arg01, local04
29590     2C 12 06 F1 | 	add	arg01, #44
29594                 | ' {
29594                 | ' 
29594                 | ' 	return *((DWORD*)ptr);
29594     09 FB 01 FB | 	rdlong	result1, arg01
29598     0C 24 86 F1 | 	sub	local04, #12
2959c     12 FB 61 FC | 	wrlong	result1, local04
295a0     10 24 86 F1 | 	sub	local04, #16
295a4     12 33 02 FB | 	rdlong	local11, local04
295a8     18 24 86 F1 | 	sub	local04, #24
295ac     02 32 66 F0 | 	shl	local11, #2
295b0     6C 00 90 FD | 	jmp	#LR__4217
295b4                 | LR__4215
295b4     08 24 06 F1 | 	add	local04, #8
295b8     12 27 EA FA | 	rdword	local05, local04 wz
295bc     08 24 86 F1 | 	sub	local04, #8
295c0     0D FA 05 A6 |  if_e	mov	result1, #13
295c4     A8 01 90 AD |  if_e	jmp	#LR__4220
295c8     24 24 06 F1 | 	add	local04, #36
295cc     12 27 02 FB | 	rdlong	local05, local04
295d0     15 27 02 F1 | 	add	local05, local07
295d4     04 24 06 F1 | 	add	local04, #4
295d8     12 27 62 FC | 	wrlong	local05, local04
295dc     28 24 86 F1 | 	sub	local04, #40
295e0     02 30 0E F2 | 	cmp	local10, #2 wz
295e4     18 24 06 A1 |  if_e	add	local04, #24
295e8     12 27 02 AB |  if_e	rdlong	local05, local04
295ec     18 24 86 A1 |  if_e	sub	local04, #24
295f0     01 26 66 A0 |  if_e	shl	local05, #1
295f4     24 00 90 AD |  if_e	jmp	#LR__4216
295f8     18 24 06 F1 | 	add	local04, #24
295fc     12 33 02 FB | 	rdlong	local11, local04
29600     19 27 02 F6 | 	mov	local05, local11
29604     01 26 66 F0 | 	shl	local05, #1
29608     19 27 02 F1 | 	add	local05, local11
2960c     01 26 46 F0 | 	shr	local05, #1
29610     18 24 86 F1 | 	sub	local04, #24
29614     01 32 06 F5 | 	and	local11, #1
29618     19 27 02 F1 | 	add	local05, local11
2961c                 | LR__4216
2961c     13 33 02 F6 | 	mov	local11, local05
29620                 | LR__4217
29620     FF 33 06 F1 | 	add	local11, #511
29624     09 32 46 F0 | 	shr	local11, #9
29628     1C 24 06 F1 | 	add	local04, #28
2962c     12 17 02 FB | 	rdlong	arg03, local04
29630     1C 24 86 F1 | 	sub	local04, #28
29634     19 17 12 F2 | 	cmp	arg03, local11 wc
29638     0D FA 05 C6 |  if_b	mov	result1, #13
2963c     30 01 90 CD |  if_b	jmp	#LR__4220
29640     14 24 06 F1 | 	add	local04, #20
29644     FF FF FF FF 
29648     12 FF 6B FC | 	wrlong	##-1, local04
2964c     04 24 86 F1 | 	sub	local04, #4
29650     FF FF FF FF 
29654     12 FF 6B FC | 	wrlong	##-1, local04
29658     0C 24 86 F1 | 	sub	local04, #12
2965c     12 01 49 FC | 	wrbyte	#128, local04
29660     04 24 86 F1 | 	sub	local04, #4
29664     03 30 0E F2 | 	cmp	local10, #3 wz
29668     D0 00 90 5D |  if_ne	jmp	#LR__4219
2966c     34 24 06 F1 | 	add	local04, #52
29670     12 13 02 F6 | 	mov	arg01, local04
29674     34 24 86 F1 | 	sub	local04, #52
29678     30 12 06 F1 | 	add	arg01, #48
2967c                 | ' {
2967c                 | ' 
2967c                 | ' 	return *((WORD*)ptr);
2967c     09 FB E1 FA | 	rdword	result1, arg01
29680     FD 26 32 F9 | 	getword	local05, result1, #0
29684     01 26 0E F2 | 	cmp	local05, #1 wz
29688     B0 00 90 5D |  if_ne	jmp	#LR__4219
2968c     01 28 06 F1 | 	add	local06, #1
29690     12 13 02 F6 | 	mov	arg01, local04
29694     14 15 02 F6 | 	mov	arg02, local06
29698     CC CD BF FD | 	call	#_fatfs_cc_move_window
2969c     00 FA 0D F2 | 	cmp	result1, #0 wz
296a0     98 00 90 5D |  if_ne	jmp	#LR__4219
296a4     04 24 06 F1 | 	add	local04, #4
296a8     12 01 48 FC | 	wrbyte	#0, local04
296ac     30 24 06 F1 | 	add	local04, #48
296b0     12 13 02 F6 | 	mov	arg01, local04
296b4     34 24 86 F1 | 	sub	local04, #52
296b8     FE 13 06 F1 | 	add	arg01, #510
296bc                 | ' {
296bc                 | ' 
296bc                 | ' 	return *((WORD*)ptr);
296bc     09 FB E1 FA | 	rdword	result1, arg01
296c0     FD 26 32 F9 | 	getword	local05, result1, #0
296c4     55 00 00 FF 
296c8     55 26 0E F2 | 	cmp	local05, ##43605 wz
296cc     34 24 06 A1 |  if_e	add	local04, #52
296d0     12 13 02 A6 |  if_e	mov	arg01, local04
296d4     34 24 86 A1 |  if_e	sub	local04, #52
296d8                 | ' {
296d8                 | ' 
296d8                 | ' 	return *((DWORD*)ptr);
296d8     09 FB 01 AB |  if_e	rdlong	result1, arg01
296dc     A9 B0 20 AF 
296e0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
296e4     54 00 90 5D |  if_ne	jmp	#LR__4218
296e8     34 24 06 F1 | 	add	local04, #52
296ec     12 13 02 F6 | 	mov	arg01, local04
296f0     34 24 86 F1 | 	sub	local04, #52
296f4     E4 13 06 F1 | 	add	arg01, #484
296f8                 | ' {
296f8                 | ' 
296f8                 | ' 	return *((DWORD*)ptr);
296f8     09 FB 01 FB | 	rdlong	result1, arg01
296fc     B9 A0 30 FF 
29700     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
29704     34 00 90 5D |  if_ne	jmp	#LR__4218
29708     34 24 06 F1 | 	add	local04, #52
2970c     12 13 02 F6 | 	mov	arg01, local04
29710     E8 13 06 F1 | 	add	arg01, #488
29714                 | ' {
29714                 | ' 
29714                 | ' 	return *((DWORD*)ptr);
29714     09 FB 01 FB | 	rdlong	result1, arg01
29718     20 24 86 F1 | 	sub	local04, #32
2971c     12 FB 61 FC | 	wrlong	result1, local04
29720     20 24 06 F1 | 	add	local04, #32
29724     12 13 02 F6 | 	mov	arg01, local04
29728     EC 13 06 F1 | 	add	arg01, #492
2972c                 | ' {
2972c                 | ' 
2972c                 | ' 	return *((DWORD*)ptr);
2972c     09 FB 01 FB | 	rdlong	result1, arg01
29730     24 24 86 F1 | 	sub	local04, #36
29734     12 FB 61 FC | 	wrlong	result1, local04
29738     10 24 86 F1 | 	sub	local04, #16
2973c                 | LR__4218
2973c                 | LR__4219
2973c     12 31 42 FC | 	wrbyte	local10, local04
29740     04 E4 05 F1 | 	add	objptr, #4
29744     F2 26 E2 FA | 	rdword	local05, objptr
29748     01 26 06 F1 | 	add	local05, #1
2974c     F2 26 52 FC | 	wrword	local05, objptr
29750     F2 32 E2 FA | 	rdword	local11, objptr
29754     06 24 06 F1 | 	add	local04, #6
29758     12 33 52 FC | 	wrword	local11, local04
2975c     04 E4 05 F1 | 	add	objptr, #4
29760     06 24 06 F1 | 	add	local04, #6
29764     12 E5 61 FC | 	wrlong	objptr, local04
29768                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
29768                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
29768                 | ' 			{
29768                 | ' 
29768                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
29768                 | ' 
29768                 | ' 
29768                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
29768                 | ' 
29768                 | ' 			}
29768                 | ' 		}
29768                 | ' 
29768                 | ' 
29768                 | ' 	}
29768                 | ' 
29768                 | ' 	fs->fs_type = (BYTE)fmt;
29768                 | ' 	fs->id = ++Fsid;
29768                 | ' 
29768                 | ' 	fs->lfnbuf = LfnBuf;
29768                 | ' #line 3567 "ff.c"
29768                 | ' 	return FR_OK;
29768     00 FA 05 F6 | 	mov	result1, #0
2976c     08 E4 85 F1 | 	sub	objptr, #8
29770                 | LR__4220
29770     A7 F0 03 F6 | 	mov	ptra, fp
29774     B2 00 A0 FD | 	call	#popregs_
29778                 | _fatfs_cc_mount_volume_ret
29778     2D 00 64 FD | 	ret
2977c                 | 
2977c                 | _fatfs_cc_validate
2977c     09 01 0A F6 | 	mov	_var01, arg01 wz
29780     09 02 06 F6 | 	mov	_var02, #9
29784     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
29788     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2978c     50 00 90 AD |  if_e	jmp	#LR__4230
29790     04 00 06 F1 | 	add	_var01, #4
29794     00 07 E2 FA | 	rdword	_var04, _var01
29798     04 00 86 F1 | 	sub	_var01, #4
2979c     00 13 02 FB | 	rdlong	arg01, _var01
297a0     06 12 06 F1 | 	add	arg01, #6
297a4     09 FB E1 FA | 	rdword	result1, arg01
297a8     FD 06 0A F2 | 	cmp	_var04, result1 wz
297ac     30 00 90 5D |  if_ne	jmp	#LR__4230
297b0     00 07 02 FB | 	rdlong	_var04, _var01
297b4     01 06 06 F1 | 	add	_var04, #1
297b8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
297bc     01 FA 05 56 |  if_ne	mov	result1, #1
297c0                 | ' 
297c0                 | ' 	return Stat;
297c0     01 00 00 AF 
297c4     20 E4 05 A1 |  if_e	add	objptr, ##544
297c8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
297cc     01 00 00 AF 
297d0     20 E4 85 A1 |  if_e	sub	objptr, ##544
297d4     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
297d8     01 04 CE F7 | 	test	_var03, #1 wz
297dc     00 02 06 A6 |  if_e	mov	_var02, #0
297e0                 | LR__4230
297e0     00 02 0E F2 | 	cmp	_var02, #0 wz
297e4     00 05 02 AB |  if_e	rdlong	_var03, _var01
297e8     00 04 06 56 |  if_ne	mov	_var03, #0
297ec     0A 05 62 FC | 	wrlong	_var03, arg02
297f0                 | ' 			res = FR_OK;
297f0                 | ' 		}
297f0                 | ' 
297f0                 | ' 	}
297f0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
297f0                 | ' 	return res;
297f0     01 FB 01 F6 | 	mov	result1, _var02
297f4                 | _fatfs_cc_validate_ret
297f4     2D 00 64 FD | 	ret
297f8                 | 
297f8                 | _fatfs_cc_f_mount
297f8     01 4A 05 F6 | 	mov	COUNT_, #1
297fc     A8 00 A0 FD | 	call	#pushregs_
29800     20 F0 07 F1 | 	add	ptra, #32
29804     04 4E 05 F1 | 	add	fp, #4
29808     A7 12 62 FC | 	wrlong	arg01, fp
2980c     04 4E 05 F1 | 	add	fp, #4
29810     A7 14 62 FC | 	wrlong	arg02, fp
29814     04 4E 05 F1 | 	add	fp, #4
29818     A7 16 42 FC | 	wrbyte	arg03, fp
2981c     04 4E 85 F1 | 	sub	fp, #4
29820     A7 16 02 FB | 	rdlong	arg03, fp
29824     14 4E 05 F1 | 	add	fp, #20
29828     A7 16 62 FC | 	wrlong	arg03, fp
2982c     A7 12 02 F6 | 	mov	arg01, fp
29830     1C 4E 85 F1 | 	sub	fp, #28
29834     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
29838     14 4E 05 F1 | 	add	fp, #20
2983c     A7 FA 61 FC | 	wrlong	result1, fp
29840     14 4E 85 F1 | 	sub	fp, #20
29844     00 FA 55 F2 | 	cmps	result1, #0 wc
29848     0B FA 05 C6 |  if_b	mov	result1, #11
2984c     C0 00 90 CD |  if_b	jmp	#LR__4241
29850     14 4E 05 F1 | 	add	fp, #20
29854     A7 16 02 FB | 	rdlong	arg03, fp
29858     02 16 66 F0 | 	shl	arg03, #2
2985c     F2 16 02 F1 | 	add	arg03, objptr
29860     0B 17 0A FB | 	rdlong	arg03, arg03 wz
29864     04 4E 85 F1 | 	sub	fp, #4
29868     A7 16 62 FC | 	wrlong	arg03, fp
2986c     10 4E 85 F1 | 	sub	fp, #16
29870     28 00 90 AD |  if_e	jmp	#LR__4240
29874     10 4E 05 F1 | 	add	fp, #16
29878     A7 16 02 FB | 	rdlong	arg03, fp
2987c     10 4E 85 F1 | 	sub	fp, #16
29880     01 16 06 F1 | 	add	arg03, #1
29884     0B 13 C2 FA | 	rdbyte	arg01, arg03
29888     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2988c     10 4E 05 F1 | 	add	fp, #16
29890     A7 16 02 FB | 	rdlong	arg03, fp
29894     10 4E 85 F1 | 	sub	fp, #16
29898     0B 01 48 FC | 	wrbyte	#0, arg03
2989c                 | LR__4240
2989c     04 4E 05 F1 | 	add	fp, #4
298a0     A7 1E 0A FB | 	rdlong	local01, fp wz
298a4     04 4E 85 F1 | 	sub	fp, #4
298a8     04 4E 05 51 |  if_ne	add	fp, #4
298ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
298b0     04 4E 85 51 |  if_ne	sub	fp, #4
298b4     0F 01 48 5C |  if_ne	wrbyte	#0, local01
298b8     14 4E 05 F1 | 	add	fp, #20
298bc     A7 1E 02 FB | 	rdlong	local01, fp
298c0     02 1E 66 F0 | 	shl	local01, #2
298c4     F2 1E 02 F1 | 	add	local01, objptr
298c8     10 4E 85 F1 | 	sub	fp, #16
298cc     A7 16 02 FB | 	rdlong	arg03, fp
298d0     0F 17 62 FC | 	wrlong	arg03, local01
298d4     08 4E 05 F1 | 	add	fp, #8
298d8     A7 1E CA FA | 	rdbyte	local01, fp wz
298dc     0C 4E 85 F1 | 	sub	fp, #12
298e0     00 FA 05 A6 |  if_e	mov	result1, #0
298e4     28 00 90 AD |  if_e	jmp	#LR__4241
298e8     08 4E 05 F1 | 	add	fp, #8
298ec     A7 12 02 F6 | 	mov	arg01, fp
298f0     04 4E 85 F1 | 	sub	fp, #4
298f4     A7 14 02 F6 | 	mov	arg02, fp
298f8     04 4E 85 F1 | 	sub	fp, #4
298fc     00 16 06 F6 | 	mov	arg03, #0
29900     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
29904     18 4E 05 F1 | 	add	fp, #24
29908     A7 FA 61 FC | 	wrlong	result1, fp
2990c                 | ' 
2990c                 | ' 	res = mount_volume(&path, &fs, 0);
2990c                 | ' 	return res ;
2990c     18 4E 85 F1 | 	sub	fp, #24
29910                 | LR__4241
29910     A7 F0 03 F6 | 	mov	ptra, fp
29914     B2 00 A0 FD | 	call	#popregs_
29918                 | _fatfs_cc_f_mount_ret
29918     2D 00 64 FD | 	ret
2991c                 | 
2991c                 | _fatfs_cc_f_open
2991c     02 4A 05 F6 | 	mov	COUNT_, #2
29920     A8 00 A0 FD | 	call	#pushregs_
29924     60 F0 07 F1 | 	add	ptra, #96
29928     04 4E 05 F1 | 	add	fp, #4
2992c     A7 12 62 FC | 	wrlong	arg01, fp
29930     04 4E 05 F1 | 	add	fp, #4
29934     A7 14 62 FC | 	wrlong	arg02, fp
29938     04 4E 05 F1 | 	add	fp, #4
2993c     A7 16 42 FC | 	wrbyte	arg03, fp
29940     08 4E 85 F1 | 	sub	fp, #8
29944     A7 18 0A FB | 	rdlong	arg04, fp wz
29948     04 4E 85 F1 | 	sub	fp, #4
2994c     09 FA 05 A6 |  if_e	mov	result1, #9
29950     98 06 90 AD |  if_e	jmp	#LR__4267
29954     0C 4E 05 F1 | 	add	fp, #12
29958     A7 18 C2 FA | 	rdbyte	arg04, fp
2995c     3F 18 06 F5 | 	and	arg04, #63
29960     A7 18 42 FC | 	wrbyte	arg04, fp
29964     04 4E 85 F1 | 	sub	fp, #4
29968     A7 12 02 F6 | 	mov	arg01, fp
2996c     3C 4E 05 F1 | 	add	fp, #60
29970     A7 14 02 F6 | 	mov	arg02, fp
29974     38 4E 85 F1 | 	sub	fp, #56
29978     A7 16 C2 FA | 	rdbyte	arg03, fp
2997c     0C 4E 85 F1 | 	sub	fp, #12
29980     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
29984     10 4E 05 F1 | 	add	fp, #16
29988     A7 FA 61 FC | 	wrlong	result1, fp
2998c     10 4E 85 F1 | 	sub	fp, #16
29990     00 FA 0D F2 | 	cmp	result1, #0 wz
29994     2C 06 90 5D |  if_ne	jmp	#LR__4266
29998     44 4E 05 F1 | 	add	fp, #68
2999c     A7 18 02 FB | 	rdlong	arg04, fp
299a0     30 4E 85 F1 | 	sub	fp, #48
299a4     A7 18 62 FC | 	wrlong	arg04, fp
299a8     A7 12 02 F6 | 	mov	arg01, fp
299ac     0C 4E 85 F1 | 	sub	fp, #12
299b0     A7 1E 02 FB | 	rdlong	local01, fp
299b4     08 4E 85 F1 | 	sub	fp, #8
299b8     0F 15 02 F6 | 	mov	arg02, local01
299bc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
299c0     10 4E 05 F1 | 	add	fp, #16
299c4     A7 FA 61 FC | 	wrlong	result1, fp
299c8     10 4E 85 F1 | 	sub	fp, #16
299cc     00 FA 0D F2 | 	cmp	result1, #0 wz
299d0     1C 00 90 5D |  if_ne	jmp	#LR__4250
299d4     3F 4E 05 F1 | 	add	fp, #63
299d8     A7 18 C2 FA | 	rdbyte	arg04, fp
299dc     3F 4E 85 F1 | 	sub	fp, #63
299e0     80 18 CE F7 | 	test	arg04, #128 wz
299e4     10 4E 05 51 |  if_ne	add	fp, #16
299e8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
299ec     10 4E 85 51 |  if_ne	sub	fp, #16
299f0                 | LR__4250
299f0     0C 4E 05 F1 | 	add	fp, #12
299f4     A7 18 C2 FA | 	rdbyte	arg04, fp
299f8     0C 4E 85 F1 | 	sub	fp, #12
299fc     1C 18 CE F7 | 	test	arg04, #28 wz
29a00     F0 01 90 AD |  if_e	jmp	#LR__4255
29a04     10 4E 05 F1 | 	add	fp, #16
29a08     A7 1E 0A FB | 	rdlong	local01, fp wz
29a0c     10 4E 85 F1 | 	sub	fp, #16
29a10     48 00 90 AD |  if_e	jmp	#LR__4252
29a14     10 4E 05 F1 | 	add	fp, #16
29a18     A7 18 02 FB | 	rdlong	arg04, fp
29a1c     10 4E 85 F1 | 	sub	fp, #16
29a20     04 18 0E F2 | 	cmp	arg04, #4 wz
29a24     1C 00 90 5D |  if_ne	jmp	#LR__4251
29a28     14 4E 05 F1 | 	add	fp, #20
29a2c     A7 12 02 F6 | 	mov	arg01, fp
29a30     14 4E 85 F1 | 	sub	fp, #20
29a34     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
29a38     10 4E 05 F1 | 	add	fp, #16
29a3c     A7 FA 61 FC | 	wrlong	result1, fp
29a40     10 4E 85 F1 | 	sub	fp, #16
29a44                 | LR__4251
29a44     0C 4E 05 F1 | 	add	fp, #12
29a48     A7 1E C2 FA | 	rdbyte	local01, fp
29a4c     08 1E 46 F5 | 	or	local01, #8
29a50     A7 1E 42 FC | 	wrbyte	local01, fp
29a54     0C 4E 85 F1 | 	sub	fp, #12
29a58     3C 00 90 FD | 	jmp	#LR__4254
29a5c                 | LR__4252
29a5c     1A 4E 05 F1 | 	add	fp, #26
29a60     A7 1E C2 FA | 	rdbyte	local01, fp
29a64     1A 4E 85 F1 | 	sub	fp, #26
29a68     11 1E CE F7 | 	test	local01, #17 wz
29a6c     10 4E 05 51 |  if_ne	add	fp, #16
29a70     A7 0E 68 5C |  if_ne	wrlong	#7, fp
29a74     10 4E 85 51 |  if_ne	sub	fp, #16
29a78     1C 00 90 5D |  if_ne	jmp	#LR__4253
29a7c     0C 4E 05 F1 | 	add	fp, #12
29a80     A7 1E C2 FA | 	rdbyte	local01, fp
29a84     0C 4E 85 F1 | 	sub	fp, #12
29a88     04 1E CE F7 | 	test	local01, #4 wz
29a8c     10 4E 05 51 |  if_ne	add	fp, #16
29a90     A7 10 68 5C |  if_ne	wrlong	#8, fp
29a94     10 4E 85 51 |  if_ne	sub	fp, #16
29a98                 | LR__4253
29a98                 | LR__4254
29a98     10 4E 05 F1 | 	add	fp, #16
29a9c     A7 1E 0A FB | 	rdlong	local01, fp wz
29aa0     10 4E 85 F1 | 	sub	fp, #16
29aa4     A8 01 90 5D |  if_ne	jmp	#LR__4258
29aa8     0C 4E 05 F1 | 	add	fp, #12
29aac     A7 1E C2 FA | 	rdbyte	local01, fp
29ab0     0C 4E 85 F1 | 	sub	fp, #12
29ab4     08 1E CE F7 | 	test	local01, #8 wz
29ab8     94 01 90 AD |  if_e	jmp	#LR__4258
29abc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
29ac0     54 4E 05 F1 | 	add	fp, #84
29ac4     A7 FA 61 FC | 	wrlong	result1, fp
29ac8     24 4E 85 F1 | 	sub	fp, #36
29acc     A7 12 02 FB | 	rdlong	arg01, fp
29ad0     0E 12 06 F1 | 	add	arg01, #14
29ad4     09 FB 61 FC | 	wrlong	result1, arg01
29ad8     A7 12 02 FB | 	rdlong	arg01, fp
29adc     16 12 06 F1 | 	add	arg01, #22
29ae0     24 4E 05 F1 | 	add	fp, #36
29ae4     A7 14 02 FB | 	rdlong	arg02, fp
29ae8     09 15 62 FC | 	wrlong	arg02, arg01
29aec     10 4E 85 F1 | 	sub	fp, #16
29af0     A7 12 02 FB | 	rdlong	arg01, fp
29af4     14 4E 85 F1 | 	sub	fp, #20
29af8     A7 14 02 FB | 	rdlong	arg02, fp
29afc     30 4E 85 F1 | 	sub	fp, #48
29b00     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
29b04     48 4E 05 F1 | 	add	fp, #72
29b08     A7 FA 61 FC | 	wrlong	result1, fp
29b0c     18 4E 85 F1 | 	sub	fp, #24
29b10     A7 1E 02 FB | 	rdlong	local01, fp
29b14     0B 1E 06 F1 | 	add	local01, #11
29b18     0F 41 48 FC | 	wrbyte	#32, local01
29b1c     14 4E 05 F1 | 	add	fp, #20
29b20     A7 12 02 FB | 	rdlong	arg01, fp
29b24     14 4E 85 F1 | 	sub	fp, #20
29b28     A7 14 02 FB | 	rdlong	arg02, fp
29b2c     30 4E 85 F1 | 	sub	fp, #48
29b30     00 16 06 F6 | 	mov	arg03, #0
29b34     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
29b38     30 4E 05 F1 | 	add	fp, #48
29b3c     A7 12 02 FB | 	rdlong	arg01, fp
29b40     1C 12 06 F1 | 	add	arg01, #28
29b44     09 01 68 FC | 	wrlong	#0, arg01
29b48     14 4E 05 F1 | 	add	fp, #20
29b4c     A7 1E 02 FB | 	rdlong	local01, fp
29b50     03 1E 06 F1 | 	add	local01, #3
29b54     0F 03 48 FC | 	wrbyte	#1, local01
29b58     04 4E 05 F1 | 	add	fp, #4
29b5c     A7 1E 0A FB | 	rdlong	local01, fp wz
29b60     48 4E 85 F1 | 	sub	fp, #72
29b64     E8 00 90 AD |  if_e	jmp	#LR__4258
29b68     44 4E 05 F1 | 	add	fp, #68
29b6c     A7 1E 02 FB | 	rdlong	local01, fp
29b70     30 1E 06 F1 | 	add	local01, #48
29b74     0F 1F 02 FB | 	rdlong	local01, local01
29b78     14 4E 05 F1 | 	add	fp, #20
29b7c     A7 1E 62 FC | 	wrlong	local01, fp
29b80     44 4E 85 F1 | 	sub	fp, #68
29b84     A7 12 02 F6 | 	mov	arg01, fp
29b88     34 4E 05 F1 | 	add	fp, #52
29b8c     A7 14 02 FB | 	rdlong	arg02, fp
29b90     48 4E 85 F1 | 	sub	fp, #72
29b94     00 16 06 F6 | 	mov	arg03, #0
29b98     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
29b9c     10 4E 05 F1 | 	add	fp, #16
29ba0     A7 FA 61 FC | 	wrlong	result1, fp
29ba4     10 4E 85 F1 | 	sub	fp, #16
29ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
29bac     A0 00 90 5D |  if_ne	jmp	#LR__4258
29bb0     44 4E 05 F1 | 	add	fp, #68
29bb4     A7 12 02 FB | 	rdlong	arg01, fp
29bb8     14 4E 05 F1 | 	add	fp, #20
29bbc     A7 14 02 FB | 	rdlong	arg02, fp
29bc0     58 4E 85 F1 | 	sub	fp, #88
29bc4     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
29bc8     10 4E 05 F1 | 	add	fp, #16
29bcc     A7 FA 61 FC | 	wrlong	result1, fp
29bd0     34 4E 05 F1 | 	add	fp, #52
29bd4     A7 18 02 FB | 	rdlong	arg04, fp
29bd8     04 4E 05 F1 | 	add	fp, #4
29bdc     A7 1E 02 FB | 	rdlong	local01, fp
29be0     48 4E 85 F1 | 	sub	fp, #72
29be4     01 1E 86 F1 | 	sub	local01, #1
29be8     10 18 06 F1 | 	add	arg04, #16
29bec     0C 1F 62 FC | 	wrlong	local01, arg04
29bf0     5C 00 90 FD | 	jmp	#LR__4258
29bf4                 | LR__4255
29bf4     10 4E 05 F1 | 	add	fp, #16
29bf8     A7 18 0A FB | 	rdlong	arg04, fp wz
29bfc     10 4E 85 F1 | 	sub	fp, #16
29c00     4C 00 90 5D |  if_ne	jmp	#LR__4257
29c04     1A 4E 05 F1 | 	add	fp, #26
29c08     A7 18 C2 FA | 	rdbyte	arg04, fp
29c0c     1A 4E 85 F1 | 	sub	fp, #26
29c10     10 18 CE F7 | 	test	arg04, #16 wz
29c14     10 4E 05 51 |  if_ne	add	fp, #16
29c18     A7 08 68 5C |  if_ne	wrlong	#4, fp
29c1c     10 4E 85 51 |  if_ne	sub	fp, #16
29c20     2C 00 90 5D |  if_ne	jmp	#LR__4256
29c24     0C 4E 05 F1 | 	add	fp, #12
29c28     A7 18 C2 FA | 	rdbyte	arg04, fp
29c2c     0C 4E 85 F1 | 	sub	fp, #12
29c30     02 18 CE F7 | 	test	arg04, #2 wz
29c34     1A 4E 05 51 |  if_ne	add	fp, #26
29c38     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
29c3c     1A 4E 85 51 |  if_ne	sub	fp, #26
29c40     01 1E CE 57 |  if_ne	test	local01, #1 wz
29c44     10 4E 05 51 |  if_ne	add	fp, #16
29c48     A7 0E 68 5C |  if_ne	wrlong	#7, fp
29c4c     10 4E 85 51 |  if_ne	sub	fp, #16
29c50                 | LR__4256
29c50                 | LR__4257
29c50                 | LR__4258
29c50     10 4E 05 F1 | 	add	fp, #16
29c54     A7 1E 0A FB | 	rdlong	local01, fp wz
29c58     10 4E 85 F1 | 	sub	fp, #16
29c5c     60 00 90 5D |  if_ne	jmp	#LR__4259
29c60     0C 4E 05 F1 | 	add	fp, #12
29c64     A7 20 C2 FA | 	rdbyte	local02, fp
29c68     0C 4E 85 F1 | 	sub	fp, #12
29c6c     08 20 CE F7 | 	test	local02, #8 wz
29c70     0C 4E 05 51 |  if_ne	add	fp, #12
29c74     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
29c78     40 20 46 55 |  if_ne	or	local02, #64
29c7c     A7 20 42 5C |  if_ne	wrbyte	local02, fp
29c80     0C 4E 85 51 |  if_ne	sub	fp, #12
29c84     04 4E 05 F1 | 	add	fp, #4
29c88     A7 20 02 FB | 	rdlong	local02, fp
29c8c     40 4E 05 F1 | 	add	fp, #64
29c90     A7 1E 02 FB | 	rdlong	local01, fp
29c94     30 1E 06 F1 | 	add	local01, #48
29c98     0F 1F 02 FB | 	rdlong	local01, local01
29c9c     20 20 06 F1 | 	add	local02, #32
29ca0     10 1F 62 FC | 	wrlong	local01, local02
29ca4     40 4E 85 F1 | 	sub	fp, #64
29ca8     A7 20 02 FB | 	rdlong	local02, fp
29cac     2C 4E 05 F1 | 	add	fp, #44
29cb0     A7 1E 02 FB | 	rdlong	local01, fp
29cb4     30 4E 85 F1 | 	sub	fp, #48
29cb8     24 20 06 F1 | 	add	local02, #36
29cbc     10 1F 62 FC | 	wrlong	local01, local02
29cc0                 | LR__4259
29cc0     10 4E 05 F1 | 	add	fp, #16
29cc4     A7 20 0A FB | 	rdlong	local02, fp wz
29cc8     10 4E 85 F1 | 	sub	fp, #16
29ccc     F4 02 90 5D |  if_ne	jmp	#LR__4265
29cd0     04 4E 05 F1 | 	add	fp, #4
29cd4     A7 20 02 FB | 	rdlong	local02, fp
29cd8     40 4E 05 F1 | 	add	fp, #64
29cdc     A7 12 02 FB | 	rdlong	arg01, fp
29ce0     14 4E 85 F1 | 	sub	fp, #20
29ce4     A7 14 02 FB | 	rdlong	arg02, fp
29ce8     30 4E 85 F1 | 	sub	fp, #48
29cec     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
29cf0     08 20 06 F1 | 	add	local02, #8
29cf4     10 FB 61 FC | 	wrlong	result1, local02
29cf8     04 4E 05 F1 | 	add	fp, #4
29cfc     A7 20 02 FB | 	rdlong	local02, fp
29d00     2C 4E 05 F1 | 	add	fp, #44
29d04     A7 12 02 FB | 	rdlong	arg01, fp
29d08     1C 12 06 F1 | 	add	arg01, #28
29d0c                 | ' {
29d0c                 | ' 
29d0c                 | ' 	return *((DWORD*)ptr);
29d0c     09 FB 01 FB | 	rdlong	result1, arg01
29d10     0C 20 06 F1 | 	add	local02, #12
29d14     10 FB 61 FC | 	wrlong	result1, local02
29d18     2C 4E 85 F1 | 	sub	fp, #44
29d1c     A7 20 02 FB | 	rdlong	local02, fp
29d20     40 4E 05 F1 | 	add	fp, #64
29d24     A7 1E 02 FB | 	rdlong	local01, fp
29d28     10 1F 62 FC | 	wrlong	local01, local02
29d2c     40 4E 85 F1 | 	sub	fp, #64
29d30     A7 20 02 FB | 	rdlong	local02, fp
29d34     40 4E 05 F1 | 	add	fp, #64
29d38     A7 1E 02 FB | 	rdlong	local01, fp
29d3c     06 1E 06 F1 | 	add	local01, #6
29d40     0F 1F E2 FA | 	rdword	local01, local01
29d44     04 20 06 F1 | 	add	local02, #4
29d48     10 1F 52 FC | 	wrword	local01, local02
29d4c     40 4E 85 F1 | 	sub	fp, #64
29d50     A7 20 02 FB | 	rdlong	local02, fp
29d54     08 4E 05 F1 | 	add	fp, #8
29d58     A7 1E C2 FA | 	rdbyte	local01, fp
29d5c     10 20 06 F1 | 	add	local02, #16
29d60     10 1F 42 FC | 	wrbyte	local01, local02
29d64     08 4E 85 F1 | 	sub	fp, #8
29d68     A7 20 02 FB | 	rdlong	local02, fp
29d6c     11 20 06 F1 | 	add	local02, #17
29d70     10 01 48 FC | 	wrbyte	#0, local02
29d74     A7 20 02 FB | 	rdlong	local02, fp
29d78     1C 20 06 F1 | 	add	local02, #28
29d7c     10 01 68 FC | 	wrlong	#0, local02
29d80     A7 20 02 FB | 	rdlong	local02, fp
29d84     14 20 06 F1 | 	add	local02, #20
29d88     10 01 68 FC | 	wrlong	#0, local02
29d8c     A7 12 02 FB | 	rdlong	arg01, fp
29d90     04 4E 85 F1 | 	sub	fp, #4
29d94     28 12 06 F1 | 	add	arg01, #40
29d98     00 14 06 F6 | 	mov	arg02, #0
29d9c     09 16 C6 F9 | 	decod	arg03, #9
29da0     98 00 A0 FD | 	call	#\builtin_bytefill_
29da4     0C 4E 05 F1 | 	add	fp, #12
29da8     A7 20 C2 FA | 	rdbyte	local02, fp
29dac     0C 4E 85 F1 | 	sub	fp, #12
29db0     20 20 CE F7 | 	test	local02, #32 wz
29db4     0C 02 90 AD |  if_e	jmp	#LR__4264
29db8     04 4E 05 F1 | 	add	fp, #4
29dbc     A7 1E 02 FB | 	rdlong	local01, fp
29dc0     04 4E 85 F1 | 	sub	fp, #4
29dc4     0C 1E 06 F1 | 	add	local01, #12
29dc8     0F 21 02 FB | 	rdlong	local02, local01
29dcc     01 20 16 F2 | 	cmp	local02, #1 wc
29dd0     F0 01 90 CD |  if_b	jmp	#LR__4264
29dd4     04 4E 05 F1 | 	add	fp, #4
29dd8     A7 1E 02 FB | 	rdlong	local01, fp
29ddc     0F 21 02 F6 | 	mov	local02, local01
29de0     0C 1E 06 F1 | 	add	local01, #12
29de4     0F 1F 02 FB | 	rdlong	local01, local01
29de8     14 20 06 F1 | 	add	local02, #20
29dec     10 1F 62 FC | 	wrlong	local01, local02
29df0     40 4E 05 F1 | 	add	fp, #64
29df4     A7 20 02 FB | 	rdlong	local02, fp
29df8     0A 20 06 F1 | 	add	local02, #10
29dfc     10 21 E2 FA | 	rdword	local02, local02
29e00     09 20 66 F0 | 	shl	local02, #9
29e04     08 4E 05 F1 | 	add	fp, #8
29e08     A7 20 62 FC | 	wrlong	local02, fp
29e0c     48 4E 85 F1 | 	sub	fp, #72
29e10     A7 20 02 FB | 	rdlong	local02, fp
29e14     08 20 06 F1 | 	add	local02, #8
29e18     10 1F 02 FB | 	rdlong	local01, local02
29e1c     4C 4E 05 F1 | 	add	fp, #76
29e20     A7 1E 62 FC | 	wrlong	local01, fp
29e24                 | ' 				fp->fptr = fp->obj.objsize;
29e24                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
29e24                 | ' 				clst = fp->obj.sclust;
29e24                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
29e24     4C 4E 85 F1 | 	sub	fp, #76
29e28     A7 20 02 FB | 	rdlong	local02, fp
29e2c     0C 20 06 F1 | 	add	local02, #12
29e30     10 1F 02 FB | 	rdlong	local01, local02
29e34     58 4E 05 F1 | 	add	fp, #88
29e38     A7 1E 62 FC | 	wrlong	local01, fp
29e3c     5C 4E 85 F1 | 	sub	fp, #92
29e40                 | LR__4260
29e40     10 4E 05 F1 | 	add	fp, #16
29e44     A7 20 0A FB | 	rdlong	local02, fp wz
29e48     10 4E 85 F1 | 	sub	fp, #16
29e4c     94 00 90 5D |  if_ne	jmp	#LR__4261
29e50     5C 4E 05 F1 | 	add	fp, #92
29e54     A7 20 02 FB | 	rdlong	local02, fp
29e58     10 4E 85 F1 | 	sub	fp, #16
29e5c     A7 1E 02 FB | 	rdlong	local01, fp
29e60     4C 4E 85 F1 | 	sub	fp, #76
29e64     0F 21 1A F2 | 	cmp	local02, local01 wcz
29e68     78 00 90 ED |  if_be	jmp	#LR__4261
29e6c     04 4E 05 F1 | 	add	fp, #4
29e70     A7 12 02 FB | 	rdlong	arg01, fp
29e74     4C 4E 05 F1 | 	add	fp, #76
29e78     A7 14 02 FB | 	rdlong	arg02, fp
29e7c     50 4E 85 F1 | 	sub	fp, #80
29e80     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
29e84     50 4E 05 F1 | 	add	fp, #80
29e88     A7 FA 61 FC | 	wrlong	result1, fp
29e8c     50 4E 85 F1 | 	sub	fp, #80
29e90     02 FA 15 F2 | 	cmp	result1, #2 wc
29e94     10 4E 05 C1 |  if_b	add	fp, #16
29e98     A7 04 68 CC |  if_b	wrlong	#2, fp
29e9c     10 4E 85 C1 |  if_b	sub	fp, #16
29ea0     50 4E 05 F1 | 	add	fp, #80
29ea4     A7 20 02 FB | 	rdlong	local02, fp
29ea8     50 4E 85 F1 | 	sub	fp, #80
29eac     FF FF 7F FF 
29eb0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
29eb4     10 4E 05 A1 |  if_e	add	fp, #16
29eb8     A7 02 68 AC |  if_e	wrlong	#1, fp
29ebc     10 4E 85 A1 |  if_e	sub	fp, #16
29ec0     5C 4E 05 F1 | 	add	fp, #92
29ec4     A7 20 02 FB | 	rdlong	local02, fp
29ec8     10 4E 85 F1 | 	sub	fp, #16
29ecc     A7 1E 02 FB | 	rdlong	local01, fp
29ed0     0F 21 82 F1 | 	sub	local02, local01
29ed4     10 4E 05 F1 | 	add	fp, #16
29ed8     A7 20 62 FC | 	wrlong	local02, fp
29edc     5C 4E 85 F1 | 	sub	fp, #92
29ee0     5C FF 9F FD | 	jmp	#LR__4260
29ee4                 | LR__4261
29ee4     04 4E 05 F1 | 	add	fp, #4
29ee8     A7 20 02 FB | 	rdlong	local02, fp
29eec     4C 4E 05 F1 | 	add	fp, #76
29ef0     A7 1E 02 FB | 	rdlong	local01, fp
29ef4     18 20 06 F1 | 	add	local02, #24
29ef8     10 1F 62 FC | 	wrlong	local01, local02
29efc     40 4E 85 F1 | 	sub	fp, #64
29f00     A7 20 0A FB | 	rdlong	local02, fp wz
29f04     10 4E 85 F1 | 	sub	fp, #16
29f08     B8 00 90 5D |  if_ne	jmp	#LR__4263
29f0c     5C 4E 05 F1 | 	add	fp, #92
29f10     A7 1E 02 FB | 	rdlong	local01, fp
29f14     5C 4E 85 F1 | 	sub	fp, #92
29f18     FF 1F CE F7 | 	test	local01, #511 wz
29f1c     A4 00 90 AD |  if_e	jmp	#LR__4263
29f20     44 4E 05 F1 | 	add	fp, #68
29f24     A7 12 02 FB | 	rdlong	arg01, fp
29f28     0C 4E 05 F1 | 	add	fp, #12
29f2c     A7 14 02 FB | 	rdlong	arg02, fp
29f30     50 4E 85 F1 | 	sub	fp, #80
29f34     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
29f38     58 4E 05 F1 | 	add	fp, #88
29f3c     A7 FA 61 FC | 	wrlong	result1, fp
29f40     00 FA 4D F2 | 	cmps	result1, #0 wz
29f44     58 4E 85 F1 | 	sub	fp, #88
29f48     10 4E 05 A1 |  if_e	add	fp, #16
29f4c     A7 04 68 AC |  if_e	wrlong	#2, fp
29f50     10 4E 85 A1 |  if_e	sub	fp, #16
29f54     6C 00 90 AD |  if_e	jmp	#LR__4262
29f58     04 4E 05 F1 | 	add	fp, #4
29f5c     A7 20 02 FB | 	rdlong	local02, fp
29f60     54 4E 05 F1 | 	add	fp, #84
29f64     A7 1E 02 FB | 	rdlong	local01, fp
29f68     04 4E 05 F1 | 	add	fp, #4
29f6c     A7 18 02 FB | 	rdlong	arg04, fp
29f70     09 18 46 F0 | 	shr	arg04, #9
29f74     0C 1F 02 F1 | 	add	local01, arg04
29f78     1C 20 06 F1 | 	add	local02, #28
29f7c     10 1F 62 FC | 	wrlong	local01, local02
29f80     18 4E 85 F1 | 	sub	fp, #24
29f84     A7 20 02 FB | 	rdlong	local02, fp
29f88     01 20 06 F1 | 	add	local02, #1
29f8c     10 13 C2 FA | 	rdbyte	arg01, local02
29f90     40 4E 85 F1 | 	sub	fp, #64
29f94     A7 20 02 FB | 	rdlong	local02, fp
29f98     10 15 02 F6 | 	mov	arg02, local02
29f9c     28 14 06 F1 | 	add	arg02, #40
29fa0     04 4E 85 F1 | 	sub	fp, #4
29fa4     1C 20 06 F1 | 	add	local02, #28
29fa8     10 17 02 FB | 	rdlong	arg03, local02
29fac     01 18 06 F6 | 	mov	arg04, #1
29fb0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
29fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
29fb8     10 4E 05 51 |  if_ne	add	fp, #16
29fbc     A7 02 68 5C |  if_ne	wrlong	#1, fp
29fc0     10 4E 85 51 |  if_ne	sub	fp, #16
29fc4                 | LR__4262
29fc4                 | LR__4263
29fc4                 | LR__4264
29fc4                 | LR__4265
29fc4                 | LR__4266
29fc4     10 4E 05 F1 | 	add	fp, #16
29fc8     A7 20 0A FB | 	rdlong	local02, fp wz
29fcc     10 4E 85 F1 | 	sub	fp, #16
29fd0     04 4E 05 51 |  if_ne	add	fp, #4
29fd4     A7 20 02 5B |  if_ne	rdlong	local02, fp
29fd8     04 4E 85 51 |  if_ne	sub	fp, #4
29fdc     10 01 68 5C |  if_ne	wrlong	#0, local02
29fe0                 | ' 
29fe0                 | ' 	return res ;
29fe0     10 4E 05 F1 | 	add	fp, #16
29fe4     A7 FA 01 FB | 	rdlong	result1, fp
29fe8     10 4E 85 F1 | 	sub	fp, #16
29fec                 | LR__4267
29fec     A7 F0 03 F6 | 	mov	ptra, fp
29ff0     B2 00 A0 FD | 	call	#popregs_
29ff4                 | _fatfs_cc_f_open_ret
29ff4     2D 00 64 FD | 	ret
29ff8                 | 
29ff8                 | _fatfs_cc_f_read
29ff8     0E 4A 05 F6 | 	mov	COUNT_, #14
29ffc     A8 00 A0 FD | 	call	#pushregs_
2a000     38 F0 07 F1 | 	add	ptra, #56
2a004     04 4E 05 F1 | 	add	fp, #4
2a008     A7 12 62 FC | 	wrlong	arg01, fp
2a00c     04 4E 05 F1 | 	add	fp, #4
2a010     A7 14 62 FC | 	wrlong	arg02, fp
2a014     04 4E 05 F1 | 	add	fp, #4
2a018     A7 16 62 FC | 	wrlong	arg03, fp
2a01c     04 4E 05 F1 | 	add	fp, #4
2a020     A7 18 62 FC | 	wrlong	arg04, fp
2a024     08 4E 85 F1 | 	sub	fp, #8
2a028     A7 FA 01 FB | 	rdlong	result1, fp
2a02c     2C 4E 05 F1 | 	add	fp, #44
2a030     A7 FA 61 FC | 	wrlong	result1, fp
2a034     24 4E 85 F1 | 	sub	fp, #36
2a038     A7 FA 01 FB | 	rdlong	result1, fp
2a03c     FD 00 68 FC | 	wrlong	#0, result1
2a040     0C 4E 85 F1 | 	sub	fp, #12
2a044     A7 12 02 FB | 	rdlong	arg01, fp
2a048     14 4E 05 F1 | 	add	fp, #20
2a04c     A7 14 02 F6 | 	mov	arg02, fp
2a050     18 4E 85 F1 | 	sub	fp, #24
2a054     24 F7 BF FD | 	call	#_fatfs_cc_validate
2a058     14 4E 05 F1 | 	add	fp, #20
2a05c     A7 FA 61 FC | 	wrlong	result1, fp
2a060     00 FA 4D F2 | 	cmps	result1, #0 wz
2a064     14 4E 85 F1 | 	sub	fp, #20
2a068     20 00 90 5D |  if_ne	jmp	#LR__4270
2a06c     04 4E 05 F1 | 	add	fp, #4
2a070     A7 14 02 FB | 	rdlong	arg02, fp
2a074     11 14 06 F1 | 	add	arg02, #17
2a078     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2a07c     10 4E 05 F1 | 	add	fp, #16
2a080     A7 14 62 FC | 	wrlong	arg02, fp
2a084     14 4E 85 F1 | 	sub	fp, #20
2a088     10 00 90 AD |  if_e	jmp	#LR__4271
2a08c                 | LR__4270
2a08c     14 4E 05 F1 | 	add	fp, #20
2a090     A7 FA 01 FB | 	rdlong	result1, fp
2a094     14 4E 85 F1 | 	sub	fp, #20
2a098     EC 05 90 FD | 	jmp	#LR__4290
2a09c                 | LR__4271
2a09c     04 4E 05 F1 | 	add	fp, #4
2a0a0     A7 18 02 FB | 	rdlong	arg04, fp
2a0a4     04 4E 85 F1 | 	sub	fp, #4
2a0a8     10 18 06 F1 | 	add	arg04, #16
2a0ac     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a0b0     01 18 CE F7 | 	test	arg04, #1 wz
2a0b4     07 FA 05 A6 |  if_e	mov	result1, #7
2a0b8     CC 05 90 AD |  if_e	jmp	#LR__4290
2a0bc     04 4E 05 F1 | 	add	fp, #4
2a0c0     A7 1E 02 FB | 	rdlong	local01, fp
2a0c4     0F 21 02 F6 | 	mov	local02, local01
2a0c8     0C 20 06 F1 | 	add	local02, #12
2a0cc     10 23 02 FB | 	rdlong	local03, local02
2a0d0     14 1E 06 F1 | 	add	local01, #20
2a0d4     0F 1F 02 FB | 	rdlong	local01, local01
2a0d8     0F 23 82 F1 | 	sub	local03, local01
2a0dc     20 4E 05 F1 | 	add	fp, #32
2a0e0     A7 22 62 FC | 	wrlong	local03, fp
2a0e4     18 4E 85 F1 | 	sub	fp, #24
2a0e8     A7 24 02 FB | 	rdlong	local04, fp
2a0ec     0C 4E 85 F1 | 	sub	fp, #12
2a0f0     11 25 1A F2 | 	cmp	local04, local03 wcz
2a0f4     24 4E 05 11 |  if_a	add	fp, #36
2a0f8     A7 24 02 1B |  if_a	rdlong	local04, fp
2a0fc     18 4E 85 11 |  if_a	sub	fp, #24
2a100     A7 24 62 1C |  if_a	wrlong	local04, fp
2a104     0C 4E 85 11 |  if_a	sub	fp, #12
2a108                 | ' 
2a108                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2a108                 | LR__4272
2a108     0C 4E 05 F1 | 	add	fp, #12
2a10c     A7 20 02 FB | 	rdlong	local02, fp
2a110     0C 4E 85 F1 | 	sub	fp, #12
2a114     10 25 02 F6 | 	mov	local04, local02
2a118     01 24 16 F2 | 	cmp	local04, #1 wc
2a11c     64 05 90 CD |  if_b	jmp	#LR__4289
2a120     04 4E 05 F1 | 	add	fp, #4
2a124     A7 22 02 FB | 	rdlong	local03, fp
2a128     04 4E 85 F1 | 	sub	fp, #4
2a12c     14 22 06 F1 | 	add	local03, #20
2a130     11 23 02 FB | 	rdlong	local03, local03
2a134     FF 23 CE F7 | 	test	local03, #511 wz
2a138     3C 04 90 5D |  if_ne	jmp	#LR__4287
2a13c     04 4E 05 F1 | 	add	fp, #4
2a140     A7 1E 02 FB | 	rdlong	local01, fp
2a144     14 1E 06 F1 | 	add	local01, #20
2a148     0F 23 02 FB | 	rdlong	local03, local01
2a14c     09 22 46 F0 | 	shr	local03, #9
2a150     14 4E 05 F1 | 	add	fp, #20
2a154     A7 26 02 FB | 	rdlong	local05, fp
2a158     13 29 02 F6 | 	mov	local06, local05
2a15c     0A 28 06 F1 | 	add	local06, #10
2a160     14 2B E2 FA | 	rdword	local07, local06
2a164     0A 28 86 F1 | 	sub	local06, #10
2a168     15 2D 32 F9 | 	getword	local08, local07, #0
2a16c     01 2C 86 F1 | 	sub	local08, #1
2a170     16 23 0A F5 | 	and	local03, local08 wz
2a174     18 4E 05 F1 | 	add	fp, #24
2a178     A7 22 62 FC | 	wrlong	local03, fp
2a17c     30 4E 85 F1 | 	sub	fp, #48
2a180     E0 00 90 5D |  if_ne	jmp	#LR__4277
2a184     04 4E 05 F1 | 	add	fp, #4
2a188     A7 22 02 FB | 	rdlong	local03, fp
2a18c     04 4E 85 F1 | 	sub	fp, #4
2a190     14 22 06 F1 | 	add	local03, #20
2a194     11 23 0A FB | 	rdlong	local03, local03 wz
2a198     20 00 90 5D |  if_ne	jmp	#LR__4273
2a19c     04 4E 05 F1 | 	add	fp, #4
2a1a0     A7 22 02 FB | 	rdlong	local03, fp
2a1a4     08 22 06 F1 | 	add	local03, #8
2a1a8     11 23 02 FB | 	rdlong	local03, local03
2a1ac     18 4E 05 F1 | 	add	fp, #24
2a1b0     A7 22 62 FC | 	wrlong	local03, fp
2a1b4     1C 4E 85 F1 | 	sub	fp, #28
2a1b8     28 00 90 FD | 	jmp	#LR__4274
2a1bc                 | LR__4273
2a1bc     04 4E 05 F1 | 	add	fp, #4
2a1c0     A7 2C 02 FB | 	rdlong	local08, fp
2a1c4     16 13 02 F6 | 	mov	arg01, local08
2a1c8     04 4E 85 F1 | 	sub	fp, #4
2a1cc     18 2C 06 F1 | 	add	local08, #24
2a1d0     16 15 02 FB | 	rdlong	arg02, local08
2a1d4     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2a1d8     1C 4E 05 F1 | 	add	fp, #28
2a1dc     A7 FA 61 FC | 	wrlong	result1, fp
2a1e0     1C 4E 85 F1 | 	sub	fp, #28
2a1e4                 | LR__4274
2a1e4     1C 4E 05 F1 | 	add	fp, #28
2a1e8     A7 22 02 FB | 	rdlong	local03, fp
2a1ec     1C 4E 85 F1 | 	sub	fp, #28
2a1f0     02 22 16 F2 | 	cmp	local03, #2 wc
2a1f4     1C 00 90 3D |  if_ae	jmp	#LR__4275
2a1f8     04 4E 05 F1 | 	add	fp, #4
2a1fc     A7 22 02 FB | 	rdlong	local03, fp
2a200     04 4E 85 F1 | 	sub	fp, #4
2a204     11 22 06 F1 | 	add	local03, #17
2a208     11 05 48 FC | 	wrbyte	#2, local03
2a20c     02 FA 05 F6 | 	mov	result1, #2
2a210     74 04 90 FD | 	jmp	#LR__4290
2a214                 | LR__4275
2a214     1C 4E 05 F1 | 	add	fp, #28
2a218     A7 22 02 FB | 	rdlong	local03, fp
2a21c     1C 4E 85 F1 | 	sub	fp, #28
2a220     FF FF 7F FF 
2a224     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2a228     1C 00 90 5D |  if_ne	jmp	#LR__4276
2a22c     04 4E 05 F1 | 	add	fp, #4
2a230     A7 22 02 FB | 	rdlong	local03, fp
2a234     04 4E 85 F1 | 	sub	fp, #4
2a238     11 22 06 F1 | 	add	local03, #17
2a23c     11 03 48 FC | 	wrbyte	#1, local03
2a240     01 FA 05 F6 | 	mov	result1, #1
2a244     40 04 90 FD | 	jmp	#LR__4290
2a248                 | LR__4276
2a248     04 4E 05 F1 | 	add	fp, #4
2a24c     A7 22 02 FB | 	rdlong	local03, fp
2a250     18 4E 05 F1 | 	add	fp, #24
2a254     A7 2C 02 FB | 	rdlong	local08, fp
2a258     1C 4E 85 F1 | 	sub	fp, #28
2a25c     18 22 06 F1 | 	add	local03, #24
2a260     11 2D 62 FC | 	wrlong	local08, local03
2a264                 | LR__4277
2a264     18 4E 05 F1 | 	add	fp, #24
2a268     A7 12 02 FB | 	rdlong	arg01, fp
2a26c     14 4E 85 F1 | 	sub	fp, #20
2a270     A7 22 02 FB | 	rdlong	local03, fp
2a274     04 4E 85 F1 | 	sub	fp, #4
2a278     18 22 06 F1 | 	add	local03, #24
2a27c     11 15 02 FB | 	rdlong	arg02, local03
2a280     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2a284     20 4E 05 F1 | 	add	fp, #32
2a288     A7 FA 61 FC | 	wrlong	result1, fp
2a28c     20 4E 85 F1 | 	sub	fp, #32
2a290     00 FA 0D F2 | 	cmp	result1, #0 wz
2a294     1C 00 90 5D |  if_ne	jmp	#LR__4278
2a298     04 4E 05 F1 | 	add	fp, #4
2a29c     A7 22 02 FB | 	rdlong	local03, fp
2a2a0     04 4E 85 F1 | 	sub	fp, #4
2a2a4     11 22 06 F1 | 	add	local03, #17
2a2a8     11 05 48 FC | 	wrbyte	#2, local03
2a2ac     02 FA 05 F6 | 	mov	result1, #2
2a2b0     D4 03 90 FD | 	jmp	#LR__4290
2a2b4                 | LR__4278
2a2b4     20 4E 05 F1 | 	add	fp, #32
2a2b8     A7 22 02 FB | 	rdlong	local03, fp
2a2bc     10 4E 05 F1 | 	add	fp, #16
2a2c0     A7 2C 02 FB | 	rdlong	local08, fp
2a2c4     16 23 02 F1 | 	add	local03, local08
2a2c8     10 4E 85 F1 | 	sub	fp, #16
2a2cc     A7 22 62 FC | 	wrlong	local03, fp
2a2d0     14 4E 85 F1 | 	sub	fp, #20
2a2d4     A7 22 02 FB | 	rdlong	local03, fp
2a2d8     09 22 46 F0 | 	shr	local03, #9
2a2dc     20 4E 05 F1 | 	add	fp, #32
2a2e0     A7 22 62 FC | 	wrlong	local03, fp
2a2e4     2C 4E 85 F1 | 	sub	fp, #44
2a2e8     01 22 16 F2 | 	cmp	local03, #1 wc
2a2ec     5C 01 90 CD |  if_b	jmp	#LR__4282
2a2f0     30 4E 05 F1 | 	add	fp, #48
2a2f4     A7 22 02 FB | 	rdlong	local03, fp
2a2f8     04 4E 85 F1 | 	sub	fp, #4
2a2fc     A7 2C 02 FB | 	rdlong	local08, fp
2a300     16 23 02 F1 | 	add	local03, local08
2a304     14 4E 85 F1 | 	sub	fp, #20
2a308     A7 2C 02 FB | 	rdlong	local08, fp
2a30c     18 4E 85 F1 | 	sub	fp, #24
2a310     0A 2C 06 F1 | 	add	local08, #10
2a314     16 2D E2 FA | 	rdword	local08, local08
2a318     16 23 1A F2 | 	cmp	local03, local08 wcz
2a31c     28 00 90 ED |  if_be	jmp	#LR__4279
2a320     18 4E 05 F1 | 	add	fp, #24
2a324     A7 1E 02 FB | 	rdlong	local01, fp
2a328     0A 1E 06 F1 | 	add	local01, #10
2a32c     0F 23 E2 FA | 	rdword	local03, local01
2a330     18 4E 05 F1 | 	add	fp, #24
2a334     A7 2C 02 FB | 	rdlong	local08, fp
2a338     16 23 82 F1 | 	sub	local03, local08
2a33c     04 4E 85 F1 | 	sub	fp, #4
2a340     A7 22 62 FC | 	wrlong	local03, fp
2a344     2C 4E 85 F1 | 	sub	fp, #44
2a348                 | LR__4279
2a348     18 4E 05 F1 | 	add	fp, #24
2a34c     A7 1E 02 FB | 	rdlong	local01, fp
2a350     01 1E 06 F1 | 	add	local01, #1
2a354     0F 13 C2 FA | 	rdbyte	arg01, local01
2a358     1C 4E 05 F1 | 	add	fp, #28
2a35c     A7 14 02 FB | 	rdlong	arg02, fp
2a360     14 4E 85 F1 | 	sub	fp, #20
2a364     A7 16 02 FB | 	rdlong	arg03, fp
2a368     0C 4E 05 F1 | 	add	fp, #12
2a36c     A7 18 02 FB | 	rdlong	arg04, fp
2a370     2C 4E 85 F1 | 	sub	fp, #44
2a374     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2a378     00 FA 0D F2 | 	cmp	result1, #0 wz
2a37c     1C 00 90 AD |  if_e	jmp	#LR__4280
2a380     04 4E 05 F1 | 	add	fp, #4
2a384     A7 22 02 FB | 	rdlong	local03, fp
2a388     04 4E 85 F1 | 	sub	fp, #4
2a38c     11 22 06 F1 | 	add	local03, #17
2a390     11 03 48 FC | 	wrbyte	#1, local03
2a394     01 FA 05 F6 | 	mov	result1, #1
2a398     EC 02 90 FD | 	jmp	#LR__4290
2a39c                 | LR__4280
2a39c     04 4E 05 F1 | 	add	fp, #4
2a3a0     A7 1E 02 FB | 	rdlong	local01, fp
2a3a4     04 4E 85 F1 | 	sub	fp, #4
2a3a8     10 1E 06 F1 | 	add	local01, #16
2a3ac     0F 23 C2 FA | 	rdbyte	local03, local01
2a3b0     80 22 CE F7 | 	test	local03, #128 wz
2a3b4     78 00 90 AD |  if_e	jmp	#LR__4281
2a3b8     04 4E 05 F1 | 	add	fp, #4
2a3bc     A7 2C 02 FB | 	rdlong	local08, fp
2a3c0     1C 2C 06 F1 | 	add	local08, #28
2a3c4     16 2D 02 FB | 	rdlong	local08, local08
2a3c8     1C 4E 05 F1 | 	add	fp, #28
2a3cc     A7 2E 02 FB | 	rdlong	local09, fp
2a3d0     17 2D 82 F1 | 	sub	local08, local09
2a3d4     0C 4E 05 F1 | 	add	fp, #12
2a3d8     A7 30 02 FB | 	rdlong	local10, fp
2a3dc     2C 4E 85 F1 | 	sub	fp, #44
2a3e0     18 33 02 F6 | 	mov	local11, local10
2a3e4     19 2D 12 F2 | 	cmp	local08, local11 wc
2a3e8     44 00 90 3D |  if_ae	jmp	#LR__4281
2a3ec     34 4E 05 F1 | 	add	fp, #52
2a3f0     A7 12 02 FB | 	rdlong	arg01, fp
2a3f4     30 4E 85 F1 | 	sub	fp, #48
2a3f8     A7 14 02 FB | 	rdlong	arg02, fp
2a3fc     0A 33 02 F6 | 	mov	local11, arg02
2a400     1C 32 06 F1 | 	add	local11, #28
2a404     19 2F 02 FB | 	rdlong	local09, local11
2a408     1C 4E 05 F1 | 	add	fp, #28
2a40c     A7 26 02 FB | 	rdlong	local05, fp
2a410     13 2F 82 F1 | 	sub	local09, local05
2a414     09 2E 66 F0 | 	shl	local09, #9
2a418     17 33 02 F6 | 	mov	local11, local09
2a41c     17 13 02 F1 | 	add	arg01, local09
2a420     20 4E 85 F1 | 	sub	fp, #32
2a424     28 14 06 F1 | 	add	arg02, #40
2a428     09 16 C6 F9 | 	decod	arg03, #9
2a42c     BC 48 BF FD | 	call	#__system____builtin_memmove
2a430                 | LR__4281
2a430     2C 4E 05 F1 | 	add	fp, #44
2a434     A7 22 02 FB | 	rdlong	local03, fp
2a438     09 22 66 F0 | 	shl	local03, #9
2a43c     04 4E 85 F1 | 	sub	fp, #4
2a440     A7 22 62 FC | 	wrlong	local03, fp
2a444     28 4E 85 F1 | 	sub	fp, #40
2a448                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2a448                 | ' 				}
2a448                 | ' 
2a448                 | ' 
2a448                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2a448                 | ' 				continue;
2a448     B4 01 90 FD | 	jmp	#LR__4288
2a44c                 | LR__4282
2a44c     04 4E 05 F1 | 	add	fp, #4
2a450     A7 22 02 FB | 	rdlong	local03, fp
2a454     1C 22 06 F1 | 	add	local03, #28
2a458     11 23 02 FB | 	rdlong	local03, local03
2a45c     1C 4E 05 F1 | 	add	fp, #28
2a460     A7 1E 02 FB | 	rdlong	local01, fp
2a464     20 4E 85 F1 | 	sub	fp, #32
2a468     0F 23 0A F2 | 	cmp	local03, local01 wz
2a46c     EC 00 90 AD |  if_e	jmp	#LR__4286
2a470     04 4E 05 F1 | 	add	fp, #4
2a474     A7 1E 02 FB | 	rdlong	local01, fp
2a478     04 4E 85 F1 | 	sub	fp, #4
2a47c     10 1E 06 F1 | 	add	local01, #16
2a480     0F 23 C2 FA | 	rdbyte	local03, local01
2a484     80 22 CE F7 | 	test	local03, #128 wz
2a488     7C 00 90 AD |  if_e	jmp	#LR__4284
2a48c     18 4E 05 F1 | 	add	fp, #24
2a490     A7 1E 02 FB | 	rdlong	local01, fp
2a494     01 1E 06 F1 | 	add	local01, #1
2a498     0F 13 C2 FA | 	rdbyte	arg01, local01
2a49c     14 4E 85 F1 | 	sub	fp, #20
2a4a0     A7 22 02 FB | 	rdlong	local03, fp
2a4a4     11 15 02 F6 | 	mov	arg02, local03
2a4a8     28 14 06 F1 | 	add	arg02, #40
2a4ac     04 4E 85 F1 | 	sub	fp, #4
2a4b0     1C 22 06 F1 | 	add	local03, #28
2a4b4     11 17 02 FB | 	rdlong	arg03, local03
2a4b8     01 18 06 F6 | 	mov	arg04, #1
2a4bc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2a4c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a4c4     1C 00 90 AD |  if_e	jmp	#LR__4283
2a4c8     04 4E 05 F1 | 	add	fp, #4
2a4cc     A7 22 02 FB | 	rdlong	local03, fp
2a4d0     04 4E 85 F1 | 	sub	fp, #4
2a4d4     11 22 06 F1 | 	add	local03, #17
2a4d8     11 03 48 FC | 	wrbyte	#1, local03
2a4dc     01 FA 05 F6 | 	mov	result1, #1
2a4e0     A4 01 90 FD | 	jmp	#LR__4290
2a4e4                 | LR__4283
2a4e4     04 4E 05 F1 | 	add	fp, #4
2a4e8     A7 32 02 FB | 	rdlong	local11, fp
2a4ec     19 23 02 F6 | 	mov	local03, local11
2a4f0     04 4E 85 F1 | 	sub	fp, #4
2a4f4     10 32 06 F1 | 	add	local11, #16
2a4f8     19 33 C2 FA | 	rdbyte	local11, local11
2a4fc     7F 32 06 F5 | 	and	local11, #127
2a500     10 22 06 F1 | 	add	local03, #16
2a504     11 33 42 FC | 	wrbyte	local11, local03
2a508                 | LR__4284
2a508     18 4E 05 F1 | 	add	fp, #24
2a50c     A7 1E 02 FB | 	rdlong	local01, fp
2a510     01 1E 06 F1 | 	add	local01, #1
2a514     0F 13 C2 FA | 	rdbyte	arg01, local01
2a518     14 4E 85 F1 | 	sub	fp, #20
2a51c     A7 14 02 FB | 	rdlong	arg02, fp
2a520     28 14 06 F1 | 	add	arg02, #40
2a524     1C 4E 05 F1 | 	add	fp, #28
2a528     A7 16 02 FB | 	rdlong	arg03, fp
2a52c     20 4E 85 F1 | 	sub	fp, #32
2a530     01 18 06 F6 | 	mov	arg04, #1
2a534     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2a538     00 FA 0D F2 | 	cmp	result1, #0 wz
2a53c     1C 00 90 AD |  if_e	jmp	#LR__4285
2a540     04 4E 05 F1 | 	add	fp, #4
2a544     A7 22 02 FB | 	rdlong	local03, fp
2a548     04 4E 85 F1 | 	sub	fp, #4
2a54c     11 22 06 F1 | 	add	local03, #17
2a550     11 03 48 FC | 	wrbyte	#1, local03
2a554     01 FA 05 F6 | 	mov	result1, #1
2a558     2C 01 90 FD | 	jmp	#LR__4290
2a55c                 | LR__4285
2a55c                 | LR__4286
2a55c     04 4E 05 F1 | 	add	fp, #4
2a560     A7 22 02 FB | 	rdlong	local03, fp
2a564     1C 4E 05 F1 | 	add	fp, #28
2a568     A7 32 02 FB | 	rdlong	local11, fp
2a56c     20 4E 85 F1 | 	sub	fp, #32
2a570     1C 22 06 F1 | 	add	local03, #28
2a574     11 33 62 FC | 	wrlong	local11, local03
2a578                 | LR__4287
2a578     04 4E 05 F1 | 	add	fp, #4
2a57c     A7 1E 02 FB | 	rdlong	local01, fp
2a580     14 1E 06 F1 | 	add	local01, #20
2a584     0F 33 02 FB | 	rdlong	local11, local01
2a588     FF 33 06 F5 | 	and	local11, #511
2a58c     09 22 C6 F9 | 	decod	local03, #9
2a590     19 23 82 F1 | 	sub	local03, local11
2a594     24 4E 05 F1 | 	add	fp, #36
2a598     A7 22 62 FC | 	wrlong	local03, fp
2a59c     1C 4E 85 F1 | 	sub	fp, #28
2a5a0     A7 32 02 FB | 	rdlong	local11, fp
2a5a4     0C 4E 85 F1 | 	sub	fp, #12
2a5a8     19 23 1A F2 | 	cmp	local03, local11 wcz
2a5ac     0C 4E 05 11 |  if_a	add	fp, #12
2a5b0     A7 22 02 1B |  if_a	rdlong	local03, fp
2a5b4     1C 4E 05 11 |  if_a	add	fp, #28
2a5b8     A7 22 62 1C |  if_a	wrlong	local03, fp
2a5bc     28 4E 85 11 |  if_a	sub	fp, #40
2a5c0     34 4E 05 F1 | 	add	fp, #52
2a5c4     A7 12 02 FB | 	rdlong	arg01, fp
2a5c8     30 4E 85 F1 | 	sub	fp, #48
2a5cc     A7 28 02 FB | 	rdlong	local06, fp
2a5d0     14 15 02 F6 | 	mov	arg02, local06
2a5d4     28 14 06 F1 | 	add	arg02, #40
2a5d8     14 28 06 F1 | 	add	local06, #20
2a5dc     14 33 02 FB | 	rdlong	local11, local06
2a5e0     19 2F 02 F6 | 	mov	local09, local11
2a5e4     17 31 02 F6 | 	mov	local10, local09
2a5e8     FF 31 06 F5 | 	and	local10, #511
2a5ec     18 15 02 F1 | 	add	arg02, local10
2a5f0     24 4E 05 F1 | 	add	fp, #36
2a5f4     A7 16 02 FB | 	rdlong	arg03, fp
2a5f8     28 4E 85 F1 | 	sub	fp, #40
2a5fc     EC 46 BF FD | 	call	#__system____builtin_memmove
2a600                 | LR__4288
2a600     0C 4E 05 F1 | 	add	fp, #12
2a604     A7 22 02 FB | 	rdlong	local03, fp
2a608     1C 4E 05 F1 | 	add	fp, #28
2a60c     A7 2C 02 FB | 	rdlong	local08, fp
2a610     16 23 82 F1 | 	sub	local03, local08
2a614     1C 4E 85 F1 | 	sub	fp, #28
2a618     A7 22 62 FC | 	wrlong	local03, fp
2a61c     04 4E 05 F1 | 	add	fp, #4
2a620     A7 1E 02 FB | 	rdlong	local01, fp
2a624     0F 2B 02 FB | 	rdlong	local07, local01
2a628     18 4E 05 F1 | 	add	fp, #24
2a62c     A7 2C 02 FB | 	rdlong	local08, fp
2a630     16 2B 02 F1 | 	add	local07, local08
2a634     0F 2B 62 FC | 	wrlong	local07, local01
2a638     0C 4E 05 F1 | 	add	fp, #12
2a63c     A7 22 02 FB | 	rdlong	local03, fp
2a640     0C 4E 85 F1 | 	sub	fp, #12
2a644     A7 34 02 FB | 	rdlong	local12, fp
2a648     1A 23 02 F1 | 	add	local03, local12
2a64c     0C 4E 05 F1 | 	add	fp, #12
2a650     A7 22 62 FC | 	wrlong	local03, fp
2a654     30 4E 85 F1 | 	sub	fp, #48
2a658     A7 36 02 FB | 	rdlong	local13, fp
2a65c     1B 23 02 F6 | 	mov	local03, local13
2a660     14 36 06 F1 | 	add	local13, #20
2a664     1B 39 02 FB | 	rdlong	local14, local13
2a668     24 4E 05 F1 | 	add	fp, #36
2a66c     A7 28 02 FB | 	rdlong	local06, fp
2a670     28 4E 85 F1 | 	sub	fp, #40
2a674     14 39 02 F1 | 	add	local14, local06
2a678     14 22 06 F1 | 	add	local03, #20
2a67c     11 39 62 FC | 	wrlong	local14, local03
2a680     84 FA 9F FD | 	jmp	#LR__4272
2a684                 | LR__4289
2a684                 | ' 
2a684                 | ' 
2a684                 | ' 
2a684                 | ' 
2a684                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2a684                 | ' 
2a684                 | ' 	}
2a684                 | ' 
2a684                 | ' 	return FR_OK ;
2a684     00 FA 05 F6 | 	mov	result1, #0
2a688                 | LR__4290
2a688     A7 F0 03 F6 | 	mov	ptra, fp
2a68c     B2 00 A0 FD | 	call	#popregs_
2a690                 | _fatfs_cc_f_read_ret
2a690     2D 00 64 FD | 	ret
2a694                 | 
2a694                 | _fatfs_cc_f_write
2a694     15 4A 05 F6 | 	mov	COUNT_, #21
2a698     A8 00 A0 FD | 	call	#pushregs_
2a69c     34 F0 07 F1 | 	add	ptra, #52
2a6a0     04 4E 05 F1 | 	add	fp, #4
2a6a4     A7 12 62 FC | 	wrlong	arg01, fp
2a6a8     04 4E 05 F1 | 	add	fp, #4
2a6ac     A7 14 62 FC | 	wrlong	arg02, fp
2a6b0     04 4E 05 F1 | 	add	fp, #4
2a6b4     A7 16 62 FC | 	wrlong	arg03, fp
2a6b8     04 4E 05 F1 | 	add	fp, #4
2a6bc     A7 18 62 FC | 	wrlong	arg04, fp
2a6c0     08 4E 85 F1 | 	sub	fp, #8
2a6c4     A7 FA 01 FB | 	rdlong	result1, fp
2a6c8     28 4E 05 F1 | 	add	fp, #40
2a6cc     A7 FA 61 FC | 	wrlong	result1, fp
2a6d0     20 4E 85 F1 | 	sub	fp, #32
2a6d4     A7 FA 01 FB | 	rdlong	result1, fp
2a6d8     FD 00 68 FC | 	wrlong	#0, result1
2a6dc     0C 4E 85 F1 | 	sub	fp, #12
2a6e0     A7 12 02 FB | 	rdlong	arg01, fp
2a6e4     14 4E 05 F1 | 	add	fp, #20
2a6e8     A7 14 02 F6 | 	mov	arg02, fp
2a6ec     18 4E 85 F1 | 	sub	fp, #24
2a6f0     88 F0 BF FD | 	call	#_fatfs_cc_validate
2a6f4     14 4E 05 F1 | 	add	fp, #20
2a6f8     A7 FA 61 FC | 	wrlong	result1, fp
2a6fc     00 FA 4D F2 | 	cmps	result1, #0 wz
2a700     14 4E 85 F1 | 	sub	fp, #20
2a704     20 00 90 5D |  if_ne	jmp	#LR__4300
2a708     04 4E 05 F1 | 	add	fp, #4
2a70c     A7 14 02 FB | 	rdlong	arg02, fp
2a710     11 14 06 F1 | 	add	arg02, #17
2a714     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2a718     10 4E 05 F1 | 	add	fp, #16
2a71c     A7 14 62 FC | 	wrlong	arg02, fp
2a720     14 4E 85 F1 | 	sub	fp, #20
2a724     10 00 90 AD |  if_e	jmp	#LR__4301
2a728                 | LR__4300
2a728     14 4E 05 F1 | 	add	fp, #20
2a72c     A7 FA 01 FB | 	rdlong	result1, fp
2a730     14 4E 85 F1 | 	sub	fp, #20
2a734     44 07 90 FD | 	jmp	#LR__4323
2a738                 | LR__4301
2a738     04 4E 05 F1 | 	add	fp, #4
2a73c     A7 14 02 FB | 	rdlong	arg02, fp
2a740     04 4E 85 F1 | 	sub	fp, #4
2a744     10 14 06 F1 | 	add	arg02, #16
2a748     0A 15 C2 FA | 	rdbyte	arg02, arg02
2a74c     02 14 CE F7 | 	test	arg02, #2 wz
2a750     07 FA 05 A6 |  if_e	mov	result1, #7
2a754     24 07 90 AD |  if_e	jmp	#LR__4323
2a758     04 4E 05 F1 | 	add	fp, #4
2a75c     A7 14 02 FB | 	rdlong	arg02, fp
2a760     0A 13 02 F6 | 	mov	arg01, arg02
2a764     14 12 06 F1 | 	add	arg01, #20
2a768     09 13 02 FB | 	rdlong	arg01, arg01
2a76c     08 4E 05 F1 | 	add	fp, #8
2a770     A7 FA 01 FB | 	rdlong	result1, fp
2a774     FD 12 02 F1 | 	add	arg01, result1
2a778     0C 4E 85 F1 | 	sub	fp, #12
2a77c     14 14 06 F1 | 	add	arg02, #20
2a780     0A FB 01 FB | 	rdlong	result1, arg02
2a784     FD 12 12 F2 | 	cmp	arg01, result1 wc
2a788     24 00 90 3D |  if_ae	jmp	#LR__4302
2a78c     04 4E 05 F1 | 	add	fp, #4
2a790     A7 14 02 FB | 	rdlong	arg02, fp
2a794     01 FA 65 F6 | 	neg	result1, #1
2a798     14 14 06 F1 | 	add	arg02, #20
2a79c     0A 15 02 FB | 	rdlong	arg02, arg02
2a7a0     0A FB 81 F1 | 	sub	result1, arg02
2a7a4     08 4E 05 F1 | 	add	fp, #8
2a7a8     A7 FA 61 FC | 	wrlong	result1, fp
2a7ac     0C 4E 85 F1 | 	sub	fp, #12
2a7b0                 | LR__4302
2a7b0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2a7b0                 | ' 	}
2a7b0                 | ' 
2a7b0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2a7b0                 | LR__4303
2a7b0     0C 4E 05 F1 | 	add	fp, #12
2a7b4     A7 FA 01 FB | 	rdlong	result1, fp
2a7b8     0C 4E 85 F1 | 	sub	fp, #12
2a7bc     01 FA 15 F2 | 	cmp	result1, #1 wc
2a7c0     90 06 90 CD |  if_b	jmp	#LR__4322
2a7c4     04 4E 05 F1 | 	add	fp, #4
2a7c8     A7 FA 01 FB | 	rdlong	result1, fp
2a7cc     04 4E 85 F1 | 	sub	fp, #4
2a7d0     14 FA 05 F1 | 	add	result1, #20
2a7d4     FD FA 01 FB | 	rdlong	result1, result1
2a7d8     FF FB CD F7 | 	test	result1, #511 wz
2a7dc     D8 04 90 5D |  if_ne	jmp	#LR__4318
2a7e0     04 4E 05 F1 | 	add	fp, #4
2a7e4     A7 FA 01 FB | 	rdlong	result1, fp
2a7e8     14 FA 05 F1 | 	add	result1, #20
2a7ec     FD FA 01 FB | 	rdlong	result1, result1
2a7f0     09 FA 45 F0 | 	shr	result1, #9
2a7f4     14 4E 05 F1 | 	add	fp, #20
2a7f8     A7 14 02 FB | 	rdlong	arg02, fp
2a7fc     0A 14 06 F1 | 	add	arg02, #10
2a800     0A 19 E2 FA | 	rdword	arg04, arg02
2a804     0C 15 32 F9 | 	getword	arg02, arg04, #0
2a808     01 14 86 F1 | 	sub	arg02, #1
2a80c     0A FB 09 F5 | 	and	result1, arg02 wz
2a810     14 4E 05 F1 | 	add	fp, #20
2a814     A7 FA 61 FC | 	wrlong	result1, fp
2a818     2C 4E 85 F1 | 	sub	fp, #44
2a81c     44 01 90 5D |  if_ne	jmp	#LR__4309
2a820     04 4E 05 F1 | 	add	fp, #4
2a824     A7 FA 01 FB | 	rdlong	result1, fp
2a828     04 4E 85 F1 | 	sub	fp, #4
2a82c     14 FA 05 F1 | 	add	result1, #20
2a830     FD 14 0A FB | 	rdlong	arg02, result1 wz
2a834     44 00 90 5D |  if_ne	jmp	#LR__4304
2a838     04 4E 05 F1 | 	add	fp, #4
2a83c     A7 14 02 FB | 	rdlong	arg02, fp
2a840     08 14 06 F1 | 	add	arg02, #8
2a844     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2a848     18 4E 05 F1 | 	add	fp, #24
2a84c     A7 14 62 FC | 	wrlong	arg02, fp
2a850     1C 4E 85 F1 | 	sub	fp, #28
2a854     4C 00 90 5D |  if_ne	jmp	#LR__4305
2a858     04 4E 05 F1 | 	add	fp, #4
2a85c     A7 12 02 FB | 	rdlong	arg01, fp
2a860     04 4E 85 F1 | 	sub	fp, #4
2a864     00 14 06 F6 | 	mov	arg02, #0
2a868     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2a86c     1C 4E 05 F1 | 	add	fp, #28
2a870     A7 FA 61 FC | 	wrlong	result1, fp
2a874     1C 4E 85 F1 | 	sub	fp, #28
2a878     28 00 90 FD | 	jmp	#LR__4305
2a87c                 | LR__4304
2a87c     04 4E 05 F1 | 	add	fp, #4
2a880     A7 18 02 FB | 	rdlong	arg04, fp
2a884     0C 13 02 F6 | 	mov	arg01, arg04
2a888     04 4E 85 F1 | 	sub	fp, #4
2a88c     18 18 06 F1 | 	add	arg04, #24
2a890     0C 15 02 FB | 	rdlong	arg02, arg04
2a894     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2a898     1C 4E 05 F1 | 	add	fp, #28
2a89c     A7 FA 61 FC | 	wrlong	result1, fp
2a8a0     1C 4E 85 F1 | 	sub	fp, #28
2a8a4                 | LR__4305
2a8a4     1C 4E 05 F1 | 	add	fp, #28
2a8a8     A7 FA 09 FB | 	rdlong	result1, fp wz
2a8ac     1C 4E 85 F1 | 	sub	fp, #28
2a8b0     A0 05 90 AD |  if_e	jmp	#LR__4322
2a8b4     1C 4E 05 F1 | 	add	fp, #28
2a8b8     A7 FA 01 FB | 	rdlong	result1, fp
2a8bc     1C 4E 85 F1 | 	sub	fp, #28
2a8c0     01 FA 0D F2 | 	cmp	result1, #1 wz
2a8c4     1C 00 90 5D |  if_ne	jmp	#LR__4306
2a8c8     04 4E 05 F1 | 	add	fp, #4
2a8cc     A7 FA 01 FB | 	rdlong	result1, fp
2a8d0     04 4E 85 F1 | 	sub	fp, #4
2a8d4     11 FA 05 F1 | 	add	result1, #17
2a8d8     FD 04 48 FC | 	wrbyte	#2, result1
2a8dc     02 FA 05 F6 | 	mov	result1, #2
2a8e0     98 05 90 FD | 	jmp	#LR__4323
2a8e4                 | LR__4306
2a8e4     1C 4E 05 F1 | 	add	fp, #28
2a8e8     A7 FA 01 FB | 	rdlong	result1, fp
2a8ec     1C 4E 85 F1 | 	sub	fp, #28
2a8f0     FF FF 7F FF 
2a8f4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a8f8     1C 00 90 5D |  if_ne	jmp	#LR__4307
2a8fc     04 4E 05 F1 | 	add	fp, #4
2a900     A7 FA 01 FB | 	rdlong	result1, fp
2a904     04 4E 85 F1 | 	sub	fp, #4
2a908     11 FA 05 F1 | 	add	result1, #17
2a90c     FD 02 48 FC | 	wrbyte	#1, result1
2a910     01 FA 05 F6 | 	mov	result1, #1
2a914     64 05 90 FD | 	jmp	#LR__4323
2a918                 | LR__4307
2a918     04 4E 05 F1 | 	add	fp, #4
2a91c     A7 FA 01 FB | 	rdlong	result1, fp
2a920     18 4E 05 F1 | 	add	fp, #24
2a924     A7 18 02 FB | 	rdlong	arg04, fp
2a928     18 FA 05 F1 | 	add	result1, #24
2a92c     FD 18 62 FC | 	wrlong	arg04, result1
2a930     18 4E 85 F1 | 	sub	fp, #24
2a934     A7 FA 01 FB | 	rdlong	result1, fp
2a938     04 4E 85 F1 | 	sub	fp, #4
2a93c     08 FA 05 F1 | 	add	result1, #8
2a940     FD FA 09 FB | 	rdlong	result1, result1 wz
2a944     1C 00 90 5D |  if_ne	jmp	#LR__4308
2a948     04 4E 05 F1 | 	add	fp, #4
2a94c     A7 18 02 FB | 	rdlong	arg04, fp
2a950     18 4E 05 F1 | 	add	fp, #24
2a954     A7 FA 01 FB | 	rdlong	result1, fp
2a958     1C 4E 85 F1 | 	sub	fp, #28
2a95c     08 18 06 F1 | 	add	arg04, #8
2a960     0C FB 61 FC | 	wrlong	result1, arg04
2a964                 | LR__4308
2a964                 | LR__4309
2a964     04 4E 05 F1 | 	add	fp, #4
2a968     A7 18 02 FB | 	rdlong	arg04, fp
2a96c     04 4E 85 F1 | 	sub	fp, #4
2a970     10 18 06 F1 | 	add	arg04, #16
2a974     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a978     80 18 CE F7 | 	test	arg04, #128 wz
2a97c     7C 00 90 AD |  if_e	jmp	#LR__4311
2a980     18 4E 05 F1 | 	add	fp, #24
2a984     A7 18 02 FB | 	rdlong	arg04, fp
2a988     01 18 06 F1 | 	add	arg04, #1
2a98c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a990     14 4E 85 F1 | 	sub	fp, #20
2a994     A7 18 02 FB | 	rdlong	arg04, fp
2a998     0C 15 02 F6 | 	mov	arg02, arg04
2a99c     28 14 06 F1 | 	add	arg02, #40
2a9a0     04 4E 85 F1 | 	sub	fp, #4
2a9a4     1C 18 06 F1 | 	add	arg04, #28
2a9a8     0C 17 02 FB | 	rdlong	arg03, arg04
2a9ac     01 18 06 F6 | 	mov	arg04, #1
2a9b0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2a9b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9b8     1C 00 90 AD |  if_e	jmp	#LR__4310
2a9bc     04 4E 05 F1 | 	add	fp, #4
2a9c0     A7 FA 01 FB | 	rdlong	result1, fp
2a9c4     04 4E 85 F1 | 	sub	fp, #4
2a9c8     11 FA 05 F1 | 	add	result1, #17
2a9cc     FD 02 48 FC | 	wrbyte	#1, result1
2a9d0     01 FA 05 F6 | 	mov	result1, #1
2a9d4     A4 04 90 FD | 	jmp	#LR__4323
2a9d8                 | LR__4310
2a9d8     04 4E 05 F1 | 	add	fp, #4
2a9dc     A7 18 02 FB | 	rdlong	arg04, fp
2a9e0     0C FB 01 F6 | 	mov	result1, arg04
2a9e4     04 4E 85 F1 | 	sub	fp, #4
2a9e8     10 18 06 F1 | 	add	arg04, #16
2a9ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a9f0     7F 18 06 F5 | 	and	arg04, #127
2a9f4     10 FA 05 F1 | 	add	result1, #16
2a9f8     FD 18 42 FC | 	wrbyte	arg04, result1
2a9fc                 | LR__4311
2a9fc     18 4E 05 F1 | 	add	fp, #24
2aa00     A7 12 02 FB | 	rdlong	arg01, fp
2aa04     14 4E 85 F1 | 	sub	fp, #20
2aa08     A7 14 02 FB | 	rdlong	arg02, fp
2aa0c     04 4E 85 F1 | 	sub	fp, #4
2aa10     18 14 06 F1 | 	add	arg02, #24
2aa14     0A 15 02 FB | 	rdlong	arg02, arg02
2aa18     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2aa1c     20 4E 05 F1 | 	add	fp, #32
2aa20     A7 FA 61 FC | 	wrlong	result1, fp
2aa24     20 4E 85 F1 | 	sub	fp, #32
2aa28     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa2c     1C 00 90 5D |  if_ne	jmp	#LR__4312
2aa30     04 4E 05 F1 | 	add	fp, #4
2aa34     A7 FA 01 FB | 	rdlong	result1, fp
2aa38     04 4E 85 F1 | 	sub	fp, #4
2aa3c     11 FA 05 F1 | 	add	result1, #17
2aa40     FD 04 48 FC | 	wrbyte	#2, result1
2aa44     02 FA 05 F6 | 	mov	result1, #2
2aa48     30 04 90 FD | 	jmp	#LR__4323
2aa4c                 | LR__4312
2aa4c     20 4E 05 F1 | 	add	fp, #32
2aa50     A7 FA 01 FB | 	rdlong	result1, fp
2aa54     0C 4E 05 F1 | 	add	fp, #12
2aa58     A7 1E 02 FB | 	rdlong	local01, fp
2aa5c     0F FB 01 F1 | 	add	result1, local01
2aa60     0C 4E 85 F1 | 	sub	fp, #12
2aa64     A7 FA 61 FC | 	wrlong	result1, fp
2aa68     14 4E 85 F1 | 	sub	fp, #20
2aa6c     A7 FA 01 FB | 	rdlong	result1, fp
2aa70     09 FA 45 F0 | 	shr	result1, #9
2aa74     1C 4E 05 F1 | 	add	fp, #28
2aa78     A7 FA 61 FC | 	wrlong	result1, fp
2aa7c     28 4E 85 F1 | 	sub	fp, #40
2aa80     01 FA 15 F2 | 	cmp	result1, #1 wc
2aa84     60 01 90 CD |  if_b	jmp	#LR__4316
2aa88     2C 4E 05 F1 | 	add	fp, #44
2aa8c     A7 FA 01 FB | 	rdlong	result1, fp
2aa90     04 4E 85 F1 | 	sub	fp, #4
2aa94     A7 18 02 FB | 	rdlong	arg04, fp
2aa98     0C FB 01 F1 | 	add	result1, arg04
2aa9c     10 4E 85 F1 | 	sub	fp, #16
2aaa0     A7 18 02 FB | 	rdlong	arg04, fp
2aaa4     18 4E 85 F1 | 	sub	fp, #24
2aaa8     0A 18 06 F1 | 	add	arg04, #10
2aaac     0C 19 E2 FA | 	rdword	arg04, arg04
2aab0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2aab4     28 00 90 ED |  if_be	jmp	#LR__4313
2aab8     18 4E 05 F1 | 	add	fp, #24
2aabc     A7 FA 01 FB | 	rdlong	result1, fp
2aac0     0A FA 05 F1 | 	add	result1, #10
2aac4     FD FA E1 FA | 	rdword	result1, result1
2aac8     14 4E 05 F1 | 	add	fp, #20
2aacc     A7 18 02 FB | 	rdlong	arg04, fp
2aad0     0C FB 81 F1 | 	sub	result1, arg04
2aad4     04 4E 85 F1 | 	sub	fp, #4
2aad8     A7 FA 61 FC | 	wrlong	result1, fp
2aadc     28 4E 85 F1 | 	sub	fp, #40
2aae0                 | LR__4313
2aae0     18 4E 05 F1 | 	add	fp, #24
2aae4     A7 18 02 FB | 	rdlong	arg04, fp
2aae8     01 18 06 F1 | 	add	arg04, #1
2aaec     0C 13 C2 FA | 	rdbyte	arg01, arg04
2aaf0     18 4E 05 F1 | 	add	fp, #24
2aaf4     A7 14 02 FB | 	rdlong	arg02, fp
2aaf8     10 4E 85 F1 | 	sub	fp, #16
2aafc     A7 16 02 FB | 	rdlong	arg03, fp
2ab00     08 4E 05 F1 | 	add	fp, #8
2ab04     A7 18 02 FB | 	rdlong	arg04, fp
2ab08     28 4E 85 F1 | 	sub	fp, #40
2ab0c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2ab10     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab14     1C 00 90 AD |  if_e	jmp	#LR__4314
2ab18     04 4E 05 F1 | 	add	fp, #4
2ab1c     A7 1E 02 FB | 	rdlong	local01, fp
2ab20     04 4E 85 F1 | 	sub	fp, #4
2ab24     11 1E 06 F1 | 	add	local01, #17
2ab28     0F 03 48 FC | 	wrbyte	#1, local01
2ab2c     01 FA 05 F6 | 	mov	result1, #1
2ab30     48 03 90 FD | 	jmp	#LR__4323
2ab34                 | LR__4314
2ab34     04 4E 05 F1 | 	add	fp, #4
2ab38     A7 FA 01 FB | 	rdlong	result1, fp
2ab3c     1C FA 05 F1 | 	add	result1, #28
2ab40     FD FA 01 FB | 	rdlong	result1, result1
2ab44     1C 4E 05 F1 | 	add	fp, #28
2ab48     A7 20 02 FB | 	rdlong	local02, fp
2ab4c     10 FB 81 F1 | 	sub	result1, local02
2ab50     08 4E 05 F1 | 	add	fp, #8
2ab54     A7 18 02 FB | 	rdlong	arg04, fp
2ab58     28 4E 85 F1 | 	sub	fp, #40
2ab5c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ab60     68 00 90 3D |  if_ae	jmp	#LR__4315
2ab64     04 4E 05 F1 | 	add	fp, #4
2ab68     A7 12 02 FB | 	rdlong	arg01, fp
2ab6c     28 12 06 F1 | 	add	arg01, #40
2ab70     2C 4E 05 F1 | 	add	fp, #44
2ab74     A7 14 02 FB | 	rdlong	arg02, fp
2ab78     2C 4E 85 F1 | 	sub	fp, #44
2ab7c     A7 FA 01 FB | 	rdlong	result1, fp
2ab80     1C FA 05 F1 | 	add	result1, #28
2ab84     FD 22 02 FB | 	rdlong	local03, result1
2ab88     1C 4E 05 F1 | 	add	fp, #28
2ab8c     A7 18 02 FB | 	rdlong	arg04, fp
2ab90     20 4E 85 F1 | 	sub	fp, #32
2ab94     0C 23 82 F1 | 	sub	local03, arg04
2ab98     09 22 66 F0 | 	shl	local03, #9
2ab9c     11 15 02 F1 | 	add	arg02, local03
2aba0     09 16 C6 F9 | 	decod	arg03, #9
2aba4     44 41 BF FD | 	call	#__system____builtin_memmove
2aba8     04 4E 05 F1 | 	add	fp, #4
2abac     A7 18 02 FB | 	rdlong	arg04, fp
2abb0     0C FB 01 F6 | 	mov	result1, arg04
2abb4     04 4E 85 F1 | 	sub	fp, #4
2abb8     10 18 06 F1 | 	add	arg04, #16
2abbc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2abc0     7F 18 06 F5 | 	and	arg04, #127
2abc4     10 FA 05 F1 | 	add	result1, #16
2abc8     FD 18 42 FC | 	wrbyte	arg04, result1
2abcc                 | LR__4315
2abcc     28 4E 05 F1 | 	add	fp, #40
2abd0     A7 FA 01 FB | 	rdlong	result1, fp
2abd4     09 FA 65 F0 | 	shl	result1, #9
2abd8     04 4E 85 F1 | 	sub	fp, #4
2abdc     A7 FA 61 FC | 	wrlong	result1, fp
2abe0     24 4E 85 F1 | 	sub	fp, #36
2abe4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2abe4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2abe4                 | ' 				}
2abe4                 | ' 
2abe4                 | ' 
2abe4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2abe4                 | ' 				continue;
2abe4     74 01 90 FD | 	jmp	#LR__4319
2abe8                 | LR__4316
2abe8     04 4E 05 F1 | 	add	fp, #4
2abec     A7 20 02 FB | 	rdlong	local02, fp
2abf0     1C 20 06 F1 | 	add	local02, #28
2abf4     10 FB 01 FB | 	rdlong	result1, local02
2abf8     1C 4E 05 F1 | 	add	fp, #28
2abfc     A7 20 02 FB | 	rdlong	local02, fp
2ac00     20 4E 85 F1 | 	sub	fp, #32
2ac04     10 FB 09 F2 | 	cmp	result1, local02 wz
2ac08     90 00 90 AD |  if_e	jmp	#LR__4317
2ac0c     04 4E 05 F1 | 	add	fp, #4
2ac10     A7 FA 01 FB | 	rdlong	result1, fp
2ac14     FD 22 02 F6 | 	mov	local03, result1
2ac18     04 4E 85 F1 | 	sub	fp, #4
2ac1c     14 22 06 F1 | 	add	local03, #20
2ac20     11 23 02 FB | 	rdlong	local03, local03
2ac24     0C FA 05 F1 | 	add	result1, #12
2ac28     FD 24 02 FB | 	rdlong	local04, result1
2ac2c     12 27 02 F6 | 	mov	local05, local04
2ac30     13 23 12 F2 | 	cmp	local03, local05 wc
2ac34     64 00 90 3D |  if_ae	jmp	#LR__4317
2ac38     18 4E 05 F1 | 	add	fp, #24
2ac3c     A7 18 02 FB | 	rdlong	arg04, fp
2ac40     01 18 06 F1 | 	add	arg04, #1
2ac44     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ac48     14 4E 85 F1 | 	sub	fp, #20
2ac4c     A7 28 02 FB | 	rdlong	local06, fp
2ac50     28 28 06 F1 | 	add	local06, #40
2ac54     14 2B 02 F6 | 	mov	local07, local06
2ac58     1C 4E 05 F1 | 	add	fp, #28
2ac5c     A7 2C 02 FB | 	rdlong	local08, fp
2ac60     20 4E 85 F1 | 	sub	fp, #32
2ac64     01 2E 06 F6 | 	mov	local09, #1
2ac68     15 15 02 F6 | 	mov	arg02, local07
2ac6c     16 17 02 F6 | 	mov	arg03, local08
2ac70     01 18 06 F6 | 	mov	arg04, #1
2ac74     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2ac78     FD 30 0A F6 | 	mov	local10, result1 wz
2ac7c     1C 00 90 AD |  if_e	jmp	#LR__4317
2ac80     04 4E 05 F1 | 	add	fp, #4
2ac84     A7 30 02 FB | 	rdlong	local10, fp
2ac88     04 4E 85 F1 | 	sub	fp, #4
2ac8c     11 30 06 F1 | 	add	local10, #17
2ac90     18 03 48 FC | 	wrbyte	#1, local10
2ac94                 | ' 				fp->fptr < fp->obj.objsize &&
2ac94                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2ac94                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2ac94     01 FA 05 F6 | 	mov	result1, #1
2ac98     E0 01 90 FD | 	jmp	#LR__4323
2ac9c                 | LR__4317
2ac9c     04 4E 05 F1 | 	add	fp, #4
2aca0     A7 18 02 FB | 	rdlong	arg04, fp
2aca4     1C 4E 05 F1 | 	add	fp, #28
2aca8     A7 FA 01 FB | 	rdlong	result1, fp
2acac     20 4E 85 F1 | 	sub	fp, #32
2acb0     1C 18 06 F1 | 	add	arg04, #28
2acb4     0C FB 61 FC | 	wrlong	result1, arg04
2acb8                 | LR__4318
2acb8     04 4E 05 F1 | 	add	fp, #4
2acbc     A7 FA 01 FB | 	rdlong	result1, fp
2acc0     14 FA 05 F1 | 	add	result1, #20
2acc4     FD FA 01 FB | 	rdlong	result1, result1
2acc8     FF FB 05 F5 | 	and	result1, #511
2accc     09 32 C6 F9 | 	decod	local11, #9
2acd0     FD 32 82 F1 | 	sub	local11, result1
2acd4     20 4E 05 F1 | 	add	fp, #32
2acd8     A7 32 62 FC | 	wrlong	local11, fp
2acdc     18 4E 85 F1 | 	sub	fp, #24
2ace0     A7 FA 01 FB | 	rdlong	result1, fp
2ace4     0C 4E 85 F1 | 	sub	fp, #12
2ace8     FD 32 1A F2 | 	cmp	local11, result1 wcz
2acec     0C 4E 05 11 |  if_a	add	fp, #12
2acf0     A7 32 02 1B |  if_a	rdlong	local11, fp
2acf4     18 4E 05 11 |  if_a	add	fp, #24
2acf8     A7 32 62 1C |  if_a	wrlong	local11, fp
2acfc     24 4E 85 11 |  if_a	sub	fp, #36
2ad00     04 4E 05 F1 | 	add	fp, #4
2ad04     A7 32 02 FB | 	rdlong	local11, fp
2ad08     19 13 02 F6 | 	mov	arg01, local11
2ad0c     28 12 06 F1 | 	add	arg01, #40
2ad10     14 32 06 F1 | 	add	local11, #20
2ad14     19 33 02 FB | 	rdlong	local11, local11
2ad18     FF 33 06 F5 | 	and	local11, #511
2ad1c     19 13 02 F1 | 	add	arg01, local11
2ad20     2C 4E 05 F1 | 	add	fp, #44
2ad24     A7 14 02 FB | 	rdlong	arg02, fp
2ad28     0C 4E 85 F1 | 	sub	fp, #12
2ad2c     A7 16 02 FB | 	rdlong	arg03, fp
2ad30     24 4E 85 F1 | 	sub	fp, #36
2ad34     B4 3F BF FD | 	call	#__system____builtin_memmove
2ad38     04 4E 05 F1 | 	add	fp, #4
2ad3c     A7 FA 01 FB | 	rdlong	result1, fp
2ad40     FD 32 02 F6 | 	mov	local11, result1
2ad44     04 4E 85 F1 | 	sub	fp, #4
2ad48     10 FA 05 F1 | 	add	result1, #16
2ad4c     FD FA C1 FA | 	rdbyte	result1, result1
2ad50     80 FA 45 F5 | 	or	result1, #128
2ad54     10 32 06 F1 | 	add	local11, #16
2ad58     19 FB 41 FC | 	wrbyte	result1, local11
2ad5c                 | LR__4319
2ad5c     0C 4E 05 F1 | 	add	fp, #12
2ad60     A7 32 02 FB | 	rdlong	local11, fp
2ad64     18 4E 05 F1 | 	add	fp, #24
2ad68     A7 FA 01 FB | 	rdlong	result1, fp
2ad6c     FD 32 82 F1 | 	sub	local11, result1
2ad70     18 4E 85 F1 | 	sub	fp, #24
2ad74     A7 32 62 FC | 	wrlong	local11, fp
2ad78     04 4E 05 F1 | 	add	fp, #4
2ad7c     A7 34 02 FB | 	rdlong	local12, fp
2ad80     1A 33 02 FB | 	rdlong	local11, local12
2ad84     14 4E 05 F1 | 	add	fp, #20
2ad88     A7 36 02 FB | 	rdlong	local13, fp
2ad8c     1B 33 02 F1 | 	add	local11, local13
2ad90     1A 33 62 FC | 	wrlong	local11, local12
2ad94     0C 4E 05 F1 | 	add	fp, #12
2ad98     A7 32 02 FB | 	rdlong	local11, fp
2ad9c     0C 4E 85 F1 | 	sub	fp, #12
2ada0     A7 38 02 FB | 	rdlong	local14, fp
2ada4     1C 33 02 F1 | 	add	local11, local14
2ada8     0C 4E 05 F1 | 	add	fp, #12
2adac     A7 32 62 FC | 	wrlong	local11, fp
2adb0     2C 4E 85 F1 | 	sub	fp, #44
2adb4     A7 3A 02 FB | 	rdlong	local15, fp
2adb8     1D 33 02 F6 | 	mov	local11, local15
2adbc     14 3A 06 F1 | 	add	local15, #20
2adc0     1D 3B 02 FB | 	rdlong	local15, local15
2adc4     20 4E 05 F1 | 	add	fp, #32
2adc8     A7 3C 02 FB | 	rdlong	local16, fp
2adcc     1E 3B 02 F1 | 	add	local15, local16
2add0     14 32 06 F1 | 	add	local11, #20
2add4     19 3B 62 FC | 	wrlong	local15, local11
2add8     20 4E 85 F1 | 	sub	fp, #32
2addc     A7 3E 02 FB | 	rdlong	local17, fp
2ade0     1F 33 02 F6 | 	mov	local11, local17
2ade4     1F 41 02 F6 | 	mov	local18, local17
2ade8     04 4E 85 F1 | 	sub	fp, #4
2adec     14 3E 06 F1 | 	add	local17, #20
2adf0     1F 43 02 FB | 	rdlong	local19, local17
2adf4     0C 40 06 F1 | 	add	local18, #12
2adf8     20 45 02 FB | 	rdlong	local20, local18
2adfc     22 43 1A F2 | 	cmp	local19, local20 wcz
2ae00     24 00 90 ED |  if_be	jmp	#LR__4320
2ae04     04 4E 05 F1 | 	add	fp, #4
2ae08     A7 26 02 FB | 	rdlong	local05, fp
2ae0c     04 4E 85 F1 | 	sub	fp, #4
2ae10     13 23 02 F6 | 	mov	local03, local05
2ae14     14 22 06 F1 | 	add	local03, #20
2ae18     11 25 02 FB | 	rdlong	local04, local03
2ae1c     14 22 86 F1 | 	sub	local03, #20
2ae20     12 47 02 F6 | 	mov	local21, local04
2ae24     20 00 90 FD | 	jmp	#LR__4321
2ae28                 | LR__4320
2ae28     04 4E 05 F1 | 	add	fp, #4
2ae2c     A7 2A 02 FB | 	rdlong	local07, fp
2ae30     04 4E 85 F1 | 	sub	fp, #4
2ae34     15 31 02 F6 | 	mov	local10, local07
2ae38     0C 30 06 F1 | 	add	local10, #12
2ae3c     18 2D 02 FB | 	rdlong	local08, local10
2ae40     0C 30 86 F1 | 	sub	local10, #12
2ae44     16 47 02 F6 | 	mov	local21, local08
2ae48                 | LR__4321
2ae48     0C 32 06 F1 | 	add	local11, #12
2ae4c     19 47 62 FC | 	wrlong	local21, local11
2ae50     5C F9 9F FD | 	jmp	#LR__4303
2ae54                 | LR__4322
2ae54     04 4E 05 F1 | 	add	fp, #4
2ae58     A7 34 02 FB | 	rdlong	local12, fp
2ae5c     1A 1F 02 F6 | 	mov	local01, local12
2ae60     04 4E 85 F1 | 	sub	fp, #4
2ae64     10 34 06 F1 | 	add	local12, #16
2ae68     1A 33 C2 FA | 	rdbyte	local11, local12
2ae6c     40 32 46 F5 | 	or	local11, #64
2ae70     10 1E 06 F1 | 	add	local01, #16
2ae74     0F 33 42 FC | 	wrbyte	local11, local01
2ae78                 | ' 
2ae78                 | ' 
2ae78                 | ' 
2ae78                 | ' 
2ae78                 | ' 
2ae78                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2ae78                 | ' 		fp->flag |=  0x80 ;
2ae78                 | ' 
2ae78                 | ' 	}
2ae78                 | ' 
2ae78                 | ' 	fp->flag |=  0x40 ;
2ae78                 | ' 
2ae78                 | ' 	return FR_OK ;
2ae78     00 FA 05 F6 | 	mov	result1, #0
2ae7c                 | LR__4323
2ae7c     A7 F0 03 F6 | 	mov	ptra, fp
2ae80     B2 00 A0 FD | 	call	#popregs_
2ae84                 | _fatfs_cc_f_write_ret
2ae84     2D 00 64 FD | 	ret
2ae88                 | 
2ae88                 | _fatfs_cc_f_sync
2ae88     00 4A 05 F6 | 	mov	COUNT_, #0
2ae8c     A8 00 A0 FD | 	call	#pushregs_
2ae90     18 F0 07 F1 | 	add	ptra, #24
2ae94     04 4E 05 F1 | 	add	fp, #4
2ae98     A7 12 62 FC | 	wrlong	arg01, fp
2ae9c     08 4E 05 F1 | 	add	fp, #8
2aea0     A7 14 02 F6 | 	mov	arg02, fp
2aea4     0C 4E 85 F1 | 	sub	fp, #12
2aea8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2aeac     08 4E 05 F1 | 	add	fp, #8
2aeb0     A7 FA 61 FC | 	wrlong	result1, fp
2aeb4     08 4E 85 F1 | 	sub	fp, #8
2aeb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2aebc     C0 01 90 5D |  if_ne	jmp	#LR__4333
2aec0     04 4E 05 F1 | 	add	fp, #4
2aec4     A7 18 02 FB | 	rdlong	arg04, fp
2aec8     04 4E 85 F1 | 	sub	fp, #4
2aecc     10 18 06 F1 | 	add	arg04, #16
2aed0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2aed4     40 18 CE F7 | 	test	arg04, #64 wz
2aed8     A4 01 90 AD |  if_e	jmp	#LR__4332
2aedc     04 4E 05 F1 | 	add	fp, #4
2aee0     A7 18 02 FB | 	rdlong	arg04, fp
2aee4     04 4E 85 F1 | 	sub	fp, #4
2aee8     10 18 06 F1 | 	add	arg04, #16
2aeec     0C 19 C2 FA | 	rdbyte	arg04, arg04
2aef0     80 18 CE F7 | 	test	arg04, #128 wz
2aef4     64 00 90 AD |  if_e	jmp	#LR__4330
2aef8     0C 4E 05 F1 | 	add	fp, #12
2aefc     A7 18 02 FB | 	rdlong	arg04, fp
2af00     01 18 06 F1 | 	add	arg04, #1
2af04     0C 13 C2 FA | 	rdbyte	arg01, arg04
2af08     08 4E 85 F1 | 	sub	fp, #8
2af0c     A7 18 02 FB | 	rdlong	arg04, fp
2af10     0C 15 02 F6 | 	mov	arg02, arg04
2af14     28 14 06 F1 | 	add	arg02, #40
2af18     04 4E 85 F1 | 	sub	fp, #4
2af1c     1C 18 06 F1 | 	add	arg04, #28
2af20     0C 17 02 FB | 	rdlong	arg03, arg04
2af24     01 18 06 F6 | 	mov	arg04, #1
2af28     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2af2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2af30     01 FA 05 56 |  if_ne	mov	result1, #1
2af34     54 01 90 5D |  if_ne	jmp	#LR__4334
2af38     04 4E 05 F1 | 	add	fp, #4
2af3c     A7 18 02 FB | 	rdlong	arg04, fp
2af40     0C 17 02 F6 | 	mov	arg03, arg04
2af44     04 4E 85 F1 | 	sub	fp, #4
2af48     10 18 06 F1 | 	add	arg04, #16
2af4c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2af50     7F 18 06 F5 | 	and	arg04, #127
2af54     10 16 06 F1 | 	add	arg03, #16
2af58     0B 19 42 FC | 	wrbyte	arg04, arg03
2af5c                 | LR__4330
2af5c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2af60     10 4E 05 F1 | 	add	fp, #16
2af64     A7 FA 61 FC | 	wrlong	result1, fp
2af68     04 4E 85 F1 | 	sub	fp, #4
2af6c     A7 12 02 FB | 	rdlong	arg01, fp
2af70     08 4E 85 F1 | 	sub	fp, #8
2af74     A7 18 02 FB | 	rdlong	arg04, fp
2af78     04 4E 85 F1 | 	sub	fp, #4
2af7c     20 18 06 F1 | 	add	arg04, #32
2af80     0C 15 02 FB | 	rdlong	arg02, arg04
2af84     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2af88     08 4E 05 F1 | 	add	fp, #8
2af8c     A7 FA 61 FC | 	wrlong	result1, fp
2af90     08 4E 85 F1 | 	sub	fp, #8
2af94     00 FA 0D F2 | 	cmp	result1, #0 wz
2af98     E4 00 90 5D |  if_ne	jmp	#LR__4331
2af9c     04 4E 05 F1 | 	add	fp, #4
2afa0     A7 18 02 FB | 	rdlong	arg04, fp
2afa4     24 18 06 F1 | 	add	arg04, #36
2afa8     0C 19 02 FB | 	rdlong	arg04, arg04
2afac     10 4E 05 F1 | 	add	fp, #16
2afb0     A7 18 62 FC | 	wrlong	arg04, fp
2afb4     0C 17 02 F6 | 	mov	arg03, arg04
2afb8     0B 16 06 F1 | 	add	arg03, #11
2afbc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2afc0     20 16 46 F5 | 	or	arg03, #32
2afc4     0B 18 06 F1 | 	add	arg04, #11
2afc8     0C 17 42 FC | 	wrbyte	arg03, arg04
2afcc     10 4E 85 F1 | 	sub	fp, #16
2afd0     A7 18 02 FB | 	rdlong	arg04, fp
2afd4     0C 13 02 FB | 	rdlong	arg01, arg04
2afd8     10 4E 05 F1 | 	add	fp, #16
2afdc     A7 14 02 FB | 	rdlong	arg02, fp
2afe0     14 4E 85 F1 | 	sub	fp, #20
2afe4     08 18 06 F1 | 	add	arg04, #8
2afe8     0C 17 02 FB | 	rdlong	arg03, arg04
2afec     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2aff0     14 4E 05 F1 | 	add	fp, #20
2aff4     A7 12 02 FB | 	rdlong	arg01, fp
2aff8     1C 12 06 F1 | 	add	arg01, #28
2affc     10 4E 85 F1 | 	sub	fp, #16
2b000     A7 18 02 FB | 	rdlong	arg04, fp
2b004     0C 18 06 F1 | 	add	arg04, #12
2b008     0C 15 02 FB | 	rdlong	arg02, arg04
2b00c     09 15 62 FC | 	wrlong	arg02, arg01
2b010     10 4E 05 F1 | 	add	fp, #16
2b014     A7 12 02 FB | 	rdlong	arg01, fp
2b018     16 12 06 F1 | 	add	arg01, #22
2b01c     04 4E 85 F1 | 	sub	fp, #4
2b020     A7 14 02 FB | 	rdlong	arg02, fp
2b024     09 15 62 FC | 	wrlong	arg02, arg01
2b028     04 4E 05 F1 | 	add	fp, #4
2b02c     A7 12 02 FB | 	rdlong	arg01, fp
2b030     12 12 06 F1 | 	add	arg01, #18
2b034     09 01 58 FC | 	wrword	#0, arg01
2b038     08 4E 85 F1 | 	sub	fp, #8
2b03c     A7 18 02 FB | 	rdlong	arg04, fp
2b040     03 18 06 F1 | 	add	arg04, #3
2b044     0C 03 48 FC | 	wrbyte	#1, arg04
2b048     A7 12 02 FB | 	rdlong	arg01, fp
2b04c     0C 4E 85 F1 | 	sub	fp, #12
2b050     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2b054     08 4E 05 F1 | 	add	fp, #8
2b058     A7 FA 61 FC | 	wrlong	result1, fp
2b05c     04 4E 85 F1 | 	sub	fp, #4
2b060     A7 18 02 FB | 	rdlong	arg04, fp
2b064     0C 17 02 F6 | 	mov	arg03, arg04
2b068     04 4E 85 F1 | 	sub	fp, #4
2b06c     10 18 06 F1 | 	add	arg04, #16
2b070     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b074     BF 18 06 F5 | 	and	arg04, #191
2b078     10 16 06 F1 | 	add	arg03, #16
2b07c     0B 19 42 FC | 	wrbyte	arg04, arg03
2b080                 | LR__4331
2b080                 | LR__4332
2b080                 | LR__4333
2b080                 | ' 					dir = fp->dir_ptr;
2b080                 | ' 					dir[ 11 ] |=  0x20 ;
2b080                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2b080                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2b080                 | ' 					st_dword(dir +  22 , tm);
2b080                 | ' 					st_word(dir +  18 , 0);
2b080                 | ' 					fs->wflag = 1;
2b080                 | ' 					res = sync_fs(fs);
2b080                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2b080                 | ' 				}
2b080                 | ' 			}
2b080                 | ' 		}
2b080                 | ' 	}
2b080                 | ' 
2b080                 | ' 	return res ;
2b080     08 4E 05 F1 | 	add	fp, #8
2b084     A7 FA 01 FB | 	rdlong	result1, fp
2b088     08 4E 85 F1 | 	sub	fp, #8
2b08c                 | LR__4334
2b08c     A7 F0 03 F6 | 	mov	ptra, fp
2b090     B2 00 A0 FD | 	call	#popregs_
2b094                 | _fatfs_cc_f_sync_ret
2b094     2D 00 64 FD | 	ret
2b098                 | 
2b098                 | _fatfs_cc_f_close
2b098     01 4A 05 F6 | 	mov	COUNT_, #1
2b09c     A8 00 A0 FD | 	call	#pushregs_
2b0a0     10 F0 07 F1 | 	add	ptra, #16
2b0a4     04 4E 05 F1 | 	add	fp, #4
2b0a8     A7 12 62 FC | 	wrlong	arg01, fp
2b0ac     04 4E 85 F1 | 	sub	fp, #4
2b0b0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2b0b4     08 4E 05 F1 | 	add	fp, #8
2b0b8     A7 FA 61 FC | 	wrlong	result1, fp
2b0bc     08 4E 85 F1 | 	sub	fp, #8
2b0c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b0c4     38 00 90 5D |  if_ne	jmp	#LR__4340
2b0c8     04 4E 05 F1 | 	add	fp, #4
2b0cc     A7 12 02 FB | 	rdlong	arg01, fp
2b0d0     08 4E 05 F1 | 	add	fp, #8
2b0d4     A7 14 02 F6 | 	mov	arg02, fp
2b0d8     0C 4E 85 F1 | 	sub	fp, #12
2b0dc     9C E6 BF FD | 	call	#_fatfs_cc_validate
2b0e0     08 4E 05 F1 | 	add	fp, #8
2b0e4     A7 FA 61 FC | 	wrlong	result1, fp
2b0e8     08 4E 85 F1 | 	sub	fp, #8
2b0ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2b0f0     04 4E 05 A1 |  if_e	add	fp, #4
2b0f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
2b0f8     04 4E 85 A1 |  if_e	sub	fp, #4
2b0fc     0F 01 68 AC |  if_e	wrlong	#0, local01
2b100                 | LR__4340
2b100                 | ' 
2b100                 | ' 
2b100                 | ' 
2b100                 | ' 
2b100                 | ' 			fp->obj.fs = 0;
2b100                 | ' #line 4192 "ff.c"
2b100                 | ' 		}
2b100                 | ' 	}
2b100                 | ' 	return res;
2b100     08 4E 05 F1 | 	add	fp, #8
2b104     A7 FA 01 FB | 	rdlong	result1, fp
2b108     08 4E 85 F1 | 	sub	fp, #8
2b10c     A7 F0 03 F6 | 	mov	ptra, fp
2b110     B2 00 A0 FD | 	call	#popregs_
2b114                 | _fatfs_cc_f_close_ret
2b114     2D 00 64 FD | 	ret
2b118                 | 
2b118                 | _fatfs_cc_f_lseek
2b118     00 4A 05 F6 | 	mov	COUNT_, #0
2b11c     A8 00 A0 FD | 	call	#pushregs_
2b120     24 F0 07 F1 | 	add	ptra, #36
2b124     04 4E 05 F1 | 	add	fp, #4
2b128     A7 12 62 FC | 	wrlong	arg01, fp
2b12c     04 4E 05 F1 | 	add	fp, #4
2b130     A7 14 62 FC | 	wrlong	arg02, fp
2b134     04 4E 85 F1 | 	sub	fp, #4
2b138     A7 12 02 FB | 	rdlong	arg01, fp
2b13c     0C 4E 05 F1 | 	add	fp, #12
2b140     A7 14 02 F6 | 	mov	arg02, fp
2b144     10 4E 85 F1 | 	sub	fp, #16
2b148     30 E6 BF FD | 	call	#_fatfs_cc_validate
2b14c     0C 4E 05 F1 | 	add	fp, #12
2b150     A7 FA 61 FC | 	wrlong	result1, fp
2b154     0C 4E 85 F1 | 	sub	fp, #12
2b158     00 FA 0D F2 | 	cmp	result1, #0 wz
2b15c     1C 00 90 5D |  if_ne	jmp	#LR__4350
2b160     04 4E 05 F1 | 	add	fp, #4
2b164     A7 18 02 FB | 	rdlong	arg04, fp
2b168     11 18 06 F1 | 	add	arg04, #17
2b16c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b170     08 4E 05 F1 | 	add	fp, #8
2b174     A7 18 62 FC | 	wrlong	arg04, fp
2b178     0C 4E 85 F1 | 	sub	fp, #12
2b17c                 | LR__4350
2b17c     0C 4E 05 F1 | 	add	fp, #12
2b180     A7 18 0A FB | 	rdlong	arg04, fp wz
2b184     0C 4E 85 F1 | 	sub	fp, #12
2b188     0C 4E 05 51 |  if_ne	add	fp, #12
2b18c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2b190     0C 4E 85 51 |  if_ne	sub	fp, #12
2b194     40 06 90 5D |  if_ne	jmp	#LR__4373
2b198     04 4E 05 F1 | 	add	fp, #4
2b19c     A7 18 02 FB | 	rdlong	arg04, fp
2b1a0     04 4E 05 F1 | 	add	fp, #4
2b1a4     A7 16 02 FB | 	rdlong	arg03, fp
2b1a8     08 4E 85 F1 | 	sub	fp, #8
2b1ac     0C 18 06 F1 | 	add	arg04, #12
2b1b0     0C 19 02 FB | 	rdlong	arg04, arg04
2b1b4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2b1b8     3C 00 90 ED |  if_be	jmp	#LR__4351
2b1bc     04 4E 05 F1 | 	add	fp, #4
2b1c0     A7 16 02 FB | 	rdlong	arg03, fp
2b1c4     04 4E 85 F1 | 	sub	fp, #4
2b1c8     10 16 06 F1 | 	add	arg03, #16
2b1cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b1d0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2b1d4     02 16 CE F7 | 	test	arg03, #2 wz
2b1d8     1C 00 90 5D |  if_ne	jmp	#LR__4351
2b1dc     04 4E 05 F1 | 	add	fp, #4
2b1e0     A7 16 02 FB | 	rdlong	arg03, fp
2b1e4     0C 16 06 F1 | 	add	arg03, #12
2b1e8     0B 17 02 FB | 	rdlong	arg03, arg03
2b1ec     04 4E 05 F1 | 	add	fp, #4
2b1f0     A7 16 62 FC | 	wrlong	arg03, fp
2b1f4     08 4E 85 F1 | 	sub	fp, #8
2b1f8                 | LR__4351
2b1f8     04 4E 05 F1 | 	add	fp, #4
2b1fc     A7 16 02 FB | 	rdlong	arg03, fp
2b200     14 16 06 F1 | 	add	arg03, #20
2b204     0B 17 02 FB | 	rdlong	arg03, arg03
2b208     1C 4E 05 F1 | 	add	fp, #28
2b20c     A7 16 62 FC | 	wrlong	arg03, fp
2b210     1C 4E 85 F1 | 	sub	fp, #28
2b214     A7 16 02 FB | 	rdlong	arg03, fp
2b218     18 4E 05 F1 | 	add	fp, #24
2b21c     A7 00 68 FC | 	wrlong	#0, fp
2b220     14 16 06 F1 | 	add	arg03, #20
2b224     0B 01 68 FC | 	wrlong	#0, arg03
2b228     14 4E 85 F1 | 	sub	fp, #20
2b22c     A7 16 02 FB | 	rdlong	arg03, fp
2b230     08 4E 85 F1 | 	sub	fp, #8
2b234     01 16 16 F2 | 	cmp	arg03, #1 wc
2b238     E4 03 90 CD |  if_b	jmp	#LR__4367
2b23c     10 4E 05 F1 | 	add	fp, #16
2b240     A7 16 02 FB | 	rdlong	arg03, fp
2b244     0A 16 06 F1 | 	add	arg03, #10
2b248     0B 19 E2 FA | 	rdword	arg04, arg03
2b24c     09 18 66 F0 | 	shl	arg04, #9
2b250     08 4E 05 F1 | 	add	fp, #8
2b254     A7 18 62 FC | 	wrlong	arg04, fp
2b258     08 4E 05 F1 | 	add	fp, #8
2b25c     A7 18 02 FB | 	rdlong	arg04, fp
2b260     20 4E 85 F1 | 	sub	fp, #32
2b264     01 18 16 F2 | 	cmp	arg04, #1 wc
2b268     AC 00 90 CD |  if_b	jmp	#LR__4352
2b26c     08 4E 05 F1 | 	add	fp, #8
2b270     A7 18 02 FB | 	rdlong	arg04, fp
2b274     01 18 86 F1 | 	sub	arg04, #1
2b278     10 4E 05 F1 | 	add	fp, #16
2b27c     A7 16 02 FB | 	rdlong	arg03, fp
2b280     0B 19 12 FD | 	qdiv	arg04, arg03
2b284     08 4E 05 F1 | 	add	fp, #8
2b288     A7 FA 01 FB | 	rdlong	result1, fp
2b28c     01 FA 85 F1 | 	sub	result1, #1
2b290     18 18 62 FD | 	getqx	arg04
2b294     0B FB 11 FD | 	qdiv	result1, arg03
2b298     20 4E 85 F1 | 	sub	fp, #32
2b29c     18 16 62 FD | 	getqx	arg03
2b2a0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2b2a4     70 00 90 CD |  if_b	jmp	#LR__4352
2b2a8     04 4E 05 F1 | 	add	fp, #4
2b2ac     A7 16 02 FB | 	rdlong	arg03, fp
2b2b0     1C 4E 05 F1 | 	add	fp, #28
2b2b4     A7 FA 01 FB | 	rdlong	result1, fp
2b2b8     01 FA 85 F1 | 	sub	result1, #1
2b2bc     08 4E 85 F1 | 	sub	fp, #8
2b2c0     A7 18 02 FB | 	rdlong	arg04, fp
2b2c4     01 18 86 F1 | 	sub	arg04, #1
2b2c8     0C FB 21 F5 | 	andn	result1, arg04
2b2cc     14 16 06 F1 | 	add	arg03, #20
2b2d0     0B FB 61 FC | 	wrlong	result1, arg03
2b2d4     10 4E 85 F1 | 	sub	fp, #16
2b2d8     A7 16 02 FB | 	rdlong	arg03, fp
2b2dc     04 4E 85 F1 | 	sub	fp, #4
2b2e0     A7 18 02 FB | 	rdlong	arg04, fp
2b2e4     14 18 06 F1 | 	add	arg04, #20
2b2e8     0C 19 02 FB | 	rdlong	arg04, arg04
2b2ec     0C 17 82 F1 | 	sub	arg03, arg04
2b2f0     04 4E 05 F1 | 	add	fp, #4
2b2f4     A7 16 62 FC | 	wrlong	arg03, fp
2b2f8     04 4E 85 F1 | 	sub	fp, #4
2b2fc     A7 16 02 FB | 	rdlong	arg03, fp
2b300     18 16 06 F1 | 	add	arg03, #24
2b304     0B 17 02 FB | 	rdlong	arg03, arg03
2b308     10 4E 05 F1 | 	add	fp, #16
2b30c     A7 16 62 FC | 	wrlong	arg03, fp
2b310     14 4E 85 F1 | 	sub	fp, #20
2b314     D0 00 90 FD | 	jmp	#LR__4356
2b318                 | LR__4352
2b318     04 4E 05 F1 | 	add	fp, #4
2b31c     A7 16 02 FB | 	rdlong	arg03, fp
2b320     08 16 06 F1 | 	add	arg03, #8
2b324     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b328     10 4E 05 F1 | 	add	fp, #16
2b32c     A7 16 62 FC | 	wrlong	arg03, fp
2b330     14 4E 85 F1 | 	sub	fp, #20
2b334     94 00 90 5D |  if_ne	jmp	#LR__4355
2b338     04 4E 05 F1 | 	add	fp, #4
2b33c     A7 12 02 FB | 	rdlong	arg01, fp
2b340     04 4E 85 F1 | 	sub	fp, #4
2b344     00 14 06 F6 | 	mov	arg02, #0
2b348     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2b34c     14 4E 05 F1 | 	add	fp, #20
2b350     A7 FA 61 FC | 	wrlong	result1, fp
2b354     14 4E 85 F1 | 	sub	fp, #20
2b358     01 FA 0D F2 | 	cmp	result1, #1 wz
2b35c     1C 00 90 5D |  if_ne	jmp	#LR__4353
2b360     04 4E 05 F1 | 	add	fp, #4
2b364     A7 16 02 FB | 	rdlong	arg03, fp
2b368     04 4E 85 F1 | 	sub	fp, #4
2b36c     11 16 06 F1 | 	add	arg03, #17
2b370     0B 05 48 FC | 	wrbyte	#2, arg03
2b374     02 FA 05 F6 | 	mov	result1, #2
2b378     5C 04 90 FD | 	jmp	#LR__4373
2b37c                 | LR__4353
2b37c     14 4E 05 F1 | 	add	fp, #20
2b380     A7 FA 01 FB | 	rdlong	result1, fp
2b384     14 4E 85 F1 | 	sub	fp, #20
2b388     FF FF 7F FF 
2b38c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b390     1C 00 90 5D |  if_ne	jmp	#LR__4354
2b394     04 4E 05 F1 | 	add	fp, #4
2b398     A7 16 02 FB | 	rdlong	arg03, fp
2b39c     04 4E 85 F1 | 	sub	fp, #4
2b3a0     11 16 06 F1 | 	add	arg03, #17
2b3a4     0B 03 48 FC | 	wrbyte	#1, arg03
2b3a8     01 FA 05 F6 | 	mov	result1, #1
2b3ac     28 04 90 FD | 	jmp	#LR__4373
2b3b0                 | LR__4354
2b3b0     04 4E 05 F1 | 	add	fp, #4
2b3b4     A7 16 02 FB | 	rdlong	arg03, fp
2b3b8     10 4E 05 F1 | 	add	fp, #16
2b3bc     A7 18 02 FB | 	rdlong	arg04, fp
2b3c0     14 4E 85 F1 | 	sub	fp, #20
2b3c4     08 16 06 F1 | 	add	arg03, #8
2b3c8     0B 19 62 FC | 	wrlong	arg04, arg03
2b3cc                 | LR__4355
2b3cc     04 4E 05 F1 | 	add	fp, #4
2b3d0     A7 16 02 FB | 	rdlong	arg03, fp
2b3d4     10 4E 05 F1 | 	add	fp, #16
2b3d8     A7 18 02 FB | 	rdlong	arg04, fp
2b3dc     14 4E 85 F1 | 	sub	fp, #20
2b3e0     18 16 06 F1 | 	add	arg03, #24
2b3e4     0B 19 62 FC | 	wrlong	arg04, arg03
2b3e8                 | LR__4356
2b3e8     14 4E 05 F1 | 	add	fp, #20
2b3ec     A7 16 0A FB | 	rdlong	arg03, fp wz
2b3f0     14 4E 85 F1 | 	sub	fp, #20
2b3f4     28 02 90 AD |  if_e	jmp	#LR__4366
2b3f8                 | ' 				while (ofs > bcs) {
2b3f8                 | LR__4357
2b3f8     08 4E 05 F1 | 	add	fp, #8
2b3fc     A7 18 02 FB | 	rdlong	arg04, fp
2b400     10 4E 05 F1 | 	add	fp, #16
2b404     A7 16 02 FB | 	rdlong	arg03, fp
2b408     18 4E 85 F1 | 	sub	fp, #24
2b40c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2b410     68 01 90 ED |  if_be	jmp	#LR__4363
2b414     08 4E 05 F1 | 	add	fp, #8
2b418     A7 18 02 FB | 	rdlong	arg04, fp
2b41c     10 4E 05 F1 | 	add	fp, #16
2b420     A7 16 02 FB | 	rdlong	arg03, fp
2b424     0B 19 82 F1 | 	sub	arg04, arg03
2b428     10 4E 85 F1 | 	sub	fp, #16
2b42c     A7 18 62 FC | 	wrlong	arg04, fp
2b430     04 4E 85 F1 | 	sub	fp, #4
2b434     A7 18 02 FB | 	rdlong	arg04, fp
2b438     0C FB 01 F6 | 	mov	result1, arg04
2b43c     14 18 06 F1 | 	add	arg04, #20
2b440     0C 19 02 FB | 	rdlong	arg04, arg04
2b444     14 4E 05 F1 | 	add	fp, #20
2b448     A7 16 02 FB | 	rdlong	arg03, fp
2b44c     0B 19 02 F1 | 	add	arg04, arg03
2b450     14 FA 05 F1 | 	add	result1, #20
2b454     FD 18 62 FC | 	wrlong	arg04, result1
2b458     14 4E 85 F1 | 	sub	fp, #20
2b45c     A7 16 02 FB | 	rdlong	arg03, fp
2b460     04 4E 85 F1 | 	sub	fp, #4
2b464     10 16 06 F1 | 	add	arg03, #16
2b468     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b46c     02 16 CE F7 | 	test	arg03, #2 wz
2b470     3C 00 90 AD |  if_e	jmp	#LR__4358
2b474     04 4E 05 F1 | 	add	fp, #4
2b478     A7 12 02 FB | 	rdlong	arg01, fp
2b47c     10 4E 05 F1 | 	add	fp, #16
2b480     A7 14 02 FB | 	rdlong	arg02, fp
2b484     14 4E 85 F1 | 	sub	fp, #20
2b488     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2b48c     14 4E 05 F1 | 	add	fp, #20
2b490     A7 FA 61 FC | 	wrlong	result1, fp
2b494     00 FA 4D F2 | 	cmps	result1, #0 wz
2b498     14 4E 85 F1 | 	sub	fp, #20
2b49c     08 4E 05 A1 |  if_e	add	fp, #8
2b4a0     A7 00 68 AC |  if_e	wrlong	#0, fp
2b4a4     08 4E 85 A1 |  if_e	sub	fp, #8
2b4a8                 | ' 							ofs = 0; break;
2b4a8     D0 00 90 AD |  if_e	jmp	#LR__4363
2b4ac     24 00 90 FD | 	jmp	#LR__4359
2b4b0                 | LR__4358
2b4b0     04 4E 05 F1 | 	add	fp, #4
2b4b4     A7 12 02 FB | 	rdlong	arg01, fp
2b4b8     10 4E 05 F1 | 	add	fp, #16
2b4bc     A7 14 02 FB | 	rdlong	arg02, fp
2b4c0     14 4E 85 F1 | 	sub	fp, #20
2b4c4     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2b4c8     14 4E 05 F1 | 	add	fp, #20
2b4cc     A7 FA 61 FC | 	wrlong	result1, fp
2b4d0     14 4E 85 F1 | 	sub	fp, #20
2b4d4                 | LR__4359
2b4d4     14 4E 05 F1 | 	add	fp, #20
2b4d8     A7 16 02 FB | 	rdlong	arg03, fp
2b4dc     14 4E 85 F1 | 	sub	fp, #20
2b4e0     FF FF 7F FF 
2b4e4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2b4e8     1C 00 90 5D |  if_ne	jmp	#LR__4360
2b4ec     04 4E 05 F1 | 	add	fp, #4
2b4f0     A7 16 02 FB | 	rdlong	arg03, fp
2b4f4     04 4E 85 F1 | 	sub	fp, #4
2b4f8     11 16 06 F1 | 	add	arg03, #17
2b4fc     0B 03 48 FC | 	wrbyte	#1, arg03
2b500     01 FA 05 F6 | 	mov	result1, #1
2b504     D0 02 90 FD | 	jmp	#LR__4373
2b508                 | LR__4360
2b508     14 4E 05 F1 | 	add	fp, #20
2b50c     A7 16 02 FB | 	rdlong	arg03, fp
2b510     14 4E 85 F1 | 	sub	fp, #20
2b514     02 16 16 F2 | 	cmp	arg03, #2 wc
2b518     24 00 90 CD |  if_b	jmp	#LR__4361
2b51c     10 4E 05 F1 | 	add	fp, #16
2b520     A7 18 02 FB | 	rdlong	arg04, fp
2b524     04 4E 05 F1 | 	add	fp, #4
2b528     A7 16 02 FB | 	rdlong	arg03, fp
2b52c     14 4E 85 F1 | 	sub	fp, #20
2b530     18 18 06 F1 | 	add	arg04, #24
2b534     0C 19 02 FB | 	rdlong	arg04, arg04
2b538     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2b53c     1C 00 90 CD |  if_b	jmp	#LR__4362
2b540                 | LR__4361
2b540     04 4E 05 F1 | 	add	fp, #4
2b544     A7 16 02 FB | 	rdlong	arg03, fp
2b548     04 4E 85 F1 | 	sub	fp, #4
2b54c     11 16 06 F1 | 	add	arg03, #17
2b550     0B 05 48 FC | 	wrbyte	#2, arg03
2b554     02 FA 05 F6 | 	mov	result1, #2
2b558     7C 02 90 FD | 	jmp	#LR__4373
2b55c                 | LR__4362
2b55c     04 4E 05 F1 | 	add	fp, #4
2b560     A7 18 02 FB | 	rdlong	arg04, fp
2b564     10 4E 05 F1 | 	add	fp, #16
2b568     A7 16 02 FB | 	rdlong	arg03, fp
2b56c     14 4E 85 F1 | 	sub	fp, #20
2b570     18 18 06 F1 | 	add	arg04, #24
2b574     0C 17 62 FC | 	wrlong	arg03, arg04
2b578     7C FE 9F FD | 	jmp	#LR__4357
2b57c                 | LR__4363
2b57c     04 4E 05 F1 | 	add	fp, #4
2b580     A7 16 02 FB | 	rdlong	arg03, fp
2b584     0B 13 02 F6 | 	mov	arg01, arg03
2b588     14 16 06 F1 | 	add	arg03, #20
2b58c     0B 15 02 FB | 	rdlong	arg02, arg03
2b590     04 4E 05 F1 | 	add	fp, #4
2b594     A7 16 02 FB | 	rdlong	arg03, fp
2b598     0B 15 02 F1 | 	add	arg02, arg03
2b59c     14 12 06 F1 | 	add	arg01, #20
2b5a0     09 15 62 FC | 	wrlong	arg02, arg01
2b5a4     A7 16 02 FB | 	rdlong	arg03, fp
2b5a8     08 4E 85 F1 | 	sub	fp, #8
2b5ac     FF 17 CE F7 | 	test	arg03, #511 wz
2b5b0     6C 00 90 AD |  if_e	jmp	#LR__4365
2b5b4     10 4E 05 F1 | 	add	fp, #16
2b5b8     A7 12 02 FB | 	rdlong	arg01, fp
2b5bc     04 4E 05 F1 | 	add	fp, #4
2b5c0     A7 14 02 FB | 	rdlong	arg02, fp
2b5c4     14 4E 85 F1 | 	sub	fp, #20
2b5c8     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2b5cc     1C 4E 05 F1 | 	add	fp, #28
2b5d0     A7 FA 61 FC | 	wrlong	result1, fp
2b5d4     1C 4E 85 F1 | 	sub	fp, #28
2b5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5dc     1C 00 90 5D |  if_ne	jmp	#LR__4364
2b5e0     04 4E 05 F1 | 	add	fp, #4
2b5e4     A7 16 02 FB | 	rdlong	arg03, fp
2b5e8     04 4E 85 F1 | 	sub	fp, #4
2b5ec     11 16 06 F1 | 	add	arg03, #17
2b5f0     0B 05 48 FC | 	wrbyte	#2, arg03
2b5f4     02 FA 05 F6 | 	mov	result1, #2
2b5f8     DC 01 90 FD | 	jmp	#LR__4373
2b5fc                 | LR__4364
2b5fc     1C 4E 05 F1 | 	add	fp, #28
2b600     A7 18 02 FB | 	rdlong	arg04, fp
2b604     14 4E 85 F1 | 	sub	fp, #20
2b608     A7 16 02 FB | 	rdlong	arg03, fp
2b60c     09 16 46 F0 | 	shr	arg03, #9
2b610     0B 19 02 F1 | 	add	arg04, arg03
2b614     14 4E 05 F1 | 	add	fp, #20
2b618     A7 18 62 FC | 	wrlong	arg04, fp
2b61c     1C 4E 85 F1 | 	sub	fp, #28
2b620                 | LR__4365
2b620                 | LR__4366
2b620                 | LR__4367
2b620     04 4E 05 F1 | 	add	fp, #4
2b624     A7 18 02 FB | 	rdlong	arg04, fp
2b628     0C 17 02 F6 | 	mov	arg03, arg04
2b62c     04 4E 85 F1 | 	sub	fp, #4
2b630     14 16 06 F1 | 	add	arg03, #20
2b634     0B 17 02 FB | 	rdlong	arg03, arg03
2b638     0C 18 06 F1 | 	add	arg04, #12
2b63c     0C 19 02 FB | 	rdlong	arg04, arg04
2b640     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2b644     3C 00 90 ED |  if_be	jmp	#LR__4368
2b648     04 4E 05 F1 | 	add	fp, #4
2b64c     A7 18 02 FB | 	rdlong	arg04, fp
2b650     0C 17 02 F6 | 	mov	arg03, arg04
2b654     14 18 06 F1 | 	add	arg04, #20
2b658     0C 19 02 FB | 	rdlong	arg04, arg04
2b65c     0C 16 06 F1 | 	add	arg03, #12
2b660     0B 19 62 FC | 	wrlong	arg04, arg03
2b664     A7 18 02 FB | 	rdlong	arg04, fp
2b668     0C 17 02 F6 | 	mov	arg03, arg04
2b66c     04 4E 85 F1 | 	sub	fp, #4
2b670     10 18 06 F1 | 	add	arg04, #16
2b674     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b678     40 18 46 F5 | 	or	arg04, #64
2b67c     10 16 06 F1 | 	add	arg03, #16
2b680     0B 19 42 FC | 	wrbyte	arg04, arg03
2b684                 | LR__4368
2b684     04 4E 05 F1 | 	add	fp, #4
2b688     A7 16 02 FB | 	rdlong	arg03, fp
2b68c     04 4E 85 F1 | 	sub	fp, #4
2b690     14 16 06 F1 | 	add	arg03, #20
2b694     0B 17 02 FB | 	rdlong	arg03, arg03
2b698     FF 17 CE F7 | 	test	arg03, #511 wz
2b69c     2C 01 90 AD |  if_e	jmp	#LR__4372
2b6a0     04 4E 05 F1 | 	add	fp, #4
2b6a4     A7 18 02 FB | 	rdlong	arg04, fp
2b6a8     18 4E 05 F1 | 	add	fp, #24
2b6ac     A7 16 02 FB | 	rdlong	arg03, fp
2b6b0     1C 4E 85 F1 | 	sub	fp, #28
2b6b4     1C 18 06 F1 | 	add	arg04, #28
2b6b8     0C 19 02 FB | 	rdlong	arg04, arg04
2b6bc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2b6c0     08 01 90 AD |  if_e	jmp	#LR__4372
2b6c4     04 4E 05 F1 | 	add	fp, #4
2b6c8     A7 16 02 FB | 	rdlong	arg03, fp
2b6cc     04 4E 85 F1 | 	sub	fp, #4
2b6d0     10 16 06 F1 | 	add	arg03, #16
2b6d4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b6d8     80 16 CE F7 | 	test	arg03, #128 wz
2b6dc     7C 00 90 AD |  if_e	jmp	#LR__4370
2b6e0     10 4E 05 F1 | 	add	fp, #16
2b6e4     A7 16 02 FB | 	rdlong	arg03, fp
2b6e8     01 16 06 F1 | 	add	arg03, #1
2b6ec     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b6f0     0C 4E 85 F1 | 	sub	fp, #12
2b6f4     A7 16 02 FB | 	rdlong	arg03, fp
2b6f8     0B 15 02 F6 | 	mov	arg02, arg03
2b6fc     28 14 06 F1 | 	add	arg02, #40
2b700     04 4E 85 F1 | 	sub	fp, #4
2b704     1C 16 06 F1 | 	add	arg03, #28
2b708     0B 17 02 FB | 	rdlong	arg03, arg03
2b70c     01 18 06 F6 | 	mov	arg04, #1
2b710     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2b714     00 FA 0D F2 | 	cmp	result1, #0 wz
2b718     1C 00 90 AD |  if_e	jmp	#LR__4369
2b71c     04 4E 05 F1 | 	add	fp, #4
2b720     A7 16 02 FB | 	rdlong	arg03, fp
2b724     04 4E 85 F1 | 	sub	fp, #4
2b728     11 16 06 F1 | 	add	arg03, #17
2b72c     0B 03 48 FC | 	wrbyte	#1, arg03
2b730     01 FA 05 F6 | 	mov	result1, #1
2b734     A0 00 90 FD | 	jmp	#LR__4373
2b738                 | LR__4369
2b738     04 4E 05 F1 | 	add	fp, #4
2b73c     A7 18 02 FB | 	rdlong	arg04, fp
2b740     0C 17 02 F6 | 	mov	arg03, arg04
2b744     04 4E 85 F1 | 	sub	fp, #4
2b748     10 18 06 F1 | 	add	arg04, #16
2b74c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b750     7F 18 06 F5 | 	and	arg04, #127
2b754     10 16 06 F1 | 	add	arg03, #16
2b758     0B 19 42 FC | 	wrbyte	arg04, arg03
2b75c                 | LR__4370
2b75c     10 4E 05 F1 | 	add	fp, #16
2b760     A7 16 02 FB | 	rdlong	arg03, fp
2b764     01 16 06 F1 | 	add	arg03, #1
2b768     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b76c     0C 4E 85 F1 | 	sub	fp, #12
2b770     A7 14 02 FB | 	rdlong	arg02, fp
2b774     28 14 06 F1 | 	add	arg02, #40
2b778     18 4E 05 F1 | 	add	fp, #24
2b77c     A7 16 02 FB | 	rdlong	arg03, fp
2b780     1C 4E 85 F1 | 	sub	fp, #28
2b784     01 18 06 F6 | 	mov	arg04, #1
2b788     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2b78c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b790     1C 00 90 AD |  if_e	jmp	#LR__4371
2b794     04 4E 05 F1 | 	add	fp, #4
2b798     A7 16 02 FB | 	rdlong	arg03, fp
2b79c     04 4E 85 F1 | 	sub	fp, #4
2b7a0     11 16 06 F1 | 	add	arg03, #17
2b7a4     0B 03 48 FC | 	wrbyte	#1, arg03
2b7a8     01 FA 05 F6 | 	mov	result1, #1
2b7ac     28 00 90 FD | 	jmp	#LR__4373
2b7b0                 | LR__4371
2b7b0     04 4E 05 F1 | 	add	fp, #4
2b7b4     A7 18 02 FB | 	rdlong	arg04, fp
2b7b8     18 4E 05 F1 | 	add	fp, #24
2b7bc     A7 16 02 FB | 	rdlong	arg03, fp
2b7c0     1C 4E 85 F1 | 	sub	fp, #28
2b7c4     1C 18 06 F1 | 	add	arg04, #28
2b7c8     0C 17 62 FC | 	wrlong	arg03, arg04
2b7cc                 | LR__4372
2b7cc                 | ' 
2b7cc                 | ' 			fp->sect = nsect;
2b7cc                 | ' 		}
2b7cc                 | ' 	}
2b7cc                 | ' 
2b7cc                 | ' 	return res ;
2b7cc     0C 4E 05 F1 | 	add	fp, #12
2b7d0     A7 FA 01 FB | 	rdlong	result1, fp
2b7d4     0C 4E 85 F1 | 	sub	fp, #12
2b7d8                 | LR__4373
2b7d8     A7 F0 03 F6 | 	mov	ptra, fp
2b7dc     B2 00 A0 FD | 	call	#popregs_
2b7e0                 | _fatfs_cc_f_lseek_ret
2b7e0     2D 00 64 FD | 	ret
2b7e4                 | 
2b7e4                 | _fatfs_cc_f_opendir
2b7e4     01 4A 05 F6 | 	mov	COUNT_, #1
2b7e8     A8 00 A0 FD | 	call	#pushregs_
2b7ec     14 F0 07 F1 | 	add	ptra, #20
2b7f0     04 4E 05 F1 | 	add	fp, #4
2b7f4     A7 12 62 FC | 	wrlong	arg01, fp
2b7f8     04 4E 05 F1 | 	add	fp, #4
2b7fc     A7 14 62 FC | 	wrlong	arg02, fp
2b800     04 4E 85 F1 | 	sub	fp, #4
2b804     A7 16 0A FB | 	rdlong	arg03, fp wz
2b808     04 4E 85 F1 | 	sub	fp, #4
2b80c     09 FA 05 A6 |  if_e	mov	result1, #9
2b810     78 01 90 AD |  if_e	jmp	#LR__4386
2b814     08 4E 05 F1 | 	add	fp, #8
2b818     A7 12 02 F6 | 	mov	arg01, fp
2b81c     08 4E 05 F1 | 	add	fp, #8
2b820     A7 14 02 F6 | 	mov	arg02, fp
2b824     10 4E 85 F1 | 	sub	fp, #16
2b828     00 16 06 F6 | 	mov	arg03, #0
2b82c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2b830     0C 4E 05 F1 | 	add	fp, #12
2b834     A7 FA 61 FC | 	wrlong	result1, fp
2b838     0C 4E 85 F1 | 	sub	fp, #12
2b83c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b840     20 01 90 5D |  if_ne	jmp	#LR__4385
2b844     04 4E 05 F1 | 	add	fp, #4
2b848     A7 16 02 FB | 	rdlong	arg03, fp
2b84c     0C 4E 05 F1 | 	add	fp, #12
2b850     A7 FA 01 FB | 	rdlong	result1, fp
2b854     0B FB 61 FC | 	wrlong	result1, arg03
2b858     0C 4E 85 F1 | 	sub	fp, #12
2b85c     A7 12 02 FB | 	rdlong	arg01, fp
2b860     04 4E 05 F1 | 	add	fp, #4
2b864     A7 14 02 FB | 	rdlong	arg02, fp
2b868     08 4E 85 F1 | 	sub	fp, #8
2b86c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2b870     0C 4E 05 F1 | 	add	fp, #12
2b874     A7 FA 61 FC | 	wrlong	result1, fp
2b878     0C 4E 85 F1 | 	sub	fp, #12
2b87c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b880     C4 00 90 5D |  if_ne	jmp	#LR__4384
2b884     04 4E 05 F1 | 	add	fp, #4
2b888     A7 16 02 FB | 	rdlong	arg03, fp
2b88c     04 4E 85 F1 | 	sub	fp, #4
2b890     2B 16 06 F1 | 	add	arg03, #43
2b894     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b898     80 16 CE F7 | 	test	arg03, #128 wz
2b89c     58 00 90 5D |  if_ne	jmp	#LR__4382
2b8a0     04 4E 05 F1 | 	add	fp, #4
2b8a4     A7 16 02 FB | 	rdlong	arg03, fp
2b8a8     04 4E 85 F1 | 	sub	fp, #4
2b8ac     06 16 06 F1 | 	add	arg03, #6
2b8b0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b8b4     10 16 CE F7 | 	test	arg03, #16 wz
2b8b8     30 00 90 AD |  if_e	jmp	#LR__4380
2b8bc     04 4E 05 F1 | 	add	fp, #4
2b8c0     A7 16 02 FB | 	rdlong	arg03, fp
2b8c4     0B 1F 02 F6 | 	mov	local01, arg03
2b8c8     0C 4E 05 F1 | 	add	fp, #12
2b8cc     A7 12 02 FB | 	rdlong	arg01, fp
2b8d0     10 4E 85 F1 | 	sub	fp, #16
2b8d4     1C 16 06 F1 | 	add	arg03, #28
2b8d8     0B 15 02 FB | 	rdlong	arg02, arg03
2b8dc     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2b8e0     08 1E 06 F1 | 	add	local01, #8
2b8e4     0F FB 61 FC | 	wrlong	result1, local01
2b8e8     0C 00 90 FD | 	jmp	#LR__4381
2b8ec                 | LR__4380
2b8ec     0C 4E 05 F1 | 	add	fp, #12
2b8f0     A7 0A 68 FC | 	wrlong	#5, fp
2b8f4     0C 4E 85 F1 | 	sub	fp, #12
2b8f8                 | LR__4381
2b8f8                 | LR__4382
2b8f8     0C 4E 05 F1 | 	add	fp, #12
2b8fc     A7 1E 0A FB | 	rdlong	local01, fp wz
2b900     0C 4E 85 F1 | 	sub	fp, #12
2b904     40 00 90 5D |  if_ne	jmp	#LR__4383
2b908     04 4E 05 F1 | 	add	fp, #4
2b90c     A7 1E 02 FB | 	rdlong	local01, fp
2b910     0C 4E 05 F1 | 	add	fp, #12
2b914     A7 16 02 FB | 	rdlong	arg03, fp
2b918     06 16 06 F1 | 	add	arg03, #6
2b91c     0B 17 E2 FA | 	rdword	arg03, arg03
2b920     04 1E 06 F1 | 	add	local01, #4
2b924     0F 17 52 FC | 	wrword	arg03, local01
2b928     0C 4E 85 F1 | 	sub	fp, #12
2b92c     A7 12 02 FB | 	rdlong	arg01, fp
2b930     04 4E 85 F1 | 	sub	fp, #4
2b934     00 14 06 F6 | 	mov	arg02, #0
2b938     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2b93c     0C 4E 05 F1 | 	add	fp, #12
2b940     A7 FA 61 FC | 	wrlong	result1, fp
2b944     0C 4E 85 F1 | 	sub	fp, #12
2b948                 | LR__4383
2b948                 | LR__4384
2b948     0C 4E 05 F1 | 	add	fp, #12
2b94c     A7 1E 02 FB | 	rdlong	local01, fp
2b950     0C 4E 85 F1 | 	sub	fp, #12
2b954     04 1E 0E F2 | 	cmp	local01, #4 wz
2b958     0C 4E 05 A1 |  if_e	add	fp, #12
2b95c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b960     0C 4E 85 A1 |  if_e	sub	fp, #12
2b964                 | LR__4385
2b964     0C 4E 05 F1 | 	add	fp, #12
2b968     A7 1E 0A FB | 	rdlong	local01, fp wz
2b96c     0C 4E 85 F1 | 	sub	fp, #12
2b970     04 4E 05 51 |  if_ne	add	fp, #4
2b974     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b978     04 4E 85 51 |  if_ne	sub	fp, #4
2b97c     0F 01 68 5C |  if_ne	wrlong	#0, local01
2b980                 | ' 
2b980                 | ' 	return res ;
2b980     0C 4E 05 F1 | 	add	fp, #12
2b984     A7 FA 01 FB | 	rdlong	result1, fp
2b988     0C 4E 85 F1 | 	sub	fp, #12
2b98c                 | LR__4386
2b98c     A7 F0 03 F6 | 	mov	ptra, fp
2b990     B2 00 A0 FD | 	call	#popregs_
2b994                 | _fatfs_cc_f_opendir_ret
2b994     2D 00 64 FD | 	ret
2b998                 | 
2b998                 | _fatfs_cc_f_closedir
2b998     00 4A 05 F6 | 	mov	COUNT_, #0
2b99c     A8 00 A0 FD | 	call	#pushregs_
2b9a0     10 F0 07 F1 | 	add	ptra, #16
2b9a4     04 4E 05 F1 | 	add	fp, #4
2b9a8     A7 12 62 FC | 	wrlong	arg01, fp
2b9ac     08 4E 05 F1 | 	add	fp, #8
2b9b0     A7 14 02 F6 | 	mov	arg02, fp
2b9b4     0C 4E 85 F1 | 	sub	fp, #12
2b9b8     C0 DD BF FD | 	call	#_fatfs_cc_validate
2b9bc     08 4E 05 F1 | 	add	fp, #8
2b9c0     A7 FA 61 FC | 	wrlong	result1, fp
2b9c4     08 4E 85 F1 | 	sub	fp, #8
2b9c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9cc     04 4E 05 A1 |  if_e	add	fp, #4
2b9d0     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b9d4     04 4E 85 A1 |  if_e	sub	fp, #4
2b9d8     FD 00 68 AC |  if_e	wrlong	#0, result1
2b9dc                 | ' 
2b9dc                 | ' 
2b9dc                 | ' 
2b9dc                 | ' 
2b9dc                 | ' 		dp->obj.fs = 0;
2b9dc                 | ' #line 4633 "ff.c"
2b9dc                 | ' 	}
2b9dc                 | ' 	return res;
2b9dc     08 4E 05 F1 | 	add	fp, #8
2b9e0     A7 FA 01 FB | 	rdlong	result1, fp
2b9e4     08 4E 85 F1 | 	sub	fp, #8
2b9e8     A7 F0 03 F6 | 	mov	ptra, fp
2b9ec     B2 00 A0 FD | 	call	#popregs_
2b9f0                 | _fatfs_cc_f_closedir_ret
2b9f0     2D 00 64 FD | 	ret
2b9f4                 | 
2b9f4                 | _fatfs_cc_f_readdir
2b9f4     00 4A 05 F6 | 	mov	COUNT_, #0
2b9f8     A8 00 A0 FD | 	call	#pushregs_
2b9fc     14 F0 07 F1 | 	add	ptra, #20
2ba00     04 4E 05 F1 | 	add	fp, #4
2ba04     A7 12 62 FC | 	wrlong	arg01, fp
2ba08     04 4E 05 F1 | 	add	fp, #4
2ba0c     A7 14 62 FC | 	wrlong	arg02, fp
2ba10     04 4E 85 F1 | 	sub	fp, #4
2ba14     A7 12 02 FB | 	rdlong	arg01, fp
2ba18     0C 4E 05 F1 | 	add	fp, #12
2ba1c     A7 14 02 F6 | 	mov	arg02, fp
2ba20     10 4E 85 F1 | 	sub	fp, #16
2ba24     54 DD BF FD | 	call	#_fatfs_cc_validate
2ba28     0C 4E 05 F1 | 	add	fp, #12
2ba2c     A7 FA 61 FC | 	wrlong	result1, fp
2ba30     0C 4E 85 F1 | 	sub	fp, #12
2ba34     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba38     BC 00 90 5D |  if_ne	jmp	#LR__4393
2ba3c     08 4E 05 F1 | 	add	fp, #8
2ba40     A7 FA 09 FB | 	rdlong	result1, fp wz
2ba44     08 4E 85 F1 | 	sub	fp, #8
2ba48     24 00 90 5D |  if_ne	jmp	#LR__4390
2ba4c     04 4E 05 F1 | 	add	fp, #4
2ba50     A7 12 02 FB | 	rdlong	arg01, fp
2ba54     04 4E 85 F1 | 	sub	fp, #4
2ba58     00 14 06 F6 | 	mov	arg02, #0
2ba5c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2ba60     0C 4E 05 F1 | 	add	fp, #12
2ba64     A7 FA 61 FC | 	wrlong	result1, fp
2ba68     0C 4E 85 F1 | 	sub	fp, #12
2ba6c     88 00 90 FD | 	jmp	#LR__4392
2ba70                 | LR__4390
2ba70     04 4E 05 F1 | 	add	fp, #4
2ba74     A7 12 02 FB | 	rdlong	arg01, fp
2ba78     04 4E 85 F1 | 	sub	fp, #4
2ba7c     00 14 06 F6 | 	mov	arg02, #0
2ba80     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2ba84     0C 4E 05 F1 | 	add	fp, #12
2ba88     A7 FA 61 FC | 	wrlong	result1, fp
2ba8c     0C 4E 85 F1 | 	sub	fp, #12
2ba90     04 FA 0D F2 | 	cmp	result1, #4 wz
2ba94     0C 4E 05 A1 |  if_e	add	fp, #12
2ba98     A7 00 68 AC |  if_e	wrlong	#0, fp
2ba9c     0C 4E 85 A1 |  if_e	sub	fp, #12
2baa0     0C 4E 05 F1 | 	add	fp, #12
2baa4     A7 FA 09 FB | 	rdlong	result1, fp wz
2baa8     0C 4E 85 F1 | 	sub	fp, #12
2baac     48 00 90 5D |  if_ne	jmp	#LR__4391
2bab0     04 4E 05 F1 | 	add	fp, #4
2bab4     A7 12 02 FB | 	rdlong	arg01, fp
2bab8     04 4E 05 F1 | 	add	fp, #4
2babc     A7 14 02 FB | 	rdlong	arg02, fp
2bac0     08 4E 85 F1 | 	sub	fp, #8
2bac4     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2bac8     04 4E 05 F1 | 	add	fp, #4
2bacc     A7 12 02 FB | 	rdlong	arg01, fp
2bad0     04 4E 85 F1 | 	sub	fp, #4
2bad4     00 14 06 F6 | 	mov	arg02, #0
2bad8     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2badc     0C 4E 05 F1 | 	add	fp, #12
2bae0     A7 FA 61 FC | 	wrlong	result1, fp
2bae4     0C 4E 85 F1 | 	sub	fp, #12
2bae8     04 FA 0D F2 | 	cmp	result1, #4 wz
2baec     0C 4E 05 A1 |  if_e	add	fp, #12
2baf0     A7 00 68 AC |  if_e	wrlong	#0, fp
2baf4     0C 4E 85 A1 |  if_e	sub	fp, #12
2baf8                 | LR__4391
2baf8                 | LR__4392
2baf8                 | LR__4393
2baf8                 | ' 			}
2baf8                 | ' 			;
2baf8                 | ' 		}
2baf8                 | ' 	}
2baf8                 | ' 	return res ;
2baf8     0C 4E 05 F1 | 	add	fp, #12
2bafc     A7 FA 01 FB | 	rdlong	result1, fp
2bb00     0C 4E 85 F1 | 	sub	fp, #12
2bb04     A7 F0 03 F6 | 	mov	ptra, fp
2bb08     B2 00 A0 FD | 	call	#popregs_
2bb0c                 | _fatfs_cc_f_readdir_ret
2bb0c     2D 00 64 FD | 	ret
2bb10                 | 
2bb10                 | _fatfs_cc_f_stat
2bb10     00 4A 05 F6 | 	mov	COUNT_, #0
2bb14     A8 00 A0 FD | 	call	#pushregs_
2bb18     40 F0 07 F1 | 	add	ptra, #64
2bb1c     04 4E 05 F1 | 	add	fp, #4
2bb20     A7 12 62 FC | 	wrlong	arg01, fp
2bb24     04 4E 05 F1 | 	add	fp, #4
2bb28     A7 14 62 FC | 	wrlong	arg02, fp
2bb2c     04 4E 85 F1 | 	sub	fp, #4
2bb30     A7 12 02 F6 | 	mov	arg01, fp
2bb34     0C 4E 05 F1 | 	add	fp, #12
2bb38     A7 14 02 F6 | 	mov	arg02, fp
2bb3c     10 4E 85 F1 | 	sub	fp, #16
2bb40     00 16 06 F6 | 	mov	arg03, #0
2bb44     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2bb48     0C 4E 05 F1 | 	add	fp, #12
2bb4c     A7 FA 61 FC | 	wrlong	result1, fp
2bb50     0C 4E 85 F1 | 	sub	fp, #12
2bb54     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb58     74 00 90 5D |  if_ne	jmp	#LR__4403
2bb5c     10 4E 05 F1 | 	add	fp, #16
2bb60     A7 12 02 F6 | 	mov	arg01, fp
2bb64     0C 4E 85 F1 | 	sub	fp, #12
2bb68     A7 14 02 FB | 	rdlong	arg02, fp
2bb6c     04 4E 85 F1 | 	sub	fp, #4
2bb70     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2bb74     0C 4E 05 F1 | 	add	fp, #12
2bb78     A7 FA 61 FC | 	wrlong	result1, fp
2bb7c     0C 4E 85 F1 | 	sub	fp, #12
2bb80     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb84     48 00 90 5D |  if_ne	jmp	#LR__4402
2bb88     3B 4E 05 F1 | 	add	fp, #59
2bb8c     A7 FA C1 FA | 	rdbyte	result1, fp
2bb90     3B 4E 85 F1 | 	sub	fp, #59
2bb94     80 FA CD F7 | 	test	result1, #128 wz
2bb98     0C 4E 05 51 |  if_ne	add	fp, #12
2bb9c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2bba0     0C 4E 85 51 |  if_ne	sub	fp, #12
2bba4     28 00 90 5D |  if_ne	jmp	#LR__4401
2bba8     08 4E 05 F1 | 	add	fp, #8
2bbac     A7 FA 09 FB | 	rdlong	result1, fp wz
2bbb0     08 4E 85 F1 | 	sub	fp, #8
2bbb4     18 00 90 AD |  if_e	jmp	#LR__4400
2bbb8     10 4E 05 F1 | 	add	fp, #16
2bbbc     A7 12 02 F6 | 	mov	arg01, fp
2bbc0     08 4E 85 F1 | 	sub	fp, #8
2bbc4     A7 14 02 FB | 	rdlong	arg02, fp
2bbc8     08 4E 85 F1 | 	sub	fp, #8
2bbcc     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2bbd0                 | LR__4400
2bbd0                 | LR__4401
2bbd0                 | LR__4402
2bbd0                 | LR__4403
2bbd0                 | ' 			}
2bbd0                 | ' 		}
2bbd0                 | ' 		;
2bbd0                 | ' 	}
2bbd0                 | ' 
2bbd0                 | ' 	return res ;
2bbd0     0C 4E 05 F1 | 	add	fp, #12
2bbd4     A7 FA 01 FB | 	rdlong	result1, fp
2bbd8     0C 4E 85 F1 | 	sub	fp, #12
2bbdc     A7 F0 03 F6 | 	mov	ptra, fp
2bbe0     B2 00 A0 FD | 	call	#popregs_
2bbe4                 | _fatfs_cc_f_stat_ret
2bbe4     2D 00 64 FD | 	ret
2bbe8                 | 
2bbe8                 | _fatfs_cc_f_unlink
2bbe8     00 4A 05 F6 | 	mov	COUNT_, #0
2bbec     A8 00 A0 FD | 	call	#pushregs_
2bbf0     74 F0 07 F1 | 	add	ptra, #116
2bbf4     04 4E 05 F1 | 	add	fp, #4
2bbf8     A7 12 62 FC | 	wrlong	arg01, fp
2bbfc     68 4E 05 F1 | 	add	fp, #104
2bc00     A7 00 68 FC | 	wrlong	#0, fp
2bc04     68 4E 85 F1 | 	sub	fp, #104
2bc08     A7 12 02 F6 | 	mov	arg01, fp
2bc0c     6C 4E 05 F1 | 	add	fp, #108
2bc10     A7 14 02 F6 | 	mov	arg02, fp
2bc14     70 4E 85 F1 | 	sub	fp, #112
2bc18     02 16 06 F6 | 	mov	arg03, #2
2bc1c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2bc20     08 4E 05 F1 | 	add	fp, #8
2bc24     A7 FA 61 FC | 	wrlong	result1, fp
2bc28     08 4E 85 F1 | 	sub	fp, #8
2bc2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc30     E4 01 90 5D |  if_ne	jmp	#LR__4418
2bc34     70 4E 05 F1 | 	add	fp, #112
2bc38     A7 16 02 FB | 	rdlong	arg03, fp
2bc3c     64 4E 85 F1 | 	sub	fp, #100
2bc40     A7 16 62 FC | 	wrlong	arg03, fp
2bc44     A7 12 02 F6 | 	mov	arg01, fp
2bc48     08 4E 85 F1 | 	sub	fp, #8
2bc4c     A7 14 02 FB | 	rdlong	arg02, fp
2bc50     04 4E 85 F1 | 	sub	fp, #4
2bc54     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2bc58     08 4E 05 F1 | 	add	fp, #8
2bc5c     A7 FA 61 FC | 	wrlong	result1, fp
2bc60     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc64     08 4E 85 F1 | 	sub	fp, #8
2bc68     AC 01 90 5D |  if_ne	jmp	#LR__4417
2bc6c     37 4E 05 F1 | 	add	fp, #55
2bc70     A7 FA C1 FA | 	rdbyte	result1, fp
2bc74     37 4E 85 F1 | 	sub	fp, #55
2bc78     80 FA CD F7 | 	test	result1, #128 wz
2bc7c     08 4E 05 51 |  if_ne	add	fp, #8
2bc80     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2bc84     08 4E 85 51 |  if_ne	sub	fp, #8
2bc88     1C 00 90 5D |  if_ne	jmp	#LR__4410
2bc8c     12 4E 05 F1 | 	add	fp, #18
2bc90     A7 FA C1 FA | 	rdbyte	result1, fp
2bc94     12 4E 85 F1 | 	sub	fp, #18
2bc98     01 FA CD F7 | 	test	result1, #1 wz
2bc9c     08 4E 05 51 |  if_ne	add	fp, #8
2bca0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2bca4     08 4E 85 51 |  if_ne	sub	fp, #8
2bca8                 | LR__4410
2bca8     08 4E 05 F1 | 	add	fp, #8
2bcac     A7 FA 09 FB | 	rdlong	result1, fp wz
2bcb0     08 4E 85 F1 | 	sub	fp, #8
2bcb4     C8 00 90 5D |  if_ne	jmp	#LR__4413
2bcb8     70 4E 05 F1 | 	add	fp, #112
2bcbc     A7 12 02 FB | 	rdlong	arg01, fp
2bcc0     48 4E 85 F1 | 	sub	fp, #72
2bcc4     A7 14 02 FB | 	rdlong	arg02, fp
2bcc8     28 4E 85 F1 | 	sub	fp, #40
2bccc     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2bcd0     6C 4E 05 F1 | 	add	fp, #108
2bcd4     A7 FA 61 FC | 	wrlong	result1, fp
2bcd8     5A 4E 85 F1 | 	sub	fp, #90
2bcdc     A7 FA C1 FA | 	rdbyte	result1, fp
2bce0     12 4E 85 F1 | 	sub	fp, #18
2bce4     10 FA CD F7 | 	test	result1, #16 wz
2bce8     94 00 90 AD |  if_e	jmp	#LR__4412
2bcec     70 4E 05 F1 | 	add	fp, #112
2bcf0     A7 FA 01 FB | 	rdlong	result1, fp
2bcf4     34 4E 85 F1 | 	sub	fp, #52
2bcf8     A7 FA 61 FC | 	wrlong	result1, fp
2bcfc     30 4E 05 F1 | 	add	fp, #48
2bd00     A7 16 02 FB | 	rdlong	arg03, fp
2bd04     28 4E 85 F1 | 	sub	fp, #40
2bd08     A7 16 62 FC | 	wrlong	arg03, fp
2bd0c     08 4E 85 F1 | 	sub	fp, #8
2bd10     A7 12 02 F6 | 	mov	arg01, fp
2bd14     3C 4E 85 F1 | 	sub	fp, #60
2bd18     00 14 06 F6 | 	mov	arg02, #0
2bd1c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2bd20     08 4E 05 F1 | 	add	fp, #8
2bd24     A7 FA 61 FC | 	wrlong	result1, fp
2bd28     08 4E 85 F1 | 	sub	fp, #8
2bd2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd30     4C 00 90 5D |  if_ne	jmp	#LR__4411
2bd34     3C 4E 05 F1 | 	add	fp, #60
2bd38     A7 12 02 F6 | 	mov	arg01, fp
2bd3c     3C 4E 85 F1 | 	sub	fp, #60
2bd40     00 14 06 F6 | 	mov	arg02, #0
2bd44     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2bd48     08 4E 05 F1 | 	add	fp, #8
2bd4c     A7 FA 61 FC | 	wrlong	result1, fp
2bd50     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd54     08 4E 85 F1 | 	sub	fp, #8
2bd58     08 4E 05 A1 |  if_e	add	fp, #8
2bd5c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bd60     08 4E 85 A1 |  if_e	sub	fp, #8
2bd64     08 4E 05 F1 | 	add	fp, #8
2bd68     A7 FA 01 FB | 	rdlong	result1, fp
2bd6c     08 4E 85 F1 | 	sub	fp, #8
2bd70     04 FA 0D F2 | 	cmp	result1, #4 wz
2bd74     08 4E 05 A1 |  if_e	add	fp, #8
2bd78     A7 00 68 AC |  if_e	wrlong	#0, fp
2bd7c     08 4E 85 A1 |  if_e	sub	fp, #8
2bd80                 | LR__4411
2bd80                 | LR__4412
2bd80                 | LR__4413
2bd80     08 4E 05 F1 | 	add	fp, #8
2bd84     A7 FA 09 FB | 	rdlong	result1, fp wz
2bd88     08 4E 85 F1 | 	sub	fp, #8
2bd8c     88 00 90 5D |  if_ne	jmp	#LR__4416
2bd90     0C 4E 05 F1 | 	add	fp, #12
2bd94     A7 12 02 F6 | 	mov	arg01, fp
2bd98     0C 4E 85 F1 | 	sub	fp, #12
2bd9c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2bda0     08 4E 05 F1 | 	add	fp, #8
2bda4     A7 FA 61 FC | 	wrlong	result1, fp
2bda8     08 4E 85 F1 | 	sub	fp, #8
2bdac     00 FA 0D F2 | 	cmp	result1, #0 wz
2bdb0     38 00 90 5D |  if_ne	jmp	#LR__4414
2bdb4     6C 4E 05 F1 | 	add	fp, #108
2bdb8     A7 FA 09 FB | 	rdlong	result1, fp wz
2bdbc     6C 4E 85 F1 | 	sub	fp, #108
2bdc0     28 00 90 AD |  if_e	jmp	#LR__4414
2bdc4     0C 4E 05 F1 | 	add	fp, #12
2bdc8     A7 12 02 F6 | 	mov	arg01, fp
2bdcc     60 4E 05 F1 | 	add	fp, #96
2bdd0     A7 14 02 FB | 	rdlong	arg02, fp
2bdd4     6C 4E 85 F1 | 	sub	fp, #108
2bdd8     00 16 06 F6 | 	mov	arg03, #0
2bddc     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2bde0     08 4E 05 F1 | 	add	fp, #8
2bde4     A7 FA 61 FC | 	wrlong	result1, fp
2bde8     08 4E 85 F1 | 	sub	fp, #8
2bdec                 | LR__4414
2bdec     08 4E 05 F1 | 	add	fp, #8
2bdf0     A7 FA 09 FB | 	rdlong	result1, fp wz
2bdf4     08 4E 85 F1 | 	sub	fp, #8
2bdf8     1C 00 90 5D |  if_ne	jmp	#LR__4415
2bdfc     70 4E 05 F1 | 	add	fp, #112
2be00     A7 12 02 FB | 	rdlong	arg01, fp
2be04     70 4E 85 F1 | 	sub	fp, #112
2be08     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2be0c     08 4E 05 F1 | 	add	fp, #8
2be10     A7 FA 61 FC | 	wrlong	result1, fp
2be14     08 4E 85 F1 | 	sub	fp, #8
2be18                 | LR__4415
2be18                 | LR__4416
2be18                 | LR__4417
2be18                 | LR__4418
2be18                 | ' 			}
2be18                 | ' 		}
2be18                 | ' 		;
2be18                 | ' 	}
2be18                 | ' 
2be18                 | ' 	return res ;
2be18     08 4E 05 F1 | 	add	fp, #8
2be1c     A7 FA 01 FB | 	rdlong	result1, fp
2be20     08 4E 85 F1 | 	sub	fp, #8
2be24     A7 F0 03 F6 | 	mov	ptra, fp
2be28     B2 00 A0 FD | 	call	#popregs_
2be2c                 | _fatfs_cc_f_unlink_ret
2be2c     2D 00 64 FD | 	ret
2be30                 | 
2be30                 | _fatfs_cc_f_mkdir
2be30     00 4A 05 F6 | 	mov	COUNT_, #0
2be34     A8 00 A0 FD | 	call	#pushregs_
2be38     5C F0 07 F1 | 	add	ptra, #92
2be3c     04 4E 05 F1 | 	add	fp, #4
2be40     A7 12 62 FC | 	wrlong	arg01, fp
2be44     A7 12 02 F6 | 	mov	arg01, fp
2be48     48 4E 05 F1 | 	add	fp, #72
2be4c     A7 14 02 F6 | 	mov	arg02, fp
2be50     4C 4E 85 F1 | 	sub	fp, #76
2be54     02 16 06 F6 | 	mov	arg03, #2
2be58     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2be5c     08 4E 05 F1 | 	add	fp, #8
2be60     A7 FA 61 FC | 	wrlong	result1, fp
2be64     08 4E 85 F1 | 	sub	fp, #8
2be68     00 FA 0D F2 | 	cmp	result1, #0 wz
2be6c     C4 02 90 5D |  if_ne	jmp	#LR__4425
2be70     4C 4E 05 F1 | 	add	fp, #76
2be74     A7 16 02 FB | 	rdlong	arg03, fp
2be78     40 4E 85 F1 | 	sub	fp, #64
2be7c     A7 16 62 FC | 	wrlong	arg03, fp
2be80     A7 12 02 F6 | 	mov	arg01, fp
2be84     08 4E 85 F1 | 	sub	fp, #8
2be88     A7 14 02 FB | 	rdlong	arg02, fp
2be8c     04 4E 85 F1 | 	sub	fp, #4
2be90     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2be94     08 4E 05 F1 | 	add	fp, #8
2be98     A7 FA 61 FC | 	wrlong	result1, fp
2be9c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bea0     08 4E 85 F1 | 	sub	fp, #8
2bea4     08 4E 05 A1 |  if_e	add	fp, #8
2bea8     A7 10 68 AC |  if_e	wrlong	#8, fp
2beac     08 4E 85 A1 |  if_e	sub	fp, #8
2beb0     08 4E 05 F1 | 	add	fp, #8
2beb4     A7 FA 01 FB | 	rdlong	result1, fp
2beb8     08 4E 85 F1 | 	sub	fp, #8
2bebc     04 FA 0D F2 | 	cmp	result1, #4 wz
2bec0     70 02 90 5D |  if_ne	jmp	#LR__4424
2bec4     4C 4E 05 F1 | 	add	fp, #76
2bec8     A7 16 02 FB | 	rdlong	arg03, fp
2becc     10 4E 85 F1 | 	sub	fp, #16
2bed0     A7 16 62 FC | 	wrlong	arg03, fp
2bed4     A7 12 02 F6 | 	mov	arg01, fp
2bed8     3C 4E 85 F1 | 	sub	fp, #60
2bedc     00 14 06 F6 | 	mov	arg02, #0
2bee0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2bee4     50 4E 05 F1 | 	add	fp, #80
2bee8     A7 FA 61 FC | 	wrlong	result1, fp
2beec     48 4E 85 F1 | 	sub	fp, #72
2bef0     A7 00 68 FC | 	wrlong	#0, fp
2bef4     48 4E 05 F1 | 	add	fp, #72
2bef8     A7 FA 09 FB | 	rdlong	result1, fp wz
2befc     50 4E 85 F1 | 	sub	fp, #80
2bf00     08 4E 05 A1 |  if_e	add	fp, #8
2bf04     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bf08     08 4E 85 A1 |  if_e	sub	fp, #8
2bf0c     50 4E 05 F1 | 	add	fp, #80
2bf10     A7 FA 01 FB | 	rdlong	result1, fp
2bf14     50 4E 85 F1 | 	sub	fp, #80
2bf18     01 FA 0D F2 | 	cmp	result1, #1 wz
2bf1c     08 4E 05 A1 |  if_e	add	fp, #8
2bf20     A7 04 68 AC |  if_e	wrlong	#2, fp
2bf24     08 4E 85 A1 |  if_e	sub	fp, #8
2bf28     50 4E 05 F1 | 	add	fp, #80
2bf2c     A7 16 02 FB | 	rdlong	arg03, fp
2bf30     50 4E 85 F1 | 	sub	fp, #80
2bf34     FF FF 7F FF 
2bf38     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2bf3c     08 4E 05 A1 |  if_e	add	fp, #8
2bf40     A7 02 68 AC |  if_e	wrlong	#1, fp
2bf44     08 4E 85 A1 |  if_e	sub	fp, #8
2bf48     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2bf4c     58 4E 05 F1 | 	add	fp, #88
2bf50     A7 FA 61 FC | 	wrlong	result1, fp
2bf54     50 4E 85 F1 | 	sub	fp, #80
2bf58     A7 FA 09 FB | 	rdlong	result1, fp wz
2bf5c     08 4E 85 F1 | 	sub	fp, #8
2bf60     1C 01 90 5D |  if_ne	jmp	#LR__4421
2bf64     4C 4E 05 F1 | 	add	fp, #76
2bf68     A7 12 02 FB | 	rdlong	arg01, fp
2bf6c     04 4E 05 F1 | 	add	fp, #4
2bf70     A7 14 02 FB | 	rdlong	arg02, fp
2bf74     50 4E 85 F1 | 	sub	fp, #80
2bf78     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2bf7c     08 4E 05 F1 | 	add	fp, #8
2bf80     A7 FA 61 FC | 	wrlong	result1, fp
2bf84     00 FA 4D F2 | 	cmps	result1, #0 wz
2bf88     08 4E 85 F1 | 	sub	fp, #8
2bf8c     F0 00 90 5D |  if_ne	jmp	#LR__4420
2bf90     4C 4E 05 F1 | 	add	fp, #76
2bf94     A7 12 02 FB | 	rdlong	arg01, fp
2bf98     4C 4E 85 F1 | 	sub	fp, #76
2bf9c     34 12 06 F1 | 	add	arg01, #52
2bfa0     20 14 06 F6 | 	mov	arg02, #32
2bfa4     0B 16 06 F6 | 	mov	arg03, #11
2bfa8     98 00 A0 FD | 	call	#\builtin_bytefill_
2bfac     4C 4E 05 F1 | 	add	fp, #76
2bfb0     A7 FA 01 FB | 	rdlong	result1, fp
2bfb4     34 FA 05 F1 | 	add	result1, #52
2bfb8     FD 5C 48 FC | 	wrbyte	#46, result1
2bfbc     A7 16 02 FB | 	rdlong	arg03, fp
2bfc0     3F 16 06 F1 | 	add	arg03, #63
2bfc4     0B 21 48 FC | 	wrbyte	#16, arg03
2bfc8     A7 12 02 FB | 	rdlong	arg01, fp
2bfcc     4A 12 06 F1 | 	add	arg01, #74
2bfd0     0C 4E 05 F1 | 	add	fp, #12
2bfd4     A7 14 02 FB | 	rdlong	arg02, fp
2bfd8     09 15 62 FC | 	wrlong	arg02, arg01
2bfdc     0C 4E 85 F1 | 	sub	fp, #12
2bfe0     A7 14 02 FB | 	rdlong	arg02, fp
2bfe4     0A 13 02 F6 | 	mov	arg01, arg02
2bfe8     34 14 06 F1 | 	add	arg02, #52
2bfec     04 4E 05 F1 | 	add	fp, #4
2bff0     A7 16 02 FB | 	rdlong	arg03, fp
2bff4     50 4E 85 F1 | 	sub	fp, #80
2bff8     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bffc     4C 4E 05 F1 | 	add	fp, #76
2c000     A7 14 02 FB | 	rdlong	arg02, fp
2c004     0A 13 02 F6 | 	mov	arg01, arg02
2c008     54 12 06 F1 | 	add	arg01, #84
2c00c     4C 4E 85 F1 | 	sub	fp, #76
2c010     34 14 06 F1 | 	add	arg02, #52
2c014     20 16 06 F6 | 	mov	arg03, #32
2c018     D0 2C BF FD | 	call	#__system____builtin_memmove
2c01c     4C 4E 05 F1 | 	add	fp, #76
2c020     A7 16 02 FB | 	rdlong	arg03, fp
2c024     55 16 06 F1 | 	add	arg03, #85
2c028     0B 5D 48 FC | 	wrbyte	#46, arg03
2c02c     38 4E 85 F1 | 	sub	fp, #56
2c030     A7 16 02 FB | 	rdlong	arg03, fp
2c034     40 4E 05 F1 | 	add	fp, #64
2c038     A7 16 62 FC | 	wrlong	arg03, fp
2c03c     08 4E 85 F1 | 	sub	fp, #8
2c040     A7 14 02 FB | 	rdlong	arg02, fp
2c044     0A 13 02 F6 | 	mov	arg01, arg02
2c048     54 14 06 F1 | 	add	arg02, #84
2c04c     4C 4E 85 F1 | 	sub	fp, #76
2c050     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2c054     4C 4E 05 F1 | 	add	fp, #76
2c058     A7 16 02 FB | 	rdlong	arg03, fp
2c05c     03 16 06 F1 | 	add	arg03, #3
2c060     0B 03 48 FC | 	wrbyte	#1, arg03
2c064     40 4E 85 F1 | 	sub	fp, #64
2c068     A7 12 02 F6 | 	mov	arg01, fp
2c06c     0C 4E 85 F1 | 	sub	fp, #12
2c070     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2c074     08 4E 05 F1 | 	add	fp, #8
2c078     A7 FA 61 FC | 	wrlong	result1, fp
2c07c     08 4E 85 F1 | 	sub	fp, #8
2c080                 | LR__4420
2c080                 | LR__4421
2c080     08 4E 05 F1 | 	add	fp, #8
2c084     A7 FA 09 FB | 	rdlong	result1, fp wz
2c088     08 4E 85 F1 | 	sub	fp, #8
2c08c     88 00 90 5D |  if_ne	jmp	#LR__4422
2c090     28 4E 05 F1 | 	add	fp, #40
2c094     A7 12 02 FB | 	rdlong	arg01, fp
2c098     16 12 06 F1 | 	add	arg01, #22
2c09c     30 4E 05 F1 | 	add	fp, #48
2c0a0     A7 14 02 FB | 	rdlong	arg02, fp
2c0a4     09 15 62 FC | 	wrlong	arg02, arg01
2c0a8     0C 4E 85 F1 | 	sub	fp, #12
2c0ac     A7 12 02 FB | 	rdlong	arg01, fp
2c0b0     24 4E 85 F1 | 	sub	fp, #36
2c0b4     A7 14 02 FB | 	rdlong	arg02, fp
2c0b8     28 4E 05 F1 | 	add	fp, #40
2c0bc     A7 16 02 FB | 	rdlong	arg03, fp
2c0c0     50 4E 85 F1 | 	sub	fp, #80
2c0c4     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2c0c8     28 4E 05 F1 | 	add	fp, #40
2c0cc     A7 FA 01 FB | 	rdlong	result1, fp
2c0d0     0B FA 05 F1 | 	add	result1, #11
2c0d4     FD 20 48 FC | 	wrbyte	#16, result1
2c0d8     24 4E 05 F1 | 	add	fp, #36
2c0dc     A7 FA 01 FB | 	rdlong	result1, fp
2c0e0     03 FA 05 F1 | 	add	result1, #3
2c0e4     FD 02 48 FC | 	wrbyte	#1, result1
2c0e8     44 4E 85 F1 | 	sub	fp, #68
2c0ec     A7 FA 09 FB | 	rdlong	result1, fp wz
2c0f0     08 4E 85 F1 | 	sub	fp, #8
2c0f4     3C 00 90 5D |  if_ne	jmp	#LR__4423
2c0f8     4C 4E 05 F1 | 	add	fp, #76
2c0fc     A7 12 02 FB | 	rdlong	arg01, fp
2c100     4C 4E 85 F1 | 	sub	fp, #76
2c104     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2c108     08 4E 05 F1 | 	add	fp, #8
2c10c     A7 FA 61 FC | 	wrlong	result1, fp
2c110     08 4E 85 F1 | 	sub	fp, #8
2c114     1C 00 90 FD | 	jmp	#LR__4423
2c118                 | LR__4422
2c118     3C 4E 05 F1 | 	add	fp, #60
2c11c     A7 12 02 F6 | 	mov	arg01, fp
2c120     14 4E 05 F1 | 	add	fp, #20
2c124     A7 14 02 FB | 	rdlong	arg02, fp
2c128     50 4E 85 F1 | 	sub	fp, #80
2c12c     00 16 06 F6 | 	mov	arg03, #0
2c130     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2c134                 | LR__4423
2c134                 | LR__4424
2c134                 | LR__4425
2c134                 | ' 				remove_chain(&sobj, dcl, 0);
2c134                 | ' 			}
2c134                 | ' 		}
2c134                 | ' 		;
2c134                 | ' 	}
2c134                 | ' 
2c134                 | ' 	return res ;
2c134     08 4E 05 F1 | 	add	fp, #8
2c138     A7 FA 01 FB | 	rdlong	result1, fp
2c13c     08 4E 85 F1 | 	sub	fp, #8
2c140     A7 F0 03 F6 | 	mov	ptra, fp
2c144     B2 00 A0 FD | 	call	#popregs_
2c148                 | _fatfs_cc_f_mkdir_ret
2c148     2D 00 64 FD | 	ret
2c14c                 | 
2c14c                 | _fatfs_cc_f_rename
2c14c     01 4A 05 F6 | 	mov	COUNT_, #1
2c150     A8 00 A0 FD | 	call	#pushregs_
2c154     9C F0 07 F1 | 	add	ptra, #156
2c158     04 4E 05 F1 | 	add	fp, #4
2c15c     A7 12 62 FC | 	wrlong	arg01, fp
2c160     04 4E 05 F1 | 	add	fp, #4
2c164     A7 14 62 FC | 	wrlong	arg02, fp
2c168     A7 12 02 F6 | 	mov	arg01, fp
2c16c     08 4E 85 F1 | 	sub	fp, #8
2c170     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2c174     04 4E 05 F1 | 	add	fp, #4
2c178     A7 12 02 F6 | 	mov	arg01, fp
2c17c     6C 4E 05 F1 | 	add	fp, #108
2c180     A7 14 02 F6 | 	mov	arg02, fp
2c184     70 4E 85 F1 | 	sub	fp, #112
2c188     02 16 06 F6 | 	mov	arg03, #2
2c18c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2c190     0C 4E 05 F1 | 	add	fp, #12
2c194     A7 FA 61 FC | 	wrlong	result1, fp
2c198     0C 4E 85 F1 | 	sub	fp, #12
2c19c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1a0     44 03 90 5D |  if_ne	jmp	#LR__4443
2c1a4     70 4E 05 F1 | 	add	fp, #112
2c1a8     A7 16 02 FB | 	rdlong	arg03, fp
2c1ac     60 4E 85 F1 | 	sub	fp, #96
2c1b0     A7 16 62 FC | 	wrlong	arg03, fp
2c1b4     A7 12 02 F6 | 	mov	arg01, fp
2c1b8     0C 4E 85 F1 | 	sub	fp, #12
2c1bc     A7 14 02 FB | 	rdlong	arg02, fp
2c1c0     04 4E 85 F1 | 	sub	fp, #4
2c1c4     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2c1c8     0C 4E 05 F1 | 	add	fp, #12
2c1cc     A7 FA 61 FC | 	wrlong	result1, fp
2c1d0     00 FA 4D F2 | 	cmps	result1, #0 wz
2c1d4     0C 4E 85 F1 | 	sub	fp, #12
2c1d8     1C 00 90 5D |  if_ne	jmp	#LR__4430
2c1dc     3B 4E 05 F1 | 	add	fp, #59
2c1e0     A7 FA C1 FA | 	rdbyte	result1, fp
2c1e4     3B 4E 85 F1 | 	sub	fp, #59
2c1e8     A0 FA CD F7 | 	test	result1, #160 wz
2c1ec     0C 4E 05 51 |  if_ne	add	fp, #12
2c1f0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2c1f4     0C 4E 85 51 |  if_ne	sub	fp, #12
2c1f8                 | LR__4430
2c1f8     0C 4E 05 F1 | 	add	fp, #12
2c1fc     A7 1E 0A FB | 	rdlong	local01, fp wz
2c200     0C 4E 85 F1 | 	sub	fp, #12
2c204     E0 02 90 5D |  if_ne	jmp	#LR__4442
2c208     74 4E 05 F1 | 	add	fp, #116
2c20c     A7 12 02 F6 | 	mov	arg01, fp
2c210     48 4E 85 F1 | 	sub	fp, #72
2c214     A7 14 02 FB | 	rdlong	arg02, fp
2c218     2C 4E 85 F1 | 	sub	fp, #44
2c21c     20 16 06 F6 | 	mov	arg03, #32
2c220     C8 2A BF FD | 	call	#__system____builtin_memmove
2c224     40 4E 05 F1 | 	add	fp, #64
2c228     A7 12 02 F6 | 	mov	arg01, fp
2c22c     30 4E 85 F1 | 	sub	fp, #48
2c230     A7 14 02 F6 | 	mov	arg02, fp
2c234     10 4E 85 F1 | 	sub	fp, #16
2c238     30 16 06 F6 | 	mov	arg03, #48
2c23c     AC 2A BF FD | 	call	#__system____builtin_memmove
2c240     40 4E 05 F1 | 	add	fp, #64
2c244     A7 12 02 F6 | 	mov	arg01, fp
2c248     38 4E 85 F1 | 	sub	fp, #56
2c24c     A7 14 02 FB | 	rdlong	arg02, fp
2c250     08 4E 85 F1 | 	sub	fp, #8
2c254     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2c258     0C 4E 05 F1 | 	add	fp, #12
2c25c     A7 FA 61 FC | 	wrlong	result1, fp
2c260     0C 4E 85 F1 | 	sub	fp, #12
2c264     00 FA 0D F2 | 	cmp	result1, #0 wz
2c268     4C 00 90 5D |  if_ne	jmp	#LR__4433
2c26c     48 4E 05 F1 | 	add	fp, #72
2c270     A7 FA 01 FB | 	rdlong	result1, fp
2c274     30 4E 85 F1 | 	sub	fp, #48
2c278     A7 16 02 FB | 	rdlong	arg03, fp
2c27c     18 4E 85 F1 | 	sub	fp, #24
2c280     0B FB 09 F2 | 	cmp	result1, arg03 wz
2c284     20 00 90 5D |  if_ne	jmp	#LR__4431
2c288     50 4E 05 F1 | 	add	fp, #80
2c28c     A7 FA 01 FB | 	rdlong	result1, fp
2c290     30 4E 85 F1 | 	sub	fp, #48
2c294     A7 16 02 FB | 	rdlong	arg03, fp
2c298     20 4E 85 F1 | 	sub	fp, #32
2c29c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2c2a0     04 1E 06 A6 |  if_e	mov	local01, #4
2c2a4     04 00 90 AD |  if_e	jmp	#LR__4432
2c2a8                 | LR__4431
2c2a8     08 1E 06 F6 | 	mov	local01, #8
2c2ac                 | LR__4432
2c2ac     0C 4E 05 F1 | 	add	fp, #12
2c2b0     A7 1E 62 FC | 	wrlong	local01, fp
2c2b4     0C 4E 85 F1 | 	sub	fp, #12
2c2b8                 | LR__4433
2c2b8     0C 4E 05 F1 | 	add	fp, #12
2c2bc     A7 1E 02 FB | 	rdlong	local01, fp
2c2c0     0C 4E 85 F1 | 	sub	fp, #12
2c2c4     04 1E 0E F2 | 	cmp	local01, #4 wz
2c2c8     CC 01 90 5D |  if_ne	jmp	#LR__4439
2c2cc     40 4E 05 F1 | 	add	fp, #64
2c2d0     A7 12 02 F6 | 	mov	arg01, fp
2c2d4     40 4E 85 F1 | 	sub	fp, #64
2c2d8     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2c2dc     0C 4E 05 F1 | 	add	fp, #12
2c2e0     A7 FA 61 FC | 	wrlong	result1, fp
2c2e4     0C 4E 85 F1 | 	sub	fp, #12
2c2e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c2ec     A8 01 90 5D |  if_ne	jmp	#LR__4438
2c2f0     5C 4E 05 F1 | 	add	fp, #92
2c2f4     A7 12 02 FB | 	rdlong	arg01, fp
2c2f8     38 4E 05 F1 | 	add	fp, #56
2c2fc     A7 12 62 FC | 	wrlong	arg01, fp
2c300     0D 12 06 F1 | 	add	arg01, #13
2c304     20 4E 85 F1 | 	sub	fp, #32
2c308     A7 14 02 F6 | 	mov	arg02, fp
2c30c     74 4E 85 F1 | 	sub	fp, #116
2c310     0D 14 06 F1 | 	add	arg02, #13
2c314     13 16 06 F6 | 	mov	arg03, #19
2c318     D0 29 BF FD | 	call	#__system____builtin_memmove
2c31c     94 4E 05 F1 | 	add	fp, #148
2c320     A7 1E 02 FB | 	rdlong	local01, fp
2c324     15 4E 85 F1 | 	sub	fp, #21
2c328     A7 FA C1 FA | 	rdbyte	result1, fp
2c32c     0B 1E 06 F1 | 	add	local01, #11
2c330     0F FB 41 FC | 	wrbyte	result1, local01
2c334     15 4E 05 F1 | 	add	fp, #21
2c338     A7 1E 02 FB | 	rdlong	local01, fp
2c33c     94 4E 85 F1 | 	sub	fp, #148
2c340     0B 1E 06 F1 | 	add	local01, #11
2c344     0F 1F C2 FA | 	rdbyte	local01, local01
2c348     10 1E CE F7 | 	test	local01, #16 wz
2c34c     24 00 90 5D |  if_ne	jmp	#LR__4434
2c350     94 4E 05 F1 | 	add	fp, #148
2c354     A7 FA 01 FB | 	rdlong	result1, fp
2c358     FD 1E 02 F6 | 	mov	local01, result1
2c35c     94 4E 85 F1 | 	sub	fp, #148
2c360     0B FA 05 F1 | 	add	result1, #11
2c364     FD FA C1 FA | 	rdbyte	result1, result1
2c368     20 FA 45 F5 | 	or	result1, #32
2c36c     0B 1E 06 F1 | 	add	local01, #11
2c370     0F FB 41 FC | 	wrbyte	result1, local01
2c374                 | LR__4434
2c374     70 4E 05 F1 | 	add	fp, #112
2c378     A7 1E 02 FB | 	rdlong	local01, fp
2c37c     03 1E 06 F1 | 	add	local01, #3
2c380     0F 03 48 FC | 	wrbyte	#1, local01
2c384     24 4E 05 F1 | 	add	fp, #36
2c388     A7 1E 02 FB | 	rdlong	local01, fp
2c38c     94 4E 85 F1 | 	sub	fp, #148
2c390     0B 1E 06 F1 | 	add	local01, #11
2c394     0F 1F C2 FA | 	rdbyte	local01, local01
2c398     10 1E CE F7 | 	test	local01, #16 wz
2c39c     F8 00 90 AD |  if_e	jmp	#LR__4437
2c3a0     18 4E 05 F1 | 	add	fp, #24
2c3a4     A7 16 02 FB | 	rdlong	arg03, fp
2c3a8     30 4E 05 F1 | 	add	fp, #48
2c3ac     A7 1E 02 FB | 	rdlong	local01, fp
2c3b0     48 4E 85 F1 | 	sub	fp, #72
2c3b4     0F 17 0A F2 | 	cmp	arg03, local01 wz
2c3b8     DC 00 90 AD |  if_e	jmp	#LR__4437
2c3bc     70 4E 05 F1 | 	add	fp, #112
2c3c0     A7 12 02 FB | 	rdlong	arg01, fp
2c3c4     09 1F 02 F6 | 	mov	local01, arg01
2c3c8     24 4E 05 F1 | 	add	fp, #36
2c3cc     A7 14 02 FB | 	rdlong	arg02, fp
2c3d0     94 4E 85 F1 | 	sub	fp, #148
2c3d4     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2c3d8     FD 14 02 F6 | 	mov	arg02, result1
2c3dc     0F 13 02 F6 | 	mov	arg01, local01
2c3e0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2c3e4     98 4E 05 F1 | 	add	fp, #152
2c3e8     A7 FA 61 FC | 	wrlong	result1, fp
2c3ec     00 FA 4D F2 | 	cmps	result1, #0 wz
2c3f0     98 4E 85 F1 | 	sub	fp, #152
2c3f4     0C 4E 05 A1 |  if_e	add	fp, #12
2c3f8     A7 04 68 AC |  if_e	wrlong	#2, fp
2c3fc     0C 4E 85 A1 |  if_e	sub	fp, #12
2c400     94 00 90 AD |  if_e	jmp	#LR__4436
2c404     70 4E 05 F1 | 	add	fp, #112
2c408     A7 12 02 FB | 	rdlong	arg01, fp
2c40c     28 4E 05 F1 | 	add	fp, #40
2c410     A7 14 02 FB | 	rdlong	arg02, fp
2c414     98 4E 85 F1 | 	sub	fp, #152
2c418     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2c41c     0C 4E 05 F1 | 	add	fp, #12
2c420     A7 FA 61 FC | 	wrlong	result1, fp
2c424     64 4E 05 F1 | 	add	fp, #100
2c428     A7 1E 02 FB | 	rdlong	local01, fp
2c42c     54 1E 06 F1 | 	add	local01, #84
2c430     24 4E 05 F1 | 	add	fp, #36
2c434     A7 1E 62 FC | 	wrlong	local01, fp
2c438     88 4E 85 F1 | 	sub	fp, #136
2c43c     A7 1E 0A FB | 	rdlong	local01, fp wz
2c440     0C 4E 85 F1 | 	sub	fp, #12
2c444     50 00 90 5D |  if_ne	jmp	#LR__4435
2c448     94 4E 05 F1 | 	add	fp, #148
2c44c     A7 1E 02 FB | 	rdlong	local01, fp
2c450     94 4E 85 F1 | 	sub	fp, #148
2c454     01 1E 06 F1 | 	add	local01, #1
2c458     0F 1F C2 FA | 	rdbyte	local01, local01
2c45c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2c460     34 00 90 5D |  if_ne	jmp	#LR__4435
2c464     70 4E 05 F1 | 	add	fp, #112
2c468     A7 12 02 FB | 	rdlong	arg01, fp
2c46c     24 4E 05 F1 | 	add	fp, #36
2c470     A7 14 02 FB | 	rdlong	arg02, fp
2c474     4C 4E 85 F1 | 	sub	fp, #76
2c478     A7 16 02 FB | 	rdlong	arg03, fp
2c47c     48 4E 85 F1 | 	sub	fp, #72
2c480     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2c484     70 4E 05 F1 | 	add	fp, #112
2c488     A7 1E 02 FB | 	rdlong	local01, fp
2c48c     70 4E 85 F1 | 	sub	fp, #112
2c490     03 1E 06 F1 | 	add	local01, #3
2c494     0F 03 48 FC | 	wrbyte	#1, local01
2c498                 | LR__4435
2c498                 | LR__4436
2c498                 | LR__4437
2c498                 | LR__4438
2c498                 | LR__4439
2c498     0C 4E 05 F1 | 	add	fp, #12
2c49c     A7 1E 0A FB | 	rdlong	local01, fp wz
2c4a0     0C 4E 85 F1 | 	sub	fp, #12
2c4a4     40 00 90 5D |  if_ne	jmp	#LR__4441
2c4a8     10 4E 05 F1 | 	add	fp, #16
2c4ac     A7 12 02 F6 | 	mov	arg01, fp
2c4b0     10 4E 85 F1 | 	sub	fp, #16
2c4b4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2c4b8     0C 4E 05 F1 | 	add	fp, #12
2c4bc     A7 FA 61 FC | 	wrlong	result1, fp
2c4c0     0C 4E 85 F1 | 	sub	fp, #12
2c4c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4c8     1C 00 90 5D |  if_ne	jmp	#LR__4440
2c4cc     70 4E 05 F1 | 	add	fp, #112
2c4d0     A7 12 02 FB | 	rdlong	arg01, fp
2c4d4     70 4E 85 F1 | 	sub	fp, #112
2c4d8     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2c4dc     0C 4E 05 F1 | 	add	fp, #12
2c4e0     A7 FA 61 FC | 	wrlong	result1, fp
2c4e4     0C 4E 85 F1 | 	sub	fp, #12
2c4e8                 | LR__4440
2c4e8                 | LR__4441
2c4e8                 | LR__4442
2c4e8                 | LR__4443
2c4e8                 | ' 					res = sync_fs(fs);
2c4e8                 | ' 				}
2c4e8                 | ' 			}
2c4e8                 | ' 
2c4e8                 | ' 		}
2c4e8                 | ' 		;
2c4e8                 | ' 	}
2c4e8                 | ' 
2c4e8                 | ' 	return res ;
2c4e8     0C 4E 05 F1 | 	add	fp, #12
2c4ec     A7 FA 01 FB | 	rdlong	result1, fp
2c4f0     0C 4E 85 F1 | 	sub	fp, #12
2c4f4     A7 F0 03 F6 | 	mov	ptra, fp
2c4f8     B2 00 A0 FD | 	call	#popregs_
2c4fc                 | _fatfs_cc_f_rename_ret
2c4fc     2D 00 64 FD | 	ret
2c500                 | 
2c500                 | _fatfs_cc_time
2c500     00 4A 05 F6 | 	mov	COUNT_, #0
2c504     A8 00 A0 FD | 	call	#pushregs_
2c508     14 F0 07 F1 | 	add	ptra, #20
2c50c     04 4E 05 F1 | 	add	fp, #4
2c510     A7 12 62 FC | 	wrlong	arg01, fp
2c514     04 4E 05 F1 | 	add	fp, #4
2c518     A7 12 02 F6 | 	mov	arg01, fp
2c51c     08 4E 85 F1 | 	sub	fp, #8
2c520     00 14 06 F6 | 	mov	arg02, #0
2c524     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2c528     08 4E 05 F1 | 	add	fp, #8
2c52c     A7 FA 01 FB | 	rdlong	result1, fp
2c530     08 4E 05 F1 | 	add	fp, #8
2c534     A7 FA 61 FC | 	wrlong	result1, fp
2c538     0C 4E 85 F1 | 	sub	fp, #12
2c53c     A7 FA 09 FB | 	rdlong	result1, fp wz
2c540     04 4E 85 F1 | 	sub	fp, #4
2c544     18 00 90 AD |  if_e	jmp	#LR__4450
2c548     04 4E 05 F1 | 	add	fp, #4
2c54c     A7 FA 01 FB | 	rdlong	result1, fp
2c550     0C 4E 05 F1 | 	add	fp, #12
2c554     A7 14 02 FB | 	rdlong	arg02, fp
2c558     10 4E 85 F1 | 	sub	fp, #16
2c55c     FD 14 62 FC | 	wrlong	arg02, result1
2c560                 | LR__4450
2c560                 | '         *tp = now;
2c560                 | '     return now;
2c560     10 4E 05 F1 | 	add	fp, #16
2c564     A7 FA 01 FB | 	rdlong	result1, fp
2c568     10 4E 85 F1 | 	sub	fp, #16
2c56c     A7 F0 03 F6 | 	mov	ptra, fp
2c570     B2 00 A0 FD | 	call	#popregs_
2c574                 | _fatfs_cc_time_ret
2c574     2D 00 64 FD | 	ret
2c578                 | 
2c578                 | _fatfs_cc_mktime
2c578     06 4A 05 F6 | 	mov	COUNT_, #6
2c57c     A8 00 A0 FD | 	call	#pushregs_
2c580     09 1F 02 F6 | 	mov	local01, arg01
2c584     14 1E 06 F1 | 	add	local01, #20
2c588     0F 13 02 FB | 	rdlong	arg01, local01
2c58c     14 1E 86 F1 | 	sub	local01, #20
2c590     46 12 56 F2 | 	cmps	arg01, #70 wc
2c594                 | '                 return (time_t) -1;
2c594     01 FA 65 C6 |  if_b	neg	result1, #1
2c598     7C 01 90 CD |  if_b	jmp	#LR__4464
2c59c     03 00 00 FF 
2c5a0     6C 21 06 F6 | 	mov	local02, ##1900
2c5a4     14 1E 06 F1 | 	add	local01, #20
2c5a8     0F FB 01 FB | 	rdlong	result1, local01
2c5ac     FD 20 02 F1 | 	add	local02, result1
2c5b0     08 1E 86 F1 | 	sub	local01, #8
2c5b4     0F 23 02 FB | 	rdlong	local03, local01
2c5b8     01 22 86 F1 | 	sub	local03, #1
2c5bc     04 1E 06 F1 | 	add	local01, #4
2c5c0     0F 13 02 FB | 	rdlong	arg01, local01
2c5c4     10 1E 86 F1 | 	sub	local01, #16
2c5c8     02 12 66 F0 | 	shl	arg01, #2
2c5cc     02 00 00 FF 
2c5d0     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2c5d4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c5d8     09 FB 01 FB | 	rdlong	result1, arg01
2c5dc     FD 22 02 F1 | 	add	local03, result1
2c5e0     10 13 02 F6 | 	mov	arg01, local02
2c5e4     02 00 00 FF 
2c5e8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2c5ec     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c5f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c5f4     1C 00 90 AD |  if_e	jmp	#LR__4460
2c5f8     00 24 06 F6 | 	mov	local04, #0
2c5fc     10 1E 06 F1 | 	add	local01, #16
2c600     0F FB 01 FB | 	rdlong	result1, local01
2c604     10 1E 86 F1 | 	sub	local01, #16
2c608     02 FA 55 F2 | 	cmps	result1, #2 wc
2c60c     01 24 06 36 |  if_ae	mov	local04, #1
2c610     04 00 90 FD | 	jmp	#LR__4461
2c614                 | LR__4460
2c614     00 24 06 F6 | 	mov	local04, #0
2c618                 | LR__4461
2c618     04 1E 06 F1 | 	add	local01, #4
2c61c     0F FB 01 FB | 	rdlong	result1, local01
2c620     04 1E 86 F1 | 	sub	local01, #4
2c624     0F 27 02 FB | 	rdlong	local05, local01
2c628     08 1E 06 F1 | 	add	local01, #8
2c62c     0F 13 02 FB | 	rdlong	arg01, local01
2c630     07 00 00 FF 
2c634     10 12 06 FD | 	qmul	arg01, ##3600
2c638     12 23 02 F1 | 	add	local03, local04
2c63c     FD 24 02 F6 | 	mov	local04, result1
2c640     04 24 66 F0 | 	shl	local04, #4
2c644     FD 24 82 F1 | 	sub	local04, result1
2c648     02 24 66 F0 | 	shl	local04, #2
2c64c     12 27 02 F1 | 	add	local05, local04
2c650     08 1E 86 F1 | 	sub	local01, #8
2c654     18 24 62 FD | 	getqx	local04
2c658     A8 00 00 FF 
2c65c     80 23 06 FD | 	qmul	local03, ##86400
2c660     12 27 02 F1 | 	add	local05, local04
2c664     10 23 02 F6 | 	mov	local03, local02
2c668     03 00 00 FF 
2c66c     B2 23 86 F1 | 	sub	local03, ##1970
2c670     18 24 62 FD | 	getqx	local04
2c674     99 F0 00 FF 
2c678     80 23 06 FD | 	qmul	local03, ##31536000
2c67c     12 27 02 F1 | 	add	local05, local04
2c680     10 23 02 F6 | 	mov	local03, local02
2c684     03 00 00 FF 
2c688     B1 23 86 F1 | 	sub	local03, ##1969
2c68c     11 29 52 F6 | 	abs	local06, local03 wc
2c690     02 28 46 F0 | 	shr	local06, #2
2c694     14 29 82 F6 | 	negc	local06, local06
2c698     03 00 00 FF 
2c69c     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2c6a0     18 24 62 FD | 	getqx	local04
2c6a4     12 27 02 F1 | 	add	local05, local04
2c6a8     18 00 90 CD |  if_b	jmp	#LR__4462
2c6ac     03 00 00 FF 
2c6b0     D0 21 86 F1 | 	sub	local02, ##2000
2c6b4     10 25 52 F6 | 	abs	local04, local02 wc
2c6b8     64 24 16 FD | 	qdiv	local04, #100
2c6bc     18 24 62 FD | 	getqx	local04
2c6c0     12 29 A2 F3 | 	sumnc	local06, local04
2c6c4                 | LR__4462
2c6c4     A8 00 00 FF 
2c6c8     80 29 06 FD | 	qmul	local06, ##86400
2c6cc     18 28 62 FD | 	getqx	local06
2c6d0     14 27 02 F1 | 	add	local05, local06
2c6d4     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2c6d8     02 00 00 FF 
2c6dc     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c6e0     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c6e4     14 27 02 F1 | 	add	local05, local06
2c6e8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c6ec     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c6f0     02 00 00 FF 
2c6f4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c6f8     01 22 0E F2 | 	cmp	local03, #1 wz
2c6fc     14 00 90 5D |  if_ne	jmp	#LR__4463
2c700     0F 13 02 F6 | 	mov	arg01, local01
2c704     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2c708     00 FA 0D F2 | 	cmp	result1, #0 wz
2c70c     07 00 00 5F 
2c710     10 26 86 51 |  if_ne	sub	local05, ##3600
2c714                 | LR__4463
2c714                 | '                 s -=  (3600L) ;
2c714                 | ' 
2c714                 | '         return s;
2c714     13 FB 01 F6 | 	mov	result1, local05
2c718                 | LR__4464
2c718     A7 F0 03 F6 | 	mov	ptra, fp
2c71c     B2 00 A0 FD | 	call	#popregs_
2c720                 | _fatfs_cc_mktime_ret
2c720     2D 00 64 FD | 	ret
2c724                 | 
2c724                 | _fatfs_cc__gmtime_r
2c724     03 4A 05 F6 | 	mov	COUNT_, #3
2c728     A8 00 A0 FD | 	call	#pushregs_
2c72c     09 1F 02 FB | 	rdlong	local01, arg01
2c730     A8 00 00 FF 
2c734     80 1F 16 FD | 	qdiv	local01, ##86400
2c738     18 FA 61 FD | 	getqx	result1
2c73c     04 FA 05 F1 | 	add	result1, #4
2c740     07 FA 15 FD | 	qdiv	result1, #7
2c744     18 14 06 F1 | 	add	arg02, #24
2c748     D1 7F 27 FF 
2c74c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2c750     D1 7F 27 3F 
2c754     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2c758     03 00 00 3F 
2c75c     DC 21 06 36 |  if_ae	mov	local02, ##2012
2c760     03 00 00 CF 
2c764     B2 21 06 C6 |  if_b	mov	local02, ##1970
2c768                 | ' 	  year = 1970;
2c768                 | ' 	}
2c768                 | ' 
2c768                 | ' 	for(;;) {
2c768     19 FA 61 FD | 	getqy	result1
2c76c     0A FB 61 FC | 	wrlong	result1, arg02
2c770     18 14 86 F1 | 	sub	arg02, #24
2c774                 | LR__4470
2c774     10 13 02 F6 | 	mov	arg01, local02
2c778     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c77c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c780     42 F1 00 5F 
2c784     00 23 06 56 |  if_ne	mov	local03, ##31622400
2c788     99 F0 00 AF 
2c78c     80 23 06 A6 |  if_e	mov	local03, ##31536000
2c790     11 1F 12 F2 | 	cmp	local01, local03 wc
2c794                 | ' 	    break;
2c794     01 20 06 31 |  if_ae	add	local02, #1
2c798     11 1F 82 31 |  if_ae	sub	local01, local03
2c79c     D4 FF 9F 3D |  if_ae	jmp	#LR__4470
2c7a0     A8 00 00 FF 
2c7a4     80 1F 16 FD | 	qdiv	local01, ##86400
2c7a8     10 23 02 F6 | 	mov	local03, local02
2c7ac     03 00 00 FF 
2c7b0     6C 23 86 F1 | 	sub	local03, ##1900
2c7b4     14 14 06 F1 | 	add	arg02, #20
2c7b8     0A 23 62 FC | 	wrlong	local03, arg02
2c7bc     08 14 06 F1 | 	add	arg02, #8
2c7c0     10 13 02 F6 | 	mov	arg01, local02
2c7c4     18 20 62 FD | 	getqx	local02
2c7c8     0A 21 62 FC | 	wrlong	local02, arg02
2c7cc     1C 14 86 F1 | 	sub	arg02, #28
2c7d0     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c7d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c7d8     1D 22 06 56 |  if_ne	mov	local03, #29
2c7dc     1C 22 06 A6 |  if_e	mov	local03, #28
2c7e0     02 00 00 FF 
2c7e4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2c7e8     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c7ec     02 00 00 FF 
2c7f0     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2c7f4                 | ' 
2c7f4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c7f4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c7f4     00 12 06 F6 | 	mov	arg01, #0
2c7f8     97 2A 48 FB | 	callpa	#(@LR__4472-@LR__4471)>>2,fcache_load_ptr_
2c7fc                 | LR__4471
2c7fc     09 23 02 F6 | 	mov	local03, arg01
2c800     02 22 66 F0 | 	shl	local03, #2
2c804     02 00 00 FF 
2c808     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c80c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c810     11 23 02 FB | 	rdlong	local03, local03
2c814     11 21 52 F2 | 	cmps	local02, local03 wc
2c818     02 00 00 FF 
2c81c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c820     2C 00 90 CD |  if_b	jmp	#LR__4473
2c824     09 23 02 F6 | 	mov	local03, arg01
2c828     02 22 66 F0 | 	shl	local03, #2
2c82c     02 00 00 FF 
2c830     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c834     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c838     11 23 02 FB | 	rdlong	local03, local03
2c83c     11 21 82 F1 | 	sub	local02, local03
2c840     01 12 06 F1 | 	add	arg01, #1
2c844     02 00 00 FF 
2c848     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c84c     AC FF 9F FD | 	jmp	#LR__4471
2c850                 | LR__4472
2c850                 | LR__4473
2c850     A8 00 00 FF 
2c854     80 1F 16 FD | 	qdiv	local01, ##86400
2c858     10 14 06 F1 | 	add	arg02, #16
2c85c     0A 13 62 FC | 	wrlong	arg01, arg02
2c860     01 20 06 F1 | 	add	local02, #1
2c864     04 14 86 F1 | 	sub	arg02, #4
2c868     0A 21 62 FC | 	wrlong	local02, arg02
2c86c     19 1E 62 FD | 	getqy	local01
2c870     07 00 00 FF 
2c874     10 1E 16 FD | 	qdiv	local01, ##3600
2c878     18 22 62 FD | 	getqx	local03
2c87c     07 00 00 FF 
2c880     10 1E 16 FD | 	qdiv	local01, ##3600
2c884     04 14 86 F1 | 	sub	arg02, #4
2c888     0A 23 62 FC | 	wrlong	local03, arg02
2c88c     19 1E 62 FD | 	getqy	local01
2c890     3C 1E 16 FD | 	qdiv	local01, #60
2c894     18 22 62 FD | 	getqx	local03
2c898     3C 1E 16 FD | 	qdiv	local01, #60
2c89c     04 14 86 F1 | 	sub	arg02, #4
2c8a0     0A 23 62 FC | 	wrlong	local03, arg02
2c8a4     04 14 86 F1 | 	sub	arg02, #4
2c8a8                 | '         stm->tm_isdst = 0;
2c8a8                 | ' 
2c8a8                 | ' ;
2c8a8                 | '         return stm;
2c8a8     0A FB 01 F6 | 	mov	result1, arg02
2c8ac     19 22 62 FD | 	getqy	local03
2c8b0     0A 23 62 FC | 	wrlong	local03, arg02
2c8b4     20 14 06 F1 | 	add	arg02, #32
2c8b8     0A 01 68 FC | 	wrlong	#0, arg02
2c8bc     A7 F0 03 F6 | 	mov	ptra, fp
2c8c0     B2 00 A0 FD | 	call	#popregs_
2c8c4                 | _fatfs_cc__gmtime_r_ret
2c8c4     2D 00 64 FD | 	ret
2c8c8                 | 
2c8c8                 | _fatfs_cc__tzset
2c8c8     72 01 00 FF 
2c8cc     0D 12 06 F6 | 	mov	arg01, ##@LR__4785
2c8d0     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2c8d4     FD 12 02 F6 | 	mov	arg01, result1
2c8d8     02 00 00 FF 
2c8dc     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2c8e0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c8e4     02 00 00 FF 
2c8e8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c8ec     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2c8f0     02 00 00 FF 
2c8f4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c8f8     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c8fc     02 00 00 FF 
2c900     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2c904                 | _fatfs_cc__tzset_ret
2c904     2D 00 64 FD | 	ret
2c908                 | 
2c908                 | _fatfs_cc_getenv
2c908     06 4A 05 F6 | 	mov	COUNT_, #6
2c90c     A8 00 A0 FD | 	call	#pushregs_
2c910     09 1F 02 F6 | 	mov	local01, arg01
2c914     09 21 02 F6 | 	mov	local02, arg01
2c918     97 06 48 FB | 	callpa	#(@LR__4481-@LR__4480)>>2,fcache_load_ptr_
2c91c                 | LR__4480
2c91c     10 FB C9 FA | 	rdbyte	result1, local02 wz
2c920     01 20 06 51 |  if_ne	add	local02, #1
2c924     F4 FF 9F 5D |  if_ne	jmp	#LR__4480
2c928                 | LR__4481
2c928     09 21 82 F1 | 	sub	local02, arg01
2c92c     10 FB 01 F6 | 	mov	result1, local02
2c930     02 00 00 FF 
2c934     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c938     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2c93c     02 00 00 FF 
2c940     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c944                 | '             return 0;
2c944     00 FA 05 A6 |  if_e	mov	result1, #0
2c948     5C 00 90 AD |  if_e	jmp	#LR__4484
2c94c                 | ' 
2c94c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2c94c     02 00 00 FF 
2c950     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c954     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c958     02 00 00 FF 
2c95c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c960                 | LR__4482
2c960     11 25 0A FB | 	rdlong	local04, local03 wz
2c964     3C 00 90 AD |  if_e	jmp	#LR__4483
2c968     12 13 02 F6 | 	mov	arg01, local04
2c96c     0F 15 02 F6 | 	mov	arg02, local01
2c970     10 17 02 F6 | 	mov	arg03, local02
2c974     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2c978     00 FA 0D F2 | 	cmp	result1, #0 wz
2c97c     10 27 02 A6 |  if_e	mov	local05, local02
2c980     12 27 02 A1 |  if_e	add	local05, local04
2c984     13 29 C2 AA |  if_e	rdbyte	local06, local05
2c988     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2c98c                 | ' 			return name+len+1;
2c98c     10 25 02 A1 |  if_e	add	local04, local02
2c990     01 24 06 A1 |  if_e	add	local04, #1
2c994     12 FB 01 A6 |  if_e	mov	result1, local04
2c998     0C 00 90 AD |  if_e	jmp	#LR__4484
2c99c     04 22 06 F1 | 	add	local03, #4
2c9a0     BC FF 9F FD | 	jmp	#LR__4482
2c9a4                 | LR__4483
2c9a4                 | ' 	}
2c9a4                 | ' 	return 0;
2c9a4     00 FA 05 F6 | 	mov	result1, #0
2c9a8                 | LR__4484
2c9a8     A7 F0 03 F6 | 	mov	ptra, fp
2c9ac     B2 00 A0 FD | 	call	#popregs_
2c9b0                 | _fatfs_cc_getenv_ret
2c9b0     2D 00 64 FD | 	ret
2c9b4                 | 
2c9b4                 | _fatfs_cc__get_fattime
2c9b4     00 4A 05 F6 | 	mov	COUNT_, #0
2c9b8     A8 00 A0 FD | 	call	#pushregs_
2c9bc     34 F0 07 F1 | 	add	ptra, #52
2c9c0     00 12 06 F6 | 	mov	arg01, #0
2c9c4     38 FB BF FD | 	call	#_fatfs_cc_time
2c9c8     04 4E 05 F1 | 	add	fp, #4
2c9cc     A7 FA 61 FC | 	wrlong	result1, fp
2c9d0     A7 12 02 F6 | 	mov	arg01, fp
2c9d4     0C 4E 05 F1 | 	add	fp, #12
2c9d8     A7 14 02 F6 | 	mov	arg02, fp
2c9dc     10 4E 85 F1 | 	sub	fp, #16
2c9e0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2c9e4     24 4E 05 F1 | 	add	fp, #36
2c9e8     A7 14 02 FB | 	rdlong	arg02, fp
2c9ec     50 14 86 F1 | 	sub	arg02, #80
2c9f0     09 14 66 F0 | 	shl	arg02, #9
2c9f4     04 4E 85 F1 | 	sub	fp, #4
2c9f8     A7 FA 01 FB | 	rdlong	result1, fp
2c9fc     01 FA 05 F1 | 	add	result1, #1
2ca00     05 FA 65 F0 | 	shl	result1, #5
2ca04     FD 14 42 F5 | 	or	arg02, result1
2ca08     04 4E 85 F1 | 	sub	fp, #4
2ca0c     A7 FA 01 FB | 	rdlong	result1, fp
2ca10     FD 14 42 F5 | 	or	arg02, result1
2ca14     14 4E 85 F1 | 	sub	fp, #20
2ca18     A7 14 62 FC | 	wrlong	arg02, fp
2ca1c     10 4E 05 F1 | 	add	fp, #16
2ca20     A7 14 02 FB | 	rdlong	arg02, fp
2ca24     0B 14 66 F0 | 	shl	arg02, #11
2ca28     04 4E 85 F1 | 	sub	fp, #4
2ca2c     A7 FA 01 FB | 	rdlong	result1, fp
2ca30     05 FA 65 F0 | 	shl	result1, #5
2ca34     FD 14 42 F5 | 	or	arg02, result1
2ca38     04 4E 85 F1 | 	sub	fp, #4
2ca3c     A7 FA 01 FB | 	rdlong	result1, fp
2ca40     FD 14 42 F5 | 	or	arg02, result1
2ca44     04 4E 85 F1 | 	sub	fp, #4
2ca48     A7 14 62 FC | 	wrlong	arg02, fp
2ca4c                 | ' 
2ca4c                 | '     now = time(0);
2ca4c                 | '     _gmtime_r (&now, &date);
2ca4c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2ca4c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2ca4c                 | '     return (ffdate << 16) | fftime;
2ca4c     04 4E 85 F1 | 	sub	fp, #4
2ca50     A7 FA 01 FB | 	rdlong	result1, fp
2ca54     10 FA 65 F0 | 	shl	result1, #16
2ca58     08 4E 85 F1 | 	sub	fp, #8
2ca5c     0A FB 41 F5 | 	or	result1, arg02
2ca60     A7 F0 03 F6 | 	mov	ptra, fp
2ca64     B2 00 A0 FD | 	call	#popregs_
2ca68                 | _fatfs_cc__get_fattime_ret
2ca68     2D 00 64 FD | 	ret
2ca6c                 | 
2ca6c                 | _fatfs_cc_unixtime_0905
2ca6c     00 4A 05 F6 | 	mov	COUNT_, #0
2ca70     A8 00 A0 FD | 	call	#pushregs_
2ca74     34 F0 07 F1 | 	add	ptra, #52
2ca78     04 4E 05 F1 | 	add	fp, #4
2ca7c     A7 12 62 FC | 	wrlong	arg01, fp
2ca80     04 4E 05 F1 | 	add	fp, #4
2ca84     A7 14 62 FC | 	wrlong	arg02, fp
2ca88     04 4E 85 F1 | 	sub	fp, #4
2ca8c     A7 14 02 FB | 	rdlong	arg02, fp
2ca90     09 14 46 F0 | 	shr	arg02, #9
2ca94     7F 14 06 F5 | 	and	arg02, #127
2ca98     50 FA 05 F6 | 	mov	result1, #80
2ca9c     0A FB 01 F1 | 	add	result1, arg02
2caa0     20 4E 05 F1 | 	add	fp, #32
2caa4     A7 FA 61 FC | 	wrlong	result1, fp
2caa8     20 4E 85 F1 | 	sub	fp, #32
2caac     A7 FA 01 FB | 	rdlong	result1, fp
2cab0     05 FA 45 F0 | 	shr	result1, #5
2cab4     FD FA 41 F8 | 	getnib	result1, result1, #0
2cab8     01 FA 85 F1 | 	sub	result1, #1
2cabc     1C 4E 05 F1 | 	add	fp, #28
2cac0     A7 FA 61 FC | 	wrlong	result1, fp
2cac4     1C 4E 85 F1 | 	sub	fp, #28
2cac8     A7 FA 01 FB | 	rdlong	result1, fp
2cacc     1F FA 05 F5 | 	and	result1, #31
2cad0     18 4E 05 F1 | 	add	fp, #24
2cad4     A7 FA 61 FC | 	wrlong	result1, fp
2cad8     14 4E 85 F1 | 	sub	fp, #20
2cadc     A7 FA 01 FB | 	rdlong	result1, fp
2cae0     0B FA 45 F0 | 	shr	result1, #11
2cae4     1F FA 05 F5 | 	and	result1, #31
2cae8     10 4E 05 F1 | 	add	fp, #16
2caec     A7 FA 61 FC | 	wrlong	result1, fp
2caf0     10 4E 85 F1 | 	sub	fp, #16
2caf4     A7 FA 01 FB | 	rdlong	result1, fp
2caf8     05 FA 45 F0 | 	shr	result1, #5
2cafc     3F FA 05 F5 | 	and	result1, #63
2cb00     0C 4E 05 F1 | 	add	fp, #12
2cb04     A7 FA 61 FC | 	wrlong	result1, fp
2cb08     0C 4E 85 F1 | 	sub	fp, #12
2cb0c     A7 14 02 FB | 	rdlong	arg02, fp
2cb10     1F 14 06 F5 | 	and	arg02, #31
2cb14     01 14 66 F0 | 	shl	arg02, #1
2cb18     08 4E 05 F1 | 	add	fp, #8
2cb1c     A7 14 62 FC | 	wrlong	arg02, fp
2cb20     A7 12 02 F6 | 	mov	arg01, fp
2cb24     10 4E 85 F1 | 	sub	fp, #16
2cb28     4C FA BF FD | 	call	#_fatfs_cc_mktime
2cb2c     0C 4E 05 F1 | 	add	fp, #12
2cb30     A7 FA 61 FC | 	wrlong	result1, fp
2cb34                 | ' 
2cb34                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2cb34                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2cb34                 | '     date.tm_mday = (dosdate & 0x1f);
2cb34                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2cb34                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2cb34                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2cb34                 | ' 
2cb34                 | '     t = mktime(&date);
2cb34                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cb34                 | '     return t;
2cb34     0C 4E 85 F1 | 	sub	fp, #12
2cb38     A7 F0 03 F6 | 	mov	ptra, fp
2cb3c     B2 00 A0 FD | 	call	#popregs_
2cb40                 | _fatfs_cc_unixtime_0905_ret
2cb40     2D 00 64 FD | 	ret
2cb44                 | 
2cb44                 | _fatfs_cc__set_dos_error_0907
2cb44     09 01 02 F6 | 	mov	_var01, arg01
2cb48                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cb48                 | '     switch (derr) {
2cb48     14 00 26 F3 | 	fle	_var01, #20
2cb4c     30 00 62 FD | 	jmprel	_var01
2cb50                 | LR__4490
2cb50     50 00 90 FD | 	jmp	#LR__4491
2cb54     84 00 90 FD | 	jmp	#LR__4505
2cb58     80 00 90 FD | 	jmp	#LR__4506
2cb5c     7C 00 90 FD | 	jmp	#LR__4507
2cb60     48 00 90 FD | 	jmp	#LR__4492
2cb64     44 00 90 FD | 	jmp	#LR__4493
2cb68     40 00 90 FD | 	jmp	#LR__4494
2cb6c     44 00 90 FD | 	jmp	#LR__4495
2cb70     48 00 90 FD | 	jmp	#LR__4497
2cb74     54 00 90 FD | 	jmp	#LR__4500
2cb78     38 00 90 FD | 	jmp	#LR__4496
2cb7c     4C 00 90 FD | 	jmp	#LR__4501
2cb80     48 00 90 FD | 	jmp	#LR__4502
2cb84     44 00 90 FD | 	jmp	#LR__4503
2cb88     50 00 90 FD | 	jmp	#LR__4508
2cb8c     4C 00 90 FD | 	jmp	#LR__4508
2cb90     48 00 90 FD | 	jmp	#LR__4508
2cb94     2C 00 90 FD | 	jmp	#LR__4498
2cb98     38 00 90 FD | 	jmp	#LR__4504
2cb9c     2C 00 90 FD | 	jmp	#LR__4499
2cba0     38 00 90 FD | 	jmp	#LR__4508
2cba4                 | LR__4491
2cba4     00 02 06 F6 | 	mov	_var02, #0
2cba8                 | '         r = 0;
2cba8                 | '         break;
2cba8     34 00 90 FD | 	jmp	#LR__4509
2cbac                 | LR__4492
2cbac                 | LR__4493
2cbac                 | LR__4494
2cbac     04 02 06 F6 | 	mov	_var02, #4
2cbb0                 | '         r =  4 ;
2cbb0                 | '         break;
2cbb0     2C 00 90 FD | 	jmp	#LR__4509
2cbb4                 | LR__4495
2cbb4                 | LR__4496
2cbb4     06 02 06 F6 | 	mov	_var02, #6
2cbb8                 | '         r =  6 ;
2cbb8                 | '         break;
2cbb8     24 00 90 FD | 	jmp	#LR__4509
2cbbc                 | LR__4497
2cbbc     09 02 06 F6 | 	mov	_var02, #9
2cbc0                 | '         r =  9 ;
2cbc0                 | '         break;
2cbc0     1C 00 90 FD | 	jmp	#LR__4509
2cbc4                 | LR__4498
2cbc4     07 02 06 F6 | 	mov	_var02, #7
2cbc8                 | '         r =  7 ;
2cbc8                 | '         break;
2cbc8     14 00 90 FD | 	jmp	#LR__4509
2cbcc                 | LR__4499
2cbcc                 | LR__4500
2cbcc                 | LR__4501
2cbcc                 | LR__4502
2cbcc                 | LR__4503
2cbcc     0A 02 06 F6 | 	mov	_var02, #10
2cbd0                 | '         r =  10 ;
2cbd0                 | '         break;
2cbd0     0C 00 90 FD | 	jmp	#LR__4509
2cbd4                 | LR__4504
2cbd4     0B 02 06 F6 | 	mov	_var02, #11
2cbd8                 | '         r =  11 ;
2cbd8                 | '         break;
2cbd8     04 00 90 FD | 	jmp	#LR__4509
2cbdc                 | LR__4505
2cbdc                 | LR__4506
2cbdc                 | LR__4507
2cbdc                 | LR__4508
2cbdc     0C 02 06 F6 | 	mov	_var02, #12
2cbe0                 | '         r =  12 ;
2cbe0                 | '         break;
2cbe0                 | LR__4509
2cbe0                 | '     }
2cbe0                 | '     return _seterror(r);
2cbe0     00 02 4E F2 | 	cmps	_var02, #0 wz
2cbe4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cbe8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2cbec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cbf0     01 FA 65 56 |  if_ne	neg	result1, #1
2cbf4     00 FA 05 A6 |  if_e	mov	result1, #0
2cbf8                 | _fatfs_cc__set_dos_error_0907_ret
2cbf8     2D 00 64 FD | 	ret
2cbfc                 | 
2cbfc                 | _fatfs_cc_v_creat
2cbfc     04 4A 05 F6 | 	mov	COUNT_, #4
2cc00     A8 00 A0 FD | 	call	#pushregs_
2cc04     09 1F 02 F6 | 	mov	local01, arg01
2cc08     0A 21 02 F6 | 	mov	local02, arg02
2cc0c     03 00 00 FF 
2cc10     3C 12 06 F6 | 	mov	arg01, ##1596
2cc14                 | '     return _gc_alloc(size);
2cc14     10 14 06 F6 | 	mov	arg02, #16
2cc18     2C 60 BF FD | 	call	#__system___gc_doalloc
2cc1c     FD 22 0A F6 | 	mov	local03, result1 wz
2cc20                 | '       return _seterror( 7 );
2cc20     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cc24     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2cc28     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cc2c     01 FA 65 A6 |  if_e	neg	result1, #1
2cc30     58 00 90 AD |  if_e	jmp	#LR__4511
2cc34     11 13 02 F6 | 	mov	arg01, local03
2cc38     00 14 06 F6 | 	mov	arg02, #0
2cc3c     03 00 00 FF 
2cc40     3C 16 06 F6 | 	mov	arg03, ##1596
2cc44     98 00 A0 FD | 	call	#\builtin_bytefill_
2cc48     02 00 00 FF 
2cc4c     14 22 06 F1 | 	add	local03, ##1044
2cc50     11 13 02 F6 | 	mov	arg01, local03
2cc54     02 00 00 FF 
2cc58     14 22 86 F1 | 	sub	local03, ##1044
2cc5c     10 15 02 F6 | 	mov	arg02, local02
2cc60     07 16 06 F6 | 	mov	arg03, #7
2cc64     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2cc68     FD 24 0A F6 | 	mov	local04, result1 wz
2cc6c     14 00 90 AD |  if_e	jmp	#LR__4510
2cc70     11 13 02 F6 | 	mov	arg01, local03
2cc74                 | '     return _gc_free(ptr);
2cc74     DC 60 BF FD | 	call	#__system___gc_free
2cc78                 | '     free(f);
2cc78                 | '     return _set_dos_error(r);
2cc78     12 13 02 F6 | 	mov	arg01, local04
2cc7c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2cc80     08 00 90 FD | 	jmp	#LR__4511
2cc84                 | LR__4510
2cc84     0F 23 62 FC | 	wrlong	local03, local01
2cc88                 | '   }
2cc88                 | '   fil->vfsdata = f;
2cc88                 | '   return 0;
2cc88     00 FA 05 F6 | 	mov	result1, #0
2cc8c                 | LR__4511
2cc8c     A7 F0 03 F6 | 	mov	ptra, fp
2cc90     B2 00 A0 FD | 	call	#popregs_
2cc94                 | _fatfs_cc_v_creat_ret
2cc94     2D 00 64 FD | 	ret
2cc98                 | 
2cc98                 | _fatfs_cc_v_close
2cc98     02 4A 05 F6 | 	mov	COUNT_, #2
2cc9c     A8 00 A0 FD | 	call	#pushregs_
2cca0     09 1F 02 FB | 	rdlong	local01, arg01
2cca4     02 00 00 FF 
2cca8     14 1E 06 F1 | 	add	local01, ##1044
2ccac     0F 13 02 F6 | 	mov	arg01, local01
2ccb0     02 00 00 FF 
2ccb4     14 1E 86 F1 | 	sub	local01, ##1044
2ccb8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ccbc     FD 20 02 F6 | 	mov	local02, result1
2ccc0     0F 13 02 F6 | 	mov	arg01, local01
2ccc4                 | '     return _gc_free(ptr);
2ccc4     8C 60 BF FD | 	call	#__system___gc_free
2ccc8                 | '     FAT_FIL *f = fil->vfsdata;
2ccc8                 | '     r=f_close(&f->fil);
2ccc8                 | '     free(f);
2ccc8                 | '     return _set_dos_error(r);
2ccc8     10 13 02 F6 | 	mov	arg01, local02
2cccc     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2ccd0     A7 F0 03 F6 | 	mov	ptra, fp
2ccd4     B2 00 A0 FD | 	call	#popregs_
2ccd8                 | _fatfs_cc_v_close_ret
2ccd8     2D 00 64 FD | 	ret
2ccdc                 | 
2ccdc                 | _fatfs_cc_v_opendir
2ccdc     04 4A 05 F6 | 	mov	COUNT_, #4
2cce0     A8 00 A0 FD | 	call	#pushregs_
2cce4     09 1F 02 F6 | 	mov	local01, arg01
2cce8     0A 21 02 F6 | 	mov	local02, arg02
2ccec     30 12 06 F6 | 	mov	arg01, #48
2ccf0                 | '     return _gc_alloc(size);
2ccf0     10 14 06 F6 | 	mov	arg02, #16
2ccf4     50 5F BF FD | 	call	#__system___gc_doalloc
2ccf8     FD 22 0A F6 | 	mov	local03, result1 wz
2ccfc                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ccfc                 | '       return _seterror( 7 );
2ccfc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cd00     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2cd04     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cd08     01 FA 65 A6 |  if_e	neg	result1, #1
2cd0c     34 00 90 AD |  if_e	jmp	#LR__4521
2cd10     10 15 02 F6 | 	mov	arg02, local02
2cd14     11 13 02 F6 | 	mov	arg01, local03
2cd18     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2cd1c     FD 24 0A F6 | 	mov	local04, result1 wz
2cd20     14 00 90 AD |  if_e	jmp	#LR__4520
2cd24     11 13 02 F6 | 	mov	arg01, local03
2cd28                 | '     return _gc_free(ptr);
2cd28     28 60 BF FD | 	call	#__system___gc_free
2cd2c                 | '         free(f);
2cd2c                 | '         return _set_dos_error(r);
2cd2c     12 13 02 F6 | 	mov	arg01, local04
2cd30     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2cd34     0C 00 90 FD | 	jmp	#LR__4521
2cd38                 | LR__4520
2cd38     04 1E 06 F1 | 	add	local01, #4
2cd3c     0F 23 62 FC | 	wrlong	local03, local01
2cd40                 | '     }
2cd40                 | '     dir->vfsdata = f;
2cd40                 | '     return 0;
2cd40     00 FA 05 F6 | 	mov	result1, #0
2cd44                 | LR__4521
2cd44     A7 F0 03 F6 | 	mov	ptra, fp
2cd48     B2 00 A0 FD | 	call	#popregs_
2cd4c                 | _fatfs_cc_v_opendir_ret
2cd4c     2D 00 64 FD | 	ret
2cd50                 | 
2cd50                 | _fatfs_cc_v_closedir
2cd50     02 4A 05 F6 | 	mov	COUNT_, #2
2cd54     A8 00 A0 FD | 	call	#pushregs_
2cd58     04 12 06 F1 | 	add	arg01, #4
2cd5c     09 1F 02 FB | 	rdlong	local01, arg01
2cd60     0F 13 02 F6 | 	mov	arg01, local01
2cd64     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2cd68     FD 20 02 F6 | 	mov	local02, result1
2cd6c     0F 13 02 F6 | 	mov	arg01, local01
2cd70                 | '     return _gc_free(ptr);
2cd70     E0 5F BF FD | 	call	#__system___gc_free
2cd74     00 20 0E F2 | 	cmp	local02, #0 wz
2cd78     10 13 02 56 |  if_ne	mov	arg01, local02
2cd7c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0907
2cd80                 | '     return r;
2cd80     10 FB 01 F6 | 	mov	result1, local02
2cd84     A7 F0 03 F6 | 	mov	ptra, fp
2cd88     B2 00 A0 FD | 	call	#popregs_
2cd8c                 | _fatfs_cc_v_closedir_ret
2cd8c     2D 00 64 FD | 	ret
2cd90                 | 
2cd90                 | _fatfs_cc_v_readdir
2cd90     01 4A 05 F6 | 	mov	COUNT_, #1
2cd94     A8 00 A0 FD | 	call	#pushregs_
2cd98     2C F1 07 F1 | 	add	ptra, #300
2cd9c     04 4E 05 F1 | 	add	fp, #4
2cda0     A7 12 62 FC | 	wrlong	arg01, fp
2cda4     04 4E 05 F1 | 	add	fp, #4
2cda8     A7 14 62 FC | 	wrlong	arg02, fp
2cdac     04 4E 85 F1 | 	sub	fp, #4
2cdb0     A7 16 02 FB | 	rdlong	arg03, fp
2cdb4     04 16 06 F1 | 	add	arg03, #4
2cdb8     0B 13 02 FB | 	rdlong	arg01, arg03
2cdbc     08 4E 05 F1 | 	add	fp, #8
2cdc0     A7 14 02 F6 | 	mov	arg02, fp
2cdc4     0C 4E 85 F1 | 	sub	fp, #12
2cdc8     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2cdcc     28 4F 05 F1 | 	add	fp, #296
2cdd0     A7 FA 61 FC | 	wrlong	result1, fp
2cdd4     28 4F 85 F1 | 	sub	fp, #296
2cdd8     00 FA 0D F2 | 	cmp	result1, #0 wz
2cddc     14 00 90 AD |  if_e	jmp	#LR__4530
2cde0                 | '         return _set_dos_error(r);
2cde0     28 4F 05 F1 | 	add	fp, #296
2cde4     A7 12 02 FB | 	rdlong	arg01, fp
2cde8     28 4F 85 F1 | 	sub	fp, #296
2cdec     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2cdf0     C4 00 90 FD | 	jmp	#LR__4533
2cdf4                 | LR__4530
2cdf4     28 4E 05 F1 | 	add	fp, #40
2cdf8     A7 16 CA FA | 	rdbyte	arg03, fp wz
2cdfc     28 4E 85 F1 | 	sub	fp, #40
2ce00                 | '         return -1;
2ce00     01 FA 65 A6 |  if_e	neg	result1, #1
2ce04     B0 00 90 AD |  if_e	jmp	#LR__4533
2ce08     08 4E 05 F1 | 	add	fp, #8
2ce0c     A7 12 02 FB | 	rdlong	arg01, fp
2ce10     20 4E 05 F1 | 	add	fp, #32
2ce14     A7 14 02 F6 | 	mov	arg02, fp
2ce18     28 4E 85 F1 | 	sub	fp, #40
2ce1c     3F 16 06 F6 | 	mov	arg03, #63
2ce20     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2ce24     08 4E 05 F1 | 	add	fp, #8
2ce28     A7 16 02 FB | 	rdlong	arg03, fp
2ce2c     3F 16 06 F1 | 	add	arg03, #63
2ce30     0B 01 48 FC | 	wrbyte	#0, arg03
2ce34     0C 4E 05 F1 | 	add	fp, #12
2ce38     A7 16 C2 FA | 	rdbyte	arg03, fp
2ce3c     14 4E 85 F1 | 	sub	fp, #20
2ce40     10 16 CE F7 | 	test	arg03, #16 wz
2ce44     18 00 90 AD |  if_e	jmp	#LR__4531
2ce48     08 4E 05 F1 | 	add	fp, #8
2ce4c     A7 16 02 FB | 	rdlong	arg03, fp
2ce50     08 4E 85 F1 | 	sub	fp, #8
2ce54     50 16 06 F1 | 	add	arg03, #80
2ce58     0B 03 48 FC | 	wrbyte	#1, arg03
2ce5c     14 00 90 FD | 	jmp	#LR__4532
2ce60                 | LR__4531
2ce60     08 4E 05 F1 | 	add	fp, #8
2ce64     A7 16 02 FB | 	rdlong	arg03, fp
2ce68     08 4E 85 F1 | 	sub	fp, #8
2ce6c     50 16 06 F1 | 	add	arg03, #80
2ce70     0B 01 48 FC | 	wrbyte	#0, arg03
2ce74                 | LR__4532
2ce74     08 4E 05 F1 | 	add	fp, #8
2ce78     A7 16 02 FB | 	rdlong	arg03, fp
2ce7c     04 4E 05 F1 | 	add	fp, #4
2ce80     A7 14 02 FB | 	rdlong	arg02, fp
2ce84     48 16 06 F1 | 	add	arg03, #72
2ce88     0B 15 62 FC | 	wrlong	arg02, arg03
2ce8c     04 4E 85 F1 | 	sub	fp, #4
2ce90     A7 1E 02 FB | 	rdlong	local01, fp
2ce94     08 4E 05 F1 | 	add	fp, #8
2ce98     A7 12 E2 FA | 	rdword	arg01, fp
2ce9c     02 4E 05 F1 | 	add	fp, #2
2cea0     A7 14 E2 FA | 	rdword	arg02, fp
2cea4     12 4E 85 F1 | 	sub	fp, #18
2cea8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0905
2ceac     4C 1E 06 F1 | 	add	local01, #76
2ceb0     0F FB 61 FC | 	wrlong	result1, local01
2ceb4                 | '         ent->d_type =  (0) ;
2ceb4                 | '     }
2ceb4                 | '     ent->d_size = finfo.fsize;
2ceb4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2ceb4                 | '     return 0;
2ceb4     00 FA 05 F6 | 	mov	result1, #0
2ceb8                 | LR__4533
2ceb8     A7 F0 03 F6 | 	mov	ptra, fp
2cebc     B2 00 A0 FD | 	call	#popregs_
2cec0                 | _fatfs_cc_v_readdir_ret
2cec0     2D 00 64 FD | 	ret
2cec4                 | 
2cec4                 | _fatfs_cc_v_stat
2cec4     03 4A 05 F6 | 	mov	COUNT_, #3
2cec8     A8 00 A0 FD | 	call	#pushregs_
2cecc     30 F1 07 F1 | 	add	ptra, #304
2ced0     04 4E 05 F1 | 	add	fp, #4
2ced4     A7 12 62 FC | 	wrlong	arg01, fp
2ced8     04 4E 05 F1 | 	add	fp, #4
2cedc     A7 14 62 FC | 	wrlong	arg02, fp
2cee0     08 4E 85 F1 | 	sub	fp, #8
2cee4     0A 13 02 F6 | 	mov	arg01, arg02
2cee8     00 14 06 F6 | 	mov	arg02, #0
2ceec     30 16 06 F6 | 	mov	arg03, #48
2cef0     98 00 A0 FD | 	call	#\builtin_bytefill_
2cef4     04 4E 05 F1 | 	add	fp, #4
2cef8     A7 FA 01 FB | 	rdlong	result1, fp
2cefc     04 4E 85 F1 | 	sub	fp, #4
2cf00     FD FA C9 FA | 	rdbyte	result1, result1 wz
2cf04     2C 00 90 AD |  if_e	jmp	#LR__4540
2cf08     04 4E 05 F1 | 	add	fp, #4
2cf0c     A7 FA 01 FB | 	rdlong	result1, fp
2cf10     04 4E 85 F1 | 	sub	fp, #4
2cf14     FD FA C1 FA | 	rdbyte	result1, result1
2cf18     2E FA 0D F2 | 	cmp	result1, #46 wz
2cf1c     04 4E 05 A1 |  if_e	add	fp, #4
2cf20     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cf24     04 4E 85 A1 |  if_e	sub	fp, #4
2cf28     01 1E 06 A1 |  if_e	add	local01, #1
2cf2c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2cf30     18 00 90 5D |  if_ne	jmp	#LR__4541
2cf34                 | LR__4540
2cf34     18 4E 05 F1 | 	add	fp, #24
2cf38     A7 20 48 FC | 	wrbyte	#16, fp
2cf3c     0C 4E 85 F1 | 	sub	fp, #12
2cf40     A7 00 68 FC | 	wrlong	#0, fp
2cf44     0C 4E 85 F1 | 	sub	fp, #12
2cf48     24 00 90 FD | 	jmp	#LR__4542
2cf4c                 | LR__4541
2cf4c     04 4E 05 F1 | 	add	fp, #4
2cf50     A7 12 02 FB | 	rdlong	arg01, fp
2cf54     0C 4E 05 F1 | 	add	fp, #12
2cf58     A7 14 02 F6 | 	mov	arg02, fp
2cf5c     10 4E 85 F1 | 	sub	fp, #16
2cf60     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2cf64     0C 4E 05 F1 | 	add	fp, #12
2cf68     A7 FA 61 FC | 	wrlong	result1, fp
2cf6c     0C 4E 85 F1 | 	sub	fp, #12
2cf70                 | LR__4542
2cf70     0C 4E 05 F1 | 	add	fp, #12
2cf74     A7 20 0A FB | 	rdlong	local02, fp wz
2cf78     0C 4E 85 F1 | 	sub	fp, #12
2cf7c     14 00 90 AD |  if_e	jmp	#LR__4543
2cf80                 | '         return _set_dos_error(r);
2cf80     0C 4E 05 F1 | 	add	fp, #12
2cf84     A7 12 02 FB | 	rdlong	arg01, fp
2cf88     0C 4E 85 F1 | 	sub	fp, #12
2cf8c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2cf90     14 01 90 FD | 	jmp	#LR__4544
2cf94                 | LR__4543
2cf94     2C 4F 05 F1 | 	add	fp, #300
2cf98     A7 48 6A FC | 	wrlong	#292, fp
2cf9c     14 4F 85 F1 | 	sub	fp, #276
2cfa0     A7 22 C2 FA | 	rdbyte	local03, fp
2cfa4     18 4E 85 F1 | 	sub	fp, #24
2cfa8     01 22 CE F7 | 	test	local03, #1 wz
2cfac     2C 4F 05 A1 |  if_e	add	fp, #300
2cfb0     A7 22 02 AB |  if_e	rdlong	local03, fp
2cfb4     92 22 46 A5 |  if_e	or	local03, #146
2cfb8     A7 22 62 AC |  if_e	wrlong	local03, fp
2cfbc     2C 4F 85 A1 |  if_e	sub	fp, #300
2cfc0     18 4E 05 F1 | 	add	fp, #24
2cfc4     A7 22 C2 FA | 	rdbyte	local03, fp
2cfc8     18 4E 85 F1 | 	sub	fp, #24
2cfcc     10 22 CE F7 | 	test	local03, #16 wz
2cfd0     2C 4F 05 51 |  if_ne	add	fp, #300
2cfd4     A7 22 02 5B |  if_ne	rdlong	local03, fp
2cfd8     08 00 00 5F 
2cfdc     49 22 46 55 |  if_ne	or	local03, ##4169
2cfe0     A7 22 62 5C |  if_ne	wrlong	local03, fp
2cfe4     2C 4F 85 51 |  if_ne	sub	fp, #300
2cfe8     08 4E 05 F1 | 	add	fp, #8
2cfec     A7 22 02 FB | 	rdlong	local03, fp
2cff0     24 4F 05 F1 | 	add	fp, #292
2cff4     A7 20 02 FB | 	rdlong	local02, fp
2cff8     08 22 06 F1 | 	add	local03, #8
2cffc     11 21 62 FC | 	wrlong	local02, local03
2d000     24 4F 85 F1 | 	sub	fp, #292
2d004     A7 22 02 FB | 	rdlong	local03, fp
2d008     0C 22 06 F1 | 	add	local03, #12
2d00c     11 03 68 FC | 	wrlong	#1, local03
2d010     A7 22 02 FB | 	rdlong	local03, fp
2d014     08 4E 05 F1 | 	add	fp, #8
2d018     A7 20 02 FB | 	rdlong	local02, fp
2d01c     18 22 06 F1 | 	add	local03, #24
2d020     11 21 62 FC | 	wrlong	local02, local03
2d024     08 4E 85 F1 | 	sub	fp, #8
2d028     A7 22 02 FB | 	rdlong	local03, fp
2d02c     1C 22 06 F1 | 	add	local03, #28
2d030     01 00 80 FF 
2d034     11 01 68 FC | 	wrlong	##512, local03
2d038     A7 20 02 FB | 	rdlong	local02, fp
2d03c     10 23 02 F6 | 	mov	local03, local02
2d040     18 20 06 F1 | 	add	local02, #24
2d044     10 21 02 FB | 	rdlong	local02, local02
2d048     FF 21 06 F1 | 	add	local02, #511
2d04c     10 21 52 F6 | 	abs	local02, local02 wc
2d050     09 20 46 F0 | 	shr	local02, #9
2d054     10 21 82 F6 | 	negc	local02, local02
2d058     20 22 06 F1 | 	add	local03, #32
2d05c     11 21 62 FC | 	wrlong	local02, local03
2d060     A7 20 02 FB | 	rdlong	local02, fp
2d064     10 23 02 F6 | 	mov	local03, local02
2d068     10 1F 02 F6 | 	mov	local01, local02
2d06c     0C 4E 05 F1 | 	add	fp, #12
2d070     A7 12 E2 FA | 	rdword	arg01, fp
2d074     02 4E 05 F1 | 	add	fp, #2
2d078     A7 14 E2 FA | 	rdword	arg02, fp
2d07c     16 4E 85 F1 | 	sub	fp, #22
2d080     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0905
2d084     2C 1E 06 F1 | 	add	local01, #44
2d088     0F FB 61 FC | 	wrlong	result1, local01
2d08c     28 20 06 F1 | 	add	local02, #40
2d090     10 FB 61 FC | 	wrlong	result1, local02
2d094     24 22 06 F1 | 	add	local03, #36
2d098     11 FB 61 FC | 	wrlong	result1, local03
2d09c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2d09c                 | '     }
2d09c                 | '     buf->st_mode = mode;
2d09c                 | '     buf->st_nlink = 1;
2d09c                 | '     buf->st_size = finfo.fsize;
2d09c                 | '     buf->st_blksize = 512;
2d09c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2d09c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2d09c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d09c                 | '     return r;
2d09c     0C 4E 05 F1 | 	add	fp, #12
2d0a0     A7 FA 01 FB | 	rdlong	result1, fp
2d0a4     0C 4E 85 F1 | 	sub	fp, #12
2d0a8                 | LR__4544
2d0a8     A7 F0 03 F6 | 	mov	ptra, fp
2d0ac     B2 00 A0 FD | 	call	#popregs_
2d0b0                 | _fatfs_cc_v_stat_ret
2d0b0     2D 00 64 FD | 	ret
2d0b4                 | 
2d0b4                 | _fatfs_cc_v_read
2d0b4     00 4A 05 F6 | 	mov	COUNT_, #0
2d0b8     A8 00 A0 FD | 	call	#pushregs_
2d0bc     1C F0 07 F1 | 	add	ptra, #28
2d0c0     04 4E 05 F1 | 	add	fp, #4
2d0c4     A7 12 62 FC | 	wrlong	arg01, fp
2d0c8     04 4E 05 F1 | 	add	fp, #4
2d0cc     A7 14 62 FC | 	wrlong	arg02, fp
2d0d0     04 4E 05 F1 | 	add	fp, #4
2d0d4     A7 16 62 FC | 	wrlong	arg03, fp
2d0d8     08 4E 85 F1 | 	sub	fp, #8
2d0dc     A7 12 02 FB | 	rdlong	arg01, fp
2d0e0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2d0e4     0C 4E 05 F1 | 	add	fp, #12
2d0e8     A7 12 62 FC | 	wrlong	arg01, fp
2d0ec     10 4E 85 F1 | 	sub	fp, #16
2d0f0                 | '         return _seterror( 5 );
2d0f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d0f4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d0f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d0fc     01 FA 65 A6 |  if_e	neg	result1, #1
2d100     B8 00 90 AD |  if_e	jmp	#LR__4552
2d104     10 4E 05 F1 | 	add	fp, #16
2d108     A7 12 02 FB | 	rdlong	arg01, fp
2d10c     02 00 00 FF 
2d110     14 12 06 F1 | 	add	arg01, ##1044
2d114     08 4E 85 F1 | 	sub	fp, #8
2d118     A7 14 02 FB | 	rdlong	arg02, fp
2d11c     04 4E 05 F1 | 	add	fp, #4
2d120     A7 16 02 FB | 	rdlong	arg03, fp
2d124     0C 4E 05 F1 | 	add	fp, #12
2d128     A7 18 02 F6 | 	mov	arg04, fp
2d12c     18 4E 85 F1 | 	sub	fp, #24
2d130     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2d134     14 4E 05 F1 | 	add	fp, #20
2d138     A7 FA 61 FC | 	wrlong	result1, fp
2d13c     14 4E 85 F1 | 	sub	fp, #20
2d140     00 FA 0D F2 | 	cmp	result1, #0 wz
2d144     34 00 90 AD |  if_e	jmp	#LR__4550
2d148     04 4E 05 F1 | 	add	fp, #4
2d14c     A7 18 02 FB | 	rdlong	arg04, fp
2d150     0C 17 02 F6 | 	mov	arg03, arg04
2d154     08 18 06 F1 | 	add	arg04, #8
2d158     0C 19 02 FB | 	rdlong	arg04, arg04
2d15c     20 18 46 F5 | 	or	arg04, #32
2d160     08 16 06 F1 | 	add	arg03, #8
2d164     0B 19 62 FC | 	wrlong	arg04, arg03
2d168                 | '         fil->state |=  (0x20) ;
2d168                 | '         return _set_dos_error(r);
2d168     10 4E 05 F1 | 	add	fp, #16
2d16c     A7 12 02 FB | 	rdlong	arg01, fp
2d170     14 4E 85 F1 | 	sub	fp, #20
2d174     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d178     40 00 90 FD | 	jmp	#LR__4552
2d17c                 | LR__4550
2d17c     18 4E 05 F1 | 	add	fp, #24
2d180     A7 FA 09 FB | 	rdlong	result1, fp wz
2d184     18 4E 85 F1 | 	sub	fp, #24
2d188     24 00 90 5D |  if_ne	jmp	#LR__4551
2d18c     04 4E 05 F1 | 	add	fp, #4
2d190     A7 FA 01 FB | 	rdlong	result1, fp
2d194     FD 18 02 F6 | 	mov	arg04, result1
2d198     04 4E 85 F1 | 	sub	fp, #4
2d19c     08 FA 05 F1 | 	add	result1, #8
2d1a0     FD FA 01 FB | 	rdlong	result1, result1
2d1a4     10 FA 45 F5 | 	or	result1, #16
2d1a8     08 18 06 F1 | 	add	arg04, #8
2d1ac     0C FB 61 FC | 	wrlong	result1, arg04
2d1b0                 | LR__4551
2d1b0                 | '         fil->state |=  (0x10) ;
2d1b0                 | '     }
2d1b0                 | '     return x;
2d1b0     18 4E 05 F1 | 	add	fp, #24
2d1b4     A7 FA 01 FB | 	rdlong	result1, fp
2d1b8     18 4E 85 F1 | 	sub	fp, #24
2d1bc                 | LR__4552
2d1bc     A7 F0 03 F6 | 	mov	ptra, fp
2d1c0     B2 00 A0 FD | 	call	#popregs_
2d1c4                 | _fatfs_cc_v_read_ret
2d1c4     2D 00 64 FD | 	ret
2d1c8                 | 
2d1c8                 | _fatfs_cc_v_write
2d1c8     00 4A 05 F6 | 	mov	COUNT_, #0
2d1cc     A8 00 A0 FD | 	call	#pushregs_
2d1d0     1C F0 07 F1 | 	add	ptra, #28
2d1d4     04 4E 05 F1 | 	add	fp, #4
2d1d8     A7 12 62 FC | 	wrlong	arg01, fp
2d1dc     04 4E 05 F1 | 	add	fp, #4
2d1e0     A7 14 62 FC | 	wrlong	arg02, fp
2d1e4     04 4E 05 F1 | 	add	fp, #4
2d1e8     A7 16 62 FC | 	wrlong	arg03, fp
2d1ec     08 4E 85 F1 | 	sub	fp, #8
2d1f0     A7 12 02 FB | 	rdlong	arg01, fp
2d1f4     09 13 0A FB | 	rdlong	arg01, arg01 wz
2d1f8     0C 4E 05 F1 | 	add	fp, #12
2d1fc     A7 12 62 FC | 	wrlong	arg01, fp
2d200     10 4E 85 F1 | 	sub	fp, #16
2d204                 | '         return _seterror( 5 );
2d204     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d208     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d20c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d210     01 FA 65 A6 |  if_e	neg	result1, #1
2d214     84 00 90 AD |  if_e	jmp	#LR__4561
2d218     10 4E 05 F1 | 	add	fp, #16
2d21c     A7 12 02 FB | 	rdlong	arg01, fp
2d220     02 00 00 FF 
2d224     14 12 06 F1 | 	add	arg01, ##1044
2d228     08 4E 85 F1 | 	sub	fp, #8
2d22c     A7 14 02 FB | 	rdlong	arg02, fp
2d230     04 4E 05 F1 | 	add	fp, #4
2d234     A7 16 02 FB | 	rdlong	arg03, fp
2d238     0C 4E 05 F1 | 	add	fp, #12
2d23c     A7 18 02 F6 | 	mov	arg04, fp
2d240     18 4E 85 F1 | 	sub	fp, #24
2d244     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2d248     14 4E 05 F1 | 	add	fp, #20
2d24c     A7 FA 61 FC | 	wrlong	result1, fp
2d250     14 4E 85 F1 | 	sub	fp, #20
2d254     00 FA 0D F2 | 	cmp	result1, #0 wz
2d258     34 00 90 AD |  if_e	jmp	#LR__4560
2d25c     04 4E 05 F1 | 	add	fp, #4
2d260     A7 18 02 FB | 	rdlong	arg04, fp
2d264     0C 17 02 F6 | 	mov	arg03, arg04
2d268     08 18 06 F1 | 	add	arg04, #8
2d26c     0C 19 02 FB | 	rdlong	arg04, arg04
2d270     20 18 46 F5 | 	or	arg04, #32
2d274     08 16 06 F1 | 	add	arg03, #8
2d278     0B 19 62 FC | 	wrlong	arg04, arg03
2d27c                 | '         fil->state |=  (0x20) ;
2d27c                 | '         return _set_dos_error(r);
2d27c     10 4E 05 F1 | 	add	fp, #16
2d280     A7 12 02 FB | 	rdlong	arg01, fp
2d284     14 4E 85 F1 | 	sub	fp, #20
2d288     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d28c     0C 00 90 FD | 	jmp	#LR__4561
2d290                 | LR__4560
2d290                 | '     }
2d290                 | '     return x;
2d290     18 4E 05 F1 | 	add	fp, #24
2d294     A7 FA 01 FB | 	rdlong	result1, fp
2d298     18 4E 85 F1 | 	sub	fp, #24
2d29c                 | LR__4561
2d29c     A7 F0 03 F6 | 	mov	ptra, fp
2d2a0     B2 00 A0 FD | 	call	#popregs_
2d2a4                 | _fatfs_cc_v_write_ret
2d2a4     2D 00 64 FD | 	ret
2d2a8                 | 
2d2a8                 | _fatfs_cc_v_lseek
2d2a8     04 4A 05 F6 | 	mov	COUNT_, #4
2d2ac     A8 00 A0 FD | 	call	#pushregs_
2d2b0     0A 1F 02 F6 | 	mov	local01, arg02
2d2b4     0B 21 02 F6 | 	mov	local02, arg03
2d2b8     09 23 02 FB | 	rdlong	local03, arg01
2d2bc     02 00 00 FF 
2d2c0     14 22 0E F1 | 	add	local03, ##1044 wz
2d2c4                 | '         return _seterror( 5 );
2d2c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d2c8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d2cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d2d0     01 FA 65 A6 |  if_e	neg	result1, #1
2d2d4     4C 00 90 AD |  if_e	jmp	#LR__4572
2d2d8     00 20 0E F2 | 	cmp	local02, #0 wz
2d2dc     24 00 90 AD |  if_e	jmp	#LR__4570
2d2e0     01 20 0E F2 | 	cmp	local02, #1 wz
2d2e4     14 22 06 A1 |  if_e	add	local03, #20
2d2e8     11 25 02 AB |  if_e	rdlong	local04, local03
2d2ec     14 22 86 A1 |  if_e	sub	local03, #20
2d2f0     12 1F 02 A1 |  if_e	add	local01, local04
2d2f4     0C 22 06 51 |  if_ne	add	local03, #12
2d2f8     11 25 02 5B |  if_ne	rdlong	local04, local03
2d2fc     0C 22 86 51 |  if_ne	sub	local03, #12
2d300     12 1F 02 51 |  if_ne	add	local01, local04
2d304                 | LR__4570
2d304     0F 15 02 F6 | 	mov	arg02, local01
2d308     11 13 02 F6 | 	mov	arg01, local03
2d30c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2d310     FD 12 0A F6 | 	mov	arg01, result1 wz
2d314     08 00 90 AD |  if_e	jmp	#LR__4571
2d318                 | '         return _set_dos_error(result);
2d318     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d31c     04 00 90 FD | 	jmp	#LR__4572
2d320                 | LR__4571
2d320                 | '     }
2d320                 | '     return offset;
2d320     0F FB 01 F6 | 	mov	result1, local01
2d324                 | LR__4572
2d324     A7 F0 03 F6 | 	mov	ptra, fp
2d328     B2 00 A0 FD | 	call	#popregs_
2d32c                 | _fatfs_cc_v_lseek_ret
2d32c     2D 00 64 FD | 	ret
2d330                 | 
2d330                 | _fatfs_cc_v_ioctl
2d330                 | ' {
2d330                 | '     return _seterror( 10 );
2d330     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d334     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d338     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d33c     01 FA 65 F6 | 	neg	result1, #1
2d340                 | _fatfs_cc_v_ioctl_ret
2d340     2D 00 64 FD | 	ret
2d344                 | 
2d344                 | _fatfs_cc_v_mkdir
2d344     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2d348     FD 12 02 F6 | 	mov	arg01, result1
2d34c                 | ' 
2d34c                 | '     r = f_mkdir(name);
2d34c                 | '     return _set_dos_error(r);
2d34c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d350                 | _fatfs_cc_v_mkdir_ret
2d350     2D 00 64 FD | 	ret
2d354                 | 
2d354                 | _fatfs_cc_v_remove
2d354     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d358     FD 12 02 F6 | 	mov	arg01, result1
2d35c                 | ' 
2d35c                 | '     r = f_unlink(name);
2d35c                 | '     return _set_dos_error(r);
2d35c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d360                 | _fatfs_cc_v_remove_ret
2d360     2D 00 64 FD | 	ret
2d364                 | 
2d364                 | _fatfs_cc_v_rmdir
2d364     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d368     FD 12 02 F6 | 	mov	arg01, result1
2d36c                 | ' 
2d36c                 | '     r = f_unlink(name);
2d36c                 | '     return _set_dos_error(r);
2d36c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d370                 | _fatfs_cc_v_rmdir_ret
2d370     2D 00 64 FD | 	ret
2d374                 | 
2d374                 | _fatfs_cc_v_rename
2d374     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2d378     FD 12 02 F6 | 	mov	arg01, result1
2d37c                 | '     return _set_dos_error(r);
2d37c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d380                 | _fatfs_cc_v_rename_ret
2d380     2D 00 64 FD | 	ret
2d384                 | 
2d384                 | _fatfs_cc_v_open
2d384     07 4A 05 F6 | 	mov	COUNT_, #7
2d388     A8 00 A0 FD | 	call	#pushregs_
2d38c     09 1F 02 F6 | 	mov	local01, arg01
2d390     0A 21 02 F6 | 	mov	local02, arg02
2d394     0B 23 02 F6 | 	mov	local03, arg03
2d398     03 00 00 FF 
2d39c     3C 12 06 F6 | 	mov	arg01, ##1596
2d3a0                 | '     return _gc_alloc(size);
2d3a0     10 14 06 F6 | 	mov	arg02, #16
2d3a4     A0 58 BF FD | 	call	#__system___gc_doalloc
2d3a8     FD 24 0A F6 | 	mov	local04, result1 wz
2d3ac                 | '       return _seterror( 7 );
2d3ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d3b0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2d3b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d3b8     01 FA 65 A6 |  if_e	neg	result1, #1
2d3bc     98 00 90 AD |  if_e	jmp	#LR__4586
2d3c0     12 13 02 F6 | 	mov	arg01, local04
2d3c4     00 14 06 F6 | 	mov	arg02, #0
2d3c8     03 00 00 FF 
2d3cc     3C 16 06 F6 | 	mov	arg03, ##1596
2d3d0     98 00 A0 FD | 	call	#\builtin_bytefill_
2d3d4                 | '   switch (flags & 3) {
2d3d4     11 27 02 F6 | 	mov	local05, local03
2d3d8     03 26 0E F5 | 	and	local05, #3 wz
2d3dc     0C 00 90 AD |  if_e	jmp	#LR__4580
2d3e0     01 26 0E F2 | 	cmp	local05, #1 wz
2d3e4     0C 00 90 AD |  if_e	jmp	#LR__4581
2d3e8     10 00 90 FD | 	jmp	#LR__4582
2d3ec                 | LR__4580
2d3ec     01 28 06 F6 | 	mov	local06, #1
2d3f0                 | '       fs_flags =  0x01 ;
2d3f0                 | '       break;
2d3f0     0C 00 90 FD | 	jmp	#LR__4583
2d3f4                 | LR__4581
2d3f4     02 28 06 F6 | 	mov	local06, #2
2d3f8                 | '       fs_flags =  0x02 ;
2d3f8                 | '       break;
2d3f8     04 00 90 FD | 	jmp	#LR__4583
2d3fc                 | LR__4582
2d3fc     03 28 06 F6 | 	mov	local06, #3
2d400                 | '       fs_flags =  0x01  |  0x02 ;
2d400                 | '       break;
2d400                 | LR__4583
2d400     08 22 CE F7 | 	test	local03, #8 wz
2d404     18 28 46 55 |  if_ne	or	local06, #24
2d408     08 00 90 5D |  if_ne	jmp	#LR__4584
2d40c     20 22 CE F7 | 	test	local03, #32 wz
2d410     30 28 46 55 |  if_ne	or	local06, #48
2d414                 | LR__4584
2d414     02 00 00 FF 
2d418     14 24 06 F1 | 	add	local04, ##1044
2d41c     12 13 02 F6 | 	mov	arg01, local04
2d420     02 00 00 FF 
2d424     14 24 86 F1 | 	sub	local04, ##1044
2d428     10 15 02 F6 | 	mov	arg02, local02
2d42c     14 17 02 F6 | 	mov	arg03, local06
2d430     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2d434     FD 2A 0A F6 | 	mov	local07, result1 wz
2d438     14 00 90 AD |  if_e	jmp	#LR__4585
2d43c     12 13 02 F6 | 	mov	arg01, local04
2d440                 | '     return _gc_free(ptr);
2d440     10 59 BF FD | 	call	#__system___gc_free
2d444                 | '     free(f);
2d444                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d444                 | '     return _set_dos_error(r);
2d444     15 13 02 F6 | 	mov	arg01, local07
2d448     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d44c     08 00 90 FD | 	jmp	#LR__4586
2d450                 | LR__4585
2d450     0F 25 62 FC | 	wrlong	local04, local01
2d454                 | '   }
2d454                 | '   fil->vfsdata = f;
2d454                 | '   return 0;
2d454     00 FA 05 F6 | 	mov	result1, #0
2d458                 | LR__4586
2d458     A7 F0 03 F6 | 	mov	ptra, fp
2d45c     B2 00 A0 FD | 	call	#popregs_
2d460                 | _fatfs_cc_v_open_ret
2d460     2D 00 64 FD | 	ret
2d464                 | 
2d464                 | _fatfs_cc_v_flush
2d464     09 13 02 FB | 	rdlong	arg01, arg01
2d468     02 00 00 FF 
2d46c     14 12 0E F1 | 	add	arg01, ##1044 wz
2d470                 | '         return _seterror( 5 );
2d470     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d474     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d478     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d47c     01 FA 65 A6 |  if_e	neg	result1, #1
2d480     0C 00 90 AD |  if_e	jmp	#LR__4590
2d484     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2d488     FD 12 02 F6 | 	mov	arg01, result1
2d48c                 | '     }
2d48c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d48c                 | '     result = f_sync(f);
2d48c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d48c                 | '     return _set_dos_error(result);
2d48c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0907
2d490                 | LR__4590
2d490                 | _fatfs_cc_v_flush_ret
2d490     2D 00 64 FD | 	ret
2d494                 | 
2d494                 | _fatfs_cc_v_init
2d494                 | ' {
2d494                 | '     return 0;
2d494     00 FA 05 F6 | 	mov	result1, #0
2d498                 | _fatfs_cc_v_init_ret
2d498     2D 00 64 FD | 	ret
2d49c                 | 
2d49c                 | _fatfs_cc_v_deinit
2d49c     72 01 00 FF 
2d4a0     10 14 06 F6 | 	mov	arg02, ##@LR__4786
2d4a4     00 12 06 F6 | 	mov	arg01, #0
2d4a8     00 16 06 F6 | 	mov	arg03, #0
2d4ac     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2d4b0     01 00 00 FF 
2d4b4     08 E4 05 F1 | 	add	objptr, ##520
2d4b8     F2 12 02 FB | 	rdlong	arg01, objptr
2d4bc     04 E4 05 F1 | 	add	objptr, #4
2d4c0     F2 14 02 FB | 	rdlong	arg02, objptr
2d4c4     01 00 00 FF 
2d4c8     0C E4 85 F1 | 	sub	objptr, ##524
2d4cc     18 40 BF FD | 	call	#__system___freepins
2d4d0                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d4d0                 | '     _freepins(f_pinmask);
2d4d0                 | '     return 0;
2d4d0     00 FA 05 F6 | 	mov	result1, #0
2d4d4                 | _fatfs_cc_v_deinit_ret
2d4d4     2D 00 64 FD | 	ret
2d4d8                 | 
2d4d8                 | _fatfs_cc_get_vfs
2d4d8     01 4A 05 F6 | 	mov	COUNT_, #1
2d4dc     A8 00 A0 FD | 	call	#pushregs_
2d4e0     09 1F 02 F6 | 	mov	local01, arg01
2d4e4     50 12 06 F6 | 	mov	arg01, #80
2d4e8     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2d4ec     FD 12 02 F6 | 	mov	arg01, result1
2d4f0     F2 FA 01 F6 | 	mov	result1, objptr
2d4f4     00 90 04 FF 
2d4f8     00 FA 45 F5 | 	or	result1, ##153092096
2d4fc     09 FB 61 FC | 	wrlong	result1, arg01
2d500     F2 FA 01 F6 | 	mov	result1, objptr
2d504     00 98 04 FF 
2d508     00 FA 45 F5 | 	or	result1, ##154140672
2d50c     04 12 06 F1 | 	add	arg01, #4
2d510     09 FB 61 FC | 	wrlong	result1, arg01
2d514     F2 FA 01 F6 | 	mov	result1, objptr
2d518     00 A0 04 FF 
2d51c     00 FA 45 F5 | 	or	result1, ##155189248
2d520     04 12 06 F1 | 	add	arg01, #4
2d524     09 FB 61 FC | 	wrlong	result1, arg01
2d528     F2 FA 01 F6 | 	mov	result1, objptr
2d52c     00 A8 04 FF 
2d530     00 FA 45 F5 | 	or	result1, ##156237824
2d534     04 12 06 F1 | 	add	arg01, #4
2d538     09 FB 61 FC | 	wrlong	result1, arg01
2d53c     F2 FA 01 F6 | 	mov	result1, objptr
2d540     00 B0 04 FF 
2d544     00 FA 45 F5 | 	or	result1, ##157286400
2d548     04 12 06 F1 | 	add	arg01, #4
2d54c     09 FB 61 FC | 	wrlong	result1, arg01
2d550     04 12 06 F1 | 	add	arg01, #4
2d554     09 01 68 FC | 	wrlong	#0, arg01
2d558     04 12 06 F1 | 	add	arg01, #4
2d55c     09 1F 62 FC | 	wrlong	local01, arg01
2d560     04 12 06 F1 | 	add	arg01, #4
2d564     09 01 68 FC | 	wrlong	#0, arg01
2d568     F2 FA 01 F6 | 	mov	result1, objptr
2d56c     00 B8 04 FF 
2d570     00 FA 45 F5 | 	or	result1, ##158334976
2d574     04 12 06 F1 | 	add	arg01, #4
2d578     09 FB 61 FC | 	wrlong	result1, arg01
2d57c     F2 FA 01 F6 | 	mov	result1, objptr
2d580     00 C0 04 FF 
2d584     00 FA 45 F5 | 	or	result1, ##159383552
2d588     04 12 06 F1 | 	add	arg01, #4
2d58c     09 FB 61 FC | 	wrlong	result1, arg01
2d590     F2 FA 01 F6 | 	mov	result1, objptr
2d594     00 C8 04 FF 
2d598     00 FA 45 F5 | 	or	result1, ##160432128
2d59c     04 12 06 F1 | 	add	arg01, #4
2d5a0     09 FB 61 FC | 	wrlong	result1, arg01
2d5a4     F2 FA 01 F6 | 	mov	result1, objptr
2d5a8     00 D0 04 FF 
2d5ac     00 FA 45 F5 | 	or	result1, ##161480704
2d5b0     04 12 06 F1 | 	add	arg01, #4
2d5b4     09 FB 61 FC | 	wrlong	result1, arg01
2d5b8     F2 FA 01 F6 | 	mov	result1, objptr
2d5bc     00 D8 04 FF 
2d5c0     00 FA 45 F5 | 	or	result1, ##162529280
2d5c4     04 12 06 F1 | 	add	arg01, #4
2d5c8     09 FB 61 FC | 	wrlong	result1, arg01
2d5cc     F2 FA 01 F6 | 	mov	result1, objptr
2d5d0     00 E0 04 FF 
2d5d4     00 FA 45 F5 | 	or	result1, ##163577856
2d5d8     04 12 06 F1 | 	add	arg01, #4
2d5dc     09 FB 61 FC | 	wrlong	result1, arg01
2d5e0     F2 FA 01 F6 | 	mov	result1, objptr
2d5e4     00 E8 04 FF 
2d5e8     00 FA 45 F5 | 	or	result1, ##164626432
2d5ec     04 12 06 F1 | 	add	arg01, #4
2d5f0     09 FB 61 FC | 	wrlong	result1, arg01
2d5f4     F2 FA 01 F6 | 	mov	result1, objptr
2d5f8     00 F0 04 FF 
2d5fc     00 FA 45 F5 | 	or	result1, ##165675008
2d600     04 12 06 F1 | 	add	arg01, #4
2d604     09 FB 61 FC | 	wrlong	result1, arg01
2d608     F2 FA 01 F6 | 	mov	result1, objptr
2d60c     00 F8 04 FF 
2d610     00 FA 45 F5 | 	or	result1, ##166723584
2d614     04 12 06 F1 | 	add	arg01, #4
2d618     09 FB 61 FC | 	wrlong	result1, arg01
2d61c     F2 FA 01 F6 | 	mov	result1, objptr
2d620     00 00 05 FF 
2d624     00 FA 45 F5 | 	or	result1, ##167772160
2d628     04 12 06 F1 | 	add	arg01, #4
2d62c     09 FB 61 FC | 	wrlong	result1, arg01
2d630     F2 FA 01 F6 | 	mov	result1, objptr
2d634     00 08 05 FF 
2d638     00 FA 45 F5 | 	or	result1, ##168820736
2d63c     04 12 06 F1 | 	add	arg01, #4
2d640     09 FB 61 FC | 	wrlong	result1, arg01
2d644     F2 FA 01 F6 | 	mov	result1, objptr
2d648     00 10 05 FF 
2d64c     00 FA 45 F5 | 	or	result1, ##169869312
2d650     04 12 06 F1 | 	add	arg01, #4
2d654     09 FB 61 FC | 	wrlong	result1, arg01
2d658     4C 12 86 F1 | 	sub	arg01, #76
2d65c                 | ' 
2d65c                 | '     v->close = &v_close;
2d65c                 | '     v->read = &v_read;
2d65c                 | '     v->write = &v_write;
2d65c                 | '     v->lseek = &v_lseek;
2d65c                 | '     v->ioctl = &v_ioctl;
2d65c                 | '     v->flush = 0;
2d65c                 | '     v->vfs_data = ptr;
2d65c                 | '     v->reserved = 0;
2d65c                 | ' 
2d65c                 | '     v->open = &v_open;
2d65c                 | '     v->creat = &v_creat;
2d65c                 | '     v->opendir = &v_opendir;
2d65c                 | '     v->closedir = &v_closedir;
2d65c                 | '     v->readdir = &v_readdir;
2d65c                 | '     v->stat = &v_stat;
2d65c                 | ' 
2d65c                 | '     v->mkdir = &v_mkdir;
2d65c                 | '     v->rmdir = &v_rmdir;
2d65c                 | ' 
2d65c                 | '     v->remove = &v_remove;
2d65c                 | '     v->rename = &v_rename;
2d65c                 | ' 
2d65c                 | '     v->init = &v_init;
2d65c                 | '     v->deinit = &v_deinit;
2d65c                 | ' 
2d65c                 | '     return v;
2d65c     09 FB 01 F6 | 	mov	result1, arg01
2d660     A7 F0 03 F6 | 	mov	ptra, fp
2d664     B2 00 A0 FD | 	call	#popregs_
2d668                 | _fatfs_cc_get_vfs_ret
2d668     2D 00 64 FD | 	ret
2d66c                 | 
2d66c                 | _fatfs_cc_xmit_mmc_1054
2d66c     01 00 00 FF 
2d670     10 E4 05 F1 | 	add	objptr, ##528
2d674     F2 00 02 FB | 	rdlong	_var01, objptr
2d678     08 E4 05 F1 | 	add	objptr, #8
2d67c     F2 02 02 FB | 	rdlong	_var02, objptr
2d680     01 00 00 FF 
2d684     18 E4 85 F1 | 	sub	objptr, ##536
2d688     40 02 62 FD | 	dirl	_var02
2d68c     28 02 64 FD | 	setq	#1
2d690     09 05 02 FB | 	rdlong	_var03, arg01
2d694     69 04 62 FD | 	rev	_var03
2d698     1B 04 FE F9 | 	movbyts	_var03, #27
2d69c     01 05 22 FC | 	wypin	_var03, _var02
2d6a0     0A 05 02 F6 | 	mov	_var03, arg02
2d6a4     02 14 4E F0 | 	shr	arg02, #2 wz
2d6a8     03 04 66 F0 | 	shl	_var03, #3
2d6ac     00 05 22 FC | 	wypin	_var03, _var01
2d6b0     41 02 62 FD | 	dirh	_var02
2d6b4     08 12 06 F1 | 	add	arg01, #8
2d6b8     69 06 62 FD | 	rev	_var04
2d6bc     1B 06 FE F9 | 	movbyts	_var04, #27
2d6c0                 | LR__4600
2d6c0     01 07 22 5C |  if_ne	wypin	_var04, _var02
2d6c4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2d6c8     04 12 06 51 |  if_ne	add	arg01, #4
2d6cc     69 06 62 5D |  if_ne	rev	_var04
2d6d0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2d6d4                 | LR__4601
2d6d4     40 02 72 5D |  if_ne	testp	_var02 wc
2d6d8     F8 FF 9F 1D |  if_a	jmp	#LR__4601
2d6dc     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4600
2d6e0                 | LR__4602
2d6e0     40 00 72 FD | 	testp	_var01 wc
2d6e4     F8 FF 9F 3D |  if_ae	jmp	#LR__4602
2d6e8     40 02 62 FD | 	dirl	_var02
2d6ec     FF FF FF FF 
2d6f0     01 FF 2B FC | 	wypin	##-1, _var02
2d6f4     41 02 62 FD | 	dirh	_var02
2d6f8                 | _fatfs_cc_xmit_mmc_1054_ret
2d6f8     2D 00 64 FD | 	ret
2d6fc                 | 
2d6fc                 | _fatfs_cc_rcvr_mmc_1061
2d6fc     01 00 00 FF 
2d700     10 E4 05 F1 | 	add	objptr, ##528
2d704     F2 00 02 FB | 	rdlong	_var01, objptr
2d708     0C E4 05 F1 | 	add	objptr, #12
2d70c     F2 02 02 FB | 	rdlong	_var02, objptr
2d710     01 00 00 FF 
2d714     1C E4 85 F1 | 	sub	objptr, ##540
2d718     01 03 08 FC | 	akpin	_var02
2d71c     0A 05 0A F6 | 	mov	_var03, arg02 wz
2d720     02 04 4E F0 | 	shr	_var03, #2 wz
2d724     30 00 90 AD |  if_e	jmp	#LR__4612
2d728     02 07 02 F6 | 	mov	_var04, _var03
2d72c     05 06 66 F0 | 	shl	_var04, #5
2d730     00 07 22 FC | 	wypin	_var04, _var01
2d734     01 7F 18 FC | 	wxpin	#63, _var02
2d738                 | LR__4610
2d738                 | LR__4611
2d738     40 02 72 FD | 	testp	_var02 wc
2d73c     F8 FF 9F 3D |  if_ae	jmp	#LR__4611
2d740     01 07 8A FA | 	rdpin	_var04, _var02
2d744     69 06 62 FD | 	rev	_var04
2d748     1B 06 FE F9 | 	movbyts	_var04, #27
2d74c     09 07 62 FC | 	wrlong	_var04, arg01
2d750     04 12 06 F1 | 	add	arg01, #4
2d754     F8 05 6E FB | 	djnz	_var03, #LR__4610
2d758                 | LR__4612
2d758     03 14 0E F5 | 	and	arg02, #3 wz
2d75c     24 00 90 AD |  if_e	jmp	#LR__4615
2d760     01 4F 18 FC | 	wxpin	#39, _var02
2d764                 | LR__4613
2d764     00 11 28 FC | 	wypin	#8, _var01
2d768                 | LR__4614
2d768     40 02 72 FD | 	testp	_var02 wc
2d76c     F8 FF 9F 3D |  if_ae	jmp	#LR__4614
2d770     01 07 8A FA | 	rdpin	_var04, _var02
2d774     69 06 62 FD | 	rev	_var04
2d778     09 07 42 FC | 	wrbyte	_var04, arg01
2d77c     01 12 06 F1 | 	add	arg01, #1
2d780     F8 15 6E FB | 	djnz	arg02, #LR__4613
2d784                 | LR__4615
2d784                 | _fatfs_cc_rcvr_mmc_1061_ret
2d784     2D 00 64 FD | 	ret
2d788                 | 
2d788                 | _fatfs_cc_wait_ready_1065
2d788     01 4A 05 F6 | 	mov	COUNT_, #1
2d78c     A8 00 A0 FD | 	call	#pushregs_
2d790     10 F0 07 F1 | 	add	ptra, #16
2d794     1A FA 61 FD | 	getct	result1
2d798     08 4E 05 F1 | 	add	fp, #8
2d79c     A7 FA 61 FC | 	wrlong	result1, fp
2d7a0     14 1E 06 FB | 	rdlong	local01, #20
2d7a4     01 1E 46 F0 | 	shr	local01, #1
2d7a8     04 4E 05 F1 | 	add	fp, #4
2d7ac     A7 1E 62 FC | 	wrlong	local01, fp
2d7b0     0C 4E 85 F1 | 	sub	fp, #12
2d7b4                 | ' {
2d7b4                 | ' 	BYTE d;
2d7b4                 | ' 	UINT tmr, tmout;
2d7b4                 | ' 
2d7b4                 | ' 	tmr = _cnt();
2d7b4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2d7b4                 | ' 	for(;;) {
2d7b4                 | LR__4620
2d7b4     04 4E 05 F1 | 	add	fp, #4
2d7b8     A7 12 02 F6 | 	mov	arg01, fp
2d7bc     04 4E 85 F1 | 	sub	fp, #4
2d7c0     01 14 06 F6 | 	mov	arg02, #1
2d7c4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2d7c8     04 4E 05 F1 | 	add	fp, #4
2d7cc     A7 1E C2 FA | 	rdbyte	local01, fp
2d7d0     04 4E 85 F1 | 	sub	fp, #4
2d7d4     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d7d8     01 FA 05 A6 |  if_e	mov	result1, #1
2d7dc     28 00 90 AD |  if_e	jmp	#LR__4621
2d7e0     1A FA 61 FD | 	getct	result1
2d7e4     08 4E 05 F1 | 	add	fp, #8
2d7e8     A7 1E 02 FB | 	rdlong	local01, fp
2d7ec     0F FB 81 F1 | 	sub	result1, local01
2d7f0     04 4E 05 F1 | 	add	fp, #4
2d7f4     A7 1E 02 FB | 	rdlong	local01, fp
2d7f8     0C 4E 85 F1 | 	sub	fp, #12
2d7fc     0F FB 11 F2 | 	cmp	result1, local01 wc
2d800     00 FA 05 36 |  if_ae	mov	result1, #0
2d804     AC FF 9F CD |  if_b	jmp	#LR__4620
2d808                 | LR__4621
2d808     A7 F0 03 F6 | 	mov	ptra, fp
2d80c     B2 00 A0 FD | 	call	#popregs_
2d810                 | _fatfs_cc_wait_ready_1065_ret
2d810     2D 00 64 FD | 	ret
2d814                 | 
2d814                 | _fatfs_cc_deselect_1071
2d814     00 4A 05 F6 | 	mov	COUNT_, #0
2d818     A8 00 A0 FD | 	call	#pushregs_
2d81c     14 F0 07 F1 | 	add	ptra, #20
2d820     01 00 00 FF 
2d824     14 E4 05 F1 | 	add	objptr, ##532
2d828     F2 14 02 FB | 	rdlong	arg02, objptr
2d82c     04 4E 05 F1 | 	add	fp, #4
2d830     A7 14 62 FC | 	wrlong	arg02, fp
2d834     04 E4 85 F1 | 	sub	objptr, #4
2d838     F2 14 02 FB | 	rdlong	arg02, objptr
2d83c     04 4E 05 F1 | 	add	fp, #4
2d840     A7 14 62 FC | 	wrlong	arg02, fp
2d844     08 E4 05 F1 | 	add	objptr, #8
2d848     F2 14 02 FB | 	rdlong	arg02, objptr
2d84c     04 4E 05 F1 | 	add	fp, #4
2d850     A7 14 62 FC | 	wrlong	arg02, fp
2d854     04 E4 05 F1 | 	add	objptr, #4
2d858     F2 14 02 FB | 	rdlong	arg02, objptr
2d85c     01 00 00 FF 
2d860     1C E4 85 F1 | 	sub	objptr, ##540
2d864     04 4E 05 F1 | 	add	fp, #4
2d868     A7 14 62 FC | 	wrlong	arg02, fp
2d86c     0C 4E 85 F1 | 	sub	fp, #12
2d870     A7 12 02 FB | 	rdlong	arg01, fp
2d874     04 4E 85 F1 | 	sub	fp, #4
2d878     59 12 62 FD | 	drvh	arg01
2d87c     1F 20 64 FD | 	waitx	#16
2d880     A7 12 02 F6 | 	mov	arg01, fp
2d884     01 14 06 F6 | 	mov	arg02, #1
2d888     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2d88c     A7 F0 03 F6 | 	mov	ptra, fp
2d890     B2 00 A0 FD | 	call	#popregs_
2d894                 | _fatfs_cc_deselect_1071_ret
2d894     2D 00 64 FD | 	ret
2d898                 | 
2d898                 | _fatfs_cc_select_1075
2d898     00 4A 05 F6 | 	mov	COUNT_, #0
2d89c     A8 00 A0 FD | 	call	#pushregs_
2d8a0     10 F0 07 F1 | 	add	ptra, #16
2d8a4     01 00 00 FF 
2d8a8     14 E4 05 F1 | 	add	objptr, ##532
2d8ac     F2 14 02 FB | 	rdlong	arg02, objptr
2d8b0     08 4E 05 F1 | 	add	fp, #8
2d8b4     A7 14 62 FC | 	wrlong	arg02, fp
2d8b8     08 E4 05 F1 | 	add	objptr, #8
2d8bc     F2 12 02 FB | 	rdlong	arg01, objptr
2d8c0     01 00 00 FF 
2d8c4     1C E4 85 F1 | 	sub	objptr, ##540
2d8c8     04 4E 05 F1 | 	add	fp, #4
2d8cc     A7 12 62 FC | 	wrlong	arg01, fp
2d8d0     50 12 62 FD | 	fltl	arg01
2d8d4     04 4E 85 F1 | 	sub	fp, #4
2d8d8     A7 12 02 FB | 	rdlong	arg01, fp
2d8dc     58 12 62 FD | 	drvl	arg01
2d8e0     1F 20 64 FD | 	waitx	#16
2d8e4     04 4E 05 F1 | 	add	fp, #4
2d8e8     A7 12 02 FB | 	rdlong	arg01, fp
2d8ec     41 12 62 FD | 	dirh	arg01
2d8f0     08 4E 85 F1 | 	sub	fp, #8
2d8f4     A7 12 02 F6 | 	mov	arg01, fp
2d8f8     04 4E 85 F1 | 	sub	fp, #4
2d8fc     01 14 06 F6 | 	mov	arg02, #1
2d900     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2d904     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1065
2d908     00 FA 0D F2 | 	cmp	result1, #0 wz
2d90c     01 FA 05 56 |  if_ne	mov	result1, #1
2d910     08 00 90 5D |  if_ne	jmp	#LR__4630
2d914     FC FE BF FD | 	call	#_fatfs_cc_deselect_1071
2d918                 | ' 
2d918                 | ' 	deselect();
2d918                 | ' 	return 0;
2d918     00 FA 05 F6 | 	mov	result1, #0
2d91c                 | LR__4630
2d91c     A7 F0 03 F6 | 	mov	ptra, fp
2d920     B2 00 A0 FD | 	call	#popregs_
2d924                 | _fatfs_cc_select_1075_ret
2d924     2D 00 64 FD | 	ret
2d928                 | 
2d928                 | _fatfs_cc_rcvr_datablock_1079
2d928     01 4A 05 F6 | 	mov	COUNT_, #1
2d92c     A8 00 A0 FD | 	call	#pushregs_
2d930     18 F0 07 F1 | 	add	ptra, #24
2d934     04 4E 05 F1 | 	add	fp, #4
2d938     A7 12 62 FC | 	wrlong	arg01, fp
2d93c     04 4E 05 F1 | 	add	fp, #4
2d940     A7 14 62 FC | 	wrlong	arg02, fp
2d944     1A FA 61 FD | 	getct	result1
2d948     08 4E 05 F1 | 	add	fp, #8
2d94c     A7 FA 61 FC | 	wrlong	result1, fp
2d950     14 1E 06 FB | 	rdlong	local01, #20
2d954     03 1E 46 F0 | 	shr	local01, #3
2d958     04 4E 05 F1 | 	add	fp, #4
2d95c     A7 1E 62 FC | 	wrlong	local01, fp
2d960     14 4E 85 F1 | 	sub	fp, #20
2d964                 | ' 	BYTE *buff,
2d964                 | ' 	UINT btr
2d964                 | ' )
2d964                 | ' {
2d964                 | ' 	BYTE d[2];
2d964                 | ' 	UINT tmr, tmout;
2d964                 | ' 
2d964                 | ' 	tmr = _cnt();
2d964                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2d964                 | ' 	for(;;) {
2d964                 | LR__4640
2d964     0C 4E 05 F1 | 	add	fp, #12
2d968     A7 12 02 F6 | 	mov	arg01, fp
2d96c     0C 4E 85 F1 | 	sub	fp, #12
2d970     01 14 06 F6 | 	mov	arg02, #1
2d974     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2d978     0C 4E 05 F1 | 	add	fp, #12
2d97c     A7 1E C2 FA | 	rdbyte	local01, fp
2d980     0C 4E 85 F1 | 	sub	fp, #12
2d984     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d988     28 00 90 5D |  if_ne	jmp	#LR__4641
2d98c     1A FA 61 FD | 	getct	result1
2d990     FD 1E 02 F6 | 	mov	local01, result1
2d994     10 4E 05 F1 | 	add	fp, #16
2d998     A7 14 02 FB | 	rdlong	arg02, fp
2d99c     0A 1F 82 F1 | 	sub	local01, arg02
2d9a0     04 4E 05 F1 | 	add	fp, #4
2d9a4     A7 14 02 FB | 	rdlong	arg02, fp
2d9a8     14 4E 85 F1 | 	sub	fp, #20
2d9ac     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2d9b0     B0 FF 9F CD |  if_b	jmp	#LR__4640
2d9b4                 | LR__4641
2d9b4     0C 4E 05 F1 | 	add	fp, #12
2d9b8     A7 1E C2 FA | 	rdbyte	local01, fp
2d9bc     0C 4E 85 F1 | 	sub	fp, #12
2d9c0     FE 1E 0E F2 | 	cmp	local01, #254 wz
2d9c4     00 FA 05 56 |  if_ne	mov	result1, #0
2d9c8     30 00 90 5D |  if_ne	jmp	#LR__4642
2d9cc     04 4E 05 F1 | 	add	fp, #4
2d9d0     A7 12 02 FB | 	rdlong	arg01, fp
2d9d4     04 4E 05 F1 | 	add	fp, #4
2d9d8     A7 14 02 FB | 	rdlong	arg02, fp
2d9dc     08 4E 85 F1 | 	sub	fp, #8
2d9e0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2d9e4     0C 4E 05 F1 | 	add	fp, #12
2d9e8     A7 12 02 F6 | 	mov	arg01, fp
2d9ec     0C 4E 85 F1 | 	sub	fp, #12
2d9f0     02 14 06 F6 | 	mov	arg02, #2
2d9f4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2d9f8                 | ' 
2d9f8                 | ' 	rcvr_mmc(buff, btr);
2d9f8                 | ' 	rcvr_mmc(d, 2);
2d9f8                 | ' 
2d9f8                 | ' 	return 1;
2d9f8     01 FA 05 F6 | 	mov	result1, #1
2d9fc                 | LR__4642
2d9fc     A7 F0 03 F6 | 	mov	ptra, fp
2da00     B2 00 A0 FD | 	call	#popregs_
2da04                 | _fatfs_cc_rcvr_datablock_1079_ret
2da04     2D 00 64 FD | 	ret
2da08                 | 
2da08                 | _fatfs_cc_xmit_datablock_1081
2da08     00 4A 05 F6 | 	mov	COUNT_, #0
2da0c     A8 00 A0 FD | 	call	#pushregs_
2da10     10 F0 07 F1 | 	add	ptra, #16
2da14     04 4E 05 F1 | 	add	fp, #4
2da18     A7 12 62 FC | 	wrlong	arg01, fp
2da1c     04 4E 05 F1 | 	add	fp, #4
2da20     A7 14 42 FC | 	wrbyte	arg02, fp
2da24     08 4E 85 F1 | 	sub	fp, #8
2da28     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1065
2da2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2da30     00 FA 05 A6 |  if_e	mov	result1, #0
2da34     90 00 90 AD |  if_e	jmp	#LR__4651
2da38     08 4E 05 F1 | 	add	fp, #8
2da3c     A7 14 C2 FA | 	rdbyte	arg02, fp
2da40     04 4E 05 F1 | 	add	fp, #4
2da44     A7 14 42 FC | 	wrbyte	arg02, fp
2da48     A7 12 02 F6 | 	mov	arg01, fp
2da4c     0C 4E 85 F1 | 	sub	fp, #12
2da50     01 14 06 F6 | 	mov	arg02, #1
2da54     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1054
2da58     08 4E 05 F1 | 	add	fp, #8
2da5c     A7 14 C2 FA | 	rdbyte	arg02, fp
2da60     08 4E 85 F1 | 	sub	fp, #8
2da64     FD 14 0E F2 | 	cmp	arg02, #253 wz
2da68     58 00 90 AD |  if_e	jmp	#LR__4650
2da6c     04 4E 05 F1 | 	add	fp, #4
2da70     A7 12 02 FB | 	rdlong	arg01, fp
2da74     04 4E 85 F1 | 	sub	fp, #4
2da78     09 14 C6 F9 | 	decod	arg02, #9
2da7c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1054
2da80     0C 4E 05 F1 | 	add	fp, #12
2da84     A7 12 02 F6 | 	mov	arg01, fp
2da88     0C 4E 85 F1 | 	sub	fp, #12
2da8c     02 14 06 F6 | 	mov	arg02, #2
2da90     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2da94     0C 4E 05 F1 | 	add	fp, #12
2da98     A7 12 02 F6 | 	mov	arg01, fp
2da9c     0C 4E 85 F1 | 	sub	fp, #12
2daa0     01 14 06 F6 | 	mov	arg02, #1
2daa4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2daa8     0C 4E 05 F1 | 	add	fp, #12
2daac     A7 14 C2 FA | 	rdbyte	arg02, fp
2dab0     0C 4E 85 F1 | 	sub	fp, #12
2dab4     1F 14 06 F5 | 	and	arg02, #31
2dab8     05 14 0E F2 | 	cmp	arg02, #5 wz
2dabc                 | ' 			return 0;
2dabc     00 FA 05 56 |  if_ne	mov	result1, #0
2dac0     04 00 90 5D |  if_ne	jmp	#LR__4651
2dac4                 | LR__4650
2dac4                 | ' 	}
2dac4                 | ' 
2dac4                 | ' 	return 1;
2dac4     01 FA 05 F6 | 	mov	result1, #1
2dac8                 | LR__4651
2dac8     A7 F0 03 F6 | 	mov	ptra, fp
2dacc     B2 00 A0 FD | 	call	#popregs_
2dad0                 | _fatfs_cc_xmit_datablock_1081_ret
2dad0     2D 00 64 FD | 	ret
2dad4                 | 
2dad4                 | _fatfs_cc_send_cmd_1085
2dad4     01 4A 05 F6 | 	mov	COUNT_, #1
2dad8     A8 00 A0 FD | 	call	#pushregs_
2dadc     1C F0 07 F1 | 	add	ptra, #28
2dae0                 | _fatfs_cc_send_cmd_1085_enter
2dae0     04 4E 05 F1 | 	add	fp, #4
2dae4     A7 12 42 FC | 	wrbyte	arg01, fp
2dae8     04 4E 05 F1 | 	add	fp, #4
2daec     A7 14 62 FC | 	wrlong	arg02, fp
2daf0     04 4E 85 F1 | 	sub	fp, #4
2daf4     A7 FA C1 FA | 	rdbyte	result1, fp
2daf8     04 4E 85 F1 | 	sub	fp, #4
2dafc     80 FA CD F7 | 	test	result1, #128 wz
2db00     44 00 90 AD |  if_e	jmp	#LR__4660
2db04     04 4E 05 F1 | 	add	fp, #4
2db08     A7 14 C2 FA | 	rdbyte	arg02, fp
2db0c     7F 14 06 F5 | 	and	arg02, #127
2db10     A7 14 42 FC | 	wrbyte	arg02, fp
2db14     04 4E 85 F1 | 	sub	fp, #4
2db18     37 12 06 F6 | 	mov	arg01, #55
2db1c     00 14 06 F6 | 	mov	arg02, #0
2db20     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1085
2db24     0C 4E 05 F1 | 	add	fp, #12
2db28     A7 FA 41 FC | 	wrbyte	result1, fp
2db2c     A7 14 C2 FA | 	rdbyte	arg02, fp
2db30     0C 4E 85 F1 | 	sub	fp, #12
2db34     02 14 16 F2 | 	cmp	arg02, #2 wc
2db38     0C 4E 05 31 |  if_ae	add	fp, #12
2db3c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2db40     0C 4E 85 31 |  if_ae	sub	fp, #12
2db44     6C 01 90 3D |  if_ae	jmp	#LR__4664
2db48                 | LR__4660
2db48     04 4E 05 F1 | 	add	fp, #4
2db4c     A7 14 C2 FA | 	rdbyte	arg02, fp
2db50     04 4E 85 F1 | 	sub	fp, #4
2db54     0C 14 0E F2 | 	cmp	arg02, #12 wz
2db58     14 00 90 AD |  if_e	jmp	#LR__4661
2db5c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1071
2db60     34 FD BF FD | 	call	#_fatfs_cc_select_1075
2db64     00 FA 0D F2 | 	cmp	result1, #0 wz
2db68     FF FA 05 A6 |  if_e	mov	result1, #255
2db6c     44 01 90 AD |  if_e	jmp	#LR__4664
2db70                 | LR__4661
2db70     04 4E 05 F1 | 	add	fp, #4
2db74     A7 14 C2 FA | 	rdbyte	arg02, fp
2db78     40 FA 05 F6 | 	mov	result1, #64
2db7c     0A FB 41 F5 | 	or	result1, arg02
2db80     10 4E 05 F1 | 	add	fp, #16
2db84     A7 FA 41 FC | 	wrbyte	result1, fp
2db88     0C 4E 85 F1 | 	sub	fp, #12
2db8c     A7 FA 01 FB | 	rdlong	result1, fp
2db90     18 FA 45 F0 | 	shr	result1, #24
2db94     0D 4E 05 F1 | 	add	fp, #13
2db98     A7 FA 41 FC | 	wrbyte	result1, fp
2db9c     0D 4E 85 F1 | 	sub	fp, #13
2dba0     A7 FA 01 FB | 	rdlong	result1, fp
2dba4     10 FA 45 F0 | 	shr	result1, #16
2dba8     0E 4E 05 F1 | 	add	fp, #14
2dbac     A7 FA 41 FC | 	wrbyte	result1, fp
2dbb0     0E 4E 85 F1 | 	sub	fp, #14
2dbb4     A7 FA 01 FB | 	rdlong	result1, fp
2dbb8     08 FA 45 F0 | 	shr	result1, #8
2dbbc     0F 4E 05 F1 | 	add	fp, #15
2dbc0     A7 FA 41 FC | 	wrbyte	result1, fp
2dbc4     0F 4E 85 F1 | 	sub	fp, #15
2dbc8     A7 FA 01 FB | 	rdlong	result1, fp
2dbcc     10 4E 05 F1 | 	add	fp, #16
2dbd0     A7 FA 41 FC | 	wrbyte	result1, fp
2dbd4     0C 4E 85 F1 | 	sub	fp, #12
2dbd8     A7 02 48 FC | 	wrbyte	#1, fp
2dbdc     08 4E 85 F1 | 	sub	fp, #8
2dbe0     A7 FA C9 FA | 	rdbyte	result1, fp wz
2dbe4     04 4E 85 F1 | 	sub	fp, #4
2dbe8     0C 4E 05 A1 |  if_e	add	fp, #12
2dbec     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2dbf0     0C 4E 85 A1 |  if_e	sub	fp, #12
2dbf4     04 4E 05 F1 | 	add	fp, #4
2dbf8     A7 FA C1 FA | 	rdbyte	result1, fp
2dbfc     04 4E 85 F1 | 	sub	fp, #4
2dc00     08 FA 0D F2 | 	cmp	result1, #8 wz
2dc04     0C 4E 05 A1 |  if_e	add	fp, #12
2dc08     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2dc0c     0C 4E 85 A1 |  if_e	sub	fp, #12
2dc10     0C 4E 05 F1 | 	add	fp, #12
2dc14     A7 14 C2 FA | 	rdbyte	arg02, fp
2dc18     0D 4E 05 F1 | 	add	fp, #13
2dc1c     A7 14 42 FC | 	wrbyte	arg02, fp
2dc20     05 4E 85 F1 | 	sub	fp, #5
2dc24     A7 12 02 F6 | 	mov	arg01, fp
2dc28     14 4E 85 F1 | 	sub	fp, #20
2dc2c     06 14 06 F6 | 	mov	arg02, #6
2dc30     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1054
2dc34     04 4E 05 F1 | 	add	fp, #4
2dc38     A7 1E C2 FA | 	rdbyte	local01, fp
2dc3c     04 4E 85 F1 | 	sub	fp, #4
2dc40     0C 1E 0E F2 | 	cmp	local01, #12 wz
2dc44     10 4E 05 A1 |  if_e	add	fp, #16
2dc48     A7 12 02 A6 |  if_e	mov	arg01, fp
2dc4c     10 4E 85 A1 |  if_e	sub	fp, #16
2dc50     01 14 06 A6 |  if_e	mov	arg02, #1
2dc54     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1061
2dc58     0C 4E 05 F1 | 	add	fp, #12
2dc5c     A7 14 48 FC | 	wrbyte	#10, fp
2dc60     0C 4E 85 F1 | 	sub	fp, #12
2dc64                 | ' 	n = 10;
2dc64                 | ' 	do
2dc64                 | LR__4662
2dc64     10 4E 05 F1 | 	add	fp, #16
2dc68     A7 12 02 F6 | 	mov	arg01, fp
2dc6c     10 4E 85 F1 | 	sub	fp, #16
2dc70     01 14 06 F6 | 	mov	arg02, #1
2dc74     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1061
2dc78     10 4E 05 F1 | 	add	fp, #16
2dc7c     A7 1E C2 FA | 	rdbyte	local01, fp
2dc80     10 4E 85 F1 | 	sub	fp, #16
2dc84     80 1E CE F7 | 	test	local01, #128 wz
2dc88     1C 00 90 AD |  if_e	jmp	#LR__4663
2dc8c     0C 4E 05 F1 | 	add	fp, #12
2dc90     A7 1E C2 FA | 	rdbyte	local01, fp
2dc94     01 1E 86 F1 | 	sub	local01, #1
2dc98     A7 1E 42 FC | 	wrbyte	local01, fp
2dc9c     A7 1E CA FA | 	rdbyte	local01, fp wz
2dca0     0C 4E 85 F1 | 	sub	fp, #12
2dca4     BC FF 9F 5D |  if_ne	jmp	#LR__4662
2dca8                 | LR__4663
2dca8                 | ' 
2dca8                 | ' 	return d;
2dca8     10 4E 05 F1 | 	add	fp, #16
2dcac     A7 FA C1 FA | 	rdbyte	result1, fp
2dcb0     10 4E 85 F1 | 	sub	fp, #16
2dcb4                 | LR__4664
2dcb4     A7 F0 03 F6 | 	mov	ptra, fp
2dcb8     B2 00 A0 FD | 	call	#popregs_
2dcbc                 | _fatfs_cc_send_cmd_1085_ret
2dcbc     2D 00 64 FD | 	ret
2dcc0                 | 
2dcc0                 | _fatfs_cc_disk_deinitialize
2dcc0     03 4A 05 F6 | 	mov	COUNT_, #3
2dcc4     A8 00 A0 FD | 	call	#pushregs_
2dcc8     00 12 4E F2 | 	cmps	arg01, #0 wz
2dccc     01 00 00 FF 
2dcd0     14 E4 05 F1 | 	add	objptr, ##532
2dcd4     F2 12 02 FB | 	rdlong	arg01, objptr
2dcd8     04 E4 85 F1 | 	sub	objptr, #4
2dcdc     F2 1E 02 FB | 	rdlong	local01, objptr
2dce0     08 E4 05 F1 | 	add	objptr, #8
2dce4     F2 20 02 FB | 	rdlong	local02, objptr
2dce8     04 E4 05 F1 | 	add	objptr, #4
2dcec     F2 22 02 FB | 	rdlong	local03, objptr
2dcf0     01 00 00 FF 
2dcf4     1C E4 85 F1 | 	sub	objptr, ##540
2dcf8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dcf8                 | '         return RES_NOTRDY;
2dcf8     03 FA 05 56 |  if_ne	mov	result1, #3
2dcfc     2C 00 90 5D |  if_ne	jmp	#LR__4670
2dd00     50 12 62 FD | 	fltl	arg01
2dd04     09 01 08 FC | 	wrpin	#0, arg01
2dd08     50 1E 62 FD | 	fltl	local01
2dd0c     0F 01 08 FC | 	wrpin	#0, local01
2dd10     50 20 62 FD | 	fltl	local02
2dd14     10 01 08 FC | 	wrpin	#0, local02
2dd18     50 22 62 FD | 	fltl	local03
2dd1c     11 01 08 FC | 	wrpin	#0, local03
2dd20     0A 12 06 F6 | 	mov	arg01, #10
2dd24     98 13 BF FD | 	call	#__system___waitms
2dd28                 | '     }
2dd28                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dd28                 | '     _pinclear(PIN_SS);
2dd28                 | '     _pinclear(PIN_CLK);
2dd28                 | '     _pinclear(PIN_DI);
2dd28                 | '     _pinclear(PIN_DO);
2dd28                 | ' 
2dd28                 | '     _waitms(10);
2dd28                 | ' 
2dd28                 | '     return 0;
2dd28     00 FA 05 F6 | 	mov	result1, #0
2dd2c                 | LR__4670
2dd2c     A7 F0 03 F6 | 	mov	ptra, fp
2dd30     B2 00 A0 FD | 	call	#popregs_
2dd34                 | _fatfs_cc_disk_deinitialize_ret
2dd34     2D 00 64 FD | 	ret
2dd38                 | 
2dd38                 | _fatfs_cc_gettimeofday
2dd38     04 4A 05 F6 | 	mov	COUNT_, #4
2dd3c     A8 00 A0 FD | 	call	#pushregs_
2dd40     09 1F 02 F6 | 	mov	local01, arg01
2dd44     54 0F BF FD | 	call	#__system___getus
2dd48     FD 12 02 F6 | 	mov	arg01, result1
2dd4c     02 00 00 FF 
2dd50     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2dd54     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2dd58     09 FB 01 F6 | 	mov	result1, arg01
2dd5c     10 FB 81 F1 | 	sub	result1, local02
2dd60     A1 07 00 FF 
2dd64     40 FA 15 FD | 	qdiv	result1, ##1000000
2dd68     02 00 00 FF 
2dd6c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2dd70     18 20 62 FD | 	getqx	local02
2dd74     A1 07 00 FF 
2dd78     40 FA 15 FD | 	qdiv	result1, ##1000000
2dd7c     00 20 0E F2 | 	cmp	local02, #0 wz
2dd80     19 22 62 FD | 	getqy	local03
2dd84     28 00 90 AD |  if_e	jmp	#LR__4680
2dd88     02 00 00 FF 
2dd8c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2dd90     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2dd94     10 25 02 F1 | 	add	local04, local02
2dd98     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2dd9c     11 13 82 F1 | 	sub	arg01, local03
2dda0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2dda4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2dda8     02 00 00 FF 
2ddac     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2ddb0                 | LR__4680
2ddb0     02 00 00 FF 
2ddb4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2ddb8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2ddbc     02 00 00 FF 
2ddc0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2ddc4     0F 25 62 FC | 	wrlong	local04, local01
2ddc8     04 1E 06 F1 | 	add	local01, #4
2ddcc     0F 23 62 FC | 	wrlong	local03, local01
2ddd0                 | '         lastsec += secs;
2ddd0                 | '         lastus = now - leftover;
2ddd0                 | '     }
2ddd0                 | '     tv->tv_sec = lastsec;
2ddd0                 | '     tv->tv_usec = leftover;
2ddd0                 | '     return 0;
2ddd0     00 FA 05 F6 | 	mov	result1, #0
2ddd4     A7 F0 03 F6 | 	mov	ptra, fp
2ddd8     B2 00 A0 FD | 	call	#popregs_
2dddc                 | _fatfs_cc_gettimeofday_ret
2dddc     2D 00 64 FD | 	ret
2dde0                 | 
2dde0                 | _fatfs_cc__is_leap_year
2dde0     09 FB 51 F6 | 	abs	result1, arg01 wc
2dde4     03 FA 05 F5 | 	and	result1, #3
2dde8     FD FA 89 F6 | 	negc	result1, result1 wz
2ddec     38 00 90 5D |  if_ne	jmp	#LR__4691
2ddf0     09 FB 51 F6 | 	abs	result1, arg01 wc
2ddf4     64 FA 15 FD | 	qdiv	result1, #100
2ddf8     19 FA 61 FD | 	getqy	result1
2ddfc     FD FA 89 F6 | 	negc	result1, result1 wz
2de00     1C 00 90 5D |  if_ne	jmp	#LR__4690
2de04     09 FB 51 F6 | 	abs	result1, arg01 wc
2de08     90 FB 15 FD | 	qdiv	result1, #400
2de0c                 | '       return (0 == y % 400);
2de0c     00 FA 05 F6 | 	mov	result1, #0
2de10     19 00 62 FD | 	getqy	_var01
2de14     00 01 8A F6 | 	negc	_var01, _var01 wz
2de18     01 FA 05 A6 |  if_e	mov	result1, #1
2de1c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2de20                 | LR__4690
2de20                 | '     return 1;
2de20     01 FA 05 F6 | 	mov	result1, #1
2de24     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2de28                 | LR__4691
2de28                 | '   }
2de28                 | '   return 0;
2de28     00 FA 05 F6 | 	mov	result1, #0
2de2c                 | _fatfs_cc__is_leap_year_ret
2de2c     2D 00 64 FD | 	ret
2de30                 | 
2de30                 | _fatfs_cc___tzoffset
2de30     09 01 0A F6 | 	mov	_var01, arg01 wz
2de34     FF FF FF FF 
2de38     0A FF 6B FC | 	wrlong	##-1, arg02
2de3c     01 02 06 F6 | 	mov	_var02, #1
2de40     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2de44                 | '                 return 0;
2de44     00 FA 05 A6 |  if_e	mov	result1, #0
2de48     94 02 90 AD |  if_e	jmp	#LR__4717
2de4c     0A 01 68 FC | 	wrlong	#0, arg02
2de50     02 00 00 FF 
2de54     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2de58     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2de5c                 | ' 
2de5c                 | '        *hasdst = 0;
2de5c                 | ' 
2de5c                 | ' 	n = stdname;
2de5c                 | '         while (*s && isalpha(*s)) {
2de5c     02 00 00 FF 
2de60     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2de64     97 28 48 FB | 	callpa	#(@LR__4701-@LR__4700)>>2,fcache_load_ptr_
2de68                 | LR__4700
2de68     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2de6c     48 00 90 AD |  if_e	jmp	#LR__4702
2de70     00 13 C2 FA | 	rdbyte	arg01, _var01
2de74                 | ' {
2de74                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2de74     80 12 36 F3 | 	fle	arg01, #128 wc
2de78                 | '     return __ctype[c];
2de78     02 00 00 FF 
2de7c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2de80     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2de84     09 FB C1 FA | 	rdbyte	result1, arg01
2de88     02 00 00 FF 
2de8c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2de90     0C FA CD F7 | 	test	result1, #12 wz
2de94     20 00 90 AD |  if_e	jmp	#LR__4702
2de98     00 09 02 F6 | 	mov	_var05, _var01
2de9c     00 0B 02 F6 | 	mov	_var06, _var01
2dea0     01 0A 06 F1 | 	add	_var06, #1
2dea4     04 0D C2 FA | 	rdbyte	_var07, _var05
2dea8     05 01 02 F6 | 	mov	_var01, _var06
2deac     03 0D 42 FC | 	wrbyte	_var07, _var04
2deb0     01 06 06 F1 | 	add	_var04, #1
2deb4     B0 FF 9F FD | 	jmp	#LR__4700
2deb8                 | LR__4701
2deb8                 | LR__4702
2deb8     03 01 48 FC | 	wrbyte	#0, _var04
2debc     00 0E 06 F6 | 	mov	_var08, #0
2dec0     00 05 C2 FA | 	rdbyte	_var03, _var01
2dec4     2D 04 0E F2 | 	cmp	_var03, #45 wz
2dec8     01 02 66 A6 |  if_e	neg	_var02, #1
2decc     01 00 06 A1 |  if_e	add	_var01, #1
2ded0     97 28 48 FB | 	callpa	#(@LR__4704-@LR__4703)>>2,fcache_load_ptr_
2ded4                 | '                 sgn = -1;
2ded4                 | '                 s++;
2ded4                 | '         }
2ded4                 | '         while (isdigit(*s)) {
2ded4                 | LR__4703
2ded4     00 13 C2 FA | 	rdbyte	arg01, _var01
2ded8                 | ' {
2ded8                 | '   return  (__ctype_get(c) & 0x02 ) ;
2ded8     80 12 36 F3 | 	fle	arg01, #128 wc
2dedc                 | '     return __ctype[c];
2dedc     02 00 00 FF 
2dee0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dee4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dee8     09 FB C1 FA | 	rdbyte	result1, arg01
2deec     02 00 00 FF 
2def0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2def4     02 FA CD F7 | 	test	result1, #2 wz
2def8     28 00 90 AD |  if_e	jmp	#LR__4705
2defc     07 05 02 F6 | 	mov	_var03, _var08
2df00     02 04 66 F0 | 	shl	_var03, #2
2df04     07 05 02 F1 | 	add	_var03, _var08
2df08     01 04 66 F0 | 	shl	_var03, #1
2df0c     00 09 C2 FA | 	rdbyte	_var05, _var01
2df10     30 08 86 F1 | 	sub	_var05, #48
2df14     04 05 02 F1 | 	add	_var03, _var05
2df18     02 0F 02 F6 | 	mov	_var08, _var03
2df1c     01 00 06 F1 | 	add	_var01, #1
2df20     B0 FF 9F FD | 	jmp	#LR__4703
2df24                 | LR__4704
2df24                 | LR__4705
2df24     07 00 00 FF 
2df28     10 0E 06 FD | 	qmul	_var08, ##3600
2df2c     00 05 C2 FA | 	rdbyte	_var03, _var01
2df30     3A 04 0E F2 | 	cmp	_var03, #58 wz
2df34     18 10 62 FD | 	getqx	_var09
2df38     70 00 90 5D |  if_ne	jmp	#LR__4709
2df3c     00 0E 06 F6 | 	mov	_var08, #0
2df40     01 00 06 F1 | 	add	_var01, #1
2df44     97 28 48 FB | 	callpa	#(@LR__4707-@LR__4706)>>2,fcache_load_ptr_
2df48                 | '                 x = 0;
2df48                 | '                 s++;
2df48                 | '                 while (isdigit(*s)) {
2df48                 | LR__4706
2df48     00 13 C2 FA | 	rdbyte	arg01, _var01
2df4c                 | ' {
2df4c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2df4c     80 12 36 F3 | 	fle	arg01, #128 wc
2df50                 | '     return __ctype[c];
2df50     02 00 00 FF 
2df54     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2df58     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2df5c     09 FB C1 FA | 	rdbyte	result1, arg01
2df60     02 00 00 FF 
2df64     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2df68     02 FA CD F7 | 	test	result1, #2 wz
2df6c     28 00 90 AD |  if_e	jmp	#LR__4708
2df70     07 05 02 F6 | 	mov	_var03, _var08
2df74     02 04 66 F0 | 	shl	_var03, #2
2df78     07 05 02 F1 | 	add	_var03, _var08
2df7c     01 04 66 F0 | 	shl	_var03, #1
2df80     00 09 C2 FA | 	rdbyte	_var05, _var01
2df84     30 08 86 F1 | 	sub	_var05, #48
2df88     04 05 02 F1 | 	add	_var03, _var05
2df8c     02 0F 02 F6 | 	mov	_var08, _var03
2df90     01 00 06 F1 | 	add	_var01, #1
2df94     B0 FF 9F FD | 	jmp	#LR__4706
2df98                 | LR__4707
2df98                 | LR__4708
2df98     07 0D 02 F6 | 	mov	_var07, _var08
2df9c     04 0C 66 F0 | 	shl	_var07, #4
2dfa0     07 0D 82 F1 | 	sub	_var07, _var08
2dfa4     02 0C 66 F0 | 	shl	_var07, #2
2dfa8     06 11 02 F1 | 	add	_var09, _var07
2dfac                 | LR__4709
2dfac     02 00 00 FF 
2dfb0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2dfb4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dfb8     00 13 C2 FA | 	rdbyte	arg01, _var01
2dfbc                 | ' {
2dfbc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dfbc     80 12 36 F3 | 	fle	arg01, #128 wc
2dfc0                 | '     return __ctype[c];
2dfc0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2dfc4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dfc8     09 FB C1 FA | 	rdbyte	result1, arg01
2dfcc     02 00 00 FF 
2dfd0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dfd4     0C FA CD F7 | 	test	result1, #12 wz
2dfd8     50 00 90 AD |  if_e	jmp	#LR__4712
2dfdc     0A 03 68 FC | 	wrlong	#1, arg02
2dfe0                 | '                 *hasdst = 1;
2dfe0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2dfe0                 | LR__4710
2dfe0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dfe4     44 00 90 AD |  if_e	jmp	#LR__4711
2dfe8     00 13 C2 FA | 	rdbyte	arg01, _var01
2dfec                 | ' {
2dfec                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dfec     80 12 36 F3 | 	fle	arg01, #128 wc
2dff0                 | '     return __ctype[c];
2dff0     02 00 00 FF 
2dff4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dff8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dffc     09 FB C1 FA | 	rdbyte	result1, arg01
2e000     02 00 00 FF 
2e004     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2e008     0C FA CD F7 | 	test	result1, #12 wz
2e00c     1C 00 90 AD |  if_e	jmp	#LR__4711
2e010     00 0B 02 F6 | 	mov	_var06, _var01
2e014     01 0A 06 F1 | 	add	_var06, #1
2e018     00 0D C2 FA | 	rdbyte	_var07, _var01
2e01c     05 01 02 F6 | 	mov	_var01, _var06
2e020     03 0D 42 FC | 	wrbyte	_var07, _var04
2e024     01 06 06 F1 | 	add	_var04, #1
2e028     B4 FF 9F FD | 	jmp	#LR__4710
2e02c                 | LR__4711
2e02c                 | LR__4712
2e02c     03 01 48 FC | 	wrbyte	#0, _var04
2e030     02 00 00 FF 
2e034     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2e038     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2e03c     02 00 00 FF 
2e040     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2e044     20 00 90 AD |  if_e	jmp	#LR__4713
2e048     02 00 00 FF 
2e04c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2e050     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2e054     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2e058     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2e05c     02 00 00 FF 
2e060     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2e064     1C 00 90 FD | 	jmp	#LR__4714
2e068                 | LR__4713
2e068     02 00 00 FF 
2e06c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2e070     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2e074     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2e078     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2e07c     02 00 00 FF 
2e080     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2e084                 | LR__4714
2e084     02 00 00 FF 
2e088     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2e08c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2e090     02 00 00 FF 
2e094     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2e098     20 00 90 AD |  if_e	jmp	#LR__4715
2e09c     02 00 00 FF 
2e0a0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2e0a4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2e0a8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2e0ac     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2e0b0     02 00 00 FF 
2e0b4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2e0b8     1C 00 90 FD | 	jmp	#LR__4716
2e0bc                 | LR__4715
2e0bc     02 00 00 FF 
2e0c0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2e0c4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2e0c8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2e0cc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2e0d0     02 00 00 FF 
2e0d4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2e0d8                 | LR__4716
2e0d8     08 03 02 FD | 	qmul	_var02, _var09
2e0dc                 | ' 		_tzname[1] = stdname;
2e0dc                 | ' 
2e0dc                 | '         return sgn * off;
2e0dc     18 FA 61 FD | 	getqx	result1
2e0e0                 | LR__4717
2e0e0                 | _fatfs_cc___tzoffset_ret
2e0e0     2D 00 64 FD | 	ret
2e0e4                 | 
2e0e4                 | _fatfs_cc___indst
2e0e4     10 12 06 F1 | 	add	arg01, #16
2e0e8     09 01 02 FB | 	rdlong	_var01, arg01
2e0ec     10 12 86 F1 | 	sub	arg01, #16
2e0f0     02 00 0E F2 | 	cmp	_var01, #2 wz
2e0f4     30 00 90 5D |  if_ne	jmp	#LR__4720
2e0f8     07 00 06 F6 | 	mov	_var01, #7
2e0fc     18 12 06 F1 | 	add	arg01, #24
2e100     09 03 02 FB | 	rdlong	_var02, arg01
2e104     01 01 02 F1 | 	add	_var01, _var02
2e108     0C 12 86 F1 | 	sub	arg01, #12
2e10c     09 05 02 FB | 	rdlong	_var03, arg01
2e110     02 01 82 F1 | 	sub	_var01, _var03
2e114     00 00 56 F2 | 	cmps	_var01, #0 wc
2e118                 | '                         return 1;
2e118     01 FA 05 C6 |  if_b	mov	result1, #1
2e11c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2e120                 | '                 return 0;
2e120     00 FA 05 F6 | 	mov	result1, #0
2e124     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2e128                 | LR__4720
2e128     10 12 06 F1 | 	add	arg01, #16
2e12c     09 01 02 FB | 	rdlong	_var01, arg01
2e130     10 12 86 F1 | 	sub	arg01, #16
2e134     0A 00 0E F2 | 	cmp	_var01, #10 wz
2e138     28 00 90 5D |  if_ne	jmp	#LR__4721
2e13c     18 12 06 F1 | 	add	arg01, #24
2e140     09 01 02 FB | 	rdlong	_var01, arg01
2e144     0C 12 86 F1 | 	sub	arg01, #12
2e148     09 07 02 FB | 	rdlong	_var04, arg01
2e14c     03 01 82 F1 | 	sub	_var01, _var04
2e150     00 00 56 F2 | 	cmps	_var01, #0 wc
2e154                 | '                         return 0;
2e154     00 FA 05 C6 |  if_b	mov	result1, #0
2e158     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2e15c                 | '                 return 1;
2e15c     01 FA 05 F6 | 	mov	result1, #1
2e160     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2e164                 | LR__4721
2e164                 | '         }
2e164                 | ' 
2e164                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2e164     00 00 06 F6 | 	mov	_var01, #0
2e168     10 12 06 F1 | 	add	arg01, #16
2e16c     09 03 02 FB | 	rdlong	_var02, arg01
2e170     10 12 86 F1 | 	sub	arg01, #16
2e174     03 02 56 F2 | 	cmps	_var02, #3 wc
2e178     10 00 90 CD |  if_b	jmp	#LR__4722
2e17c     10 12 06 F1 | 	add	arg01, #16
2e180     09 05 02 FB | 	rdlong	_var03, arg01
2e184     0A 04 56 F2 | 	cmps	_var03, #10 wc
2e188     01 00 06 C6 |  if_b	mov	_var01, #1
2e18c                 | LR__4722
2e18c     00 FB 01 F6 | 	mov	result1, _var01
2e190                 | _fatfs_cc___indst_ret
2e190     2D 00 64 FD | 	ret
2e194                 | 
2e194                 | ' 	
2e194                 | ' 	FUNCTION pfunc(c as integer) as integer
2e194                 | ___strs_cl_pfunc
2e194                 | ' 		if (i < 16) then
2e194     04 E4 05 F1 | 	add	objptr, #4
2e198     F2 FA 01 FB | 	rdlong	result1, objptr
2e19c     04 E4 85 F1 | 	sub	objptr, #4
2e1a0     10 FA 55 F2 | 	cmps	result1, #16 wc
2e1a4     2C 00 90 3D |  if_ae	jmp	#LR__4730
2e1a8     F2 FA 01 FB | 	rdlong	result1, objptr
2e1ac     04 E4 05 F1 | 	add	objptr, #4
2e1b0     F2 00 02 FB | 	rdlong	_var01, objptr
2e1b4     FD 00 02 F1 | 	add	_var01, result1
2e1b8     00 13 42 FC | 	wrbyte	arg01, _var01
2e1bc     F2 FA 01 FB | 	rdlong	result1, objptr
2e1c0     01 FA 05 F1 | 	add	result1, #1
2e1c4     F2 FA 61 FC | 	wrlong	result1, objptr
2e1c8     04 E4 85 F1 | 	sub	objptr, #4
2e1cc                 | ' 			p(i) = c
2e1cc                 | ' 			i = i+1
2e1cc                 | ' 			return 1
2e1cc     01 FA 05 F6 | 	mov	result1, #1
2e1d0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2e1d4                 | LR__4730
2e1d4                 | ' 			return -1
2e1d4     01 FA 65 F6 | 	neg	result1, #1
2e1d8                 | ___strs_cl_pfunc_ret
2e1d8     2D 00 64 FD | 	ret
2e1dc                 | 
2e1dc                 | __struct__s_vfs_file_t_putchar
2e1dc     04 4A 05 F6 | 	mov	COUNT_, #4
2e1e0     A8 00 A0 FD | 	call	#pushregs_
2e1e4     1C E4 05 F1 | 	add	objptr, #28
2e1e8     F2 1E 0A FB | 	rdlong	local01, objptr wz
2e1ec     1C E4 85 F1 | 	sub	objptr, #28
2e1f0     00 FA 05 A6 |  if_e	mov	result1, #0
2e1f4     48 00 90 AD |  if_e	jmp	#LR__4740
2e1f8     1C E4 05 F1 | 	add	objptr, #28
2e1fc     F2 20 02 FB | 	rdlong	local02, objptr
2e200     10 23 02 F6 | 	mov	local03, local02
2e204     1C E4 85 F1 | 	sub	objptr, #28
2e208     13 22 46 F7 | 	zerox	local03, #19
2e20c     14 20 46 F0 | 	shr	local02, #20
2e210     02 20 66 F0 | 	shl	local02, #2
2e214     ED 20 02 F1 | 	add	local02, __methods__
2e218     10 21 02 FB | 	rdlong	local02, local02
2e21c     F2 14 02 F6 | 	mov	arg02, objptr
2e220     F2 24 02 F6 | 	mov	local04, objptr
2e224     11 E5 01 F6 | 	mov	objptr, local03
2e228     2D 20 62 FD | 	call	local02
2e22c     12 E5 01 F6 | 	mov	objptr, local04
2e230                 | '     return (i < 0) ? 0 : 1;
2e230     00 FA 55 F2 | 	cmps	result1, #0 wc
2e234     00 1E 06 C6 |  if_b	mov	local01, #0
2e238     01 1E 06 36 |  if_ae	mov	local01, #1
2e23c     0F FB 01 F6 | 	mov	result1, local01
2e240                 | LR__4740
2e240     A7 F0 03 F6 | 	mov	ptra, fp
2e244     B2 00 A0 FD | 	call	#popregs_
2e248                 | __struct__s_vfs_file_t_putchar_ret
2e248     2D 00 64 FD | 	ret
2e24c                 | 
2e24c                 | __struct__s_vfs_file_t_getchar
2e24c     03 4A 05 F6 | 	mov	COUNT_, #3
2e250     A8 00 A0 FD | 	call	#pushregs_
2e254     20 E4 05 F1 | 	add	objptr, #32
2e258     F2 12 0A FB | 	rdlong	arg01, objptr wz
2e25c     20 E4 85 F1 | 	sub	objptr, #32
2e260     01 FA 65 A6 |  if_e	neg	result1, #1
2e264     38 00 90 AD |  if_e	jmp	#LR__4750
2e268                 | '     return getcf(__this);
2e268     20 E4 05 F1 | 	add	objptr, #32
2e26c     F2 1E 02 FB | 	rdlong	local01, objptr
2e270     0F 21 02 F6 | 	mov	local02, local01
2e274     20 E4 85 F1 | 	sub	objptr, #32
2e278     13 20 46 F7 | 	zerox	local02, #19
2e27c     14 1E 46 F0 | 	shr	local01, #20
2e280     02 1E 66 F0 | 	shl	local01, #2
2e284     ED 1E 02 F1 | 	add	local01, __methods__
2e288     0F 1F 02 FB | 	rdlong	local01, local01
2e28c     F2 12 02 F6 | 	mov	arg01, objptr
2e290     F2 22 02 F6 | 	mov	local03, objptr
2e294     10 E5 01 F6 | 	mov	objptr, local02
2e298     2D 1E 62 FD | 	call	local01
2e29c     11 E5 01 F6 | 	mov	objptr, local03
2e2a0                 | LR__4750
2e2a0     A7 F0 03 F6 | 	mov	ptra, fp
2e2a4     B2 00 A0 FD | 	call	#popregs_
2e2a8                 | __struct__s_vfs_file_t_getchar_ret
2e2a8     2D 00 64 FD | 	ret
2e2ac                 | 
2e2ac                 | __struct___bas_wrap_sender_tx
2e2ac     03 4A 05 F6 | 	mov	COUNT_, #3
2e2b0     A8 00 A0 FD | 	call	#pushregs_
2e2b4     F2 1E 02 FB | 	rdlong	local01, objptr
2e2b8     0F 21 02 F6 | 	mov	local02, local01
2e2bc     13 1E 46 F7 | 	zerox	local01, #19
2e2c0     14 20 46 F0 | 	shr	local02, #20
2e2c4     02 20 66 F0 | 	shl	local02, #2
2e2c8     ED 20 02 F1 | 	add	local02, __methods__
2e2cc     10 21 02 FB | 	rdlong	local02, local02
2e2d0     F2 22 02 F6 | 	mov	local03, objptr
2e2d4     0F E5 01 F6 | 	mov	objptr, local01
2e2d8     2D 20 62 FD | 	call	local02
2e2dc     11 E5 01 F6 | 	mov	objptr, local03
2e2e0     01 FA 05 F6 | 	mov	result1, #1
2e2e4     A7 F0 03 F6 | 	mov	ptra, fp
2e2e8     B2 00 A0 FD | 	call	#popregs_
2e2ec                 | __struct___bas_wrap_sender_tx_ret
2e2ec     2D 00 64 FD | 	ret
2e2f0                 | 
2e2f0                 | __struct___bas_wrap_sender_rx
2e2f0     03 4A 05 F6 | 	mov	COUNT_, #3
2e2f4     A8 00 A0 FD | 	call	#pushregs_
2e2f8     04 E4 05 F1 | 	add	objptr, #4
2e2fc     F2 1E 02 FB | 	rdlong	local01, objptr
2e300     0F 21 02 F6 | 	mov	local02, local01
2e304     04 E4 85 F1 | 	sub	objptr, #4
2e308     13 20 46 F7 | 	zerox	local02, #19
2e30c     14 1E 46 F0 | 	shr	local01, #20
2e310     02 1E 66 F0 | 	shl	local01, #2
2e314     ED 1E 02 F1 | 	add	local01, __methods__
2e318     0F 1F 02 FB | 	rdlong	local01, local01
2e31c     F2 22 02 F6 | 	mov	local03, objptr
2e320     10 E5 01 F6 | 	mov	objptr, local02
2e324     2D 1E 62 FD | 	call	local01
2e328     11 E5 01 F6 | 	mov	objptr, local03
2e32c     A7 F0 03 F6 | 	mov	ptra, fp
2e330     B2 00 A0 FD | 	call	#popregs_
2e334                 | __struct___bas_wrap_sender_rx_ret
2e334     2D 00 64 FD | 	ret
2e338                 | 
2e338                 | __struct___bas_wrap_sender_close
2e338     03 4A 05 F6 | 	mov	COUNT_, #3
2e33c     A8 00 A0 FD | 	call	#pushregs_
2e340     08 E4 05 F1 | 	add	objptr, #8
2e344     F2 1E 02 FB | 	rdlong	local01, objptr
2e348     0F 21 02 F6 | 	mov	local02, local01
2e34c     08 E4 85 F1 | 	sub	objptr, #8
2e350     13 20 46 F7 | 	zerox	local02, #19
2e354     14 1E 46 F0 | 	shr	local01, #20
2e358     02 1E 66 F0 | 	shl	local01, #2
2e35c     ED 1E 02 F1 | 	add	local01, __methods__
2e360     0F 1F 02 FB | 	rdlong	local01, local01
2e364     F2 22 02 F6 | 	mov	local03, objptr
2e368     10 E5 01 F6 | 	mov	objptr, local02
2e36c     2D 1E 62 FD | 	call	local01
2e370     11 E5 01 F6 | 	mov	objptr, local03
2e374     A7 F0 03 F6 | 	mov	ptra, fp
2e378     B2 00 A0 FD | 	call	#popregs_
2e37c                 | __struct___bas_wrap_sender_close_ret
2e37c     2D 00 64 FD | 	ret
2e380                 | 
2e380                 | LR__4760
2e380     2F          | 	byte	"/"
2e381     00          | 	byte	0
2e382                 | LR__4761
2e382     69 6E 66    | 	byte	"inf"
2e385     00          | 	byte	0
2e386                 | LR__4762
2e386     6E 61 6E    | 	byte	"nan"
2e389     00          | 	byte	0
2e38a                 | LR__4763
2e38a                 | 	byte	
2e38a     00          | 	byte	0
2e38b                 | LR__4764
2e38b                 | 	byte	
2e38b     00          | 	byte	0
2e38c                 | LR__4765
2e38c                 | 	byte	
2e38c     00          | 	byte	0
2e38d                 | LR__4766
2e38d                 | 	byte	
2e38d     00          | 	byte	0
2e38e                 | LR__4767
2e38e                 | 	byte	
2e38e     00          | 	byte	0
2e38f                 | LR__4768
2e38f                 | 	byte	
2e38f     00          | 	byte	0
2e390                 | LR__4769
2e390                 | 	byte	
2e390     00          | 	byte	0
2e391                 | LR__4770
2e391                 | 	byte	
2e391     00          | 	byte	0
2e392                 | LR__4771
2e392     00          | 	byte	0
2e393     00          | 	byte	0
2e394                 | LR__4772
2e394     00          | 	byte	0
2e395     00          | 	byte	0
2e396                 | LR__4773
2e396     00          | 	byte	0
2e397     00          | 	byte	0
2e398                 | LR__4774
2e398     20 21 21 21 
2e39c     20 63 6F 72 
2e3a0     72 75 70 74 
2e3a4     65 64 20 68 
2e3a8     65 61 70 3F 
2e3ac     3F 3F 20 21 
2e3b0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2e3b3     00          | 	byte	0
2e3b4                 | LR__4775
2e3b4     20 21 21 21 
2e3b8     20 6F 75 74 
2e3bc     20 6F 66 20 
2e3c0     68 65 61 70 
2e3c4     20 6D 65 6D 
2e3c8     6F 72 79 20 
2e3cc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2e3d0     00          | 	byte	0
2e3d1                 | LR__4776
2e3d1     20 21 21 21 
2e3d5     20 63 6F 72 
2e3d9     72 75 70 74 
2e3dd     65 64 20 68 
2e3e1     65 61 70 20 
2e3e5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2e3e9     00          | 	byte	0
2e3ea                 | LR__4777
2e3ea     00          | 	byte	0
2e3eb     00          | 	byte	0
2e3ec                 | LR__4778
2e3ec     2E          | 	byte	"."
2e3ed     00          | 	byte	0
2e3ee                 | LR__4779
2e3ee     00          | 	byte	0
2e3ef     00          | 	byte	0
2e3f0                 | LR__4780
2e3f0     00          | 	byte	0
2e3f1     00          | 	byte	0
2e3f2                 | LR__4781
2e3f2     00          | 	byte	0
2e3f3     00          | 	byte	0
2e3f4                 | LR__4782
2e3f4     2A 3A 3C 3E 
2e3f8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2e3fc     00          | 	byte	0
2e3fd                 | LR__4783
2e3fd     2B 2C 3B 3D 
2e401     5B 5D       | 	byte	"+,;=[]"
2e403     00          | 	byte	0
2e404                 | LR__4784
2e404     46 41 54 33 
2e408     32 20 20 20 | 	byte	"FAT32   "
2e40c     00          | 	byte	0
2e40d                 | LR__4785
2e40d     54 5A       | 	byte	"TZ"
2e40f     00          | 	byte	0
2e410                 | LR__4786
2e410     00          | 	byte	0
2e411     00          | 	byte	0
2e412                 | LR__4787
2e412                 | 	byte	
2e412     00          | 	byte	0
2e413                 | LR__4788
2e413                 | 	byte	
2e413     00          | 	byte	0
2e414                 | LR__4789
2e414     22          | 	byte	34
2e415     00          | 	byte	0
2e416                 | LR__4790
2e416     22          | 	byte	34
2e417     00          | 	byte	0
2e418                 | LR__4791
2e418     3A          | 	byte	":"
2e419     00          | 	byte	0
2e41a                 | LR__4792
2e41a                 | 	byte	
2e41a     00          | 	byte	0
2e41b                 | LR__4793
2e41b                 | 	byte	
2e41b     00          | 	byte	0
2e41c                 | LR__4794
2e41c                 | 	byte	
2e41c     00          | 	byte	0
2e41d                 | LR__4795
2e41d                 | 	byte	
2e41d     00          | 	byte	0
2e41e                 | LR__4796
2e41e                 | 	byte	
2e41e     00          | 	byte	0
2e41f                 | LR__4797
2e41f                 | 	byte	
2e41f     00          | 	byte	0
2e420                 | LR__4798
2e420                 | 	byte	
2e420     00          | 	byte	0
2e421                 | LR__4799
2e421     22          | 	byte	34
2e422     00          | 	byte	0
2e423                 | LR__4800
2e423     22          | 	byte	34
2e424     00          | 	byte	0
2e425                 | LR__4801
2e425     22          | 	byte	34
2e426     00          | 	byte	0
2e427                 | LR__4802
2e427     22          | 	byte	34
2e428     00          | 	byte	0
2e429                 | LR__4803
2e429     22          | 	byte	34
2e42a     00          | 	byte	0
2e42b                 | LR__4804
2e42b     3E          | 	byte	">"
2e42c     00          | 	byte	0
2e42d                 | LR__4805
2e42d     3C          | 	byte	"<"
2e42e     00          | 	byte	0
2e42f                 | LR__4806
2e42f     2B          | 	byte	"+"
2e430     00          | 	byte	0
2e431                 | LR__4807
2e431     2D          | 	byte	"-"
2e432     00          | 	byte	0
2e433                 | LR__4808
2e433     2A          | 	byte	"*"
2e434     00          | 	byte	0
2e435                 | LR__4809
2e435     2F          | 	byte	"/"
2e436     00          | 	byte	0
2e437                 | LR__4810
2e437     5E          | 	byte	"^"
2e438     00          | 	byte	0
2e439                 | LR__4811
2e439     3D          | 	byte	"="
2e43a     00          | 	byte	0
2e43b                 | LR__4812
2e43b     2B          | 	byte	"+"
2e43c     00          | 	byte	0
2e43d                 | LR__4813
2e43d     2B          | 	byte	"+"
2e43e     00          | 	byte	0
2e43f                 | LR__4814
2e43f     2D          | 	byte	"-"
2e440     00          | 	byte	0
2e441                 | LR__4815
2e441     2D          | 	byte	"-"
2e442     00          | 	byte	0
2e443                 | LR__4816
2e443     3C          | 	byte	"<"
2e444     00          | 	byte	0
2e445                 | LR__4817
2e445     3E          | 	byte	">"
2e446     00          | 	byte	0
2e447                 | LR__4818
2e447     22          | 	byte	34
2e448     00          | 	byte	0
2e449                 | LR__4819
2e449     22          | 	byte	34
2e44a     00          | 	byte	0
2e44b                 | LR__4820
2e44b     2E          | 	byte	"."
2e44c     00          | 	byte	0
2e44d                 | LR__4821
2e44d     3F          | 	byte	"?"
2e44e     00          | 	byte	0
2e44f                 | LR__4822
2e44f     3F          | 	byte	"?"
2e450     00          | 	byte	0
2e451                 | LR__4823
2e451     6D 6F 75 73 
2e455     65          | 	byte	"mouse"
2e456     00          | 	byte	0
2e457                 | LR__4824
2e457     63 75 72 73 
2e45b     6F 72       | 	byte	"cursor"
2e45d     00          | 	byte	0
2e45e                 | LR__4825
2e45e     63 6C 69 63 
2e462     6B          | 	byte	"click"
2e463     00          | 	byte	0
2e464                 | LR__4826
2e464     6F 6E       | 	byte	"on"
2e466     00          | 	byte	0
2e467                 | LR__4827
2e467     31          | 	byte	"1"
2e468     00          | 	byte	0
2e469                 | LR__4828
2e469     6F 66 66    | 	byte	"off"
2e46c     00          | 	byte	0
2e46d                 | LR__4829
2e46d     30          | 	byte	"0"
2e46e     00          | 	byte	0
2e46f                 | LR__4830
2e46f     6D 6F 64 65 | 	byte	"mode"
2e473     00          | 	byte	0
2e474                 | LR__4831
2e474     6D 2E       | 	byte	"m."
2e476     00          | 	byte	0
2e477                 | LR__4832
2e477     61 74 61 72 
2e47b     69          | 	byte	"atari"
2e47c     00          | 	byte	0
2e47d                 | LR__4833
2e47d     30          | 	byte	"0"
2e47e     00          | 	byte	0
2e47f                 | LR__4834
2e47f     70 63 5F 61 
2e483     6D 62 65 72 | 	byte	"pc_amber"
2e487     00          | 	byte	0
2e488                 | LR__4835
2e488     31          | 	byte	"1"
2e489     00          | 	byte	0
2e48a                 | LR__4836
2e48a     70 63 5F 67 
2e48e     72 65 65 6E | 	byte	"pc_green"
2e492     00          | 	byte	0
2e493                 | LR__4837
2e493     32          | 	byte	"2"
2e494     00          | 	byte	0
2e495                 | LR__4838
2e495     70 63 5F 77 
2e499     68 69 74 65 | 	byte	"pc_white"
2e49d     00          | 	byte	0
2e49e                 | LR__4839
2e49e     33          | 	byte	"3"
2e49f     00          | 	byte	0
2e4a0                 | LR__4840
2e4a0     73 74       | 	byte	"st"
2e4a2     00          | 	byte	0
2e4a3                 | LR__4841
2e4a3     34          | 	byte	"4"
2e4a4     00          | 	byte	0
2e4a5                 | LR__4842
2e4a5                 | 	byte	
2e4a5     00          | 	byte	0
2e4a6                 | LR__4843
2e4a6     6C 6F 61 64 | 	byte	"load"
2e4aa     00          | 	byte	0
2e4ab                 | LR__4844
2e4ab     73 61 76 65 | 	byte	"save"
2e4af     00          | 	byte	0
2e4b0                 | LR__4845
2e4b0     62 72 75 6E | 	byte	"brun"
2e4b4     00          | 	byte	0
2e4b5                 | LR__4846
2e4b5     72 75 6E    | 	byte	"run"
2e4b8     00          | 	byte	0
2e4b9                 | LR__4847
2e4b9     6C 6F 2E    | 	byte	"lo."
2e4bc     00          | 	byte	0
2e4bd                 | LR__4848
2e4bd     73 2E       | 	byte	"s."
2e4bf     00          | 	byte	0
2e4c0                 | LR__4849
2e4c0     62 72 2E    | 	byte	"br."
2e4c3     00          | 	byte	0
2e4c4                 | LR__4850
2e4c4                 | 	byte	
2e4c4     00          | 	byte	0
2e4c5                 | LR__4851
2e4c5                 | 	byte	
2e4c5     00          | 	byte	0
2e4c6                 | LR__4852
2e4c6                 | 	byte	
2e4c6     00          | 	byte	0
2e4c7                 | LR__4853
2e4c7                 | 	byte	
2e4c7     00          | 	byte	0
2e4c8                 | LR__4854
2e4c8     20 55 73 65 
2e4cc     72 20 66 75 
2e4d0     6E 63 74 69 
2e4d4     6F 6E 73 20 
2e4d8     61 6E 64 20 
2e4dc     61 72 72 61 
2e4e0     79 73 20 6E 
2e4e4     6F 74 20 79 
2e4e8     65 74 20 69 
2e4ec     6D 70 6C 65 
2e4f0     6D 65 6E 74 
2e4f4     65 64       | 	byte	" User functions and arrays not yet implemented"
2e4f6     00          | 	byte	0
2e4f7                 | LR__4855
2e4f7                 | 	byte	
2e4f7     00          | 	byte	0
2e4f8                 | LR__4856
2e4f8                 | 	byte	
2e4f8     00          | 	byte	0
2e4f9                 | LR__4857
2e4f9     52 65 61 64 
2e4fd     79          | 	byte	"Ready"
2e4fe     00          | 	byte	0
2e4ff                 | LR__4858
2e4ff     2B          | 	byte	"+"
2e500     00          | 	byte	0
2e501                 | LR__4859
2e501     2D          | 	byte	"-"
2e502     00          | 	byte	0
2e503                 | LR__4860
2e503     6F 72       | 	byte	"or"
2e505     00          | 	byte	0
2e506                 | LR__4861
2e506     78 6F 72    | 	byte	"xor"
2e509     00          | 	byte	0
2e50a                 | LR__4862
2e50a     2A          | 	byte	"*"
2e50b     00          | 	byte	0
2e50c                 | LR__4863
2e50c     2F          | 	byte	"/"
2e50d     00          | 	byte	0
2e50e                 | LR__4864
2e50e     61 6E 64    | 	byte	"and"
2e511     00          | 	byte	0
2e512                 | LR__4865
2e512     64 69 76    | 	byte	"div"
2e515     00          | 	byte	0
2e516                 | LR__4866
2e516     6D 6F 64    | 	byte	"mod"
2e519     00          | 	byte	0
2e51a                 | LR__4867
2e51a     73 68 6C    | 	byte	"shl"
2e51d     00          | 	byte	0
2e51e                 | LR__4868
2e51e     73 68 72    | 	byte	"shr"
2e521     00          | 	byte	0
2e522                 | LR__4869
2e522     5E          | 	byte	"^"
2e523     00          | 	byte	0
2e524                 | LR__4870
2e524     6E 6F 74    | 	byte	"not"
2e527     00          | 	byte	0
2e528                 | LR__4871
2e528     40          | 	byte	"@"
2e529     00          | 	byte	0
2e52a                 | LR__4872
2e52a     3D          | 	byte	"="
2e52b     00          | 	byte	0
2e52c                 | LR__4873
2e52c     3E 3D       | 	byte	">="
2e52e     00          | 	byte	0
2e52f                 | LR__4874
2e52f     3C 3D       | 	byte	"<="
2e531     00          | 	byte	0
2e532                 | LR__4875
2e532     3C          | 	byte	"<"
2e533     00          | 	byte	0
2e534                 | LR__4876
2e534     3E          | 	byte	">"
2e535     00          | 	byte	0
2e536                 | LR__4877
2e536     3C 3E       | 	byte	"<>"
2e538     00          | 	byte	0
2e539                 | LR__4878
2e539     2B 2B       | 	byte	"++"
2e53b     00          | 	byte	0
2e53c                 | LR__4879
2e53c     2D 2D       | 	byte	"--"
2e53e     00          | 	byte	0
2e53f                 | LR__4880
2e53f     23          | 	byte	"#"
2e540     00          | 	byte	0
2e541                 | LR__4881
2e541     23          | 	byte	"#"
2e542     00          | 	byte	0
2e543                 | LR__4882
2e543     2D          | 	byte	"-"
2e544     00          | 	byte	0
2e545                 | LR__4883
2e545     30          | 	byte	"0"
2e546     00          | 	byte	0
2e547                 | LR__4884
2e547     63          | 	byte	"c"
2e548     00          | 	byte	0
2e549                 | LR__4885
2e549     63 23       | 	byte	"c#"
2e54b     00          | 	byte	0
2e54c                 | LR__4886
2e54c     64          | 	byte	"d"
2e54d     00          | 	byte	0
2e54e                 | LR__4887
2e54e     64 23       | 	byte	"d#"
2e550     00          | 	byte	0
2e551                 | LR__4888
2e551     65          | 	byte	"e"
2e552     00          | 	byte	0
2e553                 | LR__4889
2e553     66          | 	byte	"f"
2e554     00          | 	byte	0
2e555                 | LR__4890
2e555     66 23       | 	byte	"f#"
2e557     00          | 	byte	0
2e558                 | LR__4891
2e558     67          | 	byte	"g"
2e559     00          | 	byte	0
2e55a                 | LR__4892
2e55a     67 23       | 	byte	"g#"
2e55c     00          | 	byte	0
2e55d                 | LR__4893
2e55d     61          | 	byte	"a"
2e55e     00          | 	byte	0
2e55f                 | LR__4894
2e55f     61 23       | 	byte	"a#"
2e561     00          | 	byte	0
2e562                 | LR__4895
2e562     68          | 	byte	"h"
2e563     00          | 	byte	0
2e564                 | LR__4896
2e564     62          | 	byte	"b"
2e565     00          | 	byte	0
2e566                 | LR__4897
2e566     2B          | 	byte	"+"
2e567     00          | 	byte	0
2e568                 | LR__4898
2e568     2D          | 	byte	"-"
2e569     00          | 	byte	0
2e56a                 | LR__4899
2e56a     3D          | 	byte	"="
2e56b     00          | 	byte	0
2e56c                 | LR__4900
2e56c     2C          | 	byte	","
2e56d     00          | 	byte	0
2e56e                 | LR__4901
2e56e     2A          | 	byte	"*"
2e56f     00          | 	byte	0
2e570                 | LR__4902
2e570     2F          | 	byte	"/"
2e571     00          | 	byte	0
2e572                 | LR__4903
2e572     3B          | 	byte	";"
2e573     00          | 	byte	0
2e574                 | LR__4904
2e574     22          | 	byte	34
2e575     00          | 	byte	0
2e576                 | LR__4905
2e576     5E          | 	byte	"^"
2e577     00          | 	byte	0
2e578                 | LR__4906
2e578     29          | 	byte	")"
2e579     00          | 	byte	0
2e57a                 | LR__4907
2e57a     28          | 	byte	"("
2e57b     00          | 	byte	0
2e57c                 | LR__4908
2e57c     3A          | 	byte	":"
2e57d     00          | 	byte	0
2e57e                 | LR__4909
2e57e     20          | 	byte	" "
2e57f     00          | 	byte	0
2e580                 | LR__4910
2e580     3E          | 	byte	">"
2e581     00          | 	byte	0
2e582                 | LR__4911
2e582     3C          | 	byte	"<"
2e583     00          | 	byte	0
2e584                 | LR__4912
2e584     3D          | 	byte	"="
2e585     00          | 	byte	0
2e586                 | LR__4913
2e586     62 65 65 70 | 	byte	"beep"
2e58a     00          | 	byte	0
2e58b                 | LR__4914
2e58b     62 2E       | 	byte	"b."
2e58d     00          | 	byte	0
2e58e                 | LR__4915
2e58e     62 6F 78    | 	byte	"box"
2e591     00          | 	byte	0
2e592                 | LR__4916
2e592     62 72 75 6E | 	byte	"brun"
2e596     00          | 	byte	0
2e597                 | LR__4917
2e597     62 72 2E    | 	byte	"br."
2e59a     00          | 	byte	0
2e59b                 | LR__4918
2e59b     63 69 72 63 
2e59f     6C 65       | 	byte	"circle"
2e5a1     00          | 	byte	0
2e5a2                 | LR__4919
2e5a2     63 69 2E    | 	byte	"ci."
2e5a5     00          | 	byte	0
2e5a6                 | LR__4920
2e5a6     63 6C 69 63 
2e5aa     6B          | 	byte	"click"
2e5ab     00          | 	byte	0
2e5ac                 | LR__4921
2e5ac     63 6C 73    | 	byte	"cls"
2e5af     00          | 	byte	0
2e5b0                 | LR__4922
2e5b0     63 6F 6C 6F 
2e5b4     72          | 	byte	"color"
2e5b5     00          | 	byte	0
2e5b6                 | LR__4923
2e5b6     63 2E       | 	byte	"c."
2e5b8     00          | 	byte	0
2e5b9                 | LR__4924
2e5b9     63 73 61 76 
2e5bd     65          | 	byte	"csave"
2e5be     00          | 	byte	0
2e5bf                 | LR__4925
2e5bf     63 73 2E    | 	byte	"cs."
2e5c2     00          | 	byte	0
2e5c3                 | LR__4926
2e5c3     63 75 72 73 
2e5c7     6F 72       | 	byte	"cursor"
2e5c9     00          | 	byte	0
2e5ca                 | LR__4927
2e5ca     64 65 66 73 
2e5ce     6E 64       | 	byte	"defsnd"
2e5d0     00          | 	byte	0
2e5d1                 | LR__4928
2e5d1     64 65 66 65 
2e5d5     6E 76       | 	byte	"defenv"
2e5d7     00          | 	byte	0
2e5d8                 | LR__4929
2e5d8     64 65 66 73 
2e5dc     70 72 69 74 
2e5e0     65          | 	byte	"defsprite"
2e5e1     00          | 	byte	0
2e5e2                 | LR__4930
2e5e2     64 73 2E    | 	byte	"ds."
2e5e5     00          | 	byte	0
2e5e6                 | LR__4931
2e5e6     64 65 67    | 	byte	"deg"
2e5e9     00          | 	byte	0
2e5ea                 | LR__4932
2e5ea     64 69 6D    | 	byte	"dim"
2e5ed     00          | 	byte	0
2e5ee                 | LR__4933
2e5ee     64 69 72    | 	byte	"dir"
2e5f1     00          | 	byte	0
2e5f2                 | LR__4934
2e5f2     64 70 6F 6B 
2e5f6     65          | 	byte	"dpoke"
2e5f7     00          | 	byte	0
2e5f8                 | LR__4935
2e5f8     64 72 61 77 | 	byte	"draw"
2e5fc     00          | 	byte	0
2e5fd                 | LR__4936
2e5fd     64 72 2E    | 	byte	"dr."
2e600     00          | 	byte	0
2e601                 | LR__4937
2e601     65 6C 73 65 | 	byte	"else"
2e605     00          | 	byte	0
2e606                 | LR__4938
2e606     65 6E 64    | 	byte	"end"
2e609     00          | 	byte	0
2e60a                 | LR__4939
2e60a     66 63 69 72 
2e60e     63 6C 65    | 	byte	"fcircle"
2e611     00          | 	byte	0
2e612                 | LR__4940
2e612     66 63 2E    | 	byte	"fc."
2e615     00          | 	byte	0
2e616                 | LR__4941
2e616     66 69 6C 6C | 	byte	"fill"
2e61a     00          | 	byte	0
2e61b                 | LR__4942
2e61b     66 69 2E    | 	byte	"fi."
2e61e     00          | 	byte	0
2e61f                 | LR__4943
2e61f     66 6F 6E 74 | 	byte	"font"
2e623     00          | 	byte	0
2e624                 | LR__4944
2e624     66 6F 72    | 	byte	"for"
2e627     00          | 	byte	0
2e628                 | LR__4945
2e628     66 2E       | 	byte	"f."
2e62a     00          | 	byte	0
2e62b                 | LR__4946
2e62b     66 72 61 6D 
2e62f     65          | 	byte	"frame"
2e630     00          | 	byte	0
2e631                 | LR__4947
2e631     66 72 2E    | 	byte	"fr."
2e634     00          | 	byte	0
2e635                 | LR__4948
2e635     67 6F 73 75 
2e639     62          | 	byte	"gosub"
2e63a     00          | 	byte	0
2e63b                 | LR__4949
2e63b     67 6F 74 6F | 	byte	"goto"
2e63f     00          | 	byte	0
2e640                 | LR__4950
2e640     67 2E       | 	byte	"g."
2e642     00          | 	byte	0
2e643                 | LR__4951
2e643     69 66       | 	byte	"if"
2e645     00          | 	byte	0
2e646                 | LR__4952
2e646     69 6E 6B    | 	byte	"ink"
2e649     00          | 	byte	0
2e64a                 | LR__4953
2e64a     69 2E       | 	byte	"i."
2e64c     00          | 	byte	0
2e64d                 | LR__4954
2e64d     69 6E 74    | 	byte	"int"
2e650     00          | 	byte	0
2e651                 | LR__4955
2e651     6C 69 73 74 | 	byte	"list"
2e655     00          | 	byte	0
2e656                 | LR__4956
2e656     6C 2E       | 	byte	"l."
2e658     00          | 	byte	0
2e659                 | LR__4957
2e659     6C 6F 61 64 | 	byte	"load"
2e65d     00          | 	byte	0
2e65e                 | LR__4958
2e65e     6C 6F 2E    | 	byte	"lo."
2e661     00          | 	byte	0
2e662                 | LR__4959
2e662     6C 70 6F 6B 
2e666     65          | 	byte	"lpoke"
2e667     00          | 	byte	0
2e668                 | LR__4960
2e668     6D 6F 64 65 | 	byte	"mode"
2e66c     00          | 	byte	0
2e66d                 | LR__4961
2e66d     6D 2E       | 	byte	"m."
2e66f     00          | 	byte	0
2e670                 | LR__4962
2e670     6D 6F 75 73 
2e674     65          | 	byte	"mouse"
2e675     00          | 	byte	0
2e676                 | LR__4963
2e676     6E 65 77    | 	byte	"new"
2e679     00          | 	byte	0
2e67a                 | LR__4964
2e67a     6E 65 78 74 | 	byte	"next"
2e67e     00          | 	byte	0
2e67f                 | LR__4965
2e67f     6E 2E       | 	byte	"n."
2e681     00          | 	byte	0
2e682                 | LR__4966
2e682     70 61 70 65 
2e686     72          | 	byte	"paper"
2e687     00          | 	byte	0
2e688                 | LR__4967
2e688     70 61 2E    | 	byte	"pa."
2e68b     00          | 	byte	0
2e68c                 | LR__4968
2e68c     70 69 6E 66 
2e690     6C 6F 61 74 | 	byte	"pinfloat"
2e694     00          | 	byte	0
2e695                 | LR__4969
2e695     70 69 6E 68 
2e699     69          | 	byte	"pinhi"
2e69a     00          | 	byte	0
2e69b                 | LR__4970
2e69b     70 69 6E 6C 
2e69f     6F          | 	byte	"pinlo"
2e6a0     00          | 	byte	0
2e6a1                 | LR__4971
2e6a1     70 69 6E 73 
2e6a5     74 61 72 74 | 	byte	"pinstart"
2e6a9     00          | 	byte	0
2e6aa                 | LR__4972
2e6aa     70 69 6E 74 
2e6ae     6F 67 67 6C 
2e6b2     65          | 	byte	"pintoggle"
2e6b3     00          | 	byte	0
2e6b4                 | LR__4973
2e6b4     70 69 6E 77 
2e6b8     72 69 74 65 | 	byte	"pinwrite"
2e6bc     00          | 	byte	0
2e6bd                 | LR__4974
2e6bd     70 6C 61 79 | 	byte	"play"
2e6c1     00          | 	byte	0
2e6c2                 | LR__4975
2e6c2     70 2E       | 	byte	"p."
2e6c4     00          | 	byte	0
2e6c5                 | LR__4976
2e6c5     70 6C 6F 74 | 	byte	"plot"
2e6c9     00          | 	byte	0
2e6ca                 | LR__4977
2e6ca     70 6C 2E    | 	byte	"pl."
2e6cd     00          | 	byte	0
2e6ce                 | LR__4978
2e6ce     70 6F 6B 65 | 	byte	"poke"
2e6d2     00          | 	byte	0
2e6d3                 | LR__4979
2e6d3     70 6F 70    | 	byte	"pop"
2e6d6     00          | 	byte	0
2e6d7                 | LR__4980
2e6d7     70 6F 73 69 
2e6db     74 69 6F 6E | 	byte	"position"
2e6df     00          | 	byte	0
2e6e0                 | LR__4981
2e6e0     70 6F 73 2E | 	byte	"pos."
2e6e4     00          | 	byte	0
2e6e5                 | LR__4982
2e6e5     70 72 69 6E 
2e6e9     74          | 	byte	"print"
2e6ea     00          | 	byte	0
2e6eb                 | LR__4983
2e6eb     3F          | 	byte	"?"
2e6ec     00          | 	byte	0
2e6ed                 | LR__4984
2e6ed     72 61 64    | 	byte	"rad"
2e6f0     00          | 	byte	0
2e6f1                 | LR__4985
2e6f1     72 65 6C 65 
2e6f5     61 73 65    | 	byte	"release"
2e6f8     00          | 	byte	0
2e6f9                 | LR__4986
2e6f9     72 65 74 75 
2e6fd     72 6E       | 	byte	"return"
2e6ff     00          | 	byte	0
2e700                 | LR__4987
2e700     72 75 6E    | 	byte	"run"
2e703     00          | 	byte	0
2e704                 | LR__4988
2e704     73 61 76 65 | 	byte	"save"
2e708     00          | 	byte	0
2e709                 | LR__4989
2e709     73 2E       | 	byte	"s."
2e70b     00          | 	byte	0
2e70c                 | LR__4990
2e70c     73 65 74 64 
2e710     65 6C 61 79 | 	byte	"setdelay"
2e714     00          | 	byte	0
2e715                 | LR__4991
2e715     73 65 74 65 
2e719     6E 76       | 	byte	"setenv"
2e71b     00          | 	byte	0
2e71c                 | LR__4992
2e71c     73 65 74 6C 
2e720     65 6E       | 	byte	"setlen"
2e722     00          | 	byte	0
2e723                 | LR__4993
2e723     73 65 74 70 
2e727     61 6E       | 	byte	"setpan"
2e729     00          | 	byte	0
2e72a                 | LR__4994
2e72a     73 65 74 73 
2e72e     75 73 74 61 
2e732     69 6E       | 	byte	"setsustain"
2e734     00          | 	byte	0
2e735                 | LR__4995
2e735     73 65 74 76 
2e739     6F 6C       | 	byte	"setvol"
2e73b     00          | 	byte	0
2e73c                 | LR__4996
2e73c     73 65 74 77 
2e740     61 76 65    | 	byte	"setwave"
2e743     00          | 	byte	0
2e744                 | LR__4997
2e744     73 6F 75 6E 
2e748     64          | 	byte	"sound"
2e749     00          | 	byte	0
2e74a                 | LR__4998
2e74a     73 6F 2E    | 	byte	"so."
2e74d     00          | 	byte	0
2e74e                 | LR__4999
2e74e     73 70 72 69 
2e752     74 65       | 	byte	"sprite"
2e754     00          | 	byte	0
2e755                 | LR__5000
2e755     73 70 2E    | 	byte	"sp."
2e758     00          | 	byte	0
2e759                 | LR__5001
2e759     74 68 65 6E | 	byte	"then"
2e75d     00          | 	byte	0
2e75e                 | LR__5002
2e75e     77 61 69 74 
2e762     6D 73       | 	byte	"waitms"
2e764     00          | 	byte	0
2e765                 | LR__5003
2e765     77 61 69 74 
2e769     63 6C 6F 63 
2e76d     6B          | 	byte	"waitclock"
2e76e     00          | 	byte	0
2e76f                 | LR__5004
2e76f     77 63 2E    | 	byte	"wc."
2e772     00          | 	byte	0
2e773                 | LR__5005
2e773     77 61 69 74 
2e777     76 62 6C    | 	byte	"waitvbl"
2e77a     00          | 	byte	0
2e77b                 | LR__5006
2e77b     77 76 2E    | 	byte	"wv."
2e77e     00          | 	byte	0
2e77f                 | LR__5007
2e77f     77 78 70 69 
2e783     6E          | 	byte	"wxpin"
2e784     00          | 	byte	0
2e785                 | LR__5008
2e785     77 79 70 69 
2e789     6E          | 	byte	"wypin"
2e78a     00          | 	byte	0
2e78b                 | LR__5009
2e78b     61 62 73    | 	byte	"abs"
2e78e     00          | 	byte	0
2e78f                 | LR__5010
2e78f     61 63 6F 73 | 	byte	"acos"
2e793     00          | 	byte	0
2e794                 | LR__5011
2e794     61 64 72    | 	byte	"adr"
2e797     00          | 	byte	0
2e798                 | LR__5012
2e798     61 64 64 72 | 	byte	"addr"
2e79c     00          | 	byte	0
2e79d                 | LR__5013
2e79d     61 73 63    | 	byte	"asc"
2e7a0     00          | 	byte	0
2e7a1                 | LR__5014
2e7a1     61 73 69 6E | 	byte	"asin"
2e7a5     00          | 	byte	0
2e7a6                 | LR__5015
2e7a6     61 74 6E    | 	byte	"atn"
2e7a9     00          | 	byte	0
2e7aa                 | LR__5016
2e7aa     62 69 6E 24 | 	byte	"bin$"
2e7ae     00          | 	byte	0
2e7af                 | LR__5017
2e7af     63 68 72 24 | 	byte	"chr$"
2e7b3     00          | 	byte	0
2e7b4                 | LR__5018
2e7b4     63 6F 73    | 	byte	"cos"
2e7b7     00          | 	byte	0
2e7b8                 | LR__5019
2e7b8     64 70 65 65 
2e7bc     6B          | 	byte	"dpeek"
2e7bd     00          | 	byte	0
2e7be                 | LR__5020
2e7be     66 72 65    | 	byte	"fre"
2e7c1     00          | 	byte	0
2e7c2                 | LR__5021
2e7c2     67 65 74 70 
2e7c6     69 78 65 6C | 	byte	"getpixel"
2e7ca     00          | 	byte	0
2e7cb                 | LR__5022
2e7cb     67 65 2E    | 	byte	"ge."
2e7ce     00          | 	byte	0
2e7cf                 | LR__5023
2e7cf     67 65 74 65 
2e7d3     6E 76 73 75 
2e7d7     73 74 61 69 
2e7db     6E          | 	byte	"getenvsustain"
2e7dc     00          | 	byte	0
2e7dd                 | LR__5024
2e7dd     67 65 74 6E 
2e7e1     6F 74 65 76 
2e7e5     61 6C 75 65 | 	byte	"getnotevalue"
2e7e9     00          | 	byte	0
2e7ea                 | LR__5025
2e7ea     67 65 74 74 
2e7ee     69 6D 65    | 	byte	"gettime"
2e7f1     00          | 	byte	0
2e7f2                 | LR__5026
2e7f2     68 65 78 24 | 	byte	"hex$"
2e7f6     00          | 	byte	0
2e7f7                 | LR__5027
2e7f7     69 6E 6B 65 
2e7fb     79 24       | 	byte	"inkey$"
2e7fd     00          | 	byte	0
2e7fe                 | LR__5028
2e7fe     6C 65 66 74 
2e802     24          | 	byte	"left$"
2e803     00          | 	byte	0
2e804                 | LR__5029
2e804     6C 65 6E    | 	byte	"len"
2e807     00          | 	byte	0
2e808                 | LR__5030
2e808     6C 6F 67    | 	byte	"log"
2e80b     00          | 	byte	0
2e80c                 | LR__5031
2e80c     6C 70 65 65 
2e810     6B          | 	byte	"lpeek"
2e811     00          | 	byte	0
2e812                 | LR__5032
2e812     6D 69 64 24 | 	byte	"mid$"
2e816     00          | 	byte	0
2e817                 | LR__5033
2e817     6D 6F 75 73 
2e81b     65 6B       | 	byte	"mousek"
2e81d     00          | 	byte	0
2e81e                 | LR__5034
2e81e     6D 6F 75 73 
2e822     65 77       | 	byte	"mousew"
2e824     00          | 	byte	0
2e825                 | LR__5035
2e825     6D 6F 75 73 
2e829     65 78       | 	byte	"mousex"
2e82b     00          | 	byte	0
2e82c                 | LR__5036
2e82c     6D 6F 75 73 
2e830     65 79       | 	byte	"mousey"
2e832     00          | 	byte	0
2e833                 | LR__5037
2e833     70 65 65 6B | 	byte	"peek"
2e837     00          | 	byte	0
2e838                 | LR__5038
2e838     70 69 6E 72 
2e83c     65 61 64    | 	byte	"pinread"
2e83f     00          | 	byte	0
2e840                 | LR__5039
2e840     72 64 70 69 
2e844     6E          | 	byte	"rdpin"
2e845     00          | 	byte	0
2e846                 | LR__5040
2e846     72 69 67 68 
2e84a     74 24       | 	byte	"right$"
2e84c     00          | 	byte	0
2e84d                 | LR__5041
2e84d     72 71 70 69 
2e851     6E          | 	byte	"rqpin"
2e852     00          | 	byte	0
2e853                 | LR__5042
2e853     72 6E 64    | 	byte	"rnd"
2e856     00          | 	byte	0
2e857                 | LR__5043
2e857     73 69 6E    | 	byte	"sin"
2e85a     00          | 	byte	0
2e85b                 | LR__5044
2e85b     73 71 72    | 	byte	"sqr"
2e85e     00          | 	byte	0
2e85f                 | LR__5045
2e85f     73 74 69 63 
2e863     6B          | 	byte	"stick"
2e864     00          | 	byte	0
2e865                 | LR__5046
2e865     73 74 72 69 
2e869     67          | 	byte	"strig"
2e86a     00          | 	byte	0
2e86b                 | LR__5047
2e86b     73 74 72 24 | 	byte	"str$"
2e86f     00          | 	byte	0
2e870                 | LR__5048
2e870     74 61 6E    | 	byte	"tan"
2e873     00          | 	byte	0
2e874                 | LR__5049
2e874     76 61 6C    | 	byte	"val"
2e877     00          | 	byte	0
2e878                 | LR__5050
2e878     76 61 72 70 
2e87c     74 72       | 	byte	"varptr"
2e87e     00          | 	byte	0
2e87f                 | LR__5051
2e87f     61          | 	byte	"a"
2e880     00          | 	byte	0
2e881                 | LR__5052
2e881     7A          | 	byte	"z"
2e882     00          | 	byte	0
2e883                 | LR__5053
2e883     5F          | 	byte	"_"
2e884     00          | 	byte	0
2e885                 | LR__5054
2e885     61          | 	byte	"a"
2e886     00          | 	byte	0
2e887                 | LR__5055
2e887     7A          | 	byte	"z"
2e888     00          | 	byte	0
2e889                 | LR__5056
2e889     30          | 	byte	"0"
2e88a     00          | 	byte	0
2e88b                 | LR__5057
2e88b     39          | 	byte	"9"
2e88c     00          | 	byte	0
2e88d                 | LR__5058
2e88d     5F          | 	byte	"_"
2e88e     00          | 	byte	0
2e88f                 | LR__5059
2e88f     2E          | 	byte	"."
2e890     00          | 	byte	0
2e891                 | LR__5060
2e891     61          | 	byte	"a"
2e892     00          | 	byte	0
2e893                 | LR__5061
2e893     7A          | 	byte	"z"
2e894     00          | 	byte	0
2e895                 | LR__5062
2e895     30          | 	byte	"0"
2e896     00          | 	byte	0
2e897                 | LR__5063
2e897     39          | 	byte	"9"
2e898     00          | 	byte	0
2e899                 | LR__5064
2e899     5F          | 	byte	"_"
2e89a     00          | 	byte	0
2e89b                 | LR__5065
2e89b     24          | 	byte	"$"
2e89c     00          | 	byte	0
2e89d                 | LR__5066
2e89d     25          | 	byte	"%"
2e89e     00          | 	byte	0
2e89f                 | LR__5067
2e89f     21          | 	byte	"!"
2e8a0     00          | 	byte	0
2e8a1                 | LR__5068
2e8a1     30          | 	byte	"0"
2e8a2     00          | 	byte	0
2e8a3                 | LR__5069
2e8a3     39          | 	byte	"9"
2e8a4     00          | 	byte	0
2e8a5                 | LR__5070
2e8a5     2E          | 	byte	"."
2e8a6     00          | 	byte	0
2e8a7                 | LR__5071
2e8a7     24          | 	byte	"$"
2e8a8     00          | 	byte	0
2e8a9                 | LR__5072
2e8a9     25          | 	byte	"%"
2e8aa     00          | 	byte	0
2e8ab                 | LR__5073
2e8ab     2D          | 	byte	"-"
2e8ac     00          | 	byte	0
2e8ad                 | LR__5074
2e8ad     2E          | 	byte	"."
2e8ae     00          | 	byte	0
2e8af                 | LR__5075
2e8af     30          | 	byte	"0"
2e8b0     00          | 	byte	0
2e8b1                 | LR__5076
2e8b1     39          | 	byte	"9"
2e8b2     00          | 	byte	0
2e8b3                 | LR__5077
2e8b3     5F          | 	byte	"_"
2e8b4     00          | 	byte	0
2e8b5                 | LR__5078
2e8b5     2E          | 	byte	"."
2e8b6     00          | 	byte	0
2e8b7                 | LR__5079
2e8b7     45          | 	byte	"E"
2e8b8     00          | 	byte	0
2e8b9                 | LR__5080
2e8b9     65          | 	byte	"e"
2e8ba     00          | 	byte	0
2e8bb                 | LR__5081
2e8bb     2D          | 	byte	"-"
2e8bc     00          | 	byte	0
2e8bd                 | LR__5082
2e8bd     2D          | 	byte	"-"
2e8be     00          | 	byte	0
2e8bf                 | LR__5083
2e8bf     65          | 	byte	"e"
2e8c0     00          | 	byte	0
2e8c1                 | LR__5084
2e8c1     2E          | 	byte	"."
2e8c2     00          | 	byte	0
2e8c3                 | LR__5085
2e8c3     45          | 	byte	"E"
2e8c4     00          | 	byte	0
2e8c5                 | LR__5086
2e8c5     65          | 	byte	"e"
2e8c6     00          | 	byte	0
2e8c7                 | LR__5087
2e8c7     30          | 	byte	"0"
2e8c8     00          | 	byte	0
2e8c9                 | LR__5088
2e8c9     39          | 	byte	"9"
2e8ca     00          | 	byte	0
2e8cb                 | LR__5089
2e8cb     24          | 	byte	"$"
2e8cc     00          | 	byte	0
2e8cd                 | LR__5090
2e8cd     25          | 	byte	"%"
2e8ce     00          | 	byte	0
2e8cf                 | LR__5091
2e8cf     2D          | 	byte	"-"
2e8d0     00          | 	byte	0
2e8d1                 | LR__5092
2e8d1     30          | 	byte	"0"
2e8d2     00          | 	byte	0
2e8d3                 | LR__5093
2e8d3     39          | 	byte	"9"
2e8d4     00          | 	byte	0
2e8d5                 | LR__5094
2e8d5     5F          | 	byte	"_"
2e8d6     00          | 	byte	0
2e8d7                 | LR__5095
2e8d7     30          | 	byte	"0"
2e8d8     00          | 	byte	0
2e8d9                 | LR__5096
2e8d9     39          | 	byte	"9"
2e8da     00          | 	byte	0
2e8db                 | LR__5097
2e8db     5F          | 	byte	"_"
2e8dc     00          | 	byte	0
2e8dd                 | LR__5098
2e8dd     22          | 	byte	34
2e8de     00          | 	byte	0
2e8df                 | LR__5099
2e8df     22          | 	byte	34
2e8e0     00          | 	byte	0
2e8e1                 | LR__5100
2e8e1     44 69 6D 3A 
2e8e5     20 61 74 20 
2e8e9     6C 69 6E 65 
2e8ed     20          | 	byte	"Dim: at line "
2e8ee     00          | 	byte	0
2e8ef                 | LR__5101
2e8ef     3A 20 77 61 
2e8f3     72 6E 69 6E 
2e8f7     67 3A 20 74 
2e8fb     68 65 20 76 
2e8ff     61 72 69 61 
2e903     62 6C 65 20 
2e907     65 78 69 73 
2e90b     74 65 64 2E | 	byte	": warning: the variable existed."
2e90f     00          | 	byte	0
2e910                 | LR__5102
2e910     28          | 	byte	"("
2e911     00          | 	byte	0
2e912                 | LR__5103
2e912     61 73       | 	byte	"as"
2e914     00          | 	byte	0
2e915                 | LR__5104
2e915     61 73       | 	byte	"as"
2e917     00          | 	byte	0
2e918                 | LR__5105
2e918     2C          | 	byte	","
2e919     00          | 	byte	0
2e91a                 | LR__5106
2e91a     29          | 	byte	")"
2e91b     00          | 	byte	0
2e91c                 | LR__5107
2e91c     29          | 	byte	")"
2e91d     00          | 	byte	0
2e91e                 | LR__5108
2e91e     61 73       | 	byte	"as"
2e920     00          | 	byte	0
2e921                 | LR__5109
2e921     62 79 74 65 | 	byte	"byte"
2e925     00          | 	byte	0
2e926                 | LR__5110
2e926     75 62 79 74 
2e92a     65          | 	byte	"ubyte"
2e92b     00          | 	byte	0
2e92c                 | LR__5111
2e92c     73 68 6F 72 
2e930     74          | 	byte	"short"
2e931     00          | 	byte	0
2e932                 | LR__5112
2e932     75 73 68 6F 
2e936     72 74       | 	byte	"ushort"
2e938     00          | 	byte	0
2e939                 | LR__5113
2e939     6C 6F 6E 67 | 	byte	"long"
2e93d     00          | 	byte	0
2e93e                 | LR__5114
2e93e     69 6E 74 65 
2e942     67 65 72    | 	byte	"integer"
2e945     00          | 	byte	0
2e946                 | LR__5115
2e946     75 6C 6F 6E 
2e94a     67          | 	byte	"ulong"
2e94b     00          | 	byte	0
2e94c                 | LR__5116
2e94c     69 6E 74 36 
2e950     34          | 	byte	"int64"
2e951     00          | 	byte	0
2e952                 | LR__5117
2e952     75 69 6E 74 
2e956     36 34       | 	byte	"uint64"
2e958     00          | 	byte	0
2e959                 | LR__5118
2e959     73 69 6E 67 
2e95d     6C 65       | 	byte	"single"
2e95f     00          | 	byte	0
2e960                 | LR__5119
2e960     64 6F 75 62 
2e964     6C 65       | 	byte	"double"
2e966     00          | 	byte	0
2e967                 | LR__5120
2e967     73 74 72 69 
2e96b     6E 67       | 	byte	"string"
2e96d     00          | 	byte	0
2e96e                 | LR__5121
2e96e     74 6F       | 	byte	"to"
2e970     00          | 	byte	0
2e971                 | LR__5122
2e971     73 74 65 70 | 	byte	"step"
2e975     00          | 	byte	0
2e976                 | LR__5123
2e976     73 2E       | 	byte	"s."
2e978     00          | 	byte	0
2e979                 | LR__5124
2e979     24          | 	byte	"$"
2e97a     00          | 	byte	0
2e97b                 | LR__5125
2e97b     26 68       | 	byte	"&h"
2e97d     00          | 	byte	0
2e97e                 | LR__5126
2e97e     25          | 	byte	"%"
2e97f     00          | 	byte	0
2e980                 | LR__5127
2e980     26 62       | 	byte	"&b"
2e982     00          | 	byte	0
2e983                 | LR__5128
2e983                 | 	byte	
2e983     00          | 	byte	0
2e984                 | LR__5129
2e984     2F          | 	byte	"/"
2e985     00          | 	byte	0
2e986                 | LR__5130
2e986                 | 	byte	
2e986     00          | 	byte	0
2e987                 | LR__5131
2e987     53 61 76 65 
2e98b     64 20 61 73 
2e98f     20          | 	byte	"Saved as "
2e990     00          | 	byte	0
2e991                 | LR__5132
2e991     2F          | 	byte	"/"
2e992     00          | 	byte	0
2e993                 | LR__5133
2e993                 | 	byte	
2e993     00          | 	byte	0
2e994                 | LR__5134
2e994     2F          | 	byte	"/"
2e995     00          | 	byte	0
2e996                 | LR__5135
2e996     2F          | 	byte	"/"
2e997     00          | 	byte	0
2e998                 | LR__5136
2e998     2E 62 61 73 | 	byte	".bas"
2e99c     00          | 	byte	0
2e99d                 | LR__5137
2e99d     53 79 73 74 
2e9a1     65 6D 20 65 
2e9a5     72 72 6F 72 
2e9a9     20          | 	byte	"System error "
2e9aa     00          | 	byte	0
2e9ab                 | LR__5138
2e9ab     3A 20       | 	byte	": "
2e9ad     00          | 	byte	0
2e9ae                 | LR__5139
2e9ae     2E 62 61 73 | 	byte	".bas"
2e9b2     00          | 	byte	0
2e9b3                 | LR__5140
2e9b3     2F          | 	byte	"/"
2e9b4     00          | 	byte	0
2e9b5                 | LR__5141
2e9b5     30          | 	byte	"0"
2e9b6     00          | 	byte	0
2e9b7                 | LR__5142
2e9b7     39          | 	byte	"9"
2e9b8     00          | 	byte	0
2e9b9                 | LR__5143
2e9b9                 | 	byte	
2e9b9     00          | 	byte	0
2e9ba                 | LR__5144
2e9ba     4C 6F 61 64 
2e9be     65 64 20    | 	byte	"Loaded "
2e9c1     00          | 	byte	0
2e9c2                 | LR__5145
2e9c2     2F          | 	byte	"/"
2e9c3     00          | 	byte	0
2e9c4                 | LR__5146
2e9c4     53 74 6F 70 
2e9c8     70 65 64 20 
2e9cc     61 74 20 6C 
2e9d0     69 6E 65 20 | 	byte	"Stopped at line "
2e9d4     00          | 	byte	0
2e9d5                 | LR__5147
2e9d5                 | 	byte	
2e9d5     00          | 	byte	0
2e9d6                 | LR__5148
2e9d6                 | 	byte	
2e9d6     00          | 	byte	0
2e9d7                 | LR__5149
2e9d7     2F 73 64 2F 
2e9db     6D 65 64 69 
2e9df     61 2F 68 2F | 	byte	"/sd/media/h/"
2e9e3     00          | 	byte	0
2e9e4                 | LR__5150
2e9e4     53 79 73 74 
2e9e8     65 6D 20 65 
2e9ec     72 72 6F 72 
2e9f0     20          | 	byte	"System error "
2e9f1     00          | 	byte	0
2e9f2                 | LR__5151
2e9f2     3A 20       | 	byte	": "
2e9f4     00          | 	byte	0
2e9f5                 | LR__5152
2e9f5                 | 	byte	
2e9f5     00          | 	byte	0
2e9f6                 | LR__5153
2e9f6                 | 	byte	
2e9f6     00          | 	byte	0
2e9f7                 | LR__5154
2e9f7     2F 73 64 2F 
2e9fb     6D 65 64 69 
2e9ff     61 2F 73 2F | 	byte	"/sd/media/s/"
2ea03     00          | 	byte	0
2ea04                 | LR__5155
2ea04     53 79 73 74 
2ea08     65 6D 20 65 
2ea0c     72 72 6F 72 
2ea10     20          | 	byte	"System error "
2ea11     00          | 	byte	0
2ea12                 | LR__5156
2ea12     3A 20       | 	byte	": "
2ea14     00          | 	byte	0
2ea15                 | LR__5157
2ea15     6E 6F 6E 61 
2ea19     6D 65 2E 62 
2ea1d     61 73       | 	byte	"noname.bas"
2ea1f     00          | 	byte	0
2ea20                 | LR__5158
2ea20     45 72 72 6F 
2ea24     72 20       | 	byte	"Error "
2ea26     00          | 	byte	0
2ea27                 | LR__5159
2ea27     3A 20       | 	byte	": "
2ea29     00          | 	byte	0
2ea2a                 | LR__5160
2ea2a                 | 	byte	
2ea2a     00          | 	byte	0
2ea2b                 | LR__5161
2ea2b                 | 	byte	
2ea2b     00          | 	byte	0
2ea2c                 | LR__5162
2ea2c     72 6E 64 3A 
2ea30     20          | 	byte	"rnd: "
2ea31     00          | 	byte	0
2ea32                 | LR__5163
2ea32     72 6E 64 3A 
2ea36     20          | 	byte	"rnd: "
2ea37     00          | 	byte	0
2ea38                 | LR__5164
2ea38     67 65 74 65 
2ea3c     6E 76 73 75 
2ea40     73 74 61 69 
2ea44     6E 3A 20    | 	byte	"getenvsustain: "
2ea47     00          | 	byte	0
2ea48                 | LR__5165
2ea48     73 69 6E 3A 
2ea4c     20          | 	byte	"sin: "
2ea4d     00          | 	byte	0
2ea4e                 | LR__5166
2ea4e     6D 69 64 24 
2ea52     3A 20       | 	byte	"mid$: "
2ea54     00          | 	byte	0
2ea55                 | LR__5167
2ea55     6D 69 64 24 
2ea59     3A 20       | 	byte	"mid$: "
2ea5b     00          | 	byte	0
2ea5c                 | LR__5168
2ea5c     72 69 67 68 
2ea60     74 24 3A 20 | 	byte	"right$: "
2ea64     00          | 	byte	0
2ea65                 | LR__5169
2ea65     72 69 67 68 
2ea69     74 24 3A 20 | 	byte	"right$: "
2ea6d     00          | 	byte	0
2ea6e                 | LR__5170
2ea6e     6C 65 66 74 
2ea72     24 3A 20    | 	byte	"left$: "
2ea75     00          | 	byte	0
2ea76                 | LR__5171
2ea76     6C 65 66 74 
2ea7a     24 3A 20    | 	byte	"left$: "
2ea7d     00          | 	byte	0
2ea7e                 | LR__5172
2ea7e     61 73 63 3A 
2ea82     20          | 	byte	"asc: "
2ea83     00          | 	byte	0
2ea84                 | LR__5173
2ea84     61 73 63 3A 
2ea88     20          | 	byte	"asc: "
2ea89     00          | 	byte	0
2ea8a                 | LR__5174
2ea8a     6C 65 6E 3A 
2ea8e     20          | 	byte	"len: "
2ea8f     00          | 	byte	0
2ea90                 | LR__5175
2ea90     6C 65 6E 3A 
2ea94     20          | 	byte	"len: "
2ea95     00          | 	byte	0
2ea96                 | LR__5176
2ea96     63 68 72 24 
2ea9a     3A 20       | 	byte	"chr$: "
2ea9c     00          | 	byte	0
2ea9d                 | LR__5177
2ea9d     76 61 6C 3A 
2eaa1     20          | 	byte	"val: "
2eaa2     00          | 	byte	0
2eaa3                 | LR__5178
2eaa3     76 61 6C 3A 
2eaa7     20          | 	byte	"val: "
2eaa8     00          | 	byte	0
2eaa9                 | LR__5179
2eaa9     24          | 	byte	"$"
2eaaa     00          | 	byte	0
2eaab                 | LR__5180
2eaab     26 68       | 	byte	"&h"
2eaad     00          | 	byte	0
2eaae                 | LR__5181
2eaae     25          | 	byte	"%"
2eaaf     00          | 	byte	0
2eab0                 | LR__5182
2eab0     26 62       | 	byte	"&b"
2eab2     00          | 	byte	0
2eab3                 | LR__5183
2eab3     68 65 78 24 
2eab7     3A 20       | 	byte	"hex$: "
2eab9     00          | 	byte	0
2eaba                 | LR__5184
2eaba     62 69 6E 24 
2eabe     3A 20       | 	byte	"bin$: "
2eac0     00          | 	byte	0
2eac1                 | LR__5185
2eac1     63 6F 73 3A 
2eac5     20          | 	byte	"cos: "
2eac6     00          | 	byte	0
2eac7                 | LR__5186
2eac7     74 61 6E 3A 
2eacb     20          | 	byte	"tan: "
2eacc     00          | 	byte	0
2eacd                 | LR__5187
2eacd     61 73 69 6E 
2ead1     3A 20       | 	byte	"asin: "
2ead3     00          | 	byte	0
2ead4                 | LR__5188
2ead4     61 63 6F 73 
2ead8     3A 20       | 	byte	"acos: "
2eada     00          | 	byte	0
2eadb                 | LR__5189
2eadb     61 74 6E 3A 
2eadf     20          | 	byte	"atn: "
2eae0     00          | 	byte	0
2eae1                 | LR__5190
2eae1     73 71 72 3A 
2eae5     20          | 	byte	"sqr: "
2eae6     00          | 	byte	0
2eae7                 | LR__5191
2eae7     73 74 69 63 
2eaeb     6B 3A 20    | 	byte	"stick: "
2eaee     00          | 	byte	0
2eaef                 | LR__5192
2eaef     73 74 72 69 
2eaf3     67 3A 20    | 	byte	"strig: "
2eaf6     00          | 	byte	0
2eaf7                 | LR__5193
2eaf7     67 65 74 70 
2eafb     69 78 65 6C 
2eaff     3A 20       | 	byte	"getpixel: "
2eb01     00          | 	byte	0
2eb02                 | LR__5194
2eb02     6C 6F 67 3A 
2eb06     20          | 	byte	"log: "
2eb07     00          | 	byte	0
2eb08                 | LR__5195
2eb08     20 42 41 53 
2eb0c     49 43 20 62 
2eb10     79 74 65 73 
2eb14     20 66 72 65 
2eb18     65          | 	byte	" BASIC bytes free"
2eb19     00          | 	byte	0
2eb1a                 | LR__5196
2eb1a                 | 	byte	
2eb1a     00          | 	byte	0
2eb1b                 | LR__5197
2eb1b     2F 73 64 2F 
2eb1f     62 61 73    | 	byte	"/sd/bas"
2eb22     00          | 	byte	0
2eb23                 | LR__5198
2eb23     57 6F 72 6B 
2eb27     69 6E 67 20 
2eb2b     64 69 72 65 
2eb2f     63 74 6F 72 
2eb33     79 3A 20    | 	byte	"Working directory: "
2eb36     00          | 	byte	0
2eb37                 | LR__5199
2eb37     2A          | 	byte	"*"
2eb38     00          | 	byte	0
2eb39                 | LR__5200
2eb39                 | 	byte	
2eb39     00          | 	byte	0
2eb3a                 | LR__5201
2eb3a     5B 64 69 72 
2eb3e     5D 20       | 	byte	"[dir] "
2eb40     00          | 	byte	0
2eb41                 | LR__5202
2eb41     2A          | 	byte	"*"
2eb42     00          | 	byte	0
2eb43                 | LR__5203
2eb43                 | 	byte	
2eb43     00          | 	byte	0
2eb44                 | LR__5204
2eb44     2D 2D 2D 2D 
2eb48     2D 6D 6F 72 
2eb4c     65 2C 20 70 
2eb50     72 65 73 73 
2eb54     20 61 6E 79 
2eb58     20 6B 65 79 | 	byte	"-----more, press any key"
2eb5c     00          | 	byte	0
2eb5d                 | LR__5205
2eb5d     20 20 20 20 
      ...             
2eb75     20 20 20 20 
2eb79     20          | 	byte	"                             "
2eb7a     00          | 	byte	0
2eb7b                 | LR__5206
2eb7b     2F          | 	byte	"/"
2eb7c     00          | 	byte	0
2eb7d                 | LR__5207
2eb7d     2F 73 64 2F 
2eb81     62 69 6E 2F | 	byte	"/sd/bin/"
2eb85     00          | 	byte	0
2eb86                 | LR__5208
2eb86     53 79 73 74 
2eb8a     65 6D 20 65 
2eb8e     72 72 6F 72 
2eb92     20          | 	byte	"System error "
2eb93     00          | 	byte	0
2eb94                 | LR__5209
2eb94     3A 20       | 	byte	": "
2eb96     00          | 	byte	0
2eb97                 | LR__5210
2eb97                 | 	byte	
2eb97     00          | 	byte	0
2eb98                 | LR__5211
2eb98     45 78 70 65 
2eb9c     63 74 65 64 
2eba0     20 6E 75 6D 
2eba4     62 65 72 2C 
2eba8     20 67 6F 74 
2ebac     20 73 6F 6D 
2ebb0     65 74 68 69 
2ebb4     6E 67 20 65 
2ebb8     6C 73 65 2E | 	byte	"Expected number, got something else."
2ebbc     00          | 	byte	0
2ebbd                 | LR__5212
2ebbd     43 61 6E 6E 
2ebc1     6F 74 20 61 
2ebc5     64 64 20 61 
2ebc9     20 6E 75 6D 
2ebcd     62 65 72 20 
2ebd1     74 6F 20 61 
2ebd5     20 73 74 72 
2ebd9     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2ebdd     00          | 	byte	0
2ebde                 | LR__5213
2ebde     43 61 6E 6E 
2ebe2     6F 74 20 73 
2ebe6     75 62 73 74 
2ebea     72 61 63 74 
2ebee     20 73 74 72 
2ebf2     69 6E 67 73 
2ebf6     2E          | 	byte	"Cannot substract strings."
2ebf7     00          | 	byte	0
2ebf8                 | LR__5214
2ebf8     55 6E 6B 6E 
2ebfc     6F 77 6E 20 
2ec00     65 72 72 6F 
2ec04     72 20 77 68 
2ec08     69 6C 65 20 
2ec0c     61 64 64 69 
2ec10     6E 67 2E    | 	byte	"Unknown error while adding."
2ec13     00          | 	byte	0
2ec14                 | LR__5215
2ec14     55 6E 6B 6E 
2ec18     6F 77 6E 20 
2ec1c     65 72 72 6F 
2ec20     72 20 77 68 
2ec24     69 6C 65 20 
2ec28     73 75 62 73 
2ec2c     74 72 61 63 
2ec30     74 69 6E 67 
2ec34     2E          | 	byte	"Unknown error while substracting."
2ec35     00          | 	byte	0
2ec36                 | LR__5216
2ec36     43 61 6E 6E 
2ec3a     6F 74 20 64 
2ec3e     6F 20 6C 6F 
2ec42     67 69 63 20 
2ec46     6F 70 65 72 
2ec4a     61 74 69 6F 
2ec4e     6E 20 6F 6E 
2ec52     20 73 74 72 
2ec56     69 6E 67 20 
2ec5a     6F 72 20 66 
2ec5e     6C 6F 61 74 
2ec62     2E          | 	byte	"Cannot do logic operation on string or float."
2ec63     00          | 	byte	0
2ec64                 | LR__5217
2ec64     55 6E 6B 6E 
2ec68     6F 77 6E 20 
2ec6c     65 72 72 6F 
2ec70     72 20 77 68 
2ec74     69 6C 65 20 
2ec78     64 6F 69 6E 
2ec7c     67 20 6C 6F 
2ec80     67 69 63 20 
2ec84     6F 70 65 72 
2ec88     61 74 69 6F 
2ec8c     6E 2E       | 	byte	"Unknown error while doing logic operation."
2ec8e     00          | 	byte	0
2ec8f                 | LR__5218
2ec8f     43 61 6E 6E 
2ec93     6F 74 20 6D 
2ec97     75 6C 74 69 
2ec9b     70 6C 79 20 
2ec9f     73 74 72 69 
2eca3     6E 67 73 2E | 	byte	"Cannot multiply strings."
2eca7     00          | 	byte	0
2eca8                 | LR__5219
2eca8     55 6E 6B 6E 
2ecac     6F 77 6E 20 
2ecb0     65 72 72 6F 
2ecb4     72 20 77 68 
2ecb8     69 6C 65 20 
2ecbc     6D 75 6C 74 
2ecc0     69 70 6C 79 
2ecc4     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2ecc8     00          | 	byte	0
2ecc9                 | LR__5220
2ecc9     43 61 6E 6E 
2eccd     6F 74 20 64 
2ecd1     69 76 69 64 
2ecd5     65 20 73 74 
2ecd9     72 69 6E 67 
2ecdd     73 2E       | 	byte	"Cannot divide strings."
2ecdf     00          | 	byte	0
2ece0                 | LR__5221
2ece0     55 6E 6B 6E 
2ece4     6F 77 6E 20 
2ece8     65 72 72 6F 
2ecec     72 20 77 68 
2ecf0     69 6C 65 20 
2ecf4     64 69 76 69 
2ecf8     64 69 6E 67 
2ecfc     2E          | 	byte	"Unknown error while dividing."
2ecfd     00          | 	byte	0
2ecfe                 | LR__5222
2ecfe     43 61 6E 6E 
2ed02     6F 74 20 63 
2ed06     6F 6D 70 75 
2ed0a     74 65 20 61 
2ed0e     20 70 6F 77 
2ed12     65 72 20 6F 
2ed16     66 20 61 20 
2ed1a     73 74 72 69 
2ed1e     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2ed21     00          | 	byte	0
2ed22                 | LR__5223
2ed22     55 6E 6B 6E 
2ed26     6F 77 6E 20 
2ed2a     65 72 72 6F 
2ed2e     72 20 77 68 
2ed32     69 6C 65 20 
2ed36     63 6F 6D 70 
2ed3a     75 74 69 6E 
2ed3e     67 20 61 20 
2ed42     70 6F 77 65 
2ed46     72 2E       | 	byte	"Unknown error while computing a power."
2ed48     00          | 	byte	0
2ed49                 | LR__5224
2ed49     52 69 67 68 
2ed4d     74 20 70 61 
2ed51     72 65 6E 74 
2ed55     68 65 73 69 
2ed59     73 20 65 78 
2ed5d     70 65 63 74 
2ed61     65 64 2E    | 	byte	"Right parenthesis expected."
2ed64     00          | 	byte	0
2ed65                 | LR__5225
2ed65     45 78 70 65 
2ed69     63 74 65 64 
2ed6d     20 73 74 72 
2ed71     69 6E 67 2E | 	byte	"Expected string."
2ed75     00          | 	byte	0
2ed76                 | LR__5226
2ed76     45 78 70 65 
2ed7a     63 74 65 64 
2ed7e     20 66 6C 6F 
2ed82     61 74 2E    | 	byte	"Expected float."
2ed85     00          | 	byte	0
2ed86                 | LR__5227
2ed86     45 78 70 65 
2ed8a     63 74 65 64 
2ed8e     20 75 6E 73 
2ed92     69 67 6E 65 
2ed96     64 20 69 6E 
2ed9a     74 65 67 65 
2ed9e     72 2E       | 	byte	"Expected unsigned integer."
2eda0     00          | 	byte	0
2eda1                 | LR__5228
2eda1     45 78 70 65 
2eda5     63 74 65 64 
2eda9     20 69 6E 74 
2edad     65 67 65 72 
2edb1     2E          | 	byte	"Expected integer."
2edb2     00          | 	byte	0
2edb3                 | LR__5229
2edb3     4E 6F 20 6D 
2edb7     6F 72 65 20 
2edbb     76 61 72 69 
2edbf     61 62 6C 65 
2edc3     20 73 6C 6F 
2edc7     74 73 2E    | 	byte	"No more variable slots."
2edca     00          | 	byte	0
2edcb                 | LR__5230
2edcb     56 61 72 69 
2edcf     61 62 6C 65 
2edd3     20 6E 6F 74 
2edd7     20 66 6F 75 
2eddb     6E 64 2E    | 	byte	"Variable not found."
2edde     00          | 	byte	0
2eddf                 | LR__5231
2eddf     43 6F 6D 6D 
2ede3     61 20 65 78 
2ede7     70 65 63 74 
2edeb     65 64 2E    | 	byte	"Comma expected."
2edee     00          | 	byte	0
2edef                 | LR__5232
2edef     43 6F 6D 6D 
2edf3     61 20 6F 72 
2edf7     20 73 65 6D 
2edfb     69 63 6F 6C 
2edff     6F 6E 20 65 
2ee03     78 70 65 63 
2ee07     74 65 64 2E | 	byte	"Comma or semicolon expected."
2ee0b     00          | 	byte	0
2ee0c                 | LR__5233
2ee0c     55 6E 6B 6E 
2ee10     6F 77 6E 20 
2ee14     63 6F 6D 6D 
2ee18     61 6E 64 2E | 	byte	"Unknown command."
2ee1c     00          | 	byte	0
2ee1d                 | LR__5234
2ee1d     53 74 61 63 
2ee21     6B 20 75 6E 
2ee25     64 65 72 66 
2ee29     6C 6F 77 2E | 	byte	"Stack underflow."
2ee2d     00          | 	byte	0
2ee2e                 | LR__5235
2ee2e     43 61 6E 6E 
2ee32     6F 74 20 65 
2ee36     78 65 63 75 
2ee3a     74 65 20 67 
2ee3e     6F 74 6F 20 
2ee42     69 6E 20 74 
2ee46     68 65 20 69 
2ee4a     6D 6D 65 64 
2ee4e     69 61 74 65 
2ee52     20 6D 6F 64 
2ee56     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2ee58     00          | 	byte	0
2ee59                 | LR__5236
2ee59     43 61 6E 6E 
2ee5d     6F 74 20 6C 
2ee61     6F 61 64 20 
2ee65     66 72 6F 6D 
2ee69     20 74 68 69 
2ee6d     73 20 66 69 
2ee71     6C 65 2E    | 	byte	"Cannot load from this file."
2ee74     00          | 	byte	0
2ee75                 | LR__5237
2ee75     54 68 65 20 
2ee79     70 72 6F 67 
2ee7d     72 61 6D 20 
2ee81     69 73 20 65 
2ee85     6D 70 74 79 
2ee89     2E          | 	byte	"The program is empty."
2ee8a     00          | 	byte	0
2ee8b                 | LR__5238
2ee8b     49 66 20 61 
2ee8f     66 74 65 72 
2ee93     20 69 66 2E | 	byte	"If after if."
2ee97     00          | 	byte	0
2ee98                 | LR__5239
2ee98     45 6D 70 74 
2ee9c     79 20 65 78 
2eea0     70 72 65 73 
2eea4     73 69 6F 6E 
2eea8     2E          | 	byte	"Empty expression."
2eea9     00          | 	byte	0
2eeaa                 | LR__5240
2eeaa     53 74 72 69 
2eeae     6E 67 20 65 
2eeb2     78 70 65 63 
2eeb6     74 65 64 2E | 	byte	"String expected."
2eeba     00          | 	byte	0
2eebb                 | LR__5241
2eebb     49 6E 74 65 
2eebf     72 70 72 65 
2eec3     74 65 72 20 
2eec7     69 6E 74 65 
2eecb     72 6E 61 6C 
2eecf     20 65 72 72 
2eed3     6F 72 2E    | 	byte	"Interpreter internal error."
2eed6     00          | 	byte	0
2eed7                 | LR__5242
2eed7     45 78 70 65 
2eedb     63 74 65 64 
2eedf     20 61 73 73 
2eee3     69 67 6E 2E | 	byte	"Expected assign."
2eee7     00          | 	byte	0
2eee8                 | LR__5243
2eee8     45 78 70 65 
2eeec     63 74 65 64 
2eef0     20 27 74 6F 
2eef4     27 2E       | 	byte	"Expected 'to'."
2eef6     00          | 	byte	0
2eef7                 | LR__5244
2eef7     45 78 70 65 
2eefb     63 74 65 64 
2eeff     20 69 6E 74 
2ef03     65 67 65 72 
2ef07     20 76 61 72 
2ef0b     69 61 62 6C 
2ef0f     65 2E       | 	byte	"Expected integer variable."
2ef11     00          | 	byte	0
2ef12                 | LR__5245
2ef12     55 6E 69 6E 
2ef16     69 74 69 61 
2ef1a     6C 69 7A 65 
2ef1e     64 20 76 61 
2ef22     72 69 61 62 
2ef26     6C 65 20 69 
2ef2a     6E 20 27 6E 
2ef2e     65 78 74 27 
2ef32     2C 20 75 73 
2ef36     65 20 27 66 
2ef3a     6F 72 27 20 
2ef3e     62 65 66 6F 
2ef42     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2ef45     00          | 	byte	0
2ef46                 | LR__5246
2ef46     4E 6F 20 6D 
2ef4a     6F 72 65 20 
2ef4e     73 6C 6F 74 
2ef52     73 20 66 6F 
2ef56     72 20 27 66 
2ef5a     6F 72 27 2E | 	byte	"No more slots for 'for'."
2ef5e     00          | 	byte	0
2ef5f                 | LR__5247
2ef5f     27 4E 65 78 
2ef63     74 27 20 64 
2ef67     6F 65 73 6E 
2ef6b     27 74 20 6D 
2ef6f     61 74 63 68 
2ef73     20 27 66 6F 
2ef77     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2ef7a     00          | 	byte	0
2ef7b                 | LR__5248
2ef7b     27 47 6F 74 
2ef7f     6F 27 20 74 
2ef83     61 72 67 65 
2ef87     74 20 6C 69 
2ef8b     6E 65 20 6E 
2ef8f     6F 74 20 66 
2ef93     6F 75 6E 64 
2ef97     2E          | 	byte	"'Goto' target line not found."
2ef98     00          | 	byte	0
2ef99                 | LR__5249
2ef99     42 61 64 20 
2ef9d     6E 75 6D 62 
2efa1     65 72 20 6F 
2efa5     66 20 70 61 
2efa9     72 61 6D 65 
2efad     74 65 72 73 | 	byte	"Bad number of parameters"
2efb1     00          | 	byte	0
2efb2                 | LR__5250
2efb2     46 75 6E 63 
2efb6     74 69 6F 6E 
2efba     20 75 6E 64 
2efbe     65 66 69 6E 
2efc2     65 64 20 66 
2efc6     6F 72 20 73 
2efca     74 72 69 6E 
2efce     67 73       | 	byte	"Function undefined for strings"
2efd0     00          | 	byte	0
2efd1                 | LR__5251
2efd1     42 61 64 20 
2efd5     70 61 72 61 
2efd9     6D 65 74 65 
2efdd     72 2E       | 	byte	"Bad parameter."
2efdf     00          | 	byte	0
2efe0                 | LR__5252
2efe0     43 61 6E 6E 
2efe4     6F 74 20 64 
2efe8     65 63 6C 61 
2efec     72 65 20 61 
2eff0     6E 20 61 72 
2eff4     72 61 79 3A 
2eff8     20 74 68 65 
2effc     20 76 61 72 
2f000     69 61 62 6C 
2f004     65 20 65 78 
2f008     69 73 74 73 
2f00c     2E          | 	byte	"Cannot declare an array: the variable exists."
2f00d     00          | 	byte	0
2f00e                 | LR__5253
2f00e     45 78 70 65 
2f012     63 74 65 64 
2f016     20 27 28 27 
2f01a     2E          | 	byte	"Expected '('."
2f01b     00          | 	byte	0
2f01c                 | LR__5254
2f01c     45 78 70 65 
2f020     63 74 65 64 
2f024     20 27 29 27 
2f028     20 6F 72 20 
2f02c     27 2C 27 2E | 	byte	"Expected ')' or ','."
2f030     00          | 	byte	0
2f031                 | LR__5255
2f031     4E 6F 20 6D 
2f035     6F 72 65 20 
2f039     74 68 61 6E 
2f03d     20 33 20 64 
2f041     69 6D 65 6E 
2f045     73 69 6F 6E 
2f049     73 20 73 75 
2f04d     70 70 6F 72 
2f051     74 65 64    | 	byte	"No more than 3 dimensions supported"
2f054     00          | 	byte	0
2f055                 | LR__5256
2f055     56 61 72 69 
2f059     61 62 6C 65 
2f05d     20 6E 61 6D 
2f061     65 20 65 78 
2f065     70 65 63 74 
2f069     65 64       | 	byte	"Variable name expected"
2f06b     00          | 	byte	0
2f06c                 | LR__5257
2f06c     54 79 70 65 
2f070     20 6E 61 6D 
2f074     65 20 65 78 
2f078     70 65 63 74 
2f07c     65 64       | 	byte	"Type name expected"
2f07e     00          | 	byte	0
2f07f                 | LR__5258
2f07f     54 79 70 65 
2f083     20 6E 6F 74 
2f087     20 73 75 70 
2f08b     70 6F 72 74 
2f08f     65 64 20 79 
2f093     65 74       | 	byte	"Type not supported yet"
2f095     00          | 	byte	0
2f096                 | LR__5259
2f096     41 72 72 61 
2f09a     79 20 69 6E 
2f09e     64 65 78 20 
2f0a2     6F 75 74 20 
2f0a6     6F 66 20 72 
2f0aa     61 6E 67 65 | 	byte	"Array index out of range"
2f0ae     00          | 	byte	0
2f0af                 | LR__5260
2f0af     45 72 72 6F 
2f0b3     72 20       | 	byte	"Error "
2f0b5     00          | 	byte	0
2f0b6                 | LR__5261
2f0b6     3A 20       | 	byte	": "
2f0b8     00          | 	byte	0
2f0b9                 | LR__5262
2f0b9     2F 73 64    | 	byte	"/sd"
2f0bc     00          | 	byte	0
2f0bd                 | LR__5263
2f0bd     2F 73 64 2F 
2f0c1     62 61 73    | 	byte	"/sd/bas"
2f0c4     00          | 	byte	0
2f0c5                 | LR__5264
2f0c5     2F 73 64 2F 
2f0c9     62 61 73    | 	byte	"/sd/bas"
2f0cc     00          | 	byte	0
2f0cd                 | LR__5265
2f0cd     20 42 41 53 
2f0d1     49 43 20 62 
2f0d5     79 74 65 73 
2f0d9     20 66 72 65 
2f0dd     65          | 	byte	" BASIC bytes free"
2f0de     00          | 	byte	0
2f0df                 | LR__5266
2f0df     52 65 61 64 
2f0e3     79          | 	byte	"Ready"
2f0e4     00          | 	byte	0
2f0e5                 | LR__5267
2f0e5     6E 6F 6E 61 
2f0e9     6D 65 2E 62 
2f0ed     61 73       | 	byte	"noname.bas"
2f0ef     00          | 	byte	0
2f0f0                 | LR__5268
2f0f0                 | 	byte	
2f0f0     00          | 	byte	0
2f0f1                 | LR__5269
2f0f1                 | 	byte	
2f0f1     00          | 	byte	0
2f0f2                 | LR__5270
2f0f2                 | 	byte	
2f0f2     00          | 	byte	0
2f0f3     00          | 	alignl
2f0f4                 | _dat_
2f0f4     00 00 00 00 
2f0f8     00 00 00 00 
2f0fc     00 00 00 00 
2f100     00 00 00 00 | 	byte	$00[16]
2f104     61 41 17 0E 
2f108     62 42 00 00 
2f10c     63 43 19 10 
2f110     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2f114     65 45 18 0F 
2f118     66 46 00 00 
2f11c     67 47 00 00 
2f120     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2f124     69 49 00 00 
2f128     6A 4A 00 00 
2f12c     6B 4B 00 00 
2f130     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2f134     6D 4D 00 00 
2f138     6E 4E 1A 11 
2f13c     6F 4F 1E 15 
2f140     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2f144     71 51 00 00 
2f148     72 52 00 00 
2f14c     73 53 1B 12 
2f150     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2f154     75 55 00 00 
2f158     76 56 00 00 
2f15c     77 57 00 00 
2f160     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2f164     79 59 00 00 
2f168     7A 5A 1D 14 
2f16c     31 21 04 00 
2f170     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2f174     33 23 06 00 
2f178     34 24 07 00 
2f17c     35 25 08 00 
2f180     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2f184     37 26 0A 00 
2f188     38 2A 0B 00 
2f18c     39 28 0C 00 
2f190     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2f194     8D 8D 00 00 
2f198     9B 9B 00 00 
2f19c     88 88 00 00 
2f1a0     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2f1a4     20 20 00 00 
2f1a8     2D 5F 00 00 
2f1ac     3D 2B 00 00 
2f1b0     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2f1b4     5D 7D 00 00 
2f1b8     5C 7C 00 00 
2f1bc     23 7E 00 00 
2f1c0     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2f1c4     27 22 00 00 
2f1c8     60 7E 03 00 
2f1cc     2C 3C 00 00 
2f1d0     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2f1d4     2F 3F 00 00 
2f1d8     B9 B9 00 00 
2f1dc     BA 00 00 00 
2f1e0     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2f1e4     BC 00 00 00 
2f1e8     BD 00 00 00 
2f1ec     BE 00 00 00 
2f1f0     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2f1f4     C0 00 00 00 
2f1f8     C1 00 00 00 
2f1fc     C2 00 00 00 
2f200     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2f204     C4 00 00 00 
2f208     C5 00 00 00 
2f20c     C6 00 00 00 
2f210     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2f214     C8 00 00 00 
2f218     C9 00 00 00 
2f21c     CA 00 00 00 
2f220     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2f224     7F 7F 00 00 
2f228     CC 00 00 00 
2f22c     CD 00 00 00 
2f230     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2f234     CF 00 00 00 
2f238     D0 00 00 00 
2f23c     D1 00 00 00 
2f240     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2f244     2F 2F 00 00 
2f248     2A 2A 00 00 
2f24c     2D 2D 00 00 
2f250     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2f254     8D 8D 00 00 
2f258     31 31 00 00 
2f25c     32 32 00 00 
2f260     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2f264     34 34 00 00 
2f268     35 35 00 00 
2f26c     36 36 00 00 
2f270     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2f274     38 38 00 00 
2f278     39 39 00 00 
2f27c     30 30 00 00 
2f280     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2f284     5C 7C 00 00 
2f288     00 00 00 00 
2f28c     00 00 00 00 
2f290     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2f294     00 00 00 00 
      ...             
2f2ec     00 00 00 00 
2f2f0     00 00 00 00 | 	byte	$00[96]
2f2f4     2B 00 A6 F2 
2f2f8     24 A7 09 80 
2f2fc     5B 88 4D 89 
2f300     80 88 A5 88 | atari_spl file "atari.spl"
2f304     6D 88 B8 88 
2f308     80 88 CB 88 
2f30c     92 88 A5 88 
2f310     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2f314     A5 88 CA 88 
2f318     A6 88 DD 88 
2f31c     B8 88 AB 89 
2f320     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2f324     C8 AD C6 F1 
2f328     91 06 B6 FF 
2f32c     13 00 4A 00 
2f330     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2f334     5D 00 5E 00 
2f338     5D 00 5E 00 
2f33c     5E 00 5D 00 
2f340     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2f344     38 00 83 00 
2f348     25 00 83 00 
2f34c     C3 FE D1 04 
2f350     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2f354     48 88 38 85 
2f358     41 8A CB 88 
2f35c     28 89 B8 88 
2f360     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2f364     15 89 03 89 
2f368     02 89 15 89 
2f36c     16 89 15 89 
2f370     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2f374     15 89 3A 89 
2f378     72 89 E3 89 
2f37c     52 83 AD 97 
2f380     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2f384     0C 02 B6 FF 
2f388     E1 00 A8 00 
2f38c     F3 00 A8 00 
2f390     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2f394     CE 00 CD 00 
2f398     CD 00 BA 00 
2f39c     E1 00 BB 00 
2f3a0     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2f3a4     DF 00 C9 FF 
2f3a8     E6 01 B6 06 
2f3ac     EE DD 8D 98 
2f3b0     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2f3b4     97 89 73 89 
2f3b8     3B 89 60 89 
2f3bc     60 89 60 89 
2f3c0     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2f3c4     73 89 72 89 
2f3c8     85 89 73 89 
2f3cc     AA 89 60 89 
2f3d0     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2f3d4     E8 8A 18 86 
2f3d8     92 88 A5 C2 
2f3dc     E0 00 C3 05 
2f3e0     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2f3e4     F2 00 64 01 
2f3e8     06 01 3E 01 
2f3ec     2B 01 2B 01 
2f3f0     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2f3f4     2B 01 2A 01 
2f3f8     2B 01 2B 01 
2f3fc     2B 01 18 01 
2f400     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2f404     39 07 61 F3 
2f408     C0 AF 37 85 
2f40c     0F 88 8B 8A 
2f410     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2f414     AB 89 D0 89 
2f418     AB 89 D0 89 
2f41c     D0 89 CF 89 
2f420     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2f424     D0 89 F5 89 
2f428     BD 89 08 8A 
2f42c     CF 89 E8 8A 
2f430     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2f434     53 B3 0D F8 
2f438     F4 07 38 00 
2f43c     63 01 63 01 
2f440     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2f444     88 01 88 01 
2f448     76 01 88 01 
2f44c     88 01 89 01 
2f450     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2f454     75 01 AE 01 
2f458     76 01 88 01 
2f45c     4A 00 46 06 
2f460     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2f464     08 8A 9A 86 
2f468     33 8B 08 8A 
2f46c     2D 8A F5 89 
2f470     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2f474     2D 8A 2D 8A 
2f478     2E 8A 1B 8A 
2f47c     40 8A 2D 8A 
2f480     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2f484     2E 8A 79 8A 
2f488     66 8A C8 8B 
2f48c     72 82 2B 97 
2f490     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2f494     1D 02 05 01 
2f498     F8 01 C0 01 
2f49c     0B 02 C0 01 
2f4a0     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2f4a4     F9 01 D3 01 
2f4a8     F8 01 D3 01 
2f4ac     F8 01 D2 01 
2f4b0     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2f4b4     E6 01 2B 01 
2f4b8     8E 02 5F 07 
2f4bc     F7 E2 ED 9C 
2f4c0     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2f4c4     E8 8A 78 8A 
2f4c8     78 8A 65 8A 
2f4cc     8B 8A 78 8A 
2f4d0     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2f4d4     8B 8A 9D 8A 
2f4d8     9D 8A 8B 8A 
2f4dc     C2 8A 78 8A 
2f4e0     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2f4e4     70 8C 18 86 
2f4e8     8B 8A 23 C9 
2f4ec     CB 03 C4 05 
2f4f0     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2f4f4     0B 02 7B 02 
2f4f8     1E 02 55 02 
2f4fc     30 02 43 02 
2f500     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2f504     43 02 44 02 
2f508     43 02 30 02 
2f50c     68 02 31 02 
2f510     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2f514     07 08 3F F7 
2f518     73 B2 13 85 
2f51c     15 89 ED 8B 
2f520     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2f524     B0 8A FB 8A 
2f528     D5 8A FA 8A 
2f52c     E8 8A FB 8A 
2f530     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2f534     E8 8A 21 8B 
2f538     E7 8A 33 8B 
2f53c     E8 8A 26 8C 
2f540     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2f544     8D B0 27 F6 
2f548     9C 08 AD 01 
2f54c     7B 02 8D 02 
2f550     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2f554     A1 02 A0 02 
2f558     A1 02 A0 02 
2f55c     A0 02 A0 02 
2f560     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2f564     7B 02 D8 02 
2f568     7B 02 C6 02 
2f56c     3E 01 C3 05 
2f570     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2f574     00 8C 2A 86 
2f578     E0 8C FA 8A 
2f57c     6A 8B FB 8A 
2f580     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2f584     45 8B 45 8B 
2f588     45 8B 6B 8B 
2f58c     46 8B 59 8B 
2f590     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2f594     6B 8B 6B 8B 
2f598     6B 8B 6B 8B 
2f59c     7D 8B 7D 8B 
2f5a0     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2f5a4     90 8B 91 8B 
2f5a8     90 8B 90 8B 
2f5ac     A3 8B A3 8B 
2f5b0     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2f5b4     B5 8B B6 8B 
2f5b8     B5 8B B5 8B 
2f5bc     B6 8B C8 8B 
2f5c0     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2f5c4     C8 8B DA 8B 
2f5c8     DB 8B DB 8B 
2f5cc     DB 8B DC 8B 
2f5d0     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2f5d4     EE 8B EE 8B 
2f5d8     00 8C 01 8C 
2f5dc     00 8C 01 8C 
2f5e0     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2f5e4     12 8C 13 8C 
2f5e8     13 8C 26 8C 
2f5ec     26 8C 26 8C 
2f5f0     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2f5f4     38 8C 38 8C 
2f5f8     38 8C 38 8C 
2f5fc     4B 8C 4B 8C 
2f600     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2f604     5E 8C 5E 8C 
2f608     5E 8C 5E 8C 
2f60c     70 8C 70 8C 
2f610     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2f614     70 8C 83 8C 
2f618     83 8C 83 8C 
2f61c     83 8C 96 8C 
2f620     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2f624     95 8C A9 8C 
2f628     A9 8C A8 8C 
2f62c     A8 8C A8 8C 
2f630     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2f634     BB 8C BB 8C 
2f638     BB 8C CE 8C 
2f63c     CE 8C CE 8C 
2f640     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2f644     E0 8C E1 8C 
2f648     E1 8C E0 8C 
2f64c     F4 8C F2 8C 
2f650     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2f654     05 8D 05 8D 
2f658     06 8D 06 8D 
2f65c     19 8D 19 8D 
2f660     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2f664     18 8D 2B 8D 
2f668     2B 8D 2B 8D 
2f66c     2A 8D 3E 8D 
2f670     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2f674     3E 8D 51 8D 
2f678     50 8D 50 8D 
2f67c     50 8D 51 8D 
2f680     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2f684     63 8D 64 8D 
2f688     76 8D 75 8D 
2f68c     75 8D 76 8D 
2f690     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2f694     88 8D 88 8D 
2f698     89 8D 9B 8D 
2f69c     9A 8D 9B 8D 
2f6a0     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2f6a4     AD 8D AE 8D 
2f6a8     AD 8D AE 8D 
2f6ac     C1 8D C1 8D 
2f6b0     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2f6b4     D3 8D D3 8D 
2f6b8     D3 8D D3 8D 
2f6bc     D3 8D E6 8D 
2f6c0     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2f6c4     E6 8D E6 8D 
2f6c8     F9 8D F9 8D 
2f6cc     F9 8D F8 8D 
2f6d0     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2f6d4     0B 8E 0B 8E 
2f6d8     1D 8E 1D 8E 
2f6dc     1E 8E 1E 8E 
2f6e0     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2f6e4     31 8E 31 8E 
2f6e8     31 8E 42 8E 
2f6ec     43 8E 43 8E 
2f6f0     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2f6f4     56 8E 56 8E 
2f6f8     55 8E 56 8E 
2f6fc     68 8E 69 8E 
2f700     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2f704     69 8E 7B 8E 
2f708     7C 8E 7B 8E 
2f70c     7B 8E 8D 8E 
2f710     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2f714     8D 8E A1 8E 
2f718     A0 8E A1 8E 
2f71c     A1 8E A0 8E 
2f720     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2f724     B3 8E B3 8E 
2f728     C6 8E C5 8E 
2f72c     C6 8E C6 8E 
2f730     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2f734     D8 8E D9 8E 
2f738     D8 8E EC 8E 
2f73c     EB 8E EC 8E 
2f740     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2f744     FE 8E FE 8E 
2f748     FE 8E FE 8E 
2f74c     10 8F 10 8F 
2f750     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2f754     11 8F 23 8F 
2f758     24 8F 23 8F 
2f75c     24 8F 37 8F 
2f760     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2f764     36 8F 36 8F 
2f768     48 8F 49 8F 
2f76c     49 8F 49 8F 
2f770     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2f774     5B 8F 5C 8F 
2f778     5B 8F 6E 8F 
2f77c     6E 8F 6E 8F 
2f780     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2f784     81 8F 81 8F 
2f788     81 8F 81 8F 
2f78c     93 8F 93 8F 
2f790     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2f794     93 8F A6 8F 
2f798     A6 8F A6 8F 
2f79c     A6 8F B9 8F 
2f7a0     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2f7a4     B9 8F B9 8F 
2f7a8     CC 8F CB 8F 
2f7ac     CB 8F CC 8F 
2f7b0     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2f7b4     DF 8F DE 8F 
2f7b8     DE 8F F1 8F 
2f7bc     F1 8F F1 8F 
2f7c0     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2f7c4     03 90 04 90 
2f7c8     04 90 04 90 
2f7cc     16 90 17 90 
2f7d0     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2f7d4     29 90 28 90 
2f7d8     29 90 28 90 
2f7dc     29 90 3C 90 
2f7e0     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2f7e4     3C 90 4F 90 
2f7e8     4E 90 4E 90 
2f7ec     4E 90 4E 90 
2f7f0     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2f7f4     61 90 61 90 
2f7f8     73 90 74 90 
2f7fc     74 90 74 90 
2f800     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2f804     87 90 86 90 
2f808     87 90 86 90 
2f80c     99 90 99 90 
2f810     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2f814     AB 90 AB 90 
2f818     AC 90 AB 90 
2f81c     AB 90 BF 90 
2f820     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2f824     BE 90 D1 90 
2f828     D0 90 D1 90 
2f82c     D1 90 D1 90 
2f830     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2f834     E3 90 E4 90 
2f838     F6 90 F6 90 
2f83c     F6 90 F6 90 
2f840     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2f844     09 91 0A 91 
2f848     0A 91 1C 91 
2f84c     1C 91 1C 91 
2f850     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2f854     2F 91 2E 91 
2f858     2F 91 2F 91 
2f85c     2E 91 41 91 
2f860     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2f864     41 91 53 91 
2f868     54 91 54 91 
2f86c     53 91 54 91 
2f870     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2f874     67 91 67 91 
2f878     79 91 7A 91 
2f87c     79 91 78 91 
2f880     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2f884     8C 91 8B 91 
2f888     8C 91 8C 91 
2f88c     9E 91 9E 91 
2f890     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2f894     B1 91 B1 91 
2f898     B2 91 B1 91 
2f89c     B1 91 C4 91 
2f8a0     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2f8a4     C4 91 D6 91 
2f8a8     D7 91 D7 91 
2f8ac     D7 91 D6 91 
2f8b0     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2f8b4     EA 91 EA 91 
2f8b8     EA 91 FC 91 
2f8bc     FC 91 FB 91 
2f8c0     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2f8c4     0E 92 0F 92 
2f8c8     0F 92 0E 92 
2f8cc     21 92 21 92 
2f8d0     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2f8d4     21 92 34 92 
2f8d8     33 92 34 92 
2f8dc     34 92 47 92 
2f8e0     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2f8e4     46 92 47 92 
2f8e8     59 92 59 92 
2f8ec     59 92 59 92 
2f8f0     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2f8f4     6C 92 6C 92 
2f8f8     6B 92 7E 92 
2f8fc     7E 92 7E 92 
2f900     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2f904     92 92 91 92 
2f908     91 92 90 92 
2f90c     91 92 A4 92 
2f910     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2f914     A3 92 B6 92 
2f918     B6 92 B7 92 
2f91c     B7 92 B6 92 
2f920     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2f924     CA 92 C9 92 
2f928     CA 92 DC 92 
2f92c     DC 92 DC 92 
2f930     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2f934     EF 92 EF 92 
2f938     EF 92 EF 92 
2f93c     01 93 01 93 
2f940     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2f944     15 93 14 93 
2f948     14 93 14 93 
2f94c     14 93 27 93 
2f950     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2f954     27 93 39 93 
2f958     3A 93 39 93 
2f95c     39 93 39 93 
2f960     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2f964     4B 93 4C 93 
2f968     5F 93 5F 93 
2f96c     5F 93 5E 93 
2f970     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2f974     5F 93 84 93 
2f978     4C 93 96 93 
2f97c     5F 93 AE 94 
2f980     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2f984     7B C1 00 00 
2f988     00 00 00 00 
2f98c     00 00 00 00 
2f990     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f994     00 00 00 00 | 	byte	$00, $00, $00, $00
2f998     00 00 00 00 | zero long 0
2f99c     7A D7 00 80 
2f9a0     87 8A 48 8F 
2f9a4     EC 8C 76 8D 
2f9a8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2f9ac     3C 8D 82 8D 
2f9b0     42 8D 88 8D 
2f9b4     8C 8D 8E 8D 
2f9b8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2f9bc     97 8D DE 8D 
2f9c0     E1 8D F1 8E 
2f9c4     D8 8C A3 83 
2f9c8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2f9cc     65 71 C9 65 
2f9d0     FC 64 C4 65 
2f9d4     C1 65 BF 65 
2f9d8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2f9dc     B6 65 B4 65 
2f9e0     B2 65 AE 65 
2f9e4     AC 65 ED 65 
2f9e8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2f9ec     5E 65 25 66 
2f9f0     FA 62 23 6B 
2f9f4     B5 6C 61 0A 
2f9f8     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2f9fc     5D 90 BE 8D 
2fa00     47 8E C3 8D 
2fa04     09 8E C9 8D 
2fa08     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2fa0c     15 8E 19 8E 
2fa10     1B 8E 62 8E 
2fa14     64 8E 68 8E 
2fa18     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2fa1c     B5 8E 4C 90 
2fa20     FA 84 3C 9D 
2fa24     98 13 79 6D 
2fa28     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2fa2c     D9 66 50 66 
2fa30     D4 66 4B 66 
2fa34     8C 66 46 66 
2fa38     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2fa3c     81 66 3A 66 
2fa40     7C 66 36 66 
2fa44     76 66 30 66 
2fa48     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2fa4c     6B 66 88 72 
2fa50     BF 37 E7 B7 
2fa54     75 83 8B 8E 
2fa58     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2fa5c     94 8E 96 8E 
2fa60     DD 8E 9C 8E 
2fa64     E2 8E A2 8E 
2fa68     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2fa6c     EE 8E AE 8E 
2fa70     38 8F B5 8E 
2fa74     3F 8F FD 8E 
2fa78     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2fa7c     A5 87 1E E3 
2fa80     6D 5D FA 71 
2fa84     41 64 25 67 
2fa88     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2fa8c     D9 66 1A 67 
2fa90     18 67 15 67 
2fa94     12 67 0F 67 
2fa98     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2fa9c     07 67 C0 66 
2faa0     01 67 BC 66 
2faa4     B8 66 DE 64 
2faa8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2faac     43 E5 1F 8B 
2fab0     14 8A F1 90 
2fab4     1C 8F 63 8F 
2fab8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2fabc     29 8F 6E 8F 
2fac0     72 8F 75 8F 
2fac4     34 8F BE 8F 
2fac8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2facc     84 8F 87 8F 
2fad0     CC 8F 56 90 
2fad4     67 91 49 80 
2fad8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2fadc     46 77 A6 66 
2fae0     E8 66 B0 67 
2fae4     AD 67 ED 67 
2fae8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2faec     A2 67 E3 67 
2faf0     9D 67 9A 67 
2faf4     98 67 94 67 
2faf8     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2fafc     49 67 CD 67 
2fb00     28 65 5F 6E 
2fb04     82 67 3A 01 
2fb08     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2fb0c     C2 91 A9 8F 
2fb10     EF 8F AE 8F 
2fb14     F4 8F B5 8F 
2fb18     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2fb1c     01 90 03 90 
2fb20     07 90 09 90 
2fb24     0C 90 53 90 
2fb28     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2fb2c     18 90 44 93 
2fb30     85 84 D6 9D 
2fb34     87 1F 2F 75 
2fb38     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2fb3c     C4 68 F6 67 
2fb40     BE 68 F1 67 
2fb44     76 68 2E 68 
2fb48     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2fb4c     27 68 24 68 
2fb50     64 68 1E 68 
2fb54     5F 68 19 68 
2fb58     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2fb5c     DC 68 56 72 
2fb60     7E 36 C2 B8 
2fb64     D7 84 73 90 
2fb68     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2fb6c     7B 90 7F 90 
2fb70     82 90 84 90 
2fb74     CB 90 8B 90 
2fb78     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2fb7c     D7 90 96 90 
2fb80     20 91 59 90 
2fb84     25 91 A2 90 
2fb88     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2fb8c     D0 89 40 EE 
2fb90     12 64 C4 71 
2fb94     29 66 0C 69 
2fb98     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2fb9c     C0 68 02 69 
2fba0     FE 68 FB 68 
2fba4     F9 68 F6 68 
2fba8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2fbac     EE 68 A8 68 
2fbb0     2C 69 5F 68 
2fbb4     E2 68 81 66 
2fbb8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2fbbc     1E EB A6 8A 
2fbc0     73 8B 5E 93 
2fbc4     7B 90 48 91 
2fbc8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2fbcc     0D 91 11 91 
2fbd0     14 91 16 91 
2fbd4     5C 91 1C 91 
2fbd8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2fbdc     68 91 AF 91 
2fbe0     2A 91 B5 91 
2fbe4     75 91 1A 94 
2fbe8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2fbec     70 0E CB 6C 
2fbf0     5D 6E C4 67 
2fbf4     99 69 54 69 
2fbf8     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2fbfc     D2 69 49 69 
2fc00     89 69 86 69 
2fc04     40 69 C4 69 
2fc08     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2fc0c     35 69 76 69 
2fc10     58 67 EB 6D 
2fc14     E9 6D 89 0F 
2fc18     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2fc1c     33 94 94 91 
2fc20     D9 91 56 91 
2fc24     E0 91 9F 91 
2fc28     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2fc2c     EC 91 EE 91 
2fc30     F1 91 F4 91 
2fc34     F7 91 3D 92 
2fc38     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2fc3c     46 92 21 94 
2fc40     11 89 A4 9D 
2fc44     FD 0E 8F 6C 
2fc48     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2fc4c     28 6A E1 69 
2fc50     65 6A 1F 6A 
2fc54     5F 6A 1A 6A 
2fc58     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2fc5c     54 6A 0F 6A 
2fc60     4F 6A 09 6A 
2fc64     06 6A 03 6A 
2fc68     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2fc6c     23 68 69 77 
2fc70     3A 4D 38 CA 
2fc74     38 86 4E 91 
2fc78     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2fc7c     64 92 24 92 
2fc80     6A 92 2A 92 
2fc84     70 92 30 92 
2fc88     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2fc8c     7B 92 7E 92 
2fc90     C5 92 84 92 
2fc94     CB 92 8A 92 
2fc98     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2fc9c     4D 8D F9 E2 
2fca0     97 59 FE 74 
2fca4     DB 68 6D 6A 
2fca8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2fcac     A8 6A A5 6A 
2fcb0     A3 6A 9F 6A 
2fcb4     9D 6A 9B 6A 
2fcb8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2fcbc     D6 6A 8F 6A 
2fcc0     CF 6A 46 6A 
2fcc4     CA 6A E1 67 
2fcc8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2fccc     D3 F7 15 92 
2fcd0     90 8C BF 94 
2fcd4     A6 92 EB 92 
2fcd8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2fcdc     B1 92 F7 92 
2fce0     FA 92 FD 92 
2fce4     00 93 02 93 
2fce8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2fcec     4F 93 52 93 
2fcf0     54 93 22 94 
2fcf4     5A 93 8F 88 
2fcf8     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2fcfc     1C 77 07 6C 
2fd00     E8 69 7A 6B 
2fd04     34 6B 75 6B 
2fd08     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2fd0c     29 6B 26 6B 
2fd10     24 6B 21 6B 
2fd14     1D 6B 5E 6B 
2fd18     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2fd1c     12 6B 52 6B 
2fd20     34 69 34 6E 
2fd24     BA 73 A4 24 
2fd28     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2fd2c     7A 94 B3 93 
2fd30     72 93 31 93 
2fd34     78 93 7A 93 
2fd38     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2fd3c     83 93 86 93 
2fd40     89 93 D0 93 
2fd44     D2 93 D5 93 
2fd48     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2fd4c     DD 93 40 96 
2fd50     30 8B 99 9C 
2fd54     52 10 94 71 
2fd58     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2fd5c     46 6C 79 6B 
2fd60     40 6C B7 6B 
2fd64     F7 6B B1 6B 
2fd68     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2fd6c     EC 6B A5 6B 
2fd70     A2 6B 9F 6B 
2fd74     9D 6B 9A 6B 
2fd78     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2fd7c     C8 6A E4 76 
2fd80     20 4B F9 CE 
2fd84     2E 8A 1A 92 
2fd88     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2fd8c     FB 93 BA 93 
2fd90     01 94 03 94 
2fd94     4A 94 09 94 
2fd98     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2fd9c     55 94 14 94 
2fda0     9E 94 1A 94 
2fda4     61 94 20 94 
2fda8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2fdac     3E 87 E5 CD 
2fdb0     5F 50 6C 78 
2fdb4     B5 6A 04 6C 
2fdb8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2fdbc     83 6C 7F 6C 
2fdc0     7C 6C 36 6C 
2fdc4     76 6C 74 6C 
2fdc8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2fdcc     6B 6C 25 6C 
2fdd0     66 6C 1F 6C 
2fdd4     1D 6C 41 6A 
2fdd8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2fddc     BA FA FC 94 
2fde0     5B 8D 97 96 
2fde4     3B 94 C5 94 
2fde8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2fdec     89 94 8C 94 
2fdf0     8F 94 92 94 
2fdf4     94 94 DB 94 
2fdf8     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2fdfc     E4 94 E7 94 
2fe00     2D 95 74 95 
2fe04     C8 96 15 89 
2fe08     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2fe0c     CB 75 31 6F 
2fe10     7E 6B 10 6D 
2fe14     C9 6C 0A 6D 
2fe18     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2fe1c     BD 6C FF 6C 
2fe20     FB 6C F9 6C 
2fe24     B2 6C F3 6C 
2fe28     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2fe2c     A7 6C E8 6C 
2fe30     0D 6B 85 6F 
2fe34     C7 74 10 28 
2fe38     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2fe3c     96 96 47 95 
2fe40     06 95 0A 95 
2fe44     0C 95 0F 95 
2fe48     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2fe4c     17 95 5E 95 
2fe50     61 95 63 95 
2fe54     22 95 AC 95 
2fe58     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2fe5c     72 95 17 98 
2fe60     59 8E 01 96 
2fe64     CF FC 5A 68 
2fe68     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2fe6c     96 6D 50 6D 
2fe70     D5 6D 4A 6D 
2fe74     8C 6D 89 6D 
2fe78     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2fe7c     80 6D 3A 6D 
2fe80     7A 6D 77 6D 
2fe84     75 6D 71 6D 
2fe88     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2fe8c     18 6C BC 78 
2fe90     9A 4F 7E CF 
2fe94     1F 89 F1 93 
2fe98     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2fe9c     D2 95 4E 95 
2fea0     D7 95 53 95 
2fea4     DD 95 E0 95 
2fea8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2feac     A5 95 EB 95 
2feb0     EE 95 F0 95 
2feb4     37 96 B3 95 
2feb8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2febc     1A 98 D5 8D 
2fec0     C5 9F CD 0F 
2fec4     0F 71 F3 73 
2fec8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2fecc     D9 6D 5E 6E 
2fed0     D3 6D 58 6E 
2fed4     12 6E 0F 6E 
2fed8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2fedc     49 6E BF 6D 
2fee0     87 6E 76 6D 
2fee4     81 6E 11 6B 
2fee8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2feec     3F 09 44 95 
2fef0     E5 8D 3F 99 
2fef4     D4 95 A2 96 
2fef8     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2fefc     23 96 69 96 
2ff00     6B 96 6E 96 
2ff04     71 96 74 96 
2ff08     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2ff0c     BF 96 3C 96 
2ff10     C6 96 C8 96 
2ff14     A3 98 51 8D 
2ff18     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2ff1c     CF 75 29 73 
2ff20     90 6C EC 6E 
2ff24     62 6E E7 6E 
2ff28     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2ff2c     9A 6E 98 6E 
2ff30     95 6E 91 6E 
2ff34     8E 6E CF 6E 
2ff38     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2ff3c     40 6E C3 6E 
2ff40     E8 6C 45 6F 
2ff44     A5 7B C9 35 
2ff48     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2ff4c     2D 98 23 97 
2ff50     E1 96 A0 96 
2ff54     A4 96 EA 96 
2ff58     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2ff5c     AF 96 F4 96 
2ff60     F8 96 3E 97 
2ff64     FD 96 43 97 
2ff68     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2ff6c     08 97 6B 99 
2ff70     D6 92 88 91 
2ff74     D8 EE 84 66 
2ff78     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2ff7c     2E 6F E7 6E 
2ff80     6C 6F 24 6F 
2ff84     21 6F 1F 6F 
2ff88     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2ff8c     17 6F 13 6F 
2ff90     54 6F 0E 6F 
2ff94     0B 6F 4B 6F 
2ff98     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2ff9c     27 6D 1C 7B 
2ffa0     19 59 9F DB 
2ffa4     66 8E BC 94 
2ffa8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2ffac     67 97 26 97 
2ffb0     6D 97 2B 97 
2ffb4     72 97 32 97 
2ffb8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2ffbc     C1 97 7F 97 
2ffc0     C6 97 85 97 
2ffc4     CB 97 CE 97 
2ffc8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2ffcc     EC 8A C4 C6 
2ffd0     68 4C F4 7D 
2ffd4     63 6E E8 6E 
2ffd8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2ffdc     ED 6F A7 6F 
2ffe0     E7 6F A0 6F 
2ffe4     E1 6F 9B 6F 
2ffe8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2ffec     D5 6F 8F 6F 
2fff0     CE 6F 45 6F 
2fff4     86 6F 68 6D 
2fff8     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2fffc     C0 13 AD A2 
30000     A7 8E 79 99 
30004     E6 97 E8 97 
30008     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3000c     F1 97 F3 97 
30010     F6 97 F9 97 
30014     FB 97 FE 97 
30018     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3001c     4A 98 0A 98 
30020     93 98 0F 98 
30024     7F 9B BF 8C 
30028     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3002c     91 7B 62 73 
30030     1A 6E B9 70 
30034     EB 6F B3 70 
30038     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3003c     25 70 20 70 
30040     1E 70 1B 70 
30044     18 70 15 70 
30048     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
3004c     0D 70 09 70 
30050     07 70 03 70 
30054     01 70 FD 6F 
30058     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
3005c     F6 6F F2 6F 
30060     EF 6F EC 6F 
30064     2C 70 E6 6F 
30068     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
3006c     DD 6F 97 6F 
30070     D7 6F 84 6E 
30074     8F 6F 3F 7D 
30078     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3007a     00 00 00 00 | zero1 long 0
3007e     FF FF FF FF 
30082     FF FF       | atarist_spl file "atarist.spl" '512
30084     00 00 00 00 
30088     00 00 00 00 
3008c     00 00       | 	byte	$00[10]
3008e     17 7F F2 7F 
30092     B2 7F 72 7F 
30096     33 7F F4 7E 
3009a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3009e     36 7E F5 7D 
300a2     E9 51 F2 0D 
300a6     8E 00 F3 FD 
300aa     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
300ae     57 FD 58 FD 
300b2     5B FD 5C FD 
300b6     5C FD 60 7D 
300ba     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
300be     D6 7C 98 7C 
300c2     59 7C 1A 7C 
300c6     DC 7B 9E 7B 
300ca     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
300ce     F3 05 00 FD 
300d2     41 FB EA FA 
300d6     D9 FA DB FA 
300da     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
300de     E4 FA 9B 36 
300e2     F8 7A C0 7A 
300e6     84 7A 45 7A 
300ea     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
300ee     8E 79 51 79 
300f2     15 79 D7 78 
300f6     3C 1F EB FF 
300fa     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
300fe     6D F8 65 F8 
30102     68 F8 6D F8 
30106     70 F8 74 F8 
3010a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3010e     AB 60 79 60 
30112     4B 60 1A 60 
30116     E9 5F B9 5F 
3011a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3011e     FB 59 B2 0B 
30122     92 FA 3A F7 
30126     96 F6 79 F6 
3012a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3012e     82 F6 86 F6 
30132     8C F6 DB 5D 
30136     F1 5E C1 5E 
3013a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3013e     34 5E 04 5E 
30142     D6 5D A6 5D 
30146     78 5D D4 3E 
3014a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3014e     27 F5 BA F4 
30152     AB F4 AD F4 
30156     B2 F4 B8 F4 
3015a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3015e     26 5D 2B 5D 
30162     FC 5C CD 5C 
30166     9F 5C 70 5C 
3016a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3016e     E5 5B B8 5B 
30172     DB 24 A7 FC 
30176     D1 F4 4D F3 
3017a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3017e     04 F3 0B F3 
30182     11 F3 16 F3 
30186     DE 18 98 5B 
3018a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3018e     4E 4A 29 48 
30192     A0 47 6A 47 
30196     43 47 20 47 
3019a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3019e     E2 F6 98 F2 
301a2     C5 F1 A3 F1 
301a6     A3 F1 A8 F1 
301aa     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
301ae     BF F1 00 3D 
301b2     EF 46 CD 46 
301b6     AA 46 86 46 
301ba     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
301be     1C 46 F9 45 
301c2     D7 45 EE 43 
301c6     DE 02 E8 F3 
301ca     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
301ce     61 F0 65 F0 
301d2     6D F0 74 F0 
301d6     7C F0 84 F0 
301da     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
301de     8E 45 6D 45 
301e2     49 45 27 45 
301e6     05 45 E1 44 
301ea     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
301ee     F1 2F A9 FB 
301f2     8B F1 9B EF 
301f6     40 EF 36 EF 
301fa     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
301fe     4D EF 56 EF 
30202     5E EF 7B 44 
30206     8C 44 69 44 
3020a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3020e     03 44 E1 43 
30212     C0 43 F5 37 
30216     69 33 0F 11 
3021a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3021e     66 EE 37 EE 
30222     38 EE 40 EE 
30226     48 EE 51 EE 
3022a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3022e     7D 32 6A 32 
30232     51 32 37 32 
30236     1F 32 05 32 
3023a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3023e     B9 31 A1 31 
30242     F1 04 F4 F1 
30246     50 EE A0 ED 
3024a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3024e     93 ED 9A ED 
30252     A4 ED AD ED 
30256     F4 27 C1 31 
3025a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3025e     78 31 5F 31 
30262     46 31 2E 31 
30266     15 31 FC 30 
3026a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3026e     C4 EF 4A ED 
30272     DC EC CB EC 
30276     D2 EC DA EC 
3027a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3027e     F9 EC 64 2F 
30282     0A 31 F1 30 
30286     D9 30 C0 30 
3028a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3028e     78 30 5F 30 
30292     46 30 38 23 
30296     A6 F6 19 EE 
3029a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3029e     20 EC 28 EC 
302a2     32 EC 3C EC 
302a6     47 EC 51 EC 
302aa     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
302ae     A3 22 93 22 
302b2     7F 22 6E 22 
302b6     5D 22 4C 22 
302ba     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
302be     77 09 76 F1 
302c2     CC EC F0 EB 
302c6     CD EB CE EB 
302ca     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
302ce     ED EB F5 EB 
302d2     3E F6 6B 22 
302d6     5F 22 4E 22 
302da     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
302de     1B 22 0B 22 
302e2     FA 21 E9 21 
302e6     D8 21 4D FF 
302ea     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
302ee     92 EB 7B EB 
302f2     82 EB 8C EB 
302f6     97 EB A1 EB 
302fa     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
302fe     15 22 04 22 
30302     F3 21 E3 21 
30306     D2 21 C0 21 
3030a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3030e     8E 21 7D 21 
30312     9A F8 A4 ED 
30316     8E EB 2F EB 
3031a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3031e     37 EB 42 EB 
30322     4C EB 57 EB 
30326     B2 17 22 19 
3032a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3032e     FD 18 EF 18 
30332     E3 18 D6 18 
30336     CA 18 BD 18 
3033a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3033e     60 EC 35 EB 
30342     01 EB 01 EB 
30346     0C EB 16 EB 
3034a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3034e     34 EB D0 18 
30352     00 19 F4 18 
30356     E8 18 DA 18 
3035a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3035e     B6 18 A9 18 
30362     9D 18 91 05 
30366     F0 EF CA EB 
3036a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3036e     E8 EA F2 EA 
30372     FE EA 07 EB 
30376     12 EB C2 EF 
3037a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3037e     D9 18 CD 18 
30382     C0 18 B3 18 
30386     A7 18 9B 18 
3038a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3038e     B8 FC 30 EE 
30392     61 EB DC EA 
30396     CD EA D2 EA 
3039a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3039e     F3 EA FE EA 
303a2     D2 09 D1 18 
303a6     C3 18 17 18 
303aa     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
303ae     66 11 52 11 
303b2     49 11 41 11 
303b6     38 11 E0 F4 
303ba     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
303be     C9 EA C5 EA 
303c2     CF EA DB EA 
303c6     E6 EA EF EA 
303ca     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
303ce     89 11 80 11 
303d2     78 11 6E 11 
303d6     67 11 5D 11 
303da     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
303de     43 11 32 0D 
303e2     9C F1 07 EC 
303e6     F8 EA CD EA 
303ea     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
303ee     E4 EA ED EA 
303f2     F8 EA 02 EB 
303f6     55 11 91 11 
303fa     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
303fe     75 11 6E 11 
30402     64 11 5E 11 
30406     54 11 4A 11 
3040a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3040e     A8 EB F1 EA 
30412     D9 EA DC EA 
30416     E8 EA F1 EA 
3041a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3041e     A6 EB 9E 11 
30422     A0 11 96 11 
30426     8D 11 85 11 
3042a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3042e     6A 11 CA 0D 
30432     36 0B 57 F8 
30436     6C ED 57 EB 
3043a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3043e     F4 EA FF EA 
30442     09 EB 15 EB 
30446     1E EB 1A FD 
3044a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3044e     ED 0A E8 0A 
30452     E2 0A DC 0A 
30456     D6 0A D1 0A 
3045a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3045e     F8 F3 BC EC 
30462     57 EB 1E EB 
30466     18 EB 24 EB 
3046a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3046e     42 EB 4D EB 
30472     08 09 20 0B 
30476     1A 0B 14 0B 
3047a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3047e     04 0B FE 0A 
30482     F9 0A F2 0A 
30486     84 08 3A F1 
3048a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3048e     42 EB 42 EB 
30492     4E EB 57 EB 
30496     62 EB 6B EB 
3049a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3049e     48 0B 43 0B 
304a2     3C 0B 36 0B 
304a6     31 0B 2C 0B 
304aa     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
304ae     1B 0B 5C 00 
304b2     6A EF 1B EC 
304b6     81 EB 6A EB 
304ba     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
304be     85 EB 8E EB 
304c2     99 EB A3 EB 
304c6     DD 05 E5 05 
304ca     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
304ce     DB 05 D8 05 
304d2     D5 05 D1 05 
304d6     D0 05 CB 05 
304da     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
304de     0C EC BB EB 
304e2     B3 EB BB EB 
304e6     C5 EB D0 EB 
304ea     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
304ee     E4 F7 2C 06 
304f2     28 06 24 06 
304f6     22 06 1F 06 
304fa     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
304fe     16 06 14 06 
30502     0F 06 D0 F3 
30506     65 ED 2D EC 
3050a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3050e     01 EC 0A EC 
30512     14 EC 1E EC 
30516     29 EC FB 03 
3051a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3051e     63 06 60 06 
30522     5E 06 59 06 
30526     58 06 54 06 
3052a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3052e     69 F1 21 ED 
30532     55 EC 33 EC 
30536     36 EC 40 EC 
3053a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3053e     5C EC 68 EC 
30542     92 02 D9 02 
30546     D7 02 D7 02 
3054a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3054e     D1 02 D1 02 
30552     CE 02 CD 02 
30556     5D FC 80 EF 
3055a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3055e     83 EC 8A EC 
30562     93 EC 9C EC 
30566     A5 EC B1 EC 
3056a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3056e     2B 03 2A 03 
30572     29 03 26 03 
30576     25 03 24 03 
3057a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3057e     1F 03 70 F7 
30582     D0 EE 27 ED 
30586     DB EC D4 EC 
3058a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3058e     F0 EC FA EC 
30592     02 ED F9 F4 
30596     7B 03 7C 03 
3059a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3059e     75 03 73 03 
305a2     72 03 70 03 
305a6     6D 03 6C 03 
305aa     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
305ae     54 ED 22 ED 
305b2     22 ED 2C ED 
305b6     35 ED 3F ED 
305ba     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
305be     14 01 C3 03 
305c2     C1 03 C0 03 
305c6     5F 01 A5 00 
305ca     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
305ce     7B 00 7C 00 
305d2     20 00 85 F1 
305d6     2A EE 89 ED 
305da     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
305de     80 ED 87 ED 
305e2     90 ED 9A ED 
305e6     A3 ED 73 00 
305ea     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
305ee     D0 00 D0 00 
305f2     D0 00 D0 00 
305f6     D0 00 CF 00 
305fa     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
305fe     80 F0 3D EE 
30602     D5 ED C7 ED 
30606     CD ED D6 ED 
3060a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3060e     F2 ED FA ED 
30612     1D 01 29 01 
30616     27 01 27 01 
3061a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3061e     25 01 26 01 
30622     26 01 23 01 
30626     D0 F7 EC EF 
3062a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3062e     1C EE 24 EE 
30632     2D EE 37 EE 
30636     40 EE 47 EE 
3063a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3063e     7D 01 7B 01 
30642     7A 01 7A 01 
30646     79 01 78 01 
3064a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3064e     84 FE DE F3 
30652     6C EF 93 EE 
30656     72 EE 72 EE 
3065a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3065e     8B EE 95 EE 
30662     9E EE 15 FC 
30666     67 FE 67 FE 
3066a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3066e     6B FE 6B FE 
30672     6D FE 6D FE 
30676     6D FE 6F FE 
3067a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3067e     DF EE CC EE 
30682     CF EE D9 EE 
30686     E1 EE EA EE 
3068a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3068e     5A FE C4 FE 
30692     C3 FE C5 FE 
30696     C6 FE C6 FE 
3069a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3069e     C8 FE C7 FE 
306a2     DA FB 85 F1 
306a6     8D EF 31 EF 
306aa     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
306ae     34 EF 3E EF 
306b2     46 EF 4F EF 
306b6     57 EF 0D FF 
306ba     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
306be     1F FF 1F FF 
306c2     21 FF 21 FF 
306c6     21 FF 21 FF 
306ca     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
306ce     15 F1 BE EF 
306d2     84 EF 7E EF 
306d6     88 EF 8F EF 
306da     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
306de     A9 EF 06 F2 
306e2     A6 FC AB FC 
306e6     AD FC AE FC 
306ea     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
306ee     B2 FC B4 FC 
306f2     B6 FC B7 FC 
306f6     8B F4 BD F0 
306fa     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
306fe     E4 EF EE EF 
30702     F6 EF FD EF 
30706     04 F0 0E F0 
3070a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
3070e     0B FD 0D FD 
30712     0F FD 11 FD 
30716     11 FD 13 FD 
3071a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
3071e     17 FD 64 F3 
30722     CD F0 52 F0 
30726     41 F0 45 F0 
3072a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
3072e     5B F0 64 F0 
30732     6D F0 FB FC 
30736     65 FD 68 FD 
3073a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3073e     6C FD 6D FD 
30742     6F FD 70 FD 
30746     72 FD B3 FB 
3074a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3074e     A4 F0 99 F0 
30752     A0 F0 A8 F0 
30756     AE F0 B9 F0 
3075a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3075e     CB FB DD FB 
30762     DE FB E0 FB 
30766     E3 FB E3 FB 
3076a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3076e     E9 FB EC FB 
30772     62 F7 27 F2 
30776     2A F1 FF F0 
3077a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3077e     0C F1 13 F1 
30782     1B F1 23 F1 
30786     33 F2 3C FC 
3078a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3078e     42 FC 45 FC 
30792     47 FC 48 FC 
30796     4A FC 4C FC 
3079a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3079e     20 F2 77 F1 
307a2     5C F1 5F F1 
307a6     64 F1 6C F1 
307aa     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
307ae     83 F1 DC F8 
307b2     9A FC 9A FC 
307b6     9B FC 9E FC 
307ba     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
307be     A3 FC A4 FC 
307c2     A6 FC A9 FC 
307c6     90 F4 33 F2 
307ca     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
307ce     BA F1 BF F1 
307d2     C7 F1 CE F1 
307d6     D6 F1 DC F1 
307da     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
307de     F3 FC F5 FC 
307e2     FE FB 79 FB 
307e6     62 FB 5F FB 
307ea     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
307ee     6F FA AF F3 
307f2     53 F2 12 F2 
307f6     0F F2 15 F2 
307fa     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
307fe     2A F2 32 F2 
30802     38 F2 9A FB 
30806     AF FB B1 FB 
3080a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3080e     B7 FB B8 FB 
30812     BA FB BC FB 
30816     C1 FB 3B F8 
3081a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
3081e     6E F2 6C F2 
30822     74 F2 7A F2 
30826     81 F2 87 F2 
3082a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
3082e     06 FC 09 FC 
30832     0C FC 0E FC 
30836     0F FC 12 FC 
3083a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3083e     17 FC 1A FC 
30842     B2 F6 7B F3 
30846     DD F2 C5 F2 
3084a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3084e     D4 F2 DB F2 
30852     E0 F2 E8 F2 
30856     28 F8 60 FC 
3085a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3085e     64 FC 66 FC 
30862     68 FC 6A FC 
30866     6D FC 52 FC 
3086a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3086e     78 F3 24 F3 
30872     1A F3 1E F3 
30876     24 F3 2A F3 
3087a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3087e     3D F3 80 FA 
30882     0C FB 0F FB 
30886     10 FB 14 FB 
3088a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3088e     1B FB 1D FB 
30892     1F FB 92 FA 
30896     DE F4 AE F3 
3089a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3089e     79 F3 7E F3 
308a2     84 F3 8C F3 
308a6     92 F3 97 F3 
308aa     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
308ae     67 FB 69 FB 
308b2     6B FB 6F FB 
308b6     71 FB 72 FB 
308ba     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
308be     E3 F8 BA F4 
308c2     EE F3 CC F3 
308c6     CA F3 CF F3 
308ca     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
308ce     E2 F3 E8 F3 
308d2     ED F3 B7 FB 
308d6     BC FB BE FB 
308da     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
308de     C4 FB C6 FB 
308e2     C8 FB C9 FB 
308e6     CC FB 8F F7 
308ea     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
308ee     1E F4 1E F4 
308f2     24 F4 2A F4 
308f6     30 F4 38 F4 
308fa     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
308fe     AD FA B1 FA 
30902     B4 FA B6 FA 
30906     BA FA BB FA 
3090a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3090e     C2 FA C6 FA 
30912     55 F6 C6 F4 
30916     7D F4 72 F4 
3091a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3091e     83 F4 89 F4 
30922     8F F4 94 F4 
30926     66 FA 03 FB 
3092a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3092e     0A FB 0E FB 
30932     10 FB 11 FB 
30936     16 FB 18 FB 
3093a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3093e     F9 F4 CA F4 
30942     C5 F4 CB F4 
30946     D1 F4 D7 F4 
3094a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3094e     E8 F4 3F FB 
30952     56 FB 58 FB 
30956     5A FB 5E FB 
3095a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3095e     64 FB 64 FB 
30962     69 FB 99 F9 
30966     E9 F5 33 F5 
3096a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3096e     1D F5 22 F5 
30972     27 F5 2E F5 
30976     32 F5 37 F5 
3097a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3097e     BC FA BC FA 
30982     C1 FA C2 FA 
30986     C4 FA C8 FA 
3098a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3098e     F9 F7 DB F5 
30992     78 F5 69 F5 
30996     6A F5 70 F5 
3099a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3099e     7F F5 85 F5 
309a2     6E F7 06 FB 
309a6     0A FB 0B FB 
309aa     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
309ae     14 FB 15 FB 
309b2     18 FB 1B FB 
309b6     1D FB 70 F7 
309ba     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
309be     B6 F5 BB F5 
309c2     C0 F5 C6 F5 
309c6     CA F5 CF F5 
309ca     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
309ce     54 FB 56 FB 
309d2     5A FB 5B FB 
309d6     5E FB 5F FB 
309da     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
309de     67 FB 52 FB 
309e2     29 F7 33 F6 
309e6     06 F6 02 F6 
309ea     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
309ee     10 F6 16 F6 
309f2     1A F6 1F F6 
309f6     81 FB 9F FB 
309fa     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
309fe     51 FB F2 FA 
30a02     E3 FA E3 FA 
30a06     E5 FA E9 FA 
30a0a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
30a0e     64 F6 4D F6 
30a12     4D F6 53 F6 
30a16     57 F6 5C F6 
30a1a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
30a1e     6A F6 19 FB 
30a22     1E FB 22 FB 
30a26     23 FB 24 FB 
30a2a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
30a2e     2C FB 2E FB 
30a32     32 FB F0 F8 
30a36     01 F7 A5 F6 
30a3a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
30a3e     9F F6 A3 F6 
30a42     A6 F6 AC F6 
30a46     B0 F6 EB F7 
30a4a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
30a4e     68 FB 6C FB 
30a52     6E FB 71 FB 
30a56     72 FB 74 FB 
30a5a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
30a5e     71 F8 21 F7 
30a62     E5 F6 DD F6 
30a66     E1 F6 E6 F6 
30a6a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
30a6e     F5 F6 F7 F6 
30a72     F7 FA AB FB 
30a76     AD FB AF FB 
30a7a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
30a7e     B6 FB B9 FB 
30a82     BB FB BC FB 
30a86     21 FB 07 F8 
30a8a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
30a8e     22 F7 26 F7 
30a92     2B F7 2E F7 
30a96     34 F7 38 F7 
30a9a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
30a9e     13 FB 16 FB 
30aa2     17 FB 1B FB 
30aa6     1E FB 20 FB 
30aaa     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
30aae     26 FB 77 FA 
30ab2     F3 F7 7C F7 
30ab6     67 F7 6A F7 
30aba     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
30abe     74 F7 7A F7 
30ac2     7E F7 82 F7 
30ac6     53 FB 5A FB 
30aca     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
30ace     5F FB 63 FB 
30ad2     65 FB 67 FB 
30ad6     69 FB 6A FB 
30ada     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
30ade     B5 F7 A9 F7 
30ae2     AD F7 B0 F7 
30ae6     B5 F7 B8 F7 
30aea     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
30aee     6E F8 99 FB 
30af2     9C FB 9D FB 
30af6     9F FB A4 FB 
30afa     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
30afe     A9 FB AB FB 
30b02     AD FB 46 F9 
30b06     26 F8 F0 F7 
30b0a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
30b0e     F4 F7 F8 F7 
30b12     FB F7 FF F7 
30b16     03 F8 65 FA 
30b1a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
30b1e     2B FB 2F FB 
30b22     30 FB 32 FB 
30b26     34 FB 38 FB 
30b2a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
30b2e     E9 F8 4A F8 
30b32     2E F8 2C F8 
30b36     2F F8 36 F8 
30b3a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
30b3e     41 F8 44 F8 
30b42     4A FB 67 FB 
30b46     68 FB 6B FB 
30b4a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
30b4e     73 FB 74 FB 
30b52     78 FB 7A FB 
30b56     14 FB E7 F8 
30b5a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
30b5e     6D F8 70 F8 
30b62     73 F8 78 F8 
30b66     7C F8 80 F8 
30b6a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
30b6e     A6 FB A7 FB 
30b72     A9 FB AC FB 
30b76     AF FB B1 FB 
30b7a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
30b7e     B7 FB 73 FA 
30b82     F8 F8 B4 F8 
30b86     A9 F8 AB F8 
30b8a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
30b8e     B4 F8 B8 F8 
30b92     BB F8 FA F8 
30b96     64 FB 65 FB 
30b9a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
30b9e     6D FB 6F FB 
30ba2     70 FB 74 FB 
30ba6     77 FB 77 FB 
30baa     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
30bae     E9 F8 E4 F8 
30bb2     E8 F8 EB F8 
30bb6     EE F8 F2 F8 
30bba     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
30bbe     B5 FA 9F FB 
30bc2     A1 FB A4 FB 
30bc6     A5 FB A9 FB 
30bca     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
30bce     AE FB B1 FB 
30bd2     B2 FB C7 F9 
30bd6     39 F9 22 F9 
30bda     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
30bde     26 F9 2A F9 
30be2     2E F9 32 F9 
30be6     33 F9 BA FB 
30bea     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
30bee     DE FB E1 FB 
30bf2     E2 FB E4 FB 
30bf6     E5 FB E7 FB 
30bfa     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
30bfe     C5 F9 67 F9 
30c02     57 F9 56 F9 
30c06     5B F9 5F F9 
30c0a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
30c0e     68 F9 6C F9 
30c12     0B FC 11 FC 
30c16     14 FC 15 FC 
30c1a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
30c1e     B5 FB B5 FB 
30c22     B6 FB B8 FB 
30c26     E9 FA C8 F9 
30c2a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
30c2e     90 F9 94 F9 
30c32     95 F9 99 F9 
30c36     9D F9 9F F9 
30c3a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
30c3e     DE FB DF FB 
30c42     E2 FB E4 FB 
30c46     E6 FB E8 FB 
30c4a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
30c4e     EF FB AC FA 
30c52     E9 F9 C7 F9 
30c56     C3 F9 C8 F9 
30c5a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
30c5e     D0 F9 D4 F9 
30c62     D6 F9 0E FB 
30c66     11 FC 13 FC 
30c6a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
30c6e     19 FC 1B FC 
30c72     1D FC 1E FC 
30c76     21 FC 22 FC 
30c7a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
30c7e     F7 F9 F7 F9 
30c82     FB F9 FE F9 
30c86     00 FA 03 FA 
30c8a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
30c8e     1B FC 45 FC 
30c92     46 FC 48 FC 
30c96     4A FC 4B FC 
30c9a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
30c9e     52 FC 54 FC 
30ca2     F3 FB 82 FA 
30ca6     35 FA 28 FA 
30caa     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
30cae     31 FA 32 FA 
30cb2     37 FA 37 FA 
30cb6     3C FA 00 FC 
30cba     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
30cbe     09 FC 0B FC 
30cc2     0F FC 12 FC 
30cc6     12 FC 15 FC 
30cca     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
30cce     8D FA 60 FA 
30cd2     5B FA 5C FA 
30cd6     60 FA 61 FA 
30cda     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
30cde     6C FA 6D FA 
30ce2     37 FC 3A FC 
30ce6     3B FC 3D FC 
30cea     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
30cee     43 FC 44 FC 
30cf2     45 FC 47 FC 
30cf6     51 FB AB FA 
30cfa     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
30cfe     8E FA 91 FA 
30d02     93 FA 95 FA 
30d06     98 FA 9B FA 
30d0a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
30d0e     68 FC 6A FC 
30d12     6C FC 6E FC 
30d16     70 FC 72 FC 
30d1a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
30d1e     76 FC 3B FB 
30d22     D0 FA BB FA 
30d26     B9 FA BD FA 
30d2a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
30d2e     C4 FA C6 FA 
30d32     CA FA 13 FC 
30d36     3A FC 3A FC 
30d3a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
30d3e     41 FC 43 FC 
30d42     44 FC 47 FC 
30d46     48 FC 3C FC 
30d4a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
30d4e     E6 FA E8 FA 
30d52     EB FA EE FA 
30d56     F0 FA F2 FA 
30d5a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
30d5e     61 FC 66 FC 
30d62     68 FC 6B FC 
30d66     6C FC 6E FC 
30d6a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
30d6e     73 FC 75 FC 
30d72     13 FC 3F FB 
30d76     17 FB 12 FB 
30d7a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
30d7e     1A FB 1D FB 
30d82     1F FB 20 FB 
30d86     23 FB 92 FC 
30d8a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
30d8e     96 FC 97 FC 
30d92     9A FC 9C FC 
30d96     9E FC 9F FC 
30d9a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
30d9e     5A FB 41 FB 
30da2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
30da6     00 00 00 00 | zero2 long 0
30daa     01 00 00 00 
30dae     00 00 00 00 
30db2     00 00 00 00 
30db6     00 00 00 00 | mouse  file "mouse2.def"
30dba     00 00 00 00 
30dbe     00 00 00 00 
30dc2     00 00 00 00 
30dc6     00 00 00 00 | 	byte	$00[16]
30dca     01 01 00 00 
30dce     00 00 00 00 
30dd2     00 00 00 00 
30dd6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30dda     00 00 00 00 
30dde     00 00 00 00 
30de2     00 00 00 00 
30de6     00 00 00 00 | 	byte	$00[16]
30dea     01 0D 01 00 
30dee     00 00 00 00 
30df2     00 00 00 00 
30df6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30dfa     00 00 00 00 
30dfe     00 00 00 00 
30e02     00 00 00 00 
30e06     00 00 00 00 | 	byte	$00[16]
30e0a     01 0D 0D 01 
30e0e     00 00 00 00 
30e12     00 00 00 00 
30e16     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e1a     00 00 00 00 
30e1e     00 00 00 00 
30e22     00 00 00 00 
30e26     00 00 00 00 | 	byte	$00[16]
30e2a     01 0D 0D 0D 
30e2e     01 00 00 00 
30e32     00 00 00 00 
30e36     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e3a     00 00 00 00 
30e3e     00 00 00 00 
30e42     00 00 00 00 
30e46     00 00 00 00 | 	byte	$00[16]
30e4a     01 0D 0D 0D 
30e4e     0D 01 00 00 
30e52     00 00 00 00 
30e56     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e5a     00 00 00 00 
30e5e     00 00 00 00 
30e62     00 00 00 00 
30e66     00 00 00 00 | 	byte	$00[16]
30e6a     01 0D 0D 0D 
30e6e     0D 0D 01 00 
30e72     00 00 00 00 
30e76     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
30e7a     00 00 00 00 
30e7e     00 00 00 00 
30e82     00 00 00 00 
30e86     00 00 00 00 | 	byte	$00[16]
30e8a     01 0D 0D 0D 
30e8e     0D 0D 0D 01 
30e92     00 00 00 00 
30e96     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
30e9a     00 00 00 00 
30e9e     00 00 00 00 
30ea2     00 00 00 00 
30ea6     00 00 00 00 | 	byte	$00[16]
30eaa     01 0D 0D 0D 
30eae     0D 0D 0D 0C 
30eb2     01 00 00 00 
30eb6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
30eba     00 00 00 00 
30ebe     00 00 00 00 
30ec2     00 00 00 00 
30ec6     00 00 00 00 | 	byte	$00[16]
30eca     01 0D 0D 0D 
30ece     0D 0D 0D 0D 
30ed2     0C 01 00 00 
30ed6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
30eda     00 00 00 00 
30ede     00 00 00 00 
30ee2     00 00 00 00 
30ee6     00 00 00 00 | 	byte	$00[16]
30eea     01 0D 0D 0D 
30eee     0D 0D 0D 0D 
30ef2     0D 0C 01 00 
30ef6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
30efa     00 00 00 00 
30efe     00 00 00 00 
30f02     00 00 00 00 
30f06     00 00 00 00 | 	byte	$00[16]
30f0a     01 0D 0D 0D 
30f0e     0D 0D 0D 0D 
30f12     0D 0D 0B 01 
30f16     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
30f1a     00 00 00 00 
30f1e     00 00 00 00 
30f22     00 00 00 00 
30f26     00 00 00 00 | 	byte	$00[16]
30f2a     01 0D 0D 0D 
30f2e     0C 0D 0D 03 
30f32     01 01 01 01 
30f36     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
30f3a     00 00 00 00 
30f3e     00 00 00 00 
30f42     00 00 00 00 
30f46     00 00 00 00 | 	byte	$00[16]
30f4a     01 0D 0D 0C 
30f4e     01 09 0D 03 
30f52     00 00 00 00 
30f56     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
30f5a     00 00 00 00 
30f5e     00 00 00 00 
30f62     00 00 00 00 
30f66     00 00 00 00 | 	byte	$00[16]
30f6a     01 0D 0C 01 
30f6e     00 01 0D 0B 
30f72     01 00 00 00 
30f76     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
30f7a     00 00 00 00 
30f7e     00 00 00 00 
30f82     00 00 00 00 
30f86     00 00 00 00 | 	byte	$00[16]
30f8a     01 0C 01 00 
30f8e     00 01 0A 0D 
30f92     01 00 00 00 
30f96     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
30f9a     00 00 00 00 
30f9e     00 00 00 00 
30fa2     00 00 00 00 
30fa6     00 00 00 00 | 	byte	$00[16]
30faa     01 01 00 00 
30fae     00 00 01 0D 
30fb2     0B 01 00 00 
30fb6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
30fba     00 00 00 00 
30fbe     00 00 00 00 
30fc2     00 00 00 00 
30fc6     00 00 00 00 
30fca     00 00 00 00 
30fce     00 00       | 	byte	$00[22]
30fd0     01 0B 0D 01 
30fd4     00 00 00 00 
30fd8     00 00 00 00 
30fdc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30fe0     00 00 00 00 
30fe4     00 00 00 00 
30fe8     00 00 00 00 
30fec     00 00 00 00 
30ff0     00          | 	byte	$00[17]
30ff1     01 01 00 00 
30ff5     00 00 00 00 
30ff9     00 00 00 00 
30ffd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31001     00 00 00 00 
      ...             
311a5     00 00 00 00 
311a9     00          | 	byte	$00[425]
311aa     73 32 00 04 
311ae     00 00 10 00 
311b2     00 00 00 00 
311b6     00 00 00 00 | atari2 file "atari2.s2"
311ba     43 87 43 87 
311be     43 87 44 87 
311c2     43 87 44 87 
311c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
311ca     43 87 43 87 
311ce     43 87 44 87 
311d2     43 87 43 87 
311d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
311da     44 87 43 87 
311de     44 87 43 87 
311e2     43 87 43 87 
311e6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
311ea     43 87 43 87 
311ee     44 87 43 87 
311f2     44 87 44 87 
311f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
311fa     43 87 43 87 
311fe     44 87 43 87 
31202     43 87 42 87 
31206     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3120a     43 87 43 87 
3120e     43 87 43 87 
31212     44 87 43 87 
31216     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3121a     44 87 44 87 
3121e     43 87 44 87 
31222     43 87 44 87 
31226     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3122a     44 87 43 87 
3122e     44 87 44 87 
31232     43 87 43 87 
31236     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3123a     43 87 44 87 
3123e     44 87 43 87 
31242     43 87 44 87 
31246     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3124a     43 87 43 87 
3124e     43 87 43 87 
31252     43 87 43 87 
31256     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3125a     42 87 43 87 
3125e     44 87 42 87 
31262     43 87 43 87 
31266     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3126a     43 87 44 87 
3126e     44 87 43 87 
31272     43 87 43 87 
31276     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3127a     43 87 5C 87 
3127e     EE 86 AC 87 
31282     4C 7C A3 78 
31286     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3128a     BC 78 BB 78 
3128e     BD 78 BC 78 
31292     BB 78 BD 78 
31296     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3129a     BB 78 BB 78 
3129e     BC 78 BC 78 
312a2     BC 78 BB 78 
312a6     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
312aa     BC 78 BC 78 
312ae     BC 78 BC 78 
312b2     BC 78 BC 78 
312b6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
312ba     BB 78 BC 78 
312be     A0 78 4C 7C 
312c2     11 7A 29 89 
312c6     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
312ca     44 87 43 87 
312ce     44 87 43 87 
312d2     43 87 42 87 
312d6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
312da     43 87 43 87 
312de     44 87 ED 85 
312e2     71 85 52 79 
312e6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
312ea     BC 78 BC 78 
312ee     BC 78 BC 78 
312f2     BC 78 BC 78 
312f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
312fa     BC 78 BC 78 
312fe     BC 78 A0 78 
31302     CF 7A B9 81 
31306     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3130a     44 87 43 87 
3130e     43 87 44 87 
31312     43 87 44 87 
31316     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3131a     43 87 43 87 
3131e     43 87 43 87 
31322     44 87 43 87 
31326     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3132a     43 87 43 87 
3132e     44 87 43 87 
31332     44 87 43 87 
31336     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3133a     44 87 43 87 
3133e     43 87 43 87 
31342     5A 87 39 81 
31346     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3134a     A5 78 BC 78 
3134e     BB 78 BC 78 
31352     BB 78 BC 78 
31356     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3135a     BC 78 BC 78 
3135e     BC 78 BC 78 
31362     BC 78 8F 79 
31366     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3136a     09 85 47 87 
3136e     43 87 43 87 
31372     42 87 42 87 
31376     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3137a     43 87 43 87 
3137e     43 87 43 87 
31382     43 87 44 87 
31386     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3138a     43 87 43 87 
3138e     44 87 43 87 
31392     42 87 43 87 
31396     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3139a     44 87 43 87 
3139e     43 87 43 87 
313a2     44 87 44 87 
313a6     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
313aa     94 78 55 7A 
313ae     B9 78 BC 78 
313b2     BC 78 BC 78 
313b6     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
313ba     BC 78 BB 78 
313be     BC 78 BC 78 
313c2     BC 78 BC 78 
313c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
313ca     BB 78 BC 78 
313ce     BC 78 BC 78 
313d2     BB 78 BC 78 
313d6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
313da     BC 78 BC 78 
313de     BD 78 BC 78 
313e2     BC 78 BB 78 
313e6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
313ea     94 78 B3 84 
313ee     36 84 4A 87 
313f2     43 87 43 87 
313f6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
313fa     43 87 44 87 
313fe     43 87 43 87 
31402     43 87 43 87 
31406     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3140a     43 87 44 87 
3140e     43 87 44 87 
31412     43 87 43 87 
31416     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3141a     43 87 43 87 
3141e     43 87 45 87 
31422     43 87 43 87 
31426     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3142a     43 87 44 87 
3142e     44 87 44 87 
31432     43 87 43 87 
31436     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3143a     43 87 42 87 
3143e     43 87 43 87 
31442     44 87 43 87 
31446     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3144a     54 87 3C 82 
3144e     36 83 52 79 
31452     C6 78 BC 78 
31456     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3145a     BB 78 BB 78 
3145e     BC 78 BC 78 
31462     BC 78 BC 78 
31466     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3146a     BD 78 ED 78 
3146e     1B 79 F4 83 
31472     4D 83 4E 87 
31476     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3147a     44 87 43 87 
3147e     42 87 44 87 
31482     43 87 42 87 
31486     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3148a     43 87 54 87 
3148e     26 82 B3 84 
31492     D6 77 BB 78 
31496     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3149a     BC 78 BB 78 
3149e     BB 78 BB 78 
314a2     BB 78 BB 78 
314a6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
314aa     BC 78 BC 78 
314ae     26 79 18 75 
314b2     36 83 1F 84 
314b6     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
314ba     43 87 43 87 
314be     43 87 43 87 
314c2     43 87 44 87 
314c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
314ca     43 87 44 87 
314ce     44 87 43 87 
314d2     43 87 43 87 
314d6     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
314da     43 87 43 87 
314de     43 87 43 87 
314e2     44 87 44 87 
314e6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
314ea     44 87 43 87 
314ee     43 87 43 87 
314f2     43 87 44 87 
314f6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
314fa     44 87 44 87 
314fe     44 87 43 87 
31502     44 87 43 87 
31506     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3150a     43 87 43 87 
3150e     43 87 44 87 
31512     44 87 43 87 
31516     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3151a     43 87 43 87 
3151e     43 87 43 87 
31522     43 87 44 87 
31526     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3152a     43 87 44 87 
3152e     43 87 44 87 
31532     19 87 7D 86 
31536     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3153a     B1 78 BC 78 
3153e     BC 78 BC 78 
31542     BC 78 BC 78 
31546     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3154a     BC 78 BC 78 
3154e     BD 78 BC 78 
31552     B7 78 3B 7B 
31556     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3155a     96 86 44 87 
3155e     43 87 43 87 
31562     43 87 43 87 
31566     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3156a     44 87 44 87 
3156e     43 87 44 87 
31572     43 87 44 87 
31576     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3157a     43 87 44 87 
3157e     43 87 44 87 
31582     43 87 44 87 
31586     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3158a     43 87 44 87 
3158e     43 87 43 87 
31592     44 87 43 87 
31596     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3159a     44 87 44 87 
3159e     43 87 43 87 
315a2     43 87 44 87 
315a6     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
315aa     43 87 43 87 
315ae     43 87 43 87 
315b2     44 87 44 87 
315b6     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
315ba     36 83 CF 7A 
315be     AB 78 BB 78 
315c2     BC 78 BC 78 
315c6     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
315ca     BB 78 BC 78 
315ce     BC 78 BC 78 
315d2     BC 78 BC 78 
315d6     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
315da     BC 78 BC 78 
315de     BC 78 BB 78 
315e2     BC 78 BC 78 
315e6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
315ea     BB 78 BC 78 
315ee     BB 78 BC 78 
315f2     BC 78 BD 78 
315f6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
315fa     BC 78 BC 78 
315fe     BC 78 BC 78 
31602     BC 78 BD 78 
31606     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3160a     BC 78 BB 78 
3160e     BC 78 BB 78 
31612     BB 78 BC 78 
31616     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3161a     BC 78 BC 78 
3161e     BC 78 BC 78 
31622     BC 78 BB 78 
31626     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3162a     BC 78 BC 78 
3162e     BC 78 BD 78 
31632     BB 78 BC 78 
31636     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3163a     BC 78 BC 78 
3163e     BC 78 BB 78 
31642     BC 78 BB 78 
31646     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3164a     BB 78 BC 78 
3164e     BC 78 BC 78 
31652     BC 78 BB 78 
31656     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3165a     BC 78 BC 78 
3165e     BC 78 BB 78 
31662     BC 78 BB 78 
31666     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3166a     BC 78 BC 78 
3166e     BC 78 BC 78 
31672     BB 78 BC 78 
31676     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3167a     BC 78 9F 78 
3167e     52 79 B3 84 
31682     2F 86 60 87 
31686     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3168a     44 87 43 87 
3168e     43 87 43 87 
31692     43 87 43 87 
31696     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3169a     43 87 43 87 
3169e     43 87 44 87 
316a2     43 87 43 87 
316a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
316aa     43 87 43 87 
316ae     43 87 43 87 
316b2     43 87 44 87 
316b6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
316ba     44 87 44 87 
316be     5E 87 BC 80 
316c2     FB 80 94 78 
316c6     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
316ca     BD 78 BC 78 
316ce     BB 78 BC 78 
316d2     BB 78 BB 78 
316d6     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
316da     BC 78 BB 78 
316de     BB 78 6B 79 
316e2     D6 77 AC 87 
316e6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
316ea     43 87 44 87 
316ee     43 87 43 87 
316f2     44 87 43 87 
316f6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
316fa     43 87 44 87 
316fe     43 87 5C 87 
31702     E7 80 00 80 
31706     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
3170a     BC 78 BD 78 
3170e     BC 78 BC 78 
31712     BC 78 BB 78 
31716     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3171a     BC 78 BC 78 
3171e     BB 78 BC 78 
31722     BB 78 BC 78 
31726     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3172a     BB 78 BC 78 
3172e     BC 78 BC 78 
31732     BC 78 BC 78 
31736     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3173a     BC 78 BC 78 
3173e     BC 78 BC 78 
31742     A0 78 8D 7B 
31746     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3174a     60 87 43 87 
3174e     44 87 44 87 
31752     43 87 43 87 
31756     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3175a     44 87 43 87 
3175e     43 87 43 87 
31762     44 87 73 86 
31766     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3176a     51 7B B6 78 
3176e     BC 78 BD 78 
31772     BC 78 BC 78 
31776     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3177a     BB 78 BC 78 
3177e     BD 78 BB 78 
31782     BC 78 BB 78 
31786     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3178a     BC 78 BC 78 
3178e     BC 78 BC 78 
31792     BB 78 BC 78 
31796     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3179a     BC 78 BB 78 
3179e     BB 78 BC 78 
317a2     BC 78 BB 78 
317a6     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
317aa     22 8C AF 84 
317ae     48 87 43 87 
317b2     44 87 43 87 
317b6     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
317ba     43 87 42 87 
317be     43 87 43 87 
317c2     44 87 43 87 
317c6     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
317ca     43 87 43 87 
317ce     44 87 44 87 
317d2     43 87 43 87 
317d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
317da     43 87 43 87 
317de     43 87 43 87 
317e2     44 87 43 87 
317e6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
317ea     9F 8B D6 77 
317ee     16 7C B3 78 
317f2     BC 78 BB 78 
317f6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
317fa     BB 78 BC 78 
317fe     BB 78 BC 78 
31802     BC 78 BC 78 
31806     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3180a     BC 78 BB 78 
3180e     BB 78 BC 78 
31812     BB 78 BC 78 
31816     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3181a     BB 78 BB 78 
3181e     BC 78 BC 78 
31822     BC 78 BB 78 
31826     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3182a     BC 78 BC 78 
3182e     BC 78 BD 78 
31832     BB 78 BC 78 
31836     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3183a     BC 78 BC 78 
3183e     BC 78 BB 78 
31842     BC 78 BC 78 
31846     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3184a     A8 78 54 7E 
3184e     F4 83 17 82 
31852     50 87 43 87 
31856     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3185a     44 87 43 87 
3185e     44 87 43 87 
31862     43 87 44 87 
31866     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3186a     43 87 28 87 
3186e     20 85 CF 7A 
31872     70 7D AD 78 
31876     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3187a     BB 78 BC 78 
3187e     BC 78 BC 78 
31882     BB 78 BB 78 
31886     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3188a     BB 78 B2 78 
3188e     9A 7C CF 7A 
31892     4A 87 0D 87 
31896     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3189a     43 87 44 87 
3189e     43 87 44 87 
318a2     43 87 43 87 
318a6     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
318aa     44 87 43 87 
318ae     28 87 51 85 
318b2     11 7A 1E 7D 
318b6     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
318ba     BC 78 BB 78 
318be     BC 78 BC 78 
318c2     BC 78 BC 78 
318c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
318ca     BB 78 BC 78 
318ce     BB 78 BC 78 
318d2     BC 78 BC 78 
318d6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
318da     BB 78 BC 78 
318de     BC 78 BC 78 
318e2     BD 78 BB 78 
318e6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
318ea     BC 78 BB 78 
318ee     BC 78 BC 78 
318f2     BC 78 BB 78 
318f6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
318fa     BC 78 BC 78 
318fe     BC 78 BC 78 
31902     BB 78 BC 78 
31906     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3190a     BC 78 BD 78 
3190e     BC 78 BC 78 
31912     BC 78 BB 78 
31916     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3191a     BC 78 BB 78 
3191e     BB 78 BC 78 
31922     BC 78 BB 78 
31926     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3192a     BB 78 BB 78 
3192e     BB 78 BC 78 
31932     B6 78 48 7D 
31936     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3193a     56 87 43 87 
3193e     42 87 44 87 
31942     44 87 43 87 
31946     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3194a     43 87 44 87 
3194e     43 87 44 87 
31952     4C 87 7E 83 
31956     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3195a     F7 78 BC 78 
3195e     BC 78 BB 78 
31962     BB 78 BC 78 
31966     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3196a     BC 78 BB 78 
3196e     BC 78 BC 78 
31972     BB 78 BC 78 
31976     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3197a     BB 78 BC 78 
3197e     BC 78 BC 78 
31982     BC 78 BB 78 
31986     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3198a     BC 78 BC 78 
3198e     BC 78 BC 78 
31992     BC 78 BB 78 
31996     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3199a     BC 78 BB 78 
3199e     BB 78 BC 78 
319a2     BC 78 BB 78 
319a6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
319aa     BC 78 BC 78 
319ae     BB 78 BC 78 
319b2     BC 78 BC 78 
319b6     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
319ba     73 32 00 04 
319be     00 00 10 00 
319c2     00 00 00 00 
319c6     00 00 00 00 | atari12 file "atari12.s2"
319ca     00 6D 00 6D 
319ce     00 6D 00 6D 
319d2     00 6D 00 6D 
319d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
319da     00 6D 00 6D 
319de     00 6D 00 6D 
319e2     00 6D 00 6D 
319e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
319ea     00 6D 00 6D 
319ee     00 6D 00 6D 
319f2     00 6D 00 6D 
319f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
319fa     00 6D 00 6D 
319fe     00 6D 00 6D 
31a02     00 6D 00 6D 
31a06     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31a0a     00 6D 00 6D 
31a0e     00 6D 00 6D 
31a12     00 6D 00 6D 
31a16     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
31a1a     00 6C 00 6C 
31a1e     00 6C 00 6C 
31a22     00 6C 00 6C 
31a26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a2a     00 6C 00 6C 
31a2e     00 6C 00 6C 
31a32     00 6C 00 6C 
31a36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a3a     00 6C 00 6C 
31a3e     00 6C 00 6C 
31a42     00 6C 00 6C 
31a46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a4a     00 6C 00 6C 
31a4e     00 6C 00 6C 
31a52     00 6C 00 6C 
31a56     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a5a     00 6C 00 6C 
31a5e     00 6C 00 6C 
31a62     00 6C 00 6C 
31a66     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a6a     00 6C 00 6C 
31a6e     00 6C 00 6C 
31a72     00 6C 00 6C 
31a76     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a7a     00 6C 00 6C 
31a7e     00 6C 00 6C 
31a82     00 6C 00 6C 
31a86     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a8a     00 6C 00 6C 
31a8e     00 6C 00 6C 
31a92     00 6C 00 6C 
31a96     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31a9a     00 6C 00 6C 
31a9e     00 6C 00 6C 
31aa2     00 6C 00 6C 
31aa6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31aaa     00 6C 00 6C 
31aae     00 6C 00 6C 
31ab2     00 6C 00 6C 
31ab6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31aba     00 6C 00 6C 
31abe     00 6C 00 6C 
31ac2     00 6C 00 6C 
31ac6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31aca     00 6C 00 6B 
31ace     00 6B 00 6B 
31ad2     00 6B 00 6B 
31ad6     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31ada     00 6B 00 6B 
31ade     00 6B 00 6B 
31ae2     00 6B 00 6B 
31ae6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31aea     00 6B 00 6B 
31aee     00 6B 00 6B 
31af2     00 6B 00 6B 
31af6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31afa     00 6B 00 6B 
31afe     00 6B 00 6B 
31b02     00 6B 00 6B 
31b06     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31b0a     00 6B 00 6B 
31b0e     00 6B 00 6B 
31b12     00 6B 00 6B 
31b16     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31b1a     00 6B 00 6B 
31b1e     00 6B 00 6B 
31b22     00 6B 00 6B 
31b26     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31b2a     00 6B 00 6B 
31b2e     00 6B 00 6B 
31b32     00 6B 00 6B 
31b36     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31b3a     00 6B 00 6B 
31b3e     00 6B 00 6B 
31b42     00 6B 00 6B 
31b46     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31b4a     00 6B 00 6B 
31b4e     00 6B 00 6B 
31b52     00 6B 00 6B 
31b56     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31b5a     00 6B 00 6B 
31b5e     00 6B 00 6B 
31b62     00 6A 00 9D 
31b66     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
31b6a     00 9E 00 9E 
31b6e     00 9E 00 9E 
31b72     00 9E 00 9E 
31b76     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31b7a     00 9E 00 9E 
31b7e     00 9E 00 9E 
31b82     00 9E 00 9E 
31b86     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31b8a     00 9E 00 9E 
31b8e     00 9E 00 9E 
31b92     00 9E 00 9E 
31b96     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31b9a     00 9E 00 9E 
31b9e     00 9E 00 9E 
31ba2     00 9E 00 9E 
31ba6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31baa     00 9E 00 9E 
31bae     00 9E 00 9E 
31bb2     00 9E 00 9E 
31bb6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31bba     00 9E 00 9E 
31bbe     00 9E 00 9E 
31bc2     00 9E 00 9E 
31bc6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31bca     00 9E 00 9E 
31bce     00 9E 00 9E 
31bd2     00 9E 00 9E 
31bd6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31bda     00 9E 00 9E 
31bde     00 9E 00 9E 
31be2     00 9E 00 9E 
31be6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31bea     00 9E 00 9E 
31bee     00 9E 00 9E 
31bf2     00 9E 00 9E 
31bf6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
31bfa     00 9F 00 9F 
31bfe     00 9F 00 9F 
31c02     00 9F 00 9F 
31c06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c0a     00 9F 00 9F 
31c0e     00 9F 00 9F 
31c12     00 9F 00 9F 
31c16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c1a     00 9F 00 9F 
31c1e     00 9F 00 9F 
31c22     00 9F 00 9F 
31c26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c2a     00 9F 00 9F 
31c2e     00 9F 00 9F 
31c32     00 9F 00 9F 
31c36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c3a     00 9F 00 9F 
31c3e     00 9F 00 9F 
31c42     00 9F 00 9F 
31c46     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c4a     00 9F 00 9F 
31c4e     00 9F 00 9F 
31c52     00 9F 00 9F 
31c56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c5a     00 9F 00 9F 
31c5e     00 9F 00 9F 
31c62     00 9F 00 9F 
31c66     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c6a     00 9F 00 9F 
31c6e     00 9F 00 9F 
31c72     00 9F 00 9F 
31c76     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c7a     00 9F 00 9F 
31c7e     00 9F 00 9F 
31c82     00 9F 00 9F 
31c86     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c8a     00 9F 00 9F 
31c8e     00 9F 00 9F 
31c92     00 9F 00 9F 
31c96     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31c9a     00 9F 00 9F 
31c9e     00 9F 00 9F 
31ca2     00 9F 00 9F 
31ca6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31caa     00 9F 00 9F 
31cae     00 9F 00 9F 
31cb2     00 9F 00 9F 
31cb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31cba     00 9F 00 9F 
31cbe     00 9F 00 A0 
31cc2     00 A0 00 A0 
31cc6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cca     00 A0 00 A0 
31cce     00 A0 00 A0 
31cd2     00 A0 00 A0 
31cd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cda     00 A0 00 A0 
31cde     00 A0 00 A0 
31ce2     00 A0 00 A0 
31ce6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cea     00 A0 00 A0 
31cee     00 A0 00 A0 
31cf2     00 A0 00 A0 
31cf6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cfa     00 A0 00 A0 
31cfe     00 A0 00 A0 
31d02     00 A0 00 A0 
31d06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d0a     00 A0 00 A0 
31d0e     00 A0 00 A0 
31d12     00 A0 00 A0 
31d16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d1a     00 A0 00 A0 
31d1e     00 A0 00 A0 
31d22     00 A0 00 A0 
31d26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d2a     00 A0 00 A0 
31d2e     00 A0 00 A0 
31d32     00 A0 00 A0 
31d36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d3a     00 A0 00 A0 
31d3e     00 A0 00 A0 
31d42     00 A0 00 A0 
31d46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d4a     00 A0 00 A0 
31d4e     00 A0 00 A0 
31d52     00 A0 00 A0 
31d56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d5a     00 A0 00 A0 
31d5e     00 A0 00 A0 
31d62     00 A0 00 A0 
31d66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d6a     00 A0 00 A0 
31d6e     00 A0 00 A0 
31d72     00 A0 00 A0 
31d76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d7a     00 A0 00 A0 
31d7e     00 A0 00 A0 
31d82     00 A0 00 A0 
31d86     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
31d8a     00 6D 00 6D 
31d8e     00 6D 00 6D 
31d92     00 6D 00 6D 
31d96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31d9a     00 6D 00 6D 
31d9e     00 6D 00 6D 
31da2     00 6D 00 6D 
31da6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31daa     00 6D 00 6D 
31dae     00 6D 00 6D 
31db2     00 6D 00 6D 
31db6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dba     00 6D 00 6D 
31dbe     00 6D 00 6D 
31dc2     00 6D 00 6D 
31dc6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dca     00 6D 00 6D 
31dce     00 6D 00 6D 
31dd2     00 6D 00 6D 
31dd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dda     00 6D 00 6D 
31dde     00 6D 00 6D 
31de2     00 6D 00 6D 
31de6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dea     00 6D 00 6D 
31dee     00 6D 00 6D 
31df2     00 6D 00 6D 
31df6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dfa     00 6D 00 6D 
31dfe     00 6D 00 6D 
31e02     00 6D 00 6D 
31e06     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e0a     00 6D 00 6D 
31e0e     00 A0 00 A0 
31e12     00 A0 00 A0 
31e16     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e1a     00 A0 00 A0 
31e1e     00 A0 00 A0 
31e22     00 A0 00 A0 
31e26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e2a     00 A0 00 A0 
31e2e     00 A0 00 A0 
31e32     00 A0 00 A0 
31e36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e3a     00 A0 00 A0 
31e3e     00 A0 00 A0 
31e42     00 A0 00 A0 
31e46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e4a     00 A0 00 A0 
31e4e     00 A0 00 A0 
31e52     00 A0 00 A0 
31e56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e5a     00 A0 00 A0 
31e5e     00 A0 00 A0 
31e62     00 A0 00 A0 
31e66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e6a     00 A0 00 A0 
31e6e     00 A0 00 A0 
31e72     00 A0 00 A0 
31e76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e7a     00 A0 00 A0 
31e7e     00 A0 00 A0 
31e82     00 A0 00 A0 
31e86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e8a     00 A0 00 A0 
31e8e     00 A0 00 A0 
31e92     00 A0 00 A0 
31e96     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
31e9a     00 6D 00 6D 
31e9e     00 6D 00 6D 
31ea2     00 6D 00 6D 
31ea6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31eaa     00 6D 00 6D 
31eae     00 6D 00 6D 
31eb2     00 6D 00 6D 
31eb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31eba     00 6D 00 6D 
31ebe     00 6D 00 6D 
31ec2     00 6D 00 6D 
31ec6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31eca     00 6D 00 6D 
31ece     00 6D 00 6D 
31ed2     00 6D 00 6D 
31ed6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31eda     00 6D 00 6D 
31ede     00 6D 00 6D 
31ee2     00 6D 00 6D 
31ee6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31eea     00 6D 00 6D 
31eee     00 6D 00 6D 
31ef2     00 6D 00 6D 
31ef6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31efa     00 6D 00 6D 
31efe     00 6D 00 6D 
31f02     00 6D 00 6D 
31f06     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31f0a     00 6D 00 6D 
31f0e     00 6D 00 6D 
31f12     00 6D 00 6D 
31f16     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31f1a     00 6D 00 6D 
31f1e     00 6C 00 A0 
31f22     00 9F 00 A0 
31f26     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
31f2a     00 A0 00 A0 
31f2e     00 A0 00 A0 
31f32     00 A0 00 A0 
31f36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f3a     00 A0 00 A0 
31f3e     00 A0 00 A0 
31f42     00 A0 00 A0 
31f46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f4a     00 A0 00 A0 
31f4e     00 A0 00 A0 
31f52     00 A0 00 A0 
31f56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f5a     00 A0 00 A0 
31f5e     00 A0 00 A0 
31f62     00 A0 00 A0 
31f66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f6a     00 A0 00 A0 
31f6e     00 A0 00 A0 
31f72     00 A0 00 A0 
31f76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f7a     00 A0 00 A0 
31f7e     00 A0 00 A0 
31f82     00 A0 00 A0 
31f86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f8a     00 A0 00 A0 
31f8e     00 A0 00 A0 
31f92     00 A0 00 A0 
31f96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f9a     00 A0 00 A0 
31f9e     00 A0 00 A0 
31fa2     00 A0 00 A0 
31fa6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31faa     00 A0 00 A0 
31fae     00 A0 00 A0 
31fb2     00 A0 00 A0 
31fb6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31fba     00 A0 00 A0 
31fbe     00 A0 00 A0 
31fc2     00 A0 00 A0 
31fc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31fca     00 A0 00 A0 
31fce     00 A0 00 A0 
31fd2     00 A0 00 A0 
31fd6     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
31fda     00 A1 00 A1 
31fde     00 A1 00 A1 
31fe2     00 A1 00 A1 
31fe6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31fea     00 A1 00 A1 
31fee     00 A1 00 A1 
31ff2     00 A1 00 A1 
31ff6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31ffa     00 A1 00 A1 
31ffe     00 A1 00 A1 
32002     00 A1 00 A1 
32006     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3200a     00 A1 00 A1 
3200e     00 A1 00 A1 
32012     00 A1 00 A1 
32016     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3201a     00 A1 00 A1 
3201e     00 A1 00 A1 
32022     00 A1 00 A1 
32026     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3202a     00 A1 00 A1 
3202e     00 A1 00 A1 
32032     00 6E 00 6E 
32036     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3203a     00 6E 00 6E 
3203e     00 6E 00 6E 
32042     00 6E 00 6E 
32046     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3204a     00 6E 00 6E 
3204e     00 6E 00 6E 
32052     00 6E 00 6E 
32056     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3205a     00 6E 00 6E 
3205e     00 6E 00 6E 
32062     00 6E 00 6E 
32066     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3206a     00 6E 00 6D 
3206e     00 6D 00 6D 
32072     00 6D 00 6D 
32076     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3207a     00 6D 00 6D 
3207e     00 6D 00 6D 
32082     00 6D 00 6D 
32086     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3208a     00 6D 00 6D 
3208e     00 6D 00 6D 
32092     00 6D 00 6D 
32096     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3209a     00 6D 00 6D 
3209e     00 6D 00 6D 
320a2     00 6D 00 6D 
320a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
320aa     00 6D 00 6D 
320ae     00 6D 00 6D 
320b2     00 6D 00 6D 
320b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
320ba     00 6D 00 6D 
320be     00 6D 00 6D 
320c2     00 6D 00 6D 
320c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
320ca     00 6D 00 6D 
320ce     00 6D 00 6D 
320d2     00 6D 00 6D 
320d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
320da     00 6D 00 6D 
320de     00 6D 00 6D 
320e2     00 6D 00 6D 
320e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
320ea     00 6D 00 6D 
320ee     00 6D 00 6D 
320f2     00 6D 00 6D 
320f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
320fa     00 6D 00 6D 
320fe     00 6D 00 6D 
32102     00 6D 00 6D 
32106     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3210a     00 6D 00 6D 
3210e     00 6D 00 6D 
32112     00 6D 00 6D 
32116     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3211a     00 6D 00 6D 
3211e     00 6C 00 6C 
32122     00 6C 00 6C 
32126     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3212a     00 6C 00 6C 
3212e     00 6C 00 6C 
32132     00 6C 00 6C 
32136     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3213a     00 6C 00 6C 
3213e     00 6C 00 6C 
32142     00 9D 00 9F 
32146     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3214a     00 9F 00 9F 
3214e     00 9F 00 9F 
32152     00 A0 00 A0 
32156     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3215a     00 A0 00 A0 
3215e     00 A0 00 A0 
32162     00 A0 00 A0 
32166     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3216a     00 A0 00 A0 
3216e     00 A0 00 A0 
32172     00 A0 00 A0 
32176     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3217a     00 A0 00 A0 
3217e     00 A0 00 A0 
32182     00 A0 00 A0 
32186     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3218a     00 A0 00 A0 
3218e     00 A0 00 A0 
32192     00 A0 00 A0 
32196     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3219a     00 A0 00 A0 
3219e     00 A0 00 A0 
321a2     00 A0 00 A0 
321a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
321aa     00 A0 00 A0 
321ae     00 A0 00 A0 
321b2     00 A0 00 A0 
321b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
321ba     00 A0 00 A0 
321be     00 A0 00 A0 
321c2     00 A0 00 A0 
321c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
321ca                 | 
321ca     00 00       |              	org
321cc 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
321d0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
321d4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
321d8 003             | 
321d8 003 00 30 04 F6 |                 mov     psramaddr,#0
321dc 004             | 
321dc 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
321e0 005 20 00 00 FF 
321e4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
321e8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
321ec 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
321f0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
321f4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
321f8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
321fc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
32200 00d             | 
32200 00d 20 00 00 FF 
32204 00e 00 30 04 F1 |                 add 	psramaddr,##16384
32208 00f E0 03 00 FF 
3220c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
32210 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
32214 012             | 
32214 012             |                 
32214 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
32218 013             |     
32218 013 01 2C 60 FD |                 cogid 	t11				' get id
3221c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
32220 015 03 2C 60 FD |                 cogstop t11				' stop the loader
32224 016             | 
32224 016 00 00 00 00 | t11 		long 	0
32228 017 00 FF 07 00 | mailbox 	long 	$7FF00
3222c 018 00 00 00 00 | psramaddr 	long 	0
32230 019 00 00 00 00 | pslockval	long 	0
32234 01a 00 00 00 00 | cmd             long    0
32238 01b 00 00 00 00 | buf1            long    0
3223c 01c 00 40 00 00 | buf2            long    16384
32240 01d 44 22 03 00 | 	long	@@@_dat_ + 12624
32244 01e 50 32 20 52 
32248 01f 65 74 72 6F 
3224c 020 6D 61 63 68 
32250 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
32254 022 42 41 53 49 
32258 023 43 20 76 65 
3225c 024 72 73 69 6F 
32260 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
32264 026 32 39 62 00 | 	byte	$32, $39, $62, $00
32268 027             | 	alignl
32268 027             | _hg010b_spin2_dat_
32268 027             | 
32268 027 00 00 00 00 
3226c 028 00 00 00 00 
32270 029 00 00 00 00 
32274 02a 00 00 00 00 
32278 02b 00 00 00    | vga_font       file "vgafont.def"
3227b 02b 7E 81 A5 81 
3227f 02c 81 BD 99 81 
32283 02d 81 7E 00 00 
32287 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3228b 02f 7E FF DB FF 
3228f 030 FF C3 E7 FF 
32293 031 FF 7E 00 00 
32297 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3229b 033 00 36 7F 7F 
3229f 034 7F 7F 3E 1C 
322a3 035 08 00 00 00 
322a7 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
322ab 037 00 08 1C 3E 
322af 038 7F 3E 1C 08 
322b3 039 00 00 00 00 
322b7 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
322bb 03b 18 3C 3C E7 
322bf 03c E7 E7 18 18 
322c3 03d 3C 00 00 00 
322c7 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
322cb 03f 18 3C 7E FF 
322cf 040 FF 7E 18 18 
322d3 041 3C 00 00 00 
322d7 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
322db 043 00 00 00 18 
322df 044 3C 3C 18 00 
322e3 045 00 00 00 00 
322e7 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
322eb 047 FF FF FF E7 
322ef 048 C3 C3 E7 FF 
322f3 049 FF FF FF FF 
322f7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
322fb 04b 00 00 3C 66 
322ff 04c 42 42 66 3C 
32303 04d 00 00 00 00 
32307 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3230b 04f FF FF C3 99 
3230f 050 BD BD 99 C3 
32313 051 FF FF FF FF 
32317 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3231b 053 78 70 58 4C 
3231f 054 1E 33 33 33 
32323 055 33 1E 00 00 
32327 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3232b 057 3C 66 66 66 
3232f 058 66 3C 18 7E 
32333 059 18 18 00 00 
32337 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3233b 05b FC CC FC 0C 
3233f 05c 0C 0C 0C 0E 
32343 05d 0F 07 00 00 
32347 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3234b 05f FE C6 FE C6 
3234f 060 C6 C6 C6 E6 
32353 061 E7 67 03 00 
32357 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3235b 063 18 18 DB 3C 
3235f 064 E7 3C DB 18 
32363 065 18 00 00 00 
32367 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3236b 067 03 07 0F 1F 
3236f 068 7F 1F 0F 07 
32373 069 03 01 00 00 
32377 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3237b 06b 60 70 78 7C 
3237f 06c 7F 7C 78 70 
32383 06d 60 40 00 00 
32387 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3238b 06f 18 3C 7E 18 
3238f 070 18 18 7E 3C 
32393 071 18 00 00 00 
32397 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3239b 073 66 66 66 66 
3239f 074 66 66 66    | 	byte	$66[7]
323a2 075 00 66 66 00 
323a6 076 00 00 00 00 
323aa 077 00 FE DB DB 
323ae 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
323b2 079 D8 D8 D8 00 
323b6 07a 00 00 00 3E 
323ba 07b 63 06 1C 36 
323be 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
323c2 07d 30 63 3E 00 
323c6 07e 00 00 00 00 
323ca 07f 00 00 00 00 
323ce 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
323d2 081 7F 7F 7F 00 
323d6 082 00 00 00 00 
323da 083 00 18 3C 7E 
323de 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
323e2 085 3C 18 7E 00 
323e6 086 00 00 00 00 
323ea 087 00 18 3C 7E 
323ee 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
323f2 089 18 18 18 00 
323f6 08a 00 00 00 00 
323fa 08b 00 18 18 18 
323fe 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32402 08d 7E 3C 18 00 
32406 08e 00 00 00 00 
3240a 08f 00 00 00 18 
3240e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
32412 091 00 00 00 00 
32416 092 00 00 00 00 
3241a 093 00 00 00    | 	byte	$00[11]
3241d 094 0C 06 7F 06 
32421 095 0C 00 00 00 
32425 096 00 00 00 00 
32429 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3242d 098 00 03 03 03 
32431 099 7F 00 00 00 
32435 09a 00 00 00 00 
32439 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3243d 09c 14 36 7F 36 
32441 09d 14 00 00 00 
32445 09e 00 00 00 00 
32449 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3244d 0a0 1C 1C 3E 3E 
32451 0a1 7F 7F 00 00 
32455 0a2 00 00 00 00 
32459 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3245d 0a4 7F 3E 3E 1C 
32461 0a5 1C 08 00 00 
32465 0a6 00 00 00 00 
32469 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3246d 0a8 00 00 00 00 
32471 0a9 00 00 00 00 
32475 0aa 00 00 00 00 
32479 0ab 00 00       | 	byte	$00[14]
3247b 0ab 18 3C 3C 3C 
3247f 0ac 18 18 18 00 
32483 0ad 18 18 00 00 
32487 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3248b 0af 66 24 00 00 
3248f 0b0 00 00 00 00 
32493 0b1 00 00 00 00 
32497 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3249b 0b3 00 36 36 7F 
3249f 0b4 36 36 36 7F 
324a3 0b5 36 36 00 00 
324a7 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
324ab 0b7 3E 63 43 03 
324af 0b8 3E 60 60 61 
324b3 0b9 63 3E 18 18 
324b7 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
324bb 0bb 00 00 43 63 
324bf 0bc 30 18 0C 06 
324c3 0bd 63 61 00 00 
324c7 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
324cb 0bf 1C 36 36 1C 
324cf 0c0 6E 3B 33 33 
324d3 0c1 33 6E 00 00 
324d7 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
324db 0c3 0C 0C 0C 06 
324df 0c4 00 00 00 00 
324e3 0c5 00 00 00 00 
324e7 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
324eb 0c7 30 18 0C 0C 
324ef 0c8 0C 0C 0C 0C 
324f3 0c9 18 30 00 00 
324f7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
324fb 0cb 0C 18 30 30 
324ff 0cc 30 30 30 30 
32503 0cd 18 0C 00 00 
32507 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3250b 0cf 00 00 00 66 
3250f 0d0 3C FF 3C 66 
32513 0d1 00 00 00 00 
32517 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3251b 0d3 00 00 00 18 
3251f 0d4 18 7E 18 18 
32523 0d5 00 00 00 00 
32527 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3252b 0d7 00 00 00 00 
3252f 0d8 00 00 00 00 | 	byte	$00[8]
32533 0d9 18 18 18 0C 
32537 0da 00 00 00 00 
3253b 0db 00 00 00 00 
3253f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
32543 0dd 00 00 00 00 
32547 0de 00 00 00 00 
3254b 0df 00 00 00 00 
3254f 0e0 00 00 00 00 | 	byte	$00[16]
32553 0e1 18 18 00 00 
32557 0e2 00 00 00 00 
3255b 0e3 00 00 40 60 
3255f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
32563 0e5 03 01 00 00 
32567 0e6 00 00 00 00 
3256b 0e7 1C 36 63 63 
3256f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
32573 0e9 36 1C 00 00 
32577 0ea 00 00 00 00 
3257b 0eb 18 1C 1E 18 
3257f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
32583 0ed 18 7E 00 00 
32587 0ee 00 00 00 00 
3258b 0ef 3E 63 60 30 
3258f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
32593 0f1 63 7F 00 00 
32597 0f2 00 00 00 00 
3259b 0f3 3E 63 60 60 
3259f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
325a3 0f5 63 3E 00 00 
325a7 0f6 00 00 00 00 
325ab 0f7 30 38 3C 36 
325af 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
325b3 0f9 30 78 00 00 
325b7 0fa 00 00 00 00 
325bb 0fb 7F 03 03 03 
325bf 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
325c3 0fd 63 3E 00 00 
325c7 0fe 00 00 00 00 
325cb 0ff 1C 06 03 03 
325cf 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
325d3 101 63 3E 00 00 
325d7 102 00 00 00 00 
325db 103 7F 63 60 60 
325df 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
325e3 105 0C 0C 00 00 
325e7 106 00 00 00 00 
325eb 107 3E 63 63 63 
325ef 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
325f3 109 63 3E 00 00 
325f7 10a 00 00 00 00 
325fb 10b 3E 63 63 63 
325ff 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
32603 10d 30 1E 00 00 
32607 10e 00 00 00 00 
3260b 10f 00 00 00 18 
3260f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
32613 111 18 18 00 00 
32617 112 00 00 00 00 
3261b 113 00 00 00 18 
3261f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
32623 115 18 18 0C 00 
32627 116 00 00 00 00 
3262b 117 00 60 30 18 
3262f 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
32633 119 30 60 00 00 
32637 11a 00 00 00 00 
3263b 11b 00 00 00 7E 
3263f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
32643 11d 00 00 00 00 
32647 11e 00 00 00 00 
3264b 11f 00          | 	byte	$00[9]
3264c 120 06 0C 18 30 
32650 121 60 30 18 0C 
32654 122 06 00 00 00 
32658 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3265c 124 63 63 30 18 
32660 125 18 18 00 18 
32664 126 18 00 00 00 
32668 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3266c 128 3E 63 63 7B 
32670 129 7B 7B 3B 03 
32674 12a 3E 00 00 00 
32678 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3267c 12c 1C 36 63 63 
32680 12d 7F 63 63 63 
32684 12e 63 00 00 00 
32688 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3268c 130 66 66 66 3E 
32690 131 66 66 66 66 
32694 132 3F 00 00 00 
32698 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3269c 134 66 43 03 03 
326a0 135 03 03 43 66 
326a4 136 3C 00 00 00 
326a8 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
326ac 138 36 66 66 66 
326b0 139 66 66 66 36 
326b4 13a 1F 00 00 00 
326b8 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
326bc 13c 66 46 16 1E 
326c0 13d 16 06 46 66 
326c4 13e 7F 00 00 00 
326c8 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
326cc 140 66 46 16 1E 
326d0 141 16 06 06 06 
326d4 142 0F 00 00 00 
326d8 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
326dc 144 66 43 03 03 
326e0 145 7B 63 63 66 
326e4 146 5C 00 00 00 
326e8 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
326ec 148 63 63 63 7F 
326f0 149 63 63 63 63 
326f4 14a 63 00 00 00 
326f8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
326fc 14c 18 18 18 18 
32700 14d 18 18 18 18 | 	byte	$18[8]
32704 14e 3C 00 00 00 
32708 14f 00 00 00 78 
3270c 150 30 30 30 30 
32710 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
32714 152 1E 00 00 00 
32718 153 00 00 00 67 
3271c 154 66 66 36 1E 
32720 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
32724 156 67 00 00 00 
32728 157 00 00 00 0F 
3272c 158 06 06 06 06 
32730 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
32734 15a 7F 00 00 00 
32738 15b 00 00 00 63 
3273c 15c 77 7F 7F 6B 
32740 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
32744 15e 63 00 00 00 
32748 15f 00 00 00 63 
3274c 160 67 6F 7F 7B 
32750 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
32754 162 63 00 00 00 
32758 163 00 00 00 3E 
3275c 164 63 63 63 63 
32760 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32764 166 3E 00 00 00 
32768 167 00 00 00 3F 
3276c 168 66 66 66 3E 
32770 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
32774 16a 0F 00 00 00 
32778 16b 00 00 00 3E 
3277c 16c 63 63 63 63 
32780 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
32784 16e 3E 30 70 00 
32788 16f 00 00 00 3F 
3278c 170 66 66 66 3E 
32790 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
32794 172 67 00 00 00 
32798 173 00 00 00 3E 
3279c 174 63 63 06 1C 
327a0 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
327a4 176 3E 00 00 00 
327a8 177 00 00 00 7E 
327ac 178 7E 5A 18 18 
327b0 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
327b4 17a 3C 00 00 00 
327b8 17b 00 00 00 63 
327bc 17c 63 63 63 63 
327c0 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
327c4 17e 3E 00 00 00 
327c8 17f 00 00 00 63 
327cc 180 63 63 63 63 
327d0 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
327d4 182 08 00 00 00 
327d8 183 00 00 00 63 
327dc 184 63 63 63 6B 
327e0 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
327e4 186 36 00 00 00 
327e8 187 00 00 00 63 
327ec 188 63 36 3E 1C 
327f0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
327f4 18a 63 00 00 00 
327f8 18b 00 00 00 66 
327fc 18c 66 66 66 3C 
32800 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
32804 18e 3C 00 00 00 
32808 18f 00 00 00 7F 
3280c 190 63 61 30 18 
32810 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
32814 192 7F 00 00 00 
32818 193 00 00 00 3C 
3281c 194 0C 0C 0C 0C 
32820 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
32824 196 3C 00 00 00 
32828 197 00 00 00 00 
3282c 198 01 03 07 0E 
32830 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
32834 19a 40 00 00 00 
32838 19b 00 00 00 3C 
3283c 19c 30 30 30 30 
32840 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
32844 19e 3C 00 00 00 
32848 19f 1C 36 00 00 
3284c 1a0 00 00 00 00 
32850 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32854 1a2 00 00 00 00 
32858 1a3 00 00 00 00 
3285c 1a4 00 00 00 00 
32860 1a5 00 00 00 00 
32864 1a6 00          | 	byte	$00[17]
32865 1a6 FF 00 00 0C 
32869 1a7 18 00 00 00 
3286d 1a8 00 00 00 00 
32871 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32875 1aa 00 00 00 00 
32879 1ab 00 00 00 00 
3287d 1ac 00          | 	byte	$00[9]
3287e 1ac 1E 30 3E 33 
32882 1ad 33 33 6E 00 
32886 1ae 00 00 00 00 
3288a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3288e 1b0 1E 36 66 66 
32892 1b1 66 66 3E 00 
32896 1b2 00 00 00 00 
3289a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3289e 1b4 3E 63 03 03 
328a2 1b5 03 63 3E 00 
328a6 1b6 00 00 00 00 
328aa 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
328ae 1b8 3C 36 33 33 
328b2 1b9 33 33 6E 00 
328b6 1ba 00 00 00 00 
328ba 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
328be 1bc 3E 63 7F 03 
328c2 1bd 03 63 3E 00 
328c6 1be 00 00 00 00 
328ca 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
328ce 1c0 0C 1E 0C 0C 
328d2 1c1 0C 0C 1E 00 
328d6 1c2 00 00 00 00 
328da 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
328de 1c4 6E 33 33 33 
328e2 1c5 33 33 3E 30 
328e6 1c6 33 1E 00 00 
328ea 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
328ee 1c8 36 6E 66 66 
328f2 1c9 66 66 67 00 
328f6 1ca 00 00 00 00 
328fa 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
328fe 1cc 1C 18 18 18 
32902 1cd 18 18 3C 00 
32906 1ce 00 00 00 00 
3290a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3290e 1d0 70 60 60 60 
32912 1d1 60 60 60 66 
32916 1d2 66 3C 00 00 
3291a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3291e 1d4 66 36 1E 1E 
32922 1d5 36 66 67 00 
32926 1d6 00 00 00 00 
3292a 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3292e 1d8 18 18 18 18 
32932 1d9 18 18       | 	byte	$18[6]
32934 1da 3C 00 00 00 
32938 1db 00 00 00 00 
3293c 1dc 00 00 37 7F 
32940 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
32944 1de 63 00 00 00 
32948 1df 00 00 00 00 
3294c 1e0 00 00 3B 66 
32950 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
32954 1e2 66 00 00 00 
32958 1e3 00 00 00 00 
3295c 1e4 00 00 3E 63 
32960 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
32964 1e6 3E 00 00 00 
32968 1e7 00 00 00 00 
3296c 1e8 00 00 3B 66 
32970 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
32974 1ea 3E 06 06 0F 
32978 1eb 00 00 00 00 
3297c 1ec 00 00 6E 33 
32980 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
32984 1ee 3E 30 30 78 
32988 1ef 00 00 00 00 
3298c 1f0 00 00 3B 6E 
32990 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
32994 1f2 0F 00 00 00 
32998 1f3 00 00 00 00 
3299c 1f4 00 00 3E 63 
329a0 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
329a4 1f6 3E 00 00 00 
329a8 1f7 00 00 00 08 
329ac 1f8 0C 0C 3F 0C 
329b0 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
329b4 1fa 38 00 00 00 
329b8 1fb 00 00 00 00 
329bc 1fc 00 00 33 33 
329c0 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
329c4 1fe 6E 00 00 00 
329c8 1ff 00 00 00 00 
329cc 200 00 00 63 63 
329d0 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
329d4 202 1C 00 00 00 
329d8 203 00 00 00 00 
329dc 204 00 00 63 63 
329e0 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
329e4 206 36 00 00 00 
329e8 207 00 00 00 00 
329ec 208 00 00 63 36 
329f0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
329f4 20a 63 00 00 00 
329f8 20b 00 00 00 00 
329fc 20c 00 00 63 63 
32a00 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
32a04 20e 7E 60 30 1F 
32a08 20f 00 00 00 00 
32a0c 210 00 00 7F 33 
32a10 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
32a14 212 7F 00 00 00 
32a18 213 00 00 00 70 
32a1c 214 18 18 18 0E 
32a20 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
32a24 216 70 00 00 00 
32a28 217 00 00 00 18 
32a2c 218 18 18 18 18 
32a30 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
32a34 21a 18 00 00 00 
32a38 21b 00 00 00 0E 
32a3c 21c 18 18 18 70 
32a40 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
32a44 21e 0E 00 00 00 
32a48 21f 6E 3B 00 00 
32a4c 220 00 00 00 00 
32a50 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32a54 222 00 00 00 00 
32a58 223 00 00 00 00 
32a5c 224 00 00       | 	byte	$00[10]
32a5e 224 08 1C 36 63 
32a62 225 63 63 7F 00 
32a66 226 00 00 00 00 
32a6a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
32a6e 228 03 03 03 03 
32a72 229 43 66 3C 18 
32a76 22a 30 1E 00 00 
32a7a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
32a7e 22c 33 33 33 33 
32a82 22d 33 33       | 	byte	$33[6]
32a84 22e 6E 00 00 00 
32a88 22f 00 00 60 30 
32a8c 230 18 00 3E 63 
32a90 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
32a94 232 3E 00 00 00 
32a98 233 00 00 08 1C 
32a9c 234 36 00 1E 30 
32aa0 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
32aa4 236 6E 00 00 00 
32aa8 237 00 00 00 00 
32aac 238 33 00 1E 30 
32ab0 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
32ab4 23a 6E 00 00 00 
32ab8 23b 00 00 1C 36 
32abc 23c 1C 00 33 33 
32ac0 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
32ac4 23e 6E 00 00 00 
32ac8 23f 00 00 60 30 
32acc 240 18 00 3E 63 
32ad0 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
32ad4 242 3E 00 00 00 
32ad8 243 00 00 00 00 
32adc 244 00 00 3E 63 
32ae0 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
32ae4 246 3E 18 30 1E 
32ae8 247 00 00 00 1C 
32aec 248 58 78 38 18 
32af0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
32af4 24a 3C 00 00 00 
32af8 24b 00 00 00 00 
32afc 24c 63 00 3E 63 
32b00 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
32b04 24e 3E 00 00 00 
32b08 24f 66 33 00 3E 
32b0c 250 63 63 63 63 
32b10 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32b14 252 3E 00 00 00 
32b18 253 00 00 CC 66 
32b1c 254 33 00 3E 63 
32b20 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
32b24 256 3E 00 00 00 
32b28 257 00 00 18 3C 
32b2c 258 66 00 1C 18 
32b30 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
32b34 25a 3C 00 00 00 
32b38 25b 30 18 00 7F 
32b3c 25c 63 61 30 18 
32b40 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
32b44 25e 7F 00 00 00 
32b48 25f 00 63 00 08 
32b4c 260 1C 36 63 63 
32b50 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
32b54 262 63 00 00 00 
32b58 263 30 18 00 3C 
32b5c 264 66 43 03 03 
32b60 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
32b64 266 3C 00 00 00 
32b68 267 30 18 00 7F 
32b6c 268 66 46 16 1E 
32b70 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
32b74 26a 7F 00 00 00 
32b78 26b 0C 06 00 0F 
32b7c 26c 06 06 06 06 
32b80 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
32b84 26e 7F 00 00 00 
32b88 26f 30 18 00 1C 
32b8c 270 18 18 18 18 
32b90 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
32b94 272 3C 00 00 00 
32b98 273 00 00 08 1C 
32b9c 274 36 00 3E 63 
32ba0 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
32ba4 276 3E 00 00 00 
32ba8 277 00 00 00 00 
32bac 278 63 00 3E 63 
32bb0 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
32bb4 27a 3E 00 00 00 
32bb8 27b 00 00 00 6F 
32bbc 27c 46 26 06 06 
32bc0 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
32bc4 27e 7F 00 00 00 
32bc8 27f 00 00 00 6E 
32bcc 280 4C 2C 0C 0C 
32bd0 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
32bd4 282 1E 00 00 00 
32bd8 283 30 18 00 3E 
32bdc 284 63 63 06 1C 
32be0 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
32be4 286 3E 00 00 00 
32be8 287 00 00 60 30 
32bec 288 18 00 3E 63 
32bf0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
32bf4 28a 3E 00 00 00 
32bf8 28b 00 63 00 3E 
32bfc 28c 63 63 63 63 
32c00 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32c04 28e 3E 00 00 00 
32c08 28f 00 63 00 63 
32c0c 290 63 63 63 63 
32c10 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
32c14 292 3E 00 00 00 
32c18 293 6C 38 00 7E 
32c1c 294 7E 5A 18 18 
32c20 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
32c24 296 3C 00 00 00 
32c28 297 00 00 60 48 
32c2c 298 2C 0C 3F 0C 
32c30 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
32c34 29a 38 00 00 00 
32c38 29b 00 00 00 0F 
32c3c 29c 26 36 1E 0E 
32c40 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
32c44 29e 7F 00 00 00 
32c48 29f 00 00 00 00 
32c4c 2a0 00 63 36 1C 
32c50 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
32c54 2a2 00 00 00 00 
32c58 2a3 00 00       | 	byte	$00[6]
32c5a 2a3 36 1C 08 00 
32c5e 2a4 3E 63 03 03 
32c62 2a5 03 63 3E 00 
32c66 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
32c6a 2a7 30 18 0C 00 
32c6e 2a8 1E 30 3E 33 
32c72 2a9 33 33 6E 00 
32c76 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
32c7a 2ab 60 30 18 00 
32c7e 2ac 1C 18 18 18 
32c82 2ad 18 18 3C 00 
32c86 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
32c8a 2af 60 30 18 00 
32c8e 2b0 3E 63 63 63 
32c92 2b1 63 63 3E 00 
32c96 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
32c9a 2b3 30 18 0C 00 
32c9e 2b4 33 33 33 33 
32ca2 2b5 33 33 6E 00 
32ca6 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
32caa 2b7 00 08 1C 36 
32cae 2b8 63 63 7F 63 
32cb2 2b9 63 63 63 18 
32cb6 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
32cba 2bb 00 00 00 00 
32cbe 2bc 1E 30 3E 33 
32cc2 2bd 33 33 6E 18 
32cc6 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
32cca 2bf 00 7F 63 61 
32cce 2c0 30 18 0C 06 
32cd2 2c1 43 63 7F 00 
32cd6 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
32cda 2c3 36 1C 08 00 
32cde 2c4 7F 33 18 0C 
32ce2 2c5 06 63 7F 00 
32ce6 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
32cea 2c7 00 7F 66 46 
32cee 2c8 16 1E 16 06 
32cf2 2c9 46 66 7F 18 
32cf6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
32cfa 2cb 00 00 00 00 
32cfe 2cc 3E 63 7F 03 
32d02 2cd 03 63 3E 18 
32d06 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
32d0a 2cf 00 3C 66 03 
32d0e 2d0 1F 03 0F 03 
32d12 2d1 03 66 3C 00 
32d16 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
32d1a 2d3 60 30 18 00 
32d1e 2d4 7F 33 18 0C 
32d22 2d5 06 63 7F 00 
32d26 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
32d2a 2d7 00 3C 66 43 
32d2e 2d8 03 03 03 03 
32d32 2d9 43 66 3C 00 
32d36 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
32d3a 2db 00 00 00 00 
32d3e 2dc 3E 63 06 1C 
32d42 2dd 30 63 3E 18 
32d46 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
32d4a 2df 00 00 00 00 
32d4e 2e0 00 00       | 	byte	$00[6]
32d50 2e1 6C 36 1B 36 
32d54 2e2 6C 00 00 00 
32d58 2e3 00 00 00 00 
32d5c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32d60 2e5 1B 36 6C 36 
32d64 2e6 1B 00 00 00 
32d68 2e7 88 22 88 22 
32d6c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
32d70 2e9 88 22 88 22 
32d74 2ea 88 22 88 22 
32d78 2eb AA 55 AA 55 
32d7c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
32d80 2ed AA 55 AA 55 
32d84 2ee AA 55 AA 55 
32d88 2ef BB EE BB EE 
32d8c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
32d90 2f1 BB EE BB EE 
32d94 2f2 BB EE BB EE 
32d98 2f3 18 18 18 18 
32d9c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
32da0 2f5 18 18 18 18 
32da4 2f6 18 18 18 18 
32da8 2f7 18 18 18 18 
32dac 2f8 18 18 18    | 	byte	$18[15]
32daf 2f8 1F 18 18 18 
32db3 2f9 18 18 18 18 
32db7 2fa 18 30 18 00 
32dbb 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
32dbf 2fc 63 7F 63 63 
32dc3 2fd 63 63 00 00 
32dc7 2fe 00 1C 36 00 
32dcb 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
32dcf 300 63 7F 63 63 
32dd3 301 63 63 00 00 
32dd7 302 00 36 1C 00 
32ddb 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
32ddf 304 1E 16 06 46 
32de3 305 66 7F 00 00 
32de7 306 00 00 00 00 
32deb 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
32def 308 1C 30 60 63 
32df3 309 63 3E 18 30 
32df7 30a 1E 6C 6C 6C 
32dfb 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
32dff 30c 6F 6C 6C 6C 
32e03 30d 6C 6C 6C 6C 
32e07 30e 6C 6C 6C 6C 
32e0b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32e0f 310 6C 6C 6C 6C 
32e13 311 6C 6C 6C 6C 
32e17 312 6C          | 	byte	$6c[9]
32e18 313 00 00 00 00 
32e1c 314 00          | 	byte	$00[5]
32e1d 314 7F 60 6F 6C 
32e21 315 6C 6C 6C 6C 
32e25 316 6C 6C 6C 6C 
32e29 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32e2d 318 6F 60 7F 00 
32e31 319 00 00 00 00 
32e35 31a 00 00 00 18 
32e39 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
32e3d 31c 61 30 18 0C 
32e41 31d 06 43 63 7F 
32e45 31e 00 00 00 00 
32e49 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
32e4d 320 00 7F 33 18 
32e51 321 0C 06 63 7F 
32e55 322 00 00 00 00 
32e59 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
32e5d 324 00 00 1F 18 
32e61 325 18 18 18 18 
32e65 326 18 18 18 18 
32e69 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32e6d 328 18 18 F8 00 
32e71 329 00 00 00 00 
32e75 32a 00 00 00 18 
32e79 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32e7d 32c 18 18 FF 00 
32e81 32d 00 00 00 00 
32e85 32e 00 00 00 00 
32e89 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e8d 330 00 00 FF 18 
32e91 331 18 18 18 18 
32e95 332 18 18 18 18 
32e99 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32e9d 334 18 18 F8 18 
32ea1 335 18 18 18 18 
32ea5 336 18 18 18 00 
32ea9 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
32ead 338 00 00 FF 00 
32eb1 339 00 00 00 00 
32eb5 33a 00 00 00 18 
32eb9 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32ebd 33c 18 18 FF 18 
32ec1 33d 18 18 18 18 
32ec5 33e 18 18 18 63 
32ec9 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
32ecd 340 36 63 63 7F 
32ed1 341 63 63 63 63 
32ed5 342 00 00 00 00 
32ed9 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
32edd 344 00 1E 30 3E 
32ee1 345 33 33 33 6E 
32ee5 346 00 00 00 6C 
32ee9 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32eed 348 EC 0C FC 00 
32ef1 349 00 00 00 00 
32ef5 34a 00 00 00 00 
32ef9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32efd 34c FC 0C EC 6C 
32f01 34d 6C 6C 6C 6C 
32f05 34e 6C 6C 6C 6C 
32f09 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32f0d 350 EF 00 FF 00 
32f11 351 00 00 00 00 
32f15 352 00 00 00 00 
32f19 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f1d 354 FF 00 EF 6C 
32f21 355 6C 6C 6C 6C 
32f25 356 6C 6C 6C 6C 
32f29 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32f2d 358 EC 0C EC 6C 
32f31 359 6C 6C 6C 6C 
32f35 35a 6C 6C 6C 00 
32f39 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32f3d 35c FF 00 FF 00 
32f41 35d 00 00 00 00 
32f45 35e 00 00 00 6C 
32f49 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32f4d 360 EF 00 EF 6C 
32f51 361 6C 6C 6C 6C 
32f55 362 6C 6C 6C 00 
32f59 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32f5d 364 63 3E 63 63 
32f61 365 63 63 3E 63 
32f65 366 00 00 00 00 
32f69 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
32f6d 368 30 3C 36 33 
32f71 369 33 33 33 6E 
32f75 36a 00 00 00 00 
32f79 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
32f7d 36c 66 66 6F 66 
32f81 36d 66 66 36 1F 
32f85 36e 00 00 00 36 
32f89 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
32f8d 370 66 66 66 66 
32f91 371 66 66       | 	byte	$66[6]
32f93 371 36 1F 00 00 
32f97 372 00 00 63 00 
32f9b 373 7F 66 46 16 
32f9f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
32fa3 375 66 7F 00 00 
32fa7 376 00 6C 38 00 
32fab 377 38 30 30 3C 
32faf 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
32fb3 379 33 6E 00 00 
32fb7 37a 00 36 1C 00 
32fbb 37b 63 67 6F 7F 
32fbf 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
32fc3 37d 63 63 00 00 
32fc7 37e 00 30 18 00 
32fcb 37f 3C 18 18 18 
32fcf 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32fd3 381 18 3C 00 00 
32fd7 382 00 3C 66 00 
32fdb 383 3C 18 18 18 
32fdf 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32fe3 385 18 3C 00 00 
32fe7 386 00 00 00 36 
32feb 387 1C 08 00 3E 
32fef 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
32ff3 389 63 3E 00 00 
32ff7 38a 00 18 18 18 
32ffb 38b 18 18 18 18 
32fff 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
33003 38d 00 00 00 00 
33007 38e 00 00 00 00 
3300b 38f 00 00 00 00 | 	byte	$00[12]
3300f 390 F8 18 18 18 
33013 391 18 18 18 18 
33017 392 18 FF FF FF 
3301b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3301f 394 FF FF FF FF 
33023 395 FF FF FF FF 
33027 396 FF          | 	byte	$ff[9]
33028 397 00 00 00 00 
3302c 398 00 00 00    | 	byte	$00[7]
3302f 398 FF FF FF FF 
33033 399 FF FF FF FF 
33037 39a FF          | 	byte	$ff[9]
33038 39b 00 00 00 7E 
3303c 39c 7E 5A 18 18 
33040 39d 18 18 18 18 
33044 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
33048 39f 1C 36 1C 63 
3304c 3a0 63 63 63 63 
33050 3a1 63 63 63 63 
33054 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33058 3a3 FF FF FF FF 
3305c 3a4 FF FF FF    | 	byte	$ff[7]
3305f 3a4 00 00 00 00 
33063 3a5 00 00 00 00 
33067 3a6 00          | 	byte	$00[9]
33068 3a7 30 18 00 3E 
3306c 3a8 63 63 63 63 
33070 3a9 63 63 63 63 
33074 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33078 3ab 00 00 00 1E 
3307c 3ac 33 33 33 1B 
33080 3ad 33 63 63 63 
33084 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
33088 3af 1C 36 00 3E 
3308c 3b0 63 63 63 63 
33090 3b1 63 63 63 63 
33094 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33098 3b3 30 18 00 63 
3309c 3b4 67 6F 7F 7B 
330a0 3b5 73 63 63 63 
330a4 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
330a8 3b7 00 00 60 30 
330ac 3b8 18 00 3B 66 
330b0 3b9 66 66 66 66 
330b4 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
330b8 3bb 00 00 36 1C 
330bc 3bc 08 00 3B 66 
330c0 3bd 66 66 66 66 
330c4 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
330c8 3bf 36 1C 00 3E 
330cc 3c0 63 63 06 1C 
330d0 3c1 30 60 63 63 
330d4 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
330d8 3c3 00 00 36 1C 
330dc 3c4 08 00 3E 63 
330e0 3c5 06 1C 30 63 
330e4 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
330e8 3c7 30 18 00 3F 
330ec 3c8 66 66 66 3E 
330f0 3c9 36 66 66 66 
330f4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
330f8 3cb 30 18 00 63 
330fc 3cc 63 63 63 63 
33100 3cd 63 63 63 63 
33104 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33108 3cf 00 00 60 30 
3310c 3d0 18 00 3B 6E 
33110 3d1 66 06 06 06 
33114 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
33118 3d3 66 33 00 63 
3311c 3d4 63 63 63 63 
33120 3d5 63 63 63 63 
33124 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
33128 3d7 00 00 60 30 
3312c 3d8 18 00 63 63 
33130 3d9 63 63 63 63 
33134 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
33138 3db 30 18 00 66 
3313c 3dc 66 66 66 3C 
33140 3dd 18 18 18 18 
33144 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
33148 3df 00 00 00 08 
3314c 3e0 0C 0C 3F 0C 
33150 3e1 0C 0C 0C 6C 
33154 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
33158 3e3 30 18 00 00 
3315c 3e4 00 00 00 00 
33160 3e5 00 00 00 00 
33164 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33168 3e7 00 00 00 00 
3316c 3e8 00 00 00 00 | 	byte	$00[8]
33170 3e9 7F 00 00 00 
33174 3ea 00 00 00 00 
33178 3eb 66 33 00 00 
3317c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
33180 3ed 00 00 00 00 
33184 3ee 00 00 00 00 
33188 3ef 00 00 00 00 
3318c 3f0 00 00 00 00 
33190 3f1 00 00 00 00 
33194 3f2 00          | 	byte	$00[21]
33195 3f2 0C 06 3C 36 
33199 3f3 1C 00 00 00 
3319d 3f4 00 00 00 00 
331a1 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
331a5 3f6 00 00 00 63 
331a9 3f7 3E 00 00 00 
331ad 3f8 00 00 00 00 
331b1 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
331b5 3fa 00 00 00 00 
331b9 3fb 3E 63 06 1C 
331bd 3fc 36 63 63 36 
331c1 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
331c5 3fe 00 00 00 00 
331c9 3ff 00 00 00 00 | 	byte	$00[8]
331cd 400 18 00 7E 00 
331d1 401 18 00 00 00 
331d5 402 00 00 00 00 
331d9 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
331dd 404 00 00 00 00 
331e1 405 00 00 00 00 | 	byte	$00[8]
331e5 406 18 30 1E 00 
331e9 407 00 00 1C 36 
331ed 408 36 1C 00 00 
331f1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
331f5 40a 00 00 00 00 
331f9 40b 63 00 00 00 
331fd 40c 00 00 00 00 
33201 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33205 40e 00 00 00 18 
33209 40f 18 00 00 00 
3320d 410 00 00 00 00 
33211 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33215 412 00 00 00 00 
33219 413 00          | 	byte	$00[5]
3321a 413 CC 66 33 00 
3321e 414 33 33 33 33 
33222 415 33 33 6E 00 
33226 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3322a 417 00 3F 66 66 
3322e 418 66 3E 36 66 
33232 419 66 66 6F 00 
33236 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3323a 41b 36 1C 08 00 
3323e 41c 3B 6E 66 06 
33242 41d 06 06 0F 00 
33246 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3324a 41f 00 00 00 7E 
3324e 420 7E 7E 7E 7E 
33252 421 7E 7E 00 00 
33256 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3325a 423 00 00 00 00 
3325e 424 00 00 00 00 
33262 425 00 00 00 00 
33266 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33268 427             | 'vga_font       file "vgafont.def"
33268 427 00 00 00 00 
      ...             
33298 433 00 00 00 00 
3329c 434 00 00 00    | st_font        file "st4font.def"
3329f 434 FF FF 00 00 
332a3 435 00 00 00 00 
332a7 436 00 18 18 18 
332ab 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
332af 438 18 18 18 18 
332b3 439 18 18 18 18 
332b7 43a 18          | 	byte	$18[9]
332b8 43b 00 00 00 00 
332bc 43c 00 00 00    | 	byte	$00[7]
332bf 43c FF FF 18 18 
332c3 43d 18 18 18 18 
332c7 43e 18 18 18 18 
332cb 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
332cf 440 FF FF 00 00 
332d3 441 00 00 00 00 
332d7 442 00 18 18 18 
332db 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
332df 444 1F 1F 18 18 
332e3 445 18 18 18 18 
332e7 446 18 18 18 18 
332eb 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
332ef 448 F8 F8 18 18 
332f3 449 18 18 18 18 
332f7 44a 18 00 00 00 
332fb 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
332ff 44c 1F 1F 18 18 
33303 44d 18 18 18 18 
33307 44e 18 00 00 00 
3330b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3330f 450 F8 F8 18 18 
33313 451 18 18 18 18 
33317 452 18 18 18 18 
3331b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3331f 454 1F 1F 00 00 
33323 455 00 00 00 00 
33327 456 00 18 18 18 
3332b 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3332f 458 F8 F8 00 00 
33333 459 00 00 00 00 
33337 45a 00 18 18 18 
3333b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3333f 45c FF FF 18 18 
33343 45d 18 18 18 18 
33347 45e 18 00 00 18 
3334b 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3334f 460 66 7E 7E 66 
33353 461 66 66 66 30 
33357 462 18 00 00 7E 
3335b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3335f 464 3E 06 06 06 
33363 465 06 7E 7E 18 
33367 466 0C 30 18 3C 
3336b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3336f 468 06 06 06 66 
33373 469 66 7E 3C 00 
33377 46a 00 30 18 66 
3337b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3337f 46c 7E 7E 76 76 
33383 46d 66 66 66 00 
33387 46e 00 30 18 7C 
3338b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3338f 470 1C 38 70 60 
33393 471 60 7E 3E 00 
33397 472 00 30 18 7E 
3339b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3339f 474 18 0C 0C 06 
333a3 475 06 7E 7E 00 
333a7 476 00 18 18 00 
333ab 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
333af 478 18 18 0C 0C 
333b3 479 06 7E 7E 00 
333b7 47a 00 30 18 3C 
333bb 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
333bf 47c 66 66 66 66 
333c3 47d 66          | 	byte	$66[5]
333c4 47e 7E 3C 00 00 
333c8 47f 00 00 06 06 
333cc 480 06 06 16 1E 
333d0 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
333d4 482 7E 7E 00 00 
333d8 483 00 00 00 00 
333dc 484 00 3C 7C 60 
333e0 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
333e4 486 7E 7C 30 18 
333e8 487 00 00 00 00 
333ec 488 00 3C 7E 66 
333f0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
333f4 48a 7E 7C 18 0C 
333f8 48b 00 00 30 18 
333fc 48c 00 3C 3E 06 
33400 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
33404 48e 7E 7C 00 00 
33408 48f 00 00 30 18 
3340c 490 00 3E 7E 66 
33410 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
33414 492 66 66 00 00 
33418 493 00 00 30 18 
3341c 494 00 7C 7E 06 
33420 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
33424 496 7E 3E 00 00 
33428 497 00 00 30 18 
3342c 498 00 7E 7E 30 
33430 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33434 49a 7E 7E 00 00 
33438 49b 00 00 18 18 
3343c 49c 00 7E 7E 30 
33440 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33444 49e 7E 7E 00 00 
33448 49f 00 00 30 18 
3344c 4a0 00 3C 7E 66 
33450 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
33454 4a2 7E 3C 00 00 
33458 4a3 00 00 1C 1C 
3345c 4a4 18 18 38 3C 
33460 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
33464 4a6 3C 3C 00 00 
33468 4a7 00 00 00 00 
3346c 4a8 00 00 00 00 
33470 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33474 4aa 00 00 00 00 
33478 4ab 00 00       | 	byte	$00[6]
3347a 4ab 18 18 18 18 
3347e 4ac 18 18 18 18 | 	byte	$18[8]
33482 4ad 00 00 18 18 
33486 4ae 00 00 00 00 
3348a 4af 66 66 66 66 
3348e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
33492 4b1 00 00 00 00 
33496 4b2 00 00 00 00 
3349a 4b3 00          | 	byte	$00[9]
3349b 4b3 66 66 FF FF 
3349f 4b4 66 66 FF FF 
334a3 4b5 66 66 00 00 
334a7 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
334ab 4b7 7C 7E 06 06 
334af 4b8 3E 7C 60 60 
334b3 4b9 7E 3E 18 18 
334b7 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
334bb 4bb 66 30 30 18 
334bf 4bc 18 0C 0C 66 
334c3 4bd 66 00 00 00 
334c7 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
334cb 4bf 66 66 3C 1C 
334cf 4c0 1C FC FE 66 
334d3 4c1 66 FE FC 00 
334d7 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
334db 4c3 18 18 18 18 
334df 4c4 00 00 00 00 
334e3 4c5 00 00 00 00 
334e7 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
334eb 4c7 18 1C 0C 0C 
334ef 4c8 0C 0C 0C 0C 
334f3 4c9 1C 18 30 00 
334f7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
334fb 4cb 18 38 30 30 
334ff 4cc 30 30 30 30 
33503 4cd 38 18 0C 00 
33507 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3350b 4cf 66 66 3C 3C 
3350f 4d0 FF FF 3C 3C 
33513 4d1 66 66 00 00 
33517 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3351b 4d3 00 18 18 18 
3351f 4d4 7E 7E 18 18 
33523 4d5 18 00 00 00 
33527 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3352b 4d7 00 00 00 00 
3352f 4d8 00 00       | 	byte	$00[6]
33531 4d9 18 18 18 18 
33535 4da 18          | 	byte	$18[5]
33536 4da 0C 04 00 00 
3353a 4db 00 00 00 00 
3353e 4dc 7E 7E 00 00 
33542 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
33546 4de 00 00 00 00 
3354a 4df 00 00 00 00 
3354e 4e0 00 00 00 00 
33552 4e1 00          | 	byte	$00[13]
33553 4e1 18 18 18 00 
33557 4e2 00 00 00 60 
3355b 4e3 60 60 30 30 
3355f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
33563 4e5 06 06 06 00 
33567 4e6 00 00 00 3C 
3356b 4e7 7E 66 66 66 
3356f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
33573 4e9 66 7E 3C 00 
33577 4ea 00 00 00 18 
3357b 4eb 18 1C 1C 18 
3357f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
33583 4ed 18 7E 7E 00 
33587 4ee 00 00 00 3C 
3358b 4ef 7E 66 66 30 
3358f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
33593 4f1 0C 7E 7E 00 
33597 4f2 00 00 00 7E 
3359b 4f3 7E 30 30 18 
3359f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
335a3 4f5 66 7E 3C 00 
335a7 4f6 00 00 00 30 
335ab 4f7 30 38 38 3C 
335af 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
335b3 4f9 7E 30 30 00 
335b7 4fa 00 00 00 7E 
335bb 4fb 7E 06 06 3E 
335bf 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
335c3 4fd 66 7E 3C 00 
335c7 4fe 00 00 00 38 
335cb 4ff 3C 0E 06 06 
335cf 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
335d3 501 66 7E 3C 00 
335d7 502 00 00 00 7E 
335db 503 7E 60 60 30 
335df 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
335e3 505 0C 0C 0C 00 
335e7 506 00 00 00 3C 
335eb 507 7E 66 66 3C 
335ef 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
335f3 509 66 7E 3C 00 
335f7 50a 00 00 00 3C 
335fb 50b 7E 66 66 7E 
335ff 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
33603 50d 70 3C 1C 00 
33607 50e 00 00 00 00 
3360b 50f 00 00 18 18 
3360f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
33613 511 18 18 18 00 
33617 512 00 00 00 00 
3361b 513 00 00 18 18 
3361f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
33623 515 18 18 18 0C 
33627 516 04 00 00 00 
3362b 517 70 38 1C 0E 
3362f 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
33633 519 70 00 00 00 
33637 51a 00 00 00 00 
3363b 51b 00 00 7E 7E 
3363f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
33643 51d 00 00 00 00 
33647 51e 00 00 00 00 | 	byte	$00[8]
3364b 51f 0E 1C 38 70 
3364f 520 E0 70 38 1C 
33653 521 0E 00 00 00 
33657 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3365b 523 7E 66 66 30 
3365f 524 30 18 18 18 
33663 525 00 18 18 00 
33667 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3366b 527 7E 66 66 66 
3366f 528 66 36 06 66 
33673 529 66 7E 3C 00 
33677 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3367b 52b 3C 7E 66 66 
3367f 52c 66 7E 7E 66 
33683 52d 66 66 66 00 
33687 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3368b 52f 7E 66 66 7E 
3368f 530 3E 66 66 66 
33693 531 66 7E 3E 00 
33697 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3369b 533 7E 66 66 06 
3369f 534 06 06 06 66 
336a3 535 66 7E 3C 00 
336a7 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
336ab 537 7E 66 66 66 
336af 538 66 66 66 66 
336b3 539 66 7E 3E 00 
336b7 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
336bb 53b 7E 06 06 3E 
336bf 53c 3E 06 06 06 
336c3 53d 06 7E 7E 00 
336c7 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
336cb 53f 7E 06 06 3E 
336cf 540 3E 06 06 06 
336d3 541 06 06 06 00 
336d7 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
336db 543 7E 06 06 76 
336df 544 76 66 66 66 
336e3 545 66 7E 3C 00 
336e7 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
336eb 547 66 66 66 7E 
336ef 548 7E 66 66 66 
336f3 549 66 66 66 00 
336f7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
336fb 54b 7E 18 18 18 
336ff 54c 18 18 18 18 
33703 54d 18 7E 7E 00 
33707 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3370b 54f 60 60 60 60 
3370f 550 60 60 60    | 	byte	$60[7]
33712 551 66 66 7E 3C 
33716 552 00 00 00 00 
3371a 553 66 66 36 36 
3371e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
33722 555 66 66 C6 C6 
33726 556 00 00 00 00 
3372a 557 06 06 06 06 
3372e 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
33732 559 06 06 7E 7E 
33736 55a 00 00 00 00 
3373a 55b C6 C6 EE EE 
3373e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
33742 55d C6 C6 C6 C6 
33746 55e 00 00 00 00 
3374a 55f 66 66 66 6E 
3374e 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
33752 561 76 66 66 66 
33756 562 00 00 00 00 
3375a 563 3C 7E 66 66 
3375e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
33762 565 66 66 7E 3C 
33766 566 00 00 00 00 
3376a 567 3E 7E 66 66 
3376e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
33772 569 06 06 06 06 
33776 56a 00 00 00 00 
3377a 56b 3C 7E 66 66 
3377e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
33782 56d 66 56 3E 6C 
33786 56e 00 00 00 00 
3378a 56f 3E 7E 66 66 
3378e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
33792 571 66 66 C6 C6 
33796 572 00 00 00 00 
3379a 573 7C 7E 06 06 
3379e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
337a2 575 60 60 7E 3E 
337a6 576 00 00 00 00 
337aa 577 7E 7E 18 18 
337ae 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
337b2 579 18 18 18 18 
337b6 57a 00 00 00 00 
337ba 57b 66 66 66 66 
337be 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
337c2 57d 66 66 7E 3C 
337c6 57e 00 00 00 00 
337ca 57f 66 66 66 66 
337ce 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
337d2 581 3C 3C 18 18 
337d6 582 00 00 00 00 
337da 583 C6 C6 C6 C6 
337de 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
337e2 585 FE EE C6 82 
337e6 586 00 00 00 00 
337ea 587 66 66 66 3C 
337ee 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
337f2 589 3C 66 66 66 
337f6 58a 00 00 00 00 
337fa 58b 66 66 66 66 
337fe 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
33802 58d 18 18 18 18 
33806 58e 00 00 00 00 
3380a 58f 7E 7E 30 30 
3380e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
33812 591 06 06 7E 7E 
33816 592 00 00 00 00 
3381a 593 3C 3C 0C 0C 
3381e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
33822 595 0C 0C 3C 3C 
33826 596 00 00 00 00 
3382a 597 06 06 0C 0C 
3382e 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
33832 599 60 60 C0 C0 
33836 59a 00 00 00 00 
3383a 59b 3C 3C 30 30 
3383e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
33842 59d 30 30 3C 3C 
33846 59e 00 00 00 00 
3384a 59f 18 18 3C 3C 
3384e 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
33852 5a1 00 00 00 00 
33856 5a2 00 00 00 00 
3385a 5a3 00 00 00 00 
3385e 5a4 00 00 00 00 
33862 5a5 00 00       | 	byte	$00[18]
33864 5a6 FE FE 00 00 
33868 5a7 00 00 0C 0C 
3386c 5a8 18 18 00 00 
33870 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
33874 5aa 00 00 00 00 
33878 5ab 00 00 00 00 
3387c 5ac 00          | 	byte	$00[9]
3387d 5ac 3C 7C 60 7C 
33881 5ad 7E 66 66 7E 
33885 5ae 7C 00 00 00 
33889 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3388d 5b0 3E 7E 66 66 
33891 5b1 66 66 66 7E 
33895 5b2 3E 00 00 00 
33899 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3389d 5b4 3C 3E 06 06 
338a1 5b5 06 06 06 7E 
338a5 5b6 7C 00 00 00 
338a9 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
338ad 5b8 7C 7E 66 66 
338b1 5b9 66 66 66 7E 
338b5 5ba 7C 00 00 00 
338b9 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
338bd 5bc 3C 7E 66 66 
338c1 5bd 7E 06 06 7E 
338c5 5be 7C 00 00 00 
338c9 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
338cd 5c0 18 7E 7E 18 
338d1 5c1 18 18 18 18 
338d5 5c2 18 00 00 00 
338d9 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
338dd 5c4 7C 7E 66 66 
338e1 5c5 66 66 7E 7C 
338e5 5c6 60 7E 3E 00 
338e9 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
338ed 5c8 3E 7E 66 66 
338f1 5c9 66 66 66 66 
338f5 5ca 66 00 00 00 
338f9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
338fd 5cc 1C 1C 18 18 
33901 5cd 18 18 18 3C 
33905 5ce 3C 00 00 00 
33909 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3390d 5d0 30 30 30 30 
33911 5d1 30 30 30 30 
33915 5d2 30          | 	byte	$30[9]
33916 5d2 3E 1E 00 00 
3391a 5d3 06 06 06 36 
3391e 5d4 36 1E 1E 1E 
33922 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
33926 5d6 00 00 00 00 
3392a 5d7 1C 1C 18 18 
3392e 5d8 18 18 18 18 
33932 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
33936 5da 00 00 00 00 
3393a 5db 00 00 00    | 	byte	$00[7]
3393d 5dc 6C FE FE D6 
33941 5dd D6 C6 C6 C6 
33945 5de C6 00 00 00 
33949 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3394d 5e0 3E 7E 66 66 
33951 5e1 66 66 66 66 
33955 5e2 66 00 00 00 
33959 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3395d 5e4 3C 7E 66 66 
33961 5e5 66 66 66 7E 
33965 5e6 3C 00 00 00 
33969 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3396d 5e8 3E 7E 66 66 
33971 5e9 66 66 66 7E 
33975 5ea 3E 06 06 00 
33979 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3397d 5ec 7C 7E 66 66 
33981 5ed 66 66 66 7E 
33985 5ee 7C 60 60 00 
33989 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3398d 5f0 3E 7E 66 06 
33991 5f1 06 06 06 06 
33995 5f2 06 00 00 00 
33999 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3399d 5f4 7C 7E 06 0E 
339a1 5f5 3C 70 60 7E 
339a5 5f6 3E 00 00 00 
339a9 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
339ad 5f8 7E 7E 18 18 
339b1 5f9 18 18 18 78 
339b5 5fa 70 00 00 00 
339b9 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
339bd 5fc 66 66 66 66 
339c1 5fd 66 66 66    | 	byte	$66[7]
339c4 5fe 7E 7C 00 00 
339c8 5ff 00 00 00 00 
339cc 600 00 66 66 66 
339d0 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
339d4 602 18 18 00 00 
339d8 603 00 00 00 00 
339dc 604 00 C6 C6 D6 
339e0 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
339e4 606 C6 82 00 00 
339e8 607 00 00 00 00 
339ec 608 00 66 66 3C 
339f0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
339f4 60a 66 66 00 00 
339f8 60b 00 00 00 00 
339fc 60c 00 66 66 66 
33a00 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
33a04 60e 7C 60 7E 3E 
33a08 60f 00 00 00 00 
33a0c 610 00 7E 7E 30 
33a10 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
33a14 612 7E 7E 00 00 
33a18 613 00 00 30 18 
33a1c 614 18 18 18 0C 
33a20 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
33a24 616 18 30 00 00 
33a28 617 00 00 18 18 
33a2c 618 18 18 18 18 
33a30 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33a34 61a 18 18 00 00 
33a38 61b 00 00 0C 18 
33a3c 61c 18 18 18 30 
33a40 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
33a44 61e 18 0C 00 00 
33a48 61f 00 00 6C 7E 
33a4c 620 36 00 00 00 
33a50 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
33a54 622 00 00 00 00 
33a58 623 00 00 00 00 
33a5c 624 00          | 	byte	$00[9]
33a5d 624 18 18 18 18 
33a61 625 18 18 00 00 
33a65 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
33a68 627             | 'amiga_font     file "amigafont.def"
33a68 627 00 6C FE FE 
33a6c 628 7C 38 10 00 
33a70 629 18 18 18 F8 
33a74 62a F8 18 18 18 | a8_font        file "atari8.fnt"
33a78 62b C0 C0 C0 C0 
33a7c 62c C0 C0 C0 C0 | 	byte	$c0[8]
33a80 62d 18 18 18 1F 
33a84 62e 1F 00 00 00 
33a88 62f 18 18 18 1F 
33a8c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
33a90 631 00 00 00 1F 
33a94 632 1F 18 18 18 
33a98 633 C0 E0 70 38 
33a9c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
33aa0 635 03 07 0E 1C 
33aa4 636 38 70 E0 C0 
33aa8 637 80 C0 E0 F0 
33aac 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
33ab0 639 00 00 00 00 
33ab4 63a F0 F0 F0 F0 
33ab8 63b 01 03 07 0F 
33abc 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
33ac0 63d F0 F0 F0 F0 
33ac4 63e 00 00 00 00 
33ac8 63f 0F 0F 0F 0F 
33acc 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
33ad0 641 FF FF 00 00 
33ad4 642 00 00 00 00 
33ad8 643 00 00 00 00 
33adc 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
33ae0 645 00 00 00 00 
33ae4 646 0F 0F 0F 0F 
33ae8 647 00 38 38 EE 
33aec 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
33af0 649 00 00 00 F8 
33af4 64a F8 18 18 18 
33af8 64b 00 00 00 FF 
33afc 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
33b00 64d 18 18 18 FF 
33b04 64e FF 18 18 18 
33b08 64f 00 00 3C 7E 
33b0c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
33b10 651 00 00 00 00 
33b14 652 FF FF FF FF 
33b18 653 03 03 03 03 
33b1c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
33b20 655 00 00 00 FF 
33b24 656 FF 18 18 18 
33b28 657 18 18 18 FF 
33b2c 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
33b30 659 0F 0F 0F 0F 
33b34 65a 0F 0F 0F 0F | 	byte	$0f[8]
33b38 65b 18 18 18 F8 
33b3c 65c F8 00 00 00 
33b40 65d 1E 06 1E 06 
33b44 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
33b48 65f 00 18 3C 7E 
33b4c 660 18 18 18 00 
33b50 661 00 18 18 18 
33b54 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
33b58 663 00 18 0C 7E 
33b5c 664 0C 18 00 00 
33b60 665 00 18 30 7E 
33b64 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
33b68 667 00 00 00 00 
33b6c 668 00 00 00 00 
33b70 669 00          | 	byte	$00[9]
33b71 669 18 18 18 18 
33b75 66a 00 18 00 00 
33b79 66b 66 66 66 00 
33b7d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
33b81 66d 66 FF 66 66 
33b85 66e FF 66 00 18 
33b89 66f 7C 06 3C 60 
33b8d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
33b91 671 66 36 18 0C 
33b95 672 66 62 00 38 
33b99 673 6C 38 1C F6 
33b9d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
33ba1 675 18 18 18 00 
33ba5 676 00 00 00 00 
33ba9 677 70 38 18 18 
33bad 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
33bb1 679 0E 1C 18 18 
33bb5 67a 1C 0E 00 00 
33bb9 67b 66 3C FF 3C 
33bbd 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
33bc1 67d 18 18 7E 18 
33bc5 67e 18 00 00 00 
33bc9 67f 00 00 00 00 
33bcd 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
33bd1 681 00 00 7E 00 
33bd5 682 00 00 00 00 
33bd9 683 00 00 00 00 
33bdd 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
33be1 685 60 30 18 0C 
33be5 686 06 02 00 00 
33be9 687 3C 66 76 6E 
33bed 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
33bf1 689 18 1C 18 18 
33bf5 68a 18 7E 00 00 
33bf9 68b 3C 66 30 18 
33bfd 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
33c01 68d 7E 30 18 30 
33c05 68e 66 3C 00 00 
33c09 68f 30 38 3C 36 
33c0d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
33c11 691 7E 06 3E 60 
33c15 692 66 3C 00 00 
33c19 693 3C 06 3E 66 
33c1d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
33c21 695 7E 60 30 18 
33c25 696 0C 0C 00 00 
33c29 697 3C 66 3C 66 
33c2d 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
33c31 699 3C 66 7C 60 
33c35 69a 30 1C 00 00 
33c39 69b 00 18 18 00 
33c3d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
33c41 69d 00 18 18 00 
33c45 69e 18 18 0C 60 
33c49 69f 30 18 0C 18 
33c4d 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
33c51 6a1 00 7E 00 00 
33c55 6a2 7E 00 00 06 
33c59 6a3 0C 18 30 18 
33c5d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
33c61 6a5 3C 66 30 18 
33c65 6a6 00 18 00 00 
33c69 6a7 3C 66 76 76 
33c6d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
33c71 6a9 18 3C 66 66 
33c75 6aa 7E 66 00 00 
33c79 6ab 3E 66 3E 66 
33c7d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
33c81 6ad 3C 66 06 06 
33c85 6ae 66 3C 00 00 
33c89 6af 1E 36 66 66 
33c8d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
33c91 6b1 7E 06 3E 06 
33c95 6b2 06 7E 00 00 
33c99 6b3 7E 06 3E 06 
33c9d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
33ca1 6b5 7C 06 06 76 
33ca5 6b6 66 7C 00 00 
33ca9 6b7 66 66 7E 66 
33cad 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
33cb1 6b9 7E 18 18 18 
33cb5 6ba 18 7E 00 00 
33cb9 6bb 60 60 60 60 
33cbd 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
33cc1 6bd 66 36 1E 1E 
33cc5 6be 36 66 00 00 
33cc9 6bf 06 06 06 06 
33ccd 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
33cd1 6c1 C6 EE FE D6 
33cd5 6c2 C6 C6 00 00 
33cd9 6c3 66 6E 7E 7E 
33cdd 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
33ce1 6c5 3C 66 66 66 
33ce5 6c6 66 3C 00 00 
33ce9 6c7 3E 66 66 3E 
33ced 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
33cf1 6c9 3C 66 66 66 
33cf5 6ca 36 6C 00 00 
33cf9 6cb 3E 66 66 3E 
33cfd 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
33d01 6cd 3C 06 3C 60 
33d05 6ce 60 3C 00 00 
33d09 6cf 7E 18 18 18 
33d0d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
33d11 6d1 66 66 66 66 
33d15 6d2 66          | 	byte	$66[5]
33d16 6d2 7E 00 00 66 
33d1a 6d3 66 66 66 3C 
33d1e 6d4 18 00 00 C6 
33d22 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
33d26 6d6 C6 00 00 66 
33d2a 6d7 66 3C 3C 66 
33d2e 6d8 66 00 00 66 
33d32 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
33d36 6da 18 00 00 7E 
33d3a 6db 30 18 0C 06 
33d3e 6dc 7E 00 00 78 
33d42 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
33d46 6de 78 00 00 02 
33d4a 6df 06 0C 18 30 
33d4e 6e0 60 00 00 1E 
33d52 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
33d56 6e2 1E 00 00 10 
33d5a 6e3 38 6C C6 00 
33d5e 6e4 00 00 00 00 
33d62 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
33d66 6e6 FF 00 00 18 
33d6a 6e7 3C 7E 7E 3C 
33d6e 6e8 18 00 00 00 
33d72 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
33d76 6ea 7C 00 00 06 
33d7a 6eb 06 3E 66 66 
33d7e 6ec 3E 00 00 00 
33d82 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
33d86 6ee 3C 00 00 60 
33d8a 6ef 60 7C 66 66 
33d8e 6f0 7C 00 00 00 
33d92 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
33d96 6f2 3C 00 00 70 
33d9a 6f3 18 7C 18 18 
33d9e 6f4 18 00 00 00 
33da2 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
33da6 6f6 60 3E 00 06 
33daa 6f7 06 3E 66 66 
33dae 6f8 66 00 00 18 
33db2 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
33db6 6fa 3C 00 00 60 
33dba 6fb 00 60 60 60 
33dbe 6fc 60 3C 00 06 
33dc2 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
33dc6 6fe 66 00 00 1C 
33dca 6ff 18 18 18 18 
33dce 700 3C 00 00 00 
33dd2 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
33dd6 702 C6 00 00 00 
33dda 703 3E 66 66 66 
33dde 704 66 00 00 00 
33de2 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
33de6 706 3C 00 00 00 
33dea 707 3E 66 66 3E 
33dee 708 06 06 00 00 
33df2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
33df6 70a 60 60 00 00 
33dfa 70b 3E 66 06 06 
33dfe 70c 06 00 00 00 
33e02 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
33e06 70e 3E 00 00 18 
33e0a 70f 7E 18 18 18 
33e0e 710 70 00 00 00 
33e12 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
33e16 712 7C 00 00 00 
33e1a 713 66 66 66 3C 
33e1e 714 18 00 00 00 
33e22 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
33e26 716 6C 00 00 00 
33e2a 717 66 3C 18 3C 
33e2e 718 66 00 00 00 
33e32 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
33e36 71a 30 1E 00 00 
33e3a 71b 7E 30 18 0C 
33e3e 71c 7E 00 00 18 
33e42 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
33e46 71e 3C 00 18 18 
33e4a 71f 18 18 18 18 
33e4e 720 18 18 00 7E 
33e52 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
33e56 722 60 00 10 18 
33e5a 723 1C 1E 1C 18 
33e5e 724 10 00 08 18 
33e62 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
33e66 726 08 00       | 	byte	$08, $00
33e68 727 00 00 00 00 
33e6c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
33e6d 728 80 00 00 00 
33e71 729 00 80 00 00 
33e75 72a 80 80 00 00 
33e79 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
33e7d 72c 80 00 80 00 
33e81 72d 00 40 80 00 
33e85 72e AA AA AA 00 
33e89 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
33e8d 730 FF 00 00 00 
33e91 731 00 FF 00 00 
33e95 732 FF FF 00 00 
33e99 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
33e9d 734 FF 00 FF 00 
33ea1 735 00 FF FF 00 
33ea5 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
33ea8 737 00 00 00 00 
33eac 738 00          | ataripalette   file "ataripalettep2.def"
33ead 738 11 11 11 00 
33eb1 739 22 22 22 00 
33eb5 73a 33 33 33 00 
33eb9 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
33ebd 73c 55 55 55 00 
33ec1 73d 66 66 66 00 
33ec5 73e 77 77 77 00 
33ec9 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
33ecd 740 99 99 99 00 
33ed1 741 AA AA AA 00 
33ed5 742 BB BB BB 00 
33ed9 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
33edd 744 DD DD DD 00 
33ee1 745 EE EE EE 00 
33ee5 746 FF FF FF 00 
33ee9 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
33eed 748 00 14 40 00 
33ef1 749 00 1E 60 00 
33ef5 74a 00 28 80 00 
33ef9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
33efd 74c 00 3C BF 00 
33f01 74d 00 46 DF 00 
33f05 74e 00 50 FF 00 
33f09 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
33f0d 750 39 77 FF 00 
33f11 751 55 8A FF 00 
33f15 752 71 9E FF 00 
33f19 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
33f1d 754 AA C5 FF 00 
33f21 755 C6 D8 FF 00 
33f25 756 E3 EC FF 00 
33f29 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
33f2d 758 00 00 40 00 
33f31 759 00 00 60 00 
33f35 75a 00 00 80 00 
33f39 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
33f3d 75c 00 00 BF 00 
33f41 75d 00 00 DF 00 
33f45 75e 00 00 FF 00 
33f49 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
33f4d 760 39 39 FF 00 
33f51 761 55 55 FF 00 
33f55 762 71 71 FF 00 
33f59 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
33f5d 764 AA AA FF 00 
33f61 765 C6 C6 FF 00 
33f65 766 E3 E3 FF 00 
33f69 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
33f6d 768 20 00 40 00 
33f71 769 30 00 60 00 
33f75 76a 40 00 80 00 
33f79 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
33f7d 76c 60 00 BF 00 
33f81 76d 70 00 DF 00 
33f85 76e 80 00 FF 00 
33f89 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
33f8d 770 9C 39 FF 00 
33f91 771 AA 55 FF 00 
33f95 772 B8 71 FF 00 
33f99 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
33f9d 774 D5 AA FF 00 
33fa1 775 E3 C6 FF 00 
33fa5 776 F1 E3 FF 00 
33fa9 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
33fad 778 40 00 40 00 
33fb1 779 60 00 60 00 
33fb5 77a 80 00 80 00 
33fb9 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
33fbd 77c BF 00 BF 00 
33fc1 77d DF 00 DF 00 
33fc5 77e FF 00 FF 00 
33fc9 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
33fcd 780 FF 39 FF 00 
33fd1 781 FF 55 FF 00 
33fd5 782 FF 71 FF 00 
33fd9 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
33fdd 784 FF AA FF 00 
33fe1 785 FF C6 FF 00 
33fe5 786 FF E3 FF 00 
33fe9 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
33fed 788 40 00 20 00 
33ff1 789 60 00 30 00 
33ff5 78a 80 00 40 00 
33ff9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
33ffd 78c BF 00 60 00 
34001 78d DF 00 70 00 
34005 78e FF 00 80 00 
34009 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3400d 790 FF 39 9C 00 
34011 791 FF 55 AA 00 
34015 792 FF 71 B8 00 
34019 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3401d 794 FF AA D5 00 
34021 795 FF C6 E3 00 
34025 796 FF E3 F1 00 
34029 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3402d 798 40 00 00 00 
34031 799 60 00 00 00 
34035 79a 80 00 00 00 
34039 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3403d 79c BF 00 00 00 
34041 79d DF 00 00 00 
34045 79e FF 00 00 00 
34049 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3404d 7a0 FF 39 39 00 
34051 7a1 FF 55 55 00 
34055 7a2 FF 71 71 00 
34059 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3405d 7a4 FF AA AA 00 
34061 7a5 FF C6 C6 00 
34065 7a6 FF E3 E3 00 
34069 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3406d 7a8 40 10 00 00 
34071 7a9 60 18 00 00 
34075 7aa 80 20 00 00 
34079 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3407d 7ac BF 30 00 00 
34081 7ad DF 38 00 00 
34085 7ae FF 40 00 00 
34089 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3408d 7b0 FF 6A 39 00 
34091 7b1 FF 80 55 00 
34095 7b2 FF 95 71 00 
34099 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3409d 7b4 FF BF AA 00 
340a1 7b5 FF D5 C6 00 
340a5 7b6 FF EA E3 00 
340a9 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
340ad 7b8 40 20 00 00 
340b1 7b9 60 30 00 00 
340b5 7ba 80 40 00 00 
340b9 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
340bd 7bc BF 60 00 00 
340c1 7bd DF 70 00 00 
340c5 7be FF 80 00 00 
340c9 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
340cd 7c0 FF 9C 39 00 
340d1 7c1 FF AA 55 00 
340d5 7c2 FF B8 71 00 
340d9 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
340dd 7c4 FF D5 AA 00 
340e1 7c5 FF E3 C6 00 
340e5 7c6 FF F1 E3 00 
340e9 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
340ed 7c8 40 30 00 00 
340f1 7c9 60 48 00 00 
340f5 7ca 80 60 00 00 
340f9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
340fd 7cc BF 90 00 00 
34101 7cd DF A8 00 00 
34105 7ce FF C0 00 00 
34109 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3410d 7d0 FF CE 39 00 
34111 7d1 FF D5 55 00 
34115 7d2 FF DC 71 00 
34119 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3411d 7d4 FF EA AA 00 
34121 7d5 FF F1 C6 00 
34125 7d6 FF F8 E3 00 
34129 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3412d 7d8 30 40 00 00 
34131 7d9 48 60 00 00 
34135 7da 60 80 00 00 
34139 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3413d 7dc 90 BF 00 00 
34141 7dd A8 DF 00 00 
34145 7de C0 FF 00 00 
34149 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3414d 7e0 CE FF 39 00 
34151 7e1 D5 FF 55 00 
34155 7e2 DC FF 71 00 
34159 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3415d 7e4 EA FF AA 00 
34161 7e5 F1 FF C6 00 
34165 7e6 F8 FF E3 00 
34169 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3416d 7e8 00 40 00 00 
34171 7e9 00 60 00 00 
34175 7ea 00 80 00 00 
34179 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3417d 7ec 00 BF 00 00 
34181 7ed 00 DF 00 00 
34185 7ee 00 FF 00 00 
34189 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3418d 7f0 39 FF 39 00 
34191 7f1 55 FF 55 00 
34195 7f2 71 FF 71 00 
34199 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3419d 7f4 AA FF AA 00 
341a1 7f5 C6 FF C6 00 
341a5 7f6 E3 FF E3 00 
341a9 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
341ad 7f8 00 40 14 00 
341b1 7f9 00 60 1E 00 
341b5 7fa 00 80 28 00 
341b9 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
341bd 7fc 00 BF 3C 00 
341c1 7fd 00 DF 46 00 
341c5 7fe 00 FF 50 00 
341c9 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
341cd 800 39 FF 77 00 
341d1 801 55 FF 8A 00 
341d5 802 71 FF 9E 00 
341d9 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
341dd 804 AA FF C5 00 
341e1 805 C6 FF D8 00 
341e5 806 E3 FF EC 00 
341e9 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
341ed 808 00 40 28 00 
341f1 809 00 60 3C 00 
341f5 80a 00 80 50 00 
341f9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
341fd 80c 00 BF 78 00 
34201 80d 00 DF 8C 00 
34205 80e 00 FF A0 00 
34209 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3420d 810 39 FF B5 00 
34211 811 55 FF C0 00 
34215 812 71 FF CA 00 
34219 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3421d 814 AA FF DF 00 
34221 815 C6 FF EA 00 
34225 816 E3 FF F4 00 
34229 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3422d 818 00 40 40 00 
34231 819 00 60 60 00 
34235 81a 00 80 80 00 
34239 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3423d 81c 00 BF BF 00 
34241 81d 00 DF DF 00 
34245 81e 00 FF FF 00 
34249 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3424d 820 39 FF FF 00 
34251 821 55 FF FF 00 
34255 822 71 FF FF 00 
34259 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3425d 824 AA FF FF 00 
34261 825 C6 FF FF 00 
34265 826 E3 FF FF 00 
34269 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3426d 828 00 28 40 00 
34271 829 00 3C 60 00 
34275 82a 00 50 80 00 
34279 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3427d 82c 00 78 BF 00 
34281 82d 00 8C DF 00 
34285 82e 00 A0 FF 00 
34289 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3428d 830 39 B5 FF 00 
34291 831 55 C0 FF 00 
34295 832 71 CA FF 00 
34299 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3429d 834 AA DF FF 00 
342a1 835 C6 EA FF 00 
342a5 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
342a8 837             | 
342a8 837             | '**********************************************************************************
342a8 837             | '
342a8 837             | '        Timings and colors definitions
342a8 837             | '
342a8 837             | '**********************************************************************************
342a8 837             | 
342a8 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
342a8 837 08 00 00 00 
342ac 838 3C 00 00 00 
342b0 839 08 00 00 00 
342b4 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
342b8 83b 07 00 00 00 
342bc 83c 04 00 00 00 
342c0 83d 01 00 00 00 
342c4 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
342c8 83f 58 02 00 00 
342cc 840 6A 8C 15 14 
342d0 841 FB 06 B7 01 
342d4 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
342d8 843 00 00 00 00 
342dc 844 C0 00 00 00 
342e0 845 00 00 00 00 
342e4 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
342e8 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
342e8 847 00 75 C7 97 
342ec 848 27 47 F6 0A 
342f0 849 05 79 CB 9B 
342f4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
342f8 84b             | 
342f8 84b             | ''--------  Initialization  ----------------------------------------------------------------
342f8 84b             | 
342f8 84b 28 0C 64 FD | hdmi            setq    #6
342fc 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
34300 84d 28 10 64 FD |                 setq    #8
34304 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
34308 84f             | 
34308 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3430c 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
34310 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
34314 852 D6 C6 01 F1 |                 add     t1,hbase
34318 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3431c 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
34320 855 7B 0B 80 5F 
34324 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
34328 857 66 66 86 FF 
3432c 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
34330 859             | '
34330 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
34334 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
34338 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3433c 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
34340 85d             | 
34340 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
34344 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
34348 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3434c 860             | 
3434c 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3434c 860             | 
3434c 860 28 06 64 FD | p101            setq 	#3
34350 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
34354 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
34358 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3435c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
34360 865 00 A0 05 F6 |                 mov     dlinum, #0
34364 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
34368 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3436c 868             | 
3436c 868             | 
3436c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
34370 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
34374 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
34378 86b             |                 
34378 86b             | 
34378 86b             | 
34378 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
34378 86b             |   
34378 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3437c 86c 29 FE 65 3D |          if_nc  setq2   #255
34380 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
34384 86e             | 
34384 86e             | '' -----   up porch (before the picture)
34384 86e             | 
34384 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
34388 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3438c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
34390 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
34394 872             |  
34394 872             |    
34394 872             |  
34394 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
34398 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3439c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
343a0 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
343a4 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
343a8 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
343ac 878             | 
343ac 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
343b0 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
343b4 87a 48 00 B0 FD | 		call    #dli
343b8 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
343bc 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
343c0 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
343c4 87e             |                 	
343c4 87e             |                 
343c4 87e             | 
343c4 87e             |  
343c4 87e             | '' ------- the main screen drawing starts here
343c4 87e             | 
343c4 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
343c8 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
343cc 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
343d0 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
343d4 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
343d8 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
343dc 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
343e0 885             |               
343e0 885             | 
343e0 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
343e4 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
343e8 887             | 
343e8 887             | ' ---------------- All visible lines displayed now, start vblank  
343e8 887             | 
343e8 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
343ec 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
343f0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
343f4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
343f8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
343fc 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
34400 88d             | 
34400 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
34400 88d             | 
34400 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
34400 88d             | 
34400 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
34404 88e             | 
34404 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
34408 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3440c 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
34410 891             | 
34410 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
34414 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
34418 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3441c 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
34420 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
34424 896             | 
34424 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
34428 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3442c 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
34430 899 70 00 90 AD |     if_z        jmp     #preload
34434 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
34438 89b 94 00 90 AD |     if_z        jmp     #preload2
3443c 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
34440 89d 0C 00 90 AD |     if_z        jmp     #p390
34444 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
34448 89f 28 00 90 AD |     if_z        jmp     #p391  
3444c 8a0             | 
3444c 8a0 2D 00 64 FD | p308            ret
34450 8a1             |    
34450 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
34454 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
34458 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3445c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
34460 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
34464 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
34468 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3446c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
34470 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
34474 8aa             |  
34474 8aa             | '' --------  Reload palette. To do 
34474 8aa             | 
34474 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
34478 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3447c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
34480 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
34484 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
34488 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3448c 8b0 70 FF 9F FD |         	jmp     #dli                
34490 8b1             |       
34490 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
34490 8b1             | 
34490 8b1             | 
34490 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
34490 8b1             | 
34490 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
34494 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
34498 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3449c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
344a0 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
344a4 8b6             |         
344a4 8b6             | '' -------------- Preload a line from PSRAM        
344a4 8b6             |         
344a4 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
344a8 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
344ac 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
344b0 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
344b4 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
344b8 8bb             | 
344b8 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
344bc 8bc 32 B7 01 F6 |                 mov     buf2,a1024
344c0 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
344c4 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
344c8 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
344cc 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
344d0 8c1             |  
344d0 8c1             |  
344d0 8c1             | preload2      '  incmod  dlinum,#3
344d0 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
344d4 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
344d8 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
344dc 8c4 28 02 64 FD |                 setq	#1
344e0 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
344e4 8c6             |                 
344e4 8c6             | 
344e4 8c6             | '' -------------- Draw sprites
344e4 8c6             | 
344e4 8c6 CF 5C 02 F6 | sprite          mov t8,frames
344e8 8c7 10 5C 0E F5 | 		and t8,#16 wz
344ec 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
344f0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
344f4 8ca             | 		
344f4 8ca             | 
344f4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
344f8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
344fc 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
34500 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
34504 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
34508 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3450c 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
34510 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
34514 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
34518 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3451c 8d4 01 52 86 F1 |                 sub     sprite_h,#1
34520 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
34524 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
34528 8d7             | 
34528 8d7             | 
34528 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3452c 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
34530 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
34534 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
34538 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3453c 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
34540 8dd 00 5E 06 F6 |                 mov 	t9,#0
34544 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
34548 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3454c 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
34550 8e1             |      
34550 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
34554 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
34558 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3455c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
34560 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
34564 8e6             |                 
34564 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
34568 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3456c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
34570 8e9             |   		
34570 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
34574 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
34578 8eb             | 
34578 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3457c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
34580 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
34584 8ee             |  
34584 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
34588 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3458c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
34590 8f1             | 	
34590 8f1             | 	
34590 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
34594 8f2 28 CD 01 F1 | 		add	t4,sprite_w
34598 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3459c 8f4             | 
3459c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
345a0 8f5             | 
345a0 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
345a4 8f6 01 58 86 F1 | 	 	sub     t6,#1
345a8 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
345ac 8f8             | 
345ac 8f8 28 58 62 FD |                 setq   	t6
345b0 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
345b4 8fa 28 5D 02 F6 |                 mov t8,sprite_w
345b8 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
345bc 8fc 24 00 90 AD |         if_z    jmp #p898
345c0 8fd             |          
345c0 8fd             |         
345c0 8fd 70 5F 06 F6 |                 mov  t9,#368
345c4 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
345c8 8ff             | 
345c8 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
345cc 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
345d0 901 FF FF 7F FF 
345d4 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
345d8 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
345dc 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
345e0 905 2D 01 00 F5 |                 and 0-0, t7
345e4 906             |                
345e4 906             | 
345e4 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
345e8 907 E5 E0 7A FA |                 wmlong 368,t3				
345ec 908             |                 
345ec 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
345f0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
345f4 90a 2D 00 64 FD |                 ret
345f8 90b             | 	
345f8 90b             | 	
345f8 90b             |                
345f8 90b             |  
345f8 90b             | '' -------------- Graphics line ------------------------------------------------------------
345f8 90b             |  
345f8 90b             | 
345f8 90b             | '' consts and vars
345f8 90b             | 
345f8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
345fc 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
34600 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
34604 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
34608 90f             | 
34608 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3460c 910             | 
3460c 910             | '------ these longs will be set by setmode function
3460c 910             | 
3460c 910 00 00 00 00 | m_bs            long    0        'blanks before sync
34610 911 00 00 00 00 | m_sn            long    0        'sync
34614 912 00 00 00 00 | m_bv            long    0        'blanks before visible
34618 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3461c 914             | 'm_border        long    0        'left/right borders
3461c 914 00 00 00 00 | i_upporch       long    0        'up porch lines
34620 915 00 00 00 00 | i_vsync         long    0        'vsync lines
34624 916 00 00 00 00 | i_downporch     long    0        'down porch lines
34628 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3462c 918 00 00 00 00 | i_totalvis      long    0
34630 919             | 
34630 919             | '-------------------------------------
34630 919             |  
34630 919 00 00 00 00 | linenum         long    0
34634 91a 00 00 00 00 | frames          long    0
34638 91b 00 00 00 00 | dlinum long 0
3463c 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
34640 91d             | 
34640 91d 00 00 00 00 | vblankptr       long    0
34644 91e 00 00 00 00 | modeptr         long    0
34648 91f 00 00 00 00 | paletteptr      long    0
3464c 920 00 00 00 00 | dlptr           long    0
34650 921 01 00 00 00 | hbase           long    1
34654 922 00 00 00 00 | mailbox         long    0
34658 923 00 00 00 00 | spriteptr          long 0
3465c 924             | 
3465c 924 00 00 00 00 | cmd             long    0
34660 925 00 B0 07 00 | buf1            long    $80000-16384-4096
34664 926 00 04 00 00 | buf2            long    1024
34668 927 01 00 00 00 | dlptr2          long    1
3466c 928 01 00 00 00 | dl              long    1
34670 929             | 
34670 929 00 00 00 00 | buf1c long 0
34674 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
34678 92b 01 00 00 00 | framebuf2       long    1
3467c 92c 01 00 00 00 | hsync0          long    1
34680 92d 01 00 00 00 | hsync1          long    1
34684 92e             | 
34684 92e 01 00 00 00 | t1              long    1
34688 92f 00 00 00 00 | t2 long 0
3468c 930 00 00 00 00 | t3 long 0
34690 931 00 00 00 00 | t4 long 0
34694 932             | 
34694 932 00 00 00 00 | rcnt            long    0  'dl repeat count
34698 933 00 00 00 00 | rcnt2           long    0
3469c 934 00 00 00 00 | rcnt2a          long    0
346a0 935 00 00 00 00 | roffset         long    0
346a4 936 00 00 00 00 | rdl             long    0  'dl repeat line
346a8 937 00 00 00 00 | dlc             long    0  'dl command
346ac 938             | 
346ac 938 FF FF FF FF | affffffff       long    $ffffffff
346b0 939 00 00 00 00 | sprite1pointer long 0
346b4 93a 00 00 00 00 | sprite1xy      long 0
346b8 93b 00 00 00 00 | sprite1wh      long 0
346bc 93c 00 00 00 00 | sprite2pointer long 0
346c0 93d 00 00 00 00 | sprite2xy      long 0
346c4 93e 00 00 00 00 | sprite2wh      long 0
346c8 93f 00 00 00 00 | sprite3pointer long 0
346cc 940 00 00 00 00 | sprite3xy      long 0
346d0 941 00 00 00 00 | sprite3wh      long 0
346d4 942 00 00 00 00 | sprite4pointer long 0
346d8 943 00 00 00 00 | sprite4xy      long 0
346dc 944 00 00 00 00 | sprite4wh      long 0
346e0 945 00 00 00 00 | sprite5pointer long 0
346e4 946 00 00 00 00 | sprite5xy      long 0
346e8 947 00 00 00 00 | sprite5wh      long 0
346ec 948 00 00 00 00 | sprite6pointer long 0
346f0 949 00 00 00 00 | sprite6xy      long 0
346f4 94a 00 00 00 00 | sprite6wh      long 0
346f8 94b 00 00 00 00 | sprite7pointer long 0
346fc 94c 00 00 00 00 | sprite7xy      long 0
34700 94d 00 00 00 00 | sprite7wh      long 0
34704 94e 00 00 00 00 | sprite8pointer long 0
34708 94f 00 00 00 00 | sprite8xy      long 0
3470c 950 00 00 00 00 | sprite8wh      long 0
34710 951 00 00 00 00 | sprite9pointer long 0
34714 952 00 00 00 00 | sprite9xy      long 0
34718 953 00 00 00 00 | sprite9wh      long 0
3471c 954 00 00 00 00 | sprite10pointer long 0
34720 955 00 00 00 00 | sprite10xy      long 0
34724 956 00 00 00 00 | sprite10wh      long 0
34728 957 00 00 00 00 | sprite11pointer long 0
3472c 958 00 00 00 00 | sprite11xy      long 0
34730 959 00 00 00 00 | sprite11wh      long 0
34734 95a 00 00 00 00 | sprite12pointer long 0
34738 95b 00 00 00 00 | sprite12xy      long 0
3473c 95c 00 00 00 00 | sprite12wh      long 0
34740 95d 00 00 00 00 | sprite13pointer long 0
34744 95e 00 00 00 00 | sprite13xy      long 0
34748 95f 00 00 00 00 | sprite13wh      long 0
3474c 960 00 00 00 00 | sprite14pointer long 0
34750 961 00 00 00 00 | sprite14xy      long 0
34754 962 00 00 00 00 | sprite14wh      long 0
34758 963 00 00 00 00 | sprite15pointer long 0
3475c 964 00 00 00 00 | sprite15xy      long 0
34760 965 00 00 00 00 | sprite15wh      long 0
34764 966 00 00 00 00 | sprite16pointer long 0
34768 967 00 00 00 00 | sprite16xy      long 0
3476c 968 00 00 00 00 | sprite16wh      long 0
34770 969 00 00 00 00 | sprite17pointer long 0
34774 96a 00 00 00 00 | sprite17xy      long 0
34778 96b 00 00 00 00 | sprite17wh      long 0
3477c 96c 00 00 00 00 | sprite18pointer long 0
34780 96d 00 00 00 00 | sprite18xy      long 0
34784 96e 00 00 00 00 | sprite18wh      long 0
34788 96f 00 00 00 00 | spritenum long 0
3478c 970             | 
3478c 970 00 00 00 00 | spriteline long 0
34790 971 84 03 00 00 | sprite_x long 900
34794 972 00 00 00 00 | sprite_y long 0
34798 973 10 00 00 00 | sprite_w long 16
3479c 974 40 00 00 00 | sprite_h long 64
347a0 975 00 00 00 00 | l2 long 0
347a4 976 00 00 00 00 | t5 long 0
347a8 977 00 00 00 00 | t6 long 0
347ac 978 00 00 00 00 | t7 long 0
347b0 979 00 00 00 00 | t8 long 0
347b4 97a 00 00 00 00 | t9 long 0
347b8 97b 00 00 00 00 | preloadaddr long 0
347bc 97c 00 00 00 00 | preloadlineaddr long 0
347c0 97d 00 04 00 00 | a1024 long 1024
347c4 97e             | 
347c4 97e E0 03 00 00 | aa long 992
347c8 97f FF 03 00 00 | a1023 long 1023
347cc 980 00 10 00 00 | a4096 long 4096
347d0 981             |  fit 368
347d0 981             | _psram_spin2_dat_
347d0 981 00 00 00 00 
      ...             
348c8 9bf 00 00 00 00 
348cc 9c0 00 00 00 00 |     listdata long 0[8*8]
348d0 9c1             |             orgh
348d0                 | 
348d0                 | ' driver state
348d0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
348d4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
348d8                 | 
348d8                 | ' delay profile
348d8     07 00 00 00 
348dc     00 CF 7B 05 
348e0     80 D1 F0 08 
348e4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
348e8     80 C4 60 0F 
348ec     80 39 7A 12 
348f0     40 2D D9 13 
348f4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
348f8                 | 
348f8                 | ' data to be passed to driver when starting it
348f8                 | startupData
348f8     00 00 00 00 |     long    0           ' current frequency
348fc     00 00 00 00 |     long    FLAGS       ' optional flags for driver
34900     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
34904     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
34908     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3490c     18 49 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
34910     98 49 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
34914     B8 49 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
34918                 | 
34918                 | ' data for memory
34918                 | deviceData
34918                 |     ' 16 bank parameters follow (16MB per bank)
34918     00 00 00 00 
      ...             
34950     00 00 00 00 
34954     00 00 00 00 |     long    0[16]                               ' banks 0-15
34958                 |     ' 16 banks of pin parameters follow
34958     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3495c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
34960     FF FF FF FF 
      ...             
34990     FF FF FF FF 
34994     FF FF FF FF |     long    -1[14]                              ' banks 2-15
34998                 | 
34998                 | ' data for COG polling
34998                 | qosData 
34998     00 00 FF FF 
3499c     00 00 FF FF 
349a0     00 00 FF FF 
349a4     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
349a8     00 00 FF FF 
349ac     00 00 FF FF 
349b0     00 00 FF FF 
349b4     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
349b8                 |     
349b8                 | ' mailbox storage
349b8                 | 
349b8                 | mailboxes
349b8     00 00 00 00 
      ...             
34a10     00 00 00 00 
34a14     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
34a18                 | 	alignl
34a18                 | _psram16drv_spin2_dat_
34a18                 |                             orgh
34a18     00 00 00 00 
      ...             
34a30     00 00 00 00 
34a34     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
34a38                 | 
34a38                 | driver_start
34a38                 |                             org
34a38 000             | '..................................................................................................
34a38 000             | ' Memory layout for COG RAM once operational:
34a38 000             | '
34a38 000             | '  COG RAM address      Usage
34a38 000             | '  ---------------      ----
34a38 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
34a38 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
34a38 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
34a38 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
34a38 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
34a38 000             | '  ~$198-$1F3           State and register variables
34a38 000             | '
34a38 000             | ' Also during driver COG startup:
34a38 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
34a38 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
34a38 000             | '..................................................................................................
34a38 000             |                             
34a38 000             | ' Mailbox storage after vector initialization
34a38 000             | 
34a38 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
34a3c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
34a40 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
34a44 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
34a48 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
34a4c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
34a50 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
34a54 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
34a58 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
34a5c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
34a60 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
34a64 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
34a68 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
34a6c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
34a70 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
34a74 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
34a78 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
34a7c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
34a80 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
34a84 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
34a88 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
34a8c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
34a90 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
34a94 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
34a98 018             | 
34a98 018             | ' Mailbox parameter addresses per COG once patched
34a98 018             |                             
34a98 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
34a9c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
34aa0 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
34aa4 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
34aa8 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
34aac 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
34ab0 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
34ab4 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
34ab8 020             | 
34ab8 020             | '..................................................................................................
34ab8 020             | ' Per COG request and state setup and service branching
34ab8 020             |         
34ab8 020             | cog0                 
34ab8 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
34abc 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
34ac0 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
34ac4 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
34ac8 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34acc 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34ad0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
34ad4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
34ad8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
34adc 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34ae0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34ae4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
34ae8 02c             | cog1                        
34ae8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
34aec 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
34af0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
34af4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
34af8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34afc 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34b00 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
34b04 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
34b08 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
34b0c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34b10 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34b14 037 33 CA 63 FD |                             execf   request-0               'jump to service
34b18 038             | cog2                         
34b18 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
34b1c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
34b20 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
34b24 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
34b28 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34b2c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34b30 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
34b34 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
34b38 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
34b3c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34b40 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34b44 043 33 CA 63 FD |                             execf   request-0               'jump to service
34b48 044             | cog3                        
34b48 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
34b4c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
34b50 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
34b54 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
34b58 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34b5c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34b60 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
34b64 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
34b68 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
34b6c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34b70 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34b74 04f 33 CA 63 FD |                             execf   request-0               'jump to service
34b78 050             | cog4                        
34b78 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
34b7c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
34b80 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
34b84 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
34b88 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34b8c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34b90 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
34b94 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
34b98 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
34b9c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34ba0 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34ba4 05b 33 CA 63 FD |                             execf   request-0               'jump to service
34ba8 05c             | cog5                        
34ba8 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
34bac 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
34bb0 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
34bb4 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
34bb8 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34bbc 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34bc0 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
34bc4 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
34bc8 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
34bcc 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34bd0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34bd4 067 33 CA 63 FD |                             execf   request-0               'jump to service
34bd8 068             | cog6                        
34bd8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
34bdc 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
34be0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
34be4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
34be8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34bec 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34bf0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
34bf4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
34bf8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
34bfc 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34c00 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34c04 073 33 CA 63 FD |                             execf   request-0               'jump to service
34c08 074             | cog7                        
34c08 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
34c0c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
34c10 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
34c14 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
34c18 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34c1c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34c20 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
34c24 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
34c28 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
34c2c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34c30 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34c34 07f 33 CA 63 FD |                             execf   request-0               'jump to service
34c38 080             |                             fit     128
34c38 080             | 
34c38 080             |                             fit     128
34c38 080             | pad                         long    0[128-$]                'align init code to $80
34c38 080             | 
34c38 080             | '..................................................................................................
34c38 080             | 
34c38 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
34c38 080             | 
34c38 080             | init                        
34c38 080             |                             ' get driver scratch long address in hub
34c38 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
34c3c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
34c40 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
34c44 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
34c48 084             |                     
34c48 084             |                             ' read in the additional LUT RAM code
34c48 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
34c4c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
34c50 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
34c54 087             | 
34c54 087             |                             ' read the startup parameters
34c54 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
34c58 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
34c5c 089             | 
34c5c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
34c5c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
34c60 08a             | 
34c60 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
34c64 08b 01 00 00 5F 
34c68 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
34c6c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
34c70 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
34c74 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
34c78 090             | 
34c78 090             |                             ' setup data pin modes and data bus pin group in streamer commands
34c78 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
34c7c 091 01 00 00 FF 
34c80 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
34c84 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
34c88 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
34c8c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
34c90 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
34c94 097 08 DE 47 F5 |                             or      a, #8
34c98 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
34c9c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
34ca0 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
34ca4 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
34ca8 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
34cac 09d 01 DE 07 F1 |                             add     a, #1
34cb0 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
34cb4 09f             |  
34cb4 09f             |                             ' setup device control pin states
34cb4 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
34cb8 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
34cbc 0a1 01 00 00 FF 
34cc0 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
34cc4 0a3             | 
34cc4 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
34cc8 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
34ccc 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
34cd0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
34cd4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
34cd8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
34cdc 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
34ce0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
34ce4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
34ce8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
34cec 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
34cf0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
34cf4 0af             | pinloop
34cf4 0af             |                             ' generate minimum CE high time before access
34cf4 0af A1 07 00 FF 
34cf8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
34cfc 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
34d00 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
34d04 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
34d08 0b4 1F DE 63 FD |                             waitx   a                       'delay
34d0c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
34d10 0b6             | 
34d10 0b6             |                             ' setup the COG mailboxes and addresses 
34d10 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
34d14 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
34d18 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
34d1c 0b9             | 
34d1c 0b9 28 2E 64 FD |                             setq    #24-1
34d20 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
34d24 0bb             | 
34d24 0bb             |                             ' setup the polling loop for active COGs 
34d24 0bb 01 C2 63 FD |                             cogid   id
34d28 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
34d2c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
34d30 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
34d34 0bf 0A F0 07 F6 |                             mov     ptra, #10
34d38 0c0 E1 F1 03 FA |                             mul     ptra, id
34d3c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
34d40 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
34d44 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
34d48 0c4 03 C2 07 FA |                             mul     id, #3
34d4c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
34d50 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
34d54 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
34d58 0c8 D8 01 B0 FD |                             call    #reloadcogs
34d5c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
34d60 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
34d64 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
34d64 0cb D8 E5 B7 F9 |                             setd    d, #addr1
34d68 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
34d6c 0cd 08 04 DC FC |                             rep     #2, #8
34d70 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
34d74 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
34d78 0d0             | 
34d78 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
34d78 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
34d78 0d0 01 C2 63 FD |                             cogid   id
34d7c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
34d80 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
34d84 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
34d88 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
34d8c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
34d90 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
34d94 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
34d98 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
34d9c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
34da0 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34da4 0db 3F E4 A7 F9 |                             alti    d, #%111_111
34da8 0dc 00 00 00 F6 |                             mov     0-0, 0-0
34dac 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
34db0 0de A5 E5 03 F1 |                             add     d, const512
34db4 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34db8 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
34dbc 0e1 00 00 00 F6 |                             mov     0-0, 0-0
34dc0 0e2             |                             
34dc0 0e2             |                             ' setup register values for control vector loop setup after we return
34dc0 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
34dc4 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
34dc8 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
34dcc 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
34dd0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
34dd4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
34dd8 0e8 D0 C3 8F F9 |                             altd    id, #id0
34ddc 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
34de0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
34de4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
34de8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
34dec 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
34df0 0ee             |  
34df0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
34df4 0ef 07 CA 07 F5 |                             and     request, #7
34df8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
34dfc 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
34e00 0f2             |                             fit     $100                    'ensure all init code fits this space
34e00 0f2             | 
34e00 0f2             |                             fit     $100                    'ensure all init code fits this space
34e00 0f2             | 
34e00 0f2 00 00 00 00 
      ...             
34e30 0fe 00 00 00 00 
34e34 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
34e38 100             | 
34e38 100             | '..................................................................................................
34e38 100             | ' Error result handling and COG notification of request completion
34e38 100             | 
34e38 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
34e3c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
34e40 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
34e44 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
34e48 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
34e4c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
34e50 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
34e54 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
34e58 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
34e5c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
34e60 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
34e64 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
34e68 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
34e6c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
34e70 10e             | ' Poller re-starts here after a COG is serviced
34e70 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
34e74 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
34e78 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
34e7c 111             | ' Main dynamic polling loop repeats until a request arrives
34e7c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
34e80 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
34e84 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
34e88 114             | 
34e88 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
34e8c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
34e90 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
34e94 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
34e98 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
34e9c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
34ea0 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
34ea4 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
34ea8 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
34eac 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
34eb0 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
34eb4 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
34eb8 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
34ebc 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
34ec0 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
34ec4 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
34ec8 124             | 
34ec8 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
34ecc 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
34ed0 126             |  
34ed0 126             | '..................................................................................................
34ed0 126             | ' List handler                               
34ed0 126             | 
34ed0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
34ed4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
34ed8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
34edc 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
34ee0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
34ee4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
34ee8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
34eec 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
34ef0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
34ef4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
34ef8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
34efc 131 33 00 60 FD |                             execf   0-0                     'process the request 
34f00 132             | 
34f00 132             | '..................................................................................................
34f00 132             | ' Restoring per COG state and resuming where we left off
34f00 132             | 
34f00 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
34f04 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
34f08 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
34f0c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
34f10 136 D8 CB FB F8 |                             getbyte request, addr1, #3
34f14 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
34f18 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
34f1c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
34f20 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
34f24 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
34f28 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
34f2c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
34f30 13e             |                    
34f30 13e             | '..................................................................................................
34f30 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
34f30 13e             | 
34f30 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
34f34 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
34f38 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
34f3c 141 D0 DF B7 F9 |                             setd    a, #id0
34f40 142 D8 DF BF F9 |                             sets    a, #addr1
34f44 143 FE FF FF FF 
34f48 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
34f4c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
34f50 146 3F DE A7 F9 |                             alti    a, #%111_111 
34f54 147 00 00 F0 F9 |                             muxq    0-0, 0-0
34f58 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
34f5c 149 01 E2 63 FD |                             cogid   c
34f60 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
34f64 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
34f68 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
34f6c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
34f70 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
34f74 14f 00 E0 03 F6 |                             mov     b, 0-0
34f78 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
34f7c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
34f80 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
34f84 153 0C 00 90 AD |             if_z            jmp     #excluded               
34f88 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
34f8c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
34f90 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
34f94 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
34f98 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
34f9c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
34fa0 15a             | 
34fa0 15a             | 'determine priority cogs and build instructions for the polling sequence
34fa0 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
34fa4 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
34fa8 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
34fac 15d             | 
34fac 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
34fb0 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
34fb4 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
34fb8 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
34fbc 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
34fc0 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
34fc4 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
34fc8 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
34fcc 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
34fd0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
34fd4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
34fd8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
34fdc 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
34fe0 16a             | endprioloop
34fe0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
34fe4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
34fe8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
34fec 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
34ff0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
34ff4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
34ff8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
34ffc 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
35000 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
35004 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
35008 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3500c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
35010 176             | 
35010 176             | ' populate the round robin COG polling instructions
35010 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
35014 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
35018 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3501c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
35020 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
35024 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
35028 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3502c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
35030 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
35034 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
35038 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3503c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
35040 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
35044 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
35048 184             | '..................................................................................................
35048 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
35048 184             | 
35048 184             | set_latency                                                 '            (a) set latency
35048 184             | get_latency                                                 '            (b) get latency
35048 184             | set_burst                                                   '            (c) set burst size of bank
35048 184             | get_burst                                                   '            (d) get burst size of bank
35048 184             |                                                             '            (e) dump state
35048 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3504c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
35050 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
35054 187             |                                                             ' | | | | e  account for following AUGS
35054 187 04 00 00 FF 
35058 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3505c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
35060 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
35064 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
35068 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3506c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
35070 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
35074 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
35078 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3507c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
35080 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
35084 193             | 
35084 193             | '..................................................................................................
35084 193             | ' Misc EXECF code
35084 193             | 
35084 193 33 72 63 FD | start_read_exec             execf   newburstr
35088 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3508c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
35090 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
35094 197             | 
35094 197             | '..................................................................................................
35094 197             | ' Variables
35094 197             | 
35094 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
35098 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3509c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
350a0 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
350a4 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
350a8 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
350ac 19d             | 
350ac 19d 00 00 00 80 | xfreq1          long    $80000000
350b0 19e 00 00 00 40 | xfreq2          long    $40000000
350b4 19f 03 00 00 00 | delay           long    3
350b8 1a0             | 
350b8 1a0             | lutcodeaddr                 
350b8 1a0             | startupparams
350b8 1a0             | excludedcogs                                    'careful: shared register use!
350b8 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
350bc 1a1 00 00 00 00 | flags           long    0
350c0 1a2             | mask                                            'careful: shared register use!
350c0 1a2 00 00 00 00 | resetmaskA      long    0
350c4 1a3             | limit                                           'careful: shared register use!
350c4 1a3 00 00 00 00 | resetmaskB      long    0
350c8 1a4 00 00 00 00 | datapins        long    0
350cc 1a5             | const512                                        'careful: shared register use!
350cc 1a5 00 00 00 00 | devicelist      long    0
350d0 1a6 00 00 00 00 | coglist         long    0
350d4 1a7 00 00 00 00 | mbox            long    0 
350d8 1a8             | 
350d8 1a8             | clkpin                                          'shared with code patched during init
350d8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
350dc 1a9             | cspin                                           'shared with code patched during init
350dc 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
350e0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
350e4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
350e8 1ac 01 00 00 00 | clkdelay        long    1
350ec 1ad 00 00 00 00 | regdatabus      long    0
350f0 1ae             | 
350f0 1ae 10 00 00 00 | deviceaddr      long    $10
350f4 1af             | rrcounter
350f4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
350f8 1b0             | 
350f8 1b0             | ' jump addresses for the per COG handlers
350f8 1b0 20 00 00 00 | cog0_handler    long    cog0
350fc 1b1 2C 00 00 00 | cog1_handler    long    cog1
35100 1b2 38 00 00 00 | cog2_handler    long    cog2
35104 1b3 44 00 00 00 | cog3_handler    long    cog3
35108 1b4 50 00 00 00 | cog4_handler    long    cog4
3510c 1b5 5C 00 00 00 | cog5_handler    long    cog5
35110 1b6 68 00 00 00 | cog6_handler    long    cog6
35114 1b7 74 00 00 00 | cog7_handler    long    cog7
35118 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3511c 1b9             | 
3511c 1b9             | ' EXECF sequences
3511c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
35120 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
35124 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
35128 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3512c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
35130 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
35134 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
35138 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
35138 1c0             | 
35138 1c0             | 
35138 1c0             | ' SKIPF sequences
35138 1c0             | skiptable
35138 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3513c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
35140 1c2 00 00 00 00 |                 long    0                      ' read modify write long
35144 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
35148 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3514c 1c5 00 00 00 00 | pattern2        long    0
35150 1c6 00 00 00 00 | pattern3        long    0
35154 1c7 77 02 00 00 | singlelong      long    %1001110111  
35158 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3515c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
35160 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
35164 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
35168 1cc             | 
35168 1cc             | ' LUT RAM address values
35168 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3516c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
35170 1ce DB 02 00 00 | continue_write  long    continue_write_lut
35174 1cf F6 02 00 00 | noread          long    noread_lut
35178 1d0             | 
35178 1d0 00 00 00 00 | id0             long    0
3517c 1d1 01 00 00 00 | id1             long    1
35180 1d2 02 00 00 00 | id2             long    2
35184 1d3 03 00 00 00 | id3             long    3
35188 1d4 04 00 00 00 | id4             long    4
3518c 1d5 05 00 00 00 | id5             long    5
35190 1d6 06 00 00 00 | id6             long    6
35194 1d7 07 00 00 00 | id7             long    7
35198 1d8             | 
35198 1d8             | 'These next 10 request registers below are also temporarily reused during init 
35198 1d8             | 'and COG updates and need to follow immediately after id0-id7
35198 1d8 00 00 00 00 | addr1           long    0
3519c 1d9 00 00 00 00 | hubdata         long    0
351a0 1da 00 00 00 00 | count           long    0
351a4 1db 00 00 00 00 | addr2           long    0
351a8 1dc 00 00 00 00 | total           long    0
351ac 1dd 00 00 00 00 | offset1         long    0
351b0 1de 00 00 00 00 | offset2         long    0
351b4 1df 00 00 00 00 | link            long    0
351b8 1e0             | 
351b8 1e0             | burstwrite                                      'note shared register use during init
351b8 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
351bc 1e1 00 00 00 00 | id              long    0
351c0 1e2             | 
351c0 1e2 00 00 00 00 | header          long    0
351c4 1e3 00 00 00 00 | trailer         long    0
351c8 1e4 00 00 00 00 | cmdaddr         long    0
351cc 1e5 00 00 00 00 | request         long    0
351d0 1e6 00 00 00 00 | rrlimit         long    0
351d4 1e7 00 00 00 00 | pinconfig       long    0
351d8 1e8 00 00 00 00 | clks            long    0
351dc 1e9 00 00 00 00 | resume          long    0
351e0 1ea 00 00 00 00 | orighubsize     long    0
351e4 1eb 00 00 00 00 | wrclks          long    0
351e8 1ec             | 
351e8 1ec 00 00 00 00 | pattern         long    0
351ec 1ed 00 00 00 00 | hubscratch      long    0
351f0 1ee 00 10 00 00 | val4k           long    4096
351f4 1ef             | 
351f4 1ef             | ' temporary general purpose regs
351f4 1ef 00 00 00 00 | a               long    0
351f8 1f0 00 00 00 00 | b               long    0
351fc 1f1 00 00 00 00 | c               long    0
35200 1f2 00 00 00 00 | d               long    0
35204 1f3             |                 fit     502
35204 1f3             | 
35204 1f3             |                 fit     502
35204 1f3             | 
35204 1f3             | '..................................................................................................
35204 1f3             | 
35204 1f3             |             orgh
35204                 | 
35204                 | lut_code
35204                 | 'HW init code up to 80 longs
35204                 | 
35204                 | '..................................................................................................
35204                 | ' Memory layout for LUT RAM once operational:
35204                 | '
35204                 | '  LUT RAM address      Usage
35204                 | '  ---------------      ----
35204                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
35204                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
35204                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
35204                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
35204                 | '
35204                 | ' Also during driver COG startup:
35204                 | ' $230-$24F is used for HW init setup
35204                 | ' $250-$26F is used as temporary vector storage 
35204                 | '..................................................................................................
35204                 | 
35204                 |                 org $230    
35204 230             | 
35204 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
35204 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
35208 231 24 16 60 FD |                             pollxfi
3520c 232 FF AA 2A FF 
35210 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
35214 234 28 00 B0 FD |                             call    #sendqspi
35218 235 07 F8 07 FF 
3521c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
35220 237 28 00 B0 FD |                             call    #sendspi
35224 238 F8 07 78 FF 
35228 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3522c 23a 1C 00 B0 FD |                             call    #sendspi
35230 23b 7F 78 78 FF 
35234 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
35238 23d 10 00 B0 FD |                             call    #sendspi 
3523c 23e 2D 00 64 FD |                             ret
35240 23f             | 
35240 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
35244 240 32 0C 64 FD |                             skipf   #%110
35248 241 9C EF 03 F6 |                             mov     pb, xsendimm
3524c 242             | 
3524c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
35250 243 97 EF 03 F6 |                             mov     pb, ximm8lut
35254 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
35258 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3525c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
35260 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
35264 248 24 36 60 FD |                             waitxfi                         'wait for the completion
35268 249 50 48 63 FD |                             fltl    datapins                'float data bus
3526c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
35270 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
35274 24c             | 
35274 24c 00 00 00 00 
35278 24d 00 00 00 00 
3527c 24e 00 00 00 00 
35280 24f 00 00 00 00 |                 long    0[$270-32-$]
35284 250             |                 fit     $270-32  ' keep room for 32 vector longs
35284 250             |     
35284 250             |                 fit     $270-32  ' keep room for 32 vector longs
35284 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
35284 250             | rw_vect ' PSRAM jump vectors
35284 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35288 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3528c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
35290 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
35294 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
35298 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3529c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
352a0 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
352a4 258             | ro_vect ' R/O PSRAM jump vectors
352a4 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
352a8 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
352ac 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
352b0 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
352b4 25c 00 01 00 00 |                 long    unsupported
352b8 25d 00 01 00 00 |                 long    unsupported
352bc 25e 00 01 00 00 |                 long    unsupported
352c0 25f 00 01 00 00 |                 long    unsupported
352c4 260             | ctrl_vect ' Control jump vectors
352c4 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
352c8 261 00 01 00 00 |                 long    unsupported
352cc 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
352d0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
352d4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
352d8 265 00 01 00 00 |                 long    unsupported
352dc 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
352e0 267 3E 01 00 00 |                 long    reconfig 
352e4 268             | no_vect ' Invalid bank jump vectors
352e4 268 01 01 00 00 |                 long    invalidbank
352e8 269 01 01 00 00 |                 long    invalidbank
352ec 26a 01 01 00 00 |                 long    invalidbank
352f0 26b 01 01 00 00 |                 long    invalidbank
352f4 26c 01 01 00 00 |                 long    invalidbank
352f8 26d 01 01 00 00 |                 long    invalidbank
352fc 26e 01 01 00 00 |                 long    invalidbank
35300 26f 01 01 00 00 |                 long    invalidbank
35304 270             |                 fit     $270
35304 270             | 
35304 270             |                 fit     $270
35304 270             | '..................................................................................................
35304 270             | ' PSRAM READS
35304 270             |                                                             ' a b c d e f
35304 270             |                                                             ' B W L B R L  (a) byte read
35304 270             |                                                             ' Y O O U E O  (b) word read
35304 270             |                                                             ' T R N R S C  (c) long read
35304 270             |                                                             ' E D G S U K  (d) new burst read
35304 270             |                                                             '       T M E  (e) resumed sub-burst
35304 270             |                                                             '         E D  (f) locked sub-burst
35304 270             | 
35304 270             | 
35304 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
35308 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3530c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
35310 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
35314 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
35318 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3531c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
35320 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
35324 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
35328 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3532c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
35330 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
35334 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
35338 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3533c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
35340 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
35344 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
35348 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3534c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
35350 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
35354 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
35358 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3535c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
35360 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
35364 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
35368 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3536c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
35370 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
35374 28c             | 
35374 28c             |                             ' fall through to read bursts
35374 28c             |                         
35374 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
35374 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
35378 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3537c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
35380 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
35384 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
35388 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3538c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
35390 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
35394 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
35398 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3539c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
353a0 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
353a4 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
353a8 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
353ac 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
353b0 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
353b4 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
353b8 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
353bc 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
353c0 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
353c4 2a0 E8 D1 03 F1 |                             add     clks, clks
353c8 2a1             | readcommon
353c8 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
353cc 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
353d0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
353d4 2a4             | 
353d4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
353d8 2a5 69 C8 63 FD |                             rev     cmdaddr
353dc 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
353e0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
353e4 2a8             | 
353e4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
353e8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
353ec 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
353ec 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
353f0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
353f4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
353f8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
353fc 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
353fc 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
35400 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
35404 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
35408 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3540c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
35410 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
35414 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
35414 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
35418 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3541c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
35420 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
35424 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
35428 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3542c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
35430 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
35434 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
35438 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3543c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
35440 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
35444 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
35448 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3544c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3544c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
35450 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
35454 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
35458 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3545c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
35460 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
35464 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
35468 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3546c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
35470 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
35474 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
35478 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3547c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
35480 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
35484 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
35488 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3548c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
35490 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
35494 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
35498 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3549c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
354a0 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
354a4 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
354a8 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
354ac 2da 10 03 90 FD |                             jmp     #writecommon
354b0 2db             | 
354b0 2db             | '..................................................................................................
354b0 2db             | ' Burst continuation testing
354b0 2db             | 
354b0 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
354b4 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
354b8 2dd             | continue_read_lut          
354b8 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
354bc 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
354c0 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
354c4 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
354c8 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
354cc 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
354d0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
354d4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
354d8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
354dc 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
354e0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
354e4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
354e8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
354ec 2ea             | 
354ec 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
354f0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
354f4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
354f8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
354fc 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
35500 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
35504 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
35508 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3550c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
35510 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
35514 2f4 2A 1C 66 0D |             _ret_           push    #poller
35518 2f5             | 
35518 2f5             | 
35518 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3551c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3551c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
35520 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
35524 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
35528 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3552c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
35530 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
35534 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
35538 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3553c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
35540 2ff             | '..................................................................................................
35540 2ff             | ' Completion of requests
35540 2ff             | 
35540 2ff             | complete_rw_lut             
35540 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
35544 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
35548 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3554c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
35550 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
35554 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
35558 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3555c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
35560 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
35564 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
35568 309 32 62 64 AD |             if_z            skipf   #%110001
3556c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
35570 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
35574 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
35578 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3557c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
35580 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
35584 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
35588 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3558c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
35590 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
35594 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
35598 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3559c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3559c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3559c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3559c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
355a0 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
355a4 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
355a8 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
355ac 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
355b0 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
355b4 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
355b8 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
355bc 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
355c0 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
355c4 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
355c8 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
355cc 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
355d0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
355d4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
355d8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
355dc 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
355e0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
355e4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
355e8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
355ec 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
355f0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
355f4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
355f8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
355fc 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
35600 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
35604 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
35608 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3560c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
35610 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
35614 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
35618 335 DF B7 03 A6 |             if_z            mov     addr2, link
3561c 336 34 FF 9F AD |             if_z            jmp     #checknext
35620 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
35624 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
35628 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3562c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
35630 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
35634 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
35638 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3563c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
35640 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
35644 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
35648 341             | 
35648 341             | '..................................................................................................
35648 341             | ' PSRAM WRITES
35648 341             |                                                             '  a b c d e f g h
35648 341             | 
35648 341             |                                                             '  B W L F B R L L (a) byte write(s)
35648 341             |                                                             '  Y O O I U E O O (b) word write(s)
35648 341             |                                                             '  T R N L R S C C (c) long write(s)
35648 341             |                                                             '  E D G L S U K K (d) resumed fill
35648 341             |                                                             '          T M E E (e) new burst write
35648 341             |                                                             '            E D D (f) resumed burst
35648 341             |                                                             '              F B (g) locked fill
35648 341             |                                                             '              I U (h) locked burst write
35648 341             |                                                             '              L R 
35648 341             |                                                             '              L S 
35648 341             |                                                             '                T 
35648 341             | 
35648 341             | w_single                   
35648 341             | w_fill_cont           
35648 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3564c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
35650 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
35654 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
35658 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3565c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
35660 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
35664 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
35668 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3566c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
35670 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
35674 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
35678 34d             |                ' disable call to r_resume_burst for single longs when z=0
35678 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3567c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
35680 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
35684 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
35688 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3568c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
35690 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
35694 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
35698 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3569c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
356a0 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
356a4 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
356a8 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
356ac 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
356b0 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
356b4 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
356b8 35d             |         
356b8 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
356b8 35d             |             '
356b8 35d             |             '  At least one of these 3 optional components will be sent
356b8 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
356b8 35d             |             '     body - N x full longs of data
356b8 35d             |             '     trailer - last partial long of data
356b8 35d             |             '
356b8 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
356b8 35d             |             '
356b8 35d             |             'Case    Type                           Sends
356b8 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
356b8 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
356b8 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
356b8 35d             |             ' 4)     Multiple long fill             body only
356b8 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
356b8 35d             | 
356b8 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
356b8 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
356bc 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
356c0 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
356c4 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
356c8 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
356cc 362 13 8C 07 F6 |                             mov     pattern3, #%10011
356d0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
356d4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
356d8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
356dc 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
356e0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
356e4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
356e8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
356ec 36a             |                             
356ec 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
356f0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
356f4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
356f8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
356fc 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
35700 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
35704 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
35708 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3570c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
35710 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
35714 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
35718 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3571c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
35720 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
35724 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
35728 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3572c 37a             | 
3572c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
35730 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
35734 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
35738 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3573c 37e             |                  
3573c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
35740 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
35744 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
35748 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3574c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
35750 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
35754 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
35758 385             | 
35758 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3575c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
35760 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
35764 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
35768 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3576c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
35770 38b             | 
35770 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
35770 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
35774 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
35778 38d 2A B0 63 FD |                             push    addr1                   'save address
3577c 38e             | 
3577c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3577c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
35780 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
35784 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
35788 391             |             
35788 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3578c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
35790 393 2B B0 63 FD |                             pop     addr1                   'restore address
35794 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
35798 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3579c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
357a0 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
357a4 398             | 
357a4 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
357a8 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
357ac 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
357b0 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
357b4 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
357b8 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
357bc 39e             | 
357bc 39e             |                             'trailer is done
357bc 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
357c0 39f             | 
357c0 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
357c4 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
357c8 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
357cc 3a2             | 
357cc 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
357d0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
357d4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
357d8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
357dc 3a6             |                             
357dc 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
357e0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
357e4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
357e8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
357ec 3aa             |                                                          
357ec 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
357f0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
357f4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
357f8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
357fc 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
35800 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
35804 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
35808 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3580c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
35810 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
35814 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
35818 3b5             |  
35818 3b5 59 52 63 FD |                             drvh    cspin
3581c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
35820 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
35824 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
35828 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3582c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
35830 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
35834 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
35838 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3583c 3be EA E5 03 F6 |                             mov     d, orighubsize
35840 3bf EF E5 63 F0 |                             shl     d, a
35844 3c0 F2 E3 83 F1 |                             sub     c, d
35848 3c1 DD E3 03 F1 |                             add     c, offset1
3584c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
35850 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
35854 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
35858 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3585c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
35860 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
35864 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
35868 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3586c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
35870 3cb BB D3 03 F6 |                             mov     resume, restorefill
35874 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
35878 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3587c 3ce 6C FC BF CD |             if_c            call    #yield
35880 3cf 2D 00 64 FD |                             ret
35884 3d0             |                            
35884 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
35884 3d0             |                       '     rczl    pa                      'rotate left into address offset
35884 3d0             |                       '     rczl    c wcz                   'restore count and flags
35884 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
35888 3d1 02 EC 67 F0 |                             shl     pa, #2
3588c 3d2 28 06 64 AD |             if_z            setq    #3
35890 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
35894 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
35898 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3589c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
358a0 3d7             | 
358a0 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
358a4 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
358a8 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
358ac 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
358b0 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
358b4 3dc             |                 fit 1024-32
358b4 3dc             |         
358b4 3dc             | 
358b4 3dc             | '..................................................................................................
358b4 3dc             | 
358b4 3dc             |                 fit 1024-32
358b4 3dc 00 00 00 00 
358b8 3dd 00 00 00 00 
358bc 3de 00 00 00 00 
358c0 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
358c4 3e0             |                 org 1024-32
358c4 000             | 
358c4 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
358c4 000 00 00 00 00 |                 long $0000
358c8 001 11 11 00 00 |                 long $1111
358cc 002 22 22 00 00 |                 long $2222
358d0 003 33 33 00 00 |                 long $3333
358d4 004 44 44 00 00 |                 long $4444
358d8 005 55 55 00 00 |                 long $5555
358dc 006 66 66 00 00 |                 long $6666
358e0 007 77 77 00 00 |                 long $7777
358e4 008 88 88 00 00 |                 long $8888
358e8 009 99 99 00 00 |                 long $9999
358ec 00a AA AA 00 00 |                 long $aaaa
358f0 00b BB BB 00 00 |                 long $bbbb
358f4 00c CC CC 00 00 |                 long $cccc
358f8 00d DD DD 00 00 |                 long $dddd
358fc 00e EE EE 00 00 |                 long $eeee
35900 00f FF FF 00 00 |                 long $ffff
35904 010             | 
35904 010             | 'masks
35904 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
35908 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3590c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
35910 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
35914 014             | 
35914 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
35918 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3591c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
35920 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
35924 018             | 
35924 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
35928 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3592c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
35930 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
35934 01c             | 
35934 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
35938 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3593c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
35940 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
35944 020             |         fit 1024
35944 020             | 
35944 020             |         fit 1024
35944 020             | 
35944 020             | '--------------------------------------------------------------------------------------------------
35944 020             |         orgh
35944                 | 
35944                 | gfxexpansion
35944                 |                             'simple line drawing graphics expansion of memory driver
35944                 |                             'jmp     #donerepeats                'just return for now
35944                 | 
35944     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
35948     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3594c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
35950     DD E1 03 F6 |                             mov     b, offset1              'get error term
35954     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
35958     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3595c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
35960     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
35964     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
35968     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3596c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
35970     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
35974     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
35978     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3597c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
35980     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
35984     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
35988     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3598c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
35990     DC E5 33 F9 |                             getword d, total, #0            'get line width
35994     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
35998     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3599c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
359a0     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
359a4     C3 03 80 FD |                             jmp     #readmask               'continue filling
359a8                 | 	alignl
359a8                 | _usbnew_spin2_dat_
359a8                 |                 org     $000
359a8 000             | 
359a8 000             | usb_host_start
359a8 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
359ac 001             | 
359ac 001 03 00 00 FF 
359b0 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
359b4 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
359b8 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
359bc 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
359c0 006 29 70 63 FD |                 setq2   htmp
359c4 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
359c8 008             | 
359c8 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
359cc 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
359d0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
359d4 00b             | 
359d4 00b             | '------------------------------------------------------------------------------
359d4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
359d4 00b             | ' special because the receiving function must not respond with either STALL or
359d4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
359d4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
359d4 00b             | ' corrupt packet, it must ignore the transaction
359d4 00b             | '------------------------------------------------------------------------------
359d4 00b             | ' On entry:
359d4 00b             | '   PTRA - start address of the SETUP data struct.
359d4 00b             | ' On exit:
359d4 00b             | '   retval - PID_ACK on success, otherwise error code.
359d4 00b             | '------------------------------------------------------------------------------
359d4 00b             | txn_setup
359d4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
359d8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
359dc 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
359e0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
359e4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
359e8 010             | .setup
359e8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
359ec 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
359f0 012 2D 00 64 AD |         if_z    ret
359f4 013 7C 0B B0 FD |                 call    #retry_wait
359f8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
359fc 015 2D 00 64 AD |         if_z    ret
35a00 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
35a04 017 E0 FF 9F FD |                 jmp     #.setup
35a08 018             | 
35a08 018             | '------------------------------------------------------------------------------
35a08 018             | ' IN/INTERRUPT transaction.
35a08 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
35a08 018             | '------------------------------------------------------------------------------
35a08 018             | ' On entry:
35a08 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
35a08 018             | '     CRC(b19..23).
35a08 018             | ' On exit:
35a08 018             | '------------------------------------------------------------------------------
35a08 018             | txn_in
35a08 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35a0c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
35a10 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
35a14 01b             | 
35a14 01b             |                 ' Fall through to urx_packet
35a14 01b             | 
35a14 01b             | '------------------------------------------------------------------------------
35a14 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
35a14 01b             | ' received are handshakes and IN DATAx.
35a14 01b             | '------------------------------------------------------------------------------
35a14 01b             | ' On entry:
35a14 01b             | ' On exit:
35a14 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
35a14 01b             | '     returned.
35a14 01b             | '------------------------------------------------------------------------------
35a14 01b             | urx_packet
35a14 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
35a18 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35a1c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
35a20 01e 1A 92 63 FD |                 getct   hct2
35a24 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
35a28 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
35a2c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
35a30 022             | .wait_sop
35a30 022 22 A7 8A FA |                 rdpin   urx, dm
35a34 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35a38 024 08 00 90 CD |         if_c    jmp     #.get_pid
35a3c 025 FC 25 CC FB |                 jnct2   #.wait_sop
35a40 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
35a44 027             | .get_pid
35a44 027 28 02 B0 FD |                 call    #urx_next
35a48 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
35a4c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
35a50 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
35a54 02b             | .chk_pid
35a54 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35a58 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
35a5c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
35a60 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
35a64 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
35a68 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
35a6c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
35a70 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
35a74 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
35a78 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
35a7c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
35a80 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
35a84 037             | .ack_resend
35a84 037 22 A7 82 FA |                 rqpin   urx, dm
35a88 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
35a8c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
35a90 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
35a94 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
35a98 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
35a9c 03d             | .chk_eop
35a9c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35aa0 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
35aa4 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
35aa8 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
35aac 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
35ab0 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
35ab4 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
35ab8 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
35abc 045 2D 00 64 FD |                 ret
35ac0 046             | .idle
35ac0 046 22 A7 82 FA |                 rqpin   urx, dm
35ac4 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35ac8 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
35acc 049 2D 00 64 FD |                 ret
35ad0 04a             | 
35ad0 04a             | '------------------------------------------------------------------------------
35ad0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
35ad0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
35ad0 04a             | ' if one is required.
35ad0 04a             | '------------------------------------------------------------------------------
35ad0 04a             | ' On entry:
35ad0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
35ad0 04a             | ' On exit:
35ad0 04a             | '------------------------------------------------------------------------------
35ad0 04a             | utx_token
35ad0 04a 22 A7 82 FA |                 rqpin   urx, dm
35ad4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35ad8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
35adc 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35ae0 04e 34 0D B0 CD |         if_c    call    #utx_pre
35ae4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35ae8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
35aec 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
35af0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
35af4 053             | .next_byte
35af4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
35af8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
35afc 055             | .wait
35afc 055 40 46 72 FD |                 testp   dp                      wc
35b00 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
35b04 057 23 03 08 FC |                 akpin   dp
35b08 058 22 A5 22 FC |                 wypin   utx, dm
35b0c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
35b10 05a             | 
35b10 05a             | '------------------------------------------------------------------------------
35b10 05a             | ' SETUP/OUT/INTERRUPT transaction.
35b10 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
35b10 05a             | '------------------------------------------------------------------------------
35b10 05a             | ' On entry:
35b10 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
35b10 05a             | '     CRC(b19..23).
35b10 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
35b10 05a             | '   pkt_data - count of DATAx payload bytes to send.
35b10 05a             | ' On exit:
35b10 05a             | '------------------------------------------------------------------------------
35b10 05a             | txn_out
35b10 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35b14 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
35b18 05c 00 00 C0 FF 
35b1c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
35b20 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
35b24 05f             | 
35b24 05f             |                 ' Fall through to utx_data
35b24 05f             | 
35b24 05f             | '------------------------------------------------------------------------------
35b24 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
35b24 05f             | ' calculated while the data byte is being shifted out. Since data stage
35b24 05f             | ' success/fail is not determined until the status stage of the transaction,
35b24 05f             | ' this routine is only concerned about the current DATAx packet.
35b24 05f             | '------------------------------------------------------------------------------
35b24 05f             | ' On entry:
35b24 05f             | '   PTRA - hub start address of the data to read.
35b24 05f             | '   pkt_cnt - data payload size.
35b24 05f             | ' On exit:
35b24 05f             | '------------------------------------------------------------------------------
35b24 05f             | utx_data
35b24 05f 22 A7 82 FA |                 rqpin   urx, dm
35b28 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35b2c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
35b30 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
35b34 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
35b38 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35b3c 065 D8 0C B0 CD |         if_c    call    #utx_pre
35b40 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35b44 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
35b48 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
35b4c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
35b50 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
35b54 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
35b58 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
35b5c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
35b60 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
35b64 06f             | .read_byte
35b64 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
35b68 070 F0 00 B0 FD |                 call    #utx_byte
35b6c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
35b70 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
35b74 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35b78 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
35b7c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
35b80 076             | .send_crc
35b80 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
35b84 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
35b88 078 D0 00 B0 FD |                 call    #utx_byte
35b8c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
35b90 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
35b94 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
35b98 07c             | 
35b98 07c             | '------------------------------------------------------------------------------
35b98 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
35b98 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
35b98 07c             | ' expects that the packet includes at least the CRC word.
35b98 07c             | '
35b98 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
35b98 07c             | ' was requested, which makes it difficult to determine where the data stops
35b98 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
35b98 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
35b98 07c             | ' USB-16 expected residual value of 0xB001.
35b98 07c             | '
35b98 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
35b98 07c             | ' so the caller can verify IN success before writing the data to its final
35b98 07c             | ' destination.
35b98 07c             | '------------------------------------------------------------------------------
35b98 07c             | ' On entry:
35b98 07c             | '   pkt_data - max byte count expected to be in the packet.
35b98 07c             | '   newb_flg - signals new byte ready when toggled.
35b98 07c             | ' On exit:
35b98 07c             | '   pkt_cnt - actual number of bytes read.
35b98 07c             | '------------------------------------------------------------------------------
35b98 07c             | urx_data
35b98 07c F7 75 03 F6 |                 mov     htmp2, pb
35b9c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
35ba0 07e 00 00 C0 FF 
35ba4 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
35ba8 080 BA EF 03 F6 |                 mov     pb, htmp2
35bac 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
35bb0 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
35bb4 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
35bb8 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
35bbc 085             | .wait_byte
35bbc 085             | ' In-line rx for max speed
35bbc 085 22 A7 82 FA |                 rqpin   urx, dm
35bc0 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35bc4 087 53 A5 02 F5 |                 and     utx, urx
35bc8 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
35bcc 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
35bd0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
35bd4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
35bd8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
35bdc 08d DC FF 9F FD |                 jmp     #.wait_byte
35be0 08e             | .get_byte
35be0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
35be4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
35be8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
35bec 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
35bf0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35bf4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
35bf8 094             | .end_crc
35bf8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
35bfc 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
35c00 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
35c04 097 2D 00 64 1D |         if_a    ret
35c08 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
35c08 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
35c08 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
35c08 098             | ' to miss it, so cheat a bit and look for SOP clear here.
35c08 098 22 A7 82 FA |                 rqpin   urx, dm
35c0c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
35c10 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
35c14 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
35c14 09b             | .chk_crc
35c14 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
35c18 09c 58 00 00 FF 
35c1c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
35c20 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
35c24 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
35c28 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
35c2c 0a1 34 09 B0 FD |                 call    #poll_waitx
35c30 0a2             | 
35c30 0a2             |                 ' Fall through to utx_handshake
35c30 0a2             | 
35c30 0a2             | '------------------------------------------------------------------------------
35c30 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
35c30 0a2             | ' the appropriate IP delay has been inserted.
35c30 0a2             | '------------------------------------------------------------------------------
35c30 0a2             | ' On entry:
35c30 0a2             | '   retval - handshake PID to send.
35c30 0a2             | ' On exit:
35c30 0a2             | '   retval unchanged.
35c30 0a2             | '------------------------------------------------------------------------------
35c30 0a2             | utx_handshake
35c30 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35c34 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
35c38 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35c3c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
35c40 0a6 5F A5 02 F6 |                 mov     utx, retval
35c44 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
35c48 0a8             | .idle
35c48 0a8 22 A7 82 FA |                 rqpin   urx, dm
35c4c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35c50 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
35c54 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
35c58 0ac 08 09 90 FD |                 jmp     #poll_waitx
35c5c 0ad             | 
35c5c 0ad             | '------------------------------------------------------------------------------
35c5c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
35c5c 0ad             | '------------------------------------------------------------------------------
35c5c 0ad             | ' On entry:
35c5c 0ad             | '   utx - byte to transmit.
35c5c 0ad             | ' On exit:
35c5c 0ad             | '------------------------------------------------------------------------------
35c5c 0ad             | utx_byte
35c5c 0ad 40 46 72 FD |                 testp   dp                      wc
35c60 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
35c64 0af 23 03 08 FC |                 akpin   dp
35c68 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
35c6c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
35c70 0b2             | 
35c70 0b2             | '------------------------------------------------------------------------------
35c70 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
35c70 0b2             | '------------------------------------------------------------------------------
35c70 0b2             | ' On entry:
35c70 0b2             | ' On exit:
35c70 0b2             | '   retval - the byte read.
35c70 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
35c70 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
35c70 0b2             | '     received.
35c70 0b2             | '------------------------------------------------------------------------------
35c70 0b2             | urx_next
35c70 0b2 22 A7 8A FA |                 rdpin   urx, dm
35c74 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35c78 0b4 53 A5 02 F5 |                 and     utx, urx
35c7c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
35c80 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
35c84 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
35c88 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
35c8c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35c90 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
35c94 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
35c98 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
35c9c 0bd 2D 00 64 FD |                 ret
35ca0 0be             | 
35ca0 0be             | '------------------------------------------------------------------------------
35ca0 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
35ca0 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
35ca0 0be             | ' length, and the PID is not included in the CRC calculation:
35ca0 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
35ca0 0be             | '  CRC5  ENDP ADDRESS PID
35ca0 0be             | ' %00000_1111_1111111_xxxxxxxx
35ca0 0be             | '------------------------------------------------------------------------------
35ca0 0be             | ' On entry:
35ca0 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
35ca0 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
35ca0 0be             | ' On exit:
35ca0 0be             | '   ep_addr_pid - CRC value appended to the packet.
35ca0 0be             | '------------------------------------------------------------------------------
35ca0 0be             | calc_crc5
35ca0 0be FF 03 00 FF 
35ca4 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
35ca8 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
35cac 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
35cb0 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
35cb4 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
35cb8 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
35cbc 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
35cc0 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
35cc4 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
35cc8 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
35ccc 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
35cd0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35cd4 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
35cd8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35cdc 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
35ce0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
35ce4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
35ce8 0d0             | 
35ce8 0d0             | '------------------------------------------------------------------------------
35ce8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
35ce8 0d0             | '------------------------------------------------------------------------------
35ce8 0d0             | isr1_fsframe
35ce8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
35cec 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35cf0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35cf4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35cf8 0d4             | .wait
35cf8 0d4 40 46 72 FD |                 testp   dp                      wc
35cfc 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
35d00 0d6 23 03 08 FC |                 akpin   dp
35d04 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
35d08 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
35d0c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
35d10 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
35d14 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
35d18 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
35d1c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
35d20 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
35d24 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
35d28 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
35d2c 0e1 2C FF BF FD |                 call    #utx_byte
35d30 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
35d34 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
35d38 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
35d3c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
35d40 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
35d44 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
35d48 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
35d4c 0e9 5B A5 42 F5 |                 or      utx, icrc
35d50 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
35d54 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
35d58 0ec 20 00 90 FD |                 jmp     #isr1_wait
35d5c 0ed             | isr1_lsframe
35d5c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
35d60 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35d64 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35d68 0f0             | .wait
35d68 0f0 40 46 72 FD |                 testp   dp                      wc
35d6c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
35d70 0f2 23 03 08 FC |                 akpin   dp
35d74 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
35d78 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
35d7c 0f5             | isr1_wait
35d7c 0f5 22 A5 82 FA |                 rqpin   utx, dm
35d80 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
35d84 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
35d88 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
35d8c 0f9 03 00 00 FF 
35d90 0fa FF B3 06 F5 |                 and     frame, ##$7ff
35d94 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
35d98 0fc F5 FF 3B FB |                 reti1
35d9c 0fd             | 
35d9c 0fd             | '------------------------------------------------------------------------------
35d9c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
35d9c 0fd             | ' transaction will complete before the next frame is triggered.
35d9c 0fd             | '------------------------------------------------------------------------------
35d9c 0fd             | ' On entry:
35d9c 0fd             | ' On exit:
35d9c 0fd             | '------------------------------------------------------------------------------
35d9c 0fd             | wait_txn_ok
35d9c 0fd 1A 74 63 FD |                 getct   htmp2
35da0 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
35da4 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35da8 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
35dac 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
35db0 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
35db4 103 2D 00 64 FD |                 ret
35db8 104             | 
35db8 104             | '------------------------------------------------------------------------------
35db8 104             | ' A device connection was detected, or a bus reset was requested by the USB
35db8 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
35db8 104             | ' and perform a reset sequence prior to device enumeration.
35db8 104             | '------------------------------------------------------------------------------
35db8 104             | dev_reset
35db8 104 22 A7 82 FA |                 rqpin   urx, dm
35dbc 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
35dc0 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
35dc4 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
35dc8 108             | reset
35dc8 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
35dcc 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
35dd0 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
35dd4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35dd8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
35ddc 10d 1A 92 62 FD |                 getct   iframe_ct_base
35de0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35de4 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35de8 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
35dec 111 24 70 07 F1 |                 add     htmp, #36
35df0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
35df4 113             | .framewait
35df4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
35df8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
35dfc 115 2D 00 64 FD |                 ret
35e00 116             | 
35e00 116             | '------------------------------------------------------------------------------
35e00 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
35e00 116             | '------------------------------------------------------------------------------
35e00 116             | ' On entry:
35e00 116             | '   PTRA - source address.
35e00 116             | '   PB - destination address.
35e00 116             | '   hr0 - length of copy, in bytes.
35e00 116             | ' On exit:
35e00 116             | '------------------------------------------------------------------------------
35e00 116             | hmemcpy
35e00 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
35e04 117 F7 71 43 FC |                 wrbyte  htmp, pb
35e08 118 01 EE 07 F1 |                 add     pb, #1
35e0c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
35e10 11a             | 
35e10 11a             | '------------------------------------------------------------------------------
35e10 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
35e10 11a             | ' loop until the errant device is disconnected.
35e10 11a             | '------------------------------------------------------------------------------
35e10 11a             | ' On entry:
35e10 11a             | ' On exit:
35e10 11a             | '------------------------------------------------------------------------------
35e10 11a             | host_error
35e10 11a             |           if ERROR_LED >= 0
35e10 11a             |           end
35e10 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
35e14 11b             | 
35e14 11b             | '------------------------------------------------------------------------------
35e14 11b             | ' Get HID descriptor buffer for current port
35e14 11b             | '------------------------------------------------------------------------------
35e14 11b             | ' On entry:
35e14 11b             | ' On exit:
35e14 11b             | '   PB - HID descriptor buffer pointer
35e14 11b             | '------------------------------------------------------------------------------
35e14 11b             | get_hid_descr_buffer
35e14 11b 2D EF 03 F6 |                 mov     pb, hdev_port
35e18 11c 01 EE E7 F2 |                 cmpsub  pb, #1
35e1c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
35e20 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
35e24 11f             | 
35e24 11f             | 
35e24 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
35e28 120             | 
35e28 120             | ' USB commands and error codes
35e28 120 00 00 00 00 | cmd_data        long    0
35e2c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
35e30 122             | 
35e30 122             | ' Parameters block assigned at cog startup
35e30 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
35e34 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
35e38 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
35e3c 125             | if ACTIVITY_LED >= 0
35e3c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
35e3c 125             | end
35e3c 125             | if ERROR_LED >= 0
35e3c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
35e3c 125             | end
35e3c 125 00 00 00 00 | hid_descr_p     long    0
35e40 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
35e40 126             | 'hkbd_report_p   long    0
35e40 126 00 00 00 00 | hub_descr_p     long    0
35e44 127 00 00 00 00 | urx_buff_p      long    0
35e48 128 00 00 00 00 | dev_desc_buff_p long    0
35e4c 129 00 00 00 00 | con_desc_buff_p long    0
35e50 12a 00 00 00 00 | cache_start_p   long    0
35e54 12b 00 00 00 00 | cache_end_p     long    0
35e58 12c             | if EMUPAD_MAX_PLAYER > 0
35e58 12c             | emupad_out_ptr  long    0
35e58 12c             | end
35e58 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
35e5c 12d             | 
35e5c 12d             | hdev_init_start
35e5c 12d             | hdev_port       res     1
35e5c 12d             | hdev_port       res     1
35e5c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35e5c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35e5c 12d             | kbm_next_datax  res     1
35e5c 12d             | kbm_next_datax  res     1
35e5c 12d             | hub_intf_num    res     1
35e5c 12d             | hub_intf_num    res     1
35e5c 12d             | hub_next_datax  res     1
35e5c 12d             | hub_next_datax  res     1
35e5c 12d             | hub_status_chg  res     1
35e5c 12d             | hub_status_chg  res     1
35e5c 12d             | hub_port_status res     1
35e5c 12d             | hub_port_status res     1
35e5c 12d             | if HAVE_MOUSE
35e5c 12d             | ms_intf_num     res     1
35e5c 12d             | ms_intf_num     res     1
35e5c 12d             | ms_in_max_pkt   res     1
35e5c 12d             | ms_in_max_pkt   res     1
35e5c 12d             | end
35e5c 12d             | kb_intf_num     res     1
35e5c 12d             | kb_intf_num     res     1
35e5c 12d             | kb_interval     res     1
35e5c 12d             | kb_interval     res     1
35e5c 12d             | kb_in_max_pkt   res     1
35e5c 12d             | kb_in_max_pkt   res     1
35e5c 12d             | kb_max_index    res     1
35e5c 12d             | kb_max_index    res     1
35e5c 12d             | kb_led_states   res     1
35e5c 12d             | kb_led_states   res     1
35e5c 12d             | gp_intf_num     res     1
35e5c 12d             | gp_intf_num     res     1
35e5c 12d             | gp_interval     res     1
35e5c 12d             | gp_interval     res     1
35e5c 12d             | gp_max_index    res     1
35e5c 12d             | gp_max_index    res     1
35e5c 12d             | gp_descr_len    res     1+MAX_DEVICES
35e5c 12d             | gp_descr_len    res     1+MAX_DEVICES
35e5c 12d             | hdev_init_end
35e5c 12d             | 
35e5c 12d             | ' Initialized at cog startup:
35e5c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35e5c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35e5c 12d             | iframe_ct_new   res     1
35e5c 12d             | iframe_ct_new   res     1
35e5c 12d             | iframe_ct_base  res     1
35e5c 12d             | iframe_ct_base  res     1
35e5c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35e5c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35e5c 12d             | 
35e5c 12d             | ' This register block is reset to zero when a USB device connects
35e5c 12d             | hreg_init_start
35e5c 12d             | hstatus         res     1         ' Host status flags
35e5c 12d             | hstatus         res     1         ' Host status flags
35e5c 12d             | hctwait         res     1         ' Poll-based wait clocks
35e5c 12d             | hctwait         res     1         ' Poll-based wait clocks
35e5c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35e5c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35e5c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35e5c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35e5c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35e5c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35e5c 12d             | xfer_retry      res     1         ' Control transfer retry count
35e5c 12d             | xfer_retry      res     1         ' Control transfer retry count
35e5c 12d             | retry           res     1         ' Transaction retry count
35e5c 12d             | retry           res     1         ' Transaction retry count
35e5c 12d             | utx             res     1         ' Byte to transmit on USB
35e5c 12d             | utx             res     1         ' Byte to transmit on USB
35e5c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35e5c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35e5c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35e5c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35e5c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35e5c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35e5c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35e5c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35e5c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35e5c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35e5c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35e5c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35e5c 12d             | frame           res     1         ' USB 1ms frame counter value
35e5c 12d             | frame           res     1         ' USB 1ms frame counter value
35e5c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35e5c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35e5c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35e5c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35e5c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35e5c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35e5c 12d             | crc             res     1         ' Used for CRC16 calculation
35e5c 12d             | crc             res     1         ' Used for CRC16 calculation
35e5c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35e5c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35e5c 12d             | retval          res     1         ' Global success/fail return parameter
35e5c 12d             | retval          res     1         ' Global success/fail return parameter
35e5c 12d             | context_retval  res     1         ' Operation contextual return parameter
35e5c 12d             | context_retval  res     1         ' Operation contextual return parameter
35e5c 12d             | ' Device stuff
35e5c 12d             | hdev_id         res     1+MAX_DEVICES
35e5c 12d             | hdev_id         res     1+MAX_DEVICES
35e5c 12d             | hdev_bcd        res     1
35e5c 12d             | hdev_bcd        res     1
35e5c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35e5c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35e5c 12d             | ' Keyboard/mouse stuff
35e5c 12d             | hctrl_ep_addr   res     1
35e5c 12d             | hctrl_ep_addr   res     1
35e5c 12d             | hctrl_max_pkt   res     1
35e5c 12d             | hctrl_max_pkt   res     1
35e5c 12d             | hconfig_base    res     1
35e5c 12d             | hconfig_base    res     1
35e5c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35e5c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35e5c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35e5c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35e5c 12d             | hdev_class      res     1
35e5c 12d             | hdev_class      res     1
35e5c 12d             | hdev_subclass   res     1
35e5c 12d             | hdev_subclass   res     1
35e5c 12d             | hdev_protocol   res     1
35e5c 12d             | hdev_protocol   res     1
35e5c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35e5c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35e5c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35e5c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35e5c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35e5c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35e5c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35e5c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35e5c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35e5c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35e5c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35e5c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35e5c 12d             | if HAVE_MOUSE
35e5c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35e5c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35e5c 12d             | end
35e5c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35e5c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35e5c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35e5c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35e5c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35e5c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35e5c 12d             | hdev_out_addr   res     1
35e5c 12d             | hdev_out_addr   res     1
35e5c 12d             | 
35e5c 12d             | if EMUPAD_MAX_PLAYER > 0
35e5c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
35e5c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
35e5c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
35e5c 12d             | end
35e5c 12d             | 
35e5c 12d             | hreg_init_end
35e5c 12d             | 
35e5c 12d             | hidr_start
35e5c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35e5c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35e5c 12d             | hidr_flags      res     1
35e5c 12d             | hidr_flags      res     1
35e5c 12d             | hidr_axis       res     3
35e5c 12d             | hidr_axis       res     3
35e5c 12d             | hidr_buttons    res     1
35e5c 12d             | hidr_buttons    res     1
35e5c 12d             | hidr_hats       res     1
35e5c 12d             | hidr_hats       res     1
35e5c 12d             | '' Above are actually useful values, 6 longs
35e5c 12d             | hidr_id         res     1
35e5c 12d             | hidr_id         res     1
35e5c 12d             | hidr_state      res     1
35e5c 12d             | hidr_state      res     1
35e5c 12d             | hidr_size       res     1
35e5c 12d             | hidr_size       res     1
35e5c 12d             | hidr_count      res     1
35e5c 12d             | hidr_count      res     1
35e5c 12d             | hidr_offset     res     1
35e5c 12d             | hidr_offset     res     1
35e5c 12d             | hidr_usage_idx  res     1
35e5c 12d             | hidr_usage_idx  res     1
35e5c 12d             | hidr_lminmax    res     1
35e5c 12d             | hidr_lminmax    res     1
35e5c 12d             | hidr_pminmax    res     1
35e5c 12d             | hidr_pminmax    res     1
35e5c 12d             | hidr_type       res     1
35e5c 12d             | hidr_type       res     1
35e5c 12d             | hidr_end
35e5c 12d             | 
35e5c 12d             | ' Variables dependent on the system freqency
35e5c 12d             | _var_64_lower_  res     1
35e5c 12d             | _var_64_lower_  res     1
35e5c 12d             | _var_64_upper_  res     1
35e5c 12d             | _var_64_upper_  res     1
35e5c 12d             | _12Mbps_        res     1
35e5c 12d             | _12Mbps_        res     1
35e5c 12d             | _1_5Mbps_       res     1
35e5c 12d             | _1_5Mbps_       res     1
35e5c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35e5c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35e5c 12d             | _1us_           res     1         ' 1us
35e5c 12d             | _1us_           res     1         ' 1us
35e5c 12d             | _10us_          res     1         ' 10us
35e5c 12d             | _10us_          res     1         ' 10us
35e5c 12d             | _33us_          res     1         ' 33us
35e5c 12d             | _33us_          res     1         ' 33us
35e5c 12d             | _txn_err_       res     1         ' 250us
35e5c 12d             | _txn_err_       res     1         ' 250us
35e5c 12d             | _500us_         res     1         ' 500us
35e5c 12d             | _500us_         res     1         ' 500us
35e5c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35e5c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35e5c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35e5c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35e5c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35e5c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35e5c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35e5c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35e5c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35e5c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35e5c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35e5c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35e5c 12d             | _preamble_wait_ res     1
35e5c 12d             | _preamble_wait_ res     1
35e5c 12d             | _1ms_           res     1         ' 1ms
35e5c 12d             | _1ms_           res     1         ' 1ms
35e5c 12d             | _2ms_           res     1         ' 2ms
35e5c 12d             | _2ms_           res     1         ' 2ms
35e5c 12d             | _suspend_wait_  res     1         ' 3ms
35e5c 12d             | _suspend_wait_  res     1         ' 3ms
35e5c 12d             | _4ms_           res     1         ' 4ms
35e5c 12d             | _4ms_           res     1         ' 4ms
35e5c 12d             | _xfer_wait_     res     1         ' 5ms
35e5c 12d             | _xfer_wait_     res     1         ' 5ms
35e5c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35e5c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35e5c 12d             | _reset_hold_    res     1         ' 15ms
35e5c 12d             | _reset_hold_    res     1         ' 15ms
35e5c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35e5c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35e5c 12d             | _21ms_          res     1         ' 21ms
35e5c 12d             | _21ms_          res     1         ' 21ms
35e5c 12d             | _100ms_         res     1         ' 100ms
35e5c 12d             | _100ms_         res     1         ' 100ms
35e5c 12d             | _500ms_         res     1         ' 500ms
35e5c 12d             | _500ms_         res     1         ' 500ms
35e5c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35e5c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35e5c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35e5c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35e5c 12d             | '------------------------------------------------------------------------------
35e5c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35e5c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35e5c 12d             | _usb_d_ls_nco_  res     1
35e5c 12d             | _usb_d_ls_nco_  res     1
35e5c 12d             | _usb_h_fs_nco_  res     1
35e5c 12d             | _usb_h_fs_nco_  res     1
35e5c 12d             | _usb_d_fs_nco_  res     1
35e5c 12d             | _usb_d_fs_nco_  res     1
35e5c 12d             | '------------------------------------------------------------------------------
35e5c 12d             | ' Scratch registers
35e5c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35e5c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35e5c 12d             | htmp1           res     1
35e5c 12d             | htmp1           res     1
35e5c 12d             | htmp2           res     1
35e5c 12d             | htmp2           res     1
35e5c 12d             | htmp3           res     1
35e5c 12d             | htmp3           res     1
35e5c 12d             | hrep            res     1         ' Repeat count
35e5c 12d             | hrep            res     1         ' Repeat count
35e5c 12d             | hsave0          res     1         ' Subroutine parameter saves
35e5c 12d             | hsave0          res     1         ' Subroutine parameter saves
35e5c 12d             | hsave1          res     1
35e5c 12d             | hsave1          res     1
35e5c 12d             | hsave2          res     1
35e5c 12d             | hsave2          res     1
35e5c 12d             | isrtmp1         res     1
35e5c 12d             | isrtmp1         res     1
35e5c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35e5c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35e5c 12d             | hr0             res     1         ' Multi-purpose registers
35e5c 12d             | hr0             res     1         ' Multi-purpose registers
35e5c 12d             | hr1             res     1
35e5c 12d             | hr1             res     1
35e5c 12d             | hr2             res     1
35e5c 12d             | hr2             res     1
35e5c 12d             | hr3             res     1
35e5c 12d             | hr3             res     1
35e5c 12d             | hpar1           res     1         ' Routine entry/exit parameters
35e5c 12d             | hpar1           res     1         ' Routine entry/exit parameters
35e5c 12d             | hpar2           res     1
35e5c 12d             | hpar2           res     1
35e5c 12d             | hpar3           res     1
35e5c 12d             | hpar3           res     1
35e5c 12d             | hct2            res     1         ' Function response bus turn-around timer
35e5c 12d             | hct2            res     1         ' Function response bus turn-around timer
35e5c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35e5c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35e5c 12d             | mod_cnt         res     1         ' Used in idle loops
35e5c 12d             | mod_cnt         res     1         ' Used in idle loops
35e5c 12d             |                 fit     $1F0
35e5c 12d             |                 org     $200
35e5c 200             | hlut_start
35e5c 200             | 
35e5c 200             | '------------------------------------------------------------------------------
35e5c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
35e5c 200             | ' settings to startup defaults.
35e5c 200             | '------------------------------------------------------------------------------
35e5c 200             | ' On entry:
35e5c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
35e5c 200             | '------------------------------------------------------------------------------
35e5c 200             | set_speed_full
35e5c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
35e60 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35e64 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
35e68 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
35e6c 204             | '                ret                             wcz     ' Restore caller flags on exit
35e6c 204             | 
35e6c 204             | '------------------------------------------------------------------------------
35e6c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
35e6c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
35e6c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
35e6c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
35e6c 204             | ' putting the smart pins into reset.
35e6c 204             | '------------------------------------------------------------------------------
35e6c 204             | ' On entry:
35e6c 204             | ' On exit: CZ flags restored to caller states
35e6c 204             | '------------------------------------------------------------------------------
35e6c 204             | set_speed_low
35e6c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
35e70 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
35e74 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
35e78 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
35e7c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
35e80 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
35e84 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
35e88 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
35e8c 20c             | 
35e8c 20c             | '------------------------------------------------------------------------------
35e8c 20c             | ' Perform configuration stuff required when a device intitially connects.
35e8c 20c             | '------------------------------------------------------------------------------
35e8c 20c             | ' On entry:
35e8c 20c             | ' On exit:
35e8c 20c             | '------------------------------------------------------------------------------
35e8c 20c             | on_connect
35e8c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
35e90 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
35e94 20e             | .retry
35e94 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35e98 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
35e9c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
35ea0 211 00 08 00 FF 
35ea4 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35ea8 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
35eac 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35eb0 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
35eb4 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35eb8 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
35ebc 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35ec0 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
35ec4 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
35ec8 21b 4C 03 B0 FD |                 call    #poll_waitx
35ecc 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
35ed0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
35ed4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
35ed8 21f B8 FF 9F FD |                 jmp     #.retry
35edc 220             | .get_dev_desc
35edc 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35ee0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35ee4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35ee8 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
35eec 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
35ef0 225 88 FB BF FD |                 call    #reset
35ef4 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
35ef8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35efc 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
35f00 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
35f04 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35f08 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35f0c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
35f10 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35f14 22e 04 00 00 FF 
35f18 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
35f1c 230 34 FA BF FD |                 call    #calc_crc5
35f20 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
35f24 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35f28 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
35f2c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
35f30 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35f34 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35f38 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35f3c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35f40 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
35f44 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
35f48 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
35f4c 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
35f50 23d C4 02 B0 FD |                 call    #poll_waitx
35f54 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
35f58 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35f5c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
35f60 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
35f64 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
35f68 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35f6c 244 2D 00 64 5D |         if_nz   ret
35f70 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
35f74 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
35f78 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
35f7c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
35f80 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
35f84 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
35f88 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
35f8c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
35f90 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
35f94 24e 2C FB 9F CD |         if_b    jmp     #host_error
35f98 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
35f9c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
35fa0 251 2D EC 63 FD |                 call    pa
35fa4 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
35fa8 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
35fac 254 2C EC 63 FD |                 jmp     pa
35fb0 255             | 
35fb0 255             | '------------------------------------------------------------------------------
35fb0 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
35fb0 255             | ' Status reporting is always in the function-to-host direction.
35fb0 255             | '------------------------------------------------------------------------------
35fb0 255             | ' On entry:
35fb0 255             | '   PTRA - start address of the SETUP data in hub.
35fb0 255             | '   PB - start address of the buffer/struct to be written to during the IN data
35fb0 255             | '     stage.
35fb0 255             | '   ep_addr_pid - device address, endpoint and CRC5.
35fb0 255             | ' On exit:
35fb0 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
35fb0 255             | '     contains the count of data stage bytes actually received, which must
35fb0 255             | '     always be <= the count requested.
35fb0 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35fb0 255             | '     more specific USB operation error code.
35fb0 255             | '------------------------------------------------------------------------------
35fb0 255             | control_read
35fb0 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35fb4 256 F8 8F 03 F6 |                 mov     hpar2, ptra
35fb8 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
35fbc 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35fc0 259             | .xfer_start
35fc0 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35fc4 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35fc8 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35fcc 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
35fd0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
35fd4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35fd8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35fdc 260 61 00 00 FF 
35fe0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
35fe4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35fe8 263             | .data
35fe8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
35fec 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
35ff0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35ff4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
35ff8 267             | .nak_retry
35ff8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
35ffc 268             | .in_retry
35ffc 268 BC F6 BF FD |                 call    #txn_in
36000 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
36004 26a 28 00 90 AD |         if_z    jmp     #.commit
36008 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3600c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
36010 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
36014 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
36018 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3601c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
36020 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
36024 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
36028 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3602c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
36030 275             | .commit
36030 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
36034 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
36038 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3603c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
36040 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
36044 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
36048 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3604c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
36050 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
36054 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
36058 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3605c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
36060 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
36064 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
36068 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3606c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
36070 285             | .pre_status
36070 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
36074 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
36078 287 00 B0 06 F6 |                 mov     pkt_data, #0
3607c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
36080 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
36084 28a 61 00 00 FF 
36088 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3608c 28c             | .out_retry
3608c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
36090 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36094 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
36098 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3609c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
360a0 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
360a4 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
360a8 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
360ac 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
360b0 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
360b4 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
360b8 297             | ' I've encountered transfer STALL, even though the data looks correct, and
360b8 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
360b8 297             | ' ControlRead() transfer gets things unstuck most of the time...
360b8 297             | .xfer_retry
360b8 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
360bc 298 58 01 B0 FD |                 call    #poll_waitx
360c0 299 8C F9 BF FD |                 call    #wait_txn_ok
360c4 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
360c8 29b C7 F1 03 F6 |                 mov     ptra, hpar2
360cc 29c C8 EF 03 F6 |                 mov     pb, hpar3
360d0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
360d4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
360d8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
360dc 2a0             | 
360dc 2a0             | '------------------------------------------------------------------------------
360dc 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
360dc 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
360dc 2a0             | ' the SETUP data struct is filled with the required values.
360dc 2a0             | '------------------------------------------------------------------------------
360dc 2a0             | ' On entry:
360dc 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
360dc 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
360dc 2a0             | '     stage.
360dc 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
360dc 2a0             | ' On exit:
360dc 2a0             | '   retval - used to convey the success/failure of each stage.
360dc 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
360dc 2a0             | '     more specific USB operation error code.
360dc 2a0             | '------------------------------------------------------------------------------
360dc 2a0             | control_write
360dc 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
360e0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
360e4 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
360e8 2a3             | 
360e8 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
360ec 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
360f0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
360f4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
360f8 2a7             | .xfer_start
360f8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
360fc 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
36100 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
36104 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36108 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3610c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
36110 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
36114 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
36118 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3611c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
36120 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
36124 2b2             | .data
36124 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
36128 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3612c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
36130 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
36134 2b6             | .out_retry
36134 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
36138 2b7 88 F6 BF FD |                 call    #txn_out
3613c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36140 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
36144 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
36148 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3614c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
36150 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
36154 2be             | .commit
36154 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
36158 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3615c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
36160 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
36164 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
36168 2c3             | pre_status_in
36168 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3616c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
36170 2c5             | .status_retry
36170 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
36174 2c6 44 F5 BF FD |                 call    #txn_in
36178 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3617c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
36180 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
36184 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
36188 2cb 2D 00 64 AD |         if_z    ret
3618c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
36190 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
36194 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
36198 2cf             | '               ret                                     ' Caller must handle transfer retirement
36198 2cf             | 
36198 2cf             | '------------------------------------------------------------------------------
36198 2cf             | ' Execute an IN interrupt transaction.
36198 2cf             | '------------------------------------------------------------------------------
36198 2cf             | ' On entry:
36198 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
36198 2cf             | '   hpar2 - Address of the IN data buffer
36198 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
36198 2cf             | ' On exit:
36198 2cf             | '   retval - the result of the operation.
36198 2cf             | '   hpar3 - the count of IN data bytes actually received.
36198 2cf             | '------------------------------------------------------------------------------
36198 2cf             | do_int_in
36198 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3619c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
361a0 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
361a4 2d2             | 
361a4 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
361a8 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
361ac 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
361b0 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
361b4 2d6             | .retry
361b4 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
361b8 2d7 00 F5 BF FD |                 call    #txn_in
361bc 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
361c0 2d9 1C 00 90 AD |         if_z    jmp     #.commit
361c4 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
361c8 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
361cc 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
361d0 2dd 54 00 B0 FD |                 call    #retry_wait
361d4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
361d8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
361dc 2e0 D4 FF 9F FD |                 jmp     #.retry
361e0 2e1             | .commit
361e0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
361e4 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
361e8 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
361ec 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
361f0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
361f4 2e6             | .post_ret
361f4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
361f8 2e7             | 
361f8 2e7             | 
361f8 2e7             | '------------------------------------------------------------------------------
361f8 2e7             | ' Resets the downstream hub port to FS
361f8 2e7             | '------------------------------------------------------------------------------
361f8 2e7             | dwnstream_reset
361f8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
361fc 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
36200 2e9             | 
36200 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
36204 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
36208 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3620c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
36210 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
36214 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
36218 2ef             | 
36218 2ef             | '------------------------------------------------------------------------------
36218 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
36218 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
36218 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
36218 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
36218 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
36218 2ef             | '------------------------------------------------------------------------------
36218 2ef             | ' On entry:
36218 2ef             | '   hctwait - wait interval in sysclocks.
36218 2ef             | ' On exit:
36218 2ef             | '------------------------------------------------------------------------------
36218 2ef             | poll_waitx
36218 2ef 1A 92 63 FD |                 getct   hct2
3621c 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
36220 2f1             | .wait
36220 2f1 FF 25 CC FB |                 jnct2   #.wait
36224 2f2 2D 00 64 FD |                 ret
36228 2f3             | 
36228 2f3             | '------------------------------------------------------------------------------
36228 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
36228 2f3             | '------------------------------------------------------------------------------
36228 2f3             | ' On entry:
36228 2f3             | '   retval - transaction response PID or error code.
36228 2f3             | ' On exit:
36228 2f3             | '------------------------------------------------------------------------------
36228 2f3             | retry_wait
36228 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3622c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
36230 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
36234 2f6 14 00 90 AD |         if_z    jmp     #.nak
36238 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3623c 2f8 D8 FF BF FD |                 call    #poll_waitx
36240 2f9             | .dec
36240 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
36244 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
36248 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3624c 2fc             | .nak
3624c 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
36250 2fd C4 FF BF FD |                 call    #poll_waitx
36254 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
36258 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3625c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
36260 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
36264 302 2D 00 64 FD |                 ret
36268 303             | 
36268 303             | host_reset
36268 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3626c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
36270 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
36270 305 BD 01 05 FF 
36274 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
36278 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3627c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
36280 309             | ' Check to see if the system clock has been changed.
36280 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
36284 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
36288 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3628c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
36290 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36294 30e 40 46 62 FD |                 dirl    dp
36298 30f             | 
36298 30f 28 02 64 FD |                 setq    #1
3629c 310 80 00 80 FF 
362a0 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
362a4 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
362a8 313             | .enable
362a8 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
362ac 314 41 46 62 FD |                 dirh    dp
362b0 315 1F 36 63 FD |                 waitx   _1us_
362b4 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
362b8 317             | 
362b8 317             |                 ' Handle Port protection enable and startup delay
362b8 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
362bc 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
362c0 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
362c4 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
362c8 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
362cc 31c             | 
362cc 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
362d0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
362d4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
362d8 31f 00 00 04 F6 |                 mov     0-0, #0
362dc 320             | .regloop
362dc 320             | 
362dc 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
362dc 320             | 
362dc 320             | discon_entry
362dc 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
362e0 321             | 
362e0 321             |               
362e0 321             |         if HAVE_HIDPAD
362e0 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
362e4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
362e8 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
362ec 324 F7 01 68 FC |                 wrlong  #0,pb
362f0 325             |         end
362f0 325             |         if EMUPAD_MAX_PLAYER > 0
362f0 325             |         end
362f0 325             | 
362f0 325             |                 ' Fall through to disconnected loop
362f0 325             | 
362f0 325             | '-----------------------------------------------------------------------------------------------------------------
362f0 325             | ' Device connect handling (Section 7.1.7.3).
362f0 325             | '-----------------------------------------------------------------------------------------------------------------
362f0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
362f0 325             | ' device to connect (Section 7.1.7.3).
362f0 325             | '-----------------------------------------------------------------------------------------------------------------
362f0 325             | disconnected
362f0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
362f4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
362f8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
362fc 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
36300 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
36304 32a             |         if ACTIVITY_LED >= 0
36304 32a             |         end
36304 32a 22 A7 82 FA |                 rqpin   urx, dm
36308 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3630c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
36310 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
36314 32e             | .se1_test
36314 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
36318 32f FC FE BF FD |                 call    #poll_waitx
3631c 330 22 A7 82 FA |                 rqpin   urx, dm
36320 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
36324 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
36328 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3632c 334             | .se1            'SE1 is a fatal error condition
3632c 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
36330 335 E4 FE BF FD |                 call    #poll_waitx
36334 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
36338 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3633c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3633c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
36340 339 22 A7 82 FA |                 rqpin   urx, dm
36344 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
36348 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3634c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
36350 33d             | connected
36350 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
36354 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
36358 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3635c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
36360 341             | .set_pulse
36360 341 1A 64 63 FD |                 getct   _pulse_time_
36364 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
36368 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
36368 343             | ' of 1ms and make a correction, if necessary.
36368 343             | '                mov     htmp, _1ms_
36368 343             | '                subs    htmp, iframe_delta
36368 343             | '                adds    _frame1ms_clks_, htmp
36368 343             | '                debug(udec(_frame1ms_clks_))
36368 343             | 
36368 343             |                 ' Fall through to idle/processing loop
36368 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3636c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
36370 345             | 
36370 345             | hidle
36370 345 22 A7 82 FA |                 rqpin   urx, dm
36374 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36378 347 98 00 90 CD |         if_c    jmp     #.se0_test
3637c 348 24 06 70 FD |                 pollct3                         wc
36380 349 68 00 90 3D |         if_nc   jmp     #.nopoll
36384 34a 1A 94 63 FD |                 getct   hct3
36388 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3638c 34c             | 
3638c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36390 34d 00 70 E3 F8 |                 getbyte htmp
36394 34e             | 
36394 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
36398 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3639c 350 40 00 90 AD |         if_z    jmp     #.poll
363a0 351             | 
363a0 351             |         if _HAVE_GAMEPAD
363a0 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
363a4 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
363a8 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
363ac 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
363b0 355 2C 00 90 AD |         if_z    jmp     #.poll
363b4 356             |         end
363b4 356             | 
363b4 356             |         if HAVE_MOUSE
363b4 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
363b8 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
363bc 358 20 00 90 AD |         if_z    jmp     #.poll
363c0 359             |         end
363c0 359             | 
363c0 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
363c4 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
363c8 35b 14 00 90 AD |         if_z    jmp     #.poll
363cc 35c             | 
363cc 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
363d0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
363d4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
363d8 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
363dc 360             |         if HAVE_MOUSE
363dc 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
363e0 361             |         else
363e0 361             |         end
363e0 361             | 
363e0 361             | .poll
363e0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
363e4 362 2D EC 63 FD |                 call    pa
363e8 363             | .skip_poll
363e8 363             | 
363e8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
363ec 364             | 
363ec 364             | .nopoll
363ec 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
363f0 365 44 00 90 AD |         if_z    jmp     #hsuspend
363f4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
363f8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
363fc 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
36400 369 1A 84 63 FD |                 getct   hr0
36404 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
36408 36b             |         if ACTIVITY_LED >= 0
36408 36b             |         end
36408 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3640c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
36410 36d 5C FF 9F FD |                 jmp     #hidle
36414 36e             | ' Check for extended SE0 state on the bus
36414 36e             | .se0_test
36414 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
36418 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3641c 370 22 A7 82 FA |                 rqpin   urx, dm
36420 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36424 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
36428 373 24 F6 BF FD |                 call    #wait_txn_ok
3642c 374 00 00 80 FF 
36430 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
36434 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
36434 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
36438 377             | 
36438 377             | hsuspend
36438 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3643c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
36440 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
36444 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
36448 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3644c 37c 00 96 07 F6 |                 mov     mod_cnt, #0
36450 37d             | 
36450 37d             |                 ' Fall through to resume wait loop
36450 37d             | 
36450 37d             | hwait_resume
36450 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
36454 37e 02 86 47 F0 |                 shr     hr1, #2
36458 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3645c 380             |         if ACTIVITY_LED >= 0
3645c 380             |         end
3645c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
36460 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
36464 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
36468 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3646c 384 18 00 90 AD |         if_z    jmp     #.resume
36470 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
36474 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
36478 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3647c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
36480 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
36484 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
36488 38b             | .resume
36488 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3648c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
36490 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
36494 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
36498 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3649c 390 1F 70 63 FD |                 waitx   htmp
364a0 391 22 07 28 FC |                 wypin   #OUT_J, dm
364a4 392 01 70 47 F0 |                 shr     htmp, #1
364a8 393 1F 70 63 FD |                 waitx   htmp
364ac 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
364b0 395 1A 92 62 FD |                 getct   iframe_ct_base
364b4 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
364b8 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
364bc 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
364c0 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
364c4 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
364c8 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
364cc 39c             | 
364cc 39c             | '------------------------------------------------------------------------------
364cc 39c             | ' Send preamble to enable low-speed HUB ports
364cc 39c             | '------------------------------------------------------------------------------
364cc 39c             | ' On entry:
364cc 39c             | ' On exit:
364cc 39c             | '   USB baud rate set to low-speed
364cc 39c             | '------------------------------------------------------------------------------
364cc 39c             | utx_pre
364cc 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
364d0 39d 40 46 62 FD |                 dirl    dp
364d4 39e 28 02 64 FD |                 setq    #1
364d8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
364dc 3a0 58 44 62 FD |                 drvl    dm
364e0 3a1 59 46 62 FD |                 drvh    dp
364e4 3a2             | 
364e4 3a2 1E 00 00 FF 
364e8 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
364ec 3a4             | 
364ec 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
364f0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
364f4 3a6 28 02 64 3D |         if_nc   setq    #1
364f8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
364fc 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
36500 3a9             | .l1
36500 3a9             | 
36500 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36504 3aa 40 46 62 FD |                 dirl    dp
36508 3ab 28 02 64 FD |                 setq    #1
3650c 3ac 80 00 80 FF 
36510 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
36514 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
36518 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3651c 3b0 41 46 62 FD |                 dirh    dp
36520 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36524 3b2             | 
36524 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
36528 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3652c 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
36530 3b5             | 
36530 3b5             | hlut_end
36530 3b5             |                 fit     $400
36530 3b5             |                 orgh
36530                 | if OVERLAP_MEMORY
36530                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
36530                 | end
36530                 | '------------------------------------------------------------------------------
36530                 | ' Routines called from cog space.
36530                 | '------------------------------------------------------------------------------
36530                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
36530                 | '------------------------------------------------------------------------------
36530                 | 
36530                 | '------------------------------------------------------------------------------
36530                 | ' USB host cog initialization.
36530                 | '------------------------------------------------------------------------------
36530                 | usb_host_init
36530                 |                 ' Initialize buffer pointers
36530                 |         if OVERLAP_MEMORY
36530                 |         else
36530     40 15 B0 FE |                 loc     pb, #hid_descr
36534                 |         end
36534     F7 4B 02 F6 |                 mov     hid_descr_p, pb
36538                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
36538                 |                 {
36538                 |                 }
36538                 |         
36538                 |                 {
36538                 |                 }
36538                 |                 'loc     pb,#hkbd_report
36538                 |                 'mov     hkbd_report_p,pb
36538                 | 
36538     08 1D B0 FE |                 loc     pb, #hub_descr
3653c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
36540     1D 1D B0 FE |                 loc     pb, #urx_buff
36544     F7 4F 02 F6 |                 mov     urx_buff_p, pb
36548     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3654c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
36550     9F 1D B0 FE |                 loc     pb, #con_desc_buff
36554     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
36558     18 15 B0 FE |                 loc     pb, #usb_cache_start
3655c     F7 55 02 F6 |                 mov     cache_start_p, pb
36560     E9 1C B0 FE |                 loc     pb, #usb_cache_end
36564     F7 57 02 F6 |                 mov     cache_end_p, pb
36568                 | 
36568                 |         if ERROR_LED >= 0
36568                 |         end
36568                 | 
36568                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
36568                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
36568                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
36568                 | ' Configure and enable the Serial Host USB port.
36568     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3656c                 | 
3656c                 | '------------------------------------------------------------------------------
3656c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3656c                 | '------------------------------------------------------------------------------
3656c                 | ' On entry:
3656c                 | '   htmp - current CLKFREQ value.
3656c                 | '------------------------------------------------------------------------------
3656c                 | hinit_usb_timings
3656c                 | '                getct   htmp2
3656c     B8 59 02 F6 |                 mov     save_sysclk, htmp
36570     8D 5B 80 FF 
36574     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
36578     18 30 63 FD |                 getqx   _12Mbps_
3657c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
36580     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
36584     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
36588     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3658c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
36590     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
36594     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
36598     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3659c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
365a0     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
365a4     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
365a8     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
365ac     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
365b0     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
365b4     80 00 00 FF 
365b8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
365bc     18 2C 63 FD |                 getqx   _var_64_lower_
365c0     19 2E 63 FD |                 getqy   _var_64_upper_
365c4     28 2C 63 FD |                 setq    _var_64_lower_
365c8     65 CD 1D FF 
365cc     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
365d0     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
365d4     01 00 00 FF 
365d8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
365dc     18 2C 63 FD |                 getqx   _var_64_lower_
365e0     19 2E 63 FD |                 getqy   _var_64_upper_
365e4     28 2C 63 FD |                 setq    _var_64_lower_
365e8     A1 07 00 FF 
365ec     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
365f0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
365f4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
365f8     09 36 57 F0 |                 shr     _1us_, #9               wc
365fc     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
36600     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
36604     18 38 63 FD |                 getqx   _10us_
36608     09 38 57 F0 |                 shr     _10us_, #9              wc
3660c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
36610     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
36614     18 3A 63 FD |                 getqx   _33us_
36618     09 3A 57 F0 |                 shr     _33us_, #9              wc
3661c     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
36620     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
36624     18 3C 63 FD |                 getqx   _txn_err_
36628     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3662c     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
36630     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
36634     18 3E 63 FD |                 getqx   _500us_
36638     09 3E 57 F0 |                 shr     _500us_, #9             wc
3663c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
36640     01 00 00 FF 
36644     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
36648     18 40 63 FD |                 getqx   _txn_ok_ls_
3664c     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
36650     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
36654     01 00 00 FF 
36658     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3665c     18 42 63 FD |                 getqx   _txn_ok_fs_
36660     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
36664     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
36668     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3666c     05 00 00 FF 
36670     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
36674     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
36678     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3667c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
36680     1C 00 00 FF 
36684     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
36688     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3668c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
36690     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
36694     00 00 00 FF 
36698     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3669c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
366a0     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
366a4     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
366a8     04 00 00 FF 
366ac     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
366b0     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
366b4     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
366b8     8D 5B 00 FF 
366bc     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
366c0     18 4C 63 FD |                 getqx   _preamble_wait_
366c4     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
366c8     01 00 00 FF 
366cc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
366d0     18 2C 63 FD |                 getqx   _var_64_lower_
366d4     19 2E 63 FD |                 getqy   _var_64_upper_
366d8     28 2C 63 FD |                 setq    _var_64_lower_
366dc     01 00 00 FF 
366e0     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
366e4     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
366e8     09 4E 57 F0 |                 shr     _1ms_, #9               wc
366ec     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
366f0     FF FF 7F FF 
366f4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
366f8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
366fc     A7 51 03 F6 |                 mov     _2ms_, _1ms_
36700     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
36704     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
36708     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3670c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
36710     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
36714     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
36718     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3671c     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
36720     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
36724     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
36728     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3672c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
36730     A7 59 03 F6 |                 mov     _8ms_, _1ms_
36734     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
36738     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3673c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
36740     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
36744     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
36748     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3674c     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
36750     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
36754     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
36758     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3675c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
36760                 | '        _ret_   mov     _1sec_, save_sysclk
36760                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
36760                 | '                ret
36760                 | {
36760                 | }
36760                 | 
36760                 | '------------------------------------------------------------------------------
36760                 | ' Parse a configuration descriptor chain to see if the device is a recognized
36760                 | ' one. If it is, start the task progression that will configure the device for
36760                 | ' use.
36760                 | '------------------------------------------------------------------------------
36760                 | ' On entry:
36760                 | '   hconfig_base - start address of the cached config descriptor chain.
36760                 | ' On exit:
36760                 | '------------------------------------------------------------------------------
36760                 | hparse_con_desc
36760     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
36764     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
36768     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3676c     4E 70 FF F9 |                 movbyts htmp,#%%1032
36770     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
36774                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
36774                 | 
36774     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
36778     6E ED 03 F1 |                 add     pa, hconfig_base
3677c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
36780                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
36780                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
36780                 | ' that defines a keyboard and/or mouse.
36780     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
36784                 | .next_intf
36784     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
36788     BC 01 90 3D |         if_ae   jmp     #hset_config
3678c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
36790     75 F3 03 F1 |                 add     ptrb, hnext_desc
36794     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
36798     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3679c     0C 00 90 AD |         if_z    jmp     #.intf
367a0     80 71 C7 FA |                 rdbyte  htmp, ptrb
367a4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
367a8     D8 FF 9F FD |                 jmp     #.next_intf
367ac                 | .intf
367ac     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
367b0     00 90 07 F6 |                 mov     hpar3, #0
367b4     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
367b8     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
367bc     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
367c0     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
367c4                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
367c4                 | 
367c4                 | .endp
367c4     80 71 C7 FA |                 rdbyte  htmp, ptrb
367c8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
367cc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
367d0     78 00 90 3D |         if_ae   jmp     #.get_device
367d4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
367d8     75 F3 03 F1 |                 add     ptrb, hnext_desc
367dc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
367e0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
367e4     64 00 90 AD |         if_z    jmp     #.get_device
367e8     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
367ec     04 00 90 AD |         if_z    jmp     #.get_ep
367f0     D0 FF 9F FD |                 jmp     #.endp
367f4                 | .get_ep
367f4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
367f8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
367fc     0F 86 67 F0 |                 shl     hr1, #8 + 7
36800     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
36804     3F 00 00 FF 
36808     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3680c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
36810     00 8E 0F F2 |                 cmp     hpar2, #0               wz
36814     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
36818     00 90 0F F2 |                 cmp     hpar3, #0               wz
3681c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
36820     A0 FF 9F FD |                 jmp     #.endp
36824                 | .in_ep
36824     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
36828     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3682c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3682c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
36830     C2 89 DB F8 |                 setbyte hr2, hr0, #3
36834     8C FF 9F FD |                 jmp     #.endp
36838                 | .out_ep
36838     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3683c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
36840                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
36840     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
36844     C2 8B DB F8 |                 setbyte hr3, hr0, #3
36848     78 FF 9F FD |                 jmp     #.endp
3684c                 | 
3684c                 | .get_device
3684c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
36850     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
36854     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
36858     68 00 90 AD |         if_z    jmp     #.gamepad
3685c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
36860     AC 00 90 AD |         if_z    jmp     #.hub
36864     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
36868     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3686c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
36870     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
36874     4C 00 90 AD |         if_z    jmp     #.gamepad
36878     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3687c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
36880                 | .keyboard
36880     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
36884                 |         if HAVE_MOUSE
36884     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
36888                 |         else
36888                 |         end
36888     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3688c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
36890     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
36894     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
36898     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3689c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
368a0                 |                 'debug(udec(kb_intf_num))
368a0                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
368a0     E0 FE 9F FD |                 jmp     #.next_intf
368a4                 | if HAVE_MOUSE
368a4                 | .mouse
368a4     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
368a8     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
368ac     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
368b0     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
368b4     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
368b8                 |                 'getbyte ms_interval, hr2, #3
368b8     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
368bc     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
368c0                 |                 'debug(udec(kb_intf_num))
368c0                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
368c0     C0 FE 9F FD |                 jmp     #.next_intf
368c4                 | end
368c4                 | .gamepad
368c4     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
368c8     C7 71 63 F5 |                 xor     htmp, hpar2
368cc     3F 00 00 FF 
368d0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
368d4     AC FE 9F AD |         if_z    jmp     #.next_intf
368d8                 |         if HAVE_MOUSE
368d8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
368dc     C7 71 63 F5 |                 xor     htmp, hpar2
368e0     3F 00 00 FF 
368e4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
368e8     98 FE 9F AD |         if_z    jmp     #.next_intf
368ec                 |         end
368ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
368f0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
368f4     8C FE 9F 5D |         if_nz   jmp     #.next_intf
368f8                 | 
368f8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
368fc     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
36900     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36904     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
36908     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3690c                 |                 'debug(udec(gp_intf_num))
3690c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3690c     74 FE 9F FD |                 jmp     #.next_intf
36910                 | .hub
36910     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
36914     6C FE 9F 5D |         if_nz   jmp     #.next_intf
36918     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3691c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
36920     60 FE 9F 5D |         if_nz   jmp     #.next_intf
36924     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
36928     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3692c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
36930     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
36934     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
36938     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3693c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
36940     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
36944                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
36944     3C FE 9F FD |                 jmp     #.next_intf
36948                 | 
36948                 | '------------------------------------------------------------------------------
36948                 | ' If a newly-connected device is recognized, do whatever is needed to configure
36948                 | ' it according to its function, or functions. In the case of this boot protocol
36948                 | ' keyboard/mouse class driver:
36948                 | ' - SetConfiguration(config_num)
36948                 | ' - SetProtocol(boot)
36948                 | ' - SetIdle(indefinite)
36948                 | ' - Enter the device interrupt IN polling task stage.
36948                 | '------------------------------------------------------------------------------
36948                 | ' On entry:
36948                 | ' On exit:
36948                 | '------------------------------------------------------------------------------
36948                 | hset_config
36948                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
36948                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
36948     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3694c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36950     00 00 0C F2 |                 cmp     0-0, #0                 wz
36954     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
36958                 |         if HAVE_MOUSE
36958     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3695c                 |         end
3695c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
36960     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
36964                 | .set_config
36964     6C 0E D0 FE |                 loc     ptra, #set_config
36968     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3696c     6E ED 03 F1 |                 add     pa, hconfig_base
36970     F6 8D C3 FA |                 rdbyte  hpar1, pa
36974     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
36978     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3697c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
36980     A0 02 A0 FD |                 call    #control_write
36984     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36988     2D 00 64 5D |         if_nz   ret
3698c                 | .kbd_config
3698c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
36990     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
36994                 | 
36994     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
36998     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3699c     3F 00 00 FF 
369a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
369a4     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
369a8                 | 
369a8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
369ac     34 0E D0 FE |                 loc     ptra, #set_protocol
369b0     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
369b4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
369b8     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
369bc     A0 02 A0 FD |                 call    #control_write
369c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
369c4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
369c8     E4 02 90 5D |         if_nz   jmp     #.notify_client
369cc     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
369d0     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
369d4     30 03 B0 FD |                 call    #hset_idle
369d8                 |                 'cmp     retval, #PID_ACK        wz
369d8                 |         'if_nz   mov     hkbd_ep_addr, #0
369d8                 |         'if_nz   jmp     #.notify_client
369d8     A8 99 02 F6 |                 mov     hctwait, _2ms_
369dc     EF 02 A0 FD |                 call    #poll_waitx
369e0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
369e4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
369e8     90 17 90 FE |                 loc     pa, #hkbd_led_rep
369ec     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
369f0     2C 03 B0 FD |                 call    #hset_kbdled_report
369f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
369f8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
369fc     B0 02 90 5D |         if_nz   jmp     #.notify_client
36a00     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36a04     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36a08     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36a0c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36a10     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
36a14     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
36a18     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
36a1c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36a20     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
36a24     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
36a28     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
36a2c                 |         if !!HAVE_MOUSE
36a2c                 |         end
36a2c                 | 
36a2c                 | .mouse_config
36a2c                 | if HAVE_MOUSE
36a2c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
36a30     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
36a34     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
36a38     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36a3c     3F 00 00 FF 
36a40     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36a44     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
36a48                 | 
36a48                 |                 debug("mouse passed addr check")
36a48                 | 
36a48     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
36a4c     00 00 80 FF 
36a50     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
36a54     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
36a58     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36a5c     55 02 A0 FD |                 call    #control_read
36a60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36a64     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
36a68     44 02 90 5D |         if_nz   jmp     #.notify_client
36a6c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
36a70     56 01 00 F6 |                 mov     0-0, total_data
36a74     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36a78                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
36a78                 | 
36a78     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
36a7c     64 0D D0 FE |                 loc     ptra, #set_protocol
36a80     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
36a84     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36a88     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
36a8c     A0 02 A0 FD |                 call    #control_write
36a90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36a94     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
36a98     14 02 90 5D |         if_nz   jmp     #.notify_client
36a9c                 |                 debug("mouse passed SetProtocol")
36a9c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36aa0     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
36aa4     60 02 B0 FD |                 call    #hset_idle
36aa8                 |                 'cmp     retval, #PID_ACK        wz
36aa8                 |         'if_nz   mov     hmouse_ep_addr, #0
36aa8                 |         'if_nz   jmp     #.notify_client
36aa8                 |                 debug("mouse passed SetIdle")
36aa8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36aac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36ab0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36ab4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36ab8     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
36abc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36ac0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
36ac4     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
36ac8     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
36acc     3F 00 00 FF 
36ad0     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
36ad4     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
36ad8     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
36adc     D0 01 90 FD |                 jmp     #.notify_client
36ae0                 | end
36ae0                 | .gamepad_config
36ae0                 | if _HAVE_GAMEPAD
36ae0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36ae4     00 00 0C F2 |                 cmp     0-0, #0                 wz
36ae8     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
36aec     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36af0     00 70 03 F6 |                 mov     htmp, 0-0
36af4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36af8     3F 00 00 FF 
36afc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36b00     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
36b04                 | 
36b04     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36b08     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36b0c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36b10     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36b14     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36b18     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36b1c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
36b20     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
36b24     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
36b28     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36b2c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36b30     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
36b34     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
36b38     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36b3c                 | 
36b3c                 |                 if EMUPAD_MAX_PLAYER > 0
36b3c                 |                 
36b3c                 | .rule_loop           
36b3c                 |                 end
36b3c                 | 
36b3c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
36b40     5C 00 90 AD |         if_e    jmp     #.xinput
36b44     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
36b48     00 70 03 F6 |                 mov     htmp,0-0
36b4c     01 A6 02 FF 
36b50     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
36b54     7C 00 90 AD |         if_e    jmp     #.ps3
36b58                 | 
36b58     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
36b5c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
36b60     00 00 80 5F 
36b64     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
36b68     03 00 80 AF 
36b6c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
36b70     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
36b74     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36b78     55 02 A0 FD |                 call    #control_read
36b7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36b80     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
36b84     00 00 04 56 |         if_nz   mov     0-0, #0
36b88     24 01 90 5D |         if_nz   jmp     #.notify_client
36b8c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
36b90     56 01 00 F6 |                 mov     0-0, total_data
36b94     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36b98                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
36b98                 | 
36b98     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
36b9c     10 01 90 FD |                 jmp     #.notify_client
36ba0                 | .xinput
36ba0     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
36ba4     2D EF 03 F6 |                 mov     pb,hdev_port
36ba8     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
36bac     03 EE 27 F3 |                 fle     pb,#3
36bb0     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
36bb4     02 EF 47 FC |                 wrbyte  pb, ptra[2]
36bb8                 | 
36bb8     03 B0 06 F6 |                 mov     pkt_data, #3
36bbc     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
36bc0     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
36bc4     5A 00 A0 FD |                 call    #txn_out
36bc8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
36bcc                 | 
36bcc     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
36bd0     DC 00 90 FD |                 jmp     #.notify_client
36bd4                 | .ps3
36bd4     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
36bd8     2D EF 03 F6 |                 mov     pb,hdev_port
36bdc     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
36be0     04 EE 27 F3 |                 fle     pb,#4
36be4     F7 EF C3 F9 |                 decod   pb
36be8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
36bec                 | 
36bec     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36bf0     00 0C D0 FE |                 loc     ptra, #set_report
36bf4     01 00 80 FF 
36bf8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
36bfc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36c00     03 61 5C FC |                 wrword  #48, ptra[wLength]
36c04     20 0C B0 FE |                 loc     pb, #ps3_command_buff
36c08     A0 02 A0 FD |                 call    #control_write
36c0c                 | 
36c0c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36c10     E0 0B D0 FE |                 loc     ptra, #set_report
36c14     01 00 80 FF 
36c18     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
36c1c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36c20     03 09 5C FC |                 wrword  #4, ptra[wLength]
36c24     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
36c28     A0 02 A0 FD |                 call    #control_write
36c2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
36c30     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
36c34     00 00 04 56 |         if_nz   mov     0-0, #0
36c38     74 00 90 5D |         if_nz   jmp     #.notify_client
36c3c                 | 
36c3c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
36c40     6C 00 90 FD |                 jmp     #.notify_client
36c44                 | end
36c44                 | 
36c44                 | .hub_config
36c44     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
36c48     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
36c4c     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
36c50     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36c54     3F 00 00 FF 
36c58     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36c5c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
36c60                 | 
36c60     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
36c64     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
36c68     26 EF 03 F6 |                 mov     pb, hub_descr_p
36c6c     55 02 A0 FD |                 call    #control_read
36c70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36c74     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
36c78     34 00 90 5D |         if_nz   jmp     #.notify_client
36c7c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
36c7c                 | 
36c7c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
36c80     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
36c84     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
36c88                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
36c88                 | .pwr_loop
36c88     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
36c8c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
36c90     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
36c94     A0 02 A0 FD |                 call    #control_write
36c98     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
36c9c                 | 
36c9c     B1 99 02 F6 |                 mov     hctwait, _500ms_
36ca0     B0 99 02 F1 |                 add     hctwait, _100ms_
36ca4     EF 02 A0 FD |                 call    #poll_waitx
36ca8                 | 
36ca8     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
36cac     00 00 90 FD |                 jmp     #.notify_client
36cb0                 | 
36cb0                 | .notify_client
36cb0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
36cb4     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
36cb8                 |                 debug(uhex_long(hdev_type,hdev_type+1))
36cb8                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
36cb8     2D 00 64 FD |                 ret
36cbc                 | 
36cbc                 | '------------------------------------------------------------------------------
36cbc                 | ' Initialize the keyboard/mouse data area to start-up values.
36cbc                 | '------------------------------------------------------------------------------
36cbc                 | ' On entry:
36cbc                 | ' On exit:
36cbc                 | '------------------------------------------------------------------------------
36cbc                 | init_kbdm_data
36cbc     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
36cc0     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
36cc4                 | 
36cc4     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
36cc8     2B ED 03 F6 |                 mov     pa, cache_end_p
36ccc                 | .loop
36ccc     61 01 4C FC |                 wrbyte  #0, ptra++
36cd0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
36cd4     F4 FF 9F CD |         if_b    jmp     #.loop
36cd8                 |         
36cd8                 |         if EMUPAD_MAX_PLAYER > 0
36cd8                 |         end
36cd8                 | 
36cd8                 | 
36cd8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
36cdc                 | .regloop
36cdc     00 EC 8F F9 |                 altd    pa
36ce0     00 00 04 F6 |                 mov     0-0, #0
36ce4     01 EC 07 F1 |                 add     pa, #1
36ce8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
36cec     EC FF 9F 5D |         if_nz   jmp     #.regloop
36cf0                 | 
36cf0     E1 E1 61 FF 
36cf4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
36cf8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
36cfc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
36d00     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
36d04                 | 
36d04     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
36d08                 | 
36d08                 | '------------------------------------------------------------------------------
36d08                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
36d08                 | ' function.
36d08                 | '------------------------------------------------------------------------------
36d08                 | ' On entry:
36d08                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
36d08                 | '   hpar2 - index number of the target interface.
36d08                 | ' On exit:
36d08                 | '------------------------------------------------------------------------------
36d08                 | hset_idle
36d08     A8 99 02 F6 |                 mov     hctwait, _2ms_
36d0c     EF 02 A0 FD |                 call    #poll_waitx
36d10     D8 0A D0 FE |                 loc     ptra, #set_idle
36d14     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
36d18     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
36d1c     A0 02 80 FD |                 jmp     #control_write
36d20                 | 
36d20                 | '------------------------------------------------------------------------------
36d20                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
36d20                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
36d20                 | '------------------------------------------------------------------------------
36d20                 | ' On entry:
36d20                 | '   ep_addr_pid - device address and enpoint for the request.
36d20                 | ' On exit:
36d20                 | '   retval - transaction result.
36d20                 | '------------------------------------------------------------------------------
36d20                 | hset_kbdled_report
36d20     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
36d24     CC 0A D0 FE |                 loc     ptra, #set_report
36d28     01 00 80 FF 
36d2c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
36d30     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36d34     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
36d38     27 EF 03 F6 |                 mov     pb, urx_buff_p
36d3c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
36d40     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
36d44                 | 
36d44                 | '------------------------------------------------------------------------------
36d44                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
36d44                 | '------------------------------------------------------------------------------
36d44                 | ' On entry:
36d44                 | ' On exit:
36d44                 | '------------------------------------------------------------------------------
36d44                 | hget_kbd_in_report
36d44     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36d48     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36d4c     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
36d50     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
36d54     CF 02 A0 FD |                 call    #do_int_in
36d58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36d5c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36d60                 | 
36d60     00 90 0F F2 |                 cmp     hpar3, #0               wz
36d64     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36d68                 | 
36d68     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
36d6c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36d70     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
36d74     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
36d78                 | 
36d78     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
36d7c     18 00 B0 FD |                 call    #hkbd_compare
36d80                 |         if EMUPAD_MAX_PLAYER > 0
36d80                 |         end
36d80                 | 
36d80                 | .led_check
36d80     3B 71 03 F6 |                 mov     htmp, kb_led_states
36d84     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
36d88     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
36d8c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
36d90     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
36d94     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
36d98                 | 
36d98                 | '------------------------------------------------------------------------------
36d98                 | ' Compare current and previous keyboard data buffers for keypress changes.
36d98                 | '------------------------------------------------------------------------------
36d98                 | hkbd_compare
36d98     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36d9c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
36da0     61 73 07 FB |                 rdlong  htmp1, ptra++
36da4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36da8     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
36dac     61 73 07 FB |                 rdlong  htmp1, ptra++
36db0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36db4     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
36db8     2D 00 64 AD |         if_z    ret
36dbc                 | 
36dbc     B4 13 D0 FE |                 loc     ptra, #hkbd_report
36dc0                 | 
36dc0                 |                 ' Handle modifiers
36dc0     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
36dc4     00 87 C7 FA |                 rdbyte  hr1, ptra
36dc8     C7 87 43 F9 |                 rolword hr1,hpar2,#0
36dcc     63 86 63 FD |                 mergew  hr1
36dd0     08 EC 07 F6 |                 mov     pa,#8
36dd4                 | .modloop
36dd4     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
36dd8     E8 8C 07 F6 |                 mov     hpar1,#$E8
36ddc     F6 8D 83 F1 |                 sub     hpar1,pa
36de0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
36de4     FB ED 6F FB |                 djnz    pa,#.modloop
36de8                 | 
36de8     6F E0 75 FD | .release        modc    _set    wc
36dec                 |                 'alts    hdev_port, #hid_report_p
36dec                 |                 'mov     ptra, hid_report_p
36dec     02 F0 07 F1 |                 add     ptra, #2
36df0     06 EC 07 F6 |                 mov     pa, #6
36df4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
36df8     20 00 90 AD |         if_z    jmp     #.rl3
36dfc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36e00     02 F2 07 F1 |                 add     ptrb, #2
36e04     06 EE 07 F6 |                 mov     pb, #6
36e08     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
36e0c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36e10     08 00 90 AD |         if_z    jmp     #.rl3
36e14     FC EF 6F FB |                 djnz    pb, #.rl2
36e18     68 00 B0 FD |                 call    #hkbd_translate
36e1c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
36e20                 | 
36e20     00 90 07 F6 |                 mov     hpar3, #0
36e24     1F 90 27 F4 |                 bith    hpar3, #31
36e28                 | 
36e28     6F 00 74 FD | .press          modc    _clr    wc
36e2c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36e30     02 F0 07 F1 |                 add     ptra, #2
36e34     06 EC 07 F6 |                 mov     pa, #6
36e38     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
36e3c     20 00 90 AD |         if_z    jmp     #.pl3
36e40     30 13 F0 FE |                 loc     ptrb, #hkbd_report
36e44     02 F2 07 F1 |                 add     ptrb, #2
36e48     06 EE 07 F6 |                 mov     pb, #6
36e4c     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
36e50     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36e54     08 00 90 AD |         if_z    jmp     #.pl3
36e58     FC EF 6F FB |                 djnz    pb, #.pl2
36e5c     24 00 B0 FD |                 call    #hkbd_translate
36e60     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
36e64                 | 
36e64     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
36e68     08 13 F0 FE |                 loc     ptrb, #hkbd_report
36e6c     28 02 64 FD |                 setq #1
36e70     61 73 07 FB |                 rdlong  htmp1, ptra++
36e74     28 02 64 FD |                 setq #1
36e78     E1 73 67 FC |                 wrlong  htmp1, ptrb++
36e7c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
36e80                 | 
36e80     2D 00 64 FD |                 ret
36e84                 | 
36e84                 | '------------------------------------------------------------------------------
36e84                 | ' Translate keyboard scancode to ASCII
36e84                 | '------------------------------------------------------------------------------
36e84                 | ' On entry:
36e84                 | '   hpar1 - scancode
36e84                 | '   hpar2 - key modifiers state
36e84                 | '       c - pressed (0) or released (1) flag
36e84                 | ' On exit:
36e84                 | '   hpar1 - bit     31 = 0 pressed, 1 released
36e84                 | '               30..17 = unused
36e84                 | '                   18 = scroll-lock state 
36e84                 | '                   17 = caps-lock state
36e84                 | '                   16 = num-lock state 
36e84                 | '                15..8 = key modifiers state
36e84                 | '                 7..0 = scancode
36e84                 | '------------------------------------------------------------------------------
36e84                 | hkbd_translate
36e84     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
36e88     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
36e8c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
36e90     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
36e94     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
36e98     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
36e9c                 | 
36e9c                 |         if EMUPAD_MAX_PLAYER > 0
36e9c                 | 
36e9c                 |         if EMUPAD_BT0_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT1_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT2_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT3_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT4_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT5_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT6_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT7_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT8_BIT >= 0
36e9c                 |         end
36e9c                 |         if EMUPAD_BT9_BIT >= 0
36e9c                 |         end
36e9c                 | 
36e9c                 |         end
36e9c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
36ea0     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
36ea4     1F 8C 47 F4 |                 bitc    hpar1, #31
36ea8                 |         if KEYQUEUE_SIZE > 0
36ea8     C4 09 B0 FE |                 loc pb,#keyq_head
36eac     F7 71 E3 FA |                 rdword htmp,pb
36eb0     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
36eb4     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
36eb8     B8 75 03 F6 |                 mov htmp2,htmp
36ebc     04 74 07 FA |                 mul htmp2,#4
36ec0     F7 75 03 F1 |                 add htmp2,pb
36ec4     02 74 07 F1 |                 add htmp2,#2
36ec8     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
36ecc     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
36ed0     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
36ed4     F7 71 43 5C |         if_nz   wrbyte htmp,pb
36ed8                 |         end
36ed8     2D 00 7C FD |                 ret wcz
36edc                 | 
36edc                 | if HAVE_MOUSE
36edc                 | '------------------------------------------------------------------------------
36edc                 | ' Execute an IN interrupt transaction to poll for mouse activity.
36edc                 | '------------------------------------------------------------------------------
36edc                 | ' On entry:
36edc                 | ' On exit:
36edc                 | '------------------------------------------------------------------------------
36edc                 | hget_mouse_in_report
36edc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36ee0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36ee4     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
36ee8     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
36eec     CF 02 A0 FD |                 call    #do_int_in
36ef0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36ef4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36ef8                 | 
36ef8     00 90 0F F2 |                 cmp     hpar3, #0               wz
36efc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36f00                 | 
36f00     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
36f04     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36f08     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
36f0c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
36f10                 | 
36f10     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36f14     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
36f18     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
36f1c     01 90 87 31 |         if_ae   sub     hpar3, #1
36f20                 | 
36f20     40 09 90 FE |                 loc     pa, #mouse_limits
36f24     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
36f28                 | 
36f28                 |                 ' load xacc,yacc,zacc
36f28     28 04 64 FD |                 setq    #3-1
36f2c     80 87 07 FB |                 rdlong  hr1,ptrb
36f30                 |                 ' load limits and outptr
36f30     28 04 64 FD |                 setq    #3-1
36f34     F6 73 03 FB |                 rdlong  htmp1,pa
36f38                 | 
36f38     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
36f3c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
36f40     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
36f44     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
36f48     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
36f4c     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
36f50     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
36f54     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
36f58                 |               
36f58                 | 
36f58     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
36f5c     07 70 67 F7 |                 signx   htmp, #7
36f60     B8 87 03 F1 |                 add     hr1,htmp
36f64     00 72 0F F2 |                 cmp     htmp1,#0 wz
36f68     B9 87 63 53 |         if_ne   fles    hr1,htmp1
36f6c     00 86 47 53 |         if_ne   fges    hr1,#0
36f70                 | 
36f70     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
36f74     07 70 67 F7 |                 signx   htmp, #7
36f78     B8 89 03 F1 |                 add     hr2,htmp
36f7c     00 74 0F F2 |                 cmp     htmp2,#0 wz
36f80     BA 89 63 53 |         if_ne   fles    hr2,htmp2
36f84     00 88 47 53 |         if_ne   fges    hr2,#0
36f88                 |                 
36f88                 | 
36f88     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
36f8c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
36f90     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
36f94     B8 8B 03 A1 |         if_z    add     hr3,htmp
36f98                 | 
36f98     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
36f9c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
36fa0                 | 
36fa0                 |                 ' write back accumulators
36fa0     28 04 64 FD |                 setq    #3-1
36fa4     80 87 67 FC |                 wrlong  hr1,ptrb
36fa8                 |                 ' if outptr set, write X/Y words
36fa8     00 76 0F F2 |                 cmp htmp3,#0                    wz
36fac     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
36fb0     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
36fb4     2D 00 64 FD |                 ret
36fb8                 | end
36fb8                 | 
36fb8                 | '------------------------------------------------------------------------------
36fb8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
36fb8                 | '------------------------------------------------------------------------------
36fb8                 | ' On entry:
36fb8                 | ' On exit:
36fb8                 | '------------------------------------------------------------------------------
36fb8                 | if _HAVE_GAMEPAD
36fb8                 | hget_gp_in_report
36fb8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36fbc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36fc0                 | 
36fc0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36fc4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
36fc8     00 90 E3 F8 |                 getbyte hpar3
36fcc     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
36fd0     CF 02 A0 FD |                 call    #do_int_in
36fd4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36fd8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36fdc                 | 
36fdc     00 90 0F F2 |                 cmp     hpar3, #0               wz
36fe0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36fe4                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
36fe4                 | 
36fe4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
36fe8     00 70 E3 F8 |                 getbyte htmp                            ' |
36fec     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36ff0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
36ff4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
36ff8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
36ffc     B8 01 C0 F8 |                 setbyte htmp                            ' |
37000                 | 
37000                 | ' Note: the following code compares the current and previous reports
37000                 | ' and process the data if there are changes to ease the debug output.
37000                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
37000                 | ' gpPreReport buffer.
37000                 | 
37000                 |                 ' ----- start of block to remove
37000                 |                 {
37000                 |                 }
37000                 |                 ' ----- end of block to remove
37000     F4 04 90 FE |                 loc pa,#hpad_translate
37004     2A EC 63 FD |                 push pa
37008                 | 
37008                 |                 ' FALL THROUGH !!!!
37008                 | 
37008                 | '------------------------------------------------------------------------------
37008                 | ' Decode controller report
37008                 | '------------------------------------------------------------------------------
37008                 | hid_decode
37008                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
37008     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3700c     00 04 00 FF 
37010     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
37014                 | 
37014     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
37018                 | 
37018     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3701c     00 2A E3 F8 |                 getbyte hidr_type
37020     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
37024     34 02 90 AD |         if_z    jmp     #hpad_xinput
37028     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3702c     1C 03 90 AD |         if_z    jmp     #hpad_ps3
37030     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
37034     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
37038     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3703c                 |                 
3703c                 | 
3703c                 | '------------------------------------------------------------------------------
3703c                 | ' Handle HID controller (or mouse now
3703c                 | ' On entry:
3703c                 | '   ptrb - controller report
3703c                 | '------------------------------------------------------------------------------
3703c                 | hpad_hid
3703c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
37040     F7 F1 03 F6 |                 mov     ptra, pb
37044     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
37048     00 EC 03 F6 |                 mov     pa, 0-0
3704c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3704c     19 2A 3B FF 
37050     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
37054                 | 
37054                 | .next
37054     00 EC 5F F2 |                 cmps    pa, #0      wcz
37058     2D 00 7C ED |         if_be   ret     wcz
3705c                 | 
3705c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
37060     01 EC 87 F1 |                 sub     pa, #1
37064     00 8E 07 F6 |                 mov     hpar2, #0
37068                 | 
37068     C6 71 03 F6 |                 mov     htmp, hpar1
3706c     03 70 07 F5 |                 and     htmp, #$03
37070     01 70 0F F2 |                 cmp     htmp, #1    wz
37074     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
37078     07 8E 67 A7 |         if_z    signx   hpar2,#7
3707c     01 EC 87 A1 |         if_z    sub     pa, #1
37080     02 70 0F F2 |                 cmp     htmp, #2    wz
37084     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
37088     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3708c     02 EC 87 A1 |         if_z    sub     pa, #2
37090     03 70 0F F2 |                 cmp     htmp, #3    wz
37094     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
37098     04 EC 87 A1 |         if_z    sub     pa, #4
3709c                 | 
3709c     FC 8C 07 F5 |                 and     hpar1, #$FC
370a0                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
370a0                 | 
370a0     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
370a4     0C 01 90 AD |         if_z    jmp     #.report_id
370a8     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
370ac     24 01 90 AD |         if_z    jmp     #.usage_page
370b0     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
370b4     2C 01 90 AD |         if_z    jmp     #.usage
370b8     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
370bc     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
370c0     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
370c4     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
370c8     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
370cc     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
370d0     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
370d4     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
370d8     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
370dc     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
370e0     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
370e4     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
370e8     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
370ec     64 FF 9F 5D |         if_nz   jmp     #.next
370f0                 | 
370f0     D8 1D A7 FB |                 tjf     hidr_state,#.next
370f4                 | 
370f4     03 8E 07 F5 |                 and     hpar2, #$03
370f8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
370fc     18 00 90 5D |         if_nz   jmp     #.skip
37100                 | 
37100     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
37104     20 00 90 AD |         if_z    jmp     #.axes
37108     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3710c     5C 00 90 AD |         if_z    jmp     #.hats
37110     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
37114     70 00 90 AD |         if_z    jmp     #.buttons
37118                 | .skip
37118     8F 71 03 F6 |                 mov     htmp, hidr_size
3711c     90 71 03 FA |                 mul     htmp, hidr_count
37120     B8 23 03 F1 |                 add     hidr_offset, htmp
37124     2C FF 9F FD |                 jmp     #.next
37128                 | .axes
37128                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
37128     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3712c     90 87 03 F6 |                 mov     hr1, hidr_count
37130                 | .l1
37130     91 8D 03 F6 |                 mov     hpar1, hidr_offset
37134     8F 8F 03 F6 |                 mov     hpar2, hidr_size
37138     04 03 B0 FD |                 call    #hpad_getbits
3713c     64 03 B0 FD |                 call    #hpad_normalize
37140     06 84 1F F2 |                 cmp     hr0, #6         wcz
37144     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
37148     00 88 43 C8 |         if_b    getnib  hr2
3714c     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
37150     5F 01 20 C9 |         if_b    setword retval
37154     01 84 07 C1 |         if_b    add     hr0, #1
37158     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3715c     F4 87 6F FB |                 djnz    hr1, #.l1
37160                 | 
37160     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
37164     01 1C 07 F6 |                 mov     hidr_state, #1
37168     E8 FE 9F FD |                 jmp     #.next
3716c                 | .hats
3716c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3716c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
37170     8F 8F 03 F6 |                 mov     hpar2, hidr_size
37174     C8 02 B0 FD |                 call    #hpad_getbits
37178     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3717c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37180     01 1C 07 F6 |                 mov     hidr_state, #1
37184     90 FF 9F FD |                 jmp     #.skip
37188                 | .buttons
37188                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
37188     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3718c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
37190     90 8F 03 FA |                 mul     hpar2, hidr_count
37194     A8 02 B0 FD |                 call    #hpad_getbits
37198     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3719c     B8 BF 62 F0 |                 shl     retval, htmp
371a0     5F 17 43 F5 |                 or      hidr_buttons, retval
371a4     90 71 03 F1 |                 add     htmp, hidr_count
371a8     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
371ac     01 1C 07 F6 |                 mov     hidr_state, #1
371b0     64 FF 9F FD |                 jmp     #.skip
371b4                 | .report_id
371b4     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
371b8     2D 00 7C 5D |         if_nz   ret     wcz
371bc     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
371c0     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
371c4     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
371c8     01 1C 67 56 |         if_nz   neg     hidr_state,#1
371cc     01 F2 87 51 |         if_nz   sub     ptrb,#1
371d0     80 FE 9F FD |                 jmp     #.next
371d4                 | .usage_page
371d4     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
371d8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
371dc     04 1C 07 A6 |         if_z    mov     hidr_state, #4
371e0     70 FE 9F FD |                 jmp     #.next
371e4                 | .usage
371e4     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
371e8     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
371ec     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
371f0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
371f4     5C FE 9F AD |         if_z    jmp     #.next
371f8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
371fc     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
37200     01 1C 07 A6 |         if_z    mov     hidr_state, #1
37204     4C FE 9F AD |         if_z    jmp     #.next
37208     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3720c     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
37210     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
37214     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
37218     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3721c     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
37220     10 00 90 AD |         if_z    jmp     #.usage_axis
37224     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
37228     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3722c     03 1C 07 A6 |         if_z    mov     hidr_state, #3
37230     20 FE 9F FD |                 jmp     #.next
37234                 | .usage_axis
37234     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
37238     18 FE 9F CD |         if_b    jmp     #.next
3723c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
37240     C7 01 00 F8 |                 setnib  hpar2
37244                 | 
37244     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
37248     C7 8F C3 F9 |                 decod   hpar2
3724c     C7 0F 43 F5 |                 or      hidr_flags, hpar2
37250                 | 
37250     01 24 07 F1 |                 add     hidr_usage_idx, #1
37254     02 1C 07 F6 |                 mov     hidr_state, #2
37258     F8 FD 9F FD |                 jmp     #.next
3725c                 | 
3725c                 | '------------------------------------------------------------------------------
3725c                 | ' Handle XInput controller
3725c                 | ' On entry:
3725c                 | '   ptrb - controller report
3725c                 | '------------------------------------------------------------------------------
3725c                 | '   Default implementation translates the report to a pseudo-defacto hid
3725c                 | '   standard and jumps to hpad_translate for actions.
3725c                 | '   Implementors may take specific actions for this kind of controller.
3725c                 | '------------------------------------------------------------------------------
3725c                 | hpad_xinput
3725c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
37260     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
37264     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
37268     14 70 0F F2 |                 cmp     htmp, #$14      wz
3726c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
37270                 | 
37270                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
37270                 | 
37270     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
37274     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
37278                 | 
37278     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3727c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
37280     5F BF 22 F6 |                 not     retval
37284     5F 11 2B F9 |                 setword hidr_axis, retval, #1
37288     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3728c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
37290     5F BF 22 F6 |                 not     retval
37294     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
37298                 | 
37298     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3729c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
372a0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
372a4     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
372a8     F8 01 B0 FD |                 call    #hpad_normalize
372ac     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
372b0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
372b4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
372b8     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
372bc     E4 01 B0 FD |                 call    #hpad_normalize
372c0     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
372c4                 | 
372c4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
372c8     81 BF E6 FA |                 rdword  retval, ptrb[1]
372cc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
372d0     00 16 47 F4 |                 bitc    hidr_buttons, #0
372d4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
372d8     01 16 47 F4 |                 bitc    hidr_buttons, #1
372dc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
372e0     02 16 47 F4 |                 bitc    hidr_buttons, #2
372e4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
372e8     03 16 47 F4 |                 bitc    hidr_buttons, #3
372ec     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
372f0     04 16 47 F4 |                 bitc    hidr_buttons, #4
372f4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
372f8     05 16 47 F4 |                 bitc    hidr_buttons, #5
372fc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
37300     08 16 47 F4 |                 bitc    hidr_buttons, #8
37304     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
37308     09 16 47 F4 |                 bitc    hidr_buttons, #9
3730c     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
37310     0A 16 47 F4 |                 bitc    hidr_buttons, #10
37314     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
37318     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3731c     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
37320     0C 16 47 F4 |                 bitc    hidr_buttons, #12
37324                 | 
37324     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37328     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3732c     7A BB 7A FF 
37330     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
37334     F9 FF 7F FF 
37338     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3733c     B9 71 5F F9 |                 altgn   htmp, #htmp1
37340     00 70 43 F8 |                 getnib  htmp
37344     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
37348                 | 
37348     AC 01 90 FD |                 jmp     #hpad_translate
3734c                 | 
3734c                 | '------------------------------------------------------------------------------
3734c                 | ' Handle PS3 controller
3734c                 | ' On entry:
3734c                 | '   ptrb - controller report
3734c                 | '------------------------------------------------------------------------------
3734c                 | '   Default implementation translates the report to a pseudo-defacto hid
3734c                 | '   standard and jumps to hpad_translate for actions.
3734c                 | '   Implementors may take specific actions for this kind of controller.
3734c                 | '------------------------------------------------------------------------------
3734c                 | hpad_ps3
3734c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
37350     01 70 0F F2 |                 cmp     htmp, #$01      wz
37354     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
37358                 | 
37358                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
37358                 | 
37358     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3735c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
37360     40 01 B0 FD |                 call    #hpad_normalize
37364     5F 11 23 F9 |                 setword hidr_axis, retval, #0
37368     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3736c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
37370     30 01 B0 FD |                 call    #hpad_normalize
37374     5F 11 2B F9 |                 setword hidr_axis, retval, #1
37378     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3737c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
37380     20 01 B0 FD |                 call    #hpad_normalize
37384     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
37388     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3738c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
37390     10 01 B0 FD |                 call    #hpad_normalize
37394     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
37398     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3739c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
373a0                 | 
373a0     08 8C 07 F6 |                 mov     hpar1, #8
373a4     13 8E 07 F6 |                 mov     hpar2, #19
373a8     94 00 B0 FD |                 call    #hpad_getbits
373ac                 | 
373ac     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
373b0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
373b4     00 16 47 F4 |                 bitc    hidr_buttons, #0
373b8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
373bc     01 16 47 F4 |                 bitc    hidr_buttons, #1
373c0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
373c4     02 16 47 F4 |                 bitc    hidr_buttons, #2
373c8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
373cc     03 16 47 F4 |                 bitc    hidr_buttons, #3
373d0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
373d4     04 16 47 F4 |                 bitc    hidr_buttons, #4
373d8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
373dc     05 16 47 F4 |                 bitc    hidr_buttons, #5
373e0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
373e4     06 16 47 F4 |                 bitc    hidr_buttons, #6
373e8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
373ec     07 16 47 F4 |                 bitc    hidr_buttons, #7
373f0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
373f4     08 16 47 F4 |                 bitc    hidr_buttons, #8
373f8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
373fc     09 16 47 F4 |                 bitc    hidr_buttons, #9
37400     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
37404     0A 16 47 F4 |                 bitc    hidr_buttons, #10
37408     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3740c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37410     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
37414     0C 16 47 F4 |                 bitc    hidr_buttons, #12
37418                 | 
37418     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3741c     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
37420     09 FA 79 FF 
37424     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
37428     FF FA 7F FF 
3742c     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
37430     B9 71 5F F9 |                 altgn   htmp, #htmp1
37434     00 70 43 F8 |                 getnib  htmp
37438     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3743c                 | 
3743c     B8 00 90 FD |                 jmp     #hpad_translate
37440                 | 
37440                 | '------------------------------------------------------------------------------
37440                 | ' Read bits from report data buffer
37440                 | '------------------------------------------------------------------------------
37440                 | ' On entry:
37440                 | '   PTRB - report buffer
37440                 | '   hpar1 - start bit
37440                 | '   hpar2 - number of bits
37440                 | ' On exit:
37440                 | '   retval - bits
37440                 | '------------------------------------------------------------------------------
37440                 | hpad_getbits
37440     C6 71 03 F6 |                 mov     htmp, hpar1
37444     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
37448     F9 71 03 F1 |                 add     htmp, ptrb
3744c     B8 BF 02 FB |                 rdlong  retval, htmp
37450                 | 
37450     C6 73 03 F6 |                 mov     htmp1, hpar1
37454     07 72 07 F5 |                 and     htmp1, #$07     ' shift
37458     B9 BF 42 F0 |                 shr     retval, htmp1
3745c                 | 
3745c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
37460     10 00 90 1D |         if_a    jmp     #.l1
37464                 | 
37464     C7 8F C3 F9 |                 decod   hpar2
37468     01 8E 87 F1 |                 sub     hpar2, #1
3746c     C7 BF 02 F5 |                 and     retval, hpar2
37470     2D 00 64 FD |                 ret
37474                 | .l1
37474     FF 7F 00 FF 
37478     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3747c     03 70 07 F1 |                 add     htmp, #3
37480     B8 75 03 FB |                 rdlong  htmp2, htmp
37484     18 8E 87 F1 |                 sub     hpar2, #24
37488     C7 8F C3 F9 |                 decod   hpar2
3748c     01 8E 87 F1 |                 sub     hpar2, #1
37490     B9 75 43 F0 |                 shr     htmp2, htmp1
37494     C7 75 03 F5 |                 and     htmp2, hpar2
37498     18 74 67 F0 |                 shl     htmp2, #24
3749c     BA BF 42 F5 |                 or      retval, htmp2
374a0     2D 00 64 FD |                 ret
374a4                 | 
374a4                 | '------------------------------------------------------------------------------
374a4                 | ' Normalize value to signed word (-32768 / 32767)
374a4                 | '------------------------------------------------------------------------------
374a4                 | ' On entry:
374a4                 | '   retval - value to normalize
374a4                 | '   hidr_lminmax - min (word 1) max (word 0) value range
374a4                 | '   - or -
374a4                 | '   hidr_pminmax - min (word 1) max (word 0) value range
374a4                 | '   hidr_size - value bits length
374a4                 | ' On exit:
374a4                 | '   retval - normalized value
374a4                 | '------------------------------------------------------------------------------
374a4                 | hpad_normalize
374a4     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
374a8     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
374ac     2D 00 64 AD |         if_z    ret
374b0     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
374b4     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
374b8     0F 72 77 F7 |                 signx   htmp1, #15      wc
374bc     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
374c0     00 BE 66 C7 |         if_c    signx   retval, #0-0
374c4     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
374c8     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
374cc     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
374d0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
374d4     B8 71 53 F6 |                 abs     htmp            wc
374d8     1F BE 0E F4 |                 testb   retval, #31     wz
374dc     5F BF 42 F6 |                 abs     retval
374e0     B8 BF 12 FD |                 qdiv    retval, htmp
374e4     18 BE 62 FD |                 getqx   retval
374e8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
374ec     C0 FF 7F FF 
374f0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
374f4     2D 00 64 FD |                 ret
374f8                 | 
374f8                 | '------------------------------------------------------------------------------
374f8                 | ' Perform controller actions
374f8                 | ' On entry:
374f8                 | '    hidr_id        report id
374f8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
374f8                 | '                      X = hidr_axis+0, #0
374f8                 | '                      Y = hidr_axis+0, #1
374f8                 | '                      Z = hidr_axis+1, #0
374f8                 | '                     RX = hidr_axis+1, #1
374f8                 | '                     RY = hidr_axis+2, #0
374f8                 | '                     RZ = hidr_axis+2, #1
374f8                 | '    hidr_buttons   buttons state (bits 0 to 31)
374f8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
374f8                 | '
374f8                 | '                     -------3 -------2 -------1 -------0 byte
374f8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
374f8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
374f8                 | '                                zyx||| |||||||| ++++++++ n. buttons
374f8                 | '                                |||||| ||||++++--------- n. axes
374f8                 | '                                |||||| ++++------------- n. hats
374f8                 | '                                ++++++------------------ valid axes
374f8                 | '------------------------------------------------------------------------------
374f8                 | hpad_translate
374f8                 | 
374f8                 | 
374f8                 |         if HAVE_HIDPAD
374f8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
374fc     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
37500     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
37504     01 70 E7 F2 |                 cmpsub  htmp,#1
37508     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3750c     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
37510     2D 00 7C 3D |         if_ae   ret     wcz
37514     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
37518     B8 F3 03 F1 |                 add     ptrb,htmp
3751c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
37520     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
37524     28 0C 64 FD |                 setq    #7-1
37528     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3752c                 |         end
3752c                 | 
3752c                 | 
3752c                 |         if EMUPAD_MAX_PLAYER > 0
3752c                 | .emupad_no_hat
3752c                 |         if EMUPAD_BT0_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT1_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT2_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT3_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT4_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT5_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT6_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT7_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT8_BIT >= 0
3752c                 |         end
3752c                 |         if EMUPAD_BT9_BIT >= 0
3752c                 |         end
3752c                 | .emupad_slot_over
3752c                 |         end
3752c                 | 
3752c                 |         if 0
3752c                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3752c                 | 
3752c                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3752c                 | 
3752c                 |         end
3752c     2D 00 64 FD |                 ret
37530                 | end
37530                 | 
37530                 | if EMUPAD_MAX_PLAYER > 0
37530                 | '------------------------------------------------------------------------------
37530                 | ' Clear EmuPad state
37530                 | '------------------------------------------------------------------------------
37530                 | emupad_reset
37530                 | 
37530                 | '------------------------------------------------------------------------------
37530                 | ' Get EmuPad Player number for current device (into retval)
37530                 | ' Z flag is also set if current device is valid
37530                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
37530                 | '------------------------------------------------------------------------------
37530                 | emupad_getnum
37530                 | .loop
37530                 | '------------------------------------------------------------------------------
37530                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
37530                 | '------------------------------------------------------------------------------
37530                 | emupad_discon
37530                 | .loop         
37530                 |         
37530                 |         ' FALL THROUGH!!!
37530                 | 
37530                 | '------------------------------------------------------------------------------
37530                 | ' Update EmuPad reports (all of them...)
37530                 | '------------------------------------------------------------------------------
37530                 | emupad_write_reports
37530                 | .devloop
37530                 | 
37530                 | end
37530                 | 
37530                 | 
37530                 | '------------------------------------------------------------------------------
37530                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
37530                 | '------------------------------------------------------------------------------
37530                 | ' On entry:
37530                 | ' On exit:
37530                 | '------------------------------------------------------------------------------
37530                 | hget_hub_status
37530     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
37534     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
37538     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3753c     01 90 2F F9 |                 setword hpar3, #1, #1
37540     CF 02 A0 FD |                 call    #do_int_in
37544     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37548     0C 00 90 AD |         if_z    jmp     #.data
3754c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37550     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
37554     2D 00 64 FD |                 ret
37558                 | .data
37558     00 90 0F F2 |                 cmp     hpar3, #0               wz
3755c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
37560                 | 
37560     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
37564     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
37568     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3756c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
37570                 |                 debug(ubin_long(hub_status_chg))
37570                 | 
37570     01 5A 06 F6 |                 mov     hdev_port, #1
37574                 | .loop
37574     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
37578     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3757c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
37580     F0 FF 9F 3D |         if_nc   jmp     #.loop
37584     2D 00 64 FD |                 ret
37588                 | 
37588                 | hub_port_handler
37588     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3758c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
37590     27 EF 03 F6 |                 mov     pb, urx_buff_p
37594     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37598     55 02 A0 FD |                 call    #control_read
3759c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
375a0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
375a0                 | 
375a0     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
375a4     50 01 90 5D |         if_x0   jmp     #.other
375a8     68 02 D0 FE |                 loc     ptra, #clr_port_feat
375ac     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
375b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
375b4     A0 02 A0 FD |                 call    #control_write
375b8     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
375bc     7C 01 90 5D |         if_x0   jmp     #.disconnect
375c0     B0 99 02 F6 |                 mov     hctwait, _100ms_
375c4     EF 02 A0 FD |                 call    #poll_waitx
375c8                 | 
375c8     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
375cc     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
375d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
375d4     A0 02 A0 FD |                 call    #control_write
375d8                 | 
375d8     02 76 07 F6 |                 mov     htmp3, #2
375dc                 | .wait_reset
375dc     AC 99 02 F6 |                 mov     hctwait, _8ms_
375e0     EF 02 A0 FD |                 call    #poll_waitx
375e4     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
375e8     27 EF 03 F6 |                 mov     pb, urx_buff_p
375ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
375f0     55 02 A0 FD |                 call    #control_read
375f4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
375f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
375fc     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
37600                 | 
37600     10 02 D0 FE |                 loc     ptra, #clr_port_feat
37604     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
37608     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3760c     A0 02 A0 FD |                 call    #control_write
37610                 | 
37610     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
37614                 | .wait_recover
37614     A7 99 02 F6 |                 mov     hctwait, _1ms_
37618     EF 02 A0 FD |                 call    #poll_waitx
3761c     FD 71 6F FB |                 djnz    htmp,#.wait_recover
37620                 | 
37620     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
37624     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37628     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3762c                 | 
3762c     00 08 00 FF 
37630     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
37634     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
37638     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3763c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37640     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
37644     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37648     48 01 90 5D |         if_nz   jmp     #.done
3764c                 | .get_dev_desc
3764c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37650     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
37654     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37658     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3765c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
37660     01 71 57 FC |                 wrword  htmp, ptra[wValue]
37664     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
37668     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3766c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
37670     AC 99 02 F6 |                 mov     hctwait, _8ms_
37674     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37678     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3767c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
37680     BE 00 A0 FD |                 call    #calc_crc5
37684     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
37688     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3768c     F7 AD C2 FA |                 rdbyte  total_data, pb
37690     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37694     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37698     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3769c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
376a0     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
376a4     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
376a8                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
376a8     9F 99 02 F6 |                 mov     hctwait, _500us_
376ac     EF 02 A0 FD |                 call    #poll_waitx
376b0     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
376b4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
376b8     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
376bc     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
376c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
376c4     CC 00 90 5D |         if_nz   jmp     #.done
376c8     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
376cc     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
376d0     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
376d4     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
376d8     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
376dc     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
376e0     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
376e4     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
376e8     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
376ec     A4 00 90 CD |         if_b    jmp     #.done
376f0     6C F0 BF FD |                 call    #hparse_con_desc
376f4     9C 00 90 FD |                 jmp     #.done
376f8                 | 
376f8                 | .other
376f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
376fc     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
37700     28 00 90 AD |         if_x1   jmp     #.reset_feature
37704     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
37708     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3770c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
37710     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
37714     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
37718     10 00 90 AD |         if_x1   jmp     #.reset_feature
3771c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
37720     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
37724     04 00 90 AD |         if_x1   jmp     #.reset_feature
37728     68 00 90 FD |                 jmp     #.done
3772c                 | .reset_feature
3772c     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
37730     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37734     A0 02 A0 FD |                 call    #control_write
37738     58 00 90 FD |                 jmp     #.done
3773c                 | .disconnect
3773c                 | 
3773c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
37740     00 70 E3 F8 |                 getbyte htmp
37744     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
37748     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3774c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
37750     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
37754     00 76 06 A6 |         if_z    mov     kb_led_states, #0
37758     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3775c                 |         if EMUPAD_MAX_PLAYER > 0
3775c                 |         end
3775c                 |         if HAVE_MOUSE
3775c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
37760     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
37764     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
37768                 |         end
37768                 |         if HAVE_HIDPAD
37768     14 0A F0 FE |                 loc ptrb,#hidpad_report
3776c     2D 71 03 F6 |                 mov htmp,hdev_port
37770     01 70 E7 F2 |                 cmpsub htmp,#1
37774     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
37778     B8 F3 03 F1 |                 add ptrb,htmp
3777c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
37780     80 01 6C FC |                 wrlong #0,ptrb
37784                 |         end
37784                 | 
37784     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
37788     00 00 C4 F8 |                 setbyte #0
3778c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
37790     00 00 04 F6 |                 mov     0-0, #0
37794                 | 
37794                 | .done
37794     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
37798     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3779c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
377a0     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
377a4     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
377a8     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
377ac                 | 
377ac     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
377b0     27 EF 03 F6 |                 mov     pb, urx_buff_p
377b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
377b8     55 02 A0 FD |                 call    #control_read
377bc     00 69 06 FB |                 rdlong  hub_port_status, ptra
377c0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
377c0     2D 00 64 FD |                 ret
377c4                 | 
377c4                 | '------------------------------------------------------------------------------
377c4                 | ' Partially populated SETUP packets
377c4                 | '------------------------------------------------------------------------------
377c4     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
377c5     06          |                 byte    REQ_GET_DESC
377c6     00 01       |                 word    TYPE_DEVICE << 8
377c8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
377ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
377cc     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
377cd     06          |                 byte    REQ_GET_DESC
377ce     00 02       |                 word    TYPE_CONFIG << 8
377d0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
377d2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
377d4     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
377d5     09          |                 byte    REQ_SET_CONFIG
377d6     00 00       |                 word    0       ' Configuration value
377d8     00 00       |                 word    0       ' Zero
377da     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
377dc     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
377dd     05          |                 byte    REQ_SET_ADDR
377de     00 00       |                 word    0       ' Zero
377e0     00 00       |                 word    0       ' Zero
377e2     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
377e4                 | '------------------------------------------------------------------------------
377e4                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
377e4                 | ' wValue field dictates which protocol should be used.
377e4                 | '
377e4                 | ' When initialized, all devices default to report protocol. However the host
377e4                 | ' should not make any assumptions about the device state and should set the
377e4                 | ' desired protocol whenever initializing a device.
377e4                 | '------------------------------------------------------------------------------
377e4     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
377e5     0B          |                 byte    HID_SET_PROTO
377e6     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
377e8                 |                                                 ' (HID 1.11 Section 7.2.6).
377e8     00 00       |                 word    0               ' Interface index number.
377ea     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
377ec                 | '------------------------------------------------------------------------------
377ec     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
377ed     0A          |                 byte    HID_SET_IDLE
377ee     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
377f0                 |                                         ' reporting until a change is detected in the report data
377f0                 | 
377f0                 |                                         ' (HID 1.11 Section 7.2.4).
377f0     00 00       |                 word    0       ' Interface index number.
377f2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
377f4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
377f5     09          |                 byte    HID_SET_REPORT
377f6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
377f8                 |                                         ' (HID 1.11 Section 7.2.2).
377f8     00 00       |                 word    0       ' Interface index number.
377fa     00 00       |                 word    0       ' Size of the report, in bytes.
377fc     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
377fd     06          |                 byte    REQ_GET_DESC
377fe     00 22       |                 word    TYPE_REPORT << 8
37800     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
37802     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37804                 | '------------------------------------------------------------------------------
37804     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
37805     06          |                 byte    REQ_GET_DESC
37806     00 29       |                 word    TYPE_HUB << 8
37808     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3780a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3780c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3780d     03          |                 byte    REQ_SET_FEATURE
3780e     00 00       |                 word    0       ' port power
37810     01 00       |                 word    1       ' Port index number (1+)
37812     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37814     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
37815     01          |                 byte    REQ_CLEAR_FEATURE
37816     00 00       |                 word    0       ' port power
37818     01 00       |                 word    1       ' Port index number (1+)
3781a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3781c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3781d     00          |                 byte    REQ_GET_STATUS
3781e     00 00       |                 word    0
37820     01 00       |                 word    1       ' Port index number (1+)
37822     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
37824                 | '------------------------------------------------------------------------------
37824                 | if _HAVE_GAMEPAD
37824     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
37828                 | ps3_command_buff
37828     00 00 00 00 
3782c     00          |                 byte    $00, $00, $00, $00, $00
3782d     00 00 00 00 
37831     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
37832     FF 27 10 00 
37836     32          |                 byte    $FF, $27, $10, $00, $32
37837     FF 27 10 00 
3783b     32          |                 byte    $FF, $27, $10, $00, $32
3783c     FF 27 10 00 
37840     32          |                 byte    $FF, $27, $10, $00, $32
37841     FF 27 10 00 
37845     32          |                 byte    $FF, $27, $10, $00, $32
37846     00 00 00 00 
3784a     00          |                 byte    $00, $00, $00, $00, $00
3784b     00 00 00 00 
3784f     00          |                 byte    $00, $00, $00, $00, $00
37850     00 00 00 00 
37854     00          |                 byte    $00, $00, $00, $00, $00
37855     00 00 00    |                 byte    $00, $00, $00
37858                 | '------------------------------------------------------------------------------
37858     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3785b                 |                                         ' 0x01 All blinking
3785b                 |                                         ' 0x02 1 flashes, then on
3785b                 |                                         ' 0x03 2 flashes, then on
3785b                 |                                         ' 0x04 3 flashes, then on
3785b                 |                                         ' 0x05 4 flashes, then on
3785b                 |                                         ' 0x06 1 on
3785b                 |                                         ' 0x07 2 on
3785b                 |                                         ' 0x08 3 on
3785b                 |                                         ' 0x09 4 on
3785b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3785b                 |                                         ' 0x0B Blinking*
3785b                 |                                         ' 0x0C Slow blinking*
3785b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3785b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3785e     00          |                 byte    $00             ' Left rumble
3785f     00          |                 byte    $00             ' Right rumble
37860     00 00 00    |                 byte    $00, $00, $00
37863     00          | end
37864                 | alignl
37864                 | 
37864                 | if HAVE_MOUSE
37864     00 00 00 00 
37868     00 00 00 00 | mouse_limits long 0[2]
3786c     00 00 00 00 | mouse_outptr long 0
37870                 | end
37870                 | 
37870                 | if KEYQUEUE_SIZE > 0
37870     00          | keyq_head byte 0
37871     00          | keyq_tail byte 0
37872     00 00 00 00 
      ...             
37a6e     00 00 00 00 
37a72     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
37a74                 | alignl
37a74                 | end
37a74                 | 
37a74                 | if EMUPAD_MAX_PLAYER > 0
37a74                 | emupad_rule_buffer
37a74                 | if EMUPAD_BUILTIN_RULES
37a74                 | file "padmap_builtin.dat"
37a74                 | end
37a74                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
37a74                 | '' Default rule directly follows!
37a74                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
37a74                 | end
37a74                 | 
37a74                 | '------------------------------------------------------------------------------
37a74                 | ' The USB data cache area gets zero-filled at every device disconnect
37a74                 | '------------------------------------------------------------------------------
37a74                 | usb_cache_start
37a74                 | 
37a74                 | ' HID descriptor and report buffers
37a74                 | if !!OVERLAP_MEMORY
37a74     00 00 00 00 
      ...             
3816c     00 00 00 00 
38170     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
38174                 | end
38174     00 00 00 00 
38178     00 00 00 00 | hkbd_report     byte    0[8]
3817c     00 00 00 00 | hkbd_led_rep    byte    0
38180                 | alignl
38180                 | 
38180                 | if HAVE_HIDPAD
38180     00 00 00 00 
      ...             
3823c     00 00 00 00 
38240     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
38244                 | end
38244                 | 
38244                 | ' HUB descriptor
38244     00          | hub_descr       byte    0   ' bDescLength
38245     00          |                 byte    0   ' bDescriptorType
38246     00          |                 byte    0   ' bNbrPorts
38247     00 00       |                 word    0   ' wHubCharacteristics
38249     00          |                 byte    0   ' bPwrOn2PwrGood
3824a     00          |                 byte    0   ' bHubContrCurrent
3824b     00          |                 byte    0   ' DeviceRemoveable
3824c     00          |                 byte    0   ' PortPwrCtrlMask
3824d                 | 
3824d                 | usb_cache_end
3824d                 | 
3824d                 | if HAVE_MOUSE
3824d     00 00 00 00 | mouse_xacc      long 0
38251     00 00 00 00 | mouse_yacc      long 0
38255     00 00 00 00 | mouse_zacc      long 0
38259     00          | mouse_bstate    byte 0
3825a     00          | mouse_lpending  byte 0
3825b     00          | mouse_rpending  byte 0
3825c     00          | mouse_mpending  byte 0
3825d     00          | mouse_lock      byte 0
3825e     00 00 00    |                 byte 0[3] ' padding
38261                 | end
38261                 | 
38261     00 00 00 00 
      ...             
382d9     00 00 00 00 
382dd     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
382e1     00 00 00 00 
382e5     00 00 00 00 
382e9     00 00 00 00 
382ed     00 00 00 00 
382f1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
382f3     00 00 00 00 
      ...             
383eb     00 00 00 00 
383ef     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
383f3                 | 
383f3     00          | driver_cog      byte    0                       ' Current driver cog + 1
383f4                 | 	alignl
383f4                 | _audio096_spin2_dat_
383f4                 | 
383f4                 | audio       org     0
383f4                 | 
383f4     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
383f8     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
383fc     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
38400                 |  
38400     01 EC 63 FD |             cogid   pa                   ' compute cogid
38404     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
38408     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3840c     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
38410                 | 
38410     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
38414     0E 1E 06 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/95
38418     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3841c     0F 1E 06 FC |             wrpin   dac,#right
38420     0F BE 1C FC |             wxpin   #95,#right    
38424     41 9C 64 FD |             dirh    #left addpins 1
38428     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3842c     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
38430     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
38434                 |             
38434                 | '---------------------------------------------------------------------------------        
38434                 | '----------------- The main loop -------------------------------------------------
38434                 | '---------------------------------------------------------------------------------
38434                 | 
38434     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
38438     10 00 90 CD |       if_c  jmp     #loop1
3843c                 |   
3843c     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
38440     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
38444     D3 00 80 F1 |             sub     0-0,a40000000
38448     FD FD 6D FB |             djnz    cn,#p402
3844c                 |     
3844c     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
38450     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
38454     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
38458     01 FC 05 C6 |     if_c    mov     cn,#1
3845c     D8 FE 39 F3 |             fle     ct,time3 wcz
38460     02 FC 05 C6 |     if_c    mov     cn,#2     
38464     D9 FE 39 F3 |             fle     ct,time4 wcz
38468     03 FC 05 C6 |     if_c    mov     cn,#3
3846c     DA FE 39 F3 |             fle     ct,time5 wcz
38470     04 FC 05 C6 |     if_c    mov     cn,#4
38474     DB FE 39 F3 |             fle     ct,time6 wcz
38478     05 FC 05 C6 |     if_c    mov     cn,#5
3847c     DC FE 39 F3 |             fle     ct,time7 wcz
38480     06 FC 05 C6 |     if_c    mov     cn,#6
38484     DD FE 39 F3 |             fle     ct,time8 wcz
38488     07 FC 05 C6 |     if_c    mov     cn,#7
3848c                 | 
3848c                 | 
3848c                 | '----------------------------------------------------------------------------------
3848c                 | '------------- Compute channel samples --------------------------------------------
3848c                 | '----------------------------------------------------------------------------------
3848c                 | 
3848c                 | 
3848c     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
38490     06 BC 65 F0 |             shl     channeladd,#6
38494     DE F0 03 F1 |             add     ptra,channeladd
38498                 | 
38498     28 16 64 FD |             setq    #11                        	' read parameters
3849c     00 D3 05 FB |             rdlong  pointer0,ptra
384a0                 |     	    
384a0     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
384a4     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
384a8     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
384ac     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
384b0     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
384b4     00 C0 0D F2 |             cmp     qq,#0 wz                         
384b8     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
384bc     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
384c0                 |             
384c0     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
384c4     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
384c8     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
384cc                 | 
384cc     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
384d0     EA 04 3A F9 |             getword oldrs,sample0,#1
384d4     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
384d8     EE F6 31 F9 |     	    getword avol0,volpan0,#0
384dc     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
384e0     EF F2 31 F9 |             getword afreq0,freqskip0,#0
384e4                 | 
384e4     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
384e8     00 00 02 F6 |             mov     dt0,0-0    
384ec     D5 00 82 F1 |             sub     dt0,time0
384f0                 |             
384f0     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
384f4     F9 00 00 F1 |             add     0-0,afreq0  	
384f8                 |             
384f8                 | '---- envelopes
384f8                 |             
384f8     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
384fc     20 00 00 AF 
38500     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
38504     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
38508                 | 
38508     F9 44 02 F6 |             mov     envs1,afreq0
3850c     F3 44 02 FA |             mul     envs1,envspd0
38510     22 E3 01 F1 |             add     envph0,envs1 
38514                 | 
38514     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
38518     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3851c     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
38520     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
38524     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
38528     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3852c     00 42 06 36 |     if_ge   mov     envlo,#0
38530     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
38534     16 E2 65 30 |     if_ge   shl     envph0,#22
38538                 | 
38538     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
3853c     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
38540     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
38544     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
38548     22 47 3A F9 |             getword envs2,envs1,#1		' next value
3854c     22 45 32 F9 |             getword envs1,envs1,#0		' current value
38550     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
38554     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
38558     21 45 02 FA |             mul     envs1,envlo
3855c     23 45 02 F1 |             add     envs1,envs2
38560     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
38564                 |             
38564     1B D6 0D F4 | p410        testb   sstart0, #27 wz
38568     1B C2 61 AD |     if_z    getrnd  spl
3856c     58 00 90 AD |     if_z    jmp     #p406
38570                 |  
38570     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
38574     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
38578     08 D2 45 F0 |             shr     pointer0,#8
3857c                 |          
3857c     1F D6 0D F4 |             testb   sstart0,#31 wz            
38580     01 D2 65 A0 |     if_z    shl     pointer0,#1        
38584     1C D6 0D F4 |             testb   sstart0,#28 wz            
38588     01 D2 65 A0 |     if_z    shl     pointer0,#1        
3858c                 |         
3858c     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
38590     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
38594     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
38598                 |             
38598     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3859c     EB C0 01 F1 |             add     qq,sstart0            
385a0                 | 
385a0     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
385a4     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
385a8     14 01 B0 1D |     if_gt   call    #cache_read
385ac                 |          
385ac     1F D6 0D F4 |             testb   sstart0,#31 wz 
385b0     08 C2 65 50 |     if_nz   shl     spl,#8
385b4     08 D2 65 50 |     if_nz   shl     pointer0,#8
385b8     07 D2 65 A0 |     if_z    shl     pointer0,#7
385bc     1C D6 0D F4 |             testb   sstart0,#28 wz            
385c0     01 D2 45 A0 |     if_z    shr     pointer0,#1    
385c4     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
385c8                 | 
385c8                 | 
385c8     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
385cc     00 C2 01 F6 |             mov     spl,0-0
385d0     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
385d4     00 C2 01 F6 |             mov     spl,0-0
385d8                 | 
385d8     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
385dc     00 06 02 F6 |             mov     ls0,0-0
385e0     20 00 00 FF 
385e4     00 C0 05 F6 |             mov     qq,##16384
385e8     FC C0 81 F1 |             sub     qq,apan0
385ec     E0 C2 31 FA |             scas    spl,qq
385f0     00 08 02 F6 |             mov     rs0, 0-0
385f4                 | 
385f4     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
385f8     04 0D 02 F1 |             add     rs,rs0
385fc     01 0B 82 F1 |             sub     ls,oldls
38600     03 0B 02 F1 |             add     ls,ls0
38604                 |    
38604     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
38608     03 D5 21 F9 |             setword sample0,ls0,#0
3860c                 |             
3860c     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
38610     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
38614     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
38618                 |   '  if_z    mov     sample0,#0
38618     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3861c     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
38620     04 00 00 AF 
38624     00 AC 05 A1 |     if_z    add     time1,##2048
38628     D6 AE 01 A6 |     if_z    mov     time2,time1
3862c     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
38630                 | 
38630     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
38634     00 D3 65 FC |             wrlong  pointer0,ptra
38638     08 E3 65 FC |             wrlong  envph0,ptra[8]
3863c     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
38640                 |                       
38640     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
38644     FF BF 25 A7 |     if_z    decmod  front, #511          
38648                 |          
38648     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3864c     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
38650     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
38654     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
38658                 | 	    
38658                 | 		    
38658     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3865c     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
38660     02 11 02 F6 |             mov     newsample, oldrs       
38664                 | 
38664     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
38668     00 AB 01 F1 |             add     time0,dt0    
3866c                 |                                      
3866c     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
38670     D8 FD 9F AD |     if_z    jmp     #loop1
38674     00 C1 01 F6 |             mov     qq,dt0
38678                 |   
38678     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3867c     00 BE 9D F2 |             cmpr    front, #0-0 wcz
38680     F4 FF 9F AD |     if_e    jmp     #p301    
38684                 | 		
38684     00 16 0E F2 | 	    cmp     scbase,#0 wz
38688     20 00 90 AD |     if_z    jmp     #p302	   
3868c                 |   
3868c     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
38690     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
38694     02 1A 66 C0 |     if_c    shl     scptr2,#2
38698     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
3869c     60 1A 66 FC |             wrlong  scptr2,#$60
386a0     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
386a4     01 00 00 CF 
386a8     7F 18 06 C7 |     if_c    incmod  scptr,##639
386ac                 | 			    
386ac     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
386b0     00 00 00 FF 
386b4     FF BF 05 F7 |             incmod  front, ##511
386b8     EF C1 6D FB |             djnz    qq,#p301
386bc                 |             
386bc     74 FD 9F FD |             jmp     #loop            'loop
386c0                 | 
386c0                 | '----------------------------------------------------------------------------------
386c0                 | '------------- This is the end of the main loop -----------------------------------
386c0                 | '----------------------------------------------------------------------------------
386c0                 | 
386c0                 | '----------------------------------------------------------------------------------
386c0                 | '------------- PSRAM cache ----------- --------------------------------------------
386c0                 | '----------------------------------------------------------------------------------
386c0                 | 
386c0                 | ' There are 8 cache pointers for 8 channels
386c0                 | ' if 24 higher bits of address=cache, then get a word from the cache
386c0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
386c0                 | 
386c0                 | 
386c0     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
386c4                 |             
386c4     E0 3C 02 F6 | 	    mov     addrhi,qq		
386c8     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
386cc     12 FD 95 F9 | 	    alts    cn,#cache1            
386d0     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
386d4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
386d8                 | 	
386d8     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
386dc     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
386e0     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
386e4     08 34 66 F0 | 	    shl     cmd,#8
386e8     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
386ec     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
386f0     08 36 66 F0 |             shl     hubaddr,#8                  '
386f4     11 37 02 F1 |             add     hubaddr,hubptr 
386f8     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
386fc     28 04 64 FD |             setq    #2                          ' write 3 longs
38700     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
38704     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
38708     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3870c                 |             
3870c                 | 	
3870c     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
38710     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
38714     11 C1 01 F1 | 	    add     qq,hubptr
38718     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3871c     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
38720                 |           
38720                 | 
38720                 | '--------------------------------------------------------------------------
38720                 | '------ Interrupt service -------------------------------------------------
38720                 | '------ Output the sample, get the next one if exists ---------------------
38720                 | '--------------------------------------------------------------------------
38720                 | 
38720     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
38724     0F CC 25 FC |             wypin   rsample,#right       '4
38728     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3872c     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
38730     FF F3 07 57 |     if_ne   incmod  ptrb,#511
38734     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
38738     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3873c                 |     
3873c     F5 FF 3B FB |             reti1                        '17/19 
38740                 |           
38740                 | '---------------------------------------------------------------------------
38740                 | '-------- End of interrupt -------------------------------------------------
38740                 | '---------------------------------------------------------------------------    
38740                 | 
38740                 | 
38740                 | '---------------------------------------------------------------------------
38740                 | '------- Variables ---------------------------------------------------------
38740                 | '---------------------------------------------------------------------------
38740                 | 
38740                 | ' constants
38740                 | 
38740     00 00 00 40 | a40000000   long $40000000
38744     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
38748                 | 
38748                 | ' Time variables
38748                 | 
38748     00 00 00 00 | time0       long 0    ' Global sample computing time
3874c     01 00 00 00 | time1       long 1    ' Local channels time
38750     02 00 00 00 | time2       long 2
38754     03 00 00 00 | time3       long 3
38758     04 00 00 00 | time4       long 4
3875c     05 00 00 00 | time5       long 5
38760     06 00 00 00 | time6       long 6
38764     07 00 00 00 | time7       long 7
38768     08 00 00 00 | time8       long 8
3876c                 | 
3876c     00 00 00 00 | channeladd long 0
38770                 | 
38770     00 00 00 00 | front       long 0
38774                 | 
38774                 | ' temporary variables 
38774     00 00 00 00 | qq          long 0
38778     00 00 00 00 | spl         long 0
3877c     00 00 00 00 | zero        long 0
38780     00 00 00 00 | mailbox     long 0
38784     00 00 00 00 | mailbox2 long 0
38788                 | 
38788                 | ' Interrupt ISR variables
38788                 | 
38788     00 00 00 00 | lsample     long 0
3878c     00 00 00 00 | rsample     long 0
38790     00 00 00 00 | lsnext      long 0
38794     00 00 00 00 | rsnext      long 0 
38798                 | 
38798                 | ' channel parameter block
38798                 | 
38798     00 00 00 00 | pointer0    long 0     
3879c     00 00 00 00 | sample0     long 0
387a0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
387a4     00 00 00 00 | lstart0     long 0
387a8     00 00 00 00 | lend0       long 0
387ac     00 00 00 00 | volpan0     long 0
387b0     00 00 00 00 | freqskip0   long 0
387b4     00 00 00 00 | command0    long 0
387b8     00 00 00 00 | envph0	    long 0
387bc     00 00 00 00 | envptr0	    long 0
387c0     00 00 00 00 | envspd0	    long 0
387c4     00 00 00 00 | envlen0	    long 0
387c8     00 00 00 00 | res5	    long 0
387cc     00 00 00 00 | res6	    long 0
387d0     00 00 00 00 | res7	    long 0
387d4     00 00 00 00 | res8	    long 0
387d8                 | 
387d8     00 00 00 00 | afreq0      long 0
387dc     00 00 00 00 | askip0      long 0
387e0     00 00 00 00 | avol0       long 0
387e4     00 00 00 00 | apan0       long 0
387e8                 | 
387e8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
387ec     00 00 00 00 | cn          long 0
387f0     00 00 00 00 | ct          long 0
387f4     00 00 00 00 | dt0         long 0
387f8                 | 
387f8                 | ' Samples
387f8     00 00 00 00 | oldls       long 0
387fc     00 00 00 00 | oldrs       long 0
38800                 | 
38800     00 00 00 00 | ls0         long 0
38804     00 00 00 00 | rs0         long 0
38808                 | 
38808     00 00 00 00 | ls          long 0    
3880c     00 00 00 00 | rs          long 0
38810                 | 
38810     00 00 00 00 | oldsample   long 0
38814     00 00 00 00 | newsample   long 0
38818                 | 
38818     00 00 00 00 | nrsample    long 0
3881c     00 00 00 00 | nlsample    long 0
38820                 | 
38820     00 00 00 00 | scbase long 0
38824     00 00 00 00 | scptr long 0
38828     00 00 00 00 | scptr2 long 0
3882c     00 00 00 00 | scope long 0
38830                 | 
38830     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
38834     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
38838                 | 
38838     00 18 07 00 | hubptr      long $71800
3883c     00 00 00 00 | cache1      long 0
38840     00 00 00 00 | cache2      long 0
38844     00 00 00 00 | cache3      long 0
38848     00 00 00 00 | cache4      long 0
3884c     00 00 00 00 | cache5      long 0
38850     00 00 00 00 | cache6      long 0
38854     00 00 00 00 | cache7      long 0
38858     00 00 00 00 | cache8      long 0
3885c                 | 
3885c                 | 
3885c     00 00 00 00 | cmd         long 0
38860     00 00 00 00 | hubaddr     long 0
38864     00 01 00 00 | count       long 256
38868     00 00 00 00 | addrlo long 0
3886c     00 00 00 00 | addrhi long 0
38870     00 00 00 00 | pointer00 long 0
38874     00 00 00 00 | envhi long 0
38878     00 00 00 00 | envlo long 0
3887c     00 00 00 00 | envs1 long 0
38880     00 00 00 00 | envs2 long 0
38884     00 00 00 00 | noise0 long 0
38888     00 00 00 00 
3888c     00 00 00 00 | null  			long 	0,0           ' for channel reset
38890                 | 	alignl
38890                 | __system__dat_
38890     00 00 00 00 
38894     00 00 00 00 | 	byte	$00[8]
38898     03 00 00 00 
3889c     00 00 00 00 
388a0     00 00 00 00 
388a4     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
388a8     00 00 00 00 
      ...             
38b34     00 00 00 00 
38b38     00 00 00 00 | 	byte	$00[660]
38b3c     00 00 B0 08 | 	long	(139 {__system____root_opendir})<<20
38b40     00 00 C0 08 | 	long	(140 {__system____root_closedir})<<20
38b44     00 00 D0 08 | 	long	(141 {__system____root_readdir})<<20
38b48     00 00 E0 08 | 	long	(142 {__system____root_stat})<<20
38b4c     00 00 00 00 
38b50     00 00 00 00 
38b54     00 00 00 00 
38b58     00 00 00 00 
38b5c     00 00 00 00 
38b60     00 00 00 00 
38b64     00 00 00 00 | 	byte	$00[28]
38b68     D0 8B 03 00 | 	long	@@@__system__dat_ + 832
38b6c     D3 8B 03 00 | 	long	@@@__system__dat_ + 835
38b70     F4 8B 03 00 | 	long	@@@__system__dat_ + 868
38b74     0D 8C 03 00 | 	long	@@@__system__dat_ + 893
38b78     28 8C 03 00 | 	long	@@@__system__dat_ + 920
38b7c     42 8C 03 00 | 	long	@@@__system__dat_ + 946
38b80     52 8C 03 00 | 	long	@@@__system__dat_ + 962
38b84     64 8C 03 00 | 	long	@@@__system__dat_ + 980
38b88     76 8C 03 00 | 	long	@@@__system__dat_ + 998
38b8c     88 8C 03 00 | 	long	@@@__system__dat_ + 1016
38b90     94 8C 03 00 | 	long	@@@__system__dat_ + 1028
38b94     A5 8C 03 00 | 	long	@@@__system__dat_ + 1045
38b98     B9 8C 03 00 | 	long	@@@__system__dat_ + 1065
38b9c     C3 8C 03 00 | 	long	@@@__system__dat_ + 1075
38ba0     D3 8C 03 00 | 	long	@@@__system__dat_ + 1091
38ba4     E2 8C 03 00 | 	long	@@@__system__dat_ + 1106
38ba8     F8 8C 03 00 | 	long	@@@__system__dat_ + 1128
38bac     11 8D 03 00 | 	long	@@@__system__dat_ + 1153
38bb0     25 8D 03 00 | 	long	@@@__system__dat_ + 1173
38bb4     33 8D 03 00 | 	long	@@@__system__dat_ + 1187
38bb8     47 8D 03 00 | 	long	@@@__system__dat_ + 1207
38bbc     53 8D 03 00 | 	long	@@@__system__dat_ + 1219
38bc0     65 8D 03 00 | 	long	@@@__system__dat_ + 1237
38bc4     7D 8D 03 00 | 	long	@@@__system__dat_ + 1261
38bc8     8F 8D 03 00 | 	long	@@@__system__dat_ + 1279
38bcc     A2 8D 03 00 | 	long	@@@__system__dat_ + 1298
38bd0     4F 4B 00 4E 
38bd4     75 6D 65 72 
38bd8     69 63 61 6C 
38bdc     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
38be0     75 6D 65 6E 
38be4     74 20 6F 75 
38be8     74 20 6F 66 
38bec     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
38bf0     61 69 6E 00 
38bf4     52 65 73 75 
38bf8     6C 74 20 6E 
38bfc     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
38c00     65 70 72 65 
38c04     73 65 6E 74 
38c08     61 62 6C 65 
38c0c     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
38c10     65 67 61 6C 
38c14     20 6D 75 6C 
38c18     74 69 62 79 
38c1c     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
38c20     65 71 75 65 
38c24     6E 63 65 00 
38c28     4E 6F 20 73 
38c2c     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
38c30     66 69 6C 65 
38c34     20 6F 72 20 
38c38     64 69 72 65 
38c3c     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
38c40     79 00 42 61 
38c44     64 20 66 69 
38c48     6C 65 20 6E 
38c4c     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
38c50     72 00 50 65 
38c54     72 6D 69 73 
38c58     73 69 6F 6E 
38c5c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
38c60     69 65 64 00 
38c64     4E 6F 74 20 
38c68     65 6E 6F 75 
38c6c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
38c70     65 6D 6F 72 
38c74     79 00 54 65 
38c78     6D 70 6F 72 
38c7c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
38c80     66 61 69 6C 
38c84     75 72 65 00 
38c88     46 69 6C 65 
38c8c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
38c90     73 74 73 00 
38c94     49 6E 76 61 
38c98     6C 69 64 20 
38c9c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
38ca0     6D 65 6E 74 
38ca4     00 54 6F 6F 
38ca8     20 6D 61 6E 
38cac     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
38cb0     65 6E 20 66 
38cb4     69 6C 65 73 
38cb8     00 49 2F 4F 
38cbc     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
38cc0     6F 72 00 4E 
38cc4     6F 74 20 61 
38cc8     20 64 69 72 
38ccc     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
38cd0     72 79 00 49 
38cd4     73 20 61 20 
38cd8     64 69 72 65 
38cdc     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
38ce0     79 00 52 65 
38ce4     61 64 20 6F 
38ce8     6E 6C 79 20 
38cec     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
38cf0     20 73 79 73 
38cf4     74 65 6D 00 
38cf8     46 75 6E 63 
38cfc     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
38d00     20 6E 6F 74 
38d04     20 69 6D 70 
38d08     6C 65 6D 65 
38d0c     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
38d10     00 44 69 72 
38d14     65 63 74 6F 
38d18     72 79 20 6E 
38d1c     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
38d20     6D 70 74 79 
38d24     00 4E 61 6D 
38d28     65 20 74 6F 
38d2c     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
38d30     6E 67 00 44 
38d34     65 76 69 63 
38d38     65 20 6E 6F 
38d3c     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
38d40     65 6B 61 62 
38d44     6C 65 00 42 
38d48     61 64 20 61 
38d4c     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
38d50     73 73 00 42 
38d54     72 6F 6B 65 
38d58     6E 20 63 6F 
38d5c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
38d60     74 69 6F 6E 
38d64     00 44 65 76 
38d68     69 63 65 20 
38d6c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
38d70     65 73 6F 75 
38d74     72 63 65 20 
38d78     62 75 73 79 
38d7c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
38d80     73 73 20 64 
38d84     65 76 69 63 
38d88     65 20 6C 69 
38d8c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
38d90     6F 20 73 70 
38d94     61 63 65 20 
38d98     6F 6E 20 64 
38d9c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
38da0     65 00 55 6E 
38da4     6B 6E 6F 77 
38da8     6E 20 65 72 
38dac     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
38db0     00 00 00 00 
38db4     00 00 00 00 | 	byte	$00[8]
38db8     05 00 00 00 
38dbc     00 00 00 00 
38dc0     00 00 00 00 
38dc4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38dc8     00 00 00 00 | 	byte	$00, $00, $00, $00
38dcc     00 00 30 0A | 	long	(163 {__system___tx})<<20
38dd0     00 00 40 0A | 	long	(164 {__system___rx})<<20
38dd4     00 00 00 00 | 	byte	$00, $00, $00, $00
38dd8     00 00 50 0A | 	long	(165 {__system___rxtxioctl_0641})<<20
38ddc     00 00 60 0A | 	long	(166 {__system____dummy_flush_0642})<<20
38de0     00 00 00 00 
38de4     00 00 00 00 | 	byte	$00[8]
38de8     01 00 00 00 
38dec     06 00 00 00 
38df0     00 00 00 00 
38df4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38df8     00 00 00 00 
38dfc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38e00     00 00 30 0A | 	long	(163 {__system___tx})<<20
38e04     00 00 40 0A | 	long	(164 {__system___rx})<<20
38e08     00 00 00 00 | 	byte	$00, $00, $00, $00
38e0c     00 00 50 0A | 	long	(165 {__system___rxtxioctl_0641})<<20
38e10     00 00 60 0A | 	long	(166 {__system____dummy_flush_0642})<<20
38e14     00 00 00 00 
38e18     00 00 00 00 | 	byte	$00[8]
38e1c     01 00 00 00 
38e20     06 00 00 00 
38e24     00 00 00 00 
38e28     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38e2c     00 00 00 00 
38e30     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38e34     00 00 30 0A | 	long	(163 {__system___tx})<<20
38e38     00 00 40 0A | 	long	(164 {__system___rx})<<20
38e3c     00 00 00 00 | 	byte	$00, $00, $00, $00
38e40     00 00 50 0A | 	long	(165 {__system___rxtxioctl_0641})<<20
38e44     00 00 60 0A | 	long	(166 {__system____dummy_flush_0642})<<20
38e48     00 00 00 00 
      ...             
38fb8     00 00 00 00 
38fbc     00 00 00 00 | 	byte	$00[376]
38fc0     C4 8F 03 00 | 	long	@@@__system__dat_ + 1844
38fc4     00 00 00 00 
38fc8     00 00 00 00 
38fcc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38fd0                 | 	alignl
38fd0                 | _fatfs_cc_dat_
38fd0     C7 00 FC 00 
38fd4     E9 00 E2 00 
38fd8     E4 00 E0 00 
38fdc     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
38fe0     EA 00 EB 00 
38fe4     E8 00 EF 00 
38fe8     EE 00 EC 00 
38fec     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
38ff0     C9 00 E6 00 
38ff4     C6 00 F4 00 
38ff8     F6 00 F2 00 
38ffc     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
39000     FF 00 D6 00 
39004     DC 00 F8 00 
39008     A3 00 D8 00 
3900c     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
39010     E1 00 ED 00 
39014     F3 00 FA 00 
39018     F1 00 D1 00 
3901c     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
39020     BF 00 AE 00 
39024     AC 00 BD 00 
39028     BC 00 A1 00 
3902c     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
39030     91 25 92 25 
39034     93 25 02 25 
39038     24 25 C1 00 
3903c     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
39040     A9 00 63 25 
39044     51 25 57 25 
39048     5D 25 A2 00 
3904c     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
39050     14 25 34 25 
39054     2C 25 1C 25 
39058     00 25 3C 25 
3905c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
39060     5A 25 54 25 
39064     69 25 66 25 
39068     60 25 50 25 
3906c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
39070     F0 00 D0 00 
39074     CA 00 CB 00 
39078     C8 00 31 01 
3907c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
39080     CF 00 18 25 
39084     0C 25 88 25 
39088     84 25 A6 00 
3908c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
39090     D3 00 DF 00 
39094     D4 00 D2 00 
39098     F5 00 D5 00 
3909c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
390a0     DE 00 DA 00 
390a4     DB 00 D9 00 
390a8     FD 00 DD 00 
390ac     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
390b0     AD 00 B1 00 
390b4     17 20 BE 00 
390b8     B6 00 A7 00 
390bc     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
390c0     B0 00 A8 00 
390c4     B7 00 B9 00 
390c8     B3 00 B2 00 
390cc     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
390d0     61 00 1A 03 
390d4     E0 00 17 03 
390d8     F8 00 07 03 
390dc     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
390e0     78 01 00 01 
390e4     30 01 32 01 
390e8     06 01 39 01 
390ec     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
390f0     2E 01 79 01 
390f4     06 01 80 01 
390f8     4D 00 43 02 
390fc     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
39100     82 01 84 01 
39104     84 01 86 01 
39108     87 01 87 01 
3910c     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
39110     8B 01 8B 01 
39114     8D 01 8E 01 
39118     8F 01 90 01 
3911c     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
39120     93 01 94 01 
39124     F6 01 96 01 
39128     97 01 98 01 
3912c     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
39130     9B 01 9C 01 
39134     9D 01 20 02 
39138     9F 01 A0 01 
3913c     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
39140     A2 01 A4 01 
39144     A4 01 A6 01 
39148     A7 01 A7 01 
3914c     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
39150     AB 01 AC 01 
39154     AC 01 AE 01 
39158     AF 01 AF 01 
3915c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
39160     B3 01 B3 01 
39164     B5 01 B5 01 
39168     B7 01 B8 01 
3916c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
39170     BB 01 BC 01 
39174     BC 01 BE 01 
39178     F7 01 C0 01 
3917c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
39180     C3 01 C4 01 
39184     C5 01 C4 01 
39188     C7 01 C8 01 
3918c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
39190     CB 01 CA 01 
39194     CD 01 10 01 
39198     DD 01 01 00 
3919c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
391a0     12 01 F3 01 
391a4     03 00 F1 01 
391a8     F4 01 F4 01 
391ac     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
391b0     22 02 12 01 
391b4     3A 02 09 00 
391b8     65 2C 3B 02 
391bc     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
391c0     66 2C 3F 02 
391c4     40 02 41 02 
391c8     41 02 46 02 
391cc     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
391d0     40 00 81 01 
391d4     86 01 55 02 
391d8     89 01 8A 01 
391dc     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
391e0     5A 02 90 01 
391e4     5C 02 5D 02 
391e8     5E 02 5F 02 
391ec     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
391f0     62 02 94 01 
391f4     64 02 65 02 
391f8     66 02 67 02 
391fc     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
39200     6A 02 62 2C 
39204     6C 02 6D 02 
39208     6E 02 9C 01 
3920c     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
39210     9D 01 73 02 
39214     74 02 9F 01 
39218     76 02 77 02 
3921c     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
39220     7A 02 7B 02 
39224     7C 02 64 2C 
39228     7E 02 7F 02 
3922c     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
39230     82 02 A9 01 
39234     84 02 85 02 
39238     86 02 87 02 
3923c     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
39240     B1 01 B2 01 
39244     45 02 8D 02 
39248     8E 02 8F 02 
3924c     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
39250     B7 01 7B 03 
39254     03 00 FD 03 
39258     FE 03 FF 03 
3925c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
39260     86 03 88 03 
39264     89 03 8A 03 
39268     B1 03 11 03 
3926c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
39270     A3 03 A3 03 
39274     C4 03 08 03 
39278     CC 03 03 00 
3927c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
39280     8F 03 D8 03 
39284     18 01 F2 03 
39288     0A 00 F9 03 
3928c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
39290     F5 03 F6 03 
39294     F7 03 F7 03 
39298     F9 03 FA 03 
3929c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
392a0     20 03 50 04 
392a4     10 07 60 04 
392a8     22 01 8A 04 
392ac     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
392b0     0E 01 CF 04 
392b4     01 00 C0 04 
392b8     D0 04 44 01 
392bc     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
392c0     00 00 7D 1D 
392c4     01 00 63 2C 
392c8     00 1E 96 01 
392cc     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
392d0     00 1F 08 06 
392d4     10 1F 06 06 
392d8     20 1F 08 06 
392dc     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
392e0     40 1F 06 06 
392e4     51 1F 07 00 
392e8     59 1F 52 1F 
392ec     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
392f0     5D 1F 56 1F 
392f4     5F 1F 60 1F 
392f8     08 06 70 1F 
392fc     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
39300     BB 1F C8 1F 
39304     C9 1F CA 1F 
39308     CB 1F DA 1F 
3930c     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
39310     F9 1F EA 1F 
39314     EB 1F FA 1F 
39318     FB 1F 80 1F 
3931c     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
39320     08 06 A0 1F 
39324     08 06 B0 1F 
39328     04 00 B8 1F 
3932c     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
39330     BC 1F CC 1F 
39334     01 00 C3 1F 
39338     D0 1F 02 06 
3933c     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
39340     E5 1F 01 00 
39344     EC 1F F3 1F 
39348     01 00 FC 1F 
3934c     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
39350     32 21 70 21 
39354     10 02 84 21 
39358     01 00 83 21 
3935c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
39360     30 2C 2F 04 
39364     60 2C 02 01 
39368     67 2C 06 01 
3936c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
39370     80 2C 64 01 
39374     00 2D 26 08 
39378     41 FF 1A 03 
3937c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
39380     05 07 09 0E 
39384     10 12 14 16 
39388     18 1C 1E 43 
3938c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
39390     41 41 43 45 
39394     45 45 49 49 
39398     49 41 41 45 
3939c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
393a0     4F 55 55 59 
393a4     4F 55 4F 9C 
393a8     4F 9E 9F 41 
393ac     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
393b0     A5 A6 A7 A8 
393b4     A9 AA AB AC 
393b8     AD AE AF B0 
393bc     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
393c0     41 41 41 B8 
393c4     B9 BA BB BC 
393c8     BD BE BF C0 
393cc     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
393d0     C5 41 41 C8 
393d4     C9 CA CB CC 
393d8     CD CE CF D1 
393dc     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
393e0     49 49 49 49 
393e4     D9 DA DB DC 
393e8     DD 49 DF 4F 
393ec     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
393f0     4F E6 E8 E8 
393f4     55 55 55 59 
393f8     59 EE EF F0 
393fc     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
39400     F5 F6 F7 F8 
39404     F9 FA FB FC 
39408     FD FE FF 00 
3940c     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
39410     00 00 00 00 | 	byte	$00, $00, $00, $00
39414     00 00 20 09 | 	long	(146 {_fatfs_cc_v_close})<<20
39418     00 00 30 09 | 	long	(147 {_fatfs_cc_v_read})<<20
3941c     00 00 40 09 | 	long	(148 {_fatfs_cc_v_write})<<20
39420     00 00 50 09 | 	long	(149 {_fatfs_cc_v_lseek})<<20
39424     00 00 60 09 | 	long	(150 {_fatfs_cc_v_ioctl})<<20
39428     00 00 70 0A | 	long	(167 {_fatfs_cc_v_flush})<<20
3942c     00 00 00 00 
39430     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
39434     00 00 70 09 | 	long	(151 {_fatfs_cc_v_open})<<20
39438     00 00 80 09 | 	long	(152 {_fatfs_cc_v_creat})<<20
3943c     00 00 90 09 | 	long	(153 {_fatfs_cc_v_opendir})<<20
39440     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_closedir})<<20
39444     00 00 B0 09 | 	long	(155 {_fatfs_cc_v_readdir})<<20
39448     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_stat})<<20
3944c     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_mkdir})<<20
39450     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_rmdir})<<20
39454     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_remove})<<20
39458     00 00 00 0A | 	long	(160 {_fatfs_cc_v_rename})<<20
3945c     00 00 10 0A | 	long	(161 {_fatfs_cc_v_init})<<20
39460     00 00 20 0A | 	long	(162 {_fatfs_cc_v_deinit})<<20
39464     FF FF FF FF 
39468     1F 00 00 00 
3946c     1C 00 00 00 
39470     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
39474     1E 00 00 00 
39478     1F 00 00 00 
3947c     1E 00 00 00 
39480     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
39484     1F 00 00 00 
39488     1E 00 00 00 
3948c     1F 00 00 00 
39490     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
39494     1F 00 00 00 
39498     00 00 00 00 
3949c     1F 00 00 00 
394a0     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
394a4     5A 00 00 00 
394a8     78 00 00 00 
394ac     97 00 00 00 
394b0     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
394b4     D4 00 00 00 
394b8     F3 00 00 00 
394bc     11 01 00 00 
394c0     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
394c4     4E 01 00 00 
394c8     6D 01 00 00 
394cc     FF FF FF FF 
394d0     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
394d4     00 00 00 00 
      ...             
394ec     00 00 00 00 
394f0     00 00 00 00 | 	byte	$00[32]
394f4     12 95 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
394f8     16 95 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
394fc     00 00 00 00 
39500     00 00 00 00 
39504     00 00 00 00 
39508     00 00 00 00 
3950c     00 00       | 	byte	$00[18]
3950e     3F 3F 3F 00 
39512     55 43 54 00 
39516     55 43 54 00 
3951a     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3951e     00 00 00 00 
39522     00 00 00    | 	byte	$00[7]
39525     CA 9A 3B 00 
39529     00 00 00 01 
3952d     01 01 01 01 
39531     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
39535     91 11 11 11 
39539     11 01 01 01 
3953d     01 01 01 01 
39541     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
39545     01 01 01 01 
39549     01 01 01    | 	byte	$01[7]
3954c     90 20 20 20 
39550     20 20 20 20 
39554     20 20 20 20 
39558     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3955c     42 42 42 42 
39560     42 42 42 42 
39564     42 42       | 	byte	$42[10]
39566     20 20 20 20 
3956a     20 20 20    | 	byte	$20[7]
3956d     44 44 44 44 
39571     44 44       | 	byte	$44[6]
39573     04 04 04 04 
39577     04 04 04 04 
3957b     04 04 04 04 
3957f     04 04 04 04 
39583     04 04 04 04 | 	byte	$04[20]
39587     20 20 20 20 
3958b     20 20       | 	byte	$20[6]
3958d     48 48 48 48 
39591     48 48       | 	byte	$48[6]
39593     08 08 08 08 
39597     08 08 08 08 
3959b     08 08 08 08 
3959f     08 08 08 08 
395a3     08 08 08 08 | 	byte	$08[20]
395a7     20 20 20 20 
395ab     01 00 00 00 
395af     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
395b0                 | __methodtable__
395b0     78 8A 01 00 | 	long	@_do_no_command
395b4     FC FF 00 00 | 	long	@_do_plus
395b8     E8 04 01 00 | 	long	@_do_minus
395bc     B0 09 01 00 | 	long	@_do_or
395c0     C8 0A 01 00 | 	long	@_do_mul
395c4     54 10 01 00 | 	long	@_do_fdiv
395c8     98 08 01 00 | 	long	@_do_and
395cc     34 0E 01 00 | 	long	@_do_div
395d0     1C 12 01 00 | 	long	@_do_mod
395d4     3C 14 01 00 | 	long	@_do_shl
395d8     54 15 01 00 | 	long	@_do_shr
395dc     6C 16 01 00 | 	long	@_do_power
395e0     7C F3 00 00 | 	long	@_do_getvar
395e4     10 AA 00 00 | 	long	@_do_push
395e8     7C ED 00 00 | 	long	@_do_assign
395ec     08 5C 01 00 | 	long	@_do_cls
395f0     C8 E5 00 00 | 	long	@_do_new
395f4     80 5C 01 00 | 	long	@_do_plot
395f8     50 5D 01 00 | 	long	@_do_draw
395fc     C4 66 01 00 | 	long	@_do_print
39600     BC 5F 01 00 | 	long	@_do_circle
39604     44 5E 01 00 | 	long	@_do_fcircle
39608     34 61 01 00 | 	long	@_do_box
3960c     DC 64 01 00 | 	long	@_do_frame
39610     48 5C 01 00 | 	long	@_do_color
39614     E0 85 00 00 | 	long	@_do_for
39618     38 89 00 00 | 	long	@_do_next
3961c     2C E3 00 00 | 	long	@_do_list
39620     9C BD 00 00 | 	long	@_do_run
39624     38 EC 00 00 | 	long	@_do_error
39628     A8 E7 00 00 | 	long	@_do_fast_goto
3962c     98 E8 00 00 | 	long	@_do_find_goto
39630     A8 EA 00 00 | 	long	@_do_slow_goto
39634     94 86 01 00 | 	long	@_do_nothing
39638     54 B0 00 00 | 	long	@_test_csave
3963c     B8 B3 00 00 | 	long	@_do_save
39640     B4 B7 00 00 | 	long	@_do_load
39644     70 75 01 00 | 	long	@_do_pinwrite
39648     0C 80 01 00 | 	long	@_do_waitms
3964c     48 81 01 00 | 	long	@_do_waitvbl
39650     E8 84 01 00 | 	long	@_do_if
39654     CC 85 01 00 | 	long	@_do_else
39658     34 18 01 00 | 	long	@_do_eq
3965c     AC 26 01 00 | 	long	@_do_ge
39660     84 2B 01 00 | 	long	@_do_le
39664     0C 1D 01 00 | 	long	@_do_gt
39668     E4 21 01 00 | 	long	@_do_lt
3966c     5C 30 01 00 | 	long	@_do_ne
39670     84 36 01 00 | 	long	@_do_rnd
39674     98 86 01 00 | 	long	@_do_brun
39678     64 89 01 00 | 	long	@_do_beep
3967c     78 81 01 00 | 	long	@_do_dir
39680     8C 6B 01 00 | 	long	@_do_paper
39684     14 6C 01 00 | 	long	@_do_ink
39688     B0 6C 01 00 | 	long	@_do_font
3968c     2C 6D 01 00 | 	long	@_do_mode
39690     D0 88 01 00 | 	long	@_do_mouse
39694     A0 5B 01 00 | 	long	@_do_gettime
39698     04 89 01 00 | 	long	@_do_cursor
3969c     38 89 01 00 | 	long	@_do_click
396a0     2C 59 01 00 | 	long	@_do_mousex
396a4     70 59 01 00 | 	long	@_do_mousey
396a8     F8 59 01 00 | 	long	@_do_mousek
396ac     B4 59 01 00 | 	long	@_do_mousew
396b0     58 39 01 00 | 	long	@_do_sin
396b4     FC 4E 01 00 | 	long	@_do_stick
396b8     80 50 01 00 | 	long	@_do_strig
396bc     40 58 01 00 | 	long	@_do_sprite
396c0     CC 54 01 00 | 	long	@_do_defsprite
396c4     04 52 01 00 | 	long	@_do_getpixel
396c8     54 81 01 00 | 	long	@_do_waitclock
396cc     84 8A 01 00 | 	long	@_do_negative
396d0     3C 5A 01 00 | 	long	@_do_rdpin
396d4     A8 5A 01 00 | 	long	@_do_rqpin
396d8     1C 5B 01 00 | 	long	@_do_pinread
396dc     08 78 01 00 | 	long	@_do_wrpin
396e0     88 78 01 00 | 	long	@_do_wxpin
396e4     08 79 01 00 | 	long	@_do_wypin
396e8     F8 75 01 00 | 	long	@_do_pinfloat
396ec     38 76 01 00 | 	long	@_do_pinlo
396f0     78 76 01 00 | 	long	@_do_pinhi
396f4     F8 76 01 00 | 	long	@_do_pinstart
396f8     B8 76 01 00 | 	long	@_do_pintoggle
396fc     88 79 01 00 | 	long	@_do_position
39700     B4 48 01 00 | 	long	@_do_cos
39704     D4 49 01 00 | 	long	@_do_tan
39708     F8 4C 01 00 | 	long	@_do_atn
3970c     E0 4A 01 00 | 	long	@_do_asin
39710     EC 4B 01 00 | 	long	@_do_acos
39714     0C 4E 01 00 | 	long	@_do_sqr
39718     1C 63 01 00 | 	long	@_do_fill
3971c     40 DA 00 00 | 	long	@_do_defsnd
39720     E8 C0 00 00 | 	long	@_do_defenv
39724     F0 85 01 00 | 	long	@_do_rad
39728     18 86 01 00 | 	long	@_do_deg
3972c     40 86 01 00 | 	long	@_do_int
39730     7C CD 00 00 | 	long	@_do_play
39734     D0 72 01 00 | 	long	@_do_setdelay
39738     28 72 01 00 | 	long	@_do_setenv
3973c     78 73 01 00 | 	long	@_do_setlen
39740     C8 74 01 00 | 	long	@_do_setpan
39744     20 74 01 00 | 	long	@_do_setvol
39748     D8 70 01 00 | 	long	@_do_setwave
3974c     80 71 01 00 | 	long	@_do_setsustain
39750     A8 D9 00 00 | 	long	@_do_release
39754     4C 38 01 00 | 	long	@_do_getenvsustain
39758     10 7A 01 00 | 	long	@_do_poke
3975c     E8 7A 01 00 | 	long	@_do_dpoke
39760     C0 7B 01 00 | 	long	@_do_lpoke
39764     98 7C 01 00 | 	long	@_do_peek
39768     48 7D 01 00 | 	long	@_do_dpeek
3976c     F4 7D 01 00 | 	long	@_do_lpeek
39770     04 7F 01 00 | 	long	@_do_adr
39774     A0 7E 01 00 | 	long	@_do_fre
39778     08 7F 01 00 | 	long	@_do_getnotevalue
3977c     34 F9 00 00 | 	long	@_do_getaddr
39780     24 FD 00 00 | 	long	@_do_inkey
39784     34 8B 01 00 | 	long	@_do_abs
39788     F4 45 01 00 | 	long	@_do_hex
3978c     54 47 01 00 | 	long	@_do_bin
39790     F0 42 01 00 | 	long	@_do_val
39794     F4 41 01 00 | 	long	@_do_chr
39798     30 3F 01 00 | 	long	@_do_asc
3979c     AC 3D 01 00 | 	long	@_do_left
397a0     28 3C 01 00 | 	long	@_do_right
397a4     64 3A 01 00 | 	long	@_do_mid
397a8     88 40 01 00 | 	long	@_do_len
397ac     C8 84 00 00 | 	long	@_do_gosub
397b0     54 88 00 00 | 	long	@_do_return
397b4     68 BD 00 00 | 	long	@_do_end
397b8     00 89 00 00 | 	long	@_do_pop
397bc     54 53 01 00 | 	long	@_do_log
397c0     F8 D7 01 00 | 	long	@_hg010b_spin2_putchar
397c4     AC E2 02 00 | 	long	@__struct___bas_wrap_sender_tx
397c8     F0 E2 02 00 | 	long	@__struct___bas_wrap_sender_rx
397cc     38 E3 02 00 | 	long	@__struct___bas_wrap_sender_close
397d0     DC E1 02 00 | 	long	@__struct__s_vfs_file_t_putchar
397d4     4C E2 02 00 | 	long	@__struct__s_vfs_file_t_getchar
397d8     94 E1 02 00 | 	long	@___strs_cl_pfunc
397dc     F0 40 02 00 | 	long	@__system____root_opendir
397e0     8C 41 02 00 | 	long	@__system____root_closedir
397e4     08 41 02 00 | 	long	@__system____root_readdir
397e8     94 41 02 00 | 	long	@__system____root_stat
397ec     1C 3A 02 00 | 	long	@__system____default_putc
397f0     A0 39 02 00 | 	long	@__system____default_getc
397f4     C4 3A 02 00 | 	long	@__system____default_flush
397f8     98 CC 02 00 | 	long	@_fatfs_cc_v_close
397fc     B4 D0 02 00 | 	long	@_fatfs_cc_v_read
39800     C8 D1 02 00 | 	long	@_fatfs_cc_v_write
39804     A8 D2 02 00 | 	long	@_fatfs_cc_v_lseek
39808     30 D3 02 00 | 	long	@_fatfs_cc_v_ioctl
3980c     84 D3 02 00 | 	long	@_fatfs_cc_v_open
39810     FC CB 02 00 | 	long	@_fatfs_cc_v_creat
39814     DC CC 02 00 | 	long	@_fatfs_cc_v_opendir
39818     50 CD 02 00 | 	long	@_fatfs_cc_v_closedir
3981c     90 CD 02 00 | 	long	@_fatfs_cc_v_readdir
39820     C4 CE 02 00 | 	long	@_fatfs_cc_v_stat
39824     44 D3 02 00 | 	long	@_fatfs_cc_v_mkdir
39828     64 D3 02 00 | 	long	@_fatfs_cc_v_rmdir
3982c     54 D3 02 00 | 	long	@_fatfs_cc_v_remove
39830     74 D3 02 00 | 	long	@_fatfs_cc_v_rename
39834     94 D4 02 00 | 	long	@_fatfs_cc_v_init
39838     9C D4 02 00 | 	long	@_fatfs_cc_v_deinit
3983c     C4 EE 01 00 | 	long	@__system___tx
39840     04 EF 01 00 | 	long	@__system___rx
39844     00 4D 02 00 | 	long	@__system___rxtxioctl_0641
39848     58 4D 02 00 | 	long	@__system____dummy_flush_0642
3984c     64 D4 02 00 | 	long	@_fatfs_cc_v_flush
39850                 | __heap_base
39850     00 00 00 00 
      ...             
68650     00 00 00 00 
68654     00 00 00 00 | 	long	0[48002]
68658                 | objmem
68658     00 00 00 00 
      ...             
73abc     00 00 00 00 
73ac0     00 00 00 00 | 	long	0[11547]
73ac4                 | stackspace
73ac4     00 00 00 00 | 	long	0[1]
73ac8 100             | 	org	COG_BSS_START
73ac8 100             | _var01
73ac8 100             | 	res	1
73ac8 101             | _var02
73ac8 101             | 	res	1
73ac8 102             | _var03
73ac8 102             | 	res	1
73ac8 103             | _var04
73ac8 103             | 	res	1
73ac8 104             | _var05
73ac8 104             | 	res	1
73ac8 105             | _var06
73ac8 105             | 	res	1
73ac8 106             | _var07
73ac8 106             | 	res	1
73ac8 107             | _var08
73ac8 107             | 	res	1
73ac8 108             | _var09
73ac8 108             | 	res	1
73ac8 109             | arg01
73ac8 109             | 	res	1
73ac8 10a             | arg02
73ac8 10a             | 	res	1
73ac8 10b             | arg03
73ac8 10b             | 	res	1
73ac8 10c             | arg04
73ac8 10c             | 	res	1
73ac8 10d             | arg05
73ac8 10d             | 	res	1
73ac8 10e             | arg06
73ac8 10e             | 	res	1
73ac8 10f             | local01
73ac8 10f             | 	res	1
73ac8 110             | local02
73ac8 110             | 	res	1
73ac8 111             | local03
73ac8 111             | 	res	1
73ac8 112             | local04
73ac8 112             | 	res	1
73ac8 113             | local05
73ac8 113             | 	res	1
73ac8 114             | local06
73ac8 114             | 	res	1
73ac8 115             | local07
73ac8 115             | 	res	1
73ac8 116             | local08
73ac8 116             | 	res	1
73ac8 117             | local09
73ac8 117             | 	res	1
73ac8 118             | local10
73ac8 118             | 	res	1
73ac8 119             | local11
73ac8 119             | 	res	1
73ac8 11a             | local12
73ac8 11a             | 	res	1
73ac8 11b             | local13
73ac8 11b             | 	res	1
73ac8 11c             | local14
73ac8 11c             | 	res	1
73ac8 11d             | local15
73ac8 11d             | 	res	1
73ac8 11e             | local16
73ac8 11e             | 	res	1
73ac8 11f             | local17
73ac8 11f             | 	res	1
73ac8 120             | local18
73ac8 120             | 	res	1
73ac8 121             | local19
73ac8 121             | 	res	1
73ac8 122             | local20
73ac8 122             | 	res	1
73ac8 123             | local21
73ac8 123             | 	res	1
73ac8 124             | local22
73ac8 124             | 	res	1
73ac8 125             | local23
73ac8 125             | 	res	1
73ac8 126             | local24
73ac8 126             | 	res	1
73ac8 127             | local25
73ac8 127             | 	res	1
73ac8 128             | local26
73ac8 128             | 	res	1
73ac8 129             | local27
73ac8 129             | 	res	1
73ac8 12a             | local28
73ac8 12a             | 	res	1
73ac8 12b             | local29
73ac8 12b             | 	res	1
73ac8 12c             | local30
73ac8 12c             | 	res	1
73ac8 12d             | local31
73ac8 12d             | 	res	1
73ac8 12e             | local32
73ac8 12e             | 	res	1
73ac8 12f             | local33
73ac8 12f             | 	res	1
73ac8 130             | local34
73ac8 130             | 	res	1
73ac8 131             | local35
73ac8 131             | 	res	1
73ac8 132             | muldiva_
73ac8 132             | 	res	1
73ac8 133             | muldivb_
73ac8 133             | 	res	1
73ac8 134             | 	fit	480
73ac8 134             | 
